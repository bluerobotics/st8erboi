
EthernetUdpHelloWorld.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0002b078  00004000  00004000  00004000  2**6
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .ARM.extab    000000fc  0002f078  0002f078  0002f078  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .ARM.exidx    00000188  0002f174  0002f174  0002f174  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .data         00000ac0  20000000  0002f2fc  00030000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  4 .bss          00009984  20000ac0  0002fdc0  00030ac0  2**4
                  ALLOC
  5 .ARM.attributes 00000030  00000000  00000000  00030ac0  2**0
                  CONTENTS, READONLY
  6 .comment      000000c9  00000000  00000000  00030af0  2**0
                  CONTENTS, READONLY
  7 .debug_info   000dc2f9  00000000  00000000  00030bb9  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00015f5b  00000000  00000000  0010ceb2  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_aranges 00002260  00000000  00000000  00122e0d  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 0000c1e8  00000000  00000000  0012506d  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_macro  00021b7c  00000000  00000000  00131255  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_line   0001ef59  00000000  00000000  00152dd1  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    000f5004  00000000  00000000  00171d2a  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_frame  00009d44  00000000  00000000  00266d30  2**2
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_loc    00041a40  00000000  00000000  00270a74  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00004000 <exception_table>:
    4000:	00 00 03 20 35 83 00 00 d1 42 00 00 d1 42 00 00     ... 5....B...B..
    4010:	d1 42 00 00 d1 42 00 00 d1 42 00 00 00 00 00 00     .B...B...B......
	...
    402c:	d1 42 00 00 d1 42 00 00 00 00 00 00 d1 42 00 00     .B...B.......B..
    403c:	d1 81 00 00 d1 42 00 00 d1 42 00 00 d1 42 00 00     .....B...B...B..
    404c:	d1 42 00 00 d1 42 00 00 d1 42 00 00 d1 42 00 00     .B...B...B...B..
    405c:	d1 42 00 00 d1 42 00 00 d1 42 00 00 d1 42 00 00     .B...B...B...B..
    406c:	d1 42 00 00 a5 80 00 00 b5 80 00 00 c5 80 00 00     .B..............
    407c:	d5 80 00 00 e5 80 00 00 f5 80 00 00 05 81 00 00     ................
    408c:	15 81 00 00 25 81 00 00 35 81 00 00 45 81 00 00     ....%...5...E...
    409c:	55 81 00 00 65 81 00 00 71 81 00 00 81 81 00 00     U...e...q.......
    40ac:	91 81 00 00 d1 42 00 00 d1 42 00 00 d1 42 00 00     .....B...B...B..
    40bc:	d1 42 00 00 d1 42 00 00 d1 42 00 00 d1 42 00 00     .B...B...B...B..
    40cc:	d1 42 00 00 d1 42 00 00 d1 42 00 00 d1 42 00 00     .B...B...B...B..
    40dc:	d1 42 00 00 d1 42 00 00 d1 42 00 00 00 00 00 00     .B...B...B......
	...
    40f4:	d1 42 00 00 39 80 00 00 d1 42 00 00 45 80 00 00     .B..9....B..E...
    4104:	51 80 00 00 d1 42 00 00 d1 42 00 00 d1 42 00 00     Q....B...B...B..
    4114:	d1 42 00 00 5d 80 00 00 d1 42 00 00 69 80 00 00     .B..]....B..i...
    4124:	75 80 00 00 d1 42 00 00 d1 42 00 00 d1 42 00 00     u....B...B...B..
    4134:	d1 42 00 00 d1 42 00 00 d1 42 00 00 d1 42 00 00     .B...B...B...B..
    4144:	d1 42 00 00 d1 42 00 00 d1 42 00 00 d1 42 00 00     .B...B...B...B..
    4154:	d1 42 00 00 d1 42 00 00 d1 42 00 00 d1 42 00 00     .B...B...B...B..
    4164:	d1 42 00 00 81 80 00 00 d1 42 00 00 8d 80 00 00     .B.......B......
    4174:	99 80 00 00 00 00 00 00 00 00 00 00 1d 34 01 00     .............4..
    4184:	21 34 01 00 25 34 01 00 29 34 01 00 2d 80 00 00     !4..%4..)4..-...
    4194:	25 82 00 00 d1 42 00 00 d1 42 00 00 d1 42 00 00     %....B...B...B..
    41a4:	d1 42 00 00 d1 42 00 00 d1 42 00 00 d1 42 00 00     .B...B...B...B..
    41b4:	d1 42 00 00 d1 42 00 00 d1 42 00 00 d1 42 00 00     .B...B...B...B..
    41c4:	d1 42 00 00 d1 42 00 00 d1 42 00 00 d1 42 00 00     .B...B...B...B..
    41d4:	a1 81 00 00 d1 42 00 00 d1 42 00 00 b9 81 00 00     .....B...B......
    41e4:	d1 42 00 00 d1 42 00 00 d1 42 00 00 d1 42 00 00     .B...B...B...B..
    41f4:	d1 42 00 00 d1 42 00 00 d1 42 00 00 d1 42 00 00     .B...B...B...B..
    4204:	d1 42 00 00 d1 42 00 00 d1 42 00 00 d1 42 00 00     .B...B...B...B..
    4214:	d1 42 00 00 d1 42 00 00 d1 42 00 00 d1 42 00 00     .B...B...B...B..
    4224:	d1 42 00 00 d1 42 00 00 d1 42 00 00 d1 42 00 00     .B...B...B...B..
    4234:	d1 42 00 00 d1 42 00 00 d1 42 00 00 d1 42 00 00     .B...B...B...B..
    4244:	d1 42 00 00 d1 42 00 00 d1 42 00 00 d1 42 00 00     .B...B...B...B..
    4254:	d1 42 00 00 d1 42 00 00 d1 42 00 00 d1 42 00 00     .B...B...B...B..

00004264 <__do_global_dtors_aux>:
    4264:	b510      	push	{r4, lr}
    4266:	4c05      	ldr	r4, [pc, #20]	; (427c <__do_global_dtors_aux+0x18>)
    4268:	7823      	ldrb	r3, [r4, #0]
    426a:	b933      	cbnz	r3, 427a <__do_global_dtors_aux+0x16>
    426c:	4b04      	ldr	r3, [pc, #16]	; (4280 <__do_global_dtors_aux+0x1c>)
    426e:	b113      	cbz	r3, 4276 <__do_global_dtors_aux+0x12>
    4270:	4804      	ldr	r0, [pc, #16]	; (4284 <__do_global_dtors_aux+0x20>)
    4272:	f3af 8000 	nop.w
    4276:	2301      	movs	r3, #1
    4278:	7023      	strb	r3, [r4, #0]
    427a:	bd10      	pop	{r4, pc}
    427c:	20000ac0 	.word	0x20000ac0
    4280:	00000000 	.word	0x00000000
    4284:	0002f074 	.word	0x0002f074

00004288 <frame_dummy>:
    4288:	4b0c      	ldr	r3, [pc, #48]	; (42bc <frame_dummy+0x34>)
    428a:	b143      	cbz	r3, 429e <frame_dummy+0x16>
    428c:	480c      	ldr	r0, [pc, #48]	; (42c0 <frame_dummy+0x38>)
    428e:	490d      	ldr	r1, [pc, #52]	; (42c4 <frame_dummy+0x3c>)
    4290:	b510      	push	{r4, lr}
    4292:	f3af 8000 	nop.w
    4296:	480c      	ldr	r0, [pc, #48]	; (42c8 <frame_dummy+0x40>)
    4298:	6803      	ldr	r3, [r0, #0]
    429a:	b923      	cbnz	r3, 42a6 <frame_dummy+0x1e>
    429c:	bd10      	pop	{r4, pc}
    429e:	480a      	ldr	r0, [pc, #40]	; (42c8 <frame_dummy+0x40>)
    42a0:	6803      	ldr	r3, [r0, #0]
    42a2:	b933      	cbnz	r3, 42b2 <frame_dummy+0x2a>
    42a4:	4770      	bx	lr
    42a6:	4b09      	ldr	r3, [pc, #36]	; (42cc <frame_dummy+0x44>)
    42a8:	2b00      	cmp	r3, #0
    42aa:	d0f7      	beq.n	429c <frame_dummy+0x14>
    42ac:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    42b0:	4718      	bx	r3
    42b2:	4b06      	ldr	r3, [pc, #24]	; (42cc <frame_dummy+0x44>)
    42b4:	2b00      	cmp	r3, #0
    42b6:	d0f5      	beq.n	42a4 <frame_dummy+0x1c>
    42b8:	4718      	bx	r3
    42ba:	bf00      	nop
    42bc:	00000000 	.word	0x00000000
    42c0:	0002f074 	.word	0x0002f074
    42c4:	20000ac4 	.word	0x20000ac4
    42c8:	20000abc 	.word	0x20000abc
    42cc:	00000000 	.word	0x00000000

000042d0 <Dummy_Handler>:

/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
    42d0:	e7fe      	b.n	42d0 <Dummy_Handler>
    42d2:	bf00      	nop

000042d4 <_GLOBAL__sub_I_Udp>:
		}

		counter++;
		Delay_ms(10);
	}
}
    42d4:	b510      	push	{r4, lr}
EthernetUdp Udp;
    42d6:	4c04      	ldr	r4, [pc, #16]	; (42e8 <_GLOBAL__sub_I_Udp+0x14>)
    42d8:	f104 0008 	add.w	r0, r4, #8
    42dc:	f000 f9a8 	bl	4630 <_ZN9ClearCore11EthernetUdpC1Ev>

        \code{.cpp}
        IpAddress ip = IpAddress();
        \endcode
    **/
    IpAddress() : m_ipAddress(IPADDR4_INIT(0)) {}
    42e0:	2300      	movs	r3, #0
    42e2:	6063      	str	r3, [r4, #4]
    42e4:	bd10      	pop	{r4, pc}
    42e6:	bf00      	nop
    42e8:	20000adc 	.word	0x20000adc

000042ec <_ZN9ClearCore7ISerial8SendLineEPKc.constprop.4>:
        Terminate the line with carriage return and newline characters.

        \param[in] nullTermStr The string to be sent
        \return success
    **/
    bool SendLine(const char *nullTermStr) {
    42ec:	b570      	push	{r4, r5, r6, lr}
    42ee:	4604      	mov	r4, r0
        return Send(nullTermStr, strlen(nullTermStr));
    42f0:	f024 fa66 	bl	287c0 <strlen>
        for (size_t iChar = 0; iChar < bufferSize; iChar++) {
    42f4:	b168      	cbz	r0, 4312 <_ZN9ClearCore7ISerial8SendLineEPKc.constprop.4+0x26>
            if (!SendChar(buffer[iChar])) {
    42f6:	4e0d      	ldr	r6, [pc, #52]	; (432c <_ZN9ClearCore7ISerial8SendLineEPKc.constprop.4+0x40>)
    42f8:	1825      	adds	r5, r4, r0
    42fa:	e001      	b.n	4300 <_ZN9ClearCore7ISerial8SendLineEPKc.constprop.4+0x14>
        for (size_t iChar = 0; iChar < bufferSize; iChar++) {
    42fc:	42a5      	cmp	r5, r4
    42fe:	d008      	beq.n	4312 <_ZN9ClearCore7ISerial8SendLineEPKc.constprop.4+0x26>
            if (!SendChar(buffer[iChar])) {
    4300:	f814 1b01 	ldrb.w	r1, [r4], #1
    4304:	4630      	mov	r0, r6
    4306:	f000 fbab 	bl	4a60 <_ZN9ClearCore9SerialUsb8SendCharEh>
    430a:	2800      	cmp	r0, #0
    430c:	d1f6      	bne.n	42fc <_ZN9ClearCore7ISerial8SendLineEPKc.constprop.4+0x10>
        return Send(nullTermStr) && SendLine();
    }
    430e:	2000      	movs	r0, #0
    4310:	bd70      	pop	{r4, r5, r6, pc}
        return SendChar('\r') && SendChar('\n');
    4312:	210d      	movs	r1, #13
    4314:	4805      	ldr	r0, [pc, #20]	; (432c <_ZN9ClearCore7ISerial8SendLineEPKc.constprop.4+0x40>)
    4316:	f000 fba3 	bl	4a60 <_ZN9ClearCore9SerialUsb8SendCharEh>
    431a:	2800      	cmp	r0, #0
    431c:	d0f7      	beq.n	430e <_ZN9ClearCore7ISerial8SendLineEPKc.constprop.4+0x22>
    431e:	210a      	movs	r1, #10
    4320:	4802      	ldr	r0, [pc, #8]	; (432c <_ZN9ClearCore7ISerial8SendLineEPKc.constprop.4+0x40>)
    }
    4322:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
        return SendChar('\r') && SendChar('\n');
    4326:	f000 bb9b 	b.w	4a60 <_ZN9ClearCore9SerialUsb8SendCharEh>
    432a:	bf00      	nop
    432c:	20001530 	.word	0x20001530

00004330 <main>:
int main() {
    4330:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	ConnectorUsb.Speed(9600);
    4334:	f44f 5116 	mov.w	r1, #9600	; 0x2580
int main() {
    4338:	b091      	sub	sp, #68	; 0x44
	ConnectorUsb.Speed(9600);
    433a:	489b      	ldr	r0, [pc, #620]	; (45a8 <main+0x278>)
	if (usingDhcp) {
    433c:	f8df 92ac 	ldr.w	r9, [pc, #684]	; 45ec <main+0x2bc>
	ConnectorUsb.Speed(9600);
    4340:	f000 fb76 	bl	4a30 <_ZN9ClearCore9SerialUsb5SpeedEm>
	ConnectorUsb.PortOpen();
    4344:	4898      	ldr	r0, [pc, #608]	; (45a8 <main+0x278>)
    4346:	f000 fb67 	bl	4a18 <_ZN9ClearCore9SerialUsb8PortOpenEv>
	EthernetMgr.Setup();
    434a:	4b98      	ldr	r3, [pc, #608]	; (45ac <main+0x27c>)
    434c:	681c      	ldr	r4, [r3, #0]
    434e:	4620      	mov	r0, r4
    4350:	f005 f90c 	bl	956c <_ZN9ClearCore15EthernetManager5SetupEv>
	if (usingDhcp) {
    4354:	f899 3000 	ldrb.w	r3, [r9]
    4358:	2b00      	cmp	r3, #0
    435a:	f000 80f0 	beq.w	453e <main+0x20e>
		if (!EthernetMgr.DhcpBegin()) {
    435e:	4620      	mov	r0, r4
    4360:	f005 f9a6 	bl	96b0 <_ZN9ClearCore15EthernetManager9DhcpBeginEv>
    4364:	2800      	cmp	r0, #0
    4366:	f000 8115 	beq.w	4594 <main+0x264>
	while (!EthernetMgr.PhyLinkActive()) {
    436a:	f894 305c 	ldrb.w	r3, [r4, #92]	; 0x5c
    436e:	b9d3      	cbnz	r3, 43a6 <main+0x76>
    \brief Blocks operations for ms milliseconds

    \param[in] ms Time in milliseconds to delay
**/
inline void Delay_ms(uint32_t ms)  {
    return Delay_cycles(static_cast<uint64_t>(ms) * CYCLES_PER_MILLISECOND);
    4370:	a78b      	add	r7, pc, #556	; (adr r7, 45a0 <main+0x270>)
    4372:	e9d7 6700 	ldrd	r6, r7, [r7]
    4376:	f8df a278 	ldr.w	sl, [pc, #632]	; 45f0 <main+0x2c0>
            if (!SendChar(buffer[iChar])) {
    437a:	4d8b      	ldr	r5, [pc, #556]	; (45a8 <main+0x278>)
    437c:	f8df 8274 	ldr.w	r8, [pc, #628]	; 45f4 <main+0x2c4>
    4380:	e002      	b.n	4388 <main+0x58>
        for (size_t iChar = 0; iChar < bufferSize; iChar++) {
    4382:	45d0      	cmp	r8, sl
    4384:	f000 80c6 	beq.w	4514 <main+0x1e4>
            if (!SendChar(buffer[iChar])) {
    4388:	f818 1b01 	ldrb.w	r1, [r8], #1
    438c:	4628      	mov	r0, r5
    438e:	f000 fb67 	bl	4a60 <_ZN9ClearCore9SerialUsb8SendCharEh>
    4392:	2800      	cmp	r0, #0
    4394:	d1f5      	bne.n	4382 <main+0x52>
    4396:	4630      	mov	r0, r6
    4398:	4639      	mov	r1, r7
    439a:	f004 f9b9 	bl	8710 <Delay_cycles>
    439e:	f894 305c 	ldrb.w	r3, [r4, #92]	; 0x5c
    43a2:	2b00      	cmp	r3, #0
    43a4:	d0ea      	beq.n	437c <main+0x4c>
    43a6:	4f82      	ldr	r7, [pc, #520]	; (45b0 <main+0x280>)
	Udp.Begin(localPort);
    43a8:	f8b9 1002 	ldrh.w	r1, [r9, #2]
    43ac:	4e81      	ldr	r6, [pc, #516]	; (45b4 <main+0x284>)
    43ae:	f8df 9248 	ldr.w	r9, [pc, #584]	; 45f8 <main+0x2c8>
    43b2:	f107 0008 	add.w	r0, r7, #8
    43b6:	f000 f94d 	bl	4654 <_ZN9ClearCore11EthernetUdp5BeginEt>
	ConnectorUsb.SendLine("Ready for discovery");
    43ba:	487f      	ldr	r0, [pc, #508]	; (45b8 <main+0x288>)
    43bc:	f7ff ff96 	bl	42ec <_ZN9ClearCore7ISerial8SendLineEPKc.constprop.4>
		uint16_t packetSize = Udp.PacketParse();
    43c0:	f107 0b08 	add.w	fp, r7, #8
	int counter = 0;
    43c4:	f04f 0800 	mov.w	r8, #0
		uint16_t packetSize = Udp.PacketParse();
    43c8:	4658      	mov	r0, fp
    43ca:	f000 fa29 	bl	4820 <_ZN9ClearCore11EthernetUdp11PacketParseEv>
		if (packetSize > 0) {
    43ce:	2800      	cmp	r0, #0
    43d0:	f000 808c 	beq.w	44ec <main+0x1bc>
			int32_t bytesRead = Udp.PacketRead(packetReceived, MAX_PACKET_LENGTH - 1);
    43d4:	4979      	ldr	r1, [pc, #484]	; (45bc <main+0x28c>)
    43d6:	4c7a      	ldr	r4, [pc, #488]	; (45c0 <main+0x290>)
    43d8:	4d73      	ldr	r5, [pc, #460]	; (45a8 <main+0x278>)
    43da:	2263      	movs	r2, #99	; 0x63
    43dc:	f1a1 0038 	sub.w	r0, r1, #56	; 0x38
    43e0:	f000 fa50 	bl	4884 <_ZN9ClearCore11EthernetUdp10PacketReadEPht>
			packetReceived[bytesRead] = '\0';
    43e4:	4438      	add	r0, r7
    43e6:	2300      	movs	r3, #0
    43e8:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40
    43ec:	f814 1b01 	ldrb.w	r1, [r4], #1
    43f0:	4628      	mov	r0, r5
    43f2:	f000 fb35 	bl	4a60 <_ZN9ClearCore9SerialUsb8SendCharEh>
    43f6:	b108      	cbz	r0, 43fc <main+0xcc>
        for (size_t iChar = 0; iChar < bufferSize; iChar++) {
    43f8:	42a6      	cmp	r6, r4
    43fa:	d1f7      	bne.n	43ec <main+0xbc>
        return Send(nullTermStr, strlen(nullTermStr));
    43fc:	486f      	ldr	r0, [pc, #444]	; (45bc <main+0x28c>)
    43fe:	f024 f9df 	bl	287c0 <strlen>
        for (size_t iChar = 0; iChar < bufferSize; iChar++) {
    4402:	2800      	cmp	r0, #0
    4404:	f000 80a0 	beq.w	4548 <main+0x218>
    4408:	4c6c      	ldr	r4, [pc, #432]	; (45bc <main+0x28c>)
            if (!SendChar(buffer[iChar])) {
    440a:	f8df a19c 	ldr.w	sl, [pc, #412]	; 45a8 <main+0x278>
    440e:	1825      	adds	r5, r4, r0
    4410:	e002      	b.n	4418 <main+0xe8>
        for (size_t iChar = 0; iChar < bufferSize; iChar++) {
    4412:	42ac      	cmp	r4, r5
    4414:	f000 8098 	beq.w	4548 <main+0x218>
            if (!SendChar(buffer[iChar])) {
    4418:	f814 1b01 	ldrb.w	r1, [r4], #1
    441c:	4650      	mov	r0, sl
    441e:	f000 fb1f 	bl	4a60 <_ZN9ClearCore9SerialUsb8SendCharEh>
    4422:	2800      	cmp	r0, #0
    4424:	d1f5      	bne.n	4412 <main+0xe2>
			if (strncmp(message, "DISCOVER_CLEARCORE", 18) == 0) {
    4426:	2212      	movs	r2, #18
    4428:	4966      	ldr	r1, [pc, #408]	; (45c4 <main+0x294>)
    442a:	4864      	ldr	r0, [pc, #400]	; (45bc <main+0x28c>)
    442c:	f024 fa36 	bl	2889c <strncmp>
    4430:	2800      	cmp	r0, #0
    4432:	d15b      	bne.n	44ec <main+0x1bc>
				char *portPtr = strstr(message, "PORT=");
    4434:	4964      	ldr	r1, [pc, #400]	; (45c8 <main+0x298>)
    4436:	4861      	ldr	r0, [pc, #388]	; (45bc <main+0x28c>)
    4438:	f024 fbda 	bl	28bf0 <strstr>
				if (portPtr) {
    443c:	2800      	cmp	r0, #0
    443e:	d055      	beq.n	44ec <main+0x1bc>
					terminalPort = atoi(portPtr + 5);
    4440:	3005      	adds	r0, #5
    4442:	f022 fe1f 	bl	27084 <atoi>
    4446:	8078      	strh	r0, [r7, #2]
					terminalIp = Udp.RemoteIp();
    4448:	4658      	mov	r0, fp
    444a:	f000 fa8f 	bl	496c <_ZN9ClearCore11EthernetUdp8RemoteIpEv>
    444e:	4c5f      	ldr	r4, [pc, #380]	; (45cc <main+0x29c>)
    4450:	4d55      	ldr	r5, [pc, #340]	; (45a8 <main+0x278>)
    4452:	6078      	str	r0, [r7, #4]
					terminalDiscovered = true;
    4454:	2301      	movs	r3, #1
    4456:	703b      	strb	r3, [r7, #0]
    4458:	f814 1b01 	ldrb.w	r1, [r4], #1
    445c:	4628      	mov	r0, r5
    445e:	f000 faff 	bl	4a60 <_ZN9ClearCore9SerialUsb8SendCharEh>
    4462:	b108      	cbz	r0, 4468 <main+0x138>
        for (size_t iChar = 0; iChar < bufferSize; iChar++) {
    4464:	454c      	cmp	r4, r9
    4466:	d1f7      	bne.n	4458 <main+0x128>
        \endcode

        \return Returns a string representation of the IP Address.
    **/
    char *StringValue() {
        return ipaddr_ntoa(&m_ipAddress);
    4468:	4859      	ldr	r0, [pc, #356]	; (45d0 <main+0x2a0>)
    446a:	f012 fc61 	bl	16d30 <ip4addr_ntoa>
    446e:	4604      	mov	r4, r0
        return Send(nullTermStr, strlen(nullTermStr));
    4470:	f024 f9a6 	bl	287c0 <strlen>
        for (size_t iChar = 0; iChar < bufferSize; iChar++) {
    4474:	b160      	cbz	r0, 4490 <main+0x160>
            if (!SendChar(buffer[iChar])) {
    4476:	f8df a130 	ldr.w	sl, [pc, #304]	; 45a8 <main+0x278>
    447a:	1825      	adds	r5, r4, r0
    447c:	e001      	b.n	4482 <main+0x152>
        for (size_t iChar = 0; iChar < bufferSize; iChar++) {
    447e:	42a5      	cmp	r5, r4
    4480:	d006      	beq.n	4490 <main+0x160>
            if (!SendChar(buffer[iChar])) {
    4482:	f814 1b01 	ldrb.w	r1, [r4], #1
    4486:	4650      	mov	r0, sl
    4488:	f000 faea 	bl	4a60 <_ZN9ClearCore9SerialUsb8SendCharEh>
    448c:	2800      	cmp	r0, #0
    448e:	d1f6      	bne.n	447e <main+0x14e>
    4490:	213a      	movs	r1, #58	; 0x3a
    4492:	4845      	ldr	r0, [pc, #276]	; (45a8 <main+0x278>)
    4494:	f000 fae4 	bl	4a60 <_ZN9ClearCore9SerialUsb8SendCharEh>
        if (radix < 2 || radix > 16) {
            // Only support bases 2 through 16.
            return false;
        }
        char strRep[1 + 8 * sizeof(number)];
        utoa(number, strRep, radix);
    4498:	220a      	movs	r2, #10
    449a:	4669      	mov	r1, sp
    449c:	8878      	ldrh	r0, [r7, #2]
    449e:	f025 fff5 	bl	2a48c <utoa>
        return Send(nullTermStr, strlen(nullTermStr));
    44a2:	4668      	mov	r0, sp
    44a4:	f024 f98c 	bl	287c0 <strlen>
        for (size_t iChar = 0; iChar < bufferSize; iChar++) {
    44a8:	b170      	cbz	r0, 44c8 <main+0x198>
            if (!SendChar(buffer[iChar])) {
    44aa:	f8df a0fc 	ldr.w	sl, [pc, #252]	; 45a8 <main+0x278>
    44ae:	eb0d 0400 	add.w	r4, sp, r0
    44b2:	466d      	mov	r5, sp
    44b4:	e001      	b.n	44ba <main+0x18a>
        for (size_t iChar = 0; iChar < bufferSize; iChar++) {
    44b6:	42ac      	cmp	r4, r5
    44b8:	d006      	beq.n	44c8 <main+0x198>
            if (!SendChar(buffer[iChar])) {
    44ba:	f815 1b01 	ldrb.w	r1, [r5], #1
    44be:	4650      	mov	r0, sl
    44c0:	f000 face 	bl	4a60 <_ZN9ClearCore9SerialUsb8SendCharEh>
    44c4:	2800      	cmp	r0, #0
    44c6:	d1f6      	bne.n	44b6 <main+0x186>
        return SendChar('\r') && SendChar('\n');
    44c8:	210d      	movs	r1, #13
    44ca:	4837      	ldr	r0, [pc, #220]	; (45a8 <main+0x278>)
    44cc:	f000 fac8 	bl	4a60 <_ZN9ClearCore9SerialUsb8SendCharEh>
    44d0:	2800      	cmp	r0, #0
    44d2:	d15a      	bne.n	458a <main+0x25a>
					Udp.Connect(terminalIp, terminalPort);
    44d4:	887a      	ldrh	r2, [r7, #2]
    44d6:	6879      	ldr	r1, [r7, #4]
    44d8:	4658      	mov	r0, fp
    44da:	f000 f8e5 	bl	46a8 <_ZN9ClearCore11EthernetUdp7ConnectENS_9IpAddressEt>
					Udp.PacketWrite("CLEARCORE_ACK");
    44de:	493d      	ldr	r1, [pc, #244]	; (45d4 <main+0x2a4>)
    44e0:	4658      	mov	r0, fp
    44e2:	f000 f927 	bl	4734 <_ZN9ClearCore11EthernetUdp11PacketWriteEPKc>
					Udp.PacketSend();
    44e6:	4658      	mov	r0, fp
    44e8:	f000 f8f6 	bl	46d8 <_ZN9ClearCore11EthernetUdp10PacketSendEv>
		if (terminalDiscovered && counter % 200 == 0) {
    44ec:	783b      	ldrb	r3, [r7, #0]
    44ee:	b153      	cbz	r3, 4506 <main+0x1d6>
    44f0:	4b39      	ldr	r3, [pc, #228]	; (45d8 <main+0x2a8>)
    44f2:	fb83 2308 	smull	r2, r3, r3, r8
    44f6:	ea4f 72e8 	mov.w	r2, r8, asr #31
    44fa:	ebc2 13a3 	rsb	r3, r2, r3, asr #6
    44fe:	22c8      	movs	r2, #200	; 0xc8
    4500:	fb02 8213 	mls	r2, r2, r3, r8
    4504:	b362      	cbz	r2, 4560 <main+0x230>
    4506:	4835      	ldr	r0, [pc, #212]	; (45dc <main+0x2ac>)
    4508:	2100      	movs	r1, #0
		counter++;
    450a:	f108 0801 	add.w	r8, r8, #1
    450e:	f004 f8ff 	bl	8710 <Delay_cycles>
    4512:	e759      	b.n	43c8 <main+0x98>
    4514:	210d      	movs	r1, #13
    4516:	4628      	mov	r0, r5
    4518:	f000 faa2 	bl	4a60 <_ZN9ClearCore9SerialUsb8SendCharEh>
    451c:	2800      	cmp	r0, #0
    451e:	f43f af3a 	beq.w	4396 <main+0x66>
    4522:	210a      	movs	r1, #10
    4524:	4628      	mov	r0, r5
    4526:	f000 fa9b 	bl	4a60 <_ZN9ClearCore9SerialUsb8SendCharEh>
    452a:	4630      	mov	r0, r6
    452c:	4639      	mov	r1, r7
    452e:	f004 f8ef 	bl	8710 <Delay_cycles>
	while (!EthernetMgr.PhyLinkActive()) {
    4532:	f894 305c 	ldrb.w	r3, [r4, #92]	; 0x5c
    4536:	2b00      	cmp	r3, #0
    4538:	f43f af20 	beq.w	437c <main+0x4c>
    453c:	e733      	b.n	43a6 <main+0x76>
		EthernetMgr.LocalIp(staticIp);
    453e:	4928      	ldr	r1, [pc, #160]	; (45e0 <main+0x2b0>)
    4540:	4620      	mov	r0, r4
    4542:	f005 f80b 	bl	955c <_ZN9ClearCore15EthernetManager7LocalIpENS_9IpAddressE>
    4546:	e710      	b.n	436a <main+0x3a>
    4548:	210d      	movs	r1, #13
    454a:	4817      	ldr	r0, [pc, #92]	; (45a8 <main+0x278>)
    454c:	f000 fa88 	bl	4a60 <_ZN9ClearCore9SerialUsb8SendCharEh>
    4550:	2800      	cmp	r0, #0
    4552:	f43f af68 	beq.w	4426 <main+0xf6>
    4556:	210a      	movs	r1, #10
    4558:	4813      	ldr	r0, [pc, #76]	; (45a8 <main+0x278>)
    455a:	f000 fa81 	bl	4a60 <_ZN9ClearCore9SerialUsb8SendCharEh>
    455e:	e762      	b.n	4426 <main+0xf6>
			snprintf(msg, sizeof(msg), "Counter = %d", counter / 200);
    4560:	4a20      	ldr	r2, [pc, #128]	; (45e4 <main+0x2b4>)
    4562:	2140      	movs	r1, #64	; 0x40
    4564:	4668      	mov	r0, sp
    4566:	f023 ff39 	bl	283dc <snprintf>
	if (!terminalDiscovered) return; // No known host
    456a:	783b      	ldrb	r3, [r7, #0]
    456c:	2b00      	cmp	r3, #0
    456e:	d0ca      	beq.n	4506 <main+0x1d6>
	Udp.Connect(terminalIp, terminalPort);
    4570:	887a      	ldrh	r2, [r7, #2]
    4572:	6879      	ldr	r1, [r7, #4]
    4574:	4658      	mov	r0, fp
    4576:	f000 f897 	bl	46a8 <_ZN9ClearCore11EthernetUdp7ConnectENS_9IpAddressEt>
	Udp.PacketWrite(msg);
    457a:	4669      	mov	r1, sp
    457c:	4658      	mov	r0, fp
    457e:	f000 f8d9 	bl	4734 <_ZN9ClearCore11EthernetUdp11PacketWriteEPKc>
	Udp.PacketSend();
    4582:	4658      	mov	r0, fp
    4584:	f000 f8a8 	bl	46d8 <_ZN9ClearCore11EthernetUdp10PacketSendEv>
    4588:	e7bd      	b.n	4506 <main+0x1d6>
    458a:	210a      	movs	r1, #10
    458c:	4806      	ldr	r0, [pc, #24]	; (45a8 <main+0x278>)
    458e:	f000 fa67 	bl	4a60 <_ZN9ClearCore9SerialUsb8SendCharEh>
    4592:	e79f      	b.n	44d4 <main+0x1a4>
			ConnectorUsb.SendLine("DHCP failed");
    4594:	4814      	ldr	r0, [pc, #80]	; (45e8 <main+0x2b8>)
    4596:	f7ff fea9 	bl	42ec <_ZN9ClearCore7ISerial8SendLineEPKc.constprop.4>
    459a:	e7fe      	b.n	459a <main+0x26a>
    459c:	f3af 8000 	nop.w
    45a0:	07270e00 	.word	0x07270e00
    45a4:	00000000 	.word	0x00000000
    45a8:	20001530 	.word	0x20001530
    45ac:	20001ca0 	.word	0x20001ca0
    45b0:	20000adc 	.word	0x20000adc
    45b4:	0002cb4d 	.word	0x0002cb4d
    45b8:	0002cb14 	.word	0x0002cb14
    45bc:	20000b1c 	.word	0x20000b1c
    45c0:	0002cb48 	.word	0x0002cb48
    45c4:	0002cb50 	.word	0x0002cb50
    45c8:	0002cb64 	.word	0x0002cb64
    45cc:	0002cb6c 	.word	0x0002cb6c
    45d0:	20000ae0 	.word	0x20000ae0
    45d4:	0002cb84 	.word	0x0002cb84
    45d8:	51eb851f 	.word	0x51eb851f
    45dc:	00124f80 	.word	0x00124f80
    45e0:	c801a8c0 	.word	0xc801a8c0
    45e4:	0002cb94 	.word	0x0002cb94
    45e8:	0002cb08 	.word	0x0002cb08
    45ec:	20000000 	.word	0x20000000
    45f0:	0002cb44 	.word	0x0002cb44
    45f4:	0002cb28 	.word	0x0002cb28
    45f8:	0002cb83 	.word	0x0002cb83

000045fc <_ZN9ClearCore10UdpReceiveEPvP7udp_pcbP4pbufPK8ip4_addrt>:

/**
    lwIP UDP datagram received callback.
**/
void UdpReceive(void *arg, struct udp_pcb *pcb, struct pbuf *p,
                const ip_addr_t *addr, u16_t port) {
    45fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    45fe:	f8bd 7018 	ldrh.w	r7, [sp, #24]
    EthernetUdp::UdpData *data = (EthernetUdp::UdpData *)arg;

    // Bail out if the udp_pcb received could not be allocated
    // or if we received to an unregistered udp_pcb.
    if (data == nullptr || data->pcb != pcb) {
    4602:	b110      	cbz	r0, 460a <_ZN9ClearCore10UdpReceiveEPvP7udp_pcbP4pbufPK8ip4_addrt+0xe>
    4604:	6804      	ldr	r4, [r0, #0]
    4606:	428c      	cmp	r4, r1
    4608:	d004      	beq.n	4614 <_ZN9ClearCore10UdpReceiveEPvP7udp_pcbP4pbufPK8ip4_addrt+0x18>
        pbuf_free(p);
    460a:	4610      	mov	r0, r2
    // into the UDP state.
    ip_addr_copy(data->remoteIp, *addr);
    data->remotePort = port;
    data->packet = p;
    data->available = p->tot_len;
}
    460c:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
        pbuf_free(p);
    4610:	f013 b8ec 	b.w	177ec <pbuf_free>
    4614:	4604      	mov	r4, r0
    if (data->packet != nullptr) {
    4616:	6840      	ldr	r0, [r0, #4]
    4618:	461e      	mov	r6, r3
    461a:	4615      	mov	r5, r2
    461c:	b108      	cbz	r0, 4622 <_ZN9ClearCore10UdpReceiveEPvP7udp_pcbP4pbufPK8ip4_addrt+0x26>
        pbuf_free(data->packet);
    461e:	f013 f8e5 	bl	177ec <pbuf_free>
    ip_addr_copy(data->remoteIp, *addr);
    4622:	6832      	ldr	r2, [r6, #0]
    data->available = p->tot_len;
    4624:	892b      	ldrh	r3, [r5, #8]
    4626:	8123      	strh	r3, [r4, #8]
    ip_addr_copy(data->remoteIp, *addr);
    4628:	60e2      	str	r2, [r4, #12]
    data->remotePort = port;
    462a:	8227      	strh	r7, [r4, #16]
    data->packet = p;
    462c:	6065      	str	r5, [r4, #4]
    data->available = p->tot_len;
    462e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

00004630 <_ZN9ClearCore11EthernetUdpC1Ev>:
m_packetParsed(false) { }
    4630:	2200      	movs	r2, #0
    4632:	6002      	str	r2, [r0, #0]
    4634:	6042      	str	r2, [r0, #4]
    4636:	6082      	str	r2, [r0, #8]
    4638:	60c2      	str	r2, [r0, #12]
    463a:	6102      	str	r2, [r0, #16]
    463c:	8282      	strh	r2, [r0, #20]
    463e:	6182      	str	r2, [r0, #24]
    4640:	61c2      	str	r2, [r0, #28]
    4642:	8402      	strh	r2, [r0, #32]

        \code{.cpp}
        IpAddress ip = IpAddress();
        \endcode
    **/
    IpAddress() : m_ipAddress(IPADDR4_INIT(0)) {}
    4644:	6242      	str	r2, [r0, #36]	; 0x24
    4646:	8502      	strh	r2, [r0, #40]	; 0x28
    4648:	62c2      	str	r2, [r0, #44]	; 0x2c
    464a:	8602      	strh	r2, [r0, #48]	; 0x30
    464c:	f8c0 2032 	str.w	r2, [r0, #50]	; 0x32
    4650:	4770      	bx	lr
    4652:	bf00      	nop

00004654 <_ZN9ClearCore11EthernetUdp5BeginEt>:
bool EthernetUdp::Begin(uint16_t localPort) {
    4654:	b530      	push	{r4, r5, lr}
    if (m_initialized) {
    4656:	f890 5032 	ldrb.w	r5, [r0, #50]	; 0x32
bool EthernetUdp::Begin(uint16_t localPort) {
    465a:	b083      	sub	sp, #12
    if (m_initialized) {
    465c:	b115      	cbz	r5, 4664 <_ZN9ClearCore11EthernetUdp5BeginEt+0x10>
        return false;
    465e:	2000      	movs	r0, #0
}
    4660:	b003      	add	sp, #12
    4662:	bd30      	pop	{r4, r5, pc}
    m_udpLocalPort = localPort;
    4664:	8281      	strh	r1, [r0, #20]
    4666:	4604      	mov	r4, r0
    m_udpData.pcb = udp_new();
    4668:	f017 f8ca 	bl	1b800 <udp_new>
    ip_addr_t ip = IPADDR4_INIT(uint32_t(EthernetMgr.LocalIp()));
    466c:	4b0c      	ldr	r3, [pc, #48]	; (46a0 <_ZN9ClearCore11EthernetUdp5BeginEt+0x4c>)
    m_udpData.pcb = udp_new();
    466e:	6020      	str	r0, [r4, #0]
    m_udpData.available = 0;
    4670:	8125      	strh	r5, [r4, #8]
    m_udpBytesAvailable = 0;
    4672:	8425      	strh	r5, [r4, #32]
    ip_addr_t ip = IPADDR4_INIT(uint32_t(EthernetMgr.LocalIp()));
    4674:	6818      	ldr	r0, [r3, #0]
    4676:	f004 ff6d 	bl	9554 <_ZN9ClearCore15EthernetManager7LocalIpEv>
    467a:	a902      	add	r1, sp, #8
    err_t err = udp_bind(m_udpData.pcb, &ip, m_udpLocalPort);
    467c:	8aa2      	ldrh	r2, [r4, #20]
    ip_addr_t ip = IPADDR4_INIT(uint32_t(EthernetMgr.LocalIp()));
    467e:	f841 0d04 	str.w	r0, [r1, #-4]!
    err_t err = udp_bind(m_udpData.pcb, &ip, m_udpLocalPort);
    4682:	6820      	ldr	r0, [r4, #0]
    4684:	f016 fe2c 	bl	1b2e0 <udp_bind>
    if (err != ERR_OK) {
    4688:	2800      	cmp	r0, #0
    468a:	d1e8      	bne.n	465e <_ZN9ClearCore11EthernetUdp5BeginEt+0xa>
    udp_recv(m_udpData.pcb, UdpReceive, &m_udpData);
    468c:	6820      	ldr	r0, [r4, #0]
    468e:	4905      	ldr	r1, [pc, #20]	; (46a4 <_ZN9ClearCore11EthernetUdp5BeginEt+0x50>)
    4690:	4622      	mov	r2, r4
    4692:	f017 f88b 	bl	1b7ac <udp_recv>
    m_initialized = true;
    4696:	2001      	movs	r0, #1
    4698:	f8c4 0032 	str.w	r0, [r4, #50]	; 0x32
}
    469c:	b003      	add	sp, #12
    469e:	bd30      	pop	{r4, r5, pc}
    46a0:	20001ca0 	.word	0x20001ca0
    46a4:	000045fd 	.word	0x000045fd

000046a8 <_ZN9ClearCore11EthernetUdp7ConnectENS_9IpAddressEt>:
bool EthernetUdp::Connect(IpAddress ip, uint16_t port) {
    46a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    if (!m_initialized) {
    46aa:	f890 5032 	ldrb.w	r5, [r0, #50]	; 0x32
    46ae:	b175      	cbz	r5, 46ce <_ZN9ClearCore11EthernetUdp7ConnectENS_9IpAddressEt+0x26>
    EthernetMgr.Refresh();
    46b0:	4b08      	ldr	r3, [pc, #32]	; (46d4 <_ZN9ClearCore11EthernetUdp7ConnectENS_9IpAddressEt+0x2c>)
    46b2:	4604      	mov	r4, r0
    46b4:	6818      	ldr	r0, [r3, #0]
    46b6:	4616      	mov	r6, r2
    46b8:	460f      	mov	r7, r1
    46ba:	f004 ff9b 	bl	95f4 <_ZN9ClearCore15EthernetManager7RefreshEv>
    m_packetBegun = true;
    46be:	2201      	movs	r2, #1
    m_packetReadyToSend = false;
    46c0:	2300      	movs	r3, #0
    m_udpRemoteIpDestination = ip;
    46c2:	62e7      	str	r7, [r4, #44]	; 0x2c
    m_udpRemotePortDestination = port;
    46c4:	8626      	strh	r6, [r4, #48]	; 0x30
    m_packetBegun = true;
    46c6:	f884 2033 	strb.w	r2, [r4, #51]	; 0x33
    m_packetReadyToSend = false;
    46ca:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
}
    46ce:	4628      	mov	r0, r5
    46d0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    46d2:	bf00      	nop
    46d4:	20001ca0 	.word	0x20001ca0

000046d8 <_ZN9ClearCore11EthernetUdp10PacketSendEv>:
bool EthernetUdp::PacketSend() {
    46d8:	b530      	push	{r4, r5, lr}
    46da:	4605      	mov	r5, r0
    if (!m_initialized || !m_packetBegun || !m_packetReadyToSend) {
    46dc:	f890 0032 	ldrb.w	r0, [r0, #50]	; 0x32
bool EthernetUdp::PacketSend() {
    46e0:	b083      	sub	sp, #12
    if (!m_initialized || !m_packetBegun || !m_packetReadyToSend) {
    46e2:	b128      	cbz	r0, 46f0 <_ZN9ClearCore11EthernetUdp10PacketSendEv+0x18>
    46e4:	f895 0033 	ldrb.w	r0, [r5, #51]	; 0x33
    46e8:	b110      	cbz	r0, 46f0 <_ZN9ClearCore11EthernetUdp10PacketSendEv+0x18>
    46ea:	f895 0034 	ldrb.w	r0, [r5, #52]	; 0x34
    46ee:	b908      	cbnz	r0, 46f4 <_ZN9ClearCore11EthernetUdp10PacketSendEv+0x1c>
}
    46f0:	b003      	add	sp, #12
    46f2:	bd30      	pop	{r4, r5, pc}
    ip_addr_t destinationIp = IPADDR4_INIT(uint32_t(m_udpRemoteIpDestination));
    46f4:	aa02      	add	r2, sp, #8
    46f6:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
    46f8:	f842 3d04 	str.w	r3, [r2, #-4]!
                           &destinationIp, m_udpRemotePortDestination);
    46fc:	69a9      	ldr	r1, [r5, #24]
    46fe:	8e2b      	ldrh	r3, [r5, #48]	; 0x30
    4700:	6828      	ldr	r0, [r5, #0]
    4702:	f016 ff83 	bl	1b60c <udp_sendto>
    4706:	4604      	mov	r4, r0
    pbuf_free(m_outgoingPacket);
    4708:	69a8      	ldr	r0, [r5, #24]
    470a:	f013 f86f 	bl	177ec <pbuf_free>
    EthernetMgr.Refresh();
    470e:	4a08      	ldr	r2, [pc, #32]	; (4730 <_ZN9ClearCore11EthernetUdp10PacketSendEv+0x58>)
    m_outgoingPacket = nullptr;
    4710:	2300      	movs	r3, #0
    EthernetMgr.Refresh();
    4712:	6810      	ldr	r0, [r2, #0]
    m_outgoingPacket = nullptr;
    4714:	61ab      	str	r3, [r5, #24]
    m_udpRemoteIpDestination = IpAddress();
    4716:	62eb      	str	r3, [r5, #44]	; 0x2c
    m_udpRemotePortDestination = 0;
    4718:	862b      	strh	r3, [r5, #48]	; 0x30
    m_packetBegun = false;
    471a:	f885 3033 	strb.w	r3, [r5, #51]	; 0x33
    m_packetReadyToSend = false;
    471e:	f885 3034 	strb.w	r3, [r5, #52]	; 0x34
    EthernetMgr.Refresh();
    4722:	f004 ff67 	bl	95f4 <_ZN9ClearCore15EthernetManager7RefreshEv>
    return err == ERR_OK;
    4726:	fab4 f084 	clz	r0, r4
    472a:	0940      	lsrs	r0, r0, #5
}
    472c:	b003      	add	sp, #12
    472e:	bd30      	pop	{r4, r5, pc}
    4730:	20001ca0 	.word	0x20001ca0

00004734 <_ZN9ClearCore11EthernetUdp11PacketWriteEPKc>:
uint32_t EthernetUdp::PacketWrite(const char *nullTermStr) {
    4734:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    while (*nullTermStr) {
    4738:	780b      	ldrb	r3, [r1, #0]
uint32_t EthernetUdp::PacketWrite(const char *nullTermStr) {
    473a:	b082      	sub	sp, #8
    while (*nullTermStr) {
    473c:	2b00      	cmp	r3, #0
    473e:	d067      	beq.n	4810 <_ZN9ClearCore11EthernetUdp11PacketWriteEPKc+0xdc>
    if (!m_initialized || !m_packetBegun) {
    4740:	f890 2032 	ldrb.w	r2, [r0, #50]	; 0x32
    4744:	f88d 3007 	strb.w	r3, [sp, #7]
    4748:	2a00      	cmp	r2, #0
    474a:	d061      	beq.n	4810 <_ZN9ClearCore11EthernetUdp11PacketWriteEPKc+0xdc>
    474c:	f890 3033 	ldrb.w	r3, [r0, #51]	; 0x33
    4750:	2b00      	cmp	r3, #0
    4752:	d05d      	beq.n	4810 <_ZN9ClearCore11EthernetUdp11PacketWriteEPKc+0xdc>
    4754:	4b31      	ldr	r3, [pc, #196]	; (481c <_ZN9ClearCore11EthernetUdp11PacketWriteEPKc+0xe8>)
    4756:	4604      	mov	r4, r0
    EthernetMgr.Refresh();
    4758:	681f      	ldr	r7, [r3, #0]
    475a:	460d      	mov	r5, r1
    if (!m_initialized || !m_packetBegun) {
    475c:	2600      	movs	r6, #0
    475e:	e01c      	b.n	479a <_ZN9ClearCore11EthernetUdp11PacketWriteEPKc+0x66>
        err = pbuf_take_at(outgoing, buffer, size, m_outgoingPacket->tot_len);
    4760:	69a3      	ldr	r3, [r4, #24]
    4762:	2201      	movs	r2, #1
    4764:	891b      	ldrh	r3, [r3, #8]
    4766:	f10d 0107 	add.w	r1, sp, #7
    476a:	4640      	mov	r0, r8
    476c:	f013 f974 	bl	17a58 <pbuf_take_at>
        if (err != ERR_OK) {
    4770:	bb38      	cbnz	r0, 47c2 <_ZN9ClearCore11EthernetUdp11PacketWriteEPKc+0x8e>
        pbuf_free(m_outgoingPacket);
    4772:	69a0      	ldr	r0, [r4, #24]
    4774:	f013 f83a 	bl	177ec <pbuf_free>
    m_packetReadyToSend = true;
    4778:	2301      	movs	r3, #1
        m_outgoingPacket = outgoing;
    477a:	f8c4 8018 	str.w	r8, [r4, #24]
    m_packetReadyToSend = true;
    477e:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
    while (*nullTermStr) {
    4782:	f815 3f01 	ldrb.w	r3, [r5, #1]!
        count++;
    4786:	3601      	adds	r6, #1
    while (*nullTermStr) {
    4788:	b1f3      	cbz	r3, 47c8 <_ZN9ClearCore11EthernetUdp11PacketWriteEPKc+0x94>
    if (!m_initialized || !m_packetBegun) {
    478a:	f894 2032 	ldrb.w	r2, [r4, #50]	; 0x32
    478e:	f88d 3007 	strb.w	r3, [sp, #7]
    4792:	b1ca      	cbz	r2, 47c8 <_ZN9ClearCore11EthernetUdp11PacketWriteEPKc+0x94>
    4794:	f894 3033 	ldrb.w	r3, [r4, #51]	; 0x33
    4798:	b1b3      	cbz	r3, 47c8 <_ZN9ClearCore11EthernetUdp11PacketWriteEPKc+0x94>
    EthernetMgr.Refresh();
    479a:	4638      	mov	r0, r7
    479c:	f004 ff2a 	bl	95f4 <_ZN9ClearCore15EthernetManager7RefreshEv>
    if (m_outgoingPacket == nullptr) {
    47a0:	69a3      	ldr	r3, [r4, #24]
    47a2:	b1ab      	cbz	r3, 47d0 <_ZN9ClearCore11EthernetUdp11PacketWriteEPKc+0x9c>
        struct pbuf *outgoing = pbuf_alloc(PBUF_TRANSPORT,
    47a4:	8919      	ldrh	r1, [r3, #8]
    47a6:	3101      	adds	r1, #1
                                           PBUF_RAM);
    47a8:	b289      	uxth	r1, r1
    47aa:	f44f 7220 	mov.w	r2, #640	; 0x280
    47ae:	2036      	movs	r0, #54	; 0x36
    47b0:	f012 fe70 	bl	17494 <pbuf_alloc>
        if (outgoing == nullptr) {
    47b4:	4680      	mov	r8, r0
    47b6:	b138      	cbz	r0, 47c8 <_ZN9ClearCore11EthernetUdp11PacketWriteEPKc+0x94>
        err = pbuf_copy(outgoing, m_outgoingPacket);
    47b8:	69a1      	ldr	r1, [r4, #24]
    47ba:	f013 f899 	bl	178f0 <pbuf_copy>
        if (err != ERR_OK) {
    47be:	2800      	cmp	r0, #0
    47c0:	d0ce      	beq.n	4760 <_ZN9ClearCore11EthernetUdp11PacketWriteEPKc+0x2c>
            pbuf_free(outgoing);
    47c2:	4640      	mov	r0, r8
    47c4:	f013 f812 	bl	177ec <pbuf_free>
}
    47c8:	4630      	mov	r0, r6
    47ca:	b002      	add	sp, #8
    47cc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        m_outgoingPacket = pbuf_alloc(PBUF_TRANSPORT, size, PBUF_RAM);
    47d0:	f44f 7220 	mov.w	r2, #640	; 0x280
    47d4:	2101      	movs	r1, #1
    47d6:	2036      	movs	r0, #54	; 0x36
    47d8:	f012 fe5c 	bl	17494 <pbuf_alloc>
    47dc:	61a0      	str	r0, [r4, #24]
        if (m_outgoingPacket == nullptr) {
    47de:	2800      	cmp	r0, #0
    47e0:	d0f2      	beq.n	47c8 <_ZN9ClearCore11EthernetUdp11PacketWriteEPKc+0x94>
        err = pbuf_take(m_outgoingPacket, buffer, size);
    47e2:	2201      	movs	r2, #1
    47e4:	f10d 0107 	add.w	r1, sp, #7
    47e8:	f013 f90e 	bl	17a08 <pbuf_take>
        if (err != ERR_OK) {
    47ec:	b948      	cbnz	r0, 4802 <_ZN9ClearCore11EthernetUdp11PacketWriteEPKc+0xce>
    47ee:	69a3      	ldr	r3, [r4, #24]
    m_packetReadyToSend = true;
    47f0:	2201      	movs	r2, #1
    47f2:	f884 2034 	strb.w	r2, [r4, #52]	; 0x34
    return m_outgoingPacket == nullptr ? 0 : size;
    47f6:	2b00      	cmp	r3, #0
    47f8:	d1c3      	bne.n	4782 <_ZN9ClearCore11EthernetUdp11PacketWriteEPKc+0x4e>
}
    47fa:	4630      	mov	r0, r6
    47fc:	b002      	add	sp, #8
    47fe:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
            pbuf_free(m_outgoingPacket);
    4802:	69a0      	ldr	r0, [r4, #24]
    4804:	f012 fff2 	bl	177ec <pbuf_free>
}
    4808:	4630      	mov	r0, r6
    480a:	b002      	add	sp, #8
    480c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    uint32_t count = 0;
    4810:	2600      	movs	r6, #0
}
    4812:	4630      	mov	r0, r6
    4814:	b002      	add	sp, #8
    4816:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    481a:	bf00      	nop
    481c:	20001ca0 	.word	0x20001ca0

00004820 <_ZN9ClearCore11EthernetUdp11PacketParseEv>:
uint16_t EthernetUdp::PacketParse() {
    4820:	b538      	push	{r3, r4, r5, lr}
    EthernetMgr.Refresh();
    4822:	4b17      	ldr	r3, [pc, #92]	; (4880 <_ZN9ClearCore11EthernetUdp11PacketParseEv+0x60>)
uint16_t EthernetUdp::PacketParse() {
    4824:	4604      	mov	r4, r0
    EthernetMgr.Refresh();
    4826:	6818      	ldr	r0, [r3, #0]
    4828:	f004 fee4 	bl	95f4 <_ZN9ClearCore15EthernetManager7RefreshEv>
    if (!m_initialized || m_udpData.available == 0) {
    482c:	f894 3032 	ldrb.w	r3, [r4, #50]	; 0x32
    4830:	b1d3      	cbz	r3, 4868 <_ZN9ClearCore11EthernetUdp11PacketParseEv+0x48>
    4832:	8923      	ldrh	r3, [r4, #8]
    4834:	b1c3      	cbz	r3, 4868 <_ZN9ClearCore11EthernetUdp11PacketParseEv+0x48>
    if (m_incomingPacket != nullptr) {
    4836:	69e0      	ldr	r0, [r4, #28]
    m_udpRemoteIpReceived = IpAddress(m_udpData.remoteIp.addr);
    4838:	68e1      	ldr	r1, [r4, #12]
    m_udpRemotePortReceived = m_udpData.remotePort;
    483a:	8a22      	ldrh	r2, [r4, #16]
    m_udpBytesAvailable = m_udpData.available;
    483c:	8423      	strh	r3, [r4, #32]
    m_udpRemoteIpReceived = IpAddress(m_udpData.remoteIp.addr);
    483e:	6261      	str	r1, [r4, #36]	; 0x24
    m_udpRemotePortReceived = m_udpData.remotePort;
    4840:	8522      	strh	r2, [r4, #40]	; 0x28
    if (m_incomingPacket != nullptr) {
    4842:	b118      	cbz	r0, 484c <_ZN9ClearCore11EthernetUdp11PacketParseEv+0x2c>
        pbuf_free(m_incomingPacket);
    4844:	f012 ffd2 	bl	177ec <pbuf_free>
        m_incomingPacket = nullptr;
    4848:	2300      	movs	r3, #0
    484a:	61e3      	str	r3, [r4, #28]
    m_incomingPacket = pbuf_alloc(PBUF_TRANSPORT, m_udpData.packet->tot_len,
    484c:	6863      	ldr	r3, [r4, #4]
    484e:	f44f 7220 	mov.w	r2, #640	; 0x280
    4852:	8919      	ldrh	r1, [r3, #8]
    4854:	2036      	movs	r0, #54	; 0x36
    4856:	f012 fe1d 	bl	17494 <pbuf_alloc>
    485a:	61e0      	str	r0, [r4, #28]
    if (m_incomingPacket == nullptr) {
    485c:	b120      	cbz	r0, 4868 <_ZN9ClearCore11EthernetUdp11PacketParseEv+0x48>
    err_t err = pbuf_copy(m_incomingPacket, m_udpData.packet);
    485e:	6861      	ldr	r1, [r4, #4]
    4860:	f013 f846 	bl	178f0 <pbuf_copy>
    if (err != ERR_OK) {
    4864:	4605      	mov	r5, r0
    4866:	b108      	cbz	r0, 486c <_ZN9ClearCore11EthernetUdp11PacketParseEv+0x4c>
        return 0;
    4868:	2000      	movs	r0, #0
    486a:	bd38      	pop	{r3, r4, r5, pc}
    pbuf_free(m_udpData.packet);
    486c:	6860      	ldr	r0, [r4, #4]
    486e:	f012 ffbd 	bl	177ec <pbuf_free>
    m_packetParsed = true;
    4872:	2301      	movs	r3, #1
    return m_udpBytesAvailable;
    4874:	8c20      	ldrh	r0, [r4, #32]
    m_udpData.packet = nullptr;
    4876:	6065      	str	r5, [r4, #4]
    m_udpData.available = 0;
    4878:	8125      	strh	r5, [r4, #8]
    m_packetParsed = true;
    487a:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
}
    487e:	bd38      	pop	{r3, r4, r5, pc}
    4880:	20001ca0 	.word	0x20001ca0

00004884 <_ZN9ClearCore11EthernetUdp10PacketReadEPht>:
int32_t EthernetUdp::PacketRead(unsigned char *dataPtr, uint16_t length) {
    4884:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    if (!m_initialized) {
    4888:	f890 3032 	ldrb.w	r3, [r0, #50]	; 0x32
    488c:	2b00      	cmp	r3, #0
    488e:	d068      	beq.n	4962 <_ZN9ClearCore11EthernetUdp10PacketReadEPht+0xde>
    if (!m_packetParsed || m_udpBytesAvailable == 0 || length == 0) {
    4890:	f890 3035 	ldrb.w	r3, [r0, #53]	; 0x35
    4894:	2b00      	cmp	r3, #0
    4896:	d064      	beq.n	4962 <_ZN9ClearCore11EthernetUdp10PacketReadEPht+0xde>
    4898:	8c03      	ldrh	r3, [r0, #32]
    489a:	2b00      	cmp	r3, #0
    489c:	d061      	beq.n	4962 <_ZN9ClearCore11EthernetUdp10PacketReadEPht+0xde>
    489e:	2a00      	cmp	r2, #0
    48a0:	d05f      	beq.n	4962 <_ZN9ClearCore11EthernetUdp10PacketReadEPht+0xde>
    48a2:	429a      	cmp	r2, r3
    uint16_t bytesRead = UdpPacketRead(m_incomingPacket, &m_udpBytesAvailable,
    48a4:	f8d0 801c 	ldr.w	r8, [r0, #28]
    48a8:	bfa8      	it	ge
    48aa:	461a      	movge	r2, r3
    48ac:	4616      	mov	r6, r2
    while (packet != nullptr && *available > 0 && bytesRead < size) {
    48ae:	f1b8 0f00 	cmp.w	r8, #0
    48b2:	d056      	beq.n	4962 <_ZN9ClearCore11EthernetUdp10PacketReadEPht+0xde>
    48b4:	460f      	mov	r7, r1
    48b6:	4605      	mov	r5, r0
    48b8:	f04f 0900 	mov.w	r9, #0
        uint16_t offset = packet->tot_len - *available;
    48bc:	f8b8 1008 	ldrh.w	r1, [r8, #8]
        while ((*available > 0) && (bytesRead < size) &&
    48c0:	454e      	cmp	r6, r9
        uint16_t offset = packet->tot_len - *available;
    48c2:	eba1 0103 	sub.w	r1, r1, r3
        while ((*available > 0) && (bytesRead < size) &&
    48c6:	464c      	mov	r4, r9
        uint16_t offset = packet->tot_len - *available;
    48c8:	b289      	uxth	r1, r1
        while ((*available > 0) && (bytesRead < size) &&
    48ca:	dd44      	ble.n	4956 <_ZN9ClearCore11EthernetUdp10PacketReadEPht+0xd2>
                (offset < packet->len)) {
    48cc:	f8b8 300a 	ldrh.w	r3, [r8, #10]
        while ((*available > 0) && (bytesRead < size) &&
    48d0:	428b      	cmp	r3, r1
    48d2:	dc06      	bgt.n	48e2 <_ZN9ClearCore11EthernetUdp10PacketReadEPht+0x5e>
    48d4:	e028      	b.n	4928 <_ZN9ClearCore11EthernetUdp10PacketReadEPht+0xa4>
    48d6:	4556      	cmp	r6, sl
    48d8:	dd3e      	ble.n	4958 <_ZN9ClearCore11EthernetUdp10PacketReadEPht+0xd4>
                (offset < packet->len)) {
    48da:	f8b8 300a 	ldrh.w	r3, [r8, #10]
        while ((*available > 0) && (bytesRead < size) &&
    48de:	4299      	cmp	r1, r3
    48e0:	da23      	bge.n	492a <_ZN9ClearCore11EthernetUdp10PacketReadEPht+0xa6>
            buffer[bytesRead++] = pbuf_get_at(packet, offset++);
    48e2:	4640      	mov	r0, r8
    48e4:	1c4c      	adds	r4, r1, #1
    48e6:	f013 f9db 	bl	17ca0 <pbuf_get_at>
    48ea:	f807 0009 	strb.w	r0, [r7, r9]
            (*available)--;
    48ee:	8c2b      	ldrh	r3, [r5, #32]
            buffer[bytesRead++] = pbuf_get_at(packet, offset++);
    48f0:	f109 0a01 	add.w	sl, r9, #1
            (*available)--;
    48f4:	3b01      	subs	r3, #1
            buffer[bytesRead++] = pbuf_get_at(packet, offset++);
    48f6:	fa1f fa8a 	uxth.w	sl, sl
    48fa:	b2a4      	uxth	r4, r4
            (*available)--;
    48fc:	b29b      	uxth	r3, r3
            buffer[bytesRead++] = pbuf_get_at(packet, offset++);
    48fe:	4621      	mov	r1, r4
    4900:	46d1      	mov	r9, sl
        while ((*available > 0) && (bytesRead < size) &&
    4902:	4654      	mov	r4, sl
            (*available)--;
    4904:	842b      	strh	r3, [r5, #32]
        while ((*available > 0) && (bytesRead < size) &&
    4906:	2b00      	cmp	r3, #0
    4908:	d1e5      	bne.n	48d6 <_ZN9ClearCore11EthernetUdp10PacketReadEPht+0x52>
        if (bytesRead < size) {
    490a:	4556      	cmp	r6, sl
    490c:	dc0e      	bgt.n	492c <_ZN9ClearCore11EthernetUdp10PacketReadEPht+0xa8>
        pbuf_free(m_incomingPacket);
    490e:	69e8      	ldr	r0, [r5, #28]
    4910:	f012 ff6c 	bl	177ec <pbuf_free>
        m_incomingPacket = nullptr;
    4914:	2300      	movs	r3, #0
    4916:	61eb      	str	r3, [r5, #28]
        m_packetParsed = false;
    4918:	f885 3035 	strb.w	r3, [r5, #53]	; 0x35
    return bytesRead == 0 ? -1 : bytesRead;
    491c:	f1ba 0f00 	cmp.w	sl, #0
    4920:	d01f      	beq.n	4962 <_ZN9ClearCore11EthernetUdp10PacketReadEPht+0xde>
    4922:	4650      	mov	r0, sl
    4924:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
        while ((*available > 0) && (bytesRead < size) &&
    4928:	46ca      	mov	sl, r9
        if (bytesRead < size) {
    492a:	46d1      	mov	r9, sl
            packet = packet->next;
    492c:	f8d8 b000 	ldr.w	fp, [r8]
            if (packet != nullptr) {
    4930:	f1bb 0f00 	cmp.w	fp, #0
    4934:	d002      	beq.n	493c <_ZN9ClearCore11EthernetUdp10PacketReadEPht+0xb8>
                pbuf_ref(packet);
    4936:	4658      	mov	r0, fp
    4938:	f012 ff9a 	bl	17870 <pbuf_ref>
            pbuf_free(pbufToFree);
    493c:	4640      	mov	r0, r8
    493e:	f012 ff55 	bl	177ec <pbuf_free>
    4942:	8c2b      	ldrh	r3, [r5, #32]
    while (packet != nullptr && *available > 0 && bytesRead < size) {
    4944:	f1bb 0f00 	cmp.w	fp, #0
    4948:	d008      	beq.n	495c <_ZN9ClearCore11EthernetUdp10PacketReadEPht+0xd8>
            packet = packet->next;
    494a:	46d8      	mov	r8, fp
    while (packet != nullptr && *available > 0 && bytesRead < size) {
    494c:	2b00      	cmp	r3, #0
    494e:	d0de      	beq.n	490e <_ZN9ClearCore11EthernetUdp10PacketReadEPht+0x8a>
    4950:	42a6      	cmp	r6, r4
    4952:	dcb3      	bgt.n	48bc <_ZN9ClearCore11EthernetUdp10PacketReadEPht+0x38>
    4954:	e7e2      	b.n	491c <_ZN9ClearCore11EthernetUdp10PacketReadEPht+0x98>
        while ((*available > 0) && (bytesRead < size) &&
    4956:	46ca      	mov	sl, r9
            packet = packet->next;
    4958:	46d1      	mov	r9, sl
    495a:	e7f7      	b.n	494c <_ZN9ClearCore11EthernetUdp10PacketReadEPht+0xc8>
    if (m_udpBytesAvailable == 0) {
    495c:	2b00      	cmp	r3, #0
    495e:	d1dd      	bne.n	491c <_ZN9ClearCore11EthernetUdp10PacketReadEPht+0x98>
    4960:	e7d5      	b.n	490e <_ZN9ClearCore11EthernetUdp10PacketReadEPht+0x8a>
        return -1;
    4962:	f04f 30ff 	mov.w	r0, #4294967295
    4966:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    496a:	bf00      	nop

0000496c <_ZN9ClearCore11EthernetUdp8RemoteIpEv>:
}
    496c:	6a40      	ldr	r0, [r0, #36]	; 0x24
    496e:	4770      	bx	lr

00004970 <_ZN9ClearCore9Connector17ExternalInterruptEv>:
        \note A value of -1 denotes that the connector has no external
        interrupt available.
    **/
    virtual int8_t ExternalInterrupt() {
        return -1;
    }
    4970:	f04f 30ff 	mov.w	r0, #4294967295
    4974:	4770      	bx	lr
    4976:	bf00      	nop

00004978 <_ZN9ClearCore9SerialUsb6ParityENS_7ISerial9_ParitiesE>:

        \return Returns true if port accepted the format change request.
    **/
    bool Parity(Parities newParity) override {
        return newParity == Parities::PARITY_N;
    }
    4978:	f1a1 0002 	sub.w	r0, r1, #2
    497c:	fab0 f080 	clz	r0, r0
    4980:	0940      	lsrs	r0, r0, #5
    4982:	4770      	bx	lr

00004984 <_ZN9ClearCore9SerialUsb6ParityEv>:

        \return Returns transmission parity enumeration.
    **/
    Parities Parity() override {
        return Parities::PARITY_N;
    }
    4984:	2002      	movs	r0, #2
    4986:	4770      	bx	lr

00004988 <_ZN9ClearCore9SerialUsb8StopBitsEh>:

        For USB Serial ports, only 1 stop bit is supported.
    **/
    bool StopBits(uint8_t bits) override {
        return bits == 1;
    }
    4988:	f1a1 0001 	sub.w	r0, r1, #1
    498c:	fab0 f080 	clz	r0, r0
    4990:	0940      	lsrs	r0, r0, #5
    4992:	4770      	bx	lr

00004994 <_ZN9ClearCore9SerialUsb8CharSizeEh>:

        For USB Serial ports, only 8-bit characters are supported.
    **/
    bool CharSize(uint8_t size) override {
        return size == 8;
    }
    4994:	f1a1 0008 	sub.w	r0, r1, #8
    4998:	fab0 f080 	clz	r0, r0
    499c:	0940      	lsrs	r0, r0, #5
    499e:	4770      	bx	lr

000049a0 <_ZN9ClearCore9SerialUsb4ModeEv>:

        \return The connector's current operational mode.
    **/
    virtual ConnectorModes Mode() override {
        return Connector::Mode();
    }
    49a0:	7a80      	ldrb	r0, [r0, #10]
    49a2:	4770      	bx	lr

000049a4 <_ZThn4_N9ClearCore9SerialUsb4ModeEv>:
    virtual ConnectorModes Mode() override {
    49a4:	f1a0 0004 	sub.w	r0, r0, #4
    49a8:	e7fa      	b.n	49a0 <_ZN9ClearCore9SerialUsb4ModeEv>
    49aa:	bf00      	nop

000049ac <_ZN9ClearCore9SerialUsb4ModeENS_9Connector14ConnectorModesE>:
        \param[in] newMode The new mode to be set.
        The only valid mode is #USB_CDC.
        \return Returns false if the mode is invalid or setup fails.
    **/
    bool Mode(ConnectorModes newMode) override {
        return (m_mode == newMode);
    49ac:	7a80      	ldrb	r0, [r0, #10]
    }
    49ae:	1a40      	subs	r0, r0, r1
    49b0:	fab0 f080 	clz	r0, r0
    49b4:	0940      	lsrs	r0, r0, #5
    49b6:	4770      	bx	lr

000049b8 <_ZThn4_N9ClearCore9SerialUsb4ModeENS_9Connector14ConnectorModesE>:
    bool Mode(ConnectorModes newMode) override {
    49b8:	f1a0 0004 	sub.w	r0, r0, #4
    49bc:	e7f6      	b.n	49ac <_ZN9ClearCore9SerialUsb4ModeENS_9Connector14ConnectorModesE>
    49be:	bf00      	nop

000049c0 <_ZN9ClearCore9SerialUsb4TypeEv>:

        \return The type of the current connector.
    **/
    Connector::ConnectorTypes Type() override {
        return Connector::SERIAL_USB_TYPE;
    }
    49c0:	2008      	movs	r0, #8
    49c2:	4770      	bx	lr

000049c4 <_ZThn4_N9ClearCore9SerialUsb4TypeEv>:
    Connector::ConnectorTypes Type() override {
    49c4:	f1a0 0004 	sub.w	r0, r0, #4
    49c8:	e7fa      	b.n	49c0 <_ZN9ClearCore9SerialUsb4TypeEv>
    49ca:	bf00      	nop

000049cc <_ZN9ClearCore9SerialUsb11IsInHwFaultEv>:
        return true;
    }

    bool IsInHwFault() override {
        return false;
    }
    49cc:	2000      	movs	r0, #0
    49ce:	4770      	bx	lr

000049d0 <_ZThn4_N9ClearCore9SerialUsb11IsInHwFaultEv>:
    bool IsInHwFault() override {
    49d0:	f1a0 0004 	sub.w	r0, r0, #4
    49d4:	e7fa      	b.n	49cc <_ZN9ClearCore9SerialUsb11IsInHwFaultEv>
    49d6:	bf00      	nop

000049d8 <_ZN9ClearCore9SerialUsb10InitializeE13ClearCorePins>:
    /**
        Initialize hardware and/or internal state.
    **/
    void Initialize(ClearCorePins clearCorePin) override {
        m_index = clearCorePin;
        m_mode = USB_CDC;
    49d8:	2311      	movs	r3, #17
        m_index = clearCorePin;
    49da:	8181      	strh	r1, [r0, #12]
        m_mode = USB_CDC;
    49dc:	7283      	strb	r3, [r0, #10]
    49de:	4770      	bx	lr

000049e0 <_ZThn4_N9ClearCore9SerialUsb10InitializeE13ClearCorePins>:
    void Initialize(ClearCorePins clearCorePin) override {
    49e0:	f1a0 0004 	sub.w	r0, r0, #4
    49e4:	e7f8      	b.n	49d8 <_ZN9ClearCore9SerialUsb10InitializeE13ClearCorePins>
    49e6:	bf00      	nop

000049e8 <_ZN9ClearCore9SerialUsb7RefreshEv>:
    /**
        \brief Update connector's state.

        \return Update the internal state.
    **/
    void Refresh() override {};
    49e8:	4770      	bx	lr
    49ea:	bf00      	nop

000049ec <_ZThn4_N9ClearCore9SerialUsb7RefreshEv>:
    49ec:	f1a0 0004 	sub.w	r0, r0, #4
    49f0:	e7fa      	b.n	49e8 <_ZN9ClearCore9SerialUsb7RefreshEv>
    49f2:	bf00      	nop

000049f4 <_ZN9ClearCore9SerialUsb10FlushInputEv>:

SerialUsb::SerialUsb(uint16_t index) :
    m_index(index) {}

void SerialUsb::FlushInput() {
    UsbMgr.FlushInput();
    49f4:	4b01      	ldr	r3, [pc, #4]	; (49fc <_ZN9ClearCore9SerialUsb10FlushInputEv+0x8>)
    49f6:	6818      	ldr	r0, [r3, #0]
    49f8:	f000 be5e 	b.w	56b8 <_ZN9ClearCore10UsbManager10FlushInputEv>
    49fc:	20000b84 	.word	0x20000b84

00004a00 <_ZN9ClearCore9SerialUsb19WaitForTransmitIdleEv>:
int32_t SerialUsb::AvailableForWrite() {
    return UsbMgr.AvailableForWrite();
}

void SerialUsb::WaitForTransmitIdle() {
    UsbMgr.WaitForWriteFinish();
    4a00:	4b01      	ldr	r3, [pc, #4]	; (4a08 <_ZN9ClearCore9SerialUsb19WaitForTransmitIdleEv+0x8>)
    4a02:	6818      	ldr	r0, [r3, #0]
    4a04:	f000 be66 	b.w	56d4 <_ZN9ClearCore10UsbManager18WaitForWriteFinishEv>
    4a08:	20000b84 	.word	0x20000b84

00004a0c <_ZN9ClearCore9SerialUsb10PortIsOpenEv>:
}

SerialUsb::operator bool() {
    return static_cast<bool>(UsbMgr);
    4a0c:	4b01      	ldr	r3, [pc, #4]	; (4a14 <_ZN9ClearCore9SerialUsb10PortIsOpenEv+0x8>)
    4a0e:	6818      	ldr	r0, [r3, #0]
    4a10:	f000 be7a 	b.w	5708 <_ZN9ClearCore10UsbManagercvbEv>
    4a14:	20000b84 	.word	0x20000b84

00004a18 <_ZN9ClearCore9SerialUsb8PortOpenEv>:
    UsbMgr.PortOpen();
    4a18:	4b01      	ldr	r3, [pc, #4]	; (4a20 <_ZN9ClearCore9SerialUsb8PortOpenEv+0x8>)
    4a1a:	6818      	ldr	r0, [r3, #0]
    4a1c:	f000 be30 	b.w	5680 <_ZN9ClearCore10UsbManager8PortOpenEv>
    4a20:	20000b84 	.word	0x20000b84

00004a24 <_ZN9ClearCore9SerialUsb9PortCloseEv>:
    UsbMgr.PortClose();
    4a24:	4b01      	ldr	r3, [pc, #4]	; (4a2c <_ZN9ClearCore9SerialUsb9PortCloseEv+0x8>)
    4a26:	6818      	ldr	r0, [r3, #0]
    4a28:	f001 ba04 	b.w	5e34 <_ZN9ClearCore10UsbManager9PortCloseEv>
    4a2c:	20000b84 	.word	0x20000b84

00004a30 <_ZN9ClearCore9SerialUsb5SpeedEm>:
    return UsbMgr.Speed(bitsPerSecond);
    4a30:	4b01      	ldr	r3, [pc, #4]	; (4a38 <_ZN9ClearCore9SerialUsb5SpeedEm+0x8>)
    4a32:	6818      	ldr	r0, [r3, #0]
    4a34:	f000 be1c 	b.w	5670 <_ZN9ClearCore10UsbManager5SpeedEm>
    4a38:	20000b84 	.word	0x20000b84

00004a3c <_ZN9ClearCore9SerialUsb5SpeedEv>:
    return UsbMgr.Speed();
    4a3c:	4b01      	ldr	r3, [pc, #4]	; (4a44 <_ZN9ClearCore9SerialUsb5SpeedEv+0x8>)
    4a3e:	6818      	ldr	r0, [r3, #0]
    4a40:	f000 be18 	b.w	5674 <_ZN9ClearCore10UsbManager5SpeedEv>
    4a44:	20000b84 	.word	0x20000b84

00004a48 <_ZN9ClearCore9SerialUsb7CharGetEv>:
    return UsbMgr.CharGet();
    4a48:	4b01      	ldr	r3, [pc, #4]	; (4a50 <_ZN9ClearCore9SerialUsb7CharGetEv+0x8>)
    4a4a:	6818      	ldr	r0, [r3, #0]
    4a4c:	f000 be7a 	b.w	5744 <_ZN9ClearCore10UsbManager7CharGetEv>
    4a50:	20000b84 	.word	0x20000b84

00004a54 <_ZN9ClearCore9SerialUsb8CharPeekEv>:
    return UsbMgr.CharPeek();
    4a54:	4b01      	ldr	r3, [pc, #4]	; (4a5c <_ZN9ClearCore9SerialUsb8CharPeekEv+0x8>)
    4a56:	6818      	ldr	r0, [r3, #0]
    4a58:	f000 bfa0 	b.w	599c <_ZN9ClearCore10UsbManager8CharPeekEv>
    4a5c:	20000b84 	.word	0x20000b84

00004a60 <_ZN9ClearCore9SerialUsb8SendCharEh>:
    return UsbMgr.SendChar(charToSend);
    4a60:	4b01      	ldr	r3, [pc, #4]	; (4a68 <_ZN9ClearCore9SerialUsb8SendCharEh+0x8>)
    4a62:	6818      	ldr	r0, [r3, #0]
    4a64:	f000 bfa6 	b.w	59b4 <_ZN9ClearCore10UsbManager8SendCharEh>
    4a68:	20000b84 	.word	0x20000b84

00004a6c <_ZN9ClearCore9SerialUsb16AvailableForReadEv>:
    return UsbMgr.AvailableForRead();
    4a6c:	4b01      	ldr	r3, [pc, #4]	; (4a74 <_ZN9ClearCore9SerialUsb16AvailableForReadEv+0x8>)
    4a6e:	6818      	ldr	r0, [r3, #0]
    4a70:	f000 bfd4 	b.w	5a1c <_ZN9ClearCore10UsbManager16AvailableForReadEv>
    4a74:	20000b84 	.word	0x20000b84

00004a78 <_ZN9ClearCore9SerialUsb17AvailableForWriteEv>:
    return UsbMgr.AvailableForWrite();
    4a78:	4b01      	ldr	r3, [pc, #4]	; (4a80 <_ZN9ClearCore9SerialUsb17AvailableForWriteEv+0x8>)
    4a7a:	6818      	ldr	r0, [r3, #0]
    4a7c:	f000 bfd6 	b.w	5a2c <_ZN9ClearCore10UsbManager17AvailableForWriteEv>
    4a80:	20000b84 	.word	0x20000b84

00004a84 <_ZN9ClearCore9SerialUsb10IsWritableEv>:
        return PortIsOpen();
    4a84:	6803      	ldr	r3, [r0, #0]
    4a86:	4a04      	ldr	r2, [pc, #16]	; (4a98 <_ZN9ClearCore9SerialUsb10IsWritableEv+0x14>)
    4a88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    4a8a:	4293      	cmp	r3, r2
    4a8c:	d103      	bne.n	4a96 <_ZN9ClearCore9SerialUsb10IsWritableEv+0x12>
    return static_cast<bool>(UsbMgr);
    4a8e:	4b03      	ldr	r3, [pc, #12]	; (4a9c <_ZN9ClearCore9SerialUsb10IsWritableEv+0x18>)
    4a90:	6818      	ldr	r0, [r3, #0]
    4a92:	f000 be39 	b.w	5708 <_ZN9ClearCore10UsbManagercvbEv>
    4a96:	4718      	bx	r3
    4a98:	00004a0d 	.word	0x00004a0d
    4a9c:	20000b84 	.word	0x20000b84

00004aa0 <_ZThn4_N9ClearCore9SerialUsb10IsWritableEv>:
    bool IsWritable() override {
    4aa0:	f1a0 0004 	sub.w	r0, r0, #4
    4aa4:	e7ee      	b.n	4a84 <_ZN9ClearCore9SerialUsb10IsWritableEv>
    4aa6:	bf00      	nop

00004aa8 <_ZN9ClearCore9SerialUsb5StateEv>:
    int16_t State() override {
    4aa8:	b508      	push	{r3, lr}
        return PortIsOpen();
    4aaa:	6803      	ldr	r3, [r0, #0]
    4aac:	4a06      	ldr	r2, [pc, #24]	; (4ac8 <_ZN9ClearCore9SerialUsb5StateEv+0x20>)
    4aae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    4ab0:	4293      	cmp	r3, r2
    4ab2:	d105      	bne.n	4ac0 <_ZN9ClearCore9SerialUsb5StateEv+0x18>
    4ab4:	4b05      	ldr	r3, [pc, #20]	; (4acc <_ZN9ClearCore9SerialUsb5StateEv+0x24>)
    4ab6:	6818      	ldr	r0, [r3, #0]
    4ab8:	f000 fe26 	bl	5708 <_ZN9ClearCore10UsbManagercvbEv>
    }
    4abc:	b200      	sxth	r0, r0
    4abe:	bd08      	pop	{r3, pc}
        return PortIsOpen();
    4ac0:	4798      	blx	r3
    }
    4ac2:	b200      	sxth	r0, r0
    4ac4:	bd08      	pop	{r3, pc}
    4ac6:	bf00      	nop
    4ac8:	00004a0d 	.word	0x00004a0d
    4acc:	20000b84 	.word	0x20000b84

00004ad0 <_ZThn4_N9ClearCore9SerialUsb5StateEv>:
    int16_t State() override {
    4ad0:	f1a0 0004 	sub.w	r0, r0, #4
    4ad4:	e7e8      	b.n	4aa8 <_ZN9ClearCore9SerialUsb5StateEv>
    4ad6:	bf00      	nop

00004ad8 <_ZN9ClearCore9SerialUsb5StateEs>:
    bool State(int16_t newState) override {
    4ad8:	b508      	push	{r3, lr}
            PortOpen();
    4ada:	6803      	ldr	r3, [r0, #0]
        if (newState) {
    4adc:	b961      	cbnz	r1, 4af8 <_ZN9ClearCore9SerialUsb5StateEs+0x20>
    4ade:	4a0b      	ldr	r2, [pc, #44]	; (4b0c <_ZN9ClearCore9SerialUsb5StateEs+0x34>)
            PortClose();
    4ae0:	68db      	ldr	r3, [r3, #12]
    4ae2:	4293      	cmp	r3, r2
    4ae4:	d105      	bne.n	4af2 <_ZN9ClearCore9SerialUsb5StateEs+0x1a>
    UsbMgr.PortClose();
    4ae6:	4b0a      	ldr	r3, [pc, #40]	; (4b10 <_ZN9ClearCore9SerialUsb5StateEs+0x38>)
    4ae8:	6818      	ldr	r0, [r3, #0]
    4aea:	f001 f9a3 	bl	5e34 <_ZN9ClearCore10UsbManager9PortCloseEv>
    }
    4aee:	2001      	movs	r0, #1
    4af0:	bd08      	pop	{r3, pc}
            PortClose();
    4af2:	4798      	blx	r3
    }
    4af4:	2001      	movs	r0, #1
    4af6:	bd08      	pop	{r3, pc}
    4af8:	4a06      	ldr	r2, [pc, #24]	; (4b14 <_ZN9ClearCore9SerialUsb5StateEs+0x3c>)
            PortOpen();
    4afa:	689b      	ldr	r3, [r3, #8]
    4afc:	4293      	cmp	r3, r2
    4afe:	d1f8      	bne.n	4af2 <_ZN9ClearCore9SerialUsb5StateEs+0x1a>
    UsbMgr.PortOpen();
    4b00:	4b03      	ldr	r3, [pc, #12]	; (4b10 <_ZN9ClearCore9SerialUsb5StateEs+0x38>)
    4b02:	6818      	ldr	r0, [r3, #0]
    4b04:	f000 fdbc 	bl	5680 <_ZN9ClearCore10UsbManager8PortOpenEv>
    }
    4b08:	2001      	movs	r0, #1
    4b0a:	bd08      	pop	{r3, pc}
    4b0c:	00004a25 	.word	0x00004a25
    4b10:	20000b84 	.word	0x20000b84
    4b14:	00004a19 	.word	0x00004a19

00004b18 <_ZThn4_N9ClearCore9SerialUsb5StateEs>:
    bool State(int16_t newState) override {
    4b18:	f1a0 0004 	sub.w	r0, r0, #4
    4b1c:	e7dc      	b.n	4ad8 <_ZN9ClearCore9SerialUsb5StateEs>
    4b1e:	bf00      	nop

00004b20 <_ZN9ClearCore10UsbManager18CBLineStateChangedE22usb_cdc_control_signal>:
**/

/**
    Callback invoked when Line State Change
**/
bool UsbManager::CBLineStateChanged(usb_cdc_control_signal_t state) {
    4b20:	b530      	push	{r4, r5, lr}
    4b22:	b083      	sub	sp, #12
    UsbMgr.m_lineState = state;
    4b24:	4d1a      	ldr	r5, [pc, #104]	; (4b90 <_ZN9ClearCore10UsbManager18CBLineStateChangedE22usb_cdc_control_signal+0x70>)
bool UsbManager::CBLineStateChanged(usb_cdc_control_signal_t state) {
    4b26:	f8ad 0004 	strh.w	r0, [sp, #4]
    if (state.rs232.DTR) {
    4b2a:	f89d 1004 	ldrb.w	r1, [sp, #4]
    UsbMgr.m_lineState = state;
    4b2e:	682b      	ldr	r3, [r5, #0]
    if (state.rs232.DTR) {
    4b30:	f011 0401 	ands.w	r4, r1, #1
    UsbMgr.m_lineState = state;
    4b34:	f8a3 0112 	strh.w	r0, [r3, #274]	; 0x112
    if (state.rs232.DTR) {
    4b38:	d112      	bne.n	4b60 <_ZN9ClearCore10UsbManager18CBLineStateChangedE22usb_cdc_control_signal+0x40>
        // Start Rx
        cdcdf_acm_read(UsbMgr.m_usbReadBuf, sizeof(UsbMgr.m_usbReadBuf));
    }
    else {
        // Callbacks must be registered after endpoint allocation
        cdcdf_acm_register_callback(CDCDF_ACM_CB_READ, (FUNC_PTR)NULL);
    4b3a:	4621      	mov	r1, r4
    4b3c:	4620      	mov	r0, r4
    4b3e:	f006 fac9 	bl	b0d4 <cdcdf_acm_register_callback>
        cdcdf_acm_register_callback(CDCDF_ACM_CB_WRITE, (FUNC_PTR)NULL);
    4b42:	4621      	mov	r1, r4
    4b44:	2001      	movs	r0, #1
    4b46:	f006 fac5 	bl	b0d4 <cdcdf_acm_register_callback>
        // Stop Rx/Tx
        cdcdf_acm_stop_xfer();
    4b4a:	f006 fab7 	bl	b0bc <cdcdf_acm_stop_xfer>
        if (cdcdf_acm_get_line_coding()->dwDTERate == 1200) {
    4b4e:	f006 faef 	bl	b130 <cdcdf_acm_get_line_coding>
    4b52:	6803      	ldr	r3, [r0, #0]
    4b54:	f5b3 6f96 	cmp.w	r3, #1200	; 0x4b0
    4b58:	d012      	beq.n	4b80 <_ZN9ClearCore10UsbManager18CBLineStateChangedE22usb_cdc_control_signal+0x60>
        }
    }

    // No error
    return false;
}
    4b5a:	2000      	movs	r0, #0
    4b5c:	b003      	add	sp, #12
    4b5e:	bd30      	pop	{r4, r5, pc}
        cdcdf_acm_register_callback(CDCDF_ACM_CB_READ, (FUNC_PTR)RxComplete);
    4b60:	490c      	ldr	r1, [pc, #48]	; (4b94 <_ZN9ClearCore10UsbManager18CBLineStateChangedE22usb_cdc_control_signal+0x74>)
    4b62:	2000      	movs	r0, #0
    4b64:	f006 fab6 	bl	b0d4 <cdcdf_acm_register_callback>
        cdcdf_acm_register_callback(CDCDF_ACM_CB_WRITE, (FUNC_PTR)TxComplete);
    4b68:	490b      	ldr	r1, [pc, #44]	; (4b98 <_ZN9ClearCore10UsbManager18CBLineStateChangedE22usb_cdc_control_signal+0x78>)
    4b6a:	2001      	movs	r0, #1
    4b6c:	f006 fab2 	bl	b0d4 <cdcdf_acm_register_callback>
        cdcdf_acm_read(UsbMgr.m_usbReadBuf, sizeof(UsbMgr.m_usbReadBuf));
    4b70:	6828      	ldr	r0, [r5, #0]
    4b72:	2140      	movs	r1, #64	; 0x40
    4b74:	3080      	adds	r0, #128	; 0x80
    4b76:	f006 fa79 	bl	b06c <cdcdf_acm_read>
}
    4b7a:	2000      	movs	r0, #0
    4b7c:	b003      	add	sp, #12
    4b7e:	bd30      	pop	{r4, r5, pc}
            SysMgr.ResetBoard(SysManager::RESET_TO_BOOTLOADER);
    4b80:	2101      	movs	r1, #1
    4b82:	4806      	ldr	r0, [pc, #24]	; (4b9c <_ZN9ClearCore10UsbManager18CBLineStateChangedE22usb_cdc_control_signal+0x7c>)
    4b84:	f003 fa36 	bl	7ff4 <_ZN9ClearCore10SysManager10ResetBoardENS0_10ResetModesE>
}
    4b88:	2000      	movs	r0, #0
    4b8a:	b003      	add	sp, #12
    4b8c:	bd30      	pop	{r4, r5, pc}
    4b8e:	bf00      	nop
    4b90:	20000b84 	.word	0x20000b84
    4b94:	00004ba1 	.word	0x00004ba1
    4b98:	00004dd9 	.word	0x00004dd9
    4b9c:	20001a7c 	.word	0x20001a7c

00004ba0 <_ZN9ClearCore10UsbManager10RxCompleteEh13usb_xfer_codem>:
    return true;
}

bool UsbManager::RxComplete(const uint8_t ep,
                            const enum usb_xfer_code rc,
                            const uint32_t count) {
    4ba0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    4ba4:	b083      	sub	sp, #12
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
    4ba6:	b672      	cpsid	i
    UNUSED(ep);
    UNUSED(rc);

    __disable_irq();
    // Make the Rx data available to be copied into the Rx ring buffer
    UsbMgr.m_readBufAvail = count;
    4ba8:	498a      	ldr	r1, [pc, #552]	; (4dd4 <_ZN9ClearCore10UsbManager10RxCompleteEh13usb_xfer_codem+0x234>)
    4baa:	680b      	ldr	r3, [r1, #0]
    UsbMgr.m_readBufPtr = UsbMgr.m_usbReadBuf;
    4bac:	f103 0080 	add.w	r0, r3, #128	; 0x80
    UsbMgr.m_readBufAvail = count;
    4bb0:	f8c3 2118 	str.w	r2, [r3, #280]	; 0x118
    UsbMgr.m_readBufPtr = UsbMgr.m_usbReadBuf;
    4bb4:	f8c3 0114 	str.w	r0, [r3, #276]	; 0x114
  __ASM volatile ("cpsie i" : : : "memory");
    4bb8:	b662      	cpsie	i
    __enable_irq();
    UsbMgr.RxCopyToRingBuf();
    4bba:	6808      	ldr	r0, [r1, #0]
  __ASM volatile ("cpsid i" : : : "memory");
    4bbc:	b672      	cpsid	i
    int32_t difference = m_inTail - m_inHead;
    4bbe:	f8d0 3104 	ldr.w	r3, [r0, #260]	; 0x104
    4bc2:	f8d0 2100 	ldr.w	r2, [r0, #256]	; 0x100
}

void UsbManager::RxCopyToRingBuf() {
    __disable_irq();
    uint32_t space = sizeof(m_bufferIn) - 1 - AvailableForRead();
    if (m_readBufAvail && space) {
    4bc6:	f8d0 4118 	ldr.w	r4, [r0, #280]	; 0x118
    if (difference < 0) {
    4bca:	1a9b      	subs	r3, r3, r2
        return sizeof(m_bufferIn) + difference;
    4bcc:	bf48      	it	mi
    4bce:	3340      	addmi	r3, #64	; 0x40
    if (m_readBufAvail && space) {
    4bd0:	2c00      	cmp	r4, #0
    4bd2:	f000 80d6 	beq.w	4d82 <_ZN9ClearCore10UsbManager10RxCompleteEh13usb_xfer_codem+0x1e2>
    4bd6:	f1d3 033f 	rsbs	r3, r3, #63	; 0x3f
    4bda:	f000 80d2 	beq.w	4d82 <_ZN9ClearCore10UsbManager10RxCompleteEh13usb_xfer_codem+0x1e2>

        uint32_t count = min(space, m_readBufAvail);
        uint32_t tail = m_inTail;
    4bde:	f8d0 5104 	ldr.w	r5, [r0, #260]	; 0x104
        uint8_t *inPtr = m_readBufPtr;
    4be2:	f8d0 2114 	ldr.w	r2, [r0, #276]	; 0x114
    4be6:	42a3      	cmp	r3, r4
    4be8:	bf28      	it	cs
    4bea:	4623      	movcs	r3, r4
        uint8_t *outPtr = &m_bufferIn[tail];
        uint32_t countTilWrap = sizeof(m_bufferIn) - tail;
    4bec:	f1c5 0140 	rsb	r1, r5, #64	; 0x40
    4bf0:	4299      	cmp	r1, r3
    4bf2:	bf28      	it	cs
    4bf4:	4619      	movcs	r1, r3
        uint8_t *outPtr = &m_bufferIn[tail];
    4bf6:	1946      	adds	r6, r0, r5
        countTilWrap = min(countTilWrap, count);

        // Copy the available data until we get to the
        // end of input data or the ring buffer wrap point
        for (uint32_t i = 0; i < countTilWrap; i++) {
    4bf8:	2900      	cmp	r1, #0
    4bfa:	f000 80e8 	beq.w	4dce <_ZN9ClearCore10UsbManager10RxCompleteEh13usb_xfer_codem+0x22e>
    4bfe:	1d2c      	adds	r4, r5, #4
    4c00:	4404      	add	r4, r0
    4c02:	1d17      	adds	r7, r2, #4
    4c04:	42be      	cmp	r6, r7
    4c06:	bf38      	it	cc
    4c08:	42a2      	cmpcc	r2, r4
    4c0a:	f0c0 80ce 	bcc.w	4daa <_ZN9ClearCore10UsbManager10RxCompleteEh13usb_xfer_codem+0x20a>
    4c0e:	290b      	cmp	r1, #11
    4c10:	f240 80cb 	bls.w	4daa <_ZN9ClearCore10UsbManager10RxCompleteEh13usb_xfer_codem+0x20a>
    4c14:	4254      	negs	r4, r2
    4c16:	f014 0403 	ands.w	r4, r4, #3
    4c1a:	f000 80b7 	beq.w	4d8c <_ZN9ClearCore10UsbManager10RxCompleteEh13usb_xfer_codem+0x1ec>
            *outPtr++ = *inPtr++;
    4c1e:	7817      	ldrb	r7, [r2, #0]
    4c20:	5547      	strb	r7, [r0, r5]
    4c22:	2c01      	cmp	r4, #1
    4c24:	f106 0c01 	add.w	ip, r6, #1
    4c28:	f102 0801 	add.w	r8, r2, #1
    4c2c:	f000 80b0 	beq.w	4d90 <_ZN9ClearCore10UsbManager10RxCompleteEh13usb_xfer_codem+0x1f0>
    4c30:	7857      	ldrb	r7, [r2, #1]
    4c32:	7077      	strb	r7, [r6, #1]
    4c34:	2c02      	cmp	r4, #2
    4c36:	f106 0c02 	add.w	ip, r6, #2
    4c3a:	f102 0802 	add.w	r8, r2, #2
    4c3e:	f000 80a7 	beq.w	4d90 <_ZN9ClearCore10UsbManager10RxCompleteEh13usb_xfer_codem+0x1f0>
    4c42:	7897      	ldrb	r7, [r2, #2]
    4c44:	70b7      	strb	r7, [r6, #2]
    4c46:	f106 0c03 	add.w	ip, r6, #3
        for (uint32_t i = 0; i < countTilWrap; i++) {
    4c4a:	2603      	movs	r6, #3
            *outPtr++ = *inPtr++;
    4c4c:	f102 0803 	add.w	r8, r2, #3
        for (uint32_t i = 0; i < countTilWrap; i++) {
    4c50:	9601      	str	r6, [sp, #4]
    4c52:	eba1 0b04 	sub.w	fp, r1, r4
    4c56:	f1ab 0604 	sub.w	r6, fp, #4
    4c5a:	08b6      	lsrs	r6, r6, #2
    4c5c:	192f      	adds	r7, r5, r4
    4c5e:	3601      	adds	r6, #1
    4c60:	ea4f 0986 	mov.w	r9, r6, lsl #2
    4c64:	4407      	add	r7, r0
    4c66:	4414      	add	r4, r2
    4c68:	f04f 0e00 	mov.w	lr, #0
    4c6c:	f10e 0e01 	add.w	lr, lr, #1
            *outPtr++ = *inPtr++;
    4c70:	f854 ab04 	ldr.w	sl, [r4], #4
    4c74:	f847 ab04 	str.w	sl, [r7], #4
    4c78:	4576      	cmp	r6, lr
    4c7a:	d8f7      	bhi.n	4c6c <_ZN9ClearCore10UsbManager10RxCompleteEh13usb_xfer_codem+0xcc>
    4c7c:	9c01      	ldr	r4, [sp, #4]
    4c7e:	45cb      	cmp	fp, r9
    4c80:	444c      	add	r4, r9
    4c82:	eb0c 0709 	add.w	r7, ip, r9
    4c86:	eb08 0e09 	add.w	lr, r8, r9
    4c8a:	f000 8089 	beq.w	4da0 <_ZN9ClearCore10UsbManager10RxCompleteEh13usb_xfer_codem+0x200>
    4c8e:	f818 8026 	ldrb.w	r8, [r8, r6, lsl #2]
    4c92:	f80c 8026 	strb.w	r8, [ip, r6, lsl #2]
        for (uint32_t i = 0; i < countTilWrap; i++) {
    4c96:	1c66      	adds	r6, r4, #1
    4c98:	42b1      	cmp	r1, r6
    4c9a:	f240 8081 	bls.w	4da0 <_ZN9ClearCore10UsbManager10RxCompleteEh13usb_xfer_codem+0x200>
    4c9e:	3402      	adds	r4, #2
            *outPtr++ = *inPtr++;
    4ca0:	f89e 6001 	ldrb.w	r6, [lr, #1]
    4ca4:	707e      	strb	r6, [r7, #1]
        for (uint32_t i = 0; i < countTilWrap; i++) {
    4ca6:	42a1      	cmp	r1, r4
    4ca8:	d97a      	bls.n	4da0 <_ZN9ClearCore10UsbManager10RxCompleteEh13usb_xfer_codem+0x200>
            *outPtr++ = *inPtr++;
    4caa:	f89e 4002 	ldrb.w	r4, [lr, #2]
    4cae:	70bc      	strb	r4, [r7, #2]
    4cb0:	1856      	adds	r6, r2, r1
    4cb2:	f8d0 2114 	ldr.w	r2, [r0, #276]	; 0x114
    4cb6:	f8d0 4118 	ldr.w	r4, [r0, #280]	; 0x118
        }
        count -= countTilWrap;
        m_readBufPtr += countTilWrap;
    4cba:	440a      	add	r2, r1
        m_readBufAvail -= countTilWrap;
    4cbc:	1a64      	subs	r4, r4, r1
        if (count) {
    4cbe:	1a5b      	subs	r3, r3, r1
        m_readBufPtr += countTilWrap;
    4cc0:	f8c0 2114 	str.w	r2, [r0, #276]	; 0x114
        m_readBufAvail -= countTilWrap;
    4cc4:	f8c0 4118 	str.w	r4, [r0, #280]	; 0x118
        if (count) {
    4cc8:	d064      	beq.n	4d94 <_ZN9ClearCore10UsbManager10RxCompleteEh13usb_xfer_codem+0x1f4>
    4cca:	1d31      	adds	r1, r6, #4
    4ccc:	1d02      	adds	r2, r0, #4
    4cce:	4296      	cmp	r6, r2
    4cd0:	bf38      	it	cc
    4cd2:	4288      	cmpcc	r0, r1
            // Account for the ring buffer wrap point
            // and copy the remaining available data
            outPtr = m_bufferIn;
    4cd4:	4604      	mov	r4, r0
    4cd6:	d371      	bcc.n	4dbc <_ZN9ClearCore10UsbManager10RxCompleteEh13usb_xfer_codem+0x21c>
    4cd8:	2b0b      	cmp	r3, #11
    4cda:	d96f      	bls.n	4dbc <_ZN9ClearCore10UsbManager10RxCompleteEh13usb_xfer_codem+0x21c>
    4cdc:	4272      	negs	r2, r6
    4cde:	f012 0203 	ands.w	r2, r2, #3
    4ce2:	d05f      	beq.n	4da4 <_ZN9ClearCore10UsbManager10RxCompleteEh13usb_xfer_codem+0x204>
            for (uint32_t i = 0; i < count; i++) {
                *outPtr++ = *inPtr++;
    4ce4:	7831      	ldrb	r1, [r6, #0]
    4ce6:	7001      	strb	r1, [r0, #0]
    4ce8:	2a01      	cmp	r2, #1
    4cea:	f100 0401 	add.w	r4, r0, #1
    4cee:	f106 0e01 	add.w	lr, r6, #1
    4cf2:	d058      	beq.n	4da6 <_ZN9ClearCore10UsbManager10RxCompleteEh13usb_xfer_codem+0x206>
    4cf4:	7871      	ldrb	r1, [r6, #1]
    4cf6:	7041      	strb	r1, [r0, #1]
    4cf8:	2a02      	cmp	r2, #2
    4cfa:	f100 0402 	add.w	r4, r0, #2
    4cfe:	f106 0e02 	add.w	lr, r6, #2
    4d02:	d050      	beq.n	4da6 <_ZN9ClearCore10UsbManager10RxCompleteEh13usb_xfer_codem+0x206>
    4d04:	78b1      	ldrb	r1, [r6, #2]
    4d06:	7081      	strb	r1, [r0, #2]
    4d08:	1cc4      	adds	r4, r0, #3
    4d0a:	f106 0e03 	add.w	lr, r6, #3
            for (uint32_t i = 0; i < count; i++) {
    4d0e:	2703      	movs	r7, #3
    4d10:	eba3 0c02 	sub.w	ip, r3, r2
    4d14:	f1ac 0104 	sub.w	r1, ip, #4
    4d18:	0889      	lsrs	r1, r1, #2
    4d1a:	1c4d      	adds	r5, r1, #1
    4d1c:	4416      	add	r6, r2
    4d1e:	ea4f 0885 	mov.w	r8, r5, lsl #2
    4d22:	4402      	add	r2, r0
    4d24:	2100      	movs	r1, #0
    4d26:	3101      	adds	r1, #1
                *outPtr++ = *inPtr++;
    4d28:	f856 9b04 	ldr.w	r9, [r6], #4
    4d2c:	f842 9b04 	str.w	r9, [r2], #4
    4d30:	428d      	cmp	r5, r1
    4d32:	d8f8      	bhi.n	4d26 <_ZN9ClearCore10UsbManager10RxCompleteEh13usb_xfer_codem+0x186>
    4d34:	45c4      	cmp	ip, r8
    4d36:	eb07 0208 	add.w	r2, r7, r8
    4d3a:	eb04 0108 	add.w	r1, r4, r8
    4d3e:	eb0e 0608 	add.w	r6, lr, r8
    4d42:	d00d      	beq.n	4d60 <_ZN9ClearCore10UsbManager10RxCompleteEh13usb_xfer_codem+0x1c0>
    4d44:	f81e 7025 	ldrb.w	r7, [lr, r5, lsl #2]
    4d48:	f804 7025 	strb.w	r7, [r4, r5, lsl #2]
            for (uint32_t i = 0; i < count; i++) {
    4d4c:	1c54      	adds	r4, r2, #1
    4d4e:	42a3      	cmp	r3, r4
    4d50:	d906      	bls.n	4d60 <_ZN9ClearCore10UsbManager10RxCompleteEh13usb_xfer_codem+0x1c0>
    4d52:	3202      	adds	r2, #2
                *outPtr++ = *inPtr++;
    4d54:	7874      	ldrb	r4, [r6, #1]
    4d56:	704c      	strb	r4, [r1, #1]
            for (uint32_t i = 0; i < count; i++) {
    4d58:	4293      	cmp	r3, r2
    4d5a:	d901      	bls.n	4d60 <_ZN9ClearCore10UsbManager10RxCompleteEh13usb_xfer_codem+0x1c0>
                *outPtr++ = *inPtr++;
    4d5c:	78b2      	ldrb	r2, [r6, #2]
    4d5e:	708a      	strb	r2, [r1, #2]
            }
            m_inTail = count;
            m_readBufPtr += count;
    4d60:	f8d0 2114 	ldr.w	r2, [r0, #276]	; 0x114
            m_readBufAvail -= count;
    4d64:	f8d0 4118 	ldr.w	r4, [r0, #280]	; 0x118
            m_inTail = count;
    4d68:	f8c0 3104 	str.w	r3, [r0, #260]	; 0x104
            m_readBufPtr += count;
    4d6c:	441a      	add	r2, r3
            m_readBufAvail -= count;
    4d6e:	1ae4      	subs	r4, r4, r3
            m_readBufPtr += count;
    4d70:	f8c0 2114 	str.w	r2, [r0, #276]	; 0x114
            m_readBufAvail -= count;
    4d74:	f8c0 4118 	str.w	r4, [r0, #280]	; 0x118
            m_inTail = (tail + countTilWrap) & (sizeof(m_bufferIn) - 1);
        }

        // If all of the available input data has been copied into the
        // ring buffer, read more input data from the USB device
        if (!m_readBufAvail) {
    4d78:	b91c      	cbnz	r4, 4d82 <_ZN9ClearCore10UsbManager10RxCompleteEh13usb_xfer_codem+0x1e2>
            cdcdf_acm_read(m_usbReadBuf, sizeof(m_usbReadBuf));
    4d7a:	3080      	adds	r0, #128	; 0x80
    4d7c:	2140      	movs	r1, #64	; 0x40
    4d7e:	f006 f975 	bl	b06c <cdcdf_acm_read>
  __ASM volatile ("cpsie i" : : : "memory");
    4d82:	b662      	cpsie	i
}
    4d84:	2001      	movs	r0, #1
    4d86:	b003      	add	sp, #12
    4d88:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        uint8_t *outPtr = &m_bufferIn[tail];
    4d8c:	46b4      	mov	ip, r6
        uint8_t *inPtr = m_readBufPtr;
    4d8e:	4690      	mov	r8, r2
        for (uint32_t i = 0; i < countTilWrap; i++) {
    4d90:	9401      	str	r4, [sp, #4]
    4d92:	e75e      	b.n	4c52 <_ZN9ClearCore10UsbManager10RxCompleteEh13usb_xfer_codem+0xb2>
            m_inTail = (tail + countTilWrap) & (sizeof(m_bufferIn) - 1);
    4d94:	4429      	add	r1, r5
    4d96:	f001 013f 	and.w	r1, r1, #63	; 0x3f
    4d9a:	f8c0 1104 	str.w	r1, [r0, #260]	; 0x104
    4d9e:	e7eb      	b.n	4d78 <_ZN9ClearCore10UsbManager10RxCompleteEh13usb_xfer_codem+0x1d8>
    4da0:	1856      	adds	r6, r2, r1
    4da2:	e786      	b.n	4cb2 <_ZN9ClearCore10UsbManager10RxCompleteEh13usb_xfer_codem+0x112>
            outPtr = m_bufferIn;
    4da4:	46b6      	mov	lr, r6
            for (uint32_t i = 0; i < count; i++) {
    4da6:	4617      	mov	r7, r2
    4da8:	e7b2      	b.n	4d10 <_ZN9ClearCore10UsbManager10RxCompleteEh13usb_xfer_codem+0x170>
    4daa:	1e74      	subs	r4, r6, #1
    4dac:	1856      	adds	r6, r2, r1
            *outPtr++ = *inPtr++;
    4dae:	f812 7b01 	ldrb.w	r7, [r2], #1
    4db2:	f804 7f01 	strb.w	r7, [r4, #1]!
        for (uint32_t i = 0; i < countTilWrap; i++) {
    4db6:	42b2      	cmp	r2, r6
    4db8:	d1f9      	bne.n	4dae <_ZN9ClearCore10UsbManager10RxCompleteEh13usb_xfer_codem+0x20e>
    4dba:	e77a      	b.n	4cb2 <_ZN9ClearCore10UsbManager10RxCompleteEh13usb_xfer_codem+0x112>
    4dbc:	1e42      	subs	r2, r0, #1
    4dbe:	18f4      	adds	r4, r6, r3
                *outPtr++ = *inPtr++;
    4dc0:	f816 1b01 	ldrb.w	r1, [r6], #1
    4dc4:	f802 1f01 	strb.w	r1, [r2, #1]!
            for (uint32_t i = 0; i < count; i++) {
    4dc8:	42b4      	cmp	r4, r6
    4dca:	d1f9      	bne.n	4dc0 <_ZN9ClearCore10UsbManager10RxCompleteEh13usb_xfer_codem+0x220>
    4dcc:	e7c8      	b.n	4d60 <_ZN9ClearCore10UsbManager10RxCompleteEh13usb_xfer_codem+0x1c0>
        uint8_t *inPtr = m_readBufPtr;
    4dce:	4616      	mov	r6, r2
    4dd0:	e773      	b.n	4cba <_ZN9ClearCore10UsbManager10RxCompleteEh13usb_xfer_codem+0x11a>
    4dd2:	bf00      	nop
    4dd4:	20000b84 	.word	0x20000b84

00004dd8 <_ZN9ClearCore10UsbManager10TxCompleteEh13usb_xfer_codem>:
                            const uint32_t count) {
    4dd8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
        UsbMgr.m_outHead =
    4ddc:	48d8      	ldr	r0, [pc, #864]	; (5140 <_ZN9ClearCore10UsbManager10TxCompleteEh13usb_xfer_codem+0x368>)
                            const uint32_t count) {
    4dde:	b083      	sub	sp, #12
    if (rc == USB_XFER_DONE) {
    4de0:	2900      	cmp	r1, #0
    4de2:	f040 81ab 	bne.w	513c <_ZN9ClearCore10UsbManager10TxCompleteEh13usb_xfer_codem+0x364>
        UsbMgr.m_outHead =
    4de6:	6801      	ldr	r1, [r0, #0]
            (UsbMgr.m_outHead + count) & (sizeof(m_bufferOut) - 1);
    4de8:	f8d1 3108 	ldr.w	r3, [r1, #264]	; 0x108
    4dec:	441a      	add	r2, r3
    4dee:	f002 023f 	and.w	r2, r2, #63	; 0x3f
        UsbMgr.m_outHead =
    4df2:	f8c1 2108 	str.w	r2, [r1, #264]	; 0x108
    atomic_clear_seqcst(&UsbMgr.m_sendActive);
    4df6:	2300      	movs	r3, #0
    4df8:	f3bf 8f5b 	dmb	ish
    4dfc:	f881 3110 	strb.w	r3, [r1, #272]	; 0x110
    4e00:	f3bf 8f5b 	dmb	ish
    UsbMgr.TxPump();
    4e04:	6804      	ldr	r4, [r0, #0]
    if (atomic_test_and_set_acqrel(&m_sendActive)) {
    4e06:	f3bf 8f5b 	dmb	ish
    4e0a:	f04f 0101 	mov.w	r1, #1
    4e0e:	f504 7388 	add.w	r3, r4, #272	; 0x110
    4e12:	e8d3 2f4f 	ldrexb	r2, [r3]
    4e16:	e8c3 1f40 	strexb	r0, r1, [r3]
    4e1a:	2800      	cmp	r0, #0
    4e1c:	d1f9      	bne.n	4e12 <_ZN9ClearCore10UsbManager10TxCompleteEh13usb_xfer_codem+0x3a>
    4e1e:	f3bf 8f5b 	dmb	ish
    4e22:	f012 0fff 	tst.w	r2, #255	; 0xff
    4e26:	f040 80dc 	bne.w	4fe2 <_ZN9ClearCore10UsbManager10TxCompleteEh13usb_xfer_codem+0x20a>
    uint32_t head = m_outHead;
    4e2a:	f8d4 6108 	ldr.w	r6, [r4, #264]	; 0x108
    uint32_t tail = m_outTail;
    4e2e:	f8d4 110c 	ldr.w	r1, [r4, #268]	; 0x10c
    if (head == tail) {
    4e32:	428e      	cmp	r6, r1
    4e34:	f000 8191 	beq.w	515a <_ZN9ClearCore10UsbManager10TxCompleteEh13usb_xfer_codem+0x382>
    uint8_t *inPtr = m_bufferOut + head, *outPtr = m_usbWriteBuf;
    4e38:	f104 0240 	add.w	r2, r4, #64	; 0x40
    4e3c:	eb02 0706 	add.w	r7, r2, r6
    4e40:	f104 0ec0 	add.w	lr, r4, #192	; 0xc0
    if (head < tail) {
    4e44:	f0c0 80d1 	bcc.w	4fea <_ZN9ClearCore10UsbManager10TxCompleteEh13usb_xfer_codem+0x212>
        uint32_t countTilWrap = sizeof(m_bufferOut) - head;
    4e48:	f1c6 0340 	rsb	r3, r6, #64	; 0x40
        count = min(count, countTilWrap + tail);
    4e4c:	4419      	add	r1, r3
    4e4e:	2940      	cmp	r1, #64	; 0x40
    4e50:	bf28      	it	cs
    4e52:	2140      	movcs	r1, #64	; 0x40
    4e54:	428b      	cmp	r3, r1
    4e56:	bf28      	it	cs
    4e58:	460b      	movcs	r3, r1
        for (uint32_t iChar = 0; iChar < loopEnd; iChar++) {
    4e5a:	2b00      	cmp	r3, #0
    4e5c:	f000 81a1 	beq.w	51a2 <_ZN9ClearCore10UsbManager10TxCompleteEh13usb_xfer_codem+0x3ca>
    4e60:	f106 0540 	add.w	r5, r6, #64	; 0x40
    4e64:	f106 0c44 	add.w	ip, r6, #68	; 0x44
    4e68:	1960      	adds	r0, r4, r5
    4e6a:	44a4      	add	ip, r4
    4e6c:	f104 08c4 	add.w	r8, r4, #196	; 0xc4
    4e70:	4540      	cmp	r0, r8
    4e72:	bf38      	it	cc
    4e74:	45e6      	cmpcc	lr, ip
    4e76:	f0c0 818a 	bcc.w	518e <_ZN9ClearCore10UsbManager10TxCompleteEh13usb_xfer_codem+0x3b6>
    4e7a:	2b0b      	cmp	r3, #11
    4e7c:	f240 8187 	bls.w	518e <_ZN9ClearCore10UsbManager10TxCompleteEh13usb_xfer_codem+0x3b6>
    4e80:	4240      	negs	r0, r0
    4e82:	f010 0003 	ands.w	r0, r0, #3
    4e86:	f000 8161 	beq.w	514c <_ZN9ClearCore10UsbManager10TxCompleteEh13usb_xfer_codem+0x374>
            *outPtr++ = *inPtr++;
    4e8a:	5d96      	ldrb	r6, [r2, r6]
    4e8c:	f884 60c0 	strb.w	r6, [r4, #192]	; 0xc0
    4e90:	2801      	cmp	r0, #1
    4e92:	f104 0cc1 	add.w	ip, r4, #193	; 0xc1
    4e96:	f107 0801 	add.w	r8, r7, #1
    4e9a:	f000 8159 	beq.w	5150 <_ZN9ClearCore10UsbManager10TxCompleteEh13usb_xfer_codem+0x378>
    4e9e:	787e      	ldrb	r6, [r7, #1]
    4ea0:	f884 60c1 	strb.w	r6, [r4, #193]	; 0xc1
    4ea4:	2802      	cmp	r0, #2
    4ea6:	f104 0cc2 	add.w	ip, r4, #194	; 0xc2
    4eaa:	f107 0802 	add.w	r8, r7, #2
    4eae:	f000 814f 	beq.w	5150 <_ZN9ClearCore10UsbManager10TxCompleteEh13usb_xfer_codem+0x378>
    4eb2:	78be      	ldrb	r6, [r7, #2]
    4eb4:	f884 60c2 	strb.w	r6, [r4, #194]	; 0xc2
        for (uint32_t iChar = 0; iChar < loopEnd; iChar++) {
    4eb8:	2603      	movs	r6, #3
            *outPtr++ = *inPtr++;
    4eba:	f107 0803 	add.w	r8, r7, #3
    4ebe:	f104 0cc3 	add.w	ip, r4, #195	; 0xc3
        for (uint32_t iChar = 0; iChar < loopEnd; iChar++) {
    4ec2:	9601      	str	r6, [sp, #4]
    4ec4:	eba3 0b00 	sub.w	fp, r3, r0
    4ec8:	f1ab 0604 	sub.w	r6, fp, #4
    4ecc:	08b6      	lsrs	r6, r6, #2
    4ece:	4405      	add	r5, r0
    4ed0:	3601      	adds	r6, #1
    4ed2:	30c0      	adds	r0, #192	; 0xc0
    4ed4:	4425      	add	r5, r4
    4ed6:	4420      	add	r0, r4
    4ed8:	ea4f 0986 	mov.w	r9, r6, lsl #2
    4edc:	2700      	movs	r7, #0
    4ede:	3701      	adds	r7, #1
            *outPtr++ = *inPtr++;
    4ee0:	f855 ab04 	ldr.w	sl, [r5], #4
    4ee4:	f840 ab04 	str.w	sl, [r0], #4
    4ee8:	42b7      	cmp	r7, r6
    4eea:	d3f8      	bcc.n	4ede <_ZN9ClearCore10UsbManager10TxCompleteEh13usb_xfer_codem+0x106>
    4eec:	9801      	ldr	r0, [sp, #4]
    4eee:	45cb      	cmp	fp, r9
    4ef0:	4448      	add	r0, r9
    4ef2:	eb0c 0509 	add.w	r5, ip, r9
    4ef6:	eb08 0709 	add.w	r7, r8, r9
    4efa:	d00d      	beq.n	4f18 <_ZN9ClearCore10UsbManager10TxCompleteEh13usb_xfer_codem+0x140>
    4efc:	f818 8026 	ldrb.w	r8, [r8, r6, lsl #2]
    4f00:	f80c 8026 	strb.w	r8, [ip, r6, lsl #2]
        for (uint32_t iChar = 0; iChar < loopEnd; iChar++) {
    4f04:	1c46      	adds	r6, r0, #1
    4f06:	42b3      	cmp	r3, r6
    4f08:	d906      	bls.n	4f18 <_ZN9ClearCore10UsbManager10TxCompleteEh13usb_xfer_codem+0x140>
    4f0a:	3002      	adds	r0, #2
            *outPtr++ = *inPtr++;
    4f0c:	787e      	ldrb	r6, [r7, #1]
    4f0e:	706e      	strb	r6, [r5, #1]
        for (uint32_t iChar = 0; iChar < loopEnd; iChar++) {
    4f10:	4283      	cmp	r3, r0
    4f12:	d901      	bls.n	4f18 <_ZN9ClearCore10UsbManager10TxCompleteEh13usb_xfer_codem+0x140>
            *outPtr++ = *inPtr++;
    4f14:	78b8      	ldrb	r0, [r7, #2]
    4f16:	70a8      	strb	r0, [r5, #2]
    4f18:	eb0e 0003 	add.w	r0, lr, r3
        for (uint32_t iChar = 0; iChar < loopEnd; iChar++) {
    4f1c:	1acb      	subs	r3, r1, r3
    4f1e:	f000 80fc 	beq.w	511a <_ZN9ClearCore10UsbManager10TxCompleteEh13usb_xfer_codem+0x342>
    4f22:	f104 0544 	add.w	r5, r4, #68	; 0x44
    4f26:	1d06      	adds	r6, r0, #4
    4f28:	42b2      	cmp	r2, r6
    4f2a:	bf38      	it	cc
    4f2c:	42a8      	cmpcc	r0, r5
    4f2e:	f0c0 8125 	bcc.w	517c <_ZN9ClearCore10UsbManager10TxCompleteEh13usb_xfer_codem+0x3a4>
    4f32:	2b0b      	cmp	r3, #11
    4f34:	f240 8122 	bls.w	517c <_ZN9ClearCore10UsbManager10TxCompleteEh13usb_xfer_codem+0x3a4>
    4f38:	4255      	negs	r5, r2
    4f3a:	f015 0503 	ands.w	r5, r5, #3
    4f3e:	f000 8109 	beq.w	5154 <_ZN9ClearCore10UsbManager10TxCompleteEh13usb_xfer_codem+0x37c>
            *outPtr++ = *inPtr++;
    4f42:	f894 2040 	ldrb.w	r2, [r4, #64]	; 0x40
    4f46:	7002      	strb	r2, [r0, #0]
    4f48:	2d01      	cmp	r5, #1
    4f4a:	f100 0801 	add.w	r8, r0, #1
    4f4e:	f104 0241 	add.w	r2, r4, #65	; 0x41
    4f52:	f000 8100 	beq.w	5156 <_ZN9ClearCore10UsbManager10TxCompleteEh13usb_xfer_codem+0x37e>
    4f56:	f894 2041 	ldrb.w	r2, [r4, #65]	; 0x41
    4f5a:	7042      	strb	r2, [r0, #1]
    4f5c:	2d02      	cmp	r5, #2
    4f5e:	f100 0802 	add.w	r8, r0, #2
    4f62:	f104 0242 	add.w	r2, r4, #66	; 0x42
    4f66:	f000 80f6 	beq.w	5156 <_ZN9ClearCore10UsbManager10TxCompleteEh13usb_xfer_codem+0x37e>
    4f6a:	f894 2042 	ldrb.w	r2, [r4, #66]	; 0x42
    4f6e:	7082      	strb	r2, [r0, #2]
    4f70:	f100 0803 	add.w	r8, r0, #3
    4f74:	f104 0243 	add.w	r2, r4, #67	; 0x43
        for (uint32_t iChar = 0; iChar < loopEnd; iChar++) {
    4f78:	2703      	movs	r7, #3
    4f7a:	eba3 0905 	sub.w	r9, r3, r5
    4f7e:	f1a9 0604 	sub.w	r6, r9, #4
    4f82:	08b6      	lsrs	r6, r6, #2
    4f84:	f105 0c40 	add.w	ip, r5, #64	; 0x40
    4f88:	3601      	adds	r6, #1
    4f8a:	4428      	add	r0, r5
    4f8c:	44a4      	add	ip, r4
    4f8e:	ea4f 0b86 	mov.w	fp, r6, lsl #2
    4f92:	f04f 0a00 	mov.w	sl, #0
    4f96:	f10a 0a01 	add.w	sl, sl, #1
            *outPtr++ = *inPtr++;
    4f9a:	f85c 5b04 	ldr.w	r5, [ip], #4
    4f9e:	f840 5b04 	str.w	r5, [r0], #4
    4fa2:	4556      	cmp	r6, sl
    4fa4:	d8f7      	bhi.n	4f96 <_ZN9ClearCore10UsbManager10TxCompleteEh13usb_xfer_codem+0x1be>
    4fa6:	45d9      	cmp	r9, fp
    4fa8:	445f      	add	r7, fp
    4faa:	eb08 000b 	add.w	r0, r8, fp
    4fae:	eb02 050b 	add.w	r5, r2, fp
    4fb2:	f000 80b2 	beq.w	511a <_ZN9ClearCore10UsbManager10TxCompleteEh13usb_xfer_codem+0x342>
    4fb6:	f812 2026 	ldrb.w	r2, [r2, r6, lsl #2]
    4fba:	f808 2026 	strb.w	r2, [r8, r6, lsl #2]
        for (uint32_t iChar = 0; iChar < loopEnd; iChar++) {
    4fbe:	1c7a      	adds	r2, r7, #1
    4fc0:	4293      	cmp	r3, r2
    4fc2:	f240 80aa 	bls.w	511a <_ZN9ClearCore10UsbManager10TxCompleteEh13usb_xfer_codem+0x342>
    4fc6:	3702      	adds	r7, #2
            *outPtr++ = *inPtr++;
    4fc8:	786a      	ldrb	r2, [r5, #1]
    4fca:	7042      	strb	r2, [r0, #1]
        for (uint32_t iChar = 0; iChar < loopEnd; iChar++) {
    4fcc:	42bb      	cmp	r3, r7
    4fce:	f240 80a4 	bls.w	511a <_ZN9ClearCore10UsbManager10TxCompleteEh13usb_xfer_codem+0x342>
            *outPtr++ = *inPtr++;
    4fd2:	78ab      	ldrb	r3, [r5, #2]
    4fd4:	7083      	strb	r3, [r0, #2]
    if (cdcdf_acm_write(m_usbWriteBuf, count)) {
    4fd6:	4670      	mov	r0, lr
    4fd8:	f006 f85c 	bl	b094 <cdcdf_acm_write>
    4fdc:	2800      	cmp	r0, #0
    4fde:	f040 80a2 	bne.w	5126 <_ZN9ClearCore10UsbManager10TxCompleteEh13usb_xfer_codem+0x34e>
}
    4fe2:	2001      	movs	r0, #1
    4fe4:	b003      	add	sp, #12
    4fe6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        count = min(count, tail - head);
    4fea:	1b89      	subs	r1, r1, r6
    4fec:	f106 0340 	add.w	r3, r6, #64	; 0x40
    4ff0:	f106 0044 	add.w	r0, r6, #68	; 0x44
    4ff4:	2940      	cmp	r1, #64	; 0x40
    4ff6:	eb04 0803 	add.w	r8, r4, r3
    4ffa:	4420      	add	r0, r4
    4ffc:	f104 05c4 	add.w	r5, r4, #196	; 0xc4
    5000:	bf28      	it	cs
    5002:	2140      	movcs	r1, #64	; 0x40
    5004:	45a8      	cmp	r8, r5
    5006:	bf38      	it	cc
    5008:	4586      	cmpcc	lr, r0
    500a:	f0c0 80ad 	bcc.w	5168 <_ZN9ClearCore10UsbManager10TxCompleteEh13usb_xfer_codem+0x390>
    500e:	290b      	cmp	r1, #11
    5010:	f240 80aa 	bls.w	5168 <_ZN9ClearCore10UsbManager10TxCompleteEh13usb_xfer_codem+0x390>
    5014:	f1c8 0800 	rsb	r8, r8, #0
    5018:	f018 0803 	ands.w	r8, r8, #3
    501c:	f000 8092 	beq.w	5144 <_ZN9ClearCore10UsbManager10TxCompleteEh13usb_xfer_codem+0x36c>
            *outPtr++ = *inPtr++;
    5020:	5d92      	ldrb	r2, [r2, r6]
    5022:	f884 20c0 	strb.w	r2, [r4, #192]	; 0xc0
    5026:	f1b8 0f01 	cmp.w	r8, #1
    502a:	f104 05c1 	add.w	r5, r4, #193	; 0xc1
    502e:	f107 0601 	add.w	r6, r7, #1
    5032:	f000 8089 	beq.w	5148 <_ZN9ClearCore10UsbManager10TxCompleteEh13usb_xfer_codem+0x370>
    5036:	787a      	ldrb	r2, [r7, #1]
    5038:	f884 20c1 	strb.w	r2, [r4, #193]	; 0xc1
    503c:	f1b8 0f02 	cmp.w	r8, #2
    5040:	f104 05c2 	add.w	r5, r4, #194	; 0xc2
    5044:	f107 0602 	add.w	r6, r7, #2
    5048:	d07e      	beq.n	5148 <_ZN9ClearCore10UsbManager10TxCompleteEh13usb_xfer_codem+0x370>
    504a:	78ba      	ldrb	r2, [r7, #2]
    504c:	f884 20c2 	strb.w	r2, [r4, #194]	; 0xc2
    5050:	1cfe      	adds	r6, r7, #3
    5052:	f104 05c3 	add.w	r5, r4, #195	; 0xc3
        for (uint32_t iChar = 0; iChar < count; iChar++) {
    5056:	f04f 0903 	mov.w	r9, #3
    505a:	4443      	add	r3, r8
    505c:	f108 00c0 	add.w	r0, r8, #192	; 0xc0
            *outPtr++ = *inPtr++;
    5060:	58e2      	ldr	r2, [r4, r3]
    5062:	5022      	str	r2, [r4, r0]
    5064:	eba1 0808 	sub.w	r8, r1, r8
    5068:	f1a8 0204 	sub.w	r2, r8, #4
    506c:	4423      	add	r3, r4
    506e:	0892      	lsrs	r2, r2, #2
    5070:	3201      	adds	r2, #1
    5072:	4420      	add	r0, r4
    5074:	685f      	ldr	r7, [r3, #4]
    5076:	6047      	str	r7, [r0, #4]
    5078:	2a02      	cmp	r2, #2
    507a:	ea4f 0c82 	mov.w	ip, r2, lsl #2
    507e:	d035      	beq.n	50ec <_ZN9ClearCore10UsbManager10TxCompleteEh13usb_xfer_codem+0x314>
    5080:	689f      	ldr	r7, [r3, #8]
    5082:	6087      	str	r7, [r0, #8]
    5084:	2a03      	cmp	r2, #3
    5086:	d031      	beq.n	50ec <_ZN9ClearCore10UsbManager10TxCompleteEh13usb_xfer_codem+0x314>
    5088:	68df      	ldr	r7, [r3, #12]
    508a:	60c7      	str	r7, [r0, #12]
    508c:	2a04      	cmp	r2, #4
    508e:	d02d      	beq.n	50ec <_ZN9ClearCore10UsbManager10TxCompleteEh13usb_xfer_codem+0x314>
    5090:	691f      	ldr	r7, [r3, #16]
    5092:	6107      	str	r7, [r0, #16]
    5094:	2a05      	cmp	r2, #5
    5096:	d029      	beq.n	50ec <_ZN9ClearCore10UsbManager10TxCompleteEh13usb_xfer_codem+0x314>
    5098:	695f      	ldr	r7, [r3, #20]
    509a:	6147      	str	r7, [r0, #20]
    509c:	2a06      	cmp	r2, #6
    509e:	d025      	beq.n	50ec <_ZN9ClearCore10UsbManager10TxCompleteEh13usb_xfer_codem+0x314>
    50a0:	699f      	ldr	r7, [r3, #24]
    50a2:	6187      	str	r7, [r0, #24]
    50a4:	2a07      	cmp	r2, #7
    50a6:	d021      	beq.n	50ec <_ZN9ClearCore10UsbManager10TxCompleteEh13usb_xfer_codem+0x314>
    50a8:	69df      	ldr	r7, [r3, #28]
    50aa:	61c7      	str	r7, [r0, #28]
    50ac:	2a08      	cmp	r2, #8
    50ae:	d01d      	beq.n	50ec <_ZN9ClearCore10UsbManager10TxCompleteEh13usb_xfer_codem+0x314>
    50b0:	6a1f      	ldr	r7, [r3, #32]
    50b2:	6207      	str	r7, [r0, #32]
    50b4:	2a09      	cmp	r2, #9
    50b6:	d019      	beq.n	50ec <_ZN9ClearCore10UsbManager10TxCompleteEh13usb_xfer_codem+0x314>
    50b8:	6a5f      	ldr	r7, [r3, #36]	; 0x24
    50ba:	6247      	str	r7, [r0, #36]	; 0x24
    50bc:	2a0a      	cmp	r2, #10
    50be:	d015      	beq.n	50ec <_ZN9ClearCore10UsbManager10TxCompleteEh13usb_xfer_codem+0x314>
    50c0:	6a9f      	ldr	r7, [r3, #40]	; 0x28
    50c2:	6287      	str	r7, [r0, #40]	; 0x28
    50c4:	2a0b      	cmp	r2, #11
    50c6:	d011      	beq.n	50ec <_ZN9ClearCore10UsbManager10TxCompleteEh13usb_xfer_codem+0x314>
    50c8:	6adf      	ldr	r7, [r3, #44]	; 0x2c
    50ca:	62c7      	str	r7, [r0, #44]	; 0x2c
    50cc:	2a0c      	cmp	r2, #12
    50ce:	d00d      	beq.n	50ec <_ZN9ClearCore10UsbManager10TxCompleteEh13usb_xfer_codem+0x314>
    50d0:	6b1f      	ldr	r7, [r3, #48]	; 0x30
    50d2:	6307      	str	r7, [r0, #48]	; 0x30
    50d4:	2a0d      	cmp	r2, #13
    50d6:	d009      	beq.n	50ec <_ZN9ClearCore10UsbManager10TxCompleteEh13usb_xfer_codem+0x314>
    50d8:	6b5f      	ldr	r7, [r3, #52]	; 0x34
    50da:	6347      	str	r7, [r0, #52]	; 0x34
    50dc:	2a0e      	cmp	r2, #14
    50de:	d005      	beq.n	50ec <_ZN9ClearCore10UsbManager10TxCompleteEh13usb_xfer_codem+0x314>
    50e0:	6b9f      	ldr	r7, [r3, #56]	; 0x38
    50e2:	6387      	str	r7, [r0, #56]	; 0x38
    50e4:	2a0f      	cmp	r2, #15
    50e6:	d001      	beq.n	50ec <_ZN9ClearCore10UsbManager10TxCompleteEh13usb_xfer_codem+0x314>
    50e8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
    50ea:	63c3      	str	r3, [r0, #60]	; 0x3c
    50ec:	45e0      	cmp	r8, ip
    50ee:	44e1      	add	r9, ip
    50f0:	eb05 030c 	add.w	r3, r5, ip
    50f4:	eb06 000c 	add.w	r0, r6, ip
    50f8:	d00f      	beq.n	511a <_ZN9ClearCore10UsbManager10TxCompleteEh13usb_xfer_codem+0x342>
    50fa:	f816 6022 	ldrb.w	r6, [r6, r2, lsl #2]
    50fe:	f805 6022 	strb.w	r6, [r5, r2, lsl #2]
        for (uint32_t iChar = 0; iChar < count; iChar++) {
    5102:	f109 0201 	add.w	r2, r9, #1
    5106:	4291      	cmp	r1, r2
    5108:	d907      	bls.n	511a <_ZN9ClearCore10UsbManager10TxCompleteEh13usb_xfer_codem+0x342>
    510a:	f109 0902 	add.w	r9, r9, #2
            *outPtr++ = *inPtr++;
    510e:	7842      	ldrb	r2, [r0, #1]
    5110:	705a      	strb	r2, [r3, #1]
        for (uint32_t iChar = 0; iChar < count; iChar++) {
    5112:	4549      	cmp	r1, r9
    5114:	d901      	bls.n	511a <_ZN9ClearCore10UsbManager10TxCompleteEh13usb_xfer_codem+0x342>
            *outPtr++ = *inPtr++;
    5116:	7882      	ldrb	r2, [r0, #2]
    5118:	709a      	strb	r2, [r3, #2]
    if (cdcdf_acm_write(m_usbWriteBuf, count)) {
    511a:	4670      	mov	r0, lr
    511c:	f005 ffba 	bl	b094 <cdcdf_acm_write>
    5120:	2800      	cmp	r0, #0
    5122:	f43f af5e 	beq.w	4fe2 <_ZN9ClearCore10UsbManager10TxCompleteEh13usb_xfer_codem+0x20a>
        atomic_clear_seqcst(&m_sendActive);
    5126:	f3bf 8f5b 	dmb	ish
    512a:	2300      	movs	r3, #0
    512c:	f884 3110 	strb.w	r3, [r4, #272]	; 0x110
}
    5130:	2001      	movs	r0, #1
        atomic_clear_seqcst(&m_sendActive);
    5132:	f3bf 8f5b 	dmb	ish
}
    5136:	b003      	add	sp, #12
    5138:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    513c:	6801      	ldr	r1, [r0, #0]
    513e:	e65a      	b.n	4df6 <_ZN9ClearCore10UsbManager10TxCompleteEh13usb_xfer_codem+0x1e>
    5140:	20000b84 	.word	0x20000b84
    uint8_t *inPtr = m_bufferOut + head, *outPtr = m_usbWriteBuf;
    5144:	463e      	mov	r6, r7
    5146:	4675      	mov	r5, lr
        for (uint32_t iChar = 0; iChar < count; iChar++) {
    5148:	46c1      	mov	r9, r8
    514a:	e786      	b.n	505a <_ZN9ClearCore10UsbManager10TxCompleteEh13usb_xfer_codem+0x282>
    uint8_t *inPtr = m_bufferOut + head, *outPtr = m_usbWriteBuf;
    514c:	46b8      	mov	r8, r7
    514e:	46f4      	mov	ip, lr
        for (uint32_t iChar = 0; iChar < loopEnd; iChar++) {
    5150:	9001      	str	r0, [sp, #4]
    5152:	e6b7      	b.n	4ec4 <_ZN9ClearCore10UsbManager10TxCompleteEh13usb_xfer_codem+0xec>
        for (uint32_t iChar = 0; iChar < loopEnd; iChar++) {
    5154:	4680      	mov	r8, r0
    5156:	462f      	mov	r7, r5
    5158:	e70f      	b.n	4f7a <_ZN9ClearCore10UsbManager10TxCompleteEh13usb_xfer_codem+0x1a2>
        atomic_clear_seqcst(&m_sendActive);
    515a:	f3bf 8f5b 	dmb	ish
    515e:	f884 2110 	strb.w	r2, [r4, #272]	; 0x110
    5162:	f3bf 8f5b 	dmb	ish
    5166:	e73c      	b.n	4fe2 <_ZN9ClearCore10UsbManager10TxCompleteEh13usb_xfer_codem+0x20a>
    5168:	f104 03bf 	add.w	r3, r4, #191	; 0xbf
    516c:	1878      	adds	r0, r7, r1
            *outPtr++ = *inPtr++;
    516e:	f817 2b01 	ldrb.w	r2, [r7], #1
    5172:	f803 2f01 	strb.w	r2, [r3, #1]!
        for (uint32_t iChar = 0; iChar < count; iChar++) {
    5176:	4287      	cmp	r7, r0
    5178:	d1f9      	bne.n	516e <_ZN9ClearCore10UsbManager10TxCompleteEh13usb_xfer_codem+0x396>
    517a:	e7ce      	b.n	511a <_ZN9ClearCore10UsbManager10TxCompleteEh13usb_xfer_codem+0x342>
    517c:	3801      	subs	r0, #1
    517e:	4413      	add	r3, r2
            *outPtr++ = *inPtr++;
    5180:	f812 5b01 	ldrb.w	r5, [r2], #1
    5184:	f800 5f01 	strb.w	r5, [r0, #1]!
        for (uint32_t iChar = 0; iChar < loopEnd; iChar++) {
    5188:	429a      	cmp	r2, r3
    518a:	d1f9      	bne.n	5180 <_ZN9ClearCore10UsbManager10TxCompleteEh13usb_xfer_codem+0x3a8>
    518c:	e7c5      	b.n	511a <_ZN9ClearCore10UsbManager10TxCompleteEh13usb_xfer_codem+0x342>
    518e:	f104 00bf 	add.w	r0, r4, #191	; 0xbf
    5192:	18fe      	adds	r6, r7, r3
            *outPtr++ = *inPtr++;
    5194:	f817 5b01 	ldrb.w	r5, [r7], #1
    5198:	f800 5f01 	strb.w	r5, [r0, #1]!
        for (uint32_t iChar = 0; iChar < loopEnd; iChar++) {
    519c:	42be      	cmp	r6, r7
    519e:	d1f9      	bne.n	5194 <_ZN9ClearCore10UsbManager10TxCompleteEh13usb_xfer_codem+0x3bc>
    51a0:	e6ba      	b.n	4f18 <_ZN9ClearCore10UsbManager10TxCompleteEh13usb_xfer_codem+0x140>
    uint8_t *inPtr = m_bufferOut + head, *outPtr = m_usbWriteBuf;
    51a2:	4670      	mov	r0, lr
    51a4:	e6ba      	b.n	4f1c <_ZN9ClearCore10UsbManager10TxCompleteEh13usb_xfer_codem+0x144>
    51a6:	bf00      	nop

000051a8 <_ZN9ClearCore10UsbManager8InstanceEv>:
UsbManager &UsbManager::Instance() {
    51a8:	b570      	push	{r4, r5, r6, lr}
    static UsbManager *instance = new UsbManager();
    51aa:	4e16      	ldr	r6, [pc, #88]	; (5204 <_ZN9ClearCore10UsbManager8InstanceEv+0x5c>)
    51ac:	6834      	ldr	r4, [r6, #0]
    51ae:	f014 0401 	ands.w	r4, r4, #1
    51b2:	d002      	beq.n	51ba <_ZN9ClearCore10UsbManager8InstanceEv+0x12>
    51b4:	4b14      	ldr	r3, [pc, #80]	; (5208 <_ZN9ClearCore10UsbManager8InstanceEv+0x60>)
    51b6:	6818      	ldr	r0, [r3, #0]
    51b8:	bd70      	pop	{r4, r5, r6, pc}
    51ba:	f44f 7090 	mov.w	r0, #288	; 0x120
    51be:	f017 fdbf 	bl	1cd40 <_Znwj>
    51c2:	4605      	mov	r5, r0
    m_portOpen(false) {
    51c4:	f100 0380 	add.w	r3, r0, #128	; 0x80
    51c8:	f8c0 4100 	str.w	r4, [r0, #256]	; 0x100
                                (FUNC_PTR)CBLineStateChanged);
    51cc:	490f      	ldr	r1, [pc, #60]	; (520c <_ZN9ClearCore10UsbManager8InstanceEv+0x64>)
    m_portOpen(false) {
    51ce:	f8c5 4104 	str.w	r4, [r5, #260]	; 0x104
    51d2:	f8c5 3114 	str.w	r3, [r5, #276]	; 0x114
    51d6:	f8c5 4108 	str.w	r4, [r5, #264]	; 0x108
    51da:	f8c5 4118 	str.w	r4, [r5, #280]	; 0x118
    51de:	f8c5 410c 	str.w	r4, [r5, #268]	; 0x10c
    51e2:	f885 411c 	strb.w	r4, [r5, #284]	; 0x11c
    51e6:	f885 4110 	strb.w	r4, [r5, #272]	; 0x110
    m_lineState.value = 0;
    51ea:	f8a5 4112 	strh.w	r4, [r5, #274]	; 0x112
    m_portOpen(false) {
    51ee:	f885 4111 	strb.w	r4, [r5, #273]	; 0x111
                                (FUNC_PTR)CBLineStateChanged);
    51f2:	2003      	movs	r0, #3
    51f4:	f005 ff6e 	bl	b0d4 <cdcdf_acm_register_callback>
    static UsbManager *instance = new UsbManager();
    51f8:	4a03      	ldr	r2, [pc, #12]	; (5208 <_ZN9ClearCore10UsbManager8InstanceEv+0x60>)
    51fa:	2301      	movs	r3, #1
    51fc:	6015      	str	r5, [r2, #0]
    51fe:	4628      	mov	r0, r5
    5200:	6033      	str	r3, [r6, #0]
}
    5202:	bd70      	pop	{r4, r5, r6, pc}
    5204:	20000b80 	.word	0x20000b80
    5208:	20000bc8 	.word	0x20000bc8
    520c:	00004b21 	.word	0x00004b21

00005210 <_ZN9ClearCore10UsbManager10InitializeEv>:
bool UsbManager::Initialize() {
    5210:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    SET_CLOCK_SOURCE(USB_GCLK_ID, 4);
    5214:	4ac7      	ldr	r2, [pc, #796]	; (5534 <_ZN9ClearCore10UsbManager10InitializeEv+0x324>)
    5216:	f8d2 30a8 	ldr.w	r3, [r2, #168]	; 0xa8
    521a:	f36f 1386 	bfc	r3, #6, #1
bool UsbManager::Initialize() {
    521e:	b08c      	sub	sp, #48	; 0x30
    SET_CLOCK_SOURCE(USB_GCLK_ID, 4);
    5220:	f8c2 30a8 	str.w	r3, [r2, #168]	; 0xa8
    5224:	f8d2 30a8 	ldr.w	r3, [r2, #168]	; 0xa8
    5228:	0659      	lsls	r1, r3, #25
    522a:	d4fb      	bmi.n	5224 <_ZN9ClearCore10UsbManager10InitializeEv+0x14>
    522c:	f8d2 30a8 	ldr.w	r3, [r2, #168]	; 0xa8
    5230:	49c0      	ldr	r1, [pc, #768]	; (5534 <_ZN9ClearCore10UsbManager10InitializeEv+0x324>)
    5232:	2004      	movs	r0, #4
    5234:	f360 0303 	bfi	r3, r0, #0, #4
    5238:	f8c2 30a8 	str.w	r3, [r2, #168]	; 0xa8
    523c:	f8d2 30a8 	ldr.w	r3, [r2, #168]	; 0xa8
    5240:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    5244:	f8c2 30a8 	str.w	r3, [r2, #168]	; 0xa8
    5248:	684b      	ldr	r3, [r1, #4]
    524a:	06db      	lsls	r3, r3, #27
    524c:	d4fc      	bmi.n	5248 <_ZN9ClearCore10UsbManager10InitializeEv+0x38>
    CLOCK_ENABLE(AHBMASK, USB_);
    524e:	4bba      	ldr	r3, [pc, #744]	; (5538 <_ZN9ClearCore10UsbManager10InitializeEv+0x328>)
                              CONF_USB_CDCD_ACM_ISERIALNUM);
    5250:	49ba      	ldr	r1, [pc, #744]	; (553c <_ZN9ClearCore10UsbManager10InitializeEv+0x32c>)
    CLOCK_ENABLE(AHBMASK, USB_);
    5252:	691a      	ldr	r2, [r3, #16]
    5254:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
    5258:	611a      	str	r2, [r3, #16]
    CLOCK_ENABLE(APBBMASK, USB_);
    525a:	699a      	ldr	r2, [r3, #24]
    525c:	f042 0201 	orr.w	r2, r2, #1
    5260:	619a      	str	r2, [r3, #24]
                              CONF_USB_CDCD_ACM_ISERIALNUM);
    5262:	f1a1 00d7 	sub.w	r0, r1, #215	; 0xd7
    5266:	2203      	movs	r2, #3
    5268:	f006 fae0 	bl	b82c <usb_find_str_desc>
    if (!serNumDescPtr) {
    526c:	4604      	mov	r4, r0
    526e:	2800      	cmp	r0, #0
    5270:	f000 819c 	beq.w	55ac <_ZN9ClearCore10UsbManager10InitializeEv+0x39c>
                             };
    5274:	4bb2      	ldr	r3, [pc, #712]	; (5540 <_ZN9ClearCore10UsbManager10InitializeEv+0x330>)
    5276:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
    5278:	e88d 000f 	stmia.w	sp, {r0, r1, r2, r3}
        serial_number_idx += writeNum(&(serial_number[serial_number_idx]),
    527c:	6803      	ldr	r3, [r0, #0]
        int d = (n >> sh) & 0xf;
    527e:	0f1d      	lsrs	r5, r3, #28
            buf[i++] = d > 9 ? 'A' + d - 10 : '0' + d;
    5280:	b2e8      	uxtb	r0, r5
        int d = (n >> sh) & 0xf;
    5282:	f3c3 6803 	ubfx	r8, r3, #24, #4
            buf[i++] = d > 9 ? 'A' + d - 10 : '0' + d;
    5286:	f100 0730 	add.w	r7, r0, #48	; 0x30
    528a:	3037      	adds	r0, #55	; 0x37
    528c:	2d09      	cmp	r5, #9
    528e:	bf88      	it	hi
    5290:	4607      	movhi	r7, r0
    5292:	fa5f f088 	uxtb.w	r0, r8
        int d = (n >> sh) & 0xf;
    5296:	f3c3 5603 	ubfx	r6, r3, #20, #4
            buf[i++] = d > 9 ? 'A' + d - 10 : '0' + d;
    529a:	f100 0c30 	add.w	ip, r0, #48	; 0x30
    529e:	3037      	adds	r0, #55	; 0x37
    52a0:	f1b8 0f09 	cmp.w	r8, #9
    52a4:	bfc8      	it	gt
    52a6:	4684      	movgt	ip, r0
    52a8:	b2f0      	uxtb	r0, r6
        int d = (n >> sh) & 0xf;
    52aa:	f3c3 4503 	ubfx	r5, r3, #16, #4
            buf[i++] = d > 9 ? 'A' + d - 10 : '0' + d;
    52ae:	f88d c011 	strb.w	ip, [sp, #17]
    52b2:	f100 0c30 	add.w	ip, r0, #48	; 0x30
    52b6:	3037      	adds	r0, #55	; 0x37
    52b8:	2e09      	cmp	r6, #9
    52ba:	bfc8      	it	gt
    52bc:	4684      	movgt	ip, r0
    52be:	b2e8      	uxtb	r0, r5
        int d = (n >> sh) & 0xf;
    52c0:	f3c3 3e03 	ubfx	lr, r3, #12, #4
            buf[i++] = d > 9 ? 'A' + d - 10 : '0' + d;
    52c4:	f88d c012 	strb.w	ip, [sp, #18]
    52c8:	f100 0c30 	add.w	ip, r0, #48	; 0x30
    52cc:	3037      	adds	r0, #55	; 0x37
    52ce:	2d09      	cmp	r5, #9
    52d0:	bfc8      	it	gt
    52d2:	4684      	movgt	ip, r0
    52d4:	fa5f f08e 	uxtb.w	r0, lr
    52d8:	f88d 7010 	strb.w	r7, [sp, #16]
    52dc:	f88d c013 	strb.w	ip, [sp, #19]
        int d = (n >> sh) & 0xf;
    52e0:	f3c3 2703 	ubfx	r7, r3, #8, #4
            buf[i++] = d > 9 ? 'A' + d - 10 : '0' + d;
    52e4:	f100 0c30 	add.w	ip, r0, #48	; 0x30
    52e8:	3037      	adds	r0, #55	; 0x37
    52ea:	f1be 0f09 	cmp.w	lr, #9
    52ee:	bfd4      	ite	le
    52f0:	46e6      	movle	lr, ip
    52f2:	4686      	movgt	lr, r0
    52f4:	b2f8      	uxtb	r0, r7
        int d = (n >> sh) & 0xf;
    52f6:	f3c3 1603 	ubfx	r6, r3, #4, #4
        serial_number_idx += writeNum(&(serial_number[serial_number_idx]),
    52fa:	460a      	mov	r2, r1
            buf[i++] = d > 9 ? 'A' + d - 10 : '0' + d;
    52fc:	f88d e014 	strb.w	lr, [sp, #20]
    5300:	f100 0e37 	add.w	lr, r0, #55	; 0x37
    5304:	3030      	adds	r0, #48	; 0x30
    5306:	2f09      	cmp	r7, #9
    5308:	bfcc      	ite	gt
    530a:	4677      	movgt	r7, lr
    530c:	4607      	movle	r7, r0
    530e:	b2f0      	uxtb	r0, r6
        serial_number_idx += writeNum(&(serial_number[serial_number_idx]),
    5310:	6812      	ldr	r2, [r2, #0]
            buf[i++] = d > 9 ? 'A' + d - 10 : '0' + d;
    5312:	f88d 7015 	strb.w	r7, [sp, #21]
        int d = (n >> sh) & 0xf;
    5316:	f003 030f 	and.w	r3, r3, #15
            buf[i++] = d > 9 ? 'A' + d - 10 : '0' + d;
    531a:	f100 0737 	add.w	r7, r0, #55	; 0x37
    531e:	3030      	adds	r0, #48	; 0x30
    5320:	2e09      	cmp	r6, #9
    5322:	bfcc      	ite	gt
    5324:	463e      	movgt	r6, r7
    5326:	4606      	movle	r6, r0
    5328:	b2d8      	uxtb	r0, r3
        int d = (n >> sh) & 0xf;
    532a:	0f15      	lsrs	r5, r2, #28
            buf[i++] = d > 9 ? 'A' + d - 10 : '0' + d;
    532c:	f88d 6016 	strb.w	r6, [sp, #22]
    5330:	f100 0637 	add.w	r6, r0, #55	; 0x37
    5334:	3030      	adds	r0, #48	; 0x30
    5336:	2b09      	cmp	r3, #9
    5338:	bfcc      	ite	gt
    533a:	4633      	movgt	r3, r6
    533c:	4603      	movle	r3, r0
    533e:	b2e8      	uxtb	r0, r5
        int d = (n >> sh) & 0xf;
    5340:	f3c2 6c03 	ubfx	ip, r2, #24, #4
            buf[i++] = d > 9 ? 'A' + d - 10 : '0' + d;
    5344:	f88d 3017 	strb.w	r3, [sp, #23]
    5348:	f100 0337 	add.w	r3, r0, #55	; 0x37
    534c:	3030      	adds	r0, #48	; 0x30
    534e:	2d09      	cmp	r5, #9
    5350:	bf88      	it	hi
    5352:	4618      	movhi	r0, r3
    5354:	fa5f f38c 	uxtb.w	r3, ip
        int d = (n >> sh) & 0xf;
    5358:	f3c2 5e03 	ubfx	lr, r2, #20, #4
            buf[i++] = d > 9 ? 'A' + d - 10 : '0' + d;
    535c:	f88d 0018 	strb.w	r0, [sp, #24]
    5360:	f103 0037 	add.w	r0, r3, #55	; 0x37
    5364:	3330      	adds	r3, #48	; 0x30
    5366:	f1bc 0f09 	cmp.w	ip, #9
    536a:	bfcc      	ite	gt
    536c:	4684      	movgt	ip, r0
    536e:	469c      	movle	ip, r3
    5370:	fa5f f38e 	uxtb.w	r3, lr
        int d = (n >> sh) & 0xf;
    5374:	f3c2 4703 	ubfx	r7, r2, #16, #4
            buf[i++] = d > 9 ? 'A' + d - 10 : '0' + d;
    5378:	f88d c019 	strb.w	ip, [sp, #25]
    537c:	f103 0c37 	add.w	ip, r3, #55	; 0x37
    5380:	3330      	adds	r3, #48	; 0x30
    5382:	f1be 0f09 	cmp.w	lr, #9
    5386:	bfd8      	it	le
    5388:	469c      	movle	ip, r3
    538a:	b2fb      	uxtb	r3, r7
        int d = (n >> sh) & 0xf;
    538c:	f3c2 3603 	ubfx	r6, r2, #12, #4
            buf[i++] = d > 9 ? 'A' + d - 10 : '0' + d;
    5390:	f88d c01a 	strb.w	ip, [sp, #26]
    5394:	f103 0c37 	add.w	ip, r3, #55	; 0x37
    5398:	3330      	adds	r3, #48	; 0x30
    539a:	2f09      	cmp	r7, #9
    539c:	bfd8      	it	le
    539e:	469c      	movle	ip, r3
    53a0:	b2f3      	uxtb	r3, r6
        int d = (n >> sh) & 0xf;
    53a2:	f3c2 2503 	ubfx	r5, r2, #8, #4
            buf[i++] = d > 9 ? 'A' + d - 10 : '0' + d;
    53a6:	f88d c01b 	strb.w	ip, [sp, #27]
    53aa:	f103 0c37 	add.w	ip, r3, #55	; 0x37
    53ae:	3330      	adds	r3, #48	; 0x30
    53b0:	2e09      	cmp	r6, #9
    53b2:	bfd8      	it	le
    53b4:	469c      	movle	ip, r3
    53b6:	b2eb      	uxtb	r3, r5
        int d = (n >> sh) & 0xf;
    53b8:	f3c2 1003 	ubfx	r0, r2, #4, #4
        serial_number_idx += writeNum(&(serial_number[serial_number_idx]),
    53bc:	9902      	ldr	r1, [sp, #8]
            buf[i++] = d > 9 ? 'A' + d - 10 : '0' + d;
    53be:	f88d c01c 	strb.w	ip, [sp, #28]
    53c2:	f103 0c37 	add.w	ip, r3, #55	; 0x37
    53c6:	3330      	adds	r3, #48	; 0x30
    53c8:	2d09      	cmp	r5, #9
    53ca:	bfcc      	ite	gt
    53cc:	4665      	movgt	r5, ip
    53ce:	461d      	movle	r5, r3
    53d0:	b2c3      	uxtb	r3, r0
        serial_number_idx += writeNum(&(serial_number[serial_number_idx]),
    53d2:	6809      	ldr	r1, [r1, #0]
            buf[i++] = d > 9 ? 'A' + d - 10 : '0' + d;
    53d4:	f88d 501d 	strb.w	r5, [sp, #29]
        int d = (n >> sh) & 0xf;
    53d8:	f002 020f 	and.w	r2, r2, #15
            buf[i++] = d > 9 ? 'A' + d - 10 : '0' + d;
    53dc:	f103 0537 	add.w	r5, r3, #55	; 0x37
    53e0:	3330      	adds	r3, #48	; 0x30
    53e2:	2809      	cmp	r0, #9
    53e4:	bfcc      	ite	gt
    53e6:	4628      	movgt	r0, r5
    53e8:	4618      	movle	r0, r3
    53ea:	b2d3      	uxtb	r3, r2
        int d = (n >> sh) & 0xf;
    53ec:	ea4f 7e11 	mov.w	lr, r1, lsr #28
            buf[i++] = d > 9 ? 'A' + d - 10 : '0' + d;
    53f0:	f88d 001e 	strb.w	r0, [sp, #30]
    53f4:	f103 0037 	add.w	r0, r3, #55	; 0x37
    53f8:	3330      	adds	r3, #48	; 0x30
        int d = (n >> sh) & 0xf;
    53fa:	f3c1 6703 	ubfx	r7, r1, #24, #4
            buf[i++] = d > 9 ? 'A' + d - 10 : '0' + d;
    53fe:	2a09      	cmp	r2, #9
    5400:	bfcc      	ite	gt
    5402:	4602      	movgt	r2, r0
    5404:	461a      	movle	r2, r3
    5406:	fa5f f58e 	uxtb.w	r5, lr
    540a:	b2f8      	uxtb	r0, r7
    540c:	f88d 201f 	strb.w	r2, [sp, #31]
    5410:	f105 0237 	add.w	r2, r5, #55	; 0x37
    5414:	3530      	adds	r5, #48	; 0x30
        int d = (n >> sh) & 0xf;
    5416:	f3c1 5603 	ubfx	r6, r1, #20, #4
            buf[i++] = d > 9 ? 'A' + d - 10 : '0' + d;
    541a:	f1be 0f09 	cmp.w	lr, #9
    541e:	bf88      	it	hi
    5420:	4615      	movhi	r5, r2
    5422:	f100 0237 	add.w	r2, r0, #55	; 0x37
    5426:	3030      	adds	r0, #48	; 0x30
    5428:	2f09      	cmp	r7, #9
    542a:	bfc8      	it	gt
    542c:	4610      	movgt	r0, r2
    542e:	b2f3      	uxtb	r3, r6
    5430:	f103 0237 	add.w	r2, r3, #55	; 0x37
    5434:	f88d 0021 	strb.w	r0, [sp, #33]	; 0x21
    5438:	3330      	adds	r3, #48	; 0x30
        int d = (n >> sh) & 0xf;
    543a:	f3c1 4003 	ubfx	r0, r1, #16, #4
            buf[i++] = d > 9 ? 'A' + d - 10 : '0' + d;
    543e:	2e09      	cmp	r6, #9
    5440:	bfc8      	it	gt
    5442:	4613      	movgt	r3, r2
    5444:	b2c2      	uxtb	r2, r0
        int d = (n >> sh) & 0xf;
    5446:	f3c1 3e03 	ubfx	lr, r1, #12, #4
            buf[i++] = d > 9 ? 'A' + d - 10 : '0' + d;
    544a:	f102 0837 	add.w	r8, r2, #55	; 0x37
    544e:	3230      	adds	r2, #48	; 0x30
    5450:	2809      	cmp	r0, #9
    5452:	bfd8      	it	le
    5454:	4690      	movle	r8, r2
    5456:	fa5f f28e 	uxtb.w	r2, lr
        int d = (n >> sh) & 0xf;
    545a:	f3c1 2703 	ubfx	r7, r1, #8, #4
            buf[i++] = d > 9 ? 'A' + d - 10 : '0' + d;
    545e:	f88d 3022 	strb.w	r3, [sp, #34]	; 0x22
    5462:	4620      	mov	r0, r4
        serial_number_idx += writeNum(&(serial_number[serial_number_idx]),
    5464:	9b03      	ldr	r3, [sp, #12]
            buf[i++] = d > 9 ? 'A' + d - 10 : '0' + d;
    5466:	f88d 5020 	strb.w	r5, [sp, #32]
    546a:	f102 0437 	add.w	r4, r2, #55	; 0x37
    546e:	3230      	adds	r2, #48	; 0x30
    5470:	f1be 0f09 	cmp.w	lr, #9
    5474:	bfd8      	it	le
    5476:	4614      	movle	r4, r2
    5478:	b2fa      	uxtb	r2, r7
        serial_number_idx += writeNum(&(serial_number[serial_number_idx]),
    547a:	681b      	ldr	r3, [r3, #0]
            buf[i++] = d > 9 ? 'A' + d - 10 : '0' + d;
    547c:	f88d 4024 	strb.w	r4, [sp, #36]	; 0x24
        int d = (n >> sh) & 0xf;
    5480:	f3c1 1603 	ubfx	r6, r1, #4, #4
            buf[i++] = d > 9 ? 'A' + d - 10 : '0' + d;
    5484:	f102 0437 	add.w	r4, r2, #55	; 0x37
    5488:	3230      	adds	r2, #48	; 0x30
    548a:	2f09      	cmp	r7, #9
    548c:	bfcc      	ite	gt
    548e:	4627      	movgt	r7, r4
    5490:	4617      	movle	r7, r2
    5492:	b2f2      	uxtb	r2, r6
        int d = (n >> sh) & 0xf;
    5494:	f001 010f 	and.w	r1, r1, #15
            buf[i++] = d > 9 ? 'A' + d - 10 : '0' + d;
    5498:	f88d 7025 	strb.w	r7, [sp, #37]	; 0x25
    549c:	f102 0737 	add.w	r7, r2, #55	; 0x37
    54a0:	3230      	adds	r2, #48	; 0x30
    54a2:	2e09      	cmp	r6, #9
    54a4:	bfcc      	ite	gt
    54a6:	463e      	movgt	r6, r7
    54a8:	4616      	movle	r6, r2
    54aa:	b2ca      	uxtb	r2, r1
        int d = (n >> sh) & 0xf;
    54ac:	0f1d      	lsrs	r5, r3, #28
            buf[i++] = d > 9 ? 'A' + d - 10 : '0' + d;
    54ae:	f88d 6026 	strb.w	r6, [sp, #38]	; 0x26
    54b2:	f102 0637 	add.w	r6, r2, #55	; 0x37
    54b6:	3230      	adds	r2, #48	; 0x30
    54b8:	2909      	cmp	r1, #9
    54ba:	bfcc      	ite	gt
    54bc:	4631      	movgt	r1, r6
    54be:	4611      	movle	r1, r2
    54c0:	b2ea      	uxtb	r2, r5
        int d = (n >> sh) & 0xf;
    54c2:	f3c3 6c03 	ubfx	ip, r3, #24, #4
            buf[i++] = d > 9 ? 'A' + d - 10 : '0' + d;
    54c6:	f88d 1027 	strb.w	r1, [sp, #39]	; 0x27
    54ca:	f102 0130 	add.w	r1, r2, #48	; 0x30
    54ce:	3237      	adds	r2, #55	; 0x37
    54d0:	2d09      	cmp	r5, #9
    54d2:	bf88      	it	hi
    54d4:	4611      	movhi	r1, r2
    54d6:	fa5f f28c 	uxtb.w	r2, ip
        int d = (n >> sh) & 0xf;
    54da:	f3c3 5e03 	ubfx	lr, r3, #20, #4
            buf[i++] = d > 9 ? 'A' + d - 10 : '0' + d;
    54de:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
    54e2:	f102 0130 	add.w	r1, r2, #48	; 0x30
    54e6:	3237      	adds	r2, #55	; 0x37
    54e8:	f1bc 0f09 	cmp.w	ip, #9
    54ec:	bfd4      	ite	le
    54ee:	468c      	movle	ip, r1
    54f0:	4694      	movgt	ip, r2
    54f2:	fa5f f28e 	uxtb.w	r2, lr
        int d = (n >> sh) & 0xf;
    54f6:	f3c3 4403 	ubfx	r4, r3, #16, #4
            buf[i++] = d > 9 ? 'A' + d - 10 : '0' + d;
    54fa:	f102 0137 	add.w	r1, r2, #55	; 0x37
    54fe:	3230      	adds	r2, #48	; 0x30
    5500:	f1be 0f09 	cmp.w	lr, #9
    5504:	bfcc      	ite	gt
    5506:	468e      	movgt	lr, r1
    5508:	4696      	movle	lr, r2
    550a:	b2e1      	uxtb	r1, r4
        int d = (n >> sh) & 0xf;
    550c:	f3c3 3703 	ubfx	r7, r3, #12, #4
            buf[i++] = d > 9 ? 'A' + d - 10 : '0' + d;
    5510:	f88d e02a 	strb.w	lr, [sp, #42]	; 0x2a
    5514:	f101 0e37 	add.w	lr, r1, #55	; 0x37
    5518:	3130      	adds	r1, #48	; 0x30
    551a:	2c09      	cmp	r4, #9
    551c:	bfd8      	it	le
    551e:	468e      	movle	lr, r1
    5520:	b2fa      	uxtb	r2, r7
        int d = (n >> sh) & 0xf;
    5522:	f3c3 2603 	ubfx	r6, r3, #8, #4
            buf[i++] = d > 9 ? 'A' + d - 10 : '0' + d;
    5526:	f88d e02b 	strb.w	lr, [sp, #43]	; 0x2b
    552a:	f102 0e30 	add.w	lr, r2, #48	; 0x30
    552e:	3237      	adds	r2, #55	; 0x37
    5530:	e008      	b.n	5544 <_ZN9ClearCore10UsbManager10InitializeEv+0x334>
    5532:	bf00      	nop
    5534:	40001c00 	.word	0x40001c00
    5538:	40000800 	.word	0x40000800
    553c:	200000e3 	.word	0x200000e3
    5540:	0002cc98 	.word	0x0002cc98
    5544:	2f09      	cmp	r7, #9
    5546:	bfd4      	ite	le
    5548:	4677      	movle	r7, lr
    554a:	4617      	movgt	r7, r2
        int d = (n >> sh) & 0xf;
    554c:	f3c3 1503 	ubfx	r5, r3, #4, #4
            buf[i++] = d > 9 ? 'A' + d - 10 : '0' + d;
    5550:	b2f4      	uxtb	r4, r6
        int d = (n >> sh) & 0xf;
    5552:	f003 030f 	and.w	r3, r3, #15
            buf[i++] = d > 9 ? 'A' + d - 10 : '0' + d;
    5556:	b2da      	uxtb	r2, r3
    5558:	b2e9      	uxtb	r1, r5
    555a:	f88d 702c 	strb.w	r7, [sp, #44]	; 0x2c
    555e:	f104 0730 	add.w	r7, r4, #48	; 0x30
    5562:	3437      	adds	r4, #55	; 0x37
    5564:	2e09      	cmp	r6, #9
    5566:	bfd8      	it	le
    5568:	463c      	movle	r4, r7
    556a:	f101 0e30 	add.w	lr, r1, #48	; 0x30
    556e:	f102 0730 	add.w	r7, r2, #48	; 0x30
    5572:	3137      	adds	r1, #55	; 0x37
    5574:	3237      	adds	r2, #55	; 0x37
    5576:	2d09      	cmp	r5, #9
    5578:	bfd8      	it	le
    557a:	4671      	movle	r1, lr
    557c:	2b09      	cmp	r3, #9
    557e:	bfd4      	ite	le
    5580:	463b      	movle	r3, r7
    5582:	4613      	movgt	r3, r2
    5584:	f88d 102e 	strb.w	r1, [sp, #46]	; 0x2e
    5588:	f88d 302f 	strb.w	r3, [sp, #47]	; 0x2f
    558c:	f88d 8023 	strb.w	r8, [sp, #35]	; 0x23
    5590:	f88d c029 	strb.w	ip, [sp, #41]	; 0x29
    5594:	f88d 402d 	strb.w	r4, [sp, #45]	; 0x2d
    5598:	f10d 030f 	add.w	r3, sp, #15
    559c:	f10d 012f 	add.w	r1, sp, #47	; 0x2f
        *serNumDescPtr++ = serial_number[i];
    55a0:	f813 2f01 	ldrb.w	r2, [r3, #1]!
    55a4:	f820 2f02 	strh.w	r2, [r0, #2]!
    for (int i = 0; i < SERIAL_NUMBER_LENGTH; i++) {
    55a8:	428b      	cmp	r3, r1
    55aa:	d1f9      	bne.n	55a0 <_ZN9ClearCore10UsbManager10InitializeEv+0x390>
	((Port *)hw)->Group[submodule_index].DIRTGL.reg = PORT_DIR_DIR(mask);
}

static inline void hri_port_set_DIR_reg(const void *const hw, uint8_t submodule_index, hri_port_dir_reg_t mask)
{
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
    55ac:	4b2a      	ldr	r3, [pc, #168]	; (5658 <_ZN9ClearCore10UsbManager10InitializeEv+0x448>)
  {
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
  else
  {
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    55ae:	4a2b      	ldr	r2, [pc, #172]	; (565c <_ZN9ClearCore10UsbManager10InitializeEv+0x44c>)

static inline void hri_port_write_WRCONFIG_reg(const void *const hw, uint8_t submodule_index,
                                               hri_port_wrconfig_reg_t data)
{
	PORT_CRITICAL_SECTION_ENTER();
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
    55b0:	4f2b      	ldr	r7, [pc, #172]	; (5660 <_ZN9ClearCore10UsbManager10InitializeEv+0x450>)
    55b2:	4d2c      	ldr	r5, [pc, #176]	; (5664 <_ZN9ClearCore10UsbManager10InitializeEv+0x454>)
    usbdc_init(ctrl_buffer);
    55b4:	482c      	ldr	r0, [pc, #176]	; (5668 <_ZN9ClearCore10UsbManager10InitializeEv+0x458>)
    55b6:	2180      	movs	r1, #128	; 0x80
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
    55b8:	f04f 7680 	mov.w	r6, #16777216	; 0x1000000
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
    55bc:	f04f 4480 	mov.w	r4, #1073741824	; 0x40000000
    55c0:	f882 1350 	strb.w	r1, [r2, #848]	; 0x350
    55c4:	f882 1351 	strb.w	r1, [r2, #849]	; 0x351
    55c8:	f882 1352 	strb.w	r1, [r2, #850]	; 0x352
    55cc:	f882 1353 	strb.w	r1, [r2, #851]	; 0x353
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
    55d0:	609e      	str	r6, [r3, #8]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
    55d2:	629c      	str	r4, [r3, #40]	; 0x28
    55d4:	629f      	str	r7, [r3, #40]	; 0x28
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
    55d6:	615e      	str	r6, [r3, #20]
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg &= ~PORT_PINCFG_PULLEN;
    55d8:	f893 2058 	ldrb.w	r2, [r3, #88]	; 0x58
    55dc:	f002 02fb 	and.w	r2, r2, #251	; 0xfb
    55e0:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
    55e4:	f893 2058 	ldrb.w	r2, [r3, #88]	; 0x58
	tmp &= ~PORT_PINCFG_PMUXEN;
    55e8:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
    55ec:	f042 0201 	orr.w	r2, r2, #1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
    55f0:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
    55f4:	f893 203c 	ldrb.w	r2, [r3, #60]	; 0x3c
	tmp &= ~PORT_PMUX_PMUXE_Msk;
    55f8:	f002 02f0 	and.w	r2, r2, #240	; 0xf0
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
    55fc:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
	tmp |= PORT_PMUX_PMUXE(data);
    5600:	f042 0207 	orr.w	r2, r2, #7
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
    5604:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
    5608:	6099      	str	r1, [r3, #8]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
    560a:	629c      	str	r4, [r3, #40]	; 0x28
    560c:	629d      	str	r5, [r3, #40]	; 0x28
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
    560e:	6159      	str	r1, [r3, #20]
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg &= ~PORT_PINCFG_PULLEN;
    5610:	f893 2059 	ldrb.w	r2, [r3, #89]	; 0x59
    5614:	f002 02fb 	and.w	r2, r2, #251	; 0xfb
    5618:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
    561c:	f893 2059 	ldrb.w	r2, [r3, #89]	; 0x59
	tmp &= ~PORT_PINCFG_PMUXEN;
    5620:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
    5624:	f042 0201 	orr.w	r2, r2, #1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
    5628:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
    562c:	f893 203c 	ldrb.w	r2, [r3, #60]	; 0x3c
	tmp &= ~PORT_PMUX_PMUXO_Msk;
    5630:	f002 020f 	and.w	r2, r2, #15
	tmp |= PORT_PMUX_PMUXO(data);
    5634:	f042 0270 	orr.w	r2, r2, #112	; 0x70
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
    5638:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    563c:	f006 f83e 	bl	b6bc <usbdc_init>
    cdcdf_acm_init();
    5640:	f005 fcf6 	bl	b030 <cdcdf_acm_init>
    usbdc_start(single_desc);
    5644:	4809      	ldr	r0, [pc, #36]	; (566c <_ZN9ClearCore10UsbManager10InitializeEv+0x45c>)
    5646:	f006 f867 	bl	b718 <usbdc_start>
    usbdc_attach();
    564a:	f006 f87d 	bl	b748 <usbdc_attach>
}
    564e:	2001      	movs	r0, #1
    5650:	b00c      	add	sp, #48	; 0x30
    5652:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    5656:	bf00      	nop
    5658:	41008000 	.word	0x41008000
    565c:	e000e100 	.word	0xe000e100
    5660:	c0000100 	.word	0xc0000100
    5664:	c0000200 	.word	0xc0000200
    5668:	20000b88 	.word	0x20000b88
    566c:	20000004 	.word	0x20000004

00005670 <_ZN9ClearCore10UsbManager5SpeedEm>:
}
    5670:	2001      	movs	r0, #1
    5672:	4770      	bx	lr

00005674 <_ZN9ClearCore10UsbManager5SpeedEv>:
uint32_t UsbManager::Speed() {
    5674:	b508      	push	{r3, lr}
    return cdcdf_acm_get_line_coding()->dwDTERate;
    5676:	f005 fd5b 	bl	b130 <cdcdf_acm_get_line_coding>
}
    567a:	6800      	ldr	r0, [r0, #0]
    567c:	bd08      	pop	{r3, pc}
    567e:	bf00      	nop

00005680 <_ZN9ClearCore10UsbManager8PortOpenEv>:
void UsbManager::PortOpen() {
    5680:	b538      	push	{r3, r4, r5, lr}
    if (m_portOpen) {
    5682:	f890 311c 	ldrb.w	r3, [r0, #284]	; 0x11c
    5686:	b103      	cbz	r3, 568a <_ZN9ClearCore10UsbManager8PortOpenEv+0xa>
    5688:	bd38      	pop	{r3, r4, r5, pc}
    568a:	4604      	mov	r4, r0
    m_portOpen = true;
    568c:	2501      	movs	r5, #1
    cdcdf_acm_register_callback(CDCDF_ACM_CB_READ, (FUNC_PTR)RxComplete);
    568e:	4618      	mov	r0, r3
    m_portOpen = true;
    5690:	f884 511c 	strb.w	r5, [r4, #284]	; 0x11c
    cdcdf_acm_register_callback(CDCDF_ACM_CB_READ, (FUNC_PTR)RxComplete);
    5694:	4906      	ldr	r1, [pc, #24]	; (56b0 <_ZN9ClearCore10UsbManager8PortOpenEv+0x30>)
    5696:	f005 fd1d 	bl	b0d4 <cdcdf_acm_register_callback>
    cdcdf_acm_register_callback(CDCDF_ACM_CB_WRITE, (FUNC_PTR)TxComplete);
    569a:	4628      	mov	r0, r5
    569c:	4905      	ldr	r1, [pc, #20]	; (56b4 <_ZN9ClearCore10UsbManager8PortOpenEv+0x34>)
    569e:	f005 fd19 	bl	b0d4 <cdcdf_acm_register_callback>
    cdcdf_acm_read(m_usbReadBuf, sizeof(m_usbReadBuf));
    56a2:	f104 0080 	add.w	r0, r4, #128	; 0x80
    56a6:	2140      	movs	r1, #64	; 0x40
}
    56a8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    cdcdf_acm_read(m_usbReadBuf, sizeof(m_usbReadBuf));
    56ac:	f005 bcde 	b.w	b06c <cdcdf_acm_read>
    56b0:	00004ba1 	.word	0x00004ba1
    56b4:	00004dd9 	.word	0x00004dd9

000056b8 <_ZN9ClearCore10UsbManager10FlushInputEv>:
void UsbManager::FlushInput() {
    56b8:	4603      	mov	r3, r0
    m_inHead = 0;
    56ba:	2200      	movs	r2, #0
    56bc:	f8c0 2100 	str.w	r2, [r0, #256]	; 0x100
    m_readBufAvail = 0;
    56c0:	f8c0 2118 	str.w	r2, [r0, #280]	; 0x118
    m_inTail = 0;
    56c4:	f8c0 2104 	str.w	r2, [r0, #260]	; 0x104
    cdcdf_acm_read(m_usbReadBuf, sizeof(m_usbReadBuf));
    56c8:	2140      	movs	r1, #64	; 0x40
    56ca:	3080      	adds	r0, #128	; 0x80
    m_readActive = false;
    56cc:	f883 2111 	strb.w	r2, [r3, #273]	; 0x111
    cdcdf_acm_read(m_usbReadBuf, sizeof(m_usbReadBuf));
    56d0:	f005 bccc 	b.w	b06c <cdcdf_acm_read>

000056d4 <_ZN9ClearCore10UsbManager18WaitForWriteFinishEv>:
void UsbManager::WaitForWriteFinish() {
    56d4:	b538      	push	{r3, r4, r5, lr}
    56d6:	4604      	mov	r4, r0
           USB->DEVICE.FSMSTATUS.bit.FSMSTATE == USB_FSMSTATUS_FSMSTATE_ON;
    56d8:	f04f 4582 	mov.w	r5, #1090519040	; 0x41000000
    while (m_outHead != m_outTail && Connected()) {
    56dc:	f8d4 2108 	ldr.w	r2, [r4, #264]	; 0x108
    56e0:	f8d4 310c 	ldr.w	r3, [r4, #268]	; 0x10c
    56e4:	429a      	cmp	r2, r3
    56e6:	d100      	bne.n	56ea <_ZN9ClearCore10UsbManager18WaitForWriteFinishEv+0x16>
    56e8:	bd38      	pop	{r3, r4, r5, pc}
    return cdcdf_acm_is_enabled() && LineState().rs232.DTR &&
    56ea:	f005 fd1b 	bl	b124 <cdcdf_acm_is_enabled>
    56ee:	2800      	cmp	r0, #0
    56f0:	d0fa      	beq.n	56e8 <_ZN9ClearCore10UsbManager18WaitForWriteFinishEv+0x14>
    56f2:	f894 3112 	ldrb.w	r3, [r4, #274]	; 0x112
    56f6:	07db      	lsls	r3, r3, #31
    56f8:	d5f6      	bpl.n	56e8 <_ZN9ClearCore10UsbManager18WaitForWriteFinishEv+0x14>
           USB->DEVICE.FSMSTATUS.bit.FSMSTATE == USB_FSMSTATUS_FSMSTATE_ON;
    56fa:	7b6b      	ldrb	r3, [r5, #13]
    56fc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
    return cdcdf_acm_is_enabled() && LineState().rs232.DTR &&
    5700:	2b02      	cmp	r3, #2
    5702:	d0eb      	beq.n	56dc <_ZN9ClearCore10UsbManager18WaitForWriteFinishEv+0x8>
    5704:	bd38      	pop	{r3, r4, r5, pc}
    5706:	bf00      	nop

00005708 <_ZN9ClearCore10UsbManagercvbEv>:
UsbManager::operator bool() {
    5708:	b538      	push	{r3, r4, r5, lr}
    570a:	4605      	mov	r5, r0
    return cdcdf_acm_is_enabled() && LineState().rs232.DTR &&
    570c:	f005 fd0a 	bl	b124 <cdcdf_acm_is_enabled>
    5710:	4604      	mov	r4, r0
    5712:	b170      	cbz	r0, 5732 <_ZN9ClearCore10UsbManagercvbEv+0x2a>
    5714:	f895 4112 	ldrb.w	r4, [r5, #274]	; 0x112
    5718:	f014 0401 	ands.w	r4, r4, #1
    571c:	d009      	beq.n	5732 <_ZN9ClearCore10UsbManagercvbEv+0x2a>
           USB->DEVICE.FSMSTATUS.bit.FSMSTATE == USB_FSMSTATUS_FSMSTATE_ON;
    571e:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
    5722:	7b5c      	ldrb	r4, [r3, #13]
    5724:	f004 047f 	and.w	r4, r4, #127	; 0x7f
    return cdcdf_acm_is_enabled() && LineState().rs232.DTR &&
    5728:	f1a4 0402 	sub.w	r4, r4, #2
    572c:	fab4 f484 	clz	r4, r4
    5730:	0964      	lsrs	r4, r4, #5
    \brief Blocks operations for ms milliseconds

    \param[in] ms Time in milliseconds to delay
**/
inline void Delay_ms(uint32_t ms)  {
    return Delay_cycles(static_cast<uint64_t>(ms) * CYCLES_PER_MILLISECOND);
    5732:	4803      	ldr	r0, [pc, #12]	; (5740 <_ZN9ClearCore10UsbManagercvbEv+0x38>)
    5734:	2100      	movs	r1, #0
    5736:	f002 ffeb 	bl	8710 <Delay_cycles>
}
    573a:	4620      	mov	r0, r4
    573c:	bd38      	pop	{r3, r4, r5, pc}
    573e:	bf00      	nop
    5740:	00124f80 	.word	0x00124f80

00005744 <_ZN9ClearCore10UsbManager7CharGetEv>:
    uint32_t head = m_inHead;
    5744:	f8d0 3100 	ldr.w	r3, [r0, #256]	; 0x100
    if (m_inTail == head) {
    5748:	f8d0 2104 	ldr.w	r2, [r0, #260]	; 0x104
    574c:	4293      	cmp	r3, r2
    574e:	f000 8116 	beq.w	597e <_ZN9ClearCore10UsbManager7CharGetEv+0x23a>
int16_t UsbManager::CharGet() {
    5752:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    m_inHead = (head + 1) & (sizeof(m_bufferIn) - 1);
    5756:	1c5a      	adds	r2, r3, #1
    5758:	f002 023f 	and.w	r2, r2, #63	; 0x3f
    uint8_t retVal = m_bufferIn[head];
    575c:	5cc4      	ldrb	r4, [r0, r3]
    m_inHead = (head + 1) & (sizeof(m_bufferIn) - 1);
    575e:	f8c0 2100 	str.w	r2, [r0, #256]	; 0x100
int16_t UsbManager::CharGet() {
    5762:	b083      	sub	sp, #12
  __ASM volatile ("cpsid i" : : : "memory");
    5764:	b672      	cpsid	i
    int32_t difference = m_inTail - m_inHead;
    5766:	f8d0 3104 	ldr.w	r3, [r0, #260]	; 0x104
    576a:	f8d0 2100 	ldr.w	r2, [r0, #256]	; 0x100
    if (m_readBufAvail && space) {
    576e:	f8d0 5118 	ldr.w	r5, [r0, #280]	; 0x118
    if (difference < 0) {
    5772:	1a9b      	subs	r3, r3, r2
        return sizeof(m_bufferIn) + difference;
    5774:	bf48      	it	mi
    5776:	3340      	addmi	r3, #64	; 0x40
    if (m_readBufAvail && space) {
    5778:	2d00      	cmp	r5, #0
    577a:	f000 80e3 	beq.w	5944 <_ZN9ClearCore10UsbManager7CharGetEv+0x200>
    577e:	f1d3 033f 	rsbs	r3, r3, #63	; 0x3f
    5782:	f000 80df 	beq.w	5944 <_ZN9ClearCore10UsbManager7CharGetEv+0x200>
        uint32_t tail = m_inTail;
    5786:	f8d0 6104 	ldr.w	r6, [r0, #260]	; 0x104
        uint8_t *inPtr = m_readBufPtr;
    578a:	f8d0 2114 	ldr.w	r2, [r0, #276]	; 0x114
    578e:	42ab      	cmp	r3, r5
    5790:	bf28      	it	cs
    5792:	462b      	movcs	r3, r5
        uint32_t countTilWrap = sizeof(m_bufferIn) - tail;
    5794:	f1c6 0140 	rsb	r1, r6, #64	; 0x40
    5798:	4299      	cmp	r1, r3
    579a:	bf28      	it	cs
    579c:	4619      	movcs	r1, r3
        uint8_t *outPtr = &m_bufferIn[tail];
    579e:	1987      	adds	r7, r0, r6
        for (uint32_t i = 0; i < countTilWrap; i++) {
    57a0:	2900      	cmp	r1, #0
    57a2:	f000 80f8 	beq.w	5996 <_ZN9ClearCore10UsbManager7CharGetEv+0x252>
    57a6:	1d35      	adds	r5, r6, #4
    57a8:	4405      	add	r5, r0
    57aa:	f102 0e04 	add.w	lr, r2, #4
    57ae:	4577      	cmp	r7, lr
    57b0:	bf38      	it	cc
    57b2:	42aa      	cmpcc	r2, r5
    57b4:	f0c0 80da 	bcc.w	596c <_ZN9ClearCore10UsbManager7CharGetEv+0x228>
    57b8:	290b      	cmp	r1, #11
    57ba:	f240 80d7 	bls.w	596c <_ZN9ClearCore10UsbManager7CharGetEv+0x228>
    57be:	4255      	negs	r5, r2
    57c0:	f015 0503 	ands.w	r5, r5, #3
    57c4:	f000 80c3 	beq.w	594e <_ZN9ClearCore10UsbManager7CharGetEv+0x20a>
            *outPtr++ = *inPtr++;
    57c8:	f892 e000 	ldrb.w	lr, [r2]
    57cc:	f800 e006 	strb.w	lr, [r0, r6]
    57d0:	2d01      	cmp	r5, #1
    57d2:	f107 0801 	add.w	r8, r7, #1
    57d6:	f102 0901 	add.w	r9, r2, #1
    57da:	f000 80ba 	beq.w	5952 <_ZN9ClearCore10UsbManager7CharGetEv+0x20e>
    57de:	f892 e001 	ldrb.w	lr, [r2, #1]
    57e2:	f887 e001 	strb.w	lr, [r7, #1]
    57e6:	2d02      	cmp	r5, #2
    57e8:	f107 0802 	add.w	r8, r7, #2
    57ec:	f102 0902 	add.w	r9, r2, #2
    57f0:	f000 80af 	beq.w	5952 <_ZN9ClearCore10UsbManager7CharGetEv+0x20e>
    57f4:	f892 e002 	ldrb.w	lr, [r2, #2]
    57f8:	f887 e002 	strb.w	lr, [r7, #2]
    57fc:	f107 0803 	add.w	r8, r7, #3
        for (uint32_t i = 0; i < countTilWrap; i++) {
    5800:	2703      	movs	r7, #3
            *outPtr++ = *inPtr++;
    5802:	f102 0903 	add.w	r9, r2, #3
        for (uint32_t i = 0; i < countTilWrap; i++) {
    5806:	9700      	str	r7, [sp, #0]
    5808:	eba1 0b05 	sub.w	fp, r1, r5
    580c:	f1ab 0704 	sub.w	r7, fp, #4
    5810:	08bf      	lsrs	r7, r7, #2
    5812:	eb06 0e05 	add.w	lr, r6, r5
    5816:	3701      	adds	r7, #1
    5818:	ea4f 0a87 	mov.w	sl, r7, lsl #2
    581c:	4486      	add	lr, r0
    581e:	4415      	add	r5, r2
    5820:	f04f 0c00 	mov.w	ip, #0
    5824:	9401      	str	r4, [sp, #4]
    5826:	f10c 0c01 	add.w	ip, ip, #1
            *outPtr++ = *inPtr++;
    582a:	f855 4b04 	ldr.w	r4, [r5], #4
    582e:	f84e 4b04 	str.w	r4, [lr], #4
    5832:	4567      	cmp	r7, ip
    5834:	d8f7      	bhi.n	5826 <_ZN9ClearCore10UsbManager7CharGetEv+0xe2>
    5836:	9d00      	ldr	r5, [sp, #0]
    5838:	9c01      	ldr	r4, [sp, #4]
    583a:	45d3      	cmp	fp, sl
    583c:	4455      	add	r5, sl
    583e:	eb08 0e0a 	add.w	lr, r8, sl
    5842:	eb09 0c0a 	add.w	ip, r9, sl
    5846:	f000 808c 	beq.w	5962 <_ZN9ClearCore10UsbManager7CharGetEv+0x21e>
    584a:	f819 9027 	ldrb.w	r9, [r9, r7, lsl #2]
    584e:	f808 9027 	strb.w	r9, [r8, r7, lsl #2]
        for (uint32_t i = 0; i < countTilWrap; i++) {
    5852:	1c6f      	adds	r7, r5, #1
    5854:	42b9      	cmp	r1, r7
    5856:	f240 8084 	bls.w	5962 <_ZN9ClearCore10UsbManager7CharGetEv+0x21e>
    585a:	3502      	adds	r5, #2
            *outPtr++ = *inPtr++;
    585c:	f89c 7001 	ldrb.w	r7, [ip, #1]
    5860:	f88e 7001 	strb.w	r7, [lr, #1]
        for (uint32_t i = 0; i < countTilWrap; i++) {
    5864:	42a9      	cmp	r1, r5
    5866:	d97c      	bls.n	5962 <_ZN9ClearCore10UsbManager7CharGetEv+0x21e>
            *outPtr++ = *inPtr++;
    5868:	f89c 5002 	ldrb.w	r5, [ip, #2]
    586c:	f88e 5002 	strb.w	r5, [lr, #2]
    5870:	1857      	adds	r7, r2, r1
    5872:	f8d0 2114 	ldr.w	r2, [r0, #276]	; 0x114
    5876:	f8d0 5118 	ldr.w	r5, [r0, #280]	; 0x118
        m_readBufPtr += countTilWrap;
    587a:	440a      	add	r2, r1
        m_readBufAvail -= countTilWrap;
    587c:	1a6d      	subs	r5, r5, r1
        if (count) {
    587e:	1a5b      	subs	r3, r3, r1
        m_readBufPtr += countTilWrap;
    5880:	f8c0 2114 	str.w	r2, [r0, #276]	; 0x114
        m_readBufAvail -= countTilWrap;
    5884:	f8c0 5118 	str.w	r5, [r0, #280]	; 0x118
        if (count) {
    5888:	d065      	beq.n	5956 <_ZN9ClearCore10UsbManager7CharGetEv+0x212>
    588a:	1d01      	adds	r1, r0, #4
    588c:	1d3a      	adds	r2, r7, #4
    588e:	4290      	cmp	r0, r2
    5890:	bf38      	it	cc
    5892:	428f      	cmpcc	r7, r1
            outPtr = m_bufferIn;
    5894:	4605      	mov	r5, r0
    5896:	d375      	bcc.n	5984 <_ZN9ClearCore10UsbManager7CharGetEv+0x240>
    5898:	2b0b      	cmp	r3, #11
    589a:	d973      	bls.n	5984 <_ZN9ClearCore10UsbManager7CharGetEv+0x240>
    589c:	4242      	negs	r2, r0
    589e:	f012 0203 	ands.w	r2, r2, #3
    58a2:	d060      	beq.n	5966 <_ZN9ClearCore10UsbManager7CharGetEv+0x222>
                *outPtr++ = *inPtr++;
    58a4:	7839      	ldrb	r1, [r7, #0]
    58a6:	7001      	strb	r1, [r0, #0]
    58a8:	2a01      	cmp	r2, #1
    58aa:	f100 0501 	add.w	r5, r0, #1
    58ae:	f107 0e01 	add.w	lr, r7, #1
    58b2:	d059      	beq.n	5968 <_ZN9ClearCore10UsbManager7CharGetEv+0x224>
    58b4:	7879      	ldrb	r1, [r7, #1]
    58b6:	7041      	strb	r1, [r0, #1]
    58b8:	2a02      	cmp	r2, #2
    58ba:	f100 0502 	add.w	r5, r0, #2
    58be:	f107 0e02 	add.w	lr, r7, #2
    58c2:	d051      	beq.n	5968 <_ZN9ClearCore10UsbManager7CharGetEv+0x224>
    58c4:	78b9      	ldrb	r1, [r7, #2]
    58c6:	7081      	strb	r1, [r0, #2]
    58c8:	1cc5      	adds	r5, r0, #3
    58ca:	f107 0e03 	add.w	lr, r7, #3
            for (uint32_t i = 0; i < count; i++) {
    58ce:	f04f 0803 	mov.w	r8, #3
    58d2:	eba3 0c02 	sub.w	ip, r3, r2
    58d6:	f1ac 0104 	sub.w	r1, ip, #4
    58da:	0889      	lsrs	r1, r1, #2
    58dc:	1c4e      	adds	r6, r1, #1
    58de:	4417      	add	r7, r2
    58e0:	ea4f 0986 	mov.w	r9, r6, lsl #2
    58e4:	4402      	add	r2, r0
    58e6:	2100      	movs	r1, #0
    58e8:	3101      	adds	r1, #1
                *outPtr++ = *inPtr++;
    58ea:	f857 ab04 	ldr.w	sl, [r7], #4
    58ee:	f842 ab04 	str.w	sl, [r2], #4
    58f2:	428e      	cmp	r6, r1
    58f4:	d8f8      	bhi.n	58e8 <_ZN9ClearCore10UsbManager7CharGetEv+0x1a4>
    58f6:	45cc      	cmp	ip, r9
    58f8:	eb08 0209 	add.w	r2, r8, r9
    58fc:	eb05 0109 	add.w	r1, r5, r9
    5900:	eb0e 0709 	add.w	r7, lr, r9
    5904:	d00d      	beq.n	5922 <_ZN9ClearCore10UsbManager7CharGetEv+0x1de>
    5906:	f81e e026 	ldrb.w	lr, [lr, r6, lsl #2]
    590a:	f805 e026 	strb.w	lr, [r5, r6, lsl #2]
            for (uint32_t i = 0; i < count; i++) {
    590e:	1c55      	adds	r5, r2, #1
    5910:	42ab      	cmp	r3, r5
    5912:	d906      	bls.n	5922 <_ZN9ClearCore10UsbManager7CharGetEv+0x1de>
    5914:	3202      	adds	r2, #2
                *outPtr++ = *inPtr++;
    5916:	787d      	ldrb	r5, [r7, #1]
    5918:	704d      	strb	r5, [r1, #1]
            for (uint32_t i = 0; i < count; i++) {
    591a:	4293      	cmp	r3, r2
    591c:	d901      	bls.n	5922 <_ZN9ClearCore10UsbManager7CharGetEv+0x1de>
                *outPtr++ = *inPtr++;
    591e:	78ba      	ldrb	r2, [r7, #2]
    5920:	708a      	strb	r2, [r1, #2]
            m_readBufPtr += count;
    5922:	f8d0 2114 	ldr.w	r2, [r0, #276]	; 0x114
            m_readBufAvail -= count;
    5926:	f8d0 5118 	ldr.w	r5, [r0, #280]	; 0x118
            m_inTail = count;
    592a:	f8c0 3104 	str.w	r3, [r0, #260]	; 0x104
            m_readBufPtr += count;
    592e:	441a      	add	r2, r3
            m_readBufAvail -= count;
    5930:	1aed      	subs	r5, r5, r3
            m_readBufPtr += count;
    5932:	f8c0 2114 	str.w	r2, [r0, #276]	; 0x114
            m_readBufAvail -= count;
    5936:	f8c0 5118 	str.w	r5, [r0, #280]	; 0x118
        if (!m_readBufAvail) {
    593a:	b91d      	cbnz	r5, 5944 <_ZN9ClearCore10UsbManager7CharGetEv+0x200>
            cdcdf_acm_read(m_usbReadBuf, sizeof(m_usbReadBuf));
    593c:	3080      	adds	r0, #128	; 0x80
    593e:	2140      	movs	r1, #64	; 0x40
    5940:	f005 fb94 	bl	b06c <cdcdf_acm_read>
  __ASM volatile ("cpsie i" : : : "memory");
    5944:	b662      	cpsie	i
    return retVal;
    5946:	b220      	sxth	r0, r4
}
    5948:	b003      	add	sp, #12
    594a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        uint8_t *outPtr = &m_bufferIn[tail];
    594e:	46b8      	mov	r8, r7
        uint8_t *inPtr = m_readBufPtr;
    5950:	4691      	mov	r9, r2
        for (uint32_t i = 0; i < countTilWrap; i++) {
    5952:	9500      	str	r5, [sp, #0]
    5954:	e758      	b.n	5808 <_ZN9ClearCore10UsbManager7CharGetEv+0xc4>
            m_inTail = (tail + countTilWrap) & (sizeof(m_bufferIn) - 1);
    5956:	4431      	add	r1, r6
    5958:	f001 013f 	and.w	r1, r1, #63	; 0x3f
    595c:	f8c0 1104 	str.w	r1, [r0, #260]	; 0x104
    5960:	e7eb      	b.n	593a <_ZN9ClearCore10UsbManager7CharGetEv+0x1f6>
    5962:	1857      	adds	r7, r2, r1
    5964:	e785      	b.n	5872 <_ZN9ClearCore10UsbManager7CharGetEv+0x12e>
            outPtr = m_bufferIn;
    5966:	46be      	mov	lr, r7
            for (uint32_t i = 0; i < count; i++) {
    5968:	4690      	mov	r8, r2
    596a:	e7b2      	b.n	58d2 <_ZN9ClearCore10UsbManager7CharGetEv+0x18e>
    596c:	1e7d      	subs	r5, r7, #1
    596e:	1857      	adds	r7, r2, r1
            *outPtr++ = *inPtr++;
    5970:	f812 eb01 	ldrb.w	lr, [r2], #1
    5974:	f805 ef01 	strb.w	lr, [r5, #1]!
        for (uint32_t i = 0; i < countTilWrap; i++) {
    5978:	42ba      	cmp	r2, r7
    597a:	d1f9      	bne.n	5970 <_ZN9ClearCore10UsbManager7CharGetEv+0x22c>
    597c:	e779      	b.n	5872 <_ZN9ClearCore10UsbManager7CharGetEv+0x12e>
        return -1;
    597e:	f04f 30ff 	mov.w	r0, #4294967295
    5982:	4770      	bx	lr
    5984:	1e42      	subs	r2, r0, #1
    5986:	18fd      	adds	r5, r7, r3
                *outPtr++ = *inPtr++;
    5988:	f817 1b01 	ldrb.w	r1, [r7], #1
    598c:	f802 1f01 	strb.w	r1, [r2, #1]!
            for (uint32_t i = 0; i < count; i++) {
    5990:	42bd      	cmp	r5, r7
    5992:	d1f9      	bne.n	5988 <_ZN9ClearCore10UsbManager7CharGetEv+0x244>
    5994:	e7c5      	b.n	5922 <_ZN9ClearCore10UsbManager7CharGetEv+0x1de>
        uint8_t *inPtr = m_readBufPtr;
    5996:	4617      	mov	r7, r2
    5998:	e76f      	b.n	587a <_ZN9ClearCore10UsbManager7CharGetEv+0x136>
    599a:	bf00      	nop

0000599c <_ZN9ClearCore10UsbManager8CharPeekEv>:
    if (m_inTail == m_inHead) {
    599c:	f8d0 2104 	ldr.w	r2, [r0, #260]	; 0x104
    59a0:	f8d0 3100 	ldr.w	r3, [r0, #256]	; 0x100
    59a4:	429a      	cmp	r2, r3
    return m_bufferIn[m_inHead];
    59a6:	bf1a      	itte	ne
    59a8:	f8d0 3100 	ldrne.w	r3, [r0, #256]	; 0x100
    59ac:	5cc0      	ldrbne	r0, [r0, r3]
        return -1;
    59ae:	f04f 30ff 	moveq.w	r0, #4294967295
}
    59b2:	4770      	bx	lr

000059b4 <_ZN9ClearCore10UsbManager8SendCharEh>:
bool UsbManager::SendChar(uint8_t charToSend) {
    59b4:	b570      	push	{r4, r5, r6, lr}
    59b6:	4604      	mov	r4, r0
    59b8:	460e      	mov	r6, r1
           USB->DEVICE.FSMSTATUS.bit.FSMSTATE == USB_FSMSTATUS_FSMSTATE_ON;
    59ba:	f04f 4582 	mov.w	r5, #1090519040	; 0x41000000
    return cdcdf_acm_is_enabled() && LineState().rs232.DTR &&
    59be:	f005 fbb1 	bl	b124 <cdcdf_acm_is_enabled>
    59c2:	b350      	cbz	r0, 5a1a <_ZN9ClearCore10UsbManager8SendCharEh+0x66>
    59c4:	f894 0112 	ldrb.w	r0, [r4, #274]	; 0x112
    59c8:	f010 0001 	ands.w	r0, r0, #1
    59cc:	d025      	beq.n	5a1a <_ZN9ClearCore10UsbManager8SendCharEh+0x66>
           USB->DEVICE.FSMSTATUS.bit.FSMSTATE == USB_FSMSTATUS_FSMSTATE_ON;
    59ce:	7b6b      	ldrb	r3, [r5, #13]
    59d0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
    return cdcdf_acm_is_enabled() && LineState().rs232.DTR &&
    59d4:	2b02      	cmp	r3, #2
    59d6:	d001      	beq.n	59dc <_ZN9ClearCore10UsbManager8SendCharEh+0x28>
    return false;
    59d8:	2000      	movs	r0, #0
    59da:	bd70      	pop	{r4, r5, r6, pc}
    while (Connected() && m_portOpen) {
    59dc:	f894 011c 	ldrb.w	r0, [r4, #284]	; 0x11c
    59e0:	b900      	cbnz	r0, 59e4 <_ZN9ClearCore10UsbManager8SendCharEh+0x30>
    59e2:	bd70      	pop	{r4, r5, r6, pc}
    int32_t difference = m_outHead - m_outTail - 1;
    59e4:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
    59e8:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
    59ec:	1a9b      	subs	r3, r3, r2
    if (difference < 0) {
    59ee:	1e5a      	subs	r2, r3, #1
    59f0:	d40e      	bmi.n	5a10 <_ZN9ClearCore10UsbManager8SendCharEh+0x5c>
        if (AvailableForWrite()) {
    59f2:	2a00      	cmp	r2, #0
    59f4:	d0e3      	beq.n	59be <_ZN9ClearCore10UsbManager8SendCharEh+0xa>
            m_bufferOut[m_outTail] = charToSend;
    59f6:	f8d4 310c 	ldr.w	r3, [r4, #268]	; 0x10c
    59fa:	4423      	add	r3, r4
    59fc:	f883 6040 	strb.w	r6, [r3, #64]	; 0x40
            m_outTail = (m_outTail + 1) & (sizeof(m_bufferOut) - 1);
    5a00:	f8d4 310c 	ldr.w	r3, [r4, #268]	; 0x10c
    5a04:	3301      	adds	r3, #1
    5a06:	f003 033f 	and.w	r3, r3, #63	; 0x3f
    5a0a:	f8c4 310c 	str.w	r3, [r4, #268]	; 0x10c
            return true;
    5a0e:	bd70      	pop	{r4, r5, r6, pc}
        difference += sizeof(m_bufferOut);
    5a10:	f103 023f 	add.w	r2, r3, #63	; 0x3f
        if (AvailableForWrite()) {
    5a14:	2a00      	cmp	r2, #0
    5a16:	d0d2      	beq.n	59be <_ZN9ClearCore10UsbManager8SendCharEh+0xa>
    5a18:	e7ed      	b.n	59f6 <_ZN9ClearCore10UsbManager8SendCharEh+0x42>
}
    5a1a:	bd70      	pop	{r4, r5, r6, pc}

00005a1c <_ZN9ClearCore10UsbManager16AvailableForReadEv>:
    int32_t difference = m_inTail - m_inHead;
    5a1c:	f8d0 3104 	ldr.w	r3, [r0, #260]	; 0x104
    5a20:	f8d0 0100 	ldr.w	r0, [r0, #256]	; 0x100
    if (difference < 0) {
    5a24:	1a18      	subs	r0, r3, r0
        return sizeof(m_bufferIn) + difference;
    5a26:	bf48      	it	mi
    5a28:	3040      	addmi	r0, #64	; 0x40
}
    5a2a:	4770      	bx	lr

00005a2c <_ZN9ClearCore10UsbManager17AvailableForWriteEv>:
    int32_t difference = m_outHead - m_outTail - 1;
    5a2c:	f8d0 3108 	ldr.w	r3, [r0, #264]	; 0x108
    5a30:	f8d0 210c 	ldr.w	r2, [r0, #268]	; 0x10c
    5a34:	1a9b      	subs	r3, r3, r2
    if (difference < 0) {
    5a36:	1e58      	subs	r0, r3, #1
        difference += sizeof(m_bufferOut);
    5a38:	bf48      	it	mi
    5a3a:	f103 003f 	addmi.w	r0, r3, #63	; 0x3f
}
    5a3e:	4770      	bx	lr

00005a40 <_ZN9ClearCore10UsbManager6TxPumpEv>:
void UsbManager::TxPump() {
    5a40:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    if (atomic_test_and_set_acqrel(&m_sendActive)) {
    5a44:	f500 7388 	add.w	r3, r0, #272	; 0x110
void UsbManager::TxPump() {
    5a48:	b083      	sub	sp, #12
    if (atomic_test_and_set_acqrel(&m_sendActive)) {
    5a4a:	f04f 0101 	mov.w	r1, #1
    5a4e:	f3bf 8f5b 	dmb	ish
    5a52:	e8d3 2f4f 	ldrexb	r2, [r3]
    5a56:	e8c3 1f44 	strexb	r4, r1, [r3]
    5a5a:	2c00      	cmp	r4, #0
    5a5c:	d1f9      	bne.n	5a52 <_ZN9ClearCore10UsbManager6TxPumpEv+0x12>
    5a5e:	f3bf 8f5b 	dmb	ish
    5a62:	f012 0fff 	tst.w	r2, #255	; 0xff
    5a66:	f040 80e4 	bne.w	5c32 <_ZN9ClearCore10UsbManager6TxPumpEv+0x1f2>
    uint32_t head = m_outHead;
    5a6a:	f8d0 6108 	ldr.w	r6, [r0, #264]	; 0x108
    uint32_t tail = m_outTail;
    5a6e:	f8d0 110c 	ldr.w	r1, [r0, #268]	; 0x10c
    if (head == tail) {
    5a72:	428e      	cmp	r6, r1
    5a74:	f000 81b6 	beq.w	5de4 <_ZN9ClearCore10UsbManager6TxPumpEv+0x3a4>
    uint8_t *inPtr = m_bufferOut + head, *outPtr = m_usbWriteBuf;
    5a78:	f100 0340 	add.w	r3, r0, #64	; 0x40
    5a7c:	eb03 0706 	add.w	r7, r3, r6
    5a80:	f100 05c0 	add.w	r5, r0, #192	; 0xc0
    if (head < tail) {
    5a84:	f0c0 80d8 	bcc.w	5c38 <_ZN9ClearCore10UsbManager6TxPumpEv+0x1f8>
        uint32_t countTilWrap = sizeof(m_bufferOut) - head;
    5a88:	f1c6 0240 	rsb	r2, r6, #64	; 0x40
        count = min(count, countTilWrap + tail);
    5a8c:	4411      	add	r1, r2
    5a8e:	2940      	cmp	r1, #64	; 0x40
    5a90:	bf28      	it	cs
    5a92:	2140      	movcs	r1, #64	; 0x40
    5a94:	428a      	cmp	r2, r1
    5a96:	bf28      	it	cs
    5a98:	460a      	movcs	r2, r1
        for (uint32_t iChar = 0; iChar < loopEnd; iChar++) {
    5a9a:	2a00      	cmp	r2, #0
    5a9c:	f000 81c7 	beq.w	5e2e <_ZN9ClearCore10UsbManager6TxPumpEv+0x3ee>
    5aa0:	f106 0e40 	add.w	lr, r6, #64	; 0x40
    5aa4:	f106 0444 	add.w	r4, r6, #68	; 0x44
    5aa8:	eb00 080e 	add.w	r8, r0, lr
    5aac:	4404      	add	r4, r0
    5aae:	f100 0cc4 	add.w	ip, r0, #196	; 0xc4
    5ab2:	45e0      	cmp	r8, ip
    5ab4:	bf38      	it	cc
    5ab6:	42a5      	cmpcc	r5, r4
    5ab8:	f0c0 81ae 	bcc.w	5e18 <_ZN9ClearCore10UsbManager6TxPumpEv+0x3d8>
    5abc:	2a0b      	cmp	r2, #11
    5abe:	f240 81ab 	bls.w	5e18 <_ZN9ClearCore10UsbManager6TxPumpEv+0x3d8>
    5ac2:	426c      	negs	r4, r5
    5ac4:	f014 0403 	ands.w	r4, r4, #3
    5ac8:	f000 817f 	beq.w	5dca <_ZN9ClearCore10UsbManager6TxPumpEv+0x38a>
            *outPtr++ = *inPtr++;
    5acc:	5d9e      	ldrb	r6, [r3, r6]
    5ace:	f880 60c0 	strb.w	r6, [r0, #192]	; 0xc0
    5ad2:	2c01      	cmp	r4, #1
    5ad4:	f100 0cc1 	add.w	ip, r0, #193	; 0xc1
    5ad8:	f107 0801 	add.w	r8, r7, #1
    5adc:	f000 817b 	beq.w	5dd6 <_ZN9ClearCore10UsbManager6TxPumpEv+0x396>
    5ae0:	787e      	ldrb	r6, [r7, #1]
    5ae2:	f880 60c1 	strb.w	r6, [r0, #193]	; 0xc1
    5ae6:	2c02      	cmp	r4, #2
    5ae8:	f100 0cc2 	add.w	ip, r0, #194	; 0xc2
    5aec:	f107 0802 	add.w	r8, r7, #2
    5af0:	f000 8171 	beq.w	5dd6 <_ZN9ClearCore10UsbManager6TxPumpEv+0x396>
    5af4:	78be      	ldrb	r6, [r7, #2]
    5af6:	f880 60c2 	strb.w	r6, [r0, #194]	; 0xc2
        for (uint32_t iChar = 0; iChar < loopEnd; iChar++) {
    5afa:	2603      	movs	r6, #3
            *outPtr++ = *inPtr++;
    5afc:	f107 0803 	add.w	r8, r7, #3
    5b00:	f100 0cc3 	add.w	ip, r0, #195	; 0xc3
        for (uint32_t iChar = 0; iChar < loopEnd; iChar++) {
    5b04:	9601      	str	r6, [sp, #4]
    5b06:	eba2 0b04 	sub.w	fp, r2, r4
    5b0a:	f1ab 0704 	sub.w	r7, fp, #4
    5b0e:	08bf      	lsrs	r7, r7, #2
    5b10:	eb0e 0604 	add.w	r6, lr, r4
    5b14:	3701      	adds	r7, #1
    5b16:	34c0      	adds	r4, #192	; 0xc0
    5b18:	4406      	add	r6, r0
    5b1a:	4404      	add	r4, r0
    5b1c:	ea4f 0987 	mov.w	r9, r7, lsl #2
    uint8_t *inPtr = m_bufferOut + head, *outPtr = m_usbWriteBuf;
    5b20:	f04f 0e00 	mov.w	lr, #0
    5b24:	f10e 0e01 	add.w	lr, lr, #1
            *outPtr++ = *inPtr++;
    5b28:	f856 ab04 	ldr.w	sl, [r6], #4
    5b2c:	f844 ab04 	str.w	sl, [r4], #4
    5b30:	45be      	cmp	lr, r7
    5b32:	d3f7      	bcc.n	5b24 <_ZN9ClearCore10UsbManager6TxPumpEv+0xe4>
    5b34:	9c01      	ldr	r4, [sp, #4]
    5b36:	45cb      	cmp	fp, r9
    5b38:	444c      	add	r4, r9
    5b3a:	eb08 0e09 	add.w	lr, r8, r9
    5b3e:	eb0c 0609 	add.w	r6, ip, r9
    5b42:	d00f      	beq.n	5b64 <_ZN9ClearCore10UsbManager6TxPumpEv+0x124>
    5b44:	f818 8027 	ldrb.w	r8, [r8, r7, lsl #2]
    5b48:	f80c 8027 	strb.w	r8, [ip, r7, lsl #2]
        for (uint32_t iChar = 0; iChar < loopEnd; iChar++) {
    5b4c:	1c67      	adds	r7, r4, #1
    5b4e:	42ba      	cmp	r2, r7
    5b50:	d908      	bls.n	5b64 <_ZN9ClearCore10UsbManager6TxPumpEv+0x124>
    5b52:	3402      	adds	r4, #2
            *outPtr++ = *inPtr++;
    5b54:	f89e 7001 	ldrb.w	r7, [lr, #1]
    5b58:	7077      	strb	r7, [r6, #1]
        for (uint32_t iChar = 0; iChar < loopEnd; iChar++) {
    5b5a:	42a2      	cmp	r2, r4
    5b5c:	d902      	bls.n	5b64 <_ZN9ClearCore10UsbManager6TxPumpEv+0x124>
            *outPtr++ = *inPtr++;
    5b5e:	f89e 4002 	ldrb.w	r4, [lr, #2]
    5b62:	70b4      	strb	r4, [r6, #2]
    5b64:	18ac      	adds	r4, r5, r2
        for (uint32_t iChar = 0; iChar < loopEnd; iChar++) {
    5b66:	1a8a      	subs	r2, r1, r2
    5b68:	f000 811a 	beq.w	5da0 <_ZN9ClearCore10UsbManager6TxPumpEv+0x360>
    5b6c:	1d26      	adds	r6, r4, #4
    5b6e:	f100 0744 	add.w	r7, r0, #68	; 0x44
    5b72:	42bc      	cmp	r4, r7
    5b74:	bf38      	it	cc
    5b76:	42b3      	cmpcc	r3, r6
    5b78:	f0c0 8145 	bcc.w	5e06 <_ZN9ClearCore10UsbManager6TxPumpEv+0x3c6>
    5b7c:	2a0b      	cmp	r2, #11
    5b7e:	f240 8142 	bls.w	5e06 <_ZN9ClearCore10UsbManager6TxPumpEv+0x3c6>
    5b82:	425f      	negs	r7, r3
    5b84:	f017 0703 	ands.w	r7, r7, #3
    5b88:	f000 8129 	beq.w	5dde <_ZN9ClearCore10UsbManager6TxPumpEv+0x39e>
            *outPtr++ = *inPtr++;
    5b8c:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
    5b90:	7023      	strb	r3, [r4, #0]
    5b92:	2f01      	cmp	r7, #1
    5b94:	f104 0c01 	add.w	ip, r4, #1
    5b98:	f100 0341 	add.w	r3, r0, #65	; 0x41
    5b9c:	f000 811d 	beq.w	5dda <_ZN9ClearCore10UsbManager6TxPumpEv+0x39a>
    5ba0:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
    5ba4:	7063      	strb	r3, [r4, #1]
    5ba6:	2f02      	cmp	r7, #2
    5ba8:	f104 0c02 	add.w	ip, r4, #2
    5bac:	f100 0342 	add.w	r3, r0, #66	; 0x42
    5bb0:	f000 8113 	beq.w	5dda <_ZN9ClearCore10UsbManager6TxPumpEv+0x39a>
    5bb4:	f890 3042 	ldrb.w	r3, [r0, #66]	; 0x42
    5bb8:	70a3      	strb	r3, [r4, #2]
    5bba:	f104 0c03 	add.w	ip, r4, #3
    5bbe:	f100 0343 	add.w	r3, r0, #67	; 0x43
        for (uint32_t iChar = 0; iChar < loopEnd; iChar++) {
    5bc2:	f04f 0903 	mov.w	r9, #3
    5bc6:	eba2 0807 	sub.w	r8, r2, r7
    5bca:	f1a8 0e04 	sub.w	lr, r8, #4
    5bce:	ea4f 0e9e 	mov.w	lr, lr, lsr #2
    5bd2:	f107 0640 	add.w	r6, r7, #64	; 0x40
    5bd6:	f10e 0e01 	add.w	lr, lr, #1
    5bda:	443c      	add	r4, r7
    5bdc:	4406      	add	r6, r0
    5bde:	ea4f 0a8e 	mov.w	sl, lr, lsl #2
    uint8_t *inPtr = m_bufferOut + head, *outPtr = m_usbWriteBuf;
    5be2:	2700      	movs	r7, #0
    5be4:	3701      	adds	r7, #1
            *outPtr++ = *inPtr++;
    5be6:	f856 bb04 	ldr.w	fp, [r6], #4
    5bea:	f844 bb04 	str.w	fp, [r4], #4
    5bee:	45be      	cmp	lr, r7
    5bf0:	d8f8      	bhi.n	5be4 <_ZN9ClearCore10UsbManager6TxPumpEv+0x1a4>
    5bf2:	45d0      	cmp	r8, sl
    5bf4:	eb09 040a 	add.w	r4, r9, sl
    5bf8:	eb03 070a 	add.w	r7, r3, sl
    5bfc:	eb0c 060a 	add.w	r6, ip, sl
    5c00:	f000 80ce 	beq.w	5da0 <_ZN9ClearCore10UsbManager6TxPumpEv+0x360>
    5c04:	f813 302e 	ldrb.w	r3, [r3, lr, lsl #2]
    5c08:	f80c 302e 	strb.w	r3, [ip, lr, lsl #2]
        for (uint32_t iChar = 0; iChar < loopEnd; iChar++) {
    5c0c:	1c63      	adds	r3, r4, #1
    5c0e:	429a      	cmp	r2, r3
    5c10:	f240 80c6 	bls.w	5da0 <_ZN9ClearCore10UsbManager6TxPumpEv+0x360>
    5c14:	3402      	adds	r4, #2
            *outPtr++ = *inPtr++;
    5c16:	787b      	ldrb	r3, [r7, #1]
    5c18:	7073      	strb	r3, [r6, #1]
        for (uint32_t iChar = 0; iChar < loopEnd; iChar++) {
    5c1a:	42a2      	cmp	r2, r4
    5c1c:	f240 80c0 	bls.w	5da0 <_ZN9ClearCore10UsbManager6TxPumpEv+0x360>
            *outPtr++ = *inPtr++;
    5c20:	78bb      	ldrb	r3, [r7, #2]
    5c22:	70b3      	strb	r3, [r6, #2]
    5c24:	4604      	mov	r4, r0
    if (cdcdf_acm_write(m_usbWriteBuf, count)) {
    5c26:	4628      	mov	r0, r5
    5c28:	f005 fa34 	bl	b094 <cdcdf_acm_write>
    5c2c:	2800      	cmp	r0, #0
    5c2e:	f040 80be 	bne.w	5dae <_ZN9ClearCore10UsbManager6TxPumpEv+0x36e>
}
    5c32:	b003      	add	sp, #12
    5c34:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        count = min(count, tail - head);
    5c38:	1b89      	subs	r1, r1, r6
    5c3a:	f106 0240 	add.w	r2, r6, #64	; 0x40
    5c3e:	f106 0444 	add.w	r4, r6, #68	; 0x44
    5c42:	2940      	cmp	r1, #64	; 0x40
    5c44:	eb00 0c02 	add.w	ip, r0, r2
    5c48:	4404      	add	r4, r0
    5c4a:	f100 0ec4 	add.w	lr, r0, #196	; 0xc4
    5c4e:	bf28      	it	cs
    5c50:	2140      	movcs	r1, #64	; 0x40
    5c52:	45f4      	cmp	ip, lr
    5c54:	bf38      	it	cc
    5c56:	42a5      	cmpcc	r5, r4
    5c58:	f0c0 80cb 	bcc.w	5df2 <_ZN9ClearCore10UsbManager6TxPumpEv+0x3b2>
    5c5c:	290b      	cmp	r1, #11
    5c5e:	f240 80c8 	bls.w	5df2 <_ZN9ClearCore10UsbManager6TxPumpEv+0x3b2>
    5c62:	426c      	negs	r4, r5
    5c64:	f014 0403 	ands.w	r4, r4, #3
    5c68:	f000 80ab 	beq.w	5dc2 <_ZN9ClearCore10UsbManager6TxPumpEv+0x382>
            *outPtr++ = *inPtr++;
    5c6c:	5d9b      	ldrb	r3, [r3, r6]
    5c6e:	f880 30c0 	strb.w	r3, [r0, #192]	; 0xc0
    5c72:	2c01      	cmp	r4, #1
    5c74:	f100 06c1 	add.w	r6, r0, #193	; 0xc1
    5c78:	f107 0e01 	add.w	lr, r7, #1
    5c7c:	f000 80a9 	beq.w	5dd2 <_ZN9ClearCore10UsbManager6TxPumpEv+0x392>
    5c80:	787b      	ldrb	r3, [r7, #1]
    5c82:	f880 30c1 	strb.w	r3, [r0, #193]	; 0xc1
    5c86:	2c02      	cmp	r4, #2
    5c88:	f100 06c2 	add.w	r6, r0, #194	; 0xc2
    5c8c:	f107 0e02 	add.w	lr, r7, #2
    5c90:	f000 809f 	beq.w	5dd2 <_ZN9ClearCore10UsbManager6TxPumpEv+0x392>
    5c94:	78bb      	ldrb	r3, [r7, #2]
    5c96:	f880 30c2 	strb.w	r3, [r0, #194]	; 0xc2
    5c9a:	f107 0e03 	add.w	lr, r7, #3
    5c9e:	f100 06c3 	add.w	r6, r0, #195	; 0xc3
        for (uint32_t iChar = 0; iChar < count; iChar++) {
    5ca2:	f04f 0c03 	mov.w	ip, #3
    5ca6:	1913      	adds	r3, r2, r4
    5ca8:	4403      	add	r3, r0
    5caa:	f104 08c0 	add.w	r8, r4, #192	; 0xc0
            *outPtr++ = *inPtr++;
    5cae:	681a      	ldr	r2, [r3, #0]
    5cb0:	f840 2008 	str.w	r2, [r0, r8]
    5cb4:	1b0f      	subs	r7, r1, r4
    5cb6:	1f3a      	subs	r2, r7, #4
    5cb8:	0892      	lsrs	r2, r2, #2
    5cba:	eb00 0408 	add.w	r4, r0, r8
    5cbe:	3201      	adds	r2, #1
    5cc0:	f8d3 8004 	ldr.w	r8, [r3, #4]
    5cc4:	f8c4 8004 	str.w	r8, [r4, #4]
    5cc8:	2a02      	cmp	r2, #2
    5cca:	ea4f 0882 	mov.w	r8, r2, lsl #2
    5cce:	d04f      	beq.n	5d70 <_ZN9ClearCore10UsbManager6TxPumpEv+0x330>
    5cd0:	f8d3 9008 	ldr.w	r9, [r3, #8]
    5cd4:	f8c4 9008 	str.w	r9, [r4, #8]
    5cd8:	2a03      	cmp	r2, #3
    5cda:	d049      	beq.n	5d70 <_ZN9ClearCore10UsbManager6TxPumpEv+0x330>
    5cdc:	f8d3 900c 	ldr.w	r9, [r3, #12]
    5ce0:	f8c4 900c 	str.w	r9, [r4, #12]
    5ce4:	2a04      	cmp	r2, #4
    5ce6:	d043      	beq.n	5d70 <_ZN9ClearCore10UsbManager6TxPumpEv+0x330>
    5ce8:	f8d3 9010 	ldr.w	r9, [r3, #16]
    5cec:	f8c4 9010 	str.w	r9, [r4, #16]
    5cf0:	2a05      	cmp	r2, #5
    5cf2:	d03d      	beq.n	5d70 <_ZN9ClearCore10UsbManager6TxPumpEv+0x330>
    5cf4:	f8d3 9014 	ldr.w	r9, [r3, #20]
    5cf8:	f8c4 9014 	str.w	r9, [r4, #20]
    5cfc:	2a06      	cmp	r2, #6
    5cfe:	d037      	beq.n	5d70 <_ZN9ClearCore10UsbManager6TxPumpEv+0x330>
    5d00:	f8d3 9018 	ldr.w	r9, [r3, #24]
    5d04:	f8c4 9018 	str.w	r9, [r4, #24]
    5d08:	2a07      	cmp	r2, #7
    5d0a:	d031      	beq.n	5d70 <_ZN9ClearCore10UsbManager6TxPumpEv+0x330>
    5d0c:	f8d3 901c 	ldr.w	r9, [r3, #28]
    5d10:	f8c4 901c 	str.w	r9, [r4, #28]
    5d14:	2a08      	cmp	r2, #8
    5d16:	d02b      	beq.n	5d70 <_ZN9ClearCore10UsbManager6TxPumpEv+0x330>
    5d18:	f8d3 9020 	ldr.w	r9, [r3, #32]
    5d1c:	f8c4 9020 	str.w	r9, [r4, #32]
    5d20:	2a09      	cmp	r2, #9
    5d22:	d025      	beq.n	5d70 <_ZN9ClearCore10UsbManager6TxPumpEv+0x330>
    5d24:	f8d3 9024 	ldr.w	r9, [r3, #36]	; 0x24
    5d28:	f8c4 9024 	str.w	r9, [r4, #36]	; 0x24
    5d2c:	2a0a      	cmp	r2, #10
    5d2e:	d01f      	beq.n	5d70 <_ZN9ClearCore10UsbManager6TxPumpEv+0x330>
    5d30:	f8d3 9028 	ldr.w	r9, [r3, #40]	; 0x28
    5d34:	f8c4 9028 	str.w	r9, [r4, #40]	; 0x28
    5d38:	2a0b      	cmp	r2, #11
    5d3a:	d019      	beq.n	5d70 <_ZN9ClearCore10UsbManager6TxPumpEv+0x330>
    5d3c:	f8d3 902c 	ldr.w	r9, [r3, #44]	; 0x2c
    5d40:	f8c4 902c 	str.w	r9, [r4, #44]	; 0x2c
    5d44:	2a0c      	cmp	r2, #12
    5d46:	d013      	beq.n	5d70 <_ZN9ClearCore10UsbManager6TxPumpEv+0x330>
    5d48:	f8d3 9030 	ldr.w	r9, [r3, #48]	; 0x30
    5d4c:	f8c4 9030 	str.w	r9, [r4, #48]	; 0x30
    5d50:	2a0d      	cmp	r2, #13
    5d52:	d00d      	beq.n	5d70 <_ZN9ClearCore10UsbManager6TxPumpEv+0x330>
    5d54:	f8d3 9034 	ldr.w	r9, [r3, #52]	; 0x34
    5d58:	f8c4 9034 	str.w	r9, [r4, #52]	; 0x34
    5d5c:	2a0e      	cmp	r2, #14
    5d5e:	d007      	beq.n	5d70 <_ZN9ClearCore10UsbManager6TxPumpEv+0x330>
    5d60:	f8d3 9038 	ldr.w	r9, [r3, #56]	; 0x38
    5d64:	f8c4 9038 	str.w	r9, [r4, #56]	; 0x38
    5d68:	2a0f      	cmp	r2, #15
    5d6a:	d001      	beq.n	5d70 <_ZN9ClearCore10UsbManager6TxPumpEv+0x330>
    5d6c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
    5d6e:	63e3      	str	r3, [r4, #60]	; 0x3c
    5d70:	4547      	cmp	r7, r8
    5d72:	eb0c 0308 	add.w	r3, ip, r8
    5d76:	eb06 0408 	add.w	r4, r6, r8
    5d7a:	eb0e 0c08 	add.w	ip, lr, r8
    5d7e:	d00f      	beq.n	5da0 <_ZN9ClearCore10UsbManager6TxPumpEv+0x360>
    5d80:	f81e 7022 	ldrb.w	r7, [lr, r2, lsl #2]
    5d84:	f806 7022 	strb.w	r7, [r6, r2, lsl #2]
        for (uint32_t iChar = 0; iChar < count; iChar++) {
    5d88:	1c5a      	adds	r2, r3, #1
    5d8a:	4291      	cmp	r1, r2
    5d8c:	d908      	bls.n	5da0 <_ZN9ClearCore10UsbManager6TxPumpEv+0x360>
    5d8e:	3302      	adds	r3, #2
            *outPtr++ = *inPtr++;
    5d90:	f89c 2001 	ldrb.w	r2, [ip, #1]
    5d94:	7062      	strb	r2, [r4, #1]
        for (uint32_t iChar = 0; iChar < count; iChar++) {
    5d96:	4299      	cmp	r1, r3
    5d98:	d902      	bls.n	5da0 <_ZN9ClearCore10UsbManager6TxPumpEv+0x360>
            *outPtr++ = *inPtr++;
    5d9a:	f89c 3002 	ldrb.w	r3, [ip, #2]
    5d9e:	70a3      	strb	r3, [r4, #2]
    5da0:	4604      	mov	r4, r0
    if (cdcdf_acm_write(m_usbWriteBuf, count)) {
    5da2:	4628      	mov	r0, r5
    5da4:	f005 f976 	bl	b094 <cdcdf_acm_write>
    5da8:	2800      	cmp	r0, #0
    5daa:	f43f af42 	beq.w	5c32 <_ZN9ClearCore10UsbManager6TxPumpEv+0x1f2>
        atomic_clear_seqcst(&m_sendActive);
    5dae:	f3bf 8f5b 	dmb	ish
    5db2:	2300      	movs	r3, #0
    5db4:	f884 3110 	strb.w	r3, [r4, #272]	; 0x110
    5db8:	f3bf 8f5b 	dmb	ish
}
    5dbc:	b003      	add	sp, #12
    5dbe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    uint8_t *inPtr = m_bufferOut + head, *outPtr = m_usbWriteBuf;
    5dc2:	46be      	mov	lr, r7
        for (uint32_t iChar = 0; iChar < count; iChar++) {
    5dc4:	46a4      	mov	ip, r4
    uint8_t *inPtr = m_bufferOut + head, *outPtr = m_usbWriteBuf;
    5dc6:	462e      	mov	r6, r5
    5dc8:	e76d      	b.n	5ca6 <_ZN9ClearCore10UsbManager6TxPumpEv+0x266>
    5dca:	46b8      	mov	r8, r7
        for (uint32_t iChar = 0; iChar < loopEnd; iChar++) {
    5dcc:	9401      	str	r4, [sp, #4]
    uint8_t *inPtr = m_bufferOut + head, *outPtr = m_usbWriteBuf;
    5dce:	46ac      	mov	ip, r5
    5dd0:	e699      	b.n	5b06 <_ZN9ClearCore10UsbManager6TxPumpEv+0xc6>
        for (uint32_t iChar = 0; iChar < count; iChar++) {
    5dd2:	46a4      	mov	ip, r4
    5dd4:	e767      	b.n	5ca6 <_ZN9ClearCore10UsbManager6TxPumpEv+0x266>
        for (uint32_t iChar = 0; iChar < loopEnd; iChar++) {
    5dd6:	9401      	str	r4, [sp, #4]
    5dd8:	e695      	b.n	5b06 <_ZN9ClearCore10UsbManager6TxPumpEv+0xc6>
        for (uint32_t iChar = 0; iChar < loopEnd; iChar++) {
    5dda:	46b9      	mov	r9, r7
    5ddc:	e6f3      	b.n	5bc6 <_ZN9ClearCore10UsbManager6TxPumpEv+0x186>
    5dde:	46b9      	mov	r9, r7
    5de0:	46a4      	mov	ip, r4
    5de2:	e6f0      	b.n	5bc6 <_ZN9ClearCore10UsbManager6TxPumpEv+0x186>
        atomic_clear_seqcst(&m_sendActive);
    5de4:	f3bf 8f5b 	dmb	ish
    5de8:	f880 2110 	strb.w	r2, [r0, #272]	; 0x110
    5dec:	f3bf 8f5b 	dmb	ish
        return;
    5df0:	e71f      	b.n	5c32 <_ZN9ClearCore10UsbManager6TxPumpEv+0x1f2>
    5df2:	f100 03bf 	add.w	r3, r0, #191	; 0xbf
    5df6:	187c      	adds	r4, r7, r1
            *outPtr++ = *inPtr++;
    5df8:	f817 2b01 	ldrb.w	r2, [r7], #1
    5dfc:	f803 2f01 	strb.w	r2, [r3, #1]!
        for (uint32_t iChar = 0; iChar < count; iChar++) {
    5e00:	42a7      	cmp	r7, r4
    5e02:	d1f9      	bne.n	5df8 <_ZN9ClearCore10UsbManager6TxPumpEv+0x3b8>
    5e04:	e7cc      	b.n	5da0 <_ZN9ClearCore10UsbManager6TxPumpEv+0x360>
    5e06:	3c01      	subs	r4, #1
    5e08:	441a      	add	r2, r3
            *outPtr++ = *inPtr++;
    5e0a:	f813 6b01 	ldrb.w	r6, [r3], #1
    5e0e:	f804 6f01 	strb.w	r6, [r4, #1]!
        for (uint32_t iChar = 0; iChar < loopEnd; iChar++) {
    5e12:	4293      	cmp	r3, r2
    5e14:	d1f9      	bne.n	5e0a <_ZN9ClearCore10UsbManager6TxPumpEv+0x3ca>
    5e16:	e7c3      	b.n	5da0 <_ZN9ClearCore10UsbManager6TxPumpEv+0x360>
    5e18:	f100 04bf 	add.w	r4, r0, #191	; 0xbf
    5e1c:	eb07 0e02 	add.w	lr, r7, r2
            *outPtr++ = *inPtr++;
    5e20:	f817 6b01 	ldrb.w	r6, [r7], #1
    5e24:	f804 6f01 	strb.w	r6, [r4, #1]!
        for (uint32_t iChar = 0; iChar < loopEnd; iChar++) {
    5e28:	45be      	cmp	lr, r7
    5e2a:	d1f9      	bne.n	5e20 <_ZN9ClearCore10UsbManager6TxPumpEv+0x3e0>
    5e2c:	e69a      	b.n	5b64 <_ZN9ClearCore10UsbManager6TxPumpEv+0x124>
    uint8_t *inPtr = m_bufferOut + head, *outPtr = m_usbWriteBuf;
    5e2e:	462c      	mov	r4, r5
    5e30:	e699      	b.n	5b66 <_ZN9ClearCore10UsbManager6TxPumpEv+0x126>
    5e32:	bf00      	nop

00005e34 <_ZN9ClearCore10UsbManager9PortCloseEv>:
void UsbManager::PortClose() {
    5e34:	b538      	push	{r3, r4, r5, lr}
    if (!m_portOpen) {
    5e36:	f890 311c 	ldrb.w	r3, [r0, #284]	; 0x11c
    5e3a:	b903      	cbnz	r3, 5e3e <_ZN9ClearCore10UsbManager9PortCloseEv+0xa>
    5e3c:	bd38      	pop	{r3, r4, r5, pc}
    5e3e:	4605      	mov	r5, r0
    TxPump();
    5e40:	f7ff fdfe 	bl	5a40 <_ZN9ClearCore10UsbManager6TxPumpEv>
           USB->DEVICE.FSMSTATUS.bit.FSMSTATE == USB_FSMSTATUS_FSMSTATE_ON;
    5e44:	f04f 4482 	mov.w	r4, #1090519040	; 0x41000000
    while (m_outHead != m_outTail && Connected()) {
    5e48:	f8d5 2108 	ldr.w	r2, [r5, #264]	; 0x108
    5e4c:	f8d5 310c 	ldr.w	r3, [r5, #268]	; 0x10c
    5e50:	429a      	cmp	r2, r3
    5e52:	d00b      	beq.n	5e6c <_ZN9ClearCore10UsbManager9PortCloseEv+0x38>
    return cdcdf_acm_is_enabled() && LineState().rs232.DTR &&
    5e54:	f005 f966 	bl	b124 <cdcdf_acm_is_enabled>
    5e58:	b140      	cbz	r0, 5e6c <_ZN9ClearCore10UsbManager9PortCloseEv+0x38>
    5e5a:	f895 3112 	ldrb.w	r3, [r5, #274]	; 0x112
    5e5e:	07db      	lsls	r3, r3, #31
    5e60:	d504      	bpl.n	5e6c <_ZN9ClearCore10UsbManager9PortCloseEv+0x38>
           USB->DEVICE.FSMSTATUS.bit.FSMSTATE == USB_FSMSTATUS_FSMSTATE_ON;
    5e62:	7b63      	ldrb	r3, [r4, #13]
    5e64:	f003 037f 	and.w	r3, r3, #127	; 0x7f
    return cdcdf_acm_is_enabled() && LineState().rs232.DTR &&
    5e68:	2b02      	cmp	r3, #2
    5e6a:	d0ed      	beq.n	5e48 <_ZN9ClearCore10UsbManager9PortCloseEv+0x14>
    m_portOpen = false;
    5e6c:	2400      	movs	r4, #0
    cdcdf_acm_register_callback(CDCDF_ACM_CB_READ, (FUNC_PTR)NULL);
    5e6e:	4621      	mov	r1, r4
    m_portOpen = false;
    5e70:	f885 411c 	strb.w	r4, [r5, #284]	; 0x11c
    cdcdf_acm_register_callback(CDCDF_ACM_CB_READ, (FUNC_PTR)NULL);
    5e74:	4620      	mov	r0, r4
    5e76:	f005 f92d 	bl	b0d4 <cdcdf_acm_register_callback>
    cdcdf_acm_register_callback(CDCDF_ACM_CB_WRITE, (FUNC_PTR)NULL);
    5e7a:	4621      	mov	r1, r4
    5e7c:	2001      	movs	r0, #1
    5e7e:	f005 f929 	bl	b0d4 <cdcdf_acm_register_callback>
    cdcdf_acm_stop_xfer();
    5e82:	f005 f91b 	bl	b0bc <cdcdf_acm_stop_xfer>
    m_inHead = 0;
    5e86:	f8c5 4100 	str.w	r4, [r5, #256]	; 0x100
    m_readBufAvail = 0;
    5e8a:	f8c5 4118 	str.w	r4, [r5, #280]	; 0x118
    m_inTail = 0;
    5e8e:	f8c5 4104 	str.w	r4, [r5, #260]	; 0x104
    m_outHead = 0;
    5e92:	f8c5 4108 	str.w	r4, [r5, #264]	; 0x108
    m_outTail = 0;
    5e96:	f8c5 410c 	str.w	r4, [r5, #268]	; 0x10c
    m_sendActive = false;
    5e9a:	f885 4110 	strb.w	r4, [r5, #272]	; 0x110
    m_readActive = false;
    5e9e:	f885 4111 	strb.w	r4, [r5, #273]	; 0x111
    5ea2:	bd38      	pop	{r3, r4, r5, pc}

00005ea4 <_ZN9ClearCore10UsbManager7RefreshEv>:
    if (!m_sendActive && m_outHead != m_outTail) {
    5ea4:	f890 3110 	ldrb.w	r3, [r0, #272]	; 0x110
    5ea8:	b103      	cbz	r3, 5eac <_ZN9ClearCore10UsbManager7RefreshEv+0x8>
    5eaa:	4770      	bx	lr
    5eac:	f8d0 2108 	ldr.w	r2, [r0, #264]	; 0x108
    5eb0:	f8d0 310c 	ldr.w	r3, [r0, #268]	; 0x10c
    5eb4:	429a      	cmp	r2, r3
    5eb6:	f000 80fd 	beq.w	60b4 <_ZN9ClearCore10UsbManager7RefreshEv+0x210>
void UsbManager::Refresh(void) {
    5eba:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    if (atomic_test_and_set_acqrel(&m_sendActive)) {
    5ebe:	f500 7388 	add.w	r3, r0, #272	; 0x110
void UsbManager::Refresh(void) {
    5ec2:	b083      	sub	sp, #12
    if (atomic_test_and_set_acqrel(&m_sendActive)) {
    5ec4:	f04f 0101 	mov.w	r1, #1
    5ec8:	f3bf 8f5b 	dmb	ish
    5ecc:	e8d3 2f4f 	ldrexb	r2, [r3]
    5ed0:	e8c3 1f44 	strexb	r4, r1, [r3]
    5ed4:	2c00      	cmp	r4, #0
    5ed6:	d1f9      	bne.n	5ecc <_ZN9ClearCore10UsbManager7RefreshEv+0x28>
    5ed8:	f3bf 8f5b 	dmb	ish
    5edc:	f012 0fff 	tst.w	r2, #255	; 0xff
    5ee0:	f040 80e5 	bne.w	60ae <_ZN9ClearCore10UsbManager7RefreshEv+0x20a>
    uint32_t head = m_outHead;
    5ee4:	f8d0 6108 	ldr.w	r6, [r0, #264]	; 0x108
    uint32_t tail = m_outTail;
    5ee8:	f8d0 110c 	ldr.w	r1, [r0, #268]	; 0x10c
    if (head == tail) {
    5eec:	428e      	cmp	r6, r1
    5eee:	f000 81ab 	beq.w	6248 <_ZN9ClearCore10UsbManager7RefreshEv+0x3a4>
    uint8_t *inPtr = m_bufferOut + head, *outPtr = m_usbWriteBuf;
    5ef2:	f100 0340 	add.w	r3, r0, #64	; 0x40
    5ef6:	eb03 0706 	add.w	r7, r3, r6
    5efa:	f100 05c0 	add.w	r5, r0, #192	; 0xc0
    if (head < tail) {
    5efe:	f0c0 80da 	bcc.w	60b6 <_ZN9ClearCore10UsbManager7RefreshEv+0x212>
        uint32_t countTilWrap = sizeof(m_bufferOut) - head;
    5f02:	f1c6 0240 	rsb	r2, r6, #64	; 0x40
        count = min(count, countTilWrap + tail);
    5f06:	4411      	add	r1, r2
    5f08:	2940      	cmp	r1, #64	; 0x40
    5f0a:	bf28      	it	cs
    5f0c:	2140      	movcs	r1, #64	; 0x40
    5f0e:	428a      	cmp	r2, r1
    5f10:	bf28      	it	cs
    5f12:	460a      	movcs	r2, r1
        for (uint32_t iChar = 0; iChar < loopEnd; iChar++) {
    5f14:	2a00      	cmp	r2, #0
    5f16:	f000 81bc 	beq.w	6292 <_ZN9ClearCore10UsbManager7RefreshEv+0x3ee>
    5f1a:	f106 0e40 	add.w	lr, r6, #64	; 0x40
    5f1e:	f106 0444 	add.w	r4, r6, #68	; 0x44
    5f22:	eb00 080e 	add.w	r8, r0, lr
    5f26:	4404      	add	r4, r0
    5f28:	f100 0cc4 	add.w	ip, r0, #196	; 0xc4
    5f2c:	45e0      	cmp	r8, ip
    5f2e:	bf38      	it	cc
    5f30:	42a5      	cmpcc	r5, r4
    5f32:	f0c0 81a3 	bcc.w	627c <_ZN9ClearCore10UsbManager7RefreshEv+0x3d8>
    5f36:	2a0b      	cmp	r2, #11
    5f38:	f240 81a0 	bls.w	627c <_ZN9ClearCore10UsbManager7RefreshEv+0x3d8>
    5f3c:	426c      	negs	r4, r5
    5f3e:	f014 0403 	ands.w	r4, r4, #3
    5f42:	f000 8177 	beq.w	6234 <_ZN9ClearCore10UsbManager7RefreshEv+0x390>
            *outPtr++ = *inPtr++;
    5f46:	5d9e      	ldrb	r6, [r3, r6]
    5f48:	f880 60c0 	strb.w	r6, [r0, #192]	; 0xc0
    5f4c:	2c01      	cmp	r4, #1
    5f4e:	f100 0cc1 	add.w	ip, r0, #193	; 0xc1
    5f52:	f107 0801 	add.w	r8, r7, #1
    5f56:	f000 8171 	beq.w	623c <_ZN9ClearCore10UsbManager7RefreshEv+0x398>
    5f5a:	787e      	ldrb	r6, [r7, #1]
    5f5c:	f880 60c1 	strb.w	r6, [r0, #193]	; 0xc1
    5f60:	2c02      	cmp	r4, #2
    5f62:	f100 0cc2 	add.w	ip, r0, #194	; 0xc2
    5f66:	f107 0802 	add.w	r8, r7, #2
    5f6a:	f000 8165 	beq.w	6238 <_ZN9ClearCore10UsbManager7RefreshEv+0x394>
    5f6e:	78be      	ldrb	r6, [r7, #2]
    5f70:	f880 60c2 	strb.w	r6, [r0, #194]	; 0xc2
        for (uint32_t iChar = 0; iChar < loopEnd; iChar++) {
    5f74:	2603      	movs	r6, #3
            *outPtr++ = *inPtr++;
    5f76:	f107 0803 	add.w	r8, r7, #3
    5f7a:	f100 0cc3 	add.w	ip, r0, #195	; 0xc3
        for (uint32_t iChar = 0; iChar < loopEnd; iChar++) {
    5f7e:	9601      	str	r6, [sp, #4]
    5f80:	eba2 0b04 	sub.w	fp, r2, r4
    5f84:	f1ab 0704 	sub.w	r7, fp, #4
    5f88:	08bf      	lsrs	r7, r7, #2
    5f8a:	eb0e 0604 	add.w	r6, lr, r4
    5f8e:	3701      	adds	r7, #1
    5f90:	34c0      	adds	r4, #192	; 0xc0
    5f92:	4406      	add	r6, r0
    5f94:	4404      	add	r4, r0
    5f96:	ea4f 0987 	mov.w	r9, r7, lsl #2
    5f9a:	f04f 0e00 	mov.w	lr, #0
    5f9e:	f10e 0e01 	add.w	lr, lr, #1
            *outPtr++ = *inPtr++;
    5fa2:	f856 ab04 	ldr.w	sl, [r6], #4
    5fa6:	f844 ab04 	str.w	sl, [r4], #4
    5faa:	45be      	cmp	lr, r7
    5fac:	d3f7      	bcc.n	5f9e <_ZN9ClearCore10UsbManager7RefreshEv+0xfa>
    5fae:	9c01      	ldr	r4, [sp, #4]
    5fb0:	45cb      	cmp	fp, r9
    5fb2:	444c      	add	r4, r9
    5fb4:	eb0c 0609 	add.w	r6, ip, r9
    5fb8:	eb08 0e09 	add.w	lr, r8, r9
    5fbc:	d00f      	beq.n	5fde <_ZN9ClearCore10UsbManager7RefreshEv+0x13a>
    5fbe:	f818 8027 	ldrb.w	r8, [r8, r7, lsl #2]
    5fc2:	f80c 8027 	strb.w	r8, [ip, r7, lsl #2]
        for (uint32_t iChar = 0; iChar < loopEnd; iChar++) {
    5fc6:	1c67      	adds	r7, r4, #1
    5fc8:	42ba      	cmp	r2, r7
    5fca:	d908      	bls.n	5fde <_ZN9ClearCore10UsbManager7RefreshEv+0x13a>
    5fcc:	3402      	adds	r4, #2
            *outPtr++ = *inPtr++;
    5fce:	f89e 7001 	ldrb.w	r7, [lr, #1]
    5fd2:	7077      	strb	r7, [r6, #1]
        for (uint32_t iChar = 0; iChar < loopEnd; iChar++) {
    5fd4:	42a2      	cmp	r2, r4
    5fd6:	d902      	bls.n	5fde <_ZN9ClearCore10UsbManager7RefreshEv+0x13a>
            *outPtr++ = *inPtr++;
    5fd8:	f89e 4002 	ldrb.w	r4, [lr, #2]
    5fdc:	70b4      	strb	r4, [r6, #2]
    5fde:	18ac      	adds	r4, r5, r2
        for (uint32_t iChar = 0; iChar < loopEnd; iChar++) {
    5fe0:	1a8a      	subs	r2, r1, r2
    5fe2:	d058      	beq.n	6096 <_ZN9ClearCore10UsbManager7RefreshEv+0x1f2>
    5fe4:	1d26      	adds	r6, r4, #4
    5fe6:	f100 0744 	add.w	r7, r0, #68	; 0x44
    5fea:	42bc      	cmp	r4, r7
    5fec:	bf38      	it	cc
    5fee:	42b3      	cmpcc	r3, r6
    5ff0:	f0c0 813b 	bcc.w	626a <_ZN9ClearCore10UsbManager7RefreshEv+0x3c6>
    5ff4:	2a0b      	cmp	r2, #11
    5ff6:	f240 8138 	bls.w	626a <_ZN9ClearCore10UsbManager7RefreshEv+0x3c6>
    5ffa:	425f      	negs	r7, r3
    5ffc:	f017 0703 	ands.w	r7, r7, #3
    6000:	f000 811f 	beq.w	6242 <_ZN9ClearCore10UsbManager7RefreshEv+0x39e>
            *outPtr++ = *inPtr++;
    6004:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
    6008:	7023      	strb	r3, [r4, #0]
    600a:	2f01      	cmp	r7, #1
    600c:	f104 0c01 	add.w	ip, r4, #1
    6010:	f100 0341 	add.w	r3, r0, #65	; 0x41
    6014:	f000 8116 	beq.w	6244 <_ZN9ClearCore10UsbManager7RefreshEv+0x3a0>
    6018:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
    601c:	7063      	strb	r3, [r4, #1]
    601e:	2f02      	cmp	r7, #2
    6020:	f104 0c02 	add.w	ip, r4, #2
    6024:	f100 0342 	add.w	r3, r0, #66	; 0x42
    6028:	f000 810c 	beq.w	6244 <_ZN9ClearCore10UsbManager7RefreshEv+0x3a0>
    602c:	f890 3042 	ldrb.w	r3, [r0, #66]	; 0x42
    6030:	70a3      	strb	r3, [r4, #2]
    6032:	f104 0c03 	add.w	ip, r4, #3
    6036:	f100 0343 	add.w	r3, r0, #67	; 0x43
        for (uint32_t iChar = 0; iChar < loopEnd; iChar++) {
    603a:	f04f 0903 	mov.w	r9, #3
    603e:	eba2 0807 	sub.w	r8, r2, r7
    6042:	f1a8 0e04 	sub.w	lr, r8, #4
    6046:	ea4f 0e9e 	mov.w	lr, lr, lsr #2
    604a:	f107 0640 	add.w	r6, r7, #64	; 0x40
    604e:	f10e 0e01 	add.w	lr, lr, #1
    6052:	443c      	add	r4, r7
    6054:	4406      	add	r6, r0
    6056:	ea4f 0a8e 	mov.w	sl, lr, lsl #2
    605a:	2700      	movs	r7, #0
    605c:	3701      	adds	r7, #1
            *outPtr++ = *inPtr++;
    605e:	f856 bb04 	ldr.w	fp, [r6], #4
    6062:	f844 bb04 	str.w	fp, [r4], #4
    6066:	45be      	cmp	lr, r7
    6068:	d8f8      	bhi.n	605c <_ZN9ClearCore10UsbManager7RefreshEv+0x1b8>
    606a:	45d0      	cmp	r8, sl
    606c:	eb09 040a 	add.w	r4, r9, sl
    6070:	eb0c 060a 	add.w	r6, ip, sl
    6074:	eb03 070a 	add.w	r7, r3, sl
    6078:	d00d      	beq.n	6096 <_ZN9ClearCore10UsbManager7RefreshEv+0x1f2>
    607a:	f813 302e 	ldrb.w	r3, [r3, lr, lsl #2]
    607e:	f80c 302e 	strb.w	r3, [ip, lr, lsl #2]
        for (uint32_t iChar = 0; iChar < loopEnd; iChar++) {
    6082:	1c63      	adds	r3, r4, #1
    6084:	429a      	cmp	r2, r3
    6086:	d906      	bls.n	6096 <_ZN9ClearCore10UsbManager7RefreshEv+0x1f2>
    6088:	3402      	adds	r4, #2
            *outPtr++ = *inPtr++;
    608a:	787b      	ldrb	r3, [r7, #1]
    608c:	7073      	strb	r3, [r6, #1]
        for (uint32_t iChar = 0; iChar < loopEnd; iChar++) {
    608e:	42a2      	cmp	r2, r4
    6090:	d901      	bls.n	6096 <_ZN9ClearCore10UsbManager7RefreshEv+0x1f2>
            *outPtr++ = *inPtr++;
    6092:	78bb      	ldrb	r3, [r7, #2]
    6094:	70b3      	strb	r3, [r6, #2]
    6096:	4604      	mov	r4, r0
    if (cdcdf_acm_write(m_usbWriteBuf, count)) {
    6098:	4628      	mov	r0, r5
    609a:	f004 fffb 	bl	b094 <cdcdf_acm_write>
    609e:	b130      	cbz	r0, 60ae <_ZN9ClearCore10UsbManager7RefreshEv+0x20a>
        atomic_clear_seqcst(&m_sendActive);
    60a0:	f3bf 8f5b 	dmb	ish
    60a4:	2300      	movs	r3, #0
    60a6:	f884 3110 	strb.w	r3, [r4, #272]	; 0x110
    60aa:	f3bf 8f5b 	dmb	ish
}
    60ae:	b003      	add	sp, #12
    60b0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    60b4:	4770      	bx	lr
        count = min(count, tail - head);
    60b6:	1b89      	subs	r1, r1, r6
    60b8:	f106 0240 	add.w	r2, r6, #64	; 0x40
    60bc:	f106 0444 	add.w	r4, r6, #68	; 0x44
    60c0:	2940      	cmp	r1, #64	; 0x40
    60c2:	eb00 0c02 	add.w	ip, r0, r2
    60c6:	4404      	add	r4, r0
    60c8:	f100 0ec4 	add.w	lr, r0, #196	; 0xc4
    60cc:	bf28      	it	cs
    60ce:	2140      	movcs	r1, #64	; 0x40
    60d0:	45f4      	cmp	ip, lr
    60d2:	bf38      	it	cc
    60d4:	42a5      	cmpcc	r5, r4
    60d6:	f0c0 80be 	bcc.w	6256 <_ZN9ClearCore10UsbManager7RefreshEv+0x3b2>
    60da:	290b      	cmp	r1, #11
    60dc:	f240 80bb 	bls.w	6256 <_ZN9ClearCore10UsbManager7RefreshEv+0x3b2>
    60e0:	426c      	negs	r4, r5
    60e2:	f014 0403 	ands.w	r4, r4, #3
    60e6:	f000 809e 	beq.w	6226 <_ZN9ClearCore10UsbManager7RefreshEv+0x382>
            *outPtr++ = *inPtr++;
    60ea:	5d9b      	ldrb	r3, [r3, r6]
    60ec:	f880 30c0 	strb.w	r3, [r0, #192]	; 0xc0
    60f0:	2c01      	cmp	r4, #1
    60f2:	f100 06c1 	add.w	r6, r0, #193	; 0xc1
    60f6:	f107 0e01 	add.w	lr, r7, #1
    60fa:	f000 8096 	beq.w	622a <_ZN9ClearCore10UsbManager7RefreshEv+0x386>
    60fe:	787b      	ldrb	r3, [r7, #1]
    6100:	f880 30c1 	strb.w	r3, [r0, #193]	; 0xc1
    6104:	2c02      	cmp	r4, #2
    6106:	f100 06c2 	add.w	r6, r0, #194	; 0xc2
    610a:	f107 0e02 	add.w	lr, r7, #2
    610e:	f000 808e 	beq.w	622e <_ZN9ClearCore10UsbManager7RefreshEv+0x38a>
    6112:	78bb      	ldrb	r3, [r7, #2]
    6114:	f880 30c2 	strb.w	r3, [r0, #194]	; 0xc2
    6118:	f107 0e03 	add.w	lr, r7, #3
    611c:	f100 06c3 	add.w	r6, r0, #195	; 0xc3
        for (uint32_t iChar = 0; iChar < count; iChar++) {
    6120:	f04f 0c03 	mov.w	ip, #3
    6124:	1913      	adds	r3, r2, r4
    6126:	4403      	add	r3, r0
    6128:	f104 08c0 	add.w	r8, r4, #192	; 0xc0
            *outPtr++ = *inPtr++;
    612c:	681a      	ldr	r2, [r3, #0]
    612e:	f840 2008 	str.w	r2, [r0, r8]
    6132:	1b0f      	subs	r7, r1, r4
    6134:	1f3a      	subs	r2, r7, #4
    6136:	0892      	lsrs	r2, r2, #2
    6138:	eb00 0408 	add.w	r4, r0, r8
    613c:	3201      	adds	r2, #1
    613e:	f8d3 8004 	ldr.w	r8, [r3, #4]
    6142:	f8c4 8004 	str.w	r8, [r4, #4]
    6146:	2a02      	cmp	r2, #2
    6148:	ea4f 0882 	mov.w	r8, r2, lsl #2
    614c:	d04f      	beq.n	61ee <_ZN9ClearCore10UsbManager7RefreshEv+0x34a>
    614e:	f8d3 9008 	ldr.w	r9, [r3, #8]
    6152:	f8c4 9008 	str.w	r9, [r4, #8]
    6156:	2a03      	cmp	r2, #3
    6158:	d049      	beq.n	61ee <_ZN9ClearCore10UsbManager7RefreshEv+0x34a>
    615a:	f8d3 900c 	ldr.w	r9, [r3, #12]
    615e:	f8c4 900c 	str.w	r9, [r4, #12]
    6162:	2a04      	cmp	r2, #4
    6164:	d043      	beq.n	61ee <_ZN9ClearCore10UsbManager7RefreshEv+0x34a>
    6166:	f8d3 9010 	ldr.w	r9, [r3, #16]
    616a:	f8c4 9010 	str.w	r9, [r4, #16]
    616e:	2a05      	cmp	r2, #5
    6170:	d03d      	beq.n	61ee <_ZN9ClearCore10UsbManager7RefreshEv+0x34a>
    6172:	f8d3 9014 	ldr.w	r9, [r3, #20]
    6176:	f8c4 9014 	str.w	r9, [r4, #20]
    617a:	2a06      	cmp	r2, #6
    617c:	d037      	beq.n	61ee <_ZN9ClearCore10UsbManager7RefreshEv+0x34a>
    617e:	f8d3 9018 	ldr.w	r9, [r3, #24]
    6182:	f8c4 9018 	str.w	r9, [r4, #24]
    6186:	2a07      	cmp	r2, #7
    6188:	d031      	beq.n	61ee <_ZN9ClearCore10UsbManager7RefreshEv+0x34a>
    618a:	f8d3 901c 	ldr.w	r9, [r3, #28]
    618e:	f8c4 901c 	str.w	r9, [r4, #28]
    6192:	2a08      	cmp	r2, #8
    6194:	d02b      	beq.n	61ee <_ZN9ClearCore10UsbManager7RefreshEv+0x34a>
    6196:	f8d3 9020 	ldr.w	r9, [r3, #32]
    619a:	f8c4 9020 	str.w	r9, [r4, #32]
    619e:	2a09      	cmp	r2, #9
    61a0:	d025      	beq.n	61ee <_ZN9ClearCore10UsbManager7RefreshEv+0x34a>
    61a2:	f8d3 9024 	ldr.w	r9, [r3, #36]	; 0x24
    61a6:	f8c4 9024 	str.w	r9, [r4, #36]	; 0x24
    61aa:	2a0a      	cmp	r2, #10
    61ac:	d01f      	beq.n	61ee <_ZN9ClearCore10UsbManager7RefreshEv+0x34a>
    61ae:	f8d3 9028 	ldr.w	r9, [r3, #40]	; 0x28
    61b2:	f8c4 9028 	str.w	r9, [r4, #40]	; 0x28
    61b6:	2a0b      	cmp	r2, #11
    61b8:	d019      	beq.n	61ee <_ZN9ClearCore10UsbManager7RefreshEv+0x34a>
    61ba:	f8d3 902c 	ldr.w	r9, [r3, #44]	; 0x2c
    61be:	f8c4 902c 	str.w	r9, [r4, #44]	; 0x2c
    61c2:	2a0c      	cmp	r2, #12
    61c4:	d013      	beq.n	61ee <_ZN9ClearCore10UsbManager7RefreshEv+0x34a>
    61c6:	f8d3 9030 	ldr.w	r9, [r3, #48]	; 0x30
    61ca:	f8c4 9030 	str.w	r9, [r4, #48]	; 0x30
    61ce:	2a0d      	cmp	r2, #13
    61d0:	d00d      	beq.n	61ee <_ZN9ClearCore10UsbManager7RefreshEv+0x34a>
    61d2:	f8d3 9034 	ldr.w	r9, [r3, #52]	; 0x34
    61d6:	f8c4 9034 	str.w	r9, [r4, #52]	; 0x34
    61da:	2a0e      	cmp	r2, #14
    61dc:	d007      	beq.n	61ee <_ZN9ClearCore10UsbManager7RefreshEv+0x34a>
    61de:	f8d3 9038 	ldr.w	r9, [r3, #56]	; 0x38
    61e2:	f8c4 9038 	str.w	r9, [r4, #56]	; 0x38
    61e6:	2a0f      	cmp	r2, #15
    61e8:	d001      	beq.n	61ee <_ZN9ClearCore10UsbManager7RefreshEv+0x34a>
    61ea:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
    61ec:	63e3      	str	r3, [r4, #60]	; 0x3c
    61ee:	4547      	cmp	r7, r8
    61f0:	eb0c 0308 	add.w	r3, ip, r8
    61f4:	eb06 0408 	add.w	r4, r6, r8
    61f8:	eb0e 0c08 	add.w	ip, lr, r8
    61fc:	f43f af4b 	beq.w	6096 <_ZN9ClearCore10UsbManager7RefreshEv+0x1f2>
    6200:	f81e 7022 	ldrb.w	r7, [lr, r2, lsl #2]
    6204:	f806 7022 	strb.w	r7, [r6, r2, lsl #2]
        for (uint32_t iChar = 0; iChar < count; iChar++) {
    6208:	1c5a      	adds	r2, r3, #1
    620a:	4291      	cmp	r1, r2
    620c:	f67f af43 	bls.w	6096 <_ZN9ClearCore10UsbManager7RefreshEv+0x1f2>
    6210:	3302      	adds	r3, #2
            *outPtr++ = *inPtr++;
    6212:	f89c 2001 	ldrb.w	r2, [ip, #1]
    6216:	7062      	strb	r2, [r4, #1]
        for (uint32_t iChar = 0; iChar < count; iChar++) {
    6218:	4299      	cmp	r1, r3
    621a:	f67f af3c 	bls.w	6096 <_ZN9ClearCore10UsbManager7RefreshEv+0x1f2>
            *outPtr++ = *inPtr++;
    621e:	f89c 3002 	ldrb.w	r3, [ip, #2]
    6222:	70a3      	strb	r3, [r4, #2]
    6224:	e737      	b.n	6096 <_ZN9ClearCore10UsbManager7RefreshEv+0x1f2>
    uint8_t *inPtr = m_bufferOut + head, *outPtr = m_usbWriteBuf;
    6226:	46be      	mov	lr, r7
    6228:	462e      	mov	r6, r5
        for (uint32_t iChar = 0; iChar < count; iChar++) {
    622a:	46a4      	mov	ip, r4
    622c:	e77a      	b.n	6124 <_ZN9ClearCore10UsbManager7RefreshEv+0x280>
    622e:	f04f 0c02 	mov.w	ip, #2
    6232:	e777      	b.n	6124 <_ZN9ClearCore10UsbManager7RefreshEv+0x280>
    uint8_t *inPtr = m_bufferOut + head, *outPtr = m_usbWriteBuf;
    6234:	46b8      	mov	r8, r7
    6236:	46ac      	mov	ip, r5
        for (uint32_t iChar = 0; iChar < loopEnd; iChar++) {
    6238:	9401      	str	r4, [sp, #4]
    623a:	e6a1      	b.n	5f80 <_ZN9ClearCore10UsbManager7RefreshEv+0xdc>
    623c:	2601      	movs	r6, #1
    623e:	9601      	str	r6, [sp, #4]
    6240:	e69e      	b.n	5f80 <_ZN9ClearCore10UsbManager7RefreshEv+0xdc>
        for (uint32_t iChar = 0; iChar < loopEnd; iChar++) {
    6242:	46a4      	mov	ip, r4
    6244:	46b9      	mov	r9, r7
    6246:	e6fa      	b.n	603e <_ZN9ClearCore10UsbManager7RefreshEv+0x19a>
        atomic_clear_seqcst(&m_sendActive);
    6248:	f3bf 8f5b 	dmb	ish
    624c:	f880 2110 	strb.w	r2, [r0, #272]	; 0x110
    6250:	f3bf 8f5b 	dmb	ish
    6254:	e72b      	b.n	60ae <_ZN9ClearCore10UsbManager7RefreshEv+0x20a>
    6256:	f100 03bf 	add.w	r3, r0, #191	; 0xbf
    625a:	187c      	adds	r4, r7, r1
            *outPtr++ = *inPtr++;
    625c:	f817 2b01 	ldrb.w	r2, [r7], #1
    6260:	f803 2f01 	strb.w	r2, [r3, #1]!
        for (uint32_t iChar = 0; iChar < count; iChar++) {
    6264:	42a7      	cmp	r7, r4
    6266:	d1f9      	bne.n	625c <_ZN9ClearCore10UsbManager7RefreshEv+0x3b8>
    6268:	e715      	b.n	6096 <_ZN9ClearCore10UsbManager7RefreshEv+0x1f2>
    626a:	3c01      	subs	r4, #1
    626c:	441a      	add	r2, r3
            *outPtr++ = *inPtr++;
    626e:	f813 6b01 	ldrb.w	r6, [r3], #1
    6272:	f804 6f01 	strb.w	r6, [r4, #1]!
        for (uint32_t iChar = 0; iChar < loopEnd; iChar++) {
    6276:	4293      	cmp	r3, r2
    6278:	d1f9      	bne.n	626e <_ZN9ClearCore10UsbManager7RefreshEv+0x3ca>
    627a:	e70c      	b.n	6096 <_ZN9ClearCore10UsbManager7RefreshEv+0x1f2>
    627c:	f100 04bf 	add.w	r4, r0, #191	; 0xbf
    6280:	eb07 0e02 	add.w	lr, r7, r2
            *outPtr++ = *inPtr++;
    6284:	f817 6b01 	ldrb.w	r6, [r7], #1
    6288:	f804 6f01 	strb.w	r6, [r4, #1]!
        for (uint32_t iChar = 0; iChar < loopEnd; iChar++) {
    628c:	45be      	cmp	lr, r7
    628e:	d1f9      	bne.n	6284 <_ZN9ClearCore10UsbManager7RefreshEv+0x3e0>
    6290:	e6a5      	b.n	5fde <_ZN9ClearCore10UsbManager7RefreshEv+0x13a>
    uint8_t *inPtr = m_bufferOut + head, *outPtr = m_usbWriteBuf;
    6292:	462c      	mov	r4, r5
    6294:	e6a4      	b.n	5fe0 <_ZN9ClearCore10UsbManager7RefreshEv+0x13c>
    6296:	bf00      	nop

00006298 <_GLOBAL__sub_I__ZN9ClearCore6UsbMgrE>:
        }
    }
    __enable_irq();
}

} // ClearCore namespace
    6298:	b508      	push	{r3, lr}
UsbManager &UsbMgr = UsbManager::Instance();
    629a:	f7fe ff85 	bl	51a8 <_ZN9ClearCore10UsbManager8InstanceEv>
    629e:	4b01      	ldr	r3, [pc, #4]	; (62a4 <_GLOBAL__sub_I__ZN9ClearCore6UsbMgrE+0xc>)
    62a0:	6018      	str	r0, [r3, #0]
    62a2:	bd08      	pop	{r3, pc}
    62a4:	20000b84 	.word	0x20000b84

000062a8 <_ZN9ClearCore10SerialBase5SpeedEv>:
    /**
        \copydoc ISerial::Speed()
    **/
    virtual uint32_t Speed() override {
        return m_baudRate;
    }
    62a8:	6a40      	ldr	r0, [r0, #36]	; 0x24
    62aa:	4770      	bx	lr

000062ac <_ZN9ClearCore10SerialBase6ParityEv>:

        \return Returns transmission format enumeration.
    **/
    Parities Parity() override {
        return m_parity;
    }
    62ac:	7900      	ldrb	r0, [r0, #4]
    62ae:	4770      	bx	lr

000062b0 <_ZN9ClearCore10SerialBasecvbEv>:
    /**
        bool operator for compatibility with ISerial
    **/
    operator bool() override {
        return true;
    }
    62b0:	2001      	movs	r0, #1
    62b2:	4770      	bx	lr

000062b4 <_ZN9ClearCore11MotorDriverC1Ev>:

    /**
        \brief Default constructor so this connector can be a global and
        constructed by SysManager.
    **/
    MotorDriver() {};
    62b4:	b510      	push	{r4, lr}
    62b6:	4604      	mov	r4, r0
        Default constructor so this connector can be a global and constructed
        by SysManager

        \note Should not be called by anything other than SysManager
    **/
    DigitalIn() {};
    62b8:	f007 f9f2 	bl	d6a0 <_ZN9ClearCore9ConnectorC1Ev>
    62bc:	4620      	mov	r0, r4
    62be:	4b0c      	ldr	r3, [pc, #48]	; (62f0 <_ZN9ClearCore11MotorDriverC1Ev+0x3c>)
    62c0:	f840 3b30 	str.w	r3, [r0], #48
    62c4:	f004 fa8e 	bl	a7e4 <_ZN9ClearCore13StepGeneratorC1Ev>
    62c8:	4a0a      	ldr	r2, [pc, #40]	; (62f4 <_ZN9ClearCore11MotorDriverC1Ev+0x40>)
    62ca:	6022      	str	r2, [r4, #0]
            reg = 0;
    62cc:	2300      	movs	r3, #0
    MotorDriver() {};
    62ce:	323c      	adds	r2, #60	; 0x3c
            reg = 0;
    62d0:	f8a4 30fc 	strh.w	r3, [r4, #252]	; 0xfc
            reg = 0;
    62d4:	f8c4 3118 	str.w	r3, [r4, #280]	; 0x118
    62d8:	f8c4 311c 	str.w	r3, [r4, #284]	; 0x11c
    62dc:	f8c4 3120 	str.w	r3, [r4, #288]	; 0x120
    62e0:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
            reg = 0;
    62e4:	f8c4 3128 	str.w	r3, [r4, #296]	; 0x128
    MotorDriver() {};
    62e8:	6322      	str	r2, [r4, #48]	; 0x30
    62ea:	4620      	mov	r0, r4
    62ec:	bd10      	pop	{r4, pc}
    62ee:	bf00      	nop
    62f0:	0002d2f8 	.word	0x0002d2f8
    62f4:	0002d3b8 	.word	0x0002d3b8

000062f8 <_ZN9ClearCore10SysManagerC1Ev>:
};

/**
    Constructor
**/
SysManager::SysManager() : m_readyForOperations(false) {
    62f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    XBee = XBeeDriver(&XBee_CTS_IN, &XBee_RTS_OUT, &XBee_Rx_IN, &XBee_Tx_OUT,
    62fc:	4bbf      	ldr	r3, [pc, #764]	; (65fc <_ZN9ClearCore10SysManagerC1Ev+0x304>)
class SerialBase : public ISerial {
    62fe:	f8df a340 	ldr.w	sl, [pc, #832]	; 6640 <_ZN9ClearCore10SysManagerC1Ev+0x348>
    6302:	4abf      	ldr	r2, [pc, #764]	; (6600 <_ZN9ClearCore10SysManagerC1Ev+0x308>)
    6304:	49bf      	ldr	r1, [pc, #764]	; (6604 <_ZN9ClearCore10SysManagerC1Ev+0x30c>)
    6306:	4dc0      	ldr	r5, [pc, #768]	; (6608 <_ZN9ClearCore10SysManagerC1Ev+0x310>)
SysManager::SysManager() : m_readyForOperations(false) {
    6308:	b0df      	sub	sp, #380	; 0x17c
    XBee = XBeeDriver(&XBee_CTS_IN, &XBee_RTS_OUT, &XBee_Rx_IN, &XBee_Tx_OUT,
    630a:	ac08      	add	r4, sp, #32
SysManager::SysManager() : m_readyForOperations(false) {
    630c:	2700      	movs	r7, #0
    XBee = XBeeDriver(&XBee_CTS_IN, &XBee_RTS_OUT, &XBee_Rx_IN, &XBee_Tx_OUT,
    630e:	f04f 0803 	mov.w	r8, #3
SysManager::SysManager() : m_readyForOperations(false) {
    6312:	7007      	strb	r7, [r0, #0]
    6314:	4681      	mov	r9, r0
    XBee = XBeeDriver(&XBee_CTS_IN, &XBee_RTS_OUT, &XBee_Rx_IN, &XBee_Tx_OUT,
    6316:	e88d 0108 	stmia.w	sp, {r3, r8}
    631a:	4620      	mov	r0, r4
    631c:	4bbb      	ldr	r3, [pc, #748]	; (660c <_ZN9ClearCore10SysManagerC1Ev+0x314>)
    631e:	f00b fde3 	bl	11ee8 <_ZN9ClearCore10XBeeDriverC1EPK15PeripheralRouteS3_S3_S3_h>
    6322:	68a1      	ldr	r1, [r4, #8]
    6324:	6862      	ldr	r2, [r4, #4]
    6326:	7b23      	ldrb	r3, [r4, #12]
    6328:	f8ca 1008 	str.w	r1, [sl, #8]
    632c:	f8ca 2004 	str.w	r2, [sl, #4]
    6330:	6921      	ldr	r1, [r4, #16]
    6332:	6962      	ldr	r2, [r4, #20]
    6334:	f88a 300c 	strb.w	r3, [sl, #12]
    6338:	69a3      	ldr	r3, [r4, #24]
    633a:	f8ca 1010 	str.w	r1, [sl, #16]
    633e:	f8ca 2014 	str.w	r2, [sl, #20]
    6342:	69e1      	ldr	r1, [r4, #28]
    6344:	6a22      	ldr	r2, [r4, #32]
    6346:	f8ca 3018 	str.w	r3, [sl, #24]
    634a:	6a63      	ldr	r3, [r4, #36]	; 0x24
    634c:	f8ca 101c 	str.w	r1, [sl, #28]
    6350:	f8ca 2020 	str.w	r2, [sl, #32]
    6354:	f894 1028 	ldrb.w	r1, [r4, #40]	; 0x28
    6358:	f894 2029 	ldrb.w	r2, [r4, #41]	; 0x29
    635c:	f8ca 3024 	str.w	r3, [sl, #36]	; 0x24
    6360:	f894 302a 	ldrb.w	r3, [r4, #42]	; 0x2a
    6364:	f88a 1028 	strb.w	r1, [sl, #40]	; 0x28
    6368:	2680      	movs	r6, #128	; 0x80
    636a:	8da1      	ldrh	r1, [r4, #44]	; 0x2c
    636c:	f88a 2029 	strb.w	r2, [sl, #41]	; 0x29
    6370:	f88a 302a 	strb.w	r3, [sl, #42]	; 0x2a
    6374:	f894 202e 	ldrb.w	r2, [r4, #46]	; 0x2e
    6378:	f894 302f 	ldrb.w	r3, [r4, #47]	; 0x2f
    637c:	f88a 302f 	strb.w	r3, [sl, #47]	; 0x2f
    6380:	f8aa 102c 	strh.w	r1, [sl, #44]	; 0x2c
    6384:	f88a 202e 	strb.w	r2, [sl, #46]	; 0x2e
    6388:	a914      	add	r1, sp, #80	; 0x50
    638a:	4632      	mov	r2, r6
    638c:	f10a 0030 	add.w	r0, sl, #48	; 0x30
    6390:	f021 fc66 	bl	27c60 <memcpy>
    6394:	4632      	mov	r2, r6
    6396:	a934      	add	r1, sp, #208	; 0xd0
    6398:	f10a 00b0 	add.w	r0, sl, #176	; 0xb0
    639c:	f021 fc60 	bl	27c60 <memcpy>
                      PER_SERCOM_ALT);
    SdCard = SdCardDriver(&MicroSD_MISO, &MicroSD_SS, &MicroSD_SCK,
    63a0:	f8cd 8004 	str.w	r8, [sp, #4]
    63a4:	499a      	ldr	r1, [pc, #616]	; (6610 <_ZN9ClearCore10SysManagerC1Ev+0x318>)
    63a6:	f8d4 3130 	ldr.w	r3, [r4, #304]	; 0x130
    63aa:	f8d4 2134 	ldr.w	r2, [r4, #308]	; 0x134
    63ae:	9100      	str	r1, [sp, #0]
    63b0:	f8d4 1138 	ldr.w	r1, [r4, #312]	; 0x138
    63b4:	f8ca 3130 	str.w	r3, [sl, #304]	; 0x130
    63b8:	f8ca 2134 	str.w	r2, [sl, #308]	; 0x134
    63bc:	f8d4 313c 	ldr.w	r3, [r4, #316]	; 0x13c
    63c0:	f8d4 2140 	ldr.w	r2, [r4, #320]	; 0x140
    63c4:	f8ca 1138 	str.w	r1, [sl, #312]	; 0x138
    63c8:	f8ca 2140 	str.w	r2, [sl, #320]	; 0x140
    63cc:	f8ca 313c 	str.w	r3, [sl, #316]	; 0x13c
    63d0:	4620      	mov	r0, r4
    63d2:	4b90      	ldr	r3, [pc, #576]	; (6614 <_ZN9ClearCore10SysManagerC1Ev+0x31c>)
    63d4:	4a90      	ldr	r2, [pc, #576]	; (6618 <_ZN9ClearCore10SysManagerC1Ev+0x320>)
    63d6:	4991      	ldr	r1, [pc, #580]	; (661c <_ZN9ClearCore10SysManagerC1Ev+0x324>)
    63d8:	f009 fe9e 	bl	10118 <_ZN9ClearCore12SdCardDriverC1EPK15PeripheralRouteS3_S3_S3_h>
    63dc:	6863      	ldr	r3, [r4, #4]
    63de:	606b      	str	r3, [r5, #4]
    63e0:	69a3      	ldr	r3, [r4, #24]
    63e2:	68a2      	ldr	r2, [r4, #8]
    63e4:	f894 e00c 	ldrb.w	lr, [r4, #12]
    63e8:	6920      	ldr	r0, [r4, #16]
    63ea:	61ab      	str	r3, [r5, #24]
    63ec:	69e3      	ldr	r3, [r4, #28]
    63ee:	60aa      	str	r2, [r5, #8]
    63f0:	f885 e00c 	strb.w	lr, [r5, #12]
    63f4:	6962      	ldr	r2, [r4, #20]
    63f6:	f894 e028 	ldrb.w	lr, [r4, #40]	; 0x28
    63fa:	6128      	str	r0, [r5, #16]
    63fc:	61eb      	str	r3, [r5, #28]
    63fe:	6a20      	ldr	r0, [r4, #32]
    6400:	f894 3029 	ldrb.w	r3, [r4, #41]	; 0x29
    6404:	f894 c02a 	ldrb.w	ip, [r4, #42]	; 0x2a
    6408:	616a      	str	r2, [r5, #20]
    640a:	6228      	str	r0, [r5, #32]
    640c:	6a62      	ldr	r2, [r4, #36]	; 0x24
    640e:	8da0      	ldrh	r0, [r4, #44]	; 0x2c
    6410:	f885 e028 	strb.w	lr, [r5, #40]	; 0x28
    6414:	f885 3029 	strb.w	r3, [r5, #41]	; 0x29
    6418:	f894 e02e 	ldrb.w	lr, [r4, #46]	; 0x2e
    641c:	f894 302f 	ldrb.w	r3, [r4, #47]	; 0x2f
    6420:	f885 c02a 	strb.w	ip, [r5, #42]	; 0x2a
    6424:	f885 e02e 	strb.w	lr, [r5, #46]	; 0x2e
    6428:	f885 302f 	strb.w	r3, [r5, #47]	; 0x2f
    642c:	a914      	add	r1, sp, #80	; 0x50
    642e:	626a      	str	r2, [r5, #36]	; 0x24
    6430:	85a8      	strh	r0, [r5, #44]	; 0x2c
    6432:	4632      	mov	r2, r6
    6434:	f105 0030 	add.w	r0, r5, #48	; 0x30
    6438:	f021 fc12 	bl	27c60 <memcpy>
    643c:	4632      	mov	r2, r6
    643e:	a934      	add	r1, sp, #208	; 0xd0
    6440:	f105 00b0 	add.w	r0, r5, #176	; 0xb0
    6444:	f021 fc0c 	bl	27c60 <memcpy>
    6448:	f504 7098 	add.w	r0, r4, #304	; 0x130
    644c:	c807      	ldmia	r0, {r0, r1, r2}
    644e:	f8d4 3140 	ldr.w	r3, [r4, #320]	; 0x140
    6452:	f8c5 3140 	str.w	r3, [r5, #320]	; 0x140
    6456:	f8d4 313c 	ldr.w	r3, [r4, #316]	; 0x13c
    645a:	f8c5 0130 	str.w	r0, [r5, #304]	; 0x130
/**
    \brief ClearCore SD card interface

    This class manages access to the micro SD Card reader.
**/
class SdCardDriver : public SerialBase {
    645e:	f894 e144 	ldrb.w	lr, [r4, #324]	; 0x144
    6462:	f8c5 1134 	str.w	r1, [r5, #308]	; 0x134
                          &MicroSD_MOSI, PER_SERCOM_ALT);
    ConnectorLed = LedDriver(ShiftRegister::SR_LED_USB_MASK);
    6466:	4620      	mov	r0, r4
    6468:	f8c5 2138 	str.w	r2, [r5, #312]	; 0x138
    646c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
    6470:	f8c5 313c 	str.w	r3, [r5, #316]	; 0x13c

    ConnectorIO0 = DigitalInOutAnalogOut(ShiftRegister::SR_LED_IO_0_MASK,
    6474:	f04f 0a01 	mov.w	sl, #1
    6478:	f885 e144 	strb.w	lr, [r5, #324]	; 0x144
    ConnectorLed = LedDriver(ShiftRegister::SR_LED_USB_MASK);
    647c:	f00b fada 	bl	11a34 <_ZN9ClearCore9LedDriverC1ENS_13ShiftRegister5MasksE>
    ConnectorIO0 = DigitalInOutAnalogOut(ShiftRegister::SR_LED_IO_0_MASK,
    6480:	4b67      	ldr	r3, [pc, #412]	; (6620 <_ZN9ClearCore10SysManagerC1Ev+0x328>)
    6482:	79a2      	ldrb	r2, [r4, #6]
class Connector {
    6484:	f8b4 c004 	ldrh.w	ip, [r4, #4]
    6488:	4d66      	ldr	r5, [pc, #408]	; (6624 <_ZN9ClearCore10SysManagerC1Ev+0x32c>)
    648a:	f8cd a004 	str.w	sl, [sp, #4]
    648e:	9300      	str	r3, [sp, #0]
    6490:	4631      	mov	r1, r6
    \brief ClearCore LED control class

    This class manages access to the LED shift register so LEDs may be
    controlled at the connector level.
**/
class LedDriver : public Connector {
    6492:	68a6      	ldr	r6, [r4, #8]
    6494:	71aa      	strb	r2, [r5, #6]
    6496:	f8a5 c004 	strh.w	ip, [r5, #4]
    649a:	60ae      	str	r6, [r5, #8]
    649c:	4620      	mov	r0, r4
    649e:	4b62      	ldr	r3, [pc, #392]	; (6628 <_ZN9ClearCore10SysManagerC1Ev+0x330>)
    64a0:	4a62      	ldr	r2, [pc, #392]	; (662c <_ZN9ClearCore10SysManagerC1Ev+0x334>)
    64a2:	4d63      	ldr	r5, [pc, #396]	; (6630 <_ZN9ClearCore10SysManagerC1Ev+0x338>)
    64a4:	f006 f930 	bl	c708 <_ZN9ClearCore21DigitalInOutAnalogOutC1ENS_13ShiftRegister5MasksEPK15PeripheralRouteS5_S5_b>
class DigitalIn : public Connector {
    64a8:	f104 000c 	add.w	r0, r4, #12
    64ac:	c807      	ldmia	r0, {r0, r1, r2}
    64ae:	f894 e006 	ldrb.w	lr, [r4, #6]
    64b2:	68a3      	ldr	r3, [r4, #8]
    64b4:	88a6      	ldrh	r6, [r4, #4]
    64b6:	f885 e006 	strb.w	lr, [r5, #6]
    64ba:	60ab      	str	r3, [r5, #8]
    64bc:	f894 e018 	ldrb.w	lr, [r4, #24]
    64c0:	69e3      	ldr	r3, [r4, #28]
    64c2:	60e8      	str	r0, [r5, #12]
    64c4:	6a20      	ldr	r0, [r4, #32]
    64c6:	f894 c028 	ldrb.w	ip, [r4, #40]	; 0x28
    64ca:	80ae      	strh	r6, [r5, #4]
    64cc:	6129      	str	r1, [r5, #16]
    64ce:	7e66      	ldrb	r6, [r4, #25]
    64d0:	6a61      	ldr	r1, [r4, #36]	; 0x24
    64d2:	616a      	str	r2, [r5, #20]
    64d4:	f885 e018 	strb.w	lr, [r5, #24]
    - #ConnectorIO5

    For more detailed information on the ClearCore Connector interface, check
    out the \ref ConnectorMain informational page.
**/
class DigitalInOut : public DigitalIn {
    64d8:	6b22      	ldr	r2, [r4, #48]	; 0x30
    64da:	f8d4 e02a 	ldr.w	lr, [r4, #42]	; 0x2a
    64de:	61eb      	str	r3, [r5, #28]
    64e0:	6228      	str	r0, [r5, #32]
    64e2:	6b63      	ldr	r3, [r4, #52]	; 0x34
    64e4:	6ba0      	ldr	r0, [r4, #56]	; 0x38
    64e6:	766e      	strb	r6, [r5, #25]
    64e8:	6269      	str	r1, [r5, #36]	; 0x24
    64ea:	f885 c028 	strb.w	ip, [r5, #40]	; 0x28
    64ee:	f8c5 e02a 	str.w	lr, [r5, #42]	; 0x2a
    64f2:	632a      	str	r2, [r5, #48]	; 0x30
    64f4:	63a8      	str	r0, [r5, #56]	; 0x38
    64f6:	636b      	str	r3, [r5, #52]	; 0x34
    64f8:	f894 303c 	ldrb.w	r3, [r4, #60]	; 0x3c
    64fc:	f894 003d 	ldrb.w	r0, [r4, #61]	; 0x3d
    6500:	6c21      	ldr	r1, [r4, #64]	; 0x40
    6502:	f894 e044 	ldrb.w	lr, [r4, #68]	; 0x44
    6506:	f894 6045 	ldrb.w	r6, [r4, #69]	; 0x45
    650a:	6ca2      	ldr	r2, [r4, #72]	; 0x48
    650c:	f885 303c 	strb.w	r3, [r5, #60]	; 0x3c
    6510:	f885 003d 	strb.w	r0, [r5, #61]	; 0x3d
    6514:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
    6516:	6d20      	ldr	r0, [r4, #80]	; 0x50
    6518:	f894 c058 	ldrb.w	ip, [r4, #88]	; 0x58
    651c:	f894 b05b 	ldrb.w	fp, [r4, #91]	; 0x5b
    6520:	6429      	str	r1, [r5, #64]	; 0x40
    6522:	f885 e044 	strb.w	lr, [r5, #68]	; 0x44
    6526:	6d61      	ldr	r1, [r4, #84]	; 0x54
    6528:	f894 e059 	ldrb.w	lr, [r4, #89]	; 0x59
    652c:	f885 6045 	strb.w	r6, [r5, #69]	; 0x45
    6530:	64aa      	str	r2, [r5, #72]	; 0x48
    6532:	f894 605a 	ldrb.w	r6, [r4, #90]	; 0x5a
    - #ConnectorIO0

    For more detailed information on the ClearCore Connector interface, check
    out the \ref ConnectorMain informational page.
**/
class DigitalInOutAnalogOut : public DigitalInOut {
    6536:	6e22      	ldr	r2, [r4, #96]	; 0x60
    6538:	64eb      	str	r3, [r5, #76]	; 0x4c
    653a:	6528      	str	r0, [r5, #80]	; 0x50
    653c:	6e63      	ldr	r3, [r4, #100]	; 0x64
    653e:	f8b4 005c 	ldrh.w	r0, [r4, #92]	; 0x5c
    6542:	f885 c058 	strb.w	ip, [r5, #88]	; 0x58
    6546:	f885 e059 	strb.w	lr, [r5, #89]	; 0x59
    654a:	f885 605a 	strb.w	r6, [r5, #90]	; 0x5a
    654e:	f885 b05b 	strb.w	fp, [r5, #91]	; 0x5b
    6552:	f8a5 005c 	strh.w	r0, [r5, #92]	; 0x5c
    6556:	662a      	str	r2, [r5, #96]	; 0x60
    6558:	666b      	str	r3, [r5, #100]	; 0x64
    655a:	6569      	str	r1, [r5, #84]	; 0x54
    655c:	6ea1      	ldr	r1, [r4, #104]	; 0x68
                                         &IN00n_Aout00n, &OUT00, &Aout00, true);
    ConnectorIO1 = DigitalInOut(ShiftRegister::SR_LED_IO_1_MASK, &IN01n,
    655e:	4b35      	ldr	r3, [pc, #212]	; (6634 <_ZN9ClearCore10SysManagerC1Ev+0x33c>)
    6560:	f8cd a000 	str.w	sl, [sp]
    6564:	4620      	mov	r0, r4
    6566:	66a9      	str	r1, [r5, #104]	; 0x68
    6568:	4a33      	ldr	r2, [pc, #204]	; (6638 <_ZN9ClearCore10SysManagerC1Ev+0x340>)
    656a:	4d34      	ldr	r5, [pc, #208]	; (663c <_ZN9ClearCore10SysManagerC1Ev+0x344>)
    656c:	2140      	movs	r1, #64	; 0x40
    656e:	f006 fdd1 	bl	d114 <_ZN9ClearCore12DigitalInOutC1ENS_13ShiftRegister5MasksEPK15PeripheralRouteS5_b>
    6572:	f894 e006 	ldrb.w	lr, [r4, #6]
    6576:	68a2      	ldr	r2, [r4, #8]
    6578:	68e3      	ldr	r3, [r4, #12]
    657a:	88a6      	ldrh	r6, [r4, #4]
    657c:	6920      	ldr	r0, [r4, #16]
    657e:	6961      	ldr	r1, [r4, #20]
    6580:	f885 e006 	strb.w	lr, [r5, #6]
    6584:	60aa      	str	r2, [r5, #8]
    6586:	f894 e018 	ldrb.w	lr, [r4, #24]
    658a:	69e2      	ldr	r2, [r4, #28]
    658c:	60eb      	str	r3, [r5, #12]
    658e:	6a23      	ldr	r3, [r4, #32]
    6590:	f894 c028 	ldrb.w	ip, [r4, #40]	; 0x28
    6594:	80ae      	strh	r6, [r5, #4]
    6596:	6128      	str	r0, [r5, #16]
    6598:	7e66      	ldrb	r6, [r4, #25]
    659a:	6a60      	ldr	r0, [r4, #36]	; 0x24
    659c:	6169      	str	r1, [r5, #20]
    659e:	f885 e018 	strb.w	lr, [r5, #24]
    65a2:	6b21      	ldr	r1, [r4, #48]	; 0x30
    65a4:	f8d4 e02a 	ldr.w	lr, [r4, #42]	; 0x2a
    65a8:	61ea      	str	r2, [r5, #28]
    65aa:	622b      	str	r3, [r5, #32]
    65ac:	6b62      	ldr	r2, [r4, #52]	; 0x34
    65ae:	6ba3      	ldr	r3, [r4, #56]	; 0x38
    65b0:	f885 c028 	strb.w	ip, [r5, #40]	; 0x28
    65b4:	766e      	strb	r6, [r5, #25]
    65b6:	6268      	str	r0, [r5, #36]	; 0x24
    65b8:	6329      	str	r1, [r5, #48]	; 0x30
    65ba:	636a      	str	r2, [r5, #52]	; 0x34
    65bc:	63ab      	str	r3, [r5, #56]	; 0x38
    65be:	f8c5 e02a 	str.w	lr, [r5, #42]	; 0x2a
    65c2:	f894 e03c 	ldrb.w	lr, [r4, #60]	; 0x3c
                                &OUT01, true);
    ConnectorIO2 = DigitalInOut(ShiftRegister::SR_LED_IO_2_MASK, &IN02n,
    65c6:	f8cd a000 	str.w	sl, [sp]
    65ca:	f894 6044 	ldrb.w	r6, [r4, #68]	; 0x44
    65ce:	f894 103d 	ldrb.w	r1, [r4, #61]	; 0x3d
    65d2:	6c22      	ldr	r2, [r4, #64]	; 0x40
    65d4:	f885 e03c 	strb.w	lr, [r5, #60]	; 0x3c
    65d8:	f885 6044 	strb.w	r6, [r5, #68]	; 0x44
    65dc:	f894 e045 	ldrb.w	lr, [r4, #69]	; 0x45
    65e0:	6d26      	ldr	r6, [r4, #80]	; 0x50
    65e2:	f885 103d 	strb.w	r1, [r5, #61]	; 0x3d
    65e6:	642a      	str	r2, [r5, #64]	; 0x40
    65e8:	6ca1      	ldr	r1, [r4, #72]	; 0x48
    65ea:	6ce2      	ldr	r2, [r4, #76]	; 0x4c
    65ec:	f885 e045 	strb.w	lr, [r5, #69]	; 0x45
    65f0:	652e      	str	r6, [r5, #80]	; 0x50
    65f2:	f894 e058 	ldrb.w	lr, [r4, #88]	; 0x58
    65f6:	6d66      	ldr	r6, [r4, #84]	; 0x54
    65f8:	64a9      	str	r1, [r5, #72]	; 0x48
    65fa:	e023      	b.n	6644 <_ZN9ClearCore10SysManagerC1Ev+0x34c>
    65fc:	0002ceb0 	.word	0x0002ceb0
    6600:	0002cf10 	.word	0x0002cf10
    6604:	0002cea0 	.word	0x0002cea0
    6608:	20001934 	.word	0x20001934
    660c:	0002cdd0 	.word	0x0002cdd0
    6610:	0002cef0 	.word	0x0002cef0
    6614:	0002ce90 	.word	0x0002ce90
    6618:	0002cdc0 	.word	0x0002cdc0
    661c:	0002cee0 	.word	0x0002cee0
    6620:	0002d0b0 	.word	0x0002d0b0
    6624:	20001524 	.word	0x20001524
    6628:	0002d070 	.word	0x0002d070
    662c:	0002cf40 	.word	0x0002cf40
    6630:	20001290 	.word	0x20001290
    6634:	0002d080 	.word	0x0002d080
    6638:	0002d020 	.word	0x0002d020
    663c:	200012fc 	.word	0x200012fc
    6640:	200017f0 	.word	0x200017f0
    6644:	64ea      	str	r2, [r5, #76]	; 0x4c
    6646:	f894 105a 	ldrb.w	r1, [r4, #90]	; 0x5a
    664a:	f894 2059 	ldrb.w	r2, [r4, #89]	; 0x59
    664e:	656e      	str	r6, [r5, #84]	; 0x54
    6650:	f885 e058 	strb.w	lr, [r5, #88]	; 0x58
    6654:	f894 605b 	ldrb.w	r6, [r4, #91]	; 0x5b
    6658:	f8b4 e05c 	ldrh.w	lr, [r4, #92]	; 0x5c
    665c:	f885 2059 	strb.w	r2, [r5, #89]	; 0x59
    6660:	f885 105a 	strb.w	r1, [r5, #90]	; 0x5a
    6664:	f885 605b 	strb.w	r6, [r5, #91]	; 0x5b
    6668:	f8a5 e05c 	strh.w	lr, [r5, #92]	; 0x5c
    666c:	4620      	mov	r0, r4
    666e:	4db9      	ldr	r5, [pc, #740]	; (6954 <_ZN9ClearCore10SysManagerC1Ev+0x65c>)
    6670:	4bb9      	ldr	r3, [pc, #740]	; (6958 <_ZN9ClearCore10SysManagerC1Ev+0x660>)
    6672:	4aba      	ldr	r2, [pc, #744]	; (695c <_ZN9ClearCore10SysManagerC1Ev+0x664>)
    6674:	2120      	movs	r1, #32
    6676:	f006 fd4d 	bl	d114 <_ZN9ClearCore12DigitalInOutC1ENS_13ShiftRegister5MasksEPK15PeripheralRouteS5_b>
    667a:	f894 e006 	ldrb.w	lr, [r4, #6]
    667e:	68a2      	ldr	r2, [r4, #8]
    6680:	68e3      	ldr	r3, [r4, #12]
    6682:	88a6      	ldrh	r6, [r4, #4]
    6684:	6920      	ldr	r0, [r4, #16]
    6686:	6961      	ldr	r1, [r4, #20]
    6688:	f885 e006 	strb.w	lr, [r5, #6]
    668c:	60aa      	str	r2, [r5, #8]
    668e:	f894 e018 	ldrb.w	lr, [r4, #24]
    6692:	69e2      	ldr	r2, [r4, #28]
    6694:	60eb      	str	r3, [r5, #12]
    6696:	6a23      	ldr	r3, [r4, #32]
    6698:	f894 c028 	ldrb.w	ip, [r4, #40]	; 0x28
    669c:	80ae      	strh	r6, [r5, #4]
    669e:	6128      	str	r0, [r5, #16]
    66a0:	7e66      	ldrb	r6, [r4, #25]
    66a2:	6a60      	ldr	r0, [r4, #36]	; 0x24
    66a4:	6169      	str	r1, [r5, #20]
    66a6:	f885 e018 	strb.w	lr, [r5, #24]
    66aa:	6b21      	ldr	r1, [r4, #48]	; 0x30
    66ac:	f8d4 e02a 	ldr.w	lr, [r4, #42]	; 0x2a
    66b0:	61ea      	str	r2, [r5, #28]
    66b2:	622b      	str	r3, [r5, #32]
    66b4:	6b62      	ldr	r2, [r4, #52]	; 0x34
    66b6:	6ba3      	ldr	r3, [r4, #56]	; 0x38
    66b8:	f885 c028 	strb.w	ip, [r5, #40]	; 0x28
    66bc:	766e      	strb	r6, [r5, #25]
    66be:	6268      	str	r0, [r5, #36]	; 0x24
    66c0:	6329      	str	r1, [r5, #48]	; 0x30
    66c2:	636a      	str	r2, [r5, #52]	; 0x34
    66c4:	63ab      	str	r3, [r5, #56]	; 0x38
    66c6:	f8c5 e02a 	str.w	lr, [r5, #42]	; 0x2a
    66ca:	f894 e03c 	ldrb.w	lr, [r4, #60]	; 0x3c
                                &OUT02, true);
    ConnectorIO3 = DigitalInOut(ShiftRegister::SR_LED_IO_3_MASK, &IN03n,
    66ce:	f8cd a000 	str.w	sl, [sp]
    66d2:	f894 6044 	ldrb.w	r6, [r4, #68]	; 0x44
    66d6:	f894 103d 	ldrb.w	r1, [r4, #61]	; 0x3d
    66da:	6c22      	ldr	r2, [r4, #64]	; 0x40
    66dc:	f885 e03c 	strb.w	lr, [r5, #60]	; 0x3c
    66e0:	f885 6044 	strb.w	r6, [r5, #68]	; 0x44
    66e4:	f894 e045 	ldrb.w	lr, [r4, #69]	; 0x45
    66e8:	6d26      	ldr	r6, [r4, #80]	; 0x50
    66ea:	f885 103d 	strb.w	r1, [r5, #61]	; 0x3d
    66ee:	642a      	str	r2, [r5, #64]	; 0x40
    66f0:	6ca1      	ldr	r1, [r4, #72]	; 0x48
    66f2:	6ce2      	ldr	r2, [r4, #76]	; 0x4c
    66f4:	f885 e045 	strb.w	lr, [r5, #69]	; 0x45
    66f8:	652e      	str	r6, [r5, #80]	; 0x50
    66fa:	f894 e058 	ldrb.w	lr, [r4, #88]	; 0x58
    66fe:	6d66      	ldr	r6, [r4, #84]	; 0x54
    6700:	64a9      	str	r1, [r5, #72]	; 0x48
    6702:	64ea      	str	r2, [r5, #76]	; 0x4c
    6704:	f894 105a 	ldrb.w	r1, [r4, #90]	; 0x5a
    6708:	f894 2059 	ldrb.w	r2, [r4, #89]	; 0x59
    670c:	656e      	str	r6, [r5, #84]	; 0x54
    670e:	f885 e058 	strb.w	lr, [r5, #88]	; 0x58
    6712:	f894 605b 	ldrb.w	r6, [r4, #91]	; 0x5b
    6716:	f8b4 e05c 	ldrh.w	lr, [r4, #92]	; 0x5c
    671a:	f885 2059 	strb.w	r2, [r5, #89]	; 0x59
    671e:	f885 105a 	strb.w	r1, [r5, #90]	; 0x5a
    6722:	f885 605b 	strb.w	r6, [r5, #91]	; 0x5b
    6726:	f8a5 e05c 	strh.w	lr, [r5, #92]	; 0x5c
    672a:	4620      	mov	r0, r4
    672c:	4d8c      	ldr	r5, [pc, #560]	; (6960 <_ZN9ClearCore10SysManagerC1Ev+0x668>)
    672e:	4b8d      	ldr	r3, [pc, #564]	; (6964 <_ZN9ClearCore10SysManagerC1Ev+0x66c>)
    6730:	4a8d      	ldr	r2, [pc, #564]	; (6968 <_ZN9ClearCore10SysManagerC1Ev+0x670>)
    6732:	2110      	movs	r1, #16
    6734:	f006 fcee 	bl	d114 <_ZN9ClearCore12DigitalInOutC1ENS_13ShiftRegister5MasksEPK15PeripheralRouteS5_b>
    6738:	f8b4 e004 	ldrh.w	lr, [r4, #4]
    673c:	68a2      	ldr	r2, [r4, #8]
    673e:	68e3      	ldr	r3, [r4, #12]
    6740:	79a6      	ldrb	r6, [r4, #6]
    6742:	6920      	ldr	r0, [r4, #16]
    6744:	6961      	ldr	r1, [r4, #20]
    6746:	f8a5 e004 	strh.w	lr, [r5, #4]
    674a:	60aa      	str	r2, [r5, #8]
    674c:	f894 e018 	ldrb.w	lr, [r4, #24]
    6750:	69e2      	ldr	r2, [r4, #28]
    6752:	60eb      	str	r3, [r5, #12]
    6754:	6a23      	ldr	r3, [r4, #32]
    6756:	f894 c028 	ldrb.w	ip, [r4, #40]	; 0x28
    675a:	71ae      	strb	r6, [r5, #6]
    675c:	6128      	str	r0, [r5, #16]
    675e:	7e66      	ldrb	r6, [r4, #25]
    6760:	6a60      	ldr	r0, [r4, #36]	; 0x24
    6762:	6169      	str	r1, [r5, #20]
    6764:	f885 e018 	strb.w	lr, [r5, #24]
    6768:	6b21      	ldr	r1, [r4, #48]	; 0x30
    676a:	f8d4 e02a 	ldr.w	lr, [r4, #42]	; 0x2a
    676e:	61ea      	str	r2, [r5, #28]
    6770:	622b      	str	r3, [r5, #32]
    6772:	6b62      	ldr	r2, [r4, #52]	; 0x34
    6774:	6ba3      	ldr	r3, [r4, #56]	; 0x38
    6776:	766e      	strb	r6, [r5, #25]
    6778:	6268      	str	r0, [r5, #36]	; 0x24
    677a:	f885 c028 	strb.w	ip, [r5, #40]	; 0x28
    677e:	f8c5 e02a 	str.w	lr, [r5, #42]	; 0x2a
    6782:	636a      	str	r2, [r5, #52]	; 0x34
    6784:	63ab      	str	r3, [r5, #56]	; 0x38
    6786:	6329      	str	r1, [r5, #48]	; 0x30
    6788:	f894 103c 	ldrb.w	r1, [r4, #60]	; 0x3c
    678c:	f885 103c 	strb.w	r1, [r5, #60]	; 0x3c
    6790:	f894 203d 	ldrb.w	r2, [r4, #61]	; 0x3d
    6794:	6c23      	ldr	r3, [r4, #64]	; 0x40
    6796:	f894 c044 	ldrb.w	ip, [r4, #68]	; 0x44
    679a:	f894 0045 	ldrb.w	r0, [r4, #69]	; 0x45
                                &OUT03, true);

    ConnectorIO4 = DigitalInOutHBridge(ShiftRegister::SR_LED_IO_4_MASK, &IN04n,
    679e:	9703      	str	r7, [sp, #12]
    67a0:	6ca1      	ldr	r1, [r4, #72]	; 0x48
    67a2:	f885 203d 	strb.w	r2, [r5, #61]	; 0x3d
    67a6:	642b      	str	r3, [r5, #64]	; 0x40
    67a8:	6ce2      	ldr	r2, [r4, #76]	; 0x4c
    67aa:	6d23      	ldr	r3, [r4, #80]	; 0x50
    67ac:	64a9      	str	r1, [r5, #72]	; 0x48
    67ae:	f894 1058 	ldrb.w	r1, [r4, #88]	; 0x58
    67b2:	f885 c044 	strb.w	ip, [r5, #68]	; 0x44
    67b6:	f885 0045 	strb.w	r0, [r5, #69]	; 0x45
    67ba:	f894 c059 	ldrb.w	ip, [r4, #89]	; 0x59
    67be:	6d60      	ldr	r0, [r4, #84]	; 0x54
    67c0:	64ea      	str	r2, [r5, #76]	; 0x4c
    67c2:	652b      	str	r3, [r5, #80]	; 0x50
    67c4:	f894 205b 	ldrb.w	r2, [r4, #91]	; 0x5b
    67c8:	f894 305a 	ldrb.w	r3, [r4, #90]	; 0x5a
    67cc:	f885 1058 	strb.w	r1, [r5, #88]	; 0x58
    67d0:	f8b4 105c 	ldrh.w	r1, [r4, #92]	; 0x5c
    67d4:	6568      	str	r0, [r5, #84]	; 0x54
    67d6:	f885 c059 	strb.w	ip, [r5, #89]	; 0x59
    67da:	f885 305a 	strb.w	r3, [r5, #90]	; 0x5a
    67de:	f885 205b 	strb.w	r2, [r5, #91]	; 0x5b
    67e2:	f8a5 105c 	strh.w	r1, [r5, #92]	; 0x5c
    67e6:	f04f 0e68 	mov.w	lr, #104	; 0x68
    67ea:	4d60      	ldr	r5, [pc, #384]	; (696c <_ZN9ClearCore10SysManagerC1Ev+0x674>)
    67ec:	f8df c19c 	ldr.w	ip, [pc, #412]	; 698c <_ZN9ClearCore10SysManagerC1Ev+0x694>
    67f0:	4e5f      	ldr	r6, [pc, #380]	; (6970 <_ZN9ClearCore10SysManagerC1Ev+0x678>)
    67f2:	4b60      	ldr	r3, [pc, #384]	; (6974 <_ZN9ClearCore10SysManagerC1Ev+0x67c>)
    67f4:	4a60      	ldr	r2, [pc, #384]	; (6978 <_ZN9ClearCore10SysManagerC1Ev+0x680>)
    67f6:	f8cd e008 	str.w	lr, [sp, #8]
    67fa:	4620      	mov	r0, r4
    67fc:	2108      	movs	r1, #8
    67fe:	9601      	str	r6, [sp, #4]
    6800:	f8cd c000 	str.w	ip, [sp]
    6804:	f006 ffe2 	bl	d7cc <_ZN9ClearCore19DigitalInOutHBridgeC1ENS_13ShiftRegister5MasksEPK15PeripheralRouteS5_S5_S5_4IRQnb>
    6808:	f8b4 e004 	ldrh.w	lr, [r4, #4]
    680c:	68a2      	ldr	r2, [r4, #8]
    680e:	68e3      	ldr	r3, [r4, #12]
    6810:	79a6      	ldrb	r6, [r4, #6]
    6812:	6920      	ldr	r0, [r4, #16]
    6814:	6961      	ldr	r1, [r4, #20]
    6816:	f8a5 e004 	strh.w	lr, [r5, #4]
    681a:	60aa      	str	r2, [r5, #8]
    681c:	f894 e018 	ldrb.w	lr, [r4, #24]
    6820:	69e2      	ldr	r2, [r4, #28]
    6822:	60eb      	str	r3, [r5, #12]
    6824:	6a23      	ldr	r3, [r4, #32]
    6826:	f894 c028 	ldrb.w	ip, [r4, #40]	; 0x28
    682a:	71ae      	strb	r6, [r5, #6]
    682c:	6128      	str	r0, [r5, #16]
    682e:	7e66      	ldrb	r6, [r4, #25]
    6830:	6a60      	ldr	r0, [r4, #36]	; 0x24
    6832:	6169      	str	r1, [r5, #20]
    6834:	f885 e018 	strb.w	lr, [r5, #24]
    6838:	6b21      	ldr	r1, [r4, #48]	; 0x30
    683a:	f8d4 e02a 	ldr.w	lr, [r4, #42]	; 0x2a
    683e:	61ea      	str	r2, [r5, #28]
    6840:	622b      	str	r3, [r5, #32]
    6842:	6b62      	ldr	r2, [r4, #52]	; 0x34
    6844:	6ba3      	ldr	r3, [r4, #56]	; 0x38
    6846:	766e      	strb	r6, [r5, #25]
    6848:	f885 c028 	strb.w	ip, [r5, #40]	; 0x28
    684c:	f8c5 e02a 	str.w	lr, [r5, #42]	; 0x2a
    6850:	6329      	str	r1, [r5, #48]	; 0x30
    6852:	636a      	str	r2, [r5, #52]	; 0x34
    6854:	63ab      	str	r3, [r5, #56]	; 0x38
    6856:	6268      	str	r0, [r5, #36]	; 0x24
    6858:	f894 003c 	ldrb.w	r0, [r4, #60]	; 0x3c
    685c:	f894 2044 	ldrb.w	r2, [r4, #68]	; 0x44
    6860:	f894 103d 	ldrb.w	r1, [r4, #61]	; 0x3d
    6864:	6c23      	ldr	r3, [r4, #64]	; 0x40
    6866:	f885 003c 	strb.w	r0, [r5, #60]	; 0x3c
    686a:	f885 2044 	strb.w	r2, [r5, #68]	; 0x44
    686e:	6ca0      	ldr	r0, [r4, #72]	; 0x48
    6870:	6d22      	ldr	r2, [r4, #80]	; 0x50
    6872:	f894 6045 	ldrb.w	r6, [r4, #69]	; 0x45
    6876:	f885 103d 	strb.w	r1, [r5, #61]	; 0x3d
    687a:	642b      	str	r3, [r5, #64]	; 0x40
    687c:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
    687e:	6d63      	ldr	r3, [r4, #84]	; 0x54
    6880:	64a8      	str	r0, [r5, #72]	; 0x48
    6882:	652a      	str	r2, [r5, #80]	; 0x50
    6884:	f894 0059 	ldrb.w	r0, [r4, #89]	; 0x59
    6888:	f894 205a 	ldrb.w	r2, [r4, #90]	; 0x5a
    688c:	f885 6045 	strb.w	r6, [r5, #69]	; 0x45
    6890:	64e9      	str	r1, [r5, #76]	; 0x4c
    6892:	f894 6058 	ldrb.w	r6, [r4, #88]	; 0x58
    6896:	f8b4 105c 	ldrh.w	r1, [r4, #92]	; 0x5c
    689a:	656b      	str	r3, [r5, #84]	; 0x54
    689c:	f885 0059 	strb.w	r0, [r5, #89]	; 0x59
    68a0:	f894 305b 	ldrb.w	r3, [r4, #91]	; 0x5b

    \note If overloaded, these connectors will need to be reset using the
    StatusManager::HBridgeReset function. This applies when running in H-bridge
    mode or digital input/output modes.
**/
class DigitalInOutHBridge : public DigitalInOut {
    68a4:	f8b4 005e 	ldrh.w	r0, [r4, #94]	; 0x5e
    68a8:	f885 205a 	strb.w	r2, [r5, #90]	; 0x5a
                                       &OUT04_ENABLE04, &Polarity04_PWM04A,
                                       &Polarity04S_PWM04B, TCC4_0_IRQn, false);
    ConnectorIO5 = DigitalInOutHBridge(ShiftRegister::SR_LED_IO_5_MASK, &IN05n,
    68ac:	f04f 0c65 	mov.w	ip, #101	; 0x65
    68b0:	f8b4 2060 	ldrh.w	r2, [r4, #96]	; 0x60
    68b4:	f885 305b 	strb.w	r3, [r5, #91]	; 0x5b
    68b8:	f8a5 105c 	strh.w	r1, [r5, #92]	; 0x5c
    68bc:	f8a5 005e 	strh.w	r0, [r5, #94]	; 0x5e
    68c0:	f8a5 2060 	strh.w	r2, [r5, #96]	; 0x60
    68c4:	f8df e0c8 	ldr.w	lr, [pc, #200]	; 6990 <_ZN9ClearCore10SysManagerC1Ev+0x698>
    68c8:	f885 6058 	strb.w	r6, [r5, #88]	; 0x58
    68cc:	f8b4 6062 	ldrh.w	r6, [r4, #98]	; 0x62
    68d0:	9703      	str	r7, [sp, #12]
    68d2:	f8cd c008 	str.w	ip, [sp, #8]
    68d6:	6e61      	ldr	r1, [r4, #100]	; 0x64
    68d8:	4b28      	ldr	r3, [pc, #160]	; (697c <_ZN9ClearCore10SysManagerC1Ev+0x684>)
    68da:	f8cd e004 	str.w	lr, [sp, #4]
    68de:	6ea2      	ldr	r2, [r4, #104]	; 0x68
    68e0:	9300      	str	r3, [sp, #0]
    68e2:	f894 e070 	ldrb.w	lr, [r4, #112]	; 0x70
    68e6:	f8a5 6062 	strh.w	r6, [r5, #98]	; 0x62
    68ea:	6f66      	ldr	r6, [r4, #116]	; 0x74
    68ec:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
    68ee:	f8b4 c080 	ldrh.w	ip, [r4, #128]	; 0x80
    68f2:	6669      	str	r1, [r5, #100]	; 0x64
    68f4:	66aa      	str	r2, [r5, #104]	; 0x68
    68f6:	6fa1      	ldr	r1, [r4, #120]	; 0x78
    68f8:	6fe2      	ldr	r2, [r4, #124]	; 0x7c
    68fa:	f885 e070 	strb.w	lr, [r5, #112]	; 0x70
    68fe:	676e      	str	r6, [r5, #116]	; 0x74
    6900:	f894 e082 	ldrb.w	lr, [r4, #130]	; 0x82
    6904:	f894 6083 	ldrb.w	r6, [r4, #131]	; 0x83
    6908:	66eb      	str	r3, [r5, #108]	; 0x6c
    690a:	67a9      	str	r1, [r5, #120]	; 0x78
    690c:	67ea      	str	r2, [r5, #124]	; 0x7c
    690e:	f8a5 c080 	strh.w	ip, [r5, #128]	; 0x80
    6912:	f885 e082 	strb.w	lr, [r5, #130]	; 0x82
    6916:	f885 6083 	strb.w	r6, [r5, #131]	; 0x83
    691a:	4620      	mov	r0, r4
    691c:	4b18      	ldr	r3, [pc, #96]	; (6980 <_ZN9ClearCore10SysManagerC1Ev+0x688>)
    691e:	4a19      	ldr	r2, [pc, #100]	; (6984 <_ZN9ClearCore10SysManagerC1Ev+0x68c>)
    6920:	4d19      	ldr	r5, [pc, #100]	; (6988 <_ZN9ClearCore10SysManagerC1Ev+0x690>)
    6922:	2104      	movs	r1, #4
    6924:	f006 ff52 	bl	d7cc <_ZN9ClearCore19DigitalInOutHBridgeC1ENS_13ShiftRegister5MasksEPK15PeripheralRouteS5_S5_S5_4IRQnb>
    6928:	f104 000c 	add.w	r0, r4, #12
    692c:	c807      	ldmia	r0, {r0, r1, r2}
    692e:	f8b4 e004 	ldrh.w	lr, [r4, #4]
    6932:	68a3      	ldr	r3, [r4, #8]
    6934:	79a6      	ldrb	r6, [r4, #6]
    6936:	f8a5 e004 	strh.w	lr, [r5, #4]
    693a:	60ab      	str	r3, [r5, #8]
    693c:	f894 e018 	ldrb.w	lr, [r4, #24]
    6940:	69e3      	ldr	r3, [r4, #28]
    6942:	60e8      	str	r0, [r5, #12]
    6944:	6a20      	ldr	r0, [r4, #32]
    6946:	f894 c028 	ldrb.w	ip, [r4, #40]	; 0x28
    694a:	71ae      	strb	r6, [r5, #6]
    694c:	6129      	str	r1, [r5, #16]
    694e:	7e66      	ldrb	r6, [r4, #25]
    6950:	6a61      	ldr	r1, [r4, #36]	; 0x24
    6952:	e01f      	b.n	6994 <_ZN9ClearCore10SysManagerC1Ev+0x69c>
    6954:	2000135c 	.word	0x2000135c
    6958:	0002d090 	.word	0x0002d090
    695c:	0002d030 	.word	0x0002d030
    6960:	200013bc 	.word	0x200013bc
    6964:	0002d0a0 	.word	0x0002d0a0
    6968:	0002d040 	.word	0x0002d040
    696c:	2000141c 	.word	0x2000141c
    6970:	0002cfc0 	.word	0x0002cfc0
    6974:	0002cf60 	.word	0x0002cf60
    6978:	0002d050 	.word	0x0002d050
    697c:	0002cf90 	.word	0x0002cf90
    6980:	0002cf70 	.word	0x0002cf70
    6984:	0002d060 	.word	0x0002d060
    6988:	200014a0 	.word	0x200014a0
    698c:	0002cf80 	.word	0x0002cf80
    6990:	0002cfd0 	.word	0x0002cfd0
    6994:	616a      	str	r2, [r5, #20]
    6996:	f885 e018 	strb.w	lr, [r5, #24]
    699a:	6b22      	ldr	r2, [r4, #48]	; 0x30
    699c:	f8d4 e02a 	ldr.w	lr, [r4, #42]	; 0x2a
    69a0:	61eb      	str	r3, [r5, #28]
    69a2:	6228      	str	r0, [r5, #32]
    69a4:	6b63      	ldr	r3, [r4, #52]	; 0x34
    69a6:	6ba0      	ldr	r0, [r4, #56]	; 0x38
    69a8:	766e      	strb	r6, [r5, #25]
    69aa:	6269      	str	r1, [r5, #36]	; 0x24
    69ac:	f885 c028 	strb.w	ip, [r5, #40]	; 0x28
    69b0:	f8c5 e02a 	str.w	lr, [r5, #42]	; 0x2a
    69b4:	632a      	str	r2, [r5, #48]	; 0x30
    69b6:	63a8      	str	r0, [r5, #56]	; 0x38
    69b8:	636b      	str	r3, [r5, #52]	; 0x34
    69ba:	f894 303c 	ldrb.w	r3, [r4, #60]	; 0x3c
    69be:	f894 003d 	ldrb.w	r0, [r4, #61]	; 0x3d
    69c2:	6c21      	ldr	r1, [r4, #64]	; 0x40
    69c4:	f894 e044 	ldrb.w	lr, [r4, #68]	; 0x44
    69c8:	f894 6045 	ldrb.w	r6, [r4, #69]	; 0x45
    69cc:	6ca2      	ldr	r2, [r4, #72]	; 0x48
    69ce:	f885 303c 	strb.w	r3, [r5, #60]	; 0x3c
    69d2:	f885 003d 	strb.w	r0, [r5, #61]	; 0x3d
    69d6:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
    69d8:	6d20      	ldr	r0, [r4, #80]	; 0x50
    69da:	f894 c058 	ldrb.w	ip, [r4, #88]	; 0x58
    69de:	f894 b05b 	ldrb.w	fp, [r4, #91]	; 0x5b
    69e2:	6429      	str	r1, [r5, #64]	; 0x40
    69e4:	f885 e044 	strb.w	lr, [r5, #68]	; 0x44
    69e8:	6d61      	ldr	r1, [r4, #84]	; 0x54
    69ea:	f894 e059 	ldrb.w	lr, [r4, #89]	; 0x59
    69ee:	f885 6045 	strb.w	r6, [r5, #69]	; 0x45
    69f2:	64aa      	str	r2, [r5, #72]	; 0x48
    69f4:	f894 605a 	ldrb.w	r6, [r4, #90]	; 0x5a
    69f8:	f8b4 205e 	ldrh.w	r2, [r4, #94]	; 0x5e
    69fc:	64eb      	str	r3, [r5, #76]	; 0x4c
    69fe:	6528      	str	r0, [r5, #80]	; 0x50
    6a00:	f8b4 3060 	ldrh.w	r3, [r4, #96]	; 0x60
    6a04:	f8b4 005c 	ldrh.w	r0, [r4, #92]	; 0x5c
    6a08:	6569      	str	r1, [r5, #84]	; 0x54
    6a0a:	f885 c058 	strb.w	ip, [r5, #88]	; 0x58
    6a0e:	f885 e059 	strb.w	lr, [r5, #89]	; 0x59
    6a12:	f885 b05b 	strb.w	fp, [r5, #91]	; 0x5b
    6a16:	f8a5 005c 	strh.w	r0, [r5, #92]	; 0x5c
    6a1a:	f8a5 205e 	strh.w	r2, [r5, #94]	; 0x5e
    6a1e:	f8a5 3060 	strh.w	r3, [r5, #96]	; 0x60
    6a22:	f885 605a 	strb.w	r6, [r5, #90]	; 0x5a
    6a26:	f8b4 6062 	ldrh.w	r6, [r4, #98]	; 0x62
    6a2a:	6e61      	ldr	r1, [r4, #100]	; 0x64
    6a2c:	6ea3      	ldr	r3, [r4, #104]	; 0x68
    6a2e:	6ee0      	ldr	r0, [r4, #108]	; 0x6c
    6a30:	f894 e070 	ldrb.w	lr, [r4, #112]	; 0x70
    6a34:	f8a5 6062 	strh.w	r6, [r5, #98]	; 0x62
    6a38:	6669      	str	r1, [r5, #100]	; 0x64
    6a3a:	6f66      	ldr	r6, [r4, #116]	; 0x74
    6a3c:	6fa1      	ldr	r1, [r4, #120]	; 0x78
    6a3e:	f8b4 c080 	ldrh.w	ip, [r4, #128]	; 0x80
    6a42:	66ab      	str	r3, [r5, #104]	; 0x68
    6a44:	66e8      	str	r0, [r5, #108]	; 0x6c
    6a46:	6fe3      	ldr	r3, [r4, #124]	; 0x7c
    6a48:	f885 e070 	strb.w	lr, [r5, #112]	; 0x70
    6a4c:	676e      	str	r6, [r5, #116]	; 0x74
    6a4e:	f894 e082 	ldrb.w	lr, [r4, #130]	; 0x82
    6a52:	f894 6083 	ldrb.w	r6, [r4, #131]	; 0x83
    6a56:	67a9      	str	r1, [r5, #120]	; 0x78
                                       &OUT05_ENABLE05, &Polarity05_PWM05A,
                                       &Polarity05S_PWM05B, TCC3_0_IRQn, false);

    ConnectorDI6 = DigitalIn(ShiftRegister::SR_LED_DI_6_MASK, &IN06n_QuadA);
    6a58:	4abe      	ldr	r2, [pc, #760]	; (6d54 <_ZN9ClearCore10SysManagerC1Ev+0xa5c>)
    6a5a:	67eb      	str	r3, [r5, #124]	; 0x7c
    6a5c:	4620      	mov	r0, r4
    6a5e:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
    6a62:	f8a5 c080 	strh.w	ip, [r5, #128]	; 0x80
    6a66:	f885 e082 	strb.w	lr, [r5, #130]	; 0x82
    6a6a:	f885 6083 	strb.w	r6, [r5, #131]	; 0x83
    6a6e:	f006 fe21 	bl	d6b4 <_ZN9ClearCore9DigitalInC1ENS_13ShiftRegister5MasksEPK15PeripheralRoute>
    6a72:	f104 000c 	add.w	r0, r4, #12
    6a76:	c807      	ldmia	r0, {r0, r1, r2}
    6a78:	4db7      	ldr	r5, [pc, #732]	; (6d58 <_ZN9ClearCore10SysManagerC1Ev+0xa60>)
    6a7a:	68a3      	ldr	r3, [r4, #8]
    6a7c:	f894 c018 	ldrb.w	ip, [r4, #24]
    6a80:	f8b4 e004 	ldrh.w	lr, [r4, #4]
    6a84:	79a6      	ldrb	r6, [r4, #6]
    6a86:	60ab      	str	r3, [r5, #8]
    6a88:	f885 c018 	strb.w	ip, [r5, #24]
    6a8c:	69e3      	ldr	r3, [r4, #28]
    6a8e:	f8d4 c02a 	ldr.w	ip, [r4, #42]	; 0x2a
    6a92:	f894 b028 	ldrb.w	fp, [r4, #40]	; 0x28
    6a96:	f8a5 e004 	strh.w	lr, [r5, #4]
    6a9a:	71ae      	strb	r6, [r5, #6]
    6a9c:	f894 e019 	ldrb.w	lr, [r4, #25]
    6aa0:	6a26      	ldr	r6, [r4, #32]
    6aa2:	60e8      	str	r0, [r5, #12]
    6aa4:	6129      	str	r1, [r5, #16]
    6aa6:	616a      	str	r2, [r5, #20]
    6aa8:	61eb      	str	r3, [r5, #28]
    6aaa:	f8c5 c02a 	str.w	ip, [r5, #42]	; 0x2a
    6aae:	6a63      	ldr	r3, [r4, #36]	; 0x24
    ConnectorDI7 = DigitalIn(ShiftRegister::SR_LED_DI_7_MASK, &IN07n_QuadB);
    6ab0:	4aaa      	ldr	r2, [pc, #680]	; (6d5c <_ZN9ClearCore10SysManagerC1Ev+0xa64>)
    6ab2:	f885 e019 	strb.w	lr, [r5, #25]
    6ab6:	4620      	mov	r0, r4
    6ab8:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
    6abc:	622e      	str	r6, [r5, #32]
    6abe:	626b      	str	r3, [r5, #36]	; 0x24
    6ac0:	f885 b028 	strb.w	fp, [r5, #40]	; 0x28
    6ac4:	f006 fdf6 	bl	d6b4 <_ZN9ClearCore9DigitalInC1ENS_13ShiftRegister5MasksEPK15PeripheralRoute>
    6ac8:	f104 000c 	add.w	r0, r4, #12
    6acc:	c807      	ldmia	r0, {r0, r1, r2}
    6ace:	4da4      	ldr	r5, [pc, #656]	; (6d60 <_ZN9ClearCore10SysManagerC1Ev+0xa68>)
    6ad0:	68a3      	ldr	r3, [r4, #8]
    6ad2:	f894 c018 	ldrb.w	ip, [r4, #24]
    6ad6:	f8b4 e004 	ldrh.w	lr, [r4, #4]
    6ada:	79a6      	ldrb	r6, [r4, #6]
    6adc:	60ab      	str	r3, [r5, #8]
    6ade:	f885 c018 	strb.w	ip, [r5, #24]
    6ae2:	69e3      	ldr	r3, [r4, #28]
    6ae4:	f8d4 c02a 	ldr.w	ip, [r4, #42]	; 0x2a
    6ae8:	f894 b028 	ldrb.w	fp, [r4, #40]	; 0x28
    6aec:	f8a5 e004 	strh.w	lr, [r5, #4]
    6af0:	71ae      	strb	r6, [r5, #6]
    6af2:	f894 e019 	ldrb.w	lr, [r4, #25]
    6af6:	6a26      	ldr	r6, [r4, #32]
    6af8:	60e8      	str	r0, [r5, #12]
    6afa:	6129      	str	r1, [r5, #16]
    6afc:	616a      	str	r2, [r5, #20]
    6afe:	61eb      	str	r3, [r5, #28]
    6b00:	f8c5 c02a 	str.w	ip, [r5, #42]	; 0x2a
    6b04:	6a63      	ldr	r3, [r4, #36]	; 0x24
    ConnectorDI8 = DigitalIn(ShiftRegister::SR_LED_DI_8_MASK, &IN08n_QuadI);
    6b06:	4a97      	ldr	r2, [pc, #604]	; (6d64 <_ZN9ClearCore10SysManagerC1Ev+0xa6c>)
    6b08:	f885 e019 	strb.w	lr, [r5, #25]
    6b0c:	4620      	mov	r0, r4
    6b0e:	f44f 0100 	mov.w	r1, #8388608	; 0x800000
    6b12:	622e      	str	r6, [r5, #32]
    6b14:	626b      	str	r3, [r5, #36]	; 0x24
    6b16:	f885 b028 	strb.w	fp, [r5, #40]	; 0x28
    6b1a:	f006 fdcb 	bl	d6b4 <_ZN9ClearCore9DigitalInC1ENS_13ShiftRegister5MasksEPK15PeripheralRoute>
    6b1e:	4d92      	ldr	r5, [pc, #584]	; (6d68 <_ZN9ClearCore10SysManagerC1Ev+0xa70>)
    6b20:	88a6      	ldrh	r6, [r4, #4]
    6b22:	80ae      	strh	r6, [r5, #4]
    6b24:	f104 000c 	add.w	r0, r4, #12
    6b28:	c807      	ldmia	r0, {r0, r1, r2}

    ConnectorA9 = DigitalInAnalogIn(ShiftRegister::SR_LED_ADI_09_MASK,
    6b2a:	2605      	movs	r6, #5
    6b2c:	f894 e006 	ldrb.w	lr, [r4, #6]
    6b30:	68a3      	ldr	r3, [r4, #8]
    6b32:	9600      	str	r6, [sp, #0]
    6b34:	7e26      	ldrb	r6, [r4, #24]
    6b36:	f894 c019 	ldrb.w	ip, [r4, #25]
    6b3a:	f885 e006 	strb.w	lr, [r5, #6]
    6b3e:	60ab      	str	r3, [r5, #8]
    6b40:	f894 e028 	ldrb.w	lr, [r4, #40]	; 0x28
    6b44:	69e3      	ldr	r3, [r4, #28]
    6b46:	6129      	str	r1, [r5, #16]
    6b48:	616a      	str	r2, [r5, #20]
    6b4a:	6a61      	ldr	r1, [r4, #36]	; 0x24
    6b4c:	6a22      	ldr	r2, [r4, #32]
    6b4e:	762e      	strb	r6, [r5, #24]
    6b50:	f8d4 602a 	ldr.w	r6, [r4, #42]	; 0x2a
    6b54:	60e8      	str	r0, [r5, #12]
    6b56:	f885 c019 	strb.w	ip, [r5, #25]
    6b5a:	61eb      	str	r3, [r5, #28]
    6b5c:	622a      	str	r2, [r5, #32]
    6b5e:	6269      	str	r1, [r5, #36]	; 0x24
    6b60:	f885 e028 	strb.w	lr, [r5, #40]	; 0x28
    6b64:	f8c5 602a 	str.w	r6, [r5, #42]	; 0x2a
    6b68:	4620      	mov	r0, r4
    6b6a:	4d80      	ldr	r5, [pc, #512]	; (6d6c <_ZN9ClearCore10SysManagerC1Ev+0xa74>)
    6b6c:	4b80      	ldr	r3, [pc, #512]	; (6d70 <_ZN9ClearCore10SysManagerC1Ev+0xa78>)
    6b6e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
    6b72:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
    6b76:	f006 f881 	bl	cc7c <_ZN9ClearCore17DigitalInAnalogInC1ENS_13ShiftRegister5MasksES2_PK15PeripheralRouteNS_10AdcManager11AdcChannelsE>
    6b7a:	f8b4 e004 	ldrh.w	lr, [r4, #4]
    6b7e:	68a2      	ldr	r2, [r4, #8]
    6b80:	68e3      	ldr	r3, [r4, #12]
    6b82:	79a6      	ldrb	r6, [r4, #6]
    6b84:	6920      	ldr	r0, [r4, #16]
    6b86:	6961      	ldr	r1, [r4, #20]
    6b88:	f8a5 e004 	strh.w	lr, [r5, #4]
    6b8c:	60aa      	str	r2, [r5, #8]
    6b8e:	f894 e018 	ldrb.w	lr, [r4, #24]
    6b92:	69e2      	ldr	r2, [r4, #28]
    6b94:	60eb      	str	r3, [r5, #12]
    6b96:	6a23      	ldr	r3, [r4, #32]
    6b98:	f894 c028 	ldrb.w	ip, [r4, #40]	; 0x28
    6b9c:	71ae      	strb	r6, [r5, #6]
    6b9e:	6128      	str	r0, [r5, #16]
    6ba0:	7e66      	ldrb	r6, [r4, #25]
    6ba2:	6a60      	ldr	r0, [r4, #36]	; 0x24
    6ba4:	6169      	str	r1, [r5, #20]
    6ba6:	f885 e018 	strb.w	lr, [r5, #24]
    - #ConnectorA12

    For more detailed information on the ClearCore Connector interface, check
    out the \ref ConnectorMain informational page.
**/
class DigitalInAnalogIn : public DigitalIn {
    6baa:	6b21      	ldr	r1, [r4, #48]	; 0x30
    6bac:	f8d4 e02a 	ldr.w	lr, [r4, #42]	; 0x2a
    6bb0:	61ea      	str	r2, [r5, #28]
    6bb2:	622b      	str	r3, [r5, #32]
    6bb4:	f894 2034 	ldrb.w	r2, [r4, #52]	; 0x34
    6bb8:	6ba3      	ldr	r3, [r4, #56]	; 0x38
    6bba:	f885 c028 	strb.w	ip, [r5, #40]	; 0x28
    6bbe:	766e      	strb	r6, [r5, #25]
    6bc0:	6268      	str	r0, [r5, #36]	; 0x24
                                    ShiftRegister::SR_ANAIN_DIGITAL_09_MASK,
                                    &IN09n_AIN09, AdcManager::ADC_AIN09);
    ConnectorA10 = DigitalInAnalogIn(ShiftRegister::SR_LED_ADI_10_MASK,
    6bc2:	2604      	movs	r6, #4
    6bc4:	f8c5 e02a 	str.w	lr, [r5, #42]	; 0x2a
    6bc8:	f885 2034 	strb.w	r2, [r5, #52]	; 0x34
    6bcc:	63ab      	str	r3, [r5, #56]	; 0x38
    6bce:	6329      	str	r1, [r5, #48]	; 0x30
    6bd0:	6be1      	ldr	r1, [r4, #60]	; 0x3c
    6bd2:	f894 e040 	ldrb.w	lr, [r4, #64]	; 0x40
    6bd6:	4b67      	ldr	r3, [pc, #412]	; (6d74 <_ZN9ClearCore10SysManagerC1Ev+0xa7c>)
    6bd8:	9600      	str	r6, [sp, #0]
    6bda:	4620      	mov	r0, r4
    6bdc:	63e9      	str	r1, [r5, #60]	; 0x3c
    6bde:	f885 e040 	strb.w	lr, [r5, #64]	; 0x40
    6be2:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
    6be6:	f04f 6180 	mov.w	r1, #67108864	; 0x4000000
    6bea:	f006 f847 	bl	cc7c <_ZN9ClearCore17DigitalInAnalogInC1ENS_13ShiftRegister5MasksES2_PK15PeripheralRouteNS_10AdcManager11AdcChannelsE>
    6bee:	f104 0008 	add.w	r0, r4, #8
    6bf2:	c80d      	ldmia	r0, {r0, r2, r3}
    6bf4:	4d60      	ldr	r5, [pc, #384]	; (6d78 <_ZN9ClearCore10SysManagerC1Ev+0xa80>)
    6bf6:	88a1      	ldrh	r1, [r4, #4]
    6bf8:	f894 e006 	ldrb.w	lr, [r4, #6]
    6bfc:	80a9      	strh	r1, [r5, #4]
    6bfe:	f885 e006 	strb.w	lr, [r5, #6]
    6c02:	6961      	ldr	r1, [r4, #20]
    6c04:	f894 e018 	ldrb.w	lr, [r4, #24]
    6c08:	60a8      	str	r0, [r5, #8]
    6c0a:	60ea      	str	r2, [r5, #12]
    6c0c:	7e60      	ldrb	r0, [r4, #25]
    6c0e:	69e2      	ldr	r2, [r4, #28]
    6c10:	612b      	str	r3, [r5, #16]
    6c12:	6a23      	ldr	r3, [r4, #32]
    6c14:	f894 c034 	ldrb.w	ip, [r4, #52]	; 0x34
    6c18:	6169      	str	r1, [r5, #20]
    6c1a:	f885 e018 	strb.w	lr, [r5, #24]
    6c1e:	6a61      	ldr	r1, [r4, #36]	; 0x24
    6c20:	f894 e028 	ldrb.w	lr, [r4, #40]	; 0x28
    6c24:	7668      	strb	r0, [r5, #25]
    6c26:	61ea      	str	r2, [r5, #28]
    6c28:	f8d4 002a 	ldr.w	r0, [r4, #42]	; 0x2a
    6c2c:	6b22      	ldr	r2, [r4, #48]	; 0x30
    6c2e:	622b      	str	r3, [r5, #32]
    6c30:	6ba3      	ldr	r3, [r4, #56]	; 0x38
    6c32:	f885 c034 	strb.w	ip, [r5, #52]	; 0x34
    6c36:	6269      	str	r1, [r5, #36]	; 0x24
    6c38:	f885 e028 	strb.w	lr, [r5, #40]	; 0x28
    6c3c:	f8c5 002a 	str.w	r0, [r5, #42]	; 0x2a
    6c40:	63ab      	str	r3, [r5, #56]	; 0x38
    6c42:	632a      	str	r2, [r5, #48]	; 0x30
    6c44:	6be2      	ldr	r2, [r4, #60]	; 0x3c
                                     ShiftRegister::SR_ANAIN_DIGITAL_10_MASK,
                                     &IN10n_AIN10, AdcManager::ADC_AIN10);
    ConnectorA11 = DigitalInAnalogIn(ShiftRegister::SR_LED_ADI_11_MASK,
    6c46:	f8cd 8000 	str.w	r8, [sp]
    6c4a:	f894 e040 	ldrb.w	lr, [r4, #64]	; 0x40
    6c4e:	63ea      	str	r2, [r5, #60]	; 0x3c
    6c50:	f885 e040 	strb.w	lr, [r5, #64]	; 0x40
    6c54:	4620      	mov	r0, r4
    6c56:	4d49      	ldr	r5, [pc, #292]	; (6d7c <_ZN9ClearCore10SysManagerC1Ev+0xa84>)
    6c58:	4b49      	ldr	r3, [pc, #292]	; (6d80 <_ZN9ClearCore10SysManagerC1Ev+0xa88>)
    6c5a:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
    6c5e:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
    6c62:	f006 f80b 	bl	cc7c <_ZN9ClearCore17DigitalInAnalogInC1ENS_13ShiftRegister5MasksES2_PK15PeripheralRouteNS_10AdcManager11AdcChannelsE>
    6c66:	f894 c006 	ldrb.w	ip, [r4, #6]
    6c6a:	68a2      	ldr	r2, [r4, #8]
    6c6c:	68e3      	ldr	r3, [r4, #12]
    6c6e:	f8b4 e004 	ldrh.w	lr, [r4, #4]
    6c72:	6920      	ldr	r0, [r4, #16]
    6c74:	6961      	ldr	r1, [r4, #20]
    6c76:	f885 c006 	strb.w	ip, [r5, #6]
    6c7a:	60aa      	str	r2, [r5, #8]
    6c7c:	f894 c018 	ldrb.w	ip, [r4, #24]
    6c80:	69e2      	ldr	r2, [r4, #28]
    6c82:	60eb      	str	r3, [r5, #12]
    6c84:	6a23      	ldr	r3, [r4, #32]
    6c86:	f894 8028 	ldrb.w	r8, [r4, #40]	; 0x28
    6c8a:	f8a5 e004 	strh.w	lr, [r5, #4]
    6c8e:	6128      	str	r0, [r5, #16]
    6c90:	f894 e019 	ldrb.w	lr, [r4, #25]
    6c94:	6a60      	ldr	r0, [r4, #36]	; 0x24
    6c96:	6169      	str	r1, [r5, #20]
    6c98:	f885 c018 	strb.w	ip, [r5, #24]
    6c9c:	6b21      	ldr	r1, [r4, #48]	; 0x30
    6c9e:	f8d4 c02a 	ldr.w	ip, [r4, #42]	; 0x2a
    6ca2:	61ea      	str	r2, [r5, #28]
    6ca4:	622b      	str	r3, [r5, #32]
    6ca6:	f894 2034 	ldrb.w	r2, [r4, #52]	; 0x34
    6caa:	6ba3      	ldr	r3, [r4, #56]	; 0x38
    6cac:	f8c5 c02a 	str.w	ip, [r5, #42]	; 0x2a
    6cb0:	f885 e019 	strb.w	lr, [r5, #25]
    6cb4:	6268      	str	r0, [r5, #36]	; 0x24
    6cb6:	f885 8028 	strb.w	r8, [r5, #40]	; 0x28
    6cba:	6329      	str	r1, [r5, #48]	; 0x30
    6cbc:	63ab      	str	r3, [r5, #56]	; 0x38
    6cbe:	f885 2034 	strb.w	r2, [r5, #52]	; 0x34
    6cc2:	6be2      	ldr	r2, [r4, #60]	; 0x3c
                                     ShiftRegister::SR_ANAIN_DIGITAL_11_MASK,
                                     &IN11n_AIN11, AdcManager::ADC_AIN11);
    ConnectorA12 = DigitalInAnalogIn(ShiftRegister::SR_LED_ADI_12_MASK,
    6cc4:	f8cd a000 	str.w	sl, [sp]
    6cc8:	f894 e040 	ldrb.w	lr, [r4, #64]	; 0x40
    6ccc:	63ea      	str	r2, [r5, #60]	; 0x3c
    6cce:	f885 e040 	strb.w	lr, [r5, #64]	; 0x40
    6cd2:	4620      	mov	r0, r4
    6cd4:	4b2b      	ldr	r3, [pc, #172]	; (6d84 <_ZN9ClearCore10SysManagerC1Ev+0xa8c>)
    6cd6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
    6cda:	f04f 7180 	mov.w	r1, #16777216	; 0x1000000
    6cde:	f005 ffcd 	bl	cc7c <_ZN9ClearCore17DigitalInAnalogInC1ENS_13ShiftRegister5MasksES2_PK15PeripheralRouteNS_10AdcManager11AdcChannelsE>
    6ce2:	f104 0008 	add.w	r0, r4, #8
    6ce6:	c80f      	ldmia	r0, {r0, r1, r2, r3}
    6ce8:	f8df e09c 	ldr.w	lr, [pc, #156]	; 6d88 <_ZN9ClearCore10SysManagerC1Ev+0xa90>
    6cec:	f894 c006 	ldrb.w	ip, [r4, #6]
    6cf0:	88a5      	ldrh	r5, [r4, #4]
    6cf2:	f88e c006 	strb.w	ip, [lr, #6]
    6cf6:	f894 c019 	ldrb.w	ip, [r4, #25]
    6cfa:	f894 8018 	ldrb.w	r8, [r4, #24]
    6cfe:	f8ae 5004 	strh.w	r5, [lr, #4]
    6d02:	f8ce 0008 	str.w	r0, [lr, #8]
    6d06:	69e5      	ldr	r5, [r4, #28]
    6d08:	6a20      	ldr	r0, [r4, #32]
    6d0a:	f8ce 100c 	str.w	r1, [lr, #12]
    6d0e:	f8ce 2010 	str.w	r2, [lr, #16]
    6d12:	f894 a028 	ldrb.w	sl, [r4, #40]	; 0x28
    6d16:	f8ce 3014 	str.w	r3, [lr, #20]
    6d1a:	f8d4 b02a 	ldr.w	fp, [r4, #42]	; 0x2a
    6d1e:	6b23      	ldr	r3, [r4, #48]	; 0x30
    6d20:	f88e c019 	strb.w	ip, [lr, #25]
    6d24:	6ba2      	ldr	r2, [r4, #56]	; 0x38
    6d26:	f894 c034 	ldrb.w	ip, [r4, #52]	; 0x34
    6d2a:	6a61      	ldr	r1, [r4, #36]	; 0x24
    6d2c:	f88e 8018 	strb.w	r8, [lr, #24]
    6d30:	f8ce 501c 	str.w	r5, [lr, #28]
    6d34:	f8ce 0020 	str.w	r0, [lr, #32]
    6d38:	f88e a028 	strb.w	sl, [lr, #40]	; 0x28
    6d3c:	f8ce b02a 	str.w	fp, [lr, #42]	; 0x2a
    6d40:	f8ce 3030 	str.w	r3, [lr, #48]	; 0x30
    6d44:	f88e c034 	strb.w	ip, [lr, #52]	; 0x34
    6d48:	f8ce 2038 	str.w	r2, [lr, #56]	; 0x38
    6d4c:	f8ce 1024 	str.w	r1, [lr, #36]	; 0x24
    6d50:	e01c      	b.n	6d8c <_ZN9ClearCore10SysManagerC1Ev+0xa94>
    6d52:	bf00      	nop
    6d54:	0002ce20 	.word	0x0002ce20
    6d58:	20001200 	.word	0x20001200
    6d5c:	0002ce30 	.word	0x0002ce30
    6d60:	20001230 	.word	0x20001230
    6d64:	0002ce40 	.word	0x0002ce40
    6d68:	20001260 	.word	0x20001260
    6d6c:	20000bcc 	.word	0x20000bcc
    6d70:	0002ce50 	.word	0x0002ce50
    6d74:	0002ce60 	.word	0x0002ce60
    6d78:	20001134 	.word	0x20001134
    6d7c:	20001178 	.word	0x20001178
    6d80:	0002ce70 	.word	0x0002ce70
    6d84:	0002ce80 	.word	0x0002ce80
    6d88:	200011bc 	.word	0x200011bc
    6d8c:	6be1      	ldr	r1, [r4, #60]	; 0x3c
                                     ShiftRegister::SR_ANAIN_DIGITAL_12_MASK,
                                     &IN12n_AIN12, AdcManager::ADC_AIN12);

    ConnectorM0 = MotorDriver(ShiftRegister::SR_EN_OUT_0_MASK, &Mtr0_An_SCTx,
    6d8e:	9702      	str	r7, [sp, #8]
    6d90:	9601      	str	r6, [sp, #4]
    6d92:	f894 6040 	ldrb.w	r6, [r4, #64]	; 0x40
    6d96:	4dcc      	ldr	r5, [pc, #816]	; (70c8 <_ZN9ClearCore10SysManagerC1Ev+0xdd0>)
    6d98:	9500      	str	r5, [sp, #0]
    6d9a:	4620      	mov	r0, r4
    6d9c:	f8ce 103c 	str.w	r1, [lr, #60]	; 0x3c
    6da0:	f88e 6040 	strb.w	r6, [lr, #64]	; 0x40
    6da4:	4bc9      	ldr	r3, [pc, #804]	; (70cc <_ZN9ClearCore10SysManagerC1Ev+0xdd4>)
    6da6:	4aca      	ldr	r2, [pc, #808]	; (70d0 <_ZN9ClearCore10SysManagerC1Ev+0xdd8>)
    6da8:	f44f 6100 	mov.w	r1, #2048	; 0x800
    6dac:	f008 f9ba 	bl	f124 <_ZN9ClearCore11MotorDriverC1ENS_13ShiftRegister5MasksEPK15PeripheralRouteS5_S5_tt>
    6db0:	4bc8      	ldr	r3, [pc, #800]	; (70d4 <_ZN9ClearCore10SysManagerC1Ev+0xddc>)
    6db2:	79a7      	ldrb	r7, [r4, #6]
    6db4:	68a6      	ldr	r6, [r4, #8]
    6db6:	68e5      	ldr	r5, [r4, #12]
    6db8:	6920      	ldr	r0, [r4, #16]
    6dba:	6961      	ldr	r1, [r4, #20]
    6dbc:	f894 8018 	ldrb.w	r8, [r4, #24]
    6dc0:	69e2      	ldr	r2, [r4, #28]
    6dc2:	f8b4 e004 	ldrh.w	lr, [r4, #4]
    6dc6:	f894 c019 	ldrb.w	ip, [r4, #25]
    6dca:	719f      	strb	r7, [r3, #6]
    6dcc:	609e      	str	r6, [r3, #8]
    6dce:	6a67      	ldr	r7, [r4, #36]	; 0x24
    6dd0:	f894 6028 	ldrb.w	r6, [r4, #40]	; 0x28
    6dd4:	60dd      	str	r5, [r3, #12]
    6dd6:	6118      	str	r0, [r3, #16]
    6dd8:	f8d4 502a 	ldr.w	r5, [r4, #42]	; 0x2a

        For more detailed information on the ClearCore Motor Control and Motion
        Generation systems, check out the \ref MotorDriverMain and \ref MoveGen
        informational pages.
    **/
    class StepGenerator
    6ddc:	6b60      	ldr	r0, [r4, #52]	; 0x34
    6dde:	6159      	str	r1, [r3, #20]
    6de0:	f883 8018 	strb.w	r8, [r3, #24]
    6de4:	6ba1      	ldr	r1, [r4, #56]	; 0x38
    6de6:	f894 803c 	ldrb.w	r8, [r4, #60]	; 0x3c
    6dea:	61da      	str	r2, [r3, #28]
    6dec:	6a22      	ldr	r2, [r4, #32]
    6dee:	f8a3 e004 	strh.w	lr, [r3, #4]
    6df2:	f883 c019 	strb.w	ip, [r3, #25]
    6df6:	621a      	str	r2, [r3, #32]
    6df8:	625f      	str	r7, [r3, #36]	; 0x24
    6dfa:	f883 6028 	strb.w	r6, [r3, #40]	; 0x28
    6dfe:	f8c3 502a 	str.w	r5, [r3, #42]	; 0x2a
    6e02:	6358      	str	r0, [r3, #52]	; 0x34
    6e04:	6399      	str	r1, [r3, #56]	; 0x38
    6e06:	f883 803c 	strb.w	r8, [r3, #60]	; 0x3c
    6e0a:	f894 803d 	ldrb.w	r8, [r4, #61]	; 0x3d
    6e0e:	6ca2      	ldr	r2, [r4, #72]	; 0x48
    6e10:	649a      	str	r2, [r3, #72]	; 0x48
    6e12:	6de2      	ldr	r2, [r4, #92]	; 0x5c
    6e14:	9207      	str	r2, [sp, #28]
    6e16:	e9d4 ab1a 	ldrd	sl, fp, [r4, #104]	; 0x68
    6e1a:	6ce2      	ldr	r2, [r4, #76]	; 0x4c
    6e1c:	f894 0040 	ldrb.w	r0, [r4, #64]	; 0x40
    6e20:	6c61      	ldr	r1, [r4, #68]	; 0x44
    6e22:	f894 7050 	ldrb.w	r7, [r4, #80]	; 0x50
    6e26:	64da      	str	r2, [r3, #76]	; 0x4c
    6e28:	9a07      	ldr	r2, [sp, #28]
    6e2a:	f894 c03e 	ldrb.w	ip, [r4, #62]	; 0x3e
    6e2e:	f894 6051 	ldrb.w	r6, [r4, #81]	; 0x51
    6e32:	f894 5052 	ldrb.w	r5, [r4, #82]	; 0x52
    6e36:	f883 0040 	strb.w	r0, [r3, #64]	; 0x40
    6e3a:	6459      	str	r1, [r3, #68]	; 0x44
    6e3c:	6d60      	ldr	r0, [r4, #84]	; 0x54
    6e3e:	6da1      	ldr	r1, [r4, #88]	; 0x58
    6e40:	f883 7050 	strb.w	r7, [r3, #80]	; 0x50
    6e44:	65da      	str	r2, [r3, #92]	; 0x5c
    6e46:	6f27      	ldr	r7, [r4, #112]	; 0x70
    6e48:	6e22      	ldr	r2, [r4, #96]	; 0x60
    6e4a:	f883 803d 	strb.w	r8, [r3, #61]	; 0x3d
    6e4e:	f883 c03e 	strb.w	ip, [r3, #62]	; 0x3e
    6e52:	f883 6051 	strb.w	r6, [r3, #81]	; 0x51
    6e56:	f883 5052 	strb.w	r5, [r3, #82]	; 0x52
    6e5a:	6f66      	ldr	r6, [r4, #116]	; 0x74
    6e5c:	6558      	str	r0, [r3, #84]	; 0x54
    6e5e:	6599      	str	r1, [r3, #88]	; 0x58
    6e60:	661a      	str	r2, [r3, #96]	; 0x60
    6e62:	e9c3 ab1a 	strd	sl, fp, [r3, #104]	; 0x68
    6e66:	671f      	str	r7, [r3, #112]	; 0x70
    6e68:	f8d4 0080 	ldr.w	r0, [r4, #128]	; 0x80
    6e6c:	f8d4 5090 	ldr.w	r5, [r4, #144]	; 0x90
    6e70:	f8c3 0080 	str.w	r0, [r3, #128]	; 0x80
    6e74:	e9d4 121e 	ldrd	r1, r2, [r4, #120]	; 0x78
    6e78:	f8d4 0094 	ldr.w	r0, [r4, #148]	; 0x94
    6e7c:	f8c3 5090 	str.w	r5, [r3, #144]	; 0x90
    6e80:	f8d4 5098 	ldr.w	r5, [r4, #152]	; 0x98
    6e84:	675e      	str	r6, [r3, #116]	; 0x74
    6e86:	e9d4 ab22 	ldrd	sl, fp, [r4, #136]	; 0x88
class MotorDriver : public DigitalIn, public StepGenerator {
    6e8a:	f8d4 60a0 	ldr.w	r6, [r4, #160]	; 0xa0
    6e8e:	f8c3 0094 	str.w	r0, [r3, #148]	; 0x94
    6e92:	f8c3 5098 	str.w	r5, [r3, #152]	; 0x98
    6e96:	f8d4 009c 	ldr.w	r0, [r4, #156]	; 0x9c
    6e9a:	f8d4 50a4 	ldr.w	r5, [r4, #164]	; 0xa4
    6e9e:	f8c3 009c 	str.w	r0, [r3, #156]	; 0x9c
    6ea2:	f8c3 60a0 	str.w	r6, [r3, #160]	; 0xa0
    6ea6:	f8d4 00a8 	ldr.w	r0, [r4, #168]	; 0xa8
    6eaa:	f8d4 60ac 	ldr.w	r6, [r4, #172]	; 0xac
    6eae:	f8c3 50a4 	str.w	r5, [r3, #164]	; 0xa4
    6eb2:	f8d4 50b0 	ldr.w	r5, [r4, #176]	; 0xb0
    6eb6:	f8c3 00a8 	str.w	r0, [r3, #168]	; 0xa8
    6eba:	e9c3 121e 	strd	r1, r2, [r3, #120]	; 0x78
    6ebe:	f8d4 00b4 	ldr.w	r0, [r4, #180]	; 0xb4
    6ec2:	f8c3 60ac 	str.w	r6, [r3, #172]	; 0xac
    6ec6:	4619      	mov	r1, r3
    6ec8:	f8d4 60b8 	ldr.w	r6, [r4, #184]	; 0xb8
    6ecc:	f8c3 50b0 	str.w	r5, [r3, #176]	; 0xb0
    6ed0:	f8d4 40bc 	ldr.w	r4, [r4, #188]	; 0xbc
    6ed4:	9d38      	ldr	r5, [sp, #224]	; 0xe0
    6ed6:	f8c3 00b4 	str.w	r0, [r3, #180]	; 0xb4
    6eda:	e9c3 ab22 	strd	sl, fp, [r3, #136]	; 0x88
    6ede:	f8c3 60b8 	str.w	r6, [r3, #184]	; 0xb8
    6ee2:	f8c3 40bc 	str.w	r4, [r3, #188]	; 0xbc
    6ee6:	f8c3 50c0 	str.w	r5, [r3, #192]	; 0xc0
    6eea:	9c39      	ldr	r4, [sp, #228]	; 0xe4
    6eec:	983a      	ldr	r0, [sp, #232]	; 0xe8
    6eee:	9a3b      	ldr	r2, [sp, #236]	; 0xec
    6ef0:	f89d 30f6 	ldrb.w	r3, [sp, #246]	; 0xf6
    6ef4:	f8bd b0f0 	ldrh.w	fp, [sp, #240]	; 0xf0
    6ef8:	f8bd a0f2 	ldrh.w	sl, [sp, #242]	; 0xf2
    6efc:	f8bd 80f4 	ldrh.w	r8, [sp, #244]	; 0xf4
    6f00:	f89d c0f7 	ldrb.w	ip, [sp, #247]	; 0xf7
    6f04:	f89d e0f8 	ldrb.w	lr, [sp, #248]	; 0xf8
    6f08:	f8bd 70fa 	ldrh.w	r7, [sp, #250]	; 0xfa
    6f0c:	f8bd 60fc 	ldrh.w	r6, [sp, #252]	; 0xfc
    6f10:	f8bd 50fe 	ldrh.w	r5, [sp, #254]	; 0xfe
    6f14:	f8c1 40c4 	str.w	r4, [r1, #196]	; 0xc4
    6f18:	f8c1 00c8 	str.w	r0, [r1, #200]	; 0xc8
    6f1c:	f8c1 20cc 	str.w	r2, [r1, #204]	; 0xcc
    6f20:	f8bd 0102 	ldrh.w	r0, [sp, #258]	; 0x102
    6f24:	f89d 2104 	ldrb.w	r2, [sp, #260]	; 0x104
    6f28:	f8bd 4100 	ldrh.w	r4, [sp, #256]	; 0x100
    6f2c:	f881 30d6 	strb.w	r3, [r1, #214]	; 0xd6
    6f30:	9b42      	ldr	r3, [sp, #264]	; 0x108
    6f32:	f8a1 b0d0 	strh.w	fp, [r1, #208]	; 0xd0
    6f36:	f8a1 a0d2 	strh.w	sl, [r1, #210]	; 0xd2
    6f3a:	f8a1 80d4 	strh.w	r8, [r1, #212]	; 0xd4
    6f3e:	f881 c0d7 	strb.w	ip, [r1, #215]	; 0xd7
    6f42:	f881 e0d8 	strb.w	lr, [r1, #216]	; 0xd8
    6f46:	f8a1 70da 	strh.w	r7, [r1, #218]	; 0xda
    6f4a:	f8a1 60dc 	strh.w	r6, [r1, #220]	; 0xdc
    6f4e:	f8a1 50de 	strh.w	r5, [r1, #222]	; 0xde
    6f52:	f8a1 00e2 	strh.w	r0, [r1, #226]	; 0xe2
    6f56:	f881 20e4 	strb.w	r2, [r1, #228]	; 0xe4
    6f5a:	f8c1 30e8 	str.w	r3, [r1, #232]	; 0xe8
    6f5e:	f8a1 40e0 	strh.w	r4, [r1, #224]	; 0xe0
    6f62:	9c43      	ldr	r4, [sp, #268]	; 0x10c
    6f64:	9d44      	ldr	r5, [sp, #272]	; 0x110
    6f66:	f89d 7115 	ldrb.w	r7, [sp, #277]	; 0x115
    6f6a:	f89d 0116 	ldrb.w	r0, [sp, #278]	; 0x116
    6f6e:	f8bd 2118 	ldrh.w	r2, [sp, #280]	; 0x118
    6f72:	9b47      	ldr	r3, [sp, #284]	; 0x11c
    6f74:	f89d 8114 	ldrb.w	r8, [sp, #276]	; 0x114
    6f78:	f89d c120 	ldrb.w	ip, [sp, #288]	; 0x120
    6f7c:	f89d e121 	ldrb.w	lr, [sp, #289]	; 0x121
    6f80:	f8c1 40ec 	str.w	r4, [r1, #236]	; 0xec
    6f84:	9e49      	ldr	r6, [sp, #292]	; 0x124
    6f86:	9c4b      	ldr	r4, [sp, #300]	; 0x12c
    6f88:	f8c1 50f0 	str.w	r5, [r1, #240]	; 0xf0
    6f8c:	f881 70f5 	strb.w	r7, [r1, #245]	; 0xf5
    6f90:	9d4a      	ldr	r5, [sp, #296]	; 0x128
    6f92:	f8bd 7130 	ldrh.w	r7, [sp, #304]	; 0x130
    6f96:	f881 00f6 	strb.w	r0, [r1, #246]	; 0xf6
    6f9a:	f8a1 20f8 	strh.w	r2, [r1, #248]	; 0xf8
    6f9e:	f8bd 0132 	ldrh.w	r0, [sp, #306]	; 0x132
    6fa2:	f89d 2134 	ldrb.w	r2, [sp, #308]	; 0x134
    6fa6:	f8c1 30fc 	str.w	r3, [r1, #252]	; 0xfc
    6faa:	9b4e      	ldr	r3, [sp, #312]	; 0x138
    6fac:	f881 80f4 	strb.w	r8, [r1, #244]	; 0xf4
    6fb0:	f881 c100 	strb.w	ip, [r1, #256]	; 0x100
    6fb4:	f881 e101 	strb.w	lr, [r1, #257]	; 0x101
    6fb8:	f8c1 5108 	str.w	r5, [r1, #264]	; 0x108
    6fbc:	f8c1 410c 	str.w	r4, [r1, #268]	; 0x10c
    6fc0:	f8a1 7110 	strh.w	r7, [r1, #272]	; 0x110
    6fc4:	f8a1 0112 	strh.w	r0, [r1, #274]	; 0x112
    6fc8:	f881 2114 	strb.w	r2, [r1, #276]	; 0x114
    6fcc:	f8c1 3118 	str.w	r3, [r1, #280]	; 0x118
    6fd0:	f8c1 6104 	str.w	r6, [r1, #260]	; 0x104
    6fd4:	9e4f      	ldr	r6, [sp, #316]	; 0x13c
    6fd6:	9b50      	ldr	r3, [sp, #320]	; 0x140
    6fd8:	9d51      	ldr	r5, [sp, #324]	; 0x144
    6fda:	9852      	ldr	r0, [sp, #328]	; 0x148
    6fdc:	f89d c14c 	ldrb.w	ip, [sp, #332]	; 0x14c
    6fe0:	f89d e14d 	ldrb.w	lr, [sp, #333]	; 0x14d
    6fe4:	f89d 714e 	ldrb.w	r7, [sp, #334]	; 0x14e
    6fe8:	f8c1 3120 	str.w	r3, [r1, #288]	; 0x120
    6fec:	9b54      	ldr	r3, [sp, #336]	; 0x150
    6fee:	f89d 814f 	ldrb.w	r8, [sp, #335]	; 0x14f
    6ff2:	f8c1 611c 	str.w	r6, [r1, #284]	; 0x11c
    6ff6:	f8c1 5124 	str.w	r5, [r1, #292]	; 0x124
    6ffa:	f8bd 6154 	ldrh.w	r6, [sp, #340]	; 0x154
    6ffe:	f8c1 0128 	str.w	r0, [r1, #296]	; 0x128
    7002:	f8bd 5156 	ldrh.w	r5, [sp, #342]	; 0x156
    7006:	f89d 015d 	ldrb.w	r0, [sp, #349]	; 0x15d
    700a:	f881 c12c 	strb.w	ip, [r1, #300]	; 0x12c
    700e:	f881 e12d 	strb.w	lr, [r1, #301]	; 0x12d
    7012:	f8bd c158 	ldrh.w	ip, [sp, #344]	; 0x158
    7016:	f8bd e15a 	ldrh.w	lr, [sp, #346]	; 0x15a
    701a:	f881 712e 	strb.w	r7, [r1, #302]	; 0x12e
    701e:	f8c1 3130 	str.w	r3, [r1, #304]	; 0x130
    7022:	f89d 715c 	ldrb.w	r7, [sp, #348]	; 0x15c
    7026:	f89d 315e 	ldrb.w	r3, [sp, #350]	; 0x15e
                              &Mtr0_B, &Mtr0_HLFB_SCRx, 4, EVSYS_M0);
    ConnectorM1 = MotorDriver(ShiftRegister::SR_EN_OUT_1_MASK, &Mtr1_An,
    702a:	4a2b      	ldr	r2, [pc, #172]	; (70d8 <_ZN9ClearCore10SysManagerC1Ev+0xde0>)
    702c:	f8a1 c138 	strh.w	ip, [r1, #312]	; 0x138
    7030:	f8a1 e13a 	strh.w	lr, [r1, #314]	; 0x13a
    7034:	2401      	movs	r4, #1
    7036:	f881 812f 	strb.w	r8, [r1, #303]	; 0x12f
    703a:	f8a1 6134 	strh.w	r6, [r1, #308]	; 0x134
    703e:	f881 713c 	strb.w	r7, [r1, #316]	; 0x13c
    7042:	f881 013d 	strb.w	r0, [r1, #317]	; 0x13d
    7046:	f881 313e 	strb.w	r3, [r1, #318]	; 0x13e
    704a:	2605      	movs	r6, #5
    704c:	f8a1 5136 	strh.w	r5, [r1, #310]	; 0x136
    7050:	9d58      	ldr	r5, [sp, #352]	; 0x160
    7052:	4f22      	ldr	r7, [pc, #136]	; (70dc <_ZN9ClearCore10SysManagerC1Ev+0xde4>)
    7054:	9402      	str	r4, [sp, #8]
    7056:	e88d 0044 	stmia.w	sp, {r2, r6}
    705a:	a808      	add	r0, sp, #32
    705c:	f8c1 5140 	str.w	r5, [r1, #320]	; 0x140
    7060:	4b1f      	ldr	r3, [pc, #124]	; (70e0 <_ZN9ClearCore10SysManagerC1Ev+0xde8>)
    7062:	4a20      	ldr	r2, [pc, #128]	; (70e4 <_ZN9ClearCore10SysManagerC1Ev+0xdec>)
    7064:	f44f 6180 	mov.w	r1, #1024	; 0x400
    7068:	f008 f85c 	bl	f124 <_ZN9ClearCore11MotorDriverC1ENS_13ShiftRegister5MasksEPK15PeripheralRouteS5_S5_tt>
    706c:	f89d 1026 	ldrb.w	r1, [sp, #38]	; 0x26
    7070:	f8bd 2024 	ldrh.w	r2, [sp, #36]	; 0x24
    7074:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    7076:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
    7078:	9d0c      	ldr	r5, [sp, #48]	; 0x30
    707a:	980d      	ldr	r0, [sp, #52]	; 0x34
    707c:	71b9      	strb	r1, [r7, #6]
    707e:	990f      	ldr	r1, [sp, #60]	; 0x3c
    7080:	f89d 8038 	ldrb.w	r8, [sp, #56]	; 0x38
    7084:	f89d e048 	ldrb.w	lr, [sp, #72]	; 0x48
    7088:	f8dd a04a 	ldr.w	sl, [sp, #74]	; 0x4a
    708c:	f89d c039 	ldrb.w	ip, [sp, #57]	; 0x39
    7090:	80ba      	strh	r2, [r7, #4]
    7092:	60bb      	str	r3, [r7, #8]
    7094:	9a10      	ldr	r2, [sp, #64]	; 0x40
    7096:	9b11      	ldr	r3, [sp, #68]	; 0x44
    7098:	60fe      	str	r6, [r7, #12]
    709a:	613d      	str	r5, [r7, #16]
    709c:	f89d 605c 	ldrb.w	r6, [sp, #92]	; 0x5c
    70a0:	9d15      	ldr	r5, [sp, #84]	; 0x54
    70a2:	6178      	str	r0, [r7, #20]
    70a4:	61f9      	str	r1, [r7, #28]
    70a6:	9816      	ldr	r0, [sp, #88]	; 0x58
    70a8:	f887 8018 	strb.w	r8, [r7, #24]
    70ac:	a919      	add	r1, sp, #100	; 0x64
    70ae:	623a      	str	r2, [r7, #32]
    70b0:	627b      	str	r3, [r7, #36]	; 0x24
    70b2:	f887 e028 	strb.w	lr, [r7, #40]	; 0x28
    70b6:	f8c7 a02a 	str.w	sl, [r7, #42]	; 0x2a
    70ba:	637d      	str	r5, [r7, #52]	; 0x34
    70bc:	63b8      	str	r0, [r7, #56]	; 0x38
    70be:	f887 603c 	strb.w	r6, [r7, #60]	; 0x3c
    70c2:	f887 c019 	strb.w	ip, [r7, #25]
    70c6:	e00f      	b.n	70e8 <_ZN9ClearCore10SysManagerC1Ev+0xdf0>
    70c8:	0002cf50 	.word	0x0002cf50
    70cc:	0002d0c0 	.word	0x0002d0c0
    70d0:	0002cf00 	.word	0x0002cf00
    70d4:	20000c10 	.word	0x20000c10
    70d8:	0002d0f0 	.word	0x0002d0f0
    70dc:	20000d58 	.word	0x20000d58
    70e0:	0002d0d0 	.word	0x0002d0d0
    70e4:	0002d0e0 	.word	0x0002d0e0
    70e8:	f89d c05d 	ldrb.w	ip, [sp, #93]	; 0x5d
    70ec:	f89d 605e 	ldrb.w	r6, [sp, #94]	; 0x5e
    70f0:	f89d 0060 	ldrb.w	r0, [sp, #96]	; 0x60
    70f4:	f89d 5071 	ldrb.w	r5, [sp, #113]	; 0x71
    70f8:	f887 603e 	strb.w	r6, [r7, #62]	; 0x3e
    70fc:	c90e      	ldmia	r1, {r1, r2, r3}
    70fe:	e9dd ab22 	ldrd	sl, fp, [sp, #136]	; 0x88
    7102:	f89d 6072 	ldrb.w	r6, [sp, #114]	; 0x72
    7106:	f89d e070 	ldrb.w	lr, [sp, #112]	; 0x70
    710a:	f887 0040 	strb.w	r0, [r7, #64]	; 0x40
    710e:	6479      	str	r1, [r7, #68]	; 0x44
    7110:	981d      	ldr	r0, [sp, #116]	; 0x74
    7112:	991e      	ldr	r1, [sp, #120]	; 0x78
    7114:	64ba      	str	r2, [r7, #72]	; 0x48
    7116:	64fb      	str	r3, [r7, #76]	; 0x4c
    7118:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
    711a:	9b20      	ldr	r3, [sp, #128]	; 0x80
    711c:	f887 5051 	strb.w	r5, [r7, #81]	; 0x51
    7120:	f887 6052 	strb.w	r6, [r7, #82]	; 0x52
    7124:	9d24      	ldr	r5, [sp, #144]	; 0x90
    7126:	9e25      	ldr	r6, [sp, #148]	; 0x94
    7128:	f887 c03d 	strb.w	ip, [r7, #61]	; 0x3d
    712c:	f887 e050 	strb.w	lr, [r7, #80]	; 0x50
    7130:	6578      	str	r0, [r7, #84]	; 0x54
    7132:	65b9      	str	r1, [r7, #88]	; 0x58
    7134:	65fa      	str	r2, [r7, #92]	; 0x5c
    7136:	663b      	str	r3, [r7, #96]	; 0x60
    7138:	673d      	str	r5, [r7, #112]	; 0x70
    713a:	677e      	str	r6, [r7, #116]	; 0x74
    713c:	e9c7 ab1a 	strd	sl, fp, [r7, #104]	; 0x68
    7140:	e9dd ab26 	ldrd	sl, fp, [sp, #152]	; 0x98
    7144:	e9dd 232a 	ldrd	r2, r3, [sp, #168]	; 0xa8
    7148:	9928      	ldr	r1, [sp, #160]	; 0xa0
    714a:	982e      	ldr	r0, [sp, #184]	; 0xb8
    714c:	f8c7 1080 	str.w	r1, [r7, #128]	; 0x80
    7150:	4615      	mov	r5, r2
    7152:	9a2c      	ldr	r2, [sp, #176]	; 0xb0
    7154:	992f      	ldr	r1, [sp, #188]	; 0xbc
    7156:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
    715a:	461e      	mov	r6, r3
    715c:	9a30      	ldr	r2, [sp, #192]	; 0xc0
    715e:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
    7160:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    7164:	f8c7 0098 	str.w	r0, [r7, #152]	; 0x98
    7168:	9b31      	ldr	r3, [sp, #196]	; 0xc4
    716a:	9832      	ldr	r0, [sp, #200]	; 0xc8
    716c:	f8c7 109c 	str.w	r1, [r7, #156]	; 0x9c
    7170:	f8c7 20a0 	str.w	r2, [r7, #160]	; 0xa0
    7174:	9933      	ldr	r1, [sp, #204]	; 0xcc
    7176:	9a34      	ldr	r2, [sp, #208]	; 0xd0
    7178:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    717c:	f8c7 00a8 	str.w	r0, [r7, #168]	; 0xa8
    7180:	9b35      	ldr	r3, [sp, #212]	; 0xd4
    7182:	9836      	ldr	r0, [sp, #216]	; 0xd8
    7184:	f8c7 10ac 	str.w	r1, [r7, #172]	; 0xac
    7188:	f8c7 20b0 	str.w	r2, [r7, #176]	; 0xb0
    718c:	9937      	ldr	r1, [sp, #220]	; 0xdc
    718e:	9a38      	ldr	r2, [sp, #224]	; 0xe0
    7190:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    7194:	e9c7 ab1e 	strd	sl, fp, [r7, #120]	; 0x78
    7198:	e9c7 5622 	strd	r5, r6, [r7, #136]	; 0x88
    719c:	f8c7 00b8 	str.w	r0, [r7, #184]	; 0xb8
    71a0:	f8c7 10bc 	str.w	r1, [r7, #188]	; 0xbc
    71a4:	f8c7 20c0 	str.w	r2, [r7, #192]	; 0xc0
    71a8:	9d39      	ldr	r5, [sp, #228]	; 0xe4
    71aa:	983a      	ldr	r0, [sp, #232]	; 0xe8
    71ac:	993b      	ldr	r1, [sp, #236]	; 0xec
    71ae:	f89d 20f6 	ldrb.w	r2, [sp, #246]	; 0xf6
    71b2:	f89d 30f7 	ldrb.w	r3, [sp, #247]	; 0xf7
    71b6:	f8bd b0f0 	ldrh.w	fp, [sp, #240]	; 0xf0
    71ba:	f8bd a0f2 	ldrh.w	sl, [sp, #242]	; 0xf2
    71be:	f8bd 80f4 	ldrh.w	r8, [sp, #244]	; 0xf4
    71c2:	f89d c0f8 	ldrb.w	ip, [sp, #248]	; 0xf8
    71c6:	f8bd e0fa 	ldrh.w	lr, [sp, #250]	; 0xfa
    71ca:	f8bd 60fc 	ldrh.w	r6, [sp, #252]	; 0xfc
    71ce:	f8c7 50c4 	str.w	r5, [r7, #196]	; 0xc4
    71d2:	f8c7 00c8 	str.w	r0, [r7, #200]	; 0xc8
    71d6:	f8bd 50fe 	ldrh.w	r5, [sp, #254]	; 0xfe
    71da:	f8bd 0100 	ldrh.w	r0, [sp, #256]	; 0x100
    71de:	f8c7 10cc 	str.w	r1, [r7, #204]	; 0xcc
    71e2:	f887 20d6 	strb.w	r2, [r7, #214]	; 0xd6
    71e6:	f8bd 1102 	ldrh.w	r1, [sp, #258]	; 0x102
    71ea:	f89d 2104 	ldrb.w	r2, [sp, #260]	; 0x104
    71ee:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
    71f2:	9b42      	ldr	r3, [sp, #264]	; 0x108
    71f4:	f8a7 b0d0 	strh.w	fp, [r7, #208]	; 0xd0
    71f8:	f8a7 a0d2 	strh.w	sl, [r7, #210]	; 0xd2
    71fc:	f8a7 80d4 	strh.w	r8, [r7, #212]	; 0xd4
    7200:	f887 c0d8 	strb.w	ip, [r7, #216]	; 0xd8
    7204:	f8a7 e0da 	strh.w	lr, [r7, #218]	; 0xda
    7208:	f8a7 60dc 	strh.w	r6, [r7, #220]	; 0xdc
    720c:	f8a7 50de 	strh.w	r5, [r7, #222]	; 0xde
    7210:	f8a7 00e0 	strh.w	r0, [r7, #224]	; 0xe0
    7214:	f887 20e4 	strb.w	r2, [r7, #228]	; 0xe4
    7218:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    721c:	f8a7 10e2 	strh.w	r1, [r7, #226]	; 0xe2
    7220:	9943      	ldr	r1, [sp, #268]	; 0x10c
    7222:	9d44      	ldr	r5, [sp, #272]	; 0x110
    7224:	f89d 0114 	ldrb.w	r0, [sp, #276]	; 0x114
    7228:	f89d e115 	ldrb.w	lr, [sp, #277]	; 0x115
    722c:	f89d 6116 	ldrb.w	r6, [sp, #278]	; 0x116
    7230:	f8bd 2118 	ldrh.w	r2, [sp, #280]	; 0x118
    7234:	9b47      	ldr	r3, [sp, #284]	; 0x11c
    7236:	f89d 8120 	ldrb.w	r8, [sp, #288]	; 0x120
    723a:	f89d c121 	ldrb.w	ip, [sp, #289]	; 0x121
    723e:	f8c7 10ec 	str.w	r1, [r7, #236]	; 0xec
    7242:	f8c7 50f0 	str.w	r5, [r7, #240]	; 0xf0
    7246:	994b      	ldr	r1, [sp, #300]	; 0x12c
    7248:	9d49      	ldr	r5, [sp, #292]	; 0x124
    724a:	f887 00f4 	strb.w	r0, [r7, #244]	; 0xf4
    724e:	f887 e0f5 	strb.w	lr, [r7, #245]	; 0xf5
    7252:	984a      	ldr	r0, [sp, #296]	; 0x128
    7254:	f8bd e130 	ldrh.w	lr, [sp, #304]	; 0x130
    7258:	f887 60f6 	strb.w	r6, [r7, #246]	; 0xf6
    725c:	f8a7 20f8 	strh.w	r2, [r7, #248]	; 0xf8
    7260:	f8bd 6132 	ldrh.w	r6, [sp, #306]	; 0x132
    7264:	f89d 2134 	ldrb.w	r2, [sp, #308]	; 0x134
    7268:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
    726c:	9b4e      	ldr	r3, [sp, #312]	; 0x138
    726e:	f887 8100 	strb.w	r8, [r7, #256]	; 0x100
    7272:	f887 c101 	strb.w	ip, [r7, #257]	; 0x101
    7276:	f8c7 0108 	str.w	r0, [r7, #264]	; 0x108
    727a:	f8c7 110c 	str.w	r1, [r7, #268]	; 0x10c
    727e:	f8a7 e110 	strh.w	lr, [r7, #272]	; 0x110
    7282:	f8a7 6112 	strh.w	r6, [r7, #274]	; 0x112
    7286:	f887 2114 	strb.w	r2, [r7, #276]	; 0x114
    728a:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
    728e:	f8c7 5104 	str.w	r5, [r7, #260]	; 0x104
    7292:	9d4f      	ldr	r5, [sp, #316]	; 0x13c
    7294:	9b50      	ldr	r3, [sp, #320]	; 0x140
    7296:	9851      	ldr	r0, [sp, #324]	; 0x144
    7298:	9952      	ldr	r1, [sp, #328]	; 0x148
    729a:	f89d c14c 	ldrb.w	ip, [sp, #332]	; 0x14c
    729e:	f89d e14d 	ldrb.w	lr, [sp, #333]	; 0x14d
    72a2:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
    72a6:	9b54      	ldr	r3, [sp, #336]	; 0x150
    72a8:	f89d 614e 	ldrb.w	r6, [sp, #334]	; 0x14e
    72ac:	f8bd 8154 	ldrh.w	r8, [sp, #340]	; 0x154
    72b0:	f89d a15d 	ldrb.w	sl, [sp, #349]	; 0x15d
    72b4:	f8c7 511c 	str.w	r5, [r7, #284]	; 0x11c
    72b8:	f8c7 0124 	str.w	r0, [r7, #292]	; 0x124
    72bc:	f89d 514f 	ldrb.w	r5, [sp, #335]	; 0x14f
    72c0:	f8bd 0156 	ldrh.w	r0, [sp, #342]	; 0x156
    72c4:	f8c7 1128 	str.w	r1, [r7, #296]	; 0x128
    72c8:	f887 c12c 	strb.w	ip, [r7, #300]	; 0x12c
    72cc:	f8bd 1158 	ldrh.w	r1, [sp, #344]	; 0x158
    72d0:	f89d c15c 	ldrb.w	ip, [sp, #348]	; 0x15c
    72d4:	f887 e12d 	strb.w	lr, [r7, #301]	; 0x12d
    72d8:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
    72dc:	f8bd e15a 	ldrh.w	lr, [sp, #346]	; 0x15a
    72e0:	f89d 315e 	ldrb.w	r3, [sp, #350]	; 0x15e
                              &Mtr1_B, &Mtr1_HLFB, 5, EVSYS_M1);
    ConnectorM2 = MotorDriver(ShiftRegister::SR_EN_OUT_2_MASK,
    72e4:	4aca      	ldr	r2, [pc, #808]	; (7610 <_ZN9ClearCore10SysManagerC1Ev+0x1318>)
    72e6:	f8a7 e13a 	strh.w	lr, [r7, #314]	; 0x13a
    72ea:	f887 c13c 	strb.w	ip, [r7, #316]	; 0x13c
    72ee:	f887 612e 	strb.w	r6, [r7, #302]	; 0x12e
    72f2:	f887 512f 	strb.w	r5, [r7, #303]	; 0x12f
    72f6:	f8a7 8134 	strh.w	r8, [r7, #308]	; 0x134
    72fa:	2503      	movs	r5, #3
    72fc:	2602      	movs	r6, #2
    72fe:	f8a7 0136 	strh.w	r0, [r7, #310]	; 0x136
    7302:	f887 a13d 	strb.w	sl, [r7, #317]	; 0x13d
    7306:	f887 313e 	strb.w	r3, [r7, #318]	; 0x13e
    730a:	f8a7 1138 	strh.w	r1, [r7, #312]	; 0x138
    730e:	9958      	ldr	r1, [sp, #352]	; 0x160
    7310:	4bc0      	ldr	r3, [pc, #768]	; (7614 <_ZN9ClearCore10SysManagerC1Ev+0x131c>)
    7312:	e88d 0064 	stmia.w	sp, {r2, r5, r6}
    7316:	a808      	add	r0, sp, #32
    7318:	f8c7 1140 	str.w	r1, [r7, #320]	; 0x140
    731c:	4abe      	ldr	r2, [pc, #760]	; (7618 <_ZN9ClearCore10SysManagerC1Ev+0x1320>)
    731e:	4fbf      	ldr	r7, [pc, #764]	; (761c <_ZN9ClearCore10SysManagerC1Ev+0x1324>)
    7320:	f44f 7100 	mov.w	r1, #512	; 0x200
    7324:	f007 fefe 	bl	f124 <_ZN9ClearCore11MotorDriverC1ENS_13ShiftRegister5MasksEPK15PeripheralRouteS5_S5_tt>
    7328:	f8bd c024 	ldrh.w	ip, [sp, #36]	; 0x24
    732c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    732e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    7330:	990d      	ldr	r1, [sp, #52]	; 0x34
    7332:	f89d e026 	ldrb.w	lr, [sp, #38]	; 0x26
    7336:	980c      	ldr	r0, [sp, #48]	; 0x30
    7338:	f8a7 c004 	strh.w	ip, [r7, #4]
    733c:	60ba      	str	r2, [r7, #8]
    733e:	f89d c038 	ldrb.w	ip, [sp, #56]	; 0x38
    7342:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
    7344:	60fb      	str	r3, [r7, #12]
    7346:	6179      	str	r1, [r7, #20]
    7348:	9b10      	ldr	r3, [sp, #64]	; 0x40
    734a:	9915      	ldr	r1, [sp, #84]	; 0x54
    734c:	f89d 8048 	ldrb.w	r8, [sp, #72]	; 0x48
    7350:	f887 e006 	strb.w	lr, [r7, #6]
    7354:	6138      	str	r0, [r7, #16]
    7356:	f89d e039 	ldrb.w	lr, [sp, #57]	; 0x39
    735a:	9811      	ldr	r0, [sp, #68]	; 0x44
    735c:	f887 c018 	strb.w	ip, [r7, #24]
    7360:	61fa      	str	r2, [r7, #28]
    7362:	f8dd c04a 	ldr.w	ip, [sp, #74]	; 0x4a
    7366:	9a16      	ldr	r2, [sp, #88]	; 0x58
    7368:	623b      	str	r3, [r7, #32]
    736a:	6379      	str	r1, [r7, #52]	; 0x34
    736c:	f89d 305c 	ldrb.w	r3, [sp, #92]	; 0x5c
    7370:	f887 e019 	strb.w	lr, [r7, #25]
    7374:	a919      	add	r1, sp, #100	; 0x64
    7376:	6278      	str	r0, [r7, #36]	; 0x24
    7378:	f887 8028 	strb.w	r8, [r7, #40]	; 0x28
    737c:	63ba      	str	r2, [r7, #56]	; 0x38
    737e:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
    7382:	f8c7 c02a 	str.w	ip, [r7, #42]	; 0x2a
    7386:	f89d c05d 	ldrb.w	ip, [sp, #93]	; 0x5d
    738a:	f89d 0060 	ldrb.w	r0, [sp, #96]	; 0x60
    738e:	f89d e05e 	ldrb.w	lr, [sp, #94]	; 0x5e
    7392:	f887 0040 	strb.w	r0, [r7, #64]	; 0x40
    7396:	c90e      	ldmia	r1, {r1, r2, r3}
    7398:	e9dd ab22 	ldrd	sl, fp, [sp, #136]	; 0x88
    739c:	f89d 0072 	ldrb.w	r0, [sp, #114]	; 0x72
    73a0:	6479      	str	r1, [r7, #68]	; 0x44
    73a2:	64ba      	str	r2, [r7, #72]	; 0x48
    73a4:	991d      	ldr	r1, [sp, #116]	; 0x74
    73a6:	9a1e      	ldr	r2, [sp, #120]	; 0x78
    73a8:	f887 c03d 	strb.w	ip, [r7, #61]	; 0x3d
    73ac:	f887 e03e 	strb.w	lr, [r7, #62]	; 0x3e
    73b0:	f89d c070 	ldrb.w	ip, [sp, #112]	; 0x70
    73b4:	f89d e071 	ldrb.w	lr, [sp, #113]	; 0x71
    73b8:	64fb      	str	r3, [r7, #76]	; 0x4c
    73ba:	f887 0052 	strb.w	r0, [r7, #82]	; 0x52
    73be:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
    73c0:	9820      	ldr	r0, [sp, #128]	; 0x80
    73c2:	6579      	str	r1, [r7, #84]	; 0x54
    73c4:	65ba      	str	r2, [r7, #88]	; 0x58
    73c6:	9924      	ldr	r1, [sp, #144]	; 0x90
    73c8:	9a25      	ldr	r2, [sp, #148]	; 0x94
    73ca:	f887 c050 	strb.w	ip, [r7, #80]	; 0x50
    73ce:	f887 e051 	strb.w	lr, [r7, #81]	; 0x51
    73d2:	65fb      	str	r3, [r7, #92]	; 0x5c
    73d4:	e9c7 ab1a 	strd	sl, fp, [r7, #104]	; 0x68
    73d8:	677a      	str	r2, [r7, #116]	; 0x74
    73da:	6638      	str	r0, [r7, #96]	; 0x60
    73dc:	6739      	str	r1, [r7, #112]	; 0x70
    73de:	e9dd 0126 	ldrd	r0, r1, [sp, #152]	; 0x98
    73e2:	9b28      	ldr	r3, [sp, #160]	; 0xa0
    73e4:	9a2c      	ldr	r2, [sp, #176]	; 0xb0
    73e6:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    73ea:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
    73ee:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
    73f0:	9a2e      	ldr	r2, [sp, #184]	; 0xb8
    73f2:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    73f6:	f8c7 2098 	str.w	r2, [r7, #152]	; 0x98
    73fa:	9b2f      	ldr	r3, [sp, #188]	; 0xbc
    73fc:	9a30      	ldr	r2, [sp, #192]	; 0xc0
    73fe:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    7402:	f8c7 20a0 	str.w	r2, [r7, #160]	; 0xa0
    7406:	9b31      	ldr	r3, [sp, #196]	; 0xc4
    7408:	9a32      	ldr	r2, [sp, #200]	; 0xc8
    740a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    740e:	e9dd ab2a 	ldrd	sl, fp, [sp, #168]	; 0xa8
    7412:	9b33      	ldr	r3, [sp, #204]	; 0xcc
    7414:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
    7418:	9a34      	ldr	r2, [sp, #208]	; 0xd0
    741a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    741e:	f8c7 20b0 	str.w	r2, [r7, #176]	; 0xb0
    7422:	9b35      	ldr	r3, [sp, #212]	; 0xd4
    7424:	9a36      	ldr	r2, [sp, #216]	; 0xd8
    7426:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    742a:	e9c7 011e 	strd	r0, r1, [r7, #120]	; 0x78
    742e:	9b37      	ldr	r3, [sp, #220]	; 0xdc
    7430:	f8c7 20b8 	str.w	r2, [r7, #184]	; 0xb8
    7434:	a939      	add	r1, sp, #228	; 0xe4
    7436:	9a38      	ldr	r2, [sp, #224]	; 0xe0
    7438:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    743c:	e9c7 ab22 	strd	sl, fp, [r7, #136]	; 0x88
    7440:	f8c7 20c0 	str.w	r2, [r7, #192]	; 0xc0
    7444:	c90e      	ldmia	r1, {r1, r2, r3}
    7446:	f8bd c0f2 	ldrh.w	ip, [sp, #242]	; 0xf2
    744a:	f8bd e0f4 	ldrh.w	lr, [sp, #244]	; 0xf4
    744e:	f89d 00f6 	ldrb.w	r0, [sp, #246]	; 0xf6
    7452:	f8c7 10c4 	str.w	r1, [r7, #196]	; 0xc4
    7456:	f8c7 20c8 	str.w	r2, [r7, #200]	; 0xc8
    745a:	f89d 10f7 	ldrb.w	r1, [sp, #247]	; 0xf7
    745e:	f89d 20f8 	ldrb.w	r2, [sp, #248]	; 0xf8
    7462:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    7466:	f8bd 30fa 	ldrh.w	r3, [sp, #250]	; 0xfa
    746a:	f8bd 80f0 	ldrh.w	r8, [sp, #240]	; 0xf0
    746e:	f8a7 c0d2 	strh.w	ip, [r7, #210]	; 0xd2
    7472:	f8a7 e0d4 	strh.w	lr, [r7, #212]	; 0xd4
    7476:	f8bd c0fc 	ldrh.w	ip, [sp, #252]	; 0xfc
    747a:	f8bd e0fe 	ldrh.w	lr, [sp, #254]	; 0xfe
    747e:	f887 00d6 	strb.w	r0, [r7, #214]	; 0xd6
    7482:	f887 10d7 	strb.w	r1, [r7, #215]	; 0xd7
    7486:	f8bd 0100 	ldrh.w	r0, [sp, #256]	; 0x100
    748a:	f8bd 1102 	ldrh.w	r1, [sp, #258]	; 0x102
    748e:	f887 20d8 	strb.w	r2, [r7, #216]	; 0xd8
    7492:	f8a7 30da 	strh.w	r3, [r7, #218]	; 0xda
    7496:	f89d 2104 	ldrb.w	r2, [sp, #260]	; 0x104
    749a:	9b42      	ldr	r3, [sp, #264]	; 0x108
    749c:	f8a7 80d0 	strh.w	r8, [r7, #208]	; 0xd0
    74a0:	f8a7 c0dc 	strh.w	ip, [r7, #220]	; 0xdc
    74a4:	f8a7 e0de 	strh.w	lr, [r7, #222]	; 0xde
    74a8:	f8a7 00e0 	strh.w	r0, [r7, #224]	; 0xe0
    74ac:	f8a7 10e2 	strh.w	r1, [r7, #226]	; 0xe2
    74b0:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    74b4:	f887 20e4 	strb.w	r2, [r7, #228]	; 0xe4
    74b8:	9a43      	ldr	r2, [sp, #268]	; 0x10c
    74ba:	f8dd e110 	ldr.w	lr, [sp, #272]	; 0x110
    74be:	f89d 8114 	ldrb.w	r8, [sp, #276]	; 0x114
    74c2:	f89d c115 	ldrb.w	ip, [sp, #277]	; 0x115
    74c6:	f89d 3116 	ldrb.w	r3, [sp, #278]	; 0x116
    74ca:	f8bd 0118 	ldrh.w	r0, [sp, #280]	; 0x118
    74ce:	9947      	ldr	r1, [sp, #284]	; 0x11c
    74d0:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
    74d4:	f8c7 e0f0 	str.w	lr, [r7, #240]	; 0xf0
    74d8:	9a49      	ldr	r2, [sp, #292]	; 0x124
    74da:	f89d e120 	ldrb.w	lr, [sp, #288]	; 0x120
    74de:	f887 80f4 	strb.w	r8, [r7, #244]	; 0xf4
    74e2:	f887 c0f5 	strb.w	ip, [r7, #245]	; 0xf5
    74e6:	f89d 8121 	ldrb.w	r8, [sp, #289]	; 0x121
    74ea:	f8bd c130 	ldrh.w	ip, [sp, #304]	; 0x130
    74ee:	f887 30f6 	strb.w	r3, [r7, #246]	; 0xf6
    74f2:	f8a7 00f8 	strh.w	r0, [r7, #248]	; 0xf8
    74f6:	9b4a      	ldr	r3, [sp, #296]	; 0x128
    74f8:	984b      	ldr	r0, [sp, #300]	; 0x12c
    74fa:	f8c7 10fc 	str.w	r1, [r7, #252]	; 0xfc
    74fe:	f887 e100 	strb.w	lr, [r7, #256]	; 0x100
    7502:	f89d 1134 	ldrb.w	r1, [sp, #308]	; 0x134
    7506:	f8bd e132 	ldrh.w	lr, [sp, #306]	; 0x132
    750a:	f8c7 2104 	str.w	r2, [r7, #260]	; 0x104
    750e:	9a4e      	ldr	r2, [sp, #312]	; 0x138
    7510:	f887 8101 	strb.w	r8, [r7, #257]	; 0x101
    7514:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
    7518:	f8c7 010c 	str.w	r0, [r7, #268]	; 0x10c
    751c:	f8a7 c110 	strh.w	ip, [r7, #272]	; 0x110
    7520:	f8a7 e112 	strh.w	lr, [r7, #274]	; 0x112
    7524:	f8c7 2118 	str.w	r2, [r7, #280]	; 0x118
    7528:	f887 1114 	strb.w	r1, [r7, #276]	; 0x114
    752c:	994f      	ldr	r1, [sp, #316]	; 0x13c
    752e:	9b51      	ldr	r3, [sp, #324]	; 0x144
    7530:	9a50      	ldr	r2, [sp, #320]	; 0x140
    7532:	f8c7 111c 	str.w	r1, [r7, #284]	; 0x11c
    7536:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
    753a:	f89d 114d 	ldrb.w	r1, [sp, #333]	; 0x14d
    753e:	f89d 314f 	ldrb.w	r3, [sp, #335]	; 0x14f
    7542:	9852      	ldr	r0, [sp, #328]	; 0x148
    7544:	f89d c14e 	ldrb.w	ip, [sp, #334]	; 0x14e
    7548:	f8c7 2120 	str.w	r2, [r7, #288]	; 0x120
    754c:	f887 112d 	strb.w	r1, [r7, #301]	; 0x12d
    7550:	9a54      	ldr	r2, [sp, #336]	; 0x150
    7552:	f8bd 1154 	ldrh.w	r1, [sp, #340]	; 0x154
    7556:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
    755a:	f8bd 3158 	ldrh.w	r3, [sp, #344]	; 0x158
    755e:	f89d a14c 	ldrb.w	sl, [sp, #332]	; 0x14c
    7562:	f8c7 0128 	str.w	r0, [r7, #296]	; 0x128
    7566:	f887 c12e 	strb.w	ip, [r7, #302]	; 0x12e
    756a:	f8bd 015a 	ldrh.w	r0, [sp, #346]	; 0x15a
    756e:	f8bd c156 	ldrh.w	ip, [sp, #342]	; 0x156
    7572:	f8c7 2130 	str.w	r2, [r7, #304]	; 0x130
    7576:	f8a7 1134 	strh.w	r1, [r7, #308]	; 0x134
    757a:	f89d 215d 	ldrb.w	r2, [sp, #349]	; 0x15d
    757e:	f89d 115c 	ldrb.w	r1, [sp, #348]	; 0x15c
    7582:	f8a7 3138 	strh.w	r3, [r7, #312]	; 0x138
    7586:	f89d 315e 	ldrb.w	r3, [sp, #350]	; 0x15e
    758a:	f8a7 c136 	strh.w	ip, [r7, #310]	; 0x136
                              &Mtr2_An_Sdrvr2_PWMA, &Mtr2_B_Sdrvr2_PWMB,
                              &Mtr2_HLFB_Sdrvr2_Trig, 3, EVSYS_M2);
    ConnectorM3 = MotorDriver(ShiftRegister::SR_EN_OUT_3_MASK,
    758e:	f04f 0800 	mov.w	r8, #0
    7592:	f8df e098 	ldr.w	lr, [pc, #152]	; 762c <_ZN9ClearCore10SysManagerC1Ev+0x1334>
    7596:	f887 a12c 	strb.w	sl, [r7, #300]	; 0x12c
    759a:	f8a7 013a 	strh.w	r0, [r7, #314]	; 0x13a
    759e:	f887 213d 	strb.w	r2, [r7, #317]	; 0x13d
    75a2:	f887 313e 	strb.w	r3, [r7, #318]	; 0x13e
    75a6:	f887 113c 	strb.w	r1, [r7, #316]	; 0x13c
    75aa:	9958      	ldr	r1, [sp, #352]	; 0x160
    75ac:	4b1c      	ldr	r3, [pc, #112]	; (7620 <_ZN9ClearCore10SysManagerC1Ev+0x1328>)
    75ae:	9502      	str	r5, [sp, #8]
    75b0:	f8cd 8004 	str.w	r8, [sp, #4]
    75b4:	f8cd e000 	str.w	lr, [sp]
    75b8:	a808      	add	r0, sp, #32
    75ba:	f8c7 1140 	str.w	r1, [r7, #320]	; 0x140
    75be:	4a19      	ldr	r2, [pc, #100]	; (7624 <_ZN9ClearCore10SysManagerC1Ev+0x132c>)
    75c0:	4f19      	ldr	r7, [pc, #100]	; (7628 <_ZN9ClearCore10SysManagerC1Ev+0x1330>)
    75c2:	f44f 7180 	mov.w	r1, #256	; 0x100
    75c6:	f007 fdad 	bl	f124 <_ZN9ClearCore11MotorDriverC1ENS_13ShiftRegister5MasksEPK15PeripheralRouteS5_S5_tt>
    75ca:	a80a      	add	r0, sp, #40	; 0x28
    75cc:	c807      	ldmia	r0, {r0, r1, r2}
    75ce:	f8bd 3024 	ldrh.w	r3, [sp, #36]	; 0x24
    75d2:	f89d e026 	ldrb.w	lr, [sp, #38]	; 0x26
    75d6:	80bb      	strh	r3, [r7, #4]
    75d8:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    75da:	f887 e006 	strb.w	lr, [r7, #6]
    75de:	60b8      	str	r0, [r7, #8]
    75e0:	f89d e038 	ldrb.w	lr, [sp, #56]	; 0x38
    75e4:	f89d 0039 	ldrb.w	r0, [sp, #57]	; 0x39
    75e8:	60f9      	str	r1, [r7, #12]
    75ea:	613a      	str	r2, [r7, #16]
    75ec:	990f      	ldr	r1, [sp, #60]	; 0x3c
    75ee:	9a10      	ldr	r2, [sp, #64]	; 0x40
    75f0:	617b      	str	r3, [r7, #20]
    75f2:	9b11      	ldr	r3, [sp, #68]	; 0x44
    75f4:	f887 e018 	strb.w	lr, [r7, #24]
    75f8:	7678      	strb	r0, [r7, #25]
    75fa:	f89d e048 	ldrb.w	lr, [sp, #72]	; 0x48
    75fe:	f8dd 004a 	ldr.w	r0, [sp, #74]	; 0x4a
    7602:	61f9      	str	r1, [r7, #28]
    7604:	623a      	str	r2, [r7, #32]
    7606:	9915      	ldr	r1, [sp, #84]	; 0x54
    7608:	9a16      	ldr	r2, [sp, #88]	; 0x58
    760a:	627b      	str	r3, [r7, #36]	; 0x24
    760c:	e010      	b.n	7630 <_ZN9ClearCore10SysManagerC1Ev+0x1338>
    760e:	bf00      	nop
    7610:	0002d000 	.word	0x0002d000
    7614:	0002cfa0 	.word	0x0002cfa0
    7618:	0002cfe0 	.word	0x0002cfe0
    761c:	20000ea0 	.word	0x20000ea0
    7620:	0002cfb0 	.word	0x0002cfb0
    7624:	0002cff0 	.word	0x0002cff0
    7628:	20000fe8 	.word	0x20000fe8
    762c:	0002d010 	.word	0x0002d010
    7630:	f89d 305c 	ldrb.w	r3, [sp, #92]	; 0x5c
    7634:	f8c7 002a 	str.w	r0, [r7, #42]	; 0x2a
    7638:	6379      	str	r1, [r7, #52]	; 0x34
    763a:	63ba      	str	r2, [r7, #56]	; 0x38
    763c:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
    7640:	f887 e028 	strb.w	lr, [r7, #40]	; 0x28
    7644:	f89d e05d 	ldrb.w	lr, [sp, #93]	; 0x5d
    7648:	f89d 3060 	ldrb.w	r3, [sp, #96]	; 0x60
    764c:	9919      	ldr	r1, [sp, #100]	; 0x64
    764e:	9a1a      	ldr	r2, [sp, #104]	; 0x68
    7650:	f887 3040 	strb.w	r3, [r7, #64]	; 0x40
    7654:	e9dd ab22 	ldrd	sl, fp, [sp, #136]	; 0x88
    7658:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
    765a:	6479      	str	r1, [r7, #68]	; 0x44
    765c:	64ba      	str	r2, [r7, #72]	; 0x48
    765e:	f89d 1071 	ldrb.w	r1, [sp, #113]	; 0x71
    7662:	f89d 2072 	ldrb.w	r2, [sp, #114]	; 0x72
    7666:	f89d 005e 	ldrb.w	r0, [sp, #94]	; 0x5e
    766a:	64fb      	str	r3, [r7, #76]	; 0x4c
    766c:	f887 1051 	strb.w	r1, [r7, #81]	; 0x51
    7670:	9b1d      	ldr	r3, [sp, #116]	; 0x74
    7672:	991e      	ldr	r1, [sp, #120]	; 0x78
    7674:	f887 2052 	strb.w	r2, [r7, #82]	; 0x52
    7678:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
    767a:	f887 003e 	strb.w	r0, [r7, #62]	; 0x3e
    767e:	657b      	str	r3, [r7, #84]	; 0x54
    7680:	f89d 0070 	ldrb.w	r0, [sp, #112]	; 0x70
    7684:	9b20      	ldr	r3, [sp, #128]	; 0x80
    7686:	65b9      	str	r1, [r7, #88]	; 0x58
    7688:	65fa      	str	r2, [r7, #92]	; 0x5c
    768a:	9924      	ldr	r1, [sp, #144]	; 0x90
    768c:	9a25      	ldr	r2, [sp, #148]	; 0x94
    768e:	f887 e03d 	strb.w	lr, [r7, #61]	; 0x3d
    7692:	f887 0050 	strb.w	r0, [r7, #80]	; 0x50
    7696:	e9c7 ab1a 	strd	sl, fp, [r7, #104]	; 0x68
    769a:	6739      	str	r1, [r7, #112]	; 0x70
    769c:	663b      	str	r3, [r7, #96]	; 0x60
    769e:	677a      	str	r2, [r7, #116]	; 0x74
    76a0:	e9dd 2326 	ldrd	r2, r3, [sp, #152]	; 0x98
    76a4:	9928      	ldr	r1, [sp, #160]	; 0xa0
    76a6:	f8c7 1080 	str.w	r1, [r7, #128]	; 0x80
    76aa:	992c      	ldr	r1, [sp, #176]	; 0xb0
    76ac:	f8c7 1090 	str.w	r1, [r7, #144]	; 0x90
    76b0:	992d      	ldr	r1, [sp, #180]	; 0xb4
    76b2:	f8c7 1094 	str.w	r1, [r7, #148]	; 0x94
    76b6:	992e      	ldr	r1, [sp, #184]	; 0xb8
    76b8:	f8c7 1098 	str.w	r1, [r7, #152]	; 0x98
    76bc:	992f      	ldr	r1, [sp, #188]	; 0xbc
    76be:	f8c7 109c 	str.w	r1, [r7, #156]	; 0x9c
    76c2:	9930      	ldr	r1, [sp, #192]	; 0xc0
    76c4:	f8c7 10a0 	str.w	r1, [r7, #160]	; 0xa0
    76c8:	9931      	ldr	r1, [sp, #196]	; 0xc4
    76ca:	f8c7 10a4 	str.w	r1, [r7, #164]	; 0xa4
    76ce:	9932      	ldr	r1, [sp, #200]	; 0xc8
    76d0:	f8c7 10a8 	str.w	r1, [r7, #168]	; 0xa8
    76d4:	9933      	ldr	r1, [sp, #204]	; 0xcc
    76d6:	f8c7 10ac 	str.w	r1, [r7, #172]	; 0xac
    76da:	9934      	ldr	r1, [sp, #208]	; 0xd0
    76dc:	f8c7 10b0 	str.w	r1, [r7, #176]	; 0xb0
    76e0:	9935      	ldr	r1, [sp, #212]	; 0xd4
    76e2:	f8c7 10b4 	str.w	r1, [r7, #180]	; 0xb4
    76e6:	e9dd ab2a 	ldrd	sl, fp, [sp, #168]	; 0xa8
    76ea:	9936      	ldr	r1, [sp, #216]	; 0xd8
    76ec:	f8c7 10b8 	str.w	r1, [r7, #184]	; 0xb8
    76f0:	9937      	ldr	r1, [sp, #220]	; 0xdc
    76f2:	f8c7 10bc 	str.w	r1, [r7, #188]	; 0xbc
    76f6:	9938      	ldr	r1, [sp, #224]	; 0xe0
    76f8:	f8c7 10c0 	str.w	r1, [r7, #192]	; 0xc0
    76fc:	e9c7 ab22 	strd	sl, fp, [r7, #136]	; 0x88
    7700:	e9c7 231e 	strd	r2, r3, [r7, #120]	; 0x78
    7704:	9b39      	ldr	r3, [sp, #228]	; 0xe4
    7706:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
    770a:	983a      	ldr	r0, [sp, #232]	; 0xe8
    770c:	993b      	ldr	r1, [sp, #236]	; 0xec
    770e:	f8bd 20f2 	ldrh.w	r2, [sp, #242]	; 0xf2
    7712:	f8bd 30f4 	ldrh.w	r3, [sp, #244]	; 0xf4
    7716:	f89d e0f6 	ldrb.w	lr, [sp, #246]	; 0xf6
    771a:	f8c7 00c8 	str.w	r0, [r7, #200]	; 0xc8
    771e:	f8c7 10cc 	str.w	r1, [r7, #204]	; 0xcc
    7722:	f89d 00f7 	ldrb.w	r0, [sp, #247]	; 0xf7
    7726:	f89d 10f8 	ldrb.w	r1, [sp, #248]	; 0xf8
    772a:	f8a7 20d2 	strh.w	r2, [r7, #210]	; 0xd2
    772e:	f8a7 30d4 	strh.w	r3, [r7, #212]	; 0xd4
    7732:	f8bd 20fa 	ldrh.w	r2, [sp, #250]	; 0xfa
    7736:	f8bd 30fc 	ldrh.w	r3, [sp, #252]	; 0xfc
    773a:	f8bd c0f0 	ldrh.w	ip, [sp, #240]	; 0xf0
    773e:	f887 e0d6 	strb.w	lr, [r7, #214]	; 0xd6
    7742:	f887 00d7 	strb.w	r0, [r7, #215]	; 0xd7
    7746:	f8bd e0fe 	ldrh.w	lr, [sp, #254]	; 0xfe
    774a:	f8bd 0100 	ldrh.w	r0, [sp, #256]	; 0x100
    774e:	f887 10d8 	strb.w	r1, [r7, #216]	; 0xd8
    7752:	f8a7 20da 	strh.w	r2, [r7, #218]	; 0xda
    7756:	f8bd 1102 	ldrh.w	r1, [sp, #258]	; 0x102
    775a:	f89d 2104 	ldrb.w	r2, [sp, #260]	; 0x104
    775e:	f8a7 30dc 	strh.w	r3, [r7, #220]	; 0xdc
    7762:	9b42      	ldr	r3, [sp, #264]	; 0x108
    7764:	f8a7 c0d0 	strh.w	ip, [r7, #208]	; 0xd0
    7768:	f8a7 e0de 	strh.w	lr, [r7, #222]	; 0xde
    776c:	f8a7 00e0 	strh.w	r0, [r7, #224]	; 0xe0
    7770:	f8a7 10e2 	strh.w	r1, [r7, #226]	; 0xe2
    7774:	f887 20e4 	strb.w	r2, [r7, #228]	; 0xe4
    7778:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    777c:	9b43      	ldr	r3, [sp, #268]	; 0x10c
    777e:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    7782:	9844      	ldr	r0, [sp, #272]	; 0x110
    7784:	f89d e114 	ldrb.w	lr, [sp, #276]	; 0x114
    7788:	f89d 1115 	ldrb.w	r1, [sp, #277]	; 0x115
    778c:	f89d 2116 	ldrb.w	r2, [sp, #278]	; 0x116
    7790:	f8bd 3118 	ldrh.w	r3, [sp, #280]	; 0x118
    7794:	f8c7 00f0 	str.w	r0, [r7, #240]	; 0xf0
    7798:	f887 e0f4 	strb.w	lr, [r7, #244]	; 0xf4
    779c:	9847      	ldr	r0, [sp, #284]	; 0x11c
    779e:	f89d e120 	ldrb.w	lr, [sp, #288]	; 0x120
    77a2:	f887 10f5 	strb.w	r1, [r7, #245]	; 0xf5
    77a6:	f887 20f6 	strb.w	r2, [r7, #246]	; 0xf6
    77aa:	f89d 1121 	ldrb.w	r1, [sp, #289]	; 0x121
    77ae:	9a49      	ldr	r2, [sp, #292]	; 0x124
    77b0:	f8a7 30f8 	strh.w	r3, [r7, #248]	; 0xf8
    77b4:	9b4a      	ldr	r3, [sp, #296]	; 0x128
    77b6:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    77ba:	f887 e100 	strb.w	lr, [r7, #256]	; 0x100
    77be:	984b      	ldr	r0, [sp, #300]	; 0x12c
    77c0:	f8bd e130 	ldrh.w	lr, [sp, #304]	; 0x130
    77c4:	f887 1101 	strb.w	r1, [r7, #257]	; 0x101
    77c8:	f8c7 2104 	str.w	r2, [r7, #260]	; 0x104
    77cc:	f8bd 1132 	ldrh.w	r1, [sp, #306]	; 0x132
    77d0:	f89d 2134 	ldrb.w	r2, [sp, #308]	; 0x134
    77d4:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
    77d8:	9b4e      	ldr	r3, [sp, #312]	; 0x138
    77da:	f8c7 010c 	str.w	r0, [r7, #268]	; 0x10c
    77de:	f8a7 e110 	strh.w	lr, [r7, #272]	; 0x110
    77e2:	f8a7 1112 	strh.w	r1, [r7, #274]	; 0x112
    77e6:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
    77ea:	f887 2114 	strb.w	r2, [r7, #276]	; 0x114
    77ee:	9a4f      	ldr	r2, [sp, #316]	; 0x13c
    77f0:	f8c7 211c 	str.w	r2, [r7, #284]	; 0x11c
    77f4:	9850      	ldr	r0, [sp, #320]	; 0x140
    77f6:	9951      	ldr	r1, [sp, #324]	; 0x144
    77f8:	9a52      	ldr	r2, [sp, #328]	; 0x148
    77fa:	f8c7 0120 	str.w	r0, [r7, #288]	; 0x120
    77fe:	f8c7 1124 	str.w	r1, [r7, #292]	; 0x124
    7802:	f89d 014e 	ldrb.w	r0, [sp, #334]	; 0x14e
    7806:	f89d 114f 	ldrb.w	r1, [sp, #335]	; 0x14f
    780a:	f8c7 2128 	str.w	r2, [r7, #296]	; 0x128
    780e:	9a54      	ldr	r2, [sp, #336]	; 0x150
    7810:	f89d c14d 	ldrb.w	ip, [sp, #333]	; 0x14d
    7814:	f887 012e 	strb.w	r0, [r7, #302]	; 0x12e
    7818:	f887 112f 	strb.w	r1, [r7, #303]	; 0x12f
    781c:	f8bd 0156 	ldrh.w	r0, [sp, #342]	; 0x156
    7820:	f8bd 1158 	ldrh.w	r1, [sp, #344]	; 0x158
    7824:	f8c7 2130 	str.w	r2, [r7, #304]	; 0x130
    7828:	f8bd 215a 	ldrh.w	r2, [sp, #346]	; 0x15a
    782c:	f89d a14c 	ldrb.w	sl, [sp, #332]	; 0x14c
    7830:	f887 c12d 	strb.w	ip, [r7, #301]	; 0x12d
    7834:	f8a7 0136 	strh.w	r0, [r7, #310]	; 0x136
    7838:	f8bd c154 	ldrh.w	ip, [sp, #340]	; 0x154
    783c:	f89d 015c 	ldrb.w	r0, [sp, #348]	; 0x15c
    7840:	f8a7 1138 	strh.w	r1, [r7, #312]	; 0x138
    7844:	f8a7 213a 	strh.w	r2, [r7, #314]	; 0x13a
    7848:	f89d 115d 	ldrb.w	r1, [sp, #349]	; 0x15d
    784c:	f89d 215e 	ldrb.w	r2, [sp, #350]	; 0x15e
    7850:	f887 a12c 	strb.w	sl, [r7, #300]	; 0x12c
    7854:	f8a7 c134 	strh.w	ip, [r7, #308]	; 0x134
    7858:	f887 013c 	strb.w	r0, [r7, #316]	; 0x13c
    785c:	f887 113d 	strb.w	r1, [r7, #317]	; 0x13d
    7860:	f887 213e 	strb.w	r2, [r7, #318]	; 0x13e
    7864:	9a58      	ldr	r2, [sp, #352]	; 0x160
                              &Mtr3_An_Sdrvr3_PWMA, &Mtr3_B_Sdrvr3_PWMB,
                              &Mtr3_HLFB_Sdrvr3_Trig, 0, EVSYS_M3);

    ConnectorCOM0 = SerialDriver(0, ShiftRegister::SR_LED_COM_0_MASK,
    7866:	f8df c208 	ldr.w	ip, [pc, #520]	; 7a70 <_ZN9ClearCore10SysManagerC1Ev+0x1778>
    786a:	9207      	str	r2, [sp, #28]
    786c:	f8df e204 	ldr.w	lr, [pc, #516]	; 7a74 <_ZN9ClearCore10SysManagerC1Ev+0x177c>
    7870:	9505      	str	r5, [sp, #20]
    7872:	4b78      	ldr	r3, [pc, #480]	; (7a54 <_ZN9ClearCore10SysManagerC1Ev+0x175c>)
    7874:	9d07      	ldr	r5, [sp, #28]
    7876:	4878      	ldr	r0, [pc, #480]	; (7a58 <_ZN9ClearCore10SysManagerC1Ev+0x1760>)
    7878:	f8cd e010 	str.w	lr, [sp, #16]
    787c:	f44f 5200 	mov.w	r2, #8192	; 0x2000
    7880:	e88d 1004 	stmia.w	sp, {r2, ip}
    7884:	9303      	str	r3, [sp, #12]
    7886:	9002      	str	r0, [sp, #8]
    7888:	4641      	mov	r1, r8
    788a:	f8c7 5140 	str.w	r5, [r7, #320]	; 0x140
    788e:	f8df 81e8 	ldr.w	r8, [pc, #488]	; 7a78 <_ZN9ClearCore10SysManagerC1Ev+0x1780>
    7892:	4d72      	ldr	r5, [pc, #456]	; (7a5c <_ZN9ClearCore10SysManagerC1Ev+0x1764>)
    7894:	a808      	add	r0, sp, #32
    7896:	f44f 3300 	mov.w	r3, #131072	; 0x20000
    789a:	f44f 2280 	mov.w	r2, #262144	; 0x40000
    789e:	f009 fe7b 	bl	11598 <_ZN9ClearCore12SerialDriverC1EtNS_13ShiftRegister5MasksES2_S2_PK15PeripheralRouteS5_S5_S5_h>
    78a2:	990a      	ldr	r1, [sp, #40]	; 0x28
    78a4:	9a09      	ldr	r2, [sp, #36]	; 0x24
    78a6:	f89d 302c 	ldrb.w	r3, [sp, #44]	; 0x2c
    78aa:	980c      	ldr	r0, [sp, #48]	; 0x30
    78ac:	f8c8 1008 	str.w	r1, [r8, #8]
    78b0:	f8c8 2004 	str.w	r2, [r8, #4]
    78b4:	990d      	ldr	r1, [sp, #52]	; 0x34
    78b6:	9a0e      	ldr	r2, [sp, #56]	; 0x38
    78b8:	f888 300c 	strb.w	r3, [r8, #12]
    78bc:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    78be:	f8c8 0010 	str.w	r0, [r8, #16]
    78c2:	f8c8 1014 	str.w	r1, [r8, #20]
    78c6:	9810      	ldr	r0, [sp, #64]	; 0x40
    78c8:	9911      	ldr	r1, [sp, #68]	; 0x44
    78ca:	f8c8 2018 	str.w	r2, [r8, #24]
    78ce:	f8c8 301c 	str.w	r3, [r8, #28]
    78d2:	f89d 2048 	ldrb.w	r2, [sp, #72]	; 0x48
    78d6:	f89d 3049 	ldrb.w	r3, [sp, #73]	; 0x49
    78da:	f8c8 0020 	str.w	r0, [r8, #32]
    78de:	2780      	movs	r7, #128	; 0x80
    78e0:	f89d 004a 	ldrb.w	r0, [sp, #74]	; 0x4a
    78e4:	f8c8 1024 	str.w	r1, [r8, #36]	; 0x24
    78e8:	f888 2028 	strb.w	r2, [r8, #40]	; 0x28
    78ec:	f8bd 104c 	ldrh.w	r1, [sp, #76]	; 0x4c
    78f0:	f89d 204e 	ldrb.w	r2, [sp, #78]	; 0x4e
    78f4:	f888 3029 	strb.w	r3, [r8, #41]	; 0x29
    78f8:	f89d 304f 	ldrb.w	r3, [sp, #79]	; 0x4f
    78fc:	f888 302f 	strb.w	r3, [r8, #47]	; 0x2f
    7900:	f888 002a 	strb.w	r0, [r8, #42]	; 0x2a
    7904:	f8a8 102c 	strh.w	r1, [r8, #44]	; 0x2c
    7908:	f888 202e 	strb.w	r2, [r8, #46]	; 0x2e
    790c:	a914      	add	r1, sp, #80	; 0x50
    790e:	463a      	mov	r2, r7
    7910:	f108 0030 	add.w	r0, r8, #48	; 0x30
    7914:	f020 f9a4 	bl	27c60 <memcpy>
    7918:	463a      	mov	r2, r7
    791a:	a934      	add	r1, sp, #208	; 0xd0
    791c:	f108 00b0 	add.w	r0, r8, #176	; 0xb0
    7920:	f020 f99e 	bl	27c60 <memcpy>
                                 ShiftRegister::SR_UART_SPI_SEL_0_MASK,
                                 ShiftRegister::SR_UART_TTL_0_MASK,
                                 &Com0_CTS_MISO, &Com0_RTS_SS, &Com0_RX_SCK,
                                 &Com0_TX_MOSI, PER_SERCOM_ALT);
    ConnectorCOM1 = SerialDriver(1, ShiftRegister::SR_LED_COM_1_MASK,
    7924:	4b4e      	ldr	r3, [pc, #312]	; (7a60 <_ZN9ClearCore10SysManagerC1Ev+0x1768>)
    7926:	9303      	str	r3, [sp, #12]
    7928:	484e      	ldr	r0, [pc, #312]	; (7a64 <_ZN9ClearCore10SysManagerC1Ev+0x176c>)
    792a:	4a4f      	ldr	r2, [pc, #316]	; (7a68 <_ZN9ClearCore10SysManagerC1Ev+0x1770>)
    792c:	9002      	str	r0, [sp, #8]
    792e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
    7932:	9201      	str	r2, [sp, #4]
    7934:	9300      	str	r3, [sp, #0]
    7936:	9854      	ldr	r0, [sp, #336]	; 0x150
    7938:	9a55      	ldr	r2, [sp, #340]	; 0x154
    793a:	9b56      	ldr	r3, [sp, #344]	; 0x158
    793c:	9605      	str	r6, [sp, #20]
    793e:	4621      	mov	r1, r4
    7940:	9c57      	ldr	r4, [sp, #348]	; 0x15c
    7942:	f8c8 0130 	str.w	r0, [r8, #304]	; 0x130
    7946:	f8bd c168 	ldrh.w	ip, [sp, #360]	; 0x168
    794a:	f8c8 2134 	str.w	r2, [r8, #308]	; 0x134
    794e:	9858      	ldr	r0, [sp, #352]	; 0x160
    7950:	f8c8 3138 	str.w	r3, [r8, #312]	; 0x138
    7954:	f89d e16a 	ldrb.w	lr, [sp, #362]	; 0x16a
    7958:	f8c8 413c 	str.w	r4, [r8, #316]	; 0x13c
    \ref SerialDriverMain informational page.

    For more detailed information on the ClearCore Connector interface in
    general, check out the \ref ConnectorMain informational page.
**/
class SerialDriver : public SerialBase, public Connector {
    795c:	f89d 616b 	ldrb.w	r6, [sp, #363]	; 0x16b
    7960:	9a5b      	ldr	r2, [sp, #364]	; 0x16c
    7962:	9b5c      	ldr	r3, [sp, #368]	; 0x170
    7964:	9c5d      	ldr	r4, [sp, #372]	; 0x174
    7966:	f8c8 0140 	str.w	r0, [r8, #320]	; 0x140
    796a:	f8a8 c148 	strh.w	ip, [r8, #328]	; 0x148
    796e:	f888 e14a 	strb.w	lr, [r8, #330]	; 0x14a
    7972:	f888 614b 	strb.w	r6, [r8, #331]	; 0x14b
    7976:	f8c8 214c 	str.w	r2, [r8, #332]	; 0x14c
    797a:	f8c8 3150 	str.w	r3, [r8, #336]	; 0x150
    797e:	f8c8 4154 	str.w	r4, [r8, #340]	; 0x154
    7982:	a808      	add	r0, sp, #32
    7984:	4e39      	ldr	r6, [pc, #228]	; (7a6c <_ZN9ClearCore10SysManagerC1Ev+0x1774>)
    7986:	9604      	str	r6, [sp, #16]
    7988:	f44f 3380 	mov.w	r3, #65536	; 0x10000
    798c:	f44f 2200 	mov.w	r2, #524288	; 0x80000
    7990:	f009 fe02 	bl	11598 <_ZN9ClearCore12SerialDriverC1EtNS_13ShiftRegister5MasksES2_S2_PK15PeripheralRouteS5_S5_S5_h>
    7994:	9c0a      	ldr	r4, [sp, #40]	; 0x28
    7996:	9809      	ldr	r0, [sp, #36]	; 0x24
    7998:	f89d e02c 	ldrb.w	lr, [sp, #44]	; 0x2c
    799c:	9a0c      	ldr	r2, [sp, #48]	; 0x30
    799e:	9e0e      	ldr	r6, [sp, #56]	; 0x38
    79a0:	9b11      	ldr	r3, [sp, #68]	; 0x44
    79a2:	60ac      	str	r4, [r5, #8]
    79a4:	6068      	str	r0, [r5, #4]
    79a6:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
    79a8:	980d      	ldr	r0, [sp, #52]	; 0x34
    79aa:	f8bd c04c 	ldrh.w	ip, [sp, #76]	; 0x4c
    79ae:	f885 e00c 	strb.w	lr, [r5, #12]
    79b2:	612a      	str	r2, [r5, #16]
    79b4:	f89d e049 	ldrb.w	lr, [sp, #73]	; 0x49
    79b8:	f89d 2048 	ldrb.w	r2, [sp, #72]	; 0x48
    79bc:	6168      	str	r0, [r5, #20]
    79be:	61ae      	str	r6, [r5, #24]
    79c0:	9810      	ldr	r0, [sp, #64]	; 0x40
    79c2:	f89d 604a 	ldrb.w	r6, [sp, #74]	; 0x4a
    79c6:	61ec      	str	r4, [r5, #28]
    79c8:	626b      	str	r3, [r5, #36]	; 0x24
    79ca:	f89d 404e 	ldrb.w	r4, [sp, #78]	; 0x4e
    79ce:	f89d 304f 	ldrb.w	r3, [sp, #79]	; 0x4f
    79d2:	f885 e029 	strb.w	lr, [r5, #41]	; 0x29
    79d6:	f8a5 c02c 	strh.w	ip, [r5, #44]	; 0x2c
    79da:	f885 302f 	strb.w	r3, [r5, #47]	; 0x2f
    79de:	a914      	add	r1, sp, #80	; 0x50
    79e0:	6228      	str	r0, [r5, #32]
    79e2:	f885 2028 	strb.w	r2, [r5, #40]	; 0x28
    79e6:	f885 602a 	strb.w	r6, [r5, #42]	; 0x2a
    79ea:	463a      	mov	r2, r7
    79ec:	f885 402e 	strb.w	r4, [r5, #46]	; 0x2e
    79f0:	f105 0030 	add.w	r0, r5, #48	; 0x30
    79f4:	f020 f934 	bl	27c60 <memcpy>
    79f8:	463a      	mov	r2, r7
    79fa:	a934      	add	r1, sp, #208	; 0xd0
    79fc:	f105 00b0 	add.w	r0, r5, #176	; 0xb0
    7a00:	f020 f92e 	bl	27c60 <memcpy>
    7a04:	a855      	add	r0, sp, #340	; 0x154
    7a06:	e890 1005 	ldmia.w	r0, {r0, r2, ip}
    7a0a:	9b54      	ldr	r3, [sp, #336]	; 0x150
    7a0c:	f8c5 3130 	str.w	r3, [r5, #304]	; 0x130
    7a10:	9b5c      	ldr	r3, [sp, #368]	; 0x170
    7a12:	9e58      	ldr	r6, [sp, #352]	; 0x160
    7a14:	f8bd e168 	ldrh.w	lr, [sp, #360]	; 0x168
    7a18:	f89d 716a 	ldrb.w	r7, [sp, #362]	; 0x16a
    7a1c:	f89d 416b 	ldrb.w	r4, [sp, #363]	; 0x16b
    7a20:	995b      	ldr	r1, [sp, #364]	; 0x16c
    7a22:	f8c5 3150 	str.w	r3, [r5, #336]	; 0x150
    7a26:	9b5d      	ldr	r3, [sp, #372]	; 0x174
    7a28:	f8c5 0134 	str.w	r0, [r5, #308]	; 0x134
                                 ShiftRegister::SR_UART_SPI_SEL_1_MASK,
                                 ShiftRegister::SR_UART_TTL_1_MASK,
                                 &Com1_CTS_MISO, &Com1_RTS_SS, &Com1_RX_SCK,
                                 &Com1_TX_MOSI, PER_SERCOM);
}
    7a2c:	4648      	mov	r0, r9
    7a2e:	f8c5 2138 	str.w	r2, [r5, #312]	; 0x138
    7a32:	f8c5 3154 	str.w	r3, [r5, #340]	; 0x154
    7a36:	f8c5 6140 	str.w	r6, [r5, #320]	; 0x140
    7a3a:	f8c5 c13c 	str.w	ip, [r5, #316]	; 0x13c
    7a3e:	f8a5 e148 	strh.w	lr, [r5, #328]	; 0x148
    7a42:	f885 714a 	strb.w	r7, [r5, #330]	; 0x14a
    7a46:	f885 414b 	strb.w	r4, [r5, #331]	; 0x14b
    7a4a:	f8c5 114c 	str.w	r1, [r5, #332]	; 0x14c
    7a4e:	b05f      	add	sp, #380	; 0x17c
    7a50:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    7a54:	0002cdf0 	.word	0x0002cdf0
    7a58:	0002cde0 	.word	0x0002cde0
    7a5c:	20001698 	.word	0x20001698
    7a60:	0002ce10 	.word	0x0002ce10
    7a64:	0002ce00 	.word	0x0002ce00
    7a68:	0002cf30 	.word	0x0002cf30
    7a6c:	0002ced0 	.word	0x0002ced0
    7a70:	0002cf20 	.word	0x0002cf20
    7a74:	0002cec0 	.word	0x0002cec0
    7a78:	20001540 	.word	0x20001540

00007a7c <_ZN9ClearCore10SysManager16ConnectorByIndexE13ClearCorePins>:
        MotorConnectors[iMotor]->RefreshSlow();
    }
}

Connector *SysManager::ConnectorByIndex(ClearCorePins theConnector) {
    if (theConnector < CLEARCORE_PIN_MAX) {
    7a7c:	2914      	cmp	r1, #20
    7a7e:	dc03      	bgt.n	7a88 <_ZN9ClearCore10SysManager16ConnectorByIndexE13ClearCorePins+0xc>
        return Connectors[theConnector];
    7a80:	4a03      	ldr	r2, [pc, #12]	; (7a90 <_ZN9ClearCore10SysManager16ConnectorByIndexE13ClearCorePins+0x14>)
    7a82:	f852 0021 	ldr.w	r0, [r2, r1, lsl #2]
    }
    else {
        return CcioMgr.PinByIndex(theConnector);
    }
}
    7a86:	4770      	bx	lr
        return CcioMgr.PinByIndex(theConnector);
    7a88:	4b02      	ldr	r3, [pc, #8]	; (7a94 <_ZN9ClearCore10SysManager16ConnectorByIndexE13ClearCorePins+0x18>)
    7a8a:	6818      	ldr	r0, [r3, #0]
    7a8c:	f007 b892 	b.w	ebb4 <_ZN9ClearCore16CcioBoardManager10PinByIndexE13ClearCorePins>
    7a90:	0002cd6c 	.word	0x0002cd6c
    7a94:	20001fac 	.word	0x20001fac

00007a98 <_ZN9ClearCore10SysManager10InitClocksEv>:

void SysManager::InitClocks() {
    7a98:	b5f0      	push	{r4, r5, r6, r7, lr}
    // Set up TCC0 which will be used to generate the sample time interrupt
    // and by the motors in S&D/PWM mode to send bursts of steps or PWM duty.
    SET_CLOCK_SOURCE(TCC0_GCLK_ID, 1);
    7a9a:	4ab1      	ldr	r2, [pc, #708]	; (7d60 <_ZN9ClearCore10SysManager10InitClocksEv+0x2c8>)
    7a9c:	f8d2 30e4 	ldr.w	r3, [r2, #228]	; 0xe4
    7aa0:	f36f 1386 	bfc	r3, #6, #1
void SysManager::InitClocks() {
    7aa4:	b085      	sub	sp, #20
    SET_CLOCK_SOURCE(TCC0_GCLK_ID, 1);
    7aa6:	f8c2 30e4 	str.w	r3, [r2, #228]	; 0xe4
    7aaa:	f8d2 30e4 	ldr.w	r3, [r2, #228]	; 0xe4
    7aae:	065e      	lsls	r6, r3, #25
    7ab0:	d4fb      	bmi.n	7aaa <_ZN9ClearCore10SysManager10InitClocksEv+0x12>
    7ab2:	f8d2 30e4 	ldr.w	r3, [r2, #228]	; 0xe4
    7ab6:	49aa      	ldr	r1, [pc, #680]	; (7d60 <_ZN9ClearCore10SysManager10InitClocksEv+0x2c8>)
    7ab8:	2001      	movs	r0, #1
    7aba:	f360 0303 	bfi	r3, r0, #0, #4
    7abe:	f8c2 30e4 	str.w	r3, [r2, #228]	; 0xe4
    7ac2:	f8d2 30e4 	ldr.w	r3, [r2, #228]	; 0xe4
    7ac6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    7aca:	f8c2 30e4 	str.w	r3, [r2, #228]	; 0xe4
    7ace:	684b      	ldr	r3, [r1, #4]
    7ad0:	f013 0304 	ands.w	r3, r3, #4
    7ad4:	d1fb      	bne.n	7ace <_ZN9ClearCore10SysManager10InitClocksEv+0x36>
    CLOCK_ENABLE(APBBMASK, TCC0_);
    7ad6:	48a3      	ldr	r0, [pc, #652]	; (7d64 <_ZN9ClearCore10SysManager10InitClocksEv+0x2cc>)

    // Disable TCC0
    TCC0->CTRLA.bit.ENABLE = 0;
    7ad8:	4aa3      	ldr	r2, [pc, #652]	; (7d68 <_ZN9ClearCore10SysManager10InitClocksEv+0x2d0>)
    CLOCK_ENABLE(APBBMASK, TCC0_);
    7ada:	6981      	ldr	r1, [r0, #24]
    7adc:	f441 6100 	orr.w	r1, r1, #2048	; 0x800
    7ae0:	6181      	str	r1, [r0, #24]
    TCC0->CTRLA.bit.ENABLE = 0;
    7ae2:	6811      	ldr	r1, [r2, #0]
    7ae4:	f363 0141 	bfi	r1, r3, #1, #1
    7ae8:	6011      	str	r1, [r2, #0]
    SYNCBUSY_WAIT(TCC0, TCC_SYNCBUSY_ENABLE);
    7aea:	6893      	ldr	r3, [r2, #8]
    7aec:	f013 0302 	ands.w	r3, r3, #2
    7af0:	d1fb      	bne.n	7aea <_ZN9ClearCore10SysManager10InitClocksEv+0x52>

    // Initialize counter value to zero
    TCC0->COUNT.reg = 0;
    7af2:	6353      	str	r3, [r2, #52]	; 0x34

    // Use double buffering
    TCC0->CTRLBCLR.bit.LUPD = 1;
    7af4:	7910      	ldrb	r0, [r2, #4]
    }
    // Interrupt every period
    TCC0->INTENSET.bit.OVF = 1;

    // Setup TCC1 which will be used by motors using PWM input on InA
    SET_CLOCK_SOURCE(TCC1_GCLK_ID, 1);
    7af6:	499a      	ldr	r1, [pc, #616]	; (7d60 <_ZN9ClearCore10SysManager10InitClocksEv+0x2c8>)
    TCC0->CTRLBCLR.bit.LUPD = 1;
    7af8:	f040 0002 	orr.w	r0, r0, #2
    7afc:	7110      	strb	r0, [r2, #4]
    TCC0->WAVE.reg |= TCC_WAVE_WAVEGEN_NPWM | TCC_WAVE_POL_Msk;
    7afe:	6bd0      	ldr	r0, [r2, #60]	; 0x3c
    7b00:	f440 107c 	orr.w	r0, r0, #4128768	; 0x3f0000
    7b04:	f040 0002 	orr.w	r0, r0, #2
    7b08:	63d0      	str	r0, [r2, #60]	; 0x3c
        TCC0->CC[iChannel].reg = 0;
    7b0a:	6453      	str	r3, [r2, #68]	; 0x44
    7b0c:	6493      	str	r3, [r2, #72]	; 0x48
    7b0e:	64d3      	str	r3, [r2, #76]	; 0x4c
    7b10:	6513      	str	r3, [r2, #80]	; 0x50
    7b12:	6553      	str	r3, [r2, #84]	; 0x54
    7b14:	6593      	str	r3, [r2, #88]	; 0x58
    TCC0->INTENSET.bit.OVF = 1;
    7b16:	6a90      	ldr	r0, [r2, #40]	; 0x28
    7b18:	f040 0001 	orr.w	r0, r0, #1
    7b1c:	6290      	str	r0, [r2, #40]	; 0x28
    SET_CLOCK_SOURCE(TCC1_GCLK_ID, 1);
    7b1e:	f8d1 20e4 	ldr.w	r2, [r1, #228]	; 0xe4
    7b22:	f363 1286 	bfi	r2, r3, #6, #1
    7b26:	f8c1 20e4 	str.w	r2, [r1, #228]	; 0xe4
    7b2a:	460a      	mov	r2, r1
    7b2c:	f8d2 30e4 	ldr.w	r3, [r2, #228]	; 0xe4
    7b30:	065d      	lsls	r5, r3, #25
    7b32:	d4fb      	bmi.n	7b2c <_ZN9ClearCore10SysManager10InitClocksEv+0x94>
    7b34:	f8d2 30e4 	ldr.w	r3, [r2, #228]	; 0xe4
    7b38:	4989      	ldr	r1, [pc, #548]	; (7d60 <_ZN9ClearCore10SysManager10InitClocksEv+0x2c8>)
    7b3a:	2001      	movs	r0, #1
    7b3c:	f360 0303 	bfi	r3, r0, #0, #4
    7b40:	f8c2 30e4 	str.w	r3, [r2, #228]	; 0xe4
    7b44:	f8d2 30e4 	ldr.w	r3, [r2, #228]	; 0xe4
    7b48:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    7b4c:	f8c2 30e4 	str.w	r3, [r2, #228]	; 0xe4
    7b50:	684b      	ldr	r3, [r1, #4]
    7b52:	f013 0304 	ands.w	r3, r3, #4
    7b56:	d1fb      	bne.n	7b50 <_ZN9ClearCore10SysManager10InitClocksEv+0xb8>
    CLOCK_ENABLE(APBBMASK, TCC1_);
    7b58:	4882      	ldr	r0, [pc, #520]	; (7d64 <_ZN9ClearCore10SysManager10InitClocksEv+0x2cc>)

    // Disable TCC1
    TCC1->CTRLA.bit.ENABLE = 0;
    7b5a:	4a84      	ldr	r2, [pc, #528]	; (7d6c <_ZN9ClearCore10SysManager10InitClocksEv+0x2d4>)
    CLOCK_ENABLE(APBBMASK, TCC1_);
    7b5c:	6981      	ldr	r1, [r0, #24]
    7b5e:	f441 5180 	orr.w	r1, r1, #4096	; 0x1000
    7b62:	6181      	str	r1, [r0, #24]
    TCC1->CTRLA.bit.ENABLE = 0;
    7b64:	6811      	ldr	r1, [r2, #0]
    7b66:	f363 0141 	bfi	r1, r3, #1, #1
    7b6a:	6011      	str	r1, [r2, #0]
    SYNCBUSY_WAIT(TCC1, TCC_SYNCBUSY_ENABLE);
    7b6c:	6893      	ldr	r3, [r2, #8]
    7b6e:	f013 0302 	ands.w	r3, r3, #2
    7b72:	d1fb      	bne.n	7b6c <_ZN9ClearCore10SysManager10InitClocksEv+0xd4>

    // Initialize counter value to zero
    TCC1->COUNT.reg = 0;
    7b74:	6353      	str	r3, [r2, #52]	; 0x34

    // Use double buffering
    TCC1->CTRLBCLR.bit.LUPD = 1;
    7b76:	7910      	ldrb	r0, [r2, #4]
    for (int8_t iChannel = 0; iChannel < 6; iChannel++) {
        TCC1->CC[iChannel].reg = 0;
    }

    // Initialize Timer/Counters
    SET_CLOCK_SOURCE(TC1_GCLK_ID, 6);
    7b78:	4979      	ldr	r1, [pc, #484]	; (7d60 <_ZN9ClearCore10SysManager10InitClocksEv+0x2c8>)
    TCC1->CTRLBCLR.bit.LUPD = 1;
    7b7a:	f040 0002 	orr.w	r0, r0, #2
    7b7e:	7110      	strb	r0, [r2, #4]
    TCC1->WAVE.reg |= TCC_WAVE_WAVEGEN_NPWM | TCC_WAVE_POL_Msk;
    7b80:	6bd0      	ldr	r0, [r2, #60]	; 0x3c
    7b82:	f440 107c 	orr.w	r0, r0, #4128768	; 0x3f0000
    7b86:	f040 0002 	orr.w	r0, r0, #2
    7b8a:	63d0      	str	r0, [r2, #60]	; 0x3c
        TCC1->CC[iChannel].reg = 0;
    7b8c:	6453      	str	r3, [r2, #68]	; 0x44
    7b8e:	6493      	str	r3, [r2, #72]	; 0x48
    7b90:	64d3      	str	r3, [r2, #76]	; 0x4c
    7b92:	6513      	str	r3, [r2, #80]	; 0x50
    7b94:	6553      	str	r3, [r2, #84]	; 0x54
    7b96:	6593      	str	r3, [r2, #88]	; 0x58
    SET_CLOCK_SOURCE(TC1_GCLK_ID, 6);
    7b98:	f8d1 20a4 	ldr.w	r2, [r1, #164]	; 0xa4
    7b9c:	f363 1286 	bfi	r2, r3, #6, #1
    7ba0:	f8c1 20a4 	str.w	r2, [r1, #164]	; 0xa4
    7ba4:	460a      	mov	r2, r1
    7ba6:	f8d2 30a4 	ldr.w	r3, [r2, #164]	; 0xa4
    7baa:	065c      	lsls	r4, r3, #25
    7bac:	d4fb      	bmi.n	7ba6 <_ZN9ClearCore10SysManager10InitClocksEv+0x10e>
    7bae:	f8d2 30a4 	ldr.w	r3, [r2, #164]	; 0xa4
    7bb2:	496b      	ldr	r1, [pc, #428]	; (7d60 <_ZN9ClearCore10SysManager10InitClocksEv+0x2c8>)
    7bb4:	2006      	movs	r0, #6
    7bb6:	f360 0303 	bfi	r3, r0, #0, #4
    7bba:	f8c2 30a4 	str.w	r3, [r2, #164]	; 0xa4
    7bbe:	f8d2 30a4 	ldr.w	r3, [r2, #164]	; 0xa4
    7bc2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    7bc6:	f8c2 30a4 	str.w	r3, [r2, #164]	; 0xa4
    7bca:	684b      	ldr	r3, [r1, #4]
    7bcc:	f013 0318 	ands.w	r3, r3, #24
    7bd0:	d1fb      	bne.n	7bca <_ZN9ClearCore10SysManager10InitClocksEv+0x132>
    CLOCK_ENABLE(APBAMASK, TC1_); // Enable TC1 bus clock
    7bd2:	4c64      	ldr	r4, [pc, #400]	; (7d64 <_ZN9ClearCore10SysManager10InitClocksEv+0x2cc>)

    SET_CLOCK_SOURCE(TC2_GCLK_ID, 6);
    7bd4:	4a62      	ldr	r2, [pc, #392]	; (7d60 <_ZN9ClearCore10SysManager10InitClocksEv+0x2c8>)
    CLOCK_ENABLE(APBAMASK, TC1_); // Enable TC1 bus clock
    7bd6:	6960      	ldr	r0, [r4, #20]
    7bd8:	f440 4000 	orr.w	r0, r0, #32768	; 0x8000
    7bdc:	6160      	str	r0, [r4, #20]
    SET_CLOCK_SOURCE(TC2_GCLK_ID, 6);
    7bde:	f8d1 00e8 	ldr.w	r0, [r1, #232]	; 0xe8
    7be2:	f363 1086 	bfi	r0, r3, #6, #1
    7be6:	f8c1 00e8 	str.w	r0, [r1, #232]	; 0xe8
    7bea:	f8d2 30e8 	ldr.w	r3, [r2, #232]	; 0xe8
    7bee:	0658      	lsls	r0, r3, #25
    7bf0:	d4fb      	bmi.n	7bea <_ZN9ClearCore10SysManager10InitClocksEv+0x152>
    7bf2:	f8d2 30e8 	ldr.w	r3, [r2, #232]	; 0xe8
    7bf6:	495a      	ldr	r1, [pc, #360]	; (7d60 <_ZN9ClearCore10SysManager10InitClocksEv+0x2c8>)
    7bf8:	2006      	movs	r0, #6
    7bfa:	f360 0303 	bfi	r3, r0, #0, #4
    7bfe:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
    7c02:	f8d2 30e8 	ldr.w	r3, [r2, #232]	; 0xe8
    7c06:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    7c0a:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
    7c0e:	684b      	ldr	r3, [r1, #4]
    7c10:	f013 0318 	ands.w	r3, r3, #24
    7c14:	d1fb      	bne.n	7c0e <_ZN9ClearCore10SysManager10InitClocksEv+0x176>
    CLOCK_ENABLE(APBBMASK, TC2_); // Enable TC2 bus clock
    7c16:	4c53      	ldr	r4, [pc, #332]	; (7d64 <_ZN9ClearCore10SysManager10InitClocksEv+0x2cc>)

    SET_CLOCK_SOURCE(TC5_GCLK_ID, 6);
    7c18:	4a51      	ldr	r2, [pc, #324]	; (7d60 <_ZN9ClearCore10SysManager10InitClocksEv+0x2c8>)
    CLOCK_ENABLE(APBBMASK, TC2_); // Enable TC2 bus clock
    7c1a:	69a0      	ldr	r0, [r4, #24]
    7c1c:	f440 5000 	orr.w	r0, r0, #8192	; 0x2000
    7c20:	61a0      	str	r0, [r4, #24]
    SET_CLOCK_SOURCE(TC5_GCLK_ID, 6);
    7c22:	f8d1 00f8 	ldr.w	r0, [r1, #248]	; 0xf8
    7c26:	f363 1086 	bfi	r0, r3, #6, #1
    7c2a:	f8c1 00f8 	str.w	r0, [r1, #248]	; 0xf8
    7c2e:	f8d2 30f8 	ldr.w	r3, [r2, #248]	; 0xf8
    7c32:	0659      	lsls	r1, r3, #25
    7c34:	d4fb      	bmi.n	7c2e <_ZN9ClearCore10SysManager10InitClocksEv+0x196>
    7c36:	f8d2 30f8 	ldr.w	r3, [r2, #248]	; 0xf8
    7c3a:	4949      	ldr	r1, [pc, #292]	; (7d60 <_ZN9ClearCore10SysManager10InitClocksEv+0x2c8>)
    7c3c:	2006      	movs	r0, #6
    7c3e:	f360 0303 	bfi	r3, r0, #0, #4
    7c42:	f8c2 30f8 	str.w	r3, [r2, #248]	; 0xf8
    7c46:	f8d2 30f8 	ldr.w	r3, [r2, #248]	; 0xf8
    7c4a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    7c4e:	f8c2 30f8 	str.w	r3, [r2, #248]	; 0xf8
    7c52:	684b      	ldr	r3, [r1, #4]
    7c54:	f013 0318 	ands.w	r3, r3, #24
    7c58:	d1fb      	bne.n	7c52 <_ZN9ClearCore10SysManager10InitClocksEv+0x1ba>
    CLOCK_ENABLE(APBCMASK, TC5_); // Enable TC5 bus clock
    7c5a:	4842      	ldr	r0, [pc, #264]	; (7d64 <_ZN9ClearCore10SysManager10InitClocksEv+0x2cc>)
    GCLK->PCHCTRL[TC6_GCLK_ID].reg =
        GCLK_PCHCTRL_GEN_GCLK6 | GCLK_PCHCTRL_CHEN;
    CLOCK_ENABLE(APBDMASK, TC6_); // Enable TC6 bus clock

    // TCC3 used by IO5 for H-bridge PWM generation
    SET_CLOCK_SOURCE(TCC3_GCLK_ID, 0);
    7c5c:	4a40      	ldr	r2, [pc, #256]	; (7d60 <_ZN9ClearCore10SysManager10InitClocksEv+0x2c8>)
    CLOCK_ENABLE(APBCMASK, TC5_); // Enable TC5 bus clock
    7c5e:	69c4      	ldr	r4, [r0, #28]
    GCLK->PCHCTRL[TC6_GCLK_ID].reg =
    7c60:	2546      	movs	r5, #70	; 0x46
    CLOCK_ENABLE(APBCMASK, TC5_); // Enable TC5 bus clock
    7c62:	f044 0440 	orr.w	r4, r4, #64	; 0x40
    7c66:	61c4      	str	r4, [r0, #28]
    GCLK->PCHCTRL[TC6_GCLK_ID].reg =
    7c68:	f8c1 511c 	str.w	r5, [r1, #284]	; 0x11c
    CLOCK_ENABLE(APBDMASK, TC6_); // Enable TC6 bus clock
    7c6c:	6a04      	ldr	r4, [r0, #32]
    7c6e:	f044 0420 	orr.w	r4, r4, #32
    7c72:	6204      	str	r4, [r0, #32]
    SET_CLOCK_SOURCE(TCC3_GCLK_ID, 0);
    7c74:	f8d1 00f4 	ldr.w	r0, [r1, #244]	; 0xf4
    7c78:	f363 1086 	bfi	r0, r3, #6, #1
    7c7c:	f8c1 00f4 	str.w	r0, [r1, #244]	; 0xf4
    7c80:	f8d2 30f4 	ldr.w	r3, [r2, #244]	; 0xf4
    7c84:	f3c3 1380 	ubfx	r3, r3, #6, #1
    7c88:	2b00      	cmp	r3, #0
    7c8a:	d1f9      	bne.n	7c80 <_ZN9ClearCore10SysManager10InitClocksEv+0x1e8>
    7c8c:	f8d2 10f4 	ldr.w	r1, [r2, #244]	; 0xf4
    CLOCK_ENABLE(APBCMASK, TCC3_);
    7c90:	4834      	ldr	r0, [pc, #208]	; (7d64 <_ZN9ClearCore10SysManager10InitClocksEv+0x2cc>)

    // TCC4 used by IO4 for H-bridge PWM generation
    SET_CLOCK_SOURCE(TCC4_GCLK_ID, 0);
    7c92:	4c33      	ldr	r4, [pc, #204]	; (7d60 <_ZN9ClearCore10SysManager10InitClocksEv+0x2c8>)
    SET_CLOCK_SOURCE(TCC3_GCLK_ID, 0);
    7c94:	f363 0103 	bfi	r1, r3, #0, #4
    7c98:	f8c2 10f4 	str.w	r1, [r2, #244]	; 0xf4
    7c9c:	f8d2 10f4 	ldr.w	r1, [r2, #244]	; 0xf4
    7ca0:	f041 0140 	orr.w	r1, r1, #64	; 0x40
    7ca4:	f8c2 10f4 	str.w	r1, [r2, #244]	; 0xf4
    7ca8:	6851      	ldr	r1, [r2, #4]
    CLOCK_ENABLE(APBCMASK, TCC3_);
    7caa:	69c1      	ldr	r1, [r0, #28]
    7cac:	f041 0110 	orr.w	r1, r1, #16
    7cb0:	61c1      	str	r1, [r0, #28]
    SET_CLOCK_SOURCE(TCC4_GCLK_ID, 0);
    7cb2:	f8d2 1118 	ldr.w	r1, [r2, #280]	; 0x118
    7cb6:	f363 1186 	bfi	r1, r3, #6, #1
    7cba:	f8c2 1118 	str.w	r1, [r2, #280]	; 0x118
    7cbe:	f8d4 3118 	ldr.w	r3, [r4, #280]	; 0x118
    7cc2:	f3c3 1380 	ubfx	r3, r3, #6, #1
    7cc6:	2b00      	cmp	r3, #0
    7cc8:	d1f9      	bne.n	7cbe <_ZN9ClearCore10SysManager10InitClocksEv+0x226>
    7cca:	f8d4 1118 	ldr.w	r1, [r4, #280]	; 0x118
    CLOCK_ENABLE(APBDMASK, TCC4_);

    Tc *TCs[] = {TC1, TC2, TC6};
    7cce:	4a28      	ldr	r2, [pc, #160]	; (7d70 <_ZN9ClearCore10SysManager10InitClocksEv+0x2d8>)
    CLOCK_ENABLE(APBDMASK, TCC4_);
    7cd0:	4d24      	ldr	r5, [pc, #144]	; (7d64 <_ZN9ClearCore10SysManager10InitClocksEv+0x2cc>)
    SET_CLOCK_SOURCE(TCC4_GCLK_ID, 0);
    7cd2:	f363 0103 	bfi	r1, r3, #0, #4
    7cd6:	f8c4 1118 	str.w	r1, [r4, #280]	; 0x118
    7cda:	f8d4 3118 	ldr.w	r3, [r4, #280]	; 0x118
    7cde:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    7ce2:	f8c4 3118 	str.w	r3, [r4, #280]	; 0x118
    Tc *TCs[] = {TC1, TC2, TC6};
    7ce6:	ca07      	ldmia	r2, {r0, r1, r2}
    SET_CLOCK_SOURCE(TCC4_GCLK_ID, 0);
    7ce8:	6863      	ldr	r3, [r4, #4]
    CLOCK_ENABLE(APBDMASK, TCC4_);
    7cea:	6a2c      	ldr	r4, [r5, #32]
    Tc *TCs[] = {TC1, TC2, TC6};
    7cec:	ab01      	add	r3, sp, #4
    CLOCK_ENABLE(APBDMASK, TCC4_);
    7cee:	f044 0410 	orr.w	r4, r4, #16
    7cf2:	622c      	str	r4, [r5, #32]
    7cf4:	f10d 0c10 	add.w	ip, sp, #16
    Tc *TCs[] = {TC1, TC2, TC6};
    7cf8:	e883 0007 	stmia.w	r3, {r0, r1, r2}
        // Disable TCx
        tcCount->CTRLA.bit.ENABLE = 0;
        SYNCBUSY_WAIT(tcCount, TC_SYNCBUSY_ENABLE);

        tcCount->CTRLBCLR.bit.LUPD = 1; // Double buffering
        tcCount->CTRLA.bit.MODE = TC_CTRLA_MODE_COUNT8_Val;
    7cfc:	f04f 0e01 	mov.w	lr, #1
    7d00:	4619      	mov	r1, r3
        // Make 500Hz carrier from GCLK
        tcCount->CTRLA.bit.PRESCALER = TC_CTRLA_PRESCALER_DIV16_Val;
    7d02:	2704      	movs	r7, #4
        tcCount->WAVE.reg = TC_WAVE_WAVEGEN_NPWM;
    7d04:	2602      	movs	r6, #2
        tcCount->DRVCTRL.reg = TC_DRVCTRL_INVEN_Msk;
    7d06:	2503      	movs	r5, #3

        tcCount->PERBUF.reg = 254;
    7d08:	24fe      	movs	r4, #254	; 0xfe
        Tc *tc = TCs[tcIndex];
    7d0a:	f851 2b04 	ldr.w	r2, [r1], #4
        tcCount->CTRLA.bit.ENABLE = 0;
    7d0e:	6813      	ldr	r3, [r2, #0]
    7d10:	f36f 0341 	bfc	r3, #1, #1
    7d14:	6013      	str	r3, [r2, #0]
        SYNCBUSY_WAIT(tcCount, TC_SYNCBUSY_ENABLE);
    7d16:	6913      	ldr	r3, [r2, #16]
    7d18:	f013 0302 	ands.w	r3, r3, #2
    7d1c:	d1fb      	bne.n	7d16 <_ZN9ClearCore10SysManager10InitClocksEv+0x27e>
        tcCount->CTRLBCLR.bit.LUPD = 1; // Double buffering
    7d1e:	7910      	ldrb	r0, [r2, #4]
    7d20:	f040 0002 	orr.w	r0, r0, #2
    7d24:	7110      	strb	r0, [r2, #4]
        tcCount->CTRLA.bit.MODE = TC_CTRLA_MODE_COUNT8_Val;
    7d26:	6810      	ldr	r0, [r2, #0]
    7d28:	f36e 0083 	bfi	r0, lr, #2, #2
    7d2c:	6010      	str	r0, [r2, #0]
        tcCount->CTRLA.bit.PRESCALER = TC_CTRLA_PRESCALER_DIV16_Val;
    7d2e:	6810      	ldr	r0, [r2, #0]
    7d30:	f367 200a 	bfi	r0, r7, #8, #3
    7d34:	6010      	str	r0, [r2, #0]
        tcCount->WAVE.reg = TC_WAVE_WAVEGEN_NPWM;
    7d36:	7316      	strb	r6, [r2, #12]
        tcCount->DRVCTRL.reg = TC_DRVCTRL_INVEN_Msk;
    7d38:	7355      	strb	r5, [r2, #13]
        tcCount->PERBUF.reg = 254;
    7d3a:	f882 402f 	strb.w	r4, [r2, #47]	; 0x2f
        tcCount->CCBUF[0].reg = 0;
    7d3e:	f882 3030 	strb.w	r3, [r2, #48]	; 0x30
        tcCount->CCBUF[1].reg = 0;
    7d42:	f882 3031 	strb.w	r3, [r2, #49]	; 0x31

        tcCount->COUNT.reg = 0;
    7d46:	7513      	strb	r3, [r2, #20]

        // Enable TCx
        tcCount->CTRLA.bit.ENABLE = 1;
    7d48:	6813      	ldr	r3, [r2, #0]
    7d4a:	f043 0302 	orr.w	r3, r3, #2
    7d4e:	6013      	str	r3, [r2, #0]
        SYNCBUSY_WAIT(tcCount, TC_SYNCBUSY_ENABLE);
    7d50:	6913      	ldr	r3, [r2, #16]
    7d52:	079b      	lsls	r3, r3, #30
    7d54:	d4fc      	bmi.n	7d50 <_ZN9ClearCore10SysManager10InitClocksEv+0x2b8>
    for (int8_t tcIndex = 0; tcIndex < 3; tcIndex++) {
    7d56:	4561      	cmp	r1, ip
    7d58:	d1d7      	bne.n	7d0a <_ZN9ClearCore10SysManager10InitClocksEv+0x272>
    }
}
    7d5a:	b005      	add	sp, #20
    7d5c:	bdf0      	pop	{r4, r5, r6, r7, pc}
    7d5e:	bf00      	nop
    7d60:	40001c00 	.word	0x40001c00
    7d64:	40000800 	.word	0x40000800
    7d68:	41016000 	.word	0x41016000
    7d6c:	41018000 	.word	0x41018000
    7d70:	0002cd48 	.word	0x0002cd48

00007d74 <_ZN9ClearCore10SysManager10InitializeEv>:
    CoreDebug->DEMCR |= CoreDebug_DEMCR_TRCENA_Msk;
    7d74:	498b      	ldr	r1, [pc, #556]	; (7fa4 <_ZN9ClearCore10SysManager10InitializeEv+0x230>)
    DWT->CYCCNT = 0;
    7d76:	4a8c      	ldr	r2, [pc, #560]	; (7fa8 <_ZN9ClearCore10SysManager10InitializeEv+0x234>)
    CoreDebug->DEMCR |= CoreDebug_DEMCR_TRCENA_Msk;
    7d78:	68cb      	ldr	r3, [r1, #12]
void SysManager::Initialize() {
    7d7a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    CoreDebug->DEMCR |= CoreDebug_DEMCR_TRCENA_Msk;
    7d7e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
    DWT->CTRL = DWT_CTRL_CYCCNTENA_Msk;
    7d82:	f04f 0801 	mov.w	r8, #1
    DWT->CYCCNT = 0;
    7d86:	2400      	movs	r4, #0
    CoreDebug->DEMCR |= CoreDebug_DEMCR_TRCENA_Msk;
    7d88:	60cb      	str	r3, [r1, #12]
    DWT->CYCCNT = 0;
    7d8a:	6054      	str	r4, [r2, #4]
    DWT->CTRL = DWT_CTRL_CYCCNTENA_Msk;
    7d8c:	f8c2 8000 	str.w	r8, [r2]
void SysManager::Initialize() {
    7d90:	4606      	mov	r6, r0
    InitClocks();
    7d92:	f7ff fe81 	bl	7a98 <_ZN9ClearCore10SysManager10InitClocksEv>
    SUPC->BOD33.bit.ENABLE = 0;
    7d96:	4b85      	ldr	r3, [pc, #532]	; (7fac <_ZN9ClearCore10SysManager10InitializeEv+0x238>)
    StatusMgr.HBridgeState(true);
    7d98:	4985      	ldr	r1, [pc, #532]	; (7fb0 <_ZN9ClearCore10SysManager10InitializeEv+0x23c>)
    SUPC->BOD33.bit.ENABLE = 0;
    7d9a:	691a      	ldr	r2, [r3, #16]
    StatusMgr.HBridgeState(true);
    7d9c:	680d      	ldr	r5, [r1, #0]
    7d9e:	4f85      	ldr	r7, [pc, #532]	; (7fb4 <_ZN9ClearCore10SysManager10InitializeEv+0x240>)
    SUPC->BOD33.bit.ENABLE = 0;
    7da0:	f364 0241 	bfi	r2, r4, #1, #1
    7da4:	611a      	str	r2, [r3, #16]
    SUPC->BOD33.bit.LEVEL = 167;  // Brown out voltage = 1.5V + LEVEL * 6mV.
    7da6:	691a      	ldr	r2, [r3, #16]
    7da8:	21a7      	movs	r1, #167	; 0xa7
    7daa:	f361 4217 	bfi	r2, r1, #16, #8
    7dae:	611a      	str	r2, [r3, #16]
    SUPC->BOD33.bit.ACTION = SUPC_BOD33_ACTION_RESET_Val;//SUPC_BOD33_ACTION_NONE_Val;
    7db0:	691a      	ldr	r2, [r3, #16]
    7db2:	f368 0283 	bfi	r2, r8, #2, #2
    7db6:	611a      	str	r2, [r3, #16]
    SUPC->BOD33.bit.HYST = 0x7;
    7db8:	691a      	ldr	r2, [r3, #16]
    7dba:	2107      	movs	r1, #7
    7dbc:	f361 220b 	bfi	r2, r1, #8, #4
    7dc0:	611a      	str	r2, [r3, #16]
    SUPC->BOD33.bit.ENABLE = 1; // enable brown-out detection
    7dc2:	691a      	ldr	r2, [r3, #16]
    7dc4:	f042 0202 	orr.w	r2, r2, #2
    7dc8:	611a      	str	r2, [r3, #16]
    StatusMgr.HBridgeState(true);
    7dca:	4628      	mov	r0, r5
    7dcc:	4641      	mov	r1, r8
    7dce:	f009 fe95 	bl	11afc <_ZN9ClearCore13StatusManager12HBridgeStateEb>
    7dd2:	4879      	ldr	r0, [pc, #484]	; (7fb8 <_ZN9ClearCore10SysManager10InitializeEv+0x244>)
    7dd4:	2100      	movs	r1, #0
    7dd6:	f000 fc9b 	bl	8710 <Delay_cycles>
    StatusMgr.HBridgeState(false);
    7dda:	4621      	mov	r1, r4
    7ddc:	4628      	mov	r0, r5
    7dde:	f009 fe8d 	bl	11afc <_ZN9ClearCore13StatusManager12HBridgeStateEb>
    DATA_DIRECTION_INPUT(OutFault_04or05.gpioPort,
    7de2:	4b76      	ldr	r3, [pc, #472]	; (7fbc <_ZN9ClearCore10SysManager10InitializeEv+0x248>)
    InputMgr.Initialize();
    7de4:	4a76      	ldr	r2, [pc, #472]	; (7fc0 <_ZN9ClearCore10SysManager10InitializeEv+0x24c>)
    DATA_DIRECTION_INPUT(OutFault_04or05.gpioPort,
    7de6:	f8c3 8084 	str.w	r8, [r3, #132]	; 0x84
    PIN_CONFIGURATION(OutFault_04or05.gpioPort, OutFault_04or05.gpioPin,
    7dea:	2102      	movs	r1, #2
    7dec:	f883 10c0 	strb.w	r1, [r3, #192]	; 0xc0
    InputMgr.Initialize();
    7df0:	6810      	ldr	r0, [r2, #0]
    7df2:	f006 fff3 	bl	eddc <_ZN9ClearCore12InputManager10InitializeEv>
        Connectors[i]->Initialize(static_cast<ClearCorePins>(i));
    7df6:	f857 0f04 	ldr.w	r0, [r7, #4]!
    7dfa:	6803      	ldr	r3, [r0, #0]
    7dfc:	b221      	sxth	r1, r4
    7dfe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    for (int32_t i = 0; i < CLEARCORE_PIN_MAX; i++) {
    7e00:	3401      	adds	r4, #1
        Connectors[i]->Initialize(static_cast<ClearCorePins>(i));
    7e02:	4798      	blx	r3
    for (int32_t i = 0; i < CLEARCORE_PIN_MAX; i++) {
    7e04:	2c15      	cmp	r4, #21
    7e06:	d1f6      	bne.n	7df6 <_ZN9ClearCore10SysManager10InitializeEv+0x82>
    DmaMgr.Initialize();
    7e08:	f006 f806 	bl	de18 <_ZN9ClearCore10DmaManager10InitializeEv>
    MotorMgr.Initialize();
    7e0c:	4b6d      	ldr	r3, [pc, #436]	; (7fc4 <_ZN9ClearCore10SysManager10InitializeEv+0x250>)
    7e0e:	6818      	ldr	r0, [r3, #0]
    7e10:	f002 f960 	bl	a0d4 <_ZN9ClearCore12MotorManager10InitializeEv>
    ShiftReg.Initialize();
    7e14:	486c      	ldr	r0, [pc, #432]	; (7fc8 <_ZN9ClearCore10SysManager10InitializeEv+0x254>)
    7e16:	f001 fd2b 	bl	9870 <_ZN9ClearCore13ShiftRegister10InitializeEv>
    AdcMgr.Initialize();
    7e1a:	4b6c      	ldr	r3, [pc, #432]	; (7fcc <_ZN9ClearCore10SysManager10InitializeEv+0x258>)
    7e1c:	6818      	ldr	r0, [r3, #0]
    7e1e:	f004 f90d 	bl	c03c <_ZN9ClearCore10AdcManager10InitializeEv>
    CcioMgr.Initialize();
    7e22:	4b6b      	ldr	r3, [pc, #428]	; (7fd0 <_ZN9ClearCore10SysManager10InitializeEv+0x25c>)
    7e24:	6818      	ldr	r0, [r3, #0]
    7e26:	f006 fb15 	bl	e454 <_ZN9ClearCore16CcioBoardManager10InitializeEv>
    UsbMgr.Initialize();
    7e2a:	4b6a      	ldr	r3, [pc, #424]	; (7fd4 <_ZN9ClearCore10SysManager10InitializeEv+0x260>)
    7e2c:	6818      	ldr	r0, [r3, #0]
    7e2e:	f7fd f9ef 	bl	5210 <_ZN9ClearCore10UsbManager10InitializeEv>
    EncoderIn.Initialize();
    7e32:	4869      	ldr	r0, [pc, #420]	; (7fd8 <_ZN9ClearCore10SysManager10InitializeEv+0x264>)
    7e34:	f002 ff68 	bl	ad08 <_ZN9ClearCore12EncoderInput10InitializeEv>
    SET_CLOCK_SOURCE(EIC_GCLK_ID, 0);
    7e38:	4a68      	ldr	r2, [pc, #416]	; (7fdc <_ZN9ClearCore10SysManager10InitializeEv+0x268>)
    7e3a:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
    7e3e:	f36f 1386 	bfc	r3, #6, #1
    7e42:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
    7e46:	f8d2 1090 	ldr.w	r1, [r2, #144]	; 0x90
    7e4a:	f3c1 1180 	ubfx	r1, r1, #6, #1
    7e4e:	2900      	cmp	r1, #0
    7e50:	d1f9      	bne.n	7e46 <_ZN9ClearCore10SysManager10InitializeEv+0xd2>
    7e52:	f8d2 0090 	ldr.w	r0, [r2, #144]	; 0x90
    CLOCK_ENABLE(APBAMASK, EIC_);
    7e56:	4c62      	ldr	r4, [pc, #392]	; (7fe0 <_ZN9ClearCore10SysManager10InitializeEv+0x26c>)
        \param[in] pattern Which pattern to set for the LED.
        \param[in] state If true, set the pattern. If false, clear the pattern.
    **/
    void LedPattern(uint32_t ledMask, LED_BLINK_CODE pattern,
                    bool state) {
        state ? m_patternMasks[pattern] |= ledMask
    7e58:	4f5b      	ldr	r7, [pc, #364]	; (7fc8 <_ZN9ClearCore10SysManager10InitializeEv+0x254>)
  NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
    7e5a:	4b62      	ldr	r3, [pc, #392]	; (7fe4 <_ZN9ClearCore10SysManager10InitializeEv+0x270>)
    if (TimingMgr.SysTickPeriodMicroSec(1000)) {
    7e5c:	f8df c190 	ldr.w	ip, [pc, #400]	; 7ff0 <_ZN9ClearCore10SysManager10InitializeEv+0x27c>
    SET_CLOCK_SOURCE(EIC_GCLK_ID, 0);
    7e60:	f361 0003 	bfi	r0, r1, #0, #4
    7e64:	f8c2 0090 	str.w	r0, [r2, #144]	; 0x90
    7e68:	f8d2 1090 	ldr.w	r1, [r2, #144]	; 0x90
    7e6c:	f041 0140 	orr.w	r1, r1, #64	; 0x40
    7e70:	f8c2 1090 	str.w	r1, [r2, #144]	; 0x90
    7e74:	6852      	ldr	r2, [r2, #4]
    CLOCK_ENABLE(APBAMASK, EIC_);
    7e76:	6961      	ldr	r1, [r4, #20]
    7e78:	f8d7 00ec 	ldr.w	r0, [r7, #236]	; 0xec
    7e7c:	f441 6180 	orr.w	r1, r1, #1024	; 0x400
    7e80:	f44f 5e80 	mov.w	lr, #4096	; 0x1000
    7e84:	6161      	str	r1, [r4, #20]
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    7e86:	22e0      	movs	r2, #224	; 0xe0
  NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
    7e88:	f8c3 e000 	str.w	lr, [r3]
    7e8c:	f440 4080 	orr.w	r0, r0, #16384	; 0x4000
    7e90:	f44f 3880 	mov.w	r8, #65536	; 0x10000
    7e94:	f44f 3e00 	mov.w	lr, #131072	; 0x20000
    7e98:	f44f 2180 	mov.w	r1, #262144	; 0x40000
    7e9c:	f44f 5900 	mov.w	r9, #8192	; 0x2000
    7ea0:	f44f 4480 	mov.w	r4, #16384	; 0x4000
    7ea4:	f44f 4a00 	mov.w	sl, #32768	; 0x8000
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    7ea8:	f883 230c 	strb.w	r2, [r3, #780]	; 0x30c
    7eac:	f8c7 00ec 	str.w	r0, [r7, #236]	; 0xec
  NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
    7eb0:	f8c3 9000 	str.w	r9, [r3]
    7eb4:	f44f 2000 	mov.w	r0, #524288	; 0x80000
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    7eb8:	f883 230d 	strb.w	r2, [r3, #781]	; 0x30d
  NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
    7ebc:	f44f 1780 	mov.w	r7, #1048576	; 0x100000
    7ec0:	601c      	str	r4, [r3, #0]
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    7ec2:	f883 230e 	strb.w	r2, [r3, #782]	; 0x30e
  NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
    7ec6:	f8c3 a000 	str.w	sl, [r3]
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    7eca:	f883 230f 	strb.w	r2, [r3, #783]	; 0x30f
  NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
    7ece:	f8c3 8000 	str.w	r8, [r3]
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    7ed2:	f883 2310 	strb.w	r2, [r3, #784]	; 0x310
  NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
    7ed6:	f8c3 e000 	str.w	lr, [r3]
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    7eda:	f883 2311 	strb.w	r2, [r3, #785]	; 0x311
  NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
    7ede:	f44f 1e00 	mov.w	lr, #2097152	; 0x200000
    7ee2:	6019      	str	r1, [r3, #0]
    7ee4:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    7ee8:	f883 2312 	strb.w	r2, [r3, #786]	; 0x312
  NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
    7eec:	6018      	str	r0, [r3, #0]
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    7eee:	f883 2313 	strb.w	r2, [r3, #787]	; 0x313
  NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
    7ef2:	f44f 0000 	mov.w	r0, #8388608	; 0x800000
    7ef6:	601f      	str	r7, [r3, #0]
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    7ef8:	f883 2314 	strb.w	r2, [r3, #788]	; 0x314
  NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
    7efc:	f8c3 e000 	str.w	lr, [r3]
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    7f00:	f883 2315 	strb.w	r2, [r3, #789]	; 0x315
  NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
    7f04:	6019      	str	r1, [r3, #0]
    7f06:	f04f 7180 	mov.w	r1, #16777216	; 0x1000000
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    7f0a:	f883 2316 	strb.w	r2, [r3, #790]	; 0x316
  NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
    7f0e:	f04f 7800 	mov.w	r8, #33554432	; 0x2000000
    7f12:	6018      	str	r0, [r3, #0]
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    7f14:	f883 2317 	strb.w	r2, [r3, #791]	; 0x317
  NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
    7f18:	6019      	str	r1, [r3, #0]
    if (TimingMgr.SysTickPeriodMicroSec(1000)) {
    7f1a:	f8dc 0000 	ldr.w	r0, [ip]
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    7f1e:	f883 2318 	strb.w	r2, [r3, #792]	; 0x318
  NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
    7f22:	f04f 6180 	mov.w	r1, #67108864	; 0x4000000
    7f26:	f04f 6c00 	mov.w	ip, #134217728	; 0x8000000
    7f2a:	f8c3 8000 	str.w	r8, [r3]
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    7f2e:	f883 2319 	strb.w	r2, [r3, #793]	; 0x319
  NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
    7f32:	f44f 7880 	mov.w	r8, #256	; 0x100
    7f36:	6019      	str	r1, [r3, #0]
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    7f38:	f883 231a 	strb.w	r2, [r3, #794]	; 0x31a
    7f3c:	2160      	movs	r1, #96	; 0x60
  NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
    7f3e:	f8c3 c000 	str.w	ip, [r3]
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    7f42:	f883 231b 	strb.w	r2, [r3, #795]	; 0x31b
  NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
    7f46:	f04f 0c20 	mov.w	ip, #32
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    7f4a:	2240      	movs	r2, #64	; 0x40
  NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
    7f4c:	f8c3 e008 	str.w	lr, [r3, #8]
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    7f50:	f883 1355 	strb.w	r1, [r3, #853]	; 0x355
  NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
    7f54:	609f      	str	r7, [r3, #8]
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    7f56:	f883 1354 	strb.w	r1, [r3, #852]	; 0x354
  NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
    7f5a:	f8c3 800c 	str.w	r8, [r3, #12]
    7f5e:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
    7f62:	f8c3 c00c 	str.w	ip, [r3, #12]
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    7f66:	f883 2368 	strb.w	r2, [r3, #872]	; 0x368
    7f6a:	f883 2365 	strb.w	r2, [r3, #869]	; 0x365
    7f6e:	f000 fb7f 	bl	8670 <_ZN9ClearCore9SysTiming21SysTickPeriodMicroSecEm>
    7f72:	b100      	cbz	r0, 7f76 <_ZN9ClearCore10SysManager10InitializeEv+0x202>
    7f74:	e7fe      	b.n	7f74 <_ZN9ClearCore10SysManager10InitializeEv+0x200>
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    7f76:	4b1c      	ldr	r3, [pc, #112]	; (7fe8 <_ZN9ClearCore10SysManager10InitializeEv+0x274>)
    7f78:	22c0      	movs	r2, #192	; 0xc0
    StatusMgr.Initialize(ShiftRegister::SR_UNDERGLOW_MASK);
    7f7a:	4621      	mov	r1, r4
    7f7c:	4628      	mov	r0, r5
    7f7e:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23
    7f82:	f009 fdad 	bl	11ae0 <_ZN9ClearCore13StatusManager10InitializeENS_13ShiftRegister5MasksE>
    while (Microseconds() < 10300) {
    7f86:	f642 043b 	movw	r4, #10299	; 0x283b
    7f8a:	f000 fb9d 	bl	86c8 <Microseconds>
    7f8e:	42a0      	cmp	r0, r4
    7f90:	d9fb      	bls.n	7f8a <_ZN9ClearCore10SysManager10InitializeEv+0x216>
    EthernetMgr.Initialize();
    7f92:	4b16      	ldr	r3, [pc, #88]	; (7fec <_ZN9ClearCore10SysManager10InitializeEv+0x278>)
    7f94:	6818      	ldr	r0, [r3, #0]
    7f96:	f000 fe4b 	bl	8c30 <_ZN9ClearCore15EthernetManager10InitializeEv>
    m_readyForOperations = true;
    7f9a:	2301      	movs	r3, #1
    7f9c:	7033      	strb	r3, [r6, #0]
    7f9e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    7fa2:	bf00      	nop
    7fa4:	e000edf0 	.word	0xe000edf0
    7fa8:	e0001000 	.word	0xe0001000
    7fac:	40001800 	.word	0x40001800
    7fb0:	20001fc8 	.word	0x20001fc8
    7fb4:	0002cd68 	.word	0x0002cd68
    7fb8:	0001d4c0 	.word	0x0001d4c0
    7fbc:	41008000 	.word	0x41008000
    7fc0:	20001fb8 	.word	0x20001fb8
    7fc4:	20001cac 	.word	0x20001cac
    7fc8:	20001a80 	.word	0x20001a80
    7fcc:	20001eac 	.word	0x20001eac
    7fd0:	20001fac 	.word	0x20001fac
    7fd4:	20000b84 	.word	0x20000b84
    7fd8:	20001b98 	.word	0x20001b98
    7fdc:	40001c00 	.word	0x40001c00
    7fe0:	40000800 	.word	0x40000800
    7fe4:	e000e100 	.word	0xe000e100
    7fe8:	e000ed00 	.word	0xe000ed00
    7fec:	20001ca0 	.word	0x20001ca0
    7ff0:	20001c94 	.word	0x20001c94

00007ff4 <_ZN9ClearCore10SysManager10ResetBoardENS0_10ResetModesE>:
  __ASM volatile ("cpsid i" : : : "memory");
    7ff4:	b672      	cpsid	i
    7ff6:	4a09      	ldr	r2, [pc, #36]	; (801c <_ZN9ClearCore10SysManager10ResetBoardENS0_10ResetModesE+0x28>)
    uint32_t *addr = (uint32_t *)BOOT_DOUBLE_TAP_ADDRESS;
    if (mode == RESET_TO_BOOTLOADER) {
        *addr = DOUBLE_TAP_MAGIC;
    }
    else {
        *addr = 0;
    7ff8:	4b09      	ldr	r3, [pc, #36]	; (8020 <_ZN9ClearCore10SysManager10ResetBoardENS0_10ResetModesE+0x2c>)
    7ffa:	2901      	cmp	r1, #1
    7ffc:	bf18      	it	ne
    7ffe:	2300      	movne	r3, #0
    8000:	6013      	str	r3, [r2, #0]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__attribute__((always_inline)) __STATIC_INLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
    8002:	f3bf 8f4f 	dsb	sy
__STATIC_INLINE void NVIC_SystemReset(void)
{
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
    8006:	4907      	ldr	r1, [pc, #28]	; (8024 <_ZN9ClearCore10SysManager10ResetBoardENS0_10ResetModesE+0x30>)
    8008:	4b07      	ldr	r3, [pc, #28]	; (8028 <_ZN9ClearCore10SysManager10ResetBoardENS0_10ResetModesE+0x34>)
    800a:	68ca      	ldr	r2, [r1, #12]
    800c:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
    8010:	4313      	orrs	r3, r2
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
    8012:	60cb      	str	r3, [r1, #12]
    8014:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("nop");
    8018:	bf00      	nop
    801a:	e7fd      	b.n	8018 <_ZN9ClearCore10SysManager10ResetBoardENS0_10ResetModesE+0x24>
    801c:	2002fffc 	.word	0x2002fffc
    8020:	f01669ef 	.word	0xf01669ef
    8024:	e000ed00 	.word	0xe000ed00
    8028:	05fa0004 	.word	0x05fa0004

0000802c <GMAC_Handler>:
// =============================================================================
// =========================== Connector ISR Handlers ==========================
// =============================================================================

extern "C" void GMAC_Handler(void) {
    ClearCore::EthernetMgr.IrqHandlerGmac();
    802c:	4b01      	ldr	r3, [pc, #4]	; (8034 <GMAC_Handler+0x8>)
    802e:	6818      	ldr	r0, [r3, #0]
    8030:	f001 ba76 	b.w	9520 <_ZN9ClearCore15EthernetManager14IrqHandlerGmacEv>
    8034:	20001ca0 	.word	0x20001ca0

00008038 <SERCOM0_0_Handler>:
}

extern "C" void SERCOM0_0_Handler(void) {
    ClearCore::ConnectorCOM1.IrqHandlerTx();
    8038:	4801      	ldr	r0, [pc, #4]	; (8040 <SERCOM0_0_Handler+0x8>)
    803a:	f009 b9e7 	b.w	1140c <_ZN9ClearCore10SerialBase12IrqHandlerTxEv>
    803e:	bf00      	nop
    8040:	20001698 	.word	0x20001698

00008044 <SERCOM0_2_Handler>:
}
extern "C" void SERCOM0_2_Handler(void) {
    ClearCore::ConnectorCOM1.IrqHandlerRx();
    8044:	4801      	ldr	r0, [pc, #4]	; (804c <SERCOM0_2_Handler+0x8>)
    8046:	f009 ba09 	b.w	1145c <_ZN9ClearCore10SerialBase12IrqHandlerRxEv>
    804a:	bf00      	nop
    804c:	20001698 	.word	0x20001698

00008050 <SERCOM0_3_Handler>:
}
extern "C" void SERCOM0_3_Handler(void) {
    ClearCore::ConnectorCOM1.IrqHandlerException();
    8050:	4801      	ldr	r0, [pc, #4]	; (8058 <SERCOM0_3_Handler+0x8>)
    8052:	f009 ba3f 	b.w	114d4 <_ZN9ClearCore10SerialBase19IrqHandlerExceptionEv>
    8056:	bf00      	nop
    8058:	20001698 	.word	0x20001698

0000805c <SERCOM2_0_Handler>:
}

extern "C" void SERCOM2_0_Handler(void) {
    ClearCore::XBee.IrqHandlerTx();
    805c:	4801      	ldr	r0, [pc, #4]	; (8064 <SERCOM2_0_Handler+0x8>)
    805e:	f009 b9d5 	b.w	1140c <_ZN9ClearCore10SerialBase12IrqHandlerTxEv>
    8062:	bf00      	nop
    8064:	200017f0 	.word	0x200017f0

00008068 <SERCOM2_2_Handler>:
}
extern "C" void SERCOM2_2_Handler(void) {
    ClearCore::XBee.IrqHandlerRx();
    8068:	4801      	ldr	r0, [pc, #4]	; (8070 <SERCOM2_2_Handler+0x8>)
    806a:	f009 b9f7 	b.w	1145c <_ZN9ClearCore10SerialBase12IrqHandlerRxEv>
    806e:	bf00      	nop
    8070:	200017f0 	.word	0x200017f0

00008074 <SERCOM2_3_Handler>:
}
extern "C" void SERCOM2_3_Handler(void) {
    ClearCore::XBee.IrqHandlerException();
    8074:	4801      	ldr	r0, [pc, #4]	; (807c <SERCOM2_3_Handler+0x8>)
    8076:	f009 ba2d 	b.w	114d4 <_ZN9ClearCore10SerialBase19IrqHandlerExceptionEv>
    807a:	bf00      	nop
    807c:	200017f0 	.word	0x200017f0

00008080 <SERCOM7_0_Handler>:
}

extern "C" void SERCOM7_0_Handler(void) {
    ClearCore::ConnectorCOM0.IrqHandlerTx();
    8080:	4801      	ldr	r0, [pc, #4]	; (8088 <SERCOM7_0_Handler+0x8>)
    8082:	f009 b9c3 	b.w	1140c <_ZN9ClearCore10SerialBase12IrqHandlerTxEv>
    8086:	bf00      	nop
    8088:	20001540 	.word	0x20001540

0000808c <SERCOM7_2_Handler>:
}
extern "C" void SERCOM7_2_Handler(void) {
    ClearCore::ConnectorCOM0.IrqHandlerRx();
    808c:	4801      	ldr	r0, [pc, #4]	; (8094 <SERCOM7_2_Handler+0x8>)
    808e:	f009 b9e5 	b.w	1145c <_ZN9ClearCore10SerialBase12IrqHandlerRxEv>
    8092:	bf00      	nop
    8094:	20001540 	.word	0x20001540

00008098 <SERCOM7_3_Handler>:
}
extern "C" void SERCOM7_3_Handler(void) {
    ClearCore::ConnectorCOM0.IrqHandlerException();
    8098:	4801      	ldr	r0, [pc, #4]	; (80a0 <SERCOM7_3_Handler+0x8>)
    809a:	f009 ba1b 	b.w	114d4 <_ZN9ClearCore10SerialBase19IrqHandlerExceptionEv>
    809e:	bf00      	nop
    80a0:	20001540 	.word	0x20001540

000080a4 <EIC_0_Handler>:
}

extern "C" void EIC_0_Handler(void) {
    ClearCore::InputMgr.EIC_Handler(0);
    80a4:	4b02      	ldr	r3, [pc, #8]	; (80b0 <EIC_0_Handler+0xc>)
    80a6:	2100      	movs	r1, #0
    80a8:	6818      	ldr	r0, [r3, #0]
    80aa:	f006 bedf 	b.w	ee6c <_ZN9ClearCore12InputManager11EIC_HandlerEh>
    80ae:	bf00      	nop
    80b0:	20001fb8 	.word	0x20001fb8

000080b4 <EIC_1_Handler>:
}

extern "C" void EIC_1_Handler(void) {
    ClearCore::InputMgr.EIC_Handler(1);
    80b4:	4b02      	ldr	r3, [pc, #8]	; (80c0 <EIC_1_Handler+0xc>)
    80b6:	2101      	movs	r1, #1
    80b8:	6818      	ldr	r0, [r3, #0]
    80ba:	f006 bed7 	b.w	ee6c <_ZN9ClearCore12InputManager11EIC_HandlerEh>
    80be:	bf00      	nop
    80c0:	20001fb8 	.word	0x20001fb8

000080c4 <EIC_2_Handler>:
}

extern "C" void EIC_2_Handler(void) {
    ClearCore::InputMgr.EIC_Handler(2);
    80c4:	4b02      	ldr	r3, [pc, #8]	; (80d0 <EIC_2_Handler+0xc>)
    80c6:	2102      	movs	r1, #2
    80c8:	6818      	ldr	r0, [r3, #0]
    80ca:	f006 becf 	b.w	ee6c <_ZN9ClearCore12InputManager11EIC_HandlerEh>
    80ce:	bf00      	nop
    80d0:	20001fb8 	.word	0x20001fb8

000080d4 <EIC_3_Handler>:
}

extern "C" void EIC_3_Handler(void) {
    ClearCore::InputMgr.EIC_Handler(3);
    80d4:	4b02      	ldr	r3, [pc, #8]	; (80e0 <EIC_3_Handler+0xc>)
    80d6:	2103      	movs	r1, #3
    80d8:	6818      	ldr	r0, [r3, #0]
    80da:	f006 bec7 	b.w	ee6c <_ZN9ClearCore12InputManager11EIC_HandlerEh>
    80de:	bf00      	nop
    80e0:	20001fb8 	.word	0x20001fb8

000080e4 <EIC_4_Handler>:
}

extern "C" void EIC_4_Handler(void) {
    ClearCore::InputMgr.EIC_Handler(4);
    80e4:	4b02      	ldr	r3, [pc, #8]	; (80f0 <EIC_4_Handler+0xc>)
    80e6:	2104      	movs	r1, #4
    80e8:	6818      	ldr	r0, [r3, #0]
    80ea:	f006 bebf 	b.w	ee6c <_ZN9ClearCore12InputManager11EIC_HandlerEh>
    80ee:	bf00      	nop
    80f0:	20001fb8 	.word	0x20001fb8

000080f4 <EIC_5_Handler>:
}

extern "C" void EIC_5_Handler(void) {
    ClearCore::InputMgr.EIC_Handler(5);
    80f4:	4b02      	ldr	r3, [pc, #8]	; (8100 <EIC_5_Handler+0xc>)
    80f6:	2105      	movs	r1, #5
    80f8:	6818      	ldr	r0, [r3, #0]
    80fa:	f006 beb7 	b.w	ee6c <_ZN9ClearCore12InputManager11EIC_HandlerEh>
    80fe:	bf00      	nop
    8100:	20001fb8 	.word	0x20001fb8

00008104 <EIC_6_Handler>:
}

extern "C" void EIC_6_Handler(void) {
    ClearCore::InputMgr.EIC_Handler(6);
    8104:	4b02      	ldr	r3, [pc, #8]	; (8110 <EIC_6_Handler+0xc>)
    8106:	2106      	movs	r1, #6
    8108:	6818      	ldr	r0, [r3, #0]
    810a:	f006 beaf 	b.w	ee6c <_ZN9ClearCore12InputManager11EIC_HandlerEh>
    810e:	bf00      	nop
    8110:	20001fb8 	.word	0x20001fb8

00008114 <EIC_7_Handler>:
}

extern "C" void EIC_7_Handler(void) {
    ClearCore::InputMgr.EIC_Handler(7);
    8114:	4b02      	ldr	r3, [pc, #8]	; (8120 <EIC_7_Handler+0xc>)
    8116:	2107      	movs	r1, #7
    8118:	6818      	ldr	r0, [r3, #0]
    811a:	f006 bea7 	b.w	ee6c <_ZN9ClearCore12InputManager11EIC_HandlerEh>
    811e:	bf00      	nop
    8120:	20001fb8 	.word	0x20001fb8

00008124 <EIC_8_Handler>:
}

extern "C" void EIC_8_Handler(void) {
    ClearCore::InputMgr.EIC_Handler(8);
    8124:	4b02      	ldr	r3, [pc, #8]	; (8130 <EIC_8_Handler+0xc>)
    8126:	2108      	movs	r1, #8
    8128:	6818      	ldr	r0, [r3, #0]
    812a:	f006 be9f 	b.w	ee6c <_ZN9ClearCore12InputManager11EIC_HandlerEh>
    812e:	bf00      	nop
    8130:	20001fb8 	.word	0x20001fb8

00008134 <EIC_9_Handler>:
}

extern "C" void EIC_9_Handler(void) {
    ClearCore::InputMgr.EIC_Handler(9);
    8134:	4b02      	ldr	r3, [pc, #8]	; (8140 <EIC_9_Handler+0xc>)
    8136:	2109      	movs	r1, #9
    8138:	6818      	ldr	r0, [r3, #0]
    813a:	f006 be97 	b.w	ee6c <_ZN9ClearCore12InputManager11EIC_HandlerEh>
    813e:	bf00      	nop
    8140:	20001fb8 	.word	0x20001fb8

00008144 <EIC_10_Handler>:
}

extern "C" void EIC_10_Handler(void) {
    ClearCore::InputMgr.EIC_Handler(10);
    8144:	4b02      	ldr	r3, [pc, #8]	; (8150 <EIC_10_Handler+0xc>)
    8146:	210a      	movs	r1, #10
    8148:	6818      	ldr	r0, [r3, #0]
    814a:	f006 be8f 	b.w	ee6c <_ZN9ClearCore12InputManager11EIC_HandlerEh>
    814e:	bf00      	nop
    8150:	20001fb8 	.word	0x20001fb8

00008154 <EIC_11_Handler>:
}

extern "C" void EIC_11_Handler(void) {
    ClearCore::InputMgr.EIC_Handler(11);
    8154:	4b02      	ldr	r3, [pc, #8]	; (8160 <EIC_11_Handler+0xc>)
    8156:	210b      	movs	r1, #11
    8158:	6818      	ldr	r0, [r3, #0]
    815a:	f006 be87 	b.w	ee6c <_ZN9ClearCore12InputManager11EIC_HandlerEh>
    815e:	bf00      	nop
    8160:	20001fb8 	.word	0x20001fb8

00008164 <EIC_12_Handler>:
}

extern "C" void EIC_12_Handler(void) {
    ClearCore::EthernetMgr.IrqHandlerPhy();
    8164:	4b01      	ldr	r3, [pc, #4]	; (816c <EIC_12_Handler+0x8>)
    8166:	6818      	ldr	r0, [r3, #0]
    8168:	f001 b81e 	b.w	91a8 <_ZN9ClearCore15EthernetManager13IrqHandlerPhyEv>
    816c:	20001ca0 	.word	0x20001ca0

00008170 <EIC_13_Handler>:
}

extern "C" void EIC_13_Handler(void) {
    ClearCore::InputMgr.EIC_Handler(13);
    8170:	4b02      	ldr	r3, [pc, #8]	; (817c <EIC_13_Handler+0xc>)
    8172:	210d      	movs	r1, #13
    8174:	6818      	ldr	r0, [r3, #0]
    8176:	f006 be79 	b.w	ee6c <_ZN9ClearCore12InputManager11EIC_HandlerEh>
    817a:	bf00      	nop
    817c:	20001fb8 	.word	0x20001fb8

00008180 <EIC_14_Handler>:
}

extern "C" void EIC_14_Handler(void) {
    ClearCore::InputMgr.EIC_Handler(14);
    8180:	4b02      	ldr	r3, [pc, #8]	; (818c <EIC_14_Handler+0xc>)
    8182:	210e      	movs	r1, #14
    8184:	6818      	ldr	r0, [r3, #0]
    8186:	f006 be71 	b.w	ee6c <_ZN9ClearCore12InputManager11EIC_HandlerEh>
    818a:	bf00      	nop
    818c:	20001fb8 	.word	0x20001fb8

00008190 <EIC_15_Handler>:
}

extern "C" void EIC_15_Handler(void) {
    ClearCore::InputMgr.EIC_Handler(15);
    8190:	4b02      	ldr	r3, [pc, #8]	; (819c <EIC_15_Handler+0xc>)
    8192:	210f      	movs	r1, #15
    8194:	6818      	ldr	r0, [r3, #0]
    8196:	f006 be69 	b.w	ee6c <_ZN9ClearCore12InputManager11EIC_HandlerEh>
    819a:	bf00      	nop
    819c:	20001fb8 	.word	0x20001fb8

000081a0 <TCC3_0_Handler>:
}

extern "C" void TCC3_0_Handler(void) {
    TCC3->INTFLAG.reg = TCC_INTFLAG_MASK;
    81a0:	4b02      	ldr	r3, [pc, #8]	; (81ac <TCC3_0_Handler+0xc>)
    81a2:	4a03      	ldr	r2, [pc, #12]	; (81b0 <TCC3_0_Handler+0x10>)
    81a4:	62da      	str	r2, [r3, #44]	; 0x2c
    ClearCore::ConnectorIO5.ToneUpdate();
    81a6:	4803      	ldr	r0, [pc, #12]	; (81b4 <TCC3_0_Handler+0x14>)
    81a8:	f005 bbc0 	b.w	d92c <_ZN9ClearCore19DigitalInOutHBridge10ToneUpdateEv>
    81ac:	42001000 	.word	0x42001000
    81b0:	003ffc0f 	.word	0x003ffc0f
    81b4:	200014a0 	.word	0x200014a0

000081b8 <TCC4_0_Handler>:
}
extern "C" void TCC4_0_Handler(void) {
    TCC4->INTFLAG.reg = TCC_INTFLAG_MASK;
    81b8:	4b02      	ldr	r3, [pc, #8]	; (81c4 <TCC4_0_Handler+0xc>)
    81ba:	4a03      	ldr	r2, [pc, #12]	; (81c8 <TCC4_0_Handler+0x10>)
    81bc:	62da      	str	r2, [r3, #44]	; 0x2c
    ClearCore::ConnectorIO4.ToneUpdate();
    81be:	4803      	ldr	r0, [pc, #12]	; (81cc <TCC4_0_Handler+0x14>)
    81c0:	f005 bbb4 	b.w	d92c <_ZN9ClearCore19DigitalInOutHBridge10ToneUpdateEv>
    81c4:	43001000 	.word	0x43001000
    81c8:	003ffc0f 	.word	0x003ffc0f
    81cc:	2000141c 	.word	0x2000141c

000081d0 <SysTick_Handler>:
}

extern "C" void SysTick_Handler(void) {
    81d0:	b508      	push	{r3, lr}
    if (!FastSysTick) {
    81d2:	4b0d      	ldr	r3, [pc, #52]	; (8208 <SysTick_Handler+0x38>)
    81d4:	781b      	ldrb	r3, [r3, #0]
    81d6:	b103      	cbz	r3, 81da <SysTick_Handler+0xa>
    81d8:	bd08      	pop	{r3, pc}
    if (!m_readyForOperations) {
    81da:	4b0c      	ldr	r3, [pc, #48]	; (820c <SysTick_Handler+0x3c>)
    81dc:	781b      	ldrb	r3, [r3, #0]
    81de:	2b00      	cmp	r3, #0
    81e0:	d0fa      	beq.n	81d8 <SysTick_Handler+0x8>
    CcioMgr.RefreshSlow();
    81e2:	4b0b      	ldr	r3, [pc, #44]	; (8210 <SysTick_Handler+0x40>)
    81e4:	6818      	ldr	r0, [r3, #0]
    81e6:	f006 fc8b 	bl	eb00 <_ZN9ClearCore16CcioBoardManager11RefreshSlowEv>
        MotorConnectors[iMotor]->RefreshSlow();
    81ea:	480a      	ldr	r0, [pc, #40]	; (8214 <SysTick_Handler+0x44>)
    81ec:	f007 f900 	bl	f3f0 <_ZN9ClearCore11MotorDriver11RefreshSlowEv>
    81f0:	4809      	ldr	r0, [pc, #36]	; (8218 <SysTick_Handler+0x48>)
    81f2:	f007 f8fd 	bl	f3f0 <_ZN9ClearCore11MotorDriver11RefreshSlowEv>
    81f6:	4809      	ldr	r0, [pc, #36]	; (821c <SysTick_Handler+0x4c>)
    81f8:	f007 f8fa 	bl	f3f0 <_ZN9ClearCore11MotorDriver11RefreshSlowEv>
    81fc:	4808      	ldr	r0, [pc, #32]	; (8220 <SysTick_Handler+0x50>)
    ClearCore::SysMgr.SysTickUpdate();
}
    81fe:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
        MotorConnectors[iMotor]->RefreshSlow();
    8202:	f007 b8f5 	b.w	f3f0 <_ZN9ClearCore11MotorDriver11RefreshSlowEv>
    8206:	bf00      	nop
    8208:	20001130 	.word	0x20001130
    820c:	20001a7c 	.word	0x20001a7c
    8210:	20001fac 	.word	0x20001fac
    8214:	20000c10 	.word	0x20000c10
    8218:	20000d58 	.word	0x20000d58
    821c:	20000ea0 	.word	0x20000ea0
    8220:	20000fe8 	.word	0x20000fe8

00008224 <TCC0_0_Handler>:
    TimingMgr.IsrStart();
    8224:	4a30      	ldr	r2, [pc, #192]	; (82e8 <TCC0_0_Handler+0xc4>)
/**
    Interrupt to handle ClearCore background tasks
**/
extern "C" void TCC0_0_Handler(void) {
    8226:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    ACK_FAST_UPDATE_INT;
    822a:	4b30      	ldr	r3, [pc, #192]	; (82ec <TCC0_0_Handler+0xc8>)
    TimingMgr.IsrStart();
    822c:	6816      	ldr	r6, [r2, #0]
    ACK_FAST_UPDATE_INT;
    822e:	4a30      	ldr	r2, [pc, #192]	; (82f0 <TCC0_0_Handler+0xcc>)
    8230:	62da      	str	r2, [r3, #44]	; 0x2c
    TimingMgr.IsrStart();
    8232:	4630      	mov	r0, r6
    8234:	f000 f9ca 	bl	85cc <_ZN9ClearCore9SysTiming8IsrStartEv>
    CcioMgr.Refresh();
    8238:	4b2e      	ldr	r3, [pc, #184]	; (82f4 <TCC0_0_Handler+0xd0>)

        \return True if the board is initialized and ready for
        operations.
    **/
    bool Ready() {
        return m_readyForOperations;
    823a:	f8df 80f4 	ldr.w	r8, [pc, #244]	; 8330 <TCC0_0_Handler+0x10c>
    823e:	f8d3 9000 	ldr.w	r9, [r3]
    8242:	4648      	mov	r0, r9
    8244:	f006 f97a 	bl	e53c <_ZN9ClearCore16CcioBoardManager7RefreshEv>
    AdcMgr.Update();
    8248:	4b2b      	ldr	r3, [pc, #172]	; (82f8 <TCC0_0_Handler+0xd4>)
    824a:	6818      	ldr	r0, [r3, #0]
    824c:	f004 f8b0 	bl	c3b0 <_ZN9ClearCore10AdcManager6UpdateEv>
    StatusMgr.Refresh();
    8250:	4b2a      	ldr	r3, [pc, #168]	; (82fc <TCC0_0_Handler+0xd8>)
    8252:	6818      	ldr	r0, [r3, #0]
    8254:	f009 fce8 	bl	11c28 <_ZN9ClearCore13StatusManager7RefreshEv>
    UsbMgr.Refresh();
    8258:	4b29      	ldr	r3, [pc, #164]	; (8300 <TCC0_0_Handler+0xdc>)
    825a:	6818      	ldr	r0, [r3, #0]
    825c:	f7fd fe22 	bl	5ea4 <_ZN9ClearCore10UsbManager7RefreshEv>
    InputMgr.UpdateBegin();
    8260:	4b28      	ldr	r3, [pc, #160]	; (8304 <TCC0_0_Handler+0xe0>)
    8262:	681f      	ldr	r7, [r3, #0]
    8264:	4638      	mov	r0, r7
    8266:	f006 fe2f 	bl	eec8 <_ZN9ClearCore12InputManager11UpdateBeginEv>
    if (SysMgr.Ready()) {
    826a:	f898 3000 	ldrb.w	r3, [r8]
    826e:	b15b      	cbz	r3, 8288 <TCC0_0_Handler+0x64>
    8270:	4c25      	ldr	r4, [pc, #148]	; (8308 <TCC0_0_Handler+0xe4>)
    8272:	4826      	ldr	r0, [pc, #152]	; (830c <TCC0_0_Handler+0xe8>)
    8274:	f104 0550 	add.w	r5, r4, #80	; 0x50
    8278:	e001      	b.n	827e <TCC0_0_Handler+0x5a>
    827a:	f854 0f04 	ldr.w	r0, [r4, #4]!
            Connectors[i]->Refresh();
    827e:	6803      	ldr	r3, [r0, #0]
    8280:	6a1b      	ldr	r3, [r3, #32]
    8282:	4798      	blx	r3
        for (uint8_t i = 0; i < CLEARCORE_PIN_MAX; i++) {
    8284:	42ac      	cmp	r4, r5
    8286:	d1f8      	bne.n	827a <TCC0_0_Handler+0x56>
    InputMgr.UpdateEnd();
    8288:	4638      	mov	r0, r7
    828a:	f006 fe31 	bl	eef0 <_ZN9ClearCore12InputManager9UpdateEndEv>
    EncoderIn.Update();
    828e:	4820      	ldr	r0, [pc, #128]	; (8310 <TCC0_0_Handler+0xec>)
    8290:	f002 fd68 	bl	ad64 <_ZN9ClearCore12EncoderInput6UpdateEv>
    ShiftReg.Update();
    8294:	481f      	ldr	r0, [pc, #124]	; (8314 <TCC0_0_Handler+0xf0>)
    8296:	f001 fbbd 	bl	9a14 <_ZN9ClearCore13ShiftRegister6UpdateEv>
    TimingMgr.Update();
    829a:	4630      	mov	r0, r6
    829c:	f000 f9ac 	bl	85f8 <_ZN9ClearCore9SysTiming6UpdateEv>
    tickCnt++;
    82a0:	4a1d      	ldr	r2, [pc, #116]	; (8318 <TCC0_0_Handler+0xf4>)
    if (FastSysTick) {
    82a2:	491e      	ldr	r1, [pc, #120]	; (831c <TCC0_0_Handler+0xf8>)
    tickCnt++;
    82a4:	6813      	ldr	r3, [r2, #0]
    if (FastSysTick) {
    82a6:	7809      	ldrb	r1, [r1, #0]
    tickCnt++;
    82a8:	3301      	adds	r3, #1
    82aa:	6013      	str	r3, [r2, #0]
    if (FastSysTick) {
    82ac:	b111      	cbz	r1, 82b4 <TCC0_0_Handler+0x90>
    if (!m_readyForOperations) {
    82ae:	f898 3000 	ldrb.w	r3, [r8]
    82b2:	b923      	cbnz	r3, 82be <TCC0_0_Handler+0x9a>
    TimingMgr.IsrEnd();
    82b4:	4630      	mov	r0, r6
    ClearCore::SysMgr.FastUpdate();
}
    82b6:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    TimingMgr.IsrEnd();
    82ba:	f000 b98d 	b.w	85d8 <_ZN9ClearCore9SysTiming6IsrEndEv>
    CcioMgr.RefreshSlow();
    82be:	4648      	mov	r0, r9
    82c0:	f006 fc1e 	bl	eb00 <_ZN9ClearCore16CcioBoardManager11RefreshSlowEv>
        MotorConnectors[iMotor]->RefreshSlow();
    82c4:	4816      	ldr	r0, [pc, #88]	; (8320 <TCC0_0_Handler+0xfc>)
    82c6:	f007 f893 	bl	f3f0 <_ZN9ClearCore11MotorDriver11RefreshSlowEv>
    82ca:	4816      	ldr	r0, [pc, #88]	; (8324 <TCC0_0_Handler+0x100>)
    82cc:	f007 f890 	bl	f3f0 <_ZN9ClearCore11MotorDriver11RefreshSlowEv>
    82d0:	4815      	ldr	r0, [pc, #84]	; (8328 <TCC0_0_Handler+0x104>)
    82d2:	f007 f88d 	bl	f3f0 <_ZN9ClearCore11MotorDriver11RefreshSlowEv>
    82d6:	4815      	ldr	r0, [pc, #84]	; (832c <TCC0_0_Handler+0x108>)
    82d8:	f007 f88a 	bl	f3f0 <_ZN9ClearCore11MotorDriver11RefreshSlowEv>
    TimingMgr.IsrEnd();
    82dc:	4630      	mov	r0, r6
}
    82de:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    TimingMgr.IsrEnd();
    82e2:	f000 b979 	b.w	85d8 <_ZN9ClearCore9SysTiming6IsrEndEv>
    82e6:	bf00      	nop
    82e8:	20001c94 	.word	0x20001c94
    82ec:	41016000 	.word	0x41016000
    82f0:	003ffc0f 	.word	0x003ffc0f
    82f4:	20001fac 	.word	0x20001fac
    82f8:	20001eac 	.word	0x20001eac
    82fc:	20001fc8 	.word	0x20001fc8
    8300:	20000b84 	.word	0x20000b84
    8304:	20001fb8 	.word	0x20001fb8
    8308:	0002cd6c 	.word	0x0002cd6c
    830c:	20001290 	.word	0x20001290
    8310:	20001b98 	.word	0x20001b98
    8314:	20001a80 	.word	0x20001a80
    8318:	20001c90 	.word	0x20001c90
    831c:	20001130 	.word	0x20001130
    8320:	20000c10 	.word	0x20000c10
    8324:	20000d58 	.word	0x20000d58
    8328:	20000ea0 	.word	0x20000ea0
    832c:	20000fe8 	.word	0x20000fe8
    8330:	20001a7c 	.word	0x20001a7c

00008334 <Reset_Handler>:
extern int main(void);

/**
    This is called on processor reset to initialize the device and call main().
*/
void Reset_Handler(void) {
    8334:	b508      	push	{r3, lr}

    // Initialize the initialized data section
    pSrc = &__etext;
    pDest = &__data_start__;

    if ((&__data_start__ != &__data_end__) && (pSrc != pDest)) {
    8336:	4813      	ldr	r0, [pc, #76]	; (8384 <Reset_Handler+0x50>)
    8338:	4b13      	ldr	r3, [pc, #76]	; (8388 <Reset_Handler+0x54>)
    833a:	4298      	cmp	r0, r3
    833c:	d00b      	beq.n	8356 <Reset_Handler+0x22>
    833e:	4913      	ldr	r1, [pc, #76]	; (838c <Reset_Handler+0x58>)
    8340:	4281      	cmp	r1, r0
    8342:	d008      	beq.n	8356 <Reset_Handler+0x22>
        for (; pDest < &__data_end__; pDest++, pSrc++) {
    8344:	4298      	cmp	r0, r3
    8346:	d206      	bcs.n	8356 <Reset_Handler+0x22>
            *pDest = *pSrc;
    8348:	43c2      	mvns	r2, r0
    834a:	441a      	add	r2, r3
    834c:	f022 0203 	bic.w	r2, r2, #3
    8350:	3204      	adds	r2, #4
    8352:	f01f fc85 	bl	27c60 <memcpy>
        }
    }

    // Clear the zero section
    if (&__bss_start__ != &__bss_end__) {
    8356:	480e      	ldr	r0, [pc, #56]	; (8390 <Reset_Handler+0x5c>)
    8358:	4b0e      	ldr	r3, [pc, #56]	; (8394 <Reset_Handler+0x60>)
    835a:	4298      	cmp	r0, r3
    835c:	d008      	beq.n	8370 <Reset_Handler+0x3c>
        for (pDest = &__bss_start__; pDest < &__bss_end__; pDest++) {
    835e:	d207      	bcs.n	8370 <Reset_Handler+0x3c>
            *pDest = 0ul;
    8360:	43c2      	mvns	r2, r0
    8362:	441a      	add	r2, r3
    8364:	f022 0203 	bic.w	r2, r2, #3
    8368:	3204      	adds	r2, #4
    836a:	2100      	movs	r1, #0
    836c:	f01f fd76 	bl	27e5c <memset>
        }
    }

    SystemInit();
    8370:	f002 fb26 	bl	a9c0 <SystemInit>

    /* Initialize the C library */
    __libc_init_array();
    8374:	f01f f8e6 	bl	27544 <__libc_init_array>

    ClearCore::SysMgr.Initialize();
    8378:	4807      	ldr	r0, [pc, #28]	; (8398 <Reset_Handler+0x64>)
    837a:	f7ff fcfb 	bl	7d74 <_ZN9ClearCore10SysManager10InitializeEv>

#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wpedantic"
    // ISO C++ forbids hijacking main(), but we can't avoid it
    // in this application.
    main();
    837e:	f7fb ffd7 	bl	4330 <main>
    8382:	e7fe      	b.n	8382 <Reset_Handler+0x4e>
    8384:	20000000 	.word	0x20000000
    8388:	20000ac0 	.word	0x20000ac0
    838c:	0002f2fc 	.word	0x0002f2fc
    8390:	20000ac0 	.word	0x20000ac0
    8394:	2000a444 	.word	0x2000a444
    8398:	20001a7c 	.word	0x20001a7c

0000839c <_GLOBAL__sub_I__ZN9ClearCore11FastSysTickE>:
#pragma GCC diagnostic pop

    while (1) {
        continue;
    }
}
    839c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
EncoderInput EncoderIn;
    83a0:	4852      	ldr	r0, [pc, #328]	; (84ec <_GLOBAL__sub_I__ZN9ClearCore11FastSysTickE+0x150>)
        \brief Default constructor so this connector can be a global and
        constructed by SysManager.

        \note Should not be called by anything other than SysManager.
    **/
    LedDriver() {};
    83a2:	4d53      	ldr	r5, [pc, #332]	; (84f0 <_GLOBAL__sub_I__ZN9ClearCore11FastSysTickE+0x154>)
    DigitalIn() {};
    83a4:	4c53      	ldr	r4, [pc, #332]	; (84f4 <_GLOBAL__sub_I__ZN9ClearCore11FastSysTickE+0x158>)
    83a6:	f8df 91bc 	ldr.w	r9, [pc, #444]	; 8564 <_GLOBAL__sub_I__ZN9ClearCore11FastSysTickE+0x1c8>
    83aa:	f8df 81bc 	ldr.w	r8, [pc, #444]	; 8568 <_GLOBAL__sub_I__ZN9ClearCore11FastSysTickE+0x1cc>
    83ae:	4f52      	ldr	r7, [pc, #328]	; (84f8 <_GLOBAL__sub_I__ZN9ClearCore11FastSysTickE+0x15c>)
    83b0:	f002 fc80 	bl	acb4 <_ZN9ClearCore12EncoderInputC1Ev>
            reg = 0;
    83b4:	4b51      	ldr	r3, [pc, #324]	; (84fc <_GLOBAL__sub_I__ZN9ClearCore11FastSysTickE+0x160>)
#ifndef HIDE_FROM_DOXYGEN
    /**
        \brief Default constructor so this connector can be a global and
        constructed by SysManager
    **/
    SdCardDriver() {};
    83b6:	4a52      	ldr	r2, [pc, #328]	; (8500 <_GLOBAL__sub_I__ZN9ClearCore11FastSysTickE+0x164>)
ShiftRegister ShiftReg;
    83b8:	4852      	ldr	r0, [pc, #328]	; (8504 <_GLOBAL__sub_I__ZN9ClearCore11FastSysTickE+0x168>)
    83ba:	601a      	str	r2, [r3, #0]
    83bc:	2600      	movs	r6, #0
    83be:	f8c3 6140 	str.w	r6, [r3, #320]	; 0x140
    83c2:	f001 f9c3 	bl	974c <_ZN9ClearCore13ShiftRegisterC1Ev>
    83c6:	4b50      	ldr	r3, [pc, #320]	; (8508 <_GLOBAL__sub_I__ZN9ClearCore11FastSysTickE+0x16c>)
#ifndef HIDE_FROM_DOXYGEN
    /**
        Default constructor so this connector can be a global and constructed
        by SysManager.
    **/
    XBeeDriver() {};
    83c8:	4a50      	ldr	r2, [pc, #320]	; (850c <_GLOBAL__sub_I__ZN9ClearCore11FastSysTickE+0x170>)
    83ca:	f8c3 6140 	str.w	r6, [r3, #320]	; 0x140
    83ce:	4628      	mov	r0, r5
    83d0:	601a      	str	r2, [r3, #0]
    83d2:	f005 f965 	bl	d6a0 <_ZN9ClearCore9ConnectorC1Ev>
    83d6:	4b4e      	ldr	r3, [pc, #312]	; (8510 <_GLOBAL__sub_I__ZN9ClearCore11FastSysTickE+0x174>)
    83d8:	602b      	str	r3, [r5, #0]
    83da:	4620      	mov	r0, r4
    83dc:	f005 f960 	bl	d6a0 <_ZN9ClearCore9ConnectorC1Ev>
        \brief Default constructor so this connector can be a global and
        constructed by SysManager

        \note Should not be called by anything other than SysManager
    **/
    DigitalInOutAnalogOut() {};
    83e0:	4b4c      	ldr	r3, [pc, #304]	; (8514 <_GLOBAL__sub_I__ZN9ClearCore11FastSysTickE+0x178>)
    83e2:	6023      	str	r3, [r4, #0]
    83e4:	4648      	mov	r0, r9
    83e6:	f005 f95b 	bl	d6a0 <_ZN9ClearCore9ConnectorC1Ev>
        Default constructor so this connector can be a global and constructed
        by SysManager

        \note Should not be called by anything other than SysManager
    **/
    DigitalInOut() {};
    83ea:	4c4b      	ldr	r4, [pc, #300]	; (8518 <_GLOBAL__sub_I__ZN9ClearCore11FastSysTickE+0x17c>)
    83ec:	4d4b      	ldr	r5, [pc, #300]	; (851c <_GLOBAL__sub_I__ZN9ClearCore11FastSysTickE+0x180>)
    83ee:	f8c9 4000 	str.w	r4, [r9]
    83f2:	4640      	mov	r0, r8
    83f4:	f005 f954 	bl	d6a0 <_ZN9ClearCore9ConnectorC1Ev>
    83f8:	f8df 9170 	ldr.w	r9, [pc, #368]	; 856c <_GLOBAL__sub_I__ZN9ClearCore11FastSysTickE+0x1d0>
    83fc:	f8c8 4000 	str.w	r4, [r8]
    8400:	4638      	mov	r0, r7
    8402:	f005 f94d 	bl	d6a0 <_ZN9ClearCore9ConnectorC1Ev>
    8406:	f8df 8168 	ldr.w	r8, [pc, #360]	; 8570 <_GLOBAL__sub_I__ZN9ClearCore11FastSysTickE+0x1d4>
    840a:	603c      	str	r4, [r7, #0]
    840c:	4628      	mov	r0, r5
    840e:	f005 f947 	bl	d6a0 <_ZN9ClearCore9ConnectorC1Ev>
        \brief Default constructor so this connector can be a global and
        constructed by SysManager.

        \note Should not be called by anything other than SysManager
    **/
    DigitalInOutHBridge() {};
    8412:	4c43      	ldr	r4, [pc, #268]	; (8520 <_GLOBAL__sub_I__ZN9ClearCore11FastSysTickE+0x184>)
    8414:	4f43      	ldr	r7, [pc, #268]	; (8524 <_GLOBAL__sub_I__ZN9ClearCore11FastSysTickE+0x188>)
    8416:	602c      	str	r4, [r5, #0]
    8418:	4648      	mov	r0, r9
    841a:	f005 f941 	bl	d6a0 <_ZN9ClearCore9ConnectorC1Ev>
    841e:	4d42      	ldr	r5, [pc, #264]	; (8528 <_GLOBAL__sub_I__ZN9ClearCore11FastSysTickE+0x18c>)
    8420:	f8c9 4000 	str.w	r4, [r9]
    8424:	4640      	mov	r0, r8
    8426:	f005 f93b 	bl	d6a0 <_ZN9ClearCore9ConnectorC1Ev>
    842a:	4c40      	ldr	r4, [pc, #256]	; (852c <_GLOBAL__sub_I__ZN9ClearCore11FastSysTickE+0x190>)
    842c:	f8df 9144 	ldr.w	r9, [pc, #324]	; 8574 <_GLOBAL__sub_I__ZN9ClearCore11FastSysTickE+0x1d8>
    8430:	f8c8 4000 	str.w	r4, [r8]
    8434:	4638      	mov	r0, r7
    8436:	f005 f933 	bl	d6a0 <_ZN9ClearCore9ConnectorC1Ev>
    843a:	f8df 813c 	ldr.w	r8, [pc, #316]	; 8578 <_GLOBAL__sub_I__ZN9ClearCore11FastSysTickE+0x1dc>
    843e:	603c      	str	r4, [r7, #0]
    8440:	4628      	mov	r0, r5
    8442:	f005 f92d 	bl	d6a0 <_ZN9ClearCore9ConnectorC1Ev>
    8446:	4f3a      	ldr	r7, [pc, #232]	; (8530 <_GLOBAL__sub_I__ZN9ClearCore11FastSysTickE+0x194>)
    8448:	602c      	str	r4, [r5, #0]
    844a:	4648      	mov	r0, r9
    844c:	f005 f928 	bl	d6a0 <_ZN9ClearCore9ConnectorC1Ev>
        Default constructor so this connector can be a global and constructed
        by SysManager

        \note Should not be called by anything other than SysManager
    **/
    DigitalInAnalogIn() {};
    8450:	4c38      	ldr	r4, [pc, #224]	; (8534 <_GLOBAL__sub_I__ZN9ClearCore11FastSysTickE+0x198>)
    8452:	4d39      	ldr	r5, [pc, #228]	; (8538 <_GLOBAL__sub_I__ZN9ClearCore11FastSysTickE+0x19c>)
    8454:	f8c9 4000 	str.w	r4, [r9]
    8458:	4640      	mov	r0, r8
    845a:	f005 f921 	bl	d6a0 <_ZN9ClearCore9ConnectorC1Ev>
    845e:	4638      	mov	r0, r7
    8460:	f8c8 4000 	str.w	r4, [r8]
    8464:	f005 f91c 	bl	d6a0 <_ZN9ClearCore9ConnectorC1Ev>
    8468:	4628      	mov	r0, r5
    846a:	603c      	str	r4, [r7, #0]
    846c:	f005 f918 	bl	d6a0 <_ZN9ClearCore9ConnectorC1Ev>
MotorDriver ConnectorM0;
    8470:	4832      	ldr	r0, [pc, #200]	; (853c <_GLOBAL__sub_I__ZN9ClearCore11FastSysTickE+0x1a0>)
    8472:	602c      	str	r4, [r5, #0]
    8474:	f7fd ff1e 	bl	62b4 <_ZN9ClearCore11MotorDriverC1Ev>
MotorDriver ConnectorM1;
    8478:	4831      	ldr	r0, [pc, #196]	; (8540 <_GLOBAL__sub_I__ZN9ClearCore11FastSysTickE+0x1a4>)

    It provides a generic interface that all serial objects have. This includes
    - Port Opening/Closing
    - Communication configuration
**/
class ISerial {
    847a:	f8df 8100 	ldr.w	r8, [pc, #256]	; 857c <_GLOBAL__sub_I__ZN9ClearCore11FastSysTickE+0x1e0>

    /**
        Default constructor so this connector can be a global and constructed
        by SysManager
    **/
    SerialBase() {};
    847e:	4d31      	ldr	r5, [pc, #196]	; (8544 <_GLOBAL__sub_I__ZN9ClearCore11FastSysTickE+0x1a8>)
    8480:	4c31      	ldr	r4, [pc, #196]	; (8548 <_GLOBAL__sub_I__ZN9ClearCore11FastSysTickE+0x1ac>)
#ifndef HIDE_FROM_DOXYGEN
    /**
        \brief Default constructor so this connector can be a global and
        constructed by SysManager.
    **/
    SerialDriver() {};
    8482:	4f32      	ldr	r7, [pc, #200]	; (854c <_GLOBAL__sub_I__ZN9ClearCore11FastSysTickE+0x1b0>)
    8484:	f8df 90f8 	ldr.w	r9, [pc, #248]	; 8580 <_GLOBAL__sub_I__ZN9ClearCore11FastSysTickE+0x1e4>
    8488:	f7fd ff14 	bl	62b4 <_ZN9ClearCore11MotorDriverC1Ev>
MotorDriver ConnectorM2;
    848c:	4830      	ldr	r0, [pc, #192]	; (8550 <_GLOBAL__sub_I__ZN9ClearCore11FastSysTickE+0x1b4>)
    848e:	f7fd ff11 	bl	62b4 <_ZN9ClearCore11MotorDriverC1Ev>
MotorDriver ConnectorM3;
    8492:	4830      	ldr	r0, [pc, #192]	; (8554 <_GLOBAL__sub_I__ZN9ClearCore11FastSysTickE+0x1b8>)
    8494:	f7fd ff0e 	bl	62b4 <_ZN9ClearCore11MotorDriverC1Ev>
    8498:	4640      	mov	r0, r8
    849a:	4b2f      	ldr	r3, [pc, #188]	; (8558 <_GLOBAL__sub_I__ZN9ClearCore11FastSysTickE+0x1bc>)
    849c:	f840 3b04 	str.w	r3, [r0], #4
    SerialUsb() {};
    84a0:	f005 f8fe 	bl	d6a0 <_ZN9ClearCore9ConnectorC1Ev>
    84a4:	4b2d      	ldr	r3, [pc, #180]	; (855c <_GLOBAL__sub_I__ZN9ClearCore11FastSysTickE+0x1c0>)
    84a6:	f8c8 3000 	str.w	r3, [r8]
    84aa:	f505 70a2 	add.w	r0, r5, #324	; 0x144
    84ae:	3374      	adds	r3, #116	; 0x74
            reg = 0;
    84b0:	f8c5 6140 	str.w	r6, [r5, #320]	; 0x140
    SerialBase() {};
    84b4:	f8c5 9000 	str.w	r9, [r5]
    84b8:	f8c8 3004 	str.w	r3, [r8, #4]
    84bc:	f005 f8f0 	bl	d6a0 <_ZN9ClearCore9ConnectorC1Ev>
    84c0:	f107 0874 	add.w	r8, r7, #116	; 0x74
    84c4:	f504 70a2 	add.w	r0, r4, #324	; 0x144
            reg = 0;
    84c8:	f8c4 6140 	str.w	r6, [r4, #320]	; 0x140
    SerialBase() {};
    84cc:	f8c4 9000 	str.w	r9, [r4]
    84d0:	602f      	str	r7, [r5, #0]
    84d2:	f8c5 8144 	str.w	r8, [r5, #324]	; 0x144
    84d6:	f005 f8e3 	bl	d6a0 <_ZN9ClearCore9ConnectorC1Ev>
    84da:	f8c4 8144 	str.w	r8, [r4, #324]	; 0x144
    84de:	6027      	str	r7, [r4, #0]
SysManager SysMgr;
    84e0:	481f      	ldr	r0, [pc, #124]	; (8560 <_GLOBAL__sub_I__ZN9ClearCore11FastSysTickE+0x1c4>)
}
    84e2:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
SysManager SysMgr;
    84e6:	f7fd bf07 	b.w	62f8 <_ZN9ClearCore10SysManagerC1Ev>
    84ea:	bf00      	nop
    84ec:	20001b98 	.word	0x20001b98
    84f0:	20001524 	.word	0x20001524
    84f4:	20001290 	.word	0x20001290
    84f8:	200013bc 	.word	0x200013bc
    84fc:	20001934 	.word	0x20001934
    8500:	0002ccb0 	.word	0x0002ccb0
    8504:	20001a80 	.word	0x20001a80
    8508:	200017f0 	.word	0x200017f0
    850c:	0002cd00 	.word	0x0002cd00
    8510:	0002d53c 	.word	0x0002d53c
    8514:	0002d218 	.word	0x0002d218
    8518:	0002d278 	.word	0x0002d278
    851c:	2000141c 	.word	0x2000141c
    8520:	0002d328 	.word	0x0002d328
    8524:	20001230 	.word	0x20001230
    8528:	20001260 	.word	0x20001260
    852c:	0002d2f8 	.word	0x0002d2f8
    8530:	20001178 	.word	0x20001178
    8534:	0002d248 	.word	0x0002d248
    8538:	200011bc 	.word	0x200011bc
    853c:	20000c10 	.word	0x20000c10
    8540:	20000d58 	.word	0x20000d58
    8544:	20001540 	.word	0x20001540
    8548:	20001698 	.word	0x20001698
    854c:	0002d498 	.word	0x0002d498
    8550:	20000ea0 	.word	0x20000ea0
    8554:	20000fe8 	.word	0x20000fe8
    8558:	0002cbac 	.word	0x0002cbac
    855c:	0002cbfc 	.word	0x0002cbfc
    8560:	20001a7c 	.word	0x20001a7c
    8564:	200012fc 	.word	0x200012fc
    8568:	2000135c 	.word	0x2000135c
    856c:	200014a0 	.word	0x200014a0
    8570:	20001200 	.word	0x20001200
    8574:	20000bcc 	.word	0x20000bcc
    8578:	20001134 	.word	0x20001134
    857c:	20001530 	.word	0x20001530
    8580:	0002d428 	.word	0x0002d428

00008584 <_ZN9ClearCore9SysTiming8InstanceEv>:
    m_microAdjLow(0),
    m_microAdjHighRemainder(0),
    m_microAdjLowRemainder(0) {}


SysTiming &SysTiming::Instance() {
    8584:	b570      	push	{r4, r5, r6, lr}
    static SysTiming *instance = new SysTiming();
    8586:	4d0f      	ldr	r5, [pc, #60]	; (85c4 <_ZN9ClearCore9SysTiming8InstanceEv+0x40>)
    8588:	682c      	ldr	r4, [r5, #0]
    858a:	f014 0401 	ands.w	r4, r4, #1
    858e:	d002      	beq.n	8596 <_ZN9ClearCore9SysTiming8InstanceEv+0x12>
    8590:	4b0d      	ldr	r3, [pc, #52]	; (85c8 <_ZN9ClearCore9SysTiming8InstanceEv+0x44>)
    8592:	6818      	ldr	r0, [r3, #0]
    8594:	bd70      	pop	{r4, r5, r6, pc}
    8596:	2030      	movs	r0, #48	; 0x30
    8598:	f014 fbd2 	bl	1cd40 <_Znwj>
    859c:	4a0a      	ldr	r2, [pc, #40]	; (85c8 <_ZN9ClearCore9SysTiming8InstanceEv+0x44>)
    m_microAdjLowRemainder(0) {}
    859e:	6004      	str	r4, [r0, #0]
    85a0:	2105      	movs	r1, #5
    85a2:	f04f 36ff 	mov.w	r6, #4294967295
    static SysTiming *instance = new SysTiming();
    85a6:	2301      	movs	r3, #1
    m_microAdjLowRemainder(0) {}
    85a8:	7501      	strb	r1, [r0, #20]
    85aa:	6084      	str	r4, [r0, #8]
    85ac:	60c4      	str	r4, [r0, #12]
    85ae:	6104      	str	r4, [r0, #16]
    85b0:	6184      	str	r4, [r0, #24]
    85b2:	61c4      	str	r4, [r0, #28]
    85b4:	6204      	str	r4, [r0, #32]
    85b6:	6244      	str	r4, [r0, #36]	; 0x24
    85b8:	6284      	str	r4, [r0, #40]	; 0x28
    85ba:	62c4      	str	r4, [r0, #44]	; 0x2c
    85bc:	6046      	str	r6, [r0, #4]
    static SysTiming *instance = new SysTiming();
    85be:	6010      	str	r0, [r2, #0]
    85c0:	602b      	str	r3, [r5, #0]
    return *instance;
}
    85c2:	bd70      	pop	{r4, r5, r6, pc}
    85c4:	20001c8c 	.word	0x20001c8c
    85c8:	20001c98 	.word	0x20001c98

000085cc <_ZN9ClearCore9SysTiming8IsrStartEv>:

void SysTiming::IsrStart() {
    m_isrStartCycle = DWT->CYCCNT;
    85cc:	4b01      	ldr	r3, [pc, #4]	; (85d4 <_ZN9ClearCore9SysTiming8IsrStartEv+0x8>)
    85ce:	685b      	ldr	r3, [r3, #4]
    85d0:	6003      	str	r3, [r0, #0]
    85d2:	4770      	bx	lr
    85d4:	e0001000 	.word	0xe0001000

000085d8 <_ZN9ClearCore9SysTiming6IsrEndEv>:
}

void SysTiming::IsrEnd() {
    m_isrLastCycles = DWT->CYCCNT - m_isrStartCycle;
    85d8:	4b06      	ldr	r3, [pc, #24]	; (85f4 <_ZN9ClearCore9SysTiming6IsrEndEv+0x1c>)
    85da:	6801      	ldr	r1, [r0, #0]
    85dc:	685b      	ldr	r3, [r3, #4]
    if (m_isrMinCycles > m_isrLastCycles) {
    85de:	6842      	ldr	r2, [r0, #4]
    m_isrLastCycles = DWT->CYCCNT - m_isrStartCycle;
    85e0:	1a5b      	subs	r3, r3, r1
    if (m_isrMinCycles > m_isrLastCycles) {
    85e2:	4293      	cmp	r3, r2
        m_isrMinCycles = m_isrLastCycles;
    }
    if (m_isrMaxCycles < m_isrLastCycles) {
    85e4:	6882      	ldr	r2, [r0, #8]
        m_isrMinCycles = m_isrLastCycles;
    85e6:	bf38      	it	cc
    85e8:	6043      	strcc	r3, [r0, #4]
    if (m_isrMaxCycles < m_isrLastCycles) {
    85ea:	4293      	cmp	r3, r2
    m_isrLastCycles = DWT->CYCCNT - m_isrStartCycle;
    85ec:	60c3      	str	r3, [r0, #12]
        m_isrMaxCycles = m_isrLastCycles;
    85ee:	bf88      	it	hi
    85f0:	6083      	strhi	r3, [r0, #8]
    85f2:	4770      	bx	lr
    85f4:	e0001000 	.word	0xe0001000

000085f8 <_ZN9ClearCore9SysTiming6UpdateEv>:
}

void SysTiming::Update() {
    // Detaching a debugger can clear CoreDebug_DEMCR_TRCENA_Msk
    // so make sure it stays set to keep the cycle counter enabled
    CoreDebug->DEMCR |= CoreDebug_DEMCR_TRCENA_Msk;
    85f8:	4a1c      	ldr	r2, [pc, #112]	; (866c <_ZN9ClearCore9SysTiming6UpdateEv+0x74>)
void SysTiming::Update() {
    85fa:	b538      	push	{r3, r4, r5, lr}
    CoreDebug->DEMCR |= CoreDebug_DEMCR_TRCENA_Msk;
    85fc:	68d3      	ldr	r3, [r2, #12]
    85fe:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
    8602:	60d3      	str	r3, [r2, #12]

    // Update the millisecond tick counter
    if (!--m_fractMsTick) {
    8604:	7d03      	ldrb	r3, [r0, #20]
    8606:	3b01      	subs	r3, #1
    8608:	b2db      	uxtb	r3, r3
void SysTiming::Update() {
    860a:	4604      	mov	r4, r0
    if (!--m_fractMsTick) {
    860c:	7503      	strb	r3, [r0, #20]
    860e:	b923      	cbnz	r3, 861a <_ZN9ClearCore9SysTiming6UpdateEv+0x22>
        m_msTickCnt++;
    8610:	6903      	ldr	r3, [r0, #16]
        m_fractMsTick = MS_TO_SAMPLES;
    8612:	2205      	movs	r2, #5
        m_msTickCnt++;
    8614:	3301      	adds	r3, #1
    8616:	6103      	str	r3, [r0, #16]
        m_fractMsTick = MS_TO_SAMPLES;
    8618:	7502      	strb	r2, [r0, #20]
    // the wrap point to effectively extend the number of bits in the
    // cycleCounter and control the wrap point properly.
    // Precalculate adjustment values at UINT32_MAX/4 and UINT32_MAX*3/4
    // by timing when the adjustments are calculated and used, we can safely
    // modify the values when they are not in use (~9 sec margin).
    if (((m_isrStartCycle ^ m_lastIsrStartCnt) & 0xc0000000) == 0x40000000) {
    861a:	6825      	ldr	r5, [r4, #0]
    861c:	69a3      	ldr	r3, [r4, #24]
    861e:	406b      	eors	r3, r5
    8620:	f003 4340 	and.w	r3, r3, #3221225472	; 0xc0000000
    8624:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
    8628:	d001      	beq.n	862e <_ZN9ClearCore9SysTiming6UpdateEv+0x36>
            m_microAdjHigh = m_microAdjLow + 1;
            m_microAdjHighRemainder =
                CYCLES_PER_MICROSECOND - m_microAdjLowRemainder;
        }
    }
    m_lastIsrStartCnt = m_isrStartCycle;
    862a:	61a5      	str	r5, [r4, #24]
    862c:	bd38      	pop	{r3, r4, r5, pc}
        if (m_isrStartCycle & 0x80000000) {
    862e:	2d00      	cmp	r5, #0
    8630:	db08      	blt.n	8644 <_ZN9ClearCore9SysTiming6UpdateEv+0x4c>
            m_microAdjHigh = m_microAdjLow + 1;
    8632:	6a62      	ldr	r2, [r4, #36]	; 0x24
                CYCLES_PER_MICROSECOND - m_microAdjLowRemainder;
    8634:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
    m_lastIsrStartCnt = m_isrStartCycle;
    8636:	61a5      	str	r5, [r4, #24]
            m_microAdjHigh = m_microAdjLow + 1;
    8638:	3201      	adds	r2, #1
                CYCLES_PER_MICROSECOND - m_microAdjLowRemainder;
    863a:	f1c3 0378 	rsb	r3, r3, #120	; 0x78
            m_microAdjHigh = m_microAdjLow + 1;
    863e:	6222      	str	r2, [r4, #32]
            m_microAdjHighRemainder =
    8640:	62a3      	str	r3, [r4, #40]	; 0x28
    m_lastIsrStartCnt = m_isrStartCycle;
    8642:	bd38      	pop	{r3, r4, r5, pc}
            uint64_t cycCnt64 = (uint64_t)(++m_microAdj) << 32;
    8644:	69e1      	ldr	r1, [r4, #28]
    8646:	3101      	adds	r1, #1
    8648:	61e1      	str	r1, [r4, #28]
            m_microAdjLow = cycCnt64 / CYCLES_PER_MICROSECOND;
    864a:	2278      	movs	r2, #120	; 0x78
    864c:	2300      	movs	r3, #0
    864e:	2000      	movs	r0, #0
    8650:	f01d fbd4 	bl	25dfc <__aeabi_uldivmod>
    8654:	6260      	str	r0, [r4, #36]	; 0x24
            if (m_microAdjLow) {
    8656:	b128      	cbz	r0, 8664 <_ZN9ClearCore9SysTiming6UpdateEv+0x6c>
                    cycCnt64 - (m_microAdjLow * CYCLES_PER_MICROSECOND);
    8658:	ebc0 1000 	rsb	r0, r0, r0, lsl #4
    865c:	00c3      	lsls	r3, r0, #3
    865e:	425b      	negs	r3, r3
                m_microAdjLowRemainder =
    8660:	62e3      	str	r3, [r4, #44]	; 0x2c
    8662:	e7e2      	b.n	862a <_ZN9ClearCore9SysTiming6UpdateEv+0x32>
                m_microAdj = 0;
    8664:	61e0      	str	r0, [r4, #28]
                m_microAdjLowRemainder = 0;
    8666:	62e0      	str	r0, [r4, #44]	; 0x2c
    8668:	e7df      	b.n	862a <_ZN9ClearCore9SysTiming6UpdateEv+0x32>
    866a:	bf00      	nop
    866c:	e000edf0 	.word	0xe000edf0

00008670 <_ZN9ClearCore9SysTiming21SysTickPeriodMicroSecEm>:

bool SysTiming::SysTickPeriodMicroSec(uint32_t microSeconds) {
    // If the SysTick is faster than the sample rate set a
    // flag to do the "slow update" within the sample interrupt
    FastSysTick = microSeconds < SAMPLE_PERIOD_MICROSECONDS;
    return SysTick_Config(microSeconds * CYCLES_PER_MICROSECOND);
    8670:	ebc1 1301 	rsb	r3, r1, r1, lsl #4
    8674:	00db      	lsls	r3, r3, #3
    FastSysTick = microSeconds < SAMPLE_PERIOD_MICROSECONDS;
    8676:	29c7      	cmp	r1, #199	; 0xc7
    8678:	4a0d      	ldr	r2, [pc, #52]	; (86b0 <_ZN9ClearCore9SysTiming21SysTickPeriodMicroSecEm+0x40>)
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
    867a:	f103 33ff 	add.w	r3, r3, #4294967295
    867e:	bf8c      	ite	hi
    8680:	2100      	movhi	r1, #0
    8682:	2101      	movls	r1, #1
    8684:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
    8688:	7011      	strb	r1, [r2, #0]
    868a:	d20e      	bcs.n	86aa <_ZN9ClearCore9SysTiming21SysTickPeriodMicroSecEm+0x3a>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
    868c:	4a09      	ldr	r2, [pc, #36]	; (86b4 <_ZN9ClearCore9SysTiming21SysTickPeriodMicroSecEm+0x44>)
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    868e:	480a      	ldr	r0, [pc, #40]	; (86b8 <_ZN9ClearCore9SysTiming21SysTickPeriodMicroSecEm+0x48>)
bool SysTiming::SysTickPeriodMicroSec(uint32_t microSeconds) {
    8690:	b410      	push	{r4}
    8692:	24e0      	movs	r4, #224	; 0xe0
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
    8694:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
    8696:	2107      	movs	r1, #7
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    8698:	f880 4023 	strb.w	r4, [r0, #35]	; 0x23
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
    869c:	2300      	movs	r3, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
    869e:	4618      	mov	r0, r3
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
    86a0:	6093      	str	r3, [r2, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
    86a2:	6011      	str	r1, [r2, #0]
}
    86a4:	f85d 4b04 	ldr.w	r4, [sp], #4
    86a8:	4770      	bx	lr
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
    86aa:	2001      	movs	r0, #1
    86ac:	4770      	bx	lr
    86ae:	bf00      	nop
    86b0:	20001130 	.word	0x20001130
    86b4:	e000e010 	.word	0xe000e010
    86b8:	e000ed00 	.word	0xe000ed00

000086bc <Milliseconds>:
#ifdef __cplusplus
extern "C" {
#endif

uint32_t Milliseconds(void) {
    return ClearCore::TimingMgr.Milliseconds();
    86bc:	4b01      	ldr	r3, [pc, #4]	; (86c4 <Milliseconds+0x8>)
    86be:	681b      	ldr	r3, [r3, #0]
    86c0:	6918      	ldr	r0, [r3, #16]
}
    86c2:	4770      	bx	lr
    86c4:	20001c94 	.word	0x20001c94

000086c8 <Microseconds>:
    uint32_t cycleCounter = DWT->CYCCNT;
    86c8:	4b0e      	ldr	r3, [pc, #56]	; (8704 <Microseconds+0x3c>)


uint32_t Microseconds(void) {
    return ClearCore::TimingMgr.Microseconds();
    86ca:	4a0f      	ldr	r2, [pc, #60]	; (8708 <Microseconds+0x40>)
    uint32_t cycleCounter = DWT->CYCCNT;
    86cc:	685b      	ldr	r3, [r3, #4]
    return ClearCore::TimingMgr.Microseconds();
    86ce:	6812      	ldr	r2, [r2, #0]
    if (cycleCounter > UINT32_MAX / 2) {
    86d0:	2b00      	cmp	r3, #0
uint32_t Microseconds(void) {
    86d2:	b410      	push	{r4}
    if (cycleCounter > UINT32_MAX / 2) {
    86d4:	db0a      	blt.n	86ec <Microseconds+0x24>
        return ((cycleCounter + m_microAdjLowRemainder) /
    86d6:	6ad4      	ldr	r4, [r2, #44]	; 0x2c
    86d8:	490c      	ldr	r1, [pc, #48]	; (870c <Microseconds+0x44>)
                CYCLES_PER_MICROSECOND) + m_microAdjLow;
    86da:	6a50      	ldr	r0, [r2, #36]	; 0x24
        return ((cycleCounter + m_microAdjLowRemainder) /
    86dc:	4423      	add	r3, r4
    86de:	fba1 2303 	umull	r2, r3, r1, r3
                CYCLES_PER_MICROSECOND) + m_microAdjLow;
    86e2:	eb00 1093 	add.w	r0, r0, r3, lsr #6
}
    86e6:	f85d 4b04 	ldr.w	r4, [sp], #4
    86ea:	4770      	bx	lr
        return ((cycleCounter - m_microAdjHighRemainder) /
    86ec:	6a94      	ldr	r4, [r2, #40]	; 0x28
    86ee:	4907      	ldr	r1, [pc, #28]	; (870c <Microseconds+0x44>)
                CYCLES_PER_MICROSECOND) + m_microAdjHigh;
    86f0:	6a10      	ldr	r0, [r2, #32]
        return ((cycleCounter - m_microAdjHighRemainder) /
    86f2:	1b1b      	subs	r3, r3, r4
    86f4:	fba1 2303 	umull	r2, r3, r1, r3
                CYCLES_PER_MICROSECOND) + m_microAdjHigh;
    86f8:	eb00 1093 	add.w	r0, r0, r3, lsr #6
}
    86fc:	f85d 4b04 	ldr.w	r4, [sp], #4
    8700:	4770      	bx	lr
    8702:	bf00      	nop
    8704:	e0001000 	.word	0xe0001000
    8708:	20001c94 	.word	0x20001c94
    870c:	88888889 	.word	0x88888889

00008710 <Delay_cycles>:

void Delay_cycles(uint64_t cycles) {
    8710:	b470      	push	{r4, r5, r6}
    // Get a snapshot of the cycle counter as we enter the delay function
    uint32_t cyclesLast = DWT->CYCCNT;
    8712:	4e0d      	ldr	r6, [pc, #52]	; (8748 <Delay_cycles+0x38>)

    // If we do not need to delay, bail out
    if (cycles == 0) {
    8714:	ea50 0301 	orrs.w	r3, r0, r1
    uint32_t cyclesLast = DWT->CYCCNT;
    8718:	6874      	ldr	r4, [r6, #4]
    if (cycles == 0) {
    871a:	d013      	beq.n	8744 <Delay_cycles+0x34>
        return;
    }

    uint64_t cyclesRemaining = cycles;
    uint32_t cyclesNow = DWT->CYCCNT;
    871c:	6873      	ldr	r3, [r6, #4]

    while (cyclesRemaining > cyclesNow - cyclesLast) {
    871e:	2500      	movs	r5, #0
    8720:	1b1c      	subs	r4, r3, r4
    8722:	428d      	cmp	r5, r1
    8724:	bf08      	it	eq
    8726:	4284      	cmpeq	r4, r0
    8728:	d20c      	bcs.n	8744 <Delay_cycles+0x34>
        cyclesRemaining -= (cyclesNow - cyclesLast);
        cyclesLast = cyclesNow;
        cyclesNow = DWT->CYCCNT;
    872a:	6872      	ldr	r2, [r6, #4]
        cyclesRemaining -= (cyclesNow - cyclesLast);
    872c:	1b00      	subs	r0, r0, r4
    while (cyclesRemaining > cyclesNow - cyclesLast) {
    872e:	eba2 0303 	sub.w	r3, r2, r3
        cyclesRemaining -= (cyclesNow - cyclesLast);
    8732:	eb61 0105 	sbc.w	r1, r1, r5
    while (cyclesRemaining > cyclesNow - cyclesLast) {
    8736:	2500      	movs	r5, #0
    8738:	461c      	mov	r4, r3
    873a:	428d      	cmp	r5, r1
    873c:	bf08      	it	eq
    873e:	4284      	cmpeq	r4, r0
        cyclesNow = DWT->CYCCNT;
    8740:	4613      	mov	r3, r2
    while (cyclesRemaining > cyclesNow - cyclesLast) {
    8742:	d3f2      	bcc.n	872a <Delay_cycles+0x1a>
    }
}
    8744:	bc70      	pop	{r4, r5, r6}
    8746:	4770      	bx	lr
    8748:	e0001000 	.word	0xe0001000

0000874c <_GLOBAL__sub_I__ZN9ClearCore7tickCntE>:

#ifdef __cplusplus
}
    874c:	b508      	push	{r3, lr}
SysTiming &TimingMgr = SysTiming::Instance();
    874e:	f7ff ff19 	bl	8584 <_ZN9ClearCore9SysTiming8InstanceEv>
    8752:	4b01      	ldr	r3, [pc, #4]	; (8758 <_GLOBAL__sub_I__ZN9ClearCore7tickCntE+0xc>)
    8754:	6018      	str	r0, [r3, #0]
    8756:	bd08      	pop	{r3, pc}
    8758:	20001c94 	.word	0x20001c94

0000875c <_Z15ethernetif_initP5netif>:
    @param netif the lwip network interface structure for this ethernetif
    @return ERR_OK if the loopif is initialized
        ERR_MEM if private data couldn't be allocated
        any other err_t on error
 */
err_t ethernetif_init(netInt *netif) {
    875c:	b430      	push	{r4, r5}
    netif->output = etharp_output;
    875e:	4a12      	ldr	r2, [pc, #72]	; (87a8 <_Z15ethernetif_initP5netif+0x4c>)
    8760:	6142      	str	r2, [r0, #20]
    netif->mtu = 1536;

    // MAC address
    ethInt* ethernetif;

    ethernetif = (ethInt *) netif->state;
    8762:	6a03      	ldr	r3, [r0, #32]
    netif->linkoutput = low_level_output;
    8764:	4d11      	ldr	r5, [pc, #68]	; (87ac <_Z15ethernetif_initP5netif+0x50>)
    8766:	6185      	str	r5, [r0, #24]
    netif->flags = NETIF_FLAG_BROADCAST | NETIF_FLAG_ETHARP |
    8768:	241a      	movs	r4, #26
    netif->mtu = 1536;
    876a:	f44f 61c0 	mov.w	r1, #1536	; 0x600
    netif->hwaddr_len = NETIF_MAX_HWADDR_LEN;
    876e:	2206      	movs	r2, #6
    netif->flags = NETIF_FLAG_BROADCAST | NETIF_FLAG_ETHARP |
    8770:	f880 4035 	strb.w	r4, [r0, #53]	; 0x35
    netif->mtu = 1536;
    8774:	8581      	strh	r1, [r0, #44]	; 0x2c
    netif->hwaddr_len = NETIF_MAX_HWADDR_LEN;
    8776:	f880 2034 	strb.w	r2, [r0, #52]	; 0x34
    memcpy(netif->hwaddr, ethernetif->mac, NETIF_MAX_HWADDR_LEN);
    877a:	f853 2f10 	ldr.w	r2, [r3, #16]!
    877e:	f8c0 202e 	str.w	r2, [r0, #46]	; 0x2e
    8782:	889b      	ldrh	r3, [r3, #4]
    memcpy((void *)&GMAC->Sa[0].SAB.reg, netif->hwaddr, 4);
    8784:	4a0a      	ldr	r2, [pc, #40]	; (87b0 <_Z15ethernetif_initP5netif+0x54>)
    memcpy(netif->hwaddr, ethernetif->mac, NETIF_MAX_HWADDR_LEN);
    8786:	8643      	strh	r3, [r0, #50]	; 0x32
    memcpy((void *)&GMAC->Sa[0].SAB.reg, netif->hwaddr, 4);
    8788:	f8d0 102e 	ldr.w	r1, [r0, #46]	; 0x2e

    // interface hostname (?)

    // descriptive name (only allows len 2)
    netif->name[0] = 'T';
    878c:	2454      	movs	r4, #84	; 0x54
    netif->name[1] = 'C';
    878e:	2343      	movs	r3, #67	; 0x43
    8790:	f880 3037 	strb.w	r3, [r0, #55]	; 0x37
    netif->name[0] = 'T';
    8794:	f880 4036 	strb.w	r4, [r0, #54]	; 0x36
    memcpy((void *)&GMAC->Sa[0].SAT.reg, netif->hwaddr + 4, 2);
    8798:	4b06      	ldr	r3, [pc, #24]	; (87b4 <_Z15ethernetif_initP5netif+0x58>)
    memcpy((void *)&GMAC->Sa[0].SAB.reg, netif->hwaddr, 4);
    879a:	6011      	str	r1, [r2, #0]
    memcpy((void *)&GMAC->Sa[0].SAT.reg, netif->hwaddr + 4, 2);
    879c:	8e42      	ldrh	r2, [r0, #50]	; 0x32
    879e:	801a      	strh	r2, [r3, #0]

    low_level_init(netif);

    return ERR_OK;

    87a0:	2000      	movs	r0, #0
    87a2:	bc30      	pop	{r4, r5}
    87a4:	4770      	bx	lr
    87a6:	bf00      	nop
    87a8:	00016729 	.word	0x00016729
    87ac:	000088d1 	.word	0x000088d1
    87b0:	42000888 	.word	0x42000888
    87b4:	4200088c 	.word	0x4200088c

000087b8 <_ZL11PacketWriteP6ethIntPhm.isra.0>:
static err_t PacketWrite(ethInt *ethernetif, uint8_t *buffer, uint32_t length) {
    87b8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    87bc:	4680      	mov	r8, r0
    uint16_t startIndex = *ethernetif->txBuffIndex;
    87be:	6808      	ldr	r0, [r1, #0]
    87c0:	8807      	ldrh	r7, [r0, #0]
static err_t PacketWrite(ethInt *ethernetif, uint8_t *buffer, uint32_t length) {
    87c2:	4689      	mov	r9, r1
    uint8_t index = *ethernetif->txBuffIndex;
    87c4:	f04f 0e00 	mov.w	lr, #0
    87c8:	f8d8 1000 	ldr.w	r1, [r8]
static err_t PacketWrite(ethInt *ethernetif, uint8_t *buffer, uint32_t length) {
    87cc:	469a      	mov	sl, r3
    uint8_t index = *ethernetif->txBuffIndex;
    87ce:	fa5f fc87 	uxtb.w	ip, r7
    87d2:	4673      	mov	r3, lr
        uint8_t tempIndex = (index + i) % TX_BUFF_CNT;
    87d4:	eb0c 0403 	add.w	r4, ip, r3
    87d8:	f004 0407 	and.w	r4, r4, #7
    87dc:	b220      	sxth	r0, r4
    87de:	eb01 05c0 	add.w	r5, r1, r0, lsl #3
    87e2:	f995 5007 	ldrsb.w	r5, [r5, #7]
    87e6:	2d00      	cmp	r5, #0
    87e8:	db01      	blt.n	87ee <_ZL11PacketWriteP6ethIntPhm.isra.0+0x36>
    87ea:	e7fe      	b.n	87ea <_ZL11PacketWriteP6ethIntPhm.isra.0+0x32>
    87ec:	b220      	sxth	r0, r4
            buffLb = ethernetif->txDesc[tempIndex].bit.LB;
    87ee:	eb01 00c0 	add.w	r0, r1, r0, lsl #3
            tempIndex = (tempIndex + 1) % TX_BUFF_CNT;
    87f2:	3401      	adds	r4, #1
            buffLb = ethernetif->txDesc[tempIndex].bit.LB;
    87f4:	7946      	ldrb	r6, [r0, #5]
            ethernetif->txDesc[tempIndex].bit.OWN = 1;
    87f6:	79c5      	ldrb	r5, [r0, #7]
            ethernetif->txDesc[tempIndex].bit.LB = 1;
    87f8:	f046 0b80 	orr.w	fp, r6, #128	; 0x80
            ethernetif->txDesc[tempIndex].bit.OWN = 1;
    87fc:	f045 0580 	orr.w	r5, r5, #128	; 0x80
            ethernetif->txDesc[tempIndex].bit.LB = 1;
    8800:	f880 b005 	strb.w	fp, [r0, #5]
            ethernetif->txDesc[tempIndex].bit.OWN = 1;
    8804:	71c5      	strb	r5, [r0, #7]
        } while (buffLb == 0);
    8806:	09f0      	lsrs	r0, r6, #7
            tempIndex = (tempIndex + 1) % TX_BUFF_CNT;
    8808:	f004 0407 	and.w	r4, r4, #7
        } while (buffLb == 0);
    880c:	d0ee      	beq.n	87ec <_ZL11PacketWriteP6ethIntPhm.isra.0+0x34>
        if (length < TX_BUFFER_SIZE * i) {
    880e:	45f2      	cmp	sl, lr
    8810:	d304      	bcc.n	881c <_ZL11PacketWriteP6ethIntPhm.isra.0+0x64>
    8812:	3301      	adds	r3, #1
    for (uint16_t i = 0; i < TX_BUFF_CNT; i++) {
    8814:	2b08      	cmp	r3, #8
    8816:	f50e 7e02 	add.w	lr, lr, #520	; 0x208
    881a:	d1db      	bne.n	87d4 <_ZL11PacketWriteP6ethIntPhm.isra.0+0x1c>
    881c:	4616      	mov	r6, r2
    881e:	f502 5582 	add.w	r5, r2, #4160	; 0x1040
    uint8_t index = *ethernetif->txBuffIndex;
    8822:	4638      	mov	r0, r7
        uint32_t bufferLength = min(length, TX_BUFFER_SIZE);
    8824:	f5ba 7f02 	cmp.w	sl, #520	; 0x208
    8828:	4654      	mov	r4, sl
    882a:	bf28      	it	cs
    882c:	f44f 7402 	movcs.w	r4, #520	; 0x208
               buffer + (i * TX_BUFFER_SIZE), bufferLength);
    8830:	f851 0030 	ldr.w	r0, [r1, r0, lsl #3]
    8834:	4622      	mov	r2, r4
    8836:	4631      	mov	r1, r6
    8838:	f01f fa12 	bl	27c60 <memcpy>
        ethernetif->txDesc[*ethernetif->txBuffIndex].reg[1] &= (0xC0000000);
    883c:	f8d9 c000 	ldr.w	ip, [r9]
    8840:	f8d8 1000 	ldr.w	r1, [r8]
    8844:	f8bc 3000 	ldrh.w	r3, [ip]
    8848:	eb01 0ec3 	add.w	lr, r1, r3, lsl #3
        ethernetif->txDesc[*ethernetif->txBuffIndex].bit.LEN = bufferLength;
    884c:	f04f 0b00 	mov.w	fp, #0
        ethernetif->txDesc[*ethernetif->txBuffIndex].reg[1] &= (0xC0000000);
    8850:	f8de 2004 	ldr.w	r2, [lr, #4]
        *ethernetif->txBuffIndex = (*ethernetif->txBuffIndex + 1) % TX_BUFF_CNT;
    8854:	1c58      	adds	r0, r3, #1
        ethernetif->txDesc[*ethernetif->txBuffIndex].reg[1] &= (0xC0000000);
    8856:	f002 4240 	and.w	r2, r2, #3221225472	; 0xc0000000
        ethernetif->txDesc[*ethernetif->txBuffIndex].bit.LEN = bufferLength;
    885a:	f364 0b0d 	bfi	fp, r4, #0, #14
        if (length <= 0) {
    885e:	ebba 0a04 	subs.w	sl, sl, r4
        ethernetif->txDesc[*ethernetif->txBuffIndex].reg[1] &= (0xC0000000);
    8862:	f8ce 2004 	str.w	r2, [lr, #4]
        *ethernetif->txBuffIndex = (*ethernetif->txBuffIndex + 1) % TX_BUFF_CNT;
    8866:	f000 0007 	and.w	r0, r0, #7
    886a:	f506 7602 	add.w	r6, r6, #520	; 0x208
        ethernetif->txDesc[*ethernetif->txBuffIndex].bit.LEN = bufferLength;
    886e:	f8ae b004 	strh.w	fp, [lr, #4]
        if (length <= 0) {
    8872:	d125      	bne.n	88c0 <_ZL11PacketWriteP6ethIntPhm.isra.0+0x108>
            ethernetif->txDesc[*ethernetif->txBuffIndex].bit.LB = 1;
    8874:	f89e 0005 	ldrb.w	r0, [lr, #5]
        *ethernetif->txBuffIndex = (*ethernetif->txBuffIndex + 1) % TX_BUFF_CNT;
    8878:	1c5a      	adds	r2, r3, #1
            ethernetif->txDesc[*ethernetif->txBuffIndex].bit.LB = 1;
    887a:	f040 0080 	orr.w	r0, r0, #128	; 0x80
        *ethernetif->txBuffIndex = (*ethernetif->txBuffIndex + 1) % TX_BUFF_CNT;
    887e:	f002 0207 	and.w	r2, r2, #7
    for (uint32_t i = endIndex; i != startIndex; i = (i + TX_BUFF_CNT - 1) % TX_BUFF_CNT) {
    8882:	42bb      	cmp	r3, r7
            ethernetif->txDesc[*ethernetif->txBuffIndex].bit.LB = 1;
    8884:	f88e 0005 	strb.w	r0, [lr, #5]
        *ethernetif->txBuffIndex = (*ethernetif->txBuffIndex + 1) % TX_BUFF_CNT;
    8888:	f8ac 2000 	strh.w	r2, [ip]
    for (uint32_t i = endIndex; i != startIndex; i = (i + TX_BUFF_CNT - 1) % TX_BUFF_CNT) {
    888c:	d00a      	beq.n	88a4 <_ZL11PacketWriteP6ethIntPhm.isra.0+0xec>
        ethernetif->txDesc[i].bit.OWN = 0;
    888e:	eb01 02c3 	add.w	r2, r1, r3, lsl #3
    for (uint32_t i = endIndex; i != startIndex; i = (i + TX_BUFF_CNT - 1) % TX_BUFF_CNT) {
    8892:	3307      	adds	r3, #7
        ethernetif->txDesc[i].bit.OWN = 0;
    8894:	79d0      	ldrb	r0, [r2, #7]
    for (uint32_t i = endIndex; i != startIndex; i = (i + TX_BUFF_CNT - 1) % TX_BUFF_CNT) {
    8896:	f003 0307 	and.w	r3, r3, #7
        ethernetif->txDesc[i].bit.OWN = 0;
    889a:	f36f 10c7 	bfc	r0, #7, #1
    for (uint32_t i = endIndex; i != startIndex; i = (i + TX_BUFF_CNT - 1) % TX_BUFF_CNT) {
    889e:	42bb      	cmp	r3, r7
        ethernetif->txDesc[i].bit.OWN = 0;
    88a0:	71d0      	strb	r0, [r2, #7]
    for (uint32_t i = endIndex; i != startIndex; i = (i + TX_BUFF_CNT - 1) % TX_BUFF_CNT) {
    88a2:	d1f4      	bne.n	888e <_ZL11PacketWriteP6ethIntPhm.isra.0+0xd6>
    ethernetif->txDesc[startIndex].bit.OWN = 0;
    88a4:	eb01 01c7 	add.w	r1, r1, r7, lsl #3
    GMAC->NCR.bit.TSTART = 1;
    88a8:	4a08      	ldr	r2, [pc, #32]	; (88cc <_ZL11PacketWriteP6ethIntPhm.isra.0+0x114>)
    ethernetif->txDesc[startIndex].bit.OWN = 0;
    88aa:	79cb      	ldrb	r3, [r1, #7]
    88ac:	f36f 13c7 	bfc	r3, #7, #1
    88b0:	71cb      	strb	r3, [r1, #7]
    GMAC->NCR.bit.TSTART = 1;
    88b2:	6813      	ldr	r3, [r2, #0]
    88b4:	f443 7300 	orr.w	r3, r3, #512	; 0x200
    88b8:	6013      	str	r3, [r2, #0]
}
    88ba:	2000      	movs	r0, #0
    88bc:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    for (uint32_t i = 0; i < TX_BUFF_CNT; i++) {
    88c0:	42b5      	cmp	r5, r6
        *ethernetif->txBuffIndex = (*ethernetif->txBuffIndex + 1) % TX_BUFF_CNT;
    88c2:	f8ac 0000 	strh.w	r0, [ip]
    for (uint32_t i = 0; i < TX_BUFF_CNT; i++) {
    88c6:	d1ad      	bne.n	8824 <_ZL11PacketWriteP6ethIntPhm.isra.0+0x6c>
    88c8:	e7ec      	b.n	88a4 <_ZL11PacketWriteP6ethIntPhm.isra.0+0xec>
    88ca:	bf00      	nop
    88cc:	42000800 	.word	0x42000800

000088d0 <_ZL16low_level_outputP5netifP4pbuf>:
    if (p->tot_len == p->len) {
    88d0:	890a      	ldrh	r2, [r1, #8]
    88d2:	894b      	ldrh	r3, [r1, #10]
    88d4:	4293      	cmp	r3, r2
static err_t low_level_output(netInt *netif, packetBuf *p) {
    88d6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    ethernetif = (ethInt *)(netif->state);
    88da:	6a06      	ldr	r6, [r0, #32]
    if (p->tot_len == p->len) {
    88dc:	d023      	beq.n	8926 <_ZL16low_level_outputP5netifP4pbuf+0x56>
        tempBuffer = mem_malloc(LWIP_MEM_ALIGN_SIZE(p->tot_len));
    88de:	3203      	adds	r2, #3
    88e0:	f64f 70fc 	movw	r0, #65532	; 0xfffc
    88e4:	4010      	ands	r0, r2
    88e6:	460d      	mov	r5, r1
    88e8:	f00e fb74 	bl	16fd4 <mem_malloc>
        if (tempBuffer == NULL) {
    88ec:	4607      	mov	r7, r0
    88ee:	b310      	cbz	r0, 8936 <_ZL16low_level_outputP5netifP4pbuf+0x66>
    88f0:	4603      	mov	r3, r0
    88f2:	462c      	mov	r4, r5
            memcpy(index, q->payload, q->len);
    88f4:	8962      	ldrh	r2, [r4, #10]
    88f6:	6861      	ldr	r1, [r4, #4]
    88f8:	4618      	mov	r0, r3
    88fa:	f01f f9b1 	bl	27c60 <memcpy>
            index += q->len;
    88fe:	8962      	ldrh	r2, [r4, #10]
        for (q = p; q != NULL; q = q->next) {
    8900:	6824      	ldr	r4, [r4, #0]
            memcpy(index, q->payload, q->len);
    8902:	4603      	mov	r3, r0
            index += q->len;
    8904:	4413      	add	r3, r2
        for (q = p; q != NULL; q = q->next) {
    8906:	2c00      	cmp	r4, #0
    8908:	d1f4      	bne.n	88f4 <_ZL16low_level_outputP5netifP4pbuf+0x24>
        err = PacketWrite(ethernetif, (uint8_t *)tempBuffer, p->tot_len);
    890a:	892b      	ldrh	r3, [r5, #8]
    890c:	463a      	mov	r2, r7
    890e:	f106 010c 	add.w	r1, r6, #12
    8912:	1d30      	adds	r0, r6, #4
    8914:	f7ff ff50 	bl	87b8 <_ZL11PacketWriteP6ethIntPhm.isra.0>
    8918:	4604      	mov	r4, r0
        mem_free(tempBuffer);
    891a:	4638      	mov	r0, r7
    891c:	f00e fa8c 	bl	16e38 <mem_free>
}
    8920:	4620      	mov	r0, r4
    8922:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        err = PacketWrite(ethernetif, (uint8_t *)p->payload, p->tot_len);
    8926:	684a      	ldr	r2, [r1, #4]
    8928:	1d30      	adds	r0, r6, #4
    892a:	f106 010c 	add.w	r1, r6, #12
}
    892e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
        err = PacketWrite(ethernetif, (uint8_t *)p->payload, p->tot_len);
    8932:	f7ff bf41 	b.w	87b8 <_ZL11PacketWriteP6ethIntPhm.isra.0>
            return ERR_MEM; // Allocation error.
    8936:	f04f 34ff 	mov.w	r4, #4294967295
    893a:	e7f1      	b.n	8920 <_ZL16low_level_outputP5netifP4pbuf+0x50>

0000893c <_Z10PacketReadP6ethIntPhm>:
uint32_t PacketRead(ethInt *ethernetif, uint8_t *buffer, uint32_t bytesToCopy) {
    893c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    uint8_t index = *(ethernetif->rxBuffIndex);
    8940:	f8d0 c008 	ldr.w	ip, [r0, #8]
        if (!ethernetif->rxDesc[index].bit.OWN) {
    8944:	6807      	ldr	r7, [r0, #0]
    uint8_t index = *(ethernetif->rxBuffIndex);
    8946:	f89c 8000 	ldrb.w	r8, [ip]
        if (!ethernetif->rxDesc[index].bit.OWN) {
    894a:	fa0f f688 	sxth.w	r6, r8
    894e:	f817 3036 	ldrb.w	r3, [r7, r6, lsl #3]
    8952:	07dc      	lsls	r4, r3, #31
    8954:	eb07 06c6 	add.w	r6, r7, r6, lsl #3
    8958:	d564      	bpl.n	8a24 <_Z10PacketReadP6ethIntPhm+0xe8>
    895a:	460d      	mov	r5, r1
    895c:	4604      	mov	r4, r0
    895e:	4641      	mov	r1, r8
    8960:	2300      	movs	r3, #0
    8962:	f04f 0e10 	mov.w	lr, #16
    8966:	e012      	b.n	898e <_Z10PacketReadP6ethIntPhm+0x52>
        if (ethernetif->rxDesc[index].bit.EF && startFrameOffset != RX_BUFF_CNT) {
    8968:	0600      	lsls	r0, r0, #24
    896a:	d502      	bpl.n	8972 <_Z10PacketReadP6ethIntPhm+0x36>
    896c:	f1be 0f10 	cmp.w	lr, #16
    8970:	d114      	bne.n	899c <_Z10PacketReadP6ethIntPhm+0x60>
    for (uint8_t i = 0; i < RX_BUFF_CNT; i++) {
    8972:	3301      	adds	r3, #1
        index = (index + 1) % RX_BUFF_CNT;
    8974:	3101      	adds	r1, #1
    for (uint8_t i = 0; i < RX_BUFF_CNT; i++) {
    8976:	b2db      	uxtb	r3, r3
        index = (index + 1) % RX_BUFF_CNT;
    8978:	f001 000f 	and.w	r0, r1, #15
    for (uint8_t i = 0; i < RX_BUFF_CNT; i++) {
    897c:	2b10      	cmp	r3, #16
        index = (index + 1) % RX_BUFF_CNT;
    897e:	b2c1      	uxtb	r1, r0
        if (!ethernetif->rxDesc[index].bit.OWN) {
    8980:	eb07 06c0 	add.w	r6, r7, r0, lsl #3
    for (uint8_t i = 0; i < RX_BUFF_CNT; i++) {
    8984:	d04e      	beq.n	8a24 <_Z10PacketReadP6ethIntPhm+0xe8>
        if (!ethernetif->rxDesc[index].bit.OWN) {
    8986:	f817 0030 	ldrb.w	r0, [r7, r0, lsl #3]
    898a:	07c0      	lsls	r0, r0, #31
    898c:	d54a      	bpl.n	8a24 <_Z10PacketReadP6ethIntPhm+0xe8>
        if (ethernetif->rxDesc[index].bit.SF) {
    898e:	7970      	ldrb	r0, [r6, #5]
    8990:	f010 0f40 	tst.w	r0, #64	; 0x40
    8994:	d0e8      	beq.n	8968 <_Z10PacketReadP6ethIntPhm+0x2c>
        if (ethernetif->rxDesc[index].bit.EF && startFrameOffset != RX_BUFF_CNT) {
    8996:	0600      	lsls	r0, r0, #24
    8998:	469e      	mov	lr, r3
    899a:	d5ea      	bpl.n	8972 <_Z10PacketReadP6ethIntPhm+0x36>
            packetLength = ethernetif->rxDesc[index].bit.LEN;
    899c:	88b7      	ldrh	r7, [r6, #4]
    899e:	f3c7 070c 	ubfx	r7, r7, #0, #13
    89a2:	4297      	cmp	r7, r2
    *ethernetif->rxBuffIndex = (*(ethernetif->rxBuffIndex) + startFrameOffset) % RX_BUFF_CNT;
    89a4:	44f0      	add	r8, lr
    89a6:	f008 080f 	and.w	r8, r8, #15
    bufferCount = endFrameOffset - startFrameOffset + 1;
    89aa:	eba3 010e 	sub.w	r1, r3, lr
    89ae:	bf28      	it	cs
    89b0:	4617      	movcs	r7, r2
    if (endFrameOffset < startFrameOffset) {
    89b2:	4573      	cmp	r3, lr
    *ethernetif->rxBuffIndex = (*(ethernetif->rxBuffIndex) + startFrameOffset) % RX_BUFF_CNT;
    89b4:	f88c 8000 	strb.w	r8, [ip]
    bufferCount = endFrameOffset - startFrameOffset + 1;
    89b8:	fa5f f881 	uxtb.w	r8, r1
    if (endFrameOffset < startFrameOffset) {
    89bc:	da37      	bge.n	8a2e <_Z10PacketReadP6ethIntPhm+0xf2>
        bufferCount += RX_BUFF_CNT;
    89be:	f108 0811 	add.w	r8, r8, #17
    89c2:	fa5f f888 	uxtb.w	r8, r8
    for (uint8_t i = 0; i < bufferCount; i++) {
    89c6:	f1b8 0f00 	cmp.w	r8, #0
    89ca:	d02b      	beq.n	8a24 <_Z10PacketReadP6ethIntPhm+0xe8>
    89cc:	2600      	movs	r6, #0
    89ce:	46b1      	mov	r9, r6
        if (bytesToCopy > 0) {
    89d0:	b99f      	cbnz	r7, 89fa <_Z10PacketReadP6ethIntPhm+0xbe>
        ethernetif->rxDesc[*(ethernetif->rxBuffIndex)].bit.OWN = 0;
    89d2:	68a2      	ldr	r2, [r4, #8]
    89d4:	6823      	ldr	r3, [r4, #0]
    89d6:	7811      	ldrb	r1, [r2, #0]
    89d8:	f813 0031 	ldrb.w	r0, [r3, r1, lsl #3]
    89dc:	f36f 0000 	bfc	r0, #0, #1
    89e0:	f803 0031 	strb.w	r0, [r3, r1, lsl #3]
        *ethernetif->rxBuffIndex = (*(ethernetif->rxBuffIndex) + 1) % RX_BUFF_CNT;
    89e4:	7813      	ldrb	r3, [r2, #0]
    for (uint8_t i = 0; i < bufferCount; i++) {
    89e6:	3601      	adds	r6, #1
        *ethernetif->rxBuffIndex = (*(ethernetif->rxBuffIndex) + 1) % RX_BUFF_CNT;
    89e8:	3301      	adds	r3, #1
    for (uint8_t i = 0; i < bufferCount; i++) {
    89ea:	b2f6      	uxtb	r6, r6
        *ethernetif->rxBuffIndex = (*(ethernetif->rxBuffIndex) + 1) % RX_BUFF_CNT;
    89ec:	f003 030f 	and.w	r3, r3, #15
    for (uint8_t i = 0; i < bufferCount; i++) {
    89f0:	4546      	cmp	r6, r8
        *ethernetif->rxBuffIndex = (*(ethernetif->rxBuffIndex) + 1) % RX_BUFF_CNT;
    89f2:	7013      	strb	r3, [r2, #0]
    for (uint8_t i = 0; i < bufferCount; i++) {
    89f4:	da18      	bge.n	8a28 <_Z10PacketReadP6ethIntPhm+0xec>
        if (bytesToCopy > 0) {
    89f6:	2f00      	cmp	r7, #0
    89f8:	d0eb      	beq.n	89d2 <_Z10PacketReadP6ethIntPhm+0x96>
            memcpy(buffer, (void *)(ethernetif->rxDesc[*(ethernetif->rxBuffIndex)].reg[0] & 0xFFFFFFFC), bytes);
    89fa:	68a2      	ldr	r2, [r4, #8]
    89fc:	6823      	ldr	r3, [r4, #0]
    89fe:	7812      	ldrb	r2, [r2, #0]
            uint32_t bytes = min(bytesToCopy, RX_BUFFER_SIZE);
    8a00:	2f80      	cmp	r7, #128	; 0x80
            memcpy(buffer, (void *)(ethernetif->rxDesc[*(ethernetif->rxBuffIndex)].reg[0] & 0xFFFFFFFC), bytes);
    8a02:	f853 1032 	ldr.w	r1, [r3, r2, lsl #3]
            uint32_t bytes = min(bytesToCopy, RX_BUFFER_SIZE);
    8a06:	46ba      	mov	sl, r7
    8a08:	bf28      	it	cs
    8a0a:	f04f 0a80 	movcs.w	sl, #128	; 0x80
            memcpy(buffer, (void *)(ethernetif->rxDesc[*(ethernetif->rxBuffIndex)].reg[0] & 0xFFFFFFFC), bytes);
    8a0e:	4628      	mov	r0, r5
    8a10:	f021 0103 	bic.w	r1, r1, #3
    8a14:	4652      	mov	r2, sl
    8a16:	f01f f923 	bl	27c60 <memcpy>
            bytesCopied += bytes;
    8a1a:	44d1      	add	r9, sl
            bytesToCopy -= bytes;
    8a1c:	eba7 070a 	sub.w	r7, r7, sl
            buffer += bytes;
    8a20:	4455      	add	r5, sl
    8a22:	e7d6      	b.n	89d2 <_Z10PacketReadP6ethIntPhm+0x96>
        return 0; // Failed to find the frame..
    8a24:	f04f 0900 	mov.w	r9, #0
}
    8a28:	4648      	mov	r0, r9
    8a2a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    bufferCount = endFrameOffset - startFrameOffset + 1;
    8a2e:	f108 0801 	add.w	r8, r8, #1
    8a32:	fa5f f888 	uxtb.w	r8, r8
    8a36:	e7c6      	b.n	89c6 <_Z10PacketReadP6ethIntPhm+0x8a>

00008a38 <_ZN9ClearCore15EthernetManager8InstanceEv>:

extern NvmManager &NvmMgr;

EthernetManager &EthernetMgr = EthernetManager::Instance();

EthernetManager &EthernetManager::Instance() {
    8a38:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    static EthernetManager *instance = new EthernetManager();
    8a3a:	4e37      	ldr	r6, [pc, #220]	; (8b18 <_ZN9ClearCore15EthernetManager8InstanceEv+0xe0>)
    8a3c:	6835      	ldr	r5, [r6, #0]
    8a3e:	f015 0501 	ands.w	r5, r5, #1
    8a42:	d002      	beq.n	8a4a <_ZN9ClearCore15EthernetManager8InstanceEv+0x12>
    8a44:	4b35      	ldr	r3, [pc, #212]	; (8b1c <_ZN9ClearCore15EthernetManager8InstanceEv+0xe4>)
    8a46:	6818      	ldr	r0, [r3, #0]
    8a48:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    8a4a:	f641 10c4 	movw	r0, #6596	; 0x19c4
    8a4e:	f014 f977 	bl	1cd40 <_Znwj>
    8a52:	4604      	mov	r4, r0
      m_portPhyInt(PHY_INT.gpioPort), m_pinPhyInt(PHY_INT.gpioPin),
      m_phyExtInt(PHY_INT.extInt), m_phyLinkUp(false), m_phyRemoteFault(false),
      m_phyInitFailed(false), m_recv(false), m_dhcp(false), m_ethernetActive(false),
      m_rxBuffIndex(0), m_txBuffIndex(0), m_rxBuffer{0}, m_txBuffer{0},
      m_retransmissionTimeout(200), m_retransmissionCount(8),
      m_ethernetInterface({}), m_macInterface({}), m_dhcpData(nullptr) { }
    8a54:	2711      	movs	r7, #17
    8a56:	2312      	movs	r3, #18
    8a58:	6067      	str	r7, [r4, #4]
    8a5a:	60e3      	str	r3, [r4, #12]
    8a5c:	2213      	movs	r2, #19
    8a5e:	210d      	movs	r1, #13
    8a60:	2714      	movs	r7, #20
    8a62:	230b      	movs	r3, #11
    8a64:	6162      	str	r2, [r4, #20]
    8a66:	61e1      	str	r1, [r4, #28]
    8a68:	6367      	str	r7, [r4, #52]	; 0x34
    8a6a:	6463      	str	r3, [r4, #68]	; 0x44
    8a6c:	270c      	movs	r7, #12
    8a6e:	2302      	movs	r3, #2
    8a70:	200f      	movs	r0, #15
    8a72:	220e      	movs	r2, #14
    8a74:	211c      	movs	r1, #28
    8a76:	6323      	str	r3, [r4, #48]	; 0x30
    8a78:	63a3      	str	r3, [r4, #56]	; 0x38
    8a7a:	6423      	str	r3, [r4, #64]	; 0x40
    8a7c:	6523      	str	r3, [r4, #80]	; 0x50
    8a7e:	62e0      	str	r0, [r4, #44]	; 0x2c
    8a80:	64e2      	str	r2, [r4, #76]	; 0x4c
    8a82:	6561      	str	r1, [r4, #84]	; 0x54
    8a84:	6267      	str	r7, [r4, #36]	; 0x24
    8a86:	4629      	mov	r1, r5
    8a88:	63e7      	str	r7, [r4, #60]	; 0x3c
    8a8a:	65a7      	str	r7, [r4, #88]	; 0x58
    8a8c:	6025      	str	r5, [r4, #0]
    8a8e:	60a5      	str	r5, [r4, #8]
    8a90:	6125      	str	r5, [r4, #16]
    8a92:	61a5      	str	r5, [r4, #24]
    8a94:	6225      	str	r5, [r4, #32]
    8a96:	62a5      	str	r5, [r4, #40]	; 0x28
    8a98:	64a5      	str	r5, [r4, #72]	; 0x48
    8a9a:	f884 505c 	strb.w	r5, [r4, #92]	; 0x5c
    8a9e:	f884 505d 	strb.w	r5, [r4, #93]	; 0x5d
    8aa2:	f884 505e 	strb.w	r5, [r4, #94]	; 0x5e
    8aa6:	f884 505f 	strb.w	r5, [r4, #95]	; 0x5f
    8aaa:	f884 5060 	strb.w	r5, [r4, #96]	; 0x60
    8aae:	f884 5061 	strb.w	r5, [r4, #97]	; 0x61
    8ab2:	f884 5062 	strb.w	r5, [r4, #98]	; 0x62
    8ab6:	f8a4 5064 	strh.w	r5, [r4, #100]	; 0x64
    8aba:	f504 7094 	add.w	r0, r4, #296	; 0x128
    8abe:	f44f 6200 	mov.w	r2, #2048	; 0x800
    8ac2:	f01f f9cb 	bl	27e5c <memset>
    8ac6:	4629      	mov	r1, r5
    8ac8:	f604 1028 	addw	r0, r4, #2344	; 0x928
    8acc:	f44f 5282 	mov.w	r2, #4160	; 0x1040
    8ad0:	f01f f9c4 	bl	27e5c <memset>
    8ad4:	f641 176c 	movw	r7, #6508	; 0x196c
    8ad8:	f641 1168 	movw	r1, #6504	; 0x1968
    8adc:	19e3      	adds	r3, r4, r7
    8ade:	f641 126a 	movw	r2, #6506	; 0x196a
    8ae2:	20c8      	movs	r0, #200	; 0xc8
    8ae4:	5260      	strh	r0, [r4, r1]
    8ae6:	f504 50cc 	add.w	r0, r4, #6528	; 0x1980
    8aea:	2108      	movs	r1, #8
    8aec:	54a1      	strb	r1, [r4, r2]
    8aee:	3004      	adds	r0, #4
    8af0:	51e5      	str	r5, [r4, r7]
    8af2:	4629      	mov	r1, r5
    8af4:	605d      	str	r5, [r3, #4]
    8af6:	609d      	str	r5, [r3, #8]
    8af8:	60dd      	str	r5, [r3, #12]
    8afa:	611d      	str	r5, [r3, #16]
    8afc:	615d      	str	r5, [r3, #20]
    8afe:	223c      	movs	r2, #60	; 0x3c
    8b00:	f01f f9ac 	bl	27e5c <memset>
    static EthernetManager *instance = new EthernetManager();
    8b04:	4905      	ldr	r1, [pc, #20]	; (8b1c <_ZN9ClearCore15EthernetManager8InstanceEv+0xe4>)
      m_ethernetInterface({}), m_macInterface({}), m_dhcpData(nullptr) { }
    8b06:	f504 52ce 	add.w	r2, r4, #6592	; 0x19c0
    static EthernetManager *instance = new EthernetManager();
    8b0a:	2301      	movs	r3, #1
    8b0c:	600c      	str	r4, [r1, #0]
      m_ethernetInterface({}), m_macInterface({}), m_dhcpData(nullptr) { }
    8b0e:	6015      	str	r5, [r2, #0]
    8b10:	4620      	mov	r0, r4
    static EthernetManager *instance = new EthernetManager();
    8b12:	6033      	str	r3, [r6, #0]
}
    8b14:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    8b16:	bf00      	nop
    8b18:	20001c9c 	.word	0x20001c9c
    8b1c:	20001ca4 	.word	0x20001ca4

00008b20 <_ZN9ClearCore15EthernetManager13PhyInitializeEv>:
    NvmMgr.MacAddress(m_ethernetInterface.mac);
}

void EthernetManager::PhyInitialize() {
    // Reset PHY status values.
    m_phyLinkUp = false;
    8b20:	2200      	movs	r2, #0

uint32_t EthernetManager::PhyShift(uint32_t phyOp, uint32_t phyReg,
                                   uint32_t contents) {
    // Enable the GMAC management port and initiate a shift operation to the
    // PHY. The PHY's status register is returned into the GMAC's MAN register.
    GMAC->NCR.bit.MPE = 1;
    8b22:	4b3e      	ldr	r3, [pc, #248]	; (8c1c <_ZN9ClearCore15EthernetManager13PhyInitializeEv+0xfc>)
    m_phyLinkUp = false;
    8b24:	f880 205c 	strb.w	r2, [r0, #92]	; 0x5c
    m_phyInitFailed = false;
    8b28:	f880 205e 	strb.w	r2, [r0, #94]	; 0x5e
    m_phyRemoteFault = false;
    8b2c:	f880 205d 	strb.w	r2, [r0, #93]	; 0x5d
    GMAC->NCR.bit.MPE = 1;
    8b30:	681a      	ldr	r2, [r3, #0]
    GMAC->MAN.reg = GMAC_MAN_CLTTO |   // Clause 22 or 45 operation (1 is 22)
    8b32:	493b      	ldr	r1, [pc, #236]	; (8c20 <_ZN9ClearCore15EthernetManager13PhyInitializeEv+0x100>)
    GMAC->NCR.bit.MPE = 1;
    8b34:	f042 0210 	orr.w	r2, r2, #16
    8b38:	601a      	str	r2, [r3, #0]
                    GMAC_MAN_PHYA(0) |          // PHY address (default is 0)
                    GMAC_MAN_REGA(phyReg) |     // Register in the PHY to access
                    GMAC_MAN_WTN(0x2) |         // Must be written to '1' '0'
                    GMAC_MAN_DATA(contents);

    while (!((GMAC->NSR.reg & GMAC_NSR_IDLE) >> GMAC_NSR_IDLE_Pos)) {
    8b3a:	461a      	mov	r2, r3
    GMAC->MAN.reg = GMAC_MAN_CLTTO |   // Clause 22 or 45 operation (1 is 22)
    8b3c:	6359      	str	r1, [r3, #52]	; 0x34
    while (!((GMAC->NSR.reg & GMAC_NSR_IDLE) >> GMAC_NSR_IDLE_Pos)) {
    8b3e:	6893      	ldr	r3, [r2, #8]
    8b40:	0759      	lsls	r1, r3, #29
    8b42:	d5fc      	bpl.n	8b3e <_ZN9ClearCore15EthernetManager13PhyInitializeEv+0x1e>
        // Wait for the PHY write to finish
        continue;
    }
    GMAC->NCR.bit.MPE = 0;
    8b44:	6813      	ldr	r3, [r2, #0]
    8b46:	f36f 1304 	bfc	r3, #4, #1
    8b4a:	6013      	str	r3, [r2, #0]

    return GMAC_MAN_DATA(GMAC->MAN.reg);
    8b4c:	6b53      	ldr	r3, [r2, #52]	; 0x34
    8b4e:	f64f 71ff 	movw	r1, #65535	; 0xffff
    8b52:	b29b      	uxth	r3, r3
    if (PhyRead(PHY_B_CTRL) == 0xFFFF) {
    8b54:	428b      	cmp	r3, r1
    8b56:	d05d      	beq.n	8c14 <_ZN9ClearCore15EthernetManager13PhyInitializeEv+0xf4>
void EthernetManager::PhyInitialize() {
    8b58:	b410      	push	{r4}
    GMAC->NCR.bit.MPE = 1;
    8b5a:	6813      	ldr	r3, [r2, #0]
    GMAC->MAN.reg = GMAC_MAN_CLTTO |   // Clause 22 or 45 operation (1 is 22)
    8b5c:	4c31      	ldr	r4, [pc, #196]	; (8c24 <_ZN9ClearCore15EthernetManager13PhyInitializeEv+0x104>)
    while (!((GMAC->NSR.reg & GMAC_NSR_IDLE) >> GMAC_NSR_IDLE_Pos)) {
    8b5e:	492f      	ldr	r1, [pc, #188]	; (8c1c <_ZN9ClearCore15EthernetManager13PhyInitializeEv+0xfc>)
    GMAC->NCR.bit.MPE = 1;
    8b60:	f043 0310 	orr.w	r3, r3, #16
    8b64:	6013      	str	r3, [r2, #0]
    GMAC->MAN.reg = GMAC_MAN_CLTTO |   // Clause 22 or 45 operation (1 is 22)
    8b66:	6354      	str	r4, [r2, #52]	; 0x34
    while (!((GMAC->NSR.reg & GMAC_NSR_IDLE) >> GMAC_NSR_IDLE_Pos)) {
    8b68:	688b      	ldr	r3, [r1, #8]
    8b6a:	075a      	lsls	r2, r3, #29
    8b6c:	d5fc      	bpl.n	8b68 <_ZN9ClearCore15EthernetManager13PhyInitializeEv+0x48>
    GMAC->NCR.bit.MPE = 0;
    8b6e:	680b      	ldr	r3, [r1, #0]
    GMAC->MAN.reg = GMAC_MAN_CLTTO |   // Clause 22 or 45 operation (1 is 22)
    8b70:	4c2b      	ldr	r4, [pc, #172]	; (8c20 <_ZN9ClearCore15EthernetManager13PhyInitializeEv+0x100>)
    while (!((GMAC->NSR.reg & GMAC_NSR_IDLE) >> GMAC_NSR_IDLE_Pos)) {
    8b72:	4a2a      	ldr	r2, [pc, #168]	; (8c1c <_ZN9ClearCore15EthernetManager13PhyInitializeEv+0xfc>)
    GMAC->NCR.bit.MPE = 0;
    8b74:	f36f 1304 	bfc	r3, #4, #1
    8b78:	600b      	str	r3, [r1, #0]
    return GMAC_MAN_DATA(GMAC->MAN.reg);
    8b7a:	6b4b      	ldr	r3, [r1, #52]	; 0x34
    GMAC->NCR.bit.MPE = 1;
    8b7c:	680b      	ldr	r3, [r1, #0]
    8b7e:	f043 0310 	orr.w	r3, r3, #16
    8b82:	600b      	str	r3, [r1, #0]
    GMAC->MAN.reg = GMAC_MAN_CLTTO |   // Clause 22 or 45 operation (1 is 22)
    8b84:	634c      	str	r4, [r1, #52]	; 0x34
    while (!((GMAC->NSR.reg & GMAC_NSR_IDLE) >> GMAC_NSR_IDLE_Pos)) {
    8b86:	6893      	ldr	r3, [r2, #8]
    8b88:	075b      	lsls	r3, r3, #29
    8b8a:	d5fc      	bpl.n	8b86 <_ZN9ClearCore15EthernetManager13PhyInitializeEv+0x66>
    GMAC->NCR.bit.MPE = 0;
    8b8c:	6813      	ldr	r3, [r2, #0]
    GMAC->MAN.reg = GMAC_MAN_CLTTO |   // Clause 22 or 45 operation (1 is 22)
    8b8e:	4c26      	ldr	r4, [pc, #152]	; (8c28 <_ZN9ClearCore15EthernetManager13PhyInitializeEv+0x108>)
    while (!((GMAC->NSR.reg & GMAC_NSR_IDLE) >> GMAC_NSR_IDLE_Pos)) {
    8b90:	4922      	ldr	r1, [pc, #136]	; (8c1c <_ZN9ClearCore15EthernetManager13PhyInitializeEv+0xfc>)
    GMAC->NCR.bit.MPE = 0;
    8b92:	f36f 1304 	bfc	r3, #4, #1
    8b96:	6013      	str	r3, [r2, #0]
    return GMAC_MAN_DATA(GMAC->MAN.reg);
    8b98:	6b53      	ldr	r3, [r2, #52]	; 0x34
    GMAC->NCR.bit.MPE = 1;
    8b9a:	6813      	ldr	r3, [r2, #0]
    8b9c:	f043 0310 	orr.w	r3, r3, #16
    8ba0:	6013      	str	r3, [r2, #0]
    GMAC->MAN.reg = GMAC_MAN_CLTTO |   // Clause 22 or 45 operation (1 is 22)
    8ba2:	6354      	str	r4, [r2, #52]	; 0x34
    while (!((GMAC->NSR.reg & GMAC_NSR_IDLE) >> GMAC_NSR_IDLE_Pos)) {
    8ba4:	688b      	ldr	r3, [r1, #8]
    8ba6:	075c      	lsls	r4, r3, #29
    8ba8:	d5fc      	bpl.n	8ba4 <_ZN9ClearCore15EthernetManager13PhyInitializeEv+0x84>
    GMAC->NCR.bit.MPE = 0;
    8baa:	680b      	ldr	r3, [r1, #0]
    8bac:	f36f 1304 	bfc	r3, #4, #1
    8bb0:	600b      	str	r3, [r1, #0]
    return GMAC_MAN_DATA(GMAC->MAN.reg);
    8bb2:	6b4b      	ldr	r3, [r1, #52]	; 0x34
    8bb4:	b29b      	uxth	r3, r3
    if (PhyRead(PHY_ICS) != 0) {
    8bb6:	b12b      	cbz	r3, 8bc4 <_ZN9ClearCore15EthernetManager13PhyInitializeEv+0xa4>
        m_phyInitFailed = true;
    8bb8:	2301      	movs	r3, #1
    8bba:	f880 305e 	strb.w	r3, [r0, #94]	; 0x5e
}
    8bbe:	f85d 4b04 	ldr.w	r4, [sp], #4
    8bc2:	4770      	bx	lr
    GMAC->NCR.bit.MPE = 1;
    8bc4:	680b      	ldr	r3, [r1, #0]
    GMAC->MAN.reg = GMAC_MAN_CLTTO |   // Clause 22 or 45 operation (1 is 22)
    8bc6:	4c19      	ldr	r4, [pc, #100]	; (8c2c <_ZN9ClearCore15EthernetManager13PhyInitializeEv+0x10c>)
    while (!((GMAC->NSR.reg & GMAC_NSR_IDLE) >> GMAC_NSR_IDLE_Pos)) {
    8bc8:	4a14      	ldr	r2, [pc, #80]	; (8c1c <_ZN9ClearCore15EthernetManager13PhyInitializeEv+0xfc>)
    GMAC->NCR.bit.MPE = 1;
    8bca:	f043 0310 	orr.w	r3, r3, #16
    8bce:	600b      	str	r3, [r1, #0]
    GMAC->MAN.reg = GMAC_MAN_CLTTO |   // Clause 22 or 45 operation (1 is 22)
    8bd0:	634c      	str	r4, [r1, #52]	; 0x34
    while (!((GMAC->NSR.reg & GMAC_NSR_IDLE) >> GMAC_NSR_IDLE_Pos)) {
    8bd2:	6893      	ldr	r3, [r2, #8]
    8bd4:	0759      	lsls	r1, r3, #29
    8bd6:	d5fc      	bpl.n	8bd2 <_ZN9ClearCore15EthernetManager13PhyInitializeEv+0xb2>
    GMAC->NCR.bit.MPE = 0;
    8bd8:	6813      	ldr	r3, [r2, #0]
    GMAC->MAN.reg = GMAC_MAN_CLTTO |   // Clause 22 or 45 operation (1 is 22)
    8bda:	4c13      	ldr	r4, [pc, #76]	; (8c28 <_ZN9ClearCore15EthernetManager13PhyInitializeEv+0x108>)
    while (!((GMAC->NSR.reg & GMAC_NSR_IDLE) >> GMAC_NSR_IDLE_Pos)) {
    8bdc:	490f      	ldr	r1, [pc, #60]	; (8c1c <_ZN9ClearCore15EthernetManager13PhyInitializeEv+0xfc>)
    GMAC->NCR.bit.MPE = 0;
    8bde:	f36f 1304 	bfc	r3, #4, #1
    8be2:	6013      	str	r3, [r2, #0]
    return GMAC_MAN_DATA(GMAC->MAN.reg);
    8be4:	6b53      	ldr	r3, [r2, #52]	; 0x34
    GMAC->NCR.bit.MPE = 1;
    8be6:	6813      	ldr	r3, [r2, #0]
    8be8:	f043 0310 	orr.w	r3, r3, #16
    8bec:	6013      	str	r3, [r2, #0]
    GMAC->MAN.reg = GMAC_MAN_CLTTO |   // Clause 22 or 45 operation (1 is 22)
    8bee:	6354      	str	r4, [r2, #52]	; 0x34
    while (!((GMAC->NSR.reg & GMAC_NSR_IDLE) >> GMAC_NSR_IDLE_Pos)) {
    8bf0:	688b      	ldr	r3, [r1, #8]
    8bf2:	075b      	lsls	r3, r3, #29
    8bf4:	d5fc      	bpl.n	8bf0 <_ZN9ClearCore15EthernetManager13PhyInitializeEv+0xd0>
    GMAC->NCR.bit.MPE = 0;
    8bf6:	680b      	ldr	r3, [r1, #0]
    8bf8:	f36f 1304 	bfc	r3, #4, #1
    8bfc:	600b      	str	r3, [r1, #0]
    return GMAC_MAN_DATA(GMAC->MAN.reg);
    8bfe:	6b4b      	ldr	r3, [r1, #52]	; 0x34
    if ((phyIntMask >> 8) != (phyIntValue >> 8)) {
    8c00:	f3c3 2307 	ubfx	r3, r3, #8, #8
    8c04:	2b07      	cmp	r3, #7
    8c06:	d1d7      	bne.n	8bb8 <_ZN9ClearCore15EthernetManager13PhyInitializeEv+0x98>
    m_phyInitFailed = false;
    8c08:	2300      	movs	r3, #0
    8c0a:	f880 305e 	strb.w	r3, [r0, #94]	; 0x5e
}
    8c0e:	f85d 4b04 	ldr.w	r4, [sp], #4
    8c12:	4770      	bx	lr
        m_phyInitFailed = true;
    8c14:	2301      	movs	r3, #1
    8c16:	f880 305e 	strb.w	r3, [r0, #94]	; 0x5e
    8c1a:	4770      	bx	lr
    8c1c:	42000800 	.word	0x42000800
    8c20:	60020000 	.word	0x60020000
    8c24:	50028000 	.word	0x50028000
    8c28:	606e0000 	.word	0x606e0000
    8c2c:	506e0700 	.word	0x506e0700

00008c30 <_ZN9ClearCore15EthernetManager10InitializeEv>:
void EthernetManager::Initialize() {
    8c30:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}

/**
    Enable transmit and receive of frames.
**/
void EthernetManager::Enable(bool enable) {
    bool enabled = (GMAC->NCR.bit.TXEN && GMAC->NCR.bit.RXEN);
    8c34:	4be2      	ldr	r3, [pc, #904]	; (8fc0 <_ZN9ClearCore15EthernetManager10InitializeEv+0x390>)
    8c36:	681a      	ldr	r2, [r3, #0]
    8c38:	0715      	lsls	r5, r2, #28
void EthernetManager::Initialize() {
    8c3a:	4604      	mov	r4, r0
    bool enabled = (GMAC->NCR.bit.TXEN && GMAC->NCR.bit.RXEN);
    8c3c:	d503      	bpl.n	8c46 <_ZN9ClearCore15EthernetManager10InitializeEv+0x16>
    8c3e:	681a      	ldr	r2, [r3, #0]
    8c40:	0750      	lsls	r0, r2, #29
    8c42:	f100 82a2 	bmi.w	918a <_ZN9ClearCore15EthernetManager10InitializeEv+0x55a>
    GMAC->NCR.bit.MPE = 1;          // Management port enabled
    8c46:	4ade      	ldr	r2, [pc, #888]	; (8fc0 <_ZN9ClearCore15EthernetManager10InitializeEv+0x390>)
  NVIC->ICER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
    8c48:	48de      	ldr	r0, [pc, #888]	; (8fc4 <_ZN9ClearCore15EthernetManager10InitializeEv+0x394>)
    8c4a:	6813      	ldr	r3, [r2, #0]
    8c4c:	f043 0310 	orr.w	r3, r3, #16
    8c50:	6013      	str	r3, [r2, #0]
    GMAC->NCFGR.bit.SPD = 1;        // 100 Mbps
    8c52:	6853      	ldr	r3, [r2, #4]
    8c54:	f043 0301 	orr.w	r3, r3, #1
    8c58:	6053      	str	r3, [r2, #4]
    GMAC->NCFGR.bit.FD = 1;         // Full duplex mode
    8c5a:	6853      	ldr	r3, [r2, #4]
    8c5c:	f043 0302 	orr.w	r3, r3, #2
    8c60:	6053      	str	r3, [r2, #4]
    GMAC->NCFGR.bit.MAXFS = 1;      // Increase max frame size
    8c62:	6853      	ldr	r3, [r2, #4]
    8c64:	f443 7380 	orr.w	r3, r3, #256	; 0x100
    8c68:	6053      	str	r3, [r2, #4]
    GMAC->NCFGR.bit.CLK = 0x04;     // MCK divided by 64
    8c6a:	6853      	ldr	r3, [r2, #4]
    8c6c:	2104      	movs	r1, #4
    8c6e:	f361 4394 	bfi	r3, r1, #18, #3
    8c72:	6053      	str	r3, [r2, #4]
    GMAC->UR.bit.MII = 0;           // RMII mode
    8c74:	68d3      	ldr	r3, [r2, #12]
    8c76:	f36f 0300 	bfc	r3, #0, #1
    8c7a:	60d3      	str	r3, [r2, #12]
    GMAC->DCFGR.bit.FBLDO = 0x04;   // Use INCR4 AHB bursts
    8c7c:	6913      	ldr	r3, [r2, #16]
    8c7e:	f361 0304 	bfi	r3, r1, #0, #5
    8c82:	6113      	str	r3, [r2, #16]
    GMAC->DCFGR.bit.RXBMS = 0x03;   // 4 Kbytes receiver packet buffer mem size
    8c84:	6913      	ldr	r3, [r2, #16]
    8c86:	f443 7340 	orr.w	r3, r3, #768	; 0x300
    8c8a:	6113      	str	r3, [r2, #16]
    GMAC->DCFGR.bit.TXPBMS = 0x01;  // 4 Kb transmitter packet buffer mem size
    8c8c:	6913      	ldr	r3, [r2, #16]
    8c8e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
    8c92:	6113      	str	r3, [r2, #16]
    GMAC->DCFGR.bit.DRBS = 0x02;    // 128 bytes receiver buffer in AHB
    8c94:	6915      	ldr	r5, [r2, #16]
    8c96:	2302      	movs	r3, #2
    8c98:	f363 4517 	bfi	r5, r3, #16, #8
    GMAC->IPGS.reg = GMAC_IPGS_FL((0x1 << 8) | 0x1);
    8c9c:	f240 1c01 	movw	ip, #257	; 0x101
    GMAC->WOL.reg = 0;
    8ca0:	2300      	movs	r3, #0
    GMAC->DCFGR.bit.DRBS = 0x02;    // 128 bytes receiver buffer in AHB
    8ca2:	6115      	str	r5, [r2, #16]
    GMAC->WOL.reg = 0;
    8ca4:	f8c2 30b8 	str.w	r3, [r2, #184]	; 0xb8
    GMAC->IPGS.reg = GMAC_IPGS_FL((0x1 << 8) | 0x1);
    8ca8:	f8c2 c0bc 	str.w	ip, [r2, #188]	; 0xbc
        m_rxDesc[buff].reg[0] = (uint32_t) &m_rxBuffer[buff][0];
    8cac:	f504 7c94 	add.w	ip, r4, #296	; 0x128
    8cb0:	f8c4 c068 	str.w	ip, [r4, #104]	; 0x68
    8cb4:	f504 7cd4 	add.w	ip, r4, #424	; 0x1a8
    8cb8:	f8c4 c070 	str.w	ip, [r4, #112]	; 0x70
    8cbc:	f504 7c0a 	add.w	ip, r4, #552	; 0x228
    8cc0:	f604 01a8 	addw	r1, r4, #2216	; 0x8a8
    8cc4:	f8c4 c078 	str.w	ip, [r4, #120]	; 0x78
    8cc8:	f504 7c2a 	add.w	ip, r4, #680	; 0x2a8
    m_rxDesc[RX_BUFF_CNT - 1].bit.WRAP = 1;
    8ccc:	fa5f fe81 	uxtb.w	lr, r1
        m_rxDesc[buff].reg[0] = (uint32_t) &m_rxBuffer[buff][0];
    8cd0:	f8c4 c080 	str.w	ip, [r4, #128]	; 0x80
    8cd4:	f504 7c4a 	add.w	ip, r4, #808	; 0x328
    m_rxDesc[RX_BUFF_CNT - 1].bit.WRAP = 1;
    8cd8:	f04e 0e02 	orr.w	lr, lr, #2
        m_rxDesc[buff].reg[0] = (uint32_t) &m_rxBuffer[buff][0];
    8cdc:	f8c4 c088 	str.w	ip, [r4, #136]	; 0x88
    8ce0:	f504 7c6a 	add.w	ip, r4, #936	; 0x3a8
        m_rxDesc[buff].reg[1] = 0;
    8ce4:	66e3      	str	r3, [r4, #108]	; 0x6c
    8ce6:	6763      	str	r3, [r4, #116]	; 0x74
    8ce8:	67e3      	str	r3, [r4, #124]	; 0x7c
    8cea:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
    8cee:	f8c4 308c 	str.w	r3, [r4, #140]	; 0x8c
        m_rxDesc[buff].reg[0] = (uint32_t) &m_rxBuffer[buff][0];
    8cf2:	f8c4 c090 	str.w	ip, [r4, #144]	; 0x90
    8cf6:	f8c4 10e0 	str.w	r1, [r4, #224]	; 0xe0
    m_rxDesc[RX_BUFF_CNT - 1].bit.WRAP = 1;
    8cfa:	f884 e0e0 	strb.w	lr, [r4, #224]	; 0xe0
        m_rxDesc[buff].reg[0] = (uint32_t) &m_rxBuffer[buff][0];
    8cfe:	f504 6195 	add.w	r1, r4, #1192	; 0x4a8
    8d02:	f504 6ea5 	add.w	lr, r4, #1320	; 0x528
    8d06:	f8c4 10a0 	str.w	r1, [r4, #160]	; 0xa0
    8d0a:	f8c4 e0a8 	str.w	lr, [r4, #168]	; 0xa8
    8d0e:	f504 61b5 	add.w	r1, r4, #1448	; 0x5a8
    8d12:	f504 6ec5 	add.w	lr, r4, #1576	; 0x628
    8d16:	f8c4 10b0 	str.w	r1, [r4, #176]	; 0xb0
    8d1a:	f8c4 e0b8 	str.w	lr, [r4, #184]	; 0xb8
    8d1e:	f504 61d5 	add.w	r1, r4, #1704	; 0x6a8
    8d22:	f504 6ee5 	add.w	lr, r4, #1832	; 0x728
    8d26:	f8c4 10c0 	str.w	r1, [r4, #192]	; 0xc0
    8d2a:	f8c4 e0c8 	str.w	lr, [r4, #200]	; 0xc8
    8d2e:	f504 61f5 	add.w	r1, r4, #1960	; 0x7a8
    8d32:	f604 0e28 	addw	lr, r4, #2088	; 0x828
    8d36:	f8c4 10d0 	str.w	r1, [r4, #208]	; 0xd0
    8d3a:	f8c4 e0d8 	str.w	lr, [r4, #216]	; 0xd8
        m_txDesc[buff].reg[0] = (uint32_t) &m_txBuffer[buff][0];
    8d3e:	f604 1128 	addw	r1, r4, #2344	; 0x928
        m_txDesc[buff].bit.OWN = 1;
    8d42:	f04f 0e80 	mov.w	lr, #128	; 0x80
        m_txDesc[buff].reg[1] = 0;
    8d46:	f8c4 30ec 	str.w	r3, [r4, #236]	; 0xec
        m_txDesc[buff].reg[0] = (uint32_t) &m_txBuffer[buff][0];
    8d4a:	f8c4 10e8 	str.w	r1, [r4, #232]	; 0xe8
        m_txDesc[buff].bit.OWN = 1;
    8d4e:	f884 e0ef 	strb.w	lr, [r4, #239]	; 0xef
        m_txDesc[buff].bit.LB = 1;
    8d52:	4671      	mov	r1, lr
        m_txDesc[buff].reg[0] = (uint32_t) &m_txBuffer[buff][0];
    8d54:	f504 569a 	add.w	r6, r4, #4928	; 0x1340
    8d58:	f504 6e33 	add.w	lr, r4, #2864	; 0xb30
    8d5c:	f504 55aa 	add.w	r5, r4, #5440	; 0x1540
        m_txDesc[buff].reg[1] = 0;
    8d60:	f8c4 30f4 	str.w	r3, [r4, #244]	; 0xf4
        m_txDesc[buff].reg[0] = (uint32_t) &m_txBuffer[buff][0];
    8d64:	3610      	adds	r6, #16
    8d66:	3518      	adds	r5, #24
        m_txDesc[buff].bit.LB = 1;
    8d68:	f884 10ed 	strb.w	r1, [r4, #237]	; 0xed
        m_txDesc[buff].reg[0] = (uint32_t) &m_txBuffer[buff][0];
    8d6c:	f8c4 e0f0 	str.w	lr, [r4, #240]	; 0xf0
        m_txDesc[buff].bit.OWN = 1;
    8d70:	f884 10f7 	strb.w	r1, [r4, #247]	; 0xf7
        m_txDesc[buff].bit.LB = 1;
    8d74:	468e      	mov	lr, r1
        m_txDesc[buff].reg[0] = (uint32_t) &m_txBuffer[buff][0];
    8d76:	f504 578a 	add.w	r7, r4, #4416	; 0x1140
    8d7a:	f604 5138 	addw	r1, r4, #3384	; 0xd38
        m_rxDesc[buff].reg[0] = (uint32_t) &m_rxBuffer[buff][0];
    8d7e:	f504 6c85 	add.w	ip, r4, #1064	; 0x428
        m_txDesc[buff].bit.OWN = 1;
    8d82:	46f1      	mov	r9, lr
        m_txDesc[buff].reg[0] = (uint32_t) &m_txBuffer[buff][0];
    8d84:	3708      	adds	r7, #8
        m_rxDesc[buff].reg[1] = 0;
    8d86:	f8c4 3094 	str.w	r3, [r4, #148]	; 0x94
    8d8a:	f8c4 309c 	str.w	r3, [r4, #156]	; 0x9c
    8d8e:	f8c4 30a4 	str.w	r3, [r4, #164]	; 0xa4
    8d92:	f8c4 30ac 	str.w	r3, [r4, #172]	; 0xac
    8d96:	f8c4 30b4 	str.w	r3, [r4, #180]	; 0xb4
    8d9a:	f8c4 30bc 	str.w	r3, [r4, #188]	; 0xbc
    8d9e:	f8c4 30c4 	str.w	r3, [r4, #196]	; 0xc4
    8da2:	f8c4 30cc 	str.w	r3, [r4, #204]	; 0xcc
    8da6:	f8c4 30d4 	str.w	r3, [r4, #212]	; 0xd4
    8daa:	f8c4 30dc 	str.w	r3, [r4, #220]	; 0xdc
    8dae:	f8c4 30e4 	str.w	r3, [r4, #228]	; 0xe4
    m_rxBuffIndex = 0;
    8db2:	f884 3062 	strb.w	r3, [r4, #98]	; 0x62
        m_txDesc[buff].bit.LB = 1;
    8db6:	f884 e0f5 	strb.w	lr, [r4, #245]	; 0xf5
        m_txDesc[buff].reg[0] = (uint32_t) &m_txBuffer[buff][0];
    8dba:	f8c4 10f8 	str.w	r1, [r4, #248]	; 0xf8
        m_rxDesc[buff].reg[0] = (uint32_t) &m_rxBuffer[buff][0];
    8dbe:	f8c4 c098 	str.w	ip, [r4, #152]	; 0x98
    m_txDesc[TX_BUFF_CNT - 1].bit.WRAP = 1;
    8dc2:	21c0      	movs	r1, #192	; 0xc0
        m_txDesc[buff].reg[1] = 0;
    8dc4:	f8c4 30fc 	str.w	r3, [r4, #252]	; 0xfc
        m_txDesc[buff].reg[0] = (uint32_t) &m_txBuffer[buff][0];
    8dc8:	f504 6874 	add.w	r8, r4, #3904	; 0xf40
        m_txDesc[buff].reg[1] = 0;
    8dcc:	f8c4 3104 	str.w	r3, [r4, #260]	; 0x104
    8dd0:	f8c4 310c 	str.w	r3, [r4, #268]	; 0x10c
    8dd4:	f8c4 3114 	str.w	r3, [r4, #276]	; 0x114
    8dd8:	f8c4 311c 	str.w	r3, [r4, #284]	; 0x11c
    8ddc:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
    m_txBuffIndex = 0;
    8de0:	f8a4 3064 	strh.w	r3, [r4, #100]	; 0x64
        m_txDesc[buff].reg[0] = (uint32_t) &m_txBuffer[buff][0];
    8de4:	f8c4 6110 	str.w	r6, [r4, #272]	; 0x110
    8de8:	f8c4 5118 	str.w	r5, [r4, #280]	; 0x118
        m_txDesc[buff].bit.OWN = 1;
    8dec:	f884 e0ff 	strb.w	lr, [r4, #255]	; 0xff
        m_txDesc[buff].bit.LB = 1;
    8df0:	f884 e0fd 	strb.w	lr, [r4, #253]	; 0xfd
        m_txDesc[buff].bit.OWN = 1;
    8df4:	f884 e107 	strb.w	lr, [r4, #263]	; 0x107
        m_txDesc[buff].bit.LB = 1;
    8df8:	f884 e105 	strb.w	lr, [r4, #261]	; 0x105
        m_txDesc[buff].bit.OWN = 1;
    8dfc:	f884 e10f 	strb.w	lr, [r4, #271]	; 0x10f
    8e00:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
        m_txDesc[buff].reg[0] = (uint32_t) &m_txBuffer[buff][0];
    8e04:	f504 5ebb 	add.w	lr, r4, #5984	; 0x1760
    GMAC->TBQB.reg = (uint32_t) &m_txDesc;
    8e08:	f104 05e8 	add.w	r5, r4, #232	; 0xe8
    GMAC->RBQB.reg = (uint32_t) &m_rxDesc;
    8e0c:	f104 0668 	add.w	r6, r4, #104	; 0x68
        m_txDesc[buff].reg[0] = (uint32_t) &m_txBuffer[buff][0];
    8e10:	f8c4 7108 	str.w	r7, [r4, #264]	; 0x108
    m_txDesc[TX_BUFF_CNT - 1].bit.WRAP = 1;
    8e14:	f884 1127 	strb.w	r1, [r4, #295]	; 0x127
        m_txDesc[buff].reg[0] = (uint32_t) &m_txBuffer[buff][0];
    8e18:	f8c4 8100 	str.w	r8, [r4, #256]	; 0x100
        m_txDesc[buff].bit.LB = 1;
    8e1c:	f884 910d 	strb.w	r9, [r4, #269]	; 0x10d
        m_txDesc[buff].bit.OWN = 1;
    8e20:	f884 9117 	strb.w	r9, [r4, #279]	; 0x117
        m_txDesc[buff].bit.LB = 1;
    8e24:	f884 9115 	strb.w	r9, [r4, #277]	; 0x115
        m_txDesc[buff].bit.OWN = 1;
    8e28:	f884 911f 	strb.w	r9, [r4, #287]	; 0x11f
        m_txDesc[buff].bit.LB = 1;
    8e2c:	f884 911d 	strb.w	r9, [r4, #285]	; 0x11d
        m_txDesc[buff].reg[0] = (uint32_t) &m_txBuffer[buff][0];
    8e30:	f8c4 e120 	str.w	lr, [r4, #288]	; 0x120
        m_txDesc[buff].bit.LB = 1;
    8e34:	f884 9125 	strb.w	r9, [r4, #293]	; 0x125
    GMAC->TBQB.reg = (uint32_t) &m_txDesc;
    8e38:	61d5      	str	r5, [r2, #28]
    GMAC->RBQB.reg = (uint32_t) &m_rxDesc;
    8e3a:	6196      	str	r6, [r2, #24]
    8e3c:	f8c0 3088 	str.w	r3, [r0, #136]	; 0x88
  NVIC->ICPR[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
    8e40:	f8c0 3188 	str.w	r3, [r0, #392]	; 0x188
  NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
    8e44:	6083      	str	r3, [r0, #8]
    ConfigureGpioPerGmac(m_portPhyTxen, m_pinPhyTxen);
    8e46:	6823      	ldr	r3, [r4, #0]
    8e48:	6861      	ldr	r1, [r4, #4]

/**
    Setup a single GMAC GPIO.
**/
void EthernetManager::ConfigureGpioPerGmac(uint32_t port, uint32_t pin) {
    PMUX_ENABLE(port, pin);
    8e4a:	01db      	lsls	r3, r3, #7
    8e4c:	f103 4382 	add.w	r3, r3, #1090519040	; 0x41000000
    8e50:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
    8e54:	1858      	adds	r0, r3, r1
    PMUX_SELECTION(port, pin, PER_GMAC);
    8e56:	eb03 0351 	add.w	r3, r3, r1, lsr #1
    PMUX_ENABLE(port, pin);
    8e5a:	f890 2040 	ldrb.w	r2, [r0, #64]	; 0x40
    8e5e:	f042 0201 	orr.w	r2, r2, #1
    8e62:	f880 2040 	strb.w	r2, [r0, #64]	; 0x40
    PMUX_SELECTION(port, pin, PER_GMAC);
    8e66:	f893 2030 	ldrb.w	r2, [r3, #48]	; 0x30
    8e6a:	f011 0f01 	tst.w	r1, #1
    8e6e:	f04f 010b 	mov.w	r1, #11
    8e72:	bf14      	ite	ne
    8e74:	f361 1207 	bfine	r2, r1, #4, #4
    8e78:	f361 0203 	bfieq	r2, r1, #0, #4
    8e7c:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
    ConfigureGpioPerGmac(m_portPhyTxd0, m_pinPhyTxd0);
    8e80:	68a3      	ldr	r3, [r4, #8]
    8e82:	68e2      	ldr	r2, [r4, #12]
    PMUX_ENABLE(port, pin);
    8e84:	01db      	lsls	r3, r3, #7
    8e86:	f103 4382 	add.w	r3, r3, #1090519040	; 0x41000000
    8e8a:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
    8e8e:	1898      	adds	r0, r3, r2
    PMUX_SELECTION(port, pin, PER_GMAC);
    8e90:	eb03 0352 	add.w	r3, r3, r2, lsr #1
    PMUX_ENABLE(port, pin);
    8e94:	f890 1040 	ldrb.w	r1, [r0, #64]	; 0x40
    8e98:	f041 0101 	orr.w	r1, r1, #1
    8e9c:	f880 1040 	strb.w	r1, [r0, #64]	; 0x40
    PMUX_SELECTION(port, pin, PER_GMAC);
    8ea0:	f012 0f01 	tst.w	r2, #1
    8ea4:	f893 2030 	ldrb.w	r2, [r3, #48]	; 0x30
    8ea8:	f04f 010b 	mov.w	r1, #11
    8eac:	bf14      	ite	ne
    8eae:	f361 1207 	bfine	r2, r1, #4, #4
    8eb2:	f361 0203 	bfieq	r2, r1, #0, #4
    8eb6:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
    ConfigureGpioPerGmac(m_portPhyTxd1, m_pinPhyTxd1);
    8eba:	6923      	ldr	r3, [r4, #16]
    8ebc:	6962      	ldr	r2, [r4, #20]
    PMUX_ENABLE(port, pin);
    8ebe:	01db      	lsls	r3, r3, #7
    8ec0:	f103 4382 	add.w	r3, r3, #1090519040	; 0x41000000
    8ec4:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
    8ec8:	1898      	adds	r0, r3, r2
    PMUX_SELECTION(port, pin, PER_GMAC);
    8eca:	eb03 0352 	add.w	r3, r3, r2, lsr #1
    PMUX_ENABLE(port, pin);
    8ece:	f890 1040 	ldrb.w	r1, [r0, #64]	; 0x40
    8ed2:	f041 0101 	orr.w	r1, r1, #1
    8ed6:	f880 1040 	strb.w	r1, [r0, #64]	; 0x40
    PMUX_SELECTION(port, pin, PER_GMAC);
    8eda:	f012 0f01 	tst.w	r2, #1
    8ede:	f893 2030 	ldrb.w	r2, [r3, #48]	; 0x30
    8ee2:	f04f 010b 	mov.w	r1, #11
    8ee6:	bf14      	ite	ne
    8ee8:	f361 1207 	bfine	r2, r1, #4, #4
    8eec:	f361 0203 	bfieq	r2, r1, #0, #4
    8ef0:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
    ConfigureGpioPerGmac(m_portPhyRxd0, m_pinPhyRxd0);
    8ef4:	69a3      	ldr	r3, [r4, #24]
    8ef6:	69e2      	ldr	r2, [r4, #28]
    PMUX_ENABLE(port, pin);
    8ef8:	01db      	lsls	r3, r3, #7
    8efa:	f103 4382 	add.w	r3, r3, #1090519040	; 0x41000000
    8efe:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
    8f02:	1898      	adds	r0, r3, r2
    PMUX_SELECTION(port, pin, PER_GMAC);
    8f04:	eb03 0352 	add.w	r3, r3, r2, lsr #1
    PMUX_ENABLE(port, pin);
    8f08:	f890 1040 	ldrb.w	r1, [r0, #64]	; 0x40
    8f0c:	f041 0101 	orr.w	r1, r1, #1
    8f10:	f880 1040 	strb.w	r1, [r0, #64]	; 0x40
    PMUX_SELECTION(port, pin, PER_GMAC);
    8f14:	f012 0f01 	tst.w	r2, #1
    8f18:	f893 2030 	ldrb.w	r2, [r3, #48]	; 0x30
    8f1c:	f04f 010b 	mov.w	r1, #11
    8f20:	bf14      	ite	ne
    8f22:	f361 1207 	bfine	r2, r1, #4, #4
    8f26:	f361 0203 	bfieq	r2, r1, #0, #4
    8f2a:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
    ConfigureGpioPerGmac(m_portPhyRxd1, m_pinPhyRxd1);
    8f2e:	6a23      	ldr	r3, [r4, #32]
    8f30:	6a62      	ldr	r2, [r4, #36]	; 0x24
    PMUX_ENABLE(port, pin);
    8f32:	01db      	lsls	r3, r3, #7
    8f34:	f103 4382 	add.w	r3, r3, #1090519040	; 0x41000000
    8f38:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
    8f3c:	1898      	adds	r0, r3, r2
    PMUX_SELECTION(port, pin, PER_GMAC);
    8f3e:	eb03 0352 	add.w	r3, r3, r2, lsr #1
    PMUX_ENABLE(port, pin);
    8f42:	f890 1040 	ldrb.w	r1, [r0, #64]	; 0x40
    8f46:	f041 0101 	orr.w	r1, r1, #1
    8f4a:	f880 1040 	strb.w	r1, [r0, #64]	; 0x40
    PMUX_SELECTION(port, pin, PER_GMAC);
    8f4e:	f012 0f01 	tst.w	r2, #1
    8f52:	f893 2030 	ldrb.w	r2, [r3, #48]	; 0x30
    8f56:	f04f 010b 	mov.w	r1, #11
    8f5a:	bf14      	ite	ne
    8f5c:	f361 1207 	bfine	r2, r1, #4, #4
    8f60:	f361 0203 	bfieq	r2, r1, #0, #4
    8f64:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
    ConfigureGpioPerGmac(m_portPhyRxer, m_pinPhyRxer);
    8f68:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    8f6a:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
    PMUX_ENABLE(port, pin);
    8f6c:	01db      	lsls	r3, r3, #7
    8f6e:	f103 4382 	add.w	r3, r3, #1090519040	; 0x41000000
    8f72:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
    8f76:	1898      	adds	r0, r3, r2
    PMUX_SELECTION(port, pin, PER_GMAC);
    8f78:	eb03 0352 	add.w	r3, r3, r2, lsr #1
    PMUX_ENABLE(port, pin);
    8f7c:	f890 1040 	ldrb.w	r1, [r0, #64]	; 0x40
    8f80:	f041 0101 	orr.w	r1, r1, #1
    8f84:	f880 1040 	strb.w	r1, [r0, #64]	; 0x40
    PMUX_SELECTION(port, pin, PER_GMAC);
    8f88:	f012 0f01 	tst.w	r2, #1
    8f8c:	f893 2030 	ldrb.w	r2, [r3, #48]	; 0x30
    8f90:	f04f 010b 	mov.w	r1, #11
    8f94:	bf14      	ite	ne
    8f96:	f361 1207 	bfine	r2, r1, #4, #4
    8f9a:	f361 0203 	bfieq	r2, r1, #0, #4
    8f9e:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
    ConfigureGpioPerGmac(m_portPhyRxdv, m_pinPhyRxdv);
    8fa2:	6b23      	ldr	r3, [r4, #48]	; 0x30
    8fa4:	6b62      	ldr	r2, [r4, #52]	; 0x34
    PMUX_ENABLE(port, pin);
    8fa6:	01db      	lsls	r3, r3, #7
    8fa8:	f103 4382 	add.w	r3, r3, #1090519040	; 0x41000000
    8fac:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
    8fb0:	1898      	adds	r0, r3, r2
    PMUX_SELECTION(port, pin, PER_GMAC);
    8fb2:	eb03 0352 	add.w	r3, r3, r2, lsr #1
    PMUX_ENABLE(port, pin);
    8fb6:	f890 1040 	ldrb.w	r1, [r0, #64]	; 0x40
    8fba:	f041 0101 	orr.w	r1, r1, #1
    8fbe:	e003      	b.n	8fc8 <_ZN9ClearCore15EthernetManager10InitializeEv+0x398>
    8fc0:	42000800 	.word	0x42000800
    8fc4:	e000e100 	.word	0xe000e100
    8fc8:	f880 1040 	strb.w	r1, [r0, #64]	; 0x40
    PMUX_SELECTION(port, pin, PER_GMAC);
    8fcc:	f012 0f01 	tst.w	r2, #1
    8fd0:	f893 2030 	ldrb.w	r2, [r3, #48]	; 0x30
    8fd4:	f04f 010b 	mov.w	r1, #11
    8fd8:	bf14      	ite	ne
    8fda:	f361 1207 	bfine	r2, r1, #4, #4
    8fde:	f361 0203 	bfieq	r2, r1, #0, #4
    8fe2:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
    ConfigureGpioPerGmac(m_portPhyMdio, m_pinPhyMdio);
    8fe6:	6ba3      	ldr	r3, [r4, #56]	; 0x38
    8fe8:	6be2      	ldr	r2, [r4, #60]	; 0x3c
    PMUX_ENABLE(port, pin);
    8fea:	01db      	lsls	r3, r3, #7
    8fec:	f103 4382 	add.w	r3, r3, #1090519040	; 0x41000000
    8ff0:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
    8ff4:	1898      	adds	r0, r3, r2
    PMUX_SELECTION(port, pin, PER_GMAC);
    8ff6:	eb03 0352 	add.w	r3, r3, r2, lsr #1
    PMUX_ENABLE(port, pin);
    8ffa:	f890 1040 	ldrb.w	r1, [r0, #64]	; 0x40
    8ffe:	f041 0101 	orr.w	r1, r1, #1
    9002:	f880 1040 	strb.w	r1, [r0, #64]	; 0x40
    PMUX_SELECTION(port, pin, PER_GMAC);
    9006:	f012 0f01 	tst.w	r2, #1
    900a:	f893 2030 	ldrb.w	r2, [r3, #48]	; 0x30
    900e:	f04f 010b 	mov.w	r1, #11
    9012:	bf14      	ite	ne
    9014:	f361 1207 	bfine	r2, r1, #4, #4
    9018:	f361 0203 	bfieq	r2, r1, #0, #4
    901c:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
    ConfigureGpioPerGmac(m_portPhyMdc, m_pinPhyMdc);
    9020:	6c23      	ldr	r3, [r4, #64]	; 0x40
    9022:	6c62      	ldr	r2, [r4, #68]	; 0x44
    PMUX_ENABLE(port, pin);
    9024:	01db      	lsls	r3, r3, #7
    9026:	f103 4382 	add.w	r3, r3, #1090519040	; 0x41000000
    902a:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
    902e:	1898      	adds	r0, r3, r2
    PMUX_SELECTION(port, pin, PER_GMAC);
    9030:	eb03 0352 	add.w	r3, r3, r2, lsr #1
    PMUX_ENABLE(port, pin);
    9034:	f890 1040 	ldrb.w	r1, [r0, #64]	; 0x40
    9038:	f041 0101 	orr.w	r1, r1, #1
    903c:	f880 1040 	strb.w	r1, [r0, #64]	; 0x40
    PMUX_SELECTION(port, pin, PER_GMAC);
    9040:	f012 0f01 	tst.w	r2, #1
    9044:	f893 2030 	ldrb.w	r2, [r3, #48]	; 0x30
    9048:	f04f 010b 	mov.w	r1, #11
    904c:	bf14      	ite	ne
    904e:	f361 1207 	bfine	r2, r1, #4, #4
    9052:	f361 0203 	bfieq	r2, r1, #0, #4
    9056:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
    ConfigureGpioPerGmac(m_portPhyTxclk, m_pinPhyTxclk);
    905a:	6ca3      	ldr	r3, [r4, #72]	; 0x48
    905c:	6ce2      	ldr	r2, [r4, #76]	; 0x4c
    PMUX_ENABLE(port, pin);
    905e:	01db      	lsls	r3, r3, #7
    9060:	f103 4382 	add.w	r3, r3, #1090519040	; 0x41000000
    9064:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
    9068:	1898      	adds	r0, r3, r2
    PMUX_SELECTION(port, pin, PER_GMAC);
    906a:	eb03 0352 	add.w	r3, r3, r2, lsr #1
    PMUX_ENABLE(port, pin);
    906e:	f890 1040 	ldrb.w	r1, [r0, #64]	; 0x40
    9072:	f041 0101 	orr.w	r1, r1, #1
    9076:	f880 1040 	strb.w	r1, [r0, #64]	; 0x40
    PMUX_SELECTION(port, pin, PER_GMAC);
    907a:	f012 0f01 	tst.w	r2, #1
    907e:	f893 2030 	ldrb.w	r2, [r3, #48]	; 0x30
    9082:	f04f 010b 	mov.w	r1, #11
    9086:	bf14      	ite	ne
    9088:	f361 1207 	bfine	r2, r1, #4, #4
    908c:	f361 0203 	bfieq	r2, r1, #0, #4
    9090:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
    PIN_CONFIGURATION(m_portPhyInt, m_pinPhyInt, PORT_PINCFG_INEN);
    9094:	6d23      	ldr	r3, [r4, #80]	; 0x50
    9096:	6d61      	ldr	r1, [r4, #84]	; 0x54
    9098:	01db      	lsls	r3, r3, #7
    909a:	f103 4282 	add.w	r2, r3, #1090519040	; 0x41000000
    909e:	f502 4200 	add.w	r2, r2, #32768	; 0x8000
    90a2:	1850      	adds	r0, r2, r1
    90a4:	2702      	movs	r7, #2
    PMUX_SELECTION(m_portPhyInt, m_pinPhyInt, PER_EXTINT);
    90a6:	eb02 0251 	add.w	r2, r2, r1, lsr #1
    PIN_CONFIGURATION(m_portPhyInt, m_pinPhyInt, PORT_PINCFG_INEN);
    90aa:	f880 7040 	strb.w	r7, [r0, #64]	; 0x40
    PMUX_SELECTION(m_portPhyInt, m_pinPhyInt, PER_EXTINT);
    90ae:	f892 0030 	ldrb.w	r0, [r2, #48]	; 0x30
    PMUX_ENABLE(m_portPhyInt, m_pinPhyInt);
    90b2:	f103 4382 	add.w	r3, r3, #1090519040	; 0x41000000
    PMUX_SELECTION(m_portPhyInt, m_pinPhyInt, PER_EXTINT);
    90b6:	f011 0701 	ands.w	r7, r1, #1
    PMUX_ENABLE(m_portPhyInt, m_pinPhyInt);
    90ba:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
    90be:	440b      	add	r3, r1
    PMUX_SELECTION(m_portPhyInt, m_pinPhyInt, PER_EXTINT);
    90c0:	bf14      	ite	ne
    90c2:	f36f 1007 	bfcne	r0, #4, #4
    90c6:	f367 0003 	bfieq	r0, r7, #0, #4
    90ca:	f882 0030 	strb.w	r0, [r2, #48]	; 0x30
    PMUX_ENABLE(m_portPhyInt, m_pinPhyInt);
    90ce:	f893 0040 	ldrb.w	r0, [r3, #64]	; 0x40
    GMAC->IER.bit.TCOMP = 1;    // Transmit complete
    90d2:	4932      	ldr	r1, [pc, #200]	; (919c <_ZN9ClearCore15EthernetManager10InitializeEv+0x56c>)
    EIC->CTRLA.bit.ENABLE = 0;
    90d4:	4a32      	ldr	r2, [pc, #200]	; (91a0 <_ZN9ClearCore15EthernetManager10InitializeEv+0x570>)
    PMUX_ENABLE(m_portPhyInt, m_pinPhyInt);
    90d6:	f040 0001 	orr.w	r0, r0, #1
    90da:	f883 0040 	strb.w	r0, [r3, #64]	; 0x40
    PORT->Group[m_portPhyInt].PINCFG[m_pinPhyInt].bit.INEN = 1;
    90de:	f893 0040 	ldrb.w	r0, [r3, #64]	; 0x40
    90e2:	f040 0002 	orr.w	r0, r0, #2
    90e6:	f883 0040 	strb.w	r0, [r3, #64]	; 0x40
    GMAC->IER.bit.TCOMP = 1;    // Transmit complete
    90ea:	6a8b      	ldr	r3, [r1, #40]	; 0x28
    90ec:	f043 0380 	orr.w	r3, r3, #128	; 0x80
    90f0:	628b      	str	r3, [r1, #40]	; 0x28
    GMAC->IER.bit.RCOMP = 1;    // Receive complete
    90f2:	6a8b      	ldr	r3, [r1, #40]	; 0x28
    90f4:	f043 0302 	orr.w	r3, r3, #2
    90f8:	628b      	str	r3, [r1, #40]	; 0x28
    EIC->CTRLA.bit.ENABLE = 0;
    90fa:	7813      	ldrb	r3, [r2, #0]
    90fc:	f36f 0341 	bfc	r3, #1, #1
    9100:	7013      	strb	r3, [r2, #0]
    SYNCBUSY_WAIT(EIC, EIC_SYNCBUSY_ENABLE);
    9102:	6853      	ldr	r3, [r2, #4]
    9104:	0799      	lsls	r1, r3, #30
    9106:	d4fc      	bmi.n	9102 <_ZN9ClearCore15EthernetManager10InitializeEv+0x4d2>
    uint32_t shiftAmt = 4 * (m_phyExtInt % 8);
    9108:	6da0      	ldr	r0, [r4, #88]	; 0x58
    SYNCBUSY_WAIT(EIC, EIC_SYNCBUSY_ENABLE);
    910a:	4925      	ldr	r1, [pc, #148]	; (91a0 <_ZN9ClearCore15EthernetManager10InitializeEv+0x570>)
    EIC->CONFIG[m_phyExtInt / 8].reg &= (uint32_t) ~(0xf << shiftAmt);
    910c:	08c3      	lsrs	r3, r0, #3
    910e:	009b      	lsls	r3, r3, #2
    9110:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
    EIC->INTENSET.reg = (1UL << m_phyExtInt);
    9114:	2701      	movs	r7, #1
    9116:	f503 5320 	add.w	r3, r3, #10240	; 0x2800
    911a:	4087      	lsls	r7, r0
    911c:	6117      	str	r7, [r2, #16]
    uint32_t shiftAmt = 4 * (m_phyExtInt % 8);
    911e:	f000 0007 	and.w	r0, r0, #7
    EIC->CONFIG[m_phyExtInt / 8].reg &= (uint32_t) ~(0xf << shiftAmt);
    9122:	69df      	ldr	r7, [r3, #28]
    uint32_t shiftAmt = 4 * (m_phyExtInt % 8);
    9124:	0080      	lsls	r0, r0, #2
    EIC->CONFIG[m_phyExtInt / 8].reg &= (uint32_t) ~(0xf << shiftAmt);
    9126:	f04f 0e0f 	mov.w	lr, #15
    912a:	fa0e fe00 	lsl.w	lr, lr, r0
    912e:	ea27 070e 	bic.w	r7, r7, lr
    9132:	61df      	str	r7, [r3, #28]
        (EIC_CONFIG_SENSE0_LOW_Val << shiftAmt);
    9134:	f8d3 e01c 	ldr.w	lr, [r3, #28]
    9138:	2705      	movs	r7, #5
    913a:	fa07 f000 	lsl.w	r0, r7, r0
    913e:	ea40 000e 	orr.w	r0, r0, lr
    EIC->CONFIG[m_phyExtInt / 8].reg |=
    9142:	61d8      	str	r0, [r3, #28]
    EIC->CTRLA.bit.ENABLE = 1;
    9144:	7813      	ldrb	r3, [r2, #0]
    9146:	f043 0302 	orr.w	r3, r3, #2
    914a:	7013      	strb	r3, [r2, #0]
    SYNCBUSY_WAIT(EIC, EIC_SYNCBUSY_ENABLE);
    914c:	684b      	ldr	r3, [r1, #4]
    914e:	079b      	lsls	r3, r3, #30
    9150:	d4fc      	bmi.n	914c <_ZN9ClearCore15EthernetManager10InitializeEv+0x51c>
    PhyInitialize();
    9152:	4620      	mov	r0, r4
    9154:	f7ff fce4 	bl	8b20 <_ZN9ClearCore15EthernetManager13PhyInitializeEv>
    m_ethernetInterface.rxDesc = &m_rxDesc[0];
    9158:	f641 106c 	movw	r0, #6508	; 0x196c
    m_ethernetInterface.txDesc = &m_txDesc[0];
    915c:	f641 1170 	movw	r1, #6512	; 0x1970
    m_ethernetInterface.rxBuffIndex = &m_rxBuffIndex;
    9160:	f641 1774 	movw	r7, #6516	; 0x1974
    NvmMgr.MacAddress(m_ethernetInterface.mac);
    9164:	4b0f      	ldr	r3, [pc, #60]	; (91a4 <_ZN9ClearCore15EthernetManager10InitializeEv+0x574>)
    m_ethernetInterface.rxDesc = &m_rxDesc[0];
    9166:	5026      	str	r6, [r4, r0]
    m_ethernetInterface.txBuffIndex = &m_txBuffIndex;
    9168:	f641 1278 	movw	r2, #6520	; 0x1978
    m_ethernetInterface.txDesc = &m_txDesc[0];
    916c:	5065      	str	r5, [r4, r1]
    m_ethernetInterface.txBuffIndex = &m_txBuffIndex;
    916e:	f104 0064 	add.w	r0, r4, #100	; 0x64
    m_ethernetInterface.rxBuffIndex = &m_rxBuffIndex;
    9172:	f104 0662 	add.w	r6, r4, #98	; 0x62
    NvmMgr.MacAddress(m_ethernetInterface.mac);
    9176:	f504 51cb 	add.w	r1, r4, #6496	; 0x1960
    m_ethernetInterface.rxBuffIndex = &m_rxBuffIndex;
    917a:	51e6      	str	r6, [r4, r7]
    NvmMgr.MacAddress(m_ethernetInterface.mac);
    917c:	311c      	adds	r1, #28
    m_ethernetInterface.txBuffIndex = &m_txBuffIndex;
    917e:	50a0      	str	r0, [r4, r2]
    NvmMgr.MacAddress(m_ethernetInterface.mac);
    9180:	6818      	ldr	r0, [r3, #0]
}
    9182:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    NvmMgr.MacAddress(m_ethernetInterface.mac);
    9186:	f008 bef5 	b.w	11f74 <_ZN9ClearCore10NvmManager10MacAddressEPh>
    GMAC->NCR.bit.TXEN = enable ? 1 : 0;
    918a:	681a      	ldr	r2, [r3, #0]
    918c:	f36f 02c3 	bfc	r2, #3, #1
    9190:	601a      	str	r2, [r3, #0]
    GMAC->NCR.bit.RXEN = enable ? 1 : 0;
    9192:	681a      	ldr	r2, [r3, #0]
    9194:	f36f 0282 	bfc	r2, #2, #1
    9198:	601a      	str	r2, [r3, #0]
    919a:	e554      	b.n	8c46 <_ZN9ClearCore15EthernetManager10InitializeEv+0x16>
    919c:	42000800 	.word	0x42000800
    91a0:	40002800 	.word	0x40002800
    91a4:	20001fd4 	.word	0x20001fd4

000091a8 <_ZN9ClearCore15EthernetManager13IrqHandlerPhyEv>:
void EthernetManager::IrqHandlerPhy() {
    91a8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    EIC->INTFLAG.reg = 1UL << m_phyExtInt;
    91ac:	6d85      	ldr	r5, [r0, #88]	; 0x58
    91ae:	4ca1      	ldr	r4, [pc, #644]	; (9434 <_ZN9ClearCore15EthernetManager13IrqHandlerPhyEv+0x28c>)
    GMAC->NCR.bit.MPE = 1;
    91b0:	4ba1      	ldr	r3, [pc, #644]	; (9438 <_ZN9ClearCore15EthernetManager13IrqHandlerPhyEv+0x290>)
    GMAC->MAN.reg = GMAC_MAN_CLTTO |   // Clause 22 or 45 operation (1 is 22)
    91b2:	49a2      	ldr	r1, [pc, #648]	; (943c <_ZN9ClearCore15EthernetManager13IrqHandlerPhyEv+0x294>)
    EIC->INTFLAG.reg = 1UL << m_phyExtInt;
    91b4:	2201      	movs	r2, #1
    91b6:	40aa      	lsls	r2, r5
    91b8:	6162      	str	r2, [r4, #20]
    GMAC->NCR.bit.MPE = 1;
    91ba:	681a      	ldr	r2, [r3, #0]
    91bc:	f042 0210 	orr.w	r2, r2, #16
    91c0:	601a      	str	r2, [r3, #0]
    while (!((GMAC->NSR.reg & GMAC_NSR_IDLE) >> GMAC_NSR_IDLE_Pos)) {
    91c2:	461a      	mov	r2, r3
    GMAC->MAN.reg = GMAC_MAN_CLTTO |   // Clause 22 or 45 operation (1 is 22)
    91c4:	6359      	str	r1, [r3, #52]	; 0x34
    while (!((GMAC->NSR.reg & GMAC_NSR_IDLE) >> GMAC_NSR_IDLE_Pos)) {
    91c6:	6893      	ldr	r3, [r2, #8]
    91c8:	075d      	lsls	r5, r3, #29
    91ca:	d5fc      	bpl.n	91c6 <_ZN9ClearCore15EthernetManager13IrqHandlerPhyEv+0x1e>
    GMAC->NCR.bit.MPE = 0;
    91cc:	6813      	ldr	r3, [r2, #0]
    91ce:	f36f 1304 	bfc	r3, #4, #1
    91d2:	6013      	str	r3, [r2, #0]
    return GMAC_MAN_DATA(GMAC->MAN.reg);
    91d4:	6b51      	ldr	r1, [r2, #52]	; 0x34
    if (phyRegData & PHY_ICS_LU) {
    91d6:	07cc      	lsls	r4, r1, #31
    91d8:	d415      	bmi.n	9206 <_ZN9ClearCore15EthernetManager13IrqHandlerPhyEv+0x5e>
    if (phyRegData & PHY_ICS_LD) {
    91da:	074d      	lsls	r5, r1, #29
        m_phyLinkUp = false;
    91dc:	bf44      	itt	mi
    91de:	2300      	movmi	r3, #0
    91e0:	f880 305c 	strbmi.w	r3, [r0, #92]	; 0x5c
    if (phyRegData & PHY_ICS_RF) {
    91e4:	078c      	lsls	r4, r1, #30
    91e6:	d401      	bmi.n	91ec <_ZN9ClearCore15EthernetManager13IrqHandlerPhyEv+0x44>
    91e8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    bool enabled = (GMAC->NCR.bit.TXEN && GMAC->NCR.bit.RXEN);
    91ec:	4b92      	ldr	r3, [pc, #584]	; (9438 <_ZN9ClearCore15EthernetManager13IrqHandlerPhyEv+0x290>)
    91ee:	681a      	ldr	r2, [r3, #0]
        m_phyRemoteFault = true;
    91f0:	2101      	movs	r1, #1
    91f2:	f880 105d 	strb.w	r1, [r0, #93]	; 0x5d
    bool enabled = (GMAC->NCR.bit.TXEN && GMAC->NCR.bit.RXEN);
    91f6:	0711      	lsls	r1, r2, #28
    91f8:	d5f6      	bpl.n	91e8 <_ZN9ClearCore15EthernetManager13IrqHandlerPhyEv+0x40>
    91fa:	681a      	ldr	r2, [r3, #0]
    91fc:	0752      	lsls	r2, r2, #29
    91fe:	f100 8121 	bmi.w	9444 <_ZN9ClearCore15EthernetManager13IrqHandlerPhyEv+0x29c>
    9202:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        bool enabled = (GMAC->NCR.bit.TXEN == 1);
    9206:	6814      	ldr	r4, [r2, #0]
    bool enabled = (GMAC->NCR.bit.TXEN && GMAC->NCR.bit.RXEN);
    9208:	6813      	ldr	r3, [r2, #0]
        m_phyLinkUp = true;
    920a:	2501      	movs	r5, #1
    bool enabled = (GMAC->NCR.bit.TXEN && GMAC->NCR.bit.RXEN);
    920c:	071b      	lsls	r3, r3, #28
        bool enabled = (GMAC->NCR.bit.TXEN == 1);
    920e:	f3c4 04c0 	ubfx	r4, r4, #3, #1
        m_phyLinkUp = true;
    9212:	f880 505c 	strb.w	r5, [r0, #92]	; 0x5c
    bool enabled = (GMAC->NCR.bit.TXEN && GMAC->NCR.bit.RXEN);
    9216:	d56d      	bpl.n	92f4 <_ZN9ClearCore15EthernetManager13IrqHandlerPhyEv+0x14c>
    9218:	6813      	ldr	r3, [r2, #0]
    921a:	075f      	lsls	r7, r3, #29
    921c:	d56a      	bpl.n	92f4 <_ZN9ClearCore15EthernetManager13IrqHandlerPhyEv+0x14c>
    GMAC->NCR.bit.TXEN = enable ? 1 : 0;
    921e:	6813      	ldr	r3, [r2, #0]
    9220:	f36f 03c3 	bfc	r3, #3, #1
    9224:	6013      	str	r3, [r2, #0]
    GMAC->NCR.bit.RXEN = enable ? 1 : 0;
    9226:	6813      	ldr	r3, [r2, #0]
    9228:	f36f 0382 	bfc	r3, #2, #1
    922c:	6013      	str	r3, [r2, #0]
            m_txDesc[i].bit.OWN = 1;
    922e:	f890 e0f7 	ldrb.w	lr, [r0, #247]	; 0xf7
            m_txDesc[i].bit.LB = 1;
    9232:	f890 70f5 	ldrb.w	r7, [r0, #245]	; 0xf5
            m_txDesc[i].bit.OWN = 1;
    9236:	f890 60ff 	ldrb.w	r6, [r0, #255]	; 0xff
            m_txDesc[i].bit.LB = 1;
    923a:	f890 50fd 	ldrb.w	r5, [r0, #253]	; 0xfd
            m_txDesc[i].bit.OWN = 1;
    923e:	f890 2107 	ldrb.w	r2, [r0, #263]	; 0x107
            m_txDesc[i].bit.LB = 1;
    9242:	f890 3105 	ldrb.w	r3, [r0, #261]	; 0x105
            m_txDesc[i].bit.OWN = 1;
    9246:	f890 80ef 	ldrb.w	r8, [r0, #239]	; 0xef
            m_txDesc[i].bit.LB = 1;
    924a:	f890 c0ed 	ldrb.w	ip, [r0, #237]	; 0xed
            m_txDesc[i].bit.OWN = 1;
    924e:	f04e 0e80 	orr.w	lr, lr, #128	; 0x80
            m_txDesc[i].bit.LB = 1;
    9252:	f047 0780 	orr.w	r7, r7, #128	; 0x80
            m_txDesc[i].bit.OWN = 1;
    9256:	f046 0680 	orr.w	r6, r6, #128	; 0x80
            m_txDesc[i].bit.LB = 1;
    925a:	f045 0580 	orr.w	r5, r5, #128	; 0x80
            m_txDesc[i].bit.OWN = 1;
    925e:	f042 0280 	orr.w	r2, r2, #128	; 0x80
            m_txDesc[i].bit.LB = 1;
    9262:	f043 0380 	orr.w	r3, r3, #128	; 0x80
            m_txDesc[i].bit.OWN = 1;
    9266:	f880 e0f7 	strb.w	lr, [r0, #247]	; 0xf7
            m_txDesc[i].bit.LB = 1;
    926a:	f880 70f5 	strb.w	r7, [r0, #245]	; 0xf5
            m_txDesc[i].bit.OWN = 1;
    926e:	f890 e10f 	ldrb.w	lr, [r0, #271]	; 0x10f
            m_txDesc[i].bit.LB = 1;
    9272:	f890 710d 	ldrb.w	r7, [r0, #269]	; 0x10d
            m_txDesc[i].bit.OWN = 1;
    9276:	f880 60ff 	strb.w	r6, [r0, #255]	; 0xff
            m_txDesc[i].bit.LB = 1;
    927a:	f880 50fd 	strb.w	r5, [r0, #253]	; 0xfd
            m_txDesc[i].bit.OWN = 1;
    927e:	f890 6117 	ldrb.w	r6, [r0, #279]	; 0x117
            m_txDesc[i].bit.LB = 1;
    9282:	f890 5115 	ldrb.w	r5, [r0, #277]	; 0x115
            m_txDesc[i].bit.OWN = 1;
    9286:	f880 2107 	strb.w	r2, [r0, #263]	; 0x107
            m_txDesc[i].bit.LB = 1;
    928a:	f880 3105 	strb.w	r3, [r0, #261]	; 0x105
            m_txDesc[i].bit.OWN = 1;
    928e:	f890 211f 	ldrb.w	r2, [r0, #287]	; 0x11f
            m_txDesc[i].bit.LB = 1;
    9292:	f890 311d 	ldrb.w	r3, [r0, #285]	; 0x11d
    9296:	f045 0580 	orr.w	r5, r5, #128	; 0x80
            m_txDesc[i].bit.OWN = 1;
    929a:	f042 0280 	orr.w	r2, r2, #128	; 0x80
            m_txDesc[i].bit.LB = 1;
    929e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
            m_txDesc[i].bit.OWN = 1;
    92a2:	f048 0880 	orr.w	r8, r8, #128	; 0x80
            m_txDesc[i].bit.LB = 1;
    92a6:	f04c 0c80 	orr.w	ip, ip, #128	; 0x80
            m_txDesc[i].bit.OWN = 1;
    92aa:	f04e 0e80 	orr.w	lr, lr, #128	; 0x80
            m_txDesc[i].bit.LB = 1;
    92ae:	f047 0780 	orr.w	r7, r7, #128	; 0x80
            m_txDesc[i].bit.OWN = 1;
    92b2:	f046 0680 	orr.w	r6, r6, #128	; 0x80
            m_txDesc[i].bit.LB = 1;
    92b6:	f880 5115 	strb.w	r5, [r0, #277]	; 0x115
    92ba:	f880 311d 	strb.w	r3, [r0, #285]	; 0x11d
            m_txDesc[i].bit.OWN = 1;
    92be:	f880 80ef 	strb.w	r8, [r0, #239]	; 0xef
            m_txDesc[i].bit.LB = 1;
    92c2:	f880 c0ed 	strb.w	ip, [r0, #237]	; 0xed
            m_txDesc[i].bit.OWN = 1;
    92c6:	f880 e10f 	strb.w	lr, [r0, #271]	; 0x10f
            m_txDesc[i].bit.LB = 1;
    92ca:	f880 710d 	strb.w	r7, [r0, #269]	; 0x10d
            m_txDesc[i].bit.OWN = 1;
    92ce:	f880 6117 	strb.w	r6, [r0, #279]	; 0x117
    92d2:	f880 211f 	strb.w	r2, [r0, #287]	; 0x11f
    92d6:	f890 2127 	ldrb.w	r2, [r0, #295]	; 0x127
            m_txDesc[i].bit.LB = 1;
    92da:	f890 3125 	ldrb.w	r3, [r0, #293]	; 0x125
            m_txDesc[i].bit.OWN = 1;
    92de:	f042 0280 	orr.w	r2, r2, #128	; 0x80
            m_txDesc[i].bit.LB = 1;
    92e2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
        m_txBuffIndex = 0;
    92e6:	2500      	movs	r5, #0
            m_txDesc[i].bit.OWN = 1;
    92e8:	f880 2127 	strb.w	r2, [r0, #295]	; 0x127
            m_txDesc[i].bit.LB = 1;
    92ec:	f880 3125 	strb.w	r3, [r0, #293]	; 0x125
        m_txBuffIndex = 0;
    92f0:	f8a0 5064 	strh.w	r5, [r0, #100]	; 0x64
    GMAC->NCR.bit.MPE = 1;
    92f4:	4b50      	ldr	r3, [pc, #320]	; (9438 <_ZN9ClearCore15EthernetManager13IrqHandlerPhyEv+0x290>)
    GMAC->MAN.reg = GMAC_MAN_CLTTO |   // Clause 22 or 45 operation (1 is 22)
    92f6:	4d52      	ldr	r5, [pc, #328]	; (9440 <_ZN9ClearCore15EthernetManager13IrqHandlerPhyEv+0x298>)
    GMAC->NCR.bit.MPE = 1;
    92f8:	681a      	ldr	r2, [r3, #0]
    92fa:	f042 0210 	orr.w	r2, r2, #16
    92fe:	601a      	str	r2, [r3, #0]
    while (!((GMAC->NSR.reg & GMAC_NSR_IDLE) >> GMAC_NSR_IDLE_Pos)) {
    9300:	461a      	mov	r2, r3
    GMAC->MAN.reg = GMAC_MAN_CLTTO |   // Clause 22 or 45 operation (1 is 22)
    9302:	635d      	str	r5, [r3, #52]	; 0x34
    while (!((GMAC->NSR.reg & GMAC_NSR_IDLE) >> GMAC_NSR_IDLE_Pos)) {
    9304:	6893      	ldr	r3, [r2, #8]
    9306:	075e      	lsls	r6, r3, #29
    9308:	d5fc      	bpl.n	9304 <_ZN9ClearCore15EthernetManager13IrqHandlerPhyEv+0x15c>
    GMAC->NCR.bit.MPE = 0;
    930a:	6813      	ldr	r3, [r2, #0]
    930c:	f36f 1304 	bfc	r3, #4, #1
    9310:	6013      	str	r3, [r2, #0]
    return GMAC_MAN_DATA(GMAC->MAN.reg);
    9312:	6b53      	ldr	r3, [r2, #52]	; 0x34
        GMAC->NCFGR.bit.SPD = (phyMode & PHY_CTRL_AN_SPD_MSK) ? 1 : 0;
    9314:	6855      	ldr	r5, [r2, #4]
        uint16_t phyMode = PhyRead(PHY_CTRL_1) & PHY_CTRL_AN_MSK;
    9316:	b29b      	uxth	r3, r3
        GMAC->NCFGR.bit.SPD = (phyMode & PHY_CTRL_AN_SPD_MSK) ? 1 : 0;
    9318:	f3c3 0640 	ubfx	r6, r3, #1, #1
    931c:	f366 0500 	bfi	r5, r6, #0, #1
    9320:	6055      	str	r5, [r2, #4]
        GMAC->NCFGR.bit.FD = (phyMode & PHY_CTRL_AN_FD_MSK) ? 1 : 0;
    9322:	6855      	ldr	r5, [r2, #4]
    9324:	f3c3 0380 	ubfx	r3, r3, #2, #1
    9328:	f363 0541 	bfi	r5, r3, #1, #1
    932c:	6055      	str	r5, [r2, #4]
    bool enabled = (GMAC->NCR.bit.TXEN && GMAC->NCR.bit.RXEN);
    932e:	6813      	ldr	r3, [r2, #0]
    9330:	f3c3 03c0 	ubfx	r3, r3, #3, #1
    9334:	b96b      	cbnz	r3, 9352 <_ZN9ClearCore15EthernetManager13IrqHandlerPhyEv+0x1aa>
    if (enable == enabled) {
    9336:	429c      	cmp	r4, r3
    9338:	f43f af4f 	beq.w	91da <_ZN9ClearCore15EthernetManager13IrqHandlerPhyEv+0x32>
    GMAC->NCR.bit.TXEN = enable ? 1 : 0;
    933c:	b16c      	cbz	r4, 935a <_ZN9ClearCore15EthernetManager13IrqHandlerPhyEv+0x1b2>
    933e:	4b3e      	ldr	r3, [pc, #248]	; (9438 <_ZN9ClearCore15EthernetManager13IrqHandlerPhyEv+0x290>)
    9340:	681a      	ldr	r2, [r3, #0]
    9342:	f042 0208 	orr.w	r2, r2, #8
    9346:	601a      	str	r2, [r3, #0]
    GMAC->NCR.bit.RXEN = enable ? 1 : 0;
    9348:	681a      	ldr	r2, [r3, #0]
    934a:	f042 0204 	orr.w	r2, r2, #4
    934e:	601a      	str	r2, [r3, #0]
    9350:	e743      	b.n	91da <_ZN9ClearCore15EthernetManager13IrqHandlerPhyEv+0x32>
    bool enabled = (GMAC->NCR.bit.TXEN && GMAC->NCR.bit.RXEN);
    9352:	6813      	ldr	r3, [r2, #0]
    9354:	f3c3 0380 	ubfx	r3, r3, #2, #1
    9358:	e7ed      	b.n	9336 <_ZN9ClearCore15EthernetManager13IrqHandlerPhyEv+0x18e>
    GMAC->NCR.bit.TXEN = enable ? 1 : 0;
    935a:	4b37      	ldr	r3, [pc, #220]	; (9438 <_ZN9ClearCore15EthernetManager13IrqHandlerPhyEv+0x290>)
    935c:	681a      	ldr	r2, [r3, #0]
    935e:	f364 02c3 	bfi	r2, r4, #3, #1
    9362:	601a      	str	r2, [r3, #0]
    GMAC->NCR.bit.RXEN = enable ? 1 : 0;
    9364:	681a      	ldr	r2, [r3, #0]
    9366:	f364 0282 	bfi	r2, r4, #2, #1
    936a:	601a      	str	r2, [r3, #0]
            m_txDesc[i].bit.OWN = 1;
    936c:	f890 e0f7 	ldrb.w	lr, [r0, #247]	; 0xf7
            m_txDesc[i].bit.LB = 1;
    9370:	f890 70f5 	ldrb.w	r7, [r0, #245]	; 0xf5
            m_txDesc[i].bit.OWN = 1;
    9374:	f890 60ff 	ldrb.w	r6, [r0, #255]	; 0xff
            m_txDesc[i].bit.LB = 1;
    9378:	f890 50fd 	ldrb.w	r5, [r0, #253]	; 0xfd
            m_txDesc[i].bit.OWN = 1;
    937c:	f890 2107 	ldrb.w	r2, [r0, #263]	; 0x107
            m_txDesc[i].bit.LB = 1;
    9380:	f890 3105 	ldrb.w	r3, [r0, #261]	; 0x105
            m_txDesc[i].bit.OWN = 1;
    9384:	f890 80ef 	ldrb.w	r8, [r0, #239]	; 0xef
            m_txDesc[i].bit.LB = 1;
    9388:	f890 c0ed 	ldrb.w	ip, [r0, #237]	; 0xed
            m_txDesc[i].bit.OWN = 1;
    938c:	f04e 0e80 	orr.w	lr, lr, #128	; 0x80
            m_txDesc[i].bit.LB = 1;
    9390:	f047 0780 	orr.w	r7, r7, #128	; 0x80
            m_txDesc[i].bit.OWN = 1;
    9394:	f046 0680 	orr.w	r6, r6, #128	; 0x80
            m_txDesc[i].bit.LB = 1;
    9398:	f045 0580 	orr.w	r5, r5, #128	; 0x80
            m_txDesc[i].bit.OWN = 1;
    939c:	f042 0280 	orr.w	r2, r2, #128	; 0x80
            m_txDesc[i].bit.LB = 1;
    93a0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
            m_txDesc[i].bit.OWN = 1;
    93a4:	f880 e0f7 	strb.w	lr, [r0, #247]	; 0xf7
            m_txDesc[i].bit.LB = 1;
    93a8:	f880 70f5 	strb.w	r7, [r0, #245]	; 0xf5
            m_txDesc[i].bit.OWN = 1;
    93ac:	f890 e10f 	ldrb.w	lr, [r0, #271]	; 0x10f
            m_txDesc[i].bit.LB = 1;
    93b0:	f890 710d 	ldrb.w	r7, [r0, #269]	; 0x10d
            m_txDesc[i].bit.OWN = 1;
    93b4:	f880 60ff 	strb.w	r6, [r0, #255]	; 0xff
            m_txDesc[i].bit.LB = 1;
    93b8:	f880 50fd 	strb.w	r5, [r0, #253]	; 0xfd
            m_txDesc[i].bit.OWN = 1;
    93bc:	f890 6117 	ldrb.w	r6, [r0, #279]	; 0x117
            m_txDesc[i].bit.LB = 1;
    93c0:	f890 5115 	ldrb.w	r5, [r0, #277]	; 0x115
            m_txDesc[i].bit.OWN = 1;
    93c4:	f880 2107 	strb.w	r2, [r0, #263]	; 0x107
            m_txDesc[i].bit.LB = 1;
    93c8:	f880 3105 	strb.w	r3, [r0, #261]	; 0x105
            m_txDesc[i].bit.OWN = 1;
    93cc:	f890 211f 	ldrb.w	r2, [r0, #287]	; 0x11f
            m_txDesc[i].bit.LB = 1;
    93d0:	f890 311d 	ldrb.w	r3, [r0, #285]	; 0x11d
            m_txDesc[i].bit.OWN = 1;
    93d4:	f042 0280 	orr.w	r2, r2, #128	; 0x80
            m_txDesc[i].bit.LB = 1;
    93d8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
            m_txDesc[i].bit.OWN = 1;
    93dc:	f048 0880 	orr.w	r8, r8, #128	; 0x80
            m_txDesc[i].bit.LB = 1;
    93e0:	f04c 0c80 	orr.w	ip, ip, #128	; 0x80
            m_txDesc[i].bit.OWN = 1;
    93e4:	f04e 0e80 	orr.w	lr, lr, #128	; 0x80
            m_txDesc[i].bit.LB = 1;
    93e8:	f047 0780 	orr.w	r7, r7, #128	; 0x80
            m_txDesc[i].bit.OWN = 1;
    93ec:	f046 0680 	orr.w	r6, r6, #128	; 0x80
            m_txDesc[i].bit.LB = 1;
    93f0:	f045 0580 	orr.w	r5, r5, #128	; 0x80
    93f4:	f880 311d 	strb.w	r3, [r0, #285]	; 0x11d
            m_txDesc[i].bit.OWN = 1;
    93f8:	f880 80ef 	strb.w	r8, [r0, #239]	; 0xef
            m_txDesc[i].bit.LB = 1;
    93fc:	f880 c0ed 	strb.w	ip, [r0, #237]	; 0xed
            m_txDesc[i].bit.OWN = 1;
    9400:	f880 e10f 	strb.w	lr, [r0, #271]	; 0x10f
            m_txDesc[i].bit.LB = 1;
    9404:	f880 710d 	strb.w	r7, [r0, #269]	; 0x10d
            m_txDesc[i].bit.OWN = 1;
    9408:	f880 6117 	strb.w	r6, [r0, #279]	; 0x117
            m_txDesc[i].bit.LB = 1;
    940c:	f880 5115 	strb.w	r5, [r0, #277]	; 0x115
            m_txDesc[i].bit.OWN = 1;
    9410:	f880 211f 	strb.w	r2, [r0, #287]	; 0x11f
    9414:	f890 2127 	ldrb.w	r2, [r0, #295]	; 0x127
            m_txDesc[i].bit.LB = 1;
    9418:	f890 3125 	ldrb.w	r3, [r0, #293]	; 0x125
        m_txBuffIndex = 0;
    941c:	f8a0 4064 	strh.w	r4, [r0, #100]	; 0x64
            m_txDesc[i].bit.OWN = 1;
    9420:	f042 0280 	orr.w	r2, r2, #128	; 0x80
            m_txDesc[i].bit.LB = 1;
    9424:	f043 0380 	orr.w	r3, r3, #128	; 0x80
            m_txDesc[i].bit.OWN = 1;
    9428:	f880 2127 	strb.w	r2, [r0, #295]	; 0x127
            m_txDesc[i].bit.LB = 1;
    942c:	f880 3125 	strb.w	r3, [r0, #293]	; 0x125
    9430:	e6d3      	b.n	91da <_ZN9ClearCore15EthernetManager13IrqHandlerPhyEv+0x32>
    9432:	bf00      	nop
    9434:	40002800 	.word	0x40002800
    9438:	42000800 	.word	0x42000800
    943c:	606e0000 	.word	0x606e0000
    9440:	607a0000 	.word	0x607a0000
    GMAC->NCR.bit.TXEN = enable ? 1 : 0;
    9444:	681a      	ldr	r2, [r3, #0]
    9446:	f36f 02c3 	bfc	r2, #3, #1
    944a:	601a      	str	r2, [r3, #0]
    GMAC->NCR.bit.RXEN = enable ? 1 : 0;
    944c:	681a      	ldr	r2, [r3, #0]
    944e:	f36f 0282 	bfc	r2, #2, #1
    9452:	601a      	str	r2, [r3, #0]
            m_txDesc[i].bit.OWN = 1;
    9454:	f890 40f7 	ldrb.w	r4, [r0, #247]	; 0xf7
            m_txDesc[i].bit.LB = 1;
    9458:	f890 10f5 	ldrb.w	r1, [r0, #245]	; 0xf5
            m_txDesc[i].bit.OWN = 1;
    945c:	f890 20ff 	ldrb.w	r2, [r0, #255]	; 0xff
            m_txDesc[i].bit.LB = 1;
    9460:	f890 30fd 	ldrb.w	r3, [r0, #253]	; 0xfd
            m_txDesc[i].bit.OWN = 1;
    9464:	f890 80ef 	ldrb.w	r8, [r0, #239]	; 0xef
            m_txDesc[i].bit.LB = 1;
    9468:	f890 c0ed 	ldrb.w	ip, [r0, #237]	; 0xed
            m_txDesc[i].bit.OWN = 1;
    946c:	f890 e107 	ldrb.w	lr, [r0, #263]	; 0x107
            m_txDesc[i].bit.LB = 1;
    9470:	f890 7105 	ldrb.w	r7, [r0, #261]	; 0x105
            m_txDesc[i].bit.OWN = 1;
    9474:	f890 610f 	ldrb.w	r6, [r0, #271]	; 0x10f
            m_txDesc[i].bit.LB = 1;
    9478:	f890 510d 	ldrb.w	r5, [r0, #269]	; 0x10d
            m_txDesc[i].bit.OWN = 1;
    947c:	f044 0480 	orr.w	r4, r4, #128	; 0x80
            m_txDesc[i].bit.LB = 1;
    9480:	f041 0180 	orr.w	r1, r1, #128	; 0x80
            m_txDesc[i].bit.OWN = 1;
    9484:	f042 0280 	orr.w	r2, r2, #128	; 0x80
            m_txDesc[i].bit.LB = 1;
    9488:	f043 0380 	orr.w	r3, r3, #128	; 0x80
            m_txDesc[i].bit.OWN = 1;
    948c:	f880 40f7 	strb.w	r4, [r0, #247]	; 0xf7
            m_txDesc[i].bit.LB = 1;
    9490:	f880 10f5 	strb.w	r1, [r0, #245]	; 0xf5
            m_txDesc[i].bit.OWN = 1;
    9494:	f890 4117 	ldrb.w	r4, [r0, #279]	; 0x117
            m_txDesc[i].bit.LB = 1;
    9498:	f890 1115 	ldrb.w	r1, [r0, #277]	; 0x115
            m_txDesc[i].bit.OWN = 1;
    949c:	f880 20ff 	strb.w	r2, [r0, #255]	; 0xff
            m_txDesc[i].bit.LB = 1;
    94a0:	f880 30fd 	strb.w	r3, [r0, #253]	; 0xfd
            m_txDesc[i].bit.OWN = 1;
    94a4:	f890 211f 	ldrb.w	r2, [r0, #287]	; 0x11f
            m_txDesc[i].bit.LB = 1;
    94a8:	f890 311d 	ldrb.w	r3, [r0, #285]	; 0x11d
    94ac:	f041 0180 	orr.w	r1, r1, #128	; 0x80
            m_txDesc[i].bit.OWN = 1;
    94b0:	f042 0280 	orr.w	r2, r2, #128	; 0x80
            m_txDesc[i].bit.LB = 1;
    94b4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
            m_txDesc[i].bit.OWN = 1;
    94b8:	f048 0880 	orr.w	r8, r8, #128	; 0x80
            m_txDesc[i].bit.LB = 1;
    94bc:	f04c 0c80 	orr.w	ip, ip, #128	; 0x80
            m_txDesc[i].bit.OWN = 1;
    94c0:	f04e 0e80 	orr.w	lr, lr, #128	; 0x80
            m_txDesc[i].bit.LB = 1;
    94c4:	f047 0780 	orr.w	r7, r7, #128	; 0x80
            m_txDesc[i].bit.OWN = 1;
    94c8:	f046 0680 	orr.w	r6, r6, #128	; 0x80
            m_txDesc[i].bit.LB = 1;
    94cc:	f045 0580 	orr.w	r5, r5, #128	; 0x80
            m_txDesc[i].bit.OWN = 1;
    94d0:	f044 0480 	orr.w	r4, r4, #128	; 0x80
            m_txDesc[i].bit.LB = 1;
    94d4:	f880 1115 	strb.w	r1, [r0, #277]	; 0x115
    94d8:	f880 311d 	strb.w	r3, [r0, #285]	; 0x11d
            m_txDesc[i].bit.OWN = 1;
    94dc:	f880 80ef 	strb.w	r8, [r0, #239]	; 0xef
            m_txDesc[i].bit.LB = 1;
    94e0:	f880 c0ed 	strb.w	ip, [r0, #237]	; 0xed
            m_txDesc[i].bit.OWN = 1;
    94e4:	f880 e107 	strb.w	lr, [r0, #263]	; 0x107
            m_txDesc[i].bit.LB = 1;
    94e8:	f880 7105 	strb.w	r7, [r0, #261]	; 0x105
            m_txDesc[i].bit.OWN = 1;
    94ec:	f880 610f 	strb.w	r6, [r0, #271]	; 0x10f
            m_txDesc[i].bit.LB = 1;
    94f0:	f880 510d 	strb.w	r5, [r0, #269]	; 0x10d
            m_txDesc[i].bit.OWN = 1;
    94f4:	f880 4117 	strb.w	r4, [r0, #279]	; 0x117
    94f8:	f880 211f 	strb.w	r2, [r0, #287]	; 0x11f
    94fc:	f890 2127 	ldrb.w	r2, [r0, #295]	; 0x127
            m_txDesc[i].bit.LB = 1;
    9500:	f890 3125 	ldrb.w	r3, [r0, #293]	; 0x125
            m_txDesc[i].bit.OWN = 1;
    9504:	f042 0280 	orr.w	r2, r2, #128	; 0x80
            m_txDesc[i].bit.LB = 1;
    9508:	f043 0380 	orr.w	r3, r3, #128	; 0x80
        m_txBuffIndex = 0;
    950c:	2100      	movs	r1, #0
            m_txDesc[i].bit.OWN = 1;
    950e:	f880 2127 	strb.w	r2, [r0, #295]	; 0x127
            m_txDesc[i].bit.LB = 1;
    9512:	f880 3125 	strb.w	r3, [r0, #293]	; 0x125
        m_txBuffIndex = 0;
    9516:	f8a0 1064 	strh.w	r1, [r0, #100]	; 0x64
    951a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    951e:	bf00      	nop

00009520 <_ZN9ClearCore15EthernetManager14IrqHandlerGmacEv>:
    tsr = GMAC->TSR.reg;    // Transmit status register
    9520:	4b0b      	ldr	r3, [pc, #44]	; (9550 <_ZN9ClearCore15EthernetManager14IrqHandlerGmacEv+0x30>)
void EthernetManager::IrqHandlerGmac() {
    9522:	b082      	sub	sp, #8
    tsr = GMAC->TSR.reg;    // Transmit status register
    9524:	695a      	ldr	r2, [r3, #20]
    9526:	9200      	str	r2, [sp, #0]
    rsr = GMAC->RSR.reg;    // Receive  status register
    9528:	6a1a      	ldr	r2, [r3, #32]
    952a:	9201      	str	r2, [sp, #4]
    GMAC->ISR.reg;
    952c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
    if (tsr & GMAC_TSR_TXCOMP) {
    952e:	9a00      	ldr	r2, [sp, #0]
    9530:	0692      	lsls	r2, r2, #26
        GMAC->TSR.reg = tsr;
    9532:	bf44      	itt	mi
    9534:	9a00      	ldrmi	r2, [sp, #0]
    9536:	615a      	strmi	r2, [r3, #20]
    if (rsr & GMAC_RSR_REC) {
    9538:	9b01      	ldr	r3, [sp, #4]
    GMAC->RSR.reg = rsr;
    953a:	9a01      	ldr	r2, [sp, #4]
    if (rsr & GMAC_RSR_REC) {
    953c:	079b      	lsls	r3, r3, #30
        m_recv = true;
    953e:	bf44      	itt	mi
    9540:	2301      	movmi	r3, #1
    9542:	f880 305f 	strbmi.w	r3, [r0, #95]	; 0x5f
    GMAC->RSR.reg = rsr;
    9546:	4b02      	ldr	r3, [pc, #8]	; (9550 <_ZN9ClearCore15EthernetManager14IrqHandlerGmacEv+0x30>)
    9548:	621a      	str	r2, [r3, #32]
}
    954a:	b002      	add	sp, #8
    954c:	4770      	bx	lr
    954e:	bf00      	nop
    9550:	42000800 	.word	0x42000800

00009554 <_ZN9ClearCore15EthernetManager7LocalIpEv>:
    return IpAddress(m_macInterface.ip_addr.addr);
    9554:	f641 1388 	movw	r3, #6536	; 0x1988
}
    9558:	58c0      	ldr	r0, [r0, r3]
    955a:	4770      	bx	lr

0000955c <_ZN9ClearCore15EthernetManager7LocalIpENS_9IpAddressE>:
    if (!m_dhcp) {
    955c:	f890 3060 	ldrb.w	r3, [r0, #96]	; 0x60
    9560:	b913      	cbnz	r3, 9568 <_ZN9ClearCore15EthernetManager7LocalIpENS_9IpAddressE+0xc>
        m_macInterface.ip_addr.addr = uint32_t(ipaddr);
    9562:	f641 1388 	movw	r3, #6536	; 0x1988
    9566:	50c1      	str	r1, [r0, r3]
    9568:	4770      	bx	lr
    956a:	bf00      	nop

0000956c <_ZN9ClearCore15EthernetManager5SetupEv>:
    }
    m_dhcp = dhcpSuccess;
    return dhcpSuccess;
}

void EthernetManager::Setup() {
    956c:	b570      	push	{r4, r5, r6, lr}
    // Setup can only occur once.
    if (m_ethernetActive) {
    956e:	f890 5061 	ldrb.w	r5, [r0, #97]	; 0x61
void EthernetManager::Setup() {
    9572:	b086      	sub	sp, #24
    if (m_ethernetActive) {
    9574:	b10d      	cbz	r5, 957a <_ZN9ClearCore15EthernetManager5SetupEv+0xe>
    }
    lwip_init();
    dns_init();
    NetifInit();
    m_ethernetActive = true;
}
    9576:	b006      	add	sp, #24
    9578:	bd70      	pop	{r4, r5, r6, pc}
    957a:	4606      	mov	r6, r0
    lwip_init();
    957c:	f00a fb54 	bl	13c28 <lwip_init>
    dns_init();
    9580:	f00a fb2a 	bl	13bd8 <dns_init>
    ip_addr_t dummyIp = IPADDR4_INIT(0);
    9584:	ab06      	add	r3, sp, #24
    struct netif *netif = &m_macInterface;
    9586:	f506 54cc 	add.w	r4, r6, #6528	; 0x1980
    ip_addr_t dummyIp = IPADDR4_INIT(0);
    958a:	f843 5d04 	str.w	r5, [r3, #-4]!
              &m_ethernetInterface, ethernetif_init, ethernet_input);
    958e:	f506 52cb 	add.w	r2, r6, #6496	; 0x1960
    struct netif *netif = &m_macInterface;
    9592:	3404      	adds	r4, #4
              &m_ethernetInterface, ethernetif_init, ethernet_input);
    9594:	320c      	adds	r2, #12
    9596:	4914      	ldr	r1, [pc, #80]	; (95e8 <_ZN9ClearCore15EthernetManager5SetupEv+0x7c>)
    9598:	4d14      	ldr	r5, [pc, #80]	; (95ec <_ZN9ClearCore15EthernetManager5SetupEv+0x80>)
    959a:	9200      	str	r2, [sp, #0]
    959c:	9102      	str	r1, [sp, #8]
    959e:	461a      	mov	r2, r3
    95a0:	4619      	mov	r1, r3
    95a2:	4620      	mov	r0, r4
    95a4:	9501      	str	r5, [sp, #4]
    95a6:	f00d fde3 	bl	17170 <netif_add>
    netif_set_default(netif);
    95aa:	4620      	mov	r0, r4
    95ac:	f00d fefe 	bl	173ac <netif_set_default>
    netif_set_link_up(netif);
    95b0:	4620      	mov	r0, r4
    95b2:	f00d ff23 	bl	173fc <netif_set_link_up>
    netif_set_up(netif);
    95b6:	4620      	mov	r0, r4
    95b8:	f00d fefe 	bl	173b8 <netif_set_up>
    bool enabled = (GMAC->NCR.bit.TXEN && GMAC->NCR.bit.RXEN);
    95bc:	4b0c      	ldr	r3, [pc, #48]	; (95f0 <_ZN9ClearCore15EthernetManager5SetupEv+0x84>)
    95be:	681a      	ldr	r2, [r3, #0]
    95c0:	0712      	lsls	r2, r2, #28
    95c2:	d40d      	bmi.n	95e0 <_ZN9ClearCore15EthernetManager5SetupEv+0x74>
    GMAC->NCR.bit.TXEN = enable ? 1 : 0;
    95c4:	4b0a      	ldr	r3, [pc, #40]	; (95f0 <_ZN9ClearCore15EthernetManager5SetupEv+0x84>)
    95c6:	681a      	ldr	r2, [r3, #0]
    95c8:	f042 0208 	orr.w	r2, r2, #8
    95cc:	601a      	str	r2, [r3, #0]
    GMAC->NCR.bit.RXEN = enable ? 1 : 0;
    95ce:	681a      	ldr	r2, [r3, #0]
    95d0:	f042 0204 	orr.w	r2, r2, #4
    95d4:	601a      	str	r2, [r3, #0]
    m_ethernetActive = true;
    95d6:	2301      	movs	r3, #1
    95d8:	f886 3061 	strb.w	r3, [r6, #97]	; 0x61
}
    95dc:	b006      	add	sp, #24
    95de:	bd70      	pop	{r4, r5, r6, pc}
    bool enabled = (GMAC->NCR.bit.TXEN && GMAC->NCR.bit.RXEN);
    95e0:	681b      	ldr	r3, [r3, #0]
    95e2:	075b      	lsls	r3, r3, #29
    95e4:	d5ee      	bpl.n	95c4 <_ZN9ClearCore15EthernetManager5SetupEv+0x58>
    95e6:	e7f6      	b.n	95d6 <_ZN9ClearCore15EthernetManager5SetupEv+0x6a>
    95e8:	0001b851 	.word	0x0001b851
    95ec:	0000875d 	.word	0x0000875d
    95f0:	42000800 	.word	0x42000800

000095f4 <_ZN9ClearCore15EthernetManager7RefreshEv>:

void EthernetManager::Refresh() {
    95f4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    95f8:	f500 57cd 	add.w	r7, r0, #6560	; 0x19a0
        struct pbuf *packet = low_level_input(&m_macInterface);
        if (packet == NULL) {
            break;
        }
        // Send the packet as input to LwIP.
        ethernetif_input(&m_macInterface, packet);
    95fc:	f500 56cc 	add.w	r6, r0, #6528	; 0x1980
    9600:	3704      	adds	r7, #4
    9602:	3604      	adds	r6, #4
    9604:	f8d7 8000 	ldr.w	r8, [r7]
    index = *(ethernetif->rxBuffIndex);
    9608:	f8d8 3008 	ldr.w	r3, [r8, #8]
    960c:	f8d8 5000 	ldr.w	r5, [r8]
    9610:	781b      	ldrb	r3, [r3, #0]
    uint8_t sf = 0;
    9612:	2100      	movs	r1, #0
    uint32_t length = 0;
    9614:	468c      	mov	ip, r1
    index = *(ethernetif->rxBuffIndex);
    9616:	2210      	movs	r2, #16
    9618:	e009      	b.n	962e <_ZN9ClearCore15EthernetManager7RefreshEv+0x3a>
            length += ethernetif->rxDesc[index].bit.LEN;
    961a:	88a4      	ldrh	r4, [r4, #4]
        if (ethernetif->rxDesc[index].bit.EF) {
    961c:	0600      	lsls	r0, r0, #24
            length += ethernetif->rxDesc[index].bit.LEN;
    961e:	f3c4 040c 	ubfx	r4, r4, #0, #13
    9622:	44a4      	add	ip, r4
    9624:	f04f 0101 	mov.w	r1, #1
        if (ethernetif->rxDesc[index].bit.EF) {
    9628:	d413      	bmi.n	9652 <_ZN9ClearCore15EthernetManager7RefreshEv+0x5e>
    for (uint32_t i = 0; i < RX_BUFF_CNT; i++) {
    962a:	3a01      	subs	r2, #1
    962c:	d011      	beq.n	9652 <_ZN9ClearCore15EthernetManager7RefreshEv+0x5e>
        if (!ethernetif->rxDesc[index].bit.OWN) {
    962e:	f815 e033 	ldrb.w	lr, [r5, r3, lsl #3]
        index = (index + 1) % RX_BUFF_CNT;
    9632:	1c58      	adds	r0, r3, #1
        if (!ethernetif->rxDesc[index].bit.OWN) {
    9634:	f01e 0f01 	tst.w	lr, #1
    9638:	eb05 04c3 	add.w	r4, r5, r3, lsl #3
        index = (index + 1) % RX_BUFF_CNT;
    963c:	f000 030f 	and.w	r3, r0, #15
        if (!ethernetif->rxDesc[index].bit.OWN) {
    9640:	d007      	beq.n	9652 <_ZN9ClearCore15EthernetManager7RefreshEv+0x5e>
        if (ethernetif->rxDesc[index].bit.SF) {
    9642:	7960      	ldrb	r0, [r4, #5]
    9644:	f010 0f40 	tst.w	r0, #64	; 0x40
    9648:	d1e7      	bne.n	961a <_ZN9ClearCore15EthernetManager7RefreshEv+0x26>
        if (sf == 1) {
    964a:	2900      	cmp	r1, #0
    964c:	d1e5      	bne.n	961a <_ZN9ClearCore15EthernetManager7RefreshEv+0x26>
        if (ethernetif->rxDesc[index].bit.EF) {
    964e:	0600      	lsls	r0, r0, #24
    9650:	d5eb      	bpl.n	962a <_ZN9ClearCore15EthernetManager7RefreshEv+0x36>
    if (length == 0) {
    9652:	f1bc 0f00 	cmp.w	ip, #0
    9656:	d027      	beq.n	96a8 <_ZN9ClearCore15EthernetManager7RefreshEv+0xb4>
    p = pbuf_alloc(PBUF_RAW, length, PBUF_POOL);
    9658:	fa1f f18c 	uxth.w	r1, ip
    965c:	f44f 72c1 	mov.w	r2, #386	; 0x182
    9660:	2000      	movs	r0, #0
    9662:	f00d ff17 	bl	17494 <pbuf_alloc>
    if (p != NULL) {
    9666:	4604      	mov	r4, r0
        PacketRead(ethernetif, (uint8_t*)p->payload, p->len);
    9668:	4640      	mov	r0, r8
    if (p != NULL) {
    966a:	b1cc      	cbz	r4, 96a0 <_ZN9ClearCore15EthernetManager7RefreshEv+0xac>
        PacketRead(ethernetif, (uint8_t*)p->payload, p->len);
    966c:	8962      	ldrh	r2, [r4, #10]
    966e:	6861      	ldr	r1, [r4, #4]
    9670:	f7ff f964 	bl	893c <_Z10PacketReadP6ethIntPhm>
    packetType = htons(((struct eth_hdr *)p->payload)->type);
    9674:	6863      	ldr	r3, [r4, #4]
    9676:	8998      	ldrh	r0, [r3, #12]
    9678:	f00a f83e 	bl	136f8 <lwip_htons>
    switch (packetType) {
    967c:	f5b0 6f00 	cmp.w	r0, #2048	; 0x800
    9680:	d007      	beq.n	9692 <_ZN9ClearCore15EthernetManager7RefreshEv+0x9e>
    9682:	f640 0306 	movw	r3, #2054	; 0x806
    9686:	4298      	cmp	r0, r3
    9688:	d003      	beq.n	9692 <_ZN9ClearCore15EthernetManager7RefreshEv+0x9e>
            pbuf_free(p);
    968a:	4620      	mov	r0, r4
    968c:	f00e f8ae 	bl	177ec <pbuf_free>
    9690:	e7b8      	b.n	9604 <_ZN9ClearCore15EthernetManager7RefreshEv+0x10>
            if (netif->input(p, netif) == ERR_OK) {
    9692:	6933      	ldr	r3, [r6, #16]
    9694:	4631      	mov	r1, r6
    9696:	4620      	mov	r0, r4
    9698:	4798      	blx	r3
    969a:	2800      	cmp	r0, #0
    969c:	d1f5      	bne.n	968a <_ZN9ClearCore15EthernetManager7RefreshEv+0x96>
    969e:	e7b1      	b.n	9604 <_ZN9ClearCore15EthernetManager7RefreshEv+0x10>
        PacketRead(ethernetif, NULL, 0);
    96a0:	4622      	mov	r2, r4
    96a2:	4621      	mov	r1, r4
    96a4:	f7ff f94a 	bl	893c <_Z10PacketReadP6ethIntPhm>
    }
    sys_check_timeouts();
}
    96a8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    sys_check_timeouts();
    96ac:	f011 bd0e 	b.w	1b0cc <sys_check_timeouts>

000096b0 <_ZN9ClearCore15EthernetManager9DhcpBeginEv>:
bool EthernetManager::DhcpBegin() {
    96b0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    struct netif *netif = &m_macInterface;
    96b4:	f500 55cc 	add.w	r5, r0, #6528	; 0x1980
bool EthernetManager::DhcpBegin() {
    96b8:	4606      	mov	r6, r0
    struct netif *netif = &m_macInterface;
    96ba:	3504      	adds	r5, #4
    96bc:	2400      	movs	r4, #0
                if (Milliseconds() - startMs > DHCP_TIMEOUT_MS) {
    96be:	f240 58dc 	movw	r8, #1500	; 0x5dc
        err_t err = dhcp_start(netif);
    96c2:	4628      	mov	r0, r5
    96c4:	f00b fc2e 	bl	14f24 <dhcp_start>
        if (err == ERR_OK) {
    96c8:	b140      	cbz	r0, 96dc <_ZN9ClearCore15EthernetManager9DhcpBeginEv+0x2c>
    for (uint8_t i = 0; i < 5 && !dhcpSuccess; i++) {
    96ca:	3401      	adds	r4, #1
    96cc:	b2e4      	uxtb	r4, r4
    96ce:	2c04      	cmp	r4, #4
    96d0:	d9f7      	bls.n	96c2 <_ZN9ClearCore15EthernetManager9DhcpBeginEv+0x12>
    struct netif *netif = &m_macInterface;
    96d2:	2000      	movs	r0, #0
    m_dhcp = dhcpSuccess;
    96d4:	f886 0060 	strb.w	r0, [r6, #96]	; 0x60
}
    96d8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
            uint32_t startMs = Milliseconds();
    96dc:	f7fe ffee 	bl	86bc <Milliseconds>
    96e0:	4607      	mov	r7, r0
    96e2:	e007      	b.n	96f4 <_ZN9ClearCore15EthernetManager9DhcpBeginEv+0x44>
                if (Milliseconds() - startMs > DHCP_TIMEOUT_MS) {
    96e4:	f7fe ffea 	bl	86bc <Milliseconds>
    96e8:	1bc0      	subs	r0, r0, r7
    96ea:	4540      	cmp	r0, r8
                Refresh();
    96ec:	4630      	mov	r0, r6
                if (Milliseconds() - startMs > DHCP_TIMEOUT_MS) {
    96ee:	d818      	bhi.n	9722 <_ZN9ClearCore15EthernetManager9DhcpBeginEv+0x72>
                Refresh();
    96f0:	f7ff ff80 	bl	95f4 <_ZN9ClearCore15EthernetManager7RefreshEv>
            while (dhcp_supplied_address(netif) == 0) {
    96f4:	4628      	mov	r0, r5
    96f6:	f00b fdc9 	bl	1528c <dhcp_supplied_address>
    96fa:	2800      	cmp	r0, #0
    96fc:	d0f2      	beq.n	96e4 <_ZN9ClearCore15EthernetManager9DhcpBeginEv+0x34>
    for (uint8_t i = 0; i < 5 && !dhcpSuccess; i++) {
    96fe:	3401      	adds	r4, #1
            dhcpSuccess = (dhcp_supplied_address(netif) != 0);
    9700:	4628      	mov	r0, r5
    for (uint8_t i = 0; i < 5 && !dhcpSuccess; i++) {
    9702:	b2e4      	uxtb	r4, r4
            dhcpSuccess = (dhcp_supplied_address(netif) != 0);
    9704:	f00b fdc2 	bl	1528c <dhcp_supplied_address>
    for (uint8_t i = 0; i < 5 && !dhcpSuccess; i++) {
    9708:	2c04      	cmp	r4, #4
    970a:	d80e      	bhi.n	972a <_ZN9ClearCore15EthernetManager9DhcpBeginEv+0x7a>
    970c:	2800      	cmp	r0, #0
    970e:	d0d8      	beq.n	96c2 <_ZN9ClearCore15EthernetManager9DhcpBeginEv+0x12>
        m_dhcpData = netif_dhcp_data(netif);
    9710:	f506 53ce 	add.w	r3, r6, #6592	; 0x19c0
    9714:	6a6a      	ldr	r2, [r5, #36]	; 0x24
    9716:	601a      	str	r2, [r3, #0]
    9718:	2001      	movs	r0, #1
    m_dhcp = dhcpSuccess;
    971a:	f886 0060 	strb.w	r0, [r6, #96]	; 0x60
}
    971e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
                    dhcp_release_and_stop(netif);
    9722:	4628      	mov	r0, r5
    9724:	f00b fb28 	bl	14d78 <dhcp_release_and_stop>
                    break;
    9728:	e7e9      	b.n	96fe <_ZN9ClearCore15EthernetManager9DhcpBeginEv+0x4e>
    if (dhcpSuccess) {
    972a:	2800      	cmp	r0, #0
    972c:	d0d1      	beq.n	96d2 <_ZN9ClearCore15EthernetManager9DhcpBeginEv+0x22>
        m_dhcpData = netif_dhcp_data(netif);
    972e:	f506 53ce 	add.w	r3, r6, #6592	; 0x19c0
    9732:	6a6a      	ldr	r2, [r5, #36]	; 0x24
    9734:	601a      	str	r2, [r3, #0]
    9736:	2001      	movs	r0, #1
    9738:	e7ef      	b.n	971a <_ZN9ClearCore15EthernetManager9DhcpBeginEv+0x6a>
    973a:	bf00      	nop

0000973c <_GLOBAL__sub_I__Z12PacketLengthP6ethInt>:

    973c:	b508      	push	{r3, lr}
EthernetManager &EthernetMgr = EthernetManager::Instance();
    973e:	f7ff f97b 	bl	8a38 <_ZN9ClearCore15EthernetManager8InstanceEv>
    9742:	4b01      	ldr	r3, [pc, #4]	; (9748 <_GLOBAL__sub_I__Z12PacketLengthP6ethInt+0xc>)
    9744:	6018      	str	r0, [r3, #0]
    9746:	bd08      	pop	{r3, pc}
    9748:	20001ca0 	.word	0x20001ca0

0000974c <_ZN9ClearCore13ShiftRegisterC1Ev>:
namespace ClearCore {

/**
    Constructs and adjusts inversions for hardware constraints
**/
ShiftRegister::ShiftRegister() :
    974c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    m_initialized(false),
    m_blinkCodeActive(false),
    m_blinkCodeState(false),
    m_useAltOutput(false),
    m_pendingOutput(0),
    m_lastOutput(0) {
    974e:	4f46      	ldr	r7, [pc, #280]	; (9868 <_ZN9ClearCore13ShiftRegisterC1Ev+0x11c>)
    9750:	f8df e118 	ldr.w	lr, [pc, #280]	; 986c <_ZN9ClearCore13ShiftRegisterC1Ev+0x120>
    9754:	463e      	mov	r6, r7
ShiftRegister::ShiftRegister() :
    9756:	4604      	mov	r4, r0
    m_lastOutput(0) {
    9758:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
    975a:	4625      	mov	r5, r4
    975c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
    975e:	e896 0003 	ldmia.w	r6, {r0, r1}
    9762:	f107 0618 	add.w	r6, r7, #24
    9766:	e885 0003 	stmia.w	r5, {r0, r1}
    976a:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
    976c:	f104 0518 	add.w	r5, r4, #24
    9770:	c50f      	stmia	r5!, {r0, r1, r2, r3}
    9772:	e896 0007 	ldmia.w	r6, {r0, r1, r2}
    9776:	f107 0334 	add.w	r3, r7, #52	; 0x34
    977a:	e885 0007 	stmia.w	r5, {r0, r1, r2}
    977e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
    9780:	f104 0534 	add.w	r5, r4, #52	; 0x34
    9784:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
                         uint8_t minValue = 0x08)
            : m_maxValue(maxValue),
              m_minValue(minValue),
              m_count(0),
              m_compare(0),
              fadingIn(true) {}
    9788:	2608      	movs	r6, #8
    978a:	257f      	movs	r5, #127	; 0x7f
    978c:	23c8      	movs	r3, #200	; 0xc8
    978e:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
    9792:	f884 5064 	strb.w	r5, [r4, #100]	; 0x64
    9796:	f884 6065 	strb.w	r6, [r4, #101]	; 0x65
              count(0) {}
    979a:	2500      	movs	r5, #0
    979c:	f04f 36ff 	mov.w	r6, #4294967295
              fadingIn(true) {}
    97a0:	2001      	movs	r0, #1
              m_analogMasks{SR_NO_FEEDBACK_MASK} {}
    97a2:	21fe      	movs	r1, #254	; 0xfe
    97a4:	f8c4 e044 	str.w	lr, [r4, #68]	; 0x44
              fadingIn(true) {}
    97a8:	f884 0068 	strb.w	r0, [r4, #104]	; 0x68
              m_analogMasks{SR_NO_FEEDBACK_MASK} {}
    97ac:	f884 107c 	strb.w	r1, [r4, #124]	; 0x7c
    97b0:	64a2      	str	r2, [r4, #72]	; 0x48
              count(0) {}
    97b2:	6522      	str	r2, [r4, #80]	; 0x50
              m_analogMasks{SR_NO_FEEDBACK_MASK} {}
    97b4:	4629      	mov	r1, r5
    97b6:	64e3      	str	r3, [r4, #76]	; 0x4c
              count(0) {}
    97b8:	6563      	str	r3, [r4, #84]	; 0x54
    97ba:	65a5      	str	r5, [r4, #88]	; 0x58
    97bc:	65e5      	str	r5, [r4, #92]	; 0x5c
              fadingIn(true) {}
    97be:	f884 5066 	strb.w	r5, [r4, #102]	; 0x66
    97c2:	f884 5067 	strb.w	r5, [r4, #103]	; 0x67
    97c6:	66e5      	str	r5, [r4, #108]	; 0x6c
              m_analogMasks{SR_NO_FEEDBACK_MASK} {}
    97c8:	f8a4 5074 	strh.w	r5, [r4, #116]	; 0x74
    97cc:	67a5      	str	r5, [r4, #120]	; 0x78
    97ce:	f8c4 507d 	str.w	r5, [r4, #125]	; 0x7d
              count(0) {}
    97d2:	6626      	str	r6, [r4, #96]	; 0x60
              fadingIn(true) {}
    97d4:	6726      	str	r6, [r4, #112]	; 0x70
              m_analogMasks{SR_NO_FEEDBACK_MASK} {}
    97d6:	f8c4 5081 	str.w	r5, [r4, #129]	; 0x81
    97da:	f8c4 5085 	str.w	r5, [r4, #133]	; 0x85
    97de:	f8c4 5089 	str.w	r5, [r4, #137]	; 0x89
    97e2:	f104 00a0 	add.w	r0, r4, #160	; 0xa0
    97e6:	f8c4 508d 	str.w	r5, [r4, #141]	; 0x8d
    97ea:	2240      	movs	r2, #64	; 0x40
    97ec:	f8c4 5091 	str.w	r5, [r4, #145]	; 0x91
    97f0:	f8c4 5095 	str.w	r5, [r4, #149]	; 0x95
    97f4:	f8c4 5099 	str.w	r5, [r4, #153]	; 0x99
    97f8:	f01e fb30 	bl	27e5c <memset>
    m_shiftInversions.reg = 0xffffffff;
    m_shiftInversions.bit.LED_USB = 0;
    m_shiftInversions.bit.LED_IO_4 = 0;
    m_shiftInversions.bit.LED_IO_5 = 0;
    m_shiftInversions.bit.LED_COM_0 = 0;
    m_shiftInversions.bit.LED_COM_1 = 0;
    97fc:	f06f 0704 	mvn.w	r7, #4
    m_shiftInversions.bit.LED_IO_5 = 0;
    9800:	f006 0ef7 	and.w	lr, r6, #247	; 0xf7
    m_shiftInversions.bit.EN_OUT_0 = 0;
    m_shiftInversions.bit.EN_OUT_1 = 0;
    m_shiftInversions.bit.EN_OUT_2 = 0;
    m_shiftInversions.bit.EN_OUT_3 = 0;
    m_shiftInversions.bit.UART_TTL_0 = 0;
    m_shiftInversions.bit.UART_TTL_1 = 0;
    9804:	f04f 0110 	mov.w	r1, #16
    m_shiftInversions.bit.LED_IO_5 = 0;
    9808:	f365 0e82 	bfi	lr, r5, #2, #1
    m_shiftInversions.bit.LED_COM_1 = 0;
    980c:	f365 07c3 	bfi	r7, r5, #3, #1
    m_shiftInversions.bit.UART_TTL_1 = 0;
    9810:	f365 1104 	bfi	r1, r5, #4, #1
    m_shiftInversions.reg = 0xffffffff;
    9814:	f8c4 60e0 	str.w	r6, [r4, #224]	; 0xe0
    m_lastOutput(0) {
    9818:	f44f 4c80 	mov.w	ip, #16384	; 0x4000
    m_shiftInversions.bit.LED_IO_5 = 0;
    981c:	f884 e0e0 	strb.w	lr, [r4, #224]	; 0xe0
    m_shiftInversions.bit.LED_COM_1 = 0;
    9820:	f884 70e2 	strb.w	r7, [r4, #226]	; 0xe2
    m_shiftInversions.bit.UART_TTL_1 = 0;
    9824:	f884 10e1 	strb.w	r1, [r4, #225]	; 0xe1
    m_lastOutput(0) {
    9828:	f8c4 50e8 	str.w	r5, [r4, #232]	; 0xe8
    982c:	f8c4 50ec 	str.w	r5, [r4, #236]	; 0xec
    9830:	f8c4 50f0 	str.w	r5, [r4, #240]	; 0xf0
    9834:	f8c4 60e4 	str.w	r6, [r4, #228]	; 0xe4
    9838:	f8c4 50f8 	str.w	r5, [r4, #248]	; 0xf8
    983c:	f8c4 50fc 	str.w	r5, [r4, #252]	; 0xfc
    9840:	f8c4 5100 	str.w	r5, [r4, #256]	; 0x100
}
    9844:	4620      	mov	r0, r4
    m_lastOutput(0) {
    9846:	f8c4 5104 	str.w	r5, [r4, #260]	; 0x104
    984a:	f884 5108 	strb.w	r5, [r4, #264]	; 0x108
    984e:	f884 5109 	strb.w	r5, [r4, #265]	; 0x109
    9852:	f884 510a 	strb.w	r5, [r4, #266]	; 0x10a
    9856:	f884 510b 	strb.w	r5, [r4, #267]	; 0x10b
    985a:	f8c4 510c 	str.w	r5, [r4, #268]	; 0x10c
    985e:	f8c4 5110 	str.w	r5, [r4, #272]	; 0x110
    9862:	f8c4 c0f4 	str.w	ip, [r4, #244]	; 0xf4
}
    9866:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    9868:	0002d100 	.word	0x0002d100
    986c:	0fe080fc 	.word	0x0fe080fc

00009870 <_ZN9ClearCore13ShiftRegister10InitializeEv>:

/**
    Turn on the shifter and setup the mode for SPI
**/
void ShiftRegister::Initialize() {
    9870:	b4f0      	push	{r4, r5, r6, r7}
    SET_CLOCK_SOURCE(SERCOM6_GCLK_ID_CORE, 5);
    9872:	4a64      	ldr	r2, [pc, #400]	; (9a04 <_ZN9ClearCore13ShiftRegister10InitializeEv+0x194>)
    9874:	f8d2 3110 	ldr.w	r3, [r2, #272]	; 0x110
    9878:	f36f 1386 	bfc	r3, #6, #1
    987c:	f8c2 3110 	str.w	r3, [r2, #272]	; 0x110
    9880:	f8d2 3110 	ldr.w	r3, [r2, #272]	; 0x110
    9884:	065d      	lsls	r5, r3, #25
    9886:	d4fb      	bmi.n	9880 <_ZN9ClearCore13ShiftRegister10InitializeEv+0x10>
    9888:	f8d2 3110 	ldr.w	r3, [r2, #272]	; 0x110
    988c:	495d      	ldr	r1, [pc, #372]	; (9a04 <_ZN9ClearCore13ShiftRegister10InitializeEv+0x194>)
    988e:	2405      	movs	r4, #5
    9890:	f364 0303 	bfi	r3, r4, #0, #4
    9894:	f8c2 3110 	str.w	r3, [r2, #272]	; 0x110
    9898:	f8d2 3110 	ldr.w	r3, [r2, #272]	; 0x110
    989c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    98a0:	f8c2 3110 	str.w	r3, [r2, #272]	; 0x110
    98a4:	684b      	ldr	r3, [r1, #4]
    98a6:	f013 0314 	ands.w	r3, r3, #20
    98aa:	d1fb      	bne.n	98a4 <_ZN9ClearCore13ShiftRegister10InitializeEv+0x34>
    CLOCK_ENABLE(APBDMASK, SERCOM6_);
    98ac:	4d56      	ldr	r5, [pc, #344]	; (9a08 <_ZN9ClearCore13ShiftRegister10InitializeEv+0x198>)

    // Set up pins for SERCOM6 in SPI master mode and enable it to control them
    PMUX_SELECTION(SR_CLK.gpioPort, SR_CLK.gpioPin, PER_SERCOM);
    98ae:	4957      	ldr	r1, [pc, #348]	; (9a0c <_ZN9ClearCore13ShiftRegister10InitializeEv+0x19c>)
    CLOCK_ENABLE(APBDMASK, SERCOM6_);
    98b0:	6a2c      	ldr	r4, [r5, #32]

    // A pointer to the SPI register to make things easier.
    SercomSpi *sercomSpi = &SERCOM6->SPI;

    // Disable SERCOM6 to switch its role
    sercomSpi->CTRLA.bit.ENABLE = 0;
    98b2:	4a57      	ldr	r2, [pc, #348]	; (9a10 <_ZN9ClearCore13ShiftRegister10InitializeEv+0x1a0>)
    CLOCK_ENABLE(APBDMASK, SERCOM6_);
    98b4:	f044 0404 	orr.w	r4, r4, #4
    98b8:	622c      	str	r4, [r5, #32]
    PMUX_SELECTION(SR_CLK.gpioPort, SR_CLK.gpioPin, PER_SERCOM);
    98ba:	f891 5132 	ldrb.w	r5, [r1, #306]	; 0x132
    98be:	2402      	movs	r4, #2
    98c0:	f364 1507 	bfi	r5, r4, #4, #4
    98c4:	f881 5132 	strb.w	r5, [r1, #306]	; 0x132
    PMUX_ENABLE(SR_CLK.gpioPort, SR_CLK.gpioPin);
    98c8:	f891 5145 	ldrb.w	r5, [r1, #325]	; 0x145
    98cc:	f045 0501 	orr.w	r5, r5, #1
    98d0:	f881 5145 	strb.w	r5, [r1, #325]	; 0x145
    PMUX_SELECTION(SR_DATA.gpioPort, SR_DATA.gpioPin, PER_SERCOM);
    98d4:	f891 5133 	ldrb.w	r5, [r1, #307]	; 0x133
    98d8:	f364 1507 	bfi	r5, r4, #4, #4
    98dc:	f881 5133 	strb.w	r5, [r1, #307]	; 0x133
    PMUX_ENABLE(SR_DATA.gpioPort, SR_DATA.gpioPin);
    98e0:	f891 5147 	ldrb.w	r5, [r1, #327]	; 0x147
    98e4:	f045 0501 	orr.w	r5, r5, #1
    98e8:	f881 5147 	strb.w	r5, [r1, #327]	; 0x147
    PMUX_SELECTION(SR_DATA_RET.gpioPort, SR_DATA_RET.gpioPin, PER_SERCOM);
    98ec:	f891 5133 	ldrb.w	r5, [r1, #307]	; 0x133
    98f0:	f364 0503 	bfi	r5, r4, #0, #4
    98f4:	f881 5133 	strb.w	r5, [r1, #307]	; 0x133
    PMUX_ENABLE(SR_DATA_RET.gpioPort, SR_DATA_RET.gpioPin);
    98f8:	f891 5146 	ldrb.w	r5, [r1, #326]	; 0x146
    DATA_OUTPUT_STATE(SR_LOAD.gpioPort, 1UL << SR_LOAD.gpioPin, false);
    98fc:	2604      	movs	r6, #4
    PMUX_ENABLE(SR_DATA_RET.gpioPort, SR_DATA_RET.gpioPin);
    98fe:	f045 0501 	orr.w	r5, r5, #1
    9902:	f881 5146 	strb.w	r5, [r1, #326]	; 0x146
    DATA_OUTPUT_STATE(SR_ENn.gpioPort, 1UL << SR_ENn.gpioPin, true);
    9906:	f8c1 4098 	str.w	r4, [r1, #152]	; 0x98
    DATA_OUTPUT_STATE(SR_LOAD.gpioPort, 1UL << SR_LOAD.gpioPin, false);
    990a:	f8c1 6094 	str.w	r6, [r1, #148]	; 0x94
    DATA_DIRECTION_OUTPUT(SR_ENn.gpioPort, (1UL << SR_ENn.gpioPin));
    990e:	f8c1 4088 	str.w	r4, [r1, #136]	; 0x88
    DATA_DIRECTION_OUTPUT(SR_LOAD.gpioPort, (1UL << SR_LOAD.gpioPin));
    9912:	f8c1 6088 	str.w	r6, [r1, #136]	; 0x88
    sercomSpi->CTRLA.bit.ENABLE = 0;
    9916:	6811      	ldr	r1, [r2, #0]
    9918:	f363 0141 	bfi	r1, r3, #1, #1
    991c:	6011      	str	r1, [r2, #0]
    SYNCBUSY_WAIT(sercomSpi, SERCOM_SPI_SYNCBUSY_ENABLE);
    991e:	69d3      	ldr	r3, [r2, #28]
    9920:	f013 0302 	ands.w	r3, r3, #2
    9924:	d1fb      	bne.n	991e <_ZN9ClearCore13ShiftRegister10InitializeEv+0xae>

    // Sets SERCOM6 to SPI Master mode
    sercomSpi->CTRLA.reg |= SERCOM_SPI_CTRLA_MODE(0x3);
    9926:	6814      	ldr	r4, [r2, #0]
    // Sets the baud rate to GCLK1 frequency
    sercomSpi->BAUD.reg = 0;

    // Enables SERCOM6 and wait for core sync
    sercomSpi->CTRLA.bit.ENABLE = 1;
    SYNCBUSY_WAIT(sercomSpi, SERCOM_SPI_SYNCBUSY_ENABLE);
    9928:	4939      	ldr	r1, [pc, #228]	; (9a10 <_ZN9ClearCore13ShiftRegister10InitializeEv+0x1a0>)
    sercomSpi->CTRLA.reg |= SERCOM_SPI_CTRLA_MODE(0x3);
    992a:	f044 040c 	orr.w	r4, r4, #12
    992e:	6014      	str	r4, [r2, #0]
                            SERCOM_SPI_CTRLA_DORD;
    9930:	6814      	ldr	r4, [r2, #0]
    9932:	f044 4480 	orr.w	r4, r4, #1073741824	; 0x40000000
    9936:	f444 1408 	orr.w	r4, r4, #2228224	; 0x220000
    sercomSpi->CTRLA.reg |= SERCOM_SPI_CTRLA_DOPO(0x2) |
    993a:	6014      	str	r4, [r2, #0]
    sercomSpi->CTRLB.bit.RXEN = 1;
    993c:	6854      	ldr	r4, [r2, #4]
    993e:	f444 3400 	orr.w	r4, r4, #131072	; 0x20000
    9942:	6054      	str	r4, [r2, #4]
    sercomSpi->CTRLC.reg |= SERCOM_SPI_CTRLC_DATA32B;
    9944:	6894      	ldr	r4, [r2, #8]
    9946:	f044 7480 	orr.w	r4, r4, #16777216	; 0x1000000
    994a:	6094      	str	r4, [r2, #8]
    sercomSpi->BAUD.reg = 0;
    994c:	7313      	strb	r3, [r2, #12]
    sercomSpi->CTRLA.bit.ENABLE = 1;
    994e:	6813      	ldr	r3, [r2, #0]
    9950:	f043 0302 	orr.w	r3, r3, #2
    9954:	6013      	str	r3, [r2, #0]
    SYNCBUSY_WAIT(sercomSpi, SERCOM_SPI_SYNCBUSY_ENABLE);
    9956:	69cb      	ldr	r3, [r1, #28]
    9958:	079c      	lsls	r4, r3, #30
    995a:	d4fc      	bmi.n	9956 <_ZN9ClearCore13ShiftRegister10InitializeEv+0xe6>

    // Send the initial values to the chain
    sercomSpi->DATA.reg = atomic_load_n(&m_patternOutputs[LED_BLINK_IO_SET])
    995c:	f8d0 30f4 	ldr.w	r3, [r0, #244]	; 0xf4
    9960:	f3bf 8f5b 	dmb	ish
                          ^ m_shiftInversions.reg;
    9964:	f8d0 40e0 	ldr.w	r4, [r0, #224]	; 0xe0
    Send();
}

void ShiftRegister::Send() {
    // Wait for TX-complete interrupt flag in case we get here too quickly
    while (!(SERCOM6->SPI.INTFLAG.bit.TXC)) {
    9968:	4a29      	ldr	r2, [pc, #164]	; (9a10 <_ZN9ClearCore13ShiftRegister10InitializeEv+0x1a0>)
                          ^ m_shiftInversions.reg;
    996a:	4063      	eors	r3, r4
    sercomSpi->DATA.reg = atomic_load_n(&m_patternOutputs[LED_BLINK_IO_SET])
    996c:	628b      	str	r3, [r1, #40]	; 0x28
    while (!(SERCOM6->SPI.INTFLAG.bit.TXC)) {
    996e:	7e13      	ldrb	r3, [r2, #24]
    9970:	0799      	lsls	r1, r3, #30
    9972:	d5fc      	bpl.n	996e <_ZN9ClearCore13ShiftRegister10InitializeEv+0xfe>
        continue;
    }
    uint32_t output;

    // Strobe the output with minimum pulse width to display last transfer
    DATA_OUTPUT_STATE(SR_LOAD.gpioPort, 1UL << SR_LOAD.gpioPin, true);
    9974:	4b25      	ldr	r3, [pc, #148]	; (9a0c <_ZN9ClearCore13ShiftRegister10InitializeEv+0x19c>)
    DATA_OUTPUT_STATE(SR_LOAD.gpioPort, 1UL << SR_LOAD.gpioPin, false);
    while (!(SERCOM6->SPI.INTFLAG.bit.RXC)) {
    9976:	4a26      	ldr	r2, [pc, #152]	; (9a10 <_ZN9ClearCore13ShiftRegister10InitializeEv+0x1a0>)
    DATA_OUTPUT_STATE(SR_LOAD.gpioPort, 1UL << SR_LOAD.gpioPin, true);
    9978:	2104      	movs	r1, #4
    997a:	f8c3 1098 	str.w	r1, [r3, #152]	; 0x98
    DATA_OUTPUT_STATE(SR_LOAD.gpioPort, 1UL << SR_LOAD.gpioPin, false);
    997e:	f8c3 1094 	str.w	r1, [r3, #148]	; 0x94
    while (!(SERCOM6->SPI.INTFLAG.bit.RXC)) {
    9982:	7e13      	ldrb	r3, [r2, #24]
    9984:	075b      	lsls	r3, r3, #29
    9986:	d5fc      	bpl.n	9982 <_ZN9ClearCore13ShiftRegister10InitializeEv+0x112>
        continue;
    }
    m_latchedOutput = SERCOM6->SPI.DATA.reg ^ m_shiftInversions.reg;
    9988:	6a93      	ldr	r3, [r2, #40]	; 0x28
    m_lastOutput = m_pendingOutput;

    if (m_useAltOutput) {
    998a:	f890 210b 	ldrb.w	r2, [r0, #267]	; 0x10b
    m_lastOutput = m_pendingOutput;
    998e:	f8d0 110c 	ldr.w	r1, [r0, #268]	; 0x10c
    9992:	f8c0 1110 	str.w	r1, [r0, #272]	; 0x110
    m_latchedOutput = SERCOM6->SPI.DATA.reg ^ m_shiftInversions.reg;
    9996:	4063      	eors	r3, r4
    9998:	f8c0 3114 	str.w	r3, [r0, #276]	; 0x114
    if (m_useAltOutput) {
    999c:	bb7a      	cbnz	r2, 99fe <_ZN9ClearCore13ShiftRegister10InitializeEv+0x18e>
        output = m_altOutput;
    }
    else {
        // Start the output with the low priority mask
        output = m_patternOutputs[LED_BLINK_IO_SET];
    999e:	f8d0 30f4 	ldr.w	r3, [r0, #244]	; 0xf4
    99a2:	f8d0 10f8 	ldr.w	r1, [r0, #248]	; 0xf8
    99a6:	f8d0 70e8 	ldr.w	r7, [r0, #232]	; 0xe8
    99aa:	f8d0 50fc 	ldr.w	r5, [r0, #252]	; 0xfc
    99ae:	f8d0 60ec 	ldr.w	r6, [r0, #236]	; 0xec
    99b2:	f8d0 2100 	ldr.w	r2, [r0, #256]	; 0x100
    99b6:	4059      	eors	r1, r3
    99b8:	4039      	ands	r1, r7
        for (uint32_t i = LED_BLINK_IO_SET + 1; i < LED_BLINK_CODE_MAX; i++) {
            // AND in the inverse of the mask to clear out the lower priority
            // patterns.
            output &= ~m_patternMasks[i];
            // Set the output bits to the output of the pattern output.
            output |= m_patternOutputs[i] & m_patternMasks[i];
    99ba:	404b      	eors	r3, r1
    99bc:	ea83 0105 	eor.w	r1, r3, r5
    99c0:	4031      	ands	r1, r6
    99c2:	4059      	eors	r1, r3
    99c4:	f8d0 30f0 	ldr.w	r3, [r0, #240]	; 0xf0
        }

        if (m_blinkCodeActive) {
    99c8:	f890 5109 	ldrb.w	r5, [r0, #265]	; 0x109
    99cc:	404a      	eors	r2, r1
    99ce:	4013      	ands	r3, r2
            output |= m_patternOutputs[i] & m_patternMasks[i];
    99d0:	404b      	eors	r3, r1
        if (m_blinkCodeActive) {
    99d2:	b135      	cbz	r5, 99e2 <_ZN9ClearCore13ShiftRegister10InitializeEv+0x172>
            output &= ~SR_UNDERGLOW_MASK;
            if (m_blinkCodeState) {
    99d4:	f890 210a 	ldrb.w	r2, [r0, #266]	; 0x10a
            output &= ~SR_UNDERGLOW_MASK;
    99d8:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
            if (m_blinkCodeState) {
    99dc:	b10a      	cbz	r2, 99e2 <_ZN9ClearCore13ShiftRegister10InitializeEv+0x172>
                output |= SR_UNDERGLOW_MASK;
    99de:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
    m_pendingOutput = output;

    // Apply inversion
    output ^= m_shiftInversions.reg;

    SERCOM6->SPI.DATA.reg = output;
    99e2:	4d0b      	ldr	r5, [pc, #44]	; (9a10 <_ZN9ClearCore13ShiftRegister10InitializeEv+0x1a0>)
    DATA_OUTPUT_STATE(SR_ENn.gpioPort, 1UL << SR_ENn.gpioPin, false);
    99e4:	4909      	ldr	r1, [pc, #36]	; (9a0c <_ZN9ClearCore13ShiftRegister10InitializeEv+0x19c>)
    m_pendingOutput = output;
    99e6:	f8c0 310c 	str.w	r3, [r0, #268]	; 0x10c
    output ^= m_shiftInversions.reg;
    99ea:	4063      	eors	r3, r4
    DATA_OUTPUT_STATE(SR_ENn.gpioPort, 1UL << SR_ENn.gpioPin, false);
    99ec:	2402      	movs	r4, #2
    SERCOM6->SPI.DATA.reg = output;
    99ee:	62ab      	str	r3, [r5, #40]	; 0x28
    m_initialized = true;
    99f0:	2201      	movs	r2, #1
    DATA_OUTPUT_STATE(SR_ENn.gpioPort, 1UL << SR_ENn.gpioPin, false);
    99f2:	f8c1 4094 	str.w	r4, [r1, #148]	; 0x94
}
    99f6:	bcf0      	pop	{r4, r5, r6, r7}
    m_initialized = true;
    99f8:	f880 2108 	strb.w	r2, [r0, #264]	; 0x108
}
    99fc:	4770      	bx	lr
        output = m_altOutput;
    99fe:	f8d0 3104 	ldr.w	r3, [r0, #260]	; 0x104
    9a02:	e7ee      	b.n	99e2 <_ZN9ClearCore13ShiftRegister10InitializeEv+0x172>
    9a04:	40001c00 	.word	0x40001c00
    9a08:	40000800 	.word	0x40000800
    9a0c:	41008000 	.word	0x41008000
    9a10:	43000800 	.word	0x43000800

00009a14 <_ZN9ClearCore13ShiftRegister6UpdateEv>:
    if (!m_initialized) {
    9a14:	f890 3108 	ldrb.w	r3, [r0, #264]	; 0x108
    9a18:	2b00      	cmp	r3, #0
    9a1a:	d078      	beq.n	9b0e <_ZN9ClearCore13ShiftRegister6UpdateEv+0xfa>
            if (!count--) {
    9a1c:	6d83      	ldr	r3, [r0, #88]	; 0x58
    9a1e:	1e5a      	subs	r2, r3, #1
void ShiftRegister::Update() {
    9a20:	b4f0      	push	{r4, r5, r6, r7}
    9a22:	6582      	str	r2, [r0, #88]	; 0x58
    9a24:	b90b      	cbnz	r3, 9a2a <_ZN9ClearCore13ShiftRegister6UpdateEv+0x16>
                count = period;
    9a26:	6d02      	ldr	r2, [r0, #80]	; 0x50
    9a28:	6582      	str	r2, [r0, #88]	; 0x58
            return returnTable[count < cc];
    9a2a:	6d41      	ldr	r1, [r0, #84]	; 0x54

        uint32_t Update() {
            if (++m_count >= UINT8_MAX >> 2) {
    9a2c:	f890 3066 	ldrb.w	r3, [r0, #102]	; 0x66
            return returnTable[count < cc];
    9a30:	428a      	cmp	r2, r1
    9a32:	bf34      	ite	cc
    9a34:	220c      	movcc	r2, #12
    9a36:	2208      	movcs	r2, #8
    9a38:	4402      	add	r2, r0
            if (++m_count >= UINT8_MAX >> 2) {
    9a3a:	3301      	adds	r3, #1
    9a3c:	b2db      	uxtb	r3, r3
            return returnTable[count < cc];
    9a3e:	6d52      	ldr	r2, [r2, #84]	; 0x54
    m_patternOutputs[LED_BLINK_FAST_STROBE]  = m_fastCounter.Update();
    9a40:	f8c0 2100 	str.w	r2, [r0, #256]	; 0x100
            if (++m_count >= UINT8_MAX >> 2) {
    9a44:	2b3e      	cmp	r3, #62	; 0x3e
    9a46:	f880 3066 	strb.w	r3, [r0, #102]	; 0x66
    9a4a:	d961      	bls.n	9b10 <_ZN9ClearCore13ShiftRegister6UpdateEv+0xfc>
                m_count = 0;
                if (fadingIn) {
    9a4c:	f890 3068 	ldrb.w	r3, [r0, #104]	; 0x68
                    if (++m_compare >= m_maxValue) {
    9a50:	f890 1067 	ldrb.w	r1, [r0, #103]	; 0x67
                m_count = 0;
    9a54:	2400      	movs	r4, #0
    9a56:	f880 4066 	strb.w	r4, [r0, #102]	; 0x66
                if (fadingIn) {
    9a5a:	2b00      	cmp	r3, #0
    9a5c:	f000 817a 	beq.w	9d54 <_ZN9ClearCore13ShiftRegister6UpdateEv+0x340>
                    if (++m_compare >= m_maxValue) {
    9a60:	f890 3064 	ldrb.w	r3, [r0, #100]	; 0x64
    9a64:	3101      	adds	r1, #1
    9a66:	b2c9      	uxtb	r1, r1
    9a68:	4299      	cmp	r1, r3
    9a6a:	460a      	mov	r2, r1
    9a6c:	f880 1067 	strb.w	r1, [r0, #103]	; 0x67
    9a70:	f2c0 817e 	blt.w	9d70 <_ZN9ClearCore13ShiftRegister6UpdateEv+0x35c>
                        fadingIn = false;
    9a74:	f880 4068 	strb.w	r4, [r0, #104]	; 0x68
    9a78:	4623      	mov	r3, r4
    9a7a:	e04c      	b.n	9b16 <_ZN9ClearCore13ShiftRegister6UpdateEv+0x102>
                m_count = UINT8_MAX - 1;
    9a7c:	23fe      	movs	r3, #254	; 0xfe
                return 0;
    9a7e:	460a      	mov	r2, r1
                m_count = UINT8_MAX - 1;
    9a80:	f880 307c 	strb.w	r3, [r0, #124]	; 0x7c
    while (!(SERCOM6->SPI.INTFLAG.bit.TXC)) {
    9a84:	49b1      	ldr	r1, [pc, #708]	; (9d4c <_ZN9ClearCore13ShiftRegister6UpdateEv+0x338>)
    m_patternOutputs[LED_BLINK_FADE]         = m_fadeCounter.Update();
    9a86:	f8c0 20f8 	str.w	r2, [r0, #248]	; 0xf8
    while (!(SERCOM6->SPI.INTFLAG.bit.TXC)) {
    9a8a:	7e0b      	ldrb	r3, [r1, #24]
    9a8c:	079c      	lsls	r4, r3, #30
    9a8e:	d5fc      	bpl.n	9a8a <_ZN9ClearCore13ShiftRegister6UpdateEv+0x76>
    DATA_OUTPUT_STATE(SR_LOAD.gpioPort, 1UL << SR_LOAD.gpioPin, true);
    9a90:	4baf      	ldr	r3, [pc, #700]	; (9d50 <_ZN9ClearCore13ShiftRegister6UpdateEv+0x33c>)
    while (!(SERCOM6->SPI.INTFLAG.bit.RXC)) {
    9a92:	49ae      	ldr	r1, [pc, #696]	; (9d4c <_ZN9ClearCore13ShiftRegister6UpdateEv+0x338>)
    DATA_OUTPUT_STATE(SR_LOAD.gpioPort, 1UL << SR_LOAD.gpioPin, true);
    9a94:	2404      	movs	r4, #4
    9a96:	f8c3 4098 	str.w	r4, [r3, #152]	; 0x98
    DATA_OUTPUT_STATE(SR_LOAD.gpioPort, 1UL << SR_LOAD.gpioPin, false);
    9a9a:	f8c3 4094 	str.w	r4, [r3, #148]	; 0x94
    while (!(SERCOM6->SPI.INTFLAG.bit.RXC)) {
    9a9e:	7e0b      	ldrb	r3, [r1, #24]
    9aa0:	075b      	lsls	r3, r3, #29
    9aa2:	d5fc      	bpl.n	9a9e <_ZN9ClearCore13ShiftRegister6UpdateEv+0x8a>
    m_latchedOutput = SERCOM6->SPI.DATA.reg ^ m_shiftInversions.reg;
    9aa4:	6a8b      	ldr	r3, [r1, #40]	; 0x28
    9aa6:	f8d0 60e0 	ldr.w	r6, [r0, #224]	; 0xe0
    if (m_useAltOutput) {
    9aaa:	f890 110b 	ldrb.w	r1, [r0, #267]	; 0x10b
    m_lastOutput = m_pendingOutput;
    9aae:	f8d0 410c 	ldr.w	r4, [r0, #268]	; 0x10c
    9ab2:	f8c0 4110 	str.w	r4, [r0, #272]	; 0x110
    m_latchedOutput = SERCOM6->SPI.DATA.reg ^ m_shiftInversions.reg;
    9ab6:	4073      	eors	r3, r6
    9ab8:	f8c0 3114 	str.w	r3, [r0, #276]	; 0x114
    if (m_useAltOutput) {
    9abc:	2900      	cmp	r1, #0
    9abe:	f040 80d4 	bne.w	9c6a <_ZN9ClearCore13ShiftRegister6UpdateEv+0x256>
        output = m_patternOutputs[LED_BLINK_IO_SET];
    9ac2:	f8d0 30f4 	ldr.w	r3, [r0, #244]	; 0xf4
    9ac6:	f8d0 70e8 	ldr.w	r7, [r0, #232]	; 0xe8
    9aca:	f8d0 40fc 	ldr.w	r4, [r0, #252]	; 0xfc
    9ace:	f8d0 50ec 	ldr.w	r5, [r0, #236]	; 0xec
    9ad2:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
    9ad6:	405a      	eors	r2, r3
    9ad8:	403a      	ands	r2, r7
            output |= m_patternOutputs[i] & m_patternMasks[i];
    9ada:	4053      	eors	r3, r2
    9adc:	ea83 0204 	eor.w	r2, r3, r4
    9ae0:	402a      	ands	r2, r5
    9ae2:	405a      	eors	r2, r3
    9ae4:	f8d0 30f0 	ldr.w	r3, [r0, #240]	; 0xf0
        if (m_blinkCodeActive) {
    9ae8:	f890 4109 	ldrb.w	r4, [r0, #265]	; 0x109
    9aec:	4051      	eors	r1, r2
    9aee:	400b      	ands	r3, r1
            output |= m_patternOutputs[i] & m_patternMasks[i];
    9af0:	4053      	eors	r3, r2
        if (m_blinkCodeActive) {
    9af2:	b134      	cbz	r4, 9b02 <_ZN9ClearCore13ShiftRegister6UpdateEv+0xee>
            if (m_blinkCodeState) {
    9af4:	f890 210a 	ldrb.w	r2, [r0, #266]	; 0x10a
            output &= ~SR_UNDERGLOW_MASK;
    9af8:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
            if (m_blinkCodeState) {
    9afc:	b10a      	cbz	r2, 9b02 <_ZN9ClearCore13ShiftRegister6UpdateEv+0xee>
                output |= SR_UNDERGLOW_MASK;
    9afe:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
    SERCOM6->SPI.DATA.reg = output;
    9b02:	4a92      	ldr	r2, [pc, #584]	; (9d4c <_ZN9ClearCore13ShiftRegister6UpdateEv+0x338>)
    m_pendingOutput = output;
    9b04:	f8c0 310c 	str.w	r3, [r0, #268]	; 0x10c
    output ^= m_shiftInversions.reg;
    9b08:	4073      	eors	r3, r6
    SERCOM6->SPI.DATA.reg = output;
    9b0a:	6293      	str	r3, [r2, #40]	; 0x28
}
    9b0c:	bcf0      	pop	{r4, r5, r6, r7}
    9b0e:	4770      	bx	lr
    9b10:	f890 2067 	ldrb.w	r2, [r0, #103]	; 0x67
    9b14:	009b      	lsls	r3, r3, #2
                    if (--m_compare <= m_minValue) {
                        fadingIn = true;
                    }
                }
            }
            return returnTable[m_count << 2 < m_compare];
    9b16:	4293      	cmp	r3, r2
    9b18:	bfb4      	ite	lt
    9b1a:	230c      	movlt	r3, #12
    9b1c:	2308      	movge	r3, #8
    9b1e:	4403      	add	r3, r0
            if (!m_activeMask) {
    9b20:	f8b0 1074 	ldrh.w	r1, [r0, #116]	; 0x74
            return returnTable[m_count << 2 < m_compare];
    9b24:	6e5b      	ldr	r3, [r3, #100]	; 0x64
    m_patternOutputs[LED_BLINK_BREATHING]    = m_breathingCounter.Update();
    9b26:	f8c0 30fc 	str.w	r3, [r0, #252]	; 0xfc
            if (!m_activeMask) {
    9b2a:	2900      	cmp	r1, #0
    9b2c:	d0a6      	beq.n	9a7c <_ZN9ClearCore13ShiftRegister6UpdateEv+0x68>
            if (++m_count > UINT8_MAX >> 2) {
    9b2e:	f890 307c 	ldrb.w	r3, [r0, #124]	; 0x7c
            uint32_t retVal = m_lastOutput;
    9b32:	6f82      	ldr	r2, [r0, #120]	; 0x78
            if (++m_count > UINT8_MAX >> 2) {
    9b34:	3301      	adds	r3, #1
    9b36:	b2db      	uxtb	r3, r3
    9b38:	2b3f      	cmp	r3, #63	; 0x3f
    9b3a:	f880 307c 	strb.w	r3, [r0, #124]	; 0x7c
    9b3e:	f200 8097 	bhi.w	9c70 <_ZN9ClearCore13ShiftRegister6UpdateEv+0x25c>
                    if ((retVal & m_analogMasks[i]) &&
    9b42:	f8d0 10a0 	ldr.w	r1, [r0, #160]	; 0xa0
                uint8_t compare = m_count << 2;
    9b46:	009b      	lsls	r3, r3, #2
                    if ((retVal & m_analogMasks[i]) &&
    9b48:	420a      	tst	r2, r1
                uint8_t compare = m_count << 2;
    9b4a:	b2db      	uxtb	r3, r3
                    if ((retVal & m_analogMasks[i]) &&
    9b4c:	d004      	beq.n	9b58 <_ZN9ClearCore13ShiftRegister6UpdateEv+0x144>
                            (m_values[i] < compare)) {
    9b4e:	f890 407d 	ldrb.w	r4, [r0, #125]	; 0x7d
                    if ((retVal & m_analogMasks[i]) &&
    9b52:	429c      	cmp	r4, r3
                        retVal &= ~m_analogMasks[i];
    9b54:	bfb8      	it	lt
    9b56:	438a      	biclt	r2, r1
                    if ((retVal & m_analogMasks[i]) &&
    9b58:	f8d0 10a4 	ldr.w	r1, [r0, #164]	; 0xa4
    9b5c:	420a      	tst	r2, r1
    9b5e:	d004      	beq.n	9b6a <_ZN9ClearCore13ShiftRegister6UpdateEv+0x156>
                            (m_values[i] < compare)) {
    9b60:	f890 407e 	ldrb.w	r4, [r0, #126]	; 0x7e
                    if ((retVal & m_analogMasks[i]) &&
    9b64:	429c      	cmp	r4, r3
                        retVal &= ~m_analogMasks[i];
    9b66:	bfb8      	it	lt
    9b68:	438a      	biclt	r2, r1
                    if ((retVal & m_analogMasks[i]) &&
    9b6a:	f8d0 10a8 	ldr.w	r1, [r0, #168]	; 0xa8
    9b6e:	420a      	tst	r2, r1
    9b70:	d004      	beq.n	9b7c <_ZN9ClearCore13ShiftRegister6UpdateEv+0x168>
                            (m_values[i] < compare)) {
    9b72:	f890 407f 	ldrb.w	r4, [r0, #127]	; 0x7f
                    if ((retVal & m_analogMasks[i]) &&
    9b76:	429c      	cmp	r4, r3
                        retVal &= ~m_analogMasks[i];
    9b78:	bfb8      	it	lt
    9b7a:	438a      	biclt	r2, r1
                    if ((retVal & m_analogMasks[i]) &&
    9b7c:	f8d0 10ac 	ldr.w	r1, [r0, #172]	; 0xac
    9b80:	420a      	tst	r2, r1
    9b82:	d004      	beq.n	9b8e <_ZN9ClearCore13ShiftRegister6UpdateEv+0x17a>
                            (m_values[i] < compare)) {
    9b84:	f890 4080 	ldrb.w	r4, [r0, #128]	; 0x80
                    if ((retVal & m_analogMasks[i]) &&
    9b88:	429c      	cmp	r4, r3
                        retVal &= ~m_analogMasks[i];
    9b8a:	bfb8      	it	lt
    9b8c:	438a      	biclt	r2, r1
                    if ((retVal & m_analogMasks[i]) &&
    9b8e:	f8d0 10b0 	ldr.w	r1, [r0, #176]	; 0xb0
    9b92:	420a      	tst	r2, r1
    9b94:	d004      	beq.n	9ba0 <_ZN9ClearCore13ShiftRegister6UpdateEv+0x18c>
                            (m_values[i] < compare)) {
    9b96:	f890 4081 	ldrb.w	r4, [r0, #129]	; 0x81
                    if ((retVal & m_analogMasks[i]) &&
    9b9a:	429c      	cmp	r4, r3
                        retVal &= ~m_analogMasks[i];
    9b9c:	bfb8      	it	lt
    9b9e:	438a      	biclt	r2, r1
                    if ((retVal & m_analogMasks[i]) &&
    9ba0:	f8d0 10b4 	ldr.w	r1, [r0, #180]	; 0xb4
    9ba4:	420a      	tst	r2, r1
    9ba6:	d004      	beq.n	9bb2 <_ZN9ClearCore13ShiftRegister6UpdateEv+0x19e>
                            (m_values[i] < compare)) {
    9ba8:	f890 4082 	ldrb.w	r4, [r0, #130]	; 0x82
                    if ((retVal & m_analogMasks[i]) &&
    9bac:	429c      	cmp	r4, r3
                        retVal &= ~m_analogMasks[i];
    9bae:	bfb8      	it	lt
    9bb0:	438a      	biclt	r2, r1
                    if ((retVal & m_analogMasks[i]) &&
    9bb2:	f8d0 10b8 	ldr.w	r1, [r0, #184]	; 0xb8
    9bb6:	420a      	tst	r2, r1
    9bb8:	d004      	beq.n	9bc4 <_ZN9ClearCore13ShiftRegister6UpdateEv+0x1b0>
                            (m_values[i] < compare)) {
    9bba:	f890 4083 	ldrb.w	r4, [r0, #131]	; 0x83
                    if ((retVal & m_analogMasks[i]) &&
    9bbe:	429c      	cmp	r4, r3
                        retVal &= ~m_analogMasks[i];
    9bc0:	bfb8      	it	lt
    9bc2:	438a      	biclt	r2, r1
                    if ((retVal & m_analogMasks[i]) &&
    9bc4:	f8d0 10bc 	ldr.w	r1, [r0, #188]	; 0xbc
    9bc8:	420a      	tst	r2, r1
    9bca:	d004      	beq.n	9bd6 <_ZN9ClearCore13ShiftRegister6UpdateEv+0x1c2>
                            (m_values[i] < compare)) {
    9bcc:	f890 4084 	ldrb.w	r4, [r0, #132]	; 0x84
                    if ((retVal & m_analogMasks[i]) &&
    9bd0:	429c      	cmp	r4, r3
                        retVal &= ~m_analogMasks[i];
    9bd2:	bfb8      	it	lt
    9bd4:	438a      	biclt	r2, r1
                    if ((retVal & m_analogMasks[i]) &&
    9bd6:	f8d0 10c0 	ldr.w	r1, [r0, #192]	; 0xc0
    9bda:	420a      	tst	r2, r1
    9bdc:	d004      	beq.n	9be8 <_ZN9ClearCore13ShiftRegister6UpdateEv+0x1d4>
                            (m_values[i] < compare)) {
    9bde:	f890 4085 	ldrb.w	r4, [r0, #133]	; 0x85
                    if ((retVal & m_analogMasks[i]) &&
    9be2:	429c      	cmp	r4, r3
                        retVal &= ~m_analogMasks[i];
    9be4:	bfb8      	it	lt
    9be6:	438a      	biclt	r2, r1
                    if ((retVal & m_analogMasks[i]) &&
    9be8:	f8d0 10c4 	ldr.w	r1, [r0, #196]	; 0xc4
    9bec:	420a      	tst	r2, r1
    9bee:	d004      	beq.n	9bfa <_ZN9ClearCore13ShiftRegister6UpdateEv+0x1e6>
                            (m_values[i] < compare)) {
    9bf0:	f890 4086 	ldrb.w	r4, [r0, #134]	; 0x86
                    if ((retVal & m_analogMasks[i]) &&
    9bf4:	429c      	cmp	r4, r3
                        retVal &= ~m_analogMasks[i];
    9bf6:	bfb8      	it	lt
    9bf8:	438a      	biclt	r2, r1
                    if ((retVal & m_analogMasks[i]) &&
    9bfa:	f8d0 10c8 	ldr.w	r1, [r0, #200]	; 0xc8
    9bfe:	420a      	tst	r2, r1
    9c00:	d004      	beq.n	9c0c <_ZN9ClearCore13ShiftRegister6UpdateEv+0x1f8>
                            (m_values[i] < compare)) {
    9c02:	f890 4087 	ldrb.w	r4, [r0, #135]	; 0x87
                    if ((retVal & m_analogMasks[i]) &&
    9c06:	429c      	cmp	r4, r3
                        retVal &= ~m_analogMasks[i];
    9c08:	bfb8      	it	lt
    9c0a:	438a      	biclt	r2, r1
                    if ((retVal & m_analogMasks[i]) &&
    9c0c:	f8d0 10cc 	ldr.w	r1, [r0, #204]	; 0xcc
    9c10:	420a      	tst	r2, r1
    9c12:	d004      	beq.n	9c1e <_ZN9ClearCore13ShiftRegister6UpdateEv+0x20a>
                            (m_values[i] < compare)) {
    9c14:	f890 4088 	ldrb.w	r4, [r0, #136]	; 0x88
                    if ((retVal & m_analogMasks[i]) &&
    9c18:	429c      	cmp	r4, r3
                        retVal &= ~m_analogMasks[i];
    9c1a:	bfb8      	it	lt
    9c1c:	438a      	biclt	r2, r1
                    if ((retVal & m_analogMasks[i]) &&
    9c1e:	f8d0 10d0 	ldr.w	r1, [r0, #208]	; 0xd0
    9c22:	420a      	tst	r2, r1
    9c24:	d004      	beq.n	9c30 <_ZN9ClearCore13ShiftRegister6UpdateEv+0x21c>
                            (m_values[i] < compare)) {
    9c26:	f890 4089 	ldrb.w	r4, [r0, #137]	; 0x89
                    if ((retVal & m_analogMasks[i]) &&
    9c2a:	429c      	cmp	r4, r3
                        retVal &= ~m_analogMasks[i];
    9c2c:	bfb8      	it	lt
    9c2e:	438a      	biclt	r2, r1
                    if ((retVal & m_analogMasks[i]) &&
    9c30:	f8d0 10d4 	ldr.w	r1, [r0, #212]	; 0xd4
    9c34:	420a      	tst	r2, r1
    9c36:	d004      	beq.n	9c42 <_ZN9ClearCore13ShiftRegister6UpdateEv+0x22e>
                            (m_values[i] < compare)) {
    9c38:	f890 408a 	ldrb.w	r4, [r0, #138]	; 0x8a
                    if ((retVal & m_analogMasks[i]) &&
    9c3c:	429c      	cmp	r4, r3
                        retVal &= ~m_analogMasks[i];
    9c3e:	bfb8      	it	lt
    9c40:	438a      	biclt	r2, r1
                    if ((retVal & m_analogMasks[i]) &&
    9c42:	f8d0 10d8 	ldr.w	r1, [r0, #216]	; 0xd8
    9c46:	420a      	tst	r2, r1
    9c48:	d004      	beq.n	9c54 <_ZN9ClearCore13ShiftRegister6UpdateEv+0x240>
                            (m_values[i] < compare)) {
    9c4a:	f890 408b 	ldrb.w	r4, [r0, #139]	; 0x8b
                    if ((retVal & m_analogMasks[i]) &&
    9c4e:	429c      	cmp	r4, r3
                        retVal &= ~m_analogMasks[i];
    9c50:	bfb8      	it	lt
    9c52:	438a      	biclt	r2, r1
                    if ((retVal & m_analogMasks[i]) &&
    9c54:	f8d0 10dc 	ldr.w	r1, [r0, #220]	; 0xdc
    9c58:	4211      	tst	r1, r2
    9c5a:	d004      	beq.n	9c66 <_ZN9ClearCore13ShiftRegister6UpdateEv+0x252>
                            (m_values[i] < compare)) {
    9c5c:	f890 408c 	ldrb.w	r4, [r0, #140]	; 0x8c
                    if ((retVal & m_analogMasks[i]) &&
    9c60:	429c      	cmp	r4, r3
                        retVal &= ~m_analogMasks[i];
    9c62:	bfb8      	it	lt
    9c64:	438a      	biclt	r2, r1
            return m_lastOutput = retVal;
    9c66:	6782      	str	r2, [r0, #120]	; 0x78
    9c68:	e70c      	b.n	9a84 <_ZN9ClearCore13ShiftRegister6UpdateEv+0x70>
        output = m_altOutput;
    9c6a:	f8d0 3104 	ldr.w	r3, [r0, #260]	; 0x104
    9c6e:	e748      	b.n	9b02 <_ZN9ClearCore13ShiftRegister6UpdateEv+0xee>
                m_count = 0;
    9c70:	2300      	movs	r3, #0
                    if (m_activeMask & (1 << i) && m_valuesBuf[i]) {
    9c72:	f011 0201 	ands.w	r2, r1, #1
                m_count = 0;
    9c76:	f880 307c 	strb.w	r3, [r0, #124]	; 0x7c
                    if (m_activeMask & (1 << i) && m_valuesBuf[i]) {
    9c7a:	d004      	beq.n	9c86 <_ZN9ClearCore13ShiftRegister6UpdateEv+0x272>
    9c7c:	f890 208d 	ldrb.w	r2, [r0, #141]	; 0x8d
    9c80:	2a00      	cmp	r2, #0
    9c82:	f040 80cb 	bne.w	9e1c <_ZN9ClearCore13ShiftRegister6UpdateEv+0x408>
    9c86:	078b      	lsls	r3, r1, #30
    9c88:	d504      	bpl.n	9c94 <_ZN9ClearCore13ShiftRegister6UpdateEv+0x280>
    9c8a:	f890 308e 	ldrb.w	r3, [r0, #142]	; 0x8e
    9c8e:	2b00      	cmp	r3, #0
    9c90:	f040 80be 	bne.w	9e10 <_ZN9ClearCore13ShiftRegister6UpdateEv+0x3fc>
    9c94:	074f      	lsls	r7, r1, #29
    9c96:	d504      	bpl.n	9ca2 <_ZN9ClearCore13ShiftRegister6UpdateEv+0x28e>
    9c98:	f890 308f 	ldrb.w	r3, [r0, #143]	; 0x8f
    9c9c:	2b00      	cmp	r3, #0
    9c9e:	f040 80b1 	bne.w	9e04 <_ZN9ClearCore13ShiftRegister6UpdateEv+0x3f0>
    9ca2:	070e      	lsls	r6, r1, #28
    9ca4:	d504      	bpl.n	9cb0 <_ZN9ClearCore13ShiftRegister6UpdateEv+0x29c>
    9ca6:	f890 3090 	ldrb.w	r3, [r0, #144]	; 0x90
    9caa:	2b00      	cmp	r3, #0
    9cac:	f040 80a4 	bne.w	9df8 <_ZN9ClearCore13ShiftRegister6UpdateEv+0x3e4>
    9cb0:	06cd      	lsls	r5, r1, #27
    9cb2:	d504      	bpl.n	9cbe <_ZN9ClearCore13ShiftRegister6UpdateEv+0x2aa>
    9cb4:	f890 3091 	ldrb.w	r3, [r0, #145]	; 0x91
    9cb8:	2b00      	cmp	r3, #0
    9cba:	f040 8097 	bne.w	9dec <_ZN9ClearCore13ShiftRegister6UpdateEv+0x3d8>
    9cbe:	068c      	lsls	r4, r1, #26
    9cc0:	d504      	bpl.n	9ccc <_ZN9ClearCore13ShiftRegister6UpdateEv+0x2b8>
    9cc2:	f890 3092 	ldrb.w	r3, [r0, #146]	; 0x92
    9cc6:	2b00      	cmp	r3, #0
    9cc8:	f040 808a 	bne.w	9de0 <_ZN9ClearCore13ShiftRegister6UpdateEv+0x3cc>
    9ccc:	064b      	lsls	r3, r1, #25
    9cce:	d503      	bpl.n	9cd8 <_ZN9ClearCore13ShiftRegister6UpdateEv+0x2c4>
    9cd0:	f890 3093 	ldrb.w	r3, [r0, #147]	; 0x93
    9cd4:	2b00      	cmp	r3, #0
    9cd6:	d17d      	bne.n	9dd4 <_ZN9ClearCore13ShiftRegister6UpdateEv+0x3c0>
    9cd8:	060f      	lsls	r7, r1, #24
    9cda:	d503      	bpl.n	9ce4 <_ZN9ClearCore13ShiftRegister6UpdateEv+0x2d0>
    9cdc:	f890 3094 	ldrb.w	r3, [r0, #148]	; 0x94
    9ce0:	2b00      	cmp	r3, #0
    9ce2:	d171      	bne.n	9dc8 <_ZN9ClearCore13ShiftRegister6UpdateEv+0x3b4>
    9ce4:	05ce      	lsls	r6, r1, #23
    9ce6:	d503      	bpl.n	9cf0 <_ZN9ClearCore13ShiftRegister6UpdateEv+0x2dc>
    9ce8:	f890 3095 	ldrb.w	r3, [r0, #149]	; 0x95
    9cec:	2b00      	cmp	r3, #0
    9cee:	d165      	bne.n	9dbc <_ZN9ClearCore13ShiftRegister6UpdateEv+0x3a8>
    9cf0:	058d      	lsls	r5, r1, #22
    9cf2:	d503      	bpl.n	9cfc <_ZN9ClearCore13ShiftRegister6UpdateEv+0x2e8>
    9cf4:	f890 3096 	ldrb.w	r3, [r0, #150]	; 0x96
    9cf8:	2b00      	cmp	r3, #0
    9cfa:	d159      	bne.n	9db0 <_ZN9ClearCore13ShiftRegister6UpdateEv+0x39c>
    9cfc:	054c      	lsls	r4, r1, #21
    9cfe:	d503      	bpl.n	9d08 <_ZN9ClearCore13ShiftRegister6UpdateEv+0x2f4>
    9d00:	f890 3097 	ldrb.w	r3, [r0, #151]	; 0x97
    9d04:	2b00      	cmp	r3, #0
    9d06:	d14d      	bne.n	9da4 <_ZN9ClearCore13ShiftRegister6UpdateEv+0x390>
    9d08:	050b      	lsls	r3, r1, #20
    9d0a:	d503      	bpl.n	9d14 <_ZN9ClearCore13ShiftRegister6UpdateEv+0x300>
    9d0c:	f890 3098 	ldrb.w	r3, [r0, #152]	; 0x98
    9d10:	2b00      	cmp	r3, #0
    9d12:	d141      	bne.n	9d98 <_ZN9ClearCore13ShiftRegister6UpdateEv+0x384>
    9d14:	04cf      	lsls	r7, r1, #19
    9d16:	d503      	bpl.n	9d20 <_ZN9ClearCore13ShiftRegister6UpdateEv+0x30c>
    9d18:	f890 3099 	ldrb.w	r3, [r0, #153]	; 0x99
    9d1c:	2b00      	cmp	r3, #0
    9d1e:	d135      	bne.n	9d8c <_ZN9ClearCore13ShiftRegister6UpdateEv+0x378>
    9d20:	048e      	lsls	r6, r1, #18
    9d22:	d502      	bpl.n	9d2a <_ZN9ClearCore13ShiftRegister6UpdateEv+0x316>
    9d24:	f890 309a 	ldrb.w	r3, [r0, #154]	; 0x9a
    9d28:	bb53      	cbnz	r3, 9d80 <_ZN9ClearCore13ShiftRegister6UpdateEv+0x36c>
    9d2a:	044d      	lsls	r5, r1, #17
    9d2c:	d502      	bpl.n	9d34 <_ZN9ClearCore13ShiftRegister6UpdateEv+0x320>
    9d2e:	f890 309b 	ldrb.w	r3, [r0, #155]	; 0x9b
    9d32:	b9fb      	cbnz	r3, 9d74 <_ZN9ClearCore13ShiftRegister6UpdateEv+0x360>
    9d34:	0bcb      	lsrs	r3, r1, #15
    9d36:	d096      	beq.n	9c66 <_ZN9ClearCore13ShiftRegister6UpdateEv+0x252>
    9d38:	f890 309c 	ldrb.w	r3, [r0, #156]	; 0x9c
    9d3c:	2b00      	cmp	r3, #0
    9d3e:	d092      	beq.n	9c66 <_ZN9ClearCore13ShiftRegister6UpdateEv+0x252>
                        retVal |= m_analogMasks[i];
    9d40:	f8d0 10dc 	ldr.w	r1, [r0, #220]	; 0xdc
                        m_values[i] = m_valuesBuf[i];
    9d44:	f880 308c 	strb.w	r3, [r0, #140]	; 0x8c
                        retVal |= m_analogMasks[i];
    9d48:	430a      	orrs	r2, r1
    9d4a:	e78c      	b.n	9c66 <_ZN9ClearCore13ShiftRegister6UpdateEv+0x252>
    9d4c:	43000800 	.word	0x43000800
    9d50:	41008000 	.word	0x41008000
                    if (--m_compare <= m_minValue) {
    9d54:	f890 4065 	ldrb.w	r4, [r0, #101]	; 0x65
    9d58:	3901      	subs	r1, #1
    9d5a:	b2c9      	uxtb	r1, r1
    9d5c:	42a1      	cmp	r1, r4
    9d5e:	460a      	mov	r2, r1
    9d60:	f880 1067 	strb.w	r1, [r0, #103]	; 0x67
    9d64:	f73f aed7 	bgt.w	9b16 <_ZN9ClearCore13ShiftRegister6UpdateEv+0x102>
                        fadingIn = true;
    9d68:	2101      	movs	r1, #1
    9d6a:	f880 1068 	strb.w	r1, [r0, #104]	; 0x68
    9d6e:	e6d2      	b.n	9b16 <_ZN9ClearCore13ShiftRegister6UpdateEv+0x102>
                    if (++m_compare >= m_maxValue) {
    9d70:	4623      	mov	r3, r4
    9d72:	e6d0      	b.n	9b16 <_ZN9ClearCore13ShiftRegister6UpdateEv+0x102>
                        retVal |= m_analogMasks[i];
    9d74:	f8d0 40d8 	ldr.w	r4, [r0, #216]	; 0xd8
                        m_values[i] = m_valuesBuf[i];
    9d78:	f880 308b 	strb.w	r3, [r0, #139]	; 0x8b
                        retVal |= m_analogMasks[i];
    9d7c:	4322      	orrs	r2, r4
    9d7e:	e7d9      	b.n	9d34 <_ZN9ClearCore13ShiftRegister6UpdateEv+0x320>
    9d80:	f8d0 40d4 	ldr.w	r4, [r0, #212]	; 0xd4
                        m_values[i] = m_valuesBuf[i];
    9d84:	f880 308a 	strb.w	r3, [r0, #138]	; 0x8a
                        retVal |= m_analogMasks[i];
    9d88:	4322      	orrs	r2, r4
    9d8a:	e7ce      	b.n	9d2a <_ZN9ClearCore13ShiftRegister6UpdateEv+0x316>
    9d8c:	f8d0 40d0 	ldr.w	r4, [r0, #208]	; 0xd0
                        m_values[i] = m_valuesBuf[i];
    9d90:	f880 3089 	strb.w	r3, [r0, #137]	; 0x89
                        retVal |= m_analogMasks[i];
    9d94:	4322      	orrs	r2, r4
    9d96:	e7c3      	b.n	9d20 <_ZN9ClearCore13ShiftRegister6UpdateEv+0x30c>
    9d98:	f8d0 40cc 	ldr.w	r4, [r0, #204]	; 0xcc
                        m_values[i] = m_valuesBuf[i];
    9d9c:	f880 3088 	strb.w	r3, [r0, #136]	; 0x88
                        retVal |= m_analogMasks[i];
    9da0:	4322      	orrs	r2, r4
    9da2:	e7b7      	b.n	9d14 <_ZN9ClearCore13ShiftRegister6UpdateEv+0x300>
    9da4:	f8d0 40c8 	ldr.w	r4, [r0, #200]	; 0xc8
                        m_values[i] = m_valuesBuf[i];
    9da8:	f880 3087 	strb.w	r3, [r0, #135]	; 0x87
                        retVal |= m_analogMasks[i];
    9dac:	4322      	orrs	r2, r4
    9dae:	e7ab      	b.n	9d08 <_ZN9ClearCore13ShiftRegister6UpdateEv+0x2f4>
    9db0:	f8d0 40c4 	ldr.w	r4, [r0, #196]	; 0xc4
                        m_values[i] = m_valuesBuf[i];
    9db4:	f880 3086 	strb.w	r3, [r0, #134]	; 0x86
                        retVal |= m_analogMasks[i];
    9db8:	4322      	orrs	r2, r4
    9dba:	e79f      	b.n	9cfc <_ZN9ClearCore13ShiftRegister6UpdateEv+0x2e8>
    9dbc:	f8d0 40c0 	ldr.w	r4, [r0, #192]	; 0xc0
                        m_values[i] = m_valuesBuf[i];
    9dc0:	f880 3085 	strb.w	r3, [r0, #133]	; 0x85
                        retVal |= m_analogMasks[i];
    9dc4:	4322      	orrs	r2, r4
    9dc6:	e793      	b.n	9cf0 <_ZN9ClearCore13ShiftRegister6UpdateEv+0x2dc>
    9dc8:	f8d0 40bc 	ldr.w	r4, [r0, #188]	; 0xbc
                        m_values[i] = m_valuesBuf[i];
    9dcc:	f880 3084 	strb.w	r3, [r0, #132]	; 0x84
                        retVal |= m_analogMasks[i];
    9dd0:	4322      	orrs	r2, r4
    9dd2:	e787      	b.n	9ce4 <_ZN9ClearCore13ShiftRegister6UpdateEv+0x2d0>
    9dd4:	f8d0 40b8 	ldr.w	r4, [r0, #184]	; 0xb8
                        m_values[i] = m_valuesBuf[i];
    9dd8:	f880 3083 	strb.w	r3, [r0, #131]	; 0x83
                        retVal |= m_analogMasks[i];
    9ddc:	4322      	orrs	r2, r4
    9dde:	e77b      	b.n	9cd8 <_ZN9ClearCore13ShiftRegister6UpdateEv+0x2c4>
    9de0:	f8d0 40b4 	ldr.w	r4, [r0, #180]	; 0xb4
                        m_values[i] = m_valuesBuf[i];
    9de4:	f880 3082 	strb.w	r3, [r0, #130]	; 0x82
                        retVal |= m_analogMasks[i];
    9de8:	4322      	orrs	r2, r4
    9dea:	e76f      	b.n	9ccc <_ZN9ClearCore13ShiftRegister6UpdateEv+0x2b8>
    9dec:	f8d0 40b0 	ldr.w	r4, [r0, #176]	; 0xb0
                        m_values[i] = m_valuesBuf[i];
    9df0:	f880 3081 	strb.w	r3, [r0, #129]	; 0x81
                        retVal |= m_analogMasks[i];
    9df4:	4322      	orrs	r2, r4
    9df6:	e762      	b.n	9cbe <_ZN9ClearCore13ShiftRegister6UpdateEv+0x2aa>
    9df8:	f8d0 40ac 	ldr.w	r4, [r0, #172]	; 0xac
                        m_values[i] = m_valuesBuf[i];
    9dfc:	f880 3080 	strb.w	r3, [r0, #128]	; 0x80
                        retVal |= m_analogMasks[i];
    9e00:	4322      	orrs	r2, r4
    9e02:	e755      	b.n	9cb0 <_ZN9ClearCore13ShiftRegister6UpdateEv+0x29c>
    9e04:	f8d0 40a8 	ldr.w	r4, [r0, #168]	; 0xa8
                        m_values[i] = m_valuesBuf[i];
    9e08:	f880 307f 	strb.w	r3, [r0, #127]	; 0x7f
                        retVal |= m_analogMasks[i];
    9e0c:	4322      	orrs	r2, r4
    9e0e:	e748      	b.n	9ca2 <_ZN9ClearCore13ShiftRegister6UpdateEv+0x28e>
    9e10:	f8d0 40a4 	ldr.w	r4, [r0, #164]	; 0xa4
                        m_values[i] = m_valuesBuf[i];
    9e14:	f880 307e 	strb.w	r3, [r0, #126]	; 0x7e
                        retVal |= m_analogMasks[i];
    9e18:	4322      	orrs	r2, r4
    9e1a:	e73b      	b.n	9c94 <_ZN9ClearCore13ShiftRegister6UpdateEv+0x280>
                        m_values[i] = m_valuesBuf[i];
    9e1c:	f880 207d 	strb.w	r2, [r0, #125]	; 0x7d
                        retVal |= m_analogMasks[i];
    9e20:	f8d0 20a0 	ldr.w	r2, [r0, #160]	; 0xa0
    9e24:	e72f      	b.n	9c86 <_ZN9ClearCore13ShiftRegister6UpdateEv+0x272>
    9e26:	bf00      	nop

00009e28 <_ZN9ClearCore13ShiftRegister18DiagnosticLedSweepEv>:
}

/**
    Turn all of the LEDs on briefly so the user can see that they all work.
**/
void ShiftRegister::DiagnosticLedSweep() {
    9e28:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    m_altOutput = 0;
    m_useAltOutput = true;
    9e2c:	2301      	movs	r3, #1
    9e2e:	f100 0834 	add.w	r8, r0, #52	; 0x34
    9e32:	4e4d      	ldr	r6, [pc, #308]	; (9f68 <_ZN9ClearCore13ShiftRegister18DiagnosticLedSweepEv+0x140>)
    9e34:	f880 310b 	strb.w	r3, [r0, #267]	; 0x10b
void ShiftRegister::DiagnosticLedSweep() {
    9e38:	b083      	sub	sp, #12
    9e3a:	4681      	mov	r9, r0
    m_useAltOutput = true;
    9e3c:	4645      	mov	r5, r8
    9e3e:	f100 0444 	add.w	r4, r0, #68	; 0x44
    9e42:	2200      	movs	r2, #0
    9e44:	2700      	movs	r7, #0
    // Illuminate bank 2
    for (uint8_t i = 0; i < LED_BANK_2_LEN; i++) {
        m_altOutput |= LED_BANK_2[i];
    9e46:	f855 3b04 	ldr.w	r3, [r5], #4
    9e4a:	4313      	orrs	r3, r2
    9e4c:	f8c9 3104 	str.w	r3, [r9, #260]	; 0x104
    9e50:	4630      	mov	r0, r6
    9e52:	4639      	mov	r1, r7
    9e54:	f7fe fc5c 	bl	8710 <Delay_cycles>
    for (uint8_t i = 0; i < LED_BANK_2_LEN; i++) {
    9e58:	42a5      	cmp	r5, r4
    9e5a:	d002      	beq.n	9e62 <_ZN9ClearCore13ShiftRegister18DiagnosticLedSweepEv+0x3a>
    9e5c:	f8d9 2104 	ldr.w	r2, [r9, #260]	; 0x104
    9e60:	e7f1      	b.n	9e46 <_ZN9ClearCore13ShiftRegister18DiagnosticLedSweepEv+0x1e>
    9e62:	f109 0318 	add.w	r3, r9, #24
    9e66:	4e40      	ldr	r6, [pc, #256]	; (9f68 <_ZN9ClearCore13ShiftRegister18DiagnosticLedSweepEv+0x140>)
    9e68:	9301      	str	r3, [sp, #4]
    9e6a:	469b      	mov	fp, r3
    9e6c:	f04f 0a00 	mov.w	sl, #0
    9e70:	2700      	movs	r7, #0

    // Illuminate bank 0 and 1 simultaneously
    uint8_t largerBankLen = (LED_BANK_1_LEN > LED_BANK_0_LEN) ? LED_BANK_1_LEN
                            : LED_BANK_0_LEN;
    for (uint8_t i = 0; i < largerBankLen; i++) {
        if (i < LED_BANK_0_LEN) {
    9e72:	f1ba 0f06 	cmp.w	sl, #6
    9e76:	4630      	mov	r0, r6
    9e78:	4639      	mov	r1, r7
    9e7a:	f10a 0a01 	add.w	sl, sl, #1
    9e7e:	d148      	bne.n	9f12 <_ZN9ClearCore13ShiftRegister18DiagnosticLedSweepEv+0xea>
            m_altOutput |= LED_BANK_0[i];
        }
        if (i < LED_BANK_1_LEN) {
            m_altOutput |= LED_BANK_1[i];
    9e80:	f8db 2000 	ldr.w	r2, [fp]
    9e84:	f8d9 3104 	ldr.w	r3, [r9, #260]	; 0x104
    9e88:	4837      	ldr	r0, [pc, #220]	; (9f68 <_ZN9ClearCore13ShiftRegister18DiagnosticLedSweepEv+0x140>)
    9e8a:	4313      	orrs	r3, r2
    9e8c:	f8c9 3104 	str.w	r3, [r9, #260]	; 0x104
    9e90:	2100      	movs	r1, #0
    9e92:	f7fe fc3d 	bl	8710 <Delay_cycles>
    9e96:	4835      	ldr	r0, [pc, #212]	; (9f6c <_ZN9ClearCore13ShiftRegister18DiagnosticLedSweepEv+0x144>)
    9e98:	4e33      	ldr	r6, [pc, #204]	; (9f68 <_ZN9ClearCore13ShiftRegister18DiagnosticLedSweepEv+0x140>)
    9e9a:	2100      	movs	r1, #0
    9e9c:	f7fe fc38 	bl	8710 <Delay_cycles>
    9ea0:	2700      	movs	r7, #0

    Delay_ms(50);

    // Turn them off the same way they were turned on
    for (uint8_t i = 0; i < LED_BANK_2_LEN; i++) {
        m_altOutput &= ~LED_BANK_2[i];
    9ea2:	f858 2b04 	ldr.w	r2, [r8], #4
    9ea6:	f8d9 3104 	ldr.w	r3, [r9, #260]	; 0x104
    9eaa:	ea23 0302 	bic.w	r3, r3, r2
    9eae:	f8c9 3104 	str.w	r3, [r9, #260]	; 0x104
    9eb2:	4630      	mov	r0, r6
    9eb4:	4639      	mov	r1, r7
    9eb6:	f7fe fc2b 	bl	8710 <Delay_cycles>
    for (uint8_t i = 0; i < LED_BANK_2_LEN; i++) {
    9eba:	4545      	cmp	r5, r8
    9ebc:	d1f1      	bne.n	9ea2 <_ZN9ClearCore13ShiftRegister18DiagnosticLedSweepEv+0x7a>
        \brief Atomic set of shift register state fields.

        \param[in] bitsToSet LED bit in the shift register to be set.
    **/
    void ShifterStateSet(Masks bitsToSet) {
        atomic_or_fetch(&m_patternOutputs[LED_BLINK_IO_SET], bitsToSet);
    9ebe:	f3bf 8f5b 	dmb	ish
    9ec2:	f109 03f4 	add.w	r3, r9, #244	; 0xf4
    9ec6:	e853 2f00 	ldrex	r2, [r3]
    9eca:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
    9ece:	e843 2100 	strex	r1, r2, [r3]
    9ed2:	2900      	cmp	r1, #0
    9ed4:	d1f7      	bne.n	9ec6 <_ZN9ClearCore13ShiftRegister18DiagnosticLedSweepEv+0x9e>
    9ed6:	f3bf 8f5b 	dmb	ish
    9eda:	4e23      	ldr	r6, [pc, #140]	; (9f68 <_ZN9ClearCore13ShiftRegister18DiagnosticLedSweepEv+0x140>)
    9edc:	2500      	movs	r5, #0
    9ede:	2700      	movs	r7, #0
    9ee0:	9b01      	ldr	r3, [sp, #4]
    }

    ShifterStateSet(SR_UNDERGLOW_MASK);

    for (uint8_t i = 0; i < largerBankLen; i++) {
        if (i < LED_BANK_0_LEN) {
    9ee2:	2d06      	cmp	r5, #6
    9ee4:	461a      	mov	r2, r3
    9ee6:	4630      	mov	r0, r6
    9ee8:	4639      	mov	r1, r7
    9eea:	f105 0501 	add.w	r5, r5, #1
    9eee:	d122      	bne.n	9f36 <_ZN9ClearCore13ShiftRegister18DiagnosticLedSweepEv+0x10e>
            m_altOutput &= ~LED_BANK_0[i];
        }
        if (i < LED_BANK_1_LEN) {
            m_altOutput &= ~LED_BANK_1[i];
    9ef0:	681a      	ldr	r2, [r3, #0]
    9ef2:	f8d9 3104 	ldr.w	r3, [r9, #260]	; 0x104
    9ef6:	481c      	ldr	r0, [pc, #112]	; (9f68 <_ZN9ClearCore13ShiftRegister18DiagnosticLedSweepEv+0x140>)
    9ef8:	ea23 0302 	bic.w	r3, r3, r2
    9efc:	f8c9 3104 	str.w	r3, [r9, #260]	; 0x104
    9f00:	2100      	movs	r1, #0
    9f02:	f7fe fc05 	bl	8710 <Delay_cycles>
        }

        Delay_ms(DELAY_TIME);
    }
    m_useAltOutput = false;
    9f06:	2300      	movs	r3, #0
    9f08:	f889 310b 	strb.w	r3, [r9, #267]	; 0x10b
}
    9f0c:	b003      	add	sp, #12
    9f0e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
            m_altOutput |= LED_BANK_0[i];
    9f12:	f85b 3c18 	ldr.w	r3, [fp, #-24]
    9f16:	f8d9 4104 	ldr.w	r4, [r9, #260]	; 0x104
            m_altOutput |= LED_BANK_1[i];
    9f1a:	f8db 2000 	ldr.w	r2, [fp]
            m_altOutput |= LED_BANK_0[i];
    9f1e:	4323      	orrs	r3, r4
            m_altOutput |= LED_BANK_1[i];
    9f20:	4313      	orrs	r3, r2
    9f22:	f8c9 3104 	str.w	r3, [r9, #260]	; 0x104
    9f26:	f7fe fbf3 	bl	8710 <Delay_cycles>
    for (uint8_t i = 0; i < largerBankLen; i++) {
    9f2a:	f1ba 0f07 	cmp.w	sl, #7
    9f2e:	f10b 0b04 	add.w	fp, fp, #4
    9f32:	d19e      	bne.n	9e72 <_ZN9ClearCore13ShiftRegister18DiagnosticLedSweepEv+0x4a>
    9f34:	e7af      	b.n	9e96 <_ZN9ClearCore13ShiftRegister18DiagnosticLedSweepEv+0x6e>
            m_altOutput &= ~LED_BANK_0[i];
    9f36:	f853 3c18 	ldr.w	r3, [r3, #-24]
    9f3a:	f8d9 4104 	ldr.w	r4, [r9, #260]	; 0x104
            m_altOutput &= ~LED_BANK_1[i];
    9f3e:	6812      	ldr	r2, [r2, #0]
            m_altOutput &= ~LED_BANK_0[i];
    9f40:	ea24 0303 	bic.w	r3, r4, r3
            m_altOutput &= ~LED_BANK_1[i];
    9f44:	ea23 0302 	bic.w	r3, r3, r2
    9f48:	f8c9 3104 	str.w	r3, [r9, #260]	; 0x104
    9f4c:	9b01      	ldr	r3, [sp, #4]
    9f4e:	3304      	adds	r3, #4
    9f50:	9301      	str	r3, [sp, #4]
    9f52:	f7fe fbdd 	bl	8710 <Delay_cycles>
    for (uint8_t i = 0; i < largerBankLen; i++) {
    9f56:	2d07      	cmp	r5, #7
    9f58:	d1c2      	bne.n	9ee0 <_ZN9ClearCore13ShiftRegister18DiagnosticLedSweepEv+0xb8>
    m_useAltOutput = false;
    9f5a:	2300      	movs	r3, #0
    9f5c:	f889 310b 	strb.w	r3, [r9, #267]	; 0x10b
}
    9f60:	b003      	add	sp, #12
    9f62:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    9f66:	bf00      	nop
    9f68:	002dc6c0 	.word	0x002dc6c0
    9f6c:	005b8d80 	.word	0x005b8d80

00009f70 <_ZN9ClearCore12MotorManager8InstanceEv>:
extern MotorDriver *const MotorConnectors[MOTOR_CON_CNT];
extern ShiftRegister ShiftReg;

MotorManager &MotorMgr = MotorManager::Instance();

MotorManager &MotorManager::Instance() {
    9f70:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    static MotorManager *instance = new MotorManager();
    9f72:	4d0e      	ldr	r5, [pc, #56]	; (9fac <_ZN9ClearCore12MotorManager8InstanceEv+0x3c>)
    9f74:	682b      	ldr	r3, [r5, #0]
    9f76:	f013 0401 	ands.w	r4, r3, #1
    9f7a:	d002      	beq.n	9f82 <_ZN9ClearCore12MotorManager8InstanceEv+0x12>
    9f7c:	4b0c      	ldr	r3, [pc, #48]	; (9fb0 <_ZN9ClearCore12MotorManager8InstanceEv+0x40>)
    9f7e:	6818      	ldr	r0, [r3, #0]
    9f80:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    9f82:	2010      	movs	r0, #16
    9f84:	f012 fedc 	bl	1cd40 <_Znwj>
    Construct and wire in our output pins
**/
MotorManager::MotorManager()
    : m_gclkIndex(MAIN_INTERRUPT_GCLK_ID),
      m_clockRate(CLOCK_RATE_NORMAL),
      m_initialized(false) {
    9f88:	2301      	movs	r3, #1
    static MotorManager *instance = new MotorManager();
    9f8a:	4909      	ldr	r1, [pc, #36]	; (9fb0 <_ZN9ClearCore12MotorManager8InstanceEv+0x40>)
      m_initialized(false) {
    9f8c:	7003      	strb	r3, [r0, #0]
    m_stepPorts[MOTOR_M0M1] =  Mtr_CLK_01.gpioPort;
    m_stepPorts[MOTOR_M2M3] = Mtr_CLK_23.gpioPort;
    m_stepDataBits[MOTOR_M0M1] = Mtr_CLK_01.gpioPin;
    m_stepDataBits[MOTOR_M2M3] = Mtr_CLK_23.gpioPin;
    m_motorModes[MOTOR_M0M1] = Connector::CPM_MODE_A_DIRECT_B_DIRECT;
    9f8e:	2209      	movs	r2, #9
    m_stepDataBits[MOTOR_M0M1] = Mtr_CLK_01.gpioPin;
    9f90:	271b      	movs	r7, #27
    m_stepDataBits[MOTOR_M2M3] = Mtr_CLK_23.gpioPin;
    9f92:	2617      	movs	r6, #23
      m_initialized(false) {
    9f94:	7384      	strb	r4, [r0, #14]
    m_stepPorts[MOTOR_M0M1] =  Mtr_CLK_01.gpioPort;
    9f96:	7084      	strb	r4, [r0, #2]
    m_stepDataBits[MOTOR_M0M1] = Mtr_CLK_01.gpioPin;
    9f98:	6047      	str	r7, [r0, #4]
    m_stepDataBits[MOTOR_M2M3] = Mtr_CLK_23.gpioPin;
    9f9a:	6086      	str	r6, [r0, #8]
    static MotorManager *instance = new MotorManager();
    9f9c:	6008      	str	r0, [r1, #0]
      m_initialized(false) {
    9f9e:	7043      	strb	r3, [r0, #1]
    m_stepPorts[MOTOR_M2M3] = Mtr_CLK_23.gpioPort;
    9fa0:	70c3      	strb	r3, [r0, #3]
    static MotorManager *instance = new MotorManager();
    9fa2:	602b      	str	r3, [r5, #0]
    m_motorModes[MOTOR_M0M1] = Connector::CPM_MODE_A_DIRECT_B_DIRECT;
    9fa4:	7302      	strb	r2, [r0, #12]
    m_motorModes[MOTOR_M2M3] = Connector::CPM_MODE_A_DIRECT_B_DIRECT;
    9fa6:	7342      	strb	r2, [r0, #13]
}
    9fa8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    9faa:	bf00      	nop
    9fac:	20001ca8 	.word	0x20001ca8
    9fb0:	20001cb0 	.word	0x20001cb0

00009fb4 <_ZN9ClearCore12MotorManager18MotorInputClockingENS0_15MotorClockRatesE>:
    Set the motor pulse rate.

    Returns true if successfully set.
**/
bool MotorManager::MotorInputClocking(MotorClockRates newRate) {
    if (m_clockRate == newRate && m_initialized) {
    9fb4:	7843      	ldrb	r3, [r0, #1]
    9fb6:	428b      	cmp	r3, r1
    9fb8:	d06d      	beq.n	a096 <_ZN9ClearCore12MotorManager18MotorInputClockingENS0_15MotorClockRatesE+0xe2>
    }

    uint32_t clkReq;
    bool modeValid = true;

    switch (newRate) {
    9fba:	2901      	cmp	r1, #1
bool MotorManager::MotorInputClocking(MotorClockRates newRate) {
    9fbc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    switch (newRate) {
    9fc0:	d071      	beq.n	a0a6 <_ZN9ClearCore12MotorManager18MotorInputClockingENS0_15MotorClockRatesE+0xf2>
    9fc2:	d363      	bcc.n	a08c <_ZN9ClearCore12MotorManager18MotorInputClockingENS0_15MotorClockRatesE+0xd8>
    9fc4:	2902      	cmp	r1, #2
    9fc6:	d16b      	bne.n	a0a0 <_ZN9ClearCore12MotorManager18MotorInputClockingENS0_15MotorClockRatesE+0xec>
            break;
        case CLOCK_RATE_NORMAL:
            clkReq = CPM_CLOCK_RATE_NORMAL_HZ;
            break;
        case CLOCK_RATE_HIGH:
            clkReq = CPM_CLOCK_RATE_HIGH_HZ;
    9fc8:	4e39      	ldr	r6, [pc, #228]	; (a0b0 <_ZN9ClearCore12MotorManager18MotorInputClockingENS0_15MotorClockRatesE+0xfc>)
    switch (newRate) {
    9fca:	f240 188f 	movw	r8, #399	; 0x18f
    9fce:	f44f 77c8 	mov.w	r7, #400	; 0x190

    // Mode change successful; update the step rate.
    m_clockRate = newRate;

    // Configure TCC0 for the step step carrier signal
    TCC0->CTRLA.bit.ENABLE = 0; // Disable TCC0
    9fd2:	4a38      	ldr	r2, [pc, #224]	; (a0b4 <_ZN9ClearCore12MotorManager18MotorInputClockingENS0_15MotorClockRatesE+0x100>)
    m_clockRate = newRate;
    9fd4:	7041      	strb	r1, [r0, #1]
    TCC0->CTRLA.bit.ENABLE = 0; // Disable TCC0
    9fd6:	6814      	ldr	r4, [r2, #0]
    TCC1->CTRLA.bit.ENABLE = 0; // Disable TCC1
    9fd8:	4b37      	ldr	r3, [pc, #220]	; (a0b8 <_ZN9ClearCore12MotorManager18MotorInputClockingENS0_15MotorClockRatesE+0x104>)
    TCC0->CTRLA.bit.ENABLE = 0; // Disable TCC0
    9fda:	f36f 0441 	bfc	r4, #1, #1
    9fde:	6014      	str	r4, [r2, #0]
    TCC1->CTRLA.bit.ENABLE = 0; // Disable TCC1
    9fe0:	681c      	ldr	r4, [r3, #0]
    9fe2:	f36f 0441 	bfc	r4, #1, #1
    9fe6:	601c      	str	r4, [r3, #0]

    SYNCBUSY_WAIT(TCC0, TCC_SYNCBUSY_ENABLE);
    9fe8:	6893      	ldr	r3, [r2, #8]
    9fea:	079c      	lsls	r4, r3, #30
    9fec:	d4fc      	bmi.n	9fe8 <_ZN9ClearCore12MotorManager18MotorInputClockingENS0_15MotorClockRatesE+0x34>
    SYNCBUSY_WAIT(TCC1, TCC_SYNCBUSY_ENABLE);
    9fee:	4d32      	ldr	r5, [pc, #200]	; (a0b8 <_ZN9ClearCore12MotorManager18MotorInputClockingENS0_15MotorClockRatesE+0x104>)
    9ff0:	68ac      	ldr	r4, [r5, #8]
    9ff2:	f014 0402 	ands.w	r4, r4, #2
    9ff6:	d1fb      	bne.n	9ff0 <_ZN9ClearCore12MotorManager18MotorInputClockingENS0_15MotorClockRatesE+0x3c>

    GClkFreqUpdate(m_gclkIndex, clkReq);
    9ff8:	4631      	mov	r1, r6
    9ffa:	7800      	ldrb	r0, [r0, #0]
    9ffc:	4e2f      	ldr	r6, [pc, #188]	; (a0bc <_ZN9ClearCore12MotorManager18MotorInputClockingENS0_15MotorClockRatesE+0x108>)
    9ffe:	f000 fe37 	bl	ac70 <GClkFreqUpdate>
    TCC0->COUNT.reg = 0;
    TCC1->COUNT.reg = 0;

    // Clear out any pending command
    for (int8_t iChannel = 0; iChannel < TCC0_CC_NUM; iChannel++) {
        TCC0->CC[iChannel].reg = 0;
    a002:	492f      	ldr	r1, [pc, #188]	; (a0c0 <_ZN9ClearCore12MotorManager18MotorInputClockingENS0_15MotorClockRatesE+0x10c>)
    a004:	4a2f      	ldr	r2, [pc, #188]	; (a0c4 <_ZN9ClearCore12MotorManager18MotorInputClockingENS0_15MotorClockRatesE+0x110>)
    TCC0->COUNT.reg = 0;
    a006:	4b2b      	ldr	r3, [pc, #172]	; (a0b4 <_ZN9ClearCore12MotorManager18MotorInputClockingENS0_15MotorClockRatesE+0x100>)
        TCC0->CC[iChannel].reg = 0;
    a008:	482f      	ldr	r0, [pc, #188]	; (a0c8 <_ZN9ClearCore12MotorManager18MotorInputClockingENS0_15MotorClockRatesE+0x114>)
    TCC0->COUNT.reg = 0;
    a00a:	635c      	str	r4, [r3, #52]	; 0x34
    TCC1->COUNT.reg = 0;
    a00c:	636c      	str	r4, [r5, #52]	; 0x34
        TCC0->CC[iChannel].reg = 0;
    a00e:	645c      	str	r4, [r3, #68]	; 0x44
        TCC0->CCBUF[iChannel].reg = 0;
    a010:	671c      	str	r4, [r3, #112]	; 0x70
        TCC0->CC[iChannel].reg = 0;
    a012:	644c      	str	r4, [r1, #68]	; 0x44
        TCC0->CCBUF[iChannel].reg = 0;
    a014:	670c      	str	r4, [r1, #112]	; 0x70
        TCC0->CC[iChannel].reg = 0;
    a016:	6454      	str	r4, [r2, #68]	; 0x44
        TCC0->CCBUF[iChannel].reg = 0;
    a018:	6714      	str	r4, [r2, #112]	; 0x70
        TCC0->CC[iChannel].reg = 0;
    a01a:	6444      	str	r4, [r0, #68]	; 0x44
        TCC0->CCBUF[iChannel].reg = 0;
    a01c:	6704      	str	r4, [r0, #112]	; 0x70
        TCC0->CC[iChannel].reg = 0;
    a01e:	650c      	str	r4, [r1, #80]	; 0x50
    }

    for (int8_t iChannel = 0; iChannel < TCC1_CC_NUM; iChannel++) {
        TCC1->CC[iChannel].reg = 0;
    a020:	f500 50ff 	add.w	r0, r0, #8160	; 0x1fe0
        TCC0->CCBUF[iChannel].reg = 0;
    a024:	67cc      	str	r4, [r1, #124]	; 0x7c
        TCC0->CC[iChannel].reg = 0;
    a026:	6514      	str	r4, [r2, #80]	; 0x50
        TCC1->CC[iChannel].reg = 0;
    a028:	f501 5100 	add.w	r1, r1, #8192	; 0x2000
        TCC0->CCBUF[iChannel].reg = 0;
    a02c:	67d4      	str	r4, [r2, #124]	; 0x7c
        TCC1->CC[iChannel].reg = 0;
    a02e:	f502 5200 	add.w	r2, r2, #8192	; 0x2000
    a032:	3018      	adds	r0, #24
    a034:	3104      	adds	r1, #4
    a036:	3204      	adds	r2, #4
    a038:	646c      	str	r4, [r5, #68]	; 0x44
        TCC1->CCBUF[iChannel].reg = 0;
    a03a:	672c      	str	r4, [r5, #112]	; 0x70
        TCC1->CC[iChannel].reg = 0;
    a03c:	6444      	str	r4, [r0, #68]	; 0x44
        TCC1->CCBUF[iChannel].reg = 0;
    a03e:	6704      	str	r4, [r0, #112]	; 0x70
        TCC1->CC[iChannel].reg = 0;
    a040:	644c      	str	r4, [r1, #68]	; 0x44
        TCC1->CCBUF[iChannel].reg = 0;
    a042:	670c      	str	r4, [r1, #112]	; 0x70
        TCC1->CC[iChannel].reg = 0;
    a044:	6454      	str	r4, [r2, #68]	; 0x44
        TCC1->CCBUF[iChannel].reg = 0;
    a046:	6714      	str	r4, [r2, #112]	; 0x70
    }

    TCC0->PER.reg = newPeriod - 1;
    a048:	f8c3 8040 	str.w	r8, [r3, #64]	; 0x40
    a04c:	f106 0410 	add.w	r4, r6, #16
    TCC1->PER.reg = newPeriod - 1;
    a050:	f8c5 8040 	str.w	r8, [r5, #64]	; 0x40

    // Notify the StepGenerators of the new maximum rate
    for (uint8_t iMotor = 0; iMotor < MOTOR_CON_CNT; iMotor++) {
        MotorConnectors[iMotor]->StepsPerSampleMaxSet(newPeriod);
    a054:	f856 0b04 	ldr.w	r0, [r6], #4
    a058:	4639      	mov	r1, r7
    a05a:	3030      	adds	r0, #48	; 0x30
    a05c:	f000 fc3c 	bl	a8d8 <_ZN9ClearCore13StepGenerator20StepsPerSampleMaxSetEm>
    for (uint8_t iMotor = 0; iMotor < MOTOR_CON_CNT; iMotor++) {
    a060:	42b4      	cmp	r4, r6
    a062:	d1f7      	bne.n	a054 <_ZN9ClearCore12MotorManager18MotorInputClockingENS0_15MotorClockRatesE+0xa0>
    }

    TCC0->CTRLA.bit.ENABLE = 1; // Enable TCC0
    a064:	4a13      	ldr	r2, [pc, #76]	; (a0b4 <_ZN9ClearCore12MotorManager18MotorInputClockingENS0_15MotorClockRatesE+0x100>)
    TCC1->CTRLA.bit.ENABLE = 1; // Enable TCC1
    a066:	4914      	ldr	r1, [pc, #80]	; (a0b8 <_ZN9ClearCore12MotorManager18MotorInputClockingENS0_15MotorClockRatesE+0x104>)
    TCC0->CTRLA.bit.ENABLE = 1; // Enable TCC0
    a068:	6813      	ldr	r3, [r2, #0]
    a06a:	f043 0302 	orr.w	r3, r3, #2
    a06e:	6013      	str	r3, [r2, #0]
    TCC1->CTRLA.bit.ENABLE = 1; // Enable TCC1
    a070:	680b      	ldr	r3, [r1, #0]
    a072:	f043 0302 	orr.w	r3, r3, #2
    a076:	600b      	str	r3, [r1, #0]

    SYNCBUSY_WAIT(TCC0, TCC_SYNCBUSY_ENABLE);
    a078:	6893      	ldr	r3, [r2, #8]
    a07a:	0799      	lsls	r1, r3, #30
    a07c:	d4fc      	bmi.n	a078 <_ZN9ClearCore12MotorManager18MotorInputClockingENS0_15MotorClockRatesE+0xc4>
    SYNCBUSY_WAIT(TCC1, TCC_SYNCBUSY_ENABLE);
    a07e:	4a0e      	ldr	r2, [pc, #56]	; (a0b8 <_ZN9ClearCore12MotorManager18MotorInputClockingENS0_15MotorClockRatesE+0x104>)
    a080:	6893      	ldr	r3, [r2, #8]
    a082:	079b      	lsls	r3, r3, #30
    a084:	d4fc      	bmi.n	a080 <_ZN9ClearCore12MotorManager18MotorInputClockingENS0_15MotorClockRatesE+0xcc>

    return true;
    a086:	2001      	movs	r0, #1
    a088:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    switch (newRate) {
    a08c:	f04f 0813 	mov.w	r8, #19
    a090:	2714      	movs	r7, #20
            clkReq = CPM_CLOCK_RATE_LOW_HZ;
    a092:	4e0e      	ldr	r6, [pc, #56]	; (a0cc <_ZN9ClearCore12MotorManager18MotorInputClockingENS0_15MotorClockRatesE+0x118>)
    a094:	e79d      	b.n	9fd2 <_ZN9ClearCore12MotorManager18MotorInputClockingENS0_15MotorClockRatesE+0x1e>
    if (m_clockRate == newRate && m_initialized) {
    a096:	7b83      	ldrb	r3, [r0, #14]
    a098:	2b00      	cmp	r3, #0
    a09a:	d08e      	beq.n	9fba <_ZN9ClearCore12MotorManager18MotorInputClockingENS0_15MotorClockRatesE+0x6>
        return false;
    a09c:	2000      	movs	r0, #0
    a09e:	4770      	bx	lr
        return false;
    a0a0:	2000      	movs	r0, #0
    a0a2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    switch (newRate) {
    a0a6:	f04f 0863 	mov.w	r8, #99	; 0x63
    a0aa:	2764      	movs	r7, #100	; 0x64
            clkReq = CPM_CLOCK_RATE_NORMAL_HZ;
    a0ac:	4e08      	ldr	r6, [pc, #32]	; (a0d0 <_ZN9ClearCore12MotorManager18MotorInputClockingENS0_15MotorClockRatesE+0x11c>)
    a0ae:	e790      	b.n	9fd2 <_ZN9ClearCore12MotorManager18MotorInputClockingENS0_15MotorClockRatesE+0x1e>
    a0b0:	001e8480 	.word	0x001e8480
    a0b4:	41016000 	.word	0x41016000
    a0b8:	41018000 	.word	0x41018000
    a0bc:	0002cd5c 	.word	0x0002cd5c
    a0c0:	41016004 	.word	0x41016004
    a0c4:	41016008 	.word	0x41016008
    a0c8:	4101600c 	.word	0x4101600c
    a0cc:	000186a0 	.word	0x000186a0
    a0d0:	0007a120 	.word	0x0007a120

0000a0d4 <_ZN9ClearCore12MotorManager10InitializeEv>:
            break;
    }
    return (m_motorModes[motorPair] == newMode);
}

void MotorManager::Initialize() {
    a0d4:	b570      	push	{r4, r5, r6, lr}
    m_motorModes[MOTOR_M0M1] = Connector::CPM_MODE_A_DIRECT_B_DIRECT;
    a0d6:	2309      	movs	r3, #9
void MotorManager::Initialize() {
    a0d8:	4605      	mov	r5, r0
    m_motorModes[MOTOR_M0M1] = Connector::CPM_MODE_A_DIRECT_B_DIRECT;
    a0da:	7303      	strb	r3, [r0, #12]
    m_motorModes[MOTOR_M2M3] = Connector::CPM_MODE_A_DIRECT_B_DIRECT;
    a0dc:	7343      	strb	r3, [r0, #13]
    MotorInputClocking(CLOCK_RATE_NORMAL); // This will set m_clockRate
    a0de:	2101      	movs	r1, #1
    a0e0:	f7ff ff68 	bl	9fb4 <_ZN9ClearCore12MotorManager18MotorInputClockingENS0_15MotorClockRatesE>

    for (uint8_t i = 0; i < NUM_MOTOR_PAIRS; i++) {
        // Configure the GClk output pin that will be used as the CPM step
        // output carrier signal
        PIN_CONFIGURATION(m_stepPorts[i], m_stepDataBits[i],  0);
    a0e4:	f995 2002 	ldrsb.w	r2, [r5, #2]
    a0e8:	6868      	ldr	r0, [r5, #4]
    a0ea:	01d2      	lsls	r2, r2, #7
    a0ec:	f102 4382 	add.w	r3, r2, #1090519040	; 0x41000000
    a0f0:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
    a0f4:	181c      	adds	r4, r3, r0
        DATA_OUTPUT_STATE(m_stepPorts[i], 1UL << m_stepDataBits[i], false);
    a0f6:	2101      	movs	r1, #1
    a0f8:	4081      	lsls	r1, r0
        PIN_CONFIGURATION(m_stepPorts[i], m_stepDataBits[i],  0);
    a0fa:	2600      	movs	r6, #0
    a0fc:	f884 6040 	strb.w	r6, [r4, #64]	; 0x40
        DATA_OUTPUT_STATE(m_stepPorts[i], 1UL << m_stepDataBits[i], false);
    a100:	6159      	str	r1, [r3, #20]
        PMUX_SELECTION(m_stepPorts[i], m_stepDataBits[i], PER_GCLK_AC);
    a102:	eb03 0350 	add.w	r3, r3, r0, lsr #1
    a106:	f010 0f01 	tst.w	r0, #1
    a10a:	f893 0030 	ldrb.w	r0, [r3, #48]	; 0x30
    a10e:	f04f 040c 	mov.w	r4, #12
    a112:	bf0c      	ite	eq
    a114:	f364 0003 	bfieq	r0, r4, #0, #4
    a118:	f364 1007 	bfine	r0, r4, #4, #4
    a11c:	f883 0030 	strb.w	r0, [r3, #48]	; 0x30
        DATA_DIRECTION_OUTPUT(m_stepPorts[i], 1UL << m_stepDataBits[i]);
    a120:	4b2d      	ldr	r3, [pc, #180]	; (a1d8 <_ZN9ClearCore12MotorManager10InitializeEv+0x104>)
    a122:	441a      	add	r2, r3
        DATA_OUTPUT_STATE(m_stepPorts[i], 1UL << m_stepDataBits[i], false);
    a124:	2001      	movs	r0, #1
        DATA_DIRECTION_OUTPUT(m_stepPorts[i], 1UL << m_stepDataBits[i]);
    a126:	6091      	str	r1, [r2, #8]
        PIN_CONFIGURATION(m_stepPorts[i], m_stepDataBits[i],  0);
    a128:	f995 2003 	ldrsb.w	r2, [r5, #3]
    a12c:	68a9      	ldr	r1, [r5, #8]
    a12e:	01d2      	lsls	r2, r2, #7
    a130:	4413      	add	r3, r2
    a132:	185c      	adds	r4, r3, r1
        DATA_OUTPUT_STATE(m_stepPorts[i], 1UL << m_stepDataBits[i], false);
    a134:	4088      	lsls	r0, r1
        PIN_CONFIGURATION(m_stepPorts[i], m_stepDataBits[i],  0);
    a136:	2600      	movs	r6, #0
    a138:	f884 6040 	strb.w	r6, [r4, #64]	; 0x40
        DATA_OUTPUT_STATE(m_stepPorts[i], 1UL << m_stepDataBits[i], false);
    a13c:	6158      	str	r0, [r3, #20]
        PMUX_SELECTION(m_stepPorts[i], m_stepDataBits[i], PER_GCLK_AC);
    a13e:	eb03 0351 	add.w	r3, r3, r1, lsr #1
    a142:	f011 0f01 	tst.w	r1, #1
    a146:	f893 1030 	ldrb.w	r1, [r3, #48]	; 0x30
    a14a:	4e24      	ldr	r6, [pc, #144]	; (a1dc <_ZN9ClearCore12MotorManager10InitializeEv+0x108>)
    a14c:	f04f 040c 	mov.w	r4, #12
    a150:	bf14      	ite	ne
    a152:	f364 1107 	bfine	r1, r4, #4, #4
    a156:	f364 0103 	bfieq	r1, r4, #0, #4
    a15a:	f883 1030 	strb.w	r1, [r3, #48]	; 0x30
        DATA_DIRECTION_OUTPUT(m_stepPorts[i], 1UL << m_stepDataBits[i]);
    a15e:	f102 4382 	add.w	r3, r2, #1090519040	; 0x41000000
    a162:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
    a166:	2400      	movs	r4, #0
    a168:	6098      	str	r0, [r3, #8]
    Helper function to control if the step rate signal is active
**/
void MotorManager::PinMuxSet() {
    // Configure the motor connectors to be in the specified mode
    for (uint8_t iMotor = 0; iMotor < MOTOR_CON_CNT; iMotor++) {
        MotorConnectors[iMotor]->Mode(m_motorModes[iMotor / 2]);
    a16a:	f856 0b04 	ldr.w	r0, [r6], #4
    a16e:	f3c4 0346 	ubfx	r3, r4, #1, #7
    a172:	6802      	ldr	r2, [r0, #0]
    a174:	442b      	add	r3, r5
    a176:	6852      	ldr	r2, [r2, #4]
    a178:	7b19      	ldrb	r1, [r3, #12]
    a17a:	3401      	adds	r4, #1
    a17c:	4790      	blx	r2
    for (uint8_t iMotor = 0; iMotor < MOTOR_CON_CNT; iMotor++) {
    a17e:	2c04      	cmp	r4, #4
    a180:	d1f3      	bne.n	a16a <_ZN9ClearCore12MotorManager10InitializeEv+0x96>
    }

    // Turn on the carrier signals for S&D if needed
    for (uint8_t iMotorPair = 0; iMotorPair < NUM_MOTOR_PAIRS; iMotorPair++) {
        if (m_motorModes[iMotorPair] == Connector::CPM_MODE_STEP_AND_DIR) {
    a182:	7b2b      	ldrb	r3, [r5, #12]
            PMUX_ENABLE(m_stepPorts[iMotorPair], m_stepDataBits[iMotorPair]);
    a184:	f995 2002 	ldrsb.w	r2, [r5, #2]
        if (m_motorModes[iMotorPair] == Connector::CPM_MODE_STEP_AND_DIR) {
    a188:	2b0a      	cmp	r3, #10
            PMUX_ENABLE(m_stepPorts[iMotorPair], m_stepDataBits[iMotorPair]);
    a18a:	686b      	ldr	r3, [r5, #4]
    a18c:	eb03 13c2 	add.w	r3, r3, r2, lsl #7
    a190:	f103 4382 	add.w	r3, r3, #1090519040	; 0x41000000
    a194:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
    a198:	f893 2040 	ldrb.w	r2, [r3, #64]	; 0x40
        }
        else {
            PMUX_DISABLE(m_stepPorts[iMotorPair], m_stepDataBits[iMotorPair]);
    a19c:	bf14      	ite	ne
    a19e:	f36f 0200 	bfcne	r2, #0, #1
            PMUX_ENABLE(m_stepPorts[iMotorPair], m_stepDataBits[iMotorPair]);
    a1a2:	f042 0201 	orreq.w	r2, r2, #1
    a1a6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        if (m_motorModes[iMotorPair] == Connector::CPM_MODE_STEP_AND_DIR) {
    a1aa:	7b6b      	ldrb	r3, [r5, #13]
            PMUX_ENABLE(m_stepPorts[iMotorPair], m_stepDataBits[iMotorPair]);
    a1ac:	f995 2003 	ldrsb.w	r2, [r5, #3]
        if (m_motorModes[iMotorPair] == Connector::CPM_MODE_STEP_AND_DIR) {
    a1b0:	2b0a      	cmp	r3, #10
            PMUX_ENABLE(m_stepPorts[iMotorPair], m_stepDataBits[iMotorPair]);
    a1b2:	68ab      	ldr	r3, [r5, #8]
    a1b4:	eb03 13c2 	add.w	r3, r3, r2, lsl #7
    a1b8:	f103 4382 	add.w	r3, r3, #1090519040	; 0x41000000
    a1bc:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
    a1c0:	f893 2040 	ldrb.w	r2, [r3, #64]	; 0x40
    a1c4:	bf0c      	ite	eq
    a1c6:	f042 0201 	orreq.w	r2, r2, #1
            PMUX_DISABLE(m_stepPorts[iMotorPair], m_stepDataBits[iMotorPair]);
    a1ca:	f36f 0200 	bfcne	r2, #0, #1
    a1ce:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    m_initialized = true;
    a1d2:	2301      	movs	r3, #1
    a1d4:	73ab      	strb	r3, [r5, #14]
    a1d6:	bd70      	pop	{r4, r5, r6, pc}
    a1d8:	41008000 	.word	0x41008000
    a1dc:	0002cd5c 	.word	0x0002cd5c

0000a1e0 <_GLOBAL__sub_I__ZN9ClearCore8MotorMgrE>:
        }
    }
}

    a1e0:	b508      	push	{r3, lr}
MotorManager &MotorMgr = MotorManager::Instance();
    a1e2:	f7ff fec5 	bl	9f70 <_ZN9ClearCore12MotorManager8InstanceEv>
    a1e6:	4b01      	ldr	r3, [pc, #4]	; (a1ec <_GLOBAL__sub_I__ZN9ClearCore8MotorMgrE+0xc>)
    a1e8:	6018      	str	r0, [r3, #0]
    a1ea:	bd08      	pop	{r3, pc}
    a1ec:	20001cac 	.word	0x20001cac

0000a1f0 <_ZN9ClearCore13StepGenerator4MoveElNS0_10MoveTargetE>:
/*
    This function commands a directional move.

    The function will return true if the move was accepted.
*/
bool StepGenerator::Move(int32_t dist, MoveTarget moveTarget) {
    a1f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    a1f2:	4604      	mov	r4, r0
  __ASM volatile ("cpsid i" : : : "memory");
    a1f4:	b672      	cpsid	i

    // Block the interrupt while changing the command
    __disable_irq();
    // Make relative moves be based off of current position during a velocity
    // move
    if (m_velocityMove) {
    a1f6:	f890 3020 	ldrb.w	r3, [r0, #32]
    a1fa:	b113      	cbz	r3, a202 <_ZN9ClearCore13StepGenerator4MoveElNS0_10MoveTargetE+0x12>
        m_stepsCommanded = 0;
    a1fc:	2300      	movs	r3, #0
    a1fe:	6183      	str	r3, [r0, #24]
        m_stepsSent = 0;
    a200:	61c3      	str	r3, [r0, #28]
    }
    switch (moveTarget) {
    a202:	b362      	cbz	r2, a25e <_ZN9ClearCore13StepGenerator4MoveElNS0_10MoveTargetE+0x6e>
            // overflow, the scale shifts by the number of steps taken
            // So account for this, the current steps should be taken off of the
            // previous commanded amount, then the new command should be added
            // The steps send are in the direction of the commanded steps, subtract
            // that first. Steps taken is always less than commanded, result (+)
            m_stepsCommanded -= m_stepsSent;
    a204:	69a0      	ldr	r0, [r4, #24]
    a206:	69e2      	ldr	r2, [r4, #28]
            // Convert magnitude + direction format to signed int
            m_stepsCommanded = m_direction ? -m_stepsCommanded : m_stepsCommanded ;
    a208:	7b63      	ldrb	r3, [r4, #13]
            m_stepsCommanded -= m_stepsSent;
    a20a:	1a80      	subs	r0, r0, r2
            m_stepsCommanded = m_direction ? -m_stepsCommanded : m_stepsCommanded ;
    a20c:	bb2b      	cbnz	r3, a25a <_ZN9ClearCore13StepGenerator4MoveElNS0_10MoveTargetE+0x6a>
            // Now stepsCommanded and distance are signed and in the global
            // direction. Add them
            m_stepsCommanded += dist;
    a20e:	4408      	add	r0, r1
    // reduce chance of overflow
    m_stepsSent = 0;

    // Zero the integer portion of the current position. We want to keep
    // partial steps so movement is smooth.
    m_posnCurrentQx = m_posnCurrentQx & ~(UINT64_MAX << FRACT_BITS);
    a210:	e9d4 230e 	ldrd	r2, r3, [r4, #56]	; 0x38
    a214:	f647 76ff 	movw	r6, #32767	; 0x7fff
    a218:	2700      	movs	r7, #0
    a21a:	4032      	ands	r2, r6
    a21c:	403b      	ands	r3, r7
    m_stepsSent = 0;
    a21e:	2500      	movs	r5, #0

    // Determine the direction of the movements.
    m_dirCommanded = m_stepsCommanded < 0;
    a220:	0fc1      	lsrs	r1, r0, #31
    m_posnCurrentQx = m_posnCurrentQx & ~(UINT64_MAX << FRACT_BITS);
    a222:	e9c4 230e 	strd	r2, r3, [r4, #56]	; 0x38
    m_stepsSent = 0;
    a226:	61e5      	str	r5, [r4, #28]
    m_dirCommanded = m_stepsCommanded < 0;
    a228:	f884 1022 	strb.w	r1, [r4, #34]	; 0x22
  template<typename _Tp>
    inline _GLIBCXX_CONSTEXPR
    typename __gnu_cxx::__enable_if<__is_integer<_Tp>::__value,
                                    double>::__type
    abs(_Tp __x)
    { return __builtin_fabs(__x); }
    a22c:	f01b f8f0 	bl	25410 <__aeabi_i2d>
    a230:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000

    // Steps commanded now needs to be a positive value.
    m_stepsCommanded = abs(m_stepsCommanded);
    a234:	4619      	mov	r1, r3
    a236:	f01b fbeb 	bl	25a10 <__aeabi_d2iz>
            Used to latch limits so a move followed immediate by a limit change
            is not used until the next move
        **/
        void UpdatePendingMoveLimits()
        {
            m_velLimitQx = m_velLimitPendingQx;
    a23a:	6e27      	ldr	r7, [r4, #96]	; 0x60
            m_altVelLimitQx = m_altVelLimitPendingQx;
    a23c:	6e66      	ldr	r6, [r4, #100]	; 0x64
            m_accelLimitQx = m_accelLimitPendingQx;
    a23e:	6ea1      	ldr	r1, [r4, #104]	; 0x68
            m_altDecelLimitQx = m_altDecelLimitPendingQx;
    a240:	6ee2      	ldr	r2, [r4, #108]	; 0x6c

    m_velocityMove = false;
    a242:	f884 5020 	strb.w	r5, [r4, #32]
    UpdatePendingMoveLimits();
    m_moveState = MS_START;
    a246:	2301      	movs	r3, #1
    m_stepsCommanded = abs(m_stepsCommanded);
    a248:	61a0      	str	r0, [r4, #24]
            m_velLimitQx = m_velLimitPendingQx;
    a24a:	6267      	str	r7, [r4, #36]	; 0x24
            m_altVelLimitQx = m_altVelLimitPendingQx;
    a24c:	62a6      	str	r6, [r4, #40]	; 0x28
            m_accelLimitQx = m_accelLimitPendingQx;
    a24e:	62e1      	str	r1, [r4, #44]	; 0x2c
            m_altDecelLimitQx = m_altDecelLimitPendingQx;
    a250:	6322      	str	r2, [r4, #48]	; 0x30
    m_moveState = MS_START;
    a252:	7323      	strb	r3, [r4, #12]
  __ASM volatile ("cpsie i" : : : "memory");
    a254:	b662      	cpsie	i

    __enable_irq();
    return true;
}
    a256:	4618      	mov	r0, r3
    a258:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
            m_stepsCommanded = m_direction ? -m_stepsCommanded : m_stepsCommanded ;
    a25a:	4240      	negs	r0, r0
    a25c:	e7d7      	b.n	a20e <_ZN9ClearCore13StepGenerator4MoveElNS0_10MoveTargetE+0x1e>
            m_stepsCommanded = dist - m_posnAbsolute;
    a25e:	6960      	ldr	r0, [r4, #20]
    a260:	1a08      	subs	r0, r1, r0
            break;
    a262:	e7d5      	b.n	a210 <_ZN9ClearCore13StepGenerator4MoveElNS0_10MoveTargetE+0x20>

0000a264 <_ZN9ClearCore13StepGenerator12MoveVelocityEl>:

/*
    This function commands a velocity move.
    If there is a current move, it will be overwritten.
*/
bool StepGenerator::MoveVelocity(int32_t velocity) {
    a264:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    a266:	4604      	mov	r4, r0
  __ASM volatile ("cpsid i" : : : "memory");
    a268:	b672      	cpsid	i
    // Block the interrupt while changing the command
    __disable_irq();
    m_dirCommanded = (velocity < 0);

    m_velocityMove = true;
    a26a:	2301      	movs	r3, #1
    m_dirCommanded = (velocity < 0);
    a26c:	0fca      	lsrs	r2, r1, #31
    a26e:	f880 2022 	strb.w	r2, [r0, #34]	; 0x22
    m_velocityMove = true;
    a272:	f884 3020 	strb.w	r3, [r4, #32]
    a276:	4608      	mov	r0, r1
    a278:	f01b f8ca 	bl	25410 <__aeabi_i2d>
    a27c:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000

    int32_t velAbsolute = abs(velocity);
    a280:	4619      	mov	r1, r3
    a282:	f01b fbc5 	bl	25a10 <__aeabi_d2iz>
    and sets AltVelLimitQx in step pulses/sample time.
*/
void StepGenerator::AltVelMax(int32_t velMax) {
    // Convert from step pulses/sec to step pulses/sample
    int64_t velLim64 =
        (static_cast<int64_t>(velMax) << FRACT_BITS) / SampleRateHz;
    a286:	17c3      	asrs	r3, r0, #31
    a288:	03d9      	lsls	r1, r3, #15
    a28a:	ea41 4150 	orr.w	r1, r1, r0, lsr #17
    a28e:	f241 3288 	movw	r2, #5000	; 0x1388
    a292:	2300      	movs	r3, #0
    a294:	03c0      	lsls	r0, r0, #15
    a296:	f01b fd61 	bl	25d5c <__aeabi_ldivmod>
    // Enforce the max steps per sample time
    velLim64 =
        min(velLim64, static_cast<int64_t>(m_stepsPerSampleMax) << FRACT_BITS);
    a29a:	68a3      	ldr	r3, [r4, #8]
    // Ensure we didn't overflow 32-bit int
    m_altVelLimitPendingQx = min(velLim64, INT32_MAX);
    a29c:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
        min(velLim64, static_cast<int64_t>(m_stepsPerSampleMax) << FRACT_BITS);
    a2a0:	03de      	lsls	r6, r3, #15
    a2a2:	0c5f      	lsrs	r7, r3, #17
    m_altVelLimitPendingQx = min(velLim64, INT32_MAX);
    a2a4:	42b2      	cmp	r2, r6
    a2a6:	f04f 0300 	mov.w	r3, #0
    a2aa:	eb73 0507 	sbcs.w	r5, r3, r7
    a2ae:	bfbc      	itt	lt
    a2b0:	4616      	movlt	r6, r2
    a2b2:	461f      	movlt	r7, r3
    a2b4:	4286      	cmp	r6, r0
    a2b6:	460b      	mov	r3, r1
    a2b8:	4602      	mov	r2, r0
    a2ba:	eb77 0103 	sbcs.w	r1, r7, r3
    m_posnCurrentQx &= ~(UINT64_MAX << FRACT_BITS);
    a2be:	e9d4 010e 	ldrd	r0, r1, [r4, #56]	; 0x38
    m_altVelLimitPendingQx = min(velLim64, INT32_MAX);
    a2c2:	bfb8      	it	lt
    a2c4:	4632      	movlt	r2, r6
    m_posnCurrentQx &= ~(UINT64_MAX << FRACT_BITS);
    a2c6:	2700      	movs	r7, #0
    a2c8:	f647 76ff 	movw	r6, #32767	; 0x7fff
    a2cc:	4030      	ands	r0, r6
    a2ce:	4039      	ands	r1, r7
            m_velLimitQx = m_velLimitPendingQx;
    a2d0:	6e26      	ldr	r6, [r4, #96]	; 0x60
            m_accelLimitQx = m_accelLimitPendingQx;
    a2d2:	6ea5      	ldr	r5, [r4, #104]	; 0x68
            m_altDecelLimitQx = m_altDecelLimitPendingQx;
    a2d4:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
    m_altVelLimitPendingQx = min(velLim64, INT32_MAX);
    a2d6:	6662      	str	r2, [r4, #100]	; 0x64
            m_altVelLimitQx = m_altVelLimitPendingQx;
    a2d8:	62a2      	str	r2, [r4, #40]	; 0x28
    m_stepsCommanded = INT32_MAX;
    a2da:	f06f 4700 	mvn.w	r7, #2147483648	; 0x80000000
    m_stepsSent = 0;
    a2de:	2200      	movs	r2, #0
    m_posnCurrentQx &= ~(UINT64_MAX << FRACT_BITS);
    a2e0:	e9c4 010e 	strd	r0, r1, [r4, #56]	; 0x38
    m_moveState = MS_START;
    a2e4:	2001      	movs	r0, #1
            m_velLimitQx = m_velLimitPendingQx;
    a2e6:	6266      	str	r6, [r4, #36]	; 0x24
            m_accelLimitQx = m_accelLimitPendingQx;
    a2e8:	62e5      	str	r5, [r4, #44]	; 0x2c
            m_altDecelLimitQx = m_altDecelLimitPendingQx;
    a2ea:	6323      	str	r3, [r4, #48]	; 0x30
    m_stepsCommanded = INT32_MAX;
    a2ec:	61a7      	str	r7, [r4, #24]
    m_stepsSent = 0;
    a2ee:	61e2      	str	r2, [r4, #28]
    m_moveState = MS_START;
    a2f0:	7320      	strb	r0, [r4, #12]
  __ASM volatile ("cpsie i" : : : "memory");
    a2f2:	b662      	cpsie	i
}
    a2f4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    a2f6:	bf00      	nop

0000a2f8 <_ZN9ClearCore13StepGenerator15StepsCalculatedEv>:
void StepGenerator::StepsCalculated() {
    a2f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    if (m_moveState == MS_START) {
    a2fc:	7b03      	ldrb	r3, [r0, #12]
void StepGenerator::StepsCalculated() {
    a2fe:	ed2d 8b02 	vpush	{d8}
    if (m_moveState == MS_START) {
    a302:	2b01      	cmp	r3, #1
void StepGenerator::StepsCalculated() {
    a304:	b085      	sub	sp, #20
    a306:	4604      	mov	r4, r0
    if (m_moveState == MS_START) {
    a308:	d038      	beq.n	a37c <_ZN9ClearCore13StepGenerator15StepsCalculatedEv+0x84>
    switch (m_moveState) {
    a30a:	2b07      	cmp	r3, #7
    a30c:	f200 80da 	bhi.w	a4c4 <_ZN9ClearCore13StepGenerator15StepsCalculatedEv+0x1cc>
    a310:	e8df f013 	tbh	[pc, r3, lsl #1]
    a314:	00d8002f 	.word	0x00d8002f
    a318:	00be01d7 	.word	0x00be01d7
    a31c:	025f0086 	.word	0x025f0086
    a320:	000800d8 	.word	0x000800d8
            if (m_direction == m_dirCommanded) {
    a324:	7b41      	ldrb	r1, [r0, #13]
    a326:	f890 3022 	ldrb.w	r3, [r0, #34]	; 0x22
    a32a:	428b      	cmp	r3, r1
    a32c:	f000 822d 	beq.w	a78a <_ZN9ClearCore13StepGenerator15StepsCalculatedEv+0x492>
                m_stepsCommanded += m_stepsSent;
    a330:	6980      	ldr	r0, [r0, #24]
    a332:	69e3      	ldr	r3, [r4, #28]
    a334:	4418      	add	r0, r3
            m_posnCurrentQx = m_posnCurrentQx & ~(UINT64_MAX << FRACT_BITS);
    a336:	e9d4 670e 	ldrd	r6, r7, [r4, #56]	; 0x38
    a33a:	f647 72ff 	movw	r2, #32767	; 0x7fff
    a33e:	2300      	movs	r3, #0
    a340:	4016      	ands	r6, r2
    a342:	401f      	ands	r7, r3
    a344:	e9c4 670e 	strd	r6, r7, [r4, #56]	; 0x38
            m_dirCommanded = !m_direction;
    a348:	f081 0201 	eor.w	r2, r1, #1
            m_moveState = MS_START;
    a34c:	2501      	movs	r5, #1
            m_moveDirChange = false;
    a34e:	2300      	movs	r3, #0
    a350:	61a0      	str	r0, [r4, #24]
            m_dirCommanded = !m_direction;
    a352:	f884 2022 	strb.w	r2, [r4, #34]	; 0x22
            m_moveState = MS_START;
    a356:	7325      	strb	r5, [r4, #12]
            m_moveDirChange = false;
    a358:	f884 3021 	strb.w	r3, [r4, #33]	; 0x21
    m_stepsPrevious = (m_posnCurrentQx >> FRACT_BITS) - m_stepsSent;
    a35c:	0bf2      	lsrs	r2, r6, #15
    a35e:	ea42 4247 	orr.w	r2, r2, r7, lsl #17
    a362:	1ad3      	subs	r3, r2, r3
    m_stepsSent += m_stepsPrevious;
    a364:	61e2      	str	r2, [r4, #28]
    m_stepsPrevious = (m_posnCurrentQx >> FRACT_BITS) - m_stepsSent;
    a366:	6063      	str	r3, [r4, #4]
    m_posnAbsolute += m_direction ? -m_stepsPrevious : m_stepsPrevious;
    a368:	6962      	ldr	r2, [r4, #20]
    a36a:	b101      	cbz	r1, a36e <_ZN9ClearCore13StepGenerator15StepsCalculatedEv+0x76>
    a36c:	425b      	negs	r3, r3
    a36e:	4413      	add	r3, r2
    a370:	6163      	str	r3, [r4, #20]
}
    a372:	b005      	add	sp, #20
    a374:	ecbd 8b02 	vpop	{d8}
    a378:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        m_posnTargetQx = static_cast<int64_t>(m_stepsCommanded)
    a37c:	6982      	ldr	r2, [r0, #24]
        if (m_velocityMove) {
    a37e:	f890 1020 	ldrb.w	r1, [r0, #32]
        m_accelCurrentQx = m_accelLimitQx;
    a382:	f8d0 902c 	ldr.w	r9, [r0, #44]	; 0x2c
    a386:	f8c0 9044 	str.w	r9, [r0, #68]	; 0x44
                         << FRACT_BITS;
    a38a:	1457      	asrs	r7, r2, #17
    a38c:	03d6      	lsls	r6, r2, #15
        m_posnTargetQx = static_cast<int64_t>(m_stepsCommanded)
    a38e:	e9c0 6712 	strd	r6, r7, [r0, #72]	; 0x48
        if (m_velocityMove) {
    a392:	2900      	cmp	r1, #0
    a394:	d163      	bne.n	a45e <_ZN9ClearCore13StepGenerator15StepsCalculatedEv+0x166>
            if (m_velCurrentQx) {
    a396:	6c05      	ldr	r5, [r0, #64]	; 0x40
    a398:	2d00      	cmp	r5, #0
    a39a:	f000 8117 	beq.w	a5cc <_ZN9ClearCore13StepGenerator15StepsCalculatedEv+0x2d4>
                if (m_direction == m_dirCommanded) {
    a39e:	7b41      	ldrb	r1, [r0, #13]
    a3a0:	f890 2022 	ldrb.w	r2, [r0, #34]	; 0x22
    a3a4:	9100      	str	r1, [sp, #0]
    a3a6:	4291      	cmp	r1, r2
    a3a8:	f000 81f8 	beq.w	a79c <_ZN9ClearCore13StepGenerator15StepsCalculatedEv+0x4a4>
                    m_moveDirChange = true;
    a3ac:	f880 3021 	strb.w	r3, [r0, #33]	; 0x21
                m_velTargetQx = 0;
    a3b0:	2000      	movs	r0, #0
                m_moveState = MS_DECEL_VEL;
    a3b2:	2305      	movs	r3, #5
    a3b4:	7323      	strb	r3, [r4, #12]
                m_velTargetQx = 0;
    a3b6:	6520      	str	r0, [r4, #80]	; 0x50
    a3b8:	4682      	mov	sl, r0
            m_posnCurrentQx += m_velCurrentQx - (m_accelCurrentQx >> 1);
    a3ba:	e9d4 670e 	ldrd	r6, r7, [r4, #56]	; 0x38
    a3be:	eba5 0369 	sub.w	r3, r5, r9, asr #1
    a3c2:	18f6      	adds	r6, r6, r3
            m_velCurrentQx -= m_accelCurrentQx;
    a3c4:	eba5 0509 	sub.w	r5, r5, r9
            m_posnCurrentQx += m_velCurrentQx - (m_accelCurrentQx >> 1);
    a3c8:	eb47 77e3 	adc.w	r7, r7, r3, asr #31
            if (m_velCurrentQx <= m_velTargetQx) {
    a3cc:	4555      	cmp	r5, sl
            m_posnCurrentQx += m_velCurrentQx - (m_accelCurrentQx >> 1);
    a3ce:	e9c4 670e 	strd	r6, r7, [r4, #56]	; 0x38
            m_velCurrentQx -= m_accelCurrentQx;
    a3d2:	6425      	str	r5, [r4, #64]	; 0x40
            if (m_velCurrentQx <= m_velTargetQx) {
    a3d4:	f300 80ab 	bgt.w	a52e <_ZN9ClearCore13StepGenerator15StepsCalculatedEv+0x236>
                    m_accelCurrentQx;
    a3d8:	464a      	mov	r2, r9
                uint32_t overshootQx = m_velTargetQx - m_velCurrentQx;
    a3da:	ebaa 0505 	sub.w	r5, sl, r5
                    ((static_cast<uint64_t>(overshootQx)) << 32) /
    a3de:	f04f 0900 	mov.w	r9, #0
                    m_accelCurrentQx;
    a3e2:	17d3      	asrs	r3, r2, #31
                m_velCurrentQx = m_velTargetQx;
    a3e4:	f8c4 a040 	str.w	sl, [r4, #64]	; 0x40
                    ((static_cast<uint64_t>(overshootQx)) << 32) /
    a3e8:	4629      	mov	r1, r5
    a3ea:	4648      	mov	r0, r9
                    m_accelCurrentQx;
    a3ec:	e9cd 2302 	strd	r2, r3, [sp, #8]
                    ((static_cast<uint64_t>(overshootQx)) << 32) /
    a3f0:	f01b fd04 	bl	25dfc <__aeabi_uldivmod>
    a3f4:	17eb      	asrs	r3, r5, #31
                    (static_cast<uint64_t>(pctSampleOverQ32) * overshootQx) >>
    a3f6:	fba0 bc05 	umull	fp, ip, r0, r5
    a3fa:	fb00 cc03 	mla	ip, r0, r3, ip
    a3fe:	ea4f 025c 	mov.w	r2, ip, lsr #1
                m_posnCurrentQx += posnAdjQx;
    a402:	18b6      	adds	r6, r6, r2
                if (m_moveDirChange) {
    a404:	f894 1021 	ldrb.w	r1, [r4, #33]	; 0x21
                m_posnCurrentQx += posnAdjQx;
    a408:	eb47 0709 	adc.w	r7, r7, r9
    a40c:	e9c4 670e 	strd	r6, r7, [r4, #56]	; 0x38
                if (m_moveDirChange) {
    a410:	2900      	cmp	r1, #0
    a412:	f000 816e 	beq.w	a6f2 <_ZN9ClearCore13StepGenerator15StepsCalculatedEv+0x3fa>
                    m_moveState = MS_CHANGE_DIR;
    a416:	2307      	movs	r3, #7
    a418:	7323      	strb	r3, [r4, #12]
    a41a:	9900      	ldr	r1, [sp, #0]
    a41c:	69e3      	ldr	r3, [r4, #28]
    a41e:	e79d      	b.n	a35c <_ZN9ClearCore13StepGenerator15StepsCalculatedEv+0x64>
            m_posnCurrentQx += m_velCurrentQx - (m_accelCurrentQx >> 1);
    a420:	6c01      	ldr	r1, [r0, #64]	; 0x40
    a422:	6c40      	ldr	r0, [r0, #68]	; 0x44
    a424:	e9d4 230e 	ldrd	r2, r3, [r4, #56]	; 0x38
            if ((m_posnCurrentQx >= m_posnTargetQx) || (m_velCurrentQx <= 0) ||
    a428:	e9d4 6712 	ldrd	r6, r7, [r4, #72]	; 0x48
            m_posnCurrentQx += m_velCurrentQx - (m_accelCurrentQx >> 1);
    a42c:	eba1 0560 	sub.w	r5, r1, r0, asr #1
    a430:	1952      	adds	r2, r2, r5
    a432:	eb43 73e5 	adc.w	r3, r3, r5, asr #31
            if ((m_posnCurrentQx >= m_posnTargetQx) || (m_velCurrentQx <= 0) ||
    a436:	42b2      	cmp	r2, r6
            m_velCurrentQx -= m_accelCurrentQx;
    a438:	eba1 0100 	sub.w	r1, r1, r0
            if ((m_posnCurrentQx >= m_posnTargetQx) || (m_velCurrentQx <= 0) ||
    a43c:	eb73 0007 	sbcs.w	r0, r3, r7
            m_velCurrentQx -= m_accelCurrentQx;
    a440:	6421      	str	r1, [r4, #64]	; 0x40
            m_posnCurrentQx += m_velCurrentQx - (m_accelCurrentQx >> 1);
    a442:	e9c4 230e 	strd	r2, r3, [r4, #56]	; 0x38
            if ((m_posnCurrentQx >= m_posnTargetQx) || (m_velCurrentQx <= 0) ||
    a446:	da54      	bge.n	a4f2 <_ZN9ClearCore13StepGenerator15StepsCalculatedEv+0x1fa>
    a448:	2900      	cmp	r1, #0
    a44a:	dd52      	ble.n	a4f2 <_ZN9ClearCore13StepGenerator15StepsCalculatedEv+0x1fa>
    a44c:	2a01      	cmp	r2, #1
    a44e:	f173 0100 	sbcs.w	r1, r3, #0
    a452:	db4e      	blt.n	a4f2 <_ZN9ClearCore13StepGenerator15StepsCalculatedEv+0x1fa>
    a454:	461f      	mov	r7, r3
    a456:	4616      	mov	r6, r2
    a458:	69e3      	ldr	r3, [r4, #28]
    a45a:	7b61      	ldrb	r1, [r4, #13]
    a45c:	e77e      	b.n	a35c <_ZN9ClearCore13StepGenerator15StepsCalculatedEv+0x64>
            if (m_altVelLimitQx && m_velCurrentQx && m_direction != m_dirCommanded) {
    a45e:	6a83      	ldr	r3, [r0, #40]	; 0x28
    a460:	6c05      	ldr	r5, [r0, #64]	; 0x40
    a462:	2b00      	cmp	r3, #0
    a464:	f000 80a1 	beq.w	a5aa <_ZN9ClearCore13StepGenerator15StepsCalculatedEv+0x2b2>
    a468:	2d00      	cmp	r5, #0
    a46a:	f040 8130 	bne.w	a6ce <_ZN9ClearCore13StepGenerator15StepsCalculatedEv+0x3d6>
    a46e:	f890 2022 	ldrb.w	r2, [r0, #34]	; 0x22
                OutputDirection();
    a472:	6820      	ldr	r0, [r4, #0]
    a474:	6523      	str	r3, [r4, #80]	; 0x50
    a476:	2100      	movs	r1, #0
    a478:	6883      	ldr	r3, [r0, #8]
                m_direction = m_dirCommanded;
    a47a:	7362      	strb	r2, [r4, #13]
    a47c:	f884 1021 	strb.w	r1, [r4, #33]	; 0x21
                OutputDirection();
    a480:	4620      	mov	r0, r4
    a482:	4798      	blx	r3
    a484:	7b63      	ldrb	r3, [r4, #13]
    a486:	f8d4 a050 	ldr.w	sl, [r4, #80]	; 0x50
    a48a:	6c25      	ldr	r5, [r4, #64]	; 0x40
    a48c:	9300      	str	r3, [sp, #0]
    a48e:	e094      	b.n	a5ba <_ZN9ClearCore13StepGenerator15StepsCalculatedEv+0x2c2>
    a490:	e9d0 670e 	ldrd	r6, r7, [r0, #56]	; 0x38
    a494:	7b43      	ldrb	r3, [r0, #13]
    a496:	f8d0 a040 	ldr.w	sl, [r0, #64]	; 0x40
    a49a:	9300      	str	r3, [sp, #0]
            m_posnCurrentQx += m_velCurrentQx;
    a49c:	4652      	mov	r2, sl
    a49e:	eb16 060a 	adds.w	r6, r6, sl
    a4a2:	ea4f 73e2 	mov.w	r3, r2, asr #31
            if (m_velocityMove) {
    a4a6:	f894 1020 	ldrb.w	r1, [r4, #32]
            m_posnCurrentQx += m_velCurrentQx;
    a4aa:	415f      	adcs	r7, r3
    a4ac:	e9c4 670e 	strd	r6, r7, [r4, #56]	; 0x38
            if (m_velocityMove) {
    a4b0:	2900      	cmp	r1, #0
    a4b2:	d03f      	beq.n	a534 <_ZN9ClearCore13StepGenerator15StepsCalculatedEv+0x23c>
                if (!m_velCurrentQx) {
    a4b4:	f1ba 0f00 	cmp.w	sl, #0
    a4b8:	d139      	bne.n	a52e <_ZN9ClearCore13StepGenerator15StepsCalculatedEv+0x236>
                    m_moveState = MS_END;
    a4ba:	2306      	movs	r3, #6
    a4bc:	7323      	strb	r3, [r4, #12]
    a4be:	9900      	ldr	r1, [sp, #0]
    a4c0:	69e3      	ldr	r3, [r4, #28]
    a4c2:	e74b      	b.n	a35c <_ZN9ClearCore13StepGenerator15StepsCalculatedEv+0x64>
            m_limitInfo.LimitRampPos = false;
    a4c4:	7c02      	ldrb	r2, [r0, #16]
            m_velCurrentQx = 0;
    a4c6:	2300      	movs	r3, #0
            m_limitInfo.LimitRampNeg = false;
    a4c8:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
    a4cc:	f363 0241 	bfi	r2, r3, #1, #1
            m_posnCurrentQx = 0;
    a4d0:	2000      	movs	r0, #0
    a4d2:	2100      	movs	r1, #0
            m_limitInfo.LimitRampNeg = false;
    a4d4:	7422      	strb	r2, [r4, #16]
            m_velCurrentQx = 0;
    a4d6:	6423      	str	r3, [r4, #64]	; 0x40
            m_stepsSent = 0;
    a4d8:	61e3      	str	r3, [r4, #28]
            m_stepsPrevious = 0;
    a4da:	6063      	str	r3, [r4, #4]
            m_stepsCommanded = 0;
    a4dc:	61a3      	str	r3, [r4, #24]
            m_moveState = MS_IDLE;
    a4de:	7323      	strb	r3, [r4, #12]
            m_velocityMove = false;
    a4e0:	f884 3020 	strb.w	r3, [r4, #32]
            m_posnCurrentQx = 0;
    a4e4:	e9c4 010e 	strd	r0, r1, [r4, #56]	; 0x38
}
    a4e8:	b005      	add	sp, #20
    a4ea:	ecbd 8b02 	vpop	{d8}
    a4ee:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
                m_accelCurrentQx = 0;
    a4f2:	2300      	movs	r3, #0
                m_moveState = MS_END;
    a4f4:	2206      	movs	r2, #6
                m_accelCurrentQx = 0;
    a4f6:	6463      	str	r3, [r4, #68]	; 0x44
                m_velCurrentQx = 0;
    a4f8:	6423      	str	r3, [r4, #64]	; 0x40
                m_posnCurrentQx = m_posnTargetQx;
    a4fa:	e9c4 670e 	strd	r6, r7, [r4, #56]	; 0x38
                m_moveState = MS_END;
    a4fe:	7322      	strb	r2, [r4, #12]
    a500:	69e3      	ldr	r3, [r4, #28]
    a502:	7b61      	ldrb	r1, [r4, #13]
    a504:	e72a      	b.n	a35c <_ZN9ClearCore13StepGenerator15StepsCalculatedEv+0x64>
                m_moveState = MS_ACCEL;
    a506:	2302      	movs	r3, #2
    a508:	7323      	strb	r3, [r4, #12]
            m_posnCurrentQx += m_velCurrentQx + (m_accelCurrentQx >> 1);
    a50a:	e9d4 670e 	ldrd	r6, r7, [r4, #56]	; 0x38
    a50e:	6c63      	ldr	r3, [r4, #68]	; 0x44
    a510:	eb05 0263 	add.w	r2, r5, r3, asr #1
    a514:	18b6      	adds	r6, r6, r2
            m_velCurrentQx += m_accelCurrentQx;
    a516:	441d      	add	r5, r3
            m_posnCurrentQx += m_velCurrentQx + (m_accelCurrentQx >> 1);
    a518:	eb47 77e2 	adc.w	r7, r7, r2, asr #31
            if (m_velCurrentQx >= m_velTargetQx || m_velCurrentQx <= 0) {
    a51c:	4555      	cmp	r5, sl
            m_velCurrentQx += m_accelCurrentQx;
    a51e:	6425      	str	r5, [r4, #64]	; 0x40
            m_posnCurrentQx += m_velCurrentQx + (m_accelCurrentQx >> 1);
    a520:	e9c4 670e 	strd	r6, r7, [r4, #56]	; 0x38
            if (m_velCurrentQx >= m_velTargetQx || m_velCurrentQx <= 0) {
    a524:	f280 80a2 	bge.w	a66c <_ZN9ClearCore13StepGenerator15StepsCalculatedEv+0x374>
    a528:	2d00      	cmp	r5, #0
    a52a:	f340 809f 	ble.w	a66c <_ZN9ClearCore13StepGenerator15StepsCalculatedEv+0x374>
    a52e:	9900      	ldr	r1, [sp, #0]
    a530:	69e3      	ldr	r3, [r4, #28]
    a532:	e713      	b.n	a35c <_ZN9ClearCore13StepGenerator15StepsCalculatedEv+0x64>
            if (m_posnCurrentQx >= m_posnDecelQx || m_posnCurrentQx <= 0) {
    a534:	e9d4 0116 	ldrd	r0, r1, [r4, #88]	; 0x58
    a538:	4286      	cmp	r6, r0
    a53a:	eb77 0501 	sbcs.w	r5, r7, r1
    a53e:	da03      	bge.n	a548 <_ZN9ClearCore13StepGenerator15StepsCalculatedEv+0x250>
    a540:	2e01      	cmp	r6, #1
    a542:	f177 0500 	sbcs.w	r5, r7, #0
    a546:	daf2      	bge.n	a52e <_ZN9ClearCore13StepGenerator15StepsCalculatedEv+0x236>
                    (overshootQx << 32) / m_velCurrentQx;
    a548:	2500      	movs	r5, #0
    a54a:	1a31      	subs	r1, r6, r0
    a54c:	4628      	mov	r0, r5
    a54e:	f01b fc55 	bl	25dfc <__aeabi_uldivmod>
                                     m_accelCurrentQx) >> 32;
    a552:	6c62      	ldr	r2, [r4, #68]	; 0x44
                uint32_t velAdjQx = (static_cast<uint64_t>(pctSampleOverQ32) *
    a554:	fba2 8900 	umull	r8, r9, r2, r0
                                     m_accelCurrentQx) >> 32;
    a558:	17d3      	asrs	r3, r2, #31
                uint32_t velAdjQx = (static_cast<uint64_t>(pctSampleOverQ32) *
    a55a:	fb00 9e03 	mla	lr, r0, r3, r9
    a55e:	4683      	mov	fp, r0
                    (static_cast<uint64_t>(pctSampleOverQ32) * velAdjQx) >> 33;
    a560:	fbae 230b 	umull	r2, r3, lr, fp
                uint32_t velAdjQx = (static_cast<uint64_t>(pctSampleOverQ32) *
    a564:	f04f 0c00 	mov.w	ip, #0
                    (static_cast<uint64_t>(pctSampleOverQ32) * velAdjQx) >> 33;
    a568:	fb0e 330c 	mla	r3, lr, ip, r3
    a56c:	0858      	lsrs	r0, r3, #1
                m_posnCurrentQx -= posnAdjQx;
    a56e:	1a32      	subs	r2, r6, r0
    a570:	eb67 0305 	sbc.w	r3, r7, r5
                if ((m_posnCurrentQx >= m_posnTargetQx) ||
    a574:	e9d4 6712 	ldrd	r6, r7, [r4, #72]	; 0x48
    a578:	42b2      	cmp	r2, r6
                m_velCurrentQx -= velAdjQx;
    a57a:	ebaa 000e 	sub.w	r0, sl, lr
                if ((m_posnCurrentQx >= m_posnTargetQx) ||
    a57e:	eb73 0107 	sbcs.w	r1, r3, r7
                m_velCurrentQx -= velAdjQx;
    a582:	6420      	str	r0, [r4, #64]	; 0x40
                m_posnCurrentQx -= posnAdjQx;
    a584:	e9c4 230e 	strd	r2, r3, [r4, #56]	; 0x38
                if ((m_posnCurrentQx >= m_posnTargetQx) ||
    a588:	f280 80a9 	bge.w	a6de <_ZN9ClearCore13StepGenerator15StepsCalculatedEv+0x3e6>
    a58c:	42a8      	cmp	r0, r5
    a58e:	f340 80a6 	ble.w	a6de <_ZN9ClearCore13StepGenerator15StepsCalculatedEv+0x3e6>
                        (m_velCurrentQx <= 0) || (m_posnCurrentQx <= 0)) {
    a592:	2a01      	cmp	r2, #1
    a594:	f173 0100 	sbcs.w	r1, r3, #0
    a598:	f2c0 80a1 	blt.w	a6de <_ZN9ClearCore13StepGenerator15StepsCalculatedEv+0x3e6>
                    m_moveState = MS_DECEL;
    a59c:	2004      	movs	r0, #4
    a59e:	461f      	mov	r7, r3
    a5a0:	9900      	ldr	r1, [sp, #0]
    a5a2:	7320      	strb	r0, [r4, #12]
    a5a4:	4616      	mov	r6, r2
    a5a6:	69e3      	ldr	r3, [r4, #28]
    a5a8:	e6d8      	b.n	a35c <_ZN9ClearCore13StepGenerator15StepsCalculatedEv+0x64>
    a5aa:	7b42      	ldrb	r2, [r0, #13]
    a5ac:	9200      	str	r2, [sp, #0]
                m_moveDirChange = false;
    a5ae:	4619      	mov	r1, r3
    a5b0:	2000      	movs	r0, #0
    a5b2:	f884 1021 	strb.w	r1, [r4, #33]	; 0x21
    a5b6:	6520      	str	r0, [r4, #80]	; 0x50
void StepGenerator::StepsCalculated() {
    a5b8:	4682      	mov	sl, r0
            if (m_velCurrentQx == m_velTargetQx) {
    a5ba:	4555      	cmp	r5, sl
    a5bc:	f000 80db 	beq.w	a776 <_ZN9ClearCore13StepGenerator15StepsCalculatedEv+0x47e>
            else if (m_velCurrentQx > m_velTargetQx) {
    a5c0:	dda1      	ble.n	a506 <_ZN9ClearCore13StepGenerator15StepsCalculatedEv+0x20e>
                m_moveState = MS_DECEL_VEL;
    a5c2:	2305      	movs	r3, #5
    a5c4:	7323      	strb	r3, [r4, #12]
    a5c6:	f8d4 9044 	ldr.w	r9, [r4, #68]	; 0x44
    a5ca:	e6f6      	b.n	a3ba <_ZN9ClearCore13StepGenerator15StepsCalculatedEv+0xc2>
                if (m_posnTargetQx != m_posnCurrentQx) {
    a5cc:	e9d0 230e 	ldrd	r2, r3, [r0, #56]	; 0x38
    a5d0:	4611      	mov	r1, r2
    a5d2:	461a      	mov	r2, r3
                m_direction = m_dirCommanded;
    a5d4:	f890 3022 	ldrb.w	r3, [r0, #34]	; 0x22
    a5d8:	7343      	strb	r3, [r0, #13]
                if (m_posnTargetQx != m_posnCurrentQx) {
    a5da:	4613      	mov	r3, r2
    a5dc:	429f      	cmp	r7, r3
    a5de:	bf08      	it	eq
    a5e0:	428e      	cmpeq	r6, r1
    a5e2:	e9cd 1200 	strd	r1, r2, [sp]
                m_moveDirChange = false;
    a5e6:	f880 5021 	strb.w	r5, [r0, #33]	; 0x21
                if (m_posnTargetQx != m_posnCurrentQx) {
    a5ea:	d00e      	beq.n	a60a <_ZN9ClearCore13StepGenerator15StepsCalculatedEv+0x312>
                    OutputDirection();
    a5ec:	6803      	ldr	r3, [r0, #0]
    a5ee:	689b      	ldr	r3, [r3, #8]
    a5f0:	4798      	blx	r3
    a5f2:	f894 3021 	ldrb.w	r3, [r4, #33]	; 0x21
    a5f6:	6c25      	ldr	r5, [r4, #64]	; 0x40
            if (m_moveDirChange) {
    a5f8:	2b00      	cmp	r3, #0
    a5fa:	f040 80ca 	bne.w	a792 <_ZN9ClearCore13StepGenerator15StepsCalculatedEv+0x49a>
    a5fe:	e9d4 2312 	ldrd	r2, r3, [r4, #72]	; 0x48
    a602:	e9cd 2300 	strd	r2, r3, [sp]
    a606:	f8d4 902c 	ldr.w	r9, [r4, #44]	; 0x2c
                int64_t accelStepsQx = (static_cast<int64_t>(m_velCurrentQx) *
    a60a:	fb85 0105 	smull	r0, r1, r5, r5
                                        m_velCurrentQx / 2) / m_accelLimitQx;
    a60e:	0fcb      	lsrs	r3, r1, #31
    a610:	18c0      	adds	r0, r0, r3
    a612:	464e      	mov	r6, r9
    a614:	f141 0100 	adc.w	r1, r1, #0
    a618:	17f7      	asrs	r7, r6, #31
    a61a:	1049      	asrs	r1, r1, #1
    a61c:	ea4f 0030 	mov.w	r0, r0, rrx
    a620:	464a      	mov	r2, r9
    a622:	463b      	mov	r3, r7
    a624:	f01b fb9a 	bl	25d5c <__aeabi_ldivmod>
                if (static_cast<int64_t>(m_velLimitQx) * m_velLimitQx /
    a628:	f8d4 a024 	ldr.w	sl, [r4, #36]	; 0x24
                                        m_velCurrentQx / 2) / m_accelLimitQx;
    a62c:	e9cd 0102 	strd	r0, r1, [sp, #8]
                if (static_cast<int64_t>(m_velLimitQx) * m_velLimitQx /
    a630:	464a      	mov	r2, r9
    a632:	463b      	mov	r3, r7
    a634:	fb8a 010a 	smull	r0, r1, sl, sl
    a638:	f01b fb90 	bl	25d5c <__aeabi_ldivmod>
                        m_accelLimitQx - accelStepsQx > m_posnTargetQx) {
    a63c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
    a640:	1a82      	subs	r2, r0, r2
    a642:	eb61 0303 	sbc.w	r3, r1, r3
    a646:	4610      	mov	r0, r2
    a648:	4619      	mov	r1, r3
                if (static_cast<int64_t>(m_velLimitQx) * m_velLimitQx /
    a64a:	e9dd 2300 	ldrd	r2, r3, [sp]
    a64e:	4282      	cmp	r2, r0
    a650:	418b      	sbcs	r3, r1
    a652:	db63      	blt.n	a71c <_ZN9ClearCore13StepGenerator15StepsCalculatedEv+0x424>
                    m_velTargetQx = m_velLimitQx;
    a654:	f8c4 a050 	str.w	sl, [r4, #80]	; 0x50
                if (m_velCurrentQx > m_velTargetQx) {
    a658:	4555      	cmp	r5, sl
    a65a:	f340 8091 	ble.w	a780 <_ZN9ClearCore13StepGenerator15StepsCalculatedEv+0x488>
                    m_moveState = MS_DECEL_VEL;
    a65e:	2305      	movs	r3, #5
    a660:	7323      	strb	r3, [r4, #12]
    a662:	7b63      	ldrb	r3, [r4, #13]
    a664:	f8d4 9044 	ldr.w	r9, [r4, #68]	; 0x44
    a668:	9300      	str	r3, [sp, #0]
    a66a:	e6a6      	b.n	a3ba <_ZN9ClearCore13StepGenerator15StepsCalculatedEv+0xc2>
                    m_accelCurrentQx;
    a66c:	17da      	asrs	r2, r3, #31
                uint32_t overshootQx = m_velCurrentQx - m_velTargetQx;
    a66e:	eba5 050a 	sub.w	r5, r5, sl
                    m_accelCurrentQx;
    a672:	4691      	mov	r9, r2
    a674:	4698      	mov	r8, r3
                    ((static_cast<uint64_t>(overshootQx)) << 32) /
    a676:	461a      	mov	r2, r3
    a678:	4629      	mov	r1, r5
    a67a:	464b      	mov	r3, r9
                m_velCurrentQx = m_velTargetQx;
    a67c:	f8c4 a040 	str.w	sl, [r4, #64]	; 0x40
                    ((static_cast<uint64_t>(overshootQx)) << 32) /
    a680:	2000      	movs	r0, #0
    a682:	f01b fbbb 	bl	25dfc <__aeabi_uldivmod>
                    (static_cast<uint64_t>(pctSampleOverQ32) * overshootQx) >>
    a686:	4602      	mov	r2, r0
    a688:	fba2 0105 	umull	r0, r1, r2, r5
    a68c:	2300      	movs	r3, #0
    a68e:	fb05 1103 	mla	r1, r5, r3, r1
                m_posnCurrentQx -= (posnAdjQx + m_velCurrentQx);
    a692:	eb0a 0551 	add.w	r5, sl, r1, lsr #1
    a696:	1b76      	subs	r6, r6, r5
                                        m_velCurrentQx / m_accelCurrentQx) >> 1;
    a698:	4642      	mov	r2, r8
    a69a:	464b      	mov	r3, r9
    a69c:	fb8a 010a 	smull	r0, r1, sl, sl
                m_posnCurrentQx -= (posnAdjQx + m_velCurrentQx);
    a6a0:	f167 0700 	sbc.w	r7, r7, #0
                                        m_velCurrentQx / m_accelCurrentQx) >> 1;
    a6a4:	f01b fbaa 	bl	25dfc <__aeabi_uldivmod>
                m_posnDecelQx = m_posnTargetQx - decelDistQx;
    a6a8:	e9d4 2312 	ldrd	r2, r3, [r4, #72]	; 0x48
                                        m_velCurrentQx / m_accelCurrentQx) >> 1;
    a6ac:	0849      	lsrs	r1, r1, #1
    a6ae:	ea4f 0030 	mov.w	r0, r0, rrx
                m_posnDecelQx = m_posnTargetQx - decelDistQx;
    a6b2:	1a12      	subs	r2, r2, r0
    a6b4:	eb63 0301 	sbc.w	r3, r3, r1
    a6b8:	e9c4 2316 	strd	r2, r3, [r4, #88]	; 0x58
                m_moveState = MS_CRUISE;
    a6bc:	2303      	movs	r3, #3
    a6be:	7323      	strb	r3, [r4, #12]
    a6c0:	e6ec      	b.n	a49c <_ZN9ClearCore13StepGenerator15StepsCalculatedEv+0x1a4>
    a6c2:	7b43      	ldrb	r3, [r0, #13]
    a6c4:	6c05      	ldr	r5, [r0, #64]	; 0x40
    a6c6:	f8d0 a050 	ldr.w	sl, [r0, #80]	; 0x50
    a6ca:	9300      	str	r3, [sp, #0]
    a6cc:	e71d      	b.n	a50a <_ZN9ClearCore13StepGenerator15StepsCalculatedEv+0x212>
            if (m_altVelLimitQx && m_velCurrentQx && m_direction != m_dirCommanded) {
    a6ce:	7b40      	ldrb	r0, [r0, #13]
    a6d0:	f894 2022 	ldrb.w	r2, [r4, #34]	; 0x22
    a6d4:	9000      	str	r0, [sp, #0]
    a6d6:	4290      	cmp	r0, r2
    a6d8:	f47f af6a 	bne.w	a5b0 <_ZN9ClearCore13StepGenerator15StepsCalculatedEv+0x2b8>
    a6dc:	e6c9      	b.n	a472 <_ZN9ClearCore13StepGenerator15StepsCalculatedEv+0x17a>
                    m_accelCurrentQx = 0;
    a6de:	2300      	movs	r3, #0
                    m_moveState = MS_END;
    a6e0:	2206      	movs	r2, #6
                    m_accelCurrentQx = 0;
    a6e2:	6463      	str	r3, [r4, #68]	; 0x44
                    m_velCurrentQx = 0;
    a6e4:	6423      	str	r3, [r4, #64]	; 0x40
                    m_posnCurrentQx = m_posnTargetQx;
    a6e6:	e9c4 670e 	strd	r6, r7, [r4, #56]	; 0x38
    a6ea:	9900      	ldr	r1, [sp, #0]
                    m_moveState = MS_END;
    a6ec:	7322      	strb	r2, [r4, #12]
    a6ee:	69e3      	ldr	r3, [r4, #28]
    a6f0:	e634      	b.n	a35c <_ZN9ClearCore13StepGenerator15StepsCalculatedEv+0x64>
                                            m_velCurrentQx / m_accelCurrentQx) >> 1;
    a6f2:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
    a6f6:	fb8a 010a 	smull	r0, r1, sl, sl
    a6fa:	f01b fb7f 	bl	25dfc <__aeabi_uldivmod>
                    m_posnDecelQx = m_posnTargetQx - decelDistQx;
    a6fe:	e9d4 2312 	ldrd	r2, r3, [r4, #72]	; 0x48
                                            m_velCurrentQx / m_accelCurrentQx) >> 1;
    a702:	0849      	lsrs	r1, r1, #1
    a704:	ea4f 0030 	mov.w	r0, r0, rrx
                    m_posnDecelQx = m_posnTargetQx - decelDistQx;
    a708:	1a12      	subs	r2, r2, r0
    a70a:	eb63 0301 	sbc.w	r3, r3, r1
                    m_moveState = MS_CRUISE;
    a70e:	2003      	movs	r0, #3
                    m_posnDecelQx = m_posnTargetQx - decelDistQx;
    a710:	e9c4 2316 	strd	r2, r3, [r4, #88]	; 0x58
    a714:	9900      	ldr	r1, [sp, #0]
                    m_moveState = MS_CRUISE;
    a716:	7320      	strb	r0, [r4, #12]
    a718:	69e3      	ldr	r3, [r4, #28]
    a71a:	e61f      	b.n	a35c <_ZN9ClearCore13StepGenerator15StepsCalculatedEv+0x64>
                                                       ((static_cast<int64_t>(m_stepsCommanded) << FRACT_BITS)
    a71c:	69a6      	ldr	r6, [r4, #24]
    a71e:	17f1      	asrs	r1, r6, #31
    a720:	03cb      	lsls	r3, r1, #15
                                                        + accelStepsQx) * m_accelLimitQx)));
    a722:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
                                                       ((static_cast<int64_t>(m_stepsCommanded) << FRACT_BITS)
    a726:	03f2      	lsls	r2, r6, #15
                                                        + accelStepsQx) * m_accelLimitQx)));
    a728:	1880      	adds	r0, r0, r2
                                                       ((static_cast<int64_t>(m_stepsCommanded) << FRACT_BITS)
    a72a:	ea43 4356 	orr.w	r3, r3, r6, lsr #17
                                                        + accelStepsQx) * m_accelLimitQx)));
    a72e:	4159      	adcs	r1, r3
    a730:	460b      	mov	r3, r1
    a732:	fb00 f107 	mul.w	r1, r0, r7
    a736:	fb09 1303 	mla	r3, r9, r3, r1
    a73a:	fba0 0109 	umull	r0, r1, r0, r9
    a73e:	4419      	add	r1, r3
                        static_cast<int64_t>(sqrtf((float)(
    a740:	f01b face 	bl	25ce0 <__aeabi_l2f>
    a744:	ee00 0a10 	vmov	s0, r0
    a748:	eeb5 0a40 	vcmp.f32	s0, #0.0
    a74c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    a750:	eeb1 8ac0 	vsqrt.f32	s16, s0
    a754:	d439      	bmi.n	a7ca <_ZN9ClearCore13StepGenerator15StepsCalculatedEv+0x4d2>
                                                        + accelStepsQx) * m_accelLimitQx)));
    a756:	ee18 0a10 	vmov	r0, s16
    a75a:	f01b fb67 	bl	25e2c <__aeabi_f2lz>
                    m_velTargetQx = static_cast<int32_t>(min(vel64, INT32_MAX));
    a75e:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
    a762:	4282      	cmp	r2, r0
    a764:	f04f 0300 	mov.w	r3, #0
    a768:	eb73 0601 	sbcs.w	r6, r3, r1
    a76c:	bfb8      	it	lt
    a76e:	4610      	movlt	r0, r2
    a770:	6520      	str	r0, [r4, #80]	; 0x50
    a772:	4682      	mov	sl, r0
    a774:	e770      	b.n	a658 <_ZN9ClearCore13StepGenerator15StepsCalculatedEv+0x360>
                m_moveState = MS_CRUISE;
    a776:	2303      	movs	r3, #3
    a778:	7323      	strb	r3, [r4, #12]
    a77a:	e9d4 670e 	ldrd	r6, r7, [r4, #56]	; 0x38
    a77e:	e68d      	b.n	a49c <_ZN9ClearCore13StepGenerator15StepsCalculatedEv+0x1a4>
                    m_moveState = MS_ACCEL;
    a780:	2302      	movs	r3, #2
    a782:	7323      	strb	r3, [r4, #12]
    a784:	7b63      	ldrb	r3, [r4, #13]
    a786:	9300      	str	r3, [sp, #0]
    a788:	e6bf      	b.n	a50a <_ZN9ClearCore13StepGenerator15StepsCalculatedEv+0x212>
                m_stepsCommanded = m_stepsSent - m_stepsCommanded;
    a78a:	69c0      	ldr	r0, [r0, #28]
    a78c:	69a3      	ldr	r3, [r4, #24]
    a78e:	1ac0      	subs	r0, r0, r3
    a790:	e5d1      	b.n	a336 <_ZN9ClearCore13StepGenerator15StepsCalculatedEv+0x3e>
    a792:	7b63      	ldrb	r3, [r4, #13]
    a794:	f8d4 9044 	ldr.w	r9, [r4, #68]	; 0x44
    a798:	9300      	str	r3, [sp, #0]
    a79a:	e609      	b.n	a3b0 <_ZN9ClearCore13StepGenerator15StepsCalculatedEv+0xb8>
                    int64_t distToStopQx = (static_cast<int64_t>(m_velCurrentQx) * m_velCurrentQx /
    a79c:	464a      	mov	r2, r9
    a79e:	17d3      	asrs	r3, r2, #31
    a7a0:	fb85 0105 	smull	r0, r1, r5, r5
    a7a4:	f01b fada 	bl	25d5c <__aeabi_ldivmod>
                    m_moveDirChange = m_posnTargetQx - m_posnCurrentQx < distToStopQx;
    a7a8:	e9d4 230e 	ldrd	r2, r3, [r4, #56]	; 0x38
                                          m_accelCurrentQx) >> 1;
    a7ac:	1049      	asrs	r1, r1, #1
    a7ae:	ea4f 0030 	mov.w	r0, r0, rrx
                    m_moveDirChange = m_posnTargetQx - m_posnCurrentQx < distToStopQx;
    a7b2:	1ab6      	subs	r6, r6, r2
    a7b4:	eb67 0703 	sbc.w	r7, r7, r3
    a7b8:	4286      	cmp	r6, r0
    a7ba:	eb77 0301 	sbcs.w	r3, r7, r1
    a7be:	bfb4      	ite	lt
    a7c0:	2301      	movlt	r3, #1
    a7c2:	2300      	movge	r3, #0
    a7c4:	f884 3021 	strb.w	r3, [r4, #33]	; 0x21
    a7c8:	e716      	b.n	a5f8 <_ZN9ClearCore13StepGenerator15StepsCalculatedEv+0x300>
                        static_cast<int64_t>(sqrtf((float)(
    a7ca:	f01a f85d 	bl	24888 <sqrtf>
    a7ce:	6c25      	ldr	r5, [r4, #64]	; 0x40
    a7d0:	e7c1      	b.n	a756 <_ZN9ClearCore13StepGenerator15StepsCalculatedEv+0x45e>
    a7d2:	7b43      	ldrb	r3, [r0, #13]
    a7d4:	6c05      	ldr	r5, [r0, #64]	; 0x40
    a7d6:	f8d0 a050 	ldr.w	sl, [r0, #80]	; 0x50
    a7da:	f8d0 9044 	ldr.w	r9, [r0, #68]	; 0x44
    a7de:	9300      	str	r3, [sp, #0]
    a7e0:	e5eb      	b.n	a3ba <_ZN9ClearCore13StepGenerator15StepsCalculatedEv+0xc2>
    a7e2:	bf00      	nop

0000a7e4 <_ZN9ClearCore13StepGeneratorC1Ev>:
StepGenerator::StepGenerator()
    a7e4:	b4f0      	push	{r4, r5, r6, r7}
                  InNegHWLimitLast(0) {}
    a7e6:	7c04      	ldrb	r4, [r0, #16]
      m_altDecelLimitPendingQx(2) {}
    a7e8:	4916      	ldr	r1, [pc, #88]	; (a844 <_ZN9ClearCore13StepGeneratorC1Ev+0x60>)
    a7ea:	6001      	str	r1, [r0, #0]
    a7ec:	2200      	movs	r2, #0
    a7ee:	f004 04c0 	and.w	r4, r4, #192	; 0xc0
    a7f2:	2501      	movs	r5, #1
    a7f4:	2102      	movs	r1, #2
    a7f6:	2600      	movs	r6, #0
    a7f8:	2700      	movs	r7, #0
    a7fa:	f362 1486 	bfi	r4, r2, #6, #1
    a7fe:	7404      	strb	r4, [r0, #16]
    a800:	6042      	str	r2, [r0, #4]
    a802:	6082      	str	r2, [r0, #8]
    a804:	7302      	strb	r2, [r0, #12]
    a806:	7342      	strb	r2, [r0, #13]
    a808:	6142      	str	r2, [r0, #20]
    a80a:	6182      	str	r2, [r0, #24]
    a80c:	61c2      	str	r2, [r0, #28]
    a80e:	f880 2020 	strb.w	r2, [r0, #32]
    a812:	f880 2021 	strb.w	r2, [r0, #33]	; 0x21
    a816:	f880 2022 	strb.w	r2, [r0, #34]	; 0x22
    a81a:	6282      	str	r2, [r0, #40]	; 0x28
    a81c:	6402      	str	r2, [r0, #64]	; 0x40
    a81e:	6442      	str	r2, [r0, #68]	; 0x44
    a820:	6502      	str	r2, [r0, #80]	; 0x50
    a822:	6642      	str	r2, [r0, #100]	; 0x64
    a824:	7385      	strb	r5, [r0, #14]
    a826:	6245      	str	r5, [r0, #36]	; 0x24
    a828:	6605      	str	r5, [r0, #96]	; 0x60
    a82a:	62c1      	str	r1, [r0, #44]	; 0x2c
    a82c:	6301      	str	r1, [r0, #48]	; 0x30
    a82e:	6681      	str	r1, [r0, #104]	; 0x68
    a830:	66c1      	str	r1, [r0, #108]	; 0x6c
    a832:	e9c0 670e 	strd	r6, r7, [r0, #56]	; 0x38
    a836:	e9c0 6712 	strd	r6, r7, [r0, #72]	; 0x48
    a83a:	e9c0 6716 	strd	r6, r7, [r0, #88]	; 0x58
    a83e:	bcf0      	pop	{r4, r5, r6, r7}
    a840:	4770      	bx	lr
    a842:	bf00      	nop
    a844:	0002d14c 	.word	0x0002d14c

0000a848 <_ZN9ClearCore13StepGenerator14MoveStopAbruptEv>:
void StepGenerator::MoveStopAbrupt() {
    a848:	b4d0      	push	{r4, r6, r7}
  __ASM volatile ("cpsid i" : : : "memory");
    a84a:	b672      	cpsid	i
            m_velLimitQx = m_velLimitPendingQx;
    a84c:	6e03      	ldr	r3, [r0, #96]	; 0x60
            m_altVelLimitQx = m_altVelLimitPendingQx;
    a84e:	6e44      	ldr	r4, [r0, #100]	; 0x64
            m_accelLimitQx = m_accelLimitPendingQx;
    a850:	6e81      	ldr	r1, [r0, #104]	; 0x68
            m_altDecelLimitQx = m_altDecelLimitPendingQx;
    a852:	6ec2      	ldr	r2, [r0, #108]	; 0x6c
            m_velLimitQx = m_velLimitPendingQx;
    a854:	6243      	str	r3, [r0, #36]	; 0x24
    m_posnCurrentQx = 0;
    a856:	2600      	movs	r6, #0
    m_velCurrentQx = 0;
    a858:	2300      	movs	r3, #0
    m_posnCurrentQx = 0;
    a85a:	2700      	movs	r7, #0
    a85c:	e9c0 670e 	strd	r6, r7, [r0, #56]	; 0x38
            m_altVelLimitQx = m_altVelLimitPendingQx;
    a860:	6284      	str	r4, [r0, #40]	; 0x28
            m_accelLimitQx = m_accelLimitPendingQx;
    a862:	62c1      	str	r1, [r0, #44]	; 0x2c
            m_altDecelLimitQx = m_altDecelLimitPendingQx;
    a864:	6302      	str	r2, [r0, #48]	; 0x30
    m_velCurrentQx = 0;
    a866:	6403      	str	r3, [r0, #64]	; 0x40
    m_stepsSent = 0;
    a868:	61c3      	str	r3, [r0, #28]
    m_moveState = MS_IDLE;
    a86a:	7303      	strb	r3, [r0, #12]
    m_velocityMove = false;
    a86c:	f880 3020 	strb.w	r3, [r0, #32]
    m_stepsCommanded = 0;
    a870:	6183      	str	r3, [r0, #24]
    m_stepsPrevious = 0;
    a872:	6043      	str	r3, [r0, #4]
  __ASM volatile ("cpsie i" : : : "memory");
    a874:	b662      	cpsie	i
}
    a876:	bcd0      	pop	{r4, r6, r7}
    a878:	4770      	bx	lr
    a87a:	bf00      	nop
    a87c:	0000      	movs	r0, r0
	...

0000a880 <_ZN9ClearCore13StepGenerator13MoveStopDecelEm>:
void StepGenerator::MoveStopDecel(uint32_t decelMax) {
    a880:	b510      	push	{r4, lr}
    a882:	4604      	mov	r4, r0
    if (decelMax != 0) {
    a884:	b191      	cbz	r1, a8ac <_ZN9ClearCore13StepGenerator13MoveStopDecelEm+0x2c>
}

static int32_t ConvertAccel(uint32_t pulsesPerSecSq) {
    // Convert from step pulses/sec/sec to step pulses/sample/sample
    int64_t accelLim64 = ((static_cast<int64_t>(pulsesPerSecSq) << FRACT_BITS) /
                          (SampleRateHz * SampleRateHz));
    a886:	a312      	add	r3, pc, #72	; (adr r3, a8d0 <_ZN9ClearCore13StepGenerator13MoveStopDecelEm+0x50>)
    a888:	e9d3 2300 	ldrd	r2, r3, [r3]
    a88c:	03c8      	lsls	r0, r1, #15
    a88e:	0c49      	lsrs	r1, r1, #17
    a890:	f01b fa64 	bl	25d5c <__aeabi_ldivmod>
    a894:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
    a896:	2b02      	cmp	r3, #2
    // Ensure we didn't overflow 32-bit int
    int32_t accelLim32 = min(accelLim64, INT32_MAX);
    // Since accel has to be divided by 2 when calculating position increments,
    // make sure it is even
    accelLim32 &= ~1L;
    a898:	f020 0201 	bic.w	r2, r0, #1
    a89c:	bfb8      	it	lt
    a89e:	2302      	movlt	r3, #2
    a8a0:	4293      	cmp	r3, r2
    a8a2:	4618      	mov	r0, r3
    a8a4:	bfb8      	it	lt
    a8a6:	4610      	movlt	r0, r2
    value of the current move's accel limit or the decelMax given.
*/
void StepGenerator::EStopDecelMax(uint32_t decelMax) {
    // Convert from step pulses/sec/sec to step pulses/sample/sample
    int32_t decelQx = ConvertAccel(decelMax);
    m_altDecelLimitPendingQx = max(decelQx, m_accelLimitQx);
    a8a8:	66e0      	str	r0, [r4, #108]	; 0x6c
        m_altDecelLimitQx = m_altDecelLimitPendingQx;
    a8aa:	6320      	str	r0, [r4, #48]	; 0x30
  __ASM volatile ("cpsid i" : : : "memory");
    a8ac:	b672      	cpsid	i
    m_accelLimitQx = max(m_altDecelLimitQx, m_accelLimitQx);
    a8ae:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
    a8b0:	6b22      	ldr	r2, [r4, #48]	; 0x30
    a8b2:	4293      	cmp	r3, r2
    a8b4:	bfb8      	it	lt
    a8b6:	4613      	movlt	r3, r2
    m_altVelLimitQx = 0;
    a8b8:	2100      	movs	r1, #0
    m_velocityMove = true;
    a8ba:	2201      	movs	r2, #1
    m_accelLimitQx = max(m_altDecelLimitQx, m_accelLimitQx);
    a8bc:	62e3      	str	r3, [r4, #44]	; 0x2c
    m_altVelLimitQx = 0;
    a8be:	62a1      	str	r1, [r4, #40]	; 0x28
    m_velocityMove = true;
    a8c0:	f884 2020 	strb.w	r2, [r4, #32]
    m_moveState = MS_START;
    a8c4:	7322      	strb	r2, [r4, #12]
  __ASM volatile ("cpsie i" : : : "memory");
    a8c6:	b662      	cpsie	i
    a8c8:	bd10      	pop	{r4, pc}
    a8ca:	bf00      	nop
    a8cc:	f3af 8000 	nop.w
    a8d0:	017d7840 	.word	0x017d7840
    a8d4:	00000000 	.word	0x00000000

0000a8d8 <_ZN9ClearCore13StepGenerator20StepsPerSampleMaxSetEm>:

/*
    This function limits the velocity to the maximum that the step output
    can provide.
*/
void StepGenerator::StepsPerSampleMaxSet(uint32_t maxSteps) {
    a8d8:	b4f0      	push	{r4, r5, r6, r7}
  __ASM volatile ("cpsid i" : : : "memory");
    a8da:	b672      	cpsid	i
            m_velLimitQx = m_velLimitPendingQx;
    a8dc:	6e03      	ldr	r3, [r0, #96]	; 0x60
            m_altVelLimitQx = m_altVelLimitPendingQx;
    a8de:	6e45      	ldr	r5, [r0, #100]	; 0x64
            m_accelLimitQx = m_accelLimitPendingQx;
    a8e0:	6e84      	ldr	r4, [r0, #104]	; 0x68
            m_altDecelLimitQx = m_altDecelLimitPendingQx;
    a8e2:	6ec2      	ldr	r2, [r0, #108]	; 0x6c
            m_velLimitQx = m_velLimitPendingQx;
    a8e4:	6243      	str	r3, [r0, #36]	; 0x24
    m_posnCurrentQx = 0;
    a8e6:	2600      	movs	r6, #0
    m_velCurrentQx = 0;
    a8e8:	2300      	movs	r3, #0
    m_posnCurrentQx = 0;
    a8ea:	2700      	movs	r7, #0
    a8ec:	e9c0 670e 	strd	r6, r7, [r0, #56]	; 0x38
            m_altVelLimitQx = m_altVelLimitPendingQx;
    a8f0:	6285      	str	r5, [r0, #40]	; 0x28
            m_accelLimitQx = m_accelLimitPendingQx;
    a8f2:	62c4      	str	r4, [r0, #44]	; 0x2c
            m_altDecelLimitQx = m_altDecelLimitPendingQx;
    a8f4:	6302      	str	r2, [r0, #48]	; 0x30
    m_velCurrentQx = 0;
    a8f6:	6403      	str	r3, [r0, #64]	; 0x40
    m_stepsSent = 0;
    a8f8:	61c3      	str	r3, [r0, #28]
    m_moveState = MS_IDLE;
    a8fa:	7303      	strb	r3, [r0, #12]
    m_velocityMove = false;
    a8fc:	f880 3020 	strb.w	r3, [r0, #32]
    m_stepsCommanded = 0;
    a900:	6183      	str	r3, [r0, #24]
    m_stepsPrevious = 0;
    a902:	6043      	str	r3, [r0, #4]
  __ASM volatile ("cpsie i" : : : "memory");
    a904:	b662      	cpsie	i
    MoveStopAbrupt();
    m_stepsPerSampleMax = maxSteps;
    // Recalculate maximum velocity limit
    int64_t velLim64 = static_cast<int64_t>(m_stepsPerSampleMax) << FRACT_BITS;
    // Ensure we didn't overflow 32-bit int
    velLim64 = min(velLim64, INT32_MAX);
    a906:	f06f 4400 	mvn.w	r4, #2147483648	; 0x80000000
    a90a:	03ca      	lsls	r2, r1, #15
    a90c:	0c4b      	lsrs	r3, r1, #17
    a90e:	4294      	cmp	r4, r2
    a910:	f04f 0500 	mov.w	r5, #0
    m_stepsPerSampleMax = maxSteps;
    a914:	6081      	str	r1, [r0, #8]
    velLim64 = min(velLim64, INT32_MAX);
    a916:	eb75 0103 	sbcs.w	r1, r5, r3
    a91a:	bfbc      	itt	lt
    a91c:	4622      	movlt	r2, r4
    a91e:	462b      	movlt	r3, r5
    // Enforce minimum velocity of 1 step pulse/sample
    velLim64 = max(velLim64, 1);
    a920:	2a01      	cmp	r2, #1
    a922:	f173 0100 	sbcs.w	r1, r3, #0
    // Clip velocity limit if higher than max velocity limit
    m_velLimitPendingQx = min(velLim64, m_velLimitQx);
    a926:	6a44      	ldr	r4, [r0, #36]	; 0x24
    velLim64 = max(velLim64, 1);
    a928:	bfbc      	itt	lt
    a92a:	2201      	movlt	r2, #1
    a92c:	2300      	movlt	r3, #0
    m_velLimitPendingQx = min(velLim64, m_velLimitQx);
    a92e:	17e5      	asrs	r5, r4, #31
    a930:	4294      	cmp	r4, r2
    a932:	eb75 0103 	sbcs.w	r1, r5, r3
    a936:	bfb8      	it	lt
    a938:	4622      	movlt	r2, r4
    a93a:	6602      	str	r2, [r0, #96]	; 0x60
}
    a93c:	bcf0      	pop	{r4, r5, r6, r7}
    a93e:	4770      	bx	lr

0000a940 <_ZN9ClearCore13StepGenerator17CheckTravelLimitsEv>:

 bool StepGenerator::CheckTravelLimits() {
    if (m_stepsPrevious == 0) {
    a940:	6843      	ldr	r3, [r0, #4]
    a942:	b363      	cbz	r3, a99e <_ZN9ClearCore13StepGenerator17CheckTravelLimitsEv+0x5e>
        return false;
    }

    // Determine if we are physically in the hardware limits
    m_limitInfo.EnterHWLimit = (m_limitInfo.InPosHWLimit || m_limitInfo.InNegHWLimit)
    a944:	7c03      	ldrb	r3, [r0, #16]
                            && ((m_limitInfo.InPosHWLimit != m_limitInfo.InPosHWLimitLast)
    a946:	f013 0218 	ands.w	r2, r3, #24
    a94a:	d12a      	bne.n	a9a2 <_ZN9ClearCore13StepGenerator17CheckTravelLimitsEv+0x62>
    a94c:	4613      	mov	r3, r2
    m_limitInfo.EnterHWLimit = (m_limitInfo.InPosHWLimit || m_limitInfo.InNegHWLimit)
    a94e:	7c02      	ldrb	r2, [r0, #16]
    a950:	f363 0282 	bfi	r2, r3, #2, #1
                            ||  (m_limitInfo.InNegHWLimit != m_limitInfo.InNegHWLimitLast));
    m_limitInfo.InPosHWLimitLast = m_limitInfo.InPosHWLimit;
    a954:	b2d2      	uxtb	r2, r2
    a956:	4613      	mov	r3, r2
    a958:	f3c2 02c0 	ubfx	r2, r2, #3, #1
    a95c:	f362 1345 	bfi	r3, r2, #5, #1
    m_limitInfo.InNegHWLimitLast = m_limitInfo.InNegHWLimit;
    a960:	b2db      	uxtb	r3, r3
    a962:	461a      	mov	r2, r3
    a964:	f3c3 1300 	ubfx	r3, r3, #4, #1
    a968:	f363 1286 	bfi	r2, r3, #6, #1

    if (m_limitInfo.EnterHWLimit) {
    a96c:	b2d3      	uxtb	r3, r2
    m_limitInfo.InNegHWLimitLast = m_limitInfo.InNegHWLimit;
    a96e:	7402      	strb	r2, [r0, #16]
    if (m_limitInfo.EnterHWLimit) {
    a970:	075a      	lsls	r2, r3, #29
    a972:	d514      	bpl.n	a99e <_ZN9ClearCore13StepGenerator17CheckTravelLimitsEv+0x5e>

        if ((!m_direction && m_limitInfo.InPosHWLimit) ||
    a974:	7b42      	ldrb	r2, [r0, #13]
    a976:	b9e2      	cbnz	r2, a9b2 <_ZN9ClearCore13StepGenerator17CheckTravelLimitsEv+0x72>
    a978:	0719      	lsls	r1, r3, #28
    a97a:	d510      	bpl.n	a99e <_ZN9ClearCore13StepGenerator17CheckTravelLimitsEv+0x5e>
            (m_direction && m_limitInfo.InNegHWLimit)) {
            // Ramp to a stop
            if (!m_direction) {
                m_limitInfo.LimitRampPos = true;
    a97c:	f043 0301 	orr.w	r3, r3, #1
    a980:	7403      	strb	r3, [r0, #16]
  __ASM volatile ("cpsid i" : : : "memory");
    a982:	b672      	cpsid	i
    m_accelLimitQx = max(m_altDecelLimitQx, m_accelLimitQx);
    a984:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
    a986:	6b02      	ldr	r2, [r0, #48]	; 0x30
    a988:	4293      	cmp	r3, r2
    a98a:	bfb8      	it	lt
    a98c:	4613      	movlt	r3, r2
    m_altVelLimitQx = 0;
    a98e:	2100      	movs	r1, #0
    m_velocityMove = true;
    a990:	2201      	movs	r2, #1
    m_accelLimitQx = max(m_altDecelLimitQx, m_accelLimitQx);
    a992:	62c3      	str	r3, [r0, #44]	; 0x2c
    m_altVelLimitQx = 0;
    a994:	6281      	str	r1, [r0, #40]	; 0x28
    m_velocityMove = true;
    a996:	f880 2020 	strb.w	r2, [r0, #32]
    m_moveState = MS_START;
    a99a:	7302      	strb	r2, [r0, #12]
  __ASM volatile ("cpsie i" : : : "memory");
    a99c:	b662      	cpsie	i
            }
            MoveStopDecel();
        }
    }
    return false;
}
    a99e:	2000      	movs	r0, #0
    a9a0:	4770      	bx	lr
                            && ((m_limitInfo.InPosHWLimit != m_limitInfo.InPosHWLimitLast)
    a9a2:	f3c3 02c1 	ubfx	r2, r3, #3, #2
    a9a6:	f3c3 1341 	ubfx	r3, r3, #5, #2
    a9aa:	1ad3      	subs	r3, r2, r3
    a9ac:	bf18      	it	ne
    a9ae:	2301      	movne	r3, #1
    a9b0:	e7cd      	b.n	a94e <_ZN9ClearCore13StepGenerator17CheckTravelLimitsEv+0xe>
            (m_direction && m_limitInfo.InNegHWLimit)) {
    a9b2:	06da      	lsls	r2, r3, #27
    a9b4:	d5f3      	bpl.n	a99e <_ZN9ClearCore13StepGenerator17CheckTravelLimitsEv+0x5e>
                m_limitInfo.LimitRampNeg = true;
    a9b6:	f043 0302 	orr.w	r3, r3, #2
    a9ba:	7403      	strb	r3, [r0, #16]
    a9bc:	e7e1      	b.n	a982 <_ZN9ClearCore13StepGenerator17CheckTravelLimitsEv+0x42>
    a9be:	bf00      	nop

0000a9c0 <SystemInit>:
    // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
    // Start and setup the various oscillators
    // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

    // Start the external 10MHz MEMS oscillator
    OSCCTRL->XOSCCTRL[1].reg =
    a9c0:	4ba1      	ldr	r3, [pc, #644]	; (ac48 <SystemInit+0x288>)
    a9c2:	f242 6202 	movw	r2, #9730	; 0x2602
void SystemInit(void) {
    a9c6:	b4f0      	push	{r4, r5, r6, r7}
    OSCCTRL->XOSCCTRL[1].reg =
    a9c8:	619a      	str	r2, [r3, #24]
        OSCCTRL_XOSCCTRL_IMULT(4) |
        OSCCTRL_XOSCCTRL_IPTAT(3) |
        OSCCTRL_XOSCCTRL_ENABLE;
    // Wait for clock to run
    while (!OSCCTRL->STATUS.bit.XOSCRDY1) {
    a9ca:	691a      	ldr	r2, [r3, #16]
    a9cc:	0792      	lsls	r2, r2, #30
    a9ce:	d5fc      	bpl.n	a9ca <SystemInit+0xa>
        continue;
    }
    // Create 1MHz clock on GCLK5 to act as source for DPLL0/1 and SERCOM6
    GCLK->GENCTRL[5].reg = GCLK_GENCTRL_SRC(GCLK_GENCTRL_SRC_XOSC1_Val) |
    a9d0:	4a9e      	ldr	r2, [pc, #632]	; (ac4c <SystemInit+0x28c>)
    a9d2:	4b9f      	ldr	r3, [pc, #636]	; (ac50 <SystemInit+0x290>)
    a9d4:	6353      	str	r3, [r2, #52]	; 0x34
                           GCLK_GENCTRL_GENEN |
                           GCLK_GENCTRL_DIV(__CLEARCORE_OSC_HZ /
                                            __CLEARCORE_GCLK5_HZ) |
                           GCLK_GENCTRL_IDC;
    SYNCBUSY_WAIT(GCLK, GCLK_SYNCBUSY_GENCTRL5);
    a9d6:	6853      	ldr	r3, [r2, #4]
    a9d8:	f013 0380 	ands.w	r3, r3, #128	; 0x80
    a9dc:	d1fb      	bne.n	a9d6 <SystemInit+0x16>

    // Make good 120MHz CPU clock using DPLL1 multiplying GCLK5 up
    SET_CLOCK_SOURCE(OSCCTRL_GCLK_ID_FDPLL1, 5);
    a9de:	f8d2 0088 	ldr.w	r0, [r2, #136]	; 0x88
    a9e2:	499a      	ldr	r1, [pc, #616]	; (ac4c <SystemInit+0x28c>)
    a9e4:	f363 1086 	bfi	r0, r3, #6, #1
    a9e8:	f8c2 0088 	str.w	r0, [r2, #136]	; 0x88
    a9ec:	f8d1 3088 	ldr.w	r3, [r1, #136]	; 0x88
    a9f0:	065b      	lsls	r3, r3, #25
    a9f2:	d4fb      	bmi.n	a9ec <SystemInit+0x2c>
    a9f4:	f8d1 3088 	ldr.w	r3, [r1, #136]	; 0x88
    a9f8:	4a94      	ldr	r2, [pc, #592]	; (ac4c <SystemInit+0x28c>)
    a9fa:	2005      	movs	r0, #5
    a9fc:	f360 0303 	bfi	r3, r0, #0, #4
    aa00:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    aa04:	f8d1 3088 	ldr.w	r3, [r1, #136]	; 0x88
    aa08:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    aa0c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    aa10:	6853      	ldr	r3, [r2, #4]
    aa12:	f013 0f14 	tst.w	r3, #20
    aa16:	d1fb      	bne.n	aa10 <SystemInit+0x50>
    // Set the integer part of the frequency multiplier (loop divider ratio)
    OSCCTRL->Dpll[1].DPLLRATIO.reg =
    aa18:	4b8b      	ldr	r3, [pc, #556]	; (ac48 <SystemInit+0x288>)
    aa1a:	2277      	movs	r2, #119	; 0x77
    OSCCTRL_DPLLRATIO_LDR(__CLEARCORE_DPLL1_HZ / __CLEARCORE_GCLK5_HZ - 1);  
    // Set GCLK as the DPLL clock reference, and set Wake Up Fast
    OSCCTRL->Dpll[1].DPLLCTRLB.reg = OSCCTRL_DPLLCTRLB_REFCLK_GCLK |
    aa1c:	2010      	movs	r0, #16
                                     OSCCTRL_DPLLCTRLB_WUF;
        
    // Set the DPLL (digital phase-locked loop) to run in standby and sleep mode
    // If ONDEMAND is not set, the signal will be generated constantly
    // Finally, enable the DPLL
    OSCCTRL->Dpll[1].DPLLCTRLA.reg = OSCCTRL_DPLLCTRLA_RUNSTDBY |
    aa1e:	2142      	movs	r1, #66	; 0x42
    OSCCTRL->Dpll[1].DPLLRATIO.reg =
    aa20:	649a      	str	r2, [r3, #72]	; 0x48
    OSCCTRL->Dpll[1].DPLLCTRLB.reg = OSCCTRL_DPLLCTRLB_REFCLK_GCLK |
    aa22:	64d8      	str	r0, [r3, #76]	; 0x4c
                                     OSCCTRL_DPLLCTRLA_ENABLE;

    while (OSCCTRL->STATUS.bit.DPLL1LCKR) {
    aa24:	461a      	mov	r2, r3
    OSCCTRL->Dpll[1].DPLLCTRLA.reg = OSCCTRL_DPLLCTRLA_RUNSTDBY |
    aa26:	f883 1044 	strb.w	r1, [r3, #68]	; 0x44
    while (OSCCTRL->STATUS.bit.DPLL1LCKR) {
    aa2a:	6913      	ldr	r3, [r2, #16]
    aa2c:	01df      	lsls	r7, r3, #7
    aa2e:	d4fc      	bmi.n	aa2a <SystemInit+0x6a>
        continue;
    }
    // Route DPLL1 @ 120MHz to CPU Clock before killing off 48MHz clock we
    // started with.
    GCLK->GENCTRL[0].reg = GCLK_GENCTRL_SRC(GCLK_GENCTRL_SRC_DPLL1_Val) |
    aa30:	4a86      	ldr	r2, [pc, #536]	; (ac4c <SystemInit+0x28c>)
    aa32:	f44f 7384 	mov.w	r3, #264	; 0x108
    aa36:	6213      	str	r3, [r2, #32]
                           GCLK_GENCTRL_GENEN |
                           GCLK_GENCTRL_DIV(0);
    SYNCBUSY_WAIT(GCLK, GCLK_SYNCBUSY_GENCTRL0);
    aa38:	6853      	ldr	r3, [r2, #4]
    aa3a:	f013 0304 	ands.w	r3, r3, #4
    aa3e:	d1fb      	bne.n	aa38 <SystemInit+0x78>
    // Clocks running and locked, switch core clock to 120MHz
    MCLK->CPUDIV.reg = MCLK_CPUDIV_DIV_DIV1;
    aa40:	4884      	ldr	r0, [pc, #528]	; (ac54 <SystemInit+0x294>)

    // Use 96MHz clock for USB with / 2 on GCLK4 for 48MHz
    // using GCLK5 as reference.
    SET_CLOCK_SOURCE(OSCCTRL_GCLK_ID_FDPLL0, 5);
    aa42:	4982      	ldr	r1, [pc, #520]	; (ac4c <SystemInit+0x28c>)
    MCLK->CPUDIV.reg = MCLK_CPUDIV_DIV_DIV1;
    aa44:	2401      	movs	r4, #1
    aa46:	7144      	strb	r4, [r0, #5]
    SET_CLOCK_SOURCE(OSCCTRL_GCLK_ID_FDPLL0, 5);
    aa48:	f8d2 0084 	ldr.w	r0, [r2, #132]	; 0x84
    aa4c:	f363 1086 	bfi	r0, r3, #6, #1
    aa50:	f8c2 0084 	str.w	r0, [r2, #132]	; 0x84
    aa54:	f8d1 3084 	ldr.w	r3, [r1, #132]	; 0x84
    aa58:	065e      	lsls	r6, r3, #25
    aa5a:	d4fb      	bmi.n	aa54 <SystemInit+0x94>
    aa5c:	f8d1 3084 	ldr.w	r3, [r1, #132]	; 0x84
    aa60:	4a7a      	ldr	r2, [pc, #488]	; (ac4c <SystemInit+0x28c>)
    aa62:	2005      	movs	r0, #5
    aa64:	f360 0303 	bfi	r3, r0, #0, #4
    aa68:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    aa6c:	f8d1 3084 	ldr.w	r3, [r1, #132]	; 0x84
    aa70:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    aa74:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    aa78:	6853      	ldr	r3, [r2, #4]
    aa7a:	f013 0314 	ands.w	r3, r3, #20
    aa7e:	d1fb      	bne.n	aa78 <SystemInit+0xb8>
    // set the integer part of the frequency multiplier (loop divider ratio)
    OSCCTRL->Dpll[0].DPLLRATIO.reg =
    aa80:	4871      	ldr	r0, [pc, #452]	; (ac48 <SystemInit+0x288>)
    // enable the DPLL
    OSCCTRL->Dpll[0].DPLLCTRLA.reg = OSCCTRL_DPLLCTRLA_ENABLE;

    // Disable DFLL48M since we are going to use DPLL to generate 48MHz.
    GCLK->PCHCTRL[OSCCTRL_GCLK_ID_DFLL48].bit.CHEN = 0;
    while (GCLK->PCHCTRL[OSCCTRL_GCLK_ID_DFLL48].bit.CHEN) {
    aa82:	4972      	ldr	r1, [pc, #456]	; (ac4c <SystemInit+0x28c>)
    OSCCTRL->Dpll[0].DPLLRATIO.reg =
    aa84:	265f      	movs	r6, #95	; 0x5f
    OSCCTRL->Dpll[0].DPLLCTRLB.reg = OSCCTRL_DPLLCTRLB_LTIME_DEFAULT |
    aa86:	2510      	movs	r5, #16
    OSCCTRL->Dpll[0].DPLLCTRLA.reg = OSCCTRL_DPLLCTRLA_ENABLE;
    aa88:	2402      	movs	r4, #2
    OSCCTRL->Dpll[0].DPLLRATIO.reg =
    aa8a:	6346      	str	r6, [r0, #52]	; 0x34
    OSCCTRL->Dpll[0].DPLLCTRLB.reg = OSCCTRL_DPLLCTRLB_LTIME_DEFAULT |
    aa8c:	6385      	str	r5, [r0, #56]	; 0x38
    OSCCTRL->Dpll[0].DPLLCTRLA.reg = OSCCTRL_DPLLCTRLA_ENABLE;
    aa8e:	f880 4030 	strb.w	r4, [r0, #48]	; 0x30
    GCLK->PCHCTRL[OSCCTRL_GCLK_ID_DFLL48].bit.CHEN = 0;
    aa92:	f8d2 0080 	ldr.w	r0, [r2, #128]	; 0x80
    aa96:	f363 1086 	bfi	r0, r3, #6, #1
    aa9a:	f8c2 0080 	str.w	r0, [r2, #128]	; 0x80
    while (GCLK->PCHCTRL[OSCCTRL_GCLK_ID_DFLL48].bit.CHEN) {
    aa9e:	f8d1 3080 	ldr.w	r3, [r1, #128]	; 0x80
    aaa2:	f3c3 1380 	ubfx	r3, r3, #6, #1
    aaa6:	2b00      	cmp	r3, #0
    aaa8:	d1f9      	bne.n	aa9e <SystemInit+0xde>
        continue;
    }

    OSCCTRL->DFLLCTRLA.reg = 0;
    aaaa:	4c67      	ldr	r4, [pc, #412]	; (ac48 <SystemInit+0x288>)
    // Setup GCLK4 to output 48 MHz for USB
    GCLK->GENCTRL[4].reg = GCLK_GENCTRL_GENEN |
    aaac:	486a      	ldr	r0, [pc, #424]	; (ac58 <SystemInit+0x298>)
                           GCLK_GENCTRL_DIV(__CLEARCORE_DPLL0_HZ /
                                            __CLEARCORE_GCLK4_HZ) |
                           GCLK_GENCTRL_SRC_DPLL0;
    // Wait for clock domain sync
    SYNCBUSY_WAIT(GCLK, GCLK_SYNCBUSY_GENCTRL4);
    aaae:	4a67      	ldr	r2, [pc, #412]	; (ac4c <SystemInit+0x28c>)
    OSCCTRL->DFLLCTRLA.reg = 0;
    aab0:	7723      	strb	r3, [r4, #28]
    GCLK->GENCTRL[4].reg = GCLK_GENCTRL_GENEN |
    aab2:	6308      	str	r0, [r1, #48]	; 0x30
    SYNCBUSY_WAIT(GCLK, GCLK_SYNCBUSY_GENCTRL4);
    aab4:	6853      	ldr	r3, [r2, #4]
    aab6:	065d      	lsls	r5, r3, #25
    aab8:	d4fc      	bmi.n	aab4 <SystemInit+0xf4>
                           GCLK_GENCTRL_OE;

    // Make sure PORT module is powered up and clocked
    // Should be on already: CLOCK_ENABLE(APBBMASK, PORT_);
    // Make sure SERCOMS are powered up and clocked
    CLOCK_ENABLE(APBAMASK, SERCOM0_);
    aaba:	4b66      	ldr	r3, [pc, #408]	; (ac54 <SystemInit+0x294>)
    GCLK->GENCTRL[1].reg = GCLK_GENCTRL_SRC(GCLK_GENCTRL_SRC_XOSC1_Val) |
    aabc:	4967      	ldr	r1, [pc, #412]	; (ac5c <SystemInit+0x29c>)
    aabe:	6251      	str	r1, [r2, #36]	; 0x24
    CLOCK_ENABLE(APBAMASK, SERCOM0_);
    aac0:	6958      	ldr	r0, [r3, #20]
    CLOCK_ENABLE(APBAMASK, TC0_); // HLFB(3)

    CLOCK_ENABLE(APBDMASK, TC6_); // HBridge PWM output

    // Enable the cache controller
    CMCC->CTRL.reg = CMCC_CTRL_CEN;
    aac2:	4e67      	ldr	r6, [pc, #412]	; (ac60 <SystemInit+0x2a0>)
    // Enable the FPU
    SCB->CPACR = 0xFU << 20;
    aac4:	4d67      	ldr	r5, [pc, #412]	; (ac64 <SystemInit+0x2a4>)

    // set up GCLK6 for OUT TCx and HLFB TCx
    GCLK->GENCTRL[6].reg = GCLK_GENCTRL_GENEN |
    aac6:	4c68      	ldr	r4, [pc, #416]	; (ac68 <SystemInit+0x2a8>)
                           GCLK_GENCTRL_SRC(GCLK_GENCTRL_SRC_DPLL1_Val) |
                           GCLK_GENCTRL_DIV(__CLEARCORE_DPLL1_HZ /
                                            __CLEARCORE_GCLK6_HZ);
    SYNCBUSY_WAIT(GCLK, GCLK_SYNCBUSY_GENCTRL6);
    aac8:	4960      	ldr	r1, [pc, #384]	; (ac4c <SystemInit+0x28c>)
    CLOCK_ENABLE(APBAMASK, SERCOM0_);
    aaca:	f440 5080 	orr.w	r0, r0, #4096	; 0x1000
    aace:	6158      	str	r0, [r3, #20]
    CLOCK_ENABLE(APBBMASK, TC3_); // HLFB(2)
    aad0:	6998      	ldr	r0, [r3, #24]
    aad2:	f440 4080 	orr.w	r0, r0, #16384	; 0x4000
    aad6:	6198      	str	r0, [r3, #24]
    CLOCK_ENABLE(APBAMASK, EIC_);
    aad8:	6958      	ldr	r0, [r3, #20]
    aada:	f440 6080 	orr.w	r0, r0, #1024	; 0x400
    aade:	6158      	str	r0, [r3, #20]
    CLOCK_ENABLE(APBBMASK, EVSYS_);
    aae0:	6998      	ldr	r0, [r3, #24]
    aae2:	f040 0080 	orr.w	r0, r0, #128	; 0x80
    aae6:	6198      	str	r0, [r3, #24]
    CLOCK_ENABLE(APBBMASK, SERCOM2_);          // XBee
    aae8:	6998      	ldr	r0, [r3, #24]
    aaea:	f440 7000 	orr.w	r0, r0, #512	; 0x200
    aaee:	6198      	str	r0, [r3, #24]
    CLOCK_ENABLE(APBCMASK, TC4_); // HLFB(0)
    aaf0:	69d8      	ldr	r0, [r3, #28]
    aaf2:	f040 0020 	orr.w	r0, r0, #32
    aaf6:	61d8      	str	r0, [r3, #28]
    CLOCK_ENABLE(AHBMASK, GMAC_);
    aaf8:	6918      	ldr	r0, [r3, #16]
    aafa:	f440 4080 	orr.w	r0, r0, #16384	; 0x4000
    aafe:	6118      	str	r0, [r3, #16]
    CLOCK_ENABLE(APBCMASK, GMAC_); // Ethernet
    ab00:	69d8      	ldr	r0, [r3, #28]
    ab02:	f040 0004 	orr.w	r0, r0, #4
    ab06:	61d8      	str	r0, [r3, #28]
    CLOCK_ENABLE(APBDMASK, SERCOM4_);          // SD
    ab08:	6a18      	ldr	r0, [r3, #32]
    ab0a:	f040 0001 	orr.w	r0, r0, #1
    ab0e:	6218      	str	r0, [r3, #32]
    CLOCK_ENABLE(APBDMASK, SERCOM7_);
    ab10:	6a18      	ldr	r0, [r3, #32]
    ab12:	f040 0008 	orr.w	r0, r0, #8
    ab16:	6218      	str	r0, [r3, #32]
    CLOCK_ENABLE(APBDMASK, ADC1_);
    ab18:	6a18      	ldr	r0, [r3, #32]
    ab1a:	f440 7080 	orr.w	r0, r0, #256	; 0x100
    ab1e:	6218      	str	r0, [r3, #32]
    CLOCK_ENABLE(APBCMASK, TC5_); // HLFB(1)
    ab20:	69d8      	ldr	r0, [r3, #28]
    ab22:	f040 0040 	orr.w	r0, r0, #64	; 0x40
    ab26:	61d8      	str	r0, [r3, #28]
    CLOCK_ENABLE(APBAMASK, TC0_); // HLFB(3)
    ab28:	6958      	ldr	r0, [r3, #20]
    ab2a:	f440 4080 	orr.w	r0, r0, #16384	; 0x4000
    ab2e:	6158      	str	r0, [r3, #20]
    CLOCK_ENABLE(APBDMASK, TC6_); // HBridge PWM output
    ab30:	6a18      	ldr	r0, [r3, #32]
    ab32:	f040 0020 	orr.w	r0, r0, #32
    ab36:	6218      	str	r0, [r3, #32]
    CMCC->CTRL.reg = CMCC_CTRL_CEN;
    ab38:	2701      	movs	r7, #1
    SCB->CPACR = 0xFU << 20;
    ab3a:	f44f 0370 	mov.w	r3, #15728640	; 0xf00000
    CMCC->CTRL.reg = CMCC_CTRL_CEN;
    ab3e:	60b7      	str	r7, [r6, #8]
    SCB->CPACR = 0xFU << 20;
    ab40:	f8c5 3088 	str.w	r3, [r5, #136]	; 0x88
    GCLK->GENCTRL[6].reg = GCLK_GENCTRL_GENEN |
    ab44:	6394      	str	r4, [r2, #56]	; 0x38
    SYNCBUSY_WAIT(GCLK, GCLK_SYNCBUSY_GENCTRL6);
    ab46:	684b      	ldr	r3, [r1, #4]
    ab48:	f413 7380 	ands.w	r3, r3, #256	; 0x100
    ab4c:	d1fb      	bne.n	ab46 <SystemInit+0x186>

    // set up GCLK7 for SPI sercom clocking
    GCLK->GENCTRL[7].reg = GCLK_GENCTRL_GENEN |
    ab4e:	4a47      	ldr	r2, [pc, #284]	; (ac6c <SystemInit+0x2ac>)
    ab50:	63ca      	str	r2, [r1, #60]	; 0x3c
                           GCLK_GENCTRL_SRC(GCLK_GENCTRL_SRC_DPLL1_Val) |
                           GCLK_GENCTRL_DIV(__CLEARCORE_DPLL1_HZ /
                                            __CLEARCORE_GCLK7_HZ);

    // CPU Clock @ 120MHz on GCLK(0), GCLK(6)=2.048MHz
    SET_CLOCK_SOURCE(EIC_GCLK_ID, 6);
    ab52:	f8d1 0090 	ldr.w	r0, [r1, #144]	; 0x90
    ab56:	4a3d      	ldr	r2, [pc, #244]	; (ac4c <SystemInit+0x28c>)
    ab58:	f363 1086 	bfi	r0, r3, #6, #1
    ab5c:	f8c1 0090 	str.w	r0, [r1, #144]	; 0x90
    ab60:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
    ab64:	065c      	lsls	r4, r3, #25
    ab66:	d4fb      	bmi.n	ab60 <SystemInit+0x1a0>
    ab68:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
    ab6c:	4937      	ldr	r1, [pc, #220]	; (ac4c <SystemInit+0x28c>)
    ab6e:	2006      	movs	r0, #6
    ab70:	f360 0303 	bfi	r3, r0, #0, #4
    ab74:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
    ab78:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
    ab7c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    ab80:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
    ab84:	684b      	ldr	r3, [r1, #4]
    ab86:	f013 0318 	ands.w	r3, r3, #24
    ab8a:	d1fb      	bne.n	ab84 <SystemInit+0x1c4>
    // HLFB timers
    SET_CLOCK_SOURCE(TC0_GCLK_ID, 6);
    ab8c:	f8d1 00a4 	ldr.w	r0, [r1, #164]	; 0xa4
    ab90:	4a2e      	ldr	r2, [pc, #184]	; (ac4c <SystemInit+0x28c>)
    ab92:	f363 1086 	bfi	r0, r3, #6, #1
    ab96:	f8c1 00a4 	str.w	r0, [r1, #164]	; 0xa4
    ab9a:	f8d2 30a4 	ldr.w	r3, [r2, #164]	; 0xa4
    ab9e:	0658      	lsls	r0, r3, #25
    aba0:	d4fb      	bmi.n	ab9a <SystemInit+0x1da>
    aba2:	f8d2 30a4 	ldr.w	r3, [r2, #164]	; 0xa4
    aba6:	4929      	ldr	r1, [pc, #164]	; (ac4c <SystemInit+0x28c>)
    aba8:	2006      	movs	r0, #6
    abaa:	f360 0303 	bfi	r3, r0, #0, #4
    abae:	f8c2 30a4 	str.w	r3, [r2, #164]	; 0xa4
    abb2:	f8d2 30a4 	ldr.w	r3, [r2, #164]	; 0xa4
    abb6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    abba:	f8c2 30a4 	str.w	r3, [r2, #164]	; 0xa4
    abbe:	684b      	ldr	r3, [r1, #4]
    abc0:	f013 0318 	ands.w	r3, r3, #24
    abc4:	d1fb      	bne.n	abbe <SystemInit+0x1fe>
    SET_CLOCK_SOURCE(TC4_GCLK_ID, 6);
    abc6:	f8d1 00f8 	ldr.w	r0, [r1, #248]	; 0xf8
    abca:	4a20      	ldr	r2, [pc, #128]	; (ac4c <SystemInit+0x28c>)
    abcc:	f363 1086 	bfi	r0, r3, #6, #1
    abd0:	f8c1 00f8 	str.w	r0, [r1, #248]	; 0xf8
    abd4:	f8d2 30f8 	ldr.w	r3, [r2, #248]	; 0xf8
    abd8:	0659      	lsls	r1, r3, #25
    abda:	d4fb      	bmi.n	abd4 <SystemInit+0x214>
    abdc:	f8d2 30f8 	ldr.w	r3, [r2, #248]	; 0xf8
    abe0:	491a      	ldr	r1, [pc, #104]	; (ac4c <SystemInit+0x28c>)
    abe2:	2006      	movs	r0, #6
    abe4:	f360 0303 	bfi	r3, r0, #0, #4
    abe8:	f8c2 30f8 	str.w	r3, [r2, #248]	; 0xf8
    abec:	f8d2 30f8 	ldr.w	r3, [r2, #248]	; 0xf8
    abf0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    abf4:	f8c2 30f8 	str.w	r3, [r2, #248]	; 0xf8
    abf8:	684b      	ldr	r3, [r1, #4]
    abfa:	f013 0318 	ands.w	r3, r3, #24
    abfe:	d1fb      	bne.n	abf8 <SystemInit+0x238>
    SET_CLOCK_SOURCE(TC6_GCLK_ID, 6);
    ac00:	f8d1 011c 	ldr.w	r0, [r1, #284]	; 0x11c
    ac04:	4a11      	ldr	r2, [pc, #68]	; (ac4c <SystemInit+0x28c>)
    ac06:	f363 1086 	bfi	r0, r3, #6, #1
    ac0a:	f8c1 011c 	str.w	r0, [r1, #284]	; 0x11c
    ac0e:	f8d2 311c 	ldr.w	r3, [r2, #284]	; 0x11c
    ac12:	065b      	lsls	r3, r3, #25
    ac14:	d4fb      	bmi.n	ac0e <SystemInit+0x24e>
    ac16:	f8d2 311c 	ldr.w	r3, [r2, #284]	; 0x11c
    ac1a:	490c      	ldr	r1, [pc, #48]	; (ac4c <SystemInit+0x28c>)
    ac1c:	2006      	movs	r0, #6
    ac1e:	f360 0303 	bfi	r3, r0, #0, #4
    ac22:	f8c2 311c 	str.w	r3, [r2, #284]	; 0x11c
    ac26:	f8d2 311c 	ldr.w	r3, [r2, #284]	; 0x11c
    ac2a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    ac2e:	f8c2 311c 	str.w	r3, [r2, #284]	; 0x11c
    ac32:	684b      	ldr	r3, [r1, #4]
    ac34:	f013 0f18 	tst.w	r3, #24
    ac38:	d1fb      	bne.n	ac32 <SystemInit+0x272>
    
    // NOTE: TC7 and TC6 share same clock source
    // SET_CLOCK_SOURCE(TC7_GCLK_ID, 6);

    // ZL: Is this still needed?
    while (GCLK->SYNCBUSY.reg) {
    ac3a:	4a04      	ldr	r2, [pc, #16]	; (ac4c <SystemInit+0x28c>)
    ac3c:	6853      	ldr	r3, [r2, #4]
    ac3e:	2b00      	cmp	r3, #0
    ac40:	d1fc      	bne.n	ac3c <SystemInit+0x27c>
        continue;
    }
    return;
}
    ac42:	bcf0      	pop	{r4, r5, r6, r7}
    ac44:	4770      	bx	lr
    ac46:	bf00      	nop
    ac48:	40001000 	.word	0x40001000
    ac4c:	40001c00 	.word	0x40001c00
    ac50:	00190301 	.word	0x00190301
    ac54:	40000800 	.word	0x40000800
    ac58:	00020107 	.word	0x00020107
    ac5c:	00320b01 	.word	0x00320b01
    ac60:	41006000 	.word	0x41006000
    ac64:	e000ed00 	.word	0xe000ed00
    ac68:	003a0108 	.word	0x003a0108
    ac6c:	000c0108 	.word	0x000c0108

0000ac70 <GClkFreqUpdate>:
 * Update GClk frequency
 *
 * @brief  Updates the divisor on the specified GClk to
 *         generate the requested frequency
 */
void GClkFreqUpdate(uint8_t gclkIndex, uint32_t freqReq) {
    ac70:	b470      	push	{r4, r5, r6}
    // This adjustment is only supported for GClks that use XOSC1 as the src
    if (GCLK->GENCTRL[gclkIndex].bit.SRC != GCLK_GENCTRL_SRC_XOSC1_Val) {
    ac72:	4a0e      	ldr	r2, [pc, #56]	; (acac <GClkFreqUpdate+0x3c>)
    ac74:	f100 0408 	add.w	r4, r0, #8
    ac78:	f852 3024 	ldr.w	r3, [r2, r4, lsl #2]
    ac7c:	f003 030f 	and.w	r3, r3, #15
    ac80:	2b01      	cmp	r3, #1
    ac82:	d001      	beq.n	ac88 <GClkFreqUpdate+0x18>
    // Configure the clock divisor for the requested frequency
    GCLK->GENCTRL[gclkIndex].bit.DIV = __CLEARCORE_OSC_HZ / freqReq;
    while (GCLK->SYNCBUSY.vec.GENCTRL & (1 << gclkIndex)) {
        continue;
    }
}
    ac84:	bc70      	pop	{r4, r5, r6}
    ac86:	4770      	bx	lr
    GCLK->GENCTRL[gclkIndex].bit.DIV = __CLEARCORE_OSC_HZ / freqReq;
    ac88:	f852 6024 	ldr.w	r6, [r2, r4, lsl #2]
    ac8c:	4d08      	ldr	r5, [pc, #32]	; (acb0 <GClkFreqUpdate+0x40>)
    ac8e:	fbb5 f1f1 	udiv	r1, r5, r1
    ac92:	b289      	uxth	r1, r1
    ac94:	f361 461f 	bfi	r6, r1, #16, #16
    ac98:	f842 6024 	str.w	r6, [r2, r4, lsl #2]
    ac9c:	4083      	lsls	r3, r0
    while (GCLK->SYNCBUSY.vec.GENCTRL & (1 << gclkIndex)) {
    ac9e:	6851      	ldr	r1, [r2, #4]
    aca0:	f3c1 018b 	ubfx	r1, r1, #2, #12
    aca4:	4219      	tst	r1, r3
    aca6:	d1fa      	bne.n	ac9e <GClkFreqUpdate+0x2e>
}
    aca8:	bc70      	pop	{r4, r5, r6}
    acaa:	4770      	bx	lr
    acac:	40001c00 	.word	0x40001c00
    acb0:	017d7840 	.word	0x017d7840

0000acb4 <_ZN9ClearCore12EncoderInputC1Ev>:
}

/*
    Construct and wire in our IO pins
*/
EncoderInput::EncoderInput()
    acb4:	b538      	push	{r3, r4, r5, lr}
      m_processIndex(false),
      m_hwIndex(0),
      m_indexPosn(0),
      m_indexDetected(false),
      m_indexInverted(false),
      m_stepsLast(0) {
    acb6:	4911      	ldr	r1, [pc, #68]	; (acfc <_ZN9ClearCore12EncoderInputC1Ev+0x48>)
    acb8:	4b11      	ldr	r3, [pc, #68]	; (ad00 <_ZN9ClearCore12EncoderInputC1Ev+0x4c>)
    acba:	4a12      	ldr	r2, [pc, #72]	; (ad04 <_ZN9ClearCore12EncoderInputC1Ev+0x50>)
    acbc:	6001      	str	r1, [r0, #0]
    acbe:	2500      	movs	r5, #0
EncoderInput::EncoderInput()
    acc0:	4604      	mov	r4, r0
      m_stepsLast(0) {
    acc2:	6042      	str	r2, [r0, #4]
    acc4:	6083      	str	r3, [r0, #8]
    acc6:	60c5      	str	r5, [r0, #12]
    acc8:	6105      	str	r5, [r0, #16]
    acca:	6145      	str	r5, [r0, #20]
    accc:	8305      	strh	r5, [r0, #24]
    acce:	4629      	mov	r1, r5
    acd0:	22c8      	movs	r2, #200	; 0xc8
    acd2:	301c      	adds	r0, #28
    acd4:	f01d f8c2 	bl	27e5c <memset>
    acd8:	f884 50e4 	strb.w	r5, [r4, #228]	; 0xe4
    acdc:	f884 50e5 	strb.w	r5, [r4, #229]	; 0xe5
    ace0:	f884 50e6 	strb.w	r5, [r4, #230]	; 0xe6
    ace4:	f8a4 50e8 	strh.w	r5, [r4, #232]	; 0xe8
    ace8:	f8c4 50ec 	str.w	r5, [r4, #236]	; 0xec
    acec:	f884 50f0 	strb.w	r5, [r4, #240]	; 0xf0
    acf0:	f884 50f1 	strb.w	r5, [r4, #241]	; 0xf1
    acf4:	f8a4 50f2 	strh.w	r5, [r4, #242]	; 0xf2
}
    acf8:	4620      	mov	r0, r4
    acfa:	bd38      	pop	{r3, r4, r5, pc}
    acfc:	0002d158 	.word	0x0002d158
    ad00:	0002d178 	.word	0x0002d178
    ad04:	0002d168 	.word	0x0002d168

0000ad08 <_ZN9ClearCore12EncoderInput10InitializeEv>:


void EncoderInput::Initialize() {
    ad08:	b430      	push	{r4, r5}

    // Set up PDEC

    // Set the clock source for PDEC to GCLK0 (120 MHz) and enable
    // the peripheral channel
    SET_CLOCK_SOURCE(PDEC_GCLK_ID, 0);
    ad0a:	4a12      	ldr	r2, [pc, #72]	; (ad54 <_ZN9ClearCore12EncoderInput10InitializeEv+0x4c>)
    ad0c:	f8d2 30fc 	ldr.w	r3, [r2, #252]	; 0xfc
    ad10:	f36f 1386 	bfc	r3, #6, #1
    ad14:	f8c2 30fc 	str.w	r3, [r2, #252]	; 0xfc
    ad18:	f8d2 30fc 	ldr.w	r3, [r2, #252]	; 0xfc
    ad1c:	f3c3 1380 	ubfx	r3, r3, #6, #1
    ad20:	2b00      	cmp	r3, #0
    ad22:	d1f9      	bne.n	ad18 <_ZN9ClearCore12EncoderInput10InitializeEv+0x10>
    ad24:	f8d2 00fc 	ldr.w	r0, [r2, #252]	; 0xfc

    // Enables the peripheral clock to PDEC
    CLOCK_ENABLE(APBCMASK, PDEC_);
    ad28:	490b      	ldr	r1, [pc, #44]	; (ad58 <_ZN9ClearCore12EncoderInput10InitializeEv+0x50>)

    PDEC->CTRLA.reg = PDEC_CTRLA_MODE_QDEC | PDEC_CTRLA_CONF_X4 |
    ad2a:	4c0c      	ldr	r4, [pc, #48]	; (ad5c <_ZN9ClearCore12EncoderInput10InitializeEv+0x54>)
    ad2c:	4d0c      	ldr	r5, [pc, #48]	; (ad60 <_ZN9ClearCore12EncoderInput10InitializeEv+0x58>)
    SET_CLOCK_SOURCE(PDEC_GCLK_ID, 0);
    ad2e:	f363 0003 	bfi	r0, r3, #0, #4
    ad32:	f8c2 00fc 	str.w	r0, [r2, #252]	; 0xfc
    ad36:	f8d2 30fc 	ldr.w	r3, [r2, #252]	; 0xfc
    ad3a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    ad3e:	f8c2 30fc 	str.w	r3, [r2, #252]	; 0xfc
    ad42:	6853      	ldr	r3, [r2, #4]
    CLOCK_ENABLE(APBCMASK, PDEC_);
    ad44:	69cb      	ldr	r3, [r1, #28]
    ad46:	f043 0380 	orr.w	r3, r3, #128	; 0x80
    ad4a:	61cb      	str	r3, [r1, #28]
    PDEC->CTRLA.reg = PDEC_CTRLA_MODE_QDEC | PDEC_CTRLA_CONF_X4 |
    ad4c:	6025      	str	r5, [r4, #0]
                      PDEC_CTRLA_PINEN0 | PDEC_CTRLA_PINEN1 |
                      PDEC_CTRLA_ANGULAR_Msk;

}
    ad4e:	bc30      	pop	{r4, r5}
    ad50:	4770      	bx	lr
    ad52:	bf00      	nop
    ad54:	40001c00 	.word	0x40001c00
    ad58:	40000800 	.word	0x40000800
    ad5c:	42001c00 	.word	0x42001c00
    ad60:	07030000 	.word	0x07030000

0000ad64 <_ZN9ClearCore12EncoderInput6UpdateEv>:

void EncoderInput::Update() {
    ad64:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    //If the encoder is disabled, just return
    if (!m_enabled) {
    ad66:	f890 30e5 	ldrb.w	r3, [r0, #229]	; 0xe5
    ad6a:	2b00      	cmp	r3, #0
    ad6c:	d038      	beq.n	ade0 <_ZN9ClearCore12EncoderInput6UpdateEv+0x7c>
        return;
    }
    // Refresh the COUNT reading
    PDEC->CTRLBSET.reg = PDEC_CTRLBSET_CMD_READSYNC;
    ad6e:	4a29      	ldr	r2, [pc, #164]	; (ae14 <_ZN9ClearCore12EncoderInput6UpdateEv+0xb0>)
    ad70:	2360      	movs	r3, #96	; 0x60
    ad72:	7153      	strb	r3, [r2, #5]
    SYNCBUSY_WAIT(PDEC, PDEC_SYNCBUSY_COUNT);
    ad74:	6913      	ldr	r3, [r2, #16]
    ad76:	f013 0340 	ands.w	r3, r3, #64	; 0x40
    ad7a:	d1fb      	bne.n	ad74 <_ZN9ClearCore12EncoderInput6UpdateEv+0x10>
    int16_t currentHwPosn = PDEC->COUNT.reg;
    ad7c:	69d5      	ldr	r5, [r2, #28]
    m_stepsLast = currentHwPosn - m_hwPosn;
    ad7e:	8b02      	ldrh	r2, [r0, #24]
    
    m_indexDetected = m_processIndex;
    ad80:	f890 10e6 	ldrb.w	r1, [r0, #230]	; 0xe6
    ad84:	f880 10f0 	strb.w	r1, [r0, #240]	; 0xf0
    m_stepsLast = currentHwPosn - m_hwPosn;
    ad88:	1aaa      	subs	r2, r5, r2
    ad8a:	b212      	sxth	r2, r2
    ad8c:	4604      	mov	r4, r0
    ad8e:	f8a0 20f2 	strh.w	r2, [r0, #242]	; 0xf2
    int16_t currentHwPosn = PDEC->COUNT.reg;
    ad92:	b22d      	sxth	r5, r5
    if (m_processIndex) {
    ad94:	bb29      	cbnz	r1, ade2 <_ZN9ClearCore12EncoderInput6UpdateEv+0x7e>
        m_indexPosn = atomic_load_n(&m_curPosn) + m_hwIndex - m_hwPosn;
        m_processIndex = false;
        // Re-enable the index capture interrupt
        InputMgr.InterruptEnable(m_indexInfo->extInt, true, false);
    }
    m_hwPosn = currentHwPosn;
    ad96:	8325      	strh	r5, [r4, #24]
        m_indexPosn = atomic_load_n(&m_curPosn) + m_hwIndex - m_hwPosn;
    ad98:	f104 030c 	add.w	r3, r4, #12
    // Adjust the measured position
    int32_t posnNow = atomic_add_fetch(&m_curPosn, (int32_t)m_stepsLast);
    ad9c:	f3bf 8f5b 	dmb	ish
    ada0:	e853 6f00 	ldrex	r6, [r3]
    ada4:	4416      	add	r6, r2
    ada6:	e843 6100 	strex	r1, r6, [r3]
    adaa:	2900      	cmp	r1, #0
    adac:	d1f8      	bne.n	ada0 <_ZN9ClearCore12EncoderInput6UpdateEv+0x3c>
    adae:	f3bf 8f5b 	dmb	ish
    // Calculate the velocity based on the position change in the 
    // last VEL_EST_SAMPLES sample times and convert to cnts/sec
    int32_t posnDelta = posnNow - m_posnHistory[m_posnHistoryIndex];
    adb2:	f894 30e4 	ldrb.w	r3, [r4, #228]	; 0xe4
    m_velocity = posnDelta * (_CLEARCORE_SAMPLE_RATE_HZ / VEL_EST_SAMPLES);
    m_posnHistory[m_posnHistoryIndex] = posnNow;
    m_posnHistoryIndex = (m_posnHistoryIndex + 1) % VEL_EST_SAMPLES;
    adb6:	4d18      	ldr	r5, [pc, #96]	; (ae18 <_ZN9ClearCore12EncoderInput6UpdateEv+0xb4>)
    adb8:	eb04 0783 	add.w	r7, r4, r3, lsl #2
    adbc:	3301      	adds	r3, #1
    int32_t posnDelta = posnNow - m_posnHistory[m_posnHistoryIndex];
    adbe:	69f9      	ldr	r1, [r7, #28]
    m_posnHistoryIndex = (m_posnHistoryIndex + 1) % VEL_EST_SAMPLES;
    adc0:	fb85 2503 	smull	r2, r5, r5, r3
    adc4:	17da      	asrs	r2, r3, #31
    int32_t posnDelta = posnNow - m_posnHistory[m_posnHistoryIndex];
    adc6:	1a70      	subs	r0, r6, r1
    m_posnHistoryIndex = (m_posnHistoryIndex + 1) % VEL_EST_SAMPLES;
    adc8:	ebc2 1225 	rsb	r2, r2, r5, asr #4
    m_velocity = posnDelta * (_CLEARCORE_SAMPLE_RATE_HZ / VEL_EST_SAMPLES);
    adcc:	2164      	movs	r1, #100	; 0x64
    m_posnHistoryIndex = (m_posnHistoryIndex + 1) % VEL_EST_SAMPLES;
    adce:	2532      	movs	r5, #50	; 0x32
    m_velocity = posnDelta * (_CLEARCORE_SAMPLE_RATE_HZ / VEL_EST_SAMPLES);
    add0:	fb01 f100 	mul.w	r1, r1, r0
    m_posnHistoryIndex = (m_posnHistoryIndex + 1) % VEL_EST_SAMPLES;
    add4:	fb05 3312 	mls	r3, r5, r2, r3
    m_velocity = posnDelta * (_CLEARCORE_SAMPLE_RATE_HZ / VEL_EST_SAMPLES);
    add8:	6161      	str	r1, [r4, #20]
    m_posnHistory[m_posnHistoryIndex] = posnNow;
    adda:	61fe      	str	r6, [r7, #28]
    m_posnHistoryIndex = (m_posnHistoryIndex + 1) % VEL_EST_SAMPLES;
    addc:	f884 30e4 	strb.w	r3, [r4, #228]	; 0xe4
    ade0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        m_indexPosn = atomic_load_n(&m_curPosn) + m_hwIndex - m_hwPosn;
    ade2:	68c6      	ldr	r6, [r0, #12]
    ade4:	f3bf 8f5b 	dmb	ish
    ade8:	f9b0 20e8 	ldrsh.w	r2, [r0, #232]	; 0xe8
    adec:	f9b0 0018 	ldrsh.w	r0, [r0, #24]
        InputMgr.InterruptEnable(m_indexInfo->extInt, true, false);
    adf0:	68a1      	ldr	r1, [r4, #8]
        m_processIndex = false;
    adf2:	f884 30e6 	strb.w	r3, [r4, #230]	; 0xe6
        m_indexPosn = atomic_load_n(&m_curPosn) + m_hwIndex - m_hwPosn;
    adf6:	4432      	add	r2, r6
    adf8:	1a12      	subs	r2, r2, r0
        InputMgr.InterruptEnable(m_indexInfo->extInt, true, false);
    adfa:	4808      	ldr	r0, [pc, #32]	; (ae1c <_ZN9ClearCore12EncoderInput6UpdateEv+0xb8>)
        m_indexPosn = atomic_load_n(&m_curPosn) + m_hwIndex - m_hwPosn;
    adfc:	f8c4 20ec 	str.w	r2, [r4, #236]	; 0xec
        InputMgr.InterruptEnable(m_indexInfo->extInt, true, false);
    ae00:	f991 1003 	ldrsb.w	r1, [r1, #3]
    ae04:	6800      	ldr	r0, [r0, #0]
    ae06:	2201      	movs	r2, #1
    ae08:	f003 fff4 	bl	edf4 <_ZN9ClearCore12InputManager15InterruptEnableEabb>
    ae0c:	f9b4 20f2 	ldrsh.w	r2, [r4, #242]	; 0xf2
    ae10:	e7c1      	b.n	ad96 <_ZN9ClearCore12EncoderInput6UpdateEv+0x32>
    ae12:	bf00      	nop
    ae14:	42001c00 	.word	0x42001c00
    ae18:	51eb851f 	.word	0x51eb851f
    ae1c:	20001fb8 	.word	0x20001fb8

0000ae20 <cdcdf_acm_req>:
 * \param[in] ep Endpoint address.
 * \param[in] req Pointer to the request.
 * \return Operation status.
 */
static int32_t cdcdf_acm_req(uint8_t ep, struct usb_req *req, enum usb_ctrl_stage stage)
{
    ae20:	b5f0      	push	{r4, r5, r6, r7, lr}
	if (0x01 != ((req->bmRequestType >> 5) & 0x03)) { // class request
    ae22:	780d      	ldrb	r5, [r1, #0]
    ae24:	f3c5 1441 	ubfx	r4, r5, #5, #2
    ae28:	2c01      	cmp	r4, #1
{
    ae2a:	b083      	sub	sp, #12
	if (0x01 != ((req->bmRequestType >> 5) & 0x03)) { // class request
    ae2c:	d152      	bne.n	aed4 <cdcdf_acm_req+0xb4>
		return ERR_NOT_FOUND;
	}
	if ((req->wIndex == _cdcdf_acm_funcd.func_iface[0]) || (req->wIndex == _cdcdf_acm_funcd.func_iface[1])) {
    ae2e:	4e30      	ldr	r6, [pc, #192]	; (aef0 <cdcdf_acm_req+0xd0>)
    ae30:	888c      	ldrh	r4, [r1, #4]
    ae32:	7833      	ldrb	r3, [r6, #0]
    ae34:	42a3      	cmp	r3, r4
    ae36:	d002      	beq.n	ae3e <cdcdf_acm_req+0x1e>
    ae38:	7873      	ldrb	r3, [r6, #1]
    ae3a:	42a3      	cmp	r3, r4
    ae3c:	d14a      	bne.n	aed4 <cdcdf_acm_req+0xb4>
		if (req->bmRequestType & USB_EP_DIR_IN) {
    ae3e:	062b      	lsls	r3, r5, #24
    ae40:	4617      	mov	r7, r2
    ae42:	4606      	mov	r6, r0
    ae44:	460c      	mov	r4, r1
    ae46:	d438      	bmi.n	aeba <cdcdf_acm_req+0x9a>
	uint16_t                   len      = req->wLength;
    ae48:	88cd      	ldrh	r5, [r1, #6]
	uint8_t *                  ctrl_buf = usbdc_get_ctrl_buffer();
    ae4a:	f000 fc7f 	bl	b74c <usbdc_get_ctrl_buffer>
	switch (req->bRequest) {
    ae4e:	7863      	ldrb	r3, [r4, #1]
    ae50:	2b20      	cmp	r3, #32
	uint8_t *                  ctrl_buf = usbdc_get_ctrl_buffer();
    ae52:	4601      	mov	r1, r0
	switch (req->bRequest) {
    ae54:	d00f      	beq.n	ae76 <cdcdf_acm_req+0x56>
    ae56:	2b22      	cmp	r3, #34	; 0x22
    ae58:	d128      	bne.n	aeac <cdcdf_acm_req+0x8c>
		usbdc_xfer(0, NULL, 0, 0);
    ae5a:	2300      	movs	r3, #0
    ae5c:	461a      	mov	r2, r3
    ae5e:	4619      	mov	r1, r3
    ae60:	4618      	mov	r0, r3
    ae62:	f000 fc07 	bl	b674 <usbdc_xfer>
		if (NULL != cdcdf_acm_notify_state) {
    ae66:	4b23      	ldr	r3, [pc, #140]	; (aef4 <cdcdf_acm_req+0xd4>)
    ae68:	681b      	ldr	r3, [r3, #0]
    ae6a:	b31b      	cbz	r3, aeb4 <cdcdf_acm_req+0x94>
			cdcdf_acm_notify_state(req->wValue);
    ae6c:	8860      	ldrh	r0, [r4, #2]
    ae6e:	4798      	blx	r3
		return ERR_NONE;
    ae70:	2000      	movs	r0, #0
			return cdcdf_acm_set_req(ep, req, stage);
		}
	} else {
		return ERR_NOT_FOUND;
	}
}
    ae72:	b003      	add	sp, #12
    ae74:	bdf0      	pop	{r4, r5, r6, r7, pc}
		if (sizeof(struct usb_cdc_line_coding) != len) {
    ae76:	2d07      	cmp	r5, #7
    ae78:	d136      	bne.n	aee8 <cdcdf_acm_req+0xc8>
		if (USB_SETUP_STAGE == stage) {
    ae7a:	b37f      	cbz	r7, aedc <cdcdf_acm_req+0xbc>
			if ((NULL == cdcdf_acm_set_line_coding) || (true == cdcdf_acm_set_line_coding(&line_coding_tmp))) {
    ae7c:	4b1e      	ldr	r3, [pc, #120]	; (aef8 <cdcdf_acm_req+0xd8>)
			memcpy(&line_coding_tmp, ctrl_buf, sizeof(struct usb_cdc_line_coding));
    ae7e:	6800      	ldr	r0, [r0, #0]
    ae80:	9000      	str	r0, [sp, #0]
			if ((NULL == cdcdf_acm_set_line_coding) || (true == cdcdf_acm_set_line_coding(&line_coding_tmp))) {
    ae82:	681b      	ldr	r3, [r3, #0]
			memcpy(&line_coding_tmp, ctrl_buf, sizeof(struct usb_cdc_line_coding));
    ae84:	888a      	ldrh	r2, [r1, #4]
    ae86:	7989      	ldrb	r1, [r1, #6]
    ae88:	f88d 1006 	strb.w	r1, [sp, #6]
    ae8c:	466c      	mov	r4, sp
    ae8e:	f8ad 2004 	strh.w	r2, [sp, #4]
			if ((NULL == cdcdf_acm_set_line_coding) || (true == cdcdf_acm_set_line_coding(&line_coding_tmp))) {
    ae92:	b113      	cbz	r3, ae9a <cdcdf_acm_req+0x7a>
    ae94:	4668      	mov	r0, sp
    ae96:	4798      	blx	r3
    ae98:	b160      	cbz	r0, aeb4 <cdcdf_acm_req+0x94>
				usbd_cdc_line_coding = line_coding_tmp;
    ae9a:	e894 0003 	ldmia.w	r4, {r0, r1}
    ae9e:	4b17      	ldr	r3, [pc, #92]	; (aefc <cdcdf_acm_req+0xdc>)
    aea0:	0c0a      	lsrs	r2, r1, #16
    aea2:	6018      	str	r0, [r3, #0]
    aea4:	8099      	strh	r1, [r3, #4]
    aea6:	719a      	strb	r2, [r3, #6]
			return ERR_NONE;
    aea8:	2000      	movs	r0, #0
    aeaa:	e001      	b.n	aeb0 <cdcdf_acm_req+0x90>
		return ERR_INVALID_ARG;
    aeac:	f06f 000c 	mvn.w	r0, #12
}
    aeb0:	b003      	add	sp, #12
    aeb2:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return ERR_NONE;
    aeb4:	2000      	movs	r0, #0
}
    aeb6:	b003      	add	sp, #12
    aeb8:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (USB_DATA_STAGE == stage) {
    aeba:	2a01      	cmp	r2, #1
    aebc:	d0fa      	beq.n	aeb4 <cdcdf_acm_req+0x94>
	switch (req->bRequest) {
    aebe:	784b      	ldrb	r3, [r1, #1]
    aec0:	2b21      	cmp	r3, #33	; 0x21
    aec2:	d1f3      	bne.n	aeac <cdcdf_acm_req+0x8c>
		if (sizeof(struct usb_cdc_line_coding) != len) {
    aec4:	88ca      	ldrh	r2, [r1, #6]
    aec6:	2a07      	cmp	r2, #7
    aec8:	d10e      	bne.n	aee8 <cdcdf_acm_req+0xc8>
		return usbdc_xfer(ep, (uint8_t *)&usbd_cdc_line_coding, len, false);
    aeca:	2300      	movs	r3, #0
    aecc:	490b      	ldr	r1, [pc, #44]	; (aefc <cdcdf_acm_req+0xdc>)
    aece:	f000 fbd1 	bl	b674 <usbdc_xfer>
    aed2:	e7ed      	b.n	aeb0 <cdcdf_acm_req+0x90>
		return ERR_NOT_FOUND;
    aed4:	f06f 0009 	mvn.w	r0, #9
}
    aed8:	b003      	add	sp, #12
    aeda:	bdf0      	pop	{r4, r5, r6, r7, pc}
			return usbdc_xfer(ep, ctrl_buf, len, false);
    aedc:	463b      	mov	r3, r7
    aede:	462a      	mov	r2, r5
    aee0:	4630      	mov	r0, r6
    aee2:	f000 fbc7 	bl	b674 <usbdc_xfer>
    aee6:	e7e3      	b.n	aeb0 <cdcdf_acm_req+0x90>
			return ERR_INVALID_DATA;
    aee8:	f04f 30ff 	mov.w	r0, #4294967295
    aeec:	e7e0      	b.n	aeb0 <cdcdf_acm_req+0x90>
    aeee:	bf00      	nop
    aef0:	20001cc0 	.word	0x20001cc0
    aef4:	20001cc8 	.word	0x20001cc8
    aef8:	20001ccc 	.word	0x20001ccc
    aefc:	20001cd0 	.word	0x20001cd0

0000af00 <cdcdf_acm_ctrl>:
	switch (ctrl) {
    af00:	2901      	cmp	r1, #1
{
    af02:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    af06:	4616      	mov	r6, r2
	switch (ctrl) {
    af08:	d008      	beq.n	af1c <cdcdf_acm_ctrl+0x1c>
    af0a:	d314      	bcc.n	af36 <cdcdf_acm_ctrl+0x36>
		return ERR_INVALID_ARG;
    af0c:	2902      	cmp	r1, #2
    af0e:	bf0c      	ite	eq
    af10:	f06f 001a 	mvneq.w	r0, #26
    af14:	f06f 000c 	mvnne.w	r0, #12
    af18:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    af1c:	6884      	ldr	r4, [r0, #8]
	if (desc) {
    af1e:	2a00      	cmp	r2, #0
    af20:	d047      	beq.n	afb2 <cdcdf_acm_ctrl+0xb2>
		ifc_desc.bInterfaceClass = desc->sod[5];
    af22:	6813      	ldr	r3, [r2, #0]
		if ((ifc_desc.bInterfaceClass != CDC_CLASS_COMM) && (ifc_desc.bInterfaceClass != CDC_CLASS_DATA)) {
    af24:	795b      	ldrb	r3, [r3, #5]
    af26:	f003 03f7 	and.w	r3, r3, #247	; 0xf7
    af2a:	2b02      	cmp	r3, #2
    af2c:	d041      	beq.n	afb2 <cdcdf_acm_ctrl+0xb2>
			return ERR_NOT_FOUND;
    af2e:	f06f 0009 	mvn.w	r0, #9
    af32:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	ifc = desc->sod;
    af36:	6813      	ldr	r3, [r2, #0]
    af38:	6887      	ldr	r7, [r0, #8]
		if (NULL == ifc) {
    af3a:	2b00      	cmp	r3, #0
    af3c:	d0f7      	beq.n	af2e <cdcdf_acm_ctrl+0x2e>
    af3e:	f107 38ff 	add.w	r8, r7, #4294967295
    af42:	f107 0901 	add.w	r9, r7, #1
		if ((CDC_CLASS_COMM == ifc_desc.bInterfaceClass) || (CDC_CLASS_DATA == ifc_desc.bInterfaceClass)) {
    af46:	795a      	ldrb	r2, [r3, #5]
		ifc_desc.bInterfaceNumber = ifc[2];
    af48:	7899      	ldrb	r1, [r3, #2]
		if ((CDC_CLASS_COMM == ifc_desc.bInterfaceClass) || (CDC_CLASS_DATA == ifc_desc.bInterfaceClass)) {
    af4a:	f002 02f7 	and.w	r2, r2, #247	; 0xf7
    af4e:	2a02      	cmp	r2, #2
    af50:	d1ed      	bne.n	af2e <cdcdf_acm_ctrl+0x2e>
			if (func_data->func_iface[i] == ifc_desc.bInterfaceNumber) { // Initialized
    af52:	f818 2f01 	ldrb.w	r2, [r8, #1]!
    af56:	4291      	cmp	r1, r2
    af58:	d061      	beq.n	b01e <cdcdf_acm_ctrl+0x11e>
			} else if (func_data->func_iface[i] != 0xFF) { // Occupied
    af5a:	2aff      	cmp	r2, #255	; 0xff
    af5c:	d15b      	bne.n	b016 <cdcdf_acm_ctrl+0x116>
				func_data->func_iface[i] = ifc_desc.bInterfaceNumber;
    af5e:	f888 1000 	strb.w	r1, [r8]
		ep = usb_find_desc(ifc, desc->eod, USB_DT_ENDPOINT);
    af62:	4618      	mov	r0, r3
    af64:	6871      	ldr	r1, [r6, #4]
    af66:	2205      	movs	r2, #5
    af68:	f000 fc00 	bl	b76c <usb_find_desc>
		while (NULL != ep) {
    af6c:	4604      	mov	r4, r0
    af6e:	b980      	cbnz	r0, af92 <cdcdf_acm_ctrl+0x92>
    af70:	e041      	b.n	aff6 <cdcdf_acm_ctrl+0xf6>
			if (ep_desc.bEndpointAddress & USB_EP_DIR_IN) {
    af72:	062b      	lsls	r3, r5, #24
				func_data->func_ep_in[i] = ep_desc.bEndpointAddress;
    af74:	bf4c      	ite	mi
    af76:	f888 5002 	strbmi.w	r5, [r8, #2]
				func_data->func_ep_out = ep_desc.bEndpointAddress;
    af7a:	713d      	strbpl	r5, [r7, #4]
				usb_d_ep_enable(func_data->func_ep_out);
    af7c:	4628      	mov	r0, r5
    af7e:	f000 feaf 	bl	bce0 <usb_d_ep_enable>
			desc->sod = ep;
    af82:	6034      	str	r4, [r6, #0]
 *  \param[in] desc Byte pointer to the descriptor start address
 *  \return Byte pointer to the next descriptor
 */
static inline uint8_t *usb_desc_next(uint8_t *desc)
{
	return (desc + usb_desc_len(desc));
    af84:	7820      	ldrb	r0, [r4, #0]
			ep        = usb_find_ep_desc(usb_desc_next(desc->sod), desc->eod);
    af86:	6871      	ldr	r1, [r6, #4]
    af88:	4420      	add	r0, r4
    af8a:	f000 fc09 	bl	b7a0 <usb_find_ep_desc>
		while (NULL != ep) {
    af8e:	4604      	mov	r4, r0
    af90:	b388      	cbz	r0, aff6 <cdcdf_acm_ctrl+0xf6>
	return (ptr[0] + (ptr[1] << 8));
    af92:	7963      	ldrb	r3, [r4, #5]
    af94:	7922      	ldrb	r2, [r4, #4]
			ep_desc.bEndpointAddress = ep[2];
    af96:	78a5      	ldrb	r5, [r4, #2]
			if (usb_d_ep_init(ep_desc.bEndpointAddress, ep_desc.bmAttributes, ep_desc.wMaxPacketSize)) {
    af98:	78e1      	ldrb	r1, [r4, #3]
    af9a:	eb02 2203 	add.w	r2, r2, r3, lsl #8
    af9e:	b292      	uxth	r2, r2
    afa0:	4628      	mov	r0, r5
    afa2:	f000 fe4b 	bl	bc3c <usb_d_ep_init>
    afa6:	2800      	cmp	r0, #0
    afa8:	d0e3      	beq.n	af72 <cdcdf_acm_ctrl+0x72>
				return ERR_NOT_INITIALIZED;
    afaa:	f06f 0013 	mvn.w	r0, #19
}
    afae:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		if (func_data->func_iface[i] == 0xFF) {
    afb2:	7823      	ldrb	r3, [r4, #0]
    afb4:	2bff      	cmp	r3, #255	; 0xff
    afb6:	d007      	beq.n	afc8 <cdcdf_acm_ctrl+0xc8>
			if (func_data->func_ep_in[i] != 0xFF) {
    afb8:	78a0      	ldrb	r0, [r4, #2]
			func_data->func_iface[i] = 0xFF;
    afba:	25ff      	movs	r5, #255	; 0xff
			if (func_data->func_ep_in[i] != 0xFF) {
    afbc:	42a8      	cmp	r0, r5
			func_data->func_iface[i] = 0xFF;
    afbe:	7025      	strb	r5, [r4, #0]
			if (func_data->func_ep_in[i] != 0xFF) {
    afc0:	d002      	beq.n	afc8 <cdcdf_acm_ctrl+0xc8>
				usb_d_ep_deinit(func_data->func_ep_in[i]);
    afc2:	f000 fe71 	bl	bca8 <usb_d_ep_deinit>
				func_data->func_ep_in[i] = 0xFF;
    afc6:	70a5      	strb	r5, [r4, #2]
		if (func_data->func_iface[i] == 0xFF) {
    afc8:	7863      	ldrb	r3, [r4, #1]
    afca:	2bff      	cmp	r3, #255	; 0xff
    afcc:	d007      	beq.n	afde <cdcdf_acm_ctrl+0xde>
			if (func_data->func_ep_in[i] != 0xFF) {
    afce:	78e0      	ldrb	r0, [r4, #3]
			func_data->func_iface[i] = 0xFF;
    afd0:	25ff      	movs	r5, #255	; 0xff
			if (func_data->func_ep_in[i] != 0xFF) {
    afd2:	42a8      	cmp	r0, r5
			func_data->func_iface[i] = 0xFF;
    afd4:	7065      	strb	r5, [r4, #1]
			if (func_data->func_ep_in[i] != 0xFF) {
    afd6:	d002      	beq.n	afde <cdcdf_acm_ctrl+0xde>
				usb_d_ep_deinit(func_data->func_ep_in[i]);
    afd8:	f000 fe66 	bl	bca8 <usb_d_ep_deinit>
				func_data->func_ep_in[i] = 0xFF;
    afdc:	70e5      	strb	r5, [r4, #3]
	if (func_data->func_ep_out != 0xFF) {
    afde:	7920      	ldrb	r0, [r4, #4]
    afe0:	28ff      	cmp	r0, #255	; 0xff
    afe2:	d003      	beq.n	afec <cdcdf_acm_ctrl+0xec>
		usb_d_ep_deinit(func_data->func_ep_out);
    afe4:	f000 fe60 	bl	bca8 <usb_d_ep_deinit>
		func_data->func_ep_out = 0xFF;
    afe8:	23ff      	movs	r3, #255	; 0xff
    afea:	7123      	strb	r3, [r4, #4]
	_cdcdf_acm_funcd.enabled = false;
    afec:	4b0f      	ldr	r3, [pc, #60]	; (b02c <cdcdf_acm_ctrl+0x12c>)
    afee:	2000      	movs	r0, #0
    aff0:	7158      	strb	r0, [r3, #5]
    aff2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		ifc = usb_find_desc(usb_desc_next(desc->sod), desc->eod, USB_DT_INTERFACE);
    aff6:	6833      	ldr	r3, [r6, #0]
    aff8:	6871      	ldr	r1, [r6, #4]
	return (desc + usb_desc_len(desc));
    affa:	7818      	ldrb	r0, [r3, #0]
    affc:	2204      	movs	r2, #4
    affe:	4418      	add	r0, r3
    b000:	f000 fbb4 	bl	b76c <usb_find_desc>
	for (i = 0; i < 2; i++) {
    b004:	45c1      	cmp	r9, r8
		ifc = usb_find_desc(usb_desc_next(desc->sod), desc->eod, USB_DT_INTERFACE);
    b006:	4603      	mov	r3, r0
	for (i = 0; i < 2; i++) {
    b008:	d10d      	bne.n	b026 <cdcdf_acm_ctrl+0x126>
	_cdcdf_acm_funcd.enabled = true;
    b00a:	4b08      	ldr	r3, [pc, #32]	; (b02c <cdcdf_acm_ctrl+0x12c>)
    b00c:	2201      	movs	r2, #1
    b00e:	715a      	strb	r2, [r3, #5]
	return ERR_NONE;
    b010:	2000      	movs	r0, #0
    b012:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
				return ERR_NO_RESOURCE;
    b016:	f06f 001b 	mvn.w	r0, #27
    b01a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
				return ERR_ALREADY_INITIALIZED;
    b01e:	f06f 0011 	mvn.w	r0, #17
    b022:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		if (NULL == ifc) {
    b026:	2b00      	cmp	r3, #0
    b028:	d18d      	bne.n	af46 <cdcdf_acm_ctrl+0x46>
    b02a:	e780      	b.n	af2e <cdcdf_acm_ctrl+0x2e>
    b02c:	20001cc0 	.word	0x20001cc0

0000b030 <cdcdf_acm_init>:

/**
 * \brief Initialize the USB CDC ACM Function Driver
 */
int32_t cdcdf_acm_init(void)
{
    b030:	b508      	push	{r3, lr}
	if (usbdc_get_state() > USBD_S_POWER) {
    b032:	f000 fb91 	bl	b758 <usbdc_get_state>
    b036:	2801      	cmp	r0, #1
    b038:	d80d      	bhi.n	b056 <cdcdf_acm_init+0x26>
		return ERR_DENIED;
	}

	_cdcdf_acm.ctrl      = cdcdf_acm_ctrl;
    b03a:	4b08      	ldr	r3, [pc, #32]	; (b05c <cdcdf_acm_init+0x2c>)
	_cdcdf_acm.func_data = &_cdcdf_acm_funcd;
    b03c:	4a08      	ldr	r2, [pc, #32]	; (b060 <cdcdf_acm_init+0x30>)
	_cdcdf_acm.ctrl      = cdcdf_acm_ctrl;
    b03e:	4909      	ldr	r1, [pc, #36]	; (b064 <cdcdf_acm_init+0x34>)
    b040:	6059      	str	r1, [r3, #4]

	usbdc_register_function(&_cdcdf_acm);
    b042:	4618      	mov	r0, r3
	_cdcdf_acm.func_data = &_cdcdf_acm_funcd;
    b044:	609a      	str	r2, [r3, #8]
	usbdc_register_function(&_cdcdf_acm);
    b046:	f000 fb61 	bl	b70c <usbdc_register_function>
	usbdc_register_handler(USBDC_HDL_REQ, &cdcdf_acm_req_h);
    b04a:	4907      	ldr	r1, [pc, #28]	; (b068 <cdcdf_acm_init+0x38>)
    b04c:	2001      	movs	r0, #1
    b04e:	f000 fb1f 	bl	b690 <usbdc_register_handler>
	return ERR_NONE;
    b052:	2000      	movs	r0, #0
    b054:	bd08      	pop	{r3, pc}
		return ERR_DENIED;
    b056:	f06f 0010 	mvn.w	r0, #16
}
    b05a:	bd08      	pop	{r3, pc}
    b05c:	20001cb4 	.word	0x20001cb4
    b060:	20001cc0 	.word	0x20001cc0
    b064:	0000af01 	.word	0x0000af01
    b068:	200000e8 	.word	0x200000e8

0000b06c <cdcdf_acm_read>:
/**
 * \brief Check whether CDC ACM Function is enabled
 */
bool cdcdf_acm_is_enabled(void)
{
	return _cdcdf_acm_funcd.enabled;
    b06c:	4b08      	ldr	r3, [pc, #32]	; (b090 <cdcdf_acm_read+0x24>)
{
    b06e:	b410      	push	{r4}
	if (!cdcdf_acm_is_enabled()) {
    b070:	795c      	ldrb	r4, [r3, #5]
    b072:	b13c      	cbz	r4, b084 <cdcdf_acm_read+0x18>
	return usbdc_xfer(_cdcdf_acm_funcd.func_ep_out, buf, size, false);
    b074:	460a      	mov	r2, r1
}
    b076:	f85d 4b04 	ldr.w	r4, [sp], #4
	return usbdc_xfer(_cdcdf_acm_funcd.func_ep_out, buf, size, false);
    b07a:	4601      	mov	r1, r0
    b07c:	7918      	ldrb	r0, [r3, #4]
    b07e:	2300      	movs	r3, #0
    b080:	f000 baf8 	b.w	b674 <usbdc_xfer>
}
    b084:	f06f 0010 	mvn.w	r0, #16
    b088:	f85d 4b04 	ldr.w	r4, [sp], #4
    b08c:	4770      	bx	lr
    b08e:	bf00      	nop
    b090:	20001cc0 	.word	0x20001cc0

0000b094 <cdcdf_acm_write>:
	return _cdcdf_acm_funcd.enabled;
    b094:	4b08      	ldr	r3, [pc, #32]	; (b0b8 <cdcdf_acm_write+0x24>)
{
    b096:	b410      	push	{r4}
	if (!cdcdf_acm_is_enabled()) {
    b098:	795c      	ldrb	r4, [r3, #5]
    b09a:	b13c      	cbz	r4, b0ac <cdcdf_acm_write+0x18>
	return usbdc_xfer(_cdcdf_acm_funcd.func_ep_in[CDCDF_ACM_DATA_EP_INDEX], buf, size, true);
    b09c:	460a      	mov	r2, r1
}
    b09e:	f85d 4b04 	ldr.w	r4, [sp], #4
	return usbdc_xfer(_cdcdf_acm_funcd.func_ep_in[CDCDF_ACM_DATA_EP_INDEX], buf, size, true);
    b0a2:	4601      	mov	r1, r0
    b0a4:	78d8      	ldrb	r0, [r3, #3]
    b0a6:	2301      	movs	r3, #1
    b0a8:	f000 bae4 	b.w	b674 <usbdc_xfer>
}
    b0ac:	f06f 0010 	mvn.w	r0, #16
    b0b0:	f85d 4b04 	ldr.w	r4, [sp], #4
    b0b4:	4770      	bx	lr
    b0b6:	bf00      	nop
    b0b8:	20001cc0 	.word	0x20001cc0

0000b0bc <cdcdf_acm_stop_xfer>:
{
    b0bc:	b510      	push	{r4, lr}
	usb_d_ep_abort(_cdcdf_acm_funcd.func_ep_in[CDCDF_ACM_DATA_EP_INDEX]);
    b0be:	4c04      	ldr	r4, [pc, #16]	; (b0d0 <cdcdf_acm_stop_xfer+0x14>)
    b0c0:	78e0      	ldrb	r0, [r4, #3]
    b0c2:	f000 fecb 	bl	be5c <usb_d_ep_abort>
	usb_d_ep_abort(_cdcdf_acm_funcd.func_ep_out);
    b0c6:	7920      	ldrb	r0, [r4, #4]
}
    b0c8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	usb_d_ep_abort(_cdcdf_acm_funcd.func_ep_out);
    b0cc:	f000 bec6 	b.w	be5c <usb_d_ep_abort>
    b0d0:	20001cc0 	.word	0x20001cc0

0000b0d4 <cdcdf_acm_register_callback>:
{
    b0d4:	b508      	push	{r3, lr}
	switch (cb_type) {
    b0d6:	2803      	cmp	r0, #3
    b0d8:	d81b      	bhi.n	b112 <cdcdf_acm_register_callback+0x3e>
    b0da:	e8df f000 	tbb	[pc, r0]
    b0de:	0a12      	.short	0x0a12
    b0e0:	0206      	.short	0x0206
		cdcdf_acm_notify_state = (cdcdf_acm_notify_state_t)func;
    b0e2:	4b0d      	ldr	r3, [pc, #52]	; (b118 <cdcdf_acm_register_callback+0x44>)
    b0e4:	6019      	str	r1, [r3, #0]
	return ERR_NONE;
    b0e6:	2000      	movs	r0, #0
		break;
    b0e8:	bd08      	pop	{r3, pc}
		cdcdf_acm_set_line_coding = (cdcdf_acm_set_line_coding_t)func;
    b0ea:	4b0c      	ldr	r3, [pc, #48]	; (b11c <cdcdf_acm_register_callback+0x48>)
    b0ec:	6019      	str	r1, [r3, #0]
	return ERR_NONE;
    b0ee:	2000      	movs	r0, #0
		break;
    b0f0:	bd08      	pop	{r3, pc}
		usb_d_ep_register_callback(_cdcdf_acm_funcd.func_ep_in[CDCDF_ACM_DATA_EP_INDEX], USB_D_EP_CB_XFER, func);
    b0f2:	4b0b      	ldr	r3, [pc, #44]	; (b120 <cdcdf_acm_register_callback+0x4c>)
    b0f4:	460a      	mov	r2, r1
    b0f6:	78d8      	ldrb	r0, [r3, #3]
    b0f8:	2102      	movs	r1, #2
    b0fa:	f000 ff05 	bl	bf08 <usb_d_ep_register_callback>
	return ERR_NONE;
    b0fe:	2000      	movs	r0, #0
		break;
    b100:	bd08      	pop	{r3, pc}
		usb_d_ep_register_callback(_cdcdf_acm_funcd.func_ep_out, USB_D_EP_CB_XFER, func);
    b102:	4b07      	ldr	r3, [pc, #28]	; (b120 <cdcdf_acm_register_callback+0x4c>)
    b104:	460a      	mov	r2, r1
    b106:	7918      	ldrb	r0, [r3, #4]
    b108:	2102      	movs	r1, #2
    b10a:	f000 fefd 	bl	bf08 <usb_d_ep_register_callback>
	return ERR_NONE;
    b10e:	2000      	movs	r0, #0
		break;
    b110:	bd08      	pop	{r3, pc}
		return ERR_INVALID_ARG;
    b112:	f06f 000c 	mvn.w	r0, #12
}
    b116:	bd08      	pop	{r3, pc}
    b118:	20001cc8 	.word	0x20001cc8
    b11c:	20001ccc 	.word	0x20001ccc
    b120:	20001cc0 	.word	0x20001cc0

0000b124 <cdcdf_acm_is_enabled>:
	return _cdcdf_acm_funcd.enabled;
    b124:	4b01      	ldr	r3, [pc, #4]	; (b12c <cdcdf_acm_is_enabled+0x8>)
}
    b126:	7958      	ldrb	r0, [r3, #5]
    b128:	4770      	bx	lr
    b12a:	bf00      	nop
    b12c:	20001cc0 	.word	0x20001cc0

0000b130 <cdcdf_acm_get_line_coding>:
 * \brief Return the CDC ACM line coding structure start address
 */
const struct usb_cdc_line_coding *cdcdf_acm_get_line_coding(void)
{
	return (const struct usb_cdc_line_coding *)&usbd_cdc_line_coding;
}
    b130:	4800      	ldr	r0, [pc, #0]	; (b134 <cdcdf_acm_get_line_coding+0x4>)
    b132:	4770      	bx	lr
    b134:	20001cd0 	.word	0x20001cd0

0000b138 <usbd_sof_cb>:
}

/** Invoke all registered SOF callbacks. */
static void usbdc_sof_notify(void)
{
	struct usbdc_sof_handler *sof = (struct usbdc_sof_handler *)usbdc.handlers.sof_list.head;
    b138:	4b05      	ldr	r3, [pc, #20]	; (b150 <usbd_sof_cb+0x18>)

/**
 * \brief Callback invoked on USB device SOF
 */
static void usbd_sof_cb(void)
{
    b13a:	b510      	push	{r4, lr}
	struct usbdc_sof_handler *sof = (struct usbdc_sof_handler *)usbdc.handlers.sof_list.head;
    b13c:	685c      	ldr	r4, [r3, #4]
	while (sof != NULL) {
    b13e:	b12c      	cbz	r4, b14c <usbd_sof_cb+0x14>
		if (NULL != sof->cb) {
    b140:	6863      	ldr	r3, [r4, #4]
    b142:	b103      	cbz	r3, b146 <usbd_sof_cb+0xe>
			sof->cb();
    b144:	4798      	blx	r3
		sof = sof->next;
    b146:	6824      	ldr	r4, [r4, #0]
	while (sof != NULL) {
    b148:	2c00      	cmp	r4, #0
    b14a:	d1f9      	bne.n	b140 <usbd_sof_cb+0x8>
    b14c:	bd10      	pop	{r4, pc}
    b14e:	bf00      	nop
    b150:	20001cd8 	.word	0x20001cd8

0000b154 <usbdc_cb_ctl_done>:
 * \return Data has error or not.
 * \retval true There is data error, protocol error.
 * \retval false There is no data error.
 */
static bool usbdc_cb_ctl_done(const uint8_t ep, const enum usb_xfer_code code, struct usb_req *req)
{
    b154:	b538      	push	{r3, r4, r5, lr}
    b156:	4615      	mov	r5, r2
	(void)ep;

	switch (code) {
    b158:	b189      	cbz	r1, b17e <usbdc_cb_ctl_done+0x2a>
    b15a:	2901      	cmp	r1, #1
    b15c:	d10d      	bne.n	b17a <usbdc_cb_ctl_done+0x26>
	struct usbdc_req_handler *h = (struct usbdc_req_handler *)usbdc.handlers.req_list.head;
    b15e:	4b23      	ldr	r3, [pc, #140]	; (b1ec <usbdc_cb_ctl_done+0x98>)
    b160:	689c      	ldr	r4, [r3, #8]
	while (h != NULL) {
    b162:	b154      	cbz	r4, b17a <usbdc_cb_ctl_done+0x26>
		if (NULL != h->cb) {
    b164:	6863      	ldr	r3, [r4, #4]
			rc = h->cb(ep, req, stage);
    b166:	2201      	movs	r2, #1
    b168:	4629      	mov	r1, r5
    b16a:	2000      	movs	r0, #0
		if (NULL != h->cb) {
    b16c:	b113      	cbz	r3, b174 <usbdc_cb_ctl_done+0x20>
			rc = h->cb(ep, req, stage);
    b16e:	4798      	blx	r3
			} else if (ERR_NOT_FOUND != rc) {
    b170:	300a      	adds	r0, #10
    b172:	d102      	bne.n	b17a <usbdc_cb_ctl_done+0x26>
		h = h->next;
    b174:	6824      	ldr	r4, [r4, #0]
	while (h != NULL) {
    b176:	2c00      	cmp	r4, #0
    b178:	d1f4      	bne.n	b164 <usbdc_cb_ctl_done+0x10>
		return usbdc_ctrl_data_end(req);
	default:
		break;
	}
	return false;
}
    b17a:	2000      	movs	r0, #0
    b17c:	bd38      	pop	{r3, r4, r5, pc}
	if (req->bmRequestType != USB_REQT_TYPE_STANDARD) {
    b17e:	7813      	ldrb	r3, [r2, #0]
    b180:	2b00      	cmp	r3, #0
    b182:	d1fa      	bne.n	b17a <usbdc_cb_ctl_done+0x26>
	switch (req->bRequest) {
    b184:	7853      	ldrb	r3, [r2, #1]
    b186:	2b05      	cmp	r3, #5
    b188:	d014      	beq.n	b1b4 <usbdc_cb_ctl_done+0x60>
    b18a:	2b09      	cmp	r3, #9
    b18c:	d1f5      	bne.n	b17a <usbdc_cb_ctl_done+0x26>
		usbdc.cfg_value = req->wValue;
    b18e:	8852      	ldrh	r2, [r2, #2]
    b190:	4b16      	ldr	r3, [pc, #88]	; (b1ec <usbdc_cb_ctl_done+0x98>)
    b192:	76da      	strb	r2, [r3, #27]
		usbdc.state     = req->wValue ? USBD_S_CONFIG : USBD_S_ADDRESS;
    b194:	bb3a      	cbnz	r2, b1e6 <usbdc_cb_ctl_done+0x92>
    b196:	2503      	movs	r5, #3
    b198:	462a      	mov	r2, r5
	struct usbdc_change_handler *cg = (struct usbdc_change_handler *)usbdc.handlers.change_list.head;
    b19a:	68dc      	ldr	r4, [r3, #12]
		usbdc.state     = req->wValue ? USBD_S_CONFIG : USBD_S_ADDRESS;
    b19c:	769a      	strb	r2, [r3, #26]
	while (cg != NULL) {
    b19e:	2c00      	cmp	r4, #0
    b1a0:	d0eb      	beq.n	b17a <usbdc_cb_ctl_done+0x26>
		if (NULL != cg->cb) {
    b1a2:	6863      	ldr	r3, [r4, #4]
			cg->cb(change, value);
    b1a4:	4629      	mov	r1, r5
    b1a6:	2001      	movs	r0, #1
		if (NULL != cg->cb) {
    b1a8:	b103      	cbz	r3, b1ac <usbdc_cb_ctl_done+0x58>
			cg->cb(change, value);
    b1aa:	4798      	blx	r3
		cg = cg->next;
    b1ac:	6824      	ldr	r4, [r4, #0]
	while (cg != NULL) {
    b1ae:	2c00      	cmp	r4, #0
    b1b0:	d1f7      	bne.n	b1a2 <usbdc_cb_ctl_done+0x4e>
    b1b2:	e7e2      	b.n	b17a <usbdc_cb_ctl_done+0x26>
		usbdc_set_address(req->wValue);
    b1b4:	8850      	ldrh	r0, [r2, #2]
	usb_d_set_address(addr);
    b1b6:	b2c0      	uxtb	r0, r0
    b1b8:	f000 fcf0 	bl	bb9c <usb_d_set_address>
		usbdc.state = req->wValue ? USBD_S_ADDRESS : USBD_S_DEFAULT;
    b1bc:	886b      	ldrh	r3, [r5, #2]
    b1be:	b97b      	cbnz	r3, b1e0 <usbdc_cb_ctl_done+0x8c>
    b1c0:	2502      	movs	r5, #2
    b1c2:	462a      	mov	r2, r5
    b1c4:	4b09      	ldr	r3, [pc, #36]	; (b1ec <usbdc_cb_ctl_done+0x98>)
	struct usbdc_change_handler *cg = (struct usbdc_change_handler *)usbdc.handlers.change_list.head;
    b1c6:	68dc      	ldr	r4, [r3, #12]
		usbdc.state = req->wValue ? USBD_S_ADDRESS : USBD_S_DEFAULT;
    b1c8:	769a      	strb	r2, [r3, #26]
	while (cg != NULL) {
    b1ca:	2c00      	cmp	r4, #0
    b1cc:	d0d5      	beq.n	b17a <usbdc_cb_ctl_done+0x26>
		if (NULL != cg->cb) {
    b1ce:	6863      	ldr	r3, [r4, #4]
			cg->cb(change, value);
    b1d0:	4629      	mov	r1, r5
    b1d2:	2001      	movs	r0, #1
		if (NULL != cg->cb) {
    b1d4:	b103      	cbz	r3, b1d8 <usbdc_cb_ctl_done+0x84>
			cg->cb(change, value);
    b1d6:	4798      	blx	r3
		cg = cg->next;
    b1d8:	6824      	ldr	r4, [r4, #0]
	while (cg != NULL) {
    b1da:	2c00      	cmp	r4, #0
    b1dc:	d1f7      	bne.n	b1ce <usbdc_cb_ctl_done+0x7a>
    b1de:	e7cc      	b.n	b17a <usbdc_cb_ctl_done+0x26>
		usbdc.state = req->wValue ? USBD_S_ADDRESS : USBD_S_DEFAULT;
    b1e0:	2503      	movs	r5, #3
    b1e2:	462a      	mov	r2, r5
    b1e4:	e7ee      	b.n	b1c4 <usbdc_cb_ctl_done+0x70>
		usbdc.state     = req->wValue ? USBD_S_CONFIG : USBD_S_ADDRESS;
    b1e6:	2504      	movs	r5, #4
    b1e8:	462a      	mov	r2, r5
    b1ea:	e7d6      	b.n	b19a <usbdc_cb_ctl_done+0x46>
    b1ec:	20001cd8 	.word	0x20001cd8

0000b1f0 <usbdc_cb_ctl_req>:
{
    b1f0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	struct usbdc_req_handler *h = (struct usbdc_req_handler *)usbdc.handlers.req_list.head;
    b1f4:	4fb6      	ldr	r7, [pc, #728]	; (b4d0 <usbdc_cb_ctl_req+0x2e0>)
    b1f6:	68bc      	ldr	r4, [r7, #8]
{
    b1f8:	b086      	sub	sp, #24
    b1fa:	4606      	mov	r6, r0
    b1fc:	460d      	mov	r5, r1
	while (h != NULL) {
    b1fe:	b15c      	cbz	r4, b218 <usbdc_cb_ctl_req+0x28>
		if (NULL != h->cb) {
    b200:	6863      	ldr	r3, [r4, #4]
			rc = h->cb(ep, req, stage);
    b202:	2200      	movs	r2, #0
    b204:	4629      	mov	r1, r5
    b206:	4630      	mov	r0, r6
		if (NULL != h->cb) {
    b208:	b11b      	cbz	r3, b212 <usbdc_cb_ctl_req+0x22>
			rc = h->cb(ep, req, stage);
    b20a:	4798      	blx	r3
			if (0 == rc) {
    b20c:	b170      	cbz	r0, b22c <usbdc_cb_ctl_req+0x3c>
			} else if (ERR_NOT_FOUND != rc) {
    b20e:	300a      	adds	r0, #10
    b210:	d108      	bne.n	b224 <usbdc_cb_ctl_req+0x34>
		h = h->next;
    b212:	6824      	ldr	r4, [r4, #0]
	while (h != NULL) {
    b214:	2c00      	cmp	r4, #0
    b216:	d1f3      	bne.n	b200 <usbdc_cb_ctl_req+0x10>
	switch (req->bmRequestType & (USB_REQT_TYPE_MASK | USB_REQT_DIR_IN)) {
    b218:	782b      	ldrb	r3, [r5, #0]
    b21a:	f013 02e0 	ands.w	r2, r3, #224	; 0xe0
    b21e:	d025      	beq.n	b26c <usbdc_cb_ctl_req+0x7c>
    b220:	2a80      	cmp	r2, #128	; 0x80
    b222:	d007      	beq.n	b234 <usbdc_cb_ctl_req+0x44>
		return false;
    b224:	2000      	movs	r0, #0
}
    b226:	b006      	add	sp, #24
    b228:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return true;
    b22c:	2001      	movs	r0, #1
}
    b22e:	b006      	add	sp, #24
    b230:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	switch (req->bRequest) {
    b234:	786a      	ldrb	r2, [r5, #1]
    b236:	2a0a      	cmp	r2, #10
    b238:	d8f4      	bhi.n	b224 <usbdc_cb_ctl_req+0x34>
    b23a:	a101      	add	r1, pc, #4	; (adr r1, b240 <usbdc_cb_ctl_req+0x50>)
    b23c:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
    b240:	0000b35f 	.word	0x0000b35f
    b244:	0000b225 	.word	0x0000b225
    b248:	0000b225 	.word	0x0000b225
    b24c:	0000b225 	.word	0x0000b225
    b250:	0000b225 	.word	0x0000b225
    b254:	0000b225 	.word	0x0000b225
    b258:	0000b313 	.word	0x0000b313
    b25c:	0000b225 	.word	0x0000b225
    b260:	0000b2f1 	.word	0x0000b2f1
    b264:	0000b225 	.word	0x0000b225
    b268:	0000b2a9 	.word	0x0000b2a9
	switch (req->bRequest) {
    b26c:	786a      	ldrb	r2, [r5, #1]
    b26e:	3a01      	subs	r2, #1
    b270:	2a0a      	cmp	r2, #10
    b272:	d8d7      	bhi.n	b224 <usbdc_cb_ctl_req+0x34>
    b274:	a101      	add	r1, pc, #4	; (adr r1, b27c <usbdc_cb_ctl_req+0x8c>)
    b276:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
    b27a:	bf00      	nop
    b27c:	0000b477 	.word	0x0000b477
    b280:	0000b225 	.word	0x0000b225
    b284:	0000b447 	.word	0x0000b447
    b288:	0000b225 	.word	0x0000b225
    b28c:	0000b429 	.word	0x0000b429
    b290:	0000b225 	.word	0x0000b225
    b294:	0000b225 	.word	0x0000b225
    b298:	0000b225 	.word	0x0000b225
    b29c:	0000b403 	.word	0x0000b403
    b2a0:	0000b225 	.word	0x0000b225
    b2a4:	0000b3a7 	.word	0x0000b3a7
	if (!(usbdc.ifc_alt_map & (1 << req->wIndex))) {
    b2a8:	7f7b      	ldrb	r3, [r7, #29]
    b2aa:	88aa      	ldrh	r2, [r5, #4]
    b2ac:	4113      	asrs	r3, r2
    b2ae:	f013 0301 	ands.w	r3, r3, #1
    b2b2:	f000 818e 	beq.w	b5d2 <usbdc_cb_ctl_req+0x3e2>
	struct usbdf_driver *func = (struct usbdf_driver *)usbdc.func_list.head;
    b2b6:	693c      	ldr	r4, [r7, #16]
	while (NULL != func) {
    b2b8:	b91c      	cbnz	r4, b2c2 <usbdc_cb_ctl_req+0xd2>
    b2ba:	e7b3      	b.n	b224 <usbdc_cb_ctl_req+0x34>
			func = func->next;
    b2bc:	6824      	ldr	r4, [r4, #0]
	while (NULL != func) {
    b2be:	2c00      	cmp	r4, #0
    b2c0:	d0b0      	beq.n	b224 <usbdc_cb_ctl_req+0x34>
		if (0 > (rc = func->ctrl(func, USBDF_GET_IFACE, req))) {
    b2c2:	6863      	ldr	r3, [r4, #4]
    b2c4:	462a      	mov	r2, r5
    b2c6:	2102      	movs	r1, #2
    b2c8:	4620      	mov	r0, r4
    b2ca:	4798      	blx	r3
    b2cc:	2800      	cmp	r0, #0
    b2ce:	dbf5      	blt.n	b2bc <usbdc_cb_ctl_req+0xcc>
			usbdc.ctrl_buf[0] = (uint8_t)rc;
    b2d0:	697b      	ldr	r3, [r7, #20]
    b2d2:	7018      	strb	r0, [r3, #0]
/**
 * \brief Issue USB device transfer
 */
int32_t usbdc_xfer(uint8_t ep, uint8_t *buf, uint32_t size, bool zlp)
{
	struct usb_d_transfer xfer = {(uint8_t *)buf, size, ep, zlp};
    b2d4:	697b      	ldr	r3, [r7, #20]
    b2d6:	9303      	str	r3, [sp, #12]
    b2d8:	2401      	movs	r4, #1
    b2da:	2300      	movs	r3, #0
	return usb_d_ep_transfer(&xfer);
    b2dc:	a803      	add	r0, sp, #12
	struct usb_d_transfer xfer = {(uint8_t *)buf, size, ep, zlp};
    b2de:	9404      	str	r4, [sp, #16]
    b2e0:	f88d 3014 	strb.w	r3, [sp, #20]
    b2e4:	f88d 3015 	strb.w	r3, [sp, #21]
	return usb_d_ep_transfer(&xfer);
    b2e8:	f000 fd24 	bl	bd34 <usb_d_ep_transfer>
			return true;
    b2ec:	4620      	mov	r0, r4
    b2ee:	e79a      	b.n	b226 <usbdc_cb_ctl_req+0x36>
		*(uint8_t *)usbdc.ctrl_buf = usbdc.cfg_value;
    b2f0:	697b      	ldr	r3, [r7, #20]
    b2f2:	7efa      	ldrb	r2, [r7, #27]
    b2f4:	701a      	strb	r2, [r3, #0]
	struct usb_d_transfer xfer = {(uint8_t *)buf, size, ep, zlp};
    b2f6:	697b      	ldr	r3, [r7, #20]
    b2f8:	9303      	str	r3, [sp, #12]
    b2fa:	2401      	movs	r4, #1
    b2fc:	2300      	movs	r3, #0
	return usb_d_ep_transfer(&xfer);
    b2fe:	a803      	add	r0, sp, #12
	struct usb_d_transfer xfer = {(uint8_t *)buf, size, ep, zlp};
    b300:	f88d 6014 	strb.w	r6, [sp, #20]
    b304:	9404      	str	r4, [sp, #16]
    b306:	f88d 3015 	strb.w	r3, [sp, #21]
	return usb_d_ep_transfer(&xfer);
    b30a:	f000 fd13 	bl	bd34 <usb_d_ep_transfer>
		return true;
    b30e:	4620      	mov	r0, r4
    b310:	e789      	b.n	b226 <usbdc_cb_ctl_req+0x36>
	uint8_t type = (uint8_t)(req->wValue >> 8);
    b312:	886b      	ldrh	r3, [r5, #2]
	switch (type) {
    b314:	0a1a      	lsrs	r2, r3, #8
    b316:	2a02      	cmp	r2, #2
    b318:	f000 810a 	beq.w	b530 <usbdc_cb_ctl_req+0x340>
    b31c:	2a03      	cmp	r2, #3
    b31e:	f000 80f0 	beq.w	b502 <usbdc_cb_ctl_req+0x312>
    b322:	2a01      	cmp	r2, #1
    b324:	f47f af7e 	bne.w	b224 <usbdc_cb_ctl_req+0x34>
		dev_desc = usb_find_desc(usbdc.desces.ls_fs->sod, usbdc.desces.ls_fs->eod, USB_DT_DEVICE);
    b328:	683b      	ldr	r3, [r7, #0]
	uint16_t length   = req->wLength;
    b32a:	88ec      	ldrh	r4, [r5, #6]
		dev_desc = usb_find_desc(usbdc.desces.ls_fs->sod, usbdc.desces.ls_fs->eod, USB_DT_DEVICE);
    b32c:	e893 0003 	ldmia.w	r3, {r0, r1}
    b330:	2c12      	cmp	r4, #18
    b332:	bf28      	it	cs
    b334:	2412      	movcs	r4, #18
    b336:	f000 fa19 	bl	b76c <usb_find_desc>
	if (!dev_desc) {
    b33a:	4603      	mov	r3, r0
    b33c:	2800      	cmp	r0, #0
    b33e:	f43f af71 	beq.w	b224 <usbdc_cb_ctl_req+0x34>
	if (length <= str_desc[0]) {
    b342:	2200      	movs	r2, #0
	return usb_d_ep_transfer(&xfer);
    b344:	a803      	add	r0, sp, #12
	struct usb_d_transfer xfer = {(uint8_t *)buf, size, ep, zlp};
    b346:	9303      	str	r3, [sp, #12]
	if (ERR_NONE != usbdc_xfer(ep, str_desc, length, need_zlp)) {
    b348:	9404      	str	r4, [sp, #16]
	struct usb_d_transfer xfer = {(uint8_t *)buf, size, ep, zlp};
    b34a:	f88d 6014 	strb.w	r6, [sp, #20]
    b34e:	f88d 2015 	strb.w	r2, [sp, #21]
	return usb_d_ep_transfer(&xfer);
    b352:	f000 fcef 	bl	bd34 <usb_d_ep_transfer>
	if (ERR_NONE != usbdc_xfer(ep, str_desc, length, need_zlp)) {
    b356:	fab0 f080 	clz	r0, r0
    b35a:	0940      	lsrs	r0, r0, #5
    b35c:	e763      	b.n	b226 <usbdc_cb_ctl_req+0x36>
	switch (req->bmRequestType & USB_REQT_RECIP_MASK) {
    b35e:	f003 011f 	and.w	r1, r3, #31
    b362:	2901      	cmp	r1, #1
    b364:	f240 8091 	bls.w	b48a <usbdc_cb_ctl_req+0x29a>
    b368:	2902      	cmp	r1, #2
    b36a:	f47f af5b 	bne.w	b224 <usbdc_cb_ctl_req+0x34>
		st = usb_d_ep_halt(req->wIndex & 0xFF, USB_EP_HALT_GET);
    b36e:	88a8      	ldrh	r0, [r5, #4]
    b370:	b2c0      	uxtb	r0, r0
    b372:	f000 fd91 	bl	be98 <usb_d_ep_halt>
		if (st < 0) {
    b376:	1e03      	subs	r3, r0, #0
    b378:	f6ff af54 	blt.w	b224 <usbdc_cb_ctl_req+0x34>
		st = st & 0x1;
    b37c:	f003 0301 	and.w	r3, r3, #1
    b380:	9301      	str	r3, [sp, #4]
	memcpy(usbdc.ctrl_buf, &st, 2);
    b382:	697b      	ldr	r3, [r7, #20]
    b384:	f8bd 2004 	ldrh.w	r2, [sp, #4]
    b388:	801a      	strh	r2, [r3, #0]
	struct usb_d_transfer xfer = {(uint8_t *)buf, size, ep, zlp};
    b38a:	697b      	ldr	r3, [r7, #20]
    b38c:	9303      	str	r3, [sp, #12]
    b38e:	2202      	movs	r2, #2
    b390:	2300      	movs	r3, #0
	return usb_d_ep_transfer(&xfer);
    b392:	a803      	add	r0, sp, #12
	struct usb_d_transfer xfer = {(uint8_t *)buf, size, ep, zlp};
    b394:	f88d 6014 	strb.w	r6, [sp, #20]
    b398:	9204      	str	r2, [sp, #16]
    b39a:	f88d 3015 	strb.w	r3, [sp, #21]
	return usb_d_ep_transfer(&xfer);
    b39e:	f000 fcc9 	bl	bd34 <usb_d_ep_transfer>
	return true;
    b3a2:	2001      	movs	r0, #1
    b3a4:	e73f      	b.n	b226 <usbdc_cb_ctl_req+0x36>
		ifc = usb_find_cfg_desc(usbdc.desces.ls_fs->sod, usbdc.desces.ls_fs->eod, usbdc.cfg_value);
    b3a6:	683b      	ldr	r3, [r7, #0]
    b3a8:	7efa      	ldrb	r2, [r7, #27]
		return usbdc_set_interface(req->wValue, req->wIndex);
    b3aa:	886c      	ldrh	r4, [r5, #2]
    b3ac:	88ad      	ldrh	r5, [r5, #4]
		ifc = usb_find_cfg_desc(usbdc.desces.ls_fs->sod, usbdc.desces.ls_fs->eod, usbdc.cfg_value);
    b3ae:	e893 0003 	ldmia.w	r3, {r0, r1}
    b3b2:	f000 fa0f 	bl	b7d4 <usb_find_cfg_desc>
	if (NULL == ifc) {
    b3b6:	2800      	cmp	r0, #0
    b3b8:	f43f af34 	beq.w	b224 <usbdc_cb_ctl_req+0x34>
	desc.sod = ifc;
    b3bc:	9001      	str	r0, [sp, #4]
	return (ptr[0] + (ptr[1] << 8));
    b3be:	78c1      	ldrb	r1, [r0, #3]
    b3c0:	7883      	ldrb	r3, [r0, #2]
    b3c2:	eb03 2301 	add.w	r3, r3, r1, lsl #8
	desc.eod = ifc + usb_cfg_desc_total_len(ifc);
    b3c6:	fa10 f383 	uxtah	r3, r0, r3
	if (NULL == (ifc = usb_find_desc(desc.sod, desc.eod, USB_DT_INTERFACE))) {
    b3ca:	4619      	mov	r1, r3
    b3cc:	2204      	movs	r2, #4
	desc.eod = ifc + usb_cfg_desc_total_len(ifc);
    b3ce:	9302      	str	r3, [sp, #8]
	if (NULL == (ifc = usb_find_desc(desc.sod, desc.eod, USB_DT_INTERFACE))) {
    b3d0:	f000 f9cc 	bl	b76c <usb_find_desc>
    b3d4:	2800      	cmp	r0, #0
    b3d6:	f43f af25 	beq.w	b224 <usbdc_cb_ctl_req+0x34>
	while (ifc[2] != ifc_id || ifc[3] != alt_set) {
    b3da:	7883      	ldrb	r3, [r0, #2]
    b3dc:	42ab      	cmp	r3, r5
		ifc      = usb_find_desc(desc.sod, desc.eod, USB_DT_INTERFACE);
    b3de:	f04f 0204 	mov.w	r2, #4
	while (ifc[2] != ifc_id || ifc[3] != alt_set) {
    b3e2:	d103      	bne.n	b3ec <usbdc_cb_ctl_req+0x1fc>
    b3e4:	78c3      	ldrb	r3, [r0, #3]
    b3e6:	42a3      	cmp	r3, r4
    b3e8:	f000 80c9 	beq.w	b57e <usbdc_cb_ctl_req+0x38e>
		desc.sod = usb_desc_next(desc.sod);
    b3ec:	9b01      	ldr	r3, [sp, #4]
		ifc      = usb_find_desc(desc.sod, desc.eod, USB_DT_INTERFACE);
    b3ee:	9902      	ldr	r1, [sp, #8]
	return (desc + usb_desc_len(desc));
    b3f0:	7818      	ldrb	r0, [r3, #0]
    b3f2:	4403      	add	r3, r0
    b3f4:	4618      	mov	r0, r3
		desc.sod = usb_desc_next(desc.sod);
    b3f6:	9301      	str	r3, [sp, #4]
		ifc      = usb_find_desc(desc.sod, desc.eod, USB_DT_INTERFACE);
    b3f8:	f000 f9b8 	bl	b76c <usb_find_desc>
		if (NULL == ifc) {
    b3fc:	2800      	cmp	r0, #0
    b3fe:	d1ec      	bne.n	b3da <usbdc_cb_ctl_req+0x1ea>
    b400:	e710      	b.n	b224 <usbdc_cb_ctl_req+0x34>
		if (!usbdc_set_config(req->wValue)) {
    b402:	886a      	ldrh	r2, [r5, #2]
    b404:	b2d2      	uxtb	r2, r2
	if (cfg_value == 0) {
    b406:	2a00      	cmp	r2, #0
    b408:	d142      	bne.n	b490 <usbdc_cb_ctl_req+0x2a0>
	struct usbdf_driver *func = (struct usbdf_driver *)usbdc.func_list.head;
    b40a:	693c      	ldr	r4, [r7, #16]
	while (NULL != func) {
    b40c:	b13c      	cbz	r4, b41e <usbdc_cb_ctl_req+0x22e>
		func->ctrl(func, USBDF_DISABLE, NULL);
    b40e:	6863      	ldr	r3, [r4, #4]
    b410:	4620      	mov	r0, r4
    b412:	2200      	movs	r2, #0
    b414:	2101      	movs	r1, #1
    b416:	4798      	blx	r3
		func = func->next;
    b418:	6824      	ldr	r4, [r4, #0]
	while (NULL != func) {
    b41a:	2c00      	cmp	r4, #0
    b41c:	d1f7      	bne.n	b40e <usbdc_cb_ctl_req+0x21e>
    b41e:	ad03      	add	r5, sp, #12
	return usb_d_ep_transfer(&xfer);
    b420:	4628      	mov	r0, r5
	struct usb_d_transfer xfer = {(uint8_t *)buf, size, ep, zlp};
    b422:	2300      	movs	r3, #0
    b424:	2201      	movs	r2, #1
    b426:	e002      	b.n	b42e <usbdc_cb_ctl_req+0x23e>
    b428:	2300      	movs	r3, #0
    b42a:	2201      	movs	r2, #1
	return usb_d_ep_transfer(&xfer);
    b42c:	a803      	add	r0, sp, #12
	struct usb_d_transfer xfer = {(uint8_t *)buf, size, ep, zlp};
    b42e:	f88d 6014 	strb.w	r6, [sp, #20]
    b432:	9303      	str	r3, [sp, #12]
    b434:	9304      	str	r3, [sp, #16]
    b436:	f88d 2015 	strb.w	r2, [sp, #21]
	return usb_d_ep_transfer(&xfer);
    b43a:	f000 fc7b 	bl	bd34 <usb_d_ep_transfer>
		return (ERR_NONE == usbdc_xfer(ep, NULL, 0, true));
    b43e:	fab0 f080 	clz	r0, r0
    b442:	0940      	lsrs	r0, r0, #5
    b444:	e6ef      	b.n	b226 <usbdc_cb_ctl_req+0x36>
	switch (req->bmRequestType & USB_REQT_RECIP_MASK) {
    b446:	2b02      	cmp	r3, #2
    b448:	f47f aeec 	bne.w	b224 <usbdc_cb_ctl_req+0x34>
		if (req->wLength != 0) {
    b44c:	88ef      	ldrh	r7, [r5, #6]
    b44e:	2f00      	cmp	r7, #0
    b450:	f47f aee8 	bne.w	b224 <usbdc_cb_ctl_req+0x34>
		usb_d_ep_halt(req->wIndex & 0xFF, USB_EP_HALT_SET);
    b454:	88a8      	ldrh	r0, [r5, #4]
    b456:	2101      	movs	r1, #1
    b458:	b2c0      	uxtb	r0, r0
    b45a:	f000 fd1d 	bl	be98 <usb_d_ep_halt>
	struct usb_d_transfer xfer = {(uint8_t *)buf, size, ep, zlp};
    b45e:	2401      	movs	r4, #1
	return usb_d_ep_transfer(&xfer);
    b460:	a803      	add	r0, sp, #12
	struct usb_d_transfer xfer = {(uint8_t *)buf, size, ep, zlp};
    b462:	9703      	str	r7, [sp, #12]
    b464:	9704      	str	r7, [sp, #16]
    b466:	f88d 6014 	strb.w	r6, [sp, #20]
    b46a:	f88d 4015 	strb.w	r4, [sp, #21]
	return usb_d_ep_transfer(&xfer);
    b46e:	f000 fc61 	bl	bd34 <usb_d_ep_transfer>
		return true;
    b472:	4620      	mov	r0, r4
    b474:	e6d7      	b.n	b226 <usbdc_cb_ctl_req+0x36>
	switch (req->bmRequestType & USB_REQT_RECIP_MASK) {
    b476:	2b02      	cmp	r3, #2
    b478:	f47f aed4 	bne.w	b224 <usbdc_cb_ctl_req+0x34>
		if (req->wLength != 0) {
    b47c:	88ef      	ldrh	r7, [r5, #6]
    b47e:	2f00      	cmp	r7, #0
    b480:	f47f aed0 	bne.w	b224 <usbdc_cb_ctl_req+0x34>
		usb_d_ep_halt(req->wIndex & 0xFF, USB_EP_HALT_CLR);
    b484:	88a8      	ldrh	r0, [r5, #4]
    b486:	4639      	mov	r1, r7
    b488:	e7e6      	b.n	b458 <usbdc_cb_ctl_req+0x268>
		st = 0;
    b48a:	2300      	movs	r3, #0
    b48c:	9301      	str	r3, [sp, #4]
    b48e:	e778      	b.n	b382 <usbdc_cb_ctl_req+0x192>
		cfg_desc = usb_find_cfg_desc(usbdc.desces.ls_fs->sod, usbdc.desces.ls_fs->eod, cfg_value);
    b490:	683b      	ldr	r3, [r7, #0]
    b492:	e893 0003 	ldmia.w	r3, {r0, r1}
    b496:	f000 f99d 	bl	b7d4 <usb_find_cfg_desc>
	if (NULL == cfg_desc) {
    b49a:	2800      	cmp	r0, #0
    b49c:	f43f aec2 	beq.w	b224 <usbdc_cb_ctl_req+0x34>
	return (ptr[0] + (ptr[1] << 8));
    b4a0:	78c1      	ldrb	r1, [r0, #3]
    b4a2:	7882      	ldrb	r2, [r0, #2]
    b4a4:	eb02 2201 	add.w	r2, r2, r1, lsl #8
	desc.eod  = cfg_desc + total_len;
    b4a8:	fa10 f382 	uxtah	r3, r0, r2
	desc.sod  = usb_find_desc(cfg_desc, desc.eod, USB_DT_INTERFACE);
    b4ac:	4619      	mov	r1, r3
    b4ae:	2204      	movs	r2, #4
	desc.eod  = cfg_desc + total_len;
    b4b0:	9304      	str	r3, [sp, #16]
	desc.sod  = usb_find_desc(cfg_desc, desc.eod, USB_DT_INTERFACE);
    b4b2:	f000 f95b 	bl	b76c <usb_find_desc>
    b4b6:	9003      	str	r0, [sp, #12]
	while (NULL != desc.sod) {
    b4b8:	2800      	cmp	r0, #0
    b4ba:	d0b0      	beq.n	b41e <usbdc_cb_ctl_req+0x22e>
    b4bc:	24ff      	movs	r4, #255	; 0xff
    b4be:	ad03      	add	r5, sp, #12
		if (last_iface != desc.sod[2] /* bInterfaceNumber */) {
    b4c0:	f890 8002 	ldrb.w	r8, [r0, #2]
    b4c4:	45a0      	cmp	r8, r4
    b4c6:	d010      	beq.n	b4ea <usbdc_cb_ctl_req+0x2fa>
			func       = (struct usbdf_driver *)usbdc.func_list.head;
    b4c8:	693c      	ldr	r4, [r7, #16]
			while (NULL != func) {
    b4ca:	b92c      	cbnz	r4, b4d8 <usbdc_cb_ctl_req+0x2e8>
    b4cc:	e092      	b.n	b5f4 <usbdc_cb_ctl_req+0x404>
    b4ce:	bf00      	nop
    b4d0:	20001cd8 	.word	0x20001cd8
					func = func->next;
    b4d4:	6824      	ldr	r4, [r4, #0]
			while (NULL != func) {
    b4d6:	b134      	cbz	r4, b4e6 <usbdc_cb_ctl_req+0x2f6>
				if (func->ctrl(func, USBDF_ENABLE, &desc)) {
    b4d8:	6863      	ldr	r3, [r4, #4]
    b4da:	462a      	mov	r2, r5
    b4dc:	2100      	movs	r1, #0
    b4de:	4620      	mov	r0, r4
    b4e0:	4798      	blx	r3
    b4e2:	2800      	cmp	r0, #0
    b4e4:	d1f6      	bne.n	b4d4 <usbdc_cb_ctl_req+0x2e4>
    b4e6:	9803      	ldr	r0, [sp, #12]
			while (NULL != func) {
    b4e8:	4644      	mov	r4, r8
	return (desc + usb_desc_len(desc));
    b4ea:	7803      	ldrb	r3, [r0, #0]
		desc.sod = usb_find_desc(desc.sod, desc.eod, USB_DT_INTERFACE);
    b4ec:	9904      	ldr	r1, [sp, #16]
    b4ee:	4403      	add	r3, r0
    b4f0:	4618      	mov	r0, r3
    b4f2:	2204      	movs	r2, #4
		desc.sod = usb_desc_next(desc.sod);
    b4f4:	9303      	str	r3, [sp, #12]
		desc.sod = usb_find_desc(desc.sod, desc.eod, USB_DT_INTERFACE);
    b4f6:	f000 f939 	bl	b76c <usb_find_desc>
    b4fa:	9003      	str	r0, [sp, #12]
	while (NULL != desc.sod) {
    b4fc:	2800      	cmp	r0, #0
    b4fe:	d1df      	bne.n	b4c0 <usbdc_cb_ctl_req+0x2d0>
    b500:	e78e      	b.n	b420 <usbdc_cb_ctl_req+0x230>
	str_desc = usb_find_str_desc(usbdc.desces.ls_fs->sod, usbdc.desces.ls_fs->eod, index);
    b502:	683a      	ldr	r2, [r7, #0]
	uint16_t length   = req->wLength;
    b504:	88ec      	ldrh	r4, [r5, #6]
	bool     need_zlp = !(length & (usbdc.ctrl_size - 1));
    b506:	7f3d      	ldrb	r5, [r7, #28]
	str_desc = usb_find_str_desc(usbdc.desces.ls_fs->sod, usbdc.desces.ls_fs->eod, index);
    b508:	e892 0003 	ldmia.w	r2, {r0, r1}
    b50c:	b2da      	uxtb	r2, r3
    b50e:	f000 f98d 	bl	b82c <usb_find_str_desc>
	if (NULL == str_desc) {
    b512:	4603      	mov	r3, r0
    b514:	2800      	cmp	r0, #0
    b516:	f43f ae85 	beq.w	b224 <usbdc_cb_ctl_req+0x34>
	if (length <= str_desc[0]) {
    b51a:	7801      	ldrb	r1, [r0, #0]
    b51c:	428c      	cmp	r4, r1
    b51e:	f67f af10 	bls.w	b342 <usbdc_cb_ctl_req+0x152>
	bool     need_zlp = !(length & (usbdc.ctrl_size - 1));
    b522:	3d01      	subs	r5, #1
    b524:	4225      	tst	r5, r4
    b526:	bf0c      	ite	eq
    b528:	2201      	moveq	r2, #1
    b52a:	2200      	movne	r2, #0
    b52c:	460c      	mov	r4, r1
    b52e:	e709      	b.n	b344 <usbdc_cb_ctl_req+0x154>
		cfg_desc = usb_find_cfg_desc(usbdc.desces.ls_fs->sod, usbdc.desces.ls_fs->eod, index + 1);
    b530:	683a      	ldr	r2, [r7, #0]
	uint16_t length   = req->wLength;
    b532:	88ec      	ldrh	r4, [r5, #6]
	bool     need_zlp = !(length & (usbdc.ctrl_size - 1));
    b534:	7f3d      	ldrb	r5, [r7, #28]
		cfg_desc = usb_find_cfg_desc(usbdc.desces.ls_fs->sod, usbdc.desces.ls_fs->eod, index + 1);
    b536:	3301      	adds	r3, #1
    b538:	e892 0003 	ldmia.w	r2, {r0, r1}
    b53c:	b2da      	uxtb	r2, r3
    b53e:	f000 f949 	bl	b7d4 <usb_find_cfg_desc>
	if (NULL == cfg_desc) {
    b542:	4602      	mov	r2, r0
    b544:	2800      	cmp	r0, #0
    b546:	f43f ae6d 	beq.w	b224 <usbdc_cb_ctl_req+0x34>
	return (ptr[0] + (ptr[1] << 8));
    b54a:	78c1      	ldrb	r1, [r0, #3]
    b54c:	7883      	ldrb	r3, [r0, #2]
    b54e:	eb03 2301 	add.w	r3, r3, r1, lsl #8
    b552:	b29b      	uxth	r3, r3
	if (length <= total_len) {
    b554:	429c      	cmp	r4, r3
    b556:	d94b      	bls.n	b5f0 <usbdc_cb_ctl_req+0x400>
	bool     need_zlp = !(length & (usbdc.ctrl_size - 1));
    b558:	3d01      	subs	r5, #1
    b55a:	4225      	tst	r5, r4
    b55c:	bf0c      	ite	eq
    b55e:	2101      	moveq	r1, #1
    b560:	2100      	movne	r1, #0
    b562:	461c      	mov	r4, r3
	return usb_d_ep_transfer(&xfer);
    b564:	a803      	add	r0, sp, #12
	struct usb_d_transfer xfer = {(uint8_t *)buf, size, ep, zlp};
    b566:	9203      	str	r2, [sp, #12]
	if (ERR_NONE != usbdc_xfer(ep, cfg_desc, length, need_zlp)) {
    b568:	9404      	str	r4, [sp, #16]
	struct usb_d_transfer xfer = {(uint8_t *)buf, size, ep, zlp};
    b56a:	f88d 6014 	strb.w	r6, [sp, #20]
    b56e:	f88d 1015 	strb.w	r1, [sp, #21]
	return usb_d_ep_transfer(&xfer);
    b572:	f000 fbdf 	bl	bd34 <usb_d_ep_transfer>
	if (ERR_NONE != usbdc_xfer(ep, cfg_desc, length, need_zlp)) {
    b576:	fab0 f080 	clz	r0, r0
    b57a:	0940      	lsrs	r0, r0, #5
    b57c:	e653      	b.n	b226 <usbdc_cb_ctl_req+0x36>
	func     = (struct usbdf_driver *)usbdc.func_list.head;
    b57e:	693e      	ldr	r6, [r7, #16]
	desc.sod = ifc;
    b580:	9001      	str	r0, [sp, #4]
	while (NULL != func) {
    b582:	b926      	cbnz	r6, b58e <usbdc_cb_ctl_req+0x39e>
    b584:	e64e      	b.n	b224 <usbdc_cb_ctl_req+0x34>
			func = func->next;
    b586:	6836      	ldr	r6, [r6, #0]
	while (NULL != func) {
    b588:	2e00      	cmp	r6, #0
    b58a:	f43f ae4b 	beq.w	b224 <usbdc_cb_ctl_req+0x34>
		if (func->ctrl(func, USBDF_DISABLE, &desc)) {
    b58e:	6873      	ldr	r3, [r6, #4]
    b590:	aa01      	add	r2, sp, #4
    b592:	2101      	movs	r1, #1
    b594:	4630      	mov	r0, r6
    b596:	4798      	blx	r3
    b598:	2800      	cmp	r0, #0
    b59a:	d1f4      	bne.n	b586 <usbdc_cb_ctl_req+0x396>
		} else if (ERR_NONE == func->ctrl(func, USBDF_ENABLE, &desc)) {
    b59c:	4601      	mov	r1, r0
    b59e:	aa01      	add	r2, sp, #4
    b5a0:	6873      	ldr	r3, [r6, #4]
    b5a2:	4630      	mov	r0, r6
    b5a4:	4798      	blx	r3
    b5a6:	2800      	cmp	r0, #0
    b5a8:	f47f ae3c 	bne.w	b224 <usbdc_cb_ctl_req+0x34>
			if (alt_set) {
    b5ac:	b12c      	cbz	r4, b5ba <usbdc_cb_ctl_req+0x3ca>
				usbdc.ifc_alt_map |= 1 << ifc_id;
    b5ae:	7f7b      	ldrb	r3, [r7, #29]
    b5b0:	2201      	movs	r2, #1
    b5b2:	fa02 f505 	lsl.w	r5, r2, r5
    b5b6:	432b      	orrs	r3, r5
    b5b8:	777b      	strb	r3, [r7, #29]
	struct usb_d_transfer xfer = {(uint8_t *)buf, size, ep, zlp};
    b5ba:	2300      	movs	r3, #0
	return usb_d_ep_transfer(&xfer);
    b5bc:	a803      	add	r0, sp, #12
	struct usb_d_transfer xfer = {(uint8_t *)buf, size, ep, zlp};
    b5be:	9303      	str	r3, [sp, #12]
    b5c0:	9304      	str	r3, [sp, #16]
    b5c2:	f88d 3014 	strb.w	r3, [sp, #20]
    b5c6:	f88d 3015 	strb.w	r3, [sp, #21]
	return usb_d_ep_transfer(&xfer);
    b5ca:	f000 fbb3 	bl	bd34 <usb_d_ep_transfer>
			return true;
    b5ce:	2001      	movs	r0, #1
    b5d0:	e629      	b.n	b226 <usbdc_cb_ctl_req+0x36>
		usbdc.ctrl_buf[0] = 0;
    b5d2:	697a      	ldr	r2, [r7, #20]
    b5d4:	7013      	strb	r3, [r2, #0]
	struct usb_d_transfer xfer = {(uint8_t *)buf, size, ep, zlp};
    b5d6:	697a      	ldr	r2, [r7, #20]
    b5d8:	9203      	str	r2, [sp, #12]
    b5da:	2401      	movs	r4, #1
	return usb_d_ep_transfer(&xfer);
    b5dc:	a803      	add	r0, sp, #12
	struct usb_d_transfer xfer = {(uint8_t *)buf, size, ep, zlp};
    b5de:	f88d 3014 	strb.w	r3, [sp, #20]
    b5e2:	f88d 3015 	strb.w	r3, [sp, #21]
    b5e6:	9404      	str	r4, [sp, #16]
	return usb_d_ep_transfer(&xfer);
    b5e8:	f000 fba4 	bl	bd34 <usb_d_ep_transfer>
		return true;
    b5ec:	4620      	mov	r0, r4
    b5ee:	e61a      	b.n	b226 <usbdc_cb_ctl_req+0x36>
	if (length <= total_len) {
    b5f0:	2100      	movs	r1, #0
    b5f2:	e7b7      	b.n	b564 <usbdc_cb_ctl_req+0x374>
			while (NULL != func) {
    b5f4:	4644      	mov	r4, r8
    b5f6:	e778      	b.n	b4ea <usbdc_cb_ctl_req+0x2fa>

0000b5f8 <usbd_event_cb>:
{
    b5f8:	b570      	push	{r4, r5, r6, lr}
	switch (ev) {
    b5fa:	b338      	cbz	r0, b64c <usbd_event_cb+0x54>
    b5fc:	2801      	cmp	r0, #1
    b5fe:	d124      	bne.n	b64a <usbd_event_cb+0x52>
	struct usbdf_driver *func = (struct usbdf_driver *)usbdc.func_list.head;
    b600:	4d19      	ldr	r5, [pc, #100]	; (b668 <usbd_event_cb+0x70>)
    b602:	692c      	ldr	r4, [r5, #16]
	while (NULL != func) {
    b604:	b13c      	cbz	r4, b616 <usbd_event_cb+0x1e>
		func->ctrl(func, USBDF_DISABLE, NULL);
    b606:	6863      	ldr	r3, [r4, #4]
    b608:	4620      	mov	r0, r4
    b60a:	2200      	movs	r2, #0
    b60c:	2101      	movs	r1, #1
    b60e:	4798      	blx	r3
		func = func->next;
    b610:	6824      	ldr	r4, [r4, #0]
	while (NULL != func) {
    b612:	2c00      	cmp	r4, #0
    b614:	d1f7      	bne.n	b606 <usbd_event_cb+0xe>
	usbdc.cfg_value   = 0;
    b616:	2400      	movs	r4, #0
	usb_d_ep_deinit(0);
    b618:	4620      	mov	r0, r4
	usbdc.state       = USBD_S_DEFAULT;
    b61a:	2602      	movs	r6, #2
	usbdc.cfg_value   = 0;
    b61c:	76ec      	strb	r4, [r5, #27]
	usbdc.ifc_alt_map = 0;
    b61e:	776c      	strb	r4, [r5, #29]
	usbdc.state       = USBD_S_DEFAULT;
    b620:	76ae      	strb	r6, [r5, #26]
	usb_d_ep_deinit(0);
    b622:	f000 fb41 	bl	bca8 <usb_d_ep_deinit>
	usb_d_ep0_init(usbdc.ctrl_size);
    b626:	7f28      	ldrb	r0, [r5, #28]
    b628:	f000 faba 	bl	bba0 <usb_d_ep0_init>
	usb_d_ep_register_callback(0, USB_D_EP_CB_SETUP, (FUNC_PTR)usbdc_cb_ctl_req);
    b62c:	4621      	mov	r1, r4
    b62e:	4620      	mov	r0, r4
    b630:	4a0e      	ldr	r2, [pc, #56]	; (b66c <usbd_event_cb+0x74>)
    b632:	f000 fc69 	bl	bf08 <usb_d_ep_register_callback>
	usb_d_ep_register_callback(0, USB_D_EP_CB_XFER, (FUNC_PTR)usbdc_cb_ctl_done);
    b636:	4620      	mov	r0, r4
    b638:	4631      	mov	r1, r6
    b63a:	4a0d      	ldr	r2, [pc, #52]	; (b670 <usbd_event_cb+0x78>)
    b63c:	f000 fc64 	bl	bf08 <usb_d_ep_register_callback>
	usb_d_ep_enable(0);
    b640:	4620      	mov	r0, r4
}
    b642:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	usb_d_ep_enable(0);
    b646:	f000 bb4b 	b.w	bce0 <usb_d_ep_enable>
    b64a:	bd70      	pop	{r4, r5, r6, pc}
	struct usbdc_change_handler *cg = (struct usbdc_change_handler *)usbdc.handlers.change_list.head;
    b64c:	4b06      	ldr	r3, [pc, #24]	; (b668 <usbd_event_cb+0x70>)
    b64e:	68dc      	ldr	r4, [r3, #12]
    b650:	460d      	mov	r5, r1
	while (cg != NULL) {
    b652:	b144      	cbz	r4, b666 <usbd_event_cb+0x6e>
		if (NULL != cg->cb) {
    b654:	6863      	ldr	r3, [r4, #4]
			cg->cb(change, value);
    b656:	4629      	mov	r1, r5
    b658:	2000      	movs	r0, #0
		if (NULL != cg->cb) {
    b65a:	b103      	cbz	r3, b65e <usbd_event_cb+0x66>
			cg->cb(change, value);
    b65c:	4798      	blx	r3
		cg = cg->next;
    b65e:	6824      	ldr	r4, [r4, #0]
	while (cg != NULL) {
    b660:	2c00      	cmp	r4, #0
    b662:	d1f7      	bne.n	b654 <usbd_event_cb+0x5c>
    b664:	bd70      	pop	{r4, r5, r6, pc}
    b666:	bd70      	pop	{r4, r5, r6, pc}
    b668:	20001cd8 	.word	0x20001cd8
    b66c:	0000b1f1 	.word	0x0000b1f1
    b670:	0000b155 	.word	0x0000b155

0000b674 <usbdc_xfer>:
{
    b674:	b500      	push	{lr}
    b676:	b085      	sub	sp, #20
	struct usb_d_transfer xfer = {(uint8_t *)buf, size, ep, zlp};
    b678:	f88d 000c 	strb.w	r0, [sp, #12]
	return usb_d_ep_transfer(&xfer);
    b67c:	a801      	add	r0, sp, #4
	struct usb_d_transfer xfer = {(uint8_t *)buf, size, ep, zlp};
    b67e:	9101      	str	r1, [sp, #4]
    b680:	9202      	str	r2, [sp, #8]
    b682:	f88d 300d 	strb.w	r3, [sp, #13]
	return usb_d_ep_transfer(&xfer);
    b686:	f000 fb55 	bl	bd34 <usb_d_ep_transfer>
}
    b68a:	b005      	add	sp, #20
    b68c:	f85d fb04 	ldr.w	pc, [sp], #4

0000b690 <usbdc_register_handler>:
/**
 * \brief Register the handler
 */
void usbdc_register_handler(enum usbdc_handler_type type, const struct usbdc_handler *h)
{
	switch (type) {
    b690:	2801      	cmp	r0, #1
    b692:	d009      	beq.n	b6a8 <usbdc_register_handler+0x18>
    b694:	d305      	bcc.n	b6a2 <usbdc_register_handler+0x12>
    b696:	2802      	cmp	r0, #2
    b698:	d102      	bne.n	b6a0 <usbdc_register_handler+0x10>
		break;
	case USBDC_HDL_REQ:
		list_insert_at_end(&usbdc.handlers.req_list, (void *)h);
		break;
	case USBDC_HDL_CHANGE:
		list_insert_at_end(&usbdc.handlers.change_list, (void *)h);
    b69a:	4805      	ldr	r0, [pc, #20]	; (b6b0 <usbdc_register_handler+0x20>)
    b69c:	f000 bc66 	b.w	bf6c <list_insert_at_end>
    b6a0:	4770      	bx	lr
		list_insert_at_end(&usbdc.handlers.sof_list, (void *)h);
    b6a2:	4804      	ldr	r0, [pc, #16]	; (b6b4 <usbdc_register_handler+0x24>)
    b6a4:	f000 bc62 	b.w	bf6c <list_insert_at_end>
		list_insert_at_end(&usbdc.handlers.req_list, (void *)h);
    b6a8:	4803      	ldr	r0, [pc, #12]	; (b6b8 <usbdc_register_handler+0x28>)
    b6aa:	f000 bc5f 	b.w	bf6c <list_insert_at_end>
    b6ae:	bf00      	nop
    b6b0:	20001ce4 	.word	0x20001ce4
    b6b4:	20001cdc 	.word	0x20001cdc
    b6b8:	20001ce0 	.word	0x20001ce0

0000b6bc <usbdc_init>:

/**
 * \brief Initialize the USB device core driver
 */
int32_t usbdc_init(uint8_t *ctrl_buf)
{
    b6bc:	b538      	push	{r3, r4, r5, lr}
	ASSERT(ctrl_buf);
    b6be:	4605      	mov	r5, r0
    b6c0:	3000      	adds	r0, #0
    b6c2:	bf18      	it	ne
    b6c4:	2001      	movne	r0, #1
    b6c6:	f240 3255 	movw	r2, #853	; 0x355
    b6ca:	490c      	ldr	r1, [pc, #48]	; (b6fc <usbdc_init+0x40>)
    b6cc:	f000 fc4a 	bl	bf64 <assert>

	int32_t rc;

	rc = usb_d_init();
    b6d0:	f000 f9dc 	bl	ba8c <usb_d_init>
	if (rc < 0) {
    b6d4:	2800      	cmp	r0, #0
    b6d6:	db0f      	blt.n	b6f8 <usbdc_init+0x3c>
		return rc;
	}

	memset(&usbdc, 0, sizeof(usbdc));
    b6d8:	4c09      	ldr	r4, [pc, #36]	; (b700 <usbdc_init+0x44>)
    b6da:	2220      	movs	r2, #32
    b6dc:	2100      	movs	r1, #0
    b6de:	4620      	mov	r0, r4
    b6e0:	f01c fbbc 	bl	27e5c <memset>
	usbdc.ctrl_buf = ctrl_buf;
	usb_d_register_callback(USB_D_CB_SOF, (FUNC_PTR)usbd_sof_cb);
    b6e4:	4907      	ldr	r1, [pc, #28]	; (b704 <usbdc_init+0x48>)
	usbdc.ctrl_buf = ctrl_buf;
    b6e6:	6165      	str	r5, [r4, #20]
	usb_d_register_callback(USB_D_CB_SOF, (FUNC_PTR)usbd_sof_cb);
    b6e8:	2000      	movs	r0, #0
    b6ea:	f000 fa51 	bl	bb90 <usb_d_register_callback>
	usb_d_register_callback(USB_D_CB_EVENT, (FUNC_PTR)usbd_event_cb);
    b6ee:	2001      	movs	r0, #1
    b6f0:	4905      	ldr	r1, [pc, #20]	; (b708 <usbdc_init+0x4c>)
    b6f2:	f000 fa4d 	bl	bb90 <usb_d_register_callback>

	return 0;
    b6f6:	2000      	movs	r0, #0
}
    b6f8:	bd38      	pop	{r3, r4, r5, pc}
    b6fa:	bf00      	nop
    b6fc:	0002d188 	.word	0x0002d188
    b700:	20001cd8 	.word	0x20001cd8
    b704:	0000b139 	.word	0x0000b139
    b708:	0000b5f9 	.word	0x0000b5f9

0000b70c <usbdc_register_function>:
 *
 * Must be invoked when USB device is stopped.
 */
void usbdc_register_function(struct usbdf_driver *func)
{
	list_insert_at_end(&usbdc.func_list, func);
    b70c:	4601      	mov	r1, r0
    b70e:	4801      	ldr	r0, [pc, #4]	; (b714 <usbdc_register_function+0x8>)
    b710:	f000 bc2c 	b.w	bf6c <list_insert_at_end>
    b714:	20001ce8 	.word	0x20001ce8

0000b718 <usbdc_start>:

/**
 * \brief Start the USB device driver with specific descriptors set
 */
int32_t usbdc_start(struct usbd_descriptors *desces)
{
    b718:	b510      	push	{r4, lr}
	if (usbdc.state >= USBD_S_POWER) {
    b71a:	4b0a      	ldr	r3, [pc, #40]	; (b744 <usbdc_start+0x2c>)
    b71c:	7e9c      	ldrb	r4, [r3, #26]
    b71e:	b954      	cbnz	r4, b736 <usbdc_start+0x1e>
		return ERR_BUSY;
	}

	if (desces) {
    b720:	b160      	cbz	r0, b73c <usbdc_start+0x24>
#endif
	} else {
		return ERR_BAD_DATA;
	}

	usbdc.ctrl_size = desces->sod[7];
    b722:	6802      	ldr	r2, [r0, #0]
		usbdc.desces.ls_fs = desces;
    b724:	6018      	str	r0, [r3, #0]
	usbdc.ctrl_size = desces->sod[7];
    b726:	79d2      	ldrb	r2, [r2, #7]
    b728:	771a      	strb	r2, [r3, #28]
	usbdc.state     = USBD_S_POWER;
    b72a:	2201      	movs	r2, #1
    b72c:	769a      	strb	r2, [r3, #26]
	usb_d_enable();
    b72e:	f000 fa31 	bl	bb94 <usb_d_enable>
	return ERR_NONE;
    b732:	4620      	mov	r0, r4
    b734:	bd10      	pop	{r4, pc}
		return ERR_BUSY;
    b736:	f06f 0003 	mvn.w	r0, #3
    b73a:	bd10      	pop	{r4, pc}
		return ERR_BAD_DATA;
    b73c:	f06f 0008 	mvn.w	r0, #8
}
    b740:	bd10      	pop	{r4, pc}
    b742:	bf00      	nop
    b744:	20001cd8 	.word	0x20001cd8

0000b748 <usbdc_attach>:
/**
 * \brief Attach the USB device to host
 */
void usbdc_attach(void)
{
	usb_d_attach();
    b748:	f000 ba26 	b.w	bb98 <usb_d_attach>

0000b74c <usbdc_get_ctrl_buffer>:
/**
 * \brief Return USB Device endpoint0 buffer
 */
uint8_t *usbdc_get_ctrl_buffer(void)
{
	return usbdc.ctrl_buf;
    b74c:	4b01      	ldr	r3, [pc, #4]	; (b754 <usbdc_get_ctrl_buffer+0x8>)
}
    b74e:	6958      	ldr	r0, [r3, #20]
    b750:	4770      	bx	lr
    b752:	bf00      	nop
    b754:	20001cd8 	.word	0x20001cd8

0000b758 <usbdc_get_state>:
/**
 * \brief Return current USB state
 */
uint8_t usbdc_get_state(void)
{
	if (usbdc.state & USBD_S_SUSPEND) {
    b758:	4b03      	ldr	r3, [pc, #12]	; (b768 <usbdc_get_state+0x10>)
    b75a:	7e98      	ldrb	r0, [r3, #26]
    b75c:	f010 0f10 	tst.w	r0, #16
		return USBD_S_SUSPEND;
	}
	return usbdc.state;
}
    b760:	bf18      	it	ne
    b762:	2010      	movne	r0, #16
    b764:	4770      	bx	lr
    b766:	bf00      	nop
    b768:	20001cd8 	.word	0x20001cd8

0000b76c <usb_find_desc>:

uint8_t *usb_find_desc(uint8_t *desc, uint8_t *eof, uint8_t type)
{
	_param_error_check(desc && eof && (desc < eof));

	while (desc < eof) {
    b76c:	4288      	cmp	r0, r1
    b76e:	d214      	bcs.n	b79a <usb_find_desc+0x2e>
    b770:	7803      	ldrb	r3, [r0, #0]
		_desc_len_check();
    b772:	2b01      	cmp	r3, #1
    b774:	d911      	bls.n	b79a <usb_find_desc+0x2e>
{
    b776:	b410      	push	{r4}
		if (type == usb_desc_type(desc)) {
    b778:	7844      	ldrb	r4, [r0, #1]
    b77a:	4294      	cmp	r4, r2
    b77c:	d106      	bne.n	b78c <usb_find_desc+0x20>
    b77e:	e009      	b.n	b794 <usb_find_desc+0x28>
    b780:	7803      	ldrb	r3, [r0, #0]
		_desc_len_check();
    b782:	2b01      	cmp	r3, #1
    b784:	d905      	bls.n	b792 <usb_find_desc+0x26>
	return desc[1];
    b786:	7844      	ldrb	r4, [r0, #1]
		if (type == usb_desc_type(desc)) {
    b788:	4294      	cmp	r4, r2
    b78a:	d003      	beq.n	b794 <usb_find_desc+0x28>
	return (desc + usb_desc_len(desc));
    b78c:	4418      	add	r0, r3
	while (desc < eof) {
    b78e:	4281      	cmp	r1, r0
    b790:	d8f6      	bhi.n	b780 <usb_find_desc+0x14>
			return desc;
		}
		desc = usb_desc_next(desc);
	}
	return NULL;
    b792:	2000      	movs	r0, #0
}
    b794:	f85d 4b04 	ldr.w	r4, [sp], #4
    b798:	4770      	bx	lr
	return NULL;
    b79a:	2000      	movs	r0, #0
    b79c:	4770      	bx	lr
    b79e:	bf00      	nop

0000b7a0 <usb_find_ep_desc>:

uint8_t *usb_find_ep_desc(uint8_t *desc, uint8_t *eof)
{
	_param_error_check(desc && eof && (desc < eof));

	while (desc < eof) {
    b7a0:	4288      	cmp	r0, r1
    b7a2:	d213      	bcs.n	b7cc <usb_find_ep_desc+0x2c>
    b7a4:	7803      	ldrb	r3, [r0, #0]
		_desc_len_check();
    b7a6:	2b01      	cmp	r3, #1
    b7a8:	d910      	bls.n	b7cc <usb_find_ep_desc+0x2c>
	return desc[1];
    b7aa:	7842      	ldrb	r2, [r0, #1]
		if (USB_DT_INTERFACE == usb_desc_type(desc)) {
    b7ac:	2a04      	cmp	r2, #4
    b7ae:	d00d      	beq.n	b7cc <usb_find_ep_desc+0x2c>
			break;
		}
		if (USB_DT_ENDPOINT == usb_desc_type(desc)) {
    b7b0:	2a05      	cmp	r2, #5
    b7b2:	d108      	bne.n	b7c6 <usb_find_ep_desc+0x26>
    b7b4:	e00c      	b.n	b7d0 <usb_find_ep_desc+0x30>
    b7b6:	7803      	ldrb	r3, [r0, #0]
		_desc_len_check();
    b7b8:	2b01      	cmp	r3, #1
    b7ba:	d907      	bls.n	b7cc <usb_find_ep_desc+0x2c>
    b7bc:	7842      	ldrb	r2, [r0, #1]
		if (USB_DT_INTERFACE == usb_desc_type(desc)) {
    b7be:	2a04      	cmp	r2, #4
    b7c0:	d004      	beq.n	b7cc <usb_find_ep_desc+0x2c>
		if (USB_DT_ENDPOINT == usb_desc_type(desc)) {
    b7c2:	2a05      	cmp	r2, #5
    b7c4:	d003      	beq.n	b7ce <usb_find_ep_desc+0x2e>
	return (desc + usb_desc_len(desc));
    b7c6:	4418      	add	r0, r3
	while (desc < eof) {
    b7c8:	4281      	cmp	r1, r0
    b7ca:	d8f4      	bhi.n	b7b6 <usb_find_ep_desc+0x16>
			return desc;
		}
		desc = usb_desc_next(desc);
	}
	return NULL;
    b7cc:	2000      	movs	r0, #0
}
    b7ce:	4770      	bx	lr
    b7d0:	4770      	bx	lr
    b7d2:	bf00      	nop

0000b7d4 <usb_find_cfg_desc>:
	while (desc < eof) {
    b7d4:	4288      	cmp	r0, r1
    b7d6:	d226      	bcs.n	b826 <usb_find_cfg_desc+0x52>
    b7d8:	7803      	ldrb	r3, [r0, #0]
		_desc_len_check();
    b7da:	2b01      	cmp	r3, #1
    b7dc:	d923      	bls.n	b826 <usb_find_cfg_desc+0x52>

uint8_t *usb_find_cfg_desc(uint8_t *desc, uint8_t *eof, uint8_t cfg_value)
{
    b7de:	b410      	push	{r4}
		if (type == usb_desc_type(desc)) {
    b7e0:	7844      	ldrb	r4, [r0, #1]
    b7e2:	2c02      	cmp	r4, #2
    b7e4:	d106      	bne.n	b7f4 <usb_find_cfg_desc+0x20>
    b7e6:	e012      	b.n	b80e <usb_find_cfg_desc+0x3a>
    b7e8:	7803      	ldrb	r3, [r0, #0]
		_desc_len_check();
    b7ea:	2b01      	cmp	r3, #1
    b7ec:	d905      	bls.n	b7fa <usb_find_cfg_desc+0x26>
	return desc[1];
    b7ee:	7844      	ldrb	r4, [r0, #1]
		if (type == usb_desc_type(desc)) {
    b7f0:	2c02      	cmp	r4, #2
    b7f2:	d00c      	beq.n	b80e <usb_find_cfg_desc+0x3a>
	return (desc + usb_desc_len(desc));
    b7f4:	4418      	add	r0, r3
	while (desc < eof) {
    b7f6:	4281      	cmp	r1, r0
    b7f8:	d8f6      	bhi.n	b7e8 <usb_find_cfg_desc+0x14>
	_param_error_check(desc && eof && (desc < eof));

	desc = usb_find_desc(desc, eof, USB_DT_CONFIG);
	if (!desc) {
		return NULL;
    b7fa:	2000      	movs	r0, #0
			return desc;
		}
		desc = usb_cfg_desc_next(desc);
	}
	return NULL;
}
    b7fc:	f85d 4b04 	ldr.w	r4, [sp], #4
    b800:	4770      	bx	lr
		_desc_len_check();
    b802:	7803      	ldrb	r3, [r0, #0]
    b804:	2b01      	cmp	r3, #1
    b806:	d9f8      	bls.n	b7fa <usb_find_cfg_desc+0x26>
		if (desc[1] != USB_DT_CONFIG) {
    b808:	7843      	ldrb	r3, [r0, #1]
    b80a:	2b02      	cmp	r3, #2
    b80c:	d1f5      	bne.n	b7fa <usb_find_cfg_desc+0x26>
		if (desc[5] == cfg_value) {
    b80e:	7943      	ldrb	r3, [r0, #5]
    b810:	4293      	cmp	r3, r2
    b812:	d0f3      	beq.n	b7fc <usb_find_cfg_desc+0x28>
	return (ptr[0] + (ptr[1] << 8));
    b814:	78c4      	ldrb	r4, [r0, #3]
    b816:	7883      	ldrb	r3, [r0, #2]
    b818:	eb03 2304 	add.w	r3, r3, r4, lsl #8
 *  \param[in] cfg_desc Byte pointer to the descriptor start address
 *  \return Byte pointer to descriptor after configuration end
 */
static inline uint8_t *usb_cfg_desc_next(uint8_t *cfg_desc)
{
	return (cfg_desc + usb_cfg_desc_total_len(cfg_desc));
    b81c:	fa10 f083 	uxtah	r0, r0, r3
	while (desc < eof) {
    b820:	4281      	cmp	r1, r0
    b822:	d8ee      	bhi.n	b802 <usb_find_cfg_desc+0x2e>
    b824:	e7e9      	b.n	b7fa <usb_find_cfg_desc+0x26>
		return NULL;
    b826:	2000      	movs	r0, #0
    b828:	4770      	bx	lr
    b82a:	bf00      	nop

0000b82c <usb_find_str_desc>:
{
	uint8_t i;

	_param_error_check(desc && eof && (desc < eof));

	for (i = 0; desc < eof;) {
    b82c:	4288      	cmp	r0, r1
    b82e:	d216      	bcs.n	b85e <usb_find_str_desc+0x32>
{
    b830:	b430      	push	{r4, r5}
	for (i = 0; desc < eof;) {
    b832:	2500      	movs	r5, #0
    b834:	e005      	b.n	b842 <usb_find_str_desc+0x16>
	return desc[1];
    b836:	7844      	ldrb	r4, [r0, #1]
		if (type == usb_desc_type(desc)) {
    b838:	2c03      	cmp	r4, #3
    b83a:	d008      	beq.n	b84e <usb_find_str_desc+0x22>
	return (desc + usb_desc_len(desc));
    b83c:	4418      	add	r0, r3
	while (desc < eof) {
    b83e:	4281      	cmp	r1, r0
    b840:	d902      	bls.n	b848 <usb_find_str_desc+0x1c>
    b842:	7803      	ldrb	r3, [r0, #0]
		_desc_len_check();
    b844:	2b01      	cmp	r3, #1
    b846:	d8f6      	bhi.n	b836 <usb_find_str_desc+0xa>
			desc = usb_desc_next(desc);
		} else {
			return NULL;
		}
	}
	return NULL;
    b848:	2000      	movs	r0, #0
}
    b84a:	bc30      	pop	{r4, r5}
    b84c:	4770      	bx	lr
			if (i == str_index) {
    b84e:	4295      	cmp	r5, r2
    b850:	d0fb      	beq.n	b84a <usb_find_str_desc+0x1e>
    b852:	4418      	add	r0, r3
	for (i = 0; desc < eof;) {
    b854:	4281      	cmp	r1, r0
    b856:	f105 0501 	add.w	r5, r5, #1
    b85a:	d8f2      	bhi.n	b842 <usb_find_str_desc+0x16>
    b85c:	e7f4      	b.n	b848 <usb_find_str_desc+0x1c>
	return NULL;
    b85e:	2000      	movs	r0, #0
    b860:	4770      	bx	lr
    b862:	bf00      	nop

0000b864 <usb_d_dummy_cb_false>:
{
	(void)unused0;
	(void)unused1;
	(void)unused2;
	return false;
}
    b864:	2000      	movs	r0, #0
    b866:	4770      	bx	lr

0000b868 <usb_d_cb_trans_more>:
 * \brief Callback invoked when request more data
 * \param[in] ep Endpoint number with transfer direction on bit 8.
 * \param[in] transfered Number of bytes transfered.
 */
static bool usb_d_cb_trans_more(const uint8_t ep, const uint32_t transfered)
{
    b868:	b5f0      	push	{r4, r5, r6, r7, lr}
    b86a:	4f0f      	ldr	r7, [pc, #60]	; (b8a8 <usb_d_cb_trans_more+0x40>)
		    && (ep & USB_EP_N_MASK) == usb_d_inst.ep[i].xfer.hdr.ep) {
    b86c:	f000 0e0f 	and.w	lr, r0, #15
    b870:	463a      	mov	r2, r7
{
    b872:	2300      	movs	r3, #0
		if (usb_d_inst.ep[i].xfer.hdr.ep == ep) {
    b874:	7854      	ldrb	r4, [r2, #1]
    b876:	42a0      	cmp	r0, r4
    b878:	461e      	mov	r6, r3
    b87a:	f103 0301 	add.w	r3, r3, #1
    b87e:	d008      	beq.n	b892 <usb_d_cb_trans_more+0x2a>
		if (usb_d_inst.ep[i].xfer.hdr.type == USB_EP_XTYPE_CTRL
    b880:	7815      	ldrb	r5, [r2, #0]
    b882:	3220      	adds	r2, #32
    b884:	b90d      	cbnz	r5, b88a <usb_d_cb_trans_more+0x22>
		    && (ep & USB_EP_N_MASK) == usb_d_inst.ep[i].xfer.hdr.ep) {
    b886:	4574      	cmp	r4, lr
    b888:	d003      	beq.n	b892 <usb_d_cb_trans_more+0x2a>
	for (i = 0; i < CONF_USB_D_NUM_EP_SP; i++) {
    b88a:	2b0d      	cmp	r3, #13
    b88c:	d1f2      	bne.n	b874 <usb_d_cb_trans_more+0xc>
    b88e:	f04f 36ff 	mov.w	r6, #4294967295
	int8_t           ep_index = _usb_d_find_ep(ep);
	struct usb_d_ep *ept      = &usb_d_inst.ep[ep_index];
	if (ept->xfer.hdr.state == USB_EP_S_X_DATA) {
    b892:	eb07 1646 	add.w	r6, r7, r6, lsl #5
    b896:	78b3      	ldrb	r3, [r6, #2]
    b898:	2b03      	cmp	r3, #3
    b89a:	d001      	beq.n	b8a0 <usb_d_cb_trans_more+0x38>
		return ept->callbacks.more(ep, transfered);
	}
	return false;
}
    b89c:	2000      	movs	r0, #0
    b89e:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return ept->callbacks.more(ep, transfered);
    b8a0:	69b3      	ldr	r3, [r6, #24]
}
    b8a2:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
		return ept->callbacks.more(ep, transfered);
    b8a6:	4718      	bx	r3
    b8a8:	20001cf8 	.word	0x20001cf8

0000b8ac <_usb_d_cb_trans_done>:

/**
 * Callback when USB transactions are finished.
 */
static void _usb_d_cb_trans_done(const uint8_t ep, const int32_t code, const uint32_t transferred)
{
    b8ac:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    b8b0:	f8df 9130 	ldr.w	r9, [pc, #304]	; b9e4 <_usb_d_cb_trans_done+0x138>
    b8b4:	4607      	mov	r7, r0
    b8b6:	4688      	mov	r8, r1
    b8b8:	b087      	sub	sp, #28
		    && (ep & USB_EP_N_MASK) == usb_d_inst.ep[i].xfer.hdr.ep) {
    b8ba:	f000 010f 	and.w	r1, r0, #15
{
    b8be:	2300      	movs	r3, #0
    b8c0:	4648      	mov	r0, r9
		if (usb_d_inst.ep[i].xfer.hdr.ep == ep) {
    b8c2:	7844      	ldrb	r4, [r0, #1]
    b8c4:	42a7      	cmp	r7, r4
    b8c6:	461e      	mov	r6, r3
    b8c8:	f103 0301 	add.w	r3, r3, #1
    b8cc:	d008      	beq.n	b8e0 <_usb_d_cb_trans_done+0x34>
		if (usb_d_inst.ep[i].xfer.hdr.type == USB_EP_XTYPE_CTRL
    b8ce:	7805      	ldrb	r5, [r0, #0]
    b8d0:	3020      	adds	r0, #32
    b8d2:	b90d      	cbnz	r5, b8d8 <_usb_d_cb_trans_done+0x2c>
		    && (ep & USB_EP_N_MASK) == usb_d_inst.ep[i].xfer.hdr.ep) {
    b8d4:	428c      	cmp	r4, r1
    b8d6:	d003      	beq.n	b8e0 <_usb_d_cb_trans_done+0x34>
	for (i = 0; i < CONF_USB_D_NUM_EP_SP; i++) {
    b8d8:	2b0d      	cmp	r3, #13
    b8da:	d1f2      	bne.n	b8c2 <_usb_d_cb_trans_done+0x16>
    b8dc:	f04f 36ff 	mov.w	r6, #4294967295
	int8_t           ep_index = _usb_d_find_ep(ep);
	struct usb_d_ep *ept      = &usb_d_inst.ep[ep_index];

	if (code == USB_TRANS_DONE) {
		ept->xfer.hdr.status = USB_XFER_DONE;
    b8e0:	0176      	lsls	r6, r6, #5
	if (code == USB_TRANS_DONE) {
    b8e2:	f1b8 0f00 	cmp.w	r8, #0
    b8e6:	d110      	bne.n	b90a <_usb_d_cb_trans_done+0x5e>
		ept->xfer.hdr.status = USB_XFER_DONE;
    b8e8:	eb09 0406 	add.w	r4, r9, r6
		if (ept->xfer.hdr.type == USB_EP_XTYPE_CTRL) {
    b8ec:	f819 3006 	ldrb.w	r3, [r9, r6]
		ept->xfer.hdr.status = USB_XFER_DONE;
    b8f0:	f884 8003 	strb.w	r8, [r4, #3]
		if (ept->xfer.hdr.type == USB_EP_XTYPE_CTRL) {
    b8f4:	b32b      	cbz	r3, b942 <_usb_d_cb_trans_done+0x96>
			usb_d_ctrl_trans_done(ept);
			return;
		}
		ept->xfer.hdr.state = USB_EP_S_IDLE;
    b8f6:	2301      	movs	r3, #1
    b8f8:	4641      	mov	r1, r8
    b8fa:	70a3      	strb	r3, [r4, #2]
	} else {
		ept->xfer.hdr.state  = USB_EP_S_ERROR;
		ept->xfer.hdr.status = USB_XFER_ERROR;
	}

	ept->callbacks.xfer(ep, (enum usb_xfer_code)ept->xfer.hdr.status, (void *)transferred);
    b8fc:	444e      	add	r6, r9
    b8fe:	4638      	mov	r0, r7
    b900:	69f3      	ldr	r3, [r6, #28]
    b902:	4798      	blx	r3
}
    b904:	b007      	add	sp, #28
    b906:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	} else if (code == USB_TRANS_STALL) {
    b90a:	f1b8 0f01 	cmp.w	r8, #1
    b90e:	d00b      	beq.n	b928 <_usb_d_cb_trans_done+0x7c>
	} else if (code == USB_TRANS_ABORT) {
    b910:	f1b8 0f02 	cmp.w	r8, #2
		ept->xfer.hdr.status = USB_XFER_ABORT;
    b914:	eb09 0306 	add.w	r3, r9, r6
	} else if (code == USB_TRANS_ABORT) {
    b918:	d025      	beq.n	b966 <_usb_d_cb_trans_done+0xba>
	} else if (code == USB_TRANS_RESET) {
    b91a:	f1b8 0f03 	cmp.w	r8, #3
    b91e:	d01d      	beq.n	b95c <_usb_d_cb_trans_done+0xb0>
		ept->xfer.hdr.state  = USB_EP_S_ERROR;
    b920:	2106      	movs	r1, #6
    b922:	7099      	strb	r1, [r3, #2]
		ept->xfer.hdr.status = USB_XFER_ERROR;
    b924:	70d9      	strb	r1, [r3, #3]
    b926:	e7e9      	b.n	b8fc <_usb_d_cb_trans_done+0x50>
		ept->xfer.hdr.status = USB_XFER_HALT;
    b928:	eb09 0406 	add.w	r4, r9, r6
		if (ept->xfer.hdr.type == USB_EP_XTYPE_CTRL) {
    b92c:	f819 1006 	ldrb.w	r1, [r9, r6]
		ept->xfer.hdr.status = USB_XFER_HALT;
    b930:	f04f 0802 	mov.w	r8, #2
    b934:	f884 8003 	strb.w	r8, [r4, #3]
		if (ept->xfer.hdr.type == USB_EP_XTYPE_CTRL) {
    b938:	b1e9      	cbz	r1, b976 <_usb_d_cb_trans_done+0xca>
			ept->xfer.hdr.state = USB_EP_S_HALTED;
    b93a:	2305      	movs	r3, #5
    b93c:	4641      	mov	r1, r8
    b93e:	70a3      	strb	r3, [r4, #2]
    b940:	e7dc      	b.n	b8fc <_usb_d_cb_trans_done+0x50>
	if (state == USB_EP_S_X_DATA) {
    b942:	78a3      	ldrb	r3, [r4, #2]
		bool err = ept->callbacks.xfer(ept->xfer.hdr.ep, USB_XFER_DATA, ept->xfer.req);
    b944:	360c      	adds	r6, #12
	if (state == USB_EP_S_X_DATA) {
    b946:	2b03      	cmp	r3, #3
		bool err = ept->callbacks.xfer(ept->xfer.hdr.ep, USB_XFER_DATA, ept->xfer.req);
    b948:	eb09 0206 	add.w	r2, r9, r6
	if (state == USB_EP_S_X_DATA) {
    b94c:	d01f      	beq.n	b98e <_usb_d_cb_trans_done+0xe2>
		ept->callbacks.xfer(ept->xfer.hdr.ep, USB_XFER_DONE, ept->xfer.req);
    b94e:	69e3      	ldr	r3, [r4, #28]
    b950:	7860      	ldrb	r0, [r4, #1]
    b952:	4641      	mov	r1, r8
    b954:	4798      	blx	r3
		ept->xfer.hdr.state = USB_EP_S_X_SETUP;
    b956:	2302      	movs	r3, #2
    b958:	70a3      	strb	r3, [r4, #2]
    b95a:	e7d3      	b.n	b904 <_usb_d_cb_trans_done+0x58>
		ept->xfer.hdr.state  = USB_EP_S_DISABLED;
    b95c:	2000      	movs	r0, #0
		ept->xfer.hdr.status = USB_XFER_RESET;
    b95e:	2105      	movs	r1, #5
		ept->xfer.hdr.state  = USB_EP_S_DISABLED;
    b960:	7098      	strb	r0, [r3, #2]
		ept->xfer.hdr.status = USB_XFER_RESET;
    b962:	70d9      	strb	r1, [r3, #3]
    b964:	e7ca      	b.n	b8fc <_usb_d_cb_trans_done+0x50>
		if (ept->xfer.hdr.type == USB_EP_XTYPE_CTRL) {
    b966:	f819 0006 	ldrb.w	r0, [r9, r6]
		ept->xfer.hdr.status = USB_XFER_ABORT;
    b96a:	2104      	movs	r1, #4
    b96c:	70d9      	strb	r1, [r3, #3]
		if (ept->xfer.hdr.type == USB_EP_XTYPE_CTRL) {
    b96e:	b158      	cbz	r0, b988 <_usb_d_cb_trans_done+0xdc>
		ept->xfer.hdr.state = USB_EP_S_IDLE;
    b970:	2001      	movs	r0, #1
    b972:	7098      	strb	r0, [r3, #2]
    b974:	e7c2      	b.n	b8fc <_usb_d_cb_trans_done+0x50>
			_usb_d_dev_ep_stall(ep, USB_EP_STALL_CLR);
    b976:	4638      	mov	r0, r7
			ept->xfer.hdr.state = USB_EP_S_X_SETUP;
    b978:	f884 8002 	strb.w	r8, [r4, #2]
    b97c:	9201      	str	r2, [sp, #4]
			_usb_d_dev_ep_stall(ep, USB_EP_STALL_CLR);
    b97e:	f007 fb43 	bl	13008 <_usb_d_dev_ep_stall>
    b982:	78e1      	ldrb	r1, [r4, #3]
    b984:	9a01      	ldr	r2, [sp, #4]
    b986:	e7b9      	b.n	b8fc <_usb_d_cb_trans_done+0x50>
			ept->xfer.hdr.state = USB_EP_S_X_SETUP;
    b988:	f883 8002 	strb.w	r8, [r3, #2]
			return;
    b98c:	e7ba      	b.n	b904 <_usb_d_cb_trans_done+0x58>
		bool err = ept->callbacks.xfer(ept->xfer.hdr.ep, USB_XFER_DATA, ept->xfer.req);
    b98e:	69e3      	ldr	r3, [r4, #28]
    b990:	7860      	ldrb	r0, [r4, #1]
    b992:	f994 500c 	ldrsb.w	r5, [r4, #12]
    b996:	2101      	movs	r1, #1
    b998:	4798      	blx	r3
		if (err) {
    b99a:	b160      	cbz	r0, b9b6 <_usb_d_cb_trans_done+0x10a>
			_usb_d_dev_ep_stall(req_dir ? ept->xfer.hdr.ep : (ept->xfer.hdr.ep | USB_EP_DIR), USB_EP_STALL_SET);
    b99c:	7860      	ldrb	r0, [r4, #1]
			ept->xfer.hdr.state  = USB_EP_S_HALTED;
    b99e:	2205      	movs	r2, #5
			ept->xfer.hdr.status = USB_XFER_HALT;
    b9a0:	2302      	movs	r3, #2
			_usb_d_dev_ep_stall(req_dir ? ept->xfer.hdr.ep : (ept->xfer.hdr.ep | USB_EP_DIR), USB_EP_STALL_SET);
    b9a2:	2d00      	cmp	r5, #0
			ept->xfer.hdr.state  = USB_EP_S_HALTED;
    b9a4:	70a2      	strb	r2, [r4, #2]
			ept->xfer.hdr.status = USB_XFER_HALT;
    b9a6:	70e3      	strb	r3, [r4, #3]
			_usb_d_dev_ep_stall(req_dir ? ept->xfer.hdr.ep : (ept->xfer.hdr.ep | USB_EP_DIR), USB_EP_STALL_SET);
    b9a8:	bfa8      	it	ge
    b9aa:	f040 0080 	orrge.w	r0, r0, #128	; 0x80
    b9ae:	2101      	movs	r1, #1
    b9b0:	f007 fb2a 	bl	13008 <_usb_d_dev_ep_stall>
    b9b4:	e7a6      	b.n	b904 <_usb_d_cb_trans_done+0x58>
			ept->xfer.hdr.state = USB_EP_S_X_STATUS;
    b9b6:	2304      	movs	r3, #4
    b9b8:	70a3      	strb	r3, [r4, #2]
			_usb_d_trans(ept->xfer.hdr.ep, !req_dir, NULL, 0, 1);
    b9ba:	7863      	ldrb	r3, [r4, #1]
	struct usb_d_transfer trans
    b9bc:	f8cd 800c 	str.w	r8, [sp, #12]
    b9c0:	2d00      	cmp	r5, #0
    b9c2:	bfac      	ite	ge
    b9c4:	f043 0380 	orrge.w	r3, r3, #128	; 0x80
    b9c8:	f003 030f 	andlt.w	r3, r3, #15
    b9cc:	2201      	movs	r2, #1
	return _usb_d_dev_ep_trans(&trans);
    b9ce:	a803      	add	r0, sp, #12
	struct usb_d_transfer trans
    b9d0:	f8cd 8010 	str.w	r8, [sp, #16]
    b9d4:	f88d 3014 	strb.w	r3, [sp, #20]
    b9d8:	f88d 2015 	strb.w	r2, [sp, #21]
	return _usb_d_dev_ep_trans(&trans);
    b9dc:	f007 fbd0 	bl	13180 <_usb_d_dev_ep_trans>
    b9e0:	e790      	b.n	b904 <_usb_d_cb_trans_done+0x58>
    b9e2:	bf00      	nop
    b9e4:	20001cf8 	.word	0x20001cf8

0000b9e8 <usb_d_cb_trans_setup>:
{
    b9e8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    b9ec:	4f26      	ldr	r7, [pc, #152]	; (ba88 <usb_d_cb_trans_setup+0xa0>)
    b9ee:	4604      	mov	r4, r0
		    && (ep & USB_EP_N_MASK) == usb_d_inst.ep[i].xfer.hdr.ep) {
    b9f0:	f000 060f 	and.w	r6, r0, #15
    b9f4:	463a      	mov	r2, r7
{
    b9f6:	2300      	movs	r3, #0
		if (usb_d_inst.ep[i].xfer.hdr.ep == ep) {
    b9f8:	7851      	ldrb	r1, [r2, #1]
    b9fa:	428c      	cmp	r4, r1
    b9fc:	461d      	mov	r5, r3
    b9fe:	f103 0301 	add.w	r3, r3, #1
    ba02:	d032      	beq.n	ba6a <usb_d_cb_trans_setup+0x82>
		if (usb_d_inst.ep[i].xfer.hdr.type == USB_EP_XTYPE_CTRL
    ba04:	7810      	ldrb	r0, [r2, #0]
    ba06:	3220      	adds	r2, #32
    ba08:	b908      	cbnz	r0, ba0e <usb_d_cb_trans_setup+0x26>
		    && (ep & USB_EP_N_MASK) == usb_d_inst.ep[i].xfer.hdr.ep) {
    ba0a:	42b1      	cmp	r1, r6
    ba0c:	d02d      	beq.n	ba6a <usb_d_cb_trans_setup+0x82>
	for (i = 0; i < CONF_USB_D_NUM_EP_SP; i++) {
    ba0e:	2b0d      	cmp	r3, #13
    ba10:	d1f2      	bne.n	b9f8 <usb_d_cb_trans_setup+0x10>
    ba12:	f06f 0613 	mvn.w	r6, #19
    ba16:	f04f 35ff 	mov.w	r5, #4294967295
	uint8_t *        req      = ept->xfer.req;
    ba1a:	443e      	add	r6, r7
	uint8_t n = _usb_d_dev_ep_read_req(ep, req);
    ba1c:	4631      	mov	r1, r6
    ba1e:	4620      	mov	r0, r4
    ba20:	f007 fb84 	bl	1312c <_usb_d_dev_ep_read_req>
	if (n != 8) {
    ba24:	b2c0      	uxtb	r0, r0
    ba26:	2808      	cmp	r0, #8
    ba28:	d00a      	beq.n	ba40 <usb_d_cb_trans_setup+0x58>
		_usb_d_dev_ep_stall(ep, USB_EP_STALL_SET);
    ba2a:	2101      	movs	r1, #1
    ba2c:	4620      	mov	r0, r4
    ba2e:	f007 faeb 	bl	13008 <_usb_d_dev_ep_stall>
		_usb_d_dev_ep_stall(ep | USB_EP_DIR, USB_EP_STALL_SET);
    ba32:	f044 0080 	orr.w	r0, r4, #128	; 0x80
    ba36:	2101      	movs	r1, #1
}
    ba38:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		_usb_d_dev_ep_stall(ep | USB_EP_DIR, USB_EP_STALL_SET);
    ba3c:	f007 bae4 	b.w	13008 <_usb_d_dev_ep_stall>
	ept->xfer.hdr.state = USB_EP_S_IDLE;
    ba40:	eb07 1545 	add.w	r5, r7, r5, lsl #5
	_usb_d_dev_ep_stall(ep, USB_EP_STALL_CLR);
    ba44:	2100      	movs	r1, #0
    ba46:	4620      	mov	r0, r4
	_usb_d_dev_ep_stall(ep | USB_EP_DIR, USB_EP_STALL_CLR);
    ba48:	f044 0880 	orr.w	r8, r4, #128	; 0x80
	_usb_d_dev_ep_stall(ep, USB_EP_STALL_CLR);
    ba4c:	f007 fadc 	bl	13008 <_usb_d_dev_ep_stall>
	ept->xfer.hdr.state = USB_EP_S_IDLE;
    ba50:	2701      	movs	r7, #1
	_usb_d_dev_ep_stall(ep | USB_EP_DIR, USB_EP_STALL_CLR);
    ba52:	2100      	movs	r1, #0
    ba54:	4640      	mov	r0, r8
    ba56:	f007 fad7 	bl	13008 <_usb_d_dev_ep_stall>
	if (!ept->callbacks.req(ep, req)) {
    ba5a:	4631      	mov	r1, r6
	ept->xfer.hdr.state = USB_EP_S_IDLE;
    ba5c:	70af      	strb	r7, [r5, #2]
	if (!ept->callbacks.req(ep, req)) {
    ba5e:	696b      	ldr	r3, [r5, #20]
    ba60:	4620      	mov	r0, r4
    ba62:	4798      	blx	r3
    ba64:	b120      	cbz	r0, ba70 <usb_d_cb_trans_setup+0x88>
    ba66:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    ba6a:	016e      	lsls	r6, r5, #5
    ba6c:	360c      	adds	r6, #12
    ba6e:	e7d4      	b.n	ba1a <usb_d_cb_trans_setup+0x32>
		ept->xfer.hdr.state = USB_EP_S_HALTED;
    ba70:	2305      	movs	r3, #5
		_usb_d_dev_ep_stall(ep, USB_EP_STALL_SET);
    ba72:	4639      	mov	r1, r7
    ba74:	4620      	mov	r0, r4
		ept->xfer.hdr.state = USB_EP_S_HALTED;
    ba76:	70ab      	strb	r3, [r5, #2]
		_usb_d_dev_ep_stall(ep, USB_EP_STALL_SET);
    ba78:	f007 fac6 	bl	13008 <_usb_d_dev_ep_stall>
		_usb_d_dev_ep_stall(ep | USB_EP_DIR, USB_EP_STALL_SET);
    ba7c:	4639      	mov	r1, r7
    ba7e:	4640      	mov	r0, r8
}
    ba80:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		_usb_d_dev_ep_stall(ep | USB_EP_DIR, USB_EP_STALL_SET);
    ba84:	f007 bac0 	b.w	13008 <_usb_d_dev_ep_stall>
    ba88:	20001cf8 	.word	0x20001cf8

0000ba8c <usb_d_init>:

int32_t usb_d_init(void)
{
    ba8c:	b510      	push	{r4, lr}
	int32_t rc = _usb_d_dev_init();
    ba8e:	f006 ffb7 	bl	12a00 <_usb_d_dev_init>
	uint8_t i;
	if (rc < 0) {
    ba92:	2800      	cmp	r0, #0
    ba94:	db70      	blt.n	bb78 <usb_d_init+0xec>
		return rc;
	}
	memset(usb_d_inst.ep, 0x00, sizeof(struct usb_d_ep) * CONF_USB_D_NUM_EP_SP);
    ba96:	4c39      	ldr	r4, [pc, #228]	; (bb7c <usb_d_init+0xf0>)
    ba98:	f44f 72d0 	mov.w	r2, #416	; 0x1a0
    ba9c:	2100      	movs	r1, #0
    ba9e:	4620      	mov	r0, r4
    baa0:	f01c f9dc 	bl	27e5c <memset>
	for (i = 0; i < CONF_USB_D_NUM_EP_SP; i++) {
		usb_d_inst.ep[i].xfer.hdr.ep    = 0xFF;
		usb_d_inst.ep[i].callbacks.req  = (usb_d_ep_cb_setup_t)usb_d_dummy_cb_false;
    baa4:	4b36      	ldr	r3, [pc, #216]	; (bb80 <usb_d_init+0xf4>)
		usb_d_inst.ep[i].callbacks.more = (usb_d_ep_cb_more_t)usb_d_dummy_cb_false;
		usb_d_inst.ep[i].callbacks.xfer = (usb_d_ep_cb_xfer_t)usb_d_dummy_cb_false;
	}
	/* Handles device driver endpoint callbacks to build transfer. */
	_usb_d_dev_register_ep_callback(USB_D_DEV_EP_CB_SETUP, (FUNC_PTR)usb_d_cb_trans_setup);
    baa6:	4937      	ldr	r1, [pc, #220]	; (bb84 <usb_d_init+0xf8>)
		usb_d_inst.ep[i].callbacks.req  = (usb_d_ep_cb_setup_t)usb_d_dummy_cb_false;
    baa8:	6163      	str	r3, [r4, #20]
		usb_d_inst.ep[i].xfer.hdr.ep    = 0xFF;
    baaa:	22ff      	movs	r2, #255	; 0xff
    baac:	7062      	strb	r2, [r4, #1]
    baae:	f884 2021 	strb.w	r2, [r4, #33]	; 0x21
    bab2:	f884 2041 	strb.w	r2, [r4, #65]	; 0x41
    bab6:	f884 2061 	strb.w	r2, [r4, #97]	; 0x61
    baba:	f884 2081 	strb.w	r2, [r4, #129]	; 0x81
    babe:	f884 20a1 	strb.w	r2, [r4, #161]	; 0xa1
    bac2:	f884 20c1 	strb.w	r2, [r4, #193]	; 0xc1
    bac6:	f884 20e1 	strb.w	r2, [r4, #225]	; 0xe1
	_usb_d_dev_register_ep_callback(USB_D_DEV_EP_CB_SETUP, (FUNC_PTR)usb_d_cb_trans_setup);
    baca:	2000      	movs	r0, #0
		usb_d_inst.ep[i].callbacks.more = (usb_d_ep_cb_more_t)usb_d_dummy_cb_false;
    bacc:	61a3      	str	r3, [r4, #24]
		usb_d_inst.ep[i].callbacks.xfer = (usb_d_ep_cb_xfer_t)usb_d_dummy_cb_false;
    bace:	61e3      	str	r3, [r4, #28]
		usb_d_inst.ep[i].callbacks.req  = (usb_d_ep_cb_setup_t)usb_d_dummy_cb_false;
    bad0:	6363      	str	r3, [r4, #52]	; 0x34
		usb_d_inst.ep[i].callbacks.more = (usb_d_ep_cb_more_t)usb_d_dummy_cb_false;
    bad2:	63a3      	str	r3, [r4, #56]	; 0x38
		usb_d_inst.ep[i].callbacks.xfer = (usb_d_ep_cb_xfer_t)usb_d_dummy_cb_false;
    bad4:	63e3      	str	r3, [r4, #60]	; 0x3c
		usb_d_inst.ep[i].callbacks.req  = (usb_d_ep_cb_setup_t)usb_d_dummy_cb_false;
    bad6:	6563      	str	r3, [r4, #84]	; 0x54
		usb_d_inst.ep[i].callbacks.more = (usb_d_ep_cb_more_t)usb_d_dummy_cb_false;
    bad8:	65a3      	str	r3, [r4, #88]	; 0x58
		usb_d_inst.ep[i].callbacks.xfer = (usb_d_ep_cb_xfer_t)usb_d_dummy_cb_false;
    bada:	65e3      	str	r3, [r4, #92]	; 0x5c
		usb_d_inst.ep[i].callbacks.req  = (usb_d_ep_cb_setup_t)usb_d_dummy_cb_false;
    badc:	6763      	str	r3, [r4, #116]	; 0x74
		usb_d_inst.ep[i].callbacks.more = (usb_d_ep_cb_more_t)usb_d_dummy_cb_false;
    bade:	67a3      	str	r3, [r4, #120]	; 0x78
		usb_d_inst.ep[i].callbacks.xfer = (usb_d_ep_cb_xfer_t)usb_d_dummy_cb_false;
    bae0:	67e3      	str	r3, [r4, #124]	; 0x7c
		usb_d_inst.ep[i].callbacks.req  = (usb_d_ep_cb_setup_t)usb_d_dummy_cb_false;
    bae2:	f8c4 3094 	str.w	r3, [r4, #148]	; 0x94
		usb_d_inst.ep[i].callbacks.more = (usb_d_ep_cb_more_t)usb_d_dummy_cb_false;
    bae6:	f8c4 3098 	str.w	r3, [r4, #152]	; 0x98
		usb_d_inst.ep[i].callbacks.xfer = (usb_d_ep_cb_xfer_t)usb_d_dummy_cb_false;
    baea:	f8c4 309c 	str.w	r3, [r4, #156]	; 0x9c
		usb_d_inst.ep[i].callbacks.req  = (usb_d_ep_cb_setup_t)usb_d_dummy_cb_false;
    baee:	f8c4 30b4 	str.w	r3, [r4, #180]	; 0xb4
		usb_d_inst.ep[i].callbacks.more = (usb_d_ep_cb_more_t)usb_d_dummy_cb_false;
    baf2:	f8c4 30b8 	str.w	r3, [r4, #184]	; 0xb8
		usb_d_inst.ep[i].callbacks.xfer = (usb_d_ep_cb_xfer_t)usb_d_dummy_cb_false;
    baf6:	f8c4 30bc 	str.w	r3, [r4, #188]	; 0xbc
		usb_d_inst.ep[i].callbacks.req  = (usb_d_ep_cb_setup_t)usb_d_dummy_cb_false;
    bafa:	f8c4 30d4 	str.w	r3, [r4, #212]	; 0xd4
		usb_d_inst.ep[i].callbacks.more = (usb_d_ep_cb_more_t)usb_d_dummy_cb_false;
    bafe:	f8c4 30d8 	str.w	r3, [r4, #216]	; 0xd8
		usb_d_inst.ep[i].callbacks.xfer = (usb_d_ep_cb_xfer_t)usb_d_dummy_cb_false;
    bb02:	f8c4 30dc 	str.w	r3, [r4, #220]	; 0xdc
		usb_d_inst.ep[i].callbacks.req  = (usb_d_ep_cb_setup_t)usb_d_dummy_cb_false;
    bb06:	f8c4 30f4 	str.w	r3, [r4, #244]	; 0xf4
		usb_d_inst.ep[i].callbacks.more = (usb_d_ep_cb_more_t)usb_d_dummy_cb_false;
    bb0a:	f8c4 30f8 	str.w	r3, [r4, #248]	; 0xf8
		usb_d_inst.ep[i].callbacks.xfer = (usb_d_ep_cb_xfer_t)usb_d_dummy_cb_false;
    bb0e:	f8c4 30fc 	str.w	r3, [r4, #252]	; 0xfc
		usb_d_inst.ep[i].xfer.hdr.ep    = 0xFF;
    bb12:	f884 2101 	strb.w	r2, [r4, #257]	; 0x101
    bb16:	f884 2121 	strb.w	r2, [r4, #289]	; 0x121
    bb1a:	f884 2141 	strb.w	r2, [r4, #321]	; 0x141
    bb1e:	f884 2161 	strb.w	r2, [r4, #353]	; 0x161
    bb22:	f884 2181 	strb.w	r2, [r4, #385]	; 0x181
		usb_d_inst.ep[i].callbacks.req  = (usb_d_ep_cb_setup_t)usb_d_dummy_cb_false;
    bb26:	f8c4 3114 	str.w	r3, [r4, #276]	; 0x114
		usb_d_inst.ep[i].callbacks.more = (usb_d_ep_cb_more_t)usb_d_dummy_cb_false;
    bb2a:	f8c4 3118 	str.w	r3, [r4, #280]	; 0x118
		usb_d_inst.ep[i].callbacks.xfer = (usb_d_ep_cb_xfer_t)usb_d_dummy_cb_false;
    bb2e:	f8c4 311c 	str.w	r3, [r4, #284]	; 0x11c
		usb_d_inst.ep[i].callbacks.req  = (usb_d_ep_cb_setup_t)usb_d_dummy_cb_false;
    bb32:	f8c4 3134 	str.w	r3, [r4, #308]	; 0x134
		usb_d_inst.ep[i].callbacks.more = (usb_d_ep_cb_more_t)usb_d_dummy_cb_false;
    bb36:	f8c4 3138 	str.w	r3, [r4, #312]	; 0x138
		usb_d_inst.ep[i].callbacks.xfer = (usb_d_ep_cb_xfer_t)usb_d_dummy_cb_false;
    bb3a:	f8c4 313c 	str.w	r3, [r4, #316]	; 0x13c
		usb_d_inst.ep[i].callbacks.req  = (usb_d_ep_cb_setup_t)usb_d_dummy_cb_false;
    bb3e:	f8c4 3154 	str.w	r3, [r4, #340]	; 0x154
		usb_d_inst.ep[i].callbacks.more = (usb_d_ep_cb_more_t)usb_d_dummy_cb_false;
    bb42:	f8c4 3158 	str.w	r3, [r4, #344]	; 0x158
		usb_d_inst.ep[i].callbacks.xfer = (usb_d_ep_cb_xfer_t)usb_d_dummy_cb_false;
    bb46:	f8c4 315c 	str.w	r3, [r4, #348]	; 0x15c
		usb_d_inst.ep[i].callbacks.req  = (usb_d_ep_cb_setup_t)usb_d_dummy_cb_false;
    bb4a:	f8c4 3174 	str.w	r3, [r4, #372]	; 0x174
		usb_d_inst.ep[i].callbacks.more = (usb_d_ep_cb_more_t)usb_d_dummy_cb_false;
    bb4e:	f8c4 3178 	str.w	r3, [r4, #376]	; 0x178
		usb_d_inst.ep[i].callbacks.xfer = (usb_d_ep_cb_xfer_t)usb_d_dummy_cb_false;
    bb52:	f8c4 317c 	str.w	r3, [r4, #380]	; 0x17c
		usb_d_inst.ep[i].callbacks.req  = (usb_d_ep_cb_setup_t)usb_d_dummy_cb_false;
    bb56:	f8c4 3194 	str.w	r3, [r4, #404]	; 0x194
		usb_d_inst.ep[i].callbacks.more = (usb_d_ep_cb_more_t)usb_d_dummy_cb_false;
    bb5a:	f8c4 3198 	str.w	r3, [r4, #408]	; 0x198
		usb_d_inst.ep[i].callbacks.xfer = (usb_d_ep_cb_xfer_t)usb_d_dummy_cb_false;
    bb5e:	f8c4 319c 	str.w	r3, [r4, #412]	; 0x19c
	_usb_d_dev_register_ep_callback(USB_D_DEV_EP_CB_SETUP, (FUNC_PTR)usb_d_cb_trans_setup);
    bb62:	f007 fc45 	bl	133f0 <_usb_d_dev_register_ep_callback>
	_usb_d_dev_register_ep_callback(USB_D_DEV_EP_CB_MORE, (FUNC_PTR)usb_d_cb_trans_more);
    bb66:	4908      	ldr	r1, [pc, #32]	; (bb88 <usb_d_init+0xfc>)
    bb68:	2001      	movs	r0, #1
    bb6a:	f007 fc41 	bl	133f0 <_usb_d_dev_register_ep_callback>
	_usb_d_dev_register_ep_callback(USB_D_DEV_EP_CB_DONE, (FUNC_PTR)_usb_d_cb_trans_done);
    bb6e:	2002      	movs	r0, #2
    bb70:	4906      	ldr	r1, [pc, #24]	; (bb8c <usb_d_init+0x100>)
    bb72:	f007 fc3d 	bl	133f0 <_usb_d_dev_register_ep_callback>
	return ERR_NONE;
    bb76:	2000      	movs	r0, #0
}
    bb78:	bd10      	pop	{r4, pc}
    bb7a:	bf00      	nop
    bb7c:	20001cf8 	.word	0x20001cf8
    bb80:	0000b865 	.word	0x0000b865
    bb84:	0000b9e9 	.word	0x0000b9e9
    bb88:	0000b869 	.word	0x0000b869
    bb8c:	0000b8ad 	.word	0x0000b8ad

0000bb90 <usb_d_register_callback>:
}

void usb_d_register_callback(const enum usb_d_cb_type type, const FUNC_PTR func)
{
	/* Directly uses device driver callback. */
	_usb_d_dev_register_callback(type, func);
    bb90:	f007 bc1c 	b.w	133cc <_usb_d_dev_register_callback>

0000bb94 <usb_d_enable>:
}

int32_t usb_d_enable(void)
{
	return _usb_d_dev_enable();
    bb94:	f006 bfd4 	b.w	12b40 <_usb_d_dev_enable>

0000bb98 <usb_d_attach>:
	_usb_d_dev_disable();
}

void usb_d_attach(void)
{
	_usb_d_dev_attach();
    bb98:	f007 b802 	b.w	12ba0 <_usb_d_dev_attach>

0000bb9c <usb_d_set_address>:
	return _usb_d_dev_get_uframe_n();
}

void usb_d_set_address(const uint8_t addr)
{
	_usb_d_dev_set_address(addr);
    bb9c:	f007 b80a 	b.w	12bb4 <_usb_d_dev_set_address>

0000bba0 <usb_d_ep0_init>:
{
	_usb_d_dev_send_remotewakeup();
}

int32_t usb_d_ep0_init(const uint8_t max_pkt_size)
{
    bba0:	b570      	push	{r4, r5, r6, lr}
		if (usb_d_inst.ep[i].xfer.hdr.ep == ep) {
    bba2:	4e25      	ldr	r6, [pc, #148]	; (bc38 <usb_d_ep0_init+0x98>)
    bba4:	7873      	ldrb	r3, [r6, #1]
    bba6:	2b00      	cmp	r3, #0
    bba8:	d043      	beq.n	bc32 <usb_d_ep0_init+0x92>
    bbaa:	f896 3021 	ldrb.w	r3, [r6, #33]	; 0x21
    bbae:	2b00      	cmp	r3, #0
    bbb0:	d03f      	beq.n	bc32 <usb_d_ep0_init+0x92>
    bbb2:	f896 3041 	ldrb.w	r3, [r6, #65]	; 0x41
    bbb6:	2b00      	cmp	r3, #0
    bbb8:	d03b      	beq.n	bc32 <usb_d_ep0_init+0x92>
    bbba:	f896 3061 	ldrb.w	r3, [r6, #97]	; 0x61
    bbbe:	b3c3      	cbz	r3, bc32 <usb_d_ep0_init+0x92>
    bbc0:	f896 3081 	ldrb.w	r3, [r6, #129]	; 0x81
    bbc4:	b3ab      	cbz	r3, bc32 <usb_d_ep0_init+0x92>
    bbc6:	f896 30a1 	ldrb.w	r3, [r6, #161]	; 0xa1
    bbca:	b393      	cbz	r3, bc32 <usb_d_ep0_init+0x92>
    bbcc:	f896 30c1 	ldrb.w	r3, [r6, #193]	; 0xc1
    bbd0:	b37b      	cbz	r3, bc32 <usb_d_ep0_init+0x92>
    bbd2:	f896 30e1 	ldrb.w	r3, [r6, #225]	; 0xe1
    bbd6:	b363      	cbz	r3, bc32 <usb_d_ep0_init+0x92>
    bbd8:	f896 3101 	ldrb.w	r3, [r6, #257]	; 0x101
    bbdc:	b34b      	cbz	r3, bc32 <usb_d_ep0_init+0x92>
    bbde:	f896 3121 	ldrb.w	r3, [r6, #289]	; 0x121
    bbe2:	b333      	cbz	r3, bc32 <usb_d_ep0_init+0x92>
    bbe4:	f896 3141 	ldrb.w	r3, [r6, #321]	; 0x141
    bbe8:	b31b      	cbz	r3, bc32 <usb_d_ep0_init+0x92>
    bbea:	f896 3161 	ldrb.w	r3, [r6, #353]	; 0x161
    bbee:	b303      	cbz	r3, bc32 <usb_d_ep0_init+0x92>
    bbf0:	f896 3181 	ldrb.w	r3, [r6, #385]	; 0x181
    bbf4:	b1eb      	cbz	r3, bc32 <usb_d_ep0_init+0x92>
    bbf6:	4633      	mov	r3, r6
    bbf8:	2400      	movs	r4, #0
    bbfa:	7859      	ldrb	r1, [r3, #1]
    bbfc:	29ff      	cmp	r1, #255	; 0xff
    bbfe:	d00a      	beq.n	bc16 <usb_d_ep0_init+0x76>
		if (usb_d_inst.ep[i].xfer.hdr.type == USB_EP_XTYPE_CTRL
    bc00:	781d      	ldrb	r5, [r3, #0]
    bc02:	3320      	adds	r3, #32
    bc04:	b90d      	cbnz	r5, bc0a <usb_d_ep0_init+0x6a>
		    && (ep & USB_EP_N_MASK) == usb_d_inst.ep[i].xfer.hdr.ep) {
    bc06:	290f      	cmp	r1, #15
    bc08:	d005      	beq.n	bc16 <usb_d_ep0_init+0x76>
    bc0a:	3401      	adds	r4, #1
	for (i = 0; i < CONF_USB_D_NUM_EP_SP; i++) {
    bc0c:	2c0d      	cmp	r4, #13
    bc0e:	d1f4      	bne.n	bbfa <usb_d_ep0_init+0x5a>
	if (ep_index >= 0) {
		return -USB_ERR_REDO;
	} else {
		ep_index = _usb_d_find_ep(0xFF);
		if (ep_index < 0) {
			return -USB_ERR_ALLOC_FAIL;
    bc10:	f06f 0014 	mvn.w	r0, #20
    bc14:	bd70      	pop	{r4, r5, r6, pc}
		}
		ept = &usb_d_inst.ep[ep_index];
	}
	rc = _usb_d_dev_ep_init(ep, attr, max_pkt_size);
    bc16:	2100      	movs	r1, #0
    bc18:	4602      	mov	r2, r0
    bc1a:	4608      	mov	r0, r1
    bc1c:	f006 ffd0 	bl	12bc0 <_usb_d_dev_ep_init>
	if (rc < 0) {
    bc20:	2800      	cmp	r0, #0
    bc22:	db05      	blt.n	bc30 <usb_d_ep0_init+0x90>
		return rc;
	}
	ept->xfer.hdr.ep   = ep;
    bc24:	0164      	lsls	r4, r4, #5
    bc26:	1933      	adds	r3, r6, r4
    bc28:	2000      	movs	r0, #0
    bc2a:	7058      	strb	r0, [r3, #1]
	ept->xfer.hdr.type = attr & USB_EP_XTYPE_MASK;
    bc2c:	5530      	strb	r0, [r6, r4]
    bc2e:	bd70      	pop	{r4, r5, r6, pc}
}
    bc30:	bd70      	pop	{r4, r5, r6, pc}
		return -USB_ERR_REDO;
    bc32:	f06f 0013 	mvn.w	r0, #19
	return usb_d_ep_init(0, USB_EP_XTYPE_CTRL, max_pkt_size);
    bc36:	bd70      	pop	{r4, r5, r6, pc}
    bc38:	20001cf8 	.word	0x20001cf8

0000bc3c <usb_d_ep_init>:
{
    bc3c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    bc3e:	4c19      	ldr	r4, [pc, #100]	; (bca4 <usb_d_ep_init+0x68>)
		    && (ep & USB_EP_N_MASK) == usb_d_inst.ep[i].xfer.hdr.ep) {
    bc40:	f000 0c0f 	and.w	ip, r0, #15
    bc44:	f504 7ed0 	add.w	lr, r4, #416	; 0x1a0
{
    bc48:	4627      	mov	r7, r4
    bc4a:	4623      	mov	r3, r4
		if (usb_d_inst.ep[i].xfer.hdr.ep == ep) {
    bc4c:	785d      	ldrb	r5, [r3, #1]
    bc4e:	42a8      	cmp	r0, r5
    bc50:	d024      	beq.n	bc9c <usb_d_ep_init+0x60>
		if (usb_d_inst.ep[i].xfer.hdr.type == USB_EP_XTYPE_CTRL
    bc52:	781e      	ldrb	r6, [r3, #0]
    bc54:	3320      	adds	r3, #32
    bc56:	b90e      	cbnz	r6, bc5c <usb_d_ep_init+0x20>
		    && (ep & USB_EP_N_MASK) == usb_d_inst.ep[i].xfer.hdr.ep) {
    bc58:	4565      	cmp	r5, ip
    bc5a:	d01f      	beq.n	bc9c <usb_d_ep_init+0x60>
	for (i = 0; i < CONF_USB_D_NUM_EP_SP; i++) {
    bc5c:	459e      	cmp	lr, r3
    bc5e:	d1f5      	bne.n	bc4c <usb_d_ep_init+0x10>
    bc60:	2500      	movs	r5, #0
		if (usb_d_inst.ep[i].xfer.hdr.ep == ep) {
    bc62:	7863      	ldrb	r3, [r4, #1]
    bc64:	2bff      	cmp	r3, #255	; 0xff
    bc66:	d00a      	beq.n	bc7e <usb_d_ep_init+0x42>
		if (usb_d_inst.ep[i].xfer.hdr.type == USB_EP_XTYPE_CTRL
    bc68:	7826      	ldrb	r6, [r4, #0]
    bc6a:	3420      	adds	r4, #32
    bc6c:	b90e      	cbnz	r6, bc72 <usb_d_ep_init+0x36>
		    && (ep & USB_EP_N_MASK) == usb_d_inst.ep[i].xfer.hdr.ep) {
    bc6e:	2b0f      	cmp	r3, #15
    bc70:	d005      	beq.n	bc7e <usb_d_ep_init+0x42>
    bc72:	3501      	adds	r5, #1
	for (i = 0; i < CONF_USB_D_NUM_EP_SP; i++) {
    bc74:	2d0d      	cmp	r5, #13
    bc76:	d1f4      	bne.n	bc62 <usb_d_ep_init+0x26>
			return -USB_ERR_ALLOC_FAIL;
    bc78:	f06f 0014 	mvn.w	r0, #20
    bc7c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    bc7e:	460e      	mov	r6, r1
    bc80:	4604      	mov	r4, r0
	rc = _usb_d_dev_ep_init(ep, attr, max_pkt_size);
    bc82:	f006 ff9d 	bl	12bc0 <_usb_d_dev_ep_init>
	if (rc < 0) {
    bc86:	2800      	cmp	r0, #0
    bc88:	db07      	blt.n	bc9a <usb_d_ep_init+0x5e>
	ept->xfer.hdr.ep   = ep;
    bc8a:	016d      	lsls	r5, r5, #5
    bc8c:	197b      	adds	r3, r7, r5
	ept->xfer.hdr.type = attr & USB_EP_XTYPE_MASK;
    bc8e:	f006 0603 	and.w	r6, r6, #3
    bc92:	557e      	strb	r6, [r7, r5]
	ept->xfer.hdr.ep   = ep;
    bc94:	705c      	strb	r4, [r3, #1]
	return ERR_NONE;
    bc96:	2000      	movs	r0, #0
    bc98:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
}
    bc9a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		return -USB_ERR_REDO;
    bc9c:	f06f 0013 	mvn.w	r0, #19
    bca0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    bca2:	bf00      	nop
    bca4:	20001cf8 	.word	0x20001cf8

0000bca8 <usb_d_ep_deinit>:

void usb_d_ep_deinit(const uint8_t ep)
{
    bca8:	b570      	push	{r4, r5, r6, lr}
    bcaa:	4e0c      	ldr	r6, [pc, #48]	; (bcdc <usb_d_ep_deinit+0x34>)
		    && (ep & USB_EP_N_MASK) == usb_d_inst.ep[i].xfer.hdr.ep) {
    bcac:	f000 050f 	and.w	r5, r0, #15
    bcb0:	4633      	mov	r3, r6
{
    bcb2:	2400      	movs	r4, #0
		if (usb_d_inst.ep[i].xfer.hdr.ep == ep) {
    bcb4:	785a      	ldrb	r2, [r3, #1]
    bcb6:	4290      	cmp	r0, r2
    bcb8:	d008      	beq.n	bccc <usb_d_ep_deinit+0x24>
		if (usb_d_inst.ep[i].xfer.hdr.type == USB_EP_XTYPE_CTRL
    bcba:	7819      	ldrb	r1, [r3, #0]
    bcbc:	3320      	adds	r3, #32
    bcbe:	b909      	cbnz	r1, bcc4 <usb_d_ep_deinit+0x1c>
		    && (ep & USB_EP_N_MASK) == usb_d_inst.ep[i].xfer.hdr.ep) {
    bcc0:	42aa      	cmp	r2, r5
    bcc2:	d003      	beq.n	bccc <usb_d_ep_deinit+0x24>
    bcc4:	3401      	adds	r4, #1
	for (i = 0; i < CONF_USB_D_NUM_EP_SP; i++) {
    bcc6:	2c0d      	cmp	r4, #13
    bcc8:	d1f4      	bne.n	bcb4 <usb_d_ep_deinit+0xc>
    bcca:	bd70      	pop	{r4, r5, r6, pc}
	struct usb_d_ep *ept      = &usb_d_inst.ep[ep_index];
	if (ep_index < 0) {
		return;
	}
	_usb_d_dev_ep_deinit(ep);
	ept->xfer.hdr.ep = 0xFF;
    bccc:	eb06 1444 	add.w	r4, r6, r4, lsl #5
	_usb_d_dev_ep_deinit(ep);
    bcd0:	f006 ffe8 	bl	12ca4 <_usb_d_dev_ep_deinit>
	ept->xfer.hdr.ep = 0xFF;
    bcd4:	23ff      	movs	r3, #255	; 0xff
    bcd6:	7063      	strb	r3, [r4, #1]
    bcd8:	bd70      	pop	{r4, r5, r6, pc}
    bcda:	bf00      	nop
    bcdc:	20001cf8 	.word	0x20001cf8

0000bce0 <usb_d_ep_enable>:
}

int32_t usb_d_ep_enable(const uint8_t ep)
{
    bce0:	b570      	push	{r4, r5, r6, lr}
    bce2:	4d13      	ldr	r5, [pc, #76]	; (bd30 <usb_d_ep_enable+0x50>)
		    && (ep & USB_EP_N_MASK) == usb_d_inst.ep[i].xfer.hdr.ep) {
    bce4:	f000 060f 	and.w	r6, r0, #15
    bce8:	462b      	mov	r3, r5
{
    bcea:	2200      	movs	r2, #0
		if (usb_d_inst.ep[i].xfer.hdr.ep == ep) {
    bcec:	7859      	ldrb	r1, [r3, #1]
    bcee:	4288      	cmp	r0, r1
    bcf0:	d00a      	beq.n	bd08 <usb_d_ep_enable+0x28>
		if (usb_d_inst.ep[i].xfer.hdr.type == USB_EP_XTYPE_CTRL
    bcf2:	781c      	ldrb	r4, [r3, #0]
    bcf4:	3320      	adds	r3, #32
    bcf6:	b90c      	cbnz	r4, bcfc <usb_d_ep_enable+0x1c>
		    && (ep & USB_EP_N_MASK) == usb_d_inst.ep[i].xfer.hdr.ep) {
    bcf8:	42b1      	cmp	r1, r6
    bcfa:	d015      	beq.n	bd28 <usb_d_ep_enable+0x48>
    bcfc:	3201      	adds	r2, #1
	for (i = 0; i < CONF_USB_D_NUM_EP_SP; i++) {
    bcfe:	2a0d      	cmp	r2, #13
    bd00:	d1f4      	bne.n	bcec <usb_d_ep_enable+0xc>
	int8_t           ep_index = _usb_d_find_ep(ep);
	struct usb_d_ep *ept      = &usb_d_inst.ep[ep_index];
	int32_t          rc;
	if (ep_index < 0) {
		return -USB_ERR_PARAM;
    bd02:	f06f 0011 	mvn.w	r0, #17
    bd06:	bd70      	pop	{r4, r5, r6, pc}
	}
	ept->xfer.hdr.state = (ept->xfer.hdr.type == USB_EP_XTYPE_CTRL) ? USB_EP_S_X_SETUP : USB_EP_S_IDLE;
    bd08:	0152      	lsls	r2, r2, #5
    bd0a:	5cab      	ldrb	r3, [r5, r2]
    bd0c:	2b00      	cmp	r3, #0
    bd0e:	bf14      	ite	ne
    bd10:	2301      	movne	r3, #1
    bd12:	2302      	moveq	r3, #2
    bd14:	4415      	add	r5, r2
    bd16:	70ab      	strb	r3, [r5, #2]
	rc                  = _usb_d_dev_ep_enable(ep);
    bd18:	f007 f856 	bl	12dc8 <_usb_d_dev_ep_enable>
	if (rc < 0) {
    bd1c:	2800      	cmp	r0, #0
    bd1e:	db00      	blt.n	bd22 <usb_d_ep_enable+0x42>
		ept->xfer.hdr.state = USB_EP_S_DISABLED;
	}
	return rc;
}
    bd20:	bd70      	pop	{r4, r5, r6, pc}
		ept->xfer.hdr.state = USB_EP_S_DISABLED;
    bd22:	2300      	movs	r3, #0
    bd24:	70ab      	strb	r3, [r5, #2]
    bd26:	bd70      	pop	{r4, r5, r6, pc}
    bd28:	0152      	lsls	r2, r2, #5
	ept->xfer.hdr.state = (ept->xfer.hdr.type == USB_EP_XTYPE_CTRL) ? USB_EP_S_X_SETUP : USB_EP_S_IDLE;
    bd2a:	2302      	movs	r3, #2
    bd2c:	e7f2      	b.n	bd14 <usb_d_ep_enable+0x34>
    bd2e:	bf00      	nop
    bd30:	20001cf8 	.word	0x20001cf8

0000bd34 <usb_d_ep_transfer>:
	}
	return usb_d_inst.ep[ep_index].xfer.req;
}

int32_t usb_d_ep_transfer(const struct usb_d_transfer *xfer)
{
    bd34:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    bd38:	f8df 811c 	ldr.w	r8, [pc, #284]	; be58 <usb_d_ep_transfer+0x124>
	int8_t                ep_index = _usb_d_find_ep(xfer->ep);
    bd3c:	7a05      	ldrb	r5, [r0, #8]
{
    bd3e:	b087      	sub	sp, #28
    bd40:	4643      	mov	r3, r8
		    && (ep & USB_EP_N_MASK) == usb_d_inst.ep[i].xfer.hdr.ep) {
    bd42:	f005 070f 	and.w	r7, r5, #15
	int8_t                ep_index = _usb_d_find_ep(xfer->ep);
    bd46:	2200      	movs	r2, #0
		if (usb_d_inst.ep[i].xfer.hdr.ep == ep) {
    bd48:	7859      	ldrb	r1, [r3, #1]
    bd4a:	428d      	cmp	r5, r1
    bd4c:	d00c      	beq.n	bd68 <usb_d_ep_transfer+0x34>
		if (usb_d_inst.ep[i].xfer.hdr.type == USB_EP_XTYPE_CTRL
    bd4e:	781c      	ldrb	r4, [r3, #0]
    bd50:	3320      	adds	r3, #32
    bd52:	b90c      	cbnz	r4, bd58 <usb_d_ep_transfer+0x24>
		    && (ep & USB_EP_N_MASK) == usb_d_inst.ep[i].xfer.hdr.ep) {
    bd54:	42b9      	cmp	r1, r7
    bd56:	d007      	beq.n	bd68 <usb_d_ep_transfer+0x34>
    bd58:	3201      	adds	r2, #1
	for (i = 0; i < CONF_USB_D_NUM_EP_SP; i++) {
    bd5a:	2a0d      	cmp	r2, #13
    bd5c:	d1f4      	bne.n	bd48 <usb_d_ep_transfer+0x14>
	int32_t               rc;
	volatile uint8_t      state;
	volatile hal_atomic_t flags;

	if (ep_index < 0) {
		return -USB_ERR_PARAM;
    bd5e:	f06f 0011 	mvn.w	r0, #17
		}
	}

	rc = _usb_d_trans(xfer->ep, dir, xfer->buf, len, zlp);
	return rc;
}
    bd62:	b007      	add	sp, #28
    bd64:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	state = ept->xfer.hdr.state;
    bd68:	0154      	lsls	r4, r2, #5
    bd6a:	4606      	mov	r6, r0
    bd6c:	eb08 0b04 	add.w	fp, r8, r4
	atomic_enter_critical(&flags);
    bd70:	a802      	add	r0, sp, #8
	bool                  dir = USB_EP_GET_DIR(xfer->ep), zlp = xfer->zlp;
    bd72:	f896 a009 	ldrb.w	sl, [r6, #9]
	uint32_t              len = xfer->size;
    bd76:	f8d6 9004 	ldr.w	r9, [r6, #4]
	atomic_enter_critical(&flags);
    bd7a:	f007 fb57 	bl	1342c <atomic_enter_critical>
	state = ept->xfer.hdr.state;
    bd7e:	f89b 3002 	ldrb.w	r3, [fp, #2]
    bd82:	f88d 3007 	strb.w	r3, [sp, #7]
	if (state == USB_EP_S_IDLE) {
    bd86:	f89d 7007 	ldrb.w	r7, [sp, #7]
    bd8a:	b2ff      	uxtb	r7, r7
    bd8c:	2f01      	cmp	r7, #1
    bd8e:	d011      	beq.n	bdb4 <usb_d_ep_transfer+0x80>
		atomic_leave_critical(&flags);
    bd90:	a802      	add	r0, sp, #8
    bd92:	f007 fb53 	bl	1343c <atomic_leave_critical>
		switch (state) {
    bd96:	f89d 3007 	ldrb.w	r3, [sp, #7]
    bd9a:	b2db      	uxtb	r3, r3
    bd9c:	2b05      	cmp	r3, #5
    bd9e:	d040      	beq.n	be22 <usb_d_ep_transfer+0xee>
    bda0:	2b06      	cmp	r3, #6
    bda2:	d022      	beq.n	bdea <usb_d_ep_transfer+0xb6>
			return USB_BUSY;
    bda4:	2b00      	cmp	r3, #0
    bda6:	bf0c      	ite	eq
    bda8:	f06f 0012 	mvneq.w	r0, #18
    bdac:	2001      	movne	r0, #1
}
    bdae:	b007      	add	sp, #28
    bdb0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		ept->xfer.hdr.state = USB_EP_S_X_DATA;
    bdb4:	2303      	movs	r3, #3
		atomic_leave_critical(&flags);
    bdb6:	a802      	add	r0, sp, #8
		ept->xfer.hdr.state = USB_EP_S_X_DATA;
    bdb8:	f88b 3002 	strb.w	r3, [fp, #2]
		atomic_leave_critical(&flags);
    bdbc:	f007 fb3e 	bl	1343c <atomic_leave_critical>
	if (ept->xfer.hdr.type == USB_EP_XTYPE_CTRL) {
    bdc0:	f818 2004 	ldrb.w	r2, [r8, r4]
    bdc4:	b9b2      	cbnz	r2, bdf4 <usb_d_ep_transfer+0xc0>
		uint16_t req_len = USB_GET_wLength(ept->xfer.req);
    bdc6:	f89b 1013 	ldrb.w	r1, [fp, #19]
    bdca:	f89b 3012 	ldrb.w	r3, [fp, #18]
    bdce:	eb03 2301 	add.w	r3, r3, r1, lsl #8
    bdd2:	b29b      	uxth	r3, r3
		if (req_len == 0) {
    bdd4:	bb4b      	cbnz	r3, be2a <usb_d_ep_transfer+0xf6>
			ept->xfer.hdr.state = USB_EP_S_X_STATUS;
    bdd6:	2204      	movs	r2, #4
    bdd8:	f88b 2002 	strb.w	r2, [fp, #2]
	struct usb_d_transfer trans
    bddc:	9304      	str	r3, [sp, #16]
    bdde:	6832      	ldr	r2, [r6, #0]
	rc = _usb_d_trans(xfer->ep, dir, xfer->buf, len, zlp);
    bde0:	7a33      	ldrb	r3, [r6, #8]
	struct usb_d_transfer trans
    bde2:	9203      	str	r2, [sp, #12]
    bde4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
    bde8:	e011      	b.n	be0e <usb_d_ep_transfer+0xda>
			return -USB_ERROR;
    bdea:	f06f 000f 	mvn.w	r0, #15
}
    bdee:	b007      	add	sp, #28
    bdf0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	rc = _usb_d_trans(xfer->ep, dir, xfer->buf, len, zlp);
    bdf4:	f11a 0700 	adds.w	r7, sl, #0
	struct usb_d_transfer trans
    bdf8:	6833      	ldr	r3, [r6, #0]
    bdfa:	9303      	str	r3, [sp, #12]
	rc = _usb_d_trans(xfer->ep, dir, xfer->buf, len, zlp);
    bdfc:	bf18      	it	ne
    bdfe:	2701      	movne	r7, #1
	struct usb_d_transfer trans
    be00:	062a      	lsls	r2, r5, #24
    be02:	f8cd 9010 	str.w	r9, [sp, #16]
	rc = _usb_d_trans(xfer->ep, dir, xfer->buf, len, zlp);
    be06:	7a33      	ldrb	r3, [r6, #8]
	struct usb_d_transfer trans
    be08:	d4ec      	bmi.n	bde4 <usb_d_ep_transfer+0xb0>
    be0a:	f003 030f 	and.w	r3, r3, #15
	return _usb_d_dev_ep_trans(&trans);
    be0e:	a803      	add	r0, sp, #12
	struct usb_d_transfer trans
    be10:	f88d 3014 	strb.w	r3, [sp, #20]
    be14:	f88d 7015 	strb.w	r7, [sp, #21]
	return _usb_d_dev_ep_trans(&trans);
    be18:	f007 f9b2 	bl	13180 <_usb_d_dev_ep_trans>
}
    be1c:	b007      	add	sp, #28
    be1e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			return USB_HALTED;
    be22:	2002      	movs	r0, #2
}
    be24:	b007      	add	sp, #28
    be26:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			if (dir) {
    be2a:	f99b 100c 	ldrsb.w	r1, [fp, #12]
    be2e:	4599      	cmp	r9, r3
    be30:	464f      	mov	r7, r9
    be32:	bf28      	it	cs
    be34:	461f      	movcs	r7, r3
    be36:	2900      	cmp	r1, #0
    be38:	db05      	blt.n	be46 <usb_d_ep_transfer+0x112>
	struct usb_d_transfer trans
    be3a:	6833      	ldr	r3, [r6, #0]
    be3c:	9704      	str	r7, [sp, #16]
    be3e:	9303      	str	r3, [sp, #12]
	rc = _usb_d_trans(xfer->ep, dir, xfer->buf, len, zlp);
    be40:	4617      	mov	r7, r2
    be42:	7a33      	ldrb	r3, [r6, #8]
    be44:	e7e1      	b.n	be0a <usb_d_ep_transfer+0xd6>
    be46:	42bb      	cmp	r3, r7
	struct usb_d_transfer trans
    be48:	6832      	ldr	r2, [r6, #0]
    be4a:	9704      	str	r7, [sp, #16]
    be4c:	9203      	str	r2, [sp, #12]
	rc = _usb_d_trans(xfer->ep, dir, xfer->buf, len, zlp);
    be4e:	bf94      	ite	ls
    be50:	2700      	movls	r7, #0
    be52:	2701      	movhi	r7, #1
    be54:	7a33      	ldrb	r3, [r6, #8]
    be56:	e7c5      	b.n	bde4 <usb_d_ep_transfer+0xb0>
    be58:	20001cf8 	.word	0x20001cf8

0000be5c <usb_d_ep_abort>:

void usb_d_ep_abort(const uint8_t ep)
{
    be5c:	b570      	push	{r4, r5, r6, lr}
    be5e:	4e0d      	ldr	r6, [pc, #52]	; (be94 <usb_d_ep_abort+0x38>)
		    && (ep & USB_EP_N_MASK) == usb_d_inst.ep[i].xfer.hdr.ep) {
    be60:	f000 050f 	and.w	r5, r0, #15
    be64:	4633      	mov	r3, r6
{
    be66:	2400      	movs	r4, #0
		if (usb_d_inst.ep[i].xfer.hdr.ep == ep) {
    be68:	785a      	ldrb	r2, [r3, #1]
    be6a:	4290      	cmp	r0, r2
    be6c:	d008      	beq.n	be80 <usb_d_ep_abort+0x24>
		if (usb_d_inst.ep[i].xfer.hdr.type == USB_EP_XTYPE_CTRL
    be6e:	7819      	ldrb	r1, [r3, #0]
    be70:	3320      	adds	r3, #32
    be72:	b909      	cbnz	r1, be78 <usb_d_ep_abort+0x1c>
		    && (ep & USB_EP_N_MASK) == usb_d_inst.ep[i].xfer.hdr.ep) {
    be74:	42aa      	cmp	r2, r5
    be76:	d003      	beq.n	be80 <usb_d_ep_abort+0x24>
    be78:	3401      	adds	r4, #1
	for (i = 0; i < CONF_USB_D_NUM_EP_SP; i++) {
    be7a:	2c0d      	cmp	r4, #13
    be7c:	d1f4      	bne.n	be68 <usb_d_ep_abort+0xc>
    be7e:	bd70      	pop	{r4, r5, r6, pc}
	struct usb_d_ep *ept      = &usb_d_inst.ep[ep_index];
	if (ep_index < 0) {
		return;
	}
	_usb_d_dev_ep_abort(ep);
	ept->xfer.hdr.state  = USB_EP_S_IDLE;
    be80:	eb06 1444 	add.w	r4, r6, r4, lsl #5
	_usb_d_dev_ep_abort(ep);
    be84:	f007 fa4a 	bl	1331c <_usb_d_dev_ep_abort>
	ept->xfer.hdr.state  = USB_EP_S_IDLE;
    be88:	2201      	movs	r2, #1
	ept->xfer.hdr.status = USB_XFER_ABORT;
    be8a:	2304      	movs	r3, #4
	ept->xfer.hdr.state  = USB_EP_S_IDLE;
    be8c:	70a2      	strb	r2, [r4, #2]
	ept->xfer.hdr.status = USB_XFER_ABORT;
    be8e:	70e3      	strb	r3, [r4, #3]
    be90:	bd70      	pop	{r4, r5, r6, pc}
    be92:	bf00      	nop
    be94:	20001cf8 	.word	0x20001cf8

0000be98 <usb_d_ep_halt>:
	}
	return ERR_NONE;
}

int32_t usb_d_ep_halt(const uint8_t ep, const enum usb_ep_halt_ctrl ctrl)
{
    be98:	b570      	push	{r4, r5, r6, lr}
	if (ctrl == USB_EP_HALT_CLR) {
    be9a:	460c      	mov	r4, r1
    be9c:	b131      	cbz	r1, beac <usb_d_ep_halt+0x14>
		return _usb_d_ep_halt_clr(ep);
	} else if (ctrl == USB_EP_HALT_SET) {
    be9e:	2901      	cmp	r1, #1
		return _usb_d_dev_ep_stall(ep, USB_EP_STALL_SET);
	} else {
		return _usb_d_dev_ep_stall(ep, USB_EP_STALL_GET);
    bea0:	bf18      	it	ne
    bea2:	2102      	movne	r1, #2
	}
}
    bea4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		return _usb_d_dev_ep_stall(ep, USB_EP_STALL_GET);
    bea8:	f007 b8ae 	b.w	13008 <_usb_d_dev_ep_stall>
    beac:	4e15      	ldr	r6, [pc, #84]	; (bf04 <usb_d_ep_halt+0x6c>)
    beae:	4605      	mov	r5, r0
    beb0:	4633      	mov	r3, r6
		    && (ep & USB_EP_N_MASK) == usb_d_inst.ep[i].xfer.hdr.ep) {
    beb2:	f000 000f 	and.w	r0, r0, #15
		if (usb_d_inst.ep[i].xfer.hdr.ep == ep) {
    beb6:	785a      	ldrb	r2, [r3, #1]
    beb8:	4295      	cmp	r5, r2
    beba:	d00a      	beq.n	bed2 <usb_d_ep_halt+0x3a>
		if (usb_d_inst.ep[i].xfer.hdr.type == USB_EP_XTYPE_CTRL
    bebc:	7819      	ldrb	r1, [r3, #0]
    bebe:	3320      	adds	r3, #32
    bec0:	b909      	cbnz	r1, bec6 <usb_d_ep_halt+0x2e>
		    && (ep & USB_EP_N_MASK) == usb_d_inst.ep[i].xfer.hdr.ep) {
    bec2:	4282      	cmp	r2, r0
    bec4:	d005      	beq.n	bed2 <usb_d_ep_halt+0x3a>
    bec6:	3401      	adds	r4, #1
	for (i = 0; i < CONF_USB_D_NUM_EP_SP; i++) {
    bec8:	2c0d      	cmp	r4, #13
    beca:	d1f4      	bne.n	beb6 <usb_d_ep_halt+0x1e>
		return -USB_ERR_PARAM;
    becc:	f06f 0011 	mvn.w	r0, #17
    bed0:	bd70      	pop	{r4, r5, r6, pc}
	if (_usb_d_dev_ep_stall(ep, USB_EP_STALL_GET)) {
    bed2:	2102      	movs	r1, #2
    bed4:	4628      	mov	r0, r5
    bed6:	f007 f897 	bl	13008 <_usb_d_dev_ep_stall>
    beda:	b900      	cbnz	r0, bede <usb_d_ep_halt+0x46>
}
    bedc:	bd70      	pop	{r4, r5, r6, pc}
		rc = _usb_d_dev_ep_stall(ep, USB_EP_STALL_CLR);
    bede:	2100      	movs	r1, #0
    bee0:	4628      	mov	r0, r5
    bee2:	f007 f891 	bl	13008 <_usb_d_dev_ep_stall>
		if (rc < 0) {
    bee6:	2800      	cmp	r0, #0
    bee8:	dbf8      	blt.n	bedc <usb_d_ep_halt+0x44>
		ept->xfer.hdr.state  = USB_EP_S_IDLE;
    beea:	eb06 1444 	add.w	r4, r6, r4, lsl #5
		ept->xfer.hdr.status = USB_XFER_UNHALT;
    beee:	2103      	movs	r1, #3
		ept->xfer.hdr.state  = USB_EP_S_IDLE;
    bef0:	2301      	movs	r3, #1
    bef2:	70a3      	strb	r3, [r4, #2]
		ept->callbacks.xfer(ep, USB_XFER_UNHALT, NULL);
    bef4:	4628      	mov	r0, r5
		ept->xfer.hdr.status = USB_XFER_UNHALT;
    bef6:	70e1      	strb	r1, [r4, #3]
		ept->callbacks.xfer(ep, USB_XFER_UNHALT, NULL);
    bef8:	69e3      	ldr	r3, [r4, #28]
    befa:	2200      	movs	r2, #0
    befc:	4798      	blx	r3
	return ERR_NONE;
    befe:	2000      	movs	r0, #0
    bf00:	bd70      	pop	{r4, r5, r6, pc}
    bf02:	bf00      	nop
    bf04:	20001cf8 	.word	0x20001cf8

0000bf08 <usb_d_ep_register_callback>:

void usb_d_ep_register_callback(const uint8_t ep, const enum usb_d_ep_cb_type type, const FUNC_PTR func)
{
    bf08:	b5f0      	push	{r4, r5, r6, r7, lr}
    bf0a:	f8df e054 	ldr.w	lr, [pc, #84]	; bf60 <usb_d_ep_register_callback+0x58>
		    && (ep & USB_EP_N_MASK) == usb_d_inst.ep[i].xfer.hdr.ep) {
    bf0e:	f000 070f 	and.w	r7, r0, #15
    bf12:	4673      	mov	r3, lr
{
    bf14:	2400      	movs	r4, #0
		if (usb_d_inst.ep[i].xfer.hdr.ep == ep) {
    bf16:	785d      	ldrb	r5, [r3, #1]
    bf18:	42a8      	cmp	r0, r5
    bf1a:	d008      	beq.n	bf2e <usb_d_ep_register_callback+0x26>
		if (usb_d_inst.ep[i].xfer.hdr.type == USB_EP_XTYPE_CTRL
    bf1c:	781e      	ldrb	r6, [r3, #0]
    bf1e:	3320      	adds	r3, #32
    bf20:	b90e      	cbnz	r6, bf26 <usb_d_ep_register_callback+0x1e>
		    && (ep & USB_EP_N_MASK) == usb_d_inst.ep[i].xfer.hdr.ep) {
    bf22:	42bd      	cmp	r5, r7
    bf24:	d003      	beq.n	bf2e <usb_d_ep_register_callback+0x26>
    bf26:	3401      	adds	r4, #1
	for (i = 0; i < CONF_USB_D_NUM_EP_SP; i++) {
    bf28:	2c0d      	cmp	r4, #13
    bf2a:	d1f4      	bne.n	bf16 <usb_d_ep_register_callback+0xe>
    bf2c:	bdf0      	pop	{r4, r5, r6, r7, pc}
	int8_t           ep_index = _usb_d_find_ep(ep);
	struct usb_d_ep *ept      = &usb_d_inst.ep[ep_index];
	FUNC_PTR         f        = func ? (FUNC_PTR)func : (FUNC_PTR)usb_d_dummy_cb_false;
    bf2e:	4b0b      	ldr	r3, [pc, #44]	; (bf5c <usb_d_ep_register_callback+0x54>)
    bf30:	2a00      	cmp	r2, #0
    bf32:	bf08      	it	eq
    bf34:	461a      	moveq	r2, r3
	if (ep_index < 0) {
		return;
	}
	switch (type) {
    bf36:	2901      	cmp	r1, #1
    bf38:	d003      	beq.n	bf42 <usb_d_ep_register_callback+0x3a>
    bf3a:	d30a      	bcc.n	bf52 <usb_d_ep_register_callback+0x4a>
    bf3c:	2902      	cmp	r1, #2
    bf3e:	d004      	beq.n	bf4a <usb_d_ep_register_callback+0x42>
    bf40:	bdf0      	pop	{r4, r5, r6, r7, pc}
	case USB_D_EP_CB_SETUP:
		ept->callbacks.req = (usb_d_ep_cb_setup_t)f;
		break;
	case USB_D_EP_CB_MORE:
		ept->callbacks.more = (usb_d_ep_cb_more_t)f;
    bf42:	eb0e 1444 	add.w	r4, lr, r4, lsl #5
    bf46:	61a2      	str	r2, [r4, #24]
		break;
    bf48:	bdf0      	pop	{r4, r5, r6, r7, pc}
	case USB_D_EP_CB_XFER:
		ept->callbacks.xfer = (usb_d_ep_cb_xfer_t)f;
    bf4a:	eb0e 1444 	add.w	r4, lr, r4, lsl #5
    bf4e:	61e2      	str	r2, [r4, #28]
    bf50:	bdf0      	pop	{r4, r5, r6, r7, pc}
		ept->callbacks.req = (usb_d_ep_cb_setup_t)f;
    bf52:	eb0e 1444 	add.w	r4, lr, r4, lsl #5
    bf56:	6162      	str	r2, [r4, #20]
		break;
    bf58:	bdf0      	pop	{r4, r5, r6, r7, pc}
    bf5a:	bf00      	nop
    bf5c:	0000b865 	.word	0x0000b865
    bf60:	20001cf8 	.word	0x20001cf8

0000bf64 <assert>:
/**
 * \brief Assert function
 */
void assert(const bool condition, const char *const file, const int line)
{
	if (!(condition)) {
    bf64:	b900      	cbnz	r0, bf68 <assert+0x4>
		__asm("BKPT #0");
    bf66:	be00      	bkpt	0x0000
    bf68:	4770      	bx	lr
    bf6a:	bf00      	nop

0000bf6c <list_insert_at_end>:

/**
 * \brief Insert an element at list end
 */
void list_insert_at_end(struct list_descriptor *const list, void *const element)
{
    bf6c:	b570      	push	{r4, r5, r6, lr}
	struct list_element *it = list->head;
    bf6e:	6804      	ldr	r4, [r0, #0]
{
    bf70:	4606      	mov	r6, r0
    bf72:	460d      	mov	r5, r1
	for (it = list->head; it; it = it->next) {
    bf74:	b144      	cbz	r4, bf88 <list_insert_at_end+0x1c>
		if (it == element) {
    bf76:	428c      	cmp	r4, r1
    bf78:	d015      	beq.n	bfa6 <list_insert_at_end+0x3a>
    bf7a:	4623      	mov	r3, r4
    bf7c:	e001      	b.n	bf82 <list_insert_at_end+0x16>
    bf7e:	429d      	cmp	r5, r3
    bf80:	d011      	beq.n	bfa6 <list_insert_at_end+0x3a>
	for (it = list->head; it; it = it->next) {
    bf82:	681b      	ldr	r3, [r3, #0]
    bf84:	2b00      	cmp	r3, #0
    bf86:	d1fa      	bne.n	bf7e <list_insert_at_end+0x12>
    bf88:	2001      	movs	r0, #1

	ASSERT(!is_list_element(list, element));
    bf8a:	224f      	movs	r2, #79	; 0x4f
    bf8c:	4908      	ldr	r1, [pc, #32]	; (bfb0 <list_insert_at_end+0x44>)
    bf8e:	f7ff ffe9 	bl	bf64 <assert>

	if (!list->head) {
    bf92:	6833      	ldr	r3, [r6, #0]
    bf94:	b90b      	cbnz	r3, bf9a <list_insert_at_end+0x2e>
    bf96:	e008      	b.n	bfaa <list_insert_at_end+0x3e>
    bf98:	461c      	mov	r4, r3
		list->head                             = (struct list_element *)element;
		((struct list_element *)element)->next = NULL;
		return;
	}

	while (it->next) {
    bf9a:	6823      	ldr	r3, [r4, #0]
    bf9c:	2b00      	cmp	r3, #0
    bf9e:	d1fb      	bne.n	bf98 <list_insert_at_end+0x2c>
		it = it->next;
	}
	it->next                               = (struct list_element *)element;
    bfa0:	6025      	str	r5, [r4, #0]
	((struct list_element *)element)->next = NULL;
    bfa2:	602b      	str	r3, [r5, #0]
    bfa4:	bd70      	pop	{r4, r5, r6, pc}
		if (it == element) {
    bfa6:	2000      	movs	r0, #0
    bfa8:	e7ef      	b.n	bf8a <list_insert_at_end+0x1e>
		list->head                             = (struct list_element *)element;
    bfaa:	6035      	str	r5, [r6, #0]
		((struct list_element *)element)->next = NULL;
    bfac:	602b      	str	r3, [r5, #0]
		return;
    bfae:	bd70      	pop	{r4, r5, r6, pc}
    bfb0:	0002d1a0 	.word	0x0002d1a0

0000bfb4 <_ZN9ClearCore10AdcManager8InstanceEv>:
    while (ADC1->STATUS.bit.ADCBUSY) {
        continue;
    }
}

AdcManager &AdcManager::Instance() {
    bfb4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    static AdcManager *instance = new AdcManager();
    bfb6:	4d1f      	ldr	r5, [pc, #124]	; (c034 <_ZN9ClearCore10AdcManager8InstanceEv+0x80>)
    bfb8:	682c      	ldr	r4, [r5, #0]
    bfba:	f014 0401 	ands.w	r4, r4, #1
    bfbe:	d002      	beq.n	bfc6 <_ZN9ClearCore10AdcManager8InstanceEv+0x12>
    bfc0:	4b1d      	ldr	r3, [pc, #116]	; (c038 <_ZN9ClearCore10AdcManager8InstanceEv+0x84>)
    bfc2:	6818      	ldr	r0, [r3, #0]
    bfc4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    bfc6:	2074      	movs	r0, #116	; 0x74
    bfc8:	f010 feba 	bl	1cd40 <_Znwj>
    bfcc:	4e1a      	ldr	r6, [pc, #104]	; (c038 <_ZN9ClearCore10AdcManager8InstanceEv+0x84>)
      m_shiftRegSnapshot(UINT32_MAX),
      m_shiftRegPending(UINT32_MAX),
      m_AdcResolution(ADC_RESOLUTION_DEFAULT),
      m_AdcResPending(ADC_RESOLUTION_DEFAULT),
      m_AdcTimeoutLimit(ADC_TIMEOUT_DEFAULT),
      m_AdcBusyCount(0) {}
    bfce:	6004      	str	r4, [r0, #0]
    static AdcManager *instance = new AdcManager();
    bfd0:	4603      	mov	r3, r0
      m_AdcBusyCount(0) {}
    bfd2:	210c      	movs	r1, #12
    bfd4:	f04f 30ff 	mov.w	r0, #4294967295
    bfd8:	2703      	movs	r7, #3
    static AdcManager *instance = new AdcManager();
    bfda:	2201      	movs	r2, #1
      m_AdcBusyCount(0) {}
    bfdc:	605c      	str	r4, [r3, #4]
    bfde:	6658      	str	r0, [r3, #100]	; 0x64
    bfe0:	609c      	str	r4, [r3, #8]
    bfe2:	6698      	str	r0, [r3, #104]	; 0x68
    bfe4:	60dc      	str	r4, [r3, #12]
///     The DSP efficient form is:
///            = input - K*input + K*output
//
class Iir16 {
public:
    Iir16(void) : m_tc(0), m_z(0) {};
    bfe6:	841c      	strh	r4, [r3, #32]
    bfe8:	611c      	str	r4, [r3, #16]
    bfea:	625c      	str	r4, [r3, #36]	; 0x24
    bfec:	615c      	str	r4, [r3, #20]
    bfee:	851c      	strh	r4, [r3, #40]	; 0x28
    bff0:	619c      	str	r4, [r3, #24]
    bff2:	62dc      	str	r4, [r3, #44]	; 0x2c
    bff4:	61dc      	str	r4, [r3, #28]
    bff6:	861c      	strh	r4, [r3, #48]	; 0x30
    bff8:	635c      	str	r4, [r3, #52]	; 0x34
    bffa:	871c      	strh	r4, [r3, #56]	; 0x38
    bffc:	63dc      	str	r4, [r3, #60]	; 0x3c
    bffe:	f8a3 4040 	strh.w	r4, [r3, #64]	; 0x40
    c002:	645c      	str	r4, [r3, #68]	; 0x44
    c004:	f8a3 4048 	strh.w	r4, [r3, #72]	; 0x48
    c008:	64dc      	str	r4, [r3, #76]	; 0x4c
    c00a:	f8a3 4050 	strh.w	r4, [r3, #80]	; 0x50
    c00e:	655c      	str	r4, [r3, #84]	; 0x54
    c010:	f8a3 4058 	strh.w	r4, [r3, #88]	; 0x58
    c014:	65dc      	str	r4, [r3, #92]	; 0x5c
    c016:	f883 4060 	strb.w	r4, [r3, #96]	; 0x60
    c01a:	f883 4061 	strb.w	r4, [r3, #97]	; 0x61
    c01e:	671c      	str	r4, [r3, #112]	; 0x70
    c020:	f883 706e 	strb.w	r7, [r3, #110]	; 0x6e
    c024:	f883 106c 	strb.w	r1, [r3, #108]	; 0x6c
    c028:	f883 106d 	strb.w	r1, [r3, #109]	; 0x6d
    c02c:	4618      	mov	r0, r3
    static AdcManager *instance = new AdcManager();
    c02e:	6033      	str	r3, [r6, #0]
    c030:	602a      	str	r2, [r5, #0]
}
    c032:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    c034:	20001e98 	.word	0x20001e98
    c038:	20001ed0 	.word	0x20001ed0

0000c03c <_ZN9ClearCore10AdcManager10InitializeEv>:

/**
    Initialize the ADC to power-up state.
**/
void AdcManager::Initialize() {
    c03c:	b5f0      	push	{r4, r5, r6, r7, lr}
    // Configure internal analog inputs: Sdrvr2, Sdrvr3, VBus, 5V Ob monitor
    const uint8_t INTERNAL_ADC_INPUTS = 4;
    const PeripheralRoute *adcsToSetup[INTERNAL_ADC_INPUTS] = {
        &_5VOB_MON, &Vsupply_MON_IO_4and5_RST,
        &Sdrvr2_iMon, &Sdrvr3_iMon
    };
    c03e:	4bbd      	ldr	r3, [pc, #756]	; (c334 <_ZN9ClearCore10AdcManager10InitializeEv+0x2f8>)
void AdcManager::Initialize() {
    c040:	4605      	mov	r5, r0
    };
    c042:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
void AdcManager::Initialize() {
    c044:	b085      	sub	sp, #20
    };
    c046:	ac04      	add	r4, sp, #16
    c048:	e904 000f 	stmdb	r4, {r0, r1, r2, r3}
    m_AdcResolution = ADC_RESOLUTION_DEFAULT;
    c04c:	210c      	movs	r1, #12

    for (uint8_t i = 0; i < INTERNAL_ADC_INPUTS; i++) {
        const PeripheralRoute *prPtr = adcsToSetup[i];
    c04e:	9800      	ldr	r0, [sp, #0]
    m_AdcResolution = ADC_RESOLUTION_DEFAULT;
    c050:	f885 106c 	strb.w	r1, [r5, #108]	; 0x6c
    m_AdcTimeoutLimit = ADC_TIMEOUT_DEFAULT;
    c054:	2303      	movs	r3, #3
    c056:	f885 306e 	strb.w	r3, [r5, #110]	; 0x6e
    m_AdcResPending = ADC_RESOLUTION_DEFAULT;
    c05a:	f885 106d 	strb.w	r1, [r5, #109]	; 0x6d
        return m_tc;
    };

    void TcSamples(uint16_t riseSamples99pct) {
        float tcTemp = powf(.01, 1. / riseSamples99pct) * 32768 + 0.5;
        m_tc = (tcTemp < INT16_MAX) ? tcTemp : INT16_MAX;
    c05e:	f245 03c3 	movw	r3, #20675	; 0x50c3
    c062:	842b      	strh	r3, [r5, #32]
    c064:	852b      	strh	r3, [r5, #40]	; 0x28
    c066:	862b      	strh	r3, [r5, #48]	; 0x30
    c068:	872b      	strh	r3, [r5, #56]	; 0x38
    c06a:	f8a5 3040 	strh.w	r3, [r5, #64]	; 0x40
    c06e:	f8a5 3048 	strh.w	r3, [r5, #72]	; 0x48
    c072:	f8a5 3050 	strh.w	r3, [r5, #80]	; 0x50
    c076:	f8a5 3058 	strh.w	r3, [r5, #88]	; 0x58

        ClearCorePorts adcGpioPort = prPtr->gpioPort;
    c07a:	f990 3001 	ldrsb.w	r3, [r0, #1]
    m_initialized = false;
    c07e:	2200      	movs	r2, #0
    m_shiftRegSnapshot = UINT32_MAX;
    c080:	f04f 34ff 	mov.w	r4, #4294967295
    m_initialized = false;
    c084:	f885 2060 	strb.w	r2, [r5, #96]	; 0x60
    m_AdcTimeout = false;
    c088:	f885 2061 	strb.w	r2, [r5, #97]	; 0x61
    m_AdcBusyCount = 0;
    c08c:	672a      	str	r2, [r5, #112]	; 0x70
    m_shiftRegSnapshot = UINT32_MAX;
    c08e:	666c      	str	r4, [r5, #100]	; 0x64
    m_shiftRegPending = UINT32_MAX;
    c090:	66ac      	str	r4, [r5, #104]	; 0x68
        uint8_t adcGpioPin = prPtr->gpioPin;

        PMUX_SELECTION(adcGpioPort, adcGpioPin, PER_ANALOG);
    c092:	01db      	lsls	r3, r3, #7
        uint8_t adcGpioPin = prPtr->gpioPin;
    c094:	7881      	ldrb	r1, [r0, #2]
        PMUX_SELECTION(adcGpioPort, adcGpioPin, PER_ANALOG);
    c096:	f103 4282 	add.w	r2, r3, #1090519040	; 0x41000000
    c09a:	f502 4200 	add.w	r2, r2, #32768	; 0x8000
    c09e:	eb02 0251 	add.w	r2, r2, r1, lsr #1
    c0a2:	07cf      	lsls	r7, r1, #31
    c0a4:	f892 0030 	ldrb.w	r0, [r2, #48]	; 0x30
    c0a8:	f04f 0401 	mov.w	r4, #1
    c0ac:	bf54      	ite	pl
    c0ae:	f364 0003 	bfipl	r0, r4, #0, #4
    c0b2:	f364 1007 	bfimi	r0, r4, #4, #4
    c0b6:	f882 0030 	strb.w	r0, [r2, #48]	; 0x30
        PMUX_ENABLE(adcGpioPort, adcGpioPin);
    c0ba:	4a9f      	ldr	r2, [pc, #636]	; (c338 <_ZN9ClearCore10AdcManager10InitializeEv+0x2fc>)
    c0bc:	4413      	add	r3, r2
    c0be:	440b      	add	r3, r1
        PMUX_SELECTION(adcGpioPort, adcGpioPin, PER_ANALOG);
    c0c0:	2401      	movs	r4, #1
        PMUX_ENABLE(adcGpioPort, adcGpioPin);
    c0c2:	f893 1040 	ldrb.w	r1, [r3, #64]	; 0x40
    c0c6:	f041 0101 	orr.w	r1, r1, #1
    c0ca:	f883 1040 	strb.w	r1, [r3, #64]	; 0x40
        const PeripheralRoute *prPtr = adcsToSetup[i];
    c0ce:	9b01      	ldr	r3, [sp, #4]
        uint8_t adcGpioPin = prPtr->gpioPin;
    c0d0:	7899      	ldrb	r1, [r3, #2]
        ClearCorePorts adcGpioPort = prPtr->gpioPort;
    c0d2:	f993 3001 	ldrsb.w	r3, [r3, #1]
        PMUX_SELECTION(adcGpioPort, adcGpioPin, PER_ANALOG);
    c0d6:	01db      	lsls	r3, r3, #7
    c0d8:	441a      	add	r2, r3
    c0da:	eb02 0251 	add.w	r2, r2, r1, lsr #1
    c0de:	07ce      	lsls	r6, r1, #31
    c0e0:	f892 0030 	ldrb.w	r0, [r2, #48]	; 0x30
    c0e4:	bf54      	ite	pl
    c0e6:	f364 0003 	bfipl	r0, r4, #0, #4
    c0ea:	f364 1007 	bfimi	r0, r4, #4, #4
    c0ee:	f882 0030 	strb.w	r0, [r2, #48]	; 0x30
        PMUX_ENABLE(adcGpioPort, adcGpioPin);
    c0f2:	4a91      	ldr	r2, [pc, #580]	; (c338 <_ZN9ClearCore10AdcManager10InitializeEv+0x2fc>)
    c0f4:	4413      	add	r3, r2
    c0f6:	440b      	add	r3, r1
        PMUX_SELECTION(adcGpioPort, adcGpioPin, PER_ANALOG);
    c0f8:	2401      	movs	r4, #1
        PMUX_ENABLE(adcGpioPort, adcGpioPin);
    c0fa:	f893 1040 	ldrb.w	r1, [r3, #64]	; 0x40
    c0fe:	f041 0101 	orr.w	r1, r1, #1
    c102:	f883 1040 	strb.w	r1, [r3, #64]	; 0x40
        const PeripheralRoute *prPtr = adcsToSetup[i];
    c106:	9b02      	ldr	r3, [sp, #8]
        uint8_t adcGpioPin = prPtr->gpioPin;
    c108:	7899      	ldrb	r1, [r3, #2]
        ClearCorePorts adcGpioPort = prPtr->gpioPort;
    c10a:	f993 3001 	ldrsb.w	r3, [r3, #1]
        PMUX_SELECTION(adcGpioPort, adcGpioPin, PER_ANALOG);
    c10e:	01db      	lsls	r3, r3, #7
    c110:	441a      	add	r2, r3
    c112:	eb02 0251 	add.w	r2, r2, r1, lsr #1
    c116:	07cf      	lsls	r7, r1, #31
    c118:	f892 0030 	ldrb.w	r0, [r2, #48]	; 0x30
    c11c:	bf54      	ite	pl
    c11e:	f364 0003 	bfipl	r0, r4, #0, #4
    c122:	f364 1007 	bfimi	r0, r4, #4, #4
    c126:	f882 0030 	strb.w	r0, [r2, #48]	; 0x30
        PMUX_ENABLE(adcGpioPort, adcGpioPin);
    c12a:	4a83      	ldr	r2, [pc, #524]	; (c338 <_ZN9ClearCore10AdcManager10InitializeEv+0x2fc>)
    c12c:	4413      	add	r3, r2
    c12e:	440b      	add	r3, r1
        PMUX_SELECTION(adcGpioPort, adcGpioPin, PER_ANALOG);
    c130:	2401      	movs	r4, #1
        PMUX_ENABLE(adcGpioPort, adcGpioPin);
    c132:	f893 1040 	ldrb.w	r1, [r3, #64]	; 0x40
    c136:	f041 0101 	orr.w	r1, r1, #1
    c13a:	f883 1040 	strb.w	r1, [r3, #64]	; 0x40
        const PeripheralRoute *prPtr = adcsToSetup[i];
    c13e:	9b03      	ldr	r3, [sp, #12]
        uint8_t adcGpioPin = prPtr->gpioPin;
    c140:	7899      	ldrb	r1, [r3, #2]
        ClearCorePorts adcGpioPort = prPtr->gpioPort;
    c142:	f993 3001 	ldrsb.w	r3, [r3, #1]
        PMUX_SELECTION(adcGpioPort, adcGpioPin, PER_ANALOG);
    c146:	01db      	lsls	r3, r3, #7
    c148:	441a      	add	r2, r3
    c14a:	eb02 0251 	add.w	r2, r2, r1, lsr #1
        PMUX_ENABLE(adcGpioPort, adcGpioPin);
    c14e:	f103 4382 	add.w	r3, r3, #1090519040	; 0x41000000
        PMUX_SELECTION(adcGpioPort, adcGpioPin, PER_ANALOG);
    c152:	f892 0030 	ldrb.w	r0, [r2, #48]	; 0x30
    c156:	07ce      	lsls	r6, r1, #31
        PMUX_ENABLE(adcGpioPort, adcGpioPin);
    c158:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
    c15c:	440b      	add	r3, r1
        PMUX_SELECTION(adcGpioPort, adcGpioPin, PER_ANALOG);
    c15e:	bf4c      	ite	mi
    c160:	f364 1007 	bfimi	r0, r4, #4, #4
    c164:	f364 0003 	bfipl	r0, r4, #0, #4
    c168:	f882 0030 	strb.w	r0, [r2, #48]	; 0x30
        PMUX_ENABLE(adcGpioPort, adcGpioPin);
    c16c:	f893 1040 	ldrb.w	r1, [r3, #64]	; 0x40

    // Set up ADC

    // Set the clock source for ADC1 to GCLK4 (48 MHz) and enable
    // the peripheral channel
    SET_CLOCK_SOURCE(ADC1_GCLK_ID, 4);
    c170:	4a72      	ldr	r2, [pc, #456]	; (c33c <_ZN9ClearCore10AdcManager10InitializeEv+0x300>)
        PMUX_ENABLE(adcGpioPort, adcGpioPin);
    c172:	f041 0101 	orr.w	r1, r1, #1
    c176:	f883 1040 	strb.w	r1, [r3, #64]	; 0x40
    SET_CLOCK_SOURCE(ADC1_GCLK_ID, 4);
    c17a:	f8d2 3124 	ldr.w	r3, [r2, #292]	; 0x124
    c17e:	f36f 1386 	bfc	r3, #6, #1
    c182:	f8c2 3124 	str.w	r3, [r2, #292]	; 0x124
    c186:	f8d2 3124 	ldr.w	r3, [r2, #292]	; 0x124
    c18a:	065f      	lsls	r7, r3, #25
    c18c:	d4fb      	bmi.n	c186 <_ZN9ClearCore10AdcManager10InitializeEv+0x14a>
    c18e:	f8d2 3124 	ldr.w	r3, [r2, #292]	; 0x124
    c192:	496a      	ldr	r1, [pc, #424]	; (c33c <_ZN9ClearCore10AdcManager10InitializeEv+0x300>)
    c194:	2004      	movs	r0, #4
    c196:	f360 0303 	bfi	r3, r0, #0, #4
    c19a:	f8c2 3124 	str.w	r3, [r2, #292]	; 0x124
    c19e:	f8d2 3124 	ldr.w	r3, [r2, #292]	; 0x124
    c1a2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    c1a6:	f8c2 3124 	str.w	r3, [r2, #292]	; 0x124
    c1aa:	684b      	ldr	r3, [r1, #4]
    c1ac:	06de      	lsls	r6, r3, #27
    c1ae:	d4fc      	bmi.n	c1aa <_ZN9ClearCore10AdcManager10InitializeEv+0x16e>

    // Enables the peripheral clock to ADC1
    CLOCK_ENABLE(APBDMASK, ADC1_);
    c1b0:	4963      	ldr	r1, [pc, #396]	; (c340 <_ZN9ClearCore10AdcManager10InitializeEv+0x304>)

    // Reset the ADC1 module
    ADC1->CTRLA.bit.SWRST = 1;
    c1b2:	4a64      	ldr	r2, [pc, #400]	; (c344 <_ZN9ClearCore10AdcManager10InitializeEv+0x308>)
    CLOCK_ENABLE(APBDMASK, ADC1_);
    c1b4:	6a0b      	ldr	r3, [r1, #32]
    c1b6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
    c1ba:	620b      	str	r3, [r1, #32]
    ADC1->CTRLA.bit.SWRST = 1;
    c1bc:	8813      	ldrh	r3, [r2, #0]
    c1be:	f043 0301 	orr.w	r3, r3, #1
    c1c2:	8013      	strh	r3, [r2, #0]
    SYNCBUSY_WAIT(ADC1, ADC_SYNCBUSY_SWRST);
    c1c4:	6b13      	ldr	r3, [r2, #48]	; 0x30
    c1c6:	f013 0301 	ands.w	r3, r3, #1
    c1ca:	d1fb      	bne.n	c1c4 <_ZN9ClearCore10AdcManager10InitializeEv+0x188>
    }
    return true;
}

bool AdcManager::AdcResChange() {
    switch (m_AdcResPending) {
    c1cc:	f895 106d 	ldrb.w	r1, [r5, #109]	; 0x6d
    c1d0:	290a      	cmp	r1, #10
    c1d2:	f000 80e7 	beq.w	c3a4 <_ZN9ClearCore10AdcManager10InitializeEv+0x368>
    c1d6:	290c      	cmp	r1, #12
    c1d8:	f000 80df 	beq.w	c39a <_ZN9ClearCore10AdcManager10InitializeEv+0x35e>
    c1dc:	2908      	cmp	r1, #8
    c1de:	f000 80d5 	beq.w	c38c <_ZN9ClearCore10AdcManager10InitializeEv+0x350>
    ADC1->CTRLA.bit.PRESCALER = ADC_CTRLA_PRESCALER_DIV4_Val;
    c1e2:	4b58      	ldr	r3, [pc, #352]	; (c344 <_ZN9ClearCore10AdcManager10InitializeEv+0x308>)
    c1e4:	881a      	ldrh	r2, [r3, #0]
    c1e6:	2101      	movs	r1, #1
    c1e8:	f361 220a 	bfi	r2, r1, #8, #3
    c1ec:	801a      	strh	r2, [r3, #0]
    ADC1->INPUTCTRL.reg |= ADC_INPUTCTRL_MUXPOS_AIN4 | ADC_INPUTCTRL_DSEQSTOP;
    c1ee:	889a      	ldrh	r2, [r3, #4]
    c1f0:	b292      	uxth	r2, r2
    c1f2:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
    c1f6:	f042 0204 	orr.w	r2, r2, #4
    c1fa:	809a      	strh	r2, [r3, #4]
    SYNCBUSY_WAIT(ADC1, ADC_SYNCBUSY_INPUTCTRL);
    c1fc:	6b1c      	ldr	r4, [r3, #48]	; 0x30
    c1fe:	f014 0404 	ands.w	r4, r4, #4
    c202:	d1fb      	bne.n	c1fc <_ZN9ClearCore10AdcManager10InitializeEv+0x1c0>
    channel = DmaManager::Channel(DMA_ADC_RESULTS);
    c204:	4620      	mov	r0, r4
    c206:	f001 fe39 	bl	de7c <_ZN9ClearCore10DmaManager7ChannelENS_11DmaChannelsE>
    c20a:	4606      	mov	r6, r0
    baseDesc = DmaManager::BaseDescriptor(DMA_ADC_RESULTS);
    c20c:	4620      	mov	r0, r4
    c20e:	f001 fe3f 	bl	de90 <_ZN9ClearCore10DmaManager14BaseDescriptorENS_11DmaChannelsE>
    channel->CHCTRLA.reg &= ~DMAC_CHCTRLA_ENABLE;
    c212:	6833      	ldr	r3, [r6, #0]
    channel->CHCTRLA.reg = DMAC_CHCTRLA_SWRST;
    c214:	2101      	movs	r1, #1
    channel->CHCTRLA.reg &= ~DMAC_CHCTRLA_ENABLE;
    c216:	f023 0302 	bic.w	r3, r3, #2
    c21a:	6033      	str	r3, [r6, #0]
    baseDesc = DmaManager::BaseDescriptor(DMA_ADC_RESULTS);
    c21c:	4602      	mov	r2, r0
    channel->CHCTRLA.reg = DMAC_CHCTRLA_SWRST;
    c21e:	6031      	str	r1, [r6, #0]
    while (channel->CHCTRLA.reg == DMAC_CHCTRLA_SWRST) {
    c220:	6833      	ldr	r3, [r6, #0]
    c222:	2b01      	cmp	r3, #1
    c224:	d0fc      	beq.n	c220 <_ZN9ClearCore10AdcManager10InitializeEv+0x1e4>
    channel->CHCTRLA.reg = DMAC_CHCTRLA_TRIGSRC(ADC1_DMAC_ID_RESRDY) |
    c226:	4b48      	ldr	r3, [pc, #288]	; (c348 <_ZN9ClearCore10AdcManager10InitializeEv+0x30c>)
    c228:	6033      	str	r3, [r6, #0]
    baseDesc->DSTADDR.reg = (uint32_t)(AdcResultsRaw + ADC_CHANNEL_COUNT);
    c22a:	4948      	ldr	r1, [pc, #288]	; (c34c <_ZN9ClearCore10AdcManager10InitializeEv+0x310>)
    baseDesc->SRCADDR.reg = (uint32_t)&ADC1->RESULT.reg;
    c22c:	4f48      	ldr	r7, [pc, #288]	; (c350 <_ZN9ClearCore10AdcManager10InitializeEv+0x314>)
    baseDesc->BTCTRL.reg =
    c22e:	f640 1301 	movw	r3, #2305	; 0x901
    baseDesc->DESCADDR.reg = static_cast<uint32_t>(0);
    c232:	2000      	movs	r0, #0
    baseDesc->BTCNT.reg = ADC_CHANNEL_COUNT;
    c234:	2408      	movs	r4, #8
    baseDesc->DESCADDR.reg = static_cast<uint32_t>(0);
    c236:	60d0      	str	r0, [r2, #12]
    baseDesc->SRCADDR.reg = (uint32_t)&ADC1->RESULT.reg;
    c238:	6057      	str	r7, [r2, #4]
    channel = DmaManager::Channel(DMA_ADC_SEQUENCE);
    c23a:	2001      	movs	r0, #1
    baseDesc->BTCNT.reg = ADC_CHANNEL_COUNT;
    c23c:	8054      	strh	r4, [r2, #2]
    baseDesc->DSTADDR.reg = (uint32_t)(AdcResultsRaw + ADC_CHANNEL_COUNT);
    c23e:	6091      	str	r1, [r2, #8]
    baseDesc->BTCTRL.reg =
    c240:	8013      	strh	r3, [r2, #0]
    channel = DmaManager::Channel(DMA_ADC_SEQUENCE);
    c242:	f001 fe1b 	bl	de7c <_ZN9ClearCore10DmaManager7ChannelENS_11DmaChannelsE>
    channel->CHCTRLA.reg &= ~DMAC_CHCTRLA_ENABLE;
    c246:	6803      	ldr	r3, [r0, #0]
    channel->CHCTRLA.reg = DMAC_CHCTRLA_SWRST;
    c248:	2201      	movs	r2, #1
    channel->CHCTRLA.reg &= ~DMAC_CHCTRLA_ENABLE;
    c24a:	f023 0302 	bic.w	r3, r3, #2
    c24e:	6003      	str	r3, [r0, #0]
    channel->CHCTRLA.reg = DMAC_CHCTRLA_SWRST;
    c250:	6002      	str	r2, [r0, #0]
    while (channel->CHCTRLA.reg == DMAC_CHCTRLA_SWRST) {
    c252:	6803      	ldr	r3, [r0, #0]
    c254:	2b01      	cmp	r3, #1
    c256:	d0fc      	beq.n	c252 <_ZN9ClearCore10AdcManager10InitializeEv+0x216>
    channel->CHCTRLA.reg = DMAC_CHCTRLA_TRIGSRC(ADC1_DMAC_ID_SEQ) |
    c258:	4b3e      	ldr	r3, [pc, #248]	; (c354 <_ZN9ClearCore10AdcManager10InitializeEv+0x318>)
    c25a:	6003      	str	r3, [r0, #0]
    baseDesc = DmaManager::BaseDescriptor(DMA_ADC_SEQUENCE);
    c25c:	2001      	movs	r0, #1
    c25e:	f001 fe17 	bl	de90 <_ZN9ClearCore10DmaManager14BaseDescriptorENS_11DmaChannelsE>
    baseDesc->DESCADDR.reg = static_cast<uint32_t>(0);
    c262:	2300      	movs	r3, #0
    c264:	60c3      	str	r3, [r0, #12]
    ADC1->DSEQCTRL.bit.INPUTCTRL = 1;
    c266:	4a37      	ldr	r2, [pc, #220]	; (c344 <_ZN9ClearCore10AdcManager10InitializeEv+0x308>)
        (reinterpret_cast<uint32_t>(&adcSequence)) + sizeof(adcSequence);
    c268:	4e3b      	ldr	r6, [pc, #236]	; (c358 <_ZN9ClearCore10AdcManager10InitializeEv+0x31c>)
    baseDesc->DSTADDR.reg =
    c26a:	493c      	ldr	r1, [pc, #240]	; (c35c <_ZN9ClearCore10AdcManager10InitializeEv+0x320>)
    baseDesc->SRCADDR.reg =
    c26c:	6046      	str	r6, [r0, #4]
    baseDesc->BTCTRL.reg = DMAC_BTCTRL_BEATSIZE_WORD | DMAC_BTCTRL_STEPSEL_SRC |
    c26e:	f241 6301 	movw	r3, #5633	; 0x1601
    baseDesc->BTCNT.reg = ADC_CHANNEL_COUNT;
    c272:	2408      	movs	r4, #8
    c274:	8044      	strh	r4, [r0, #2]
    baseDesc->DSTADDR.reg =
    c276:	6081      	str	r1, [r0, #8]
    baseDesc->BTCTRL.reg = DMAC_BTCTRL_BEATSIZE_WORD | DMAC_BTCTRL_STEPSEL_SRC |
    c278:	8003      	strh	r3, [r0, #0]
    ADC1->DSEQCTRL.bit.INPUTCTRL = 1;
    c27a:	6b93      	ldr	r3, [r2, #56]	; 0x38
    c27c:	f043 0301 	orr.w	r3, r3, #1
    c280:	6393      	str	r3, [r2, #56]	; 0x38
    SYNCBUSY_WAIT(ADC1, ADC_SYNCBUSY_INPUTCTRL);
    c282:	6b13      	ldr	r3, [r2, #48]	; 0x30
    c284:	075c      	lsls	r4, r3, #29
    c286:	d4fc      	bmi.n	c282 <_ZN9ClearCore10AdcManager10InitializeEv+0x246>
    ADC1->DSEQCTRL.bit.AUTOSTART = 1;
    c288:	6b93      	ldr	r3, [r2, #56]	; 0x38
    SYNCBUSY_WAIT(ADC1, ADC_SYNCBUSY_REFCTRL);
    c28a:	492e      	ldr	r1, [pc, #184]	; (c344 <_ZN9ClearCore10AdcManager10InitializeEv+0x308>)
    ADC1->DSEQCTRL.bit.AUTOSTART = 1;
    c28c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
    c290:	6393      	str	r3, [r2, #56]	; 0x38
    ADC1->REFCTRL.reg |= ADC_REFCTRL_REFCOMP | ADC_REFCTRL_REFSEL_INTVCC1;
    c292:	7a13      	ldrb	r3, [r2, #8]
    c294:	f043 0383 	orr.w	r3, r3, #131	; 0x83
    c298:	7213      	strb	r3, [r2, #8]
    SYNCBUSY_WAIT(ADC1, ADC_SYNCBUSY_REFCTRL);
    c29a:	6b0b      	ldr	r3, [r1, #48]	; 0x30
    c29c:	06d8      	lsls	r0, r3, #27
    c29e:	d4fc      	bmi.n	c29a <_ZN9ClearCore10AdcManager10InitializeEv+0x25e>
    ADC1->SAMPCTRL.reg = ADC_SAMPCTRL_SAMPLEN(31);
    c2a0:	231f      	movs	r3, #31
    SYNCBUSY_WAIT(ADC1, ADC_SYNCBUSY_SAMPCTRL);
    c2a2:	4c28      	ldr	r4, [pc, #160]	; (c344 <_ZN9ClearCore10AdcManager10InitializeEv+0x308>)
    ADC1->SAMPCTRL.reg = ADC_SAMPCTRL_SAMPLEN(31);
    c2a4:	72cb      	strb	r3, [r1, #11]
    SYNCBUSY_WAIT(ADC1, ADC_SYNCBUSY_SAMPCTRL);
    c2a6:	6b20      	ldr	r0, [r4, #48]	; 0x30
    c2a8:	f010 0040 	ands.w	r0, r0, #64	; 0x40
    c2ac:	d1fb      	bne.n	c2a6 <_ZN9ClearCore10AdcManager10InitializeEv+0x26a>
    ADC1->DBGCTRL.bit.DBGRUN = 1;
    c2ae:	78e3      	ldrb	r3, [r4, #3]
    c2b0:	f043 0301 	orr.w	r3, r3, #1
    c2b4:	70e3      	strb	r3, [r4, #3]
    DmaManager::Channel(DMA_ADC_RESULTS)->CHCTRLA.reg |= DMAC_CHCTRLA_ENABLE;
    c2b6:	f001 fde1 	bl	de7c <_ZN9ClearCore10DmaManager7ChannelENS_11DmaChannelsE>
    c2ba:	4602      	mov	r2, r0
    DmaManager::Channel(DMA_ADC_SEQUENCE)->CHCTRLA.reg |= DMAC_CHCTRLA_ENABLE;
    c2bc:	2001      	movs	r0, #1
    DmaManager::Channel(DMA_ADC_RESULTS)->CHCTRLA.reg |= DMAC_CHCTRLA_ENABLE;
    c2be:	6813      	ldr	r3, [r2, #0]
    c2c0:	f043 0302 	orr.w	r3, r3, #2
    c2c4:	6013      	str	r3, [r2, #0]
    DmaManager::Channel(DMA_ADC_SEQUENCE)->CHCTRLA.reg |= DMAC_CHCTRLA_ENABLE;
    c2c6:	f001 fdd9 	bl	de7c <_ZN9ClearCore10DmaManager7ChannelENS_11DmaChannelsE>
    c2ca:	6803      	ldr	r3, [r0, #0]
    SYNCBUSY_WAIT(ADC1, ADC_SYNCBUSY_ENABLE);
    c2cc:	4a1d      	ldr	r2, [pc, #116]	; (c344 <_ZN9ClearCore10AdcManager10InitializeEv+0x308>)
    DmaManager::Channel(DMA_ADC_SEQUENCE)->CHCTRLA.reg |= DMAC_CHCTRLA_ENABLE;
    c2ce:	f043 0302 	orr.w	r3, r3, #2
    c2d2:	6003      	str	r3, [r0, #0]
    ADC1->INPUTCTRL.reg &= ~ADC_INPUTCTRL_DSEQSTOP;
    c2d4:	88a3      	ldrh	r3, [r4, #4]
    c2d6:	f3c3 030e 	ubfx	r3, r3, #0, #15
    c2da:	80a3      	strh	r3, [r4, #4]
    ADC1->CTRLA.bit.ENABLE = 0x01;
    c2dc:	8823      	ldrh	r3, [r4, #0]
    c2de:	f043 0302 	orr.w	r3, r3, #2
    c2e2:	8023      	strh	r3, [r4, #0]
    SYNCBUSY_WAIT(ADC1, ADC_SYNCBUSY_ENABLE);
    c2e4:	6b13      	ldr	r3, [r2, #48]	; 0x30
    c2e6:	0799      	lsls	r1, r3, #30
    c2e8:	d4fc      	bmi.n	c2e4 <_ZN9ClearCore10AdcManager10InitializeEv+0x2a8>
    while (DmaManager::Channel(DMA_ADC_RESULTS)->CHCTRLA.bit.ENABLE) {
    c2ea:	2000      	movs	r0, #0
    c2ec:	f001 fdc6 	bl	de7c <_ZN9ClearCore10DmaManager7ChannelENS_11DmaChannelsE>
    c2f0:	6803      	ldr	r3, [r0, #0]
    c2f2:	079a      	lsls	r2, r3, #30
    c2f4:	d4f9      	bmi.n	c2ea <_ZN9ClearCore10AdcManager10InitializeEv+0x2ae>
    while (DmaManager::Channel(DMA_ADC_SEQUENCE)->CHCTRLA.bit.ENABLE) {
    c2f6:	2001      	movs	r0, #1
    c2f8:	f001 fdc0 	bl	de7c <_ZN9ClearCore10DmaManager7ChannelENS_11DmaChannelsE>
    c2fc:	6803      	ldr	r3, [r0, #0]
    c2fe:	079b      	lsls	r3, r3, #30
    c300:	d4f9      	bmi.n	c2f6 <_ZN9ClearCore10AdcManager10InitializeEv+0x2ba>
    while (ADC1->STATUS.bit.ADCBUSY) {
    c302:	4a10      	ldr	r2, [pc, #64]	; (c344 <_ZN9ClearCore10AdcManager10InitializeEv+0x308>)
    c304:	f892 302f 	ldrb.w	r3, [r2, #47]	; 0x2f
    c308:	f013 0301 	ands.w	r3, r3, #1
    c30c:	d1fa      	bne.n	c304 <_ZN9ClearCore10AdcManager10InitializeEv+0x2c8>
        TcSamples(riseMs99pct * MS_TO_SAMPLES);
    }

    // Reset the filter to this level
    void Reset(uint16_t newSetting) {
        m_z = (newSetting << 16);
    c30e:	4e14      	ldr	r6, [pc, #80]	; (c360 <_ZN9ClearCore10AdcManager10InitializeEv+0x324>)
    c310:	4c14      	ldr	r4, [pc, #80]	; (c364 <_ZN9ClearCore10AdcManager10InitializeEv+0x328>)
    c312:	62eb      	str	r3, [r5, #44]	; 0x2c
        m_AdcResultsConverted[i] = val;
    c314:	f242 51ff 	movw	r1, #9727	; 0x25ff
    c318:	f246 02f8 	movw	r2, #24824	; 0x60f8
    m_initialized = true;
    c31c:	2001      	movs	r0, #1
        m_AdcResultsConverted[i] = val;
    c31e:	8029      	strh	r1, [r5, #0]
    c320:	63eb      	str	r3, [r5, #60]	; 0x3c
        m_AdcResultsConvertedFiltered[i] = val;
    c322:	8229      	strh	r1, [r5, #16]
    c324:	646b      	str	r3, [r5, #68]	; 0x44
        m_AdcResultsConverted[i] = val;
    c326:	806b      	strh	r3, [r5, #2]
    c328:	64eb      	str	r3, [r5, #76]	; 0x4c
        m_AdcResultsConvertedFiltered[i] = val;
    c32a:	826b      	strh	r3, [r5, #18]
    c32c:	656b      	str	r3, [r5, #84]	; 0x54
        m_AdcResultsConverted[i] = val;
    c32e:	80aa      	strh	r2, [r5, #4]
    c330:	e01a      	b.n	c368 <_ZN9ClearCore10AdcManager10InitializeEv+0x32c>
    c332:	bf00      	nop
    c334:	0002d1c0 	.word	0x0002d1c0
    c338:	41008000 	.word	0x41008000
    c33c:	40001c00 	.word	0x40001c00
    c340:	40000800 	.word	0x40000800
    c344:	43002000 	.word	0x43002000
    c348:	00204600 	.word	0x00204600
    c34c:	20001eac 	.word	0x20001eac
    c350:	43002040 	.word	0x43002040
    c354:	00204700 	.word	0x00204700
    c358:	20001ed0 	.word	0x20001ed0
    c35c:	43002034 	.word	0x43002034
    c360:	25ff0000 	.word	0x25ff0000
    c364:	60f80000 	.word	0x60f80000
    c368:	65eb      	str	r3, [r5, #92]	; 0x5c
        m_AdcResultsConvertedFiltered[i] = val;
    c36a:	82aa      	strh	r2, [r5, #20]
    c36c:	626e      	str	r6, [r5, #36]	; 0x24
        m_AdcResultsConverted[i] = val;
    c36e:	80eb      	strh	r3, [r5, #6]
    c370:	636c      	str	r4, [r5, #52]	; 0x34
        m_AdcResultsConvertedFiltered[i] = val;
    c372:	82eb      	strh	r3, [r5, #22]
    m_initialized = true;
    c374:	f885 0060 	strb.w	r0, [r5, #96]	; 0x60
        m_AdcResultsConverted[i] = val;
    c378:	812b      	strh	r3, [r5, #8]
        m_AdcResultsConvertedFiltered[i] = val;
    c37a:	832b      	strh	r3, [r5, #24]
        m_AdcResultsConverted[i] = val;
    c37c:	816b      	strh	r3, [r5, #10]
        m_AdcResultsConvertedFiltered[i] = val;
    c37e:	836b      	strh	r3, [r5, #26]
        m_AdcResultsConverted[i] = val;
    c380:	81ab      	strh	r3, [r5, #12]
        m_AdcResultsConvertedFiltered[i] = val;
    c382:	83ab      	strh	r3, [r5, #28]
        m_AdcResultsConverted[i] = val;
    c384:	81eb      	strh	r3, [r5, #14]
        m_AdcResultsConvertedFiltered[i] = val;
    c386:	83eb      	strh	r3, [r5, #30]
}
    c388:	b005      	add	sp, #20
    c38a:	bdf0      	pop	{r4, r5, r6, r7, pc}
        case 8:
            ADC1->CTRLB.bit.RESSEL = ADC_CTRLB_RESSEL_8BIT_Val;
    c38c:	88d3      	ldrh	r3, [r2, #6]
    c38e:	f043 0318 	orr.w	r3, r3, #24
    c392:	80d3      	strh	r3, [r2, #6]
        default:
            // Invalid value
            return false;
    }

    m_AdcResolution = m_AdcResPending;
    c394:	f885 106c 	strb.w	r1, [r5, #108]	; 0x6c
    c398:	e723      	b.n	c1e2 <_ZN9ClearCore10AdcManager10InitializeEv+0x1a6>
            ADC1->CTRLB.bit.RESSEL = ADC_CTRLB_RESSEL_12BIT_Val;
    c39a:	88d0      	ldrh	r0, [r2, #6]
    c39c:	f363 00c4 	bfi	r0, r3, #3, #2
    c3a0:	80d0      	strh	r0, [r2, #6]
    c3a2:	e7f7      	b.n	c394 <_ZN9ClearCore10AdcManager10InitializeEv+0x358>
            ADC1->CTRLB.bit.RESSEL = ADC_CTRLB_RESSEL_10BIT_Val;
    c3a4:	88d3      	ldrh	r3, [r2, #6]
    c3a6:	2002      	movs	r0, #2
    c3a8:	f360 03c4 	bfi	r3, r0, #3, #2
    c3ac:	80d3      	strh	r3, [r2, #6]
    c3ae:	e7f1      	b.n	c394 <_ZN9ClearCore10AdcManager10InitializeEv+0x358>

0000c3b0 <_ZN9ClearCore10AdcManager6UpdateEv>:
void AdcManager::Update() {
    c3b0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    if (!m_initialized) {
    c3b4:	f890 3060 	ldrb.w	r3, [r0, #96]	; 0x60
    c3b8:	2b00      	cmp	r3, #0
    c3ba:	f000 80ab 	beq.w	c514 <_ZN9ClearCore10AdcManager6UpdateEv+0x164>
    if (ADC1->STATUS.bit.ADCBUSY ||
    c3be:	4b89      	ldr	r3, [pc, #548]	; (c5e4 <_ZN9ClearCore10AdcManager6UpdateEv+0x234>)
    c3c0:	4604      	mov	r4, r0
    c3c2:	f893 002f 	ldrb.w	r0, [r3, #47]	; 0x2f
    c3c6:	f010 0001 	ands.w	r0, r0, #1
    c3ca:	f000 80a5 	beq.w	c518 <_ZN9ClearCore10AdcManager6UpdateEv+0x168>
        if (++m_AdcBusyCount >= m_AdcTimeoutLimit) {
    c3ce:	6f23      	ldr	r3, [r4, #112]	; 0x70
    c3d0:	f894 206e 	ldrb.w	r2, [r4, #110]	; 0x6e
    c3d4:	3301      	adds	r3, #1
    c3d6:	4293      	cmp	r3, r2
    c3d8:	6723      	str	r3, [r4, #112]	; 0x70
    c3da:	d302      	bcc.n	c3e2 <_ZN9ClearCore10AdcManager6UpdateEv+0x32>
            m_AdcTimeout = true;
    c3dc:	2301      	movs	r3, #1
    c3de:	f884 3061 	strb.w	r3, [r4, #97]	; 0x61
    c3e2:	8c23      	ldrh	r3, [r4, #32]
        m_z = ((static_cast<int64_t>(m_z) * m_tc) >> 15) -
    c3e4:	6a66      	ldr	r6, [r4, #36]	; 0x24
        m_analogFilter[i].Update(m_AdcResultsConverted[i]);
    c3e6:	8821      	ldrh	r1, [r4, #0]
    c3e8:	6ae5      	ldr	r5, [r4, #44]	; 0x2c
    c3ea:	8d20      	ldrh	r0, [r4, #40]	; 0x28
    c3ec:	fb83 6706 	smull	r6, r7, r3, r6
    c3f0:	0bf2      	lsrs	r2, r6, #15
    c3f2:	ea42 4247 	orr.w	r2, r2, r7, lsl #17
    c3f6:	b289      	uxth	r1, r1
              ((static_cast<int32_t>(input) * m_tc) << 1) +
    c3f8:	eb02 4201 	add.w	r2, r2, r1, lsl #16
    c3fc:	fb01 f103 	mul.w	r1, r1, r3
    c400:	eba2 0241 	sub.w	r2, r2, r1, lsl #1
        return (m_z >> 16);
    c404:	0c13      	lsrs	r3, r2, #16
        m_AdcResultsConvertedFiltered[i] = m_analogFilter[i].LastOutput();
    c406:	8223      	strh	r3, [r4, #16]
        m_analogFilter[i].Update(m_AdcResultsConverted[i]);
    c408:	8866      	ldrh	r6, [r4, #2]
        m_z = ((static_cast<int64_t>(m_z) * m_tc) >> 15) -
    c40a:	6262      	str	r2, [r4, #36]	; 0x24
    c40c:	fb80 8905 	smull	r8, r9, r0, r5
    c410:	ea4f 33d8 	mov.w	r3, r8, lsr #15
    c414:	b2b2      	uxth	r2, r6
    c416:	ea43 4349 	orr.w	r3, r3, r9, lsl #17
              ((static_cast<int32_t>(input) * m_tc) << 1) +
    c41a:	fb02 f000 	mul.w	r0, r2, r0
    c41e:	eb03 4302 	add.w	r3, r3, r2, lsl #16
    c422:	eba3 0340 	sub.w	r3, r3, r0, lsl #1
    c426:	8e21      	ldrh	r1, [r4, #48]	; 0x30
        m_z = ((static_cast<int64_t>(m_z) * m_tc) >> 15) -
    c428:	6b62      	ldr	r2, [r4, #52]	; 0x34
    c42a:	62e3      	str	r3, [r4, #44]	; 0x2c
        return (m_z >> 16);
    c42c:	0c18      	lsrs	r0, r3, #16
        m_AdcResultsConvertedFiltered[i] = m_analogFilter[i].LastOutput();
    c42e:	8260      	strh	r0, [r4, #18]
        m_analogFilter[i].Update(m_AdcResultsConverted[i]);
    c430:	88a0      	ldrh	r0, [r4, #4]
    c432:	8f26      	ldrh	r6, [r4, #56]	; 0x38
    c434:	f8b4 5040 	ldrh.w	r5, [r4, #64]	; 0x40
        m_z = ((static_cast<int64_t>(m_z) * m_tc) >> 15) -
    c438:	fb81 2302 	smull	r2, r3, r1, r2
    c43c:	0bd2      	lsrs	r2, r2, #15
    c43e:	b280      	uxth	r0, r0
    c440:	ea42 4243 	orr.w	r2, r2, r3, lsl #17
              ((static_cast<int32_t>(input) * m_tc) << 1) +
    c444:	fb00 f101 	mul.w	r1, r0, r1
    c448:	eb02 4200 	add.w	r2, r2, r0, lsl #16
    c44c:	eba2 0041 	sub.w	r0, r2, r1, lsl #1
        m_z = ((static_cast<int64_t>(m_z) * m_tc) >> 15) -
    c450:	6be3      	ldr	r3, [r4, #60]	; 0x3c
    c452:	6360      	str	r0, [r4, #52]	; 0x34
        return (m_z >> 16);
    c454:	0c02      	lsrs	r2, r0, #16
        m_AdcResultsConvertedFiltered[i] = m_analogFilter[i].LastOutput();
    c456:	82a2      	strh	r2, [r4, #20]
        m_analogFilter[i].Update(m_AdcResultsConverted[i]);
    c458:	88e1      	ldrh	r1, [r4, #6]
    c45a:	f8b4 0048 	ldrh.w	r0, [r4, #72]	; 0x48
        m_z = ((static_cast<int64_t>(m_z) * m_tc) >> 15) -
    c45e:	fb86 8903 	smull	r8, r9, r6, r3
    c462:	ea4f 33d8 	mov.w	r3, r8, lsr #15
    c466:	b289      	uxth	r1, r1
    c468:	ea43 4349 	orr.w	r3, r3, r9, lsl #17
              ((static_cast<int32_t>(input) * m_tc) << 1) +
    c46c:	fb01 f606 	mul.w	r6, r1, r6
    c470:	eb03 4301 	add.w	r3, r3, r1, lsl #16
    c474:	eba3 0146 	sub.w	r1, r3, r6, lsl #1
        return (m_z >> 16);
    c478:	0c0b      	lsrs	r3, r1, #16
        m_z = ((static_cast<int64_t>(m_z) * m_tc) >> 15) -
    c47a:	6c66      	ldr	r6, [r4, #68]	; 0x44
        m_AdcResultsConvertedFiltered[i] = m_analogFilter[i].LastOutput();
    c47c:	82e3      	strh	r3, [r4, #22]
        m_analogFilter[i].Update(m_AdcResultsConverted[i]);
    c47e:	8923      	ldrh	r3, [r4, #8]
    c480:	63e1      	str	r1, [r4, #60]	; 0x3c
    c482:	fb85 6706 	smull	r6, r7, r5, r6
    c486:	0bf2      	lsrs	r2, r6, #15
    c488:	b29b      	uxth	r3, r3
    c48a:	ea42 4247 	orr.w	r2, r2, r7, lsl #17
              ((static_cast<int32_t>(input) * m_tc) << 1) +
    c48e:	fb03 f505 	mul.w	r5, r3, r5
    c492:	eb02 4203 	add.w	r2, r2, r3, lsl #16
    c496:	eba2 0245 	sub.w	r2, r2, r5, lsl #1
        return (m_z >> 16);
    c49a:	0c13      	lsrs	r3, r2, #16
        m_z = ((static_cast<int64_t>(m_z) * m_tc) >> 15) -
    c49c:	6ce6      	ldr	r6, [r4, #76]	; 0x4c
        m_AdcResultsConvertedFiltered[i] = m_analogFilter[i].LastOutput();
    c49e:	8323      	strh	r3, [r4, #24]
        m_analogFilter[i].Update(m_AdcResultsConverted[i]);
    c4a0:	8961      	ldrh	r1, [r4, #10]
    c4a2:	6462      	str	r2, [r4, #68]	; 0x44
    c4a4:	fb80 6706 	smull	r6, r7, r0, r6
    c4a8:	0bf3      	lsrs	r3, r6, #15
    c4aa:	b28a      	uxth	r2, r1
    c4ac:	ea43 4347 	orr.w	r3, r3, r7, lsl #17
              ((static_cast<int32_t>(input) * m_tc) << 1) +
    c4b0:	fb02 f000 	mul.w	r0, r2, r0
    c4b4:	eb03 4302 	add.w	r3, r3, r2, lsl #16
    c4b8:	eba3 0340 	sub.w	r3, r3, r0, lsl #1
        return (m_z >> 16);
    c4bc:	0c1a      	lsrs	r2, r3, #16
        m_AdcResultsConvertedFiltered[i] = m_analogFilter[i].LastOutput();
    c4be:	8362      	strh	r2, [r4, #26]
        m_z = ((static_cast<int64_t>(m_z) * m_tc) >> 15) -
    c4c0:	64e3      	str	r3, [r4, #76]	; 0x4c
        m_analogFilter[i].Update(m_AdcResultsConverted[i]);
    c4c2:	89a0      	ldrh	r0, [r4, #12]
    c4c4:	f8b4 3050 	ldrh.w	r3, [r4, #80]	; 0x50
    c4c8:	6d62      	ldr	r2, [r4, #84]	; 0x54
    c4ca:	f8b4 1058 	ldrh.w	r1, [r4, #88]	; 0x58
    c4ce:	6de6      	ldr	r6, [r4, #92]	; 0x5c
    c4d0:	fb83 8902 	smull	r8, r9, r3, r2
    c4d4:	ea4f 32d8 	mov.w	r2, r8, lsr #15
    c4d8:	b280      	uxth	r0, r0
    c4da:	ea42 4249 	orr.w	r2, r2, r9, lsl #17
              ((static_cast<int32_t>(input) * m_tc) << 1) +
    c4de:	fb00 f303 	mul.w	r3, r0, r3
    c4e2:	eb02 4200 	add.w	r2, r2, r0, lsl #16
    c4e6:	eba2 0243 	sub.w	r2, r2, r3, lsl #1
        return (m_z >> 16);
    c4ea:	0c13      	lsrs	r3, r2, #16
        m_AdcResultsConvertedFiltered[i] = m_analogFilter[i].LastOutput();
    c4ec:	83a3      	strh	r3, [r4, #28]
        m_z = ((static_cast<int64_t>(m_z) * m_tc) >> 15) -
    c4ee:	fb81 6706 	smull	r6, r7, r1, r6
        m_analogFilter[i].Update(m_AdcResultsConverted[i]);
    c4f2:	89e0      	ldrh	r0, [r4, #14]
    c4f4:	6562      	str	r2, [r4, #84]	; 0x54
    c4f6:	0bf3      	lsrs	r3, r6, #15
    c4f8:	b282      	uxth	r2, r0
    c4fa:	ea43 4347 	orr.w	r3, r3, r7, lsl #17
              ((static_cast<int32_t>(input) * m_tc) << 1) +
    c4fe:	fb02 f101 	mul.w	r1, r2, r1
    c502:	eb03 4302 	add.w	r3, r3, r2, lsl #16
    c506:	eba3 0341 	sub.w	r3, r3, r1, lsl #1
        return (m_z >> 16);
    c50a:	0c1a      	lsrs	r2, r3, #16
        m_z = ((static_cast<int64_t>(m_z) * m_tc) >> 15) -
    c50c:	65e3      	str	r3, [r4, #92]	; 0x5c
        m_AdcResultsConvertedFiltered[i] = m_analogFilter[i].LastOutput();
    c50e:	83e2      	strh	r2, [r4, #30]
    c510:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    c514:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
            DmaManager::Channel(DMA_ADC_RESULTS)->CHCTRLA.bit.ENABLE) {
    c518:	f001 fcb0 	bl	de7c <_ZN9ClearCore10DmaManager7ChannelENS_11DmaChannelsE>
    c51c:	6803      	ldr	r3, [r0, #0]
    c51e:	f3c3 0340 	ubfx	r3, r3, #1, #1
    c522:	b2de      	uxtb	r6, r3
    if (ADC1->STATUS.bit.ADCBUSY ||
    c524:	2e00      	cmp	r6, #0
    c526:	f47f af52 	bne.w	c3ce <_ZN9ClearCore10AdcManager6UpdateEv+0x1e>
        m_AdcBusyCount = 0;
    c52a:	6726      	str	r6, [r4, #112]	; 0x70
        m_AdcTimeout = false;
    c52c:	f884 3061 	strb.w	r3, [r4, #97]	; 0x61
    c530:	2501      	movs	r5, #1
    c532:	f8df 80bc 	ldr.w	r8, [pc, #188]	; c5f0 <_ZN9ClearCore10AdcManager6UpdateEv+0x240>
            if (i == ADC_VSUPPLY_MON && StatusMgr.StatusRT().bit.HBridgeReset) {
    c536:	4f2c      	ldr	r7, [pc, #176]	; (c5e8 <_ZN9ClearCore10AdcManager6UpdateEv+0x238>)
    c538:	e00f      	b.n	c55a <_ZN9ClearCore10AdcManager6UpdateEv+0x1aa>
                AdcResultsRaw[i] << (15 - m_AdcResolution);
    c53a:	f838 3016 	ldrh.w	r3, [r8, r6, lsl #1]
    c53e:	f894 206c 	ldrb.w	r2, [r4, #108]	; 0x6c
    c542:	b29b      	uxth	r3, r3
    c544:	f1c2 010f 	rsb	r1, r2, #15
    c548:	408b      	lsls	r3, r1
    c54a:	b29b      	uxth	r3, r3
        for (uint8_t i = 0; i < ADC_CHANNEL_COUNT; i++) {
    c54c:	2d07      	cmp	r5, #7
            m_AdcResultsConverted[i] =
    c54e:	f824 3016 	strh.w	r3, [r4, r6, lsl #1]
        for (uint8_t i = 0; i < ADC_CHANNEL_COUNT; i++) {
    c552:	462e      	mov	r6, r5
    c554:	dc0c      	bgt.n	c570 <_ZN9ClearCore10AdcManager6UpdateEv+0x1c0>
    c556:	3501      	adds	r5, #1
    c558:	b2ed      	uxtb	r5, r5
            if (i == ADC_VSUPPLY_MON && StatusMgr.StatusRT().bit.HBridgeReset) {
    c55a:	2d01      	cmp	r5, #1
    c55c:	d1ed      	bne.n	c53a <_ZN9ClearCore10AdcManager6UpdateEv+0x18a>
    c55e:	f04f 31ff 	mov.w	r1, #4294967295
    c562:	6838      	ldr	r0, [r7, #0]
    c564:	f005 fab0 	bl	11ac8 <_ZN9ClearCore13StatusManager8StatusRTENS0_14StatusRegisterE>
    c568:	0703      	lsls	r3, r0, #28
    c56a:	d5e6      	bpl.n	c53a <_ZN9ClearCore10AdcManager6UpdateEv+0x18a>
        for (uint8_t i = 0; i < ADC_CHANNEL_COUNT; i++) {
    c56c:	462e      	mov	r6, r5
    c56e:	e7f2      	b.n	c556 <_ZN9ClearCore10AdcManager6UpdateEv+0x1a6>
        if (m_AdcResolution != m_AdcResPending) {
    c570:	f894 306d 	ldrb.w	r3, [r4, #109]	; 0x6d
    c574:	429a      	cmp	r2, r3
    c576:	d005      	beq.n	c584 <_ZN9ClearCore10AdcManager6UpdateEv+0x1d4>
    switch (m_AdcResPending) {
    c578:	2b0a      	cmp	r3, #10
    c57a:	d02c      	beq.n	c5d6 <_ZN9ClearCore10AdcManager6UpdateEv+0x226>
    c57c:	2b0c      	cmp	r3, #12
    c57e:	d024      	beq.n	c5ca <_ZN9ClearCore10AdcManager6UpdateEv+0x21a>
    c580:	2b08      	cmp	r3, #8
    c582:	d01a      	beq.n	c5ba <_ZN9ClearCore10AdcManager6UpdateEv+0x20a>
        m_shiftRegSnapshot = m_shiftRegPending;
    c584:	6ea2      	ldr	r2, [r4, #104]	; 0x68
        m_shiftRegPending = ShiftReg.LastOutput();
    c586:	4b19      	ldr	r3, [pc, #100]	; (c5ec <_ZN9ClearCore10AdcManager6UpdateEv+0x23c>)
        m_shiftRegSnapshot = m_shiftRegPending;
    c588:	6662      	str	r2, [r4, #100]	; 0x64
        m_shiftRegPending = ShiftReg.LastOutput();
    c58a:	f8d3 3110 	ldr.w	r3, [r3, #272]	; 0x110
    c58e:	66a3      	str	r3, [r4, #104]	; 0x68
    DmaManager::Channel(DMA_ADC_RESULTS)->CHCTRLA.reg |= DMAC_CHCTRLA_ENABLE;
    c590:	2000      	movs	r0, #0
    c592:	f001 fc73 	bl	de7c <_ZN9ClearCore10DmaManager7ChannelENS_11DmaChannelsE>
    c596:	4602      	mov	r2, r0
    DmaManager::Channel(DMA_ADC_SEQUENCE)->CHCTRLA.reg |= DMAC_CHCTRLA_ENABLE;
    c598:	2001      	movs	r0, #1
    DmaManager::Channel(DMA_ADC_RESULTS)->CHCTRLA.reg |= DMAC_CHCTRLA_ENABLE;
    c59a:	6813      	ldr	r3, [r2, #0]
    c59c:	f043 0302 	orr.w	r3, r3, #2
    c5a0:	6013      	str	r3, [r2, #0]
    DmaManager::Channel(DMA_ADC_SEQUENCE)->CHCTRLA.reg |= DMAC_CHCTRLA_ENABLE;
    c5a2:	f001 fc6b 	bl	de7c <_ZN9ClearCore10DmaManager7ChannelENS_11DmaChannelsE>
    c5a6:	6803      	ldr	r3, [r0, #0]
    ADC1->INPUTCTRL.reg &= ~ADC_INPUTCTRL_DSEQSTOP;
    c5a8:	4a0e      	ldr	r2, [pc, #56]	; (c5e4 <_ZN9ClearCore10AdcManager6UpdateEv+0x234>)
    DmaManager::Channel(DMA_ADC_SEQUENCE)->CHCTRLA.reg |= DMAC_CHCTRLA_ENABLE;
    c5aa:	f043 0302 	orr.w	r3, r3, #2
    c5ae:	6003      	str	r3, [r0, #0]
    ADC1->INPUTCTRL.reg &= ~ADC_INPUTCTRL_DSEQSTOP;
    c5b0:	8893      	ldrh	r3, [r2, #4]
    c5b2:	f3c3 030e 	ubfx	r3, r3, #0, #15
    c5b6:	8093      	strh	r3, [r2, #4]
    c5b8:	e713      	b.n	c3e2 <_ZN9ClearCore10AdcManager6UpdateEv+0x32>
            ADC1->CTRLB.bit.RESSEL = ADC_CTRLB_RESSEL_8BIT_Val;
    c5ba:	490a      	ldr	r1, [pc, #40]	; (c5e4 <_ZN9ClearCore10AdcManager6UpdateEv+0x234>)
    c5bc:	88ca      	ldrh	r2, [r1, #6]
    c5be:	f042 0218 	orr.w	r2, r2, #24
    c5c2:	80ca      	strh	r2, [r1, #6]
    m_AdcResolution = m_AdcResPending;
    c5c4:	f884 306c 	strb.w	r3, [r4, #108]	; 0x6c
    c5c8:	e7dc      	b.n	c584 <_ZN9ClearCore10AdcManager6UpdateEv+0x1d4>
            ADC1->CTRLB.bit.RESSEL = ADC_CTRLB_RESSEL_12BIT_Val;
    c5ca:	4a06      	ldr	r2, [pc, #24]	; (c5e4 <_ZN9ClearCore10AdcManager6UpdateEv+0x234>)
    c5cc:	88d1      	ldrh	r1, [r2, #6]
    c5ce:	f36f 01c4 	bfc	r1, #3, #2
    c5d2:	80d1      	strh	r1, [r2, #6]
    c5d4:	e7f6      	b.n	c5c4 <_ZN9ClearCore10AdcManager6UpdateEv+0x214>
            ADC1->CTRLB.bit.RESSEL = ADC_CTRLB_RESSEL_10BIT_Val;
    c5d6:	4a03      	ldr	r2, [pc, #12]	; (c5e4 <_ZN9ClearCore10AdcManager6UpdateEv+0x234>)
    c5d8:	88d1      	ldrh	r1, [r2, #6]
    c5da:	2002      	movs	r0, #2
    c5dc:	f360 01c4 	bfi	r1, r0, #3, #2
    c5e0:	80d1      	strh	r1, [r2, #6]
    c5e2:	e7ef      	b.n	c5c4 <_ZN9ClearCore10AdcManager6UpdateEv+0x214>
    c5e4:	43002000 	.word	0x43002000
    c5e8:	20001fc8 	.word	0x20001fc8
    c5ec:	20001a80 	.word	0x20001a80
    c5f0:	20001e9c 	.word	0x20001e9c

0000c5f4 <_ZN9ClearCore10AdcManager8FilterTcENS0_11AdcChannelsEtNS0_11FilterUnitsE>:
}

bool AdcManager::FilterTc(AdcChannels adcChannel,
                          uint16_t tc,
                          FilterUnits theUnits) {
    if (adcChannel >= ADC_CHANNEL_COUNT) {
    c5f4:	2907      	cmp	r1, #7
    c5f6:	dc33      	bgt.n	c660 <_ZN9ClearCore10AdcManager8FilterTcENS0_11AdcChannelsEtNS0_11FilterUnitsE+0x6c>
                          FilterUnits theUnits) {
    c5f8:	b530      	push	{r4, r5, lr}
        return false;
    }

    switch (theUnits) {
    c5fa:	2b01      	cmp	r3, #1
                          FilterUnits theUnits) {
    c5fc:	b083      	sub	sp, #12
    c5fe:	4605      	mov	r5, r0
    switch (theUnits) {
    c600:	d033      	beq.n	c66a <_ZN9ClearCore10AdcManager8FilterTcENS0_11AdcChannelsEtNS0_11FilterUnitsE+0x76>
    c602:	d336      	bcc.n	c672 <_ZN9ClearCore10AdcManager8FilterTcENS0_11AdcChannelsEtNS0_11FilterUnitsE+0x7e>
    c604:	2b02      	cmp	r3, #2
    c606:	d12d      	bne.n	c664 <_ZN9ClearCore10AdcManager8FilterTcENS0_11AdcChannelsEtNS0_11FilterUnitsE+0x70>
        float tcTemp = powf(.01, 1. / riseSamples99pct) * 32768 + 0.5;
    c608:	4610      	mov	r0, r2
            return true;
        case AdcManager::FilterUnits::FILTER_UNIT_MS:
            m_analogFilter[adcChannel].Tc_ms(tc);
            return true;
        case AdcManager::FilterUnits::FILTER_UNIT_SAMPLES:
            m_analogFilter[adcChannel].TcSamples(tc);
    c60a:	1d0c      	adds	r4, r1, #4
    c60c:	f018 ff00 	bl	25410 <__aeabi_i2d>
    c610:	460b      	mov	r3, r1
    c612:	4602      	mov	r2, r0
    c614:	491a      	ldr	r1, [pc, #104]	; (c680 <_ZN9ClearCore10AdcManager8FilterTcENS0_11AdcChannelsEtNS0_11FilterUnitsE+0x8c>)
    c616:	2000      	movs	r0, #0
    c618:	f019 f88a 	bl	25730 <__aeabi_ddiv>
    c61c:	f019 fa40 	bl	25aa0 <__aeabi_d2f>
    c620:	ed9f 0a18 	vldr	s0, [pc, #96]	; c684 <_ZN9ClearCore10AdcManager8FilterTcENS0_11AdcChannelsEtNS0_11FilterUnitsE+0x90>
    c624:	ee00 0a90 	vmov	s1, r0
    c628:	f017 ff9a 	bl	24560 <powf>
    c62c:	eddf 6a16 	vldr	s13, [pc, #88]	; c688 <_ZN9ClearCore10AdcManager8FilterTcENS0_11AdcChannelsEtNS0_11FilterUnitsE+0x94>
        m_tc = (tcTemp < INT16_MAX) ? tcTemp : INT16_MAX;
    c630:	ed9f 7a16 	vldr	s14, [pc, #88]	; c68c <_ZN9ClearCore10AdcManager8FilterTcENS0_11AdcChannelsEtNS0_11FilterUnitsE+0x98>
        float tcTemp = powf(.01, 1. / riseSamples99pct) * 32768 + 0.5;
    c634:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
    c638:	eee0 7a26 	vfma.f32	s15, s0, s13
            return true;
    c63c:	2001      	movs	r0, #1
        m_tc = (tcTemp < INT16_MAX) ? tcTemp : INT16_MAX;
    c63e:	eef4 7ac7 	vcmpe.f32	s15, s14
    c642:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    c646:	bf49      	itett	mi
    c648:	eefc 7ae7 	vcvtmi.u32.f32	s15, s15
    c64c:	f647 73ff 	movwpl	r3, #32767	; 0x7fff
    c650:	edcd 7a01 	vstrmi	s15, [sp, #4]
    c654:	f8bd 3004 	ldrhmi.w	r3, [sp, #4]
    c658:	f825 3034 	strh.w	r3, [r5, r4, lsl #3]
        default:
            // Error
            return false;
    }
}
    c65c:	b003      	add	sp, #12
    c65e:	bd30      	pop	{r4, r5, pc}
        return false;
    c660:	2000      	movs	r0, #0
    c662:	4770      	bx	lr
            return false;
    c664:	2000      	movs	r0, #0
}
    c666:	b003      	add	sp, #12
    c668:	bd30      	pop	{r4, r5, pc}
        TcSamples(riseMs99pct * MS_TO_SAMPLES);
    c66a:	eb02 0282 	add.w	r2, r2, r2, lsl #2
        float tcTemp = powf(.01, 1. / riseSamples99pct) * 32768 + 0.5;
    c66e:	b290      	uxth	r0, r2
    c670:	e7cb      	b.n	c60a <_ZN9ClearCore10AdcManager8FilterTcENS0_11AdcChannelsEtNS0_11FilterUnitsE+0x16>
            m_analogFilter[adcChannel].Tc(tc);
    c672:	3104      	adds	r1, #4
            return true;
    c674:	2001      	movs	r0, #1
        m_tc = newTc;
    c676:	f825 2031 	strh.w	r2, [r5, r1, lsl #3]
}
    c67a:	b003      	add	sp, #12
    c67c:	bd30      	pop	{r4, r5, pc}
    c67e:	bf00      	nop
    c680:	3ff00000 	.word	0x3ff00000
    c684:	3c23d70a 	.word	0x3c23d70a
    c688:	47000000 	.word	0x47000000
    c68c:	46fffe00 	.word	0x46fffe00

0000c690 <_GLOBAL__sub_I__ZN9ClearCore6AdcMgrE>:
    DmaManager::Channel(DMA_ADC_RESULTS)->CHINTFLAG.reg =
        DMAC_CHINTENCLR_TCMPL; // clear interrupt
}
#endif

    c690:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
AdcManager &AdcMgr = AdcManager::Instance();
    c692:	f7ff fc8f 	bl	bfb4 <_ZN9ClearCore10AdcManager8InstanceEv>
    c696:	4a0f      	ldr	r2, [pc, #60]	; (c6d4 <_GLOBAL__sub_I__ZN9ClearCore6AdcMgrE+0x44>)
        bit.INPUTCTRL.reg = inputCtrl;
    c698:	4b0f      	ldr	r3, [pc, #60]	; (c6d8 <_GLOBAL__sub_I__ZN9ClearCore6AdcMgrE+0x48>)
AdcManager &AdcMgr = AdcManager::Instance();
    c69a:	6010      	str	r0, [r2, #0]
        bit.INPUTCTRL.reg = inputCtrl;
    c69c:	2104      	movs	r1, #4
    c69e:	2205      	movs	r2, #5
    c6a0:	2706      	movs	r7, #6
    c6a2:	2607      	movs	r6, #7
    c6a4:	2508      	movs	r5, #8
    c6a6:	2409      	movs	r4, #9
    c6a8:	200a      	movs	r0, #10
    c6aa:	8019      	strh	r1, [r3, #0]
    c6ac:	809a      	strh	r2, [r3, #4]
    c6ae:	f248 010b 	movw	r1, #32779	; 0x800b
        bit.CTRLB.reg = ctrlb;
    c6b2:	2200      	movs	r2, #0
        bit.INPUTCTRL.reg = inputCtrl;
    c6b4:	811f      	strh	r7, [r3, #8]
    c6b6:	819e      	strh	r6, [r3, #12]
    c6b8:	821d      	strh	r5, [r3, #16]
    c6ba:	829c      	strh	r4, [r3, #20]
    c6bc:	8318      	strh	r0, [r3, #24]
    c6be:	8399      	strh	r1, [r3, #28]
        bit.CTRLB.reg = ctrlb;
    c6c0:	805a      	strh	r2, [r3, #2]
    c6c2:	80da      	strh	r2, [r3, #6]
    c6c4:	815a      	strh	r2, [r3, #10]
    c6c6:	81da      	strh	r2, [r3, #14]
    c6c8:	825a      	strh	r2, [r3, #18]
    c6ca:	82da      	strh	r2, [r3, #22]
    c6cc:	835a      	strh	r2, [r3, #26]
    c6ce:	83da      	strh	r2, [r3, #30]
    c6d0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    c6d2:	bf00      	nop
    c6d4:	20001eac 	.word	0x20001eac
    c6d8:	20001eb0 	.word	0x20001eb0

0000c6dc <_ZN9ClearCore9DigitalIn17ExternalInterruptEv>:
        \note A value of -1 denotes that the connector has no external
        interrupt available.
    **/
    int8_t ExternalInterrupt() override {
        return m_extInt;
    }
    c6dc:	f990 0018 	ldrsb.w	r0, [r0, #24]
    c6e0:	4770      	bx	lr
    c6e2:	bf00      	nop

0000c6e4 <_ZN9ClearCore12DigitalInOut11IsInHwFaultEv>:

    /**
        \copydoc Connector::IsInHwFault()
    **/
    bool IsInHwFault() override {
        return (volatile bool &)m_isInFault;
    c6e4:	f890 003d 	ldrb.w	r0, [r0, #61]	; 0x3d
    }
    c6e8:	4770      	bx	lr
    c6ea:	bf00      	nop

0000c6ec <_ZN9ClearCore21DigitalInOutAnalogOut4ModeEv>:
    /**
        \copydoc Connector::Mode
    **/
    virtual ConnectorModes Mode() override {
        return Connector::Mode();
    }
    c6ec:	7980      	ldrb	r0, [r0, #6]
    c6ee:	4770      	bx	lr

0000c6f0 <_ZN9ClearCore21DigitalInOutAnalogOut4TypeEv>:

        \return The type of the current connector.
    **/
    Connector::ConnectorTypes Type() override {
        return Connector::ANALOG_OUT_DIGITAL_IN_OUT_TYPE;
    }
    c6f0:	2004      	movs	r0, #4
    c6f2:	4770      	bx	lr

0000c6f4 <_ZN9ClearCore21DigitalInOutAnalogOut10IsWritableEv>:

    return (m_mode == newMode);
}

bool DigitalInOutAnalogOut::IsWritable() {
    return m_mode == OUTPUT_DIGITAL || m_mode == OUTPUT_ANALOG ||
    c6f4:	7980      	ldrb	r0, [r0, #6]
    c6f6:	1ec3      	subs	r3, r0, #3
    c6f8:	2b01      	cmp	r3, #1
    c6fa:	bf83      	ittte	hi
    c6fc:	3806      	subhi	r0, #6
    c6fe:	fab0 f080 	clzhi	r0, r0
    c702:	0940      	lsrhi	r0, r0, #5
    c704:	2001      	movls	r0, #1
           m_mode == OUTPUT_PWM;
}
    c706:	4770      	bx	lr

0000c708 <_ZN9ClearCore21DigitalInOutAnalogOutC1ENS_13ShiftRegister5MasksEPK15PeripheralRouteS5_S5_b>:
DigitalInOutAnalogOut::DigitalInOutAnalogOut(
    c708:	b530      	push	{r4, r5, lr}
    c70a:	b083      	sub	sp, #12
    c70c:	f89d 401c 	ldrb.w	r4, [sp, #28]
    c710:	9d06      	ldr	r5, [sp, #24]
      m_dacSpan(DAC_DEFAULT_SPAN) {}
    c712:	9400      	str	r4, [sp, #0]
DigitalInOutAnalogOut::DigitalInOutAnalogOut(
    c714:	4604      	mov	r4, r0
      m_dacSpan(DAC_DEFAULT_SPAN) {}
    c716:	f000 fcfd 	bl	d114 <_ZN9ClearCore12DigitalInOutC1ENS_13ShiftRegister5MasksEPK15PeripheralRouteS5_b>
      m_analogPort(outputAnalogInfo->gpioPort),
    c71a:	f995 3001 	ldrsb.w	r3, [r5, #1]
      m_dacSpan(DAC_DEFAULT_SPAN) {}
    c71e:	4a05      	ldr	r2, [pc, #20]	; (c734 <_ZN9ClearCore21DigitalInOutAnalogOutC1ENS_13ShiftRegister5MasksEPK15PeripheralRouteS5_S5_b+0x2c>)
      m_analogPort(outputAnalogInfo->gpioPort),
    c720:	6623      	str	r3, [r4, #96]	; 0x60
      m_dacSpan(DAC_DEFAULT_SPAN) {}
    c722:	6022      	str	r2, [r4, #0]
      m_analogDataBit(outputAnalogInfo->gpioPin),
    c724:	78aa      	ldrb	r2, [r5, #2]
      m_dacSpan(DAC_DEFAULT_SPAN) {}
    c726:	4b04      	ldr	r3, [pc, #16]	; (c738 <_ZN9ClearCore21DigitalInOutAnalogOutC1ENS_13ShiftRegister5MasksEPK15PeripheralRouteS5_S5_b+0x30>)
      m_analogDataBit(outputAnalogInfo->gpioPin),
    c728:	6662      	str	r2, [r4, #100]	; 0x64
      m_dacSpan(DAC_DEFAULT_SPAN) {}
    c72a:	4620      	mov	r0, r4
    c72c:	66a3      	str	r3, [r4, #104]	; 0x68
    c72e:	b003      	add	sp, #12
    c730:	bd30      	pop	{r4, r5, pc}
    c732:	bf00      	nop
    c734:	0002d218 	.word	0x0002d218
    c738:	06a40000 	.word	0x06a40000

0000c73c <_ZN9ClearCore21DigitalInOutAnalogOut13DacInitializeEv>:
}

/**
    One-time DAC Configuration
**/
void DigitalInOutAnalogOut::DacInitialize() {
    c73c:	b538      	push	{r3, r4, r5, lr}
    // Give the DAC a clock
    // The DAC will misbehave if clocked at more than 100 MHz
    SET_CLOCK_SOURCE(DAC_GCLK_ID, 4);
    c73e:	4a3a      	ldr	r2, [pc, #232]	; (c828 <_ZN9ClearCore21DigitalInOutAnalogOut13DacInitializeEv+0xec>)
    c740:	f8d2 3128 	ldr.w	r3, [r2, #296]	; 0x128
    c744:	f36f 1386 	bfc	r3, #6, #1
void DigitalInOutAnalogOut::DacInitialize() {
    c748:	4604      	mov	r4, r0
    SET_CLOCK_SOURCE(DAC_GCLK_ID, 4);
    c74a:	f8c2 3128 	str.w	r3, [r2, #296]	; 0x128
    c74e:	f8d2 3128 	ldr.w	r3, [r2, #296]	; 0x128
    c752:	065d      	lsls	r5, r3, #25
    c754:	d4fb      	bmi.n	c74e <_ZN9ClearCore21DigitalInOutAnalogOut13DacInitializeEv+0x12>
    c756:	f8d2 3128 	ldr.w	r3, [r2, #296]	; 0x128
    c75a:	4933      	ldr	r1, [pc, #204]	; (c828 <_ZN9ClearCore21DigitalInOutAnalogOut13DacInitializeEv+0xec>)
    c75c:	2004      	movs	r0, #4
    c75e:	f360 0303 	bfi	r3, r0, #0, #4
    c762:	f8c2 3128 	str.w	r3, [r2, #296]	; 0x128
    c766:	f8d2 3128 	ldr.w	r3, [r2, #296]	; 0x128
    c76a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    c76e:	f8c2 3128 	str.w	r3, [r2, #296]	; 0x128
    c772:	684b      	ldr	r3, [r1, #4]
    c774:	06d8      	lsls	r0, r3, #27
    c776:	d4fc      	bmi.n	c772 <_ZN9ClearCore21DigitalInOutAnalogOut13DacInitializeEv+0x36>

    // Set the supply controller's internal bandgap reference
    SUPC->VREF.bit.SEL = SUPC_VREF_SEL_2V5_Val;
    c778:	4a2c      	ldr	r2, [pc, #176]	; (c82c <_ZN9ClearCore21DigitalInOutAnalogOut13DacInitializeEv+0xf0>)

    // Enables the peripheral clock to the DAC
    CLOCK_ENABLE(APBDMASK, DAC_);
    c77a:	492d      	ldr	r1, [pc, #180]	; (c830 <_ZN9ClearCore21DigitalInOutAnalogOut13DacInitializeEv+0xf4>)
    SUPC->VREF.bit.SEL = SUPC_VREF_SEL_2V5_Val;
    c77c:	69d0      	ldr	r0, [r2, #28]

    // Reset the DAC module
    DAC->CTRLA.bit.SWRST = 1;
    c77e:	4b2d      	ldr	r3, [pc, #180]	; (c834 <_ZN9ClearCore21DigitalInOutAnalogOut13DacInitializeEv+0xf8>)
    SUPC->VREF.bit.SEL = SUPC_VREF_SEL_2V5_Val;
    c780:	2507      	movs	r5, #7
    c782:	f365 4013 	bfi	r0, r5, #16, #4
    c786:	61d0      	str	r0, [r2, #28]
    CLOCK_ENABLE(APBDMASK, DAC_);
    c788:	6a0a      	ldr	r2, [r1, #32]
    c78a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
    c78e:	620a      	str	r2, [r1, #32]
    DAC->CTRLA.bit.SWRST = 1;
    c790:	781a      	ldrb	r2, [r3, #0]
    c792:	f042 0201 	orr.w	r2, r2, #1
    c796:	701a      	strb	r2, [r3, #0]
    SYNCBUSY_WAIT(DAC, DAC_SYNCBUSY_SWRST);
    c798:	689a      	ldr	r2, [r3, #8]
    c79a:	07d2      	lsls	r2, r2, #31
    c79c:	d4fc      	bmi.n	c798 <_ZN9ClearCore21DigitalInOutAnalogOut13DacInitializeEv+0x5c>

    // Use differential mode
    DAC->CTRLB.bit.DIFF = 1;
    c79e:	785a      	ldrb	r2, [r3, #1]
    c7a0:	f042 0201 	orr.w	r2, r2, #1
    c7a4:	705a      	strb	r2, [r3, #1]

    // Set to internal bandgap reference
    DAC->CTRLB.bit.REFSEL = DAC_CTRLB_REFSEL_INTREF_Val;
    c7a6:	785a      	ldrb	r2, [r3, #1]
    c7a8:	f042 0206 	orr.w	r2, r2, #6
    c7ac:	705a      	strb	r2, [r3, #1]

    // Enable the DAC
    DAC->DACCTRL[0].bit.ENABLE = 1;
    c7ae:	899a      	ldrh	r2, [r3, #12]
    c7b0:	f042 0202 	orr.w	r2, r2, #2
    c7b4:	819a      	strh	r2, [r3, #12]
    // Set refresh rate to (5 x 30) = 150 us
    DAC->DACCTRL[0].bit.REFRESH = 0x5;
    c7b6:	899a      	ldrh	r2, [r3, #12]
    c7b8:	2105      	movs	r1, #5
    c7ba:	f361 220b 	bfi	r2, r1, #8, #4
    c7be:	819a      	strh	r2, [r3, #12]
    // Current control: CC12M (6 MHz < GCLK_DAC <= 12 MHz)
    DAC->DACCTRL[0].bit.CCTRL = DAC_DACCTRL_CCTRL_CC12M_Val;
    c7c0:	899a      	ldrh	r2, [r3, #12]
    c7c2:	2102      	movs	r1, #2
    c7c4:	f361 0283 	bfi	r2, r1, #2, #2
    c7c8:	819a      	strh	r2, [r3, #12]

/**
    Write a value to the DAC DATA register.
**/
void DigitalInOutAnalogOut::DacRegisterWrite(uint16_t value) {
    if (DAC->DATA[0].reg != value) {
    c7ca:	8a1b      	ldrh	r3, [r3, #16]
    c7cc:	b29b      	uxth	r3, r3
    c7ce:	bb23      	cbnz	r3, c81a <_ZN9ClearCore21DigitalInOutAnalogOut13DacInitializeEv+0xde>
    m_dacZero = NvmMgr.Int16(NvmManager::NVM_LOC_DAC_ZERO);
    c7d0:	4b19      	ldr	r3, [pc, #100]	; (c838 <_ZN9ClearCore21DigitalInOutAnalogOut13DacInitializeEv+0xfc>)
    c7d2:	681d      	ldr	r5, [r3, #0]
    c7d4:	f44f 71ee 	mov.w	r1, #476	; 0x1dc
    c7d8:	4628      	mov	r0, r5
    c7da:	f005 fbc1 	bl	11f60 <_ZN9ClearCore10NvmManager5Int16ENS0_12NvmLocationsE>
    m_dacSpan = NvmMgr.Int16(NvmManager::NVM_LOC_DAC_SPAN);
    c7de:	f44f 71ef 	mov.w	r1, #478	; 0x1de
    m_dacZero = NvmMgr.Int16(NvmManager::NVM_LOC_DAC_ZERO);
    c7e2:	f8a4 0068 	strh.w	r0, [r4, #104]	; 0x68
    m_dacSpan = NvmMgr.Int16(NvmManager::NVM_LOC_DAC_SPAN);
    c7e6:	4628      	mov	r0, r5
    c7e8:	f005 fbba 	bl	11f60 <_ZN9ClearCore10NvmManager5Int16ENS0_12NvmLocationsE>
    if (m_dacZero > DAC_MAX_VALUE) {
    c7ec:	f8b4 3068 	ldrh.w	r3, [r4, #104]	; 0x68
    m_dacSpan = NvmMgr.Int16(NvmManager::NVM_LOC_DAC_SPAN);
    c7f0:	b280      	uxth	r0, r0
    if (m_dacZero > DAC_MAX_VALUE) {
    c7f2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
    m_dacSpan = NvmMgr.Int16(NvmManager::NVM_LOC_DAC_SPAN);
    c7f6:	f8a4 006a 	strh.w	r0, [r4, #106]	; 0x6a
    if (m_dacZero > DAC_MAX_VALUE) {
    c7fa:	461a      	mov	r2, r3
    c7fc:	db03      	blt.n	c806 <_ZN9ClearCore21DigitalInOutAnalogOut13DacInitializeEv+0xca>
        m_dacZero = 0;
    c7fe:	2300      	movs	r3, #0
    c800:	461a      	mov	r2, r3
    c802:	f8a4 3068 	strh.w	r3, [r4, #104]	; 0x68
    if (m_dacZero + m_dacSpan > DAC_MAX_VALUE) {
    c806:	4410      	add	r0, r2
    c808:	f5b0 6f00 	cmp.w	r0, #2048	; 0x800
    c80c:	db04      	blt.n	c818 <_ZN9ClearCore21DigitalInOutAnalogOut13DacInitializeEv+0xdc>
        m_dacSpan = DAC_DEFAULT_SPAN - m_dacZero;
    c80e:	f5c3 63d4 	rsb	r3, r3, #1696	; 0x6a0
    c812:	3304      	adds	r3, #4
    c814:	f8a4 306a 	strh.w	r3, [r4, #106]	; 0x6a
    c818:	bd38      	pop	{r3, r4, r5, pc}
        SYNCBUSY_WAIT(DAC, DAC_SYNCBUSY_DATA0);
    c81a:	4a06      	ldr	r2, [pc, #24]	; (c834 <_ZN9ClearCore21DigitalInOutAnalogOut13DacInitializeEv+0xf8>)
    c81c:	6893      	ldr	r3, [r2, #8]
    c81e:	f013 0304 	ands.w	r3, r3, #4
    c822:	d1fb      	bne.n	c81c <_ZN9ClearCore21DigitalInOutAnalogOut13DacInitializeEv+0xe0>
        DAC->DATA[0].reg = value;
    c824:	8213      	strh	r3, [r2, #16]
    c826:	e7d3      	b.n	c7d0 <_ZN9ClearCore21DigitalInOutAnalogOut13DacInitializeEv+0x94>
    c828:	40001c00 	.word	0x40001c00
    c82c:	40001800 	.word	0x40001800
    c830:	40000800 	.word	0x40000800
    c834:	43002400 	.word	0x43002400
    c838:	20001fd4 	.word	0x20001fd4

0000c83c <_ZN9ClearCore21DigitalInOutAnalogOut9DacEnableEv>:
void DigitalInOutAnalogOut::DacEnable() {
    c83c:	b470      	push	{r4, r5, r6}
    if (DAC->DATA[0].reg != value) {
    c83e:	4a2e      	ldr	r2, [pc, #184]	; (c8f8 <_ZN9ClearCore21DigitalInOutAnalogOut9DacEnableEv+0xbc>)
    DacRegisterWrite(m_dacZero);
    c840:	f8b0 1068 	ldrh.w	r1, [r0, #104]	; 0x68
    if (DAC->DATA[0].reg != value) {
    c844:	8a13      	ldrh	r3, [r2, #16]
    c846:	b29b      	uxth	r3, r3
    c848:	4299      	cmp	r1, r3
    c84a:	d003      	beq.n	c854 <_ZN9ClearCore21DigitalInOutAnalogOut9DacEnableEv+0x18>
        SYNCBUSY_WAIT(DAC, DAC_SYNCBUSY_DATA0);
    c84c:	6893      	ldr	r3, [r2, #8]
    c84e:	075d      	lsls	r5, r3, #29
    c850:	d4fc      	bmi.n	c84c <_ZN9ClearCore21DigitalInOutAnalogOut9DacEnableEv+0x10>
        DAC->DATA[0].reg = value;
    c852:	8211      	strh	r1, [r2, #16]
    PMUX_ENABLE(m_inputPort, m_inputDataBit);   // (-) DAC output
    c854:	68c3      	ldr	r3, [r0, #12]
    c856:	4929      	ldr	r1, [pc, #164]	; (c8fc <_ZN9ClearCore21DigitalInOutAnalogOut9DacEnableEv+0xc0>)
    c858:	6904      	ldr	r4, [r0, #16]
    SYNCBUSY_WAIT(DAC, DAC_SYNCBUSY_ENABLE);
    c85a:	4a27      	ldr	r2, [pc, #156]	; (c8f8 <_ZN9ClearCore21DigitalInOutAnalogOut9DacEnableEv+0xbc>)
    PMUX_ENABLE(m_inputPort, m_inputDataBit);   // (-) DAC output
    c85c:	eb01 13c3 	add.w	r3, r1, r3, lsl #7
    c860:	4423      	add	r3, r4
    c862:	f893 4040 	ldrb.w	r4, [r3, #64]	; 0x40
    c866:	f044 0401 	orr.w	r4, r4, #1
    c86a:	f883 4040 	strb.w	r4, [r3, #64]	; 0x40
    PMUX_ENABLE(m_analogPort, m_analogDataBit); // (+) DAC output
    c86e:	6e03      	ldr	r3, [r0, #96]	; 0x60
    c870:	6e44      	ldr	r4, [r0, #100]	; 0x64
    c872:	eb01 13c3 	add.w	r3, r1, r3, lsl #7
    c876:	4423      	add	r3, r4
    c878:	f893 1040 	ldrb.w	r1, [r3, #64]	; 0x40
    c87c:	f041 0101 	orr.w	r1, r1, #1
    c880:	f883 1040 	strb.w	r1, [r3, #64]	; 0x40
    SYNCBUSY_WAIT(DAC, DAC_SYNCBUSY_ENABLE);
    c884:	6893      	ldr	r3, [r2, #8]
    c886:	079c      	lsls	r4, r3, #30
    c888:	d4fc      	bmi.n	c884 <_ZN9ClearCore21DigitalInOutAnalogOut9DacEnableEv+0x48>
    if (!DAC->CTRLA.bit.ENABLE) {
    c88a:	7813      	ldrb	r3, [r2, #0]
    c88c:	0799      	lsls	r1, r3, #30
    c88e:	d407      	bmi.n	c8a0 <_ZN9ClearCore21DigitalInOutAnalogOut9DacEnableEv+0x64>
        DAC->CTRLA.bit.ENABLE = 1;
    c890:	7813      	ldrb	r3, [r2, #0]
        SYNCBUSY_WAIT(DAC, DAC_SYNCBUSY_ENABLE);
    c892:	4919      	ldr	r1, [pc, #100]	; (c8f8 <_ZN9ClearCore21DigitalInOutAnalogOut9DacEnableEv+0xbc>)
        DAC->CTRLA.bit.ENABLE = 1;
    c894:	f043 0302 	orr.w	r3, r3, #2
    c898:	7013      	strb	r3, [r2, #0]
        SYNCBUSY_WAIT(DAC, DAC_SYNCBUSY_ENABLE);
    c89a:	688b      	ldr	r3, [r1, #8]
    c89c:	079a      	lsls	r2, r3, #30
    c89e:	d4fc      	bmi.n	c89a <_ZN9ClearCore21DigitalInOutAnalogOut9DacEnableEv+0x5e>
    while (!DAC->STATUS.vec.READY) {
    c8a0:	4a15      	ldr	r2, [pc, #84]	; (c8f8 <_ZN9ClearCore21DigitalInOutAnalogOut9DacEnableEv+0xbc>)
    c8a2:	79d3      	ldrb	r3, [r2, #7]
    c8a4:	079b      	lsls	r3, r3, #30
    c8a6:	d0fc      	beq.n	c8a2 <_ZN9ClearCore21DigitalInOutAnalogOut9DacEnableEv+0x66>
        index &= 0xf;   // guard against index out of bounds
    c8a8:	7902      	ldrb	r2, [r0, #4]
        m_fadeCounter.m_valuesBuf[index] = value;
    c8aa:	4b15      	ldr	r3, [pc, #84]	; (c900 <_ZN9ClearCore21DigitalInOutAnalogOut9DacEnableEv+0xc4>)
    c8ac:	f002 010f 	and.w	r1, r2, #15
    c8b0:	185a      	adds	r2, r3, r1
    c8b2:	2400      	movs	r4, #0
    c8b4:	f882 408d 	strb.w	r4, [r2, #141]	; 0x8d
    ShiftReg.LedInPwm(m_ledMask, true, m_clearCorePin);
    c8b8:	6884      	ldr	r4, [r0, #8]
        state ? m_fadeCounter.m_activeMask |= 1 << index
    c8ba:	f8b3 6074 	ldrh.w	r6, [r3, #116]	; 0x74
        state ? m_patternMasks[pattern] |= ledMask
    c8be:	f8d3 00e8 	ldr.w	r0, [r3, #232]	; 0xe8
        state ? m_fadeCounter.m_activeMask |= 1 << index
    c8c2:	2201      	movs	r2, #1
        m_fadeCounter.m_analogMasks[index] = ledMask;
    c8c4:	eb03 0581 	add.w	r5, r3, r1, lsl #2
        state ? m_fadeCounter.m_activeMask |= 1 << index
    c8c8:	408a      	lsls	r2, r1
        state ? m_patternMasks[pattern] |= ledMask
    c8ca:	4320      	orrs	r0, r4
        state ? m_fadeCounter.m_activeMask |= 1 << index
    c8cc:	4332      	orrs	r2, r6
        state ? m_patternMasks[pattern] |= ledMask
    c8ce:	f8c3 00e8 	str.w	r0, [r3, #232]	; 0xe8
        state ? m_fadeCounter.m_activeMask |= 1 << index
    c8d2:	f8a3 2074 	strh.w	r2, [r3, #116]	; 0x74
        m_fadeCounter.m_analogMasks[index] = ledMask;
    c8d6:	f8c5 40a0 	str.w	r4, [r5, #160]	; 0xa0
        atomic_or_fetch(&m_patternOutputs[LED_BLINK_IO_SET], bitsToSet);
    c8da:	33f4      	adds	r3, #244	; 0xf4
    c8dc:	f3bf 8f5b 	dmb	ish
    c8e0:	e853 2f00 	ldrex	r2, [r3]
    c8e4:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
    c8e8:	e843 2100 	strex	r1, r2, [r3]
    c8ec:	2900      	cmp	r1, #0
    c8ee:	d1f7      	bne.n	c8e0 <_ZN9ClearCore21DigitalInOutAnalogOut9DacEnableEv+0xa4>
    c8f0:	f3bf 8f5b 	dmb	ish
}
    c8f4:	bc70      	pop	{r4, r5, r6}
    c8f6:	4770      	bx	lr
    c8f8:	43002400 	.word	0x43002400
    c8fc:	41008000 	.word	0x41008000
    c900:	20001a80 	.word	0x20001a80

0000c904 <_ZN9ClearCore21DigitalInOutAnalogOut7RefreshEv>:
    switch (m_mode) {
    c904:	7983      	ldrb	r3, [r0, #6]
    c906:	2b06      	cmp	r3, #6
    c908:	d805      	bhi.n	c916 <_ZN9ClearCore21DigitalInOutAnalogOut7RefreshEv+0x12>
    c90a:	2201      	movs	r2, #1
    c90c:	fa02 f303 	lsl.w	r3, r2, r3
    c910:	f013 0f54 	tst.w	r3, #84	; 0x54
    c914:	d100      	bne.n	c918 <_ZN9ClearCore21DigitalInOutAnalogOut7RefreshEv+0x14>
    c916:	4770      	bx	lr
            DigitalInOut::Refresh();
    c918:	f000 bc32 	b.w	d180 <_ZN9ClearCore12DigitalInOut7RefreshEv>

0000c91c <_ZN9ClearCore21DigitalInOutAnalogOut4ModeENS_9Connector14ConnectorModesE>:
bool DigitalInOutAnalogOut::Mode(ConnectorModes newMode) {
    c91c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    if (m_mode == newMode) {
    c91e:	7983      	ldrb	r3, [r0, #6]
    c920:	428b      	cmp	r3, r1
    c922:	d06e      	beq.n	ca02 <_ZN9ClearCore21DigitalInOutAnalogOut4ModeENS_9Connector14ConnectorModesE+0xe6>
    switch (newMode) {
    c924:	1e8a      	subs	r2, r1, #2
    c926:	460c      	mov	r4, r1
    c928:	4605      	mov	r5, r0
    c92a:	2a04      	cmp	r2, #4
    c92c:	d80d      	bhi.n	c94a <_ZN9ClearCore21DigitalInOutAnalogOut4ModeENS_9Connector14ConnectorModesE+0x2e>
    c92e:	e8df f002 	tbb	[pc, r2]
    c932:	0311      	.short	0x0311
    c934:	0c11      	.short	0x0c11
    c936:	11          	.byte	0x11
    c937:	00          	.byte	0x00
            DigitalInOut::Mode(INPUT_DIGITAL);
    c938:	2102      	movs	r1, #2
    c93a:	f000 fad9 	bl	cef0 <_ZN9ClearCore12DigitalInOut4ModeENS_9Connector14ConnectorModesE>
            DacEnable();
    c93e:	4628      	mov	r0, r5
    c940:	f7ff ff7c 	bl	c83c <_ZN9ClearCore21DigitalInOutAnalogOut9DacEnableEv>
            m_mode = newMode;
    c944:	2303      	movs	r3, #3
    c946:	71ab      	strb	r3, [r5, #6]
            break;
    c948:	4623      	mov	r3, r4
    return (m_mode == newMode);
    c94a:	1ae0      	subs	r0, r4, r3
    c94c:	fab0 f080 	clz	r0, r0
    c950:	0940      	lsrs	r0, r0, #5
    c952:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        \brief Atomic clear of shift register state fields.

        \param[in] bitsToClr LED bit in the shift register to be cleared.
    **/
    void ShifterStateClear(Masks bitsToClr) {
        atomic_and_fetch(&m_patternOutputs[LED_BLINK_IO_SET], ~bitsToClr);
    c954:	4b2c      	ldr	r3, [pc, #176]	; (ca08 <_ZN9ClearCore21DigitalInOutAnalogOut4ModeENS_9Connector14ConnectorModesE+0xec>)
    c956:	f3bf 8f5b 	dmb	ish
    c95a:	e853 2f00 	ldrex	r2, [r3]
    c95e:	f422 1280 	bic.w	r2, r2, #1048576	; 0x100000
    c962:	e843 2100 	strex	r1, r2, [r3]
    c966:	2900      	cmp	r1, #0
    c968:	d1f7      	bne.n	c95a <_ZN9ClearCore21DigitalInOutAnalogOut4ModeENS_9Connector14ConnectorModesE+0x3e>
    c96a:	f3bf 8f5b 	dmb	ish
        index &= 0xf;   // guard against index out of bounds
    c96e:	792a      	ldrb	r2, [r5, #4]
                                              : m_fadeCounter.m_activeMask &= ~(1 << index);
    c970:	f833 7c80 	ldrh.w	r7, [r3, #-128]
    PMUX_DISABLE(m_inputPort, m_inputDataBit);   // (-) DAC output
    c974:	68e8      	ldr	r0, [r5, #12]
    ShiftReg.LedInPwm(m_ledMask, false, m_clearCorePin);
    c976:	68ae      	ldr	r6, [r5, #8]
    PMUX_DISABLE(m_inputPort, m_inputDataBit);   // (-) DAC output
    c978:	4924      	ldr	r1, [pc, #144]	; (ca0c <_ZN9ClearCore21DigitalInOutAnalogOut4ModeENS_9Connector14ConnectorModesE+0xf0>)
        m_fadeCounter.m_analogMasks[index] = ledMask;
    c97a:	3bf4      	subs	r3, #244	; 0xf4
    c97c:	f002 020f 	and.w	r2, r2, #15
                                              : m_fadeCounter.m_activeMask &= ~(1 << index);
    c980:	f04f 0e01 	mov.w	lr, #1
    c984:	fa0e fe02 	lsl.w	lr, lr, r2
        m_fadeCounter.m_analogMasks[index] = ledMask;
    c988:	eb03 0282 	add.w	r2, r3, r2, lsl #2
                                              : m_fadeCounter.m_activeMask &= ~(1 << index);
    c98c:	ea27 070e 	bic.w	r7, r7, lr
    c990:	f8a3 7074 	strh.w	r7, [r3, #116]	; 0x74
    c994:	692f      	ldr	r7, [r5, #16]
        m_fadeCounter.m_analogMasks[index] = ledMask;
    c996:	f8c2 60a0 	str.w	r6, [r2, #160]	; 0xa0
                                           : m_patternMasks[pattern] &= ~ledMask;
    c99a:	f8d3 20e8 	ldr.w	r2, [r3, #232]	; 0xe8
    c99e:	eb01 10c0 	add.w	r0, r1, r0, lsl #7
    c9a2:	4438      	add	r0, r7
    c9a4:	ea22 0606 	bic.w	r6, r2, r6
    c9a8:	f8c3 60e8 	str.w	r6, [r3, #232]	; 0xe8
    c9ac:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
    SYNCBUSY_WAIT(DAC, DAC_SYNCBUSY_ENABLE);
    c9b0:	4a17      	ldr	r2, [pc, #92]	; (ca10 <_ZN9ClearCore21DigitalInOutAnalogOut4ModeENS_9Connector14ConnectorModesE+0xf4>)
    PMUX_DISABLE(m_inputPort, m_inputDataBit);   // (-) DAC output
    c9b2:	f36f 0300 	bfc	r3, #0, #1
    c9b6:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40
    PMUX_DISABLE(m_analogPort, m_analogDataBit); // (+) DAC output
    c9ba:	6e2b      	ldr	r3, [r5, #96]	; 0x60
    c9bc:	6e68      	ldr	r0, [r5, #100]	; 0x64
    c9be:	eb01 13c3 	add.w	r3, r1, r3, lsl #7
    c9c2:	4403      	add	r3, r0
    c9c4:	f893 1040 	ldrb.w	r1, [r3, #64]	; 0x40
    c9c8:	f36f 0100 	bfc	r1, #0, #1
    c9cc:	f883 1040 	strb.w	r1, [r3, #64]	; 0x40
    SYNCBUSY_WAIT(DAC, DAC_SYNCBUSY_ENABLE);
    c9d0:	6893      	ldr	r3, [r2, #8]
    c9d2:	f013 0302 	ands.w	r3, r3, #2
    c9d6:	d1fb      	bne.n	c9d0 <_ZN9ClearCore21DigitalInOutAnalogOut4ModeENS_9Connector14ConnectorModesE+0xb4>
    if (DAC->CTRLA.bit.ENABLE) {
    c9d8:	7811      	ldrb	r1, [r2, #0]
    c9da:	0789      	lsls	r1, r1, #30
    c9dc:	d507      	bpl.n	c9ee <_ZN9ClearCore21DigitalInOutAnalogOut4ModeENS_9Connector14ConnectorModesE+0xd2>
        DAC->CTRLA.bit.ENABLE = 0;
    c9de:	7810      	ldrb	r0, [r2, #0]
        SYNCBUSY_WAIT(DAC, DAC_SYNCBUSY_ENABLE);
    c9e0:	490b      	ldr	r1, [pc, #44]	; (ca10 <_ZN9ClearCore21DigitalInOutAnalogOut4ModeENS_9Connector14ConnectorModesE+0xf4>)
        DAC->CTRLA.bit.ENABLE = 0;
    c9e2:	f363 0041 	bfi	r0, r3, #1, #1
    c9e6:	7010      	strb	r0, [r2, #0]
        SYNCBUSY_WAIT(DAC, DAC_SYNCBUSY_ENABLE);
    c9e8:	688b      	ldr	r3, [r1, #8]
    c9ea:	079b      	lsls	r3, r3, #30
    c9ec:	d4fc      	bmi.n	c9e8 <_ZN9ClearCore21DigitalInOutAnalogOut4ModeENS_9Connector14ConnectorModesE+0xcc>
            DigitalInOut::Mode(newMode);
    c9ee:	4621      	mov	r1, r4
    c9f0:	4628      	mov	r0, r5
    c9f2:	f000 fa7d 	bl	cef0 <_ZN9ClearCore12DigitalInOut4ModeENS_9Connector14ConnectorModesE>
    c9f6:	79ab      	ldrb	r3, [r5, #6]
    return (m_mode == newMode);
    c9f8:	1ae0      	subs	r0, r4, r3
    c9fa:	fab0 f080 	clz	r0, r0
    c9fe:	0940      	lsrs	r0, r0, #5
    ca00:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        return true;
    ca02:	2001      	movs	r0, #1
}
    ca04:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    ca06:	bf00      	nop
    ca08:	20001b74 	.word	0x20001b74
    ca0c:	41008000 	.word	0x41008000
    ca10:	43002400 	.word	0x43002400

0000ca14 <_ZN9ClearCore21DigitalInOutAnalogOut5StateEv>:
    switch (m_mode) {
    ca14:	7983      	ldrb	r3, [r0, #6]
    ca16:	2b06      	cmp	r3, #6
    ca18:	d805      	bhi.n	ca26 <_ZN9ClearCore21DigitalInOutAnalogOut5StateEv+0x12>
    ca1a:	2201      	movs	r2, #1
    ca1c:	fa02 f303 	lsl.w	r3, r2, r3
    ca20:	f013 0f54 	tst.w	r3, #84	; 0x54
    ca24:	d101      	bne.n	ca2a <_ZN9ClearCore21DigitalInOutAnalogOut5StateEv+0x16>
}
    ca26:	2000      	movs	r0, #0
    ca28:	4770      	bx	lr
            state = DigitalInOut::State();
    ca2a:	f000 bcaf 	b.w	d38c <_ZN9ClearCore12DigitalInOut5StateEv>
    ca2e:	bf00      	nop

0000ca30 <_ZN9ClearCore21DigitalInOutAnalogOut5StateEs>:
    switch (m_mode) {
    ca30:	7983      	ldrb	r3, [r0, #6]
    ca32:	3b02      	subs	r3, #2
    ca34:	2b04      	cmp	r3, #4
    ca36:	d83c      	bhi.n	cab2 <_ZN9ClearCore21DigitalInOutAnalogOut5StateEs+0x82>
    ca38:	e8df f003 	tbb	[pc, r3]
    ca3c:	3b390339 	.word	0x3b390339
    ca40:	39          	.byte	0x39
    ca41:	00          	.byte	0x00
            newState = max(newState, 0);
    ca42:	ea21 71e1 	bic.w	r1, r1, r1, asr #31
bool DigitalInOutAnalogOut::State(int16_t newState) {
    ca46:	b5f0      	push	{r4, r5, r6, r7, lr}
    value = min(value, DAC_MAX_VALUE);
    ca48:	b289      	uxth	r1, r1
    ca4a:	f240 74ff 	movw	r4, #2047	; 0x7ff
    ca4e:	42a1      	cmp	r1, r4
    ca50:	bf28      	it	cs
    ca52:	4621      	movcs	r1, r4
        index &= 0xf;   // guard against index out of bounds
    ca54:	7907      	ldrb	r7, [r0, #4]
    ShiftReg.LedPwmValue(m_clearCorePin, value * UINT8_MAX / DAC_MAX_VALUE);
    ca56:	4d19      	ldr	r5, [pc, #100]	; (cabc <_ZN9ClearCore21DigitalInOutAnalogOut5StateEs+0x8c>)
        m_fadeCounter.m_valuesBuf[index] = value;
    ca58:	4e19      	ldr	r6, [pc, #100]	; (cac0 <_ZN9ClearCore21DigitalInOutAnalogOut5StateEs+0x90>)
                        / DAC_MAX_VALUE) + m_dacZero;
    ca5a:	4a1a      	ldr	r2, [pc, #104]	; (cac4 <_ZN9ClearCore21DigitalInOutAnalogOut5StateEs+0x94>)
    ShiftReg.LedPwmValue(m_clearCorePin, value * UINT8_MAX / DAC_MAX_VALUE);
    ca5c:	ebc1 2301 	rsb	r3, r1, r1, lsl #8
    ca60:	fb85 e503 	smull	lr, r5, r5, r3
    ca64:	f007 070f 	and.w	r7, r7, #15
    ca68:	441d      	add	r5, r3
    ca6a:	443e      	add	r6, r7
    ca6c:	17db      	asrs	r3, r3, #31
    ca6e:	ebc3 23a5 	rsb	r3, r3, r5, asr #10
    ca72:	f886 308d 	strb.w	r3, [r6, #141]	; 0x8d
    uint16_t command = ((static_cast<uint32_t>(value) * m_dacSpan)
    ca76:	f8b0 506a 	ldrh.w	r5, [r0, #106]	; 0x6a
                        / DAC_MAX_VALUE) + m_dacZero;
    ca7a:	f8b0 3068 	ldrh.w	r3, [r0, #104]	; 0x68
    if (DAC->DATA[0].reg != value) {
    ca7e:	4812      	ldr	r0, [pc, #72]	; (cac8 <_ZN9ClearCore21DigitalInOutAnalogOut5StateEs+0x98>)
    uint16_t command = ((static_cast<uint32_t>(value) * m_dacSpan)
    ca80:	fb01 f105 	mul.w	r1, r1, r5
                        / DAC_MAX_VALUE) + m_dacZero;
    ca84:	fba2 5201 	umull	r5, r2, r2, r1
    ca88:	1a89      	subs	r1, r1, r2
    ca8a:	eb02 0151 	add.w	r1, r2, r1, lsr #1
    ca8e:	eb03 2191 	add.w	r1, r3, r1, lsr #10
    ca92:	b289      	uxth	r1, r1
    if (DAC->DATA[0].reg != value) {
    ca94:	8a03      	ldrh	r3, [r0, #16]
    command = min(command, DAC_MAX_VALUE);
    ca96:	42a1      	cmp	r1, r4
    ca98:	bf28      	it	cs
    ca9a:	4621      	movcs	r1, r4
    if (DAC->DATA[0].reg != value) {
    ca9c:	b29b      	uxth	r3, r3
    ca9e:	4299      	cmp	r1, r3
    caa0:	d009      	beq.n	cab6 <_ZN9ClearCore21DigitalInOutAnalogOut5StateEs+0x86>
        SYNCBUSY_WAIT(DAC, DAC_SYNCBUSY_DATA0);
    caa2:	6883      	ldr	r3, [r0, #8]
    caa4:	075b      	lsls	r3, r3, #29
    caa6:	d4fc      	bmi.n	caa2 <_ZN9ClearCore21DigitalInOutAnalogOut5StateEs+0x72>
        DAC->DATA[0].reg = value;
    caa8:	8201      	strh	r1, [r0, #16]
            success = true;
    caaa:	2001      	movs	r0, #1
    caac:	bdf0      	pop	{r4, r5, r6, r7, pc}
            success = DigitalInOut::State(newState);
    caae:	f000 b9c3 	b.w	ce38 <_ZN9ClearCore12DigitalInOut5StateEs>
    bool success = false;
    cab2:	2000      	movs	r0, #0
    cab4:	4770      	bx	lr
            success = true;
    cab6:	2001      	movs	r0, #1
}
    cab8:	bdf0      	pop	{r4, r5, r6, r7, pc}
    caba:	bf00      	nop
    cabc:	80100201 	.word	0x80100201
    cac0:	20001a80 	.word	0x20001a80
    cac4:	00200401 	.word	0x00200401
    cac8:	43002400 	.word	0x43002400

0000cacc <_ZN9ClearCore21DigitalInOutAnalogOut10InitializeE13ClearCorePins>:
void DigitalInOutAnalogOut::Initialize(ClearCorePins clearCorePin) {
    cacc:	b538      	push	{r3, r4, r5, lr}
    cace:	4604      	mov	r4, r0
    cad0:	460d      	mov	r5, r1
    DacInitialize();
    cad2:	f7ff fe33 	bl	c73c <_ZN9ClearCore21DigitalInOutAnalogOut13DacInitializeEv>
    DigitalInOut::Initialize(clearCorePin);
    cad6:	4620      	mov	r0, r4
    cad8:	4629      	mov	r1, r5
    cada:	f000 fc77 	bl	d3cc <_ZN9ClearCore12DigitalInOut10InitializeE13ClearCorePins>
    PMUX_SELECTION(m_inputPort, m_inputDataBit, PER_ANALOG);   // (-) DAC output
    cade:	6920      	ldr	r0, [r4, #16]
    cae0:	07c2      	lsls	r2, r0, #31
    cae2:	d521      	bpl.n	cb28 <_ZN9ClearCore21DigitalInOutAnalogOut10InitializeE13ClearCorePins+0x5c>
    cae4:	68e1      	ldr	r1, [r4, #12]
    cae6:	01c9      	lsls	r1, r1, #7
    cae8:	f101 4282 	add.w	r2, r1, #1090519040	; 0x41000000
    caec:	f502 4200 	add.w	r2, r2, #32768	; 0x8000
    caf0:	eb02 0250 	add.w	r2, r2, r0, lsr #1
    caf4:	2101      	movs	r1, #1
    caf6:	f892 3030 	ldrb.w	r3, [r2, #48]	; 0x30
    cafa:	f361 1307 	bfi	r3, r1, #4, #4
    cafe:	f882 3030 	strb.w	r3, [r2, #48]	; 0x30
    PMUX_SELECTION(m_analogPort, m_analogDataBit, PER_ANALOG); // (+) DAC output
    cb02:	6e61      	ldr	r1, [r4, #100]	; 0x64
    cb04:	07cb      	lsls	r3, r1, #31
    cb06:	d421      	bmi.n	cb4c <_ZN9ClearCore21DigitalInOutAnalogOut10InitializeE13ClearCorePins+0x80>
    cb08:	6e23      	ldr	r3, [r4, #96]	; 0x60
    cb0a:	01db      	lsls	r3, r3, #7
    cb0c:	f103 4382 	add.w	r3, r3, #1090519040	; 0x41000000
    cb10:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
    cb14:	eb03 0351 	add.w	r3, r3, r1, lsr #1
    cb18:	2101      	movs	r1, #1
    cb1a:	f893 2030 	ldrb.w	r2, [r3, #48]	; 0x30
    cb1e:	f361 0203 	bfi	r2, r1, #0, #4
    cb22:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
    cb26:	bd38      	pop	{r3, r4, r5, pc}
    PMUX_SELECTION(m_inputPort, m_inputDataBit, PER_ANALOG);   // (-) DAC output
    cb28:	68e2      	ldr	r2, [r4, #12]
    cb2a:	01d2      	lsls	r2, r2, #7
    cb2c:	f102 4382 	add.w	r3, r2, #1090519040	; 0x41000000
    cb30:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
    cb34:	eb03 0350 	add.w	r3, r3, r0, lsr #1
    cb38:	2101      	movs	r1, #1
    cb3a:	f893 2030 	ldrb.w	r2, [r3, #48]	; 0x30
    cb3e:	f361 0203 	bfi	r2, r1, #0, #4
    cb42:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
    PMUX_SELECTION(m_analogPort, m_analogDataBit, PER_ANALOG); // (+) DAC output
    cb46:	6e61      	ldr	r1, [r4, #100]	; 0x64
    cb48:	07cb      	lsls	r3, r1, #31
    cb4a:	d5dd      	bpl.n	cb08 <_ZN9ClearCore21DigitalInOutAnalogOut10InitializeE13ClearCorePins+0x3c>
    cb4c:	6e22      	ldr	r2, [r4, #96]	; 0x60
    cb4e:	01d2      	lsls	r2, r2, #7
    cb50:	f102 4282 	add.w	r2, r2, #1090519040	; 0x41000000
    cb54:	f502 4200 	add.w	r2, r2, #32768	; 0x8000
    cb58:	eb02 0251 	add.w	r2, r2, r1, lsr #1
    cb5c:	2101      	movs	r1, #1
    cb5e:	f892 3030 	ldrb.w	r3, [r2, #48]	; 0x30
    cb62:	f361 1307 	bfi	r3, r1, #4, #4
    cb66:	f882 3030 	strb.w	r3, [r2, #48]	; 0x30
    cb6a:	bd38      	pop	{r3, r4, r5, pc}

0000cb6c <_ZN9ClearCore9DigitalIn11IsInHwFaultEv>:
    }
    cb6c:	2000      	movs	r0, #0
    cb6e:	4770      	bx	lr

0000cb70 <_ZN9ClearCore17DigitalInAnalogIn4ModeEv>:

        \return The connector's current operational mode.
    **/
    virtual ConnectorModes Mode() override {
        return Connector::Mode();
    }
    cb70:	7980      	ldrb	r0, [r0, #6]
    cb72:	4770      	bx	lr

0000cb74 <_ZN9ClearCore17DigitalInAnalogIn4TypeEv>:

        \return The type of this connector (Analog Input)
    **/
    Connector::ConnectorTypes Type() override {
        return Connector::ANALOG_IN_DIGITAL_IN_TYPE;
    }
    cb74:	2003      	movs	r0, #3
    cb76:	4770      	bx	lr

0000cb78 <_ZN9ClearCore17DigitalInAnalogIn10IsWritableEv>:

        \return False since this is a read-only connector.
    **/
    bool IsWritable() override {
        return false;
    }
    cb78:	2000      	movs	r0, #0
    cb7a:	4770      	bx	lr

0000cb7c <_ZN9ClearCore17DigitalInAnalogIn5StateEs>:
    **/
    bool State(int16_t newState) override {
        // ignore attempts to write state
        (void)newState;
        return false;
    }
    cb7c:	2000      	movs	r0, #0
    cb7e:	4770      	bx	lr

0000cb80 <_ZN9ClearCore17DigitalInAnalogIn4ModeENS_9Connector14ConnectorModesE>:
bool DigitalInAnalogIn::FilterTc(uint16_t tc,
                                 AdcManager::FilterUnits theUnits) {
    return AdcMgr.FilterTc(m_adcChannel, tc, theUnits);
}

bool DigitalInAnalogIn::Mode(ConnectorModes newMode) {
    cb80:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    // Bail out if we are already in the requested mode
    if (newMode == m_mode) {
    cb82:	7983      	ldrb	r3, [r0, #6]
    cb84:	428b      	cmp	r3, r1
    cb86:	d072      	beq.n	cc6e <_ZN9ClearCore17DigitalInAnalogIn4ModeENS_9Connector14ConnectorModesE+0xee>
        return true;
    }

    switch (newMode) {
    cb88:	2901      	cmp	r1, #1
    cb8a:	460c      	mov	r4, r1
    cb8c:	4605      	mov	r5, r0
    cb8e:	d03c      	beq.n	cc0a <_ZN9ClearCore17DigitalInAnalogIn4ModeENS_9Connector14ConnectorModesE+0x8a>
    cb90:	2902      	cmp	r1, #2
    cb92:	d135      	bne.n	cc00 <_ZN9ClearCore17DigitalInAnalogIn4ModeENS_9Connector14ConnectorModesE+0x80>
        atomic_or_fetch(&m_patternOutputs[LED_BLINK_IO_SET], bitsToSet);
    cb94:	4e37      	ldr	r6, [pc, #220]	; (cc74 <_ZN9ClearCore17DigitalInAnalogIn4ModeENS_9Connector14ConnectorModesE+0xf4>)
    cb96:	6b03      	ldr	r3, [r0, #48]	; 0x30
    cb98:	f3bf 8f5b 	dmb	ish
    cb9c:	e856 2f00 	ldrex	r2, [r6]
    cba0:	431a      	orrs	r2, r3
    cba2:	e846 2100 	strex	r1, r2, [r6]
    cba6:	2900      	cmp	r1, #0
    cba8:	d1f8      	bne.n	cb9c <_ZN9ClearCore17DigitalInAnalogIn4ModeENS_9Connector14ConnectorModesE+0x1c>
    cbaa:	f3bf 8f5b 	dmb	ish
        case INPUT_DIGITAL:
            ShiftReg.ShifterState(true, m_modeControlBitMask);
            // If the system has already been initialized, wait until the
            // digital reading is valid then reset the filtered state
            if (ShiftReg.Ready()) {
    cbae:	3ef4      	subs	r6, #244	; 0xf4
    cbb0:	f896 3108 	ldrb.w	r3, [r6, #264]	; 0x108
    cbb4:	b143      	cbz	r3, cbc8 <_ZN9ClearCore17DigitalInAnalogIn4ModeENS_9Connector14ConnectorModesE+0x48>
    cbb6:	4b30      	ldr	r3, [pc, #192]	; (cc78 <_ZN9ClearCore17DigitalInAnalogIn4ModeENS_9Connector14ConnectorModesE+0xf8>)
    cbb8:	6b29      	ldr	r1, [r5, #48]	; 0x30
    cbba:	681a      	ldr	r2, [r3, #0]
                while (!(AdcMgr.ShiftRegSnapshot() & m_modeControlBitMask)) {
    cbbc:	6e53      	ldr	r3, [r2, #100]	; 0x64
    cbbe:	420b      	tst	r3, r1
    cbc0:	d0fc      	beq.n	cbbc <_ZN9ClearCore17DigitalInAnalogIn4ModeENS_9Connector14ConnectorModesE+0x3c>
                    continue;
                }
                UpdateFilterState();
    cbc2:	4628      	mov	r0, r5
    cbc4:	f000 fda8 	bl	d718 <_ZN9ClearCore9DigitalIn17UpdateFilterStateEv>
        index &= 0xf;   // guard against index out of bounds
    cbc8:	792b      	ldrb	r3, [r5, #4]
                                              : m_fadeCounter.m_activeMask &= ~(1 << index);
    cbca:	f8b6 1074 	ldrh.w	r1, [r6, #116]	; 0x74
            }
            ShiftReg.LedInPwm(m_ledMask, false, m_clearCorePin);
    cbce:	68af      	ldr	r7, [r5, #8]
                                           : m_patternMasks[pattern] &= ~ledMask;
    cbd0:	f8d6 20e8 	ldr.w	r2, [r6, #232]	; 0xe8
        m_fadeCounter.m_analogMasks[index] = ledMask;
    cbd4:	f003 030f 	and.w	r3, r3, #15
                                              : m_fadeCounter.m_activeMask &= ~(1 << index);
    cbd8:	2001      	movs	r0, #1
    cbda:	4098      	lsls	r0, r3
    cbdc:	ea21 0100 	bic.w	r1, r1, r0
        m_fadeCounter.m_analogMasks[index] = ledMask;
    cbe0:	eb06 0383 	add.w	r3, r6, r3, lsl #2
                                              : m_fadeCounter.m_activeMask &= ~(1 << index);
    cbe4:	f8a6 1074 	strh.w	r1, [r6, #116]	; 0x74
            m_mode = newMode;
    cbe8:	2002      	movs	r0, #2
                                           : m_patternMasks[pattern] &= ~ledMask;
    cbea:	ea22 0207 	bic.w	r2, r2, r7
            m_analogValid = false;
    cbee:	2100      	movs	r1, #0
        m_fadeCounter.m_analogMasks[index] = ledMask;
    cbf0:	f8c3 70a0 	str.w	r7, [r3, #160]	; 0xa0
                                           : m_patternMasks[pattern] &= ~ledMask;
    cbf4:	f8c6 20e8 	str.w	r2, [r6, #232]	; 0xe8
            break;
    cbf8:	4603      	mov	r3, r0
            m_mode = newMode;
    cbfa:	71a8      	strb	r0, [r5, #6]
            m_analogValid = false;
    cbfc:	f885 1040 	strb.w	r1, [r5, #64]	; 0x40
            break;
        default:
            break;
    }

    return (m_mode == newMode);
    cc00:	1ae0      	subs	r0, r4, r3
    cc02:	fab0 f080 	clz	r0, r0
    cc06:	0940      	lsrs	r0, r0, #5
    cc08:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        atomic_and_fetch(&m_patternOutputs[LED_BLINK_IO_SET], ~bitsToClr);
    cc0a:	6b03      	ldr	r3, [r0, #48]	; 0x30
    cc0c:	4e19      	ldr	r6, [pc, #100]	; (cc74 <_ZN9ClearCore17DigitalInAnalogIn4ModeENS_9Connector14ConnectorModesE+0xf4>)
    cc0e:	f3bf 8f5b 	dmb	ish
    cc12:	43db      	mvns	r3, r3
    cc14:	e856 2f00 	ldrex	r2, [r6]
    cc18:	401a      	ands	r2, r3
    cc1a:	e846 2100 	strex	r1, r2, [r6]
    cc1e:	2900      	cmp	r1, #0
    cc20:	d1f8      	bne.n	cc14 <_ZN9ClearCore17DigitalInAnalogIn4ModeENS_9Connector14ConnectorModesE+0x94>
    cc22:	f3bf 8f5b 	dmb	ish
            if (ShiftReg.Ready()) {
    cc26:	3ef4      	subs	r6, #244	; 0xf4
    cc28:	f896 3108 	ldrb.w	r3, [r6, #264]	; 0x108
            m_mode = newMode;
    cc2c:	71ac      	strb	r4, [r5, #6]
            if (ShiftReg.Ready()) {
    cc2e:	b11b      	cbz	r3, cc38 <_ZN9ClearCore17DigitalInAnalogIn4ModeENS_9Connector14ConnectorModesE+0xb8>
                while (!m_analogValid) {
    cc30:	f895 3040 	ldrb.w	r3, [r5, #64]	; 0x40
    cc34:	2b00      	cmp	r3, #0
    cc36:	d0fb      	beq.n	cc30 <_ZN9ClearCore17DigitalInAnalogIn4ModeENS_9Connector14ConnectorModesE+0xb0>
        index &= 0xf;   // guard against index out of bounds
    cc38:	792b      	ldrb	r3, [r5, #4]
        state ? m_fadeCounter.m_activeMask |= 1 << index
    cc3a:	f8b6 2074 	ldrh.w	r2, [r6, #116]	; 0x74
            ShiftReg.LedInPwm(m_ledMask, true, m_clearCorePin);
    cc3e:	68ad      	ldr	r5, [r5, #8]
        state ? m_patternMasks[pattern] |= ledMask
    cc40:	f8d6 10e8 	ldr.w	r1, [r6, #232]	; 0xe8
        state ? m_fadeCounter.m_activeMask |= 1 << index
    cc44:	2001      	movs	r0, #1
        m_fadeCounter.m_analogMasks[index] = ledMask;
    cc46:	f003 030f 	and.w	r3, r3, #15
    cc4a:	eb06 0783 	add.w	r7, r6, r3, lsl #2
        state ? m_fadeCounter.m_activeMask |= 1 << index
    cc4e:	fa00 f303 	lsl.w	r3, r0, r3
    cc52:	431a      	orrs	r2, r3
        state ? m_patternMasks[pattern] |= ledMask
    cc54:	4603      	mov	r3, r0
    return (m_mode == newMode);
    cc56:	1ae0      	subs	r0, r4, r3
    cc58:	4329      	orrs	r1, r5
    cc5a:	fab0 f080 	clz	r0, r0
        m_fadeCounter.m_analogMasks[index] = ledMask;
    cc5e:	f8c7 50a0 	str.w	r5, [r7, #160]	; 0xa0
        state ? m_patternMasks[pattern] |= ledMask
    cc62:	f8c6 10e8 	str.w	r1, [r6, #232]	; 0xe8
        state ? m_fadeCounter.m_activeMask |= 1 << index
    cc66:	f8a6 2074 	strh.w	r2, [r6, #116]	; 0x74
    cc6a:	0940      	lsrs	r0, r0, #5
    cc6c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        return true;
    cc6e:	2001      	movs	r0, #1
}
    cc70:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    cc72:	bf00      	nop
    cc74:	20001b74 	.word	0x20001b74
    cc78:	20001eac 	.word	0x20001eac

0000cc7c <_ZN9ClearCore17DigitalInAnalogInC1ENS_13ShiftRegister5MasksES2_PK15PeripheralRouteNS_10AdcManager11AdcChannelsE>:
DigitalInAnalogIn::DigitalInAnalogIn(ShiftRegister::Masks ledMask,
    cc7c:	b570      	push	{r4, r5, r6, lr}
    cc7e:	4604      	mov	r4, r0
    cc80:	4616      	mov	r6, r2
      m_analogValid(false) {}
    cc82:	461a      	mov	r2, r3
DigitalInAnalogIn::DigitalInAnalogIn(ShiftRegister::Masks ledMask,
    cc84:	f89d 5010 	ldrb.w	r5, [sp, #16]
      m_analogValid(false) {}
    cc88:	f000 fd14 	bl	d6b4 <_ZN9ClearCore9DigitalInC1ENS_13ShiftRegister5MasksEPK15PeripheralRoute>
    cc8c:	2300      	movs	r3, #0
    cc8e:	4a05      	ldr	r2, [pc, #20]	; (cca4 <_ZN9ClearCore17DigitalInAnalogInC1ENS_13ShiftRegister5MasksES2_PK15PeripheralRouteNS_10AdcManager11AdcChannelsE+0x28>)
    cc90:	6326      	str	r6, [r4, #48]	; 0x30
    cc92:	f884 5034 	strb.w	r5, [r4, #52]	; 0x34
    cc96:	6022      	str	r2, [r4, #0]
    cc98:	63a3      	str	r3, [r4, #56]	; 0x38
    cc9a:	63e3      	str	r3, [r4, #60]	; 0x3c
    cc9c:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
    cca0:	4620      	mov	r0, r4
    cca2:	bd70      	pop	{r4, r5, r6, pc}
    cca4:	0002d248 	.word	0x0002d248

0000cca8 <_ZN9ClearCore17DigitalInAnalogIn7RefreshEv>:
    switch (m_mode) {
    cca8:	7982      	ldrb	r2, [r0, #6]
    ccaa:	2a01      	cmp	r2, #1
    ccac:	d004      	beq.n	ccb8 <_ZN9ClearCore17DigitalInAnalogIn7RefreshEv+0x10>
    ccae:	2a02      	cmp	r2, #2
    ccb0:	d101      	bne.n	ccb6 <_ZN9ClearCore17DigitalInAnalogIn7RefreshEv+0xe>
            DigitalIn::Refresh();
    ccb2:	f000 bc4f 	b.w	d554 <_ZN9ClearCore9DigitalIn7RefreshEv>
    ccb6:	4770      	bx	lr
            if (!(AdcMgr.ShiftRegSnapshot() & m_modeControlBitMask)) {
    ccb8:	4a17      	ldr	r2, [pc, #92]	; (cd18 <_ZN9ClearCore17DigitalInAnalogIn7RefreshEv+0x70>)
    ccba:	6b01      	ldr	r1, [r0, #48]	; 0x30
    ccbc:	6812      	ldr	r2, [r2, #0]
    ccbe:	4603      	mov	r3, r0
    ccc0:	6e50      	ldr	r0, [r2, #100]	; 0x64
    ccc2:	4208      	tst	r0, r1
    ccc4:	d126      	bne.n	cd14 <_ZN9ClearCore17DigitalInAnalogIn7RefreshEv+0x6c>
                if (!m_analogValid) {
    ccc6:	f893 1040 	ldrb.w	r1, [r3, #64]	; 0x40
void DigitalInAnalogIn::Refresh() {
    ccca:	b470      	push	{r4, r5, r6}
                if (!m_analogValid) {
    cccc:	b991      	cbnz	r1, ccf4 <_ZN9ClearCore17DigitalInAnalogIn7RefreshEv+0x4c>
                    AdcMgr.FilterReset(m_adcChannel, *m_adcResultConvertedPtr);
    ccce:	6b99      	ldr	r1, [r3, #56]	; 0x38
    ccd0:	f893 4034 	ldrb.w	r4, [r3, #52]	; 0x34
    ccd4:	8808      	ldrh	r0, [r1, #0]
        \param[in] adcChannel ADC Channel filter to reset.
        \param[in] newSetting The initial filter value.
        \return Success.
    **/
    bool FilterReset(AdcChannels adcChannel, uint16_t newSetting) {
        if (adcChannel >= ADC_CHANNEL_COUNT) {
    ccd6:	2c07      	cmp	r4, #7
    ccd8:	b280      	uxth	r0, r0
    ccda:	dc07      	bgt.n	ccec <_ZN9ClearCore17DigitalInAnalogIn7RefreshEv+0x44>
        m_z = (newSetting << 16);
    ccdc:	0400      	lsls	r0, r0, #16
    ccde:	eb02 06c4 	add.w	r6, r2, r4, lsl #3
            return false;
        }
        m_analogFilter[adcChannel].Reset(newSetting);
        m_AdcResultsConvertedFiltered[adcChannel] =
    cce2:	3408      	adds	r4, #8
        return (m_z >> 16);
    cce4:	0c05      	lsrs	r5, r0, #16
        m_z = (newSetting << 16);
    cce6:	6270      	str	r0, [r6, #36]	; 0x24
    cce8:	f822 5014 	strh.w	r5, [r2, r4, lsl #1]
                    m_analogValid = true;
    ccec:	2201      	movs	r2, #1
    ccee:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    ccf2:	e000      	b.n	ccf6 <_ZN9ClearCore17DigitalInAnalogIn7RefreshEv+0x4e>
    ccf4:	6b99      	ldr	r1, [r3, #56]	; 0x38
                uint8_t value = (*m_adcResultConvertedPtr) >> 7;
    ccf6:	880a      	ldrh	r2, [r1, #0]
        index &= 0xf;   // guard against index out of bounds
    ccf8:	7918      	ldrb	r0, [r3, #4]
        m_fadeCounter.m_valuesBuf[index] = value;
    ccfa:	4908      	ldr	r1, [pc, #32]	; (cd1c <_ZN9ClearCore17DigitalInAnalogIn7RefreshEv+0x74>)
    ccfc:	f3c2 13c8 	ubfx	r3, r2, #7, #9
    cd00:	f000 020f 	and.w	r2, r0, #15
                if (value < 0x03) {
    cd04:	b2d8      	uxtb	r0, r3
    cd06:	440a      	add	r2, r1
    cd08:	2802      	cmp	r0, #2
    cd0a:	bfd8      	it	le
    cd0c:	2300      	movle	r3, #0
    cd0e:	f882 308d 	strb.w	r3, [r2, #141]	; 0x8d
}
    cd12:	bc70      	pop	{r4, r5, r6}
    cd14:	4770      	bx	lr
    cd16:	bf00      	nop
    cd18:	20001eac 	.word	0x20001eac
    cd1c:	20001a80 	.word	0x20001a80

0000cd20 <_ZN9ClearCore17DigitalInAnalogIn10InitializeE13ClearCorePins>:
    AdcMgr.FilterTc(m_adcChannel,
    cd20:	4b29      	ldr	r3, [pc, #164]	; (cdc8 <_ZN9ClearCore17DigitalInAnalogIn10InitializeE13ClearCorePins+0xa8>)
void DigitalInAnalogIn::Initialize(ClearCorePins clearCorePin) {
    cd22:	b570      	push	{r4, r5, r6, lr}
    cd24:	4604      	mov	r4, r0
    AdcMgr.FilterTc(m_adcChannel,
    cd26:	681d      	ldr	r5, [r3, #0]
void DigitalInAnalogIn::Initialize(ClearCorePins clearCorePin) {
    cd28:	460e      	mov	r6, r1
                    AdcManager::FILTER_UNIT_MS);
    cd2a:	4628      	mov	r0, r5
    cd2c:	f894 1034 	ldrb.w	r1, [r4, #52]	; 0x34
    cd30:	2301      	movs	r3, #1
    cd32:	2202      	movs	r2, #2
    cd34:	f7ff fc5e 	bl	c5f4 <_ZN9ClearCore10AdcManager8FilterTcENS0_11AdcChannelsEtNS0_11FilterUnitsE>
    cd38:	f894 3034 	ldrb.w	r3, [r4, #52]	; 0x34
    cd3c:	005b      	lsls	r3, r3, #1
        return m_AdcResultsConvertedFiltered[adcChannel];
    cd3e:	f103 0210 	add.w	r2, r3, #16
        return m_AdcResultsConverted[adcChannel];
    cd42:	442b      	add	r3, r5
        return m_AdcResultsConvertedFiltered[adcChannel];
    cd44:	4415      	add	r5, r2
    m_adcResultConvertedPtr = &AdcMgr.ConvertedResult(m_adcChannel);
    cd46:	63a3      	str	r3, [r4, #56]	; 0x38
    DigitalIn::Initialize(clearCorePin);
    cd48:	4631      	mov	r1, r6
    m_adcResultConvertedFilteredPtr = &AdcMgr.FilteredResult(m_adcChannel);
    cd4a:	63e5      	str	r5, [r4, #60]	; 0x3c
    DigitalIn::Initialize(clearCorePin);
    cd4c:	4620      	mov	r0, r4
    cd4e:	f000 fb9b 	bl	d488 <_ZN9ClearCore9DigitalIn10InitializeE13ClearCorePins>
    Mode(INPUT_ANALOG);
    cd52:	6823      	ldr	r3, [r4, #0]
    cd54:	4a1d      	ldr	r2, [pc, #116]	; (cdcc <_ZN9ClearCore17DigitalInAnalogIn10InitializeE13ClearCorePins+0xac>)
    cd56:	685b      	ldr	r3, [r3, #4]
    cd58:	4293      	cmp	r3, r2
    cd5a:	d130      	bne.n	cdbe <_ZN9ClearCore17DigitalInAnalogIn10InitializeE13ClearCorePins+0x9e>
    if (newMode == m_mode) {
    cd5c:	79a3      	ldrb	r3, [r4, #6]
    cd5e:	2b01      	cmp	r3, #1
    cd60:	d02c      	beq.n	cdbc <_ZN9ClearCore17DigitalInAnalogIn10InitializeE13ClearCorePins+0x9c>
        atomic_and_fetch(&m_patternOutputs[LED_BLINK_IO_SET], ~bitsToClr);
    cd62:	6b23      	ldr	r3, [r4, #48]	; 0x30
    cd64:	4a1a      	ldr	r2, [pc, #104]	; (cdd0 <_ZN9ClearCore17DigitalInAnalogIn10InitializeE13ClearCorePins+0xb0>)
    cd66:	f3bf 8f5b 	dmb	ish
    cd6a:	43db      	mvns	r3, r3
    cd6c:	e852 1f00 	ldrex	r1, [r2]
    cd70:	4019      	ands	r1, r3
    cd72:	e842 1000 	strex	r0, r1, [r2]
    cd76:	2800      	cmp	r0, #0
    cd78:	d1f8      	bne.n	cd6c <_ZN9ClearCore17DigitalInAnalogIn10InitializeE13ClearCorePins+0x4c>
    cd7a:	f3bf 8f5b 	dmb	ish
            if (ShiftReg.Ready()) {
    cd7e:	3af4      	subs	r2, #244	; 0xf4
    cd80:	f892 3108 	ldrb.w	r3, [r2, #264]	; 0x108
            m_mode = newMode;
    cd84:	2101      	movs	r1, #1
    cd86:	71a1      	strb	r1, [r4, #6]
            if (ShiftReg.Ready()) {
    cd88:	b11b      	cbz	r3, cd92 <_ZN9ClearCore17DigitalInAnalogIn10InitializeE13ClearCorePins+0x72>
                while (!m_analogValid) {
    cd8a:	f894 3040 	ldrb.w	r3, [r4, #64]	; 0x40
    cd8e:	2b00      	cmp	r3, #0
    cd90:	d0fb      	beq.n	cd8a <_ZN9ClearCore17DigitalInAnalogIn10InitializeE13ClearCorePins+0x6a>
        index &= 0xf;   // guard against index out of bounds
    cd92:	7923      	ldrb	r3, [r4, #4]
        state ? m_fadeCounter.m_activeMask |= 1 << index
    cd94:	f8b2 6074 	ldrh.w	r6, [r2, #116]	; 0x74
            ShiftReg.LedInPwm(m_ledMask, true, m_clearCorePin);
    cd98:	68a4      	ldr	r4, [r4, #8]
        state ? m_patternMasks[pattern] |= ledMask
    cd9a:	f8d2 00e8 	ldr.w	r0, [r2, #232]	; 0xe8
        m_fadeCounter.m_analogMasks[index] = ledMask;
    cd9e:	f003 010f 	and.w	r1, r3, #15
        state ? m_fadeCounter.m_activeMask |= 1 << index
    cda2:	2301      	movs	r3, #1
        m_fadeCounter.m_analogMasks[index] = ledMask;
    cda4:	eb02 0581 	add.w	r5, r2, r1, lsl #2
        state ? m_fadeCounter.m_activeMask |= 1 << index
    cda8:	408b      	lsls	r3, r1
    cdaa:	4333      	orrs	r3, r6
        state ? m_patternMasks[pattern] |= ledMask
    cdac:	4320      	orrs	r0, r4
        m_fadeCounter.m_analogMasks[index] = ledMask;
    cdae:	f8c5 40a0 	str.w	r4, [r5, #160]	; 0xa0
        state ? m_fadeCounter.m_activeMask |= 1 << index
    cdb2:	f8a2 3074 	strh.w	r3, [r2, #116]	; 0x74
        state ? m_patternMasks[pattern] |= ledMask
    cdb6:	f8c2 00e8 	str.w	r0, [r2, #232]	; 0xe8
    cdba:	bd70      	pop	{r4, r5, r6, pc}
    cdbc:	bd70      	pop	{r4, r5, r6, pc}
    Mode(INPUT_ANALOG);
    cdbe:	4620      	mov	r0, r4
    cdc0:	2101      	movs	r1, #1
}
    cdc2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    Mode(INPUT_ANALOG);
    cdc6:	4718      	bx	r3
    cdc8:	20001eac 	.word	0x20001eac
    cdcc:	0000cb81 	.word	0x0000cb81
    cdd0:	20001b74 	.word	0x20001b74

0000cdd4 <_ZN9ClearCore17DigitalInAnalogIn5StateEv>:
    switch (m_mode) {
    cdd4:	7982      	ldrb	r2, [r0, #6]
    cdd6:	2a01      	cmp	r2, #1
    cdd8:	d005      	beq.n	cde6 <_ZN9ClearCore17DigitalInAnalogIn5StateEv+0x12>
    cdda:	2a02      	cmp	r2, #2
    cddc:	d101      	bne.n	cde2 <_ZN9ClearCore17DigitalInAnalogIn5StateEv+0xe>
            state = DigitalIn::State();
    cdde:	f000 bb3f 	b.w	d460 <_ZN9ClearCore9DigitalIn5StateEv>
            state = 0;
    cde2:	2000      	movs	r0, #0
    cde4:	4770      	bx	lr
            if (StatusMgr.AdcIsInTimeout()) {
    cde6:	4b0b      	ldr	r3, [pc, #44]	; (ce14 <_ZN9ClearCore17DigitalInAnalogIn5StateEv+0x40>)
int16_t DigitalInAnalogIn::State() {
    cde8:	b510      	push	{r4, lr}
    cdea:	4604      	mov	r4, r0
            if (StatusMgr.AdcIsInTimeout()) {
    cdec:	6818      	ldr	r0, [r3, #0]
    cdee:	f004 fe71 	bl	11ad4 <_ZN9ClearCore13StatusManager14AdcIsInTimeoutEv>
    cdf2:	b958      	cbnz	r0, ce0c <_ZN9ClearCore17DigitalInAnalogIn5StateEv+0x38>
                        (15 - AdcMgr.AdcResolution());
    cdf4:	4b08      	ldr	r3, [pc, #32]	; (ce18 <_ZN9ClearCore17DigitalInAnalogIn5StateEv+0x44>)
                state = *m_adcResultConvertedFilteredPtr >>
    cdf6:	6be2      	ldr	r2, [r4, #60]	; 0x3c
                        (15 - AdcMgr.AdcResolution());
    cdf8:	681b      	ldr	r3, [r3, #0]
                state = *m_adcResultConvertedFilteredPtr >>
    cdfa:	8810      	ldrh	r0, [r2, #0]
                        (15 - AdcMgr.AdcResolution());
    cdfc:	f893 306c 	ldrb.w	r3, [r3, #108]	; 0x6c
                state = *m_adcResultConvertedFilteredPtr >>
    ce00:	b280      	uxth	r0, r0
                        (15 - AdcMgr.AdcResolution());
    ce02:	f1c3 030f 	rsb	r3, r3, #15
                state = *m_adcResultConvertedFilteredPtr >>
    ce06:	4118      	asrs	r0, r3
    ce08:	b200      	sxth	r0, r0
    ce0a:	bd10      	pop	{r4, pc}
                state = -1;
    ce0c:	f04f 30ff 	mov.w	r0, #4294967295
}
    ce10:	bd10      	pop	{r4, pc}
    ce12:	bf00      	nop
    ce14:	20001fc8 	.word	0x20001fc8
    ce18:	20001eac 	.word	0x20001eac

0000ce1c <_ZN9ClearCore12DigitalInOut4ModeEv>:
    }
    ce1c:	7980      	ldrb	r0, [r0, #6]
    ce1e:	4770      	bx	lr

0000ce20 <_ZN9ClearCore12DigitalInOut4TypeEv>:
    }
    ce20:	2001      	movs	r0, #1
    ce22:	4770      	bx	lr

0000ce24 <_ZN9ClearCore12DigitalInOut10IsWritableEv>:
        return m_mode == OUTPUT_DIGITAL || m_mode == OUTPUT_PWM;
    ce24:	7980      	ldrb	r0, [r0, #6]
    ce26:	2804      	cmp	r0, #4
    ce28:	bf1d      	ittte	ne
    ce2a:	3806      	subne	r0, #6
    ce2c:	fab0 f080 	clzne	r0, r0
    ce30:	0940      	lsrne	r0, r0, #5
    ce32:	2001      	moveq	r0, #1
    }
    ce34:	4770      	bx	lr
    ce36:	bf00      	nop

0000ce38 <_ZN9ClearCore12DigitalInOut5StateEs>:
bool DigitalInOut::State(int16_t newState) {
    bool success = false;
    m_pulseActive = false;
    m_pulseStopPending = false;

    switch (m_mode) {
    ce38:	7982      	ldrb	r2, [r0, #6]
    m_pulseActive = false;
    ce3a:	2300      	movs	r3, #0
    switch (m_mode) {
    ce3c:	2a04      	cmp	r2, #4
    m_pulseActive = false;
    ce3e:	f880 3059 	strb.w	r3, [r0, #89]	; 0x59
    m_pulseStopPending = false;
    ce42:	f880 305b 	strb.w	r3, [r0, #91]	; 0x5b
    switch (m_mode) {
    ce46:	d02a      	beq.n	ce9e <_ZN9ClearCore12DigitalInOut5StateEs+0x66>
    ce48:	2a06      	cmp	r2, #6
    ce4a:	d126      	bne.n	ce9a <_ZN9ClearCore12DigitalInOut5StateEs+0x62>
            // Not writable in input mode
            success = false;
            break;
        case OUTPUT_PWM:
            // Cap the input at max PWM (255)
            if (static_cast<uint16_t>(newState) > UINT8_MAX) {
    ce4c:	b28b      	uxth	r3, r1
    ce4e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
    if (m_mode != OUTPUT_PWM) {
        return false;
    }

    // Wait for the TC CC value to be ready to be written
    uint8_t ccBufVal = (m_logicInversion) ? newDuty : 255 - newDuty;
    ce52:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
            if (static_cast<uint16_t>(newState) > UINT8_MAX) {
    ce56:	bf28      	it	cs
    ce58:	21ff      	movcs	r1, #255	; 0xff
bool DigitalInOut::State(int16_t newState) {
    ce5a:	b470      	push	{r4, r5, r6}
    ce5c:	b2c9      	uxtb	r1, r1
    uint8_t ccBufVal = (m_logicInversion) ? newDuty : 255 - newDuty;
    ce5e:	2b00      	cmp	r3, #0
    ce60:	d040      	beq.n	cee4 <_ZN9ClearCore12DigitalInOut5StateEs+0xac>
    ce62:	460d      	mov	r5, r1
    if (m_tc->COUNT8.CCBUF[m_tcPadNum].reg != ccBufVal) {
    ce64:	6c02      	ldr	r2, [r0, #64]	; 0x40
    ce66:	f890 3044 	ldrb.w	r3, [r0, #68]	; 0x44
    ce6a:	18d6      	adds	r6, r2, r3
    ce6c:	f896 4030 	ldrb.w	r4, [r6, #48]	; 0x30
    ce70:	42ac      	cmp	r4, r5
    ce72:	d008      	beq.n	ce86 <_ZN9ClearCore12DigitalInOut5StateEs+0x4e>
        uint32_t syncMask = m_tcPadNum ? TC_SYNCBUSY_CC1 : TC_SYNCBUSY_CC0;
    ce74:	2b00      	cmp	r3, #0
    ce76:	bf0c      	ite	eq
    ce78:	2440      	moveq	r4, #64	; 0x40
    ce7a:	2480      	movne	r4, #128	; 0x80
        SYNCBUSY_WAIT(&m_tc->COUNT8, syncMask);
    ce7c:	6913      	ldr	r3, [r2, #16]
    ce7e:	4223      	tst	r3, r4
    ce80:	d1fc      	bne.n	ce7c <_ZN9ClearCore12DigitalInOut5StateEs+0x44>
        m_tc->COUNT8.CCBUF[m_tcPadNum].reg = ccBufVal;
    ce82:	f886 5030 	strb.w	r5, [r6, #48]	; 0x30
        index &= 0xf;   // guard against index out of bounds
    ce86:	7902      	ldrb	r2, [r0, #4]
        m_fadeCounter.m_valuesBuf[index] = value;
    ce88:	4b18      	ldr	r3, [pc, #96]	; (ceec <_ZN9ClearCore12DigitalInOut5StateEs+0xb4>)
    ce8a:	f002 020f 	and.w	r2, r2, #15
    ce8e:	4413      	add	r3, r2
    ce90:	2001      	movs	r0, #1
    ce92:	f883 108d 	strb.w	r1, [r3, #141]	; 0x8d
}
    ce96:	bc70      	pop	{r4, r5, r6}
    ce98:	4770      	bx	lr
    bool success = false;
    ce9a:	4618      	mov	r0, r3
    ce9c:	4770      	bx	lr
            if (m_outState != static_cast<bool>(newState)) {
    ce9e:	1c0b      	adds	r3, r1, #0
    cea0:	f890 2045 	ldrb.w	r2, [r0, #69]	; 0x45
    cea4:	bf18      	it	ne
    cea6:	2301      	movne	r3, #1
    cea8:	429a      	cmp	r2, r3
    ceaa:	d004      	beq.n	ceb6 <_ZN9ClearCore12DigitalInOut5StateEs+0x7e>
                m_overloadTripCnt = OVERLOAD_TRIP_TICKS;
    ceac:	220c      	movs	r2, #12
                m_outState = static_cast<bool>(newState);
    ceae:	f880 3045 	strb.w	r3, [r0, #69]	; 0x45
                m_overloadTripCnt = OVERLOAD_TRIP_TICKS;
    ceb2:	f880 2058 	strb.w	r2, [r0, #88]	; 0x58
            OutputPin(newState && !m_overloadFoldbackCnt);
    ceb6:	b121      	cbz	r1, cec2 <_ZN9ClearCore12DigitalInOut5StateEs+0x8a>
    ceb8:	f8b0 105c 	ldrh.w	r1, [r0, #92]	; 0x5c
    cebc:	fab1 f181 	clz	r1, r1
    cec0:	0949      	lsrs	r1, r1, #5
    bool m_pulseValue;
    bool m_pulseStopPending;
    uint16_t m_overloadFoldbackCnt;

    void OutputPin(bool val) {
        DATA_OUTPUT_STATE(m_outputPort, m_outputDataMask,
    cec2:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
    cec6:	6b82      	ldr	r2, [r0, #56]	; 0x38
    cec8:	428b      	cmp	r3, r1
    ceca:	6b03      	ldr	r3, [r0, #48]	; 0x30
    cecc:	ea4f 13c3 	mov.w	r3, r3, lsl #7
    ced0:	f103 4382 	add.w	r3, r3, #1090519040	; 0x41000000
    ced4:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
    ced8:	f04f 0001 	mov.w	r0, #1
    cedc:	bf14      	ite	ne
    cede:	619a      	strne	r2, [r3, #24]
    cee0:	615a      	streq	r2, [r3, #20]
    cee2:	4770      	bx	lr
    uint8_t ccBufVal = (m_logicInversion) ? newDuty : 255 - newDuty;
    cee4:	43cd      	mvns	r5, r1
    cee6:	b2ed      	uxtb	r5, r5
    cee8:	e7bc      	b.n	ce64 <_ZN9ClearCore12DigitalInOut5StateEs+0x2c>
    ceea:	bf00      	nop
    ceec:	20001a80 	.word	0x20001a80

0000cef0 <_ZN9ClearCore12DigitalInOut4ModeENS_9Connector14ConnectorModesE>:
    if (newMode == m_mode) {
    cef0:	7983      	ldrb	r3, [r0, #6]
    cef2:	428b      	cmp	r3, r1
    cef4:	f000 80cb 	beq.w	d08e <_ZN9ClearCore12DigitalInOut4ModeENS_9Connector14ConnectorModesE+0x19e>
bool DigitalInOut::Mode(ConnectorModes newMode) {
    cef8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    switch (newMode) {
    cefc:	2904      	cmp	r1, #4
bool DigitalInOut::Mode(ConnectorModes newMode) {
    cefe:	b082      	sub	sp, #8
    cf00:	4604      	mov	r4, r0
    cf02:	460d      	mov	r5, r1
    switch (newMode) {
    cf04:	f000 8087 	beq.w	d016 <_ZN9ClearCore12DigitalInOut4ModeENS_9Connector14ConnectorModesE+0x126>
    cf08:	2906      	cmp	r1, #6
    cf0a:	d008      	beq.n	cf1e <_ZN9ClearCore12DigitalInOut4ModeENS_9Connector14ConnectorModesE+0x2e>
    cf0c:	2902      	cmp	r1, #2
    cf0e:	d033      	beq.n	cf78 <_ZN9ClearCore12DigitalInOut4ModeENS_9Connector14ConnectorModesE+0x88>
    return (m_mode == newMode);
    cf10:	1ae8      	subs	r0, r5, r3
    cf12:	fab0 f080 	clz	r0, r0
    cf16:	0940      	lsrs	r0, r0, #5
}
    cf18:	b002      	add	sp, #8
    cf1a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
            State(0);
    cf1e:	6803      	ldr	r3, [r0, #0]
    cf20:	4a79      	ldr	r2, [pc, #484]	; (d108 <_ZN9ClearCore12DigitalInOut4ModeENS_9Connector14ConnectorModesE+0x218>)
    cf22:	695b      	ldr	r3, [r3, #20]
            m_mode = newMode;
    cf24:	71a1      	strb	r1, [r4, #6]
    cf26:	4293      	cmp	r3, r2
    cf28:	f040 80b3 	bne.w	d092 <_ZN9ClearCore12DigitalInOut4ModeENS_9Connector14ConnectorModesE+0x1a2>
    if (m_tc->COUNT8.CCBUF[m_tcPadNum].reg != ccBufVal) {
    cf2c:	6c01      	ldr	r1, [r0, #64]	; 0x40
    cf2e:	f890 6044 	ldrb.w	r6, [r0, #68]	; 0x44
    uint8_t ccBufVal = (m_logicInversion) ? newDuty : 255 - newDuty;
    cf32:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
    m_pulseActive = false;
    cf36:	2200      	movs	r2, #0
    if (m_tc->COUNT8.CCBUF[m_tcPadNum].reg != ccBufVal) {
    cf38:	1988      	adds	r0, r1, r6
    uint8_t ccBufVal = (m_logicInversion) ? newDuty : 255 - newDuty;
    cf3a:	f083 0301 	eor.w	r3, r3, #1
    m_pulseActive = false;
    cf3e:	f884 2059 	strb.w	r2, [r4, #89]	; 0x59
    m_pulseStopPending = false;
    cf42:	f884 205b 	strb.w	r2, [r4, #91]	; 0x5b
    uint8_t ccBufVal = (m_logicInversion) ? newDuty : 255 - newDuty;
    cf46:	425b      	negs	r3, r3
    if (m_tc->COUNT8.CCBUF[m_tcPadNum].reg != ccBufVal) {
    cf48:	f890 2030 	ldrb.w	r2, [r0, #48]	; 0x30
    uint8_t ccBufVal = (m_logicInversion) ? newDuty : 255 - newDuty;
    cf4c:	b2db      	uxtb	r3, r3
    if (m_tc->COUNT8.CCBUF[m_tcPadNum].reg != ccBufVal) {
    cf4e:	429a      	cmp	r2, r3
    cf50:	d008      	beq.n	cf64 <_ZN9ClearCore12DigitalInOut4ModeENS_9Connector14ConnectorModesE+0x74>
        uint32_t syncMask = m_tcPadNum ? TC_SYNCBUSY_CC1 : TC_SYNCBUSY_CC0;
    cf52:	2e00      	cmp	r6, #0
    cf54:	bf0c      	ite	eq
    cf56:	2640      	moveq	r6, #64	; 0x40
    cf58:	2680      	movne	r6, #128	; 0x80
        SYNCBUSY_WAIT(&m_tc->COUNT8, syncMask);
    cf5a:	690a      	ldr	r2, [r1, #16]
    cf5c:	4232      	tst	r2, r6
    cf5e:	d1fc      	bne.n	cf5a <_ZN9ClearCore12DigitalInOut4ModeENS_9Connector14ConnectorModesE+0x6a>
        m_tc->COUNT8.CCBUF[m_tcPadNum].reg = ccBufVal;
    cf60:	f880 3030 	strb.w	r3, [r0, #48]	; 0x30
    }
    ShiftReg.LedPwmValue(m_clearCorePin, newDuty);
    cf64:	f9b4 1004 	ldrsh.w	r1, [r4, #4]
    cf68:	4e68      	ldr	r6, [pc, #416]	; (d10c <_ZN9ClearCore12DigitalInOut4ModeENS_9Connector14ConnectorModesE+0x21c>)
    cf6a:	f001 020f 	and.w	r2, r1, #15
    cf6e:	18b3      	adds	r3, r6, r2
    cf70:	2000      	movs	r0, #0
    cf72:	f883 008d 	strb.w	r0, [r3, #141]	; 0x8d
    cf76:	e093      	b.n	d0a0 <_ZN9ClearCore12DigitalInOut4ModeENS_9Connector14ConnectorModesE+0x1b0>
            m_pulseActive = false;
    cf78:	2300      	movs	r3, #0
    cf7a:	f890 203c 	ldrb.w	r2, [r0, #60]	; 0x3c
            m_mode = newMode;
    cf7e:	71a1      	strb	r1, [r4, #6]
            m_pulseActive = false;
    cf80:	f880 3059 	strb.w	r3, [r0, #89]	; 0x59
            m_pulseStopPending = false;
    cf84:	f880 305b 	strb.w	r3, [r0, #91]	; 0x5b
    cf88:	6b03      	ldr	r3, [r0, #48]	; 0x30
    cf8a:	6b81      	ldr	r1, [r0, #56]	; 0x38
    cf8c:	01db      	lsls	r3, r3, #7
    cf8e:	2a00      	cmp	r2, #0
    cf90:	d177      	bne.n	d082 <_ZN9ClearCore12DigitalInOut4ModeENS_9Connector14ConnectorModesE+0x192>
    cf92:	f103 4282 	add.w	r2, r3, #1090519040	; 0x41000000
    cf96:	f502 4200 	add.w	r2, r2, #32768	; 0x8000
    cf9a:	6151      	str	r1, [r2, #20]
            ShiftReg.LedInPwm(m_ledMask, false, m_clearCorePin);
    cf9c:	f9b4 1004 	ldrsh.w	r1, [r4, #4]
        m_fadeCounter.m_analogMasks[index] = ledMask;
    cfa0:	4e5a      	ldr	r6, [pc, #360]	; (d10c <_ZN9ClearCore12DigitalInOut4ModeENS_9Connector14ConnectorModesE+0x21c>)
            PMUX_DISABLE(m_outputPort, m_outputDataBit);
    cfa2:	6b67      	ldr	r7, [r4, #52]	; 0x34
                                              : m_fadeCounter.m_activeMask &= ~(1 << index);
    cfa4:	f8b6 8074 	ldrh.w	r8, [r6, #116]	; 0x74
            ShiftReg.LedInPwm(m_ledMask, false, m_clearCorePin);
    cfa8:	f8d4 c008 	ldr.w	ip, [r4, #8]
                                           : m_patternMasks[pattern] &= ~ledMask;
    cfac:	f8d6 00e8 	ldr.w	r0, [r6, #232]	; 0xe8
            PMUX_DISABLE(m_outputPort, m_outputDataBit);
    cfb0:	f103 4382 	add.w	r3, r3, #1090519040	; 0x41000000
        m_fadeCounter.m_analogMasks[index] = ledMask;
    cfb4:	f001 020f 	and.w	r2, r1, #15
                                              : m_fadeCounter.m_activeMask &= ~(1 << index);
    cfb8:	f04f 0e01 	mov.w	lr, #1
    cfbc:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
    cfc0:	443b      	add	r3, r7
    cfc2:	fa0e f702 	lsl.w	r7, lr, r2
    cfc6:	ea28 0707 	bic.w	r7, r8, r7
    cfca:	f8a6 7074 	strh.w	r7, [r6, #116]	; 0x74
        m_fadeCounter.m_analogMasks[index] = ledMask;
    cfce:	eb06 0282 	add.w	r2, r6, r2, lsl #2
                                           : m_patternMasks[pattern] &= ~ledMask;
    cfd2:	ea6f 070c 	mvn.w	r7, ip
    cfd6:	4038      	ands	r0, r7
        m_fadeCounter.m_analogMasks[index] = ledMask;
    cfd8:	f8c2 c0a0 	str.w	ip, [r2, #160]	; 0xa0
                                           : m_patternMasks[pattern] &= ~ledMask;
    cfdc:	f8c6 00e8 	str.w	r0, [r6, #232]	; 0xe8
    cfe0:	f893 2040 	ldrb.w	r2, [r3, #64]	; 0x40
    cfe4:	f36f 0200 	bfc	r2, #0, #1
    cfe8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    return true;
}

void DigitalInOut::IsInHwFault(bool inFault) {
    if (inFault != m_isInFault) {
    cfec:	f894 303d 	ldrb.w	r3, [r4, #61]	; 0x3d
    cff0:	2b00      	cmp	r3, #0
    cff2:	f000 8086 	beq.w	d102 <_ZN9ClearCore12DigitalInOut4ModeENS_9Connector14ConnectorModesE+0x212>
            m_patternMasks[LED_BLINK_OVERLOAD] &= ~ledMask;
    cff6:	f8d6 30f0 	ldr.w	r3, [r6, #240]	; 0xf0
        m_isInFault = inFault;
        ShiftReg.LedInFault(m_ledMask, m_isInFault);
        StatusMgr.OverloadUpdate(1UL << m_clearCorePin, m_isInFault);
    cffa:	4845      	ldr	r0, [pc, #276]	; (d110 <_ZN9ClearCore12DigitalInOut4ModeENS_9Connector14ConnectorModesE+0x220>)
    cffc:	fa0e f101 	lsl.w	r1, lr, r1
        m_isInFault = inFault;
    d000:	2200      	movs	r2, #0
    d002:	401f      	ands	r7, r3
    d004:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
        StatusMgr.OverloadUpdate(1UL << m_clearCorePin, m_isInFault);
    d008:	6800      	ldr	r0, [r0, #0]
    d00a:	f8c6 70f0 	str.w	r7, [r6, #240]	; 0xf0
    d00e:	f004 ff55 	bl	11ebc <_ZN9ClearCore13StatusManager14OverloadUpdateEmb>
    d012:	79a3      	ldrb	r3, [r4, #6]
    d014:	e77c      	b.n	cf10 <_ZN9ClearCore12DigitalInOut4ModeENS_9Connector14ConnectorModesE+0x20>
            m_overloadTripCnt = OVERLOAD_TRIP_TICKS;
    d016:	220c      	movs	r2, #12
            State(m_outState);
    d018:	6803      	ldr	r3, [r0, #0]
            m_overloadTripCnt = OVERLOAD_TRIP_TICKS;
    d01a:	f880 2058 	strb.w	r2, [r0, #88]	; 0x58
            m_overloadFoldbackCnt = 0;
    d01e:	2600      	movs	r6, #0
            m_mode = newMode;
    d020:	71a1      	strb	r1, [r4, #6]
            State(m_outState);
    d022:	695b      	ldr	r3, [r3, #20]
    d024:	f890 1045 	ldrb.w	r1, [r0, #69]	; 0x45
            m_overloadFoldbackCnt = 0;
    d028:	f8a0 605c 	strh.w	r6, [r0, #92]	; 0x5c
            State(m_outState);
    d02c:	4798      	blx	r3
        index &= 0xf;   // guard against index out of bounds
    d02e:	7922      	ldrb	r2, [r4, #4]
        m_fadeCounter.m_analogMasks[index] = ledMask;
    d030:	4936      	ldr	r1, [pc, #216]	; (d10c <_ZN9ClearCore12DigitalInOut4ModeENS_9Connector14ConnectorModesE+0x21c>)
            PMUX_DISABLE(m_outputPort, m_outputDataBit);
    d032:	6b20      	ldr	r0, [r4, #48]	; 0x30
    d034:	6b63      	ldr	r3, [r4, #52]	; 0x34
                                              : m_fadeCounter.m_activeMask &= ~(1 << index);
    d036:	f8b1 7074 	ldrh.w	r7, [r1, #116]	; 0x74
        m_fadeCounter.m_analogMasks[index] = ledMask;
    d03a:	f002 020f 	and.w	r2, r2, #15
                                              : m_fadeCounter.m_activeMask &= ~(1 << index);
    d03e:	f04f 0e01 	mov.w	lr, #1
    d042:	eb03 13c0 	add.w	r3, r3, r0, lsl #7
    d046:	fa0e f002 	lsl.w	r0, lr, r2
    d04a:	ea27 0700 	bic.w	r7, r7, r0
            ShiftReg.LedInPwm(m_ledMask, false, m_clearCorePin);
    d04e:	f8d4 e008 	ldr.w	lr, [r4, #8]
                                           : m_patternMasks[pattern] &= ~ledMask;
    d052:	f8d1 00e8 	ldr.w	r0, [r1, #232]	; 0xe8
                                              : m_fadeCounter.m_activeMask &= ~(1 << index);
    d056:	f8a1 7074 	strh.w	r7, [r1, #116]	; 0x74
        m_fadeCounter.m_analogMasks[index] = ledMask;
    d05a:	eb01 0282 	add.w	r2, r1, r2, lsl #2
            PMUX_DISABLE(m_outputPort, m_outputDataBit);
    d05e:	f103 4382 	add.w	r3, r3, #1090519040	; 0x41000000
    d062:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
                                           : m_patternMasks[pattern] &= ~ledMask;
    d066:	ea20 000e 	bic.w	r0, r0, lr
        m_fadeCounter.m_analogMasks[index] = ledMask;
    d06a:	f8c2 e0a0 	str.w	lr, [r2, #160]	; 0xa0
                                           : m_patternMasks[pattern] &= ~ledMask;
    d06e:	f8c1 00e8 	str.w	r0, [r1, #232]	; 0xe8
    d072:	f893 2040 	ldrb.w	r2, [r3, #64]	; 0x40
    d076:	f366 0200 	bfi	r2, r6, #0, #1
    d07a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    d07e:	79a3      	ldrb	r3, [r4, #6]
            break;
    d080:	e746      	b.n	cf10 <_ZN9ClearCore12DigitalInOut4ModeENS_9Connector14ConnectorModesE+0x20>
    d082:	f103 4282 	add.w	r2, r3, #1090519040	; 0x41000000
    d086:	f502 4200 	add.w	r2, r2, #32768	; 0x8000
    d08a:	6191      	str	r1, [r2, #24]
    d08c:	e786      	b.n	cf9c <_ZN9ClearCore12DigitalInOut4ModeENS_9Connector14ConnectorModesE+0xac>
        return true;
    d08e:	2001      	movs	r0, #1
    d090:	4770      	bx	lr
            State(0);
    d092:	2100      	movs	r1, #0
    d094:	4798      	blx	r3
    d096:	f9b4 1004 	ldrsh.w	r1, [r4, #4]
    d09a:	4e1c      	ldr	r6, [pc, #112]	; (d10c <_ZN9ClearCore12DigitalInOut4ModeENS_9Connector14ConnectorModesE+0x21c>)
    d09c:	f001 020f 	and.w	r2, r1, #15
        state ? m_patternMasks[pattern] |= ledMask
    d0a0:	f8d6 30e8 	ldr.w	r3, [r6, #232]	; 0xe8
            PMUX_ENABLE(m_outputPort, m_outputDataBit);
    d0a4:	6b60      	ldr	r0, [r4, #52]	; 0x34
    d0a6:	9301      	str	r3, [sp, #4]
    d0a8:	6b23      	ldr	r3, [r4, #48]	; 0x30
            ShiftReg.LedInPwm(m_ledMask, true, m_clearCorePin);
    d0aa:	68a7      	ldr	r7, [r4, #8]
        state ? m_fadeCounter.m_activeMask |= 1 << index
    d0ac:	f8b6 8074 	ldrh.w	r8, [r6, #116]	; 0x74
            PMUX_ENABLE(m_outputPort, m_outputDataBit);
    d0b0:	eb00 13c3 	add.w	r3, r0, r3, lsl #7
    d0b4:	f04f 0c01 	mov.w	ip, #1
        state ? m_patternMasks[pattern] |= ledMask
    d0b8:	9801      	ldr	r0, [sp, #4]
        state ? m_fadeCounter.m_activeMask |= 1 << index
    d0ba:	fa0c fe02 	lsl.w	lr, ip, r2
    d0be:	f103 4382 	add.w	r3, r3, #1090519040	; 0x41000000
        m_fadeCounter.m_analogMasks[index] = ledMask;
    d0c2:	eb06 0282 	add.w	r2, r6, r2, lsl #2
    d0c6:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
        state ? m_fadeCounter.m_activeMask |= 1 << index
    d0ca:	ea4e 0e08 	orr.w	lr, lr, r8
        state ? m_patternMasks[pattern] |= ledMask
    d0ce:	4338      	orrs	r0, r7
        state ? m_fadeCounter.m_activeMask |= 1 << index
    d0d0:	f8a6 e074 	strh.w	lr, [r6, #116]	; 0x74
        m_fadeCounter.m_analogMasks[index] = ledMask;
    d0d4:	f8c2 70a0 	str.w	r7, [r2, #160]	; 0xa0
        state ? m_patternMasks[pattern] |= ledMask
    d0d8:	f8c6 00e8 	str.w	r0, [r6, #232]	; 0xe8
    d0dc:	f893 2040 	ldrb.w	r2, [r3, #64]	; 0x40
    d0e0:	ea42 020c 	orr.w	r2, r2, ip
    d0e4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    if (inFault != m_isInFault) {
    d0e8:	f894 303d 	ldrb.w	r3, [r4, #61]	; 0x3d
    d0ec:	2b00      	cmp	r3, #0
    d0ee:	d090      	beq.n	d012 <_ZN9ClearCore12DigitalInOut4ModeENS_9Connector14ConnectorModesE+0x122>
            m_patternMasks[LED_BLINK_OVERLOAD] &= ~ledMask;
    d0f0:	f8d6 30f0 	ldr.w	r3, [r6, #240]	; 0xf0
        StatusMgr.OverloadUpdate(1UL << m_clearCorePin, m_isInFault);
    d0f4:	4806      	ldr	r0, [pc, #24]	; (d110 <_ZN9ClearCore12DigitalInOut4ModeENS_9Connector14ConnectorModesE+0x220>)
    d0f6:	fa0c f101 	lsl.w	r1, ip, r1
        m_isInFault = inFault;
    d0fa:	2200      	movs	r2, #0
    d0fc:	ea23 0707 	bic.w	r7, r3, r7
    d100:	e780      	b.n	d004 <_ZN9ClearCore12DigitalInOut4ModeENS_9Connector14ConnectorModesE+0x114>
    if (inFault != m_isInFault) {
    d102:	2302      	movs	r3, #2
    d104:	e704      	b.n	cf10 <_ZN9ClearCore12DigitalInOut4ModeENS_9Connector14ConnectorModesE+0x20>
    d106:	bf00      	nop
    d108:	0000ce39 	.word	0x0000ce39
    d10c:	20001a80 	.word	0x20001a80
    d110:	20001fc8 	.word	0x20001fc8

0000d114 <_ZN9ClearCore12DigitalInOutC1ENS_13ShiftRegister5MasksEPK15PeripheralRouteS5_b>:
DigitalInOut::DigitalInOut(ShiftRegister::Masks ledMask,
    d114:	b570      	push	{r4, r5, r6, lr}
    d116:	461d      	mov	r5, r3
    d118:	4604      	mov	r4, r0
    d11a:	f89d 6010 	ldrb.w	r6, [sp, #16]
      m_overloadFoldbackCnt(0) {
    d11e:	f000 fac9 	bl	d6b4 <_ZN9ClearCore9DigitalInC1ENS_13ShiftRegister5MasksEPK15PeripheralRoute>
      m_outputPort(outputInfo->gpioPort),
    d122:	f995 3001 	ldrsb.w	r3, [r5, #1]
      m_overloadFoldbackCnt(0) {
    d126:	4a14      	ldr	r2, [pc, #80]	; (d178 <_ZN9ClearCore12DigitalInOutC1ENS_13ShiftRegister5MasksEPK15PeripheralRouteS5_b+0x64>)
      m_outputPort(outputInfo->gpioPort),
    d128:	6323      	str	r3, [r4, #48]	; 0x30
      m_overloadFoldbackCnt(0) {
    d12a:	6022      	str	r2, [r4, #0]
      m_outputDataBit(outputInfo->gpioPin),
    d12c:	78aa      	ldrb	r2, [r5, #2]
    d12e:	6362      	str	r2, [r4, #52]	; 0x34
      m_outputDataMask(1UL << outputInfo->gpioPin),
    d130:	2301      	movs	r3, #1
    d132:	4093      	lsls	r3, r2
      m_overloadFoldbackCnt(0) {
    d134:	2200      	movs	r2, #0
    d136:	f884 603c 	strb.w	r6, [r4, #60]	; 0x3c
    d13a:	63a3      	str	r3, [r4, #56]	; 0x38
    d13c:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
    d140:	7aeb      	ldrb	r3, [r5, #11]
    d142:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
    d146:	230c      	movs	r3, #12
    d148:	f884 3058 	strb.w	r3, [r4, #88]	; 0x58
    d14c:	f884 2045 	strb.w	r2, [r4, #69]	; 0x45
    d150:	64a2      	str	r2, [r4, #72]	; 0x48
    d152:	64e2      	str	r2, [r4, #76]	; 0x4c
    d154:	6522      	str	r2, [r4, #80]	; 0x50
    d156:	6562      	str	r2, [r4, #84]	; 0x54
    d158:	f884 2059 	strb.w	r2, [r4, #89]	; 0x59
    d15c:	f884 205a 	strb.w	r2, [r4, #90]	; 0x5a
    d160:	f884 205b 	strb.w	r2, [r4, #91]	; 0x5b
    d164:	f8a4 205c 	strh.w	r2, [r4, #92]	; 0x5c
    m_tc = tc_modules[outputInfo->tcNum];
    d168:	7aaa      	ldrb	r2, [r5, #10]
    d16a:	4b04      	ldr	r3, [pc, #16]	; (d17c <_ZN9ClearCore12DigitalInOutC1ENS_13ShiftRegister5MasksEPK15PeripheralRouteS5_b+0x68>)
    d16c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    d170:	6423      	str	r3, [r4, #64]	; 0x40
}
    d172:	4620      	mov	r0, r4
    d174:	bd70      	pop	{r4, r5, r6, pc}
    d176:	bf00      	nop
    d178:	0002d278 	.word	0x0002d278
    d17c:	0002d2a0 	.word	0x0002d2a0

0000d180 <_ZN9ClearCore12DigitalInOut7RefreshEv>:
void DigitalInOut::Refresh() {
    d180:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    d182:	4604      	mov	r4, r0
    DigitalIn::Refresh();
    d184:	f000 f9e6 	bl	d554 <_ZN9ClearCore9DigitalIn7RefreshEv>
    switch (m_mode) {
    d188:	79a3      	ldrb	r3, [r4, #6]
    d18a:	2b04      	cmp	r3, #4
    d18c:	d12d      	bne.n	d1ea <_ZN9ClearCore12DigitalInOut7RefreshEv+0x6a>
            if (m_overloadFoldbackCnt) {
    d18e:	f8b4 305c 	ldrh.w	r3, [r4, #92]	; 0x5c
    d192:	bb5b      	cbnz	r3, d1ec <_ZN9ClearCore12DigitalInOut7RefreshEv+0x6c>
            else if (m_outState && !StateRT()) {
    d194:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
    d198:	2b00      	cmp	r3, #0
    d19a:	f040 809d 	bne.w	d2d8 <_ZN9ClearCore12DigitalInOut7RefreshEv+0x158>
    if (inFault != m_isInFault) {
    d19e:	f894 303d 	ldrb.w	r3, [r4, #61]	; 0x3d
                m_overloadTripCnt = OVERLOAD_TRIP_TICKS;
    d1a2:	220c      	movs	r2, #12
    d1a4:	f884 2058 	strb.w	r2, [r4, #88]	; 0x58
    if (inFault != m_isInFault) {
    d1a8:	b19b      	cbz	r3, d1d2 <_ZN9ClearCore12DigitalInOut7RefreshEv+0x52>
    d1aa:	4d75      	ldr	r5, [pc, #468]	; (d380 <_ZN9ClearCore12DigitalInOut7RefreshEv+0x200>)
    d1ac:	68a7      	ldr	r7, [r4, #8]
    d1ae:	f8d5 30f0 	ldr.w	r3, [r5, #240]	; 0xf0
        StatusMgr.OverloadUpdate(1UL << m_clearCorePin, m_isInFault);
    d1b2:	f9b4 1004 	ldrsh.w	r1, [r4, #4]
    d1b6:	4873      	ldr	r0, [pc, #460]	; (d384 <_ZN9ClearCore12DigitalInOut7RefreshEv+0x204>)
        m_isInFault = inFault;
    d1b8:	2200      	movs	r2, #0
        StatusMgr.OverloadUpdate(1UL << m_clearCorePin, m_isInFault);
    d1ba:	2601      	movs	r6, #1
    d1bc:	ea23 0307 	bic.w	r3, r3, r7
        m_isInFault = inFault;
    d1c0:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
        StatusMgr.OverloadUpdate(1UL << m_clearCorePin, m_isInFault);
    d1c4:	fa06 f101 	lsl.w	r1, r6, r1
    d1c8:	6800      	ldr	r0, [r0, #0]
    d1ca:	f8c5 30f0 	str.w	r3, [r5, #240]	; 0xf0
    d1ce:	f004 fe75 	bl	11ebc <_ZN9ClearCore13StatusManager14OverloadUpdateEmb>
            if (!m_pulseActive) {
    d1d2:	f894 3059 	ldrb.w	r3, [r4, #89]	; 0x59
    d1d6:	b143      	cbz	r3, d1ea <_ZN9ClearCore12DigitalInOut7RefreshEv+0x6a>
            if (m_pulseStopCount == 0 || m_pulseCounter < m_pulseStopCount) {
    d1d8:	f8b4 3054 	ldrh.w	r3, [r4, #84]	; 0x54
    d1dc:	b303      	cbz	r3, d220 <_ZN9ClearCore12DigitalInOut7RefreshEv+0xa0>
    d1de:	f8b4 2056 	ldrh.w	r2, [r4, #86]	; 0x56
    d1e2:	429a      	cmp	r2, r3
    d1e4:	db1c      	blt.n	d220 <_ZN9ClearCore12DigitalInOut7RefreshEv+0xa0>
            else if (m_pulseCounter == m_pulseStopCount) {
    d1e6:	4293      	cmp	r3, r2
    d1e8:	d070      	beq.n	d2cc <_ZN9ClearCore12DigitalInOut7RefreshEv+0x14c>
    d1ea:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
                if (!(--m_overloadFoldbackCnt)) {
    d1ec:	3b01      	subs	r3, #1
    d1ee:	b29b      	uxth	r3, r3
    d1f0:	f8a4 305c 	strh.w	r3, [r4, #92]	; 0x5c
    d1f4:	2b00      	cmp	r3, #0
    d1f6:	d1ec      	bne.n	d1d2 <_ZN9ClearCore12DigitalInOut7RefreshEv+0x52>
    d1f8:	f894 2045 	ldrb.w	r2, [r4, #69]	; 0x45
    d1fc:	f894 303c 	ldrb.w	r3, [r4, #60]	; 0x3c
    d200:	429a      	cmp	r2, r3
    d202:	6b23      	ldr	r3, [r4, #48]	; 0x30
    d204:	6ba2      	ldr	r2, [r4, #56]	; 0x38
    d206:	ea4f 13c3 	mov.w	r3, r3, lsl #7
    d20a:	f103 4382 	add.w	r3, r3, #1090519040	; 0x41000000
    d20e:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
    d212:	bf14      	ite	ne
    d214:	619a      	strne	r2, [r3, #24]
    d216:	615a      	streq	r2, [r3, #20]
                    m_overloadTripCnt = OVERLOAD_TRIP_TICKS;
    d218:	230c      	movs	r3, #12
    d21a:	f884 3058 	strb.w	r3, [r4, #88]	; 0x58
    d21e:	e7d8      	b.n	d1d2 <_ZN9ClearCore12DigitalInOut7RefreshEv+0x52>
                if (m_pulseValue) {
    d220:	f894 305a 	ldrb.w	r3, [r4, #90]	; 0x5a
    d224:	bb5b      	cbnz	r3, d27e <_ZN9ClearCore12DigitalInOut7RefreshEv+0xfe>
                    if (m_pulseStopPending) {
    d226:	f894 305b 	ldrb.w	r3, [r4, #91]	; 0x5b
    d22a:	2b00      	cmp	r3, #0
    d22c:	d14e      	bne.n	d2cc <_ZN9ClearCore12DigitalInOut7RefreshEv+0x14c>
                    else if (tickCnt - m_pulseStart >= m_pulseOffTicks) {
    d22e:	4a56      	ldr	r2, [pc, #344]	; (d388 <_ZN9ClearCore12DigitalInOut7RefreshEv+0x208>)
    d230:	6d20      	ldr	r0, [r4, #80]	; 0x50
    d232:	6813      	ldr	r3, [r2, #0]
    d234:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
    d236:	1a1b      	subs	r3, r3, r0
    d238:	428b      	cmp	r3, r1
    d23a:	d3d6      	bcc.n	d1ea <_ZN9ClearCore12DigitalInOut7RefreshEv+0x6a>
                        OutputPin(!m_overloadFoldbackCnt);
    d23c:	f8b4 305c 	ldrh.w	r3, [r4, #92]	; 0x5c
    d240:	f894 103c 	ldrb.w	r1, [r4, #60]	; 0x3c
                        m_pulseStart = tickCnt;
    d244:	6812      	ldr	r2, [r2, #0]
    d246:	6522      	str	r2, [r4, #80]	; 0x50
    d248:	fab3 f383 	clz	r3, r3
    d24c:	095b      	lsrs	r3, r3, #5
    d24e:	428b      	cmp	r3, r1
    d250:	6b23      	ldr	r3, [r4, #48]	; 0x30
    d252:	ea4f 13c3 	mov.w	r3, r3, lsl #7
    d256:	f103 4382 	add.w	r3, r3, #1090519040	; 0x41000000
    d25a:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
                        m_overloadTripCnt = OVERLOAD_TRIP_TICKS;
    d25e:	f04f 020c 	mov.w	r2, #12
    d262:	f884 2058 	strb.w	r2, [r4, #88]	; 0x58
                        m_pulseValue = true;
    d266:	f04f 0001 	mov.w	r0, #1
    d26a:	6ba2      	ldr	r2, [r4, #56]	; 0x38
    d26c:	f884 005a 	strb.w	r0, [r4, #90]	; 0x5a
    d270:	bf14      	ite	ne
    d272:	619a      	strne	r2, [r3, #24]
    d274:	615a      	streq	r2, [r3, #20]
                        m_outState = true;
    d276:	2301      	movs	r3, #1
    d278:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
    d27c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
                    if (tickCnt - m_pulseStart >= m_pulseOnTicks) {
    d27e:	4a42      	ldr	r2, [pc, #264]	; (d388 <_ZN9ClearCore12DigitalInOut7RefreshEv+0x208>)
    d280:	6d20      	ldr	r0, [r4, #80]	; 0x50
    d282:	6813      	ldr	r3, [r2, #0]
    d284:	6ca1      	ldr	r1, [r4, #72]	; 0x48
    d286:	1a1b      	subs	r3, r3, r0
    d288:	428b      	cmp	r3, r1
    d28a:	d3ae      	bcc.n	d1ea <_ZN9ClearCore12DigitalInOut7RefreshEv+0x6a>
                        m_pulseStart = tickCnt;
    d28c:	6812      	ldr	r2, [r2, #0]
    d28e:	f894 303c 	ldrb.w	r3, [r4, #60]	; 0x3c
    d292:	6522      	str	r2, [r4, #80]	; 0x50
                        m_pulseValue = false;
    d294:	2100      	movs	r1, #0
                        m_overloadTripCnt = OVERLOAD_TRIP_TICKS;
    d296:	220c      	movs	r2, #12
                        m_pulseValue = false;
    d298:	f884 105a 	strb.w	r1, [r4, #90]	; 0x5a
                        m_overloadTripCnt = OVERLOAD_TRIP_TICKS;
    d29c:	f884 2058 	strb.w	r2, [r4, #88]	; 0x58
    d2a0:	2b00      	cmp	r3, #0
    d2a2:	d15b      	bne.n	d35c <_ZN9ClearCore12DigitalInOut7RefreshEv+0x1dc>
    d2a4:	6b23      	ldr	r3, [r4, #48]	; 0x30
    d2a6:	6ba2      	ldr	r2, [r4, #56]	; 0x38
    d2a8:	01db      	lsls	r3, r3, #7
    d2aa:	f103 4382 	add.w	r3, r3, #1090519040	; 0x41000000
    d2ae:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
    d2b2:	615a      	str	r2, [r3, #20]
                        ++m_pulseCounter;
    d2b4:	f8b4 3056 	ldrh.w	r3, [r4, #86]	; 0x56
                        if (m_pulseStopPending) {
    d2b8:	f894 205b 	ldrb.w	r2, [r4, #91]	; 0x5b
                        ++m_pulseCounter;
    d2bc:	3301      	adds	r3, #1
                        m_outState = false;
    d2be:	2100      	movs	r1, #0
                        ++m_pulseCounter;
    d2c0:	f8a4 3056 	strh.w	r3, [r4, #86]	; 0x56
                        m_outState = false;
    d2c4:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
                        if (m_pulseStopPending) {
    d2c8:	2a00      	cmp	r2, #0
    d2ca:	d08e      	beq.n	d1ea <_ZN9ClearCore12DigitalInOut7RefreshEv+0x6a>
                            m_pulseActive = false;
    d2cc:	2300      	movs	r3, #0
    d2ce:	f884 3059 	strb.w	r3, [r4, #89]	; 0x59
                            m_pulseStopPending = false;
    d2d2:	f884 305b 	strb.w	r3, [r4, #91]	; 0x5b
    d2d6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
            else if (m_outState && !StateRT()) {
    d2d8:	4620      	mov	r0, r4
    d2da:	f000 fa0f 	bl	d6fc <_ZN9ClearCore9DigitalIn7StateRTEv>
    d2de:	2800      	cmp	r0, #0
    d2e0:	f47f af5d 	bne.w	d19e <_ZN9ClearCore12DigitalInOut7RefreshEv+0x1e>
                if (m_overloadTripCnt && !--m_overloadTripCnt) {
    d2e4:	f894 3058 	ldrb.w	r3, [r4, #88]	; 0x58
    d2e8:	2b00      	cmp	r3, #0
    d2ea:	f43f af72 	beq.w	d1d2 <_ZN9ClearCore12DigitalInOut7RefreshEv+0x52>
    d2ee:	3b01      	subs	r3, #1
    d2f0:	b2db      	uxtb	r3, r3
    d2f2:	f884 3058 	strb.w	r3, [r4, #88]	; 0x58
    d2f6:	2b00      	cmp	r3, #0
    d2f8:	f47f af6b 	bne.w	d1d2 <_ZN9ClearCore12DigitalInOut7RefreshEv+0x52>
    if (inFault != m_isInFault) {
    d2fc:	f894 603d 	ldrb.w	r6, [r4, #61]	; 0x3d
    d300:	b9e6      	cbnz	r6, d33c <_ZN9ClearCore12DigitalInOut7RefreshEv+0x1bc>
            m_patternMasks[LED_BLINK_OVERLOAD] |= ledMask;
    d302:	4a1f      	ldr	r2, [pc, #124]	; (d380 <_ZN9ClearCore12DigitalInOut7RefreshEv+0x200>)
        StatusMgr.OverloadUpdate(1UL << m_clearCorePin, m_isInFault);
    d304:	491f      	ldr	r1, [pc, #124]	; (d384 <_ZN9ClearCore12DigitalInOut7RefreshEv+0x204>)
    d306:	f8d2 00f0 	ldr.w	r0, [r2, #240]	; 0xf0
    d30a:	68a3      	ldr	r3, [r4, #8]
    d30c:	680f      	ldr	r7, [r1, #0]
    d30e:	f9b4 1004 	ldrsh.w	r1, [r4, #4]
        m_isInFault = inFault;
    d312:	2501      	movs	r5, #1
    d314:	4303      	orrs	r3, r0
    d316:	f884 503d 	strb.w	r5, [r4, #61]	; 0x3d
        StatusMgr.OverloadUpdate(1UL << m_clearCorePin, m_isInFault);
    d31a:	fa05 f101 	lsl.w	r1, r5, r1
    d31e:	4638      	mov	r0, r7
    d320:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
    d324:	462a      	mov	r2, r5
    d326:	f004 fdc9 	bl	11ebc <_ZN9ClearCore13StatusManager14OverloadUpdateEmb>
        if (inFault) {
            StatusMgr.BlinkCode(
                BlinkCodeDriver::BLINK_GROUP_IO_OVERLOAD,
                1UL << m_clearCorePin);
    d32a:	f9b4 2004 	ldrsh.w	r2, [r4, #4]
    d32e:	fa05 f202 	lsl.w	r2, r5, r2
    d332:	4638      	mov	r0, r7
    d334:	4631      	mov	r1, r6
    d336:	b2d2      	uxtb	r2, r2
    d338:	f004 fc14 	bl	11b64 <_ZN9ClearCore13StatusManager9BlinkCodeENS_15BlinkCodeDriver15BlinkCodeGroupsEh>
    d33c:	f894 303c 	ldrb.w	r3, [r4, #60]	; 0x3c
    d340:	b9ab      	cbnz	r3, d36e <_ZN9ClearCore12DigitalInOut7RefreshEv+0x1ee>
    d342:	6b23      	ldr	r3, [r4, #48]	; 0x30
    d344:	6ba2      	ldr	r2, [r4, #56]	; 0x38
    d346:	01db      	lsls	r3, r3, #7
    d348:	f103 4382 	add.w	r3, r3, #1090519040	; 0x41000000
    d34c:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
    d350:	615a      	str	r2, [r3, #20]
                    m_overloadFoldbackCnt = OVERLOAD_FOLDBACK_TICKS;
    d352:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
    d356:	f8a4 305c 	strh.w	r3, [r4, #92]	; 0x5c
    d35a:	e73a      	b.n	d1d2 <_ZN9ClearCore12DigitalInOut7RefreshEv+0x52>
    d35c:	6b23      	ldr	r3, [r4, #48]	; 0x30
    d35e:	6ba2      	ldr	r2, [r4, #56]	; 0x38
    d360:	01db      	lsls	r3, r3, #7
    d362:	f103 4382 	add.w	r3, r3, #1090519040	; 0x41000000
    d366:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
    d36a:	619a      	str	r2, [r3, #24]
    d36c:	e7a2      	b.n	d2b4 <_ZN9ClearCore12DigitalInOut7RefreshEv+0x134>
    d36e:	6b23      	ldr	r3, [r4, #48]	; 0x30
    d370:	6ba2      	ldr	r2, [r4, #56]	; 0x38
    d372:	01db      	lsls	r3, r3, #7
    d374:	f103 4382 	add.w	r3, r3, #1090519040	; 0x41000000
    d378:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
    d37c:	619a      	str	r2, [r3, #24]
    d37e:	e7e8      	b.n	d352 <_ZN9ClearCore12DigitalInOut7RefreshEv+0x1d2>
    d380:	20001a80 	.word	0x20001a80
    d384:	20001fc8 	.word	0x20001fc8
    d388:	20001c90 	.word	0x20001c90

0000d38c <_ZN9ClearCore12DigitalInOut5StateEv>:
    switch (m_mode) {
    d38c:	7983      	ldrb	r3, [r0, #6]
    d38e:	2b04      	cmp	r3, #4
    d390:	d014      	beq.n	d3bc <_ZN9ClearCore12DigitalInOut5StateEv+0x30>
    d392:	2b06      	cmp	r3, #6
    d394:	d005      	beq.n	d3a2 <_ZN9ClearCore12DigitalInOut5StateEv+0x16>
    d396:	2b02      	cmp	r3, #2
    d398:	d001      	beq.n	d39e <_ZN9ClearCore12DigitalInOut5StateEv+0x12>
            state = 0;
    d39a:	2000      	movs	r0, #0
    d39c:	4770      	bx	lr
            state = DigitalIn::State();
    d39e:	f000 b85f 	b.w	d460 <_ZN9ClearCore9DigitalIn5StateEv>
            if (!m_tc) {
    d3a2:	6c03      	ldr	r3, [r0, #64]	; 0x40
    d3a4:	b173      	cbz	r3, d3c4 <_ZN9ClearCore12DigitalInOut5StateEv+0x38>
                state = m_tc->COUNT8.CCBUF[m_tcPadNum].reg;
    d3a6:	f890 2044 	ldrb.w	r2, [r0, #68]	; 0x44
            if (m_logicInversion) {
    d3aa:	f890 103c 	ldrb.w	r1, [r0, #60]	; 0x3c
                state = m_tc->COUNT8.CCBUF[m_tcPadNum].reg;
    d3ae:	4413      	add	r3, r2
    d3b0:	f893 0030 	ldrb.w	r0, [r3, #48]	; 0x30
            if (m_logicInversion) {
    d3b4:	b929      	cbnz	r1, d3c2 <_ZN9ClearCore12DigitalInOut5StateEv+0x36>
                state = 255 - m_tc->COUNT8.CCBUF[m_tcPadNum].reg;
    d3b6:	f1c0 00ff 	rsb	r0, r0, #255	; 0xff
    d3ba:	4770      	bx	lr
            state = m_outState;
    d3bc:	f890 0045 	ldrb.w	r0, [r0, #69]	; 0x45
            break;
    d3c0:	4770      	bx	lr
    d3c2:	4770      	bx	lr
    int16_t state = -1;
    d3c4:	f04f 30ff 	mov.w	r0, #4294967295
}
    d3c8:	4770      	bx	lr
    d3ca:	bf00      	nop

0000d3cc <_ZN9ClearCore12DigitalInOut10InitializeE13ClearCorePins>:
void DigitalInOut::Initialize(ClearCorePins clearCorePin) {
    d3cc:	b538      	push	{r3, r4, r5, lr}
    PMUX_SELECTION(m_outputPort, m_outputDataBit, PER_TIMER);
    d3ce:	6b45      	ldr	r5, [r0, #52]	; 0x34
    m_outState = false;
    d3d0:	2200      	movs	r2, #0
    PMUX_SELECTION(m_outputPort, m_outputDataBit, PER_TIMER);
    d3d2:	07eb      	lsls	r3, r5, #31
void DigitalInOut::Initialize(ClearCorePins clearCorePin) {
    d3d4:	4604      	mov	r4, r0
    m_outState = false;
    d3d6:	f880 2045 	strb.w	r2, [r0, #69]	; 0x45
    m_isInFault = false;
    d3da:	f880 203d 	strb.w	r2, [r0, #61]	; 0x3d
    m_pulseActive = false;
    d3de:	f880 2059 	strb.w	r2, [r0, #89]	; 0x59
    m_pulseStopPending = false;
    d3e2:	f880 205b 	strb.w	r2, [r0, #91]	; 0x5b
    PMUX_SELECTION(m_outputPort, m_outputDataBit, PER_TIMER);
    d3e6:	d41a      	bmi.n	d41e <_ZN9ClearCore12DigitalInOut10InitializeE13ClearCorePins+0x52>
    d3e8:	6b02      	ldr	r2, [r0, #48]	; 0x30
    d3ea:	01d2      	lsls	r2, r2, #7
    d3ec:	f102 4382 	add.w	r3, r2, #1090519040	; 0x41000000
    d3f0:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
    d3f4:	eb03 0355 	add.w	r3, r3, r5, lsr #1
    d3f8:	2004      	movs	r0, #4
    d3fa:	f893 2030 	ldrb.w	r2, [r3, #48]	; 0x30
    d3fe:	f360 0203 	bfi	r2, r0, #0, #4
    d402:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
    DigitalIn::Initialize(clearCorePin);
    d406:	4620      	mov	r0, r4
    d408:	f000 f83e 	bl	d488 <_ZN9ClearCore9DigitalIn10InitializeE13ClearCorePins>
    DATA_DIRECTION_OUTPUT(m_outputPort, m_outputDataMask);
    d40c:	6b23      	ldr	r3, [r4, #48]	; 0x30
    d40e:	6ba2      	ldr	r2, [r4, #56]	; 0x38
    d410:	01db      	lsls	r3, r3, #7
    d412:	f103 4382 	add.w	r3, r3, #1090519040	; 0x41000000
    d416:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
    d41a:	609a      	str	r2, [r3, #8]
    d41c:	bd38      	pop	{r3, r4, r5, pc}
    PMUX_SELECTION(m_outputPort, m_outputDataBit, PER_TIMER);
    d41e:	6b00      	ldr	r0, [r0, #48]	; 0x30
    d420:	01c0      	lsls	r0, r0, #7
    d422:	f100 4282 	add.w	r2, r0, #1090519040	; 0x41000000
    d426:	f502 4200 	add.w	r2, r2, #32768	; 0x8000
    d42a:	eb02 0255 	add.w	r2, r2, r5, lsr #1
    d42e:	2004      	movs	r0, #4
    d430:	f892 3030 	ldrb.w	r3, [r2, #48]	; 0x30
    d434:	f360 1307 	bfi	r3, r0, #4, #4
    d438:	f882 3030 	strb.w	r3, [r2, #48]	; 0x30
    d43c:	e7e3      	b.n	d406 <_ZN9ClearCore12DigitalInOut10InitializeE13ClearCorePins+0x3a>
    d43e:	bf00      	nop

0000d440 <_ZN9ClearCore9Connector4ModeEv>:
    }
    d440:	7980      	ldrb	r0, [r0, #6]
    d442:	4770      	bx	lr

0000d444 <_ZN9ClearCore9DigitalIn4ModeEv>:
    }
    d444:	7980      	ldrb	r0, [r0, #6]
    d446:	4770      	bx	lr

0000d448 <_ZN9ClearCore9DigitalIn4ModeENS_9Connector14ConnectorModesE>:
        if (newMode == ConnectorModes::INPUT_DIGITAL) {
    d448:	2902      	cmp	r1, #2
            m_mode = newMode;
    d44a:	bf06      	itte	eq
    d44c:	7181      	strbeq	r1, [r0, #6]
            return true;
    d44e:	2001      	moveq	r0, #1
            return false;
    d450:	2000      	movne	r0, #0
    }
    d452:	4770      	bx	lr

0000d454 <_ZN9ClearCore9DigitalIn4TypeEv>:
    }
    d454:	2000      	movs	r0, #0
    d456:	4770      	bx	lr

0000d458 <_ZN9ClearCore9DigitalIn10IsWritableEv>:
    }
    d458:	2000      	movs	r0, #0
    d45a:	4770      	bx	lr

0000d45c <_ZN9ClearCore9DigitalIn5StateEs>:
    }
    d45c:	2000      	movs	r0, #0
    d45e:	4770      	bx	lr

0000d460 <_ZN9ClearCore9DigitalIn5StateEv>:
    m_clearCorePin = clearCorePin;
    Mode(INPUT_DIGITAL);
}

int16_t DigitalIn::State() {
    if (m_filterLength == 0) {
    d460:	8d43      	ldrh	r3, [r0, #42]	; 0x2a
    d462:	b113      	cbz	r3, d46a <_ZN9ClearCore9DigitalIn5StateEv+0xa>
        // Pull an unfiltered, real time input value.
        return StateRT();
    }
    return m_stateFiltered;
    d464:	f890 0028 	ldrb.w	r0, [r0, #40]	; 0x28
}
    d468:	4770      	bx	lr

int16_t DigitalIn::StateRT() {
    // Pull an unfiltered, real time input value.
    return !(*InputMgr.m_inputPtrs[m_inputPort] & m_inputDataMask);
    d46a:	4b06      	ldr	r3, [pc, #24]	; (d484 <_ZN9ClearCore9DigitalIn5StateEv+0x24>)
    d46c:	68c1      	ldr	r1, [r0, #12]
    d46e:	681a      	ldr	r2, [r3, #0]
    d470:	6943      	ldr	r3, [r0, #20]
    d472:	f852 2021 	ldr.w	r2, [r2, r1, lsl #2]
    d476:	6812      	ldr	r2, [r2, #0]
    d478:	421a      	tst	r2, r3
    d47a:	bf0c      	ite	eq
    d47c:	2001      	moveq	r0, #1
    d47e:	2000      	movne	r0, #0
    d480:	4770      	bx	lr
    d482:	bf00      	nop
    d484:	20001fb8 	.word	0x20001fb8

0000d488 <_ZN9ClearCore9DigitalIn10InitializeE13ClearCorePins>:
    m_filterLength = 3;
    d488:	4b2e      	ldr	r3, [pc, #184]	; (d544 <_ZN9ClearCore9DigitalIn10InitializeE13ClearCorePins+0xbc>)
void DigitalIn::Initialize(ClearCorePins clearCorePin) {
    d48a:	b4f0      	push	{r4, r5, r6, r7}
    m_filterLength = 3;
    d48c:	f8c0 302a 	str.w	r3, [r0, #42]	; 0x2a
    PMUX_SELECTION(m_inputPort, m_inputDataBit, PER_EXTINT);
    d490:	68c3      	ldr	r3, [r0, #12]
    d492:	6904      	ldr	r4, [r0, #16]
    d494:	01da      	lsls	r2, r3, #7
    d496:	f102 4582 	add.w	r5, r2, #1090519040	; 0x41000000
    m_mode = INVALID_NONE;
    d49a:	2600      	movs	r6, #0
    PMUX_SELECTION(m_inputPort, m_inputDataBit, PER_EXTINT);
    d49c:	f505 4500 	add.w	r5, r5, #32768	; 0x8000
    d4a0:	f014 0701 	ands.w	r7, r4, #1
    m_mode = INVALID_NONE;
    d4a4:	7186      	strb	r6, [r0, #6]
    m_stateFiltered = false;
    d4a6:	f880 6028 	strb.w	r6, [r0, #40]	; 0x28
    PMUX_SELECTION(m_inputPort, m_inputDataBit, PER_EXTINT);
    d4aa:	eb05 0554 	add.w	r5, r5, r4, lsr #1
    d4ae:	d034      	beq.n	d51a <_ZN9ClearCore9DigitalIn10InitializeE13ClearCorePins+0x92>
    d4b0:	f895 7030 	ldrb.w	r7, [r5, #48]	; 0x30
    d4b4:	f366 1707 	bfi	r7, r6, #4, #4
    d4b8:	f885 7030 	strb.w	r7, [r5, #48]	; 0x30
        PIN_CONFIGURATION(m_inputPort, m_inputDataBit,
    d4bc:	f102 4282 	add.w	r2, r2, #1090519040	; 0x41000000
    if (m_interruptAvail) {
    d4c0:	7e45      	ldrb	r5, [r0, #25]
        PIN_CONFIGURATION(m_inputPort, m_inputDataBit,
    d4c2:	f502 4200 	add.w	r2, r2, #32768	; 0x8000
    d4c6:	4422      	add	r2, r4
    if (m_interruptAvail) {
    d4c8:	2d00      	cmp	r5, #0
    d4ca:	d134      	bne.n	d536 <_ZN9ClearCore9DigitalIn10InitializeE13ClearCorePins+0xae>
        PIN_CONFIGURATION(m_inputPort, m_inputDataBit, PORT_PINCFG_INEN);
    d4cc:	2402      	movs	r4, #2
    d4ce:	f882 4040 	strb.w	r4, [r2, #64]	; 0x40
    m_changeRegPtr = &InputMgr.m_inputsUnfilteredChanges[m_inputPort];
    d4d2:	4a1d      	ldr	r2, [pc, #116]	; (d548 <_ZN9ClearCore9DigitalIn10InitializeE13ClearCorePins+0xc0>)
        atomic_and_fetch(&m_patternOutputs[LED_BLINK_IO_SET], ~bitsToClr);
    d4d4:	6884      	ldr	r4, [r0, #8]
    d4d6:	6812      	ldr	r2, [r2, #0]
    d4d8:	4e1c      	ldr	r6, [pc, #112]	; (d54c <_ZN9ClearCore9DigitalIn10InitializeE13ClearCorePins+0xc4>)
    d4da:	3306      	adds	r3, #6
    d4dc:	009b      	lsls	r3, r3, #2
    m_inRegPtr = &InputMgr.m_inputsUnfiltered[m_inputPort];
    d4de:	f1a3 050c 	sub.w	r5, r3, #12
    d4e2:	4415      	add	r5, r2
    m_changeRegPtr = &InputMgr.m_inputsUnfilteredChanges[m_inputPort];
    d4e4:	4413      	add	r3, r2
    m_inputRegRTPtr = &InputMgr.m_inputRegRT.reg;
    d4e6:	3224      	adds	r2, #36	; 0x24
    m_inRegPtr = &InputMgr.m_inputsUnfiltered[m_inputPort];
    d4e8:	6205      	str	r5, [r0, #32]
    m_changeRegPtr = &InputMgr.m_inputsUnfilteredChanges[m_inputPort];
    d4ea:	61c3      	str	r3, [r0, #28]
    m_inputRegRTPtr = &InputMgr.m_inputRegRT.reg;
    d4ec:	6242      	str	r2, [r0, #36]	; 0x24
    d4ee:	43e4      	mvns	r4, r4
    d4f0:	f3bf 8f5b 	dmb	ish
    d4f4:	e856 3f00 	ldrex	r3, [r6]
    d4f8:	4023      	ands	r3, r4
    d4fa:	e846 3200 	strex	r2, r3, [r6]
    d4fe:	2a00      	cmp	r2, #0
    d500:	d1f8      	bne.n	d4f4 <_ZN9ClearCore9DigitalIn10InitializeE13ClearCorePins+0x6c>
    d502:	f3bf 8f5b 	dmb	ish
    Mode(INPUT_DIGITAL);
    d506:	6803      	ldr	r3, [r0, #0]
    d508:	4a11      	ldr	r2, [pc, #68]	; (d550 <_ZN9ClearCore9DigitalIn10InitializeE13ClearCorePins+0xc8>)
    d50a:	685b      	ldr	r3, [r3, #4]
    m_clearCorePin = clearCorePin;
    d50c:	8081      	strh	r1, [r0, #4]
    d50e:	4293      	cmp	r3, r2
    d510:	d115      	bne.n	d53e <_ZN9ClearCore9DigitalIn10InitializeE13ClearCorePins+0xb6>
            m_mode = newMode;
    d512:	2302      	movs	r3, #2
    d514:	7183      	strb	r3, [r0, #6]
}
    d516:	bcf0      	pop	{r4, r5, r6, r7}
    d518:	4770      	bx	lr
    PMUX_SELECTION(m_inputPort, m_inputDataBit, PER_EXTINT);
    d51a:	f895 6030 	ldrb.w	r6, [r5, #48]	; 0x30
    d51e:	f367 0603 	bfi	r6, r7, #0, #4
    d522:	f885 6030 	strb.w	r6, [r5, #48]	; 0x30
        PIN_CONFIGURATION(m_inputPort, m_inputDataBit,
    d526:	f102 4282 	add.w	r2, r2, #1090519040	; 0x41000000
    if (m_interruptAvail) {
    d52a:	7e45      	ldrb	r5, [r0, #25]
        PIN_CONFIGURATION(m_inputPort, m_inputDataBit,
    d52c:	f502 4200 	add.w	r2, r2, #32768	; 0x8000
    d530:	4422      	add	r2, r4
    if (m_interruptAvail) {
    d532:	2d00      	cmp	r5, #0
    d534:	d0ca      	beq.n	d4cc <_ZN9ClearCore9DigitalIn10InitializeE13ClearCorePins+0x44>
        PIN_CONFIGURATION(m_inputPort, m_inputDataBit,
    d536:	2403      	movs	r4, #3
    d538:	f882 4040 	strb.w	r4, [r2, #64]	; 0x40
    d53c:	e7c9      	b.n	d4d2 <_ZN9ClearCore9DigitalIn10InitializeE13ClearCorePins+0x4a>
    Mode(INPUT_DIGITAL);
    d53e:	2102      	movs	r1, #2
}
    d540:	bcf0      	pop	{r4, r5, r6, r7}
    Mode(INPUT_DIGITAL);
    d542:	4718      	bx	r3
    d544:	00010003 	.word	0x00010003
    d548:	20001fb8 	.word	0x20001fb8
    d54c:	20001b74 	.word	0x20001b74
    d550:	0000d449 	.word	0x0000d449

0000d554 <_ZN9ClearCore9DigitalIn7RefreshEv>:
    if (*m_changeRegPtr & m_inputDataMask) {
    d554:	69c2      	ldr	r2, [r0, #28]
    d556:	6943      	ldr	r3, [r0, #20]
    d558:	6812      	ldr	r2, [r2, #0]
    d55a:	4213      	tst	r3, r2
void DigitalIn::Refresh() {
    d55c:	b500      	push	{lr}
    if (*m_changeRegPtr & m_inputDataMask) {
    d55e:	d005      	beq.n	d56c <_ZN9ClearCore9DigitalIn7RefreshEv+0x18>
        m_filterTicksLeft = m_filterLength;
    d560:	8d42      	ldrh	r2, [r0, #42]	; 0x2a
    d562:	8582      	strh	r2, [r0, #44]	; 0x2c
        if (!m_filterLength) {
    d564:	2a00      	cmp	r2, #0
    d566:	d039      	beq.n	d5dc <_ZN9ClearCore9DigitalIn7RefreshEv+0x88>
    d568:	f85d fb04 	ldr.w	pc, [sp], #4
    else if (m_filterTicksLeft && !--m_filterTicksLeft) {
    d56c:	8d82      	ldrh	r2, [r0, #44]	; 0x2c
    d56e:	2a00      	cmp	r2, #0
    d570:	d0fa      	beq.n	d568 <_ZN9ClearCore9DigitalIn7RefreshEv+0x14>
    d572:	3a01      	subs	r2, #1
    d574:	b292      	uxth	r2, r2
    d576:	8582      	strh	r2, [r0, #44]	; 0x2c
    d578:	2a00      	cmp	r2, #0
    d57a:	d1f5      	bne.n	d568 <_ZN9ClearCore9DigitalIn7RefreshEv+0x14>
    InputMgr.InterruptEnable(m_extInt, enable);
}

// Write the current filtered pin status back to the member variables
void DigitalIn::UpdateFilterState() {
    m_stateFiltered = !(*m_inRegPtr & m_inputDataMask);
    d57c:	6a01      	ldr	r1, [r0, #32]
    ShiftReg.ShifterState(m_stateFiltered, m_ledMask);
    d57e:	6882      	ldr	r2, [r0, #8]
    m_stateFiltered = !(*m_inRegPtr & m_inputDataMask);
    d580:	6809      	ldr	r1, [r1, #0]
    d582:	400b      	ands	r3, r1
    d584:	2b00      	cmp	r3, #0
    d586:	bf0c      	ite	eq
    d588:	2301      	moveq	r3, #1
    d58a:	2300      	movne	r3, #0
    d58c:	f880 3028 	strb.w	r3, [r0, #40]	; 0x28
        : ShifterStateClear(bitsToChange);
    d590:	d053      	beq.n	d63a <_ZN9ClearCore9DigitalIn7RefreshEv+0xe6>
        atomic_and_fetch(&m_patternOutputs[LED_BLINK_IO_SET], ~bitsToClr);
    d592:	f3bf 8f5b 	dmb	ish
    d596:	4b41      	ldr	r3, [pc, #260]	; (d69c <_ZN9ClearCore9DigitalIn7RefreshEv+0x148>)
    d598:	43d2      	mvns	r2, r2
    d59a:	e853 1f00 	ldrex	r1, [r3]
    d59e:	4011      	ands	r1, r2
    d5a0:	e843 1e00 	strex	lr, r1, [r3]
    d5a4:	f1be 0f00 	cmp.w	lr, #0
    d5a8:	d1f7      	bne.n	d59a <_ZN9ClearCore9DigitalIn7RefreshEv+0x46>
    d5aa:	f3bf 8f5b 	dmb	ish

    // Update the SysManager Register
    if (m_stateFiltered) {
    d5ae:	f890 3028 	ldrb.w	r3, [r0, #40]	; 0x28
        atomic_or_fetch(m_inputRegRTPtr, 1UL << m_clearCorePin);
    d5b2:	f9b0 1004 	ldrsh.w	r1, [r0, #4]
    d5b6:	6a42      	ldr	r2, [r0, #36]	; 0x24
    if (m_stateFiltered) {
    d5b8:	2b00      	cmp	r3, #0
    d5ba:	d14a      	bne.n	d652 <_ZN9ClearCore9DigitalIn7RefreshEv+0xfe>
    }
    else {
        atomic_and_fetch(m_inputRegRTPtr, ~(1UL << m_clearCorePin));
    d5bc:	f3bf 8f5b 	dmb	ish
    d5c0:	2301      	movs	r3, #1
    d5c2:	408b      	lsls	r3, r1
    d5c4:	43db      	mvns	r3, r3
    d5c6:	e852 1f00 	ldrex	r1, [r2]
    d5ca:	4019      	ands	r1, r3
    d5cc:	e842 1000 	strex	r0, r1, [r2]
    d5d0:	2800      	cmp	r0, #0
    d5d2:	d1f8      	bne.n	d5c6 <_ZN9ClearCore9DigitalIn7RefreshEv+0x72>
    d5d4:	f3bf 8f5b 	dmb	ish
}
    d5d8:	f85d fb04 	ldr.w	pc, [sp], #4
    m_stateFiltered = !(*m_inRegPtr & m_inputDataMask);
    d5dc:	6a01      	ldr	r1, [r0, #32]
    ShiftReg.ShifterState(m_stateFiltered, m_ledMask);
    d5de:	6882      	ldr	r2, [r0, #8]
    m_stateFiltered = !(*m_inRegPtr & m_inputDataMask);
    d5e0:	6809      	ldr	r1, [r1, #0]
    d5e2:	400b      	ands	r3, r1
    d5e4:	2b00      	cmp	r3, #0
    d5e6:	bf0c      	ite	eq
    d5e8:	2301      	moveq	r3, #1
    d5ea:	2300      	movne	r3, #0
    d5ec:	f880 3028 	strb.w	r3, [r0, #40]	; 0x28
        : ShifterStateClear(bitsToChange);
    d5f0:	d047      	beq.n	d682 <_ZN9ClearCore9DigitalIn7RefreshEv+0x12e>
        atomic_and_fetch(&m_patternOutputs[LED_BLINK_IO_SET], ~bitsToClr);
    d5f2:	f3bf 8f5b 	dmb	ish
    d5f6:	4b29      	ldr	r3, [pc, #164]	; (d69c <_ZN9ClearCore9DigitalIn7RefreshEv+0x148>)
    d5f8:	43d2      	mvns	r2, r2
    d5fa:	e853 1f00 	ldrex	r1, [r3]
    d5fe:	4011      	ands	r1, r2
    d600:	e843 1e00 	strex	lr, r1, [r3]
    d604:	f1be 0f00 	cmp.w	lr, #0
    d608:	d1f7      	bne.n	d5fa <_ZN9ClearCore9DigitalIn7RefreshEv+0xa6>
    d60a:	f3bf 8f5b 	dmb	ish
    if (m_stateFiltered) {
    d60e:	f890 3028 	ldrb.w	r3, [r0, #40]	; 0x28
        atomic_or_fetch(m_inputRegRTPtr, 1UL << m_clearCorePin);
    d612:	f9b0 1004 	ldrsh.w	r1, [r0, #4]
    d616:	6a42      	ldr	r2, [r0, #36]	; 0x24
    if (m_stateFiltered) {
    d618:	bb3b      	cbnz	r3, d66a <_ZN9ClearCore9DigitalIn7RefreshEv+0x116>
        atomic_and_fetch(m_inputRegRTPtr, ~(1UL << m_clearCorePin));
    d61a:	f3bf 8f5b 	dmb	ish
    d61e:	2301      	movs	r3, #1
    d620:	408b      	lsls	r3, r1
    d622:	43db      	mvns	r3, r3
    d624:	e852 1f00 	ldrex	r1, [r2]
    d628:	4019      	ands	r1, r3
    d62a:	e842 1000 	strex	r0, r1, [r2]
    d62e:	2800      	cmp	r0, #0
    d630:	d1f8      	bne.n	d624 <_ZN9ClearCore9DigitalIn7RefreshEv+0xd0>
    d632:	f3bf 8f5b 	dmb	ish
}
    d636:	f85d fb04 	ldr.w	pc, [sp], #4
        atomic_or_fetch(&m_patternOutputs[LED_BLINK_IO_SET], bitsToSet);
    d63a:	4b18      	ldr	r3, [pc, #96]	; (d69c <_ZN9ClearCore9DigitalIn7RefreshEv+0x148>)
    d63c:	f3bf 8f5b 	dmb	ish
    d640:	e853 1f00 	ldrex	r1, [r3]
    d644:	4311      	orrs	r1, r2
    d646:	e843 1e00 	strex	lr, r1, [r3]
    d64a:	f1be 0f00 	cmp.w	lr, #0
    d64e:	d0ac      	beq.n	d5aa <_ZN9ClearCore9DigitalIn7RefreshEv+0x56>
    d650:	e7f6      	b.n	d640 <_ZN9ClearCore9DigitalIn7RefreshEv+0xec>
        atomic_or_fetch(m_inputRegRTPtr, 1UL << m_clearCorePin);
    d652:	2301      	movs	r3, #1
    d654:	408b      	lsls	r3, r1
    d656:	f3bf 8f5b 	dmb	ish
    d65a:	e852 1f00 	ldrex	r1, [r2]
    d65e:	4319      	orrs	r1, r3
    d660:	e842 1000 	strex	r0, r1, [r2]
    d664:	2800      	cmp	r0, #0
    d666:	d0e4      	beq.n	d632 <_ZN9ClearCore9DigitalIn7RefreshEv+0xde>
    d668:	e7f7      	b.n	d65a <_ZN9ClearCore9DigitalIn7RefreshEv+0x106>
    d66a:	2301      	movs	r3, #1
    d66c:	408b      	lsls	r3, r1
    d66e:	f3bf 8f5b 	dmb	ish
    d672:	e852 1f00 	ldrex	r1, [r2]
    d676:	4319      	orrs	r1, r3
    d678:	e842 1000 	strex	r0, r1, [r2]
    d67c:	2800      	cmp	r0, #0
    d67e:	d0d8      	beq.n	d632 <_ZN9ClearCore9DigitalIn7RefreshEv+0xde>
    d680:	e7f7      	b.n	d672 <_ZN9ClearCore9DigitalIn7RefreshEv+0x11e>
    d682:	4b06      	ldr	r3, [pc, #24]	; (d69c <_ZN9ClearCore9DigitalIn7RefreshEv+0x148>)
    d684:	f3bf 8f5b 	dmb	ish
    d688:	e853 1f00 	ldrex	r1, [r3]
    d68c:	4311      	orrs	r1, r2
    d68e:	e843 1e00 	strex	lr, r1, [r3]
    d692:	f1be 0f00 	cmp.w	lr, #0
    d696:	d0b8      	beq.n	d60a <_ZN9ClearCore9DigitalIn7RefreshEv+0xb6>
    d698:	e7f6      	b.n	d688 <_ZN9ClearCore9DigitalIn7RefreshEv+0x134>
    d69a:	bf00      	nop
    d69c:	20001b74 	.word	0x20001b74

0000d6a0 <_ZN9ClearCore9ConnectorC1Ev>:
      m_mode(INVALID_NONE) {}
    d6a0:	4a03      	ldr	r2, [pc, #12]	; (d6b0 <_ZN9ClearCore9ConnectorC1Ev+0x10>)
    d6a2:	6002      	str	r2, [r0, #0]
    d6a4:	f64f 71ff 	movw	r1, #65535	; 0xffff
    d6a8:	2200      	movs	r2, #0
    d6aa:	8081      	strh	r1, [r0, #4]
    d6ac:	7182      	strb	r2, [r0, #6]
    d6ae:	4770      	bx	lr
    d6b0:	0002d2c8 	.word	0x0002d2c8

0000d6b4 <_ZN9ClearCore9DigitalInC1ENS_13ShiftRegister5MasksEPK15PeripheralRoute>:
DigitalIn::DigitalIn(
    d6b4:	b470      	push	{r4, r5, r6}
      m_inputPort(inputInfo->gpioPort),
    d6b6:	f992 4001 	ldrsb.w	r4, [r2, #1]
    d6ba:	60c4      	str	r4, [r0, #12]
      m_filterTicksLeft(1) {}
    d6bc:	4d0d      	ldr	r5, [pc, #52]	; (d6f4 <_ZN9ClearCore9DigitalInC1ENS_13ShiftRegister5MasksEPK15PeripheralRoute+0x40>)
    d6be:	6081      	str	r1, [r0, #8]
      m_mode(INVALID_NONE) {}
    d6c0:	2400      	movs	r4, #0
    d6c2:	f64f 76ff 	movw	r6, #65535	; 0xffff
    d6c6:	8086      	strh	r6, [r0, #4]
    d6c8:	7184      	strb	r4, [r0, #6]
      m_filterTicksLeft(1) {}
    d6ca:	6005      	str	r5, [r0, #0]
      m_inputDataBit(inputInfo->gpioPin),
    d6cc:	7895      	ldrb	r5, [r2, #2]
    d6ce:	6105      	str	r5, [r0, #16]
      m_inputDataMask(1UL << inputInfo->gpioPin),
    d6d0:	2101      	movs	r1, #1
    d6d2:	40a9      	lsls	r1, r5
      m_filterTicksLeft(1) {}
    d6d4:	6141      	str	r1, [r0, #20]
    d6d6:	78d1      	ldrb	r1, [r2, #3]
    d6d8:	7601      	strb	r1, [r0, #24]
    d6da:	7911      	ldrb	r1, [r2, #4]
    d6dc:	4a06      	ldr	r2, [pc, #24]	; (d6f8 <_ZN9ClearCore9DigitalInC1ENS_13ShiftRegister5MasksEPK15PeripheralRoute+0x44>)
    d6de:	61c4      	str	r4, [r0, #28]
    d6e0:	6204      	str	r4, [r0, #32]
    d6e2:	6244      	str	r4, [r0, #36]	; 0x24
    d6e4:	f880 4028 	strb.w	r4, [r0, #40]	; 0x28
    d6e8:	7641      	strb	r1, [r0, #25]
    d6ea:	f8c0 202a 	str.w	r2, [r0, #42]	; 0x2a
    d6ee:	bc70      	pop	{r4, r5, r6}
    d6f0:	4770      	bx	lr
    d6f2:	bf00      	nop
    d6f4:	0002d2f8 	.word	0x0002d2f8
    d6f8:	00010003 	.word	0x00010003

0000d6fc <_ZN9ClearCore9DigitalIn7StateRTEv>:
    return !(*InputMgr.m_inputPtrs[m_inputPort] & m_inputDataMask);
    d6fc:	4b05      	ldr	r3, [pc, #20]	; (d714 <_ZN9ClearCore9DigitalIn7StateRTEv+0x18>)
    d6fe:	68c1      	ldr	r1, [r0, #12]
    d700:	681a      	ldr	r2, [r3, #0]
    d702:	6943      	ldr	r3, [r0, #20]
    d704:	f852 2021 	ldr.w	r2, [r2, r1, lsl #2]
    d708:	6812      	ldr	r2, [r2, #0]
    d70a:	421a      	tst	r2, r3
}
    d70c:	bf0c      	ite	eq
    d70e:	2001      	moveq	r0, #1
    d710:	2000      	movne	r0, #0
    d712:	4770      	bx	lr
    d714:	20001fb8 	.word	0x20001fb8

0000d718 <_ZN9ClearCore9DigitalIn17UpdateFilterStateEv>:
    m_stateFiltered = !(*m_inRegPtr & m_inputDataMask);
    d718:	6a03      	ldr	r3, [r0, #32]
    d71a:	6941      	ldr	r1, [r0, #20]
    d71c:	681b      	ldr	r3, [r3, #0]
    ShiftReg.ShifterState(m_stateFiltered, m_ledMask);
    d71e:	6882      	ldr	r2, [r0, #8]
    m_stateFiltered = !(*m_inRegPtr & m_inputDataMask);
    d720:	400b      	ands	r3, r1
    d722:	2b00      	cmp	r3, #0
    d724:	bf0c      	ite	eq
    d726:	2301      	moveq	r3, #1
    d728:	2300      	movne	r3, #0
void DigitalIn::UpdateFilterState() {
    d72a:	b500      	push	{lr}
    m_stateFiltered = !(*m_inRegPtr & m_inputDataMask);
    d72c:	f880 3028 	strb.w	r3, [r0, #40]	; 0x28
        : ShifterStateClear(bitsToChange);
    d730:	d023      	beq.n	d77a <_ZN9ClearCore9DigitalIn17UpdateFilterStateEv+0x62>
        atomic_and_fetch(&m_patternOutputs[LED_BLINK_IO_SET], ~bitsToClr);
    d732:	f3bf 8f5b 	dmb	ish
    d736:	4b1e      	ldr	r3, [pc, #120]	; (d7b0 <_ZN9ClearCore9DigitalIn17UpdateFilterStateEv+0x98>)
    d738:	43d2      	mvns	r2, r2
    d73a:	e853 1f00 	ldrex	r1, [r3]
    d73e:	4011      	ands	r1, r2
    d740:	e843 1e00 	strex	lr, r1, [r3]
    d744:	f1be 0f00 	cmp.w	lr, #0
    d748:	d1f7      	bne.n	d73a <_ZN9ClearCore9DigitalIn17UpdateFilterStateEv+0x22>
    d74a:	f3bf 8f5b 	dmb	ish
    if (m_stateFiltered) {
    d74e:	f890 3028 	ldrb.w	r3, [r0, #40]	; 0x28
        atomic_or_fetch(m_inputRegRTPtr, 1UL << m_clearCorePin);
    d752:	f9b0 1004 	ldrsh.w	r1, [r0, #4]
    d756:	6a42      	ldr	r2, [r0, #36]	; 0x24
    if (m_stateFiltered) {
    d758:	b9db      	cbnz	r3, d792 <_ZN9ClearCore9DigitalIn17UpdateFilterStateEv+0x7a>
        atomic_and_fetch(m_inputRegRTPtr, ~(1UL << m_clearCorePin));
    d75a:	f3bf 8f5b 	dmb	ish
    d75e:	2301      	movs	r3, #1
    d760:	408b      	lsls	r3, r1
    d762:	43db      	mvns	r3, r3
    d764:	e852 1f00 	ldrex	r1, [r2]
    d768:	4019      	ands	r1, r3
    d76a:	e842 1000 	strex	r0, r1, [r2]
    d76e:	2800      	cmp	r0, #0
    d770:	d1f8      	bne.n	d764 <_ZN9ClearCore9DigitalIn17UpdateFilterStateEv+0x4c>
    d772:	f3bf 8f5b 	dmb	ish
    d776:	f85d fb04 	ldr.w	pc, [sp], #4
        atomic_or_fetch(&m_patternOutputs[LED_BLINK_IO_SET], bitsToSet);
    d77a:	4b0d      	ldr	r3, [pc, #52]	; (d7b0 <_ZN9ClearCore9DigitalIn17UpdateFilterStateEv+0x98>)
    d77c:	f3bf 8f5b 	dmb	ish
    d780:	e853 1f00 	ldrex	r1, [r3]
    d784:	4311      	orrs	r1, r2
    d786:	e843 1e00 	strex	lr, r1, [r3]
    d78a:	f1be 0f00 	cmp.w	lr, #0
    d78e:	d0dc      	beq.n	d74a <_ZN9ClearCore9DigitalIn17UpdateFilterStateEv+0x32>
    d790:	e7f6      	b.n	d780 <_ZN9ClearCore9DigitalIn17UpdateFilterStateEv+0x68>
        atomic_or_fetch(m_inputRegRTPtr, 1UL << m_clearCorePin);
    d792:	2301      	movs	r3, #1
    d794:	408b      	lsls	r3, r1
    d796:	f3bf 8f5b 	dmb	ish
    d79a:	e852 1f00 	ldrex	r1, [r2]
    d79e:	4319      	orrs	r1, r3
    d7a0:	e842 1000 	strex	r0, r1, [r2]
    d7a4:	2800      	cmp	r0, #0
    d7a6:	d1f8      	bne.n	d79a <_ZN9ClearCore9DigitalIn17UpdateFilterStateEv+0x82>
        atomic_and_fetch(m_inputRegRTPtr, ~(1UL << m_clearCorePin));
    d7a8:	f3bf 8f5b 	dmb	ish
    d7ac:	f85d fb04 	ldr.w	pc, [sp], #4
    d7b0:	20001b74 	.word	0x20001b74

0000d7b4 <_ZN9ClearCore19DigitalInOutHBridge4ModeEv>:

        \return The connector's current operational mode.
    **/
    virtual ConnectorModes Mode() override {
        return Connector::Mode();
    }
    d7b4:	7980      	ldrb	r0, [r0, #6]
    d7b6:	4770      	bx	lr

0000d7b8 <_ZN9ClearCore19DigitalInOutHBridge4TypeEv>:

        \return The type of the current connector.
    **/
    Connector::ConnectorTypes Type() override {
        return Connector::H_BRIDGE_TYPE;
    }
    d7b8:	2005      	movs	r0, #5
    d7ba:	4770      	bx	lr

0000d7bc <_ZN9ClearCore19DigitalInOutHBridge10IsWritableEv>:
}

bool DigitalInOutHBridge::IsWritable() {
    bool isWritable;

    switch (m_mode) {
    d7bc:	7980      	ldrb	r0, [r0, #6]
    d7be:	3804      	subs	r0, #4
        default:
            isWritable = false;
            break;
    }
    return isWritable;
}
    d7c0:	2804      	cmp	r0, #4
    d7c2:	bf8c      	ite	hi
    d7c4:	2000      	movhi	r0, #0
    d7c6:	2001      	movls	r0, #1
    d7c8:	4770      	bx	lr
    d7ca:	bf00      	nop

0000d7cc <_ZN9ClearCore19DigitalInOutHBridgeC1ENS_13ShiftRegister5MasksEPK15PeripheralRouteS5_S5_S5_4IRQnb>:
DigitalInOutHBridge::DigitalInOutHBridge(ShiftRegister::Masks ledMask,
    d7cc:	b5f0      	push	{r4, r5, r6, r7, lr}
    d7ce:	b083      	sub	sp, #12
    d7d0:	f89d 402c 	ldrb.w	r4, [sp, #44]	; 0x2c
      m_forceToneDuration(false) {
    d7d4:	9400      	str	r4, [sp, #0]
DigitalInOutHBridge::DigitalInOutHBridge(ShiftRegister::Masks ledMask,
    d7d6:	4604      	mov	r4, r0
    d7d8:	9d08      	ldr	r5, [sp, #32]
    d7da:	9e09      	ldr	r6, [sp, #36]	; 0x24
    d7dc:	f9bd 7028 	ldrsh.w	r7, [sp, #40]	; 0x28
      m_forceToneDuration(false) {
    d7e0:	f7ff fc98 	bl	d114 <_ZN9ClearCore12DigitalInOutC1ENS_13ShiftRegister5MasksEPK15PeripheralRouteS5_b>
    d7e4:	2300      	movs	r3, #0
    d7e6:	490f      	ldr	r1, [pc, #60]	; (d824 <_ZN9ClearCore19DigitalInOutHBridgeC1ENS_13ShiftRegister5MasksEPK15PeripheralRouteS5_S5_S5_4IRQnb+0x58>)
    d7e8:	f8a4 3060 	strh.w	r3, [r4, #96]	; 0x60
    d7ec:	f640 42cc 	movw	r2, #3276	; 0xccc
    d7f0:	f8a4 3062 	strh.w	r3, [r4, #98]	; 0x62
    d7f4:	6663      	str	r3, [r4, #100]	; 0x64
    d7f6:	66a3      	str	r3, [r4, #104]	; 0x68
    d7f8:	66e3      	str	r3, [r4, #108]	; 0x6c
    d7fa:	f884 3070 	strb.w	r3, [r4, #112]	; 0x70
    d7fe:	f884 3082 	strb.w	r3, [r4, #130]	; 0x82
    d802:	f884 3083 	strb.w	r3, [r4, #131]	; 0x83
    d806:	6765      	str	r5, [r4, #116]	; 0x74
    d808:	67a6      	str	r6, [r4, #120]	; 0x78
    d80a:	f8a4 7080 	strh.w	r7, [r4, #128]	; 0x80
    d80e:	6021      	str	r1, [r4, #0]
    d810:	f8a4 205e 	strh.w	r2, [r4, #94]	; 0x5e
    m_tcc = tcc_modules[pwmAInfo->tccNum];
    d814:	7b2a      	ldrb	r2, [r5, #12]
    d816:	4b04      	ldr	r3, [pc, #16]	; (d828 <_ZN9ClearCore19DigitalInOutHBridgeC1ENS_13ShiftRegister5MasksEPK15PeripheralRouteS5_S5_S5_4IRQnb+0x5c>)
    d818:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    d81c:	67e3      	str	r3, [r4, #124]	; 0x7c
}
    d81e:	4620      	mov	r0, r4
    d820:	b003      	add	sp, #12
    d822:	bdf0      	pop	{r4, r5, r6, r7, pc}
    d824:	0002d328 	.word	0x0002d328
    d828:	0002d350 	.word	0x0002d350

0000d82c <_ZN9ClearCore19DigitalInOutHBridge10FaultStateEb>:
    m_mode = newMode;

    return modeChangeSuccess;
}

void DigitalInOutHBridge::FaultState(bool isFaulted) {
    d82c:	b510      	push	{r4, lr}
    m_inFault = isFaulted;
    // Disable H-bridge driver when in an overload state
    switch (Mode()) {
    d82e:	6803      	ldr	r3, [r0, #0]
    d830:	4a12      	ldr	r2, [pc, #72]	; (d87c <_ZN9ClearCore19DigitalInOutHBridge10FaultStateEb+0x50>)
    d832:	681b      	ldr	r3, [r3, #0]
    m_inFault = isFaulted;
    d834:	f880 1082 	strb.w	r1, [r0, #130]	; 0x82
    d838:	4293      	cmp	r3, r2
void DigitalInOutHBridge::FaultState(bool isFaulted) {
    d83a:	b082      	sub	sp, #8
    d83c:	4604      	mov	r4, r0
    d83e:	d115      	bne.n	d86c <_ZN9ClearCore19DigitalInOutHBridge10FaultStateEb+0x40>
        return m_mode;
    d840:	7980      	ldrb	r0, [r0, #6]
    d842:	2808      	cmp	r0, #8
    d844:	d805      	bhi.n	d852 <_ZN9ClearCore19DigitalInOutHBridge10FaultStateEb+0x26>
    d846:	2301      	movs	r3, #1
    d848:	fa03 f000 	lsl.w	r0, r3, r0
    d84c:	f410 7fd0 	tst.w	r0, #416	; 0x1a0
    d850:	d101      	bne.n	d856 <_ZN9ClearCore19DigitalInOutHBridge10FaultStateEb+0x2a>
            DATA_OUTPUT_STATE(m_outputPort, m_outputDataMask, !isFaulted);
            break;
        default:
            break;
    }
}
    d852:	b002      	add	sp, #8
    d854:	bd10      	pop	{r4, pc}
            DATA_OUTPUT_STATE(m_outputPort, m_outputDataMask, !isFaulted);
    d856:	6b23      	ldr	r3, [r4, #48]	; 0x30
    d858:	6ba2      	ldr	r2, [r4, #56]	; 0x38
    d85a:	01db      	lsls	r3, r3, #7
    d85c:	f103 4382 	add.w	r3, r3, #1090519040	; 0x41000000
    d860:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
    d864:	b131      	cbz	r1, d874 <_ZN9ClearCore19DigitalInOutHBridge10FaultStateEb+0x48>
    d866:	615a      	str	r2, [r3, #20]
}
    d868:	b002      	add	sp, #8
    d86a:	bd10      	pop	{r4, pc}
    d86c:	9101      	str	r1, [sp, #4]
    switch (Mode()) {
    d86e:	4798      	blx	r3
    d870:	9901      	ldr	r1, [sp, #4]
    d872:	e7e6      	b.n	d842 <_ZN9ClearCore19DigitalInOutHBridge10FaultStateEb+0x16>
            DATA_OUTPUT_STATE(m_outputPort, m_outputDataMask, !isFaulted);
    d874:	619a      	str	r2, [r3, #24]
}
    d876:	b002      	add	sp, #8
    d878:	bd10      	pop	{r4, pc}
    d87a:	bf00      	nop
    d87c:	0000d7b5 	.word	0x0000d7b5

0000d880 <_ZN9ClearCore19DigitalInOutHBridge5StateEv>:
    switch (m_mode) {
    d880:	7982      	ldrb	r2, [r0, #6]
    d882:	2a07      	cmp	r2, #7
int16_t DigitalInOutHBridge::State() {
    d884:	4601      	mov	r1, r0
    d886:	d808      	bhi.n	d89a <_ZN9ClearCore19DigitalInOutHBridge5StateEv+0x1a>
    d888:	2301      	movs	r3, #1
    d88a:	4093      	lsls	r3, r2
    d88c:	f013 0f54 	tst.w	r3, #84	; 0x54
    d890:	d112      	bne.n	d8b8 <_ZN9ClearCore19DigitalInOutHBridge5StateEv+0x38>
    d892:	f013 00a0 	ands.w	r0, r3, #160	; 0xa0
    d896:	d102      	bne.n	d89e <_ZN9ClearCore19DigitalInOutHBridge5StateEv+0x1e>
    d898:	4770      	bx	lr
            state = 0;
    d89a:	2000      	movs	r0, #0
}
    d89c:	4770      	bx	lr
                static_cast<int16_t>((static_cast<int32_t>(m_tcc->CC[0].reg) -
    d89e:	6fcb      	ldr	r3, [r1, #124]	; 0x7c
    d8a0:	6c58      	ldr	r0, [r3, #68]	; 0x44
                                      (m_tcc->PER.reg >> 1)) * INT16_MAX / m_tcc->PER.reg >> 1);
    d8a2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
    d8a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
                static_cast<int16_t>((static_cast<int32_t>(m_tcc->CC[0].reg) -
    d8a6:	eba0 0052 	sub.w	r0, r0, r2, lsr #1
                                      (m_tcc->PER.reg >> 1)) * INT16_MAX / m_tcc->PER.reg >> 1);
    d8aa:	ebc0 30c0 	rsb	r0, r0, r0, lsl #15
    d8ae:	fbb0 f0f3 	udiv	r0, r0, r3
            state =
    d8b2:	f340 004f 	sbfx	r0, r0, #1, #16
    d8b6:	4770      	bx	lr
            state = DigitalInOut::State();
    d8b8:	f7ff bd68 	b.w	d38c <_ZN9ClearCore12DigitalInOut5StateEv>

0000d8bc <_ZN9ClearCore19DigitalInOutHBridge5StateEs>:
bool DigitalInOutHBridge::State(int16_t newState) {
    d8bc:	b510      	push	{r4, lr}
    switch (m_mode) {
    d8be:	7983      	ldrb	r3, [r0, #6]
    uint16_t halfDuty = m_tcc->PER.reg >> 1; // 50% duty cycle
    d8c0:	6fc4      	ldr	r4, [r0, #124]	; 0x7c
    switch (m_mode) {
    d8c2:	3b02      	subs	r3, #2
    uint16_t halfDuty = m_tcc->PER.reg >> 1; // 50% duty cycle
    d8c4:	6c22      	ldr	r2, [r4, #64]	; 0x40
    switch (m_mode) {
    d8c6:	2b05      	cmp	r3, #5
    d8c8:	d82a      	bhi.n	d920 <_ZN9ClearCore19DigitalInOutHBridge5StateEs+0x64>
    d8ca:	e8df f003 	tbb	[pc, r3]
    d8ce:	2925      	.short	0x2925
    d8d0:	13250325 	.word	0x13250325
        index &= 0xf;   // guard against index out of bounds
    d8d4:	7900      	ldrb	r0, [r0, #4]
        m_fadeCounter.m_valuesBuf[index] = value;
    d8d6:	4b13      	ldr	r3, [pc, #76]	; (d924 <_ZN9ClearCore19DigitalInOutHBridge5StateEs+0x68>)
    d8d8:	f000 000f 	and.w	r0, r0, #15
            if (newState == INT16_MIN) {
    d8dc:	f511 4f00 	cmn.w	r1, #32768	; 0x8000
    d8e0:	4403      	add	r3, r0
                ShiftReg.LedPwmValue(m_clearCorePin, labs(newState) >> 7);
    d8e2:	bf1b      	ittet	ne
    d8e4:	ea81 70e1 	eorne.w	r0, r1, r1, asr #31
    d8e8:	eba0 70e1 	subne.w	r0, r0, r1, asr #31
    d8ec:	20ff      	moveq	r0, #255	; 0xff
    d8ee:	11c0      	asrne	r0, r0, #7
    d8f0:	f883 008d 	strb.w	r0, [r3, #141]	; 0x8d
            m_tcc->CCBUF[0].reg = halfDuty + halfDuty * newState / INT16_MAX;
    d8f4:	f3c2 024f 	ubfx	r2, r2, #1, #16
    d8f8:	4b0b      	ldr	r3, [pc, #44]	; (d928 <_ZN9ClearCore19DigitalInOutHBridge5StateEs+0x6c>)
    d8fa:	fb01 f102 	mul.w	r1, r1, r2
    d8fe:	fb83 0301 	smull	r0, r3, r3, r1
    d902:	440b      	add	r3, r1
    d904:	139b      	asrs	r3, r3, #14
    d906:	17c9      	asrs	r1, r1, #31
    d908:	1a58      	subs	r0, r3, r1
            m_tcc->CCBUF[1].reg = halfDuty - halfDuty * newState / INT16_MAX;
    d90a:	1ac9      	subs	r1, r1, r3
            m_tcc->CCBUF[0].reg = halfDuty + halfDuty * newState / INT16_MAX;
    d90c:	4410      	add	r0, r2
            m_tcc->CCBUF[1].reg = halfDuty - halfDuty * newState / INT16_MAX;
    d90e:	4411      	add	r1, r2
            m_tcc->CCBUF[0].reg = halfDuty + halfDuty * newState / INT16_MAX;
    d910:	6720      	str	r0, [r4, #112]	; 0x70
            m_tcc->CCBUF[1].reg = halfDuty - halfDuty * newState / INT16_MAX;
    d912:	6761      	str	r1, [r4, #116]	; 0x74
            success = true;
    d914:	2001      	movs	r0, #1
            break;
    d916:	bd10      	pop	{r4, pc}
}
    d918:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
            success = DigitalInOut::State(newState);
    d91c:	f7ff ba8c 	b.w	ce38 <_ZN9ClearCore12DigitalInOut5StateEs>
    bool success = false;
    d920:	2000      	movs	r0, #0
}
    d922:	bd10      	pop	{r4, pc}
    d924:	20001a80 	.word	0x20001a80
    d928:	80010003 	.word	0x80010003

0000d92c <_ZN9ClearCore19DigitalInOutHBridge10ToneUpdateEv>:
    int32_t nextAngle = static_cast<int32_t>(m_angle) + m_sinStep;
    d92c:	f9b0 3062 	ldrsh.w	r3, [r0, #98]	; 0x62
    d930:	f9b0 1060 	ldrsh.w	r1, [r0, #96]	; 0x60
    if ((ToneActiveState() && (ToneActiveState() != TONE_PERIODIC_OFF)) ||
    d934:	f890 2070 	ldrb.w	r2, [r0, #112]	; 0x70
void DigitalInOutHBridge::ToneUpdate() {
    d938:	b570      	push	{r4, r5, r6, lr}
    int32_t nextAngle = static_cast<int32_t>(m_angle) + m_sinStep;
    d93a:	440b      	add	r3, r1
    if ((ToneActiveState() && (ToneActiveState() != TONE_PERIODIC_OFF)) ||
    d93c:	b302      	cbz	r2, d980 <_ZN9ClearCore19DigitalInOutHBridge10ToneUpdateEv+0x54>
    d93e:	f890 2070 	ldrb.w	r2, [r0, #112]	; 0x70
    d942:	2a04      	cmp	r2, #4
    d944:	d01c      	beq.n	d980 <_ZN9ClearCore19DigitalInOutHBridge10ToneUpdateEv+0x54>
    d946:	4604      	mov	r4, r0
        m_angle = nextAngle & INT16_MAX;
    d948:	f3c3 000e 	ubfx	r0, r3, #0, #15
                                    m_amplitude) >> 15));
    d94c:	6823      	ldr	r3, [r4, #0]
        m_angle = nextAngle & INT16_MAX;
    d94e:	f8a4 0062 	strh.w	r0, [r4, #98]	; 0x62
                                    m_amplitude) >> 15));
    d952:	695d      	ldr	r5, [r3, #20]
        State(static_cast<int16_t>((static_cast<int32_t>(arm_sin_q15(m_angle)) *
    d954:	f00f f9d8 	bl	1cd08 <arm_sin_q15>
    d958:	f8b4 105e 	ldrh.w	r1, [r4, #94]	; 0x5e
    d95c:	4b41      	ldr	r3, [pc, #260]	; (da64 <_ZN9ClearCore19DigitalInOutHBridge10ToneUpdateEv+0x138>)
    d95e:	fb11 f100 	smulbb	r1, r1, r0
    d962:	429d      	cmp	r5, r3
    d964:	f341 31cf 	sbfx	r1, r1, #15, #16
    d968:	d177      	bne.n	da5a <_ZN9ClearCore19DigitalInOutHBridge10ToneUpdateEv+0x12e>
    switch (m_mode) {
    d96a:	79a3      	ldrb	r3, [r4, #6]
    uint16_t halfDuty = m_tcc->PER.reg >> 1; // 50% duty cycle
    d96c:	6fe0      	ldr	r0, [r4, #124]	; 0x7c
    switch (m_mode) {
    d96e:	3b02      	subs	r3, #2
    uint16_t halfDuty = m_tcc->PER.reg >> 1; // 50% duty cycle
    d970:	6c02      	ldr	r2, [r0, #64]	; 0x40
    switch (m_mode) {
    d972:	2b05      	cmp	r3, #5
    d974:	d81e      	bhi.n	d9b4 <_ZN9ClearCore19DigitalInOutHBridge10ToneUpdateEv+0x88>
    d976:	e8df f003 	tbb	[pc, r3]
    d97a:	1d6b      	.short	0x1d6b
    d97c:	5a6b4a6b 	.word	0x5a6b4a6b
            (m_mode == OUTPUT_TONE && nextAngle < INT16_MAX)) {
    d980:	7982      	ldrb	r2, [r0, #6]
    if ((ToneActiveState() && (ToneActiveState() != TONE_PERIODIC_OFF)) ||
    d982:	2a07      	cmp	r2, #7
    d984:	d017      	beq.n	d9b6 <_ZN9ClearCore19DigitalInOutHBridge10ToneUpdateEv+0x8a>
        m_tcc->INTENCLR.bit.OVF = 1;
    d986:	6fc1      	ldr	r1, [r0, #124]	; 0x7c
    d988:	4c36      	ldr	r4, [pc, #216]	; (da64 <_ZN9ClearCore19DigitalInOutHBridge10ToneUpdateEv+0x138>)
    d98a:	6a4b      	ldr	r3, [r1, #36]	; 0x24
    d98c:	f043 0301 	orr.w	r3, r3, #1
    d990:	624b      	str	r3, [r1, #36]	; 0x24
        State(0);
    d992:	6803      	ldr	r3, [r0, #0]
    d994:	695b      	ldr	r3, [r3, #20]
        m_angle = 0;
    d996:	2500      	movs	r5, #0
    d998:	42a3      	cmp	r3, r4
    d99a:	f8a0 5062 	strh.w	r5, [r0, #98]	; 0x62
    d99e:	d132      	bne.n	da06 <_ZN9ClearCore19DigitalInOutHBridge10ToneUpdateEv+0xda>
    uint16_t halfDuty = m_tcc->PER.reg >> 1; // 50% duty cycle
    d9a0:	6c0b      	ldr	r3, [r1, #64]	; 0x40
    switch (m_mode) {
    d9a2:	3a02      	subs	r2, #2
    uint16_t halfDuty = m_tcc->PER.reg >> 1; // 50% duty cycle
    d9a4:	085b      	lsrs	r3, r3, #1
    switch (m_mode) {
    d9a6:	2a04      	cmp	r2, #4
    d9a8:	d804      	bhi.n	d9b4 <_ZN9ClearCore19DigitalInOutHBridge10ToneUpdateEv+0x88>
    d9aa:	e8df f002 	tbb	[pc, r2]
    d9ae:	0327      	.short	0x0327
    d9b0:	1b27      	.short	0x1b27
    d9b2:	27          	.byte	0x27
    d9b3:	00          	.byte	0x00
    d9b4:	bd70      	pop	{r4, r5, r6, pc}
            (m_mode == OUTPUT_TONE && nextAngle < INT16_MAX)) {
    d9b6:	f647 72fe 	movw	r2, #32766	; 0x7ffe
    d9ba:	4293      	cmp	r3, r2
    d9bc:	ddc3      	ble.n	d946 <_ZN9ClearCore19DigitalInOutHBridge10ToneUpdateEv+0x1a>
        m_tcc->INTENCLR.bit.OVF = 1;
    d9be:	6fc1      	ldr	r1, [r0, #124]	; 0x7c
    d9c0:	4a28      	ldr	r2, [pc, #160]	; (da64 <_ZN9ClearCore19DigitalInOutHBridge10ToneUpdateEv+0x138>)
    d9c2:	6a4b      	ldr	r3, [r1, #36]	; 0x24
    d9c4:	f043 0301 	orr.w	r3, r3, #1
    d9c8:	624b      	str	r3, [r1, #36]	; 0x24
        State(0);
    d9ca:	6803      	ldr	r3, [r0, #0]
    d9cc:	695b      	ldr	r3, [r3, #20]
        m_angle = 0;
    d9ce:	2400      	movs	r4, #0
    d9d0:	4293      	cmp	r3, r2
    d9d2:	f8a0 4062 	strh.w	r4, [r0, #98]	; 0x62
    d9d6:	d116      	bne.n	da06 <_ZN9ClearCore19DigitalInOutHBridge10ToneUpdateEv+0xda>
    uint16_t halfDuty = m_tcc->PER.reg >> 1; // 50% duty cycle
    d9d8:	6c0b      	ldr	r3, [r1, #64]	; 0x40
    d9da:	085b      	lsrs	r3, r3, #1
    d9dc:	b29b      	uxth	r3, r3
            m_tcc->CCBUF[0].reg = halfDuty + halfDuty * newState / INT16_MAX;
    d9de:	670b      	str	r3, [r1, #112]	; 0x70
            m_tcc->CCBUF[1].reg = halfDuty - halfDuty * newState / INT16_MAX;
    d9e0:	674b      	str	r3, [r1, #116]	; 0x74
    d9e2:	bd70      	pop	{r4, r5, r6, pc}
        index &= 0xf;   // guard against index out of bounds
    d9e4:	7900      	ldrb	r0, [r0, #4]
        m_fadeCounter.m_valuesBuf[index] = value;
    d9e6:	4a20      	ldr	r2, [pc, #128]	; (da68 <_ZN9ClearCore19DigitalInOutHBridge10ToneUpdateEv+0x13c>)
    d9e8:	f000 000f 	and.w	r0, r0, #15
    d9ec:	4402      	add	r2, r0
    d9ee:	b29b      	uxth	r3, r3
    d9f0:	2000      	movs	r0, #0
    d9f2:	f882 008d 	strb.w	r0, [r2, #141]	; 0x8d
            m_tcc->CCBUF[0].reg = halfDuty + halfDuty * newState / INT16_MAX;
    d9f6:	670b      	str	r3, [r1, #112]	; 0x70
            m_tcc->CCBUF[1].reg = halfDuty - halfDuty * newState / INT16_MAX;
    d9f8:	674b      	str	r3, [r1, #116]	; 0x74
    d9fa:	bd70      	pop	{r4, r5, r6, pc}
            success = DigitalInOut::State(newState);
    d9fc:	2100      	movs	r1, #0
}
    d9fe:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
            success = DigitalInOut::State(newState);
    da02:	f7ff ba19 	b.w	ce38 <_ZN9ClearCore12DigitalInOut5StateEs>
        State(0);
    da06:	2100      	movs	r1, #0
}
    da08:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
        State(0);
    da0c:	4718      	bx	r3
        index &= 0xf;   // guard against index out of bounds
    da0e:	7924      	ldrb	r4, [r4, #4]
        m_fadeCounter.m_valuesBuf[index] = value;
    da10:	4b15      	ldr	r3, [pc, #84]	; (da68 <_ZN9ClearCore19DigitalInOutHBridge10ToneUpdateEv+0x13c>)
    da12:	f004 040f 	and.w	r4, r4, #15
            if (newState == INT16_MIN) {
    da16:	f511 4f00 	cmn.w	r1, #32768	; 0x8000
    da1a:	4423      	add	r3, r4
                ShiftReg.LedPwmValue(m_clearCorePin, labs(newState) >> 7);
    da1c:	bf1b      	ittet	ne
    da1e:	ea81 74e1 	eorne.w	r4, r1, r1, asr #31
    da22:	eba4 74e1 	subne.w	r4, r4, r1, asr #31
    da26:	24ff      	moveq	r4, #255	; 0xff
    da28:	11e4      	asrne	r4, r4, #7
    da2a:	f883 408d 	strb.w	r4, [r3, #141]	; 0x8d
            m_tcc->CCBUF[0].reg = halfDuty + halfDuty * newState / INT16_MAX;
    da2e:	f3c2 024f 	ubfx	r2, r2, #1, #16
    da32:	4b0e      	ldr	r3, [pc, #56]	; (da6c <_ZN9ClearCore19DigitalInOutHBridge10ToneUpdateEv+0x140>)
    da34:	fb01 f102 	mul.w	r1, r1, r2
    da38:	fb83 4301 	smull	r4, r3, r3, r1
    da3c:	440b      	add	r3, r1
    da3e:	139b      	asrs	r3, r3, #14
    da40:	17c9      	asrs	r1, r1, #31
    da42:	1a5c      	subs	r4, r3, r1
            m_tcc->CCBUF[1].reg = halfDuty - halfDuty * newState / INT16_MAX;
    da44:	1ac9      	subs	r1, r1, r3
            m_tcc->CCBUF[0].reg = halfDuty + halfDuty * newState / INT16_MAX;
    da46:	4414      	add	r4, r2
            m_tcc->CCBUF[1].reg = halfDuty - halfDuty * newState / INT16_MAX;
    da48:	4411      	add	r1, r2
            m_tcc->CCBUF[0].reg = halfDuty + halfDuty * newState / INT16_MAX;
    da4a:	6704      	str	r4, [r0, #112]	; 0x70
            m_tcc->CCBUF[1].reg = halfDuty - halfDuty * newState / INT16_MAX;
    da4c:	6741      	str	r1, [r0, #116]	; 0x74
    da4e:	bd70      	pop	{r4, r5, r6, pc}
            success = DigitalInOut::State(newState);
    da50:	4620      	mov	r0, r4
}
    da52:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
            success = DigitalInOut::State(newState);
    da56:	f7ff b9ef 	b.w	ce38 <_ZN9ClearCore12DigitalInOut5StateEs>
                                    m_amplitude) >> 15));
    da5a:	4620      	mov	r0, r4
    da5c:	462b      	mov	r3, r5
}
    da5e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
                                    m_amplitude) >> 15));
    da62:	4718      	bx	r3
    da64:	0000d8bd 	.word	0x0000d8bd
    da68:	20001a80 	.word	0x20001a80
    da6c:	80010003 	.word	0x80010003

0000da70 <_ZN9ClearCore19DigitalInOutHBridge7RefreshEv>:
    switch (m_mode) {
    da70:	7983      	ldrb	r3, [r0, #6]
    da72:	3b02      	subs	r3, #2
    da74:	2b05      	cmp	r3, #5
    da76:	d804      	bhi.n	da82 <_ZN9ClearCore19DigitalInOutHBridge7RefreshEv+0x12>
    da78:	e8df f003 	tbb	[pc, r3]
    da7c:	03040304 	.word	0x03040304
    da80:	0604      	.short	0x0604
    da82:	4770      	bx	lr
            DigitalInOut::Refresh();
    da84:	f7ff bb7c 	b.w	d180 <_ZN9ClearCore12DigitalInOut7RefreshEv>
            switch (m_toneState) {
    da88:	f890 3070 	ldrb.w	r3, [r0, #112]	; 0x70
    da8c:	2b03      	cmp	r3, #3
void DigitalInOutHBridge::Refresh() {
    da8e:	b4f0      	push	{r4, r5, r6, r7}
            switch (m_toneState) {
    da90:	d02c      	beq.n	daec <_ZN9ClearCore19DigitalInOutHBridge7RefreshEv+0x7c>
    da92:	2b04      	cmp	r3, #4
    da94:	d003      	beq.n	da9e <_ZN9ClearCore19DigitalInOutHBridge7RefreshEv+0x2e>
    da96:	2b02      	cmp	r3, #2
    da98:	d04c      	beq.n	db34 <_ZN9ClearCore19DigitalInOutHBridge7RefreshEv+0xc4>
}
    da9a:	bcf0      	pop	{r4, r5, r6, r7}
    da9c:	4770      	bx	lr
                    if (tickCnt - m_toneStartTick > m_toneOffTicks) {
    da9e:	4937      	ldr	r1, [pc, #220]	; (db7c <_ZN9ClearCore19DigitalInOutHBridge7RefreshEv+0x10c>)
    daa0:	6e44      	ldr	r4, [r0, #100]	; 0x64
    daa2:	680b      	ldr	r3, [r1, #0]
    daa4:	6ec2      	ldr	r2, [r0, #108]	; 0x6c
    daa6:	1b1b      	subs	r3, r3, r4
    daa8:	4293      	cmp	r3, r2
    daaa:	d9f6      	bls.n	da9a <_ZN9ClearCore19DigitalInOutHBridge7RefreshEv+0x2a>
                        m_tcc->INTENSET.bit.OVF = 1;
    daac:	6fc4      	ldr	r4, [r0, #124]	; 0x7c
                        m_toneState = TONE_PERIODIC_ON;
    daae:	2303      	movs	r3, #3
    dab0:	f880 3070 	strb.w	r3, [r0, #112]	; 0x70
                        m_tcc->INTENSET.bit.OVF = 1;
    dab4:	6aa2      	ldr	r2, [r4, #40]	; 0x28
        m_fadeCounter.m_analogMasks[index] = ledMask;
    dab6:	4b32      	ldr	r3, [pc, #200]	; (db80 <_ZN9ClearCore19DigitalInOutHBridge7RefreshEv+0x110>)
    dab8:	f042 0201 	orr.w	r2, r2, #1
    dabc:	62a2      	str	r2, [r4, #40]	; 0x28
        index &= 0xf;   // guard against index out of bounds
    dabe:	7902      	ldrb	r2, [r0, #4]
                        m_toneStartTick = tickCnt;
    dac0:	6809      	ldr	r1, [r1, #0]
                        ShiftReg.LedInPwm(m_ledMask, true, m_clearCorePin);
    dac2:	6885      	ldr	r5, [r0, #8]
        state ? m_fadeCounter.m_activeMask |= 1 << index
    dac4:	f8b3 6074 	ldrh.w	r6, [r3, #116]	; 0x74
        state ? m_patternMasks[pattern] |= ledMask
    dac8:	f8d3 40e8 	ldr.w	r4, [r3, #232]	; 0xe8
                        m_toneStartTick = tickCnt;
    dacc:	6641      	str	r1, [r0, #100]	; 0x64
        m_fadeCounter.m_analogMasks[index] = ledMask;
    dace:	f002 010f 	and.w	r1, r2, #15
        state ? m_fadeCounter.m_activeMask |= 1 << index
    dad2:	2201      	movs	r2, #1
        m_fadeCounter.m_analogMasks[index] = ledMask;
    dad4:	eb03 0081 	add.w	r0, r3, r1, lsl #2
        state ? m_fadeCounter.m_activeMask |= 1 << index
    dad8:	408a      	lsls	r2, r1
    dada:	4332      	orrs	r2, r6
        state ? m_patternMasks[pattern] |= ledMask
    dadc:	432c      	orrs	r4, r5
        m_fadeCounter.m_analogMasks[index] = ledMask;
    dade:	f8c0 50a0 	str.w	r5, [r0, #160]	; 0xa0
        state ? m_fadeCounter.m_activeMask |= 1 << index
    dae2:	f8a3 2074 	strh.w	r2, [r3, #116]	; 0x74
        state ? m_patternMasks[pattern] |= ledMask
    dae6:	f8c3 40e8 	str.w	r4, [r3, #232]	; 0xe8
}
    daea:	e7d6      	b.n	da9a <_ZN9ClearCore19DigitalInOutHBridge7RefreshEv+0x2a>
                    if (tickCnt - m_toneStartTick > m_toneOnTicks) {
    daec:	4923      	ldr	r1, [pc, #140]	; (db7c <_ZN9ClearCore19DigitalInOutHBridge7RefreshEv+0x10c>)
    daee:	6e44      	ldr	r4, [r0, #100]	; 0x64
    daf0:	680b      	ldr	r3, [r1, #0]
    daf2:	6e82      	ldr	r2, [r0, #104]	; 0x68
    daf4:	1b1b      	subs	r3, r3, r4
    daf6:	4293      	cmp	r3, r2
    daf8:	d9cf      	bls.n	da9a <_ZN9ClearCore19DigitalInOutHBridge7RefreshEv+0x2a>
        m_fadeCounter.m_analogMasks[index] = ledMask;
    dafa:	4a21      	ldr	r2, [pc, #132]	; (db80 <_ZN9ClearCore19DigitalInOutHBridge7RefreshEv+0x110>)
        index &= 0xf;   // guard against index out of bounds
    dafc:	7903      	ldrb	r3, [r0, #4]
                        m_toneStartTick = tickCnt;
    dafe:	6809      	ldr	r1, [r1, #0]
                        ShiftReg.LedInPwm(m_ledMask, false, m_clearCorePin);
    db00:	6886      	ldr	r6, [r0, #8]
                                              : m_fadeCounter.m_activeMask &= ~(1 << index);
    db02:	f8b2 5074 	ldrh.w	r5, [r2, #116]	; 0x74
                                           : m_patternMasks[pattern] &= ~ledMask;
    db06:	f8d2 40e8 	ldr.w	r4, [r2, #232]	; 0xe8
                        m_toneStartTick = tickCnt;
    db0a:	6641      	str	r1, [r0, #100]	; 0x64
        m_fadeCounter.m_analogMasks[index] = ledMask;
    db0c:	f003 030f 	and.w	r3, r3, #15
                                              : m_fadeCounter.m_activeMask &= ~(1 << index);
    db10:	2101      	movs	r1, #1
    db12:	4099      	lsls	r1, r3
        m_fadeCounter.m_analogMasks[index] = ledMask;
    db14:	eb02 0383 	add.w	r3, r2, r3, lsl #2
                                              : m_fadeCounter.m_activeMask &= ~(1 << index);
    db18:	ea25 0501 	bic.w	r5, r5, r1
                        m_toneState = TONE_PERIODIC_OFF;
    db1c:	2704      	movs	r7, #4
                                           : m_patternMasks[pattern] &= ~ledMask;
    db1e:	ea24 0406 	bic.w	r4, r4, r6
    db22:	f880 7070 	strb.w	r7, [r0, #112]	; 0x70
                                              : m_fadeCounter.m_activeMask &= ~(1 << index);
    db26:	f8a2 5074 	strh.w	r5, [r2, #116]	; 0x74
        m_fadeCounter.m_analogMasks[index] = ledMask;
    db2a:	f8c3 60a0 	str.w	r6, [r3, #160]	; 0xa0
                                           : m_patternMasks[pattern] &= ~ledMask;
    db2e:	f8c2 40e8 	str.w	r4, [r2, #232]	; 0xe8
    db32:	e7b2      	b.n	da9a <_ZN9ClearCore19DigitalInOutHBridge7RefreshEv+0x2a>
                    if (tickCnt - m_toneStartTick > m_toneOnTicks) {
    db34:	4b11      	ldr	r3, [pc, #68]	; (db7c <_ZN9ClearCore19DigitalInOutHBridge7RefreshEv+0x10c>)
    db36:	6e41      	ldr	r1, [r0, #100]	; 0x64
    db38:	681b      	ldr	r3, [r3, #0]
    db3a:	6e82      	ldr	r2, [r0, #104]	; 0x68
    db3c:	1a5b      	subs	r3, r3, r1
    db3e:	4293      	cmp	r3, r2
    db40:	d9ab      	bls.n	da9a <_ZN9ClearCore19DigitalInOutHBridge7RefreshEv+0x2a>
        m_fadeCounter.m_analogMasks[index] = ledMask;
    db42:	4a0f      	ldr	r2, [pc, #60]	; (db80 <_ZN9ClearCore19DigitalInOutHBridge7RefreshEv+0x110>)
        index &= 0xf;   // guard against index out of bounds
    db44:	7903      	ldrb	r3, [r0, #4]
                        ShiftReg.LedInPwm(m_ledMask, false, m_clearCorePin);
    db46:	6886      	ldr	r6, [r0, #8]
                                           : m_patternMasks[pattern] &= ~ledMask;
    db48:	f8d2 10e8 	ldr.w	r1, [r2, #232]	; 0xe8
                                              : m_fadeCounter.m_activeMask &= ~(1 << index);
    db4c:	f8b2 4074 	ldrh.w	r4, [r2, #116]	; 0x74
        m_fadeCounter.m_analogMasks[index] = ledMask;
    db50:	f003 030f 	and.w	r3, r3, #15
                                              : m_fadeCounter.m_activeMask &= ~(1 << index);
    db54:	2501      	movs	r5, #1
    db56:	409d      	lsls	r5, r3
        m_fadeCounter.m_analogMasks[index] = ledMask;
    db58:	eb02 0383 	add.w	r3, r2, r3, lsl #2
                                              : m_fadeCounter.m_activeMask &= ~(1 << index);
    db5c:	ea24 0405 	bic.w	r4, r4, r5
                                           : m_patternMasks[pattern] &= ~ledMask;
    db60:	ea21 0106 	bic.w	r1, r1, r6
                        m_toneState = TONE_OFF;
    db64:	2500      	movs	r5, #0
    db66:	f880 5070 	strb.w	r5, [r0, #112]	; 0x70
                        m_forceToneDuration = false;
    db6a:	f880 5083 	strb.w	r5, [r0, #131]	; 0x83
                                              : m_fadeCounter.m_activeMask &= ~(1 << index);
    db6e:	f8a2 4074 	strh.w	r4, [r2, #116]	; 0x74
        m_fadeCounter.m_analogMasks[index] = ledMask;
    db72:	f8c3 60a0 	str.w	r6, [r3, #160]	; 0xa0
                                           : m_patternMasks[pattern] &= ~ledMask;
    db76:	f8c2 10e8 	str.w	r1, [r2, #232]	; 0xe8
    db7a:	e78e      	b.n	da9a <_ZN9ClearCore19DigitalInOutHBridge7RefreshEv+0x2a>
    db7c:	20001c90 	.word	0x20001c90
    db80:	20001a80 	.word	0x20001a80

0000db84 <_ZN9ClearCore19DigitalInOutHBridge10InitializeE13ClearCorePins>:
void DigitalInOutHBridge::Initialize(ClearCorePins clearCorePin) {
    db84:	b570      	push	{r4, r5, r6, lr}
    db86:	4604      	mov	r4, r0
    DigitalInOut::Initialize(clearCorePin);
    db88:	f7ff fc20 	bl	d3cc <_ZN9ClearCore12DigitalInOut10InitializeE13ClearCorePins>
    m_inFault = false;
    db8c:	2300      	movs	r3, #0
    m_tcc->CTRLA.bit.SWRST = 1;
    db8e:	6fe2      	ldr	r2, [r4, #124]	; 0x7c
    m_inFault = false;
    db90:	f884 3082 	strb.w	r3, [r4, #130]	; 0x82
    m_tcc->CTRLA.bit.SWRST = 1;
    db94:	6813      	ldr	r3, [r2, #0]
    db96:	f043 0301 	orr.w	r3, r3, #1
    db9a:	6013      	str	r3, [r2, #0]
    SYNCBUSY_WAIT(m_tcc, TCC_SYNCBUSY_SWRST);
    db9c:	6893      	ldr	r3, [r2, #8]
    db9e:	f013 0301 	ands.w	r3, r3, #1
    dba2:	d1fb      	bne.n	db9c <_ZN9ClearCore19DigitalInOutHBridge10InitializeE13ClearCorePins+0x18>
    m_tcc->DBGCTRL.reg = TCC_DBGCTRL_DBGRUN;
    dba4:	2101      	movs	r1, #1
    m_tcc->COUNT.reg = 0;
    dba6:	6353      	str	r3, [r2, #52]	; 0x34
    m_tcc->DBGCTRL.reg = TCC_DBGCTRL_DBGRUN;
    dba8:	7791      	strb	r1, [r2, #30]
    m_tcc->CTRLBCLR.bit.LUPD = 1;
    dbaa:	7915      	ldrb	r5, [r2, #4]
    m_tcc->PER.reg = SystemCoreClock / (TONE_RATE_HZ << 1) - 1;
    dbac:	4b24      	ldr	r3, [pc, #144]	; (dc40 <_ZN9ClearCore19DigitalInOutHBridge10InitializeE13ClearCorePins+0xbc>)
    dbae:	4e25      	ldr	r6, [pc, #148]	; (dc44 <_ZN9ClearCore19DigitalInOutHBridge10InitializeE13ClearCorePins+0xc0>)
    DATA_OUTPUT_STATE(m_pwmAInfo->gpioPort, 1UL << m_pwmAInfo->gpioPin, false);
    dbb0:	4825      	ldr	r0, [pc, #148]	; (dc48 <_ZN9ClearCore19DigitalInOutHBridge10InitializeE13ClearCorePins+0xc4>)
    m_tcc->CTRLBCLR.bit.LUPD = 1;
    dbb2:	f045 0502 	orr.w	r5, r5, #2
    dbb6:	7115      	strb	r5, [r2, #4]
    m_tcc->WAVE.reg |= TCC_WAVE_WAVEGEN_DSBOTTOM;
    dbb8:	6bd5      	ldr	r5, [r2, #60]	; 0x3c
    dbba:	f045 0505 	orr.w	r5, r5, #5
    dbbe:	63d5      	str	r5, [r2, #60]	; 0x3c
    m_tcc->INTENCLR.bit.OVF = 1;
    dbc0:	6a55      	ldr	r5, [r2, #36]	; 0x24
    dbc2:	430d      	orrs	r5, r1
    dbc4:	6255      	str	r5, [r2, #36]	; 0x24
    m_tcc->PER.reg = SystemCoreClock / (TONE_RATE_HZ << 1) - 1;
    dbc6:	681b      	ldr	r3, [r3, #0]
    dbc8:	fba6 5303 	umull	r5, r3, r6, r3
    dbcc:	0bdb      	lsrs	r3, r3, #15
    dbce:	3b01      	subs	r3, #1
    dbd0:	6413      	str	r3, [r2, #64]	; 0x40
        m_tcc->CC[iChannel].reg = m_tcc->PER.reg;
    dbd2:	6c13      	ldr	r3, [r2, #64]	; 0x40
    dbd4:	6453      	str	r3, [r2, #68]	; 0x44
    dbd6:	6c13      	ldr	r3, [r2, #64]	; 0x40
    dbd8:	6493      	str	r3, [r2, #72]	; 0x48
    DATA_OUTPUT_STATE(m_pwmAInfo->gpioPort, 1UL << m_pwmAInfo->gpioPin, false);
    dbda:	6f63      	ldr	r3, [r4, #116]	; 0x74
    dbdc:	f993 2001 	ldrsb.w	r2, [r3, #1]
    dbe0:	789d      	ldrb	r5, [r3, #2]
    dbe2:	eb00 12c2 	add.w	r2, r0, r2, lsl #7
    dbe6:	fa01 f605 	lsl.w	r6, r1, r5
    dbea:	6156      	str	r6, [r2, #20]
    DATA_OUTPUT_STATE(m_pwmBInfo->gpioPort, 1UL << m_pwmBInfo->gpioPin, true);
    dbec:	6fa4      	ldr	r4, [r4, #120]	; 0x78
    dbee:	f994 3001 	ldrsb.w	r3, [r4, #1]
    dbf2:	78a4      	ldrb	r4, [r4, #2]
    dbf4:	01db      	lsls	r3, r3, #7
    dbf6:	4418      	add	r0, r3
    dbf8:	40a1      	lsls	r1, r4
    dbfa:	6181      	str	r1, [r0, #24]
    DATA_DIRECTION_OUTPUT(m_pwmAInfo->gpioPort, 1UL << m_pwmAInfo->gpioPin);
    dbfc:	6096      	str	r6, [r2, #8]
    PMUX_SELECTION(m_pwmAInfo->gpioPort, m_pwmAInfo->gpioPin, PER_TIMER_ALT);
    dbfe:	eb02 0255 	add.w	r2, r2, r5, lsr #1
    DATA_DIRECTION_OUTPUT(m_pwmBInfo->gpioPort, 1UL << m_pwmBInfo->gpioPin);
    dc02:	6081      	str	r1, [r0, #8]
    PMUX_SELECTION(m_pwmAInfo->gpioPort, m_pwmAInfo->gpioPin, PER_TIMER_ALT);
    dc04:	f892 1030 	ldrb.w	r1, [r2, #48]	; 0x30
    PMUX_SELECTION(m_pwmBInfo->gpioPort, m_pwmBInfo->gpioPin, PER_TIMER_ALT);
    dc08:	f103 4382 	add.w	r3, r3, #1090519040	; 0x41000000
    PMUX_SELECTION(m_pwmAInfo->gpioPort, m_pwmAInfo->gpioPin, PER_TIMER_ALT);
    dc0c:	2005      	movs	r0, #5
    dc0e:	07ed      	lsls	r5, r5, #31
    PMUX_SELECTION(m_pwmBInfo->gpioPort, m_pwmBInfo->gpioPin, PER_TIMER_ALT);
    dc10:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
    PMUX_SELECTION(m_pwmAInfo->gpioPort, m_pwmAInfo->gpioPin, PER_TIMER_ALT);
    dc14:	bf4c      	ite	mi
    dc16:	f360 1107 	bfimi	r1, r0, #4, #4
    dc1a:	f360 0103 	bfipl	r1, r0, #0, #4
    PMUX_SELECTION(m_pwmBInfo->gpioPort, m_pwmBInfo->gpioPin, PER_TIMER_ALT);
    dc1e:	eb03 0354 	add.w	r3, r3, r4, lsr #1
    PMUX_SELECTION(m_pwmAInfo->gpioPort, m_pwmAInfo->gpioPin, PER_TIMER_ALT);
    dc22:	f882 1030 	strb.w	r1, [r2, #48]	; 0x30
    PMUX_SELECTION(m_pwmBInfo->gpioPort, m_pwmBInfo->gpioPin, PER_TIMER_ALT);
    dc26:	f893 2030 	ldrb.w	r2, [r3, #48]	; 0x30
    dc2a:	2105      	movs	r1, #5
    dc2c:	07e0      	lsls	r0, r4, #31
    dc2e:	bf4c      	ite	mi
    dc30:	f361 1207 	bfimi	r2, r1, #4, #4
    dc34:	f361 0203 	bfipl	r2, r1, #0, #4
    dc38:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
    dc3c:	bd70      	pop	{r4, r5, r6, pc}
    dc3e:	bf00      	nop
    dc40:	200000e4 	.word	0x200000e4
    dc44:	be37c63b 	.word	0xbe37c63b
    dc48:	41008000 	.word	0x41008000

0000dc4c <_ZN9ClearCore19DigitalInOutHBridge4ModeENS_9Connector14ConnectorModesE>:
    if (m_mode == newMode) {
    dc4c:	7982      	ldrb	r2, [r0, #6]
    dc4e:	428a      	cmp	r2, r1
    dc50:	d07a      	beq.n	dd48 <_ZN9ClearCore19DigitalInOutHBridge4ModeENS_9Connector14ConnectorModesE+0xfc>
    dc52:	2908      	cmp	r1, #8
bool DigitalInOutHBridge::Mode(ConnectorModes newMode) {
    dc54:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    dc56:	460d      	mov	r5, r1
    dc58:	d867      	bhi.n	dd2a <_ZN9ClearCore19DigitalInOutHBridge4ModeENS_9Connector14ConnectorModesE+0xde>
    dc5a:	2201      	movs	r2, #1
    dc5c:	fa02 f301 	lsl.w	r3, r2, r1
    dc60:	f013 0f54 	tst.w	r3, #84	; 0x54
    dc64:	4604      	mov	r4, r0
    dc66:	d171      	bne.n	dd4c <_ZN9ClearCore19DigitalInOutHBridge4ModeENS_9Connector14ConnectorModesE+0x100>
    dc68:	f413 7f90 	tst.w	r3, #288	; 0x120
    dc6c:	d05f      	beq.n	dd2e <_ZN9ClearCore19DigitalInOutHBridge4ModeENS_9Connector14ConnectorModesE+0xe2>
    dc6e:	7901      	ldrb	r1, [r0, #4]
    dc70:	4a5d      	ldr	r2, [pc, #372]	; (dde8 <_ZN9ClearCore19DigitalInOutHBridge4ModeENS_9Connector14ConnectorModesE+0x19c>)
    dc72:	f001 010f 	and.w	r1, r1, #15
            DATA_OUTPUT_STATE(m_outputPort, m_outputDataMask, !m_inFault);
    dc76:	f894 3082 	ldrb.w	r3, [r4, #130]	; 0x82
    dc7a:	2b00      	cmp	r3, #0
    dc7c:	f040 809e 	bne.w	ddbc <_ZN9ClearCore19DigitalInOutHBridge4ModeENS_9Connector14ConnectorModesE+0x170>
    dc80:	6b23      	ldr	r3, [r4, #48]	; 0x30
    dc82:	6ba6      	ldr	r6, [r4, #56]	; 0x38
    dc84:	01db      	lsls	r3, r3, #7
    dc86:	f103 4082 	add.w	r0, r3, #1090519040	; 0x41000000
    dc8a:	f500 4000 	add.w	r0, r0, #32768	; 0x8000
    dc8e:	6186      	str	r6, [r0, #24]
            PMUX_DISABLE(m_outputPort, m_outputDataBit);
    dc90:	6b60      	ldr	r0, [r4, #52]	; 0x34
    dc92:	f103 4382 	add.w	r3, r3, #1090519040	; 0x41000000
    dc96:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
    dc9a:	4403      	add	r3, r0
        m_fadeCounter.m_analogMasks[index] = ledMask;
    dc9c:	eb02 0681 	add.w	r6, r2, r1, lsl #2
    dca0:	f893 0040 	ldrb.w	r0, [r3, #64]	; 0x40
    dca4:	f36f 0000 	bfc	r0, #0, #1
    dca8:	f883 0040 	strb.w	r0, [r3, #64]	; 0x40
            ShiftReg.LedInPwm(m_ledMask,
    dcac:	68a3      	ldr	r3, [r4, #8]
    dcae:	f8c6 30a0 	str.w	r3, [r6, #160]	; 0xa0
                                              : m_fadeCounter.m_activeMask &= ~(1 << index);
    dcb2:	2d05      	cmp	r5, #5
    dcb4:	f000 808b 	beq.w	ddce <_ZN9ClearCore19DigitalInOutHBridge4ModeENS_9Connector14ConnectorModesE+0x182>
    dcb8:	f8b2 0074 	ldrh.w	r0, [r2, #116]	; 0x74
                                           : m_patternMasks[pattern] &= ~ledMask;
    dcbc:	f8d2 60e8 	ldr.w	r6, [r2, #232]	; 0xe8
                                              : m_fadeCounter.m_activeMask &= ~(1 << index);
    dcc0:	2701      	movs	r7, #1
    dcc2:	fa07 f101 	lsl.w	r1, r7, r1
    dcc6:	ea20 0101 	bic.w	r1, r0, r1
    dcca:	f8a2 1074 	strh.w	r1, [r2, #116]	; 0x74
                                           : m_patternMasks[pattern] &= ~ledMask;
    dcce:	ea26 0303 	bic.w	r3, r6, r3
        PMUX_ENABLE(m_pwmAInfo->gpioPort, m_pwmAInfo->gpioPin);
    dcd2:	6f61      	ldr	r1, [r4, #116]	; 0x74
    dcd4:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
    dcd8:	f991 3001 	ldrsb.w	r3, [r1, #1]
    dcdc:	4a43      	ldr	r2, [pc, #268]	; (ddec <_ZN9ClearCore19DigitalInOutHBridge4ModeENS_9Connector14ConnectorModesE+0x1a0>)
    dcde:	7889      	ldrb	r1, [r1, #2]
    dce0:	eb02 13c3 	add.w	r3, r2, r3, lsl #7
    dce4:	440b      	add	r3, r1
    dce6:	2101      	movs	r1, #1
    dce8:	f893 0040 	ldrb.w	r0, [r3, #64]	; 0x40
    dcec:	4308      	orrs	r0, r1
    dcee:	f883 0040 	strb.w	r0, [r3, #64]	; 0x40
        PMUX_ENABLE(m_pwmBInfo->gpioPort, m_pwmBInfo->gpioPin);
    dcf2:	6fa0      	ldr	r0, [r4, #120]	; 0x78
    dcf4:	f990 3001 	ldrsb.w	r3, [r0, #1]
    dcf8:	7880      	ldrb	r0, [r0, #2]
    dcfa:	eb02 13c3 	add.w	r3, r2, r3, lsl #7
    dcfe:	4403      	add	r3, r0
    dd00:	f893 2040 	ldrb.w	r2, [r3, #64]	; 0x40
    dd04:	430a      	orrs	r2, r1
    dd06:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    if (m_tcc->CTRLA.bit.ENABLE != tccControlPwm) {
    dd0a:	6fe2      	ldr	r2, [r4, #124]	; 0x7c
    dd0c:	6813      	ldr	r3, [r2, #0]
    dd0e:	f3c3 0340 	ubfx	r3, r3, #1, #1
    dd12:	428b      	cmp	r3, r1
    dd14:	d006      	beq.n	dd24 <_ZN9ClearCore19DigitalInOutHBridge4ModeENS_9Connector14ConnectorModesE+0xd8>
        m_tcc->CTRLA.bit.ENABLE = tccControlPwm;
    dd16:	6813      	ldr	r3, [r2, #0]
    dd18:	f361 0341 	bfi	r3, r1, #1, #1
    dd1c:	6013      	str	r3, [r2, #0]
        SYNCBUSY_WAIT(m_tcc, TCC_SYNCBUSY_ENABLE);
    dd1e:	6893      	ldr	r3, [r2, #8]
    dd20:	079b      	lsls	r3, r3, #30
    dd22:	d4fc      	bmi.n	dd1e <_ZN9ClearCore19DigitalInOutHBridge4ModeENS_9Connector14ConnectorModesE+0xd2>
    m_mode = newMode;
    dd24:	71a5      	strb	r5, [r4, #6]
    return modeChangeSuccess;
    dd26:	2001      	movs	r0, #1
    dd28:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        return false;
    dd2a:	2000      	movs	r0, #0
    dd2c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    dd2e:	061a      	lsls	r2, r3, #24
    dd30:	d5fb      	bpl.n	dd2a <_ZN9ClearCore19DigitalInOutHBridge4ModeENS_9Connector14ConnectorModesE+0xde>
        index &= 0xf;   // guard against index out of bounds
    dd32:	7901      	ldrb	r1, [r0, #4]
        m_fadeCounter.m_valuesBuf[index] = value;
    dd34:	4a2c      	ldr	r2, [pc, #176]	; (dde8 <_ZN9ClearCore19DigitalInOutHBridge4ModeENS_9Connector14ConnectorModesE+0x19c>)
            ShiftReg.LedPwmValue(m_clearCorePin, m_amplitude >> 7);
    dd36:	f9b0 305e 	ldrsh.w	r3, [r0, #94]	; 0x5e
    dd3a:	f001 010f 	and.w	r1, r1, #15
    dd3e:	1850      	adds	r0, r2, r1
    dd40:	11db      	asrs	r3, r3, #7
    dd42:	f880 308d 	strb.w	r3, [r0, #141]	; 0x8d
    dd46:	e796      	b.n	dc76 <_ZN9ClearCore19DigitalInOutHBridge4ModeENS_9Connector14ConnectorModesE+0x2a>
        return true;
    dd48:	2001      	movs	r0, #1
    dd4a:	4770      	bx	lr
        m_fadeCounter.m_analogMasks[index] = ledMask;
    dd4c:	4f26      	ldr	r7, [pc, #152]	; (dde8 <_ZN9ClearCore19DigitalInOutHBridge4ModeENS_9Connector14ConnectorModesE+0x19c>)
        index &= 0xf;   // guard against index out of bounds
    dd4e:	7903      	ldrb	r3, [r0, #4]
            ShiftReg.LedInPwm(m_ledMask, false, m_clearCorePin);
    dd50:	f8d0 e008 	ldr.w	lr, [r0, #8]
                                              : m_fadeCounter.m_activeMask &= ~(1 << index);
    dd54:	f8b7 c074 	ldrh.w	ip, [r7, #116]	; 0x74
                                           : m_patternMasks[pattern] &= ~ledMask;
    dd58:	f8d7 60e8 	ldr.w	r6, [r7, #232]	; 0xe8
        m_fadeCounter.m_analogMasks[index] = ledMask;
    dd5c:	f003 030f 	and.w	r3, r3, #15
                                              : m_fadeCounter.m_activeMask &= ~(1 << index);
    dd60:	409a      	lsls	r2, r3
        m_fadeCounter.m_analogMasks[index] = ledMask;
    dd62:	eb07 0383 	add.w	r3, r7, r3, lsl #2
                                              : m_fadeCounter.m_activeMask &= ~(1 << index);
    dd66:	ea2c 0202 	bic.w	r2, ip, r2
                                           : m_patternMasks[pattern] &= ~ledMask;
    dd6a:	ea26 060e 	bic.w	r6, r6, lr
                                              : m_fadeCounter.m_activeMask &= ~(1 << index);
    dd6e:	f8a7 2074 	strh.w	r2, [r7, #116]	; 0x74
        m_fadeCounter.m_analogMasks[index] = ledMask;
    dd72:	f8c3 e0a0 	str.w	lr, [r3, #160]	; 0xa0
                                           : m_patternMasks[pattern] &= ~ledMask;
    dd76:	f8c7 60e8 	str.w	r6, [r7, #232]	; 0xe8
            modeChangeSuccess = DigitalInOut::Mode(newMode);
    dd7a:	f7ff f8b9 	bl	cef0 <_ZN9ClearCore12DigitalInOut4ModeENS_9Connector14ConnectorModesE>
    if (!modeChangeSuccess) {
    dd7e:	2800      	cmp	r0, #0
    dd80:	d0d3      	beq.n	dd2a <_ZN9ClearCore19DigitalInOutHBridge4ModeENS_9Connector14ConnectorModesE+0xde>
        PMUX_DISABLE(m_pwmAInfo->gpioPort, m_pwmAInfo->gpioPin);
    dd82:	6f61      	ldr	r1, [r4, #116]	; 0x74
    dd84:	4b19      	ldr	r3, [pc, #100]	; (ddec <_ZN9ClearCore19DigitalInOutHBridge4ModeENS_9Connector14ConnectorModesE+0x1a0>)
    dd86:	f991 2001 	ldrsb.w	r2, [r1, #1]
    dd8a:	7889      	ldrb	r1, [r1, #2]
    dd8c:	eb03 12c2 	add.w	r2, r3, r2, lsl #7
    dd90:	440a      	add	r2, r1
        PMUX_DISABLE(m_pwmBInfo->gpioPort, m_pwmBInfo->gpioPin);
    dd92:	2100      	movs	r1, #0
        PMUX_DISABLE(m_pwmAInfo->gpioPort, m_pwmAInfo->gpioPin);
    dd94:	f892 0040 	ldrb.w	r0, [r2, #64]	; 0x40
    dd98:	f36f 0000 	bfc	r0, #0, #1
    dd9c:	f882 0040 	strb.w	r0, [r2, #64]	; 0x40
        PMUX_DISABLE(m_pwmBInfo->gpioPort, m_pwmBInfo->gpioPin);
    dda0:	6fa2      	ldr	r2, [r4, #120]	; 0x78
    dda2:	f992 0001 	ldrsb.w	r0, [r2, #1]
    dda6:	7892      	ldrb	r2, [r2, #2]
    dda8:	eb03 13c0 	add.w	r3, r3, r0, lsl #7
    ddac:	4413      	add	r3, r2
    ddae:	f893 2040 	ldrb.w	r2, [r3, #64]	; 0x40
    ddb2:	f36f 0200 	bfc	r2, #0, #1
    ddb6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    ddba:	e7a6      	b.n	dd0a <_ZN9ClearCore19DigitalInOutHBridge4ModeENS_9Connector14ConnectorModesE+0xbe>
            DATA_OUTPUT_STATE(m_outputPort, m_outputDataMask, !m_inFault);
    ddbc:	6b23      	ldr	r3, [r4, #48]	; 0x30
    ddbe:	6ba6      	ldr	r6, [r4, #56]	; 0x38
    ddc0:	01db      	lsls	r3, r3, #7
    ddc2:	f103 4082 	add.w	r0, r3, #1090519040	; 0x41000000
    ddc6:	f500 4000 	add.w	r0, r0, #32768	; 0x8000
    ddca:	6146      	str	r6, [r0, #20]
    ddcc:	e760      	b.n	dc90 <_ZN9ClearCore19DigitalInOutHBridge4ModeENS_9Connector14ConnectorModesE+0x44>
        state ? m_fadeCounter.m_activeMask |= 1 << index
    ddce:	f8b2 7074 	ldrh.w	r7, [r2, #116]	; 0x74
        state ? m_patternMasks[pattern] |= ledMask
    ddd2:	f8d2 00e8 	ldr.w	r0, [r2, #232]	; 0xe8
        state ? m_fadeCounter.m_activeMask |= 1 << index
    ddd6:	2601      	movs	r6, #1
    ddd8:	fa06 f101 	lsl.w	r1, r6, r1
    dddc:	4339      	orrs	r1, r7
    ddde:	f8a2 1074 	strh.w	r1, [r2, #116]	; 0x74
        state ? m_patternMasks[pattern] |= ledMask
    dde2:	4303      	orrs	r3, r0
    dde4:	e775      	b.n	dcd2 <_ZN9ClearCore19DigitalInOutHBridge4ModeENS_9Connector14ConnectorModesE+0x86>
    dde6:	bf00      	nop
    dde8:	20001a80 	.word	0x20001a80
    ddec:	41008000 	.word	0x41008000

0000ddf0 <_ZN9ClearCore10DmaManager8InstanceEv>:
            aligned(16)));
#endif

DmaManager &DmaMgr = DmaManager::Instance();

DmaManager &DmaManager::Instance() {
    ddf0:	b510      	push	{r4, lr}
    static DmaManager *instance = new DmaManager();
    ddf2:	4c07      	ldr	r4, [pc, #28]	; (de10 <_ZN9ClearCore10DmaManager8InstanceEv+0x20>)
    ddf4:	6823      	ldr	r3, [r4, #0]
    ddf6:	07db      	lsls	r3, r3, #31
    ddf8:	d502      	bpl.n	de00 <_ZN9ClearCore10DmaManager8InstanceEv+0x10>
    ddfa:	4b06      	ldr	r3, [pc, #24]	; (de14 <_ZN9ClearCore10DmaManager8InstanceEv+0x24>)
    ddfc:	6818      	ldr	r0, [r3, #0]
    ddfe:	bd10      	pop	{r4, pc}
    de00:	2001      	movs	r0, #1
    de02:	f00e ff9d 	bl	1cd40 <_Znwj>
    de06:	4a03      	ldr	r2, [pc, #12]	; (de14 <_ZN9ClearCore10DmaManager8InstanceEv+0x24>)
    de08:	2301      	movs	r3, #1
    de0a:	6010      	str	r0, [r2, #0]
    de0c:	6023      	str	r3, [r4, #0]
    return *instance;
}
    de0e:	bd10      	pop	{r4, pc}
    de10:	20001ed4 	.word	0x20001ed4
    de14:	20001fa4 	.word	0x20001fa4

0000de18 <_ZN9ClearCore10DmaManager10InitializeEv>:

void DmaManager::Initialize() {
    de18:	b470      	push	{r4, r5, r6}
    /***********************************************************
     * DMA peripheral initialization
     ***********************************************************/
    // Enables the peripheral clock to the DMAC
    CLOCK_ENABLE(AHBMASK, DMAC_);
    de1a:	4a13      	ldr	r2, [pc, #76]	; (de68 <_ZN9ClearCore10DmaManager10InitializeEv+0x50>)

    // Reset the DMAC to start fresh
    DMAC->CTRL.reg = DMAC_CTRL_SWRST;
    de1c:	4913      	ldr	r1, [pc, #76]	; (de6c <_ZN9ClearCore10DmaManager10InitializeEv+0x54>)
    CLOCK_ENABLE(AHBMASK, DMAC_);
    de1e:	6913      	ldr	r3, [r2, #16]
    DMAC->CTRL.reg = DMAC_CTRL_SWRST;
    de20:	2001      	movs	r0, #1
    CLOCK_ENABLE(AHBMASK, DMAC_);
    de22:	f443 7300 	orr.w	r3, r3, #512	; 0x200
    de26:	6113      	str	r3, [r2, #16]
    // Wait for the reset to finish
    while (DMAC->CTRL.reg == DMAC_CHCTRLA_SWRST) {
    de28:	460a      	mov	r2, r1
    DMAC->CTRL.reg = DMAC_CTRL_SWRST;
    de2a:	8008      	strh	r0, [r1, #0]
    while (DMAC->CTRL.reg == DMAC_CHCTRLA_SWRST) {
    de2c:	8813      	ldrh	r3, [r2, #0]
    de2e:	b29b      	uxth	r3, r3
    de30:	2b01      	cmp	r3, #1
    de32:	d0fb      	beq.n	de2c <_ZN9ClearCore10DmaManager10InitializeEv+0x14>
  NVIC->ICER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
    de34:	4b0e      	ldr	r3, [pc, #56]	; (de70 <_ZN9ClearCore10DmaManager10InitializeEv+0x58>)
    NVIC_DisableIRQ(DMAC_0_IRQn);
    /* Initialize DMA interrupt priority  */
    NVIC_SetPriority(DMAC_0_IRQn, DMA_COMPLETE_PRIORITY);

    // Tell the DMAC where the descriptors are (must be located in SRAM)
    DMAC->BASEADDR.reg = (uint32_t)descriptorBase;
    de36:	4d0f      	ldr	r5, [pc, #60]	; (de74 <_ZN9ClearCore10DmaManager10InitializeEv+0x5c>)
    DMAC->WRBADDR.reg = (uint32_t)writeBackDescriptor;
    de38:	4c0f      	ldr	r4, [pc, #60]	; (de78 <_ZN9ClearCore10DmaManager10InitializeEv+0x60>)
    de3a:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    de3e:	2640      	movs	r6, #64	; 0x40

    // Enable the DMAC and set the priority
    DMAC->CTRL.reg = DMAC_CTRL_DMAENABLE | DMAC_CTRL_LVLEN(0xf);
    de40:	f640 7102 	movw	r1, #3842	; 0xf02
  NVIC->ICER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
    de44:	f8c3 0080 	str.w	r0, [r3, #128]	; 0x80
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    de48:	f883 631f 	strb.w	r6, [r3, #799]	; 0x31f
    DMAC->BASEADDR.reg = (uint32_t)descriptorBase;
    de4c:	6355      	str	r5, [r2, #52]	; 0x34
    DMAC->WRBADDR.reg = (uint32_t)writeBackDescriptor;
    de4e:	6394      	str	r4, [r2, #56]	; 0x38
    DMAC->CTRL.reg = DMAC_CTRL_DMAENABLE | DMAC_CTRL_LVLEN(0xf);
    de50:	8011      	strh	r1, [r2, #0]

    DMAC->DBGCTRL.bit.DBGRUN = 1;
    de52:	7b51      	ldrb	r1, [r2, #13]
    de54:	f041 0101 	orr.w	r1, r1, #1
    de58:	7351      	strb	r1, [r2, #13]
  NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
    de5a:	6018      	str	r0, [r3, #0]
     * DMA channels that will be automatically triggered
     ***************************************************************/
    DMAC->SWTRIGCTRL.reg &=
        ~((1UL << DMA_ADC_SEQUENCE) | (1UL << DMA_ADC_RESULTS) |
          (1UL << DMA_SERCOM0_SPI_TX) | (1UL << DMA_SERCOM0_SPI_RX) |
          (1UL << DMA_SERCOM7_SPI_TX) | (1UL << DMA_SERCOM7_SPI_RX));
    de5c:	6913      	ldr	r3, [r2, #16]
    de5e:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
    DMAC->SWTRIGCTRL.reg &=
    de62:	6113      	str	r3, [r2, #16]
}
    de64:	bc70      	pop	{r4, r5, r6}
    de66:	4770      	bx	lr
    de68:	40000800 	.word	0x40000800
    de6c:	4100a000 	.word	0x4100a000
    de70:	e000e100 	.word	0xe000e100
    de74:	20001ee0 	.word	0x20001ee0
    de78:	20001f40 	.word	0x20001f40

0000de7c <_ZN9ClearCore10DmaManager7ChannelENS_11DmaChannelsE>:

DmacChannel *DmaManager::Channel(DmaChannels index) {
    if (index >= DMA_CHANNEL_COUNT) {
    de7c:	2805      	cmp	r0, #5
        return NULL;
    }
    return &DMAC->Channel[index];
    de7e:	bfda      	itte	le
    de80:	4b02      	ldrle	r3, [pc, #8]	; (de8c <_ZN9ClearCore10DmaManager7ChannelENS_11DmaChannelsE+0x10>)
    de82:	eb03 1000 	addle.w	r0, r3, r0, lsl #4
        return NULL;
    de86:	2000      	movgt	r0, #0
}
    de88:	4770      	bx	lr
    de8a:	bf00      	nop
    de8c:	4100a040 	.word	0x4100a040

0000de90 <_ZN9ClearCore10DmaManager14BaseDescriptorENS_11DmaChannelsE>:

DmacDescriptor *DmaManager::BaseDescriptor(DmaChannels index) {
    if (index >= DMA_CHANNEL_COUNT) {
    de90:	2805      	cmp	r0, #5
        return NULL;
    }
    return &descriptorBase[index];
    de92:	bfda      	itte	le
    de94:	4b02      	ldrle	r3, [pc, #8]	; (dea0 <_ZN9ClearCore10DmaManager14BaseDescriptorENS_11DmaChannelsE+0x10>)
    de96:	eb03 1000 	addle.w	r0, r3, r0, lsl #4
        return NULL;
    de9a:	2000      	movgt	r0, #0
}
    de9c:	4770      	bx	lr
    de9e:	bf00      	nop
    dea0:	20001ee0 	.word	0x20001ee0

0000dea4 <_GLOBAL__sub_I__ZN9ClearCore10DmaManager19writeBackDescriptorE>:

    dea4:	b508      	push	{r3, lr}
DmaManager &DmaMgr = DmaManager::Instance();
    dea6:	f7ff ffa3 	bl	ddf0 <_ZN9ClearCore10DmaManager8InstanceEv>
    deaa:	4b01      	ldr	r3, [pc, #4]	; (deb0 <_GLOBAL__sub_I__ZN9ClearCore10DmaManager19writeBackDescriptorE+0xc>)
    deac:	6018      	str	r0, [r3, #0]
    deae:	bd08      	pop	{r3, pc}
    deb0:	20001fa0 	.word	0x20001fa0

0000deb4 <_ZN9ClearCore16CcioBoardManager12CcioDiscoverEPNS_12SerialDriverE.part.1>:
    else {
        m_pulseStopPending |= pinMask;
    }
}

uint8_t CcioBoardManager::CcioDiscover(SerialDriver *comInstance) {
    deb4:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    deb8:	4604      	mov	r4, r0
    deba:	4267      	negs	r7, r4
    debc:	f007 0703 	and.w	r7, r7, #3
        m_faultLed = ShiftRegister::Masks::SR_NO_FEEDBACK_MASK;
        m_lastDiscoverTime = tickCnt;
        return 0;
    }

    m_faultLed = m_serPort->m_ledMask;
    dec0:	f8d1 314c 	ldr.w	r3, [r1, #332]	; 0x14c
    dec4:	f8c0 30c0 	str.w	r3, [r0, #192]	; 0xc0
    dec8:	f1c7 090d 	rsb	r9, r7, #13

    m_serPort->SpiSsMode(SerialBase::CtrlLineModes::LINE_ON);
    decc:	4608      	mov	r0, r1
    dece:	ea4f 0999 	mov.w	r9, r9, lsr #2
    ded2:	2101      	movs	r1, #1
    ded4:	f003 f950 	bl	11178 <_ZN9ClearCore10SerialBase9SpiSsModeENS0_13CtrlLineModesE>
    ded8:	f109 0901 	add.w	r9, r9, #1
    bool flush0Success = false;
    dedc:	2600      	movs	r6, #0
    bool sendData = true;
    dede:	2201      	movs	r2, #1
    dee0:	f894 3024 	ldrb.w	r3, [r4, #36]	; 0x24
    dee4:	ea4f 0a89 	mov.w	sl, r9, lsl #2
    dee8:	f1c7 0b11 	rsb	fp, r7, #17
    uint8_t flushCnt = 0;
    deec:	4635      	mov	r5, r6
                }
                else {
                    // Check if any 1's got through, otherwise resend 1s
                    if (!AllEntriesEqual(m_readBuf.buf8,
                                         2 * MAX_CCIO_DEVICES, 0)) {
                        m_discoverState = CCIO_TEST;
    deee:	4690      	mov	r8, r2
    def0:	2b02      	cmp	r3, #2
    def2:	f000 821b 	beq.w	e32c <_ZN9ClearCore16CcioBoardManager12CcioDiscoverEPNS_12SerialDriverE.part.1+0x478>
    def6:	2d03      	cmp	r5, #3
    def8:	f300 8159 	bgt.w	e1ae <_ZN9ClearCore16CcioBoardManager12CcioDiscoverEPNS_12SerialDriverE.part.1+0x2fa>
        switch (m_discoverState) {
    defc:	b1a3      	cbz	r3, df28 <_ZN9ClearCore16CcioBoardManager12CcioDiscoverEPNS_12SerialDriverE.part.1+0x74>
    defe:	2b01      	cmp	r3, #1
    df00:	d1fc      	bne.n	defc <_ZN9ClearCore16CcioBoardManager12CcioDiscoverEPNS_12SerialDriverE.part.1+0x48>
                    flushCnt++;
                    sendData = true;
                }
                break;
            case CCIO_TEST:
                if (sendData) {
    df02:	b1da      	cbz	r2, df3c <_ZN9ClearCore16CcioBoardManager12CcioDiscoverEPNS_12SerialDriverE.part.1+0x88>
                    if (!flush0Success) {
    df04:	2e00      	cmp	r6, #0
    df06:	f040 808d 	bne.w	e024 <_ZN9ClearCore16CcioBoardManager12CcioDiscoverEPNS_12SerialDriverE.part.1+0x170>
        Fill a buffer with len bytes of the given val
    */
    static void FillBuffer(uint8_t *buf, uint8_t len, uint8_t val) {
        uint8_t i;
        for (i = 0; i < len; i++) {
            *buf++ = val;
    df0a:	6026      	str	r6, [r4, #0]
    df0c:	6066      	str	r6, [r4, #4]
    df0e:	60a6      	str	r6, [r4, #8]
    df10:	60e6      	str	r6, [r4, #12]
                        // Attempt to flush with 0's
                        FillBuffer(m_writeBuf.buf8, 2 * MAX_CCIO_DEVICES, 0);
                        m_serPort->SpiTransferData(m_writeBuf.buf8,
                                                   m_readBuf.buf8,
                                                   2 * MAX_CCIO_DEVICES);
    df12:	2310      	movs	r3, #16
                        // CCIOs
                        FillBuffer(m_writeBuf.buf8,
                                   2 * MAX_CCIO_DEVICES + 1, 0xaa);
                        m_serPort->SpiTransferData(m_writeBuf.buf8,
                                                   m_readBuf.buf8,
                                                   2 * MAX_CCIO_DEVICES + 1);
    df14:	f104 0212 	add.w	r2, r4, #18
    df18:	4621      	mov	r1, r4
    df1a:	6aa0      	ldr	r0, [r4, #40]	; 0x28
    df1c:	f003 f9d6 	bl	112cc <_ZN9ClearCore10SerialBase15SpiTransferDataEPKhPhl>
    df20:	f894 3024 	ldrb.w	r3, [r4, #36]	; 0x24
    df24:	2200      	movs	r2, #0
    df26:	e7e3      	b.n	def0 <_ZN9ClearCore16CcioBoardManager12CcioDiscoverEPNS_12SerialDriverE.part.1+0x3c>
                if (sendData) {
    df28:	2a00      	cmp	r2, #0
    df2a:	d053      	beq.n	dfd4 <_ZN9ClearCore16CcioBoardManager12CcioDiscoverEPNS_12SerialDriverE.part.1+0x120>
    df2c:	f04f 33ff 	mov.w	r3, #4294967295
    df30:	6023      	str	r3, [r4, #0]
    df32:	6063      	str	r3, [r4, #4]
    df34:	60a3      	str	r3, [r4, #8]
    df36:	60e3      	str	r3, [r4, #12]
                                               2 * MAX_CCIO_DEVICES);
    df38:	2310      	movs	r3, #16
    df3a:	e7eb      	b.n	df14 <_ZN9ClearCore16CcioBoardManager12CcioDiscoverEPNS_12SerialDriverE.part.1+0x60>
                    }
                    sendData = false;
                }
                else {
                    if (!flush0Success) {
    df3c:	2e00      	cmp	r6, #0
    df3e:	f040 80a2 	bne.w	e086 <_ZN9ClearCore16CcioBoardManager12CcioDiscoverEPNS_12SerialDriverE.part.1+0x1d2>
        Return true if all entries are equal to val
    */
    static bool AllEntriesEqual(const uint8_t *buf, uint8_t len, uint8_t val) {
        uint8_t i;
        for (i = 0; i < len; i++) {
            if (buf[i] != val) {
    df42:	7ca2      	ldrb	r2, [r4, #18]
    df44:	2aff      	cmp	r2, #255	; 0xff
    df46:	f040 8128 	bne.w	e19a <_ZN9ClearCore16CcioBoardManager12CcioDiscoverEPNS_12SerialDriverE.part.1+0x2e6>
    df4a:	7ce2      	ldrb	r2, [r4, #19]
    df4c:	2aff      	cmp	r2, #255	; 0xff
    df4e:	f040 8124 	bne.w	e19a <_ZN9ClearCore16CcioBoardManager12CcioDiscoverEPNS_12SerialDriverE.part.1+0x2e6>
    df52:	7d22      	ldrb	r2, [r4, #20]
    df54:	2aff      	cmp	r2, #255	; 0xff
    df56:	f040 8120 	bne.w	e19a <_ZN9ClearCore16CcioBoardManager12CcioDiscoverEPNS_12SerialDriverE.part.1+0x2e6>
    df5a:	7d62      	ldrb	r2, [r4, #21]
    df5c:	2aff      	cmp	r2, #255	; 0xff
    df5e:	f040 811c 	bne.w	e19a <_ZN9ClearCore16CcioBoardManager12CcioDiscoverEPNS_12SerialDriverE.part.1+0x2e6>
    df62:	7da2      	ldrb	r2, [r4, #22]
    df64:	2aff      	cmp	r2, #255	; 0xff
    df66:	f040 8118 	bne.w	e19a <_ZN9ClearCore16CcioBoardManager12CcioDiscoverEPNS_12SerialDriverE.part.1+0x2e6>
    df6a:	7de2      	ldrb	r2, [r4, #23]
    df6c:	2aff      	cmp	r2, #255	; 0xff
    df6e:	f040 8114 	bne.w	e19a <_ZN9ClearCore16CcioBoardManager12CcioDiscoverEPNS_12SerialDriverE.part.1+0x2e6>
    df72:	7e22      	ldrb	r2, [r4, #24]
    df74:	2aff      	cmp	r2, #255	; 0xff
    df76:	f040 8110 	bne.w	e19a <_ZN9ClearCore16CcioBoardManager12CcioDiscoverEPNS_12SerialDriverE.part.1+0x2e6>
    df7a:	7e62      	ldrb	r2, [r4, #25]
    df7c:	2aff      	cmp	r2, #255	; 0xff
    df7e:	f040 810c 	bne.w	e19a <_ZN9ClearCore16CcioBoardManager12CcioDiscoverEPNS_12SerialDriverE.part.1+0x2e6>
    df82:	7ea2      	ldrb	r2, [r4, #26]
    df84:	2aff      	cmp	r2, #255	; 0xff
    df86:	f040 8108 	bne.w	e19a <_ZN9ClearCore16CcioBoardManager12CcioDiscoverEPNS_12SerialDriverE.part.1+0x2e6>
    df8a:	7ee2      	ldrb	r2, [r4, #27]
    df8c:	2aff      	cmp	r2, #255	; 0xff
    df8e:	f040 8104 	bne.w	e19a <_ZN9ClearCore16CcioBoardManager12CcioDiscoverEPNS_12SerialDriverE.part.1+0x2e6>
    df92:	7f22      	ldrb	r2, [r4, #28]
    df94:	2aff      	cmp	r2, #255	; 0xff
    df96:	f040 8100 	bne.w	e19a <_ZN9ClearCore16CcioBoardManager12CcioDiscoverEPNS_12SerialDriverE.part.1+0x2e6>
    df9a:	7f62      	ldrb	r2, [r4, #29]
    df9c:	2aff      	cmp	r2, #255	; 0xff
    df9e:	f040 80fc 	bne.w	e19a <_ZN9ClearCore16CcioBoardManager12CcioDiscoverEPNS_12SerialDriverE.part.1+0x2e6>
    dfa2:	7fa2      	ldrb	r2, [r4, #30]
    dfa4:	2aff      	cmp	r2, #255	; 0xff
    dfa6:	f040 80f8 	bne.w	e19a <_ZN9ClearCore16CcioBoardManager12CcioDiscoverEPNS_12SerialDriverE.part.1+0x2e6>
    dfaa:	7fe2      	ldrb	r2, [r4, #31]
    dfac:	2aff      	cmp	r2, #255	; 0xff
    dfae:	f040 80f4 	bne.w	e19a <_ZN9ClearCore16CcioBoardManager12CcioDiscoverEPNS_12SerialDriverE.part.1+0x2e6>
    dfb2:	f894 2020 	ldrb.w	r2, [r4, #32]
    dfb6:	2aff      	cmp	r2, #255	; 0xff
    dfb8:	f040 80ef 	bne.w	e19a <_ZN9ClearCore16CcioBoardManager12CcioDiscoverEPNS_12SerialDriverE.part.1+0x2e6>
    dfbc:	f894 6021 	ldrb.w	r6, [r4, #33]	; 0x21
    dfc0:	3eff      	subs	r6, #255	; 0xff
    dfc2:	bf18      	it	ne
    dfc4:	2601      	movne	r6, #1
                        // resend 0's.
                        if (!AllEntriesEqual(m_readBuf.buf8,
                                             2 * MAX_CCIO_DEVICES, 0xff)) {
                            flush0Success = true;
                        }
                        flushCnt++;
    dfc6:	3501      	adds	r5, #1
    dfc8:	b2ed      	uxtb	r5, r5
    dfca:	2d03      	cmp	r5, #3
    dfcc:	f04f 0201 	mov.w	r2, #1
    dfd0:	dd94      	ble.n	defc <_ZN9ClearCore16CcioBoardManager12CcioDiscoverEPNS_12SerialDriverE.part.1+0x48>
    dfd2:	e0ec      	b.n	e1ae <_ZN9ClearCore16CcioBoardManager12CcioDiscoverEPNS_12SerialDriverE.part.1+0x2fa>
    dfd4:	7ca2      	ldrb	r2, [r4, #18]
    dfd6:	bb02      	cbnz	r2, e01a <_ZN9ClearCore16CcioBoardManager12CcioDiscoverEPNS_12SerialDriverE.part.1+0x166>
    dfd8:	7ce2      	ldrb	r2, [r4, #19]
    dfda:	b9f2      	cbnz	r2, e01a <_ZN9ClearCore16CcioBoardManager12CcioDiscoverEPNS_12SerialDriverE.part.1+0x166>
    dfdc:	7d22      	ldrb	r2, [r4, #20]
    dfde:	b9e2      	cbnz	r2, e01a <_ZN9ClearCore16CcioBoardManager12CcioDiscoverEPNS_12SerialDriverE.part.1+0x166>
    dfe0:	7d62      	ldrb	r2, [r4, #21]
    dfe2:	b9d2      	cbnz	r2, e01a <_ZN9ClearCore16CcioBoardManager12CcioDiscoverEPNS_12SerialDriverE.part.1+0x166>
    dfe4:	7da2      	ldrb	r2, [r4, #22]
    dfe6:	b9c2      	cbnz	r2, e01a <_ZN9ClearCore16CcioBoardManager12CcioDiscoverEPNS_12SerialDriverE.part.1+0x166>
    dfe8:	7de2      	ldrb	r2, [r4, #23]
    dfea:	b9b2      	cbnz	r2, e01a <_ZN9ClearCore16CcioBoardManager12CcioDiscoverEPNS_12SerialDriverE.part.1+0x166>
    dfec:	7e22      	ldrb	r2, [r4, #24]
    dfee:	b9a2      	cbnz	r2, e01a <_ZN9ClearCore16CcioBoardManager12CcioDiscoverEPNS_12SerialDriverE.part.1+0x166>
    dff0:	7e62      	ldrb	r2, [r4, #25]
    dff2:	b992      	cbnz	r2, e01a <_ZN9ClearCore16CcioBoardManager12CcioDiscoverEPNS_12SerialDriverE.part.1+0x166>
    dff4:	7ea2      	ldrb	r2, [r4, #26]
    dff6:	b982      	cbnz	r2, e01a <_ZN9ClearCore16CcioBoardManager12CcioDiscoverEPNS_12SerialDriverE.part.1+0x166>
    dff8:	7ee2      	ldrb	r2, [r4, #27]
    dffa:	b972      	cbnz	r2, e01a <_ZN9ClearCore16CcioBoardManager12CcioDiscoverEPNS_12SerialDriverE.part.1+0x166>
    dffc:	7f22      	ldrb	r2, [r4, #28]
    dffe:	b962      	cbnz	r2, e01a <_ZN9ClearCore16CcioBoardManager12CcioDiscoverEPNS_12SerialDriverE.part.1+0x166>
    e000:	7f62      	ldrb	r2, [r4, #29]
    e002:	b952      	cbnz	r2, e01a <_ZN9ClearCore16CcioBoardManager12CcioDiscoverEPNS_12SerialDriverE.part.1+0x166>
    e004:	7fa2      	ldrb	r2, [r4, #30]
    e006:	b942      	cbnz	r2, e01a <_ZN9ClearCore16CcioBoardManager12CcioDiscoverEPNS_12SerialDriverE.part.1+0x166>
    e008:	7fe2      	ldrb	r2, [r4, #31]
    e00a:	b932      	cbnz	r2, e01a <_ZN9ClearCore16CcioBoardManager12CcioDiscoverEPNS_12SerialDriverE.part.1+0x166>
    e00c:	f894 2020 	ldrb.w	r2, [r4, #32]
    e010:	b91a      	cbnz	r2, e01a <_ZN9ClearCore16CcioBoardManager12CcioDiscoverEPNS_12SerialDriverE.part.1+0x166>
    e012:	f894 2021 	ldrb.w	r2, [r4, #33]	; 0x21
    e016:	2a00      	cmp	r2, #0
    e018:	d0d5      	beq.n	dfc6 <_ZN9ClearCore16CcioBoardManager12CcioDiscoverEPNS_12SerialDriverE.part.1+0x112>
                        m_discoverState = CCIO_TEST;
    e01a:	f884 8024 	strb.w	r8, [r4, #36]	; 0x24
    e01e:	2501      	movs	r5, #1
                        flush0Success = false;
    e020:	2600      	movs	r6, #0
    e022:	e772      	b.n	df0a <_ZN9ClearCore16CcioBoardManager12CcioDiscoverEPNS_12SerialDriverE.part.1+0x56>
    e024:	2f00      	cmp	r7, #0
    e026:	f000 80ba 	beq.w	e19e <_ZN9ClearCore16CcioBoardManager12CcioDiscoverEPNS_12SerialDriverE.part.1+0x2ea>
            *buf++ = val;
    e02a:	23aa      	movs	r3, #170	; 0xaa
    e02c:	2f01      	cmp	r7, #1
    e02e:	7023      	strb	r3, [r4, #0]
    e030:	f104 0101 	add.w	r1, r4, #1
    e034:	f000 80db 	beq.w	e1ee <_ZN9ClearCore16CcioBoardManager12CcioDiscoverEPNS_12SerialDriverE.part.1+0x33a>
    e038:	2f02      	cmp	r7, #2
    e03a:	7063      	strb	r3, [r4, #1]
    e03c:	f104 0102 	add.w	r1, r4, #2
    e040:	f000 80d3 	beq.w	e1ea <_ZN9ClearCore16CcioBoardManager12CcioDiscoverEPNS_12SerialDriverE.part.1+0x336>
    e044:	70a3      	strb	r3, [r4, #2]
    e046:	1ce1      	adds	r1, r4, #3
    e048:	220e      	movs	r2, #14
    e04a:	f04f 33aa 	mov.w	r3, #2863311530	; 0xaaaaaaaa
    e04e:	51e3      	str	r3, [r4, r7]
    e050:	19e3      	adds	r3, r4, r7
    e052:	3304      	adds	r3, #4
    e054:	f04f 30aa 	mov.w	r0, #2863311530	; 0xaaaaaaaa
    e058:	f1b9 0f03 	cmp.w	r9, #3
    e05c:	6018      	str	r0, [r3, #0]
    e05e:	6058      	str	r0, [r3, #4]
    e060:	d000      	beq.n	e064 <_ZN9ClearCore16CcioBoardManager12CcioDiscoverEPNS_12SerialDriverE.part.1+0x1b0>
    e062:	6098      	str	r0, [r3, #8]
    e064:	45d3      	cmp	fp, sl
    e066:	eba2 020a 	sub.w	r2, r2, sl
    e06a:	eb01 000a 	add.w	r0, r1, sl
    e06e:	d008      	beq.n	e082 <_ZN9ClearCore16CcioBoardManager12CcioDiscoverEPNS_12SerialDriverE.part.1+0x1ce>
    e070:	23aa      	movs	r3, #170	; 0xaa
        for (i = 0; i < len; i++) {
    e072:	2a01      	cmp	r2, #1
            *buf++ = val;
    e074:	f801 300a 	strb.w	r3, [r1, sl]
        for (i = 0; i < len; i++) {
    e078:	d003      	beq.n	e082 <_ZN9ClearCore16CcioBoardManager12CcioDiscoverEPNS_12SerialDriverE.part.1+0x1ce>
    e07a:	2a02      	cmp	r2, #2
            *buf++ = val;
    e07c:	7043      	strb	r3, [r0, #1]
        for (i = 0; i < len; i++) {
    e07e:	d000      	beq.n	e082 <_ZN9ClearCore16CcioBoardManager12CcioDiscoverEPNS_12SerialDriverE.part.1+0x1ce>
            *buf++ = val;
    e080:	7083      	strb	r3, [r0, #2]
                                                   2 * MAX_CCIO_DEVICES + 1);
    e082:	2311      	movs	r3, #17
    e084:	e746      	b.n	df14 <_ZN9ClearCore16CcioBoardManager12CcioDiscoverEPNS_12SerialDriverE.part.1+0x60>
                    else {
                        uint8_t i;
                        bool foundAA = false;
                        // Count until we see a's
                        for (i = 0; i < 2 * MAX_CCIO_DEVICES && !foundAA; i++) {
                            if (m_readBuf.buf8[i] == 0xaa) {
    e086:	7ca1      	ldrb	r1, [r4, #18]
    e088:	29aa      	cmp	r1, #170	; 0xaa
    e08a:	f000 80aa 	beq.w	e1e2 <_ZN9ClearCore16CcioBoardManager12CcioDiscoverEPNS_12SerialDriverE.part.1+0x32e>
    e08e:	7ce2      	ldrb	r2, [r4, #19]
    e090:	2aaa      	cmp	r2, #170	; 0xaa
    e092:	d040      	beq.n	e116 <_ZN9ClearCore16CcioBoardManager12CcioDiscoverEPNS_12SerialDriverE.part.1+0x262>
    e094:	7d23      	ldrb	r3, [r4, #20]
    e096:	2baa      	cmp	r3, #170	; 0xaa
    e098:	f000 80a5 	beq.w	e1e6 <_ZN9ClearCore16CcioBoardManager12CcioDiscoverEPNS_12SerialDriverE.part.1+0x332>
    e09c:	7d63      	ldrb	r3, [r4, #21]
    e09e:	2baa      	cmp	r3, #170	; 0xaa
    e0a0:	f000 80a7 	beq.w	e1f2 <_ZN9ClearCore16CcioBoardManager12CcioDiscoverEPNS_12SerialDriverE.part.1+0x33e>
    e0a4:	7da3      	ldrb	r3, [r4, #22]
    e0a6:	2baa      	cmp	r3, #170	; 0xaa
    e0a8:	f000 8118 	beq.w	e2dc <_ZN9ClearCore16CcioBoardManager12CcioDiscoverEPNS_12SerialDriverE.part.1+0x428>
    e0ac:	7de3      	ldrb	r3, [r4, #23]
    e0ae:	2baa      	cmp	r3, #170	; 0xaa
    e0b0:	f000 80a1 	beq.w	e1f6 <_ZN9ClearCore16CcioBoardManager12CcioDiscoverEPNS_12SerialDriverE.part.1+0x342>
    e0b4:	7e23      	ldrb	r3, [r4, #24]
    e0b6:	2baa      	cmp	r3, #170	; 0xaa
    e0b8:	f000 8112 	beq.w	e2e0 <_ZN9ClearCore16CcioBoardManager12CcioDiscoverEPNS_12SerialDriverE.part.1+0x42c>
    e0bc:	7e63      	ldrb	r3, [r4, #25]
    e0be:	2baa      	cmp	r3, #170	; 0xaa
    e0c0:	f000 8110 	beq.w	e2e4 <_ZN9ClearCore16CcioBoardManager12CcioDiscoverEPNS_12SerialDriverE.part.1+0x430>
    e0c4:	7ea3      	ldrb	r3, [r4, #26]
    e0c6:	2baa      	cmp	r3, #170	; 0xaa
    e0c8:	f000 810e 	beq.w	e2e8 <_ZN9ClearCore16CcioBoardManager12CcioDiscoverEPNS_12SerialDriverE.part.1+0x434>
    e0cc:	7ee3      	ldrb	r3, [r4, #27]
    e0ce:	2baa      	cmp	r3, #170	; 0xaa
    e0d0:	f000 8102 	beq.w	e2d8 <_ZN9ClearCore16CcioBoardManager12CcioDiscoverEPNS_12SerialDriverE.part.1+0x424>
    e0d4:	7f23      	ldrb	r3, [r4, #28]
    e0d6:	2baa      	cmp	r3, #170	; 0xaa
    e0d8:	f000 8108 	beq.w	e2ec <_ZN9ClearCore16CcioBoardManager12CcioDiscoverEPNS_12SerialDriverE.part.1+0x438>
    e0dc:	7f63      	ldrb	r3, [r4, #29]
    e0de:	2baa      	cmp	r3, #170	; 0xaa
    e0e0:	f000 811c 	beq.w	e31c <_ZN9ClearCore16CcioBoardManager12CcioDiscoverEPNS_12SerialDriverE.part.1+0x468>
    e0e4:	7fa3      	ldrb	r3, [r4, #30]
    e0e6:	2baa      	cmp	r3, #170	; 0xaa
    e0e8:	f000 811a 	beq.w	e320 <_ZN9ClearCore16CcioBoardManager12CcioDiscoverEPNS_12SerialDriverE.part.1+0x46c>
    e0ec:	7fe3      	ldrb	r3, [r4, #31]
    e0ee:	2baa      	cmp	r3, #170	; 0xaa
    e0f0:	f000 8118 	beq.w	e324 <_ZN9ClearCore16CcioBoardManager12CcioDiscoverEPNS_12SerialDriverE.part.1+0x470>
    e0f4:	f894 3020 	ldrb.w	r3, [r4, #32]
    e0f8:	2baa      	cmp	r3, #170	; 0xaa
    e0fa:	f000 8115 	beq.w	e328 <_ZN9ClearCore16CcioBoardManager12CcioDiscoverEPNS_12SerialDriverE.part.1+0x474>
    e0fe:	f894 3021 	ldrb.w	r3, [r4, #33]	; 0x21
    e102:	2baa      	cmp	r3, #170	; 0xaa
    e104:	f000 8108 	beq.w	e318 <_ZN9ClearCore16CcioBoardManager12CcioDiscoverEPNS_12SerialDriverE.part.1+0x464>
                            }
                            else {
                                numFound++;
                            }
                        }
                        if (!foundAA &&
    e108:	f894 3022 	ldrb.w	r3, [r4, #34]	; 0x22
    e10c:	2baa      	cmp	r3, #170	; 0xaa
                                numFound++;
    e10e:	bf08      	it	eq
    e110:	2310      	moveq	r3, #16
                        if (!foundAA &&
    e112:	f040 80ed 	bne.w	e2f0 <_ZN9ClearCore16CcioBoardManager12CcioDiscoverEPNS_12SerialDriverE.part.1+0x43c>
            buf64.writeMarker = 0;
    e116:	2200      	movs	r2, #0
                                                false);
                            m_lastDiscoverTime = tickCnt;
                            return 0;
                        }
                        // Break from loop
                        m_discoverState = CCIO_FOUND;
    e118:	2502      	movs	r5, #2
    e11a:	f884 5024 	strb.w	r5, [r4, #36]	; 0x24
    e11e:	74a2      	strb	r2, [r4, #18]
            buf64.inputs = 0;
    e120:	74e2      	strb	r2, [r4, #19]
    e122:	7522      	strb	r2, [r4, #20]
    e124:	7562      	strb	r2, [r4, #21]
    e126:	75a2      	strb	r2, [r4, #22]
    e128:	75e2      	strb	r2, [r4, #23]
    e12a:	7622      	strb	r2, [r4, #24]
    e12c:	7662      	strb	r2, [r4, #25]
    e12e:	76a2      	strb	r2, [r4, #26]
            buf64.outputsSwapped = 0;
    e130:	76e2      	strb	r2, [r4, #27]
    e132:	7722      	strb	r2, [r4, #28]
    e134:	7762      	strb	r2, [r4, #29]
    e136:	77a2      	strb	r2, [r4, #30]
    e138:	77e2      	strb	r2, [r4, #31]
    e13a:	f884 2020 	strb.w	r2, [r4, #32]
    e13e:	f884 2021 	strb.w	r2, [r4, #33]	; 0x21
    e142:	f884 2022 	strb.w	r2, [r4, #34]	; 0x22
            buf64.readMarker = 0;
    e146:	f884 2023 	strb.w	r2, [r4, #35]	; 0x23
        }
    }

    // numFound is the number of input and output regs found
    // so divide by 2 to get CCIO-8 count
    numFound >>= 1;
    e14a:	105b      	asrs	r3, r3, #1
    e14c:	b2dd      	uxtb	r5, r3
    m_ccioCnt = numFound;
    m_ccioMask = (1 << (m_ccioCnt * CCIO_PINS_PER_BOARD)) - 1;
    e14e:	2701      	movs	r7, #1
    e150:	00da      	lsls	r2, r3, #3
    m_ccioCnt = numFound;
    e152:	f884 502c 	strb.w	r5, [r4, #44]	; 0x2c
    m_ccioMask = (1 << (m_ccioCnt * CCIO_PINS_PER_BOARD)) - 1;
    e156:	fa07 f202 	lsl.w	r2, r7, r2
        uint8_t cnt = CcioCount();
    e15a:	f894 602c 	ldrb.w	r6, [r4, #44]	; 0x2c
    e15e:	3a01      	subs	r2, #1
    e160:	4610      	mov	r0, r2
    e162:	17d1      	asrs	r1, r2, #31
    e164:	b2f2      	uxtb	r2, r6
        return (cnt > 1) ? (cnt >> 1) : 1;
    e166:	42ba      	cmp	r2, r7
    e168:	bfc8      	it	gt
    e16a:	fa42 f707 	asrgt.w	r7, r2, r7
    e16e:	e9c4 011c 	strd	r0, r1, [r4, #112]	; 0x70
    m_ccioRefreshRate = RefreshRate();
    e172:	f884 702d 	strb.w	r7, [r4, #45]	; 0x2d

    if (numFound != 0) {
    e176:	2b00      	cmp	r3, #0
    e178:	d13f      	bne.n	e1fa <_ZN9ClearCore16CcioBoardManager12CcioDiscoverEPNS_12SerialDriverE.part.1+0x346>
    e17a:	4b6d      	ldr	r3, [pc, #436]	; (e330 <_ZN9ClearCore16CcioBoardManager12CcioDiscoverEPNS_12SerialDriverE.part.1+0x47c>)
        m_ccioOverloaded = 0;
        m_ccioLinkBroken = false;
        ShiftReg.LedInFault(m_faultLed, m_ccioOverloaded);
    }

    ShiftReg.LedPattern(m_faultLed,
    e17c:	f8d4 10c0 	ldr.w	r1, [r4, #192]	; 0xc0
                                           : m_patternMasks[pattern] &= ~ledMask;
    e180:	f8d3 20ec 	ldr.w	r2, [r3, #236]	; 0xec
    e184:	43c9      	mvns	r1, r1
    e186:	4011      	ands	r1, r2
                        ShiftRegister::LED_BLINK_CCIO_ONLINE,
                        !m_ccioLinkBroken && !m_ccioOverloaded &&
                        (numFound > 0));

    m_lastDiscoverTime = tickCnt;
    e188:	4a6a      	ldr	r2, [pc, #424]	; (e334 <_ZN9ClearCore16CcioBoardManager12CcioDiscoverEPNS_12SerialDriverE.part.1+0x480>)
    e18a:	f8c3 10ec 	str.w	r1, [r3, #236]	; 0xec
    e18e:	6813      	ldr	r3, [r2, #0]
    e190:	f8c4 30c8 	str.w	r3, [r4, #200]	; 0xc8
    return numFound;
}
    e194:	4628      	mov	r0, r5
    e196:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
                            flush0Success = true;
    e19a:	2601      	movs	r6, #1
    e19c:	e713      	b.n	dfc6 <_ZN9ClearCore16CcioBoardManager12CcioDiscoverEPNS_12SerialDriverE.part.1+0x112>
            *buf++ = val;
    e19e:	4623      	mov	r3, r4
    e1a0:	f04f 32aa 	mov.w	r2, #2863311530	; 0xaaaaaaaa
    e1a4:	f843 2b04 	str.w	r2, [r3], #4
                        FillBuffer(m_writeBuf.buf8,
    e1a8:	4621      	mov	r1, r4
    e1aa:	2211      	movs	r2, #17
    e1ac:	e752      	b.n	e054 <_ZN9ClearCore16CcioBoardManager12CcioDiscoverEPNS_12SerialDriverE.part.1+0x1a0>
            StatusMgr.BlinkCode(
    e1ae:	4a62      	ldr	r2, [pc, #392]	; (e338 <_ZN9ClearCore16CcioBoardManager12CcioDiscoverEPNS_12SerialDriverE.part.1+0x484>)
                                BlinkCodeDriver::DEVICE_ERROR_CCIO);
    e1b0:	6810      	ldr	r0, [r2, #0]
                            m_ccioLinkBroken = true;
    e1b2:	2301      	movs	r3, #1
    e1b4:	f884 3092 	strb.w	r3, [r4, #146]	; 0x92
                                BlinkCodeDriver::DEVICE_ERROR_CCIO);
    e1b8:	2208      	movs	r2, #8
    e1ba:	2102      	movs	r1, #2
    e1bc:	f003 fcd2 	bl	11b64 <_ZN9ClearCore13StatusManager9BlinkCodeENS_15BlinkCodeDriver15BlinkCodeGroupsEh>
    e1c0:	4a5b      	ldr	r2, [pc, #364]	; (e330 <_ZN9ClearCore16CcioBoardManager12CcioDiscoverEPNS_12SerialDriverE.part.1+0x47c>)
    e1c2:	f8d4 00c0 	ldr.w	r0, [r4, #192]	; 0xc0
    e1c6:	f8d2 30ec 	ldr.w	r3, [r2, #236]	; 0xec
                            m_lastDiscoverTime = tickCnt;
    e1ca:	495a      	ldr	r1, [pc, #360]	; (e334 <_ZN9ClearCore16CcioBoardManager12CcioDiscoverEPNS_12SerialDriverE.part.1+0x480>)
    e1cc:	ea23 0300 	bic.w	r3, r3, r0
    e1d0:	6809      	ldr	r1, [r1, #0]
    e1d2:	f8c2 30ec 	str.w	r3, [r2, #236]	; 0xec
                            return 0;
    e1d6:	2500      	movs	r5, #0
                            m_lastDiscoverTime = tickCnt;
    e1d8:	f8c4 10c8 	str.w	r1, [r4, #200]	; 0xc8
}
    e1dc:	4628      	mov	r0, r5
    e1de:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
                            if (m_readBuf.buf8[i] == 0xaa) {
    e1e2:	4613      	mov	r3, r2
    e1e4:	e797      	b.n	e116 <_ZN9ClearCore16CcioBoardManager12CcioDiscoverEPNS_12SerialDriverE.part.1+0x262>
                                numFound++;
    e1e6:	2302      	movs	r3, #2
    e1e8:	e795      	b.n	e116 <_ZN9ClearCore16CcioBoardManager12CcioDiscoverEPNS_12SerialDriverE.part.1+0x262>
    e1ea:	220f      	movs	r2, #15
    e1ec:	e72d      	b.n	e04a <_ZN9ClearCore16CcioBoardManager12CcioDiscoverEPNS_12SerialDriverE.part.1+0x196>
    e1ee:	2210      	movs	r2, #16
    e1f0:	e72b      	b.n	e04a <_ZN9ClearCore16CcioBoardManager12CcioDiscoverEPNS_12SerialDriverE.part.1+0x196>
    e1f2:	2303      	movs	r3, #3
    e1f4:	e78f      	b.n	e116 <_ZN9ClearCore16CcioBoardManager12CcioDiscoverEPNS_12SerialDriverE.part.1+0x262>
    e1f6:	2305      	movs	r3, #5
    e1f8:	e78d      	b.n	e116 <_ZN9ClearCore16CcioBoardManager12CcioDiscoverEPNS_12SerialDriverE.part.1+0x262>
            UINT64_MAX >> ((MAX_CCIO_DEVICES - m_ccioCnt) *
    e1fa:	f1c3 0108 	rsb	r1, r3, #8
    e1fe:	00ce      	lsls	r6, r1, #3
    e200:	f04f 30ff 	mov.w	r0, #4294967295
    e204:	f1c6 0220 	rsb	r2, r6, #32
    e208:	fa00 f202 	lsl.w	r2, r0, r2
    e20c:	fa20 fe06 	lsr.w	lr, r0, r6
    e210:	f1a6 0720 	sub.w	r7, r6, #32
    e214:	fa20 f707 	lsr.w	r7, r0, r7
    e218:	ea4e 0e02 	orr.w	lr, lr, r2
            buf64.writeMarker = 0;
    e21c:	4622      	mov	r2, r4
    e21e:	ea4e 0e07 	orr.w	lr, lr, r7
    e222:	40f0      	lsrs	r0, r6
    e224:	2600      	movs	r6, #0
        m_lastOutputsSwapped =
    e226:	f8c4 e058 	str.w	lr, [r4, #88]	; 0x58
    e22a:	65e0      	str	r0, [r4, #92]	; 0x5c
    e22c:	f802 6b01 	strb.w	r6, [r2], #1
        m_writeBuf.buf8[MAX_CCIO_DEVICES] = MARKER_BYTE;
    e230:	27cc      	movs	r7, #204	; 0xcc
            buf64.inputs = 0;
    e232:	7066      	strb	r6, [r4, #1]
        m_serPort->SpiTransferData(m_writeBuf.buf8 +
    e234:	f104 0812 	add.w	r8, r4, #18
    e238:	7056      	strb	r6, [r2, #1]
    e23a:	7096      	strb	r6, [r2, #2]
    e23c:	70d6      	strb	r6, [r2, #3]
    e23e:	7116      	strb	r6, [r2, #4]
    e240:	7156      	strb	r6, [r2, #5]
    e242:	7196      	strb	r6, [r2, #6]
                                   (MAX_CCIO_DEVICES - m_ccioCnt) + 1,
    e244:	f1c3 0209 	rsb	r2, r3, #9
                                   2 * m_ccioCnt + 1);
    e248:	005b      	lsls	r3, r3, #1
        m_writeBuf.buf64.outputsSwapped =
    e24a:	f8c4 e009 	str.w	lr, [r4, #9]
                                   2 * m_ccioCnt + 1);
    e24e:	4442      	add	r2, r8
    e250:	3301      	adds	r3, #1
    e252:	4421      	add	r1, r4
        m_writeBuf.buf64.outputsSwapped =
    e254:	f8c4 000d 	str.w	r0, [r4, #13]
        m_writeBuf.buf8[MAX_CCIO_DEVICES] = MARKER_BYTE;
    e258:	7227      	strb	r7, [r4, #8]
            buf64.readMarker = 0;
    e25a:	7466      	strb	r6, [r4, #17]
                                   2 * m_ccioCnt + 1);
    e25c:	6aa0      	ldr	r0, [r4, #40]	; 0x28
    e25e:	f003 f835 	bl	112cc <_ZN9ClearCore10SerialBase15SpiTransferDataEPKhPhl>
        m_serPort->SpiSsMode(SerialBase::CtrlLineModes::LINE_OFF);
    e262:	4631      	mov	r1, r6
    e264:	6aa0      	ldr	r0, [r4, #40]	; 0x28
    e266:	f002 ff87 	bl	11178 <_ZN9ClearCore10SerialBase9SpiSsModeENS0_13CtrlLineModesE>
        m_writeBuf.buf8[(MAX_CCIO_DEVICES - m_ccioCnt)] = MARKER_BYTE;
    e26a:	f894 302c 	ldrb.w	r3, [r4, #44]	; 0x2c
    e26e:	f1c3 0308 	rsb	r3, r3, #8
        m_serPort->SpiSsMode(SerialBase::CtrlLineModes::LINE_ON);
    e272:	2101      	movs	r1, #1
        m_writeBuf.buf8[(MAX_CCIO_DEVICES - m_ccioCnt)] = MARKER_BYTE;
    e274:	54e7      	strb	r7, [r4, r3]
        m_writeBuf.buf8[MAX_CCIO_DEVICES] = 0;
    e276:	7226      	strb	r6, [r4, #8]
        m_serPort->SpiSsMode(SerialBase::CtrlLineModes::LINE_ON);
    e278:	6aa0      	ldr	r0, [r4, #40]	; 0x28
    e27a:	f002 ff7d 	bl	11178 <_ZN9ClearCore10SerialBase9SpiSsModeENS0_13CtrlLineModesE>
                                   (MAX_CCIO_DEVICES - m_ccioCnt),
    e27e:	f894 302c 	ldrb.w	r3, [r4, #44]	; 0x2c
                                   2 * m_ccioCnt + 1);
    e282:	6aa0      	ldr	r0, [r4, #40]	; 0x28
                                   (MAX_CCIO_DEVICES - m_ccioCnt) + 1,
    e284:	f1c3 0209 	rsb	r2, r3, #9
                                   (MAX_CCIO_DEVICES - m_ccioCnt),
    e288:	f1c3 0108 	rsb	r1, r3, #8
                                   2 * m_ccioCnt + 1);
    e28c:	2701      	movs	r7, #1
    e28e:	4442      	add	r2, r8
    e290:	eb07 0343 	add.w	r3, r7, r3, lsl #1
    e294:	4421      	add	r1, r4
    e296:	f003 f819 	bl	112cc <_ZN9ClearCore10SerialBase15SpiTransferDataEPKhPhl>
        m_serPort->SpiSsMode(SerialBase::CtrlLineModes::LINE_OFF);
    e29a:	4631      	mov	r1, r6
    e29c:	6aa0      	ldr	r0, [r4, #40]	; 0x28
    e29e:	f002 ff6b 	bl	11178 <_ZN9ClearCore10SerialBase9SpiSsModeENS0_13CtrlLineModesE>
        m_ccioRefreshDelay = m_ccioRefreshRate;
    e2a2:	f894 202d 	ldrb.w	r2, [r4, #45]	; 0x2d
            m_patternMasks[LED_BLINK_OVERLOAD] &= ~ledMask;
    e2a6:	4b22      	ldr	r3, [pc, #136]	; (e330 <_ZN9ClearCore16CcioBoardManager12CcioDiscoverEPNS_12SerialDriverE.part.1+0x47c>)
    e2a8:	f884 202e 	strb.w	r2, [r4, #46]	; 0x2e
    e2ac:	f8d3 20f0 	ldr.w	r2, [r3, #240]	; 0xf0
        ShiftReg.LedInFault(m_faultLed, m_ccioOverloaded);
    e2b0:	f8d4 10c0 	ldr.w	r1, [r4, #192]	; 0xc0
        state ? m_patternMasks[pattern] |= ledMask
    e2b4:	f8d3 00ec 	ldr.w	r0, [r3, #236]	; 0xec
        m_consGlitchCnt = 0;
    e2b8:	f8a4 6090 	strh.w	r6, [r4, #144]	; 0x90
            m_patternMasks[LED_BLINK_OVERLOAD] &= ~ledMask;
    e2bc:	ea22 0201 	bic.w	r2, r2, r1
        m_ccioOverloaded = 0;
    e2c0:	f04f 0800 	mov.w	r8, #0
    e2c4:	f04f 0900 	mov.w	r9, #0
        m_ccioLinkBroken = false;
    e2c8:	f884 6092 	strb.w	r6, [r4, #146]	; 0x92
        m_ccioOverloaded = 0;
    e2cc:	e9c4 8926 	strd	r8, r9, [r4, #152]	; 0x98
        state ? m_patternMasks[pattern] |= ledMask
    e2d0:	4301      	orrs	r1, r0
            m_patternMasks[LED_BLINK_OVERLOAD] &= ~ledMask;
    e2d2:	f8c3 20f0 	str.w	r2, [r3, #240]	; 0xf0
    e2d6:	e757      	b.n	e188 <_ZN9ClearCore16CcioBoardManager12CcioDiscoverEPNS_12SerialDriverE.part.1+0x2d4>
                                numFound++;
    e2d8:	2309      	movs	r3, #9
    e2da:	e71c      	b.n	e116 <_ZN9ClearCore16CcioBoardManager12CcioDiscoverEPNS_12SerialDriverE.part.1+0x262>
    e2dc:	2304      	movs	r3, #4
    e2de:	e71a      	b.n	e116 <_ZN9ClearCore16CcioBoardManager12CcioDiscoverEPNS_12SerialDriverE.part.1+0x262>
    e2e0:	2306      	movs	r3, #6
    e2e2:	e718      	b.n	e116 <_ZN9ClearCore16CcioBoardManager12CcioDiscoverEPNS_12SerialDriverE.part.1+0x262>
    e2e4:	2307      	movs	r3, #7
    e2e6:	e716      	b.n	e116 <_ZN9ClearCore16CcioBoardManager12CcioDiscoverEPNS_12SerialDriverE.part.1+0x262>
    e2e8:	2308      	movs	r3, #8
    e2ea:	e714      	b.n	e116 <_ZN9ClearCore16CcioBoardManager12CcioDiscoverEPNS_12SerialDriverE.part.1+0x262>
    e2ec:	230a      	movs	r3, #10
    e2ee:	e712      	b.n	e116 <_ZN9ClearCore16CcioBoardManager12CcioDiscoverEPNS_12SerialDriverE.part.1+0x262>
                            m_ccioCnt = 0;
    e2f0:	2300      	movs	r3, #0
    e2f2:	f884 302c 	strb.w	r3, [r4, #44]	; 0x2c
        uint8_t cnt = CcioCount();
    e2f6:	f894 302c 	ldrb.w	r3, [r4, #44]	; 0x2c
                            StatusMgr.BlinkCode(
    e2fa:	4a0f      	ldr	r2, [pc, #60]	; (e338 <_ZN9ClearCore16CcioBoardManager12CcioDiscoverEPNS_12SerialDriverE.part.1+0x484>)
    e2fc:	b2db      	uxtb	r3, r3
        return (cnt > 1) ? (cnt >> 1) : 1;
    e2fe:	2b01      	cmp	r3, #1
                            m_ccioMask = 0;
    e300:	f04f 0000 	mov.w	r0, #0
    e304:	f04f 0100 	mov.w	r1, #0
    e308:	bfcc      	ite	gt
    e30a:	105b      	asrgt	r3, r3, #1
    e30c:	2301      	movle	r3, #1
    e30e:	e9c4 011c 	strd	r0, r1, [r4, #112]	; 0x70
                            m_ccioRefreshRate = RefreshRate();
    e312:	f884 302d 	strb.w	r3, [r4, #45]	; 0x2d
    e316:	e74b      	b.n	e1b0 <_ZN9ClearCore16CcioBoardManager12CcioDiscoverEPNS_12SerialDriverE.part.1+0x2fc>
                                numFound++;
    e318:	230f      	movs	r3, #15
    e31a:	e6fc      	b.n	e116 <_ZN9ClearCore16CcioBoardManager12CcioDiscoverEPNS_12SerialDriverE.part.1+0x262>
    e31c:	230b      	movs	r3, #11
    e31e:	e6fa      	b.n	e116 <_ZN9ClearCore16CcioBoardManager12CcioDiscoverEPNS_12SerialDriverE.part.1+0x262>
    e320:	230c      	movs	r3, #12
    e322:	e6f8      	b.n	e116 <_ZN9ClearCore16CcioBoardManager12CcioDiscoverEPNS_12SerialDriverE.part.1+0x262>
    e324:	230d      	movs	r3, #13
    e326:	e6f6      	b.n	e116 <_ZN9ClearCore16CcioBoardManager12CcioDiscoverEPNS_12SerialDriverE.part.1+0x262>
    e328:	230e      	movs	r3, #14
    e32a:	e6f4      	b.n	e116 <_ZN9ClearCore16CcioBoardManager12CcioDiscoverEPNS_12SerialDriverE.part.1+0x262>
        if (flushCnt >= MAX_FLUSH_ATTEMPTS) {
    e32c:	2300      	movs	r3, #0
    e32e:	e70c      	b.n	e14a <_ZN9ClearCore16CcioBoardManager12CcioDiscoverEPNS_12SerialDriverE.part.1+0x296>
    e330:	20001a80 	.word	0x20001a80
    e334:	20001c90 	.word	0x20001c90
    e338:	20001fc8 	.word	0x20001fc8

0000e33c <_ZN9ClearCore16CcioBoardManager8InstanceEv>:
CcioBoardManager &CcioBoardManager::Instance() {
    e33c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    static CcioBoardManager *instance = new CcioBoardManager();
    e340:	4f42      	ldr	r7, [pc, #264]	; (e44c <_ZN9ClearCore16CcioBoardManager8InstanceEv+0x110>)
    e342:	683c      	ldr	r4, [r7, #0]
    e344:	f014 0401 	ands.w	r4, r4, #1
    e348:	d003      	beq.n	e352 <_ZN9ClearCore16CcioBoardManager8InstanceEv+0x16>
    e34a:	4b41      	ldr	r3, [pc, #260]	; (e450 <_ZN9ClearCore16CcioBoardManager8InstanceEv+0x114>)
    e34c:	6818      	ldr	r0, [r3, #0]
    e34e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    e352:	f44f 602d 	mov.w	r0, #2768	; 0xad0
    e356:	f00e fcf3 	bl	1cd40 <_Znwj>
            buf64.writeMarker = 0;
    e35a:	4603      	mov	r3, r0
    e35c:	4606      	mov	r6, r0
    e35e:	f803 4b01 	strb.w	r4, [r3], #1
      m_lastDiscoverTime(0) {
    e362:	f04f 38ff 	mov.w	r8, #4294967295
    e366:	f04f 39ff 	mov.w	r9, #4294967295
    e36a:	2200      	movs	r2, #0
            buf64.inputs = 0;
    e36c:	7074      	strb	r4, [r6, #1]
    e36e:	705c      	strb	r4, [r3, #1]
    e370:	709c      	strb	r4, [r3, #2]
    e372:	70dc      	strb	r4, [r3, #3]
    e374:	711c      	strb	r4, [r3, #4]
    e376:	715c      	strb	r4, [r3, #5]
    e378:	719c      	strb	r4, [r3, #6]
    e37a:	71dc      	strb	r4, [r3, #7]
    e37c:	2300      	movs	r3, #0
            buf64.outputsSwapped = 0;
    e37e:	7274      	strb	r4, [r6, #9]
    e380:	72b4      	strb	r4, [r6, #10]
    e382:	72f4      	strb	r4, [r6, #11]
    e384:	7334      	strb	r4, [r6, #12]
    e386:	7374      	strb	r4, [r6, #13]
    e388:	73b4      	strb	r4, [r6, #14]
    e38a:	73f4      	strb	r4, [r6, #15]
    e38c:	7434      	strb	r4, [r6, #16]
            buf64.readMarker = 0;
    e38e:	7474      	strb	r4, [r6, #17]
            buf64.writeMarker = 0;
    e390:	74b4      	strb	r4, [r6, #18]
            buf64.inputs = 0;
    e392:	74f4      	strb	r4, [r6, #19]
    e394:	7534      	strb	r4, [r6, #20]
    e396:	7574      	strb	r4, [r6, #21]
    e398:	75b4      	strb	r4, [r6, #22]
    e39a:	75f4      	strb	r4, [r6, #23]
    e39c:	7634      	strb	r4, [r6, #24]
    e39e:	7674      	strb	r4, [r6, #25]
    e3a0:	76b4      	strb	r4, [r6, #26]
            buf64.outputsSwapped = 0;
    e3a2:	76f4      	strb	r4, [r6, #27]
    e3a4:	7734      	strb	r4, [r6, #28]
    e3a6:	7774      	strb	r4, [r6, #29]
    e3a8:	77b4      	strb	r4, [r6, #30]
    e3aa:	77f4      	strb	r4, [r6, #31]
    e3ac:	f886 4020 	strb.w	r4, [r6, #32]
    e3b0:	e9c6 8916 	strd	r8, r9, [r6, #88]	; 0x58
    e3b4:	e9c6 230c 	strd	r2, r3, [r6, #48]	; 0x30
    e3b8:	e9c6 230e 	strd	r2, r3, [r6, #56]	; 0x38
    e3bc:	e9c6 2310 	strd	r2, r3, [r6, #64]	; 0x40
    e3c0:	e9c6 2312 	strd	r2, r3, [r6, #72]	; 0x48
    e3c4:	e9c6 2314 	strd	r2, r3, [r6, #80]	; 0x50
    e3c8:	e9c6 2318 	strd	r2, r3, [r6, #96]	; 0x60
    e3cc:	e9c6 231a 	strd	r2, r3, [r6, #104]	; 0x68
    e3d0:	e9c6 231c 	strd	r2, r3, [r6, #112]	; 0x70
    e3d4:	e9c6 231e 	strd	r2, r3, [r6, #120]	; 0x78
    e3d8:	e9c6 2320 	strd	r2, r3, [r6, #128]	; 0x80
    e3dc:	e9c6 2322 	strd	r2, r3, [r6, #136]	; 0x88
    e3e0:	e9c6 2326 	strd	r2, r3, [r6, #152]	; 0x98
    e3e4:	e9c6 2328 	strd	r2, r3, [r6, #160]	; 0xa0
    e3e8:	e9c6 232a 	strd	r2, r3, [r6, #168]	; 0xa8
    e3ec:	e9c6 232c 	strd	r2, r3, [r6, #176]	; 0xb0
    e3f0:	e9c6 232e 	strd	r2, r3, [r6, #184]	; 0xb8
    e3f4:	2301      	movs	r3, #1
    e3f6:	f886 4021 	strb.w	r4, [r6, #33]	; 0x21
    e3fa:	f886 4022 	strb.w	r4, [r6, #34]	; 0x22
            buf64.readMarker = 0;
    e3fe:	f886 4023 	strb.w	r4, [r6, #35]	; 0x23
    e402:	f886 4024 	strb.w	r4, [r6, #36]	; 0x24
    e406:	62b4      	str	r4, [r6, #40]	; 0x28
    e408:	f886 402c 	strb.w	r4, [r6, #44]	; 0x2c
    e40c:	f886 402e 	strb.w	r4, [r6, #46]	; 0x2e
    e410:	f8a6 4090 	strh.w	r4, [r6, #144]	; 0x90
    e414:	f886 4092 	strb.w	r4, [r6, #146]	; 0x92
    e418:	f8c6 40c0 	str.w	r4, [r6, #192]	; 0xc0
    e41c:	f8c6 40c8 	str.w	r4, [r6, #200]	; 0xc8
    e420:	f886 302d 	strb.w	r3, [r6, #45]	; 0x2d
    e424:	f886 30c4 	strb.w	r3, [r6, #196]	; 0xc4
    e428:	f106 04d0 	add.w	r4, r6, #208	; 0xd0
    e42c:	f506 652d 	add.w	r5, r6, #2768	; 0xad0
    e430:	4620      	mov	r0, r4
    e432:	3428      	adds	r4, #40	; 0x28
    e434:	f000 fc8a 	bl	ed4c <_ZN9ClearCore7CcioPinC1Ev>
    e438:	42ac      	cmp	r4, r5
    e43a:	d1f9      	bne.n	e430 <_ZN9ClearCore16CcioBoardManager8InstanceEv+0xf4>
    static CcioBoardManager *instance = new CcioBoardManager();
    e43c:	4a04      	ldr	r2, [pc, #16]	; (e450 <_ZN9ClearCore16CcioBoardManager8InstanceEv+0x114>)
    e43e:	2301      	movs	r3, #1
    e440:	6016      	str	r6, [r2, #0]
    e442:	4630      	mov	r0, r6
    e444:	603b      	str	r3, [r7, #0]
}
    e446:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    e44a:	bf00      	nop
    e44c:	20001fa8 	.word	0x20001fa8
    e450:	20001fb0 	.word	0x20001fb0

0000e454 <_ZN9ClearCore16CcioBoardManager10InitializeEv>:
void CcioBoardManager::Initialize() {
    e454:	b570      	push	{r4, r5, r6, lr}
    e456:	4606      	mov	r6, r0
    e458:	f100 05d0 	add.w	r5, r0, #208	; 0xd0
    e45c:	2440      	movs	r4, #64	; 0x40
        m_ccioPins[i].Initialize((ClearCorePins)(i + CLEARCORE_PIN_CCIO_BASE));
    e45e:	682b      	ldr	r3, [r5, #0]
    e460:	b221      	sxth	r1, r4
    e462:	3401      	adds	r4, #1
    e464:	4628      	mov	r0, r5
    e466:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    e468:	b2a4      	uxth	r4, r4
    e46a:	4798      	blx	r3
    for (uint8_t i = 0; i < CCIO_PIN_CNT; i++) {
    e46c:	2c80      	cmp	r4, #128	; 0x80
    e46e:	f105 0528 	add.w	r5, r5, #40	; 0x28
    e472:	d1f4      	bne.n	e45e <_ZN9ClearCore16CcioBoardManager10InitializeEv+0xa>
    if (m_discoverState == CCIO_FOUND || (LinkBroken() && !m_autoRediscover)) {
    e474:	f896 3024 	ldrb.w	r3, [r6, #36]	; 0x24
    e478:	2b02      	cmp	r3, #2
    e47a:	d00b      	beq.n	e494 <_ZN9ClearCore16CcioBoardManager10InitializeEv+0x40>
    e47c:	f896 3092 	ldrb.w	r3, [r6, #146]	; 0x92
    e480:	2b00      	cmp	r3, #0
    e482:	d13c      	bne.n	e4fe <_ZN9ClearCore16CcioBoardManager10InitializeEv+0xaa>
        m_lastDiscoverTime = tickCnt;
    e484:	4a20      	ldr	r2, [pc, #128]	; (e508 <_ZN9ClearCore16CcioBoardManager10InitializeEv+0xb4>)
    m_serPort = comInstance;
    e486:	2300      	movs	r3, #0
        m_lastDiscoverTime = tickCnt;
    e488:	6812      	ldr	r2, [r2, #0]
    e48a:	f8c6 20c8 	str.w	r2, [r6, #200]	; 0xc8
    m_serPort = comInstance;
    e48e:	62b3      	str	r3, [r6, #40]	; 0x28
        m_faultLed = ShiftRegister::Masks::SR_NO_FEEDBACK_MASK;
    e490:	f8c6 30c0 	str.w	r3, [r6, #192]	; 0xc0
    m_ccioCnt = 0;
    e494:	2100      	movs	r1, #0
    m_ccioRefreshRate = 1;
    e496:	2001      	movs	r0, #1
    m_ccioMask = 0;
    e498:	2200      	movs	r2, #0
    e49a:	2300      	movs	r3, #0
    m_lastOutputsSwapped = ~0ULL;
    e49c:	f04f 34ff 	mov.w	r4, #4294967295
    e4a0:	f04f 35ff 	mov.w	r5, #4294967295
    m_ccioCnt = 0;
    e4a4:	f886 102c 	strb.w	r1, [r6, #44]	; 0x2c
    m_ccioRefreshDelay = 0;
    e4a8:	f886 102e 	strb.w	r1, [r6, #46]	; 0x2e
    m_ccioRefreshRate = 1;
    e4ac:	f886 002d 	strb.w	r0, [r6, #45]	; 0x2d
    m_consGlitchCnt = 0;
    e4b0:	f8a6 1090 	strh.w	r1, [r6, #144]	; 0x90
    m_ccioLinkBroken = false;
    e4b4:	f886 1092 	strb.w	r1, [r6, #146]	; 0x92
    m_ccioMask = 0;
    e4b8:	e9c6 231c 	strd	r2, r3, [r6, #112]	; 0x70
    m_throttledOutputs = 0;
    e4bc:	e9c6 230c 	strd	r2, r3, [r6, #48]	; 0x30
    m_currentInputs = 0;
    e4c0:	e9c6 230e 	strd	r2, r3, [r6, #56]	; 0x38
    m_filteredInputs = 0;
    e4c4:	e9c6 2310 	strd	r2, r3, [r6, #64]	; 0x40
    m_currentOutputs = 0;
    e4c8:	e9c6 2312 	strd	r2, r3, [r6, #72]	; 0x48
    m_outputMask = 0;
    e4cc:	e9c6 2314 	strd	r2, r3, [r6, #80]	; 0x50
    m_lastOutputs = 0;
    e4d0:	e9c6 2318 	strd	r2, r3, [r6, #96]	; 0x60
    m_outputsWithThrottling = 0;
    e4d4:	e9c6 231a 	strd	r2, r3, [r6, #104]	; 0x68
    m_pulseActive = 0;
    e4d8:	e9c6 231e 	strd	r2, r3, [r6, #120]	; 0x78
    m_pulseValue = 0;
    e4dc:	e9c6 2320 	strd	r2, r3, [r6, #128]	; 0x80
    m_pulseStopPending = 0;
    e4e0:	e9c6 2322 	strd	r2, r3, [r6, #136]	; 0x88
    m_ccioOverloaded = 0;
    e4e4:	e9c6 2326 	strd	r2, r3, [r6, #152]	; 0x98
    m_ccioOverloadAccum = 0;
    e4e8:	e9c6 2328 	strd	r2, r3, [r6, #160]	; 0xa0
    m_inputRegRisen = 0;
    e4ec:	e9c6 232c 	strd	r2, r3, [r6, #176]	; 0xb0
    m_inputRegFallen = 0;
    e4f0:	e9c6 232e 	strd	r2, r3, [r6, #184]	; 0xb8
    m_autoRediscover = true;
    e4f4:	f886 00c4 	strb.w	r0, [r6, #196]	; 0xc4
    m_lastOutputsSwapped = ~0ULL;
    e4f8:	e9c6 4516 	strd	r4, r5, [r6, #88]	; 0x58
}
    e4fc:	bd70      	pop	{r4, r5, r6, pc}
    if (m_discoverState == CCIO_FOUND || (LinkBroken() && !m_autoRediscover)) {
    e4fe:	f896 30c4 	ldrb.w	r3, [r6, #196]	; 0xc4
    e502:	2b00      	cmp	r3, #0
    e504:	d1be      	bne.n	e484 <_ZN9ClearCore16CcioBoardManager10InitializeEv+0x30>
    e506:	e7c5      	b.n	e494 <_ZN9ClearCore16CcioBoardManager10InitializeEv+0x40>
    e508:	20001c90 	.word	0x20001c90

0000e50c <_ZN9ClearCore16CcioBoardManager8PinStateE13ClearCorePins>:
    if (pinNum < CLEARCORE_PIN_CCIO_BASE || pinNum >= CLEARCORE_PIN_CCIO_MAX) {
    e50c:	3940      	subs	r1, #64	; 0x40
    e50e:	b28b      	uxth	r3, r1
    e510:	2b3f      	cmp	r3, #63	; 0x3f
    e512:	d80f      	bhi.n	e534 <_ZN9ClearCore16CcioBoardManager8PinStateE13ClearCorePins+0x28>
    return ((m_filteredInputs >> bitIndex) & 1);
    e514:	6c42      	ldr	r2, [r0, #68]	; 0x44
    e516:	6c00      	ldr	r0, [r0, #64]	; 0x40
    e518:	b2c9      	uxtb	r1, r1
    e51a:	f1c1 0320 	rsb	r3, r1, #32
    e51e:	fa02 f303 	lsl.w	r3, r2, r3
    e522:	40c8      	lsrs	r0, r1
    e524:	3920      	subs	r1, #32
    e526:	4318      	orrs	r0, r3
    e528:	fa22 f101 	lsr.w	r1, r2, r1
    e52c:	4308      	orrs	r0, r1
}
    e52e:	f000 0001 	and.w	r0, r0, #1
    e532:	4770      	bx	lr
    e534:	2000      	movs	r0, #0
    e536:	f000 0001 	and.w	r0, r0, #1
    e53a:	4770      	bx	lr

0000e53c <_ZN9ClearCore16CcioBoardManager7RefreshEv>:
    if (!m_serPort || !m_ccioCnt || m_ccioLinkBroken) {
    e53c:	6a81      	ldr	r1, [r0, #40]	; 0x28
    e53e:	2900      	cmp	r1, #0
    e540:	f000 8084 	beq.w	e64c <_ZN9ClearCore16CcioBoardManager7RefreshEv+0x110>
    e544:	f890 302c 	ldrb.w	r3, [r0, #44]	; 0x2c
    e548:	2b00      	cmp	r3, #0
    e54a:	d07f      	beq.n	e64c <_ZN9ClearCore16CcioBoardManager7RefreshEv+0x110>
    e54c:	f890 2092 	ldrb.w	r2, [r0, #146]	; 0x92
    e550:	2a00      	cmp	r2, #0
    e552:	d17b      	bne.n	e64c <_ZN9ClearCore16CcioBoardManager7RefreshEv+0x110>
void CcioBoardManager::Refresh() {
    e554:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    if (m_pulseActive) {
    e558:	e9d0 ab1e 	ldrd	sl, fp, [r0, #120]	; 0x78
    e55c:	ea5a 040b 	orrs.w	r4, sl, fp
void CcioBoardManager::Refresh() {
    e560:	b091      	sub	sp, #68	; 0x44
    if (m_pulseActive) {
    e562:	f000 80a3 	beq.w	e6ac <_ZN9ClearCore16CcioBoardManager7RefreshEv+0x170>
    e566:	e9d0 4520 	ldrd	r4, r5, [r0, #128]	; 0x80
    e56a:	e9cd 4502 	strd	r4, r5, [sp, #8]
        for (uint8_t i = 0; i < CCIO_PINS_PER_BOARD * m_ccioCnt; i++) {
    e56e:	2400      	movs	r4, #0
    e570:	2500      	movs	r5, #0
    e572:	4690      	mov	r8, r2
    e574:	ea4f 0cc3 	mov.w	ip, r3, lsl #3
    e578:	4696      	mov	lr, r2
    e57a:	e9cd 4504 	strd	r4, r5, [sp, #16]
    e57e:	e9cd 4500 	strd	r4, r5, [sp]
    e582:	2201      	movs	r2, #1
    e584:	2300      	movs	r3, #0
    e586:	4626      	mov	r6, r4
    e588:	462f      	mov	r7, r5
    e58a:	9106      	str	r1, [sp, #24]
    e58c:	e037      	b.n	e5fe <_ZN9ClearCore16CcioBoardManager7RefreshEv+0xc2>
                        if (++currentPin.m_pulseCounter >=
    e58e:	f8b1 80f6 	ldrh.w	r8, [r1, #246]	; 0xf6
                        currentPin.m_pulseTicksRemaining =
    e592:	f8d1 50ec 	ldr.w	r5, [r1, #236]	; 0xec
                                currentPin.m_pulseStopCount &&
    e596:	f8b1 40f4 	ldrh.w	r4, [r1, #244]	; 0xf4
                        currentPin.m_pulseTicksRemaining =
    e59a:	f8c1 50f0 	str.w	r5, [r1, #240]	; 0xf0
                        if (++currentPin.m_pulseCounter >=
    e59e:	f108 0501 	add.w	r5, r8, #1
    e5a2:	b2ad      	uxth	r5, r5
                                currentPin.m_pulseStopCount &&
    e5a4:	42a5      	cmp	r5, r4
                        pulseFall |= mask;
    e5a6:	ea46 0602 	orr.w	r6, r6, r2
    e5aa:	ea47 0703 	orr.w	r7, r7, r3
                                currentPin.m_pulseStopCount &&
    e5ae:	f8a1 50f6 	strh.w	r5, [r1, #246]	; 0xf6
    e5b2:	db06      	blt.n	e5c2 <_ZN9ClearCore16CcioBoardManager7RefreshEv+0x86>
    e5b4:	b12c      	cbz	r4, e5c2 <_ZN9ClearCore16CcioBoardManager7RefreshEv+0x86>
                            pulsesEnded |= mask;
    e5b6:	e9dd 4500 	ldrd	r4, r5, [sp]
    e5ba:	4314      	orrs	r4, r2
    e5bc:	431d      	orrs	r5, r3
    e5be:	e9cd 4500 	strd	r4, r5, [sp]
                        if (m_pulseStopPending & mask) {
    e5c2:	e9d0 4522 	ldrd	r4, r5, [r0, #136]	; 0x88
    e5c6:	ea04 0802 	and.w	r8, r4, r2
    e5ca:	ea05 0903 	and.w	r9, r5, r3
    e5ce:	ea58 0109 	orrs.w	r1, r8, r9
    e5d2:	d00b      	beq.n	e5ec <_ZN9ClearCore16CcioBoardManager7RefreshEv+0xb0>
                            m_pulseStopPending &= ~mask;
    e5d4:	ea24 0402 	bic.w	r4, r4, r2
    e5d8:	ea25 0503 	bic.w	r5, r5, r3
    e5dc:	e9c0 4522 	strd	r4, r5, [r0, #136]	; 0x88
                            pulsesEnded |= mask;
    e5e0:	e9dd 4500 	ldrd	r4, r5, [sp]
    e5e4:	4314      	orrs	r4, r2
    e5e6:	431d      	orrs	r5, r3
    e5e8:	e9cd 4500 	strd	r4, r5, [sp]
        for (uint8_t i = 0; i < CCIO_PINS_PER_BOARD * m_ccioCnt; i++) {
    e5ec:	f10e 0e01 	add.w	lr, lr, #1
    e5f0:	fa5f fe8e 	uxtb.w	lr, lr
            mask <<= 1;
    e5f4:	1892      	adds	r2, r2, r2
    e5f6:	415b      	adcs	r3, r3
        for (uint8_t i = 0; i < CCIO_PINS_PER_BOARD * m_ccioCnt; i++) {
    e5f8:	45e6      	cmp	lr, ip
    e5fa:	46f0      	mov	r8, lr
    e5fc:	da27      	bge.n	e64e <_ZN9ClearCore16CcioBoardManager7RefreshEv+0x112>
            if (m_pulseActive & mask) {
    e5fe:	ea0a 0402 	and.w	r4, sl, r2
    e602:	ea0b 0503 	and.w	r5, fp, r3
    e606:	ea54 0105 	orrs.w	r1, r4, r5
    e60a:	d0ef      	beq.n	e5ec <_ZN9ClearCore16CcioBoardManager7RefreshEv+0xb0>
                if (!--currentPin.m_pulseTicksRemaining) {
    e60c:	eb08 0888 	add.w	r8, r8, r8, lsl #2
    e610:	eb00 01c8 	add.w	r1, r0, r8, lsl #3
    e614:	f8d1 40f0 	ldr.w	r4, [r1, #240]	; 0xf0
    e618:	3c01      	subs	r4, #1
    e61a:	f8c1 40f0 	str.w	r4, [r1, #240]	; 0xf0
    e61e:	2c00      	cmp	r4, #0
    e620:	d1e4      	bne.n	e5ec <_ZN9ClearCore16CcioBoardManager7RefreshEv+0xb0>
                    if (m_pulseValue & mask) {
    e622:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
    e626:	4014      	ands	r4, r2
    e628:	401d      	ands	r5, r3
    e62a:	432c      	orrs	r4, r5
    e62c:	d1af      	bne.n	e58e <_ZN9ClearCore16CcioBoardManager7RefreshEv+0x52>
                        if (m_pulseStopPending & mask) {
    e62e:	e9d0 4522 	ldrd	r4, r5, [r0, #136]	; 0x88
    e632:	ea04 0802 	and.w	r8, r4, r2
    e636:	ea05 0903 	and.w	r9, r5, r3
    e63a:	e9cd 4508 	strd	r4, r5, [sp, #32]
    e63e:	ea58 0409 	orrs.w	r4, r8, r9
    e642:	f000 8115 	beq.w	e870 <_ZN9ClearCore16CcioBoardManager7RefreshEv+0x334>
                            m_pulseStopPending &= ~mask;
    e646:	e9dd 4508 	ldrd	r4, r5, [sp, #32]
    e64a:	e7c3      	b.n	e5d4 <_ZN9ClearCore16CcioBoardManager7RefreshEv+0x98>
    e64c:	4770      	bx	lr
        m_currentOutputs = (m_currentOutputs | pulseRise) & ~pulseFall;
    e64e:	e9d0 8912 	ldrd	r8, r9, [r0, #72]	; 0x48
    e652:	9906      	ldr	r1, [sp, #24]
    e654:	e9cd 8906 	strd	r8, r9, [sp, #24]
        m_pulseValue = (m_pulseValue | pulseRise) & ~pulseFall;
    e658:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
    e65c:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
    e660:	4642      	mov	r2, r8
    e662:	464b      	mov	r3, r9
    e664:	4322      	orrs	r2, r4
    e666:	432b      	orrs	r3, r5
    e668:	4614      	mov	r4, r2
    e66a:	461d      	mov	r5, r3
        m_currentOutputs = (m_currentOutputs | pulseRise) & ~pulseFall;
    e66c:	4642      	mov	r2, r8
    e66e:	464b      	mov	r3, r9
    e670:	e9dd 8906 	ldrd	r8, r9, [sp, #24]
    e674:	43f6      	mvns	r6, r6
    e676:	43ff      	mvns	r7, r7
    e678:	ea48 0802 	orr.w	r8, r8, r2
    e67c:	ea49 0903 	orr.w	r9, r9, r3
        m_pulseValue = (m_pulseValue | pulseRise) & ~pulseFall;
    e680:	ea04 0206 	and.w	r2, r4, r6
    e684:	ea05 0307 	and.w	r3, r5, r7
        m_pulseActive &= ~pulsesEnded;
    e688:	e9dd 4500 	ldrd	r4, r5, [sp]
    e68c:	ea2a 0404 	bic.w	r4, sl, r4
    e690:	ea2b 0505 	bic.w	r5, fp, r5
    e694:	46a2      	mov	sl, r4
    e696:	46ab      	mov	fp, r5
        m_currentOutputs = (m_currentOutputs | pulseRise) & ~pulseFall;
    e698:	ea08 0406 	and.w	r4, r8, r6
    e69c:	ea09 0507 	and.w	r5, r9, r7
        m_pulseValue = (m_pulseValue | pulseRise) & ~pulseFall;
    e6a0:	e9c0 2320 	strd	r2, r3, [r0, #128]	; 0x80
        m_pulseActive &= ~pulsesEnded;
    e6a4:	e9c0 ab1e 	strd	sl, fp, [r0, #120]	; 0x78
        m_currentOutputs = (m_currentOutputs | pulseRise) & ~pulseFall;
    e6a8:	e9c0 4512 	strd	r4, r5, [r0, #72]	; 0x48
    if (--m_ccioRefreshDelay) {
    e6ac:	f890 502e 	ldrb.w	r5, [r0, #46]	; 0x2e
    e6b0:	3d01      	subs	r5, #1
    e6b2:	b2ed      	uxtb	r5, r5
    e6b4:	f880 502e 	strb.w	r5, [r0, #46]	; 0x2e
    e6b8:	b115      	cbz	r5, e6c0 <_ZN9ClearCore16CcioBoardManager7RefreshEv+0x184>
}
    e6ba:	b011      	add	sp, #68	; 0x44
    e6bc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    e6c0:	4604      	mov	r4, r0
        m_ccioRefreshDelay = m_ccioRefreshRate;
    e6c2:	f890 302d 	ldrb.w	r3, [r0, #45]	; 0x2d
    e6c6:	f880 302e 	strb.w	r3, [r0, #46]	; 0x2e
    m_serPort->SpiAsyncWaitComplete();
    e6ca:	4608      	mov	r0, r1
    e6cc:	f002 fe80 	bl	113d0 <_ZN9ClearCore10SerialBase20SpiAsyncWaitCompleteEv>
    m_serPort->SpiSsMode(SerialBase::CtrlLineModes::LINE_OFF);
    e6d0:	4629      	mov	r1, r5
    e6d2:	6aa0      	ldr	r0, [r4, #40]	; 0x28
    e6d4:	f002 fd50 	bl	11178 <_ZN9ClearCore10SerialBase9SpiSsModeENS0_13CtrlLineModesE>
        m_readBuf.buf8[MAX_CCIO_DEVICES + m_ccioCnt + 1] != MARKER_BYTE;
    e6d8:	f894 c02c 	ldrb.w	ip, [r4, #44]	; 0x2c
    e6dc:	f10c 0309 	add.w	r3, ip, #9
    e6e0:	4423      	add	r3, r4
    uint64_t lastInputs = m_currentInputs;
    e6e2:	e9d4 010e 	ldrd	r0, r1, [r4, #56]	; 0x38
        m_readBuf.buf8[MAX_CCIO_DEVICES + m_ccioCnt + 1] != MARKER_BYTE;
    e6e6:	7c9a      	ldrb	r2, [r3, #18]
    m_readBuf.buf8[MAX_CCIO_DEVICES + m_ccioCnt + 1] = 0;
    e6e8:	749d      	strb	r5, [r3, #18]
    if (markerError || m_lastOutputsSwapped ^ m_readBuf.buf64.outputsSwapped) {
    e6ea:	2acc      	cmp	r2, #204	; 0xcc
    e6ec:	f000 814e 	beq.w	e98c <_ZN9ClearCore16CcioBoardManager7RefreshEv+0x450>
        if ((m_consGlitchCnt++ >= MAX_GLITCH_LIM) && (MAX_GLITCH_LIM > 0)) {
    e6f0:	f8b4 3090 	ldrh.w	r3, [r4, #144]	; 0x90
    e6f4:	1c5a      	adds	r2, r3, #1
    e6f6:	b292      	uxth	r2, r2
    e6f8:	3b04      	subs	r3, #4
    e6fa:	4616      	mov	r6, r2
    e6fc:	920b      	str	r2, [sp, #44]	; 0x2c
    e6fe:	b29b      	uxth	r3, r3
    e700:	f64f 72fb 	movw	r2, #65531	; 0xfffb
    e704:	4293      	cmp	r3, r2
    e706:	f8a4 6090 	strh.w	r6, [r4, #144]	; 0x90
    e70a:	f240 81c6 	bls.w	ea9a <_ZN9ClearCore16CcioBoardManager7RefreshEv+0x55e>
    e70e:	2200      	movs	r2, #0
    e710:	2300      	movs	r3, #0
    e712:	e9cd 0108 	strd	r0, r1, [sp, #32]
    e716:	e9cd 2302 	strd	r2, r3, [sp, #8]
    uint64_t overloadedOutputSample = m_outputsWithThrottling & ~lastInputs;
    e71a:	e9d4 231a 	ldrd	r2, r3, [r4, #104]	; 0x68
    e71e:	ea22 0000 	bic.w	r0, r2, r0
    e722:	ea23 0101 	bic.w	r1, r3, r1
    uint64_t overloadedOutputRT = m_ccioOverloaded;
    e726:	e9d4 2326 	ldrd	r2, r3, [r4, #152]	; 0x98
    uint64_t overloadedOutputSample = m_outputsWithThrottling & ~lastInputs;
    e72a:	e9cd 0106 	strd	r0, r1, [sp, #24]
    uint64_t overloadedOutputRT = m_ccioOverloaded;
    e72e:	4610      	mov	r0, r2
    e730:	4619      	mov	r1, r3
    for (uint8_t i = 0; i < CCIO_PINS_PER_BOARD * m_ccioCnt; i++) {
    e732:	ea4f 0ecc 	mov.w	lr, ip, lsl #3
    uint64_t overloadedOutputRT = m_ccioOverloaded;
    e736:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
    for (uint8_t i = 0; i < CCIO_PINS_PER_BOARD * m_ccioCnt; i++) {
    e73a:	f1bc 0f00 	cmp.w	ip, #0
    e73e:	f000 81d3 	beq.w	eae8 <_ZN9ClearCore16CcioBoardManager7RefreshEv+0x5ac>
    e742:	e9cd 0104 	strd	r0, r1, [sp, #16]
    e746:	2200      	movs	r2, #0
    e748:	2000      	movs	r0, #0
    e74a:	2100      	movs	r1, #0
    e74c:	4613      	mov	r3, r2
    e74e:	e9cd 0100 	strd	r0, r1, [sp]
    e752:	f04f 0801 	mov.w	r8, #1
    e756:	f04f 0900 	mov.w	r9, #0
            currentPin.m_overloadTripCnt = CCIO_OVERLOAD_TRIP_TICKS;
    e75a:	f04f 0a0c 	mov.w	sl, #12
    e75e:	e038      	b.n	e7d2 <_ZN9ClearCore16CcioBoardManager7RefreshEv+0x296>
            if (!(--currentPin.m_overloadFoldbackCnt)) {
    e760:	0099      	lsls	r1, r3, #2
    e762:	18c8      	adds	r0, r1, r3
    e764:	eb04 00c0 	add.w	r0, r4, r0, lsl #3
    e768:	f8b0 b0e6 	ldrh.w	fp, [r0, #230]	; 0xe6
    e76c:	f10b 3bff 	add.w	fp, fp, #4294967295
    e770:	fa1f fb8b 	uxth.w	fp, fp
    e774:	f8a0 b0e6 	strh.w	fp, [r0, #230]	; 0xe6
    e778:	f1bb 0f00 	cmp.w	fp, #0
    e77c:	d107      	bne.n	e78e <_ZN9ClearCore16CcioBoardManager7RefreshEv+0x252>
                m_throttledOutputs &= ~mask;
    e77e:	ea26 0608 	bic.w	r6, r6, r8
    e782:	ea27 0709 	bic.w	r7, r7, r9
    e786:	e9c4 670c 	strd	r6, r7, [r4, #48]	; 0x30
                currentPin.m_overloadTripCnt = CCIO_OVERLOAD_TRIP_TICKS;
    e78a:	f8a0 a0e4 	strh.w	sl, [r0, #228]	; 0xe4
        if (changedInputs & mask) {
    e78e:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
    e792:	ea06 0608 	and.w	r6, r6, r8
    e796:	ea07 0709 	and.w	r7, r7, r9
            currentPin.m_filterTicksLeft = currentPin.m_filterLength;
    e79a:	4419      	add	r1, r3
        if (changedInputs & mask) {
    e79c:	ea56 0007 	orrs.w	r0, r6, r7
            currentPin.m_filterTicksLeft = currentPin.m_filterLength;
    e7a0:	eb04 01c1 	add.w	r1, r4, r1, lsl #3
        if (changedInputs & mask) {
    e7a4:	d04e      	beq.n	e844 <_ZN9ClearCore16CcioBoardManager7RefreshEv+0x308>
            if (!currentPin.m_filterLength) {
    e7a6:	f8b1 30e0 	ldrh.w	r3, [r1, #224]	; 0xe0
            currentPin.m_filterTicksLeft = currentPin.m_filterLength;
    e7aa:	f8a1 30e2 	strh.w	r3, [r1, #226]	; 0xe2
            if (!currentPin.m_filterLength) {
    e7ae:	b93b      	cbnz	r3, e7c0 <_ZN9ClearCore16CcioBoardManager7RefreshEv+0x284>
            settledChanges |= mask;
    e7b0:	e9dd 0100 	ldrd	r0, r1, [sp]
    e7b4:	ea40 0008 	orr.w	r0, r0, r8
    e7b8:	ea41 0109 	orr.w	r1, r1, r9
    e7bc:	e9cd 0100 	strd	r0, r1, [sp]
    for (uint8_t i = 0; i < CCIO_PINS_PER_BOARD * m_ccioCnt; i++) {
    e7c0:	3201      	adds	r2, #1
    e7c2:	b2d2      	uxtb	r2, r2
        mask <<= 1;
    e7c4:	eb18 0808 	adds.w	r8, r8, r8
    e7c8:	eb49 0909 	adc.w	r9, r9, r9
    for (uint8_t i = 0; i < CCIO_PINS_PER_BOARD * m_ccioCnt; i++) {
    e7cc:	4596      	cmp	lr, r2
    e7ce:	4613      	mov	r3, r2
    e7d0:	dd59      	ble.n	e886 <_ZN9ClearCore16CcioBoardManager7RefreshEv+0x34a>
        if (m_throttledOutputs & mask) {
    e7d2:	e9d4 010c 	ldrd	r0, r1, [r4, #48]	; 0x30
    e7d6:	4606      	mov	r6, r0
    e7d8:	460f      	mov	r7, r1
    e7da:	ea00 0008 	and.w	r0, r0, r8
    e7de:	ea01 0109 	and.w	r1, r1, r9
    e7e2:	4301      	orrs	r1, r0
    e7e4:	d1bc      	bne.n	e760 <_ZN9ClearCore16CcioBoardManager7RefreshEv+0x224>
        else if (overloadedOutputSample & mask) {
    e7e6:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
    e7ea:	ea00 0008 	and.w	r0, r0, r8
    e7ee:	ea01 0109 	and.w	r1, r1, r9
    e7f2:	4301      	orrs	r1, r0
            if (currentPin.m_overloadTripCnt &&
    e7f4:	ea4f 0183 	mov.w	r1, r3, lsl #2
    e7f8:	eb01 0003 	add.w	r0, r1, r3
    e7fc:	eb04 00c0 	add.w	r0, r4, r0, lsl #3
        else if (overloadedOutputSample & mask) {
    e800:	d02b      	beq.n	e85a <_ZN9ClearCore16CcioBoardManager7RefreshEv+0x31e>
            if (currentPin.m_overloadTripCnt &&
    e802:	f8b0 b0e4 	ldrh.w	fp, [r0, #228]	; 0xe4
    e806:	f1bb 0f00 	cmp.w	fp, #0
    e80a:	d0c0      	beq.n	e78e <_ZN9ClearCore16CcioBoardManager7RefreshEv+0x252>
                    !--currentPin.m_overloadTripCnt) {
    e80c:	f10b 3bff 	add.w	fp, fp, #4294967295
    e810:	fa1f fb8b 	uxth.w	fp, fp
            if (currentPin.m_overloadTripCnt &&
    e814:	f8a0 b0e4 	strh.w	fp, [r0, #228]	; 0xe4
    e818:	f1bb 0f00 	cmp.w	fp, #0
    e81c:	d1b7      	bne.n	e78e <_ZN9ClearCore16CcioBoardManager7RefreshEv+0x252>
                m_throttledOutputs |= mask;
    e81e:	ea46 0608 	orr.w	r6, r6, r8
    e822:	ea47 0709 	orr.w	r7, r7, r9
    e826:	e9c4 670c 	strd	r6, r7, [r4, #48]	; 0x30
                overloadedOutputRT |= mask;
    e82a:	e9dd 6704 	ldrd	r6, r7, [sp, #16]
    e82e:	ea46 0608 	orr.w	r6, r6, r8
    e832:	ea47 0709 	orr.w	r7, r7, r9
    e836:	e9cd 6704 	strd	r6, r7, [sp, #16]
                currentPin.m_overloadFoldbackCnt = CCIO_OVERLOAD_FOLDBACK_TICKS;
    e83a:	f44f 76fa 	mov.w	r6, #500	; 0x1f4
    e83e:	f8a0 60e6 	strh.w	r6, [r0, #230]	; 0xe6
    e842:	e7a4      	b.n	e78e <_ZN9ClearCore16CcioBoardManager7RefreshEv+0x252>
        else if (currentPin.m_filterTicksLeft &&
    e844:	f8b1 00e2 	ldrh.w	r0, [r1, #226]	; 0xe2
    e848:	2800      	cmp	r0, #0
    e84a:	d0b9      	beq.n	e7c0 <_ZN9ClearCore16CcioBoardManager7RefreshEv+0x284>
                 !(--currentPin.m_filterTicksLeft)) {
    e84c:	3801      	subs	r0, #1
    e84e:	b280      	uxth	r0, r0
        else if (currentPin.m_filterTicksLeft &&
    e850:	f8a1 00e2 	strh.w	r0, [r1, #226]	; 0xe2
    e854:	2800      	cmp	r0, #0
    e856:	d0ab      	beq.n	e7b0 <_ZN9ClearCore16CcioBoardManager7RefreshEv+0x274>
    e858:	e7b2      	b.n	e7c0 <_ZN9ClearCore16CcioBoardManager7RefreshEv+0x284>
            overloadedOutputRT &= ~mask;
    e85a:	e9dd 6704 	ldrd	r6, r7, [sp, #16]
    e85e:	ea26 0608 	bic.w	r6, r6, r8
    e862:	ea27 0709 	bic.w	r7, r7, r9
    e866:	e9cd 6704 	strd	r6, r7, [sp, #16]
            currentPin.m_overloadTripCnt = CCIO_OVERLOAD_TRIP_TICKS;
    e86a:	f8a0 a0e4 	strh.w	sl, [r0, #228]	; 0xe4
    e86e:	e78e      	b.n	e78e <_ZN9ClearCore16CcioBoardManager7RefreshEv+0x252>
                                currentPin.m_pulseOnTicks;
    e870:	f8d1 40e8 	ldr.w	r4, [r1, #232]	; 0xe8
                            currentPin.m_pulseTicksRemaining =
    e874:	f8c1 40f0 	str.w	r4, [r1, #240]	; 0xf0
                            pulseRise |= mask;
    e878:	e9dd 4504 	ldrd	r4, r5, [sp, #16]
    e87c:	4314      	orrs	r4, r2
    e87e:	431d      	orrs	r5, r3
    e880:	e9cd 4504 	strd	r4, r5, [sp, #16]
    e884:	e6b2      	b.n	e5ec <_ZN9ClearCore16CcioBoardManager7RefreshEv+0xb0>
    e886:	e9dd 2300 	ldrd	r2, r3, [sp]
    lastInputs = m_filteredInputs;
    e88a:	e9d4 ab10 	ldrd	sl, fp, [r4, #64]	; 0x40
    m_filteredInputs = (m_filteredInputs & ~settledChanges) |
    e88e:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
    e892:	ea80 000a 	eor.w	r0, r0, sl
    e896:	ea81 010b 	eor.w	r1, r1, fp
    e89a:	4002      	ands	r2, r0
    e89c:	400b      	ands	r3, r1
    e89e:	ea82 080a 	eor.w	r8, r2, sl
    e8a2:	ea83 090b 	eor.w	r9, r3, fp
    m_inputRegRisen |= (m_filteredInputs & ~lastInputs);
    e8a6:	e9d4 232c 	ldrd	r2, r3, [r4, #176]	; 0xb0
    e8aa:	ea28 000a 	bic.w	r0, r8, sl
    e8ae:	ea29 010b 	bic.w	r1, r9, fp
    e8b2:	ea40 0602 	orr.w	r6, r0, r2
    e8b6:	ea41 0703 	orr.w	r7, r1, r3
    m_inputRegFallen |= (~m_filteredInputs & lastInputs);
    e8ba:	e9d4 232e 	ldrd	r2, r3, [r4, #184]	; 0xb8
    e8be:	e9cd 8900 	strd	r8, r9, [sp]
    e8c2:	ea2a 0808 	bic.w	r8, sl, r8
    e8c6:	ea2b 0909 	bic.w	r9, fp, r9
    e8ca:	ea43 0109 	orr.w	r1, r3, r9
    e8ce:	ea42 0008 	orr.w	r0, r2, r8
    m_filteredInputs = (m_filteredInputs & ~settledChanges) |
    e8d2:	e9dd 8900 	ldrd	r8, r9, [sp]
    if (m_consGlitchCnt == 0) {
    e8d6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    m_filteredInputs = (m_filteredInputs & ~settledChanges) |
    e8d8:	e9c4 8910 	strd	r8, r9, [r4, #64]	; 0x40
    m_inputRegRisen |= (m_filteredInputs & ~lastInputs);
    e8dc:	e9c4 672c 	strd	r6, r7, [r4, #176]	; 0xb0
    m_inputRegFallen |= (~m_filteredInputs & lastInputs);
    e8e0:	e9c4 012e 	strd	r0, r1, [r4, #184]	; 0xb8
    if (m_consGlitchCnt == 0) {
    e8e4:	2b00      	cmp	r3, #0
    e8e6:	f000 8083 	beq.w	e9f0 <_ZN9ClearCore16CcioBoardManager7RefreshEv+0x4b4>
    m_lastOutputs = m_currentOutputs;
    e8ea:	e9d4 6712 	ldrd	r6, r7, [r4, #72]	; 0x48
        m_currentOutputs & ~m_throttledOutputs & m_outputMask;
    e8ee:	e9d4 2314 	ldrd	r2, r3, [r4, #80]	; 0x50
    e8f2:	e9d4 010c 	ldrd	r0, r1, [r4, #48]	; 0x30
    e8f6:	ea03 0907 	and.w	r9, r3, r7
    e8fa:	ea29 0101 	bic.w	r1, r9, r1
    e8fe:	ea02 0806 	and.w	r8, r2, r6
    e902:	468b      	mov	fp, r1
        outputSwapped >> ((MAX_CCIO_DEVICES - m_ccioCnt) * CCIO_PINS_PER_BOARD);
    e904:	f1cc 0c08 	rsb	ip, ip, #8
                                     static_cast<uint32_t>(m_outputsWithThrottling))) << 32) |
    e908:	2100      	movs	r1, #0
        m_currentOutputs & ~m_throttledOutputs & m_outputMask;
    e90a:	ea28 0000 	bic.w	r0, r8, r0
    __asm("REV %[result], %[input]" : [result] "=r"(res) : [input] "r"(value));
    e90e:	ba03      	rev	r3, r0
                                     static_cast<uint32_t>(m_outputsWithThrottling))) << 32) |
    e910:	461a      	mov	r2, r3
    __asm("REV %[result], %[input]" : [result] "=r"(res) : [input] "r"(value));
    e912:	fa9b f38b 	rev.w	r3, fp
                                     static_cast<uint32_t>(m_outputsWithThrottling))) << 32) |
    e916:	ea41 0803 	orr.w	r8, r1, r3
        outputSwapped >> ((MAX_CCIO_DEVICES - m_ccioCnt) * CCIO_PINS_PER_BOARD);
    e91a:	ea4f 03cc 	mov.w	r3, ip, lsl #3
          reverseBytes(static_cast<uint32_t>(m_outputsWithThrottling >> 32)));
    e91e:	43d1      	mvns	r1, r2
        m_currentOutputs & ~m_throttledOutputs & m_outputMask;
    e920:	4682      	mov	sl, r0
        outputSwapped >> ((MAX_CCIO_DEVICES - m_ccioCnt) * CCIO_PINS_PER_BOARD);
    e922:	f1c3 0520 	rsb	r5, r3, #32
          reverseBytes(static_cast<uint32_t>(m_outputsWithThrottling >> 32)));
    e926:	ea6f 0008 	mvn.w	r0, r8
        outputSwapped >> ((MAX_CCIO_DEVICES - m_ccioCnt) * CCIO_PINS_PER_BOARD);
    e92a:	fa01 f505 	lsl.w	r5, r1, r5
    e92e:	fa20 f203 	lsr.w	r2, r0, r3
    e932:	432a      	orrs	r2, r5
    e934:	f1a3 0520 	sub.w	r5, r3, #32
    e938:	fa21 f505 	lsr.w	r5, r1, r5
    e93c:	432a      	orrs	r2, r5
    m_lastOutputs = m_currentOutputs;
    e93e:	e9c4 6718 	strd	r6, r7, [r4, #96]	; 0x60
    m_lastOutputsSwapped = m_writeBuf.buf64.outputsSwapped;
    e942:	f8d4 500d 	ldr.w	r5, [r4, #13]
    e946:	f8d4 6009 	ldr.w	r6, [r4, #9]
    m_writeBuf.buf64.outputsSwapped =
    e94a:	f8c4 2009 	str.w	r2, [r4, #9]
        outputSwapped >> ((MAX_CCIO_DEVICES - m_ccioCnt) * CCIO_PINS_PER_BOARD);
    e94e:	fa21 f303 	lsr.w	r3, r1, r3
    m_writeBuf.buf8[(MAX_CCIO_DEVICES - m_ccioCnt)] = MARKER_BYTE;
    e952:	22cc      	movs	r2, #204	; 0xcc
    m_writeBuf.buf64.outputsSwapped =
    e954:	f8c4 300d 	str.w	r3, [r4, #13]
    m_lastOutputsSwapped = m_writeBuf.buf64.outputsSwapped;
    e958:	65e5      	str	r5, [r4, #92]	; 0x5c
    m_outputsWithThrottling =
    e95a:	e9c4 ab1a 	strd	sl, fp, [r4, #104]	; 0x68
    m_lastOutputsSwapped = m_writeBuf.buf64.outputsSwapped;
    e95e:	65a6      	str	r6, [r4, #88]	; 0x58
    m_writeBuf.buf8[(MAX_CCIO_DEVICES - m_ccioCnt)] = MARKER_BYTE;
    e960:	f804 200c 	strb.w	r2, [r4, ip]
    m_serPort->SpiSsMode(SerialBase::CtrlLineModes::LINE_ON);
    e964:	2101      	movs	r1, #1
    e966:	6aa0      	ldr	r0, [r4, #40]	; 0x28
    e968:	f002 fc06 	bl	11178 <_ZN9ClearCore10SerialBase9SpiSsModeENS0_13CtrlLineModesE>
        m_writeBuf.buf8 + (MAX_CCIO_DEVICES - m_ccioCnt),
    e96c:	f894 302c 	ldrb.w	r3, [r4, #44]	; 0x2c
        m_readBuf.buf8 + (MAX_CCIO_DEVICES - m_ccioCnt) + 1, 2 * m_ccioCnt + 1);
    e970:	6aa0      	ldr	r0, [r4, #40]	; 0x28
    e972:	1ae2      	subs	r2, r4, r3
        m_writeBuf.buf8 + (MAX_CCIO_DEVICES - m_ccioCnt),
    e974:	f1c3 0108 	rsb	r1, r3, #8
        m_readBuf.buf8 + (MAX_CCIO_DEVICES - m_ccioCnt) + 1, 2 * m_ccioCnt + 1);
    e978:	2501      	movs	r5, #1
    e97a:	321b      	adds	r2, #27
    e97c:	4421      	add	r1, r4
    e97e:	eb05 0343 	add.w	r3, r5, r3, lsl #1
}
    e982:	b011      	add	sp, #68	; 0x44
    e984:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
        m_readBuf.buf8 + (MAX_CCIO_DEVICES - m_ccioCnt) + 1, 2 * m_ccioCnt + 1);
    e988:	f002 bcd0 	b.w	1132c <_ZN9ClearCore10SerialBase20SpiTransferDataAsyncEPKhPhl>
    if (markerError || m_lastOutputsSwapped ^ m_readBuf.buf64.outputsSwapped) {
    e98c:	e9d4 2316 	ldrd	r2, r3, [r4, #88]	; 0x58
    e990:	f8d4 701f 	ldr.w	r7, [r4, #31]
    e994:	f8d4 601b 	ldr.w	r6, [r4, #27]
    e998:	42bb      	cmp	r3, r7
    e99a:	bf08      	it	eq
    e99c:	42b2      	cmpeq	r2, r6
    e99e:	f47f aea7 	bne.w	e6f0 <_ZN9ClearCore16CcioBoardManager7RefreshEv+0x1b4>
            (~m_readBuf.buf64.inputs) >> ((MAX_CCIO_DEVICES - m_ccioCnt)
    e9a2:	f8d4 2013 	ldr.w	r2, [r4, #19]
    e9a6:	f8d4 3017 	ldr.w	r3, [r4, #23]
        m_consGlitchCnt = 0;
    e9aa:	f8a4 5090 	strh.w	r5, [r4, #144]	; 0x90
            (~m_readBuf.buf64.inputs) >> ((MAX_CCIO_DEVICES - m_ccioCnt)
    e9ae:	f1cc 0608 	rsb	r6, ip, #8
                                          * CCIO_PINS_PER_BOARD);
    e9b2:	00f6      	lsls	r6, r6, #3
            (~m_readBuf.buf64.inputs) >> ((MAX_CCIO_DEVICES - m_ccioCnt)
    e9b4:	ea6f 0903 	mvn.w	r9, r3
    e9b8:	ea6f 0802 	mvn.w	r8, r2
    e9bc:	f1c6 0720 	rsb	r7, r6, #32
    e9c0:	fa28 f306 	lsr.w	r3, r8, r6
    e9c4:	fa09 f707 	lsl.w	r7, r9, r7
    e9c8:	f1a6 0220 	sub.w	r2, r6, #32
    e9cc:	fa29 f202 	lsr.w	r2, r9, r2
    e9d0:	433b      	orrs	r3, r7
    e9d2:	4313      	orrs	r3, r2
    e9d4:	9308      	str	r3, [sp, #32]
    e9d6:	fa29 f306 	lsr.w	r3, r9, r6
    e9da:	9309      	str	r3, [sp, #36]	; 0x24
        m_currentInputs =
    e9dc:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
    e9e0:	e9c4 230e 	strd	r2, r3, [r4, #56]	; 0x38
    e9e4:	4042      	eors	r2, r0
    e9e6:	404b      	eors	r3, r1
    e9e8:	e9cd 2302 	strd	r2, r3, [sp, #8]
    e9ec:	950b      	str	r5, [sp, #44]	; 0x2c
    e9ee:	e694      	b.n	e71a <_ZN9ClearCore16CcioBoardManager7RefreshEv+0x1de>
        IoOverloadRT(overloadedOutputRT & m_ccioMask);
    e9f0:	e9d4 231c 	ldrd	r2, r3, [r4, #112]	; 0x70
    e9f4:	e9dd 6704 	ldrd	r6, r7, [sp, #16]
    m_ccioOverloadAccum |= overloadState;
    e9f8:	e9d4 0128 	ldrd	r0, r1, [r4, #160]	; 0xa0
        IoOverloadRT(overloadedOutputRT & m_ccioMask);
    e9fc:	4016      	ands	r6, r2
    e9fe:	401f      	ands	r7, r3
    m_ccioOverloadAccum |= overloadState;
    ea00:	ea40 0206 	orr.w	r2, r0, r6
    ea04:	ea41 0307 	orr.w	r3, r1, r7
    ea08:	e9c4 2328 	strd	r2, r3, [r4, #160]	; 0xa0
    if (m_ccioOverloaded == overloadState) {
    ea0c:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
    ea10:	42bb      	cmp	r3, r7
        IoOverloadRT(overloadedOutputRT & m_ccioMask);
    ea12:	46b0      	mov	r8, r6
    ea14:	46b9      	mov	r9, r7
    if (m_ccioOverloaded == overloadState) {
    ea16:	bf08      	it	eq
    ea18:	42b2      	cmpeq	r2, r6
    ea1a:	e9cd 890e 	strd	r8, r9, [sp, #56]	; 0x38
    ea1e:	f43f af64 	beq.w	e8ea <_ZN9ClearCore16CcioBoardManager7RefreshEv+0x3ae>
        if (state) {
    ea22:	ea58 0309 	orrs.w	r3, r8, r9
    m_ccioOverloaded = overloadState;
    ea26:	e9c4 8926 	strd	r8, r9, [r4, #152]	; 0x98
    ShiftReg.LedInFault(m_faultLed, overloadState);
    ea2a:	f8d4 70c0 	ldr.w	r7, [r4, #192]	; 0xc0
    ea2e:	d053      	beq.n	ead8 <_ZN9ClearCore16CcioBoardManager7RefreshEv+0x59c>
    ea30:	f8df e0c8 	ldr.w	lr, [pc, #200]	; eafc <_ZN9ClearCore16CcioBoardManager7RefreshEv+0x5c0>
    if (overloadState & ~m_overloadSinceStartupAccum) {
    ea34:	e9d4 012a 	ldrd	r0, r1, [r4, #168]	; 0xa8
            m_patternMasks[LED_BLINK_OVERLOAD] |= ledMask;
    ea38:	f8de 60f0 	ldr.w	r6, [lr, #240]	; 0xf0
    ea3c:	433e      	orrs	r6, r7
    ea3e:	f8ce 60f0 	str.w	r6, [lr, #240]	; 0xf0
    ea42:	ea29 0701 	bic.w	r7, r9, r1
    ea46:	ea28 0600 	bic.w	r6, r8, r0
    ea4a:	ea56 0307 	orrs.w	r3, r6, r7
    ea4e:	f43f af4c 	beq.w	e8ea <_ZN9ClearCore16CcioBoardManager7RefreshEv+0x3ae>
        m_overloadSinceStartupAccum |= overloadState;
    ea52:	ea48 0200 	orr.w	r2, r8, r0
    ea56:	ea49 0301 	orr.w	r3, r9, r1
    ea5a:	e9c4 232a 	strd	r2, r3, [r4, #168]	; 0xa8
        for (uint8_t i = 0; i < m_ccioCnt; i++) {
    ea5e:	f1bc 0f00 	cmp.w	ip, #0
    ea62:	f43f af42 	beq.w	e8ea <_ZN9ClearCore16CcioBoardManager7RefreshEv+0x3ae>
                StatusMgr.BlinkCode(
    ea66:	4e24      	ldr	r6, [pc, #144]	; (eaf8 <_ZN9ClearCore16CcioBoardManager7RefreshEv+0x5bc>)
        for (uint8_t i = 0; i < m_ccioCnt; i++) {
    ea68:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
                    BlinkCodeDriver::BLINK_GROUP_CCIO_OVERLOAD, 1 << i);
    ea6a:	2701      	movs	r7, #1
    ea6c:	e005      	b.n	ea7a <_ZN9ClearCore16CcioBoardManager7RefreshEv+0x53e>
        for (uint8_t i = 0; i < m_ccioCnt; i++) {
    ea6e:	3501      	adds	r5, #1
    ea70:	b2ed      	uxtb	r5, r5
    ea72:	4565      	cmp	r5, ip
    ea74:	462a      	mov	r2, r5
    ea76:	f6bf af38 	bge.w	e8ea <_ZN9ClearCore16CcioBoardManager7RefreshEv+0x3ae>
            if (charPtr[i]) {
    ea7a:	ab10      	add	r3, sp, #64	; 0x40
    ea7c:	442b      	add	r3, r5
    ea7e:	f813 3c08 	ldrb.w	r3, [r3, #-8]
    ea82:	2b00      	cmp	r3, #0
    ea84:	d0f3      	beq.n	ea6e <_ZN9ClearCore16CcioBoardManager7RefreshEv+0x532>
                    BlinkCodeDriver::BLINK_GROUP_CCIO_OVERLOAD, 1 << i);
    ea86:	fa07 f202 	lsl.w	r2, r7, r2
    ea8a:	b2d2      	uxtb	r2, r2
    ea8c:	2103      	movs	r1, #3
    ea8e:	6830      	ldr	r0, [r6, #0]
    ea90:	f003 f868 	bl	11b64 <_ZN9ClearCore13StatusManager9BlinkCodeENS_15BlinkCodeDriver15BlinkCodeGroupsEh>
    ea94:	f894 c02c 	ldrb.w	ip, [r4, #44]	; 0x2c
    ea98:	e7e9      	b.n	ea6e <_ZN9ClearCore16CcioBoardManager7RefreshEv+0x532>
            m_ccioLinkBroken = true;
    ea9a:	2101      	movs	r1, #1
    ea9c:	f884 1092 	strb.w	r1, [r4, #146]	; 0x92
            m_serPort->SpiSsMode(SerialBase::CtrlLineModes::LINE_ON);
    eaa0:	6aa0      	ldr	r0, [r4, #40]	; 0x28
    eaa2:	f002 fb69 	bl	11178 <_ZN9ClearCore10SerialBase9SpiSsModeENS0_13CtrlLineModesE>
            StatusMgr.BlinkCode(
    eaa6:	4914      	ldr	r1, [pc, #80]	; (eaf8 <_ZN9ClearCore16CcioBoardManager7RefreshEv+0x5bc>)
            m_ccioOverloaded = 0;
    eaa8:	2300      	movs	r3, #0
    eaaa:	2200      	movs	r2, #0
                BlinkCodeDriver::DEVICE_ERROR_CCIO);
    eaac:	6808      	ldr	r0, [r1, #0]
            m_ccioOverloaded = 0;
    eaae:	e9c4 2326 	strd	r2, r3, [r4, #152]	; 0x98
                BlinkCodeDriver::DEVICE_ERROR_CCIO);
    eab2:	2102      	movs	r1, #2
    eab4:	2208      	movs	r2, #8
    eab6:	f003 f855 	bl	11b64 <_ZN9ClearCore13StatusManager9BlinkCodeENS_15BlinkCodeDriver15BlinkCodeGroupsEh>
            m_patternMasks[LED_BLINK_OVERLOAD] &= ~ledMask;
    eaba:	4b10      	ldr	r3, [pc, #64]	; (eafc <_ZN9ClearCore16CcioBoardManager7RefreshEv+0x5c0>)
    eabc:	f8d4 20c0 	ldr.w	r2, [r4, #192]	; 0xc0
    eac0:	f8d3 00f0 	ldr.w	r0, [r3, #240]	; 0xf0
                                           : m_patternMasks[pattern] &= ~ledMask;
    eac4:	f8d3 10ec 	ldr.w	r1, [r3, #236]	; 0xec
            m_patternMasks[LED_BLINK_OVERLOAD] &= ~ledMask;
    eac8:	43d2      	mvns	r2, r2
    eaca:	4010      	ands	r0, r2
                                           : m_patternMasks[pattern] &= ~ledMask;
    eacc:	400a      	ands	r2, r1
            m_patternMasks[LED_BLINK_OVERLOAD] &= ~ledMask;
    eace:	f8c3 00f0 	str.w	r0, [r3, #240]	; 0xf0
                                           : m_patternMasks[pattern] &= ~ledMask;
    ead2:	f8c3 20ec 	str.w	r2, [r3, #236]	; 0xec
    ead6:	e5f0      	b.n	e6ba <_ZN9ClearCore16CcioBoardManager7RefreshEv+0x17e>
    ead8:	4a08      	ldr	r2, [pc, #32]	; (eafc <_ZN9ClearCore16CcioBoardManager7RefreshEv+0x5c0>)
            m_patternMasks[LED_BLINK_OVERLOAD] &= ~ledMask;
    eada:	f8d2 30f0 	ldr.w	r3, [r2, #240]	; 0xf0
    eade:	ea23 0307 	bic.w	r3, r3, r7
    eae2:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
    eae6:	e700      	b.n	e8ea <_ZN9ClearCore16CcioBoardManager7RefreshEv+0x3ae>
    uint64_t overloadedOutputRT = m_ccioOverloaded;
    eae8:	e9cd 2304 	strd	r2, r3, [sp, #16]
    uint64_t settledChanges = 0;
    eaec:	2200      	movs	r2, #0
    eaee:	2300      	movs	r3, #0
    eaf0:	e9cd 2300 	strd	r2, r3, [sp]
    eaf4:	e6c9      	b.n	e88a <_ZN9ClearCore16CcioBoardManager7RefreshEv+0x34e>
    eaf6:	bf00      	nop
    eaf8:	20001fc8 	.word	0x20001fc8
    eafc:	20001a80 	.word	0x20001a80

0000eb00 <_ZN9ClearCore16CcioBoardManager11RefreshSlowEv>:
    if (m_serPort && LinkBroken() && m_autoRediscover &&
    eb00:	6a81      	ldr	r1, [r0, #40]	; 0x28
    eb02:	b1c1      	cbz	r1, eb36 <_ZN9ClearCore16CcioBoardManager11RefreshSlowEv+0x36>
    eb04:	f890 2092 	ldrb.w	r2, [r0, #146]	; 0x92
    eb08:	b1aa      	cbz	r2, eb36 <_ZN9ClearCore16CcioBoardManager11RefreshSlowEv+0x36>
    eb0a:	f890 20c4 	ldrb.w	r2, [r0, #196]	; 0xc4
    eb0e:	b192      	cbz	r2, eb36 <_ZN9ClearCore16CcioBoardManager11RefreshSlowEv+0x36>
            tickCnt - m_lastDiscoverTime > CCIO_REDISCOVER_TIME_TICKS) {
    eb10:	4a09      	ldr	r2, [pc, #36]	; (eb38 <_ZN9ClearCore16CcioBoardManager11RefreshSlowEv+0x38>)
void CcioBoardManager::RefreshSlow() {
    eb12:	b430      	push	{r4, r5}
            tickCnt - m_lastDiscoverTime > CCIO_REDISCOVER_TIME_TICKS) {
    eb14:	6812      	ldr	r2, [r2, #0]
    eb16:	f8d0 50c8 	ldr.w	r5, [r0, #200]	; 0xc8
    if (m_serPort && LinkBroken() && m_autoRediscover &&
    eb1a:	f241 3488 	movw	r4, #5000	; 0x1388
            tickCnt - m_lastDiscoverTime > CCIO_REDISCOVER_TIME_TICKS) {
    eb1e:	1b52      	subs	r2, r2, r5
    if (m_serPort && LinkBroken() && m_autoRediscover &&
    eb20:	42a2      	cmp	r2, r4
    eb22:	d907      	bls.n	eb34 <_ZN9ClearCore16CcioBoardManager11RefreshSlowEv+0x34>
        m_discoverState = CCIO_SEARCH;
    eb24:	2200      	movs	r2, #0
    if (m_discoverState == CCIO_FOUND || (LinkBroken() && !m_autoRediscover)) {
    eb26:	f890 4092 	ldrb.w	r4, [r0, #146]	; 0x92
        m_discoverState = CCIO_SEARCH;
    eb2a:	f880 2024 	strb.w	r2, [r0, #36]	; 0x24
}
    eb2e:	bc30      	pop	{r4, r5}
    eb30:	f7ff b9c0 	b.w	deb4 <_ZN9ClearCore16CcioBoardManager12CcioDiscoverEPNS_12SerialDriverE.part.1>
    eb34:	bc30      	pop	{r4, r5}
    eb36:	4770      	bx	lr
    eb38:	20001c90 	.word	0x20001c90

0000eb3c <_ZN9ClearCore16CcioBoardManager9LinkCloseEv>:
                                           : m_patternMasks[pattern] &= ~ledMask;
    eb3c:	4a0e      	ldr	r2, [pc, #56]	; (eb78 <_ZN9ClearCore16CcioBoardManager9LinkCloseEv+0x3c>)
void CcioBoardManager::LinkClose() {
    eb3e:	b4f0      	push	{r4, r5, r6, r7}
    ShiftReg.LedPattern(m_faultLed, ShiftRegister::LED_BLINK_CCIO_COMM_ERR,
    eb40:	f8d0 60c0 	ldr.w	r6, [r0, #192]	; 0xc0
    eb44:	f8d2 10e8 	ldr.w	r1, [r2, #232]	; 0xe8
        if (state) {
    eb48:	e9d0 4526 	ldrd	r4, r5, [r0, #152]	; 0x98
                                           : m_patternMasks[pattern] &= ~ledMask;
    eb4c:	43f3      	mvns	r3, r6
    eb4e:	4019      	ands	r1, r3
    m_discoverState = CCIO_SEARCH;
    eb50:	2700      	movs	r7, #0
    eb52:	f880 7024 	strb.w	r7, [r0, #36]	; 0x24
    eb56:	f8c2 10e8 	str.w	r1, [r2, #232]	; 0xe8
        if (state) {
    eb5a:	ea54 0105 	orrs.w	r1, r4, r5
            m_patternMasks[LED_BLINK_OVERLOAD] |= ledMask;
    eb5e:	bf15      	itete	ne
    eb60:	f8d2 30f0 	ldrne.w	r3, [r2, #240]	; 0xf0
            m_patternMasks[LED_BLINK_OVERLOAD] &= ~ledMask;
    eb64:	f8d2 10f0 	ldreq.w	r1, [r2, #240]	; 0xf0
            m_patternMasks[LED_BLINK_OVERLOAD] |= ledMask;
    eb68:	4333      	orrne	r3, r6
            m_patternMasks[LED_BLINK_OVERLOAD] &= ~ledMask;
    eb6a:	400b      	andeq	r3, r1
    eb6c:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
}
    eb70:	bcf0      	pop	{r4, r5, r6, r7}
    Initialize();
    eb72:	f7ff bc6f 	b.w	e454 <_ZN9ClearCore16CcioBoardManager10InitializeEv>
    eb76:	bf00      	nop
    eb78:	20001a80 	.word	0x20001a80

0000eb7c <_ZN9ClearCore16CcioBoardManager12CcioDiscoverEPNS_12SerialDriverE>:
    if (m_discoverState == CCIO_FOUND || (LinkBroken() && !m_autoRediscover)) {
    eb7c:	f890 3024 	ldrb.w	r3, [r0, #36]	; 0x24
    eb80:	2b02      	cmp	r3, #2
    eb82:	d005      	beq.n	eb90 <_ZN9ClearCore16CcioBoardManager12CcioDiscoverEPNS_12SerialDriverE+0x14>
    eb84:	f890 3092 	ldrb.w	r3, [r0, #146]	; 0x92
    eb88:	b12b      	cbz	r3, eb96 <_ZN9ClearCore16CcioBoardManager12CcioDiscoverEPNS_12SerialDriverE+0x1a>
    eb8a:	f890 30c4 	ldrb.w	r3, [r0, #196]	; 0xc4
    eb8e:	b913      	cbnz	r3, eb96 <_ZN9ClearCore16CcioBoardManager12CcioDiscoverEPNS_12SerialDriverE+0x1a>
        return m_ccioCnt;
    eb90:	f890 002c 	ldrb.w	r0, [r0, #44]	; 0x2c
    eb94:	4770      	bx	lr
    m_serPort = comInstance;
    eb96:	6281      	str	r1, [r0, #40]	; 0x28
    if (!m_serPort) {
    eb98:	b109      	cbz	r1, eb9e <_ZN9ClearCore16CcioBoardManager12CcioDiscoverEPNS_12SerialDriverE+0x22>
    eb9a:	f7ff b98b 	b.w	deb4 <_ZN9ClearCore16CcioBoardManager12CcioDiscoverEPNS_12SerialDriverE.part.1>
        m_lastDiscoverTime = tickCnt;
    eb9e:	4b04      	ldr	r3, [pc, #16]	; (ebb0 <_ZN9ClearCore16CcioBoardManager12CcioDiscoverEPNS_12SerialDriverE+0x34>)
        m_faultLed = ShiftRegister::Masks::SR_NO_FEEDBACK_MASK;
    eba0:	f8c0 10c0 	str.w	r1, [r0, #192]	; 0xc0
        m_lastDiscoverTime = tickCnt;
    eba4:	681b      	ldr	r3, [r3, #0]
    eba6:	f8c0 30c8 	str.w	r3, [r0, #200]	; 0xc8
        return 0;
    ebaa:	4608      	mov	r0, r1
    ebac:	4770      	bx	lr
    ebae:	bf00      	nop
    ebb0:	20001c90 	.word	0x20001c90

0000ebb4 <_ZN9ClearCore16CcioBoardManager10PinByIndexE13ClearCorePins>:
void CcioBoardManager::CcioRediscoverEnable(bool enable) {
    m_autoRediscover = enable;
}

CcioPin *CcioBoardManager::PinByIndex(ClearCorePins connectorIndex) {
    if (connectorIndex >= ClearCorePins::CLEARCORE_PIN_CCIO_BASE &&
    ebb4:	3940      	subs	r1, #64	; 0x40
    ebb6:	b28b      	uxth	r3, r1
    ebb8:	2b3f      	cmp	r3, #63	; 0x3f
            connectorIndex < ClearCorePins::CLEARCORE_PIN_CCIO_MAX) {
        return &m_ccioPins[connectorIndex - CLEARCORE_PIN_CCIO_BASE];
    ebba:	bf9d      	ittte	ls
    ebbc:	eb01 0181 	addls.w	r1, r1, r1, lsl #2
    ebc0:	eb00 00c1 	addls.w	r0, r0, r1, lsl #3
    ebc4:	30d0      	addls	r0, #208	; 0xd0
    }
    else {
        return NULL;
    ebc6:	2000      	movhi	r0, #0
    }
}
    ebc8:	4770      	bx	lr
    ebca:	bf00      	nop

0000ebcc <_GLOBAL__sub_I__ZN9ClearCore7CcioMgrE>:

} // ClearCore namespace
    ebcc:	b508      	push	{r3, lr}
CcioBoardManager &CcioMgr = CcioBoardManager::Instance();
    ebce:	f7ff fbb5 	bl	e33c <_ZN9ClearCore16CcioBoardManager8InstanceEv>
    ebd2:	4b01      	ldr	r3, [pc, #4]	; (ebd8 <_GLOBAL__sub_I__ZN9ClearCore7CcioMgrE+0xc>)
    ebd4:	6018      	str	r0, [r3, #0]
    ebd6:	bd08      	pop	{r3, pc}
    ebd8:	20001fac 	.word	0x20001fac

0000ebdc <_ZN9ClearCore7CcioPin4ModeEv>:

        \return The connector's current operational mode.
    **/
    virtual ConnectorModes Mode() override {
        return Connector::Mode();
    }
    ebdc:	7980      	ldrb	r0, [r0, #6]
    ebde:	4770      	bx	lr

0000ebe0 <_ZN9ClearCore7CcioPin4TypeEv>:

        \return The type of the current connector.
    **/
    Connector::ConnectorTypes Type() override {
        return Connector::CCIO_DIGITAL_IN_OUT_TYPE;
    }
    ebe0:	2009      	movs	r0, #9
    ebe2:	4770      	bx	lr

0000ebe4 <_ZN9ClearCore7CcioPin10IsWritableEv>:
        \endcode

        \return True if in #OUTPUT_DIGITAL mode, false otherwise
    **/
    bool IsWritable() override {
        return m_mode == OUTPUT_DIGITAL;
    ebe4:	7980      	ldrb	r0, [r0, #6]
    }
    ebe6:	f1a0 0004 	sub.w	r0, r0, #4
    ebea:	fab0 f080 	clz	r0, r0
    ebee:	0940      	lsrs	r0, r0, #5
    ebf0:	4770      	bx	lr
    ebf2:	bf00      	nop

0000ebf4 <_ZN9ClearCore7CcioPin7RefreshEv>:
        Poll the underlying connector for new state update.

        This is typically called from a timer or main loop to update the
        underlying value.
    **/
    void Refresh() override {}
    ebf4:	4770      	bx	lr
    ebf6:	bf00      	nop

0000ebf8 <_ZN9ClearCore7CcioPin10InitializeE13ClearCorePins>:
      m_pulseTicksRemaining(0),
      m_pulseStopCount(0),
      m_pulseCounter(0) {}


void CcioPin::Initialize(ClearCorePins ccioPin) {
    ebf8:	b470      	push	{r4, r5, r6}
    m_clearCorePin = ccioPin;
    m_dataBit = 1ULL << (ccioPin - CLEARCORE_PIN_CCIO_BASE);
    ebfa:	f1a1 0540 	sub.w	r5, r1, #64	; 0x40
    ebfe:	2201      	movs	r2, #1
    ec00:	f1a1 0360 	sub.w	r3, r1, #96	; 0x60
    ec04:	f1c5 0420 	rsb	r4, r5, #32
    ec08:	fa22 f404 	lsr.w	r4, r2, r4
    ec0c:	fa02 f303 	lsl.w	r3, r2, r3
    ec10:	4323      	orrs	r3, r4
    ec12:	40aa      	lsls	r2, r5
    m_mode = ConnectorModes::INPUT_DIGITAL;
    ec14:	2602      	movs	r6, #2
    m_filterLength = 3;
    ec16:	4d07      	ldr	r5, [pc, #28]	; (ec34 <_ZN9ClearCore7CcioPin10InitializeE13ClearCorePins+0x3c>)
    m_clearCorePin = ccioPin;
    ec18:	8081      	strh	r1, [r0, #4]
    m_filterLength = 3;
    ec1a:	240c      	movs	r4, #12
    m_dataBit = 1ULL << (ccioPin - CLEARCORE_PIN_CCIO_BASE);
    ec1c:	2100      	movs	r1, #0
    m_mode = ConnectorModes::INPUT_DIGITAL;
    ec1e:	7186      	strb	r6, [r0, #6]
    m_filterLength = 3;
    ec20:	6105      	str	r5, [r0, #16]
    ec22:	6144      	str	r4, [r0, #20]
    m_dataBit = 1ULL << (ccioPin - CLEARCORE_PIN_CCIO_BASE);
    ec24:	6082      	str	r2, [r0, #8]
    ec26:	60c3      	str	r3, [r0, #12]
    m_filterTicksLeft = 1;
    m_overloadTripCnt = CCIO_OVERLOAD_TRIP_TICKS;
    m_overloadFoldbackCnt = 0;
    m_pulseOnTicks = 0;
    ec28:	6181      	str	r1, [r0, #24]
    m_pulseOffTicks = 0;
    ec2a:	61c1      	str	r1, [r0, #28]
    m_pulseTicksRemaining = 0;
    ec2c:	6201      	str	r1, [r0, #32]
    m_pulseStopCount = 0;
    ec2e:	6241      	str	r1, [r0, #36]	; 0x24
    m_pulseCounter = 0;
}
    ec30:	bc70      	pop	{r4, r5, r6}
    ec32:	4770      	bx	lr
    ec34:	00010003 	.word	0x00010003

0000ec38 <_ZN9ClearCore7CcioPin4ModeENS_9Connector14ConnectorModesE>:

bool CcioPin::Mode(ConnectorModes newMode) {
    // Bail out if we are already in the requested mode
    if (newMode == m_mode) {
    ec38:	7983      	ldrb	r3, [r0, #6]
    ec3a:	428b      	cmp	r3, r1
    ec3c:	d02f      	beq.n	ec9e <_ZN9ClearCore7CcioPin4ModeENS_9Connector14ConnectorModesE+0x66>
        return true;
    }

    switch (newMode) {
    ec3e:	2902      	cmp	r1, #2
bool CcioPin::Mode(ConnectorModes newMode) {
    ec40:	e92d 0370 	stmdb	sp!, {r4, r5, r6, r8, r9}
    switch (newMode) {
    ec44:	d014      	beq.n	ec70 <_ZN9ClearCore7CcioPin4ModeENS_9Connector14ConnectorModesE+0x38>
    ec46:	2904      	cmp	r1, #4
    ec48:	d10b      	bne.n	ec62 <_ZN9ClearCore7CcioPin4ModeENS_9Connector14ConnectorModesE+0x2a>
        // Set up as output
        case OUTPUT_DIGITAL:
            CcioMgr.m_outputMask |= m_dataBit;
    ec4a:	4b16      	ldr	r3, [pc, #88]	; (eca4 <_ZN9ClearCore7CcioPin4ModeENS_9Connector14ConnectorModesE+0x6c>)
    ec4c:	681e      	ldr	r6, [r3, #0]
    ec4e:	e9d0 4502 	ldrd	r4, r5, [r0, #8]
    ec52:	e9d6 2314 	ldrd	r2, r3, [r6, #80]	; 0x50
    ec56:	432b      	orrs	r3, r5
    ec58:	4322      	orrs	r2, r4
    ec5a:	e9c6 2314 	strd	r2, r3, [r6, #80]	; 0x50
            m_mode = newMode;
            break;
    ec5e:	460b      	mov	r3, r1
            m_mode = newMode;
    ec60:	7181      	strb	r1, [r0, #6]
            break;
        // Unsupported mode, don't change anything
        default:
            break;
    }
    return m_mode == newMode;
    ec62:	1ac8      	subs	r0, r1, r3
    ec64:	fab0 f080 	clz	r0, r0
    ec68:	0940      	lsrs	r0, r0, #5
}
    ec6a:	e8bd 0370 	ldmia.w	sp!, {r4, r5, r6, r8, r9}
    ec6e:	4770      	bx	lr
            CcioMgr.m_outputMask &= ~m_dataBit;
    ec70:	4b0c      	ldr	r3, [pc, #48]	; (eca4 <_ZN9ClearCore7CcioPin4ModeENS_9Connector14ConnectorModesE+0x6c>)
    ec72:	681e      	ldr	r6, [r3, #0]
    ec74:	e9d0 2302 	ldrd	r2, r3, [r0, #8]
    ec78:	e9d6 4514 	ldrd	r4, r5, [r6, #80]	; 0x50
            CcioMgr.m_pulseActive &= ~m_dataBit;
    ec7c:	e9d6 891e 	ldrd	r8, r9, [r6, #120]	; 0x78
            CcioMgr.m_outputMask &= ~m_dataBit;
    ec80:	43d2      	mvns	r2, r2
    ec82:	43db      	mvns	r3, r3
    ec84:	4014      	ands	r4, r2
    ec86:	401d      	ands	r5, r3
            CcioMgr.m_pulseActive &= ~m_dataBit;
    ec88:	ea02 0208 	and.w	r2, r2, r8
    ec8c:	ea03 0309 	and.w	r3, r3, r9
    ec90:	e9c6 231e 	strd	r2, r3, [r6, #120]	; 0x78
            CcioMgr.m_outputMask &= ~m_dataBit;
    ec94:	e9c6 4514 	strd	r4, r5, [r6, #80]	; 0x50
            break;
    ec98:	460b      	mov	r3, r1
            m_mode = newMode;
    ec9a:	7181      	strb	r1, [r0, #6]
            break;
    ec9c:	e7e1      	b.n	ec62 <_ZN9ClearCore7CcioPin4ModeENS_9Connector14ConnectorModesE+0x2a>
        return true;
    ec9e:	2001      	movs	r0, #1
    eca0:	4770      	bx	lr
    eca2:	bf00      	nop
    eca4:	20001fac 	.word	0x20001fac

0000eca8 <_ZN9ClearCore7CcioPin5StateEv>:

int16_t CcioPin::State() {
    bool state = false;

    switch (m_mode) {
    eca8:	7983      	ldrb	r3, [r0, #6]
    ecaa:	2b02      	cmp	r3, #2
    ecac:	d010      	beq.n	ecd0 <_ZN9ClearCore7CcioPin5StateEv+0x28>
    ecae:	2b04      	cmp	r3, #4
    ecb0:	d10c      	bne.n	eccc <_ZN9ClearCore7CcioPin5StateEv+0x24>
        case OUTPUT_DIGITAL:
            state = CcioMgr.m_currentOutputs & m_dataBit;
    ecb2:	4b0b      	ldr	r3, [pc, #44]	; (ece0 <_ZN9ClearCore7CcioPin5StateEv+0x38>)
    ecb4:	681b      	ldr	r3, [r3, #0]
    ecb6:	e9d0 0102 	ldrd	r0, r1, [r0, #8]
    ecba:	e9d3 2312 	ldrd	r2, r3, [r3, #72]	; 0x48
            break;
        case INPUT_DIGITAL:
            state = CcioMgr.m_filteredInputs & m_dataBit;
    ecbe:	4002      	ands	r2, r0
    ecc0:	400b      	ands	r3, r1
    ecc2:	4313      	orrs	r3, r2
    ecc4:	bf14      	ite	ne
    ecc6:	2001      	movne	r0, #1
    ecc8:	2000      	moveq	r0, #0
            break;
    ecca:	4770      	bx	lr
    switch (m_mode) {
    eccc:	2000      	movs	r0, #0
        default:
            break;
    }

    return state;
}
    ecce:	4770      	bx	lr
            state = CcioMgr.m_filteredInputs & m_dataBit;
    ecd0:	4b03      	ldr	r3, [pc, #12]	; (ece0 <_ZN9ClearCore7CcioPin5StateEv+0x38>)
    ecd2:	681b      	ldr	r3, [r3, #0]
    ecd4:	e9d0 0102 	ldrd	r0, r1, [r0, #8]
    ecd8:	e9d3 2310 	ldrd	r2, r3, [r3, #64]	; 0x40
    ecdc:	e7ef      	b.n	ecbe <_ZN9ClearCore7CcioPin5StateEv+0x16>
    ecde:	bf00      	nop
    ece0:	20001fac 	.word	0x20001fac

0000ece4 <_ZN9ClearCore7CcioPin11IsInHwFaultEv>:
bool CcioPin::InputFallen() {
    return CcioMgr.InputsFallen(m_dataBit);
}

bool CcioPin::IsInHwFault() {
    return (volatile uint64_t &)(CcioMgr.m_ccioOverloaded) & m_dataBit;
    ece4:	4b06      	ldr	r3, [pc, #24]	; (ed00 <_ZN9ClearCore7CcioPin11IsInHwFaultEv+0x1c>)
    ece6:	681b      	ldr	r3, [r3, #0]
    ece8:	e9d0 0102 	ldrd	r0, r1, [r0, #8]
    ecec:	e9d3 2326 	ldrd	r2, r3, [r3, #152]	; 0x98
    ecf0:	4002      	ands	r2, r0
    ecf2:	400b      	ands	r3, r1
    ecf4:	4313      	orrs	r3, r2
}
    ecf6:	bf14      	ite	ne
    ecf8:	2001      	movne	r0, #1
    ecfa:	2000      	moveq	r0, #0
    ecfc:	4770      	bx	lr
    ecfe:	bf00      	nop
    ed00:	20001fac 	.word	0x20001fac

0000ed04 <_ZN9ClearCore7CcioPin5StateEs>:
    switch (m_mode) {
    ed04:	7983      	ldrb	r3, [r0, #6]
    ed06:	2b04      	cmp	r3, #4
    ed08:	d11c      	bne.n	ed44 <_ZN9ClearCore7CcioPin5StateEs+0x40>
bool CcioPin::State(int16_t newState) {
    ed0a:	b430      	push	{r4, r5}
                CcioMgr.m_currentOutputs |= m_dataBit;
    ed0c:	4b0e      	ldr	r3, [pc, #56]	; (ed48 <_ZN9ClearCore7CcioPin5StateEs+0x44>)
            if (newState) {
    ed0e:	b969      	cbnz	r1, ed2c <_ZN9ClearCore7CcioPin5StateEs+0x28>
                CcioMgr.m_currentOutputs &= ~m_dataBit;
    ed10:	6819      	ldr	r1, [r3, #0]
    ed12:	e9d0 2302 	ldrd	r2, r3, [r0, #8]
    ed16:	e9d1 4512 	ldrd	r4, r5, [r1, #72]	; 0x48
    ed1a:	ea24 0202 	bic.w	r2, r4, r2
    ed1e:	ea25 0303 	bic.w	r3, r5, r3
            success = true;
    ed22:	2001      	movs	r0, #1
                CcioMgr.m_currentOutputs &= ~m_dataBit;
    ed24:	e9c1 2312 	strd	r2, r3, [r1, #72]	; 0x48
}
    ed28:	bc30      	pop	{r4, r5}
    ed2a:	4770      	bx	lr
                CcioMgr.m_currentOutputs |= m_dataBit;
    ed2c:	6819      	ldr	r1, [r3, #0]
    ed2e:	e9d0 4502 	ldrd	r4, r5, [r0, #8]
    ed32:	e9d1 2312 	ldrd	r2, r3, [r1, #72]	; 0x48
    ed36:	4322      	orrs	r2, r4
    ed38:	432b      	orrs	r3, r5
    ed3a:	2001      	movs	r0, #1
    ed3c:	e9c1 2312 	strd	r2, r3, [r1, #72]	; 0x48
}
    ed40:	bc30      	pop	{r4, r5}
    ed42:	4770      	bx	lr
    bool success = false;
    ed44:	2000      	movs	r0, #0
    ed46:	4770      	bx	lr
    ed48:	20001fac 	.word	0x20001fac

0000ed4c <_ZN9ClearCore7CcioPinC1Ev>:
CcioPin::CcioPin()
    ed4c:	b5d0      	push	{r4, r6, r7, lr}
    ed4e:	4604      	mov	r4, r0
      m_pulseCounter(0) {}
    ed50:	f7fe fca6 	bl	d6a0 <_ZN9ClearCore9ConnectorC1Ev>
    ed54:	4b08      	ldr	r3, [pc, #32]	; (ed78 <_ZN9ClearCore7CcioPinC1Ev+0x2c>)
    ed56:	4909      	ldr	r1, [pc, #36]	; (ed7c <_ZN9ClearCore7CcioPinC1Ev+0x30>)
    ed58:	6023      	str	r3, [r4, #0]
    ed5a:	2600      	movs	r6, #0
    ed5c:	2300      	movs	r3, #0
    ed5e:	2700      	movs	r7, #0
    ed60:	220c      	movs	r2, #12
    ed62:	e9c4 6702 	strd	r6, r7, [r4, #8]
    ed66:	6121      	str	r1, [r4, #16]
    ed68:	6162      	str	r2, [r4, #20]
    ed6a:	61a3      	str	r3, [r4, #24]
    ed6c:	61e3      	str	r3, [r4, #28]
    ed6e:	6223      	str	r3, [r4, #32]
    ed70:	6263      	str	r3, [r4, #36]	; 0x24
    ed72:	4620      	mov	r0, r4
    ed74:	bdd0      	pop	{r4, r6, r7, pc}
    ed76:	bf00      	nop
    ed78:	0002d36c 	.word	0x0002d36c
    ed7c:	00010003 	.word	0x00010003

0000ed80 <_ZN9ClearCore12InputManager8InstanceEv>:

namespace ClearCore {

InputManager &InputMgr = InputManager::Instance();

InputManager &InputManager::Instance() {
    ed80:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    static InputManager *instance = new InputManager();
    ed82:	4e14      	ldr	r6, [pc, #80]	; (edd4 <_ZN9ClearCore12InputManager8InstanceEv+0x54>)
    ed84:	6834      	ldr	r4, [r6, #0]
    ed86:	f014 0401 	ands.w	r4, r4, #1
    ed8a:	d002      	beq.n	ed92 <_ZN9ClearCore12InputManager8InstanceEv+0x12>
    ed8c:	4b12      	ldr	r3, [pc, #72]	; (edd8 <_ZN9ClearCore12InputManager8InstanceEv+0x58>)
    ed8e:	6818      	ldr	r0, [r3, #0]
    ed90:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    ed92:	2080      	movs	r0, #128	; 0x80
    ed94:	f00d ffd4 	bl	1cd40 <_Znwj>
    ed98:	4605      	mov	r5, r0
      m_inputRegRisen(0),
      m_inputRegFallen(0),
      m_interruptsMask(0),
      m_interruptsEnabled(true),
      m_interruptServiceRoutines(),
      m_oneTimeFlags(0) {}
    ed9a:	2701      	movs	r7, #1
    ed9c:	2240      	movs	r2, #64	; 0x40
    ed9e:	602c      	str	r4, [r5, #0]
    eda0:	606c      	str	r4, [r5, #4]
    eda2:	60ac      	str	r4, [r5, #8]
    eda4:	60ec      	str	r4, [r5, #12]
    eda6:	612c      	str	r4, [r5, #16]
    eda8:	616c      	str	r4, [r5, #20]
    edaa:	4621      	mov	r1, r4
    edac:	61ac      	str	r4, [r5, #24]
    edae:	61ec      	str	r4, [r5, #28]
    edb0:	622c      	str	r4, [r5, #32]
**/
union SysConnectorState {
    /**
        Constructor to allow initialization lists.
    **/
    SysConnectorState(uint32_t initialBits) : reg(initialBits) {}
    edb2:	626c      	str	r4, [r5, #36]	; 0x24
    /**
        Default Constructor
    **/
    SysConnectorState() : reg(0) {}
    edb4:	62ac      	str	r4, [r5, #40]	; 0x28
    SysConnectorState(uint32_t initialBits) : reg(initialBits) {}
    edb6:	62ec      	str	r4, [r5, #44]	; 0x2c
    edb8:	632c      	str	r4, [r5, #48]	; 0x30
    edba:	636c      	str	r4, [r5, #52]	; 0x34
    edbc:	f885 7038 	strb.w	r7, [r5, #56]	; 0x38
    edc0:	303c      	adds	r0, #60	; 0x3c
    edc2:	f019 f84b 	bl	27e5c <memset>
    static InputManager *instance = new InputManager();
    edc6:	4b04      	ldr	r3, [pc, #16]	; (edd8 <_ZN9ClearCore12InputManager8InstanceEv+0x58>)
      m_oneTimeFlags(0) {}
    edc8:	f8a5 407c 	strh.w	r4, [r5, #124]	; 0x7c
    static InputManager *instance = new InputManager();
    edcc:	6037      	str	r7, [r6, #0]
    edce:	601d      	str	r5, [r3, #0]
    edd0:	4628      	mov	r0, r5
}
    edd2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    edd4:	20001fb4 	.word	0x20001fb4
    edd8:	20001fbc 	.word	0x20001fbc

0000eddc <_ZN9ClearCore12InputManager10InitializeEv>:

void InputManager::SetInputRegisters(volatile uint32_t *a, volatile uint32_t *b,
                                     volatile uint32_t *c) {
    m_inputPtrs[PORTA] = a ? a : &PORT->Group[PORTA].IN.reg;
    m_inputPtrs[PORTB] = b ? b : &PORT->Group[PORTB].IN.reg;
    m_inputPtrs[PORTC] = c ? c : &PORT->Group[PORTC].IN.reg;
    eddc:	4902      	ldr	r1, [pc, #8]	; (ede8 <_ZN9ClearCore12InputManager10InitializeEv+0xc>)
    edde:	4a03      	ldr	r2, [pc, #12]	; (edec <_ZN9ClearCore12InputManager10InitializeEv+0x10>)
    ede0:	4b03      	ldr	r3, [pc, #12]	; (edf0 <_ZN9ClearCore12InputManager10InitializeEv+0x14>)
    ede2:	e880 000e 	stmia.w	r0, {r1, r2, r3}
    ede6:	4770      	bx	lr
    ede8:	41008020 	.word	0x41008020
    edec:	410080a0 	.word	0x410080a0
    edf0:	41008120 	.word	0x41008120

0000edf4 <_ZN9ClearCore12InputManager15InterruptEnableEabb>:

    return true;
}

void InputManager::InterruptEnable(int8_t extInt, bool enable,
                                   bool clearPending) {
    edf4:	b510      	push	{r4, lr}
    if (extInt < 0 || extInt >= EIC_NUMBER_OF_INTERRUPTS) {
    edf6:	b2cc      	uxtb	r4, r1
    edf8:	2c0f      	cmp	r4, #15
    edfa:	d82e      	bhi.n	ee5a <_ZN9ClearCore12InputManager15InterruptEnableEabb+0x66>
        return; // Invalid external interrupt number
    }

    if (enable) {
    edfc:	b1b2      	cbz	r2, ee2c <_ZN9ClearCore12InputManager15InterruptEnableEabb+0x38>
        if (clearPending) {
    edfe:	bb6b      	cbnz	r3, ee5c <_ZN9ClearCore12InputManager15InterruptEnableEabb+0x68>
    ee00:	2301      	movs	r3, #1
    ee02:	fa03 f101 	lsl.w	r1, r3, r1
            // Clear any existing interrupt flag
            EIC->INTFLAG.reg = (1UL << extInt);
        }
        atomic_or_fetch(&m_interruptsMask, (1UL << extInt));
    ee06:	f100 0334 	add.w	r3, r0, #52	; 0x34
    ee0a:	f3bf 8f5b 	dmb	ish
    ee0e:	e853 2f00 	ldrex	r2, [r3]
    ee12:	430a      	orrs	r2, r1
    ee14:	e843 2400 	strex	r4, r2, [r3]
    ee18:	2c00      	cmp	r4, #0
    ee1a:	d1f8      	bne.n	ee0e <_ZN9ClearCore12InputManager15InterruptEnableEabb+0x1a>
    ee1c:	f3bf 8f5b 	dmb	ish
        if (m_interruptsEnabled) {
    ee20:	f890 3038 	ldrb.w	r3, [r0, #56]	; 0x38
    ee24:	b1cb      	cbz	r3, ee5a <_ZN9ClearCore12InputManager15InterruptEnableEabb+0x66>
            EIC->INTENSET.reg = (1UL << extInt);
    ee26:	4b10      	ldr	r3, [pc, #64]	; (ee68 <_ZN9ClearCore12InputManager15InterruptEnableEabb+0x74>)
    ee28:	6119      	str	r1, [r3, #16]
    ee2a:	bd10      	pop	{r4, pc}
        }
    }
    else {
        atomic_and_fetch(&m_interruptsMask, ~(1UL << extInt));
    ee2c:	2301      	movs	r3, #1
    ee2e:	fa03 f101 	lsl.w	r1, r3, r1
    ee32:	43ca      	mvns	r2, r1
    ee34:	f100 0334 	add.w	r3, r0, #52	; 0x34
    ee38:	f3bf 8f5b 	dmb	ish
    ee3c:	e853 4f00 	ldrex	r4, [r3]
    ee40:	4014      	ands	r4, r2
    ee42:	e843 4e00 	strex	lr, r4, [r3]
    ee46:	f1be 0f00 	cmp.w	lr, #0
    ee4a:	d1f7      	bne.n	ee3c <_ZN9ClearCore12InputManager15InterruptEnableEabb+0x48>
    ee4c:	f3bf 8f5b 	dmb	ish
        if (m_interruptsEnabled) {
    ee50:	f890 3038 	ldrb.w	r3, [r0, #56]	; 0x38
    ee54:	b10b      	cbz	r3, ee5a <_ZN9ClearCore12InputManager15InterruptEnableEabb+0x66>
            EIC->INTENCLR.reg = (1UL << extInt);
    ee56:	4b04      	ldr	r3, [pc, #16]	; (ee68 <_ZN9ClearCore12InputManager15InterruptEnableEabb+0x74>)
    ee58:	60d9      	str	r1, [r3, #12]
    ee5a:	bd10      	pop	{r4, pc}
            EIC->INTFLAG.reg = (1UL << extInt);
    ee5c:	2201      	movs	r2, #1
    ee5e:	4b02      	ldr	r3, [pc, #8]	; (ee68 <_ZN9ClearCore12InputManager15InterruptEnableEabb+0x74>)
    ee60:	fa02 f101 	lsl.w	r1, r2, r1
    ee64:	6159      	str	r1, [r3, #20]
    ee66:	e7ce      	b.n	ee06 <_ZN9ClearCore12InputManager15InterruptEnableEabb+0x12>
    ee68:	40002800 	.word	0x40002800

0000ee6c <_ZN9ClearCore12InputManager11EIC_HandlerEh>:
        EIC->INTENCLR.reg = atomic_load_n(&m_interruptsMask);
    }
}

void InputManager::EIC_Handler(uint8_t index) {
    if (index < EIC_NUMBER_OF_INTERRUPTS) {
    ee6c:	290f      	cmp	r1, #15
    ee6e:	dc14      	bgt.n	ee9a <_ZN9ClearCore12InputManager11EIC_HandlerEh+0x2e>
        // If this is a one time interrupt, disable the interrupt.
        if (m_oneTimeFlags & (1UL << index)) {
    ee70:	f8b0 307c 	ldrh.w	r3, [r0, #124]	; 0x7c
    ee74:	40cb      	lsrs	r3, r1
    ee76:	f013 0f01 	tst.w	r3, #1
            atomic_and_fetch(&m_interruptsMask, ~(1UL << index));
    ee7a:	f04f 0301 	mov.w	r3, #1
void InputManager::EIC_Handler(uint8_t index) {
    ee7e:	b510      	push	{r4, lr}
            atomic_and_fetch(&m_interruptsMask, ~(1UL << index));
    ee80:	fa03 f301 	lsl.w	r3, r3, r1
        if (m_oneTimeFlags & (1UL << index)) {
    ee84:	d10a      	bne.n	ee9c <_ZN9ClearCore12InputManager11EIC_HandlerEh+0x30>
            EIC->INTENCLR.reg = (1UL << index);
        }
        // Ack the interrupt early so that we don't miss subsequent events
        EIC->INTFLAG.reg = 1UL << index;
    ee86:	4a0f      	ldr	r2, [pc, #60]	; (eec4 <_ZN9ClearCore12InputManager11EIC_HandlerEh+0x58>)
        voidFuncPtr callback = m_interruptServiceRoutines[index];
    ee88:	eb00 0181 	add.w	r1, r0, r1, lsl #2
        EIC->INTFLAG.reg = 1UL << index;
    ee8c:	6153      	str	r3, [r2, #20]
        voidFuncPtr callback = m_interruptServiceRoutines[index];
    ee8e:	6bcb      	ldr	r3, [r1, #60]	; 0x3c
        if (callback != nullptr) {
    ee90:	b113      	cbz	r3, ee98 <_ZN9ClearCore12InputManager11EIC_HandlerEh+0x2c>
            callback();
        }
    }
}
    ee92:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
            callback();
    ee96:	4718      	bx	r3
    ee98:	bd10      	pop	{r4, pc}
    ee9a:	4770      	bx	lr
            atomic_and_fetch(&m_interruptsMask, ~(1UL << index));
    ee9c:	43dc      	mvns	r4, r3
    ee9e:	f100 0234 	add.w	r2, r0, #52	; 0x34
    eea2:	f3bf 8f5b 	dmb	ish
    eea6:	e852 ef00 	ldrex	lr, [r2]
    eeaa:	ea0e 0e04 	and.w	lr, lr, r4
    eeae:	e842 ec00 	strex	ip, lr, [r2]
    eeb2:	f1bc 0f00 	cmp.w	ip, #0
    eeb6:	d1f6      	bne.n	eea6 <_ZN9ClearCore12InputManager11EIC_HandlerEh+0x3a>
    eeb8:	f3bf 8f5b 	dmb	ish
            EIC->INTENCLR.reg = (1UL << index);
    eebc:	4a01      	ldr	r2, [pc, #4]	; (eec4 <_ZN9ClearCore12InputManager11EIC_HandlerEh+0x58>)
    eebe:	60d3      	str	r3, [r2, #12]
    eec0:	e7e1      	b.n	ee86 <_ZN9ClearCore12InputManager11EIC_HandlerEh+0x1a>
    eec2:	bf00      	nop
    eec4:	40002800 	.word	0x40002800

0000eec8 <_ZN9ClearCore12InputManager11UpdateBeginEv>:

void InputManager::UpdateBegin() {
    for (int8_t iPort = 0; iPort < CLEARCORE_PORT_MAX; iPort++) {
        uint32_t last = m_inputsUnfiltered[iPort];
        m_inputsUnfiltered[iPort] = *m_inputPtrs[iPort];
    eec8:	6803      	ldr	r3, [r0, #0]
        uint32_t last = m_inputsUnfiltered[iPort];
    eeca:	68c1      	ldr	r1, [r0, #12]
        m_inputsUnfiltered[iPort] = *m_inputPtrs[iPort];
    eecc:	681b      	ldr	r3, [r3, #0]
    eece:	60c3      	str	r3, [r0, #12]
    eed0:	6842      	ldr	r2, [r0, #4]
        m_inputsUnfilteredChanges[iPort] = m_inputsUnfiltered[iPort] ^ last;
    eed2:	404b      	eors	r3, r1
    eed4:	6183      	str	r3, [r0, #24]
        m_inputsUnfiltered[iPort] = *m_inputPtrs[iPort];
    eed6:	6812      	ldr	r2, [r2, #0]
        uint32_t last = m_inputsUnfiltered[iPort];
    eed8:	6903      	ldr	r3, [r0, #16]
        m_inputsUnfiltered[iPort] = *m_inputPtrs[iPort];
    eeda:	6881      	ldr	r1, [r0, #8]
    eedc:	6102      	str	r2, [r0, #16]
        m_inputsUnfilteredChanges[iPort] = m_inputsUnfiltered[iPort] ^ last;
    eede:	4053      	eors	r3, r2
    eee0:	61c3      	str	r3, [r0, #28]
        m_inputsUnfiltered[iPort] = *m_inputPtrs[iPort];
    eee2:	680a      	ldr	r2, [r1, #0]
        uint32_t last = m_inputsUnfiltered[iPort];
    eee4:	6943      	ldr	r3, [r0, #20]
        m_inputsUnfiltered[iPort] = *m_inputPtrs[iPort];
    eee6:	6142      	str	r2, [r0, #20]
        m_inputsUnfilteredChanges[iPort] = m_inputsUnfiltered[iPort] ^ last;
    eee8:	4053      	eors	r3, r2
    eeea:	6203      	str	r3, [r0, #32]
    eeec:	4770      	bx	lr
    eeee:	bf00      	nop

0000eef0 <_ZN9ClearCore12InputManager9UpdateEndEv>:
    }
}

void InputManager::UpdateEnd() {
    eef0:	b500      	push	{lr}
    atomic_fetch_or(&m_inputRegRisen.reg,
    eef2:	6a81      	ldr	r1, [r0, #40]	; 0x28
    eef4:	6a43      	ldr	r3, [r0, #36]	; 0x24
                    m_inputRegRT.reg & (~m_inputRegLast.reg));
    eef6:	f3bf 8f5b 	dmb	ish
    eefa:	f100 022c 	add.w	r2, r0, #44	; 0x2c
    atomic_fetch_or(&m_inputRegRisen.reg,
    eefe:	ea23 0301 	bic.w	r3, r3, r1
                    m_inputRegRT.reg & (~m_inputRegLast.reg));
    ef02:	e852 1f00 	ldrex	r1, [r2]
    ef06:	4319      	orrs	r1, r3
    ef08:	e842 1e00 	strex	lr, r1, [r2]
    ef0c:	f1be 0f00 	cmp.w	lr, #0
    ef10:	d1f7      	bne.n	ef02 <_ZN9ClearCore12InputManager9UpdateEndEv+0x12>
    ef12:	f3bf 8f5b 	dmb	ish
    atomic_fetch_or(&m_inputRegFallen.reg,
    ef16:	6a41      	ldr	r1, [r0, #36]	; 0x24
    ef18:	6a83      	ldr	r3, [r0, #40]	; 0x28
                    (~m_inputRegRT.reg) & m_inputRegLast.reg);
    ef1a:	f3bf 8f5b 	dmb	ish
    ef1e:	f100 0230 	add.w	r2, r0, #48	; 0x30
    atomic_fetch_or(&m_inputRegFallen.reg,
    ef22:	ea23 0301 	bic.w	r3, r3, r1
                    (~m_inputRegRT.reg) & m_inputRegLast.reg);
    ef26:	e852 1f00 	ldrex	r1, [r2]
    ef2a:	4319      	orrs	r1, r3
    ef2c:	e842 1e00 	strex	lr, r1, [r2]
    ef30:	f1be 0f00 	cmp.w	lr, #0
    ef34:	d1f7      	bne.n	ef26 <_ZN9ClearCore12InputManager9UpdateEndEv+0x36>
    ef36:	f3bf 8f5b 	dmb	ish
    m_inputRegLast.reg = m_inputRegRT.reg;
    ef3a:	6a43      	ldr	r3, [r0, #36]	; 0x24
    ef3c:	6283      	str	r3, [r0, #40]	; 0x28
    ef3e:	f85d fb04 	ldr.w	pc, [sp], #4
    ef42:	bf00      	nop

0000ef44 <_GLOBAL__sub_I__ZN9ClearCore8InputMgrE>:
    SysConnectorState retVal;
    retVal.reg = atomic_load_n(&m_inputRegRT.reg) & mask.reg;
    return retVal;
}

} // ClearCore namespace
    ef44:	b508      	push	{r3, lr}
InputManager &InputMgr = InputManager::Instance();
    ef46:	f7ff ff1b 	bl	ed80 <_ZN9ClearCore12InputManager8InstanceEv>
    ef4a:	4b01      	ldr	r3, [pc, #4]	; (ef50 <_GLOBAL__sub_I__ZN9ClearCore8InputMgrE+0xc>)
    ef4c:	6018      	str	r0, [r3, #0]
    ef4e:	bd08      	pop	{r3, pc}
    ef50:	20001fb8 	.word	0x20001fb8

0000ef54 <_ZN9ClearCore11MotorDriver4TypeEv>:
    }
    ef54:	2006      	movs	r0, #6
    ef56:	4770      	bx	lr

0000ef58 <_ZN9ClearCore11MotorDriver10IsWritableEv>:
    }
    ef58:	2001      	movs	r0, #1
    ef5a:	4770      	bx	lr

0000ef5c <_ZN9ClearCore11MotorDriver11IsInHwFaultEv>:
        return (volatile bool &)m_inFault;
    ef5c:	f890 0114 	ldrb.w	r0, [r0, #276]	; 0x114
    }
    ef60:	4770      	bx	lr
    ef62:	bf00      	nop

0000ef64 <_ZN9ClearCore11MotorDriver4ModeEv>:
    }
    ef64:	7980      	ldrb	r0, [r0, #6]
    ef66:	4770      	bx	lr

0000ef68 <_ZN9ClearCore11MotorDriver4ModeENS_9Connector14ConnectorModesE>:
    m_statusRegMotorFallen.reg = 0;

    m_initialized = true;
}

bool MotorDriver::Mode(ConnectorModes newMode) {
    ef68:	b538      	push	{r3, r4, r5, lr}
    // Bail out if we are already in the requested mode
    if (newMode == m_mode) {
    ef6a:	7983      	ldrb	r3, [r0, #6]
    ef6c:	428b      	cmp	r3, r1
    ef6e:	f000 80a7 	beq.w	f0c0 <_ZN9ClearCore11MotorDriver4ModeENS_9Connector14ConnectorModesE+0x158>
        return true;
    }

    switch (newMode) {
    ef72:	f1a1 0309 	sub.w	r3, r1, #9
    ef76:	460d      	mov	r5, r1
    ef78:	4604      	mov	r4, r0
    ef7a:	2b03      	cmp	r3, #3
    ef7c:	f200 80a2 	bhi.w	f0c4 <_ZN9ClearCore11MotorDriver4ModeENS_9Connector14ConnectorModesE+0x15c>
    ef80:	e8df f003 	tbb	[pc, r3]
    ef84:	0246467a 	.word	0x0246467a
        case CPM_MODE_A_PWM_B_PWM:
            // Stop any active S&D command
            MoveStopAbrupt();
    ef88:	3030      	adds	r0, #48	; 0x30
    ef8a:	f7fb fc5d 	bl	a848 <_ZN9ClearCore13StepGenerator14MoveStopAbruptEv>
  __ASM volatile ("cpsid i" : : : "memory");
    ef8e:	b672      	cpsid	i

    return true;
}

void MotorDriver::UpdateADuty() {
    if (*m_aTccBuffer == m_aDutyCnt) {
    ef90:	f8d4 00b4 	ldr.w	r0, [r4, #180]	; 0xb4
    ef94:	6803      	ldr	r3, [r0, #0]
            m_aDutyCnt = 0;
    ef96:	2200      	movs	r2, #0
    ef98:	f8a4 2110 	strh.w	r2, [r4, #272]	; 0x110
    if (*m_aTccBuffer == m_aDutyCnt) {
    ef9c:	b13b      	cbz	r3, efae <_ZN9ClearCore11MotorDriver4ModeENS_9Connector14ConnectorModesE+0x46>
    ef9e:	f8d4 10c4 	ldr.w	r1, [r4, #196]	; 0xc4
    efa2:	f8d4 20c0 	ldr.w	r2, [r4, #192]	; 0xc0
        return;
    }
    while (*m_aTccSyncReg & m_aTccSyncMask) {
    efa6:	680b      	ldr	r3, [r1, #0]
    efa8:	4013      	ands	r3, r2
    efaa:	d1fc      	bne.n	efa6 <_ZN9ClearCore11MotorDriver4ModeENS_9Connector14ConnectorModesE+0x3e>
        continue;
    }
    *m_aTccBuffer = m_aDutyCnt;
    efac:	6003      	str	r3, [r0, #0]
}

void MotorDriver::UpdateBDuty() {
    if (*m_bTccBuffer == m_bDutyCnt) {
    efae:	f8d4 00bc 	ldr.w	r0, [r4, #188]	; 0xbc
    efb2:	6803      	ldr	r3, [r0, #0]
            m_bDutyCnt = 0;
    efb4:	2200      	movs	r2, #0
    efb6:	f8a4 2112 	strh.w	r2, [r4, #274]	; 0x112
    if (*m_bTccBuffer == m_bDutyCnt) {
    efba:	b13b      	cbz	r3, efcc <_ZN9ClearCore11MotorDriver4ModeENS_9Connector14ConnectorModesE+0x64>
    efbc:	f8d4 10cc 	ldr.w	r1, [r4, #204]	; 0xcc
    efc0:	f8d4 20c8 	ldr.w	r2, [r4, #200]	; 0xc8
        return;
    }
    while (*m_bTccSyncReg & m_bTccSyncMask) {
    efc4:	680b      	ldr	r3, [r1, #0]
    efc6:	4013      	ands	r3, r2
    efc8:	d1fc      	bne.n	efc4 <_ZN9ClearCore11MotorDriver4ModeENS_9Connector14ConnectorModesE+0x5c>
        continue;
    }
    *m_bTccBuffer = m_bDutyCnt;
    efca:	6003      	str	r3, [r0, #0]
            PMUX_ENABLE(m_aInfo->gpioPort, m_aInfo->gpioPin);
    efcc:	f8d4 10a4 	ldr.w	r1, [r4, #164]	; 0xa4
    efd0:	4a3d      	ldr	r2, [pc, #244]	; (f0c8 <_ZN9ClearCore11MotorDriver4ModeENS_9Connector14ConnectorModesE+0x160>)
    efd2:	f991 3001 	ldrsb.w	r3, [r1, #1]
    efd6:	7889      	ldrb	r1, [r1, #2]
    efd8:	eb02 13c3 	add.w	r3, r2, r3, lsl #7
    efdc:	440b      	add	r3, r1
            m_mode = newMode;
    efde:	200c      	movs	r0, #12
            PMUX_ENABLE(m_aInfo->gpioPort, m_aInfo->gpioPin);
    efe0:	f893 1040 	ldrb.w	r1, [r3, #64]	; 0x40
    efe4:	f041 0101 	orr.w	r1, r1, #1
    efe8:	f883 1040 	strb.w	r1, [r3, #64]	; 0x40
            PMUX_ENABLE(m_bInfo->gpioPort, m_bInfo->gpioPin);
    efec:	f8d4 10a8 	ldr.w	r1, [r4, #168]	; 0xa8
    eff0:	f991 3001 	ldrsb.w	r3, [r1, #1]
    eff4:	7889      	ldrb	r1, [r1, #2]
    eff6:	eb02 13c3 	add.w	r3, r2, r3, lsl #7
    effa:	440b      	add	r3, r1
    effc:	f893 2040 	ldrb.w	r2, [r3, #64]	; 0x40
    f000:	f042 0201 	orr.w	r2, r2, #1
    f004:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
            m_mode = newMode;
    f008:	71a0      	strb	r0, [r4, #6]
  __ASM volatile ("cpsie i" : : : "memory");
    f00a:	b662      	cpsie	i
    return true;
    f00c:	2001      	movs	r0, #1
    f00e:	bd38      	pop	{r3, r4, r5, pc}
            MoveStopAbrupt();
    f010:	3030      	adds	r0, #48	; 0x30
    f012:	f7fb fc19 	bl	a848 <_ZN9ClearCore13StepGenerator14MoveStopAbruptEv>
  __ASM volatile ("cpsid i" : : : "memory");
    f016:	b672      	cpsid	i
    if (*m_bTccBuffer == m_bDutyCnt) {
    f018:	f8d4 00bc 	ldr.w	r0, [r4, #188]	; 0xbc
    f01c:	6803      	ldr	r3, [r0, #0]
            m_bDutyCnt = 0;
    f01e:	2200      	movs	r2, #0
    f020:	f8a4 2112 	strh.w	r2, [r4, #274]	; 0x112
    if (*m_bTccBuffer == m_bDutyCnt) {
    f024:	b13b      	cbz	r3, f036 <_ZN9ClearCore11MotorDriver4ModeENS_9Connector14ConnectorModesE+0xce>
    f026:	f8d4 10cc 	ldr.w	r1, [r4, #204]	; 0xcc
    f02a:	f8d4 20c8 	ldr.w	r2, [r4, #200]	; 0xc8
    while (*m_bTccSyncReg & m_bTccSyncMask) {
    f02e:	680b      	ldr	r3, [r1, #0]
    f030:	4013      	ands	r3, r2
    f032:	d1fc      	bne.n	f02e <_ZN9ClearCore11MotorDriver4ModeENS_9Connector14ConnectorModesE+0xc6>
    *m_bTccBuffer = m_bDutyCnt;
    f034:	6003      	str	r3, [r0, #0]
            PMUX_DISABLE(m_aInfo->gpioPort, m_aInfo->gpioPin);
    f036:	f8d4 10a4 	ldr.w	r1, [r4, #164]	; 0xa4
    f03a:	4a23      	ldr	r2, [pc, #140]	; (f0c8 <_ZN9ClearCore11MotorDriver4ModeENS_9Connector14ConnectorModesE+0x160>)
    f03c:	f991 3001 	ldrsb.w	r3, [r1, #1]
    f040:	7889      	ldrb	r1, [r1, #2]
    f042:	eb02 13c3 	add.w	r3, r2, r3, lsl #7
    f046:	440b      	add	r3, r1
    f048:	f893 1040 	ldrb.w	r1, [r3, #64]	; 0x40
    f04c:	f36f 0100 	bfc	r1, #0, #1
    f050:	f883 1040 	strb.w	r1, [r3, #64]	; 0x40
            PMUX_ENABLE(m_bInfo->gpioPort, m_bInfo->gpioPin);
    f054:	f8d4 10a8 	ldr.w	r1, [r4, #168]	; 0xa8
    f058:	f991 3001 	ldrsb.w	r3, [r1, #1]
    f05c:	7889      	ldrb	r1, [r1, #2]
    f05e:	eb02 13c3 	add.w	r3, r2, r3, lsl #7
    f062:	440b      	add	r3, r1
    f064:	f893 2040 	ldrb.w	r2, [r3, #64]	; 0x40
    f068:	f042 0201 	orr.w	r2, r2, #1
    f06c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
            m_mode = newMode;
    f070:	71a5      	strb	r5, [r4, #6]
  __ASM volatile ("cpsie i" : : : "memory");
    f072:	b662      	cpsie	i
    return true;
    f074:	2001      	movs	r0, #1
    f076:	bd38      	pop	{r3, r4, r5, pc}
            MoveStopAbrupt();
    f078:	3030      	adds	r0, #48	; 0x30
    f07a:	f7fb fbe5 	bl	a848 <_ZN9ClearCore13StepGenerator14MoveStopAbruptEv>
            PMUX_DISABLE(m_aInfo->gpioPort, m_aInfo->gpioPin);
    f07e:	f8d4 10a4 	ldr.w	r1, [r4, #164]	; 0xa4
    f082:	4a11      	ldr	r2, [pc, #68]	; (f0c8 <_ZN9ClearCore11MotorDriver4ModeENS_9Connector14ConnectorModesE+0x160>)
    f084:	f991 3001 	ldrsb.w	r3, [r1, #1]
    f088:	7889      	ldrb	r1, [r1, #2]
    f08a:	eb02 13c3 	add.w	r3, r2, r3, lsl #7
    f08e:	440b      	add	r3, r1
            m_mode = CPM_MODE_A_DIRECT_B_DIRECT;
    f090:	2509      	movs	r5, #9
            PMUX_DISABLE(m_aInfo->gpioPort, m_aInfo->gpioPin);
    f092:	f893 1040 	ldrb.w	r1, [r3, #64]	; 0x40
    f096:	f36f 0100 	bfc	r1, #0, #1
    f09a:	f883 1040 	strb.w	r1, [r3, #64]	; 0x40
            PMUX_DISABLE(m_bInfo->gpioPort, m_bInfo->gpioPin);
    f09e:	f8d4 10a8 	ldr.w	r1, [r4, #168]	; 0xa8
    f0a2:	f991 3001 	ldrsb.w	r3, [r1, #1]
    f0a6:	7889      	ldrb	r1, [r1, #2]
    f0a8:	eb02 13c3 	add.w	r3, r2, r3, lsl #7
    f0ac:	440b      	add	r3, r1
    return true;
    f0ae:	2001      	movs	r0, #1
            PMUX_DISABLE(m_bInfo->gpioPort, m_bInfo->gpioPin);
    f0b0:	f893 2040 	ldrb.w	r2, [r3, #64]	; 0x40
    f0b4:	f36f 0200 	bfc	r2, #0, #1
    f0b8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
            m_mode = CPM_MODE_A_DIRECT_B_DIRECT;
    f0bc:	71a5      	strb	r5, [r4, #6]
            break;
    f0be:	bd38      	pop	{r3, r4, r5, pc}
        return true;
    f0c0:	2001      	movs	r0, #1
    f0c2:	bd38      	pop	{r3, r4, r5, pc}
            return false;
    f0c4:	2000      	movs	r0, #0
}
    f0c6:	bd38      	pop	{r3, r4, r5, pc}
    f0c8:	41008000 	.word	0x41008000

0000f0cc <_ZN9ClearCore11MotorDriver15OutputDirectionEv>:
        if (m_mode == Connector::CPM_MODE_STEP_AND_DIR &&
    f0cc:	7983      	ldrb	r3, [r0, #6]
    f0ce:	2b0a      	cmp	r3, #10
    f0d0:	d00f      	beq.n	f0f2 <_ZN9ClearCore11MotorDriver15OutputDirectionEv+0x26>
            DATA_OUTPUT_STATE(m_aInfo->gpioPort, m_aDataMask, !Direction());
    f0d2:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
    f0d6:	b1a3      	cbz	r3, f102 <_ZN9ClearCore11MotorDriver15OutputDirectionEv+0x36>
    f0d8:	f8d0 30a4 	ldr.w	r3, [r0, #164]	; 0xa4
    f0dc:	f8d0 20b0 	ldr.w	r2, [r0, #176]	; 0xb0
    f0e0:	f993 3001 	ldrsb.w	r3, [r3, #1]
    f0e4:	01db      	lsls	r3, r3, #7
    f0e6:	f103 4382 	add.w	r3, r3, #1090519040	; 0x41000000
    f0ea:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
    f0ee:	615a      	str	r2, [r3, #20]
    f0f0:	4770      	bx	lr
                m_polarityInversions.bit.directionInverted) {
    f0f2:	f890 30fc 	ldrb.w	r3, [r0, #252]	; 0xfc
        if (m_mode == Connector::CPM_MODE_STEP_AND_DIR &&
    f0f6:	079b      	lsls	r3, r3, #30
    f0f8:	d5eb      	bpl.n	f0d2 <_ZN9ClearCore11MotorDriver15OutputDirectionEv+0x6>
            DATA_OUTPUT_STATE(m_aInfo->gpioPort, m_aDataMask, Direction());
    f0fa:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
    f0fe:	2b00      	cmp	r3, #0
    f100:	d0ea      	beq.n	f0d8 <_ZN9ClearCore11MotorDriver15OutputDirectionEv+0xc>
            DATA_OUTPUT_STATE(m_aInfo->gpioPort, m_aDataMask, !Direction());
    f102:	f8d0 30a4 	ldr.w	r3, [r0, #164]	; 0xa4
    f106:	f8d0 20b0 	ldr.w	r2, [r0, #176]	; 0xb0
    f10a:	f993 3001 	ldrsb.w	r3, [r3, #1]
    f10e:	01db      	lsls	r3, r3, #7
    f110:	f103 4382 	add.w	r3, r3, #1090519040	; 0x41000000
    f114:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
    f118:	619a      	str	r2, [r3, #24]
    f11a:	4770      	bx	lr

0000f11c <_ZThn48_N9ClearCore11MotorDriver15OutputDirectionEv>:
    virtual void OutputDirection() override {
    f11c:	f1a0 0030 	sub.w	r0, r0, #48	; 0x30
    f120:	e7d4      	b.n	f0cc <_ZN9ClearCore11MotorDriver15OutputDirectionEv>
    f122:	bf00      	nop

0000f124 <_ZN9ClearCore11MotorDriverC1ENS_13ShiftRegister5MasksEPK15PeripheralRouteS5_S5_tt>:
MotorDriver::MotorDriver(ShiftRegister::Masks enableMask,
    f124:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    f128:	9f08      	ldr	r7, [sp, #32]
    f12a:	f8bd 9024 	ldrh.w	r9, [sp, #36]	; 0x24
    f12e:	f8bd 8028 	ldrh.w	r8, [sp, #40]	; 0x28
    f132:	4604      	mov	r4, r0
    f134:	4616      	mov	r6, r2
    f136:	468a      	mov	sl, r1
      m_clearFaultHlfbTimer(0) {
    f138:	463a      	mov	r2, r7
    f13a:	2100      	movs	r1, #0
MotorDriver::MotorDriver(ShiftRegister::Masks enableMask,
    f13c:	461d      	mov	r5, r3
      m_clearFaultHlfbTimer(0) {
    f13e:	f7fe fab9 	bl	d6b4 <_ZN9ClearCore9DigitalInC1ENS_13ShiftRegister5MasksEPK15PeripheralRoute>
    f142:	f104 0030 	add.w	r0, r4, #48	; 0x30
    f146:	f7fb fb4d 	bl	a7e4 <_ZN9ClearCore13StepGeneratorC1Ev>
    f14a:	4b5c      	ldr	r3, [pc, #368]	; (f2bc <_ZN9ClearCore11MotorDriverC1ENS_13ShiftRegister5MasksEPK15PeripheralRouteS5_S5_tt+0x198>)
    f14c:	f8c4 a0a0 	str.w	sl, [r4, #160]	; 0xa0
    f150:	f103 023c 	add.w	r2, r3, #60	; 0x3c
    f154:	f8c4 60a4 	str.w	r6, [r4, #164]	; 0xa4
    f158:	f8c4 70ac 	str.w	r7, [r4, #172]	; 0xac
    f15c:	6322      	str	r2, [r4, #48]	; 0x30
    f15e:	f8c4 50a8 	str.w	r5, [r4, #168]	; 0xa8
    f162:	6023      	str	r3, [r4, #0]
      m_aDataMask(1UL << aInfo->gpioPin),
    f164:	78b3      	ldrb	r3, [r6, #2]
      m_clearFaultHlfbTimer(0) {
    f166:	f8df a160 	ldr.w	sl, [pc, #352]	; f2c8 <_ZN9ClearCore11MotorDriverC1ENS_13ShiftRegister5MasksEPK15PeripheralRouteS5_S5_tt+0x1a4>
    Tcc *theTcc = (tcc_modules[m_aInfo->tccNum]);
    f16a:	4f55      	ldr	r7, [pc, #340]	; (f2c0 <_ZN9ClearCore11MotorDriverC1ENS_13ShiftRegister5MasksEPK15PeripheralRouteS5_S5_tt+0x19c>)
      m_aDataMask(1UL << aInfo->gpioPin),
    f16c:	2101      	movs	r1, #1
    f16e:	fa01 f303 	lsl.w	r3, r1, r3
      m_clearFaultHlfbTimer(0) {
    f172:	f8c4 30b0 	str.w	r3, [r4, #176]	; 0xb0
      m_bDataMask(1UL << bInfo->gpioPin),
    f176:	78ab      	ldrb	r3, [r5, #2]
      m_clearFaultHlfbTimer(0) {
    f178:	f884 90d6 	strb.w	r9, [r4, #214]	; 0xd6
      m_bDataMask(1UL << bInfo->gpioPin),
    f17c:	fa01 f303 	lsl.w	r3, r1, r3
      m_clearFaultHlfbTimer(0) {
    f180:	f04f 0e02 	mov.w	lr, #2
    f184:	2200      	movs	r2, #0
    f186:	f64f 70ff 	movw	r0, #65535	; 0xffff
    f18a:	f8c4 30b8 	str.w	r3, [r4, #184]	; 0xb8
    f18e:	f8a4 e0e2 	strh.w	lr, [r4, #226]	; 0xe2
    f192:	f04f 33ff 	mov.w	r3, #4294967295
    f196:	f04f 0e19 	mov.w	lr, #25
    f19a:	f04f 0903 	mov.w	r9, #3
    f19e:	f04f 0c7d 	mov.w	ip, #125	; 0x7d
    f1a2:	f884 20d8 	strb.w	r2, [r4, #216]	; 0xd8
    f1a6:	f8a4 20da 	strh.w	r2, [r4, #218]	; 0xda
    f1aa:	f8a4 20dc 	strh.w	r2, [r4, #220]	; 0xdc
    f1ae:	f8a4 20de 	strh.w	r2, [r4, #222]	; 0xde
    f1b2:	f8a4 20e0 	strh.w	r2, [r4, #224]	; 0xe0
    f1b6:	f884 20e4 	strb.w	r2, [r4, #228]	; 0xe4
    f1ba:	f884 20f5 	strb.w	r2, [r4, #245]	; 0xf5
    f1be:	f884 20f6 	strb.w	r2, [r4, #246]	; 0xf6
            reg = val;
    f1c2:	f8a4 20fc 	strh.w	r2, [r4, #252]	; 0xfc
    f1c6:	f884 2100 	strb.w	r2, [r4, #256]	; 0x100
    f1ca:	f884 2101 	strb.w	r2, [r4, #257]	; 0x101
    f1ce:	f8a4 00d0 	strh.w	r0, [r4, #208]	; 0xd0
    f1d2:	f8a4 00d2 	strh.w	r0, [r4, #210]	; 0xd2
    f1d6:	f8a4 00d4 	strh.w	r0, [r4, #212]	; 0xd4
    f1da:	f8c4 30ec 	str.w	r3, [r4, #236]	; 0xec
    f1de:	f884 80d7 	strb.w	r8, [r4, #215]	; 0xd7
    f1e2:	f8c4 a0f0 	str.w	sl, [r4, #240]	; 0xf0
    f1e6:	f884 90f4 	strb.w	r9, [r4, #244]	; 0xf4
    f1ea:	f8a4 c0f8 	strh.w	ip, [r4, #248]	; 0xf8
    f1ee:	f8c4 e0e8 	str.w	lr, [r4, #232]	; 0xe8
    f1f2:	f8c4 2104 	str.w	r2, [r4, #260]	; 0x104
    f1f6:	f8c4 2108 	str.w	r2, [r4, #264]	; 0x108
    f1fa:	f8c4 2110 	str.w	r2, [r4, #272]	; 0x110
    f1fe:	f884 2114 	strb.w	r2, [r4, #276]	; 0x114
            reg = val;
    f202:	f8c4 2118 	str.w	r2, [r4, #280]	; 0x118
    f206:	f8c4 211c 	str.w	r2, [r4, #284]	; 0x11c
    f20a:	f8c4 2120 	str.w	r2, [r4, #288]	; 0x120
    f20e:	f8c4 2124 	str.w	r2, [r4, #292]	; 0x124
            reg = val;
    f212:	f8c4 2128 	str.w	r2, [r4, #296]	; 0x128
    f216:	f8c4 212c 	str.w	r2, [r4, #300]	; 0x12c
    f21a:	f8c4 2130 	str.w	r2, [r4, #304]	; 0x130
    f21e:	f884 213c 	strb.w	r2, [r4, #316]	; 0x13c
    f222:	f884 213d 	strb.w	r2, [r4, #317]	; 0x13d
    f226:	f884 213e 	strb.w	r2, [r4, #318]	; 0x13e
    f22a:	f8c4 2140 	str.w	r2, [r4, #320]	; 0x140
    m_interruptAvail = true;
    f22e:	7661      	strb	r1, [r4, #25]
      m_clearFaultHlfbTimer(0) {
    f230:	f8c4 e10c 	str.w	lr, [r4, #268]	; 0x10c
    f234:	f8c4 3134 	str.w	r3, [r4, #308]	; 0x134
    f238:	f8c4 3138 	str.w	r3, [r4, #312]	; 0x138
    Tcc *theTcc = (tcc_modules[m_aInfo->tccNum]);
    f23c:	7b33      	ldrb	r3, [r6, #12]
    uint8_t ccIndex = m_aInfo->tccPadNum % TccCcNum(m_aInfo->tccNum);
    f23e:	7b76      	ldrb	r6, [r6, #13]
    Tcc *theTcc = (tcc_modules[m_aInfo->tccNum]);
    f240:	f857 0023 	ldr.w	r0, [r7, r3, lsl #2]
    f244:	2b04      	cmp	r3, #4
    f246:	bf9c      	itt	ls
    f248:	4a1e      	ldrls	r2, [pc, #120]	; (f2c4 <_ZN9ClearCore11MotorDriverC1ENS_13ShiftRegister5MasksEPK15PeripheralRouteS5_S5_tt+0x1a0>)
    f24a:	5cd2      	ldrbls	r2, [r2, r3]
    uint8_t ccIndex = m_aInfo->tccPadNum % TccCcNum(m_aInfo->tccNum);
    f24c:	fbb6 f1f2 	udiv	r1, r6, r2
    f250:	fb02 6211 	mls	r2, r2, r1, r6
    m_aTccSyncMask = TCC_SYNCBUSY_CC(1UL << ccIndex);
    f254:	f44f 7380 	mov.w	r3, #256	; 0x100
    uint8_t ccIndex = m_aInfo->tccPadNum % TccCcNum(m_aInfo->tccNum);
    f258:	b2d2      	uxtb	r2, r2
    m_aTccBuffer = &theTcc->CCBUF[ccIndex].reg;
    f25a:	f102 011c 	add.w	r1, r2, #28
    m_aTccSyncMask = TCC_SYNCBUSY_CC(1UL << ccIndex);
    f25e:	fa03 f202 	lsl.w	r2, r3, r2
    m_aTccBuffer = &theTcc->CCBUF[ccIndex].reg;
    f262:	eb00 0181 	add.w	r1, r0, r1, lsl #2
    m_aTccSyncMask = TCC_SYNCBUSY_CC(1UL << ccIndex);
    f266:	f402 527c 	and.w	r2, r2, #16128	; 0x3f00
    m_aTccSyncReg = &theTcc->SYNCBUSY.reg;
    f26a:	3008      	adds	r0, #8
    m_aTccBuffer = &theTcc->CCBUF[ccIndex].reg;
    f26c:	f8c4 10b4 	str.w	r1, [r4, #180]	; 0xb4
    m_aTccSyncReg = &theTcc->SYNCBUSY.reg;
    f270:	f8c4 00c4 	str.w	r0, [r4, #196]	; 0xc4
    m_aTccSyncMask = TCC_SYNCBUSY_CC(1UL << ccIndex);
    f274:	f8c4 20c0 	str.w	r2, [r4, #192]	; 0xc0
    theTcc = (tcc_modules[m_bInfo->tccNum]);
    f278:	7b2a      	ldrb	r2, [r5, #12]
    ccIndex = m_bInfo->tccPadNum % TccCcNum(m_bInfo->tccNum);
    f27a:	7b68      	ldrb	r0, [r5, #13]
    theTcc = (tcc_modules[m_bInfo->tccNum]);
    f27c:	f857 1022 	ldr.w	r1, [r7, r2, lsl #2]
    f280:	2a04      	cmp	r2, #4
    f282:	bf9a      	itte	ls
    f284:	4b0f      	ldrls	r3, [pc, #60]	; (f2c4 <_ZN9ClearCore11MotorDriverC1ENS_13ShiftRegister5MasksEPK15PeripheralRouteS5_S5_tt+0x1a0>)
    f286:	5c9a      	ldrbls	r2, [r3, r2]
    ccIndex = m_bInfo->tccPadNum % TccCcNum(m_bInfo->tccNum);
    f288:	2200      	movhi	r2, #0
    f28a:	fbb0 f3f2 	udiv	r3, r0, r2
    f28e:	fb02 0313 	mls	r3, r2, r3, r0
    f292:	b2db      	uxtb	r3, r3
    m_bTccSyncMask = TCC_SYNCBUSY_CC(1UL << ccIndex);
    f294:	f44f 7280 	mov.w	r2, #256	; 0x100
    m_bTccBuffer = &theTcc->CCBUF[ccIndex].reg;
    f298:	f103 001c 	add.w	r0, r3, #28
    m_bTccSyncMask = TCC_SYNCBUSY_CC(1UL << ccIndex);
    f29c:	fa02 f303 	lsl.w	r3, r2, r3
    m_bTccBuffer = &theTcc->CCBUF[ccIndex].reg;
    f2a0:	eb01 0080 	add.w	r0, r1, r0, lsl #2
    m_bTccSyncMask = TCC_SYNCBUSY_CC(1UL << ccIndex);
    f2a4:	f403 537c 	and.w	r3, r3, #16128	; 0x3f00
    m_bTccSyncReg = &theTcc->SYNCBUSY.reg;
    f2a8:	3108      	adds	r1, #8
    m_bTccBuffer = &theTcc->CCBUF[ccIndex].reg;
    f2aa:	f8c4 00bc 	str.w	r0, [r4, #188]	; 0xbc
    m_bTccSyncReg = &theTcc->SYNCBUSY.reg;
    f2ae:	f8c4 10cc 	str.w	r1, [r4, #204]	; 0xcc
    m_bTccSyncMask = TCC_SYNCBUSY_CC(1UL << ccIndex);
    f2b2:	f8c4 30c8 	str.w	r3, [r4, #200]	; 0xc8
}
    f2b6:	4620      	mov	r0, r4
    f2b8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    f2bc:	0002d3b8 	.word	0x0002d3b8
    f2c0:	0002d39c 	.word	0x0002d39c
    f2c4:	0002d394 	.word	0x0002d394
    f2c8:	c61c3c00 	.word	0xc61c3c00

0000f2cc <_ZN9ClearCore11MotorDriver13EnableRequestEb>:
void MotorDriver::EnableRequest(bool value) {
    f2cc:	b530      	push	{r4, r5, lr}
    bool wasDisabled = !(m_isEnabled || m_isEnabling);
    f2ce:	f890 312e 	ldrb.w	r3, [r0, #302]	; 0x12e
void MotorDriver::EnableRequest(bool value) {
    f2d2:	b083      	sub	sp, #12
    f2d4:	4604      	mov	r4, r0
    bool wasDisabled = !(m_isEnabled || m_isEnabling);
    f2d6:	2b00      	cmp	r3, #0
    f2d8:	d171      	bne.n	f3be <_ZN9ClearCore11MotorDriver13EnableRequestEb+0xf2>
    f2da:	f890 312d 	ldrb.w	r3, [r0, #301]	; 0x12d
    f2de:	f083 0301 	eor.w	r3, r3, #1
    if (value != m_enableRequestedState || m_inFault) {
    f2e2:	f894 2100 	ldrb.w	r2, [r4, #256]	; 0x100
    bool wasPulsing = m_enableTriggerActive;
    f2e6:	f894 5101 	ldrb.w	r5, [r4, #257]	; 0x101
    if (value != m_enableRequestedState || m_inFault) {
    f2ea:	428a      	cmp	r2, r1
    f2ec:	d031      	beq.n	f352 <_ZN9ClearCore11MotorDriver13EnableRequestEb+0x86>
    f2ee:	f894 0114 	ldrb.w	r0, [r4, #276]	; 0x114
    m_enableRequestedState = value;
    f2f2:	f884 1100 	strb.w	r1, [r4, #256]	; 0x100
        m_enableTriggerActive = false;
    f2f6:	2200      	movs	r2, #0
    f2f8:	f884 2101 	strb.w	r2, [r4, #257]	; 0x101
        m_enableTriggerPulseCount = 0;
    f2fc:	f8c4 2108 	str.w	r2, [r4, #264]	; 0x108
    value = !m_inFault && value;
    f300:	b358      	cbz	r0, f35a <_ZN9ClearCore11MotorDriver13EnableRequestEb+0x8e>
    f302:	2100      	movs	r1, #0
  __ASM volatile ("cpsid i" : : : "memory");
    f304:	b672      	cpsid	i
    if (wasDisabled && value) {
    f306:	b36b      	cbz	r3, f364 <_ZN9ClearCore11MotorDriver13EnableRequestEb+0x98>
    f308:	b371      	cbz	r1, f368 <_ZN9ClearCore11MotorDriver13EnableRequestEb+0x9c>
        m_enableCounter = CPM_ENABLE_DELAY;
    f30a:	f240 42e2 	movw	r2, #1250	; 0x4e2
        m_isEnabling = true;
    f30e:	2301      	movs	r3, #1
        m_enableCounter = CPM_ENABLE_DELAY;
    f310:	f8c4 2130 	str.w	r2, [r4, #304]	; 0x130
        m_isEnabling = true;
    f314:	f884 312d 	strb.w	r3, [r4, #301]	; 0x12d
  __ASM volatile ("cpsie i" : : : "memory");
    f318:	b662      	cpsie	i
    if (m_mode == Connector::CPM_MODE_STEP_AND_DIR) {
    f31a:	79a3      	ldrb	r3, [r4, #6]
    f31c:	2b0a      	cmp	r3, #10
    f31e:	d02a      	beq.n	f376 <_ZN9ClearCore11MotorDriver13EnableRequestEb+0xaa>
    if (value != m_shiftRegEnableReq || (wasPulsing && !m_enableTriggerActive)) {
    f320:	f894 313d 	ldrb.w	r3, [r4, #317]	; 0x13d
    f324:	428b      	cmp	r3, r1
    f326:	d035      	beq.n	f394 <_ZN9ClearCore11MotorDriver13EnableRequestEb+0xc8>
        ShiftReg.ShifterState(value, m_enableMask);
    f328:	f8d4 30a0 	ldr.w	r3, [r4, #160]	; 0xa0
        : ShifterStateClear(bitsToChange);
    f32c:	2900      	cmp	r1, #0
    f32e:	d13b      	bne.n	f3a8 <_ZN9ClearCore11MotorDriver13EnableRequestEb+0xdc>
        atomic_and_fetch(&m_patternOutputs[LED_BLINK_IO_SET], ~bitsToClr);
    f330:	f3bf 8f5b 	dmb	ish
    f334:	4a2d      	ldr	r2, [pc, #180]	; (f3ec <_ZN9ClearCore11MotorDriver13EnableRequestEb+0x120>)
    f336:	43db      	mvns	r3, r3
    f338:	e852 0f00 	ldrex	r0, [r2]
    f33c:	4018      	ands	r0, r3
    f33e:	e842 0500 	strex	r5, r0, [r2]
    f342:	2d00      	cmp	r5, #0
    f344:	d1f8      	bne.n	f338 <_ZN9ClearCore11MotorDriver13EnableRequestEb+0x6c>
    f346:	f3bf 8f5b 	dmb	ish
     m_shiftRegEnableReq = value;
    f34a:	f884 113d 	strb.w	r1, [r4, #317]	; 0x13d
}
    f34e:	b003      	add	sp, #12
    f350:	bd30      	pop	{r4, r5, pc}
    if (value != m_enableRequestedState || m_inFault) {
    f352:	f894 2114 	ldrb.w	r2, [r4, #276]	; 0x114
    f356:	2a00      	cmp	r2, #0
    f358:	d133      	bne.n	f3c2 <_ZN9ClearCore11MotorDriver13EnableRequestEb+0xf6>
    value = !m_inFault && value;
    f35a:	2900      	cmp	r1, #0
    f35c:	d0d1      	beq.n	f302 <_ZN9ClearCore11MotorDriver13EnableRequestEb+0x36>
  __ASM volatile ("cpsid i" : : : "memory");
    f35e:	b672      	cpsid	i
    if (wasDisabled && value) {
    f360:	2b00      	cmp	r3, #0
    f362:	d1d1      	bne.n	f308 <_ZN9ClearCore11MotorDriver13EnableRequestEb+0x3c>
    else if (!value) {
    f364:	2900      	cmp	r1, #0
    f366:	d1d7      	bne.n	f318 <_ZN9ClearCore11MotorDriver13EnableRequestEb+0x4c>
        m_isEnabled = false;
    f368:	2300      	movs	r3, #0
    f36a:	f884 312e 	strb.w	r3, [r4, #302]	; 0x12e
  __ASM volatile ("cpsie i" : : : "memory");
    f36e:	b662      	cpsie	i
    if (m_mode == Connector::CPM_MODE_STEP_AND_DIR) {
    f370:	79a3      	ldrb	r3, [r4, #6]
    f372:	2b0a      	cmp	r3, #10
    f374:	d1d4      	bne.n	f320 <_ZN9ClearCore11MotorDriver13EnableRequestEb+0x54>
        if (!value && m_statusRegMotor.bit.StepsActive) {
    f376:	b919      	cbnz	r1, f380 <_ZN9ClearCore11MotorDriver13EnableRequestEb+0xb4>
    f378:	f894 3118 	ldrb.w	r3, [r4, #280]	; 0x118
    f37c:	079a      	lsls	r2, r3, #30
    f37e:	d428      	bmi.n	f3d2 <_ZN9ClearCore11MotorDriver13EnableRequestEb+0x106>
        if (m_polarityInversions.bit.enableInverted) {
    f380:	f894 30fc 	ldrb.w	r3, [r4, #252]	; 0xfc
    f384:	07db      	lsls	r3, r3, #31
    if (value != m_shiftRegEnableReq || (wasPulsing && !m_enableTriggerActive)) {
    f386:	f894 313d 	ldrb.w	r3, [r4, #317]	; 0x13d
        if (!value && m_statusRegMotor.bit.StepsActive) {
    f38a:	bf48      	it	mi
    f38c:	f081 0101 	eormi.w	r1, r1, #1
    if (value != m_shiftRegEnableReq || (wasPulsing && !m_enableTriggerActive)) {
    f390:	428b      	cmp	r3, r1
    f392:	d1c9      	bne.n	f328 <_ZN9ClearCore11MotorDriver13EnableRequestEb+0x5c>
    f394:	2d00      	cmp	r5, #0
    f396:	d0d8      	beq.n	f34a <_ZN9ClearCore11MotorDriver13EnableRequestEb+0x7e>
    f398:	f894 3101 	ldrb.w	r3, [r4, #257]	; 0x101
    f39c:	2b00      	cmp	r3, #0
    f39e:	d1d4      	bne.n	f34a <_ZN9ClearCore11MotorDriver13EnableRequestEb+0x7e>
        ShiftReg.ShifterState(value, m_enableMask);
    f3a0:	f8d4 30a0 	ldr.w	r3, [r4, #160]	; 0xa0
        : ShifterStateClear(bitsToChange);
    f3a4:	2900      	cmp	r1, #0
    f3a6:	d0c3      	beq.n	f330 <_ZN9ClearCore11MotorDriver13EnableRequestEb+0x64>
        atomic_or_fetch(&m_patternOutputs[LED_BLINK_IO_SET], bitsToSet);
    f3a8:	f3bf 8f5b 	dmb	ish
    f3ac:	4a0f      	ldr	r2, [pc, #60]	; (f3ec <_ZN9ClearCore11MotorDriver13EnableRequestEb+0x120>)
    f3ae:	e852 0f00 	ldrex	r0, [r2]
    f3b2:	4318      	orrs	r0, r3
    f3b4:	e842 0500 	strex	r5, r0, [r2]
    f3b8:	2d00      	cmp	r5, #0
    f3ba:	d0c4      	beq.n	f346 <_ZN9ClearCore11MotorDriver13EnableRequestEb+0x7a>
    f3bc:	e7f7      	b.n	f3ae <_ZN9ClearCore11MotorDriver13EnableRequestEb+0xe2>
    bool wasDisabled = !(m_isEnabled || m_isEnabling);
    f3be:	2300      	movs	r3, #0
    f3c0:	e78f      	b.n	f2e2 <_ZN9ClearCore11MotorDriver13EnableRequestEb+0x16>
        m_enableTriggerActive = false;
    f3c2:	2200      	movs	r2, #0
    m_enableRequestedState = value;
    f3c4:	f884 1100 	strb.w	r1, [r4, #256]	; 0x100
        m_enableTriggerActive = false;
    f3c8:	f884 2101 	strb.w	r2, [r4, #257]	; 0x101
        m_enableTriggerPulseCount = 0;
    f3cc:	f8c4 2108 	str.w	r2, [r4, #264]	; 0x108
    f3d0:	e797      	b.n	f302 <_ZN9ClearCore11MotorDriver13EnableRequestEb+0x36>
            m_alertRegMotor.bit.MotionCanceledMotorDisabled = 1;
    f3d2:	f894 3128 	ldrb.w	r3, [r4, #296]	; 0x128
    f3d6:	9101      	str	r1, [sp, #4]
    f3d8:	f043 0310 	orr.w	r3, r3, #16
    f3dc:	f884 3128 	strb.w	r3, [r4, #296]	; 0x128
            MoveStopAbrupt();
    f3e0:	f104 0030 	add.w	r0, r4, #48	; 0x30
    f3e4:	f7fb fa30 	bl	a848 <_ZN9ClearCore13StepGenerator14MoveStopAbruptEv>
    f3e8:	9901      	ldr	r1, [sp, #4]
    f3ea:	e7c9      	b.n	f380 <_ZN9ClearCore11MotorDriver13EnableRequestEb+0xb4>
    f3ec:	20001b74 	.word	0x20001b74

0000f3f0 <_ZN9ClearCore11MotorDriver11RefreshSlowEv>:
}

void MotorDriver::RefreshSlow() {
    if (!m_initialized) {
    f3f0:	f890 312c 	ldrb.w	r3, [r0, #300]	; 0x12c
    f3f4:	2b00      	cmp	r3, #0
    f3f6:	d04a      	beq.n	f48e <_ZN9ClearCore11MotorDriver11RefreshSlowEv+0x9e>
        return;
    }

    uint32_t currentTimeMs = TimingMgr.Milliseconds();
    f3f8:	4a35      	ldr	r2, [pc, #212]	; (f4d0 <_ZN9ClearCore11MotorDriver11RefreshSlowEv+0xe0>)
    if (m_enableTriggerActive &&
    f3fa:	f890 3101 	ldrb.w	r3, [r0, #257]	; 0x101
    uint32_t currentTimeMs = TimingMgr.Milliseconds();
    f3fe:	6812      	ldr	r2, [r2, #0]
void MotorDriver::RefreshSlow() {
    f400:	b500      	push	{lr}
    uint32_t currentTimeMs = TimingMgr.Milliseconds();
    f402:	6912      	ldr	r2, [r2, #16]
    if (m_enableTriggerActive &&
    f404:	b98b      	cbnz	r3, f42a <_ZN9ClearCore11MotorDriver11RefreshSlowEv+0x3a>
        else {
            ToggleEnable();
        }
    }

    switch (m_clearFaultState) {
    f406:	f890 313e 	ldrb.w	r3, [r0, #318]	; 0x13e
    f40a:	2b01      	cmp	r3, #1
    f40c:	d022      	beq.n	f454 <_ZN9ClearCore11MotorDriver11RefreshSlowEv+0x64>
    f40e:	2b02      	cmp	r3, #2
    f410:	d13b      	bne.n	f48a <_ZN9ClearCore11MotorDriver11RefreshSlowEv+0x9a>
                break;
            }
            m_clearFaultState = CLEAR_FAULT_WAIT_FOR_HLFB;
            // Fall through
        case CLEAR_FAULT_WAIT_FOR_HLFB:
            if (m_hlfbState != HLFB_DEASSERTED) {
    f412:	f890 30f4 	ldrb.w	r3, [r0, #244]	; 0xf4
    f416:	2b00      	cmp	r3, #0
    f418:	d145      	bne.n	f4a6 <_ZN9ClearCore11MotorDriver11RefreshSlowEv+0xb6>
                AlertRegMotor mask;
                mask.bit.MotorFaulted = 1;
                ClearAlerts(mask.reg);
                m_clearFaultState = CLEAR_FAULT_IDLE;
            }
            else if (!(m_clearFaultHlfbTimer && m_clearFaultHlfbTimer--)) {
    f41a:	f8d0 3140 	ldr.w	r3, [r0, #320]	; 0x140
    f41e:	2b00      	cmp	r3, #0
    f420:	d13c      	bne.n	f49c <_ZN9ClearCore11MotorDriver11RefreshSlowEv+0xac>
                m_clearFaultState = CLEAR_FAULT_IDLE;
    f422:	f880 313e 	strb.w	r3, [r0, #318]	; 0x13e
    f426:	f85d fb04 	ldr.w	pc, [sp], #4
            (currentTimeMs - m_enableTriggerPulseStartMs >=
    f42a:	f8d0 3104 	ldr.w	r3, [r0, #260]	; 0x104
    if (m_enableTriggerActive &&
    f42e:	f8d0 110c 	ldr.w	r1, [r0, #268]	; 0x10c
            (currentTimeMs - m_enableTriggerPulseStartMs >=
    f432:	1ad3      	subs	r3, r2, r3
    if (m_enableTriggerActive &&
    f434:	428b      	cmp	r3, r1
    f436:	d32b      	bcc.n	f490 <_ZN9ClearCore11MotorDriver11RefreshSlowEv+0xa0>
        if (!--m_enableTriggerPulseCount) {
    f438:	f8d0 3108 	ldr.w	r3, [r0, #264]	; 0x108
        m_enableTriggerPulseStartMs = currentTimeMs;
    f43c:	f8c0 2104 	str.w	r2, [r0, #260]	; 0x104
        if (!--m_enableTriggerPulseCount) {
    f440:	3b01      	subs	r3, #1
    f442:	f8c0 3108 	str.w	r3, [r0, #264]	; 0x108
    f446:	b94b      	cbnz	r3, f45c <_ZN9ClearCore11MotorDriver11RefreshSlowEv+0x6c>
            m_enableTriggerActive = false;
    f448:	f880 3101 	strb.w	r3, [r0, #257]	; 0x101
    switch (m_clearFaultState) {
    f44c:	f890 313e 	ldrb.w	r3, [r0, #318]	; 0x13e
    f450:	2b01      	cmp	r3, #1
    f452:	d1dc      	bne.n	f40e <_ZN9ClearCore11MotorDriver11RefreshSlowEv+0x1e>
            m_clearFaultState = CLEAR_FAULT_WAIT_FOR_HLFB;
    f454:	2302      	movs	r3, #2
    f456:	f880 313e 	strb.w	r3, [r0, #318]	; 0x13e
    f45a:	e7da      	b.n	f412 <_ZN9ClearCore11MotorDriver11RefreshSlowEv+0x22>
        atomic_xor_fetch(&m_patternOutputs[LED_BLINK_IO_SET], fldsToToggle.reg);
    f45c:	4b1d      	ldr	r3, [pc, #116]	; (f4d4 <_ZN9ClearCore11MotorDriver11RefreshSlowEv+0xe4>)
    f45e:	f8d0 20a0 	ldr.w	r2, [r0, #160]	; 0xa0
    f462:	f3bf 8f5b 	dmb	ish
    f466:	e853 1f00 	ldrex	r1, [r3]
    f46a:	4051      	eors	r1, r2
    f46c:	e843 1e00 	strex	lr, r1, [r3]
    f470:	f1be 0f00 	cmp.w	lr, #0
    f474:	d1f7      	bne.n	f466 <_ZN9ClearCore11MotorDriver11RefreshSlowEv+0x76>
    f476:	f3bf 8f5b 	dmb	ish
    switch (m_clearFaultState) {
    f47a:	f890 313e 	ldrb.w	r3, [r0, #318]	; 0x13e
    f47e:	2b01      	cmp	r3, #1
    f480:	d1c5      	bne.n	f40e <_ZN9ClearCore11MotorDriver11RefreshSlowEv+0x1e>
            if (m_enableTriggerActive) {
    f482:	f890 3101 	ldrb.w	r3, [r0, #257]	; 0x101
    f486:	2b00      	cmp	r3, #0
    f488:	d0e4      	beq.n	f454 <_ZN9ClearCore11MotorDriver11RefreshSlowEv+0x64>
    f48a:	f85d fb04 	ldr.w	pc, [sp], #4
    f48e:	4770      	bx	lr
    switch (m_clearFaultState) {
    f490:	f890 313e 	ldrb.w	r3, [r0, #318]	; 0x13e
    f494:	2b02      	cmp	r3, #2
    f496:	d0bc      	beq.n	f412 <_ZN9ClearCore11MotorDriver11RefreshSlowEv+0x22>
    f498:	f85d fb04 	ldr.w	pc, [sp], #4
            else if (!(m_clearFaultHlfbTimer && m_clearFaultHlfbTimer--)) {
    f49c:	3b01      	subs	r3, #1
    f49e:	f8c0 3140 	str.w	r3, [r0, #320]	; 0x140
    f4a2:	f85d fb04 	ldr.w	pc, [sp], #4
            reg = 0;
    f4a6:	2200      	movs	r2, #0
        atomic_and_fetch(&m_alertRegMotor.reg, ~mask);
    f4a8:	f500 7394 	add.w	r3, r0, #296	; 0x128
    f4ac:	f3bf 8f5b 	dmb	ish
    f4b0:	e853 1f00 	ldrex	r1, [r3]
    f4b4:	f021 0120 	bic.w	r1, r1, #32
    f4b8:	e843 1e00 	strex	lr, r1, [r3]
    f4bc:	f1be 0f00 	cmp.w	lr, #0
    f4c0:	d1f6      	bne.n	f4b0 <_ZN9ClearCore11MotorDriver11RefreshSlowEv+0xc0>
    f4c2:	f3bf 8f5b 	dmb	ish
                m_clearFaultState = CLEAR_FAULT_IDLE;
    f4c6:	f880 213e 	strb.w	r2, [r0, #318]	; 0x13e
    f4ca:	f85d fb04 	ldr.w	pc, [sp], #4
    f4ce:	bf00      	nop
    f4d0:	20001c94 	.word	0x20001c94
    f4d4:	20001b74 	.word	0x20001b74

0000f4d8 <_ZN9ClearCore11MotorDriver10FaultStateEb>:
    bool wasDisabled = !(m_isEnabled || m_isEnabling);
    f4d8:	f890 312e 	ldrb.w	r3, [r0, #302]	; 0x12e
        default:
            break;
    }
}

void MotorDriver::FaultState(bool isFaulted) {
    f4dc:	b570      	push	{r4, r5, r6, lr}
    f4de:	4604      	mov	r4, r0
    m_inFault = isFaulted;
    f4e0:	f880 1114 	strb.w	r1, [r0, #276]	; 0x114
    bool wasDisabled = !(m_isEnabled || m_isEnabling);
    f4e4:	2b00      	cmp	r3, #0
    f4e6:	d163      	bne.n	f5b0 <_ZN9ClearCore11MotorDriver10FaultStateEb+0xd8>
    f4e8:	f890 312d 	ldrb.w	r3, [r0, #301]	; 0x12d
    f4ec:	f083 0301 	eor.w	r3, r3, #1
    bool wasPulsing = m_enableTriggerActive;
    f4f0:	f894 6101 	ldrb.w	r6, [r4, #257]	; 0x101
    if (value != m_enableRequestedState || m_inFault) {
    f4f4:	bb39      	cbnz	r1, f546 <_ZN9ClearCore11MotorDriver10FaultStateEb+0x6e>
    // Let EnableRequest handle the fault condition logic
    EnableRequest(m_enableRequestedState);
    f4f6:	f894 5100 	ldrb.w	r5, [r4, #256]	; 0x100
  __ASM volatile ("cpsid i" : : : "memory");
    f4fa:	b672      	cpsid	i
    if (wasDisabled && value) {
    f4fc:	b35b      	cbz	r3, f556 <_ZN9ClearCore11MotorDriver10FaultStateEb+0x7e>
    f4fe:	b365      	cbz	r5, f55a <_ZN9ClearCore11MotorDriver10FaultStateEb+0x82>
        m_enableCounter = CPM_ENABLE_DELAY;
    f500:	f240 42e2 	movw	r2, #1250	; 0x4e2
        m_isEnabling = true;
    f504:	2301      	movs	r3, #1
        m_enableCounter = CPM_ENABLE_DELAY;
    f506:	f8c4 2130 	str.w	r2, [r4, #304]	; 0x130
        m_isEnabling = true;
    f50a:	f884 312d 	strb.w	r3, [r4, #301]	; 0x12d
  __ASM volatile ("cpsie i" : : : "memory");
    f50e:	b662      	cpsie	i
    if (m_mode == Connector::CPM_MODE_STEP_AND_DIR) {
    f510:	79a3      	ldrb	r3, [r4, #6]
    f512:	2b0a      	cmp	r3, #10
    f514:	d028      	beq.n	f568 <_ZN9ClearCore11MotorDriver10FaultStateEb+0x90>
    if (value != m_shiftRegEnableReq || (wasPulsing && !m_enableTriggerActive)) {
    f516:	f894 313d 	ldrb.w	r3, [r4, #317]	; 0x13d
    f51a:	42ab      	cmp	r3, r5
    f51c:	d033      	beq.n	f586 <_ZN9ClearCore11MotorDriver10FaultStateEb+0xae>
        ShiftReg.ShifterState(value, m_enableMask);
    f51e:	f8d4 30a0 	ldr.w	r3, [r4, #160]	; 0xa0
        : ShifterStateClear(bitsToChange);
    f522:	2d00      	cmp	r5, #0
    f524:	d139      	bne.n	f59a <_ZN9ClearCore11MotorDriver10FaultStateEb+0xc2>
        atomic_and_fetch(&m_patternOutputs[LED_BLINK_IO_SET], ~bitsToClr);
    f526:	f3bf 8f5b 	dmb	ish
    f52a:	4a28      	ldr	r2, [pc, #160]	; (f5cc <_ZN9ClearCore11MotorDriver10FaultStateEb+0xf4>)
    f52c:	43db      	mvns	r3, r3
    f52e:	e852 1f00 	ldrex	r1, [r2]
    f532:	4019      	ands	r1, r3
    f534:	e842 1000 	strex	r0, r1, [r2]
    f538:	2800      	cmp	r0, #0
    f53a:	d1f8      	bne.n	f52e <_ZN9ClearCore11MotorDriver10FaultStateEb+0x56>
    f53c:	f3bf 8f5b 	dmb	ish
     m_shiftRegEnableReq = value;
    f540:	f884 513d 	strb.w	r5, [r4, #317]	; 0x13d
    f544:	bd70      	pop	{r4, r5, r6, pc}
        m_enableTriggerActive = false;
    f546:	2500      	movs	r5, #0
    f548:	f884 5101 	strb.w	r5, [r4, #257]	; 0x101
        m_enableTriggerPulseCount = 0;
    f54c:	f8c4 5108 	str.w	r5, [r4, #264]	; 0x108
  __ASM volatile ("cpsid i" : : : "memory");
    f550:	b672      	cpsid	i
    if (wasDisabled && value) {
    f552:	2b00      	cmp	r3, #0
    f554:	d1d3      	bne.n	f4fe <_ZN9ClearCore11MotorDriver10FaultStateEb+0x26>
    else if (!value) {
    f556:	2d00      	cmp	r5, #0
    f558:	d1d9      	bne.n	f50e <_ZN9ClearCore11MotorDriver10FaultStateEb+0x36>
        m_isEnabled = false;
    f55a:	2300      	movs	r3, #0
    f55c:	f884 312e 	strb.w	r3, [r4, #302]	; 0x12e
  __ASM volatile ("cpsie i" : : : "memory");
    f560:	b662      	cpsie	i
    if (m_mode == Connector::CPM_MODE_STEP_AND_DIR) {
    f562:	79a3      	ldrb	r3, [r4, #6]
    f564:	2b0a      	cmp	r3, #10
    f566:	d1d6      	bne.n	f516 <_ZN9ClearCore11MotorDriver10FaultStateEb+0x3e>
        if (!value && m_statusRegMotor.bit.StepsActive) {
    f568:	b91d      	cbnz	r5, f572 <_ZN9ClearCore11MotorDriver10FaultStateEb+0x9a>
    f56a:	f894 3118 	ldrb.w	r3, [r4, #280]	; 0x118
    f56e:	079a      	lsls	r2, r3, #30
    f570:	d420      	bmi.n	f5b4 <_ZN9ClearCore11MotorDriver10FaultStateEb+0xdc>
        if (m_polarityInversions.bit.enableInverted) {
    f572:	f894 30fc 	ldrb.w	r3, [r4, #252]	; 0xfc
    f576:	07db      	lsls	r3, r3, #31
    if (value != m_shiftRegEnableReq || (wasPulsing && !m_enableTriggerActive)) {
    f578:	f894 313d 	ldrb.w	r3, [r4, #317]	; 0x13d
        if (!value && m_statusRegMotor.bit.StepsActive) {
    f57c:	bf48      	it	mi
    f57e:	f085 0501 	eormi.w	r5, r5, #1
    if (value != m_shiftRegEnableReq || (wasPulsing && !m_enableTriggerActive)) {
    f582:	42ab      	cmp	r3, r5
    f584:	d1cb      	bne.n	f51e <_ZN9ClearCore11MotorDriver10FaultStateEb+0x46>
    f586:	2e00      	cmp	r6, #0
    f588:	d0da      	beq.n	f540 <_ZN9ClearCore11MotorDriver10FaultStateEb+0x68>
    f58a:	f894 3101 	ldrb.w	r3, [r4, #257]	; 0x101
    f58e:	2b00      	cmp	r3, #0
    f590:	d1d6      	bne.n	f540 <_ZN9ClearCore11MotorDriver10FaultStateEb+0x68>
        ShiftReg.ShifterState(value, m_enableMask);
    f592:	f8d4 30a0 	ldr.w	r3, [r4, #160]	; 0xa0
        : ShifterStateClear(bitsToChange);
    f596:	2d00      	cmp	r5, #0
    f598:	d0c5      	beq.n	f526 <_ZN9ClearCore11MotorDriver10FaultStateEb+0x4e>
        atomic_or_fetch(&m_patternOutputs[LED_BLINK_IO_SET], bitsToSet);
    f59a:	f3bf 8f5b 	dmb	ish
    f59e:	4a0b      	ldr	r2, [pc, #44]	; (f5cc <_ZN9ClearCore11MotorDriver10FaultStateEb+0xf4>)
    f5a0:	e852 1f00 	ldrex	r1, [r2]
    f5a4:	4319      	orrs	r1, r3
    f5a6:	e842 1000 	strex	r0, r1, [r2]
    f5aa:	2800      	cmp	r0, #0
    f5ac:	d0c6      	beq.n	f53c <_ZN9ClearCore11MotorDriver10FaultStateEb+0x64>
    f5ae:	e7f7      	b.n	f5a0 <_ZN9ClearCore11MotorDriver10FaultStateEb+0xc8>
    bool wasDisabled = !(m_isEnabled || m_isEnabling);
    f5b0:	2300      	movs	r3, #0
    f5b2:	e79d      	b.n	f4f0 <_ZN9ClearCore11MotorDriver10FaultStateEb+0x18>
            m_alertRegMotor.bit.MotionCanceledMotorDisabled = 1;
    f5b4:	f894 3128 	ldrb.w	r3, [r4, #296]	; 0x128
    f5b8:	f043 0310 	orr.w	r3, r3, #16
    f5bc:	f884 3128 	strb.w	r3, [r4, #296]	; 0x128
            MoveStopAbrupt();
    f5c0:	f104 0030 	add.w	r0, r4, #48	; 0x30
    f5c4:	f7fb f940 	bl	a848 <_ZN9ClearCore13StepGenerator14MoveStopAbruptEv>
    f5c8:	e7d3      	b.n	f572 <_ZN9ClearCore11MotorDriver10FaultStateEb+0x9a>
    f5ca:	bf00      	nop
    f5cc:	20001b74 	.word	0x20001b74

0000f5d0 <_ZN9ClearCore11MotorDriver7RefreshEv>:
void MotorDriver::Refresh() {
    f5d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    if (!m_initialized) {
    f5d2:	f890 312c 	ldrb.w	r3, [r0, #300]	; 0x12c
    f5d6:	b903      	cbnz	r3, f5da <_ZN9ClearCore11MotorDriver7RefreshEv+0xa>
    f5d8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    f5da:	4604      	mov	r4, r0
    DigitalIn::Refresh();
    f5dc:	f7fd ffba 	bl	d554 <_ZN9ClearCore9DigitalIn7RefreshEv>
    bool invert = (m_mode == CPM_MODE_STEP_AND_DIR) &&
    f5e0:	79a3      	ldrb	r3, [r4, #6]
    TcCount16 *tcCount = &tc_modules[m_hlfbTcNum]->COUNT16;
    f5e2:	4a98      	ldr	r2, [pc, #608]	; (f844 <_ZN9ClearCore11MotorDriver7RefreshEv+0x274>)
    f5e4:	f894 10d6 	ldrb.w	r1, [r4, #214]	; 0xd6
    bool invert = (m_mode == CPM_MODE_STEP_AND_DIR) &&
    f5e8:	2b0a      	cmp	r3, #10
    f5ea:	bf08      	it	eq
    f5ec:	f894 30fc 	ldrbeq.w	r3, [r4, #252]	; 0xfc
    TcCount16 *tcCount = &tc_modules[m_hlfbTcNum]->COUNT16;
    f5f0:	f852 7021 	ldr.w	r7, [r2, r1, lsl #2]
    bool invert = (m_mode == CPM_MODE_STEP_AND_DIR) &&
    f5f4:	bf08      	it	eq
    f5f6:	f3c3 0680 	ubfxeq	r6, r3, #2, #1
    switch (m_hlfbMode) {
    f5fa:	f894 30d8 	ldrb.w	r3, [r4, #216]	; 0xd8
    uint8_t intFlagReg = tcCount->INTFLAG.reg;
    f5fe:	7abd      	ldrb	r5, [r7, #10]
    switch (m_hlfbMode) {
    f600:	f103 33ff 	add.w	r3, r3, #4294967295
    bool invert = (m_mode == CPM_MODE_STEP_AND_DIR) &&
    f604:	bf18      	it	ne
    f606:	2600      	movne	r6, #0
    switch (m_hlfbMode) {
    f608:	2b01      	cmp	r3, #1
    uint8_t intFlagReg = tcCount->INTFLAG.reg;
    f60a:	b2ed      	uxtb	r5, r5
    switch (m_hlfbMode) {
    f60c:	f240 80df 	bls.w	f7ce <_ZN9ClearCore11MotorDriver7RefreshEv+0x1fe>
    f610:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
    f614:	4073      	eors	r3, r6
            m_hlfbDuty = HLFB_DUTY_UNKNOWN;
    f616:	4a8c      	ldr	r2, [pc, #560]	; (f848 <_ZN9ClearCore11MotorDriver7RefreshEv+0x278>)
            m_hlfbState = (DigitalIn::m_stateFiltered ^ invert) ?
    f618:	f884 30f4 	strb.w	r3, [r4, #244]	; 0xf4
            m_hlfbDuty = HLFB_DUTY_UNKNOWN;
    f61c:	f8c4 20f0 	str.w	r2, [r4, #240]	; 0xf0
    if (m_enableConnector != CLEARCORE_PIN_INVALID) {
    f620:	f9b4 10d0 	ldrsh.w	r1, [r4, #208]	; 0xd0
    f624:	1c48      	adds	r0, r1, #1
    f626:	d012      	beq.n	f64e <_ZN9ClearCore11MotorDriver7RefreshEv+0x7e>
        Connector *input= SysMgr.ConnectorByIndex(m_enableConnector);
    f628:	4888      	ldr	r0, [pc, #544]	; (f84c <_ZN9ClearCore11MotorDriver7RefreshEv+0x27c>)
    f62a:	f7f8 fa27 	bl	7a7c <_ZN9ClearCore10SysManager16ConnectorByIndexE13ClearCorePins>
        if (input->Type() == ClearCore::Connector::CCIO_DIGITAL_IN_OUT_TYPE) {
    f62e:	6803      	ldr	r3, [r0, #0]
    f630:	689b      	ldr	r3, [r3, #8]
        Connector *input= SysMgr.ConnectorByIndex(m_enableConnector);
    f632:	4605      	mov	r5, r0
        if (input->Type() == ClearCore::Connector::CCIO_DIGITAL_IN_OUT_TYPE) {
    f634:	4798      	blx	r3
    f636:	2809      	cmp	r0, #9
    f638:	f000 8248 	beq.w	facc <_ZN9ClearCore11MotorDriver7RefreshEv+0x4fc>
            EnableRequest(enableIn->DigitalIn::State());
    f63c:	4628      	mov	r0, r5
    f63e:	f7fd ff0f 	bl	d460 <_ZN9ClearCore9DigitalIn5StateEv>
    f642:	1c01      	adds	r1, r0, #0
    f644:	bf18      	it	ne
    f646:	2101      	movne	r1, #1
    f648:	4620      	mov	r0, r4
    f64a:	f7ff fe3f 	bl	f2cc <_ZN9ClearCore11MotorDriver13EnableRequestEb>
    if (m_inputAConnector != CLEARCORE_PIN_INVALID && m_mode != CPM_MODE_STEP_AND_DIR) {
    f64e:	f9b4 10d2 	ldrsh.w	r1, [r4, #210]	; 0xd2
    f652:	1c4a      	adds	r2, r1, #1
    f654:	d016      	beq.n	f684 <_ZN9ClearCore11MotorDriver7RefreshEv+0xb4>
    f656:	79a3      	ldrb	r3, [r4, #6]
    f658:	2b0a      	cmp	r3, #10
    f65a:	d039      	beq.n	f6d0 <_ZN9ClearCore11MotorDriver7RefreshEv+0x100>
        Connector *input= SysMgr.ConnectorByIndex(m_inputAConnector);
    f65c:	487b      	ldr	r0, [pc, #492]	; (f84c <_ZN9ClearCore11MotorDriver7RefreshEv+0x27c>)
    f65e:	f7f8 fa0d 	bl	7a7c <_ZN9ClearCore10SysManager16ConnectorByIndexE13ClearCorePins>
        if (input->Type() == ClearCore::Connector::CCIO_DIGITAL_IN_OUT_TYPE) {
    f662:	6803      	ldr	r3, [r0, #0]
    f664:	689b      	ldr	r3, [r3, #8]
        Connector *input= SysMgr.ConnectorByIndex(m_inputAConnector);
    f666:	4605      	mov	r5, r0
        if (input->Type() == ClearCore::Connector::CCIO_DIGITAL_IN_OUT_TYPE) {
    f668:	4798      	blx	r3
    f66a:	2809      	cmp	r0, #9
    f66c:	f000 80d0 	beq.w	f810 <_ZN9ClearCore11MotorDriver7RefreshEv+0x240>
            MotorInAState(inputA->DigitalIn::State());
    f670:	4628      	mov	r0, r5
    f672:	f7fd fef5 	bl	d460 <_ZN9ClearCore9DigitalIn5StateEv>
    switch (m_mode) {
    f676:	79a3      	ldrb	r3, [r4, #6]
    f678:	2b09      	cmp	r3, #9
    f67a:	f000 80d3 	beq.w	f824 <_ZN9ClearCore11MotorDriver7RefreshEv+0x254>
    f67e:	2b0b      	cmp	r3, #11
    f680:	f000 80d0 	beq.w	f824 <_ZN9ClearCore11MotorDriver7RefreshEv+0x254>
    if (m_inputBConnector != CLEARCORE_PIN_INVALID && m_mode != CPM_MODE_STEP_AND_DIR) {
    f684:	f9b4 10d4 	ldrsh.w	r1, [r4, #212]	; 0xd4
    f688:	1c4b      	adds	r3, r1, #1
    f68a:	d021      	beq.n	f6d0 <_ZN9ClearCore11MotorDriver7RefreshEv+0x100>
    f68c:	79a3      	ldrb	r3, [r4, #6]
    f68e:	2b0a      	cmp	r3, #10
    f690:	d01e      	beq.n	f6d0 <_ZN9ClearCore11MotorDriver7RefreshEv+0x100>
        Connector *input= SysMgr.ConnectorByIndex(m_inputBConnector);
    f692:	486e      	ldr	r0, [pc, #440]	; (f84c <_ZN9ClearCore11MotorDriver7RefreshEv+0x27c>)
    f694:	f7f8 f9f2 	bl	7a7c <_ZN9ClearCore10SysManager16ConnectorByIndexE13ClearCorePins>
        if (input->Type() == ClearCore::Connector::CCIO_DIGITAL_IN_OUT_TYPE) {
    f698:	6803      	ldr	r3, [r0, #0]
    f69a:	689b      	ldr	r3, [r3, #8]
        Connector *input= SysMgr.ConnectorByIndex(m_inputBConnector);
    f69c:	4605      	mov	r5, r0
        if (input->Type() == ClearCore::Connector::CCIO_DIGITAL_IN_OUT_TYPE) {
    f69e:	4798      	blx	r3
    f6a0:	2809      	cmp	r0, #9
    f6a2:	f000 8239 	beq.w	fb18 <_ZN9ClearCore11MotorDriver7RefreshEv+0x548>
            MotorInBState(inputB->DigitalIn::State());
    f6a6:	4628      	mov	r0, r5
    f6a8:	f7fd feda 	bl	d460 <_ZN9ClearCore9DigitalIn5StateEv>
    switch (m_mode) {
    f6ac:	79a3      	ldrb	r3, [r4, #6]
    f6ae:	2b09      	cmp	r3, #9
    f6b0:	d10e      	bne.n	f6d0 <_ZN9ClearCore11MotorDriver7RefreshEv+0x100>
            DATA_OUTPUT_STATE(m_bInfo->gpioPort, m_bDataMask, !value);
    f6b2:	f8d4 30a8 	ldr.w	r3, [r4, #168]	; 0xa8
    f6b6:	f8d4 20b8 	ldr.w	r2, [r4, #184]	; 0xb8
    f6ba:	f993 3001 	ldrsb.w	r3, [r3, #1]
    f6be:	01db      	lsls	r3, r3, #7
    f6c0:	f103 4382 	add.w	r3, r3, #1090519040	; 0x41000000
    f6c4:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
    f6c8:	2800      	cmp	r0, #0
    f6ca:	f000 81d4 	beq.w	fa76 <_ZN9ClearCore11MotorDriver7RefreshEv+0x4a6>
    f6ce:	615a      	str	r2, [r3, #20]
    if (m_brakeOutputPin != CLEARCORE_PIN_INVALID) {
    f6d0:	f9b4 1134 	ldrsh.w	r1, [r4, #308]	; 0x134
    f6d4:	1c4f      	adds	r7, r1, #1
    f6d6:	d010      	beq.n	f6fa <_ZN9ClearCore11MotorDriver7RefreshEv+0x12a>
        Connector *brakeOutput = SysMgr.ConnectorByIndex(m_brakeOutputPin);
    f6d8:	485c      	ldr	r0, [pc, #368]	; (f84c <_ZN9ClearCore11MotorDriver7RefreshEv+0x27c>)
    f6da:	f7f8 f9cf 	bl	7a7c <_ZN9ClearCore10SysManager16ConnectorByIndexE13ClearCorePins>
        if (brakeOutput->Type() == CCIO_DIGITAL_IN_OUT_TYPE ||
    f6de:	6803      	ldr	r3, [r0, #0]
    f6e0:	689b      	ldr	r3, [r3, #8]
        Connector *brakeOutput = SysMgr.ConnectorByIndex(m_brakeOutputPin);
    f6e2:	4605      	mov	r5, r0
        if (brakeOutput->Type() == CCIO_DIGITAL_IN_OUT_TYPE ||
    f6e4:	4798      	blx	r3
    f6e6:	2809      	cmp	r0, #9
    f6e8:	f000 817d 	beq.w	f9e6 <_ZN9ClearCore11MotorDriver7RefreshEv+0x416>
        brakeOutput->Mode() == ConnectorModes::OUTPUT_DIGITAL) {
    f6ec:	682b      	ldr	r3, [r5, #0]
    f6ee:	4628      	mov	r0, r5
    f6f0:	681b      	ldr	r3, [r3, #0]
    f6f2:	4798      	blx	r3
        if (brakeOutput->Type() == CCIO_DIGITAL_IN_OUT_TYPE ||
    f6f4:	2804      	cmp	r0, #4
    f6f6:	f000 8176 	beq.w	f9e6 <_ZN9ClearCore11MotorDriver7RefreshEv+0x416>
    if (m_limitSwitchPos != CLEARCORE_PIN_INVALID) {
    f6fa:	f9b4 1138 	ldrsh.w	r1, [r4, #312]	; 0x138
    f6fe:	1c4e      	adds	r6, r1, #1
    f700:	d015      	beq.n	f72e <_ZN9ClearCore11MotorDriver7RefreshEv+0x15e>
        Connector *input = SysMgr.ConnectorByIndex(m_limitSwitchPos);
    f702:	4852      	ldr	r0, [pc, #328]	; (f84c <_ZN9ClearCore11MotorDriver7RefreshEv+0x27c>)
    f704:	f7f8 f9ba 	bl	7a7c <_ZN9ClearCore10SysManager16ConnectorByIndexE13ClearCorePins>
        if (input->Type() == CCIO_DIGITAL_IN_OUT_TYPE) {
    f708:	6803      	ldr	r3, [r0, #0]
    f70a:	689b      	ldr	r3, [r3, #8]
        Connector *input = SysMgr.ConnectorByIndex(m_limitSwitchPos);
    f70c:	4605      	mov	r5, r0
        if (input->Type() == CCIO_DIGITAL_IN_OUT_TYPE) {
    f70e:	4798      	blx	r3
    f710:	2809      	cmp	r0, #9
    f712:	f000 81e6 	beq.w	fae2 <_ZN9ClearCore11MotorDriver7RefreshEv+0x512>
            PosLimitActive(!inputB->DigitalIn::State());
    f716:	4628      	mov	r0, r5
    f718:	f7fd fea2 	bl	d460 <_ZN9ClearCore9DigitalIn5StateEv>
            m_limitInfo.InPosHWLimit = isActive;
    f71c:	f894 3040 	ldrb.w	r3, [r4, #64]	; 0x40
    f720:	fab0 f080 	clz	r0, r0
    f724:	0940      	lsrs	r0, r0, #5
    f726:	f360 03c3 	bfi	r3, r0, #3, #1
    f72a:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
    if (m_limitSwitchNeg != CLEARCORE_PIN_INVALID) {
    f72e:	f9b4 1136 	ldrsh.w	r1, [r4, #310]	; 0x136
    f732:	1c4d      	adds	r5, r1, #1
    f734:	d015      	beq.n	f762 <_ZN9ClearCore11MotorDriver7RefreshEv+0x192>
        Connector *input = SysMgr.ConnectorByIndex(m_limitSwitchNeg);
    f736:	4845      	ldr	r0, [pc, #276]	; (f84c <_ZN9ClearCore11MotorDriver7RefreshEv+0x27c>)
    f738:	f7f8 f9a0 	bl	7a7c <_ZN9ClearCore10SysManager16ConnectorByIndexE13ClearCorePins>
        if (input->Type() == CCIO_DIGITAL_IN_OUT_TYPE) {
    f73c:	6803      	ldr	r3, [r0, #0]
    f73e:	689b      	ldr	r3, [r3, #8]
        Connector *input = SysMgr.ConnectorByIndex(m_limitSwitchNeg);
    f740:	4605      	mov	r5, r0
        if (input->Type() == CCIO_DIGITAL_IN_OUT_TYPE) {
    f742:	4798      	blx	r3
    f744:	2809      	cmp	r0, #9
    f746:	f000 81d1 	beq.w	faec <_ZN9ClearCore11MotorDriver7RefreshEv+0x51c>
            NegLimitActive(!inputB->DigitalIn::State());
    f74a:	4628      	mov	r0, r5
    f74c:	f7fd fe88 	bl	d460 <_ZN9ClearCore9DigitalIn5StateEv>
            m_limitInfo.InNegHWLimit = isActive;
    f750:	f894 3040 	ldrb.w	r3, [r4, #64]	; 0x40
    f754:	fab0 f080 	clz	r0, r0
    f758:	0940      	lsrs	r0, r0, #5
    f75a:	f360 1304 	bfi	r3, r0, #4, #1
    f75e:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
           (pin >= CLEARCORE_PIN_CCIOA0 && pin <= CLEARCORE_PIN_CCIOH7);
}

bool MotorDriver::CheckEStopSensor() {
    bool eStop = false;
    if (m_eStopConnector != CLEARCORE_PIN_INVALID) {
    f762:	f9b4 113a 	ldrsh.w	r1, [r4, #314]	; 0x13a
    StatusRegMotor statusRegPending = m_statusRegMotor;
    f766:	f8d4 5118 	ldr.w	r5, [r4, #280]	; 0x118
    AlertRegMotor alertRegPending = m_alertRegMotor;
    f76a:	f8d4 6128 	ldr.w	r6, [r4, #296]	; 0x128
    if (m_eStopConnector != CLEARCORE_PIN_INVALID) {
    f76e:	1c48      	adds	r0, r1, #1
    f770:	f000 8132 	beq.w	f9d8 <_ZN9ClearCore11MotorDriver7RefreshEv+0x408>
        Connector *input = SysMgr.ConnectorByIndex(m_eStopConnector);
    f774:	4835      	ldr	r0, [pc, #212]	; (f84c <_ZN9ClearCore11MotorDriver7RefreshEv+0x27c>)
    f776:	f7f8 f981 	bl	7a7c <_ZN9ClearCore10SysManager16ConnectorByIndexE13ClearCorePins>
        if (input->Type() == ClearCore::Connector::CCIO_DIGITAL_IN_OUT_TYPE) {
    f77a:	6803      	ldr	r3, [r0, #0]
    f77c:	689b      	ldr	r3, [r3, #8]
        Connector *input = SysMgr.ConnectorByIndex(m_eStopConnector);
    f77e:	4607      	mov	r7, r0
        if (input->Type() == ClearCore::Connector::CCIO_DIGITAL_IN_OUT_TYPE) {
    f780:	4798      	blx	r3
    f782:	2809      	cmp	r0, #9
    f784:	f000 81c0 	beq.w	fb08 <_ZN9ClearCore11MotorDriver7RefreshEv+0x538>
            eStop = !(input->State());
        }
        else {
            DigitalIn *inputB = static_cast<DigitalIn *>(input);
            eStop = !(inputB->DigitalIn::State());
    f788:	4638      	mov	r0, r7
    f78a:	f7fd fe69 	bl	d460 <_ZN9ClearCore9DigitalIn5StateEv>
    f78e:	fab0 f780 	clz	r7, r0
    f792:	097f      	lsrs	r7, r7, #5
    if (m_moveState == MS_IDLE) {
    f794:	f894 303c 	ldrb.w	r3, [r4, #60]	; 0x3c
    f798:	2b00      	cmp	r3, #0
    f79a:	f040 8131 	bne.w	fa00 <_ZN9ClearCore11MotorDriver7RefreshEv+0x430>
        m_motionCancellingEStop = false;
    f79e:	f884 313c 	strb.w	r3, [r4, #316]	; 0x13c
    if (!m_lastMoveWasPositional && m_statusRegMotor.bit.StepsActive) {
    f7a2:	f894 103e 	ldrb.w	r1, [r4, #62]	; 0x3e
    statusRegPending.bit.InEStopSensor = (eStopInput || m_motionCancellingEStop);
    f7a6:	f367 4510 	bfi	r5, r7, #16, #1
    if (!m_lastMoveWasPositional && m_statusRegMotor.bit.StepsActive) {
    f7aa:	2900      	cmp	r1, #0
    f7ac:	d152      	bne.n	f854 <_ZN9ClearCore11MotorDriver7RefreshEv+0x284>
    f7ae:	f894 2118 	ldrb.w	r2, [r4, #280]	; 0x118
    f7b2:	0792      	lsls	r2, r2, #30
    f7b4:	d54e      	bpl.n	f854 <_ZN9ClearCore11MotorDriver7RefreshEv+0x284>
        if (m_direction && m_limitInfo.InNegHWLimit) {
    f7b6:	f894 003d 	ldrb.w	r0, [r4, #61]	; 0x3d
    f7ba:	f894 2040 	ldrb.w	r2, [r4, #64]	; 0x40
    f7be:	2800      	cmp	r0, #0
    f7c0:	f000 8152 	beq.w	fa68 <_ZN9ClearCore11MotorDriver7RefreshEv+0x498>
    f7c4:	06d7      	lsls	r7, r2, #27
    f7c6:	d549      	bpl.n	f85c <_ZN9ClearCore11MotorDriver7RefreshEv+0x28c>
            alertRegPending.bit.MotionCanceledNegativeLimit = 1;
    f7c8:	f046 0604 	orr.w	r6, r6, #4
    f7cc:	e046      	b.n	f85c <_ZN9ClearCore11MotorDriver7RefreshEv+0x28c>
            if ((intFlagReg & (TC_INTFLAG_OVF | TC_INTFLAG_ERR)) ||
    f7ce:	07aa      	lsls	r2, r5, #30
    f7d0:	f000 8161 	beq.w	fa96 <_ZN9ClearCore11MotorDriver7RefreshEv+0x4c6>
                tcCount->INTFLAG.reg = TC_INTFLAG_OVF | TC_INTFLAG_MC0 |
    f7d4:	2333      	movs	r3, #51	; 0x33
    f7d6:	72bb      	strb	r3, [r7, #10]
                m_hlfbNoPwmSampleCount = __QADD16(m_hlfbNoPwmSampleCount, 1U);
    f7d8:	f8b4 30e2 	ldrh.w	r3, [r4, #226]	; 0xe2

__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __QADD16(uint32_t op1, uint32_t op2)
{
  uint32_t result;

  __ASM volatile ("qadd16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
    f7dc:	2201      	movs	r2, #1
    f7de:	fa93 f312 	qadd16	r3, r3, r2
                    m_hlfbNoPwmSampleCount > HLFB_CARRIER_LOSS_ERROR_LIMIT;
    f7e2:	b29a      	uxth	r2, r3
    f7e4:	3200      	adds	r2, #0
    f7e6:	bf18      	it	ne
    f7e8:	2201      	movne	r2, #1
                m_hlfbNoPwmSampleCount = __QADD16(m_hlfbNoPwmSampleCount, 1U);
    f7ea:	f8a4 30e2 	strh.w	r3, [r4, #226]	; 0xe2
                    m_hlfbNoPwmSampleCount > HLFB_CARRIER_LOSS_ERROR_LIMIT;
    f7ee:	f884 212f 	strb.w	r2, [r4, #303]	; 0x12f
            if (intFlagReg & TC_INTFLAG_MC0) {
    f7f2:	06eb      	lsls	r3, r5, #27
    f7f4:	f100 8158 	bmi.w	faa8 <_ZN9ClearCore11MotorDriver7RefreshEv+0x4d8>
    f7f8:	f894 312f 	ldrb.w	r3, [r4, #303]	; 0x12f
            if (!m_hlfbCarrierLost) {
    f7fc:	2b00      	cmp	r3, #0
    f7fe:	f040 810f 	bne.w	fa20 <_ZN9ClearCore11MotorDriver7RefreshEv+0x450>
                m_hlfbStateChangeCounter = (MS_TO_SAMPLES * m_hlfbCarrierLossStateChange_ms);
    f802:	f8d4 30e8 	ldr.w	r3, [r4, #232]	; 0xe8
    f806:	eb03 0383 	add.w	r3, r3, r3, lsl #2
    f80a:	f8a4 30f8 	strh.w	r3, [r4, #248]	; 0xf8
    f80e:	e707      	b.n	f620 <_ZN9ClearCore11MotorDriver7RefreshEv+0x50>
            MotorInAState(CcioMgr.PinState(m_inputAConnector));
    f810:	4b0f      	ldr	r3, [pc, #60]	; (f850 <_ZN9ClearCore11MotorDriver7RefreshEv+0x280>)
    f812:	f9b4 10d2 	ldrsh.w	r1, [r4, #210]	; 0xd2
    f816:	6818      	ldr	r0, [r3, #0]
    f818:	f7fe fe78 	bl	e50c <_ZN9ClearCore16CcioBoardManager8PinStateE13ClearCorePins>
    switch (m_mode) {
    f81c:	79a3      	ldrb	r3, [r4, #6]
    f81e:	2b09      	cmp	r3, #9
    f820:	f47f af2d 	bne.w	f67e <_ZN9ClearCore11MotorDriver7RefreshEv+0xae>
            DATA_OUTPUT_STATE(m_aInfo->gpioPort, m_aDataMask, !value);
    f824:	f8d4 30a4 	ldr.w	r3, [r4, #164]	; 0xa4
    f828:	f8d4 20b0 	ldr.w	r2, [r4, #176]	; 0xb0
    f82c:	f993 3001 	ldrsb.w	r3, [r3, #1]
    f830:	01db      	lsls	r3, r3, #7
    f832:	f103 4382 	add.w	r3, r3, #1090519040	; 0x41000000
    f836:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
    f83a:	2800      	cmp	r0, #0
    f83c:	f000 8119 	beq.w	fa72 <_ZN9ClearCore11MotorDriver7RefreshEv+0x4a2>
    f840:	615a      	str	r2, [r3, #20]
    f842:	e71f      	b.n	f684 <_ZN9ClearCore11MotorDriver7RefreshEv+0xb4>
    f844:	0002d400 	.word	0x0002d400
    f848:	c61c3c00 	.word	0xc61c3c00
    f84c:	20001a7c 	.word	0x20001a7c
    f850:	20001fac 	.word	0x20001fac
    f854:	f894 003d 	ldrb.w	r0, [r4, #61]	; 0x3d
    f858:	f894 2040 	ldrb.w	r2, [r4, #64]	; 0x40
    statusRegPending.bit.InPositiveLimit = m_limitInfo.InPosHWLimit;
    f85c:	f3c2 07c0 	ubfx	r7, r2, #3, #1
    f860:	f367 358e 	bfi	r5, r7, #14, #1
    statusRegPending.bit.InNegativeLimit = m_limitInfo.InNegHWLimit;
    f864:	f3c2 1200 	ubfx	r2, r2, #4, #1
    statusRegPending.bit.Triggering = m_enableTriggerActive;
    f868:	f894 7101 	ldrb.w	r7, [r4, #257]	; 0x101
    statusRegPending.bit.InNegativeLimit = m_limitInfo.InNegHWLimit;
    f86c:	f362 35cf 	bfi	r5, r2, #15, #1
    statusRegPending.bit.Triggering = m_enableTriggerActive;
    f870:	f367 354d 	bfi	r5, r7, #13, #1
    statusRegPending.bit.MoveDirection = StepGenerator::m_direction;
    f874:	f360 05c3 	bfi	r5, r0, #3, #1
        (StepGenerator::m_moveState != StepGenerator::MoveStates::MS_IDLE &&
    f878:	2b00      	cmp	r3, #0
    f87a:	f000 80ab 	beq.w	f9d4 <_ZN9ClearCore11MotorDriver7RefreshEv+0x404>
    f87e:	1f98      	subs	r0, r3, #6
    f880:	bf18      	it	ne
    f882:	2001      	movne	r0, #1
    statusRegPending.bit.AtTargetPosition = m_isEnabled && 
    f884:	f894 212e 	ldrb.w	r2, [r4, #302]	; 0x12e
    statusRegPending.bit.StepsActive =
    f888:	f360 0541 	bfi	r5, r0, #1, #1
        m_lastMoveWasPositional && !statusRegPending.bit.StepsActive &&
    f88c:	2a00      	cmp	r2, #0
    f88e:	f000 809b 	beq.w	f9c8 <_ZN9ClearCore11MotorDriver7RefreshEv+0x3f8>
        m_hlfbState == HLFB_ASSERTED;
    f892:	f894 00f4 	ldrb.w	r0, [r4, #244]	; 0xf4
    statusRegPending.bit.AtTargetPosition = m_isEnabled && 
    f896:	b111      	cbz	r1, f89e <_ZN9ClearCore11MotorDriver7RefreshEv+0x2ce>
        m_lastMoveWasPositional && !statusRegPending.bit.StepsActive &&
    f898:	07af      	lsls	r7, r5, #30
    f89a:	f140 80df 	bpl.w	fa5c <_ZN9ClearCore11MotorDriver7RefreshEv+0x48c>
    statusRegPending.bit.AtTargetPosition = m_isEnabled && 
    f89e:	f36f 0500 	bfc	r5, #0, #1
    statusRegPending.bit.AtTargetVelocity = m_isEnabled &&
    f8a2:	2b03      	cmp	r3, #3
    f8a4:	d071      	beq.n	f98a <_ZN9ClearCore11MotorDriver7RefreshEv+0x3ba>
        (StepGenerator::m_moveState == StepGenerator::MoveStates::MS_CRUISE ||
    f8a6:	f015 0302 	ands.w	r3, r5, #2
    f8aa:	f040 80ce 	bne.w	fa4a <_ZN9ClearCore11MotorDriver7RefreshEv+0x47a>
        (!statusRegPending.bit.StepsActive && !m_lastMoveWasPositional)) &&
    f8ae:	2900      	cmp	r1, #0
    f8b0:	d06b      	beq.n	f98a <_ZN9ClearCore11MotorDriver7RefreshEv+0x3ba>
    statusRegPending.bit.AtTargetVelocity = m_isEnabled &&
    f8b2:	f363 0582 	bfi	r5, r3, #2, #1
    if (m_isEnabling) {
    f8b6:	f894 312d 	ldrb.w	r3, [r4, #301]	; 0x12d
    statusRegPending.bit.PositionalMove = m_lastMoveWasPositional;
    f8ba:	f361 1586 	bfi	r5, r1, #6, #1
    statusRegPending.bit.HlfbState = m_hlfbState;
    f8be:	f360 15c8 	bfi	r5, r0, #7, #2
    if (m_isEnabling) {
    f8c2:	2b00      	cmp	r3, #0
    f8c4:	d065      	beq.n	f992 <_ZN9ClearCore11MotorDriver7RefreshEv+0x3c2>
        if (m_enableCounter > 0) {
    f8c6:	f8d4 3130 	ldr.w	r3, [r4, #304]	; 0x130
    f8ca:	2b00      	cmp	r3, #0
    f8cc:	f340 8113 	ble.w	faf6 <_ZN9ClearCore11MotorDriver7RefreshEv+0x526>
    statusRegPending.bit.Enabled = m_isEnabled;
    f8d0:	f362 1545 	bfi	r5, r2, #5, #1
        statusRegPending.bit.ReadyState = MotorReadyStates::MOTOR_ENABLING;
    f8d4:	2201      	movs	r2, #1
            m_enableCounter--;
    f8d6:	3b01      	subs	r3, #1
        statusRegPending.bit.ReadyState = MotorReadyStates::MOTOR_ENABLING;
    f8d8:	f362 258c 	bfi	r5, r2, #10, #3
            m_enableCounter--;
    f8dc:	f8c4 3130 	str.w	r3, [r4, #304]	; 0x130
    f8e0:	f005 0302 	and.w	r3, r5, #2
    if (statusRegPending.bit.StepsActive) {
    f8e4:	b11b      	cbz	r3, f8ee <_ZN9ClearCore11MotorDriver7RefreshEv+0x31e>
        if (alertRegPending.bit.MotorFaulted) {
    f8e6:	06b3      	lsls	r3, r6, #26
            alertRegPending.bit.MotionCanceledInAlert = 1;
    f8e8:	bf48      	it	mi
    f8ea:	f046 0601 	orrmi.w	r6, r6, #1
    statusRegPending.bit.AlertsPresent = (bool)alertRegPending.reg;
    f8ee:	1c32      	adds	r2, r6, #0
    f8f0:	bf18      	it	ne
    f8f2:	2201      	movne	r2, #1
    atomic_or_fetch(&m_statusRegMotorRisen.reg,
    f8f4:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
    m_alertRegMotor = alertRegPending;
    f8f8:	f8c4 6128 	str.w	r6, [r4, #296]	; 0x128
    statusRegPending.bit.AlertsPresent = (bool)alertRegPending.reg;
    f8fc:	f362 2549 	bfi	r5, r2, #9, #1
    m_statusRegMotor = statusRegPending;
    f900:	f8c4 5118 	str.w	r5, [r4, #280]	; 0x118
    atomic_or_fetch(&m_statusRegMotorRisen.reg,
    f904:	ea25 0303 	bic.w	r3, r5, r3
                    ~m_statusRegMotorLast.reg & statusRegPending.reg);
    f908:	f504 728e 	add.w	r2, r4, #284	; 0x11c
    f90c:	f3bf 8f5b 	dmb	ish
    f910:	e852 1f00 	ldrex	r1, [r2]
    f914:	4319      	orrs	r1, r3
    f916:	e842 1000 	strex	r0, r1, [r2]
    f91a:	2800      	cmp	r0, #0
    f91c:	d1f8      	bne.n	f910 <_ZN9ClearCore11MotorDriver7RefreshEv+0x340>
    f91e:	f3bf 8f5b 	dmb	ish
    atomic_or_fetch(&m_statusRegMotorFallen.reg,
    f922:	f8d4 2124 	ldr.w	r2, [r4, #292]	; 0x124
                    m_statusRegMotorLast.reg & ~statusRegPending.reg);
    f926:	f3bf 8f5b 	dmb	ish
    f92a:	f504 7390 	add.w	r3, r4, #288	; 0x120
    atomic_or_fetch(&m_statusRegMotorFallen.reg,
    f92e:	ea22 0505 	bic.w	r5, r2, r5
                    m_statusRegMotorLast.reg & ~statusRegPending.reg);
    f932:	e853 2f00 	ldrex	r2, [r3]
    f936:	432a      	orrs	r2, r5
    f938:	e843 2100 	strex	r1, r2, [r3]
    f93c:	2900      	cmp	r1, #0
    f93e:	d1f8      	bne.n	f932 <_ZN9ClearCore11MotorDriver7RefreshEv+0x362>
    f940:	f3bf 8f5b 	dmb	ish
    if (Connector::m_mode == Connector::CPM_MODE_STEP_AND_DIR) {
    f944:	79a3      	ldrb	r3, [r4, #6]
    m_statusRegMotorLast.reg = m_statusRegMotor.reg;
    f946:	f8d4 2118 	ldr.w	r2, [r4, #280]	; 0x118
    f94a:	f8c4 2124 	str.w	r2, [r4, #292]	; 0x124
    if (Connector::m_mode == Connector::CPM_MODE_STEP_AND_DIR) {
    f94e:	2b0a      	cmp	r3, #10
    f950:	f47f ae42 	bne.w	f5d8 <_ZN9ClearCore11MotorDriver7RefreshEv+0x8>
        StepGenerator::StepsCalculated();
    f954:	f104 0530 	add.w	r5, r4, #48	; 0x30
    f958:	4628      	mov	r0, r5
    f95a:	f7fa fccd 	bl	a2f8 <_ZN9ClearCore13StepGenerator15StepsCalculatedEv>
        StepGenerator::CheckTravelLimits();
    f95e:	4628      	mov	r0, r5
    f960:	f7fa ffee 	bl	a940 <_ZN9ClearCore13StepGenerator17CheckTravelLimitsEv>
    if (*m_bTccBuffer == m_bDutyCnt) {
    f964:	f8d4 50bc 	ldr.w	r5, [r4, #188]	; 0xbc
        m_bDutyCnt = StepGenerator::m_stepsPrevious;
    f968:	6b60      	ldr	r0, [r4, #52]	; 0x34
    if (*m_bTccBuffer == m_bDutyCnt) {
    f96a:	682a      	ldr	r2, [r5, #0]
        m_bDutyCnt = StepGenerator::m_stepsPrevious;
    f96c:	f8a4 0112 	strh.w	r0, [r4, #274]	; 0x112
    f970:	b280      	uxth	r0, r0
    if (*m_bTccBuffer == m_bDutyCnt) {
    f972:	4282      	cmp	r2, r0
    f974:	f43f ae30 	beq.w	f5d8 <_ZN9ClearCore11MotorDriver7RefreshEv+0x8>
    f978:	f8d4 10cc 	ldr.w	r1, [r4, #204]	; 0xcc
    f97c:	f8d4 20c8 	ldr.w	r2, [r4, #200]	; 0xc8
    while (*m_bTccSyncReg & m_bTccSyncMask) {
    f980:	680b      	ldr	r3, [r1, #0]
    f982:	4213      	tst	r3, r2
    f984:	d1fc      	bne.n	f980 <_ZN9ClearCore11MotorDriver7RefreshEv+0x3b0>
    *m_bTccBuffer = m_bDutyCnt;
    f986:	6028      	str	r0, [r5, #0]
    f988:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        (!statusRegPending.bit.StepsActive && !m_lastMoveWasPositional)) &&
    f98a:	1c03      	adds	r3, r0, #0
    f98c:	bf18      	it	ne
    f98e:	2301      	movne	r3, #1
    f990:	e78f      	b.n	f8b2 <_ZN9ClearCore11MotorDriver7RefreshEv+0x2e2>
    statusRegPending.bit.Enabled = m_isEnabled;
    f992:	f362 1545 	bfi	r5, r2, #5, #1
    if (!(m_isEnabled || m_isEnabling)) {
    f996:	2a00      	cmp	r2, #0
    f998:	d03a      	beq.n	fa10 <_ZN9ClearCore11MotorDriver7RefreshEv+0x440>
        if (m_hlfbMode != HLFB_MODE_STATIC &&
    f99a:	f894 30d8 	ldrb.w	r3, [r4, #216]	; 0xd8
    f99e:	b933      	cbnz	r3, f9ae <_ZN9ClearCore11MotorDriver7RefreshEv+0x3de>
        else if ((m_hlfbMode == HLFB_MODE_STATIC &&
    f9a0:	b938      	cbnz	r0, f9b2 <_ZN9ClearCore11MotorDriver7RefreshEv+0x3e2>
    f9a2:	f005 0302 	and.w	r3, r5, #2
            statusRegPending.bit.ReadyState = MotorReadyStates::MOTOR_MOVING;
    f9a6:	2204      	movs	r2, #4
    f9a8:	f362 258c 	bfi	r5, r2, #10, #3
    f9ac:	e79a      	b.n	f8e4 <_ZN9ClearCore11MotorDriver7RefreshEv+0x314>
        if (m_hlfbMode != HLFB_MODE_STATIC &&
    f9ae:	2800      	cmp	r0, #0
    f9b0:	d063      	beq.n	fa7a <_ZN9ClearCore11MotorDriver7RefreshEv+0x4aa>
                  m_hlfbState == MotorDriver::HlfbStates::HLFB_DEASSERTED) ||
    f9b2:	f015 0302 	ands.w	r3, r5, #2
    f9b6:	d1f6      	bne.n	f9a6 <_ZN9ClearCore11MotorDriver7RefreshEv+0x3d6>
            statusRegPending.bit.ReadyState = MotorReadyStates::MOTOR_READY;
    f9b8:	2203      	movs	r2, #3
    f9ba:	f362 258c 	bfi	r5, r2, #10, #3
            statusRegPending.bit.MotorInFault = 0;
    f9be:	f363 1504 	bfi	r5, r3, #4, #1
    f9c2:	f005 0302 	and.w	r3, r5, #2
    f9c6:	e78d      	b.n	f8e4 <_ZN9ClearCore11MotorDriver7RefreshEv+0x314>
    statusRegPending.bit.AtTargetPosition = m_isEnabled && 
    f9c8:	f362 0500 	bfi	r5, r2, #0, #1
    f9cc:	f894 00f4 	ldrb.w	r0, [r4, #244]	; 0xf4
        (!statusRegPending.bit.StepsActive && !m_lastMoveWasPositional)) &&
    f9d0:	4613      	mov	r3, r2
    f9d2:	e76e      	b.n	f8b2 <_ZN9ClearCore11MotorDriver7RefreshEv+0x2e2>
        (StepGenerator::m_moveState != StepGenerator::MoveStates::MS_IDLE &&
    f9d4:	4618      	mov	r0, r3
    f9d6:	e755      	b.n	f884 <_ZN9ClearCore11MotorDriver7RefreshEv+0x2b4>
    if (m_moveState == MS_IDLE) {
    f9d8:	f894 303c 	ldrb.w	r3, [r4, #60]	; 0x3c
    f9dc:	bb93      	cbnz	r3, fa44 <_ZN9ClearCore11MotorDriver7RefreshEv+0x474>
        m_motionCancellingEStop = false;
    f9de:	f884 313c 	strb.w	r3, [r4, #316]	; 0x13c
    f9e2:	461f      	mov	r7, r3
    f9e4:	e6dd      	b.n	f7a2 <_ZN9ClearCore11MotorDriver7RefreshEv+0x1d2>
            if (m_hlfbMode == HLFB_MODE_STATIC) {
    f9e6:	f894 10d8 	ldrb.w	r1, [r4, #216]	; 0xd8
    f9ea:	b381      	cbz	r1, fa4e <_ZN9ClearCore11MotorDriver7RefreshEv+0x47e>
                brakeOutput->State(static_cast<int16_t>(m_hlfbState != HLFB_DEASSERTED && m_isEnabled));
    f9ec:	682b      	ldr	r3, [r5, #0]
    f9ee:	f894 10f4 	ldrb.w	r1, [r4, #244]	; 0xf4
    f9f2:	695b      	ldr	r3, [r3, #20]
    f9f4:	b109      	cbz	r1, f9fa <_ZN9ClearCore11MotorDriver7RefreshEv+0x42a>
    f9f6:	f894 112e 	ldrb.w	r1, [r4, #302]	; 0x12e
    f9fa:	4628      	mov	r0, r5
    f9fc:	4798      	blx	r3
    f9fe:	e67c      	b.n	f6fa <_ZN9ClearCore11MotorDriver7RefreshEv+0x12a>
    else if (eStopInput && !m_motionCancellingEStop) {
    fa00:	b307      	cbz	r7, fa44 <_ZN9ClearCore11MotorDriver7RefreshEv+0x474>
    fa02:	f894 113c 	ldrb.w	r1, [r4, #316]	; 0x13c
    fa06:	2900      	cmp	r1, #0
    fa08:	f000 80ab 	beq.w	fb62 <_ZN9ClearCore11MotorDriver7RefreshEv+0x592>
    statusRegPending.bit.InEStopSensor = (eStopInput || m_motionCancellingEStop);
    fa0c:	460f      	mov	r7, r1
    fa0e:	e6c8      	b.n	f7a2 <_ZN9ClearCore11MotorDriver7RefreshEv+0x1d2>
        statusRegPending.bit.ReadyState = MotorReadyStates::MOTOR_DISABLED;
    fa10:	f362 258c 	bfi	r5, r2, #10, #3
        if (statusRegPending.bit.StepsActive) {
    fa14:	07aa      	lsls	r2, r5, #30
    fa16:	f57f af6a 	bpl.w	f8ee <_ZN9ClearCore11MotorDriver7RefreshEv+0x31e>
            alertRegPending.bit.MotionCanceledMotorDisabled = 1;
    fa1a:	f046 0610 	orr.w	r6, r6, #16
    fa1e:	e762      	b.n	f8e6 <_ZN9ClearCore11MotorDriver7RefreshEv+0x316>
                bool readHlfbState = (DigitalIn::m_stateFiltered ^ invert);
    fa20:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
                if (readHlfbState != m_lastHlfbInputValue) {
    fa24:	f894 10f5 	ldrb.w	r1, [r4, #245]	; 0xf5
                bool readHlfbState = (DigitalIn::m_stateFiltered ^ invert);
    fa28:	4073      	eors	r3, r6
    fa2a:	b2da      	uxtb	r2, r3
                if (readHlfbState != m_lastHlfbInputValue) {
    fa2c:	4291      	cmp	r1, r2
    fa2e:	f000 80a4 	beq.w	fb7a <_ZN9ClearCore11MotorDriver7RefreshEv+0x5aa>
                    m_hlfbStateChangeCounter = (MS_TO_SAMPLES * m_hlfbCarrierLossStateChange_ms);
    fa32:	f8d4 30e8 	ldr.w	r3, [r4, #232]	; 0xe8
                    m_lastHlfbInputValue = readHlfbState;
    fa36:	f884 20f5 	strb.w	r2, [r4, #245]	; 0xf5
                    m_hlfbStateChangeCounter = (MS_TO_SAMPLES * m_hlfbCarrierLossStateChange_ms);
    fa3a:	eb03 0383 	add.w	r3, r3, r3, lsl #2
    fa3e:	f8a4 30f8 	strh.w	r3, [r4, #248]	; 0xf8
    fa42:	e5ed      	b.n	f620 <_ZN9ClearCore11MotorDriver7RefreshEv+0x50>
    fa44:	f894 713c 	ldrb.w	r7, [r4, #316]	; 0x13c
    fa48:	e6ab      	b.n	f7a2 <_ZN9ClearCore11MotorDriver7RefreshEv+0x1d2>
        (!statusRegPending.bit.StepsActive && !m_lastMoveWasPositional)) &&
    fa4a:	2300      	movs	r3, #0
    fa4c:	e731      	b.n	f8b2 <_ZN9ClearCore11MotorDriver7RefreshEv+0x2e2>
                brakeOutput->State(static_cast<int16_t>(m_hlfbState == HLFB_ASSERTED && m_isEnabled));
    fa4e:	f894 20f4 	ldrb.w	r2, [r4, #244]	; 0xf4
    fa52:	682b      	ldr	r3, [r5, #0]
    fa54:	2a01      	cmp	r2, #1
    fa56:	695b      	ldr	r3, [r3, #20]
    fa58:	d1cf      	bne.n	f9fa <_ZN9ClearCore11MotorDriver7RefreshEv+0x42a>
    fa5a:	e7cc      	b.n	f9f6 <_ZN9ClearCore11MotorDriver7RefreshEv+0x426>
        m_lastMoveWasPositional && !statusRegPending.bit.StepsActive &&
    fa5c:	2801      	cmp	r0, #1
    fa5e:	f47f af1e 	bne.w	f89e <_ZN9ClearCore11MotorDriver7RefreshEv+0x2ce>
    statusRegPending.bit.AtTargetPosition = m_isEnabled && 
    fa62:	f045 0501 	orr.w	r5, r5, #1
    fa66:	e71c      	b.n	f8a2 <_ZN9ClearCore11MotorDriver7RefreshEv+0x2d2>
        else if (!m_direction && m_limitInfo.InPosHWLimit) {
    fa68:	0717      	lsls	r7, r2, #28
            alertRegPending.bit.MotionCanceledPositiveLimit = 1;
    fa6a:	bf48      	it	mi
    fa6c:	f046 0602 	orrmi.w	r6, r6, #2
    fa70:	e6f4      	b.n	f85c <_ZN9ClearCore11MotorDriver7RefreshEv+0x28c>
            DATA_OUTPUT_STATE(m_aInfo->gpioPort, m_aDataMask, !value);
    fa72:	619a      	str	r2, [r3, #24]
    fa74:	e606      	b.n	f684 <_ZN9ClearCore11MotorDriver7RefreshEv+0xb4>
            DATA_OUTPUT_STATE(m_bInfo->gpioPort, m_bDataMask, !value);
    fa76:	619a      	str	r2, [r3, #24]
    fa78:	e62a      	b.n	f6d0 <_ZN9ClearCore11MotorDriver7RefreshEv+0x100>
            statusRegPending.bit.ReadyState = MotorReadyStates::MOTOR_FAULTED;
    fa7a:	2302      	movs	r3, #2
    fa7c:	f363 258c 	bfi	r5, r3, #10, #3
            statusRegPending.bit.MotorInFault = 1;
    fa80:	f045 0510 	orr.w	r5, r5, #16
            MoveStopAbrupt();
    fa84:	f104 0030 	add.w	r0, r4, #48	; 0x30
    fa88:	f7fa fede 	bl	a848 <_ZN9ClearCore13StepGenerator14MoveStopAbruptEv>
            alertRegPending.bit.MotorFaulted = 1;
    fa8c:	f046 0620 	orr.w	r6, r6, #32
    fa90:	f005 0302 	and.w	r3, r5, #2
    fa94:	e726      	b.n	f8e4 <_ZN9ClearCore11MotorDriver7RefreshEv+0x314>
                (Milliseconds() - m_hlfbLastCarrierDetectTime
    fa96:	f7f8 fe11 	bl	86bc <Milliseconds>
    fa9a:	f8d4 30ec 	ldr.w	r3, [r4, #236]	; 0xec
    fa9e:	1ac0      	subs	r0, r0, r3
            if ((intFlagReg & (TC_INTFLAG_OVF | TC_INTFLAG_ERR)) ||
    faa0:	2803      	cmp	r0, #3
    faa2:	f63f ae97 	bhi.w	f7d4 <_ZN9ClearCore11MotorDriver7RefreshEv+0x204>
    faa6:	e6a4      	b.n	f7f2 <_ZN9ClearCore11MotorDriver7RefreshEv+0x222>
                m_hlfbLastCarrierDetectTime = Milliseconds();
    faa8:	f7f8 fe08 	bl	86bc <Milliseconds>
                if (m_hlfbNoPwmSampleCount) {
    faac:	f8b4 30e2 	ldrh.w	r3, [r4, #226]	; 0xe2
                m_hlfbLastCarrierDetectTime = Milliseconds();
    fab0:	f8c4 00ec 	str.w	r0, [r4, #236]	; 0xec
                if (m_hlfbNoPwmSampleCount) {
    fab4:	2b00      	cmp	r3, #0
    fab6:	d03a      	beq.n	fb2e <_ZN9ClearCore11MotorDriver7RefreshEv+0x55e>
                    tcCount->INTFLAG.reg = TC_INTFLAG_MC0 | TC_INTFLAG_MC1;
    fab8:	2330      	movs	r3, #48	; 0x30
    faba:	72bb      	strb	r3, [r7, #10]
                    m_hlfbPwmReadingPending = false;
    fabc:	2200      	movs	r2, #0
    fabe:	f894 312f 	ldrb.w	r3, [r4, #303]	; 0x12f
    fac2:	f884 20f6 	strb.w	r2, [r4, #246]	; 0xf6
                    m_hlfbNoPwmSampleCount = 0;
    fac6:	f8a4 20e2 	strh.w	r2, [r4, #226]	; 0xe2
    faca:	e697      	b.n	f7fc <_ZN9ClearCore11MotorDriver7RefreshEv+0x22c>
            EnableRequest(CcioMgr.PinState(m_enableConnector));
    facc:	4b54      	ldr	r3, [pc, #336]	; (fc20 <_ZN9ClearCore11MotorDriver7RefreshEv+0x650>)
    face:	f9b4 10d0 	ldrsh.w	r1, [r4, #208]	; 0xd0
    fad2:	6818      	ldr	r0, [r3, #0]
    fad4:	f7fe fd1a 	bl	e50c <_ZN9ClearCore16CcioBoardManager8PinStateE13ClearCorePins>
    fad8:	4601      	mov	r1, r0
    fada:	4620      	mov	r0, r4
    fadc:	f7ff fbf6 	bl	f2cc <_ZN9ClearCore11MotorDriver13EnableRequestEb>
    fae0:	e5b5      	b.n	f64e <_ZN9ClearCore11MotorDriver7RefreshEv+0x7e>
            PosLimitActive(!input->State());
    fae2:	682b      	ldr	r3, [r5, #0]
    fae4:	4628      	mov	r0, r5
    fae6:	691b      	ldr	r3, [r3, #16]
    fae8:	4798      	blx	r3
    faea:	e617      	b.n	f71c <_ZN9ClearCore11MotorDriver7RefreshEv+0x14c>
            NegLimitActive(!input->State());
    faec:	682b      	ldr	r3, [r5, #0]
    faee:	4628      	mov	r0, r5
    faf0:	691b      	ldr	r3, [r3, #16]
    faf2:	4798      	blx	r3
    faf4:	e62c      	b.n	f750 <_ZN9ClearCore11MotorDriver7RefreshEv+0x180>
            m_isEnabled = true;
    faf6:	2201      	movs	r2, #1
            m_isEnabling = false;
    faf8:	2300      	movs	r3, #0
    statusRegPending.bit.Enabled = m_isEnabled;
    fafa:	f045 0520 	orr.w	r5, r5, #32
            m_isEnabled = true;
    fafe:	f884 212e 	strb.w	r2, [r4, #302]	; 0x12e
            m_isEnabling = false;
    fb02:	f884 312d 	strb.w	r3, [r4, #301]	; 0x12d
    fb06:	e748      	b.n	f99a <_ZN9ClearCore11MotorDriver7RefreshEv+0x3ca>
            eStop = !(input->State());
    fb08:	683b      	ldr	r3, [r7, #0]
    fb0a:	4638      	mov	r0, r7
    fb0c:	691b      	ldr	r3, [r3, #16]
    fb0e:	4798      	blx	r3
    fb10:	fab0 f780 	clz	r7, r0
    fb14:	097f      	lsrs	r7, r7, #5
    fb16:	e63d      	b.n	f794 <_ZN9ClearCore11MotorDriver7RefreshEv+0x1c4>
            MotorInBState(CcioMgr.PinState(m_inputBConnector));
    fb18:	4b41      	ldr	r3, [pc, #260]	; (fc20 <_ZN9ClearCore11MotorDriver7RefreshEv+0x650>)
    fb1a:	f9b4 10d4 	ldrsh.w	r1, [r4, #212]	; 0xd4
    fb1e:	6818      	ldr	r0, [r3, #0]
    fb20:	f7fe fcf4 	bl	e50c <_ZN9ClearCore16CcioBoardManager8PinStateE13ClearCorePins>
    switch (m_mode) {
    fb24:	79a3      	ldrb	r3, [r4, #6]
    fb26:	2b09      	cmp	r3, #9
    fb28:	f43f adc3 	beq.w	f6b2 <_ZN9ClearCore11MotorDriver7RefreshEv+0xe2>
    fb2c:	e5d0      	b.n	f6d0 <_ZN9ClearCore11MotorDriver7RefreshEv+0x100>
                else if (intFlagReg & TC_INTFLAG_MC1) {
    fb2e:	06ad      	lsls	r5, r5, #26
    fb30:	f57f ae62 	bpl.w	f7f8 <_ZN9ClearCore11MotorDriver7RefreshEv+0x228>
                    m_hlfbWidth[0] = m_hlfbWidth[CPM_HLFB_CAP_HISTORY - 1];
    fb34:	f8b4 10dc 	ldrh.w	r1, [r4, #220]	; 0xdc
                    m_hlfbPeriod[0] = m_hlfbPeriod[CPM_HLFB_CAP_HISTORY - 1];
    fb38:	f8b4 20e0 	ldrh.w	r2, [r4, #224]	; 0xe0
                    m_hlfbWidth[0] = m_hlfbWidth[CPM_HLFB_CAP_HISTORY - 1];
    fb3c:	f8a4 10da 	strh.w	r1, [r4, #218]	; 0xda
                    m_hlfbPeriod[0] = m_hlfbPeriod[CPM_HLFB_CAP_HISTORY - 1];
    fb40:	f8a4 20de 	strh.w	r2, [r4, #222]	; 0xde
                    m_hlfbWidth[CPM_HLFB_CAP_HISTORY - 1] = tcCount->CC[1].reg;
    fb44:	8bf8      	ldrh	r0, [r7, #30]
    fb46:	f8a4 00dc 	strh.w	r0, [r4, #220]	; 0xdc
                    if (m_hlfbPwmReadingPending) {
    fb4a:	f894 00f6 	ldrb.w	r0, [r4, #246]	; 0xf6
                    m_hlfbPeriod[CPM_HLFB_CAP_HISTORY - 1] = tcCount->CC[0].reg;
    fb4e:	8bbd      	ldrh	r5, [r7, #28]
    fb50:	f8a4 50e0 	strh.w	r5, [r4, #224]	; 0xe0
                    if (m_hlfbPwmReadingPending) {
    fb54:	b9d0      	cbnz	r0, fb8c <_ZN9ClearCore11MotorDriver7RefreshEv+0x5bc>
    fb56:	f894 312f 	ldrb.w	r3, [r4, #303]	; 0x12f
                    m_hlfbPwmReadingPending = true;
    fb5a:	2201      	movs	r2, #1
    fb5c:	f884 20f6 	strb.w	r2, [r4, #246]	; 0xf6
    fb60:	e64c      	b.n	f7fc <_ZN9ClearCore11MotorDriver7RefreshEv+0x22c>
        MoveStopDecel();
    fb62:	f104 0030 	add.w	r0, r4, #48	; 0x30
    fb66:	f7fa fe8b 	bl	a880 <_ZN9ClearCore13StepGenerator13MoveStopDecelEm>
        m_motionCancellingEStop = true;
    fb6a:	2301      	movs	r3, #1
    fb6c:	f884 313c 	strb.w	r3, [r4, #316]	; 0x13c
        alertRegPending.bit.MotionCanceledSensorEStop = 1;
    fb70:	f046 0608 	orr.w	r6, r6, #8
    fb74:	f894 303c 	ldrb.w	r3, [r4, #60]	; 0x3c
    fb78:	e613      	b.n	f7a2 <_ZN9ClearCore11MotorDriver7RefreshEv+0x1d2>
                else if (m_hlfbStateChangeCounter && m_hlfbStateChangeCounter--) {
    fb7a:	f8b4 20f8 	ldrh.w	r2, [r4, #248]	; 0xf8
    fb7e:	2a00      	cmp	r2, #0
    fb80:	f43f ad49 	beq.w	f616 <_ZN9ClearCore11MotorDriver7RefreshEv+0x46>
    fb84:	3a01      	subs	r2, #1
    fb86:	f8a4 20f8 	strh.w	r2, [r4, #248]	; 0xf8
    fb8a:	e549      	b.n	f620 <_ZN9ClearCore11MotorDriver7RefreshEv+0x50>
                        float dutyCycle = static_cast<float>(m_hlfbWidth[0]) /
    fb8c:	ee07 1a90 	vmov	s15, r1
    fb90:	eeb8 7a67 	vcvt.f32.u32	s14, s15
                                          static_cast<float>(m_hlfbPeriod[0]);
    fb94:	ee07 2a90 	vmov	s15, r2
    fb98:	eef8 7a67 	vcvt.f32.u32	s15, s15
                        m_hlfbCarrierLost = false;
    fb9c:	f884 312f 	strb.w	r3, [r4, #303]	; 0x12f
                        m_hlfbDuty = (dutyCycle - 0.05) * (10000. / 90.);
    fba0:	eec7 6a27 	vdiv.f32	s13, s14, s15
    fba4:	ee16 0a90 	vmov	r0, s13
    fba8:	f015 fc44 	bl	25434 <__aeabi_f2d>
    fbac:	a318      	add	r3, pc, #96	; (adr r3, fc10 <_ZN9ClearCore11MotorDriver7RefreshEv+0x640>)
    fbae:	e9d3 2300 	ldrd	r2, r3, [r3]
    fbb2:	f015 fadf 	bl	25174 <__aeabi_dsub>
    fbb6:	a318      	add	r3, pc, #96	; (adr r3, fc18 <_ZN9ClearCore11MotorDriver7RefreshEv+0x648>)
    fbb8:	e9d3 2300 	ldrd	r2, r3, [r3]
    fbbc:	f015 fc8e 	bl	254dc <__aeabi_dmul>
    fbc0:	f015 ff6e 	bl	25aa0 <__aeabi_d2f>
    fbc4:	ee07 0a90 	vmov	s15, r0
                        if (invert) {
    fbc8:	b11e      	cbz	r6, fbd2 <_ZN9ClearCore11MotorDriver7RefreshEv+0x602>
                            m_hlfbDuty = 100 - m_hlfbDuty;
    fbca:	ed9f 7a16 	vldr	s14, [pc, #88]	; fc24 <_ZN9ClearCore11MotorDriver7RefreshEv+0x654>
    fbce:	ee77 7a67 	vsub.f32	s15, s14, s15
                        if (m_hlfbMode == HLFB_MODE_HAS_BIPOLAR_PWM) {
    fbd2:	f894 30d8 	ldrb.w	r3, [r4, #216]	; 0xd8
                            m_hlfbDuty = 100 - m_hlfbDuty;
    fbd6:	edc4 7a3c 	vstr	s15, [r4, #240]	; 0xf0
                        if (m_hlfbMode == HLFB_MODE_HAS_BIPOLAR_PWM) {
    fbda:	2b02      	cmp	r3, #2
    fbdc:	d004      	beq.n	fbe8 <_ZN9ClearCore11MotorDriver7RefreshEv+0x618>
                        m_hlfbState = HLFB_HAS_MEASUREMENT;
    fbde:	2302      	movs	r3, #2
    fbe0:	f884 30f4 	strb.w	r3, [r4, #244]	; 0xf4
    fbe4:	2300      	movs	r3, #0
    fbe6:	e7b8      	b.n	fb5a <_ZN9ClearCore11MotorDriver7RefreshEv+0x58a>
                            m_hlfbDuty = 2.0 * (m_hlfbDuty - 50.);
    fbe8:	ee17 0a90 	vmov	r0, s15
    fbec:	f015 fc22 	bl	25434 <__aeabi_f2d>
    fbf0:	2200      	movs	r2, #0
    fbf2:	4b0d      	ldr	r3, [pc, #52]	; (fc28 <_ZN9ClearCore11MotorDriver7RefreshEv+0x658>)
    fbf4:	f015 fabe 	bl	25174 <__aeabi_dsub>
    fbf8:	4602      	mov	r2, r0
    fbfa:	460b      	mov	r3, r1
    fbfc:	f015 fabc 	bl	25178 <__adddf3>
    fc00:	f015 ff4e 	bl	25aa0 <__aeabi_d2f>
    fc04:	f8c4 00f0 	str.w	r0, [r4, #240]	; 0xf0
    fc08:	e7e9      	b.n	fbde <_ZN9ClearCore11MotorDriver7RefreshEv+0x60e>
    fc0a:	bf00      	nop
    fc0c:	f3af 8000 	nop.w
    fc10:	9999999a 	.word	0x9999999a
    fc14:	3fa99999 	.word	0x3fa99999
    fc18:	71c71c72 	.word	0x71c71c72
    fc1c:	405bc71c 	.word	0x405bc71c
    fc20:	20001fac 	.word	0x20001fac
    fc24:	42c80000 	.word	0x42c80000
    fc28:	40490000 	.word	0x40490000

0000fc2c <_ZN9ClearCore11MotorDriver4MoveElNS_13StepGenerator10MoveTargetE>:
bool MotorDriver::Move(int32_t dist, MoveTarget moveTarget) {
    fc2c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    fc30:	4604      	mov	r4, r0
    fc32:	460f      	mov	r7, r1
    if (moveTarget == MOVE_TARGET_ABSOLUTE) {
    fc34:	4690      	mov	r8, r2
    fc36:	2a00      	cmp	r2, #0
    fc38:	d154      	bne.n	fce4 <_ZN9ClearCore11MotorDriver4MoveElNS_13StepGenerator10MoveTargetE+0xb8>
        negDir = dist - m_posnAbsolute < 0;
    fc3a:	6c45      	ldr	r5, [r0, #68]	; 0x44
    fc3c:	1b4d      	subs	r5, r1, r5
    fc3e:	0fed      	lsrs	r5, r5, #31
    if (m_alertRegMotor.reg) {
    fc40:	f8d4 3128 	ldr.w	r3, [r4, #296]	; 0x128
    fc44:	2b00      	cmp	r3, #0
    fc46:	d04b      	beq.n	fce0 <_ZN9ClearCore11MotorDriver4MoveElNS_13StepGenerator10MoveTargetE+0xb4>
        m_alertRegMotor.bit.MotionCanceledInAlert = 1;
    fc48:	f894 3128 	ldrb.w	r3, [r4, #296]	; 0x128
    fc4c:	f043 0301 	orr.w	r3, r3, #1
    fc50:	f884 3128 	strb.w	r3, [r4, #296]	; 0x128
        valid = false;
    fc54:	2600      	movs	r6, #0
    fc56:	f894 3100 	ldrb.w	r3, [r4, #256]	; 0x100
    if (!EnableRequest()) {
    fc5a:	b933      	cbnz	r3, fc6a <_ZN9ClearCore11MotorDriver4MoveElNS_13StepGenerator10MoveTargetE+0x3e>
        m_alertRegMotor.bit.MotionCanceledMotorDisabled = 1;
    fc5c:	f894 2128 	ldrb.w	r2, [r4, #296]	; 0x128
    fc60:	f042 0210 	orr.w	r2, r2, #16
        valid = false;
    fc64:	461e      	mov	r6, r3
        m_alertRegMotor.bit.MotionCanceledMotorDisabled = 1;
    fc66:	f884 2128 	strb.w	r2, [r4, #296]	; 0x128
    if (m_eStopConnector != CLEARCORE_PIN_INVALID) {
    fc6a:	f9b4 113a 	ldrsh.w	r1, [r4, #314]	; 0x13a
    fc6e:	1c48      	adds	r0, r1, #1
    fc70:	d016      	beq.n	fca0 <_ZN9ClearCore11MotorDriver4MoveElNS_13StepGenerator10MoveTargetE+0x74>
        Connector *input = SysMgr.ConnectorByIndex(m_eStopConnector);
    fc72:	4829      	ldr	r0, [pc, #164]	; (fd18 <_ZN9ClearCore11MotorDriver4MoveElNS_13StepGenerator10MoveTargetE+0xec>)
    fc74:	f7f7 ff02 	bl	7a7c <_ZN9ClearCore10SysManager16ConnectorByIndexE13ClearCorePins>
        if (input->Type() == ClearCore::Connector::CCIO_DIGITAL_IN_OUT_TYPE) {
    fc78:	6803      	ldr	r3, [r0, #0]
    fc7a:	689b      	ldr	r3, [r3, #8]
        Connector *input = SysMgr.ConnectorByIndex(m_eStopConnector);
    fc7c:	4681      	mov	r9, r0
        if (input->Type() == ClearCore::Connector::CCIO_DIGITAL_IN_OUT_TYPE) {
    fc7e:	4798      	blx	r3
    fc80:	2809      	cmp	r0, #9
    fc82:	d040      	beq.n	fd06 <_ZN9ClearCore11MotorDriver4MoveElNS_13StepGenerator10MoveTargetE+0xda>
            eStop = !(inputB->DigitalIn::State());
    fc84:	4648      	mov	r0, r9
    fc86:	f7fd fbeb 	bl	d460 <_ZN9ClearCore9DigitalIn5StateEv>
    fc8a:	fab0 f080 	clz	r0, r0
    fc8e:	0940      	lsrs	r0, r0, #5
    if (CheckEStopSensor()) {
    fc90:	b130      	cbz	r0, fca0 <_ZN9ClearCore11MotorDriver4MoveElNS_13StepGenerator10MoveTargetE+0x74>
        m_alertRegMotor.bit.MotionCanceledSensorEStop = 1;
    fc92:	f894 3128 	ldrb.w	r3, [r4, #296]	; 0x128
    fc96:	f043 0308 	orr.w	r3, r3, #8
    fc9a:	f884 3128 	strb.w	r3, [r4, #296]	; 0x128
        valid = false;
    fc9e:	2600      	movs	r6, #0
    if (negDirection && m_limitInfo.InNegHWLimit) {
    fca0:	f894 3040 	ldrb.w	r3, [r4, #64]	; 0x40
    fca4:	b16d      	cbz	r5, fcc2 <_ZN9ClearCore11MotorDriver4MoveElNS_13StepGenerator10MoveTargetE+0x96>
    fca6:	06d9      	lsls	r1, r3, #27
    fca8:	d426      	bmi.n	fcf8 <_ZN9ClearCore11MotorDriver4MoveElNS_13StepGenerator10MoveTargetE+0xcc>
    if (!ValidateMove(negDir)) {
    fcaa:	b196      	cbz	r6, fcd2 <_ZN9ClearCore11MotorDriver4MoveElNS_13StepGenerator10MoveTargetE+0xa6>
    m_lastMoveWasPositional = true;
    fcac:	2301      	movs	r3, #1
    return StepGenerator::Move(dist, moveTarget);
    fcae:	4642      	mov	r2, r8
    fcb0:	4639      	mov	r1, r7
    m_lastMoveWasPositional = true;
    fcb2:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
    return StepGenerator::Move(dist, moveTarget);
    fcb6:	f104 0030 	add.w	r0, r4, #48	; 0x30
}
    fcba:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    return StepGenerator::Move(dist, moveTarget);
    fcbe:	f7fa ba97 	b.w	a1f0 <_ZN9ClearCore13StepGenerator4MoveElNS0_10MoveTargetE>
    else if (!negDirection && m_limitInfo.InPosHWLimit) {
    fcc2:	071a      	lsls	r2, r3, #28
    fcc4:	d5f1      	bpl.n	fcaa <_ZN9ClearCore11MotorDriver4MoveElNS_13StepGenerator10MoveTargetE+0x7e>
        m_alertRegMotor.bit.MotionCanceledPositiveLimit = 1;
    fcc6:	f894 3128 	ldrb.w	r3, [r4, #296]	; 0x128
    fcca:	f043 0302 	orr.w	r3, r3, #2
    fcce:	f884 3128 	strb.w	r3, [r4, #296]	; 0x128
        if (m_statusRegMotor.bit.StepsActive ) {
    fcd2:	f894 3118 	ldrb.w	r3, [r4, #280]	; 0x118
    fcd6:	079b      	lsls	r3, r3, #30
    fcd8:	d406      	bmi.n	fce8 <_ZN9ClearCore11MotorDriver4MoveElNS_13StepGenerator10MoveTargetE+0xbc>
}
    fcda:	2000      	movs	r0, #0
    fcdc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    bool valid = true;
    fce0:	2601      	movs	r6, #1
    fce2:	e7b8      	b.n	fc56 <_ZN9ClearCore11MotorDriver4MoveElNS_13StepGenerator10MoveTargetE+0x2a>
        negDir = dist < 0;
    fce4:	0fcd      	lsrs	r5, r1, #31
    fce6:	e7ab      	b.n	fc40 <_ZN9ClearCore11MotorDriver4MoveElNS_13StepGenerator10MoveTargetE+0x14>
            MoveStopDecel();
    fce8:	f104 0030 	add.w	r0, r4, #48	; 0x30
    fcec:	2100      	movs	r1, #0
    fcee:	f7fa fdc7 	bl	a880 <_ZN9ClearCore13StepGenerator13MoveStopDecelEm>
}
    fcf2:	2000      	movs	r0, #0
    fcf4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
        m_alertRegMotor.bit.MotionCanceledNegativeLimit = 1;
    fcf8:	f894 3128 	ldrb.w	r3, [r4, #296]	; 0x128
    fcfc:	f043 0304 	orr.w	r3, r3, #4
    fd00:	f884 3128 	strb.w	r3, [r4, #296]	; 0x128
    fd04:	e7e5      	b.n	fcd2 <_ZN9ClearCore11MotorDriver4MoveElNS_13StepGenerator10MoveTargetE+0xa6>
            eStop = !(input->State());
    fd06:	f8d9 3000 	ldr.w	r3, [r9]
    fd0a:	4648      	mov	r0, r9
    fd0c:	691b      	ldr	r3, [r3, #16]
    fd0e:	4798      	blx	r3
    fd10:	fab0 f080 	clz	r0, r0
    fd14:	0940      	lsrs	r0, r0, #5
    fd16:	e7bb      	b.n	fc90 <_ZN9ClearCore11MotorDriver4MoveElNS_13StepGenerator10MoveTargetE+0x64>
    fd18:	20001a7c 	.word	0x20001a7c

0000fd1c <_ZThn48_N9ClearCore11MotorDriver4MoveElNS_13StepGenerator10MoveTargetE>:
    virtual bool Move(int32_t dist,
    fd1c:	f1a0 0030 	sub.w	r0, r0, #48	; 0x30
    fd20:	f7ff bf84 	b.w	fc2c <_ZN9ClearCore11MotorDriver4MoveElNS_13StepGenerator10MoveTargetE>

0000fd24 <_ZN9ClearCore11MotorDriver12MoveVelocityEl>:
bool MotorDriver::MoveVelocity(int32_t velocity) {
    fd24:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    if (m_alertRegMotor.reg) {
    fd26:	f8d0 3128 	ldr.w	r3, [r0, #296]	; 0x128
bool MotorDriver::MoveVelocity(int32_t velocity) {
    fd2a:	4604      	mov	r4, r0
    fd2c:	460e      	mov	r6, r1
    if (m_alertRegMotor.reg) {
    fd2e:	2b00      	cmp	r3, #0
    fd30:	d04a      	beq.n	fdc8 <_ZN9ClearCore11MotorDriver12MoveVelocityEl+0xa4>
        m_alertRegMotor.bit.MotionCanceledInAlert = 1;
    fd32:	f890 3128 	ldrb.w	r3, [r0, #296]	; 0x128
    fd36:	f043 0301 	orr.w	r3, r3, #1
    fd3a:	f880 3128 	strb.w	r3, [r0, #296]	; 0x128
        valid = false;
    fd3e:	2500      	movs	r5, #0
    fd40:	f894 3100 	ldrb.w	r3, [r4, #256]	; 0x100
    if (!EnableRequest()) {
    fd44:	b933      	cbnz	r3, fd54 <_ZN9ClearCore11MotorDriver12MoveVelocityEl+0x30>
        m_alertRegMotor.bit.MotionCanceledMotorDisabled = 1;
    fd46:	f894 2128 	ldrb.w	r2, [r4, #296]	; 0x128
    fd4a:	f042 0210 	orr.w	r2, r2, #16
        valid = false;
    fd4e:	461d      	mov	r5, r3
        m_alertRegMotor.bit.MotionCanceledMotorDisabled = 1;
    fd50:	f884 2128 	strb.w	r2, [r4, #296]	; 0x128
    if (m_eStopConnector != CLEARCORE_PIN_INVALID) {
    fd54:	f9b4 113a 	ldrsh.w	r1, [r4, #314]	; 0x13a
    fd58:	1c48      	adds	r0, r1, #1
    fd5a:	d016      	beq.n	fd8a <_ZN9ClearCore11MotorDriver12MoveVelocityEl+0x66>
        Connector *input = SysMgr.ConnectorByIndex(m_eStopConnector);
    fd5c:	4826      	ldr	r0, [pc, #152]	; (fdf8 <_ZN9ClearCore11MotorDriver12MoveVelocityEl+0xd4>)
    fd5e:	f7f7 fe8d 	bl	7a7c <_ZN9ClearCore10SysManager16ConnectorByIndexE13ClearCorePins>
        if (input->Type() == ClearCore::Connector::CCIO_DIGITAL_IN_OUT_TYPE) {
    fd62:	6803      	ldr	r3, [r0, #0]
    fd64:	689b      	ldr	r3, [r3, #8]
        Connector *input = SysMgr.ConnectorByIndex(m_eStopConnector);
    fd66:	4607      	mov	r7, r0
        if (input->Type() == ClearCore::Connector::CCIO_DIGITAL_IN_OUT_TYPE) {
    fd68:	4798      	blx	r3
    fd6a:	2809      	cmp	r0, #9
    fd6c:	d03c      	beq.n	fde8 <_ZN9ClearCore11MotorDriver12MoveVelocityEl+0xc4>
            eStop = !(inputB->DigitalIn::State());
    fd6e:	4638      	mov	r0, r7
    fd70:	f7fd fb76 	bl	d460 <_ZN9ClearCore9DigitalIn5StateEv>
    fd74:	fab0 f080 	clz	r0, r0
    fd78:	0940      	lsrs	r0, r0, #5
    if (CheckEStopSensor()) {
    fd7a:	b130      	cbz	r0, fd8a <_ZN9ClearCore11MotorDriver12MoveVelocityEl+0x66>
        m_alertRegMotor.bit.MotionCanceledSensorEStop = 1;
    fd7c:	f894 3128 	ldrb.w	r3, [r4, #296]	; 0x128
    fd80:	f043 0308 	orr.w	r3, r3, #8
    fd84:	f884 3128 	strb.w	r3, [r4, #296]	; 0x128
        valid = false;
    fd88:	2500      	movs	r5, #0
    if (negDirection && m_limitInfo.InNegHWLimit) {
    fd8a:	2e00      	cmp	r6, #0
    fd8c:	f894 3040 	ldrb.w	r3, [r4, #64]	; 0x40
    fd90:	da0c      	bge.n	fdac <_ZN9ClearCore11MotorDriver12MoveVelocityEl+0x88>
    fd92:	06d9      	lsls	r1, r3, #27
    fd94:	d421      	bmi.n	fdda <_ZN9ClearCore11MotorDriver12MoveVelocityEl+0xb6>
    if (!ValidateMove(velocity < 0)) {
    fd96:	b18d      	cbz	r5, fdbc <_ZN9ClearCore11MotorDriver12MoveVelocityEl+0x98>
    m_lastMoveWasPositional = false;
    fd98:	2300      	movs	r3, #0
    return StepGenerator::MoveVelocity(velocity);
    fd9a:	4631      	mov	r1, r6
    m_lastMoveWasPositional = false;
    fd9c:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
    return StepGenerator::MoveVelocity(velocity);
    fda0:	f104 0030 	add.w	r0, r4, #48	; 0x30
}
    fda4:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    return StepGenerator::MoveVelocity(velocity);
    fda8:	f7fa ba5c 	b.w	a264 <_ZN9ClearCore13StepGenerator12MoveVelocityEl>
    else if (!negDirection && m_limitInfo.InPosHWLimit) {
    fdac:	071a      	lsls	r2, r3, #28
    fdae:	d5f2      	bpl.n	fd96 <_ZN9ClearCore11MotorDriver12MoveVelocityEl+0x72>
        m_alertRegMotor.bit.MotionCanceledPositiveLimit = 1;
    fdb0:	f894 3128 	ldrb.w	r3, [r4, #296]	; 0x128
    fdb4:	f043 0302 	orr.w	r3, r3, #2
    fdb8:	f884 3128 	strb.w	r3, [r4, #296]	; 0x128
        if (m_statusRegMotor.bit.StepsActive ) {
    fdbc:	f894 3118 	ldrb.w	r3, [r4, #280]	; 0x118
    fdc0:	079b      	lsls	r3, r3, #30
    fdc2:	d403      	bmi.n	fdcc <_ZN9ClearCore11MotorDriver12MoveVelocityEl+0xa8>
}
    fdc4:	2000      	movs	r0, #0
    fdc6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    bool valid = true;
    fdc8:	2501      	movs	r5, #1
    fdca:	e7b9      	b.n	fd40 <_ZN9ClearCore11MotorDriver12MoveVelocityEl+0x1c>
            MoveStopDecel();
    fdcc:	f104 0030 	add.w	r0, r4, #48	; 0x30
    fdd0:	2100      	movs	r1, #0
    fdd2:	f7fa fd55 	bl	a880 <_ZN9ClearCore13StepGenerator13MoveStopDecelEm>
}
    fdd6:	2000      	movs	r0, #0
    fdd8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        m_alertRegMotor.bit.MotionCanceledNegativeLimit = 1;
    fdda:	f894 3128 	ldrb.w	r3, [r4, #296]	; 0x128
    fdde:	f043 0304 	orr.w	r3, r3, #4
    fde2:	f884 3128 	strb.w	r3, [r4, #296]	; 0x128
    fde6:	e7e9      	b.n	fdbc <_ZN9ClearCore11MotorDriver12MoveVelocityEl+0x98>
            eStop = !(input->State());
    fde8:	683b      	ldr	r3, [r7, #0]
    fdea:	4638      	mov	r0, r7
    fdec:	691b      	ldr	r3, [r3, #16]
    fdee:	4798      	blx	r3
    fdf0:	fab0 f080 	clz	r0, r0
    fdf4:	0940      	lsrs	r0, r0, #5
    fdf6:	e7c0      	b.n	fd7a <_ZN9ClearCore11MotorDriver12MoveVelocityEl+0x56>
    fdf8:	20001a7c 	.word	0x20001a7c

0000fdfc <_ZThn48_N9ClearCore11MotorDriver12MoveVelocityEl>:
    virtual bool MoveVelocity(int32_t velocity) override;
    fdfc:	f1a0 0030 	sub.w	r0, r0, #48	; 0x30
    fe00:	f7ff bf90 	b.w	fd24 <_ZN9ClearCore11MotorDriver12MoveVelocityEl>

0000fe04 <_ZN9ClearCore11MotorDriver10InitializeE13ClearCorePins>:
void MotorDriver::Initialize(ClearCorePins clearCorePin) {
    fe04:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    DATA_OUTPUT_STATE(m_aInfo->gpioPort, m_aDataMask, true);
    fe06:	f8d0 30a4 	ldr.w	r3, [r0, #164]	; 0xa4
    fe0a:	4dbc      	ldr	r5, [pc, #752]	; (100fc <_ZN9ClearCore11MotorDriver10InitializeE13ClearCorePins+0x2f8>)
    fe0c:	f993 3001 	ldrsb.w	r3, [r3, #1]
    fe10:	f8d0 20b0 	ldr.w	r2, [r0, #176]	; 0xb0
    fe14:	eb05 13c3 	add.w	r3, r5, r3, lsl #7
void MotorDriver::Initialize(ClearCorePins clearCorePin) {
    fe18:	4604      	mov	r4, r0
    DATA_OUTPUT_STATE(m_aInfo->gpioPort, m_aDataMask, true);
    fe1a:	619a      	str	r2, [r3, #24]
    DATA_OUTPUT_STATE(m_bInfo->gpioPort, m_bDataMask, true);
    fe1c:	f8d0 30a8 	ldr.w	r3, [r0, #168]	; 0xa8
    fe20:	f8d0 20b8 	ldr.w	r2, [r0, #184]	; 0xb8
    fe24:	f993 3001 	ldrsb.w	r3, [r3, #1]
    fe28:	eb05 13c3 	add.w	r3, r5, r3, lsl #7
void MotorDriver::Initialize(ClearCorePins clearCorePin) {
    fe2c:	460e      	mov	r6, r1
    DATA_OUTPUT_STATE(m_bInfo->gpioPort, m_bDataMask, true);
    fe2e:	619a      	str	r2, [r3, #24]
    EnableRequest(false);
    fe30:	2100      	movs	r1, #0
    fe32:	f7ff fa4b 	bl	f2cc <_ZN9ClearCore11MotorDriver13EnableRequestEb>
    DigitalIn::Initialize(clearCorePin);
    fe36:	4631      	mov	r1, r6
    fe38:	4620      	mov	r0, r4
    fe3a:	f7fd fb25 	bl	d488 <_ZN9ClearCore9DigitalIn10InitializeE13ClearCorePins>
    PIN_CONFIGURATION(m_aInfo->gpioPort, m_aInfo->gpioPin,  0);
    fe3e:	f8d4 30a4 	ldr.w	r3, [r4, #164]	; 0xa4
    fe42:	f993 2001 	ldrsb.w	r2, [r3, #1]
    fe46:	7898      	ldrb	r0, [r3, #2]
    fe48:	eb05 12c2 	add.w	r2, r5, r2, lsl #7
    fe4c:	1813      	adds	r3, r2, r0
    fe4e:	2700      	movs	r7, #0
    fe50:	f883 7040 	strb.w	r7, [r3, #64]	; 0x40
    PIN_CONFIGURATION(m_bInfo->gpioPort, m_bInfo->gpioPin,  0);
    fe54:	f8d4 10a8 	ldr.w	r1, [r4, #168]	; 0xa8
    fe58:	f991 3001 	ldrsb.w	r3, [r1, #1]
    fe5c:	788e      	ldrb	r6, [r1, #2]
    fe5e:	01db      	lsls	r3, r3, #7
    fe60:	18e9      	adds	r1, r5, r3
    fe62:	198d      	adds	r5, r1, r6
    PMUX_SELECTION(m_bInfo->gpioPort, m_bInfo->gpioPin, PER_TIMER_ALT);
    fe64:	f103 4382 	add.w	r3, r3, #1090519040	; 0x41000000
    PIN_CONFIGURATION(m_bInfo->gpioPort, m_bInfo->gpioPin,  0);
    fe68:	f885 7040 	strb.w	r7, [r5, #64]	; 0x40
    DATA_DIRECTION_OUTPUT(m_aInfo->gpioPort, m_aDataMask);
    fe6c:	f8d4 50b0 	ldr.w	r5, [r4, #176]	; 0xb0
    fe70:	6095      	str	r5, [r2, #8]
    DATA_DIRECTION_OUTPUT(m_bInfo->gpioPort, m_bDataMask);
    fe72:	f8d4 50b8 	ldr.w	r5, [r4, #184]	; 0xb8
    fe76:	608d      	str	r5, [r1, #8]
    PMUX_SELECTION(m_aInfo->gpioPort, m_aInfo->gpioPin, PER_TIMER_ALT);
    fe78:	eb02 0250 	add.w	r2, r2, r0, lsr #1
    fe7c:	f010 0f01 	tst.w	r0, #1
    fe80:	f892 1030 	ldrb.w	r1, [r2, #48]	; 0x30
    fe84:	f04f 0005 	mov.w	r0, #5
    PMUX_SELECTION(m_bInfo->gpioPort, m_bInfo->gpioPin, PER_TIMER_ALT);
    fe88:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
    PMUX_SELECTION(m_aInfo->gpioPort, m_aInfo->gpioPin, PER_TIMER_ALT);
    fe8c:	bf14      	ite	ne
    fe8e:	f360 1107 	bfine	r1, r0, #4, #4
    fe92:	f360 0103 	bfieq	r1, r0, #0, #4
    PMUX_SELECTION(m_bInfo->gpioPort, m_bInfo->gpioPin, PER_TIMER_ALT);
    fe96:	eb03 0356 	add.w	r3, r3, r6, lsr #1
    PMUX_SELECTION(m_aInfo->gpioPort, m_aInfo->gpioPin, PER_TIMER_ALT);
    fe9a:	f882 1030 	strb.w	r1, [r2, #48]	; 0x30
    PMUX_SELECTION(m_bInfo->gpioPort, m_bInfo->gpioPin, PER_TIMER_ALT);
    fe9e:	f893 2030 	ldrb.w	r2, [r3, #48]	; 0x30
    fea2:	07f0      	lsls	r0, r6, #31
    fea4:	f04f 0105 	mov.w	r1, #5
    fea8:	bf4c      	ite	mi
    feaa:	f361 1207 	bfimi	r2, r1, #4, #4
    feae:	f361 0203 	bfipl	r2, r1, #0, #4
    feb2:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
    Mode(CPM_MODE_A_DIRECT_B_DIRECT);
    feb6:	6823      	ldr	r3, [r4, #0]
    feb8:	4a91      	ldr	r2, [pc, #580]	; (10100 <_ZN9ClearCore11MotorDriver10InitializeE13ClearCorePins+0x2fc>)
    feba:	685b      	ldr	r3, [r3, #4]
    febc:	4293      	cmp	r3, r2
    febe:	f040 8119 	bne.w	100f4 <_ZN9ClearCore11MotorDriver10InitializeE13ClearCorePins+0x2f0>
    if (newMode == m_mode) {
    fec2:	79a3      	ldrb	r3, [r4, #6]
    fec4:	2b09      	cmp	r3, #9
    fec6:	d022      	beq.n	ff0e <_ZN9ClearCore11MotorDriver10InitializeE13ClearCorePins+0x10a>
            MoveStopAbrupt();
    fec8:	f104 0030 	add.w	r0, r4, #48	; 0x30
    fecc:	f7fa fcbc 	bl	a848 <_ZN9ClearCore13StepGenerator14MoveStopAbruptEv>
            PMUX_DISABLE(m_aInfo->gpioPort, m_aInfo->gpioPin);
    fed0:	f8d4 10a4 	ldr.w	r1, [r4, #164]	; 0xa4
    fed4:	4b89      	ldr	r3, [pc, #548]	; (100fc <_ZN9ClearCore11MotorDriver10InitializeE13ClearCorePins+0x2f8>)
    fed6:	f991 2001 	ldrsb.w	r2, [r1, #1]
    feda:	7889      	ldrb	r1, [r1, #2]
    fedc:	eb03 12c2 	add.w	r2, r3, r2, lsl #7
    fee0:	440a      	add	r2, r1
            m_mode = CPM_MODE_A_DIRECT_B_DIRECT;
    fee2:	2009      	movs	r0, #9
            PMUX_DISABLE(m_aInfo->gpioPort, m_aInfo->gpioPin);
    fee4:	f892 1040 	ldrb.w	r1, [r2, #64]	; 0x40
    fee8:	f36f 0100 	bfc	r1, #0, #1
    feec:	f882 1040 	strb.w	r1, [r2, #64]	; 0x40
            PMUX_DISABLE(m_bInfo->gpioPort, m_bInfo->gpioPin);
    fef0:	f8d4 20a8 	ldr.w	r2, [r4, #168]	; 0xa8
    fef4:	f992 1001 	ldrsb.w	r1, [r2, #1]
    fef8:	7892      	ldrb	r2, [r2, #2]
    fefa:	eb03 13c1 	add.w	r3, r3, r1, lsl #7
    fefe:	4413      	add	r3, r2
    ff00:	f893 2040 	ldrb.w	r2, [r3, #64]	; 0x40
    ff04:	f36f 0200 	bfc	r2, #0, #1
    ff08:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
            m_mode = CPM_MODE_A_DIRECT_B_DIRECT;
    ff0c:	71a0      	strb	r0, [r4, #6]
    PMUX_SELECTION(m_inputPort, m_inputDataBit, PER_EXTINT);
    ff0e:	68e3      	ldr	r3, [r4, #12]
    ff10:	6922      	ldr	r2, [r4, #16]
    ff12:	01db      	lsls	r3, r3, #7
    ff14:	f103 4182 	add.w	r1, r3, #1090519040	; 0x41000000
    ff18:	f501 4100 	add.w	r1, r1, #32768	; 0x8000
    ff1c:	eb01 0152 	add.w	r1, r1, r2, lsr #1
    PMUX_ENABLE(m_inputPort, m_inputDataBit);
    ff20:	f103 4382 	add.w	r3, r3, #1090519040	; 0x41000000
    PMUX_SELECTION(m_inputPort, m_inputDataBit, PER_EXTINT);
    ff24:	f891 0030 	ldrb.w	r0, [r1, #48]	; 0x30
    ff28:	f012 0501 	ands.w	r5, r2, #1
    PMUX_ENABLE(m_inputPort, m_inputDataBit);
    ff2c:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
    ff30:	4413      	add	r3, r2
    PMUX_SELECTION(m_inputPort, m_inputDataBit, PER_EXTINT);
    ff32:	bf14      	ite	ne
    ff34:	f36f 1007 	bfcne	r0, #4, #4
    ff38:	f365 0003 	bfieq	r0, r5, #0, #4
    ff3c:	f881 0030 	strb.w	r0, [r1, #48]	; 0x30
    PMUX_ENABLE(m_inputPort, m_inputDataBit);
    ff40:	f893 2040 	ldrb.w	r2, [r3, #64]	; 0x40
    TcCount16 *tcCount = &tc_modules[m_hlfbTcNum]->COUNT16;
    ff44:	496f      	ldr	r1, [pc, #444]	; (10104 <_ZN9ClearCore11MotorDriver10InitializeE13ClearCorePins+0x300>)
    PMUX_ENABLE(m_inputPort, m_inputDataBit);
    ff46:	f042 0201 	orr.w	r2, r2, #1
    ff4a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    TcCount16 *tcCount = &tc_modules[m_hlfbTcNum]->COUNT16;
    ff4e:	f894 00d6 	ldrb.w	r0, [r4, #214]	; 0xd6
    ff52:	f851 3020 	ldr.w	r3, [r1, r0, lsl #2]
    tcCount->CTRLA.bit.ENABLE = 0;
    ff56:	681a      	ldr	r2, [r3, #0]
    ff58:	f36f 0241 	bfc	r2, #1, #1
    ff5c:	601a      	str	r2, [r3, #0]
    SYNCBUSY_WAIT(tcCount, TC_SYNCBUSY_ENABLE);
    ff5e:	691a      	ldr	r2, [r3, #16]
    ff60:	0792      	lsls	r2, r2, #30
    ff62:	d4fc      	bmi.n	ff5e <_ZN9ClearCore11MotorDriver10InitializeE13ClearCorePins+0x15a>
    tcCount->CTRLA.bit.SWRST = 1;
    ff64:	681a      	ldr	r2, [r3, #0]
    ff66:	f042 0201 	orr.w	r2, r2, #1
    ff6a:	601a      	str	r2, [r3, #0]
    SYNCBUSY_WAIT(tcCount, TC_SYNCBUSY_SWRST);
    ff6c:	691a      	ldr	r2, [r3, #16]
    ff6e:	f012 0201 	ands.w	r2, r2, #1
    ff72:	d1fb      	bne.n	ff6c <_ZN9ClearCore11MotorDriver10InitializeE13ClearCorePins+0x168>
    tcCount->CTRLA.bit.PRESCSYNC = TC_CTRLA_PRESCSYNC_GCLK_Val;
    ff74:	681d      	ldr	r5, [r3, #0]
    EIC->CTRLA.bit.ENABLE = 0;
    ff76:	4964      	ldr	r1, [pc, #400]	; (10108 <_ZN9ClearCore11MotorDriver10InitializeE13ClearCorePins+0x304>)
    tcCount->CTRLA.bit.PRESCSYNC = TC_CTRLA_PRESCSYNC_GCLK_Val;
    ff78:	f362 1505 	bfi	r5, r2, #4, #2
    ff7c:	601d      	str	r5, [r3, #0]
    tcCount->CTRLA.bit.COPEN0 = 0;
    ff7e:	681d      	ldr	r5, [r3, #0]
    ff80:	f362 5514 	bfi	r5, r2, #20, #1
    ff84:	601d      	str	r5, [r3, #0]
    tcCount->CTRLA.bit.COPEN1 = 0;
    ff86:	681d      	ldr	r5, [r3, #0]
    ff88:	f362 5555 	bfi	r5, r2, #21, #1
    ff8c:	601d      	str	r5, [r3, #0]
    tcCount->CTRLA.bit.CAPTEN0 = 1;
    ff8e:	681d      	ldr	r5, [r3, #0]
    ff90:	f445 3580 	orr.w	r5, r5, #65536	; 0x10000
    ff94:	601d      	str	r5, [r3, #0]
    tcCount->CTRLA.bit.CAPTEN1 = 1;
    ff96:	681d      	ldr	r5, [r3, #0]
    ff98:	f445 3500 	orr.w	r5, r5, #131072	; 0x20000
    ff9c:	601d      	str	r5, [r3, #0]
    tcCount->CTRLA.bit.ALOCK = 0;
    ff9e:	681d      	ldr	r5, [r3, #0]
    ffa0:	f362 25cb 	bfi	r5, r2, #11, #1
    ffa4:	601d      	str	r5, [r3, #0]
    tcCount->CTRLA.bit.PRESCALER = TC_CTRLA_PRESCALER_DIV1_Val;
    ffa6:	681d      	ldr	r5, [r3, #0]
    ffa8:	f362 250a 	bfi	r5, r2, #8, #3
    ffac:	601d      	str	r5, [r3, #0]
    tcCount->CTRLA.bit.ONDEMAND = 1;
    ffae:	681d      	ldr	r5, [r3, #0]
    ffb0:	f045 0580 	orr.w	r5, r5, #128	; 0x80
    ffb4:	601d      	str	r5, [r3, #0]
    tcCount->CTRLA.bit.RUNSTDBY = 1;
    ffb6:	681d      	ldr	r5, [r3, #0]
    ffb8:	f045 0540 	orr.w	r5, r5, #64	; 0x40
    ffbc:	601d      	str	r5, [r3, #0]
    tcCount->CTRLA.bit.MODE = TC_CTRLA_MODE_COUNT16_Val;
    ffbe:	681d      	ldr	r5, [r3, #0]
    ffc0:	f362 0583 	bfi	r5, r2, #2, #2
    ffc4:	601d      	str	r5, [r3, #0]
    tcCount->EVCTRL.bit.EVACT = TC_EVCTRL_EVACT_PPW_Val;
    ffc6:	88dd      	ldrh	r5, [r3, #6]
    ffc8:	2605      	movs	r6, #5
    ffca:	f366 0502 	bfi	r5, r6, #0, #3
    ffce:	80dd      	strh	r5, [r3, #6]
    tcCount->EVCTRL.bit.TCEI = 1;
    ffd0:	88dd      	ldrh	r5, [r3, #6]
    ffd2:	f045 0520 	orr.w	r5, r5, #32
    ffd6:	80dd      	strh	r5, [r3, #6]
    tcCount->EVCTRL.bit.MCEO0 = 0;
    ffd8:	88dd      	ldrh	r5, [r3, #6]
    ffda:	f362 350c 	bfi	r5, r2, #12, #1
    ffde:	80dd      	strh	r5, [r3, #6]
    tcCount->EVCTRL.bit.MCEO1 = 0;
    ffe0:	88dd      	ldrh	r5, [r3, #6]
    ffe2:	f362 354d 	bfi	r5, r2, #13, #1
    ffe6:	80dd      	strh	r5, [r3, #6]
    tcCount->EVCTRL.bit.OVFEO = 0;
    ffe8:	88dd      	ldrh	r5, [r3, #6]
    ffea:	f362 2508 	bfi	r5, r2, #8, #1
    ffee:	80dd      	strh	r5, [r3, #6]
    tcCount->EVCTRL.bit.TCINV = 1;
    fff0:	88dd      	ldrh	r5, [r3, #6]
    fff2:	f045 0510 	orr.w	r5, r5, #16
    fff6:	80dd      	strh	r5, [r3, #6]
    EIC->CTRLA.bit.ENABLE = 0;
    fff8:	780d      	ldrb	r5, [r1, #0]
    fffa:	f362 0541 	bfi	r5, r2, #1, #1
    fffe:	700d      	strb	r5, [r1, #0]
    EIC->EVCTRL.reg |= 1 << m_hlfbInfo->extInt;
   10000:	f8d4 20ac 	ldr.w	r2, [r4, #172]	; 0xac
   10004:	688e      	ldr	r6, [r1, #8]
   10006:	78d5      	ldrb	r5, [r2, #3]
   10008:	2201      	movs	r2, #1
   1000a:	40aa      	lsls	r2, r5
   1000c:	4316      	orrs	r6, r2
   1000e:	608e      	str	r6, [r1, #8]
   10010:	08ef      	lsrs	r7, r5, #3
    EIC->ASYNCH.reg |= 1 << m_hlfbInfo->extInt;
   10012:	698e      	ldr	r6, [r1, #24]
   10014:	00bf      	lsls	r7, r7, #2
   10016:	f107 4e80 	add.w	lr, r7, #1073741824	; 0x40000000
   1001a:	4316      	orrs	r6, r2
   1001c:	f50e 5e20 	add.w	lr, lr, #10240	; 0x2800
   10020:	618e      	str	r6, [r1, #24]
        (EIC_CONFIG_SENSE0_HIGH_Val << ((m_hlfbInfo->extInt & 7) * 4));
   10022:	f005 0607 	and.w	r6, r5, #7
   10026:	f8de c01c 	ldr.w	ip, [lr, #28]
   1002a:	00b7      	lsls	r7, r6, #2
   1002c:	2604      	movs	r6, #4
   1002e:	40be      	lsls	r6, r7
   10030:	ea46 060c 	orr.w	r6, r6, ip
    EIC->CONFIG[m_hlfbInfo->extInt / 8].reg |=
   10034:	f8ce 601c 	str.w	r6, [lr, #28]
    EIC->INTENCLR.bit.EXTINT = 1 << m_hlfbInfo->extInt;
   10038:	68ce      	ldr	r6, [r1, #12]
   1003a:	b292      	uxth	r2, r2
   1003c:	f362 060f 	bfi	r6, r2, #0, #16
   10040:	60ce      	str	r6, [r1, #12]
    EIC->CTRLA.bit.ENABLE = 1;
   10042:	780a      	ldrb	r2, [r1, #0]
   10044:	f042 0202 	orr.w	r2, r2, #2
   10048:	700a      	strb	r2, [r1, #0]
    SYNCBUSY_WAIT(EIC, EIC_SYNCBUSY_ENABLE);
   1004a:	684a      	ldr	r2, [r1, #4]
   1004c:	f012 0202 	ands.w	r2, r2, #2
   10050:	d1fb      	bne.n	1004a <_ZN9ClearCore11MotorDriver10InitializeE13ClearCorePins+0x246>
    SET_CLOCK_SOURCE(EVSYS_GCLK_ID_0 + m_hlfbEvt, 6);
   10052:	f894 e0d7 	ldrb.w	lr, [r4, #215]	; 0xd7
   10056:	492d      	ldr	r1, [pc, #180]	; (1010c <_ZN9ClearCore11MotorDriver10InitializeE13ClearCorePins+0x308>)
   10058:	f10e 072b 	add.w	r7, lr, #43	; 0x2b
   1005c:	463e      	mov	r6, r7
   1005e:	f851 c027 	ldr.w	ip, [r1, r7, lsl #2]
   10062:	f362 1c86 	bfi	ip, r2, #6, #1
   10066:	f841 c027 	str.w	ip, [r1, r7, lsl #2]
   1006a:	f851 2026 	ldr.w	r2, [r1, r6, lsl #2]
   1006e:	0657      	lsls	r7, r2, #25
   10070:	d4fb      	bmi.n	1006a <_ZN9ClearCore11MotorDriver10InitializeE13ClearCorePins+0x266>
   10072:	f851 2026 	ldr.w	r2, [r1, r6, lsl #2]
   10076:	4f25      	ldr	r7, [pc, #148]	; (1010c <_ZN9ClearCore11MotorDriver10InitializeE13ClearCorePins+0x308>)
   10078:	f04f 0c06 	mov.w	ip, #6
   1007c:	f36c 0203 	bfi	r2, ip, #0, #4
   10080:	f841 2026 	str.w	r2, [r1, r6, lsl #2]
   10084:	f851 2026 	ldr.w	r2, [r1, r6, lsl #2]
   10088:	f042 0240 	orr.w	r2, r2, #64	; 0x40
   1008c:	f841 2026 	str.w	r2, [r1, r6, lsl #2]
   10090:	687a      	ldr	r2, [r7, #4]
   10092:	f012 0f18 	tst.w	r2, #24
   10096:	d1fb      	bne.n	10090 <_ZN9ClearCore11MotorDriver10InitializeE13ClearCorePins+0x28c>
    EVSYS->USER[EVSYS_ID_USER_TC0_EVU + m_hlfbTcNum].reg = m_hlfbEvt + 1;
   10098:	4a1d      	ldr	r2, [pc, #116]	; (10110 <_ZN9ClearCore11MotorDriver10InitializeE13ClearCorePins+0x30c>)
    EvsysChannel *theEvCh = &EVSYS->Channel[m_hlfbEvt];
   1009a:	4e1e      	ldr	r6, [pc, #120]	; (10114 <_ZN9ClearCore11MotorDriver10InitializeE13ClearCorePins+0x310>)
    EVSYS->USER[EVSYS_ID_USER_TC0_EVU + m_hlfbTcNum].reg = m_hlfbEvt + 1;
   1009c:	3074      	adds	r0, #116	; 0x74
   1009e:	f10e 0101 	add.w	r1, lr, #1
    EvsysChannel *theEvCh = &EVSYS->Channel[m_hlfbEvt];
   100a2:	fa0f fe8e 	sxth.w	lr, lr
    EVSYS->USER[EVSYS_ID_USER_TC0_EVU + m_hlfbTcNum].reg = m_hlfbEvt + 1;
   100a6:	f842 1020 	str.w	r1, [r2, r0, lsl #2]
    EvsysChannel *theEvCh = &EVSYS->Channel[m_hlfbEvt];
   100aa:	eb06 02ce 	add.w	r2, r6, lr, lsl #3
    theEvCh->CHINTFLAG.bit.EVD = 1;
   100ae:	7991      	ldrb	r1, [r2, #6]
   100b0:	f041 0102 	orr.w	r1, r1, #2
   100b4:	7191      	strb	r1, [r2, #6]
    while (theEvCh->CHSTATUS.reg & EVSYS_CHSTATUS_RDYUSR) {
   100b6:	79d1      	ldrb	r1, [r2, #7]
   100b8:	07c8      	lsls	r0, r1, #31
   100ba:	d4fc      	bmi.n	100b6 <_ZN9ClearCore11MotorDriver10InitializeE13ClearCorePins+0x2b2>
        EVSYS_CHANNEL_EVGEN(EVSYS_ID_GEN_EIC_EXTINT_0 + m_hlfbInfo->extInt) |
   100bc:	3512      	adds	r5, #18
   100be:	f005 057f 	and.w	r5, r5, #127	; 0x7f
   100c2:	f445 7500 	orr.w	r5, r5, #512	; 0x200
    theEvCh->CHANNEL.reg =
   100c6:	f846 503e 	str.w	r5, [r6, lr, lsl #3]
    while (theEvCh->CHSTATUS.reg & EVSYS_CHSTATUS_BUSYCH) {
   100ca:	79d1      	ldrb	r1, [r2, #7]
   100cc:	0789      	lsls	r1, r1, #30
   100ce:	d4fc      	bmi.n	100ca <_ZN9ClearCore11MotorDriver10InitializeE13ClearCorePins+0x2c6>
    tcCount->CTRLA.bit.ENABLE = 1;
   100d0:	681a      	ldr	r2, [r3, #0]
   100d2:	f042 0202 	orr.w	r2, r2, #2
   100d6:	601a      	str	r2, [r3, #0]
    SYNCBUSY_WAIT(tcCount, TC_SYNCBUSY_ENABLE);
   100d8:	691a      	ldr	r2, [r3, #16]
   100da:	f012 0202 	ands.w	r2, r2, #2
   100de:	d1fb      	bne.n	100d8 <_ZN9ClearCore11MotorDriver10InitializeE13ClearCorePins+0x2d4>
    m_initialized = true;
   100e0:	2301      	movs	r3, #1
    m_statusRegMotor.reg = 0;
   100e2:	f8c4 2118 	str.w	r2, [r4, #280]	; 0x118
    m_statusRegMotorRisen.reg = 0;
   100e6:	f8c4 211c 	str.w	r2, [r4, #284]	; 0x11c
    m_statusRegMotorFallen.reg = 0;
   100ea:	f8c4 2120 	str.w	r2, [r4, #288]	; 0x120
    m_initialized = true;
   100ee:	f884 312c 	strb.w	r3, [r4, #300]	; 0x12c
   100f2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    Mode(CPM_MODE_A_DIRECT_B_DIRECT);
   100f4:	2109      	movs	r1, #9
   100f6:	4620      	mov	r0, r4
   100f8:	4798      	blx	r3
   100fa:	e708      	b.n	ff0e <_ZN9ClearCore11MotorDriver10InitializeE13ClearCorePins+0x10a>
   100fc:	41008000 	.word	0x41008000
   10100:	0000ef69 	.word	0x0000ef69
   10104:	0002d400 	.word	0x0002d400
   10108:	40002800 	.word	0x40002800
   1010c:	40001c00 	.word	0x40001c00
   10110:	4100e000 	.word	0x4100e000
   10114:	4100e020 	.word	0x4100e020

00010118 <_ZN9ClearCore12SdCardDriverC1EPK15PeripheralRouteS3_S3_S3_h>:
namespace ClearCore {

/**
    Construct and wire into the board.
**/
SdCardDriver::SdCardDriver(const PeripheralRoute *misoInfo,
   10118:	b530      	push	{r4, r5, lr}
   1011a:	b083      	sub	sp, #12
   1011c:	9d06      	ldr	r5, [sp, #24]
   1011e:	f89d 401c 	ldrb.w	r4, [sp, #28]
                           const PeripheralRoute *ssInfo,
                           const PeripheralRoute *sckInfo,
                           const PeripheralRoute *mosiInfo,
                           uint8_t peripheral)
    : SerialBase(misoInfo, ssInfo, sckInfo, mosiInfo, peripheral),
      m_errorCode(0) {
   10122:	9500      	str	r5, [sp, #0]
   10124:	9401      	str	r4, [sp, #4]
SdCardDriver::SdCardDriver(const PeripheralRoute *misoInfo,
   10126:	4604      	mov	r4, r0
      m_errorCode(0) {
   10128:	2500      	movs	r5, #0
   1012a:	f000 ffbb 	bl	110a4 <_ZN9ClearCore10SerialBaseC1EPK15PeripheralRouteS3_S3_S3_h>
   1012e:	4b09      	ldr	r3, [pc, #36]	; (10154 <_ZN9ClearCore12SdCardDriverC1EPK15PeripheralRouteS3_S3_S3_h+0x3c>)
   10130:	6023      	str	r3, [r4, #0]
   10132:	f884 5144 	strb.w	r5, [r4, #324]	; 0x144
    PortMode(SerialBase::SPI);
   10136:	4620      	mov	r0, r4
   10138:	2101      	movs	r1, #1
   1013a:	f001 f811 	bl	11160 <_ZN9ClearCore10SerialBase8PortModeENS0_9PortModesE>
    SpiClock(SCK_LOW, LEAD_SAMPLE);
   1013e:	462a      	mov	r2, r5
   10140:	4629      	mov	r1, r5
   10142:	4620      	mov	r0, r4
   10144:	f001 f852 	bl	111ec <_ZN9ClearCore10SerialBase8SpiClockENS0_18SpiClockPolaritiesENS0_14SpiClockPhasesE>
    PortOpen();
   10148:	4620      	mov	r0, r4
   1014a:	f000 ff9f 	bl	1108c <_ZN9ClearCore10SerialBase8PortOpenEv>
}
   1014e:	4620      	mov	r0, r4
   10150:	b003      	add	sp, #12
   10152:	bd30      	pop	{r4, r5, pc}
   10154:	0002ccb0 	.word	0x0002ccb0

00010158 <_ZN9ClearCore10SerialBase10PortIsOpenEv>:
/**
    Return if the port is open or not.
**/
bool SerialBase::PortIsOpen() {
    return m_portOpen;
}
   10158:	f890 0029 	ldrb.w	r0, [r0, #41]	; 0x29
   1015c:	4770      	bx	lr
   1015e:	bf00      	nop

00010160 <_ZN9ClearCore10SerialBase5FlushEv>:
/**
    Flush transmit buffers.
**/
void SerialBase::Flush() {
    // Flush buffers
    m_bufferOut[0] = 0;
   10160:	2300      	movs	r3, #0
    m_outTail = 0;
   10162:	f8c0 313c 	str.w	r3, [r0, #316]	; 0x13c
    m_bufferOut[0] = 0;
   10166:	f8a0 30b0 	strh.w	r3, [r0, #176]	; 0xb0
    m_outHead = 0;
   1016a:	f8c0 3138 	str.w	r3, [r0, #312]	; 0x138
   1016e:	4770      	bx	lr

00010170 <_ZN9ClearCore10SerialBase10FlushInputEv>:

/**
    Enable the Receive Complete USART interrupt.
**/
void SerialBase::EnableRxcInterruptUart() {
    m_serPort->USART.INTENSET.reg = SERCOM_USART_INTENSET_RXC;
   10170:	6902      	ldr	r2, [r0, #16]
    m_bufferIn[0] = 0;
   10172:	2300      	movs	r3, #0
    m_serPort->USART.INTENSET.reg = SERCOM_USART_INTENSET_RXC;
   10174:	2104      	movs	r1, #4
    m_inTail = 0;
   10176:	f8c0 3134 	str.w	r3, [r0, #308]	; 0x134
    m_bufferIn[0] = 0;
   1017a:	8603      	strh	r3, [r0, #48]	; 0x30
    m_inHead = 0;
   1017c:	f8c0 3130 	str.w	r3, [r0, #304]	; 0x130
    m_serPort->USART.INTENSET.reg = SERCOM_USART_INTENSET_RXC;
   10180:	7591      	strb	r1, [r2, #22]
   10182:	4770      	bx	lr

00010184 <_ZN9ClearCore10SerialBase7CharGetEv>:
/**
    Attempt to get next character from serial channel.
**/
int16_t SerialBase::CharGet() {
    // Return if nothing is waiting.
    if (m_inTail == m_inHead) {
   10184:	f8d0 1134 	ldr.w	r1, [r0, #308]	; 0x134
   10188:	f8d0 2130 	ldr.w	r2, [r0, #304]	; 0x130
   1018c:	4291      	cmp	r1, r2
   1018e:	d012      	beq.n	101b6 <_ZN9ClearCore10SerialBase7CharGetEv+0x32>
int16_t SerialBase::CharGet() {
   10190:	b430      	push	{r4, r5}
        return SerialBase::EOB;
    }

    // Get head of buffer, wrapped.
    int32_t nextIndex = NextIndex(m_inHead);
   10192:	f8d0 2130 	ldr.w	r2, [r0, #304]	; 0x130
    // Get head character.
    int16_t returnChar = m_bufferIn[m_inHead];
   10196:	f8d0 1130 	ldr.w	r1, [r0, #304]	; 0x130
    m_serPort->USART.INTENSET.reg = SERCOM_USART_INTENSET_RXC;
   1019a:	6904      	ldr	r4, [r0, #16]
   1019c:	4603      	mov	r3, r0

    /**
        Helper function to get next index in a buffer.
    **/
    uint32_t NextIndex(uint32_t currentIndex) {
        return ((currentIndex + 1) & (SERIAL_BUFFER_SIZE - 1));
   1019e:	3201      	adds	r2, #1
    int16_t returnChar = m_bufferIn[m_inHead];
   101a0:	3118      	adds	r1, #24
    m_serPort->USART.INTENSET.reg = SERCOM_USART_INTENSET_RXC;
   101a2:	2504      	movs	r5, #4
   101a4:	f002 023f 	and.w	r2, r2, #63	; 0x3f
    int16_t returnChar = m_bufferIn[m_inHead];
   101a8:	f930 0011 	ldrsh.w	r0, [r0, r1, lsl #1]
    // Save new head ptr.
    m_inHead = nextIndex;
   101ac:	f8c3 2130 	str.w	r2, [r3, #304]	; 0x130
    m_serPort->USART.INTENSET.reg = SERCOM_USART_INTENSET_RXC;
   101b0:	75a5      	strb	r5, [r4, #22]
    EnableRxcInterruptUart();

    return returnChar;
}
   101b2:	bc30      	pop	{r4, r5}
   101b4:	4770      	bx	lr
        return SerialBase::EOB;
   101b6:	f04f 30ff 	mov.w	r0, #4294967295
   101ba:	4770      	bx	lr

000101bc <_ZN9ClearCore10SerialBase8CharPeekEv>:
    Attempt to get next character from serial channel without pulling it
    out of the buffer.
**/
int16_t SerialBase::CharPeek() {
    // Return if nothing is waiting
    if (m_inTail == m_inHead) {
   101bc:	f8d0 2134 	ldr.w	r2, [r0, #308]	; 0x134
   101c0:	f8d0 3130 	ldr.w	r3, [r0, #304]	; 0x130
   101c4:	429a      	cmp	r2, r3
        return SerialBase::EOB;
    }

    // Get head character
    int16_t peekChar = m_bufferIn[m_inHead];
   101c6:	bf1d      	ittte	ne
   101c8:	f8d0 3130 	ldrne.w	r3, [r0, #304]	; 0x130
   101cc:	3318      	addne	r3, #24
   101ce:	f930 0013 	ldrshne.w	r0, [r0, r3, lsl #1]
        return SerialBase::EOB;
   101d2:	f04f 30ff 	moveq.w	r0, #4294967295
    return (peekChar);
}
   101d6:	4770      	bx	lr

000101d8 <_ZN9ClearCore10SerialBase16AvailableForReadEv>:

/**
    Return the number of free characters in the receive buffer
**/
int32_t SerialBase::AvailableForRead() {
    int32_t difference = m_inTail - m_inHead;
   101d8:	f8d0 3134 	ldr.w	r3, [r0, #308]	; 0x134
   101dc:	f8d0 0130 	ldr.w	r0, [r0, #304]	; 0x130

    if (difference < 0) {
   101e0:	1a18      	subs	r0, r3, r0
        return SERIAL_BUFFER_SIZE + difference;
   101e2:	bf48      	it	mi
   101e4:	3040      	addmi	r0, #64	; 0x40
    }
    else {
        return difference;
    }
}
   101e6:	4770      	bx	lr

000101e8 <_ZN9ClearCore10SerialBase17AvailableForWriteEv>:

/**
    Returns the number of available characters in the transmit buffer
**/
int32_t SerialBase::AvailableForWrite() {
    int32_t difference = m_outHead - m_outTail - 1;
   101e8:	f8d0 3138 	ldr.w	r3, [r0, #312]	; 0x138
   101ec:	f8d0 213c 	ldr.w	r2, [r0, #316]	; 0x13c
   101f0:	1e58      	subs	r0, r3, #1

    if (difference < 0) {
   101f2:	1a80      	subs	r0, r0, r2
        difference += SERIAL_BUFFER_SIZE;
   101f4:	bf48      	it	mi
   101f6:	3040      	addmi	r0, #64	; 0x40
    }

    return difference;
}
   101f8:	4770      	bx	lr
   101fa:	bf00      	nop

000101fc <_ZN9ClearCore10SerialBase8SendCharEh>:
bool SerialBase::SendChar(uint8_t charToSend) {
   101fc:	4602      	mov	r2, r0
    if (!m_portOpen || m_portMode == PortModes::SPI) {
   101fe:	f890 0029 	ldrb.w	r0, [r0, #41]	; 0x29
   10202:	b1b8      	cbz	r0, 10234 <_ZN9ClearCore10SerialBase8SendCharEh+0x38>
   10204:	79d3      	ldrb	r3, [r2, #7]
   10206:	2b01      	cmp	r3, #1
   10208:	d015      	beq.n	10236 <_ZN9ClearCore10SerialBase8SendCharEh+0x3a>
bool SerialBase::SendChar(uint8_t charToSend) {
   1020a:	b470      	push	{r4, r5, r6}
    uint32_t nextIndex = NextIndex(m_outTail);
   1020c:	f8d2 413c 	ldr.w	r4, [r2, #316]	; 0x13c
   10210:	3401      	adds	r4, #1
   10212:	f004 043f 	and.w	r4, r4, #63	; 0x3f
    while (nextIndex == m_outHead) {
   10216:	f8d2 3138 	ldr.w	r3, [r2, #312]	; 0x138
   1021a:	429c      	cmp	r4, r3
   1021c:	d0fb      	beq.n	10216 <_ZN9ClearCore10SerialBase8SendCharEh+0x1a>
    m_bufferOut[m_outTail] = charToSend;
   1021e:	f8d2 313c 	ldr.w	r3, [r2, #316]	; 0x13c
    m_serPort->USART.INTENSET.reg = SERCOM_USART_INTENSET_DRE;
   10222:	6915      	ldr	r5, [r2, #16]
    m_bufferOut[m_outTail] = charToSend;
   10224:	3358      	adds	r3, #88	; 0x58
    m_serPort->USART.INTENSET.reg = SERCOM_USART_INTENSET_DRE;
   10226:	2601      	movs	r6, #1
    m_bufferOut[m_outTail] = charToSend;
   10228:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
    m_outTail = nextIndex;
   1022c:	f8c2 413c 	str.w	r4, [r2, #316]	; 0x13c
    m_serPort->USART.INTENSET.reg = SERCOM_USART_INTENSET_DRE;
   10230:	75ae      	strb	r6, [r5, #22]
}
   10232:	bc70      	pop	{r4, r5, r6}
   10234:	4770      	bx	lr
        return false;
   10236:	2000      	movs	r0, #0
   10238:	4770      	bx	lr
   1023a:	bf00      	nop

0001023c <_ZN9ClearCore10SerialBase19WaitForTransmitIdleEv>:
    if (m_portMode == UART) {
   1023c:	79c3      	ldrb	r3, [r0, #7]
   1023e:	b113      	cbz	r3, 10246 <_ZN9ClearCore10SerialBase19WaitForTransmitIdleEv+0xa>
    else if (m_portMode == SPI) {
   10240:	2b01      	cmp	r3, #1
   10242:	d00e      	beq.n	10262 <_ZN9ClearCore10SerialBase19WaitForTransmitIdleEv+0x26>
   10244:	4770      	bx	lr
        while (m_outHead != m_outTail) {
   10246:	f8d0 2138 	ldr.w	r2, [r0, #312]	; 0x138
   1024a:	f8d0 313c 	ldr.w	r3, [r0, #316]	; 0x13c
   1024e:	429a      	cmp	r2, r3
   10250:	d1f9      	bne.n	10246 <_ZN9ClearCore10SerialBase19WaitForTransmitIdleEv+0xa>
        if (m_serPort->USART.INTFLAG.bit.DRE) {
   10252:	6902      	ldr	r2, [r0, #16]
   10254:	7e13      	ldrb	r3, [r2, #24]
   10256:	07d8      	lsls	r0, r3, #31
   10258:	d4f4      	bmi.n	10244 <_ZN9ClearCore10SerialBase19WaitForTransmitIdleEv+0x8>
        while (!m_serPort->USART.INTFLAG.bit.TXC) {
   1025a:	7e13      	ldrb	r3, [r2, #24]
   1025c:	0799      	lsls	r1, r3, #30
   1025e:	d5fc      	bpl.n	1025a <_ZN9ClearCore10SerialBase19WaitForTransmitIdleEv+0x1e>
   10260:	4770      	bx	lr
    if (m_dmaRxChannel == DMA_INVALID_CHANNEL ||
   10262:	f890 302e 	ldrb.w	r3, [r0, #46]	; 0x2e
   10266:	2b07      	cmp	r3, #7
   10268:	d0ec      	beq.n	10244 <_ZN9ClearCore10SerialBase19WaitForTransmitIdleEv+0x8>
   1026a:	f890 302f 	ldrb.w	r3, [r0, #47]	; 0x2f
   1026e:	2b07      	cmp	r3, #7
void SerialBase::WaitForTransmitIdle() {
   10270:	b510      	push	{r4, lr}
   10272:	4604      	mov	r4, r0
    if (m_dmaRxChannel == DMA_INVALID_CHANNEL ||
   10274:	d005      	beq.n	10282 <_ZN9ClearCore10SerialBase19WaitForTransmitIdleEv+0x46>
    while (m_portOpen && m_portMode == SPI &&
   10276:	f894 3029 	ldrb.w	r3, [r4, #41]	; 0x29
   1027a:	b113      	cbz	r3, 10282 <_ZN9ClearCore10SerialBase19WaitForTransmitIdleEv+0x46>
   1027c:	79e3      	ldrb	r3, [r4, #7]
   1027e:	2b01      	cmp	r3, #1
   10280:	d000      	beq.n	10284 <_ZN9ClearCore10SerialBase19WaitForTransmitIdleEv+0x48>
   10282:	bd10      	pop	{r4, pc}
            DmaManager::Channel(m_dmaRxChannel)->CHCTRLA.bit.ENABLE) {
   10284:	f894 002e 	ldrb.w	r0, [r4, #46]	; 0x2e
   10288:	f7fd fdf8 	bl	de7c <_ZN9ClearCore10DmaManager7ChannelENS_11DmaChannelsE>
   1028c:	6803      	ldr	r3, [r0, #0]
    while (m_portOpen && m_portMode == SPI &&
   1028e:	079b      	lsls	r3, r3, #30
   10290:	d4f1      	bmi.n	10276 <_ZN9ClearCore10SerialBase19WaitForTransmitIdleEv+0x3a>
   10292:	e7f6      	b.n	10282 <_ZN9ClearCore10SerialBase19WaitForTransmitIdleEv+0x46>

00010294 <_ZN9ClearCore10SerialBase5SpeedEm>:
bool SerialBase::Speed(uint32_t bitsPerSecond) {
   10294:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    PMUX_DISABLE(m_txMosiInfo->gpioPort, m_txMosiInfo->gpioPin);
   10298:	6a02      	ldr	r2, [r0, #32]
    m_baudRate = bitsPerSecond;
   1029a:	6241      	str	r1, [r0, #36]	; 0x24
    PMUX_DISABLE(m_txMosiInfo->gpioPort, m_txMosiInfo->gpioPin);
   1029c:	7893      	ldrb	r3, [r2, #2]
bool SerialBase::Speed(uint32_t bitsPerSecond) {
   1029e:	460f      	mov	r7, r1
    PMUX_DISABLE(m_txMosiInfo->gpioPort, m_txMosiInfo->gpioPin);
   102a0:	f992 1001 	ldrsb.w	r1, [r2, #1]
    bool sercomEnabled = m_serPort->USART.CTRLA.bit.ENABLE;
   102a4:	6902      	ldr	r2, [r0, #16]
    PMUX_DISABLE(m_txMosiInfo->gpioPort, m_txMosiInfo->gpioPin);
   102a6:	eb03 13c1 	add.w	r3, r3, r1, lsl #7
   102aa:	f103 4382 	add.w	r3, r3, #1090519040	; 0x41000000
   102ae:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
    bool sercomEnabled = m_serPort->USART.CTRLA.bit.ENABLE;
   102b2:	6816      	ldr	r6, [r2, #0]
    PMUX_DISABLE(m_txMosiInfo->gpioPort, m_txMosiInfo->gpioPin);
   102b4:	f893 1040 	ldrb.w	r1, [r3, #64]	; 0x40
   102b8:	f36f 0100 	bfc	r1, #0, #1
   102bc:	f883 1040 	strb.w	r1, [r3, #64]	; 0x40
    if (m_serPort->USART.CTRLA.bit.ENABLE) {
   102c0:	6813      	ldr	r3, [r2, #0]
   102c2:	0799      	lsls	r1, r3, #30
bool SerialBase::Speed(uint32_t bitsPerSecond) {
   102c4:	4604      	mov	r4, r0
    bool sercomEnabled = m_serPort->USART.CTRLA.bit.ENABLE;
   102c6:	f3c6 0640 	ubfx	r6, r6, #1, #1
    if (m_serPort->USART.CTRLA.bit.ENABLE) {
   102ca:	d503      	bpl.n	102d4 <_ZN9ClearCore10SerialBase5SpeedEm+0x40>
        m_serPort->USART.CTRLA.bit.ENABLE = 0;
   102cc:	6813      	ldr	r3, [r2, #0]
   102ce:	f36f 0341 	bfc	r3, #1, #1
   102d2:	6013      	str	r3, [r2, #0]
    SYNCBUSY_WAIT(usart, SERCOM_USART_SYNCBUSY_ENABLE);
   102d4:	69d3      	ldr	r3, [r2, #28]
   102d6:	f013 0302 	ands.w	r3, r3, #2
   102da:	d1fb      	bne.n	102d4 <_ZN9ClearCore10SerialBase5SpeedEm+0x40>
    Flush();
   102dc:	6822      	ldr	r2, [r4, #0]
   102de:	483a      	ldr	r0, [pc, #232]	; (103c8 <_ZN9ClearCore10SerialBase5SpeedEm+0x134>)
   102e0:	6811      	ldr	r1, [r2, #0]
   102e2:	4281      	cmp	r1, r0
   102e4:	d165      	bne.n	103b2 <_ZN9ClearCore10SerialBase5SpeedEm+0x11e>
    m_outTail = 0;
   102e6:	f8c4 313c 	str.w	r3, [r4, #316]	; 0x13c
    m_bufferOut[0] = 0;
   102ea:	f8a4 30b0 	strh.w	r3, [r4, #176]	; 0xb0
    m_outHead = 0;
   102ee:	f8c4 3138 	str.w	r3, [r4, #312]	; 0x138
    FlushInput();
   102f2:	6853      	ldr	r3, [r2, #4]
   102f4:	4a35      	ldr	r2, [pc, #212]	; (103cc <_ZN9ClearCore10SerialBase5SpeedEm+0x138>)
   102f6:	4293      	cmp	r3, r2
   102f8:	d162      	bne.n	103c0 <_ZN9ClearCore10SerialBase5SpeedEm+0x12c>
    m_serPort->USART.INTENSET.reg = SERCOM_USART_INTENSET_RXC;
   102fa:	6925      	ldr	r5, [r4, #16]
    m_bufferIn[0] = 0;
   102fc:	2300      	movs	r3, #0
    m_serPort->USART.INTENSET.reg = SERCOM_USART_INTENSET_RXC;
   102fe:	2204      	movs	r2, #4
    m_inTail = 0;
   10300:	f8c4 3134 	str.w	r3, [r4, #308]	; 0x134
    m_bufferIn[0] = 0;
   10304:	8623      	strh	r3, [r4, #48]	; 0x30
    m_inHead = 0;
   10306:	f8c4 3130 	str.w	r3, [r4, #304]	; 0x130
    m_serPort->USART.INTENSET.reg = SERCOM_USART_INTENSET_RXC;
   1030a:	75aa      	strb	r2, [r5, #22]
    switch (m_portMode) {
   1030c:	79e0      	ldrb	r0, [r4, #7]
   1030e:	2801      	cmp	r0, #1
   10310:	d124      	bne.n	1035c <_ZN9ClearCore10SerialBase5SpeedEm+0xc8>
            baudVal = ((__SERCOM_SPI_CLOCK / 2 + (bitsPerSecond - 1)) /
   10312:	4b2f      	ldr	r3, [pc, #188]	; (103d0 <_ZN9ClearCore10SerialBase5SpeedEm+0x13c>)
   10314:	443b      	add	r3, r7
   10316:	fbb3 f3f7 	udiv	r3, r3, r7
   1031a:	3b01      	subs	r3, #1
            if (baudVal > UINT8_MAX) {
   1031c:	2bff      	cmp	r3, #255	; 0xff
   1031e:	bf92      	itee	ls
   10320:	b2db      	uxtbls	r3, r3
   10322:	23ff      	movhi	r3, #255	; 0xff
                success = false;
   10324:	2000      	movhi	r0, #0
            m_serPort->SPI.BAUD.bit.BAUD = static_cast<uint8_t>(baudVal);
   10326:	732b      	strb	r3, [r5, #12]
    if (sercomEnabled) {
   10328:	b1b6      	cbz	r6, 10358 <_ZN9ClearCore10SerialBase5SpeedEm+0xc4>
    m_serPort->USART.CTRLA.bit.ENABLE = 1;
   1032a:	682b      	ldr	r3, [r5, #0]
   1032c:	f043 0302 	orr.w	r3, r3, #2
   10330:	602b      	str	r3, [r5, #0]
    SYNCBUSY_WAIT(usart, SERCOM_USART_SYNCBUSY_ENABLE);
   10332:	69eb      	ldr	r3, [r5, #28]
   10334:	079b      	lsls	r3, r3, #30
   10336:	d4fc      	bmi.n	10332 <_ZN9ClearCore10SerialBase5SpeedEm+0x9e>
        PMUX_ENABLE(m_txMosiInfo->gpioPort, m_txMosiInfo->gpioPin);
   10338:	6a22      	ldr	r2, [r4, #32]
   1033a:	f992 1001 	ldrsb.w	r1, [r2, #1]
   1033e:	7893      	ldrb	r3, [r2, #2]
   10340:	eb03 13c1 	add.w	r3, r3, r1, lsl #7
   10344:	f103 4382 	add.w	r3, r3, #1090519040	; 0x41000000
   10348:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
   1034c:	f893 2040 	ldrb.w	r2, [r3, #64]	; 0x40
   10350:	f042 0201 	orr.w	r2, r2, #1
   10354:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
}
   10358:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
                65536 * (1 - (16.0 * bitsPerSecond / __SERCOM_USART_CLOCK));
   1035c:	4638      	mov	r0, r7
   1035e:	f015 f847 	bl	253f0 <__aeabi_ui2d>
   10362:	2200      	movs	r2, #0
   10364:	4b1b      	ldr	r3, [pc, #108]	; (103d4 <_ZN9ClearCore10SerialBase5SpeedEm+0x140>)
   10366:	f015 f8b9 	bl	254dc <__aeabi_dmul>
   1036a:	4b1b      	ldr	r3, [pc, #108]	; (103d8 <_ZN9ClearCore10SerialBase5SpeedEm+0x144>)
   1036c:	4680      	mov	r8, r0
   1036e:	6818      	ldr	r0, [r3, #0]
   10370:	4689      	mov	r9, r1
   10372:	f015 f83d 	bl	253f0 <__aeabi_ui2d>
   10376:	4602      	mov	r2, r0
   10378:	460b      	mov	r3, r1
   1037a:	4640      	mov	r0, r8
   1037c:	4649      	mov	r1, r9
   1037e:	f015 f9d7 	bl	25730 <__aeabi_ddiv>
   10382:	4602      	mov	r2, r0
   10384:	460b      	mov	r3, r1
   10386:	2000      	movs	r0, #0
   10388:	4914      	ldr	r1, [pc, #80]	; (103dc <_ZN9ClearCore10SerialBase5SpeedEm+0x148>)
   1038a:	f014 fef3 	bl	25174 <__aeabi_dsub>
   1038e:	2200      	movs	r2, #0
   10390:	4b13      	ldr	r3, [pc, #76]	; (103e0 <_ZN9ClearCore10SerialBase5SpeedEm+0x14c>)
   10392:	f015 f8a3 	bl	254dc <__aeabi_dmul>
   10396:	f015 fb83 	bl	25aa0 <__aeabi_d2f>
            m_serPort->USART.BAUD.bit.BAUD = (uint16_t)(baudFloat + 0.5);
   1039a:	f015 f84b 	bl	25434 <__aeabi_f2d>
   1039e:	2200      	movs	r2, #0
   103a0:	4b10      	ldr	r3, [pc, #64]	; (103e4 <_ZN9ClearCore10SerialBase5SpeedEm+0x150>)
   103a2:	f014 fee9 	bl	25178 <__adddf3>
   103a6:	f015 fb5b 	bl	25a60 <__aeabi_d2uiz>
   103aa:	b280      	uxth	r0, r0
   103ac:	81a8      	strh	r0, [r5, #12]
    bool success = true;
   103ae:	2001      	movs	r0, #1
            break;
   103b0:	e7ba      	b.n	10328 <_ZN9ClearCore10SerialBase5SpeedEm+0x94>
    Flush();
   103b2:	4620      	mov	r0, r4
   103b4:	4788      	blx	r1
   103b6:	6822      	ldr	r2, [r4, #0]
    FlushInput();
   103b8:	6853      	ldr	r3, [r2, #4]
   103ba:	4a04      	ldr	r2, [pc, #16]	; (103cc <_ZN9ClearCore10SerialBase5SpeedEm+0x138>)
   103bc:	4293      	cmp	r3, r2
   103be:	d09c      	beq.n	102fa <_ZN9ClearCore10SerialBase5SpeedEm+0x66>
   103c0:	4620      	mov	r0, r4
   103c2:	4798      	blx	r3
   103c4:	6925      	ldr	r5, [r4, #16]
   103c6:	e7a1      	b.n	1030c <_ZN9ClearCore10SerialBase5SpeedEm+0x78>
   103c8:	00010161 	.word	0x00010161
   103cc:	00010171 	.word	0x00010171
   103d0:	004c4b3f 	.word	0x004c4b3f
   103d4:	40300000 	.word	0x40300000
   103d8:	200000e4 	.word	0x200000e4
   103dc:	3ff00000 	.word	0x3ff00000
   103e0:	40f00000 	.word	0x40f00000
   103e4:	3fe00000 	.word	0x3fe00000

000103e8 <_ZN9ClearCore10SerialBase9PortCloseEv>:
    if (m_portOpen) {
   103e8:	f890 3029 	ldrb.w	r3, [r0, #41]	; 0x29
   103ec:	b903      	cbnz	r3, 103f0 <_ZN9ClearCore10SerialBase9PortCloseEv+0x8>
   103ee:	4770      	bx	lr
void SerialBase::PortClose() {
   103f0:	b570      	push	{r4, r5, r6, lr}
        WaitForTransmitIdle();
   103f2:	6805      	ldr	r5, [r0, #0]
   103f4:	4a3e      	ldr	r2, [pc, #248]	; (104f0 <_ZN9ClearCore10SerialBase9PortCloseEv+0x108>)
   103f6:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
   103f8:	4293      	cmp	r3, r2
   103fa:	4604      	mov	r4, r0
   103fc:	d157      	bne.n	104ae <_ZN9ClearCore10SerialBase9PortCloseEv+0xc6>
    if (m_portMode == UART) {
   103fe:	79c3      	ldrb	r3, [r0, #7]
   10400:	2b00      	cmp	r3, #0
   10402:	d03f      	beq.n	10484 <_ZN9ClearCore10SerialBase9PortCloseEv+0x9c>
    else if (m_portMode == SPI) {
   10404:	2b01      	cmp	r3, #1
   10406:	d056      	beq.n	104b6 <_ZN9ClearCore10SerialBase9PortCloseEv+0xce>
   10408:	6922      	ldr	r2, [r4, #16]
        DATA_DIRECTION_INPUT(m_rtsSsInfo->gpioPort, 1L << m_rtsSsInfo->gpioPin);
   1040a:	69a0      	ldr	r0, [r4, #24]
   1040c:	4939      	ldr	r1, [pc, #228]	; (104f4 <_ZN9ClearCore10SerialBase9PortCloseEv+0x10c>)
   1040e:	f990 3001 	ldrsb.w	r3, [r0, #1]
   10412:	7886      	ldrb	r6, [r0, #2]
   10414:	eb01 13c3 	add.w	r3, r1, r3, lsl #7
   10418:	2001      	movs	r0, #1
   1041a:	40b0      	lsls	r0, r6
   1041c:	6058      	str	r0, [r3, #4]
    PMUX_DISABLE(m_txMosiInfo->gpioPort, m_txMosiInfo->gpioPin);
   1041e:	6a20      	ldr	r0, [r4, #32]
   10420:	f990 3001 	ldrsb.w	r3, [r0, #1]
   10424:	7880      	ldrb	r0, [r0, #2]
   10426:	eb01 13c3 	add.w	r3, r1, r3, lsl #7
   1042a:	4403      	add	r3, r0
   1042c:	f893 1040 	ldrb.w	r1, [r3, #64]	; 0x40
   10430:	f36f 0100 	bfc	r1, #0, #1
   10434:	f883 1040 	strb.w	r1, [r3, #64]	; 0x40
    if (m_serPort->USART.CTRLA.bit.ENABLE) {
   10438:	6813      	ldr	r3, [r2, #0]
   1043a:	079b      	lsls	r3, r3, #30
   1043c:	d503      	bpl.n	10446 <_ZN9ClearCore10SerialBase9PortCloseEv+0x5e>
        m_serPort->USART.CTRLA.bit.ENABLE = 0;
   1043e:	6813      	ldr	r3, [r2, #0]
   10440:	f36f 0341 	bfc	r3, #1, #1
   10444:	6013      	str	r3, [r2, #0]
    SYNCBUSY_WAIT(usart, SERCOM_USART_SYNCBUSY_ENABLE);
   10446:	69d3      	ldr	r3, [r2, #28]
   10448:	f013 0302 	ands.w	r3, r3, #2
   1044c:	d1fb      	bne.n	10446 <_ZN9ClearCore10SerialBase9PortCloseEv+0x5e>
    Flush();
   1044e:	682a      	ldr	r2, [r5, #0]
   10450:	4929      	ldr	r1, [pc, #164]	; (104f8 <_ZN9ClearCore10SerialBase9PortCloseEv+0x110>)
   10452:	428a      	cmp	r2, r1
   10454:	d124      	bne.n	104a0 <_ZN9ClearCore10SerialBase9PortCloseEv+0xb8>
    m_outTail = 0;
   10456:	f8c4 313c 	str.w	r3, [r4, #316]	; 0x13c
    m_bufferOut[0] = 0;
   1045a:	f8a4 30b0 	strh.w	r3, [r4, #176]	; 0xb0
    m_outHead = 0;
   1045e:	f8c4 3138 	str.w	r3, [r4, #312]	; 0x138
    FlushInput();
   10462:	686b      	ldr	r3, [r5, #4]
   10464:	4a25      	ldr	r2, [pc, #148]	; (104fc <_ZN9ClearCore10SerialBase9PortCloseEv+0x114>)
   10466:	4293      	cmp	r3, r2
   10468:	d11e      	bne.n	104a8 <_ZN9ClearCore10SerialBase9PortCloseEv+0xc0>
    m_serPort->USART.INTENSET.reg = SERCOM_USART_INTENSET_RXC;
   1046a:	6922      	ldr	r2, [r4, #16]
    m_bufferIn[0] = 0;
   1046c:	2300      	movs	r3, #0
    m_serPort->USART.INTENSET.reg = SERCOM_USART_INTENSET_RXC;
   1046e:	2104      	movs	r1, #4
    m_inTail = 0;
   10470:	f8c4 3134 	str.w	r3, [r4, #308]	; 0x134
    m_bufferIn[0] = 0;
   10474:	8623      	strh	r3, [r4, #48]	; 0x30
    m_inHead = 0;
   10476:	f8c4 3130 	str.w	r3, [r4, #304]	; 0x130
    m_serPort->USART.INTENSET.reg = SERCOM_USART_INTENSET_RXC;
   1047a:	7591      	strb	r1, [r2, #22]
        m_portOpen = false;
   1047c:	2300      	movs	r3, #0
   1047e:	f884 3029 	strb.w	r3, [r4, #41]	; 0x29
   10482:	bd70      	pop	{r4, r5, r6, pc}
        while (m_outHead != m_outTail) {
   10484:	f8d4 2138 	ldr.w	r2, [r4, #312]	; 0x138
   10488:	f8d4 313c 	ldr.w	r3, [r4, #316]	; 0x13c
   1048c:	429a      	cmp	r2, r3
   1048e:	d1f9      	bne.n	10484 <_ZN9ClearCore10SerialBase9PortCloseEv+0x9c>
        if (m_serPort->USART.INTFLAG.bit.DRE) {
   10490:	6922      	ldr	r2, [r4, #16]
   10492:	7e13      	ldrb	r3, [r2, #24]
   10494:	07d8      	lsls	r0, r3, #31
   10496:	d4b8      	bmi.n	1040a <_ZN9ClearCore10SerialBase9PortCloseEv+0x22>
        while (!m_serPort->USART.INTFLAG.bit.TXC) {
   10498:	7e13      	ldrb	r3, [r2, #24]
   1049a:	0799      	lsls	r1, r3, #30
   1049c:	d5fc      	bpl.n	10498 <_ZN9ClearCore10SerialBase9PortCloseEv+0xb0>
   1049e:	e7b4      	b.n	1040a <_ZN9ClearCore10SerialBase9PortCloseEv+0x22>
    Flush();
   104a0:	4620      	mov	r0, r4
   104a2:	4790      	blx	r2
   104a4:	6825      	ldr	r5, [r4, #0]
   104a6:	e7dc      	b.n	10462 <_ZN9ClearCore10SerialBase9PortCloseEv+0x7a>
    FlushInput();
   104a8:	4620      	mov	r0, r4
   104aa:	4798      	blx	r3
   104ac:	e7e6      	b.n	1047c <_ZN9ClearCore10SerialBase9PortCloseEv+0x94>
        WaitForTransmitIdle();
   104ae:	4798      	blx	r3
   104b0:	6922      	ldr	r2, [r4, #16]
   104b2:	6825      	ldr	r5, [r4, #0]
   104b4:	e7a9      	b.n	1040a <_ZN9ClearCore10SerialBase9PortCloseEv+0x22>
    if (m_dmaRxChannel == DMA_INVALID_CHANNEL ||
   104b6:	f890 002e 	ldrb.w	r0, [r0, #46]	; 0x2e
   104ba:	2807      	cmp	r0, #7
   104bc:	d0a4      	beq.n	10408 <_ZN9ClearCore10SerialBase9PortCloseEv+0x20>
   104be:	f894 302f 	ldrb.w	r3, [r4, #47]	; 0x2f
   104c2:	2b07      	cmp	r3, #7
   104c4:	d0a0      	beq.n	10408 <_ZN9ClearCore10SerialBase9PortCloseEv+0x20>
            DmaManager::Channel(m_dmaRxChannel)->CHCTRLA.bit.ENABLE) {
   104c6:	f7fd fcd9 	bl	de7c <_ZN9ClearCore10DmaManager7ChannelENS_11DmaChannelsE>
   104ca:	6803      	ldr	r3, [r0, #0]
    while (m_portOpen && m_portMode == SPI &&
   104cc:	079a      	lsls	r2, r3, #30
   104ce:	d5ef      	bpl.n	104b0 <_ZN9ClearCore10SerialBase9PortCloseEv+0xc8>
   104d0:	f894 3029 	ldrb.w	r3, [r4, #41]	; 0x29
   104d4:	2b00      	cmp	r3, #0
   104d6:	d0eb      	beq.n	104b0 <_ZN9ClearCore10SerialBase9PortCloseEv+0xc8>
   104d8:	79e3      	ldrb	r3, [r4, #7]
   104da:	2b01      	cmp	r3, #1
   104dc:	d1e8      	bne.n	104b0 <_ZN9ClearCore10SerialBase9PortCloseEv+0xc8>
   104de:	f894 002e 	ldrb.w	r0, [r4, #46]	; 0x2e
            DmaManager::Channel(m_dmaRxChannel)->CHCTRLA.bit.ENABLE) {
   104e2:	f7fd fccb 	bl	de7c <_ZN9ClearCore10DmaManager7ChannelENS_11DmaChannelsE>
   104e6:	6803      	ldr	r3, [r0, #0]
    while (m_portOpen && m_portMode == SPI &&
   104e8:	079a      	lsls	r2, r3, #30
   104ea:	d4f1      	bmi.n	104d0 <_ZN9ClearCore10SerialBase9PortCloseEv+0xe8>
   104ec:	e7e0      	b.n	104b0 <_ZN9ClearCore10SerialBase9PortCloseEv+0xc8>
   104ee:	bf00      	nop
   104f0:	0001023d 	.word	0x0001023d
   104f4:	41008000 	.word	0x41008000
   104f8:	00010161 	.word	0x00010161
   104fc:	00010171 	.word	0x00010171

00010500 <_ZN9ClearCore10SerialBase6ParityENS_7ISerial9_ParitiesE>:
bool SerialBase::Parity(Parities newParity) {
   10500:	b538      	push	{r3, r4, r5, lr}
    switch (m_portMode) {
   10502:	79c3      	ldrb	r3, [r0, #7]
    m_parity = newParity;
   10504:	7101      	strb	r1, [r0, #4]
    switch (m_portMode) {
   10506:	2b01      	cmp	r3, #1
   10508:	d101      	bne.n	1050e <_ZN9ClearCore10SerialBase6ParityENS_7ISerial9_ParitiesE+0xe>
            return false;
   1050a:	2000      	movs	r0, #0
   1050c:	bd38      	pop	{r3, r4, r5, pc}
    PMUX_DISABLE(m_txMosiInfo->gpioPort, m_txMosiInfo->gpioPin);
   1050e:	6a01      	ldr	r1, [r0, #32]
            bool sercomEnabled = m_serPort->USART.CTRLA.bit.ENABLE;
   10510:	6902      	ldr	r2, [r0, #16]
    PMUX_DISABLE(m_txMosiInfo->gpioPort, m_txMosiInfo->gpioPin);
   10512:	f991 4001 	ldrsb.w	r4, [r1, #1]
   10516:	788b      	ldrb	r3, [r1, #2]
            bool sercomEnabled = m_serPort->USART.CTRLA.bit.ENABLE;
   10518:	6815      	ldr	r5, [r2, #0]
    PMUX_DISABLE(m_txMosiInfo->gpioPort, m_txMosiInfo->gpioPin);
   1051a:	eb03 13c4 	add.w	r3, r3, r4, lsl #7
   1051e:	f103 4382 	add.w	r3, r3, #1090519040	; 0x41000000
   10522:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
            bool sercomEnabled = m_serPort->USART.CTRLA.bit.ENABLE;
   10526:	f3c5 0540 	ubfx	r5, r5, #1, #1
    PMUX_DISABLE(m_txMosiInfo->gpioPort, m_txMosiInfo->gpioPin);
   1052a:	f893 1040 	ldrb.w	r1, [r3, #64]	; 0x40
   1052e:	f36f 0100 	bfc	r1, #0, #1
   10532:	f883 1040 	strb.w	r1, [r3, #64]	; 0x40
    if (m_serPort->USART.CTRLA.bit.ENABLE) {
   10536:	6813      	ldr	r3, [r2, #0]
   10538:	0799      	lsls	r1, r3, #30
   1053a:	d503      	bpl.n	10544 <_ZN9ClearCore10SerialBase6ParityENS_7ISerial9_ParitiesE+0x44>
        m_serPort->USART.CTRLA.bit.ENABLE = 0;
   1053c:	6813      	ldr	r3, [r2, #0]
   1053e:	f36f 0341 	bfc	r3, #1, #1
   10542:	6013      	str	r3, [r2, #0]
    SYNCBUSY_WAIT(usart, SERCOM_USART_SYNCBUSY_ENABLE);
   10544:	69d3      	ldr	r3, [r2, #28]
   10546:	f013 0302 	ands.w	r3, r3, #2
   1054a:	d1fb      	bne.n	10544 <_ZN9ClearCore10SerialBase6ParityENS_7ISerial9_ParitiesE+0x44>
    Flush();
   1054c:	6802      	ldr	r2, [r0, #0]
   1054e:	4604      	mov	r4, r0
   10550:	6811      	ldr	r1, [r2, #0]
   10552:	4825      	ldr	r0, [pc, #148]	; (105e8 <_ZN9ClearCore10SerialBase6ParityENS_7ISerial9_ParitiesE+0xe8>)
   10554:	4281      	cmp	r1, r0
   10556:	d142      	bne.n	105de <_ZN9ClearCore10SerialBase6ParityENS_7ISerial9_ParitiesE+0xde>
    m_outTail = 0;
   10558:	f8c4 313c 	str.w	r3, [r4, #316]	; 0x13c
    m_bufferOut[0] = 0;
   1055c:	f8a4 30b0 	strh.w	r3, [r4, #176]	; 0xb0
    m_outHead = 0;
   10560:	f8c4 3138 	str.w	r3, [r4, #312]	; 0x138
    FlushInput();
   10564:	6853      	ldr	r3, [r2, #4]
   10566:	4a21      	ldr	r2, [pc, #132]	; (105ec <_ZN9ClearCore10SerialBase6ParityENS_7ISerial9_ParitiesE+0xec>)
   10568:	4293      	cmp	r3, r2
   1056a:	d134      	bne.n	105d6 <_ZN9ClearCore10SerialBase6ParityENS_7ISerial9_ParitiesE+0xd6>
    m_serPort->USART.INTENSET.reg = SERCOM_USART_INTENSET_RXC;
   1056c:	6922      	ldr	r2, [r4, #16]
    m_bufferIn[0] = 0;
   1056e:	2300      	movs	r3, #0
    m_serPort->USART.INTENSET.reg = SERCOM_USART_INTENSET_RXC;
   10570:	2104      	movs	r1, #4
    m_inTail = 0;
   10572:	f8c4 3134 	str.w	r3, [r4, #308]	; 0x134
    m_bufferIn[0] = 0;
   10576:	8623      	strh	r3, [r4, #48]	; 0x30
    m_inHead = 0;
   10578:	f8c4 3130 	str.w	r3, [r4, #304]	; 0x130
    m_serPort->USART.INTENSET.reg = SERCOM_USART_INTENSET_RXC;
   1057c:	7591      	strb	r1, [r2, #22]
            if (m_parity != PARITY_N) {
   1057e:	7923      	ldrb	r3, [r4, #4]
   10580:	2b02      	cmp	r3, #2
   10582:	d023      	beq.n	105cc <_ZN9ClearCore10SerialBase6ParityENS_7ISerial9_ParitiesE+0xcc>
                m_serPort->USART.CTRLA.bit.FORM = 1;
   10584:	6811      	ldr	r1, [r2, #0]
   10586:	2001      	movs	r0, #1
   10588:	f360 611b 	bfi	r1, r0, #24, #4
   1058c:	6011      	str	r1, [r2, #0]
                m_serPort->USART.CTRLB.bit.PMODE = m_parity;
   1058e:	6851      	ldr	r1, [r2, #4]
   10590:	f363 314d 	bfi	r1, r3, #13, #1
   10594:	6051      	str	r1, [r2, #4]
            if (sercomEnabled) {
   10596:	b1bd      	cbz	r5, 105c8 <_ZN9ClearCore10SerialBase6ParityENS_7ISerial9_ParitiesE+0xc8>
    m_serPort->USART.CTRLA.bit.ENABLE = 1;
   10598:	6813      	ldr	r3, [r2, #0]
   1059a:	f043 0302 	orr.w	r3, r3, #2
   1059e:	6013      	str	r3, [r2, #0]
    SYNCBUSY_WAIT(usart, SERCOM_USART_SYNCBUSY_ENABLE);
   105a0:	69d3      	ldr	r3, [r2, #28]
   105a2:	079b      	lsls	r3, r3, #30
   105a4:	d4fc      	bmi.n	105a0 <_ZN9ClearCore10SerialBase6ParityENS_7ISerial9_ParitiesE+0xa0>
        PMUX_ENABLE(m_txMosiInfo->gpioPort, m_txMosiInfo->gpioPin);
   105a6:	6a22      	ldr	r2, [r4, #32]
   105a8:	f992 1001 	ldrsb.w	r1, [r2, #1]
   105ac:	7893      	ldrb	r3, [r2, #2]
   105ae:	eb03 13c1 	add.w	r3, r3, r1, lsl #7
   105b2:	f103 4382 	add.w	r3, r3, #1090519040	; 0x41000000
   105b6:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
   105ba:	2001      	movs	r0, #1
   105bc:	f893 2040 	ldrb.w	r2, [r3, #64]	; 0x40
   105c0:	4302      	orrs	r2, r0
   105c2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
   105c6:	bd38      	pop	{r3, r4, r5, pc}
            return true;
   105c8:	2001      	movs	r0, #1
}
   105ca:	bd38      	pop	{r3, r4, r5, pc}
                m_serPort->USART.CTRLA.bit.FORM = 0;
   105cc:	6813      	ldr	r3, [r2, #0]
   105ce:	f36f 631b 	bfc	r3, #24, #4
   105d2:	6013      	str	r3, [r2, #0]
   105d4:	e7df      	b.n	10596 <_ZN9ClearCore10SerialBase6ParityENS_7ISerial9_ParitiesE+0x96>
    FlushInput();
   105d6:	4620      	mov	r0, r4
   105d8:	4798      	blx	r3
   105da:	6922      	ldr	r2, [r4, #16]
   105dc:	e7cf      	b.n	1057e <_ZN9ClearCore10SerialBase6ParityENS_7ISerial9_ParitiesE+0x7e>
    Flush();
   105de:	4620      	mov	r0, r4
   105e0:	4788      	blx	r1
   105e2:	6822      	ldr	r2, [r4, #0]
   105e4:	e7be      	b.n	10564 <_ZN9ClearCore10SerialBase6ParityENS_7ISerial9_ParitiesE+0x64>
   105e6:	bf00      	nop
   105e8:	00010161 	.word	0x00010161
   105ec:	00010171 	.word	0x00010171

000105f0 <_ZN9ClearCore10SerialBase8CharSizeEh>:
bool SerialBase::CharSize(uint8_t size) {
   105f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    if (size < 5 || size > 9) {
   105f2:	1f4b      	subs	r3, r1, #5
   105f4:	2b04      	cmp	r3, #4
   105f6:	d85d      	bhi.n	106b4 <_ZN9ClearCore10SerialBase8CharSizeEh+0xc4>
    else if (m_portMode == SPI && (size < 8 || size > 9)) {
   105f8:	79c3      	ldrb	r3, [r0, #7]
   105fa:	2b01      	cmp	r3, #1
   105fc:	d056      	beq.n	106ac <_ZN9ClearCore10SerialBase8CharSizeEh+0xbc>
    PMUX_DISABLE(m_txMosiInfo->gpioPort, m_txMosiInfo->gpioPin);
   105fe:	6a02      	ldr	r2, [r0, #32]
    m_charSize = size;
   10600:	7181      	strb	r1, [r0, #6]
    PMUX_DISABLE(m_txMosiInfo->gpioPort, m_txMosiInfo->gpioPin);
   10602:	f992 4001 	ldrsb.w	r4, [r2, #1]
   10606:	7893      	ldrb	r3, [r2, #2]
    bool sercomEnabled = m_serPort->USART.CTRLA.bit.ENABLE;
   10608:	6902      	ldr	r2, [r0, #16]
    PMUX_DISABLE(m_txMosiInfo->gpioPort, m_txMosiInfo->gpioPin);
   1060a:	eb03 13c4 	add.w	r3, r3, r4, lsl #7
   1060e:	f103 4382 	add.w	r3, r3, #1090519040	; 0x41000000
   10612:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
    bool sercomEnabled = m_serPort->USART.CTRLA.bit.ENABLE;
   10616:	6815      	ldr	r5, [r2, #0]
    PMUX_DISABLE(m_txMosiInfo->gpioPort, m_txMosiInfo->gpioPin);
   10618:	f893 4040 	ldrb.w	r4, [r3, #64]	; 0x40
   1061c:	f36f 0400 	bfc	r4, #0, #1
   10620:	f883 4040 	strb.w	r4, [r3, #64]	; 0x40
    if (m_serPort->USART.CTRLA.bit.ENABLE) {
   10624:	6813      	ldr	r3, [r2, #0]
   10626:	079c      	lsls	r4, r3, #30
    bool sercomEnabled = m_serPort->USART.CTRLA.bit.ENABLE;
   10628:	f3c5 0540 	ubfx	r5, r5, #1, #1
    if (m_serPort->USART.CTRLA.bit.ENABLE) {
   1062c:	d503      	bpl.n	10636 <_ZN9ClearCore10SerialBase8CharSizeEh+0x46>
        m_serPort->USART.CTRLA.bit.ENABLE = 0;
   1062e:	6813      	ldr	r3, [r2, #0]
   10630:	f36f 0341 	bfc	r3, #1, #1
   10634:	6013      	str	r3, [r2, #0]
    SYNCBUSY_WAIT(usart, SERCOM_USART_SYNCBUSY_ENABLE);
   10636:	69d3      	ldr	r3, [r2, #28]
   10638:	f013 0302 	ands.w	r3, r3, #2
   1063c:	d1fb      	bne.n	10636 <_ZN9ClearCore10SerialBase8CharSizeEh+0x46>
    Flush();
   1063e:	6802      	ldr	r2, [r0, #0]
   10640:	460f      	mov	r7, r1
   10642:	6816      	ldr	r6, [r2, #0]
   10644:	4921      	ldr	r1, [pc, #132]	; (106cc <_ZN9ClearCore10SerialBase8CharSizeEh+0xdc>)
   10646:	428e      	cmp	r6, r1
   10648:	4604      	mov	r4, r0
   1064a:	d13b      	bne.n	106c4 <_ZN9ClearCore10SerialBase8CharSizeEh+0xd4>
    m_outTail = 0;
   1064c:	f8c0 313c 	str.w	r3, [r0, #316]	; 0x13c
    m_bufferOut[0] = 0;
   10650:	f8a0 30b0 	strh.w	r3, [r0, #176]	; 0xb0
    m_outHead = 0;
   10654:	f8c0 3138 	str.w	r3, [r0, #312]	; 0x138
    FlushInput();
   10658:	6853      	ldr	r3, [r2, #4]
   1065a:	4a1d      	ldr	r2, [pc, #116]	; (106d0 <_ZN9ClearCore10SerialBase8CharSizeEh+0xe0>)
   1065c:	4293      	cmp	r3, r2
   1065e:	d12d      	bne.n	106bc <_ZN9ClearCore10SerialBase8CharSizeEh+0xcc>
    m_serPort->USART.INTENSET.reg = SERCOM_USART_INTENSET_RXC;
   10660:	6922      	ldr	r2, [r4, #16]
    m_bufferIn[0] = 0;
   10662:	2300      	movs	r3, #0
    m_serPort->USART.INTENSET.reg = SERCOM_USART_INTENSET_RXC;
   10664:	2104      	movs	r1, #4
    m_inTail = 0;
   10666:	f8c4 3134 	str.w	r3, [r4, #308]	; 0x134
    m_bufferIn[0] = 0;
   1066a:	8623      	strh	r3, [r4, #48]	; 0x30
    m_inHead = 0;
   1066c:	f8c4 3130 	str.w	r3, [r4, #304]	; 0x130
    m_serPort->USART.INTENSET.reg = SERCOM_USART_INTENSET_RXC;
   10670:	7591      	strb	r1, [r2, #22]
            m_serPort->SPI.CTRLB.bit.CHSIZE = size &
   10672:	6853      	ldr	r3, [r2, #4]
   10674:	f367 0302 	bfi	r3, r7, #0, #3
   10678:	6053      	str	r3, [r2, #4]
    if (sercomEnabled) {
   1067a:	b1ed      	cbz	r5, 106b8 <_ZN9ClearCore10SerialBase8CharSizeEh+0xc8>
    m_serPort->USART.CTRLA.bit.ENABLE = 1;
   1067c:	6813      	ldr	r3, [r2, #0]
   1067e:	f043 0302 	orr.w	r3, r3, #2
   10682:	6013      	str	r3, [r2, #0]
    SYNCBUSY_WAIT(usart, SERCOM_USART_SYNCBUSY_ENABLE);
   10684:	69d3      	ldr	r3, [r2, #28]
   10686:	079b      	lsls	r3, r3, #30
   10688:	d4fc      	bmi.n	10684 <_ZN9ClearCore10SerialBase8CharSizeEh+0x94>
        PMUX_ENABLE(m_txMosiInfo->gpioPort, m_txMosiInfo->gpioPin);
   1068a:	6a22      	ldr	r2, [r4, #32]
   1068c:	f992 1001 	ldrsb.w	r1, [r2, #1]
   10690:	7893      	ldrb	r3, [r2, #2]
   10692:	eb03 13c1 	add.w	r3, r3, r1, lsl #7
   10696:	f103 4382 	add.w	r3, r3, #1090519040	; 0x41000000
   1069a:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
   1069e:	2001      	movs	r0, #1
   106a0:	f893 2040 	ldrb.w	r2, [r3, #64]	; 0x40
   106a4:	4302      	orrs	r2, r0
   106a6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
   106aa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    else if (m_portMode == SPI && (size < 8 || size > 9)) {
   106ac:	f1a1 0308 	sub.w	r3, r1, #8
   106b0:	2b01      	cmp	r3, #1
   106b2:	d9a4      	bls.n	105fe <_ZN9ClearCore10SerialBase8CharSizeEh+0xe>
        return false;
   106b4:	2000      	movs	r0, #0
   106b6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    return true;
   106b8:	2001      	movs	r0, #1
}
   106ba:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    FlushInput();
   106bc:	4620      	mov	r0, r4
   106be:	4798      	blx	r3
   106c0:	6922      	ldr	r2, [r4, #16]
   106c2:	e7d6      	b.n	10672 <_ZN9ClearCore10SerialBase8CharSizeEh+0x82>
    Flush();
   106c4:	47b0      	blx	r6
   106c6:	6822      	ldr	r2, [r4, #0]
   106c8:	e7c6      	b.n	10658 <_ZN9ClearCore10SerialBase8CharSizeEh+0x68>
   106ca:	bf00      	nop
   106cc:	00010161 	.word	0x00010161
   106d0:	00010171 	.word	0x00010171

000106d4 <_ZN9ClearCore10SerialBase8StopBitsEh>:
bool SerialBase::StopBits(uint8_t bits) {
   106d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    if (bits < 1 || bits > 2) {
   106d6:	1e4c      	subs	r4, r1, #1
   106d8:	b2e4      	uxtb	r4, r4
   106da:	2c01      	cmp	r4, #1
   106dc:	d901      	bls.n	106e2 <_ZN9ClearCore10SerialBase8StopBitsEh+0xe>
        return false;
   106de:	2000      	movs	r0, #0
}
   106e0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if (m_portMode != PortModes::UART) {
   106e2:	79c5      	ldrb	r5, [r0, #7]
    m_stopBits = bits;
   106e4:	7141      	strb	r1, [r0, #5]
    if (m_portMode != PortModes::UART) {
   106e6:	b10d      	cbz	r5, 106ec <_ZN9ClearCore10SerialBase8StopBitsEh+0x18>
        return true;
   106e8:	2001      	movs	r0, #1
   106ea:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    PMUX_DISABLE(m_txMosiInfo->gpioPort, m_txMosiInfo->gpioPin);
   106ec:	6a01      	ldr	r1, [r0, #32]
    bool sercomEnabled = m_serPort->USART.CTRLA.bit.ENABLE;
   106ee:	6902      	ldr	r2, [r0, #16]
    PMUX_DISABLE(m_txMosiInfo->gpioPort, m_txMosiInfo->gpioPin);
   106f0:	f991 7001 	ldrsb.w	r7, [r1, #1]
   106f4:	788b      	ldrb	r3, [r1, #2]
    bool sercomEnabled = m_serPort->USART.CTRLA.bit.ENABLE;
   106f6:	6816      	ldr	r6, [r2, #0]
    PMUX_DISABLE(m_txMosiInfo->gpioPort, m_txMosiInfo->gpioPin);
   106f8:	eb03 13c7 	add.w	r3, r3, r7, lsl #7
   106fc:	f103 4382 	add.w	r3, r3, #1090519040	; 0x41000000
   10700:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
    bool sercomEnabled = m_serPort->USART.CTRLA.bit.ENABLE;
   10704:	f3c6 0640 	ubfx	r6, r6, #1, #1
    PMUX_DISABLE(m_txMosiInfo->gpioPort, m_txMosiInfo->gpioPin);
   10708:	f893 1040 	ldrb.w	r1, [r3, #64]	; 0x40
   1070c:	f365 0100 	bfi	r1, r5, #0, #1
   10710:	f883 1040 	strb.w	r1, [r3, #64]	; 0x40
    if (m_serPort->USART.CTRLA.bit.ENABLE) {
   10714:	6813      	ldr	r3, [r2, #0]
   10716:	0799      	lsls	r1, r3, #30
   10718:	d503      	bpl.n	10722 <_ZN9ClearCore10SerialBase8StopBitsEh+0x4e>
        m_serPort->USART.CTRLA.bit.ENABLE = 0;
   1071a:	6813      	ldr	r3, [r2, #0]
   1071c:	f365 0341 	bfi	r3, r5, #1, #1
   10720:	6013      	str	r3, [r2, #0]
    SYNCBUSY_WAIT(usart, SERCOM_USART_SYNCBUSY_ENABLE);
   10722:	69d3      	ldr	r3, [r2, #28]
   10724:	f013 0302 	ands.w	r3, r3, #2
   10728:	d1fb      	bne.n	10722 <_ZN9ClearCore10SerialBase8StopBitsEh+0x4e>
    Flush();
   1072a:	6802      	ldr	r2, [r0, #0]
   1072c:	4605      	mov	r5, r0
   1072e:	6811      	ldr	r1, [r2, #0]
   10730:	481d      	ldr	r0, [pc, #116]	; (107a8 <_ZN9ClearCore10SerialBase8StopBitsEh+0xd4>)
   10732:	4281      	cmp	r1, r0
   10734:	d130      	bne.n	10798 <_ZN9ClearCore10SerialBase8StopBitsEh+0xc4>
    m_outTail = 0;
   10736:	f8c5 313c 	str.w	r3, [r5, #316]	; 0x13c
    m_bufferOut[0] = 0;
   1073a:	f8a5 30b0 	strh.w	r3, [r5, #176]	; 0xb0
    m_outHead = 0;
   1073e:	f8c5 3138 	str.w	r3, [r5, #312]	; 0x138
    FlushInput();
   10742:	6853      	ldr	r3, [r2, #4]
   10744:	4a19      	ldr	r2, [pc, #100]	; (107ac <_ZN9ClearCore10SerialBase8StopBitsEh+0xd8>)
   10746:	4293      	cmp	r3, r2
   10748:	d12a      	bne.n	107a0 <_ZN9ClearCore10SerialBase8StopBitsEh+0xcc>
    m_serPort->USART.INTENSET.reg = SERCOM_USART_INTENSET_RXC;
   1074a:	692a      	ldr	r2, [r5, #16]
    m_bufferIn[0] = 0;
   1074c:	2300      	movs	r3, #0
    m_serPort->USART.INTENSET.reg = SERCOM_USART_INTENSET_RXC;
   1074e:	2104      	movs	r1, #4
    m_inTail = 0;
   10750:	f8c5 3134 	str.w	r3, [r5, #308]	; 0x134
    m_bufferIn[0] = 0;
   10754:	862b      	strh	r3, [r5, #48]	; 0x30
    m_inHead = 0;
   10756:	f8c5 3130 	str.w	r3, [r5, #304]	; 0x130
    m_serPort->USART.INTENSET.reg = SERCOM_USART_INTENSET_RXC;
   1075a:	7591      	strb	r1, [r2, #22]
    m_serPort->USART.CTRLB.bit.SBMODE = bits - 1;
   1075c:	6853      	ldr	r3, [r2, #4]
   1075e:	f364 1386 	bfi	r3, r4, #6, #1
   10762:	6053      	str	r3, [r2, #4]
    if (sercomEnabled) {
   10764:	2e00      	cmp	r6, #0
   10766:	d0bf      	beq.n	106e8 <_ZN9ClearCore10SerialBase8StopBitsEh+0x14>
    m_serPort->USART.CTRLA.bit.ENABLE = 1;
   10768:	6813      	ldr	r3, [r2, #0]
   1076a:	f043 0302 	orr.w	r3, r3, #2
   1076e:	6013      	str	r3, [r2, #0]
    SYNCBUSY_WAIT(usart, SERCOM_USART_SYNCBUSY_ENABLE);
   10770:	69d3      	ldr	r3, [r2, #28]
   10772:	079b      	lsls	r3, r3, #30
   10774:	d4fc      	bmi.n	10770 <_ZN9ClearCore10SerialBase8StopBitsEh+0x9c>
        PMUX_ENABLE(m_txMosiInfo->gpioPort, m_txMosiInfo->gpioPin);
   10776:	6a2a      	ldr	r2, [r5, #32]
   10778:	f992 1001 	ldrsb.w	r1, [r2, #1]
   1077c:	7893      	ldrb	r3, [r2, #2]
   1077e:	eb03 13c1 	add.w	r3, r3, r1, lsl #7
   10782:	f103 4382 	add.w	r3, r3, #1090519040	; 0x41000000
   10786:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
    return true;
   1078a:	2001      	movs	r0, #1
        PMUX_ENABLE(m_txMosiInfo->gpioPort, m_txMosiInfo->gpioPin);
   1078c:	f893 2040 	ldrb.w	r2, [r3, #64]	; 0x40
   10790:	4302      	orrs	r2, r0
   10792:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
   10796:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    Flush();
   10798:	4628      	mov	r0, r5
   1079a:	4788      	blx	r1
   1079c:	682a      	ldr	r2, [r5, #0]
   1079e:	e7d0      	b.n	10742 <_ZN9ClearCore10SerialBase8StopBitsEh+0x6e>
    FlushInput();
   107a0:	4628      	mov	r0, r5
   107a2:	4798      	blx	r3
   107a4:	692a      	ldr	r2, [r5, #16]
   107a6:	e7d9      	b.n	1075c <_ZN9ClearCore10SerialBase8StopBitsEh+0x88>
   107a8:	00010161 	.word	0x00010161
   107ac:	00010171 	.word	0x00010171

000107b0 <_ZN9ClearCore10SerialBase8PortModeENS0_9PortModesE.part.9>:
bool SerialBase::PortMode(PortModes newMode) {
   107b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    SercomUsart *usart = &m_serPort->USART;
   107b4:	6905      	ldr	r5, [r0, #16]
    usart->CTRLA.bit.SWRST = 1;
   107b6:	682b      	ldr	r3, [r5, #0]
   107b8:	f043 0301 	orr.w	r3, r3, #1
bool SerialBase::PortMode(PortModes newMode) {
   107bc:	b089      	sub	sp, #36	; 0x24
   107be:	4604      	mov	r4, r0
    usart->CTRLA.bit.SWRST = 1;
   107c0:	602b      	str	r3, [r5, #0]
    SYNCBUSY_WAIT(usart, SERCOM_USART_SYNCBUSY_SWRST);
   107c2:	69eb      	ldr	r3, [r5, #28]
   107c4:	f013 0301 	ands.w	r3, r3, #1
   107c8:	d1fb      	bne.n	107c2 <_ZN9ClearCore10SerialBase8PortModeENS0_9PortModesE.part.9+0x12>
    Flush();
   107ca:	6822      	ldr	r2, [r4, #0]
   107cc:	f8df 80d4 	ldr.w	r8, [pc, #212]	; 108a4 <_ZN9ClearCore10SerialBase8PortModeENS0_9PortModesE.part.9+0xf4>
   107d0:	6811      	ldr	r1, [r2, #0]
   107d2:	4541      	cmp	r1, r8
   107d4:	d153      	bne.n	1087e <_ZN9ClearCore10SerialBase8PortModeENS0_9PortModesE.part.9+0xce>
    m_outTail = 0;
   107d6:	f8c4 313c 	str.w	r3, [r4, #316]	; 0x13c
    m_bufferOut[0] = 0;
   107da:	f8a4 30b0 	strh.w	r3, [r4, #176]	; 0xb0
    m_outHead = 0;
   107de:	f8c4 3138 	str.w	r3, [r4, #312]	; 0x138
    FlushInput();
   107e2:	6853      	ldr	r3, [r2, #4]
   107e4:	4a28      	ldr	r2, [pc, #160]	; (10888 <_ZN9ClearCore10SerialBase8PortModeENS0_9PortModesE.part.9+0xd8>)
   107e6:	4293      	cmp	r3, r2
   107e8:	d122      	bne.n	10830 <_ZN9ClearCore10SerialBase8PortModeENS0_9PortModesE.part.9+0x80>
    m_bufferIn[0] = 0;
   107ea:	2200      	movs	r2, #0
    m_inTail = 0;
   107ec:	f8c4 2134 	str.w	r2, [r4, #308]	; 0x134
    m_serPort->USART.INTENSET.reg = SERCOM_USART_INTENSET_RXC;
   107f0:	6923      	ldr	r3, [r4, #16]
    m_bufferIn[0] = 0;
   107f2:	8622      	strh	r2, [r4, #48]	; 0x30
    m_inHead = 0;
   107f4:	f8c4 2130 	str.w	r2, [r4, #304]	; 0x130
    if (m_serPort == SERCOM0) {
   107f8:	4a24      	ldr	r2, [pc, #144]	; (1088c <_ZN9ClearCore10SerialBase8PortModeENS0_9PortModesE.part.9+0xdc>)
    m_serPort->USART.INTENSET.reg = SERCOM_USART_INTENSET_RXC;
   107fa:	2104      	movs	r1, #4
    if (m_serPort == SERCOM0) {
   107fc:	4293      	cmp	r3, r2
    m_serPort->USART.INTENSET.reg = SERCOM_USART_INTENSET_RXC;
   107fe:	7599      	strb	r1, [r3, #22]
    if (m_serPort == SERCOM0) {
   10800:	d01c      	beq.n	1083c <_ZN9ClearCore10SerialBase8PortModeENS0_9PortModesE.part.9+0x8c>
    else if (m_serPort == SERCOM2) {
   10802:	4a23      	ldr	r2, [pc, #140]	; (10890 <_ZN9ClearCore10SerialBase8PortModeENS0_9PortModesE.part.9+0xe0>)
   10804:	4293      	cmp	r3, r2
   10806:	f000 8310 	beq.w	10e2a <_ZN9ClearCore10SerialBase8PortModeENS0_9PortModesE.part.9+0x67a>
    else if (m_serPort == SERCOM3) {
   1080a:	4a22      	ldr	r2, [pc, #136]	; (10894 <_ZN9ClearCore10SerialBase8PortModeENS0_9PortModesE.part.9+0xe4>)
   1080c:	4293      	cmp	r3, r2
   1080e:	f000 8341 	beq.w	10e94 <_ZN9ClearCore10SerialBase8PortModeENS0_9PortModesE.part.9+0x6e4>
    else if (m_serPort == SERCOM4) {
   10812:	f1b3 4f86 	cmp.w	r3, #1124073472	; 0x43000000
   10816:	f000 839a 	beq.w	10f4e <_ZN9ClearCore10SerialBase8PortModeENS0_9PortModesE.part.9+0x79e>
    else if (m_serPort == SERCOM5) {
   1081a:	4a1f      	ldr	r2, [pc, #124]	; (10898 <_ZN9ClearCore10SerialBase8PortModeENS0_9PortModesE.part.9+0xe8>)
   1081c:	4293      	cmp	r3, r2
   1081e:	d043      	beq.n	108a8 <_ZN9ClearCore10SerialBase8PortModeENS0_9PortModesE.part.9+0xf8>
    else if (m_serPort == SERCOM7) {
   10820:	4a1e      	ldr	r2, [pc, #120]	; (1089c <_ZN9ClearCore10SerialBase8PortModeENS0_9PortModesE.part.9+0xec>)
   10822:	4293      	cmp	r3, r2
   10824:	f000 8372 	beq.w	10f0c <_ZN9ClearCore10SerialBase8PortModeENS0_9PortModesE.part.9+0x75c>
        return false;
   10828:	2000      	movs	r0, #0
}
   1082a:	b009      	add	sp, #36	; 0x24
   1082c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    FlushInput();
   10830:	4620      	mov	r0, r4
   10832:	4798      	blx	r3
   10834:	6923      	ldr	r3, [r4, #16]
    if (m_serPort == SERCOM0) {
   10836:	4a15      	ldr	r2, [pc, #84]	; (1088c <_ZN9ClearCore10SerialBase8PortModeENS0_9PortModesE.part.9+0xdc>)
   10838:	4293      	cmp	r3, r2
   1083a:	d1e2      	bne.n	10802 <_ZN9ClearCore10SerialBase8PortModeENS0_9PortModesE.part.9+0x52>
        m_dmaTxChannel = DMA_SERCOM0_SPI_TX;
   1083c:	2203      	movs	r2, #3
   1083e:	f884 202f 	strb.w	r2, [r4, #47]	; 0x2f
   10842:	4a17      	ldr	r2, [pc, #92]	; (108a0 <_ZN9ClearCore10SerialBase8PortModeENS0_9PortModesE.part.9+0xf0>)
   10844:	9207      	str	r2, [sp, #28]
   10846:	f5a2 7280 	sub.w	r2, r2, #256	; 0x100
   1084a:	9206      	str	r2, [sp, #24]
   1084c:	f44f 3200 	mov.w	r2, #131072	; 0x20000
   10850:	9202      	str	r2, [sp, #8]
   10852:	2231      	movs	r2, #49	; 0x31
   10854:	9205      	str	r2, [sp, #20]
   10856:	f44f 3280 	mov.w	r2, #65536	; 0x10000
   1085a:	9201      	str	r2, [sp, #4]
   1085c:	2230      	movs	r2, #48	; 0x30
        m_dmaRxChannel = DMA_SERCOM0_SPI_RX;
   1085e:	2002      	movs	r0, #2
        m_dmaTxChannel = DMA_SERCOM0_SPI_TX;
   10860:	2601      	movs	r6, #1
   10862:	f04f 092e 	mov.w	r9, #46	; 0x2e
   10866:	9204      	str	r2, [sp, #16]
   10868:	f44f 4280 	mov.w	r2, #16384	; 0x4000
        m_dmaRxChannel = DMA_SERCOM0_SPI_RX;
   1086c:	f884 002e 	strb.w	r0, [r4, #46]	; 0x2e
        m_dmaTxChannel = DMA_SERCOM0_SPI_TX;
   10870:	4637      	mov	r7, r6
        IdNvic = SERCOM0_0_IRQn;
   10872:	f8cd 900c 	str.w	r9, [sp, #12]
        m_dmaTxChannel = DMA_SERCOM0_SPI_TX;
   10876:	f04f 0a07 	mov.w	sl, #7
   1087a:	9200      	str	r2, [sp, #0]
   1087c:	e02f      	b.n	108de <_ZN9ClearCore10SerialBase8PortModeENS0_9PortModesE.part.9+0x12e>
    Flush();
   1087e:	4620      	mov	r0, r4
   10880:	4788      	blx	r1
   10882:	6822      	ldr	r2, [r4, #0]
   10884:	e7ad      	b.n	107e2 <_ZN9ClearCore10SerialBase8PortModeENS0_9PortModesE.part.9+0x32>
   10886:	bf00      	nop
   10888:	00010171 	.word	0x00010171
   1088c:	40003000 	.word	0x40003000
   10890:	41012000 	.word	0x41012000
   10894:	41014000 	.word	0x41014000
   10898:	43000400 	.word	0x43000400
   1089c:	43000c00 	.word	0x43000c00
   108a0:	00200500 	.word	0x00200500
   108a4:	00010161 	.word	0x00010161
        m_dmaTxChannel = DMA_INVALID_CHANNEL;
   108a8:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
   108ac:	9207      	str	r2, [sp, #28]
   108ae:	9206      	str	r2, [sp, #24]
   108b0:	2220      	movs	r2, #32
   108b2:	9202      	str	r2, [sp, #8]
   108b4:	2245      	movs	r2, #69	; 0x45
   108b6:	9205      	str	r2, [sp, #20]
   108b8:	2210      	movs	r2, #16
   108ba:	9201      	str	r2, [sp, #4]
   108bc:	2244      	movs	r2, #68	; 0x44
        m_dmaRxChannel = DMA_INVALID_CHANNEL;
   108be:	2007      	movs	r0, #7
        m_dmaTxChannel = DMA_INVALID_CHANNEL;
   108c0:	2602      	movs	r6, #2
   108c2:	f04f 0942 	mov.w	r9, #66	; 0x42
   108c6:	9204      	str	r2, [sp, #16]
   108c8:	2204      	movs	r2, #4
        m_dmaRxChannel = DMA_INVALID_CHANNEL;
   108ca:	f884 002e 	strb.w	r0, [r4, #46]	; 0x2e
        m_dmaTxChannel = DMA_INVALID_CHANNEL;
   108ce:	f884 002f 	strb.w	r0, [r4, #47]	; 0x2f
   108d2:	4637      	mov	r7, r6
        IdNvic = SERCOM5_0_IRQn;
   108d4:	f8cd 900c 	str.w	r9, [sp, #12]
        m_dmaTxChannel = DMA_INVALID_CHANNEL;
   108d8:	f04f 0a23 	mov.w	sl, #35	; 0x23
   108dc:	9200      	str	r2, [sp, #0]
    DATA_OUTPUT_STATE(m_txMosiInfo->gpioPort,
   108de:	6a21      	ldr	r1, [r4, #32]
   108e0:	f991 2001 	ldrsb.w	r2, [r1, #1]
   108e4:	f891 b002 	ldrb.w	fp, [r1, #2]
   108e8:	01d2      	lsls	r2, r2, #7
   108ea:	f102 4282 	add.w	r2, r2, #1090519040	; 0x41000000
   108ee:	f502 4200 	add.w	r2, r2, #32768	; 0x8000
   108f2:	f04f 0e01 	mov.w	lr, #1
   108f6:	fa0e fc0b 	lsl.w	ip, lr, fp
   108fa:	f8c2 c018 	str.w	ip, [r2, #24]
    DATA_DIRECTION_OUTPUT(m_txMosiInfo->gpioPort, 1L << m_txMosiInfo->gpioPin);
   108fe:	f8c2 c008 	str.w	ip, [r2, #8]
    switch (m_portMode) {
   10902:	f894 c007 	ldrb.w	ip, [r4, #7]
   10906:	45f4      	cmp	ip, lr
   10908:	f040 819d 	bne.w	10c46 <_ZN9ClearCore10SerialBase8PortModeENS0_9PortModesE.part.9+0x496>
  NVIC->ICER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
   1090c:	4dc4      	ldr	r5, [pc, #784]	; (10c20 <_ZN9ClearCore10SerialBase8PortModeENS0_9PortModesE.part.9+0x470>)
            SET_CLOCK_SOURCE(clockId, __SERCOM_SPI_CLOCK_INDEX);
   1090e:	4ac5      	ldr	r2, [pc, #788]	; (10c24 <_ZN9ClearCore10SerialBase8PortModeENS0_9PortModesE.part.9+0x474>)
   10910:	f107 0e20 	add.w	lr, r7, #32
   10914:	3620      	adds	r6, #32
   10916:	9f00      	ldr	r7, [sp, #0]
   10918:	f845 702e 	str.w	r7, [r5, lr, lsl #2]
   1091c:	9f01      	ldr	r7, [sp, #4]
   1091e:	f845 7026 	str.w	r7, [r5, r6, lsl #2]
   10922:	9f02      	ldr	r7, [sp, #8]
   10924:	f845 7026 	str.w	r7, [r5, r6, lsl #2]
   10928:	f10a 0e20 	add.w	lr, sl, #32
   1092c:	f852 502e 	ldr.w	r5, [r2, lr, lsl #2]
   10930:	f36f 1586 	bfc	r5, #6, #1
   10934:	f842 502e 	str.w	r5, [r2, lr, lsl #2]
   10938:	f852 502e 	ldr.w	r5, [r2, lr, lsl #2]
   1093c:	066d      	lsls	r5, r5, #25
   1093e:	d4fb      	bmi.n	10938 <_ZN9ClearCore10SerialBase8PortModeENS0_9PortModesE.part.9+0x188>
   10940:	f852 502e 	ldr.w	r5, [r2, lr, lsl #2]
   10944:	4eb7      	ldr	r6, [pc, #732]	; (10c24 <_ZN9ClearCore10SerialBase8PortModeENS0_9PortModesE.part.9+0x474>)
   10946:	f04f 0c07 	mov.w	ip, #7
   1094a:	f36c 0503 	bfi	r5, ip, #0, #4
   1094e:	f842 502e 	str.w	r5, [r2, lr, lsl #2]
   10952:	f852 502e 	ldr.w	r5, [r2, lr, lsl #2]
   10956:	f045 0540 	orr.w	r5, r5, #64	; 0x40
   1095a:	f842 502e 	str.w	r5, [r2, lr, lsl #2]
   1095e:	6875      	ldr	r5, [r6, #4]
   10960:	f015 051c 	ands.w	r5, r5, #28
   10964:	d1fb      	bne.n	1095e <_ZN9ClearCore10SerialBase8PortModeENS0_9PortModesE.part.9+0x1ae>
            m_serPort->SPI.CTRLA.bit.MODE = 0x3;
   10966:	681a      	ldr	r2, [r3, #0]
   10968:	2603      	movs	r6, #3
   1096a:	f366 0284 	bfi	r2, r6, #2, #3
   1096e:	601a      	str	r2, [r3, #0]
            m_serPort->SPI.CTRLA.bit.CPOL = m_polarity;
   10970:	681a      	ldr	r2, [r3, #0]
   10972:	7a26      	ldrb	r6, [r4, #8]
   10974:	f366 725d 	bfi	r2, r6, #29, #1
   10978:	601a      	str	r2, [r3, #0]
            m_serPort->SPI.CTRLA.bit.CPHA = m_phase;
   1097a:	681a      	ldr	r2, [r3, #0]
   1097c:	7a66      	ldrb	r6, [r4, #9]
   1097e:	f366 721c 	bfi	r2, r6, #28, #1
   10982:	601a      	str	r2, [r3, #0]
            m_serPort->SPI.CTRLA.bit.FORM = 0;
   10984:	681a      	ldr	r2, [r3, #0]
   10986:	f365 621b 	bfi	r2, r5, #24, #4
   1098a:	601a      	str	r2, [r3, #0]
            m_serPort->SPI.CTRLA.bit.DIPO = m_ctsMisoInfo->sercomPadNum;
   1098c:	6962      	ldr	r2, [r4, #20]
   1098e:	681e      	ldr	r6, [r3, #0]
   10990:	7a52      	ldrb	r2, [r2, #9]
   10992:	f362 5615 	bfi	r6, r2, #20, #2
   10996:	601e      	str	r6, [r3, #0]
            m_serPort->SPI.CTRLA.bit.DOPO = m_txMosiInfo->sercomPadNum ? 2 : 0;
   10998:	7a49      	ldrb	r1, [r1, #9]
   1099a:	681a      	ldr	r2, [r3, #0]
   1099c:	2900      	cmp	r1, #0
   1099e:	bf0c      	ite	eq
   109a0:	2100      	moveq	r1, #0
   109a2:	2102      	movne	r1, #2
   109a4:	f361 4211 	bfi	r2, r1, #16, #2
   109a8:	601a      	str	r2, [r3, #0]
            m_serPort->SPI.CTRLB.bit.CHSIZE = m_charSize &
   109aa:	685a      	ldr	r2, [r3, #4]
   109ac:	79a1      	ldrb	r1, [r4, #6]
   109ae:	f361 0202 	bfi	r2, r1, #0, #3
   109b2:	605a      	str	r2, [r3, #4]
            m_serPort->SPI.CTRLA.bit.DORD = 0;
   109b4:	681a      	ldr	r2, [r3, #0]
   109b6:	f365 729e 	bfi	r2, r5, #30, #1
   109ba:	601a      	str	r2, [r3, #0]
            m_serPort->SPI.CTRLA.bit.IBON = 1;
   109bc:	681a      	ldr	r2, [r3, #0]
   109be:	f442 7280 	orr.w	r2, r2, #256	; 0x100
   109c2:	601a      	str	r2, [r3, #0]
            m_serPort->SPI.CTRLB.bit.MSSEN = 1;
   109c4:	685a      	ldr	r2, [r3, #4]
   109c6:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
   109ca:	605a      	str	r2, [r3, #4]
            m_serPort->SPI.CTRLB.bit.RXEN = 1;
   109cc:	685a      	ldr	r2, [r3, #4]
   109ce:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
   109d2:	605a      	str	r2, [r3, #4]
            PMUX_SELECTION(m_rtsSsInfo->gpioPort, m_rtsSsInfo->gpioPin,
   109d4:	69a3      	ldr	r3, [r4, #24]
   109d6:	f894 6028 	ldrb.w	r6, [r4, #40]	; 0x28
   109da:	789a      	ldrb	r2, [r3, #2]
   109dc:	f993 3001 	ldrsb.w	r3, [r3, #1]
   109e0:	01db      	lsls	r3, r3, #7
   109e2:	f103 4182 	add.w	r1, r3, #1090519040	; 0x41000000
   109e6:	f501 4100 	add.w	r1, r1, #32768	; 0x8000
   109ea:	eb01 0152 	add.w	r1, r1, r2, lsr #1
   109ee:	07d7      	lsls	r7, r2, #31
   109f0:	f891 5030 	ldrb.w	r5, [r1, #48]	; 0x30
   109f4:	bf4c      	ite	mi
   109f6:	f366 1507 	bfimi	r5, r6, #4, #4
   109fa:	f366 0503 	bfipl	r5, r6, #0, #4
   109fe:	f881 5030 	strb.w	r5, [r1, #48]	; 0x30
            SpiSsMode(m_ssMode);
   10a02:	7aa1      	ldrb	r1, [r4, #10]
    switch (mode) {
   10a04:	2901      	cmp	r1, #1
   10a06:	f240 822f 	bls.w	10e68 <_ZN9ClearCore10SerialBase8PortModeENS0_9PortModesE.part.9+0x6b8>
   10a0a:	2902      	cmp	r1, #2
   10a0c:	d10a      	bne.n	10a24 <_ZN9ClearCore10SerialBase8PortModeENS0_9PortModesE.part.9+0x274>
            PMUX_ENABLE(m_rtsSsInfo->gpioPort, m_rtsSsInfo->gpioPin);
   10a0e:	f103 4382 	add.w	r3, r3, #1090519040	; 0x41000000
   10a12:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
   10a16:	4413      	add	r3, r2
   10a18:	f893 2040 	ldrb.w	r2, [r3, #64]	; 0x40
   10a1c:	f042 0201 	orr.w	r2, r2, #1
   10a20:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
            if (m_dmaRxChannel != DMA_INVALID_CHANNEL &&
   10a24:	2807      	cmp	r0, #7
   10a26:	d031      	beq.n	10a8c <_ZN9ClearCore10SerialBase8PortModeENS0_9PortModesE.part.9+0x2dc>
   10a28:	f894 302f 	ldrb.w	r3, [r4, #47]	; 0x2f
   10a2c:	2b07      	cmp	r3, #7
   10a2e:	d02d      	beq.n	10a8c <_ZN9ClearCore10SerialBase8PortModeENS0_9PortModesE.part.9+0x2dc>
                channel = DmaManager::Channel(m_dmaRxChannel);
   10a30:	f7fd fa24 	bl	de7c <_ZN9ClearCore10DmaManager7ChannelENS_11DmaChannelsE>
                channel->CHCTRLA.reg &= ~DMAC_CHCTRLA_ENABLE;
   10a34:	6803      	ldr	r3, [r0, #0]
                channel->CHCTRLA.reg = DMAC_CHCTRLA_SWRST;
   10a36:	2201      	movs	r2, #1
                channel->CHCTRLA.reg &= ~DMAC_CHCTRLA_ENABLE;
   10a38:	f023 0302 	bic.w	r3, r3, #2
   10a3c:	6003      	str	r3, [r0, #0]
                channel->CHCTRLA.reg = DMAC_CHCTRLA_SWRST;
   10a3e:	6002      	str	r2, [r0, #0]
                while (channel->CHCTRLA.reg == DMAC_CHCTRLA_SWRST) {
   10a40:	6803      	ldr	r3, [r0, #0]
   10a42:	2b01      	cmp	r3, #1
   10a44:	d0fc      	beq.n	10a40 <_ZN9ClearCore10SerialBase8PortModeENS0_9PortModesE.part.9+0x290>
                channel->CHCTRLA.reg = DMAC_CHCTRLA_TRIGSRC(dmaRxTrigger) |
   10a46:	9b06      	ldr	r3, [sp, #24]
   10a48:	6003      	str	r3, [r0, #0]
                baseDesc = DmaManager::BaseDescriptor(m_dmaRxChannel);
   10a4a:	f894 002e 	ldrb.w	r0, [r4, #46]	; 0x2e
   10a4e:	f7fd fa1f 	bl	de90 <_ZN9ClearCore10DmaManager14BaseDescriptorENS_11DmaChannelsE>
                baseDesc->DESCADDR.reg = static_cast<uint32_t>(0);
   10a52:	2300      	movs	r3, #0
   10a54:	60c3      	str	r3, [r0, #12]
                baseDesc->SRCADDR.reg = (uint32_t)&m_serPort->SPI.DATA.reg;
   10a56:	6923      	ldr	r3, [r4, #16]
   10a58:	3328      	adds	r3, #40	; 0x28
   10a5a:	6043      	str	r3, [r0, #4]
                channel = DmaManager::Channel(m_dmaTxChannel);
   10a5c:	f894 002f 	ldrb.w	r0, [r4, #47]	; 0x2f
   10a60:	f7fd fa0c 	bl	de7c <_ZN9ClearCore10DmaManager7ChannelENS_11DmaChannelsE>
                channel->CHCTRLA.reg &= ~DMAC_CHCTRLA_ENABLE;
   10a64:	6803      	ldr	r3, [r0, #0]
                channel->CHCTRLA.reg = DMAC_CHCTRLA_SWRST;
   10a66:	2201      	movs	r2, #1
                channel->CHCTRLA.reg &= ~DMAC_CHCTRLA_ENABLE;
   10a68:	f023 0302 	bic.w	r3, r3, #2
   10a6c:	6003      	str	r3, [r0, #0]
                channel->CHCTRLA.reg = DMAC_CHCTRLA_SWRST;
   10a6e:	6002      	str	r2, [r0, #0]
                while (channel->CHCTRLA.reg == DMAC_CHCTRLA_SWRST) {
   10a70:	6803      	ldr	r3, [r0, #0]
   10a72:	2b01      	cmp	r3, #1
   10a74:	d0fc      	beq.n	10a70 <_ZN9ClearCore10SerialBase8PortModeENS0_9PortModesE.part.9+0x2c0>
                channel->CHCTRLA.reg = DMAC_CHCTRLA_TRIGSRC(dmaTxTrigger) |
   10a76:	9b07      	ldr	r3, [sp, #28]
   10a78:	6003      	str	r3, [r0, #0]
                baseDesc = DmaManager::BaseDescriptor(m_dmaTxChannel);
   10a7a:	f894 002f 	ldrb.w	r0, [r4, #47]	; 0x2f
   10a7e:	f7fd fa07 	bl	de90 <_ZN9ClearCore10DmaManager14BaseDescriptorENS_11DmaChannelsE>
                baseDesc->DESCADDR.reg = static_cast<uint32_t>(0);
   10a82:	2300      	movs	r3, #0
   10a84:	60c3      	str	r3, [r0, #12]
                baseDesc->DSTADDR.reg = (uint32_t)&m_serPort->SPI.DATA.reg;
   10a86:	6923      	ldr	r3, [r4, #16]
   10a88:	3328      	adds	r3, #40	; 0x28
   10a8a:	6083      	str	r3, [r0, #8]
    Speed(m_baudRate);
   10a8c:	6820      	ldr	r0, [r4, #0]
   10a8e:	4a66      	ldr	r2, [pc, #408]	; (10c28 <_ZN9ClearCore10SerialBase8PortModeENS0_9PortModesE.part.9+0x478>)
   10a90:	6903      	ldr	r3, [r0, #16]
   10a92:	f8d4 9024 	ldr.w	r9, [r4, #36]	; 0x24
   10a96:	4293      	cmp	r3, r2
   10a98:	f040 81bd 	bne.w	10e16 <_ZN9ClearCore10SerialBase8PortModeENS0_9PortModesE.part.9+0x666>
    PMUX_DISABLE(m_txMosiInfo->gpioPort, m_txMosiInfo->gpioPin);
   10a9c:	6a21      	ldr	r1, [r4, #32]
    bool sercomEnabled = m_serPort->USART.CTRLA.bit.ENABLE;
   10a9e:	6922      	ldr	r2, [r4, #16]
    PMUX_DISABLE(m_txMosiInfo->gpioPort, m_txMosiInfo->gpioPin);
   10aa0:	f991 5001 	ldrsb.w	r5, [r1, #1]
   10aa4:	788b      	ldrb	r3, [r1, #2]
    bool sercomEnabled = m_serPort->USART.CTRLA.bit.ENABLE;
   10aa6:	6816      	ldr	r6, [r2, #0]
    PMUX_DISABLE(m_txMosiInfo->gpioPort, m_txMosiInfo->gpioPin);
   10aa8:	eb03 13c5 	add.w	r3, r3, r5, lsl #7
   10aac:	f103 4382 	add.w	r3, r3, #1090519040	; 0x41000000
   10ab0:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
    bool sercomEnabled = m_serPort->USART.CTRLA.bit.ENABLE;
   10ab4:	f3c6 0640 	ubfx	r6, r6, #1, #1
    PMUX_DISABLE(m_txMosiInfo->gpioPort, m_txMosiInfo->gpioPin);
   10ab8:	f893 1040 	ldrb.w	r1, [r3, #64]	; 0x40
   10abc:	f36f 0100 	bfc	r1, #0, #1
   10ac0:	f883 1040 	strb.w	r1, [r3, #64]	; 0x40
    if (m_serPort->USART.CTRLA.bit.ENABLE) {
   10ac4:	6813      	ldr	r3, [r2, #0]
   10ac6:	0799      	lsls	r1, r3, #30
   10ac8:	d503      	bpl.n	10ad2 <_ZN9ClearCore10SerialBase8PortModeENS0_9PortModesE.part.9+0x322>
        m_serPort->USART.CTRLA.bit.ENABLE = 0;
   10aca:	6813      	ldr	r3, [r2, #0]
   10acc:	f36f 0341 	bfc	r3, #1, #1
   10ad0:	6013      	str	r3, [r2, #0]
    SYNCBUSY_WAIT(usart, SERCOM_USART_SYNCBUSY_ENABLE);
   10ad2:	69d3      	ldr	r3, [r2, #28]
   10ad4:	f013 0302 	ands.w	r3, r3, #2
   10ad8:	d1fb      	bne.n	10ad2 <_ZN9ClearCore10SerialBase8PortModeENS0_9PortModesE.part.9+0x322>
    Flush();
   10ada:	6802      	ldr	r2, [r0, #0]
   10adc:	4542      	cmp	r2, r8
   10ade:	f040 8211 	bne.w	10f04 <_ZN9ClearCore10SerialBase8PortModeENS0_9PortModesE.part.9+0x754>
    m_outTail = 0;
   10ae2:	f8c4 313c 	str.w	r3, [r4, #316]	; 0x13c
    m_bufferOut[0] = 0;
   10ae6:	f8a4 30b0 	strh.w	r3, [r4, #176]	; 0xb0
    m_outHead = 0;
   10aea:	f8c4 3138 	str.w	r3, [r4, #312]	; 0x138
    FlushInput();
   10aee:	6843      	ldr	r3, [r0, #4]
   10af0:	4a4e      	ldr	r2, [pc, #312]	; (10c2c <_ZN9ClearCore10SerialBase8PortModeENS0_9PortModesE.part.9+0x47c>)
   10af2:	4293      	cmp	r3, r2
   10af4:	f040 8202 	bne.w	10efc <_ZN9ClearCore10SerialBase8PortModeENS0_9PortModesE.part.9+0x74c>
    m_serPort->USART.INTENSET.reg = SERCOM_USART_INTENSET_RXC;
   10af8:	6925      	ldr	r5, [r4, #16]
    m_bufferIn[0] = 0;
   10afa:	2300      	movs	r3, #0
    m_serPort->USART.INTENSET.reg = SERCOM_USART_INTENSET_RXC;
   10afc:	2204      	movs	r2, #4
    m_inTail = 0;
   10afe:	f8c4 3134 	str.w	r3, [r4, #308]	; 0x134
    m_bufferIn[0] = 0;
   10b02:	8623      	strh	r3, [r4, #48]	; 0x30
    m_inHead = 0;
   10b04:	f8c4 3130 	str.w	r3, [r4, #304]	; 0x130
    m_serPort->USART.INTENSET.reg = SERCOM_USART_INTENSET_RXC;
   10b08:	75aa      	strb	r2, [r5, #22]
    switch (m_portMode) {
   10b0a:	79e3      	ldrb	r3, [r4, #7]
   10b0c:	2b01      	cmp	r3, #1
   10b0e:	f040 8150 	bne.w	10db2 <_ZN9ClearCore10SerialBase8PortModeENS0_9PortModesE.part.9+0x602>
            baudVal = ((__SERCOM_SPI_CLOCK / 2 + (bitsPerSecond - 1)) /
   10b12:	4b47      	ldr	r3, [pc, #284]	; (10c30 <_ZN9ClearCore10SerialBase8PortModeENS0_9PortModesE.part.9+0x480>)
   10b14:	444b      	add	r3, r9
   10b16:	fbb3 f3f9 	udiv	r3, r3, r9
   10b1a:	3b01      	subs	r3, #1
            m_serPort->SPI.BAUD.bit.BAUD = static_cast<uint8_t>(baudVal);
   10b1c:	2bff      	cmp	r3, #255	; 0xff
   10b1e:	bf28      	it	cs
   10b20:	23ff      	movcs	r3, #255	; 0xff
   10b22:	b2db      	uxtb	r3, r3
   10b24:	732b      	strb	r3, [r5, #12]
    if (sercomEnabled) {
   10b26:	2e00      	cmp	r6, #0
   10b28:	f000 816f 	beq.w	10e0a <_ZN9ClearCore10SerialBase8PortModeENS0_9PortModesE.part.9+0x65a>
    m_serPort->USART.CTRLA.bit.ENABLE = 1;
   10b2c:	682b      	ldr	r3, [r5, #0]
   10b2e:	f043 0302 	orr.w	r3, r3, #2
   10b32:	602b      	str	r3, [r5, #0]
    SYNCBUSY_WAIT(usart, SERCOM_USART_SYNCBUSY_ENABLE);
   10b34:	69eb      	ldr	r3, [r5, #28]
   10b36:	079b      	lsls	r3, r3, #30
   10b38:	d4fc      	bmi.n	10b34 <_ZN9ClearCore10SerialBase8PortModeENS0_9PortModesE.part.9+0x384>
        PMUX_ENABLE(m_txMosiInfo->gpioPort, m_txMosiInfo->gpioPin);
   10b3a:	6a22      	ldr	r2, [r4, #32]
   10b3c:	f992 3001 	ldrsb.w	r3, [r2, #1]
   10b40:	7890      	ldrb	r0, [r2, #2]
   10b42:	01db      	lsls	r3, r3, #7
   10b44:	f103 4282 	add.w	r2, r3, #1090519040	; 0x41000000
   10b48:	f502 4200 	add.w	r2, r2, #32768	; 0x8000
   10b4c:	4402      	add	r2, r0
   10b4e:	f892 1040 	ldrb.w	r1, [r2, #64]	; 0x40
   10b52:	f041 0101 	orr.w	r1, r1, #1
   10b56:	f882 1040 	strb.w	r1, [r2, #64]	; 0x40
    DATA_DIRECTION_OUTPUT(m_rtsSsInfo->gpioPort, 1L << m_rtsSsInfo->gpioPin);
   10b5a:	69a6      	ldr	r6, [r4, #24]
   10b5c:	4a35      	ldr	r2, [pc, #212]	; (10c34 <_ZN9ClearCore10SerialBase8PortModeENS0_9PortModesE.part.9+0x484>)
   10b5e:	f996 1001 	ldrsb.w	r1, [r6, #1]
   10b62:	78b7      	ldrb	r7, [r6, #2]
   10b64:	eb02 11c1 	add.w	r1, r2, r1, lsl #7
   10b68:	2601      	movs	r6, #1
   10b6a:	40be      	lsls	r6, r7
   10b6c:	608e      	str	r6, [r1, #8]
    PMUX_SELECTION(m_ctsMisoInfo->gpioPort, m_ctsMisoInfo->gpioPin,
   10b6e:	6961      	ldr	r1, [r4, #20]
   10b70:	f894 6028 	ldrb.w	r6, [r4, #40]	; 0x28
   10b74:	f891 c002 	ldrb.w	ip, [r1, #2]
   10b78:	f991 e001 	ldrsb.w	lr, [r1, #1]
   10b7c:	f01c 0f01 	tst.w	ip, #1
   10b80:	ea4f 1ece 	mov.w	lr, lr, lsl #7
   10b84:	f000 8108 	beq.w	10d98 <_ZN9ClearCore10SerialBase8PortModeENS0_9PortModesE.part.9+0x5e8>
   10b88:	4472      	add	r2, lr
   10b8a:	eb02 025c 	add.w	r2, r2, ip, lsr #1
   10b8e:	f006 060f 	and.w	r6, r6, #15
   10b92:	f892 1030 	ldrb.w	r1, [r2, #48]	; 0x30
   10b96:	f366 1107 	bfi	r1, r6, #4, #4
   10b9a:	f882 1030 	strb.w	r1, [r2, #48]	; 0x30
    PIN_CONFIGURATION(m_ctsMisoInfo->gpioPort, m_ctsMisoInfo->gpioPin,
   10b9e:	4925      	ldr	r1, [pc, #148]	; (10c34 <_ZN9ClearCore10SerialBase8PortModeENS0_9PortModesE.part.9+0x484>)
   10ba0:	eb01 020e 	add.w	r2, r1, lr
   10ba4:	eb02 0e0c 	add.w	lr, r2, ip
    DATA_DIRECTION_INPUT(m_ctsMisoInfo->gpioPort, 1L << m_ctsMisoInfo->gpioPin);
   10ba8:	2701      	movs	r7, #1
   10baa:	fa07 f70c 	lsl.w	r7, r7, ip
    PIN_CONFIGURATION(m_ctsMisoInfo->gpioPort, m_ctsMisoInfo->gpioPin,
   10bae:	f04f 0803 	mov.w	r8, #3
   10bb2:	f88e 8040 	strb.w	r8, [lr, #64]	; 0x40
    DATA_DIRECTION_INPUT(m_ctsMisoInfo->gpioPort, 1L << m_ctsMisoInfo->gpioPin);
   10bb6:	6057      	str	r7, [r2, #4]
    PMUX_SELECTION(m_rxSckInfo->gpioPort, m_rxSckInfo->gpioPin,
   10bb8:	69e2      	ldr	r2, [r4, #28]
   10bba:	7894      	ldrb	r4, [r2, #2]
   10bbc:	f992 2001 	ldrsb.w	r2, [r2, #1]
   10bc0:	01d2      	lsls	r2, r2, #7
   10bc2:	4411      	add	r1, r2
   10bc4:	eb01 0154 	add.w	r1, r1, r4, lsr #1
   10bc8:	f014 0f01 	tst.w	r4, #1
   10bcc:	f891 7030 	ldrb.w	r7, [r1, #48]	; 0x30
   10bd0:	bf14      	ite	ne
   10bd2:	f366 1707 	bfine	r7, r6, #4, #4
   10bd6:	f366 0703 	bfieq	r7, r6, #0, #4
   10bda:	f881 7030 	strb.w	r7, [r1, #48]	; 0x30
    PIN_CONFIGURATION(m_rxSckInfo->gpioPort, m_rxSckInfo->gpioPin,
   10bde:	4915      	ldr	r1, [pc, #84]	; (10c34 <_ZN9ClearCore10SerialBase8PortModeENS0_9PortModesE.part.9+0x484>)
   10be0:	440a      	add	r2, r1
   10be2:	4422      	add	r2, r4
    PMUX_SELECTION(m_txMosiInfo->gpioPort, m_txMosiInfo->gpioPin,
   10be4:	4419      	add	r1, r3
    PIN_CONFIGURATION(m_rxSckInfo->gpioPort, m_rxSckInfo->gpioPin,
   10be6:	2401      	movs	r4, #1
    PMUX_SELECTION(m_txMosiInfo->gpioPort, m_txMosiInfo->gpioPin,
   10be8:	eb01 0150 	add.w	r1, r1, r0, lsr #1
    PIN_CONFIGURATION(m_rxSckInfo->gpioPort, m_rxSckInfo->gpioPin,
   10bec:	f882 4040 	strb.w	r4, [r2, #64]	; 0x40
    PMUX_SELECTION(m_txMosiInfo->gpioPort, m_txMosiInfo->gpioPin,
   10bf0:	f891 2030 	ldrb.w	r2, [r1, #48]	; 0x30
    PIN_CONFIGURATION(m_txMosiInfo->gpioPort, m_txMosiInfo->gpioPin,
   10bf4:	f103 4382 	add.w	r3, r3, #1090519040	; 0x41000000
    PMUX_SELECTION(m_txMosiInfo->gpioPort, m_txMosiInfo->gpioPin,
   10bf8:	07c4      	lsls	r4, r0, #31
    PIN_CONFIGURATION(m_txMosiInfo->gpioPort, m_txMosiInfo->gpioPin,
   10bfa:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
    PMUX_SELECTION(m_txMosiInfo->gpioPort, m_txMosiInfo->gpioPin,
   10bfe:	bf4c      	ite	mi
   10c00:	f366 1207 	bfimi	r2, r6, #4, #4
   10c04:	f366 0203 	bfipl	r2, r6, #0, #4
    PIN_CONFIGURATION(m_txMosiInfo->gpioPort, m_txMosiInfo->gpioPin,
   10c08:	4403      	add	r3, r0
    PMUX_SELECTION(m_txMosiInfo->gpioPort, m_txMosiInfo->gpioPin,
   10c0a:	f881 2030 	strb.w	r2, [r1, #48]	; 0x30
    PIN_CONFIGURATION(m_txMosiInfo->gpioPort, m_txMosiInfo->gpioPin,
   10c0e:	2201      	movs	r2, #1
   10c10:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    m_serPort->USART.CTRLA.bit.ENABLE = 1;
   10c14:	682b      	ldr	r3, [r5, #0]
   10c16:	f043 0302 	orr.w	r3, r3, #2
   10c1a:	602b      	str	r3, [r5, #0]
   10c1c:	e00c      	b.n	10c38 <_ZN9ClearCore10SerialBase8PortModeENS0_9PortModesE.part.9+0x488>
   10c1e:	bf00      	nop
   10c20:	e000e100 	.word	0xe000e100
   10c24:	40001c00 	.word	0x40001c00
   10c28:	00010295 	.word	0x00010295
   10c2c:	00010171 	.word	0x00010171
   10c30:	004c4b3f 	.word	0x004c4b3f
   10c34:	41008000 	.word	0x41008000
    SYNCBUSY_WAIT(usart, SERCOM_USART_SYNCBUSY_ENABLE);
   10c38:	69eb      	ldr	r3, [r5, #28]
   10c3a:	079b      	lsls	r3, r3, #30
   10c3c:	d4fc      	bmi.n	10c38 <_ZN9ClearCore10SerialBase8PortModeENS0_9PortModesE.part.9+0x488>
    return true;
   10c3e:	2001      	movs	r0, #1
}
   10c40:	b009      	add	sp, #36	; 0x24
   10c42:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
            usart->CTRLA.bit.MODE = 1;
   10c46:	6829      	ldr	r1, [r5, #0]
   10c48:	f36e 0184 	bfi	r1, lr, #2, #3
   10c4c:	6029      	str	r1, [r5, #0]
            usart->CTRLA.bit.SAMPR = 0;
   10c4e:	6829      	ldr	r1, [r5, #0]
   10c50:	f36f 314f 	bfc	r1, #13, #3
   10c54:	6029      	str	r1, [r5, #0]
            usart->CTRLA.bit.CMODE = 0;
   10c56:	6829      	ldr	r1, [r5, #0]
   10c58:	f36f 711c 	bfc	r1, #28, #1
   10c5c:	6029      	str	r1, [r5, #0]
            usart->CTRLA.bit.RXPO = 1;
   10c5e:	6829      	ldr	r1, [r5, #0]
   10c60:	f36e 5115 	bfi	r1, lr, #20, #2
   10c64:	6029      	str	r1, [r5, #0]
    if (m_portMode == UART && m_portOpen) {
   10c66:	f1bc 0f00 	cmp.w	ip, #0
   10c6a:	d104      	bne.n	10c76 <_ZN9ClearCore10SerialBase8PortModeENS0_9PortModesE.part.9+0x4c6>
   10c6c:	f894 1029 	ldrb.w	r1, [r4, #41]	; 0x29
   10c70:	2900      	cmp	r1, #0
   10c72:	f040 81af 	bne.w	10fd4 <_ZN9ClearCore10SerialBase8PortModeENS0_9PortModesE.part.9+0x824>
            usart->CTRLB.bit.CHSIZE =
   10c76:	686b      	ldr	r3, [r5, #4]
                m_charSize & SERCOM_USART_CTRLB_CHSIZE_Msk;
   10c78:	79a2      	ldrb	r2, [r4, #6]
            usart->CTRLB.bit.CHSIZE =
   10c7a:	f362 0302 	bfi	r3, r2, #0, #3
   10c7e:	606b      	str	r3, [r5, #4]
            usart->CTRLA.bit.DORD = 1;
   10c80:	682b      	ldr	r3, [r5, #0]
   10c82:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
   10c86:	602b      	str	r3, [r5, #0]
            if (m_parity != PARITY_N) {
   10c88:	7923      	ldrb	r3, [r4, #4]
   10c8a:	2b02      	cmp	r3, #2
   10c8c:	f000 817c 	beq.w	10f88 <_ZN9ClearCore10SerialBase8PortModeENS0_9PortModesE.part.9+0x7d8>
                usart->CTRLA.bit.FORM = 1;
   10c90:	682a      	ldr	r2, [r5, #0]
   10c92:	2101      	movs	r1, #1
   10c94:	f361 621b 	bfi	r2, r1, #24, #4
   10c98:	602a      	str	r2, [r5, #0]
                usart->CTRLB.bit.PMODE = m_parity;
   10c9a:	686a      	ldr	r2, [r5, #4]
   10c9c:	f363 324d 	bfi	r2, r3, #13, #1
   10ca0:	606a      	str	r2, [r5, #4]
            usart->CTRLB.bit.SBMODE = m_stopBits - 1;
   10ca2:	7963      	ldrb	r3, [r4, #5]
   10ca4:	686a      	ldr	r2, [r5, #4]
   10ca6:	3b01      	subs	r3, #1
   10ca8:	f363 1286 	bfi	r2, r3, #6, #1
   10cac:	606a      	str	r2, [r5, #4]
            usart->CTRLB.bit.RXEN = 1;
   10cae:	686b      	ldr	r3, [r5, #4]
   10cb0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
   10cb4:	606b      	str	r3, [r5, #4]
            usart->CTRLB.bit.TXEN = 1;
   10cb6:	686b      	ldr	r3, [r5, #4]
   10cb8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
   10cbc:	606b      	str	r3, [r5, #4]
            usart->CTRLB.bit.SFDE = 0;
   10cbe:	686b      	ldr	r3, [r5, #4]
            usart->INTENSET.reg =
   10cc0:	2284      	movs	r2, #132	; 0x84
            usart->CTRLB.bit.SFDE = 0;
   10cc2:	f36f 2349 	bfc	r3, #9, #1
   10cc6:	606b      	str	r3, [r5, #4]
            usart->INTENSET.reg =
   10cc8:	75aa      	strb	r2, [r5, #22]
            SYNCBUSY_WAIT(usart, SERCOM_USART_SYNCBUSY_CTRLB);
   10cca:	69eb      	ldr	r3, [r5, #28]
   10ccc:	075b      	lsls	r3, r3, #29
   10cce:	d4fc      	bmi.n	10cca <_ZN9ClearCore10SerialBase8PortModeENS0_9PortModesE.part.9+0x51a>
            m_dreIrqN = (IRQn_Type)(IdNvic + SERCOM_USART_INTFLAG_DRE_Pos);
   10cd0:	f8bd 200c 	ldrh.w	r2, [sp, #12]
   10cd4:	85a2      	strh	r2, [r4, #44]	; 0x2c
  NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
   10cd6:	4bb7      	ldr	r3, [pc, #732]	; (10fb4 <_ZN9ClearCore10SerialBase8PortModeENS0_9PortModesE.part.9+0x804>)
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   10cd8:	9a04      	ldr	r2, [sp, #16]
   10cda:	441a      	add	r2, r3
   10cdc:	4610      	mov	r0, r2
   10cde:	9a05      	ldr	r2, [sp, #20]
   10ce0:	eb03 0109 	add.w	r1, r3, r9
   10ce4:	441a      	add	r2, r3
  NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
   10ce6:	46be      	mov	lr, r7
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   10ce8:	4615      	mov	r5, r2
  NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
   10cea:	9f00      	ldr	r7, [sp, #0]
   10cec:	f843 702e 	str.w	r7, [r3, lr, lsl #2]
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   10cf0:	2220      	movs	r2, #32
   10cf2:	f881 2300 	strb.w	r2, [r1, #768]	; 0x300
  NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
   10cf6:	9901      	ldr	r1, [sp, #4]
   10cf8:	f843 1026 	str.w	r1, [r3, r6, lsl #2]
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   10cfc:	f880 2300 	strb.w	r2, [r0, #768]	; 0x300
  NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
   10d00:	9a02      	ldr	r2, [sp, #8]
   10d02:	f843 2026 	str.w	r2, [r3, r6, lsl #2]
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   10d06:	f04f 0ee0 	mov.w	lr, #224	; 0xe0
   10d0a:	f885 e300 	strb.w	lr, [r5, #768]	; 0x300
            PMUX_SELECTION(m_rtsSsInfo->gpioPort, m_rtsSsInfo->gpioPin,
   10d0e:	69a3      	ldr	r3, [r4, #24]
   10d10:	f894 5028 	ldrb.w	r5, [r4, #40]	; 0x28
   10d14:	789a      	ldrb	r2, [r3, #2]
   10d16:	f993 3001 	ldrsb.w	r3, [r3, #1]
   10d1a:	01db      	lsls	r3, r3, #7
   10d1c:	f103 4182 	add.w	r1, r3, #1090519040	; 0x41000000
   10d20:	f501 4100 	add.w	r1, r1, #32768	; 0x8000
   10d24:	eb01 0152 	add.w	r1, r1, r2, lsr #1
   10d28:	07d6      	lsls	r6, r2, #31
   10d2a:	f891 0030 	ldrb.w	r0, [r1, #48]	; 0x30
   10d2e:	bf4c      	ite	mi
   10d30:	f365 1007 	bfimi	r0, r5, #4, #4
   10d34:	f365 0003 	bfipl	r0, r5, #0, #4
   10d38:	f881 0030 	strb.w	r0, [r1, #48]	; 0x30
            RtsMode(m_rtsMode);
   10d3c:	7ae1      	ldrb	r1, [r4, #11]
    switch (mode) {
   10d3e:	2901      	cmp	r1, #1
   10d40:	f240 80c7 	bls.w	10ed2 <_ZN9ClearCore10SerialBase8PortModeENS0_9PortModesE.part.9+0x722>
   10d44:	2902      	cmp	r1, #2
   10d46:	d10a      	bne.n	10d5e <_ZN9ClearCore10SerialBase8PortModeENS0_9PortModesE.part.9+0x5ae>
            PMUX_ENABLE(m_rtsSsInfo->gpioPort, m_rtsSsInfo->gpioPin);
   10d48:	f103 4382 	add.w	r3, r3, #1090519040	; 0x41000000
   10d4c:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
   10d50:	4413      	add	r3, r2
   10d52:	f893 2040 	ldrb.w	r2, [r3, #64]	; 0x40
   10d56:	f042 0201 	orr.w	r2, r2, #1
   10d5a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
            SET_CLOCK_SOURCE(clockId, __SERCOM_USART_CLOCK_INDEX);
   10d5e:	f10a 0e20 	add.w	lr, sl, #32
   10d62:	4a95      	ldr	r2, [pc, #596]	; (10fb8 <_ZN9ClearCore10SerialBase8PortModeENS0_9PortModesE.part.9+0x808>)
   10d64:	f852 302e 	ldr.w	r3, [r2, lr, lsl #2]
   10d68:	f36f 1386 	bfc	r3, #6, #1
   10d6c:	f842 302e 	str.w	r3, [r2, lr, lsl #2]
   10d70:	f852 302e 	ldr.w	r3, [r2, lr, lsl #2]
   10d74:	f3c3 1380 	ubfx	r3, r3, #6, #1
   10d78:	2b00      	cmp	r3, #0
   10d7a:	d1f9      	bne.n	10d70 <_ZN9ClearCore10SerialBase8PortModeENS0_9PortModesE.part.9+0x5c0>
   10d7c:	f852 102e 	ldr.w	r1, [r2, lr, lsl #2]
   10d80:	f363 0103 	bfi	r1, r3, #0, #4
   10d84:	f842 102e 	str.w	r1, [r2, lr, lsl #2]
   10d88:	f852 302e 	ldr.w	r3, [r2, lr, lsl #2]
   10d8c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   10d90:	f842 302e 	str.w	r3, [r2, lr, lsl #2]
   10d94:	6853      	ldr	r3, [r2, #4]
   10d96:	e679      	b.n	10a8c <_ZN9ClearCore10SerialBase8PortModeENS0_9PortModesE.part.9+0x2dc>
    PMUX_SELECTION(m_ctsMisoInfo->gpioPort, m_ctsMisoInfo->gpioPin,
   10d98:	eb02 010e 	add.w	r1, r2, lr
   10d9c:	eb01 015c 	add.w	r1, r1, ip, lsr #1
   10da0:	f006 060f 	and.w	r6, r6, #15
   10da4:	f891 2030 	ldrb.w	r2, [r1, #48]	; 0x30
   10da8:	f366 0203 	bfi	r2, r6, #0, #4
   10dac:	f881 2030 	strb.w	r2, [r1, #48]	; 0x30
   10db0:	e6f5      	b.n	10b9e <_ZN9ClearCore10SerialBase8PortModeENS0_9PortModesE.part.9+0x3ee>
                65536 * (1 - (16.0 * bitsPerSecond / __SERCOM_USART_CLOCK));
   10db2:	4648      	mov	r0, r9
   10db4:	f014 fb1c 	bl	253f0 <__aeabi_ui2d>
   10db8:	2200      	movs	r2, #0
   10dba:	4b80      	ldr	r3, [pc, #512]	; (10fbc <_ZN9ClearCore10SerialBase8PortModeENS0_9PortModesE.part.9+0x80c>)
   10dbc:	f014 fb8e 	bl	254dc <__aeabi_dmul>
   10dc0:	4b7f      	ldr	r3, [pc, #508]	; (10fc0 <_ZN9ClearCore10SerialBase8PortModeENS0_9PortModesE.part.9+0x810>)
   10dc2:	4680      	mov	r8, r0
   10dc4:	6818      	ldr	r0, [r3, #0]
   10dc6:	4689      	mov	r9, r1
   10dc8:	f014 fb12 	bl	253f0 <__aeabi_ui2d>
   10dcc:	4602      	mov	r2, r0
   10dce:	460b      	mov	r3, r1
   10dd0:	4640      	mov	r0, r8
   10dd2:	4649      	mov	r1, r9
   10dd4:	f014 fcac 	bl	25730 <__aeabi_ddiv>
   10dd8:	4602      	mov	r2, r0
   10dda:	460b      	mov	r3, r1
   10ddc:	2000      	movs	r0, #0
   10dde:	4979      	ldr	r1, [pc, #484]	; (10fc4 <_ZN9ClearCore10SerialBase8PortModeENS0_9PortModesE.part.9+0x814>)
   10de0:	f014 f9c8 	bl	25174 <__aeabi_dsub>
   10de4:	2200      	movs	r2, #0
   10de6:	4b78      	ldr	r3, [pc, #480]	; (10fc8 <_ZN9ClearCore10SerialBase8PortModeENS0_9PortModesE.part.9+0x818>)
   10de8:	f014 fb78 	bl	254dc <__aeabi_dmul>
   10dec:	f014 fe58 	bl	25aa0 <__aeabi_d2f>
            m_serPort->USART.BAUD.bit.BAUD = (uint16_t)(baudFloat + 0.5);
   10df0:	f014 fb20 	bl	25434 <__aeabi_f2d>
   10df4:	2200      	movs	r2, #0
   10df6:	4b75      	ldr	r3, [pc, #468]	; (10fcc <_ZN9ClearCore10SerialBase8PortModeENS0_9PortModesE.part.9+0x81c>)
   10df8:	f014 f9be 	bl	25178 <__adddf3>
   10dfc:	f014 fe30 	bl	25a60 <__aeabi_d2uiz>
   10e00:	b280      	uxth	r0, r0
   10e02:	81a8      	strh	r0, [r5, #12]
    if (sercomEnabled) {
   10e04:	2e00      	cmp	r6, #0
   10e06:	f47f ae91 	bne.w	10b2c <_ZN9ClearCore10SerialBase8PortModeENS0_9PortModesE.part.9+0x37c>
   10e0a:	6a22      	ldr	r2, [r4, #32]
   10e0c:	f992 3001 	ldrsb.w	r3, [r2, #1]
   10e10:	7890      	ldrb	r0, [r2, #2]
   10e12:	01db      	lsls	r3, r3, #7
   10e14:	e6a1      	b.n	10b5a <_ZN9ClearCore10SerialBase8PortModeENS0_9PortModesE.part.9+0x3aa>
    Speed(m_baudRate);
   10e16:	4649      	mov	r1, r9
   10e18:	4620      	mov	r0, r4
   10e1a:	4798      	blx	r3
   10e1c:	6a22      	ldr	r2, [r4, #32]
   10e1e:	6925      	ldr	r5, [r4, #16]
   10e20:	f992 3001 	ldrsb.w	r3, [r2, #1]
   10e24:	7890      	ldrb	r0, [r2, #2]
   10e26:	01db      	lsls	r3, r3, #7
   10e28:	e697      	b.n	10b5a <_ZN9ClearCore10SerialBase8PortModeENS0_9PortModesE.part.9+0x3aa>
        m_dmaTxChannel = DMA_INVALID_CHANNEL;
   10e2a:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
   10e2e:	9207      	str	r2, [sp, #28]
   10e30:	9206      	str	r2, [sp, #24]
   10e32:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
   10e36:	9202      	str	r2, [sp, #8]
   10e38:	2239      	movs	r2, #57	; 0x39
   10e3a:	9205      	str	r2, [sp, #20]
   10e3c:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
   10e40:	9201      	str	r2, [sp, #4]
   10e42:	2238      	movs	r2, #56	; 0x38
        m_dmaRxChannel = DMA_INVALID_CHANNEL;
   10e44:	2007      	movs	r0, #7
        m_dmaTxChannel = DMA_INVALID_CHANNEL;
   10e46:	2601      	movs	r6, #1
   10e48:	f04f 0936 	mov.w	r9, #54	; 0x36
   10e4c:	9204      	str	r2, [sp, #16]
   10e4e:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
        m_dmaRxChannel = DMA_INVALID_CHANNEL;
   10e52:	f884 002e 	strb.w	r0, [r4, #46]	; 0x2e
        m_dmaTxChannel = DMA_INVALID_CHANNEL;
   10e56:	f884 002f 	strb.w	r0, [r4, #47]	; 0x2f
   10e5a:	4637      	mov	r7, r6
        IdNvic = SERCOM2_0_IRQn;
   10e5c:	f8cd 900c 	str.w	r9, [sp, #12]
        m_dmaTxChannel = DMA_INVALID_CHANNEL;
   10e60:	f04f 0a17 	mov.w	sl, #23
   10e64:	9200      	str	r2, [sp, #0]
   10e66:	e53a      	b.n	108de <_ZN9ClearCore10SerialBase8PortModeENS0_9PortModesE.part.9+0x12e>
            DATA_OUTPUT_STATE(m_rtsSsInfo->gpioPort,
   10e68:	2900      	cmp	r1, #0
   10e6a:	f040 8092 	bne.w	10f92 <_ZN9ClearCore10SerialBase8PortModeENS0_9PortModesE.part.9+0x7e2>
   10e6e:	f103 4182 	add.w	r1, r3, #1090519040	; 0x41000000
   10e72:	f501 4100 	add.w	r1, r1, #32768	; 0x8000
   10e76:	2501      	movs	r5, #1
   10e78:	4095      	lsls	r5, r2
   10e7a:	618d      	str	r5, [r1, #24]
            PMUX_DISABLE(m_rtsSsInfo->gpioPort, m_rtsSsInfo->gpioPin);
   10e7c:	f103 4382 	add.w	r3, r3, #1090519040	; 0x41000000
   10e80:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
   10e84:	4413      	add	r3, r2
   10e86:	f893 2040 	ldrb.w	r2, [r3, #64]	; 0x40
   10e8a:	f36f 0200 	bfc	r2, #0, #1
   10e8e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
   10e92:	e5c7      	b.n	10a24 <_ZN9ClearCore10SerialBase8PortModeENS0_9PortModesE.part.9+0x274>
        m_dmaTxChannel = DMA_INVALID_CHANNEL;
   10e94:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
   10e98:	9207      	str	r2, [sp, #28]
   10e9a:	9206      	str	r2, [sp, #24]
   10e9c:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
   10ea0:	9202      	str	r2, [sp, #8]
   10ea2:	223d      	movs	r2, #61	; 0x3d
   10ea4:	9205      	str	r2, [sp, #20]
   10ea6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
   10eaa:	9201      	str	r2, [sp, #4]
   10eac:	223c      	movs	r2, #60	; 0x3c
        m_dmaRxChannel = DMA_INVALID_CHANNEL;
   10eae:	2007      	movs	r0, #7
        m_dmaTxChannel = DMA_INVALID_CHANNEL;
   10eb0:	2601      	movs	r6, #1
   10eb2:	f04f 093a 	mov.w	r9, #58	; 0x3a
   10eb6:	9204      	str	r2, [sp, #16]
   10eb8:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
        m_dmaRxChannel = DMA_INVALID_CHANNEL;
   10ebc:	f884 002e 	strb.w	r0, [r4, #46]	; 0x2e
        m_dmaTxChannel = DMA_INVALID_CHANNEL;
   10ec0:	f884 002f 	strb.w	r0, [r4, #47]	; 0x2f
   10ec4:	4637      	mov	r7, r6
        IdNvic = SERCOM3_0_IRQn;
   10ec6:	f8cd 900c 	str.w	r9, [sp, #12]
        m_dmaTxChannel = DMA_INVALID_CHANNEL;
   10eca:	f04f 0a18 	mov.w	sl, #24
   10ece:	9200      	str	r2, [sp, #0]
   10ed0:	e505      	b.n	108de <_ZN9ClearCore10SerialBase8PortModeENS0_9PortModesE.part.9+0x12e>
            DATA_OUTPUT_STATE(m_rtsSsInfo->gpioPort,
   10ed2:	2900      	cmp	r1, #0
   10ed4:	d165      	bne.n	10fa2 <_ZN9ClearCore10SerialBase8PortModeENS0_9PortModesE.part.9+0x7f2>
   10ed6:	f103 4182 	add.w	r1, r3, #1090519040	; 0x41000000
   10eda:	f501 4100 	add.w	r1, r1, #32768	; 0x8000
   10ede:	2001      	movs	r0, #1
   10ee0:	4090      	lsls	r0, r2
   10ee2:	6188      	str	r0, [r1, #24]
            PMUX_DISABLE(m_rtsSsInfo->gpioPort, m_rtsSsInfo->gpioPin);
   10ee4:	f103 4382 	add.w	r3, r3, #1090519040	; 0x41000000
   10ee8:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
   10eec:	4413      	add	r3, r2
   10eee:	f893 2040 	ldrb.w	r2, [r3, #64]	; 0x40
   10ef2:	f36f 0200 	bfc	r2, #0, #1
   10ef6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
   10efa:	e730      	b.n	10d5e <_ZN9ClearCore10SerialBase8PortModeENS0_9PortModesE.part.9+0x5ae>
    FlushInput();
   10efc:	4620      	mov	r0, r4
   10efe:	4798      	blx	r3
   10f00:	6925      	ldr	r5, [r4, #16]
   10f02:	e602      	b.n	10b0a <_ZN9ClearCore10SerialBase8PortModeENS0_9PortModesE.part.9+0x35a>
    Flush();
   10f04:	4620      	mov	r0, r4
   10f06:	4790      	blx	r2
   10f08:	6820      	ldr	r0, [r4, #0]
   10f0a:	e5f0      	b.n	10aee <_ZN9ClearCore10SerialBase8PortModeENS0_9PortModesE.part.9+0x33e>
        m_dmaTxChannel = DMA_SERCOM7_SPI_TX;
   10f0c:	2205      	movs	r2, #5
   10f0e:	f884 202f 	strb.w	r2, [r4, #47]	; 0x2f
   10f12:	f44f 5200 	mov.w	r2, #8192	; 0x2000
   10f16:	9202      	str	r2, [sp, #8]
   10f18:	224d      	movs	r2, #77	; 0x4d
   10f1a:	492d      	ldr	r1, [pc, #180]	; (10fd0 <_ZN9ClearCore10SerialBase8PortModeENS0_9PortModesE.part.9+0x820>)
   10f1c:	9205      	str	r2, [sp, #20]
   10f1e:	f44f 5280 	mov.w	r2, #4096	; 0x1000
   10f22:	9201      	str	r2, [sp, #4]
   10f24:	224c      	movs	r2, #76	; 0x4c
        m_dmaRxChannel = DMA_SERCOM7_SPI_RX;
   10f26:	2004      	movs	r0, #4
        m_dmaTxChannel = DMA_SERCOM7_SPI_TX;
   10f28:	2602      	movs	r6, #2
   10f2a:	f04f 094a 	mov.w	r9, #74	; 0x4a
   10f2e:	9107      	str	r1, [sp, #28]
   10f30:	9204      	str	r2, [sp, #16]
   10f32:	f5a1 7180 	sub.w	r1, r1, #256	; 0x100
   10f36:	f44f 6280 	mov.w	r2, #1024	; 0x400
   10f3a:	9106      	str	r1, [sp, #24]
        m_dmaRxChannel = DMA_SERCOM7_SPI_RX;
   10f3c:	f884 002e 	strb.w	r0, [r4, #46]	; 0x2e
        m_dmaTxChannel = DMA_SERCOM7_SPI_TX;
   10f40:	4637      	mov	r7, r6
        IdNvic = SERCOM7_0_IRQn;
   10f42:	f8cd 900c 	str.w	r9, [sp, #12]
        m_dmaTxChannel = DMA_SERCOM7_SPI_TX;
   10f46:	f04f 0a25 	mov.w	sl, #37	; 0x25
   10f4a:	9200      	str	r2, [sp, #0]
   10f4c:	e4c7      	b.n	108de <_ZN9ClearCore10SerialBase8PortModeENS0_9PortModesE.part.9+0x12e>
        m_dmaTxChannel = DMA_INVALID_CHANNEL;
   10f4e:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
   10f52:	9207      	str	r2, [sp, #28]
   10f54:	9206      	str	r2, [sp, #24]
   10f56:	2241      	movs	r2, #65	; 0x41
   10f58:	9205      	str	r2, [sp, #20]
   10f5a:	2240      	movs	r2, #64	; 0x40
   10f5c:	2601      	movs	r6, #1
        m_dmaRxChannel = DMA_INVALID_CHANNEL;
   10f5e:	2007      	movs	r0, #7
        m_dmaTxChannel = DMA_INVALID_CHANNEL;
   10f60:	2102      	movs	r1, #2
   10f62:	f04f 093e 	mov.w	r9, #62	; 0x3e
   10f66:	9204      	str	r2, [sp, #16]
   10f68:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
   10f6c:	4637      	mov	r7, r6
   10f6e:	9601      	str	r6, [sp, #4]
   10f70:	9102      	str	r1, [sp, #8]
        m_dmaRxChannel = DMA_INVALID_CHANNEL;
   10f72:	f884 002e 	strb.w	r0, [r4, #46]	; 0x2e
        m_dmaTxChannel = DMA_INVALID_CHANNEL;
   10f76:	f884 002f 	strb.w	r0, [r4, #47]	; 0x2f
   10f7a:	460e      	mov	r6, r1
        IdNvic = SERCOM4_0_IRQn;
   10f7c:	f8cd 900c 	str.w	r9, [sp, #12]
        m_dmaTxChannel = DMA_INVALID_CHANNEL;
   10f80:	f04f 0a22 	mov.w	sl, #34	; 0x22
   10f84:	9200      	str	r2, [sp, #0]
   10f86:	e4aa      	b.n	108de <_ZN9ClearCore10SerialBase8PortModeENS0_9PortModesE.part.9+0x12e>
                usart->CTRLA.bit.FORM = 0;
   10f88:	682b      	ldr	r3, [r5, #0]
   10f8a:	f36f 631b 	bfc	r3, #24, #4
   10f8e:	602b      	str	r3, [r5, #0]
   10f90:	e687      	b.n	10ca2 <_ZN9ClearCore10SerialBase8PortModeENS0_9PortModesE.part.9+0x4f2>
            DATA_OUTPUT_STATE(m_rtsSsInfo->gpioPort,
   10f92:	f103 4182 	add.w	r1, r3, #1090519040	; 0x41000000
   10f96:	f501 4100 	add.w	r1, r1, #32768	; 0x8000
   10f9a:	2501      	movs	r5, #1
   10f9c:	4095      	lsls	r5, r2
   10f9e:	614d      	str	r5, [r1, #20]
   10fa0:	e76c      	b.n	10e7c <_ZN9ClearCore10SerialBase8PortModeENS0_9PortModesE.part.9+0x6cc>
   10fa2:	f103 4182 	add.w	r1, r3, #1090519040	; 0x41000000
   10fa6:	f501 4100 	add.w	r1, r1, #32768	; 0x8000
   10faa:	2001      	movs	r0, #1
   10fac:	4090      	lsls	r0, r2
   10fae:	6148      	str	r0, [r1, #20]
   10fb0:	e798      	b.n	10ee4 <_ZN9ClearCore10SerialBase8PortModeENS0_9PortModesE.part.9+0x734>
   10fb2:	bf00      	nop
   10fb4:	e000e100 	.word	0xe000e100
   10fb8:	40001c00 	.word	0x40001c00
   10fbc:	40300000 	.word	0x40300000
   10fc0:	200000e4 	.word	0x200000e4
   10fc4:	3ff00000 	.word	0x3ff00000
   10fc8:	40f00000 	.word	0x40f00000
   10fcc:	3fe00000 	.word	0x3fe00000
   10fd0:	00201300 	.word	0x00201300
    PMUX_DISABLE(m_txMosiInfo->gpioPort, m_txMosiInfo->gpioPin);
   10fd4:	445a      	add	r2, fp
        bool sercomEnabled = m_serPort->USART.CTRLA.bit.ENABLE;
   10fd6:	6818      	ldr	r0, [r3, #0]
    PMUX_DISABLE(m_txMosiInfo->gpioPort, m_txMosiInfo->gpioPin);
   10fd8:	f892 1040 	ldrb.w	r1, [r2, #64]	; 0x40
   10fdc:	f36c 0100 	bfi	r1, ip, #0, #1
   10fe0:	f882 1040 	strb.w	r1, [r2, #64]	; 0x40
    if (m_serPort->USART.CTRLA.bit.ENABLE) {
   10fe4:	681a      	ldr	r2, [r3, #0]
        bool sercomEnabled = m_serPort->USART.CTRLA.bit.ENABLE;
   10fe6:	f3c0 0b40 	ubfx	fp, r0, #1, #1
    if (m_serPort->USART.CTRLA.bit.ENABLE) {
   10fea:	0790      	lsls	r0, r2, #30
   10fec:	d503      	bpl.n	10ff6 <_ZN9ClearCore10SerialBase8PortModeENS0_9PortModesE.part.9+0x846>
        m_serPort->USART.CTRLA.bit.ENABLE = 0;
   10fee:	681a      	ldr	r2, [r3, #0]
   10ff0:	f36c 0241 	bfi	r2, ip, #1, #1
   10ff4:	601a      	str	r2, [r3, #0]
    SYNCBUSY_WAIT(usart, SERCOM_USART_SYNCBUSY_ENABLE);
   10ff6:	69da      	ldr	r2, [r3, #28]
   10ff8:	f012 0202 	ands.w	r2, r2, #2
   10ffc:	d1fb      	bne.n	10ff6 <_ZN9ClearCore10SerialBase8PortModeENS0_9PortModesE.part.9+0x846>
    Flush();
   10ffe:	6821      	ldr	r1, [r4, #0]
   11000:	680b      	ldr	r3, [r1, #0]
   11002:	4543      	cmp	r3, r8
   11004:	d13b      	bne.n	1107e <_ZN9ClearCore10SerialBase8PortModeENS0_9PortModesE.part.9+0x8ce>
    m_outTail = 0;
   11006:	f8c4 213c 	str.w	r2, [r4, #316]	; 0x13c
    m_bufferOut[0] = 0;
   1100a:	f8a4 20b0 	strh.w	r2, [r4, #176]	; 0xb0
    m_outHead = 0;
   1100e:	f8c4 2138 	str.w	r2, [r4, #312]	; 0x138
    FlushInput();
   11012:	684b      	ldr	r3, [r1, #4]
   11014:	4a1c      	ldr	r2, [pc, #112]	; (11088 <_ZN9ClearCore10SerialBase8PortModeENS0_9PortModesE.part.9+0x8d8>)
   11016:	4293      	cmp	r3, r2
   11018:	d12d      	bne.n	11076 <_ZN9ClearCore10SerialBase8PortModeENS0_9PortModesE.part.9+0x8c6>
    m_serPort->USART.INTENSET.reg = SERCOM_USART_INTENSET_RXC;
   1101a:	6922      	ldr	r2, [r4, #16]
    m_bufferIn[0] = 0;
   1101c:	2300      	movs	r3, #0
    m_serPort->USART.INTENSET.reg = SERCOM_USART_INTENSET_RXC;
   1101e:	2104      	movs	r1, #4
    m_inTail = 0;
   11020:	f8c4 3134 	str.w	r3, [r4, #308]	; 0x134
    m_bufferIn[0] = 0;
   11024:	8623      	strh	r3, [r4, #48]	; 0x30
    m_inHead = 0;
   11026:	f8c4 3130 	str.w	r3, [r4, #304]	; 0x130
    m_serPort->USART.INTENSET.reg = SERCOM_USART_INTENSET_RXC;
   1102a:	7591      	strb	r1, [r2, #22]
        m_serPort->USART.CTRLA.bit.TXPO = m_flowControl ? 2 : 0;
   1102c:	7b21      	ldrb	r1, [r4, #12]
   1102e:	6813      	ldr	r3, [r2, #0]
   11030:	2900      	cmp	r1, #0
   11032:	bf0c      	ite	eq
   11034:	2100      	moveq	r1, #0
   11036:	2102      	movne	r1, #2
   11038:	f361 4311 	bfi	r3, r1, #16, #2
   1103c:	6013      	str	r3, [r2, #0]
        if (sercomEnabled) {
   1103e:	f1bb 0f00 	cmp.w	fp, #0
   11042:	f43f ae18 	beq.w	10c76 <_ZN9ClearCore10SerialBase8PortModeENS0_9PortModesE.part.9+0x4c6>
    m_serPort->USART.CTRLA.bit.ENABLE = 1;
   11046:	6813      	ldr	r3, [r2, #0]
   11048:	f043 0302 	orr.w	r3, r3, #2
   1104c:	6013      	str	r3, [r2, #0]
    SYNCBUSY_WAIT(usart, SERCOM_USART_SYNCBUSY_ENABLE);
   1104e:	69d3      	ldr	r3, [r2, #28]
   11050:	0799      	lsls	r1, r3, #30
   11052:	d4fc      	bmi.n	1104e <_ZN9ClearCore10SerialBase8PortModeENS0_9PortModesE.part.9+0x89e>
        PMUX_ENABLE(m_txMosiInfo->gpioPort, m_txMosiInfo->gpioPin);
   11054:	6a23      	ldr	r3, [r4, #32]
   11056:	f993 2001 	ldrsb.w	r2, [r3, #1]
   1105a:	789b      	ldrb	r3, [r3, #2]
   1105c:	eb03 13c2 	add.w	r3, r3, r2, lsl #7
   11060:	f103 4382 	add.w	r3, r3, #1090519040	; 0x41000000
   11064:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
   11068:	f893 2040 	ldrb.w	r2, [r3, #64]	; 0x40
   1106c:	f042 0201 	orr.w	r2, r2, #1
   11070:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
   11074:	e5ff      	b.n	10c76 <_ZN9ClearCore10SerialBase8PortModeENS0_9PortModesE.part.9+0x4c6>
    FlushInput();
   11076:	4620      	mov	r0, r4
   11078:	4798      	blx	r3
   1107a:	6922      	ldr	r2, [r4, #16]
   1107c:	e7d6      	b.n	1102c <_ZN9ClearCore10SerialBase8PortModeENS0_9PortModesE.part.9+0x87c>
    Flush();
   1107e:	4620      	mov	r0, r4
   11080:	4798      	blx	r3
   11082:	6821      	ldr	r1, [r4, #0]
   11084:	e7c5      	b.n	11012 <_ZN9ClearCore10SerialBase8PortModeENS0_9PortModesE.part.9+0x862>
   11086:	bf00      	nop
   11088:	00010171 	.word	0x00010171

0001108c <_ZN9ClearCore10SerialBase8PortOpenEv>:
    if (!m_portOpen) {
   1108c:	f890 2029 	ldrb.w	r2, [r0, #41]	; 0x29
   11090:	b92a      	cbnz	r2, 1109e <_ZN9ClearCore10SerialBase8PortOpenEv+0x12>
    if (newMode != SPI && newMode != UART) {
   11092:	79c2      	ldrb	r2, [r0, #7]
        m_portOpen = true;
   11094:	2101      	movs	r1, #1
    if (newMode != SPI && newMode != UART) {
   11096:	428a      	cmp	r2, r1
        m_portOpen = true;
   11098:	f880 1029 	strb.w	r1, [r0, #41]	; 0x29
    if (newMode != SPI && newMode != UART) {
   1109c:	d900      	bls.n	110a0 <_ZN9ClearCore10SerialBase8PortOpenEv+0x14>
   1109e:	4770      	bx	lr
   110a0:	f7ff bb86 	b.w	107b0 <_ZN9ClearCore10SerialBase8PortModeENS0_9PortModesE.part.9>

000110a4 <_ZN9ClearCore10SerialBaseC1EPK15PeripheralRouteS3_S3_S3_h>:
SerialBase::SerialBase(const PeripheralRoute *ctsMisoInfo,
   110a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   110a6:	4604      	mov	r4, r0
      m_outHead(0), m_outTail(0) {
   110a8:	4f20      	ldr	r7, [pc, #128]	; (1112c <_ZN9ClearCore10SerialBaseC1EPK15PeripheralRouteS3_S3_S3_h+0x88>)
   110aa:	6182      	str	r2, [r0, #24]
   110ac:	61c3      	str	r3, [r0, #28]
   110ae:	4d20      	ldr	r5, [pc, #128]	; (11130 <_ZN9ClearCore10SerialBaseC1EPK15PeripheralRouteS3_S3_S3_h+0x8c>)
   110b0:	60a7      	str	r7, [r4, #8]
   110b2:	9f06      	ldr	r7, [sp, #24]
   110b4:	f8df c080 	ldr.w	ip, [pc, #128]	; 11138 <_ZN9ClearCore10SerialBaseC1EPK15PeripheralRouteS3_S3_S3_h+0x94>
SerialBase::SerialBase(const PeripheralRoute *ctsMisoInfo,
   110b8:	f89d 001c 	ldrb.w	r0, [sp, #28]
      m_outHead(0), m_outTail(0) {
   110bc:	6065      	str	r5, [r4, #4]
   110be:	2307      	movs	r3, #7
   110c0:	2500      	movs	r5, #0
SerialBase::SerialBase(const PeripheralRoute *ctsMisoInfo,
   110c2:	460e      	mov	r6, r1
      m_outHead(0), m_outTail(0) {
   110c4:	6227      	str	r7, [r4, #32]
   110c6:	f44f 5116 	mov.w	r1, #9600	; 0x2580
   110ca:	2780      	movs	r7, #128	; 0x80
   110cc:	f64f 72ff 	movw	r2, #65535	; 0xffff
   110d0:	f884 302e 	strb.w	r3, [r4, #46]	; 0x2e
   110d4:	f884 302f 	strb.w	r3, [r4, #47]	; 0x2f
   110d8:	f8c4 c000 	str.w	ip, [r4]
   110dc:	6261      	str	r1, [r4, #36]	; 0x24
   110de:	f884 0028 	strb.w	r0, [r4, #40]	; 0x28
   110e2:	85a2      	strh	r2, [r4, #44]	; 0x2c
   110e4:	4629      	mov	r1, r5
   110e6:	463a      	mov	r2, r7
   110e8:	6166      	str	r6, [r4, #20]
   110ea:	7325      	strb	r5, [r4, #12]
   110ec:	f884 5029 	strb.w	r5, [r4, #41]	; 0x29
   110f0:	f884 502a 	strb.w	r5, [r4, #42]	; 0x2a
   110f4:	f104 0030 	add.w	r0, r4, #48	; 0x30
   110f8:	f016 feb0 	bl	27e5c <memset>
   110fc:	463a      	mov	r2, r7
   110fe:	4629      	mov	r1, r5
   11100:	f104 00b0 	add.w	r0, r4, #176	; 0xb0
   11104:	f016 feaa 	bl	27e5c <memset>
   11108:	f8c4 5130 	str.w	r5, [r4, #304]	; 0x130
            reg = 0;
   1110c:	f8c4 5140 	str.w	r5, [r4, #320]	; 0x140
   11110:	f8c4 5134 	str.w	r5, [r4, #308]	; 0x134
   11114:	f8c4 5138 	str.w	r5, [r4, #312]	; 0x138
   11118:	f8c4 513c 	str.w	r5, [r4, #316]	; 0x13c
    m_serPort = sercom_instances[ctsMisoInfo->sercomNum];
   1111c:	7a32      	ldrb	r2, [r6, #8]
   1111e:	4b05      	ldr	r3, [pc, #20]	; (11134 <_ZN9ClearCore10SerialBaseC1EPK15PeripheralRouteS3_S3_S3_h+0x90>)
   11120:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
   11124:	6123      	str	r3, [r4, #16]
}
   11126:	4620      	mov	r0, r4
   11128:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   1112a:	bf00      	nop
   1112c:	02000100 	.word	0x02000100
   11130:	00080102 	.word	0x00080102
   11134:	0002d470 	.word	0x0002d470
   11138:	0002d428 	.word	0x0002d428

0001113c <_ZN9ClearCore10SerialBase15WaitOneCharTimeEv>:
        max(2, (SampleRateHz * 10 + m_baudRate - 1) / m_baudRate);
   1113c:	6a43      	ldr	r3, [r0, #36]	; 0x24
    uint32_t tickVal = tickCnt;
   1113e:	4907      	ldr	r1, [pc, #28]	; (1115c <_ZN9ClearCore10SerialBase15WaitOneCharTimeEv+0x20>)
        max(2, (SampleRateHz * 10 + m_baudRate - 1) / m_baudRate);
   11140:	f503 4243 	add.w	r2, r3, #49920	; 0xc300
   11144:	324f      	adds	r2, #79	; 0x4f
    uint32_t tickVal = tickCnt;
   11146:	6808      	ldr	r0, [r1, #0]
        max(2, (SampleRateHz * 10 + m_baudRate - 1) / m_baudRate);
   11148:	fbb2 f2f3 	udiv	r2, r2, r3
   1114c:	2a02      	cmp	r2, #2
   1114e:	bf38      	it	cc
   11150:	2202      	movcc	r2, #2
    while (tickCnt - tickVal < ticksNeeded) {
   11152:	680b      	ldr	r3, [r1, #0]
   11154:	1a1b      	subs	r3, r3, r0
   11156:	429a      	cmp	r2, r3
   11158:	d8fb      	bhi.n	11152 <_ZN9ClearCore10SerialBase15WaitOneCharTimeEv+0x16>
}
   1115a:	4770      	bx	lr
   1115c:	20001c90 	.word	0x20001c90

00011160 <_ZN9ClearCore10SerialBase8PortModeENS0_9PortModesE>:
    if (newMode != SPI && newMode != UART) {
   11160:	2901      	cmp	r1, #1
   11162:	d901      	bls.n	11168 <_ZN9ClearCore10SerialBase8PortModeENS0_9PortModesE+0x8>
        return false;
   11164:	2000      	movs	r0, #0
   11166:	4770      	bx	lr
    if (!m_portOpen) {
   11168:	f890 2029 	ldrb.w	r2, [r0, #41]	; 0x29
    m_portMode = newMode;
   1116c:	71c1      	strb	r1, [r0, #7]
    if (!m_portOpen) {
   1116e:	b10a      	cbz	r2, 11174 <_ZN9ClearCore10SerialBase8PortModeENS0_9PortModesE+0x14>
   11170:	f7ff bb1e 	b.w	107b0 <_ZN9ClearCore10SerialBase8PortModeENS0_9PortModesE.part.9>
        return true;
   11174:	2001      	movs	r0, #1
}
   11176:	4770      	bx	lr

00011178 <_ZN9ClearCore10SerialBase9SpiSsModeENS0_13CtrlLineModesE>:
    switch (mode) {
   11178:	2901      	cmp	r1, #1
    m_ssMode = mode;
   1117a:	7281      	strb	r1, [r0, #10]
    switch (mode) {
   1117c:	d914      	bls.n	111a8 <_ZN9ClearCore10SerialBase9SpiSsModeENS0_13CtrlLineModesE+0x30>
   1117e:	2902      	cmp	r1, #2
   11180:	d110      	bne.n	111a4 <_ZN9ClearCore10SerialBase9SpiSsModeENS0_13CtrlLineModesE+0x2c>
            PMUX_ENABLE(m_rtsSsInfo->gpioPort, m_rtsSsInfo->gpioPin);
   11182:	6982      	ldr	r2, [r0, #24]
   11184:	f992 1001 	ldrsb.w	r1, [r2, #1]
   11188:	7893      	ldrb	r3, [r2, #2]
   1118a:	eb03 13c1 	add.w	r3, r3, r1, lsl #7
   1118e:	f103 4382 	add.w	r3, r3, #1090519040	; 0x41000000
   11192:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
    bool success = true;
   11196:	2001      	movs	r0, #1
            PMUX_ENABLE(m_rtsSsInfo->gpioPort, m_rtsSsInfo->gpioPin);
   11198:	f893 2040 	ldrb.w	r2, [r3, #64]	; 0x40
   1119c:	4302      	orrs	r2, r0
   1119e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
   111a2:	4770      	bx	lr
            success = false;
   111a4:	2000      	movs	r0, #0
}
   111a6:	4770      	bx	lr
            DATA_OUTPUT_STATE(m_rtsSsInfo->gpioPort,
   111a8:	6982      	ldr	r2, [r0, #24]
   111aa:	f992 3001 	ldrsb.w	r3, [r2, #1]
   111ae:	7892      	ldrb	r2, [r2, #2]
   111b0:	01db      	lsls	r3, r3, #7
   111b2:	b199      	cbz	r1, 111dc <_ZN9ClearCore10SerialBase9SpiSsModeENS0_13CtrlLineModesE+0x64>
   111b4:	f103 4182 	add.w	r1, r3, #1090519040	; 0x41000000
   111b8:	f501 4100 	add.w	r1, r1, #32768	; 0x8000
   111bc:	2001      	movs	r0, #1
   111be:	4090      	lsls	r0, r2
   111c0:	6148      	str	r0, [r1, #20]
            PMUX_DISABLE(m_rtsSsInfo->gpioPort, m_rtsSsInfo->gpioPin);
   111c2:	f103 4382 	add.w	r3, r3, #1090519040	; 0x41000000
   111c6:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
   111ca:	4413      	add	r3, r2
   111cc:	2001      	movs	r0, #1
   111ce:	f893 2040 	ldrb.w	r2, [r3, #64]	; 0x40
   111d2:	f36f 0200 	bfc	r2, #0, #1
   111d6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
   111da:	4770      	bx	lr
            DATA_OUTPUT_STATE(m_rtsSsInfo->gpioPort,
   111dc:	f103 4182 	add.w	r1, r3, #1090519040	; 0x41000000
   111e0:	f501 4100 	add.w	r1, r1, #32768	; 0x8000
   111e4:	2001      	movs	r0, #1
   111e6:	4090      	lsls	r0, r2
   111e8:	6188      	str	r0, [r1, #24]
   111ea:	e7ea      	b.n	111c2 <_ZN9ClearCore10SerialBase9SpiSsModeENS0_13CtrlLineModesE+0x4a>

000111ec <_ZN9ClearCore10SerialBase8SpiClockENS0_18SpiClockPolaritiesENS0_14SpiClockPhasesE>:
    SpiClockPolarities polarity, SpiClockPhases phase) {
   111ec:	b538      	push	{r3, r4, r5, lr}
    if (m_portMode != PortModes::SPI) {
   111ee:	79c3      	ldrb	r3, [r0, #7]
    m_polarity = polarity;
   111f0:	7201      	strb	r1, [r0, #8]
    if (m_portMode != PortModes::SPI) {
   111f2:	2b01      	cmp	r3, #1
    m_phase = phase;
   111f4:	7242      	strb	r2, [r0, #9]
    if (m_portMode != PortModes::SPI) {
   111f6:	d000      	beq.n	111fa <_ZN9ClearCore10SerialBase8SpiClockENS0_18SpiClockPolaritiesENS0_14SpiClockPhasesE+0xe>
   111f8:	bd38      	pop	{r3, r4, r5, pc}
    PMUX_DISABLE(m_txMosiInfo->gpioPort, m_txMosiInfo->gpioPin);
   111fa:	6a01      	ldr	r1, [r0, #32]
    bool sercomEnabled = m_serPort->USART.CTRLA.bit.ENABLE;
   111fc:	6902      	ldr	r2, [r0, #16]
    PMUX_DISABLE(m_txMosiInfo->gpioPort, m_txMosiInfo->gpioPin);
   111fe:	f991 4001 	ldrsb.w	r4, [r1, #1]
   11202:	788b      	ldrb	r3, [r1, #2]
    bool sercomEnabled = m_serPort->USART.CTRLA.bit.ENABLE;
   11204:	6815      	ldr	r5, [r2, #0]
    PMUX_DISABLE(m_txMosiInfo->gpioPort, m_txMosiInfo->gpioPin);
   11206:	eb03 13c4 	add.w	r3, r3, r4, lsl #7
   1120a:	f103 4382 	add.w	r3, r3, #1090519040	; 0x41000000
   1120e:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
    bool sercomEnabled = m_serPort->USART.CTRLA.bit.ENABLE;
   11212:	f3c5 0540 	ubfx	r5, r5, #1, #1
    PMUX_DISABLE(m_txMosiInfo->gpioPort, m_txMosiInfo->gpioPin);
   11216:	f893 1040 	ldrb.w	r1, [r3, #64]	; 0x40
   1121a:	f36f 0100 	bfc	r1, #0, #1
   1121e:	f883 1040 	strb.w	r1, [r3, #64]	; 0x40
    if (m_serPort->USART.CTRLA.bit.ENABLE) {
   11222:	6813      	ldr	r3, [r2, #0]
   11224:	0799      	lsls	r1, r3, #30
   11226:	d503      	bpl.n	11230 <_ZN9ClearCore10SerialBase8SpiClockENS0_18SpiClockPolaritiesENS0_14SpiClockPhasesE+0x44>
        m_serPort->USART.CTRLA.bit.ENABLE = 0;
   11228:	6813      	ldr	r3, [r2, #0]
   1122a:	f36f 0341 	bfc	r3, #1, #1
   1122e:	6013      	str	r3, [r2, #0]
    SYNCBUSY_WAIT(usart, SERCOM_USART_SYNCBUSY_ENABLE);
   11230:	69d3      	ldr	r3, [r2, #28]
   11232:	f013 0302 	ands.w	r3, r3, #2
   11236:	d1fb      	bne.n	11230 <_ZN9ClearCore10SerialBase8SpiClockENS0_18SpiClockPolaritiesENS0_14SpiClockPhasesE+0x44>
    Flush();
   11238:	6802      	ldr	r2, [r0, #0]
   1123a:	4604      	mov	r4, r0
   1123c:	6811      	ldr	r1, [r2, #0]
   1123e:	4821      	ldr	r0, [pc, #132]	; (112c4 <_ZN9ClearCore10SerialBase8SpiClockENS0_18SpiClockPolaritiesENS0_14SpiClockPhasesE+0xd8>)
   11240:	4281      	cmp	r1, r0
   11242:	d136      	bne.n	112b2 <_ZN9ClearCore10SerialBase8SpiClockENS0_18SpiClockPolaritiesENS0_14SpiClockPhasesE+0xc6>
    m_outTail = 0;
   11244:	f8c4 313c 	str.w	r3, [r4, #316]	; 0x13c
    m_bufferOut[0] = 0;
   11248:	f8a4 30b0 	strh.w	r3, [r4, #176]	; 0xb0
    m_outHead = 0;
   1124c:	f8c4 3138 	str.w	r3, [r4, #312]	; 0x138
    FlushInput();
   11250:	6853      	ldr	r3, [r2, #4]
   11252:	4a1d      	ldr	r2, [pc, #116]	; (112c8 <_ZN9ClearCore10SerialBase8SpiClockENS0_18SpiClockPolaritiesENS0_14SpiClockPhasesE+0xdc>)
   11254:	4293      	cmp	r3, r2
   11256:	d130      	bne.n	112ba <_ZN9ClearCore10SerialBase8SpiClockENS0_18SpiClockPolaritiesENS0_14SpiClockPhasesE+0xce>
    m_serPort->USART.INTENSET.reg = SERCOM_USART_INTENSET_RXC;
   11258:	6923      	ldr	r3, [r4, #16]
    m_bufferIn[0] = 0;
   1125a:	2200      	movs	r2, #0
    m_serPort->USART.INTENSET.reg = SERCOM_USART_INTENSET_RXC;
   1125c:	2104      	movs	r1, #4
    m_inTail = 0;
   1125e:	f8c4 2134 	str.w	r2, [r4, #308]	; 0x134
    m_bufferIn[0] = 0;
   11262:	8622      	strh	r2, [r4, #48]	; 0x30
    m_inHead = 0;
   11264:	f8c4 2130 	str.w	r2, [r4, #304]	; 0x130
    m_serPort->USART.INTENSET.reg = SERCOM_USART_INTENSET_RXC;
   11268:	7599      	strb	r1, [r3, #22]
    m_serPort->SPI.CTRLA.bit.CPOL = m_polarity;
   1126a:	7a21      	ldrb	r1, [r4, #8]
   1126c:	681a      	ldr	r2, [r3, #0]
   1126e:	f361 725d 	bfi	r2, r1, #29, #1
   11272:	601a      	str	r2, [r3, #0]
    m_serPort->SPI.CTRLA.bit.CPHA = m_phase;
   11274:	7a61      	ldrb	r1, [r4, #9]
   11276:	681a      	ldr	r2, [r3, #0]
   11278:	f361 721c 	bfi	r2, r1, #28, #1
   1127c:	601a      	str	r2, [r3, #0]
    if (sercomEnabled) {
   1127e:	2d00      	cmp	r5, #0
   11280:	d0ba      	beq.n	111f8 <_ZN9ClearCore10SerialBase8SpiClockENS0_18SpiClockPolaritiesENS0_14SpiClockPhasesE+0xc>
    m_serPort->USART.CTRLA.bit.ENABLE = 1;
   11282:	681a      	ldr	r2, [r3, #0]
   11284:	f042 0202 	orr.w	r2, r2, #2
   11288:	601a      	str	r2, [r3, #0]
    SYNCBUSY_WAIT(usart, SERCOM_USART_SYNCBUSY_ENABLE);
   1128a:	69da      	ldr	r2, [r3, #28]
   1128c:	0792      	lsls	r2, r2, #30
   1128e:	d4fc      	bmi.n	1128a <_ZN9ClearCore10SerialBase8SpiClockENS0_18SpiClockPolaritiesENS0_14SpiClockPhasesE+0x9e>
        PMUX_ENABLE(m_txMosiInfo->gpioPort, m_txMosiInfo->gpioPin);
   11290:	6a22      	ldr	r2, [r4, #32]
   11292:	f992 1001 	ldrsb.w	r1, [r2, #1]
   11296:	7893      	ldrb	r3, [r2, #2]
   11298:	eb03 13c1 	add.w	r3, r3, r1, lsl #7
   1129c:	f103 4382 	add.w	r3, r3, #1090519040	; 0x41000000
   112a0:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
   112a4:	f893 2040 	ldrb.w	r2, [r3, #64]	; 0x40
   112a8:	f042 0201 	orr.w	r2, r2, #1
   112ac:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
   112b0:	bd38      	pop	{r3, r4, r5, pc}
    Flush();
   112b2:	4620      	mov	r0, r4
   112b4:	4788      	blx	r1
   112b6:	6822      	ldr	r2, [r4, #0]
   112b8:	e7ca      	b.n	11250 <_ZN9ClearCore10SerialBase8SpiClockENS0_18SpiClockPolaritiesENS0_14SpiClockPhasesE+0x64>
    FlushInput();
   112ba:	4620      	mov	r0, r4
   112bc:	4798      	blx	r3
   112be:	6923      	ldr	r3, [r4, #16]
   112c0:	e7d3      	b.n	1126a <_ZN9ClearCore10SerialBase8SpiClockENS0_18SpiClockPolaritiesENS0_14SpiClockPhasesE+0x7e>
   112c2:	bf00      	nop
   112c4:	00010161 	.word	0x00010161
   112c8:	00010171 	.word	0x00010171

000112cc <_ZN9ClearCore10SerialBase15SpiTransferDataEPKhPhl>:
    uint8_t const *writeBuf, uint8_t *readBuf, int32_t len) {
   112cc:	b470      	push	{r4, r5, r6}
   112ce:	4604      	mov	r4, r0
    if (!m_portOpen || m_portMode != SPI) {
   112d0:	f890 0029 	ldrb.w	r0, [r0, #41]	; 0x29
   112d4:	b120      	cbz	r0, 112e0 <_ZN9ClearCore10SerialBase15SpiTransferDataEPKhPhl+0x14>
   112d6:	79e0      	ldrb	r0, [r4, #7]
   112d8:	2801      	cmp	r0, #1
        return 0;
   112da:	f04f 0000 	mov.w	r0, #0
    if (!m_portOpen || m_portMode != SPI) {
   112de:	d001      	beq.n	112e4 <_ZN9ClearCore10SerialBase15SpiTransferDataEPKhPhl+0x18>
}
   112e0:	bc70      	pop	{r4, r5, r6}
   112e2:	4770      	bx	lr
    for (iChar = 0; iChar < len; iChar++) {
   112e4:	2b00      	cmp	r3, #0
   112e6:	ddfb      	ble.n	112e0 <_ZN9ClearCore10SerialBase15SpiTransferDataEPKhPhl+0x14>
        m_serPort->SPI.DATA.bit.DATA = writeBuf ? *writeBuf++ : 0;
   112e8:	6925      	ldr	r5, [r4, #16]
   112ea:	b1b9      	cbz	r1, 1131c <_ZN9ClearCore10SerialBase15SpiTransferDataEPKhPhl+0x50>
   112ec:	1c4e      	adds	r6, r1, #1
   112ee:	7809      	ldrb	r1, [r1, #0]
   112f0:	62a9      	str	r1, [r5, #40]	; 0x28
   112f2:	e003      	b.n	112fc <_ZN9ClearCore10SerialBase15SpiTransferDataEPKhPhl+0x30>
            if (!m_portOpen) {
   112f4:	f894 1029 	ldrb.w	r1, [r4, #41]	; 0x29
   112f8:	2900      	cmp	r1, #0
   112fa:	d0f1      	beq.n	112e0 <_ZN9ClearCore10SerialBase15SpiTransferDataEPKhPhl+0x14>
        while (!m_serPort->SPI.INTFLAG.bit.RXC ||
   112fc:	7e29      	ldrb	r1, [r5, #24]
   112fe:	0749      	lsls	r1, r1, #29
   11300:	d5f8      	bpl.n	112f4 <_ZN9ClearCore10SerialBase15SpiTransferDataEPKhPhl+0x28>
                !m_serPort->SPI.INTFLAG.bit.TXC) {
   11302:	7e29      	ldrb	r1, [r5, #24]
        while (!m_serPort->SPI.INTFLAG.bit.RXC ||
   11304:	0789      	lsls	r1, r1, #30
   11306:	d5f5      	bpl.n	112f4 <_ZN9ClearCore10SerialBase15SpiTransferDataEPKhPhl+0x28>
        if (readBuf) {
   11308:	b152      	cbz	r2, 11320 <_ZN9ClearCore10SerialBase15SpiTransferDataEPKhPhl+0x54>
    for (iChar = 0; iChar < len; iChar++) {
   1130a:	3001      	adds	r0, #1
            *readBuf++ = m_serPort->SPI.DATA.bit.DATA;
   1130c:	6aa9      	ldr	r1, [r5, #40]	; 0x28
   1130e:	7011      	strb	r1, [r2, #0]
    for (iChar = 0; iChar < len; iChar++) {
   11310:	4298      	cmp	r0, r3
            *readBuf++ = m_serPort->SPI.DATA.bit.DATA;
   11312:	f102 0201 	add.w	r2, r2, #1
    for (iChar = 0; iChar < len; iChar++) {
   11316:	d007      	beq.n	11328 <_ZN9ClearCore10SerialBase15SpiTransferDataEPKhPhl+0x5c>
   11318:	4631      	mov	r1, r6
   1131a:	e7e5      	b.n	112e8 <_ZN9ClearCore10SerialBase15SpiTransferDataEPKhPhl+0x1c>
   1131c:	460e      	mov	r6, r1
   1131e:	e7e7      	b.n	112f0 <_ZN9ClearCore10SerialBase15SpiTransferDataEPKhPhl+0x24>
   11320:	3001      	adds	r0, #1
   11322:	4283      	cmp	r3, r0
            (void)m_serPort->SPI.DATA.bit.DATA;
   11324:	6aa9      	ldr	r1, [r5, #40]	; 0x28
    for (iChar = 0; iChar < len; iChar++) {
   11326:	d1f7      	bne.n	11318 <_ZN9ClearCore10SerialBase15SpiTransferDataEPKhPhl+0x4c>
        return 0;
   11328:	4618      	mov	r0, r3
   1132a:	e7d9      	b.n	112e0 <_ZN9ClearCore10SerialBase15SpiTransferDataEPKhPhl+0x14>

0001132c <_ZN9ClearCore10SerialBase20SpiTransferDataAsyncEPKhPhl>:
    uint8_t const *writeBuf, uint8_t *readBuf, int32_t len) {
   1132c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    if (!m_portOpen || m_portMode != SPI) {
   11330:	f890 5029 	ldrb.w	r5, [r0, #41]	; 0x29
   11334:	b12d      	cbz	r5, 11342 <_ZN9ClearCore10SerialBase20SpiTransferDataAsyncEPKhPhl+0x16>
   11336:	f890 8007 	ldrb.w	r8, [r0, #7]
   1133a:	f1b8 0f01 	cmp.w	r8, #1
   1133e:	d003      	beq.n	11348 <_ZN9ClearCore10SerialBase20SpiTransferDataAsyncEPKhPhl+0x1c>
        return false;
   11340:	2500      	movs	r5, #0
}
   11342:	4628      	mov	r0, r5
   11344:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    if (m_dmaRxChannel == DMA_INVALID_CHANNEL ||
   11348:	f890 e02e 	ldrb.w	lr, [r0, #46]	; 0x2e
   1134c:	f1be 0f07 	cmp.w	lr, #7
   11350:	d0f6      	beq.n	11340 <_ZN9ClearCore10SerialBase20SpiTransferDataAsyncEPKhPhl+0x14>
   11352:	f890 402f 	ldrb.w	r4, [r0, #47]	; 0x2f
   11356:	2c07      	cmp	r4, #7
   11358:	d0f2      	beq.n	11340 <_ZN9ClearCore10SerialBase20SpiTransferDataAsyncEPKhPhl+0x14>
   1135a:	4616      	mov	r6, r2
   1135c:	4604      	mov	r4, r0
    baseDesc = DmaManager::BaseDescriptor(m_dmaRxChannel);
   1135e:	4670      	mov	r0, lr
   11360:	461f      	mov	r7, r3
   11362:	4689      	mov	r9, r1
   11364:	f7fc fd94 	bl	de90 <_ZN9ClearCore10DmaManager14BaseDescriptorENS_11DmaChannelsE>
    if (readBuf) {
   11368:	b336      	cbz	r6, 113b8 <_ZN9ClearCore10SerialBase20SpiTransferDataAsyncEPKhPhl+0x8c>
        baseDesc->DSTADDR.reg = (uint32_t)(readBuf + len);
   1136a:	443e      	add	r6, r7
        baseDesc->BTCTRL.reg =
   1136c:	f640 0301 	movw	r3, #2049	; 0x801
        baseDesc->DSTADDR.reg = (uint32_t)(readBuf + len);
   11370:	6086      	str	r6, [r0, #8]
        baseDesc->BTCTRL.reg =
   11372:	8003      	strh	r3, [r0, #0]
    baseDesc->BTCNT.reg = len;
   11374:	b2be      	uxth	r6, r7
   11376:	8046      	strh	r6, [r0, #2]
    DmaManager::Channel(m_dmaRxChannel)->CHCTRLA.reg |= DMAC_CHCTRLA_ENABLE;
   11378:	f894 002e 	ldrb.w	r0, [r4, #46]	; 0x2e
   1137c:	f7fc fd7e 	bl	de7c <_ZN9ClearCore10DmaManager7ChannelENS_11DmaChannelsE>
   11380:	6803      	ldr	r3, [r0, #0]
   11382:	f043 0302 	orr.w	r3, r3, #2
   11386:	6003      	str	r3, [r0, #0]
    baseDesc = DmaManager::BaseDescriptor(m_dmaTxChannel);
   11388:	f894 002f 	ldrb.w	r0, [r4, #47]	; 0x2f
   1138c:	f7fc fd80 	bl	de90 <_ZN9ClearCore10DmaManager14BaseDescriptorENS_11DmaChannelsE>
    if (writeBuf) {
   11390:	f1b9 0f00 	cmp.w	r9, #0
   11394:	d015      	beq.n	113c2 <_ZN9ClearCore10SerialBase20SpiTransferDataAsyncEPKhPhl+0x96>
        baseDesc->SRCADDR.reg = (uint32_t)(writeBuf + len);
   11396:	444f      	add	r7, r9
        baseDesc->BTCTRL.reg =
   11398:	f240 4301 	movw	r3, #1025	; 0x401
        baseDesc->SRCADDR.reg = (uint32_t)(writeBuf + len);
   1139c:	6047      	str	r7, [r0, #4]
        baseDesc->BTCTRL.reg =
   1139e:	8003      	strh	r3, [r0, #0]
    baseDesc->BTCNT.reg = len;
   113a0:	8046      	strh	r6, [r0, #2]
    DmaManager::Channel(m_dmaTxChannel)->CHCTRLA.reg |= DMAC_CHCTRLA_ENABLE;
   113a2:	f894 002f 	ldrb.w	r0, [r4, #47]	; 0x2f
   113a6:	f7fc fd69 	bl	de7c <_ZN9ClearCore10DmaManager7ChannelENS_11DmaChannelsE>
   113aa:	6803      	ldr	r3, [r0, #0]
   113ac:	f043 0302 	orr.w	r3, r3, #2
   113b0:	6003      	str	r3, [r0, #0]
}
   113b2:	4628      	mov	r0, r5
   113b4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
        baseDesc->DSTADDR.reg = (uint32_t)&spiDummy;
   113b8:	4b04      	ldr	r3, [pc, #16]	; (113cc <_ZN9ClearCore10SerialBase20SpiTransferDataAsyncEPKhPhl+0xa0>)
   113ba:	6083      	str	r3, [r0, #8]
        baseDesc->BTCTRL.reg = DMAC_BTCTRL_BEATSIZE_BYTE | DMAC_BTCTRL_VALID;
   113bc:	f8a0 8000 	strh.w	r8, [r0]
   113c0:	e7d8      	b.n	11374 <_ZN9ClearCore10SerialBase20SpiTransferDataAsyncEPKhPhl+0x48>
        baseDesc->SRCADDR.reg = (uint32_t)&spiDummy;
   113c2:	4b02      	ldr	r3, [pc, #8]	; (113cc <_ZN9ClearCore10SerialBase20SpiTransferDataAsyncEPKhPhl+0xa0>)
   113c4:	6043      	str	r3, [r0, #4]
        baseDesc->BTCTRL.reg = DMAC_BTCTRL_BEATSIZE_BYTE | DMAC_BTCTRL_VALID;
   113c6:	2301      	movs	r3, #1
   113c8:	8003      	strh	r3, [r0, #0]
   113ca:	e7e9      	b.n	113a0 <_ZN9ClearCore10SerialBase20SpiTransferDataAsyncEPKhPhl+0x74>
   113cc:	20001fc0 	.word	0x20001fc0

000113d0 <_ZN9ClearCore10SerialBase20SpiAsyncWaitCompleteEv>:
    if (m_dmaRxChannel == DMA_INVALID_CHANNEL ||
   113d0:	f890 302e 	ldrb.w	r3, [r0, #46]	; 0x2e
   113d4:	2b07      	cmp	r3, #7
   113d6:	d016      	beq.n	11406 <_ZN9ClearCore10SerialBase20SpiAsyncWaitCompleteEv+0x36>
   113d8:	f890 302f 	ldrb.w	r3, [r0, #47]	; 0x2f
   113dc:	2b07      	cmp	r3, #7
bool SerialBase::SpiAsyncWaitComplete() {
   113de:	b510      	push	{r4, lr}
   113e0:	4604      	mov	r4, r0
    if (m_dmaRxChannel == DMA_INVALID_CHANNEL ||
   113e2:	d005      	beq.n	113f0 <_ZN9ClearCore10SerialBase20SpiAsyncWaitCompleteEv+0x20>
    while (m_portOpen && m_portMode == SPI &&
   113e4:	f894 3029 	ldrb.w	r3, [r4, #41]	; 0x29
   113e8:	b113      	cbz	r3, 113f0 <_ZN9ClearCore10SerialBase20SpiAsyncWaitCompleteEv+0x20>
   113ea:	79e3      	ldrb	r3, [r4, #7]
   113ec:	2b01      	cmp	r3, #1
   113ee:	d001      	beq.n	113f4 <_ZN9ClearCore10SerialBase20SpiAsyncWaitCompleteEv+0x24>
}
   113f0:	2001      	movs	r0, #1
   113f2:	bd10      	pop	{r4, pc}
            DmaManager::Channel(m_dmaRxChannel)->CHCTRLA.bit.ENABLE) {
   113f4:	f894 002e 	ldrb.w	r0, [r4, #46]	; 0x2e
   113f8:	f7fc fd40 	bl	de7c <_ZN9ClearCore10DmaManager7ChannelENS_11DmaChannelsE>
   113fc:	6803      	ldr	r3, [r0, #0]
    while (m_portOpen && m_portMode == SPI &&
   113fe:	079b      	lsls	r3, r3, #30
   11400:	d4f0      	bmi.n	113e4 <_ZN9ClearCore10SerialBase20SpiAsyncWaitCompleteEv+0x14>
}
   11402:	2001      	movs	r0, #1
   11404:	bd10      	pop	{r4, pc}
   11406:	2001      	movs	r0, #1
   11408:	4770      	bx	lr
   1140a:	bf00      	nop

0001140c <_ZN9ClearCore10SerialBase12IrqHandlerTxEv>:
    The TX data service interrupt handler.

    This should be called by SERCOMx_0 Interrupt Vector.
**/
void SerialBase::IrqHandlerTx() {
    switch (m_portMode) {
   1140c:	79c3      	ldrb	r3, [r0, #7]
   1140e:	2b01      	cmp	r3, #1
   11410:	d022      	beq.n	11458 <_ZN9ClearCore10SerialBase12IrqHandlerTxEv+0x4c>
    while (m_outHead != m_outTail) {
   11412:	f8d0 2138 	ldr.w	r2, [r0, #312]	; 0x138
   11416:	f8d0 313c 	ldr.w	r3, [r0, #316]	; 0x13c
        if (!m_serPort->USART.INTFLAG.bit.DRE) {
   1141a:	6901      	ldr	r1, [r0, #16]
    while (m_outHead != m_outTail) {
   1141c:	429a      	cmp	r2, r3
   1141e:	d019      	beq.n	11454 <_ZN9ClearCore10SerialBase12IrqHandlerTxEv+0x48>
        if (!m_serPort->USART.INTFLAG.bit.DRE) {
   11420:	7e0b      	ldrb	r3, [r1, #24]
   11422:	07da      	lsls	r2, r3, #31
   11424:	d403      	bmi.n	1142e <_ZN9ClearCore10SerialBase12IrqHandlerTxEv+0x22>
   11426:	e018      	b.n	1145a <_ZN9ClearCore10SerialBase12IrqHandlerTxEv+0x4e>
   11428:	7e0b      	ldrb	r3, [r1, #24]
   1142a:	07db      	lsls	r3, r3, #31
   1142c:	d514      	bpl.n	11458 <_ZN9ClearCore10SerialBase12IrqHandlerTxEv+0x4c>
        int32_t nextIndex = NextIndex(m_outHead);
   1142e:	f8d0 3138 	ldr.w	r3, [r0, #312]	; 0x138
        m_serPort->USART.DATA.bit.DATA = m_bufferOut[m_outHead];
   11432:	f8d0 2138 	ldr.w	r2, [r0, #312]	; 0x138
   11436:	3258      	adds	r2, #88	; 0x58
        return ((currentIndex + 1) & (SERIAL_BUFFER_SIZE - 1));
   11438:	3301      	adds	r3, #1
   1143a:	f930 2012 	ldrsh.w	r2, [r0, r2, lsl #1]
   1143e:	628a      	str	r2, [r1, #40]	; 0x28
   11440:	f003 033f 	and.w	r3, r3, #63	; 0x3f
        m_outHead = nextIndex;
   11444:	f8c0 3138 	str.w	r3, [r0, #312]	; 0x138
    while (m_outHead != m_outTail) {
   11448:	f8d0 2138 	ldr.w	r2, [r0, #312]	; 0x138
   1144c:	f8d0 313c 	ldr.w	r3, [r0, #316]	; 0x13c
   11450:	429a      	cmp	r2, r3
   11452:	d1e9      	bne.n	11428 <_ZN9ClearCore10SerialBase12IrqHandlerTxEv+0x1c>
    m_serPort->USART.INTENCLR.reg = SERCOM_USART_INTENCLR_DRE;
   11454:	2301      	movs	r3, #1
   11456:	750b      	strb	r3, [r1, #20]
   11458:	4770      	bx	lr
   1145a:	4770      	bx	lr

0001145c <_ZN9ClearCore10SerialBase12IrqHandlerRxEv>:
    Interrupt handler for the RX data service.

    This should be called by SERCOMx_2 Interrupt Vector.
**/
void SerialBase::IrqHandlerRx() {
    switch (m_portMode) {
   1145c:	79c3      	ldrb	r3, [r0, #7]
   1145e:	2b01      	cmp	r3, #1
   11460:	d100      	bne.n	11464 <_ZN9ClearCore10SerialBase12IrqHandlerRxEv+0x8>
        case UART:
        default:
            RxProc();
            break;
    }
}
   11462:	4770      	bx	lr
void SerialBase::IrqHandlerRx() {
   11464:	b410      	push	{r4}
    if (m_serPort->USART.RXERRCNT.reg != 0) {
   11466:	6901      	ldr	r1, [r0, #16]
   11468:	f891 3020 	ldrb.w	r3, [r1, #32]
   1146c:	b303      	cbz	r3, 114b0 <_ZN9ClearCore10SerialBase12IrqHandlerRxEv+0x54>
        m_inTail = 0;
   1146e:	2300      	movs	r3, #0
   11470:	f8c0 3134 	str.w	r3, [r0, #308]	; 0x134
        m_inHead = 0;
   11474:	f8c0 3130 	str.w	r3, [r0, #304]	; 0x130
        m_bufferIn[m_inTail++] = SerialBase::BREAK_DETECTED;
   11478:	f8d0 3134 	ldr.w	r3, [r0, #308]	; 0x134
   1147c:	f103 0218 	add.w	r2, r3, #24
   11480:	f64b 54bd 	movw	r4, #48573	; 0xbdbd
   11484:	3301      	adds	r3, #1
   11486:	f8c0 3134 	str.w	r3, [r0, #308]	; 0x134
   1148a:	f820 4012 	strh.w	r4, [r0, r2, lsl #1]
        m_serPort->USART.INTFLAG.bit.ERROR = 1;
   1148e:	7e0b      	ldrb	r3, [r1, #24]
   11490:	f043 0380 	orr.w	r3, r3, #128	; 0x80
   11494:	760b      	strb	r3, [r1, #24]
   11496:	e00b      	b.n	114b0 <_ZN9ClearCore10SerialBase12IrqHandlerRxEv+0x54>
    while (m_serPort->USART.INTFLAG.bit.RXC && nextIndex != m_inHead) {
   11498:	f8d0 2130 	ldr.w	r2, [r0, #304]	; 0x130
   1149c:	429a      	cmp	r2, r3
   1149e:	d00f      	beq.n	114c0 <_ZN9ClearCore10SerialBase12IrqHandlerRxEv+0x64>
        m_bufferIn[m_inTail] = m_serPort->USART.DATA.bit.DATA;
   114a0:	f8d0 2134 	ldr.w	r2, [r0, #308]	; 0x134
   114a4:	6a8c      	ldr	r4, [r1, #40]	; 0x28
   114a6:	3218      	adds	r2, #24
   114a8:	f820 4012 	strh.w	r4, [r0, r2, lsl #1]
        m_inTail = nextIndex;
   114ac:	f8c0 3134 	str.w	r3, [r0, #308]	; 0x134
        nextIndex = NextIndex(m_inTail);
   114b0:	f8d0 3134 	ldr.w	r3, [r0, #308]	; 0x134
    while (m_serPort->USART.INTFLAG.bit.RXC && nextIndex != m_inHead) {
   114b4:	7e0a      	ldrb	r2, [r1, #24]
   114b6:	3301      	adds	r3, #1
   114b8:	0752      	lsls	r2, r2, #29
   114ba:	f003 033f 	and.w	r3, r3, #63	; 0x3f
   114be:	d4eb      	bmi.n	11498 <_ZN9ClearCore10SerialBase12IrqHandlerRxEv+0x3c>
    if (nextIndex == m_inHead) {
   114c0:	f8d0 2130 	ldr.w	r2, [r0, #304]	; 0x130
   114c4:	429a      	cmp	r2, r3
   114c6:	d002      	beq.n	114ce <_ZN9ClearCore10SerialBase12IrqHandlerRxEv+0x72>
}
   114c8:	f85d 4b04 	ldr.w	r4, [sp], #4
   114cc:	4770      	bx	lr
    m_serPort->USART.INTENCLR.reg = SERCOM_USART_INTENCLR_RXC;
   114ce:	2304      	movs	r3, #4
   114d0:	750b      	strb	r3, [r1, #20]
}
   114d2:	e7f9      	b.n	114c8 <_ZN9ClearCore10SerialBase12IrqHandlerRxEv+0x6c>

000114d4 <_ZN9ClearCore10SerialBase19IrqHandlerExceptionEv>:
    Interrupt handler for any serial port exceptions.

    Should be called by SERCOMx_3 Interrupt Vector.
**/
void SerialBase::IrqHandlerException() {
    switch (m_portMode) {
   114d4:	79c3      	ldrb	r3, [r0, #7]
   114d6:	2b01      	cmp	r3, #1
        case SPI:
            // This should not occur, but clear the interrupt flags to be safe.
            m_serPort->USART.INTFLAG.reg = SERCOM_USART_INTFLAG_ERROR;
   114d8:	6903      	ldr	r3, [r0, #16]
    switch (m_portMode) {
   114da:	d022      	beq.n	11522 <_ZN9ClearCore10SerialBase19IrqHandlerExceptionEv+0x4e>
            break;
        case UART:
        default:
            if (m_serPort->USART.INTFLAG.bit.ERROR) {
   114dc:	7e1a      	ldrb	r2, [r3, #24]
   114de:	09d2      	lsrs	r2, r2, #7
   114e0:	d01e      	beq.n	11520 <_ZN9ClearCore10SerialBase19IrqHandlerExceptionEv+0x4c>
                // Clear the interrupt flag
                m_serPort->USART.INTFLAG.reg = SERCOM_USART_INTFLAG_ERROR;
   114e2:	2280      	movs	r2, #128	; 0x80
   114e4:	761a      	strb	r2, [r3, #24]
    if (m_serPort->USART.STATUS.bit.FERR) {
   114e6:	8b5a      	ldrh	r2, [r3, #26]
   114e8:	0792      	lsls	r2, r2, #30
   114ea:	d509      	bpl.n	11500 <_ZN9ClearCore10SerialBase19IrqHandlerExceptionEv+0x2c>
        m_serPort->USART.STATUS.bit.FERR = 1;
   114ec:	8b5a      	ldrh	r2, [r3, #26]
   114ee:	f042 0202 	orr.w	r2, r2, #2
   114f2:	835a      	strh	r2, [r3, #26]
        m_errorRegAccum.bit.SerialFrameError = 1;
   114f4:	f890 2140 	ldrb.w	r2, [r0, #320]	; 0x140
   114f8:	f042 0201 	orr.w	r2, r2, #1
   114fc:	f880 2140 	strb.w	r2, [r0, #320]	; 0x140
    if (m_serPort->USART.STATUS.bit.PERR) {
   11500:	8b5a      	ldrh	r2, [r3, #26]
   11502:	07d1      	lsls	r1, r2, #31
   11504:	d410      	bmi.n	11528 <_ZN9ClearCore10SerialBase19IrqHandlerExceptionEv+0x54>
    if (m_serPort->USART.STATUS.bit.BUFOVF) {
   11506:	8b5a      	ldrh	r2, [r3, #26]
   11508:	0752      	lsls	r2, r2, #29
   1150a:	d509      	bpl.n	11520 <_ZN9ClearCore10SerialBase19IrqHandlerExceptionEv+0x4c>
        m_serPort->USART.STATUS.bit.BUFOVF = 1;
   1150c:	8b5a      	ldrh	r2, [r3, #26]
   1150e:	f042 0204 	orr.w	r2, r2, #4
   11512:	835a      	strh	r2, [r3, #26]
        m_errorRegAccum.bit.SerialOverflowError = 1;
   11514:	f890 3140 	ldrb.w	r3, [r0, #320]	; 0x140
   11518:	f043 0304 	orr.w	r3, r3, #4
   1151c:	f880 3140 	strb.w	r3, [r0, #320]	; 0x140
   11520:	4770      	bx	lr
            m_serPort->USART.INTFLAG.reg = SERCOM_USART_INTFLAG_ERROR;
   11522:	2280      	movs	r2, #128	; 0x80
   11524:	761a      	strb	r2, [r3, #24]
            break;
   11526:	4770      	bx	lr
        m_serPort->USART.STATUS.bit.PERR = 1;
   11528:	8b5a      	ldrh	r2, [r3, #26]
   1152a:	f042 0201 	orr.w	r2, r2, #1
   1152e:	835a      	strh	r2, [r3, #26]
        m_errorRegAccum.bit.SerialParityError = 1;
   11530:	f890 2140 	ldrb.w	r2, [r0, #320]	; 0x140
   11534:	f042 0202 	orr.w	r2, r2, #2
   11538:	f880 2140 	strb.w	r2, [r0, #320]	; 0x140
   1153c:	e7e3      	b.n	11506 <_ZN9ClearCore10SerialBase19IrqHandlerExceptionEv+0x32>
   1153e:	bf00      	nop

00011540 <_ZN9ClearCore12SerialDriver4ModeEv>:

        \return The connector's current operational mode.
    **/
    virtual ConnectorModes Mode() override {
        return Connector::Mode();
    }
   11540:	f890 014a 	ldrb.w	r0, [r0, #330]	; 0x14a
   11544:	4770      	bx	lr
   11546:	bf00      	nop

00011548 <_ZThn324_N9ClearCore12SerialDriver4ModeEv>:
    virtual ConnectorModes Mode() override {
   11548:	f5a0 70a2 	sub.w	r0, r0, #324	; 0x144
   1154c:	e7f8      	b.n	11540 <_ZN9ClearCore12SerialDriver4ModeEv>
   1154e:	bf00      	nop

00011550 <_ZN9ClearCore12SerialDriver4TypeEv>:

        \return The type of the current connector.
    **/
    Connector::ConnectorTypes Type() override {
        return Connector::SERIAL_TYPE;
    };
   11550:	2007      	movs	r0, #7
   11552:	4770      	bx	lr

00011554 <_ZThn324_N9ClearCore12SerialDriver4TypeEv>:
    Connector::ConnectorTypes Type() override {
   11554:	f5a0 70a2 	sub.w	r0, r0, #324	; 0x144
   11558:	e7fa      	b.n	11550 <_ZN9ClearCore12SerialDriver4TypeEv>
   1155a:	bf00      	nop

0001155c <_ZN9ClearCore12SerialDriver10IsWritableEv>:
        \brief Get R/W status of the connector.

        \return True if the port is open.
    **/
    bool IsWritable() override {
        return PortIsOpen();
   1155c:	6803      	ldr	r3, [r0, #0]
   1155e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   11560:	4718      	bx	r3
   11562:	bf00      	nop

00011564 <_ZThn324_N9ClearCore12SerialDriver10IsWritableEv>:
    bool IsWritable() override {
   11564:	f5a0 70a2 	sub.w	r0, r0, #324	; 0x144
   11568:	e7f8      	b.n	1155c <_ZN9ClearCore12SerialDriver10IsWritableEv>
   1156a:	bf00      	nop

0001156c <_ZN9ClearCore12SerialDriver5StateEv>:
    /**
        \brief Alias to ISerial::PortIsOpen().

        \return True if the port is open, and false otherwise.
    **/
    int16_t State() override {
   1156c:	b508      	push	{r3, lr}
        return PortIsOpen();
   1156e:	6803      	ldr	r3, [r0, #0]
   11570:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   11572:	4798      	blx	r3
    }
   11574:	b200      	sxth	r0, r0
   11576:	bd08      	pop	{r3, pc}

00011578 <_ZThn324_N9ClearCore12SerialDriver5StateEv>:
    int16_t State() override {
   11578:	f5a0 70a2 	sub.w	r0, r0, #324	; 0x144
   1157c:	e7f6      	b.n	1156c <_ZN9ClearCore12SerialDriver5StateEv>
   1157e:	bf00      	nop

00011580 <_ZN9ClearCore12SerialDriver11IsInHwFaultEv>:
        return true;
    }

    bool IsInHwFault() override {
        return false;
    }
   11580:	2000      	movs	r0, #0
   11582:	4770      	bx	lr

00011584 <_ZThn324_N9ClearCore12SerialDriver11IsInHwFaultEv>:
    bool IsInHwFault() override {
   11584:	f5a0 70a2 	sub.w	r0, r0, #324	; 0x144
   11588:	e7fa      	b.n	11580 <_ZN9ClearCore12SerialDriver11IsInHwFaultEv>
   1158a:	bf00      	nop

0001158c <_ZN9ClearCore12SerialDriver7RefreshEv>:
    void Initialize(ClearCorePins clearCorePin) override;

    /**
        Update connector's state.
    **/
    void Refresh() override {};
   1158c:	4770      	bx	lr
   1158e:	bf00      	nop

00011590 <_ZThn324_N9ClearCore12SerialDriver7RefreshEv>:
   11590:	f5a0 70a2 	sub.w	r0, r0, #324	; 0x144
   11594:	e7fa      	b.n	1158c <_ZN9ClearCore12SerialDriver7RefreshEv>
   11596:	bf00      	nop

00011598 <_ZN9ClearCore12SerialDriverC1EtNS_13ShiftRegister5MasksES2_S2_PK15PeripheralRouteS5_S5_S5_h>:
// LED feedback and option shift register
extern ShiftRegister ShiftReg;
// CCIO-8 management
extern CcioBoardManager &CcioMgr;

SerialDriver::SerialDriver(uint16_t index,
   11598:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1159c:	b082      	sub	sp, #8
   1159e:	4688      	mov	r8, r1
   115a0:	9d0c      	ldr	r5, [sp, #48]	; 0x30
   115a2:	f89d 4034 	ldrb.w	r4, [sp, #52]	; 0x34
    : SerialBase(ctsMisoInfo, rtsSsInfo, rxSckInfo, txMosiInfo,
                 peripheral),
      m_index(index),
      m_ledMask(feedBackLedMask),
      m_controlMask(controlMask),
      m_polarityMask(polarityMask) {}
   115a6:	9500      	str	r5, [sp, #0]
   115a8:	9401      	str	r4, [sp, #4]
   115aa:	a909      	add	r1, sp, #36	; 0x24
SerialDriver::SerialDriver(uint16_t index,
   115ac:	4604      	mov	r4, r0
   115ae:	4617      	mov	r7, r2
   115b0:	461e      	mov	r6, r3
      m_polarityMask(polarityMask) {}
   115b2:	c90e      	ldmia	r1, {r1, r2, r3}
SerialDriver::SerialDriver(uint16_t index,
   115b4:	9d08      	ldr	r5, [sp, #32]
      m_polarityMask(polarityMask) {}
   115b6:	f7ff fd75 	bl	110a4 <_ZN9ClearCore10SerialBaseC1EPK15PeripheralRouteS3_S3_S3_h>
   115ba:	f504 70a2 	add.w	r0, r4, #324	; 0x144
   115be:	f7fc f86f 	bl	d6a0 <_ZN9ClearCore9ConnectorC1Ev>
   115c2:	4b09      	ldr	r3, [pc, #36]	; (115e8 <_ZN9ClearCore12SerialDriverC1EtNS_13ShiftRegister5MasksES2_S2_PK15PeripheralRouteS5_S5_S5_h+0x50>)
   115c4:	f884 814b 	strb.w	r8, [r4, #331]	; 0x14b
   115c8:	f103 0208 	add.w	r2, r3, #8
   115cc:	4620      	mov	r0, r4
   115ce:	337c      	adds	r3, #124	; 0x7c
   115d0:	f8c4 714c 	str.w	r7, [r4, #332]	; 0x14c
   115d4:	f8c4 6150 	str.w	r6, [r4, #336]	; 0x150
   115d8:	f8c4 5154 	str.w	r5, [r4, #340]	; 0x154
   115dc:	6022      	str	r2, [r4, #0]
   115de:	f8c4 3144 	str.w	r3, [r4, #324]	; 0x144
   115e2:	b002      	add	sp, #8
   115e4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   115e8:	0002d490 	.word	0x0002d490

000115ec <_ZN9ClearCore12SerialDriver5SpeedEm>:
    bool Speed(uint32_t bitsPerSecond) override {
   115ec:	b538      	push	{r3, r4, r5, lr}
   115ee:	4604      	mov	r4, r0
        bool retVal = SerialBase::Speed(bitsPerSecond);
   115f0:	f7fe fe50 	bl	10294 <_ZN9ClearCore10SerialBase5SpeedEm>
        if (m_portOpen) {
   115f4:	f894 3029 	ldrb.w	r3, [r4, #41]	; 0x29
        bool retVal = SerialBase::Speed(bitsPerSecond);
   115f8:	4605      	mov	r5, r0
        if (m_portOpen) {
   115fa:	b113      	cbz	r3, 11602 <_ZN9ClearCore12SerialDriver5SpeedEm+0x16>
            WaitOneCharTime();
   115fc:	4620      	mov	r0, r4
   115fe:	f7ff fd9d 	bl	1113c <_ZN9ClearCore10SerialBase15WaitOneCharTimeEv>
    }
   11602:	4628      	mov	r0, r5
   11604:	bd38      	pop	{r3, r4, r5, pc}
   11606:	bf00      	nop

00011608 <_ZN9ClearCore12SerialDriver4ModeENS_9Connector14ConnectorModesE>:
    PortClose();
    // Default to TTL mode
    Mode(ConnectorModes::TTL);
}

bool SerialDriver::Mode(ConnectorModes newMode) {
   11608:	b538      	push	{r3, r4, r5, lr}
    SerialBase::PortModes portMode;

    if (m_mode == newMode) {
   1160a:	f890 314a 	ldrb.w	r3, [r0, #330]	; 0x14a
   1160e:	428b      	cmp	r3, r1
   11610:	d00d      	beq.n	1162e <_ZN9ClearCore12SerialDriver4ModeENS_9Connector14ConnectorModesE+0x26>
        // No change needed
        return true;
    }

    if (m_mode == Connector::CCIO) {
   11612:	2b10      	cmp	r3, #16
   11614:	460d      	mov	r5, r1
   11616:	4604      	mov	r4, r0
   11618:	f000 808c 	beq.w	11734 <_ZN9ClearCore12SerialDriver4ModeENS_9Connector14ConnectorModesE+0x12c>
        CcioMgr.LinkClose();
    }

    switch (newMode) {
   1161c:	f1a5 030d 	sub.w	r3, r5, #13
   11620:	2b03      	cmp	r3, #3
   11622:	f200 808c 	bhi.w	1173e <_ZN9ClearCore12SerialDriver4ModeENS_9Connector14ConnectorModesE+0x136>
   11626:	e8df f003 	tbb	[pc, r3]
   1162a:	3169      	.short	0x3169
   1162c:	4f06      	.short	0x4f06
        return true;
   1162e:	2501      	movs	r5, #1
    // register and settle for a full character time before sending data
    if (m_portOpen) {
        WaitOneCharTime();
    }
    return true;
}
   11630:	4628      	mov	r0, r5
   11632:	bd38      	pop	{r3, r4, r5, pc}
            Speed(CCIO_DEFAULT_BAUD_RATE);
   11634:	4798      	blx	r3
        atomic_and_fetch(&m_patternOutputs[LED_BLINK_IO_SET], ~bitsToClr);
   11636:	f8d4 2154 	ldr.w	r2, [r4, #340]	; 0x154
   1163a:	4b42      	ldr	r3, [pc, #264]	; (11744 <_ZN9ClearCore12SerialDriver4ModeENS_9Connector14ConnectorModesE+0x13c>)
   1163c:	f3bf 8f5b 	dmb	ish
   11640:	43d2      	mvns	r2, r2
   11642:	e853 1f00 	ldrex	r1, [r3]
   11646:	4011      	ands	r1, r2
   11648:	e843 1000 	strex	r0, r1, [r3]
   1164c:	2800      	cmp	r0, #0
   1164e:	d1f8      	bne.n	11642 <_ZN9ClearCore12SerialDriver4ModeENS_9Connector14ConnectorModesE+0x3a>
   11650:	f3bf 8f5b 	dmb	ish
        atomic_or_fetch(&m_patternOutputs[LED_BLINK_IO_SET], bitsToSet);
   11654:	f8d4 2150 	ldr.w	r2, [r4, #336]	; 0x150
   11658:	f3bf 8f5b 	dmb	ish
   1165c:	e853 1f00 	ldrex	r1, [r3]
   11660:	4311      	orrs	r1, r2
   11662:	e843 1000 	strex	r0, r1, [r3]
   11666:	2800      	cmp	r0, #0
   11668:	d1f8      	bne.n	1165c <_ZN9ClearCore12SerialDriver4ModeENS_9Connector14ConnectorModesE+0x54>
   1166a:	f3bf 8f5b 	dmb	ish
            portMode = SerialBase::SPI;
   1166e:	2101      	movs	r1, #1
    m_mode = newMode;
   11670:	f884 514a 	strb.w	r5, [r4, #330]	; 0x14a
    PortMode(portMode);
   11674:	4620      	mov	r0, r4
   11676:	f7ff fd73 	bl	11160 <_ZN9ClearCore10SerialBase8PortModeENS0_9PortModesE>
    if (m_portOpen) {
   1167a:	f894 5029 	ldrb.w	r5, [r4, #41]	; 0x29
   1167e:	2d00      	cmp	r5, #0
   11680:	d0d5      	beq.n	1162e <_ZN9ClearCore12SerialDriver4ModeENS_9Connector14ConnectorModesE+0x26>
        WaitOneCharTime();
   11682:	4620      	mov	r0, r4
   11684:	f7ff fd5a 	bl	1113c <_ZN9ClearCore10SerialBase15WaitOneCharTimeEv>
}
   11688:	4628      	mov	r0, r5
   1168a:	bd38      	pop	{r3, r4, r5, pc}
   1168c:	4b2d      	ldr	r3, [pc, #180]	; (11744 <_ZN9ClearCore12SerialDriver4ModeENS_9Connector14ConnectorModesE+0x13c>)
   1168e:	f8d4 2154 	ldr.w	r2, [r4, #340]	; 0x154
   11692:	f3bf 8f5b 	dmb	ish
   11696:	e853 1f00 	ldrex	r1, [r3]
   1169a:	4311      	orrs	r1, r2
   1169c:	e843 1000 	strex	r0, r1, [r3]
   116a0:	2800      	cmp	r0, #0
   116a2:	d1f8      	bne.n	11696 <_ZN9ClearCore12SerialDriver4ModeENS_9Connector14ConnectorModesE+0x8e>
   116a4:	f3bf 8f5b 	dmb	ish
        atomic_and_fetch(&m_patternOutputs[LED_BLINK_IO_SET], ~bitsToClr);
   116a8:	f8d4 2150 	ldr.w	r2, [r4, #336]	; 0x150
   116ac:	f3bf 8f5b 	dmb	ish
   116b0:	43d2      	mvns	r2, r2
   116b2:	e853 1f00 	ldrex	r1, [r3]
   116b6:	4011      	ands	r1, r2
   116b8:	e843 1000 	strex	r0, r1, [r3]
   116bc:	2800      	cmp	r0, #0
   116be:	d1f8      	bne.n	116b2 <_ZN9ClearCore12SerialDriver4ModeENS_9Connector14ConnectorModesE+0xaa>
   116c0:	f3bf 8f5b 	dmb	ish
            portMode = SerialBase::UART;
   116c4:	2100      	movs	r1, #0
   116c6:	e7d3      	b.n	11670 <_ZN9ClearCore12SerialDriver4ModeENS_9Connector14ConnectorModesE+0x68>
            SpiClock(SerialDriver::SCK_LOW, SerialDriver::LEAD_CHANGE);
   116c8:	2201      	movs	r2, #1
   116ca:	2100      	movs	r1, #0
   116cc:	4620      	mov	r0, r4
   116ce:	f7ff fd8d 	bl	111ec <_ZN9ClearCore10SerialBase8SpiClockENS0_18SpiClockPolaritiesENS0_14SpiClockPhasesE>
            SpiSsMode(SerialBase::CtrlLineModes::LINE_ON);
   116d2:	2101      	movs	r1, #1
   116d4:	4620      	mov	r0, r4
   116d6:	f7ff fd4f 	bl	11178 <_ZN9ClearCore10SerialBase9SpiSsModeENS0_13CtrlLineModesE>
            Speed(CCIO_DEFAULT_BAUD_RATE);
   116da:	6823      	ldr	r3, [r4, #0]
   116dc:	4a1a      	ldr	r2, [pc, #104]	; (11748 <_ZN9ClearCore12SerialDriver4ModeENS_9Connector14ConnectorModesE+0x140>)
   116de:	691b      	ldr	r3, [r3, #16]
        bool retVal = SerialBase::Speed(bitsPerSecond);
   116e0:	491a      	ldr	r1, [pc, #104]	; (1174c <_ZN9ClearCore12SerialDriver4ModeENS_9Connector14ConnectorModesE+0x144>)
   116e2:	4293      	cmp	r3, r2
   116e4:	4620      	mov	r0, r4
   116e6:	d1a5      	bne.n	11634 <_ZN9ClearCore12SerialDriver4ModeENS_9Connector14ConnectorModesE+0x2c>
   116e8:	f7fe fdd4 	bl	10294 <_ZN9ClearCore10SerialBase5SpeedEm>
        if (m_portOpen) {
   116ec:	f894 3029 	ldrb.w	r3, [r4, #41]	; 0x29
   116f0:	2b00      	cmp	r3, #0
   116f2:	d0a0      	beq.n	11636 <_ZN9ClearCore12SerialDriver4ModeENS_9Connector14ConnectorModesE+0x2e>
            WaitOneCharTime();
   116f4:	4620      	mov	r0, r4
   116f6:	f7ff fd21 	bl	1113c <_ZN9ClearCore10SerialBase15WaitOneCharTimeEv>
   116fa:	e79c      	b.n	11636 <_ZN9ClearCore12SerialDriver4ModeENS_9Connector14ConnectorModesE+0x2e>
   116fc:	f8d4 2154 	ldr.w	r2, [r4, #340]	; 0x154
   11700:	4b10      	ldr	r3, [pc, #64]	; (11744 <_ZN9ClearCore12SerialDriver4ModeENS_9Connector14ConnectorModesE+0x13c>)
   11702:	f3bf 8f5b 	dmb	ish
   11706:	43d2      	mvns	r2, r2
   11708:	e853 1f00 	ldrex	r1, [r3]
   1170c:	4011      	ands	r1, r2
   1170e:	e843 1000 	strex	r0, r1, [r3]
   11712:	2800      	cmp	r0, #0
   11714:	d1f8      	bne.n	11708 <_ZN9ClearCore12SerialDriver4ModeENS_9Connector14ConnectorModesE+0x100>
   11716:	f3bf 8f5b 	dmb	ish
   1171a:	f8d4 2150 	ldr.w	r2, [r4, #336]	; 0x150
   1171e:	f3bf 8f5b 	dmb	ish
   11722:	43d2      	mvns	r2, r2
   11724:	e853 1f00 	ldrex	r1, [r3]
   11728:	4011      	ands	r1, r2
   1172a:	e843 1000 	strex	r0, r1, [r3]
   1172e:	2800      	cmp	r0, #0
   11730:	d0c6      	beq.n	116c0 <_ZN9ClearCore12SerialDriver4ModeENS_9Connector14ConnectorModesE+0xb8>
   11732:	e7f7      	b.n	11724 <_ZN9ClearCore12SerialDriver4ModeENS_9Connector14ConnectorModesE+0x11c>
        CcioMgr.LinkClose();
   11734:	4b06      	ldr	r3, [pc, #24]	; (11750 <_ZN9ClearCore12SerialDriver4ModeENS_9Connector14ConnectorModesE+0x148>)
   11736:	6818      	ldr	r0, [r3, #0]
   11738:	f7fd fa00 	bl	eb3c <_ZN9ClearCore16CcioBoardManager9LinkCloseEv>
   1173c:	e76e      	b.n	1161c <_ZN9ClearCore12SerialDriver4ModeENS_9Connector14ConnectorModesE+0x14>
            return false;
   1173e:	2500      	movs	r5, #0
   11740:	e776      	b.n	11630 <_ZN9ClearCore12SerialDriver4ModeENS_9Connector14ConnectorModesE+0x28>
   11742:	bf00      	nop
   11744:	20001b74 	.word	0x20001b74
   11748:	000115ed 	.word	0x000115ed
   1174c:	0007a120 	.word	0x0007a120
   11750:	20001fac 	.word	0x20001fac

00011754 <_ZThn324_N9ClearCore12SerialDriver4ModeENS_9Connector14ConnectorModesE>:
    bool Mode(ConnectorModes newMode) override;
   11754:	f5a0 70a2 	sub.w	r0, r0, #324	; 0x144
   11758:	f7ff bf56 	b.w	11608 <_ZN9ClearCore12SerialDriver4ModeENS_9Connector14ConnectorModesE>

0001175c <_ZN9ClearCore12SerialDriver8PortOpenEv>:

void SerialDriver::PortOpen() {
   1175c:	b510      	push	{r4, lr}
   1175e:	4604      	mov	r4, r0
    if (!SerialBase::PortIsOpen()) {
   11760:	f7fe fcfa 	bl	10158 <_ZN9ClearCore10SerialBase10PortIsOpenEv>
   11764:	b100      	cbz	r0, 11768 <_ZN9ClearCore12SerialDriver8PortOpenEv+0xc>
   11766:	bd10      	pop	{r4, pc}
        SerialBase::PortOpen();
   11768:	4620      	mov	r0, r4
   1176a:	f7ff fc8f 	bl	1108c <_ZN9ClearCore10SerialBase8PortOpenEv>
        // Delay to allow the port polarity to be written to the shift
        // register and settle for a full character time before sending data
        WaitOneCharTime();
   1176e:	4620      	mov	r0, r4
   11770:	f7ff fce4 	bl	1113c <_ZN9ClearCore10SerialBase15WaitOneCharTimeEv>
        atomic_or_fetch(&m_patternOutputs[LED_BLINK_IO_SET], bitsToSet);
   11774:	4b0c      	ldr	r3, [pc, #48]	; (117a8 <_ZN9ClearCore12SerialDriver8PortOpenEv+0x4c>)
   11776:	f8d4 214c 	ldr.w	r2, [r4, #332]	; 0x14c
   1177a:	f3bf 8f5b 	dmb	ish
   1177e:	e853 1f00 	ldrex	r1, [r3]
   11782:	4311      	orrs	r1, r2
   11784:	e843 1000 	strex	r0, r1, [r3]
   11788:	2800      	cmp	r0, #0
   1178a:	d1f8      	bne.n	1177e <_ZN9ClearCore12SerialDriver8PortOpenEv+0x22>
   1178c:	f3bf 8f5b 	dmb	ish
        // LED under connector on
        ShiftReg.ShifterStateSet(m_ledMask);

        // Initialize the CCIO manager
        if (m_mode == Connector::CCIO) {
   11790:	f894 314a 	ldrb.w	r3, [r4, #330]	; 0x14a
   11794:	2b10      	cmp	r3, #16
   11796:	d1e6      	bne.n	11766 <_ZN9ClearCore12SerialDriver8PortOpenEv+0xa>
            CcioMgr.CcioDiscover(this);
   11798:	4b04      	ldr	r3, [pc, #16]	; (117ac <_ZN9ClearCore12SerialDriver8PortOpenEv+0x50>)
   1179a:	4621      	mov	r1, r4
   1179c:	6818      	ldr	r0, [r3, #0]
        }
    }
}
   1179e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
            CcioMgr.CcioDiscover(this);
   117a2:	f7fd b9eb 	b.w	eb7c <_ZN9ClearCore16CcioBoardManager12CcioDiscoverEPNS_12SerialDriverE>
   117a6:	bf00      	nop
   117a8:	20001b74 	.word	0x20001b74
   117ac:	20001fac 	.word	0x20001fac

000117b0 <_ZN9ClearCore12SerialDriver9PortCloseEv>:

void SerialDriver::PortClose() {
   117b0:	b510      	push	{r4, lr}
   117b2:	4604      	mov	r4, r0
    if (SerialBase::PortIsOpen()) {
   117b4:	f7fe fcd0 	bl	10158 <_ZN9ClearCore10SerialBase10PortIsOpenEv>
   117b8:	b1a8      	cbz	r0, 117e6 <_ZN9ClearCore12SerialDriver9PortCloseEv+0x36>
        if (m_mode == Connector::CCIO) {
   117ba:	f894 314a 	ldrb.w	r3, [r4, #330]	; 0x14a
   117be:	2b10      	cmp	r3, #16
   117c0:	d012      	beq.n	117e8 <_ZN9ClearCore12SerialDriver9PortCloseEv+0x38>
            CcioMgr.LinkClose();
        }
        SerialBase::PortClose();
   117c2:	4620      	mov	r0, r4
   117c4:	f7fe fe10 	bl	103e8 <_ZN9ClearCore10SerialBase9PortCloseEv>
        atomic_and_fetch(&m_patternOutputs[LED_BLINK_IO_SET], ~bitsToClr);
   117c8:	f8d4 314c 	ldr.w	r3, [r4, #332]	; 0x14c
   117cc:	4a09      	ldr	r2, [pc, #36]	; (117f4 <_ZN9ClearCore12SerialDriver9PortCloseEv+0x44>)
   117ce:	f3bf 8f5b 	dmb	ish
   117d2:	43db      	mvns	r3, r3
   117d4:	e852 1f00 	ldrex	r1, [r2]
   117d8:	4019      	ands	r1, r3
   117da:	e842 1000 	strex	r0, r1, [r2]
   117de:	2800      	cmp	r0, #0
   117e0:	d1f8      	bne.n	117d4 <_ZN9ClearCore12SerialDriver9PortCloseEv+0x24>
   117e2:	f3bf 8f5b 	dmb	ish
   117e6:	bd10      	pop	{r4, pc}
            CcioMgr.LinkClose();
   117e8:	4b03      	ldr	r3, [pc, #12]	; (117f8 <_ZN9ClearCore12SerialDriver9PortCloseEv+0x48>)
   117ea:	6818      	ldr	r0, [r3, #0]
   117ec:	f7fd f9a6 	bl	eb3c <_ZN9ClearCore16CcioBoardManager9LinkCloseEv>
   117f0:	e7e7      	b.n	117c2 <_ZN9ClearCore12SerialDriver9PortCloseEv+0x12>
   117f2:	bf00      	nop
   117f4:	20001b74 	.word	0x20001b74
   117f8:	20001fac 	.word	0x20001fac

000117fc <_ZN9ClearCore12SerialDriver10InitializeE13ClearCorePins>:
    PortClose();
   117fc:	6803      	ldr	r3, [r0, #0]
   117fe:	4a37      	ldr	r2, [pc, #220]	; (118dc <_ZN9ClearCore12SerialDriver10InitializeE13ClearCorePins+0xe0>)
   11800:	68db      	ldr	r3, [r3, #12]
   11802:	4293      	cmp	r3, r2
void SerialDriver::Initialize(ClearCorePins clearCorePin) {
   11804:	b510      	push	{r4, lr}
   11806:	4604      	mov	r4, r0
    m_clearCorePin = clearCorePin;
   11808:	f8a0 1148 	strh.w	r1, [r0, #328]	; 0x148
   1180c:	d150      	bne.n	118b0 <_ZN9ClearCore12SerialDriver10InitializeE13ClearCorePins+0xb4>
    if (SerialBase::PortIsOpen()) {
   1180e:	f7fe fca3 	bl	10158 <_ZN9ClearCore10SerialBase10PortIsOpenEv>
   11812:	b1a8      	cbz	r0, 11840 <_ZN9ClearCore12SerialDriver10InitializeE13ClearCorePins+0x44>
        if (m_mode == Connector::CCIO) {
   11814:	f894 314a 	ldrb.w	r3, [r4, #330]	; 0x14a
   11818:	2b10      	cmp	r3, #16
   1181a:	d059      	beq.n	118d0 <_ZN9ClearCore12SerialDriver10InitializeE13ClearCorePins+0xd4>
        SerialBase::PortClose();
   1181c:	4620      	mov	r0, r4
   1181e:	f7fe fde3 	bl	103e8 <_ZN9ClearCore10SerialBase9PortCloseEv>
   11822:	f8d4 314c 	ldr.w	r3, [r4, #332]	; 0x14c
   11826:	4a2e      	ldr	r2, [pc, #184]	; (118e0 <_ZN9ClearCore12SerialDriver10InitializeE13ClearCorePins+0xe4>)
   11828:	f3bf 8f5b 	dmb	ish
   1182c:	43db      	mvns	r3, r3
   1182e:	e852 1f00 	ldrex	r1, [r2]
   11832:	4019      	ands	r1, r3
   11834:	e842 1000 	strex	r0, r1, [r2]
   11838:	2800      	cmp	r0, #0
   1183a:	d1f8      	bne.n	1182e <_ZN9ClearCore12SerialDriver10InitializeE13ClearCorePins+0x32>
   1183c:	f3bf 8f5b 	dmb	ish
    Mode(ConnectorModes::TTL);
   11840:	6823      	ldr	r3, [r4, #0]
   11842:	4a28      	ldr	r2, [pc, #160]	; (118e4 <_ZN9ClearCore12SerialDriver10InitializeE13ClearCorePins+0xe8>)
   11844:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   11846:	4293      	cmp	r3, r2
   11848:	d138      	bne.n	118bc <_ZN9ClearCore12SerialDriver10InitializeE13ClearCorePins+0xc0>
    if (m_mode == newMode) {
   1184a:	f894 314a 	ldrb.w	r3, [r4, #330]	; 0x14a
   1184e:	2b0d      	cmp	r3, #13
   11850:	d028      	beq.n	118a4 <_ZN9ClearCore12SerialDriver10InitializeE13ClearCorePins+0xa8>
    if (m_mode == Connector::CCIO) {
   11852:	2b10      	cmp	r3, #16
   11854:	d037      	beq.n	118c6 <_ZN9ClearCore12SerialDriver10InitializeE13ClearCorePins+0xca>
   11856:	f8d4 2154 	ldr.w	r2, [r4, #340]	; 0x154
   1185a:	4b21      	ldr	r3, [pc, #132]	; (118e0 <_ZN9ClearCore12SerialDriver10InitializeE13ClearCorePins+0xe4>)
   1185c:	f3bf 8f5b 	dmb	ish
   11860:	43d2      	mvns	r2, r2
   11862:	e853 1f00 	ldrex	r1, [r3]
   11866:	4011      	ands	r1, r2
   11868:	e843 1000 	strex	r0, r1, [r3]
   1186c:	2800      	cmp	r0, #0
   1186e:	d1f8      	bne.n	11862 <_ZN9ClearCore12SerialDriver10InitializeE13ClearCorePins+0x66>
   11870:	f3bf 8f5b 	dmb	ish
   11874:	f8d4 2150 	ldr.w	r2, [r4, #336]	; 0x150
   11878:	f3bf 8f5b 	dmb	ish
   1187c:	43d2      	mvns	r2, r2
   1187e:	e853 1f00 	ldrex	r1, [r3]
   11882:	4011      	ands	r1, r2
   11884:	e843 1000 	strex	r0, r1, [r3]
   11888:	2800      	cmp	r0, #0
   1188a:	d1f8      	bne.n	1187e <_ZN9ClearCore12SerialDriver10InitializeE13ClearCorePins+0x82>
   1188c:	f3bf 8f5b 	dmb	ish
    m_mode = newMode;
   11890:	230d      	movs	r3, #13
   11892:	f884 314a 	strb.w	r3, [r4, #330]	; 0x14a
    PortMode(portMode);
   11896:	4620      	mov	r0, r4
   11898:	2100      	movs	r1, #0
   1189a:	f7ff fc61 	bl	11160 <_ZN9ClearCore10SerialBase8PortModeENS0_9PortModesE>
    if (m_portOpen) {
   1189e:	f894 3029 	ldrb.w	r3, [r4, #41]	; 0x29
   118a2:	b903      	cbnz	r3, 118a6 <_ZN9ClearCore12SerialDriver10InitializeE13ClearCorePins+0xaa>
   118a4:	bd10      	pop	{r4, pc}
        WaitOneCharTime();
   118a6:	4620      	mov	r0, r4
}
   118a8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        WaitOneCharTime();
   118ac:	f7ff bc46 	b.w	1113c <_ZN9ClearCore10SerialBase15WaitOneCharTimeEv>
    PortClose();
   118b0:	4798      	blx	r3
    Mode(ConnectorModes::TTL);
   118b2:	6823      	ldr	r3, [r4, #0]
   118b4:	4a0b      	ldr	r2, [pc, #44]	; (118e4 <_ZN9ClearCore12SerialDriver10InitializeE13ClearCorePins+0xe8>)
   118b6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   118b8:	4293      	cmp	r3, r2
   118ba:	d0c6      	beq.n	1184a <_ZN9ClearCore12SerialDriver10InitializeE13ClearCorePins+0x4e>
   118bc:	4620      	mov	r0, r4
   118be:	210d      	movs	r1, #13
}
   118c0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    Mode(ConnectorModes::TTL);
   118c4:	4718      	bx	r3
        CcioMgr.LinkClose();
   118c6:	4b08      	ldr	r3, [pc, #32]	; (118e8 <_ZN9ClearCore12SerialDriver10InitializeE13ClearCorePins+0xec>)
   118c8:	6818      	ldr	r0, [r3, #0]
   118ca:	f7fd f937 	bl	eb3c <_ZN9ClearCore16CcioBoardManager9LinkCloseEv>
   118ce:	e7c2      	b.n	11856 <_ZN9ClearCore12SerialDriver10InitializeE13ClearCorePins+0x5a>
            CcioMgr.LinkClose();
   118d0:	4b05      	ldr	r3, [pc, #20]	; (118e8 <_ZN9ClearCore12SerialDriver10InitializeE13ClearCorePins+0xec>)
   118d2:	6818      	ldr	r0, [r3, #0]
   118d4:	f7fd f932 	bl	eb3c <_ZN9ClearCore16CcioBoardManager9LinkCloseEv>
   118d8:	e7a0      	b.n	1181c <_ZN9ClearCore12SerialDriver10InitializeE13ClearCorePins+0x20>
   118da:	bf00      	nop
   118dc:	000117b1 	.word	0x000117b1
   118e0:	20001b74 	.word	0x20001b74
   118e4:	00011609 	.word	0x00011609
   118e8:	20001fac 	.word	0x20001fac

000118ec <_ZThn324_N9ClearCore12SerialDriver10InitializeE13ClearCorePins>:
    void Initialize(ClearCorePins clearCorePin) override;
   118ec:	f5a0 70a2 	sub.w	r0, r0, #324	; 0x144
   118f0:	f7ff bf84 	b.w	117fc <_ZN9ClearCore12SerialDriver10InitializeE13ClearCorePins>

000118f4 <_ZN9ClearCore12SerialDriver5StateEs>:
    bool State(int16_t newState) override {
   118f4:	b510      	push	{r4, lr}
            PortOpen();
   118f6:	6803      	ldr	r3, [r0, #0]
    bool State(int16_t newState) override {
   118f8:	4604      	mov	r4, r0
        if (newState) {
   118fa:	bb09      	cbnz	r1, 11940 <_ZN9ClearCore12SerialDriver5StateEs+0x4c>
   118fc:	4a26      	ldr	r2, [pc, #152]	; (11998 <_ZN9ClearCore12SerialDriver5StateEs+0xa4>)
            PortClose();
   118fe:	68db      	ldr	r3, [r3, #12]
   11900:	4293      	cmp	r3, r2
   11902:	d11a      	bne.n	1193a <_ZN9ClearCore12SerialDriver5StateEs+0x46>
    if (SerialBase::PortIsOpen()) {
   11904:	f7fe fc28 	bl	10158 <_ZN9ClearCore10SerialBase10PortIsOpenEv>
   11908:	b1a8      	cbz	r0, 11936 <_ZN9ClearCore12SerialDriver5StateEs+0x42>
        if (m_mode == Connector::CCIO) {
   1190a:	f894 314a 	ldrb.w	r3, [r4, #330]	; 0x14a
   1190e:	2b10      	cmp	r3, #16
   11910:	d03c      	beq.n	1198c <_ZN9ClearCore12SerialDriver5StateEs+0x98>
        SerialBase::PortClose();
   11912:	4620      	mov	r0, r4
   11914:	f7fe fd68 	bl	103e8 <_ZN9ClearCore10SerialBase9PortCloseEv>
   11918:	f8d4 314c 	ldr.w	r3, [r4, #332]	; 0x14c
   1191c:	4a1f      	ldr	r2, [pc, #124]	; (1199c <_ZN9ClearCore12SerialDriver5StateEs+0xa8>)
   1191e:	f3bf 8f5b 	dmb	ish
   11922:	43db      	mvns	r3, r3
   11924:	e852 1f00 	ldrex	r1, [r2]
   11928:	4019      	ands	r1, r3
   1192a:	e842 1000 	strex	r0, r1, [r2]
   1192e:	2800      	cmp	r0, #0
   11930:	d1f8      	bne.n	11924 <_ZN9ClearCore12SerialDriver5StateEs+0x30>
   11932:	f3bf 8f5b 	dmb	ish
    }
   11936:	2001      	movs	r0, #1
   11938:	bd10      	pop	{r4, pc}
            PortClose();
   1193a:	4798      	blx	r3
    }
   1193c:	2001      	movs	r0, #1
   1193e:	bd10      	pop	{r4, pc}
   11940:	4a17      	ldr	r2, [pc, #92]	; (119a0 <_ZN9ClearCore12SerialDriver5StateEs+0xac>)
            PortOpen();
   11942:	689b      	ldr	r3, [r3, #8]
   11944:	4293      	cmp	r3, r2
   11946:	d1f8      	bne.n	1193a <_ZN9ClearCore12SerialDriver5StateEs+0x46>
    if (!SerialBase::PortIsOpen()) {
   11948:	f7fe fc06 	bl	10158 <_ZN9ClearCore10SerialBase10PortIsOpenEv>
   1194c:	2800      	cmp	r0, #0
   1194e:	d1f2      	bne.n	11936 <_ZN9ClearCore12SerialDriver5StateEs+0x42>
        SerialBase::PortOpen();
   11950:	4620      	mov	r0, r4
   11952:	f7ff fb9b 	bl	1108c <_ZN9ClearCore10SerialBase8PortOpenEv>
        WaitOneCharTime();
   11956:	4620      	mov	r0, r4
   11958:	f7ff fbf0 	bl	1113c <_ZN9ClearCore10SerialBase15WaitOneCharTimeEv>
        atomic_or_fetch(&m_patternOutputs[LED_BLINK_IO_SET], bitsToSet);
   1195c:	4b0f      	ldr	r3, [pc, #60]	; (1199c <_ZN9ClearCore12SerialDriver5StateEs+0xa8>)
   1195e:	f8d4 214c 	ldr.w	r2, [r4, #332]	; 0x14c
   11962:	f3bf 8f5b 	dmb	ish
   11966:	e853 1f00 	ldrex	r1, [r3]
   1196a:	4311      	orrs	r1, r2
   1196c:	e843 1000 	strex	r0, r1, [r3]
   11970:	2800      	cmp	r0, #0
   11972:	d1f8      	bne.n	11966 <_ZN9ClearCore12SerialDriver5StateEs+0x72>
   11974:	f3bf 8f5b 	dmb	ish
        if (m_mode == Connector::CCIO) {
   11978:	f894 314a 	ldrb.w	r3, [r4, #330]	; 0x14a
   1197c:	2b10      	cmp	r3, #16
   1197e:	d1da      	bne.n	11936 <_ZN9ClearCore12SerialDriver5StateEs+0x42>
            CcioMgr.CcioDiscover(this);
   11980:	4b08      	ldr	r3, [pc, #32]	; (119a4 <_ZN9ClearCore12SerialDriver5StateEs+0xb0>)
   11982:	4621      	mov	r1, r4
   11984:	6818      	ldr	r0, [r3, #0]
   11986:	f7fd f8f9 	bl	eb7c <_ZN9ClearCore16CcioBoardManager12CcioDiscoverEPNS_12SerialDriverE>
   1198a:	e7d4      	b.n	11936 <_ZN9ClearCore12SerialDriver5StateEs+0x42>
            CcioMgr.LinkClose();
   1198c:	4b05      	ldr	r3, [pc, #20]	; (119a4 <_ZN9ClearCore12SerialDriver5StateEs+0xb0>)
   1198e:	6818      	ldr	r0, [r3, #0]
   11990:	f7fd f8d4 	bl	eb3c <_ZN9ClearCore16CcioBoardManager9LinkCloseEv>
   11994:	e7bd      	b.n	11912 <_ZN9ClearCore12SerialDriver5StateEs+0x1e>
   11996:	bf00      	nop
   11998:	000117b1 	.word	0x000117b1
   1199c:	20001b74 	.word	0x20001b74
   119a0:	0001175d 	.word	0x0001175d
   119a4:	20001fac 	.word	0x20001fac

000119a8 <_ZThn324_N9ClearCore12SerialDriver5StateEs>:
    bool State(int16_t newState) override {
   119a8:	f5a0 70a2 	sub.w	r0, r0, #324	; 0x144
   119ac:	e7a2      	b.n	118f4 <_ZN9ClearCore12SerialDriver5StateEs>
   119ae:	bf00      	nop

000119b0 <_ZN9ClearCore9LedDriver4ModeEv>:

        \return The connector's current operational mode.
    **/
    virtual ConnectorModes Mode() override {
        return Connector::Mode();
    }
   119b0:	7980      	ldrb	r0, [r0, #6]
   119b2:	4770      	bx	lr

000119b4 <_ZN9ClearCore9LedDriver4ModeENS_9Connector14ConnectorModesE>:
        The only valid mode for this connector type is: #OUTPUT_DIGITAL.
        \return Returns false if the mode is invalid or setup fails.
    **/
    bool Mode(ConnectorModes newMode) override {
        return newMode == ConnectorModes::OUTPUT_DIGITAL;
    }
   119b4:	f1a1 0004 	sub.w	r0, r1, #4
   119b8:	fab0 f080 	clz	r0, r0
   119bc:	0940      	lsrs	r0, r0, #5
   119be:	4770      	bx	lr

000119c0 <_ZN9ClearCore9LedDriver4TypeEv>:

        \return The type of the current connector.
    **/
    Connector::ConnectorTypes Type() override {
        return Connector::SHIFT_REG_TYPE;
    }
   119c0:	2002      	movs	r0, #2
   119c2:	4770      	bx	lr

000119c4 <_ZN9ClearCore9LedDriver10IsWritableEv>:

        \return True because this connector is always writable.
    **/
    bool IsWritable() override {
        return true;
    }
   119c4:	2001      	movs	r0, #1
   119c6:	4770      	bx	lr

000119c8 <_ZN9ClearCore9LedDriver11IsInHwFaultEv>:
    bool State(int16_t newState) override;

#ifndef HIDE_FROM_DOXYGEN
    bool IsInHwFault() override {
        return false;
    }
   119c8:	2000      	movs	r0, #0
   119ca:	4770      	bx	lr

000119cc <_ZN9ClearCore9LedDriver7RefreshEv>:
        Poll the underlying connector for new state update.

        This is typically called from a timer or main loop to update the
        underlying value.
    **/
    void Refresh() override {}
   119cc:	4770      	bx	lr
   119ce:	bf00      	nop

000119d0 <_ZN9ClearCore9LedDriver10InitializeE13ClearCorePins>:
        \note This class requires no initialization, but requires an
        implementation of Initialize() to be a concrete class.
    **/
    void Initialize(ClearCorePins clearCorePin) override {
        m_clearCorePin = clearCorePin;
        m_mode = OUTPUT_DIGITAL;
   119d0:	2304      	movs	r3, #4
        m_clearCorePin = clearCorePin;
   119d2:	8081      	strh	r1, [r0, #4]
        m_mode = OUTPUT_DIGITAL;
   119d4:	7183      	strb	r3, [r0, #6]
   119d6:	4770      	bx	lr

000119d8 <_ZN9ClearCore9LedDriver5StateEv>:
        return atomic_load_n(&m_patternOutputs[LED_BLINK_IO_SET]);
   119d8:	4b04      	ldr	r3, [pc, #16]	; (119ec <_ZN9ClearCore9LedDriver5StateEv+0x14>)
   119da:	681a      	ldr	r2, [r3, #0]
   119dc:	f3bf 8f5b 	dmb	ish
LedDriver::LedDriver(ShiftRegister::Masks ledMask)
    : Connector(),
      m_ledMask(ledMask) {}

int16_t LedDriver::State() {
    return static_cast<bool>(ShiftReg.ShifterState().reg & m_ledMask);
   119e0:	6883      	ldr	r3, [r0, #8]
   119e2:	421a      	tst	r2, r3
}
   119e4:	bf14      	ite	ne
   119e6:	2001      	movne	r0, #1
   119e8:	2000      	moveq	r0, #0
   119ea:	4770      	bx	lr
   119ec:	20001b74 	.word	0x20001b74

000119f0 <_ZN9ClearCore9LedDriver5StateEs>:

bool LedDriver::State(int16_t newState) {
    ShiftReg.ShifterState(newState, m_ledMask);
   119f0:	6883      	ldr	r3, [r0, #8]
        : ShifterStateClear(bitsToChange);
   119f2:	b971      	cbnz	r1, 11a12 <_ZN9ClearCore9LedDriver5StateEs+0x22>
        atomic_and_fetch(&m_patternOutputs[LED_BLINK_IO_SET], ~bitsToClr);
   119f4:	f3bf 8f5b 	dmb	ish
   119f8:	4a0d      	ldr	r2, [pc, #52]	; (11a30 <_ZN9ClearCore9LedDriver5StateEs+0x40>)
   119fa:	43db      	mvns	r3, r3
   119fc:	e852 1f00 	ldrex	r1, [r2]
   11a00:	4019      	ands	r1, r3
   11a02:	e842 1000 	strex	r0, r1, [r2]
   11a06:	2800      	cmp	r0, #0
   11a08:	d1f8      	bne.n	119fc <_ZN9ClearCore9LedDriver5StateEs+0xc>
   11a0a:	f3bf 8f5b 	dmb	ish
    return true;
}
   11a0e:	2001      	movs	r0, #1
   11a10:	4770      	bx	lr
        atomic_or_fetch(&m_patternOutputs[LED_BLINK_IO_SET], bitsToSet);
   11a12:	4a07      	ldr	r2, [pc, #28]	; (11a30 <_ZN9ClearCore9LedDriver5StateEs+0x40>)
   11a14:	f3bf 8f5b 	dmb	ish
   11a18:	e852 1f00 	ldrex	r1, [r2]
   11a1c:	4319      	orrs	r1, r3
   11a1e:	e842 1000 	strex	r0, r1, [r2]
   11a22:	2800      	cmp	r0, #0
   11a24:	d1f8      	bne.n	11a18 <_ZN9ClearCore9LedDriver5StateEs+0x28>
        atomic_and_fetch(&m_patternOutputs[LED_BLINK_IO_SET], ~bitsToClr);
   11a26:	f3bf 8f5b 	dmb	ish
   11a2a:	2001      	movs	r0, #1
   11a2c:	4770      	bx	lr
   11a2e:	bf00      	nop
   11a30:	20001b74 	.word	0x20001b74

00011a34 <_ZN9ClearCore9LedDriverC1ENS_13ShiftRegister5MasksE>:
LedDriver::LedDriver(ShiftRegister::Masks ledMask)
   11a34:	b538      	push	{r3, r4, r5, lr}
   11a36:	4604      	mov	r4, r0
   11a38:	460d      	mov	r5, r1
      m_ledMask(ledMask) {}
   11a3a:	f7fb fe31 	bl	d6a0 <_ZN9ClearCore9ConnectorC1Ev>
   11a3e:	4b02      	ldr	r3, [pc, #8]	; (11a48 <_ZN9ClearCore9LedDriverC1ENS_13ShiftRegister5MasksE+0x14>)
   11a40:	60a5      	str	r5, [r4, #8]
   11a42:	6023      	str	r3, [r4, #0]
   11a44:	4620      	mov	r0, r4
   11a46:	bd38      	pop	{r3, r4, r5, pc}
   11a48:	0002d53c 	.word	0x0002d53c

00011a4c <_ZN9ClearCore13StatusManager8InstanceEv>:
#define UNDER_VOLTAGE_EXIT_CNT ((uint16_t)(UNDER_VOLTAGE_EXIT_V * (1 << 15) / \
   AdcManager::ADC_CHANNEL_MAX_FLOAT[AdcManager::ADC_VSUPPLY_MON]))


// Ensures that only one instance of StatusManager is ever created.
StatusManager &StatusManager::Instance() {
   11a4c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    static StatusManager *instance = new StatusManager;
   11a4e:	4d19      	ldr	r5, [pc, #100]	; (11ab4 <_ZN9ClearCore13StatusManager8InstanceEv+0x68>)
   11a50:	682c      	ldr	r4, [r5, #0]
   11a52:	f014 0401 	ands.w	r4, r4, #1
   11a56:	d002      	beq.n	11a5e <_ZN9ClearCore13StatusManager8InstanceEv+0x12>
   11a58:	4b17      	ldr	r3, [pc, #92]	; (11ab8 <_ZN9ClearCore13StatusManager8InstanceEv+0x6c>)
   11a5a:	6818      	ldr	r0, [r3, #0]
   11a5c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   11a5e:	2044      	movs	r0, #68	; 0x44
   11a60:	f00b f96e 	bl	1cd40 <_Znwj>
   11a64:	4a14      	ldr	r2, [pc, #80]	; (11ab8 <_ZN9ClearCore13StatusManager8InstanceEv+0x6c>)
          m_strobeOnOffTicks(250),
          m_blinkTicks(2500),
          m_prestartTicks(5000),
          m_startTicks(11500),
          m_pregroupTicks(5000),
          m_precodeTicks(2500) {}
   11a66:	4f15      	ldr	r7, [pc, #84]	; (11abc <_ZN9ClearCore13StatusManager8InstanceEv+0x70>)
   11a68:	4e15      	ldr	r6, [pc, #84]	; (11ac0 <_ZN9ClearCore13StatusManager8InstanceEv+0x74>)
   11a6a:	4916      	ldr	r1, [pc, #88]	; (11ac4 <_ZN9ClearCore13StatusManager8InstanceEv+0x78>)

        /**
            Status Register default constructor
        **/
        StatusRegister() {
            reg = 0;
   11a6c:	6004      	str	r4, [r0, #0]
   11a6e:	2301      	movs	r3, #1
   11a70:	6044      	str	r4, [r0, #4]
   11a72:	6084      	str	r4, [r0, #8]
   11a74:	60c4      	str	r4, [r0, #12]
   11a76:	6104      	str	r4, [r0, #16]
    SysConnectorState() : reg(0) {}
   11a78:	6144      	str	r4, [r0, #20]
   11a7a:	6184      	str	r4, [r0, #24]
   11a7c:	61c4      	str	r4, [r0, #28]
   11a7e:	6244      	str	r4, [r0, #36]	; 0x24
   11a80:	f880 4028 	strb.w	r4, [r0, #40]	; 0x28
   11a84:	f880 402a 	strb.w	r4, [r0, #42]	; 0x2a
   11a88:	f880 402b 	strb.w	r4, [r0, #43]	; 0x2b
          m_statusRegAccum(),
          m_statusRegRisen(),
          m_statusRegFallen(),
          m_faultLed(ShiftRegister::SR_NO_FEEDBACK_MASK),
          m_disableMotors(false),
          m_hbridgeResetting(false) {}
   11a8c:	6204      	str	r4, [r0, #32]
   11a8e:	f880 4029 	strb.w	r4, [r0, #41]	; 0x29
   11a92:	8584      	strh	r4, [r0, #44]	; 0x2c
   11a94:	85c4      	strh	r4, [r0, #46]	; 0x2e
   11a96:	8604      	strh	r4, [r0, #48]	; 0x30
   11a98:	f880 4032 	strb.w	r4, [r0, #50]	; 0x32
   11a9c:	f880 4033 	strb.w	r4, [r0, #51]	; 0x33
   11aa0:	f880 4040 	strb.w	r4, [r0, #64]	; 0x40
   11aa4:	f880 4041 	strb.w	r4, [r0, #65]	; 0x41
   11aa8:	6347      	str	r7, [r0, #52]	; 0x34
   11aaa:	6386      	str	r6, [r0, #56]	; 0x38
   11aac:	63c1      	str	r1, [r0, #60]	; 0x3c
   11aae:	6010      	str	r0, [r2, #0]
   11ab0:	602b      	str	r3, [r5, #0]
    return *instance;
}
   11ab2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   11ab4:	20001fc4 	.word	0x20001fc4
   11ab8:	20001fcc 	.word	0x20001fcc
   11abc:	09c400fa 	.word	0x09c400fa
   11ac0:	2cec1388 	.word	0x2cec1388
   11ac4:	09c41388 	.word	0x09c41388

00011ac8 <_ZN9ClearCore13StatusManager8StatusRTENS0_14StatusRegisterE>:

StatusManager::StatusRegister StatusManager::StatusRT(StatusRegister mask) {
    StatusRegister statusReg;
    statusReg.reg = atomic_load_n(&m_statusRegRT.reg) & mask.reg;
   11ac8:	6840      	ldr	r0, [r0, #4]
   11aca:	f3bf 8f5b 	dmb	ish
    return statusReg;
}
   11ace:	4008      	ands	r0, r1
   11ad0:	4770      	bx	lr
   11ad2:	bf00      	nop

00011ad4 <_ZN9ClearCore13StatusManager14AdcIsInTimeoutEv>:
    statusReg.reg = atomic_load_n(&m_statusRegRT.reg) & mask.reg;
   11ad4:	6840      	ldr	r0, [r0, #4]
   11ad6:	f3bf 8f5b 	dmb	ish
}

bool StatusManager::AdcIsInTimeout() {
    StatusRegister statusReg = StatusRT();
    return statusReg.bit.AdcTimeout;
}
   11ada:	f3c0 2000 	ubfx	r0, r0, #8, #1
   11ade:	4770      	bx	lr

00011ae0 <_ZN9ClearCore13StatusManager10InitializeENS_13ShiftRegister5MasksE>:
inline bool HBridgeFaultCheck() {
    return (!static_cast<bool>(PORT->Group[OutFault_04or05.gpioPort].IN.reg &
                               (1UL << OutFault_04or05.gpioPin)));
}

bool StatusManager::Initialize(ShiftRegister::Masks faultLed) {
   11ae0:	b508      	push	{r3, lr}
    m_faultLed = faultLed;
    m_disableMotors = false;
   11ae2:	2300      	movs	r3, #0
    m_faultLed = faultLed;
   11ae4:	6201      	str	r1, [r0, #32]
    m_disableMotors = false;
   11ae6:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40
    m_statusRegSinceStartup = 0;
   11aea:	6003      	str	r3, [r0, #0]
    ShiftReg.DiagnosticLedSweep();
   11aec:	4802      	ldr	r0, [pc, #8]	; (11af8 <_ZN9ClearCore13StatusManager10InitializeENS_13ShiftRegister5MasksE+0x18>)
   11aee:	f7f8 f99b 	bl	9e28 <_ZN9ClearCore13ShiftRegister18DiagnosticLedSweepEv>

    return true;
}
   11af2:	2001      	movs	r0, #1
   11af4:	bd08      	pop	{r3, pc}
   11af6:	bf00      	nop
   11af8:	20001a80 	.word	0x20001a80

00011afc <_ZN9ClearCore13StatusManager12HBridgeStateEb>:
void StatusManager::HBridgeState(bool reset) {
    ClearCorePorts port = Vsupply_MON_IO_4and5_RST.gpioPort;
    uint32_t pin = Vsupply_MON_IO_4and5_RST.gpioPin;
    StatusRegister resetBit;
    resetBit.bit.HBridgeReset = 1;
    m_hbridgeResetting = reset;
   11afc:	f880 1041 	strb.w	r1, [r0, #65]	; 0x41

    if (reset) {
   11b00:	b951      	cbnz	r1, 11b18 <_ZN9ClearCore13StatusManager12HBridgeStateEb+0x1c>
        // Set the pin as an output
        DATA_DIRECTION_OUTPUT(port, 1UL << pin);
    }
    else {
        // Set the pin as an input
        DATA_DIRECTION_INPUT(port, 1UL << pin);
   11b02:	4b17      	ldr	r3, [pc, #92]	; (11b60 <_ZN9ClearCore13StatusManager12HBridgeStateEb+0x64>)
   11b04:	2204      	movs	r2, #4
   11b06:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
        // Enable the Peripheral Multiplexer
        PMUX_ENABLE(port, pin);
   11b0a:	f893 2142 	ldrb.w	r2, [r3, #322]	; 0x142
   11b0e:	f042 0201 	orr.w	r2, r2, #1
   11b12:	f883 2142 	strb.w	r2, [r3, #322]	; 0x142
   11b16:	4770      	bx	lr
        atomic_or_fetch(&m_statusRegRT.reg, resetBit.reg);
   11b18:	1d03      	adds	r3, r0, #4
   11b1a:	f3bf 8f5b 	dmb	ish
   11b1e:	e853 2f00 	ldrex	r2, [r3]
   11b22:	f042 0208 	orr.w	r2, r2, #8
   11b26:	e843 2100 	strex	r1, r2, [r3]
   11b2a:	2900      	cmp	r1, #0
   11b2c:	d1f7      	bne.n	11b1e <_ZN9ClearCore13StatusManager12HBridgeStateEb+0x22>
   11b2e:	f3bf 8f5b 	dmb	ish
        atomic_or_fetch(&m_statusRegRisen.reg, resetBit.reg);
   11b32:	f3bf 8f5b 	dmb	ish
   11b36:	300c      	adds	r0, #12
   11b38:	e850 3f00 	ldrex	r3, [r0]
   11b3c:	f043 0308 	orr.w	r3, r3, #8
   11b40:	e840 3200 	strex	r2, r3, [r0]
   11b44:	2a00      	cmp	r2, #0
   11b46:	d1f7      	bne.n	11b38 <_ZN9ClearCore13StatusManager12HBridgeStateEb+0x3c>
   11b48:	f3bf 8f5b 	dmb	ish
        PIN_CONFIGURATION(port, pin, PORT_PINCFG_INEN);
   11b4c:	4b04      	ldr	r3, [pc, #16]	; (11b60 <_ZN9ClearCore13StatusManager12HBridgeStateEb+0x64>)
        DATA_OUTPUT_STATE(port, 1UL << pin, true);
   11b4e:	2204      	movs	r2, #4
        PIN_CONFIGURATION(port, pin, PORT_PINCFG_INEN);
   11b50:	2102      	movs	r1, #2
   11b52:	f883 1142 	strb.w	r1, [r3, #322]	; 0x142
        DATA_OUTPUT_STATE(port, 1UL << pin, true);
   11b56:	f8c3 2118 	str.w	r2, [r3, #280]	; 0x118
        DATA_DIRECTION_OUTPUT(port, 1UL << pin);
   11b5a:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108
   11b5e:	4770      	bx	lr
   11b60:	41008000 	.word	0x41008000

00011b64 <_ZN9ClearCore13StatusManager9BlinkCodeENS_15BlinkCodeDriver15BlinkCodeGroupsEh>:

    /**
        Activate the given blink code.
    **/
    void CodeGroupAdd(uint8_t group, uint8_t codes) {
        m_codes[group] |= codes;
   11b64:	4401      	add	r1, r0
   11b66:	f891 3024 	ldrb.w	r3, [r1, #36]	; 0x24
   11b6a:	431a      	orrs	r2, r3
   11b6c:	f881 2024 	strb.w	r2, [r1, #36]	; 0x24
   11b70:	4770      	bx	lr
   11b72:	bf00      	nop

00011b74 <_ZN9ClearCore13StatusManager16UpdateBlinkCodesENS0_14StatusRegisterE>:
                              uint8_t mask) {
    m_blinkMgr.CodeGroupAdd(group, mask);
}

void StatusManager::UpdateBlinkCodes(StatusRegister status) {
    if (status.bit.VSupplyOverVoltage) {
   11b74:	b2cb      	uxtb	r3, r1
   11b76:	07da      	lsls	r2, r3, #31
void StatusManager::UpdateBlinkCodes(StatusRegister status) {
   11b78:	b510      	push	{r4, lr}
   11b7a:	4604      	mov	r4, r0
    if (status.bit.VSupplyOverVoltage) {
   11b7c:	d505      	bpl.n	11b8a <_ZN9ClearCore13StatusManager16UpdateBlinkCodesENS0_14StatusRegisterE+0x16>
   11b7e:	f890 2025 	ldrb.w	r2, [r0, #37]	; 0x25
   11b82:	f042 0202 	orr.w	r2, r2, #2
   11b86:	f880 2025 	strb.w	r2, [r0, #37]	; 0x25
        m_blinkMgr.CodeGroupAdd(
            BlinkCodeDriver::BLINK_GROUP_SUPPLY_ERROR,
            BlinkCodeDriver::SUPPLY_ERROR_VSUPPLY_HIGH);
    }
    if (status.bit.VSupplyUnderVoltage) {
   11b8a:	0798      	lsls	r0, r3, #30
   11b8c:	d505      	bpl.n	11b9a <_ZN9ClearCore13StatusManager16UpdateBlinkCodesENS0_14StatusRegisterE+0x26>
   11b8e:	f894 2025 	ldrb.w	r2, [r4, #37]	; 0x25
   11b92:	f042 0201 	orr.w	r2, r2, #1
   11b96:	f884 2025 	strb.w	r2, [r4, #37]	; 0x25
        m_blinkMgr.CodeGroupAdd(
            BlinkCodeDriver::BLINK_GROUP_SUPPLY_ERROR,
            BlinkCodeDriver::SUPPLY_ERROR_VSUPPLY_LOW);
    }
    if (status.bit.HBridgeOverloaded) {
   11b9a:	075a      	lsls	r2, r3, #29
   11b9c:	d505      	bpl.n	11baa <_ZN9ClearCore13StatusManager16UpdateBlinkCodesENS0_14StatusRegisterE+0x36>
   11b9e:	f894 2026 	ldrb.w	r2, [r4, #38]	; 0x26
   11ba2:	f042 0201 	orr.w	r2, r2, #1
   11ba6:	f884 2026 	strb.w	r2, [r4, #38]	; 0x26
        m_blinkMgr.CodeGroupAdd(
            BlinkCodeDriver::BLINK_GROUP_DEVICE_ERROR,
            BlinkCodeDriver::DEVICE_ERROR_HBRIDGE);
    }
    if (status.bit.Overloaded5V) {
   11baa:	06d8      	lsls	r0, r3, #27
   11bac:	d505      	bpl.n	11bba <_ZN9ClearCore13StatusManager16UpdateBlinkCodesENS0_14StatusRegisterE+0x46>
   11bae:	f894 2025 	ldrb.w	r2, [r4, #37]	; 0x25
   11bb2:	f042 0204 	orr.w	r2, r2, #4
   11bb6:	f884 2025 	strb.w	r2, [r4, #37]	; 0x25
        m_blinkMgr.CodeGroupAdd(
            BlinkCodeDriver::BLINK_GROUP_SUPPLY_ERROR,
            BlinkCodeDriver::SUPPLY_ERROR_5VOB_OVERLOAD);
    }
    if (status.bit.SdCardError) {
   11bba:	f3c1 2107 	ubfx	r1, r1, #8, #8
   11bbe:	06ca      	lsls	r2, r1, #27
   11bc0:	d505      	bpl.n	11bce <_ZN9ClearCore13StatusManager16UpdateBlinkCodesENS0_14StatusRegisterE+0x5a>
   11bc2:	f894 2026 	ldrb.w	r2, [r4, #38]	; 0x26
   11bc6:	f042 0202 	orr.w	r2, r2, #2
   11bca:	f884 2026 	strb.w	r2, [r4, #38]	; 0x26
            BlinkCodeDriver::BLINK_GROUP_DEVICE_ERROR,
            BlinkCodeDriver::DEVICE_ERROR_SD_CARD);
    }
    // Only report Ethernet problems if we called EthernetManager::Setup()
    // and expect Ethernet to be functional.
    if (EthernetMgr.EthernetActive() &&
   11bce:	4a14      	ldr	r2, [pc, #80]	; (11c20 <_ZN9ClearCore13StatusManager16UpdateBlinkCodesENS0_14StatusRegisterE+0xac>)
   11bd0:	6812      	ldr	r2, [r2, #0]
   11bd2:	f892 2061 	ldrb.w	r2, [r2, #97]	; 0x61
   11bd6:	b112      	cbz	r2, 11bde <_ZN9ClearCore13StatusManager16UpdateBlinkCodesENS0_14StatusRegisterE+0x6a>
   11bd8:	f011 0f0c 	tst.w	r1, #12
   11bdc:	d118      	bne.n	11c10 <_ZN9ClearCore13StatusManager16UpdateBlinkCodesENS0_14StatusRegisterE+0x9c>
             status.bit.EthernetPhyInitFailed)) {
        m_blinkMgr.CodeGroupAdd(
            BlinkCodeDriver::BLINK_GROUP_DEVICE_ERROR,
            BlinkCodeDriver::DEVICE_ERROR_ETHERNET);
    }
    if (status.bit.CcioLinkBroken) {
   11bde:	061b      	lsls	r3, r3, #24
   11be0:	d505      	bpl.n	11bee <_ZN9ClearCore13StatusManager16UpdateBlinkCodesENS0_14StatusRegisterE+0x7a>
   11be2:	f894 3026 	ldrb.w	r3, [r4, #38]	; 0x26
   11be6:	f043 0308 	orr.w	r3, r3, #8
   11bea:	f884 3026 	strb.w	r3, [r4, #38]	; 0x26
        m_blinkMgr.CodeGroupAdd(
            BlinkCodeDriver::BLINK_GROUP_DEVICE_ERROR,
            BlinkCodeDriver::DEVICE_ERROR_CCIO);
    }

    m_blinkMgr.Update();
   11bee:	f104 0024 	add.w	r0, r4, #36	; 0x24
   11bf2:	f001 fc29 	bl	13448 <_ZN9ClearCore15BlinkCodeDriver6UpdateEv>
        return m_blinkState != IDLE;
   11bf6:	f894 3029 	ldrb.w	r3, [r4, #41]	; 0x29
        underglow.
    **/
    void DiagnosticLedSweep();

    void BlinkCode(bool blinkCodeActive, bool blinkCodeState) {
        m_blinkCodeActive = blinkCodeActive;
   11bfa:	4a0a      	ldr	r2, [pc, #40]	; (11c24 <_ZN9ClearCore13StatusManager16UpdateBlinkCodesENS0_14StatusRegisterE+0xb0>)
    ShiftReg.BlinkCode(m_blinkMgr.CodePresent(), m_blinkMgr.LedState());
   11bfc:	f894 1032 	ldrb.w	r1, [r4, #50]	; 0x32
        m_blinkCodeState = blinkCodeState;
   11c00:	f882 110a 	strb.w	r1, [r2, #266]	; 0x10a
   11c04:	3300      	adds	r3, #0
   11c06:	bf18      	it	ne
   11c08:	2301      	movne	r3, #1
   11c0a:	f882 3109 	strb.w	r3, [r2, #265]	; 0x109
}
   11c0e:	bd10      	pop	{r4, pc}
        m_codes[group] |= codes;
   11c10:	f894 2026 	ldrb.w	r2, [r4, #38]	; 0x26
   11c14:	f042 0204 	orr.w	r2, r2, #4
   11c18:	f884 2026 	strb.w	r2, [r4, #38]	; 0x26
   11c1c:	e7df      	b.n	11bde <_ZN9ClearCore13StatusManager16UpdateBlinkCodesENS0_14StatusRegisterE+0x6a>
   11c1e:	bf00      	nop
   11c20:	20001ca0 	.word	0x20001ca0
   11c24:	20001a80 	.word	0x20001a80

00011c28 <_ZN9ClearCore13StatusManager7RefreshEv>:
void StatusManager::Refresh() {
   11c28:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   11c2c:	b082      	sub	sp, #8
            reg = 0;
   11c2e:	2300      	movs	r3, #0
   11c30:	9301      	str	r3, [sp, #4]
            AdcMgr.FilteredResult(AdcManager::ADC_VSUPPLY_MON) >=
   11c32:	4b98      	ldr	r3, [pc, #608]	; (11e94 <_ZN9ClearCore13StatusManager7RefreshEv+0x26c>)
    atomic_load(&m_statusRegRT.reg, &statusPrev.reg);
   11c34:	6844      	ldr	r4, [r0, #4]
   11c36:	f3bf 8f5b 	dmb	ish
            AdcMgr.FilteredResult(AdcManager::ADC_VSUPPLY_MON) >=
   11c3a:	681a      	ldr	r2, [r3, #0]
    return (!static_cast<bool>(PORT->Group[OutFault_04or05.gpioPort].IN.reg &
   11c3c:	4f96      	ldr	r7, [pc, #600]	; (11e98 <_ZN9ClearCore13StatusManager7RefreshEv+0x270>)
            AdcMgr.FilteredResult(AdcManager::ADC_VSUPPLY_MON) >=
   11c3e:	8a13      	ldrh	r3, [r2, #16]
   11c40:	f8df 8274 	ldr.w	r8, [pc, #628]	; 11eb8 <_ZN9ClearCore13StatusManager7RefreshEv+0x290>
        VSupplyOverVoltageCheck(statusPrev.bit.VSupplyOverVoltage);
   11c44:	b2e1      	uxtb	r1, r4
            OVER_VOLTAGE_EXIT_CNT) || (!currentStatus &&
   11c46:	07ce      	lsls	r6, r1, #31
void StatusManager::Refresh() {
   11c48:	4605      	mov	r5, r0
                                       AdcMgr.FilteredResult(AdcManager::ADC_VSUPPLY_MON) >=
   11c4a:	b29b      	uxth	r3, r3
    return (currentStatus &&
   11c4c:	bf4c      	ite	mi
   11c4e:	f642 4053 	movwmi	r0, #11347	; 0x2c53
            OVER_VOLTAGE_EXIT_CNT) || (!currentStatus &&
   11c52:	f243 20a8 	movwpl	r0, #12968	; 0x32a8
   11c56:	4283      	cmp	r3, r0
    statusPending.bit.VSupplyOverVoltage =
   11c58:	f89d 0004 	ldrb.w	r0, [sp, #4]
    statusPending.bit.EthernetDisconnect = !EthernetMgr.PhyLinkActive();
   11c5c:	4e8f      	ldr	r6, [pc, #572]	; (11e9c <_ZN9ClearCore13StatusManager7RefreshEv+0x274>)
            OVER_VOLTAGE_EXIT_CNT) || (!currentStatus &&
   11c5e:	bfd4      	ite	le
   11c60:	2300      	movle	r3, #0
   11c62:	2301      	movgt	r3, #1
    statusPending.bit.VSupplyOverVoltage =
   11c64:	f363 0000 	bfi	r0, r3, #0, #1
   11c68:	f88d 0004 	strb.w	r0, [sp, #4]
            AdcMgr.FilteredResult(AdcManager::ADC_VSUPPLY_MON) <
   11c6c:	8a13      	ldrh	r3, [r2, #16]
    statusPending.bit.EthernetDisconnect = !EthernetMgr.PhyLinkActive();
   11c6e:	6836      	ldr	r6, [r6, #0]
            UNDER_VOLTAGE_EXIT_CNT) || (!currentStatus &&
   11c70:	0788      	lsls	r0, r1, #30
                                        AdcMgr.FilteredResult(AdcManager::ADC_VSUPPLY_MON) <
   11c72:	b29b      	uxth	r3, r3
    return (currentStatus &&
   11c74:	bf4c      	ite	mi
   11c76:	f241 1069 	movwmi	r0, #4457	; 0x1169
            UNDER_VOLTAGE_EXIT_CNT) || (!currentStatus &&
   11c7a:	f640 70d3 	movwpl	r0, #4051	; 0xfd3
   11c7e:	4283      	cmp	r3, r0
    statusPending.bit.VSupplyUnderVoltage =
   11c80:	f89d 0004 	ldrb.w	r0, [sp, #4]
            UNDER_VOLTAGE_EXIT_CNT) || (!currentStatus &&
   11c84:	bfcc      	ite	gt
   11c86:	2300      	movgt	r3, #0
   11c88:	2301      	movle	r3, #1
    statusPending.bit.VSupplyUnderVoltage =
   11c8a:	f363 0041 	bfi	r0, r3, #1, #1
   11c8e:	f88d 0004 	strb.w	r0, [sp, #4]
            AdcMgr.FilteredResult(AdcManager::ADC_5VOB_MON) <
   11c92:	8a93      	ldrh	r3, [r2, #20]
    statusPending.bit.Overloaded5V =
   11c94:	f89d 0004 	ldrb.w	r0, [sp, #4]
            OFFBOARD_5V_EXIT_CNT) || (!currentStatus &&
   11c98:	06c9      	lsls	r1, r1, #27
                                      AdcMgr.FilteredResult(AdcManager::ADC_5VOB_MON) <
   11c9a:	b29b      	uxth	r3, r3
    return (currentStatus &&
   11c9c:	bf4c      	ite	mi
   11c9e:	f245 7144 	movwmi	r1, #22340	; 0x5744
            OFFBOARD_5V_EXIT_CNT) || (!currentStatus &&
   11ca2:	f644 5192 	movwpl	r1, #19858	; 0x4d92
   11ca6:	428b      	cmp	r3, r1
   11ca8:	bfcc      	ite	gt
   11caa:	2300      	movgt	r3, #0
   11cac:	2301      	movle	r3, #1
    statusPending.bit.Overloaded5V =
   11cae:	f363 1004 	bfi	r0, r3, #4, #1
   11cb2:	f88d 0004 	strb.w	r0, [sp, #4]
    return (!static_cast<bool>(PORT->Group[OutFault_04or05.gpioPort].IN.reg &
   11cb6:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
    statusPending.bit.HBridgeReset = m_hbridgeResetting;
   11cba:	f895 c041 	ldrb.w	ip, [r5, #65]	; 0x41
    statusPending.bit.AdcTimeout = AdcMgr.AdcTimeout();
   11cbe:	f892 e061 	ldrb.w	lr, [r2, #97]	; 0x61
   11cc2:	f89d 2005 	ldrb.w	r2, [sp, #5]
    statusPending.bit.CcioLinkBroken = CcioMgr.LinkBroken();
   11cc6:	4976      	ldr	r1, [pc, #472]	; (11ea0 <_ZN9ClearCore13StatusManager7RefreshEv+0x278>)
        static_cast<bool>(ShiftReg.OverloadActive());
   11cc8:	4f76      	ldr	r7, [pc, #472]	; (11ea4 <_ZN9ClearCore13StatusManager7RefreshEv+0x27c>)
    statusPending.bit.CcioLinkBroken = CcioMgr.LinkBroken();
   11cca:	6809      	ldr	r1, [r1, #0]
    statusPending.bit.HBridgeOverloaded = HBridgeFaultCheck();
   11ccc:	43db      	mvns	r3, r3
   11cce:	b2c0      	uxtb	r0, r0
   11cd0:	f363 0082 	bfi	r0, r3, #2, #1
    statusPending.bit.AdcTimeout = AdcMgr.AdcTimeout();
   11cd4:	f36e 0200 	bfi	r2, lr, #0, #1
    statusPending.bit.HBridgeReset = m_hbridgeResetting;
   11cd8:	b2c3      	uxtb	r3, r0
    statusPending.bit.AdcTimeout = AdcMgr.AdcTimeout();
   11cda:	f88d 2005 	strb.w	r2, [sp, #5]
    statusPending.bit.HBridgeReset = m_hbridgeResetting;
   11cde:	f36c 03c3 	bfi	r3, ip, #3, #1
        static_cast<bool>(ShiftReg.OverloadActive());
   11ce2:	f8d7 20f0 	ldr.w	r2, [r7, #240]	; 0xf0
    statusPending.bit.HBridgeOverloaded = HBridgeFaultCheck();
   11ce6:	f88d 0004 	strb.w	r0, [sp, #4]
    statusPending.bit.HBridgeReset = m_hbridgeResetting;
   11cea:	f88d 3004 	strb.w	r3, [sp, #4]
    statusPending.bit.CcioLinkBroken = CcioMgr.LinkBroken();
   11cee:	f891 e092 	ldrb.w	lr, [r1, #146]	; 0x92
        static_cast<bool>(ShiftReg.OverloadActive());
   11cf2:	3200      	adds	r2, #0
    statusPending.bit.CcioOverloaded = CcioMgr.IoOverloadRT();
   11cf4:	e9d1 0126 	ldrd	r0, r1, [r1, #152]	; 0x98
    statusPending.bit.OutputOverloaded =
   11cf8:	f89d 1004 	ldrb.w	r1, [sp, #4]
    statusPending.bit.EthernetDisconnect = !EthernetMgr.PhyLinkActive();
   11cfc:	f896 305c 	ldrb.w	r3, [r6, #92]	; 0x5c
        static_cast<bool>(ShiftReg.OverloadActive());
   11d00:	bf18      	it	ne
   11d02:	2201      	movne	r2, #1
    statusPending.bit.OutputOverloaded =
   11d04:	f362 1145 	bfi	r1, r2, #5, #1
    statusPending.bit.EthernetDisconnect = !EthernetMgr.PhyLinkActive();
   11d08:	f89d 2005 	ldrb.w	r2, [sp, #5]
    statusPending.bit.OutputOverloaded =
   11d0c:	f88d 1004 	strb.w	r1, [sp, #4]
    statusPending.bit.EthernetDisconnect = !EthernetMgr.PhyLinkActive();
   11d10:	f083 0301 	eor.w	r3, r3, #1
   11d14:	f363 0241 	bfi	r2, r3, #1, #1
   11d18:	f88d 2005 	strb.w	r2, [sp, #5]
    statusPending.bit.CcioLinkBroken = CcioMgr.LinkBroken();
   11d1c:	b2cb      	uxtb	r3, r1
    statusPending.bit.EthernetRemoteFault = EthernetMgr.PhyRemoteFault();
   11d1e:	f896 105d 	ldrb.w	r1, [r6, #93]	; 0x5d
    statusPending.bit.EthernetPhyInitFailed = EthernetMgr.PhyInitFailed();
   11d22:	f896 605e 	ldrb.w	r6, [r6, #94]	; 0x5e
    statusPending.bit.EthernetRemoteFault = EthernetMgr.PhyRemoteFault();
   11d26:	b2d2      	uxtb	r2, r2
   11d28:	f361 0282 	bfi	r2, r1, #2, #1
   11d2c:	f88d 2005 	strb.w	r2, [sp, #5]
    statusPending.bit.CcioLinkBroken = CcioMgr.LinkBroken();
   11d30:	f36e 13c7 	bfi	r3, lr, #7, #1
        \brief Check if the SD card is in a fault state

        \return True if an error code is present
    **/
    bool IsInFault() {
        return (m_errorCode != 0);
   11d34:	4a5c      	ldr	r2, [pc, #368]	; (11ea8 <_ZN9ClearCore13StatusManager7RefreshEv+0x280>)
   11d36:	f88d 3004 	strb.w	r3, [sp, #4]
    statusPending.bit.CcioOverloaded = CcioMgr.IoOverloadRT();
   11d3a:	f89d 1004 	ldrb.w	r1, [sp, #4]
   11d3e:	f892 2144 	ldrb.w	r2, [r2, #324]	; 0x144
    statusPending.bit.EthernetPhyInitFailed = EthernetMgr.PhyInitFailed();
   11d42:	f89d 3005 	ldrb.w	r3, [sp, #5]
   11d46:	3200      	adds	r2, #0
    statusPending.bit.CcioOverloaded = CcioMgr.IoOverloadRT();
   11d48:	f360 1186 	bfi	r1, r0, #6, #1
    statusPending.bit.NvmDesync = !NvmMgr.Synchonized();
   11d4c:	4857      	ldr	r0, [pc, #348]	; (11eac <_ZN9ClearCore13StatusManager7RefreshEv+0x284>)
    statusPending.bit.CcioOverloaded = CcioMgr.IoOverloadRT();
   11d4e:	f88d 1004 	strb.w	r1, [sp, #4]
   11d52:	bf18      	it	ne
   11d54:	2201      	movne	r2, #1
    statusPending.bit.EthernetPhyInitFailed = EthernetMgr.PhyInitFailed();
   11d56:	f366 03c3 	bfi	r3, r6, #3, #1
    statusPending.bit.SdCardError = SdCard.IsInFault();
   11d5a:	f362 1304 	bfi	r3, r2, #4, #1
    statusPending.bit.NvmDesync = !NvmMgr.Synchonized();
   11d5e:	6802      	ldr	r2, [r0, #0]
    if (hBridgeCon[0]->Mode() != Connector::OUTPUT_DIGITAL) {
   11d60:	4e53      	ldr	r6, [pc, #332]	; (11eb0 <_ZN9ClearCore13StatusManager7RefreshEv+0x288>)
    statusPending.bit.NvmDesync = !NvmMgr.Synchonized();
   11d62:	f892 2206 	ldrb.w	r2, [r2, #518]	; 0x206
   11d66:	f362 1345 	bfi	r3, r2, #5, #1
   11d6a:	f88d 3005 	strb.w	r3, [sp, #5]
    UpdateBlinkCodes(statusPending);
   11d6e:	4628      	mov	r0, r5
   11d70:	9901      	ldr	r1, [sp, #4]
   11d72:	f7ff feff 	bl	11b74 <_ZN9ClearCore13StatusManager16UpdateBlinkCodesENS0_14StatusRegisterE>
    if (hBridgeCon[0]->Mode() != Connector::OUTPUT_DIGITAL) {
   11d76:	6830      	ldr	r0, [r6, #0]
   11d78:	6803      	ldr	r3, [r0, #0]
   11d7a:	681b      	ldr	r3, [r3, #0]
   11d7c:	4543      	cmp	r3, r8
   11d7e:	f040 8084 	bne.w	11e8a <_ZN9ClearCore13StatusManager7RefreshEv+0x262>
   11d82:	7980      	ldrb	r0, [r0, #6]
   11d84:	2804      	cmp	r0, #4
   11d86:	d00c      	beq.n	11da2 <_ZN9ClearCore13StatusManager7RefreshEv+0x17a>
        ShiftReg.LedInFault(ShiftRegister::SR_LED_IO_4_MASK,
   11d88:	f89d 3004 	ldrb.w	r3, [sp, #4]
        if (state) {
   11d8c:	f013 0f04 	tst.w	r3, #4
            m_patternMasks[LED_BLINK_OVERLOAD] |= ledMask;
   11d90:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
   11d94:	bf14      	ite	ne
   11d96:	f043 0308 	orrne.w	r3, r3, #8
            m_patternMasks[LED_BLINK_OVERLOAD] &= ~ledMask;
   11d9a:	f023 0308 	biceq.w	r3, r3, #8
   11d9e:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
    if (hBridgeCon[1]->Mode() != Connector::OUTPUT_DIGITAL) {
   11da2:	6870      	ldr	r0, [r6, #4]
   11da4:	6803      	ldr	r3, [r0, #0]
   11da6:	681b      	ldr	r3, [r3, #0]
   11da8:	4543      	cmp	r3, r8
   11daa:	d170      	bne.n	11e8e <_ZN9ClearCore13StatusManager7RefreshEv+0x266>
   11dac:	7980      	ldrb	r0, [r0, #6]
   11dae:	2804      	cmp	r0, #4
   11db0:	d00c      	beq.n	11dcc <_ZN9ClearCore13StatusManager7RefreshEv+0x1a4>
        ShiftReg.LedInFault(ShiftRegister::SR_LED_IO_5_MASK,
   11db2:	f89d 3004 	ldrb.w	r3, [sp, #4]
        if (state) {
   11db6:	f013 0f04 	tst.w	r3, #4
            m_patternMasks[LED_BLINK_OVERLOAD] |= ledMask;
   11dba:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
   11dbe:	bf14      	ite	ne
   11dc0:	f043 0304 	orrne.w	r3, r3, #4
            m_patternMasks[LED_BLINK_OVERLOAD] &= ~ledMask;
   11dc4:	f023 0304 	biceq.w	r3, r3, #4
   11dc8:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
    atomic_load(&statusPending.reg, &m_statusRegRT.reg);
   11dcc:	9a01      	ldr	r2, [sp, #4]
   11dce:	f3bf 8f5b 	dmb	ish
    atomic_or_fetch(&m_statusRegFallen.reg,
   11dd2:	9b01      	ldr	r3, [sp, #4]
    atomic_load(&statusPending.reg, &m_statusRegRT.reg);
   11dd4:	606a      	str	r2, [r5, #4]
    atomic_or_fetch(&m_statusRegFallen.reg,
   11dd6:	ea24 0303 	bic.w	r3, r4, r3
                    statusPrev.reg & ~statusPending.reg);
   11dda:	f105 0210 	add.w	r2, r5, #16
   11dde:	f3bf 8f5b 	dmb	ish
   11de2:	e852 1f00 	ldrex	r1, [r2]
   11de6:	4319      	orrs	r1, r3
   11de8:	e842 1000 	strex	r0, r1, [r2]
   11dec:	2800      	cmp	r0, #0
   11dee:	d1f8      	bne.n	11de2 <_ZN9ClearCore13StatusManager7RefreshEv+0x1ba>
   11df0:	f3bf 8f5b 	dmb	ish
    atomic_or_fetch(&m_statusRegRisen.reg,
   11df4:	9a01      	ldr	r2, [sp, #4]
                    ~statusPrev.reg & statusPending.reg);
   11df6:	f3bf 8f5b 	dmb	ish
   11dfa:	f105 030c 	add.w	r3, r5, #12
    atomic_or_fetch(&m_statusRegRisen.reg,
   11dfe:	ea22 0404 	bic.w	r4, r2, r4
                    ~statusPrev.reg & statusPending.reg);
   11e02:	e853 2f00 	ldrex	r2, [r3]
   11e06:	4322      	orrs	r2, r4
   11e08:	e843 2100 	strex	r1, r2, [r3]
   11e0c:	2900      	cmp	r1, #0
   11e0e:	d1f8      	bne.n	11e02 <_ZN9ClearCore13StatusManager7RefreshEv+0x1da>
   11e10:	f3bf 8f5b 	dmb	ish
    atomic_or_fetch(&m_statusRegAccum.reg, statusPending.reg);
   11e14:	f105 0308 	add.w	r3, r5, #8
   11e18:	9a01      	ldr	r2, [sp, #4]
   11e1a:	f3bf 8f5b 	dmb	ish
   11e1e:	e853 1f00 	ldrex	r1, [r3]
   11e22:	4311      	orrs	r1, r2
   11e24:	e843 1000 	strex	r0, r1, [r3]
   11e28:	2800      	cmp	r0, #0
   11e2a:	d1f8      	bne.n	11e1e <_ZN9ClearCore13StatusManager7RefreshEv+0x1f6>
   11e2c:	f3bf 8f5b 	dmb	ish
    atomic_or_fetch(&m_statusRegSinceStartup.reg, statusPending.reg);
   11e30:	9b01      	ldr	r3, [sp, #4]
   11e32:	f3bf 8f5b 	dmb	ish
   11e36:	e855 2f00 	ldrex	r2, [r5]
   11e3a:	431a      	orrs	r2, r3
   11e3c:	e845 2100 	strex	r1, r2, [r5]
   11e40:	2900      	cmp	r1, #0
   11e42:	d1f8      	bne.n	11e36 <_ZN9ClearCore13StatusManager7RefreshEv+0x20e>
   11e44:	f3bf 8f5b 	dmb	ish
    m_disableMotors = m_statusRegRT.bit.VSupplyOverVoltage |
   11e48:	7929      	ldrb	r1, [r5, #4]
    bool disableMotorsPrev = m_disableMotors;
   11e4a:	f895 3040 	ldrb.w	r3, [r5, #64]	; 0x40
                      m_statusRegRT.bit.HBridgeReset;
   11e4e:	ea41 01d1 	orr.w	r1, r1, r1, lsr #3
    m_disableMotors = m_statusRegRT.bit.VSupplyOverVoltage |
   11e52:	f001 0101 	and.w	r1, r1, #1
    if (disableMotorsPrev != m_disableMotors) {
   11e56:	428b      	cmp	r3, r1
    m_disableMotors = m_statusRegRT.bit.VSupplyOverVoltage |
   11e58:	f885 1040 	strb.w	r1, [r5, #64]	; 0x40
    if (disableMotorsPrev != m_disableMotors) {
   11e5c:	d012      	beq.n	11e84 <_ZN9ClearCore13StatusManager7RefreshEv+0x25c>
   11e5e:	4c15      	ldr	r4, [pc, #84]	; (11eb4 <_ZN9ClearCore13StatusManager7RefreshEv+0x28c>)
   11e60:	f104 0710 	add.w	r7, r4, #16
            MotorConnectors[i]->FaultState(m_disableMotors);
   11e64:	f854 0b04 	ldr.w	r0, [r4], #4
   11e68:	f7fd fb36 	bl	f4d8 <_ZN9ClearCore11MotorDriver10FaultStateEb>
        for (uint8_t i = 0; i < MOTOR_CON_CNT; i++) {
   11e6c:	42bc      	cmp	r4, r7
            hBridgeCon[i]->FaultState(m_disableMotors);
   11e6e:	f895 1040 	ldrb.w	r1, [r5, #64]	; 0x40
        for (uint8_t i = 0; i < MOTOR_CON_CNT; i++) {
   11e72:	d1f7      	bne.n	11e64 <_ZN9ClearCore13StatusManager7RefreshEv+0x23c>
            hBridgeCon[i]->FaultState(m_disableMotors);
   11e74:	6830      	ldr	r0, [r6, #0]
   11e76:	f7fb fcd9 	bl	d82c <_ZN9ClearCore19DigitalInOutHBridge10FaultStateEb>
   11e7a:	f895 1040 	ldrb.w	r1, [r5, #64]	; 0x40
   11e7e:	6870      	ldr	r0, [r6, #4]
   11e80:	f7fb fcd4 	bl	d82c <_ZN9ClearCore19DigitalInOutHBridge10FaultStateEb>
}
   11e84:	b002      	add	sp, #8
   11e86:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if (hBridgeCon[0]->Mode() != Connector::OUTPUT_DIGITAL) {
   11e8a:	4798      	blx	r3
   11e8c:	e77a      	b.n	11d84 <_ZN9ClearCore13StatusManager7RefreshEv+0x15c>
    if (hBridgeCon[1]->Mode() != Connector::OUTPUT_DIGITAL) {
   11e8e:	4798      	blx	r3
   11e90:	e78d      	b.n	11dae <_ZN9ClearCore13StatusManager7RefreshEv+0x186>
   11e92:	bf00      	nop
   11e94:	20001eac 	.word	0x20001eac
   11e98:	41008000 	.word	0x41008000
   11e9c:	20001ca0 	.word	0x20001ca0
   11ea0:	20001fac 	.word	0x20001fac
   11ea4:	20001a80 	.word	0x20001a80
   11ea8:	20001934 	.word	0x20001934
   11eac:	20001fd4 	.word	0x20001fd4
   11eb0:	0002cd54 	.word	0x0002cd54
   11eb4:	0002cd5c 	.word	0x0002cd5c
   11eb8:	0000d7b5 	.word	0x0000d7b5

00011ebc <_ZN9ClearCore13StatusManager14OverloadUpdateEmb>:

void StatusManager::OverloadUpdate(uint32_t mask, bool inFault) {
    if (inFault) {
        m_overloadRT.reg |= mask;
   11ebc:	69c3      	ldr	r3, [r0, #28]
    if (inFault) {
   11ebe:	b94a      	cbnz	r2, 11ed4 <_ZN9ClearCore13StatusManager14OverloadUpdateEmb+0x18>
    }
    else {
        m_overloadRT.reg &= ~mask;
   11ec0:	ea23 0101 	bic.w	r1, r3, r1
    }
    m_overloadSinceStartup.reg |= m_overloadRT.reg;
   11ec4:	6942      	ldr	r2, [r0, #20]
    m_overloadAccum.reg |= m_overloadRT.reg;
   11ec6:	6983      	ldr	r3, [r0, #24]
   11ec8:	61c1      	str	r1, [r0, #28]
    m_overloadSinceStartup.reg |= m_overloadRT.reg;
   11eca:	430a      	orrs	r2, r1
    m_overloadAccum.reg |= m_overloadRT.reg;
   11ecc:	4319      	orrs	r1, r3
    m_overloadSinceStartup.reg |= m_overloadRT.reg;
   11ece:	6142      	str	r2, [r0, #20]
    m_overloadAccum.reg |= m_overloadRT.reg;
   11ed0:	6181      	str	r1, [r0, #24]
   11ed2:	4770      	bx	lr
        m_overloadRT.reg |= mask;
   11ed4:	4319      	orrs	r1, r3
   11ed6:	e7f5      	b.n	11ec4 <_ZN9ClearCore13StatusManager14OverloadUpdateEmb+0x8>

00011ed8 <_GLOBAL__sub_I__ZN9ClearCore9StatusMgrE>:
}

   11ed8:	b508      	push	{r3, lr}
StatusManager &StatusMgr = StatusManager::Instance();
   11eda:	f7ff fdb7 	bl	11a4c <_ZN9ClearCore13StatusManager8InstanceEv>
   11ede:	4b01      	ldr	r3, [pc, #4]	; (11ee4 <_GLOBAL__sub_I__ZN9ClearCore9StatusMgrE+0xc>)
   11ee0:	6018      	str	r0, [r3, #0]
   11ee2:	bd08      	pop	{r3, pc}
   11ee4:	20001fc8 	.word	0x20001fc8

00011ee8 <_ZN9ClearCore10XBeeDriverC1EPK15PeripheralRouteS3_S3_S3_h>:
namespace ClearCore {

/**
    Construct and wire into the board.
**/
XBeeDriver::XBeeDriver(const PeripheralRoute *ctsInfo,
   11ee8:	b530      	push	{r4, r5, lr}
   11eea:	b083      	sub	sp, #12
   11eec:	f89d 401c 	ldrb.w	r4, [sp, #28]
   11ef0:	9d06      	ldr	r5, [sp, #24]
                       const PeripheralRoute *rtsInfo,
                       const PeripheralRoute *rxInfo,
                       const PeripheralRoute *txInfo,
                       uint8_t peripheral)
    : SerialBase(ctsInfo, rtsInfo, rxInfo, txInfo, peripheral) {
   11ef2:	9401      	str	r4, [sp, #4]
   11ef4:	9500      	str	r5, [sp, #0]
XBeeDriver::XBeeDriver(const PeripheralRoute *ctsInfo,
   11ef6:	4604      	mov	r4, r0
    : SerialBase(ctsInfo, rtsInfo, rxInfo, txInfo, peripheral) {
   11ef8:	f7ff f8d4 	bl	110a4 <_ZN9ClearCore10SerialBaseC1EPK15PeripheralRouteS3_S3_S3_h>
   11efc:	4b04      	ldr	r3, [pc, #16]	; (11f10 <_ZN9ClearCore10XBeeDriverC1EPK15PeripheralRouteS3_S3_S3_h+0x28>)
   11efe:	6023      	str	r3, [r4, #0]
    PortMode(SerialBase::UART);
   11f00:	4620      	mov	r0, r4
   11f02:	2100      	movs	r1, #0
   11f04:	f7ff f92c 	bl	11160 <_ZN9ClearCore10SerialBase8PortModeENS0_9PortModesE>
}
   11f08:	4620      	mov	r0, r4
   11f0a:	b003      	add	sp, #12
   11f0c:	bd30      	pop	{r4, r5, pc}
   11f0e:	bf00      	nop
   11f10:	0002cd00 	.word	0x0002cd00

00011f14 <_ZN9ClearCore10NvmManager8InstanceEv>:
#define DEFAULT_MAC_ADDRESS 0x241510b00000

NvmManager &NvmMgr = NvmManager::Instance();
uint32_t NvmMgrUnlock;

NvmManager &NvmManager::Instance() {
   11f14:	b538      	push	{r3, r4, r5, lr}
    static NvmManager *instance = new NvmManager();
   11f16:	4d0f      	ldr	r5, [pc, #60]	; (11f54 <_ZN9ClearCore10NvmManager8InstanceEv+0x40>)
   11f18:	682b      	ldr	r3, [r5, #0]
   11f1a:	f013 0401 	ands.w	r4, r3, #1
   11f1e:	d002      	beq.n	11f26 <_ZN9ClearCore10NvmManager8InstanceEv+0x12>
   11f20:	4b0d      	ldr	r3, [pc, #52]	; (11f58 <_ZN9ClearCore10NvmManager8InstanceEv+0x44>)
   11f22:	6818      	ldr	r0, [r3, #0]
   11f24:	bd38      	pop	{r3, r4, r5, pc}
   11f26:	f44f 7002 	mov.w	r0, #520	; 0x208
   11f2a:	f00a ff09 	bl	1cd40 <_Znwj>
   11f2e:	4603      	mov	r3, r0
    // if the cache is disabled. 
    //NVMCTRL->CTRLA.bit.CACHEDIS0 = 1;
    //NVMCTRL->CTRLA.bit.CACHEDIS1 = 1;
    // Copy the contents of memory into a buffer
    memcpy(m_nvmPageCache, reinterpret_cast<const void *>(NVMCTRL_USER),
           NVMCTRL_PAGE_SIZE);
   11f30:	f44f 7200 	mov.w	r2, #512	; 0x200
      m_pageModified(false) {
   11f34:	f8c3 0200 	str.w	r0, [r3, #512]	; 0x200
           NVMCTRL_PAGE_SIZE);
   11f38:	4908      	ldr	r1, [pc, #32]	; (11f5c <_ZN9ClearCore10NvmManager8InstanceEv+0x48>)
      m_pageModified(false) {
   11f3a:	f880 4204 	strb.w	r4, [r0, #516]	; 0x204
   11f3e:	f880 4205 	strb.w	r4, [r0, #517]	; 0x205
   11f42:	f880 4206 	strb.w	r4, [r0, #518]	; 0x206
           NVMCTRL_PAGE_SIZE);
   11f46:	f015 fe8b 	bl	27c60 <memcpy>
    static NvmManager *instance = new NvmManager();
   11f4a:	4903      	ldr	r1, [pc, #12]	; (11f58 <_ZN9ClearCore10NvmManager8InstanceEv+0x44>)
   11f4c:	2201      	movs	r2, #1
   11f4e:	6008      	str	r0, [r1, #0]
   11f50:	602a      	str	r2, [r5, #0]
}
   11f52:	bd38      	pop	{r3, r4, r5, pc}
   11f54:	20001fd0 	.word	0x20001fd0
   11f58:	20001fd8 	.word	0x20001fd8
   11f5c:	00804000 	.word	0x00804000

00011f60 <_ZN9ClearCore10NvmManager5Int16ENS0_12NvmLocationsE>:
    if (nvmLocation >=
   11f60:	f5b1 7fef 	cmp.w	r1, #478	; 0x1de
    returnValue = address[0];
   11f64:	bf9a      	itte	ls
   11f66:	1840      	addls	r0, r0, r1
   11f68:	f9b0 0020 	ldrshls.w	r0, [r0, #32]
        return -1;
   11f6c:	f04f 30ff 	movhi.w	r0, #4294967295
}
   11f70:	4770      	bx	lr
   11f72:	bf00      	nop

00011f74 <_ZN9ClearCore10NvmManager10MacAddressEPh>:
}

void NvmManager::MacAddress(uint8_t *macAddress) {
   11f74:	b4f0      	push	{r4, r5, r6, r7}
    returnValue = (returnValue << 32) | val2;
   11f76:	f8d0 51f4 	ldr.w	r5, [r0, #500]	; 0x1f4
   11f7a:	f8d0 01f8 	ldr.w	r0, [r0, #504]	; 0x1f8
   11f7e:	2400      	movs	r4, #0
   11f80:	ea44 0200 	orr.w	r2, r4, r0
    uint64_t macNvm = Int64(NVM_LOC_MAC_FIRST);
    // If an invalid MAC address is detected, revert to 
    // the default MAC address to be able to come online.
    if (macNvm == UINT64_MAX || (macNvm >> 48)) {
   11f84:	1c6b      	adds	r3, r5, #1
   11f86:	bf08      	it	eq
   11f88:	f1b2 3fff 	cmpeq.w	r2, #4294967295
   11f8c:	d005      	beq.n	11f9a <_ZN9ClearCore10NvmManager10MacAddressEPh+0x26>
   11f8e:	0c2e      	lsrs	r6, r5, #16
   11f90:	4627      	mov	r7, r4
   11f92:	ea56 0007 	orrs.w	r0, r6, r7
   11f96:	462b      	mov	r3, r5
   11f98:	d002      	beq.n	11fa0 <_ZN9ClearCore10NvmManager10MacAddressEPh+0x2c>
        macNvm = DEFAULT_MAC_ADDRESS;
   11f9a:	4a07      	ldr	r2, [pc, #28]	; (11fb8 <_ZN9ClearCore10NvmManager10MacAddressEPh+0x44>)
   11f9c:	f242 4315 	movw	r3, #9237	; 0x2415
    }
    for (int8_t shift = 5; shift >= 0; shift--) {
        macAddress[5 - shift] = (macNvm >> shift * 8) & 0xFF;
   11fa0:	0a1e      	lsrs	r6, r3, #8
   11fa2:	0e15      	lsrs	r5, r2, #24
   11fa4:	0c14      	lsrs	r4, r2, #16
   11fa6:	0a10      	lsrs	r0, r2, #8
   11fa8:	700e      	strb	r6, [r1, #0]
   11faa:	708d      	strb	r5, [r1, #2]
   11fac:	70cc      	strb	r4, [r1, #3]
   11fae:	704b      	strb	r3, [r1, #1]
   11fb0:	714a      	strb	r2, [r1, #5]
   11fb2:	7108      	strb	r0, [r1, #4]
    }
}
   11fb4:	bcf0      	pop	{r4, r5, r6, r7}
   11fb6:	4770      	bx	lr
   11fb8:	10b00000 	.word	0x10b00000

00011fbc <_GLOBAL__sub_I__ZN9ClearCore6NvmMgrE>:
    //return StatusManager::Instance().StatusRT().bit.VSupplyUnderVoltage;
    return AdcManager::Instance().ConvertedResult(AdcManager::ADC_VSUPPLY_MON) 
           < UNDER_VOLTAGE_TRIP_CNT;
}

} // ClearCore namespace
   11fbc:	b508      	push	{r3, lr}
NvmManager &NvmMgr = NvmManager::Instance();
   11fbe:	f7ff ffa9 	bl	11f14 <_ZN9ClearCore10NvmManager8InstanceEv>
   11fc2:	4b01      	ldr	r3, [pc, #4]	; (11fc8 <_GLOBAL__sub_I__ZN9ClearCore6NvmMgrE+0xc>)
   11fc4:	6018      	str	r0, [r3, #0]
   11fc6:	bd08      	pop	{r3, pc}
   11fc8:	20001fd4 	.word	0x20001fd4

00011fcc <_dummy_func_no_return>:
static bool _dummy_func_no_return(uint32_t unused0, uint32_t unused1)
{
	(void)unused0;
	(void)unused1;
	return false;
}
   11fcc:	2000      	movs	r0, #0
   11fce:	4770      	bx	lr

00011fd0 <_usb_d_dev_in_next>:
 * \brief Prepare next IN transactions
 * \param[in] ept Pointer to endpoint information.
 * \param[in] isr Invoked from ISR.
 */
static void _usb_d_dev_in_next(struct _usb_d_dev_ep *ept, bool isr)
{
   11fd0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   11fd4:	4605      	mov	r5, r0
	Usb *              hw          = USB;
	uint8_t            epn         = USB_EP_GET_N(ept->ep);
   11fd6:	7c80      	ldrb	r0, [r0, #18]
	UsbDeviceDescBank *bank        = &prvt_inst.desc_table[epn].DeviceDescBank[0];
	uint16_t           trans_count = isr ? bank[1].PCKSIZE.bit.BYTE_COUNT : 0;
   11fd8:	460f      	mov	r7, r1
	uint8_t            epn         = USB_EP_GET_N(ept->ep);
   11fda:	f000 040f 	and.w	r4, r0, #15
	uint16_t           trans_count = isr ? bank[1].PCKSIZE.bit.BYTE_COUNT : 0;
   11fde:	2900      	cmp	r1, #0
   11fe0:	d04f      	beq.n	12082 <_usb_d_dev_in_next+0xb2>
	UsbDeviceDescBank *bank        = &prvt_inst.desc_table[epn].DeviceDescBank[0];
   11fe2:	4b55      	ldr	r3, [pc, #340]	; (12138 <_usb_d_dev_in_next+0x168>)
	uint16_t           trans_next;
	uint16_t           last_pkt = trans_count & ((ept->size == 1023) ? ept->size : (ept->size - 1));
   11fe4:	f8b5 e010 	ldrh.w	lr, [r5, #16]
	UsbDeviceDescBank *bank        = &prvt_inst.desc_table[epn].DeviceDescBank[0];
   11fe8:	eb03 1344 	add.w	r3, r3, r4, lsl #5
	uint16_t           last_pkt = trans_count & ((ept->size == 1023) ? ept->size : (ept->size - 1));
   11fec:	f240 36ff 	movw	r6, #1023	; 0x3ff
	uint16_t           trans_count = isr ? bank[1].PCKSIZE.bit.BYTE_COUNT : 0;
   11ff0:	695b      	ldr	r3, [r3, #20]
	uint16_t           last_pkt = trans_count & ((ept->size == 1023) ? ept->size : (ept->size - 1));
   11ff2:	45b6      	cmp	lr, r6
	uint16_t           trans_count = isr ? bank[1].PCKSIZE.bit.BYTE_COUNT : 0;
   11ff4:	f3c3 030d 	ubfx	r3, r3, #0, #14
   11ff8:	b299      	uxth	r1, r3
	uint16_t           last_pkt = trans_count & ((ept->size == 1023) ? ept->size : (ept->size - 1));
   11ffa:	f000 8095 	beq.w	12128 <_usb_d_dev_in_next+0x158>
   11ffe:	f10e 32ff 	add.w	r2, lr, #4294967295
	uint8_t            inten    = 0;
	bool               is_ctrl  = _usb_d_dev_ep_is_ctrl(ept);
   12002:	f895 c013 	ldrb.w	ip, [r5, #19]
   12006:	401a      	ands	r2, r3
   12008:	b292      	uxth	r2, r2
   1200a:	f00c 0807 	and.w	r8, ip, #7
}

static inline void hri_usbendpoint_clear_EPINTFLAG_reg(const void *const hw, uint8_t submodule_index,
                                                       hri_usbendpoint_epintflag_reg_t mask)
{
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg = mask;
   1200e:	0163      	lsls	r3, r4, #5
   12010:	f103 4382 	add.w	r3, r3, #1090519040	; 0x41000000
   12014:	2602      	movs	r6, #2
   12016:	f883 6107 	strb.w	r6, [r3, #263]	; 0x107

	if (isr) {
		_usbd_ep_ack_io_cpt(epn, 1);
	}

	ept->trans_count += trans_count;
   1201a:	68ab      	ldr	r3, [r5, #8]
	/* Send more data. */
	if (ept->trans_count < ept->trans_size) {
   1201c:	686e      	ldr	r6, [r5, #4]
	ept->trans_count += trans_count;
   1201e:	4419      	add	r1, r3
	if (ept->trans_count < ept->trans_size) {
   12020:	42b1      	cmp	r1, r6
	ept->trans_count += trans_count;
   12022:	60a9      	str	r1, [r5, #8]
	if (ept->trans_count < ept->trans_size) {
   12024:	d235      	bcs.n	12092 <_usb_d_dev_in_next+0xc2>
		trans_next = ept->trans_size - ept->trans_count;
   12026:	1a76      	subs	r6, r6, r1
		if (ept->flags.bits.use_cache) {
   12028:	f01c 0f20 	tst.w	ip, #32
		trans_next = ept->trans_size - ept->trans_count;
   1202c:	b2b6      	uxth	r6, r6
		if (ept->flags.bits.use_cache) {
   1202e:	d05e      	beq.n	120ee <_usb_d_dev_in_next+0x11e>
			if (trans_next > ept->size) {
				trans_next = ept->size;
			}
			memcpy(ept->cache, &ept->trans_buf[ept->trans_count], trans_next);
   12030:	682b      	ldr	r3, [r5, #0]
   12032:	68e8      	ldr	r0, [r5, #12]
   12034:	4576      	cmp	r6, lr
   12036:	bf28      	it	cs
   12038:	4676      	movcs	r6, lr
   1203a:	4419      	add	r1, r3
   1203c:	4632      	mov	r2, r6
   1203e:	f015 fe0f 	bl	27c60 <memcpy>
	bank->ADDR.reg          = addr;
   12042:	4b3d      	ldr	r3, [pc, #244]	; (12138 <_usb_d_dev_in_next+0x168>)
			_usbd_ep_set_buf(epn, 1, (uint32_t)ept->cache);
   12044:	68e8      	ldr	r0, [r5, #12]
	bank->ADDR.reg          = addr;
   12046:	0162      	lsls	r2, r4, #5
   12048:	1899      	adds	r1, r3, r2
   1204a:	6108      	str	r0, [r1, #16]
	bank->PCKSIZE.bit.BYTE_COUNT = size;
   1204c:	4413      	add	r3, r2
   1204e:	6959      	ldr	r1, [r3, #20]
   12050:	f366 010d 	bfi	r1, r6, #0, #14
   12054:	6159      	str	r1, [r3, #20]
	bank->PCKSIZE.bit.MULTI_PACKET_SIZE = count;
   12056:	6959      	ldr	r1, [r3, #20]
   12058:	f36f 319b 	bfc	r1, #14, #14
   1205c:	6159      	str	r1, [r3, #20]
	/* Finish normally. */
	_usb_d_dev_trans_done(ept, USB_TRANS_DONE);
	return;

_in_tx_exec:
	if (!isr) {
   1205e:	b947      	cbnz	r7, 12072 <_usb_d_dev_in_next+0xa2>
}

static inline void hri_usbendpoint_set_EPINTEN_reg(const void *const hw, uint8_t submodule_index,
                                                   hri_usbendpoint_epintenset_reg_t mask)
{
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENSET.reg = mask;
   12060:	f102 4382 	add.w	r3, r2, #1090519040	; 0x41000000
			/* Control endpoint: SETUP or OUT will abort IN transaction.
			 * SETUP: terminate the IN without any notification. Trigger
			 *        SETUP callback.
			 * OUT NAK: terminate IN.
			 */
			inten = USB_D_BANK1_INT_FLAGS | USB_DEVICE_EPINTFLAG_TRFAIL0;
   12064:	f1b8 0f01 	cmp.w	r8, #1
   12068:	bf14      	ite	ne
   1206a:	224a      	movne	r2, #74	; 0x4a
   1206c:	224e      	moveq	r2, #78	; 0x4e
   1206e:	f883 2109 	strb.w	r2, [r3, #265]	; 0x109
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSSET.reg = mask;
   12072:	0164      	lsls	r4, r4, #5
   12074:	f104 4482 	add.w	r4, r4, #1090519040	; 0x41000000
   12078:	2380      	movs	r3, #128	; 0x80
   1207a:	f884 3105 	strb.w	r3, [r4, #261]	; 0x105
   1207e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	bool               is_ctrl  = _usb_d_dev_ep_is_ctrl(ept);
   12082:	f895 c013 	ldrb.w	ip, [r5, #19]
	uint16_t           last_pkt = trans_count & ((ept->size == 1023) ? ept->size : (ept->size - 1));
   12086:	f8b5 e010 	ldrh.w	lr, [r5, #16]
	bool               is_ctrl  = _usb_d_dev_ep_is_ctrl(ept);
   1208a:	f00c 0807 	and.w	r8, ip, #7
   1208e:	460a      	mov	r2, r1
   12090:	e7c3      	b.n	1201a <_usb_d_dev_in_next+0x4a>
	} else if (ept->flags.bits.need_zlp) {
   12092:	f01c 0f10 	tst.w	ip, #16
   12096:	d11a      	bne.n	120ce <_usb_d_dev_in_next+0xfe>
}

static inline void hri_usbendpoint_clear_EPINTEN_reg(const void *const hw, uint8_t submodule_index,
                                                     hri_usbendpoint_epintenset_reg_t mask)
{
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENCLR.reg = mask;
   12098:	0164      	lsls	r4, r4, #5
	if (is_ctrl) {
   1209a:	f1b8 0f01 	cmp.w	r8, #1
   1209e:	f104 4482 	add.w	r4, r4, #1090519040	; 0x41000000
   120a2:	bf0c      	ite	eq
   120a4:	234b      	moveq	r3, #75	; 0x4b
   120a6:	234a      	movne	r3, #74	; 0x4a
	if (last_pkt == ept->size) {
   120a8:	4596      	cmp	lr, r2
   120aa:	f884 3108 	strb.w	r3, [r4, #264]	; 0x108
   120ae:	d02c      	beq.n	1210a <_usb_d_dev_in_next+0x13a>
 * \param[in, out] ept Pointer to endpoint information.
 * \param[in] code Information code passed.
 */
static void _usb_d_dev_trans_done(struct _usb_d_dev_ep *ept, const int32_t code)
{
	if (!(_usb_d_dev_ep_is_used(ept) && _usb_d_dev_ep_is_busy(ept))) {
   120b0:	28ff      	cmp	r0, #255	; 0xff
   120b2:	d028      	beq.n	12106 <_usb_d_dev_in_next+0x136>
   120b4:	7ceb      	ldrb	r3, [r5, #19]
   120b6:	065a      	lsls	r2, r3, #25
   120b8:	d525      	bpl.n	12106 <_usb_d_dev_in_next+0x136>
		return;
	}
	ept->flags.bits.is_busy = 0;
   120ba:	f36f 1386 	bfc	r3, #6, #1
	dev_inst.ep_callbacks.done(ept->ep, code, ept->trans_count);
   120be:	491f      	ldr	r1, [pc, #124]	; (1213c <_usb_d_dev_in_next+0x16c>)
	ept->flags.bits.is_busy = 0;
   120c0:	74eb      	strb	r3, [r5, #19]
	dev_inst.ep_callbacks.done(ept->ep, code, ept->trans_count);
   120c2:	68aa      	ldr	r2, [r5, #8]
   120c4:	690b      	ldr	r3, [r1, #16]
}
   120c6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	dev_inst.ep_callbacks.done(ept->ep, code, ept->trans_count);
   120ca:	2100      	movs	r1, #0
   120cc:	4718      	bx	r3
		ept->flags.bits.need_zlp = 0;
   120ce:	7ce9      	ldrb	r1, [r5, #19]
	bank->PCKSIZE.bit.BYTE_COUNT = size;
   120d0:	4b1b      	ldr	r3, [pc, #108]	; (12140 <_usb_d_dev_in_next+0x170>)
   120d2:	0162      	lsls	r2, r4, #5
   120d4:	4413      	add	r3, r2
		ept->flags.bits.need_zlp = 0;
   120d6:	f36f 1104 	bfc	r1, #4, #1
   120da:	74e9      	strb	r1, [r5, #19]
	bank->PCKSIZE.bit.BYTE_COUNT = size;
   120dc:	6859      	ldr	r1, [r3, #4]
   120de:	f36f 010d 	bfc	r1, #0, #14
   120e2:	6059      	str	r1, [r3, #4]
	bank->PCKSIZE.bit.MULTI_PACKET_SIZE = count;
   120e4:	6859      	ldr	r1, [r3, #4]
   120e6:	f36f 319b 	bfc	r1, #14, #14
   120ea:	6059      	str	r1, [r3, #4]
   120ec:	e7b7      	b.n	1205e <_usb_d_dev_in_next+0x8e>
	bank->ADDR.reg          = addr;
   120ee:	4b12      	ldr	r3, [pc, #72]	; (12138 <_usb_d_dev_in_next+0x168>)
			_usbd_ep_set_buf(epn, 1, (uint32_t)&ept->trans_buf[ept->trans_count]);
   120f0:	6828      	ldr	r0, [r5, #0]
	bank->ADDR.reg          = addr;
   120f2:	0162      	lsls	r2, r4, #5
   120f4:	189d      	adds	r5, r3, r2
			_usbd_ep_set_buf(epn, 1, (uint32_t)&ept->trans_buf[ept->trans_count]);
   120f6:	4401      	add	r1, r0
   120f8:	f5b6 5f00 	cmp.w	r6, #8192	; 0x2000
   120fc:	bf28      	it	cs
   120fe:	f44f 5600 	movcs.w	r6, #8192	; 0x2000
	bank->ADDR.reg          = addr;
   12102:	6129      	str	r1, [r5, #16]
   12104:	e7a2      	b.n	1204c <_usb_d_dev_in_next+0x7c>
   12106:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		ept->flags.bits.is_busy = 0;
   1210a:	7ceb      	ldrb	r3, [r5, #19]
		if (dev_inst.ep_callbacks.more(ept->ep, ept->trans_count)) {
   1210c:	4a0b      	ldr	r2, [pc, #44]	; (1213c <_usb_d_dev_in_next+0x16c>)
		ept->flags.bits.is_busy = 0;
   1210e:	f36f 1386 	bfc	r3, #6, #1
   12112:	74eb      	strb	r3, [r5, #19]
		if (dev_inst.ep_callbacks.more(ept->ep, ept->trans_count)) {
   12114:	68d3      	ldr	r3, [r2, #12]
   12116:	4798      	blx	r3
   12118:	2800      	cmp	r0, #0
   1211a:	d1f4      	bne.n	12106 <_usb_d_dev_in_next+0x136>
		ept->flags.bits.is_busy = 1;
   1211c:	7ceb      	ldrb	r3, [r5, #19]
   1211e:	7ca8      	ldrb	r0, [r5, #18]
   12120:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   12124:	74eb      	strb	r3, [r5, #19]
   12126:	e7c3      	b.n	120b0 <_usb_d_dev_in_next+0xe0>
	bool               is_ctrl  = _usb_d_dev_ep_is_ctrl(ept);
   12128:	f895 c013 	ldrb.w	ip, [r5, #19]
	uint16_t           last_pkt = trans_count & ((ept->size == 1023) ? ept->size : (ept->size - 1));
   1212c:	f3c1 0209 	ubfx	r2, r1, #0, #10
	bool               is_ctrl  = _usb_d_dev_ep_is_ctrl(ept);
   12130:	f00c 0807 	and.w	r8, ip, #7
   12134:	e76b      	b.n	1200e <_usb_d_dev_in_next+0x3e>
   12136:	bf00      	nop
   12138:	200022cc 	.word	0x200022cc
   1213c:	2000209c 	.word	0x2000209c
   12140:	200022dc 	.word	0x200022dc

00012144 <_usb_d_dev_out_next>:
{
   12144:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	uint8_t            epn        = USB_EP_GET_N(ept->ep);
   12148:	7c85      	ldrb	r5, [r0, #18]
{
   1214a:	b083      	sub	sp, #12
   1214c:	4604      	mov	r4, r0
	uint16_t           trans_size = isr ? bank->PCKSIZE.bit.MULTI_PACKET_SIZE : 0;
   1214e:	460f      	mov	r7, r1
	uint8_t            epn        = USB_EP_GET_N(ept->ep);
   12150:	f005 050f 	and.w	r5, r5, #15
	uint16_t           trans_size = isr ? bank->PCKSIZE.bit.MULTI_PACKET_SIZE : 0;
   12154:	2900      	cmp	r1, #0
   12156:	f000 8085 	beq.w	12264 <_usb_d_dev_out_next+0x120>
   1215a:	4b76      	ldr	r3, [pc, #472]	; (12334 <_usb_d_dev_out_next+0x1f0>)
	uint16_t           size_mask  = (ept->size == 1023) ? 1023 : (ept->size - 1);
   1215c:	8a06      	ldrh	r6, [r0, #16]
	uint16_t           trans_size = isr ? bank->PCKSIZE.bit.MULTI_PACKET_SIZE : 0;
   1215e:	ea4f 1845 	mov.w	r8, r5, lsl #5
   12162:	4443      	add	r3, r8
	uint16_t           size_mask  = (ept->size == 1023) ? 1023 : (ept->size - 1);
   12164:	f240 32ff 	movw	r2, #1023	; 0x3ff
	uint16_t           trans_size = isr ? bank->PCKSIZE.bit.MULTI_PACKET_SIZE : 0;
   12168:	6859      	ldr	r1, [r3, #4]
	uint16_t           last_trans = isr ? bank->PCKSIZE.bit.BYTE_COUNT : 0;
   1216a:	685b      	ldr	r3, [r3, #4]
	uint16_t           size_mask  = (ept->size == 1023) ? 1023 : (ept->size - 1);
   1216c:	4296      	cmp	r6, r2
	uint16_t           trans_size = isr ? bank->PCKSIZE.bit.MULTI_PACKET_SIZE : 0;
   1216e:	f3c1 3a8d 	ubfx	sl, r1, #14, #14
	uint16_t           last_trans = isr ? bank->PCKSIZE.bit.BYTE_COUNT : 0;
   12172:	f3c3 090d 	ubfx	r9, r3, #0, #14
	uint16_t           size_mask  = (ept->size == 1023) ? 1023 : (ept->size - 1);
   12176:	f000 80d7 	beq.w	12328 <_usb_d_dev_out_next+0x1e4>
   1217a:	3e01      	subs	r6, #1
	bool               is_ctrl = _usb_d_dev_ep_is_ctrl(ept);
   1217c:	7cc2      	ldrb	r2, [r0, #19]
   1217e:	b2b6      	uxth	r6, r6
   12180:	ea09 0306 	and.w	r3, r9, r6
   12184:	f002 0b07 	and.w	fp, r2, #7
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg = mask;
   12188:	0169      	lsls	r1, r5, #5
   1218a:	f101 4182 	add.w	r1, r1, #1090519040	; 0x41000000
   1218e:	2001      	movs	r0, #1
   12190:	f881 0107 	strb.w	r0, [r1, #263]	; 0x107
	if (ept->flags.bits.use_cache && ept->trans_size) {
   12194:	0691      	lsls	r1, r2, #26
   12196:	d512      	bpl.n	121be <_usb_d_dev_out_next+0x7a>
   12198:	f8d4 e004 	ldr.w	lr, [r4, #4]
   1219c:	f1be 0f00 	cmp.w	lr, #0
   121a0:	d048      	beq.n	12234 <_usb_d_dev_out_next+0xf0>
		uint16_t buf_remain = ept->trans_size - ept->trans_count;
   121a2:	68a0      	ldr	r0, [r4, #8]
		memcpy(&ept->trans_buf[ept->trans_count], ept->cache, (buf_remain > last_pkt) ? last_pkt : buf_remain);
   121a4:	9301      	str	r3, [sp, #4]
		uint16_t buf_remain = ept->trans_size - ept->trans_count;
   121a6:	ebae 0200 	sub.w	r2, lr, r0
   121aa:	b292      	uxth	r2, r2
		memcpy(&ept->trans_buf[ept->trans_count], ept->cache, (buf_remain > last_pkt) ? last_pkt : buf_remain);
   121ac:	429a      	cmp	r2, r3
   121ae:	bf28      	it	cs
   121b0:	461a      	movcs	r2, r3
   121b2:	6823      	ldr	r3, [r4, #0]
   121b4:	68e1      	ldr	r1, [r4, #12]
   121b6:	4418      	add	r0, r3
   121b8:	f015 fd52 	bl	27c60 <memcpy>
   121bc:	9b01      	ldr	r3, [sp, #4]
	if (ept->trans_size == 0 && ept->flags.bits.need_zlp) {
   121be:	6862      	ldr	r2, [r4, #4]
   121c0:	2a00      	cmp	r2, #0
   121c2:	d036      	beq.n	12232 <_usb_d_dev_out_next+0xee>
	} else if (isr && last_pkt < ept->size) {
   121c4:	2f00      	cmp	r7, #0
   121c6:	d15b      	bne.n	12280 <_usb_d_dev_out_next+0x13c>
		ept->trans_count += trans_size;
   121c8:	68a3      	ldr	r3, [r4, #8]
   121ca:	4453      	add	r3, sl
		if (ept->trans_count < ept->trans_size) {
   121cc:	429a      	cmp	r2, r3
		ept->trans_count += trans_size;
   121ce:	60a3      	str	r3, [r4, #8]
		if (ept->trans_count < ept->trans_size) {
   121d0:	d960      	bls.n	12294 <_usb_d_dev_out_next+0x150>
			if (ept->flags.bits.use_cache) {
   121d2:	7ce1      	ldrb	r1, [r4, #19]
			trans_next = ept->trans_size - ept->trans_count;
   121d4:	1ad2      	subs	r2, r2, r3
			if (ept->flags.bits.use_cache) {
   121d6:	0688      	lsls	r0, r1, #26
			trans_next = ept->trans_size - ept->trans_count;
   121d8:	b292      	uxth	r2, r2
			if (ept->flags.bits.use_cache) {
   121da:	f140 808b 	bpl.w	122f4 <_usb_d_dev_out_next+0x1b0>
   121de:	8a26      	ldrh	r6, [r4, #16]
	bank->ADDR.reg          = addr;
   121e0:	4954      	ldr	r1, [pc, #336]	; (12334 <_usb_d_dev_out_next+0x1f0>)
				_usbd_ep_set_buf(epn, 0, (uint32_t)ept->cache);
   121e2:	68e3      	ldr	r3, [r4, #12]
	bank->ADDR.reg          = addr;
   121e4:	f841 3008 	str.w	r3, [r1, r8]
   121e8:	42b2      	cmp	r2, r6
   121ea:	bf28      	it	cs
   121ec:	4632      	movcs	r2, r6
   121ee:	f3c2 020d 	ubfx	r2, r2, #0, #14
	bank->PCKSIZE.bit.MULTI_PACKET_SIZE = size;
   121f2:	eb01 0308 	add.w	r3, r1, r8
   121f6:	6858      	ldr	r0, [r3, #4]
   121f8:	f362 309b 	bfi	r0, r2, #14, #14
   121fc:	6058      	str	r0, [r3, #4]
	bank->PCKSIZE.bit.BYTE_COUNT = count;
   121fe:	685a      	ldr	r2, [r3, #4]
   12200:	f36f 020d 	bfc	r2, #0, #14
   12204:	605a      	str	r2, [r3, #4]
	if (!isr) {
   12206:	b95f      	cbnz	r7, 12220 <_usb_d_dev_out_next+0xdc>
		if (is_ctrl) {
   12208:	f1bb 0f01 	cmp.w	fp, #1
	bank->STATUS_BK.reg     = 0;
   1220c:	bf08      	it	eq
   1220e:	4441      	addeq	r1, r8
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENSET.reg = mask;
   12210:	f108 4882 	add.w	r8, r8, #1090519040	; 0x41000000
			inten = USB_D_BANK0_INT_FLAGS | USB_DEVICE_EPINTFLAG_TRFAIL1;
   12214:	bf0a      	itet	eq
   12216:	232d      	moveq	r3, #45	; 0x2d
			inten = USB_D_BANK0_INT_FLAGS;
   12218:	2325      	movne	r3, #37	; 0x25
	bank->STATUS_BK.reg     = 0;
   1221a:	768f      	strbeq	r7, [r1, #26]
   1221c:	f888 3109 	strb.w	r3, [r8, #265]	; 0x109
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSCLR.reg = mask;
   12220:	016d      	lsls	r5, r5, #5
   12222:	f105 4582 	add.w	r5, r5, #1090519040	; 0x41000000
   12226:	2340      	movs	r3, #64	; 0x40
   12228:	f885 3104 	strb.w	r3, [r5, #260]	; 0x104
}
   1222c:	b003      	add	sp, #12
   1222e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   12232:	7ce2      	ldrb	r2, [r4, #19]
	if (ept->trans_size == 0 && ept->flags.bits.need_zlp) {
   12234:	06d6      	lsls	r6, r2, #27
   12236:	d54b      	bpl.n	122d0 <_usb_d_dev_out_next+0x18c>
		ept->flags.bits.need_zlp  = 0;
   12238:	7ce3      	ldrb	r3, [r4, #19]
	bank->ADDR.reg          = addr;
   1223a:	493e      	ldr	r1, [pc, #248]	; (12334 <_usb_d_dev_out_next+0x1f0>)
		_usbd_ep_set_buf(epn, 0, (uint32_t)ept->cache);
   1223c:	68e2      	ldr	r2, [r4, #12]
		ept->flags.bits.use_cache = 1;
   1223e:	f003 03ef 	and.w	r3, r3, #239	; 0xef
   12242:	f043 0320 	orr.w	r3, r3, #32
   12246:	74e3      	strb	r3, [r4, #19]
	bank->ADDR.reg          = addr;
   12248:	f841 2008 	str.w	r2, [r1, r8]
   1224c:	eb01 0308 	add.w	r3, r1, r8
	bank->PCKSIZE.bit.MULTI_PACKET_SIZE = size;
   12250:	8a20      	ldrh	r0, [r4, #16]
   12252:	685a      	ldr	r2, [r3, #4]
   12254:	f360 329b 	bfi	r2, r0, #14, #14
   12258:	605a      	str	r2, [r3, #4]
	bank->PCKSIZE.bit.BYTE_COUNT = count;
   1225a:	685a      	ldr	r2, [r3, #4]
   1225c:	f36f 020d 	bfc	r2, #0, #14
   12260:	605a      	str	r2, [r3, #4]
   12262:	e7d0      	b.n	12206 <_usb_d_dev_out_next+0xc2>
	uint16_t           size_mask  = (ept->size == 1023) ? 1023 : (ept->size - 1);
   12264:	8a06      	ldrh	r6, [r0, #16]
	bool               is_ctrl = _usb_d_dev_ep_is_ctrl(ept);
   12266:	7cc2      	ldrb	r2, [r0, #19]
	uint16_t           size_mask  = (ept->size == 1023) ? 1023 : (ept->size - 1);
   12268:	f240 33ff 	movw	r3, #1023	; 0x3ff
   1226c:	429e      	cmp	r6, r3
   1226e:	d137      	bne.n	122e0 <_usb_d_dev_out_next+0x19c>
	uint16_t           trans_size = isr ? bank->PCKSIZE.bit.MULTI_PACKET_SIZE : 0;
   12270:	46ba      	mov	sl, r7
	bool               is_ctrl = _usb_d_dev_ep_is_ctrl(ept);
   12272:	f002 0b07 	and.w	fp, r2, #7
	uint16_t           last_pkt   = last_trans & size_mask;
   12276:	463b      	mov	r3, r7
	uint16_t           last_trans = isr ? bank->PCKSIZE.bit.BYTE_COUNT : 0;
   12278:	46b9      	mov	r9, r7
   1227a:	ea4f 1845 	mov.w	r8, r5, lsl #5
   1227e:	e789      	b.n	12194 <_usb_d_dev_out_next+0x50>
	} else if (isr && last_pkt < ept->size) {
   12280:	8a21      	ldrh	r1, [r4, #16]
   12282:	4299      	cmp	r1, r3
   12284:	d9a0      	bls.n	121c8 <_usb_d_dev_out_next+0x84>
		ept->flags.bits.need_zlp = 0;
   12286:	7ce2      	ldrb	r2, [r4, #19]
		ept->trans_count += last_trans;
   12288:	68a3      	ldr	r3, [r4, #8]
		ept->flags.bits.need_zlp = 0;
   1228a:	f36f 1204 	bfc	r2, #4, #1
		ept->trans_count += last_trans;
   1228e:	444b      	add	r3, r9
		ept->flags.bits.need_zlp = 0;
   12290:	74e2      	strb	r2, [r4, #19]
		ept->trans_count += last_trans;
   12292:	60a3      	str	r3, [r4, #8]
	if (is_ctrl) {
   12294:	f1bb 0f01 	cmp.w	fp, #1
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENCLR.reg = mask;
   12298:	f108 4882 	add.w	r8, r8, #1090519040	; 0x41000000
   1229c:	bf0c      	ite	eq
   1229e:	232d      	moveq	r3, #45	; 0x2d
   122a0:	2325      	movne	r3, #37	; 0x25
   122a2:	f888 3108 	strb.w	r3, [r8, #264]	; 0x108
	if (0 == epn) {
   122a6:	b915      	cbnz	r5, 122ae <_usb_d_dev_out_next+0x16a>
	bank->ADDR.reg          = addr;
   122a8:	4b22      	ldr	r3, [pc, #136]	; (12334 <_usb_d_dev_out_next+0x1f0>)
		_usbd_ep_set_buf(epn, 0, (uint32_t)ept->cache);
   122aa:	68e2      	ldr	r2, [r4, #12]
	bank->ADDR.reg          = addr;
   122ac:	601a      	str	r2, [r3, #0]
	if (!(_usb_d_dev_ep_is_used(ept) && _usb_d_dev_ep_is_busy(ept))) {
   122ae:	7ca0      	ldrb	r0, [r4, #18]
   122b0:	28ff      	cmp	r0, #255	; 0xff
   122b2:	d0bb      	beq.n	1222c <_usb_d_dev_out_next+0xe8>
   122b4:	7ce3      	ldrb	r3, [r4, #19]
   122b6:	065a      	lsls	r2, r3, #25
   122b8:	d5b8      	bpl.n	1222c <_usb_d_dev_out_next+0xe8>
	ept->flags.bits.is_busy = 0;
   122ba:	f36f 1386 	bfc	r3, #6, #1
	dev_inst.ep_callbacks.done(ept->ep, code, ept->trans_count);
   122be:	491e      	ldr	r1, [pc, #120]	; (12338 <_usb_d_dev_out_next+0x1f4>)
	ept->flags.bits.is_busy = 0;
   122c0:	74e3      	strb	r3, [r4, #19]
	dev_inst.ep_callbacks.done(ept->ep, code, ept->trans_count);
   122c2:	690b      	ldr	r3, [r1, #16]
   122c4:	68a2      	ldr	r2, [r4, #8]
   122c6:	2100      	movs	r1, #0
}
   122c8:	b003      	add	sp, #12
   122ca:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	dev_inst.ep_callbacks.done(ept->ep, code, ept->trans_count);
   122ce:	4718      	bx	r3
	} else if (isr && last_pkt < ept->size) {
   122d0:	b117      	cbz	r7, 122d8 <_usb_d_dev_out_next+0x194>
   122d2:	8a22      	ldrh	r2, [r4, #16]
   122d4:	429a      	cmp	r2, r3
   122d6:	d8d6      	bhi.n	12286 <_usb_d_dev_out_next+0x142>
		ept->trans_count += trans_size;
   122d8:	68a3      	ldr	r3, [r4, #8]
   122da:	4453      	add	r3, sl
   122dc:	60a3      	str	r3, [r4, #8]
   122de:	e7d9      	b.n	12294 <_usb_d_dev_out_next+0x150>
   122e0:	3e01      	subs	r6, #1
   122e2:	b2b6      	uxth	r6, r6
	bool               is_ctrl = _usb_d_dev_ep_is_ctrl(ept);
   122e4:	f002 0b07 	and.w	fp, r2, #7
	uint16_t           trans_size = isr ? bank->PCKSIZE.bit.MULTI_PACKET_SIZE : 0;
   122e8:	468a      	mov	sl, r1
	bool               is_ctrl = _usb_d_dev_ep_is_ctrl(ept);
   122ea:	460b      	mov	r3, r1
	uint16_t           last_trans = isr ? bank->PCKSIZE.bit.BYTE_COUNT : 0;
   122ec:	4689      	mov	r9, r1
   122ee:	ea4f 1845 	mov.w	r8, r5, lsl #5
   122f2:	e74f      	b.n	12194 <_usb_d_dev_out_next+0x50>
				if (trans_next > ept->size) {
   122f4:	8a20      	ldrh	r0, [r4, #16]
   122f6:	4282      	cmp	r2, r0
   122f8:	d905      	bls.n	12306 <_usb_d_dev_out_next+0x1c2>
					if (trans_next > USB_D_DEV_TRANS_MAX) {
   122fa:	f5b2 5f00 	cmp.w	r2, #8192	; 0x2000
   122fe:	d90e      	bls.n	1231e <_usb_d_dev_out_next+0x1da>
   12300:	f44f 5200 	mov.w	r2, #8192	; 0x2000
   12304:	e005      	b.n	12312 <_usb_d_dev_out_next+0x1ce>
					ept->flags.bits.use_cache = 1;
   12306:	bf3c      	itt	cc
   12308:	f041 0120 	orrcc.w	r1, r1, #32
   1230c:	74e1      	strbcc	r1, [r4, #19]
   1230e:	f3c2 020d 	ubfx	r2, r2, #0, #14
				_usbd_ep_set_buf(epn, 0, (uint32_t)&ept->trans_buf[ept->trans_count]);
   12312:	6820      	ldr	r0, [r4, #0]
	bank->ADDR.reg          = addr;
   12314:	4907      	ldr	r1, [pc, #28]	; (12334 <_usb_d_dev_out_next+0x1f0>)
				_usbd_ep_set_buf(epn, 0, (uint32_t)&ept->trans_buf[ept->trans_count]);
   12316:	4403      	add	r3, r0
	bank->ADDR.reg          = addr;
   12318:	f841 3008 	str.w	r3, [r1, r8]
   1231c:	e769      	b.n	121f2 <_usb_d_dev_out_next+0xae>
   1231e:	ea22 0206 	bic.w	r2, r2, r6
   12322:	f3c2 020d 	ubfx	r2, r2, #0, #14
   12326:	e7f4      	b.n	12312 <_usb_d_dev_out_next+0x1ce>
	bool               is_ctrl = _usb_d_dev_ep_is_ctrl(ept);
   12328:	7cc2      	ldrb	r2, [r0, #19]
	uint16_t           last_pkt   = last_trans & size_mask;
   1232a:	f3c9 0309 	ubfx	r3, r9, #0, #10
	bool               is_ctrl = _usb_d_dev_ep_is_ctrl(ept);
   1232e:	f002 0b07 	and.w	fp, r2, #7
   12332:	e729      	b.n	12188 <_usb_d_dev_out_next+0x44>
   12334:	200022cc 	.word	0x200022cc
   12338:	2000209c 	.word	0x2000209c

0001233c <_usb_d_dev_handler>:
{
   1233c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	uint16_t epint = hw->DEVICE.EPINTSMRY.reg;
   12340:	f04f 4282 	mov.w	r2, #1090519040	; 0x41000000
{
   12344:	b081      	sub	sp, #4
	uint16_t epint = hw->DEVICE.EPINTSMRY.reg;
   12346:	8c16      	ldrh	r6, [r2, #32]
   12348:	b2b6      	uxth	r6, r6
	if (0 == epint) {
   1234a:	2e00      	cmp	r6, #0
   1234c:	f000 812c 	beq.w	125a8 <_usb_d_dev_handler+0x26c>
   12350:	4dc4      	ldr	r5, [pc, #784]	; (12664 <_usb_d_dev_handler+0x328>)
	((Usb *)hw)->DEVICE.INTENCLR.reg = USB_DEVICE_INTENSET_LPMSUSP;
}

static inline void hri_usbdevice_set_INTEN_reg(const void *const hw, hri_usbdevice_intenset_reg_t mask)
{
	((Usb *)hw)->DEVICE.INTENSET.reg = mask;
   12352:	2400      	movs	r4, #0
	if (!(epint & (1u << epn))) {
   12354:	2701      	movs	r7, #1
		if (ept->ep == 0xFF) {
   12356:	7ca8      	ldrb	r0, [r5, #18]
   12358:	28ff      	cmp	r0, #255	; 0xff
   1235a:	d030      	beq.n	123be <_usb_d_dev_handler+0x82>
	uint8_t epn = USB_EP_GET_N(ept->ep);
   1235c:	f000 030f 	and.w	r3, r0, #15
	if (!(epint & (1u << epn))) {
   12360:	fa07 f203 	lsl.w	r2, r7, r3
   12364:	4232      	tst	r2, r6
   12366:	d02a      	beq.n	123be <_usb_d_dev_handler+0x82>
   12368:	ea4f 1e43 	mov.w	lr, r3, lsl #5
   1236c:	f10e 4882 	add.w	r8, lr, #1090519040	; 0x41000000
	mask  = hw->DEVICE.DeviceEndpoint[epn].EPINTENSET.reg;
   12370:	4672      	mov	r2, lr
	flags = hw->DEVICE.DeviceEndpoint[epn].EPINTFLAG.reg;
   12372:	f898 1107 	ldrb.w	r1, [r8, #263]	; 0x107
	mask  = hw->DEVICE.DeviceEndpoint[epn].EPINTENSET.reg;
   12376:	f898 3109 	ldrb.w	r3, [r8, #265]	; 0x109
	if (flags) {
   1237a:	400b      	ands	r3, r1
	mask  = hw->DEVICE.DeviceEndpoint[epn].EPINTENSET.reg;
   1237c:	46c1      	mov	r9, r8
	if (flags) {
   1237e:	d01e      	beq.n	123be <_usb_d_dev_handler+0x82>
		if ((ept->flags.bits.eptype == 0x1) && !_usb_d_dev_ep_is_busy(ept)) {
   12380:	49b9      	ldr	r1, [pc, #740]	; (12668 <_usb_d_dev_handler+0x32c>)
   12382:	ea4f 0a84 	mov.w	sl, r4, lsl #2
   12386:	eb0a 0c04 	add.w	ip, sl, r4
   1238a:	eb01 0c8c 	add.w	ip, r1, ip, lsl #2
   1238e:	f89c b027 	ldrb.w	fp, [ip, #39]	; 0x27
   12392:	f00b 0147 	and.w	r1, fp, #71	; 0x47
   12396:	2901      	cmp	r1, #1
   12398:	f000 80f4 	beq.w	12584 <_usb_d_dev_handler+0x248>
		} else if (_usb_d_dev_ep_is_in(ept)) {
   1239c:	f01b 0f80 	tst.w	fp, #128	; 0x80
   123a0:	d115      	bne.n	123ce <_usb_d_dev_handler+0x92>
	if (flags & USB_DEVICE_EPINTFLAG_STALL0) {
   123a2:	f013 0120 	ands.w	r1, r3, #32
   123a6:	d15a      	bne.n	1245e <_usb_d_dev_handler+0x122>
	} else if (flags & USB_DEVICE_EPINTFLAG_TRFAIL0) {
   123a8:	f013 0f04 	tst.w	r3, #4
   123ac:	f040 8098 	bne.w	124e0 <_usb_d_dev_handler+0x1a4>
	} else if (flags & USB_DEVICE_EPINTFLAG_TRCPT0) {
   123b0:	07d9      	lsls	r1, r3, #31
   123b2:	f100 80e2 	bmi.w	1257a <_usb_d_dev_handler+0x23e>
	} else if (_usb_d_dev_ep_is_ctrl(ept)) {
   123b6:	f00b 0107 	and.w	r1, fp, #7
   123ba:	2901      	cmp	r1, #1
   123bc:	d058      	beq.n	12470 <_usb_d_dev_handler+0x134>
   123be:	3401      	adds	r4, #1
	for (i = 0; i < USB_D_N_EP; i++) {
   123c0:	2c1b      	cmp	r4, #27
   123c2:	f105 0514 	add.w	r5, r5, #20
   123c6:	d1c6      	bne.n	12356 <_usb_d_dev_handler+0x1a>
}
   123c8:	b001      	add	sp, #4
   123ca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	if (flags & USB_DEVICE_EPINTFLAG_STALL1) {
   123ce:	f013 0140 	ands.w	r1, r3, #64	; 0x40
   123d2:	f040 8143 	bne.w	1265c <_usb_d_dev_handler+0x320>
	} else if (flags & USB_DEVICE_EPINTFLAG_TRFAIL1) {
   123d6:	f013 0f08 	tst.w	r3, #8
   123da:	f040 8189 	bne.w	126f0 <_usb_d_dev_handler+0x3b4>
	} else if (flags & USB_DEVICE_EPINTFLAG_TRCPT1) {
   123de:	0799      	lsls	r1, r3, #30
   123e0:	f100 8137 	bmi.w	12652 <_usb_d_dev_handler+0x316>
	} else if (_usb_d_dev_ep_is_ctrl(ept)) {
   123e4:	f00b 0107 	and.w	r1, fp, #7
   123e8:	2901      	cmp	r1, #1
   123ea:	d1e8      	bne.n	123be <_usb_d_dev_handler+0x82>
		if (flags & USB_DEVICE_EPINTFLAG_TRFAIL0) {
   123ec:	0759      	lsls	r1, r3, #29
   123ee:	f100 8241 	bmi.w	12874 <_usb_d_dev_handler+0x538>
		} else if (flags & USB_DEVICE_EPINTFLAG_RXSTP) {
   123f2:	06db      	lsls	r3, r3, #27
   123f4:	d5e3      	bpl.n	123be <_usb_d_dev_handler+0x82>
	if (_usb_d_dev_ep_is_busy(ept)) {
   123f6:	f01b 0f40 	tst.w	fp, #64	; 0x40
   123fa:	d011      	beq.n	12420 <_usb_d_dev_handler+0xe4>
		ept->flags.bits.is_busy = 0;
   123fc:	499a      	ldr	r1, [pc, #616]	; (12668 <_usb_d_dev_handler+0x32c>)
   123fe:	eb0a 0304 	add.w	r3, sl, r4
   12402:	eb01 0383 	add.w	r3, r1, r3, lsl #2
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSCLR.reg = mask;
   12406:	f04f 0e80 	mov.w	lr, #128	; 0x80
   1240a:	f893 1027 	ldrb.w	r1, [r3, #39]	; 0x27
   1240e:	f36f 1186 	bfc	r1, #6, #1
   12412:	f883 1027 	strb.w	r1, [r3, #39]	; 0x27
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSSET.reg = mask;
   12416:	2340      	movs	r3, #64	; 0x40
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSCLR.reg = mask;
   12418:	f888 e104 	strb.w	lr, [r8, #260]	; 0x104
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSSET.reg = mask;
   1241c:	f888 3105 	strb.w	r3, [r8, #261]	; 0x105
	ept->flags.bits.is_stalled = 0;
   12420:	4b91      	ldr	r3, [pc, #580]	; (12668 <_usb_d_dev_handler+0x32c>)
   12422:	eb0a 0104 	add.w	r1, sl, r4
   12426:	eb03 0181 	add.w	r1, r3, r1, lsl #2
	bank->STATUS_BK.reg     = 0;
   1242a:	4b90      	ldr	r3, [pc, #576]	; (1266c <_usb_d_dev_handler+0x330>)
	ept->flags.bits.is_stalled = 0;
   1242c:	f891 c027 	ldrb.w	ip, [r1, #39]	; 0x27
	bank->STATUS_BK.reg     = 0;
   12430:	eb03 0e02 	add.w	lr, r3, r2
	ept->flags.bits.is_stalled = 0;
   12434:	f36f 0cc3 	bfc	ip, #3, #1
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENCLR.reg = mask;
   12438:	f102 4382 	add.w	r3, r2, #1090519040	; 0x41000000
   1243c:	f881 c027 	strb.w	ip, [r1, #39]	; 0x27
	bank->STATUS_BK.reg     = 0;
   12440:	f04f 0c00 	mov.w	ip, #0
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg = mask;
   12444:	216f      	movs	r1, #111	; 0x6f
   12446:	f88e c00a 	strb.w	ip, [lr, #10]
   1244a:	f88e c01a 	strb.w	ip, [lr, #26]
   1244e:	f888 1107 	strb.w	r1, [r8, #263]	; 0x107
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENCLR.reg = mask;
   12452:	f883 1108 	strb.w	r1, [r3, #264]	; 0x108
	dev_inst.ep_callbacks.setup(ept->ep);
   12456:	4b84      	ldr	r3, [pc, #528]	; (12668 <_usb_d_dev_handler+0x32c>)
   12458:	689b      	ldr	r3, [r3, #8]
   1245a:	4798      	blx	r3
   1245c:	e7af      	b.n	123be <_usb_d_dev_handler+0x82>
   1245e:	68aa      	ldr	r2, [r5, #8]
   12460:	2320      	movs	r3, #32
   12462:	f889 3108 	strb.w	r3, [r9, #264]	; 0x108
	dev_inst.ep_callbacks.done(ept->ep, USB_TRANS_STALL, ept->trans_count);
   12466:	4b80      	ldr	r3, [pc, #512]	; (12668 <_usb_d_dev_handler+0x32c>)
   12468:	2101      	movs	r1, #1
   1246a:	691b      	ldr	r3, [r3, #16]
   1246c:	4798      	blx	r3
   1246e:	e7a6      	b.n	123be <_usb_d_dev_handler+0x82>
		if (flags & USB_DEVICE_EPINTFLAG_TRFAIL1) {
   12470:	0719      	lsls	r1, r3, #28
   12472:	f100 80fd 	bmi.w	12670 <_usb_d_dev_handler+0x334>
		} else if (flags & USB_DEVICE_EPINTFLAG_RXSTP) {
   12476:	06db      	lsls	r3, r3, #27
   12478:	d5a1      	bpl.n	123be <_usb_d_dev_handler+0x82>
	if (_usb_d_dev_ep_is_busy(ept)) {
   1247a:	f01b 0f40 	tst.w	fp, #64	; 0x40
   1247e:	d011      	beq.n	124a4 <_usb_d_dev_handler+0x168>
		ept->flags.bits.is_busy = 0;
   12480:	4979      	ldr	r1, [pc, #484]	; (12668 <_usb_d_dev_handler+0x32c>)
   12482:	eb0a 0304 	add.w	r3, sl, r4
   12486:	eb01 0383 	add.w	r3, r1, r3, lsl #2
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSCLR.reg = mask;
   1248a:	f04f 0e80 	mov.w	lr, #128	; 0x80
   1248e:	f893 1027 	ldrb.w	r1, [r3, #39]	; 0x27
   12492:	f36f 1186 	bfc	r1, #6, #1
   12496:	f883 1027 	strb.w	r1, [r3, #39]	; 0x27
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSSET.reg = mask;
   1249a:	2340      	movs	r3, #64	; 0x40
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSCLR.reg = mask;
   1249c:	f888 e104 	strb.w	lr, [r8, #260]	; 0x104
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSSET.reg = mask;
   124a0:	f888 3105 	strb.w	r3, [r8, #261]	; 0x105
	ept->flags.bits.is_stalled = 0;
   124a4:	4b70      	ldr	r3, [pc, #448]	; (12668 <_usb_d_dev_handler+0x32c>)
   124a6:	eb0a 0104 	add.w	r1, sl, r4
   124aa:	eb03 0181 	add.w	r1, r3, r1, lsl #2
	bank->STATUS_BK.reg     = 0;
   124ae:	4b6f      	ldr	r3, [pc, #444]	; (1266c <_usb_d_dev_handler+0x330>)
	ept->flags.bits.is_stalled = 0;
   124b0:	f891 c027 	ldrb.w	ip, [r1, #39]	; 0x27
	bank->STATUS_BK.reg     = 0;
   124b4:	eb03 0e02 	add.w	lr, r3, r2
	ept->flags.bits.is_stalled = 0;
   124b8:	f36f 0cc3 	bfc	ip, #3, #1
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENCLR.reg = mask;
   124bc:	f102 4382 	add.w	r3, r2, #1090519040	; 0x41000000
   124c0:	f881 c027 	strb.w	ip, [r1, #39]	; 0x27
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg = mask;
   124c4:	226f      	movs	r2, #111	; 0x6f
	bank->STATUS_BK.reg     = 0;
   124c6:	2100      	movs	r1, #0
   124c8:	f88e 100a 	strb.w	r1, [lr, #10]
   124cc:	f88e 101a 	strb.w	r1, [lr, #26]
   124d0:	f888 2107 	strb.w	r2, [r8, #263]	; 0x107
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENCLR.reg = mask;
   124d4:	f883 2108 	strb.w	r2, [r3, #264]	; 0x108
	dev_inst.ep_callbacks.setup(ept->ep);
   124d8:	4b63      	ldr	r3, [pc, #396]	; (12668 <_usb_d_dev_handler+0x32c>)
   124da:	689b      	ldr	r3, [r3, #8]
   124dc:	4798      	blx	r3
   124de:	e76e      	b.n	123be <_usb_d_dev_handler+0x82>
	UsbDeviceDescBank *bank    = prvt_inst.desc_table[epn].DeviceDescBank;
   124e0:	4b62      	ldr	r3, [pc, #392]	; (1266c <_usb_d_dev_handler+0x330>)
	tmp = ((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPCFG.reg;
   124e2:	f898 c100 	ldrb.w	ip, [r8, #256]	; 0x100
   124e6:	449e      	add	lr, r3
	if ((eptype == USB_D_EPTYPE_ISOCH) && st.bit.CRCERR) {
   124e8:	f00c 0c07 	and.w	ip, ip, #7
	st.reg = bank[bank_n].STATUS_BK.reg;
   124ec:	f89e 300a 	ldrb.w	r3, [lr, #10]
	if ((eptype == USB_D_EPTYPE_ISOCH) && st.bit.CRCERR) {
   124f0:	f1bc 0f02 	cmp.w	ip, #2
	st.reg = bank[bank_n].STATUS_BK.reg;
   124f4:	b2db      	uxtb	r3, r3
	if ((eptype == USB_D_EPTYPE_ISOCH) && st.bit.CRCERR) {
   124f6:	d07c      	beq.n	125f2 <_usb_d_dev_handler+0x2b6>
	} else if (st.bit.ERRORFLOW) {
   124f8:	f013 0302 	ands.w	r3, r3, #2
   124fc:	d032      	beq.n	12564 <_usb_d_dev_handler+0x228>
		bank[bank_n].STATUS_BK.bit.ERRORFLOW = 0;
   124fe:	f89e 100a 	ldrb.w	r1, [lr, #10]
   12502:	f36f 0141 	bfc	r1, #1, #1
   12506:	f88e 100a 	strb.w	r1, [lr, #10]
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENCLR.reg = mask;
   1250a:	f102 4382 	add.w	r3, r2, #1090519040	; 0x41000000
		if (is_ctrl && _usb_d_dev_ep_is_busy(ept)) {
   1250e:	f00b 0107 	and.w	r1, fp, #7
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg = mask;
   12512:	2204      	movs	r2, #4
   12514:	2901      	cmp	r1, #1
   12516:	f888 2107 	strb.w	r2, [r8, #263]	; 0x107
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENCLR.reg = mask;
   1251a:	f883 2108 	strb.w	r2, [r3, #264]	; 0x108
   1251e:	f47f af4e 	bne.w	123be <_usb_d_dev_handler+0x82>
   12522:	f01b 0f40 	tst.w	fp, #64	; 0x40
   12526:	f43f af4a 	beq.w	123be <_usb_d_dev_handler+0x82>
			if (bank_n != _usb_d_dev_ep_is_in(ept)) {
   1252a:	494f      	ldr	r1, [pc, #316]	; (12668 <_usb_d_dev_handler+0x32c>)
   1252c:	eb0a 0204 	add.w	r2, sl, r4
   12530:	eb01 0282 	add.w	r2, r1, r2, lsl #2
   12534:	3220      	adds	r2, #32
   12536:	79d1      	ldrb	r1, [r2, #7]
   12538:	09c9      	lsrs	r1, r1, #7
   1253a:	f43f af40 	beq.w	123be <_usb_d_dev_handler+0x82>
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg = mask;
   1253e:	214a      	movs	r1, #74	; 0x4a
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSCLR.reg = mask;
   12540:	f04f 0e80 	mov.w	lr, #128	; 0x80
   12544:	f888 e104 	strb.w	lr, [r8, #260]	; 0x104
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg = mask;
   12548:	f888 1107 	strb.w	r1, [r8, #263]	; 0x107
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENCLR.reg = mask;
   1254c:	f883 1108 	strb.w	r1, [r3, #264]	; 0x108
	ept->flags.bits.is_busy = 0;
   12550:	79d1      	ldrb	r1, [r2, #7]
	dev_inst.ep_callbacks.done(ept->ep, code, ept->trans_count);
   12552:	4b45      	ldr	r3, [pc, #276]	; (12668 <_usb_d_dev_handler+0x32c>)
	ept->flags.bits.is_busy = 0;
   12554:	f36f 1186 	bfc	r1, #6, #1
   12558:	71d1      	strb	r1, [r2, #7]
	dev_inst.ep_callbacks.done(ept->ep, code, ept->trans_count);
   1255a:	691b      	ldr	r3, [r3, #16]
   1255c:	68aa      	ldr	r2, [r5, #8]
   1255e:	2100      	movs	r1, #0
   12560:	4798      	blx	r3
   12562:	e72c      	b.n	123be <_usb_d_dev_handler+0x82>
	bank->STATUS_BK.reg     = 0;
   12564:	4941      	ldr	r1, [pc, #260]	; (1266c <_usb_d_dev_handler+0x330>)
   12566:	1888      	adds	r0, r1, r2
   12568:	f102 4282 	add.w	r2, r2, #1090519040	; 0x41000000
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg = mask;
   1256c:	2104      	movs	r1, #4
   1256e:	7283      	strb	r3, [r0, #10]
   12570:	f888 1107 	strb.w	r1, [r8, #263]	; 0x107
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENCLR.reg = mask;
   12574:	f882 1108 	strb.w	r1, [r2, #264]	; 0x108
   12578:	e721      	b.n	123be <_usb_d_dev_handler+0x82>
		_usb_d_dev_out_next(ept, true);
   1257a:	2101      	movs	r1, #1
   1257c:	4628      	mov	r0, r5
   1257e:	f7ff fde1 	bl	12144 <_usb_d_dev_out_next>
   12582:	e71c      	b.n	123be <_usb_d_dev_handler+0x82>
	if (flags & USB_DEVICE_EPINTFLAG_RXSTP) {
   12584:	f013 0f10 	tst.w	r3, #16
   12588:	f040 80e0 	bne.w	1274c <_usb_d_dev_handler+0x410>
	} else if (flags & USB_DEVICE_EPINTFLAG_STALL1) {
   1258c:	065a      	lsls	r2, r3, #25
   1258e:	f100 80e7 	bmi.w	12760 <_usb_d_dev_handler+0x424>
	} else if (flags & USB_DEVICE_EPINTFLAG_STALL0) {
   12592:	069b      	lsls	r3, r3, #26
   12594:	f57f af13 	bpl.w	123be <_usb_d_dev_handler+0x82>
   12598:	2320      	movs	r3, #32
   1259a:	68aa      	ldr	r2, [r5, #8]
   1259c:	f888 3108 	strb.w	r3, [r8, #264]	; 0x108
	dev_inst.ep_callbacks.done(ept->ep, USB_TRANS_STALL, ept->trans_count);
   125a0:	4b31      	ldr	r3, [pc, #196]	; (12668 <_usb_d_dev_handler+0x32c>)
   125a2:	691b      	ldr	r3, [r3, #16]
   125a4:	4798      	blx	r3
   125a6:	e70a      	b.n	123be <_usb_d_dev_handler+0x82>
	return ((Usb *)hw)->DEVICE.INTFLAG.reg;
   125a8:	8b91      	ldrh	r1, [r2, #28]
	return tmp;
}

static inline hri_usbdevice_intenset_reg_t hri_usbdevice_read_INTEN_reg(const void *const hw)
{
	return ((Usb *)hw)->DEVICE.INTENSET.reg;
   125aa:	8b13      	ldrh	r3, [r2, #24]
   125ac:	b29b      	uxth	r3, r3
	flags &= hri_usbdevice_read_INTEN_reg(USB);
   125ae:	400b      	ands	r3, r1
	if (flags & USB_DEVICE_INTFLAG_SOF) {
   125b0:	f013 0004 	ands.w	r0, r3, #4
   125b4:	f040 80dc 	bne.w	12770 <_usb_d_dev_handler+0x434>
	if (flags & USB_DEVICE_INTFLAG_LPMSUSP) {
   125b8:	f413 7100 	ands.w	r1, r3, #512	; 0x200
   125bc:	f040 80e0 	bne.w	12780 <_usb_d_dev_handler+0x444>
	} else if (flags & USB_DEVICE_INTFLAG_RAMACER) {
   125c0:	0618      	lsls	r0, r3, #24
   125c2:	f100 8140 	bmi.w	12846 <_usb_d_dev_handler+0x50a>
	} else if (flags & USB_D_WAKEUP_INT_FLAGS) {
   125c6:	f013 0470 	ands.w	r4, r3, #112	; 0x70
   125ca:	f040 8191 	bne.w	128f0 <_usb_d_dev_handler+0x5b4>
	} else if (flags & USB_DEVICE_INTFLAG_EORST) {
   125ce:	f013 0108 	ands.w	r1, r3, #8
   125d2:	f040 819e 	bne.w	12912 <_usb_d_dev_handler+0x5d6>
	} else if (flags & USB_DEVICE_INTFLAG_SUSPEND) {
   125d6:	07db      	lsls	r3, r3, #31
   125d8:	f57f aeba 	bpl.w	12350 <_usb_d_dev_handler+0x14>
	((Usb *)hw)->DEVICE.INTFLAG.reg = mask;
   125dc:	f240 2301 	movw	r3, #513	; 0x201
	dev_inst.callbacks.event(USB_EV_SUSPEND, 0);
   125e0:	4821      	ldr	r0, [pc, #132]	; (12668 <_usb_d_dev_handler+0x32c>)
   125e2:	8393      	strh	r3, [r2, #28]
   125e4:	6844      	ldr	r4, [r0, #4]
	((Usb *)hw)->DEVICE.INTENCLR.reg = ~data;
}

static inline void hri_usbdevice_clear_INTEN_reg(const void *const hw, hri_usbdevice_intenset_reg_t mask)
{
	((Usb *)hw)->DEVICE.INTENCLR.reg = mask;
   125e6:	8293      	strh	r3, [r2, #20]
	((Usb *)hw)->DEVICE.INTENSET.reg = mask;
   125e8:	2570      	movs	r5, #112	; 0x70
   125ea:	2004      	movs	r0, #4
   125ec:	8315      	strh	r5, [r2, #24]
   125ee:	4623      	mov	r3, r4
   125f0:	e0de      	b.n	127b0 <_usb_d_dev_handler+0x474>
	if ((eptype == USB_D_EPTYPE_ISOCH) && st.bit.CRCERR) {
   125f2:	f013 0f01 	tst.w	r3, #1
   125f6:	f43f af7f 	beq.w	124f8 <_usb_d_dev_handler+0x1bc>
		bank[bank_n].STATUS_BK.bit.CRCERR = 0;
   125fa:	f89e 300a 	ldrb.w	r3, [lr, #10]
static void _usb_d_dev_trans_stop(struct _usb_d_dev_ep *ept, bool dir, const int32_t code)
{
	uint8_t epn = USB_EP_GET_N(ept->ep);
	;
	const uint8_t intflags[2] = {USB_D_BANK0_INT_FLAGS, USB_D_BANK1_INT_FLAGS};
	if (!(_usb_d_dev_ep_is_used(ept) && _usb_d_dev_ep_is_busy(ept))) {
   125fe:	f01b 0f40 	tst.w	fp, #64	; 0x40
		bank[bank_n].STATUS_BK.bit.CRCERR = 0;
   12602:	f361 0300 	bfi	r3, r1, #0, #1
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg = mask;
   12606:	f04f 0104 	mov.w	r1, #4
   1260a:	f88e 300a 	strb.w	r3, [lr, #10]
   1260e:	f888 1107 	strb.w	r1, [r8, #263]	; 0x107
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENCLR.reg = mask;
   12612:	f888 1108 	strb.w	r1, [r8, #264]	; 0x108
	if (!(_usb_d_dev_ep_is_used(ept) && _usb_d_dev_ep_is_busy(ept))) {
   12616:	f43f aed2 	beq.w	123be <_usb_d_dev_handler+0x82>
	ept->flags.bits.is_busy = 0;
   1261a:	4b13      	ldr	r3, [pc, #76]	; (12668 <_usb_d_dev_handler+0x32c>)
   1261c:	eb0a 0104 	add.w	r1, sl, r4
   12620:	eb03 0181 	add.w	r1, r3, r1, lsl #2
   12624:	f102 4382 	add.w	r3, r2, #1090519040	; 0x41000000
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg = mask;
   12628:	f04f 0e25 	mov.w	lr, #37	; 0x25
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSSET.reg = mask;
   1262c:	2240      	movs	r2, #64	; 0x40
   1262e:	f888 2105 	strb.w	r2, [r8, #261]	; 0x105
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg = mask;
   12632:	f888 e107 	strb.w	lr, [r8, #263]	; 0x107
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENCLR.reg = mask;
   12636:	f883 e108 	strb.w	lr, [r3, #264]	; 0x108
   1263a:	f891 2027 	ldrb.w	r2, [r1, #39]	; 0x27
	dev_inst.ep_callbacks.done(ept->ep, code, ept->trans_count);
   1263e:	4b0a      	ldr	r3, [pc, #40]	; (12668 <_usb_d_dev_handler+0x32c>)
	ept->flags.bits.is_busy = 0;
   12640:	f36f 1286 	bfc	r2, #6, #1
   12644:	f881 2027 	strb.w	r2, [r1, #39]	; 0x27
	dev_inst.ep_callbacks.done(ept->ep, code, ept->trans_count);
   12648:	691b      	ldr	r3, [r3, #16]
   1264a:	68aa      	ldr	r2, [r5, #8]
   1264c:	2104      	movs	r1, #4
   1264e:	4798      	blx	r3
   12650:	e6b5      	b.n	123be <_usb_d_dev_handler+0x82>
		_usb_d_dev_in_next(ept, true);
   12652:	2101      	movs	r1, #1
   12654:	4628      	mov	r0, r5
   12656:	f7ff fcbb 	bl	11fd0 <_usb_d_dev_in_next>
   1265a:	e6b0      	b.n	123be <_usb_d_dev_handler+0x82>
   1265c:	68aa      	ldr	r2, [r5, #8]
   1265e:	2340      	movs	r3, #64	; 0x40
   12660:	e6ff      	b.n	12462 <_usb_d_dev_handler+0x126>
   12662:	bf00      	nop
   12664:	200020b0 	.word	0x200020b0
   12668:	2000209c 	.word	0x2000209c
   1266c:	200022cc 	.word	0x200022cc
	UsbDeviceDescBank *bank    = prvt_inst.desc_table[epn].DeviceDescBank;
   12670:	4bc3      	ldr	r3, [pc, #780]	; (12980 <_usb_d_dev_handler+0x644>)
	tmp = ((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPCFG.reg;
   12672:	f898 1100 	ldrb.w	r1, [r8, #256]	; 0x100
   12676:	449e      	add	lr, r3
	if ((eptype == USB_D_EPTYPE_ISOCH) && st.bit.CRCERR) {
   12678:	f3c1 1102 	ubfx	r1, r1, #4, #3
	st.reg = bank[bank_n].STATUS_BK.reg;
   1267c:	f89e 301a 	ldrb.w	r3, [lr, #26]
	if ((eptype == USB_D_EPTYPE_ISOCH) && st.bit.CRCERR) {
   12680:	2902      	cmp	r1, #2
	st.reg = bank[bank_n].STATUS_BK.reg;
   12682:	b2db      	uxtb	r3, r3
	if ((eptype == USB_D_EPTYPE_ISOCH) && st.bit.CRCERR) {
   12684:	f000 8098 	beq.w	127b8 <_usb_d_dev_handler+0x47c>
	} else if (st.bit.ERRORFLOW) {
   12688:	f013 0302 	ands.w	r3, r3, #2
   1268c:	d053      	beq.n	12736 <_usb_d_dev_handler+0x3fa>
		bank[bank_n].STATUS_BK.bit.ERRORFLOW = 0;
   1268e:	f89e 101a 	ldrb.w	r1, [lr, #26]
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENCLR.reg = mask;
   12692:	f102 4382 	add.w	r3, r2, #1090519040	; 0x41000000
   12696:	f36f 0141 	bfc	r1, #1, #1
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg = mask;
   1269a:	2208      	movs	r2, #8
   1269c:	f88e 101a 	strb.w	r1, [lr, #26]
   126a0:	f888 2107 	strb.w	r2, [r8, #263]	; 0x107
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENCLR.reg = mask;
   126a4:	f883 2108 	strb.w	r2, [r3, #264]	; 0x108
		if (is_ctrl && _usb_d_dev_ep_is_busy(ept)) {
   126a8:	f01b 0f40 	tst.w	fp, #64	; 0x40
   126ac:	f43f ae87 	beq.w	123be <_usb_d_dev_handler+0x82>
			if (bank_n != _usb_d_dev_ep_is_in(ept)) {
   126b0:	4ab4      	ldr	r2, [pc, #720]	; (12984 <_usb_d_dev_handler+0x648>)
   126b2:	eb0a 0e04 	add.w	lr, sl, r4
   126b6:	eb02 0e8e 	add.w	lr, r2, lr, lsl #2
   126ba:	f10e 0e20 	add.w	lr, lr, #32
   126be:	f89e 1007 	ldrb.w	r1, [lr, #7]
   126c2:	09c9      	lsrs	r1, r1, #7
   126c4:	f47f ae7b 	bne.w	123be <_usb_d_dev_handler+0x82>
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg = mask;
   126c8:	2225      	movs	r2, #37	; 0x25
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSSET.reg = mask;
   126ca:	f04f 0c40 	mov.w	ip, #64	; 0x40
   126ce:	f888 c105 	strb.w	ip, [r8, #261]	; 0x105
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg = mask;
   126d2:	f888 2107 	strb.w	r2, [r8, #263]	; 0x107
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENCLR.reg = mask;
   126d6:	f883 2108 	strb.w	r2, [r3, #264]	; 0x108
	ept->flags.bits.is_busy = 0;
   126da:	f89e 2007 	ldrb.w	r2, [lr, #7]
	dev_inst.ep_callbacks.done(ept->ep, code, ept->trans_count);
   126de:	4ba9      	ldr	r3, [pc, #676]	; (12984 <_usb_d_dev_handler+0x648>)
	ept->flags.bits.is_busy = 0;
   126e0:	f361 1286 	bfi	r2, r1, #6, #1
   126e4:	f88e 2007 	strb.w	r2, [lr, #7]
	dev_inst.ep_callbacks.done(ept->ep, code, ept->trans_count);
   126e8:	691b      	ldr	r3, [r3, #16]
   126ea:	68aa      	ldr	r2, [r5, #8]
   126ec:	4798      	blx	r3
   126ee:	e666      	b.n	123be <_usb_d_dev_handler+0x82>
	UsbDeviceDescBank *bank    = prvt_inst.desc_table[epn].DeviceDescBank;
   126f0:	4ba3      	ldr	r3, [pc, #652]	; (12980 <_usb_d_dev_handler+0x644>)
	tmp = ((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPCFG.reg;
   126f2:	f898 c100 	ldrb.w	ip, [r8, #256]	; 0x100
   126f6:	449e      	add	lr, r3
	if ((eptype == USB_D_EPTYPE_ISOCH) && st.bit.CRCERR) {
   126f8:	f3cc 1c02 	ubfx	ip, ip, #4, #3
	st.reg = bank[bank_n].STATUS_BK.reg;
   126fc:	f89e 301a 	ldrb.w	r3, [lr, #26]
	if ((eptype == USB_D_EPTYPE_ISOCH) && st.bit.CRCERR) {
   12700:	f1bc 0f02 	cmp.w	ip, #2
	st.reg = bank[bank_n].STATUS_BK.reg;
   12704:	b2db      	uxtb	r3, r3
	if ((eptype == USB_D_EPTYPE_ISOCH) && st.bit.CRCERR) {
   12706:	d07a      	beq.n	127fe <_usb_d_dev_handler+0x4c2>
	} else if (st.bit.ERRORFLOW) {
   12708:	f013 0302 	ands.w	r3, r3, #2
   1270c:	d013      	beq.n	12736 <_usb_d_dev_handler+0x3fa>
		bank[bank_n].STATUS_BK.bit.ERRORFLOW = 0;
   1270e:	f89e 101a 	ldrb.w	r1, [lr, #26]
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENCLR.reg = mask;
   12712:	f102 4382 	add.w	r3, r2, #1090519040	; 0x41000000
		if (is_ctrl && _usb_d_dev_ep_is_busy(ept)) {
   12716:	f00b 0207 	and.w	r2, fp, #7
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg = mask;
   1271a:	f04f 0c08 	mov.w	ip, #8
		bank[bank_n].STATUS_BK.bit.ERRORFLOW = 0;
   1271e:	f36f 0141 	bfc	r1, #1, #1
		if (is_ctrl && _usb_d_dev_ep_is_busy(ept)) {
   12722:	2a01      	cmp	r2, #1
		bank[bank_n].STATUS_BK.bit.ERRORFLOW = 0;
   12724:	f88e 101a 	strb.w	r1, [lr, #26]
   12728:	f888 c107 	strb.w	ip, [r8, #263]	; 0x107
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENCLR.reg = mask;
   1272c:	f883 c108 	strb.w	ip, [r3, #264]	; 0x108
		if (is_ctrl && _usb_d_dev_ep_is_busy(ept)) {
   12730:	f47f ae45 	bne.w	123be <_usb_d_dev_handler+0x82>
   12734:	e7b8      	b.n	126a8 <_usb_d_dev_handler+0x36c>
	bank->STATUS_BK.reg     = 0;
   12736:	4992      	ldr	r1, [pc, #584]	; (12980 <_usb_d_dev_handler+0x644>)
   12738:	1888      	adds	r0, r1, r2
   1273a:	f102 4282 	add.w	r2, r2, #1090519040	; 0x41000000
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg = mask;
   1273e:	2108      	movs	r1, #8
   12740:	7683      	strb	r3, [r0, #26]
   12742:	f888 1107 	strb.w	r1, [r8, #263]	; 0x107
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENCLR.reg = mask;
   12746:	f882 1108 	strb.w	r1, [r2, #264]	; 0x108
   1274a:	e638      	b.n	123be <_usb_d_dev_handler+0x82>
	if (!is_ctrl) {
   1274c:	f00b 0307 	and.w	r3, fp, #7
   12750:	2b01      	cmp	r3, #1
   12752:	d07e      	beq.n	12852 <_usb_d_dev_handler+0x516>
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg = mask;
   12754:	2310      	movs	r3, #16
   12756:	f888 3107 	strb.w	r3, [r8, #263]	; 0x107
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENCLR.reg = USB_DEVICE_EPINTENSET_RXSTP;
   1275a:	f888 3108 	strb.w	r3, [r8, #264]	; 0x108
   1275e:	e62e      	b.n	123be <_usb_d_dev_handler+0x82>
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENCLR.reg = mask;
   12760:	2340      	movs	r3, #64	; 0x40
   12762:	68aa      	ldr	r2, [r5, #8]
   12764:	f888 3108 	strb.w	r3, [r8, #264]	; 0x108
	dev_inst.ep_callbacks.done(ept->ep, USB_TRANS_STALL, ept->trans_count);
   12768:	4b86      	ldr	r3, [pc, #536]	; (12984 <_usb_d_dev_handler+0x648>)
   1276a:	691b      	ldr	r3, [r3, #16]
   1276c:	4798      	blx	r3
   1276e:	e626      	b.n	123be <_usb_d_dev_handler+0x82>
	((Usb *)hw)->DEVICE.INTFLAG.reg = mask;
   12770:	2104      	movs	r1, #4
	dev_inst.callbacks.sof();
   12772:	4b84      	ldr	r3, [pc, #528]	; (12984 <_usb_d_dev_handler+0x648>)
   12774:	8391      	strh	r1, [r2, #28]
   12776:	681b      	ldr	r3, [r3, #0]
}
   12778:	b001      	add	sp, #4
   1277a:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	dev_inst.callbacks.sof();
   1277e:	4718      	bx	r3
   12780:	f240 2101 	movw	r1, #513	; 0x201
	((Usb *)hw)->DEVICE.INTENSET.reg = mask;
   12784:	2470      	movs	r4, #112	; 0x70
		if (bank->EXTREG.bit.SUBPID == 0x3) {
   12786:	4b7e      	ldr	r3, [pc, #504]	; (12980 <_usb_d_dev_handler+0x644>)
	((Usb *)hw)->DEVICE.INTFLAG.reg = mask;
   12788:	8391      	strh	r1, [r2, #28]
	((Usb *)hw)->DEVICE.INTENCLR.reg = mask;
   1278a:	8291      	strh	r1, [r2, #20]
	((Usb *)hw)->DEVICE.INTENSET.reg = mask;
   1278c:	8314      	strh	r4, [r2, #24]
   1278e:	891a      	ldrh	r2, [r3, #8]
   12790:	f002 020f 	and.w	r2, r2, #15
   12794:	2a03      	cmp	r2, #3
   12796:	f000 8128 	beq.w	129ea <_usb_d_dev_handler+0x6ae>
   1279a:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
   1279c:	f002 020f 	and.w	r2, r2, #15
   127a0:	2a03      	cmp	r2, #3
	uint32_t lpm_variable = 0;
   127a2:	bf18      	it	ne
   127a4:	4601      	movne	r1, r0
		if (bank->EXTREG.bit.SUBPID == 0x3) {
   127a6:	f000 811f 	beq.w	129e8 <_usb_d_dev_handler+0x6ac>
	dev_inst.callbacks.event(USB_EV_LPM_SUSPEND, lpm_variable);
   127aa:	4b76      	ldr	r3, [pc, #472]	; (12984 <_usb_d_dev_handler+0x648>)
   127ac:	685b      	ldr	r3, [r3, #4]
   127ae:	2003      	movs	r0, #3
}
   127b0:	b001      	add	sp, #4
   127b2:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	dev_inst.callbacks.event(USB_EV_SUSPEND, 0);
   127b6:	4718      	bx	r3
	if ((eptype == USB_D_EPTYPE_ISOCH) && st.bit.CRCERR) {
   127b8:	07d9      	lsls	r1, r3, #31
   127ba:	f57f af65 	bpl.w	12688 <_usb_d_dev_handler+0x34c>
		bank[bank_n].STATUS_BK.bit.CRCERR = 0;
   127be:	f89e 101a 	ldrb.w	r1, [lr, #26]
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENCLR.reg = mask;
   127c2:	f102 4382 	add.w	r3, r2, #1090519040	; 0x41000000
   127c6:	f36f 0100 	bfc	r1, #0, #1
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg = mask;
   127ca:	2208      	movs	r2, #8
	if (!(_usb_d_dev_ep_is_used(ept) && _usb_d_dev_ep_is_busy(ept))) {
   127cc:	f01b 0f40 	tst.w	fp, #64	; 0x40
		bank[bank_n].STATUS_BK.bit.CRCERR = 0;
   127d0:	f88e 101a 	strb.w	r1, [lr, #26]
   127d4:	f888 2107 	strb.w	r2, [r8, #263]	; 0x107
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENCLR.reg = mask;
   127d8:	f883 2108 	strb.w	r2, [r3, #264]	; 0x108
	if (!(_usb_d_dev_ep_is_used(ept) && _usb_d_dev_ep_is_busy(ept))) {
   127dc:	f43f adef 	beq.w	123be <_usb_d_dev_handler+0x82>
	ept->flags.bits.is_busy = 0;
   127e0:	4a68      	ldr	r2, [pc, #416]	; (12984 <_usb_d_dev_handler+0x648>)
   127e2:	eb0a 0104 	add.w	r1, sl, r4
   127e6:	eb02 0181 	add.w	r1, r2, r1, lsl #2
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSCLR.reg = mask;
   127ea:	f04f 0e80 	mov.w	lr, #128	; 0x80
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg = mask;
   127ee:	224a      	movs	r2, #74	; 0x4a
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSCLR.reg = mask;
   127f0:	f888 e104 	strb.w	lr, [r8, #260]	; 0x104
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg = mask;
   127f4:	f888 2107 	strb.w	r2, [r8, #263]	; 0x107
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENCLR.reg = mask;
   127f8:	f883 2108 	strb.w	r2, [r3, #264]	; 0x108
   127fc:	e71d      	b.n	1263a <_usb_d_dev_handler+0x2fe>
	if ((eptype == USB_D_EPTYPE_ISOCH) && st.bit.CRCERR) {
   127fe:	f013 0f01 	tst.w	r3, #1
   12802:	d081      	beq.n	12708 <_usb_d_dev_handler+0x3cc>
		bank[bank_n].STATUS_BK.bit.CRCERR = 0;
   12804:	f89e 301a 	ldrb.w	r3, [lr, #26]
	if (!(_usb_d_dev_ep_is_used(ept) && _usb_d_dev_ep_is_busy(ept))) {
   12808:	f01b 0f40 	tst.w	fp, #64	; 0x40
		bank[bank_n].STATUS_BK.bit.CRCERR = 0;
   1280c:	f361 0300 	bfi	r3, r1, #0, #1
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg = mask;
   12810:	f04f 0108 	mov.w	r1, #8
   12814:	f88e 301a 	strb.w	r3, [lr, #26]
   12818:	f888 1107 	strb.w	r1, [r8, #263]	; 0x107
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENCLR.reg = mask;
   1281c:	f888 1108 	strb.w	r1, [r8, #264]	; 0x108
	if (!(_usb_d_dev_ep_is_used(ept) && _usb_d_dev_ep_is_busy(ept))) {
   12820:	f43f adcd 	beq.w	123be <_usb_d_dev_handler+0x82>
	ept->flags.bits.is_busy = 0;
   12824:	4b57      	ldr	r3, [pc, #348]	; (12984 <_usb_d_dev_handler+0x648>)
   12826:	eb0a 0104 	add.w	r1, sl, r4
   1282a:	eb03 0181 	add.w	r1, r3, r1, lsl #2
   1282e:	f102 4382 	add.w	r3, r2, #1090519040	; 0x41000000
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg = mask;
   12832:	f04f 0e4a 	mov.w	lr, #74	; 0x4a
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSCLR.reg = mask;
   12836:	2280      	movs	r2, #128	; 0x80
   12838:	f888 2104 	strb.w	r2, [r8, #260]	; 0x104
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg = mask;
   1283c:	f888 e107 	strb.w	lr, [r8, #263]	; 0x107
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENCLR.reg = mask;
   12840:	f883 e108 	strb.w	lr, [r3, #264]	; 0x108
   12844:	e6f9      	b.n	1263a <_usb_d_dev_handler+0x2fe>
	dev_inst.callbacks.event(USB_EV_ERROR, 0);
   12846:	4b4f      	ldr	r3, [pc, #316]	; (12984 <_usb_d_dev_handler+0x648>)
	((Usb *)hw)->DEVICE.INTFLAG.reg = mask;
   12848:	2080      	movs	r0, #128	; 0x80
   1284a:	685b      	ldr	r3, [r3, #4]
   1284c:	8390      	strh	r0, [r2, #28]
   1284e:	2005      	movs	r0, #5
   12850:	e7ae      	b.n	127b0 <_usb_d_dev_handler+0x474>
	if (_usb_d_dev_ep_is_busy(ept)) {
   12852:	f01b 0f40 	tst.w	fp, #64	; 0x40
   12856:	f43f ade3 	beq.w	12420 <_usb_d_dev_handler+0xe4>
		ept->flags.bits.is_busy = 0;
   1285a:	f89c 3027 	ldrb.w	r3, [ip, #39]	; 0x27
   1285e:	f36f 1386 	bfc	r3, #6, #1
   12862:	f88c 3027 	strb.w	r3, [ip, #39]	; 0x27
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSCLR.reg = mask;
   12866:	2180      	movs	r1, #128	; 0x80
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSSET.reg = mask;
   12868:	2340      	movs	r3, #64	; 0x40
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSCLR.reg = mask;
   1286a:	f888 1104 	strb.w	r1, [r8, #260]	; 0x104
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSSET.reg = mask;
   1286e:	f888 3105 	strb.w	r3, [r8, #261]	; 0x105
   12872:	e5d5      	b.n	12420 <_usb_d_dev_handler+0xe4>
	UsbDeviceDescBank *bank    = prvt_inst.desc_table[epn].DeviceDescBank;
   12874:	4b42      	ldr	r3, [pc, #264]	; (12980 <_usb_d_dev_handler+0x644>)
	tmp = ((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPCFG.reg;
   12876:	f898 1100 	ldrb.w	r1, [r8, #256]	; 0x100
   1287a:	449e      	add	lr, r3
	if ((eptype == USB_D_EPTYPE_ISOCH) && st.bit.CRCERR) {
   1287c:	f001 0107 	and.w	r1, r1, #7
	st.reg = bank[bank_n].STATUS_BK.reg;
   12880:	f89e 300a 	ldrb.w	r3, [lr, #10]
	if ((eptype == USB_D_EPTYPE_ISOCH) && st.bit.CRCERR) {
   12884:	2902      	cmp	r1, #2
	st.reg = bank[bank_n].STATUS_BK.reg;
   12886:	b2db      	uxtb	r3, r3
	if ((eptype == USB_D_EPTYPE_ISOCH) && st.bit.CRCERR) {
   12888:	f000 8080 	beq.w	1298c <_usb_d_dev_handler+0x650>
	} else if (st.bit.ERRORFLOW) {
   1288c:	f013 0302 	ands.w	r3, r3, #2
   12890:	f43f ae68 	beq.w	12564 <_usb_d_dev_handler+0x228>
		bank[bank_n].STATUS_BK.bit.ERRORFLOW = 0;
   12894:	f89e 100a 	ldrb.w	r1, [lr, #10]
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENCLR.reg = mask;
   12898:	f102 4382 	add.w	r3, r2, #1090519040	; 0x41000000
   1289c:	f36f 0141 	bfc	r1, #1, #1
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg = mask;
   128a0:	2204      	movs	r2, #4
		if (is_ctrl && _usb_d_dev_ep_is_busy(ept)) {
   128a2:	f01b 0f40 	tst.w	fp, #64	; 0x40
		bank[bank_n].STATUS_BK.bit.ERRORFLOW = 0;
   128a6:	f88e 100a 	strb.w	r1, [lr, #10]
   128aa:	f888 2107 	strb.w	r2, [r8, #263]	; 0x107
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENCLR.reg = mask;
   128ae:	f883 2108 	strb.w	r2, [r3, #264]	; 0x108
		if (is_ctrl && _usb_d_dev_ep_is_busy(ept)) {
   128b2:	f43f ad84 	beq.w	123be <_usb_d_dev_handler+0x82>
			if (bank_n != _usb_d_dev_ep_is_in(ept)) {
   128b6:	4a33      	ldr	r2, [pc, #204]	; (12984 <_usb_d_dev_handler+0x648>)
   128b8:	eb0a 0104 	add.w	r1, sl, r4
   128bc:	eb02 0181 	add.w	r1, r2, r1, lsl #2
   128c0:	3120      	adds	r1, #32
   128c2:	79ca      	ldrb	r2, [r1, #7]
   128c4:	09d2      	lsrs	r2, r2, #7
   128c6:	f43f ad7a 	beq.w	123be <_usb_d_dev_handler+0x82>
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg = mask;
   128ca:	224a      	movs	r2, #74	; 0x4a
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSCLR.reg = mask;
   128cc:	f04f 0e80 	mov.w	lr, #128	; 0x80
   128d0:	f888 e104 	strb.w	lr, [r8, #260]	; 0x104
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg = mask;
   128d4:	f888 2107 	strb.w	r2, [r8, #263]	; 0x107
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENCLR.reg = mask;
   128d8:	f883 2108 	strb.w	r2, [r3, #264]	; 0x108
	ept->flags.bits.is_busy = 0;
   128dc:	79ca      	ldrb	r2, [r1, #7]
	dev_inst.ep_callbacks.done(ept->ep, code, ept->trans_count);
   128de:	4b29      	ldr	r3, [pc, #164]	; (12984 <_usb_d_dev_handler+0x648>)
	ept->flags.bits.is_busy = 0;
   128e0:	f36f 1286 	bfc	r2, #6, #1
   128e4:	71ca      	strb	r2, [r1, #7]
	dev_inst.ep_callbacks.done(ept->ep, code, ept->trans_count);
   128e6:	691b      	ldr	r3, [r3, #16]
   128e8:	68aa      	ldr	r2, [r5, #8]
   128ea:	2100      	movs	r1, #0
   128ec:	4798      	blx	r3
   128ee:	e566      	b.n	123be <_usb_d_dev_handler+0x82>
	((Usb *)hw)->DEVICE.INTFLAG.reg = mask;
   128f0:	2370      	movs	r3, #112	; 0x70
	((Usb *)hw)->DEVICE.INTENSET.reg = mask;
   128f2:	f240 2001 	movw	r0, #513	; 0x201

static inline hri_oscctrl_dpllstatus_reg_t hri_oscctrl_get_DPLLSTATUS_reg(const void *const hw, uint8_t submodule_index,
                                                                          hri_oscctrl_dpllstatus_reg_t mask)
{
	uint32_t tmp;
	tmp = ((Oscctrl *)hw)->Dpll[submodule_index].DPLLSTATUS.reg;
   128f6:	4924      	ldr	r1, [pc, #144]	; (12988 <_usb_d_dev_handler+0x64c>)
	((Usb *)hw)->DEVICE.INTFLAG.reg = mask;
   128f8:	8393      	strh	r3, [r2, #28]
	((Usb *)hw)->DEVICE.INTENCLR.reg = mask;
   128fa:	8293      	strh	r3, [r2, #20]
	((Usb *)hw)->DEVICE.INTENSET.reg = mask;
   128fc:	8310      	strh	r0, [r2, #24]
   128fe:	6c0b      	ldr	r3, [r1, #64]	; 0x40
	tmp &= mask;
   12900:	f003 0303 	and.w	r3, r3, #3
	while (hri_oscctrl_get_DPLLSTATUS_reg(OSCCTRL, 0, DPLL_READY_FLAG) != DPLL_READY_FLAG)
   12904:	2b03      	cmp	r3, #3
   12906:	d1fa      	bne.n	128fe <_usb_d_dev_handler+0x5c2>
	dev_inst.callbacks.event(USB_EV_WAKEUP, 0);
   12908:	4b1e      	ldr	r3, [pc, #120]	; (12984 <_usb_d_dev_handler+0x648>)
   1290a:	2100      	movs	r1, #0
   1290c:	685b      	ldr	r3, [r3, #4]
   1290e:	2002      	movs	r0, #2
   12910:	e74e      	b.n	127b0 <_usb_d_dev_handler+0x474>
   12912:	4e1c      	ldr	r6, [pc, #112]	; (12984 <_usb_d_dev_handler+0x648>)
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPCFG.reg = data;
   12914:	f882 4100 	strb.w	r4, [r2, #256]	; 0x100
	((Usb *)hw)->DEVICE.INTFLAG.reg = mask;
   12918:	2008      	movs	r0, #8
	((Usb *)hw)->DEVICE.INTENCLR.reg = mask;
   1291a:	2170      	movs	r1, #112	; 0x70
	((Usb *)hw)->DEVICE.INTENSET.reg = mask;
   1291c:	f240 2301 	movw	r3, #513	; 0x201
	((Usb *)hw)->DEVICE.INTFLAG.reg = mask;
   12920:	8390      	strh	r0, [r2, #28]
		dev_inst.ep[i].flags.u8 = 0;
   12922:	4627      	mov	r7, r4
	((Usb *)hw)->DEVICE.INTENCLR.reg = mask;
   12924:	8291      	strh	r1, [r2, #20]
   12926:	4635      	mov	r5, r6
	((Usb *)hw)->DEVICE.INTENSET.reg = mask;
   12928:	8313      	strh	r3, [r2, #24]
		dev_inst.ep[i].ep       = 0xFF;
   1292a:	f04f 08ff 	mov.w	r8, #255	; 0xff
   1292e:	e007      	b.n	12940 <_usb_d_dev_handler+0x604>
	for (i = 0; i < USB_D_N_EP; i++) {
   12930:	2c1b      	cmp	r4, #27
		dev_inst.ep[i].ep       = 0xFF;
   12932:	f885 8026 	strb.w	r8, [r5, #38]	; 0x26
		dev_inst.ep[i].flags.u8 = 0;
   12936:	f885 7027 	strb.w	r7, [r5, #39]	; 0x27
   1293a:	f105 0514 	add.w	r5, r5, #20
	for (i = 0; i < USB_D_N_EP; i++) {
   1293e:	d016      	beq.n	1296e <_usb_d_dev_handler+0x632>
	if (!(_usb_d_dev_ep_is_used(ept) && _usb_d_dev_ep_is_busy(ept))) {
   12940:	f895 0026 	ldrb.w	r0, [r5, #38]	; 0x26
   12944:	eb04 0384 	add.w	r3, r4, r4, lsl #2
   12948:	eb06 0383 	add.w	r3, r6, r3, lsl #2
   1294c:	28ff      	cmp	r0, #255	; 0xff
   1294e:	f103 0320 	add.w	r3, r3, #32
   12952:	f104 0401 	add.w	r4, r4, #1
   12956:	d0eb      	beq.n	12930 <_usb_d_dev_handler+0x5f4>
   12958:	79da      	ldrb	r2, [r3, #7]
   1295a:	0651      	lsls	r1, r2, #25
   1295c:	d5e8      	bpl.n	12930 <_usb_d_dev_handler+0x5f4>
	ept->flags.bits.is_busy = 0;
   1295e:	f36f 1286 	bfc	r2, #6, #1
   12962:	71da      	strb	r2, [r3, #7]
	dev_inst.ep_callbacks.done(ept->ep, code, ept->trans_count);
   12964:	69ea      	ldr	r2, [r5, #28]
   12966:	6933      	ldr	r3, [r6, #16]
   12968:	2103      	movs	r1, #3
   1296a:	4798      	blx	r3
   1296c:	e7e0      	b.n	12930 <_usb_d_dev_handler+0x5f4>
	memset(prvt_inst.desc_table, 0, sizeof(UsbDeviceDescriptor) * (CONF_USB_D_MAX_EP_N + 1));
   1296e:	2100      	movs	r1, #0
   12970:	2260      	movs	r2, #96	; 0x60
   12972:	4803      	ldr	r0, [pc, #12]	; (12980 <_usb_d_dev_handler+0x644>)
   12974:	f015 fa72 	bl	27e5c <memset>
	dev_inst.callbacks.event(USB_EV_RESET, 0);
   12978:	6873      	ldr	r3, [r6, #4]
   1297a:	2100      	movs	r1, #0
   1297c:	2001      	movs	r0, #1
   1297e:	e717      	b.n	127b0 <_usb_d_dev_handler+0x474>
   12980:	200022cc 	.word	0x200022cc
   12984:	2000209c 	.word	0x2000209c
   12988:	40001000 	.word	0x40001000
	if ((eptype == USB_D_EPTYPE_ISOCH) && st.bit.CRCERR) {
   1298c:	07d9      	lsls	r1, r3, #31
   1298e:	f57f af7d 	bpl.w	1288c <_usb_d_dev_handler+0x550>
		bank[bank_n].STATUS_BK.bit.CRCERR = 0;
   12992:	f89e 100a 	ldrb.w	r1, [lr, #10]
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENCLR.reg = mask;
   12996:	f102 4382 	add.w	r3, r2, #1090519040	; 0x41000000
   1299a:	460a      	mov	r2, r1
   1299c:	f36f 0200 	bfc	r2, #0, #1
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg = mask;
   129a0:	2104      	movs	r1, #4
	if (!(_usb_d_dev_ep_is_used(ept) && _usb_d_dev_ep_is_busy(ept))) {
   129a2:	f01b 0f40 	tst.w	fp, #64	; 0x40
		bank[bank_n].STATUS_BK.bit.CRCERR = 0;
   129a6:	f88e 200a 	strb.w	r2, [lr, #10]
   129aa:	f888 1107 	strb.w	r1, [r8, #263]	; 0x107
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENCLR.reg = mask;
   129ae:	f883 1108 	strb.w	r1, [r3, #264]	; 0x108
	if (!(_usb_d_dev_ep_is_used(ept) && _usb_d_dev_ep_is_busy(ept))) {
   129b2:	f43f ad04 	beq.w	123be <_usb_d_dev_handler+0x82>
	ept->flags.bits.is_busy = 0;
   129b6:	4a11      	ldr	r2, [pc, #68]	; (129fc <_usb_d_dev_handler+0x6c0>)
   129b8:	eb0a 0e04 	add.w	lr, sl, r4
   129bc:	eb02 0e8e 	add.w	lr, r2, lr, lsl #2
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSSET.reg = mask;
   129c0:	f04f 0c40 	mov.w	ip, #64	; 0x40
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg = mask;
   129c4:	2225      	movs	r2, #37	; 0x25
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSSET.reg = mask;
   129c6:	f888 c105 	strb.w	ip, [r8, #261]	; 0x105
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg = mask;
   129ca:	f888 2107 	strb.w	r2, [r8, #263]	; 0x107
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENCLR.reg = mask;
   129ce:	f883 2108 	strb.w	r2, [r3, #264]	; 0x108
   129d2:	f89e 2027 	ldrb.w	r2, [lr, #39]	; 0x27
	dev_inst.ep_callbacks.done(ept->ep, code, ept->trans_count);
   129d6:	4b09      	ldr	r3, [pc, #36]	; (129fc <_usb_d_dev_handler+0x6c0>)
	ept->flags.bits.is_busy = 0;
   129d8:	f36f 1286 	bfc	r2, #6, #1
   129dc:	f88e 2027 	strb.w	r2, [lr, #39]	; 0x27
	dev_inst.ep_callbacks.done(ept->ep, code, ept->trans_count);
   129e0:	691b      	ldr	r3, [r3, #16]
   129e2:	68aa      	ldr	r2, [r5, #8]
   129e4:	4798      	blx	r3
   129e6:	e4ea      	b.n	123be <_usb_d_dev_handler+0x82>
		UsbDeviceDescBank *bank = &prvt_inst.desc_table[i].DeviceDescBank[0];
   129e8:	2001      	movs	r0, #1
			lpm_variable = bank->EXTREG.bit.VARIABLE;
   129ea:	eb03 1040 	add.w	r0, r3, r0, lsl #5
			bank->EXTREG.reg = 0;
   129ee:	2300      	movs	r3, #0
			lpm_variable = bank->EXTREG.bit.VARIABLE;
   129f0:	8901      	ldrh	r1, [r0, #8]
			bank->EXTREG.reg = 0;
   129f2:	8103      	strh	r3, [r0, #8]
			lpm_variable = bank->EXTREG.bit.VARIABLE;
   129f4:	f3c1 110a 	ubfx	r1, r1, #4, #11
   129f8:	e6d7      	b.n	127aa <_usb_d_dev_handler+0x46e>
   129fa:	bf00      	nop
   129fc:	2000209c 	.word	0x2000209c

00012a00 <_usb_d_dev_init>:
{
   12a00:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	return ((Usb *)hw)->DEVICE.SYNCBUSY.reg & reg;
   12a04:	f04f 4282 	mov.w	r2, #1090519040	; 0x41000000
   12a08:	7893      	ldrb	r3, [r2, #2]
	if (!hri_usbdevice_is_syncing(hw, USB_SYNCBUSY_SWRST)) {
   12a0a:	07db      	lsls	r3, r3, #31
   12a0c:	d551      	bpl.n	12ab2 <_usb_d_dev_init+0xb2>
	while (((Usb *)hw)->DEVICE.SYNCBUSY.reg & reg) {
   12a0e:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
   12a12:	789c      	ldrb	r4, [r3, #2]
   12a14:	f014 0401 	ands.w	r4, r4, #1
   12a18:	d1fb      	bne.n	12a12 <_usb_d_dev_init+0x12>
	dev_inst.callbacks.sof   = (_usb_d_dev_sof_cb_t)_dummy_func_no_return;
   12a1a:	4b45      	ldr	r3, [pc, #276]	; (12b30 <_usb_d_dev_init+0x130>)
   12a1c:	4a45      	ldr	r2, [pc, #276]	; (12b34 <_usb_d_dev_init+0x134>)
   12a1e:	601a      	str	r2, [r3, #0]
   12a20:	461e      	mov	r6, r3
   12a22:	461d      	mov	r5, r3
	dev_inst.callbacks.event = (_usb_d_dev_event_cb_t)_dummy_func_no_return;
   12a24:	605a      	str	r2, [r3, #4]
	dev_inst.ep_callbacks.setup = (_usb_d_dev_ep_cb_setup_t)_dummy_func_no_return;
   12a26:	609a      	str	r2, [r3, #8]
	dev_inst.ep_callbacks.more  = (_usb_d_dev_ep_cb_more_t)_dummy_func_no_return;
   12a28:	60da      	str	r2, [r3, #12]
	dev_inst.ep_callbacks.done  = (_usb_d_dev_ep_cb_done_t)_dummy_func_no_return;
   12a2a:	611a      	str	r2, [r3, #16]
		dev_inst.ep[i].flags.u8 = 0;
   12a2c:	46a0      	mov	r8, r4
		dev_inst.ep[i].ep       = 0xFF;
   12a2e:	27ff      	movs	r7, #255	; 0xff
   12a30:	e007      	b.n	12a42 <_usb_d_dev_init+0x42>
	for (i = 0; i < USB_D_N_EP; i++) {
   12a32:	2c1b      	cmp	r4, #27
		dev_inst.ep[i].ep       = 0xFF;
   12a34:	f885 7026 	strb.w	r7, [r5, #38]	; 0x26
		dev_inst.ep[i].flags.u8 = 0;
   12a38:	f885 8027 	strb.w	r8, [r5, #39]	; 0x27
   12a3c:	f105 0514 	add.w	r5, r5, #20
	for (i = 0; i < USB_D_N_EP; i++) {
   12a40:	d01d      	beq.n	12a7e <_usb_d_dev_init+0x7e>
	if (!(_usb_d_dev_ep_is_used(ept) && _usb_d_dev_ep_is_busy(ept))) {
   12a42:	f895 0026 	ldrb.w	r0, [r5, #38]	; 0x26
   12a46:	eb04 0384 	add.w	r3, r4, r4, lsl #2
   12a4a:	eb06 0383 	add.w	r3, r6, r3, lsl #2
   12a4e:	28ff      	cmp	r0, #255	; 0xff
   12a50:	f103 0320 	add.w	r3, r3, #32
   12a54:	f104 0401 	add.w	r4, r4, #1
   12a58:	d0eb      	beq.n	12a32 <_usb_d_dev_init+0x32>
   12a5a:	79da      	ldrb	r2, [r3, #7]
   12a5c:	0651      	lsls	r1, r2, #25
   12a5e:	d5e8      	bpl.n	12a32 <_usb_d_dev_init+0x32>
	ept->flags.bits.is_busy = 0;
   12a60:	f36f 1286 	bfc	r2, #6, #1
   12a64:	71da      	strb	r2, [r3, #7]
	dev_inst.ep_callbacks.done(ept->ep, code, ept->trans_count);
   12a66:	69ea      	ldr	r2, [r5, #28]
   12a68:	6933      	ldr	r3, [r6, #16]
   12a6a:	2103      	movs	r1, #3
   12a6c:	4798      	blx	r3
	for (i = 0; i < USB_D_N_EP; i++) {
   12a6e:	2c1b      	cmp	r4, #27
		dev_inst.ep[i].ep       = 0xFF;
   12a70:	f885 7026 	strb.w	r7, [r5, #38]	; 0x26
		dev_inst.ep[i].flags.u8 = 0;
   12a74:	f885 8027 	strb.w	r8, [r5, #39]	; 0x27
   12a78:	f105 0514 	add.w	r5, r5, #20
	for (i = 0; i < USB_D_N_EP; i++) {
   12a7c:	d1e1      	bne.n	12a42 <_usb_d_dev_init+0x42>
	memset(prvt_inst.desc_table, 0, sizeof(UsbDeviceDescriptor) * (CONF_USB_D_MAX_EP_N + 1));
   12a7e:	2260      	movs	r2, #96	; 0x60
   12a80:	2100      	movs	r1, #0
   12a82:	482d      	ldr	r0, [pc, #180]	; (12b38 <_usb_d_dev_init+0x138>)
   12a84:	f015 f9ea 	bl	27e5c <memset>
	    = (*((uint32_t *)(NVMCTRL_SW0) + (NVM_USB_PAD_TRANSN_POS / 32)) >> (NVM_USB_PAD_TRANSN_POS % 32))
   12a88:	4b2c      	ldr	r3, [pc, #176]	; (12b3c <_usb_d_dev_init+0x13c>)
   12a8a:	681b      	ldr	r3, [r3, #0]
	uint32_t pad_transp
   12a8c:	f3c3 1044 	ubfx	r0, r3, #5, #5
	uint32_t pad_trim = (*((uint32_t *)(NVMCTRL_SW0) + (NVM_USB_PAD_TRIM_POS / 32)) >> (NVM_USB_PAD_TRIM_POS % 32))
   12a90:	f3c3 2282 	ubfx	r2, r3, #10, #3
	if (pad_transn == 0 || pad_transn == 0x1F) {
   12a94:	f013 031f 	ands.w	r3, r3, #31
   12a98:	d027      	beq.n	12aea <_usb_d_dev_init+0xea>
   12a9a:	2b1f      	cmp	r3, #31
   12a9c:	d025      	beq.n	12aea <_usb_d_dev_init+0xea>
   12a9e:	019b      	lsls	r3, r3, #6
	if (pad_transp == 0 || pad_transp == 0x1F) {
   12aa0:	b338      	cbz	r0, 12af2 <_usb_d_dev_init+0xf2>
   12aa2:	281f      	cmp	r0, #31
   12aa4:	d025      	beq.n	12af2 <_usb_d_dev_init+0xf2>
   12aa6:	b280      	uxth	r0, r0
	if (pad_trim == 0 || pad_trim == 0x7) {
   12aa8:	b332      	cbz	r2, 12af8 <_usb_d_dev_init+0xf8>
   12aaa:	2a07      	cmp	r2, #7
   12aac:	d024      	beq.n	12af8 <_usb_d_dev_init+0xf8>
   12aae:	0311      	lsls	r1, r2, #12
   12ab0:	e024      	b.n	12afc <_usb_d_dev_init+0xfc>
   12ab2:	7893      	ldrb	r3, [r2, #2]
   12ab4:	079f      	lsls	r7, r3, #30
   12ab6:	d1fc      	bne.n	12ab2 <_usb_d_dev_init+0xb2>

static inline hri_usb_ctrla_reg_t hri_usb_get_CTRLA_reg(const void *const hw, hri_usb_ctrla_reg_t mask)
{
	uint8_t tmp;
	hri_usb_wait_for_sync(hw, USB_SYNCBUSY_MASK);
	tmp = ((Usb *)hw)->HOST.CTRLA.reg;
   12ab8:	7813      	ldrb	r3, [r2, #0]
		if (hri_usbdevice_get_CTRLA_reg(hw, USB_CTRLA_ENABLE)) {
   12aba:	079e      	lsls	r6, r3, #30
   12abc:	d50d      	bpl.n	12ada <_usb_d_dev_init+0xda>
	((Usb *)hw)->HOST.CTRLA.reg &= ~USB_CTRLA_ENABLE;
   12abe:	7813      	ldrb	r3, [r2, #0]
   12ac0:	f003 03fd 	and.w	r3, r3, #253	; 0xfd
   12ac4:	7013      	strb	r3, [r2, #0]
	while (((Usb *)hw)->DEVICE.SYNCBUSY.reg & reg) {
   12ac6:	f04f 4282 	mov.w	r2, #1090519040	; 0x41000000
   12aca:	7893      	ldrb	r3, [r2, #2]
   12acc:	079d      	lsls	r5, r3, #30
   12ace:	d1fc      	bne.n	12aca <_usb_d_dev_init+0xca>
   12ad0:	f04f 4282 	mov.w	r2, #1090519040	; 0x41000000
   12ad4:	7893      	ldrb	r3, [r2, #2]
   12ad6:	079c      	lsls	r4, r3, #30
   12ad8:	d4fc      	bmi.n	12ad4 <_usb_d_dev_init+0xd4>
}

static inline void hri_usb_write_CTRLA_reg(const void *const hw, hri_usb_ctrla_reg_t data)
{
	USB_CRITICAL_SECTION_ENTER();
	((Usb *)hw)->HOST.CTRLA.reg = data;
   12ada:	f04f 4282 	mov.w	r2, #1090519040	; 0x41000000
   12ade:	2301      	movs	r3, #1
   12ae0:	7013      	strb	r3, [r2, #0]
	while (((Usb *)hw)->DEVICE.SYNCBUSY.reg & reg) {
   12ae2:	7893      	ldrb	r3, [r2, #2]
   12ae4:	0798      	lsls	r0, r3, #30
   12ae6:	d1fc      	bne.n	12ae2 <_usb_d_dev_init+0xe2>
   12ae8:	e791      	b.n	12a0e <_usb_d_dev_init+0xe>
	if (pad_transn == 0 || pad_transn == 0x1F) {
   12aea:	f44f 7310 	mov.w	r3, #576	; 0x240
	if (pad_transp == 0 || pad_transp == 0x1F) {
   12aee:	2800      	cmp	r0, #0
   12af0:	d1d7      	bne.n	12aa2 <_usb_d_dev_init+0xa2>
   12af2:	2019      	movs	r0, #25
	if (pad_trim == 0 || pad_trim == 0x7) {
   12af4:	2a00      	cmp	r2, #0
   12af6:	d1d8      	bne.n	12aaa <_usb_d_dev_init+0xaa>
   12af8:	f44f 41c0 	mov.w	r1, #24576	; 0x6000
	hw->DEVICE.PADCAL.reg = USB_PADCAL_TRANSN(pad_transn) | USB_PADCAL_TRANSP(pad_transp) | USB_PADCAL_TRIM(pad_trim);
   12afc:	f04f 4282 	mov.w	r2, #1090519040	; 0x41000000
   12b00:	4303      	orrs	r3, r0
   12b02:	430b      	orrs	r3, r1
   12b04:	8513      	strh	r3, [r2, #40]	; 0x28
	hw->DEVICE.QOSCTRL.bit.CQOS = 3;
   12b06:	78d3      	ldrb	r3, [r2, #3]
   12b08:	f043 0303 	orr.w	r3, r3, #3
   12b0c:	70d3      	strb	r3, [r2, #3]
	hw->DEVICE.QOSCTRL.bit.DQOS = 3;
   12b0e:	78d3      	ldrb	r3, [r2, #3]
	((Usb *)hw)->HOST.CTRLA.reg = data;
   12b10:	2104      	movs	r1, #4
   12b12:	f043 030c 	orr.w	r3, r3, #12
   12b16:	70d3      	strb	r3, [r2, #3]
	while (((Usb *)hw)->DEVICE.SYNCBUSY.reg & reg) {
   12b18:	4613      	mov	r3, r2
	((Usb *)hw)->HOST.CTRLA.reg = data;
   12b1a:	7011      	strb	r1, [r2, #0]
	while (((Usb *)hw)->DEVICE.SYNCBUSY.reg & reg) {
   12b1c:	7898      	ldrb	r0, [r3, #2]
   12b1e:	f010 0003 	ands.w	r0, r0, #3
   12b22:	d1fb      	bne.n	12b1c <_usb_d_dev_init+0x11c>
	hri_usbdevice_write_DESCADD_reg(hw, (uint32_t)prvt_inst.desc_table);
   12b24:	4a04      	ldr	r2, [pc, #16]	; (12b38 <_usb_d_dev_init+0x138>)
}

static inline void hri_usb_write_DESCADD_reg(const void *const hw, hri_usb_descadd_reg_t data)
{
	USB_CRITICAL_SECTION_ENTER();
	((Usb *)hw)->HOST.DESCADD.reg = data;
   12b26:	625a      	str	r2, [r3, #36]	; 0x24
	((Usb *)hw)->DEVICE.CTRLB.reg = data;
   12b28:	2201      	movs	r2, #1
   12b2a:	811a      	strh	r2, [r3, #8]
}
   12b2c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   12b30:	2000209c 	.word	0x2000209c
   12b34:	00011fcd 	.word	0x00011fcd
   12b38:	200022cc 	.word	0x200022cc
   12b3c:	00800084 	.word	0x00800084

00012b40 <_usb_d_dev_enable>:
	tmp = ((Usb *)hw)->HOST.SYNCBUSY.reg;
   12b40:	f04f 4282 	mov.w	r2, #1090519040	; 0x41000000
   12b44:	7893      	ldrb	r3, [r2, #2]
	if (hri_usbdevice_get_SYNCBUSY_reg(hw, (USB_SYNCBUSY_ENABLE | USB_SYNCBUSY_SWRST))) {
   12b46:	079b      	lsls	r3, r3, #30
   12b48:	d124      	bne.n	12b94 <_usb_d_dev_enable+0x54>
{
   12b4a:	b470      	push	{r4, r5, r6}
	while (((Usb *)hw)->DEVICE.SYNCBUSY.reg & reg) {
   12b4c:	7893      	ldrb	r3, [r2, #2]
   12b4e:	0798      	lsls	r0, r3, #30
   12b50:	d1fc      	bne.n	12b4c <_usb_d_dev_enable+0xc>
	return ((Usb *)hw)->HOST.CTRLA.reg;
   12b52:	7813      	ldrb	r3, [r2, #0]
   12b54:	b2db      	uxtb	r3, r3
	if ((ctrla & USB_CTRLA_ENABLE) == 0) {
   12b56:	0799      	lsls	r1, r3, #30
   12b58:	d407      	bmi.n	12b6a <_usb_d_dev_enable+0x2a>
		hri_usbdevice_write_CTRLA_reg(hw, ctrla | USB_CTRLA_ENABLE);
   12b5a:	f043 0302 	orr.w	r3, r3, #2
	((Usb *)hw)->HOST.CTRLA.reg = data;
   12b5e:	7013      	strb	r3, [r2, #0]
	while (((Usb *)hw)->DEVICE.SYNCBUSY.reg & reg) {
   12b60:	f04f 4282 	mov.w	r2, #1090519040	; 0x41000000
   12b64:	7893      	ldrb	r3, [r2, #2]
   12b66:	079b      	lsls	r3, r3, #30
   12b68:	d1fc      	bne.n	12b64 <_usb_d_dev_enable+0x24>
  NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
   12b6a:	4b0c      	ldr	r3, [pc, #48]	; (12b9c <_usb_d_dev_enable+0x5c>)
	((Usb *)hw)->DEVICE.INTENSET.reg = mask;
   12b6c:	f04f 4282 	mov.w	r2, #1090519040	; 0x41000000
   12b70:	f44f 3080 	mov.w	r0, #65536	; 0x10000
   12b74:	f44f 3600 	mov.w	r6, #131072	; 0x20000
   12b78:	f44f 2580 	mov.w	r5, #262144	; 0x40000
   12b7c:	f44f 2400 	mov.w	r4, #524288	; 0x80000
   12b80:	f240 218d 	movw	r1, #653	; 0x28d
   12b84:	6098      	str	r0, [r3, #8]
   12b86:	609e      	str	r6, [r3, #8]
   12b88:	609d      	str	r5, [r3, #8]
   12b8a:	609c      	str	r4, [r3, #8]
   12b8c:	8311      	strh	r1, [r2, #24]
	return ERR_NONE;
   12b8e:	2000      	movs	r0, #0
}
   12b90:	bc70      	pop	{r4, r5, r6}
   12b92:	4770      	bx	lr
		return -USB_ERR_DENIED;
   12b94:	f06f 0010 	mvn.w	r0, #16
   12b98:	4770      	bx	lr
   12b9a:	bf00      	nop
   12b9c:	e000e100 	.word	0xe000e100

00012ba0 <_usb_d_dev_attach>:
	((Usb *)hw)->DEVICE.CTRLB.reg &= ~USB_DEVICE_CTRLB_DETACH;
   12ba0:	f04f 4282 	mov.w	r2, #1090519040	; 0x41000000
   12ba4:	8913      	ldrh	r3, [r2, #8]
   12ba6:	f023 0301 	bic.w	r3, r3, #1
   12baa:	041b      	lsls	r3, r3, #16
   12bac:	0c1b      	lsrs	r3, r3, #16
   12bae:	8113      	strh	r3, [r2, #8]
   12bb0:	4770      	bx	lr
   12bb2:	bf00      	nop

00012bb4 <_usb_d_dev_set_address>:
	((Usb *)hw)->DEVICE.DADD.reg = data;
   12bb4:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
	hri_usbdevice_write_DADD_reg(USB, USB_DEVICE_DADD_ADDEN | USB_DEVICE_DADD_DADD(addr));
   12bb8:	f040 0080 	orr.w	r0, r0, #128	; 0x80
   12bbc:	7298      	strb	r0, [r3, #10]
   12bbe:	4770      	bx	lr

00012bc0 <_usb_d_dev_ep_init>:
{
   12bc0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	uint8_t ep_index = (epn == 0) ? 0 : (dir ? (epn + CONF_USB_D_MAX_EP_N) : epn);
   12bc4:	f010 050f 	ands.w	r5, r0, #15
   12bc8:	fa4f fc80 	sxtb.w	ip, r0
   12bcc:	d02a      	beq.n	12c24 <_usb_d_dev_ep_init+0x64>
   12bce:	f1bc 0f00 	cmp.w	ip, #0
   12bd2:	bfb4      	ite	lt
   12bd4:	1cab      	addlt	r3, r5, #2
   12bd6:	462b      	movge	r3, r5
	if (epn > CONF_USB_D_MAX_EP_N) {
   12bd8:	2d02      	cmp	r5, #2
	uint8_t                        ep_type = attr & USB_EP_XTYPE_MASK;
   12bda:	f001 0103 	and.w	r1, r1, #3
	if (epn > CONF_USB_D_MAX_EP_N) {
   12bde:	d859      	bhi.n	12c94 <_usb_d_dev_ep_init+0xd4>
	if (ept->ep != 0xFF) {
   12be0:	009c      	lsls	r4, r3, #2
   12be2:	f8df e0b8 	ldr.w	lr, [pc, #184]	; 12c9c <_usb_d_dev_ep_init+0xdc>
   12be6:	18e6      	adds	r6, r4, r3
   12be8:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
   12bec:	f896 6026 	ldrb.w	r6, [r6, #38]	; 0x26
   12bf0:	2eff      	cmp	r6, #255	; 0xff
   12bf2:	d14b      	bne.n	12c8c <_usb_d_dev_ep_init+0xcc>
	if (ep_type == USB_EP_XTYPE_CTRL) {
   12bf4:	b1d1      	cbz	r1, 12c2c <_usb_d_dev_ep_init+0x6c>
	if ((dir ? pcfg->i_cache : pcfg->cache) && ((dir ? pcfg->i_size : pcfg->size) < max_pkt_siz)) {
   12bf6:	f1bc 0f00 	cmp.w	ip, #0
   12bfa:	db3a      	blt.n	12c72 <_usb_d_dev_ep_init+0xb2>
   12bfc:	006f      	lsls	r7, r5, #1
   12bfe:	197e      	adds	r6, r7, r5
   12c00:	f8df 809c 	ldr.w	r8, [pc, #156]	; 12ca0 <_usb_d_dev_ep_init+0xe0>
   12c04:	f858 6026 	ldr.w	r6, [r8, r6, lsl #2]
   12c08:	bb4e      	cbnz	r6, 12c5e <_usb_d_dev_ep_init+0x9e>
	ept->cache    = (uint8_t *)(dir ? pcfg->i_cache : pcfg->cache);
   12c0a:	4423      	add	r3, r4
   12c0c:	eb0e 0383 	add.w	r3, lr, r3, lsl #2
	ept->flags.u8 = (ep_type + 1);
   12c10:	3101      	adds	r1, #1
   12c12:	f883 1027 	strb.w	r1, [r3, #39]	; 0x27
	ept->ep       = ep;
   12c16:	f883 0026 	strb.w	r0, [r3, #38]	; 0x26
	ept->cache    = (uint8_t *)(dir ? pcfg->i_cache : pcfg->cache);
   12c1a:	621e      	str	r6, [r3, #32]
	ept->size     = max_pkt_siz;
   12c1c:	849a      	strh	r2, [r3, #36]	; 0x24
	return USB_OK;
   12c1e:	2000      	movs	r0, #0
   12c20:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	uint8_t                        ep_type = attr & USB_EP_XTYPE_MASK;
   12c24:	f001 0103 	and.w	r1, r1, #3
	return &dev_inst.ep[ep_index];
   12c28:	462b      	mov	r3, r5
   12c2a:	e7d9      	b.n	12be0 <_usb_d_dev_ep_init+0x20>
	uint8_t ep_index = (epn == 0) ? 0 : (dir ? (epn + CONF_USB_D_MAX_EP_N) : epn);
   12c2c:	b125      	cbz	r5, 12c38 <_usb_d_dev_ep_init+0x78>
   12c2e:	f1bc 0f00 	cmp.w	ip, #0
   12c32:	db01      	blt.n	12c38 <_usb_d_dev_ep_init+0x78>
   12c34:	1cae      	adds	r6, r5, #2
   12c36:	e000      	b.n	12c3a <_usb_d_dev_ep_init+0x7a>
   12c38:	462e      	mov	r6, r5
		if (ept_in->ep != 0xFF) {
   12c3a:	eb06 0686 	add.w	r6, r6, r6, lsl #2
   12c3e:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
   12c42:	f896 6026 	ldrb.w	r6, [r6, #38]	; 0x26
   12c46:	2eff      	cmp	r6, #255	; 0xff
   12c48:	d120      	bne.n	12c8c <_usb_d_dev_ep_init+0xcc>
		if (pcfg->cache == NULL) {
   12c4a:	006f      	lsls	r7, r5, #1
   12c4c:	197e      	adds	r6, r7, r5
   12c4e:	f8df 8050 	ldr.w	r8, [pc, #80]	; 12ca0 <_usb_d_dev_ep_init+0xe0>
   12c52:	f858 6026 	ldr.w	r6, [r8, r6, lsl #2]
   12c56:	b146      	cbz	r6, 12c6a <_usb_d_dev_ep_init+0xaa>
	if ((dir ? pcfg->i_cache : pcfg->cache) && ((dir ? pcfg->i_size : pcfg->size) < max_pkt_siz)) {
   12c58:	f1bc 0f00 	cmp.w	ip, #0
   12c5c:	db0c      	blt.n	12c78 <_usb_d_dev_ep_init+0xb8>
   12c5e:	443d      	add	r5, r7
   12c60:	eb08 0585 	add.w	r5, r8, r5, lsl #2
   12c64:	892d      	ldrh	r5, [r5, #8]
   12c66:	4295      	cmp	r5, r2
   12c68:	dacf      	bge.n	12c0a <_usb_d_dev_ep_init+0x4a>
			return -USB_ERR_FUNC;
   12c6a:	f06f 0012 	mvn.w	r0, #18
   12c6e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   12c72:	f8df 802c 	ldr.w	r8, [pc, #44]	; 12ca0 <_usb_d_dev_ep_init+0xe0>
   12c76:	006f      	lsls	r7, r5, #1
	if ((dir ? pcfg->i_cache : pcfg->cache) && ((dir ? pcfg->i_size : pcfg->size) < max_pkt_siz)) {
   12c78:	442f      	add	r7, r5
   12c7a:	eb08 0787 	add.w	r7, r8, r7, lsl #2
   12c7e:	687d      	ldr	r5, [r7, #4]
   12c80:	b115      	cbz	r5, 12c88 <_usb_d_dev_ep_init+0xc8>
   12c82:	897e      	ldrh	r6, [r7, #10]
   12c84:	4296      	cmp	r6, r2
   12c86:	dbf0      	blt.n	12c6a <_usb_d_dev_ep_init+0xaa>
   12c88:	462e      	mov	r6, r5
   12c8a:	e7be      	b.n	12c0a <_usb_d_dev_ep_init+0x4a>
		return -USB_ERR_REDO;
   12c8c:	f06f 0013 	mvn.w	r0, #19
   12c90:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return -USB_ERR_PARAM;
   12c94:	f06f 0011 	mvn.w	r0, #17
   12c98:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   12c9c:	2000209c 	.word	0x2000209c
   12ca0:	0002d564 	.word	0x0002d564

00012ca4 <_usb_d_dev_ep_deinit>:
{
   12ca4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	uint8_t ep_index = (epn == 0) ? 0 : (dir ? (epn + CONF_USB_D_MAX_EP_N) : epn);
   12ca8:	f010 070f 	ands.w	r7, r0, #15
{
   12cac:	b082      	sub	sp, #8
   12cae:	fa4f f980 	sxtb.w	r9, r0
	uint8_t ep_index = (epn == 0) ? 0 : (dir ? (epn + CONF_USB_D_MAX_EP_N) : epn);
   12cb2:	d009      	beq.n	12cc8 <_usb_d_dev_ep_deinit+0x24>
   12cb4:	f1b9 0f00 	cmp.w	r9, #0
   12cb8:	bfb4      	ite	lt
   12cba:	1cbe      	addlt	r6, r7, #2
   12cbc:	463e      	movge	r6, r7
	if (epn > CONF_USB_D_MAX_EP_N || !_usb_d_dev_ep_is_used(ept)) {
   12cbe:	2f02      	cmp	r7, #2
   12cc0:	d903      	bls.n	12cca <_usb_d_dev_ep_deinit+0x26>
}
   12cc2:	b002      	add	sp, #8
   12cc4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	return &dev_inst.ep[ep_index];
   12cc8:	463e      	mov	r6, r7
	if (epn > CONF_USB_D_MAX_EP_N || !_usb_d_dev_ep_is_used(ept)) {
   12cca:	ea4f 0886 	mov.w	r8, r6, lsl #2
   12cce:	4d3d      	ldr	r5, [pc, #244]	; (12dc4 <_usb_d_dev_ep_deinit+0x120>)
   12cd0:	eb08 0306 	add.w	r3, r8, r6
   12cd4:	eb05 0383 	add.w	r3, r5, r3, lsl #2
   12cd8:	f893 1026 	ldrb.w	r1, [r3, #38]	; 0x26
   12cdc:	29ff      	cmp	r1, #255	; 0xff
   12cde:	d0f0      	beq.n	12cc2 <_usb_d_dev_ep_deinit+0x1e>
	if (!(_usb_d_dev_ep_is_used(ept) && _usb_d_dev_ep_is_busy(ept))) {
   12ce0:	f893 3027 	ldrb.w	r3, [r3, #39]	; 0x27
	const uint8_t intflags[2] = {USB_D_BANK0_INT_FLAGS, USB_D_BANK1_INT_FLAGS};
   12ce4:	224a      	movs	r2, #74	; 0x4a
   12ce6:	4604      	mov	r4, r0
   12ce8:	f88d 2005 	strb.w	r2, [sp, #5]
   12cec:	2025      	movs	r0, #37	; 0x25
	if (!(_usb_d_dev_ep_is_used(ept) && _usb_d_dev_ep_is_busy(ept))) {
   12cee:	065a      	lsls	r2, r3, #25
	const uint8_t intflags[2] = {USB_D_BANK0_INT_FLAGS, USB_D_BANK1_INT_FLAGS};
   12cf0:	f88d 0004 	strb.w	r0, [sp, #4]
	if (!(_usb_d_dev_ep_is_used(ept) && _usb_d_dev_ep_is_busy(ept))) {
   12cf4:	d41b      	bmi.n	12d2e <_usb_d_dev_ep_deinit+0x8a>
	if (_usb_d_dev_ep_is_ctrl(ept)) {
   12cf6:	f003 0307 	and.w	r3, r3, #7
   12cfa:	2b01      	cmp	r3, #1
   12cfc:	d050      	beq.n	12da0 <_usb_d_dev_ep_deinit+0xfc>
	} else if (USB_EP_GET_DIR(ep)) {
   12cfe:	f1b9 0f00 	cmp.w	r9, #0
   12d02:	db54      	blt.n	12dae <_usb_d_dev_ep_deinit+0x10a>
   12d04:	0160      	lsls	r0, r4, #5
   12d06:	f100 4082 	add.w	r0, r0, #1090519040	; 0x41000000
		hw->DEVICE.DeviceEndpoint[ep].EPCFG.reg &= ~USB_DEVICE_EPCFG_EPTYPE0_Msk;
   12d0a:	f890 3100 	ldrb.w	r3, [r0, #256]	; 0x100
   12d0e:	f003 03f8 	and.w	r3, r3, #248	; 0xf8
   12d12:	f880 3100 	strb.w	r3, [r0, #256]	; 0x100
	ept->flags.u8 = 0;
   12d16:	4446      	add	r6, r8
   12d18:	eb05 0586 	add.w	r5, r5, r6, lsl #2
   12d1c:	2200      	movs	r2, #0
	ept->ep       = 0xFF;
   12d1e:	23ff      	movs	r3, #255	; 0xff
	ept->flags.u8 = 0;
   12d20:	f885 2027 	strb.w	r2, [r5, #39]	; 0x27
	ept->ep       = 0xFF;
   12d24:	f885 3026 	strb.w	r3, [r5, #38]	; 0x26
}
   12d28:	b002      	add	sp, #8
   12d2a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	uint8_t epn = USB_EP_GET_N(ept->ep);
   12d2e:	f001 030f 	and.w	r3, r1, #15
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSCLR.reg = mask;
   12d32:	f103 0208 	add.w	r2, r3, #8
   12d36:	0150      	lsls	r0, r2, #5
		return;
	}
	/* Stop transfer */
	if (dir) {
   12d38:	f1b9 0f00 	cmp.w	r9, #0
   12d3c:	f100 4082 	add.w	r0, r0, #1090519040	; 0x41000000
   12d40:	bfb5      	itete	lt
   12d42:	f04f 0e80 	movlt.w	lr, #128	; 0x80
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSSET.reg = mask;
   12d46:	f04f 0e40 	movge.w	lr, #64	; 0x40
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSCLR.reg = mask;
   12d4a:	f880 e004 	strblt.w	lr, [r0, #4]
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSSET.reg = mask;
   12d4e:	f880 e005 	strbge.w	lr, [r0, #5]
		_usbd_ep_set_in_rdy(epn, 1, false);
	} else {
		/* NAK OUT */
		_usbd_ep_set_out_rdy(epn, 0, false);
	}
	_usbd_ep_int_ack(epn, intflags[dir]);
   12d52:	f10d 0e08 	add.w	lr, sp, #8
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg = mask;
   12d56:	0150      	lsls	r0, r2, #5
   12d58:	eb0e 7ed9 	add.w	lr, lr, r9, lsr #31
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENCLR.reg = mask;
   12d5c:	015a      	lsls	r2, r3, #5
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg = mask;
   12d5e:	f100 4082 	add.w	r0, r0, #1090519040	; 0x41000000
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENCLR.reg = mask;
   12d62:	f102 4282 	add.w	r2, r2, #1090519040	; 0x41000000
	ept->flags.bits.is_busy = 0;
   12d66:	eb08 0306 	add.w	r3, r8, r6
   12d6a:	eb05 0383 	add.w	r3, r5, r3, lsl #2
	_usbd_ep_int_ack(epn, intflags[dir]);
   12d6e:	f81e ec04 	ldrb.w	lr, [lr, #-4]
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg = mask;
   12d72:	f880 e007 	strb.w	lr, [r0, #7]
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENCLR.reg = mask;
   12d76:	f882 e108 	strb.w	lr, [r2, #264]	; 0x108
	ept->flags.bits.is_busy = 0;
   12d7a:	f893 e027 	ldrb.w	lr, [r3, #39]	; 0x27
	dev_inst.ep_callbacks.done(ept->ep, code, ept->trans_count);
   12d7e:	69da      	ldr	r2, [r3, #28]
	ept->flags.bits.is_busy = 0;
   12d80:	f103 0a20 	add.w	sl, r3, #32
   12d84:	f36f 1e86 	bfc	lr, #6, #1
	dev_inst.ep_callbacks.done(ept->ep, code, ept->trans_count);
   12d88:	692b      	ldr	r3, [r5, #16]
	ept->flags.bits.is_busy = 0;
   12d8a:	f88a e007 	strb.w	lr, [sl, #7]
	dev_inst.ep_callbacks.done(ept->ep, code, ept->trans_count);
   12d8e:	4608      	mov	r0, r1
   12d90:	2103      	movs	r1, #3
   12d92:	4798      	blx	r3
   12d94:	f89a 3007 	ldrb.w	r3, [sl, #7]
	if (_usb_d_dev_ep_is_ctrl(ept)) {
   12d98:	f003 0307 	and.w	r3, r3, #7
   12d9c:	2b01      	cmp	r3, #1
   12d9e:	d1ae      	bne.n	12cfe <_usb_d_dev_ep_deinit+0x5a>
		hw->DEVICE.DeviceEndpoint[ep].EPCFG.reg = 0;
   12da0:	0160      	lsls	r0, r4, #5
   12da2:	f100 4082 	add.w	r0, r0, #1090519040	; 0x41000000
   12da6:	2300      	movs	r3, #0
   12da8:	f880 3100 	strb.w	r3, [r0, #256]	; 0x100
   12dac:	e7b3      	b.n	12d16 <_usb_d_dev_ep_deinit+0x72>
   12dae:	017f      	lsls	r7, r7, #5
   12db0:	f107 4782 	add.w	r7, r7, #1090519040	; 0x41000000
		hw->DEVICE.DeviceEndpoint[USB_EP_GET_N(ep)].EPCFG.reg &= ~USB_DEVICE_EPCFG_EPTYPE1_Msk;
   12db4:	f897 3100 	ldrb.w	r3, [r7, #256]	; 0x100
   12db8:	f003 038f 	and.w	r3, r3, #143	; 0x8f
   12dbc:	f887 3100 	strb.w	r3, [r7, #256]	; 0x100
   12dc0:	e7a9      	b.n	12d16 <_usb_d_dev_ep_deinit+0x72>
   12dc2:	bf00      	nop
   12dc4:	2000209c 	.word	0x2000209c

00012dc8 <_usb_d_dev_ep_enable>:
{
   12dc8:	b5f0      	push	{r4, r5, r6, r7, lr}
   12dca:	b246      	sxtb	r6, r0
	uint8_t ep_index = (epn == 0) ? 0 : (dir ? (epn + CONF_USB_D_MAX_EP_N) : epn);
   12dcc:	f010 000f 	ands.w	r0, r0, #15
   12dd0:	d045      	beq.n	12e5e <_usb_d_dev_ep_enable+0x96>
	return ((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPCFG.reg;
   12dd2:	0142      	lsls	r2, r0, #5
   12dd4:	2e00      	cmp	r6, #0
   12dd6:	f102 4282 	add.w	r2, r2, #1090519040	; 0x41000000
   12dda:	bfb4      	ite	lt
   12ddc:	1c83      	addlt	r3, r0, #2
   12dde:	4603      	movge	r3, r0
   12de0:	f892 4100 	ldrb.w	r4, [r2, #256]	; 0x100
	return &dev_inst.ep[ep_index];
   12de4:	4a84      	ldr	r2, [pc, #528]	; (12ff8 <_usb_d_dev_ep_enable+0x230>)
   12de6:	1c59      	adds	r1, r3, #1
   12de8:	eb01 0181 	add.w	r1, r1, r1, lsl #2
	if (epn > CONF_USB_D_MAX_EP_N || !_usb_d_dev_ep_is_used(ept)) {
   12dec:	2802      	cmp	r0, #2
   12dee:	b2e4      	uxtb	r4, r4
	return &dev_inst.ep[ep_index];
   12df0:	eb02 0181 	add.w	r1, r2, r1, lsl #2
	if (epn > CONF_USB_D_MAX_EP_N || !_usb_d_dev_ep_is_used(ept)) {
   12df4:	f200 809f 	bhi.w	12f36 <_usb_d_dev_ep_enable+0x16e>
   12df8:	eb03 0383 	add.w	r3, r3, r3, lsl #2
   12dfc:	eb02 0383 	add.w	r3, r2, r3, lsl #2
   12e00:	f893 2026 	ldrb.w	r2, [r3, #38]	; 0x26
   12e04:	2aff      	cmp	r2, #255	; 0xff
   12e06:	f000 8096 	beq.w	12f36 <_usb_d_dev_ep_enable+0x16e>
	if (ept->flags.bits.eptype == USB_D_EPTYPE_CTRL) {
   12e0a:	f893 2027 	ldrb.w	r2, [r3, #39]	; 0x27
	bank = prvt_inst.desc_table[epn].DeviceDescBank;
   12e0e:	4d7b      	ldr	r5, [pc, #492]	; (12ffc <_usb_d_dev_ep_enable+0x234>)
	if (ept->flags.bits.eptype == USB_D_EPTYPE_CTRL) {
   12e10:	f002 0e07 	and.w	lr, r2, #7
   12e14:	0140      	lsls	r0, r0, #5
   12e16:	f1be 0f01 	cmp.w	lr, #1
	bank = prvt_inst.desc_table[epn].DeviceDescBank;
   12e1a:	eb05 0700 	add.w	r7, r5, r0
	if (ept->flags.bits.eptype == USB_D_EPTYPE_CTRL) {
   12e1e:	d028      	beq.n	12e72 <_usb_d_dev_ep_enable+0xaa>
	} else if (dir) {
   12e20:	2e00      	cmp	r6, #0
   12e22:	db65      	blt.n	12ef0 <_usb_d_dev_ep_enable+0x128>
		if (epcfg & USB_DEVICE_EPCFG_EPTYPE0_Msk) {
   12e24:	0761      	lsls	r1, r4, #29
   12e26:	f040 80a4 	bne.w	12f72 <_usb_d_dev_ep_enable+0x1aa>
		bank[0].PCKSIZE.reg = USB_DEVICE_PCKSIZE_MULTI_PACKET_SIZE(ept->size)
   12e2a:	8c99      	ldrh	r1, [r3, #36]	; 0x24
   12e2c:	4b74      	ldr	r3, [pc, #464]	; (13000 <_usb_d_dev_ep_enable+0x238>)
		epcfg |= USB_DEVICE_EPCFG_EPTYPE0(ept->flags.bits.eptype);
   12e2e:	f002 0207 	and.w	r2, r2, #7
   12e32:	f100 4682 	add.w	r6, r0, #1090519040	; 0x41000000
   12e36:	4322      	orrs	r2, r4
	        : ((n > 256) ? 6 : ((n > 128) ? 5 : ((n > 64) ? 4 : ((n > 32) ? 3 : ((n > 16) ? 2 : ((n > 8) ? 1 : 0)))))));
   12e38:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPCFG.reg = data;
   12e3c:	f886 2100 	strb.w	r2, [r6, #256]	; 0x100
		bank[0].PCKSIZE.reg = USB_DEVICE_PCKSIZE_MULTI_PACKET_SIZE(ept->size)
   12e40:	ea03 3281 	and.w	r2, r3, r1, lsl #14
	        : ((n > 256) ? 6 : ((n > 128) ? 5 : ((n > 64) ? 4 : ((n > 32) ? 3 : ((n > 16) ? 2 : ((n > 8) ? 1 : 0)))))));
   12e44:	d97a      	bls.n	12f3c <_usb_d_dev_ep_enable+0x174>
   12e46:	f04f 41e0 	mov.w	r1, #1879048192	; 0x70000000
	bank->STATUS_BK.reg     = 0;
   12e4a:	182b      	adds	r3, r5, r0
		                      | USB_DEVICE_PCKSIZE_SIZE(_usbd_ep_pcksize_size(ept->size));
   12e4c:	430a      	orrs	r2, r1
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSSET.reg = mask;
   12e4e:	2440      	movs	r4, #64	; 0x40
	bank->STATUS_BK.reg     = 0;
   12e50:	2100      	movs	r1, #0
		bank[0].PCKSIZE.reg = USB_DEVICE_PCKSIZE_MULTI_PACKET_SIZE(ept->size)
   12e52:	607a      	str	r2, [r7, #4]
   12e54:	f886 4105 	strb.w	r4, [r6, #261]	; 0x105
	bank->STATUS_BK.reg     = 0;
   12e58:	7299      	strb	r1, [r3, #10]
	return USB_OK;
   12e5a:	4608      	mov	r0, r1
   12e5c:	bdf0      	pop	{r4, r5, r6, r7, pc}
	return ((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPCFG.reg;
   12e5e:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
	return &dev_inst.ep[ep_index];
   12e62:	4968      	ldr	r1, [pc, #416]	; (13004 <_usb_d_dev_ep_enable+0x23c>)
   12e64:	f893 4100 	ldrb.w	r4, [r3, #256]	; 0x100
   12e68:	f1a1 0214 	sub.w	r2, r1, #20
   12e6c:	b2e4      	uxtb	r4, r4
   12e6e:	4603      	mov	r3, r0
   12e70:	e7c2      	b.n	12df8 <_usb_d_dev_ep_enable+0x30>
		if (epcfg & (USB_DEVICE_EPCFG_EPTYPE1_Msk | USB_DEVICE_EPCFG_EPTYPE0_Msk)) {
   12e72:	f014 0f77 	tst.w	r4, #119	; 0x77
   12e76:	d17c      	bne.n	12f72 <_usb_d_dev_ep_enable+0x1aa>
		bank[0].PCKSIZE.reg = USB_DEVICE_PCKSIZE_MULTI_PACKET_SIZE(ept->size)
   12e78:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
   12e7a:	4a61      	ldr	r2, [pc, #388]	; (13000 <_usb_d_dev_ep_enable+0x238>)
   12e7c:	f100 4682 	add.w	r6, r0, #1090519040	; 0x41000000
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPCFG.reg = data;
   12e80:	2411      	movs	r4, #17
	        : ((n > 256) ? 6 : ((n > 128) ? 5 : ((n > 64) ? 4 : ((n > 32) ? 3 : ((n > 16) ? 2 : ((n > 8) ? 1 : 0)))))));
   12e82:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
		bank[0].PCKSIZE.reg = USB_DEVICE_PCKSIZE_MULTI_PACKET_SIZE(ept->size)
   12e86:	ea02 3283 	and.w	r2, r2, r3, lsl #14
   12e8a:	f886 4100 	strb.w	r4, [r6, #256]	; 0x100
	        : ((n > 256) ? 6 : ((n > 128) ? 5 : ((n > 64) ? 4 : ((n > 32) ? 3 : ((n > 16) ? 2 : ((n > 8) ? 1 : 0)))))));
   12e8e:	d94c      	bls.n	12f2a <_usb_d_dev_ep_enable+0x162>
   12e90:	f04f 44e0 	mov.w	r4, #1879048192	; 0x70000000
		    = USB_DEVICE_PCKSIZE_BYTE_COUNT(ept->size) | USB_DEVICE_PCKSIZE_SIZE(_usbd_ep_pcksize_size(ept->size));
   12e94:	f3c3 030d 	ubfx	r3, r3, #0, #14
   12e98:	4323      	orrs	r3, r4
		                      | USB_DEVICE_PCKSIZE_SIZE(_usbd_ep_pcksize_size(ept->size));
   12e9a:	4322      	orrs	r2, r4
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSCLR.reg = mask;
   12e9c:	f04f 0e80 	mov.w	lr, #128	; 0x80
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSSET.reg = mask;
   12ea0:	2440      	movs	r4, #64	; 0x40
		bank[0].PCKSIZE.reg = USB_DEVICE_PCKSIZE_MULTI_PACKET_SIZE(ept->size)
   12ea2:	607a      	str	r2, [r7, #4]
		    = USB_DEVICE_PCKSIZE_BYTE_COUNT(ept->size) | USB_DEVICE_PCKSIZE_SIZE(_usbd_ep_pcksize_size(ept->size));
   12ea4:	617b      	str	r3, [r7, #20]
   12ea6:	f886 4105 	strb.w	r4, [r6, #261]	; 0x105
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSCLR.reg = mask;
   12eaa:	f886 e104 	strb.w	lr, [r6, #260]	; 0x104
	uint8_t epn = USB_EP_GET_N(ept->ep);
   12eae:	7c8a      	ldrb	r2, [r1, #18]
   12eb0:	8a0f      	ldrh	r7, [r1, #16]
	_usbd_ep_set_buf(epn, 0, (uint32_t)ept->cache);
   12eb2:	f8d1 e00c 	ldr.w	lr, [r1, #12]
	uint8_t epn = USB_EP_GET_N(ept->ep);
   12eb6:	f002 020f 	and.w	r2, r2, #15
	bank->STATUS_BK.reg     = 0;
   12eba:	182b      	adds	r3, r5, r0
	bank->ADDR.reg          = addr;
   12ebc:	0151      	lsls	r1, r2, #5
	bank->STATUS_BK.reg     = 0;
   12ebe:	2000      	movs	r0, #0
   12ec0:	7298      	strb	r0, [r3, #10]
	bank->ADDR.reg          = addr;
   12ec2:	186e      	adds	r6, r5, r1
	bank->STATUS_BK.reg     = 0;
   12ec4:	7698      	strb	r0, [r3, #26]
	bank->ADDR.reg          = addr;
   12ec6:	f845 e001 	str.w	lr, [r5, r1]
	bank->PCKSIZE.bit.MULTI_PACKET_SIZE = size;
   12eca:	6873      	ldr	r3, [r6, #4]
   12ecc:	f367 339b 	bfi	r3, r7, #14, #14
   12ed0:	6073      	str	r3, [r6, #4]
	bank->PCKSIZE.bit.BYTE_COUNT = count;
   12ed2:	6872      	ldr	r2, [r6, #4]
   12ed4:	f101 4382 	add.w	r3, r1, #1090519040	; 0x41000000
   12ed8:	f360 020d 	bfi	r2, r0, #0, #14
   12edc:	27b0      	movs	r7, #176	; 0xb0
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENSET.reg = mask;
   12ede:	2510      	movs	r5, #16
   12ee0:	6072      	str	r2, [r6, #4]
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSCLR.reg = mask;
   12ee2:	f883 7104 	strb.w	r7, [r3, #260]	; 0x104
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSSET.reg = mask;
   12ee6:	f883 4105 	strb.w	r4, [r3, #261]	; 0x105
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENSET.reg = mask;
   12eea:	f883 5109 	strb.w	r5, [r3, #265]	; 0x109
   12eee:	bdf0      	pop	{r4, r5, r6, r7, pc}
		if (epcfg & USB_DEVICE_EPCFG_EPTYPE1_Msk) {
   12ef0:	f014 0f70 	tst.w	r4, #112	; 0x70
   12ef4:	d13d      	bne.n	12f72 <_usb_d_dev_ep_enable+0x1aa>
		    = USB_DEVICE_PCKSIZE_BYTE_COUNT(ept->size) | USB_DEVICE_PCKSIZE_SIZE(_usbd_ep_pcksize_size(ept->size));
   12ef6:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
		epcfg |= USB_DEVICE_EPCFG_EPTYPE1(ept->flags.bits.eptype);
   12ef8:	0112      	lsls	r2, r2, #4
   12efa:	f002 0270 	and.w	r2, r2, #112	; 0x70
   12efe:	f100 4682 	add.w	r6, r0, #1090519040	; 0x41000000
   12f02:	4322      	orrs	r2, r4
	        : ((n > 256) ? 6 : ((n > 128) ? 5 : ((n > 64) ? 4 : ((n > 32) ? 3 : ((n > 16) ? 2 : ((n > 8) ? 1 : 0)))))));
   12f04:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPCFG.reg = data;
   12f08:	f886 2100 	strb.w	r2, [r6, #256]	; 0x100
		    = USB_DEVICE_PCKSIZE_BYTE_COUNT(ept->size) | USB_DEVICE_PCKSIZE_SIZE(_usbd_ep_pcksize_size(ept->size));
   12f0c:	f3c3 010d 	ubfx	r1, r3, #0, #14
	        : ((n > 256) ? 6 : ((n > 128) ? 5 : ((n > 64) ? 4 : ((n > 32) ? 3 : ((n > 16) ? 2 : ((n > 8) ? 1 : 0)))))));
   12f10:	d91a      	bls.n	12f48 <_usb_d_dev_ep_enable+0x180>
   12f12:	f04f 42e0 	mov.w	r2, #1879048192	; 0x70000000
	bank->STATUS_BK.reg     = 0;
   12f16:	182b      	adds	r3, r5, r0
		    = USB_DEVICE_PCKSIZE_BYTE_COUNT(ept->size) | USB_DEVICE_PCKSIZE_SIZE(_usbd_ep_pcksize_size(ept->size));
   12f18:	430a      	orrs	r2, r1
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSCLR.reg = mask;
   12f1a:	2480      	movs	r4, #128	; 0x80
	bank->STATUS_BK.reg     = 0;
   12f1c:	2100      	movs	r1, #0
		    = USB_DEVICE_PCKSIZE_BYTE_COUNT(ept->size) | USB_DEVICE_PCKSIZE_SIZE(_usbd_ep_pcksize_size(ept->size));
   12f1e:	617a      	str	r2, [r7, #20]
   12f20:	f886 4104 	strb.w	r4, [r6, #260]	; 0x104
	bank->STATUS_BK.reg     = 0;
   12f24:	7699      	strb	r1, [r3, #26]
	return USB_OK;
   12f26:	4608      	mov	r0, r1
   12f28:	bdf0      	pop	{r4, r5, r6, r7, pc}
	        : ((n > 256) ? 6 : ((n > 128) ? 5 : ((n > 64) ? 4 : ((n > 32) ? 3 : ((n > 16) ? 2 : ((n > 8) ? 1 : 0)))))));
   12f2a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
   12f2e:	d923      	bls.n	12f78 <_usb_d_dev_ep_enable+0x1b0>
   12f30:	f04f 44c0 	mov.w	r4, #1610612736	; 0x60000000
   12f34:	e7ae      	b.n	12e94 <_usb_d_dev_ep_enable+0xcc>
		return -USB_ERR_PARAM;
   12f36:	f06f 0011 	mvn.w	r0, #17
   12f3a:	bdf0      	pop	{r4, r5, r6, r7, pc}
	        : ((n > 256) ? 6 : ((n > 128) ? 5 : ((n > 64) ? 4 : ((n > 32) ? 3 : ((n > 16) ? 2 : ((n > 8) ? 1 : 0)))))));
   12f3c:	f5b1 7f80 	cmp.w	r1, #256	; 0x100
   12f40:	d908      	bls.n	12f54 <_usb_d_dev_ep_enable+0x18c>
   12f42:	f04f 41c0 	mov.w	r1, #1610612736	; 0x60000000
   12f46:	e780      	b.n	12e4a <_usb_d_dev_ep_enable+0x82>
   12f48:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
   12f4c:	d907      	bls.n	12f5e <_usb_d_dev_ep_enable+0x196>
   12f4e:	f04f 42c0 	mov.w	r2, #1610612736	; 0x60000000
   12f52:	e7e0      	b.n	12f16 <_usb_d_dev_ep_enable+0x14e>
   12f54:	2980      	cmp	r1, #128	; 0x80
   12f56:	d907      	bls.n	12f68 <_usb_d_dev_ep_enable+0x1a0>
   12f58:	f04f 41a0 	mov.w	r1, #1342177280	; 0x50000000
   12f5c:	e775      	b.n	12e4a <_usb_d_dev_ep_enable+0x82>
   12f5e:	2b80      	cmp	r3, #128	; 0x80
   12f60:	d914      	bls.n	12f8c <_usb_d_dev_ep_enable+0x1c4>
   12f62:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
   12f66:	e7d6      	b.n	12f16 <_usb_d_dev_ep_enable+0x14e>
   12f68:	2940      	cmp	r1, #64	; 0x40
   12f6a:	d914      	bls.n	12f96 <_usb_d_dev_ep_enable+0x1ce>
   12f6c:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
   12f70:	e76b      	b.n	12e4a <_usb_d_dev_ep_enable+0x82>
			return -USB_ERR_REDO;
   12f72:	f06f 0013 	mvn.w	r0, #19
   12f76:	bdf0      	pop	{r4, r5, r6, r7, pc}
	        : ((n > 256) ? 6 : ((n > 128) ? 5 : ((n > 64) ? 4 : ((n > 32) ? 3 : ((n > 16) ? 2 : ((n > 8) ? 1 : 0)))))));
   12f78:	2b80      	cmp	r3, #128	; 0x80
   12f7a:	d902      	bls.n	12f82 <_usb_d_dev_ep_enable+0x1ba>
   12f7c:	f04f 44a0 	mov.w	r4, #1342177280	; 0x50000000
   12f80:	e788      	b.n	12e94 <_usb_d_dev_ep_enable+0xcc>
   12f82:	2b40      	cmp	r3, #64	; 0x40
   12f84:	d90c      	bls.n	12fa0 <_usb_d_dev_ep_enable+0x1d8>
   12f86:	f04f 4480 	mov.w	r4, #1073741824	; 0x40000000
   12f8a:	e783      	b.n	12e94 <_usb_d_dev_ep_enable+0xcc>
   12f8c:	2b40      	cmp	r3, #64	; 0x40
   12f8e:	d90c      	bls.n	12faa <_usb_d_dev_ep_enable+0x1e2>
   12f90:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
   12f94:	e7bf      	b.n	12f16 <_usb_d_dev_ep_enable+0x14e>
   12f96:	2920      	cmp	r1, #32
   12f98:	d90c      	bls.n	12fb4 <_usb_d_dev_ep_enable+0x1ec>
   12f9a:	f04f 5140 	mov.w	r1, #805306368	; 0x30000000
   12f9e:	e754      	b.n	12e4a <_usb_d_dev_ep_enable+0x82>
   12fa0:	2b20      	cmp	r3, #32
   12fa2:	d90c      	bls.n	12fbe <_usb_d_dev_ep_enable+0x1f6>
   12fa4:	f04f 5440 	mov.w	r4, #805306368	; 0x30000000
   12fa8:	e774      	b.n	12e94 <_usb_d_dev_ep_enable+0xcc>
   12faa:	2b20      	cmp	r3, #32
   12fac:	d90c      	bls.n	12fc8 <_usb_d_dev_ep_enable+0x200>
   12fae:	f04f 5240 	mov.w	r2, #805306368	; 0x30000000
   12fb2:	e7b0      	b.n	12f16 <_usb_d_dev_ep_enable+0x14e>
   12fb4:	2910      	cmp	r1, #16
   12fb6:	d90c      	bls.n	12fd2 <_usb_d_dev_ep_enable+0x20a>
   12fb8:	f04f 5100 	mov.w	r1, #536870912	; 0x20000000
   12fbc:	e745      	b.n	12e4a <_usb_d_dev_ep_enable+0x82>
   12fbe:	2b10      	cmp	r3, #16
   12fc0:	d90d      	bls.n	12fde <_usb_d_dev_ep_enable+0x216>
   12fc2:	f04f 5400 	mov.w	r4, #536870912	; 0x20000000
   12fc6:	e765      	b.n	12e94 <_usb_d_dev_ep_enable+0xcc>
   12fc8:	2b10      	cmp	r3, #16
   12fca:	d90e      	bls.n	12fea <_usb_d_dev_ep_enable+0x222>
   12fcc:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
   12fd0:	e7a1      	b.n	12f16 <_usb_d_dev_ep_enable+0x14e>
   12fd2:	2908      	cmp	r1, #8
   12fd4:	bf94      	ite	ls
   12fd6:	2100      	movls	r1, #0
   12fd8:	2101      	movhi	r1, #1
   12fda:	0709      	lsls	r1, r1, #28
   12fdc:	e735      	b.n	12e4a <_usb_d_dev_ep_enable+0x82>
   12fde:	2b08      	cmp	r3, #8
   12fe0:	bf94      	ite	ls
   12fe2:	2400      	movls	r4, #0
   12fe4:	2401      	movhi	r4, #1
   12fe6:	0724      	lsls	r4, r4, #28
   12fe8:	e754      	b.n	12e94 <_usb_d_dev_ep_enable+0xcc>
   12fea:	2b08      	cmp	r3, #8
   12fec:	bf94      	ite	ls
   12fee:	2300      	movls	r3, #0
   12ff0:	2301      	movhi	r3, #1
   12ff2:	071a      	lsls	r2, r3, #28
   12ff4:	e78f      	b.n	12f16 <_usb_d_dev_ep_enable+0x14e>
   12ff6:	bf00      	nop
   12ff8:	2000209c 	.word	0x2000209c
   12ffc:	200022cc 	.word	0x200022cc
   13000:	0fffc000 	.word	0x0fffc000
   13004:	200020b0 	.word	0x200020b0

00013008 <_usb_d_dev_ep_stall>:
{
   13008:	b243      	sxtb	r3, r0
	uint8_t ep_index = (epn == 0) ? 0 : (dir ? (epn + CONF_USB_D_MAX_EP_N) : epn);
   1300a:	f010 000f 	ands.w	r0, r0, #15
{
   1300e:	b5f0      	push	{r4, r5, r6, r7, lr}
	bool                  dir = USB_EP_GET_DIR(ep);
   13010:	ea4f 75d3 	mov.w	r5, r3, lsr #31
	uint8_t ep_index = (epn == 0) ? 0 : (dir ? (epn + CONF_USB_D_MAX_EP_N) : epn);
   13014:	d01e      	beq.n	13054 <_usb_d_dev_ep_stall+0x4c>
   13016:	2b00      	cmp	r3, #0
   13018:	bfb4      	ite	lt
   1301a:	1c83      	addlt	r3, r0, #2
   1301c:	4603      	movge	r3, r0
	return &dev_inst.ep[ep_index];
   1301e:	1c5c      	adds	r4, r3, #1
   13020:	4a40      	ldr	r2, [pc, #256]	; (13124 <_usb_d_dev_ep_stall+0x11c>)
   13022:	eb04 0484 	add.w	r4, r4, r4, lsl #2
	if (epn > CONF_USB_D_MAX_EP_N) {
   13026:	2802      	cmp	r0, #2
	return &dev_inst.ep[ep_index];
   13028:	eb02 0284 	add.w	r2, r2, r4, lsl #2
	if (epn > CONF_USB_D_MAX_EP_N) {
   1302c:	d86d      	bhi.n	1310a <_usb_d_dev_ep_stall+0x102>
	if (USB_EP_STALL_SET == ctrl) {
   1302e:	2901      	cmp	r1, #1
   13030:	d014      	beq.n	1305c <_usb_d_dev_ep_stall+0x54>
	} else if (USB_EP_STALL_CLR == ctrl) {
   13032:	b389      	cbz	r1, 13098 <_usb_d_dev_ep_stall+0x90>
	uint8_t epn = USB_EP_GET_N(ept->ep);
   13034:	7c93      	ldrb	r3, [r2, #18]
	return ((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUS.reg;
   13036:	f003 030f 	and.w	r3, r3, #15
   1303a:	015b      	lsls	r3, r3, #5
   1303c:	f103 4382 	add.w	r3, r3, #1090519040	; 0x41000000
	return (hri_usbendpoint_read_EPSTATUS_reg(hw, epn) & (USB_DEVICE_EPSTATUS_STALLRQ0 << bank_n));
   13040:	2210      	movs	r2, #16
   13042:	f893 1106 	ldrb.w	r1, [r3, #262]	; 0x106
   13046:	fa02 f305 	lsl.w	r3, r2, r5
   1304a:	420b      	tst	r3, r1
   1304c:	bf14      	ite	ne
   1304e:	2001      	movne	r0, #1
   13050:	2000      	moveq	r0, #0
   13052:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (USB_EP_STALL_SET == ctrl) {
   13054:	2901      	cmp	r1, #1
	return &dev_inst.ep[ep_index];
   13056:	4a34      	ldr	r2, [pc, #208]	; (13128 <_usb_d_dev_ep_stall+0x120>)
   13058:	4603      	mov	r3, r0
	if (USB_EP_STALL_SET == ctrl) {
   1305a:	d1ea      	bne.n	13032 <_usb_d_dev_ep_stall+0x2a>
	uint8_t epn = USB_EP_GET_N(ept->ep);
   1305c:	4931      	ldr	r1, [pc, #196]	; (13124 <_usb_d_dev_ep_stall+0x11c>)
   1305e:	eb03 0383 	add.w	r3, r3, r3, lsl #2
   13062:	eb01 0183 	add.w	r1, r1, r3, lsl #2
		hri_usbendpoint_set_EPSTATUS_reg(USB, epn, (USB_DEVICE_EPSTATUS_STALLRQ0 << bank_n));
   13066:	2410      	movs	r4, #16
	uint8_t epn = USB_EP_GET_N(ept->ep);
   13068:	f891 2026 	ldrb.w	r2, [r1, #38]	; 0x26
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSSET.reg = mask;
   1306c:	f002 020f 	and.w	r2, r2, #15
   13070:	0150      	lsls	r0, r2, #5
	_usbd_ep_int_en(epn, USB_DEVICE_EPINTFLAG_STALL0 << dir);
   13072:	2320      	movs	r3, #32
   13074:	f100 4082 	add.w	r0, r0, #1090519040	; 0x41000000
		hri_usbendpoint_set_EPSTATUS_reg(USB, epn, (USB_DEVICE_EPSTATUS_STALLRQ0 << bank_n));
   13078:	40ac      	lsls	r4, r5
	_usbd_ep_int_en(epn, USB_DEVICE_EPINTFLAG_STALL0 << dir);
   1307a:	40ab      	lsls	r3, r5
		hri_usbendpoint_set_EPSTATUS_reg(USB, epn, (USB_DEVICE_EPSTATUS_STALLRQ0 << bank_n));
   1307c:	b2e4      	uxtb	r4, r4
	hri_usbendpoint_set_EPINTEN_reg(USB, epn, flags);
   1307e:	b2db      	uxtb	r3, r3
   13080:	f880 4105 	strb.w	r4, [r0, #261]	; 0x105
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENSET.reg = mask;
   13084:	f880 3109 	strb.w	r3, [r0, #265]	; 0x109
	ept->flags.bits.is_stalled = 1;
   13088:	f891 3027 	ldrb.w	r3, [r1, #39]	; 0x27
   1308c:	f043 0308 	orr.w	r3, r3, #8
   13090:	f881 3027 	strb.w	r3, [r1, #39]	; 0x27
		rc = _usb_d_dev_ep_stall_set(ept, dir);
   13094:	2000      	movs	r0, #0
   13096:	bdf0      	pop	{r4, r5, r6, r7, pc}
	uint8_t epn        = USB_EP_GET_N(ept->ep);
   13098:	009e      	lsls	r6, r3, #2
   1309a:	4c22      	ldr	r4, [pc, #136]	; (13124 <_usb_d_dev_ep_stall+0x11c>)
   1309c:	18f2      	adds	r2, r6, r3
   1309e:	eb04 0282 	add.w	r2, r4, r2, lsl #2
	return (hri_usbendpoint_read_EPSTATUS_reg(hw, epn) & (USB_DEVICE_EPSTATUS_STALLRQ0 << bank_n));
   130a2:	2010      	movs	r0, #16
	uint8_t epn        = USB_EP_GET_N(ept->ep);
   130a4:	f892 2026 	ldrb.w	r2, [r2, #38]	; 0x26
   130a8:	f002 020f 	and.w	r2, r2, #15
   130ac:	0151      	lsls	r1, r2, #5
   130ae:	f101 4182 	add.w	r1, r1, #1090519040	; 0x41000000
	return (hri_usbendpoint_read_EPSTATUS_reg(hw, epn) & (USB_DEVICE_EPSTATUS_STALLRQ0 << bank_n));
   130b2:	40a8      	lsls	r0, r5
	return ((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUS.reg;
   130b4:	f891 7106 	ldrb.w	r7, [r1, #262]	; 0x106
	if (!is_stalled) {
   130b8:	4207      	tst	r7, r0
   130ba:	d01b      	beq.n	130f4 <_usb_d_dev_ep_stall+0xec>
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENCLR.reg = mask;
   130bc:	0152      	lsls	r2, r2, #5
	_usbd_ep_int_dis(epn, USB_DEVICE_EPINTFLAG_STALL0 << dir);
   130be:	2720      	movs	r7, #32
   130c0:	f102 4282 	add.w	r2, r2, #1090519040	; 0x41000000
   130c4:	40af      	lsls	r7, r5
		hri_usbendpoint_clear_EPSTATUS_reg(USB, epn, (USB_DEVICE_EPSTATUS_STALLRQ0 << bank_n));
   130c6:	b2c0      	uxtb	r0, r0
	hri_usbendpoint_clear_EPINTEN_reg(USB, epn, flags);
   130c8:	fa5f fe87 	uxtb.w	lr, r7
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSCLR.reg = mask;
   130cc:	f881 0104 	strb.w	r0, [r1, #260]	; 0x104
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENCLR.reg = mask;
   130d0:	f882 e108 	strb.w	lr, [r2, #264]	; 0x108
	return ((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg;
   130d4:	f891 2107 	ldrb.w	r2, [r1, #263]	; 0x107
	if (_usbd_ep_is_stall_sent(epn, dir)) {
   130d8:	423a      	tst	r2, r7
   130da:	d10d      	bne.n	130f8 <_usb_d_dev_ep_stall+0xf0>
	if (_usb_d_dev_ep_is_ctrl(ept)) {
   130dc:	4433      	add	r3, r6
   130de:	eb04 0483 	add.w	r4, r4, r3, lsl #2
   130e2:	3420      	adds	r4, #32
   130e4:	79e3      	ldrb	r3, [r4, #7]
   130e6:	f003 0207 	and.w	r2, r3, #7
   130ea:	2a01      	cmp	r2, #1
   130ec:	d010      	beq.n	13110 <_usb_d_dev_ep_stall+0x108>
		ept->flags.bits.is_stalled = 0;
   130ee:	f36f 03c3 	bfc	r3, #3, #1
   130f2:	71e3      	strb	r3, [r4, #7]
		rc = _usb_d_dev_ep_stall_clr(ept, dir);
   130f4:	2000      	movs	r0, #0
   130f6:	bdf0      	pop	{r4, r5, r6, r7, pc}
		hri_usbendpoint_clear_EPSTATUS_reg(USB, epn, (USB_DEVICE_EPSTATUS_DTGLOUT << bank_n));
   130f8:	2201      	movs	r2, #1
   130fa:	fa02 f505 	lsl.w	r5, r2, r5
   130fe:	b2ed      	uxtb	r5, r5
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg = mask;
   13100:	f881 e107 	strb.w	lr, [r1, #263]	; 0x107
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSCLR.reg = mask;
   13104:	f881 5104 	strb.w	r5, [r1, #260]	; 0x104
   13108:	e7e8      	b.n	130dc <_usb_d_dev_ep_stall+0xd4>
		return -USB_ERR_PARAM;
   1310a:	f06f 0011 	mvn.w	r0, #17
}
   1310e:	bdf0      	pop	{r4, r5, r6, r7, pc}
	return ((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUS.reg;
   13110:	f891 0106 	ldrb.w	r0, [r1, #262]	; 0x106
		if ((hri_usbendpoint_read_EPSTATUS_reg(USB, epn) & USB_DEVICE_EPSTATUS_STALLRQ_Msk) == 0) {
   13114:	f010 0030 	ands.w	r0, r0, #48	; 0x30
   13118:	d1ec      	bne.n	130f4 <_usb_d_dev_ep_stall+0xec>
			ept->flags.bits.is_stalled = 0;
   1311a:	f360 03c3 	bfi	r3, r0, #3, #1
   1311e:	71e3      	strb	r3, [r4, #7]
   13120:	bdf0      	pop	{r4, r5, r6, r7, pc}
   13122:	bf00      	nop
   13124:	2000209c 	.word	0x2000209c
   13128:	200020b0 	.word	0x200020b0

0001312c <_usb_d_dev_ep_read_req>:
	_usbd_ep_int_dis(epn, intflags[dir]);
	_usb_d_dev_trans_done(ept, code);
}

int32_t _usb_d_dev_ep_read_req(const uint8_t ep, uint8_t *req_buf)
{
   1312c:	b470      	push	{r4, r5, r6}
	uint8_t            epn   = USB_EP_GET_N(ep);
   1312e:	f000 000f 	and.w	r0, r0, #15
	UsbDeviceDescBank *bank  = prvt_inst.desc_table[epn].DeviceDescBank;
   13132:	4a12      	ldr	r2, [pc, #72]	; (1317c <_usb_d_dev_ep_read_req+0x50>)
   13134:	0143      	lsls	r3, r0, #5
   13136:	18d4      	adds	r4, r2, r3
	uint32_t           addr  = bank[0].ADDR.reg;
   13138:	58d5      	ldr	r5, [r2, r3]
	uint16_t           bytes = bank[0].PCKSIZE.bit.BYTE_COUNT;
   1313a:	6864      	ldr	r4, [r4, #4]

	if (epn > CONF_USB_D_MAX_EP_N || !req_buf) {
   1313c:	2802      	cmp	r0, #2
	uint16_t           bytes = bank[0].PCKSIZE.bit.BYTE_COUNT;
   1313e:	f3c4 040d 	ubfx	r4, r4, #0, #14
	if (epn > CONF_USB_D_MAX_EP_N || !req_buf) {
   13142:	d818      	bhi.n	13176 <_usb_d_dev_ep_read_req+0x4a>
   13144:	b1b9      	cbz	r1, 13176 <_usb_d_dev_ep_read_req+0x4a>
   13146:	f103 4382 	add.w	r3, r3, #1090519040	; 0x41000000
	return ((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPCFG.reg;
   1314a:	f893 2100 	ldrb.w	r2, [r3, #256]	; 0x100
		return -USB_ERR_PARAM;
	}
	if (!_usbd_ep_is_ctrl(epn)) {
   1314e:	2a11      	cmp	r2, #17
   13150:	d10e      	bne.n	13170 <_usb_d_dev_ep_read_req+0x44>
	tmp = ((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg;
   13152:	f893 2107 	ldrb.w	r2, [r3, #263]	; 0x107
		return -USB_ERR_FUNC;
	}
	if (!_usbd_ep_is_setup(epn)) {
   13156:	f012 0010 	ands.w	r0, r2, #16
   1315a:	d007      	beq.n	1316c <_usb_d_dev_ep_read_req+0x40>
		return ERR_NONE;
	}
	memcpy(req_buf, (void *)addr, 8);
   1315c:	686a      	ldr	r2, [r5, #4]
   1315e:	682e      	ldr	r6, [r5, #0]
   13160:	604a      	str	r2, [r1, #4]
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg = mask;
   13162:	2210      	movs	r2, #16
   13164:	600e      	str	r6, [r1, #0]
	_usbd_ep_ack_setup(epn);

	return bytes;
   13166:	4620      	mov	r0, r4
   13168:	f883 2107 	strb.w	r2, [r3, #263]	; 0x107
}
   1316c:	bc70      	pop	{r4, r5, r6}
   1316e:	4770      	bx	lr
		return -USB_ERR_FUNC;
   13170:	f06f 0012 	mvn.w	r0, #18
   13174:	e7fa      	b.n	1316c <_usb_d_dev_ep_read_req+0x40>
		return -USB_ERR_PARAM;
   13176:	f06f 0011 	mvn.w	r0, #17
   1317a:	e7f7      	b.n	1316c <_usb_d_dev_ep_read_req+0x40>
   1317c:	200022cc 	.word	0x200022cc

00013180 <_usb_d_dev_ep_trans>:

int32_t _usb_d_dev_ep_trans(const struct usb_d_transfer *trans)
{
   13180:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	uint8_t               epn = USB_EP_GET_N(trans->ep);
   13184:	7a03      	ldrb	r3, [r0, #8]
   13186:	fa4f f983 	sxtb.w	r9, r3
	uint8_t ep_index = (epn == 0) ? 0 : (dir ? (epn + CONF_USB_D_MAX_EP_N) : epn);
   1318a:	f013 030f 	ands.w	r3, r3, #15
{
   1318e:	b087      	sub	sp, #28
	uint8_t ep_index = (epn == 0) ? 0 : (dir ? (epn + CONF_USB_D_MAX_EP_N) : epn);
   13190:	d03a      	beq.n	13208 <_usb_d_dev_ep_trans+0x88>
   13192:	f1b9 0f00 	cmp.w	r9, #0
   13196:	bfb4      	ite	lt
   13198:	1c9d      	addlt	r5, r3, #2
   1319a:	461d      	movge	r5, r3
	return &dev_inst.ep[ep_index];
   1319c:	4e5d      	ldr	r6, [pc, #372]	; (13314 <_usb_d_dev_ep_trans+0x194>)
	bool                  dir = USB_EP_GET_DIR(trans->ep);
	struct _usb_d_dev_ep *ept = _usb_d_dev_ept(epn, dir);

	uint16_t size_mask      = (ept->size == 1023) ? 1023 : (ept->size - 1);
   1319e:	eb05 0285 	add.w	r2, r5, r5, lsl #2
   131a2:	eb06 0282 	add.w	r2, r6, r2, lsl #2
	return &dev_inst.ep[ep_index];
   131a6:	f105 0801 	add.w	r8, r5, #1
	uint16_t size_mask      = (ept->size == 1023) ? 1023 : (ept->size - 1);
   131aa:	8c92      	ldrh	r2, [r2, #36]	; 0x24
   131ac:	f240 31ff 	movw	r1, #1023	; 0x3ff
	return &dev_inst.ep[ep_index];
   131b0:	eb08 0888 	add.w	r8, r8, r8, lsl #2
	uint16_t size_mask      = (ept->size == 1023) ? 1023 : (ept->size - 1);
   131b4:	428a      	cmp	r2, r1
	return &dev_inst.ep[ep_index];
   131b6:	eb06 0888 	add.w	r8, r6, r8, lsl #2
	uint16_t size_mask      = (ept->size == 1023) ? 1023 : (ept->size - 1);
   131ba:	d050      	beq.n	1325e <_usb_d_dev_ep_trans+0xde>
   131bc:	1e57      	subs	r7, r2, #1
   131be:	b2bf      	uxth	r7, r7
	bool     size_n_aligned = (trans->size & size_mask);
   131c0:	6841      	ldr	r1, [r0, #4]

	bool use_cache = false;

	volatile hal_atomic_t flags;

	if (epn > CONF_USB_D_MAX_EP_N) {
   131c2:	2b02      	cmp	r3, #2
	bool     size_n_aligned = (trans->size & size_mask);
   131c4:	ea07 0701 	and.w	r7, r7, r1
	if (epn > CONF_USB_D_MAX_EP_N) {
   131c8:	f200 8091 	bhi.w	132ee <_usb_d_dev_ep_trans+0x16e>
	 * 1. Buffer not in RAM (cache all).
	 * 2. IN/OUT with unaligned buffer (cache all).
	 * 3. OUT with unaligned packet size (cache last packet).
	 * 4. OUT size < 8 (sub-case for 3).
	 */
	if (!_usb_is_addr4dma(trans->buf, trans->size) || (!_usb_is_aligned(trans->buf))
   131cc:	6803      	ldr	r3, [r0, #0]
   131ce:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
   131d2:	d223      	bcs.n	1321c <_usb_d_dev_ep_trans+0x9c>
	    || (!dir && (trans->size < ept->size))) {
		if (!ept->cache) {
   131d4:	ea4f 0b85 	mov.w	fp, r5, lsl #2
   131d8:	eb0b 0305 	add.w	r3, fp, r5
   131dc:	eb06 0383 	add.w	r3, r6, r3, lsl #2
   131e0:	6a1b      	ldr	r3, [r3, #32]
   131e2:	2b00      	cmp	r3, #0
   131e4:	f000 8092 	beq.w	1330c <_usb_d_dev_ep_trans+0x18c>
			return -USB_ERR_FUNC;
		}
		/* Use cache all the time. */
		use_cache = true;
   131e8:	f04f 0a01 	mov.w	sl, #1
		}
		/* Set 'use_cache' on last packet. */
	}

	/* Check halt */
	if (ept->flags.bits.is_stalled) {
   131ec:	eb0b 0405 	add.w	r4, fp, r5
   131f0:	eb06 0484 	add.w	r4, r6, r4, lsl #2
   131f4:	f104 0220 	add.w	r2, r4, #32
   131f8:	f894 3027 	ldrb.w	r3, [r4, #39]	; 0x27
   131fc:	071b      	lsls	r3, r3, #28
   131fe:	d530      	bpl.n	13262 <_usb_d_dev_ep_trans+0xe2>
		return USB_HALTED;
   13200:	2002      	movs	r0, #2
	} else {
		_usb_d_dev_out_next(ept, false);
	}

	return ERR_NONE;
}
   13202:	b007      	add	sp, #28
   13204:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	uint16_t size_mask      = (ept->size == 1023) ? 1023 : (ept->size - 1);
   13208:	4e42      	ldr	r6, [pc, #264]	; (13314 <_usb_d_dev_ep_trans+0x194>)
   1320a:	8cb2      	ldrh	r2, [r6, #36]	; 0x24
   1320c:	f240 31ff 	movw	r1, #1023	; 0x3ff
   13210:	428a      	cmp	r2, r1
   13212:	d01d      	beq.n	13250 <_usb_d_dev_ep_trans+0xd0>
	return &dev_inst.ep[ep_index];
   13214:	f106 0814 	add.w	r8, r6, #20
   13218:	461d      	mov	r5, r3
   1321a:	e7cf      	b.n	131bc <_usb_d_dev_ep_trans+0x3c>
	if (!_usb_is_addr4dma(trans->buf, trans->size) || (!_usb_is_aligned(trans->buf))
   1321c:	4c3e      	ldr	r4, [pc, #248]	; (13318 <_usb_d_dev_ep_trans+0x198>)
   1321e:	eb03 0e01 	add.w	lr, r3, r1
   13222:	45a6      	cmp	lr, r4
   13224:	d8d6      	bhi.n	131d4 <_usb_d_dev_ep_trans+0x54>
   13226:	f013 0303 	ands.w	r3, r3, #3
   1322a:	d1d3      	bne.n	131d4 <_usb_d_dev_ep_trans+0x54>
	    || (!dir && (trans->size < ept->size))) {
   1322c:	f1b9 0f00 	cmp.w	r9, #0
   13230:	db60      	blt.n	132f4 <_usb_d_dev_ep_trans+0x174>
   13232:	428a      	cmp	r2, r1
   13234:	d8ce      	bhi.n	131d4 <_usb_d_dev_ep_trans+0x54>
	if (!dir && size_n_aligned) {
   13236:	2f00      	cmp	r7, #0
   13238:	d060      	beq.n	132fc <_usb_d_dev_ep_trans+0x17c>
		if (!ept->cache) {
   1323a:	ea4f 0b85 	mov.w	fp, r5, lsl #2
   1323e:	eb0b 0205 	add.w	r2, fp, r5
   13242:	eb06 0282 	add.w	r2, r6, r2, lsl #2
   13246:	6a12      	ldr	r2, [r2, #32]
   13248:	2a00      	cmp	r2, #0
   1324a:	d050      	beq.n	132ee <_usb_d_dev_ep_trans+0x16e>
	bool use_cache = false;
   1324c:	469a      	mov	sl, r3
   1324e:	e7cd      	b.n	131ec <_usb_d_dev_ep_trans+0x6c>
	bool     size_n_aligned = (trans->size & size_mask);
   13250:	6841      	ldr	r1, [r0, #4]
	return &dev_inst.ep[ep_index];
   13252:	461d      	mov	r5, r3
	bool     size_n_aligned = (trans->size & size_mask);
   13254:	f3c1 0709 	ubfx	r7, r1, #0, #10
	return &dev_inst.ep[ep_index];
   13258:	f106 0814 	add.w	r8, r6, #20
   1325c:	e7b6      	b.n	131cc <_usb_d_dev_ep_trans+0x4c>
   1325e:	4617      	mov	r7, r2
   13260:	e7ae      	b.n	131c0 <_usb_d_dev_ep_trans+0x40>
   13262:	9001      	str	r0, [sp, #4]
	atomic_enter_critical(&flags);
   13264:	a805      	add	r0, sp, #20
   13266:	9202      	str	r2, [sp, #8]
   13268:	f000 f8e0 	bl	1342c <atomic_enter_critical>
	if (_usb_d_dev_ep_is_busy(ept)) {
   1326c:	9a02      	ldr	r2, [sp, #8]
   1326e:	9b01      	ldr	r3, [sp, #4]
   13270:	79d0      	ldrb	r0, [r2, #7]
   13272:	f010 0140 	ands.w	r1, r0, #64	; 0x40
   13276:	d131      	bne.n	132dc <_usb_d_dev_ep_trans+0x15c>
	ept->flags.bits.is_busy = 1;
   13278:	f040 0e40 	orr.w	lr, r0, #64	; 0x40
   1327c:	f882 e007 	strb.w	lr, [r2, #7]
	atomic_leave_critical(&flags);
   13280:	a805      	add	r0, sp, #20
   13282:	9303      	str	r3, [sp, #12]
   13284:	9102      	str	r1, [sp, #8]
	ept->flags.bits.is_busy = 1;
   13286:	9201      	str	r2, [sp, #4]
	atomic_leave_critical(&flags);
   13288:	f000 f8d8 	bl	1343c <atomic_leave_critical>
	ept->trans_buf   = trans->buf;
   1328c:	9b03      	ldr	r3, [sp, #12]
	ept->flags.bits.dir       = dir;
   1328e:	9a01      	ldr	r2, [sp, #4]
	ept->trans_buf   = trans->buf;
   13290:	6818      	ldr	r0, [r3, #0]
	ept->flags.bits.dir       = dir;
   13292:	f892 e007 	ldrb.w	lr, [r2, #7]
	ept->trans_buf   = trans->buf;
   13296:	6160      	str	r0, [r4, #20]
	bool                  dir = USB_EP_GET_DIR(trans->ep);
   13298:	ea4f 70d9 	mov.w	r0, r9, lsr #31
	ept->flags.bits.dir       = dir;
   1329c:	f360 1ec7 	bfi	lr, r0, #7, #1
	ept->flags.bits.use_cache = use_cache;
   132a0:	f36a 1e45 	bfi	lr, sl, #5, #1
	ept->trans_size  = trans->size;
   132a4:	6858      	ldr	r0, [r3, #4]
	ept->trans_count = 0;
   132a6:	9902      	ldr	r1, [sp, #8]
	ept->trans_size  = trans->size;
   132a8:	61a0      	str	r0, [r4, #24]
	ept->flags.bits.use_cache = use_cache;
   132aa:	f882 e007 	strb.w	lr, [r2, #7]
	ept->trans_count = 0;
   132ae:	61e1      	str	r1, [r4, #28]
	ept->flags.bits.need_zlp  = (trans->zlp && (!size_n_aligned));
   132b0:	7a5b      	ldrb	r3, [r3, #9]
   132b2:	b9c3      	cbnz	r3, 132e6 <_usb_d_dev_ep_trans+0x166>
   132b4:	461f      	mov	r7, r3
   132b6:	445d      	add	r5, fp
   132b8:	eb06 0685 	add.w	r6, r6, r5, lsl #2
	if (dir) {
   132bc:	f1b9 0f00 	cmp.w	r9, #0
	ept->flags.bits.need_zlp  = (trans->zlp && (!size_n_aligned));
   132c0:	f896 3027 	ldrb.w	r3, [r6, #39]	; 0x27
   132c4:	f367 1304 	bfi	r3, r7, #4, #1
   132c8:	f886 3027 	strb.w	r3, [r6, #39]	; 0x27
		_usb_d_dev_in_next(ept, false);
   132cc:	4640      	mov	r0, r8
   132ce:	f04f 0100 	mov.w	r1, #0
	if (dir) {
   132d2:	db17      	blt.n	13304 <_usb_d_dev_ep_trans+0x184>
		_usb_d_dev_out_next(ept, false);
   132d4:	f7fe ff36 	bl	12144 <_usb_d_dev_out_next>
	return ERR_NONE;
   132d8:	2000      	movs	r0, #0
   132da:	e792      	b.n	13202 <_usb_d_dev_ep_trans+0x82>
		atomic_leave_critical(&flags);
   132dc:	a805      	add	r0, sp, #20
   132de:	f000 f8ad 	bl	1343c <atomic_leave_critical>
		return USB_BUSY;
   132e2:	2001      	movs	r0, #1
   132e4:	e78d      	b.n	13202 <_usb_d_dev_ep_trans+0x82>
	ept->flags.bits.need_zlp  = (trans->zlp && (!size_n_aligned));
   132e6:	fab7 f787 	clz	r7, r7
   132ea:	097f      	lsrs	r7, r7, #5
   132ec:	e7e3      	b.n	132b6 <_usb_d_dev_ep_trans+0x136>
		return -USB_ERR_PARAM;
   132ee:	f06f 0011 	mvn.w	r0, #17
   132f2:	e786      	b.n	13202 <_usb_d_dev_ep_trans+0x82>
	bool use_cache = false;
   132f4:	469a      	mov	sl, r3
   132f6:	ea4f 0b85 	mov.w	fp, r5, lsl #2
   132fa:	e777      	b.n	131ec <_usb_d_dev_ep_trans+0x6c>
   132fc:	46ba      	mov	sl, r7
   132fe:	ea4f 0b85 	mov.w	fp, r5, lsl #2
   13302:	e773      	b.n	131ec <_usb_d_dev_ep_trans+0x6c>
		_usb_d_dev_in_next(ept, false);
   13304:	f7fe fe64 	bl	11fd0 <_usb_d_dev_in_next>
	return ERR_NONE;
   13308:	2000      	movs	r0, #0
   1330a:	e77a      	b.n	13202 <_usb_d_dev_ep_trans+0x82>
			return -USB_ERR_FUNC;
   1330c:	f06f 0012 	mvn.w	r0, #18
   13310:	e777      	b.n	13202 <_usb_d_dev_ep_trans+0x82>
   13312:	bf00      	nop
   13314:	2000209c 	.word	0x2000209c
   13318:	20031fff 	.word	0x20031fff

0001331c <_usb_d_dev_ep_abort>:

void _usb_d_dev_ep_abort(const uint8_t ep)
{
   1331c:	b243      	sxtb	r3, r0
	uint8_t ep_index = (epn == 0) ? 0 : (dir ? (epn + CONF_USB_D_MAX_EP_N) : epn);
   1331e:	f010 000f 	ands.w	r0, r0, #15
   13322:	d117      	bne.n	13354 <_usb_d_dev_ep_abort+0x38>
{
   13324:	b5f0      	push	{r4, r5, r6, r7, lr}
	uint8_t epn = USB_EP_GET_N(ept->ep);
   13326:	0081      	lsls	r1, r0, #2
   13328:	4d27      	ldr	r5, [pc, #156]	; (133c8 <_usb_d_dev_ep_abort+0xac>)
   1332a:	180a      	adds	r2, r1, r0
   1332c:	eb05 0282 	add.w	r2, r5, r2, lsl #2
{
   13330:	b083      	sub	sp, #12
	uint8_t epn = USB_EP_GET_N(ept->ep);
   13332:	f892 4026 	ldrb.w	r4, [r2, #38]	; 0x26
	const uint8_t intflags[2] = {USB_D_BANK0_INT_FLAGS, USB_D_BANK1_INT_FLAGS};
   13336:	2625      	movs	r6, #37	; 0x25
   13338:	f88d 6004 	strb.w	r6, [sp, #4]
	if (!(_usb_d_dev_ep_is_used(ept) && _usb_d_dev_ep_is_busy(ept))) {
   1333c:	2cff      	cmp	r4, #255	; 0xff
	const uint8_t intflags[2] = {USB_D_BANK0_INT_FLAGS, USB_D_BANK1_INT_FLAGS};
   1333e:	f04f 064a 	mov.w	r6, #74	; 0x4a
   13342:	f88d 6005 	strb.w	r6, [sp, #5]
	if (!(_usb_d_dev_ep_is_used(ept) && _usb_d_dev_ep_is_busy(ept))) {
   13346:	d003      	beq.n	13350 <_usb_d_dev_ep_abort+0x34>
   13348:	f892 2027 	ldrb.w	r2, [r2, #39]	; 0x27
   1334c:	0652      	lsls	r2, r2, #25
   1334e:	d408      	bmi.n	13362 <_usb_d_dev_ep_abort+0x46>
	struct _usb_d_dev_ep *ept = _usb_d_dev_ept(epn, dir);
	if (epn > CONF_USB_D_MAX_EP_N) {
		return;
	}
	_usb_d_dev_trans_stop(ept, dir, USB_TRANS_ABORT);
}
   13350:	b003      	add	sp, #12
   13352:	bdf0      	pop	{r4, r5, r6, r7, pc}
	uint8_t ep_index = (epn == 0) ? 0 : (dir ? (epn + CONF_USB_D_MAX_EP_N) : epn);
   13354:	2b00      	cmp	r3, #0
   13356:	bfb4      	ite	lt
   13358:	1c82      	addlt	r2, r0, #2
   1335a:	4602      	movge	r2, r0
	if (epn > CONF_USB_D_MAX_EP_N) {
   1335c:	2802      	cmp	r0, #2
   1335e:	d931      	bls.n	133c4 <_usb_d_dev_ep_abort+0xa8>
   13360:	4770      	bx	lr
	uint8_t epn = USB_EP_GET_N(ept->ep);
   13362:	f004 020f 	and.w	r2, r4, #15
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSCLR.reg = mask;
   13366:	f102 0608 	add.w	r6, r2, #8
   1336a:	0177      	lsls	r7, r6, #5
	if (dir) {
   1336c:	2b00      	cmp	r3, #0
   1336e:	f107 4782 	add.w	r7, r7, #1090519040	; 0x41000000
   13372:	bfb5      	itete	lt
   13374:	f04f 0e80 	movlt.w	lr, #128	; 0x80
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSSET.reg = mask;
   13378:	f04f 0e40 	movge.w	lr, #64	; 0x40
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSCLR.reg = mask;
   1337c:	f887 e004 	strblt.w	lr, [r7, #4]
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSSET.reg = mask;
   13380:	f887 e005 	strbge.w	lr, [r7, #5]
	_usbd_ep_int_ack(epn, intflags[dir]);
   13384:	af02      	add	r7, sp, #8
   13386:	eb07 73d3 	add.w	r3, r7, r3, lsr #31
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg = mask;
   1338a:	0176      	lsls	r6, r6, #5
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENCLR.reg = mask;
   1338c:	0152      	lsls	r2, r2, #5
	ept->flags.bits.is_busy = 0;
   1338e:	4401      	add	r1, r0
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg = mask;
   13390:	f106 4682 	add.w	r6, r6, #1090519040	; 0x41000000
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENCLR.reg = mask;
   13394:	f102 4282 	add.w	r2, r2, #1090519040	; 0x41000000
   13398:	eb05 0181 	add.w	r1, r5, r1, lsl #2
	_usbd_ep_int_ack(epn, intflags[dir]);
   1339c:	f813 0c04 	ldrb.w	r0, [r3, #-4]
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg = mask;
   133a0:	71f0      	strb	r0, [r6, #7]
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENCLR.reg = mask;
   133a2:	f882 0108 	strb.w	r0, [r2, #264]	; 0x108
	ept->flags.bits.is_busy = 0;
   133a6:	f891 6027 	ldrb.w	r6, [r1, #39]	; 0x27
	dev_inst.ep_callbacks.done(ept->ep, code, ept->trans_count);
   133aa:	692d      	ldr	r5, [r5, #16]
   133ac:	69ca      	ldr	r2, [r1, #28]
	ept->flags.bits.is_busy = 0;
   133ae:	f36f 1686 	bfc	r6, #6, #1
   133b2:	f881 6027 	strb.w	r6, [r1, #39]	; 0x27
	dev_inst.ep_callbacks.done(ept->ep, code, ept->trans_count);
   133b6:	4620      	mov	r0, r4
   133b8:	2102      	movs	r1, #2
   133ba:	462b      	mov	r3, r5
}
   133bc:	b003      	add	sp, #12
   133be:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
	dev_inst.ep_callbacks.done(ept->ep, code, ept->trans_count);
   133c2:	4718      	bx	r3
	return &dev_inst.ep[ep_index];
   133c4:	4610      	mov	r0, r2
   133c6:	e7ad      	b.n	13324 <_usb_d_dev_ep_abort+0x8>
   133c8:	2000209c 	.word	0x2000209c

000133cc <_usb_d_dev_register_callback>:
	return USB_OK;
}

void _usb_d_dev_register_callback(const enum usb_d_cb_type type, const FUNC_PTR func)
{
	FUNC_PTR f = (func == NULL) ? (FUNC_PTR)_dummy_func_no_return : (FUNC_PTR)func;
   133cc:	4b06      	ldr	r3, [pc, #24]	; (133e8 <_usb_d_dev_register_callback+0x1c>)
   133ce:	2900      	cmp	r1, #0
   133d0:	bf08      	it	eq
   133d2:	4619      	moveq	r1, r3
	if (type == USB_D_CB_EVENT) {
   133d4:	2801      	cmp	r0, #1
   133d6:	d003      	beq.n	133e0 <_usb_d_dev_register_callback+0x14>
		dev_inst.callbacks.event = (_usb_d_dev_event_cb_t)f;
	} else if (type == USB_D_CB_SOF) {
   133d8:	b908      	cbnz	r0, 133de <_usb_d_dev_register_callback+0x12>
		dev_inst.callbacks.sof = (_usb_d_dev_sof_cb_t)f;
   133da:	4b04      	ldr	r3, [pc, #16]	; (133ec <_usb_d_dev_register_callback+0x20>)
   133dc:	6019      	str	r1, [r3, #0]
   133de:	4770      	bx	lr
		dev_inst.callbacks.event = (_usb_d_dev_event_cb_t)f;
   133e0:	4b02      	ldr	r3, [pc, #8]	; (133ec <_usb_d_dev_register_callback+0x20>)
   133e2:	6059      	str	r1, [r3, #4]
   133e4:	4770      	bx	lr
   133e6:	bf00      	nop
   133e8:	00011fcd 	.word	0x00011fcd
   133ec:	2000209c 	.word	0x2000209c

000133f0 <_usb_d_dev_register_ep_callback>:
	}
}

void _usb_d_dev_register_ep_callback(const enum usb_d_dev_ep_cb_type type, const FUNC_PTR func)
{
	FUNC_PTR f = (func == NULL) ? (FUNC_PTR)_dummy_func_no_return : (FUNC_PTR)func;
   133f0:	4b08      	ldr	r3, [pc, #32]	; (13414 <_usb_d_dev_register_ep_callback+0x24>)
   133f2:	2900      	cmp	r1, #0
   133f4:	bf08      	it	eq
   133f6:	4619      	moveq	r1, r3
	if (type == USB_D_DEV_EP_CB_SETUP) {
   133f8:	b130      	cbz	r0, 13408 <_usb_d_dev_register_ep_callback+0x18>
		dev_inst.ep_callbacks.setup = (_usb_d_dev_ep_cb_setup_t)f;
	} else if (type == USB_D_DEV_EP_CB_MORE) {
   133fa:	2801      	cmp	r0, #1
   133fc:	d007      	beq.n	1340e <_usb_d_dev_register_ep_callback+0x1e>
		dev_inst.ep_callbacks.more = (_usb_d_dev_ep_cb_more_t)f;
	} else if (type == USB_D_DEV_EP_CB_DONE) {
   133fe:	2802      	cmp	r0, #2
		dev_inst.ep_callbacks.done = (_usb_d_dev_ep_cb_done_t)f;
   13400:	bf04      	itt	eq
   13402:	4b05      	ldreq	r3, [pc, #20]	; (13418 <_usb_d_dev_register_ep_callback+0x28>)
   13404:	6119      	streq	r1, [r3, #16]
   13406:	4770      	bx	lr
		dev_inst.ep_callbacks.setup = (_usb_d_dev_ep_cb_setup_t)f;
   13408:	4b03      	ldr	r3, [pc, #12]	; (13418 <_usb_d_dev_register_ep_callback+0x28>)
   1340a:	6099      	str	r1, [r3, #8]
   1340c:	4770      	bx	lr
		dev_inst.ep_callbacks.more = (_usb_d_dev_ep_cb_more_t)f;
   1340e:	4b02      	ldr	r3, [pc, #8]	; (13418 <_usb_d_dev_register_ep_callback+0x28>)
   13410:	60d9      	str	r1, [r3, #12]
   13412:	4770      	bx	lr
   13414:	00011fcd 	.word	0x00011fcd
   13418:	2000209c 	.word	0x2000209c

0001341c <USB_0_Handler>:
   1341c:	f7fe bf8e 	b.w	1233c <_usb_d_dev_handler>

00013420 <USB_1_Handler>:
   13420:	f7fe bf8c 	b.w	1233c <_usb_d_dev_handler>

00013424 <USB_2_Handler>:
   13424:	f7fe bf8a 	b.w	1233c <_usb_d_dev_handler>

00013428 <USB_3_Handler>:
 * \brief USB interrupt handler
 */
void USB_3_Handler(void)
{

	_usb_d_dev_handler();
   13428:	f7fe bf88 	b.w	1233c <_usb_d_dev_handler>

0001342c <atomic_enter_critical>:
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
   1342c:	f3ef 8310 	mrs	r3, PRIMASK
/**
 * \brief Disable interrupts, enter critical section
 */
void atomic_enter_critical(hal_atomic_t volatile *atomic)
{
	*atomic = __get_PRIMASK();
   13430:	6003      	str	r3, [r0, #0]
  __ASM volatile ("cpsid i" : : : "memory");
   13432:	b672      	cpsid	i
  __ASM volatile ("dmb 0xF":::"memory");
   13434:	f3bf 8f5f 	dmb	sy
   13438:	4770      	bx	lr
   1343a:	bf00      	nop

0001343c <atomic_leave_critical>:
   1343c:	f3bf 8f5f 	dmb	sy
 * \brief Exit atomic section
 */
void atomic_leave_critical(hal_atomic_t volatile *atomic)
{
	__DMB();
	__set_PRIMASK(*atomic);
   13440:	6803      	ldr	r3, [r0, #0]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
   13442:	f383 8810 	msr	PRIMASK, r3
   13446:	4770      	bx	lr

00013448 <_ZN9ClearCore15BlinkCodeDriver6UpdateEv>:
#include "BlinkCodeDriver.h"

namespace ClearCore {

void BlinkCodeDriver::Update() {
    switch (m_blinkState) {
   13448:	7943      	ldrb	r3, [r0, #5]
void BlinkCodeDriver::Update() {
   1344a:	b430      	push	{r4, r5}
    switch (m_blinkState) {
   1344c:	2b08      	cmp	r3, #8
   1344e:	d810      	bhi.n	13472 <_ZN9ClearCore15BlinkCodeDriver6UpdateEv+0x2a>
   13450:	e8df f003 	tbb	[pc, r3]
   13454:	604d3b25 	.word	0x604d3b25
   13458:	05a18a74 	.word	0x05a18a74
   1345c:	11          	.byte	0x11
   1345d:	00          	.byte	0x00
            m_ledOn = true;
            m_blinkState = CODE_OUTPUT;
            break;

        case CODE_OUTPUT:
            if (--m_timer) {
   1345e:	8903      	ldrh	r3, [r0, #8]
   13460:	3b01      	subs	r3, #1
   13462:	b29b      	uxth	r3, r3
   13464:	8103      	strh	r3, [r0, #8]
   13466:	b923      	cbnz	r3, 13472 <_ZN9ClearCore15BlinkCodeDriver6UpdateEv+0x2a>
                // Code value is still active
                break;
            }
            m_timer = m_blinkTicks;
   13468:	8a42      	ldrh	r2, [r0, #18]
            m_ledOn = false;
   1346a:	7383      	strb	r3, [r0, #14]
            m_blinkState = CODE_DELAY;
   1346c:	2308      	movs	r3, #8
            m_timer = m_blinkTicks;
   1346e:	8102      	strh	r2, [r0, #8]
            m_blinkState = CODE_DELAY;
   13470:	7143      	strb	r3, [r0, #5]
                m_ledOn = false;
                m_blinkState = PRE_GROUP_DELAY;
            }
            break;
    }
}
   13472:	bc30      	pop	{r4, r5}
   13474:	4770      	bx	lr
            if (--m_timer) {
   13476:	8903      	ldrh	r3, [r0, #8]
   13478:	3b01      	subs	r3, #1
   1347a:	b29b      	uxth	r3, r3
   1347c:	8103      	strh	r3, [r0, #8]
   1347e:	2b00      	cmp	r3, #0
   13480:	d1f7      	bne.n	13472 <_ZN9ClearCore15BlinkCodeDriver6UpdateEv+0x2a>
            if (--m_blinkCnt) {
   13482:	8981      	ldrh	r1, [r0, #12]
   13484:	3901      	subs	r1, #1
   13486:	b289      	uxth	r1, r1
   13488:	8181      	strh	r1, [r0, #12]
   1348a:	2900      	cmp	r1, #0
   1348c:	f000 80b3 	beq.w	135f6 <_ZN9ClearCore15BlinkCodeDriver6UpdateEv+0x1ae>
                m_timer = m_blinkTicks;
   13490:	8a43      	ldrh	r3, [r0, #18]
   13492:	8103      	strh	r3, [r0, #8]
                m_ledOn = true;
   13494:	2201      	movs	r2, #1
                m_blinkState = CODE_OUTPUT;
   13496:	2307      	movs	r3, #7
                m_ledOn = true;
   13498:	7382      	strb	r2, [r0, #14]
                m_blinkState = CODE_OUTPUT;
   1349a:	7143      	strb	r3, [r0, #5]
                break;
   1349c:	e7e9      	b.n	13472 <_ZN9ClearCore15BlinkCodeDriver6UpdateEv+0x2a>
    }
    if (group >= BLINK_GROUP_MAX) {
        group = 0;
        m_patternWrap = true;
    }
    if (!(m_codes[group] >> code)) {
   1349e:	7801      	ldrb	r1, [r0, #0]
   134a0:	2900      	cmp	r1, #0
   134a2:	f040 8089 	bne.w	135b8 <_ZN9ClearCore15BlinkCodeDriver6UpdateEv+0x170>
        // Search for the next group with an active code
        code = 0;
        uint8_t iGroup;
        // Search from the next index up to the maximum group index
        for (iGroup = group + 1; iGroup < BLINK_GROUP_MAX; iGroup++) {
            if (m_codes[iGroup]) {
   134a6:	7841      	ldrb	r1, [r0, #1]
   134a8:	2900      	cmp	r1, #0
   134aa:	f040 80cb 	bne.w	13644 <_ZN9ClearCore15BlinkCodeDriver6UpdateEv+0x1fc>
   134ae:	7883      	ldrb	r3, [r0, #2]
   134b0:	2b00      	cmp	r3, #0
   134b2:	f040 811a 	bne.w	136ea <_ZN9ClearCore15BlinkCodeDriver6UpdateEv+0x2a2>
   134b6:	78c3      	ldrb	r3, [r0, #3]
   134b8:	2b00      	cmp	r3, #0
   134ba:	f040 8118 	bne.w	136ee <_ZN9ClearCore15BlinkCodeDriver6UpdateEv+0x2a6>
   134be:	7903      	ldrb	r3, [r0, #4]
        for (iGroup = group + 1; iGroup < BLINK_GROUP_MAX; iGroup++) {
   134c0:	2504      	movs	r5, #4
            if (m_codes[iGroup]) {
   134c2:	2b00      	cmp	r3, #0
   134c4:	d0d5      	beq.n	13472 <_ZN9ClearCore15BlinkCodeDriver6UpdateEv+0x2a>
   134c6:	5d41      	ldrb	r1, [r0, r5]
   134c8:	e077      	b.n	135ba <_ZN9ClearCore15BlinkCodeDriver6UpdateEv+0x172>
            if (--m_timer) {
   134ca:	8903      	ldrh	r3, [r0, #8]
   134cc:	3b01      	subs	r3, #1
   134ce:	b29b      	uxth	r3, r3
   134d0:	8103      	strh	r3, [r0, #8]
   134d2:	2b00      	cmp	r3, #0
   134d4:	d1cd      	bne.n	13472 <_ZN9ClearCore15BlinkCodeDriver6UpdateEv+0x2a>
            m_strobeCnt = m_startTicks / m_strobeOnOffTicks;
   134d6:	8a02      	ldrh	r2, [r0, #16]
            m_patternWrap = false;
   134d8:	73c3      	strb	r3, [r0, #15]
            m_ledOn = true;
   134da:	2401      	movs	r4, #1
            m_blinkState = START_OUTPUT;
   134dc:	2102      	movs	r1, #2
            m_strobeCnt = m_startTicks / m_strobeOnOffTicks;
   134de:	8ac3      	ldrh	r3, [r0, #22]
            m_timer = m_strobeOnOffTicks;
   134e0:	8102      	strh	r2, [r0, #8]
            m_strobeCnt = m_startTicks / m_strobeOnOffTicks;
   134e2:	fbb3 f3f2 	udiv	r3, r3, r2
            m_ledOn = true;
   134e6:	7384      	strb	r4, [r0, #14]
            m_blinkState = START_OUTPUT;
   134e8:	7141      	strb	r1, [r0, #5]
            m_strobeCnt = m_startTicks / m_strobeOnOffTicks;
   134ea:	8143      	strh	r3, [r0, #10]
            break;
   134ec:	e7c1      	b.n	13472 <_ZN9ClearCore15BlinkCodeDriver6UpdateEv+0x2a>
            if (--m_timer) {
   134ee:	8903      	ldrh	r3, [r0, #8]
   134f0:	3b01      	subs	r3, #1
   134f2:	b29b      	uxth	r3, r3
   134f4:	8103      	strh	r3, [r0, #8]
   134f6:	2b00      	cmp	r3, #0
   134f8:	d1bb      	bne.n	13472 <_ZN9ClearCore15BlinkCodeDriver6UpdateEv+0x2a>
            if (--m_strobeCnt) {
   134fa:	8943      	ldrh	r3, [r0, #10]
            m_ledOn = !m_ledOn;
   134fc:	7b82      	ldrb	r2, [r0, #14]
            if (--m_strobeCnt) {
   134fe:	3b01      	subs	r3, #1
   13500:	b29b      	uxth	r3, r3
            m_ledOn = !m_ledOn;
   13502:	f082 0201 	eor.w	r2, r2, #1
            if (--m_strobeCnt) {
   13506:	8143      	strh	r3, [r0, #10]
            m_ledOn = !m_ledOn;
   13508:	7382      	strb	r2, [r0, #14]
            if (--m_strobeCnt) {
   1350a:	2b00      	cmp	r3, #0
   1350c:	d06d      	beq.n	135ea <_ZN9ClearCore15BlinkCodeDriver6UpdateEv+0x1a2>
                m_timer = m_strobeOnOffTicks;
   1350e:	8a03      	ldrh	r3, [r0, #16]
   13510:	8103      	strh	r3, [r0, #8]
                break;
   13512:	e7ae      	b.n	13472 <_ZN9ClearCore15BlinkCodeDriver6UpdateEv+0x2a>
            if (--m_timer) {
   13514:	8903      	ldrh	r3, [r0, #8]
   13516:	3b01      	subs	r3, #1
   13518:	b29b      	uxth	r3, r3
   1351a:	8103      	strh	r3, [r0, #8]
   1351c:	2b00      	cmp	r3, #0
   1351e:	d1a8      	bne.n	13472 <_ZN9ClearCore15BlinkCodeDriver6UpdateEv+0x2a>
            m_blinkCnt = m_currentGroup + 1;
   13520:	79c2      	ldrb	r2, [r0, #7]
            m_strobeCnt = m_blinkTicks / m_strobeOnOffTicks;
   13522:	8a01      	ldrh	r1, [r0, #16]
   13524:	8a43      	ldrh	r3, [r0, #18]
            m_timer = m_strobeOnOffTicks;
   13526:	8101      	strh	r1, [r0, #8]
            m_blinkCnt = m_currentGroup + 1;
   13528:	3201      	adds	r2, #1
            m_ledOn = true;
   1352a:	2501      	movs	r5, #1
            m_blinkState = GROUP_OUTPUT;
   1352c:	2404      	movs	r4, #4
            m_strobeCnt = m_blinkTicks / m_strobeOnOffTicks;
   1352e:	fbb3 f3f1 	udiv	r3, r3, r1
            m_blinkCnt = m_currentGroup + 1;
   13532:	8182      	strh	r2, [r0, #12]
            m_ledOn = true;
   13534:	7385      	strb	r5, [r0, #14]
            m_blinkState = GROUP_OUTPUT;
   13536:	7144      	strb	r4, [r0, #5]
            m_strobeCnt = m_blinkTicks / m_strobeOnOffTicks;
   13538:	8143      	strh	r3, [r0, #10]
            break;
   1353a:	e79a      	b.n	13472 <_ZN9ClearCore15BlinkCodeDriver6UpdateEv+0x2a>
            if (--m_timer) {
   1353c:	8903      	ldrh	r3, [r0, #8]
   1353e:	3b01      	subs	r3, #1
   13540:	b29b      	uxth	r3, r3
   13542:	8103      	strh	r3, [r0, #8]
   13544:	2b00      	cmp	r3, #0
   13546:	d194      	bne.n	13472 <_ZN9ClearCore15BlinkCodeDriver6UpdateEv+0x2a>
            if (--m_strobeCnt) {
   13548:	8943      	ldrh	r3, [r0, #10]
            m_ledOn = !m_ledOn;
   1354a:	7b82      	ldrb	r2, [r0, #14]
            if (--m_strobeCnt) {
   1354c:	3b01      	subs	r3, #1
   1354e:	b29b      	uxth	r3, r3
            m_ledOn = !m_ledOn;
   13550:	f082 0201 	eor.w	r2, r2, #1
            if (--m_strobeCnt) {
   13554:	8143      	strh	r3, [r0, #10]
            m_ledOn = !m_ledOn;
   13556:	7382      	strb	r2, [r0, #14]
            if (--m_strobeCnt) {
   13558:	2b00      	cmp	r3, #0
   1355a:	d1d8      	bne.n	1350e <_ZN9ClearCore15BlinkCodeDriver6UpdateEv+0xc6>
            m_timer = m_blinkTicks;
   1355c:	8a42      	ldrh	r2, [r0, #18]
            m_ledOn = false;
   1355e:	7383      	strb	r3, [r0, #14]
            m_blinkState = GROUP_DELAY;
   13560:	2305      	movs	r3, #5
            m_timer = m_blinkTicks;
   13562:	8102      	strh	r2, [r0, #8]
            m_blinkState = GROUP_DELAY;
   13564:	7143      	strb	r3, [r0, #5]
            break;
   13566:	e784      	b.n	13472 <_ZN9ClearCore15BlinkCodeDriver6UpdateEv+0x2a>
            if (--m_timer) {
   13568:	8903      	ldrh	r3, [r0, #8]
   1356a:	3b01      	subs	r3, #1
   1356c:	b29b      	uxth	r3, r3
   1356e:	8103      	strh	r3, [r0, #8]
   13570:	2b00      	cmp	r3, #0
   13572:	f47f af7e 	bne.w	13472 <_ZN9ClearCore15BlinkCodeDriver6UpdateEv+0x2a>
            if (--m_blinkCnt) {
   13576:	8983      	ldrh	r3, [r0, #12]
   13578:	3b01      	subs	r3, #1
   1357a:	b29b      	uxth	r3, r3
   1357c:	8183      	strh	r3, [r0, #12]
   1357e:	b373      	cbz	r3, 135de <_ZN9ClearCore15BlinkCodeDriver6UpdateEv+0x196>
                m_strobeCnt = m_blinkTicks / m_strobeOnOffTicks;
   13580:	8a02      	ldrh	r2, [r0, #16]
   13582:	8a43      	ldrh	r3, [r0, #18]
                m_timer = m_strobeOnOffTicks;
   13584:	8102      	strh	r2, [r0, #8]
                m_ledOn = true;
   13586:	2401      	movs	r4, #1
                m_blinkState = GROUP_OUTPUT;
   13588:	2104      	movs	r1, #4
                m_strobeCnt = m_blinkTicks / m_strobeOnOffTicks;
   1358a:	fbb3 f3f2 	udiv	r3, r3, r2
                m_ledOn = true;
   1358e:	7384      	strb	r4, [r0, #14]
                m_blinkState = GROUP_OUTPUT;
   13590:	7141      	strb	r1, [r0, #5]
                m_strobeCnt = m_blinkTicks / m_strobeOnOffTicks;
   13592:	8143      	strh	r3, [r0, #10]
                break;
   13594:	e76d      	b.n	13472 <_ZN9ClearCore15BlinkCodeDriver6UpdateEv+0x2a>
            if (--m_timer) {
   13596:	8903      	ldrh	r3, [r0, #8]
   13598:	3b01      	subs	r3, #1
   1359a:	b29b      	uxth	r3, r3
   1359c:	8103      	strh	r3, [r0, #8]
   1359e:	2b00      	cmp	r3, #0
   135a0:	f47f af67 	bne.w	13472 <_ZN9ClearCore15BlinkCodeDriver6UpdateEv+0x2a>
            m_blinkCnt = m_currentCode + 1;
   135a4:	7983      	ldrb	r3, [r0, #6]
            m_timer = m_blinkTicks;
   135a6:	8a42      	ldrh	r2, [r0, #18]
   135a8:	8102      	strh	r2, [r0, #8]
            m_blinkCnt = m_currentCode + 1;
   135aa:	3301      	adds	r3, #1
            m_ledOn = true;
   135ac:	2101      	movs	r1, #1
            m_blinkState = CODE_OUTPUT;
   135ae:	2207      	movs	r2, #7
            m_blinkCnt = m_currentCode + 1;
   135b0:	8183      	strh	r3, [r0, #12]
            m_ledOn = true;
   135b2:	7381      	strb	r1, [r0, #14]
            m_blinkState = CODE_OUTPUT;
   135b4:	7142      	strb	r2, [r0, #5]
            break;
   135b6:	e75c      	b.n	13472 <_ZN9ClearCore15BlinkCodeDriver6UpdateEv+0x2a>
    if (!(m_codes[group] >> code)) {
   135b8:	2500      	movs	r5, #0
        // Set the index of the next active group found
        group = iGroup;
    }
    // There is an active code within group, find out the code value
    // Set the first group/code pair to output
    for (; !(m_codes[group] & (1 << code)); code++) {
   135ba:	f011 0301 	ands.w	r3, r1, #1
   135be:	d149      	bne.n	13654 <_ZN9ClearCore15BlinkCodeDriver6UpdateEv+0x20c>
   135c0:	3301      	adds	r3, #1
   135c2:	b2db      	uxtb	r3, r3
   135c4:	fa41 f203 	asr.w	r2, r1, r3
   135c8:	07d4      	lsls	r4, r2, #31
   135ca:	d5f9      	bpl.n	135c0 <_ZN9ClearCore15BlinkCodeDriver6UpdateEv+0x178>
            m_timer = m_prestartTicks;
   135cc:	8a84      	ldrh	r4, [r0, #20]
        continue;
    }
    m_currentGroup = group;
   135ce:	71c5      	strb	r5, [r0, #7]
            m_ledOn = false;
   135d0:	2100      	movs	r1, #0
            m_blinkState = PRE_START_DELAY;
   135d2:	2201      	movs	r2, #1
    m_currentCode = code;
   135d4:	7183      	strb	r3, [r0, #6]
            m_timer = m_prestartTicks;
   135d6:	8104      	strh	r4, [r0, #8]
            m_ledOn = false;
   135d8:	7381      	strb	r1, [r0, #14]
            m_blinkState = PRE_START_DELAY;
   135da:	7142      	strb	r2, [r0, #5]
            break;
   135dc:	e749      	b.n	13472 <_ZN9ClearCore15BlinkCodeDriver6UpdateEv+0x2a>
            m_timer = m_precodeTicks;
   135de:	8b42      	ldrh	r2, [r0, #26]
            m_ledOn = false;
   135e0:	7383      	strb	r3, [r0, #14]
            m_blinkState = PRE_CODE_DELAY;
   135e2:	2306      	movs	r3, #6
            m_timer = m_precodeTicks;
   135e4:	8102      	strh	r2, [r0, #8]
            m_blinkState = PRE_CODE_DELAY;
   135e6:	7143      	strb	r3, [r0, #5]
            break;
   135e8:	e743      	b.n	13472 <_ZN9ClearCore15BlinkCodeDriver6UpdateEv+0x2a>
            m_timer = m_pregroupTicks;
   135ea:	8b02      	ldrh	r2, [r0, #24]
            m_ledOn = false;
   135ec:	7383      	strb	r3, [r0, #14]
            m_blinkState = PRE_GROUP_DELAY;
   135ee:	2303      	movs	r3, #3
            m_timer = m_pregroupTicks;
   135f0:	8102      	strh	r2, [r0, #8]
            m_blinkState = PRE_GROUP_DELAY;
   135f2:	7143      	strb	r3, [r0, #5]
            break;
   135f4:	e73d      	b.n	13472 <_ZN9ClearCore15BlinkCodeDriver6UpdateEv+0x2a>
            if (!NextCode(m_currentGroup, m_currentCode + 1)) {
   135f6:	7983      	ldrb	r3, [r0, #6]
   135f8:	79c2      	ldrb	r2, [r0, #7]
   135fa:	3301      	adds	r3, #1
   135fc:	b2db      	uxtb	r3, r3
    if (code > 7) {
   135fe:	2b07      	cmp	r3, #7
        group++;
   13600:	bf85      	ittet	hi
   13602:	3201      	addhi	r2, #1
   13604:	b2d2      	uxtbhi	r2, r2
   13606:	4619      	movls	r1, r3
        code = 0;
   13608:	460b      	movhi	r3, r1
    if (group >= BLINK_GROUP_MAX) {
   1360a:	2a04      	cmp	r2, #4
   1360c:	4615      	mov	r5, r2
   1360e:	dd1b      	ble.n	13648 <_ZN9ClearCore15BlinkCodeDriver6UpdateEv+0x200>
    if (!(m_codes[group] >> code)) {
   13610:	7804      	ldrb	r4, [r0, #0]
        m_patternWrap = true;
   13612:	2201      	movs	r2, #1
    if (!(m_codes[group] >> code)) {
   13614:	fa54 f501 	asrs.w	r5, r4, r1
        m_patternWrap = true;
   13618:	73c2      	strb	r2, [r0, #15]
    if (!(m_codes[group] >> code)) {
   1361a:	d01d      	beq.n	13658 <_ZN9ClearCore15BlinkCodeDriver6UpdateEv+0x210>
        group = 0;
   1361c:	2200      	movs	r2, #0
    for (; !(m_codes[group] & (1 << code)); code++) {
   1361e:	07e9      	lsls	r1, r5, #31
   13620:	d452      	bmi.n	136c8 <_ZN9ClearCore15BlinkCodeDriver6UpdateEv+0x280>
   13622:	2501      	movs	r5, #1
   13624:	3301      	adds	r3, #1
   13626:	b2db      	uxtb	r3, r3
   13628:	fa44 f103 	asr.w	r1, r4, r3
   1362c:	07c9      	lsls	r1, r1, #31
   1362e:	d5f9      	bpl.n	13624 <_ZN9ClearCore15BlinkCodeDriver6UpdateEv+0x1dc>
    m_currentGroup = group;
   13630:	71c2      	strb	r2, [r0, #7]
    m_currentCode = code;
   13632:	7183      	strb	r3, [r0, #6]
            else if (m_patternWrap) {
   13634:	2d00      	cmp	r5, #0
   13636:	d149      	bne.n	136cc <_ZN9ClearCore15BlinkCodeDriver6UpdateEv+0x284>
                m_timer = m_pregroupTicks;
   13638:	8b02      	ldrh	r2, [r0, #24]
                m_ledOn = false;
   1363a:	7385      	strb	r5, [r0, #14]
                m_blinkState = PRE_GROUP_DELAY;
   1363c:	2303      	movs	r3, #3
                m_timer = m_pregroupTicks;
   1363e:	8102      	strh	r2, [r0, #8]
                m_blinkState = PRE_GROUP_DELAY;
   13640:	7143      	strb	r3, [r0, #5]
}
   13642:	e716      	b.n	13472 <_ZN9ClearCore15BlinkCodeDriver6UpdateEv+0x2a>
            if (m_codes[iGroup]) {
   13644:	2501      	movs	r5, #1
   13646:	e7b8      	b.n	135ba <_ZN9ClearCore15BlinkCodeDriver6UpdateEv+0x172>
    if (!(m_codes[group] >> code)) {
   13648:	5c84      	ldrb	r4, [r0, r2]
   1364a:	fa54 f101 	asrs.w	r1, r4, r1
   1364e:	d029      	beq.n	136a4 <_ZN9ClearCore15BlinkCodeDriver6UpdateEv+0x25c>
   13650:	7bc5      	ldrb	r5, [r0, #15]
   13652:	e7eb      	b.n	1362c <_ZN9ClearCore15BlinkCodeDriver6UpdateEv+0x1e4>
    for (; !(m_codes[group] & (1 << code)); code++) {
   13654:	2300      	movs	r3, #0
   13656:	e7b9      	b.n	135cc <_ZN9ClearCore15BlinkCodeDriver6UpdateEv+0x184>
            if (m_codes[iGroup]) {
   13658:	7843      	ldrb	r3, [r0, #1]
   1365a:	bb83      	cbnz	r3, 136be <_ZN9ClearCore15BlinkCodeDriver6UpdateEv+0x276>
        for (iGroup = group + 1; iGroup < BLINK_GROUP_MAX; iGroup++) {
   1365c:	2102      	movs	r1, #2
   1365e:	460b      	mov	r3, r1
            if (m_codes[iGroup]) {
   13660:	5cc3      	ldrb	r3, [r0, r3]
   13662:	2b00      	cmp	r3, #0
   13664:	d145      	bne.n	136f2 <_ZN9ClearCore15BlinkCodeDriver6UpdateEv+0x2aa>
        for (iGroup = group + 1; iGroup < BLINK_GROUP_MAX; iGroup++) {
   13666:	1c4a      	adds	r2, r1, #1
   13668:	b2d2      	uxtb	r2, r2
   1366a:	2a05      	cmp	r2, #5
   1366c:	d00d      	beq.n	1368a <_ZN9ClearCore15BlinkCodeDriver6UpdateEv+0x242>
            if (m_codes[iGroup]) {
   1366e:	5c83      	ldrb	r3, [r0, r2]
   13670:	bb2b      	cbnz	r3, 136be <_ZN9ClearCore15BlinkCodeDriver6UpdateEv+0x276>
        for (iGroup = group + 1; iGroup < BLINK_GROUP_MAX; iGroup++) {
   13672:	1c8a      	adds	r2, r1, #2
   13674:	b2d2      	uxtb	r2, r2
   13676:	2a05      	cmp	r2, #5
   13678:	d007      	beq.n	1368a <_ZN9ClearCore15BlinkCodeDriver6UpdateEv+0x242>
            if (m_codes[iGroup]) {
   1367a:	5c83      	ldrb	r3, [r0, r2]
   1367c:	b9fb      	cbnz	r3, 136be <_ZN9ClearCore15BlinkCodeDriver6UpdateEv+0x276>
        for (iGroup = group + 1; iGroup < BLINK_GROUP_MAX; iGroup++) {
   1367e:	1ccb      	adds	r3, r1, #3
   13680:	b2db      	uxtb	r3, r3
   13682:	2b05      	cmp	r3, #5
   13684:	d001      	beq.n	1368a <_ZN9ClearCore15BlinkCodeDriver6UpdateEv+0x242>
            if (m_codes[iGroup]) {
   13686:	5cc3      	ldrb	r3, [r0, r3]
   13688:	b9c3      	cbnz	r3, 136bc <_ZN9ClearCore15BlinkCodeDriver6UpdateEv+0x274>
                if (m_codes[iGroup]) {
   1368a:	7802      	ldrb	r2, [r0, #0]
   1368c:	b112      	cbz	r2, 13694 <_ZN9ClearCore15BlinkCodeDriver6UpdateEv+0x24c>
   1368e:	e024      	b.n	136da <_ZN9ClearCore15BlinkCodeDriver6UpdateEv+0x292>
   13690:	5c83      	ldrb	r3, [r0, r2]
   13692:	bb23      	cbnz	r3, 136de <_ZN9ClearCore15BlinkCodeDriver6UpdateEv+0x296>
            for (iGroup = 0; iGroup <= group; iGroup++) {
   13694:	3201      	adds	r2, #1
   13696:	b2d2      	uxtb	r2, r2
   13698:	42aa      	cmp	r2, r5
   1369a:	ddf9      	ble.n	13690 <_ZN9ClearCore15BlinkCodeDriver6UpdateEv+0x248>
                m_ledOn = false;
   1369c:	2300      	movs	r3, #0
   1369e:	7383      	strb	r3, [r0, #14]
                m_blinkState = IDLE;
   136a0:	7143      	strb	r3, [r0, #5]
   136a2:	e6e6      	b.n	13472 <_ZN9ClearCore15BlinkCodeDriver6UpdateEv+0x2a>
        for (iGroup = group + 1; iGroup < BLINK_GROUP_MAX; iGroup++) {
   136a4:	3201      	adds	r2, #1
   136a6:	b2d2      	uxtb	r2, r2
   136a8:	2a04      	cmp	r2, #4
   136aa:	d8ee      	bhi.n	1368a <_ZN9ClearCore15BlinkCodeDriver6UpdateEv+0x242>
            if (m_codes[iGroup]) {
   136ac:	5c83      	ldrb	r3, [r0, r2]
   136ae:	b933      	cbnz	r3, 136be <_ZN9ClearCore15BlinkCodeDriver6UpdateEv+0x276>
        for (iGroup = group + 1; iGroup < BLINK_GROUP_MAX; iGroup++) {
   136b0:	1ca9      	adds	r1, r5, #2
   136b2:	b2c9      	uxtb	r1, r1
   136b4:	2905      	cmp	r1, #5
   136b6:	460b      	mov	r3, r1
   136b8:	d1d2      	bne.n	13660 <_ZN9ClearCore15BlinkCodeDriver6UpdateEv+0x218>
   136ba:	e7e6      	b.n	1368a <_ZN9ClearCore15BlinkCodeDriver6UpdateEv+0x242>
            if (m_codes[iGroup]) {
   136bc:	2204      	movs	r2, #4
   136be:	4619      	mov	r1, r3
        for (iGroup = group + 1; iGroup < BLINK_GROUP_MAX; iGroup++) {
   136c0:	461c      	mov	r4, r3
   136c2:	7bc5      	ldrb	r5, [r0, #15]
        code = 0;
   136c4:	2300      	movs	r3, #0
   136c6:	e7b1      	b.n	1362c <_ZN9ClearCore15BlinkCodeDriver6UpdateEv+0x1e4>
    m_currentGroup = group;
   136c8:	71c2      	strb	r2, [r0, #7]
    m_currentCode = code;
   136ca:	7183      	strb	r3, [r0, #6]
                m_timer = m_prestartTicks;
   136cc:	8a83      	ldrh	r3, [r0, #20]
   136ce:	8103      	strh	r3, [r0, #8]
                m_ledOn = false;
   136d0:	2200      	movs	r2, #0
                m_blinkState = PRE_START_DELAY;
   136d2:	2301      	movs	r3, #1
                m_ledOn = false;
   136d4:	7382      	strb	r2, [r0, #14]
                m_blinkState = PRE_START_DELAY;
   136d6:	7143      	strb	r3, [r0, #5]
   136d8:	e6cb      	b.n	13472 <_ZN9ClearCore15BlinkCodeDriver6UpdateEv+0x2a>
                if (m_codes[iGroup]) {
   136da:	4613      	mov	r3, r2
   136dc:	2200      	movs	r2, #0
   136de:	461d      	mov	r5, r3
            m_patternWrap = true;
   136e0:	2301      	movs	r3, #1
   136e2:	73c3      	strb	r3, [r0, #15]
   136e4:	462c      	mov	r4, r5
        code = 0;
   136e6:	2300      	movs	r3, #0
   136e8:	e799      	b.n	1361e <_ZN9ClearCore15BlinkCodeDriver6UpdateEv+0x1d6>
            if (m_codes[iGroup]) {
   136ea:	2502      	movs	r5, #2
   136ec:	e6eb      	b.n	134c6 <_ZN9ClearCore15BlinkCodeDriver6UpdateEv+0x7e>
        for (iGroup = group + 1; iGroup < BLINK_GROUP_MAX; iGroup++) {
   136ee:	2503      	movs	r5, #3
   136f0:	e6e9      	b.n	134c6 <_ZN9ClearCore15BlinkCodeDriver6UpdateEv+0x7e>
            if (m_codes[iGroup]) {
   136f2:	460a      	mov	r2, r1
   136f4:	e7e3      	b.n	136be <_ZN9ClearCore15BlinkCodeDriver6UpdateEv+0x276>
   136f6:	bf00      	nop

000136f8 <lwip_htons>:
 * @return n in network byte order
 */
u16_t
lwip_htons(u16_t n)
{
  return PP_HTONS(n);
   136f8:	ba40      	rev16	r0, r0
}
   136fa:	b280      	uxth	r0, r0
   136fc:	4770      	bx	lr
   136fe:	bf00      	nop

00013700 <lwip_htonl>:
 */
u32_t
lwip_htonl(u32_t n)
{
  return PP_HTONL(n);
}
   13700:	ba00      	rev	r0, r0
   13702:	4770      	bx	lr

00013704 <dns_send>:
 * @param idx the DNS table entry index for which to send a request
 * @return ERR_OK if packet is sent; an err_t indicating the problem otherwise
 */
static err_t
dns_send(u8_t idx)
{
   13704:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   13708:	b087      	sub	sp, #28
  struct dns_table_entry *entry = &dns_table[idx];

  LWIP_DEBUGF(DNS_DEBUG, ("dns_send: dns_servers[%"U16_F"] \"%s\": request\n",
                          (u16_t)(entry->server_idx), entry->name));
  LWIP_ASSERT("dns server out of array", entry->server_idx < DNS_MAX_SERVERS);
  if (ip_addr_isany_val(dns_servers[entry->server_idx])
   1370a:	0103      	lsls	r3, r0, #4
   1370c:	f8df 92a4 	ldr.w	r9, [pc, #676]	; 139b4 <dns_send+0x2b0>
   13710:	9301      	str	r3, [sp, #4]
   13712:	4403      	add	r3, r0
   13714:	011b      	lsls	r3, r3, #4
   13716:	eb09 0403 	add.w	r4, r9, r3
{
   1371a:	9000      	str	r0, [sp, #0]
  if (ip_addr_isany_val(dns_servers[entry->server_idx])
   1371c:	f894 203b 	ldrb.w	r2, [r4, #59]	; 0x3b
   13720:	eb09 0282 	add.w	r2, r9, r2, lsl #2
   13724:	f8d2 5480 	ldr.w	r5, [r2, #1152]	; 0x480
   13728:	2d00      	cmp	r5, #0
   1372a:	f000 8085 	beq.w	13838 <dns_send+0x134>
    entry->state = DNS_STATE_UNUSED;
    return ERR_OK;
  }

  /* if here, we have either a new query or a retry on a previous query to process */
  p = pbuf_alloc(PBUF_TRANSPORT, (u16_t)(SIZEOF_DNS_HDR + strlen(entry->name) + 2 +
   1372e:	eb09 0503 	add.w	r5, r9, r3
   13732:	3540      	adds	r5, #64	; 0x40
   13734:	4628      	mov	r0, r5
   13736:	f015 f843 	bl	287c0 <strlen>
   1373a:	f100 0112 	add.w	r1, r0, #18
   1373e:	b289      	uxth	r1, r1
   13740:	f44f 7220 	mov.w	r2, #640	; 0x280
   13744:	2036      	movs	r0, #54	; 0x36
   13746:	f003 fea5 	bl	17494 <pbuf_alloc>
                                         SIZEOF_DNS_QUERY), PBUF_RAM);
  if (p != NULL) {
   1374a:	4680      	mov	r8, r0
   1374c:	2800      	cmp	r0, #0
   1374e:	f000 812b 	beq.w	139a8 <dns_send+0x2a4>
    const ip_addr_t *dst;
    u16_t dst_port;
    /* fill dns header */
    memset(&hdr, 0, SIZEOF_DNS_HDR);
   13752:	2300      	movs	r3, #0
    hdr.id = lwip_htons(entry->txid);
   13754:	8f20      	ldrh	r0, [r4, #56]	; 0x38
    memset(&hdr, 0, SIZEOF_DNS_HDR);
   13756:	9304      	str	r3, [sp, #16]
   13758:	9303      	str	r3, [sp, #12]
   1375a:	9305      	str	r3, [sp, #20]
    hdr.id = lwip_htons(entry->txid);
   1375c:	f7ff ffcc 	bl	136f8 <lwip_htons>
   13760:	f8ad 000c 	strh.w	r0, [sp, #12]
    hdr.flags1 = DNS_FLAG1_RD;
   13764:	2001      	movs	r0, #1
    hdr.numquestions = PP_HTONS(1);
   13766:	f44f 7380 	mov.w	r3, #256	; 0x100
    hdr.flags1 = DNS_FLAG1_RD;
   1376a:	f88d 000e 	strb.w	r0, [sp, #14]
    pbuf_take(p, &hdr, SIZEOF_DNS_HDR);
   1376e:	a903      	add	r1, sp, #12
   13770:	220c      	movs	r2, #12
   13772:	4640      	mov	r0, r8
    hdr.numquestions = PP_HTONS(1);
   13774:	f8ad 3010 	strh.w	r3, [sp, #16]
    pbuf_take(p, &hdr, SIZEOF_DNS_HDR);
   13778:	f004 f946 	bl	17a08 <pbuf_take>
    hostname = entry->name;
    --hostname;
   1377c:	3d01      	subs	r5, #1

    /* convert hostname into suitable query format. */
    query_idx = SIZEOF_DNS_HDR;
   1377e:	260c      	movs	r6, #12
      hostname_part = hostname;
      for (n = 0; *hostname != '.' && *hostname != 0; ++hostname) {
        ++n;
      }
      copy_len = (u16_t)(hostname - hostname_part);
      if (query_idx + n + 1 > 0xFFFF) {
   13780:	f64f 7bfe 	movw	fp, #65534	; 0xfffe
      for (n = 0; *hostname != '.' && *hostname != 0; ++hostname) {
   13784:	786b      	ldrb	r3, [r5, #1]
   13786:	2b2e      	cmp	r3, #46	; 0x2e
      ++hostname;
   13788:	f105 0701 	add.w	r7, r5, #1
      for (n = 0; *hostname != '.' && *hostname != 0; ++hostname) {
   1378c:	f000 80c4 	beq.w	13918 <dns_send+0x214>
   13790:	2b00      	cmp	r3, #0
   13792:	f000 80c6 	beq.w	13922 <dns_send+0x21e>
   13796:	463d      	mov	r5, r7
   13798:	2400      	movs	r4, #0
   1379a:	e000      	b.n	1379e <dns_send+0x9a>
   1379c:	b12b      	cbz	r3, 137aa <dns_send+0xa6>
   1379e:	f815 3f01 	ldrb.w	r3, [r5, #1]!
        ++n;
   137a2:	3401      	adds	r4, #1
      for (n = 0; *hostname != '.' && *hostname != 0; ++hostname) {
   137a4:	2b2e      	cmp	r3, #46	; 0x2e
        ++n;
   137a6:	b2e4      	uxtb	r4, r4
      for (n = 0; *hostname != '.' && *hostname != 0; ++hostname) {
   137a8:	d1f8      	bne.n	1379c <dns_send+0x98>
   137aa:	eba5 0a07 	sub.w	sl, r5, r7
   137ae:	fa1f fa8a 	uxth.w	sl, sl
   137b2:	4623      	mov	r3, r4
      if (query_idx + n + 1 > 0xFFFF) {
   137b4:	4433      	add	r3, r6
   137b6:	455b      	cmp	r3, fp
   137b8:	f300 80a5 	bgt.w	13906 <dns_send+0x202>
        /* u16_t overflow */
        goto overflow_return;
      }
      pbuf_put_at(p, query_idx, n);
   137bc:	4622      	mov	r2, r4
   137be:	4631      	mov	r1, r6
   137c0:	4640      	mov	r0, r8
   137c2:	f004 fa7f 	bl	17cc4 <pbuf_put_at>
      pbuf_take_at(p, hostname_part, copy_len, (u16_t)(query_idx + 1));
   137c6:	1c73      	adds	r3, r6, #1
   137c8:	4652      	mov	r2, sl
      query_idx = (u16_t)(query_idx + n + 1);
   137ca:	4434      	add	r4, r6
      pbuf_take_at(p, hostname_part, copy_len, (u16_t)(query_idx + 1));
   137cc:	4639      	mov	r1, r7
   137ce:	b29b      	uxth	r3, r3
   137d0:	4640      	mov	r0, r8
   137d2:	f004 f941 	bl	17a58 <pbuf_take_at>
      query_idx = (u16_t)(query_idx + n + 1);
   137d6:	b2a4      	uxth	r4, r4
    } while (*hostname != 0);
   137d8:	782a      	ldrb	r2, [r5, #0]
      query_idx = (u16_t)(query_idx + n + 1);
   137da:	1c66      	adds	r6, r4, #1
   137dc:	b2b6      	uxth	r6, r6
    } while (*hostname != 0);
   137de:	2a00      	cmp	r2, #0
   137e0:	d1d0      	bne.n	13784 <dns_send+0x80>
    pbuf_put_at(p, query_idx, 0);
   137e2:	4631      	mov	r1, r6
   137e4:	4640      	mov	r0, r8
   137e6:	f004 fa6d 	bl	17cc4 <pbuf_put_at>

    /* fill dns query */
    if (LWIP_DNS_ADDRTYPE_IS_IPV6(entry->reqaddrtype)) {
      qry.type = PP_HTONS(DNS_RRTYPE_AAAA);
    } else {
      qry.type = PP_HTONS(DNS_RRTYPE_A);
   137ea:	a906      	add	r1, sp, #24
   137ec:	f04f 2301 	mov.w	r3, #16777472	; 0x1000100
   137f0:	f841 3d10 	str.w	r3, [r1, #-16]!
    query_idx++;
   137f4:	1ca3      	adds	r3, r4, #2
    }
    qry.cls = PP_HTONS(DNS_RRCLASS_IN);
    pbuf_take_at(p, &qry, SIZEOF_DNS_QUERY, query_idx);
   137f6:	b29b      	uxth	r3, r3
   137f8:	2204      	movs	r2, #4
   137fa:	4640      	mov	r0, r8
   137fc:	f004 f92c 	bl	17a58 <pbuf_take_at>
#endif
    } else
#endif /* LWIP_DNS_SUPPORT_MDNS_QUERIES */
    {
      dst_port = DNS_SERVER_PORT;
      dst = &dns_servers[entry->server_idx];
   13800:	e89d 000c 	ldmia.w	sp, {r2, r3}
   13804:	4413      	add	r3, r2
   13806:	eb09 1303 	add.w	r3, r9, r3, lsl #4
   1380a:	4a69      	ldr	r2, [pc, #420]	; (139b0 <dns_send+0x2ac>)
    }
    err = udp_sendto(dns_pcbs[pcb_idx], p, dst, dst_port);
   1380c:	f893 103f 	ldrb.w	r1, [r3, #63]	; 0x3f
      dst = &dns_servers[entry->server_idx];
   13810:	f893 303b 	ldrb.w	r3, [r3, #59]	; 0x3b
    err = udp_sendto(dns_pcbs[pcb_idx], p, dst, dst_port);
   13814:	eb09 0981 	add.w	r9, r9, r1, lsl #2
   13818:	eb02 0283 	add.w	r2, r2, r3, lsl #2
   1381c:	f8d9 0470 	ldr.w	r0, [r9, #1136]	; 0x470
   13820:	2335      	movs	r3, #53	; 0x35
   13822:	4641      	mov	r1, r8
   13824:	f007 fef2 	bl	1b60c <udp_sendto>
   13828:	4604      	mov	r4, r0

    /* free pbuf */
    pbuf_free(p);
   1382a:	4640      	mov	r0, r8
   1382c:	f003 ffde 	bl	177ec <pbuf_free>

  return err;
overflow_return:
  pbuf_free(p);
  return ERR_VAL;
}
   13830:	4620      	mov	r0, r4
   13832:	b007      	add	sp, #28
   13834:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  }
#endif /* LWIP_IPV4 && LWIP_IPV6 */

#if ((LWIP_DNS_SECURE & LWIP_DNS_SECURE_NO_MULTIPLE_OUTSTANDING) != 0)
  for (i = 0; i < DNS_MAX_REQUESTS; i++) {
    if (dns_requests[i].found && (dns_requests[i].dns_table_idx == idx)) {
   13838:	f8d9 6000 	ldr.w	r6, [r9]
      (*dns_requests[i].found)(dns_table[idx].name, addr, dns_requests[i].arg);
   1383c:	3440      	adds	r4, #64	; 0x40
    if (dns_requests[i].found && (dns_requests[i].dns_table_idx == idx)) {
   1383e:	b126      	cbz	r6, 1384a <dns_send+0x146>
   13840:	f899 3008 	ldrb.w	r3, [r9, #8]
   13844:	4283      	cmp	r3, r0
   13846:	f000 80a7 	beq.w	13998 <dns_send+0x294>
   1384a:	f8d9 300c 	ldr.w	r3, [r9, #12]
   1384e:	b12b      	cbz	r3, 1385c <dns_send+0x158>
   13850:	f899 2014 	ldrb.w	r2, [r9, #20]
   13854:	9900      	ldr	r1, [sp, #0]
   13856:	428a      	cmp	r2, r1
   13858:	f000 8095 	beq.w	13986 <dns_send+0x282>
   1385c:	f8d9 3018 	ldr.w	r3, [r9, #24]
   13860:	b12b      	cbz	r3, 1386e <dns_send+0x16a>
   13862:	f899 2020 	ldrb.w	r2, [r9, #32]
   13866:	9900      	ldr	r1, [sp, #0]
   13868:	428a      	cmp	r2, r1
   1386a:	f000 8083 	beq.w	13974 <dns_send+0x270>
   1386e:	f8d9 3024 	ldr.w	r3, [r9, #36]	; 0x24
   13872:	b123      	cbz	r3, 1387e <dns_send+0x17a>
   13874:	f899 202c 	ldrb.w	r2, [r9, #44]	; 0x2c
   13878:	9900      	ldr	r1, [sp, #0]
   1387a:	428a      	cmp	r2, r1
   1387c:	d071      	beq.n	13962 <dns_send+0x25e>
   1387e:	9901      	ldr	r1, [sp, #4]
   13880:	9a00      	ldr	r2, [sp, #0]
   13882:	188b      	adds	r3, r1, r2
   13884:	eb09 1303 	add.w	r3, r9, r3, lsl #4
   13888:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
  dns_requests[idx].found = NULL;
#endif
#if ((LWIP_DNS_SECURE & LWIP_DNS_SECURE_RAND_SRC_PORT) != 0)
  /* close the pcb used unless other request are using it */
  for (i = 0; i < DNS_MAX_REQUESTS; i++) {
    if (i == idx) {
   1388c:	b132      	cbz	r2, 1389c <dns_send+0x198>
      continue; /* only check other requests */
    }
    if (dns_table[i].state == DNS_STATE_ASKING) {
   1388e:	f899 203a 	ldrb.w	r2, [r9, #58]	; 0x3a
   13892:	2a02      	cmp	r2, #2
   13894:	d05b      	beq.n	1394e <dns_send+0x24a>
    if (i == idx) {
   13896:	9a00      	ldr	r2, [sp, #0]
   13898:	2a01      	cmp	r2, #1
   1389a:	d006      	beq.n	138aa <dns_send+0x1a6>
    if (dns_table[i].state == DNS_STATE_ASKING) {
   1389c:	f899 214a 	ldrb.w	r2, [r9, #330]	; 0x14a
   138a0:	2a02      	cmp	r2, #2
   138a2:	d04f      	beq.n	13944 <dns_send+0x240>
    if (i == idx) {
   138a4:	9a00      	ldr	r2, [sp, #0]
   138a6:	2a02      	cmp	r2, #2
   138a8:	d006      	beq.n	138b8 <dns_send+0x1b4>
    if (dns_table[i].state == DNS_STATE_ASKING) {
   138aa:	f899 225a 	ldrb.w	r2, [r9, #602]	; 0x25a
   138ae:	2a02      	cmp	r2, #2
   138b0:	d052      	beq.n	13958 <dns_send+0x254>
    if (i == idx) {
   138b2:	9a00      	ldr	r2, [sp, #0]
   138b4:	2a03      	cmp	r2, #3
   138b6:	d003      	beq.n	138c0 <dns_send+0x1bc>
    if (dns_table[i].state == DNS_STATE_ASKING) {
   138b8:	f899 236a 	ldrb.w	r2, [r9, #874]	; 0x36a
   138bc:	2a02      	cmp	r2, #2
   138be:	d034      	beq.n	1392a <dns_send+0x226>
        dns_table[idx].pcb_idx = DNS_MAX_SOURCE_PORTS;
        break;
      }
    }
  }
  if (dns_table[idx].pcb_idx < DNS_MAX_SOURCE_PORTS) {
   138c0:	2b03      	cmp	r3, #3
   138c2:	d814      	bhi.n	138ee <dns_send+0x1ea>
    /* if we come here, the pcb is not used any more and can be removed */
    udp_remove(dns_pcbs[dns_table[idx].pcb_idx]);
   138c4:	eb09 0383 	add.w	r3, r9, r3, lsl #2
   138c8:	f8d3 0470 	ldr.w	r0, [r3, #1136]	; 0x470
   138cc:	f007 ff72 	bl	1b7b4 <udp_remove>
    dns_pcbs[dns_table[idx].pcb_idx] = NULL;
   138d0:	e89d 000c 	ldmia.w	sp, {r2, r3}
   138d4:	4413      	add	r3, r2
   138d6:	eb09 1303 	add.w	r3, r9, r3, lsl #4
    dns_table[idx].pcb_idx = DNS_MAX_SOURCE_PORTS;
   138da:	2104      	movs	r1, #4
    dns_pcbs[dns_table[idx].pcb_idx] = NULL;
   138dc:	f893 203f 	ldrb.w	r2, [r3, #63]	; 0x3f
    dns_table[idx].pcb_idx = DNS_MAX_SOURCE_PORTS;
   138e0:	f883 103f 	strb.w	r1, [r3, #63]	; 0x3f
    dns_pcbs[dns_table[idx].pcb_idx] = NULL;
   138e4:	eb09 0382 	add.w	r3, r9, r2, lsl #2
   138e8:	2200      	movs	r2, #0
   138ea:	f8c3 2470 	str.w	r2, [r3, #1136]	; 0x470
    entry->state = DNS_STATE_UNUSED;
   138ee:	e89d 000c 	ldmia.w	sp, {r2, r3}
   138f2:	4413      	add	r3, r2
   138f4:	2400      	movs	r4, #0
   138f6:	eb09 1903 	add.w	r9, r9, r3, lsl #4
}
   138fa:	4620      	mov	r0, r4
    entry->state = DNS_STATE_UNUSED;
   138fc:	f889 403a 	strb.w	r4, [r9, #58]	; 0x3a
}
   13900:	b007      	add	sp, #28
   13902:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  pbuf_free(p);
   13906:	4640      	mov	r0, r8
   13908:	f003 ff70 	bl	177ec <pbuf_free>
  return ERR_VAL;
   1390c:	f06f 0405 	mvn.w	r4, #5
}
   13910:	4620      	mov	r0, r4
   13912:	b007      	add	sp, #28
   13914:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      for (n = 0; *hostname != '.' && *hostname != 0; ++hostname) {
   13918:	2300      	movs	r3, #0
   1391a:	469a      	mov	sl, r3
   1391c:	461c      	mov	r4, r3
      ++hostname;
   1391e:	463d      	mov	r5, r7
   13920:	e748      	b.n	137b4 <dns_send+0xb0>
      for (n = 0; *hostname != '.' && *hostname != 0; ++hostname) {
   13922:	469a      	mov	sl, r3
   13924:	461c      	mov	r4, r3
      ++hostname;
   13926:	463d      	mov	r5, r7
   13928:	e744      	b.n	137b4 <dns_send+0xb0>
      if (dns_table[i].pcb_idx == dns_table[idx].pcb_idx) {
   1392a:	f899 236f 	ldrb.w	r2, [r9, #879]	; 0x36f
   1392e:	429a      	cmp	r2, r3
   13930:	d1c6      	bne.n	138c0 <dns_send+0x1bc>
        dns_table[idx].pcb_idx = DNS_MAX_SOURCE_PORTS;
   13932:	e89d 000c 	ldmia.w	sp, {r2, r3}
   13936:	4413      	add	r3, r2
   13938:	eb09 1303 	add.w	r3, r9, r3, lsl #4
   1393c:	2204      	movs	r2, #4
   1393e:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
   13942:	e7d4      	b.n	138ee <dns_send+0x1ea>
      if (dns_table[i].pcb_idx == dns_table[idx].pcb_idx) {
   13944:	f899 214f 	ldrb.w	r2, [r9, #335]	; 0x14f
   13948:	429a      	cmp	r2, r3
   1394a:	d1ab      	bne.n	138a4 <dns_send+0x1a0>
   1394c:	e7f1      	b.n	13932 <dns_send+0x22e>
   1394e:	f899 203f 	ldrb.w	r2, [r9, #63]	; 0x3f
   13952:	429a      	cmp	r2, r3
   13954:	d19f      	bne.n	13896 <dns_send+0x192>
   13956:	e7ec      	b.n	13932 <dns_send+0x22e>
   13958:	f899 225f 	ldrb.w	r2, [r9, #607]	; 0x25f
   1395c:	429a      	cmp	r2, r3
   1395e:	d1a8      	bne.n	138b2 <dns_send+0x1ae>
   13960:	e7e7      	b.n	13932 <dns_send+0x22e>
      (*dns_requests[i].found)(dns_table[idx].name, addr, dns_requests[i].arg);
   13962:	4620      	mov	r0, r4
   13964:	f8d9 2028 	ldr.w	r2, [r9, #40]	; 0x28
   13968:	2100      	movs	r1, #0
   1396a:	4798      	blx	r3
      dns_requests[i].found = NULL;
   1396c:	2300      	movs	r3, #0
   1396e:	f8c9 3024 	str.w	r3, [r9, #36]	; 0x24
   13972:	e784      	b.n	1387e <dns_send+0x17a>
      (*dns_requests[i].found)(dns_table[idx].name, addr, dns_requests[i].arg);
   13974:	f8d9 201c 	ldr.w	r2, [r9, #28]
   13978:	2100      	movs	r1, #0
   1397a:	4620      	mov	r0, r4
   1397c:	4798      	blx	r3
      dns_requests[i].found = NULL;
   1397e:	2300      	movs	r3, #0
   13980:	f8c9 3018 	str.w	r3, [r9, #24]
   13984:	e773      	b.n	1386e <dns_send+0x16a>
      (*dns_requests[i].found)(dns_table[idx].name, addr, dns_requests[i].arg);
   13986:	f8d9 2010 	ldr.w	r2, [r9, #16]
   1398a:	2100      	movs	r1, #0
   1398c:	4620      	mov	r0, r4
   1398e:	4798      	blx	r3
      dns_requests[i].found = NULL;
   13990:	2300      	movs	r3, #0
   13992:	f8c9 300c 	str.w	r3, [r9, #12]
   13996:	e761      	b.n	1385c <dns_send+0x158>
      (*dns_requests[i].found)(dns_table[idx].name, addr, dns_requests[i].arg);
   13998:	f8d9 2004 	ldr.w	r2, [r9, #4]
   1399c:	4629      	mov	r1, r5
   1399e:	4620      	mov	r0, r4
   139a0:	47b0      	blx	r6
      dns_requests[i].found = NULL;
   139a2:	f8c9 5000 	str.w	r5, [r9]
   139a6:	e750      	b.n	1384a <dns_send+0x146>
    err = ERR_MEM;
   139a8:	f04f 34ff 	mov.w	r4, #4294967295
   139ac:	e740      	b.n	13830 <dns_send+0x12c>
   139ae:	bf00      	nop
   139b0:	200027ac 	.word	0x200027ac
   139b4:	2000232c 	.word	0x2000232c

000139b8 <dns_check_entry>:
 *
 * @param i index of the dns_table entry to check
 */
static void
dns_check_entry(u8_t i)
{
   139b8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  err_t err;
  struct dns_table_entry *entry = &dns_table[i];

  LWIP_ASSERT("array index out of bounds", i < DNS_TABLE_SIZE);

  switch (entry->state) {
   139bc:	0104      	lsls	r4, r0, #4
   139be:	4d82      	ldr	r5, [pc, #520]	; (13bc8 <dns_check_entry+0x210>)
   139c0:	1823      	adds	r3, r4, r0
   139c2:	eb05 1303 	add.w	r3, r5, r3, lsl #4
{
   139c6:	4606      	mov	r6, r0
  switch (entry->state) {
   139c8:	f893 203a 	ldrb.w	r2, [r3, #58]	; 0x3a
   139cc:	2a02      	cmp	r2, #2
   139ce:	d044      	beq.n	13a5a <dns_check_entry+0xa2>
   139d0:	2a03      	cmp	r2, #3
   139d2:	d038      	beq.n	13a46 <dns_check_entry+0x8e>
   139d4:	2a01      	cmp	r2, #1
   139d6:	d01c      	beq.n	13a12 <dns_check_entry+0x5a>
   139d8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if ((dns_table[i].state == DNS_STATE_ASKING) &&
   139dc:	8f2a      	ldrh	r2, [r5, #56]	; 0x38
   139de:	429a      	cmp	r2, r3
   139e0:	d017      	beq.n	13a12 <dns_check_entry+0x5a>
   139e2:	f895 214a 	ldrb.w	r2, [r5, #330]	; 0x14a
   139e6:	2a02      	cmp	r2, #2
   139e8:	d103      	bne.n	139f2 <dns_check_entry+0x3a>
   139ea:	f8b5 2148 	ldrh.w	r2, [r5, #328]	; 0x148
   139ee:	429a      	cmp	r2, r3
   139f0:	d00f      	beq.n	13a12 <dns_check_entry+0x5a>
   139f2:	f895 225a 	ldrb.w	r2, [r5, #602]	; 0x25a
   139f6:	2a02      	cmp	r2, #2
   139f8:	d103      	bne.n	13a02 <dns_check_entry+0x4a>
   139fa:	f8b5 2258 	ldrh.w	r2, [r5, #600]	; 0x258
   139fe:	429a      	cmp	r2, r3
   13a00:	d007      	beq.n	13a12 <dns_check_entry+0x5a>
   13a02:	f895 236a 	ldrb.w	r2, [r5, #874]	; 0x36a
   13a06:	2a02      	cmp	r2, #2
   13a08:	d10f      	bne.n	13a2a <dns_check_entry+0x72>
   13a0a:	f8b5 2368 	ldrh.w	r2, [r5, #872]	; 0x368
   13a0e:	429a      	cmp	r2, r3
   13a10:	d10b      	bne.n	13a2a <dns_check_entry+0x72>
  txid = (u16_t)DNS_RAND_TXID();
   13a12:	f014 fab5 	bl	27f80 <rand>
    if ((dns_table[i].state == DNS_STATE_ASKING) &&
   13a16:	f895 203a 	ldrb.w	r2, [r5, #58]	; 0x3a
   13a1a:	2a02      	cmp	r2, #2
  txid = (u16_t)DNS_RAND_TXID();
   13a1c:	b283      	uxth	r3, r0
    if ((dns_table[i].state == DNS_STATE_ASKING) &&
   13a1e:	d0dd      	beq.n	139dc <dns_check_entry+0x24>
   13a20:	f895 214a 	ldrb.w	r2, [r5, #330]	; 0x14a
   13a24:	2a02      	cmp	r2, #2
   13a26:	d1e4      	bne.n	139f2 <dns_check_entry+0x3a>
   13a28:	e7df      	b.n	139ea <dns_check_entry+0x32>
    case DNS_STATE_NEW:
      /* initialize new entry */
      entry->txid = dns_create_txid();
   13a2a:	4434      	add	r4, r6
      entry->state = DNS_STATE_ASKING;
   13a2c:	4967      	ldr	r1, [pc, #412]	; (13bcc <dns_check_entry+0x214>)
   13a2e:	4a68      	ldr	r2, [pc, #416]	; (13bd0 <dns_check_entry+0x218>)
      entry->txid = dns_create_txid();
   13a30:	0124      	lsls	r4, r4, #4
   13a32:	4425      	add	r5, r4
      entry->state = DNS_STATE_ASKING;
   13a34:	440c      	add	r4, r1
      entry->txid = dns_create_txid();
   13a36:	872b      	strh	r3, [r5, #56]	; 0x38
      entry->server_idx = 0;
      entry->tmr = 1;
      entry->retries = 0;

      /* send DNS packet for this entry */
      err = dns_send(i);
   13a38:	4630      	mov	r0, r6
      entry->state = DNS_STATE_ASKING;
   13a3a:	f8c4 2002 	str.w	r2, [r4, #2]
      break;
    default:
      LWIP_ASSERT("unknown dns_table entry state:", 0);
      break;
  }
}
   13a3e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
      err = dns_send(i);
   13a42:	f7ff be5f 	b.w	13704 <dns_send>
      if ((entry->ttl == 0) || (--entry->ttl == 0)) {
   13a46:	6b1a      	ldr	r2, [r3, #48]	; 0x30
   13a48:	b9f2      	cbnz	r2, 13a88 <dns_check_entry+0xd0>
        entry->state = DNS_STATE_UNUSED;
   13a4a:	4434      	add	r4, r6
   13a4c:	eb05 1504 	add.w	r5, r5, r4, lsl #4
   13a50:	2300      	movs	r3, #0
   13a52:	f885 303a 	strb.w	r3, [r5, #58]	; 0x3a
   13a56:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      if (--entry->tmr == 0) {
   13a5a:	f893 203c 	ldrb.w	r2, [r3, #60]	; 0x3c
   13a5e:	3a01      	subs	r2, #1
   13a60:	b2d2      	uxtb	r2, r2
   13a62:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
   13a66:	2a00      	cmp	r2, #0
   13a68:	d1b6      	bne.n	139d8 <dns_check_entry+0x20>
        if (++entry->retries == DNS_MAX_RETRIES) {
   13a6a:	f893 203d 	ldrb.w	r2, [r3, #61]	; 0x3d
   13a6e:	3201      	adds	r2, #1
   13a70:	b2d2      	uxtb	r2, r2
   13a72:	2a04      	cmp	r2, #4
   13a74:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
   13a78:	d00c      	beq.n	13a94 <dns_check_entry+0xdc>
          entry->tmr = entry->retries;
   13a7a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
        err = dns_send(i);
   13a7e:	4630      	mov	r0, r6
}
   13a80:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
        err = dns_send(i);
   13a84:	f7ff be3e 	b.w	13704 <dns_send>
      if ((entry->ttl == 0) || (--entry->ttl == 0)) {
   13a88:	3a01      	subs	r2, #1
   13a8a:	631a      	str	r2, [r3, #48]	; 0x30
   13a8c:	2a00      	cmp	r2, #0
   13a8e:	d0dc      	beq.n	13a4a <dns_check_entry+0x92>
   13a90:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if ((pentry->server_idx + 1 < DNS_MAX_SERVERS) && !ip_addr_isany_val(dns_servers[pentry->server_idx + 1])) {
   13a94:	f893 203b 	ldrb.w	r2, [r3, #59]	; 0x3b
   13a98:	2a00      	cmp	r2, #0
   13a9a:	d04a      	beq.n	13b32 <dns_check_entry+0x17a>
      (*dns_requests[i].found)(dns_table[idx].name, addr, dns_requests[i].arg);
   13a9c:	4b4d      	ldr	r3, [pc, #308]	; (13bd4 <dns_check_entry+0x21c>)
    if (dns_requests[i].found && (dns_requests[i].dns_table_idx == idx)) {
   13a9e:	f8d5 8000 	ldr.w	r8, [r5]
      (*dns_requests[i].found)(dns_table[idx].name, addr, dns_requests[i].arg);
   13aa2:	19a2      	adds	r2, r4, r6
   13aa4:	eb03 1302 	add.w	r3, r3, r2, lsl #4
   13aa8:	f103 0710 	add.w	r7, r3, #16
    if (dns_requests[i].found && (dns_requests[i].dns_table_idx == idx)) {
   13aac:	f1b8 0f00 	cmp.w	r8, #0
   13ab0:	d002      	beq.n	13ab8 <dns_check_entry+0x100>
   13ab2:	7a2b      	ldrb	r3, [r5, #8]
   13ab4:	42b3      	cmp	r3, r6
   13ab6:	d056      	beq.n	13b66 <dns_check_entry+0x1ae>
   13ab8:	68eb      	ldr	r3, [r5, #12]
   13aba:	b113      	cbz	r3, 13ac2 <dns_check_entry+0x10a>
   13abc:	7d2a      	ldrb	r2, [r5, #20]
   13abe:	42b2      	cmp	r2, r6
   13ac0:	d058      	beq.n	13b74 <dns_check_entry+0x1bc>
   13ac2:	69ab      	ldr	r3, [r5, #24]
   13ac4:	b11b      	cbz	r3, 13ace <dns_check_entry+0x116>
   13ac6:	f895 2020 	ldrb.w	r2, [r5, #32]
   13aca:	42b2      	cmp	r2, r6
   13acc:	d059      	beq.n	13b82 <dns_check_entry+0x1ca>
   13ace:	6a6b      	ldr	r3, [r5, #36]	; 0x24
   13ad0:	b11b      	cbz	r3, 13ada <dns_check_entry+0x122>
   13ad2:	f895 202c 	ldrb.w	r2, [r5, #44]	; 0x2c
   13ad6:	42b2      	cmp	r2, r6
   13ad8:	d03e      	beq.n	13b58 <dns_check_entry+0x1a0>
   13ada:	19a3      	adds	r3, r4, r6
   13adc:	eb05 1303 	add.w	r3, r5, r3, lsl #4
   13ae0:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
    if (i == idx) {
   13ae4:	b38e      	cbz	r6, 13b4a <dns_check_entry+0x192>
    if (dns_table[i].state == DNS_STATE_ASKING) {
   13ae6:	f895 203a 	ldrb.w	r2, [r5, #58]	; 0x3a
   13aea:	2a02      	cmp	r2, #2
   13aec:	d061      	beq.n	13bb2 <dns_check_entry+0x1fa>
    if (i == idx) {
   13aee:	2e01      	cmp	r6, #1
   13af0:	d12b      	bne.n	13b4a <dns_check_entry+0x192>
    if (dns_table[i].state == DNS_STATE_ASKING) {
   13af2:	f895 225a 	ldrb.w	r2, [r5, #602]	; 0x25a
   13af6:	2a02      	cmp	r2, #2
   13af8:	d060      	beq.n	13bbc <dns_check_entry+0x204>
    if (i == idx) {
   13afa:	2e03      	cmp	r6, #3
   13afc:	d003      	beq.n	13b06 <dns_check_entry+0x14e>
    if (dns_table[i].state == DNS_STATE_ASKING) {
   13afe:	f895 236a 	ldrb.w	r2, [r5, #874]	; 0x36a
   13b02:	2a02      	cmp	r2, #2
   13b04:	d044      	beq.n	13b90 <dns_check_entry+0x1d8>
  if (dns_table[idx].pcb_idx < DNS_MAX_SOURCE_PORTS) {
   13b06:	2b03      	cmp	r3, #3
   13b08:	d89f      	bhi.n	13a4a <dns_check_entry+0x92>
    udp_remove(dns_pcbs[dns_table[idx].pcb_idx]);
   13b0a:	eb05 0383 	add.w	r3, r5, r3, lsl #2
   13b0e:	f8d3 0470 	ldr.w	r0, [r3, #1136]	; 0x470
   13b12:	f007 fe4f 	bl	1b7b4 <udp_remove>
    dns_pcbs[dns_table[idx].pcb_idx] = NULL;
   13b16:	19a3      	adds	r3, r4, r6
   13b18:	eb05 1303 	add.w	r3, r5, r3, lsl #4
    dns_table[idx].pcb_idx = DNS_MAX_SOURCE_PORTS;
   13b1c:	2104      	movs	r1, #4
    dns_pcbs[dns_table[idx].pcb_idx] = NULL;
   13b1e:	f893 203f 	ldrb.w	r2, [r3, #63]	; 0x3f
    dns_table[idx].pcb_idx = DNS_MAX_SOURCE_PORTS;
   13b22:	f883 103f 	strb.w	r1, [r3, #63]	; 0x3f
    dns_pcbs[dns_table[idx].pcb_idx] = NULL;
   13b26:	eb05 0382 	add.w	r3, r5, r2, lsl #2
   13b2a:	2200      	movs	r2, #0
   13b2c:	f8c3 2470 	str.w	r2, [r3, #1136]	; 0x470
   13b30:	e78b      	b.n	13a4a <dns_check_entry+0x92>
    if ((pentry->server_idx + 1 < DNS_MAX_SERVERS) && !ip_addr_isany_val(dns_servers[pentry->server_idx + 1])) {
   13b32:	f8d5 1484 	ldr.w	r1, [r5, #1156]	; 0x484
   13b36:	2900      	cmp	r1, #0
   13b38:	d0b0      	beq.n	13a9c <dns_check_entry+0xe4>
            entry->server_idx++;
   13b3a:	2101      	movs	r1, #1
            entry->retries = 0;
   13b3c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
            entry->server_idx++;
   13b40:	f883 103b 	strb.w	r1, [r3, #59]	; 0x3b
            entry->tmr = 1;
   13b44:	f883 103c 	strb.w	r1, [r3, #60]	; 0x3c
   13b48:	e799      	b.n	13a7e <dns_check_entry+0xc6>
    if (dns_table[i].state == DNS_STATE_ASKING) {
   13b4a:	f895 214a 	ldrb.w	r2, [r5, #330]	; 0x14a
   13b4e:	2a02      	cmp	r2, #2
   13b50:	d02a      	beq.n	13ba8 <dns_check_entry+0x1f0>
    if (i == idx) {
   13b52:	2e02      	cmp	r6, #2
   13b54:	d1cd      	bne.n	13af2 <dns_check_entry+0x13a>
   13b56:	e7d2      	b.n	13afe <dns_check_entry+0x146>
      (*dns_requests[i].found)(dns_table[idx].name, addr, dns_requests[i].arg);
   13b58:	4638      	mov	r0, r7
   13b5a:	6aaa      	ldr	r2, [r5, #40]	; 0x28
   13b5c:	2100      	movs	r1, #0
   13b5e:	4798      	blx	r3
      dns_requests[i].found = NULL;
   13b60:	2300      	movs	r3, #0
   13b62:	626b      	str	r3, [r5, #36]	; 0x24
   13b64:	e7b9      	b.n	13ada <dns_check_entry+0x122>
      (*dns_requests[i].found)(dns_table[idx].name, addr, dns_requests[i].arg);
   13b66:	686a      	ldr	r2, [r5, #4]
   13b68:	2100      	movs	r1, #0
   13b6a:	4638      	mov	r0, r7
   13b6c:	47c0      	blx	r8
      dns_requests[i].found = NULL;
   13b6e:	2300      	movs	r3, #0
   13b70:	602b      	str	r3, [r5, #0]
   13b72:	e7a1      	b.n	13ab8 <dns_check_entry+0x100>
      (*dns_requests[i].found)(dns_table[idx].name, addr, dns_requests[i].arg);
   13b74:	692a      	ldr	r2, [r5, #16]
   13b76:	2100      	movs	r1, #0
   13b78:	4638      	mov	r0, r7
   13b7a:	4798      	blx	r3
      dns_requests[i].found = NULL;
   13b7c:	2300      	movs	r3, #0
   13b7e:	60eb      	str	r3, [r5, #12]
   13b80:	e79f      	b.n	13ac2 <dns_check_entry+0x10a>
      (*dns_requests[i].found)(dns_table[idx].name, addr, dns_requests[i].arg);
   13b82:	69ea      	ldr	r2, [r5, #28]
   13b84:	2100      	movs	r1, #0
   13b86:	4638      	mov	r0, r7
   13b88:	4798      	blx	r3
      dns_requests[i].found = NULL;
   13b8a:	2300      	movs	r3, #0
   13b8c:	61ab      	str	r3, [r5, #24]
   13b8e:	e79e      	b.n	13ace <dns_check_entry+0x116>
      if (dns_table[i].pcb_idx == dns_table[idx].pcb_idx) {
   13b90:	f895 236f 	ldrb.w	r2, [r5, #879]	; 0x36f
   13b94:	429a      	cmp	r2, r3
   13b96:	d1b6      	bne.n	13b06 <dns_check_entry+0x14e>
        dns_table[idx].pcb_idx = DNS_MAX_SOURCE_PORTS;
   13b98:	f44f 7388 	mov.w	r3, #272	; 0x110
   13b9c:	fb03 5306 	mla	r3, r3, r6, r5
   13ba0:	2204      	movs	r2, #4
   13ba2:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
   13ba6:	e750      	b.n	13a4a <dns_check_entry+0x92>
      if (dns_table[i].pcb_idx == dns_table[idx].pcb_idx) {
   13ba8:	f895 214f 	ldrb.w	r2, [r5, #335]	; 0x14f
   13bac:	429a      	cmp	r2, r3
   13bae:	d1d0      	bne.n	13b52 <dns_check_entry+0x19a>
   13bb0:	e7f2      	b.n	13b98 <dns_check_entry+0x1e0>
   13bb2:	f895 203f 	ldrb.w	r2, [r5, #63]	; 0x3f
   13bb6:	429a      	cmp	r2, r3
   13bb8:	d199      	bne.n	13aee <dns_check_entry+0x136>
   13bba:	e7ed      	b.n	13b98 <dns_check_entry+0x1e0>
   13bbc:	f895 225f 	ldrb.w	r2, [r5, #607]	; 0x25f
   13bc0:	429a      	cmp	r2, r3
   13bc2:	d19a      	bne.n	13afa <dns_check_entry+0x142>
   13bc4:	e7e8      	b.n	13b98 <dns_check_entry+0x1e0>
   13bc6:	bf00      	nop
   13bc8:	2000232c 	.word	0x2000232c
   13bcc:	20002364 	.word	0x20002364
   13bd0:	00010002 	.word	0x00010002
   13bd4:	2000235c 	.word	0x2000235c

00013bd8 <dns_init>:
{
   13bd8:	4770      	bx	lr
   13bda:	bf00      	nop

00013bdc <dns_setserver>:
  if (numdns < DNS_MAX_SERVERS) {
   13bdc:	2801      	cmp	r0, #1
   13bde:	d900      	bls.n	13be2 <dns_setserver+0x6>
   13be0:	4770      	bx	lr
      dns_servers[numdns] = (*dnsserver);
   13be2:	4b07      	ldr	r3, [pc, #28]	; (13c00 <dns_setserver+0x24>)
    if (dnsserver != NULL) {
   13be4:	b129      	cbz	r1, 13bf2 <dns_setserver+0x16>
      dns_servers[numdns] = (*dnsserver);
   13be6:	eb03 0080 	add.w	r0, r3, r0, lsl #2
   13bea:	680a      	ldr	r2, [r1, #0]
   13bec:	f8c0 2480 	str.w	r2, [r0, #1152]	; 0x480
   13bf0:	4770      	bx	lr
      dns_servers[numdns] = *IP_ADDR_ANY;
   13bf2:	4a04      	ldr	r2, [pc, #16]	; (13c04 <dns_setserver+0x28>)
   13bf4:	eb03 0080 	add.w	r0, r3, r0, lsl #2
   13bf8:	6813      	ldr	r3, [r2, #0]
   13bfa:	f8c0 3480 	str.w	r3, [r0, #1152]	; 0x480
}
   13bfe:	e7ef      	b.n	13be0 <dns_setserver+0x4>
   13c00:	2000232c 	.word	0x2000232c
   13c04:	0002d58c 	.word	0x0002d58c

00013c08 <dns_tmr>:
{
   13c08:	b508      	push	{r3, lr}
dns_check_entries(void)
{
  u8_t i;

  for (i = 0; i < DNS_TABLE_SIZE; ++i) {
    dns_check_entry(i);
   13c0a:	2000      	movs	r0, #0
   13c0c:	f7ff fed4 	bl	139b8 <dns_check_entry>
   13c10:	2001      	movs	r0, #1
   13c12:	f7ff fed1 	bl	139b8 <dns_check_entry>
   13c16:	2002      	movs	r0, #2
   13c18:	f7ff fece 	bl	139b8 <dns_check_entry>
   13c1c:	2003      	movs	r0, #3
}
   13c1e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    dns_check_entry(i);
   13c22:	f7ff bec9 	b.w	139b8 <dns_check_entry>
   13c26:	bf00      	nop

00013c28 <lwip_init>:
 * Initialize all modules.
 * Use this in NO_SYS mode. Use tcpip_init() otherwise.
 */
void
lwip_init(void)
{
   13c28:	b508      	push	{r3, lr}
  /* Modules initialization */
  stats_init();
#if !NO_SYS
  sys_init();
#endif /* !NO_SYS */
  mem_init();
   13c2a:	f003 f8eb 	bl	16e04 <mem_init>
  memp_init();
   13c2e:	f003 fa4d 	bl	170cc <memp_init>
  pbuf_init();
  netif_init();
   13c32:	f003 fa9b 	bl	1716c <netif_init>
#endif /* LWIP_IPV4 */
#if LWIP_RAW
  raw_init();
#endif /* LWIP_RAW */
#if LWIP_UDP
  udp_init();
   13c36:	f007 fa77 	bl	1b128 <udp_init>
#endif /* LWIP_UDP */
#if LWIP_TCP
  tcp_init();
   13c3a:	f004 fa97 	bl	1816c <tcp_init>
#endif /* LWIP_TCP */
#if LWIP_IGMP
  igmp_init();
#endif /* LWIP_IGMP */
#if LWIP_DNS
  dns_init();
   13c3e:	f7ff ffcb 	bl	13bd8 <dns_init>
#endif

#if LWIP_TIMERS
  sys_timeouts_init();
#endif /* LWIP_TIMERS */
}
   13c42:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  sys_timeouts_init();
   13c46:	f007 ba0b 	b.w	1b060 <sys_timeouts_init>
   13c4a:	bf00      	nop

00013c4c <dhcp_create_msg>:
 * @param dhcp dhcp control struct
 * @param message_type message type of the request
 */
static struct pbuf *
dhcp_create_msg(struct netif *netif, struct dhcp *dhcp, u8_t message_type, u16_t *options_out_len)
{
   13c4c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  if (!xid_initialised) {
    xid = DHCP_GLOBAL_XID;
    xid_initialised = !xid_initialised;
  }
#endif
  LWIP_ERROR("dhcp_create_msg: netif != NULL", (netif != NULL), return NULL;);
   13c50:	2800      	cmp	r0, #0
   13c52:	f000 8094 	beq.w	13d7e <dhcp_create_msg+0x132>
  LWIP_ERROR("dhcp_create_msg: dhcp != NULL", (dhcp != NULL), return NULL;);
   13c56:	2900      	cmp	r1, #0
   13c58:	f000 8091 	beq.w	13d7e <dhcp_create_msg+0x132>
   13c5c:	4605      	mov	r5, r0
   13c5e:	4617      	mov	r7, r2
   13c60:	460e      	mov	r6, r1
  p_out = pbuf_alloc(PBUF_TRANSPORT, sizeof(struct dhcp_msg), PBUF_RAM);
   13c62:	f44f 7220 	mov.w	r2, #640	; 0x280
   13c66:	f44f 719a 	mov.w	r1, #308	; 0x134
   13c6a:	2036      	movs	r0, #54	; 0x36
   13c6c:	4698      	mov	r8, r3
   13c6e:	f003 fc11 	bl	17494 <pbuf_alloc>
  if (p_out == NULL) {
   13c72:	4681      	mov	r9, r0
   13c74:	2800      	cmp	r0, #0
   13c76:	f000 8082 	beq.w	13d7e <dhcp_create_msg+0x132>
  }
  LWIP_ASSERT("dhcp_create_msg: check that first pbuf can hold struct dhcp_msg",
              (p_out->len >= sizeof(struct dhcp_msg)));

  /* DHCP_REQUEST should reuse 'xid' from DHCPOFFER */
  if ((message_type != DHCP_REQUEST) || (dhcp->state == DHCP_STATE_REBOOTING)) {
   13c7a:	2f03      	cmp	r7, #3
   13c7c:	d01f      	beq.n	13cbe <dhcp_create_msg+0x72>
    /* reuse transaction identifier in retransmissions */
    if (dhcp->tries == 0) {
   13c7e:	79b3      	ldrb	r3, [r6, #6]
   13c80:	2b00      	cmp	r3, #0
   13c82:	d068      	beq.n	13d56 <dhcp_create_msg+0x10a>
   13c84:	4b3f      	ldr	r3, [pc, #252]	; (13d84 <dhcp_create_msg+0x138>)
   13c86:	6818      	ldr	r0, [r3, #0]
    dhcp->xid = xid;
  }
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE,
              ("transaction id xid(%"X32_F")\n", xid));

  msg_out = (struct dhcp_msg *)p_out->payload;
   13c88:	f8d9 4004 	ldr.w	r4, [r9, #4]
    dhcp->xid = xid;
   13c8c:	6030      	str	r0, [r6, #0]
  memset(msg_out, 0, sizeof(struct dhcp_msg));
   13c8e:	f44f 729a 	mov.w	r2, #308	; 0x134
   13c92:	2100      	movs	r1, #0
   13c94:	4620      	mov	r0, r4
   13c96:	f014 f8e1 	bl	27e5c <memset>

  msg_out->op = DHCP_BOOTREQUEST;
   13c9a:	2301      	movs	r3, #1
   13c9c:	7023      	strb	r3, [r4, #0]
  /* @todo: make link layer independent */
  msg_out->htype = LWIP_IANA_HWTYPE_ETHERNET;
   13c9e:	7063      	strb	r3, [r4, #1]
  msg_out->hlen = netif->hwaddr_len;
   13ca0:	f895 3034 	ldrb.w	r3, [r5, #52]	; 0x34
   13ca4:	70a3      	strb	r3, [r4, #2]
  msg_out->xid = lwip_htonl(dhcp->xid);
   13ca6:	6830      	ldr	r0, [r6, #0]
   13ca8:	f7ff fd2a 	bl	13700 <lwip_htonl>
  /* we don't need the broadcast flag since we can receive unicast traffic
     before being fully configured! */
  /* set ciaddr to netif->ip_addr based on message_type and state */
  if ((message_type == DHCP_INFORM) || (message_type == DHCP_DECLINE) || (message_type == DHCP_RELEASE) ||
   13cac:	2f04      	cmp	r7, #4
  msg_out->xid = lwip_htonl(dhcp->xid);
   13cae:	6060      	str	r0, [r4, #4]
  if ((message_type == DHCP_INFORM) || (message_type == DHCP_DECLINE) || (message_type == DHCP_RELEASE) ||
   13cb0:	d01d      	beq.n	13cee <dhcp_create_msg+0xa2>
   13cb2:	1ffb      	subs	r3, r7, #7
   13cb4:	2b01      	cmp	r3, #1
   13cb6:	d91a      	bls.n	13cee <dhcp_create_msg+0xa2>
   13cb8:	2f03      	cmp	r7, #3
   13cba:	d11a      	bne.n	13cf2 <dhcp_create_msg+0xa6>
   13cbc:	e013      	b.n	13ce6 <dhcp_create_msg+0x9a>
  if ((message_type != DHCP_REQUEST) || (dhcp->state == DHCP_STATE_REBOOTING)) {
   13cbe:	7973      	ldrb	r3, [r6, #5]
   13cc0:	2b03      	cmp	r3, #3
   13cc2:	d0dc      	beq.n	13c7e <dhcp_create_msg+0x32>
  msg_out = (struct dhcp_msg *)p_out->payload;
   13cc4:	6844      	ldr	r4, [r0, #4]
  memset(msg_out, 0, sizeof(struct dhcp_msg));
   13cc6:	f44f 729a 	mov.w	r2, #308	; 0x134
   13cca:	2100      	movs	r1, #0
   13ccc:	4620      	mov	r0, r4
   13cce:	f014 f8c5 	bl	27e5c <memset>
  msg_out->op = DHCP_BOOTREQUEST;
   13cd2:	2301      	movs	r3, #1
   13cd4:	7023      	strb	r3, [r4, #0]
  msg_out->htype = LWIP_IANA_HWTYPE_ETHERNET;
   13cd6:	7063      	strb	r3, [r4, #1]
  msg_out->hlen = netif->hwaddr_len;
   13cd8:	f895 3034 	ldrb.w	r3, [r5, #52]	; 0x34
   13cdc:	70a3      	strb	r3, [r4, #2]
  msg_out->xid = lwip_htonl(dhcp->xid);
   13cde:	6830      	ldr	r0, [r6, #0]
   13ce0:	f7ff fd0e 	bl	13700 <lwip_htonl>
   13ce4:	6060      	str	r0, [r4, #4]
      ((message_type == DHCP_REQUEST) && /* DHCP_STATE_BOUND not used for sending! */
       ((dhcp->state == DHCP_STATE_RENEWING) || dhcp->state == DHCP_STATE_REBINDING))) {
   13ce6:	7973      	ldrb	r3, [r6, #5]
      ((message_type == DHCP_REQUEST) && /* DHCP_STATE_BOUND not used for sending! */
   13ce8:	3b04      	subs	r3, #4
   13cea:	2b01      	cmp	r3, #1
   13cec:	d801      	bhi.n	13cf2 <dhcp_create_msg+0xa6>
    ip4_addr_copy(msg_out->ciaddr, *netif_ip4_addr(netif));
   13cee:	686b      	ldr	r3, [r5, #4]
   13cf0:	60e3      	str	r3, [r4, #12]
   13cf2:	f104 0320 	add.w	r3, r4, #32
   13cf6:	f105 012e 	add.w	r1, r5, #46	; 0x2e
   13cfa:	4299      	cmp	r1, r3
  }
  for (i = 0; i < LWIP_MIN(DHCP_CHADDR_LEN, NETIF_MAX_HWADDR_LEN); i++) {
    /* copy netif hardware address (padded with zeroes through memset already) */
    msg_out->chaddr[i] = netif->hwaddr[i];
   13cfc:	f895 302e 	ldrb.w	r3, [r5, #46]	; 0x2e
   13d00:	7723      	strb	r3, [r4, #28]
   13d02:	f895 302f 	ldrb.w	r3, [r5, #47]	; 0x2f
   13d06:	7763      	strb	r3, [r4, #29]
   13d08:	d205      	bcs.n	13d16 <dhcp_create_msg+0xca>
   13d0a:	f105 0332 	add.w	r3, r5, #50	; 0x32
   13d0e:	f104 021c 	add.w	r2, r4, #28
   13d12:	4293      	cmp	r3, r2
   13d14:	d824      	bhi.n	13d60 <dhcp_create_msg+0x114>
   13d16:	6b2b      	ldr	r3, [r5, #48]	; 0x30
   13d18:	f8c4 301e 	str.w	r3, [r4, #30]
  }
  msg_out->cookie = PP_HTONL(DHCP_MAGIC_COOKIE);
   13d1c:	2363      	movs	r3, #99	; 0x63
   13d1e:	f06f 057d 	mvn.w	r5, #125	; 0x7d
   13d22:	2053      	movs	r0, #83	; 0x53
  options[options_out_len++] = option_type;
   13d24:	2135      	movs	r1, #53	; 0x35
  options[options_out_len++] = option_len;
   13d26:	2201      	movs	r2, #1
  options[options_out_len++] = value;
   13d28:	f884 70f2 	strb.w	r7, [r4, #242]	; 0xf2
  msg_out->cookie = PP_HTONL(DHCP_MAGIC_COOKIE);
   13d2c:	f884 30ec 	strb.w	r3, [r4, #236]	; 0xec
   13d30:	f884 30ef 	strb.w	r3, [r4, #239]	; 0xef
   13d34:	f884 50ed 	strb.w	r5, [r4, #237]	; 0xed
   13d38:	f884 00ee 	strb.w	r0, [r4, #238]	; 0xee
  options[options_out_len++] = option_type;
   13d3c:	f884 10f0 	strb.w	r1, [r4, #240]	; 0xf0
  options[options_out_len++] = option_len;
   13d40:	f884 20f1 	strb.w	r2, [r4, #241]	; 0xf1
  /* Add option MESSAGE_TYPE */
  options_out_len_loc = dhcp_option(0, msg_out->options, DHCP_OPTION_MESSAGE_TYPE, DHCP_OPTION_MESSAGE_TYPE_LEN);
  options_out_len_loc = dhcp_option_byte(options_out_len_loc, msg_out->options, message_type);
  if (options_out_len) {
   13d44:	f1b8 0f00 	cmp.w	r8, #0
   13d48:	d002      	beq.n	13d50 <dhcp_create_msg+0x104>
    *options_out_len = options_out_len_loc;
   13d4a:	2303      	movs	r3, #3
   13d4c:	f8a8 3000 	strh.w	r3, [r8]
  }
  return p_out;
}
   13d50:	4648      	mov	r0, r9
   13d52:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
      xid = LWIP_RAND();
   13d56:	f014 f913 	bl	27f80 <rand>
   13d5a:	4b0a      	ldr	r3, [pc, #40]	; (13d84 <dhcp_create_msg+0x138>)
   13d5c:	6018      	str	r0, [r3, #0]
   13d5e:	e793      	b.n	13c88 <dhcp_create_msg+0x3c>
    msg_out->chaddr[i] = netif->hwaddr[i];
   13d60:	f895 3030 	ldrb.w	r3, [r5, #48]	; 0x30
   13d64:	77a3      	strb	r3, [r4, #30]
   13d66:	f895 3031 	ldrb.w	r3, [r5, #49]	; 0x31
   13d6a:	77e3      	strb	r3, [r4, #31]
   13d6c:	f895 3032 	ldrb.w	r3, [r5, #50]	; 0x32
   13d70:	f884 3020 	strb.w	r3, [r4, #32]
   13d74:	f895 3033 	ldrb.w	r3, [r5, #51]	; 0x33
   13d78:	f884 3021 	strb.w	r3, [r4, #33]	; 0x21
   13d7c:	e7ce      	b.n	13d1c <dhcp_create_msg+0xd0>
  LWIP_ERROR("dhcp_create_msg: netif != NULL", (netif != NULL), return NULL;);
   13d7e:	f04f 0900 	mov.w	r9, #0
   13d82:	e7e5      	b.n	13d50 <dhcp_create_msg+0x104>
   13d84:	200027b8 	.word	0x200027b8

00013d88 <dhcp_bind>:
  LWIP_ERROR("dhcp_bind: netif != NULL", (netif != NULL), return;);
   13d88:	2800      	cmp	r0, #0
   13d8a:	d075      	beq.n	13e78 <dhcp_bind+0xf0>
  dhcp = netif_dhcp_data(netif);
   13d8c:	6a41      	ldr	r1, [r0, #36]	; 0x24
  LWIP_ERROR("dhcp_bind: dhcp != NULL", (dhcp != NULL), return;);
   13d8e:	2900      	cmp	r1, #0
   13d90:	d072      	beq.n	13e78 <dhcp_bind+0xf0>
{
   13d92:	b510      	push	{r4, lr}
  if (dhcp->offered_t0_lease != 0xffffffffUL) {
   13d94:	6a8b      	ldr	r3, [r1, #40]	; 0x28
  dhcp->lease_used = 0;
   13d96:	2200      	movs	r2, #0
  if (dhcp->offered_t0_lease != 0xffffffffUL) {
   13d98:	1c5c      	adds	r4, r3, #1
{
   13d9a:	b082      	sub	sp, #8
  dhcp->lease_used = 0;
   13d9c:	824a      	strh	r2, [r1, #18]
  if (dhcp->offered_t0_lease != 0xffffffffUL) {
   13d9e:	d00b      	beq.n	13db8 <dhcp_bind+0x30>
    timeout = (dhcp->offered_t0_lease + DHCP_COARSE_TIMER_SECS / 2) / DHCP_COARSE_TIMER_SECS;
   13da0:	f1a2 3277 	sub.w	r2, r2, #2004318071	; 0x77777777
   13da4:	331e      	adds	r3, #30
   13da6:	fba2 2303 	umull	r2, r3, r2, r3
   13daa:	095b      	lsrs	r3, r3, #5
    if (timeout > 0xffff) {
   13dac:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
   13db0:	d244      	bcs.n	13e3c <dhcp_bind+0xb4>
    if (dhcp->t0_timeout == 0) {
   13db2:	b903      	cbnz	r3, 13db6 <dhcp_bind+0x2e>
      dhcp->t0_timeout = 1;
   13db4:	2301      	movs	r3, #1
   13db6:	828b      	strh	r3, [r1, #20]
  if (dhcp->offered_t1_renew != 0xffffffffUL) {
   13db8:	6acb      	ldr	r3, [r1, #44]	; 0x2c
   13dba:	1c5a      	adds	r2, r3, #1
   13dbc:	d044      	beq.n	13e48 <dhcp_bind+0xc0>
    timeout = (dhcp->offered_t1_renew + DHCP_COARSE_TIMER_SECS / 2) / DHCP_COARSE_TIMER_SECS;
   13dbe:	4a36      	ldr	r2, [pc, #216]	; (13e98 <dhcp_bind+0x110>)
   13dc0:	331e      	adds	r3, #30
   13dc2:	fba2 2303 	umull	r2, r3, r2, r3
   13dc6:	095b      	lsrs	r3, r3, #5
    if (timeout > 0xffff) {
   13dc8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
   13dcc:	d232      	bcs.n	13e34 <dhcp_bind+0xac>
    if (dhcp->t1_timeout == 0) {
   13dce:	2b00      	cmp	r3, #0
   13dd0:	d15b      	bne.n	13e8a <dhcp_bind+0x102>
      dhcp->t1_timeout = 1;
   13dd2:	2301      	movs	r3, #1
   13dd4:	814b      	strh	r3, [r1, #10]
  if (dhcp->offered_t2_rebind != 0xffffffffUL) {
   13dd6:	6b0a      	ldr	r2, [r1, #48]	; 0x30
    dhcp->t1_renew_time = dhcp->t1_timeout;
   13dd8:	81cb      	strh	r3, [r1, #14]
  if (dhcp->offered_t2_rebind != 0xffffffffUL) {
   13dda:	1c54      	adds	r4, r2, #1
   13ddc:	d038      	beq.n	13e50 <dhcp_bind+0xc8>
    timeout = (dhcp->offered_t2_rebind + DHCP_COARSE_TIMER_SECS / 2) / DHCP_COARSE_TIMER_SECS;
   13dde:	4c2e      	ldr	r4, [pc, #184]	; (13e98 <dhcp_bind+0x110>)
   13de0:	321e      	adds	r2, #30
   13de2:	fba4 4202 	umull	r4, r2, r4, r2
   13de6:	0952      	lsrs	r2, r2, #5
    if (timeout > 0xffff) {
   13de8:	f5b2 3f80 	cmp.w	r2, #65536	; 0x10000
   13dec:	d240      	bcs.n	13e70 <dhcp_bind+0xe8>
    if (dhcp->t2_timeout == 0) {
   13dee:	2a00      	cmp	r2, #0
   13df0:	d14e      	bne.n	13e90 <dhcp_bind+0x108>
      dhcp->t2_timeout = 1;
   13df2:	2201      	movs	r2, #1
   13df4:	818a      	strh	r2, [r1, #12]
  if ((dhcp->t1_timeout >= dhcp->t2_timeout) && (dhcp->t2_timeout > 0)) {
   13df6:	429a      	cmp	r2, r3
    dhcp->t2_rebind_time = dhcp->t2_timeout;
   13df8:	820a      	strh	r2, [r1, #16]
  if ((dhcp->t1_timeout >= dhcp->t2_timeout) && (dhcp->t2_timeout > 0)) {
   13dfa:	d92e      	bls.n	13e5a <dhcp_bind+0xd2>
  if (dhcp->subnet_mask_given) {
   13dfc:	79cb      	ldrb	r3, [r1, #7]
   13dfe:	2b00      	cmp	r3, #0
   13e00:	d030      	beq.n	13e64 <dhcp_bind+0xdc>
    ip4_addr_copy(sn_mask, dhcp->offered_sn_mask);
   13e02:	6a0b      	ldr	r3, [r1, #32]
   13e04:	9300      	str	r3, [sp, #0]
  ip4_addr_copy(gw_addr, dhcp->offered_gw_addr);
   13e06:	6a4a      	ldr	r2, [r1, #36]	; 0x24
   13e08:	9201      	str	r2, [sp, #4]
  if (ip4_addr_isany_val(gw_addr)) {
   13e0a:	b922      	cbnz	r2, 13e16 <dhcp_bind+0x8e>
    ip4_addr_get_network(&gw_addr, &dhcp->offered_ip_addr, &sn_mask);
   13e0c:	69ca      	ldr	r2, [r1, #28]
   13e0e:	4013      	ands	r3, r2
    ip4_addr_set_u32(&gw_addr, ip4_addr_get_u32(&gw_addr) | PP_HTONL(0x00000001UL));
   13e10:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
   13e14:	9301      	str	r3, [sp, #4]
  if (new_state != dhcp->state) {
   13e16:	794b      	ldrb	r3, [r1, #5]
   13e18:	2b0a      	cmp	r3, #10
   13e1a:	d004      	beq.n	13e26 <dhcp_bind+0x9e>
    dhcp->tries = 0;
   13e1c:	2300      	movs	r3, #0
    dhcp->state = new_state;
   13e1e:	220a      	movs	r2, #10
   13e20:	714a      	strb	r2, [r1, #5]
    dhcp->tries = 0;
   13e22:	718b      	strb	r3, [r1, #6]
    dhcp->request_timeout = 0;
   13e24:	810b      	strh	r3, [r1, #8]
  netif_set_addr(netif, &dhcp->offered_ip_addr, &sn_mask, &gw_addr);
   13e26:	311c      	adds	r1, #28
   13e28:	ab01      	add	r3, sp, #4
   13e2a:	466a      	mov	r2, sp
   13e2c:	f003 fa40 	bl	172b0 <netif_set_addr>
}
   13e30:	b002      	add	sp, #8
   13e32:	bd10      	pop	{r4, pc}
    dhcp->t1_timeout = (u16_t)timeout;
   13e34:	f64f 73ff 	movw	r3, #65535	; 0xffff
   13e38:	814b      	strh	r3, [r1, #10]
   13e3a:	e7cc      	b.n	13dd6 <dhcp_bind+0x4e>
    dhcp->t0_timeout = (u16_t)timeout;
   13e3c:	f64f 73ff 	movw	r3, #65535	; 0xffff
   13e40:	828b      	strh	r3, [r1, #20]
  if (dhcp->offered_t1_renew != 0xffffffffUL) {
   13e42:	6acb      	ldr	r3, [r1, #44]	; 0x2c
   13e44:	1c5a      	adds	r2, r3, #1
   13e46:	d1ba      	bne.n	13dbe <dhcp_bind+0x36>
  if (dhcp->offered_t2_rebind != 0xffffffffUL) {
   13e48:	6b0a      	ldr	r2, [r1, #48]	; 0x30
   13e4a:	894b      	ldrh	r3, [r1, #10]
   13e4c:	1c54      	adds	r4, r2, #1
   13e4e:	d1c6      	bne.n	13dde <dhcp_bind+0x56>
   13e50:	898a      	ldrh	r2, [r1, #12]
  if ((dhcp->t1_timeout >= dhcp->t2_timeout) && (dhcp->t2_timeout > 0)) {
   13e52:	4293      	cmp	r3, r2
   13e54:	d3d2      	bcc.n	13dfc <dhcp_bind+0x74>
   13e56:	2a00      	cmp	r2, #0
   13e58:	d0d0      	beq.n	13dfc <dhcp_bind+0x74>
    dhcp->t1_timeout = 0;
   13e5a:	2300      	movs	r3, #0
   13e5c:	814b      	strh	r3, [r1, #10]
  if (dhcp->subnet_mask_given) {
   13e5e:	79cb      	ldrb	r3, [r1, #7]
   13e60:	2b00      	cmp	r3, #0
   13e62:	d1ce      	bne.n	13e02 <dhcp_bind+0x7a>
    u8_t first_octet = ip4_addr1(&dhcp->offered_ip_addr);
   13e64:	7f0b      	ldrb	r3, [r1, #28]
    if (first_octet <= 127) {
   13e66:	061a      	lsls	r2, r3, #24
   13e68:	d407      	bmi.n	13e7a <dhcp_bind+0xf2>
      ip4_addr_set_u32(&sn_mask, PP_HTONL(0xff000000UL));
   13e6a:	23ff      	movs	r3, #255	; 0xff
   13e6c:	9300      	str	r3, [sp, #0]
   13e6e:	e7ca      	b.n	13e06 <dhcp_bind+0x7e>
    dhcp->t2_timeout = (u16_t)timeout;
   13e70:	f64f 72ff 	movw	r2, #65535	; 0xffff
   13e74:	818a      	strh	r2, [r1, #12]
   13e76:	e7be      	b.n	13df6 <dhcp_bind+0x6e>
   13e78:	4770      	bx	lr
    } else if (first_octet >= 192) {
   13e7a:	2bbf      	cmp	r3, #191	; 0xbf
      ip4_addr_set_u32(&sn_mask, PP_HTONL(0xffffff00UL));
   13e7c:	bf8c      	ite	hi
   13e7e:	f06f 437f 	mvnhi.w	r3, #4278190080	; 0xff000000
      ip4_addr_set_u32(&sn_mask, PP_HTONL(0xffff0000UL));
   13e82:	f64f 73ff 	movwls	r3, #65535	; 0xffff
   13e86:	9300      	str	r3, [sp, #0]
   13e88:	e7bd      	b.n	13e06 <dhcp_bind+0x7e>
    dhcp->t1_timeout = (u16_t)timeout;
   13e8a:	b29b      	uxth	r3, r3
   13e8c:	814b      	strh	r3, [r1, #10]
   13e8e:	e7a2      	b.n	13dd6 <dhcp_bind+0x4e>
    dhcp->t2_timeout = (u16_t)timeout;
   13e90:	b292      	uxth	r2, r2
   13e92:	818a      	strh	r2, [r1, #12]
   13e94:	e7af      	b.n	13df6 <dhcp_bind+0x6e>
   13e96:	bf00      	nop
   13e98:	88888889 	.word	0x88888889

00013e9c <dhcp_handle_ack.isra.2>:
dhcp_handle_ack(struct netif *netif, struct dhcp_msg *msg_in)
   13e9c:	b570      	push	{r4, r5, r6, lr}
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_LEASE_TIME)) {
   13e9e:	4d25      	ldr	r5, [pc, #148]	; (13f34 <dhcp_handle_ack.isra.2+0x98>)
   13ea0:	78ea      	ldrb	r2, [r5, #3]
  ip4_addr_set_zero(&dhcp->offered_sn_mask);
   13ea2:	2300      	movs	r3, #0
dhcp_handle_ack(struct netif *netif, struct dhcp_msg *msg_in)
   13ea4:	b082      	sub	sp, #8
   13ea6:	4604      	mov	r4, r0
  ip4_addr_set_zero(&dhcp->offered_sn_mask);
   13ea8:	6203      	str	r3, [r0, #32]
  ip4_addr_set_zero(&dhcp->offered_gw_addr);
   13eaa:	6243      	str	r3, [r0, #36]	; 0x24
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_LEASE_TIME)) {
   13eac:	b112      	cbz	r2, 13eb4 <dhcp_handle_ack.isra.2+0x18>
    dhcp->offered_t0_lease = dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_LEASE_TIME);
   13eae:	4b22      	ldr	r3, [pc, #136]	; (13f38 <dhcp_handle_ack.isra.2+0x9c>)
   13eb0:	68db      	ldr	r3, [r3, #12]
   13eb2:	6283      	str	r3, [r0, #40]	; 0x28
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_T1)) {
   13eb4:	792b      	ldrb	r3, [r5, #4]
   13eb6:	b113      	cbz	r3, 13ebe <dhcp_handle_ack.isra.2+0x22>
    dhcp->offered_t1_renew = dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_T1);
   13eb8:	4b1f      	ldr	r3, [pc, #124]	; (13f38 <dhcp_handle_ack.isra.2+0x9c>)
   13eba:	691b      	ldr	r3, [r3, #16]
   13ebc:	e001      	b.n	13ec2 <dhcp_handle_ack.isra.2+0x26>
    dhcp->offered_t1_renew = dhcp->offered_t0_lease / 2;
   13ebe:	6aa3      	ldr	r3, [r4, #40]	; 0x28
   13ec0:	085b      	lsrs	r3, r3, #1
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_T2)) {
   13ec2:	796a      	ldrb	r2, [r5, #5]
   13ec4:	62e3      	str	r3, [r4, #44]	; 0x2c
   13ec6:	b112      	cbz	r2, 13ece <dhcp_handle_ack.isra.2+0x32>
    dhcp->offered_t2_rebind = dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_T2);
   13ec8:	4b1b      	ldr	r3, [pc, #108]	; (13f38 <dhcp_handle_ack.isra.2+0x9c>)
   13eca:	695b      	ldr	r3, [r3, #20]
   13ecc:	e003      	b.n	13ed6 <dhcp_handle_ack.isra.2+0x3a>
    dhcp->offered_t2_rebind = (dhcp->offered_t0_lease * 7U) / 8U;
   13ece:	6aa3      	ldr	r3, [r4, #40]	; 0x28
   13ed0:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
   13ed4:	08db      	lsrs	r3, r3, #3
   13ed6:	6323      	str	r3, [r4, #48]	; 0x30
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_SUBNET_MASK)) {
   13ed8:	79ab      	ldrb	r3, [r5, #6]
  ip4_addr_copy(dhcp->offered_ip_addr, msg_in->yiaddr);
   13eda:	690a      	ldr	r2, [r1, #16]
   13edc:	61e2      	str	r2, [r4, #28]
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_SUBNET_MASK)) {
   13ede:	b13b      	cbz	r3, 13ef0 <dhcp_handle_ack.isra.2+0x54>
    ip4_addr_set_u32(&dhcp->offered_sn_mask, lwip_htonl(dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_SUBNET_MASK)));
   13ee0:	4b15      	ldr	r3, [pc, #84]	; (13f38 <dhcp_handle_ack.isra.2+0x9c>)
   13ee2:	6998      	ldr	r0, [r3, #24]
   13ee4:	f7ff fc0c 	bl	13700 <lwip_htonl>
    dhcp->subnet_mask_given = 1;
   13ee8:	2301      	movs	r3, #1
    ip4_addr_set_u32(&dhcp->offered_sn_mask, lwip_htonl(dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_SUBNET_MASK)));
   13eea:	6220      	str	r0, [r4, #32]
    dhcp->subnet_mask_given = 1;
   13eec:	71e3      	strb	r3, [r4, #7]
   13eee:	e000      	b.n	13ef2 <dhcp_handle_ack.isra.2+0x56>
    dhcp->subnet_mask_given = 0;
   13ef0:	71e3      	strb	r3, [r4, #7]
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_ROUTER)) {
   13ef2:	79eb      	ldrb	r3, [r5, #7]
   13ef4:	b123      	cbz	r3, 13f00 <dhcp_handle_ack.isra.2+0x64>
    ip4_addr_set_u32(&dhcp->offered_gw_addr, lwip_htonl(dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_ROUTER)));
   13ef6:	4b10      	ldr	r3, [pc, #64]	; (13f38 <dhcp_handle_ack.isra.2+0x9c>)
   13ef8:	69d8      	ldr	r0, [r3, #28]
   13efa:	f7ff fc01 	bl	13700 <lwip_htonl>
   13efe:	6260      	str	r0, [r4, #36]	; 0x24
  for (n = 0; (n < LWIP_DHCP_PROVIDE_DNS_SERVERS) && dhcp_option_given(dhcp, DHCP_OPTION_IDX_DNS_SERVER + n); n++) {
   13f00:	7a2b      	ldrb	r3, [r5, #8]
   13f02:	b1a3      	cbz	r3, 13f2e <dhcp_handle_ack.isra.2+0x92>
    ip_addr_set_ip4_u32_val(dns_addr, lwip_htonl(dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_DNS_SERVER + n)));
   13f04:	4e0c      	ldr	r6, [pc, #48]	; (13f38 <dhcp_handle_ack.isra.2+0x9c>)
   13f06:	6a30      	ldr	r0, [r6, #32]
   13f08:	f7ff fbfa 	bl	13700 <lwip_htonl>
   13f0c:	ac02      	add	r4, sp, #8
   13f0e:	f844 0d04 	str.w	r0, [r4, #-4]!
    dns_setserver(n, &dns_addr);
   13f12:	2000      	movs	r0, #0
   13f14:	4621      	mov	r1, r4
   13f16:	f7ff fe61 	bl	13bdc <dns_setserver>
  for (n = 0; (n < LWIP_DHCP_PROVIDE_DNS_SERVERS) && dhcp_option_given(dhcp, DHCP_OPTION_IDX_DNS_SERVER + n); n++) {
   13f1a:	7a6b      	ldrb	r3, [r5, #9]
   13f1c:	b13b      	cbz	r3, 13f2e <dhcp_handle_ack.isra.2+0x92>
    ip_addr_set_ip4_u32_val(dns_addr, lwip_htonl(dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_DNS_SERVER + n)));
   13f1e:	6a70      	ldr	r0, [r6, #36]	; 0x24
   13f20:	f7ff fbee 	bl	13700 <lwip_htonl>
    dns_setserver(n, &dns_addr);
   13f24:	4621      	mov	r1, r4
    ip_addr_set_ip4_u32_val(dns_addr, lwip_htonl(dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_DNS_SERVER + n)));
   13f26:	9001      	str	r0, [sp, #4]
    dns_setserver(n, &dns_addr);
   13f28:	2001      	movs	r0, #1
   13f2a:	f7ff fe57 	bl	13bdc <dns_setserver>
}
   13f2e:	b002      	add	sp, #8
   13f30:	bd70      	pop	{r4, r5, r6, pc}
   13f32:	bf00      	nop
   13f34:	20002a54 	.word	0x20002a54
   13f38:	20002a60 	.word	0x20002a60

00013f3c <dhcp_reboot>:
{
   13f3c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  struct dhcp *dhcp = netif_dhcp_data(netif);
   13f40:	6a45      	ldr	r5, [r0, #36]	; 0x24
  if (new_state != dhcp->state) {
   13f42:	796b      	ldrb	r3, [r5, #5]
   13f44:	2b03      	cmp	r3, #3
{
   13f46:	b084      	sub	sp, #16
   13f48:	4607      	mov	r7, r0
  if (new_state != dhcp->state) {
   13f4a:	d004      	beq.n	13f56 <dhcp_reboot+0x1a>
    dhcp->tries = 0;
   13f4c:	2300      	movs	r3, #0
    dhcp->state = new_state;
   13f4e:	2203      	movs	r2, #3
   13f50:	716a      	strb	r2, [r5, #5]
    dhcp->tries = 0;
   13f52:	71ab      	strb	r3, [r5, #6]
    dhcp->request_timeout = 0;
   13f54:	812b      	strh	r3, [r5, #8]
  p_out = dhcp_create_msg(netif, dhcp, DHCP_REQUEST, &options_out_len);
   13f56:	f10d 030e 	add.w	r3, sp, #14
   13f5a:	2203      	movs	r2, #3
   13f5c:	4629      	mov	r1, r5
   13f5e:	4638      	mov	r0, r7
   13f60:	f7ff fe74 	bl	13c4c <dhcp_create_msg>
  if (p_out != NULL) {
   13f64:	4606      	mov	r6, r0
   13f66:	2800      	cmp	r0, #0
   13f68:	f000 80b3 	beq.w	140d2 <dhcp_reboot+0x196>
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
   13f6c:	f8bd 400e 	ldrh.w	r4, [sp, #14]
   13f70:	6843      	ldr	r3, [r0, #4]
  options[options_out_len++] = option_type;
   13f72:	f104 0e01 	add.w	lr, r4, #1
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
   13f76:	f103 08f0 	add.w	r8, r3, #240	; 0xf0
  options[options_out_len++] = option_len;
   13f7a:	1ca0      	adds	r0, r4, #2
  options[options_out_len++] = (u8_t)((value & 0xff00U) >> 8);
   13f7c:	1ce1      	adds	r1, r4, #3
  options[options_out_len++] = (u8_t) (value & 0x00ffU);
   13f7e:	1d22      	adds	r2, r4, #4
  options[options_out_len++] = option_len;
   13f80:	fa1f fe8e 	uxth.w	lr, lr
  options[options_out_len++] = (u8_t)((value & 0xff00U) >> 8);
   13f84:	b280      	uxth	r0, r0
  options[options_out_len++] = option_type;
   13f86:	1d63      	adds	r3, r4, #5
   13f88:	f04f 0c39 	mov.w	ip, #57	; 0x39
   13f8c:	f808 c004 	strb.w	ip, [r8, r4]
  options[options_out_len++] = (u8_t) (value & 0x00ffU);
   13f90:	b289      	uxth	r1, r1
  options[options_out_len++] = option_len;
   13f92:	f04f 0c02 	mov.w	ip, #2
  options[options_out_len++] = option_type;
   13f96:	b292      	uxth	r2, r2
  options[options_out_len++] = option_len;
   13f98:	b29b      	uxth	r3, r3
   13f9a:	f808 c00e 	strb.w	ip, [r8, lr]
   13f9e:	f04f 0a04 	mov.w	sl, #4
  options[options_out_len++] = (u8_t)((value & 0xff00U) >> 8);
   13fa2:	f808 c000 	strb.w	ip, [r8, r0]
  options[options_out_len++] = (u8_t) (value & 0x00ffU);
   13fa6:	f04f 0e40 	mov.w	lr, #64	; 0x40
  options[options_out_len++] = option_type;
   13faa:	2032      	movs	r0, #50	; 0x32
  options[options_out_len++] = (u8_t) (value & 0x00ffU);
   13fac:	f808 e001 	strb.w	lr, [r8, r1]
  options[options_out_len++] = option_type;
   13fb0:	f808 0002 	strb.w	r0, [r8, r2]
  options[options_out_len++] = option_len;
   13fb4:	f808 a003 	strb.w	sl, [r8, r3]
   13fb8:	f104 0906 	add.w	r9, r4, #6
   13fbc:	fa1f f989 	uxth.w	r9, r9
    options_out_len = dhcp_option_long(options_out_len, msg_out->options, lwip_ntohl(ip4_addr_get_u32(&dhcp->offered_ip_addr)));
   13fc0:	69e8      	ldr	r0, [r5, #28]
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_REQUESTED_IP, 4);
   13fc2:	f8ad 900e 	strh.w	r9, [sp, #14]
    options_out_len = dhcp_option_long(options_out_len, msg_out->options, lwip_ntohl(ip4_addr_get_u32(&dhcp->offered_ip_addr)));
   13fc6:	f7ff fb9b 	bl	13700 <lwip_htonl>
  options[options_out_len++] = (u8_t)((value & 0xff000000UL) >> 24);
   13fca:	1de2      	adds	r2, r4, #7
  options[options_out_len++] = (u8_t)((value & 0x00ff0000UL) >> 16);
   13fcc:	b292      	uxth	r2, r2
   13fce:	f104 0308 	add.w	r3, r4, #8
  options[options_out_len++] = (u8_t)((value & 0xff000000UL) >> 24);
   13fd2:	0e01      	lsrs	r1, r0, #24
  options[options_out_len++] = (u8_t)((value & 0x00ff0000UL) >> 16);
   13fd4:	ea4f 4e10 	mov.w	lr, r0, lsr #16
  options[options_out_len++] = (u8_t)((value & 0x0000ff00UL) >> 8);
   13fd8:	b29b      	uxth	r3, r3
  options[options_out_len++] = (u8_t)((value & 0xff000000UL) >> 24);
   13fda:	f808 1009 	strb.w	r1, [r8, r9]
  options[options_out_len++] = (u8_t)((value & 0x00ff0000UL) >> 16);
   13fde:	f808 e002 	strb.w	lr, [r8, r2]
  options[options_out_len++] = (u8_t)((value & 0x0000ff00UL) >> 8);
   13fe2:	f104 0109 	add.w	r1, r4, #9
   13fe6:	ea4f 2e10 	mov.w	lr, r0, lsr #8
   13fea:	f808 e003 	strb.w	lr, [r8, r3]
  options[options_out_len++] = (u8_t)((value & 0x000000ffUL));
   13fee:	b289      	uxth	r1, r1
   13ff0:	f104 020a 	add.w	r2, r4, #10
  options[options_out_len++] = option_type;
   13ff4:	f104 030b 	add.w	r3, r4, #11
   13ff8:	b292      	uxth	r2, r2
  options[options_out_len++] = option_len;
   13ffa:	b29b      	uxth	r3, r3
   13ffc:	f104 0e0c 	add.w	lr, r4, #12
  options[options_out_len++] = (u8_t)((value & 0x000000ffUL));
   14000:	f808 0001 	strb.w	r0, [r8, r1]
  options[options_out_len++] = value;
   14004:	fa1f fe8e 	uxth.w	lr, lr
   14008:	f104 000d 	add.w	r0, r4, #13
  options[options_out_len++] = option_type;
   1400c:	2137      	movs	r1, #55	; 0x37
   1400e:	f808 1002 	strb.w	r1, [r8, r2]
  options[options_out_len++] = value;
   14012:	f104 0c10 	add.w	ip, r4, #16
  options[options_out_len++] = option_len;
   14016:	f808 a003 	strb.w	sl, [r8, r3]
  options[options_out_len++] = value;
   1401a:	b280      	uxth	r0, r0
   1401c:	f104 010e 	add.w	r1, r4, #14
   14020:	f104 020f 	add.w	r2, r4, #15
 * necessary, up to three padding bytes.
 */
static void
dhcp_option_trailer(u16_t options_out_len, u8_t *options, struct pbuf *p_out)
{
  options[options_out_len++] = DHCP_OPTION_END;
   14024:	f104 0311 	add.w	r3, r4, #17
  options[options_out_len++] = value;
   14028:	2401      	movs	r4, #1
   1402a:	f808 400e 	strb.w	r4, [r8, lr]
   1402e:	b289      	uxth	r1, r1
   14030:	2403      	movs	r4, #3
   14032:	f808 4000 	strb.w	r4, [r8, r0]
   14036:	b292      	uxth	r2, r2
   14038:	241c      	movs	r4, #28
  options[options_out_len++] = DHCP_OPTION_END;
   1403a:	b29b      	uxth	r3, r3
   1403c:	fa1f f08c 	uxth.w	r0, ip
  options[options_out_len++] = value;
   14040:	f808 4001 	strb.w	r4, [r8, r1]
  /* packet is too small, or not 4 byte aligned? */
  while (((options_out_len < DHCP_MIN_OPTIONS_LEN) || (options_out_len & 3)) &&
   14044:	2b43      	cmp	r3, #67	; 0x43
  options[options_out_len++] = value;
   14046:	f04f 0406 	mov.w	r4, #6
  options[options_out_len++] = DHCP_OPTION_END;
   1404a:	f04f 01ff 	mov.w	r1, #255	; 0xff
  options[options_out_len++] = value;
   1404e:	f808 4002 	strb.w	r4, [r8, r2]
      options_out_len = dhcp_option_byte(options_out_len, msg_out->options, dhcp_discover_request_options[i]);
   14052:	f8ad c00e 	strh.w	ip, [sp, #14]
  options[options_out_len++] = DHCP_OPTION_END;
   14056:	f808 1000 	strb.w	r1, [r8, r0]
  while (((options_out_len < DHCP_MIN_OPTIONS_LEN) || (options_out_len & 3)) &&
   1405a:	d83d      	bhi.n	140d8 <dhcp_reboot+0x19c>
         (options_out_len < DHCP_OPTIONS_LEN)) {
    /* add a fill/padding byte */
    options[options_out_len++] = 0;
   1405c:	2100      	movs	r1, #0
   1405e:	1c5a      	adds	r2, r3, #1
   14060:	b292      	uxth	r2, r2
  while (((options_out_len < DHCP_MIN_OPTIONS_LEN) || (options_out_len & 3)) &&
   14062:	2a44      	cmp	r2, #68	; 0x44
    options[options_out_len++] = 0;
   14064:	f808 1003 	strb.w	r1, [r8, r3]
   14068:	4613      	mov	r3, r2
  while (((options_out_len < DHCP_MIN_OPTIONS_LEN) || (options_out_len & 3)) &&
   1406a:	d1f8      	bne.n	1405e <dhcp_reboot+0x122>
  }
  /* shrink the pbuf to the actual content length */
  pbuf_realloc(p_out, (u16_t)(sizeof(struct dhcp_msg) - DHCP_OPTIONS_LEN + options_out_len));
   1406c:	32f0      	adds	r2, #240	; 0xf0
   1406e:	b291      	uxth	r1, r2
   14070:	4630      	mov	r0, r6
   14072:	f003 faf1 	bl	17658 <pbuf_realloc>
    result = udp_sendto_if(dhcp_pcb, p_out, IP_ADDR_BROADCAST, LWIP_IANA_PORT_DHCP_SERVER, netif);
   14076:	4b19      	ldr	r3, [pc, #100]	; (140dc <dhcp_reboot+0x1a0>)
   14078:	9700      	str	r7, [sp, #0]
   1407a:	6858      	ldr	r0, [r3, #4]
   1407c:	4a18      	ldr	r2, [pc, #96]	; (140e0 <dhcp_reboot+0x1a4>)
   1407e:	2343      	movs	r3, #67	; 0x43
   14080:	4631      	mov	r1, r6
   14082:	f007 fa27 	bl	1b4d4 <udp_sendto_if>
   14086:	4604      	mov	r4, r0
    pbuf_free(p_out);
   14088:	4630      	mov	r0, r6
   1408a:	f003 fbaf 	bl	177ec <pbuf_free>
  if (dhcp->tries < 255) {
   1408e:	79ab      	ldrb	r3, [r5, #6]
   14090:	2bff      	cmp	r3, #255	; 0xff
   14092:	d018      	beq.n	140c6 <dhcp_reboot+0x18a>
    dhcp->tries++;
   14094:	3301      	adds	r3, #1
   14096:	b2db      	uxtb	r3, r3
  msecs = (u16_t)(dhcp->tries < 10 ? dhcp->tries * 1000 : 10 * 1000);
   14098:	2b09      	cmp	r3, #9
    dhcp->tries++;
   1409a:	71ab      	strb	r3, [r5, #6]
  msecs = (u16_t)(dhcp->tries < 10 ? dhcp->tries * 1000 : 10 * 1000);
   1409c:	d813      	bhi.n	140c6 <dhcp_reboot+0x18a>
   1409e:	ebc3 1243 	rsb	r2, r3, r3, lsl #5
   140a2:	eb03 0382 	add.w	r3, r3, r2, lsl #2
   140a6:	00db      	lsls	r3, r3, #3
   140a8:	b29b      	uxth	r3, r3
   140aa:	4a0e      	ldr	r2, [pc, #56]	; (140e4 <dhcp_reboot+0x1a8>)
   140ac:	f203 13f3 	addw	r3, r3, #499	; 0x1f3
   140b0:	fb82 1203 	smull	r1, r2, r2, r3
   140b4:	17db      	asrs	r3, r3, #31
   140b6:	ebc3 1362 	rsb	r3, r3, r2, asr #5
   140ba:	b29b      	uxth	r3, r3
}
   140bc:	4620      	mov	r0, r4
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
   140be:	812b      	strh	r3, [r5, #8]
}
   140c0:	b004      	add	sp, #16
   140c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    result = ERR_MEM;
   140c6:	2314      	movs	r3, #20
}
   140c8:	4620      	mov	r0, r4
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
   140ca:	812b      	strh	r3, [r5, #8]
}
   140cc:	b004      	add	sp, #16
   140ce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    result = ERR_MEM;
   140d2:	f04f 34ff 	mov.w	r4, #4294967295
   140d6:	e7da      	b.n	1408e <dhcp_reboot+0x152>
  while (((options_out_len < DHCP_MIN_OPTIONS_LEN) || (options_out_len & 3)) &&
   140d8:	461a      	mov	r2, r3
   140da:	e7c7      	b.n	1406c <dhcp_reboot+0x130>
   140dc:	200027b8 	.word	0x200027b8
   140e0:	0002d588 	.word	0x0002d588
   140e4:	10624dd3 	.word	0x10624dd3

000140e8 <dhcp_select>:
{
   140e8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   140ec:	b084      	sub	sp, #16
  LWIP_ERROR("dhcp_select: netif != NULL", (netif != NULL), return ERR_ARG;);
   140ee:	2800      	cmp	r0, #0
   140f0:	f000 80f4 	beq.w	142dc <dhcp_select+0x1f4>
  dhcp = netif_dhcp_data(netif);
   140f4:	6a45      	ldr	r5, [r0, #36]	; 0x24
  LWIP_ERROR("dhcp_select: dhcp != NULL", (dhcp != NULL), return ERR_VAL;);
   140f6:	2d00      	cmp	r5, #0
   140f8:	f000 80ed 	beq.w	142d6 <dhcp_select+0x1ee>
  if (new_state != dhcp->state) {
   140fc:	796b      	ldrb	r3, [r5, #5]
   140fe:	2b01      	cmp	r3, #1
   14100:	d004      	beq.n	1410c <dhcp_select+0x24>
    dhcp->tries = 0;
   14102:	2300      	movs	r3, #0
    dhcp->state = new_state;
   14104:	2201      	movs	r2, #1
   14106:	716a      	strb	r2, [r5, #5]
    dhcp->tries = 0;
   14108:	71ab      	strb	r3, [r5, #6]
    dhcp->request_timeout = 0;
   1410a:	812b      	strh	r3, [r5, #8]
  p_out = dhcp_create_msg(netif, dhcp, DHCP_REQUEST, &options_out_len);
   1410c:	f10d 030e 	add.w	r3, sp, #14
   14110:	2203      	movs	r2, #3
   14112:	4629      	mov	r1, r5
   14114:	4606      	mov	r6, r0
   14116:	f7ff fd99 	bl	13c4c <dhcp_create_msg>
  if (p_out != NULL) {
   1411a:	4607      	mov	r7, r0
   1411c:	2800      	cmp	r0, #0
   1411e:	f000 80bc 	beq.w	1429a <dhcp_select+0x1b2>
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
   14122:	f8bd 400e 	ldrh.w	r4, [sp, #14]
   14126:	6842      	ldr	r2, [r0, #4]
  options[options_out_len++] = option_type;
   14128:	1c63      	adds	r3, r4, #1
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
   1412a:	f102 08f0 	add.w	r8, r2, #240	; 0xf0
  options[options_out_len++] = option_len;
   1412e:	b29b      	uxth	r3, r3
   14130:	2202      	movs	r2, #2
  options[options_out_len++] = option_type;
   14132:	2139      	movs	r1, #57	; 0x39
   14134:	f808 1004 	strb.w	r1, [r8, r4]
  options[options_out_len++] = option_len;
   14138:	f808 2003 	strb.w	r2, [r8, r3]
   1413c:	18a0      	adds	r0, r4, r2
    options_out_len = dhcp_option_short(options_out_len, msg_out->options, DHCP_MAX_MSG_LEN(netif));
   1413e:	f8b6 e02c 	ldrh.w	lr, [r6, #44]	; 0x2c
  options[options_out_len++] = (u8_t)((value & 0xff00U) >> 8);
   14142:	1ce1      	adds	r1, r4, #3
  options[options_out_len++] = (u8_t) (value & 0x00ffU);
   14144:	1d22      	adds	r2, r4, #4
  options[options_out_len++] = (u8_t)((value & 0xff00U) >> 8);
   14146:	b280      	uxth	r0, r0
  options[options_out_len++] = option_type;
   14148:	1d63      	adds	r3, r4, #5
  options[options_out_len++] = (u8_t)((value & 0xff00U) >> 8);
   1414a:	ea4f 2c1e 	mov.w	ip, lr, lsr #8
  options[options_out_len++] = (u8_t) (value & 0x00ffU);
   1414e:	b289      	uxth	r1, r1
  options[options_out_len++] = option_type;
   14150:	b292      	uxth	r2, r2
  options[options_out_len++] = option_len;
   14152:	b29b      	uxth	r3, r3
  options[options_out_len++] = (u8_t)((value & 0xff00U) >> 8);
   14154:	f808 c000 	strb.w	ip, [r8, r0]
  options[options_out_len++] = option_len;
   14158:	f04f 0a04 	mov.w	sl, #4
  options[options_out_len++] = option_type;
   1415c:	2032      	movs	r0, #50	; 0x32
  options[options_out_len++] = (u8_t) (value & 0x00ffU);
   1415e:	f808 e001 	strb.w	lr, [r8, r1]
  options[options_out_len++] = option_type;
   14162:	f808 0002 	strb.w	r0, [r8, r2]
  options[options_out_len++] = option_len;
   14166:	f808 a003 	strb.w	sl, [r8, r3]
   1416a:	f104 0906 	add.w	r9, r4, #6
   1416e:	fa1f f989 	uxth.w	r9, r9
    options_out_len = dhcp_option_long(options_out_len, msg_out->options, lwip_ntohl(ip4_addr_get_u32(&dhcp->offered_ip_addr)));
   14172:	69e8      	ldr	r0, [r5, #28]
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_REQUESTED_IP, 4);
   14174:	f8ad 900e 	strh.w	r9, [sp, #14]
    options_out_len = dhcp_option_long(options_out_len, msg_out->options, lwip_ntohl(ip4_addr_get_u32(&dhcp->offered_ip_addr)));
   14178:	f7ff fac2 	bl	13700 <lwip_htonl>
  options[options_out_len++] = (u8_t)((value & 0xff000000UL) >> 24);
   1417c:	1de2      	adds	r2, r4, #7
  options[options_out_len++] = (u8_t)((value & 0x00ff0000UL) >> 16);
   1417e:	b292      	uxth	r2, r2
   14180:	f104 0308 	add.w	r3, r4, #8
  options[options_out_len++] = (u8_t)((value & 0xff000000UL) >> 24);
   14184:	0e01      	lsrs	r1, r0, #24
  options[options_out_len++] = (u8_t)((value & 0x00ff0000UL) >> 16);
   14186:	ea4f 4e10 	mov.w	lr, r0, lsr #16
  options[options_out_len++] = (u8_t)((value & 0x0000ff00UL) >> 8);
   1418a:	b29b      	uxth	r3, r3
  options[options_out_len++] = (u8_t)((value & 0xff000000UL) >> 24);
   1418c:	f808 1009 	strb.w	r1, [r8, r9]
  options[options_out_len++] = (u8_t)((value & 0x00ff0000UL) >> 16);
   14190:	f808 e002 	strb.w	lr, [r8, r2]
  options[options_out_len++] = (u8_t)((value & 0x0000ff00UL) >> 8);
   14194:	f104 0109 	add.w	r1, r4, #9
   14198:	ea4f 2e10 	mov.w	lr, r0, lsr #8
   1419c:	f808 e003 	strb.w	lr, [r8, r3]
  options[options_out_len++] = (u8_t)((value & 0x000000ffUL));
   141a0:	b289      	uxth	r1, r1
   141a2:	f104 020a 	add.w	r2, r4, #10
  options[options_out_len++] = option_type;
   141a6:	f104 030b 	add.w	r3, r4, #11
   141aa:	b292      	uxth	r2, r2
  options[options_out_len++] = option_len;
   141ac:	b29b      	uxth	r3, r3
  options[options_out_len++] = (u8_t)((value & 0x000000ffUL));
   141ae:	f808 0001 	strb.w	r0, [r8, r1]
  options[options_out_len++] = option_type;
   141b2:	2136      	movs	r1, #54	; 0x36
   141b4:	f808 1002 	strb.w	r1, [r8, r2]
  options[options_out_len++] = option_len;
   141b8:	f808 a003 	strb.w	sl, [r8, r3]
   141bc:	f104 090c 	add.w	r9, r4, #12
   141c0:	fa1f f989 	uxth.w	r9, r9
    options_out_len = dhcp_option_long(options_out_len, msg_out->options, lwip_ntohl(ip4_addr_get_u32(ip_2_ip4(&dhcp->server_ip_addr))));
   141c4:	69a8      	ldr	r0, [r5, #24]
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_SERVER_ID, 4);
   141c6:	f8ad 900e 	strh.w	r9, [sp, #14]
    options_out_len = dhcp_option_long(options_out_len, msg_out->options, lwip_ntohl(ip4_addr_get_u32(ip_2_ip4(&dhcp->server_ip_addr))));
   141ca:	f7ff fa99 	bl	13700 <lwip_htonl>
  options[options_out_len++] = (u8_t)((value & 0xff000000UL) >> 24);
   141ce:	f104 020d 	add.w	r2, r4, #13
  options[options_out_len++] = (u8_t)((value & 0x00ff0000UL) >> 16);
   141d2:	b292      	uxth	r2, r2
   141d4:	f104 030e 	add.w	r3, r4, #14
  options[options_out_len++] = (u8_t)((value & 0xff000000UL) >> 24);
   141d8:	0e01      	lsrs	r1, r0, #24
  options[options_out_len++] = (u8_t)((value & 0x00ff0000UL) >> 16);
   141da:	ea4f 4e10 	mov.w	lr, r0, lsr #16
  options[options_out_len++] = (u8_t)((value & 0x0000ff00UL) >> 8);
   141de:	b29b      	uxth	r3, r3
  options[options_out_len++] = (u8_t)((value & 0xff000000UL) >> 24);
   141e0:	f808 1009 	strb.w	r1, [r8, r9]
  options[options_out_len++] = (u8_t)((value & 0x00ff0000UL) >> 16);
   141e4:	f808 e002 	strb.w	lr, [r8, r2]
  options[options_out_len++] = (u8_t)((value & 0x0000ff00UL) >> 8);
   141e8:	f104 010f 	add.w	r1, r4, #15
   141ec:	ea4f 2e10 	mov.w	lr, r0, lsr #8
   141f0:	f808 e003 	strb.w	lr, [r8, r3]
  options[options_out_len++] = (u8_t)((value & 0x000000ffUL));
   141f4:	b289      	uxth	r1, r1
   141f6:	f104 0210 	add.w	r2, r4, #16
  options[options_out_len++] = option_type;
   141fa:	f104 0311 	add.w	r3, r4, #17
   141fe:	b292      	uxth	r2, r2
  options[options_out_len++] = option_len;
   14200:	b29b      	uxth	r3, r3
   14202:	f104 0e12 	add.w	lr, r4, #18
  options[options_out_len++] = (u8_t)((value & 0x000000ffUL));
   14206:	f808 0001 	strb.w	r0, [r8, r1]
  options[options_out_len++] = value;
   1420a:	fa1f fe8e 	uxth.w	lr, lr
   1420e:	f104 0013 	add.w	r0, r4, #19
  options[options_out_len++] = option_type;
   14212:	2137      	movs	r1, #55	; 0x37
   14214:	f808 1002 	strb.w	r1, [r8, r2]
  options[options_out_len++] = value;
   14218:	f104 0c16 	add.w	ip, r4, #22
  options[options_out_len++] = option_len;
   1421c:	f808 a003 	strb.w	sl, [r8, r3]
  options[options_out_len++] = value;
   14220:	b280      	uxth	r0, r0
   14222:	f104 0114 	add.w	r1, r4, #20
   14226:	f104 0215 	add.w	r2, r4, #21
  options[options_out_len++] = DHCP_OPTION_END;
   1422a:	f104 0317 	add.w	r3, r4, #23
  options[options_out_len++] = value;
   1422e:	2401      	movs	r4, #1
   14230:	f808 400e 	strb.w	r4, [r8, lr]
   14234:	b289      	uxth	r1, r1
   14236:	2403      	movs	r4, #3
   14238:	f808 4000 	strb.w	r4, [r8, r0]
   1423c:	b292      	uxth	r2, r2
   1423e:	241c      	movs	r4, #28
  options[options_out_len++] = DHCP_OPTION_END;
   14240:	b29b      	uxth	r3, r3
   14242:	fa1f f08c 	uxth.w	r0, ip
  options[options_out_len++] = value;
   14246:	f808 4001 	strb.w	r4, [r8, r1]
  while (((options_out_len < DHCP_MIN_OPTIONS_LEN) || (options_out_len & 3)) &&
   1424a:	2b43      	cmp	r3, #67	; 0x43
  options[options_out_len++] = value;
   1424c:	f04f 0406 	mov.w	r4, #6
  options[options_out_len++] = DHCP_OPTION_END;
   14250:	f04f 01ff 	mov.w	r1, #255	; 0xff
  options[options_out_len++] = value;
   14254:	f808 4002 	strb.w	r4, [r8, r2]
      options_out_len = dhcp_option_byte(options_out_len, msg_out->options, dhcp_discover_request_options[i]);
   14258:	f8ad c00e 	strh.w	ip, [sp, #14]
  options[options_out_len++] = DHCP_OPTION_END;
   1425c:	f808 1000 	strb.w	r1, [r8, r0]
  while (((options_out_len < DHCP_MIN_OPTIONS_LEN) || (options_out_len & 3)) &&
   14260:	d83f      	bhi.n	142e2 <dhcp_select+0x1fa>
    options[options_out_len++] = 0;
   14262:	2100      	movs	r1, #0
   14264:	1c5a      	adds	r2, r3, #1
   14266:	b292      	uxth	r2, r2
  while (((options_out_len < DHCP_MIN_OPTIONS_LEN) || (options_out_len & 3)) &&
   14268:	2a44      	cmp	r2, #68	; 0x44
    options[options_out_len++] = 0;
   1426a:	f808 1003 	strb.w	r1, [r8, r3]
   1426e:	4613      	mov	r3, r2
  while (((options_out_len < DHCP_MIN_OPTIONS_LEN) || (options_out_len & 3)) &&
   14270:	d1f8      	bne.n	14264 <dhcp_select+0x17c>
  pbuf_realloc(p_out, (u16_t)(sizeof(struct dhcp_msg) - DHCP_OPTIONS_LEN + options_out_len));
   14272:	32f0      	adds	r2, #240	; 0xf0
   14274:	b291      	uxth	r1, r2
   14276:	4638      	mov	r0, r7
   14278:	f003 f9ee 	bl	17658 <pbuf_realloc>
    result = udp_sendto_if_src(dhcp_pcb, p_out, IP_ADDR_BROADCAST, LWIP_IANA_PORT_DHCP_SERVER, netif, IP4_ADDR_ANY);
   1427c:	4a1a      	ldr	r2, [pc, #104]	; (142e8 <dhcp_select+0x200>)
   1427e:	4b1b      	ldr	r3, [pc, #108]	; (142ec <dhcp_select+0x204>)
   14280:	6850      	ldr	r0, [r2, #4]
   14282:	9301      	str	r3, [sp, #4]
   14284:	9600      	str	r6, [sp, #0]
   14286:	2343      	movs	r3, #67	; 0x43
   14288:	4a19      	ldr	r2, [pc, #100]	; (142f0 <dhcp_select+0x208>)
   1428a:	4639      	mov	r1, r7
   1428c:	f007 f89e 	bl	1b3cc <udp_sendto_if_src>
   14290:	4604      	mov	r4, r0
    pbuf_free(p_out);
   14292:	4638      	mov	r0, r7
   14294:	f003 faaa 	bl	177ec <pbuf_free>
   14298:	e001      	b.n	1429e <dhcp_select+0x1b6>
    result = ERR_MEM;
   1429a:	f04f 34ff 	mov.w	r4, #4294967295
  if (dhcp->tries < 255) {
   1429e:	79ab      	ldrb	r3, [r5, #6]
   142a0:	2bff      	cmp	r3, #255	; 0xff
   142a2:	d016      	beq.n	142d2 <dhcp_select+0x1ea>
    dhcp->tries++;
   142a4:	3301      	adds	r3, #1
   142a6:	b2da      	uxtb	r2, r3
  msecs = (u16_t)((dhcp->tries < 6 ? 1 << dhcp->tries : 60) * 1000);
   142a8:	2a05      	cmp	r2, #5
    dhcp->tries++;
   142aa:	71aa      	strb	r2, [r5, #6]
  msecs = (u16_t)((dhcp->tries < 6 ? 1 << dhcp->tries : 60) * 1000);
   142ac:	d811      	bhi.n	142d2 <dhcp_select+0x1ea>
   142ae:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   142b2:	4093      	lsls	r3, r2
   142b4:	b29b      	uxth	r3, r3
   142b6:	4a0f      	ldr	r2, [pc, #60]	; (142f4 <dhcp_select+0x20c>)
   142b8:	f203 13f3 	addw	r3, r3, #499	; 0x1f3
   142bc:	fb82 1203 	smull	r1, r2, r2, r3
   142c0:	17db      	asrs	r3, r3, #31
   142c2:	ebc3 1362 	rsb	r3, r3, r2, asr #5
   142c6:	b29b      	uxth	r3, r3
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
   142c8:	812b      	strh	r3, [r5, #8]
}
   142ca:	4620      	mov	r0, r4
   142cc:	b004      	add	sp, #16
   142ce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    result = ERR_MEM;
   142d2:	2378      	movs	r3, #120	; 0x78
   142d4:	e7f8      	b.n	142c8 <dhcp_select+0x1e0>
  LWIP_ERROR("dhcp_select: dhcp != NULL", (dhcp != NULL), return ERR_VAL;);
   142d6:	f06f 0405 	mvn.w	r4, #5
   142da:	e7f6      	b.n	142ca <dhcp_select+0x1e2>
  LWIP_ERROR("dhcp_select: netif != NULL", (netif != NULL), return ERR_ARG;);
   142dc:	f06f 040f 	mvn.w	r4, #15
   142e0:	e7f3      	b.n	142ca <dhcp_select+0x1e2>
  while (((options_out_len < DHCP_MIN_OPTIONS_LEN) || (options_out_len & 3)) &&
   142e2:	461a      	mov	r2, r3
   142e4:	e7c5      	b.n	14272 <dhcp_select+0x18a>
   142e6:	bf00      	nop
   142e8:	200027b8 	.word	0x200027b8
   142ec:	0002d58c 	.word	0x0002d58c
   142f0:	0002d588 	.word	0x0002d588
   142f4:	10624dd3 	.word	0x10624dd3

000142f8 <dhcp_discover>:
{
   142f8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  struct dhcp *dhcp = netif_dhcp_data(netif);
   142fc:	6a45      	ldr	r5, [r0, #36]	; 0x24
  if (new_state != dhcp->state) {
   142fe:	796a      	ldrb	r2, [r5, #5]
  ip4_addr_set_any(&dhcp->offered_ip_addr);
   14300:	2300      	movs	r3, #0
  if (new_state != dhcp->state) {
   14302:	2a06      	cmp	r2, #6
{
   14304:	b082      	sub	sp, #8
   14306:	4606      	mov	r6, r0
  ip4_addr_set_any(&dhcp->offered_ip_addr);
   14308:	61eb      	str	r3, [r5, #28]
  if (new_state != dhcp->state) {
   1430a:	d003      	beq.n	14314 <dhcp_discover+0x1c>
    dhcp->state = new_state;
   1430c:	2206      	movs	r2, #6
    dhcp->tries = 0;
   1430e:	71ab      	strb	r3, [r5, #6]
    dhcp->request_timeout = 0;
   14310:	812b      	strh	r3, [r5, #8]
    dhcp->state = new_state;
   14312:	716a      	strb	r2, [r5, #5]
  p_out = pbuf_alloc(PBUF_TRANSPORT, sizeof(struct dhcp_msg), PBUF_RAM);
   14314:	f44f 7220 	mov.w	r2, #640	; 0x280
   14318:	f44f 719a 	mov.w	r1, #308	; 0x134
   1431c:	2036      	movs	r0, #54	; 0x36
   1431e:	f003 f8b9 	bl	17494 <pbuf_alloc>
  if (p_out == NULL) {
   14322:	4607      	mov	r7, r0
   14324:	2800      	cmp	r0, #0
   14326:	d07c      	beq.n	14422 <dhcp_discover+0x12a>
    if (dhcp->tries == 0) {
   14328:	79ab      	ldrb	r3, [r5, #6]
      xid = LWIP_RAND();
   1432a:	f8df 816c 	ldr.w	r8, [pc, #364]	; 14498 <dhcp_discover+0x1a0>
    if (dhcp->tries == 0) {
   1432e:	2b00      	cmp	r3, #0
   14330:	f000 8097 	beq.w	14462 <dhcp_discover+0x16a>
   14334:	f8d8 0000 	ldr.w	r0, [r8]
  msg_out = (struct dhcp_msg *)p_out->payload;
   14338:	687c      	ldr	r4, [r7, #4]
    dhcp->xid = xid;
   1433a:	6028      	str	r0, [r5, #0]
  memset(msg_out, 0, sizeof(struct dhcp_msg));
   1433c:	f44f 729a 	mov.w	r2, #308	; 0x134
   14340:	2100      	movs	r1, #0
   14342:	4620      	mov	r0, r4
   14344:	f013 fd8a 	bl	27e5c <memset>
  msg_out->op = DHCP_BOOTREQUEST;
   14348:	2301      	movs	r3, #1
   1434a:	7023      	strb	r3, [r4, #0]
  msg_out->htype = LWIP_IANA_HWTYPE_ETHERNET;
   1434c:	7063      	strb	r3, [r4, #1]
  msg_out->hlen = netif->hwaddr_len;
   1434e:	f896 3034 	ldrb.w	r3, [r6, #52]	; 0x34
   14352:	70a3      	strb	r3, [r4, #2]
  msg_out->xid = lwip_htonl(dhcp->xid);
   14354:	6828      	ldr	r0, [r5, #0]
   14356:	f7ff f9d3 	bl	13700 <lwip_htonl>
   1435a:	f106 0332 	add.w	r3, r6, #50	; 0x32
   1435e:	6060      	str	r0, [r4, #4]
   14360:	f104 021c 	add.w	r2, r4, #28
   14364:	4293      	cmp	r3, r2
    msg_out->chaddr[i] = netif->hwaddr[i];
   14366:	f896 302e 	ldrb.w	r3, [r6, #46]	; 0x2e
   1436a:	7723      	strb	r3, [r4, #28]
   1436c:	f896 302f 	ldrb.w	r3, [r6, #47]	; 0x2f
   14370:	7763      	strb	r3, [r4, #29]
   14372:	d905      	bls.n	14380 <dhcp_discover+0x88>
   14374:	f104 0320 	add.w	r3, r4, #32
   14378:	f106 022e 	add.w	r2, r6, #46	; 0x2e
   1437c:	4293      	cmp	r3, r2
   1437e:	d875      	bhi.n	1446c <dhcp_discover+0x174>
   14380:	6b33      	ldr	r3, [r6, #48]	; 0x30
   14382:	f8c4 301e 	str.w	r3, [r4, #30]
  options[options_out_len++] = option_len;
   14386:	2201      	movs	r2, #1
  options[options_out_len++] = option_type;
   14388:	2335      	movs	r3, #53	; 0x35
   1438a:	f884 30f0 	strb.w	r3, [r4, #240]	; 0xf0
  options[options_out_len++] = option_len;
   1438e:	f884 20f1 	strb.w	r2, [r4, #241]	; 0xf1
  options[options_out_len++] = value;
   14392:	f884 20f2 	strb.w	r2, [r4, #242]	; 0xf2
  msg_out->cookie = PP_HTONL(DHCP_MAGIC_COOKIE);
   14396:	2363      	movs	r3, #99	; 0x63
    struct dhcp_msg *msg_out = (struct dhcp_msg *)p_out->payload;
   14398:	6878      	ldr	r0, [r7, #4]
  msg_out->cookie = PP_HTONL(DHCP_MAGIC_COOKIE);
   1439a:	f884 30ec 	strb.w	r3, [r4, #236]	; 0xec
   1439e:	f884 30ef 	strb.w	r3, [r4, #239]	; 0xef
   143a2:	f06f 017d 	mvn.w	r1, #125	; 0x7d
   143a6:	2353      	movs	r3, #83	; 0x53
   143a8:	f884 10ed 	strb.w	r1, [r4, #237]	; 0xed
   143ac:	f884 30ee 	strb.w	r3, [r4, #238]	; 0xee
  options[options_out_len++] = option_type;
   143b0:	2139      	movs	r1, #57	; 0x39
  options[options_out_len++] = option_len;
   143b2:	2302      	movs	r3, #2
  options[options_out_len++] = option_type;
   143b4:	f880 10f3 	strb.w	r1, [r0, #243]	; 0xf3
  options[options_out_len++] = option_len;
   143b8:	f880 30f4 	strb.w	r3, [r0, #244]	; 0xf4
    options_out_len = dhcp_option_short(options_out_len, msg_out->options, DHCP_MAX_MSG_LEN(netif));
   143bc:	8db3      	ldrh	r3, [r6, #44]	; 0x2c
  options[options_out_len++] = (u8_t) (value & 0x00ffU);
   143be:	f880 30f6 	strb.w	r3, [r0, #246]	; 0xf6
  options[options_out_len++] = (u8_t)((value & 0xff00U) >> 8);
   143c2:	0a1b      	lsrs	r3, r3, #8
  options[options_out_len++] = option_type;
   143c4:	f04f 0c37 	mov.w	ip, #55	; 0x37
  options[options_out_len++] = option_len;
   143c8:	f04f 0e04 	mov.w	lr, #4
  options[options_out_len++] = (u8_t)((value & 0xff00U) >> 8);
   143cc:	f880 30f5 	strb.w	r3, [r0, #245]	; 0xf5
  options[options_out_len++] = value;
   143d0:	f880 20f9 	strb.w	r2, [r0, #249]	; 0xf9
  options[options_out_len++] = DHCP_OPTION_END;
   143d4:	23ff      	movs	r3, #255	; 0xff
  options[options_out_len++] = value;
   143d6:	211c      	movs	r1, #28
   143d8:	2206      	movs	r2, #6
   143da:	2403      	movs	r4, #3
  options[options_out_len++] = option_type;
   143dc:	f880 c0f7 	strb.w	ip, [r0, #247]	; 0xf7
  options[options_out_len++] = option_len;
   143e0:	f880 e0f8 	strb.w	lr, [r0, #248]	; 0xf8
  options[options_out_len++] = DHCP_OPTION_END;
   143e4:	f880 30fd 	strb.w	r3, [r0, #253]	; 0xfd
  options[options_out_len++] = value;
   143e8:	f880 10fb 	strb.w	r1, [r0, #251]	; 0xfb
   143ec:	f880 20fc 	strb.w	r2, [r0, #252]	; 0xfc
   143f0:	f880 40fa 	strb.w	r4, [r0, #250]	; 0xfa
   143f4:	2236      	movs	r2, #54	; 0x36
   143f6:	2100      	movs	r1, #0
   143f8:	30fe      	adds	r0, #254	; 0xfe
   143fa:	f013 fd2f 	bl	27e5c <memset>
  pbuf_realloc(p_out, (u16_t)(sizeof(struct dhcp_msg) - DHCP_OPTIONS_LEN + options_out_len));
   143fe:	f44f 719a 	mov.w	r1, #308	; 0x134
   14402:	4638      	mov	r0, r7
   14404:	f003 f928 	bl	17658 <pbuf_realloc>
    udp_sendto_if_src(dhcp_pcb, p_out, IP_ADDR_BROADCAST, LWIP_IANA_PORT_DHCP_SERVER, netif, IP4_ADDR_ANY);
   14408:	4b20      	ldr	r3, [pc, #128]	; (1448c <dhcp_discover+0x194>)
   1440a:	9301      	str	r3, [sp, #4]
   1440c:	f8d8 0004 	ldr.w	r0, [r8, #4]
   14410:	9600      	str	r6, [sp, #0]
   14412:	2343      	movs	r3, #67	; 0x43
   14414:	4a1e      	ldr	r2, [pc, #120]	; (14490 <dhcp_discover+0x198>)
   14416:	4639      	mov	r1, r7
   14418:	f006 ffd8 	bl	1b3cc <udp_sendto_if_src>
    pbuf_free(p_out);
   1441c:	4638      	mov	r0, r7
   1441e:	f003 f9e5 	bl	177ec <pbuf_free>
  if (dhcp->tries < 255) {
   14422:	79ab      	ldrb	r3, [r5, #6]
   14424:	2bff      	cmp	r3, #255	; 0xff
   14426:	d016      	beq.n	14456 <dhcp_discover+0x15e>
    dhcp->tries++;
   14428:	3301      	adds	r3, #1
   1442a:	b2da      	uxtb	r2, r3
  msecs = (u16_t)((dhcp->tries < 6 ? 1 << dhcp->tries : 60) * 1000);
   1442c:	2a05      	cmp	r2, #5
    dhcp->tries++;
   1442e:	71aa      	strb	r2, [r5, #6]
  msecs = (u16_t)((dhcp->tries < 6 ? 1 << dhcp->tries : 60) * 1000);
   14430:	d811      	bhi.n	14456 <dhcp_discover+0x15e>
   14432:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   14436:	4093      	lsls	r3, r2
   14438:	b29b      	uxth	r3, r3
   1443a:	4a16      	ldr	r2, [pc, #88]	; (14494 <dhcp_discover+0x19c>)
   1443c:	f203 13f3 	addw	r3, r3, #499	; 0x1f3
   14440:	fb82 1203 	smull	r1, r2, r2, r3
   14444:	17db      	asrs	r3, r3, #31
   14446:	ebc3 1362 	rsb	r3, r3, r2, asr #5
   1444a:	b29b      	uxth	r3, r3
}
   1444c:	2000      	movs	r0, #0
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
   1444e:	812b      	strh	r3, [r5, #8]
}
   14450:	b002      	add	sp, #8
   14452:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
{
   14456:	2378      	movs	r3, #120	; 0x78
}
   14458:	2000      	movs	r0, #0
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
   1445a:	812b      	strh	r3, [r5, #8]
}
   1445c:	b002      	add	sp, #8
   1445e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      xid = LWIP_RAND();
   14462:	f013 fd8d 	bl	27f80 <rand>
   14466:	f8c8 0000 	str.w	r0, [r8]
   1446a:	e765      	b.n	14338 <dhcp_discover+0x40>
    msg_out->chaddr[i] = netif->hwaddr[i];
   1446c:	f896 3030 	ldrb.w	r3, [r6, #48]	; 0x30
   14470:	77a3      	strb	r3, [r4, #30]
   14472:	f896 3031 	ldrb.w	r3, [r6, #49]	; 0x31
   14476:	77e3      	strb	r3, [r4, #31]
   14478:	f896 3032 	ldrb.w	r3, [r6, #50]	; 0x32
   1447c:	f884 3020 	strb.w	r3, [r4, #32]
   14480:	f896 3033 	ldrb.w	r3, [r6, #51]	; 0x33
   14484:	f884 3021 	strb.w	r3, [r4, #33]	; 0x21
   14488:	e77d      	b.n	14386 <dhcp_discover+0x8e>
   1448a:	bf00      	nop
   1448c:	0002d58c 	.word	0x0002d58c
   14490:	0002d588 	.word	0x0002d588
   14494:	10624dd3 	.word	0x10624dd3
   14498:	200027b8 	.word	0x200027b8

0001449c <dhcp_recv>:
  struct netif *netif = ip_current_input_netif();
   1449c:	4bb2      	ldr	r3, [pc, #712]	; (14768 <dhcp_recv+0x2cc>)
{
   1449e:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  struct netif *netif = ip_current_input_netif();
   144a2:	f8d3 a004 	ldr.w	sl, [r3, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
   144a6:	f8da 9024 	ldr.w	r9, [sl, #36]	; 0x24
{
   144aa:	b08b      	sub	sp, #44	; 0x2c
   144ac:	4693      	mov	fp, r2
  if ((dhcp == NULL) || (dhcp->pcb_allocated == 0)) {
   144ae:	f1b9 0f00 	cmp.w	r9, #0
   144b2:	d009      	beq.n	144c8 <dhcp_recv+0x2c>
   144b4:	f899 3004 	ldrb.w	r3, [r9, #4]
   144b8:	b133      	cbz	r3, 144c8 <dhcp_recv+0x2c>
  if (p->len < DHCP_MIN_REPLY_LEN) {
   144ba:	8953      	ldrh	r3, [r2, #10]
   144bc:	2b2b      	cmp	r3, #43	; 0x2b
   144be:	d903      	bls.n	144c8 <dhcp_recv+0x2c>
  struct dhcp_msg *reply_msg = (struct dhcp_msg *)p->payload;
   144c0:	6853      	ldr	r3, [r2, #4]
  if (reply_msg->op != DHCP_BOOTREPLY) {
   144c2:	781a      	ldrb	r2, [r3, #0]
   144c4:	2a02      	cmp	r2, #2
   144c6:	d005      	beq.n	144d4 <dhcp_recv+0x38>
  pbuf_free(p);
   144c8:	4658      	mov	r0, fp
   144ca:	f003 f98f 	bl	177ec <pbuf_free>
}
   144ce:	b00b      	add	sp, #44	; 0x2c
   144d0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  for (i = 0; i < netif->hwaddr_len && i < LWIP_MIN(DHCP_CHADDR_LEN, NETIF_MAX_HWADDR_LEN); i++) {
   144d4:	f89a 2034 	ldrb.w	r2, [sl, #52]	; 0x34
   144d8:	b34a      	cbz	r2, 1452e <dhcp_recv+0x92>
    if (netif->hwaddr[i] != reply_msg->chaddr[i]) {
   144da:	7f18      	ldrb	r0, [r3, #28]
   144dc:	f89a 102e 	ldrb.w	r1, [sl, #46]	; 0x2e
   144e0:	4288      	cmp	r0, r1
   144e2:	d1f1      	bne.n	144c8 <dhcp_recv+0x2c>
  for (i = 0; i < netif->hwaddr_len && i < LWIP_MIN(DHCP_CHADDR_LEN, NETIF_MAX_HWADDR_LEN); i++) {
   144e4:	2a01      	cmp	r2, #1
   144e6:	d922      	bls.n	1452e <dhcp_recv+0x92>
    if (netif->hwaddr[i] != reply_msg->chaddr[i]) {
   144e8:	7f58      	ldrb	r0, [r3, #29]
   144ea:	f89a 102f 	ldrb.w	r1, [sl, #47]	; 0x2f
   144ee:	4288      	cmp	r0, r1
   144f0:	d1ea      	bne.n	144c8 <dhcp_recv+0x2c>
  for (i = 0; i < netif->hwaddr_len && i < LWIP_MIN(DHCP_CHADDR_LEN, NETIF_MAX_HWADDR_LEN); i++) {
   144f2:	2a02      	cmp	r2, #2
   144f4:	d01b      	beq.n	1452e <dhcp_recv+0x92>
    if (netif->hwaddr[i] != reply_msg->chaddr[i]) {
   144f6:	7f98      	ldrb	r0, [r3, #30]
   144f8:	f89a 1030 	ldrb.w	r1, [sl, #48]	; 0x30
   144fc:	4288      	cmp	r0, r1
   144fe:	d1e3      	bne.n	144c8 <dhcp_recv+0x2c>
  for (i = 0; i < netif->hwaddr_len && i < LWIP_MIN(DHCP_CHADDR_LEN, NETIF_MAX_HWADDR_LEN); i++) {
   14500:	2a03      	cmp	r2, #3
   14502:	d014      	beq.n	1452e <dhcp_recv+0x92>
    if (netif->hwaddr[i] != reply_msg->chaddr[i]) {
   14504:	7fd8      	ldrb	r0, [r3, #31]
   14506:	f89a 1031 	ldrb.w	r1, [sl, #49]	; 0x31
   1450a:	4288      	cmp	r0, r1
   1450c:	d1dc      	bne.n	144c8 <dhcp_recv+0x2c>
  for (i = 0; i < netif->hwaddr_len && i < LWIP_MIN(DHCP_CHADDR_LEN, NETIF_MAX_HWADDR_LEN); i++) {
   1450e:	2a04      	cmp	r2, #4
   14510:	d00d      	beq.n	1452e <dhcp_recv+0x92>
    if (netif->hwaddr[i] != reply_msg->chaddr[i]) {
   14512:	f893 0020 	ldrb.w	r0, [r3, #32]
   14516:	f89a 1032 	ldrb.w	r1, [sl, #50]	; 0x32
   1451a:	4288      	cmp	r0, r1
   1451c:	d1d4      	bne.n	144c8 <dhcp_recv+0x2c>
  for (i = 0; i < netif->hwaddr_len && i < LWIP_MIN(DHCP_CHADDR_LEN, NETIF_MAX_HWADDR_LEN); i++) {
   1451e:	2a05      	cmp	r2, #5
   14520:	d005      	beq.n	1452e <dhcp_recv+0x92>
    if (netif->hwaddr[i] != reply_msg->chaddr[i]) {
   14522:	f893 1021 	ldrb.w	r1, [r3, #33]	; 0x21
   14526:	f89a 2033 	ldrb.w	r2, [sl, #51]	; 0x33
   1452a:	4291      	cmp	r1, r2
   1452c:	d1cc      	bne.n	144c8 <dhcp_recv+0x2c>
  if (lwip_ntohl(reply_msg->xid) != dhcp->xid) {
   1452e:	6858      	ldr	r0, [r3, #4]
   14530:	f7ff f8e6 	bl	13700 <lwip_htonl>
   14534:	f8d9 3000 	ldr.w	r3, [r9]
   14538:	4298      	cmp	r0, r3
   1453a:	d1c5      	bne.n	144c8 <dhcp_recv+0x2c>
  dhcp_clear_all_options(dhcp);
   1453c:	4b8b      	ldr	r3, [pc, #556]	; (1476c <dhcp_recv+0x2d0>)
   1453e:	498b      	ldr	r1, [pc, #556]	; (1476c <dhcp_recv+0x2d0>)
   14540:	2200      	movs	r2, #0
   14542:	605a      	str	r2, [r3, #4]
   14544:	811a      	strh	r2, [r3, #8]
  if (p->len < DHCP_SNAME_OFS) {
   14546:	f8bb 300a 	ldrh.w	r3, [fp, #10]
  dhcp_clear_all_options(dhcp);
   1454a:	600a      	str	r2, [r1, #0]
  if (p->len < DHCP_SNAME_OFS) {
   1454c:	2b2b      	cmp	r3, #43	; 0x2b
   1454e:	d9bb      	bls.n	144c8 <dhcp_recv+0x2c>
  int parse_sname_as_options = 0;
   14550:	9204      	str	r2, [sp, #16]
  options_idx_max = p->tot_len;
   14552:	f8bb 2008 	ldrh.w	r2, [fp, #8]
   14556:	f8cd b00c 	str.w	fp, [sp, #12]
  options_idx = DHCP_OPTIONS_OFS;
   1455a:	f04f 08f0 	mov.w	r8, #240	; 0xf0
   1455e:	f8cd a018 	str.w	sl, [sp, #24]
   14562:	f8cd 901c 	str.w	r9, [sp, #28]
   14566:	4693      	mov	fp, r2
   14568:	9d03      	ldr	r5, [sp, #12]
   1456a:	e000      	b.n	1456e <dhcp_recv+0xd2>
   1456c:	896b      	ldrh	r3, [r5, #10]
  while ((q != NULL) && (options_idx >= q->len)) {
   1456e:	4543      	cmp	r3, r8
    options_idx = (u16_t)(options_idx - q->len);
   14570:	eba8 0103 	sub.w	r1, r8, r3
    options_idx_max = (u16_t)(options_idx_max - q->len);
   14574:	ebab 0203 	sub.w	r2, fp, r3
  while ((q != NULL) && (options_idx >= q->len)) {
   14578:	d809      	bhi.n	1458e <dhcp_recv+0xf2>
    q = q->next;
   1457a:	682d      	ldr	r5, [r5, #0]
    options_idx = (u16_t)(options_idx - q->len);
   1457c:	fa1f f881 	uxth.w	r8, r1
    options_idx_max = (u16_t)(options_idx_max - q->len);
   14580:	fa1f fb82 	uxth.w	fp, r2
  while ((q != NULL) && (options_idx >= q->len)) {
   14584:	2d00      	cmp	r5, #0
   14586:	d1f1      	bne.n	1456c <dhcp_recv+0xd0>
   14588:	f8dd b00c 	ldr.w	fp, [sp, #12]
   1458c:	e79c      	b.n	144c8 <dhcp_recv+0x2c>
  options = (u8_t *)q->payload;
   1458e:	686a      	ldr	r2, [r5, #4]
   14590:	9201      	str	r2, [sp, #4]
  while ((q != NULL) && (offset < offset_max) && (options[offset] != DHCP_OPTION_END)) {
   14592:	45d8      	cmp	r8, fp
   14594:	f080 8145 	bcs.w	14822 <dhcp_recv+0x386>
   14598:	f812 1008 	ldrb.w	r1, [r2, r8]
   1459c:	29ff      	cmp	r1, #255	; 0xff
   1459e:	4642      	mov	r2, r8
   145a0:	f000 813f 	beq.w	14822 <dhcp_recv+0x386>
    u16_t val_offset = (u16_t)(offset + 2);
   145a4:	f108 0602 	add.w	r6, r8, #2
   145a8:	b2b6      	uxth	r6, r6
    if (val_offset < offset) {
   145aa:	4546      	cmp	r6, r8
   145ac:	d3ec      	bcc.n	14588 <dhcp_recv+0xec>
   145ae:	46c2      	mov	sl, r8
   145b0:	f8cd 8014 	str.w	r8, [sp, #20]
   145b4:	f8cd b008 	str.w	fp, [sp, #8]
    if ((offset + 1) < q->len) {
   145b8:	f10a 0001 	add.w	r0, sl, #1
   145bc:	4298      	cmp	r0, r3
   145be:	4607      	mov	r7, r0
   145c0:	f280 8125 	bge.w	1480e <dhcp_recv+0x372>
      len = options[offset + 1];
   145c4:	9c01      	ldr	r4, [sp, #4]
   145c6:	4422      	add	r2, r4
   145c8:	7852      	ldrb	r2, [r2, #1]
    switch (op) {
   145ca:	293b      	cmp	r1, #59	; 0x3b
   145cc:	f200 810e 	bhi.w	147ec <dhcp_recv+0x350>
   145d0:	e8df f011 	tbh	[pc, r1, lsl #1]
   145d4:	005f003c 	.word	0x005f003c
   145d8:	0102010c 	.word	0x0102010c
   145dc:	010c010c 	.word	0x010c010c
   145e0:	010c00dc 	.word	0x010c00dc
   145e4:	010c010c 	.word	0x010c010c
   145e8:	010c010c 	.word	0x010c010c
   145ec:	010c010c 	.word	0x010c010c
   145f0:	010c010c 	.word	0x010c010c
   145f4:	010c010c 	.word	0x010c010c
   145f8:	010c010c 	.word	0x010c010c
   145fc:	010c010c 	.word	0x010c010c
   14600:	010c010c 	.word	0x010c010c
   14604:	010c010c 	.word	0x010c010c
   14608:	010c010c 	.word	0x010c010c
   1460c:	010c010c 	.word	0x010c010c
   14610:	010c010c 	.word	0x010c010c
   14614:	010c010c 	.word	0x010c010c
   14618:	010c010c 	.word	0x010c010c
   1461c:	010c010c 	.word	0x010c010c
   14620:	010c010c 	.word	0x010c010c
   14624:	010c010c 	.word	0x010c010c
   14628:	010c010c 	.word	0x010c010c
   1462c:	010c010c 	.word	0x010c010c
   14630:	010c010c 	.word	0x010c010c
   14634:	010c010c 	.word	0x010c010c
   14638:	00f9010c 	.word	0x00f9010c
   1463c:	00c600d0 	.word	0x00c600d0
   14640:	010c00bd 	.word	0x010c00bd
   14644:	010c010c 	.word	0x010c010c
   14648:	00ac00b5 	.word	0x00ac00b5
      offset++;
   1464c:	fa1f fa80 	uxth.w	sl, r0
    if (offset >= q->len) {
   14650:	459a      	cmp	sl, r3
   14652:	f0c0 80e2 	bcc.w	1481a <dhcp_recv+0x37e>
      offset_max = (u16_t)(offset_max - q->len);
   14656:	9a02      	ldr	r2, [sp, #8]
      offset = (u16_t)(offset - q->len);
   14658:	ebaa 0a03 	sub.w	sl, sl, r3
      offset_max = (u16_t)(offset_max - q->len);
   1465c:	1ad3      	subs	r3, r2, r3
   1465e:	b29b      	uxth	r3, r3
      offset = (u16_t)(offset - q->len);
   14660:	fa1f fa8a 	uxth.w	sl, sl
      if (offset < offset_max) {
   14664:	459a      	cmp	sl, r3
      offset_max = (u16_t)(offset_max - q->len);
   14666:	9302      	str	r3, [sp, #8]
      if (offset < offset_max) {
   14668:	d28e      	bcs.n	14588 <dhcp_recv+0xec>
        q = q->next;
   1466a:	682d      	ldr	r5, [r5, #0]
        LWIP_ERROR("next pbuf was null", q != NULL, return ERR_VAL;);
   1466c:	2d00      	cmp	r5, #0
   1466e:	d08b      	beq.n	14588 <dhcp_recv+0xec>
        options = (u8_t *)q->payload;
   14670:	686b      	ldr	r3, [r5, #4]
   14672:	9301      	str	r3, [sp, #4]
  while ((q != NULL) && (offset < offset_max) && (options[offset] != DHCP_OPTION_END)) {
   14674:	9b01      	ldr	r3, [sp, #4]
   14676:	f813 100a 	ldrb.w	r1, [r3, sl]
   1467a:	29ff      	cmp	r1, #255	; 0xff
   1467c:	4652      	mov	r2, sl
   1467e:	f000 80d0 	beq.w	14822 <dhcp_recv+0x386>
    u16_t val_offset = (u16_t)(offset + 2);
   14682:	f10a 0602 	add.w	r6, sl, #2
   14686:	b2b6      	uxth	r6, r6
    if (val_offset < offset) {
   14688:	4556      	cmp	r6, sl
   1468a:	f4ff af7d 	bcc.w	14588 <dhcp_recv+0xec>
   1468e:	896b      	ldrh	r3, [r5, #10]
   14690:	e792      	b.n	145b8 <dhcp_recv+0x11c>
        LWIP_ERROR("len == 4", len == 4, return ERR_VAL;);
   14692:	2a04      	cmp	r2, #4
   14694:	f47f af78 	bne.w	14588 <dhcp_recv+0xec>
   14698:	f10a 0704 	add.w	r7, sl, #4
   1469c:	4614      	mov	r4, r2
        decode_idx = DHCP_OPTION_IDX_SUBNET_MASK;
   1469e:	f04f 0906 	mov.w	r9, #6
      if (offset + len + 2 > 0xFFFF) {
   146a2:	f64f 73fd 	movw	r3, #65533	; 0xfffd
   146a6:	429f      	cmp	r7, r3
   146a8:	f73f af6e 	bgt.w	14588 <dhcp_recv+0xec>
   146ac:	f10a 0a02 	add.w	sl, sl, #2
      offset = (u16_t)(offset + len + 2);
   146b0:	fa12 fa8a 	uxtah	sl, r2, sl
   146b4:	fa1f fa8a 	uxth.w	sl, sl
        if (!dhcp_option_given(dhcp, decode_idx)) {
   146b8:	4b2c      	ldr	r3, [pc, #176]	; (1476c <dhcp_recv+0x2d0>)
   146ba:	f813 3009 	ldrb.w	r3, [r3, r9]
        u32_t value = 0;
   146be:	2200      	movs	r2, #0
   146c0:	9209      	str	r2, [sp, #36]	; 0x24
        if (!dhcp_option_given(dhcp, decode_idx)) {
   146c2:	2b00      	cmp	r3, #0
   146c4:	f040 80d9 	bne.w	1487a <dhcp_recv+0x3de>
   146c8:	4b28      	ldr	r3, [pc, #160]	; (1476c <dhcp_recv+0x2d0>)
   146ca:	eb03 0809 	add.w	r8, r3, r9
   146ce:	4b28      	ldr	r3, [pc, #160]	; (14770 <dhcp_recv+0x2d4>)
   146d0:	eb03 0b89 	add.w	fp, r3, r9, lsl #2
   146d4:	e01d      	b.n	14712 <dhcp_recv+0x276>
          if (decode_len > 4) {
   146d6:	2c04      	cmp	r4, #4
   146d8:	f240 80c0 	bls.w	1485c <dhcp_recv+0x3c0>
            LWIP_ERROR("decode_len %% 4 == 0", decode_len % 4 == 0, return ERR_VAL;);
   146dc:	07a2      	lsls	r2, r4, #30
   146de:	f47f af53 	bne.w	14588 <dhcp_recv+0xec>
            dhcp_got_option(dhcp, decode_idx);
   146e2:	f04f 0301 	mov.w	r3, #1
   146e6:	f808 3b01 	strb.w	r3, [r8], #1
            dhcp_set_option_value(dhcp, decode_idx, lwip_htonl(value));
   146ea:	9809      	ldr	r0, [sp, #36]	; 0x24
   146ec:	f7ff f808 	bl	13700 <lwip_htonl>
            next_val_offset = (u16_t)(val_offset + 4);
   146f0:	1d33      	adds	r3, r6, #4
   146f2:	b29b      	uxth	r3, r3
            decode_len = (u8_t)(decode_len - 4);
   146f4:	3c04      	subs	r4, #4
            if (next_val_offset < val_offset) {
   146f6:	42b3      	cmp	r3, r6
            dhcp_set_option_value(dhcp, decode_idx, lwip_htonl(value));
   146f8:	f84b 0b04 	str.w	r0, [fp], #4
            decode_len = (u8_t)(decode_len - 4);
   146fc:	b2e4      	uxtb	r4, r4
            if (next_val_offset < val_offset) {
   146fe:	f4ff af43 	bcc.w	14588 <dhcp_recv+0xec>
        if (!dhcp_option_given(dhcp, decode_idx)) {
   14702:	f898 2000 	ldrb.w	r2, [r8]
            decode_idx++;
   14706:	f109 0901 	add.w	r9, r9, #1
   1470a:	461e      	mov	r6, r3
        if (!dhcp_option_given(dhcp, decode_idx)) {
   1470c:	2a00      	cmp	r2, #0
   1470e:	f040 80b4 	bne.w	1487a <dhcp_recv+0x3de>
   14712:	2c04      	cmp	r4, #4
   14714:	4627      	mov	r7, r4
   14716:	bf28      	it	cs
   14718:	2704      	movcs	r7, #4
          if (pbuf_copy_partial(q, &value, copy_len, val_offset) != copy_len) {
   1471a:	463a      	mov	r2, r7
   1471c:	4633      	mov	r3, r6
   1471e:	a909      	add	r1, sp, #36	; 0x24
   14720:	4628      	mov	r0, r5
   14722:	f003 f939 	bl	17998 <pbuf_copy_partial>
   14726:	42b8      	cmp	r0, r7
   14728:	d0d5      	beq.n	146d6 <dhcp_recv+0x23a>
   1472a:	e72d      	b.n	14588 <dhcp_recv+0xec>
        LWIP_ERROR("len == 4", len == 4, return ERR_VAL;);
   1472c:	2a04      	cmp	r2, #4
   1472e:	f47f af2b 	bne.w	14588 <dhcp_recv+0xec>
   14732:	f10a 0704 	add.w	r7, sl, #4
   14736:	4614      	mov	r4, r2
        decode_idx = DHCP_OPTION_IDX_T2;
   14738:	f04f 0905 	mov.w	r9, #5
   1473c:	e7b1      	b.n	146a2 <dhcp_recv+0x206>
        LWIP_ERROR("len == 4", len == 4, return ERR_VAL;);
   1473e:	2a04      	cmp	r2, #4
   14740:	f47f af22 	bne.w	14588 <dhcp_recv+0xec>
   14744:	f10a 0704 	add.w	r7, sl, #4
   14748:	4614      	mov	r4, r2
        decode_idx = DHCP_OPTION_IDX_T1;
   1474a:	4691      	mov	r9, r2
   1474c:	e7a9      	b.n	146a2 <dhcp_recv+0x206>
        LWIP_ERROR("len == 4", len == 4, return ERR_VAL;);
   1474e:	2a04      	cmp	r2, #4
   14750:	f47f af1a 	bne.w	14588 <dhcp_recv+0xec>
   14754:	f10a 0704 	add.w	r7, sl, #4
   14758:	4614      	mov	r4, r2
        decode_idx = DHCP_OPTION_IDX_SERVER_ID;
   1475a:	f04f 0902 	mov.w	r9, #2
   1475e:	e7a0      	b.n	146a2 <dhcp_recv+0x206>
        LWIP_ERROR("len == 1", len == 1, return ERR_VAL;);
   14760:	2a01      	cmp	r2, #1
   14762:	d0f1      	beq.n	14748 <dhcp_recv+0x2ac>
   14764:	e710      	b.n	14588 <dhcp_recv+0xec>
   14766:	bf00      	nop
   14768:	2000a404 	.word	0x2000a404
   1476c:	20002a54 	.word	0x20002a54
   14770:	20002a60 	.word	0x20002a60
        LWIP_ERROR("len == 1", len == 1, return ERR_VAL;);
   14774:	2a01      	cmp	r2, #1
   14776:	f47f af07 	bne.w	14588 <dhcp_recv+0xec>
        LWIP_ERROR("overload in file/sname", options_idx == DHCP_OPTIONS_OFS, return ERR_VAL;);
   1477a:	9b05      	ldr	r3, [sp, #20]
   1477c:	2bf0      	cmp	r3, #240	; 0xf0
   1477e:	f47f af03 	bne.w	14588 <dhcp_recv+0xec>
   14782:	4614      	mov	r4, r2
        decode_idx = DHCP_OPTION_IDX_OVERLOAD;
   14784:	f04f 0900 	mov.w	r9, #0
   14788:	e78b      	b.n	146a2 <dhcp_recv+0x206>
      len = (q->next != NULL ? ((u8_t *)q->next->payload)[0] : 0);
   1478a:	2200      	movs	r2, #0
        LWIP_ERROR("len %% 4 == 0", len % 4 == 0, return ERR_VAL;);
   1478c:	0791      	lsls	r1, r2, #30
   1478e:	f47f aefb 	bne.w	14588 <dhcp_recv+0xec>
        decode_len = LWIP_MIN(len, 4 * DNS_MAX_SERVERS);
   14792:	2a08      	cmp	r2, #8
   14794:	4614      	mov	r4, r2
   14796:	bf28      	it	cs
   14798:	2408      	movcs	r4, #8
        LWIP_ERROR("len >= decode_len", len >= decode_len, return ERR_VAL;);
   1479a:	4294      	cmp	r4, r2
   1479c:	f63f aef4 	bhi.w	14588 <dhcp_recv+0xec>
      if (offset + len + 2 > 0xFFFF) {
   147a0:	eb02 000a 	add.w	r0, r2, sl
   147a4:	f64f 71fd 	movw	r1, #65533	; 0xfffd
   147a8:	4288      	cmp	r0, r1
   147aa:	f73f aeed 	bgt.w	14588 <dhcp_recv+0xec>
   147ae:	f10a 0a02 	add.w	sl, sl, #2
      offset = (u16_t)(offset + len + 2);
   147b2:	fa12 f28a 	uxtah	r2, r2, sl
   147b6:	fa1f fa82 	uxth.w	sl, r2
      if (decode_len > 0) {
   147ba:	2c00      	cmp	r4, #0
   147bc:	f43f af48 	beq.w	14650 <dhcp_recv+0x1b4>
        decode_idx = DHCP_OPTION_IDX_DNS_SERVER;
   147c0:	f04f 0908 	mov.w	r9, #8
   147c4:	e778      	b.n	146b8 <dhcp_recv+0x21c>
        LWIP_ERROR("len == 4", len == 4, return ERR_VAL;);
   147c6:	2a04      	cmp	r2, #4
   147c8:	f47f aede 	bne.w	14588 <dhcp_recv+0xec>
   147cc:	f10a 0704 	add.w	r7, sl, #4
   147d0:	4614      	mov	r4, r2
        decode_idx = DHCP_OPTION_IDX_LEASE_TIME;
   147d2:	f04f 0903 	mov.w	r9, #3
   147d6:	e764      	b.n	146a2 <dhcp_recv+0x206>
        LWIP_ERROR("len >= decode_len", len >= decode_len, return ERR_VAL;);
   147d8:	2a03      	cmp	r2, #3
   147da:	f67f aed5 	bls.w	14588 <dhcp_recv+0xec>
   147de:	eb02 070a 	add.w	r7, r2, sl
        decode_idx = DHCP_OPTION_IDX_ROUTER;
   147e2:	f04f 0907 	mov.w	r9, #7
        decode_len = 4; /* only copy the first given router */
   147e6:	2404      	movs	r4, #4
   147e8:	e75b      	b.n	146a2 <dhcp_recv+0x206>
      len = (q->next != NULL ? ((u8_t *)q->next->payload)[0] : 0);
   147ea:	2200      	movs	r2, #0
    if (op == DHCP_OPTION_PAD) {
   147ec:	2900      	cmp	r1, #0
   147ee:	f43f af2d 	beq.w	1464c <dhcp_recv+0x1b0>
      if (offset + len + 2 > 0xFFFF) {
   147f2:	eb02 000a 	add.w	r0, r2, sl
   147f6:	f64f 71fd 	movw	r1, #65533	; 0xfffd
   147fa:	4288      	cmp	r0, r1
   147fc:	f73f aec4 	bgt.w	14588 <dhcp_recv+0xec>
   14800:	f10a 0a02 	add.w	sl, sl, #2
      offset = (u16_t)(offset + len + 2);
   14804:	fa12 f28a 	uxtah	r2, r2, sl
   14808:	fa1f fa82 	uxth.w	sl, r2
   1480c:	e720      	b.n	14650 <dhcp_recv+0x1b4>
      len = (q->next != NULL ? ((u8_t *)q->next->payload)[0] : 0);
   1480e:	682a      	ldr	r2, [r5, #0]
   14810:	2a00      	cmp	r2, #0
   14812:	d034      	beq.n	1487e <dhcp_recv+0x3e2>
   14814:	6852      	ldr	r2, [r2, #4]
   14816:	7812      	ldrb	r2, [r2, #0]
   14818:	e6d7      	b.n	145ca <dhcp_recv+0x12e>
  while ((q != NULL) && (offset < offset_max) && (options[offset] != DHCP_OPTION_END)) {
   1481a:	9b02      	ldr	r3, [sp, #8]
   1481c:	459a      	cmp	sl, r3
   1481e:	f4ff af29 	bcc.w	14674 <dhcp_recv+0x1d8>
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_OVERLOAD)) {
   14822:	4b99      	ldr	r3, [pc, #612]	; (14a88 <dhcp_recv+0x5ec>)
   14824:	781b      	ldrb	r3, [r3, #0]
   14826:	b163      	cbz	r3, 14842 <dhcp_recv+0x3a6>
    u32_t overload = dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_OVERLOAD);
   14828:	4b98      	ldr	r3, [pc, #608]	; (14a8c <dhcp_recv+0x5f0>)
    dhcp_clear_option(dhcp, DHCP_OPTION_IDX_OVERLOAD);
   1482a:	4997      	ldr	r1, [pc, #604]	; (14a88 <dhcp_recv+0x5ec>)
    u32_t overload = dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_OVERLOAD);
   1482c:	681b      	ldr	r3, [r3, #0]
    dhcp_clear_option(dhcp, DHCP_OPTION_IDX_OVERLOAD);
   1482e:	2200      	movs	r2, #0
    if (overload == DHCP_OVERLOAD_FILE) {
   14830:	2b01      	cmp	r3, #1
    dhcp_clear_option(dhcp, DHCP_OPTION_IDX_OVERLOAD);
   14832:	700a      	strb	r2, [r1, #0]
    if (overload == DHCP_OVERLOAD_FILE) {
   14834:	f000 80a2 	beq.w	1497c <dhcp_recv+0x4e0>
    } else if (overload == DHCP_OVERLOAD_SNAME) {
   14838:	2b02      	cmp	r3, #2
   1483a:	d006      	beq.n	1484a <dhcp_recv+0x3ae>
    } else if (overload == DHCP_OVERLOAD_SNAME_FILE) {
   1483c:	2b03      	cmp	r3, #3
   1483e:	f000 809b 	beq.w	14978 <dhcp_recv+0x4dc>
  } else if (parse_sname_as_options) {
   14842:	9b04      	ldr	r3, [sp, #16]
   14844:	2b00      	cmp	r3, #0
   14846:	f000 80a2 	beq.w	1498e <dhcp_recv+0x4f2>
    parse_sname_as_options = 0;
   1484a:	2300      	movs	r3, #0
   1484c:	9304      	str	r3, [sp, #16]
    options_idx_max = DHCP_SNAME_OFS + DHCP_SNAME_LEN;
   1484e:	f04f 0b6c 	mov.w	fp, #108	; 0x6c
    options_idx = DHCP_SNAME_OFS;
   14852:	f04f 082c 	mov.w	r8, #44	; 0x2c
   14856:	9b03      	ldr	r3, [sp, #12]
   14858:	895b      	ldrh	r3, [r3, #10]
   1485a:	e685      	b.n	14568 <dhcp_recv+0xcc>
          } else if (decode_len == 4) {
   1485c:	f000 8093 	beq.w	14986 <dhcp_recv+0x4ea>
            LWIP_ERROR("invalid decode_len", decode_len == 1, return ERR_VAL;);
   14860:	2c01      	cmp	r4, #1
   14862:	f47f ae91 	bne.w	14588 <dhcp_recv+0xec>
            value = ((u8_t *)&value)[0];
   14866:	f89d 0024 	ldrb.w	r0, [sp, #36]	; 0x24
          dhcp_got_option(dhcp, decode_idx);
   1486a:	4b87      	ldr	r3, [pc, #540]	; (14a88 <dhcp_recv+0x5ec>)
   1486c:	f04f 0201 	mov.w	r2, #1
   14870:	f803 2009 	strb.w	r2, [r3, r9]
          dhcp_set_option_value(dhcp, decode_idx, value);
   14874:	4b85      	ldr	r3, [pc, #532]	; (14a8c <dhcp_recv+0x5f0>)
   14876:	f843 0029 	str.w	r0, [r3, r9, lsl #2]
   1487a:	896b      	ldrh	r3, [r5, #10]
   1487c:	e6e8      	b.n	14650 <dhcp_recv+0x1b4>
    switch (op) {
   1487e:	293b      	cmp	r1, #59	; 0x3b
   14880:	d8b3      	bhi.n	147ea <dhcp_recv+0x34e>
   14882:	a201      	add	r2, pc, #4	; (adr r2, 14888 <dhcp_recv+0x3ec>)
   14884:	f852 f021 	ldr.w	pc, [r2, r1, lsl #2]
   14888:	0001464d 	.word	0x0001464d
   1488c:	00014589 	.word	0x00014589
   14890:	000147eb 	.word	0x000147eb
   14894:	00014589 	.word	0x00014589
   14898:	000147eb 	.word	0x000147eb
   1489c:	000147eb 	.word	0x000147eb
   148a0:	0001478b 	.word	0x0001478b
   148a4:	000147eb 	.word	0x000147eb
   148a8:	000147eb 	.word	0x000147eb
   148ac:	000147eb 	.word	0x000147eb
   148b0:	000147eb 	.word	0x000147eb
   148b4:	000147eb 	.word	0x000147eb
   148b8:	000147eb 	.word	0x000147eb
   148bc:	000147eb 	.word	0x000147eb
   148c0:	000147eb 	.word	0x000147eb
   148c4:	000147eb 	.word	0x000147eb
   148c8:	000147eb 	.word	0x000147eb
   148cc:	000147eb 	.word	0x000147eb
   148d0:	000147eb 	.word	0x000147eb
   148d4:	000147eb 	.word	0x000147eb
   148d8:	000147eb 	.word	0x000147eb
   148dc:	000147eb 	.word	0x000147eb
   148e0:	000147eb 	.word	0x000147eb
   148e4:	000147eb 	.word	0x000147eb
   148e8:	000147eb 	.word	0x000147eb
   148ec:	000147eb 	.word	0x000147eb
   148f0:	000147eb 	.word	0x000147eb
   148f4:	000147eb 	.word	0x000147eb
   148f8:	000147eb 	.word	0x000147eb
   148fc:	000147eb 	.word	0x000147eb
   14900:	000147eb 	.word	0x000147eb
   14904:	000147eb 	.word	0x000147eb
   14908:	000147eb 	.word	0x000147eb
   1490c:	000147eb 	.word	0x000147eb
   14910:	000147eb 	.word	0x000147eb
   14914:	000147eb 	.word	0x000147eb
   14918:	000147eb 	.word	0x000147eb
   1491c:	000147eb 	.word	0x000147eb
   14920:	000147eb 	.word	0x000147eb
   14924:	000147eb 	.word	0x000147eb
   14928:	000147eb 	.word	0x000147eb
   1492c:	000147eb 	.word	0x000147eb
   14930:	000147eb 	.word	0x000147eb
   14934:	000147eb 	.word	0x000147eb
   14938:	000147eb 	.word	0x000147eb
   1493c:	000147eb 	.word	0x000147eb
   14940:	000147eb 	.word	0x000147eb
   14944:	000147eb 	.word	0x000147eb
   14948:	000147eb 	.word	0x000147eb
   1494c:	000147eb 	.word	0x000147eb
   14950:	000147eb 	.word	0x000147eb
   14954:	00014589 	.word	0x00014589
   14958:	00014589 	.word	0x00014589
   1495c:	00014589 	.word	0x00014589
   14960:	00014589 	.word	0x00014589
   14964:	000147eb 	.word	0x000147eb
   14968:	000147eb 	.word	0x000147eb
   1496c:	000147eb 	.word	0x000147eb
   14970:	00014589 	.word	0x00014589
   14974:	00014589 	.word	0x00014589
      parse_sname_as_options = 1;
   14978:	2301      	movs	r3, #1
   1497a:	9304      	str	r3, [sp, #16]
    options_idx_max = DHCP_FILE_OFS + DHCP_FILE_LEN;
   1497c:	f04f 0bec 	mov.w	fp, #236	; 0xec
    options_idx = DHCP_FILE_OFS;
   14980:	f04f 086c 	mov.w	r8, #108	; 0x6c
   14984:	e767      	b.n	14856 <dhcp_recv+0x3ba>
            value = lwip_ntohl(value);
   14986:	9809      	ldr	r0, [sp, #36]	; 0x24
   14988:	f7fe feba 	bl	13700 <lwip_htonl>
   1498c:	e76d      	b.n	1486a <dhcp_recv+0x3ce>
  if (!dhcp_option_given(dhcp, DHCP_OPTION_IDX_MSG_TYPE)) {
   1498e:	4b3e      	ldr	r3, [pc, #248]	; (14a88 <dhcp_recv+0x5ec>)
   14990:	f8dd a018 	ldr.w	sl, [sp, #24]
   14994:	785b      	ldrb	r3, [r3, #1]
   14996:	f8dd 901c 	ldr.w	r9, [sp, #28]
   1499a:	f8dd b00c 	ldr.w	fp, [sp, #12]
   1499e:	2b00      	cmp	r3, #0
   149a0:	f43f ad92 	beq.w	144c8 <dhcp_recv+0x2c>
  msg_type = (u8_t)dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_MSG_TYPE);
   149a4:	4a39      	ldr	r2, [pc, #228]	; (14a8c <dhcp_recv+0x5f0>)
  msg_in = (struct dhcp_msg *)p->payload;
   149a6:	f8db 4004 	ldr.w	r4, [fp, #4]
  msg_type = (u8_t)dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_MSG_TYPE);
   149aa:	7913      	ldrb	r3, [r2, #4]
  if (msg_type == DHCP_ACK) {
   149ac:	2b05      	cmp	r3, #5
   149ae:	d01d      	beq.n	149ec <dhcp_recv+0x550>
  else if ((msg_type == DHCP_NAK) &&
   149b0:	2b06      	cmp	r3, #6
   149b2:	d02c      	beq.n	14a0e <dhcp_recv+0x572>
  else if ((msg_type == DHCP_OFFER) && (dhcp->state == DHCP_STATE_SELECTING)) {
   149b4:	2b02      	cmp	r3, #2
   149b6:	f47f ad87 	bne.w	144c8 <dhcp_recv+0x2c>
   149ba:	f899 3005 	ldrb.w	r3, [r9, #5]
   149be:	2b06      	cmp	r3, #6
   149c0:	f47f ad82 	bne.w	144c8 <dhcp_recv+0x2c>
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_SERVER_ID)) {
   149c4:	4b30      	ldr	r3, [pc, #192]	; (14a88 <dhcp_recv+0x5ec>)
   149c6:	789b      	ldrb	r3, [r3, #2]
   149c8:	2b00      	cmp	r3, #0
   149ca:	f43f ad7d 	beq.w	144c8 <dhcp_recv+0x2c>
  struct dhcp *dhcp = netif_dhcp_data(netif);
   149ce:	f8da 5024 	ldr.w	r5, [sl, #36]	; 0x24
    dhcp->request_timeout = 0; /* stop timer */
   149d2:	f8bd 3010 	ldrh.w	r3, [sp, #16]
    ip_addr_set_ip4_u32(&dhcp->server_ip_addr, lwip_htonl(dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_SERVER_ID)));
   149d6:	6890      	ldr	r0, [r2, #8]
    dhcp->request_timeout = 0; /* stop timer */
   149d8:	812b      	strh	r3, [r5, #8]
    ip_addr_set_ip4_u32(&dhcp->server_ip_addr, lwip_htonl(dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_SERVER_ID)));
   149da:	f7fe fe91 	bl	13700 <lwip_htonl>
   149de:	61a8      	str	r0, [r5, #24]
    ip4_addr_copy(dhcp->offered_ip_addr, msg_in->yiaddr);
   149e0:	6923      	ldr	r3, [r4, #16]
   149e2:	61eb      	str	r3, [r5, #28]
    dhcp_select(netif);
   149e4:	4650      	mov	r0, sl
   149e6:	f7ff fb7f 	bl	140e8 <dhcp_select>
   149ea:	e56d      	b.n	144c8 <dhcp_recv+0x2c>
    if (dhcp->state == DHCP_STATE_REQUESTING) {
   149ec:	f899 3005 	ldrb.w	r3, [r9, #5]
   149f0:	2b01      	cmp	r3, #1
   149f2:	d028      	beq.n	14a46 <dhcp_recv+0x5aa>
    else if ((dhcp->state == DHCP_STATE_REBOOTING) || (dhcp->state == DHCP_STATE_REBINDING) ||
   149f4:	3b03      	subs	r3, #3
   149f6:	2b02      	cmp	r3, #2
   149f8:	f63f ad66 	bhi.w	144c8 <dhcp_recv+0x2c>
      dhcp_handle_ack(netif, msg_in);
   149fc:	4621      	mov	r1, r4
   149fe:	f8da 0024 	ldr.w	r0, [sl, #36]	; 0x24
   14a02:	f7ff fa4b 	bl	13e9c <dhcp_handle_ack.isra.2>
      dhcp_bind(netif);
   14a06:	4650      	mov	r0, sl
   14a08:	f7ff f9be 	bl	13d88 <dhcp_bind>
   14a0c:	e55c      	b.n	144c8 <dhcp_recv+0x2c>
           ((dhcp->state == DHCP_STATE_REBOOTING) || (dhcp->state == DHCP_STATE_REQUESTING) ||
   14a0e:	f899 3005 	ldrb.w	r3, [r9, #5]
  else if ((msg_type == DHCP_NAK) &&
   14a12:	1eda      	subs	r2, r3, #3
   14a14:	2a02      	cmp	r2, #2
   14a16:	d902      	bls.n	14a1e <dhcp_recv+0x582>
           ((dhcp->state == DHCP_STATE_REBOOTING) || (dhcp->state == DHCP_STATE_REQUESTING) ||
   14a18:	2b01      	cmp	r3, #1
   14a1a:	f47f ad55 	bne.w	144c8 <dhcp_recv+0x2c>
  struct dhcp *dhcp = netif_dhcp_data(netif);
   14a1e:	f8da 3024 	ldr.w	r3, [sl, #36]	; 0x24
  if (new_state != dhcp->state) {
   14a22:	795a      	ldrb	r2, [r3, #5]
   14a24:	2a0c      	cmp	r2, #12
   14a26:	d004      	beq.n	14a32 <dhcp_recv+0x596>
    dhcp->tries = 0;
   14a28:	2200      	movs	r2, #0
    dhcp->state = new_state;
   14a2a:	210c      	movs	r1, #12
   14a2c:	7159      	strb	r1, [r3, #5]
    dhcp->tries = 0;
   14a2e:	719a      	strb	r2, [r3, #6]
    dhcp->request_timeout = 0;
   14a30:	811a      	strh	r2, [r3, #8]
  netif_set_addr(netif, IP4_ADDR_ANY4, IP4_ADDR_ANY4, IP4_ADDR_ANY4);
   14a32:	4b17      	ldr	r3, [pc, #92]	; (14a90 <dhcp_recv+0x5f4>)
   14a34:	4650      	mov	r0, sl
   14a36:	461a      	mov	r2, r3
   14a38:	4619      	mov	r1, r3
   14a3a:	f002 fc39 	bl	172b0 <netif_set_addr>
  dhcp_discover(netif);
   14a3e:	4650      	mov	r0, sl
   14a40:	f7ff fc5a 	bl	142f8 <dhcp_discover>
   14a44:	e540      	b.n	144c8 <dhcp_recv+0x2c>
      dhcp_handle_ack(netif, msg_in);
   14a46:	4621      	mov	r1, r4
   14a48:	f8da 0024 	ldr.w	r0, [sl, #36]	; 0x24
   14a4c:	f7ff fa26 	bl	13e9c <dhcp_handle_ack.isra.2>
      if ((netif->flags & NETIF_FLAG_ETHARP) != 0) {
   14a50:	f89a 3035 	ldrb.w	r3, [sl, #53]	; 0x35
   14a54:	071b      	lsls	r3, r3, #28
   14a56:	d5d6      	bpl.n	14a06 <dhcp_recv+0x56a>
  struct dhcp *dhcp = netif_dhcp_data(netif);
   14a58:	f8da 4024 	ldr.w	r4, [sl, #36]	; 0x24
  if (new_state != dhcp->state) {
   14a5c:	7963      	ldrb	r3, [r4, #5]
   14a5e:	2b08      	cmp	r3, #8
   14a60:	d004      	beq.n	14a6c <dhcp_recv+0x5d0>
    dhcp->tries = 0;
   14a62:	9904      	ldr	r1, [sp, #16]
   14a64:	71a1      	strb	r1, [r4, #6]
    dhcp->state = new_state;
   14a66:	2308      	movs	r3, #8
    dhcp->request_timeout = 0;
   14a68:	8121      	strh	r1, [r4, #8]
    dhcp->state = new_state;
   14a6a:	7163      	strb	r3, [r4, #5]
  result = etharp_query(netif, &dhcp->offered_ip_addr, NULL);
   14a6c:	4650      	mov	r0, sl
   14a6e:	2200      	movs	r2, #0
   14a70:	f104 011c 	add.w	r1, r4, #28
   14a74:	f001 fd84 	bl	16580 <etharp_query>
  if (dhcp->tries < 255) {
   14a78:	79a3      	ldrb	r3, [r4, #6]
   14a7a:	2bff      	cmp	r3, #255	; 0xff
    dhcp->tries++;
   14a7c:	bf1c      	itt	ne
   14a7e:	3301      	addne	r3, #1
   14a80:	71a3      	strbne	r3, [r4, #6]
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
   14a82:	2301      	movs	r3, #1
   14a84:	8123      	strh	r3, [r4, #8]
   14a86:	e51f      	b.n	144c8 <dhcp_recv+0x2c>
   14a88:	20002a54 	.word	0x20002a54
   14a8c:	20002a60 	.word	0x20002a60
   14a90:	0002d58c 	.word	0x0002d58c

00014a94 <dhcp_network_changed>:
  struct dhcp *dhcp = netif_dhcp_data(netif);
   14a94:	6a43      	ldr	r3, [r0, #36]	; 0x24
  if (!dhcp) {
   14a96:	b153      	cbz	r3, 14aae <dhcp_network_changed+0x1a>
  switch (dhcp->state) {
   14a98:	795a      	ldrb	r2, [r3, #5]
   14a9a:	2a0a      	cmp	r2, #10
   14a9c:	d80c      	bhi.n	14ab8 <dhcp_network_changed+0x24>
   14a9e:	e8df f002 	tbb	[pc, r2]
   14aa2:	0b06      	.short	0x0b06
   14aa4:	0707070b 	.word	0x0707070b
   14aa8:	0b0b0b0b 	.word	0x0b0b0b0b
   14aac:	07          	.byte	0x07
   14aad:	00          	.byte	0x00
   14aae:	4770      	bx	lr
      dhcp->tries = 0;
   14ab0:	2200      	movs	r2, #0
   14ab2:	719a      	strb	r2, [r3, #6]
      dhcp_reboot(netif);
   14ab4:	f7ff ba42 	b.w	13f3c <dhcp_reboot>
      dhcp->tries = 0;
   14ab8:	2200      	movs	r2, #0
   14aba:	719a      	strb	r2, [r3, #6]
      dhcp_discover(netif);
   14abc:	f7ff bc1c 	b.w	142f8 <dhcp_discover>

00014ac0 <dhcp_arp_reply>:
  LWIP_ERROR("netif != NULL", (netif != NULL), return;);
   14ac0:	2800      	cmp	r0, #0
   14ac2:	f000 809d 	beq.w	14c00 <dhcp_arp_reply+0x140>
{
   14ac6:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  dhcp = netif_dhcp_data(netif);
   14aca:	6a45      	ldr	r5, [r0, #36]	; 0x24
{
   14acc:	b083      	sub	sp, #12
  if ((dhcp != NULL) && (dhcp->state == DHCP_STATE_CHECKING)) {
   14ace:	b115      	cbz	r5, 14ad6 <dhcp_arp_reply+0x16>
   14ad0:	796b      	ldrb	r3, [r5, #5]
   14ad2:	2b08      	cmp	r3, #8
   14ad4:	d002      	beq.n	14adc <dhcp_arp_reply+0x1c>
}
   14ad6:	b003      	add	sp, #12
   14ad8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    if (ip4_addr_cmp(addr, &dhcp->offered_ip_addr)) {
   14adc:	680a      	ldr	r2, [r1, #0]
   14ade:	69eb      	ldr	r3, [r5, #28]
   14ae0:	429a      	cmp	r2, r3
   14ae2:	d1f8      	bne.n	14ad6 <dhcp_arp_reply+0x16>
    dhcp->tries = 0;
   14ae4:	2300      	movs	r3, #0
    dhcp->state = new_state;
   14ae6:	220c      	movs	r2, #12
   14ae8:	716a      	strb	r2, [r5, #5]
   14aea:	4604      	mov	r4, r0
    dhcp->tries = 0;
   14aec:	71ab      	strb	r3, [r5, #6]
    dhcp->request_timeout = 0;
   14aee:	812b      	strh	r3, [r5, #8]
  p_out = pbuf_alloc(PBUF_TRANSPORT, sizeof(struct dhcp_msg), PBUF_RAM);
   14af0:	f44f 7220 	mov.w	r2, #640	; 0x280
   14af4:	f44f 719a 	mov.w	r1, #308	; 0x134
   14af8:	2036      	movs	r0, #54	; 0x36
   14afa:	f002 fccb 	bl	17494 <pbuf_alloc>
  if (p_out == NULL) {
   14afe:	4680      	mov	r8, r0
   14b00:	2800      	cmp	r0, #0
   14b02:	d075      	beq.n	14bf0 <dhcp_arp_reply+0x130>
    if (dhcp->tries == 0) {
   14b04:	79ab      	ldrb	r3, [r5, #6]
      xid = LWIP_RAND();
   14b06:	f8df 912c 	ldr.w	r9, [pc, #300]	; 14c34 <dhcp_arp_reply+0x174>
    if (dhcp->tries == 0) {
   14b0a:	2b00      	cmp	r3, #0
   14b0c:	d079      	beq.n	14c02 <dhcp_arp_reply+0x142>
   14b0e:	f8d9 0000 	ldr.w	r0, [r9]
  msg_out = (struct dhcp_msg *)p_out->payload;
   14b12:	f8d8 6004 	ldr.w	r6, [r8, #4]
    dhcp->xid = xid;
   14b16:	6028      	str	r0, [r5, #0]
  memset(msg_out, 0, sizeof(struct dhcp_msg));
   14b18:	f44f 729a 	mov.w	r2, #308	; 0x134
   14b1c:	2100      	movs	r1, #0
   14b1e:	4630      	mov	r0, r6
   14b20:	f013 f99c 	bl	27e5c <memset>
  msg_out->op = DHCP_BOOTREQUEST;
   14b24:	2301      	movs	r3, #1
   14b26:	7033      	strb	r3, [r6, #0]
  msg_out->htype = LWIP_IANA_HWTYPE_ETHERNET;
   14b28:	7073      	strb	r3, [r6, #1]
  msg_out->hlen = netif->hwaddr_len;
   14b2a:	f894 3034 	ldrb.w	r3, [r4, #52]	; 0x34
   14b2e:	70b3      	strb	r3, [r6, #2]
  msg_out->xid = lwip_htonl(dhcp->xid);
   14b30:	6828      	ldr	r0, [r5, #0]
   14b32:	f7fe fde5 	bl	13700 <lwip_htonl>
    ip4_addr_copy(msg_out->ciaddr, *netif_ip4_addr(netif));
   14b36:	6861      	ldr	r1, [r4, #4]
   14b38:	60f1      	str	r1, [r6, #12]
  msg_out->xid = lwip_htonl(dhcp->xid);
   14b3a:	6070      	str	r0, [r6, #4]
   14b3c:	f104 0332 	add.w	r3, r4, #50	; 0x32
   14b40:	f106 021c 	add.w	r2, r6, #28
   14b44:	429a      	cmp	r2, r3
    msg_out->chaddr[i] = netif->hwaddr[i];
   14b46:	f894 302e 	ldrb.w	r3, [r4, #46]	; 0x2e
   14b4a:	7733      	strb	r3, [r6, #28]
   14b4c:	f894 302f 	ldrb.w	r3, [r4, #47]	; 0x2f
   14b50:	7773      	strb	r3, [r6, #29]
   14b52:	d205      	bcs.n	14b60 <dhcp_arp_reply+0xa0>
   14b54:	f106 0320 	add.w	r3, r6, #32
   14b58:	f104 022e 	add.w	r2, r4, #46	; 0x2e
   14b5c:	4293      	cmp	r3, r2
   14b5e:	d855      	bhi.n	14c0c <dhcp_arp_reply+0x14c>
   14b60:	6b23      	ldr	r3, [r4, #48]	; 0x30
   14b62:	f8c6 301e 	str.w	r3, [r6, #30]
  options[options_out_len++] = value;
   14b66:	2304      	movs	r3, #4
  options[options_out_len++] = option_type;
   14b68:	2135      	movs	r1, #53	; 0x35
  options[options_out_len++] = option_len;
   14b6a:	2201      	movs	r2, #1
  options[options_out_len++] = option_type;
   14b6c:	f886 10f0 	strb.w	r1, [r6, #240]	; 0xf0
  options[options_out_len++] = option_len;
   14b70:	f886 20f1 	strb.w	r2, [r6, #241]	; 0xf1
  options[options_out_len++] = value;
   14b74:	f886 30f2 	strb.w	r3, [r6, #242]	; 0xf2
    struct dhcp_msg *msg_out = (struct dhcp_msg *)p_out->payload;
   14b78:	f8d8 7004 	ldr.w	r7, [r8, #4]
  msg_out->cookie = PP_HTONL(DHCP_MAGIC_COOKIE);
   14b7c:	2263      	movs	r2, #99	; 0x63
   14b7e:	f886 20ec 	strb.w	r2, [r6, #236]	; 0xec
   14b82:	f886 20ef 	strb.w	r2, [r6, #239]	; 0xef
   14b86:	2153      	movs	r1, #83	; 0x53
  options[options_out_len++] = option_type;
   14b88:	2232      	movs	r2, #50	; 0x32
  msg_out->cookie = PP_HTONL(DHCP_MAGIC_COOKIE);
   14b8a:	f06f 007d 	mvn.w	r0, #125	; 0x7d
   14b8e:	f886 00ed 	strb.w	r0, [r6, #237]	; 0xed
   14b92:	f886 10ee 	strb.w	r1, [r6, #238]	; 0xee
  options[options_out_len++] = option_len;
   14b96:	f887 30f4 	strb.w	r3, [r7, #244]	; 0xf4
  options[options_out_len++] = option_type;
   14b9a:	f887 20f3 	strb.w	r2, [r7, #243]	; 0xf3
    options_out_len = dhcp_option_long(options_out_len, msg_out->options, lwip_ntohl(ip4_addr_get_u32(&dhcp->offered_ip_addr)));
   14b9e:	69e8      	ldr	r0, [r5, #28]
   14ba0:	f7fe fdae 	bl	13700 <lwip_htonl>
  options[options_out_len++] = DHCP_OPTION_END;
   14ba4:	23ff      	movs	r3, #255	; 0xff
  options[options_out_len++] = (u8_t)((value & 0x00ff0000UL) >> 16);
   14ba6:	0c01      	lsrs	r1, r0, #16
  options[options_out_len++] = (u8_t)((value & 0x0000ff00UL) >> 8);
   14ba8:	0a02      	lsrs	r2, r0, #8
  options[options_out_len++] = (u8_t)((value & 0xff000000UL) >> 24);
   14baa:	0e06      	lsrs	r6, r0, #24
  options[options_out_len++] = DHCP_OPTION_END;
   14bac:	f887 30f9 	strb.w	r3, [r7, #249]	; 0xf9
  options[options_out_len++] = (u8_t)((value & 0x000000ffUL));
   14bb0:	f887 00f8 	strb.w	r0, [r7, #248]	; 0xf8
  options[options_out_len++] = (u8_t)((value & 0x00ff0000UL) >> 16);
   14bb4:	f887 10f6 	strb.w	r1, [r7, #246]	; 0xf6
  options[options_out_len++] = (u8_t)((value & 0x0000ff00UL) >> 8);
   14bb8:	f887 20f7 	strb.w	r2, [r7, #247]	; 0xf7
   14bbc:	2100      	movs	r1, #0
   14bbe:	223a      	movs	r2, #58	; 0x3a
  options[options_out_len++] = (u8_t)((value & 0xff000000UL) >> 24);
   14bc0:	f887 60f5 	strb.w	r6, [r7, #245]	; 0xf5
   14bc4:	f107 00fa 	add.w	r0, r7, #250	; 0xfa
   14bc8:	f013 f948 	bl	27e5c <memset>
  pbuf_realloc(p_out, (u16_t)(sizeof(struct dhcp_msg) - DHCP_OPTIONS_LEN + options_out_len));
   14bcc:	f44f 719a 	mov.w	r1, #308	; 0x134
   14bd0:	4640      	mov	r0, r8
   14bd2:	f002 fd41 	bl	17658 <pbuf_realloc>
    result = udp_sendto_if_src(dhcp_pcb, p_out, IP_ADDR_BROADCAST, LWIP_IANA_PORT_DHCP_SERVER, netif, IP4_ADDR_ANY);
   14bd6:	4b15      	ldr	r3, [pc, #84]	; (14c2c <dhcp_arp_reply+0x16c>)
   14bd8:	9301      	str	r3, [sp, #4]
   14bda:	f8d9 0004 	ldr.w	r0, [r9, #4]
   14bde:	9400      	str	r4, [sp, #0]
   14be0:	2343      	movs	r3, #67	; 0x43
   14be2:	4a13      	ldr	r2, [pc, #76]	; (14c30 <dhcp_arp_reply+0x170>)
   14be4:	4641      	mov	r1, r8
   14be6:	f006 fbf1 	bl	1b3cc <udp_sendto_if_src>
    pbuf_free(p_out);
   14bea:	4640      	mov	r0, r8
   14bec:	f002 fdfe 	bl	177ec <pbuf_free>
  if (dhcp->tries < 255) {
   14bf0:	79ab      	ldrb	r3, [r5, #6]
   14bf2:	2bff      	cmp	r3, #255	; 0xff
    dhcp->tries++;
   14bf4:	bf1c      	itt	ne
   14bf6:	3301      	addne	r3, #1
   14bf8:	71ab      	strbne	r3, [r5, #6]
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
   14bfa:	2314      	movs	r3, #20
   14bfc:	812b      	strh	r3, [r5, #8]
   14bfe:	e76a      	b.n	14ad6 <dhcp_arp_reply+0x16>
   14c00:	4770      	bx	lr
      xid = LWIP_RAND();
   14c02:	f013 f9bd 	bl	27f80 <rand>
   14c06:	f8c9 0000 	str.w	r0, [r9]
   14c0a:	e782      	b.n	14b12 <dhcp_arp_reply+0x52>
    msg_out->chaddr[i] = netif->hwaddr[i];
   14c0c:	f894 3030 	ldrb.w	r3, [r4, #48]	; 0x30
   14c10:	77b3      	strb	r3, [r6, #30]
   14c12:	f894 3031 	ldrb.w	r3, [r4, #49]	; 0x31
   14c16:	77f3      	strb	r3, [r6, #31]
   14c18:	f894 3032 	ldrb.w	r3, [r4, #50]	; 0x32
   14c1c:	f886 3020 	strb.w	r3, [r6, #32]
   14c20:	f894 3033 	ldrb.w	r3, [r4, #51]	; 0x33
   14c24:	f886 3021 	strb.w	r3, [r6, #33]	; 0x21
   14c28:	e79d      	b.n	14b66 <dhcp_arp_reply+0xa6>
   14c2a:	bf00      	nop
   14c2c:	0002d58c 	.word	0x0002d58c
   14c30:	0002d588 	.word	0x0002d588
   14c34:	200027b8 	.word	0x200027b8

00014c38 <dhcp_renew>:
{
   14c38:	b5f0      	push	{r4, r5, r6, r7, lr}
  struct dhcp *dhcp = netif_dhcp_data(netif);
   14c3a:	6a44      	ldr	r4, [r0, #36]	; 0x24
  if (new_state != dhcp->state) {
   14c3c:	7963      	ldrb	r3, [r4, #5]
   14c3e:	2b05      	cmp	r3, #5
{
   14c40:	b085      	sub	sp, #20
   14c42:	4605      	mov	r5, r0
  if (new_state != dhcp->state) {
   14c44:	d004      	beq.n	14c50 <dhcp_renew+0x18>
    dhcp->tries = 0;
   14c46:	2300      	movs	r3, #0
    dhcp->state = new_state;
   14c48:	2205      	movs	r2, #5
   14c4a:	7162      	strb	r2, [r4, #5]
    dhcp->tries = 0;
   14c4c:	71a3      	strb	r3, [r4, #6]
    dhcp->request_timeout = 0;
   14c4e:	8123      	strh	r3, [r4, #8]
  p_out = dhcp_create_msg(netif, dhcp, DHCP_REQUEST, &options_out_len);
   14c50:	f10d 030e 	add.w	r3, sp, #14
   14c54:	2203      	movs	r2, #3
   14c56:	4621      	mov	r1, r4
   14c58:	4628      	mov	r0, r5
   14c5a:	f7fe fff7 	bl	13c4c <dhcp_create_msg>
  if (p_out != NULL) {
   14c5e:	4606      	mov	r6, r0
   14c60:	2800      	cmp	r0, #0
   14c62:	d07f      	beq.n	14d64 <dhcp_renew+0x12c>
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
   14c64:	f8bd 300e 	ldrh.w	r3, [sp, #14]
   14c68:	6840      	ldr	r0, [r0, #4]
  options[options_out_len++] = option_type;
   14c6a:	1c5a      	adds	r2, r3, #1
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
   14c6c:	30f0      	adds	r0, #240	; 0xf0
  options[options_out_len++] = option_len;
   14c6e:	b292      	uxth	r2, r2
   14c70:	2102      	movs	r1, #2
  options[options_out_len++] = option_type;
   14c72:	2739      	movs	r7, #57	; 0x39
   14c74:	54c7      	strb	r7, [r0, r3]
  options[options_out_len++] = option_len;
   14c76:	5481      	strb	r1, [r0, r2]
   14c78:	185a      	adds	r2, r3, r1
    options_out_len = dhcp_option_short(options_out_len, msg_out->options, DHCP_MAX_MSG_LEN(netif));
   14c7a:	f8b5 c02c 	ldrh.w	ip, [r5, #44]	; 0x2c
  options[options_out_len++] = (u8_t)((value & 0xff00U) >> 8);
   14c7e:	1cdf      	adds	r7, r3, #3
   14c80:	b292      	uxth	r2, r2
   14c82:	ea4f 2e1c 	mov.w	lr, ip, lsr #8
  options[options_out_len++] = (u8_t) (value & 0x00ffU);
   14c86:	b2bf      	uxth	r7, r7
   14c88:	1d19      	adds	r1, r3, #4
  options[options_out_len++] = (u8_t)((value & 0xff00U) >> 8);
   14c8a:	f800 e002 	strb.w	lr, [r0, r2]
  options[options_out_len++] = option_type;
   14c8e:	b289      	uxth	r1, r1
   14c90:	1d5a      	adds	r2, r3, #5
  options[options_out_len++] = (u8_t) (value & 0x00ffU);
   14c92:	f800 c007 	strb.w	ip, [r0, r7]
  options[options_out_len++] = option_len;
   14c96:	b292      	uxth	r2, r2
   14c98:	f103 0e06 	add.w	lr, r3, #6
  options[options_out_len++] = option_type;
   14c9c:	f04f 0c37 	mov.w	ip, #55	; 0x37
   14ca0:	f800 c001 	strb.w	ip, [r0, r1]
  options[options_out_len++] = value;
   14ca4:	fa1f fe8e 	uxth.w	lr, lr
   14ca8:	1ddf      	adds	r7, r3, #7
  options[options_out_len++] = option_len;
   14caa:	f04f 0c04 	mov.w	ip, #4
   14cae:	f800 c002 	strb.w	ip, [r0, r2]
  options[options_out_len++] = value;
   14cb2:	b2bf      	uxth	r7, r7
   14cb4:	f103 0108 	add.w	r1, r3, #8
   14cb8:	f04f 0c01 	mov.w	ip, #1
   14cbc:	f800 c00e 	strb.w	ip, [r0, lr]
   14cc0:	b289      	uxth	r1, r1
   14cc2:	f103 0209 	add.w	r2, r3, #9
   14cc6:	f04f 0c03 	mov.w	ip, #3
   14cca:	f800 c007 	strb.w	ip, [r0, r7]
   14cce:	f103 0e0a 	add.w	lr, r3, #10
   14cd2:	b292      	uxth	r2, r2
   14cd4:	271c      	movs	r7, #28
  options[options_out_len++] = DHCP_OPTION_END;
   14cd6:	330b      	adds	r3, #11
  options[options_out_len++] = value;
   14cd8:	5447      	strb	r7, [r0, r1]
  options[options_out_len++] = DHCP_OPTION_END;
   14cda:	b29b      	uxth	r3, r3
   14cdc:	fa1f f18e 	uxth.w	r1, lr
  options[options_out_len++] = value;
   14ce0:	2706      	movs	r7, #6
   14ce2:	5487      	strb	r7, [r0, r2]
  while (((options_out_len < DHCP_MIN_OPTIONS_LEN) || (options_out_len & 3)) &&
   14ce4:	2b43      	cmp	r3, #67	; 0x43
  options[options_out_len++] = DHCP_OPTION_END;
   14ce6:	f04f 02ff 	mov.w	r2, #255	; 0xff
      options_out_len = dhcp_option_byte(options_out_len, msg_out->options, dhcp_discover_request_options[i]);
   14cea:	f8ad e00e 	strh.w	lr, [sp, #14]
  options[options_out_len++] = DHCP_OPTION_END;
   14cee:	5442      	strb	r2, [r0, r1]
  while (((options_out_len < DHCP_MIN_OPTIONS_LEN) || (options_out_len & 3)) &&
   14cf0:	d83b      	bhi.n	14d6a <dhcp_renew+0x132>
    options[options_out_len++] = 0;
   14cf2:	2100      	movs	r1, #0
   14cf4:	1c5a      	adds	r2, r3, #1
   14cf6:	b292      	uxth	r2, r2
  while (((options_out_len < DHCP_MIN_OPTIONS_LEN) || (options_out_len & 3)) &&
   14cf8:	2a44      	cmp	r2, #68	; 0x44
    options[options_out_len++] = 0;
   14cfa:	54c1      	strb	r1, [r0, r3]
   14cfc:	4613      	mov	r3, r2
  while (((options_out_len < DHCP_MIN_OPTIONS_LEN) || (options_out_len & 3)) &&
   14cfe:	d1f9      	bne.n	14cf4 <dhcp_renew+0xbc>
  pbuf_realloc(p_out, (u16_t)(sizeof(struct dhcp_msg) - DHCP_OPTIONS_LEN + options_out_len));
   14d00:	32f0      	adds	r2, #240	; 0xf0
   14d02:	b291      	uxth	r1, r2
   14d04:	4630      	mov	r0, r6
   14d06:	f002 fca7 	bl	17658 <pbuf_realloc>
    result = udp_sendto_if(dhcp_pcb, p_out, &dhcp->server_ip_addr, LWIP_IANA_PORT_DHCP_SERVER, netif);
   14d0a:	4b19      	ldr	r3, [pc, #100]	; (14d70 <dhcp_renew+0x138>)
   14d0c:	9500      	str	r5, [sp, #0]
   14d0e:	6858      	ldr	r0, [r3, #4]
   14d10:	f104 0218 	add.w	r2, r4, #24
   14d14:	2343      	movs	r3, #67	; 0x43
   14d16:	4631      	mov	r1, r6
   14d18:	f006 fbdc 	bl	1b4d4 <udp_sendto_if>
   14d1c:	4605      	mov	r5, r0
    pbuf_free(p_out);
   14d1e:	4630      	mov	r0, r6
   14d20:	f002 fd64 	bl	177ec <pbuf_free>
  if (dhcp->tries < 255) {
   14d24:	79a3      	ldrb	r3, [r4, #6]
   14d26:	2bff      	cmp	r3, #255	; 0xff
   14d28:	d017      	beq.n	14d5a <dhcp_renew+0x122>
    dhcp->tries++;
   14d2a:	3301      	adds	r3, #1
   14d2c:	b2db      	uxtb	r3, r3
  msecs = (u16_t)(dhcp->tries < 10 ? dhcp->tries * 2000 : 20 * 1000);
   14d2e:	2b09      	cmp	r3, #9
    dhcp->tries++;
   14d30:	71a3      	strb	r3, [r4, #6]
  msecs = (u16_t)(dhcp->tries < 10 ? dhcp->tries * 2000 : 20 * 1000);
   14d32:	d812      	bhi.n	14d5a <dhcp_renew+0x122>
   14d34:	ebc3 1243 	rsb	r2, r3, r3, lsl #5
   14d38:	eb03 0382 	add.w	r3, r3, r2, lsl #2
   14d3c:	011b      	lsls	r3, r3, #4
   14d3e:	b29b      	uxth	r3, r3
   14d40:	4a0c      	ldr	r2, [pc, #48]	; (14d74 <dhcp_renew+0x13c>)
   14d42:	f203 13f3 	addw	r3, r3, #499	; 0x1f3
   14d46:	fb82 1203 	smull	r1, r2, r2, r3
   14d4a:	17db      	asrs	r3, r3, #31
   14d4c:	ebc3 1362 	rsb	r3, r3, r2, asr #5
   14d50:	b29b      	uxth	r3, r3
}
   14d52:	4628      	mov	r0, r5
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
   14d54:	8123      	strh	r3, [r4, #8]
}
   14d56:	b005      	add	sp, #20
   14d58:	bdf0      	pop	{r4, r5, r6, r7, pc}
    result = ERR_MEM;
   14d5a:	2328      	movs	r3, #40	; 0x28
}
   14d5c:	4628      	mov	r0, r5
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
   14d5e:	8123      	strh	r3, [r4, #8]
}
   14d60:	b005      	add	sp, #20
   14d62:	bdf0      	pop	{r4, r5, r6, r7, pc}
    result = ERR_MEM;
   14d64:	f04f 35ff 	mov.w	r5, #4294967295
   14d68:	e7dc      	b.n	14d24 <dhcp_renew+0xec>
  while (((options_out_len < DHCP_MIN_OPTIONS_LEN) || (options_out_len & 3)) &&
   14d6a:	461a      	mov	r2, r3
   14d6c:	e7c8      	b.n	14d00 <dhcp_renew+0xc8>
   14d6e:	bf00      	nop
   14d70:	200027b8 	.word	0x200027b8
   14d74:	10624dd3 	.word	0x10624dd3

00014d78 <dhcp_release_and_stop>:
{
   14d78:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  struct dhcp *dhcp = netif_dhcp_data(netif);
   14d7c:	6a44      	ldr	r4, [r0, #36]	; 0x24
{
   14d7e:	b084      	sub	sp, #16
  if (dhcp == NULL) {
   14d80:	b364      	cbz	r4, 14ddc <dhcp_release_and_stop+0x64>
  if (dhcp->state == DHCP_STATE_OFF) {
   14d82:	7962      	ldrb	r2, [r4, #5]
   14d84:	b352      	cbz	r2, 14ddc <dhcp_release_and_stop+0x64>
  ip_addr_copy(server_ip_addr, dhcp->server_ip_addr);
   14d86:	69a3      	ldr	r3, [r4, #24]
   14d88:	9303      	str	r3, [sp, #12]
u8_t
dhcp_supplied_address(const struct netif *netif)
{
  if ((netif != NULL) && (netif_dhcp_data(netif) != NULL)) {
    struct dhcp *dhcp = netif_dhcp_data(netif);
    return (dhcp->state == DHCP_STATE_BOUND) || (dhcp->state == DHCP_STATE_RENEWING) ||
   14d8a:	2a0a      	cmp	r2, #10
  ip_addr_set_zero_ip4(&dhcp->server_ip_addr);
   14d8c:	f04f 0300 	mov.w	r3, #0
   14d90:	4605      	mov	r5, r0
   14d92:	61a3      	str	r3, [r4, #24]
  ip4_addr_set_zero(&dhcp->offered_ip_addr);
   14d94:	61e3      	str	r3, [r4, #28]
  ip4_addr_set_zero(&dhcp->offered_sn_mask);
   14d96:	6223      	str	r3, [r4, #32]
  ip4_addr_set_zero(&dhcp->offered_gw_addr);
   14d98:	6263      	str	r3, [r4, #36]	; 0x24
  dhcp->offered_t0_lease = dhcp->offered_t1_renew = dhcp->offered_t2_rebind = 0;
   14d9a:	6323      	str	r3, [r4, #48]	; 0x30
   14d9c:	62e3      	str	r3, [r4, #44]	; 0x2c
   14d9e:	62a3      	str	r3, [r4, #40]	; 0x28
  dhcp->t1_renew_time = dhcp->t2_rebind_time = dhcp->lease_used = dhcp->t0_timeout = 0;
   14da0:	f8c4 300e 	str.w	r3, [r4, #14]
   14da4:	f8c4 3012 	str.w	r3, [r4, #18]
    return (dhcp->state == DHCP_STATE_BOUND) || (dhcp->state == DHCP_STATE_RENEWING) ||
   14da8:	d020      	beq.n	14dec <dhcp_release_and_stop+0x74>
  if (dhcp_supplied_address(netif)) {
   14daa:	3a04      	subs	r2, #4
   14dac:	2a01      	cmp	r2, #1
   14dae:	d91d      	bls.n	14dec <dhcp_release_and_stop+0x74>
  netif_set_addr(netif, IP4_ADDR_ANY4, IP4_ADDR_ANY4, IP4_ADDR_ANY4);
   14db0:	4b5a      	ldr	r3, [pc, #360]	; (14f1c <dhcp_release_and_stop+0x1a4>)
   14db2:	4628      	mov	r0, r5
   14db4:	461a      	mov	r2, r3
   14db6:	4619      	mov	r1, r3
   14db8:	f002 fa7a 	bl	172b0 <netif_set_addr>
  if (new_state != dhcp->state) {
   14dbc:	7963      	ldrb	r3, [r4, #5]
   14dbe:	b11b      	cbz	r3, 14dc8 <dhcp_release_and_stop+0x50>
    dhcp->state = new_state;
   14dc0:	2300      	movs	r3, #0
   14dc2:	7163      	strb	r3, [r4, #5]
    dhcp->tries = 0;
   14dc4:	71a3      	strb	r3, [r4, #6]
    dhcp->request_timeout = 0;
   14dc6:	8123      	strh	r3, [r4, #8]
  if (dhcp->pcb_allocated != 0) {
   14dc8:	7923      	ldrb	r3, [r4, #4]
   14dca:	b13b      	cbz	r3, 14ddc <dhcp_release_and_stop+0x64>
  dhcp_pcb_refcount--;
   14dcc:	4e54      	ldr	r6, [pc, #336]	; (14f20 <dhcp_release_and_stop+0x1a8>)
   14dce:	7a35      	ldrb	r5, [r6, #8]
   14dd0:	3d01      	subs	r5, #1
   14dd2:	b2ed      	uxtb	r5, r5
   14dd4:	7235      	strb	r5, [r6, #8]
  if (dhcp_pcb_refcount == 0) {
   14dd6:	b125      	cbz	r5, 14de2 <dhcp_release_and_stop+0x6a>
    dhcp->pcb_allocated = 0;
   14dd8:	2300      	movs	r3, #0
   14dda:	7123      	strb	r3, [r4, #4]
}
   14ddc:	b004      	add	sp, #16
   14dde:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    udp_remove(dhcp_pcb);
   14de2:	6870      	ldr	r0, [r6, #4]
   14de4:	f006 fce6 	bl	1b7b4 <udp_remove>
    dhcp_pcb = NULL;
   14de8:	6075      	str	r5, [r6, #4]
   14dea:	e7f5      	b.n	14dd8 <dhcp_release_and_stop+0x60>
  p_out = pbuf_alloc(PBUF_TRANSPORT, sizeof(struct dhcp_msg), PBUF_RAM);
   14dec:	f44f 7220 	mov.w	r2, #640	; 0x280
   14df0:	f44f 719a 	mov.w	r1, #308	; 0x134
   14df4:	2036      	movs	r0, #54	; 0x36
   14df6:	f002 fb4d 	bl	17494 <pbuf_alloc>
  if (p_out == NULL) {
   14dfa:	4680      	mov	r8, r0
   14dfc:	2800      	cmp	r0, #0
   14dfe:	d0d7      	beq.n	14db0 <dhcp_release_and_stop+0x38>
    if (dhcp->tries == 0) {
   14e00:	79a3      	ldrb	r3, [r4, #6]
      xid = LWIP_RAND();
   14e02:	f8df 911c 	ldr.w	r9, [pc, #284]	; 14f20 <dhcp_release_and_stop+0x1a8>
    if (dhcp->tries == 0) {
   14e06:	2b00      	cmp	r3, #0
   14e08:	f000 8083 	beq.w	14f12 <dhcp_release_and_stop+0x19a>
   14e0c:	f8d9 0000 	ldr.w	r0, [r9]
  msg_out = (struct dhcp_msg *)p_out->payload;
   14e10:	f8d8 6004 	ldr.w	r6, [r8, #4]
    dhcp->xid = xid;
   14e14:	6020      	str	r0, [r4, #0]
  memset(msg_out, 0, sizeof(struct dhcp_msg));
   14e16:	f44f 729a 	mov.w	r2, #308	; 0x134
   14e1a:	2100      	movs	r1, #0
   14e1c:	4630      	mov	r0, r6
   14e1e:	f013 f81d 	bl	27e5c <memset>
  msg_out->op = DHCP_BOOTREQUEST;
   14e22:	2301      	movs	r3, #1
   14e24:	7033      	strb	r3, [r6, #0]
  msg_out->htype = LWIP_IANA_HWTYPE_ETHERNET;
   14e26:	7073      	strb	r3, [r6, #1]
  msg_out->hlen = netif->hwaddr_len;
   14e28:	f895 3034 	ldrb.w	r3, [r5, #52]	; 0x34
   14e2c:	70b3      	strb	r3, [r6, #2]
  msg_out->xid = lwip_htonl(dhcp->xid);
   14e2e:	6820      	ldr	r0, [r4, #0]
   14e30:	f7fe fc66 	bl	13700 <lwip_htonl>
    ip4_addr_copy(msg_out->ciaddr, *netif_ip4_addr(netif));
   14e34:	6869      	ldr	r1, [r5, #4]
   14e36:	60f1      	str	r1, [r6, #12]
  msg_out->xid = lwip_htonl(dhcp->xid);
   14e38:	6070      	str	r0, [r6, #4]
   14e3a:	f105 0332 	add.w	r3, r5, #50	; 0x32
   14e3e:	f106 021c 	add.w	r2, r6, #28
   14e42:	429a      	cmp	r2, r3
    msg_out->chaddr[i] = netif->hwaddr[i];
   14e44:	f895 302e 	ldrb.w	r3, [r5, #46]	; 0x2e
   14e48:	7733      	strb	r3, [r6, #28]
   14e4a:	f895 302f 	ldrb.w	r3, [r5, #47]	; 0x2f
   14e4e:	7773      	strb	r3, [r6, #29]
   14e50:	d205      	bcs.n	14e5e <dhcp_release_and_stop+0xe6>
   14e52:	f106 0320 	add.w	r3, r6, #32
   14e56:	f105 022e 	add.w	r2, r5, #46	; 0x2e
   14e5a:	4293      	cmp	r3, r2
   14e5c:	d84a      	bhi.n	14ef4 <dhcp_release_and_stop+0x17c>
   14e5e:	6b2b      	ldr	r3, [r5, #48]	; 0x30
   14e60:	f8c6 301e 	str.w	r3, [r6, #30]
  options[options_out_len++] = option_type;
   14e64:	2135      	movs	r1, #53	; 0x35
  options[options_out_len++] = option_len;
   14e66:	2201      	movs	r2, #1
  options[options_out_len++] = value;
   14e68:	2307      	movs	r3, #7
  options[options_out_len++] = option_type;
   14e6a:	f886 10f0 	strb.w	r1, [r6, #240]	; 0xf0
  options[options_out_len++] = option_len;
   14e6e:	f886 20f1 	strb.w	r2, [r6, #241]	; 0xf1
  options[options_out_len++] = value;
   14e72:	f886 30f2 	strb.w	r3, [r6, #242]	; 0xf2
  msg_out->cookie = PP_HTONL(DHCP_MAGIC_COOKIE);
   14e76:	2363      	movs	r3, #99	; 0x63
      struct dhcp_msg *msg_out = (struct dhcp_msg *)p_out->payload;
   14e78:	f8d8 7004 	ldr.w	r7, [r8, #4]
  msg_out->cookie = PP_HTONL(DHCP_MAGIC_COOKIE);
   14e7c:	f886 30ec 	strb.w	r3, [r6, #236]	; 0xec
   14e80:	f886 30ef 	strb.w	r3, [r6, #239]	; 0xef
      options_out_len = dhcp_option_long(options_out_len, msg_out->options, lwip_ntohl(ip4_addr_get_u32(ip_2_ip4(&server_ip_addr))));
   14e84:	f10d 0a10 	add.w	sl, sp, #16
  msg_out->cookie = PP_HTONL(DHCP_MAGIC_COOKIE);
   14e88:	f06f 027d 	mvn.w	r2, #125	; 0x7d
   14e8c:	2353      	movs	r3, #83	; 0x53
   14e8e:	f886 20ed 	strb.w	r2, [r6, #237]	; 0xed
   14e92:	f886 30ee 	strb.w	r3, [r6, #238]	; 0xee
  options[options_out_len++] = option_type;
   14e96:	2236      	movs	r2, #54	; 0x36
  options[options_out_len++] = option_len;
   14e98:	2304      	movs	r3, #4
  options[options_out_len++] = option_type;
   14e9a:	f887 20f3 	strb.w	r2, [r7, #243]	; 0xf3
  options[options_out_len++] = option_len;
   14e9e:	f887 30f4 	strb.w	r3, [r7, #244]	; 0xf4
      options_out_len = dhcp_option_long(options_out_len, msg_out->options, lwip_ntohl(ip4_addr_get_u32(ip_2_ip4(&server_ip_addr))));
   14ea2:	f85a 0d04 	ldr.w	r0, [sl, #-4]!
   14ea6:	f7fe fc2b 	bl	13700 <lwip_htonl>
  options[options_out_len++] = (u8_t)((value & 0xff000000UL) >> 24);
   14eaa:	0e03      	lsrs	r3, r0, #24
  options[options_out_len++] = (u8_t)((value & 0x00ff0000UL) >> 16);
   14eac:	0c02      	lsrs	r2, r0, #16
  options[options_out_len++] = (u8_t)((value & 0x000000ffUL));
   14eae:	f887 00f8 	strb.w	r0, [r7, #248]	; 0xf8
  options[options_out_len++] = (u8_t)((value & 0xff000000UL) >> 24);
   14eb2:	f887 30f5 	strb.w	r3, [r7, #245]	; 0xf5
  options[options_out_len++] = (u8_t)((value & 0x0000ff00UL) >> 8);
   14eb6:	0a00      	lsrs	r0, r0, #8
  options[options_out_len++] = DHCP_OPTION_END;
   14eb8:	23ff      	movs	r3, #255	; 0xff
   14eba:	f887 30f9 	strb.w	r3, [r7, #249]	; 0xf9
  options[options_out_len++] = (u8_t)((value & 0x00ff0000UL) >> 16);
   14ebe:	f887 20f6 	strb.w	r2, [r7, #246]	; 0xf6
  options[options_out_len++] = (u8_t)((value & 0x0000ff00UL) >> 8);
   14ec2:	f887 00f7 	strb.w	r0, [r7, #247]	; 0xf7
   14ec6:	223a      	movs	r2, #58	; 0x3a
   14ec8:	f107 00fa 	add.w	r0, r7, #250	; 0xfa
   14ecc:	2100      	movs	r1, #0
   14ece:	f012 ffc5 	bl	27e5c <memset>
  pbuf_realloc(p_out, (u16_t)(sizeof(struct dhcp_msg) - DHCP_OPTIONS_LEN + options_out_len));
   14ed2:	4640      	mov	r0, r8
   14ed4:	f44f 719a 	mov.w	r1, #308	; 0x134
   14ed8:	f002 fbbe 	bl	17658 <pbuf_realloc>
      udp_sendto_if(dhcp_pcb, p_out, &server_ip_addr, LWIP_IANA_PORT_DHCP_SERVER, netif);
   14edc:	f8d9 0004 	ldr.w	r0, [r9, #4]
   14ee0:	9500      	str	r5, [sp, #0]
   14ee2:	4652      	mov	r2, sl
   14ee4:	2343      	movs	r3, #67	; 0x43
   14ee6:	4641      	mov	r1, r8
   14ee8:	f006 faf4 	bl	1b4d4 <udp_sendto_if>
      pbuf_free(p_out);
   14eec:	4640      	mov	r0, r8
   14eee:	f002 fc7d 	bl	177ec <pbuf_free>
   14ef2:	e75d      	b.n	14db0 <dhcp_release_and_stop+0x38>
    msg_out->chaddr[i] = netif->hwaddr[i];
   14ef4:	f895 3030 	ldrb.w	r3, [r5, #48]	; 0x30
   14ef8:	77b3      	strb	r3, [r6, #30]
   14efa:	f895 3031 	ldrb.w	r3, [r5, #49]	; 0x31
   14efe:	77f3      	strb	r3, [r6, #31]
   14f00:	f895 3032 	ldrb.w	r3, [r5, #50]	; 0x32
   14f04:	f886 3020 	strb.w	r3, [r6, #32]
   14f08:	f895 3033 	ldrb.w	r3, [r5, #51]	; 0x33
   14f0c:	f886 3021 	strb.w	r3, [r6, #33]	; 0x21
   14f10:	e7a8      	b.n	14e64 <dhcp_release_and_stop+0xec>
      xid = LWIP_RAND();
   14f12:	f013 f835 	bl	27f80 <rand>
   14f16:	f8c9 0000 	str.w	r0, [r9]
   14f1a:	e779      	b.n	14e10 <dhcp_release_and_stop+0x98>
   14f1c:	0002d58c 	.word	0x0002d58c
   14f20:	200027b8 	.word	0x200027b8

00014f24 <dhcp_start>:
  LWIP_ERROR("netif != NULL", (netif != NULL), return ERR_ARG;);
   14f24:	2800      	cmp	r0, #0
   14f26:	d06e      	beq.n	15006 <dhcp_start+0xe2>
{
   14f28:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  LWIP_ERROR("netif is not up, old style port?", netif_is_up(netif), return ERR_ARG;);
   14f2a:	f890 3035 	ldrb.w	r3, [r0, #53]	; 0x35
   14f2e:	07db      	lsls	r3, r3, #31
   14f30:	d566      	bpl.n	15000 <dhcp_start+0xdc>
  if (netif->mtu < DHCP_MAX_MSG_LEN_MIN_REQUIRED) {
   14f32:	8d83      	ldrh	r3, [r0, #44]	; 0x2c
  dhcp = netif_dhcp_data(netif);
   14f34:	6a45      	ldr	r5, [r0, #36]	; 0x24
  if (netif->mtu < DHCP_MAX_MSG_LEN_MIN_REQUIRED) {
   14f36:	f5b3 7f10 	cmp.w	r3, #576	; 0x240
   14f3a:	d35e      	bcc.n	14ffa <dhcp_start+0xd6>
   14f3c:	4606      	mov	r6, r0
  if (dhcp == NULL) {
   14f3e:	b1f5      	cbz	r5, 14f7e <dhcp_start+0x5a>
  dhcp_pcb_refcount--;
   14f40:	4f32      	ldr	r7, [pc, #200]	; (1500c <dhcp_start+0xe8>)
    if (dhcp->pcb_allocated != 0) {
   14f42:	792b      	ldrb	r3, [r5, #4]
  dhcp_pcb_refcount--;
   14f44:	7a3c      	ldrb	r4, [r7, #8]
    if (dhcp->pcb_allocated != 0) {
   14f46:	b31b      	cbz	r3, 14f90 <dhcp_start+0x6c>
  dhcp_pcb_refcount--;
   14f48:	3c01      	subs	r4, #1
   14f4a:	b2e4      	uxtb	r4, r4
   14f4c:	723c      	strb	r4, [r7, #8]
  if (dhcp_pcb_refcount == 0) {
   14f4e:	2c00      	cmp	r4, #0
   14f50:	d043      	beq.n	14fda <dhcp_start+0xb6>
  memset(dhcp, 0, sizeof(struct dhcp));
   14f52:	2234      	movs	r2, #52	; 0x34
   14f54:	2100      	movs	r1, #0
   14f56:	4628      	mov	r0, r5
   14f58:	f012 ff80 	bl	27e5c <memset>
  dhcp->pcb_allocated = 1;
   14f5c:	2301      	movs	r3, #1
   14f5e:	712b      	strb	r3, [r5, #4]
  if (!netif_is_link_up(netif)) {
   14f60:	f896 3035 	ldrb.w	r3, [r6, #53]	; 0x35
  dhcp_pcb_refcount++;
   14f64:	3401      	adds	r4, #1
  if (!netif_is_link_up(netif)) {
   14f66:	f013 0004 	ands.w	r0, r3, #4
  dhcp_pcb_refcount++;
   14f6a:	723c      	strb	r4, [r7, #8]
  if (!netif_is_link_up(netif)) {
   14f6c:	d12f      	bne.n	14fce <dhcp_start+0xaa>
  if (new_state != dhcp->state) {
   14f6e:	796b      	ldrb	r3, [r5, #5]
   14f70:	2b02      	cmp	r3, #2
   14f72:	d030      	beq.n	14fd6 <dhcp_start+0xb2>
    dhcp->state = new_state;
   14f74:	2302      	movs	r3, #2
    dhcp->tries = 0;
   14f76:	71a8      	strb	r0, [r5, #6]
    dhcp->state = new_state;
   14f78:	716b      	strb	r3, [r5, #5]
    dhcp->request_timeout = 0;
   14f7a:	8128      	strh	r0, [r5, #8]
   14f7c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    dhcp = (struct dhcp *)mem_malloc(sizeof(struct dhcp));
   14f7e:	2034      	movs	r0, #52	; 0x34
   14f80:	f002 f828 	bl	16fd4 <mem_malloc>
    if (dhcp == NULL) {
   14f84:	4605      	mov	r5, r0
   14f86:	2800      	cmp	r0, #0
   14f88:	d037      	beq.n	14ffa <dhcp_start+0xd6>
   14f8a:	4f20      	ldr	r7, [pc, #128]	; (1500c <dhcp_start+0xe8>)
    netif_set_client_data(netif, LWIP_NETIF_CLIENT_DATA_INDEX_DHCP, dhcp);
   14f8c:	6270      	str	r0, [r6, #36]	; 0x24
   14f8e:	7a3c      	ldrb	r4, [r7, #8]
  memset(dhcp, 0, sizeof(struct dhcp));
   14f90:	2234      	movs	r2, #52	; 0x34
   14f92:	2100      	movs	r1, #0
   14f94:	4628      	mov	r0, r5
   14f96:	f012 ff61 	bl	27e5c <memset>
  if (dhcp_pcb_refcount == 0) {
   14f9a:	2c00      	cmp	r4, #0
   14f9c:	d1de      	bne.n	14f5c <dhcp_start+0x38>
    dhcp_pcb = udp_new();
   14f9e:	f006 fc2f 	bl	1b800 <udp_new>
   14fa2:	6078      	str	r0, [r7, #4]
    if (dhcp_pcb == NULL) {
   14fa4:	b348      	cbz	r0, 14ffa <dhcp_start+0xd6>
    ip_set_option(dhcp_pcb, SOF_BROADCAST);
   14fa6:	7a42      	ldrb	r2, [r0, #9]
    udp_bind(dhcp_pcb, IP4_ADDR_ANY, LWIP_IANA_PORT_DHCP_CLIENT);
   14fa8:	4919      	ldr	r1, [pc, #100]	; (15010 <dhcp_start+0xec>)
    ip_set_option(dhcp_pcb, SOF_BROADCAST);
   14faa:	f042 0220 	orr.w	r2, r2, #32
   14fae:	7242      	strb	r2, [r0, #9]
    udp_bind(dhcp_pcb, IP4_ADDR_ANY, LWIP_IANA_PORT_DHCP_CLIENT);
   14fb0:	2244      	movs	r2, #68	; 0x44
   14fb2:	f006 f995 	bl	1b2e0 <udp_bind>
    udp_connect(dhcp_pcb, IP4_ADDR_ANY, LWIP_IANA_PORT_DHCP_SERVER);
   14fb6:	2243      	movs	r2, #67	; 0x43
   14fb8:	4915      	ldr	r1, [pc, #84]	; (15010 <dhcp_start+0xec>)
   14fba:	6878      	ldr	r0, [r7, #4]
   14fbc:	f006 fbca 	bl	1b754 <udp_connect>
    udp_recv(dhcp_pcb, dhcp_recv, NULL);
   14fc0:	4622      	mov	r2, r4
   14fc2:	4914      	ldr	r1, [pc, #80]	; (15014 <dhcp_start+0xf0>)
   14fc4:	6878      	ldr	r0, [r7, #4]
   14fc6:	f006 fbf1 	bl	1b7ac <udp_recv>
   14fca:	7a3c      	ldrb	r4, [r7, #8]
   14fcc:	e7c6      	b.n	14f5c <dhcp_start+0x38>
  result = dhcp_discover(netif);
   14fce:	4630      	mov	r0, r6
   14fd0:	f7ff f992 	bl	142f8 <dhcp_discover>
  if (result != ERR_OK) {
   14fd4:	b970      	cbnz	r0, 14ff4 <dhcp_start+0xd0>
    return ERR_OK;
   14fd6:	2000      	movs	r0, #0
   14fd8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    udp_remove(dhcp_pcb);
   14fda:	6878      	ldr	r0, [r7, #4]
   14fdc:	f006 fbea 	bl	1b7b4 <udp_remove>
    dhcp_pcb = NULL;
   14fe0:	607c      	str	r4, [r7, #4]
   14fe2:	7a3c      	ldrb	r4, [r7, #8]
  memset(dhcp, 0, sizeof(struct dhcp));
   14fe4:	2234      	movs	r2, #52	; 0x34
   14fe6:	2100      	movs	r1, #0
   14fe8:	4628      	mov	r0, r5
   14fea:	f012 ff37 	bl	27e5c <memset>
  if (dhcp_pcb_refcount == 0) {
   14fee:	2c00      	cmp	r4, #0
   14ff0:	d1b4      	bne.n	14f5c <dhcp_start+0x38>
   14ff2:	e7d4      	b.n	14f9e <dhcp_start+0x7a>
    dhcp_release_and_stop(netif);
   14ff4:	4630      	mov	r0, r6
   14ff6:	f7ff febf 	bl	14d78 <dhcp_release_and_stop>
    return ERR_MEM;
   14ffa:	f04f 30ff 	mov.w	r0, #4294967295
   14ffe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  LWIP_ERROR("netif != NULL", (netif != NULL), return ERR_ARG;);
   15000:	f06f 000f 	mvn.w	r0, #15
   15004:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   15006:	f06f 000f 	mvn.w	r0, #15
   1500a:	4770      	bx	lr
   1500c:	200027b8 	.word	0x200027b8
   15010:	0002d58c 	.word	0x0002d58c
   15014:	0001449d 	.word	0x0001449d

00015018 <dhcp_coarse_tmr>:
{
   15018:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  NETIF_FOREACH(netif) {
   1501c:	4b6f      	ldr	r3, [pc, #444]	; (151dc <dhcp_coarse_tmr+0x1c4>)
   1501e:	681d      	ldr	r5, [r3, #0]
{
   15020:	b084      	sub	sp, #16
  NETIF_FOREACH(netif) {
   15022:	b1f5      	cbz	r5, 15062 <dhcp_coarse_tmr+0x4a>
   15024:	4e6e      	ldr	r6, [pc, #440]	; (151e0 <dhcp_coarse_tmr+0x1c8>)
    result = udp_sendto_if(dhcp_pcb, p_out, IP_ADDR_BROADCAST, LWIP_IANA_PORT_DHCP_SERVER, netif);
   15026:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 151e8 <dhcp_coarse_tmr+0x1d0>
   1502a:	4f6e      	ldr	r7, [pc, #440]	; (151e4 <dhcp_coarse_tmr+0x1cc>)
    struct dhcp *dhcp = netif_dhcp_data(netif);
   1502c:	6a6c      	ldr	r4, [r5, #36]	; 0x24
    if ((dhcp != NULL) && (dhcp->state != DHCP_STATE_OFF)) {
   1502e:	b1ac      	cbz	r4, 1505c <dhcp_coarse_tmr+0x44>
   15030:	7961      	ldrb	r1, [r4, #5]
   15032:	b199      	cbz	r1, 1505c <dhcp_coarse_tmr+0x44>
      if (dhcp->t0_timeout && (++dhcp->lease_used == dhcp->t0_timeout)) {
   15034:	8aa2      	ldrh	r2, [r4, #20]
   15036:	b12a      	cbz	r2, 15044 <dhcp_coarse_tmr+0x2c>
   15038:	8a63      	ldrh	r3, [r4, #18]
   1503a:	3301      	adds	r3, #1
   1503c:	b29b      	uxth	r3, r3
   1503e:	429a      	cmp	r2, r3
   15040:	8263      	strh	r3, [r4, #18]
   15042:	d011      	beq.n	15068 <dhcp_coarse_tmr+0x50>
      } else if (dhcp->t2_rebind_time && (dhcp->t2_rebind_time-- == 1)) {
   15044:	8a23      	ldrh	r3, [r4, #16]
   15046:	b11b      	cbz	r3, 15050 <dhcp_coarse_tmr+0x38>
   15048:	1e5a      	subs	r2, r3, #1
   1504a:	2b01      	cmp	r3, #1
   1504c:	8222      	strh	r2, [r4, #16]
   1504e:	d012      	beq.n	15076 <dhcp_coarse_tmr+0x5e>
      } else if (dhcp->t1_renew_time && (dhcp->t1_renew_time-- == 1)) {
   15050:	89e3      	ldrh	r3, [r4, #14]
   15052:	b11b      	cbz	r3, 1505c <dhcp_coarse_tmr+0x44>
   15054:	1e5a      	subs	r2, r3, #1
   15056:	2b01      	cmp	r3, #1
   15058:	81e2      	strh	r2, [r4, #14]
   1505a:	d015      	beq.n	15088 <dhcp_coarse_tmr+0x70>
  NETIF_FOREACH(netif) {
   1505c:	682d      	ldr	r5, [r5, #0]
   1505e:	2d00      	cmp	r5, #0
   15060:	d1e4      	bne.n	1502c <dhcp_coarse_tmr+0x14>
}
   15062:	b004      	add	sp, #16
   15064:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
        dhcp_release_and_stop(netif);
   15068:	4628      	mov	r0, r5
   1506a:	f7ff fe85 	bl	14d78 <dhcp_release_and_stop>
        dhcp_start(netif);
   1506e:	4628      	mov	r0, r5
   15070:	f7ff ff58 	bl	14f24 <dhcp_start>
   15074:	e7f2      	b.n	1505c <dhcp_coarse_tmr+0x44>
  if ((dhcp->state == DHCP_STATE_REQUESTING) || (dhcp->state == DHCP_STATE_BOUND) ||
   15076:	f001 03fb 	and.w	r3, r1, #251	; 0xfb
   1507a:	2b01      	cmp	r3, #1
   1507c:	d015      	beq.n	150aa <dhcp_coarse_tmr+0x92>
   1507e:	290a      	cmp	r1, #10
   15080:	d013      	beq.n	150aa <dhcp_coarse_tmr+0x92>
      (dhcp->state == DHCP_STATE_RENEWING) || (dhcp->state == DHCP_STATE_REBINDING)) {
   15082:	2904      	cmp	r1, #4
   15084:	d1ea      	bne.n	1505c <dhcp_coarse_tmr+0x44>
   15086:	e015      	b.n	150b4 <dhcp_coarse_tmr+0x9c>
  if ((dhcp->state == DHCP_STATE_REQUESTING) || (dhcp->state == DHCP_STATE_BOUND) ||
   15088:	f001 03fb 	and.w	r3, r1, #251	; 0xfb
   1508c:	2b01      	cmp	r3, #1
   1508e:	d001      	beq.n	15094 <dhcp_coarse_tmr+0x7c>
   15090:	290a      	cmp	r1, #10
   15092:	d1e3      	bne.n	1505c <dhcp_coarse_tmr+0x44>
    dhcp_renew(netif);
   15094:	4628      	mov	r0, r5
   15096:	f7ff fdcf 	bl	14c38 <dhcp_renew>
    if (((dhcp->t2_timeout - dhcp->lease_used) / 2) >= ((60 + DHCP_COARSE_TIMER_SECS / 2) / DHCP_COARSE_TIMER_SECS)) {
   1509a:	89a3      	ldrh	r3, [r4, #12]
   1509c:	8a62      	ldrh	r2, [r4, #18]
   1509e:	1a9b      	subs	r3, r3, r2
   150a0:	2b01      	cmp	r3, #1
      dhcp->t1_renew_time = (u16_t)((dhcp->t2_timeout - dhcp->lease_used) / 2);
   150a2:	bfc4      	itt	gt
   150a4:	105b      	asrgt	r3, r3, #1
   150a6:	81e3      	strhgt	r3, [r4, #14]
   150a8:	e7d8      	b.n	1505c <dhcp_coarse_tmr+0x44>
    dhcp->tries = 0;
   150aa:	2300      	movs	r3, #0
    dhcp->state = new_state;
   150ac:	2204      	movs	r2, #4
   150ae:	7162      	strb	r2, [r4, #5]
    dhcp->tries = 0;
   150b0:	71a3      	strb	r3, [r4, #6]
    dhcp->request_timeout = 0;
   150b2:	8123      	strh	r3, [r4, #8]
  p_out = dhcp_create_msg(netif, dhcp, DHCP_REQUEST, &options_out_len);
   150b4:	f10d 030e 	add.w	r3, sp, #14
   150b8:	2203      	movs	r2, #3
   150ba:	4621      	mov	r1, r4
   150bc:	4628      	mov	r0, r5
   150be:	f7fe fdc5 	bl	13c4c <dhcp_create_msg>
  if (p_out != NULL) {
   150c2:	4681      	mov	r9, r0
   150c4:	2800      	cmp	r0, #0
   150c6:	d066      	beq.n	15196 <dhcp_coarse_tmr+0x17e>
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
   150c8:	f8bd 300e 	ldrh.w	r3, [sp, #14]
   150cc:	6840      	ldr	r0, [r0, #4]
  options[options_out_len++] = option_type;
   150ce:	1c5a      	adds	r2, r3, #1
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
   150d0:	30f0      	adds	r0, #240	; 0xf0
  options[options_out_len++] = option_len;
   150d2:	b292      	uxth	r2, r2
   150d4:	2102      	movs	r1, #2
  options[options_out_len++] = option_type;
   150d6:	f04f 0e39 	mov.w	lr, #57	; 0x39
   150da:	f800 e003 	strb.w	lr, [r0, r3]
  options[options_out_len++] = option_len;
   150de:	5481      	strb	r1, [r0, r2]
   150e0:	185a      	adds	r2, r3, r1
    options_out_len = dhcp_option_short(options_out_len, msg_out->options, DHCP_MAX_MSG_LEN(netif));
   150e2:	f8b5 a02c 	ldrh.w	sl, [r5, #44]	; 0x2c
  options[options_out_len++] = (u8_t)((value & 0xff00U) >> 8);
   150e6:	f103 0c03 	add.w	ip, r3, #3
   150ea:	b292      	uxth	r2, r2
   150ec:	ea4f 211a 	mov.w	r1, sl, lsr #8
  options[options_out_len++] = (u8_t) (value & 0x00ffU);
   150f0:	fa1f fc8c 	uxth.w	ip, ip
   150f4:	f103 0e04 	add.w	lr, r3, #4
  options[options_out_len++] = (u8_t)((value & 0xff00U) >> 8);
   150f8:	5481      	strb	r1, [r0, r2]
  options[options_out_len++] = option_type;
   150fa:	fa1f fe8e 	uxth.w	lr, lr
   150fe:	1d59      	adds	r1, r3, #5
  options[options_out_len++] = (u8_t) (value & 0x00ffU);
   15100:	f800 a00c 	strb.w	sl, [r0, ip]
  options[options_out_len++] = option_len;
   15104:	b289      	uxth	r1, r1
   15106:	1d9a      	adds	r2, r3, #6
  options[options_out_len++] = option_type;
   15108:	f04f 0a37 	mov.w	sl, #55	; 0x37
   1510c:	f800 a00e 	strb.w	sl, [r0, lr]
  options[options_out_len++] = value;
   15110:	b292      	uxth	r2, r2
   15112:	f103 0c07 	add.w	ip, r3, #7
  options[options_out_len++] = option_len;
   15116:	f04f 0a04 	mov.w	sl, #4
   1511a:	f800 a001 	strb.w	sl, [r0, r1]
  options[options_out_len++] = value;
   1511e:	fa1f fc8c 	uxth.w	ip, ip
   15122:	f103 0e08 	add.w	lr, r3, #8
   15126:	f04f 0a01 	mov.w	sl, #1
   1512a:	f800 a002 	strb.w	sl, [r0, r2]
   1512e:	fa1f fe8e 	uxth.w	lr, lr
   15132:	f103 0109 	add.w	r1, r3, #9
   15136:	f103 020a 	add.w	r2, r3, #10
   1513a:	f04f 0a03 	mov.w	sl, #3
  options[options_out_len++] = DHCP_OPTION_END;
   1513e:	330b      	adds	r3, #11
  options[options_out_len++] = value;
   15140:	f800 a00c 	strb.w	sl, [r0, ip]
   15144:	b292      	uxth	r2, r2
   15146:	f04f 0c1c 	mov.w	ip, #28
   1514a:	b289      	uxth	r1, r1
  options[options_out_len++] = DHCP_OPTION_END;
   1514c:	b29b      	uxth	r3, r3
  options[options_out_len++] = value;
   1514e:	f800 c00e 	strb.w	ip, [r0, lr]
  while (((options_out_len < DHCP_MIN_OPTIONS_LEN) || (options_out_len & 3)) &&
   15152:	2b43      	cmp	r3, #67	; 0x43
  options[options_out_len++] = value;
   15154:	f04f 0c06 	mov.w	ip, #6
  options[options_out_len++] = DHCP_OPTION_END;
   15158:	f04f 0eff 	mov.w	lr, #255	; 0xff
  options[options_out_len++] = value;
   1515c:	f800 c001 	strb.w	ip, [r0, r1]
      options_out_len = dhcp_option_byte(options_out_len, msg_out->options, dhcp_discover_request_options[i]);
   15160:	f8ad 200e 	strh.w	r2, [sp, #14]
  options[options_out_len++] = DHCP_OPTION_END;
   15164:	f800 e002 	strb.w	lr, [r0, r2]
  while (((options_out_len < DHCP_MIN_OPTIONS_LEN) || (options_out_len & 3)) &&
   15168:	d805      	bhi.n	15176 <dhcp_coarse_tmr+0x15e>
    options[options_out_len++] = 0;
   1516a:	2100      	movs	r1, #0
   1516c:	1c5a      	adds	r2, r3, #1
   1516e:	54c1      	strb	r1, [r0, r3]
   15170:	b293      	uxth	r3, r2
  while (((options_out_len < DHCP_MIN_OPTIONS_LEN) || (options_out_len & 3)) &&
   15172:	2b44      	cmp	r3, #68	; 0x44
   15174:	d1fa      	bne.n	1516c <dhcp_coarse_tmr+0x154>
  pbuf_realloc(p_out, (u16_t)(sizeof(struct dhcp_msg) - DHCP_OPTIONS_LEN + options_out_len));
   15176:	33f0      	adds	r3, #240	; 0xf0
   15178:	b299      	uxth	r1, r3
   1517a:	4648      	mov	r0, r9
   1517c:	f002 fa6c 	bl	17658 <pbuf_realloc>
    result = udp_sendto_if(dhcp_pcb, p_out, IP_ADDR_BROADCAST, LWIP_IANA_PORT_DHCP_SERVER, netif);
   15180:	f8d8 0004 	ldr.w	r0, [r8, #4]
   15184:	9500      	str	r5, [sp, #0]
   15186:	2343      	movs	r3, #67	; 0x43
   15188:	463a      	mov	r2, r7
   1518a:	4649      	mov	r1, r9
   1518c:	f006 f9a2 	bl	1b4d4 <udp_sendto_if>
    pbuf_free(p_out);
   15190:	4648      	mov	r0, r9
   15192:	f002 fb2b 	bl	177ec <pbuf_free>
  if (dhcp->tries < 255) {
   15196:	79a3      	ldrb	r3, [r4, #6]
   15198:	2bff      	cmp	r3, #255	; 0xff
   1519a:	d01c      	beq.n	151d6 <dhcp_coarse_tmr+0x1be>
    dhcp->tries++;
   1519c:	3301      	adds	r3, #1
   1519e:	b2db      	uxtb	r3, r3
  msecs = (u16_t)(dhcp->tries < 10 ? dhcp->tries * 1000 : 10 * 1000);
   151a0:	2b09      	cmp	r3, #9
    dhcp->tries++;
   151a2:	71a3      	strb	r3, [r4, #6]
  msecs = (u16_t)(dhcp->tries < 10 ? dhcp->tries * 1000 : 10 * 1000);
   151a4:	d817      	bhi.n	151d6 <dhcp_coarse_tmr+0x1be>
   151a6:	ebc3 1243 	rsb	r2, r3, r3, lsl #5
   151aa:	eb03 0382 	add.w	r3, r3, r2, lsl #2
   151ae:	00db      	lsls	r3, r3, #3
   151b0:	b29b      	uxth	r3, r3
   151b2:	f203 13f3 	addw	r3, r3, #499	; 0x1f3
   151b6:	fb86 1203 	smull	r1, r2, r6, r3
   151ba:	17db      	asrs	r3, r3, #31
   151bc:	ebc3 1362 	rsb	r3, r3, r2, asr #5
   151c0:	b29b      	uxth	r3, r3
    if (((dhcp->t0_timeout - dhcp->lease_used) / 2) >= ((60 + DHCP_COARSE_TIMER_SECS / 2) / DHCP_COARSE_TIMER_SECS)) {
   151c2:	8aa2      	ldrh	r2, [r4, #20]
   151c4:	8a61      	ldrh	r1, [r4, #18]
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
   151c6:	8123      	strh	r3, [r4, #8]
    if (((dhcp->t0_timeout - dhcp->lease_used) / 2) >= ((60 + DHCP_COARSE_TIMER_SECS / 2) / DHCP_COARSE_TIMER_SECS)) {
   151c8:	1a53      	subs	r3, r2, r1
   151ca:	2b01      	cmp	r3, #1
   151cc:	f77f af46 	ble.w	1505c <dhcp_coarse_tmr+0x44>
      dhcp->t2_rebind_time = (u16_t)((dhcp->t0_timeout - dhcp->lease_used) / 2);
   151d0:	105b      	asrs	r3, r3, #1
   151d2:	8223      	strh	r3, [r4, #16]
   151d4:	e742      	b.n	1505c <dhcp_coarse_tmr+0x44>
{
   151d6:	2314      	movs	r3, #20
   151d8:	e7f3      	b.n	151c2 <dhcp_coarse_tmr+0x1aa>
   151da:	bf00      	nop
   151dc:	2000a3d8 	.word	0x2000a3d8
   151e0:	10624dd3 	.word	0x10624dd3
   151e4:	0002d588 	.word	0x0002d588
   151e8:	200027b8 	.word	0x200027b8

000151ec <dhcp_fine_tmr>:
{
   151ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  NETIF_FOREACH(netif) {
   151ee:	4b26      	ldr	r3, [pc, #152]	; (15288 <dhcp_fine_tmr+0x9c>)
   151f0:	681c      	ldr	r4, [r3, #0]
   151f2:	b304      	cbz	r4, 15236 <dhcp_fine_tmr+0x4a>
        dhcp->request_timeout--;
   151f4:	2600      	movs	r6, #0
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
   151f6:	2701      	movs	r7, #1
   151f8:	e003      	b.n	15202 <dhcp_fine_tmr+0x16>
        dhcp->request_timeout--;
   151fa:	3b01      	subs	r3, #1
   151fc:	812b      	strh	r3, [r5, #8]
  NETIF_FOREACH(netif) {
   151fe:	6824      	ldr	r4, [r4, #0]
   15200:	b1cc      	cbz	r4, 15236 <dhcp_fine_tmr+0x4a>
    struct dhcp *dhcp = netif_dhcp_data(netif);
   15202:	6a65      	ldr	r5, [r4, #36]	; 0x24
    if (dhcp != NULL) {
   15204:	2d00      	cmp	r5, #0
   15206:	d0fa      	beq.n	151fe <dhcp_fine_tmr+0x12>
      if (dhcp->request_timeout > 1) {
   15208:	892b      	ldrh	r3, [r5, #8]
   1520a:	2b01      	cmp	r3, #1
   1520c:	d8f5      	bhi.n	151fa <dhcp_fine_tmr+0xe>
      } else if (dhcp->request_timeout == 1) {
   1520e:	d1f6      	bne.n	151fe <dhcp_fine_tmr+0x12>
  if ((dhcp->state == DHCP_STATE_BACKING_OFF) || (dhcp->state == DHCP_STATE_SELECTING)) {
   15210:	796b      	ldrb	r3, [r5, #5]
        dhcp->request_timeout--;
   15212:	812e      	strh	r6, [r5, #8]
  if ((dhcp->state == DHCP_STATE_BACKING_OFF) || (dhcp->state == DHCP_STATE_SELECTING)) {
   15214:	2b0c      	cmp	r3, #12
   15216:	d016      	beq.n	15246 <dhcp_fine_tmr+0x5a>
   15218:	2b06      	cmp	r3, #6
   1521a:	d014      	beq.n	15246 <dhcp_fine_tmr+0x5a>
  } else if (dhcp->state == DHCP_STATE_REQUESTING) {
   1521c:	2b01      	cmp	r3, #1
   1521e:	d00b      	beq.n	15238 <dhcp_fine_tmr+0x4c>
  } else if (dhcp->state == DHCP_STATE_CHECKING) {
   15220:	2b08      	cmp	r3, #8
   15222:	d01a      	beq.n	1525a <dhcp_fine_tmr+0x6e>
  } else if (dhcp->state == DHCP_STATE_REBOOTING) {
   15224:	2b03      	cmp	r3, #3
   15226:	d1ea      	bne.n	151fe <dhcp_fine_tmr+0x12>
    if (dhcp->tries < REBOOT_TRIES) {
   15228:	79ab      	ldrb	r3, [r5, #6]
   1522a:	2b01      	cmp	r3, #1
      dhcp_reboot(netif);
   1522c:	4620      	mov	r0, r4
    if (dhcp->tries < REBOOT_TRIES) {
   1522e:	d928      	bls.n	15282 <dhcp_fine_tmr+0x96>
      dhcp_discover(netif);
   15230:	f7ff f862 	bl	142f8 <dhcp_discover>
   15234:	e7e3      	b.n	151fe <dhcp_fine_tmr+0x12>
   15236:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if (dhcp->tries <= 5) {
   15238:	79ab      	ldrb	r3, [r5, #6]
   1523a:	2b05      	cmp	r3, #5
      dhcp_select(netif);
   1523c:	4620      	mov	r0, r4
    if (dhcp->tries <= 5) {
   1523e:	d806      	bhi.n	1524e <dhcp_fine_tmr+0x62>
      dhcp_select(netif);
   15240:	f7fe ff52 	bl	140e8 <dhcp_select>
   15244:	e7db      	b.n	151fe <dhcp_fine_tmr+0x12>
    dhcp_discover(netif);
   15246:	4620      	mov	r0, r4
   15248:	f7ff f856 	bl	142f8 <dhcp_discover>
   1524c:	e7d7      	b.n	151fe <dhcp_fine_tmr+0x12>
      dhcp_release_and_stop(netif);
   1524e:	f7ff fd93 	bl	14d78 <dhcp_release_and_stop>
      dhcp_start(netif);
   15252:	4620      	mov	r0, r4
   15254:	f7ff fe66 	bl	14f24 <dhcp_start>
   15258:	e7d1      	b.n	151fe <dhcp_fine_tmr+0x12>
    if (dhcp->tries <= 1) {
   1525a:	79ab      	ldrb	r3, [r5, #6]
   1525c:	2b01      	cmp	r3, #1
   1525e:	d903      	bls.n	15268 <dhcp_fine_tmr+0x7c>
      dhcp_bind(netif);
   15260:	4620      	mov	r0, r4
   15262:	f7fe fd91 	bl	13d88 <dhcp_bind>
   15266:	e7ca      	b.n	151fe <dhcp_fine_tmr+0x12>
  result = etharp_query(netif, &dhcp->offered_ip_addr, NULL);
   15268:	2200      	movs	r2, #0
   1526a:	f105 011c 	add.w	r1, r5, #28
   1526e:	4620      	mov	r0, r4
   15270:	f001 f986 	bl	16580 <etharp_query>
  if (dhcp->tries < 255) {
   15274:	79ab      	ldrb	r3, [r5, #6]
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
   15276:	812f      	strh	r7, [r5, #8]
  if (dhcp->tries < 255) {
   15278:	2bff      	cmp	r3, #255	; 0xff
    dhcp->tries++;
   1527a:	bf1c      	itt	ne
   1527c:	3301      	addne	r3, #1
   1527e:	71ab      	strbne	r3, [r5, #6]
   15280:	e7bd      	b.n	151fe <dhcp_fine_tmr+0x12>
      dhcp_reboot(netif);
   15282:	f7fe fe5b 	bl	13f3c <dhcp_reboot>
   15286:	e7ba      	b.n	151fe <dhcp_fine_tmr+0x12>
   15288:	2000a3d8 	.word	0x2000a3d8

0001528c <dhcp_supplied_address>:
  if ((netif != NULL) && (netif_dhcp_data(netif) != NULL)) {
   1528c:	b158      	cbz	r0, 152a6 <dhcp_supplied_address+0x1a>
   1528e:	6a40      	ldr	r0, [r0, #36]	; 0x24
   15290:	b148      	cbz	r0, 152a6 <dhcp_supplied_address+0x1a>
    return (dhcp->state == DHCP_STATE_BOUND) || (dhcp->state == DHCP_STATE_RENEWING) ||
   15292:	7940      	ldrb	r0, [r0, #5]
   15294:	280a      	cmp	r0, #10
   15296:	d005      	beq.n	152a4 <dhcp_supplied_address+0x18>
   15298:	3804      	subs	r0, #4
   1529a:	2801      	cmp	r0, #1
   1529c:	bf8c      	ite	hi
   1529e:	2000      	movhi	r0, #0
   152a0:	2001      	movls	r0, #1
   152a2:	4770      	bx	lr
   152a4:	2001      	movs	r0, #1
           (dhcp->state == DHCP_STATE_REBINDING);
  }
  return 0;
}
   152a6:	4770      	bx	lr

000152a8 <etharp_find_entry>:
 * @return The ARP entry index that matched or is created, ERR_MEM if no
 * entry is found or could be recycled.
 */
static s16_t
etharp_find_entry(const ip4_addr_t *ipaddr, u8_t flags, struct netif *netif)
{
   152a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   152ac:	b083      	sub	sp, #12
   152ae:	468c      	mov	ip, r1
   152b0:	9201      	str	r2, [sp, #4]
   * 5) search for a matching IP entry, either pending or stable
   *    until 5 matches, or all entries are searched for.
   */

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
    u8_t state = arp_table[i].state;
   152b2:	4cd2      	ldr	r4, [pc, #840]	; (155fc <etharp_find_entry+0x354>)
   152b4:	2a00      	cmp	r2, #0
   152b6:	f000 83b2 	beq.w	15a1e <etharp_find_entry+0x776>
   152ba:	2800      	cmp	r0, #0
   152bc:	f000 81ff 	beq.w	156be <etharp_find_entry+0x416>
   152c0:	7d21      	ldrb	r1, [r4, #20]
    /* no empty entry found yet and now we do find one? */
    if ((empty == ARP_TABLE_SIZE) && (state == ETHARP_STATE_EMPTY)) {
   152c2:	2900      	cmp	r1, #0
   152c4:	d061      	beq.n	1538a <etharp_find_entry+0xe2>
      empty = i;
    } else if (state != ETHARP_STATE_EMPTY) {
      LWIP_ASSERT("state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE",
                  state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE);
      /* if given, does IP address match IP address in ARP entry? */
      if (ipaddr && ip4_addr_cmp(ipaddr, &arp_table[i].ipaddr)
   152c6:	6805      	ldr	r5, [r0, #0]
   152c8:	6863      	ldr	r3, [r4, #4]
   152ca:	429d      	cmp	r5, r3
   152cc:	f000 825f 	beq.w	1578e <etharp_find_entry+0x4e6>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: found matching entry %d\n", (int)i));
        /* found exact IP address match, simply bail out */
        return i;
      }
      /* pending entry? */
      if (state == ETHARP_STATE_PENDING) {
   152d0:	2901      	cmp	r1, #1
   152d2:	f000 8179 	beq.w	155c8 <etharp_find_entry+0x320>
  u16_t age_queue = 0, age_pending = 0, age_stable = 0;
   152d6:	f04f 0b00 	mov.w	fp, #0
  s16_t old_queue = ARP_TABLE_SIZE;
   152da:	f04f 0e0a 	mov.w	lr, #10
        /* don't record old_stable for static entries since they never expire */
        if (state < ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
        {
          /* remember entry with oldest stable entry in oldest, its age in maxtime */
          if (arp_table[i].ctime >= age_stable) {
   152de:	8a61      	ldrh	r1, [r4, #18]
  u16_t age_queue = 0, age_pending = 0, age_stable = 0;
   152e0:	46da      	mov	sl, fp
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
   152e2:	465e      	mov	r6, fp
  s16_t old_pending = ARP_TABLE_SIZE, old_stable = ARP_TABLE_SIZE;
   152e4:	46f0      	mov	r8, lr
    u8_t state = arp_table[i].state;
   152e6:	f894 902c 	ldrb.w	r9, [r4, #44]	; 0x2c
    if ((empty == ARP_TABLE_SIZE) && (state == ETHARP_STATE_EMPTY)) {
   152ea:	f1b9 0f00 	cmp.w	r9, #0
   152ee:	f040 8208 	bne.w	15702 <etharp_find_entry+0x45a>
    u8_t state = arp_table[i].state;
   152f2:	f894 9044 	ldrb.w	r9, [r4, #68]	; 0x44
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
   152f6:	2301      	movs	r3, #1
    } else if (state != ETHARP_STATE_EMPTY) {
   152f8:	f1b9 0f00 	cmp.w	r9, #0
   152fc:	d157      	bne.n	153ae <etharp_find_entry+0x106>
    u8_t state = arp_table[i].state;
   152fe:	f894 905c 	ldrb.w	r9, [r4, #92]	; 0x5c
    } else if (state != ETHARP_STATE_EMPTY) {
   15302:	f1b9 0f00 	cmp.w	r9, #0
   15306:	f040 80c8 	bne.w	1549a <etharp_find_entry+0x1f2>
    u8_t state = arp_table[i].state;
   1530a:	f894 9074 	ldrb.w	r9, [r4, #116]	; 0x74
    } else if (state != ETHARP_STATE_EMPTY) {
   1530e:	f1b9 0f00 	cmp.w	r9, #0
   15312:	f040 80a9 	bne.w	15468 <etharp_find_entry+0x1c0>
    u8_t state = arp_table[i].state;
   15316:	f894 908c 	ldrb.w	r9, [r4, #140]	; 0x8c
    } else if (state != ETHARP_STATE_EMPTY) {
   1531a:	f1b9 0f00 	cmp.w	r9, #0
   1531e:	f040 80ef 	bne.w	15500 <etharp_find_entry+0x258>
    u8_t state = arp_table[i].state;
   15322:	f894 90a4 	ldrb.w	r9, [r4, #164]	; 0xa4
    } else if (state != ETHARP_STATE_EMPTY) {
   15326:	f1b9 0f00 	cmp.w	r9, #0
   1532a:	f040 80cf 	bne.w	154cc <etharp_find_entry+0x224>
    u8_t state = arp_table[i].state;
   1532e:	f894 90bc 	ldrb.w	r9, [r4, #188]	; 0xbc
    } else if (state != ETHARP_STATE_EMPTY) {
   15332:	f1b9 0f00 	cmp.w	r9, #0
   15336:	f040 80fc 	bne.w	15532 <etharp_find_entry+0x28a>
    u8_t state = arp_table[i].state;
   1533a:	f894 90d4 	ldrb.w	r9, [r4, #212]	; 0xd4
    } else if (state != ETHARP_STATE_EMPTY) {
   1533e:	f1b9 0f00 	cmp.w	r9, #0
   15342:	f040 8110 	bne.w	15566 <etharp_find_entry+0x2be>
    u8_t state = arp_table[i].state;
   15346:	f894 70ec 	ldrb.w	r7, [r4, #236]	; 0xec
    } else if (state != ETHARP_STATE_EMPTY) {
   1534a:	2f00      	cmp	r7, #0
   1534c:	f040 8123 	bne.w	15596 <etharp_find_entry+0x2ee>
    }
  }
  /* { we have no match } => try to create a new entry */

  /* don't create new entry, only search? */
  if (((flags & ETHARP_FLAG_FIND_ONLY) != 0) ||
   15350:	f01c 0f02 	tst.w	ip, #2
   15354:	f040 82d6 	bne.w	15904 <etharp_find_entry+0x65c>
   15358:	2b0a      	cmp	r3, #10
   1535a:	9d01      	ldr	r5, [sp, #4]
   1535c:	4681      	mov	r9, r0
   1535e:	d05d      	beq.n	1541c <etharp_find_entry+0x174>
   15360:	461f      	mov	r7, r3
              arp_table[i].state == ETHARP_STATE_EMPTY);

  /* IP address given? */
  if (ipaddr != NULL) {
    /* set IP address */
    ip4_addr_copy(arp_table[i].ipaddr, *ipaddr);
   15362:	0079      	lsls	r1, r7, #1
  if (ipaddr != NULL) {
   15364:	f1b9 0f00 	cmp.w	r9, #0
   15368:	d005      	beq.n	15376 <etharp_find_entry+0xce>
    ip4_addr_copy(arp_table[i].ipaddr, *ipaddr);
   1536a:	19ca      	adds	r2, r1, r7
   1536c:	eb04 02c2 	add.w	r2, r4, r2, lsl #3
   15370:	f8d9 0000 	ldr.w	r0, [r9]
   15374:	6050      	str	r0, [r2, #4]
  }
  arp_table[i].ctime = 0;
   15376:	4439      	add	r1, r7
   15378:	eb04 04c1 	add.w	r4, r4, r1, lsl #3
   1537c:	2200      	movs	r2, #0
#if ETHARP_TABLE_MATCH_NETIF
  arp_table[i].netif = netif;
   1537e:	60a5      	str	r5, [r4, #8]
  arp_table[i].ctime = 0;
   15380:	8262      	strh	r2, [r4, #18]
#endif /* ETHARP_TABLE_MATCH_NETIF */
  return (s16_t)i;
}
   15382:	4618      	mov	r0, r3
   15384:	b003      	add	sp, #12
   15386:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    u8_t state = arp_table[i].state;
   1538a:	f894 902c 	ldrb.w	r9, [r4, #44]	; 0x2c
    } else if (state != ETHARP_STATE_EMPTY) {
   1538e:	f1b9 0f00 	cmp.w	r9, #0
   15392:	d124      	bne.n	153de <etharp_find_entry+0x136>
  u16_t age_queue = 0, age_pending = 0, age_stable = 0;
   15394:	4649      	mov	r1, r9
   15396:	46cb      	mov	fp, r9
   15398:	46ca      	mov	sl, r9
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
   1539a:	464b      	mov	r3, r9
    u8_t state = arp_table[i].state;
   1539c:	f894 9044 	ldrb.w	r9, [r4, #68]	; 0x44
  s16_t old_queue = ARP_TABLE_SIZE;
   153a0:	f04f 0e0a 	mov.w	lr, #10
  s16_t old_pending = ARP_TABLE_SIZE, old_stable = ARP_TABLE_SIZE;
   153a4:	4676      	mov	r6, lr
   153a6:	46f0      	mov	r8, lr
    } else if (state != ETHARP_STATE_EMPTY) {
   153a8:	f1b9 0f00 	cmp.w	r9, #0
   153ac:	d0a7      	beq.n	152fe <etharp_find_entry+0x56>
   153ae:	6805      	ldr	r5, [r0, #0]
      if (ipaddr && ip4_addr_cmp(ipaddr, &arp_table[i].ipaddr)
   153b0:	6b62      	ldr	r2, [r4, #52]	; 0x34
   153b2:	4295      	cmp	r5, r2
   153b4:	f000 81f2 	beq.w	1579c <etharp_find_entry+0x4f4>
      if (state == ETHARP_STATE_PENDING) {
   153b8:	f1b9 0f01 	cmp.w	r9, #1
   153bc:	f000 8110 	beq.w	155e0 <etharp_find_entry+0x338>
          if (arp_table[i].ctime >= age_stable) {
   153c0:	f8b4 7042 	ldrh.w	r7, [r4, #66]	; 0x42
   153c4:	428f      	cmp	r7, r1
   153c6:	d301      	bcc.n	153cc <etharp_find_entry+0x124>
   153c8:	4639      	mov	r1, r7
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
   153ca:	2602      	movs	r6, #2
    if ((empty == ARP_TABLE_SIZE) && (state == ETHARP_STATE_EMPTY)) {
   153cc:	2b0a      	cmp	r3, #10
    u8_t state = arp_table[i].state;
   153ce:	f894 905c 	ldrb.w	r9, [r4, #92]	; 0x5c
    if ((empty == ARP_TABLE_SIZE) && (state == ETHARP_STATE_EMPTY)) {
   153d2:	d196      	bne.n	15302 <etharp_find_entry+0x5a>
   153d4:	f1b9 0f00 	cmp.w	r9, #0
   153d8:	d160      	bne.n	1549c <etharp_find_entry+0x1f4>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
   153da:	2303      	movs	r3, #3
   153dc:	e795      	b.n	1530a <etharp_find_entry+0x62>
  s16_t old_queue = ARP_TABLE_SIZE;
   153de:	f04f 0e0a 	mov.w	lr, #10
   153e2:	6805      	ldr	r5, [r0, #0]
  u16_t age_queue = 0, age_pending = 0, age_stable = 0;
   153e4:	468b      	mov	fp, r1
   153e6:	468a      	mov	sl, r1
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
   153e8:	460b      	mov	r3, r1
  s16_t old_pending = ARP_TABLE_SIZE, old_stable = ARP_TABLE_SIZE;
   153ea:	4676      	mov	r6, lr
   153ec:	46f0      	mov	r8, lr
      if (ipaddr && ip4_addr_cmp(ipaddr, &arp_table[i].ipaddr)
   153ee:	69e7      	ldr	r7, [r4, #28]
   153f0:	42bd      	cmp	r5, r7
   153f2:	f000 81c5 	beq.w	15780 <etharp_find_entry+0x4d8>
      if (state == ETHARP_STATE_PENDING) {
   153f6:	f1b9 0f01 	cmp.w	r9, #1
   153fa:	f000 80da 	beq.w	155b2 <etharp_find_entry+0x30a>
          if (arp_table[i].ctime >= age_stable) {
   153fe:	8d67      	ldrh	r7, [r4, #42]	; 0x2a
   15400:	428f      	cmp	r7, r1
   15402:	bf24      	itt	cs
   15404:	4639      	movcs	r1, r7
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
   15406:	2601      	movcs	r6, #1
    if ((empty == ARP_TABLE_SIZE) && (state == ETHARP_STATE_EMPTY)) {
   15408:	2b0a      	cmp	r3, #10
    u8_t state = arp_table[i].state;
   1540a:	f894 9044 	ldrb.w	r9, [r4, #68]	; 0x44
    if ((empty == ARP_TABLE_SIZE) && (state == ETHARP_STATE_EMPTY)) {
   1540e:	f47f af73 	bne.w	152f8 <etharp_find_entry+0x50>
   15412:	f1b9 0f00 	cmp.w	r9, #0
   15416:	d1cb      	bne.n	153b0 <etharp_find_entry+0x108>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
   15418:	2302      	movs	r3, #2
   1541a:	e770      	b.n	152fe <etharp_find_entry+0x56>
      ((empty == ARP_TABLE_SIZE) && ((flags & ETHARP_FLAG_TRY_HARD) == 0))) {
   1541c:	f01c 0f01 	tst.w	ip, #1
   15420:	f000 8270 	beq.w	15904 <etharp_find_entry+0x65c>
    if (old_stable < ARP_TABLE_SIZE) {
   15424:	2e0a      	cmp	r6, #10
   15426:	d108      	bne.n	1543a <etharp_find_entry+0x192>
    } else if (old_pending < ARP_TABLE_SIZE) {
   15428:	f1b8 0f0a 	cmp.w	r8, #10
   1542c:	f040 8145 	bne.w	156ba <etharp_find_entry+0x412>
    } else if (old_queue < ARP_TABLE_SIZE) {
   15430:	f1be 0f0a 	cmp.w	lr, #10
   15434:	f000 8266 	beq.w	15904 <etharp_find_entry+0x65c>
   15438:	4676      	mov	r6, lr
  if (arp_table[i].q != NULL) {
   1543a:	ea4f 0846 	mov.w	r8, r6, lsl #1
   1543e:	eb08 0a06 	add.w	sl, r8, r6
   15442:	ea4f 0aca 	mov.w	sl, sl, lsl #3
    etharp_free_entry(i);
   15446:	4637      	mov	r7, r6
  if (arp_table[i].q != NULL) {
   15448:	f854 000a 	ldr.w	r0, [r4, sl]
   1544c:	b120      	cbz	r0, 15458 <etharp_find_entry+0x1b0>
    free_etharp_q(arp_table[i].q);
   1544e:	f002 f9cd 	bl	177ec <pbuf_free>
    arp_table[i].q = NULL;
   15452:	2300      	movs	r3, #0
   15454:	f844 300a 	str.w	r3, [r4, sl]
  arp_table[i].state = ETHARP_STATE_EMPTY;
   15458:	44b0      	add	r8, r6
   1545a:	eb04 08c8 	add.w	r8, r4, r8, lsl #3
   1545e:	2200      	movs	r2, #0
   15460:	4633      	mov	r3, r6
   15462:	f888 2014 	strb.w	r2, [r8, #20]
   15466:	e77c      	b.n	15362 <etharp_find_entry+0xba>
   15468:	6805      	ldr	r5, [r0, #0]
      if (ipaddr && ip4_addr_cmp(ipaddr, &arp_table[i].ipaddr)
   1546a:	6e62      	ldr	r2, [r4, #100]	; 0x64
   1546c:	4295      	cmp	r5, r2
   1546e:	f000 81ab 	beq.w	157c8 <etharp_find_entry+0x520>
      if (state == ETHARP_STATE_PENDING) {
   15472:	f1b9 0f01 	cmp.w	r9, #1
   15476:	f000 80c3 	beq.w	15600 <etharp_find_entry+0x358>
          if (arp_table[i].ctime >= age_stable) {
   1547a:	f8b4 7072 	ldrh.w	r7, [r4, #114]	; 0x72
   1547e:	428f      	cmp	r7, r1
   15480:	d301      	bcc.n	15486 <etharp_find_entry+0x1de>
   15482:	4639      	mov	r1, r7
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
   15484:	2604      	movs	r6, #4
    if ((empty == ARP_TABLE_SIZE) && (state == ETHARP_STATE_EMPTY)) {
   15486:	2b0a      	cmp	r3, #10
    u8_t state = arp_table[i].state;
   15488:	f894 908c 	ldrb.w	r9, [r4, #140]	; 0x8c
    if ((empty == ARP_TABLE_SIZE) && (state == ETHARP_STATE_EMPTY)) {
   1548c:	f47f af45 	bne.w	1531a <etharp_find_entry+0x72>
   15490:	f1b9 0f00 	cmp.w	r9, #0
   15494:	d135      	bne.n	15502 <etharp_find_entry+0x25a>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
   15496:	2305      	movs	r3, #5
   15498:	e743      	b.n	15322 <etharp_find_entry+0x7a>
   1549a:	6805      	ldr	r5, [r0, #0]
      if (ipaddr && ip4_addr_cmp(ipaddr, &arp_table[i].ipaddr)
   1549c:	6ce2      	ldr	r2, [r4, #76]	; 0x4c
   1549e:	4295      	cmp	r5, r2
   154a0:	f000 8183 	beq.w	157aa <etharp_find_entry+0x502>
      if (state == ETHARP_STATE_PENDING) {
   154a4:	f1b9 0f01 	cmp.w	r9, #1
   154a8:	f000 80b7 	beq.w	1561a <etharp_find_entry+0x372>
          if (arp_table[i].ctime >= age_stable) {
   154ac:	f8b4 705a 	ldrh.w	r7, [r4, #90]	; 0x5a
   154b0:	428f      	cmp	r7, r1
   154b2:	d301      	bcc.n	154b8 <etharp_find_entry+0x210>
   154b4:	4639      	mov	r1, r7
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
   154b6:	2603      	movs	r6, #3
    if ((empty == ARP_TABLE_SIZE) && (state == ETHARP_STATE_EMPTY)) {
   154b8:	2b0a      	cmp	r3, #10
    u8_t state = arp_table[i].state;
   154ba:	f894 9074 	ldrb.w	r9, [r4, #116]	; 0x74
    if ((empty == ARP_TABLE_SIZE) && (state == ETHARP_STATE_EMPTY)) {
   154be:	f47f af26 	bne.w	1530e <etharp_find_entry+0x66>
   154c2:	f1b9 0f00 	cmp.w	r9, #0
   154c6:	d1d0      	bne.n	1546a <etharp_find_entry+0x1c2>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
   154c8:	2304      	movs	r3, #4
   154ca:	e724      	b.n	15316 <etharp_find_entry+0x6e>
   154cc:	6805      	ldr	r5, [r0, #0]
      if (ipaddr && ip4_addr_cmp(ipaddr, &arp_table[i].ipaddr)
   154ce:	f8d4 2094 	ldr.w	r2, [r4, #148]	; 0x94
   154d2:	4295      	cmp	r5, r2
   154d4:	f000 8170 	beq.w	157b8 <etharp_find_entry+0x510>
      if (state == ETHARP_STATE_PENDING) {
   154d8:	f1b9 0f01 	cmp.w	r9, #1
   154dc:	f000 80aa 	beq.w	15634 <etharp_find_entry+0x38c>
          if (arp_table[i].ctime >= age_stable) {
   154e0:	f8b4 70a2 	ldrh.w	r7, [r4, #162]	; 0xa2
   154e4:	428f      	cmp	r7, r1
   154e6:	d301      	bcc.n	154ec <etharp_find_entry+0x244>
   154e8:	4639      	mov	r1, r7
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
   154ea:	2606      	movs	r6, #6
    if ((empty == ARP_TABLE_SIZE) && (state == ETHARP_STATE_EMPTY)) {
   154ec:	2b0a      	cmp	r3, #10
    u8_t state = arp_table[i].state;
   154ee:	f894 90bc 	ldrb.w	r9, [r4, #188]	; 0xbc
    if ((empty == ARP_TABLE_SIZE) && (state == ETHARP_STATE_EMPTY)) {
   154f2:	f47f af1e 	bne.w	15332 <etharp_find_entry+0x8a>
   154f6:	f1b9 0f00 	cmp.w	r9, #0
   154fa:	d11b      	bne.n	15534 <etharp_find_entry+0x28c>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
   154fc:	2307      	movs	r3, #7
   154fe:	e71c      	b.n	1533a <etharp_find_entry+0x92>
   15500:	6805      	ldr	r5, [r0, #0]
      if (ipaddr && ip4_addr_cmp(ipaddr, &arp_table[i].ipaddr)
   15502:	6fe2      	ldr	r2, [r4, #124]	; 0x7c
   15504:	4295      	cmp	r5, r2
   15506:	f000 8166 	beq.w	157d6 <etharp_find_entry+0x52e>
      if (state == ETHARP_STATE_PENDING) {
   1550a:	f1b9 0f01 	cmp.w	r9, #1
   1550e:	f000 809f 	beq.w	15650 <etharp_find_entry+0x3a8>
          if (arp_table[i].ctime >= age_stable) {
   15512:	f8b4 708a 	ldrh.w	r7, [r4, #138]	; 0x8a
   15516:	428f      	cmp	r7, r1
   15518:	d301      	bcc.n	1551e <etharp_find_entry+0x276>
   1551a:	4639      	mov	r1, r7
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
   1551c:	2605      	movs	r6, #5
    if ((empty == ARP_TABLE_SIZE) && (state == ETHARP_STATE_EMPTY)) {
   1551e:	2b0a      	cmp	r3, #10
    u8_t state = arp_table[i].state;
   15520:	f894 90a4 	ldrb.w	r9, [r4, #164]	; 0xa4
    if ((empty == ARP_TABLE_SIZE) && (state == ETHARP_STATE_EMPTY)) {
   15524:	f47f aeff 	bne.w	15326 <etharp_find_entry+0x7e>
   15528:	f1b9 0f00 	cmp.w	r9, #0
   1552c:	d1cf      	bne.n	154ce <etharp_find_entry+0x226>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
   1552e:	2306      	movs	r3, #6
   15530:	e6fd      	b.n	1532e <etharp_find_entry+0x86>
   15532:	6805      	ldr	r5, [r0, #0]
      if (ipaddr && ip4_addr_cmp(ipaddr, &arp_table[i].ipaddr)
   15534:	f8d4 20ac 	ldr.w	r2, [r4, #172]	; 0xac
   15538:	4295      	cmp	r5, r2
   1553a:	f000 8154 	beq.w	157e6 <etharp_find_entry+0x53e>
      if (state == ETHARP_STATE_PENDING) {
   1553e:	f1b9 0f01 	cmp.w	r9, #1
   15542:	f000 8092 	beq.w	1566a <etharp_find_entry+0x3c2>
          if (arp_table[i].ctime >= age_stable) {
   15546:	f8b4 70ba 	ldrh.w	r7, [r4, #186]	; 0xba
   1554a:	428f      	cmp	r7, r1
   1554c:	d301      	bcc.n	15552 <etharp_find_entry+0x2aa>
   1554e:	4639      	mov	r1, r7
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
   15550:	2607      	movs	r6, #7
    if ((empty == ARP_TABLE_SIZE) && (state == ETHARP_STATE_EMPTY)) {
   15552:	2b0a      	cmp	r3, #10
    u8_t state = arp_table[i].state;
   15554:	f894 90d4 	ldrb.w	r9, [r4, #212]	; 0xd4
    if ((empty == ARP_TABLE_SIZE) && (state == ETHARP_STATE_EMPTY)) {
   15558:	f47f aef1 	bne.w	1533e <etharp_find_entry+0x96>
   1555c:	f1b9 0f00 	cmp.w	r9, #0
   15560:	d102      	bne.n	15568 <etharp_find_entry+0x2c0>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
   15562:	2308      	movs	r3, #8
   15564:	e6ef      	b.n	15346 <etharp_find_entry+0x9e>
   15566:	6805      	ldr	r5, [r0, #0]
      if (ipaddr && ip4_addr_cmp(ipaddr, &arp_table[i].ipaddr)
   15568:	f8d4 20c4 	ldr.w	r2, [r4, #196]	; 0xc4
   1556c:	4295      	cmp	r5, r2
   1556e:	f000 8142 	beq.w	157f6 <etharp_find_entry+0x54e>
      if (state == ETHARP_STATE_PENDING) {
   15572:	f1b9 0f01 	cmp.w	r9, #1
   15576:	f000 8086 	beq.w	15686 <etharp_find_entry+0x3de>
          if (arp_table[i].ctime >= age_stable) {
   1557a:	f8b4 70d2 	ldrh.w	r7, [r4, #210]	; 0xd2
   1557e:	428f      	cmp	r7, r1
   15580:	d301      	bcc.n	15586 <etharp_find_entry+0x2de>
   15582:	4639      	mov	r1, r7
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
   15584:	2608      	movs	r6, #8
    if ((empty == ARP_TABLE_SIZE) && (state == ETHARP_STATE_EMPTY)) {
   15586:	2b0a      	cmp	r3, #10
    u8_t state = arp_table[i].state;
   15588:	f894 70ec 	ldrb.w	r7, [r4, #236]	; 0xec
    if ((empty == ARP_TABLE_SIZE) && (state == ETHARP_STATE_EMPTY)) {
   1558c:	f47f aedd 	bne.w	1534a <etharp_find_entry+0xa2>
   15590:	b917      	cbnz	r7, 15598 <etharp_find_entry+0x2f0>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
   15592:	2309      	movs	r3, #9
   15594:	e6dc      	b.n	15350 <etharp_find_entry+0xa8>
   15596:	6805      	ldr	r5, [r0, #0]
      if (ipaddr && ip4_addr_cmp(ipaddr, &arp_table[i].ipaddr)
   15598:	f8d4 20dc 	ldr.w	r2, [r4, #220]	; 0xdc
   1559c:	4295      	cmp	r5, r2
   1559e:	f000 8132 	beq.w	15806 <etharp_find_entry+0x55e>
      if (state == ETHARP_STATE_PENDING) {
   155a2:	2f01      	cmp	r7, #1
   155a4:	d07d      	beq.n	156a2 <etharp_find_entry+0x3fa>
          if (arp_table[i].ctime >= age_stable) {
   155a6:	f8b4 50ea 	ldrh.w	r5, [r4, #234]	; 0xea
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
   155aa:	428d      	cmp	r5, r1
   155ac:	bf28      	it	cs
   155ae:	2609      	movcs	r6, #9
   155b0:	e6ce      	b.n	15350 <etharp_find_entry+0xa8>
        if (arp_table[i].q != NULL) {
   155b2:	69a7      	ldr	r7, [r4, #24]
   155b4:	2f00      	cmp	r7, #0
   155b6:	f000 8304 	beq.w	15bc2 <etharp_find_entry+0x91a>
          if (arp_table[i].ctime >= age_queue) {
   155ba:	8d67      	ldrh	r7, [r4, #42]	; 0x2a
   155bc:	4557      	cmp	r7, sl
   155be:	f4ff af23 	bcc.w	15408 <etharp_find_entry+0x160>
   155c2:	46ba      	mov	sl, r7
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
   155c4:	46ce      	mov	lr, r9
   155c6:	e71f      	b.n	15408 <etharp_find_entry+0x160>
        if (arp_table[i].q != NULL) {
   155c8:	6821      	ldr	r1, [r4, #0]
   155ca:	2900      	cmp	r1, #0
   155cc:	f000 82de 	beq.w	15b8c <etharp_find_entry+0x8e4>
  u16_t age_queue = 0, age_pending = 0, age_stable = 0;
   155d0:	2100      	movs	r1, #0
  s16_t old_pending = ARP_TABLE_SIZE, old_stable = ARP_TABLE_SIZE;
   155d2:	260a      	movs	r6, #10
  u16_t age_queue = 0, age_pending = 0, age_stable = 0;
   155d4:	468b      	mov	fp, r1
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
   155d6:	468e      	mov	lr, r1
  s16_t old_pending = ARP_TABLE_SIZE, old_stable = ARP_TABLE_SIZE;
   155d8:	46b0      	mov	r8, r6
          if (arp_table[i].ctime >= age_queue) {
   155da:	f8b4 a012 	ldrh.w	sl, [r4, #18]
   155de:	e682      	b.n	152e6 <etharp_find_entry+0x3e>
        if (arp_table[i].q != NULL) {
   155e0:	6b27      	ldr	r7, [r4, #48]	; 0x30
   155e2:	2f00      	cmp	r7, #0
   155e4:	f000 82c9 	beq.w	15b7a <etharp_find_entry+0x8d2>
          if (arp_table[i].ctime >= age_queue) {
   155e8:	f8b4 7042 	ldrh.w	r7, [r4, #66]	; 0x42
   155ec:	4557      	cmp	r7, sl
   155ee:	f4ff aeed 	bcc.w	153cc <etharp_find_entry+0x124>
   155f2:	46ba      	mov	sl, r7
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
   155f4:	f04f 0e02 	mov.w	lr, #2
   155f8:	e6e8      	b.n	153cc <etharp_find_entry+0x124>
   155fa:	bf00      	nop
   155fc:	200027c4 	.word	0x200027c4
        if (arp_table[i].q != NULL) {
   15600:	6e27      	ldr	r7, [r4, #96]	; 0x60
   15602:	2f00      	cmp	r7, #0
   15604:	f000 82d4 	beq.w	15bb0 <etharp_find_entry+0x908>
          if (arp_table[i].ctime >= age_queue) {
   15608:	f8b4 7072 	ldrh.w	r7, [r4, #114]	; 0x72
   1560c:	4557      	cmp	r7, sl
   1560e:	f4ff af3a 	bcc.w	15486 <etharp_find_entry+0x1de>
   15612:	46ba      	mov	sl, r7
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
   15614:	f04f 0e04 	mov.w	lr, #4
   15618:	e735      	b.n	15486 <etharp_find_entry+0x1de>
        if (arp_table[i].q != NULL) {
   1561a:	6ca7      	ldr	r7, [r4, #72]	; 0x48
   1561c:	2f00      	cmp	r7, #0
   1561e:	f000 82be 	beq.w	15b9e <etharp_find_entry+0x8f6>
          if (arp_table[i].ctime >= age_queue) {
   15622:	f8b4 705a 	ldrh.w	r7, [r4, #90]	; 0x5a
   15626:	4557      	cmp	r7, sl
   15628:	f4ff af46 	bcc.w	154b8 <etharp_find_entry+0x210>
   1562c:	46ba      	mov	sl, r7
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
   1562e:	f04f 0e03 	mov.w	lr, #3
   15632:	e741      	b.n	154b8 <etharp_find_entry+0x210>
        if (arp_table[i].q != NULL) {
   15634:	f8d4 7090 	ldr.w	r7, [r4, #144]	; 0x90
   15638:	2f00      	cmp	r7, #0
   1563a:	f000 8283 	beq.w	15b44 <etharp_find_entry+0x89c>
          if (arp_table[i].ctime >= age_queue) {
   1563e:	f8b4 70a2 	ldrh.w	r7, [r4, #162]	; 0xa2
   15642:	4557      	cmp	r7, sl
   15644:	f4ff af52 	bcc.w	154ec <etharp_find_entry+0x244>
   15648:	46ba      	mov	sl, r7
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
   1564a:	f04f 0e06 	mov.w	lr, #6
   1564e:	e74d      	b.n	154ec <etharp_find_entry+0x244>
        if (arp_table[i].q != NULL) {
   15650:	6fa7      	ldr	r7, [r4, #120]	; 0x78
   15652:	2f00      	cmp	r7, #0
   15654:	f000 8288 	beq.w	15b68 <etharp_find_entry+0x8c0>
          if (arp_table[i].ctime >= age_queue) {
   15658:	f8b4 708a 	ldrh.w	r7, [r4, #138]	; 0x8a
   1565c:	4557      	cmp	r7, sl
   1565e:	f4ff af5e 	bcc.w	1551e <etharp_find_entry+0x276>
   15662:	46ba      	mov	sl, r7
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
   15664:	f04f 0e05 	mov.w	lr, #5
   15668:	e759      	b.n	1551e <etharp_find_entry+0x276>
        if (arp_table[i].q != NULL) {
   1566a:	f8d4 70a8 	ldr.w	r7, [r4, #168]	; 0xa8
   1566e:	2f00      	cmp	r7, #0
   15670:	f000 8271 	beq.w	15b56 <etharp_find_entry+0x8ae>
          if (arp_table[i].ctime >= age_queue) {
   15674:	f8b4 70ba 	ldrh.w	r7, [r4, #186]	; 0xba
   15678:	4557      	cmp	r7, sl
   1567a:	f4ff af6a 	bcc.w	15552 <etharp_find_entry+0x2aa>
   1567e:	46ba      	mov	sl, r7
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
   15680:	f04f 0e07 	mov.w	lr, #7
   15684:	e765      	b.n	15552 <etharp_find_entry+0x2aa>
        if (arp_table[i].q != NULL) {
   15686:	f8d4 70c0 	ldr.w	r7, [r4, #192]	; 0xc0
   1568a:	2f00      	cmp	r7, #0
   1568c:	f000 82a0 	beq.w	15bd0 <etharp_find_entry+0x928>
          if (arp_table[i].ctime >= age_queue) {
   15690:	f8b4 70d2 	ldrh.w	r7, [r4, #210]	; 0xd2
   15694:	4557      	cmp	r7, sl
   15696:	f4ff af76 	bcc.w	15586 <etharp_find_entry+0x2de>
   1569a:	46ba      	mov	sl, r7
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
   1569c:	f04f 0e08 	mov.w	lr, #8
   156a0:	e771      	b.n	15586 <etharp_find_entry+0x2de>
        if (arp_table[i].q != NULL) {
   156a2:	f8d4 10d8 	ldr.w	r1, [r4, #216]	; 0xd8
   156a6:	2900      	cmp	r1, #0
   156a8:	f000 829b 	beq.w	15be2 <etharp_find_entry+0x93a>
          if (arp_table[i].ctime >= age_queue) {
   156ac:	f8b4 10ea 	ldrh.w	r1, [r4, #234]	; 0xea
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
   156b0:	4551      	cmp	r1, sl
   156b2:	bf28      	it	cs
   156b4:	f04f 0e09 	movcs.w	lr, #9
   156b8:	e64a      	b.n	15350 <etharp_find_entry+0xa8>
   156ba:	4646      	mov	r6, r8
   156bc:	e6bd      	b.n	1543a <etharp_find_entry+0x192>
    u8_t state = arp_table[i].state;
   156be:	7d23      	ldrb	r3, [r4, #20]
    if ((empty == ARP_TABLE_SIZE) && (state == ETHARP_STATE_EMPTY)) {
   156c0:	b30b      	cbz	r3, 15706 <etharp_find_entry+0x45e>
      if (state == ETHARP_STATE_PENDING) {
   156c2:	2b01      	cmp	r3, #1
   156c4:	f000 8121 	beq.w	1590a <etharp_find_entry+0x662>
  s16_t old_queue = ARP_TABLE_SIZE;
   156c8:	f04f 0e0a 	mov.w	lr, #10
          if (arp_table[i].ctime >= age_stable) {
   156cc:	8a65      	ldrh	r5, [r4, #18]
  s16_t old_pending = ARP_TABLE_SIZE, old_stable = ARP_TABLE_SIZE;
   156ce:	46f0      	mov	r8, lr
  u16_t age_queue = 0, age_pending = 0, age_stable = 0;
   156d0:	4681      	mov	r9, r0
   156d2:	4607      	mov	r7, r0
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
   156d4:	4606      	mov	r6, r0
    u8_t state = arp_table[i].state;
   156d6:	f894 302c 	ldrb.w	r3, [r4, #44]	; 0x2c
    if ((empty == ARP_TABLE_SIZE) && (state == ETHARP_STATE_EMPTY)) {
   156da:	2b00      	cmp	r3, #0
   156dc:	f000 8187 	beq.w	159ee <etharp_find_entry+0x746>
      if (state == ETHARP_STATE_PENDING) {
   156e0:	2b01      	cmp	r3, #1
   156e2:	f000 83c8 	beq.w	15e76 <etharp_find_entry+0xbce>
          if (arp_table[i].ctime >= age_stable) {
   156e6:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
   156e8:	429d      	cmp	r5, r3
   156ea:	f240 8527 	bls.w	1613c <etharp_find_entry+0xe94>
   156ee:	230a      	movs	r3, #10
    if ((empty == ARP_TABLE_SIZE) && (state == ETHARP_STATE_EMPTY)) {
   156f0:	2b0a      	cmp	r3, #10
    u8_t state = arp_table[i].state;
   156f2:	f894 1044 	ldrb.w	r1, [r4, #68]	; 0x44
    if ((empty == ARP_TABLE_SIZE) && (state == ETHARP_STATE_EMPTY)) {
   156f6:	d115      	bne.n	15724 <etharp_find_entry+0x47c>
   156f8:	2900      	cmp	r1, #0
   156fa:	f040 80ae 	bne.w	1585a <etharp_find_entry+0x5b2>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
   156fe:	2302      	movs	r3, #2
   15700:	e013      	b.n	1572a <etharp_find_entry+0x482>
    if ((empty == ARP_TABLE_SIZE) && (state == ETHARP_STATE_EMPTY)) {
   15702:	230a      	movs	r3, #10
   15704:	e673      	b.n	153ee <etharp_find_entry+0x146>
    u8_t state = arp_table[i].state;
   15706:	f894 302c 	ldrb.w	r3, [r4, #44]	; 0x2c
    } else if (state != ETHARP_STATE_EMPTY) {
   1570a:	2b00      	cmp	r3, #0
   1570c:	f040 8171 	bne.w	159f2 <etharp_find_entry+0x74a>
   15710:	f04f 0e0a 	mov.w	lr, #10
   15714:	4676      	mov	r6, lr
   15716:	46f0      	mov	r8, lr
   15718:	4605      	mov	r5, r0
   1571a:	4681      	mov	r9, r0
   1571c:	4607      	mov	r7, r0
   1571e:	4603      	mov	r3, r0
    u8_t state = arp_table[i].state;
   15720:	f894 1044 	ldrb.w	r1, [r4, #68]	; 0x44
    } else if (state != ETHARP_STATE_EMPTY) {
   15724:	2900      	cmp	r1, #0
   15726:	f040 8098 	bne.w	1585a <etharp_find_entry+0x5b2>
    u8_t state = arp_table[i].state;
   1572a:	f894 105c 	ldrb.w	r1, [r4, #92]	; 0x5c
    } else if (state != ETHARP_STATE_EMPTY) {
   1572e:	2900      	cmp	r1, #0
   15730:	f040 8081 	bne.w	15836 <etharp_find_entry+0x58e>
    u8_t state = arp_table[i].state;
   15734:	f894 1074 	ldrb.w	r1, [r4, #116]	; 0x74
    } else if (state != ETHARP_STATE_EMPTY) {
   15738:	2900      	cmp	r1, #0
   1573a:	d16c      	bne.n	15816 <etharp_find_entry+0x56e>
    u8_t state = arp_table[i].state;
   1573c:	f894 108c 	ldrb.w	r1, [r4, #140]	; 0x8c
    } else if (state != ETHARP_STATE_EMPTY) {
   15740:	2900      	cmp	r1, #0
   15742:	f040 809b 	bne.w	1587c <etharp_find_entry+0x5d4>
    u8_t state = arp_table[i].state;
   15746:	f894 10a4 	ldrb.w	r1, [r4, #164]	; 0xa4
    } else if (state != ETHARP_STATE_EMPTY) {
   1574a:	2900      	cmp	r1, #0
   1574c:	f040 80b8 	bne.w	158c0 <etharp_find_entry+0x618>
    u8_t state = arp_table[i].state;
   15750:	f894 10bc 	ldrb.w	r1, [r4, #188]	; 0xbc
    } else if (state != ETHARP_STATE_EMPTY) {
   15754:	2900      	cmp	r1, #0
   15756:	f040 80a2 	bne.w	1589e <etharp_find_entry+0x5f6>
    u8_t state = arp_table[i].state;
   1575a:	f894 10d4 	ldrb.w	r1, [r4, #212]	; 0xd4
    } else if (state != ETHARP_STATE_EMPTY) {
   1575e:	2900      	cmp	r1, #0
   15760:	f040 80bf 	bne.w	158e2 <etharp_find_entry+0x63a>
    u8_t state = arp_table[i].state;
   15764:	f894 10ec 	ldrb.w	r1, [r4, #236]	; 0xec
    } else if (state != ETHARP_STATE_EMPTY) {
   15768:	2900      	cmp	r1, #0
   1576a:	f43f adf1 	beq.w	15350 <etharp_find_entry+0xa8>
      if (state == ETHARP_STATE_PENDING) {
   1576e:	2901      	cmp	r1, #1
   15770:	f000 8116 	beq.w	159a0 <etharp_find_entry+0x6f8>
          if (arp_table[i].ctime >= age_stable) {
   15774:	f8b4 10ea 	ldrh.w	r1, [r4, #234]	; 0xea
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
   15778:	42a9      	cmp	r1, r5
   1577a:	bf28      	it	cs
   1577c:	2609      	movcs	r6, #9
   1577e:	e5e7      	b.n	15350 <etharp_find_entry+0xa8>
          && ((netif == NULL) || (netif == arp_table[i].netif))
   15780:	6a27      	ldr	r7, [r4, #32]
   15782:	9a01      	ldr	r2, [sp, #4]
   15784:	42ba      	cmp	r2, r7
   15786:	f47f ae36 	bne.w	153f6 <etharp_find_entry+0x14e>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
   1578a:	2301      	movs	r3, #1
   1578c:	e5f9      	b.n	15382 <etharp_find_entry+0xda>
          && ((netif == NULL) || (netif == arp_table[i].netif))
   1578e:	68a3      	ldr	r3, [r4, #8]
   15790:	9a01      	ldr	r2, [sp, #4]
   15792:	429a      	cmp	r2, r3
   15794:	f47f ad9c 	bne.w	152d0 <etharp_find_entry+0x28>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
   15798:	2300      	movs	r3, #0
   1579a:	e5f2      	b.n	15382 <etharp_find_entry+0xda>
          && ((netif == NULL) || (netif == arp_table[i].netif))
   1579c:	6ba2      	ldr	r2, [r4, #56]	; 0x38
   1579e:	9f01      	ldr	r7, [sp, #4]
   157a0:	4297      	cmp	r7, r2
   157a2:	f47f ae09 	bne.w	153b8 <etharp_find_entry+0x110>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
   157a6:	2302      	movs	r3, #2
   157a8:	e5eb      	b.n	15382 <etharp_find_entry+0xda>
          && ((netif == NULL) || (netif == arp_table[i].netif))
   157aa:	6d22      	ldr	r2, [r4, #80]	; 0x50
   157ac:	9f01      	ldr	r7, [sp, #4]
   157ae:	4297      	cmp	r7, r2
   157b0:	f47f ae78 	bne.w	154a4 <etharp_find_entry+0x1fc>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
   157b4:	2303      	movs	r3, #3
   157b6:	e5e4      	b.n	15382 <etharp_find_entry+0xda>
          && ((netif == NULL) || (netif == arp_table[i].netif))
   157b8:	f8d4 2098 	ldr.w	r2, [r4, #152]	; 0x98
   157bc:	9f01      	ldr	r7, [sp, #4]
   157be:	4297      	cmp	r7, r2
   157c0:	f47f ae8a 	bne.w	154d8 <etharp_find_entry+0x230>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
   157c4:	2306      	movs	r3, #6
   157c6:	e5dc      	b.n	15382 <etharp_find_entry+0xda>
          && ((netif == NULL) || (netif == arp_table[i].netif))
   157c8:	6ea2      	ldr	r2, [r4, #104]	; 0x68
   157ca:	9f01      	ldr	r7, [sp, #4]
   157cc:	4297      	cmp	r7, r2
   157ce:	f47f ae50 	bne.w	15472 <etharp_find_entry+0x1ca>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
   157d2:	2304      	movs	r3, #4
   157d4:	e5d5      	b.n	15382 <etharp_find_entry+0xda>
          && ((netif == NULL) || (netif == arp_table[i].netif))
   157d6:	f8d4 2080 	ldr.w	r2, [r4, #128]	; 0x80
   157da:	9f01      	ldr	r7, [sp, #4]
   157dc:	4297      	cmp	r7, r2
   157de:	f47f ae94 	bne.w	1550a <etharp_find_entry+0x262>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
   157e2:	2305      	movs	r3, #5
   157e4:	e5cd      	b.n	15382 <etharp_find_entry+0xda>
          && ((netif == NULL) || (netif == arp_table[i].netif))
   157e6:	f8d4 20b0 	ldr.w	r2, [r4, #176]	; 0xb0
   157ea:	9f01      	ldr	r7, [sp, #4]
   157ec:	4297      	cmp	r7, r2
   157ee:	f47f aea6 	bne.w	1553e <etharp_find_entry+0x296>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
   157f2:	2307      	movs	r3, #7
   157f4:	e5c5      	b.n	15382 <etharp_find_entry+0xda>
          && ((netif == NULL) || (netif == arp_table[i].netif))
   157f6:	f8d4 20c8 	ldr.w	r2, [r4, #200]	; 0xc8
   157fa:	9f01      	ldr	r7, [sp, #4]
   157fc:	4297      	cmp	r7, r2
   157fe:	f47f aeb8 	bne.w	15572 <etharp_find_entry+0x2ca>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
   15802:	2308      	movs	r3, #8
   15804:	e5bd      	b.n	15382 <etharp_find_entry+0xda>
          && ((netif == NULL) || (netif == arp_table[i].netif))
   15806:	f8d4 50e0 	ldr.w	r5, [r4, #224]	; 0xe0
   1580a:	9a01      	ldr	r2, [sp, #4]
   1580c:	42aa      	cmp	r2, r5
   1580e:	f47f aec8 	bne.w	155a2 <etharp_find_entry+0x2fa>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
   15812:	2309      	movs	r3, #9
   15814:	e5b5      	b.n	15382 <etharp_find_entry+0xda>
      if (state == ETHARP_STATE_PENDING) {
   15816:	2901      	cmp	r1, #1
   15818:	f000 8082 	beq.w	15920 <etharp_find_entry+0x678>
          if (arp_table[i].ctime >= age_stable) {
   1581c:	f8b4 1072 	ldrh.w	r1, [r4, #114]	; 0x72
   15820:	42a9      	cmp	r1, r5
   15822:	d301      	bcc.n	15828 <etharp_find_entry+0x580>
   15824:	460d      	mov	r5, r1
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
   15826:	2604      	movs	r6, #4
    if ((empty == ARP_TABLE_SIZE) && (state == ETHARP_STATE_EMPTY)) {
   15828:	2b0a      	cmp	r3, #10
    u8_t state = arp_table[i].state;
   1582a:	f894 108c 	ldrb.w	r1, [r4, #140]	; 0x8c
    if ((empty == ARP_TABLE_SIZE) && (state == ETHARP_STATE_EMPTY)) {
   1582e:	d187      	bne.n	15740 <etharp_find_entry+0x498>
   15830:	bb21      	cbnz	r1, 1587c <etharp_find_entry+0x5d4>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
   15832:	2305      	movs	r3, #5
   15834:	e787      	b.n	15746 <etharp_find_entry+0x49e>
      if (state == ETHARP_STATE_PENDING) {
   15836:	2901      	cmp	r1, #1
   15838:	f000 808b 	beq.w	15952 <etharp_find_entry+0x6aa>
          if (arp_table[i].ctime >= age_stable) {
   1583c:	f8b4 105a 	ldrh.w	r1, [r4, #90]	; 0x5a
   15840:	42a9      	cmp	r1, r5
   15842:	d301      	bcc.n	15848 <etharp_find_entry+0x5a0>
   15844:	460d      	mov	r5, r1
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
   15846:	2603      	movs	r6, #3
    if ((empty == ARP_TABLE_SIZE) && (state == ETHARP_STATE_EMPTY)) {
   15848:	2b0a      	cmp	r3, #10
    u8_t state = arp_table[i].state;
   1584a:	f894 1074 	ldrb.w	r1, [r4, #116]	; 0x74
    if ((empty == ARP_TABLE_SIZE) && (state == ETHARP_STATE_EMPTY)) {
   1584e:	f47f af73 	bne.w	15738 <etharp_find_entry+0x490>
   15852:	2900      	cmp	r1, #0
   15854:	d1df      	bne.n	15816 <etharp_find_entry+0x56e>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
   15856:	2304      	movs	r3, #4
   15858:	e770      	b.n	1573c <etharp_find_entry+0x494>
      if (state == ETHARP_STATE_PENDING) {
   1585a:	2901      	cmp	r1, #1
   1585c:	d06d      	beq.n	1593a <etharp_find_entry+0x692>
          if (arp_table[i].ctime >= age_stable) {
   1585e:	f8b4 1042 	ldrh.w	r1, [r4, #66]	; 0x42
   15862:	42a9      	cmp	r1, r5
   15864:	d301      	bcc.n	1586a <etharp_find_entry+0x5c2>
   15866:	460d      	mov	r5, r1
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
   15868:	2602      	movs	r6, #2
    if ((empty == ARP_TABLE_SIZE) && (state == ETHARP_STATE_EMPTY)) {
   1586a:	2b0a      	cmp	r3, #10
    u8_t state = arp_table[i].state;
   1586c:	f894 105c 	ldrb.w	r1, [r4, #92]	; 0x5c
    if ((empty == ARP_TABLE_SIZE) && (state == ETHARP_STATE_EMPTY)) {
   15870:	f47f af5d 	bne.w	1572e <etharp_find_entry+0x486>
   15874:	2900      	cmp	r1, #0
   15876:	d1de      	bne.n	15836 <etharp_find_entry+0x58e>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
   15878:	2303      	movs	r3, #3
   1587a:	e75b      	b.n	15734 <etharp_find_entry+0x48c>
      if (state == ETHARP_STATE_PENDING) {
   1587c:	2901      	cmp	r1, #1
   1587e:	f000 8082 	beq.w	15986 <etharp_find_entry+0x6de>
          if (arp_table[i].ctime >= age_stable) {
   15882:	f8b4 108a 	ldrh.w	r1, [r4, #138]	; 0x8a
   15886:	42a9      	cmp	r1, r5
   15888:	d301      	bcc.n	1588e <etharp_find_entry+0x5e6>
   1588a:	460d      	mov	r5, r1
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
   1588c:	2605      	movs	r6, #5
    if ((empty == ARP_TABLE_SIZE) && (state == ETHARP_STATE_EMPTY)) {
   1588e:	2b0a      	cmp	r3, #10
    u8_t state = arp_table[i].state;
   15890:	f894 10a4 	ldrb.w	r1, [r4, #164]	; 0xa4
    if ((empty == ARP_TABLE_SIZE) && (state == ETHARP_STATE_EMPTY)) {
   15894:	f47f af59 	bne.w	1574a <etharp_find_entry+0x4a2>
   15898:	b991      	cbnz	r1, 158c0 <etharp_find_entry+0x618>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
   1589a:	2306      	movs	r3, #6
   1589c:	e758      	b.n	15750 <etharp_find_entry+0x4a8>
      if (state == ETHARP_STATE_PENDING) {
   1589e:	2901      	cmp	r1, #1
   158a0:	f000 808a 	beq.w	159b8 <etharp_find_entry+0x710>
          if (arp_table[i].ctime >= age_stable) {
   158a4:	f8b4 10ba 	ldrh.w	r1, [r4, #186]	; 0xba
   158a8:	42a9      	cmp	r1, r5
   158aa:	d301      	bcc.n	158b0 <etharp_find_entry+0x608>
   158ac:	460d      	mov	r5, r1
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
   158ae:	2607      	movs	r6, #7
    if ((empty == ARP_TABLE_SIZE) && (state == ETHARP_STATE_EMPTY)) {
   158b0:	2b0a      	cmp	r3, #10
    u8_t state = arp_table[i].state;
   158b2:	f894 10d4 	ldrb.w	r1, [r4, #212]	; 0xd4
    if ((empty == ARP_TABLE_SIZE) && (state == ETHARP_STATE_EMPTY)) {
   158b6:	f47f af52 	bne.w	1575e <etharp_find_entry+0x4b6>
   158ba:	b991      	cbnz	r1, 158e2 <etharp_find_entry+0x63a>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
   158bc:	2308      	movs	r3, #8
   158be:	e751      	b.n	15764 <etharp_find_entry+0x4bc>
      if (state == ETHARP_STATE_PENDING) {
   158c0:	2901      	cmp	r1, #1
   158c2:	d053      	beq.n	1596c <etharp_find_entry+0x6c4>
          if (arp_table[i].ctime >= age_stable) {
   158c4:	f8b4 10a2 	ldrh.w	r1, [r4, #162]	; 0xa2
   158c8:	42a9      	cmp	r1, r5
   158ca:	d301      	bcc.n	158d0 <etharp_find_entry+0x628>
   158cc:	460d      	mov	r5, r1
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
   158ce:	2606      	movs	r6, #6
    if ((empty == ARP_TABLE_SIZE) && (state == ETHARP_STATE_EMPTY)) {
   158d0:	2b0a      	cmp	r3, #10
    u8_t state = arp_table[i].state;
   158d2:	f894 10bc 	ldrb.w	r1, [r4, #188]	; 0xbc
    if ((empty == ARP_TABLE_SIZE) && (state == ETHARP_STATE_EMPTY)) {
   158d6:	f47f af3d 	bne.w	15754 <etharp_find_entry+0x4ac>
   158da:	2900      	cmp	r1, #0
   158dc:	d1df      	bne.n	1589e <etharp_find_entry+0x5f6>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
   158de:	2307      	movs	r3, #7
   158e0:	e73b      	b.n	1575a <etharp_find_entry+0x4b2>
      if (state == ETHARP_STATE_PENDING) {
   158e2:	2901      	cmp	r1, #1
   158e4:	d076      	beq.n	159d4 <etharp_find_entry+0x72c>
          if (arp_table[i].ctime >= age_stable) {
   158e6:	f8b4 10d2 	ldrh.w	r1, [r4, #210]	; 0xd2
   158ea:	42a9      	cmp	r1, r5
   158ec:	d301      	bcc.n	158f2 <etharp_find_entry+0x64a>
   158ee:	460d      	mov	r5, r1
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
   158f0:	2608      	movs	r6, #8
    if ((empty == ARP_TABLE_SIZE) && (state == ETHARP_STATE_EMPTY)) {
   158f2:	2b0a      	cmp	r3, #10
    u8_t state = arp_table[i].state;
   158f4:	f894 10ec 	ldrb.w	r1, [r4, #236]	; 0xec
    if ((empty == ARP_TABLE_SIZE) && (state == ETHARP_STATE_EMPTY)) {
   158f8:	f47f af36 	bne.w	15768 <etharp_find_entry+0x4c0>
   158fc:	2900      	cmp	r1, #0
   158fe:	f43f ae48 	beq.w	15592 <etharp_find_entry+0x2ea>
   15902:	e734      	b.n	1576e <etharp_find_entry+0x4c6>
    return (s16_t)ERR_MEM;
   15904:	f04f 33ff 	mov.w	r3, #4294967295
   15908:	e53b      	b.n	15382 <etharp_find_entry+0xda>
        if (arp_table[i].q != NULL) {
   1590a:	6823      	ldr	r3, [r4, #0]
   1590c:	2b00      	cmp	r3, #0
   1590e:	f000 82b5 	beq.w	15e7c <etharp_find_entry+0xbd4>
  s16_t old_pending = ARP_TABLE_SIZE, old_stable = ARP_TABLE_SIZE;
   15912:	260a      	movs	r6, #10
          if (arp_table[i].ctime >= age_queue) {
   15914:	8a67      	ldrh	r7, [r4, #18]
  s16_t old_pending = ARP_TABLE_SIZE, old_stable = ARP_TABLE_SIZE;
   15916:	46b0      	mov	r8, r6
  u16_t age_queue = 0, age_pending = 0, age_stable = 0;
   15918:	4605      	mov	r5, r0
   1591a:	4681      	mov	r9, r0
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
   1591c:	4686      	mov	lr, r0
   1591e:	e6da      	b.n	156d6 <etharp_find_entry+0x42e>
        if (arp_table[i].q != NULL) {
   15920:	6e21      	ldr	r1, [r4, #96]	; 0x60
   15922:	2900      	cmp	r1, #0
   15924:	f000 838b 	beq.w	1603e <etharp_find_entry+0xd96>
          if (arp_table[i].ctime >= age_queue) {
   15928:	f8b4 1072 	ldrh.w	r1, [r4, #114]	; 0x72
   1592c:	42b9      	cmp	r1, r7
   1592e:	f4ff af7b 	bcc.w	15828 <etharp_find_entry+0x580>
   15932:	460f      	mov	r7, r1
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
   15934:	f04f 0e04 	mov.w	lr, #4
   15938:	e776      	b.n	15828 <etharp_find_entry+0x580>
        if (arp_table[i].q != NULL) {
   1593a:	6b21      	ldr	r1, [r4, #48]	; 0x30
   1593c:	2900      	cmp	r1, #0
   1593e:	f000 8375 	beq.w	1602c <etharp_find_entry+0xd84>
          if (arp_table[i].ctime >= age_queue) {
   15942:	f8b4 1042 	ldrh.w	r1, [r4, #66]	; 0x42
   15946:	42b9      	cmp	r1, r7
   15948:	d38f      	bcc.n	1586a <etharp_find_entry+0x5c2>
   1594a:	460f      	mov	r7, r1
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
   1594c:	f04f 0e02 	mov.w	lr, #2
   15950:	e78b      	b.n	1586a <etharp_find_entry+0x5c2>
        if (arp_table[i].q != NULL) {
   15952:	6ca1      	ldr	r1, [r4, #72]	; 0x48
   15954:	2900      	cmp	r1, #0
   15956:	f000 82d9 	beq.w	15f0c <etharp_find_entry+0xc64>
          if (arp_table[i].ctime >= age_queue) {
   1595a:	f8b4 105a 	ldrh.w	r1, [r4, #90]	; 0x5a
   1595e:	42b9      	cmp	r1, r7
   15960:	f4ff af72 	bcc.w	15848 <etharp_find_entry+0x5a0>
   15964:	460f      	mov	r7, r1
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
   15966:	f04f 0e03 	mov.w	lr, #3
   1596a:	e76d      	b.n	15848 <etharp_find_entry+0x5a0>
        if (arp_table[i].q != NULL) {
   1596c:	f8d4 1090 	ldr.w	r1, [r4, #144]	; 0x90
   15970:	2900      	cmp	r1, #0
   15972:	f000 82c2 	beq.w	15efa <etharp_find_entry+0xc52>
          if (arp_table[i].ctime >= age_queue) {
   15976:	f8b4 10a2 	ldrh.w	r1, [r4, #162]	; 0xa2
   1597a:	42b9      	cmp	r1, r7
   1597c:	d3a8      	bcc.n	158d0 <etharp_find_entry+0x628>
   1597e:	460f      	mov	r7, r1
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
   15980:	f04f 0e06 	mov.w	lr, #6
   15984:	e7a4      	b.n	158d0 <etharp_find_entry+0x628>
        if (arp_table[i].q != NULL) {
   15986:	6fa1      	ldr	r1, [r4, #120]	; 0x78
   15988:	2900      	cmp	r1, #0
   1598a:	f000 8362 	beq.w	16052 <etharp_find_entry+0xdaa>
          if (arp_table[i].ctime >= age_queue) {
   1598e:	f8b4 108a 	ldrh.w	r1, [r4, #138]	; 0x8a
   15992:	42b9      	cmp	r1, r7
   15994:	f4ff af7b 	bcc.w	1588e <etharp_find_entry+0x5e6>
   15998:	460f      	mov	r7, r1
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
   1599a:	f04f 0e05 	mov.w	lr, #5
   1599e:	e776      	b.n	1588e <etharp_find_entry+0x5e6>
        if (arp_table[i].q != NULL) {
   159a0:	f8d4 10d8 	ldr.w	r1, [r4, #216]	; 0xd8
   159a4:	2900      	cmp	r1, #0
   159a6:	f000 825e 	beq.w	15e66 <etharp_find_entry+0xbbe>
          if (arp_table[i].ctime >= age_queue) {
   159aa:	f8b4 10ea 	ldrh.w	r1, [r4, #234]	; 0xea
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
   159ae:	42b9      	cmp	r1, r7
   159b0:	bf28      	it	cs
   159b2:	f04f 0e09 	movcs.w	lr, #9
   159b6:	e4cb      	b.n	15350 <etharp_find_entry+0xa8>
        if (arp_table[i].q != NULL) {
   159b8:	f8d4 10a8 	ldr.w	r1, [r4, #168]	; 0xa8
   159bc:	2900      	cmp	r1, #0
   159be:	f000 8351 	beq.w	16064 <etharp_find_entry+0xdbc>
          if (arp_table[i].ctime >= age_queue) {
   159c2:	f8b4 10ba 	ldrh.w	r1, [r4, #186]	; 0xba
   159c6:	42b9      	cmp	r1, r7
   159c8:	f4ff af72 	bcc.w	158b0 <etharp_find_entry+0x608>
   159cc:	460f      	mov	r7, r1
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
   159ce:	f04f 0e07 	mov.w	lr, #7
   159d2:	e76d      	b.n	158b0 <etharp_find_entry+0x608>
        if (arp_table[i].q != NULL) {
   159d4:	f8d4 10c0 	ldr.w	r1, [r4, #192]	; 0xc0
   159d8:	2900      	cmp	r1, #0
   159da:	f000 82a0 	beq.w	15f1e <etharp_find_entry+0xc76>
          if (arp_table[i].ctime >= age_queue) {
   159de:	f8b4 10d2 	ldrh.w	r1, [r4, #210]	; 0xd2
   159e2:	42b9      	cmp	r1, r7
   159e4:	d385      	bcc.n	158f2 <etharp_find_entry+0x64a>
   159e6:	460f      	mov	r7, r1
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
   159e8:	f04f 0e08 	mov.w	lr, #8
   159ec:	e781      	b.n	158f2 <etharp_find_entry+0x64a>
   159ee:	2301      	movs	r3, #1
   159f0:	e696      	b.n	15720 <etharp_find_entry+0x478>
      if (state == ETHARP_STATE_PENDING) {
   159f2:	2b01      	cmp	r3, #1
   159f4:	f040 809d 	bne.w	15b32 <etharp_find_entry+0x88a>
   159f8:	f04f 0e0a 	mov.w	lr, #10
   159fc:	4676      	mov	r6, lr
   159fe:	46f0      	mov	r8, lr
   15a00:	4605      	mov	r5, r0
   15a02:	4681      	mov	r9, r0
   15a04:	4682      	mov	sl, r0
   15a06:	4603      	mov	r3, r0
        if (arp_table[i].q != NULL) {
   15a08:	69a1      	ldr	r1, [r4, #24]
   15a0a:	2900      	cmp	r1, #0
   15a0c:	f000 81dd 	beq.w	15dca <etharp_find_entry+0xb22>
          if (arp_table[i].ctime >= age_queue) {
   15a10:	8d67      	ldrh	r7, [r4, #42]	; 0x2a
   15a12:	4557      	cmp	r7, sl
   15a14:	f0c0 8105 	bcc.w	15c22 <etharp_find_entry+0x97a>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
   15a18:	f04f 0e01 	mov.w	lr, #1
   15a1c:	e668      	b.n	156f0 <etharp_find_entry+0x448>
    u8_t state = arp_table[i].state;
   15a1e:	7d23      	ldrb	r3, [r4, #20]
   15a20:	2800      	cmp	r0, #0
   15a22:	f000 817a 	beq.w	15d1a <etharp_find_entry+0xa72>
    if ((empty == ARP_TABLE_SIZE) && (state == ETHARP_STATE_EMPTY)) {
   15a26:	2b00      	cmp	r3, #0
   15a28:	d05b      	beq.n	15ae2 <etharp_find_entry+0x83a>
      if (ipaddr && ip4_addr_cmp(ipaddr, &arp_table[i].ipaddr)
   15a2a:	6805      	ldr	r5, [r0, #0]
   15a2c:	6861      	ldr	r1, [r4, #4]
   15a2e:	428d      	cmp	r5, r1
   15a30:	f43f aeb2 	beq.w	15798 <etharp_find_entry+0x4f0>
      if (state == ETHARP_STATE_PENDING) {
   15a34:	2b01      	cmp	r3, #1
   15a36:	f000 822a 	beq.w	15e8e <etharp_find_entry+0xbe6>
  u16_t age_queue = 0, age_pending = 0, age_stable = 0;
   15a3a:	9e01      	ldr	r6, [sp, #4]
          if (arp_table[i].ctime >= age_stable) {
   15a3c:	8a67      	ldrh	r7, [r4, #18]
  s16_t old_queue = ARP_TABLE_SIZE;
   15a3e:	f04f 0e0a 	mov.w	lr, #10
  s16_t old_pending = ARP_TABLE_SIZE, old_stable = ARP_TABLE_SIZE;
   15a42:	46f0      	mov	r8, lr
  u16_t age_queue = 0, age_pending = 0, age_stable = 0;
   15a44:	46b1      	mov	r9, r6
   15a46:	46b2      	mov	sl, r6
    u8_t state = arp_table[i].state;
   15a48:	f894 b02c 	ldrb.w	fp, [r4, #44]	; 0x2c
    if ((empty == ARP_TABLE_SIZE) && (state == ETHARP_STATE_EMPTY)) {
   15a4c:	f1bb 0f00 	cmp.w	fp, #0
   15a50:	f000 80cf 	beq.w	15bf2 <etharp_find_entry+0x94a>
   15a54:	230a      	movs	r3, #10
      if (ipaddr && ip4_addr_cmp(ipaddr, &arp_table[i].ipaddr)
   15a56:	69e1      	ldr	r1, [r4, #28]
   15a58:	428d      	cmp	r5, r1
   15a5a:	f43f ae96 	beq.w	1578a <etharp_find_entry+0x4e2>
      if (state == ETHARP_STATE_PENDING) {
   15a5e:	f1bb 0f01 	cmp.w	fp, #1
   15a62:	f000 81f0 	beq.w	15e46 <etharp_find_entry+0xb9e>
          if (arp_table[i].ctime >= age_stable) {
   15a66:	8d61      	ldrh	r1, [r4, #42]	; 0x2a
   15a68:	42b9      	cmp	r1, r7
   15a6a:	d301      	bcc.n	15a70 <etharp_find_entry+0x7c8>
   15a6c:	460f      	mov	r7, r1
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
   15a6e:	2601      	movs	r6, #1
    if ((empty == ARP_TABLE_SIZE) && (state == ETHARP_STATE_EMPTY)) {
   15a70:	2b0a      	cmp	r3, #10
    u8_t state = arp_table[i].state;
   15a72:	f894 1044 	ldrb.w	r1, [r4, #68]	; 0x44
    if ((empty == ARP_TABLE_SIZE) && (state == ETHARP_STATE_EMPTY)) {
   15a76:	d144      	bne.n	15b02 <etharp_find_entry+0x85a>
   15a78:	2900      	cmp	r1, #0
   15a7a:	d145      	bne.n	15b08 <etharp_find_entry+0x860>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
   15a7c:	2302      	movs	r3, #2
    u8_t state = arp_table[i].state;
   15a7e:	f894 105c 	ldrb.w	r1, [r4, #92]	; 0x5c
    } else if (state != ETHARP_STATE_EMPTY) {
   15a82:	2900      	cmp	r1, #0
   15a84:	f040 80b7 	bne.w	15bf6 <etharp_find_entry+0x94e>
    u8_t state = arp_table[i].state;
   15a88:	f894 1074 	ldrb.w	r1, [r4, #116]	; 0x74
    } else if (state != ETHARP_STATE_EMPTY) {
   15a8c:	2900      	cmp	r1, #0
   15a8e:	f040 80ca 	bne.w	15c26 <etharp_find_entry+0x97e>
    u8_t state = arp_table[i].state;
   15a92:	f894 108c 	ldrb.w	r1, [r4, #140]	; 0x8c
    } else if (state != ETHARP_STATE_EMPTY) {
   15a96:	2900      	cmp	r1, #0
   15a98:	f040 80db 	bne.w	15c52 <etharp_find_entry+0x9aa>
    u8_t state = arp_table[i].state;
   15a9c:	f894 10a4 	ldrb.w	r1, [r4, #164]	; 0xa4
    } else if (state != ETHARP_STATE_EMPTY) {
   15aa0:	2900      	cmp	r1, #0
   15aa2:	f040 80ec 	bne.w	15c7e <etharp_find_entry+0x9d6>
    u8_t state = arp_table[i].state;
   15aa6:	f894 10bc 	ldrb.w	r1, [r4, #188]	; 0xbc
    } else if (state != ETHARP_STATE_EMPTY) {
   15aaa:	2900      	cmp	r1, #0
   15aac:	f040 80fe 	bne.w	15cac <etharp_find_entry+0xa04>
    u8_t state = arp_table[i].state;
   15ab0:	f894 10d4 	ldrb.w	r1, [r4, #212]	; 0xd4
    } else if (state != ETHARP_STATE_EMPTY) {
   15ab4:	2900      	cmp	r1, #0
   15ab6:	f040 8110 	bne.w	15cda <etharp_find_entry+0xa32>
    u8_t state = arp_table[i].state;
   15aba:	f894 10ec 	ldrb.w	r1, [r4, #236]	; 0xec
    } else if (state != ETHARP_STATE_EMPTY) {
   15abe:	2900      	cmp	r1, #0
   15ac0:	f43f ac46 	beq.w	15350 <etharp_find_entry+0xa8>
   15ac4:	6805      	ldr	r5, [r0, #0]
      if (ipaddr && ip4_addr_cmp(ipaddr, &arp_table[i].ipaddr)
   15ac6:	f8d4 20dc 	ldr.w	r2, [r4, #220]	; 0xdc
   15aca:	4295      	cmp	r5, r2
   15acc:	f43f aea1 	beq.w	15812 <etharp_find_entry+0x56a>
      if (state == ETHARP_STATE_PENDING) {
   15ad0:	2901      	cmp	r1, #1
   15ad2:	f000 81c3 	beq.w	15e5c <etharp_find_entry+0xbb4>
          if (arp_table[i].ctime >= age_stable) {
   15ad6:	f8b4 10ea 	ldrh.w	r1, [r4, #234]	; 0xea
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
   15ada:	42b9      	cmp	r1, r7
   15adc:	bf28      	it	cs
   15ade:	2609      	movcs	r6, #9
   15ae0:	e436      	b.n	15350 <etharp_find_entry+0xa8>
    u8_t state = arp_table[i].state;
   15ae2:	f894 b02c 	ldrb.w	fp, [r4, #44]	; 0x2c
    } else if (state != ETHARP_STATE_EMPTY) {
   15ae6:	f04f 0e0a 	mov.w	lr, #10
   15aea:	f1bb 0f00 	cmp.w	fp, #0
   15aee:	f040 810c 	bne.w	15d0a <etharp_find_entry+0xa62>
   15af2:	9b01      	ldr	r3, [sp, #4]
   15af4:	4676      	mov	r6, lr
   15af6:	46f0      	mov	r8, lr
   15af8:	461f      	mov	r7, r3
   15afa:	4699      	mov	r9, r3
   15afc:	469a      	mov	sl, r3
    u8_t state = arp_table[i].state;
   15afe:	f894 1044 	ldrb.w	r1, [r4, #68]	; 0x44
    } else if (state != ETHARP_STATE_EMPTY) {
   15b02:	2900      	cmp	r1, #0
   15b04:	d0bb      	beq.n	15a7e <etharp_find_entry+0x7d6>
   15b06:	6805      	ldr	r5, [r0, #0]
      if (ipaddr && ip4_addr_cmp(ipaddr, &arp_table[i].ipaddr)
   15b08:	6b62      	ldr	r2, [r4, #52]	; 0x34
   15b0a:	4295      	cmp	r5, r2
   15b0c:	f43f ae4b 	beq.w	157a6 <etharp_find_entry+0x4fe>
      if (state == ETHARP_STATE_PENDING) {
   15b10:	2901      	cmp	r1, #1
   15b12:	f000 818b 	beq.w	15e2c <etharp_find_entry+0xb84>
          if (arp_table[i].ctime >= age_stable) {
   15b16:	f8b4 1042 	ldrh.w	r1, [r4, #66]	; 0x42
   15b1a:	42b9      	cmp	r1, r7
   15b1c:	d301      	bcc.n	15b22 <etharp_find_entry+0x87a>
   15b1e:	460f      	mov	r7, r1
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
   15b20:	2602      	movs	r6, #2
    if ((empty == ARP_TABLE_SIZE) && (state == ETHARP_STATE_EMPTY)) {
   15b22:	2b0a      	cmp	r3, #10
    u8_t state = arp_table[i].state;
   15b24:	f894 105c 	ldrb.w	r1, [r4, #92]	; 0x5c
    if ((empty == ARP_TABLE_SIZE) && (state == ETHARP_STATE_EMPTY)) {
   15b28:	d1ab      	bne.n	15a82 <etharp_find_entry+0x7da>
   15b2a:	2900      	cmp	r1, #0
   15b2c:	d164      	bne.n	15bf8 <etharp_find_entry+0x950>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
   15b2e:	2303      	movs	r3, #3
   15b30:	e7aa      	b.n	15a88 <etharp_find_entry+0x7e0>
          if (arp_table[i].ctime >= age_stable) {
   15b32:	f04f 0e0a 	mov.w	lr, #10
   15b36:	8d65      	ldrh	r5, [r4, #42]	; 0x2a
   15b38:	46f0      	mov	r8, lr
   15b3a:	4681      	mov	r9, r0
   15b3c:	4607      	mov	r7, r0
   15b3e:	4603      	mov	r3, r0
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
   15b40:	2601      	movs	r6, #1
   15b42:	e5d5      	b.n	156f0 <etharp_find_entry+0x448>
          if (arp_table[i].ctime >= age_pending) {
   15b44:	f8b4 70a2 	ldrh.w	r7, [r4, #162]	; 0xa2
   15b48:	455f      	cmp	r7, fp
   15b4a:	f4ff accf 	bcc.w	154ec <etharp_find_entry+0x244>
   15b4e:	46bb      	mov	fp, r7
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
   15b50:	f04f 0806 	mov.w	r8, #6
   15b54:	e4ca      	b.n	154ec <etharp_find_entry+0x244>
          if (arp_table[i].ctime >= age_pending) {
   15b56:	f8b4 70ba 	ldrh.w	r7, [r4, #186]	; 0xba
   15b5a:	455f      	cmp	r7, fp
   15b5c:	f4ff acf9 	bcc.w	15552 <etharp_find_entry+0x2aa>
   15b60:	46bb      	mov	fp, r7
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
   15b62:	f04f 0807 	mov.w	r8, #7
   15b66:	e4f4      	b.n	15552 <etharp_find_entry+0x2aa>
          if (arp_table[i].ctime >= age_pending) {
   15b68:	f8b4 708a 	ldrh.w	r7, [r4, #138]	; 0x8a
   15b6c:	455f      	cmp	r7, fp
   15b6e:	f4ff acd6 	bcc.w	1551e <etharp_find_entry+0x276>
   15b72:	46bb      	mov	fp, r7
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
   15b74:	f04f 0805 	mov.w	r8, #5
   15b78:	e4d1      	b.n	1551e <etharp_find_entry+0x276>
          if (arp_table[i].ctime >= age_pending) {
   15b7a:	f8b4 7042 	ldrh.w	r7, [r4, #66]	; 0x42
   15b7e:	455f      	cmp	r7, fp
   15b80:	f4ff ac24 	bcc.w	153cc <etharp_find_entry+0x124>
   15b84:	46bb      	mov	fp, r7
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
   15b86:	f04f 0802 	mov.w	r8, #2
   15b8a:	e41f      	b.n	153cc <etharp_find_entry+0x124>
  s16_t old_queue = ARP_TABLE_SIZE;
   15b8c:	f04f 0e0a 	mov.w	lr, #10
  u16_t age_queue = 0, age_pending = 0, age_stable = 0;
   15b90:	468a      	mov	sl, r1
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
   15b92:	4688      	mov	r8, r1
  s16_t old_pending = ARP_TABLE_SIZE, old_stable = ARP_TABLE_SIZE;
   15b94:	4676      	mov	r6, lr
          if (arp_table[i].ctime >= age_pending) {
   15b96:	f8b4 b012 	ldrh.w	fp, [r4, #18]
   15b9a:	f7ff bba4 	b.w	152e6 <etharp_find_entry+0x3e>
   15b9e:	f8b4 705a 	ldrh.w	r7, [r4, #90]	; 0x5a
   15ba2:	455f      	cmp	r7, fp
   15ba4:	f4ff ac88 	bcc.w	154b8 <etharp_find_entry+0x210>
   15ba8:	46bb      	mov	fp, r7
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
   15baa:	f04f 0803 	mov.w	r8, #3
   15bae:	e483      	b.n	154b8 <etharp_find_entry+0x210>
          if (arp_table[i].ctime >= age_pending) {
   15bb0:	f8b4 7072 	ldrh.w	r7, [r4, #114]	; 0x72
   15bb4:	455f      	cmp	r7, fp
   15bb6:	f4ff ac66 	bcc.w	15486 <etharp_find_entry+0x1de>
   15bba:	46bb      	mov	fp, r7
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
   15bbc:	f04f 0804 	mov.w	r8, #4
   15bc0:	e461      	b.n	15486 <etharp_find_entry+0x1de>
          if (arp_table[i].ctime >= age_pending) {
   15bc2:	8d67      	ldrh	r7, [r4, #42]	; 0x2a
   15bc4:	455f      	cmp	r7, fp
   15bc6:	f4ff ac1f 	bcc.w	15408 <etharp_find_entry+0x160>
   15bca:	46bb      	mov	fp, r7
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
   15bcc:	46c8      	mov	r8, r9
   15bce:	e41b      	b.n	15408 <etharp_find_entry+0x160>
          if (arp_table[i].ctime >= age_pending) {
   15bd0:	f8b4 70d2 	ldrh.w	r7, [r4, #210]	; 0xd2
   15bd4:	455f      	cmp	r7, fp
   15bd6:	f4ff acd6 	bcc.w	15586 <etharp_find_entry+0x2de>
   15bda:	46bb      	mov	fp, r7
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
   15bdc:	f04f 0808 	mov.w	r8, #8
   15be0:	e4d1      	b.n	15586 <etharp_find_entry+0x2de>
          if (arp_table[i].ctime >= age_pending) {
   15be2:	f8b4 10ea 	ldrh.w	r1, [r4, #234]	; 0xea
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
   15be6:	4559      	cmp	r1, fp
   15be8:	bf28      	it	cs
   15bea:	f04f 0809 	movcs.w	r8, #9
   15bee:	f7ff bbaf 	b.w	15350 <etharp_find_entry+0xa8>
   15bf2:	2301      	movs	r3, #1
   15bf4:	e783      	b.n	15afe <etharp_find_entry+0x856>
   15bf6:	6805      	ldr	r5, [r0, #0]
      if (ipaddr && ip4_addr_cmp(ipaddr, &arp_table[i].ipaddr)
   15bf8:	6ce2      	ldr	r2, [r4, #76]	; 0x4c
   15bfa:	4295      	cmp	r5, r2
   15bfc:	f43f adda 	beq.w	157b4 <etharp_find_entry+0x50c>
      if (state == ETHARP_STATE_PENDING) {
   15c00:	2901      	cmp	r1, #1
   15c02:	f000 815f 	beq.w	15ec4 <etharp_find_entry+0xc1c>
          if (arp_table[i].ctime >= age_stable) {
   15c06:	f8b4 105a 	ldrh.w	r1, [r4, #90]	; 0x5a
   15c0a:	42b9      	cmp	r1, r7
   15c0c:	d301      	bcc.n	15c12 <etharp_find_entry+0x96a>
   15c0e:	460f      	mov	r7, r1
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
   15c10:	2603      	movs	r6, #3
    if ((empty == ARP_TABLE_SIZE) && (state == ETHARP_STATE_EMPTY)) {
   15c12:	2b0a      	cmp	r3, #10
    u8_t state = arp_table[i].state;
   15c14:	f894 1074 	ldrb.w	r1, [r4, #116]	; 0x74
    if ((empty == ARP_TABLE_SIZE) && (state == ETHARP_STATE_EMPTY)) {
   15c18:	f47f af38 	bne.w	15a8c <etharp_find_entry+0x7e4>
   15c1c:	b921      	cbnz	r1, 15c28 <etharp_find_entry+0x980>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
   15c1e:	2304      	movs	r3, #4
   15c20:	e737      	b.n	15a92 <etharp_find_entry+0x7ea>
          if (arp_table[i].ctime >= age_queue) {
   15c22:	4657      	mov	r7, sl
   15c24:	e564      	b.n	156f0 <etharp_find_entry+0x448>
   15c26:	6805      	ldr	r5, [r0, #0]
      if (ipaddr && ip4_addr_cmp(ipaddr, &arp_table[i].ipaddr)
   15c28:	6e62      	ldr	r2, [r4, #100]	; 0x64
   15c2a:	4295      	cmp	r5, r2
   15c2c:	f43f add1 	beq.w	157d2 <etharp_find_entry+0x52a>
      if (state == ETHARP_STATE_PENDING) {
   15c30:	2901      	cmp	r1, #1
   15c32:	f000 80ee 	beq.w	15e12 <etharp_find_entry+0xb6a>
          if (arp_table[i].ctime >= age_stable) {
   15c36:	f8b4 1072 	ldrh.w	r1, [r4, #114]	; 0x72
   15c3a:	42b9      	cmp	r1, r7
   15c3c:	d301      	bcc.n	15c42 <etharp_find_entry+0x99a>
   15c3e:	460f      	mov	r7, r1
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
   15c40:	2604      	movs	r6, #4
    if ((empty == ARP_TABLE_SIZE) && (state == ETHARP_STATE_EMPTY)) {
   15c42:	2b0a      	cmp	r3, #10
    u8_t state = arp_table[i].state;
   15c44:	f894 108c 	ldrb.w	r1, [r4, #140]	; 0x8c
    if ((empty == ARP_TABLE_SIZE) && (state == ETHARP_STATE_EMPTY)) {
   15c48:	f47f af25 	bne.w	15a96 <etharp_find_entry+0x7ee>
   15c4c:	b911      	cbnz	r1, 15c54 <etharp_find_entry+0x9ac>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
   15c4e:	2305      	movs	r3, #5
   15c50:	e724      	b.n	15a9c <etharp_find_entry+0x7f4>
   15c52:	6805      	ldr	r5, [r0, #0]
      if (ipaddr && ip4_addr_cmp(ipaddr, &arp_table[i].ipaddr)
   15c54:	6fe2      	ldr	r2, [r4, #124]	; 0x7c
   15c56:	4295      	cmp	r5, r2
   15c58:	f43f adc3 	beq.w	157e2 <etharp_find_entry+0x53a>
      if (state == ETHARP_STATE_PENDING) {
   15c5c:	2901      	cmp	r1, #1
   15c5e:	f000 80cb 	beq.w	15df8 <etharp_find_entry+0xb50>
          if (arp_table[i].ctime >= age_stable) {
   15c62:	f8b4 108a 	ldrh.w	r1, [r4, #138]	; 0x8a
   15c66:	42b9      	cmp	r1, r7
   15c68:	d301      	bcc.n	15c6e <etharp_find_entry+0x9c6>
   15c6a:	460f      	mov	r7, r1
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
   15c6c:	2605      	movs	r6, #5
    if ((empty == ARP_TABLE_SIZE) && (state == ETHARP_STATE_EMPTY)) {
   15c6e:	2b0a      	cmp	r3, #10
    u8_t state = arp_table[i].state;
   15c70:	f894 10a4 	ldrb.w	r1, [r4, #164]	; 0xa4
    if ((empty == ARP_TABLE_SIZE) && (state == ETHARP_STATE_EMPTY)) {
   15c74:	f47f af14 	bne.w	15aa0 <etharp_find_entry+0x7f8>
   15c78:	b911      	cbnz	r1, 15c80 <etharp_find_entry+0x9d8>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
   15c7a:	2306      	movs	r3, #6
   15c7c:	e713      	b.n	15aa6 <etharp_find_entry+0x7fe>
   15c7e:	6805      	ldr	r5, [r0, #0]
      if (ipaddr && ip4_addr_cmp(ipaddr, &arp_table[i].ipaddr)
   15c80:	f8d4 2094 	ldr.w	r2, [r4, #148]	; 0x94
   15c84:	4295      	cmp	r5, r2
   15c86:	f43f ad9d 	beq.w	157c4 <etharp_find_entry+0x51c>
      if (state == ETHARP_STATE_PENDING) {
   15c8a:	2901      	cmp	r1, #1
   15c8c:	f000 80a6 	beq.w	15ddc <etharp_find_entry+0xb34>
          if (arp_table[i].ctime >= age_stable) {
   15c90:	f8b4 10a2 	ldrh.w	r1, [r4, #162]	; 0xa2
   15c94:	42b9      	cmp	r1, r7
   15c96:	d301      	bcc.n	15c9c <etharp_find_entry+0x9f4>
   15c98:	460f      	mov	r7, r1
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
   15c9a:	2606      	movs	r6, #6
    if ((empty == ARP_TABLE_SIZE) && (state == ETHARP_STATE_EMPTY)) {
   15c9c:	2b0a      	cmp	r3, #10
    u8_t state = arp_table[i].state;
   15c9e:	f894 10bc 	ldrb.w	r1, [r4, #188]	; 0xbc
    if ((empty == ARP_TABLE_SIZE) && (state == ETHARP_STATE_EMPTY)) {
   15ca2:	f47f af02 	bne.w	15aaa <etharp_find_entry+0x802>
   15ca6:	b911      	cbnz	r1, 15cae <etharp_find_entry+0xa06>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
   15ca8:	2307      	movs	r3, #7
   15caa:	e701      	b.n	15ab0 <etharp_find_entry+0x808>
   15cac:	6805      	ldr	r5, [r0, #0]
      if (ipaddr && ip4_addr_cmp(ipaddr, &arp_table[i].ipaddr)
   15cae:	f8d4 20ac 	ldr.w	r2, [r4, #172]	; 0xac
   15cb2:	4295      	cmp	r5, r2
   15cb4:	f43f ad9d 	beq.w	157f2 <etharp_find_entry+0x54a>
      if (state == ETHARP_STATE_PENDING) {
   15cb8:	2901      	cmp	r1, #1
   15cba:	f000 8110 	beq.w	15ede <etharp_find_entry+0xc36>
          if (arp_table[i].ctime >= age_stable) {
   15cbe:	f8b4 10ba 	ldrh.w	r1, [r4, #186]	; 0xba
   15cc2:	42b9      	cmp	r1, r7
   15cc4:	d301      	bcc.n	15cca <etharp_find_entry+0xa22>
   15cc6:	460f      	mov	r7, r1
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
   15cc8:	2607      	movs	r6, #7
    if ((empty == ARP_TABLE_SIZE) && (state == ETHARP_STATE_EMPTY)) {
   15cca:	2b0a      	cmp	r3, #10
    u8_t state = arp_table[i].state;
   15ccc:	f894 10d4 	ldrb.w	r1, [r4, #212]	; 0xd4
    if ((empty == ARP_TABLE_SIZE) && (state == ETHARP_STATE_EMPTY)) {
   15cd0:	f47f aef0 	bne.w	15ab4 <etharp_find_entry+0x80c>
   15cd4:	b911      	cbnz	r1, 15cdc <etharp_find_entry+0xa34>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
   15cd6:	2308      	movs	r3, #8
   15cd8:	e6ef      	b.n	15aba <etharp_find_entry+0x812>
   15cda:	6805      	ldr	r5, [r0, #0]
      if (ipaddr && ip4_addr_cmp(ipaddr, &arp_table[i].ipaddr)
   15cdc:	f8d4 20c4 	ldr.w	r2, [r4, #196]	; 0xc4
   15ce0:	4295      	cmp	r5, r2
   15ce2:	f43f ad8e 	beq.w	15802 <etharp_find_entry+0x55a>
      if (state == ETHARP_STATE_PENDING) {
   15ce6:	2901      	cmp	r1, #1
   15ce8:	f000 80de 	beq.w	15ea8 <etharp_find_entry+0xc00>
          if (arp_table[i].ctime >= age_stable) {
   15cec:	f8b4 10d2 	ldrh.w	r1, [r4, #210]	; 0xd2
   15cf0:	42b9      	cmp	r1, r7
   15cf2:	d301      	bcc.n	15cf8 <etharp_find_entry+0xa50>
   15cf4:	460f      	mov	r7, r1
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
   15cf6:	2608      	movs	r6, #8
    if ((empty == ARP_TABLE_SIZE) && (state == ETHARP_STATE_EMPTY)) {
   15cf8:	2b0a      	cmp	r3, #10
    u8_t state = arp_table[i].state;
   15cfa:	f894 10ec 	ldrb.w	r1, [r4, #236]	; 0xec
    if ((empty == ARP_TABLE_SIZE) && (state == ETHARP_STATE_EMPTY)) {
   15cfe:	f47f aede 	bne.w	15abe <etharp_find_entry+0x816>
   15d02:	2900      	cmp	r1, #0
   15d04:	f43f ac45 	beq.w	15592 <etharp_find_entry+0x2ea>
   15d08:	e6dd      	b.n	15ac6 <etharp_find_entry+0x81e>
    } else if (state != ETHARP_STATE_EMPTY) {
   15d0a:	9b01      	ldr	r3, [sp, #4]
   15d0c:	6805      	ldr	r5, [r0, #0]
   15d0e:	4676      	mov	r6, lr
   15d10:	46f0      	mov	r8, lr
   15d12:	461f      	mov	r7, r3
   15d14:	4699      	mov	r9, r3
   15d16:	469a      	mov	sl, r3
   15d18:	e69d      	b.n	15a56 <etharp_find_entry+0x7ae>
    if ((empty == ARP_TABLE_SIZE) && (state == ETHARP_STATE_EMPTY)) {
   15d1a:	2b00      	cmp	r3, #0
   15d1c:	d047      	beq.n	15dae <etharp_find_entry+0xb06>
      if (state == ETHARP_STATE_PENDING) {
   15d1e:	2b01      	cmp	r3, #1
   15d20:	f000 8293 	beq.w	1624a <etharp_find_entry+0xfa2>
  s16_t old_queue = ARP_TABLE_SIZE;
   15d24:	f04f 0e0a 	mov.w	lr, #10
          if (arp_table[i].ctime >= age_stable) {
   15d28:	8a65      	ldrh	r5, [r4, #18]
  s16_t old_pending = ARP_TABLE_SIZE, old_stable = ARP_TABLE_SIZE;
   15d2a:	46f0      	mov	r8, lr
  u16_t age_queue = 0, age_pending = 0, age_stable = 0;
   15d2c:	4607      	mov	r7, r0
   15d2e:	4681      	mov	r9, r0
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
   15d30:	4606      	mov	r6, r0
    u8_t state = arp_table[i].state;
   15d32:	f894 302c 	ldrb.w	r3, [r4, #44]	; 0x2c
    if ((empty == ARP_TABLE_SIZE) && (state == ETHARP_STATE_EMPTY)) {
   15d36:	2b00      	cmp	r3, #0
   15d38:	f040 819d 	bne.w	16076 <etharp_find_entry+0xdce>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
   15d3c:	2301      	movs	r3, #1
    u8_t state = arp_table[i].state;
   15d3e:	f894 1044 	ldrb.w	r1, [r4, #68]	; 0x44
    } else if (state != ETHARP_STATE_EMPTY) {
   15d42:	2900      	cmp	r1, #0
   15d44:	f040 8161 	bne.w	1600a <etharp_find_entry+0xd62>
    u8_t state = arp_table[i].state;
   15d48:	f894 105c 	ldrb.w	r1, [r4, #92]	; 0x5c
    } else if (state != ETHARP_STATE_EMPTY) {
   15d4c:	2900      	cmp	r1, #0
   15d4e:	f040 814a 	bne.w	15fe6 <etharp_find_entry+0xd3e>
    u8_t state = arp_table[i].state;
   15d52:	f894 1074 	ldrb.w	r1, [r4, #116]	; 0x74
    } else if (state != ETHARP_STATE_EMPTY) {
   15d56:	2900      	cmp	r1, #0
   15d58:	f040 8133 	bne.w	15fc2 <etharp_find_entry+0xd1a>
    u8_t state = arp_table[i].state;
   15d5c:	f894 108c 	ldrb.w	r1, [r4, #140]	; 0x8c
    } else if (state != ETHARP_STATE_EMPTY) {
   15d60:	2900      	cmp	r1, #0
   15d62:	f040 811c 	bne.w	15f9e <etharp_find_entry+0xcf6>
    u8_t state = arp_table[i].state;
   15d66:	f894 10a4 	ldrb.w	r1, [r4, #164]	; 0xa4
    } else if (state != ETHARP_STATE_EMPTY) {
   15d6a:	2900      	cmp	r1, #0
   15d6c:	f040 8105 	bne.w	15f7a <etharp_find_entry+0xcd2>
    u8_t state = arp_table[i].state;
   15d70:	f894 10bc 	ldrb.w	r1, [r4, #188]	; 0xbc
    } else if (state != ETHARP_STATE_EMPTY) {
   15d74:	2900      	cmp	r1, #0
   15d76:	f040 80ee 	bne.w	15f56 <etharp_find_entry+0xcae>
    u8_t state = arp_table[i].state;
   15d7a:	f894 10d4 	ldrb.w	r1, [r4, #212]	; 0xd4
    } else if (state != ETHARP_STATE_EMPTY) {
   15d7e:	2900      	cmp	r1, #0
   15d80:	f040 80d6 	bne.w	15f30 <etharp_find_entry+0xc88>
    u8_t state = arp_table[i].state;
   15d84:	f894 10ec 	ldrb.w	r1, [r4, #236]	; 0xec
    } else if (state != ETHARP_STATE_EMPTY) {
   15d88:	2900      	cmp	r1, #0
   15d8a:	f43f aae1 	beq.w	15350 <etharp_find_entry+0xa8>
      if (state == ETHARP_STATE_PENDING) {
   15d8e:	2901      	cmp	r1, #1
   15d90:	f47f acf0 	bne.w	15774 <etharp_find_entry+0x4cc>
        if (arp_table[i].q != NULL) {
   15d94:	f8d4 10d8 	ldr.w	r1, [r4, #216]	; 0xd8
   15d98:	2900      	cmp	r1, #0
   15d9a:	f000 8260 	beq.w	1625e <etharp_find_entry+0xfb6>
          if (arp_table[i].ctime >= age_queue) {
   15d9e:	f8b4 10ea 	ldrh.w	r1, [r4, #234]	; 0xea
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
   15da2:	4549      	cmp	r1, r9
   15da4:	bf28      	it	cs
   15da6:	f04f 0e09 	movcs.w	lr, #9
   15daa:	f7ff bad1 	b.w	15350 <etharp_find_entry+0xa8>
    u8_t state = arp_table[i].state;
   15dae:	f894 302c 	ldrb.w	r3, [r4, #44]	; 0x2c
    } else if (state != ETHARP_STATE_EMPTY) {
   15db2:	2b00      	cmp	r3, #0
   15db4:	f040 8172 	bne.w	1609c <etharp_find_entry+0xdf4>
  u16_t age_queue = 0, age_pending = 0, age_stable = 0;
   15db8:	9b01      	ldr	r3, [sp, #4]
  s16_t old_queue = ARP_TABLE_SIZE;
   15dba:	f04f 0e0a 	mov.w	lr, #10
  s16_t old_pending = ARP_TABLE_SIZE, old_stable = ARP_TABLE_SIZE;
   15dbe:	4676      	mov	r6, lr
   15dc0:	46f0      	mov	r8, lr
  u16_t age_queue = 0, age_pending = 0, age_stable = 0;
   15dc2:	461d      	mov	r5, r3
   15dc4:	461f      	mov	r7, r3
   15dc6:	4699      	mov	r9, r3
   15dc8:	e7b9      	b.n	15d3e <etharp_find_entry+0xa96>
          if (arp_table[i].ctime >= age_pending) {
   15dca:	8d61      	ldrh	r1, [r4, #42]	; 0x2a
   15dcc:	4549      	cmp	r1, r9
   15dce:	f4ff af28 	bcc.w	15c22 <etharp_find_entry+0x97a>
   15dd2:	4689      	mov	r9, r1
   15dd4:	4657      	mov	r7, sl
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
   15dd6:	f04f 0801 	mov.w	r8, #1
   15dda:	e489      	b.n	156f0 <etharp_find_entry+0x448>
        if (arp_table[i].q != NULL) {
   15ddc:	f8d4 1090 	ldr.w	r1, [r4, #144]	; 0x90
   15de0:	2900      	cmp	r1, #0
   15de2:	f000 8188 	beq.w	160f6 <etharp_find_entry+0xe4e>
          if (arp_table[i].ctime >= age_queue) {
   15de6:	f8b4 10a2 	ldrh.w	r1, [r4, #162]	; 0xa2
   15dea:	4551      	cmp	r1, sl
   15dec:	f4ff af56 	bcc.w	15c9c <etharp_find_entry+0x9f4>
   15df0:	468a      	mov	sl, r1
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
   15df2:	f04f 0e06 	mov.w	lr, #6
   15df6:	e751      	b.n	15c9c <etharp_find_entry+0x9f4>
        if (arp_table[i].q != NULL) {
   15df8:	6fa1      	ldr	r1, [r4, #120]	; 0x78
   15dfa:	2900      	cmp	r1, #0
   15dfc:	f000 818c 	beq.w	16118 <etharp_find_entry+0xe70>
          if (arp_table[i].ctime >= age_queue) {
   15e00:	f8b4 108a 	ldrh.w	r1, [r4, #138]	; 0x8a
   15e04:	4551      	cmp	r1, sl
   15e06:	f4ff af32 	bcc.w	15c6e <etharp_find_entry+0x9c6>
   15e0a:	468a      	mov	sl, r1
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
   15e0c:	f04f 0e05 	mov.w	lr, #5
   15e10:	e72d      	b.n	15c6e <etharp_find_entry+0x9c6>
        if (arp_table[i].q != NULL) {
   15e12:	6e21      	ldr	r1, [r4, #96]	; 0x60
   15e14:	2900      	cmp	r1, #0
   15e16:	f000 8188 	beq.w	1612a <etharp_find_entry+0xe82>
          if (arp_table[i].ctime >= age_queue) {
   15e1a:	f8b4 1072 	ldrh.w	r1, [r4, #114]	; 0x72
   15e1e:	4551      	cmp	r1, sl
   15e20:	f4ff af0f 	bcc.w	15c42 <etharp_find_entry+0x99a>
   15e24:	468a      	mov	sl, r1
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
   15e26:	f04f 0e04 	mov.w	lr, #4
   15e2a:	e70a      	b.n	15c42 <etharp_find_entry+0x99a>
        if (arp_table[i].q != NULL) {
   15e2c:	6b21      	ldr	r1, [r4, #48]	; 0x30
   15e2e:	2900      	cmp	r1, #0
   15e30:	f000 8225 	beq.w	1627e <etharp_find_entry+0xfd6>
          if (arp_table[i].ctime >= age_queue) {
   15e34:	f8b4 1042 	ldrh.w	r1, [r4, #66]	; 0x42
   15e38:	4551      	cmp	r1, sl
   15e3a:	f4ff ae72 	bcc.w	15b22 <etharp_find_entry+0x87a>
   15e3e:	468a      	mov	sl, r1
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
   15e40:	f04f 0e02 	mov.w	lr, #2
   15e44:	e66d      	b.n	15b22 <etharp_find_entry+0x87a>
        if (arp_table[i].q != NULL) {
   15e46:	69a1      	ldr	r1, [r4, #24]
   15e48:	2900      	cmp	r1, #0
   15e4a:	f000 8221 	beq.w	16290 <etharp_find_entry+0xfe8>
          if (arp_table[i].ctime >= age_queue) {
   15e4e:	8d61      	ldrh	r1, [r4, #42]	; 0x2a
   15e50:	4551      	cmp	r1, sl
   15e52:	f4ff ae0d 	bcc.w	15a70 <etharp_find_entry+0x7c8>
   15e56:	468a      	mov	sl, r1
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
   15e58:	46de      	mov	lr, fp
   15e5a:	e609      	b.n	15a70 <etharp_find_entry+0x7c8>
        if (arp_table[i].q != NULL) {
   15e5c:	f8d4 10d8 	ldr.w	r1, [r4, #216]	; 0xd8
   15e60:	2900      	cmp	r1, #0
   15e62:	f47f ac23 	bne.w	156ac <etharp_find_entry+0x404>
          if (arp_table[i].ctime >= age_pending) {
   15e66:	f8b4 10ea 	ldrh.w	r1, [r4, #234]	; 0xea
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
   15e6a:	4549      	cmp	r1, r9
   15e6c:	bf28      	it	cs
   15e6e:	f04f 0809 	movcs.w	r8, #9
   15e72:	f7ff ba6d 	b.w	15350 <etharp_find_entry+0xa8>
      if (state == ETHARP_STATE_PENDING) {
   15e76:	46ba      	mov	sl, r7
   15e78:	230a      	movs	r3, #10
   15e7a:	e5c5      	b.n	15a08 <etharp_find_entry+0x760>
  s16_t old_queue = ARP_TABLE_SIZE;
   15e7c:	f04f 0e0a 	mov.w	lr, #10
  s16_t old_pending = ARP_TABLE_SIZE, old_stable = ARP_TABLE_SIZE;
   15e80:	4676      	mov	r6, lr
          if (arp_table[i].ctime >= age_pending) {
   15e82:	f8b4 9012 	ldrh.w	r9, [r4, #18]
  u16_t age_queue = 0, age_pending = 0, age_stable = 0;
   15e86:	4605      	mov	r5, r0
   15e88:	4607      	mov	r7, r0
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
   15e8a:	4680      	mov	r8, r0
   15e8c:	e423      	b.n	156d6 <etharp_find_entry+0x42e>
        if (arp_table[i].q != NULL) {
   15e8e:	6823      	ldr	r3, [r4, #0]
   15e90:	2b00      	cmp	r3, #0
   15e92:	f000 8205 	beq.w	162a0 <etharp_find_entry+0xff8>
  u16_t age_queue = 0, age_pending = 0, age_stable = 0;
   15e96:	f8dd e004 	ldr.w	lr, [sp, #4]
          if (arp_table[i].ctime >= age_queue) {
   15e9a:	f8b4 a012 	ldrh.w	sl, [r4, #18]
  s16_t old_pending = ARP_TABLE_SIZE, old_stable = ARP_TABLE_SIZE;
   15e9e:	260a      	movs	r6, #10
   15ea0:	46b0      	mov	r8, r6
  u16_t age_queue = 0, age_pending = 0, age_stable = 0;
   15ea2:	4677      	mov	r7, lr
   15ea4:	46f1      	mov	r9, lr
   15ea6:	e5cf      	b.n	15a48 <etharp_find_entry+0x7a0>
        if (arp_table[i].q != NULL) {
   15ea8:	f8d4 10c0 	ldr.w	r1, [r4, #192]	; 0xc0
   15eac:	2900      	cmp	r1, #0
   15eae:	f000 820b 	beq.w	162c8 <etharp_find_entry+0x1020>
          if (arp_table[i].ctime >= age_queue) {
   15eb2:	f8b4 10d2 	ldrh.w	r1, [r4, #210]	; 0xd2
   15eb6:	4551      	cmp	r1, sl
   15eb8:	f4ff af1e 	bcc.w	15cf8 <etharp_find_entry+0xa50>
   15ebc:	468a      	mov	sl, r1
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
   15ebe:	f04f 0e08 	mov.w	lr, #8
   15ec2:	e719      	b.n	15cf8 <etharp_find_entry+0xa50>
        if (arp_table[i].q != NULL) {
   15ec4:	6ca1      	ldr	r1, [r4, #72]	; 0x48
   15ec6:	2900      	cmp	r1, #0
   15ec8:	f000 81f5 	beq.w	162b6 <etharp_find_entry+0x100e>
          if (arp_table[i].ctime >= age_queue) {
   15ecc:	f8b4 105a 	ldrh.w	r1, [r4, #90]	; 0x5a
   15ed0:	4551      	cmp	r1, sl
   15ed2:	f4ff ae9e 	bcc.w	15c12 <etharp_find_entry+0x96a>
   15ed6:	468a      	mov	sl, r1
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
   15ed8:	f04f 0e03 	mov.w	lr, #3
   15edc:	e699      	b.n	15c12 <etharp_find_entry+0x96a>
        if (arp_table[i].q != NULL) {
   15ede:	f8d4 10a8 	ldr.w	r1, [r4, #168]	; 0xa8
   15ee2:	2900      	cmp	r1, #0
   15ee4:	f000 819f 	beq.w	16226 <etharp_find_entry+0xf7e>
          if (arp_table[i].ctime >= age_queue) {
   15ee8:	f8b4 10ba 	ldrh.w	r1, [r4, #186]	; 0xba
   15eec:	4551      	cmp	r1, sl
   15eee:	f4ff aeec 	bcc.w	15cca <etharp_find_entry+0xa22>
   15ef2:	468a      	mov	sl, r1
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
   15ef4:	f04f 0e07 	mov.w	lr, #7
   15ef8:	e6e7      	b.n	15cca <etharp_find_entry+0xa22>
          if (arp_table[i].ctime >= age_pending) {
   15efa:	f8b4 10a2 	ldrh.w	r1, [r4, #162]	; 0xa2
   15efe:	4549      	cmp	r1, r9
   15f00:	f4ff ace6 	bcc.w	158d0 <etharp_find_entry+0x628>
   15f04:	4689      	mov	r9, r1
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
   15f06:	f04f 0806 	mov.w	r8, #6
   15f0a:	e4e1      	b.n	158d0 <etharp_find_entry+0x628>
          if (arp_table[i].ctime >= age_pending) {
   15f0c:	f8b4 105a 	ldrh.w	r1, [r4, #90]	; 0x5a
   15f10:	4549      	cmp	r1, r9
   15f12:	f4ff ac99 	bcc.w	15848 <etharp_find_entry+0x5a0>
   15f16:	4689      	mov	r9, r1
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
   15f18:	f04f 0803 	mov.w	r8, #3
   15f1c:	e494      	b.n	15848 <etharp_find_entry+0x5a0>
          if (arp_table[i].ctime >= age_pending) {
   15f1e:	f8b4 10d2 	ldrh.w	r1, [r4, #210]	; 0xd2
   15f22:	4549      	cmp	r1, r9
   15f24:	f4ff ace5 	bcc.w	158f2 <etharp_find_entry+0x64a>
   15f28:	4689      	mov	r9, r1
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
   15f2a:	f04f 0808 	mov.w	r8, #8
   15f2e:	e4e0      	b.n	158f2 <etharp_find_entry+0x64a>
      if (state == ETHARP_STATE_PENDING) {
   15f30:	2901      	cmp	r1, #1
   15f32:	f000 816c 	beq.w	1620e <etharp_find_entry+0xf66>
          if (arp_table[i].ctime >= age_stable) {
   15f36:	f8b4 10d2 	ldrh.w	r1, [r4, #210]	; 0xd2
   15f3a:	42a9      	cmp	r1, r5
   15f3c:	d301      	bcc.n	15f42 <etharp_find_entry+0xc9a>
   15f3e:	460d      	mov	r5, r1
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
   15f40:	2608      	movs	r6, #8
    if ((empty == ARP_TABLE_SIZE) && (state == ETHARP_STATE_EMPTY)) {
   15f42:	2b0a      	cmp	r3, #10
    u8_t state = arp_table[i].state;
   15f44:	f894 10ec 	ldrb.w	r1, [r4, #236]	; 0xec
    if ((empty == ARP_TABLE_SIZE) && (state == ETHARP_STATE_EMPTY)) {
   15f48:	f47f af1e 	bne.w	15d88 <etharp_find_entry+0xae0>
   15f4c:	2900      	cmp	r1, #0
   15f4e:	f47f af1e 	bne.w	15d8e <etharp_find_entry+0xae6>
   15f52:	f7ff bb1e 	b.w	15592 <etharp_find_entry+0x2ea>
      if (state == ETHARP_STATE_PENDING) {
   15f56:	2901      	cmp	r1, #1
   15f58:	f000 813b 	beq.w	161d2 <etharp_find_entry+0xf2a>
          if (arp_table[i].ctime >= age_stable) {
   15f5c:	f8b4 10ba 	ldrh.w	r1, [r4, #186]	; 0xba
   15f60:	42a9      	cmp	r1, r5
   15f62:	d301      	bcc.n	15f68 <etharp_find_entry+0xcc0>
   15f64:	460d      	mov	r5, r1
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
   15f66:	2607      	movs	r6, #7
    if ((empty == ARP_TABLE_SIZE) && (state == ETHARP_STATE_EMPTY)) {
   15f68:	2b0a      	cmp	r3, #10
    u8_t state = arp_table[i].state;
   15f6a:	f894 10d4 	ldrb.w	r1, [r4, #212]	; 0xd4
    if ((empty == ARP_TABLE_SIZE) && (state == ETHARP_STATE_EMPTY)) {
   15f6e:	f47f af06 	bne.w	15d7e <etharp_find_entry+0xad6>
   15f72:	2900      	cmp	r1, #0
   15f74:	d1dc      	bne.n	15f30 <etharp_find_entry+0xc88>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
   15f76:	2308      	movs	r3, #8
   15f78:	e704      	b.n	15d84 <etharp_find_entry+0xadc>
      if (state == ETHARP_STATE_PENDING) {
   15f7a:	2901      	cmp	r1, #1
   15f7c:	f000 811d 	beq.w	161ba <etharp_find_entry+0xf12>
          if (arp_table[i].ctime >= age_stable) {
   15f80:	f8b4 10a2 	ldrh.w	r1, [r4, #162]	; 0xa2
   15f84:	42a9      	cmp	r1, r5
   15f86:	d301      	bcc.n	15f8c <etharp_find_entry+0xce4>
   15f88:	460d      	mov	r5, r1
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
   15f8a:	2606      	movs	r6, #6
    if ((empty == ARP_TABLE_SIZE) && (state == ETHARP_STATE_EMPTY)) {
   15f8c:	2b0a      	cmp	r3, #10
    u8_t state = arp_table[i].state;
   15f8e:	f894 10bc 	ldrb.w	r1, [r4, #188]	; 0xbc
    if ((empty == ARP_TABLE_SIZE) && (state == ETHARP_STATE_EMPTY)) {
   15f92:	f47f aeef 	bne.w	15d74 <etharp_find_entry+0xacc>
   15f96:	2900      	cmp	r1, #0
   15f98:	d1dd      	bne.n	15f56 <etharp_find_entry+0xcae>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
   15f9a:	2307      	movs	r3, #7
   15f9c:	e6ed      	b.n	15d7a <etharp_find_entry+0xad2>
      if (state == ETHARP_STATE_PENDING) {
   15f9e:	2901      	cmp	r1, #1
   15fa0:	f000 80e5 	beq.w	1616e <etharp_find_entry+0xec6>
          if (arp_table[i].ctime >= age_stable) {
   15fa4:	f8b4 108a 	ldrh.w	r1, [r4, #138]	; 0x8a
   15fa8:	42a9      	cmp	r1, r5
   15faa:	d301      	bcc.n	15fb0 <etharp_find_entry+0xd08>
   15fac:	460d      	mov	r5, r1
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
   15fae:	2605      	movs	r6, #5
    if ((empty == ARP_TABLE_SIZE) && (state == ETHARP_STATE_EMPTY)) {
   15fb0:	2b0a      	cmp	r3, #10
    u8_t state = arp_table[i].state;
   15fb2:	f894 10a4 	ldrb.w	r1, [r4, #164]	; 0xa4
    if ((empty == ARP_TABLE_SIZE) && (state == ETHARP_STATE_EMPTY)) {
   15fb6:	f47f aed8 	bne.w	15d6a <etharp_find_entry+0xac2>
   15fba:	2900      	cmp	r1, #0
   15fbc:	d1dd      	bne.n	15f7a <etharp_find_entry+0xcd2>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
   15fbe:	2306      	movs	r3, #6
   15fc0:	e6d6      	b.n	15d70 <etharp_find_entry+0xac8>
      if (state == ETHARP_STATE_PENDING) {
   15fc2:	2901      	cmp	r1, #1
   15fc4:	f000 80c8 	beq.w	16158 <etharp_find_entry+0xeb0>
          if (arp_table[i].ctime >= age_stable) {
   15fc8:	f8b4 1072 	ldrh.w	r1, [r4, #114]	; 0x72
   15fcc:	42a9      	cmp	r1, r5
   15fce:	d301      	bcc.n	15fd4 <etharp_find_entry+0xd2c>
   15fd0:	460d      	mov	r5, r1
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
   15fd2:	2604      	movs	r6, #4
    if ((empty == ARP_TABLE_SIZE) && (state == ETHARP_STATE_EMPTY)) {
   15fd4:	2b0a      	cmp	r3, #10
    u8_t state = arp_table[i].state;
   15fd6:	f894 108c 	ldrb.w	r1, [r4, #140]	; 0x8c
    if ((empty == ARP_TABLE_SIZE) && (state == ETHARP_STATE_EMPTY)) {
   15fda:	f47f aec1 	bne.w	15d60 <etharp_find_entry+0xab8>
   15fde:	2900      	cmp	r1, #0
   15fe0:	d1dd      	bne.n	15f9e <etharp_find_entry+0xcf6>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
   15fe2:	2305      	movs	r3, #5
   15fe4:	e6bf      	b.n	15d66 <etharp_find_entry+0xabe>
      if (state == ETHARP_STATE_PENDING) {
   15fe6:	2901      	cmp	r1, #1
   15fe8:	f000 80ab 	beq.w	16142 <etharp_find_entry+0xe9a>
          if (arp_table[i].ctime >= age_stable) {
   15fec:	f8b4 105a 	ldrh.w	r1, [r4, #90]	; 0x5a
   15ff0:	42a9      	cmp	r1, r5
   15ff2:	d301      	bcc.n	15ff8 <etharp_find_entry+0xd50>
   15ff4:	460d      	mov	r5, r1
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
   15ff6:	2603      	movs	r6, #3
    if ((empty == ARP_TABLE_SIZE) && (state == ETHARP_STATE_EMPTY)) {
   15ff8:	2b0a      	cmp	r3, #10
    u8_t state = arp_table[i].state;
   15ffa:	f894 1074 	ldrb.w	r1, [r4, #116]	; 0x74
    if ((empty == ARP_TABLE_SIZE) && (state == ETHARP_STATE_EMPTY)) {
   15ffe:	f47f aeaa 	bne.w	15d56 <etharp_find_entry+0xaae>
   16002:	2900      	cmp	r1, #0
   16004:	d1dd      	bne.n	15fc2 <etharp_find_entry+0xd1a>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
   16006:	2304      	movs	r3, #4
   16008:	e6a8      	b.n	15d5c <etharp_find_entry+0xab4>
      if (state == ETHARP_STATE_PENDING) {
   1600a:	2901      	cmp	r1, #1
   1600c:	d069      	beq.n	160e2 <etharp_find_entry+0xe3a>
          if (arp_table[i].ctime >= age_stable) {
   1600e:	f8b4 1042 	ldrh.w	r1, [r4, #66]	; 0x42
   16012:	42a9      	cmp	r1, r5
   16014:	d301      	bcc.n	1601a <etharp_find_entry+0xd72>
   16016:	460d      	mov	r5, r1
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
   16018:	2602      	movs	r6, #2
    if ((empty == ARP_TABLE_SIZE) && (state == ETHARP_STATE_EMPTY)) {
   1601a:	2b0a      	cmp	r3, #10
    u8_t state = arp_table[i].state;
   1601c:	f894 105c 	ldrb.w	r1, [r4, #92]	; 0x5c
    if ((empty == ARP_TABLE_SIZE) && (state == ETHARP_STATE_EMPTY)) {
   16020:	f47f ae94 	bne.w	15d4c <etharp_find_entry+0xaa4>
   16024:	2900      	cmp	r1, #0
   16026:	d1de      	bne.n	15fe6 <etharp_find_entry+0xd3e>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
   16028:	2303      	movs	r3, #3
   1602a:	e692      	b.n	15d52 <etharp_find_entry+0xaaa>
          if (arp_table[i].ctime >= age_pending) {
   1602c:	f8b4 1042 	ldrh.w	r1, [r4, #66]	; 0x42
   16030:	4549      	cmp	r1, r9
   16032:	f4ff ac1a 	bcc.w	1586a <etharp_find_entry+0x5c2>
   16036:	4689      	mov	r9, r1
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
   16038:	f04f 0802 	mov.w	r8, #2
   1603c:	e415      	b.n	1586a <etharp_find_entry+0x5c2>
          if (arp_table[i].ctime >= age_pending) {
   1603e:	f8b4 1072 	ldrh.w	r1, [r4, #114]	; 0x72
   16042:	4549      	cmp	r1, r9
   16044:	f4ff abf0 	bcc.w	15828 <etharp_find_entry+0x580>
   16048:	4689      	mov	r9, r1
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
   1604a:	f04f 0804 	mov.w	r8, #4
   1604e:	f7ff bbeb 	b.w	15828 <etharp_find_entry+0x580>
          if (arp_table[i].ctime >= age_pending) {
   16052:	f8b4 108a 	ldrh.w	r1, [r4, #138]	; 0x8a
   16056:	4549      	cmp	r1, r9
   16058:	f4ff ac19 	bcc.w	1588e <etharp_find_entry+0x5e6>
   1605c:	4689      	mov	r9, r1
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
   1605e:	f04f 0805 	mov.w	r8, #5
   16062:	e414      	b.n	1588e <etharp_find_entry+0x5e6>
          if (arp_table[i].ctime >= age_pending) {
   16064:	f8b4 10ba 	ldrh.w	r1, [r4, #186]	; 0xba
   16068:	4549      	cmp	r1, r9
   1606a:	f4ff ac21 	bcc.w	158b0 <etharp_find_entry+0x608>
   1606e:	4689      	mov	r9, r1
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
   16070:	f04f 0807 	mov.w	r8, #7
   16074:	e41c      	b.n	158b0 <etharp_find_entry+0x608>
      if (state == ETHARP_STATE_PENDING) {
   16076:	2b01      	cmp	r3, #1
   16078:	f000 812f 	beq.w	162da <etharp_find_entry+0x1032>
          if (arp_table[i].ctime >= age_stable) {
   1607c:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
   1607e:	429d      	cmp	r5, r3
   16080:	bf9d      	ittte	ls
   16082:	461d      	movls	r5, r3
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
   16084:	2601      	movls	r6, #1
          if (arp_table[i].ctime >= age_stable) {
   16086:	230a      	movls	r3, #10
   16088:	230a      	movhi	r3, #10
    if ((empty == ARP_TABLE_SIZE) && (state == ETHARP_STATE_EMPTY)) {
   1608a:	2b0a      	cmp	r3, #10
    u8_t state = arp_table[i].state;
   1608c:	f894 1044 	ldrb.w	r1, [r4, #68]	; 0x44
    if ((empty == ARP_TABLE_SIZE) && (state == ETHARP_STATE_EMPTY)) {
   16090:	f47f ae57 	bne.w	15d42 <etharp_find_entry+0xa9a>
   16094:	2900      	cmp	r1, #0
   16096:	d1b8      	bne.n	1600a <etharp_find_entry+0xd62>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
   16098:	2302      	movs	r3, #2
   1609a:	e655      	b.n	15d48 <etharp_find_entry+0xaa0>
      if (state == ETHARP_STATE_PENDING) {
   1609c:	2b01      	cmp	r3, #1
   1609e:	d110      	bne.n	160c2 <etharp_find_entry+0xe1a>
  s16_t old_queue = ARP_TABLE_SIZE;
   160a0:	f04f 0e0a 	mov.w	lr, #10
  s16_t old_pending = ARP_TABLE_SIZE, old_stable = ARP_TABLE_SIZE;
   160a4:	4676      	mov	r6, lr
   160a6:	46f0      	mov	r8, lr
  u16_t age_queue = 0, age_pending = 0, age_stable = 0;
   160a8:	4605      	mov	r5, r0
   160aa:	4607      	mov	r7, r0
   160ac:	4681      	mov	r9, r0
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
   160ae:	4603      	mov	r3, r0
        if (arp_table[i].q != NULL) {
   160b0:	69a1      	ldr	r1, [r4, #24]
   160b2:	b179      	cbz	r1, 160d4 <etharp_find_entry+0xe2c>
          if (arp_table[i].ctime >= age_queue) {
   160b4:	8d61      	ldrh	r1, [r4, #42]	; 0x2a
   160b6:	4549      	cmp	r1, r9
   160b8:	d3e7      	bcc.n	1608a <etharp_find_entry+0xde2>
   160ba:	4689      	mov	r9, r1
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
   160bc:	f04f 0e01 	mov.w	lr, #1
   160c0:	e7e3      	b.n	1608a <etharp_find_entry+0xde2>
  s16_t old_queue = ARP_TABLE_SIZE;
   160c2:	f04f 0e0a 	mov.w	lr, #10
  s16_t old_pending = ARP_TABLE_SIZE, old_stable = ARP_TABLE_SIZE;
   160c6:	46f0      	mov	r8, lr
          if (arp_table[i].ctime >= age_stable) {
   160c8:	8d65      	ldrh	r5, [r4, #42]	; 0x2a
  u16_t age_queue = 0, age_pending = 0, age_stable = 0;
   160ca:	4607      	mov	r7, r0
   160cc:	4681      	mov	r9, r0
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
   160ce:	4603      	mov	r3, r0
   160d0:	2601      	movs	r6, #1
   160d2:	e7da      	b.n	1608a <etharp_find_entry+0xde2>
          if (arp_table[i].ctime >= age_pending) {
   160d4:	8d61      	ldrh	r1, [r4, #42]	; 0x2a
   160d6:	42b9      	cmp	r1, r7
   160d8:	d3d7      	bcc.n	1608a <etharp_find_entry+0xde2>
   160da:	460f      	mov	r7, r1
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
   160dc:	f04f 0801 	mov.w	r8, #1
   160e0:	e7d3      	b.n	1608a <etharp_find_entry+0xde2>
        if (arp_table[i].q != NULL) {
   160e2:	6b21      	ldr	r1, [r4, #48]	; 0x30
   160e4:	b181      	cbz	r1, 16108 <etharp_find_entry+0xe60>
          if (arp_table[i].ctime >= age_queue) {
   160e6:	f8b4 1042 	ldrh.w	r1, [r4, #66]	; 0x42
   160ea:	4549      	cmp	r1, r9
   160ec:	d395      	bcc.n	1601a <etharp_find_entry+0xd72>
   160ee:	4689      	mov	r9, r1
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
   160f0:	f04f 0e02 	mov.w	lr, #2
   160f4:	e791      	b.n	1601a <etharp_find_entry+0xd72>
          if (arp_table[i].ctime >= age_pending) {
   160f6:	f8b4 10a2 	ldrh.w	r1, [r4, #162]	; 0xa2
   160fa:	4549      	cmp	r1, r9
   160fc:	f4ff adce 	bcc.w	15c9c <etharp_find_entry+0x9f4>
   16100:	4689      	mov	r9, r1
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
   16102:	f04f 0806 	mov.w	r8, #6
   16106:	e5c9      	b.n	15c9c <etharp_find_entry+0x9f4>
          if (arp_table[i].ctime >= age_pending) {
   16108:	f8b4 1042 	ldrh.w	r1, [r4, #66]	; 0x42
   1610c:	42b9      	cmp	r1, r7
   1610e:	d384      	bcc.n	1601a <etharp_find_entry+0xd72>
   16110:	460f      	mov	r7, r1
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
   16112:	f04f 0802 	mov.w	r8, #2
   16116:	e780      	b.n	1601a <etharp_find_entry+0xd72>
          if (arp_table[i].ctime >= age_pending) {
   16118:	f8b4 108a 	ldrh.w	r1, [r4, #138]	; 0x8a
   1611c:	4549      	cmp	r1, r9
   1611e:	f4ff ada6 	bcc.w	15c6e <etharp_find_entry+0x9c6>
   16122:	4689      	mov	r9, r1
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
   16124:	f04f 0805 	mov.w	r8, #5
   16128:	e5a1      	b.n	15c6e <etharp_find_entry+0x9c6>
          if (arp_table[i].ctime >= age_pending) {
   1612a:	f8b4 1072 	ldrh.w	r1, [r4, #114]	; 0x72
   1612e:	4549      	cmp	r1, r9
   16130:	f4ff ad87 	bcc.w	15c42 <etharp_find_entry+0x99a>
   16134:	4689      	mov	r9, r1
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
   16136:	f04f 0804 	mov.w	r8, #4
   1613a:	e582      	b.n	15c42 <etharp_find_entry+0x99a>
          if (arp_table[i].ctime >= age_stable) {
   1613c:	461d      	mov	r5, r3
   1613e:	230a      	movs	r3, #10
   16140:	e4fe      	b.n	15b40 <etharp_find_entry+0x898>
        if (arp_table[i].q != NULL) {
   16142:	6ca1      	ldr	r1, [r4, #72]	; 0x48
   16144:	b1f1      	cbz	r1, 16184 <etharp_find_entry+0xedc>
          if (arp_table[i].ctime >= age_queue) {
   16146:	f8b4 105a 	ldrh.w	r1, [r4, #90]	; 0x5a
   1614a:	4549      	cmp	r1, r9
   1614c:	f4ff af54 	bcc.w	15ff8 <etharp_find_entry+0xd50>
   16150:	4689      	mov	r9, r1
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
   16152:	f04f 0e03 	mov.w	lr, #3
   16156:	e74f      	b.n	15ff8 <etharp_find_entry+0xd50>
        if (arp_table[i].q != NULL) {
   16158:	6e21      	ldr	r1, [r4, #96]	; 0x60
   1615a:	b1e1      	cbz	r1, 16196 <etharp_find_entry+0xeee>
          if (arp_table[i].ctime >= age_queue) {
   1615c:	f8b4 1072 	ldrh.w	r1, [r4, #114]	; 0x72
   16160:	4549      	cmp	r1, r9
   16162:	f4ff af37 	bcc.w	15fd4 <etharp_find_entry+0xd2c>
   16166:	4689      	mov	r9, r1
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
   16168:	f04f 0e04 	mov.w	lr, #4
   1616c:	e732      	b.n	15fd4 <etharp_find_entry+0xd2c>
        if (arp_table[i].q != NULL) {
   1616e:	6fa1      	ldr	r1, [r4, #120]	; 0x78
   16170:	b1d1      	cbz	r1, 161a8 <etharp_find_entry+0xf00>
          if (arp_table[i].ctime >= age_queue) {
   16172:	f8b4 108a 	ldrh.w	r1, [r4, #138]	; 0x8a
   16176:	4549      	cmp	r1, r9
   16178:	f4ff af1a 	bcc.w	15fb0 <etharp_find_entry+0xd08>
   1617c:	4689      	mov	r9, r1
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
   1617e:	f04f 0e05 	mov.w	lr, #5
   16182:	e715      	b.n	15fb0 <etharp_find_entry+0xd08>
          if (arp_table[i].ctime >= age_pending) {
   16184:	f8b4 105a 	ldrh.w	r1, [r4, #90]	; 0x5a
   16188:	42b9      	cmp	r1, r7
   1618a:	f4ff af35 	bcc.w	15ff8 <etharp_find_entry+0xd50>
   1618e:	460f      	mov	r7, r1
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
   16190:	f04f 0803 	mov.w	r8, #3
   16194:	e730      	b.n	15ff8 <etharp_find_entry+0xd50>
          if (arp_table[i].ctime >= age_pending) {
   16196:	f8b4 1072 	ldrh.w	r1, [r4, #114]	; 0x72
   1619a:	42b9      	cmp	r1, r7
   1619c:	f4ff af1a 	bcc.w	15fd4 <etharp_find_entry+0xd2c>
   161a0:	460f      	mov	r7, r1
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
   161a2:	f04f 0804 	mov.w	r8, #4
   161a6:	e715      	b.n	15fd4 <etharp_find_entry+0xd2c>
          if (arp_table[i].ctime >= age_pending) {
   161a8:	f8b4 108a 	ldrh.w	r1, [r4, #138]	; 0x8a
   161ac:	42b9      	cmp	r1, r7
   161ae:	f4ff aeff 	bcc.w	15fb0 <etharp_find_entry+0xd08>
   161b2:	460f      	mov	r7, r1
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
   161b4:	f04f 0805 	mov.w	r8, #5
   161b8:	e6fa      	b.n	15fb0 <etharp_find_entry+0xd08>
        if (arp_table[i].q != NULL) {
   161ba:	f8d4 1090 	ldr.w	r1, [r4, #144]	; 0x90
   161be:	b1a1      	cbz	r1, 161ea <etharp_find_entry+0xf42>
          if (arp_table[i].ctime >= age_queue) {
   161c0:	f8b4 10a2 	ldrh.w	r1, [r4, #162]	; 0xa2
   161c4:	4549      	cmp	r1, r9
   161c6:	f4ff aee1 	bcc.w	15f8c <etharp_find_entry+0xce4>
   161ca:	4689      	mov	r9, r1
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
   161cc:	f04f 0e06 	mov.w	lr, #6
   161d0:	e6dc      	b.n	15f8c <etharp_find_entry+0xce4>
        if (arp_table[i].q != NULL) {
   161d2:	f8d4 10a8 	ldr.w	r1, [r4, #168]	; 0xa8
   161d6:	b189      	cbz	r1, 161fc <etharp_find_entry+0xf54>
          if (arp_table[i].ctime >= age_queue) {
   161d8:	f8b4 10ba 	ldrh.w	r1, [r4, #186]	; 0xba
   161dc:	4549      	cmp	r1, r9
   161de:	f4ff aec3 	bcc.w	15f68 <etharp_find_entry+0xcc0>
   161e2:	4689      	mov	r9, r1
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
   161e4:	f04f 0e07 	mov.w	lr, #7
   161e8:	e6be      	b.n	15f68 <etharp_find_entry+0xcc0>
          if (arp_table[i].ctime >= age_pending) {
   161ea:	f8b4 10a2 	ldrh.w	r1, [r4, #162]	; 0xa2
   161ee:	42b9      	cmp	r1, r7
   161f0:	f4ff aecc 	bcc.w	15f8c <etharp_find_entry+0xce4>
   161f4:	460f      	mov	r7, r1
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
   161f6:	f04f 0806 	mov.w	r8, #6
   161fa:	e6c7      	b.n	15f8c <etharp_find_entry+0xce4>
          if (arp_table[i].ctime >= age_pending) {
   161fc:	f8b4 10ba 	ldrh.w	r1, [r4, #186]	; 0xba
   16200:	42b9      	cmp	r1, r7
   16202:	f4ff aeb1 	bcc.w	15f68 <etharp_find_entry+0xcc0>
   16206:	460f      	mov	r7, r1
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
   16208:	f04f 0807 	mov.w	r8, #7
   1620c:	e6ac      	b.n	15f68 <etharp_find_entry+0xcc0>
        if (arp_table[i].q != NULL) {
   1620e:	f8d4 10c0 	ldr.w	r1, [r4, #192]	; 0xc0
   16212:	b189      	cbz	r1, 16238 <etharp_find_entry+0xf90>
          if (arp_table[i].ctime >= age_queue) {
   16214:	f8b4 10d2 	ldrh.w	r1, [r4, #210]	; 0xd2
   16218:	4549      	cmp	r1, r9
   1621a:	f4ff ae92 	bcc.w	15f42 <etharp_find_entry+0xc9a>
   1621e:	4689      	mov	r9, r1
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
   16220:	f04f 0e08 	mov.w	lr, #8
   16224:	e68d      	b.n	15f42 <etharp_find_entry+0xc9a>
          if (arp_table[i].ctime >= age_pending) {
   16226:	f8b4 10ba 	ldrh.w	r1, [r4, #186]	; 0xba
   1622a:	4549      	cmp	r1, r9
   1622c:	f4ff ad4d 	bcc.w	15cca <etharp_find_entry+0xa22>
   16230:	4689      	mov	r9, r1
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
   16232:	f04f 0807 	mov.w	r8, #7
   16236:	e548      	b.n	15cca <etharp_find_entry+0xa22>
          if (arp_table[i].ctime >= age_pending) {
   16238:	f8b4 10d2 	ldrh.w	r1, [r4, #210]	; 0xd2
   1623c:	42b9      	cmp	r1, r7
   1623e:	f4ff ae80 	bcc.w	15f42 <etharp_find_entry+0xc9a>
   16242:	460f      	mov	r7, r1
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
   16244:	f04f 0808 	mov.w	r8, #8
   16248:	e67b      	b.n	15f42 <etharp_find_entry+0xc9a>
        if (arp_table[i].q != NULL) {
   1624a:	6823      	ldr	r3, [r4, #0]
   1624c:	b17b      	cbz	r3, 1626e <etharp_find_entry+0xfc6>
  s16_t old_pending = ARP_TABLE_SIZE, old_stable = ARP_TABLE_SIZE;
   1624e:	260a      	movs	r6, #10
   16250:	46b0      	mov	r8, r6
          if (arp_table[i].ctime >= age_queue) {
   16252:	f8b4 9012 	ldrh.w	r9, [r4, #18]
  u16_t age_queue = 0, age_pending = 0, age_stable = 0;
   16256:	4605      	mov	r5, r0
   16258:	4607      	mov	r7, r0
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
   1625a:	4686      	mov	lr, r0
   1625c:	e569      	b.n	15d32 <etharp_find_entry+0xa8a>
          if (arp_table[i].ctime >= age_pending) {
   1625e:	f8b4 10ea 	ldrh.w	r1, [r4, #234]	; 0xea
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
   16262:	42b9      	cmp	r1, r7
   16264:	bf28      	it	cs
   16266:	f04f 0809 	movcs.w	r8, #9
   1626a:	f7ff b871 	b.w	15350 <etharp_find_entry+0xa8>
  s16_t old_queue = ARP_TABLE_SIZE;
   1626e:	f04f 0e0a 	mov.w	lr, #10
  s16_t old_pending = ARP_TABLE_SIZE, old_stable = ARP_TABLE_SIZE;
   16272:	4676      	mov	r6, lr
          if (arp_table[i].ctime >= age_pending) {
   16274:	8a67      	ldrh	r7, [r4, #18]
  u16_t age_queue = 0, age_pending = 0, age_stable = 0;
   16276:	4605      	mov	r5, r0
   16278:	4681      	mov	r9, r0
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
   1627a:	4680      	mov	r8, r0
   1627c:	e559      	b.n	15d32 <etharp_find_entry+0xa8a>
          if (arp_table[i].ctime >= age_pending) {
   1627e:	f8b4 1042 	ldrh.w	r1, [r4, #66]	; 0x42
   16282:	4549      	cmp	r1, r9
   16284:	f4ff ac4d 	bcc.w	15b22 <etharp_find_entry+0x87a>
   16288:	4689      	mov	r9, r1
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
   1628a:	f04f 0802 	mov.w	r8, #2
   1628e:	e448      	b.n	15b22 <etharp_find_entry+0x87a>
          if (arp_table[i].ctime >= age_pending) {
   16290:	8d61      	ldrh	r1, [r4, #42]	; 0x2a
   16292:	4549      	cmp	r1, r9
   16294:	f4ff abec 	bcc.w	15a70 <etharp_find_entry+0x7c8>
   16298:	4689      	mov	r9, r1
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
   1629a:	46d8      	mov	r8, fp
   1629c:	f7ff bbe8 	b.w	15a70 <etharp_find_entry+0x7c8>
  u16_t age_queue = 0, age_pending = 0, age_stable = 0;
   162a0:	f8dd 8004 	ldr.w	r8, [sp, #4]
          if (arp_table[i].ctime >= age_pending) {
   162a4:	f8b4 9012 	ldrh.w	r9, [r4, #18]
  s16_t old_queue = ARP_TABLE_SIZE;
   162a8:	f04f 0e0a 	mov.w	lr, #10
  s16_t old_pending = ARP_TABLE_SIZE, old_stable = ARP_TABLE_SIZE;
   162ac:	4676      	mov	r6, lr
  u16_t age_queue = 0, age_pending = 0, age_stable = 0;
   162ae:	4647      	mov	r7, r8
   162b0:	46c2      	mov	sl, r8
   162b2:	f7ff bbc9 	b.w	15a48 <etharp_find_entry+0x7a0>
          if (arp_table[i].ctime >= age_pending) {
   162b6:	f8b4 105a 	ldrh.w	r1, [r4, #90]	; 0x5a
   162ba:	4549      	cmp	r1, r9
   162bc:	f4ff aca9 	bcc.w	15c12 <etharp_find_entry+0x96a>
   162c0:	4689      	mov	r9, r1
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
   162c2:	f04f 0803 	mov.w	r8, #3
   162c6:	e4a4      	b.n	15c12 <etharp_find_entry+0x96a>
          if (arp_table[i].ctime >= age_pending) {
   162c8:	f8b4 10d2 	ldrh.w	r1, [r4, #210]	; 0xd2
   162cc:	4549      	cmp	r1, r9
   162ce:	f4ff ad13 	bcc.w	15cf8 <etharp_find_entry+0xa50>
   162d2:	4689      	mov	r9, r1
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
   162d4:	f04f 0808 	mov.w	r8, #8
   162d8:	e50e      	b.n	15cf8 <etharp_find_entry+0xa50>
      if (state == ETHARP_STATE_PENDING) {
   162da:	230a      	movs	r3, #10
   162dc:	e6e8      	b.n	160b0 <etharp_find_entry+0xe08>
   162de:	bf00      	nop

000162e0 <etharp_tmr>:
{
   162e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   162e4:	4c3c      	ldr	r4, [pc, #240]	; (163d8 <etharp_tmr+0xf8>)
  if (ip4_addr_islinklocal(ipsrc_addr)) {
    ethernet_output(netif, p, ethsrc_addr, &ethbroadcast, ETHTYPE_ARP);
  } else
#endif /* LWIP_AUTOIP */
  {
    ethernet_output(netif, p, ethsrc_addr, ethdst_addr, ETHTYPE_ARP);
   162e6:	f8df 80f8 	ldr.w	r8, [pc, #248]	; 163e0 <etharp_tmr+0x100>
{
   162ea:	b085      	sub	sp, #20
   162ec:	f104 05f0 	add.w	r5, r4, #240	; 0xf0
  arp_table[i].state = ETHARP_STATE_EMPTY;
   162f0:	2600      	movs	r6, #0
    u8_t state = arp_table[i].state;
   162f2:	7d27      	ldrb	r7, [r4, #20]
    if (state != ETHARP_STATE_EMPTY
   162f4:	b177      	cbz	r7, 16314 <etharp_tmr+0x34>
      arp_table[i].ctime++;
   162f6:	8a63      	ldrh	r3, [r4, #18]
   162f8:	3301      	adds	r3, #1
   162fa:	b29b      	uxth	r3, r3
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
   162fc:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
      arp_table[i].ctime++;
   16300:	8263      	strh	r3, [r4, #18]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
   16302:	d20f      	bcs.n	16324 <etharp_tmr+0x44>
   16304:	2f01      	cmp	r7, #1
   16306:	d00b      	beq.n	16320 <etharp_tmr+0x40>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_1) {
   16308:	2f03      	cmp	r7, #3
   1630a:	d015      	beq.n	16338 <etharp_tmr+0x58>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_2) {
   1630c:	2f04      	cmp	r7, #4
   1630e:	d101      	bne.n	16314 <etharp_tmr+0x34>
        arp_table[i].state = ETHARP_STATE_STABLE;
   16310:	2302      	movs	r3, #2
   16312:	7523      	strb	r3, [r4, #20]
   16314:	3418      	adds	r4, #24
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
   16316:	42ac      	cmp	r4, r5
   16318:	d1eb      	bne.n	162f2 <etharp_tmr+0x12>
}
   1631a:	b005      	add	sp, #20
   1631c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
   16320:	2b04      	cmp	r3, #4
   16322:	d90f      	bls.n	16344 <etharp_tmr+0x64>
  if (arp_table[i].q != NULL) {
   16324:	6820      	ldr	r0, [r4, #0]
   16326:	b110      	cbz	r0, 1632e <etharp_tmr+0x4e>
    free_etharp_q(arp_table[i].q);
   16328:	f001 fa60 	bl	177ec <pbuf_free>
    arp_table[i].q = NULL;
   1632c:	6026      	str	r6, [r4, #0]
  arp_table[i].state = ETHARP_STATE_EMPTY;
   1632e:	7526      	strb	r6, [r4, #20]
   16330:	3418      	adds	r4, #24
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
   16332:	42ac      	cmp	r4, r5
   16334:	d1dd      	bne.n	162f2 <etharp_tmr+0x12>
   16336:	e7f0      	b.n	1631a <etharp_tmr+0x3a>
        arp_table[i].state = ETHARP_STATE_STABLE_REREQUESTING_2;
   16338:	2304      	movs	r3, #4
   1633a:	7523      	strb	r3, [r4, #20]
   1633c:	3418      	adds	r4, #24
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
   1633e:	42ac      	cmp	r4, r5
   16340:	d1d7      	bne.n	162f2 <etharp_tmr+0x12>
   16342:	e7ea      	b.n	1631a <etharp_tmr+0x3a>
  p = pbuf_alloc(PBUF_LINK, SIZEOF_ETHARP_HDR, PBUF_RAM);
   16344:	f44f 7220 	mov.w	r2, #640	; 0x280
   16348:	211c      	movs	r1, #28
   1634a:	200e      	movs	r0, #14
        etharp_request(arp_table[i].netif, &arp_table[i].ipaddr);
   1634c:	f8d4 9008 	ldr.w	r9, [r4, #8]
  p = pbuf_alloc(PBUF_LINK, SIZEOF_ETHARP_HDR, PBUF_RAM);
   16350:	f001 f8a0 	bl	17494 <pbuf_alloc>
 *         any other err_t on failure
 */
static err_t
etharp_request_dst(struct netif *netif, const ip4_addr_t *ipaddr, const struct eth_addr *hw_dst_addr)
{
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
   16354:	f109 022e 	add.w	r2, r9, #46	; 0x2e
  if (p == NULL) {
   16358:	4683      	mov	fp, r0
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
   1635a:	9203      	str	r2, [sp, #12]
  if (p == NULL) {
   1635c:	2800      	cmp	r0, #0
   1635e:	d0d9      	beq.n	16314 <etharp_tmr+0x34>
  hdr->opcode = lwip_htons(opcode);
   16360:	4638      	mov	r0, r7
  hdr = (struct etharp_hdr *)p->payload;
   16362:	f8db a004 	ldr.w	sl, [fp, #4]
  hdr->opcode = lwip_htons(opcode);
   16366:	f7fd f9c7 	bl	136f8 <lwip_htons>
  SMEMCPY(&hdr->shwaddr, hwsrc_addr, ETH_HWADDR_LEN);
   1636a:	9a03      	ldr	r2, [sp, #12]
  hdr->opcode = lwip_htons(opcode);
   1636c:	f8aa 0006 	strh.w	r0, [sl, #6]
  SMEMCPY(&hdr->shwaddr, hwsrc_addr, ETH_HWADDR_LEN);
   16370:	6811      	ldr	r1, [r2, #0]
   16372:	f8ca 1008 	str.w	r1, [sl, #8]
  SMEMCPY(&hdr->dhwaddr, hwdst_addr, ETH_HWADDR_LEN);
   16376:	4b19      	ldr	r3, [pc, #100]	; (163dc <etharp_tmr+0xfc>)
  SMEMCPY(&hdr->shwaddr, hwsrc_addr, ETH_HWADDR_LEN);
   16378:	8891      	ldrh	r1, [r2, #4]
   1637a:	f8aa 100c 	strh.w	r1, [sl, #12]
  SMEMCPY(&hdr->dhwaddr, hwdst_addr, ETH_HWADDR_LEN);
   1637e:	6818      	ldr	r0, [r3, #0]
   16380:	8899      	ldrh	r1, [r3, #4]
   16382:	f8ca 0012 	str.w	r0, [sl, #18]
   16386:	f8aa 1016 	strh.w	r1, [sl, #22]
  IPADDR_WORDALIGNED_COPY_FROM_IP4_ADDR_T(&hdr->sipaddr, ipsrc_addr);
   1638a:	f8d9 1004 	ldr.w	r1, [r9, #4]
   1638e:	f8ca 100e 	str.w	r1, [sl, #14]
  IPADDR_WORDALIGNED_COPY_FROM_IP4_ADDR_T(&hdr->dipaddr, ipdst_addr);
   16392:	6861      	ldr	r1, [r4, #4]
   16394:	f8ca 1018 	str.w	r1, [sl, #24]
  hdr->protolen = sizeof(ip4_addr_t);
   16398:	2104      	movs	r1, #4
   1639a:	f88a 1005 	strb.w	r1, [sl, #5]
  hdr->proto = PP_HTONS(ETHTYPE_IP);
   1639e:	f04f 0e08 	mov.w	lr, #8
  hdr->hwlen = ETH_HWADDR_LEN;
   163a2:	2006      	movs	r0, #6
    ethernet_output(netif, p, ethsrc_addr, &ethbroadcast, ETHTYPE_ARP);
   163a4:	f640 0106 	movw	r1, #2054	; 0x806
  hdr->hwlen = ETH_HWADDR_LEN;
   163a8:	f88a 0004 	strb.w	r0, [sl, #4]
  hdr->proto = PP_HTONS(ETHTYPE_IP);
   163ac:	f88a e002 	strb.w	lr, [sl, #2]
  hdr->hwtype = PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET);
   163b0:	f88a 6000 	strb.w	r6, [sl]
   163b4:	f88a 7001 	strb.w	r7, [sl, #1]
  hdr->proto = PP_HTONS(ETHTYPE_IP);
   163b8:	f88a 6003 	strb.w	r6, [sl, #3]
    ethernet_output(netif, p, ethsrc_addr, &ethbroadcast, ETHTYPE_ARP);
   163bc:	4643      	mov	r3, r8
   163be:	9100      	str	r1, [sp, #0]
   163c0:	4648      	mov	r0, r9
   163c2:	4659      	mov	r1, fp
    ethernet_output(netif, p, ethsrc_addr, ethdst_addr, ETHTYPE_ARP);
   163c4:	f005 fa96 	bl	1b8f4 <ethernet_output>
   163c8:	3418      	adds	r4, #24
  pbuf_free(p);
   163ca:	4658      	mov	r0, fp
   163cc:	f001 fa0e 	bl	177ec <pbuf_free>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
   163d0:	42ac      	cmp	r4, r5
   163d2:	d18e      	bne.n	162f2 <etharp_tmr+0x12>
   163d4:	e7a1      	b.n	1631a <etharp_tmr+0x3a>
   163d6:	bf00      	nop
   163d8:	200027c4 	.word	0x200027c4
   163dc:	0002d740 	.word	0x0002d740
   163e0:	0002d738 	.word	0x0002d738

000163e4 <etharp_input>:
  LWIP_ERROR("netif != NULL", (netif != NULL), return;);
   163e4:	2900      	cmp	r1, #0
   163e6:	d078      	beq.n	164da <etharp_input+0xf6>
{
   163e8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  hdr = (struct etharp_hdr *)p->payload;
   163ec:	6846      	ldr	r6, [r0, #4]
  if ((hdr->hwtype != PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET)) ||
   163ee:	8833      	ldrh	r3, [r6, #0]
   163f0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
{
   163f4:	b084      	sub	sp, #16
   163f6:	460d      	mov	r5, r1
   163f8:	4604      	mov	r4, r0
  if ((hdr->hwtype != PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET)) ||
   163fa:	d005      	beq.n	16408 <etharp_input+0x24>
  pbuf_free(p);
   163fc:	4620      	mov	r0, r4
   163fe:	f001 f9f5 	bl	177ec <pbuf_free>
}
   16402:	b004      	add	sp, #16
   16404:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  if ((hdr->hwtype != PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET)) ||
   16408:	7933      	ldrb	r3, [r6, #4]
   1640a:	2b06      	cmp	r3, #6
   1640c:	d1f6      	bne.n	163fc <etharp_input+0x18>
      (hdr->hwlen != ETH_HWADDR_LEN) ||
   1640e:	7973      	ldrb	r3, [r6, #5]
   16410:	2b04      	cmp	r3, #4
   16412:	d1f3      	bne.n	163fc <etharp_input+0x18>
      (hdr->protolen != sizeof(ip4_addr_t)) ||
   16414:	8873      	ldrh	r3, [r6, #2]
   16416:	2b08      	cmp	r3, #8
   16418:	d1f0      	bne.n	163fc <etharp_input+0x18>
  autoip_arp_reply(netif, hdr);
   1641a:	4628      	mov	r0, r5
   1641c:	4631      	mov	r1, r6
   1641e:	f005 fcff 	bl	1be20 <autoip_arp_reply>
  if (ip4_addr_isany_val(*netif_ip4_addr(netif))) {
   16422:	686f      	ldr	r7, [r5, #4]
  IPADDR_WORDALIGNED_COPY_TO_IP4_ADDR_T(&sipaddr, &hdr->sipaddr);
   16424:	f8d6 000e 	ldr.w	r0, [r6, #14]
   16428:	9003      	str	r0, [sp, #12]
  IPADDR_WORDALIGNED_COPY_TO_IP4_ADDR_T(&dipaddr, &hdr->dipaddr);
   1642a:	69b3      	ldr	r3, [r6, #24]
  etharp_update_arp_entry(netif, &sipaddr, &(hdr->shwaddr),
   1642c:	f106 0808 	add.w	r8, r6, #8
  if (ip4_addr_isany_val(*netif_ip4_addr(netif))) {
   16430:	2f00      	cmp	r7, #0
   16432:	d054      	beq.n	164de <etharp_input+0xfa>
  etharp_update_arp_entry(netif, &sipaddr, &(hdr->shwaddr),
   16434:	42bb      	cmp	r3, r7
   16436:	d151      	bne.n	164dc <etharp_input+0xf8>
    for_us = (u8_t)ip4_addr_cmp(&dipaddr, netif_ip4_addr(netif));
   16438:	2701      	movs	r7, #1
  etharp_update_arp_entry(netif, &sipaddr, &(hdr->shwaddr),
   1643a:	46ba      	mov	sl, r7
  if (ip4_addr_isany(ipaddr) ||
   1643c:	2800      	cmp	r0, #0
   1643e:	d040      	beq.n	164c2 <etharp_input+0xde>
      ip4_addr_isbroadcast(ipaddr, netif) ||
   16440:	4629      	mov	r1, r5
   16442:	f000 fc5b 	bl	16cfc <ip4_addr_isbroadcast_u32>
  if (ip4_addr_isany(ipaddr) ||
   16446:	4681      	mov	r9, r0
   16448:	2800      	cmp	r0, #0
   1644a:	d13a      	bne.n	164c2 <etharp_input+0xde>
      ip4_addr_ismulticast(ipaddr)) {
   1644c:	9b03      	ldr	r3, [sp, #12]
   1644e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
      ip4_addr_isbroadcast(ipaddr, netif) ||
   16452:	2be0      	cmp	r3, #224	; 0xe0
   16454:	d035      	beq.n	164c2 <etharp_input+0xde>
  i = etharp_find_entry(ipaddr, flags, netif);
   16456:	4651      	mov	r1, sl
   16458:	462a      	mov	r2, r5
   1645a:	a803      	add	r0, sp, #12
   1645c:	f7fe ff24 	bl	152a8 <etharp_find_entry>
  if (i < 0) {
   16460:	2800      	cmp	r0, #0
   16462:	db2e      	blt.n	164c2 <etharp_input+0xde>
    arp_table[i].state = ETHARP_STATE_STABLE;
   16464:	f8df e114 	ldr.w	lr, [pc, #276]	; 1657c <etharp_input+0x198>
   16468:	eb00 0140 	add.w	r1, r0, r0, lsl #1
   1646c:	00c9      	lsls	r1, r1, #3
   1646e:	eb0e 0201 	add.w	r2, lr, r1
   16472:	f04f 0a02 	mov.w	sl, #2
  SMEMCPY(&arp_table[i].ethaddr, ethaddr, ETH_HWADDR_LEN);
   16476:	f04f 0c18 	mov.w	ip, #24
   1647a:	230c      	movs	r3, #12
    arp_table[i].state = ETHARP_STATE_STABLE;
   1647c:	f882 a014 	strb.w	sl, [r2, #20]
  arp_table[i].netif = netif;
   16480:	6095      	str	r5, [r2, #8]
  SMEMCPY(&arp_table[i].ethaddr, ethaddr, ETH_HWADDR_LEN);
   16482:	fb10 330c 	smlabb	r3, r0, ip, r3
   16486:	f8d8 0000 	ldr.w	r0, [r8]
   1648a:	f84e 0003 	str.w	r0, [lr, r3]
   1648e:	4473      	add	r3, lr
   16490:	f8b8 0004 	ldrh.w	r0, [r8, #4]
   16494:	8098      	strh	r0, [r3, #4]
  if (arp_table[i].q != NULL) {
   16496:	f85e a001 	ldr.w	sl, [lr, r1]
  arp_table[i].ctime = 0;
   1649a:	f8a2 9012 	strh.w	r9, [r2, #18]
  if (arp_table[i].q != NULL) {
   1649e:	f1ba 0f00 	cmp.w	sl, #0
   164a2:	d00e      	beq.n	164c2 <etharp_input+0xde>
    ethernet_output(netif, p, (struct eth_addr *)(netif->hwaddr), ethaddr, ETHTYPE_IP);
   164a4:	f44f 6300 	mov.w	r3, #2048	; 0x800
   164a8:	9300      	str	r3, [sp, #0]
   164aa:	f105 022e 	add.w	r2, r5, #46	; 0x2e
    arp_table[i].q = NULL;
   164ae:	f84e 9001 	str.w	r9, [lr, r1]
    ethernet_output(netif, p, (struct eth_addr *)(netif->hwaddr), ethaddr, ETHTYPE_IP);
   164b2:	4643      	mov	r3, r8
   164b4:	4651      	mov	r1, sl
   164b6:	4628      	mov	r0, r5
   164b8:	f005 fa1c 	bl	1b8f4 <ethernet_output>
    pbuf_free(p);
   164bc:	4650      	mov	r0, sl
   164be:	f001 f995 	bl	177ec <pbuf_free>
  switch (hdr->opcode) {
   164c2:	88f3      	ldrh	r3, [r6, #6]
   164c4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
   164c8:	d00c      	beq.n	164e4 <etharp_input+0x100>
   164ca:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
   164ce:	d195      	bne.n	163fc <etharp_input+0x18>
      dhcp_arp_reply(netif, &sipaddr);
   164d0:	4628      	mov	r0, r5
   164d2:	a903      	add	r1, sp, #12
   164d4:	f7fe faf4 	bl	14ac0 <dhcp_arp_reply>
      break;
   164d8:	e790      	b.n	163fc <etharp_input+0x18>
   164da:	4770      	bx	lr
    for_us = (u8_t)ip4_addr_cmp(&dipaddr, netif_ip4_addr(netif));
   164dc:	2700      	movs	r7, #0
  etharp_update_arp_entry(netif, &sipaddr, &(hdr->shwaddr),
   164de:	f04f 0a02 	mov.w	sl, #2
   164e2:	e7ab      	b.n	1643c <etharp_input+0x58>
      if (for_us) {
   164e4:	2f00      	cmp	r7, #0
   164e6:	d089      	beq.n	163fc <etharp_input+0x18>
  p = pbuf_alloc(PBUF_LINK, SIZEOF_ETHARP_HDR, PBUF_RAM);
   164e8:	f44f 7220 	mov.w	r2, #640	; 0x280
   164ec:	211c      	movs	r1, #28
   164ee:	200e      	movs	r0, #14
   164f0:	f000 ffd0 	bl	17494 <pbuf_alloc>
                   (struct eth_addr *)netif->hwaddr, &hdr->shwaddr,
   164f4:	f105 092e 	add.w	r9, r5, #46	; 0x2e
  if (p == NULL) {
   164f8:	4607      	mov	r7, r0
   164fa:	2800      	cmp	r0, #0
   164fc:	f43f af7e 	beq.w	163fc <etharp_input+0x18>
  hdr->opcode = lwip_htons(opcode);
   16500:	2002      	movs	r0, #2
  hdr = (struct etharp_hdr *)p->payload;
   16502:	687e      	ldr	r6, [r7, #4]
  hdr->opcode = lwip_htons(opcode);
   16504:	f7fd f8f8 	bl	136f8 <lwip_htons>
   16508:	80f0      	strh	r0, [r6, #6]
  SMEMCPY(&hdr->shwaddr, hwsrc_addr, ETH_HWADDR_LEN);
   1650a:	f8d9 3000 	ldr.w	r3, [r9]
   1650e:	60b3      	str	r3, [r6, #8]
   16510:	f8b9 3004 	ldrh.w	r3, [r9, #4]
   16514:	81b3      	strh	r3, [r6, #12]
  SMEMCPY(&hdr->dhwaddr, hwdst_addr, ETH_HWADDR_LEN);
   16516:	f8d8 3000 	ldr.w	r3, [r8]
   1651a:	f8c6 3012 	str.w	r3, [r6, #18]
   1651e:	f8b8 3004 	ldrh.w	r3, [r8, #4]
   16522:	82f3      	strh	r3, [r6, #22]
  IPADDR_WORDALIGNED_COPY_FROM_IP4_ADDR_T(&hdr->sipaddr, ipsrc_addr);
   16524:	686a      	ldr	r2, [r5, #4]
  IPADDR_WORDALIGNED_COPY_FROM_IP4_ADDR_T(&hdr->dipaddr, ipdst_addr);
   16526:	9b03      	ldr	r3, [sp, #12]
  IPADDR_WORDALIGNED_COPY_FROM_IP4_ADDR_T(&hdr->sipaddr, ipsrc_addr);
   16528:	f8c6 200e 	str.w	r2, [r6, #14]
  IPADDR_WORDALIGNED_COPY_FROM_IP4_ADDR_T(&hdr->dipaddr, ipdst_addr);
   1652c:	61b3      	str	r3, [r6, #24]
  hdr->hwlen = ETH_HWADDR_LEN;
   1652e:	2206      	movs	r2, #6
  hdr->protolen = sizeof(ip4_addr_t);
   16530:	2304      	movs	r3, #4
   16532:	7173      	strb	r3, [r6, #5]
  hdr->hwlen = ETH_HWADDR_LEN;
   16534:	7132      	strb	r2, [r6, #4]
  if (ip4_addr_islinklocal(ipsrc_addr)) {
   16536:	88aa      	ldrh	r2, [r5, #4]
  hdr->hwtype = PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET);
   16538:	4b0e      	ldr	r3, [pc, #56]	; (16574 <etharp_input+0x190>)
   1653a:	6033      	str	r3, [r6, #0]
  if (ip4_addr_islinklocal(ipsrc_addr)) {
   1653c:	f64f 63a9 	movw	r3, #65193	; 0xfea9
   16540:	429a      	cmp	r2, r3
   16542:	d00c      	beq.n	1655e <etharp_input+0x17a>
    ethernet_output(netif, p, ethsrc_addr, ethdst_addr, ETHTYPE_ARP);
   16544:	f640 0106 	movw	r1, #2054	; 0x806
   16548:	9100      	str	r1, [sp, #0]
   1654a:	4643      	mov	r3, r8
   1654c:	464a      	mov	r2, r9
   1654e:	4628      	mov	r0, r5
   16550:	4639      	mov	r1, r7
   16552:	f005 f9cf 	bl	1b8f4 <ethernet_output>
  pbuf_free(p);
   16556:	4638      	mov	r0, r7
   16558:	f001 f948 	bl	177ec <pbuf_free>
   1655c:	e74e      	b.n	163fc <etharp_input+0x18>
    ethernet_output(netif, p, ethsrc_addr, &ethbroadcast, ETHTYPE_ARP);
   1655e:	f640 0306 	movw	r3, #2054	; 0x806
   16562:	9300      	str	r3, [sp, #0]
   16564:	464a      	mov	r2, r9
   16566:	4628      	mov	r0, r5
   16568:	4b03      	ldr	r3, [pc, #12]	; (16578 <etharp_input+0x194>)
   1656a:	4639      	mov	r1, r7
   1656c:	f005 f9c2 	bl	1b8f4 <ethernet_output>
   16570:	e7f1      	b.n	16556 <etharp_input+0x172>
   16572:	bf00      	nop
   16574:	00080100 	.word	0x00080100
   16578:	0002d738 	.word	0x0002d738
   1657c:	200027c4 	.word	0x200027c4

00016580 <etharp_query>:
{
   16580:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   16584:	460d      	mov	r5, r1
   16586:	b085      	sub	sp, #20
   16588:	4604      	mov	r4, r0
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
   1658a:	4601      	mov	r1, r0
   1658c:	6828      	ldr	r0, [r5, #0]
{
   1658e:	4617      	mov	r7, r2
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
   16590:	f000 fbb4 	bl	16cfc <ip4_addr_isbroadcast_u32>
   16594:	2800      	cmp	r0, #0
   16596:	f040 80a4 	bne.w	166e2 <etharp_query+0x162>
      ip4_addr_ismulticast(ipaddr) ||
   1659a:	682b      	ldr	r3, [r5, #0]
   1659c:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
   165a0:	2ae0      	cmp	r2, #224	; 0xe0
   165a2:	f000 809e 	beq.w	166e2 <etharp_query+0x162>
      ip4_addr_isany(ipaddr)) {
   165a6:	2b00      	cmp	r3, #0
   165a8:	f000 809b 	beq.w	166e2 <etharp_query+0x162>
  i_err = etharp_find_entry(ipaddr, ETHARP_FLAG_TRY_HARD, netif);
   165ac:	4622      	mov	r2, r4
   165ae:	2101      	movs	r1, #1
   165b0:	4628      	mov	r0, r5
   165b2:	f7fe fe79 	bl	152a8 <etharp_find_entry>
  if (i_err < 0) {
   165b6:	2800      	cmp	r0, #0
   165b8:	db71      	blt.n	1669e <etharp_query+0x11e>
  i = (netif_addr_idx_t)i_err;
   165ba:	b2c6      	uxtb	r6, r0
  if (arp_table[i].state == ETHARP_STATE_EMPTY) {
   165bc:	ea4f 0946 	mov.w	r9, r6, lsl #1
   165c0:	f8df 8160 	ldr.w	r8, [pc, #352]	; 16724 <etharp_query+0x1a4>
   165c4:	eb09 0306 	add.w	r3, r9, r6
   165c8:	eb08 03c3 	add.w	r3, r8, r3, lsl #3
  struct eth_addr *srcaddr = (struct eth_addr *)netif->hwaddr;
   165cc:	f104 0a2e 	add.w	sl, r4, #46	; 0x2e
  if (arp_table[i].state == ETHARP_STATE_EMPTY) {
   165d0:	7d1a      	ldrb	r2, [r3, #20]
   165d2:	b152      	cbz	r2, 165ea <etharp_query+0x6a>
  if (is_new_entry || (q == NULL)) {
   165d4:	2f00      	cmp	r7, #0
   165d6:	f000 8089 	beq.w	166ec <etharp_query+0x16c>
  if (arp_table[i].state >= ETHARP_STATE_STABLE) {
   165da:	2a01      	cmp	r2, #1
  err_t result = ERR_MEM;
   165dc:	f04f 30ff 	mov.w	r0, #4294967295
  if (arp_table[i].state >= ETHARP_STATE_STABLE) {
   165e0:	d84c      	bhi.n	1667c <etharp_query+0xfc>
  } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
   165e2:	d060      	beq.n	166a6 <etharp_query+0x126>
}
   165e4:	b005      	add	sp, #20
   165e6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    arp_table[i].state = ETHARP_STATE_PENDING;
   165ea:	2001      	movs	r0, #1
   165ec:	7518      	strb	r0, [r3, #20]
  p = pbuf_alloc(PBUF_LINK, SIZEOF_ETHARP_HDR, PBUF_RAM);
   165ee:	f44f 7220 	mov.w	r2, #640	; 0x280
   165f2:	211c      	movs	r1, #28
    arp_table[i].netif = netif;
   165f4:	609c      	str	r4, [r3, #8]
  p = pbuf_alloc(PBUF_LINK, SIZEOF_ETHARP_HDR, PBUF_RAM);
   165f6:	200e      	movs	r0, #14
   165f8:	f000 ff4c 	bl	17494 <pbuf_alloc>
  if (p == NULL) {
   165fc:	4683      	mov	fp, r0
   165fe:	2800      	cmp	r0, #0
   16600:	f000 8088 	beq.w	16714 <etharp_query+0x194>
  hdr = (struct etharp_hdr *)p->payload;
   16604:	f8db 3004 	ldr.w	r3, [fp, #4]
   16608:	9303      	str	r3, [sp, #12]
  hdr->opcode = lwip_htons(opcode);
   1660a:	2001      	movs	r0, #1
   1660c:	f7fd f874 	bl	136f8 <lwip_htons>
   16610:	9b03      	ldr	r3, [sp, #12]
  SMEMCPY(&hdr->dhwaddr, hwdst_addr, ETH_HWADDR_LEN);
   16612:	4a42      	ldr	r2, [pc, #264]	; (1671c <etharp_query+0x19c>)
  hdr->opcode = lwip_htons(opcode);
   16614:	80d8      	strh	r0, [r3, #6]
  SMEMCPY(&hdr->shwaddr, hwsrc_addr, ETH_HWADDR_LEN);
   16616:	f8da 1000 	ldr.w	r1, [sl]
   1661a:	6099      	str	r1, [r3, #8]
   1661c:	f8ba 0004 	ldrh.w	r0, [sl, #4]
  SMEMCPY(&hdr->dhwaddr, hwdst_addr, ETH_HWADDR_LEN);
   16620:	6811      	ldr	r1, [r2, #0]
   16622:	8892      	ldrh	r2, [r2, #4]
  SMEMCPY(&hdr->shwaddr, hwsrc_addr, ETH_HWADDR_LEN);
   16624:	8198      	strh	r0, [r3, #12]
  SMEMCPY(&hdr->dhwaddr, hwdst_addr, ETH_HWADDR_LEN);
   16626:	f8c3 1012 	str.w	r1, [r3, #18]
   1662a:	82da      	strh	r2, [r3, #22]
  IPADDR_WORDALIGNED_COPY_FROM_IP4_ADDR_T(&hdr->sipaddr, ipsrc_addr);
   1662c:	6862      	ldr	r2, [r4, #4]
   1662e:	f8c3 200e 	str.w	r2, [r3, #14]
  IPADDR_WORDALIGNED_COPY_FROM_IP4_ADDR_T(&hdr->dipaddr, ipdst_addr);
   16632:	682a      	ldr	r2, [r5, #0]
   16634:	619a      	str	r2, [r3, #24]
  hdr->hwtype = PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET);
   16636:	2201      	movs	r2, #1
   16638:	705a      	strb	r2, [r3, #1]
  hdr->proto = PP_HTONS(ETHTYPE_IP);
   1663a:	f04f 0e08 	mov.w	lr, #8
  hdr->hwtype = PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET);
   1663e:	2500      	movs	r5, #0
  hdr->hwlen = ETH_HWADDR_LEN;
   16640:	2006      	movs	r0, #6
  hdr->protolen = sizeof(ip4_addr_t);
   16642:	2104      	movs	r1, #4
    ethernet_output(netif, p, ethsrc_addr, ethdst_addr, ETHTYPE_ARP);
   16644:	f640 0206 	movw	r2, #2054	; 0x806
  hdr->proto = PP_HTONS(ETHTYPE_IP);
   16648:	f883 e002 	strb.w	lr, [r3, #2]
  hdr->hwlen = ETH_HWADDR_LEN;
   1664c:	7118      	strb	r0, [r3, #4]
  hdr->protolen = sizeof(ip4_addr_t);
   1664e:	7159      	strb	r1, [r3, #5]
  hdr->hwtype = PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET);
   16650:	701d      	strb	r5, [r3, #0]
  hdr->proto = PP_HTONS(ETHTYPE_IP);
   16652:	70dd      	strb	r5, [r3, #3]
    ethernet_output(netif, p, ethsrc_addr, ethdst_addr, ETHTYPE_ARP);
   16654:	4659      	mov	r1, fp
   16656:	4b32      	ldr	r3, [pc, #200]	; (16720 <etharp_query+0x1a0>)
   16658:	9200      	str	r2, [sp, #0]
   1665a:	4620      	mov	r0, r4
   1665c:	4652      	mov	r2, sl
   1665e:	f005 f949 	bl	1b8f4 <ethernet_output>
  pbuf_free(p);
   16662:	4658      	mov	r0, fp
   16664:	f001 f8c2 	bl	177ec <pbuf_free>
  return result;
   16668:	4628      	mov	r0, r5
    if (q == NULL) {
   1666a:	2f00      	cmp	r7, #0
   1666c:	d0ba      	beq.n	165e4 <etharp_query+0x64>
   1666e:	eb09 0306 	add.w	r3, r9, r6
   16672:	eb08 03c3 	add.w	r3, r8, r3, lsl #3
   16676:	7d1a      	ldrb	r2, [r3, #20]
  if (arp_table[i].state >= ETHARP_STATE_STABLE) {
   16678:	2a01      	cmp	r2, #1
   1667a:	d9b2      	bls.n	165e2 <etharp_query+0x62>
    result = ethernet_output(netif, q, srcaddr, &(arp_table[i].ethaddr), ETHTYPE_IP);
   1667c:	2318      	movs	r3, #24
   1667e:	fb03 8306 	mla	r3, r3, r6, r8
   16682:	f44f 6500 	mov.w	r5, #2048	; 0x800
   16686:	4652      	mov	r2, sl
   16688:	4639      	mov	r1, r7
   1668a:	4620      	mov	r0, r4
   1668c:	330c      	adds	r3, #12
   1668e:	9500      	str	r5, [sp, #0]
    ETHARP_SET_ADDRHINT(netif, i);
   16690:	f888 60f0 	strb.w	r6, [r8, #240]	; 0xf0
    result = ethernet_output(netif, q, srcaddr, &(arp_table[i].ethaddr), ETHTYPE_IP);
   16694:	f005 f92e 	bl	1b8f4 <ethernet_output>
}
   16698:	b005      	add	sp, #20
   1669a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    return (err_t)i_err;
   1669e:	b240      	sxtb	r0, r0
}
   166a0:	b005      	add	sp, #20
   166a2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    while (p) {
   166a6:	b157      	cbz	r7, 166be <etharp_query+0x13e>
      if (PBUF_NEEDS_COPY(p)) {
   166a8:	7b3b      	ldrb	r3, [r7, #12]
   166aa:	0659      	lsls	r1, r3, #25
   166ac:	d42a      	bmi.n	16704 <etharp_query+0x184>
   166ae:	463b      	mov	r3, r7
   166b0:	e002      	b.n	166b8 <etharp_query+0x138>
   166b2:	7b1a      	ldrb	r2, [r3, #12]
   166b4:	0652      	lsls	r2, r2, #25
   166b6:	d425      	bmi.n	16704 <etharp_query+0x184>
      p = p->next;
   166b8:	681b      	ldr	r3, [r3, #0]
    while (p) {
   166ba:	2b00      	cmp	r3, #0
   166bc:	d1f9      	bne.n	166b2 <etharp_query+0x132>
      pbuf_ref(p);
   166be:	4638      	mov	r0, r7
   166c0:	f001 f8d6 	bl	17870 <pbuf_ref>
    if (p != NULL) {
   166c4:	b1df      	cbz	r7, 166fe <etharp_query+0x17e>
      if (arp_table[i].q != NULL) {
   166c6:	eb09 0306 	add.w	r3, r9, r6
   166ca:	f858 0033 	ldr.w	r0, [r8, r3, lsl #3]
   166ce:	b108      	cbz	r0, 166d4 <etharp_query+0x154>
        pbuf_free(arp_table[i].q);
   166d0:	f001 f88c 	bl	177ec <pbuf_free>
      arp_table[i].q = p;
   166d4:	444e      	add	r6, r9
      result = ERR_OK;
   166d6:	2000      	movs	r0, #0
      arp_table[i].q = p;
   166d8:	f848 7036 	str.w	r7, [r8, r6, lsl #3]
}
   166dc:	b005      	add	sp, #20
   166de:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    return ERR_ARG;
   166e2:	f06f 000f 	mvn.w	r0, #15
}
   166e6:	b005      	add	sp, #20
   166e8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  p = pbuf_alloc(PBUF_LINK, SIZEOF_ETHARP_HDR, PBUF_RAM);
   166ec:	f44f 7220 	mov.w	r2, #640	; 0x280
   166f0:	211c      	movs	r1, #28
   166f2:	200e      	movs	r0, #14
   166f4:	f000 fece 	bl	17494 <pbuf_alloc>
  if (p == NULL) {
   166f8:	4683      	mov	fp, r0
   166fa:	2800      	cmp	r0, #0
   166fc:	d182      	bne.n	16604 <etharp_query+0x84>
      result = ERR_MEM;
   166fe:	f04f 30ff 	mov.w	r0, #4294967295
   16702:	e76f      	b.n	165e4 <etharp_query+0x64>
      p = pbuf_clone(PBUF_LINK, PBUF_RAM, q);
   16704:	463a      	mov	r2, r7
   16706:	f44f 7120 	mov.w	r1, #640	; 0x280
   1670a:	200e      	movs	r0, #14
   1670c:	f001 f9f6 	bl	17afc <pbuf_clone>
   16710:	4607      	mov	r7, r0
   16712:	e7d7      	b.n	166c4 <etharp_query+0x144>
    return ERR_MEM;
   16714:	f04f 30ff 	mov.w	r0, #4294967295
   16718:	e7a7      	b.n	1666a <etharp_query+0xea>
   1671a:	bf00      	nop
   1671c:	0002d740 	.word	0x0002d740
   16720:	0002d738 	.word	0x0002d738
   16724:	200027c4 	.word	0x200027c4

00016728 <etharp_output>:
{
   16728:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1672c:	4605      	mov	r5, r0
   1672e:	b087      	sub	sp, #28
   16730:	460e      	mov	r6, r1
  if (ip4_addr_isbroadcast(ipaddr, netif)) {
   16732:	6810      	ldr	r0, [r2, #0]
   16734:	4629      	mov	r1, r5
{
   16736:	4691      	mov	r9, r2
  if (ip4_addr_isbroadcast(ipaddr, netif)) {
   16738:	f000 fae0 	bl	16cfc <ip4_addr_isbroadcast_u32>
   1673c:	2800      	cmp	r0, #0
   1673e:	f040 8086 	bne.w	1684e <etharp_output+0x126>
  } else if (ip4_addr_ismulticast(ipaddr)) {
   16742:	f8d9 2000 	ldr.w	r2, [r9]
   16746:	f002 03f0 	and.w	r3, r2, #240	; 0xf0
   1674a:	2be0      	cmp	r3, #224	; 0xe0
   1674c:	f000 80a3 	beq.w	16896 <etharp_output+0x16e>
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
   16750:	686b      	ldr	r3, [r5, #4]
   16752:	68a9      	ldr	r1, [r5, #8]
   16754:	4053      	eors	r3, r2
   16756:	420b      	tst	r3, r1
   16758:	d00f      	beq.n	1677a <etharp_output+0x52>
        !ip4_addr_islinklocal(ipaddr)) {
   1675a:	b293      	uxth	r3, r2
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
   1675c:	f64f 61a9 	movw	r1, #65193	; 0xfea9
   16760:	428b      	cmp	r3, r1
   16762:	d00a      	beq.n	1677a <etharp_output+0x52>
      if (!ip4_addr_islinklocal(&iphdr->src))
   16764:	6873      	ldr	r3, [r6, #4]
   16766:	68db      	ldr	r3, [r3, #12]
   16768:	b29b      	uxth	r3, r3
   1676a:	428b      	cmp	r3, r1
   1676c:	d005      	beq.n	1677a <etharp_output+0x52>
          if (!ip4_addr_isany_val(*netif_ip4_gw(netif))) {
   1676e:	68ea      	ldr	r2, [r5, #12]
   16770:	2a00      	cmp	r2, #0
   16772:	f000 8118 	beq.w	169a6 <etharp_output+0x27e>
            dst_addr = netif_ip4_gw(netif);
   16776:	f105 090c 	add.w	r9, r5, #12
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
   1677a:	4cb6      	ldr	r4, [pc, #728]	; (16a54 <etharp_output+0x32c>)
   1677c:	f894 70f0 	ldrb.w	r7, [r4, #240]	; 0xf0
   16780:	ea4f 0847 	mov.w	r8, r7, lsl #1
   16784:	eb08 0307 	add.w	r3, r8, r7
   16788:	eb04 03c3 	add.w	r3, r4, r3, lsl #3
   1678c:	7d18      	ldrb	r0, [r3, #20]
   1678e:	2801      	cmp	r0, #1
   16790:	d902      	bls.n	16798 <etharp_output+0x70>
   16792:	6899      	ldr	r1, [r3, #8]
   16794:	428d      	cmp	r5, r1
   16796:	d067      	beq.n	16868 <etharp_output+0x140>
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
   16798:	7d23      	ldrb	r3, [r4, #20]
   1679a:	2b01      	cmp	r3, #1
   1679c:	d903      	bls.n	167a6 <etharp_output+0x7e>
   1679e:	68a1      	ldr	r1, [r4, #8]
   167a0:	428d      	cmp	r5, r1
   167a2:	f000 8090 	beq.w	168c6 <etharp_output+0x19e>
   167a6:	f894 302c 	ldrb.w	r3, [r4, #44]	; 0x2c
   167aa:	2b01      	cmp	r3, #1
   167ac:	d903      	bls.n	167b6 <etharp_output+0x8e>
   167ae:	6a21      	ldr	r1, [r4, #32]
   167b0:	428d      	cmp	r5, r1
   167b2:	f000 808f 	beq.w	168d4 <etharp_output+0x1ac>
   167b6:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
   167ba:	2b01      	cmp	r3, #1
   167bc:	d903      	bls.n	167c6 <etharp_output+0x9e>
   167be:	6ba1      	ldr	r1, [r4, #56]	; 0x38
   167c0:	428d      	cmp	r5, r1
   167c2:	f000 808e 	beq.w	168e2 <etharp_output+0x1ba>
   167c6:	f894 305c 	ldrb.w	r3, [r4, #92]	; 0x5c
   167ca:	2b01      	cmp	r3, #1
   167cc:	d903      	bls.n	167d6 <etharp_output+0xae>
   167ce:	6d21      	ldr	r1, [r4, #80]	; 0x50
   167d0:	428d      	cmp	r5, r1
   167d2:	f000 808d 	beq.w	168f0 <etharp_output+0x1c8>
   167d6:	f894 3074 	ldrb.w	r3, [r4, #116]	; 0x74
   167da:	2b01      	cmp	r3, #1
   167dc:	d903      	bls.n	167e6 <etharp_output+0xbe>
   167de:	6ea1      	ldr	r1, [r4, #104]	; 0x68
   167e0:	428d      	cmp	r5, r1
   167e2:	f000 808c 	beq.w	168fe <etharp_output+0x1d6>
   167e6:	f894 308c 	ldrb.w	r3, [r4, #140]	; 0x8c
   167ea:	2b01      	cmp	r3, #1
   167ec:	d904      	bls.n	167f8 <etharp_output+0xd0>
   167ee:	f8d4 1080 	ldr.w	r1, [r4, #128]	; 0x80
   167f2:	428d      	cmp	r5, r1
   167f4:	f000 808a 	beq.w	1690c <etharp_output+0x1e4>
   167f8:	f894 30a4 	ldrb.w	r3, [r4, #164]	; 0xa4
   167fc:	2b01      	cmp	r3, #1
   167fe:	d904      	bls.n	1680a <etharp_output+0xe2>
   16800:	f8d4 1098 	ldr.w	r1, [r4, #152]	; 0x98
   16804:	428d      	cmp	r5, r1
   16806:	f000 8088 	beq.w	1691a <etharp_output+0x1f2>
   1680a:	f894 30bc 	ldrb.w	r3, [r4, #188]	; 0xbc
   1680e:	2b01      	cmp	r3, #1
   16810:	d904      	bls.n	1681c <etharp_output+0xf4>
   16812:	f8d4 10b0 	ldr.w	r1, [r4, #176]	; 0xb0
   16816:	428d      	cmp	r5, r1
   16818:	f000 8087 	beq.w	1692a <etharp_output+0x202>
   1681c:	f894 30d4 	ldrb.w	r3, [r4, #212]	; 0xd4
   16820:	2b01      	cmp	r3, #1
   16822:	d904      	bls.n	1682e <etharp_output+0x106>
   16824:	f8d4 10c8 	ldr.w	r1, [r4, #200]	; 0xc8
   16828:	428d      	cmp	r5, r1
   1682a:	f000 808e 	beq.w	1694a <etharp_output+0x222>
   1682e:	f894 30ec 	ldrb.w	r3, [r4, #236]	; 0xec
   16832:	2b01      	cmp	r3, #1
   16834:	d903      	bls.n	1683e <etharp_output+0x116>
   16836:	f8d4 10e0 	ldr.w	r1, [r4, #224]	; 0xe0
   1683a:	428d      	cmp	r5, r1
   1683c:	d07d      	beq.n	1693a <etharp_output+0x212>
    return etharp_query(netif, dst_addr, q);
   1683e:	4632      	mov	r2, r6
   16840:	4649      	mov	r1, r9
   16842:	4628      	mov	r0, r5
   16844:	f7ff fe9c 	bl	16580 <etharp_query>
}
   16848:	b007      	add	sp, #28
   1684a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    dest = (const struct eth_addr *)&ethbroadcast;
   1684e:	4b82      	ldr	r3, [pc, #520]	; (16a58 <etharp_output+0x330>)
  return ethernet_output(netif, q, (struct eth_addr *)(netif->hwaddr), dest, ETHTYPE_IP);
   16850:	f44f 6200 	mov.w	r2, #2048	; 0x800
   16854:	9200      	str	r2, [sp, #0]
   16856:	4631      	mov	r1, r6
   16858:	f105 022e 	add.w	r2, r5, #46	; 0x2e
   1685c:	4628      	mov	r0, r5
   1685e:	f005 f849 	bl	1b8f4 <ethernet_output>
}
   16862:	b007      	add	sp, #28
   16864:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
            (arp_table[etharp_cached_entry].netif == netif) &&
   16868:	6859      	ldr	r1, [r3, #4]
   1686a:	4291      	cmp	r1, r2
   1686c:	d194      	bne.n	16798 <etharp_output+0x70>
  if (arp_table[arp_idx].state == ETHARP_STATE_STABLE) {
   1686e:	2802      	cmp	r0, #2
   16870:	f000 8145 	beq.w	16afe <etharp_output+0x3d6>
   16874:	2318      	movs	r3, #24
   16876:	fb03 4407 	mla	r4, r3, r7, r4
   1687a:	f104 090c 	add.w	r9, r4, #12
   1687e:	f105 0a2e 	add.w	sl, r5, #46	; 0x2e
  return ethernet_output(netif, q, (struct eth_addr *)(netif->hwaddr), &arp_table[arp_idx].ethaddr, ETHTYPE_IP);
   16882:	f44f 6400 	mov.w	r4, #2048	; 0x800
   16886:	464b      	mov	r3, r9
   16888:	4652      	mov	r2, sl
   1688a:	4631      	mov	r1, r6
   1688c:	4628      	mov	r0, r5
   1688e:	9400      	str	r4, [sp, #0]
   16890:	f005 f830 	bl	1b8f4 <ethernet_output>
          return etharp_output_to_arp_index(netif, q, etharp_cached_entry);
   16894:	e7d8      	b.n	16848 <etharp_output+0x120>
    mcastaddr.addr[3] = ip4_addr2(ipaddr) & 0x7f;
   16896:	f899 3001 	ldrb.w	r3, [r9, #1]
    mcastaddr.addr[4] = ip4_addr3(ipaddr);
   1689a:	f899 1002 	ldrb.w	r1, [r9, #2]
    mcastaddr.addr[5] = ip4_addr4(ipaddr);
   1689e:	f899 2003 	ldrb.w	r2, [r9, #3]
    mcastaddr.addr[1] = LL_IP4_MULTICAST_ADDR_1;
   168a2:	f88d 0011 	strb.w	r0, [sp, #17]
    mcastaddr.addr[3] = ip4_addr2(ipaddr) & 0x7f;
   168a6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
    mcastaddr.addr[0] = LL_IP4_MULTICAST_ADDR_0;
   168aa:	2401      	movs	r4, #1
    mcastaddr.addr[2] = LL_IP4_MULTICAST_ADDR_2;
   168ac:	205e      	movs	r0, #94	; 0x5e
    mcastaddr.addr[3] = ip4_addr2(ipaddr) & 0x7f;
   168ae:	f88d 3013 	strb.w	r3, [sp, #19]
    mcastaddr.addr[0] = LL_IP4_MULTICAST_ADDR_0;
   168b2:	f88d 4010 	strb.w	r4, [sp, #16]
    mcastaddr.addr[2] = LL_IP4_MULTICAST_ADDR_2;
   168b6:	f88d 0012 	strb.w	r0, [sp, #18]
    mcastaddr.addr[4] = ip4_addr3(ipaddr);
   168ba:	f88d 1014 	strb.w	r1, [sp, #20]
    mcastaddr.addr[5] = ip4_addr4(ipaddr);
   168be:	f88d 2015 	strb.w	r2, [sp, #21]
    dest = &mcastaddr;
   168c2:	ab04      	add	r3, sp, #16
   168c4:	e7c4      	b.n	16850 <etharp_output+0x128>
          (arp_table[i].netif == netif) &&
   168c6:	6861      	ldr	r1, [r4, #4]
   168c8:	4291      	cmp	r1, r2
   168ca:	f47f af6c 	bne.w	167a6 <etharp_output+0x7e>
   168ce:	2200      	movs	r2, #0
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
   168d0:	4617      	mov	r7, r2
   168d2:	e041      	b.n	16958 <etharp_output+0x230>
          (arp_table[i].netif == netif) &&
   168d4:	69e1      	ldr	r1, [r4, #28]
   168d6:	428a      	cmp	r2, r1
   168d8:	f47f af6d 	bne.w	167b6 <etharp_output+0x8e>
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
   168dc:	2201      	movs	r2, #1
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
   168de:	4617      	mov	r7, r2
   168e0:	e03a      	b.n	16958 <etharp_output+0x230>
          (arp_table[i].netif == netif) &&
   168e2:	6b61      	ldr	r1, [r4, #52]	; 0x34
   168e4:	428a      	cmp	r2, r1
   168e6:	f47f af6e 	bne.w	167c6 <etharp_output+0x9e>
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
   168ea:	2202      	movs	r2, #2
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
   168ec:	4617      	mov	r7, r2
   168ee:	e033      	b.n	16958 <etharp_output+0x230>
          (arp_table[i].netif == netif) &&
   168f0:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
   168f2:	428a      	cmp	r2, r1
   168f4:	f47f af6f 	bne.w	167d6 <etharp_output+0xae>
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
   168f8:	2203      	movs	r2, #3
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
   168fa:	4617      	mov	r7, r2
   168fc:	e02c      	b.n	16958 <etharp_output+0x230>
          (arp_table[i].netif == netif) &&
   168fe:	6e61      	ldr	r1, [r4, #100]	; 0x64
   16900:	428a      	cmp	r2, r1
   16902:	f47f af70 	bne.w	167e6 <etharp_output+0xbe>
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
   16906:	2204      	movs	r2, #4
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
   16908:	4617      	mov	r7, r2
   1690a:	e025      	b.n	16958 <etharp_output+0x230>
          (arp_table[i].netif == netif) &&
   1690c:	6fe1      	ldr	r1, [r4, #124]	; 0x7c
   1690e:	428a      	cmp	r2, r1
   16910:	f47f af72 	bne.w	167f8 <etharp_output+0xd0>
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
   16914:	2205      	movs	r2, #5
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
   16916:	4617      	mov	r7, r2
   16918:	e01e      	b.n	16958 <etharp_output+0x230>
          (arp_table[i].netif == netif) &&
   1691a:	f8d4 1094 	ldr.w	r1, [r4, #148]	; 0x94
   1691e:	428a      	cmp	r2, r1
   16920:	f47f af73 	bne.w	1680a <etharp_output+0xe2>
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
   16924:	2206      	movs	r2, #6
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
   16926:	4617      	mov	r7, r2
   16928:	e016      	b.n	16958 <etharp_output+0x230>
          (arp_table[i].netif == netif) &&
   1692a:	f8d4 10ac 	ldr.w	r1, [r4, #172]	; 0xac
   1692e:	428a      	cmp	r2, r1
   16930:	f47f af74 	bne.w	1681c <etharp_output+0xf4>
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
   16934:	2207      	movs	r2, #7
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
   16936:	4617      	mov	r7, r2
   16938:	e00e      	b.n	16958 <etharp_output+0x230>
          (arp_table[i].netif == netif) &&
   1693a:	f8d4 10dc 	ldr.w	r1, [r4, #220]	; 0xdc
   1693e:	4291      	cmp	r1, r2
   16940:	f47f af7d 	bne.w	1683e <etharp_output+0x116>
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
   16944:	2209      	movs	r2, #9
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
   16946:	4617      	mov	r7, r2
   16948:	e006      	b.n	16958 <etharp_output+0x230>
          (arp_table[i].netif == netif) &&
   1694a:	f8d4 10c4 	ldr.w	r1, [r4, #196]	; 0xc4
   1694e:	428a      	cmp	r2, r1
   16950:	f47f af6d 	bne.w	1682e <etharp_output+0x106>
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
   16954:	2208      	movs	r2, #8
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
   16956:	4617      	mov	r7, r2
  if (arp_table[arp_idx].state == ETHARP_STATE_STABLE) {
   16958:	2b02      	cmp	r3, #2
        ETHARP_SET_ADDRHINT(netif, i);
   1695a:	f884 20f0 	strb.w	r2, [r4, #240]	; 0xf0
  if (arp_table[arp_idx].state == ETHARP_STATE_STABLE) {
   1695e:	d010      	beq.n	16982 <etharp_output+0x25a>
   16960:	eb07 0747 	add.w	r7, r7, r7, lsl #1
   16964:	eb04 04c7 	add.w	r4, r4, r7, lsl #3
   16968:	f104 030c 	add.w	r3, r4, #12
   1696c:	f105 082e 	add.w	r8, r5, #46	; 0x2e
  return ethernet_output(netif, q, (struct eth_addr *)(netif->hwaddr), &arp_table[arp_idx].ethaddr, ETHTYPE_IP);
   16970:	f44f 6400 	mov.w	r4, #2048	; 0x800
   16974:	4642      	mov	r2, r8
   16976:	4631      	mov	r1, r6
   16978:	4628      	mov	r0, r5
   1697a:	9400      	str	r4, [sp, #0]
   1697c:	f004 ffba 	bl	1b8f4 <ethernet_output>
        return etharp_output_to_arp_index(netif, q, i);
   16980:	e762      	b.n	16848 <etharp_output+0x120>
    if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_BROADCAST) {
   16982:	ea4f 0947 	mov.w	r9, r7, lsl #1
   16986:	eb09 0307 	add.w	r3, r9, r7
   1698a:	00db      	lsls	r3, r3, #3
   1698c:	18e2      	adds	r2, r4, r3
   1698e:	8a52      	ldrh	r2, [r2, #18]
   16990:	f5b2 7f8e 	cmp.w	r2, #284	; 0x11c
   16994:	d864      	bhi.n	16a60 <etharp_output+0x338>
    } else if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_UNICAST) {
   16996:	f5b2 7f87 	cmp.w	r2, #270	; 0x10e
   1699a:	d207      	bcs.n	169ac <etharp_output+0x284>
   1699c:	330c      	adds	r3, #12
   1699e:	4423      	add	r3, r4
   169a0:	f105 082e 	add.w	r8, r5, #46	; 0x2e
   169a4:	e7e4      	b.n	16970 <etharp_output+0x248>
            return ERR_RTE;
   169a6:	f06f 0003 	mvn.w	r0, #3
   169aa:	e74d      	b.n	16848 <etharp_output+0x120>
  p = pbuf_alloc(PBUF_LINK, SIZEOF_ETHARP_HDR, PBUF_RAM);
   169ac:	f44f 7220 	mov.w	r2, #640	; 0x280
   169b0:	211c      	movs	r1, #28
   169b2:	200e      	movs	r0, #14
      if (etharp_request_dst(netif, &arp_table[arp_idx].ipaddr, &arp_table[arp_idx].ethaddr) == ERR_OK) {
   169b4:	f103 0a0c 	add.w	sl, r3, #12
   169b8:	9302      	str	r3, [sp, #8]
  p = pbuf_alloc(PBUF_LINK, SIZEOF_ETHARP_HDR, PBUF_RAM);
   169ba:	f000 fd6b 	bl	17494 <pbuf_alloc>
      if (etharp_request_dst(netif, &arp_table[arp_idx].ipaddr, &arp_table[arp_idx].ethaddr) == ERR_OK) {
   169be:	9b02      	ldr	r3, [sp, #8]
   169c0:	3304      	adds	r3, #4
   169c2:	44a2      	add	sl, r4
  if (p == NULL) {
   169c4:	4683      	mov	fp, r0
      if (etharp_request_dst(netif, &arp_table[arp_idx].ipaddr, &arp_table[arp_idx].ethaddr) == ERR_OK) {
   169c6:	9303      	str	r3, [sp, #12]
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
   169c8:	f105 082e 	add.w	r8, r5, #46	; 0x2e
  if (p == NULL) {
   169cc:	2800      	cmp	r0, #0
   169ce:	f000 8141 	beq.w	16c54 <etharp_output+0x52c>
  hdr = (struct etharp_hdr *)p->payload;
   169d2:	f8db 2004 	ldr.w	r2, [fp, #4]
   169d6:	9202      	str	r2, [sp, #8]
  hdr->opcode = lwip_htons(opcode);
   169d8:	2001      	movs	r0, #1
   169da:	f7fc fe8d 	bl	136f8 <lwip_htons>
   169de:	9a02      	ldr	r2, [sp, #8]
  SMEMCPY(&hdr->dhwaddr, hwdst_addr, ETH_HWADDR_LEN);
   169e0:	491e      	ldr	r1, [pc, #120]	; (16a5c <etharp_output+0x334>)
  hdr->opcode = lwip_htons(opcode);
   169e2:	80d0      	strh	r0, [r2, #6]
  SMEMCPY(&hdr->shwaddr, hwsrc_addr, ETH_HWADDR_LEN);
   169e4:	f8d8 0000 	ldr.w	r0, [r8]
   169e8:	6090      	str	r0, [r2, #8]
   169ea:	f8b8 e004 	ldrh.w	lr, [r8, #4]
  SMEMCPY(&hdr->dhwaddr, hwdst_addr, ETH_HWADDR_LEN);
   169ee:	6808      	ldr	r0, [r1, #0]
   169f0:	8889      	ldrh	r1, [r1, #4]
  SMEMCPY(&hdr->shwaddr, hwsrc_addr, ETH_HWADDR_LEN);
   169f2:	f8a2 e00c 	strh.w	lr, [r2, #12]
  SMEMCPY(&hdr->dhwaddr, hwdst_addr, ETH_HWADDR_LEN);
   169f6:	f8c2 0012 	str.w	r0, [r2, #18]
   169fa:	82d1      	strh	r1, [r2, #22]
  IPADDR_WORDALIGNED_COPY_FROM_IP4_ADDR_T(&hdr->sipaddr, ipsrc_addr);
   169fc:	6869      	ldr	r1, [r5, #4]
  IPADDR_WORDALIGNED_COPY_FROM_IP4_ADDR_T(&hdr->dipaddr, ipdst_addr);
   169fe:	9b03      	ldr	r3, [sp, #12]
  IPADDR_WORDALIGNED_COPY_FROM_IP4_ADDR_T(&hdr->sipaddr, ipsrc_addr);
   16a00:	f8c2 100e 	str.w	r1, [r2, #14]
  IPADDR_WORDALIGNED_COPY_FROM_IP4_ADDR_T(&hdr->dipaddr, ipdst_addr);
   16a04:	58e3      	ldr	r3, [r4, r3]
   16a06:	6193      	str	r3, [r2, #24]
  hdr->hwlen = ETH_HWADDR_LEN;
   16a08:	2106      	movs	r1, #6
  hdr->protolen = sizeof(ip4_addr_t);
   16a0a:	2304      	movs	r3, #4
  hdr->hwlen = ETH_HWADDR_LEN;
   16a0c:	7111      	strb	r1, [r2, #4]
  hdr->protolen = sizeof(ip4_addr_t);
   16a0e:	7153      	strb	r3, [r2, #5]
  if (ip4_addr_islinklocal(ipsrc_addr)) {
   16a10:	88a8      	ldrh	r0, [r5, #4]
  hdr->hwtype = PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET);
   16a12:	2101      	movs	r1, #1
   16a14:	7051      	strb	r1, [r2, #1]
   16a16:	2300      	movs	r3, #0
  if (ip4_addr_islinklocal(ipsrc_addr)) {
   16a18:	f64f 61a9 	movw	r1, #65193	; 0xfea9
   16a1c:	4288      	cmp	r0, r1
  hdr->hwtype = PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET);
   16a1e:	7013      	strb	r3, [r2, #0]
  hdr->proto = PP_HTONS(ETHTYPE_IP);
   16a20:	70d3      	strb	r3, [r2, #3]
   16a22:	f04f 0e08 	mov.w	lr, #8
    ethernet_output(netif, p, ethsrc_addr, &ethbroadcast, ETHTYPE_ARP);
   16a26:	f640 0306 	movw	r3, #2054	; 0x806
  hdr->proto = PP_HTONS(ETHTYPE_IP);
   16a2a:	f882 e002 	strb.w	lr, [r2, #2]
    ethernet_output(netif, p, ethsrc_addr, ethdst_addr, ETHTYPE_ARP);
   16a2e:	4659      	mov	r1, fp
    ethernet_output(netif, p, ethsrc_addr, &ethbroadcast, ETHTYPE_ARP);
   16a30:	9300      	str	r3, [sp, #0]
    ethernet_output(netif, p, ethsrc_addr, ethdst_addr, ETHTYPE_ARP);
   16a32:	4642      	mov	r2, r8
    ethernet_output(netif, p, ethsrc_addr, &ethbroadcast, ETHTYPE_ARP);
   16a34:	bf0c      	ite	eq
   16a36:	4b08      	ldreq	r3, [pc, #32]	; (16a58 <etharp_output+0x330>)
    ethernet_output(netif, p, ethsrc_addr, ethdst_addr, ETHTYPE_ARP);
   16a38:	4653      	movne	r3, sl
   16a3a:	4628      	mov	r0, r5
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
   16a3c:	444f      	add	r7, r9
    ethernet_output(netif, p, ethsrc_addr, ethdst_addr, ETHTYPE_ARP);
   16a3e:	f004 ff59 	bl	1b8f4 <ethernet_output>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
   16a42:	eb04 04c7 	add.w	r4, r4, r7, lsl #3
  pbuf_free(p);
   16a46:	4658      	mov	r0, fp
   16a48:	f000 fed0 	bl	177ec <pbuf_free>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
   16a4c:	2203      	movs	r2, #3
   16a4e:	4653      	mov	r3, sl
   16a50:	7522      	strb	r2, [r4, #20]
   16a52:	e78d      	b.n	16970 <etharp_output+0x248>
   16a54:	200027c4 	.word	0x200027c4
   16a58:	0002d738 	.word	0x0002d738
   16a5c:	0002d740 	.word	0x0002d740
  p = pbuf_alloc(PBUF_LINK, SIZEOF_ETHARP_HDR, PBUF_RAM);
   16a60:	f44f 7220 	mov.w	r2, #640	; 0x280
   16a64:	211c      	movs	r1, #28
   16a66:	200e      	movs	r0, #14
   16a68:	9302      	str	r3, [sp, #8]
   16a6a:	f000 fd13 	bl	17494 <pbuf_alloc>
   16a6e:	9b02      	ldr	r3, [sp, #8]
  if (p == NULL) {
   16a70:	4682      	mov	sl, r0
   16a72:	469b      	mov	fp, r3
      if (etharp_request(netif, &arp_table[arp_idx].ipaddr) == ERR_OK) {
   16a74:	1d1a      	adds	r2, r3, #4
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
   16a76:	f105 082e 	add.w	r8, r5, #46	; 0x2e
  if (p == NULL) {
   16a7a:	2800      	cmp	r0, #0
   16a7c:	f000 80ec 	beq.w	16c58 <etharp_output+0x530>
  hdr = (struct etharp_hdr *)p->payload;
   16a80:	f8da 3004 	ldr.w	r3, [sl, #4]
   16a84:	9203      	str	r2, [sp, #12]
  hdr->opcode = lwip_htons(opcode);
   16a86:	2001      	movs	r0, #1
  hdr = (struct etharp_hdr *)p->payload;
   16a88:	9302      	str	r3, [sp, #8]
  hdr->opcode = lwip_htons(opcode);
   16a8a:	f7fc fe35 	bl	136f8 <lwip_htons>
   16a8e:	9b02      	ldr	r3, [sp, #8]
  SMEMCPY(&hdr->dhwaddr, hwdst_addr, ETH_HWADDR_LEN);
   16a90:	4975      	ldr	r1, [pc, #468]	; (16c68 <etharp_output+0x540>)
  hdr->opcode = lwip_htons(opcode);
   16a92:	80d8      	strh	r0, [r3, #6]
  SMEMCPY(&hdr->shwaddr, hwsrc_addr, ETH_HWADDR_LEN);
   16a94:	f8d8 0000 	ldr.w	r0, [r8]
   16a98:	6098      	str	r0, [r3, #8]
   16a9a:	f8b8 e004 	ldrh.w	lr, [r8, #4]
  SMEMCPY(&hdr->dhwaddr, hwdst_addr, ETH_HWADDR_LEN);
   16a9e:	6808      	ldr	r0, [r1, #0]
   16aa0:	8889      	ldrh	r1, [r1, #4]
  SMEMCPY(&hdr->shwaddr, hwsrc_addr, ETH_HWADDR_LEN);
   16aa2:	f8a3 e00c 	strh.w	lr, [r3, #12]
  SMEMCPY(&hdr->dhwaddr, hwdst_addr, ETH_HWADDR_LEN);
   16aa6:	f8c3 0012 	str.w	r0, [r3, #18]
   16aaa:	82d9      	strh	r1, [r3, #22]
  IPADDR_WORDALIGNED_COPY_FROM_IP4_ADDR_T(&hdr->sipaddr, ipsrc_addr);
   16aac:	6869      	ldr	r1, [r5, #4]
  IPADDR_WORDALIGNED_COPY_FROM_IP4_ADDR_T(&hdr->dipaddr, ipdst_addr);
   16aae:	9a03      	ldr	r2, [sp, #12]
  IPADDR_WORDALIGNED_COPY_FROM_IP4_ADDR_T(&hdr->sipaddr, ipsrc_addr);
   16ab0:	f8c3 100e 	str.w	r1, [r3, #14]
  IPADDR_WORDALIGNED_COPY_FROM_IP4_ADDR_T(&hdr->dipaddr, ipdst_addr);
   16ab4:	58a2      	ldr	r2, [r4, r2]
   16ab6:	619a      	str	r2, [r3, #24]
  hdr->hwlen = ETH_HWADDR_LEN;
   16ab8:	2106      	movs	r1, #6
  hdr->protolen = sizeof(ip4_addr_t);
   16aba:	2204      	movs	r2, #4
  hdr->hwlen = ETH_HWADDR_LEN;
   16abc:	7119      	strb	r1, [r3, #4]
  hdr->protolen = sizeof(ip4_addr_t);
   16abe:	715a      	strb	r2, [r3, #5]
  hdr->proto = PP_HTONS(ETHTYPE_IP);
   16ac0:	f04f 0e08 	mov.w	lr, #8
  hdr->hwtype = PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET);
   16ac4:	2200      	movs	r2, #0
   16ac6:	2101      	movs	r1, #1
   16ac8:	7059      	strb	r1, [r3, #1]
  hdr->proto = PP_HTONS(ETHTYPE_IP);
   16aca:	f883 e002 	strb.w	lr, [r3, #2]
  hdr->hwtype = PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET);
   16ace:	701a      	strb	r2, [r3, #0]
  hdr->proto = PP_HTONS(ETHTYPE_IP);
   16ad0:	70da      	strb	r2, [r3, #3]
    ethernet_output(netif, p, ethsrc_addr, &ethbroadcast, ETHTYPE_ARP);
   16ad2:	f640 0306 	movw	r3, #2054	; 0x806
   16ad6:	4642      	mov	r2, r8
   16ad8:	4651      	mov	r1, sl
   16ada:	9300      	str	r3, [sp, #0]
   16adc:	4628      	mov	r0, r5
   16ade:	4b63      	ldr	r3, [pc, #396]	; (16c6c <etharp_output+0x544>)
    ethernet_output(netif, p, ethsrc_addr, ethdst_addr, ETHTYPE_ARP);
   16ae0:	f004 ff08 	bl	1b8f4 <ethernet_output>
  pbuf_free(p);
   16ae4:	4650      	mov	r0, sl
   16ae6:	f000 fe81 	bl	177ec <pbuf_free>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
   16aea:	eb09 0207 	add.w	r2, r9, r7
   16aee:	eb04 02c2 	add.w	r2, r4, r2, lsl #3
   16af2:	f10b 030c 	add.w	r3, fp, #12
   16af6:	2103      	movs	r1, #3
   16af8:	4423      	add	r3, r4
   16afa:	7511      	strb	r1, [r2, #20]
   16afc:	e738      	b.n	16970 <etharp_output+0x248>
    if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_BROADCAST) {
   16afe:	8a5b      	ldrh	r3, [r3, #18]
   16b00:	f5b3 7f8e 	cmp.w	r3, #284	; 0x11c
   16b04:	d856      	bhi.n	16bb4 <etharp_output+0x48c>
    } else if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_UNICAST) {
   16b06:	f5b3 7f87 	cmp.w	r3, #270	; 0x10e
   16b0a:	f4ff aeb3 	bcc.w	16874 <etharp_output+0x14c>
   16b0e:	eb07 0347 	add.w	r3, r7, r7, lsl #1
   16b12:	00db      	lsls	r3, r3, #3
      if (etharp_request_dst(netif, &arp_table[arp_idx].ipaddr, &arp_table[arp_idx].ethaddr) == ERR_OK) {
   16b14:	f103 090c 	add.w	r9, r3, #12
  p = pbuf_alloc(PBUF_LINK, SIZEOF_ETHARP_HDR, PBUF_RAM);
   16b18:	f44f 7220 	mov.w	r2, #640	; 0x280
      if (etharp_request_dst(netif, &arp_table[arp_idx].ipaddr, &arp_table[arp_idx].ethaddr) == ERR_OK) {
   16b1c:	3304      	adds	r3, #4
  p = pbuf_alloc(PBUF_LINK, SIZEOF_ETHARP_HDR, PBUF_RAM);
   16b1e:	211c      	movs	r1, #28
   16b20:	200e      	movs	r0, #14
      if (etharp_request_dst(netif, &arp_table[arp_idx].ipaddr, &arp_table[arp_idx].ethaddr) == ERR_OK) {
   16b22:	9302      	str	r3, [sp, #8]
  p = pbuf_alloc(PBUF_LINK, SIZEOF_ETHARP_HDR, PBUF_RAM);
   16b24:	f000 fcb6 	bl	17494 <pbuf_alloc>
      if (etharp_request_dst(netif, &arp_table[arp_idx].ipaddr, &arp_table[arp_idx].ethaddr) == ERR_OK) {
   16b28:	44a1      	add	r9, r4
  if (p == NULL) {
   16b2a:	4683      	mov	fp, r0
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
   16b2c:	f105 0a2e 	add.w	sl, r5, #46	; 0x2e
  if (p == NULL) {
   16b30:	2800      	cmp	r0, #0
   16b32:	f43f aea6 	beq.w	16882 <etharp_output+0x15a>
  hdr = (struct etharp_hdr *)p->payload;
   16b36:	f8db 3004 	ldr.w	r3, [fp, #4]
   16b3a:	9303      	str	r3, [sp, #12]
  hdr->opcode = lwip_htons(opcode);
   16b3c:	2001      	movs	r0, #1
   16b3e:	f7fc fddb 	bl	136f8 <lwip_htons>
   16b42:	9b03      	ldr	r3, [sp, #12]
  SMEMCPY(&hdr->dhwaddr, hwdst_addr, ETH_HWADDR_LEN);
   16b44:	4a48      	ldr	r2, [pc, #288]	; (16c68 <etharp_output+0x540>)
  hdr->opcode = lwip_htons(opcode);
   16b46:	80d8      	strh	r0, [r3, #6]
  SMEMCPY(&hdr->shwaddr, hwsrc_addr, ETH_HWADDR_LEN);
   16b48:	f8da 1000 	ldr.w	r1, [sl]
   16b4c:	6099      	str	r1, [r3, #8]
   16b4e:	f8ba 0004 	ldrh.w	r0, [sl, #4]
  SMEMCPY(&hdr->dhwaddr, hwdst_addr, ETH_HWADDR_LEN);
   16b52:	6811      	ldr	r1, [r2, #0]
   16b54:	8892      	ldrh	r2, [r2, #4]
   16b56:	f8c3 1012 	str.w	r1, [r3, #18]
  SMEMCPY(&hdr->shwaddr, hwsrc_addr, ETH_HWADDR_LEN);
   16b5a:	8198      	strh	r0, [r3, #12]
  SMEMCPY(&hdr->dhwaddr, hwdst_addr, ETH_HWADDR_LEN);
   16b5c:	82da      	strh	r2, [r3, #22]
  IPADDR_WORDALIGNED_COPY_FROM_IP4_ADDR_T(&hdr->sipaddr, ipsrc_addr);
   16b5e:	686a      	ldr	r2, [r5, #4]
   16b60:	f8c3 200e 	str.w	r2, [r3, #14]
  IPADDR_WORDALIGNED_COPY_FROM_IP4_ADDR_T(&hdr->dipaddr, ipdst_addr);
   16b64:	9a02      	ldr	r2, [sp, #8]
   16b66:	58a2      	ldr	r2, [r4, r2]
   16b68:	619a      	str	r2, [r3, #24]
  hdr->hwlen = ETH_HWADDR_LEN;
   16b6a:	2106      	movs	r1, #6
  hdr->protolen = sizeof(ip4_addr_t);
   16b6c:	2204      	movs	r2, #4
  hdr->hwlen = ETH_HWADDR_LEN;
   16b6e:	7119      	strb	r1, [r3, #4]
  hdr->protolen = sizeof(ip4_addr_t);
   16b70:	715a      	strb	r2, [r3, #5]
  if (ip4_addr_islinklocal(ipsrc_addr)) {
   16b72:	88a8      	ldrh	r0, [r5, #4]
  hdr->hwtype = PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET);
   16b74:	2101      	movs	r1, #1
   16b76:	7059      	strb	r1, [r3, #1]
  hdr->proto = PP_HTONS(ETHTYPE_IP);
   16b78:	f04f 0e08 	mov.w	lr, #8
  hdr->hwtype = PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET);
   16b7c:	2200      	movs	r2, #0
  if (ip4_addr_islinklocal(ipsrc_addr)) {
   16b7e:	f64f 61a9 	movw	r1, #65193	; 0xfea9
   16b82:	4288      	cmp	r0, r1
  hdr->proto = PP_HTONS(ETHTYPE_IP);
   16b84:	f883 e002 	strb.w	lr, [r3, #2]
  hdr->hwtype = PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET);
   16b88:	701a      	strb	r2, [r3, #0]
  hdr->proto = PP_HTONS(ETHTYPE_IP);
   16b8a:	70da      	strb	r2, [r3, #3]
    ethernet_output(netif, p, ethsrc_addr, &ethbroadcast, ETHTYPE_ARP);
   16b8c:	f640 0306 	movw	r3, #2054	; 0x806
   16b90:	9300      	str	r3, [sp, #0]
    ethernet_output(netif, p, ethsrc_addr, ethdst_addr, ETHTYPE_ARP);
   16b92:	4652      	mov	r2, sl
    ethernet_output(netif, p, ethsrc_addr, &ethbroadcast, ETHTYPE_ARP);
   16b94:	bf0c      	ite	eq
   16b96:	4b35      	ldreq	r3, [pc, #212]	; (16c6c <etharp_output+0x544>)
    ethernet_output(netif, p, ethsrc_addr, ethdst_addr, ETHTYPE_ARP);
   16b98:	464b      	movne	r3, r9
   16b9a:	4659      	mov	r1, fp
   16b9c:	4628      	mov	r0, r5
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
   16b9e:	4447      	add	r7, r8
    ethernet_output(netif, p, ethsrc_addr, ethdst_addr, ETHTYPE_ARP);
   16ba0:	f004 fea8 	bl	1b8f4 <ethernet_output>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
   16ba4:	eb04 04c7 	add.w	r4, r4, r7, lsl #3
  pbuf_free(p);
   16ba8:	4658      	mov	r0, fp
   16baa:	f000 fe1f 	bl	177ec <pbuf_free>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
   16bae:	2203      	movs	r2, #3
   16bb0:	7522      	strb	r2, [r4, #20]
   16bb2:	e666      	b.n	16882 <etharp_output+0x15a>
  p = pbuf_alloc(PBUF_LINK, SIZEOF_ETHARP_HDR, PBUF_RAM);
   16bb4:	211c      	movs	r1, #28
   16bb6:	f44f 7220 	mov.w	r2, #640	; 0x280
   16bba:	200e      	movs	r0, #14
   16bbc:	f000 fc6a 	bl	17494 <pbuf_alloc>
   16bc0:	eb07 0947 	add.w	r9, r7, r7, lsl #1
   16bc4:	ea4f 09c9 	mov.w	r9, r9, lsl #3
  if (p == NULL) {
   16bc8:	4683      	mov	fp, r0
      if (etharp_request(netif, &arp_table[arp_idx].ipaddr) == ERR_OK) {
   16bca:	f109 0104 	add.w	r1, r9, #4
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
   16bce:	f105 0a2e 	add.w	sl, r5, #46	; 0x2e
  if (p == NULL) {
   16bd2:	2800      	cmp	r0, #0
   16bd4:	d043      	beq.n	16c5e <etharp_output+0x536>
  hdr = (struct etharp_hdr *)p->payload;
   16bd6:	f8db 3004 	ldr.w	r3, [fp, #4]
   16bda:	9103      	str	r1, [sp, #12]
  hdr->opcode = lwip_htons(opcode);
   16bdc:	2001      	movs	r0, #1
  hdr = (struct etharp_hdr *)p->payload;
   16bde:	9302      	str	r3, [sp, #8]
  hdr->opcode = lwip_htons(opcode);
   16be0:	f7fc fd8a 	bl	136f8 <lwip_htons>
   16be4:	9b02      	ldr	r3, [sp, #8]
  SMEMCPY(&hdr->dhwaddr, hwdst_addr, ETH_HWADDR_LEN);
   16be6:	4a20      	ldr	r2, [pc, #128]	; (16c68 <etharp_output+0x540>)
  hdr->opcode = lwip_htons(opcode);
   16be8:	80d8      	strh	r0, [r3, #6]
  SMEMCPY(&hdr->shwaddr, hwsrc_addr, ETH_HWADDR_LEN);
   16bea:	f8da 0000 	ldr.w	r0, [sl]
   16bee:	6098      	str	r0, [r3, #8]
   16bf0:	f8ba e004 	ldrh.w	lr, [sl, #4]
  SMEMCPY(&hdr->dhwaddr, hwdst_addr, ETH_HWADDR_LEN);
   16bf4:	6810      	ldr	r0, [r2, #0]
   16bf6:	8892      	ldrh	r2, [r2, #4]
  SMEMCPY(&hdr->shwaddr, hwsrc_addr, ETH_HWADDR_LEN);
   16bf8:	f8a3 e00c 	strh.w	lr, [r3, #12]
  SMEMCPY(&hdr->dhwaddr, hwdst_addr, ETH_HWADDR_LEN);
   16bfc:	f8c3 0012 	str.w	r0, [r3, #18]
   16c00:	82da      	strh	r2, [r3, #22]
  IPADDR_WORDALIGNED_COPY_FROM_IP4_ADDR_T(&hdr->sipaddr, ipsrc_addr);
   16c02:	686a      	ldr	r2, [r5, #4]
  IPADDR_WORDALIGNED_COPY_FROM_IP4_ADDR_T(&hdr->dipaddr, ipdst_addr);
   16c04:	9903      	ldr	r1, [sp, #12]
  IPADDR_WORDALIGNED_COPY_FROM_IP4_ADDR_T(&hdr->sipaddr, ipsrc_addr);
   16c06:	f8c3 200e 	str.w	r2, [r3, #14]
  IPADDR_WORDALIGNED_COPY_FROM_IP4_ADDR_T(&hdr->dipaddr, ipdst_addr);
   16c0a:	5862      	ldr	r2, [r4, r1]
   16c0c:	619a      	str	r2, [r3, #24]
  hdr->hwlen = ETH_HWADDR_LEN;
   16c0e:	2106      	movs	r1, #6
  hdr->protolen = sizeof(ip4_addr_t);
   16c10:	2204      	movs	r2, #4
  hdr->hwlen = ETH_HWADDR_LEN;
   16c12:	7119      	strb	r1, [r3, #4]
  hdr->protolen = sizeof(ip4_addr_t);
   16c14:	715a      	strb	r2, [r3, #5]
  hdr->proto = PP_HTONS(ETHTYPE_IP);
   16c16:	f04f 0e08 	mov.w	lr, #8
  hdr->hwtype = PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET);
   16c1a:	2200      	movs	r2, #0
   16c1c:	2101      	movs	r1, #1
   16c1e:	7059      	strb	r1, [r3, #1]
  hdr->proto = PP_HTONS(ETHTYPE_IP);
   16c20:	f883 e002 	strb.w	lr, [r3, #2]
  hdr->hwtype = PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET);
   16c24:	701a      	strb	r2, [r3, #0]
  hdr->proto = PP_HTONS(ETHTYPE_IP);
   16c26:	70da      	strb	r2, [r3, #3]
    ethernet_output(netif, p, ethsrc_addr, &ethbroadcast, ETHTYPE_ARP);
   16c28:	f640 0306 	movw	r3, #2054	; 0x806
   16c2c:	4652      	mov	r2, sl
   16c2e:	4659      	mov	r1, fp
   16c30:	9300      	str	r3, [sp, #0]
   16c32:	4628      	mov	r0, r5
   16c34:	4b0d      	ldr	r3, [pc, #52]	; (16c6c <etharp_output+0x544>)
    ethernet_output(netif, p, ethsrc_addr, ethdst_addr, ETHTYPE_ARP);
   16c36:	f004 fe5d 	bl	1b8f4 <ethernet_output>
  pbuf_free(p);
   16c3a:	4658      	mov	r0, fp
   16c3c:	f000 fdd6 	bl	177ec <pbuf_free>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
   16c40:	eb08 0207 	add.w	r2, r8, r7
   16c44:	eb04 02c2 	add.w	r2, r4, r2, lsl #3
   16c48:	f109 090c 	add.w	r9, r9, #12
   16c4c:	2103      	movs	r1, #3
   16c4e:	44a1      	add	r9, r4
   16c50:	7511      	strb	r1, [r2, #20]
   16c52:	e616      	b.n	16882 <etharp_output+0x15a>
  if (p == NULL) {
   16c54:	4653      	mov	r3, sl
   16c56:	e68b      	b.n	16970 <etharp_output+0x248>
   16c58:	330c      	adds	r3, #12
   16c5a:	4423      	add	r3, r4
   16c5c:	e688      	b.n	16970 <etharp_output+0x248>
   16c5e:	f109 090c 	add.w	r9, r9, #12
   16c62:	44a1      	add	r9, r4
   16c64:	e60d      	b.n	16882 <etharp_output+0x15a>
   16c66:	bf00      	nop
   16c68:	0002d740 	.word	0x0002d740
   16c6c:	0002d738 	.word	0x0002d738

00016c70 <etharp_request>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
err_t
etharp_request(struct netif *netif, const ip4_addr_t *ipaddr)
{
   16c70:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  p = pbuf_alloc(PBUF_LINK, SIZEOF_ETHARP_HDR, PBUF_RAM);
   16c74:	f44f 7220 	mov.w	r2, #640	; 0x280
{
   16c78:	b082      	sub	sp, #8
   16c7a:	4606      	mov	r6, r0
   16c7c:	4688      	mov	r8, r1
  p = pbuf_alloc(PBUF_LINK, SIZEOF_ETHARP_HDR, PBUF_RAM);
   16c7e:	200e      	movs	r0, #14
   16c80:	211c      	movs	r1, #28
   16c82:	f000 fc07 	bl	17494 <pbuf_alloc>
  if (p == NULL) {
   16c86:	b390      	cbz	r0, 16cee <etharp_request+0x7e>
   16c88:	4605      	mov	r5, r0
  hdr->opcode = lwip_htons(opcode);
   16c8a:	2001      	movs	r0, #1
  hdr = (struct etharp_hdr *)p->payload;
   16c8c:	686c      	ldr	r4, [r5, #4]
  hdr->opcode = lwip_htons(opcode);
   16c8e:	f7fc fd33 	bl	136f8 <lwip_htons>
   16c92:	f106 072e 	add.w	r7, r6, #46	; 0x2e
   16c96:	80e0      	strh	r0, [r4, #6]
  SMEMCPY(&hdr->shwaddr, hwsrc_addr, ETH_HWADDR_LEN);
   16c98:	683a      	ldr	r2, [r7, #0]
  SMEMCPY(&hdr->dhwaddr, hwdst_addr, ETH_HWADDR_LEN);
   16c9a:	4b16      	ldr	r3, [pc, #88]	; (16cf4 <etharp_request+0x84>)
  SMEMCPY(&hdr->shwaddr, hwsrc_addr, ETH_HWADDR_LEN);
   16c9c:	60a2      	str	r2, [r4, #8]
   16c9e:	88b9      	ldrh	r1, [r7, #4]
  SMEMCPY(&hdr->dhwaddr, hwdst_addr, ETH_HWADDR_LEN);
   16ca0:	681a      	ldr	r2, [r3, #0]
   16ca2:	889b      	ldrh	r3, [r3, #4]
  SMEMCPY(&hdr->shwaddr, hwsrc_addr, ETH_HWADDR_LEN);
   16ca4:	81a1      	strh	r1, [r4, #12]
  SMEMCPY(&hdr->dhwaddr, hwdst_addr, ETH_HWADDR_LEN);
   16ca6:	f8c4 2012 	str.w	r2, [r4, #18]
   16caa:	82e3      	strh	r3, [r4, #22]
  IPADDR_WORDALIGNED_COPY_FROM_IP4_ADDR_T(&hdr->sipaddr, ipsrc_addr);
   16cac:	6873      	ldr	r3, [r6, #4]
   16cae:	f8c4 300e 	str.w	r3, [r4, #14]
  IPADDR_WORDALIGNED_COPY_FROM_IP4_ADDR_T(&hdr->dipaddr, ipdst_addr);
   16cb2:	f8d8 3000 	ldr.w	r3, [r8]
   16cb6:	61a3      	str	r3, [r4, #24]
  hdr->protolen = sizeof(ip4_addr_t);
   16cb8:	2304      	movs	r3, #4
   16cba:	7163      	strb	r3, [r4, #5]
  hdr->hwlen = ETH_HWADDR_LEN;
   16cbc:	2206      	movs	r2, #6
  hdr->hwtype = PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET);
   16cbe:	2300      	movs	r3, #0
  hdr->hwlen = ETH_HWADDR_LEN;
   16cc0:	7122      	strb	r2, [r4, #4]
  hdr->hwtype = PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET);
   16cc2:	7023      	strb	r3, [r4, #0]
  hdr->proto = PP_HTONS(ETHTYPE_IP);
   16cc4:	70e3      	strb	r3, [r4, #3]
  hdr->hwtype = PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET);
   16cc6:	2201      	movs	r2, #1
  hdr->proto = PP_HTONS(ETHTYPE_IP);
   16cc8:	2008      	movs	r0, #8
    ethernet_output(netif, p, ethsrc_addr, &ethbroadcast, ETHTYPE_ARP);
   16cca:	f640 0306 	movw	r3, #2054	; 0x806
  hdr->hwtype = PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET);
   16cce:	7062      	strb	r2, [r4, #1]
  hdr->proto = PP_HTONS(ETHTYPE_IP);
   16cd0:	70a0      	strb	r0, [r4, #2]
    ethernet_output(netif, p, ethsrc_addr, &ethbroadcast, ETHTYPE_ARP);
   16cd2:	463a      	mov	r2, r7
   16cd4:	9300      	str	r3, [sp, #0]
   16cd6:	4629      	mov	r1, r5
   16cd8:	4b07      	ldr	r3, [pc, #28]	; (16cf8 <etharp_request+0x88>)
   16cda:	4630      	mov	r0, r6
    ethernet_output(netif, p, ethsrc_addr, ethdst_addr, ETHTYPE_ARP);
   16cdc:	f004 fe0a 	bl	1b8f4 <ethernet_output>
  pbuf_free(p);
   16ce0:	4628      	mov	r0, r5
   16ce2:	f000 fd83 	bl	177ec <pbuf_free>
  return result;
   16ce6:	2000      	movs	r0, #0
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_request: sending ARP request.\n"));
  return etharp_request_dst(netif, ipaddr, &ethbroadcast);
}
   16ce8:	b002      	add	sp, #8
   16cea:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    return ERR_MEM;
   16cee:	f04f 30ff 	mov.w	r0, #4294967295
   16cf2:	e7f9      	b.n	16ce8 <etharp_request+0x78>
   16cf4:	0002d740 	.word	0x0002d740
   16cf8:	0002d738 	.word	0x0002d738

00016cfc <ip4_addr_isbroadcast_u32>:
{
  ip4_addr_t ipaddr;
  ip4_addr_set_u32(&ipaddr, addr);

  /* all ones (broadcast) or all zeroes (old skool broadcast) */
  if ((~addr == IPADDR_ANY) ||
   16cfc:	1e43      	subs	r3, r0, #1
   16cfe:	3303      	adds	r3, #3
   16d00:	d814      	bhi.n	16d2c <ip4_addr_isbroadcast_u32+0x30>
      (addr == IPADDR_ANY)) {
    return 1;
    /* no broadcast support on this network interface? */
  } else if ((netif->flags & NETIF_FLAG_BROADCAST) == 0) {
   16d02:	f891 3035 	ldrb.w	r3, [r1, #53]	; 0x35
   16d06:	f013 0302 	ands.w	r3, r3, #2
   16d0a:	d00d      	beq.n	16d28 <ip4_addr_isbroadcast_u32+0x2c>
    /* the given address cannot be a broadcast address
     * nor can we check against any broadcast addresses */
    return 0;
    /* address matches network interface address exactly? => no broadcast */
  } else if (addr == ip4_addr_get_u32(netif_ip4_addr(netif))) {
   16d0c:	684b      	ldr	r3, [r1, #4]
   16d0e:	4298      	cmp	r0, r3
   16d10:	d00a      	beq.n	16d28 <ip4_addr_isbroadcast_u32+0x2c>
    return 0;
    /*  on the same (sub) network... */
  } else if (ip4_addr_netcmp(&ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif))
   16d12:	688a      	ldr	r2, [r1, #8]
   16d14:	4043      	eors	r3, r0
   16d16:	4213      	tst	r3, r2
   16d18:	d106      	bne.n	16d28 <ip4_addr_isbroadcast_u32+0x2c>
             /* ...and host identifier bits are all ones? =>... */
             && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
   16d1a:	43d2      	mvns	r2, r2
   16d1c:	ea32 0300 	bics.w	r3, r2, r0
    return 1;
   16d20:	bf0c      	ite	eq
   16d22:	2001      	moveq	r0, #1
   16d24:	2000      	movne	r0, #0
   16d26:	4770      	bx	lr
                 (IPADDR_BROADCAST & ~ip4_addr_get_u32(netif_ip4_netmask(netif))))) {
    /* => network broadcast address */
    return 1;
  } else {
    return 0;
   16d28:	2000      	movs	r0, #0
  }
}
   16d2a:	4770      	bx	lr
    return 1;
   16d2c:	2001      	movs	r0, #1
   16d2e:	4770      	bx	lr

00016d30 <ip4addr_ntoa>:
 * @return pointer to a global static (!) buffer that holds the ASCII
 *         representation of addr
 */
char *
ip4addr_ntoa(const ip4_addr_t *addr)
{
   16d30:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   16d34:	b082      	sub	sp, #8
  u8_t rem;
  u8_t n;
  u8_t i;
  int len = 0;

  s_addr = ip4_addr_get_u32(addr);
   16d36:	ae02      	add	r6, sp, #8
   16d38:	6803      	ldr	r3, [r0, #0]
   16d3a:	f846 3d04 	str.w	r3, [r6, #-4]!

  rp = buf;
   16d3e:	4d2f      	ldr	r5, [pc, #188]	; (16dfc <ip4addr_ntoa+0xcc>)
  ap = (u8_t *)&s_addr;
  for (n = 0; n < 4; n++) {
    i = 0;
    do {
      rem = *ap % (u8_t)10;
   16d40:	4c2f      	ldr	r4, [pc, #188]	; (16e00 <ip4addr_ntoa+0xd0>)
   16d42:	f10d 0c08 	add.w	ip, sp, #8
  int len = 0;
   16d46:	2700      	movs	r7, #0
      *rp++ = inv[i];
    }
    if (len++ >= buflen) {
      return NULL;
    }
    *rp++ = '.';
   16d48:	f04f 0e2e 	mov.w	lr, #46	; 0x2e
   16d4c:	f896 8000 	ldrb.w	r8, [r6]
  rp = buf;
   16d50:	2000      	movs	r0, #0
   16d52:	e000      	b.n	16d56 <ip4addr_ntoa+0x26>
      inv[i++] = (char)('0' + rem);
   16d54:	4610      	mov	r0, r2
      rem = *ap % (u8_t)10;
   16d56:	fba4 3108 	umull	r3, r1, r4, r8
   16d5a:	08c9      	lsrs	r1, r1, #3
   16d5c:	eb01 0381 	add.w	r3, r1, r1, lsl #2
   16d60:	eba8 0343 	sub.w	r3, r8, r3, lsl #1
      inv[i++] = (char)('0' + rem);
   16d64:	f10d 0808 	add.w	r8, sp, #8
   16d68:	4480      	add	r8, r0
   16d6a:	3330      	adds	r3, #48	; 0x30
   16d6c:	f003 03ff 	and.w	r3, r3, #255	; 0xff
   16d70:	1c42      	adds	r2, r0, #1
   16d72:	f808 3c08 	strb.w	r3, [r8, #-8]
   16d76:	b2d2      	uxtb	r2, r2
    } while (*ap);
   16d78:	f001 08ff 	and.w	r8, r1, #255	; 0xff
   16d7c:	2900      	cmp	r1, #0
   16d7e:	d1e9      	bne.n	16d54 <ip4addr_ntoa+0x24>
   16d80:	f806 8b01 	strb.w	r8, [r6], #1
    while (i--) {
   16d84:	b32a      	cbz	r2, 16dd2 <ip4addr_ntoa+0xa2>
      if (len++ >= buflen) {
   16d86:	2f0f      	cmp	r7, #15
   16d88:	f107 0101 	add.w	r1, r7, #1
   16d8c:	dc1d      	bgt.n	16dca <ip4addr_ntoa+0x9a>
    while (i--) {
   16d8e:	1e42      	subs	r2, r0, #1
      *rp++ = inv[i];
   16d90:	702b      	strb	r3, [r5, #0]
    while (i--) {
   16d92:	b2d3      	uxtb	r3, r2
      *rp++ = inv[i];
   16d94:	1c6a      	adds	r2, r5, #1
    while (i--) {
   16d96:	b1f0      	cbz	r0, 16dd6 <ip4addr_ntoa+0xa6>
      if (len++ >= buflen) {
   16d98:	290f      	cmp	r1, #15
   16d9a:	f107 0802 	add.w	r8, r7, #2
   16d9e:	dc14      	bgt.n	16dca <ip4addr_ntoa+0x9a>
      *rp++ = inv[i];
   16da0:	aa02      	add	r2, sp, #8
   16da2:	441a      	add	r2, r3
    while (i--) {
   16da4:	3802      	subs	r0, #2
      *rp++ = inv[i];
   16da6:	f812 2c08 	ldrb.w	r2, [r2, #-8]
   16daa:	706a      	strb	r2, [r5, #1]
    while (i--) {
   16dac:	b2c0      	uxtb	r0, r0
      *rp++ = inv[i];
   16dae:	1caa      	adds	r2, r5, #2
    while (i--) {
   16db0:	b30b      	cbz	r3, 16df6 <ip4addr_ntoa+0xc6>
      if (len++ >= buflen) {
   16db2:	f1b8 0f0f 	cmp.w	r8, #15
   16db6:	f107 0103 	add.w	r1, r7, #3
   16dba:	dc06      	bgt.n	16dca <ip4addr_ntoa+0x9a>
      *rp++ = inv[i];
   16dbc:	ab02      	add	r3, sp, #8
   16dbe:	4403      	add	r3, r0
   16dc0:	1cea      	adds	r2, r5, #3
   16dc2:	f813 3c08 	ldrb.w	r3, [r3, #-8]
   16dc6:	70ab      	strb	r3, [r5, #2]
    while (i--) {
   16dc8:	b128      	cbz	r0, 16dd6 <ip4addr_ntoa+0xa6>
        return NULL;
   16dca:	2000      	movs	r0, #0
}
   16dcc:	b002      	add	sp, #8
   16dce:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    while (i--) {
   16dd2:	462a      	mov	r2, r5
   16dd4:	4639      	mov	r1, r7
    if (len++ >= buflen) {
   16dd6:	290f      	cmp	r1, #15
   16dd8:	f101 0701 	add.w	r7, r1, #1
   16ddc:	dcf5      	bgt.n	16dca <ip4addr_ntoa+0x9a>
  for (n = 0; n < 4; n++) {
   16dde:	4566      	cmp	r6, ip
    *rp++ = '.';
   16de0:	f882 e000 	strb.w	lr, [r2]
   16de4:	f102 0501 	add.w	r5, r2, #1
  for (n = 0; n < 4; n++) {
   16de8:	d1b0      	bne.n	16d4c <ip4addr_ntoa+0x1c>
    ap++;
  }
  *--rp = 0;
  return buf;
   16dea:	4804      	ldr	r0, [pc, #16]	; (16dfc <ip4addr_ntoa+0xcc>)
  *--rp = 0;
   16dec:	2300      	movs	r3, #0
   16dee:	7013      	strb	r3, [r2, #0]
}
   16df0:	b002      	add	sp, #8
   16df2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      if (len++ >= buflen) {
   16df6:	4641      	mov	r1, r8
   16df8:	e7ed      	b.n	16dd6 <ip4addr_ntoa+0xa6>
   16dfa:	bf00      	nop
   16dfc:	200028b8 	.word	0x200028b8
   16e00:	cccccccd 	.word	0xcccccccd

00016e04 <mem_init>:

  LWIP_ASSERT("Sanity check alignment",
              (SIZEOF_STRUCT_MEM & (MEM_ALIGNMENT - 1)) == 0);

  /* align the heap */
  ram = (u8_t *)LWIP_MEM_ALIGN(LWIP_RAM_HEAP_POINTER);
   16e04:	4b0a      	ldr	r3, [pc, #40]	; (16e30 <mem_init+0x2c>)
   16e06:	4a0b      	ldr	r2, [pc, #44]	; (16e34 <mem_init+0x30>)
{
   16e08:	b470      	push	{r4, r5, r6}
  ram = (u8_t *)LWIP_MEM_ALIGN(LWIP_RAM_HEAP_POINTER);
   16e0a:	f023 0303 	bic.w	r3, r3, #3
  return (struct mem *)(void *)&ram[ptr];
   16e0e:	f503 5180 	add.w	r1, r3, #4096	; 0x1000
  /* initialize the start of the heap */
  mem = (struct mem *)(void *)ram;
  mem->next = MEM_SIZE_ALIGNED;
   16e12:	f44f 5680 	mov.w	r6, #4096	; 0x1000
  mem->prev = 0;
  mem->used = 0;
   16e16:	2500      	movs	r5, #0
  /* initialize the end of the heap */
  ram_end = ptr_to_mem(MEM_SIZE_ALIGNED);
  ram_end->used = 1;
   16e18:	2401      	movs	r4, #1
  mem->next = MEM_SIZE_ALIGNED;
   16e1a:	601e      	str	r6, [r3, #0]
  mem->used = 0;
   16e1c:	711d      	strb	r5, [r3, #4]
  ram_end->next = MEM_SIZE_ALIGNED;
   16e1e:	f04f 2010 	mov.w	r0, #268439552	; 0x10001000
  ram_end->used = 1;
   16e22:	710c      	strb	r4, [r1, #4]
  ram_end = ptr_to_mem(MEM_SIZE_ALIGNED);
   16e24:	6051      	str	r1, [r2, #4]
  ram_end->next = MEM_SIZE_ALIGNED;
   16e26:	6008      	str	r0, [r1, #0]
  ram = (u8_t *)LWIP_MEM_ALIGN(LWIP_RAM_HEAP_POINTER);
   16e28:	6013      	str	r3, [r2, #0]
  ram_end->prev = MEM_SIZE_ALIGNED;
  MEM_SANITY();

  /* initialize the lowest-free pointer to the start of the heap */
  lfree = (struct mem *)(void *)ram;
   16e2a:	6093      	str	r3, [r2, #8]
  MEM_STATS_AVAIL(avail, MEM_SIZE_ALIGNED);

  if (sys_mutex_new(&mem_mutex) != ERR_OK) {
    LWIP_ASSERT("failed to create mem_mutex", 0);
  }
}
   16e2c:	bc70      	pop	{r4, r5, r6}
   16e2e:	4770      	bx	lr
   16e30:	20002a8b 	.word	0x20002a8b
   16e34:	200028c8 	.word	0x200028c8

00016e38 <mem_free>:
mem_free(void *rmem)
{
  struct mem *mem;
  LWIP_MEM_FREE_DECL_PROTECT();

  if (rmem == NULL) {
   16e38:	2800      	cmp	r0, #0
   16e3a:	d066      	beq.n	16f0a <mem_free+0xd2>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("mem_free(p == NULL) was called.\n"));
    return;
  }
  if ((((mem_ptr_t)rmem) & (MEM_ALIGNMENT - 1)) != 0) {
   16e3c:	0783      	lsls	r3, r0, #30
   16e3e:	d164      	bne.n	16f0a <mem_free+0xd2>

  /* Get the corresponding struct mem: */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - (SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET));

  if ((u8_t *)mem < ram || (u8_t *)rmem + MIN_SIZE_ALIGNED > (u8_t *)ram_end) {
   16e40:	4b33      	ldr	r3, [pc, #204]	; (16f10 <mem_free+0xd8>)
   16e42:	6819      	ldr	r1, [r3, #0]
  mem = (struct mem *)(void *)((u8_t *)rmem - (SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET));
   16e44:	f1a0 0208 	sub.w	r2, r0, #8
  if ((u8_t *)mem < ram || (u8_t *)rmem + MIN_SIZE_ALIGNED > (u8_t *)ram_end) {
   16e48:	428a      	cmp	r2, r1
   16e4a:	d35e      	bcc.n	16f0a <mem_free+0xd2>
{
   16e4c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  if ((u8_t *)mem < ram || (u8_t *)rmem + MIN_SIZE_ALIGNED > (u8_t *)ram_end) {
   16e50:	685c      	ldr	r4, [r3, #4]
   16e52:	f100 050c 	add.w	r5, r0, #12
   16e56:	42ac      	cmp	r4, r5
   16e58:	d358      	bcc.n	16f0c <mem_free+0xd4>
  mem_overflow_check_element(mem);
#endif
  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();
  /* mem has to be in a used state */
  if (!mem->used) {
   16e5a:	f810 5c04 	ldrb.w	r5, [r0, #-4]
   16e5e:	2d00      	cmp	r5, #0
   16e60:	d054      	beq.n	16f0c <mem_free+0xd4>
  nmem = ptr_to_mem(mem->next);
   16e62:	f830 5c08 	ldrh.w	r5, [r0, #-8]
  if ((mem->next > MEM_SIZE_ALIGNED) || (mem->prev > MEM_SIZE_ALIGNED) ||
   16e66:	f5b5 5f80 	cmp.w	r5, #4096	; 0x1000
   16e6a:	d84f      	bhi.n	16f0c <mem_free+0xd4>
  pmem = ptr_to_mem(mem->prev);
   16e6c:	f830 ec06 	ldrh.w	lr, [r0, #-6]
  if ((mem->next > MEM_SIZE_ALIGNED) || (mem->prev > MEM_SIZE_ALIGNED) ||
   16e70:	f5be 5f80 	cmp.w	lr, #4096	; 0x1000
   16e74:	d84a      	bhi.n	16f0c <mem_free+0xd4>
  return (mem_size_t)((u8_t *)mem - ram);
   16e76:	eba2 0c01 	sub.w	ip, r2, r1
   16e7a:	fa1f fc8c 	uxth.w	ip, ip
  if ((mem->next > MEM_SIZE_ALIGNED) || (mem->prev > MEM_SIZE_ALIGNED) ||
   16e7e:	45f4      	cmp	ip, lr
  return (struct mem *)(void *)&ram[ptr];
   16e80:	eb01 070e 	add.w	r7, r1, lr
  if ((mem->next > MEM_SIZE_ALIGNED) || (mem->prev > MEM_SIZE_ALIGNED) ||
   16e84:	d003      	beq.n	16e8e <mem_free+0x56>
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
   16e86:	f831 600e 	ldrh.w	r6, [r1, lr]
   16e8a:	4566      	cmp	r6, ip
   16e8c:	d13e      	bne.n	16f0c <mem_free+0xd4>
  return (struct mem *)(void *)&ram[ptr];
   16e8e:	194e      	adds	r6, r1, r5
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
   16e90:	42b4      	cmp	r4, r6
   16e92:	d003      	beq.n	16e9c <mem_free+0x64>
      ((nmem != ram_end) && (nmem->prev != rmem_idx))) {
   16e94:	f8b6 8002 	ldrh.w	r8, [r6, #2]
   16e98:	45e0      	cmp	r8, ip
   16e9a:	d137      	bne.n	16f0c <mem_free+0xd4>
  }

  /* mem is now unused. */
  mem->used = 0;

  if (mem < lfree) {
   16e9c:	f8d3 8008 	ldr.w	r8, [r3, #8]
  mem->used = 0;
   16ea0:	f04f 0900 	mov.w	r9, #0
  if (mem < lfree) {
   16ea4:	4542      	cmp	r2, r8
  mem->used = 0;
   16ea6:	f800 9c04 	strb.w	r9, [r0, #-4]
  if (mem < lfree) {
   16eaa:	d201      	bcs.n	16eb0 <mem_free+0x78>
    /* the newly freed struct is now the lowest */
    lfree = mem;
   16eac:	609a      	str	r2, [r3, #8]
   16eae:	4690      	mov	r8, r2
  if (mem != nmem && nmem->used == 0 && (u8_t *)nmem != (u8_t *)ram_end) {
   16eb0:	42b2      	cmp	r2, r6
   16eb2:	d017      	beq.n	16ee4 <mem_free+0xac>
   16eb4:	f896 9004 	ldrb.w	r9, [r6, #4]
   16eb8:	f1b9 0f00 	cmp.w	r9, #0
   16ebc:	d112      	bne.n	16ee4 <mem_free+0xac>
   16ebe:	42b4      	cmp	r4, r6
   16ec0:	d010      	beq.n	16ee4 <mem_free+0xac>
    mem->next = nmem->next;
   16ec2:	8835      	ldrh	r5, [r6, #0]
   16ec4:	f820 5c08 	strh.w	r5, [r0, #-8]
    if (nmem->next != MEM_SIZE_ALIGNED) {
   16ec8:	8834      	ldrh	r4, [r6, #0]
    if (lfree == nmem) {
   16eca:	4546      	cmp	r6, r8
      lfree = mem;
   16ecc:	bf08      	it	eq
   16ece:	609a      	streq	r2, [r3, #8]
    if (nmem->next != MEM_SIZE_ALIGNED) {
   16ed0:	f5b4 5f80 	cmp.w	r4, #4096	; 0x1000
   16ed4:	d006      	beq.n	16ee4 <mem_free+0xac>
      ptr_to_mem(nmem->next)->prev = mem_to_ptr(mem);
   16ed6:	440c      	add	r4, r1
   16ed8:	f8a4 c002 	strh.w	ip, [r4, #2]
   16edc:	f830 ec06 	ldrh.w	lr, [r0, #-6]
   16ee0:	eb01 070e 	add.w	r7, r1, lr
  if (pmem != mem && pmem->used == 0) {
   16ee4:	42ba      	cmp	r2, r7
   16ee6:	d011      	beq.n	16f0c <mem_free+0xd4>
   16ee8:	793e      	ldrb	r6, [r7, #4]
   16eea:	b97e      	cbnz	r6, 16f0c <mem_free+0xd4>
    if (lfree == mem) {
   16eec:	689e      	ldr	r6, [r3, #8]
    pmem->next = mem->next;
   16eee:	803d      	strh	r5, [r7, #0]
    if (lfree == mem) {
   16ef0:	42b2      	cmp	r2, r6
      lfree = pmem;
   16ef2:	bf08      	it	eq
   16ef4:	609f      	streq	r7, [r3, #8]
    if (mem->next != MEM_SIZE_ALIGNED) {
   16ef6:	f830 3c08 	ldrh.w	r3, [r0, #-8]
   16efa:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
   16efe:	d005      	beq.n	16f0c <mem_free+0xd4>
      ptr_to_mem(mem->next)->prev = mem_to_ptr(pmem);
   16f00:	4419      	add	r1, r3
   16f02:	f8a1 e002 	strh.w	lr, [r1, #2]
   16f06:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   16f0a:	4770      	bx	lr
   16f0c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   16f10:	200028c8 	.word	0x200028c8

00016f14 <mem_trim>:
  /* use the FREE_PROTECT here: it protects with sem OR SYS_ARCH_PROTECT */
  LWIP_MEM_FREE_DECL_PROTECT();

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  newsize = (mem_size_t)LWIP_MEM_ALIGN_SIZE(new_size);
   16f14:	1ccb      	adds	r3, r1, #3
   16f16:	f023 0303 	bic.w	r3, r3, #3
   16f1a:	b29b      	uxth	r3, r3
  if (newsize < MIN_SIZE_ALIGNED) {
   16f1c:	2b0b      	cmp	r3, #11
   16f1e:	d93a      	bls.n	16f96 <mem_trim+0x82>
    newsize = MIN_SIZE_ALIGNED;
  }
#if MEM_OVERFLOW_CHECK
  newsize += MEM_SANITY_REGION_BEFORE_ALIGNED + MEM_SANITY_REGION_AFTER_ALIGNED;
#endif
  if ((newsize > MEM_SIZE_ALIGNED) || (newsize < new_size)) {
   16f20:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
   16f24:	d851      	bhi.n	16fca <mem_trim+0xb6>
   16f26:	4299      	cmp	r1, r3
   16f28:	d84f      	bhi.n	16fca <mem_trim+0xb6>
{
   16f2a:	b5f0      	push	{r4, r5, r6, r7, lr}
  }

  LWIP_ASSERT("mem_trim: legal memory", (u8_t *)rmem >= (u8_t *)ram &&
              (u8_t *)rmem < (u8_t *)ram_end);

  if ((u8_t *)rmem < (u8_t *)ram || (u8_t *)rmem >= (u8_t *)ram_end) {
   16f2c:	4d28      	ldr	r5, [pc, #160]	; (16fd0 <mem_trim+0xbc>)
   16f2e:	682a      	ldr	r2, [r5, #0]
   16f30:	4282      	cmp	r2, r0
   16f32:	d82f      	bhi.n	16f94 <mem_trim+0x80>
   16f34:	6869      	ldr	r1, [r5, #4]
   16f36:	4288      	cmp	r0, r1
   16f38:	d22c      	bcs.n	16f94 <mem_trim+0x80>
    MEM_STATS_INC_LOCKED(illegal);
    return rmem;
  }
  /* Get the corresponding struct mem ... */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - (SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET));
   16f3a:	f1a0 0108 	sub.w	r1, r0, #8
  mem_overflow_check_element(mem);
#endif
  /* ... and its offset pointer */
  ptr = mem_to_ptr(mem);

  size = (mem_size_t)((mem_size_t)(mem->next - ptr) - (SIZEOF_STRUCT_MEM + MEM_SANITY_OVERHEAD));
   16f3e:	f830 6c08 	ldrh.w	r6, [r0, #-8]
  return (mem_size_t)((u8_t *)mem - ram);
   16f42:	1a89      	subs	r1, r1, r2
   16f44:	b289      	uxth	r1, r1
  size = (mem_size_t)((mem_size_t)(mem->next - ptr) - (SIZEOF_STRUCT_MEM + MEM_SANITY_OVERHEAD));
   16f46:	f1a6 0408 	sub.w	r4, r6, #8
   16f4a:	1a64      	subs	r4, r4, r1
   16f4c:	b2a4      	uxth	r4, r4
  LWIP_ASSERT("mem_trim can only shrink memory", newsize <= size);
  if (newsize > size) {
   16f4e:	429c      	cmp	r4, r3
   16f50:	d31f      	bcc.n	16f92 <mem_trim+0x7e>
    /* not supported */
    return NULL;
  }
  if (newsize == size) {
   16f52:	d01f      	beq.n	16f94 <mem_trim+0x80>
  return (struct mem *)(void *)&ram[ptr];
   16f54:	eb02 0e06 	add.w	lr, r2, r6

  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();

  mem2 = ptr_to_mem(mem->next);
  if (mem2->used == 0) {
   16f58:	f89e 7004 	ldrb.w	r7, [lr, #4]
   16f5c:	b1ef      	cbz	r7, 16f9a <mem_trim+0x86>
    if (mem2->next != MEM_SIZE_ALIGNED) {
      ptr_to_mem(mem2->next)->prev = ptr2;
    }
    MEM_STATS_DEC_USED(used, (size - newsize));
    /* no need to plug holes, we've already done that */
  } else if (newsize + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED <= size) {
   16f5e:	f103 0714 	add.w	r7, r3, #20
   16f62:	42a7      	cmp	r7, r4
   16f64:	d816      	bhi.n	16f94 <mem_trim+0x80>
     * Old size ('size') must be big enough to contain at least 'newsize' plus a struct mem
     * ('SIZEOF_STRUCT_MEM') with some data ('MIN_SIZE_ALIGNED').
     * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
     *       region that couldn't hold data, but when mem->next gets freed,
     *       the 2 regions would be combined, resulting in more free memory */
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
   16f66:	f101 0408 	add.w	r4, r1, #8
   16f6a:	4423      	add	r3, r4
   16f6c:	b29b      	uxth	r3, r3
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
    mem2 = ptr_to_mem(ptr2);
    if (mem2 < lfree) {
   16f6e:	68af      	ldr	r7, [r5, #8]
  return (struct mem *)(void *)&ram[ptr];
   16f70:	18d4      	adds	r4, r2, r3
    if (mem2 < lfree) {
   16f72:	42a7      	cmp	r7, r4
      lfree = mem2;
   16f74:	bf88      	it	hi
   16f76:	60ac      	strhi	r4, [r5, #8]
    }
    mem2->used = 0;
   16f78:	2500      	movs	r5, #0
   16f7a:	7125      	strb	r5, [r4, #4]
    mem2->next = mem->next;
   16f7c:	52d6      	strh	r6, [r2, r3]
    mem2->prev = ptr;
   16f7e:	8061      	strh	r1, [r4, #2]
    mem->next = ptr2;
   16f80:	f820 3c08 	strh.w	r3, [r0, #-8]
    if (mem2->next != MEM_SIZE_ALIGNED) {
   16f84:	5ad1      	ldrh	r1, [r2, r3]
   16f86:	f5b1 5f80 	cmp.w	r1, #4096	; 0x1000
   16f8a:	d003      	beq.n	16f94 <mem_trim+0x80>
      ptr_to_mem(mem2->next)->prev = ptr2;
   16f8c:	440a      	add	r2, r1
   16f8e:	8053      	strh	r3, [r2, #2]
   16f90:	bdf0      	pop	{r4, r5, r6, r7, pc}
    return NULL;
   16f92:	2000      	movs	r0, #0
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
  return rmem;
}
   16f94:	bdf0      	pop	{r4, r5, r6, r7, pc}
    newsize = MIN_SIZE_ALIGNED;
   16f96:	230c      	movs	r3, #12
   16f98:	e7c5      	b.n	16f26 <mem_trim+0x12>
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
   16f9a:	f101 0708 	add.w	r7, r1, #8
    if (lfree == mem2) {
   16f9e:	68ac      	ldr	r4, [r5, #8]
    next = mem2->next;
   16fa0:	f832 c006 	ldrh.w	ip, [r2, r6]
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
   16fa4:	443b      	add	r3, r7
   16fa6:	b29b      	uxth	r3, r3
    if (lfree == mem2) {
   16fa8:	4574      	cmp	r4, lr
  return (struct mem *)(void *)&ram[ptr];
   16faa:	eb02 0403 	add.w	r4, r2, r3
      lfree = ptr_to_mem(ptr2);
   16fae:	bf08      	it	eq
   16fb0:	60ac      	streq	r4, [r5, #8]
    mem2->used = 0;
   16fb2:	2500      	movs	r5, #0
    mem2->next = next;
   16fb4:	f8a4 c000 	strh.w	ip, [r4]
    mem2->prev = ptr;
   16fb8:	8061      	strh	r1, [r4, #2]
    mem2->used = 0;
   16fba:	7125      	strb	r5, [r4, #4]
    mem->next = ptr2;
   16fbc:	f820 3c08 	strh.w	r3, [r0, #-8]
    if (mem2->next != MEM_SIZE_ALIGNED) {
   16fc0:	8821      	ldrh	r1, [r4, #0]
   16fc2:	f5b1 5f80 	cmp.w	r1, #4096	; 0x1000
   16fc6:	d1e1      	bne.n	16f8c <mem_trim+0x78>
   16fc8:	e7e4      	b.n	16f94 <mem_trim+0x80>
    return NULL;
   16fca:	2000      	movs	r0, #0
   16fcc:	4770      	bx	lr
   16fce:	bf00      	nop
   16fd0:	200028c8 	.word	0x200028c8

00016fd4 <mem_malloc>:
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  u8_t local_mem_free_count = 0;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_ALLOC_DECL_PROTECT();

  if (size_in == 0) {
   16fd4:	2800      	cmp	r0, #0
   16fd6:	d051      	beq.n	1707c <mem_malloc+0xa8>
{
   16fd8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    return NULL;
  }

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  size = (mem_size_t)LWIP_MEM_ALIGN_SIZE(size_in);
   16fdc:	1cc6      	adds	r6, r0, #3
   16fde:	f026 0603 	bic.w	r6, r6, #3
   16fe2:	b2b6      	uxth	r6, r6
  if (size < MIN_SIZE_ALIGNED) {
   16fe4:	2e0b      	cmp	r6, #11
   16fe6:	d927      	bls.n	17038 <mem_malloc+0x64>
    size = MIN_SIZE_ALIGNED;
  }
#if MEM_OVERFLOW_CHECK
  size += MEM_SANITY_REGION_BEFORE_ALIGNED + MEM_SANITY_REGION_AFTER_ALIGNED;
#endif
  if ((size > MEM_SIZE_ALIGNED) || (size < size_in)) {
   16fe8:	f5b6 5f80 	cmp.w	r6, #4096	; 0x1000
   16fec:	d821      	bhi.n	17032 <mem_malloc+0x5e>
   16fee:	42b0      	cmp	r0, r6
   16ff0:	d81f      	bhi.n	17032 <mem_malloc+0x5e>
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

    /* Scan through the heap searching for a free block that is big enough,
     * beginning with the lowest free block.
     */
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
   16ff2:	4f2b      	ldr	r7, [pc, #172]	; (170a0 <mem_malloc+0xcc>)
   16ff4:	f8d7 e008 	ldr.w	lr, [r7, #8]
  return (mem_size_t)((u8_t *)mem - ram);
   16ff8:	6839      	ldr	r1, [r7, #0]
   16ffa:	ebae 0501 	sub.w	r5, lr, r1
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
   16ffe:	b2ab      	uxth	r3, r5
   17000:	f5c6 5c80 	rsb	ip, r6, #4096	; 0x1000
   17004:	4563      	cmp	r3, ip
  return (mem_size_t)((u8_t *)mem - ram);
   17006:	461d      	mov	r5, r3
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
   17008:	d213      	bcs.n	17032 <mem_malloc+0x5e>
        break;
      }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

      if ((!mem->used) &&
          (mem->next - (ptr + SIZEOF_STRUCT_MEM)) >= size) {
   1700a:	f06f 0807 	mvn.w	r8, #7
   1700e:	e006      	b.n	1701e <mem_malloc+0x4a>
   17010:	5acb      	ldrh	r3, [r1, r3]
   17012:	441a      	add	r2, r3
      if ((!mem->used) &&
   17014:	4296      	cmp	r6, r2
   17016:	d911      	bls.n	1703c <mem_malloc+0x68>
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
   17018:	459c      	cmp	ip, r3
          (mem->next - (ptr + SIZEOF_STRUCT_MEM)) >= size) {
   1701a:	461d      	mov	r5, r3
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
   1701c:	d909      	bls.n	17032 <mem_malloc+0x5e>
  return (struct mem *)(void *)&ram[ptr];
   1701e:	18c8      	adds	r0, r1, r3
          (mem->next - (ptr + SIZEOF_STRUCT_MEM)) >= size) {
   17020:	eba8 0203 	sub.w	r2, r8, r3
      if ((!mem->used) &&
   17024:	7904      	ldrb	r4, [r0, #4]
   17026:	2c00      	cmp	r4, #0
   17028:	d0f2      	beq.n	17010 <mem_malloc+0x3c>
   1702a:	5acd      	ldrh	r5, [r1, r3]
   1702c:	462b      	mov	r3, r5
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
   1702e:	459c      	cmp	ip, r3
   17030:	d8f5      	bhi.n	1701e <mem_malloc+0x4a>
    return NULL;
   17032:	2000      	movs	r0, #0
   17034:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    size = MIN_SIZE_ALIGNED;
   17038:	260c      	movs	r6, #12
   1703a:	e7d8      	b.n	16fee <mem_malloc+0x1a>
        /* mem is not used and at least perfect fit is possible:
         * mem->next - (ptr + SIZEOF_STRUCT_MEM) gives us the 'user data size' of mem */

        if (mem->next - (ptr + SIZEOF_STRUCT_MEM) >= (size + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED)) {
   1703c:	f106 0c14 	add.w	ip, r6, #20
   17040:	4562      	cmp	r2, ip
   17042:	d207      	bcs.n	17054 <mem_malloc+0x80>
           * take care of this).
           * -> near fit or exact fit: do not split, no mem2 creation
           * also can't move mem->next directly behind mem, since mem->next
           * will always be used at this point!
           */
          mem->used = 1;
   17044:	2401      	movs	r4, #1
          (mem->next - (ptr + SIZEOF_STRUCT_MEM)) >= size) {
   17046:	461a      	mov	r2, r3
          mem->used = 1;
   17048:	7104      	strb	r4, [r0, #4]
          MEM_STATS_INC_USED(used, mem->next - mem_to_ptr(mem));
        }
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
mem_malloc_adjust_lfree:
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
        if (mem == lfree) {
   1704a:	4586      	cmp	lr, r0
   1704c:	d017      	beq.n	1707e <mem_malloc+0xaa>

#if MEM_OVERFLOW_CHECK
        mem_overflow_init_element(mem, size_in);
#endif
        MEM_SANITY();
        return (u8_t *)mem + SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET;
   1704e:	3008      	adds	r0, #8
   17050:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
          ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + size);
   17054:	f106 0208 	add.w	r2, r6, #8
   17058:	442a      	add	r2, r5
   1705a:	b292      	uxth	r2, r2
  return (struct mem *)(void *)&ram[ptr];
   1705c:	188e      	adds	r6, r1, r2
          mem->used = 1;
   1705e:	f04f 0c01 	mov.w	ip, #1
          mem2->used = 0;
   17062:	7134      	strb	r4, [r6, #4]
          mem2->next = mem->next;
   17064:	528b      	strh	r3, [r1, r2]
          mem2->prev = ptr;
   17066:	8075      	strh	r5, [r6, #2]
          mem->next = ptr2;
   17068:	8002      	strh	r2, [r0, #0]
          mem->used = 1;
   1706a:	f880 c004 	strb.w	ip, [r0, #4]
          if (mem2->next != MEM_SIZE_ALIGNED) {
   1706e:	5a8b      	ldrh	r3, [r1, r2]
   17070:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
   17074:	d0e9      	beq.n	1704a <mem_malloc+0x76>
            ptr_to_mem(mem2->next)->prev = ptr2;
   17076:	440b      	add	r3, r1
   17078:	805a      	strh	r2, [r3, #2]
   1707a:	e7e6      	b.n	1704a <mem_malloc+0x76>
  MEM_STATS_INC(err);
  LWIP_MEM_ALLOC_UNPROTECT();
  sys_mutex_unlock(&mem_mutex);
  LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("mem_malloc: could not allocate %"S16_F" bytes\n", (s16_t)size));
  return NULL;
}
   1707c:	4770      	bx	lr
          while (cur->used && cur != ram_end) {
   1707e:	687c      	ldr	r4, [r7, #4]
   17080:	42a0      	cmp	r0, r4
   17082:	d105      	bne.n	17090 <mem_malloc+0xbc>
   17084:	4603      	mov	r3, r0
          lfree = cur;
   17086:	60bb      	str	r3, [r7, #8]
   17088:	e7e1      	b.n	1704e <mem_malloc+0x7a>
          while (cur->used && cur != ram_end) {
   1708a:	42a3      	cmp	r3, r4
   1708c:	d005      	beq.n	1709a <mem_malloc+0xc6>
   1708e:	881a      	ldrh	r2, [r3, #0]
  return (struct mem *)(void *)&ram[ptr];
   17090:	188b      	adds	r3, r1, r2
          while (cur->used && cur != ram_end) {
   17092:	791a      	ldrb	r2, [r3, #4]
   17094:	2a00      	cmp	r2, #0
   17096:	d1f8      	bne.n	1708a <mem_malloc+0xb6>
   17098:	e7f5      	b.n	17086 <mem_malloc+0xb2>
   1709a:	4623      	mov	r3, r4
   1709c:	e7f3      	b.n	17086 <mem_malloc+0xb2>
   1709e:	bf00      	nop
   170a0:	200028c8 	.word	0x200028c8

000170a4 <mem_calloc>:
 * @param size size of the objects to allocate
 * @return pointer to allocated memory / NULL pointer if there is an error
 */
void *
mem_calloc(mem_size_t count, mem_size_t size)
{
   170a4:	b538      	push	{r3, r4, r5, lr}
  void *p;
  size_t alloc_size = (size_t)count * (size_t)size;
   170a6:	fb01 f400 	mul.w	r4, r1, r0

  if ((size_t)(mem_size_t)alloc_size != alloc_size) {
   170aa:	b2a3      	uxth	r3, r4
   170ac:	429c      	cmp	r4, r3
   170ae:	d10a      	bne.n	170c6 <mem_calloc+0x22>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("mem_calloc: could not allocate %"SZT_F" bytes\n", alloc_size));
    return NULL;
  }

  /* allocate 'count' objects of size 'size' */
  p = mem_malloc((mem_size_t)alloc_size);
   170b0:	4618      	mov	r0, r3
   170b2:	f7ff ff8f 	bl	16fd4 <mem_malloc>
  if (p) {
   170b6:	4605      	mov	r5, r0
   170b8:	b118      	cbz	r0, 170c2 <mem_calloc+0x1e>
    /* zero the memory */
    memset(p, 0, alloc_size);
   170ba:	4622      	mov	r2, r4
   170bc:	2100      	movs	r1, #0
   170be:	f010 fecd 	bl	27e5c <memset>
  }
  return p;
}
   170c2:	4628      	mov	r0, r5
   170c4:	bd38      	pop	{r3, r4, r5, pc}
    return NULL;
   170c6:	2500      	movs	r5, #0
}
   170c8:	4628      	mov	r0, r5
   170ca:	bd38      	pop	{r3, r4, r5, pc}

000170cc <memp_init>:
 *
 * Carves out memp_memory into linked lists for each pool-type.
 */
void
memp_init(void)
{
   170cc:	b5f0      	push	{r4, r5, r6, r7, lr}
   170ce:	4f13      	ldr	r7, [pc, #76]	; (1711c <memp_init+0x50>)
   170d0:	4b13      	ldr	r3, [pc, #76]	; (17120 <memp_init+0x54>)
   170d2:	4d14      	ldr	r5, [pc, #80]	; (17124 <memp_init+0x58>)
   170d4:	f107 0c24 	add.w	ip, r7, #36	; 0x24
   170d8:	f1a7 020c 	sub.w	r2, r7, #12
   170dc:	2404      	movs	r4, #4
  *desc->tab = NULL;
   170de:	f04f 0e00 	mov.w	lr, #0
  memp = (struct memp *)LWIP_MEM_ALIGN(desc->base);
   170e2:	3303      	adds	r3, #3
   170e4:	f023 0303 	bic.w	r3, r3, #3
  *desc->tab = NULL;
   170e8:	f8c5 e000 	str.w	lr, [r5]
  for (i = 0; i < desc->num; ++i) {
   170ec:	b164      	cbz	r4, 17108 <memp_init+0x3c>
   170ee:	2100      	movs	r1, #0
   170f0:	8816      	ldrh	r6, [r2, #0]
   170f2:	460a      	mov	r2, r1
   170f4:	e000      	b.n	170f8 <memp_init+0x2c>
    memp = (struct memp *)(void *)((u8_t *)memp + MEMP_SIZE + desc->size
   170f6:	4603      	mov	r3, r0
  for (i = 0; i < desc->num; ++i) {
   170f8:	3201      	adds	r2, #1
   170fa:	42a2      	cmp	r2, r4
    memp->next = *desc->tab;
   170fc:	6019      	str	r1, [r3, #0]
    memp = (struct memp *)(void *)((u8_t *)memp + MEMP_SIZE + desc->size
   170fe:	eb03 0006 	add.w	r0, r3, r6
    *desc->tab = memp;
   17102:	602b      	str	r3, [r5, #0]
   17104:	4619      	mov	r1, r3
  for (i = 0; i < desc->num; ++i) {
   17106:	d1f6      	bne.n	170f6 <memp_init+0x2a>
  u16_t i;

  /* for every pool: */
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
   17108:	45bc      	cmp	ip, r7
   1710a:	d005      	beq.n	17118 <memp_init+0x4c>
   1710c:	f857 2f04 	ldr.w	r2, [r7, #4]!
   17110:	6895      	ldr	r5, [r2, #8]
   17112:	6853      	ldr	r3, [r2, #4]
   17114:	8854      	ldrh	r4, [r2, #2]
   17116:	e7e4      	b.n	170e2 <memp_init+0x16>
   17118:	bdf0      	pop	{r4, r5, r6, r7, pc}
   1711a:	bf00      	nop
   1711c:	0002d59c 	.word	0x0002d59c
   17120:	20003a9c 	.word	0x20003a9c
   17124:	200028d4 	.word	0x200028d4

00017128 <memp_malloc>:
#else
memp_malloc_fn(memp_t type, const char *file, const int line)
#endif
{
  void *memp;
  LWIP_ERROR("memp_malloc: type < MEMP_MAX", (type < MEMP_MAX), return NULL;);
   17128:	2809      	cmp	r0, #9
   1712a:	d809      	bhi.n	17140 <memp_malloc+0x18>
#if MEMP_OVERFLOW_CHECK >= 2
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK >= 2 */

#if !MEMP_OVERFLOW_CHECK
  memp = do_memp_malloc_pool(memp_pools[type]);
   1712c:	4b05      	ldr	r3, [pc, #20]	; (17144 <memp_malloc+0x1c>)
   1712e:	eb03 0080 	add.w	r0, r3, r0, lsl #2
   17132:	68c3      	ldr	r3, [r0, #12]
   17134:	689b      	ldr	r3, [r3, #8]
  memp = *desc->tab;
   17136:	6818      	ldr	r0, [r3, #0]
  if (memp != NULL) {
   17138:	b118      	cbz	r0, 17142 <memp_malloc+0x1a>
    *desc->tab = memp->next;
   1713a:	6802      	ldr	r2, [r0, #0]
   1713c:	601a      	str	r2, [r3, #0]
   1713e:	4770      	bx	lr
  LWIP_ERROR("memp_malloc: type < MEMP_MAX", (type < MEMP_MAX), return NULL;);
   17140:	2000      	movs	r0, #0
#else
  memp = do_memp_malloc_pool_fn(memp_pools[type], file, line);
#endif

  return memp;
}
   17142:	4770      	bx	lr
   17144:	0002d590 	.word	0x0002d590

00017148 <memp_free>:
{
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  struct memp *old_first;
#endif

  LWIP_ERROR("memp_free: type < MEMP_MAX", (type < MEMP_MAX), return;);
   17148:	2809      	cmp	r0, #9
   1714a:	d808      	bhi.n	1715e <memp_free+0x16>

  if (mem == NULL) {
   1714c:	b139      	cbz	r1, 1715e <memp_free+0x16>

#ifdef LWIP_HOOK_MEMP_AVAILABLE
  old_first = *memp_pools[type]->tab;
#endif

  do_memp_free_pool(memp_pools[type], mem);
   1714e:	4b04      	ldr	r3, [pc, #16]	; (17160 <memp_free+0x18>)
   17150:	eb03 0080 	add.w	r0, r3, r0, lsl #2
   17154:	68c3      	ldr	r3, [r0, #12]
   17156:	689b      	ldr	r3, [r3, #8]
  memp->next = *desc->tab;
   17158:	681a      	ldr	r2, [r3, #0]
   1715a:	600a      	str	r2, [r1, #0]
  *desc->tab = memp;
   1715c:	6019      	str	r1, [r3, #0]
   1715e:	4770      	bx	lr
   17160:	0002d590 	.word	0x0002d590

00017164 <netif_null_output_ip4>:
  LWIP_UNUSED_ARG(netif);
  LWIP_UNUSED_ARG(p);
  LWIP_UNUSED_ARG(ipaddr);

  return ERR_IF;
}
   17164:	f06f 000b 	mvn.w	r0, #11
   17168:	4770      	bx	lr
   1716a:	bf00      	nop

0001716c <netif_init>:
{
   1716c:	4770      	bx	lr
   1716e:	bf00      	nop

00017170 <netif_add>:
{
   17170:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   17174:	b082      	sub	sp, #8
   17176:	9f09      	ldr	r7, [sp, #36]	; 0x24
  LWIP_ERROR("netif_add: invalid netif", netif != NULL, return NULL);
   17178:	2800      	cmp	r0, #0
   1717a:	d07f      	beq.n	1727c <netif_add+0x10c>
  LWIP_ERROR("netif_add: No init function given", init != NULL, return NULL);
   1717c:	2f00      	cmp	r7, #0
   1717e:	d07d      	beq.n	1727c <netif_add+0x10c>
  netif->num = netif_num;
   17180:	f8df 8124 	ldr.w	r8, [pc, #292]	; 172a8 <netif_add+0x138>
  netif->state = state;
   17184:	9d08      	ldr	r5, [sp, #32]
  netif->output = netif_null_output_ip4;
   17186:	f8df e124 	ldr.w	lr, [pc, #292]	; 172ac <netif_add+0x13c>
   1718a:	4606      	mov	r6, r0
    ipaddr = ip_2_ip4(IP4_ADDR_ANY);
   1718c:	4844      	ldr	r0, [pc, #272]	; (172a0 <netif_add+0x130>)
   1718e:	460c      	mov	r4, r1
  netif->num = netif_num;
   17190:	f898 1000 	ldrb.w	r1, [r8]
   17194:	f886 1038 	strb.w	r1, [r6, #56]	; 0x38
    netmask = ip_2_ip4(IP4_ADDR_ANY);
   17198:	2a00      	cmp	r2, #0
   1719a:	bf08      	it	eq
   1719c:	4602      	moveq	r2, r0
  ip_addr_set_zero_ip4(&netif->ip_addr);
   1719e:	2100      	movs	r1, #0
   171a0:	6071      	str	r1, [r6, #4]
  ip_addr_set_zero_ip4(&netif->netmask);
   171a2:	60b1      	str	r1, [r6, #8]
  ip_addr_set_zero_ip4(&netif->gw);
   171a4:	60f1      	str	r1, [r6, #12]
  netif->flags = 0;
   171a6:	f886 1035 	strb.w	r1, [r6, #53]	; 0x35
  memset(netif->client_data, 0, sizeof(netif->client_data));
   171aa:	6271      	str	r1, [r6, #36]	; 0x24
   171ac:	62b1      	str	r1, [r6, #40]	; 0x28
  if (ip4_addr_cmp(netmask, netif_ip4_netmask(netif)) == 0) {
   171ae:	6812      	ldr	r2, [r2, #0]
  netif->state = state;
   171b0:	6235      	str	r5, [r6, #32]
    ipaddr = ip_2_ip4(IP4_ADDR_ANY);
   171b2:	428c      	cmp	r4, r1
   171b4:	bf08      	it	eq
   171b6:	4604      	moveq	r4, r0
  netif->input = input;
   171b8:	9d0a      	ldr	r5, [sp, #40]	; 0x28
  netif->mtu = 0;
   171ba:	85b1      	strh	r1, [r6, #44]	; 0x2c
    gw = ip_2_ip4(IP4_ADDR_ANY);
   171bc:	428b      	cmp	r3, r1
   171be:	bf08      	it	eq
   171c0:	4603      	moveq	r3, r0
  netif->status_callback = NULL;
   171c2:	61f1      	str	r1, [r6, #28]
  netif->input = input;
   171c4:	6135      	str	r5, [r6, #16]
  remove = ip4_addr_isany(ipaddr);
   171c6:	6821      	ldr	r1, [r4, #0]
  netif->output = netif_null_output_ip4;
   171c8:	f8c6 e014 	str.w	lr, [r6, #20]
  if (ip4_addr_cmp(netmask, netif_ip4_netmask(netif)) == 0) {
   171cc:	2a00      	cmp	r2, #0
   171ce:	d059      	beq.n	17284 <netif_add+0x114>
    ip4_addr_set(ip_2_ip4(&netif->netmask), netmask);
   171d0:	60b2      	str	r2, [r6, #8]
  if (ip4_addr_cmp(gw, netif_ip4_gw(netif)) == 0) {
   171d2:	681b      	ldr	r3, [r3, #0]
   171d4:	b103      	cbz	r3, 171d8 <netif_add+0x68>
    ip4_addr_set(ip_2_ip4(&netif->gw), gw);
   171d6:	60f3      	str	r3, [r6, #12]
  if (!remove) {
   171d8:	bb69      	cbnz	r1, 17236 <netif_add+0xc6>
  if (init(netif) != ERR_OK) {
   171da:	4630      	mov	r0, r6
   171dc:	47b8      	blx	r7
   171de:	2800      	cmp	r0, #0
   171e0:	d14c      	bne.n	1727c <netif_add+0x10c>
   171e2:	4f30      	ldr	r7, [pc, #192]	; (172a4 <netif_add+0x134>)
   171e4:	f896 1038 	ldrb.w	r1, [r6, #56]	; 0x38
   171e8:	683c      	ldr	r4, [r7, #0]
      if (netif->num == 255) {
   171ea:	29ff      	cmp	r1, #255	; 0xff
        netif->num = 0;
   171ec:	bf04      	itt	eq
   171ee:	f886 0038 	strbeq.w	r0, [r6, #56]	; 0x38
   171f2:	2100      	moveq	r1, #0
      for (netif2 = netif_list; netif2 != NULL; netif2 = netif2->next) {
   171f4:	b164      	cbz	r4, 17210 <netif_add+0xa0>
        if (netif2->num == netif->num) {
   171f6:	f894 3038 	ldrb.w	r3, [r4, #56]	; 0x38
   171fa:	428b      	cmp	r3, r1
   171fc:	d014      	beq.n	17228 <netif_add+0xb8>
   171fe:	4623      	mov	r3, r4
   17200:	e003      	b.n	1720a <netif_add+0x9a>
   17202:	f893 2038 	ldrb.w	r2, [r3, #56]	; 0x38
   17206:	428a      	cmp	r2, r1
   17208:	d00e      	beq.n	17228 <netif_add+0xb8>
      for (netif2 = netif_list; netif2 != NULL; netif2 = netif2->next) {
   1720a:	681b      	ldr	r3, [r3, #0]
   1720c:	2b00      	cmp	r3, #0
   1720e:	d1f8      	bne.n	17202 <netif_add+0x92>
  if (netif->num == 254) {
   17210:	29fe      	cmp	r1, #254	; 0xfe
   17212:	d00e      	beq.n	17232 <netif_add+0xc2>
    netif_num = (u8_t)(netif->num + 1);
   17214:	1c4b      	adds	r3, r1, #1
   17216:	b2db      	uxtb	r3, r3
  return netif;
   17218:	4630      	mov	r0, r6
  netif->next = netif_list;
   1721a:	6034      	str	r4, [r6, #0]
   1721c:	f888 3000 	strb.w	r3, [r8]
  netif_list = netif;
   17220:	603e      	str	r6, [r7, #0]
}
   17222:	b002      	add	sp, #8
   17224:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
          netif->num++;
   17228:	3101      	adds	r1, #1
   1722a:	b2c9      	uxtb	r1, r1
   1722c:	f886 1038 	strb.w	r1, [r6, #56]	; 0x38
   17230:	e7db      	b.n	171ea <netif_add+0x7a>
    netif_num = 0;
   17232:	2300      	movs	r3, #0
   17234:	e7f0      	b.n	17218 <netif_add+0xa8>
  if (ip4_addr_cmp(ipaddr, netif_ip4_addr(netif)) == 0) {
   17236:	6823      	ldr	r3, [r4, #0]
   17238:	2b00      	cmp	r3, #0
   1723a:	d0ce      	beq.n	171da <netif_add+0x6a>
    ip_addr_copy(*old_addr, *netif_ip_addr4(netif));
   1723c:	2200      	movs	r2, #0
  tcp_netif_ip_addr_changed(old_addr, new_addr);
   1723e:	a901      	add	r1, sp, #4
   17240:	4668      	mov	r0, sp
    ip_addr_copy(*old_addr, *netif_ip_addr4(netif));
   17242:	e88d 000c 	stmia.w	sp, {r2, r3}
  tcp_netif_ip_addr_changed(old_addr, new_addr);
   17246:	f001 fd67 	bl	18d18 <tcp_netif_ip_addr_changed>
  udp_netif_ip_addr_changed(old_addr, new_addr);
   1724a:	a901      	add	r1, sp, #4
   1724c:	4668      	mov	r0, sp
   1724e:	f004 fae5 	bl	1b81c <udp_netif_ip_addr_changed>
  raw_netif_ip_addr_changed(old_addr, new_addr);
   17252:	a901      	add	r1, sp, #4
   17254:	4668      	mov	r0, sp
   17256:	f000 fdd5 	bl	17e04 <raw_netif_ip_addr_changed>
  if (!(netif->flags & NETIF_FLAG_LINK_UP) ||
   1725a:	f896 3035 	ldrb.w	r3, [r6, #53]	; 0x35
    ip4_addr_set(ip_2_ip4(&netif->ip_addr), ipaddr);
   1725e:	6822      	ldr	r2, [r4, #0]
   17260:	6072      	str	r2, [r6, #4]
  if (!(netif->flags & NETIF_FLAG_LINK_UP) ||
   17262:	f003 0105 	and.w	r1, r3, #5
   17266:	2905      	cmp	r1, #5
   17268:	d010      	beq.n	1728c <netif_add+0x11c>
    NETIF_STATUS_CALLBACK(netif);
   1726a:	69f3      	ldr	r3, [r6, #28]
   1726c:	2b00      	cmp	r3, #0
   1726e:	d0b4      	beq.n	171da <netif_add+0x6a>
   17270:	4630      	mov	r0, r6
   17272:	4798      	blx	r3
  if (init(netif) != ERR_OK) {
   17274:	4630      	mov	r0, r6
   17276:	47b8      	blx	r7
   17278:	2800      	cmp	r0, #0
   1727a:	d0b2      	beq.n	171e2 <netif_add+0x72>
  LWIP_ERROR("netif_add: invalid netif", netif != NULL, return NULL);
   1727c:	2000      	movs	r0, #0
}
   1727e:	b002      	add	sp, #8
   17280:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if (ip4_addr_cmp(gw, netif_ip4_gw(netif)) == 0) {
   17284:	681b      	ldr	r3, [r3, #0]
   17286:	2b00      	cmp	r3, #0
   17288:	d1a5      	bne.n	171d6 <netif_add+0x66>
   1728a:	e7a5      	b.n	171d8 <netif_add+0x68>
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
   1728c:	2a00      	cmp	r2, #0
   1728e:	d0ec      	beq.n	1726a <netif_add+0xfa>
    if (netif->flags & (NETIF_FLAG_ETHARP)) {
   17290:	071b      	lsls	r3, r3, #28
   17292:	d5ea      	bpl.n	1726a <netif_add+0xfa>
      etharp_gratuitous(netif);
   17294:	1d31      	adds	r1, r6, #4
   17296:	4630      	mov	r0, r6
   17298:	f7ff fcea 	bl	16c70 <etharp_request>
   1729c:	e7e5      	b.n	1726a <netif_add+0xfa>
   1729e:	bf00      	nop
   172a0:	0002d58c 	.word	0x0002d58c
   172a4:	2000a3d8 	.word	0x2000a3d8
   172a8:	200028fc 	.word	0x200028fc
   172ac:	00017165 	.word	0x00017165

000172b0 <netif_set_addr>:
{
   172b0:	b5f0      	push	{r4, r5, r6, r7, lr}
    ipaddr = IP4_ADDR_ANY4;
   172b2:	4d3d      	ldr	r5, [pc, #244]	; (173a8 <netif_set_addr+0xf8>)
   172b4:	2900      	cmp	r1, #0
   172b6:	bf14      	ite	ne
   172b8:	460e      	movne	r6, r1
   172ba:	462e      	moveq	r6, r5
{
   172bc:	4604      	mov	r4, r0
  remove = ip4_addr_isany(ipaddr);
   172be:	6830      	ldr	r0, [r6, #0]
    netmask = IP4_ADDR_ANY4;
   172c0:	2a00      	cmp	r2, #0
   172c2:	bf14      	ite	ne
   172c4:	4617      	movne	r7, r2
   172c6:	462f      	moveq	r7, r5
{
   172c8:	b083      	sub	sp, #12
    gw = IP4_ADDR_ANY4;
   172ca:	2b00      	cmp	r3, #0
   172cc:	bf18      	it	ne
   172ce:	461d      	movne	r5, r3
  remove = ip4_addr_isany(ipaddr);
   172d0:	b170      	cbz	r0, 172f0 <netif_set_addr+0x40>
  if (ip4_addr_cmp(netmask, netif_ip4_netmask(netif)) == 0) {
   172d2:	683b      	ldr	r3, [r7, #0]
   172d4:	68a2      	ldr	r2, [r4, #8]
   172d6:	4293      	cmp	r3, r2
  remove = ip4_addr_isany(ipaddr);
   172d8:	f04f 0100 	mov.w	r1, #0
  if (ip4_addr_cmp(netmask, netif_ip4_netmask(netif)) == 0) {
   172dc:	d02a      	beq.n	17334 <netif_set_addr+0x84>
    ip4_addr_set(ip_2_ip4(&netif->netmask), netmask);
   172de:	60a3      	str	r3, [r4, #8]
  if (ip4_addr_cmp(gw, netif_ip4_gw(netif)) == 0) {
   172e0:	682b      	ldr	r3, [r5, #0]
   172e2:	68e2      	ldr	r2, [r4, #12]
   172e4:	4293      	cmp	r3, r2
   172e6:	d000      	beq.n	172ea <netif_set_addr+0x3a>
    ip4_addr_set(ip_2_ip4(&netif->gw), gw);
   172e8:	60e3      	str	r3, [r4, #12]
  if (!remove) {
   172ea:	b349      	cbz	r1, 17340 <netif_set_addr+0x90>
}
   172ec:	b003      	add	sp, #12
   172ee:	bdf0      	pop	{r4, r5, r6, r7, pc}
  if (ip4_addr_cmp(ipaddr, netif_ip4_addr(netif)) == 0) {
   172f0:	6863      	ldr	r3, [r4, #4]
   172f2:	b1cb      	cbz	r3, 17328 <netif_set_addr+0x78>
  tcp_netif_ip_addr_changed(old_addr, new_addr);
   172f4:	a901      	add	r1, sp, #4
    *ip_2_ip4(&new_addr) = *ipaddr;
   172f6:	9001      	str	r0, [sp, #4]
  tcp_netif_ip_addr_changed(old_addr, new_addr);
   172f8:	4668      	mov	r0, sp
    ip_addr_copy(*old_addr, *netif_ip_addr4(netif));
   172fa:	9300      	str	r3, [sp, #0]
  tcp_netif_ip_addr_changed(old_addr, new_addr);
   172fc:	f001 fd0c 	bl	18d18 <tcp_netif_ip_addr_changed>
  udp_netif_ip_addr_changed(old_addr, new_addr);
   17300:	a901      	add	r1, sp, #4
   17302:	4668      	mov	r0, sp
   17304:	f004 fa8a 	bl	1b81c <udp_netif_ip_addr_changed>
  raw_netif_ip_addr_changed(old_addr, new_addr);
   17308:	a901      	add	r1, sp, #4
   1730a:	4668      	mov	r0, sp
   1730c:	f000 fd7a 	bl	17e04 <raw_netif_ip_addr_changed>
  if (!(netif->flags & NETIF_FLAG_LINK_UP) ||
   17310:	f894 2035 	ldrb.w	r2, [r4, #53]	; 0x35
    ip4_addr_set(ip_2_ip4(&netif->ip_addr), ipaddr);
   17314:	6833      	ldr	r3, [r6, #0]
   17316:	6063      	str	r3, [r4, #4]
  if (!(netif->flags & NETIF_FLAG_LINK_UP) ||
   17318:	f002 0105 	and.w	r1, r2, #5
   1731c:	2905      	cmp	r1, #5
   1731e:	d039      	beq.n	17394 <netif_set_addr+0xe4>
    NETIF_STATUS_CALLBACK(netif);
   17320:	69e3      	ldr	r3, [r4, #28]
   17322:	b10b      	cbz	r3, 17328 <netif_set_addr+0x78>
   17324:	4620      	mov	r0, r4
   17326:	4798      	blx	r3
  if (ip4_addr_cmp(netmask, netif_ip4_netmask(netif)) == 0) {
   17328:	683b      	ldr	r3, [r7, #0]
   1732a:	68a2      	ldr	r2, [r4, #8]
   1732c:	4293      	cmp	r3, r2
  remove = ip4_addr_isany(ipaddr);
   1732e:	f04f 0101 	mov.w	r1, #1
  if (ip4_addr_cmp(netmask, netif_ip4_netmask(netif)) == 0) {
   17332:	d1d4      	bne.n	172de <netif_set_addr+0x2e>
  if (ip4_addr_cmp(gw, netif_ip4_gw(netif)) == 0) {
   17334:	682b      	ldr	r3, [r5, #0]
   17336:	68e2      	ldr	r2, [r4, #12]
   17338:	4293      	cmp	r3, r2
   1733a:	d1d5      	bne.n	172e8 <netif_set_addr+0x38>
  if (!remove) {
   1733c:	2900      	cmp	r1, #0
   1733e:	d1d5      	bne.n	172ec <netif_set_addr+0x3c>
  if (ip4_addr_cmp(ipaddr, netif_ip4_addr(netif)) == 0) {
   17340:	6863      	ldr	r3, [r4, #4]
   17342:	6832      	ldr	r2, [r6, #0]
   17344:	429a      	cmp	r2, r3
   17346:	d0d1      	beq.n	172ec <netif_set_addr+0x3c>
  tcp_netif_ip_addr_changed(old_addr, new_addr);
   17348:	a901      	add	r1, sp, #4
   1734a:	4668      	mov	r0, sp
    *ip_2_ip4(&new_addr) = *ipaddr;
   1734c:	9201      	str	r2, [sp, #4]
    ip_addr_copy(*old_addr, *netif_ip_addr4(netif));
   1734e:	9300      	str	r3, [sp, #0]
  tcp_netif_ip_addr_changed(old_addr, new_addr);
   17350:	f001 fce2 	bl	18d18 <tcp_netif_ip_addr_changed>
  udp_netif_ip_addr_changed(old_addr, new_addr);
   17354:	a901      	add	r1, sp, #4
   17356:	4668      	mov	r0, sp
   17358:	f004 fa60 	bl	1b81c <udp_netif_ip_addr_changed>
  raw_netif_ip_addr_changed(old_addr, new_addr);
   1735c:	a901      	add	r1, sp, #4
   1735e:	4668      	mov	r0, sp
   17360:	f000 fd50 	bl	17e04 <raw_netif_ip_addr_changed>
  if (!(netif->flags & NETIF_FLAG_LINK_UP) ||
   17364:	f894 2035 	ldrb.w	r2, [r4, #53]	; 0x35
    ip4_addr_set(ip_2_ip4(&netif->ip_addr), ipaddr);
   17368:	6833      	ldr	r3, [r6, #0]
   1736a:	6063      	str	r3, [r4, #4]
  if (!(netif->flags & NETIF_FLAG_LINK_UP) ||
   1736c:	f002 0105 	and.w	r1, r2, #5
   17370:	2905      	cmp	r1, #5
   17372:	d006      	beq.n	17382 <netif_set_addr+0xd2>
    NETIF_STATUS_CALLBACK(netif);
   17374:	69e3      	ldr	r3, [r4, #28]
   17376:	2b00      	cmp	r3, #0
   17378:	d0b8      	beq.n	172ec <netif_set_addr+0x3c>
   1737a:	4620      	mov	r0, r4
   1737c:	4798      	blx	r3
}
   1737e:	b003      	add	sp, #12
   17380:	bdf0      	pop	{r4, r5, r6, r7, pc}
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
   17382:	2b00      	cmp	r3, #0
   17384:	d0f6      	beq.n	17374 <netif_set_addr+0xc4>
    if (netif->flags & (NETIF_FLAG_ETHARP)) {
   17386:	0713      	lsls	r3, r2, #28
   17388:	d5f4      	bpl.n	17374 <netif_set_addr+0xc4>
      etharp_gratuitous(netif);
   1738a:	1d21      	adds	r1, r4, #4
   1738c:	4620      	mov	r0, r4
   1738e:	f7ff fc6f 	bl	16c70 <etharp_request>
   17392:	e7ef      	b.n	17374 <netif_set_addr+0xc4>
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
   17394:	2b00      	cmp	r3, #0
   17396:	d0c3      	beq.n	17320 <netif_set_addr+0x70>
    if (netif->flags & (NETIF_FLAG_ETHARP)) {
   17398:	0712      	lsls	r2, r2, #28
   1739a:	d5c1      	bpl.n	17320 <netif_set_addr+0x70>
      etharp_gratuitous(netif);
   1739c:	1d21      	adds	r1, r4, #4
   1739e:	4620      	mov	r0, r4
   173a0:	f7ff fc66 	bl	16c70 <etharp_request>
   173a4:	e7bc      	b.n	17320 <netif_set_addr+0x70>
   173a6:	bf00      	nop
   173a8:	0002d58c 	.word	0x0002d58c

000173ac <netif_set_default>:
  netif_default = netif;
   173ac:	4b01      	ldr	r3, [pc, #4]	; (173b4 <netif_set_default+0x8>)
   173ae:	6018      	str	r0, [r3, #0]
   173b0:	4770      	bx	lr
   173b2:	bf00      	nop
   173b4:	2000a3dc 	.word	0x2000a3dc

000173b8 <netif_set_up>:
  LWIP_ERROR("netif_set_up: invalid netif", netif != NULL, return);
   173b8:	b1f0      	cbz	r0, 173f8 <netif_set_up+0x40>
{
   173ba:	b510      	push	{r4, lr}
  if (!(netif->flags & NETIF_FLAG_UP)) {
   173bc:	f890 2035 	ldrb.w	r2, [r0, #53]	; 0x35
   173c0:	07d1      	lsls	r1, r2, #31
   173c2:	4604      	mov	r4, r0
   173c4:	d40c      	bmi.n	173e0 <netif_set_up+0x28>
    NETIF_STATUS_CALLBACK(netif);
   173c6:	69c3      	ldr	r3, [r0, #28]
    netif_set_flags(netif, NETIF_FLAG_UP);
   173c8:	f042 0201 	orr.w	r2, r2, #1
   173cc:	f880 2035 	strb.w	r2, [r0, #53]	; 0x35
    NETIF_STATUS_CALLBACK(netif);
   173d0:	b113      	cbz	r3, 173d8 <netif_set_up+0x20>
   173d2:	4798      	blx	r3
   173d4:	f894 2035 	ldrb.w	r2, [r4, #53]	; 0x35
  if (!(netif->flags & NETIF_FLAG_LINK_UP) ||
   173d8:	f002 0305 	and.w	r3, r2, #5
   173dc:	2b05      	cmp	r3, #5
   173de:	d000      	beq.n	173e2 <netif_set_up+0x2a>
   173e0:	bd10      	pop	{r4, pc}
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
   173e2:	6863      	ldr	r3, [r4, #4]
   173e4:	2b00      	cmp	r3, #0
   173e6:	d0fb      	beq.n	173e0 <netif_set_up+0x28>
    if (netif->flags & (NETIF_FLAG_ETHARP)) {
   173e8:	0713      	lsls	r3, r2, #28
   173ea:	d5f9      	bpl.n	173e0 <netif_set_up+0x28>
      etharp_gratuitous(netif);
   173ec:	1d21      	adds	r1, r4, #4
   173ee:	4620      	mov	r0, r4
}
   173f0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      etharp_gratuitous(netif);
   173f4:	f7ff bc3c 	b.w	16c70 <etharp_request>
   173f8:	4770      	bx	lr
   173fa:	bf00      	nop

000173fc <netif_set_link_up>:
  LWIP_ERROR("netif_set_link_up: invalid netif", netif != NULL, return);
   173fc:	b300      	cbz	r0, 17440 <netif_set_link_up+0x44>
{
   173fe:	b510      	push	{r4, lr}
  if (!(netif->flags & NETIF_FLAG_LINK_UP)) {
   17400:	f890 2035 	ldrb.w	r2, [r0, #53]	; 0x35
   17404:	0751      	lsls	r1, r2, #29
   17406:	4604      	mov	r4, r0
   17408:	d500      	bpl.n	1740c <netif_set_link_up+0x10>
   1740a:	bd10      	pop	{r4, pc}
    netif_set_flags(netif, NETIF_FLAG_LINK_UP);
   1740c:	f042 0204 	orr.w	r2, r2, #4
   17410:	f880 2035 	strb.w	r2, [r0, #53]	; 0x35
    dhcp_network_changed(netif);
   17414:	f7fd fb3e 	bl	14a94 <dhcp_network_changed>
    autoip_network_changed(netif);
   17418:	4620      	mov	r0, r4
   1741a:	f004 fc55 	bl	1bcc8 <autoip_network_changed>
  if (!(netif->flags & NETIF_FLAG_LINK_UP) ||
   1741e:	f894 3035 	ldrb.w	r3, [r4, #53]	; 0x35
   17422:	f003 0205 	and.w	r2, r3, #5
   17426:	2a05      	cmp	r2, #5
   17428:	d1ef      	bne.n	1740a <netif_set_link_up+0xe>
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
   1742a:	6862      	ldr	r2, [r4, #4]
   1742c:	2a00      	cmp	r2, #0
   1742e:	d0ec      	beq.n	1740a <netif_set_link_up+0xe>
    if (netif->flags & (NETIF_FLAG_ETHARP)) {
   17430:	071b      	lsls	r3, r3, #28
   17432:	d5ea      	bpl.n	1740a <netif_set_link_up+0xe>
      etharp_gratuitous(netif);
   17434:	1d21      	adds	r1, r4, #4
   17436:	4620      	mov	r0, r4
}
   17438:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      etharp_gratuitous(netif);
   1743c:	f7ff bc18 	b.w	16c70 <etharp_request>
   17440:	4770      	bx	lr
   17442:	bf00      	nop

00017444 <netif_get_by_index>:
{
  struct netif *netif;

  LWIP_ASSERT_CORE_LOCKED();

  if (idx != NETIF_NO_INDEX) {
   17444:	b168      	cbz	r0, 17462 <netif_get_by_index+0x1e>
    NETIF_FOREACH(netif) {
   17446:	4b08      	ldr	r3, [pc, #32]	; (17468 <netif_get_by_index+0x24>)
   17448:	681a      	ldr	r2, [r3, #0]
   1744a:	b912      	cbnz	r2, 17452 <netif_get_by_index+0xe>
   1744c:	e007      	b.n	1745e <netif_get_by_index+0x1a>
   1744e:	6812      	ldr	r2, [r2, #0]
   17450:	b12a      	cbz	r2, 1745e <netif_get_by_index+0x1a>
      if (idx == netif_get_index(netif)) {
   17452:	f892 3038 	ldrb.w	r3, [r2, #56]	; 0x38
   17456:	3301      	adds	r3, #1
   17458:	b2db      	uxtb	r3, r3
   1745a:	4298      	cmp	r0, r3
   1745c:	d1f7      	bne.n	1744e <netif_get_by_index+0xa>
      }
    }
  }

  return NULL;
}
   1745e:	4610      	mov	r0, r2
   17460:	4770      	bx	lr
  return NULL;
   17462:	4602      	mov	r2, r0
}
   17464:	4610      	mov	r0, r2
   17466:	4770      	bx	lr
   17468:	2000a3d8 	.word	0x2000a3d8

0001746c <pbuf_free_ooseq>:
pbuf_free_ooseq(void)
{
  struct tcp_pcb *pcb;
  SYS_ARCH_SET(pbuf_free_ooseq_pending, 0);

  for (pcb = tcp_active_pcbs; NULL != pcb; pcb = pcb->next) {
   1746c:	4a07      	ldr	r2, [pc, #28]	; (1748c <pbuf_free_ooseq+0x20>)
  SYS_ARCH_SET(pbuf_free_ooseq_pending, 0);
   1746e:	4b08      	ldr	r3, [pc, #32]	; (17490 <pbuf_free_ooseq+0x24>)
  for (pcb = tcp_active_pcbs; NULL != pcb; pcb = pcb->next) {
   17470:	6810      	ldr	r0, [r2, #0]
  SYS_ARCH_SET(pbuf_free_ooseq_pending, 0);
   17472:	2200      	movs	r2, #0
   17474:	701a      	strb	r2, [r3, #0]
  for (pcb = tcp_active_pcbs; NULL != pcb; pcb = pcb->next) {
   17476:	b910      	cbnz	r0, 1747e <pbuf_free_ooseq+0x12>
   17478:	e006      	b.n	17488 <pbuf_free_ooseq+0x1c>
   1747a:	68c0      	ldr	r0, [r0, #12]
   1747c:	b120      	cbz	r0, 17488 <pbuf_free_ooseq+0x1c>
    if (pcb->ooseq != NULL) {
   1747e:	6f43      	ldr	r3, [r0, #116]	; 0x74
   17480:	2b00      	cmp	r3, #0
   17482:	d0fa      	beq.n	1747a <pbuf_free_ooseq+0xe>
      /** Free the ooseq pbufs of one PCB only */
      LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free_ooseq: freeing out-of-sequence pbufs\n"));
      tcp_free_ooseq(pcb);
   17484:	f001 bc98 	b.w	18db8 <tcp_free_ooseq>
   17488:	4770      	bx	lr
   1748a:	bf00      	nop
   1748c:	2000a3e8 	.word	0x2000a3e8
   17490:	2000a3e0 	.word	0x2000a3e0

00017494 <pbuf_alloc>:
{
  struct pbuf *p;
  u16_t offset = (u16_t)layer;
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F")\n", length));

  switch (type) {
   17494:	2a41      	cmp	r2, #65	; 0x41
{
   17496:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   1749a:	4614      	mov	r4, r2
   1749c:	4689      	mov	r9, r1
  switch (type) {
   1749e:	d063      	beq.n	17568 <pbuf_alloc+0xd4>
   174a0:	d95b      	bls.n	1755a <pbuf_alloc+0xc6>
   174a2:	f5b2 7fc1 	cmp.w	r2, #386	; 0x182
   174a6:	b287      	uxth	r7, r0
   174a8:	d02b      	beq.n	17502 <pbuf_alloc+0x6e>
   174aa:	f5b2 7f20 	cmp.w	r2, #640	; 0x280
   174ae:	d156      	bne.n	1755e <pbuf_alloc+0xca>
        offset = 0;
      } while (rem_len > 0);
      break;
    }
    case PBUF_RAM: {
      u16_t payload_len = (u16_t)(LWIP_MEM_ALIGN_SIZE(offset) + LWIP_MEM_ALIGN_SIZE(length));
   174b0:	1cfb      	adds	r3, r7, #3
   174b2:	1cca      	adds	r2, r1, #3
   174b4:	f022 0203 	bic.w	r2, r2, #3
   174b8:	f023 0303 	bic.w	r3, r3, #3
   174bc:	4413      	add	r3, r2
   174be:	b29b      	uxth	r3, r3
   174c0:	4605      	mov	r5, r0
      mem_size_t alloc_len = (mem_size_t)(LWIP_MEM_ALIGN_SIZE(SIZEOF_STRUCT_PBUF) + payload_len);

      /* bug #50040: Check for integer overflow when calculating alloc_len */
      if ((payload_len < LWIP_MEM_ALIGN_SIZE(length)) ||
   174c2:	4293      	cmp	r3, r2
      mem_size_t alloc_len = (mem_size_t)(LWIP_MEM_ALIGN_SIZE(SIZEOF_STRUCT_PBUF) + payload_len);
   174c4:	f103 0010 	add.w	r0, r3, #16
   174c8:	b280      	uxth	r0, r0
      if ((payload_len < LWIP_MEM_ALIGN_SIZE(length)) ||
   174ca:	d348      	bcc.n	1755e <pbuf_alloc+0xca>
   174cc:	4282      	cmp	r2, r0
   174ce:	d846      	bhi.n	1755e <pbuf_alloc+0xca>
          (alloc_len < LWIP_MEM_ALIGN_SIZE(length))) {
        return NULL;
      }

      /* If pbuf is to be allocated in RAM, allocate memory for it. */
      p = (struct pbuf *)mem_malloc(alloc_len);
   174d0:	f7ff fd80 	bl	16fd4 <mem_malloc>
      if (p == NULL) {
   174d4:	4680      	mov	r8, r0
   174d6:	2800      	cmp	r0, #0
   174d8:	d043      	beq.n	17562 <pbuf_alloc+0xce>
  p->next = NULL;
   174da:	2100      	movs	r1, #0
        return NULL;
      }
      pbuf_init_alloced_pbuf(p, LWIP_MEM_ALIGN((void *)((u8_t *)p + SIZEOF_STRUCT_PBUF + offset)),
   174dc:	1943      	adds	r3, r0, r5
  p->tot_len = tot_len;
   174de:	460a      	mov	r2, r1
   174e0:	f369 020f 	bfi	r2, r9, #0, #16
  p->type_internal = (u8_t)type;
   174e4:	484a      	ldr	r0, [pc, #296]	; (17610 <pbuf_alloc+0x17c>)
   174e6:	f8c8 000c 	str.w	r0, [r8, #12]
      pbuf_init_alloced_pbuf(p, LWIP_MEM_ALIGN((void *)((u8_t *)p + SIZEOF_STRUCT_PBUF + offset)),
   174ea:	3313      	adds	r3, #19
   174ec:	f023 0303 	bic.w	r3, r3, #3
  p->tot_len = tot_len;
   174f0:	f369 421f 	bfi	r2, r9, #16, #16
  p->next = NULL;
   174f4:	e888 000a 	stmia.w	r8, {r1, r3}
  p->tot_len = tot_len;
   174f8:	f8c8 2008 	str.w	r2, [r8, #8]
      LWIP_ASSERT("pbuf_alloc: erroneous type", 0);
      return NULL;
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F") == %p\n", length, (void *)p));
  return p;
}
   174fc:	4640      	mov	r0, r8
   174fe:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  switch (type) {
   17502:	2600      	movs	r6, #0
  p->type_internal = (u8_t)type;
   17504:	4d43      	ldr	r5, [pc, #268]	; (17614 <pbuf_alloc+0x180>)
  switch (type) {
   17506:	46b0      	mov	r8, r6
        qlen = LWIP_MIN(rem_len, (u16_t)(PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)));
   17508:	f240 54ec 	movw	r4, #1516	; 0x5ec
   1750c:	e009      	b.n	17522 <pbuf_alloc+0x8e>
          last->next = q;
   1750e:	6030      	str	r0, [r6, #0]
        rem_len = (u16_t)(rem_len - qlen);
   17510:	eba9 0303 	sub.w	r3, r9, r3
   17514:	fa1f f983 	uxth.w	r9, r3
        offset = 0;
   17518:	2700      	movs	r7, #0
   1751a:	4606      	mov	r6, r0
      } while (rem_len > 0);
   1751c:	f1b9 0f00 	cmp.w	r9, #0
   17520:	d01f      	beq.n	17562 <pbuf_alloc+0xce>
        q = (struct pbuf *)memp_malloc(MEMP_PBUF_POOL);
   17522:	2009      	movs	r0, #9
   17524:	f7ff fe00 	bl	17128 <memp_malloc>
        qlen = LWIP_MIN(rem_len, (u16_t)(PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)));
   17528:	1cfb      	adds	r3, r7, #3
   1752a:	f023 0303 	bic.w	r3, r3, #3
   1752e:	1ae3      	subs	r3, r4, r3
   17530:	b29b      	uxth	r3, r3
        pbuf_init_alloced_pbuf(q, LWIP_MEM_ALIGN((void *)((u8_t *)q + SIZEOF_STRUCT_PBUF + offset)),
   17532:	4407      	add	r7, r0
   17534:	3713      	adds	r7, #19
        qlen = LWIP_MIN(rem_len, (u16_t)(PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)));
   17536:	454b      	cmp	r3, r9
   17538:	bf28      	it	cs
   1753a:	464b      	movcs	r3, r9
  p->next = NULL;
   1753c:	2200      	movs	r2, #0
        pbuf_init_alloced_pbuf(q, LWIP_MEM_ALIGN((void *)((u8_t *)q + SIZEOF_STRUCT_PBUF + offset)),
   1753e:	f027 0703 	bic.w	r7, r7, #3
        if (q == NULL) {
   17542:	b330      	cbz	r0, 17592 <pbuf_alloc+0xfe>
  p->payload = payload;
   17544:	e880 0084 	stmia.w	r0, {r2, r7}
  p->tot_len = tot_len;
   17548:	f8a0 9008 	strh.w	r9, [r0, #8]
  p->len = len;
   1754c:	8143      	strh	r3, [r0, #10]
  p->type_internal = (u8_t)type;
   1754e:	60c5      	str	r5, [r0, #12]
        if (p == NULL) {
   17550:	f1b8 0f00 	cmp.w	r8, #0
   17554:	d1db      	bne.n	1750e <pbuf_alloc+0x7a>
   17556:	4680      	mov	r8, r0
   17558:	e7da      	b.n	17510 <pbuf_alloc+0x7c>
  switch (type) {
   1755a:	2a01      	cmp	r2, #1
   1755c:	d004      	beq.n	17568 <pbuf_alloc+0xd4>
      return NULL;
   1755e:	f04f 0800 	mov.w	r8, #0
}
   17562:	4640      	mov	r0, r8
   17564:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
pbuf_alloc_reference(void *payload, u16_t length, pbuf_type type)
{
  struct pbuf *p;
  LWIP_ASSERT("invalid pbuf_type", (type == PBUF_REF) || (type == PBUF_ROM));
  /* only allocate memory for the pbuf structure */
  p = (struct pbuf *)memp_malloc(MEMP_PBUF);
   17568:	2008      	movs	r0, #8
   1756a:	f7ff fddd 	bl	17128 <memp_malloc>
  if (p == NULL) {
   1756e:	4680      	mov	r8, r0
   17570:	2800      	cmp	r0, #0
   17572:	d0f6      	beq.n	17562 <pbuf_alloc+0xce>
  p->next = NULL;
   17574:	2300      	movs	r3, #0
  p->ref = 1;
   17576:	2201      	movs	r2, #1
  p->type_internal = (u8_t)type;
   17578:	7304      	strb	r4, [r0, #12]
  p->flags = flags;
   1757a:	7343      	strb	r3, [r0, #13]
  p->if_idx = NETIF_NO_INDEX;
   1757c:	73c3      	strb	r3, [r0, #15]
  p->ref = 1;
   1757e:	7382      	strb	r2, [r0, #14]
  p->tot_len = tot_len;
   17580:	f8a0 9008 	strh.w	r9, [r0, #8]
  p->len = len;
   17584:	f8a0 900a 	strh.w	r9, [r0, #10]
  p->next = NULL;
   17588:	6003      	str	r3, [r0, #0]
  p->payload = payload;
   1758a:	6043      	str	r3, [r0, #4]
}
   1758c:	4640      	mov	r0, r8
   1758e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  SYS_ARCH_SET(pbuf_free_ooseq_pending, 1);
   17592:	4b21      	ldr	r3, [pc, #132]	; (17618 <pbuf_alloc+0x184>)
   17594:	2201      	movs	r2, #1
   17596:	701a      	strb	r2, [r3, #0]
          if (p) {
   17598:	f1b8 0f00 	cmp.w	r8, #0
   1759c:	d0df      	beq.n	1755e <pbuf_alloc+0xca>
     * further protection. */
    SYS_ARCH_PROTECT(old_level);
    /* all pbufs in a chain are referenced at least once */
    LWIP_ASSERT("pbuf_free: p->ref > 0", p->ref > 0);
    /* decrease reference count (number of pointers to pbuf) */
    ref = --(p->ref);
   1759e:	f898 300e 	ldrb.w	r3, [r8, #14]
   175a2:	3b01      	subs	r3, #1
   175a4:	b2db      	uxtb	r3, r3
   175a6:	f888 300e 	strb.w	r3, [r8, #14]
    SYS_ARCH_UNPROTECT(old_level);
    /* this pbuf is no longer referenced to? */
    if (ref == 0) {
   175aa:	2b00      	cmp	r3, #0
   175ac:	d1d7      	bne.n	1755e <pbuf_alloc+0xca>
      q = p->next;
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: deallocating %p\n", (void *)p));
      alloc_src = pbuf_get_allocsrc(p);
#if LWIP_SUPPORT_CUSTOM_PBUF
      /* is this a custom pbuf? */
      if ((p->flags & PBUF_FLAG_IS_CUSTOM) != 0) {
   175ae:	f898 300d 	ldrb.w	r3, [r8, #13]
      q = p->next;
   175b2:	f8d8 4000 	ldr.w	r4, [r8]
      if ((p->flags & PBUF_FLAG_IS_CUSTOM) != 0) {
   175b6:	079b      	lsls	r3, r3, #30
   175b8:	d417      	bmi.n	175ea <pbuf_alloc+0x156>
      alloc_src = pbuf_get_allocsrc(p);
   175ba:	f898 300c 	ldrb.w	r3, [r8, #12]
   175be:	f003 030f 	and.w	r3, r3, #15
        pc->custom_free_function(p);
      } else
#endif /* LWIP_SUPPORT_CUSTOM_PBUF */
      {
        /* is this a pbuf from the pool? */
        if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_MEMP_PBUF_POOL) {
   175c2:	2b02      	cmp	r3, #2
   175c4:	d01a      	beq.n	175fc <pbuf_alloc+0x168>
          memp_free(MEMP_PBUF_POOL, p);
          /* is this a ROM or RAM referencing pbuf? */
        } else if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_MEMP_PBUF) {
   175c6:	2b01      	cmp	r3, #1
   175c8:	d01d      	beq.n	17606 <pbuf_alloc+0x172>
          memp_free(MEMP_PBUF, p);
          /* type == PBUF_RAM */
        } else if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_HEAP) {
   175ca:	b19b      	cbz	r3, 175f4 <pbuf_alloc+0x160>
  while (p != NULL) {
   175cc:	2c00      	cmp	r4, #0
   175ce:	d0c6      	beq.n	1755e <pbuf_alloc+0xca>
    ref = --(p->ref);
   175d0:	7ba3      	ldrb	r3, [r4, #14]
   175d2:	3b01      	subs	r3, #1
   175d4:	b2db      	uxtb	r3, r3
   175d6:	73a3      	strb	r3, [r4, #14]
   175d8:	46a0      	mov	r8, r4
    if (ref == 0) {
   175da:	2b00      	cmp	r3, #0
   175dc:	d1bf      	bne.n	1755e <pbuf_alloc+0xca>
      if ((p->flags & PBUF_FLAG_IS_CUSTOM) != 0) {
   175de:	f898 300d 	ldrb.w	r3, [r8, #13]
      q = p->next;
   175e2:	f8d8 4000 	ldr.w	r4, [r8]
      if ((p->flags & PBUF_FLAG_IS_CUSTOM) != 0) {
   175e6:	079b      	lsls	r3, r3, #30
   175e8:	d5e7      	bpl.n	175ba <pbuf_alloc+0x126>
        pc->custom_free_function(p);
   175ea:	f8d8 3010 	ldr.w	r3, [r8, #16]
   175ee:	4640      	mov	r0, r8
   175f0:	4798      	blx	r3
   175f2:	e7eb      	b.n	175cc <pbuf_alloc+0x138>
          mem_free(p);
   175f4:	4640      	mov	r0, r8
   175f6:	f7ff fc1f 	bl	16e38 <mem_free>
   175fa:	e7e7      	b.n	175cc <pbuf_alloc+0x138>
          memp_free(MEMP_PBUF_POOL, p);
   175fc:	4641      	mov	r1, r8
   175fe:	2009      	movs	r0, #9
   17600:	f7ff fda2 	bl	17148 <memp_free>
   17604:	e7e2      	b.n	175cc <pbuf_alloc+0x138>
          memp_free(MEMP_PBUF, p);
   17606:	4641      	mov	r1, r8
   17608:	2008      	movs	r0, #8
   1760a:	f7ff fd9d 	bl	17148 <memp_free>
   1760e:	e7dd      	b.n	175cc <pbuf_alloc+0x138>
   17610:	00010080 	.word	0x00010080
   17614:	00010082 	.word	0x00010082
   17618:	2000a3e0 	.word	0x2000a3e0

0001761c <pbuf_alloced_custom>:
{
   1761c:	b470      	push	{r4, r5, r6}
  if (LWIP_MEM_ALIGN_SIZE(offset) + length > payload_mem_len) {
   1761e:	3003      	adds	r0, #3
   17620:	f020 0003 	bic.w	r0, r0, #3
{
   17624:	f8bd 5010 	ldrh.w	r5, [sp, #16]
   17628:	9c03      	ldr	r4, [sp, #12]
  if (LWIP_MEM_ALIGN_SIZE(offset) + length > payload_mem_len) {
   1762a:	180e      	adds	r6, r1, r0
   1762c:	42ae      	cmp	r6, r5
   1762e:	d80f      	bhi.n	17650 <pbuf_alloced_custom+0x34>
  if (payload_mem != NULL) {
   17630:	b104      	cbz	r4, 17634 <pbuf_alloced_custom+0x18>
    payload = (u8_t *)payload_mem + LWIP_MEM_ALIGN_SIZE(offset);
   17632:	4404      	add	r4, r0
  pbuf_init_alloced_pbuf(&p->pbuf, payload, length, length, type, PBUF_FLAG_IS_CUSTOM);
   17634:	4618      	mov	r0, r3
  p->flags = flags;
   17636:	2602      	movs	r6, #2
  p->ref = 1;
   17638:	2501      	movs	r5, #1
  p->next = NULL;
   1763a:	2300      	movs	r3, #0
  p->type_internal = (u8_t)type;
   1763c:	7302      	strb	r2, [r0, #12]
  p->flags = flags;
   1763e:	7346      	strb	r6, [r0, #13]
  p->ref = 1;
   17640:	7385      	strb	r5, [r0, #14]
  p->if_idx = NETIF_NO_INDEX;
   17642:	73c3      	strb	r3, [r0, #15]
  p->payload = payload;
   17644:	6044      	str	r4, [r0, #4]
  p->tot_len = tot_len;
   17646:	8101      	strh	r1, [r0, #8]
  p->len = len;
   17648:	8141      	strh	r1, [r0, #10]
  p->next = NULL;
   1764a:	6003      	str	r3, [r0, #0]
}
   1764c:	bc70      	pop	{r4, r5, r6}
   1764e:	4770      	bx	lr
    return NULL;
   17650:	2000      	movs	r0, #0
}
   17652:	bc70      	pop	{r4, r5, r6}
   17654:	4770      	bx	lr
   17656:	bf00      	nop

00017658 <pbuf_realloc>:
{
   17658:	b538      	push	{r3, r4, r5, lr}
  if (new_len >= p->tot_len) {
   1765a:	8903      	ldrh	r3, [r0, #8]
   1765c:	428b      	cmp	r3, r1
   1765e:	d939      	bls.n	176d4 <pbuf_realloc+0x7c>
  while (rem_len > q->len) {
   17660:	8942      	ldrh	r2, [r0, #10]
   17662:	460d      	mov	r5, r1
   17664:	4295      	cmp	r5, r2
  shrink = (u16_t)(p->tot_len - new_len);
   17666:	eba3 0101 	sub.w	r1, r3, r1
   1766a:	4604      	mov	r4, r0
   1766c:	b289      	uxth	r1, r1
  while (rem_len > q->len) {
   1766e:	d801      	bhi.n	17674 <pbuf_realloc+0x1c>
   17670:	e008      	b.n	17684 <pbuf_realloc+0x2c>
   17672:	8923      	ldrh	r3, [r4, #8]
    q->tot_len = (u16_t)(q->tot_len - shrink);
   17674:	1a5b      	subs	r3, r3, r1
   17676:	8123      	strh	r3, [r4, #8]
    q = q->next;
   17678:	6824      	ldr	r4, [r4, #0]
    rem_len = (u16_t)(rem_len - q->len);
   1767a:	1aad      	subs	r5, r5, r2
  while (rem_len > q->len) {
   1767c:	8962      	ldrh	r2, [r4, #10]
    rem_len = (u16_t)(rem_len - q->len);
   1767e:	b2ad      	uxth	r5, r5
  while (rem_len > q->len) {
   17680:	42aa      	cmp	r2, r5
   17682:	d3f6      	bcc.n	17672 <pbuf_realloc+0x1a>
  if (pbuf_match_allocsrc(q, PBUF_TYPE_ALLOC_SRC_MASK_STD_HEAP) && (rem_len != q->len)
   17684:	7b23      	ldrb	r3, [r4, #12]
   17686:	0719      	lsls	r1, r3, #28
   17688:	d104      	bne.n	17694 <pbuf_realloc+0x3c>
   1768a:	4295      	cmp	r5, r2
   1768c:	d002      	beq.n	17694 <pbuf_realloc+0x3c>
      && ((q->flags & PBUF_FLAG_IS_CUSTOM) == 0)
   1768e:	7b63      	ldrb	r3, [r4, #13]
   17690:	079a      	lsls	r2, r3, #30
   17692:	d530      	bpl.n	176f6 <pbuf_realloc+0x9e>
  if (q->next != NULL) {
   17694:	6820      	ldr	r0, [r4, #0]
  q->len = rem_len;
   17696:	8165      	strh	r5, [r4, #10]
  q->tot_len = q->len;
   17698:	8125      	strh	r5, [r4, #8]
  if (q->next != NULL) {
   1769a:	b1c0      	cbz	r0, 176ce <pbuf_realloc+0x76>
    ref = --(p->ref);
   1769c:	7b83      	ldrb	r3, [r0, #14]
   1769e:	3b01      	subs	r3, #1
   176a0:	b2db      	uxtb	r3, r3
   176a2:	7383      	strb	r3, [r0, #14]
    if (ref == 0) {
   176a4:	b99b      	cbnz	r3, 176ce <pbuf_realloc+0x76>
      if ((p->flags & PBUF_FLAG_IS_CUSTOM) != 0) {
   176a6:	7b43      	ldrb	r3, [r0, #13]
      q = p->next;
   176a8:	6805      	ldr	r5, [r0, #0]
      if ((p->flags & PBUF_FLAG_IS_CUSTOM) != 0) {
   176aa:	079b      	lsls	r3, r3, #30
   176ac:	d416      	bmi.n	176dc <pbuf_realloc+0x84>
      alloc_src = pbuf_get_allocsrc(p);
   176ae:	7b03      	ldrb	r3, [r0, #12]
   176b0:	f003 030f 	and.w	r3, r3, #15
        if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_MEMP_PBUF_POOL) {
   176b4:	2b02      	cmp	r3, #2
   176b6:	d014      	beq.n	176e2 <pbuf_realloc+0x8a>
        } else if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_MEMP_PBUF) {
   176b8:	2b01      	cmp	r3, #1
   176ba:	d017      	beq.n	176ec <pbuf_realloc+0x94>
        } else if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_HEAP) {
   176bc:	b15b      	cbz	r3, 176d6 <pbuf_realloc+0x7e>
  while (p != NULL) {
   176be:	b135      	cbz	r5, 176ce <pbuf_realloc+0x76>
    ref = --(p->ref);
   176c0:	7bab      	ldrb	r3, [r5, #14]
   176c2:	3b01      	subs	r3, #1
   176c4:	b2db      	uxtb	r3, r3
   176c6:	73ab      	strb	r3, [r5, #14]
   176c8:	4628      	mov	r0, r5
    if (ref == 0) {
   176ca:	2b00      	cmp	r3, #0
   176cc:	d0eb      	beq.n	176a6 <pbuf_realloc+0x4e>
  q->next = NULL;
   176ce:	2300      	movs	r3, #0
   176d0:	6023      	str	r3, [r4, #0]
   176d2:	bd38      	pop	{r3, r4, r5, pc}
   176d4:	bd38      	pop	{r3, r4, r5, pc}
          mem_free(p);
   176d6:	f7ff fbaf 	bl	16e38 <mem_free>
   176da:	e7f0      	b.n	176be <pbuf_realloc+0x66>
        pc->custom_free_function(p);
   176dc:	6903      	ldr	r3, [r0, #16]
   176de:	4798      	blx	r3
   176e0:	e7ed      	b.n	176be <pbuf_realloc+0x66>
          memp_free(MEMP_PBUF_POOL, p);
   176e2:	4601      	mov	r1, r0
   176e4:	2009      	movs	r0, #9
   176e6:	f7ff fd2f 	bl	17148 <memp_free>
   176ea:	e7e8      	b.n	176be <pbuf_realloc+0x66>
          memp_free(MEMP_PBUF, p);
   176ec:	4601      	mov	r1, r0
   176ee:	2008      	movs	r0, #8
   176f0:	f7ff fd2a 	bl	17148 <memp_free>
   176f4:	e7e3      	b.n	176be <pbuf_realloc+0x66>
    q = (struct pbuf *)mem_trim(q, (mem_size_t)(((u8_t *)q->payload - (u8_t *)q) + rem_len));
   176f6:	6863      	ldr	r3, [r4, #4]
   176f8:	1b1b      	subs	r3, r3, r4
   176fa:	18e9      	adds	r1, r5, r3
   176fc:	4620      	mov	r0, r4
   176fe:	b289      	uxth	r1, r1
   17700:	f7ff fc08 	bl	16f14 <mem_trim>
   17704:	4604      	mov	r4, r0
   17706:	e7c5      	b.n	17694 <pbuf_realloc+0x3c>

00017708 <pbuf_add_header>:
  if ((p == NULL) || (header_size_increment > 0xFFFF)) {
   17708:	b158      	cbz	r0, 17722 <pbuf_add_header+0x1a>
   1770a:	f5b1 3f80 	cmp.w	r1, #65536	; 0x10000
   1770e:	d208      	bcs.n	17722 <pbuf_add_header+0x1a>
  if (header_size_increment == 0) {
   17710:	b909      	cbnz	r1, 17716 <pbuf_add_header+0xe>
    return 0;
   17712:	4608      	mov	r0, r1
   17714:	4770      	bx	lr
  if ((u16_t)(increment_magnitude + p->tot_len) < increment_magnitude) {
   17716:	8903      	ldrh	r3, [r0, #8]
  increment_magnitude = (u16_t)header_size_increment;
   17718:	b28a      	uxth	r2, r1
  if ((u16_t)(increment_magnitude + p->tot_len) < increment_magnitude) {
   1771a:	4413      	add	r3, r2
   1771c:	b29b      	uxth	r3, r3
   1771e:	429a      	cmp	r2, r3
   17720:	d901      	bls.n	17726 <pbuf_add_header+0x1e>
    return 1;
   17722:	2001      	movs	r0, #1
   17724:	4770      	bx	lr
{
   17726:	b430      	push	{r4, r5}
  if (type_internal & PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS) {
   17728:	f990 400c 	ldrsb.w	r4, [r0, #12]
   1772c:	2c00      	cmp	r4, #0
   1772e:	db02      	blt.n	17736 <pbuf_add_header+0x2e>
    return 1;
   17730:	2001      	movs	r0, #1
}
   17732:	bc30      	pop	{r4, r5}
   17734:	4770      	bx	lr
    payload = (u8_t *)p->payload - header_size_increment;
   17736:	6844      	ldr	r4, [r0, #4]
    if ((u8_t *)payload < (u8_t *)p + SIZEOF_STRUCT_PBUF) {
   17738:	f100 0510 	add.w	r5, r0, #16
    payload = (u8_t *)p->payload - header_size_increment;
   1773c:	1a61      	subs	r1, r4, r1
    if ((u8_t *)payload < (u8_t *)p + SIZEOF_STRUCT_PBUF) {
   1773e:	42a9      	cmp	r1, r5
   17740:	d3f6      	bcc.n	17730 <pbuf_add_header+0x28>
  p->len = (u16_t)(p->len + increment_magnitude);
   17742:	8944      	ldrh	r4, [r0, #10]
  p->payload = payload;
   17744:	6041      	str	r1, [r0, #4]
  p->len = (u16_t)(p->len + increment_magnitude);
   17746:	4422      	add	r2, r4
  p->tot_len = (u16_t)(p->tot_len + increment_magnitude);
   17748:	8103      	strh	r3, [r0, #8]
  p->len = (u16_t)(p->len + increment_magnitude);
   1774a:	8142      	strh	r2, [r0, #10]
  return 0;
   1774c:	2000      	movs	r0, #0
   1774e:	e7f0      	b.n	17732 <pbuf_add_header+0x2a>

00017750 <pbuf_remove_header>:
  if ((p == NULL) || (header_size_decrement > 0xFFFF)) {
   17750:	b198      	cbz	r0, 1777a <pbuf_remove_header+0x2a>
   17752:	f5b1 3f80 	cmp.w	r1, #65536	; 0x10000
   17756:	d210      	bcs.n	1777a <pbuf_remove_header+0x2a>
  if (header_size_decrement == 0) {
   17758:	b189      	cbz	r1, 1777e <pbuf_remove_header+0x2e>
  LWIP_ERROR("increment_magnitude <= p->len", (increment_magnitude <= p->len), return 1;);
   1775a:	8943      	ldrh	r3, [r0, #10]
  increment_magnitude = (u16_t)header_size_decrement;
   1775c:	b28a      	uxth	r2, r1
  LWIP_ERROR("increment_magnitude <= p->len", (increment_magnitude <= p->len), return 1;);
   1775e:	429a      	cmp	r2, r3
   17760:	d80b      	bhi.n	1777a <pbuf_remove_header+0x2a>
{
   17762:	b430      	push	{r4, r5}
  p->payload = (u8_t *)p->payload + header_size_decrement;
   17764:	6845      	ldr	r5, [r0, #4]
  p->tot_len = (u16_t)(p->tot_len - increment_magnitude);
   17766:	8904      	ldrh	r4, [r0, #8]
  p->len = (u16_t)(p->len - increment_magnitude);
   17768:	1a9b      	subs	r3, r3, r2
  p->payload = (u8_t *)p->payload + header_size_decrement;
   1776a:	4429      	add	r1, r5
  p->tot_len = (u16_t)(p->tot_len - increment_magnitude);
   1776c:	1aa2      	subs	r2, r4, r2
  p->len = (u16_t)(p->len - increment_magnitude);
   1776e:	8143      	strh	r3, [r0, #10]
  p->payload = (u8_t *)p->payload + header_size_decrement;
   17770:	6041      	str	r1, [r0, #4]
  p->tot_len = (u16_t)(p->tot_len - increment_magnitude);
   17772:	8102      	strh	r2, [r0, #8]
}
   17774:	bc30      	pop	{r4, r5}
  return 0;
   17776:	2000      	movs	r0, #0
}
   17778:	4770      	bx	lr
    return 1;
   1777a:	2001      	movs	r0, #1
   1777c:	4770      	bx	lr
    return 0;
   1777e:	4608      	mov	r0, r1
   17780:	4770      	bx	lr
   17782:	bf00      	nop

00017784 <pbuf_header_force>:
  if (header_size_increment < 0) {
   17784:	2900      	cmp	r1, #0
{
   17786:	b430      	push	{r4, r5}
  if (header_size_increment < 0) {
   17788:	db04      	blt.n	17794 <pbuf_header_force+0x10>
  if ((p == NULL) || (header_size_increment > 0xFFFF)) {
   1778a:	b358      	cbz	r0, 177e4 <pbuf_header_force+0x60>
  if (header_size_increment == 0) {
   1778c:	b991      	cbnz	r1, 177b4 <pbuf_header_force+0x30>
  return 0;
   1778e:	2000      	movs	r0, #0
}
   17790:	bc30      	pop	{r4, r5}
   17792:	4770      	bx	lr
  if ((p == NULL) || (header_size_decrement > 0xFFFF)) {
   17794:	b330      	cbz	r0, 177e4 <pbuf_header_force+0x60>
    return pbuf_remove_header(p, (size_t) - header_size_increment);
   17796:	4249      	negs	r1, r1
  LWIP_ERROR("increment_magnitude <= p->len", (increment_magnitude <= p->len), return 1;);
   17798:	8943      	ldrh	r3, [r0, #10]
  increment_magnitude = (u16_t)header_size_decrement;
   1779a:	b28a      	uxth	r2, r1
  LWIP_ERROR("increment_magnitude <= p->len", (increment_magnitude <= p->len), return 1;);
   1779c:	429a      	cmp	r2, r3
   1779e:	d821      	bhi.n	177e4 <pbuf_header_force+0x60>
  p->payload = (u8_t *)p->payload + header_size_decrement;
   177a0:	6845      	ldr	r5, [r0, #4]
  p->tot_len = (u16_t)(p->tot_len - increment_magnitude);
   177a2:	8904      	ldrh	r4, [r0, #8]
  p->len = (u16_t)(p->len - increment_magnitude);
   177a4:	1a9b      	subs	r3, r3, r2
  p->payload = (u8_t *)p->payload + header_size_decrement;
   177a6:	4429      	add	r1, r5
  p->tot_len = (u16_t)(p->tot_len - increment_magnitude);
   177a8:	1aa2      	subs	r2, r4, r2
  p->len = (u16_t)(p->len - increment_magnitude);
   177aa:	8143      	strh	r3, [r0, #10]
  p->payload = (u8_t *)p->payload + header_size_decrement;
   177ac:	6041      	str	r1, [r0, #4]
  p->tot_len = (u16_t)(p->tot_len - increment_magnitude);
   177ae:	8102      	strh	r2, [r0, #8]
  return 0;
   177b0:	2000      	movs	r0, #0
   177b2:	e7ed      	b.n	17790 <pbuf_header_force+0xc>
  if ((u16_t)(increment_magnitude + p->tot_len) < increment_magnitude) {
   177b4:	8903      	ldrh	r3, [r0, #8]
  increment_magnitude = (u16_t)header_size_increment;
   177b6:	b28a      	uxth	r2, r1
  if ((u16_t)(increment_magnitude + p->tot_len) < increment_magnitude) {
   177b8:	4413      	add	r3, r2
   177ba:	b29b      	uxth	r3, r3
   177bc:	429a      	cmp	r2, r3
   177be:	d811      	bhi.n	177e4 <pbuf_header_force+0x60>
  if (type_internal & PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS) {
   177c0:	f990 400c 	ldrsb.w	r4, [r0, #12]
   177c4:	2c00      	cmp	r4, #0
   177c6:	db07      	blt.n	177d8 <pbuf_header_force+0x54>
      payload = (u8_t *)p->payload - header_size_increment;
   177c8:	6844      	ldr	r4, [r0, #4]
   177ca:	1a61      	subs	r1, r4, r1
  p->len = (u16_t)(p->len + increment_magnitude);
   177cc:	8944      	ldrh	r4, [r0, #10]
  p->payload = payload;
   177ce:	6041      	str	r1, [r0, #4]
  p->len = (u16_t)(p->len + increment_magnitude);
   177d0:	4422      	add	r2, r4
  p->tot_len = (u16_t)(p->tot_len + increment_magnitude);
   177d2:	8103      	strh	r3, [r0, #8]
  p->len = (u16_t)(p->len + increment_magnitude);
   177d4:	8142      	strh	r2, [r0, #10]
   177d6:	e7da      	b.n	1778e <pbuf_header_force+0xa>
    payload = (u8_t *)p->payload - header_size_increment;
   177d8:	6845      	ldr	r5, [r0, #4]
    if ((u8_t *)payload < (u8_t *)p + SIZEOF_STRUCT_PBUF) {
   177da:	f100 0410 	add.w	r4, r0, #16
    payload = (u8_t *)p->payload - header_size_increment;
   177de:	1a69      	subs	r1, r5, r1
    if ((u8_t *)payload < (u8_t *)p + SIZEOF_STRUCT_PBUF) {
   177e0:	42a1      	cmp	r1, r4
   177e2:	d2f3      	bcs.n	177cc <pbuf_header_force+0x48>
    return 1;
   177e4:	2001      	movs	r0, #1
}
   177e6:	bc30      	pop	{r4, r5}
   177e8:	4770      	bx	lr
   177ea:	bf00      	nop

000177ec <pbuf_free>:
{
   177ec:	b538      	push	{r3, r4, r5, lr}
  if (p == NULL) {
   177ee:	b378      	cbz	r0, 17850 <pbuf_free+0x64>
    ref = --(p->ref);
   177f0:	7b85      	ldrb	r5, [r0, #14]
   177f2:	3d01      	subs	r5, #1
   177f4:	b2ed      	uxtb	r5, r5
   177f6:	7385      	strb	r5, [r0, #14]
    if (ref == 0) {
   177f8:	b18d      	cbz	r5, 1781e <pbuf_free+0x32>
   177fa:	e029      	b.n	17850 <pbuf_free+0x64>
      alloc_src = pbuf_get_allocsrc(p);
   177fc:	7b03      	ldrb	r3, [r0, #12]
   177fe:	f003 030f 	and.w	r3, r3, #15
        if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_MEMP_PBUF_POOL) {
   17802:	2b02      	cmp	r3, #2
   17804:	d01a      	beq.n	1783c <pbuf_free+0x50>
        } else if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_MEMP_PBUF) {
   17806:	2b01      	cmp	r3, #1
   17808:	d01d      	beq.n	17846 <pbuf_free+0x5a>
        } else if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_HEAP) {
   1780a:	b1a3      	cbz	r3, 17836 <pbuf_free+0x4a>
        } else {
          /* @todo: support freeing other types */
          LWIP_ASSERT("invalid pbuf type", 0);
        }
      }
      count++;
   1780c:	3501      	adds	r5, #1
   1780e:	b2ed      	uxtb	r5, r5
  while (p != NULL) {
   17810:	b17c      	cbz	r4, 17832 <pbuf_free+0x46>
    ref = --(p->ref);
   17812:	7ba3      	ldrb	r3, [r4, #14]
   17814:	3b01      	subs	r3, #1
   17816:	b2db      	uxtb	r3, r3
   17818:	73a3      	strb	r3, [r4, #14]
   1781a:	4620      	mov	r0, r4
    if (ref == 0) {
   1781c:	b94b      	cbnz	r3, 17832 <pbuf_free+0x46>
      if ((p->flags & PBUF_FLAG_IS_CUSTOM) != 0) {
   1781e:	7b43      	ldrb	r3, [r0, #13]
      q = p->next;
   17820:	6804      	ldr	r4, [r0, #0]
      if ((p->flags & PBUF_FLAG_IS_CUSTOM) != 0) {
   17822:	079b      	lsls	r3, r3, #30
   17824:	d5ea      	bpl.n	177fc <pbuf_free+0x10>
        pc->custom_free_function(p);
   17826:	6903      	ldr	r3, [r0, #16]
      count++;
   17828:	3501      	adds	r5, #1
        pc->custom_free_function(p);
   1782a:	4798      	blx	r3
      count++;
   1782c:	b2ed      	uxtb	r5, r5
  while (p != NULL) {
   1782e:	2c00      	cmp	r4, #0
   17830:	d1ef      	bne.n	17812 <pbuf_free+0x26>
    }
  }
  PERF_STOP("pbuf_free");
  /* return number of de-allocated pbufs */
  return count;
}
   17832:	4628      	mov	r0, r5
   17834:	bd38      	pop	{r3, r4, r5, pc}
          mem_free(p);
   17836:	f7ff faff 	bl	16e38 <mem_free>
   1783a:	e7e7      	b.n	1780c <pbuf_free+0x20>
          memp_free(MEMP_PBUF_POOL, p);
   1783c:	4601      	mov	r1, r0
   1783e:	2009      	movs	r0, #9
   17840:	f7ff fc82 	bl	17148 <memp_free>
   17844:	e7e2      	b.n	1780c <pbuf_free+0x20>
          memp_free(MEMP_PBUF, p);
   17846:	4601      	mov	r1, r0
   17848:	2008      	movs	r0, #8
   1784a:	f7ff fc7d 	bl	17148 <memp_free>
   1784e:	e7dd      	b.n	1780c <pbuf_free+0x20>
    return 0;
   17850:	2500      	movs	r5, #0
}
   17852:	4628      	mov	r0, r5
   17854:	bd38      	pop	{r3, r4, r5, pc}
   17856:	bf00      	nop

00017858 <pbuf_clen>:
pbuf_clen(const struct pbuf *p)
{
  u16_t len;

  len = 0;
  while (p != NULL) {
   17858:	b138      	cbz	r0, 1786a <pbuf_clen+0x12>
   1785a:	2300      	movs	r3, #0
    ++len;
    p = p->next;
   1785c:	6800      	ldr	r0, [r0, #0]
    ++len;
   1785e:	3301      	adds	r3, #1
   17860:	b29b      	uxth	r3, r3
  while (p != NULL) {
   17862:	2800      	cmp	r0, #0
   17864:	d1fa      	bne.n	1785c <pbuf_clen+0x4>
  }
  return len;
}
   17866:	4618      	mov	r0, r3
   17868:	4770      	bx	lr
  len = 0;
   1786a:	4603      	mov	r3, r0
   1786c:	e7fb      	b.n	17866 <pbuf_clen+0xe>
   1786e:	bf00      	nop

00017870 <pbuf_ref>:
 */
void
pbuf_ref(struct pbuf *p)
{
  /* pbuf given? */
  if (p != NULL) {
   17870:	b110      	cbz	r0, 17878 <pbuf_ref+0x8>
    SYS_ARCH_SET(p->ref, (LWIP_PBUF_REF_T)(p->ref + 1));
   17872:	7b83      	ldrb	r3, [r0, #14]
   17874:	3301      	adds	r3, #1
   17876:	7383      	strb	r3, [r0, #14]
   17878:	4770      	bx	lr
   1787a:	bf00      	nop

0001787c <pbuf_cat>:
void
pbuf_cat(struct pbuf *h, struct pbuf *t)
{
  struct pbuf *p;

  LWIP_ERROR("(h != NULL) && (t != NULL) (programmer violates API)",
   1787c:	b198      	cbz	r0, 178a6 <pbuf_cat+0x2a>
   1787e:	b191      	cbz	r1, 178a6 <pbuf_cat+0x2a>
             ((h != NULL) && (t != NULL)), return;);

  /* proceed to last pbuf of chain */
  for (p = h; p->next != NULL; p = p->next) {
   17880:	6802      	ldr	r2, [r0, #0]
{
   17882:	b430      	push	{r4, r5}
  for (p = h; p->next != NULL; p = p->next) {
   17884:	b90a      	cbnz	r2, 1788a <pbuf_cat+0xe>
   17886:	e00f      	b.n	178a8 <pbuf_cat+0x2c>
   17888:	4622      	mov	r2, r4
    /* add total length of second chain to all totals of first chain */
    p->tot_len = (u16_t)(p->tot_len + t->tot_len);
   1788a:	8903      	ldrh	r3, [r0, #8]
   1788c:	890d      	ldrh	r5, [r1, #8]
  for (p = h; p->next != NULL; p = p->next) {
   1788e:	6814      	ldr	r4, [r2, #0]
    p->tot_len = (u16_t)(p->tot_len + t->tot_len);
   17890:	442b      	add	r3, r5
   17892:	8103      	strh	r3, [r0, #8]
   17894:	4610      	mov	r0, r2
  for (p = h; p->next != NULL; p = p->next) {
   17896:	2c00      	cmp	r4, #0
   17898:	d1f6      	bne.n	17888 <pbuf_cat+0xc>
  /* chain last pbuf of head (p) with first of tail (t) */
  p->next = t;
  /* p->next now references t, but the caller will drop its reference to t,
   * so netto there is no change to the reference count of t.
   */
}
   1789a:	bc30      	pop	{r4, r5}
  p->tot_len = (u16_t)(p->tot_len + t->tot_len);
   1789c:	8908      	ldrh	r0, [r1, #8]
   1789e:	8913      	ldrh	r3, [r2, #8]
  p->next = t;
   178a0:	6011      	str	r1, [r2, #0]
  p->tot_len = (u16_t)(p->tot_len + t->tot_len);
   178a2:	4403      	add	r3, r0
   178a4:	8113      	strh	r3, [r2, #8]
}
   178a6:	4770      	bx	lr
  for (p = h; p->next != NULL; p = p->next) {
   178a8:	4602      	mov	r2, r0
   178aa:	e7f6      	b.n	1789a <pbuf_cat+0x1e>

000178ac <pbuf_chain>:
  LWIP_ERROR("(h != NULL) && (t != NULL) (programmer violates API)",
   178ac:	b1b8      	cbz	r0, 178de <pbuf_chain+0x32>
   178ae:	b1a9      	cbz	r1, 178dc <pbuf_chain+0x30>
  for (p = h; p->next != NULL; p = p->next) {
   178b0:	6802      	ldr	r2, [r0, #0]
 * The ->ref field of the first pbuf of the tail chain is adjusted.
 *
 */
void
pbuf_chain(struct pbuf *h, struct pbuf *t)
{
   178b2:	b430      	push	{r4, r5}
  for (p = h; p->next != NULL; p = p->next) {
   178b4:	b90a      	cbnz	r2, 178ba <pbuf_chain+0xe>
   178b6:	e018      	b.n	178ea <pbuf_chain+0x3e>
   178b8:	4622      	mov	r2, r4
    p->tot_len = (u16_t)(p->tot_len + t->tot_len);
   178ba:	8903      	ldrh	r3, [r0, #8]
   178bc:	890d      	ldrh	r5, [r1, #8]
  for (p = h; p->next != NULL; p = p->next) {
   178be:	6814      	ldr	r4, [r2, #0]
    p->tot_len = (u16_t)(p->tot_len + t->tot_len);
   178c0:	442b      	add	r3, r5
   178c2:	8103      	strh	r3, [r0, #8]
   178c4:	4610      	mov	r0, r2
  for (p = h; p->next != NULL; p = p->next) {
   178c6:	2c00      	cmp	r4, #0
   178c8:	d1f6      	bne.n	178b8 <pbuf_chain+0xc>
  p->tot_len = (u16_t)(p->tot_len + t->tot_len);
   178ca:	8913      	ldrh	r3, [r2, #8]
   178cc:	8908      	ldrh	r0, [r1, #8]
  p->next = t;
   178ce:	6011      	str	r1, [r2, #0]
  p->tot_len = (u16_t)(p->tot_len + t->tot_len);
   178d0:	4403      	add	r3, r0
   178d2:	8113      	strh	r3, [r2, #8]
  pbuf_cat(h, t);
  /* t is now referenced by h */
  pbuf_ref(t);
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_chain: %p references %p\n", (void *)h, (void *)t));
}
   178d4:	bc30      	pop	{r4, r5}
    SYS_ARCH_SET(p->ref, (LWIP_PBUF_REF_T)(p->ref + 1));
   178d6:	7b8b      	ldrb	r3, [r1, #14]
   178d8:	3301      	adds	r3, #1
   178da:	738b      	strb	r3, [r1, #14]
}
   178dc:	4770      	bx	lr
  if (p != NULL) {
   178de:	2900      	cmp	r1, #0
   178e0:	d0fc      	beq.n	178dc <pbuf_chain+0x30>
    SYS_ARCH_SET(p->ref, (LWIP_PBUF_REF_T)(p->ref + 1));
   178e2:	7b8b      	ldrb	r3, [r1, #14]
   178e4:	3301      	adds	r3, #1
   178e6:	738b      	strb	r3, [r1, #14]
   178e8:	4770      	bx	lr
  for (p = h; p->next != NULL; p = p->next) {
   178ea:	4602      	mov	r2, r0
   178ec:	e7ed      	b.n	178ca <pbuf_chain+0x1e>
   178ee:	bf00      	nop

000178f0 <pbuf_copy>:

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy(%p, %p)\n",
              (const void *)p_to, (const void *)p_from));

  /* is the target big enough to hold the source? */
  LWIP_ERROR("pbuf_copy: target not big enough to hold source", ((p_to != NULL) &&
   178f0:	2800      	cmp	r0, #0
   178f2:	d04d      	beq.n	17990 <pbuf_copy+0xa0>
{
   178f4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   178f8:	460d      	mov	r5, r1
  LWIP_ERROR("pbuf_copy: target not big enough to hold source", ((p_to != NULL) &&
   178fa:	2900      	cmp	r1, #0
   178fc:	d044      	beq.n	17988 <pbuf_copy+0x98>
   178fe:	8902      	ldrh	r2, [r0, #8]
   17900:	890b      	ldrh	r3, [r1, #8]
   17902:	429a      	cmp	r2, r3
   17904:	4606      	mov	r6, r0
   17906:	d33f      	bcc.n	17988 <pbuf_copy+0x98>
   17908:	2700      	movs	r7, #0
   1790a:	894c      	ldrh	r4, [r1, #10]
   1790c:	46b8      	mov	r8, r7
             (p_from != NULL) && (p_to->tot_len >= p_from->tot_len)), return ERR_ARG;);

  /* iterate through pbuf chain */
  do {
    /* copy one part of the original chain */
    if ((p_to->len - offset_to) >= (p_from->len - offset_from)) {
   1790e:	8973      	ldrh	r3, [r6, #10]
      len = p_from->len - offset_from;
    } else {
      /* current p_from does not fit into current p_to */
      len = p_to->len - offset_to;
    }
    MEMCPY((u8_t *)p_to->payload + offset_to, (u8_t *)p_from->payload + offset_from, len);
   17910:	6869      	ldr	r1, [r5, #4]
   17912:	6870      	ldr	r0, [r6, #4]
    if ((p_to->len - offset_to) >= (p_from->len - offset_from)) {
   17914:	1be2      	subs	r2, r4, r7
   17916:	eba3 0408 	sub.w	r4, r3, r8
   1791a:	4294      	cmp	r4, r2
   1791c:	bf28      	it	cs
   1791e:	4614      	movcs	r4, r2
    MEMCPY((u8_t *)p_to->payload + offset_to, (u8_t *)p_from->payload + offset_from, len);
   17920:	4440      	add	r0, r8
   17922:	4439      	add	r1, r7
   17924:	4622      	mov	r2, r4
   17926:	f010 f99b 	bl	27c60 <memcpy>
    offset_to += len;
    offset_from += len;
    LWIP_ASSERT("offset_to <= p_to->len", offset_to <= p_to->len);
    LWIP_ASSERT("offset_from <= p_from->len", offset_from <= p_from->len);
    if (offset_from >= p_from->len) {
   1792a:	896b      	ldrh	r3, [r5, #10]
    offset_from += len;
   1792c:	4427      	add	r7, r4
    if (offset_from >= p_from->len) {
   1792e:	429f      	cmp	r7, r3
      /* on to next p_from (if any) */
      offset_from = 0;
      p_from = p_from->next;
    }
    if (offset_to == p_to->len) {
   17930:	8973      	ldrh	r3, [r6, #10]
      p_from = p_from->next;
   17932:	bf28      	it	cs
   17934:	682d      	ldrcs	r5, [r5, #0]
    offset_to += len;
   17936:	44a0      	add	r8, r4
      offset_from = 0;
   17938:	bf28      	it	cs
   1793a:	2700      	movcs	r7, #0
    if (offset_to == p_to->len) {
   1793c:	4598      	cmp	r8, r3
   1793e:	d00d      	beq.n	1795c <pbuf_copy+0x6c>
      offset_to = 0;
      p_to = p_to->next;
      LWIP_ERROR("p_to != NULL", (p_to != NULL) || (p_from == NULL), return ERR_ARG;);
    }

    if ((p_from != NULL) && (p_from->len == p_from->tot_len)) {
   17940:	b195      	cbz	r5, 17968 <pbuf_copy+0x78>
   17942:	896c      	ldrh	r4, [r5, #10]
   17944:	892b      	ldrh	r3, [r5, #8]
   17946:	429c      	cmp	r4, r3
   17948:	d015      	beq.n	17976 <pbuf_copy+0x86>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
                 (p_from->next == NULL), return ERR_VAL;);
    }
    if ((p_to != NULL) && (p_to->len == p_to->tot_len)) {
   1794a:	8932      	ldrh	r2, [r6, #8]
   1794c:	8973      	ldrh	r3, [r6, #10]
   1794e:	429a      	cmp	r2, r3
   17950:	d1dd      	bne.n	1790e <pbuf_copy+0x1e>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
   17952:	6833      	ldr	r3, [r6, #0]
   17954:	b993      	cbnz	r3, 1797c <pbuf_copy+0x8c>
                 (p_to->next == NULL), return ERR_VAL;);
    }
  } while (p_from);
   17956:	b15d      	cbz	r5, 17970 <pbuf_copy+0x80>
   17958:	896c      	ldrh	r4, [r5, #10]
   1795a:	e7d8      	b.n	1790e <pbuf_copy+0x1e>
      p_to = p_to->next;
   1795c:	6836      	ldr	r6, [r6, #0]
      LWIP_ERROR("p_to != NULL", (p_to != NULL) || (p_from == NULL), return ERR_ARG;);
   1795e:	b18e      	cbz	r6, 17984 <pbuf_copy+0x94>
      offset_to = 0;
   17960:	f04f 0800 	mov.w	r8, #0
    if ((p_from != NULL) && (p_from->len == p_from->tot_len)) {
   17964:	2d00      	cmp	r5, #0
   17966:	d1ec      	bne.n	17942 <pbuf_copy+0x52>
    if ((p_to != NULL) && (p_to->len == p_to->tot_len)) {
   17968:	8932      	ldrh	r2, [r6, #8]
   1796a:	8973      	ldrh	r3, [r6, #10]
   1796c:	429a      	cmp	r2, r3
   1796e:	d0f0      	beq.n	17952 <pbuf_copy+0x62>
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy: end of chain reached.\n"));
  return ERR_OK;
   17970:	4628      	mov	r0, r5
   17972:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
   17976:	682b      	ldr	r3, [r5, #0]
   17978:	2b00      	cmp	r3, #0
   1797a:	d0e6      	beq.n	1794a <pbuf_copy+0x5a>
   1797c:	f06f 0005 	mvn.w	r0, #5
   17980:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      LWIP_ERROR("p_to != NULL", (p_to != NULL) || (p_from == NULL), return ERR_ARG;);
   17984:	2d00      	cmp	r5, #0
   17986:	d0f3      	beq.n	17970 <pbuf_copy+0x80>
  LWIP_ERROR("pbuf_copy: target not big enough to hold source", ((p_to != NULL) &&
   17988:	f06f 000f 	mvn.w	r0, #15
   1798c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   17990:	f06f 000f 	mvn.w	r0, #15
}
   17994:	4770      	bx	lr
   17996:	bf00      	nop

00017998 <pbuf_copy_partial>:
 * @param offset offset into the packet buffer from where to begin copying len bytes
 * @return the number of bytes copied, or 0 on failure
 */
u16_t
pbuf_copy_partial(const struct pbuf *buf, void *dataptr, u16_t len, u16_t offset)
{
   17998:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  const struct pbuf *p;
  u16_t left = 0;
  u16_t buf_copy_len;
  u16_t copied_total = 0;

  LWIP_ERROR("pbuf_copy_partial: invalid buf", (buf != NULL), return 0;);
   1799c:	4607      	mov	r7, r0
   1799e:	b350      	cbz	r0, 179f6 <pbuf_copy_partial+0x5e>
   179a0:	460e      	mov	r6, r1
  LWIP_ERROR("pbuf_copy_partial: invalid dataptr", (dataptr != NULL), return 0;);
   179a2:	b361      	cbz	r1, 179fe <pbuf_copy_partial+0x66>
   179a4:	4615      	mov	r5, r2

  /* Note some systems use byte copy if dataptr or one of the pbuf payload pointers are unaligned. */
  for (p = buf; len != 0 && p != NULL; p = p->next) {
   179a6:	b362      	cbz	r2, 17a02 <pbuf_copy_partial+0x6a>
   179a8:	f04f 0800 	mov.w	r8, #0
      buf_copy_len = (u16_t)(p->len - offset);
      if (buf_copy_len > len) {
        buf_copy_len = len;
      }
      /* copy the necessary parts of the buffer */
      MEMCPY(&((char *)dataptr)[left], &((char *)p->payload)[offset], buf_copy_len);
   179ac:	eb06 0008 	add.w	r0, r6, r8
    if ((offset != 0) && (offset >= p->len)) {
   179b0:	897a      	ldrh	r2, [r7, #10]
   179b2:	b153      	cbz	r3, 179ca <pbuf_copy_partial+0x32>
   179b4:	429a      	cmp	r2, r3
      offset = (u16_t)(offset - p->len);
   179b6:	eba3 0102 	sub.w	r1, r3, r2
    if ((offset != 0) && (offset >= p->len)) {
   179ba:	d806      	bhi.n	179ca <pbuf_copy_partial+0x32>
  for (p = buf; len != 0 && p != NULL; p = p->next) {
   179bc:	683f      	ldr	r7, [r7, #0]
      offset = (u16_t)(offset - p->len);
   179be:	b28b      	uxth	r3, r1
  for (p = buf; len != 0 && p != NULL; p = p->next) {
   179c0:	2f00      	cmp	r7, #0
   179c2:	d1f3      	bne.n	179ac <pbuf_copy_partial+0x14>
      len = (u16_t)(len - buf_copy_len);
      offset = 0;
    }
  }
  return copied_total;
}
   179c4:	4640      	mov	r0, r8
   179c6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      buf_copy_len = (u16_t)(p->len - offset);
   179ca:	1ad4      	subs	r4, r2, r3
   179cc:	b2a4      	uxth	r4, r4
   179ce:	42ac      	cmp	r4, r5
   179d0:	bf28      	it	cs
   179d2:	462c      	movcs	r4, r5
      MEMCPY(&((char *)dataptr)[left], &((char *)p->payload)[offset], buf_copy_len);
   179d4:	6879      	ldr	r1, [r7, #4]
      len = (u16_t)(len - buf_copy_len);
   179d6:	1b2d      	subs	r5, r5, r4
      MEMCPY(&((char *)dataptr)[left], &((char *)p->payload)[offset], buf_copy_len);
   179d8:	4622      	mov	r2, r4
   179da:	4419      	add	r1, r3
      copied_total = (u16_t)(copied_total + buf_copy_len);
   179dc:	4444      	add	r4, r8
      len = (u16_t)(len - buf_copy_len);
   179de:	b2ad      	uxth	r5, r5
      MEMCPY(&((char *)dataptr)[left], &((char *)p->payload)[offset], buf_copy_len);
   179e0:	f010 f93e 	bl	27c60 <memcpy>
      copied_total = (u16_t)(copied_total + buf_copy_len);
   179e4:	fa1f f884 	uxth.w	r8, r4
  for (p = buf; len != 0 && p != NULL; p = p->next) {
   179e8:	683f      	ldr	r7, [r7, #0]
   179ea:	2d00      	cmp	r5, #0
   179ec:	d0ea      	beq.n	179c4 <pbuf_copy_partial+0x2c>
      offset = 0;
   179ee:	2300      	movs	r3, #0
  for (p = buf; len != 0 && p != NULL; p = p->next) {
   179f0:	2f00      	cmp	r7, #0
   179f2:	d1db      	bne.n	179ac <pbuf_copy_partial+0x14>
   179f4:	e7e6      	b.n	179c4 <pbuf_copy_partial+0x2c>
  LWIP_ERROR("pbuf_copy_partial: invalid buf", (buf != NULL), return 0;);
   179f6:	4680      	mov	r8, r0
}
   179f8:	4640      	mov	r0, r8
   179fa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  LWIP_ERROR("pbuf_copy_partial: invalid buf", (buf != NULL), return 0;);
   179fe:	4688      	mov	r8, r1
   17a00:	e7e0      	b.n	179c4 <pbuf_copy_partial+0x2c>
   17a02:	4690      	mov	r8, r2
   17a04:	e7de      	b.n	179c4 <pbuf_copy_partial+0x2c>
   17a06:	bf00      	nop

00017a08 <pbuf_take>:
  struct pbuf *p;
  size_t buf_copy_len;
  size_t total_copy_len = len;
  size_t copied_total = 0;

  LWIP_ERROR("pbuf_take: invalid buf", (buf != NULL), return ERR_ARG;);
   17a08:	b318      	cbz	r0, 17a52 <pbuf_take+0x4a>
{
   17a0a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   17a0e:	4688      	mov	r8, r1
  LWIP_ERROR("pbuf_take: invalid dataptr", (dataptr != NULL), return ERR_ARG;);
   17a10:	b1d9      	cbz	r1, 17a4a <pbuf_take+0x42>
  LWIP_ERROR("pbuf_take: buf not large enough", (buf->tot_len >= len), return ERR_MEM;);
   17a12:	8903      	ldrh	r3, [r0, #8]
   17a14:	4293      	cmp	r3, r2
   17a16:	4616      	mov	r6, r2
   17a18:	4605      	mov	r5, r0
   17a1a:	d312      	bcc.n	17a42 <pbuf_take+0x3a>
  if ((buf == NULL) || (dataptr == NULL) || (buf->tot_len < len)) {
    return ERR_ARG;
  }

  /* Note some systems use byte copy if dataptr or one of the pbuf payload pointers are unaligned. */
  for (p = buf; total_copy_len != 0; p = p->next) {
   17a1c:	2700      	movs	r7, #0
   17a1e:	b16a      	cbz	r2, 17a3c <pbuf_take+0x34>
    LWIP_ASSERT("pbuf_take: invalid pbuf", p != NULL);
    buf_copy_len = total_copy_len;
    if (buf_copy_len > p->len) {
   17a20:	896c      	ldrh	r4, [r5, #10]
      /* this pbuf cannot hold all remaining data */
      buf_copy_len = p->len;
    }
    /* copy the necessary parts of the buffer */
    MEMCPY(p->payload, &((const char *)dataptr)[copied_total], buf_copy_len);
   17a22:	6868      	ldr	r0, [r5, #4]
   17a24:	42b4      	cmp	r4, r6
   17a26:	bf28      	it	cs
   17a28:	4634      	movcs	r4, r6
   17a2a:	eb08 0107 	add.w	r1, r8, r7
   17a2e:	4622      	mov	r2, r4
   17a30:	f010 f916 	bl	27c60 <memcpy>
  for (p = buf; total_copy_len != 0; p = p->next) {
   17a34:	1b36      	subs	r6, r6, r4
    total_copy_len -= buf_copy_len;
    copied_total += buf_copy_len;
   17a36:	4427      	add	r7, r4
  for (p = buf; total_copy_len != 0; p = p->next) {
   17a38:	682d      	ldr	r5, [r5, #0]
   17a3a:	d1f1      	bne.n	17a20 <pbuf_take+0x18>
  }
  LWIP_ASSERT("did not copy all data", total_copy_len == 0 && copied_total == len);
  return ERR_OK;
   17a3c:	2000      	movs	r0, #0
   17a3e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  LWIP_ERROR("pbuf_take: buf not large enough", (buf->tot_len >= len), return ERR_MEM;);
   17a42:	f04f 30ff 	mov.w	r0, #4294967295
}
   17a46:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  LWIP_ERROR("pbuf_take: invalid buf", (buf != NULL), return ERR_ARG;);
   17a4a:	f06f 000f 	mvn.w	r0, #15
   17a4e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   17a52:	f06f 000f 	mvn.w	r0, #15
   17a56:	4770      	bx	lr

00017a58 <pbuf_take_at>:
  while ((q != NULL) && (q->len <= offset_left)) {
   17a58:	2800      	cmp	r0, #0
   17a5a:	d047      	beq.n	17aec <pbuf_take_at+0x94>
 *
 * @return ERR_OK if successful, ERR_MEM if the pbuf is not big enough
 */
err_t
pbuf_take_at(struct pbuf *buf, const void *dataptr, u16_t len, u16_t offset)
{
   17a5c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   17a60:	4616      	mov	r6, r2
  while ((q != NULL) && (q->len <= offset_left)) {
   17a62:	8942      	ldrh	r2, [r0, #10]
   17a64:	4293      	cmp	r3, r2
   17a66:	460f      	mov	r7, r1
   17a68:	4604      	mov	r4, r0
   17a6a:	d203      	bcs.n	17a74 <pbuf_take_at+0x1c>
   17a6c:	e00b      	b.n	17a86 <pbuf_take_at+0x2e>
   17a6e:	8962      	ldrh	r2, [r4, #10]
   17a70:	429a      	cmp	r2, r3
   17a72:	d808      	bhi.n	17a86 <pbuf_take_at+0x2e>
    q = q->next;
   17a74:	6824      	ldr	r4, [r4, #0]
    offset_left = (u16_t)(offset_left - q->len);
   17a76:	1a9b      	subs	r3, r3, r2
   17a78:	b29b      	uxth	r3, r3
  while ((q != NULL) && (q->len <= offset_left)) {
   17a7a:	2c00      	cmp	r4, #0
   17a7c:	d1f7      	bne.n	17a6e <pbuf_take_at+0x16>
    if (remaining_len > 0) {
      return pbuf_take(q->next, src_ptr, remaining_len);
    }
    return ERR_OK;
  }
  return ERR_MEM;
   17a7e:	f04f 30ff 	mov.w	r0, #4294967295
   17a82:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if ((q != NULL) && (q->tot_len >= target_offset + len)) {
   17a86:	8920      	ldrh	r0, [r4, #8]
   17a88:	1999      	adds	r1, r3, r6
   17a8a:	4288      	cmp	r0, r1
   17a8c:	dbf7      	blt.n	17a7e <pbuf_take_at+0x26>
    first_copy_len = (u16_t)LWIP_MIN(q->len - target_offset, len);
   17a8e:	1ad2      	subs	r2, r2, r3
   17a90:	4296      	cmp	r6, r2
    MEMCPY(((u8_t *)q->payload) + target_offset, dataptr, first_copy_len);
   17a92:	6860      	ldr	r0, [r4, #4]
    first_copy_len = (u16_t)LWIP_MIN(q->len - target_offset, len);
   17a94:	dd22      	ble.n	17adc <pbuf_take_at+0x84>
   17a96:	b295      	uxth	r5, r2
    remaining_len = (u16_t)(remaining_len - first_copy_len);
   17a98:	1b76      	subs	r6, r6, r5
    MEMCPY(((u8_t *)q->payload) + target_offset, dataptr, first_copy_len);
   17a9a:	462a      	mov	r2, r5
   17a9c:	4418      	add	r0, r3
   17a9e:	4639      	mov	r1, r7
    remaining_len = (u16_t)(remaining_len - first_copy_len);
   17aa0:	b2b6      	uxth	r6, r6
    MEMCPY(((u8_t *)q->payload) + target_offset, dataptr, first_copy_len);
   17aa2:	f010 f8dd 	bl	27c60 <memcpy>
    src_ptr += first_copy_len;
   17aa6:	443d      	add	r5, r7
    if (remaining_len > 0) {
   17aa8:	b1ee      	cbz	r6, 17ae6 <pbuf_take_at+0x8e>
      return pbuf_take(q->next, src_ptr, remaining_len);
   17aaa:	6827      	ldr	r7, [r4, #0]
  LWIP_ERROR("pbuf_take: invalid buf", (buf != NULL), return ERR_ARG;);
   17aac:	b30f      	cbz	r7, 17af2 <pbuf_take_at+0x9a>
  LWIP_ERROR("pbuf_take: invalid dataptr", (dataptr != NULL), return ERR_ARG;);
   17aae:	b305      	cbz	r5, 17af2 <pbuf_take_at+0x9a>
  LWIP_ERROR("pbuf_take: buf not large enough", (buf->tot_len >= len), return ERR_MEM;);
   17ab0:	893b      	ldrh	r3, [r7, #8]
   17ab2:	42b3      	cmp	r3, r6
   17ab4:	d3e3      	bcc.n	17a7e <pbuf_take_at+0x26>
   17ab6:	f04f 0800 	mov.w	r8, #0
    if (buf_copy_len > p->len) {
   17aba:	897c      	ldrh	r4, [r7, #10]
    MEMCPY(p->payload, &((const char *)dataptr)[copied_total], buf_copy_len);
   17abc:	6878      	ldr	r0, [r7, #4]
   17abe:	42b4      	cmp	r4, r6
   17ac0:	bf28      	it	cs
   17ac2:	4634      	movcs	r4, r6
   17ac4:	eb05 0108 	add.w	r1, r5, r8
   17ac8:	4622      	mov	r2, r4
   17aca:	f010 f8c9 	bl	27c60 <memcpy>
  for (p = buf; total_copy_len != 0; p = p->next) {
   17ace:	1b36      	subs	r6, r6, r4
    copied_total += buf_copy_len;
   17ad0:	44a0      	add	r8, r4
  for (p = buf; total_copy_len != 0; p = p->next) {
   17ad2:	683f      	ldr	r7, [r7, #0]
   17ad4:	d1f1      	bne.n	17aba <pbuf_take_at+0x62>
    return ERR_OK;
   17ad6:	2000      	movs	r0, #0
}
   17ad8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    MEMCPY(((u8_t *)q->payload) + target_offset, dataptr, first_copy_len);
   17adc:	4632      	mov	r2, r6
   17ade:	4418      	add	r0, r3
   17ae0:	4639      	mov	r1, r7
   17ae2:	f010 f8bd 	bl	27c60 <memcpy>
    return ERR_OK;
   17ae6:	2000      	movs	r0, #0
}
   17ae8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  return ERR_MEM;
   17aec:	f04f 30ff 	mov.w	r0, #4294967295
}
   17af0:	4770      	bx	lr
  LWIP_ERROR("pbuf_take: invalid buf", (buf != NULL), return ERR_ARG;);
   17af2:	f06f 000f 	mvn.w	r0, #15
   17af6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   17afa:	bf00      	nop

00017afc <pbuf_clone>:
  switch (type) {
   17afc:	2941      	cmp	r1, #65	; 0x41
 *
 * @return a new pbuf or NULL if allocation fails
 */
struct pbuf *
pbuf_clone(pbuf_layer layer, pbuf_type type, struct pbuf *p)
{
   17afe:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   17b02:	4617      	mov	r7, r2
   17b04:	460c      	mov	r4, r1
  struct pbuf *q;
  err_t err;
  q = pbuf_alloc(layer, p->tot_len, type);
   17b06:	f8b2 9008 	ldrh.w	r9, [r2, #8]
  switch (type) {
   17b0a:	d06d      	beq.n	17be8 <pbuf_clone+0xec>
   17b0c:	d965      	bls.n	17bda <pbuf_clone+0xde>
   17b0e:	f5b1 7fc1 	cmp.w	r1, #386	; 0x182
   17b12:	fa1f fa80 	uxth.w	sl, r0
   17b16:	d031      	beq.n	17b7c <pbuf_clone+0x80>
   17b18:	f5b1 7f20 	cmp.w	r1, #640	; 0x280
   17b1c:	d15f      	bne.n	17bde <pbuf_clone+0xe2>
      u16_t payload_len = (u16_t)(LWIP_MEM_ALIGN_SIZE(offset) + LWIP_MEM_ALIGN_SIZE(length));
   17b1e:	f10a 0303 	add.w	r3, sl, #3
   17b22:	f109 0203 	add.w	r2, r9, #3
   17b26:	f022 0203 	bic.w	r2, r2, #3
   17b2a:	f023 0303 	bic.w	r3, r3, #3
   17b2e:	4413      	add	r3, r2
   17b30:	b29b      	uxth	r3, r3
   17b32:	4605      	mov	r5, r0
      if ((payload_len < LWIP_MEM_ALIGN_SIZE(length)) ||
   17b34:	4293      	cmp	r3, r2
      mem_size_t alloc_len = (mem_size_t)(LWIP_MEM_ALIGN_SIZE(SIZEOF_STRUCT_PBUF) + payload_len);
   17b36:	f103 0010 	add.w	r0, r3, #16
   17b3a:	b280      	uxth	r0, r0
      if ((payload_len < LWIP_MEM_ALIGN_SIZE(length)) ||
   17b3c:	d34f      	bcc.n	17bde <pbuf_clone+0xe2>
   17b3e:	4282      	cmp	r2, r0
   17b40:	d84d      	bhi.n	17bde <pbuf_clone+0xe2>
      p = (struct pbuf *)mem_malloc(alloc_len);
   17b42:	f7ff fa47 	bl	16fd4 <mem_malloc>
      if (p == NULL) {
   17b46:	4680      	mov	r8, r0
   17b48:	2800      	cmp	r0, #0
   17b4a:	d048      	beq.n	17bde <pbuf_clone+0xe2>
      pbuf_init_alloced_pbuf(p, LWIP_MEM_ALIGN((void *)((u8_t *)p + SIZEOF_STRUCT_PBUF + offset)),
   17b4c:	1943      	adds	r3, r0, r5
  p->next = NULL;
   17b4e:	2100      	movs	r1, #0
      pbuf_init_alloced_pbuf(p, LWIP_MEM_ALIGN((void *)((u8_t *)p + SIZEOF_STRUCT_PBUF + offset)),
   17b50:	3313      	adds	r3, #19
  p->tot_len = tot_len;
   17b52:	460a      	mov	r2, r1
      pbuf_init_alloced_pbuf(p, LWIP_MEM_ALIGN((void *)((u8_t *)p + SIZEOF_STRUCT_PBUF + offset)),
   17b54:	f023 0303 	bic.w	r3, r3, #3
  p->tot_len = tot_len;
   17b58:	f369 020f 	bfi	r2, r9, #0, #16
  p->next = NULL;
   17b5c:	e888 000a 	stmia.w	r8, {r1, r3}
  p->tot_len = tot_len;
   17b60:	f369 421f 	bfi	r2, r9, #16, #16
  p->type_internal = (u8_t)type;
   17b64:	484b      	ldr	r0, [pc, #300]	; (17c94 <pbuf_clone+0x198>)
  p->tot_len = tot_len;
   17b66:	f8c8 2008 	str.w	r2, [r8, #8]
  p->type_internal = (u8_t)type;
   17b6a:	f8c8 000c 	str.w	r0, [r8, #12]
  if (q == NULL) {
    return NULL;
  }
  err = pbuf_copy(q, p);
   17b6e:	4639      	mov	r1, r7
   17b70:	4640      	mov	r0, r8
   17b72:	f7ff febd 	bl	178f0 <pbuf_copy>
  LWIP_UNUSED_ARG(err); /* in case of LWIP_NOASSERT */
  LWIP_ASSERT("pbuf_copy failed", err == ERR_OK);
  return q;
}
   17b76:	4640      	mov	r0, r8
   17b78:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  switch (type) {
   17b7c:	2400      	movs	r4, #0
  p->type_internal = (u8_t)type;
   17b7e:	4e46      	ldr	r6, [pc, #280]	; (17c98 <pbuf_clone+0x19c>)
  switch (type) {
   17b80:	46a0      	mov	r8, r4
        qlen = LWIP_MIN(rem_len, (u16_t)(PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)));
   17b82:	f240 55ec 	movw	r5, #1516	; 0x5ec
   17b86:	e00a      	b.n	17b9e <pbuf_clone+0xa2>
          last->next = q;
   17b88:	6020      	str	r0, [r4, #0]
        rem_len = (u16_t)(rem_len - qlen);
   17b8a:	eba9 0303 	sub.w	r3, r9, r3
   17b8e:	fa1f f983 	uxth.w	r9, r3
        offset = 0;
   17b92:	f04f 0a00 	mov.w	sl, #0
   17b96:	4604      	mov	r4, r0
      } while (rem_len > 0);
   17b98:	f1b9 0f00 	cmp.w	r9, #0
   17b9c:	d0e7      	beq.n	17b6e <pbuf_clone+0x72>
        q = (struct pbuf *)memp_malloc(MEMP_PBUF_POOL);
   17b9e:	2009      	movs	r0, #9
   17ba0:	f7ff fac2 	bl	17128 <memp_malloc>
        qlen = LWIP_MIN(rem_len, (u16_t)(PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)));
   17ba4:	f10a 0303 	add.w	r3, sl, #3
   17ba8:	f023 0303 	bic.w	r3, r3, #3
   17bac:	1aeb      	subs	r3, r5, r3
   17bae:	b29b      	uxth	r3, r3
        pbuf_init_alloced_pbuf(q, LWIP_MEM_ALIGN((void *)((u8_t *)q + SIZEOF_STRUCT_PBUF + offset)),
   17bb0:	4482      	add	sl, r0
   17bb2:	f10a 0a13 	add.w	sl, sl, #19
        qlen = LWIP_MIN(rem_len, (u16_t)(PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)));
   17bb6:	454b      	cmp	r3, r9
   17bb8:	bf28      	it	cs
   17bba:	464b      	movcs	r3, r9
  p->next = NULL;
   17bbc:	2100      	movs	r1, #0
        pbuf_init_alloced_pbuf(q, LWIP_MEM_ALIGN((void *)((u8_t *)q + SIZEOF_STRUCT_PBUF + offset)),
   17bbe:	f02a 0203 	bic.w	r2, sl, #3
        if (q == NULL) {
   17bc2:	b340      	cbz	r0, 17c16 <pbuf_clone+0x11a>
  p->payload = payload;
   17bc4:	e880 0006 	stmia.w	r0, {r1, r2}
  p->tot_len = tot_len;
   17bc8:	f8a0 9008 	strh.w	r9, [r0, #8]
  p->len = len;
   17bcc:	8143      	strh	r3, [r0, #10]
  p->type_internal = (u8_t)type;
   17bce:	60c6      	str	r6, [r0, #12]
        if (p == NULL) {
   17bd0:	f1b8 0f00 	cmp.w	r8, #0
   17bd4:	d1d8      	bne.n	17b88 <pbuf_clone+0x8c>
   17bd6:	4680      	mov	r8, r0
   17bd8:	e7d7      	b.n	17b8a <pbuf_clone+0x8e>
  switch (type) {
   17bda:	2901      	cmp	r1, #1
   17bdc:	d004      	beq.n	17be8 <pbuf_clone+0xec>
    return NULL;
   17bde:	f04f 0800 	mov.w	r8, #0
}
   17be2:	4640      	mov	r0, r8
   17be4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  p = (struct pbuf *)memp_malloc(MEMP_PBUF);
   17be8:	2008      	movs	r0, #8
   17bea:	f7ff fa9d 	bl	17128 <memp_malloc>
  if (p == NULL) {
   17bee:	4680      	mov	r8, r0
   17bf0:	2800      	cmp	r0, #0
   17bf2:	d0f4      	beq.n	17bde <pbuf_clone+0xe2>
  p->next = NULL;
   17bf4:	2300      	movs	r3, #0
  p->ref = 1;
   17bf6:	2201      	movs	r2, #1
  p->tot_len = tot_len;
   17bf8:	f8a0 9008 	strh.w	r9, [r0, #8]
  p->len = len;
   17bfc:	f8a0 900a 	strh.w	r9, [r0, #10]
  p->type_internal = (u8_t)type;
   17c00:	7304      	strb	r4, [r0, #12]
  p->next = NULL;
   17c02:	6003      	str	r3, [r0, #0]
  p->payload = payload;
   17c04:	6043      	str	r3, [r0, #4]
  p->flags = flags;
   17c06:	7343      	strb	r3, [r0, #13]
  p->if_idx = NETIF_NO_INDEX;
   17c08:	73c3      	strb	r3, [r0, #15]
  p->ref = 1;
   17c0a:	7382      	strb	r2, [r0, #14]
  err = pbuf_copy(q, p);
   17c0c:	4639      	mov	r1, r7
   17c0e:	4640      	mov	r0, r8
   17c10:	f7ff fe6e 	bl	178f0 <pbuf_copy>
   17c14:	e7af      	b.n	17b76 <pbuf_clone+0x7a>
  SYS_ARCH_SET(pbuf_free_ooseq_pending, 1);
   17c16:	4b21      	ldr	r3, [pc, #132]	; (17c9c <pbuf_clone+0x1a0>)
   17c18:	2201      	movs	r2, #1
   17c1a:	701a      	strb	r2, [r3, #0]
          if (p) {
   17c1c:	f1b8 0f00 	cmp.w	r8, #0
   17c20:	d0dd      	beq.n	17bde <pbuf_clone+0xe2>
    ref = --(p->ref);
   17c22:	f898 300e 	ldrb.w	r3, [r8, #14]
   17c26:	3b01      	subs	r3, #1
   17c28:	b2db      	uxtb	r3, r3
   17c2a:	f888 300e 	strb.w	r3, [r8, #14]
    if (ref == 0) {
   17c2e:	2b00      	cmp	r3, #0
   17c30:	d1d5      	bne.n	17bde <pbuf_clone+0xe2>
      if ((p->flags & PBUF_FLAG_IS_CUSTOM) != 0) {
   17c32:	f898 300d 	ldrb.w	r3, [r8, #13]
      q = p->next;
   17c36:	f8d8 4000 	ldr.w	r4, [r8]
      if ((p->flags & PBUF_FLAG_IS_CUSTOM) != 0) {
   17c3a:	079b      	lsls	r3, r3, #30
   17c3c:	d417      	bmi.n	17c6e <pbuf_clone+0x172>
      alloc_src = pbuf_get_allocsrc(p);
   17c3e:	f898 300c 	ldrb.w	r3, [r8, #12]
   17c42:	f003 030f 	and.w	r3, r3, #15
        if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_MEMP_PBUF_POOL) {
   17c46:	2b02      	cmp	r3, #2
   17c48:	d01a      	beq.n	17c80 <pbuf_clone+0x184>
        } else if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_MEMP_PBUF) {
   17c4a:	2b01      	cmp	r3, #1
   17c4c:	d01d      	beq.n	17c8a <pbuf_clone+0x18e>
        } else if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_HEAP) {
   17c4e:	b19b      	cbz	r3, 17c78 <pbuf_clone+0x17c>
  while (p != NULL) {
   17c50:	2c00      	cmp	r4, #0
   17c52:	d0c4      	beq.n	17bde <pbuf_clone+0xe2>
    ref = --(p->ref);
   17c54:	7ba3      	ldrb	r3, [r4, #14]
   17c56:	3b01      	subs	r3, #1
   17c58:	b2db      	uxtb	r3, r3
   17c5a:	73a3      	strb	r3, [r4, #14]
   17c5c:	46a0      	mov	r8, r4
    if (ref == 0) {
   17c5e:	2b00      	cmp	r3, #0
   17c60:	d1bd      	bne.n	17bde <pbuf_clone+0xe2>
      if ((p->flags & PBUF_FLAG_IS_CUSTOM) != 0) {
   17c62:	f898 300d 	ldrb.w	r3, [r8, #13]
      q = p->next;
   17c66:	f8d8 4000 	ldr.w	r4, [r8]
      if ((p->flags & PBUF_FLAG_IS_CUSTOM) != 0) {
   17c6a:	079b      	lsls	r3, r3, #30
   17c6c:	d5e7      	bpl.n	17c3e <pbuf_clone+0x142>
        pc->custom_free_function(p);
   17c6e:	f8d8 3010 	ldr.w	r3, [r8, #16]
   17c72:	4640      	mov	r0, r8
   17c74:	4798      	blx	r3
   17c76:	e7eb      	b.n	17c50 <pbuf_clone+0x154>
          mem_free(p);
   17c78:	4640      	mov	r0, r8
   17c7a:	f7ff f8dd 	bl	16e38 <mem_free>
   17c7e:	e7e7      	b.n	17c50 <pbuf_clone+0x154>
          memp_free(MEMP_PBUF_POOL, p);
   17c80:	4641      	mov	r1, r8
   17c82:	2009      	movs	r0, #9
   17c84:	f7ff fa60 	bl	17148 <memp_free>
   17c88:	e7e2      	b.n	17c50 <pbuf_clone+0x154>
          memp_free(MEMP_PBUF, p);
   17c8a:	4641      	mov	r1, r8
   17c8c:	2008      	movs	r0, #8
   17c8e:	f7ff fa5b 	bl	17148 <memp_free>
   17c92:	e7dd      	b.n	17c50 <pbuf_clone+0x154>
   17c94:	00010080 	.word	0x00010080
   17c98:	00010082 	.word	0x00010082
   17c9c:	2000a3e0 	.word	0x2000a3e0

00017ca0 <pbuf_get_at>:
  while ((q != NULL) && (q->len <= offset_left)) {
   17ca0:	b158      	cbz	r0, 17cba <pbuf_get_at+0x1a>
   17ca2:	8943      	ldrh	r3, [r0, #10]
   17ca4:	4299      	cmp	r1, r3
   17ca6:	d203      	bcs.n	17cb0 <pbuf_get_at+0x10>
   17ca8:	e008      	b.n	17cbc <pbuf_get_at+0x1c>
   17caa:	8943      	ldrh	r3, [r0, #10]
   17cac:	428b      	cmp	r3, r1
   17cae:	d805      	bhi.n	17cbc <pbuf_get_at+0x1c>
    q = q->next;
   17cb0:	6800      	ldr	r0, [r0, #0]
    offset_left = (u16_t)(offset_left - q->len);
   17cb2:	1ac9      	subs	r1, r1, r3
   17cb4:	b289      	uxth	r1, r1
  while ((q != NULL) && (q->len <= offset_left)) {
   17cb6:	2800      	cmp	r0, #0
   17cb8:	d1f7      	bne.n	17caa <pbuf_get_at+0xa>
  int ret = pbuf_try_get_at(p, offset);
  if (ret >= 0) {
    return (u8_t)ret;
  }
  return 0;
}
   17cba:	4770      	bx	lr
  u16_t q_idx;
  const struct pbuf *q = pbuf_skip_const(p, offset, &q_idx);

  /* return requested data if pbuf is OK */
  if ((q != NULL) && (q->len > q_idx)) {
    return ((u8_t *)q->payload)[q_idx];
   17cbc:	6843      	ldr	r3, [r0, #4]
   17cbe:	5c58      	ldrb	r0, [r3, r1]
}
   17cc0:	4770      	bx	lr
   17cc2:	bf00      	nop

00017cc4 <pbuf_put_at>:
  while ((q != NULL) && (q->len <= offset_left)) {
   17cc4:	b158      	cbz	r0, 17cde <pbuf_put_at+0x1a>
   17cc6:	8943      	ldrh	r3, [r0, #10]
   17cc8:	4299      	cmp	r1, r3
   17cca:	d203      	bcs.n	17cd4 <pbuf_put_at+0x10>
   17ccc:	e008      	b.n	17ce0 <pbuf_put_at+0x1c>
   17cce:	8943      	ldrh	r3, [r0, #10]
   17cd0:	428b      	cmp	r3, r1
   17cd2:	d805      	bhi.n	17ce0 <pbuf_put_at+0x1c>
    q = q->next;
   17cd4:	6800      	ldr	r0, [r0, #0]
    offset_left = (u16_t)(offset_left - q->len);
   17cd6:	1ac9      	subs	r1, r1, r3
   17cd8:	b289      	uxth	r1, r1
  while ((q != NULL) && (q->len <= offset_left)) {
   17cda:	2800      	cmp	r0, #0
   17cdc:	d1f7      	bne.n	17cce <pbuf_put_at+0xa>
   17cde:	4770      	bx	lr
  u16_t q_idx;
  struct pbuf *q = pbuf_skip(p, offset, &q_idx);

  /* write requested data if pbuf is OK */
  if ((q != NULL) && (q->len > q_idx)) {
    ((u8_t *)q->payload)[q_idx] = data;
   17ce0:	6843      	ldr	r3, [r0, #4]
   17ce2:	545a      	strb	r2, [r3, r1]
   17ce4:	4770      	bx	lr
   17ce6:	bf00      	nop

00017ce8 <raw_input>:
 *           caller).
 *
 */
raw_input_state_t
raw_input(struct pbuf *p, struct netif *inp)
{
   17ce8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  struct raw_pcb *pcb, *prev;
  s16_t proto;
  raw_input_state_t ret = RAW_INPUT_NONE;
  u8_t broadcast = ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif());
   17cec:	4f43      	ldr	r7, [pc, #268]	; (17dfc <raw_input+0x114>)
    proto = IPH_PROTO((struct ip_hdr *)p->payload);
  }
#endif /* LWIP_IPV4 */

  prev = NULL;
  pcb = raw_pcbs;
   17cee:	f8df 9110 	ldr.w	r9, [pc, #272]	; 17e00 <raw_input+0x118>
  u8_t broadcast = ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif());
   17cf2:	6839      	ldr	r1, [r7, #0]
{
   17cf4:	4680      	mov	r8, r0
  u8_t broadcast = ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif());
   17cf6:	6978      	ldr	r0, [r7, #20]
   17cf8:	f7ff f800 	bl	16cfc <ip4_addr_isbroadcast_u32>
    proto = IPH_PROTO((struct ip_hdr *)p->payload);
   17cfc:	f8d8 3004 	ldr.w	r3, [r8, #4]
  pcb = raw_pcbs;
   17d00:	f8d9 4000 	ldr.w	r4, [r9]
    proto = IPH_PROTO((struct ip_hdr *)p->payload);
   17d04:	7a5d      	ldrb	r5, [r3, #9]
  /* loop through all raw pcbs until the packet is eaten by one */
  /* this allows multiple pcbs to match against the packet by design */
  while (pcb != NULL) {
   17d06:	2c00      	cmp	r4, #0
   17d08:	d072      	beq.n	17df0 <raw_input+0x108>
   17d0a:	2800      	cmp	r0, #0
   17d0c:	d133      	bne.n	17d76 <raw_input+0x8e>
   17d0e:	4606      	mov	r6, r0
#ifndef LWIP_NOASSERT
        void *old_payload = p->payload;
#endif
        ret = RAW_INPUT_DELIVERED;
        /* the receive callback function did not eat the packet? */
        eaten = pcb->recv(pcb->recv_arg, pcb, p, ip_current_src_addr());
   17d10:	f107 0a10 	add.w	sl, r7, #16
   17d14:	e003      	b.n	17d1e <raw_input+0x36>
      }
      /* no receive callback function was set for this raw PCB */
    }
    /* drop the packet */
    prev = pcb;
    pcb = pcb->next;
   17d16:	68e3      	ldr	r3, [r4, #12]
   17d18:	4626      	mov	r6, r4
  while (pcb != NULL) {
   17d1a:	b313      	cbz	r3, 17d62 <raw_input+0x7a>
   17d1c:	461c      	mov	r4, r3
    if ((pcb->protocol == proto) && raw_input_local_match(pcb, broadcast) &&
   17d1e:	7c23      	ldrb	r3, [r4, #16]
   17d20:	42ab      	cmp	r3, r5
   17d22:	d1f8      	bne.n	17d16 <raw_input+0x2e>
  if ((pcb->netif_idx != NETIF_NO_INDEX) &&
   17d24:	7a22      	ldrb	r2, [r4, #8]
   17d26:	b9f2      	cbnz	r2, 17d66 <raw_input+0x7e>
      if (ip_addr_isany(&pcb->local_ip) ||
   17d28:	6823      	ldr	r3, [r4, #0]
   17d2a:	b113      	cbz	r3, 17d32 <raw_input+0x4a>
   17d2c:	697a      	ldr	r2, [r7, #20]
   17d2e:	4293      	cmp	r3, r2
   17d30:	d1f1      	bne.n	17d16 <raw_input+0x2e>
    if ((pcb->protocol == proto) && raw_input_local_match(pcb, broadcast) &&
   17d32:	7c63      	ldrb	r3, [r4, #17]
   17d34:	07da      	lsls	r2, r3, #31
   17d36:	d503      	bpl.n	17d40 <raw_input+0x58>
        (((pcb->flags & RAW_FLAGS_CONNECTED) == 0) ||
   17d38:	693a      	ldr	r2, [r7, #16]
   17d3a:	6863      	ldr	r3, [r4, #4]
   17d3c:	429a      	cmp	r2, r3
   17d3e:	d1ea      	bne.n	17d16 <raw_input+0x2e>
      if (pcb->recv != NULL) {
   17d40:	f8d4 b014 	ldr.w	fp, [r4, #20]
   17d44:	f1bb 0f00 	cmp.w	fp, #0
   17d48:	d0e5      	beq.n	17d16 <raw_input+0x2e>
        eaten = pcb->recv(pcb->recv_arg, pcb, p, ip_current_src_addr());
   17d4a:	4653      	mov	r3, sl
   17d4c:	4642      	mov	r2, r8
   17d4e:	4621      	mov	r1, r4
   17d50:	69a0      	ldr	r0, [r4, #24]
   17d52:	47d8      	blx	fp
        if (eaten != 0) {
   17d54:	2800      	cmp	r0, #0
   17d56:	d140      	bne.n	17dda <raw_input+0xf2>
    pcb = pcb->next;
   17d58:	68e3      	ldr	r3, [r4, #12]
        ret = RAW_INPUT_DELIVERED;
   17d5a:	2002      	movs	r0, #2
   17d5c:	4626      	mov	r6, r4
  while (pcb != NULL) {
   17d5e:	2b00      	cmp	r3, #0
   17d60:	d1dc      	bne.n	17d1c <raw_input+0x34>
   17d62:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
      (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
   17d66:	687b      	ldr	r3, [r7, #4]
   17d68:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
   17d6c:	3301      	adds	r3, #1
  if ((pcb->netif_idx != NETIF_NO_INDEX) &&
   17d6e:	b2db      	uxtb	r3, r3
   17d70:	429a      	cmp	r2, r3
   17d72:	d1d0      	bne.n	17d16 <raw_input+0x2e>
   17d74:	e7d8      	b.n	17d28 <raw_input+0x40>
  while (pcb != NULL) {
   17d76:	2000      	movs	r0, #0
   17d78:	4606      	mov	r6, r0
        eaten = pcb->recv(pcb->recv_arg, pcb, p, ip_current_src_addr());
   17d7a:	f107 0a10 	add.w	sl, r7, #16
   17d7e:	e003      	b.n	17d88 <raw_input+0xa0>
    pcb = pcb->next;
   17d80:	68e3      	ldr	r3, [r4, #12]
   17d82:	4626      	mov	r6, r4
  while (pcb != NULL) {
   17d84:	b1fb      	cbz	r3, 17dc6 <raw_input+0xde>
   17d86:	461c      	mov	r4, r3
    if ((pcb->protocol == proto) && raw_input_local_match(pcb, broadcast) &&
   17d88:	7c23      	ldrb	r3, [r4, #16]
   17d8a:	42ab      	cmp	r3, r5
   17d8c:	d1f8      	bne.n	17d80 <raw_input+0x98>
  if ((pcb->netif_idx != NETIF_NO_INDEX) &&
   17d8e:	7a22      	ldrb	r2, [r4, #8]
   17d90:	b9da      	cbnz	r2, 17dca <raw_input+0xe2>
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip))) {
   17d92:	6823      	ldr	r3, [r4, #0]
   17d94:	2b00      	cmp	r3, #0
   17d96:	d1f3      	bne.n	17d80 <raw_input+0x98>
    if ((pcb->protocol == proto) && raw_input_local_match(pcb, broadcast) &&
   17d98:	7c63      	ldrb	r3, [r4, #17]
   17d9a:	07db      	lsls	r3, r3, #31
   17d9c:	d503      	bpl.n	17da6 <raw_input+0xbe>
        (((pcb->flags & RAW_FLAGS_CONNECTED) == 0) ||
   17d9e:	6862      	ldr	r2, [r4, #4]
   17da0:	693b      	ldr	r3, [r7, #16]
   17da2:	429a      	cmp	r2, r3
   17da4:	d1ec      	bne.n	17d80 <raw_input+0x98>
      if (pcb->recv != NULL) {
   17da6:	f8d4 b014 	ldr.w	fp, [r4, #20]
   17daa:	f1bb 0f00 	cmp.w	fp, #0
   17dae:	d0e7      	beq.n	17d80 <raw_input+0x98>
        eaten = pcb->recv(pcb->recv_arg, pcb, p, ip_current_src_addr());
   17db0:	4653      	mov	r3, sl
   17db2:	4642      	mov	r2, r8
   17db4:	4621      	mov	r1, r4
   17db6:	69a0      	ldr	r0, [r4, #24]
   17db8:	47d8      	blx	fp
        if (eaten != 0) {
   17dba:	b970      	cbnz	r0, 17dda <raw_input+0xf2>
    pcb = pcb->next;
   17dbc:	68e3      	ldr	r3, [r4, #12]
        ret = RAW_INPUT_DELIVERED;
   17dbe:	2002      	movs	r0, #2
   17dc0:	4626      	mov	r6, r4
  while (pcb != NULL) {
   17dc2:	2b00      	cmp	r3, #0
   17dc4:	d1df      	bne.n	17d86 <raw_input+0x9e>
   17dc6:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
      (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
   17dca:	687b      	ldr	r3, [r7, #4]
   17dcc:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
   17dd0:	3301      	adds	r3, #1
  if ((pcb->netif_idx != NETIF_NO_INDEX) &&
   17dd2:	b2db      	uxtb	r3, r3
   17dd4:	429a      	cmp	r2, r3
   17dd6:	d1d3      	bne.n	17d80 <raw_input+0x98>
   17dd8:	e7db      	b.n	17d92 <raw_input+0xaa>
          if (prev != NULL) {
   17dda:	b166      	cbz	r6, 17df6 <raw_input+0x10e>
            prev->next = pcb->next;
   17ddc:	68e2      	ldr	r2, [r4, #12]
            pcb->next = raw_pcbs;
   17dde:	f8d9 3000 	ldr.w	r3, [r9]
            prev->next = pcb->next;
   17de2:	60f2      	str	r2, [r6, #12]
            raw_pcbs = pcb;
   17de4:	f8c9 4000 	str.w	r4, [r9]
            pcb->next = raw_pcbs;
   17de8:	60e3      	str	r3, [r4, #12]
          return RAW_INPUT_EATEN;
   17dea:	2001      	movs	r0, #1
   17dec:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
  raw_input_state_t ret = RAW_INPUT_NONE;
   17df0:	4620      	mov	r0, r4
   17df2:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
          return RAW_INPUT_EATEN;
   17df6:	2001      	movs	r0, #1
   17df8:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   17dfc:	2000a404 	.word	0x2000a404
   17e00:	20002900 	.word	0x20002900

00017e04 <raw_netif_ip_addr_changed>:
 */
void raw_netif_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
  struct raw_pcb *rpcb;

  if (!ip_addr_isany(old_addr) && !ip_addr_isany(new_addr)) {
   17e04:	b1a0      	cbz	r0, 17e30 <raw_netif_ip_addr_changed+0x2c>
   17e06:	6802      	ldr	r2, [r0, #0]
   17e08:	b192      	cbz	r2, 17e30 <raw_netif_ip_addr_changed+0x2c>
   17e0a:	b189      	cbz	r1, 17e30 <raw_netif_ip_addr_changed+0x2c>
   17e0c:	680b      	ldr	r3, [r1, #0]
   17e0e:	b17b      	cbz	r3, 17e30 <raw_netif_ip_addr_changed+0x2c>
    for (rpcb = raw_pcbs; rpcb != NULL; rpcb = rpcb->next) {
   17e10:	4b08      	ldr	r3, [pc, #32]	; (17e34 <raw_netif_ip_addr_changed+0x30>)
   17e12:	681b      	ldr	r3, [r3, #0]
   17e14:	b163      	cbz	r3, 17e30 <raw_netif_ip_addr_changed+0x2c>
{
   17e16:	b410      	push	{r4}
   17e18:	e000      	b.n	17e1c <raw_netif_ip_addr_changed+0x18>
   17e1a:	6802      	ldr	r2, [r0, #0]
      /* PCB bound to current local interface address? */
      if (ip_addr_cmp(&rpcb->local_ip, old_addr)) {
   17e1c:	681c      	ldr	r4, [r3, #0]
   17e1e:	42a2      	cmp	r2, r4
        /* The PCB is bound to the old ipaddr and
         * is set to bound to the new one instead */
        ip_addr_copy(rpcb->local_ip, *new_addr);
   17e20:	bf04      	itt	eq
   17e22:	680a      	ldreq	r2, [r1, #0]
   17e24:	601a      	streq	r2, [r3, #0]
    for (rpcb = raw_pcbs; rpcb != NULL; rpcb = rpcb->next) {
   17e26:	68db      	ldr	r3, [r3, #12]
   17e28:	2b00      	cmp	r3, #0
   17e2a:	d1f6      	bne.n	17e1a <raw_netif_ip_addr_changed+0x16>
      }
    }
  }
}
   17e2c:	f85d 4b04 	ldr.w	r4, [sp], #4
   17e30:	4770      	bx	lr
   17e32:	bf00      	nop
   17e34:	20002900 	.word	0x20002900

00017e38 <tcp_pcb_purge.part.1>:
 * (pcb->ooseq, pcb->unsent and pcb->unacked are freed).
 *
 * @param pcb tcp_pcb to purge. The pcb itself is not deallocated!
 */
void
tcp_pcb_purge(struct tcp_pcb *pcb)
   17e38:	b570      	push	{r4, r5, r6, lr}
   17e3a:	4606      	mov	r6, r0

    LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge\n"));

    tcp_backlog_accepted(pcb);

    if (pcb->refused_data != NULL) {
   17e3c:	6f80      	ldr	r0, [r0, #120]	; 0x78
   17e3e:	b118      	cbz	r0, 17e48 <tcp_pcb_purge.part.1+0x10>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->refused_data\n"));
      pbuf_free(pcb->refused_data);
   17e40:	f7ff fcd4 	bl	177ec <pbuf_free>
      pcb->refused_data = NULL;
   17e44:	2300      	movs	r3, #0
   17e46:	67b3      	str	r3, [r6, #120]	; 0x78
    }
    if (pcb->unacked != NULL) {
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->unacked\n"));
    }
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL) {
   17e48:	6f74      	ldr	r4, [r6, #116]	; 0x74
   17e4a:	b16c      	cbz	r4, 17e68 <tcp_pcb_purge.part.1+0x30>
    if (seg->p != NULL) {
   17e4c:	6863      	ldr	r3, [r4, #4]
    struct tcp_seg *next = seg->next;
   17e4e:	6825      	ldr	r5, [r4, #0]
      pbuf_free(seg->p);
   17e50:	4618      	mov	r0, r3
    if (seg->p != NULL) {
   17e52:	b10b      	cbz	r3, 17e58 <tcp_pcb_purge.part.1+0x20>
      pbuf_free(seg->p);
   17e54:	f7ff fcca 	bl	177ec <pbuf_free>
    memp_free(MEMP_TCP_SEG, seg);
   17e58:	4621      	mov	r1, r4
   17e5a:	2004      	movs	r0, #4
   17e5c:	f7ff f974 	bl	17148 <memp_free>
   17e60:	462c      	mov	r4, r5
  while (seg != NULL) {
   17e62:	2d00      	cmp	r5, #0
   17e64:	d1f2      	bne.n	17e4c <tcp_pcb_purge.part.1+0x14>
void
tcp_free_ooseq(struct tcp_pcb *pcb)
{
  if (pcb->ooseq) {
    tcp_segs_free(pcb->ooseq);
    pcb->ooseq = NULL;
   17e66:	6775      	str	r5, [r6, #116]	; 0x74
    tcp_segs_free(pcb->unsent);
   17e68:	6ef4      	ldr	r4, [r6, #108]	; 0x6c
    pcb->rtime = -1;
   17e6a:	f64f 73ff 	movw	r3, #65535	; 0xffff
   17e6e:	8633      	strh	r3, [r6, #48]	; 0x30
  while (seg != NULL) {
   17e70:	b164      	cbz	r4, 17e8c <tcp_pcb_purge.part.1+0x54>
    if (seg->p != NULL) {
   17e72:	6863      	ldr	r3, [r4, #4]
    struct tcp_seg *next = seg->next;
   17e74:	6825      	ldr	r5, [r4, #0]
      pbuf_free(seg->p);
   17e76:	4618      	mov	r0, r3
    if (seg->p != NULL) {
   17e78:	b10b      	cbz	r3, 17e7e <tcp_pcb_purge.part.1+0x46>
      pbuf_free(seg->p);
   17e7a:	f7ff fcb7 	bl	177ec <pbuf_free>
    memp_free(MEMP_TCP_SEG, seg);
   17e7e:	4621      	mov	r1, r4
   17e80:	2004      	movs	r0, #4
   17e82:	f7ff f961 	bl	17148 <memp_free>
  while (seg != NULL) {
   17e86:	462c      	mov	r4, r5
   17e88:	2d00      	cmp	r5, #0
   17e8a:	d1f2      	bne.n	17e72 <tcp_pcb_purge.part.1+0x3a>
    tcp_segs_free(pcb->unacked);
   17e8c:	6f34      	ldr	r4, [r6, #112]	; 0x70
  while (seg != NULL) {
   17e8e:	b164      	cbz	r4, 17eaa <tcp_pcb_purge.part.1+0x72>
    if (seg->p != NULL) {
   17e90:	6863      	ldr	r3, [r4, #4]
    struct tcp_seg *next = seg->next;
   17e92:	6825      	ldr	r5, [r4, #0]
      pbuf_free(seg->p);
   17e94:	4618      	mov	r0, r3
    if (seg->p != NULL) {
   17e96:	b10b      	cbz	r3, 17e9c <tcp_pcb_purge.part.1+0x64>
      pbuf_free(seg->p);
   17e98:	f7ff fca8 	bl	177ec <pbuf_free>
    memp_free(MEMP_TCP_SEG, seg);
   17e9c:	4621      	mov	r1, r4
   17e9e:	2004      	movs	r0, #4
   17ea0:	f7ff f952 	bl	17148 <memp_free>
  while (seg != NULL) {
   17ea4:	462c      	mov	r4, r5
   17ea6:	2d00      	cmp	r5, #0
   17ea8:	d1f2      	bne.n	17e90 <tcp_pcb_purge.part.1+0x58>
    pcb->unacked = pcb->unsent = NULL;
   17eaa:	2300      	movs	r3, #0
   17eac:	66f3      	str	r3, [r6, #108]	; 0x6c
   17eae:	6733      	str	r3, [r6, #112]	; 0x70
    pcb->unsent_oversize = 0;
   17eb0:	f8a6 3068 	strh.w	r3, [r6, #104]	; 0x68
   17eb4:	bd70      	pop	{r4, r5, r6, pc}
   17eb6:	bf00      	nop

00017eb8 <tcp_close_shutdown>:
{
   17eb8:	b530      	push	{r4, r5, lr}
  if (rst_on_unacked_data && ((pcb->state == ESTABLISHED) || (pcb->state == CLOSE_WAIT))) {
   17eba:	7d03      	ldrb	r3, [r0, #20]
{
   17ebc:	b085      	sub	sp, #20
   17ebe:	4604      	mov	r4, r0
  if (rst_on_unacked_data && ((pcb->state == ESTABLISHED) || (pcb->state == CLOSE_WAIT))) {
   17ec0:	b119      	cbz	r1, 17eca <tcp_close_shutdown+0x12>
   17ec2:	2b04      	cmp	r3, #4
   17ec4:	d013      	beq.n	17eee <tcp_close_shutdown+0x36>
   17ec6:	2b07      	cmp	r3, #7
   17ec8:	d011      	beq.n	17eee <tcp_close_shutdown+0x36>
  switch (pcb->state) {
   17eca:	2b01      	cmp	r3, #1
   17ecc:	f000 809e 	beq.w	1800c <tcp_close_shutdown+0x154>
   17ed0:	d348      	bcc.n	17f64 <tcp_close_shutdown+0xac>
   17ed2:	2b02      	cmp	r3, #2
   17ed4:	d034      	beq.n	17f40 <tcp_close_shutdown+0x88>
  switch (pcb->state) {
   17ed6:	2b04      	cmp	r3, #4
   17ed8:	f000 80c4 	beq.w	18064 <tcp_close_shutdown+0x1ac>
   17edc:	2b07      	cmp	r3, #7
   17ede:	f000 80e4 	beq.w	180aa <tcp_close_shutdown+0x1f2>
   17ee2:	2b03      	cmp	r3, #3
   17ee4:	f000 80be 	beq.w	18064 <tcp_close_shutdown+0x1ac>
    tcp_output(pcb);
   17ee8:	2000      	movs	r0, #0
}
   17eea:	b005      	add	sp, #20
   17eec:	bd30      	pop	{r4, r5, pc}
    if ((pcb->refused_data != NULL) || (pcb->rcv_wnd != TCP_WND_MAX(pcb))) {
   17eee:	6fa2      	ldr	r2, [r4, #120]	; 0x78
   17ef0:	2a00      	cmp	r2, #0
   17ef2:	d049      	beq.n	17f88 <tcp_close_shutdown+0xd0>
      tcp_rst(pcb, pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
   17ef4:	8b23      	ldrh	r3, [r4, #24]
   17ef6:	8ae0      	ldrh	r0, [r4, #22]
   17ef8:	6a62      	ldr	r2, [r4, #36]	; 0x24
   17efa:	6d21      	ldr	r1, [r4, #80]	; 0x50
   17efc:	9302      	str	r3, [sp, #8]
   17efe:	1d23      	adds	r3, r4, #4
   17f00:	9001      	str	r0, [sp, #4]
   17f02:	9300      	str	r3, [sp, #0]
   17f04:	4620      	mov	r0, r4
   17f06:	4623      	mov	r3, r4
   17f08:	f002 fbe0 	bl	1a6cc <tcp_rst>
  if (pcb->state != CLOSED &&
   17f0c:	7d23      	ldrb	r3, [r4, #20]
   17f0e:	2b01      	cmp	r3, #1
   17f10:	d904      	bls.n	17f1c <tcp_close_shutdown+0x64>
   17f12:	2b0a      	cmp	r3, #10
   17f14:	d002      	beq.n	17f1c <tcp_close_shutdown+0x64>
   17f16:	4620      	mov	r0, r4
   17f18:	f7ff ff8e 	bl	17e38 <tcp_pcb_purge.part.1>
      TCP_RMV_ACTIVE(pcb);
   17f1c:	4b67      	ldr	r3, [pc, #412]	; (180bc <tcp_close_shutdown+0x204>)
   17f1e:	681a      	ldr	r2, [r3, #0]
   17f20:	4294      	cmp	r4, r2
   17f22:	d042      	beq.n	17faa <tcp_close_shutdown+0xf2>
   17f24:	2a00      	cmp	r2, #0
   17f26:	d042      	beq.n	17fae <tcp_close_shutdown+0xf6>
   17f28:	68d3      	ldr	r3, [r2, #12]
   17f2a:	429c      	cmp	r4, r3
   17f2c:	f000 80ad 	beq.w	1808a <tcp_close_shutdown+0x1d2>
   17f30:	2b00      	cmp	r3, #0
   17f32:	d03c      	beq.n	17fae <tcp_close_shutdown+0xf6>
   17f34:	68da      	ldr	r2, [r3, #12]
   17f36:	4294      	cmp	r4, r2
   17f38:	f000 80a8 	beq.w	1808c <tcp_close_shutdown+0x1d4>
   17f3c:	4613      	mov	r3, r2
   17f3e:	e7f7      	b.n	17f30 <tcp_close_shutdown+0x78>
  TCP_RMV(pcblist, pcb);
   17f40:	4b5e      	ldr	r3, [pc, #376]	; (180bc <tcp_close_shutdown+0x204>)
   17f42:	681a      	ldr	r2, [r3, #0]
   17f44:	4294      	cmp	r4, r2
   17f46:	d03f      	beq.n	17fc8 <tcp_close_shutdown+0x110>
   17f48:	2a00      	cmp	r2, #0
   17f4a:	d03f      	beq.n	17fcc <tcp_close_shutdown+0x114>
   17f4c:	68d3      	ldr	r3, [r2, #12]
   17f4e:	429c      	cmp	r4, r3
   17f50:	f000 809f 	beq.w	18092 <tcp_close_shutdown+0x1da>
   17f54:	2b00      	cmp	r3, #0
   17f56:	d039      	beq.n	17fcc <tcp_close_shutdown+0x114>
   17f58:	68da      	ldr	r2, [r3, #12]
   17f5a:	4294      	cmp	r4, r2
   17f5c:	f000 809a 	beq.w	18094 <tcp_close_shutdown+0x1dc>
   17f60:	4613      	mov	r3, r2
   17f62:	e7f7      	b.n	17f54 <tcp_close_shutdown+0x9c>
      if (pcb->local_port != 0) {
   17f64:	8ae3      	ldrh	r3, [r4, #22]
   17f66:	b1cb      	cbz	r3, 17f9c <tcp_close_shutdown+0xe4>
        TCP_RMV(&tcp_bound_pcbs, pcb);
   17f68:	4b55      	ldr	r3, [pc, #340]	; (180c0 <tcp_close_shutdown+0x208>)
   17f6a:	681a      	ldr	r2, [r3, #0]
   17f6c:	4294      	cmp	r4, r2
   17f6e:	d011      	beq.n	17f94 <tcp_close_shutdown+0xdc>
   17f70:	b192      	cbz	r2, 17f98 <tcp_close_shutdown+0xe0>
   17f72:	68d3      	ldr	r3, [r2, #12]
   17f74:	429c      	cmp	r4, r3
   17f76:	f000 8094 	beq.w	180a2 <tcp_close_shutdown+0x1ea>
   17f7a:	b16b      	cbz	r3, 17f98 <tcp_close_shutdown+0xe0>
   17f7c:	68da      	ldr	r2, [r3, #12]
   17f7e:	4294      	cmp	r4, r2
   17f80:	f000 8090 	beq.w	180a4 <tcp_close_shutdown+0x1ec>
   17f84:	4613      	mov	r3, r2
   17f86:	e7f8      	b.n	17f7a <tcp_close_shutdown+0xc2>
    if ((pcb->refused_data != NULL) || (pcb->rcv_wnd != TCP_WND_MAX(pcb))) {
   17f88:	8d21      	ldrh	r1, [r4, #40]	; 0x28
   17f8a:	f241 62d0 	movw	r2, #5840	; 0x16d0
   17f8e:	4291      	cmp	r1, r2
   17f90:	d1b0      	bne.n	17ef4 <tcp_close_shutdown+0x3c>
   17f92:	e79a      	b.n	17eca <tcp_close_shutdown+0x12>
        TCP_RMV(&tcp_bound_pcbs, pcb);
   17f94:	68e2      	ldr	r2, [r4, #12]
   17f96:	601a      	str	r2, [r3, #0]
   17f98:	2300      	movs	r3, #0
   17f9a:	60e3      	str	r3, [r4, #12]
  memp_free(MEMP_TCP_PCB, pcb);
   17f9c:	4621      	mov	r1, r4
   17f9e:	2002      	movs	r0, #2
   17fa0:	f7ff f8d2 	bl	17148 <memp_free>
      return ERR_OK;
   17fa4:	2000      	movs	r0, #0
}
   17fa6:	b005      	add	sp, #20
   17fa8:	bd30      	pop	{r4, r5, pc}
      TCP_RMV_ACTIVE(pcb);
   17faa:	68e2      	ldr	r2, [r4, #12]
   17fac:	601a      	str	r2, [r3, #0]
      if (tcp_input_pcb == pcb) {
   17fae:	4b45      	ldr	r3, [pc, #276]	; (180c4 <tcp_close_shutdown+0x20c>)
      TCP_RMV_ACTIVE(pcb);
   17fb0:	4a45      	ldr	r2, [pc, #276]	; (180c8 <tcp_close_shutdown+0x210>)
      if (tcp_input_pcb == pcb) {
   17fb2:	681b      	ldr	r3, [r3, #0]
      TCP_RMV_ACTIVE(pcb);
   17fb4:	2101      	movs	r1, #1
   17fb6:	2500      	movs	r5, #0
      if (tcp_input_pcb == pcb) {
   17fb8:	429c      	cmp	r4, r3
      TCP_RMV_ACTIVE(pcb);
   17fba:	7011      	strb	r1, [r2, #0]
   17fbc:	60e5      	str	r5, [r4, #12]
      if (tcp_input_pcb == pcb) {
   17fbe:	d1ed      	bne.n	17f9c <tcp_close_shutdown+0xe4>
        tcp_trigger_input_pcb_close();
   17fc0:	f002 f928 	bl	1a214 <tcp_trigger_input_pcb_close>
      return ERR_OK;
   17fc4:	4628      	mov	r0, r5
   17fc6:	e790      	b.n	17eea <tcp_close_shutdown+0x32>
  TCP_RMV(pcblist, pcb);
   17fc8:	68e2      	ldr	r2, [r4, #12]
   17fca:	601a      	str	r2, [r3, #0]
   17fcc:	2300      	movs	r3, #0
   17fce:	60e3      	str	r3, [r4, #12]
   17fd0:	4620      	mov	r0, r4
   17fd2:	f7ff ff31 	bl	17e38 <tcp_pcb_purge.part.1>
  if ((pcb->state != TIME_WAIT) &&
   17fd6:	7d23      	ldrb	r3, [r4, #20]
   17fd8:	2b0a      	cmp	r3, #10
   17fda:	d00a      	beq.n	17ff2 <tcp_close_shutdown+0x13a>
   17fdc:	2b01      	cmp	r3, #1
   17fde:	d008      	beq.n	17ff2 <tcp_close_shutdown+0x13a>
      (pcb->flags & TF_ACK_DELAY)) {
   17fe0:	8b63      	ldrh	r3, [r4, #26]
      (pcb->state != LISTEN) &&
   17fe2:	07da      	lsls	r2, r3, #31
   17fe4:	d505      	bpl.n	17ff2 <tcp_close_shutdown+0x13a>
    tcp_ack_now(pcb);
   17fe6:	f043 0302 	orr.w	r3, r3, #2
   17fea:	8363      	strh	r3, [r4, #26]
    tcp_output(pcb);
   17fec:	4620      	mov	r0, r4
   17fee:	f002 fc61 	bl	1a8b4 <tcp_output>
  pcb->state = CLOSED;
   17ff2:	2500      	movs	r5, #0
      TCP_PCB_REMOVE_ACTIVE(pcb);
   17ff4:	4b34      	ldr	r3, [pc, #208]	; (180c8 <tcp_close_shutdown+0x210>)
  pcb->state = CLOSED;
   17ff6:	7525      	strb	r5, [r4, #20]
      TCP_PCB_REMOVE_ACTIVE(pcb);
   17ff8:	2201      	movs	r2, #1
  pcb->local_port = 0;
   17ffa:	82e5      	strh	r5, [r4, #22]
  memp_free(MEMP_TCP_PCB, pcb);
   17ffc:	4621      	mov	r1, r4
   17ffe:	2002      	movs	r0, #2
      TCP_PCB_REMOVE_ACTIVE(pcb);
   18000:	701a      	strb	r2, [r3, #0]
  memp_free(MEMP_TCP_PCB, pcb);
   18002:	f7ff f8a1 	bl	17148 <memp_free>
  return ERR_OK;
   18006:	4628      	mov	r0, r5
}
   18008:	b005      	add	sp, #20
   1800a:	bd30      	pop	{r4, r5, pc}
   1800c:	492f      	ldr	r1, [pc, #188]	; (180cc <tcp_close_shutdown+0x214>)
      pcb->listener = NULL;
   1800e:	2000      	movs	r0, #0
   18010:	f101 050c 	add.w	r5, r1, #12
    tcp_remove_listener(*tcp_pcb_lists[i], (struct tcp_pcb_listen *)pcb);
   18014:	f851 3b04 	ldr.w	r3, [r1], #4
   18018:	681b      	ldr	r3, [r3, #0]
  for (pcb = list; pcb != NULL; pcb = pcb->next) {
   1801a:	b133      	cbz	r3, 1802a <tcp_close_shutdown+0x172>
    if (pcb->listener == lpcb) {
   1801c:	6fda      	ldr	r2, [r3, #124]	; 0x7c
   1801e:	4294      	cmp	r4, r2
      pcb->listener = NULL;
   18020:	bf08      	it	eq
   18022:	67d8      	streq	r0, [r3, #124]	; 0x7c
  for (pcb = list; pcb != NULL; pcb = pcb->next) {
   18024:	68db      	ldr	r3, [r3, #12]
   18026:	2b00      	cmp	r3, #0
   18028:	d1f8      	bne.n	1801c <tcp_close_shutdown+0x164>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
   1802a:	42a9      	cmp	r1, r5
   1802c:	d1f2      	bne.n	18014 <tcp_close_shutdown+0x15c>
  TCP_RMV(pcblist, pcb);
   1802e:	4b28      	ldr	r3, [pc, #160]	; (180d0 <tcp_close_shutdown+0x218>)
   18030:	681a      	ldr	r2, [r3, #0]
   18032:	4294      	cmp	r4, r2
   18034:	d009      	beq.n	1804a <tcp_close_shutdown+0x192>
   18036:	b152      	cbz	r2, 1804e <tcp_close_shutdown+0x196>
   18038:	68d3      	ldr	r3, [r2, #12]
   1803a:	429c      	cmp	r4, r3
   1803c:	d02d      	beq.n	1809a <tcp_close_shutdown+0x1e2>
   1803e:	b133      	cbz	r3, 1804e <tcp_close_shutdown+0x196>
   18040:	68da      	ldr	r2, [r3, #12]
   18042:	4294      	cmp	r4, r2
   18044:	d02a      	beq.n	1809c <tcp_close_shutdown+0x1e4>
   18046:	4613      	mov	r3, r2
   18048:	e7f9      	b.n	1803e <tcp_close_shutdown+0x186>
   1804a:	68e2      	ldr	r2, [r4, #12]
   1804c:	601a      	str	r2, [r3, #0]
   1804e:	2500      	movs	r5, #0
   18050:	60e5      	str	r5, [r4, #12]
  pcb->state = CLOSED;
   18052:	7525      	strb	r5, [r4, #20]
  pcb->local_port = 0;
   18054:	82e5      	strh	r5, [r4, #22]
  memp_free(MEMP_TCP_PCB_LISTEN, pcb);
   18056:	4621      	mov	r1, r4
   18058:	2003      	movs	r0, #3
   1805a:	f7ff f875 	bl	17148 <memp_free>
  return ERR_OK;
   1805e:	4628      	mov	r0, r5
}
   18060:	b005      	add	sp, #20
   18062:	bd30      	pop	{r4, r5, pc}
      err = tcp_send_fin(pcb);
   18064:	4620      	mov	r0, r4
   18066:	f002 f9d3 	bl	1a410 <tcp_send_fin>
      if (err == ERR_OK) {
   1806a:	b928      	cbnz	r0, 18078 <tcp_close_shutdown+0x1c0>
        pcb->state = FIN_WAIT_1;
   1806c:	2305      	movs	r3, #5
   1806e:	7523      	strb	r3, [r4, #20]
    tcp_output(pcb);
   18070:	4620      	mov	r0, r4
   18072:	f002 fc1f 	bl	1a8b4 <tcp_output>
   18076:	e737      	b.n	17ee8 <tcp_close_shutdown+0x30>
  } else if (err == ERR_MEM) {
   18078:	1c43      	adds	r3, r0, #1
   1807a:	f47f af36 	bne.w	17eea <tcp_close_shutdown+0x32>
    tcp_set_flags(pcb, TF_CLOSEPEND);
   1807e:	8b63      	ldrh	r3, [r4, #26]
   18080:	f043 0308 	orr.w	r3, r3, #8
   18084:	8363      	strh	r3, [r4, #26]
    return ERR_OK;
   18086:	2000      	movs	r0, #0
   18088:	e72f      	b.n	17eea <tcp_close_shutdown+0x32>
      TCP_RMV_ACTIVE(pcb);
   1808a:	4613      	mov	r3, r2
   1808c:	68e2      	ldr	r2, [r4, #12]
   1808e:	60da      	str	r2, [r3, #12]
   18090:	e78d      	b.n	17fae <tcp_close_shutdown+0xf6>
  TCP_RMV(pcblist, pcb);
   18092:	4613      	mov	r3, r2
   18094:	68e2      	ldr	r2, [r4, #12]
   18096:	60da      	str	r2, [r3, #12]
   18098:	e798      	b.n	17fcc <tcp_close_shutdown+0x114>
   1809a:	4613      	mov	r3, r2
   1809c:	68e2      	ldr	r2, [r4, #12]
   1809e:	60da      	str	r2, [r3, #12]
   180a0:	e7d5      	b.n	1804e <tcp_close_shutdown+0x196>
        TCP_RMV(&tcp_bound_pcbs, pcb);
   180a2:	4613      	mov	r3, r2
   180a4:	68e2      	ldr	r2, [r4, #12]
   180a6:	60da      	str	r2, [r3, #12]
   180a8:	e776      	b.n	17f98 <tcp_close_shutdown+0xe0>
      err = tcp_send_fin(pcb);
   180aa:	4620      	mov	r0, r4
   180ac:	f002 f9b0 	bl	1a410 <tcp_send_fin>
      if (err == ERR_OK) {
   180b0:	2800      	cmp	r0, #0
   180b2:	d1e1      	bne.n	18078 <tcp_close_shutdown+0x1c0>
        pcb->state = LAST_ACK;
   180b4:	2309      	movs	r3, #9
   180b6:	7523      	strb	r3, [r4, #20]
   180b8:	e7da      	b.n	18070 <tcp_close_shutdown+0x1b8>
   180ba:	bf00      	nop
   180bc:	2000a3e8 	.word	0x2000a3e8
   180c0:	2000a3f4 	.word	0x2000a3f4
   180c4:	2000a3fc 	.word	0x2000a3fc
   180c8:	2000a3e4 	.word	0x2000a3e4
   180cc:	0002d634 	.word	0x0002d634
   180d0:	2000a3f0 	.word	0x2000a3f0

000180d4 <tcp_recv_null>:
  LWIP_ERROR("tcp_recv_null: invalid pcb", pcb != NULL, return ERR_ARG);
   180d4:	2900      	cmp	r1, #0
   180d6:	d046      	beq.n	18166 <tcp_recv_null+0x92>
{
   180d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if (p != NULL) {
   180da:	b36a      	cbz	r2, 18138 <tcp_recv_null+0x64>
  rcv_wnd = (tcpwnd_size_t)(pcb->rcv_wnd + len);
   180dc:	8d08      	ldrh	r0, [r1, #40]	; 0x28
   180de:	8915      	ldrh	r5, [r2, #8]
   180e0:	4405      	add	r5, r0
   180e2:	b2ad      	uxth	r5, r5
  if ((rcv_wnd > TCP_WND_MAX(pcb)) || (rcv_wnd < pcb->rcv_wnd)) {
   180e4:	f241 63d0 	movw	r3, #5840	; 0x16d0
   180e8:	429d      	cmp	r5, r3
   180ea:	d921      	bls.n	18130 <tcp_recv_null+0x5c>
    pcb->rcv_wnd = TCP_WND_MAX(pcb);
   180ec:	461d      	mov	r5, r3
   180ee:	4608      	mov	r0, r1
  new_right_edge = pcb->rcv_nxt + pcb->rcv_wnd;
   180f0:	6a4e      	ldr	r6, [r1, #36]	; 0x24
  if (TCP_SEQ_GEQ(new_right_edge, pcb->rcv_ann_right_edge + LWIP_MIN((TCP_WND / 2), pcb->mss))) {
   180f2:	6ac9      	ldr	r1, [r1, #44]	; 0x2c
   180f4:	8505      	strh	r5, [r0, #40]	; 0x28
   180f6:	4614      	mov	r4, r2
   180f8:	8e42      	ldrh	r2, [r0, #50]	; 0x32
   180fa:	f640 3768 	movw	r7, #2920	; 0xb68
   180fe:	42ba      	cmp	r2, r7
   18100:	bf94      	ite	ls
   18102:	188a      	addls	r2, r1, r2
   18104:	19ca      	addhi	r2, r1, r7
  new_right_edge = pcb->rcv_nxt + pcb->rcv_wnd;
   18106:	4433      	add	r3, r6
  if (TCP_SEQ_GEQ(new_right_edge, pcb->rcv_ann_right_edge + LWIP_MIN((TCP_WND / 2), pcb->mss))) {
   18108:	1a9a      	subs	r2, r3, r2
   1810a:	2a00      	cmp	r2, #0
   1810c:	db23      	blt.n	18156 <tcp_recv_null+0x82>
    return new_right_edge - pcb->rcv_ann_right_edge;
   1810e:	1a5b      	subs	r3, r3, r1
  if (wnd_inflation >= TCP_WND_UPDATE_THRESHOLD) {
   18110:	f240 52b3 	movw	r2, #1459	; 0x5b3
   18114:	4293      	cmp	r3, r2
    pcb->rcv_ann_wnd = pcb->rcv_wnd;
   18116:	8545      	strh	r5, [r0, #42]	; 0x2a
  if (wnd_inflation >= TCP_WND_UPDATE_THRESHOLD) {
   18118:	d905      	bls.n	18126 <tcp_recv_null+0x52>
    tcp_ack_now(pcb);
   1811a:	8b43      	ldrh	r3, [r0, #26]
   1811c:	f043 0302 	orr.w	r3, r3, #2
   18120:	8343      	strh	r3, [r0, #26]
    tcp_output(pcb);
   18122:	f002 fbc7 	bl	1a8b4 <tcp_output>
    pbuf_free(p);
   18126:	4620      	mov	r0, r4
   18128:	f7ff fb60 	bl	177ec <pbuf_free>
  return ERR_OK;
   1812c:	2000      	movs	r0, #0
   1812e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  if ((rcv_wnd > TCP_WND_MAX(pcb)) || (rcv_wnd < pcb->rcv_wnd)) {
   18130:	42a8      	cmp	r0, r5
   18132:	d8db      	bhi.n	180ec <tcp_recv_null+0x18>
   18134:	462b      	mov	r3, r5
   18136:	e7da      	b.n	180ee <tcp_recv_null+0x1a>
  } else if (err == ERR_OK) {
   18138:	2b00      	cmp	r3, #0
   1813a:	d1f7      	bne.n	1812c <tcp_recv_null+0x58>
  if (pcb->state != LISTEN) {
   1813c:	7d0b      	ldrb	r3, [r1, #20]
   1813e:	2b01      	cmp	r3, #1
   18140:	d003      	beq.n	1814a <tcp_recv_null+0x76>
    tcp_set_flags(pcb, TF_RXCLOSED);
   18142:	8b4b      	ldrh	r3, [r1, #26]
   18144:	f043 0310 	orr.w	r3, r3, #16
   18148:	834b      	strh	r3, [r1, #26]
  return tcp_close_shutdown(pcb, 1);
   1814a:	4608      	mov	r0, r1
}
   1814c:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
  return tcp_close_shutdown(pcb, 1);
   18150:	2101      	movs	r1, #1
   18152:	f7ff beb1 	b.w	17eb8 <tcp_close_shutdown>
    if (TCP_SEQ_GT(pcb->rcv_nxt, pcb->rcv_ann_right_edge)) {
   18156:	1a73      	subs	r3, r6, r1
   18158:	2b00      	cmp	r3, #0
   1815a:	dd02      	ble.n	18162 <tcp_recv_null+0x8e>
   1815c:	2300      	movs	r3, #0
   1815e:	8543      	strh	r3, [r0, #42]	; 0x2a
   18160:	e7e1      	b.n	18126 <tcp_recv_null+0x52>
      u32_t new_rcv_ann_wnd = pcb->rcv_ann_right_edge - pcb->rcv_nxt;
   18162:	1b8b      	subs	r3, r1, r6
   18164:	e7fb      	b.n	1815e <tcp_recv_null+0x8a>
  LWIP_ERROR("tcp_recv_null: invalid pcb", pcb != NULL, return ERR_ARG);
   18166:	f06f 000f 	mvn.w	r0, #15
   1816a:	4770      	bx	lr

0001816c <tcp_init>:
{
   1816c:	b508      	push	{r3, lr}
  tcp_port = TCP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
   1816e:	f00f ff07 	bl	27f80 <rand>
   18172:	4b03      	ldr	r3, [pc, #12]	; (18180 <tcp_init+0x14>)
   18174:	ea6f 4080 	mvn.w	r0, r0, lsl #18
   18178:	ea6f 4090 	mvn.w	r0, r0, lsr #18
   1817c:	8018      	strh	r0, [r3, #0]
   1817e:	bd08      	pop	{r3, pc}
   18180:	200000f0 	.word	0x200000f0

00018184 <tcp_free>:
  memp_free(MEMP_TCP_PCB, pcb);
   18184:	4601      	mov	r1, r0
   18186:	2002      	movs	r0, #2
   18188:	f7fe bfde 	b.w	17148 <memp_free>

0001818c <tcp_abandon>:
{
   1818c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   18190:	b087      	sub	sp, #28
   18192:	9105      	str	r1, [sp, #20]
  LWIP_ERROR("tcp_abandon: invalid pcb", pcb != NULL, return);
   18194:	2800      	cmp	r0, #0
   18196:	d065      	beq.n	18264 <tcp_abandon+0xd8>
  if (pcb->state == TIME_WAIT) {
   18198:	7d01      	ldrb	r1, [r0, #20]
   1819a:	290a      	cmp	r1, #10
   1819c:	4604      	mov	r4, r0
   1819e:	f000 80a9 	beq.w	182f4 <tcp_abandon+0x168>
    seqno = pcb->snd_nxt;
   181a2:	f8d0 a050 	ldr.w	sl, [r0, #80]	; 0x50
    ackno = pcb->rcv_nxt;
   181a6:	f8d0 b024 	ldr.w	fp, [r0, #36]	; 0x24
    errf = pcb->errf;
   181aa:	f8d0 8090 	ldr.w	r8, [r0, #144]	; 0x90
    errf_arg = pcb->callback_arg;
   181ae:	f8d0 9010 	ldr.w	r9, [r0, #16]
    if (pcb->state == CLOSED) {
   181b2:	2900      	cmp	r1, #0
   181b4:	d159      	bne.n	1826a <tcp_abandon+0xde>
      if (pcb->local_port != 0) {
   181b6:	8ac6      	ldrh	r6, [r0, #22]
   181b8:	2e00      	cmp	r6, #0
   181ba:	d13f      	bne.n	1823c <tcp_abandon+0xb0>
    int send_rst = 0;
   181bc:	9605      	str	r6, [sp, #20]
    if (pcb->unacked != NULL) {
   181be:	6f27      	ldr	r7, [r4, #112]	; 0x70
   181c0:	b167      	cbz	r7, 181dc <tcp_abandon+0x50>
    if (seg->p != NULL) {
   181c2:	687b      	ldr	r3, [r7, #4]
    struct tcp_seg *next = seg->next;
   181c4:	683d      	ldr	r5, [r7, #0]
      pbuf_free(seg->p);
   181c6:	4618      	mov	r0, r3
    if (seg->p != NULL) {
   181c8:	b10b      	cbz	r3, 181ce <tcp_abandon+0x42>
      pbuf_free(seg->p);
   181ca:	f7ff fb0f 	bl	177ec <pbuf_free>
    memp_free(MEMP_TCP_SEG, seg);
   181ce:	4639      	mov	r1, r7
   181d0:	2004      	movs	r0, #4
   181d2:	f7fe ffb9 	bl	17148 <memp_free>
  while (seg != NULL) {
   181d6:	462f      	mov	r7, r5
   181d8:	2d00      	cmp	r5, #0
   181da:	d1f2      	bne.n	181c2 <tcp_abandon+0x36>
    if (pcb->unsent != NULL) {
   181dc:	6ee7      	ldr	r7, [r4, #108]	; 0x6c
   181de:	b167      	cbz	r7, 181fa <tcp_abandon+0x6e>
    if (seg->p != NULL) {
   181e0:	687b      	ldr	r3, [r7, #4]
    struct tcp_seg *next = seg->next;
   181e2:	683d      	ldr	r5, [r7, #0]
      pbuf_free(seg->p);
   181e4:	4618      	mov	r0, r3
    if (seg->p != NULL) {
   181e6:	b10b      	cbz	r3, 181ec <tcp_abandon+0x60>
      pbuf_free(seg->p);
   181e8:	f7ff fb00 	bl	177ec <pbuf_free>
    memp_free(MEMP_TCP_SEG, seg);
   181ec:	4639      	mov	r1, r7
   181ee:	2004      	movs	r0, #4
   181f0:	f7fe ffaa 	bl	17148 <memp_free>
  while (seg != NULL) {
   181f4:	462f      	mov	r7, r5
   181f6:	2d00      	cmp	r5, #0
   181f8:	d1f2      	bne.n	181e0 <tcp_abandon+0x54>
    if (pcb->ooseq != NULL) {
   181fa:	6f67      	ldr	r7, [r4, #116]	; 0x74
   181fc:	b167      	cbz	r7, 18218 <tcp_abandon+0x8c>
    if (seg->p != NULL) {
   181fe:	687b      	ldr	r3, [r7, #4]
    struct tcp_seg *next = seg->next;
   18200:	683d      	ldr	r5, [r7, #0]
      pbuf_free(seg->p);
   18202:	4618      	mov	r0, r3
    if (seg->p != NULL) {
   18204:	b10b      	cbz	r3, 1820a <tcp_abandon+0x7e>
      pbuf_free(seg->p);
   18206:	f7ff faf1 	bl	177ec <pbuf_free>
    memp_free(MEMP_TCP_SEG, seg);
   1820a:	4639      	mov	r1, r7
   1820c:	2004      	movs	r0, #4
   1820e:	f7fe ff9b 	bl	17148 <memp_free>
  while (seg != NULL) {
   18212:	462f      	mov	r7, r5
   18214:	2d00      	cmp	r5, #0
   18216:	d1f2      	bne.n	181fe <tcp_abandon+0x72>
    if (send_rst) {
   18218:	9b05      	ldr	r3, [sp, #20]
   1821a:	2b00      	cmp	r3, #0
   1821c:	d152      	bne.n	182c4 <tcp_abandon+0x138>
  memp_free(MEMP_TCP_PCB, pcb);
   1821e:	4621      	mov	r1, r4
   18220:	2002      	movs	r0, #2
   18222:	f7fe ff91 	bl	17148 <memp_free>
    TCP_EVENT_ERR(last_state, errf, errf_arg, ERR_ABRT);
   18226:	f1b8 0f00 	cmp.w	r8, #0
   1822a:	d01b      	beq.n	18264 <tcp_abandon+0xd8>
   1822c:	4648      	mov	r0, r9
   1822e:	f06f 010c 	mvn.w	r1, #12
   18232:	4643      	mov	r3, r8
}
   18234:	b007      	add	sp, #28
   18236:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    TCP_EVENT_ERR(last_state, errf, errf_arg, ERR_ABRT);
   1823a:	4718      	bx	r3
        TCP_RMV(&tcp_bound_pcbs, pcb);
   1823c:	4b3e      	ldr	r3, [pc, #248]	; (18338 <tcp_abandon+0x1ac>)
   1823e:	681a      	ldr	r2, [r3, #0]
   18240:	4290      	cmp	r0, r2
   18242:	d073      	beq.n	1832c <tcp_abandon+0x1a0>
   18244:	b14a      	cbz	r2, 1825a <tcp_abandon+0xce>
   18246:	68d3      	ldr	r3, [r2, #12]
   18248:	4298      	cmp	r0, r3
   1824a:	d047      	beq.n	182dc <tcp_abandon+0x150>
   1824c:	b12b      	cbz	r3, 1825a <tcp_abandon+0xce>
   1824e:	68da      	ldr	r2, [r3, #12]
   18250:	4294      	cmp	r4, r2
   18252:	d044      	beq.n	182de <tcp_abandon+0x152>
   18254:	4613      	mov	r3, r2
   18256:	2b00      	cmp	r3, #0
   18258:	d1f9      	bne.n	1824e <tcp_abandon+0xc2>
   1825a:	2300      	movs	r3, #0
    u16_t local_port = 0;
   1825c:	461e      	mov	r6, r3
        TCP_RMV(&tcp_bound_pcbs, pcb);
   1825e:	60e3      	str	r3, [r4, #12]
    int send_rst = 0;
   18260:	9305      	str	r3, [sp, #20]
   18262:	e7ac      	b.n	181be <tcp_abandon+0x32>
}
   18264:	b007      	add	sp, #28
   18266:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  TCP_RMV(pcblist, pcb);
   1826a:	4b34      	ldr	r3, [pc, #208]	; (1833c <tcp_abandon+0x1b0>)
      local_port = pcb->local_port;
   1826c:	8ac6      	ldrh	r6, [r0, #22]
  TCP_RMV(pcblist, pcb);
   1826e:	681a      	ldr	r2, [r3, #0]
   18270:	4290      	cmp	r0, r2
   18272:	d009      	beq.n	18288 <tcp_abandon+0xfc>
   18274:	b152      	cbz	r2, 1828c <tcp_abandon+0x100>
   18276:	68d3      	ldr	r3, [r2, #12]
   18278:	4298      	cmp	r0, r3
   1827a:	d037      	beq.n	182ec <tcp_abandon+0x160>
   1827c:	b133      	cbz	r3, 1828c <tcp_abandon+0x100>
   1827e:	68da      	ldr	r2, [r3, #12]
   18280:	4294      	cmp	r4, r2
   18282:	d034      	beq.n	182ee <tcp_abandon+0x162>
   18284:	4613      	mov	r3, r2
   18286:	e7f9      	b.n	1827c <tcp_abandon+0xf0>
   18288:	68c2      	ldr	r2, [r0, #12]
   1828a:	601a      	str	r2, [r3, #0]
   1828c:	2300      	movs	r3, #0
      pcb->state != TIME_WAIT &&
   1828e:	2901      	cmp	r1, #1
  TCP_RMV(pcblist, pcb);
   18290:	60e3      	str	r3, [r4, #12]
      pcb->state != TIME_WAIT &&
   18292:	d010      	beq.n	182b6 <tcp_abandon+0x12a>
   18294:	4620      	mov	r0, r4
   18296:	f7ff fdcf 	bl	17e38 <tcp_pcb_purge.part.1>
  if ((pcb->state != TIME_WAIT) &&
   1829a:	7d23      	ldrb	r3, [r4, #20]
   1829c:	2b0a      	cmp	r3, #10
   1829e:	d00a      	beq.n	182b6 <tcp_abandon+0x12a>
   182a0:	2b01      	cmp	r3, #1
   182a2:	d008      	beq.n	182b6 <tcp_abandon+0x12a>
      (pcb->flags & TF_ACK_DELAY)) {
   182a4:	8b63      	ldrh	r3, [r4, #26]
      (pcb->state != LISTEN) &&
   182a6:	07da      	lsls	r2, r3, #31
   182a8:	d505      	bpl.n	182b6 <tcp_abandon+0x12a>
    tcp_ack_now(pcb);
   182aa:	f043 0302 	orr.w	r3, r3, #2
   182ae:	8363      	strh	r3, [r4, #26]
    tcp_output(pcb);
   182b0:	4620      	mov	r0, r4
   182b2:	f002 faff 	bl	1a8b4 <tcp_output>
      TCP_PCB_REMOVE_ACTIVE(pcb);
   182b6:	4a22      	ldr	r2, [pc, #136]	; (18340 <tcp_abandon+0x1b4>)
  pcb->state = CLOSED;
   182b8:	2300      	movs	r3, #0
      TCP_PCB_REMOVE_ACTIVE(pcb);
   182ba:	2101      	movs	r1, #1
   182bc:	7011      	strb	r1, [r2, #0]
  pcb->state = CLOSED;
   182be:	7523      	strb	r3, [r4, #20]
  pcb->local_port = 0;
   182c0:	82e3      	strh	r3, [r4, #22]
   182c2:	e77c      	b.n	181be <tcp_abandon+0x32>
      tcp_rst(pcb, seqno, ackno, &pcb->local_ip, &pcb->remote_ip, local_port, pcb->remote_port);
   182c4:	8b23      	ldrh	r3, [r4, #24]
   182c6:	9302      	str	r3, [sp, #8]
   182c8:	1d23      	adds	r3, r4, #4
   182ca:	e88d 0048 	stmia.w	sp, {r3, r6}
   182ce:	465a      	mov	r2, fp
   182d0:	4651      	mov	r1, sl
   182d2:	4623      	mov	r3, r4
   182d4:	4620      	mov	r0, r4
   182d6:	f002 f9f9 	bl	1a6cc <tcp_rst>
   182da:	e7a0      	b.n	1821e <tcp_abandon+0x92>
        TCP_RMV(&tcp_bound_pcbs, pcb);
   182dc:	4613      	mov	r3, r2
   182de:	68e2      	ldr	r2, [r4, #12]
   182e0:	60da      	str	r2, [r3, #12]
   182e2:	2300      	movs	r3, #0
    u16_t local_port = 0;
   182e4:	461e      	mov	r6, r3
        TCP_RMV(&tcp_bound_pcbs, pcb);
   182e6:	60e3      	str	r3, [r4, #12]
    int send_rst = 0;
   182e8:	9305      	str	r3, [sp, #20]
   182ea:	e768      	b.n	181be <tcp_abandon+0x32>
  TCP_RMV(pcblist, pcb);
   182ec:	4613      	mov	r3, r2
   182ee:	68e2      	ldr	r2, [r4, #12]
   182f0:	60da      	str	r2, [r3, #12]
   182f2:	e7cb      	b.n	1828c <tcp_abandon+0x100>
   182f4:	4b13      	ldr	r3, [pc, #76]	; (18344 <tcp_abandon+0x1b8>)
   182f6:	681a      	ldr	r2, [r3, #0]
   182f8:	4290      	cmp	r0, r2
   182fa:	d01a      	beq.n	18332 <tcp_abandon+0x1a6>
   182fc:	b15a      	cbz	r2, 18316 <tcp_abandon+0x18a>
   182fe:	68d3      	ldr	r3, [r2, #12]
   18300:	4298      	cmp	r0, r3
   18302:	d005      	beq.n	18310 <tcp_abandon+0x184>
   18304:	b13b      	cbz	r3, 18316 <tcp_abandon+0x18a>
   18306:	68da      	ldr	r2, [r3, #12]
   18308:	4294      	cmp	r4, r2
   1830a:	d002      	beq.n	18312 <tcp_abandon+0x186>
   1830c:	4613      	mov	r3, r2
   1830e:	e7f9      	b.n	18304 <tcp_abandon+0x178>
   18310:	4613      	mov	r3, r2
   18312:	68e2      	ldr	r2, [r4, #12]
   18314:	60da      	str	r2, [r3, #12]
   18316:	2300      	movs	r3, #0
  memp_free(MEMP_TCP_PCB, pcb);
   18318:	4621      	mov	r1, r4
   1831a:	2002      	movs	r0, #2
  TCP_RMV(pcblist, pcb);
   1831c:	60e3      	str	r3, [r4, #12]
  pcb->state = CLOSED;
   1831e:	7523      	strb	r3, [r4, #20]
  pcb->local_port = 0;
   18320:	82e3      	strh	r3, [r4, #22]
}
   18322:	b007      	add	sp, #28
   18324:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  memp_free(MEMP_TCP_PCB, pcb);
   18328:	f7fe bf0e 	b.w	17148 <memp_free>
        TCP_RMV(&tcp_bound_pcbs, pcb);
   1832c:	68c2      	ldr	r2, [r0, #12]
   1832e:	601a      	str	r2, [r3, #0]
   18330:	e793      	b.n	1825a <tcp_abandon+0xce>
  TCP_RMV(pcblist, pcb);
   18332:	68c2      	ldr	r2, [r0, #12]
   18334:	601a      	str	r2, [r3, #0]
   18336:	e7ee      	b.n	18316 <tcp_abandon+0x18a>
   18338:	2000a3f4 	.word	0x2000a3f4
   1833c:	2000a3e8 	.word	0x2000a3e8
   18340:	2000a3e4 	.word	0x2000a3e4
   18344:	2000a3f8 	.word	0x2000a3f8

00018348 <tcp_abort>:
  tcp_abandon(pcb, 1);
   18348:	2101      	movs	r1, #1
   1834a:	f7ff bf1f 	b.w	1818c <tcp_abandon>
   1834e:	bf00      	nop

00018350 <tcp_update_rcv_ann_wnd>:
{
   18350:	b4f0      	push	{r4, r5, r6, r7}
  new_right_edge = pcb->rcv_nxt + pcb->rcv_wnd;
   18352:	8d05      	ldrh	r5, [r0, #40]	; 0x28
  if (TCP_SEQ_GEQ(new_right_edge, pcb->rcv_ann_right_edge + LWIP_MIN((TCP_WND / 2), pcb->mss))) {
   18354:	6ac4      	ldr	r4, [r0, #44]	; 0x2c
   18356:	8e41      	ldrh	r1, [r0, #50]	; 0x32
  new_right_edge = pcb->rcv_nxt + pcb->rcv_wnd;
   18358:	6a46      	ldr	r6, [r0, #36]	; 0x24
   1835a:	1b2b      	subs	r3, r5, r4
  if (TCP_SEQ_GEQ(new_right_edge, pcb->rcv_ann_right_edge + LWIP_MIN((TCP_WND / 2), pcb->mss))) {
   1835c:	f640 3768 	movw	r7, #2920	; 0xb68
   18360:	42b9      	cmp	r1, r7
{
   18362:	4602      	mov	r2, r0
   18364:	eb03 0006 	add.w	r0, r3, r6
  if (TCP_SEQ_GEQ(new_right_edge, pcb->rcv_ann_right_edge + LWIP_MIN((TCP_WND / 2), pcb->mss))) {
   18368:	bf94      	ite	ls
   1836a:	1a43      	subls	r3, r0, r1
   1836c:	1bc3      	subhi	r3, r0, r7
   1836e:	2b00      	cmp	r3, #0
   18370:	db02      	blt.n	18378 <tcp_update_rcv_ann_wnd+0x28>
    pcb->rcv_ann_wnd = pcb->rcv_wnd;
   18372:	8555      	strh	r5, [r2, #42]	; 0x2a
}
   18374:	bcf0      	pop	{r4, r5, r6, r7}
   18376:	4770      	bx	lr
    if (TCP_SEQ_GT(pcb->rcv_nxt, pcb->rcv_ann_right_edge)) {
   18378:	1b33      	subs	r3, r6, r4
   1837a:	2b00      	cmp	r3, #0
   1837c:	dd04      	ble.n	18388 <tcp_update_rcv_ann_wnd+0x38>
      pcb->rcv_ann_wnd = 0;
   1837e:	2300      	movs	r3, #0
    return 0;
   18380:	4618      	mov	r0, r3
      pcb->rcv_ann_wnd = 0;
   18382:	8553      	strh	r3, [r2, #42]	; 0x2a
}
   18384:	bcf0      	pop	{r4, r5, r6, r7}
   18386:	4770      	bx	lr
      u32_t new_rcv_ann_wnd = pcb->rcv_ann_right_edge - pcb->rcv_nxt;
   18388:	1ba4      	subs	r4, r4, r6
      pcb->rcv_ann_wnd = (tcpwnd_size_t)new_rcv_ann_wnd;
   1838a:	8554      	strh	r4, [r2, #42]	; 0x2a
    return 0;
   1838c:	2000      	movs	r0, #0
}
   1838e:	bcf0      	pop	{r4, r5, r6, r7}
   18390:	4770      	bx	lr
   18392:	bf00      	nop

00018394 <tcp_slowtmr>:
{
   18394:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  ++tcp_ticks;
   18398:	f8df 82c8 	ldr.w	r8, [pc, #712]	; 18664 <tcp_slowtmr+0x2d0>
  ++tcp_timer_ctr;
   1839c:	f8df a2c8 	ldr.w	sl, [pc, #712]	; 18668 <tcp_slowtmr+0x2d4>
  ++tcp_ticks;
   183a0:	f8d8 2000 	ldr.w	r2, [r8]
  ++tcp_timer_ctr;
   183a4:	f89a 3000 	ldrb.w	r3, [sl]
        tcp_active_pcbs_changed = 0;
   183a8:	f8df b2c0 	ldr.w	fp, [pc, #704]	; 1866c <tcp_slowtmr+0x2d8>
  ++tcp_ticks;
   183ac:	3201      	adds	r2, #1
  ++tcp_timer_ctr;
   183ae:	3301      	adds	r3, #1
{
   183b0:	b087      	sub	sp, #28
  ++tcp_ticks;
   183b2:	f8c8 2000 	str.w	r2, [r8]
  ++tcp_timer_ctr;
   183b6:	f88a 3000 	strb.w	r3, [sl]
  pcb = tcp_active_pcbs;
   183ba:	4ba5      	ldr	r3, [pc, #660]	; (18650 <tcp_slowtmr+0x2bc>)
   183bc:	681c      	ldr	r4, [r3, #0]
  while (pcb != NULL) {
   183be:	2c00      	cmp	r4, #0
   183c0:	d075      	beq.n	184ae <tcp_slowtmr+0x11a>
   183c2:	f04f 0900 	mov.w	r9, #0
    if (pcb->last_timer == tcp_timer_ctr) {
   183c6:	f89a 3000 	ldrb.w	r3, [sl]
   183ca:	7fa2      	ldrb	r2, [r4, #30]
   183cc:	429a      	cmp	r2, r3
   183ce:	f000 80d1 	beq.w	18574 <tcp_slowtmr+0x1e0>
    if (pcb->state == SYN_SENT && pcb->nrtx >= TCP_SYNMAXRTX) {
   183d2:	7d22      	ldrb	r2, [r4, #20]
    pcb->last_timer = tcp_timer_ctr;
   183d4:	77a3      	strb	r3, [r4, #30]
    if (pcb->state == SYN_SENT && pcb->nrtx >= TCP_SYNMAXRTX) {
   183d6:	2a02      	cmp	r2, #2
   183d8:	f894 3042 	ldrb.w	r3, [r4, #66]	; 0x42
   183dc:	f000 80d7 	beq.w	1858e <tcp_slowtmr+0x1fa>
    } else if (pcb->nrtx >= TCP_MAXRTX) {
   183e0:	2b0b      	cmp	r3, #11
   183e2:	f200 80c4 	bhi.w	1856e <tcp_slowtmr+0x1da>
      if (pcb->persist_backoff > 0) {
   183e6:	f894 7099 	ldrb.w	r7, [r4, #153]	; 0x99
   183ea:	2f00      	cmp	r7, #0
   183ec:	f000 8140 	beq.w	18670 <tcp_slowtmr+0x2dc>
        if (pcb->persist_probe >= TCP_MAXRTX) {
   183f0:	f894 309a 	ldrb.w	r3, [r4, #154]	; 0x9a
   183f4:	2b0b      	cmp	r3, #11
   183f6:	f200 80ba 	bhi.w	1856e <tcp_slowtmr+0x1da>
          u8_t backoff_cnt = tcp_persist_backoff[pcb->persist_backoff - 1];
   183fa:	4b96      	ldr	r3, [pc, #600]	; (18654 <tcp_slowtmr+0x2c0>)
   183fc:	441f      	add	r7, r3
          if (pcb->persist_cnt < backoff_cnt) {
   183fe:	f894 3098 	ldrb.w	r3, [r4, #152]	; 0x98
          u8_t backoff_cnt = tcp_persist_backoff[pcb->persist_backoff - 1];
   18402:	7bf9      	ldrb	r1, [r7, #15]
          if (pcb->persist_cnt < backoff_cnt) {
   18404:	4299      	cmp	r1, r3
   18406:	f200 81ab 	bhi.w	18760 <tcp_slowtmr+0x3cc>
            if (pcb->snd_wnd == 0) {
   1840a:	f8b4 7060 	ldrh.w	r7, [r4, #96]	; 0x60
   1840e:	2f00      	cmp	r7, #0
   18410:	f040 8089 	bne.w	18526 <tcp_slowtmr+0x192>
              if (tcp_zero_window_probe(pcb) != ERR_OK) {
   18414:	4620      	mov	r0, r4
   18416:	f002 fca1 	bl	1ad5c <tcp_zero_window_probe>
   1841a:	2800      	cmp	r0, #0
   1841c:	f000 808a 	beq.w	18534 <tcp_slowtmr+0x1a0>
   18420:	7d22      	ldrb	r2, [r4, #20]
              if (pcb->persist_backoff < sizeof(tcp_persist_backoff)) {
   18422:	2101      	movs	r1, #1
    if (pcb->state == FIN_WAIT_2) {
   18424:	2a06      	cmp	r2, #6
   18426:	f000 8096 	beq.w	18556 <tcp_slowtmr+0x1c2>
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
   1842a:	7a66      	ldrb	r6, [r4, #9]
   1842c:	f016 0608 	ands.w	r6, r6, #8
   18430:	f000 80ab 	beq.w	1858a <tcp_slowtmr+0x1f6>
   18434:	2a04      	cmp	r2, #4
   18436:	f000 80e0 	beq.w	185fa <tcp_slowtmr+0x266>
        ((pcb->state == ESTABLISHED) ||
   1843a:	2a07      	cmp	r2, #7
   1843c:	f000 80dd 	beq.w	185fa <tcp_slowtmr+0x266>
    pcb_reset = 0;
   18440:	2300      	movs	r3, #0
   18442:	9305      	str	r3, [sp, #20]
    if (pcb->ooseq != NULL &&
   18444:	6f66      	ldr	r6, [r4, #116]	; 0x74
   18446:	b156      	cbz	r6, 1845e <tcp_slowtmr+0xca>
        (tcp_ticks - pcb->tmr >= (u32_t)pcb->rto * TCP_OOSEQ_TIMEOUT)) {
   18448:	f8d8 2000 	ldr.w	r2, [r8]
   1844c:	6a20      	ldr	r0, [r4, #32]
   1844e:	f9b4 3040 	ldrsh.w	r3, [r4, #64]	; 0x40
   18452:	1a12      	subs	r2, r2, r0
   18454:	eb03 0343 	add.w	r3, r3, r3, lsl #1
    if (pcb->ooseq != NULL &&
   18458:	ebb2 0f43 	cmp.w	r2, r3, lsl #1
   1845c:	d249      	bcs.n	184f2 <tcp_slowtmr+0x15e>
    if (pcb->state == SYN_RCVD) {
   1845e:	7d23      	ldrb	r3, [r4, #20]
   18460:	2b03      	cmp	r3, #3
   18462:	d057      	beq.n	18514 <tcp_slowtmr+0x180>
    if (pcb->state == LAST_ACK) {
   18464:	2b09      	cmp	r3, #9
   18466:	f000 8099 	beq.w	1859c <tcp_slowtmr+0x208>
    if (pcb_remove) {
   1846a:	2f00      	cmp	r7, #0
   1846c:	f040 816f 	bne.w	1874e <tcp_slowtmr+0x3ba>
      ++prev->polltmr;
   18470:	7f23      	ldrb	r3, [r4, #28]
      if (prev->polltmr >= prev->pollinterval) {
   18472:	7f62      	ldrb	r2, [r4, #29]
      pcb = pcb->next;
   18474:	68e5      	ldr	r5, [r4, #12]
      ++prev->polltmr;
   18476:	3301      	adds	r3, #1
   18478:	b2db      	uxtb	r3, r3
      if (prev->polltmr >= prev->pollinterval) {
   1847a:	429a      	cmp	r2, r3
      ++prev->polltmr;
   1847c:	7723      	strb	r3, [r4, #28]
      if (prev->polltmr >= prev->pollinterval) {
   1847e:	d812      	bhi.n	184a6 <tcp_slowtmr+0x112>
        TCP_EVENT_POLL(prev, err);
   18480:	f8d4 208c 	ldr.w	r2, [r4, #140]	; 0x8c
        prev->polltmr = 0;
   18484:	2300      	movs	r3, #0
   18486:	7723      	strb	r3, [r4, #28]
        tcp_active_pcbs_changed = 0;
   18488:	f88b 3000 	strb.w	r3, [fp]
        TCP_EVENT_POLL(prev, err);
   1848c:	2a00      	cmp	r2, #0
   1848e:	f000 8144 	beq.w	1871a <tcp_slowtmr+0x386>
   18492:	4621      	mov	r1, r4
   18494:	6920      	ldr	r0, [r4, #16]
   18496:	4790      	blx	r2
        if (tcp_active_pcbs_changed) {
   18498:	f89b 3000 	ldrb.w	r3, [fp]
   1849c:	2b00      	cmp	r3, #0
   1849e:	d18c      	bne.n	183ba <tcp_slowtmr+0x26>
        if (err == ERR_OK) {
   184a0:	2800      	cmp	r0, #0
   184a2:	f000 813a 	beq.w	1871a <tcp_slowtmr+0x386>
   184a6:	46a1      	mov	r9, r4
      pcb = pcb->next;
   184a8:	462c      	mov	r4, r5
  while (pcb != NULL) {
   184aa:	2c00      	cmp	r4, #0
   184ac:	d18b      	bne.n	183c6 <tcp_slowtmr+0x32>
  pcb = tcp_tw_pcbs;
   184ae:	4e6a      	ldr	r6, [pc, #424]	; (18658 <tcp_slowtmr+0x2c4>)
   184b0:	6834      	ldr	r4, [r6, #0]
  while (pcb != NULL) {
   184b2:	2500      	movs	r5, #0
   184b4:	b1d4      	cbz	r4, 184ec <tcp_slowtmr+0x158>
    if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
   184b6:	f8d8 3000 	ldr.w	r3, [r8]
   184ba:	6a22      	ldr	r2, [r4, #32]
   184bc:	1a9b      	subs	r3, r3, r2
   184be:	2bf0      	cmp	r3, #240	; 0xf0
   184c0:	d95e      	bls.n	18580 <tcp_slowtmr+0x1ec>
  if (pcb->state != CLOSED &&
   184c2:	7d23      	ldrb	r3, [r4, #20]
   184c4:	2b01      	cmp	r3, #1
   184c6:	d904      	bls.n	184d2 <tcp_slowtmr+0x13e>
   184c8:	2b0a      	cmp	r3, #10
   184ca:	d002      	beq.n	184d2 <tcp_slowtmr+0x13e>
   184cc:	4620      	mov	r0, r4
   184ce:	f7ff fcb3 	bl	17e38 <tcp_pcb_purge.part.1>
      if (prev != NULL) {
   184d2:	2d00      	cmp	r5, #0
   184d4:	f000 8151 	beq.w	1877a <tcp_slowtmr+0x3e6>
        prev->next = pcb->next;
   184d8:	68e3      	ldr	r3, [r4, #12]
   184da:	60eb      	str	r3, [r5, #12]
   184dc:	68e7      	ldr	r7, [r4, #12]
  memp_free(MEMP_TCP_PCB, pcb);
   184de:	4621      	mov	r1, r4
   184e0:	2002      	movs	r0, #2
      pcb = pcb->next;
   184e2:	463c      	mov	r4, r7
  memp_free(MEMP_TCP_PCB, pcb);
   184e4:	f7fe fe30 	bl	17148 <memp_free>
  while (pcb != NULL) {
   184e8:	2c00      	cmp	r4, #0
   184ea:	d1e4      	bne.n	184b6 <tcp_slowtmr+0x122>
}
   184ec:	b007      	add	sp, #28
   184ee:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    if (seg->p != NULL) {
   184f2:	6873      	ldr	r3, [r6, #4]
    struct tcp_seg *next = seg->next;
   184f4:	6835      	ldr	r5, [r6, #0]
      pbuf_free(seg->p);
   184f6:	4618      	mov	r0, r3
    if (seg->p != NULL) {
   184f8:	b10b      	cbz	r3, 184fe <tcp_slowtmr+0x16a>
      pbuf_free(seg->p);
   184fa:	f7ff f977 	bl	177ec <pbuf_free>
    memp_free(MEMP_TCP_SEG, seg);
   184fe:	4631      	mov	r1, r6
   18500:	2004      	movs	r0, #4
   18502:	f7fe fe21 	bl	17148 <memp_free>
   18506:	462e      	mov	r6, r5
  while (seg != NULL) {
   18508:	2d00      	cmp	r5, #0
   1850a:	d1f2      	bne.n	184f2 <tcp_slowtmr+0x15e>
    if (pcb->state == SYN_RCVD) {
   1850c:	7d23      	ldrb	r3, [r4, #20]
    pcb->ooseq = NULL;
   1850e:	6765      	str	r5, [r4, #116]	; 0x74
    if (pcb->state == SYN_RCVD) {
   18510:	2b03      	cmp	r3, #3
   18512:	d1a7      	bne.n	18464 <tcp_slowtmr+0xd0>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
   18514:	f8d8 3000 	ldr.w	r3, [r8]
   18518:	6a22      	ldr	r2, [r4, #32]
   1851a:	1a9b      	subs	r3, r3, r2
   1851c:	2b28      	cmp	r3, #40	; 0x28
   1851e:	d843      	bhi.n	185a8 <tcp_slowtmr+0x214>
    if (pcb_remove) {
   18520:	2f00      	cmp	r7, #0
   18522:	d0a5      	beq.n	18470 <tcp_slowtmr+0xdc>
   18524:	e040      	b.n	185a8 <tcp_slowtmr+0x214>
              if (tcp_split_unsent_seg(pcb, (u16_t)pcb->snd_wnd) == ERR_OK) {
   18526:	4639      	mov	r1, r7
   18528:	4620      	mov	r0, r4
   1852a:	f001 fed7 	bl	1a2dc <tcp_split_unsent_seg>
   1852e:	2800      	cmp	r0, #0
   18530:	f000 8126 	beq.w	18780 <tcp_slowtmr+0x3ec>
              if (pcb->persist_backoff < sizeof(tcp_persist_backoff)) {
   18534:	f894 3099 	ldrb.w	r3, [r4, #153]	; 0x99
              pcb->persist_cnt = 0;
   18538:	2700      	movs	r7, #0
              if (pcb->persist_backoff < sizeof(tcp_persist_backoff)) {
   1853a:	2b06      	cmp	r3, #6
              pcb->persist_cnt = 0;
   1853c:	f884 7098 	strb.w	r7, [r4, #152]	; 0x98
              if (pcb->persist_backoff < sizeof(tcp_persist_backoff)) {
   18540:	f63f af6e 	bhi.w	18420 <tcp_slowtmr+0x8c>
   18544:	7d22      	ldrb	r2, [r4, #20]
                pcb->persist_backoff++;
   18546:	3301      	adds	r3, #1
    if (pcb->state == FIN_WAIT_2) {
   18548:	2a06      	cmp	r2, #6
                pcb->persist_backoff++;
   1854a:	f884 3099 	strb.w	r3, [r4, #153]	; 0x99
   1854e:	f04f 0101 	mov.w	r1, #1
    if (pcb->state == FIN_WAIT_2) {
   18552:	f47f af6a 	bne.w	1842a <tcp_slowtmr+0x96>
      if (pcb->flags & TF_RXCLOSED) {
   18556:	8b63      	ldrh	r3, [r4, #26]
   18558:	06db      	lsls	r3, r3, #27
   1855a:	f57f af71 	bpl.w	18440 <tcp_slowtmr+0xac>
        if ((u32_t)(tcp_ticks - pcb->tmr) >
   1855e:	f8d8 3000 	ldr.w	r3, [r8]
   18562:	6a22      	ldr	r2, [r4, #32]
   18564:	1a9b      	subs	r3, r3, r2
          ++pcb_remove;
   18566:	2b28      	cmp	r3, #40	; 0x28
   18568:	bf88      	it	hi
   1856a:	460f      	movhi	r7, r1
   1856c:	e768      	b.n	18440 <tcp_slowtmr+0xac>
   1856e:	2102      	movs	r1, #2
          ++pcb_remove; /* max probes reached */
   18570:	2701      	movs	r7, #1
   18572:	e757      	b.n	18424 <tcp_slowtmr+0x90>
      continue;
   18574:	46a1      	mov	r9, r4
      pcb = pcb->next;
   18576:	68e4      	ldr	r4, [r4, #12]
  while (pcb != NULL) {
   18578:	2c00      	cmp	r4, #0
   1857a:	f47f af24 	bne.w	183c6 <tcp_slowtmr+0x32>
   1857e:	e796      	b.n	184ae <tcp_slowtmr+0x11a>
      pcb = pcb->next;
   18580:	4625      	mov	r5, r4
   18582:	68e4      	ldr	r4, [r4, #12]
  while (pcb != NULL) {
   18584:	2c00      	cmp	r4, #0
   18586:	d196      	bne.n	184b6 <tcp_slowtmr+0x122>
   18588:	e7b0      	b.n	184ec <tcp_slowtmr+0x158>
    pcb_reset = 0;
   1858a:	9605      	str	r6, [sp, #20]
   1858c:	e75a      	b.n	18444 <tcp_slowtmr+0xb0>
    if (pcb->state == SYN_SENT && pcb->nrtx >= TCP_SYNMAXRTX) {
   1858e:	2b05      	cmp	r3, #5
   18590:	f67f af29 	bls.w	183e6 <tcp_slowtmr+0x52>
    pcb_reset = 0;
   18594:	2300      	movs	r3, #0
   18596:	9305      	str	r3, [sp, #20]
      ++pcb_remove;
   18598:	2701      	movs	r7, #1
   1859a:	e753      	b.n	18444 <tcp_slowtmr+0xb0>
      if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
   1859c:	f8d8 3000 	ldr.w	r3, [r8]
   185a0:	6a22      	ldr	r2, [r4, #32]
   185a2:	1a9b      	subs	r3, r3, r2
   185a4:	2bf0      	cmp	r3, #240	; 0xf0
   185a6:	d9bb      	bls.n	18520 <tcp_slowtmr+0x18c>
      tcp_err_fn err_fn = pcb->errf;
   185a8:	f8d4 5090 	ldr.w	r5, [r4, #144]	; 0x90
   185ac:	4620      	mov	r0, r4
   185ae:	f7ff fc43 	bl	17e38 <tcp_pcb_purge.part.1>
        prev->next = pcb->next;
   185b2:	68e3      	ldr	r3, [r4, #12]
      if (prev != NULL) {
   185b4:	f1b9 0f00 	cmp.w	r9, #0
   185b8:	f000 80dc 	beq.w	18774 <tcp_slowtmr+0x3e0>
        prev->next = pcb->next;
   185bc:	f8c9 300c 	str.w	r3, [r9, #12]
      if (pcb_reset) {
   185c0:	9b05      	ldr	r3, [sp, #20]
   185c2:	2b00      	cmp	r3, #0
   185c4:	f040 80b6 	bne.w	18734 <tcp_slowtmr+0x3a0>
  memp_free(MEMP_TCP_PCB, pcb);
   185c8:	4621      	mov	r1, r4
   185ca:	2002      	movs	r0, #2
      err_arg = pcb->callback_arg;
   185cc:	6926      	ldr	r6, [r4, #16]
      pcb = pcb->next;
   185ce:	68e4      	ldr	r4, [r4, #12]
  memp_free(MEMP_TCP_PCB, pcb);
   185d0:	f7fe fdba 	bl	17148 <memp_free>
      tcp_active_pcbs_changed = 0;
   185d4:	2300      	movs	r3, #0
   185d6:	f88b 3000 	strb.w	r3, [fp]
      TCP_EVENT_ERR(last_state, err_fn, err_arg, ERR_ABRT);
   185da:	2d00      	cmp	r5, #0
   185dc:	f43f af65 	beq.w	184aa <tcp_slowtmr+0x116>
   185e0:	4630      	mov	r0, r6
   185e2:	f06f 010c 	mvn.w	r1, #12
   185e6:	47a8      	blx	r5
      if (tcp_active_pcbs_changed) {
   185e8:	f89b 3000 	ldrb.w	r3, [fp]
   185ec:	2b00      	cmp	r3, #0
   185ee:	f47f aee4 	bne.w	183ba <tcp_slowtmr+0x26>
  while (pcb != NULL) {
   185f2:	2c00      	cmp	r4, #0
   185f4:	f47f aee7 	bne.w	183c6 <tcp_slowtmr+0x32>
   185f8:	e759      	b.n	184ae <tcp_slowtmr+0x11a>
          (pcb->keep_idle + TCP_KEEP_DUR(pcb)) / TCP_SLOW_INTERVAL) {
   185fa:	f8d4 5094 	ldr.w	r5, [r4, #148]	; 0x94
      if ((u32_t)(tcp_ticks - pcb->tmr) >
   185fe:	f8d8 2000 	ldr.w	r2, [r8]
   18602:	6a20      	ldr	r0, [r4, #32]
          (pcb->keep_idle + TCP_KEEP_DUR(pcb)) / TCP_SLOW_INTERVAL) {
   18604:	4e15      	ldr	r6, [pc, #84]	; (1865c <tcp_slowtmr+0x2c8>)
   18606:	f505 2324 	add.w	r3, r5, #671744	; 0xa4000
   1860a:	f603 43b8 	addw	r3, r3, #3256	; 0xcb8
   1860e:	fba6 6303 	umull	r6, r3, r6, r3
      if ((u32_t)(tcp_ticks - pcb->tmr) >
   18612:	1a12      	subs	r2, r2, r0
   18614:	ebb2 1f53 	cmp.w	r2, r3, lsr #5
   18618:	f200 8088 	bhi.w	1872c <tcp_slowtmr+0x398>
                 (pcb->keep_idle + pcb->keep_cnt_sent * TCP_KEEP_INTVL(pcb))
   1861c:	4910      	ldr	r1, [pc, #64]	; (18660 <tcp_slowtmr+0x2cc>)
   1861e:	f894 309b 	ldrb.w	r3, [r4, #155]	; 0x9b
   18622:	fb01 5303 	mla	r3, r1, r3, r5
                 / TCP_SLOW_INTERVAL) {
   18626:	490d      	ldr	r1, [pc, #52]	; (1865c <tcp_slowtmr+0x2c8>)
   18628:	fba1 1303 	umull	r1, r3, r1, r3
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
   1862c:	ebb2 1f53 	cmp.w	r2, r3, lsr #5
   18630:	f67f af06 	bls.w	18440 <tcp_slowtmr+0xac>
        err = tcp_keepalive(pcb);
   18634:	4620      	mov	r0, r4
   18636:	f002 fb23 	bl	1ac80 <tcp_keepalive>
        if (err == ERR_OK) {
   1863a:	2800      	cmp	r0, #0
   1863c:	f47f af00 	bne.w	18440 <tcp_slowtmr+0xac>
          pcb->keep_cnt_sent++;
   18640:	f894 309b 	ldrb.w	r3, [r4, #155]	; 0x9b
    pcb_reset = 0;
   18644:	9005      	str	r0, [sp, #20]
          pcb->keep_cnt_sent++;
   18646:	3301      	adds	r3, #1
   18648:	f884 309b 	strb.w	r3, [r4, #155]	; 0x9b
   1864c:	e6fa      	b.n	18444 <tcp_slowtmr+0xb0>
   1864e:	bf00      	nop
   18650:	2000a3e8 	.word	0x2000a3e8
   18654:	0002d630 	.word	0x0002d630
   18658:	2000a3f8 	.word	0x2000a3f8
   1865c:	10624dd3 	.word	0x10624dd3
   18660:	000124f8 	.word	0x000124f8
   18664:	2000a3ec 	.word	0x2000a3ec
   18668:	20002904 	.word	0x20002904
   1866c:	2000a3e4 	.word	0x2000a3e4
        if ((pcb->rtime >= 0) && (pcb->rtime < 0x7FFF)) {
   18670:	f9b4 3030 	ldrsh.w	r3, [r4, #48]	; 0x30
   18674:	2b00      	cmp	r3, #0
   18676:	db06      	blt.n	18686 <tcp_slowtmr+0x2f2>
   18678:	f647 71ff 	movw	r1, #32767	; 0x7fff
   1867c:	428b      	cmp	r3, r1
   1867e:	d007      	beq.n	18690 <tcp_slowtmr+0x2fc>
          ++pcb->rtime;
   18680:	3301      	adds	r3, #1
   18682:	b21b      	sxth	r3, r3
   18684:	8623      	strh	r3, [r4, #48]	; 0x30
        if (pcb->rtime >= pcb->rto) {
   18686:	f9b4 1040 	ldrsh.w	r1, [r4, #64]	; 0x40
   1868a:	4299      	cmp	r1, r3
   1868c:	f73f aec9 	bgt.w	18422 <tcp_slowtmr+0x8e>
          if ((tcp_rexmit_rto_prepare(pcb) == ERR_OK) || ((pcb->unacked == NULL) && (pcb->unsent != NULL))) {
   18690:	4620      	mov	r0, r4
   18692:	f001 ff61 	bl	1a558 <tcp_rexmit_rto_prepare>
   18696:	b138      	cbz	r0, 186a8 <tcp_slowtmr+0x314>
   18698:	6f23      	ldr	r3, [r4, #112]	; 0x70
   1869a:	2b00      	cmp	r3, #0
   1869c:	f47f aec0 	bne.w	18420 <tcp_slowtmr+0x8c>
   186a0:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
   186a2:	2b00      	cmp	r3, #0
   186a4:	f43f aebc 	beq.w	18420 <tcp_slowtmr+0x8c>
            if (pcb->state != SYN_SENT) {
   186a8:	7d23      	ldrb	r3, [r4, #20]
   186aa:	2b02      	cmp	r3, #2
   186ac:	d015      	beq.n	186da <tcp_slowtmr+0x346>
              u8_t backoff_idx = LWIP_MIN(pcb->nrtx, sizeof(tcp_backoff) - 1);
   186ae:	f894 2042 	ldrb.w	r2, [r4, #66]	; 0x42
              int calc_rto = ((pcb->sa >> 3) + pcb->sv) << tcp_backoff[backoff_idx];
   186b2:	4838      	ldr	r0, [pc, #224]	; (18794 <tcp_slowtmr+0x400>)
   186b4:	f9b4 103c 	ldrsh.w	r1, [r4, #60]	; 0x3c
   186b8:	f9b4 303e 	ldrsh.w	r3, [r4, #62]	; 0x3e
   186bc:	2a0c      	cmp	r2, #12
   186be:	bf94      	ite	ls
   186c0:	1880      	addls	r0, r0, r2
   186c2:	300c      	addhi	r0, #12
   186c4:	eb03 03e1 	add.w	r3, r3, r1, asr #3
   186c8:	7e01      	ldrb	r1, [r0, #24]
              pcb->rto = (s16_t)LWIP_MIN(calc_rto, 0x7FFF);
   186ca:	f647 72ff 	movw	r2, #32767	; 0x7fff
              int calc_rto = ((pcb->sa >> 3) + pcb->sv) << tcp_backoff[backoff_idx];
   186ce:	408b      	lsls	r3, r1
              pcb->rto = (s16_t)LWIP_MIN(calc_rto, 0x7FFF);
   186d0:	4293      	cmp	r3, r2
   186d2:	bfa8      	it	ge
   186d4:	4613      	movge	r3, r2
   186d6:	f8a4 3040 	strh.w	r3, [r4, #64]	; 0x40
            eff_wnd = LWIP_MIN(pcb->cwnd, pcb->snd_wnd);
   186da:	f8b4 2048 	ldrh.w	r2, [r4, #72]	; 0x48
   186de:	f8b4 3060 	ldrh.w	r3, [r4, #96]	; 0x60
            if (pcb->ssthresh < (tcpwnd_size_t)(pcb->mss << 1)) {
   186e2:	8e61      	ldrh	r1, [r4, #50]	; 0x32
            pcb->cwnd = pcb->mss;
   186e4:	f8a4 1048 	strh.w	r1, [r4, #72]	; 0x48
            pcb->ssthresh = eff_wnd >> 1;
   186e8:	4293      	cmp	r3, r2
   186ea:	bf28      	it	cs
   186ec:	4613      	movcs	r3, r2
            if (pcb->ssthresh < (tcpwnd_size_t)(pcb->mss << 1)) {
   186ee:	004a      	lsls	r2, r1, #1
   186f0:	b292      	uxth	r2, r2
            pcb->ssthresh = eff_wnd >> 1;
   186f2:	085b      	lsrs	r3, r3, #1
            if (pcb->ssthresh < (tcpwnd_size_t)(pcb->mss << 1)) {
   186f4:	4293      	cmp	r3, r2
            pcb->ssthresh = eff_wnd >> 1;
   186f6:	f8a4 304a 	strh.w	r3, [r4, #74]	; 0x4a
            pcb->rtime = 0;
   186fa:	f04f 0000 	mov.w	r0, #0
            pcb->bytes_acked = 0;
   186fe:	f04f 0300 	mov.w	r3, #0
            pcb->rtime = 0;
   18702:	8620      	strh	r0, [r4, #48]	; 0x30
              pcb->ssthresh = (tcpwnd_size_t)(pcb->mss << 1);
   18704:	bf38      	it	cc
   18706:	f8a4 204a 	strhcc.w	r2, [r4, #74]	; 0x4a
            pcb->bytes_acked = 0;
   1870a:	f8a4 306a 	strh.w	r3, [r4, #106]	; 0x6a
            tcp_rexmit_rto_commit(pcb);
   1870e:	4620      	mov	r0, r4
   18710:	f002 fa74 	bl	1abfc <tcp_rexmit_rto_commit>
   18714:	7d22      	ldrb	r2, [r4, #20]
   18716:	2101      	movs	r1, #1
   18718:	e684      	b.n	18424 <tcp_slowtmr+0x90>
          tcp_output(prev);
   1871a:	4620      	mov	r0, r4
   1871c:	46a1      	mov	r9, r4
      pcb = pcb->next;
   1871e:	462c      	mov	r4, r5
          tcp_output(prev);
   18720:	f002 f8c8 	bl	1a8b4 <tcp_output>
  while (pcb != NULL) {
   18724:	2c00      	cmp	r4, #0
   18726:	f47f ae4e 	bne.w	183c6 <tcp_slowtmr+0x32>
   1872a:	e6c0      	b.n	184ae <tcp_slowtmr+0x11a>
        ++pcb_reset;
   1872c:	2301      	movs	r3, #1
   1872e:	460f      	mov	r7, r1
   18730:	9305      	str	r3, [sp, #20]
   18732:	e687      	b.n	18444 <tcp_slowtmr+0xb0>
        tcp_rst(pcb, pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
   18734:	8b23      	ldrh	r3, [r4, #24]
   18736:	6a62      	ldr	r2, [r4, #36]	; 0x24
   18738:	6d21      	ldr	r1, [r4, #80]	; 0x50
   1873a:	9302      	str	r3, [sp, #8]
   1873c:	8ae3      	ldrh	r3, [r4, #22]
   1873e:	9301      	str	r3, [sp, #4]
   18740:	1d23      	adds	r3, r4, #4
   18742:	9300      	str	r3, [sp, #0]
   18744:	4620      	mov	r0, r4
   18746:	4623      	mov	r3, r4
   18748:	f001 ffc0 	bl	1a6cc <tcp_rst>
   1874c:	e73c      	b.n	185c8 <tcp_slowtmr+0x234>
  if (pcb->state != CLOSED &&
   1874e:	2b01      	cmp	r3, #1
      tcp_err_fn err_fn = pcb->errf;
   18750:	f8d4 5090 	ldr.w	r5, [r4, #144]	; 0x90
  if (pcb->state != CLOSED &&
   18754:	f67f af2d 	bls.w	185b2 <tcp_slowtmr+0x21e>
   18758:	2b0a      	cmp	r3, #10
   1875a:	f43f af2a 	beq.w	185b2 <tcp_slowtmr+0x21e>
   1875e:	e725      	b.n	185ac <tcp_slowtmr+0x218>
            pcb->persist_cnt++;
   18760:	3301      	adds	r3, #1
   18762:	b2db      	uxtb	r3, r3
          if (pcb->persist_cnt >= backoff_cnt) {
   18764:	4299      	cmp	r1, r3
            pcb->persist_cnt++;
   18766:	f884 3098 	strb.w	r3, [r4, #152]	; 0x98
          if (pcb->persist_cnt >= backoff_cnt) {
   1876a:	f67f ae4e 	bls.w	1840a <tcp_slowtmr+0x76>
   1876e:	2101      	movs	r1, #1
    pcb_remove = 0;
   18770:	2700      	movs	r7, #0
   18772:	e657      	b.n	18424 <tcp_slowtmr+0x90>
        tcp_active_pcbs = pcb->next;
   18774:	4a08      	ldr	r2, [pc, #32]	; (18798 <tcp_slowtmr+0x404>)
   18776:	6013      	str	r3, [r2, #0]
   18778:	e722      	b.n	185c0 <tcp_slowtmr+0x22c>
        tcp_tw_pcbs = pcb->next;
   1877a:	68e7      	ldr	r7, [r4, #12]
   1877c:	6037      	str	r7, [r6, #0]
   1877e:	e6ae      	b.n	184de <tcp_slowtmr+0x14a>
                if (tcp_output(pcb) == ERR_OK) {
   18780:	4620      	mov	r0, r4
   18782:	f002 f897 	bl	1a8b4 <tcp_output>
   18786:	2800      	cmp	r0, #0
   18788:	f47f aed4 	bne.w	18534 <tcp_slowtmr+0x1a0>
    pcb_remove = 0;
   1878c:	4607      	mov	r7, r0
   1878e:	7d22      	ldrb	r2, [r4, #20]
                if (tcp_output(pcb) == ERR_OK) {
   18790:	2101      	movs	r1, #1
   18792:	e647      	b.n	18424 <tcp_slowtmr+0x90>
   18794:	0002d630 	.word	0x0002d630
   18798:	2000a3e8 	.word	0x2000a3e8

0001879c <tcp_fasttmr>:
{
   1879c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  ++tcp_timer_ctr;
   187a0:	f8df 8174 	ldr.w	r8, [pc, #372]	; 18918 <tcp_fasttmr+0x17c>
        tcp_active_pcbs_changed = 0;
   187a4:	f8df 9174 	ldr.w	r9, [pc, #372]	; 1891c <tcp_fasttmr+0x180>
  ++tcp_timer_ctr;
   187a8:	f898 3000 	ldrb.w	r3, [r8]
   187ac:	3301      	adds	r3, #1
   187ae:	f888 3000 	strb.w	r3, [r8]
        if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
   187b2:	f241 6bd0 	movw	fp, #5840	; 0x16d0
  pcb = tcp_active_pcbs;
   187b6:	4b57      	ldr	r3, [pc, #348]	; (18914 <tcp_fasttmr+0x178>)
   187b8:	681c      	ldr	r4, [r3, #0]
  while (pcb != NULL) {
   187ba:	2c00      	cmp	r4, #0
   187bc:	d06c      	beq.n	18898 <tcp_fasttmr+0xfc>
    if (pcb->last_timer != tcp_timer_ctr) {
   187be:	f898 2000 	ldrb.w	r2, [r8]
   187c2:	7fa3      	ldrb	r3, [r4, #30]
   187c4:	4293      	cmp	r3, r2
   187c6:	d030      	beq.n	1882a <tcp_fasttmr+0x8e>
      if (pcb->flags & TF_ACK_DELAY) {
   187c8:	8b63      	ldrh	r3, [r4, #26]
      pcb->last_timer = tcp_timer_ctr;
   187ca:	77a2      	strb	r2, [r4, #30]
      if (pcb->flags & TF_ACK_DELAY) {
   187cc:	07d9      	lsls	r1, r3, #31
   187ce:	d448      	bmi.n	18862 <tcp_fasttmr+0xc6>
      if (pcb->flags & TF_CLOSEPEND) {
   187d0:	071a      	lsls	r2, r3, #28
   187d2:	d432      	bmi.n	1883a <tcp_fasttmr+0x9e>
      if (pcb->refused_data != NULL) {
   187d4:	6fa5      	ldr	r5, [r4, #120]	; 0x78
      next = pcb->next;
   187d6:	68e7      	ldr	r7, [r4, #12]
      if (pcb->refused_data != NULL) {
   187d8:	b315      	cbz	r5, 18820 <tcp_fasttmr+0x84>
    TCP_EVENT_RECV(pcb, refused_data, ERR_OK, err);
   187da:	f8d4 6084 	ldr.w	r6, [r4, #132]	; 0x84
    u8_t refused_flags = pcb->refused_data->flags;
   187de:	f895 a00d 	ldrb.w	sl, [r5, #13]
        tcp_active_pcbs_changed = 0;
   187e2:	2300      	movs	r3, #0
   187e4:	f889 3000 	strb.w	r3, [r9]
    pcb->refused_data = NULL;
   187e8:	67a3      	str	r3, [r4, #120]	; 0x78
    TCP_EVENT_RECV(pcb, refused_data, ERR_OK, err);
   187ea:	2e00      	cmp	r6, #0
   187ec:	d056      	beq.n	1889c <tcp_fasttmr+0x100>
   187ee:	462a      	mov	r2, r5
   187f0:	4621      	mov	r1, r4
   187f2:	6920      	ldr	r0, [r4, #16]
   187f4:	47b0      	blx	r6
    if (err == ERR_OK) {
   187f6:	b9e0      	cbnz	r0, 18832 <tcp_fasttmr+0x96>
      if ((refused_flags & PBUF_FLAG_TCP_FIN)
   187f8:	f01a 0f20 	tst.w	sl, #32
   187fc:	d00c      	beq.n	18818 <tcp_fasttmr+0x7c>
        if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
   187fe:	8d23      	ldrh	r3, [r4, #40]	; 0x28
   18800:	455b      	cmp	r3, fp
   18802:	d001      	beq.n	18808 <tcp_fasttmr+0x6c>
          pcb->rcv_wnd++;
   18804:	3301      	adds	r3, #1
   18806:	8523      	strh	r3, [r4, #40]	; 0x28
        TCP_EVENT_CLOSED(pcb, err);
   18808:	f8d4 5084 	ldr.w	r5, [r4, #132]	; 0x84
   1880c:	b125      	cbz	r5, 18818 <tcp_fasttmr+0x7c>
   1880e:	2300      	movs	r3, #0
   18810:	461a      	mov	r2, r3
   18812:	4621      	mov	r1, r4
   18814:	6920      	ldr	r0, [r4, #16]
   18816:	47a8      	blx	r5
        if (tcp_active_pcbs_changed) {
   18818:	f899 3000 	ldrb.w	r3, [r9]
   1881c:	2b00      	cmp	r3, #0
   1881e:	d1ca      	bne.n	187b6 <tcp_fasttmr+0x1a>
      pcb = next;
   18820:	463c      	mov	r4, r7
  while (pcb != NULL) {
   18822:	2c00      	cmp	r4, #0
   18824:	d1cb      	bne.n	187be <tcp_fasttmr+0x22>
   18826:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
      pcb = pcb->next;
   1882a:	68e4      	ldr	r4, [r4, #12]
  while (pcb != NULL) {
   1882c:	2c00      	cmp	r4, #0
   1882e:	d1c6      	bne.n	187be <tcp_fasttmr+0x22>
   18830:	e7f9      	b.n	18826 <tcp_fasttmr+0x8a>
    } else if (err == ERR_ABRT) {
   18832:	300d      	adds	r0, #13
      pcb->refused_data = refused_data;
   18834:	bf18      	it	ne
   18836:	67a5      	strne	r5, [r4, #120]	; 0x78
   18838:	e7ee      	b.n	18818 <tcp_fasttmr+0x7c>
  switch (pcb->state) {
   1883a:	7d22      	ldrb	r2, [r4, #20]
        tcp_clear_flags(pcb, TF_CLOSEPEND);
   1883c:	f023 0308 	bic.w	r3, r3, #8
  switch (pcb->state) {
   18840:	2a04      	cmp	r2, #4
        tcp_clear_flags(pcb, TF_CLOSEPEND);
   18842:	8363      	strh	r3, [r4, #26]
  switch (pcb->state) {
   18844:	d003      	beq.n	1884e <tcp_fasttmr+0xb2>
   18846:	2a07      	cmp	r2, #7
   18848:	d01e      	beq.n	18888 <tcp_fasttmr+0xec>
   1884a:	2a03      	cmp	r2, #3
   1884c:	d1c2      	bne.n	187d4 <tcp_fasttmr+0x38>
      err = tcp_send_fin(pcb);
   1884e:	4620      	mov	r0, r4
   18850:	f001 fdde 	bl	1a410 <tcp_send_fin>
      if (err == ERR_OK) {
   18854:	b988      	cbnz	r0, 1887a <tcp_fasttmr+0xde>
        pcb->state = FIN_WAIT_1;
   18856:	2305      	movs	r3, #5
   18858:	7523      	strb	r3, [r4, #20]
    tcp_output(pcb);
   1885a:	4620      	mov	r0, r4
   1885c:	f002 f82a 	bl	1a8b4 <tcp_output>
   18860:	e7b8      	b.n	187d4 <tcp_fasttmr+0x38>
        tcp_ack_now(pcb);
   18862:	f043 0302 	orr.w	r3, r3, #2
   18866:	8363      	strh	r3, [r4, #26]
        tcp_output(pcb);
   18868:	4620      	mov	r0, r4
   1886a:	f002 f823 	bl	1a8b4 <tcp_output>
        tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
   1886e:	8b63      	ldrh	r3, [r4, #26]
   18870:	f023 0303 	bic.w	r3, r3, #3
   18874:	b29b      	uxth	r3, r3
   18876:	8363      	strh	r3, [r4, #26]
   18878:	e7aa      	b.n	187d0 <tcp_fasttmr+0x34>
  } else if (err == ERR_MEM) {
   1887a:	3001      	adds	r0, #1
   1887c:	d1aa      	bne.n	187d4 <tcp_fasttmr+0x38>
    tcp_set_flags(pcb, TF_CLOSEPEND);
   1887e:	8b63      	ldrh	r3, [r4, #26]
   18880:	f043 0308 	orr.w	r3, r3, #8
   18884:	8363      	strh	r3, [r4, #26]
   18886:	e7a5      	b.n	187d4 <tcp_fasttmr+0x38>
      err = tcp_send_fin(pcb);
   18888:	4620      	mov	r0, r4
   1888a:	f001 fdc1 	bl	1a410 <tcp_send_fin>
      if (err == ERR_OK) {
   1888e:	2800      	cmp	r0, #0
   18890:	d1f3      	bne.n	1887a <tcp_fasttmr+0xde>
        pcb->state = LAST_ACK;
   18892:	2309      	movs	r3, #9
   18894:	7523      	strb	r3, [r4, #20]
   18896:	e7e0      	b.n	1885a <tcp_fasttmr+0xbe>
   18898:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
  rcv_wnd = (tcpwnd_size_t)(pcb->rcv_wnd + len);
   1889c:	8d22      	ldrh	r2, [r4, #40]	; 0x28
   1889e:	892b      	ldrh	r3, [r5, #8]
   188a0:	4413      	add	r3, r2
   188a2:	b29b      	uxth	r3, r3
  if ((rcv_wnd > TCP_WND_MAX(pcb)) || (rcv_wnd < pcb->rcv_wnd)) {
   188a4:	455b      	cmp	r3, fp
   188a6:	d91b      	bls.n	188e0 <tcp_fasttmr+0x144>
   188a8:	f241 61d0 	movw	r1, #5840	; 0x16d0
    pcb->rcv_wnd = TCP_WND_MAX(pcb);
   188ac:	460b      	mov	r3, r1
  new_right_edge = pcb->rcv_nxt + pcb->rcv_wnd;
   188ae:	6a66      	ldr	r6, [r4, #36]	; 0x24
  if (TCP_SEQ_GEQ(new_right_edge, pcb->rcv_ann_right_edge + LWIP_MIN((TCP_WND / 2), pcb->mss))) {
   188b0:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
   188b2:	8e62      	ldrh	r2, [r4, #50]	; 0x32
   188b4:	8523      	strh	r3, [r4, #40]	; 0x28
   188b6:	f640 3e68 	movw	lr, #2920	; 0xb68
   188ba:	4572      	cmp	r2, lr
   188bc:	bf94      	ite	ls
   188be:	1882      	addls	r2, r0, r2
   188c0:	eb00 020e 	addhi.w	r2, r0, lr
  new_right_edge = pcb->rcv_nxt + pcb->rcv_wnd;
   188c4:	4431      	add	r1, r6
  if (TCP_SEQ_GEQ(new_right_edge, pcb->rcv_ann_right_edge + LWIP_MIN((TCP_WND / 2), pcb->mss))) {
   188c6:	1a8a      	subs	r2, r1, r2
   188c8:	2a00      	cmp	r2, #0
   188ca:	db18      	blt.n	188fe <tcp_fasttmr+0x162>
    return new_right_edge - pcb->rcv_ann_right_edge;
   188cc:	1a0a      	subs	r2, r1, r0
  if (wnd_inflation >= TCP_WND_UPDATE_THRESHOLD) {
   188ce:	f240 51b3 	movw	r1, #1459	; 0x5b3
   188d2:	428a      	cmp	r2, r1
    pcb->rcv_ann_wnd = pcb->rcv_wnd;
   188d4:	8563      	strh	r3, [r4, #42]	; 0x2a
  if (wnd_inflation >= TCP_WND_UPDATE_THRESHOLD) {
   188d6:	d807      	bhi.n	188e8 <tcp_fasttmr+0x14c>
    pbuf_free(p);
   188d8:	4628      	mov	r0, r5
   188da:	f7fe ff87 	bl	177ec <pbuf_free>
   188de:	e78b      	b.n	187f8 <tcp_fasttmr+0x5c>
  if ((rcv_wnd > TCP_WND_MAX(pcb)) || (rcv_wnd < pcb->rcv_wnd)) {
   188e0:	429a      	cmp	r2, r3
   188e2:	d8e1      	bhi.n	188a8 <tcp_fasttmr+0x10c>
   188e4:	4619      	mov	r1, r3
   188e6:	e7e2      	b.n	188ae <tcp_fasttmr+0x112>
    tcp_ack_now(pcb);
   188e8:	8b63      	ldrh	r3, [r4, #26]
   188ea:	f043 0302 	orr.w	r3, r3, #2
   188ee:	8363      	strh	r3, [r4, #26]
    tcp_output(pcb);
   188f0:	4620      	mov	r0, r4
   188f2:	f001 ffdf 	bl	1a8b4 <tcp_output>
    pbuf_free(p);
   188f6:	4628      	mov	r0, r5
   188f8:	f7fe ff78 	bl	177ec <pbuf_free>
   188fc:	e77c      	b.n	187f8 <tcp_fasttmr+0x5c>
    if (TCP_SEQ_GT(pcb->rcv_nxt, pcb->rcv_ann_right_edge)) {
   188fe:	1a33      	subs	r3, r6, r0
   18900:	2b00      	cmp	r3, #0
      u32_t new_rcv_ann_wnd = pcb->rcv_ann_right_edge - pcb->rcv_nxt;
   18902:	bfd4      	ite	le
   18904:	1b83      	suble	r3, r0, r6
      pcb->rcv_ann_wnd = 0;
   18906:	2300      	movgt	r3, #0
      pcb->rcv_ann_wnd = (tcpwnd_size_t)new_rcv_ann_wnd;
   18908:	8563      	strh	r3, [r4, #42]	; 0x2a
    pbuf_free(p);
   1890a:	4628      	mov	r0, r5
   1890c:	f7fe ff6e 	bl	177ec <pbuf_free>
   18910:	e772      	b.n	187f8 <tcp_fasttmr+0x5c>
   18912:	bf00      	nop
   18914:	2000a3e8 	.word	0x2000a3e8
   18918:	20002904 	.word	0x20002904
   1891c:	2000a3e4 	.word	0x2000a3e4

00018920 <tcp_tmr>:
{
   18920:	b508      	push	{r3, lr}
  tcp_fasttmr();
   18922:	f7ff ff3b 	bl	1879c <tcp_fasttmr>
  if (++tcp_timer & 1) {
   18926:	4a06      	ldr	r2, [pc, #24]	; (18940 <tcp_tmr+0x20>)
   18928:	7853      	ldrb	r3, [r2, #1]
   1892a:	3301      	adds	r3, #1
   1892c:	b2db      	uxtb	r3, r3
   1892e:	7053      	strb	r3, [r2, #1]
   18930:	07db      	lsls	r3, r3, #31
   18932:	d400      	bmi.n	18936 <tcp_tmr+0x16>
   18934:	bd08      	pop	{r3, pc}
}
   18936:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    tcp_slowtmr();
   1893a:	f7ff bd2b 	b.w	18394 <tcp_slowtmr>
   1893e:	bf00      	nop
   18940:	20002904 	.word	0x20002904

00018944 <tcp_process_refused_data>:
  LWIP_ERROR("tcp_process_refused_data: invalid pcb", pcb != NULL, return ERR_ARG);
   18944:	2800      	cmp	r0, #0
   18946:	d05d      	beq.n	18a04 <tcp_process_refused_data+0xc0>
{
   18948:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    u8_t refused_flags = pcb->refused_data->flags;
   1894a:	6f85      	ldr	r5, [r0, #120]	; 0x78
    TCP_EVENT_RECV(pcb, refused_data, ERR_OK, err);
   1894c:	f8d0 6084 	ldr.w	r6, [r0, #132]	; 0x84
    u8_t refused_flags = pcb->refused_data->flags;
   18950:	7b6f      	ldrb	r7, [r5, #13]
    pcb->refused_data = NULL;
   18952:	2300      	movs	r3, #0
   18954:	4604      	mov	r4, r0
   18956:	6783      	str	r3, [r0, #120]	; 0x78
    TCP_EVENT_RECV(pcb, refused_data, ERR_OK, err);
   18958:	b356      	cbz	r6, 189b0 <tcp_process_refused_data+0x6c>
   1895a:	4601      	mov	r1, r0
   1895c:	462a      	mov	r2, r5
   1895e:	6900      	ldr	r0, [r0, #16]
   18960:	47b0      	blx	r6
    if (err == ERR_OK) {
   18962:	b168      	cbz	r0, 18980 <tcp_process_refused_data+0x3c>
    } else if (err == ERR_ABRT) {
   18964:	300d      	adds	r0, #13
   18966:	d020      	beq.n	189aa <tcp_process_refused_data+0x66>
      pcb->refused_data = refused_data;
   18968:	67a5      	str	r5, [r4, #120]	; 0x78
      return ERR_INPROGRESS;
   1896a:	f06f 0004 	mvn.w	r0, #4
   1896e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if (TCP_SEQ_GT(pcb->rcv_nxt, pcb->rcv_ann_right_edge)) {
   18970:	1a33      	subs	r3, r6, r0
   18972:	2b00      	cmp	r3, #0
   18974:	dd49      	ble.n	18a0a <tcp_process_refused_data+0xc6>
   18976:	2300      	movs	r3, #0
   18978:	8563      	strh	r3, [r4, #42]	; 0x2a
    pbuf_free(p);
   1897a:	4628      	mov	r0, r5
   1897c:	f7fe ff36 	bl	177ec <pbuf_free>
      if ((refused_flags & PBUF_FLAG_TCP_FIN)
   18980:	06bb      	lsls	r3, r7, #26
   18982:	d510      	bpl.n	189a6 <tcp_process_refused_data+0x62>
        if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
   18984:	8d23      	ldrh	r3, [r4, #40]	; 0x28
        TCP_EVENT_CLOSED(pcb, err);
   18986:	f8d4 5084 	ldr.w	r5, [r4, #132]	; 0x84
        if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
   1898a:	f241 62d0 	movw	r2, #5840	; 0x16d0
   1898e:	4293      	cmp	r3, r2
          pcb->rcv_wnd++;
   18990:	bf1c      	itt	ne
   18992:	3301      	addne	r3, #1
   18994:	8523      	strhne	r3, [r4, #40]	; 0x28
        TCP_EVENT_CLOSED(pcb, err);
   18996:	b135      	cbz	r5, 189a6 <tcp_process_refused_data+0x62>
   18998:	2300      	movs	r3, #0
   1899a:	461a      	mov	r2, r3
   1899c:	4621      	mov	r1, r4
   1899e:	6920      	ldr	r0, [r4, #16]
   189a0:	47a8      	blx	r5
        if (err == ERR_ABRT) {
   189a2:	300d      	adds	r0, #13
   189a4:	d001      	beq.n	189aa <tcp_process_refused_data+0x66>
  return ERR_OK;
   189a6:	2000      	movs	r0, #0
   189a8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
          return ERR_ABRT;
   189aa:	f06f 000c 	mvn.w	r0, #12
   189ae:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  rcv_wnd = (tcpwnd_size_t)(pcb->rcv_wnd + len);
   189b0:	8d01      	ldrh	r1, [r0, #40]	; 0x28
   189b2:	892a      	ldrh	r2, [r5, #8]
   189b4:	440a      	add	r2, r1
   189b6:	b292      	uxth	r2, r2
  if ((rcv_wnd > TCP_WND_MAX(pcb)) || (rcv_wnd < pcb->rcv_wnd)) {
   189b8:	f241 63d0 	movw	r3, #5840	; 0x16d0
   189bc:	429a      	cmp	r2, r3
   189be:	d91d      	bls.n	189fc <tcp_process_refused_data+0xb8>
    pcb->rcv_wnd = TCP_WND_MAX(pcb);
   189c0:	461a      	mov	r2, r3
  new_right_edge = pcb->rcv_nxt + pcb->rcv_wnd;
   189c2:	6a66      	ldr	r6, [r4, #36]	; 0x24
  if (TCP_SEQ_GEQ(new_right_edge, pcb->rcv_ann_right_edge + LWIP_MIN((TCP_WND / 2), pcb->mss))) {
   189c4:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
   189c6:	8e61      	ldrh	r1, [r4, #50]	; 0x32
   189c8:	8522      	strh	r2, [r4, #40]	; 0x28
   189ca:	f640 3e68 	movw	lr, #2920	; 0xb68
   189ce:	4571      	cmp	r1, lr
   189d0:	bf94      	ite	ls
   189d2:	1841      	addls	r1, r0, r1
   189d4:	eb00 010e 	addhi.w	r1, r0, lr
  new_right_edge = pcb->rcv_nxt + pcb->rcv_wnd;
   189d8:	4433      	add	r3, r6
  if (TCP_SEQ_GEQ(new_right_edge, pcb->rcv_ann_right_edge + LWIP_MIN((TCP_WND / 2), pcb->mss))) {
   189da:	1a59      	subs	r1, r3, r1
   189dc:	2900      	cmp	r1, #0
   189de:	dbc7      	blt.n	18970 <tcp_process_refused_data+0x2c>
    return new_right_edge - pcb->rcv_ann_right_edge;
   189e0:	1a1b      	subs	r3, r3, r0
  if (wnd_inflation >= TCP_WND_UPDATE_THRESHOLD) {
   189e2:	f240 51b3 	movw	r1, #1459	; 0x5b3
   189e6:	428b      	cmp	r3, r1
    pcb->rcv_ann_wnd = pcb->rcv_wnd;
   189e8:	8562      	strh	r2, [r4, #42]	; 0x2a
  if (wnd_inflation >= TCP_WND_UPDATE_THRESHOLD) {
   189ea:	d9c6      	bls.n	1897a <tcp_process_refused_data+0x36>
    tcp_ack_now(pcb);
   189ec:	8b63      	ldrh	r3, [r4, #26]
   189ee:	f043 0302 	orr.w	r3, r3, #2
   189f2:	8363      	strh	r3, [r4, #26]
    tcp_output(pcb);
   189f4:	4620      	mov	r0, r4
   189f6:	f001 ff5d 	bl	1a8b4 <tcp_output>
   189fa:	e7be      	b.n	1897a <tcp_process_refused_data+0x36>
  if ((rcv_wnd > TCP_WND_MAX(pcb)) || (rcv_wnd < pcb->rcv_wnd)) {
   189fc:	4291      	cmp	r1, r2
   189fe:	d8df      	bhi.n	189c0 <tcp_process_refused_data+0x7c>
   18a00:	4613      	mov	r3, r2
   18a02:	e7de      	b.n	189c2 <tcp_process_refused_data+0x7e>
  LWIP_ERROR("tcp_process_refused_data: invalid pcb", pcb != NULL, return ERR_ARG);
   18a04:	f06f 000f 	mvn.w	r0, #15
   18a08:	4770      	bx	lr
      u32_t new_rcv_ann_wnd = pcb->rcv_ann_right_edge - pcb->rcv_nxt;
   18a0a:	1b83      	subs	r3, r0, r6
   18a0c:	e7b4      	b.n	18978 <tcp_process_refused_data+0x34>
   18a0e:	bf00      	nop

00018a10 <tcp_segs_free>:
  while (seg != NULL) {
   18a10:	b178      	cbz	r0, 18a32 <tcp_segs_free+0x22>
{
   18a12:	b538      	push	{r3, r4, r5, lr}
   18a14:	4604      	mov	r4, r0
    if (seg->p != NULL) {
   18a16:	6863      	ldr	r3, [r4, #4]
    struct tcp_seg *next = seg->next;
   18a18:	6825      	ldr	r5, [r4, #0]
      pbuf_free(seg->p);
   18a1a:	4618      	mov	r0, r3
    if (seg->p != NULL) {
   18a1c:	b10b      	cbz	r3, 18a22 <tcp_segs_free+0x12>
      pbuf_free(seg->p);
   18a1e:	f7fe fee5 	bl	177ec <pbuf_free>
    memp_free(MEMP_TCP_SEG, seg);
   18a22:	4621      	mov	r1, r4
   18a24:	2004      	movs	r0, #4
   18a26:	f7fe fb8f 	bl	17148 <memp_free>
  while (seg != NULL) {
   18a2a:	462c      	mov	r4, r5
   18a2c:	2d00      	cmp	r5, #0
   18a2e:	d1f2      	bne.n	18a16 <tcp_segs_free+0x6>
   18a30:	bd38      	pop	{r3, r4, r5, pc}
   18a32:	4770      	bx	lr

00018a34 <tcp_seg_free>:
  if (seg != NULL) {
   18a34:	b158      	cbz	r0, 18a4e <tcp_seg_free+0x1a>
{
   18a36:	b510      	push	{r4, lr}
   18a38:	4604      	mov	r4, r0
    if (seg->p != NULL) {
   18a3a:	6840      	ldr	r0, [r0, #4]
   18a3c:	b108      	cbz	r0, 18a42 <tcp_seg_free+0xe>
      pbuf_free(seg->p);
   18a3e:	f7fe fed5 	bl	177ec <pbuf_free>
    memp_free(MEMP_TCP_SEG, seg);
   18a42:	4621      	mov	r1, r4
   18a44:	2004      	movs	r0, #4
}
   18a46:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    memp_free(MEMP_TCP_SEG, seg);
   18a4a:	f7fe bb7d 	b.w	17148 <memp_free>
   18a4e:	4770      	bx	lr

00018a50 <tcp_seg_copy>:
{
   18a50:	b538      	push	{r3, r4, r5, lr}
   18a52:	4605      	mov	r5, r0
  cseg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG);
   18a54:	2004      	movs	r0, #4
   18a56:	f7fe fb67 	bl	17128 <memp_malloc>
  if (cseg == NULL) {
   18a5a:	4604      	mov	r4, r0
   18a5c:	b150      	cbz	r0, 18a74 <tcp_seg_copy+0x24>
  SMEMCPY((u8_t *)cseg, (const u8_t *)seg, sizeof(struct tcp_seg));
   18a5e:	6868      	ldr	r0, [r5, #4]
   18a60:	6829      	ldr	r1, [r5, #0]
   18a62:	68aa      	ldr	r2, [r5, #8]
   18a64:	68eb      	ldr	r3, [r5, #12]
   18a66:	6060      	str	r0, [r4, #4]
   18a68:	6021      	str	r1, [r4, #0]
   18a6a:	60a2      	str	r2, [r4, #8]
   18a6c:	60e3      	str	r3, [r4, #12]
  pbuf_ref(cseg->p);
   18a6e:	6860      	ldr	r0, [r4, #4]
   18a70:	f7fe fefe 	bl	17870 <pbuf_ref>
}
   18a74:	4620      	mov	r0, r4
   18a76:	bd38      	pop	{r3, r4, r5, pc}

00018a78 <tcp_alloc>:
{
   18a78:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   18a7c:	4605      	mov	r5, r0
  pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
   18a7e:	2002      	movs	r0, #2
   18a80:	f7fe fb52 	bl	17128 <memp_malloc>
  if (pcb == NULL) {
   18a84:	4604      	mov	r4, r0
   18a86:	b350      	cbz	r0, 18ade <tcp_alloc+0x66>
    memset(pcb, 0, sizeof(struct tcp_pcb));
   18a88:	229c      	movs	r2, #156	; 0x9c
   18a8a:	2100      	movs	r1, #0
   18a8c:	4620      	mov	r0, r4
   18a8e:	f00f f9e5 	bl	27e5c <memset>
    pcb->tmr = tcp_ticks;
   18a92:	4a6b      	ldr	r2, [pc, #428]	; (18c40 <tcp_alloc+0x1c8>)
    pcb->last_timer = tcp_timer_ctr;
   18a94:	4b6b      	ldr	r3, [pc, #428]	; (18c44 <tcp_alloc+0x1cc>)
    pcb->tmr = tcp_ticks;
   18a96:	6816      	ldr	r6, [r2, #0]
    pcb->rcv_wnd = pcb->rcv_ann_wnd = TCPWND_MIN16(TCP_WND);
   18a98:	486b      	ldr	r0, [pc, #428]	; (18c48 <tcp_alloc+0x1d0>)
    pcb->prio = prio;
   18a9a:	7565      	strb	r5, [r4, #21]
    pcb->snd_buf = TCP_SND_BUF;
   18a9c:	f640 3568 	movw	r5, #2920	; 0xb68
    pcb->last_timer = tcp_timer_ctr;
   18aa0:	f893 e000 	ldrb.w	lr, [r3]
    pcb->cwnd = 1;
   18aa4:	4969      	ldr	r1, [pc, #420]	; (18c4c <tcp_alloc+0x1d4>)
    pcb->recv = tcp_recv_null;
   18aa6:	4a6a      	ldr	r2, [pc, #424]	; (18c50 <tcp_alloc+0x1d8>)
    pcb->keep_idle  = TCP_KEEPIDLE_DEFAULT;
   18aa8:	4b6a      	ldr	r3, [pc, #424]	; (18c54 <tcp_alloc+0x1dc>)
    pcb->tmr = tcp_ticks;
   18aaa:	6226      	str	r6, [r4, #32]
    pcb->ttl = TCP_TTL;
   18aac:	27ff      	movs	r7, #255	; 0xff
    pcb->mss = INITIAL_MSS;
   18aae:	f44f 7606 	mov.w	r6, #536	; 0x218
    pcb->snd_buf = TCP_SND_BUF;
   18ab2:	f8a4 5064 	strh.w	r5, [r4, #100]	; 0x64
    pcb->rcv_wnd = pcb->rcv_ann_wnd = TCPWND_MIN16(TCP_WND);
   18ab6:	62a0      	str	r0, [r4, #40]	; 0x28
    pcb->sv = 3000 / TCP_SLOW_INTERVAL;
   18ab8:	f04f 1506 	mov.w	r5, #393222	; 0x60006
    pcb->rtime = -1;
   18abc:	f64f 70ff 	movw	r0, #65535	; 0xffff
    pcb->last_timer = tcp_timer_ctr;
   18ac0:	f884 e01e 	strb.w	lr, [r4, #30]
    pcb->ttl = TCP_TTL;
   18ac4:	72e7      	strb	r7, [r4, #11]
    pcb->mss = INITIAL_MSS;
   18ac6:	8666      	strh	r6, [r4, #50]	; 0x32
    pcb->sv = 3000 / TCP_SLOW_INTERVAL;
   18ac8:	f8c4 503e 	str.w	r5, [r4, #62]	; 0x3e
    pcb->rtime = -1;
   18acc:	8620      	strh	r0, [r4, #48]	; 0x30
    pcb->cwnd = 1;
   18ace:	64a1      	str	r1, [r4, #72]	; 0x48
    pcb->recv = tcp_recv_null;
   18ad0:	f8c4 2084 	str.w	r2, [r4, #132]	; 0x84
    pcb->keep_idle  = TCP_KEEPIDLE_DEFAULT;
   18ad4:	f8c4 3094 	str.w	r3, [r4, #148]	; 0x94
}
   18ad8:	4620      	mov	r0, r4
   18ada:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  struct tcp_pcb *pcb = tcp_active_pcbs;
   18ade:	4e5e      	ldr	r6, [pc, #376]	; (18c58 <tcp_alloc+0x1e0>)
   18ae0:	6834      	ldr	r4, [r6, #0]
  while (pcb != NULL) {
   18ae2:	b32c      	cbz	r4, 18b30 <tcp_alloc+0xb8>
        pcb->state = FIN_WAIT_1;
   18ae4:	f04f 0805 	mov.w	r8, #5
        pcb->state = LAST_ACK;
   18ae8:	f04f 0909 	mov.w	r9, #9
   18aec:	e001      	b.n	18af2 <tcp_alloc+0x7a>
  while (pcb != NULL) {
   18aee:	463c      	mov	r4, r7
   18af0:	b1f7      	cbz	r7, 18b30 <tcp_alloc+0xb8>
    if (pcb->flags & TF_CLOSEPEND) {
   18af2:	8b63      	ldrh	r3, [r4, #26]
    struct tcp_pcb *next = pcb->next;
   18af4:	68e7      	ldr	r7, [r4, #12]
    if (pcb->flags & TF_CLOSEPEND) {
   18af6:	071a      	lsls	r2, r3, #28
   18af8:	d5f9      	bpl.n	18aee <tcp_alloc+0x76>
  switch (pcb->state) {
   18afa:	7d22      	ldrb	r2, [r4, #20]
      tcp_clear_flags(pcb, TF_CLOSEPEND);
   18afc:	f023 0308 	bic.w	r3, r3, #8
  switch (pcb->state) {
   18b00:	2a04      	cmp	r2, #4
      tcp_clear_flags(pcb, TF_CLOSEPEND);
   18b02:	8363      	strh	r3, [r4, #26]
  switch (pcb->state) {
   18b04:	d003      	beq.n	18b0e <tcp_alloc+0x96>
   18b06:	2a07      	cmp	r2, #7
   18b08:	d03f      	beq.n	18b8a <tcp_alloc+0x112>
   18b0a:	2a03      	cmp	r2, #3
   18b0c:	d1ef      	bne.n	18aee <tcp_alloc+0x76>
      err = tcp_send_fin(pcb);
   18b0e:	4620      	mov	r0, r4
   18b10:	f001 fc7e 	bl	1a410 <tcp_send_fin>
      if (err == ERR_OK) {
   18b14:	b928      	cbnz	r0, 18b22 <tcp_alloc+0xaa>
        pcb->state = FIN_WAIT_1;
   18b16:	f884 8014 	strb.w	r8, [r4, #20]
    tcp_output(pcb);
   18b1a:	4620      	mov	r0, r4
   18b1c:	f001 feca 	bl	1a8b4 <tcp_output>
   18b20:	e7e5      	b.n	18aee <tcp_alloc+0x76>
  } else if (err == ERR_MEM) {
   18b22:	3001      	adds	r0, #1
   18b24:	d1e3      	bne.n	18aee <tcp_alloc+0x76>
    tcp_set_flags(pcb, TF_CLOSEPEND);
   18b26:	8b63      	ldrh	r3, [r4, #26]
   18b28:	f043 0308 	orr.w	r3, r3, #8
   18b2c:	8363      	strh	r3, [r4, #26]
   18b2e:	e7de      	b.n	18aee <tcp_alloc+0x76>
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
   18b30:	4b4a      	ldr	r3, [pc, #296]	; (18c5c <tcp_alloc+0x1e4>)
   18b32:	681b      	ldr	r3, [r3, #0]
   18b34:	b18b      	cbz	r3, 18b5a <tcp_alloc+0xe2>
    if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
   18b36:	4a42      	ldr	r2, [pc, #264]	; (18c40 <tcp_alloc+0x1c8>)
   18b38:	6a19      	ldr	r1, [r3, #32]
   18b3a:	6814      	ldr	r4, [r2, #0]
   18b3c:	4618      	mov	r0, r3
   18b3e:	1a61      	subs	r1, r4, r1
   18b40:	e005      	b.n	18b4e <tcp_alloc+0xd6>
   18b42:	6a1a      	ldr	r2, [r3, #32]
   18b44:	1aa2      	subs	r2, r4, r2
   18b46:	428a      	cmp	r2, r1
   18b48:	bf24      	itt	cs
   18b4a:	4611      	movcs	r1, r2
   18b4c:	4618      	movcs	r0, r3
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
   18b4e:	68db      	ldr	r3, [r3, #12]
   18b50:	2b00      	cmp	r3, #0
   18b52:	d1f6      	bne.n	18b42 <tcp_alloc+0xca>
  tcp_abandon(pcb, 1);
   18b54:	2101      	movs	r1, #1
   18b56:	f7ff fb19 	bl	1818c <tcp_abandon>
    pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
   18b5a:	2002      	movs	r0, #2
   18b5c:	f7fe fae4 	bl	17128 <memp_malloc>
    if (pcb == NULL) {
   18b60:	4604      	mov	r4, r0
   18b62:	2800      	cmp	r0, #0
   18b64:	d190      	bne.n	18a88 <tcp_alloc+0x10>
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
   18b66:	6831      	ldr	r1, [r6, #0]
   18b68:	b1d9      	cbz	r1, 18ba2 <tcp_alloc+0x12a>
      if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
   18b6a:	4b35      	ldr	r3, [pc, #212]	; (18c40 <tcp_alloc+0x1c8>)
   18b6c:	4622      	mov	r2, r4
   18b6e:	6818      	ldr	r0, [r3, #0]
   18b70:	e001      	b.n	18b76 <tcp_alloc+0xfe>
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
   18b72:	68c9      	ldr	r1, [r1, #12]
   18b74:	b189      	cbz	r1, 18b9a <tcp_alloc+0x122>
    if (pcb->state == state) {
   18b76:	7d0b      	ldrb	r3, [r1, #20]
   18b78:	2b09      	cmp	r3, #9
   18b7a:	d1fa      	bne.n	18b72 <tcp_alloc+0xfa>
      if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
   18b7c:	6a0b      	ldr	r3, [r1, #32]
   18b7e:	1ac3      	subs	r3, r0, r3
   18b80:	4293      	cmp	r3, r2
   18b82:	bf24      	itt	cs
   18b84:	461a      	movcs	r2, r3
   18b86:	460c      	movcs	r4, r1
   18b88:	e7f3      	b.n	18b72 <tcp_alloc+0xfa>
      err = tcp_send_fin(pcb);
   18b8a:	4620      	mov	r0, r4
   18b8c:	f001 fc40 	bl	1a410 <tcp_send_fin>
      if (err == ERR_OK) {
   18b90:	2800      	cmp	r0, #0
   18b92:	d1c6      	bne.n	18b22 <tcp_alloc+0xaa>
        pcb->state = LAST_ACK;
   18b94:	f884 9014 	strb.w	r9, [r4, #20]
   18b98:	e7bf      	b.n	18b1a <tcp_alloc+0xa2>
  if (inactive != NULL) {
   18b9a:	b114      	cbz	r4, 18ba2 <tcp_alloc+0x12a>
    tcp_abandon(inactive, 0);
   18b9c:	4620      	mov	r0, r4
   18b9e:	f7ff faf5 	bl	1818c <tcp_abandon>
      pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
   18ba2:	2002      	movs	r0, #2
   18ba4:	f7fe fac0 	bl	17128 <memp_malloc>
      if (pcb == NULL) {
   18ba8:	4604      	mov	r4, r0
   18baa:	2800      	cmp	r0, #0
   18bac:	f47f af6c 	bne.w	18a88 <tcp_alloc+0x10>
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
   18bb0:	6831      	ldr	r1, [r6, #0]
   18bb2:	b199      	cbz	r1, 18bdc <tcp_alloc+0x164>
      if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
   18bb4:	4b22      	ldr	r3, [pc, #136]	; (18c40 <tcp_alloc+0x1c8>)
   18bb6:	4622      	mov	r2, r4
   18bb8:	6818      	ldr	r0, [r3, #0]
   18bba:	e001      	b.n	18bc0 <tcp_alloc+0x148>
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
   18bbc:	68c9      	ldr	r1, [r1, #12]
   18bbe:	b149      	cbz	r1, 18bd4 <tcp_alloc+0x15c>
    if (pcb->state == state) {
   18bc0:	7d0b      	ldrb	r3, [r1, #20]
   18bc2:	2b08      	cmp	r3, #8
   18bc4:	d1fa      	bne.n	18bbc <tcp_alloc+0x144>
      if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
   18bc6:	6a0b      	ldr	r3, [r1, #32]
   18bc8:	1ac3      	subs	r3, r0, r3
   18bca:	4293      	cmp	r3, r2
   18bcc:	bf24      	itt	cs
   18bce:	461a      	movcs	r2, r3
   18bd0:	460c      	movcs	r4, r1
   18bd2:	e7f3      	b.n	18bbc <tcp_alloc+0x144>
  if (inactive != NULL) {
   18bd4:	b114      	cbz	r4, 18bdc <tcp_alloc+0x164>
    tcp_abandon(inactive, 0);
   18bd6:	4620      	mov	r0, r4
   18bd8:	f7ff fad8 	bl	1818c <tcp_abandon>
        pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
   18bdc:	2002      	movs	r0, #2
   18bde:	f7fe faa3 	bl	17128 <memp_malloc>
        if (pcb == NULL) {
   18be2:	4604      	mov	r4, r0
   18be4:	2800      	cmp	r0, #0
   18be6:	f47f af4f 	bne.w	18a88 <tcp_alloc+0x10>
  mprio = LWIP_MIN(TCP_PRIO_MAX, prio);
   18bea:	062b      	lsls	r3, r5, #24
   18bec:	d425      	bmi.n	18c3a <tcp_alloc+0x1c2>
  if (mprio == 0) {
   18bee:	b1e5      	cbz	r5, 18c2a <tcp_alloc+0x1b2>
   18bf0:	462b      	mov	r3, r5
        ((pcb->prio == mprio) && ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity))) {
   18bf2:	4913      	ldr	r1, [pc, #76]	; (18c40 <tcp_alloc+0x1c8>)
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
   18bf4:	6832      	ldr	r2, [r6, #0]
        ((pcb->prio == mprio) && ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity))) {
   18bf6:	680e      	ldr	r6, [r1, #0]
  mprio--;
   18bf8:	3b01      	subs	r3, #1
   18bfa:	b2db      	uxtb	r3, r3
  inactivity = 0;
   18bfc:	2000      	movs	r0, #0
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
   18bfe:	b17a      	cbz	r2, 18c20 <tcp_alloc+0x1a8>
    if ((pcb->prio < mprio) ||
   18c00:	7d57      	ldrb	r7, [r2, #21]
   18c02:	429f      	cmp	r7, r3
   18c04:	d205      	bcs.n	18c12 <tcp_alloc+0x19a>
   18c06:	6a11      	ldr	r1, [r2, #32]
      inactivity = tcp_ticks - pcb->tmr;
   18c08:	1a70      	subs	r0, r6, r1
    if ((pcb->prio < mprio) ||
   18c0a:	463b      	mov	r3, r7
      inactivity = tcp_ticks - pcb->tmr;
   18c0c:	4614      	mov	r4, r2
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
   18c0e:	68d2      	ldr	r2, [r2, #12]
   18c10:	e7f5      	b.n	18bfe <tcp_alloc+0x186>
    if ((pcb->prio < mprio) ||
   18c12:	d1fc      	bne.n	18c0e <tcp_alloc+0x196>
        ((pcb->prio == mprio) && ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity))) {
   18c14:	6a11      	ldr	r1, [r2, #32]
   18c16:	eba6 0e01 	sub.w	lr, r6, r1
   18c1a:	4586      	cmp	lr, r0
   18c1c:	d3f7      	bcc.n	18c0e <tcp_alloc+0x196>
   18c1e:	e7f3      	b.n	18c08 <tcp_alloc+0x190>
  if (inactive != NULL) {
   18c20:	b11c      	cbz	r4, 18c2a <tcp_alloc+0x1b2>
  tcp_abandon(pcb, 1);
   18c22:	4620      	mov	r0, r4
   18c24:	2101      	movs	r1, #1
   18c26:	f7ff fab1 	bl	1818c <tcp_abandon>
          pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
   18c2a:	2002      	movs	r0, #2
   18c2c:	f7fe fa7c 	bl	17128 <memp_malloc>
  if (pcb != NULL) {
   18c30:	4604      	mov	r4, r0
   18c32:	2800      	cmp	r0, #0
   18c34:	f43f af50 	beq.w	18ad8 <tcp_alloc+0x60>
   18c38:	e726      	b.n	18a88 <tcp_alloc+0x10>
  mprio = LWIP_MIN(TCP_PRIO_MAX, prio);
   18c3a:	237f      	movs	r3, #127	; 0x7f
   18c3c:	e7d9      	b.n	18bf2 <tcp_alloc+0x17a>
   18c3e:	bf00      	nop
   18c40:	2000a3ec 	.word	0x2000a3ec
   18c44:	20002904 	.word	0x20002904
   18c48:	16d016d0 	.word	0x16d016d0
   18c4c:	0b680001 	.word	0x0b680001
   18c50:	000180d5 	.word	0x000180d5
   18c54:	006ddd00 	.word	0x006ddd00
   18c58:	2000a3e8 	.word	0x2000a3e8
   18c5c:	2000a3f8 	.word	0x2000a3f8

00018c60 <tcp_pcb_purge>:
  LWIP_ERROR("tcp_pcb_purge: invalid pcb", pcb != NULL, return);
   18c60:	b130      	cbz	r0, 18c70 <tcp_pcb_purge+0x10>
  if (pcb->state != CLOSED &&
   18c62:	7d03      	ldrb	r3, [r0, #20]
   18c64:	2b01      	cmp	r3, #1
   18c66:	d903      	bls.n	18c70 <tcp_pcb_purge+0x10>
   18c68:	2b0a      	cmp	r3, #10
   18c6a:	d001      	beq.n	18c70 <tcp_pcb_purge+0x10>
   18c6c:	f7ff b8e4 	b.w	17e38 <tcp_pcb_purge.part.1>
   18c70:	4770      	bx	lr
   18c72:	bf00      	nop

00018c74 <tcp_pcb_remove>:
  TCP_RMV(pcblist, pcb);
   18c74:	6802      	ldr	r2, [r0, #0]
   18c76:	428a      	cmp	r2, r1
{
   18c78:	b510      	push	{r4, lr}
   18c7a:	460c      	mov	r4, r1
  TCP_RMV(pcblist, pcb);
   18c7c:	d02f      	beq.n	18cde <tcp_pcb_remove+0x6a>
   18c7e:	b14a      	cbz	r2, 18c94 <tcp_pcb_remove+0x20>
   18c80:	68d3      	ldr	r3, [r2, #12]
   18c82:	4299      	cmp	r1, r3
   18c84:	d027      	beq.n	18cd6 <tcp_pcb_remove+0x62>
   18c86:	b12b      	cbz	r3, 18c94 <tcp_pcb_remove+0x20>
   18c88:	68da      	ldr	r2, [r3, #12]
   18c8a:	4294      	cmp	r4, r2
   18c8c:	d024      	beq.n	18cd8 <tcp_pcb_remove+0x64>
   18c8e:	4613      	mov	r3, r2
   18c90:	2b00      	cmp	r3, #0
   18c92:	d1f9      	bne.n	18c88 <tcp_pcb_remove+0x14>
  if (pcb->state != CLOSED &&
   18c94:	7d23      	ldrb	r3, [r4, #20]
  TCP_RMV(pcblist, pcb);
   18c96:	2200      	movs	r2, #0
   18c98:	60e2      	str	r2, [r4, #12]
  if (pcb->state != CLOSED &&
   18c9a:	b15b      	cbz	r3, 18cb4 <tcp_pcb_remove+0x40>
   18c9c:	2b0a      	cmp	r3, #10
   18c9e:	d00c      	beq.n	18cba <tcp_pcb_remove+0x46>
      pcb->state != TIME_WAIT &&
   18ca0:	2b01      	cmp	r3, #1
   18ca2:	d00a      	beq.n	18cba <tcp_pcb_remove+0x46>
   18ca4:	4620      	mov	r0, r4
   18ca6:	f7ff f8c7 	bl	17e38 <tcp_pcb_purge.part.1>
  if ((pcb->state != TIME_WAIT) &&
   18caa:	7d23      	ldrb	r3, [r4, #20]
   18cac:	2b0a      	cmp	r3, #10
   18cae:	d004      	beq.n	18cba <tcp_pcb_remove+0x46>
   18cb0:	2b01      	cmp	r3, #1
   18cb2:	d002      	beq.n	18cba <tcp_pcb_remove+0x46>
      (pcb->flags & TF_ACK_DELAY)) {
   18cb4:	8b63      	ldrh	r3, [r4, #26]
      (pcb->state != LISTEN) &&
   18cb6:	07da      	lsls	r2, r3, #31
   18cb8:	d403      	bmi.n	18cc2 <tcp_pcb_remove+0x4e>
  pcb->state = CLOSED;
   18cba:	2300      	movs	r3, #0
   18cbc:	7523      	strb	r3, [r4, #20]
  pcb->local_port = 0;
   18cbe:	82e3      	strh	r3, [r4, #22]
   18cc0:	bd10      	pop	{r4, pc}
    tcp_ack_now(pcb);
   18cc2:	f043 0302 	orr.w	r3, r3, #2
   18cc6:	8363      	strh	r3, [r4, #26]
    tcp_output(pcb);
   18cc8:	4620      	mov	r0, r4
   18cca:	f001 fdf3 	bl	1a8b4 <tcp_output>
  pcb->state = CLOSED;
   18cce:	2300      	movs	r3, #0
   18cd0:	7523      	strb	r3, [r4, #20]
  pcb->local_port = 0;
   18cd2:	82e3      	strh	r3, [r4, #22]
   18cd4:	bd10      	pop	{r4, pc}
  TCP_RMV(pcblist, pcb);
   18cd6:	4613      	mov	r3, r2
   18cd8:	68e2      	ldr	r2, [r4, #12]
   18cda:	60da      	str	r2, [r3, #12]
   18cdc:	e7da      	b.n	18c94 <tcp_pcb_remove+0x20>
   18cde:	68cb      	ldr	r3, [r1, #12]
   18ce0:	6003      	str	r3, [r0, #0]
   18ce2:	e7d7      	b.n	18c94 <tcp_pcb_remove+0x20>

00018ce4 <tcp_next_iss>:
  iss += tcp_ticks;       /* XXX */
   18ce4:	4b03      	ldr	r3, [pc, #12]	; (18cf4 <tcp_next_iss+0x10>)
   18ce6:	4a04      	ldr	r2, [pc, #16]	; (18cf8 <tcp_next_iss+0x14>)
   18ce8:	6858      	ldr	r0, [r3, #4]
   18cea:	6812      	ldr	r2, [r2, #0]
   18cec:	4410      	add	r0, r2
   18cee:	6058      	str	r0, [r3, #4]
}
   18cf0:	4770      	bx	lr
   18cf2:	bf00      	nop
   18cf4:	200000f0 	.word	0x200000f0
   18cf8:	2000a3ec 	.word	0x2000a3ec

00018cfc <tcp_eff_send_mss_netif>:
    if (outif == NULL) {
   18cfc:	b151      	cbz	r1, 18d14 <tcp_eff_send_mss_netif+0x18>
    mtu = outif->mtu;
   18cfe:	8d8b      	ldrh	r3, [r1, #44]	; 0x2c
  if (mtu != 0) {
   18d00:	b143      	cbz	r3, 18d14 <tcp_eff_send_mss_netif+0x18>
    mss_s = (mtu > offset) ? (u16_t)(mtu - offset) : 0;
   18d02:	2b28      	cmp	r3, #40	; 0x28
   18d04:	d905      	bls.n	18d12 <tcp_eff_send_mss_netif+0x16>
   18d06:	3b28      	subs	r3, #40	; 0x28
   18d08:	b29b      	uxth	r3, r3
   18d0a:	4298      	cmp	r0, r3
   18d0c:	bf28      	it	cs
   18d0e:	4618      	movcs	r0, r3
   18d10:	4770      	bx	lr
   18d12:	2000      	movs	r0, #0
}
   18d14:	4770      	bx	lr
   18d16:	bf00      	nop

00018d18 <tcp_netif_ip_addr_changed>:
  if (!ip_addr_isany(old_addr)) {
   18d18:	b108      	cbz	r0, 18d1e <tcp_netif_ip_addr_changed+0x6>
   18d1a:	6802      	ldr	r2, [r0, #0]
   18d1c:	b902      	cbnz	r2, 18d20 <tcp_netif_ip_addr_changed+0x8>
   18d1e:	4770      	bx	lr
{
   18d20:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_active_pcbs);
   18d22:	4b22      	ldr	r3, [pc, #136]	; (18dac <tcp_netif_ip_addr_changed+0x94>)
   18d24:	681c      	ldr	r4, [r3, #0]
   18d26:	4605      	mov	r5, r0
   18d28:	460e      	mov	r6, r1
  while (pcb != NULL) {
   18d2a:	b1ac      	cbz	r4, 18d58 <tcp_netif_ip_addr_changed+0x40>
    if (ip_addr_cmp(&pcb->local_ip, old_addr)
   18d2c:	6821      	ldr	r1, [r4, #0]
   18d2e:	428a      	cmp	r2, r1
        && (!IP_IS_V4_VAL(pcb->local_ip) || !ip4_addr_islinklocal(ip_2_ip4(&pcb->local_ip)))
   18d30:	f64f 67a9 	movw	r7, #65193	; 0xfea9
    if (ip_addr_cmp(&pcb->local_ip, old_addr)
   18d34:	d005      	beq.n	18d42 <tcp_netif_ip_addr_changed+0x2a>
      pcb = pcb->next;
   18d36:	68e4      	ldr	r4, [r4, #12]
  while (pcb != NULL) {
   18d38:	b174      	cbz	r4, 18d58 <tcp_netif_ip_addr_changed+0x40>
   18d3a:	682a      	ldr	r2, [r5, #0]
    if (ip_addr_cmp(&pcb->local_ip, old_addr)
   18d3c:	6821      	ldr	r1, [r4, #0]
   18d3e:	428a      	cmp	r2, r1
   18d40:	d1f9      	bne.n	18d36 <tcp_netif_ip_addr_changed+0x1e>
        && (!IP_IS_V4_VAL(pcb->local_ip) || !ip4_addr_islinklocal(ip_2_ip4(&pcb->local_ip)))
   18d42:	b292      	uxth	r2, r2
   18d44:	42ba      	cmp	r2, r7
  tcp_abandon(pcb, 1);
   18d46:	4620      	mov	r0, r4
   18d48:	f04f 0101 	mov.w	r1, #1
        && (!IP_IS_V4_VAL(pcb->local_ip) || !ip4_addr_islinklocal(ip_2_ip4(&pcb->local_ip)))
   18d4c:	d0f3      	beq.n	18d36 <tcp_netif_ip_addr_changed+0x1e>
      struct tcp_pcb *next = pcb->next;
   18d4e:	68e4      	ldr	r4, [r4, #12]
  tcp_abandon(pcb, 1);
   18d50:	f7ff fa1c 	bl	1818c <tcp_abandon>
  while (pcb != NULL) {
   18d54:	2c00      	cmp	r4, #0
   18d56:	d1f0      	bne.n	18d3a <tcp_netif_ip_addr_changed+0x22>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_bound_pcbs);
   18d58:	4b15      	ldr	r3, [pc, #84]	; (18db0 <tcp_netif_ip_addr_changed+0x98>)
   18d5a:	681c      	ldr	r4, [r3, #0]
        && (!IP_IS_V4_VAL(pcb->local_ip) || !ip4_addr_islinklocal(ip_2_ip4(&pcb->local_ip)))
   18d5c:	f64f 67a9 	movw	r7, #65193	; 0xfea9
  while (pcb != NULL) {
   18d60:	b134      	cbz	r4, 18d70 <tcp_netif_ip_addr_changed+0x58>
    if (ip_addr_cmp(&pcb->local_ip, old_addr)
   18d62:	6822      	ldr	r2, [r4, #0]
   18d64:	6829      	ldr	r1, [r5, #0]
   18d66:	428a      	cmp	r2, r1
   18d68:	d012      	beq.n	18d90 <tcp_netif_ip_addr_changed+0x78>
      pcb = pcb->next;
   18d6a:	68e4      	ldr	r4, [r4, #12]
  while (pcb != NULL) {
   18d6c:	2c00      	cmp	r4, #0
   18d6e:	d1f8      	bne.n	18d62 <tcp_netif_ip_addr_changed+0x4a>
    if (!ip_addr_isany(new_addr)) {
   18d70:	b1d6      	cbz	r6, 18da8 <tcp_netif_ip_addr_changed+0x90>
   18d72:	6833      	ldr	r3, [r6, #0]
   18d74:	b15b      	cbz	r3, 18d8e <tcp_netif_ip_addr_changed+0x76>
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
   18d76:	4b0f      	ldr	r3, [pc, #60]	; (18db4 <tcp_netif_ip_addr_changed+0x9c>)
   18d78:	681b      	ldr	r3, [r3, #0]
   18d7a:	b143      	cbz	r3, 18d8e <tcp_netif_ip_addr_changed+0x76>
        if (ip_addr_cmp(&lpcb->local_ip, old_addr)) {
   18d7c:	6819      	ldr	r1, [r3, #0]
   18d7e:	682a      	ldr	r2, [r5, #0]
   18d80:	4291      	cmp	r1, r2
          ip_addr_copy(lpcb->local_ip, *new_addr);
   18d82:	bf04      	itt	eq
   18d84:	6832      	ldreq	r2, [r6, #0]
   18d86:	601a      	streq	r2, [r3, #0]
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
   18d88:	68db      	ldr	r3, [r3, #12]
   18d8a:	2b00      	cmp	r3, #0
   18d8c:	d1f6      	bne.n	18d7c <tcp_netif_ip_addr_changed+0x64>
   18d8e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        && (!IP_IS_V4_VAL(pcb->local_ip) || !ip4_addr_islinklocal(ip_2_ip4(&pcb->local_ip)))
   18d90:	b292      	uxth	r2, r2
   18d92:	42ba      	cmp	r2, r7
  tcp_abandon(pcb, 1);
   18d94:	4620      	mov	r0, r4
   18d96:	f04f 0101 	mov.w	r1, #1
        && (!IP_IS_V4_VAL(pcb->local_ip) || !ip4_addr_islinklocal(ip_2_ip4(&pcb->local_ip)))
   18d9a:	d0e6      	beq.n	18d6a <tcp_netif_ip_addr_changed+0x52>
      struct tcp_pcb *next = pcb->next;
   18d9c:	68e4      	ldr	r4, [r4, #12]
  tcp_abandon(pcb, 1);
   18d9e:	f7ff f9f5 	bl	1818c <tcp_abandon>
  while (pcb != NULL) {
   18da2:	2c00      	cmp	r4, #0
   18da4:	d1dd      	bne.n	18d62 <tcp_netif_ip_addr_changed+0x4a>
   18da6:	e7e3      	b.n	18d70 <tcp_netif_ip_addr_changed+0x58>
   18da8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   18daa:	bf00      	nop
   18dac:	2000a3e8 	.word	0x2000a3e8
   18db0:	2000a3f4 	.word	0x2000a3f4
   18db4:	2000a3f0 	.word	0x2000a3f0

00018db8 <tcp_free_ooseq>:
{
   18db8:	b570      	push	{r4, r5, r6, lr}
  if (pcb->ooseq) {
   18dba:	6f44      	ldr	r4, [r0, #116]	; 0x74
   18dbc:	b174      	cbz	r4, 18ddc <tcp_free_ooseq+0x24>
   18dbe:	4606      	mov	r6, r0
    if (seg->p != NULL) {
   18dc0:	6863      	ldr	r3, [r4, #4]
    struct tcp_seg *next = seg->next;
   18dc2:	6825      	ldr	r5, [r4, #0]
      pbuf_free(seg->p);
   18dc4:	4618      	mov	r0, r3
    if (seg->p != NULL) {
   18dc6:	b10b      	cbz	r3, 18dcc <tcp_free_ooseq+0x14>
      pbuf_free(seg->p);
   18dc8:	f7fe fd10 	bl	177ec <pbuf_free>
    memp_free(MEMP_TCP_SEG, seg);
   18dcc:	4621      	mov	r1, r4
   18dce:	2004      	movs	r0, #4
   18dd0:	f7fe f9ba 	bl	17148 <memp_free>
   18dd4:	462c      	mov	r4, r5
  while (seg != NULL) {
   18dd6:	2d00      	cmp	r5, #0
   18dd8:	d1f2      	bne.n	18dc0 <tcp_free_ooseq+0x8>
    pcb->ooseq = NULL;
   18dda:	6775      	str	r5, [r6, #116]	; 0x74
   18ddc:	bd70      	pop	{r4, r5, r6, pc}
   18dde:	bf00      	nop

00018de0 <tcp_oos_insert_segment>:
 *
 * Called from tcp_receive()
 */
static void
tcp_oos_insert_segment(struct tcp_seg *cseg, struct tcp_seg *next)
{
   18de0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  struct tcp_seg *old_seg;

  LWIP_ASSERT("tcp_oos_insert_segment: invalid cseg", cseg != NULL);

  if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
   18de4:	68c3      	ldr	r3, [r0, #12]
{
   18de6:	4605      	mov	r5, r0
  if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
   18de8:	8998      	ldrh	r0, [r3, #12]
{
   18dea:	460f      	mov	r7, r1
  if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
   18dec:	f7fa fc84 	bl	136f8 <lwip_htons>
   18df0:	07c2      	lsls	r2, r0, #31
   18df2:	d448      	bmi.n	18e86 <tcp_oos_insert_segment+0xa6>
    tcp_segs_free(next);
    next = NULL;
  } else {
    /* delete some following segments
       oos queue may have segments with FIN flag */
    while (next &&
   18df4:	2f00      	cmp	r7, #0
   18df6:	d036      	beq.n	18e66 <tcp_oos_insert_segment+0x86>
           TCP_SEQ_GEQ((seqno + cseg->len),
   18df8:	68f9      	ldr	r1, [r7, #12]
   18dfa:	4e25      	ldr	r6, [pc, #148]	; (18e90 <tcp_oos_insert_segment+0xb0>)
   18dfc:	f8d1 e004 	ldr.w	lr, [r1, #4]
   18e00:	892b      	ldrh	r3, [r5, #8]
   18e02:	6830      	ldr	r0, [r6, #0]
   18e04:	893a      	ldrh	r2, [r7, #8]
   18e06:	eba3 030e 	sub.w	r3, r3, lr
   18e0a:	4403      	add	r3, r0
   18e0c:	1a9a      	subs	r2, r3, r2
    while (next &&
   18e0e:	2a00      	cmp	r2, #0
   18e10:	bfb8      	it	lt
   18e12:	463c      	movlt	r4, r7
   18e14:	da12      	bge.n	18e3c <tcp_oos_insert_segment+0x5c>
   18e16:	e02a      	b.n	18e6e <tcp_oos_insert_segment+0x8e>
      /* cseg with FIN already processed */
      if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
        TCPH_SET_FLAG(cseg->tcphdr, TCP_FIN);
      }
      old_seg = next;
      next = next->next;
   18e18:	683c      	ldr	r4, [r7, #0]
      tcp_seg_free(old_seg);
   18e1a:	4638      	mov	r0, r7
   18e1c:	f7ff fe0a 	bl	18a34 <tcp_seg_free>
    while (next &&
   18e20:	b30c      	cbz	r4, 18e66 <tcp_oos_insert_segment+0x86>
           TCP_SEQ_GEQ((seqno + cseg->len),
   18e22:	68e1      	ldr	r1, [r4, #12]
   18e24:	6830      	ldr	r0, [r6, #0]
   18e26:	892b      	ldrh	r3, [r5, #8]
   18e28:	f8d1 e004 	ldr.w	lr, [r1, #4]
   18e2c:	8922      	ldrh	r2, [r4, #8]
   18e2e:	4403      	add	r3, r0
   18e30:	eba3 030e 	sub.w	r3, r3, lr
   18e34:	1a9a      	subs	r2, r3, r2
    while (next &&
   18e36:	2a00      	cmp	r2, #0
   18e38:	db19      	blt.n	18e6e <tcp_oos_insert_segment+0x8e>
   18e3a:	4627      	mov	r7, r4
      if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
   18e3c:	8988      	ldrh	r0, [r1, #12]
   18e3e:	f7fa fc5b 	bl	136f8 <lwip_htons>
   18e42:	07c3      	lsls	r3, r0, #31
   18e44:	d5e8      	bpl.n	18e18 <tcp_oos_insert_segment+0x38>
        TCPH_SET_FLAG(cseg->tcphdr, TCP_FIN);
   18e46:	f8d5 800c 	ldr.w	r8, [r5, #12]
   18e4a:	2001      	movs	r0, #1
   18e4c:	f8b8 400c 	ldrh.w	r4, [r8, #12]
   18e50:	f7fa fc52 	bl	136f8 <lwip_htons>
   18e54:	4320      	orrs	r0, r4
      next = next->next;
   18e56:	683c      	ldr	r4, [r7, #0]
        TCPH_SET_FLAG(cseg->tcphdr, TCP_FIN);
   18e58:	f8a8 000c 	strh.w	r0, [r8, #12]
      tcp_seg_free(old_seg);
   18e5c:	4638      	mov	r0, r7
   18e5e:	f7ff fde9 	bl	18a34 <tcp_seg_free>
    while (next &&
   18e62:	2c00      	cmp	r4, #0
   18e64:	d1dd      	bne.n	18e22 <tcp_oos_insert_segment+0x42>
    next = NULL;
   18e66:	2400      	movs	r4, #0
      /* We need to trim the incoming segment. */
      cseg->len = (u16_t)(next->tcphdr->seqno - seqno);
      pbuf_realloc(cseg->p, cseg->len);
    }
  }
  cseg->next = next;
   18e68:	602c      	str	r4, [r5, #0]
}
   18e6a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if (next &&
   18e6e:	2b00      	cmp	r3, #0
   18e70:	ddfa      	ble.n	18e68 <tcp_oos_insert_segment+0x88>
      cseg->len = (u16_t)(next->tcphdr->seqno - seqno);
   18e72:	ebae 0000 	sub.w	r0, lr, r0
   18e76:	b281      	uxth	r1, r0
   18e78:	8129      	strh	r1, [r5, #8]
      pbuf_realloc(cseg->p, cseg->len);
   18e7a:	6868      	ldr	r0, [r5, #4]
   18e7c:	f7fe fbec 	bl	17658 <pbuf_realloc>
  cseg->next = next;
   18e80:	602c      	str	r4, [r5, #0]
}
   18e82:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    tcp_segs_free(next);
   18e86:	4638      	mov	r0, r7
   18e88:	f7ff fdc2 	bl	18a10 <tcp_segs_free>
    next = NULL;
   18e8c:	2400      	movs	r4, #0
   18e8e:	e7eb      	b.n	18e68 <tcp_oos_insert_segment+0x88>
   18e90:	20002908 	.word	0x20002908

00018e94 <tcp_parseopt.isra.0>:
 * Currently, only the MSS option is supported!
 *
 * @param pcb the tcp_pcb for which a segment arrived
 */
static void
tcp_parseopt(struct tcp_pcb *pcb)
   18e94:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
#endif

  LWIP_ASSERT("tcp_parseopt: invalid pcb", pcb != NULL);

  /* Parse the TCP MSS option, if present. */
  if (tcphdr_optlen != 0) {
   18e98:	4e4d      	ldr	r6, [pc, #308]	; (18fd0 <tcp_parseopt.isra.0+0x13c>)
   18e9a:	f8b6 e004 	ldrh.w	lr, [r6, #4]
   18e9e:	f1be 0f00 	cmp.w	lr, #0
   18ea2:	d04f      	beq.n	18f44 <tcp_parseopt.isra.0+0xb0>
  if ((tcphdr_opt2 == NULL) || (optidx < tcphdr_opt1len)) {
   18ea4:	89b7      	ldrh	r7, [r6, #12]
    u8_t *opts = (u8_t *)tcphdr + TCP_HLEN;
   18ea6:	f8d6 8010 	ldr.w	r8, [r6, #16]
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
   18eaa:	2200      	movs	r2, #0
   18eac:	4682      	mov	sl, r0
  if ((tcphdr_opt2 == NULL) || (optidx < tcphdr_opt1len)) {
   18eae:	68b0      	ldr	r0, [r6, #8]
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
   18eb0:	80f2      	strh	r2, [r6, #6]
    u8_t *opts = (u8_t *)tcphdr + TCP_HLEN;
   18eb2:	4614      	mov	r4, r2
   18eb4:	4613      	mov	r3, r2
    u8_t idx = (u8_t)(optidx - tcphdr_opt1len);
   18eb6:	fa5f f987 	uxtb.w	r9, r7
          }
          /* An MSS option with the right option length. */
          mss = (u16_t)(tcp_get_next_optbyte() << 8);
          mss |= tcp_get_next_optbyte();
          /* Limit the mss to the configured TCP_MSS and prevent division by zero */
          pcb->mss = ((mss > TCP_MSS) || (mss == 0)) ? TCP_MSS : mss;
   18eba:	f240 5bb3 	movw	fp, #1459	; 0x5b3
   18ebe:	2800      	cmp	r0, #0
   18ec0:	d042      	beq.n	18f48 <tcp_parseopt.isra.0+0xb4>
   18ec2:	f103 0514 	add.w	r5, r3, #20
   18ec6:	4445      	add	r5, r8
    return tcphdr_opt2[idx];
   18ec8:	eba3 0109 	sub.w	r1, r3, r9
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
   18ecc:	459e      	cmp	lr, r3
  u16_t optidx = tcp_optidx++;
   18ece:	f103 0c01 	add.w	ip, r3, #1
    return tcphdr_opt2[idx];
   18ed2:	b2c9      	uxtb	r1, r1
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
   18ed4:	d935      	bls.n	18f42 <tcp_parseopt.isra.0+0xae>
  if ((tcphdr_opt2 == NULL) || (optidx < tcphdr_opt1len)) {
   18ed6:	429f      	cmp	r7, r3
    return opts[optidx];
   18ed8:	bf8c      	ite	hi
   18eda:	782a      	ldrbhi	r2, [r5, #0]
    return tcphdr_opt2[idx];
   18edc:	5c42      	ldrbls	r2, [r0, r1]
      switch (opt) {
   18ede:	2a01      	cmp	r2, #1
  u16_t optidx = tcp_optidx++;
   18ee0:	fa1f f48c 	uxth.w	r4, ip
      switch (opt) {
   18ee4:	d051      	beq.n	18f8a <tcp_parseopt.isra.0+0xf6>
   18ee6:	d33e      	bcc.n	18f66 <tcp_parseopt.isra.0+0xd2>
   18ee8:	2a02      	cmp	r2, #2
   18eea:	d13f      	bne.n	18f6c <tcp_parseopt.isra.0+0xd8>
  u16_t optidx = tcp_optidx++;
   18eec:	1c99      	adds	r1, r3, #2
  if ((tcphdr_opt2 == NULL) || (optidx < tcphdr_opt1len)) {
   18eee:	42a7      	cmp	r7, r4
  u16_t optidx = tcp_optidx++;
   18ef0:	b289      	uxth	r1, r1
  if ((tcphdr_opt2 == NULL) || (optidx < tcphdr_opt1len)) {
   18ef2:	d856      	bhi.n	18fa2 <tcp_parseopt.isra.0+0x10e>
    u8_t idx = (u8_t)(optidx - tcphdr_opt1len);
   18ef4:	eba4 0409 	sub.w	r4, r4, r9
    return tcphdr_opt2[idx];
   18ef8:	b2e4      	uxtb	r4, r4
   18efa:	5d02      	ldrb	r2, [r0, r4]
          if (tcp_get_next_optbyte() != LWIP_TCP_OPT_LEN_MSS || (tcp_optidx - 2 + LWIP_TCP_OPT_LEN_MSS) > tcphdr_optlen) {
   18efc:	2a04      	cmp	r2, #4
   18efe:	d163      	bne.n	18fc8 <tcp_parseopt.isra.0+0x134>
   18f00:	1c4a      	adds	r2, r1, #1
   18f02:	4572      	cmp	r2, lr
   18f04:	da60      	bge.n	18fc8 <tcp_parseopt.isra.0+0x134>
  u16_t optidx = tcp_optidx++;
   18f06:	1cda      	adds	r2, r3, #3
   18f08:	b292      	uxth	r2, r2
  if ((tcphdr_opt2 == NULL) || (optidx < tcphdr_opt1len)) {
   18f0a:	2800      	cmp	r0, #0
   18f0c:	d04c      	beq.n	18fa8 <tcp_parseopt.isra.0+0x114>
   18f0e:	428f      	cmp	r7, r1
   18f10:	d852      	bhi.n	18fb8 <tcp_parseopt.isra.0+0x124>
    u8_t idx = (u8_t)(optidx - tcphdr_opt1len);
   18f12:	eba1 0109 	sub.w	r1, r1, r9
    return tcphdr_opt2[idx];
   18f16:	b2c9      	uxtb	r1, r1
  u16_t optidx = tcp_optidx++;
   18f18:	3304      	adds	r3, #4
          mss = (u16_t)(tcp_get_next_optbyte() << 8);
   18f1a:	5c44      	ldrb	r4, [r0, r1]
  u16_t optidx = tcp_optidx++;
   18f1c:	b29b      	uxth	r3, r3
          mss = (u16_t)(tcp_get_next_optbyte() << 8);
   18f1e:	0224      	lsls	r4, r4, #8
  if ((tcphdr_opt2 == NULL) || (optidx < tcphdr_opt1len)) {
   18f20:	4297      	cmp	r7, r2
   18f22:	d846      	bhi.n	18fb2 <tcp_parseopt.isra.0+0x11e>
    u8_t idx = (u8_t)(optidx - tcphdr_opt1len);
   18f24:	eba2 0109 	sub.w	r1, r2, r9
    return tcphdr_opt2[idx];
   18f28:	b2c9      	uxtb	r1, r1
   18f2a:	5c42      	ldrb	r2, [r0, r1]
          mss |= tcp_get_next_optbyte();
   18f2c:	4322      	orrs	r2, r4
          pcb->mss = ((mss > TCP_MSS) || (mss == 0)) ? TCP_MSS : mss;
   18f2e:	1e51      	subs	r1, r2, #1
   18f30:	b289      	uxth	r1, r1
   18f32:	f240 54b4 	movw	r4, #1460	; 0x5b4
   18f36:	4559      	cmp	r1, fp
   18f38:	bf88      	it	hi
   18f3a:	4622      	movhi	r2, r4
   18f3c:	f8aa 2000 	strh.w	r2, [sl]
   18f40:	e020      	b.n	18f84 <tcp_parseopt.isra.0+0xf0>
   18f42:	b982      	cbnz	r2, 18f66 <tcp_parseopt.isra.0+0xd2>
   18f44:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   18f48:	f103 0113 	add.w	r1, r3, #19
   18f4c:	4441      	add	r1, r8
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
   18f4e:	459e      	cmp	lr, r3
  u16_t optidx = tcp_optidx++;
   18f50:	f103 0c01 	add.w	ip, r3, #1
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
   18f54:	d9f5      	bls.n	18f42 <tcp_parseopt.isra.0+0xae>
      switch (opt) {
   18f56:	f811 5f01 	ldrb.w	r5, [r1, #1]!
   18f5a:	2201      	movs	r2, #1
   18f5c:	4295      	cmp	r5, r2
  u16_t optidx = tcp_optidx++;
   18f5e:	fa1f f48c 	uxth.w	r4, ip
      switch (opt) {
   18f62:	d02f      	beq.n	18fc4 <tcp_parseopt.isra.0+0x130>
   18f64:	d219      	bcs.n	18f9a <tcp_parseopt.isra.0+0x106>
   18f66:	80f4      	strh	r4, [r6, #6]
   18f68:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  u16_t optidx = tcp_optidx++;
   18f6c:	1c9a      	adds	r2, r3, #2
  if ((tcphdr_opt2 == NULL) || (optidx < tcphdr_opt1len)) {
   18f6e:	42a7      	cmp	r7, r4
  u16_t optidx = tcp_optidx++;
   18f70:	b291      	uxth	r1, r2
  if ((tcphdr_opt2 == NULL) || (optidx < tcphdr_opt1len)) {
   18f72:	d80f      	bhi.n	18f94 <tcp_parseopt.isra.0+0x100>
    u8_t idx = (u8_t)(optidx - tcphdr_opt1len);
   18f74:	eba4 0409 	sub.w	r4, r4, r9
    return tcphdr_opt2[idx];
   18f78:	b2e4      	uxtb	r4, r4
   18f7a:	5d02      	ldrb	r2, [r0, r4]
          break;
#endif /* LWIP_TCP_SACK_OUT */
        default:
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: other\n"));
          data = tcp_get_next_optbyte();
          if (data < 2) {
   18f7c:	2a01      	cmp	r2, #1
   18f7e:	d923      	bls.n	18fc8 <tcp_parseopt.isra.0+0x134>
               and we don't process them further. */
            return;
          }
          /* All other options have a length field, so that we easily
             can skip past them. */
          tcp_optidx += data - 2;
   18f80:	4413      	add	r3, r2
   18f82:	b29b      	uxth	r3, r3
   18f84:	2201      	movs	r2, #1
          pcb->mss = ((mss > TCP_MSS) || (mss == 0)) ? TCP_MSS : mss;
   18f86:	461c      	mov	r4, r3
   18f88:	e799      	b.n	18ebe <tcp_parseopt.isra.0+0x2a>
   18f8a:	3501      	adds	r5, #1
   18f8c:	4623      	mov	r3, r4
   18f8e:	e79b      	b.n	18ec8 <tcp_parseopt.isra.0+0x34>
  u16_t optidx = tcp_optidx++;
   18f90:	1c9a      	adds	r2, r3, #2
   18f92:	b291      	uxth	r1, r2
    return opts[optidx];
   18f94:	4444      	add	r4, r8
   18f96:	7d22      	ldrb	r2, [r4, #20]
   18f98:	e7f0      	b.n	18f7c <tcp_parseopt.isra.0+0xe8>
      switch (opt) {
   18f9a:	2d02      	cmp	r5, #2
   18f9c:	d1f8      	bne.n	18f90 <tcp_parseopt.isra.0+0xfc>
  u16_t optidx = tcp_optidx++;
   18f9e:	1c99      	adds	r1, r3, #2
   18fa0:	b289      	uxth	r1, r1
    return opts[optidx];
   18fa2:	4444      	add	r4, r8
   18fa4:	7d22      	ldrb	r2, [r4, #20]
   18fa6:	e7a9      	b.n	18efc <tcp_parseopt.isra.0+0x68>
   18fa8:	4441      	add	r1, r8
  u16_t optidx = tcp_optidx++;
   18faa:	3304      	adds	r3, #4
          mss = (u16_t)(tcp_get_next_optbyte() << 8);
   18fac:	7d0c      	ldrb	r4, [r1, #20]
  u16_t optidx = tcp_optidx++;
   18fae:	b29b      	uxth	r3, r3
          mss = (u16_t)(tcp_get_next_optbyte() << 8);
   18fb0:	0224      	lsls	r4, r4, #8
    return opts[optidx];
   18fb2:	4442      	add	r2, r8
   18fb4:	7d12      	ldrb	r2, [r2, #20]
   18fb6:	e7b9      	b.n	18f2c <tcp_parseopt.isra.0+0x98>
   18fb8:	4441      	add	r1, r8
  u16_t optidx = tcp_optidx++;
   18fba:	3304      	adds	r3, #4
          mss = (u16_t)(tcp_get_next_optbyte() << 8);
   18fbc:	7d0c      	ldrb	r4, [r1, #20]
  u16_t optidx = tcp_optidx++;
   18fbe:	b29b      	uxth	r3, r3
          mss = (u16_t)(tcp_get_next_optbyte() << 8);
   18fc0:	0224      	lsls	r4, r4, #8
   18fc2:	e7ad      	b.n	18f20 <tcp_parseopt.isra.0+0x8c>
  u16_t optidx = tcp_optidx++;
   18fc4:	4623      	mov	r3, r4
   18fc6:	e7c2      	b.n	18f4e <tcp_parseopt.isra.0+0xba>
   18fc8:	80f1      	strh	r1, [r6, #6]
   18fca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   18fce:	bf00      	nop
   18fd0:	20002908 	.word	0x20002908

00018fd4 <tcp_input_delayed_close.part.1>:
    if (!(pcb->flags & TF_RXCLOSED)) {
   18fd4:	8b43      	ldrh	r3, [r0, #26]
   18fd6:	06db      	lsls	r3, r3, #27
tcp_input_delayed_close(struct tcp_pcb *pcb)
   18fd8:	b510      	push	{r4, lr}
   18fda:	4604      	mov	r4, r0
    if (!(pcb->flags & TF_RXCLOSED)) {
   18fdc:	d406      	bmi.n	18fec <tcp_input_delayed_close.part.1+0x18>
      TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_CLSD);
   18fde:	f8d0 3090 	ldr.w	r3, [r0, #144]	; 0x90
   18fe2:	b11b      	cbz	r3, 18fec <tcp_input_delayed_close.part.1+0x18>
   18fe4:	f06f 010e 	mvn.w	r1, #14
   18fe8:	6900      	ldr	r0, [r0, #16]
   18fea:	4798      	blx	r3
    tcp_pcb_remove(&tcp_active_pcbs, pcb);
   18fec:	4621      	mov	r1, r4
   18fee:	4804      	ldr	r0, [pc, #16]	; (19000 <tcp_input_delayed_close.part.1+0x2c>)
   18ff0:	f7ff fe40 	bl	18c74 <tcp_pcb_remove>
    tcp_free(pcb);
   18ff4:	4620      	mov	r0, r4
   18ff6:	f7ff f8c5 	bl	18184 <tcp_free>
}
   18ffa:	2001      	movs	r0, #1
   18ffc:	bd10      	pop	{r4, pc}
   18ffe:	bf00      	nop
   19000:	2000a3e8 	.word	0x2000a3e8

00019004 <tcp_receive>:
{
   19004:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  if (flags & TCP_ACK) {
   19008:	4dab      	ldr	r5, [pc, #684]	; (192b8 <tcp_receive+0x2b4>)
   1900a:	7d2b      	ldrb	r3, [r5, #20]
{
   1900c:	4604      	mov	r4, r0
  if (flags & TCP_ACK) {
   1900e:	06d8      	lsls	r0, r3, #27
   19010:	d523      	bpl.n	1905a <tcp_receive+0x56>
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
   19012:	6d63      	ldr	r3, [r4, #84]	; 0x54
   19014:	682a      	ldr	r2, [r5, #0]
    right_wnd_edge = pcb->snd_wnd + pcb->snd_wl2;
   19016:	f8b4 e060 	ldrh.w	lr, [r4, #96]	; 0x60
   1901a:	6da0      	ldr	r0, [r4, #88]	; 0x58
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
   1901c:	1a99      	subs	r1, r3, r2
   1901e:	2900      	cmp	r1, #0
   19020:	db51      	blt.n	190c6 <tcp_receive+0xc2>
   19022:	4293      	cmp	r3, r2
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
   19024:	69ab      	ldr	r3, [r5, #24]
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
   19026:	f000 808e 	beq.w	19146 <tcp_receive+0x142>
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
   1902a:	4298      	cmp	r0, r3
   1902c:	f000 8092 	beq.w	19154 <tcp_receive+0x150>
    right_wnd_edge = pcb->snd_wnd + pcb->snd_wl2;
   19030:	4676      	mov	r6, lr
   19032:	4684      	mov	ip, r0
    if (TCP_SEQ_LEQ(ackno, pcb->lastack)) {
   19034:	6c61      	ldr	r1, [r4, #68]	; 0x44
   19036:	1a5f      	subs	r7, r3, r1
   19038:	2f00      	cmp	r7, #0
   1903a:	dd56      	ble.n	190ea <tcp_receive+0xe6>
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
   1903c:	6d22      	ldr	r2, [r4, #80]	; 0x50
   1903e:	1a9a      	subs	r2, r3, r2
   19040:	2a00      	cmp	r2, #0
   19042:	f340 808e 	ble.w	19162 <tcp_receive+0x15e>
      tcp_send_empty_ack(pcb);
   19046:	4620      	mov	r0, r4
   19048:	f001 fbb6 	bl	1a7b8 <tcp_send_empty_ack>
    if (pcb->rttest && TCP_SEQ_LT(pcb->rtseq, ackno)) {
   1904c:	6b63      	ldr	r3, [r4, #52]	; 0x34
   1904e:	b123      	cbz	r3, 1905a <tcp_receive+0x56>
   19050:	69a9      	ldr	r1, [r5, #24]
   19052:	6ba2      	ldr	r2, [r4, #56]	; 0x38
   19054:	1a51      	subs	r1, r2, r1
   19056:	2900      	cmp	r1, #0
   19058:	db52      	blt.n	19100 <tcp_receive+0xfc>
  if ((tcplen > 0) && (pcb->state < CLOSE_WAIT)) {
   1905a:	8bab      	ldrh	r3, [r5, #28]
   1905c:	b113      	cbz	r3, 19064 <tcp_receive+0x60>
   1905e:	7d22      	ldrb	r2, [r4, #20]
   19060:	2a06      	cmp	r2, #6
   19062:	d913      	bls.n	1908c <tcp_receive+0x88>
   19064:	682a      	ldr	r2, [r5, #0]
    if (!TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
   19066:	6a63      	ldr	r3, [r4, #36]	; 0x24
   19068:	1ad1      	subs	r1, r2, r3
   1906a:	2900      	cmp	r1, #0
   1906c:	db06      	blt.n	1907c <tcp_receive+0x78>
   1906e:	8d21      	ldrh	r1, [r4, #40]	; 0x28
   19070:	f1c3 0301 	rsb	r3, r3, #1
   19074:	1a5b      	subs	r3, r3, r1
   19076:	4413      	add	r3, r2
   19078:	2b00      	cmp	r3, #0
   1907a:	dd05      	ble.n	19088 <tcp_receive+0x84>
      tcp_ack_now(pcb);
   1907c:	8b63      	ldrh	r3, [r4, #26]
   1907e:	f043 0302 	orr.w	r3, r3, #2
   19082:	8363      	strh	r3, [r4, #26]
}
   19084:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   19088:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
   1908c:	6a62      	ldr	r2, [r4, #36]	; 0x24
   1908e:	6828      	ldr	r0, [r5, #0]
   19090:	1a11      	subs	r1, r2, r0
   19092:	2901      	cmp	r1, #1
   19094:	d406      	bmi.n	190a4 <tcp_receive+0xa0>
   19096:	f1c0 0601 	rsb	r6, r0, #1
   1909a:	1af3      	subs	r3, r6, r3
   1909c:	4413      	add	r3, r2
   1909e:	2b00      	cmp	r3, #0
   190a0:	f340 818c 	ble.w	193bc <tcp_receive+0x3b8>
      if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
   190a4:	1a83      	subs	r3, r0, r2
   190a6:	2b00      	cmp	r3, #0
   190a8:	db48      	blt.n	1913c <tcp_receive+0x138>
   190aa:	f100 0c01 	add.w	ip, r0, #1
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
   190ae:	8d21      	ldrh	r1, [r4, #40]	; 0x28
   190b0:	ebac 0302 	sub.w	r3, ip, r2
   190b4:	1a5b      	subs	r3, r3, r1
   190b6:	2b00      	cmp	r3, #0
   190b8:	f340 80f2 	ble.w	192a0 <tcp_receive+0x29c>
        tcp_send_empty_ack(pcb);
   190bc:	4620      	mov	r0, r4
}
   190be:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
        tcp_send_empty_ack(pcb);
   190c2:	f001 bb79 	b.w	1a7b8 <tcp_send_empty_ack>
   190c6:	6929      	ldr	r1, [r5, #16]
   190c8:	69ab      	ldr	r3, [r5, #24]
   190ca:	89ce      	ldrh	r6, [r1, #14]
      if (pcb->snd_wnd_max < pcb->snd_wnd) {
   190cc:	f8b4 1062 	ldrh.w	r1, [r4, #98]	; 0x62
      pcb->snd_wnd = SND_WND_SCALE(pcb, tcphdr->wnd);
   190d0:	f8a4 6060 	strh.w	r6, [r4, #96]	; 0x60
      if (pcb->snd_wnd_max < pcb->snd_wnd) {
   190d4:	42b1      	cmp	r1, r6
    if (TCP_SEQ_LEQ(ackno, pcb->lastack)) {
   190d6:	6c61      	ldr	r1, [r4, #68]	; 0x44
        pcb->snd_wnd_max = pcb->snd_wnd;
   190d8:	bf38      	it	cc
   190da:	f8a4 6062 	strhcc.w	r6, [r4, #98]	; 0x62
    if (TCP_SEQ_LEQ(ackno, pcb->lastack)) {
   190de:	1a5f      	subs	r7, r3, r1
   190e0:	2f00      	cmp	r7, #0
      pcb->snd_wl1 = seqno;
   190e2:	6562      	str	r2, [r4, #84]	; 0x54
      pcb->snd_wl2 = ackno;
   190e4:	65a3      	str	r3, [r4, #88]	; 0x58
   190e6:	469c      	mov	ip, r3
    if (TCP_SEQ_LEQ(ackno, pcb->lastack)) {
   190e8:	dca8      	bgt.n	1903c <tcp_receive+0x38>
      if (tcplen == 0) {
   190ea:	8baf      	ldrh	r7, [r5, #28]
   190ec:	b927      	cbnz	r7, 190f8 <tcp_receive+0xf4>
    right_wnd_edge = pcb->snd_wnd + pcb->snd_wl2;
   190ee:	4470      	add	r0, lr
        if (pcb->snd_wl2 + pcb->snd_wnd == right_wnd_edge) {
   190f0:	4466      	add	r6, ip
   190f2:	42b0      	cmp	r0, r6
   190f4:	f000 828a 	beq.w	1960c <tcp_receive+0x608>
        pcb->dupacks = 0;
   190f8:	2300      	movs	r3, #0
   190fa:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
   190fe:	e7a5      	b.n	1904c <tcp_receive+0x48>
      m = (s16_t)(tcp_ticks - pcb->rttest);
   19100:	496e      	ldr	r1, [pc, #440]	; (192bc <tcp_receive+0x2b8>)
      m = (s16_t)(m - (pcb->sa >> 3));
   19102:	f9b4 203c 	ldrsh.w	r2, [r4, #60]	; 0x3c
      m = (s16_t)(tcp_ticks - pcb->rttest);
   19106:	6809      	ldr	r1, [r1, #0]
   19108:	1ac9      	subs	r1, r1, r3
      m = (s16_t)(m - (pcb->sa >> 3));
   1910a:	eba1 01e2 	sub.w	r1, r1, r2, asr #3
   1910e:	b289      	uxth	r1, r1
   19110:	b208      	sxth	r0, r1
      if (m < 0) {
   19112:	2800      	cmp	r0, #0
      m = (s16_t)(m - (pcb->sv >> 2));
   19114:	f9b4 303e 	ldrsh.w	r3, [r4, #62]	; 0x3e
      pcb->sa = (s16_t)(pcb->sa + m);
   19118:	440a      	add	r2, r1
        m = (s16_t) - m;
   1911a:	bfbc      	itt	lt
   1911c:	4249      	neglt	r1, r1
   1911e:	b208      	sxthlt	r0, r1
      pcb->sv = (s16_t)(pcb->sv + m);
   19120:	eba3 03a3 	sub.w	r3, r3, r3, asr #2
   19124:	4403      	add	r3, r0
      pcb->sa = (s16_t)(pcb->sa + m);
   19126:	b212      	sxth	r2, r2
      pcb->sv = (s16_t)(pcb->sv + m);
   19128:	b29b      	uxth	r3, r3
      pcb->sa = (s16_t)(pcb->sa + m);
   1912a:	87a2      	strh	r2, [r4, #60]	; 0x3c
      pcb->rttest = 0;
   1912c:	2100      	movs	r1, #0
      pcb->rto = (s16_t)((pcb->sa >> 3) + pcb->sv);
   1912e:	eb03 02e2 	add.w	r2, r3, r2, asr #3
   19132:	f8a4 2040 	strh.w	r2, [r4, #64]	; 0x40
      pcb->sv = (s16_t)(pcb->sv + m);
   19136:	87e3      	strh	r3, [r4, #62]	; 0x3e
      pcb->rttest = 0;
   19138:	6361      	str	r1, [r4, #52]	; 0x34
   1913a:	e78e      	b.n	1905a <tcp_receive+0x56>
        tcp_ack_now(pcb);
   1913c:	8b63      	ldrh	r3, [r4, #26]
   1913e:	f043 0302 	orr.w	r3, r3, #2
   19142:	8363      	strh	r3, [r4, #26]
   19144:	e7ba      	b.n	190bc <tcp_receive+0xb8>
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
   19146:	1ac1      	subs	r1, r0, r3
   19148:	2900      	cmp	r1, #0
   1914a:	f6bf af6e 	bge.w	1902a <tcp_receive+0x26>
   1914e:	6929      	ldr	r1, [r5, #16]
   19150:	89ce      	ldrh	r6, [r1, #14]
   19152:	e7bb      	b.n	190cc <tcp_receive+0xc8>
        (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
   19154:	692b      	ldr	r3, [r5, #16]
   19156:	89de      	ldrh	r6, [r3, #14]
   19158:	45b6      	cmp	lr, r6
   1915a:	f080 81b6 	bcs.w	194ca <tcp_receive+0x4c6>
   1915e:	4603      	mov	r3, r0
   19160:	e7b4      	b.n	190cc <tcp_receive+0xc8>
      if (pcb->flags & TF_INFR) {
   19162:	8b62      	ldrh	r2, [r4, #26]
   19164:	0751      	lsls	r1, r2, #29
   19166:	d50a      	bpl.n	1917e <tcp_receive+0x17a>
        tcp_clear_flags(pcb, TF_INFR);
   19168:	f022 0204 	bic.w	r2, r2, #4
   1916c:	b292      	uxth	r2, r2
        pcb->cwnd = pcb->ssthresh;
   1916e:	f8b4 004a 	ldrh.w	r0, [r4, #74]	; 0x4a
        tcp_clear_flags(pcb, TF_INFR);
   19172:	8362      	strh	r2, [r4, #26]
        pcb->bytes_acked = 0;
   19174:	2100      	movs	r1, #0
        pcb->cwnd = pcb->ssthresh;
   19176:	f8a4 0048 	strh.w	r0, [r4, #72]	; 0x48
        pcb->bytes_acked = 0;
   1917a:	f8a4 106a 	strh.w	r1, [r4, #106]	; 0x6a
      pcb->rto = (s16_t)((pcb->sa >> 3) + pcb->sv);
   1917e:	8fe1      	ldrh	r1, [r4, #62]	; 0x3e
   19180:	f9b4 603c 	ldrsh.w	r6, [r4, #60]	; 0x3c
      if (pcb->state >= ESTABLISHED) {
   19184:	7d20      	ldrb	r0, [r4, #20]
      pcb->lastack = ackno;
   19186:	6463      	str	r3, [r4, #68]	; 0x44
      if (pcb->state >= ESTABLISHED) {
   19188:	2803      	cmp	r0, #3
      pcb->rto = (s16_t)((pcb->sa >> 3) + pcb->sv);
   1918a:	eb01 03e6 	add.w	r3, r1, r6, asr #3
      pcb->nrtx = 0;
   1918e:	f04f 0100 	mov.w	r1, #0
      pcb->rto = (s16_t)((pcb->sa >> 3) + pcb->sv);
   19192:	f8a4 3040 	strh.w	r3, [r4, #64]	; 0x40
      pcb->nrtx = 0;
   19196:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
      pcb->dupacks = 0;
   1919a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
      if (pcb->state >= ESTABLISHED) {
   1919e:	f200 8198 	bhi.w	194d2 <tcp_receive+0x4ce>
      pcb->unacked = tcp_free_acked_segments(pcb, pcb->unacked, "unacked", pcb->unsent);
   191a2:	6f27      	ldr	r7, [r4, #112]	; 0x70
  while (seg_list != NULL &&
   191a4:	b9a7      	cbnz	r7, 191d0 <tcp_receive+0x1cc>
   191a6:	e261      	b.n	1966c <tcp_receive+0x668>
    clen = pbuf_clen(next->p);
   191a8:	6878      	ldr	r0, [r7, #4]
    seg_list = seg_list->next;
   191aa:	683e      	ldr	r6, [r7, #0]
    clen = pbuf_clen(next->p);
   191ac:	f7fe fb54 	bl	17858 <pbuf_clen>
    pcb->snd_queuelen = (u16_t)(pcb->snd_queuelen - clen);
   191b0:	f8b4 2066 	ldrh.w	r2, [r4, #102]	; 0x66
    recv_acked = (tcpwnd_size_t)(recv_acked + next->len);
   191b4:	8be9      	ldrh	r1, [r5, #30]
    pcb->snd_queuelen = (u16_t)(pcb->snd_queuelen - clen);
   191b6:	1a10      	subs	r0, r2, r0
   191b8:	f8a4 0066 	strh.w	r0, [r4, #102]	; 0x66
    recv_acked = (tcpwnd_size_t)(recv_acked + next->len);
   191bc:	893b      	ldrh	r3, [r7, #8]
    tcp_seg_free(next);
   191be:	4638      	mov	r0, r7
    recv_acked = (tcpwnd_size_t)(recv_acked + next->len);
   191c0:	440b      	add	r3, r1
   191c2:	83eb      	strh	r3, [r5, #30]
    tcp_seg_free(next);
   191c4:	f7ff fc36 	bl	18a34 <tcp_seg_free>
  while (seg_list != NULL &&
   191c8:	2e00      	cmp	r6, #0
   191ca:	f000 824f 	beq.w	1966c <tcp_receive+0x668>
   191ce:	4637      	mov	r7, r6
         TCP_SEQ_LEQ(lwip_ntohl(seg_list->tcphdr->seqno) +
   191d0:	68fb      	ldr	r3, [r7, #12]
   191d2:	6858      	ldr	r0, [r3, #4]
   191d4:	f7fa fa94 	bl	13700 <lwip_htonl>
   191d8:	68fb      	ldr	r3, [r7, #12]
   191da:	f8b7 8008 	ldrh.w	r8, [r7, #8]
   191de:	4606      	mov	r6, r0
   191e0:	8998      	ldrh	r0, [r3, #12]
   191e2:	f7fa fa89 	bl	136f8 <lwip_htons>
   191e6:	69ab      	ldr	r3, [r5, #24]
   191e8:	f010 0003 	ands.w	r0, r0, #3
   191ec:	eba6 0603 	sub.w	r6, r6, r3
   191f0:	bf18      	it	ne
   191f2:	2001      	movne	r0, #1
   191f4:	4446      	add	r6, r8
   191f6:	4430      	add	r0, r6
  while (seg_list != NULL &&
   191f8:	2800      	cmp	r0, #0
   191fa:	ddd5      	ble.n	191a8 <tcp_receive+0x1a4>
      pcb->unsent = tcp_free_acked_segments(pcb, pcb->unsent, "unsent", pcb->unacked);
   191fc:	6ee6      	ldr	r6, [r4, #108]	; 0x6c
      pcb->unacked = tcp_free_acked_segments(pcb, pcb->unacked, "unacked", pcb->unsent);
   191fe:	6727      	str	r7, [r4, #112]	; 0x70
  while (seg_list != NULL &&
   19200:	b9a6      	cbnz	r6, 1922c <tcp_receive+0x228>
   19202:	e228      	b.n	19656 <tcp_receive+0x652>
    clen = pbuf_clen(next->p);
   19204:	6870      	ldr	r0, [r6, #4]
    seg_list = seg_list->next;
   19206:	6837      	ldr	r7, [r6, #0]
    clen = pbuf_clen(next->p);
   19208:	f7fe fb26 	bl	17858 <pbuf_clen>
    pcb->snd_queuelen = (u16_t)(pcb->snd_queuelen - clen);
   1920c:	f8b4 2066 	ldrh.w	r2, [r4, #102]	; 0x66
    recv_acked = (tcpwnd_size_t)(recv_acked + next->len);
   19210:	8be9      	ldrh	r1, [r5, #30]
    pcb->snd_queuelen = (u16_t)(pcb->snd_queuelen - clen);
   19212:	1a10      	subs	r0, r2, r0
   19214:	f8a4 0066 	strh.w	r0, [r4, #102]	; 0x66
    recv_acked = (tcpwnd_size_t)(recv_acked + next->len);
   19218:	8933      	ldrh	r3, [r6, #8]
    tcp_seg_free(next);
   1921a:	4630      	mov	r0, r6
    recv_acked = (tcpwnd_size_t)(recv_acked + next->len);
   1921c:	440b      	add	r3, r1
   1921e:	83eb      	strh	r3, [r5, #30]
    tcp_seg_free(next);
   19220:	f7ff fc08 	bl	18a34 <tcp_seg_free>
  while (seg_list != NULL &&
   19224:	2f00      	cmp	r7, #0
   19226:	f000 8215 	beq.w	19654 <tcp_receive+0x650>
   1922a:	463e      	mov	r6, r7
         TCP_SEQ_LEQ(lwip_ntohl(seg_list->tcphdr->seqno) +
   1922c:	68f3      	ldr	r3, [r6, #12]
   1922e:	6858      	ldr	r0, [r3, #4]
   19230:	f7fa fa66 	bl	13700 <lwip_htonl>
   19234:	68f3      	ldr	r3, [r6, #12]
   19236:	f8b6 8008 	ldrh.w	r8, [r6, #8]
   1923a:	4607      	mov	r7, r0
   1923c:	8998      	ldrh	r0, [r3, #12]
   1923e:	f7fa fa5b 	bl	136f8 <lwip_htons>
   19242:	69ab      	ldr	r3, [r5, #24]
   19244:	f010 0003 	ands.w	r0, r0, #3
   19248:	eba7 0703 	sub.w	r7, r7, r3
   1924c:	bf18      	it	ne
   1924e:	2001      	movne	r0, #1
   19250:	4447      	add	r7, r8
   19252:	4438      	add	r0, r7
  while (seg_list != NULL &&
   19254:	2800      	cmp	r0, #0
   19256:	ddd5      	ble.n	19204 <tcp_receive+0x200>
      if (pcb->unacked == NULL) {
   19258:	6f27      	ldr	r7, [r4, #112]	; 0x70
      pcb->unsent = tcp_free_acked_segments(pcb, pcb->unsent, "unsent", pcb->unacked);
   1925a:	66e6      	str	r6, [r4, #108]	; 0x6c
      if (pcb->unacked == NULL) {
   1925c:	fab7 f387 	clz	r3, r7
   19260:	095b      	lsrs	r3, r3, #5
   19262:	4259      	negs	r1, r3
      pcb->polltmr = 0;
   19264:	2200      	movs	r2, #0
   19266:	8621      	strh	r1, [r4, #48]	; 0x30
   19268:	7722      	strb	r2, [r4, #28]
      pcb->snd_buf = (tcpwnd_size_t)(pcb->snd_buf + recv_acked);
   1926a:	f8b4 2064 	ldrh.w	r2, [r4, #100]	; 0x64
   1926e:	8be8      	ldrh	r0, [r5, #30]
      if (pcb->flags & TF_RTO) {
   19270:	8b61      	ldrh	r1, [r4, #26]
      pcb->snd_buf = (tcpwnd_size_t)(pcb->snd_buf + recv_acked);
   19272:	4402      	add	r2, r0
   19274:	f8a4 2064 	strh.w	r2, [r4, #100]	; 0x64
      if (pcb->flags & TF_RTO) {
   19278:	050a      	lsls	r2, r1, #20
   1927a:	f57f aee7 	bpl.w	1904c <tcp_receive+0x48>
        if (pcb->unacked == NULL) {
   1927e:	2b00      	cmp	r3, #0
   19280:	f040 8232 	bne.w	196e8 <tcp_receive+0x6e4>
        } else if (TCP_SEQ_LEQ(pcb->rto_end, lwip_ntohl(pcb->unacked->tcphdr->seqno))) {
   19284:	68fb      	ldr	r3, [r7, #12]
   19286:	6ce6      	ldr	r6, [r4, #76]	; 0x4c
   19288:	6858      	ldr	r0, [r3, #4]
   1928a:	f7fa fa39 	bl	13700 <lwip_htonl>
   1928e:	1a30      	subs	r0, r6, r0
   19290:	2800      	cmp	r0, #0
   19292:	f73f aedb 	bgt.w	1904c <tcp_receive+0x48>
          tcp_clear_flags(pcb, TF_RTO);
   19296:	8b63      	ldrh	r3, [r4, #26]
   19298:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
   1929c:	8363      	strh	r3, [r4, #26]
   1929e:	e6d5      	b.n	1904c <tcp_receive+0x48>
      if (pcb->rcv_nxt == seqno) {
   192a0:	4282      	cmp	r2, r0
   192a2:	f000 80ab 	beq.w	193fc <tcp_receive+0x3f8>
        if (pcb->ooseq == NULL) {
   192a6:	6f66      	ldr	r6, [r4, #116]	; 0x74
   192a8:	2e00      	cmp	r6, #0
   192aa:	f000 8248 	beq.w	1973e <tcp_receive+0x73a>
   192ae:	2700      	movs	r7, #0
                if (TCP_SEQ_BETWEEN(seqno, prev->tcphdr->seqno + 1, next->tcphdr->seqno - 1)) {
   192b0:	f100 38ff 	add.w	r8, r0, #4294967295
   192b4:	e012      	b.n	192dc <tcp_receive+0x2d8>
   192b6:	bf00      	nop
   192b8:	20002908 	.word	0x20002908
   192bc:	2000a3ec 	.word	0x2000a3ec
   192c0:	68fa      	ldr	r2, [r7, #12]
   192c2:	6852      	ldr	r2, [r2, #4]
   192c4:	eba8 0202 	sub.w	r2, r8, r2
   192c8:	2a00      	cmp	r2, #0
   192ca:	db03      	blt.n	192d4 <tcp_receive+0x2d0>
   192cc:	f1be 0f00 	cmp.w	lr, #0
   192d0:	f340 81ee 	ble.w	196b0 <tcp_receive+0x6ac>
              if (next->next == NULL &&
   192d4:	6832      	ldr	r2, [r6, #0]
   192d6:	4637      	mov	r7, r6
   192d8:	b1ba      	cbz	r2, 1930a <tcp_receive+0x306>
   192da:	4616      	mov	r6, r2
            if (seqno == next->tcphdr->seqno) {
   192dc:	68f1      	ldr	r1, [r6, #12]
   192de:	684b      	ldr	r3, [r1, #4]
   192e0:	4298      	cmp	r0, r3
                if (TCP_SEQ_BETWEEN(seqno, prev->tcphdr->seqno + 1, next->tcphdr->seqno - 1)) {
   192e2:	ebac 0e03 	sub.w	lr, ip, r3
            if (seqno == next->tcphdr->seqno) {
   192e6:	f000 81c3 	beq.w	19670 <tcp_receive+0x66c>
              if (prev == NULL) {
   192ea:	2f00      	cmp	r7, #0
   192ec:	d1e8      	bne.n	192c0 <tcp_receive+0x2bc>
                if (TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {
   192ee:	1ac2      	subs	r2, r0, r3
   192f0:	2a00      	cmp	r2, #0
   192f2:	daef      	bge.n	192d4 <tcp_receive+0x2d0>
                  struct tcp_seg *cseg = tcp_seg_copy(&inseg);
   192f4:	489d      	ldr	r0, [pc, #628]	; (1956c <tcp_receive+0x568>)
   192f6:	f7ff fbab 	bl	18a50 <tcp_seg_copy>
                  if (cseg != NULL) {
   192fa:	2800      	cmp	r0, #0
   192fc:	f43f aede 	beq.w	190bc <tcp_receive+0xb8>
                    pcb->ooseq = cseg;
   19300:	6760      	str	r0, [r4, #116]	; 0x74
                    tcp_oos_insert_segment(cseg, next);
   19302:	4631      	mov	r1, r6
   19304:	f7ff fd6c 	bl	18de0 <tcp_oos_insert_segment>
   19308:	e6d8      	b.n	190bc <tcp_receive+0xb8>
                  TCP_SEQ_GT(seqno, next->tcphdr->seqno)) {
   1930a:	1ac3      	subs	r3, r0, r3
              if (next->next == NULL &&
   1930c:	2b00      	cmp	r3, #0
   1930e:	f77f aed5 	ble.w	190bc <tcp_receive+0xb8>
                if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
   19312:	8988      	ldrh	r0, [r1, #12]
   19314:	f7fa f9f0 	bl	136f8 <lwip_htons>
   19318:	07c2      	lsls	r2, r0, #31
   1931a:	f53f aecf 	bmi.w	190bc <tcp_receive+0xb8>
                next->next = tcp_seg_copy(&inseg);
   1931e:	4893      	ldr	r0, [pc, #588]	; (1956c <tcp_receive+0x568>)
   19320:	f7ff fb96 	bl	18a50 <tcp_seg_copy>
   19324:	6030      	str	r0, [r6, #0]
                if (next->next != NULL) {
   19326:	2800      	cmp	r0, #0
   19328:	f43f aec8 	beq.w	190bc <tcp_receive+0xb8>
                  if (TCP_SEQ_GT(next->tcphdr->seqno + next->len, seqno)) {
   1932c:	68f3      	ldr	r3, [r6, #12]
   1932e:	8932      	ldrh	r2, [r6, #8]
   19330:	6859      	ldr	r1, [r3, #4]
   19332:	682b      	ldr	r3, [r5, #0]
   19334:	440a      	add	r2, r1
   19336:	1ad2      	subs	r2, r2, r3
   19338:	2a00      	cmp	r2, #0
   1933a:	dd05      	ble.n	19348 <tcp_receive+0x344>
                    next->len = (u16_t)(seqno - next->tcphdr->seqno);
   1933c:	1a5b      	subs	r3, r3, r1
   1933e:	b299      	uxth	r1, r3
   19340:	8131      	strh	r1, [r6, #8]
                    pbuf_realloc(next->p, next->len);
   19342:	6870      	ldr	r0, [r6, #4]
   19344:	f7fe f988 	bl	17658 <pbuf_realloc>
                  if (TCP_SEQ_GT((u32_t)tcplen + seqno, pcb->rcv_nxt + (u32_t)pcb->rcv_wnd)) {
   19348:	8bab      	ldrh	r3, [r5, #28]
   1934a:	6828      	ldr	r0, [r5, #0]
   1934c:	6a61      	ldr	r1, [r4, #36]	; 0x24
   1934e:	8d22      	ldrh	r2, [r4, #40]	; 0x28
   19350:	4403      	add	r3, r0
   19352:	1a5b      	subs	r3, r3, r1
   19354:	1a9b      	subs	r3, r3, r2
   19356:	2b00      	cmp	r3, #0
   19358:	f77f aeb0 	ble.w	190bc <tcp_receive+0xb8>
                    if (TCPH_FLAGS(next->next->tcphdr) & TCP_FIN) {
   1935c:	6833      	ldr	r3, [r6, #0]
   1935e:	68db      	ldr	r3, [r3, #12]
   19360:	8998      	ldrh	r0, [r3, #12]
   19362:	f7fa f9c9 	bl	136f8 <lwip_htons>
   19366:	07c3      	lsls	r3, r0, #31
   19368:	d510      	bpl.n	1938c <tcp_receive+0x388>
                      TCPH_FLAGS_SET(next->next->tcphdr, TCPH_FLAGS(next->next->tcphdr) & ~TCP_FIN);
   1936a:	6833      	ldr	r3, [r6, #0]
   1936c:	f8d3 800c 	ldr.w	r8, [r3, #12]
   19370:	f8b8 700c 	ldrh.w	r7, [r8, #12]
   19374:	4638      	mov	r0, r7
   19376:	f7fa f9bf 	bl	136f8 <lwip_htons>
   1937a:	f000 003e 	and.w	r0, r0, #62	; 0x3e
   1937e:	f7fa f9bb 	bl	136f8 <lwip_htons>
   19382:	f427 577c 	bic.w	r7, r7, #16128	; 0x3f00
   19386:	4307      	orrs	r7, r0
   19388:	f8a8 700c 	strh.w	r7, [r8, #12]
                    next->next->len = (u16_t)(pcb->rcv_nxt + pcb->rcv_wnd - seqno);
   1938c:	6828      	ldr	r0, [r5, #0]
   1938e:	8d21      	ldrh	r1, [r4, #40]	; 0x28
   19390:	6a62      	ldr	r2, [r4, #36]	; 0x24
   19392:	6833      	ldr	r3, [r6, #0]
   19394:	1a09      	subs	r1, r1, r0
   19396:	4411      	add	r1, r2
   19398:	b289      	uxth	r1, r1
   1939a:	8119      	strh	r1, [r3, #8]
                    pbuf_realloc(next->next->p, next->next->len);
   1939c:	6858      	ldr	r0, [r3, #4]
   1939e:	f7fe f95b 	bl	17658 <pbuf_realloc>
                    tcplen = TCP_TCPLEN(next->next);
   193a2:	6833      	ldr	r3, [r6, #0]
   193a4:	68da      	ldr	r2, [r3, #12]
   193a6:	891e      	ldrh	r6, [r3, #8]
   193a8:	8990      	ldrh	r0, [r2, #12]
   193aa:	f7fa f9a5 	bl	136f8 <lwip_htons>
   193ae:	f010 0003 	ands.w	r0, r0, #3
   193b2:	bf18      	it	ne
   193b4:	2001      	movne	r0, #1
   193b6:	4406      	add	r6, r0
   193b8:	83ae      	strh	r6, [r5, #28]
   193ba:	e67f      	b.n	190bc <tcp_receive+0xb8>
      struct pbuf *p = inseg.p;
   193bc:	6a68      	ldr	r0, [r5, #36]	; 0x24
      inseg.len -= off;
   193be:	8d2e      	ldrh	r6, [r5, #40]	; 0x28
      new_tot_len = (u16_t)(inseg.p->tot_len - off);
   193c0:	8902      	ldrh	r2, [r0, #8]
      while (p->len < off) {
   193c2:	8943      	ldrh	r3, [r0, #10]
      off = (u16_t)off32;
   193c4:	b289      	uxth	r1, r1
      new_tot_len = (u16_t)(inseg.p->tot_len - off);
   193c6:	1a52      	subs	r2, r2, r1
      inseg.len -= off;
   193c8:	1a76      	subs	r6, r6, r1
      while (p->len < off) {
   193ca:	428b      	cmp	r3, r1
      new_tot_len = (u16_t)(inseg.p->tot_len - off);
   193cc:	b292      	uxth	r2, r2
      inseg.len -= off;
   193ce:	852e      	strh	r6, [r5, #40]	; 0x28
      while (p->len < off) {
   193d0:	d208      	bcs.n	193e4 <tcp_receive+0x3e0>
        p->len = 0;
   193d2:	2600      	movs	r6, #0
   193d4:	8146      	strh	r6, [r0, #10]
        p->tot_len = new_tot_len;
   193d6:	8102      	strh	r2, [r0, #8]
        p = p->next;
   193d8:	6800      	ldr	r0, [r0, #0]
        off -= p->len;
   193da:	1ac9      	subs	r1, r1, r3
      while (p->len < off) {
   193dc:	8943      	ldrh	r3, [r0, #10]
        off -= p->len;
   193de:	b289      	uxth	r1, r1
      while (p->len < off) {
   193e0:	428b      	cmp	r3, r1
   193e2:	d3f7      	bcc.n	193d4 <tcp_receive+0x3d0>
      pbuf_remove_header(p, off);
   193e4:	f7fe f9b4 	bl	17750 <pbuf_remove_header>
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
   193e8:	8d23      	ldrh	r3, [r4, #40]	; 0x28
      inseg.tcphdr->seqno = seqno = pcb->rcv_nxt;
   193ea:	6ae9      	ldr	r1, [r5, #44]	; 0x2c
   193ec:	6a62      	ldr	r2, [r4, #36]	; 0x24
   193ee:	604a      	str	r2, [r1, #4]
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
   193f0:	f1c3 0301 	rsb	r3, r3, #1
   193f4:	2b00      	cmp	r3, #0
      inseg.tcphdr->seqno = seqno = pcb->rcv_nxt;
   193f6:	602a      	str	r2, [r5, #0]
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
   193f8:	f73f ae60 	bgt.w	190bc <tcp_receive+0xb8>
        tcplen = TCP_TCPLEN(&inseg);
   193fc:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
   193fe:	8d2e      	ldrh	r6, [r5, #40]	; 0x28
   19400:	8998      	ldrh	r0, [r3, #12]
   19402:	f7fa f979 	bl	136f8 <lwip_htons>
   19406:	f010 0303 	ands.w	r3, r0, #3
   1940a:	bf18      	it	ne
   1940c:	2301      	movne	r3, #1
   1940e:	4433      	add	r3, r6
        if (tcplen > pcb->rcv_wnd) {
   19410:	8d22      	ldrh	r2, [r4, #40]	; 0x28
        tcplen = TCP_TCPLEN(&inseg);
   19412:	b29b      	uxth	r3, r3
        if (tcplen > pcb->rcv_wnd) {
   19414:	429a      	cmp	r2, r3
        tcplen = TCP_TCPLEN(&inseg);
   19416:	83ab      	strh	r3, [r5, #28]
        if (tcplen > pcb->rcv_wnd) {
   19418:	f0c0 81bb 	bcc.w	19792 <tcp_receive+0x78e>
        if (pcb->ooseq != NULL) {
   1941c:	6f62      	ldr	r2, [r4, #116]	; 0x74
   1941e:	2a00      	cmp	r2, #0
   19420:	d07b      	beq.n	1951a <tcp_receive+0x516>
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
   19422:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
   19424:	8998      	ldrh	r0, [r3, #12]
   19426:	f7fa f967 	bl	136f8 <lwip_htons>
   1942a:	07c1      	lsls	r1, r0, #31
   1942c:	d471      	bmi.n	19512 <tcp_receive+0x50e>
            struct tcp_seg *next = pcb->ooseq;
   1942e:	6f67      	ldr	r7, [r4, #116]	; 0x74
            while (next &&
   19430:	2f00      	cmp	r7, #0
   19432:	f000 81eb 	beq.w	1980c <tcp_receive+0x808>
                   TCP_SEQ_GEQ(seqno + tcplen,
   19436:	68f8      	ldr	r0, [r7, #12]
   19438:	8bab      	ldrh	r3, [r5, #28]
   1943a:	f8d5 8000 	ldr.w	r8, [r5]
   1943e:	f8d0 e004 	ldr.w	lr, [r0, #4]
   19442:	893a      	ldrh	r2, [r7, #8]
   19444:	eb03 0108 	add.w	r1, r3, r8
   19448:	eba1 0c0e 	sub.w	ip, r1, lr
   1944c:	ebac 0202 	sub.w	r2, ip, r2
            while (next &&
   19450:	2a00      	cmp	r2, #0
   19452:	da18      	bge.n	19486 <tcp_receive+0x482>
   19454:	e178      	b.n	19748 <tcp_receive+0x744>
              next = next->next;
   19456:	683e      	ldr	r6, [r7, #0]
              tcp_seg_free(tmp);
   19458:	4638      	mov	r0, r7
   1945a:	f7ff faeb 	bl	18a34 <tcp_seg_free>
            while (next &&
   1945e:	2e00      	cmp	r6, #0
   19460:	f000 81c0 	beq.w	197e4 <tcp_receive+0x7e0>
                   TCP_SEQ_GEQ(seqno + tcplen,
   19464:	68f0      	ldr	r0, [r6, #12]
   19466:	8bab      	ldrh	r3, [r5, #28]
   19468:	f8d5 8000 	ldr.w	r8, [r5]
   1946c:	f8d0 e004 	ldr.w	lr, [r0, #4]
   19470:	8932      	ldrh	r2, [r6, #8]
   19472:	eb03 0108 	add.w	r1, r3, r8
   19476:	eba1 0c0e 	sub.w	ip, r1, lr
   1947a:	ebac 0202 	sub.w	r2, ip, r2
            while (next &&
   1947e:	2a00      	cmp	r2, #0
   19480:	f2c0 8163 	blt.w	1974a <tcp_receive+0x746>
   19484:	4637      	mov	r7, r6
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
   19486:	8980      	ldrh	r0, [r0, #12]
   19488:	f7fa f936 	bl	136f8 <lwip_htons>
   1948c:	07c2      	lsls	r2, r0, #31
   1948e:	d5e2      	bpl.n	19456 <tcp_receive+0x452>
                  (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) == 0) {
   19490:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
   19492:	8998      	ldrh	r0, [r3, #12]
   19494:	f7fa f930 	bl	136f8 <lwip_htons>
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
   19498:	0783      	lsls	r3, r0, #30
   1949a:	d4dc      	bmi.n	19456 <tcp_receive+0x452>
                TCPH_SET_FLAG(inseg.tcphdr, TCP_FIN);
   1949c:	f8d5 902c 	ldr.w	r9, [r5, #44]	; 0x2c
   194a0:	2001      	movs	r0, #1
   194a2:	f8b9 800c 	ldrh.w	r8, [r9, #12]
   194a6:	f7fa f927 	bl	136f8 <lwip_htons>
                tcplen = TCP_TCPLEN(&inseg);
   194aa:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
   194ac:	8d2e      	ldrh	r6, [r5, #40]	; 0x28
                TCPH_SET_FLAG(inseg.tcphdr, TCP_FIN);
   194ae:	ea48 0000 	orr.w	r0, r8, r0
   194b2:	f8a9 000c 	strh.w	r0, [r9, #12]
                tcplen = TCP_TCPLEN(&inseg);
   194b6:	8998      	ldrh	r0, [r3, #12]
   194b8:	f7fa f91e 	bl	136f8 <lwip_htons>
   194bc:	f010 0003 	ands.w	r0, r0, #3
   194c0:	bf18      	it	ne
   194c2:	2001      	movne	r0, #1
   194c4:	4406      	add	r6, r0
   194c6:	83ae      	strh	r6, [r5, #28]
   194c8:	e7c5      	b.n	19456 <tcp_receive+0x452>
   194ca:	4676      	mov	r6, lr
   194cc:	4684      	mov	ip, r0
   194ce:	4603      	mov	r3, r0
   194d0:	e5b0      	b.n	19034 <tcp_receive+0x30>
        if (pcb->cwnd < pcb->ssthresh) {
   194d2:	f8b4 1048 	ldrh.w	r1, [r4, #72]	; 0x48
   194d6:	f8b4 304a 	ldrh.w	r3, [r4, #74]	; 0x4a
   194da:	428b      	cmp	r3, r1
      acked = (tcpwnd_size_t)(ackno - pcb->lastack);
   194dc:	b2bf      	uxth	r7, r7
        if (pcb->cwnd < pcb->ssthresh) {
   194de:	f240 80d7 	bls.w	19690 <tcp_receive+0x68c>
          u8_t num_seg = (pcb->flags & TF_RTO) ? 1 : 2;
   194e2:	f412 6f00 	tst.w	r2, #2048	; 0x800
          increase = LWIP_MIN(acked, (tcpwnd_size_t)(num_seg * pcb->mss));
   194e6:	8e63      	ldrh	r3, [r4, #50]	; 0x32
          u8_t num_seg = (pcb->flags & TF_RTO) ? 1 : 2;
   194e8:	bf0c      	ite	eq
   194ea:	2202      	moveq	r2, #2
   194ec:	2201      	movne	r2, #1
          increase = LWIP_MIN(acked, (tcpwnd_size_t)(num_seg * pcb->mss));
   194ee:	fb13 f302 	smulbb	r3, r3, r2
   194f2:	b29b      	uxth	r3, r3
          TCP_WND_INC(pcb->cwnd, increase);
   194f4:	42bb      	cmp	r3, r7
   194f6:	bf94      	ite	ls
   194f8:	18cf      	addls	r7, r1, r3
   194fa:	19cf      	addhi	r7, r1, r7
   194fc:	b2bf      	uxth	r7, r7
   194fe:	42b9      	cmp	r1, r7
   19500:	f200 80d1 	bhi.w	196a6 <tcp_receive+0x6a2>
   19504:	f8a4 7048 	strh.w	r7, [r4, #72]	; 0x48
   19508:	e64b      	b.n	191a2 <tcp_receive+0x19e>
              pcb->ooseq = pcb->ooseq->next;
   1950a:	6803      	ldr	r3, [r0, #0]
   1950c:	6763      	str	r3, [r4, #116]	; 0x74
              tcp_seg_free(old_ooseq);
   1950e:	f7ff fa91 	bl	18a34 <tcp_seg_free>
            while (pcb->ooseq != NULL) {
   19512:	6f60      	ldr	r0, [r4, #116]	; 0x74
   19514:	2800      	cmp	r0, #0
   19516:	d1f8      	bne.n	1950a <tcp_receive+0x506>
   19518:	8bab      	ldrh	r3, [r5, #28]
   1951a:	6829      	ldr	r1, [r5, #0]
   1951c:	4419      	add	r1, r3
        pcb->rcv_wnd -= tcplen;
   1951e:	8d22      	ldrh	r2, [r4, #40]	; 0x28
        pcb->rcv_nxt = seqno + tcplen;
   19520:	6261      	str	r1, [r4, #36]	; 0x24
        pcb->rcv_wnd -= tcplen;
   19522:	1ad3      	subs	r3, r2, r3
   19524:	8523      	strh	r3, [r4, #40]	; 0x28
        tcp_update_rcv_ann_wnd(pcb);
   19526:	4620      	mov	r0, r4
   19528:	f7fe ff12 	bl	18350 <tcp_update_rcv_ann_wnd>
        if (inseg.p->tot_len > 0) {
   1952c:	6a6b      	ldr	r3, [r5, #36]	; 0x24
   1952e:	891a      	ldrh	r2, [r3, #8]
   19530:	b112      	cbz	r2, 19538 <tcp_receive+0x534>
          inseg.p = NULL;
   19532:	2200      	movs	r2, #0
          recv_data = inseg.p;
   19534:	632b      	str	r3, [r5, #48]	; 0x30
          inseg.p = NULL;
   19536:	626a      	str	r2, [r5, #36]	; 0x24
        if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
   19538:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
   1953a:	8998      	ldrh	r0, [r3, #12]
   1953c:	f7fa f8dc 	bl	136f8 <lwip_htons>
   19540:	07c0      	lsls	r0, r0, #31
   19542:	d505      	bpl.n	19550 <tcp_receive+0x54c>
          recv_flags |= TF_GOT_FIN;
   19544:	f895 3034 	ldrb.w	r3, [r5, #52]	; 0x34
   19548:	f043 0320 	orr.w	r3, r3, #32
   1954c:	f885 3034 	strb.w	r3, [r5, #52]	; 0x34
        while (pcb->ooseq != NULL &&
   19550:	6f66      	ldr	r6, [r4, #116]	; 0x74
   19552:	2e00      	cmp	r6, #0
   19554:	f000 80d7 	beq.w	19706 <tcp_receive+0x702>
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {
   19558:	68f3      	ldr	r3, [r6, #12]
        while (pcb->ooseq != NULL &&
   1955a:	6a61      	ldr	r1, [r4, #36]	; 0x24
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {
   1955c:	685a      	ldr	r2, [r3, #4]
        while (pcb->ooseq != NULL &&
   1955e:	428a      	cmp	r2, r1
   19560:	f040 80d1 	bne.w	19706 <tcp_receive+0x702>
            cseg->p = NULL;
   19564:	2700      	movs	r7, #0
              pcb->state = CLOSE_WAIT;
   19566:	f04f 0807 	mov.w	r8, #7
   1956a:	e025      	b.n	195b8 <tcp_receive+0x5b4>
   1956c:	20002928 	.word	0x20002928
              pbuf_cat(recv_data, cseg->p);
   19570:	f7fe f984 	bl	1787c <pbuf_cat>
            cseg->p = NULL;
   19574:	6077      	str	r7, [r6, #4]
          if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
   19576:	68f3      	ldr	r3, [r6, #12]
   19578:	8998      	ldrh	r0, [r3, #12]
   1957a:	f7fa f8bd 	bl	136f8 <lwip_htons>
   1957e:	f010 0f01 	tst.w	r0, #1
          tcp_seg_free(cseg);
   19582:	4630      	mov	r0, r6
          if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
   19584:	d00a      	beq.n	1959c <tcp_receive+0x598>
            recv_flags |= TF_GOT_FIN;
   19586:	f895 3034 	ldrb.w	r3, [r5, #52]	; 0x34
            if (pcb->state == ESTABLISHED) { /* force passive close or we can move to active close */
   1958a:	7d22      	ldrb	r2, [r4, #20]
            recv_flags |= TF_GOT_FIN;
   1958c:	f043 0320 	orr.w	r3, r3, #32
            if (pcb->state == ESTABLISHED) { /* force passive close or we can move to active close */
   19590:	2a04      	cmp	r2, #4
            recv_flags |= TF_GOT_FIN;
   19592:	f885 3034 	strb.w	r3, [r5, #52]	; 0x34
              pcb->state = CLOSE_WAIT;
   19596:	bf08      	it	eq
   19598:	f884 8014 	strbeq.w	r8, [r4, #20]
          pcb->ooseq = cseg->next;
   1959c:	6833      	ldr	r3, [r6, #0]
   1959e:	6763      	str	r3, [r4, #116]	; 0x74
          tcp_seg_free(cseg);
   195a0:	f7ff fa48 	bl	18a34 <tcp_seg_free>
        while (pcb->ooseq != NULL &&
   195a4:	6f66      	ldr	r6, [r4, #116]	; 0x74
   195a6:	2e00      	cmp	r6, #0
   195a8:	f000 80ad 	beq.w	19706 <tcp_receive+0x702>
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {
   195ac:	68f3      	ldr	r3, [r6, #12]
        while (pcb->ooseq != NULL &&
   195ae:	6a61      	ldr	r1, [r4, #36]	; 0x24
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {
   195b0:	685a      	ldr	r2, [r3, #4]
        while (pcb->ooseq != NULL &&
   195b2:	428a      	cmp	r2, r1
   195b4:	f040 80a7 	bne.w	19706 <tcp_receive+0x702>
          seqno = pcb->ooseq->tcphdr->seqno;
   195b8:	602a      	str	r2, [r5, #0]
          pcb->rcv_nxt += TCP_TCPLEN(cseg);
   195ba:	8998      	ldrh	r0, [r3, #12]
   195bc:	f8b6 9008 	ldrh.w	r9, [r6, #8]
   195c0:	f7fa f89a 	bl	136f8 <lwip_htons>
   195c4:	6a63      	ldr	r3, [r4, #36]	; 0x24
          pcb->rcv_wnd -= TCP_TCPLEN(cseg);
   195c6:	68f2      	ldr	r2, [r6, #12]
          pcb->rcv_nxt += TCP_TCPLEN(cseg);
   195c8:	f010 0003 	ands.w	r0, r0, #3
   195cc:	444b      	add	r3, r9
   195ce:	bf18      	it	ne
   195d0:	2001      	movne	r0, #1
   195d2:	4418      	add	r0, r3
   195d4:	6260      	str	r0, [r4, #36]	; 0x24
          pcb->rcv_wnd -= TCP_TCPLEN(cseg);
   195d6:	8990      	ldrh	r0, [r2, #12]
   195d8:	f8b6 9008 	ldrh.w	r9, [r6, #8]
   195dc:	f7fa f88c 	bl	136f8 <lwip_htons>
   195e0:	f010 0003 	ands.w	r0, r0, #3
   195e4:	8d23      	ldrh	r3, [r4, #40]	; 0x28
   195e6:	bf18      	it	ne
   195e8:	2001      	movne	r0, #1
   195ea:	4448      	add	r0, r9
   195ec:	1a18      	subs	r0, r3, r0
   195ee:	8520      	strh	r0, [r4, #40]	; 0x28
          tcp_update_rcv_ann_wnd(pcb);
   195f0:	4620      	mov	r0, r4
   195f2:	f7fe fead 	bl	18350 <tcp_update_rcv_ann_wnd>
          if (cseg->p->tot_len > 0) {
   195f6:	6873      	ldr	r3, [r6, #4]
   195f8:	891a      	ldrh	r2, [r3, #8]
   195fa:	2a00      	cmp	r2, #0
   195fc:	d0bb      	beq.n	19576 <tcp_receive+0x572>
            if (recv_data) {
   195fe:	6b2a      	ldr	r2, [r5, #48]	; 0x30
              pbuf_cat(recv_data, cseg->p);
   19600:	4619      	mov	r1, r3
   19602:	4610      	mov	r0, r2
            if (recv_data) {
   19604:	2a00      	cmp	r2, #0
   19606:	d1b3      	bne.n	19570 <tcp_receive+0x56c>
              recv_data = cseg->p;
   19608:	632b      	str	r3, [r5, #48]	; 0x30
   1960a:	e7b3      	b.n	19574 <tcp_receive+0x570>
          if (pcb->rtime >= 0) {
   1960c:	f9b4 0030 	ldrsh.w	r0, [r4, #48]	; 0x30
   19610:	2800      	cmp	r0, #0
   19612:	f6ff ad71 	blt.w	190f8 <tcp_receive+0xf4>
            if (pcb->lastack == ackno) {
   19616:	4299      	cmp	r1, r3
   19618:	f47f ad6e 	bne.w	190f8 <tcp_receive+0xf4>
              if ((u8_t)(pcb->dupacks + 1) > pcb->dupacks) {
   1961c:	f894 0043 	ldrb.w	r0, [r4, #67]	; 0x43
   19620:	1c43      	adds	r3, r0, #1
   19622:	b2db      	uxtb	r3, r3
   19624:	4298      	cmp	r0, r3
                ++pcb->dupacks;
   19626:	bf3c      	itt	cc
   19628:	4618      	movcc	r0, r3
   1962a:	f884 3043 	strbcc.w	r3, [r4, #67]	; 0x43
              if (pcb->dupacks > 3) {
   1962e:	2803      	cmp	r0, #3
   19630:	f240 80d1 	bls.w	197d6 <tcp_receive+0x7d2>
                TCP_WND_INC(pcb->cwnd, pcb->mss);
   19634:	f8b4 2048 	ldrh.w	r2, [r4, #72]	; 0x48
   19638:	8e63      	ldrh	r3, [r4, #50]	; 0x32
   1963a:	4413      	add	r3, r2
   1963c:	b29b      	uxth	r3, r3
   1963e:	f64f 71ff 	movw	r1, #65535	; 0xffff
   19642:	429a      	cmp	r2, r3
   19644:	bf88      	it	hi
   19646:	460b      	movhi	r3, r1
   19648:	f8a4 3048 	strh.w	r3, [r4, #72]	; 0x48
                tcp_rexmit_fast(pcb);
   1964c:	4620      	mov	r0, r4
   1964e:	f000 ffe9 	bl	1a624 <tcp_rexmit_fast>
   19652:	e4fb      	b.n	1904c <tcp_receive+0x48>
   19654:	6f27      	ldr	r7, [r4, #112]	; 0x70
      if (pcb->unacked == NULL) {
   19656:	fab7 f387 	clz	r3, r7
   1965a:	095b      	lsrs	r3, r3, #5
      pcb->unsent = tcp_free_acked_segments(pcb, pcb->unsent, "unsent", pcb->unacked);
   1965c:	2600      	movs	r6, #0
      if (pcb->unacked == NULL) {
   1965e:	425a      	negs	r2, r3
   19660:	8622      	strh	r2, [r4, #48]	; 0x30
      pcb->unsent = tcp_free_acked_segments(pcb, pcb->unsent, "unsent", pcb->unacked);
   19662:	66e6      	str	r6, [r4, #108]	; 0x6c
      pcb->polltmr = 0;
   19664:	7726      	strb	r6, [r4, #28]
        pcb->unsent_oversize = 0;
   19666:	f8a4 6068 	strh.w	r6, [r4, #104]	; 0x68
   1966a:	e5fe      	b.n	1926a <tcp_receive+0x266>
  while (seg_list != NULL &&
   1966c:	2700      	movs	r7, #0
   1966e:	e5c5      	b.n	191fc <tcp_receive+0x1f8>
              if (inseg.len > next->len) {
   19670:	8d2a      	ldrh	r2, [r5, #40]	; 0x28
   19672:	8933      	ldrh	r3, [r6, #8]
   19674:	429a      	cmp	r2, r3
   19676:	f67f ad21 	bls.w	190bc <tcp_receive+0xb8>
                struct tcp_seg *cseg = tcp_seg_copy(&inseg);
   1967a:	4867      	ldr	r0, [pc, #412]	; (19818 <tcp_receive+0x814>)
   1967c:	f7ff f9e8 	bl	18a50 <tcp_seg_copy>
                if (cseg != NULL) {
   19680:	2800      	cmp	r0, #0
   19682:	f43f ad1b 	beq.w	190bc <tcp_receive+0xb8>
                  if (prev != NULL) {
   19686:	2f00      	cmp	r7, #0
   19688:	f000 80b0 	beq.w	197ec <tcp_receive+0x7e8>
                    prev->next = cseg;
   1968c:	6038      	str	r0, [r7, #0]
   1968e:	e638      	b.n	19302 <tcp_receive+0x2fe>
          TCP_WND_INC(pcb->bytes_acked, acked);
   19690:	f8b4 206a 	ldrh.w	r2, [r4, #106]	; 0x6a
   19694:	4417      	add	r7, r2
   19696:	b2bb      	uxth	r3, r7
   19698:	429a      	cmp	r2, r3
   1969a:	d83e      	bhi.n	1971a <tcp_receive+0x716>
          if (pcb->bytes_acked >= pcb->cwnd) {
   1969c:	4299      	cmp	r1, r3
   1969e:	d93e      	bls.n	1971e <tcp_receive+0x71a>
   196a0:	f8a4 306a 	strh.w	r3, [r4, #106]	; 0x6a
   196a4:	e57d      	b.n	191a2 <tcp_receive+0x19e>
          TCP_WND_INC(pcb->cwnd, increase);
   196a6:	f64f 73ff 	movw	r3, #65535	; 0xffff
   196aa:	f8a4 3048 	strh.w	r3, [r4, #72]	; 0x48
   196ae:	e578      	b.n	191a2 <tcp_receive+0x19e>
                  struct tcp_seg *cseg = tcp_seg_copy(&inseg);
   196b0:	4859      	ldr	r0, [pc, #356]	; (19818 <tcp_receive+0x814>)
   196b2:	f7ff f9cd 	bl	18a50 <tcp_seg_copy>
                  if (cseg != NULL) {
   196b6:	4680      	mov	r8, r0
   196b8:	2800      	cmp	r0, #0
   196ba:	f43f acff 	beq.w	190bc <tcp_receive+0xb8>
                    if (TCP_SEQ_GT(prev->tcphdr->seqno + prev->len, seqno)) {
   196be:	68fa      	ldr	r2, [r7, #12]
   196c0:	893b      	ldrh	r3, [r7, #8]
   196c2:	6851      	ldr	r1, [r2, #4]
   196c4:	682a      	ldr	r2, [r5, #0]
   196c6:	440b      	add	r3, r1
   196c8:	1a9b      	subs	r3, r3, r2
   196ca:	2b00      	cmp	r3, #0
   196cc:	dd05      	ble.n	196da <tcp_receive+0x6d6>
                      prev->len = (u16_t)(seqno - prev->tcphdr->seqno);
   196ce:	1a52      	subs	r2, r2, r1
   196d0:	b291      	uxth	r1, r2
   196d2:	8139      	strh	r1, [r7, #8]
                      pbuf_realloc(prev->p, prev->len);
   196d4:	6878      	ldr	r0, [r7, #4]
   196d6:	f7fd ffbf 	bl	17658 <pbuf_realloc>
                    prev->next = cseg;
   196da:	f8c7 8000 	str.w	r8, [r7]
                    tcp_oos_insert_segment(cseg, next);
   196de:	4631      	mov	r1, r6
   196e0:	4640      	mov	r0, r8
   196e2:	f7ff fb7d 	bl	18de0 <tcp_oos_insert_segment>
   196e6:	e4e9      	b.n	190bc <tcp_receive+0xb8>
          if ((pcb->unsent == NULL) ||
   196e8:	b14e      	cbz	r6, 196fe <tcp_receive+0x6fa>
              (TCP_SEQ_LEQ(pcb->rto_end, lwip_ntohl(pcb->unsent->tcphdr->seqno)))) {
   196ea:	68f3      	ldr	r3, [r6, #12]
   196ec:	6ce6      	ldr	r6, [r4, #76]	; 0x4c
   196ee:	6858      	ldr	r0, [r3, #4]
   196f0:	f7fa f806 	bl	13700 <lwip_htonl>
   196f4:	1a30      	subs	r0, r6, r0
          if ((pcb->unsent == NULL) ||
   196f6:	2800      	cmp	r0, #0
   196f8:	f73f aca8 	bgt.w	1904c <tcp_receive+0x48>
   196fc:	8b61      	ldrh	r1, [r4, #26]
            tcp_clear_flags(pcb, TF_RTO);
   196fe:	f421 6100 	bic.w	r1, r1, #2048	; 0x800
   19702:	8361      	strh	r1, [r4, #26]
   19704:	e4a2      	b.n	1904c <tcp_receive+0x48>
        tcp_ack(pcb);
   19706:	8b63      	ldrh	r3, [r4, #26]
   19708:	07d9      	lsls	r1, r3, #31
   1970a:	d513      	bpl.n	19734 <tcp_receive+0x730>
   1970c:	f023 0301 	bic.w	r3, r3, #1
   19710:	f043 0302 	orr.w	r3, r3, #2
   19714:	8363      	strh	r3, [r4, #26]
   19716:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
          TCP_WND_INC(pcb->bytes_acked, acked);
   1971a:	f64f 73ff 	movw	r3, #65535	; 0xffff
            TCP_WND_INC(pcb->cwnd, pcb->mss);
   1971e:	8e62      	ldrh	r2, [r4, #50]	; 0x32
   19720:	440a      	add	r2, r1
   19722:	b292      	uxth	r2, r2
            pcb->bytes_acked = (tcpwnd_size_t)(pcb->bytes_acked - pcb->cwnd);
   19724:	1a5b      	subs	r3, r3, r1
            TCP_WND_INC(pcb->cwnd, pcb->mss);
   19726:	4291      	cmp	r1, r2
            pcb->bytes_acked = (tcpwnd_size_t)(pcb->bytes_acked - pcb->cwnd);
   19728:	f8a4 306a 	strh.w	r3, [r4, #106]	; 0x6a
            TCP_WND_INC(pcb->cwnd, pcb->mss);
   1972c:	d8bb      	bhi.n	196a6 <tcp_receive+0x6a2>
   1972e:	f8a4 2048 	strh.w	r2, [r4, #72]	; 0x48
   19732:	e536      	b.n	191a2 <tcp_receive+0x19e>
        tcp_ack(pcb);
   19734:	f043 0301 	orr.w	r3, r3, #1
   19738:	8363      	strh	r3, [r4, #26]
   1973a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
          pcb->ooseq = tcp_seg_copy(&inseg);
   1973e:	4836      	ldr	r0, [pc, #216]	; (19818 <tcp_receive+0x814>)
   19740:	f7ff f986 	bl	18a50 <tcp_seg_copy>
   19744:	6760      	str	r0, [r4, #116]	; 0x74
   19746:	e4b9      	b.n	190bc <tcp_receive+0xb8>
            while (next &&
   19748:	463e      	mov	r6, r7
            if (next &&
   1974a:	f1bc 0f00 	cmp.w	ip, #0
   1974e:	dd1e      	ble.n	1978e <tcp_receive+0x78a>
              inseg.len = (u16_t)(next->tcphdr->seqno - seqno);
   19750:	ebae 0e08 	sub.w	lr, lr, r8
              if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
   19754:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
              inseg.len = (u16_t)(next->tcphdr->seqno - seqno);
   19756:	f8a5 e028 	strh.w	lr, [r5, #40]	; 0x28
              if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
   1975a:	8998      	ldrh	r0, [r3, #12]
   1975c:	f7f9 ffcc 	bl	136f8 <lwip_htons>
   19760:	0787      	lsls	r7, r0, #30
                inseg.len -= 1;
   19762:	8d29      	ldrh	r1, [r5, #40]	; 0x28
              if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
   19764:	d502      	bpl.n	1976c <tcp_receive+0x768>
                inseg.len -= 1;
   19766:	3901      	subs	r1, #1
   19768:	b289      	uxth	r1, r1
   1976a:	8529      	strh	r1, [r5, #40]	; 0x28
              pbuf_realloc(inseg.p, inseg.len);
   1976c:	6a68      	ldr	r0, [r5, #36]	; 0x24
   1976e:	f7fd ff73 	bl	17658 <pbuf_realloc>
              tcplen = TCP_TCPLEN(&inseg);
   19772:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
   19774:	8d2f      	ldrh	r7, [r5, #40]	; 0x28
   19776:	8998      	ldrh	r0, [r3, #12]
   19778:	f7f9 ffbe 	bl	136f8 <lwip_htons>
   1977c:	f010 0303 	ands.w	r3, r0, #3
   19780:	bf18      	it	ne
   19782:	2301      	movne	r3, #1
   19784:	443b      	add	r3, r7
   19786:	6829      	ldr	r1, [r5, #0]
   19788:	b29b      	uxth	r3, r3
   1978a:	83ab      	strh	r3, [r5, #28]
   1978c:	4419      	add	r1, r3
            pcb->ooseq = next;
   1978e:	6766      	str	r6, [r4, #116]	; 0x74
   19790:	e6c5      	b.n	1951e <tcp_receive+0x51a>
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
   19792:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
   19794:	8998      	ldrh	r0, [r3, #12]
   19796:	f7f9 ffaf 	bl	136f8 <lwip_htons>
   1979a:	07c6      	lsls	r6, r0, #31
   1979c:	d428      	bmi.n	197f0 <tcp_receive+0x7ec>
          inseg.len = (u16_t)pcb->rcv_wnd;
   1979e:	8d22      	ldrh	r2, [r4, #40]	; 0x28
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
   197a0:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
          inseg.len = (u16_t)pcb->rcv_wnd;
   197a2:	852a      	strh	r2, [r5, #40]	; 0x28
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
   197a4:	8998      	ldrh	r0, [r3, #12]
   197a6:	f7f9 ffa7 	bl	136f8 <lwip_htons>
   197aa:	0780      	lsls	r0, r0, #30
            inseg.len -= 1;
   197ac:	8d29      	ldrh	r1, [r5, #40]	; 0x28
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
   197ae:	d502      	bpl.n	197b6 <tcp_receive+0x7b2>
            inseg.len -= 1;
   197b0:	3901      	subs	r1, #1
   197b2:	b289      	uxth	r1, r1
   197b4:	8529      	strh	r1, [r5, #40]	; 0x28
          pbuf_realloc(inseg.p, inseg.len);
   197b6:	6a68      	ldr	r0, [r5, #36]	; 0x24
   197b8:	f7fd ff4e 	bl	17658 <pbuf_realloc>
          tcplen = TCP_TCPLEN(&inseg);
   197bc:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
   197be:	8d2e      	ldrh	r6, [r5, #40]	; 0x28
   197c0:	8998      	ldrh	r0, [r3, #12]
   197c2:	f7f9 ff99 	bl	136f8 <lwip_htons>
   197c6:	f010 0303 	ands.w	r3, r0, #3
   197ca:	bf18      	it	ne
   197cc:	2301      	movne	r3, #1
   197ce:	4433      	add	r3, r6
   197d0:	b29b      	uxth	r3, r3
   197d2:	83ab      	strh	r3, [r5, #28]
   197d4:	e622      	b.n	1941c <tcp_receive+0x418>
              if (pcb->dupacks >= 3) {
   197d6:	f43f af39 	beq.w	1964c <tcp_receive+0x648>
    if (pcb->rttest && TCP_SEQ_LT(pcb->rtseq, ackno)) {
   197da:	6b63      	ldr	r3, [r4, #52]	; 0x34
   197dc:	2b00      	cmp	r3, #0
   197de:	f43f ac42 	beq.w	19066 <tcp_receive+0x62>
   197e2:	e436      	b.n	19052 <tcp_receive+0x4e>
   197e4:	8bab      	ldrh	r3, [r5, #28]
   197e6:	6829      	ldr	r1, [r5, #0]
   197e8:	4419      	add	r1, r3
   197ea:	e7d0      	b.n	1978e <tcp_receive+0x78a>
                    pcb->ooseq = cseg;
   197ec:	6760      	str	r0, [r4, #116]	; 0x74
   197ee:	e588      	b.n	19302 <tcp_receive+0x2fe>
            TCPH_FLAGS_SET(inseg.tcphdr, TCPH_FLAGS(inseg.tcphdr) & ~(unsigned int)TCP_FIN);
   197f0:	6aef      	ldr	r7, [r5, #44]	; 0x2c
   197f2:	89be      	ldrh	r6, [r7, #12]
   197f4:	4630      	mov	r0, r6
   197f6:	f7f9 ff7f 	bl	136f8 <lwip_htons>
   197fa:	f000 003e 	and.w	r0, r0, #62	; 0x3e
   197fe:	f7f9 ff7b 	bl	136f8 <lwip_htons>
   19802:	f426 567c 	bic.w	r6, r6, #16128	; 0x3f00
   19806:	4306      	orrs	r6, r0
   19808:	81be      	strh	r6, [r7, #12]
   1980a:	e7c8      	b.n	1979e <tcp_receive+0x79a>
   1980c:	8bab      	ldrh	r3, [r5, #28]
   1980e:	6829      	ldr	r1, [r5, #0]
            while (next &&
   19810:	463e      	mov	r6, r7
   19812:	4419      	add	r1, r3
   19814:	e7bb      	b.n	1978e <tcp_receive+0x78a>
   19816:	bf00      	nop
   19818:	20002928 	.word	0x20002928

0001981c <tcp_input>:
{
   1981c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  if (p->len < TCP_HLEN) {
   19820:	8943      	ldrh	r3, [r0, #10]
  tcphdr = (struct tcp_hdr *)p->payload;
   19822:	4daf      	ldr	r5, [pc, #700]	; (19ae0 <tcp_input+0x2c4>)
   19824:	6842      	ldr	r2, [r0, #4]
   19826:	612a      	str	r2, [r5, #16]
  if (p->len < TCP_HLEN) {
   19828:	2b13      	cmp	r3, #19
{
   1982a:	b089      	sub	sp, #36	; 0x24
   1982c:	4604      	mov	r4, r0
  if (p->len < TCP_HLEN) {
   1982e:	d905      	bls.n	1983c <tcp_input+0x20>
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
   19830:	4eac      	ldr	r6, [pc, #688]	; (19ae4 <tcp_input+0x2c8>)
   19832:	6831      	ldr	r1, [r6, #0]
   19834:	6970      	ldr	r0, [r6, #20]
   19836:	f7fd fa61 	bl	16cfc <ip4_addr_isbroadcast_u32>
   1983a:	b128      	cbz	r0, 19848 <tcp_input+0x2c>
  pbuf_free(p);
   1983c:	4620      	mov	r0, r4
}
   1983e:	b009      	add	sp, #36	; 0x24
   19840:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  pbuf_free(p);
   19844:	f7fd bfd2 	b.w	177ec <pbuf_free>
      ip_addr_ismulticast(ip_current_dest_addr())) {
   19848:	6973      	ldr	r3, [r6, #20]
   1984a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
   1984e:	2be0      	cmp	r3, #224	; 0xe0
   19850:	d0f4      	beq.n	1983c <tcp_input+0x20>
    u16_t chksum = ip_chksum_pseudo(p, IP_PROTO_TCP, p->tot_len,
   19852:	f106 0114 	add.w	r1, r6, #20
   19856:	f106 0710 	add.w	r7, r6, #16
   1985a:	8922      	ldrh	r2, [r4, #8]
   1985c:	9100      	str	r1, [sp, #0]
   1985e:	463b      	mov	r3, r7
   19860:	2106      	movs	r1, #6
   19862:	4620      	mov	r0, r4
   19864:	f002 f906 	bl	1ba74 <ip_chksum_pseudo>
    if (chksum != 0) {
   19868:	4680      	mov	r8, r0
   1986a:	2800      	cmp	r0, #0
   1986c:	d1e6      	bne.n	1983c <tcp_input+0x20>
  hdrlen_bytes = TCPH_HDRLEN_BYTES(tcphdr);
   1986e:	692b      	ldr	r3, [r5, #16]
   19870:	8998      	ldrh	r0, [r3, #12]
   19872:	f7f9 ff41 	bl	136f8 <lwip_htons>
   19876:	0a81      	lsrs	r1, r0, #10
   19878:	f001 01fc 	and.w	r1, r1, #252	; 0xfc
  if ((hdrlen_bytes < TCP_HLEN) || (hdrlen_bytes > p->tot_len)) {
   1987c:	2913      	cmp	r1, #19
   1987e:	d9dd      	bls.n	1983c <tcp_input+0x20>
   19880:	8922      	ldrh	r2, [r4, #8]
   19882:	b28b      	uxth	r3, r1
   19884:	429a      	cmp	r2, r3
   19886:	d3d9      	bcc.n	1983c <tcp_input+0x20>
  if (p->len >= hdrlen_bytes) {
   19888:	8960      	ldrh	r0, [r4, #10]
  tcphdr_opt2 = NULL;
   1988a:	f8c5 8008 	str.w	r8, [r5, #8]
  tcphdr_optlen = (u16_t)(hdrlen_bytes - TCP_HLEN);
   1988e:	f1a3 0214 	sub.w	r2, r3, #20
   19892:	b292      	uxth	r2, r2
  if (p->len >= hdrlen_bytes) {
   19894:	4298      	cmp	r0, r3
  tcphdr_optlen = (u16_t)(hdrlen_bytes - TCP_HLEN);
   19896:	80aa      	strh	r2, [r5, #4]
  if (p->len >= hdrlen_bytes) {
   19898:	f0c0 80b3 	bcc.w	19a02 <tcp_input+0x1e6>
    pbuf_remove_header(p, hdrlen_bytes); /* cannot fail */
   1989c:	4620      	mov	r0, r4
    tcphdr_opt1len = tcphdr_optlen;
   1989e:	81aa      	strh	r2, [r5, #12]
    pbuf_remove_header(p, hdrlen_bytes); /* cannot fail */
   198a0:	f7fd ff56 	bl	17750 <pbuf_remove_header>
  tcphdr->src = lwip_ntohs(tcphdr->src);
   198a4:	f8d5 8010 	ldr.w	r8, [r5, #16]
   198a8:	f8b8 0000 	ldrh.w	r0, [r8]
   198ac:	f7f9 ff24 	bl	136f8 <lwip_htons>
  tcphdr->dest = lwip_ntohs(tcphdr->dest);
   198b0:	f8d5 9010 	ldr.w	r9, [r5, #16]
  tcphdr->src = lwip_ntohs(tcphdr->src);
   198b4:	f8a8 0000 	strh.w	r0, [r8]
  tcphdr->dest = lwip_ntohs(tcphdr->dest);
   198b8:	f8b9 0002 	ldrh.w	r0, [r9, #2]
   198bc:	f7f9 ff1c 	bl	136f8 <lwip_htons>
  seqno = tcphdr->seqno = lwip_ntohl(tcphdr->seqno);
   198c0:	f8d5 8010 	ldr.w	r8, [r5, #16]
  tcphdr->dest = lwip_ntohs(tcphdr->dest);
   198c4:	f8a9 0002 	strh.w	r0, [r9, #2]
  seqno = tcphdr->seqno = lwip_ntohl(tcphdr->seqno);
   198c8:	f8d8 0004 	ldr.w	r0, [r8, #4]
   198cc:	f7f9 ff18 	bl	13700 <lwip_htonl>
  ackno = tcphdr->ackno = lwip_ntohl(tcphdr->ackno);
   198d0:	f8d5 9010 	ldr.w	r9, [r5, #16]
  seqno = tcphdr->seqno = lwip_ntohl(tcphdr->seqno);
   198d4:	f8c8 0004 	str.w	r0, [r8, #4]
   198d8:	6028      	str	r0, [r5, #0]
  ackno = tcphdr->ackno = lwip_ntohl(tcphdr->ackno);
   198da:	f8d9 0008 	ldr.w	r0, [r9, #8]
   198de:	f7f9 ff0f 	bl	13700 <lwip_htonl>
  tcphdr->wnd = lwip_ntohs(tcphdr->wnd);
   198e2:	f8d5 8010 	ldr.w	r8, [r5, #16]
  ackno = tcphdr->ackno = lwip_ntohl(tcphdr->ackno);
   198e6:	f8c9 0008 	str.w	r0, [r9, #8]
   198ea:	61a8      	str	r0, [r5, #24]
  tcphdr->wnd = lwip_ntohs(tcphdr->wnd);
   198ec:	f8b8 000e 	ldrh.w	r0, [r8, #14]
   198f0:	f7f9 ff02 	bl	136f8 <lwip_htons>
  flags = TCPH_FLAGS(tcphdr);
   198f4:	692b      	ldr	r3, [r5, #16]
  tcphdr->wnd = lwip_ntohs(tcphdr->wnd);
   198f6:	f8a8 000e 	strh.w	r0, [r8, #14]
  flags = TCPH_FLAGS(tcphdr);
   198fa:	8998      	ldrh	r0, [r3, #12]
   198fc:	f7f9 fefc 	bl	136f8 <lwip_htons>
   19900:	b2c2      	uxtb	r2, r0
   19902:	f002 033f 	and.w	r3, r2, #63	; 0x3f
  if (flags & (TCP_FIN | TCP_SYN)) {
   19906:	0791      	lsls	r1, r2, #30
  flags = TCPH_FLAGS(tcphdr);
   19908:	752b      	strb	r3, [r5, #20]
  tcplen = p->tot_len;
   1990a:	f8b4 c008 	ldrh.w	ip, [r4, #8]
  if (flags & (TCP_FIN | TCP_SYN)) {
   1990e:	f040 80de 	bne.w	19ace <tcp_input+0x2b2>
  tcplen = p->tot_len;
   19912:	f8a5 c01c 	strh.w	ip, [r5, #28]
   19916:	f8cd c010 	str.w	ip, [sp, #16]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
   1991a:	f8df b1d4 	ldr.w	fp, [pc, #468]	; 19af0 <tcp_input+0x2d4>
   1991e:	692b      	ldr	r3, [r5, #16]
   19920:	f8db 9000 	ldr.w	r9, [fp]
   19924:	f1b9 0f00 	cmp.w	r9, #0
   19928:	f000 808b 	beq.w	19a42 <tcp_input+0x226>
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
   1992c:	6931      	ldr	r1, [r6, #16]
   1992e:	9106      	str	r1, [sp, #24]
        ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
   19930:	6971      	ldr	r1, [r6, #20]
   19932:	9107      	str	r1, [sp, #28]
        (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
   19934:	f8d6 e004 	ldr.w	lr, [r6, #4]
   19938:	9205      	str	r2, [sp, #20]
        ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
   1993a:	46c8      	mov	r8, r9
   1993c:	2100      	movs	r1, #0
   1993e:	e00b      	b.n	19958 <tcp_input+0x13c>
        (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
   19940:	f89e 0038 	ldrb.w	r0, [lr, #56]	; 0x38
   19944:	3001      	adds	r0, #1
    if ((pcb->netif_idx != NETIF_NO_INDEX) &&
   19946:	b2c0      	uxtb	r0, r0
   19948:	4282      	cmp	r2, r0
   1994a:	d009      	beq.n	19960 <tcp_input+0x144>
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
   1994c:	f8d8 000c 	ldr.w	r0, [r8, #12]
   19950:	4641      	mov	r1, r8
   19952:	2800      	cmp	r0, #0
   19954:	d074      	beq.n	19a40 <tcp_input+0x224>
   19956:	4680      	mov	r8, r0
    if ((pcb->netif_idx != NETIF_NO_INDEX) &&
   19958:	f898 2008 	ldrb.w	r2, [r8, #8]
   1995c:	2a00      	cmp	r2, #0
   1995e:	d1ef      	bne.n	19940 <tcp_input+0x124>
    if (pcb->remote_port == tcphdr->src &&
   19960:	f8b8 a018 	ldrh.w	sl, [r8, #24]
   19964:	8818      	ldrh	r0, [r3, #0]
   19966:	4582      	cmp	sl, r0
   19968:	d1f0      	bne.n	1994c <tcp_input+0x130>
   1996a:	f8b8 a016 	ldrh.w	sl, [r8, #22]
   1996e:	8858      	ldrh	r0, [r3, #2]
   19970:	4582      	cmp	sl, r0
   19972:	d1eb      	bne.n	1994c <tcp_input+0x130>
        pcb->local_port == tcphdr->dest &&
   19974:	f8d8 0004 	ldr.w	r0, [r8, #4]
   19978:	9a06      	ldr	r2, [sp, #24]
   1997a:	4290      	cmp	r0, r2
   1997c:	d1e6      	bne.n	1994c <tcp_input+0x130>
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
   1997e:	f8d8 0000 	ldr.w	r0, [r8]
   19982:	9a07      	ldr	r2, [sp, #28]
   19984:	4290      	cmp	r0, r2
   19986:	d1e1      	bne.n	1994c <tcp_input+0x130>
   19988:	9a05      	ldr	r2, [sp, #20]
      if (prev != NULL) {
   1998a:	b131      	cbz	r1, 1999a <tcp_input+0x17e>
        prev->next = pcb->next;
   1998c:	f8d8 000c 	ldr.w	r0, [r8, #12]
   19990:	60c8      	str	r0, [r1, #12]
        tcp_active_pcbs = pcb;
   19992:	f8cb 8000 	str.w	r8, [fp]
        pcb->next = tcp_active_pcbs;
   19996:	f8c8 900c 	str.w	r9, [r8, #12]
    inseg.next = NULL;
   1999a:	2100      	movs	r1, #0
    inseg.tcphdr = tcphdr;
   1999c:	62eb      	str	r3, [r5, #44]	; 0x2c
    if (flags & TCP_PSH) {
   1999e:	0713      	lsls	r3, r2, #28
    inseg.len = p->tot_len;
   199a0:	f8a5 c028 	strh.w	ip, [r5, #40]	; 0x28
    inseg.p = p;
   199a4:	626c      	str	r4, [r5, #36]	; 0x24
    inseg.next = NULL;
   199a6:	6229      	str	r1, [r5, #32]
    recv_data = NULL;
   199a8:	6329      	str	r1, [r5, #48]	; 0x30
    recv_flags = 0;
   199aa:	f885 1034 	strb.w	r1, [r5, #52]	; 0x34
    recv_acked = 0;
   199ae:	83e9      	strh	r1, [r5, #30]
    if (flags & TCP_PSH) {
   199b0:	d503      	bpl.n	199ba <tcp_input+0x19e>
      p->flags |= PBUF_FLAG_PUSH;
   199b2:	7b63      	ldrb	r3, [r4, #13]
   199b4:	f043 0301 	orr.w	r3, r3, #1
   199b8:	7363      	strb	r3, [r4, #13]
    if (pcb->refused_data != NULL) {
   199ba:	f8d8 3078 	ldr.w	r3, [r8, #120]	; 0x78
   199be:	2b00      	cmp	r3, #0
   199c0:	f000 8098 	beq.w	19af4 <tcp_input+0x2d8>
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
   199c4:	4640      	mov	r0, r8
   199c6:	f7fe ffbd 	bl	18944 <tcp_process_refused_data>
   199ca:	300d      	adds	r0, #13
   199cc:	d008      	beq.n	199e0 <tcp_input+0x1c4>
   199ce:	f8d8 3078 	ldr.w	r3, [r8, #120]	; 0x78
   199d2:	2b00      	cmp	r3, #0
   199d4:	f000 808e 	beq.w	19af4 <tcp_input+0x2d8>
          ((pcb->refused_data != NULL) && (tcplen > 0))) {
   199d8:	8bab      	ldrh	r3, [r5, #28]
   199da:	2b00      	cmp	r3, #0
   199dc:	f000 808a 	beq.w	19af4 <tcp_input+0x2d8>
        if (pcb->rcv_ann_wnd == 0) {
   199e0:	f8b8 302a 	ldrh.w	r3, [r8, #42]	; 0x2a
   199e4:	2b00      	cmp	r3, #0
   199e6:	f000 8295 	beq.w	19f14 <tcp_input+0x6f8>
   199ea:	4e3f      	ldr	r6, [pc, #252]	; (19ae8 <tcp_input+0x2cc>)
    if (inseg.p != NULL) {
   199ec:	6a68      	ldr	r0, [r5, #36]	; 0x24
    tcp_input_pcb = NULL;
   199ee:	2400      	movs	r4, #0
   199f0:	6034      	str	r4, [r6, #0]
    recv_data = NULL;
   199f2:	632c      	str	r4, [r5, #48]	; 0x30
    if (inseg.p != NULL) {
   199f4:	b110      	cbz	r0, 199fc <tcp_input+0x1e0>
      pbuf_free(inseg.p);
   199f6:	f7fd fef9 	bl	177ec <pbuf_free>
      inseg.p = NULL;
   199fa:	626c      	str	r4, [r5, #36]	; 0x24
}
   199fc:	b009      	add	sp, #36	; 0x24
   199fe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    pbuf_remove_header(p, TCP_HLEN);
   19a02:	2114      	movs	r1, #20
   19a04:	4620      	mov	r0, r4
   19a06:	f7fd fea3 	bl	17750 <pbuf_remove_header>
    tcphdr_opt1len = p->len;
   19a0a:	8961      	ldrh	r1, [r4, #10]
    opt2len = (u16_t)(tcphdr_optlen - tcphdr_opt1len);
   19a0c:	f8b5 8004 	ldrh.w	r8, [r5, #4]
    tcphdr_opt1len = p->len;
   19a10:	81a9      	strh	r1, [r5, #12]
    pbuf_remove_header(p, tcphdr_opt1len);
   19a12:	4620      	mov	r0, r4
    opt2len = (u16_t)(tcphdr_optlen - tcphdr_opt1len);
   19a14:	eba8 0801 	sub.w	r8, r8, r1
    pbuf_remove_header(p, tcphdr_opt1len);
   19a18:	f7fd fe9a 	bl	17750 <pbuf_remove_header>
    if (opt2len > p->next->len) {
   19a1c:	6820      	ldr	r0, [r4, #0]
   19a1e:	8943      	ldrh	r3, [r0, #10]
    opt2len = (u16_t)(tcphdr_optlen - tcphdr_opt1len);
   19a20:	fa1f f888 	uxth.w	r8, r8
    if (opt2len > p->next->len) {
   19a24:	4543      	cmp	r3, r8
   19a26:	f4ff af09 	bcc.w	1983c <tcp_input+0x20>
    tcphdr_opt2 = (u8_t *)p->next->payload;
   19a2a:	6843      	ldr	r3, [r0, #4]
   19a2c:	60ab      	str	r3, [r5, #8]
    pbuf_remove_header(p->next, opt2len);
   19a2e:	4641      	mov	r1, r8
   19a30:	f7fd fe8e 	bl	17750 <pbuf_remove_header>
    p->tot_len = (u16_t)(p->tot_len - opt2len);
   19a34:	8923      	ldrh	r3, [r4, #8]
   19a36:	eba3 0808 	sub.w	r8, r3, r8
   19a3a:	f8a4 8008 	strh.w	r8, [r4, #8]
   19a3e:	e731      	b.n	198a4 <tcp_input+0x88>
   19a40:	9a05      	ldr	r2, [sp, #20]
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
   19a42:	492a      	ldr	r1, [pc, #168]	; (19aec <tcp_input+0x2d0>)
   19a44:	6808      	ldr	r0, [r1, #0]
   19a46:	2800      	cmp	r0, #0
   19a48:	f000 80d6 	beq.w	19bf8 <tcp_input+0x3dc>
          (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
   19a4c:	f8d6 c004 	ldr.w	ip, [r6, #4]
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
   19a50:	f8d6 a010 	ldr.w	sl, [r6, #16]
          ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
   19a54:	f8d6 9014 	ldr.w	r9, [r6, #20]
   19a58:	4611      	mov	r1, r2
   19a5a:	e009      	b.n	19a70 <tcp_input+0x254>
          (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
   19a5c:	f89c 2038 	ldrb.w	r2, [ip, #56]	; 0x38
   19a60:	3201      	adds	r2, #1
      if ((pcb->netif_idx != NETIF_NO_INDEX) &&
   19a62:	b2d2      	uxtb	r2, r2
   19a64:	4596      	cmp	lr, r2
   19a66:	d008      	beq.n	19a7a <tcp_input+0x25e>
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
   19a68:	68c0      	ldr	r0, [r0, #12]
   19a6a:	2800      	cmp	r0, #0
   19a6c:	f000 80c3 	beq.w	19bf6 <tcp_input+0x3da>
      if ((pcb->netif_idx != NETIF_NO_INDEX) &&
   19a70:	f890 e008 	ldrb.w	lr, [r0, #8]
   19a74:	f1be 0f00 	cmp.w	lr, #0
   19a78:	d1f0      	bne.n	19a5c <tcp_input+0x240>
      if (pcb->remote_port == tcphdr->src &&
   19a7a:	8b02      	ldrh	r2, [r0, #24]
   19a7c:	f8b3 e000 	ldrh.w	lr, [r3]
   19a80:	4596      	cmp	lr, r2
   19a82:	d1f1      	bne.n	19a68 <tcp_input+0x24c>
          pcb->local_port == tcphdr->dest &&
   19a84:	8ac2      	ldrh	r2, [r0, #22]
      if (pcb->remote_port == tcphdr->src &&
   19a86:	f8b3 8002 	ldrh.w	r8, [r3, #2]
   19a8a:	4590      	cmp	r8, r2
   19a8c:	d1ec      	bne.n	19a68 <tcp_input+0x24c>
          pcb->local_port == tcphdr->dest &&
   19a8e:	6842      	ldr	r2, [r0, #4]
   19a90:	4552      	cmp	r2, sl
   19a92:	d1e9      	bne.n	19a68 <tcp_input+0x24c>
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
   19a94:	6802      	ldr	r2, [r0, #0]
   19a96:	454a      	cmp	r2, r9
   19a98:	d1e6      	bne.n	19a68 <tcp_input+0x24c>
  if (flags & TCP_RST) {
   19a9a:	074b      	lsls	r3, r1, #29
   19a9c:	f53f aece 	bmi.w	1983c <tcp_input+0x20>
  if (flags & TCP_SYN) {
   19aa0:	078e      	lsls	r6, r1, #30
   19aa2:	f140 8303 	bpl.w	1a0ac <tcp_input+0x890>
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd)) {
   19aa6:	682a      	ldr	r2, [r5, #0]
   19aa8:	6a43      	ldr	r3, [r0, #36]	; 0x24
   19aaa:	1ad3      	subs	r3, r2, r3
   19aac:	d404      	bmi.n	19ab8 <tcp_input+0x29c>
   19aae:	8d01      	ldrh	r1, [r0, #40]	; 0x28
   19ab0:	1a5b      	subs	r3, r3, r1
   19ab2:	2b00      	cmp	r3, #0
   19ab4:	f340 8301 	ble.w	1a0ba <tcp_input+0x89e>
  if ((tcplen > 0)) {
   19ab8:	9b04      	ldr	r3, [sp, #16]
   19aba:	2b00      	cmp	r3, #0
   19abc:	f43f aebe 	beq.w	1983c <tcp_input+0x20>
    tcp_ack_now(pcb);
   19ac0:	8b43      	ldrh	r3, [r0, #26]
   19ac2:	f043 0302 	orr.w	r3, r3, #2
   19ac6:	8343      	strh	r3, [r0, #26]
    tcp_output(pcb);
   19ac8:	f000 fef4 	bl	1a8b4 <tcp_output>
   19acc:	e6b6      	b.n	1983c <tcp_input+0x20>
    tcplen++;
   19ace:	f10c 0301 	add.w	r3, ip, #1
   19ad2:	b29b      	uxth	r3, r3
    if (tcplen < p->tot_len) {
   19ad4:	459c      	cmp	ip, r3
    tcplen++;
   19ad6:	9304      	str	r3, [sp, #16]
   19ad8:	83ab      	strh	r3, [r5, #28]
    if (tcplen < p->tot_len) {
   19ada:	f63f aeaf 	bhi.w	1983c <tcp_input+0x20>
   19ade:	e71c      	b.n	1991a <tcp_input+0xfe>
   19ae0:	20002908 	.word	0x20002908
   19ae4:	2000a404 	.word	0x2000a404
   19ae8:	2000a3fc 	.word	0x2000a3fc
   19aec:	2000a3f8 	.word	0x2000a3f8
   19af0:	2000a3e8 	.word	0x2000a3e8
  if (flags & TCP_RST) {
   19af4:	7d2c      	ldrb	r4, [r5, #20]
    tcp_input_pcb = pcb;
   19af6:	4ebc      	ldr	r6, [pc, #752]	; (19de8 <tcp_input+0x5cc>)
  if (flags & TCP_RST) {
   19af8:	0760      	lsls	r0, r4, #29
    tcp_input_pcb = pcb;
   19afa:	f8c6 8000 	str.w	r8, [r6]
  if (flags & TCP_RST) {
   19afe:	d525      	bpl.n	19b4c <tcp_input+0x330>
    if (pcb->state == SYN_SENT) {
   19b00:	f898 3014 	ldrb.w	r3, [r8, #20]
   19b04:	2b02      	cmp	r3, #2
   19b06:	f000 8209 	beq.w	19f1c <tcp_input+0x700>
      if (seqno == pcb->rcv_nxt) {
   19b0a:	f8d8 2024 	ldr.w	r2, [r8, #36]	; 0x24
   19b0e:	682b      	ldr	r3, [r5, #0]
   19b10:	429a      	cmp	r2, r3
   19b12:	f000 8209 	beq.w	19f28 <tcp_input+0x70c>
      } else  if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
   19b16:	1a9b      	subs	r3, r3, r2
   19b18:	d404      	bmi.n	19b24 <tcp_input+0x308>
   19b1a:	f8b8 2028 	ldrh.w	r2, [r8, #40]	; 0x28
   19b1e:	1a9b      	subs	r3, r3, r2
   19b20:	2b00      	cmp	r3, #0
   19b22:	dd1d      	ble.n	19b60 <tcp_input+0x344>
      if (recv_flags & TF_RESET) {
   19b24:	f895 3034 	ldrb.w	r3, [r5, #52]	; 0x34
   19b28:	071c      	lsls	r4, r3, #28
   19b2a:	d520      	bpl.n	19b6e <tcp_input+0x352>
        TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_RST);
   19b2c:	f8d8 3090 	ldr.w	r3, [r8, #144]	; 0x90
   19b30:	b123      	cbz	r3, 19b3c <tcp_input+0x320>
   19b32:	f06f 010d 	mvn.w	r1, #13
   19b36:	f8d8 0010 	ldr.w	r0, [r8, #16]
   19b3a:	4798      	blx	r3
        tcp_pcb_remove(&tcp_active_pcbs, pcb);
   19b3c:	4641      	mov	r1, r8
   19b3e:	48ab      	ldr	r0, [pc, #684]	; (19dec <tcp_input+0x5d0>)
   19b40:	f7ff f898 	bl	18c74 <tcp_pcb_remove>
        tcp_free(pcb);
   19b44:	4640      	mov	r0, r8
   19b46:	f7fe fb1d 	bl	18184 <tcp_free>
   19b4a:	e74f      	b.n	199ec <tcp_input+0x1d0>
  if ((flags & TCP_SYN) && (pcb->state != SYN_SENT && pcb->state != SYN_RCVD)) {
   19b4c:	f014 0902 	ands.w	r9, r4, #2
   19b50:	f000 80f1 	beq.w	19d36 <tcp_input+0x51a>
   19b54:	f898 3014 	ldrb.w	r3, [r8, #20]
   19b58:	3b02      	subs	r3, #2
   19b5a:	2b01      	cmp	r3, #1
   19b5c:	f240 80eb 	bls.w	19d36 <tcp_input+0x51a>
        tcp_ack_now(pcb);
   19b60:	f8b8 301a 	ldrh.w	r3, [r8, #26]
   19b64:	f043 0302 	orr.w	r3, r3, #2
   19b68:	f8a8 301a 	strh.w	r3, [r8, #26]
   19b6c:	e7da      	b.n	19b24 <tcp_input+0x308>
        if (recv_acked > 0) {
   19b6e:	8bea      	ldrh	r2, [r5, #30]
   19b70:	b15a      	cbz	r2, 19b8a <tcp_input+0x36e>
            TCP_EVENT_SENT(pcb, (u16_t)acked16, err);
   19b72:	f8d8 3080 	ldr.w	r3, [r8, #128]	; 0x80
   19b76:	b133      	cbz	r3, 19b86 <tcp_input+0x36a>
   19b78:	4641      	mov	r1, r8
   19b7a:	f8d8 0010 	ldr.w	r0, [r8, #16]
   19b7e:	4798      	blx	r3
            if (err == ERR_ABRT) {
   19b80:	300d      	adds	r0, #13
   19b82:	f43f af33 	beq.w	199ec <tcp_input+0x1d0>
          recv_acked = 0;
   19b86:	2300      	movs	r3, #0
   19b88:	83eb      	strh	r3, [r5, #30]
  if (recv_flags & TF_CLOSED) {
   19b8a:	f895 3034 	ldrb.w	r3, [r5, #52]	; 0x34
   19b8e:	06d8      	lsls	r0, r3, #27
   19b90:	f100 81ec 	bmi.w	19f6c <tcp_input+0x750>
        if (recv_data != NULL) {
   19b94:	6b2a      	ldr	r2, [r5, #48]	; 0x30
   19b96:	b1b2      	cbz	r2, 19bc6 <tcp_input+0x3aa>
          if (pcb->flags & TF_RXCLOSED) {
   19b98:	f8b8 301a 	ldrh.w	r3, [r8, #26]
   19b9c:	f013 0310 	ands.w	r3, r3, #16
   19ba0:	f040 81eb 	bne.w	19f7a <tcp_input+0x75e>
          TCP_EVENT_RECV(pcb, recv_data, ERR_OK, err);
   19ba4:	f8d8 4084 	ldr.w	r4, [r8, #132]	; 0x84
   19ba8:	2c00      	cmp	r4, #0
   19baa:	f000 82ae 	beq.w	1a10a <tcp_input+0x8ee>
   19bae:	4641      	mov	r1, r8
   19bb0:	f8d8 0010 	ldr.w	r0, [r8, #16]
   19bb4:	47a0      	blx	r4
          if (err == ERR_ABRT) {
   19bb6:	f110 0f0d 	cmn.w	r0, #13
   19bba:	f43f af17 	beq.w	199ec <tcp_input+0x1d0>
          if (err != ERR_OK) {
   19bbe:	b110      	cbz	r0, 19bc6 <tcp_input+0x3aa>
            pcb->refused_data = recv_data;
   19bc0:	6b2b      	ldr	r3, [r5, #48]	; 0x30
   19bc2:	f8c8 3078 	str.w	r3, [r8, #120]	; 0x78
        if (recv_flags & TF_GOT_FIN) {
   19bc6:	f895 3034 	ldrb.w	r3, [r5, #52]	; 0x34
   19bca:	0699      	lsls	r1, r3, #26
   19bcc:	d508      	bpl.n	19be0 <tcp_input+0x3c4>
          if (pcb->refused_data != NULL) {
   19bce:	f8d8 3078 	ldr.w	r3, [r8, #120]	; 0x78
   19bd2:	2b00      	cmp	r3, #0
   19bd4:	f000 8281 	beq.w	1a0da <tcp_input+0x8be>
            pcb->refused_data->flags |= PBUF_FLAG_TCP_FIN;
   19bd8:	7b5a      	ldrb	r2, [r3, #13]
   19bda:	f042 0220 	orr.w	r2, r2, #32
   19bde:	735a      	strb	r2, [r3, #13]
  if (recv_flags & TF_CLOSED) {
   19be0:	f895 3034 	ldrb.w	r3, [r5, #52]	; 0x34
        tcp_input_pcb = NULL;
   19be4:	2200      	movs	r2, #0
   19be6:	6032      	str	r2, [r6, #0]
  if (recv_flags & TF_CLOSED) {
   19be8:	06da      	lsls	r2, r3, #27
   19bea:	f100 81db 	bmi.w	19fa4 <tcp_input+0x788>
        tcp_output(pcb);
   19bee:	4640      	mov	r0, r8
   19bf0:	f000 fe60 	bl	1a8b4 <tcp_output>
   19bf4:	e6fa      	b.n	199ec <tcp_input+0x1d0>
   19bf6:	460a      	mov	r2, r1
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
   19bf8:	497d      	ldr	r1, [pc, #500]	; (19df0 <tcp_input+0x5d4>)
   19bfa:	f8d1 a000 	ldr.w	sl, [r1]
   19bfe:	f1ba 0f00 	cmp.w	sl, #0
   19c02:	f000 819e 	beq.w	19f42 <tcp_input+0x726>
          (lpcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
   19c06:	f8d6 e004 	ldr.w	lr, [r6, #4]
          if (ip_addr_cmp(&lpcb->local_ip, ip_current_dest_addr())) {
   19c0a:	f8d6 c014 	ldr.w	ip, [r6, #20]
   19c0e:	9205      	str	r2, [sp, #20]
   19c10:	46d1      	mov	r9, sl
   19c12:	2000      	movs	r0, #0
   19c14:	e00c      	b.n	19c30 <tcp_input+0x414>
          (lpcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
   19c16:	f89e 1038 	ldrb.w	r1, [lr, #56]	; 0x38
   19c1a:	3101      	adds	r1, #1
      if ((lpcb->netif_idx != NETIF_NO_INDEX) &&
   19c1c:	b2c9      	uxtb	r1, r1
   19c1e:	428a      	cmp	r2, r1
   19c20:	d00a      	beq.n	19c38 <tcp_input+0x41c>
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
   19c22:	f8d9 100c 	ldr.w	r1, [r9, #12]
   19c26:	4648      	mov	r0, r9
   19c28:	2900      	cmp	r1, #0
   19c2a:	f000 818a 	beq.w	19f42 <tcp_input+0x726>
   19c2e:	4689      	mov	r9, r1
      if ((lpcb->netif_idx != NETIF_NO_INDEX) &&
   19c30:	f899 2008 	ldrb.w	r2, [r9, #8]
   19c34:	2a00      	cmp	r2, #0
   19c36:	d1ee      	bne.n	19c16 <tcp_input+0x3fa>
      if (lpcb->local_port == tcphdr->dest) {
   19c38:	f8b9 1016 	ldrh.w	r1, [r9, #22]
   19c3c:	f8b3 8002 	ldrh.w	r8, [r3, #2]
   19c40:	4588      	cmp	r8, r1
   19c42:	d1ee      	bne.n	19c22 <tcp_input+0x406>
          if (ip_addr_cmp(&lpcb->local_ip, ip_current_dest_addr())) {
   19c44:	f8d9 8000 	ldr.w	r8, [r9]
   19c48:	45e0      	cmp	r8, ip
   19c4a:	d002      	beq.n	19c52 <tcp_input+0x436>
          } else if (ip_addr_isany(&lpcb->local_ip)) {
   19c4c:	f1b8 0f00 	cmp.w	r8, #0
   19c50:	d1e7      	bne.n	19c22 <tcp_input+0x406>
   19c52:	9a05      	ldr	r2, [sp, #20]
   19c54:	468e      	mov	lr, r1
      if (prev != NULL) {
   19c56:	b138      	cbz	r0, 19c68 <tcp_input+0x44c>
        tcp_listen_pcbs.listen_pcbs = lpcb;
   19c58:	4965      	ldr	r1, [pc, #404]	; (19df0 <tcp_input+0x5d4>)
   19c5a:	f8c1 9000 	str.w	r9, [r1]
        ((struct tcp_pcb_listen *)prev)->next = lpcb->next;
   19c5e:	f8d9 100c 	ldr.w	r1, [r9, #12]
   19c62:	60c1      	str	r1, [r0, #12]
        lpcb->next = tcp_listen_pcbs.listen_pcbs;
   19c64:	f8c9 a00c 	str.w	sl, [r9, #12]
  if (flags & TCP_RST) {
   19c68:	0751      	lsls	r1, r2, #29
   19c6a:	f53f ade7 	bmi.w	1983c <tcp_input+0x20>
  if (flags & TCP_ACK) {
   19c6e:	f012 0810 	ands.w	r8, r2, #16
   19c72:	f040 8189 	bne.w	19f88 <tcp_input+0x76c>
  } else if (flags & TCP_SYN) {
   19c76:	0797      	lsls	r7, r2, #30
   19c78:	f57f ade0 	bpl.w	1983c <tcp_input+0x20>
    npcb = tcp_alloc(pcb->prio);
   19c7c:	f899 0015 	ldrb.w	r0, [r9, #21]
   19c80:	f7fe fefa 	bl	18a78 <tcp_alloc>
    if (npcb == NULL) {
   19c84:	4607      	mov	r7, r0
   19c86:	2800      	cmp	r0, #0
   19c88:	f000 81aa 	beq.w	19fe0 <tcp_input+0x7c4>
    npcb->remote_port = tcphdr->src;
   19c8c:	6929      	ldr	r1, [r5, #16]
    npcb->rcv_nxt = seqno + 1;
   19c8e:	682b      	ldr	r3, [r5, #0]
    npcb->remote_port = tcphdr->src;
   19c90:	f891 e001 	ldrb.w	lr, [r1, #1]
   19c94:	780a      	ldrb	r2, [r1, #0]
    ip_addr_copy(npcb->remote_ip, *ip_current_src_addr());
   19c96:	6931      	ldr	r1, [r6, #16]
    npcb->remote_port = tcphdr->src;
   19c98:	ea42 220e 	orr.w	r2, r2, lr, lsl #8
    npcb->rcv_nxt = seqno + 1;
   19c9c:	3301      	adds	r3, #1
    npcb->local_port = pcb->local_port;
   19c9e:	f8b9 e016 	ldrh.w	lr, [r9, #22]
    npcb->remote_port = tcphdr->src;
   19ca2:	8302      	strh	r2, [r0, #24]
    ip_addr_copy(npcb->local_ip, *ip_current_dest_addr());
   19ca4:	6972      	ldr	r2, [r6, #20]
   19ca6:	6002      	str	r2, [r0, #0]
    npcb->state = SYN_RCVD;
   19ca8:	2603      	movs	r6, #3
    npcb->local_port = pcb->local_port;
   19caa:	f8a0 e016 	strh.w	lr, [r0, #22]
    ip_addr_copy(npcb->remote_ip, *ip_current_src_addr());
   19cae:	6041      	str	r1, [r0, #4]
    npcb->rcv_nxt = seqno + 1;
   19cb0:	6243      	str	r3, [r0, #36]	; 0x24
    npcb->rcv_ann_right_edge = npcb->rcv_nxt;
   19cb2:	62c3      	str	r3, [r0, #44]	; 0x2c
    npcb->state = SYN_RCVD;
   19cb4:	7506      	strb	r6, [r0, #20]
    iss = tcp_next_iss(npcb);
   19cb6:	f7ff f815 	bl	18ce4 <tcp_next_iss>
    npcb->snd_wl1 = seqno - 1;/* initialise to seqno-1 to force window update */
   19cba:	682b      	ldr	r3, [r5, #0]
    npcb->callback_arg = pcb->callback_arg;
   19cbc:	f8d9 2010 	ldr.w	r2, [r9, #16]
   19cc0:	613a      	str	r2, [r7, #16]
    npcb->snd_wl1 = seqno - 1;/* initialise to seqno-1 to force window update */
   19cc2:	3b01      	subs	r3, #1
    npcb->snd_wl2 = iss;
   19cc4:	65b8      	str	r0, [r7, #88]	; 0x58
    npcb->snd_nxt = iss;
   19cc6:	6538      	str	r0, [r7, #80]	; 0x50
    npcb->lastack = iss;
   19cc8:	6478      	str	r0, [r7, #68]	; 0x44
    npcb->snd_lbb = iss;
   19cca:	65f8      	str	r0, [r7, #92]	; 0x5c
    npcb->snd_wl1 = seqno - 1;/* initialise to seqno-1 to force window update */
   19ccc:	657b      	str	r3, [r7, #84]	; 0x54
    npcb->listener = pcb;
   19cce:	f8c7 907c 	str.w	r9, [r7, #124]	; 0x7c
    npcb->so_options = pcb->so_options & SOF_INHERITED;
   19cd2:	f899 3009 	ldrb.w	r3, [r9, #9]
    TCP_REG_ACTIVE(npcb);
   19cd6:	f8db 2000 	ldr.w	r2, [fp]
   19cda:	f8cb 7000 	str.w	r7, [fp]
    npcb->so_options = pcb->so_options & SOF_INHERITED;
   19cde:	f003 030c 	and.w	r3, r3, #12
   19ce2:	727b      	strb	r3, [r7, #9]
    npcb->netif_idx = pcb->netif_idx;
   19ce4:	f899 3008 	ldrb.w	r3, [r9, #8]
   19ce8:	723b      	strb	r3, [r7, #8]
    TCP_REG_ACTIVE(npcb);
   19cea:	60fa      	str	r2, [r7, #12]
   19cec:	f001 f97e 	bl	1afec <tcp_timer_needed>
   19cf0:	4b40      	ldr	r3, [pc, #256]	; (19df4 <tcp_input+0x5d8>)
   19cf2:	2201      	movs	r2, #1
    tcp_parseopt(npcb);
   19cf4:	f107 0032 	add.w	r0, r7, #50	; 0x32
    TCP_REG_ACTIVE(npcb);
   19cf8:	701a      	strb	r2, [r3, #0]
    tcp_parseopt(npcb);
   19cfa:	f7ff f8cb 	bl	18e94 <tcp_parseopt.isra.0>
    npcb->snd_wnd = tcphdr->wnd;
   19cfe:	692b      	ldr	r3, [r5, #16]
    npcb->mss = tcp_eff_send_mss(npcb->mss, &npcb->local_ip, &npcb->remote_ip);
   19d00:	8e7e      	ldrh	r6, [r7, #50]	; 0x32
    npcb->snd_wnd = tcphdr->wnd;
   19d02:	89db      	ldrh	r3, [r3, #14]
   19d04:	f8a7 3060 	strh.w	r3, [r7, #96]	; 0x60
    npcb->mss = tcp_eff_send_mss(npcb->mss, &npcb->local_ip, &npcb->remote_ip);
   19d08:	1d3d      	adds	r5, r7, #4
    npcb->snd_wnd_max = npcb->snd_wnd;
   19d0a:	f8a7 3062 	strh.w	r3, [r7, #98]	; 0x62
    npcb->mss = tcp_eff_send_mss(npcb->mss, &npcb->local_ip, &npcb->remote_ip);
   19d0e:	4628      	mov	r0, r5
   19d10:	f002 f9f6 	bl	1c100 <ip4_route>
   19d14:	462a      	mov	r2, r5
   19d16:	4601      	mov	r1, r0
   19d18:	4630      	mov	r0, r6
   19d1a:	f7fe ffef 	bl	18cfc <tcp_eff_send_mss_netif>
    rc = tcp_enqueue_flags(npcb, TCP_SYN | TCP_ACK);
   19d1e:	2112      	movs	r1, #18
    npcb->mss = tcp_eff_send_mss(npcb->mss, &npcb->local_ip, &npcb->remote_ip);
   19d20:	8678      	strh	r0, [r7, #50]	; 0x32
    rc = tcp_enqueue_flags(npcb, TCP_SYN | TCP_ACK);
   19d22:	4638      	mov	r0, r7
   19d24:	f000 fbce 	bl	1a4c4 <tcp_enqueue_flags>
    if (rc != ERR_OK) {
   19d28:	2800      	cmp	r0, #0
   19d2a:	f040 8154 	bne.w	19fd6 <tcp_input+0x7ba>
    tcp_output(npcb);
   19d2e:	4638      	mov	r0, r7
   19d30:	f000 fdc0 	bl	1a8b4 <tcp_output>
   19d34:	e582      	b.n	1983c <tcp_input+0x20>
  if ((pcb->flags & TF_RXCLOSED) == 0) {
   19d36:	f8b8 301a 	ldrh.w	r3, [r8, #26]
   19d3a:	06d9      	lsls	r1, r3, #27
   19d3c:	d403      	bmi.n	19d46 <tcp_input+0x52a>
    pcb->tmr = tcp_ticks;
   19d3e:	4b2e      	ldr	r3, [pc, #184]	; (19df8 <tcp_input+0x5dc>)
   19d40:	681b      	ldr	r3, [r3, #0]
   19d42:	f8c8 3020 	str.w	r3, [r8, #32]
  pcb->keep_cnt_sent = 0;
   19d46:	2300      	movs	r3, #0
   19d48:	f888 309b 	strb.w	r3, [r8, #155]	; 0x9b
  pcb->persist_probe = 0;
   19d4c:	f888 309a 	strb.w	r3, [r8, #154]	; 0x9a
  tcp_parseopt(pcb);
   19d50:	f108 0032 	add.w	r0, r8, #50	; 0x32
   19d54:	f7ff f89e 	bl	18e94 <tcp_parseopt.isra.0>
  switch (pcb->state) {
   19d58:	f898 3014 	ldrb.w	r3, [r8, #20]
   19d5c:	3b02      	subs	r3, #2
   19d5e:	2b07      	cmp	r3, #7
   19d60:	f63f aee0 	bhi.w	19b24 <tcp_input+0x308>
   19d64:	e8df f003 	tbb	[pc, r3]
   19d68:	98697bb4 	.word	0x98697bb4
   19d6c:	041d694a 	.word	0x041d694a
      tcp_receive(pcb);
   19d70:	4640      	mov	r0, r8
   19d72:	f7ff f947 	bl	19004 <tcp_receive>
      if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
   19d76:	7d2b      	ldrb	r3, [r5, #20]
   19d78:	06df      	lsls	r7, r3, #27
   19d7a:	f57f aed3 	bpl.w	19b24 <tcp_input+0x308>
   19d7e:	f8d8 2050 	ldr.w	r2, [r8, #80]	; 0x50
   19d82:	69ab      	ldr	r3, [r5, #24]
   19d84:	429a      	cmp	r2, r3
   19d86:	f47f aecd 	bne.w	19b24 <tcp_input+0x308>
   19d8a:	f8d8 306c 	ldr.w	r3, [r8, #108]	; 0x6c
   19d8e:	2b00      	cmp	r3, #0
   19d90:	f47f aec8 	bne.w	19b24 <tcp_input+0x308>
        recv_flags |= TF_CLOSED;
   19d94:	f895 3034 	ldrb.w	r3, [r5, #52]	; 0x34
   19d98:	f043 0310 	orr.w	r3, r3, #16
   19d9c:	f885 3034 	strb.w	r3, [r5, #52]	; 0x34
   19da0:	e6c0      	b.n	19b24 <tcp_input+0x308>
      tcp_receive(pcb);
   19da2:	4640      	mov	r0, r8
   19da4:	f7ff f92e 	bl	19004 <tcp_receive>
      if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
   19da8:	7d2b      	ldrb	r3, [r5, #20]
   19daa:	06db      	lsls	r3, r3, #27
   19dac:	f57f aeba 	bpl.w	19b24 <tcp_input+0x308>
   19db0:	f8d8 2050 	ldr.w	r2, [r8, #80]	; 0x50
   19db4:	69ab      	ldr	r3, [r5, #24]
   19db6:	429a      	cmp	r2, r3
   19db8:	f47f aeb4 	bne.w	19b24 <tcp_input+0x308>
   19dbc:	f8d8 306c 	ldr.w	r3, [r8, #108]	; 0x6c
   19dc0:	2b00      	cmp	r3, #0
   19dc2:	f47f aeaf 	bne.w	19b24 <tcp_input+0x308>
        tcp_pcb_purge(pcb);
   19dc6:	4640      	mov	r0, r8
   19dc8:	f7fe ff4a 	bl	18c60 <tcp_pcb_purge>
        TCP_RMV_ACTIVE(pcb);
   19dcc:	f8db 3000 	ldr.w	r3, [fp]
   19dd0:	4598      	cmp	r8, r3
   19dd2:	f000 81f8 	beq.w	1a1c6 <tcp_input+0x9aa>
   19dd6:	2b00      	cmp	r3, #0
   19dd8:	f000 81a0 	beq.w	1a11c <tcp_input+0x900>
   19ddc:	68da      	ldr	r2, [r3, #12]
   19dde:	4590      	cmp	r8, r2
   19de0:	f000 8199 	beq.w	1a116 <tcp_input+0x8fa>
   19de4:	4613      	mov	r3, r2
   19de6:	e7f6      	b.n	19dd6 <tcp_input+0x5ba>
   19de8:	2000a3fc 	.word	0x2000a3fc
   19dec:	2000a3e8 	.word	0x2000a3e8
   19df0:	2000a3f0 	.word	0x2000a3f0
   19df4:	2000a3e4 	.word	0x2000a3e4
   19df8:	2000a3ec 	.word	0x2000a3ec
      tcp_receive(pcb);
   19dfc:	4640      	mov	r0, r8
   19dfe:	f7ff f901 	bl	19004 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) {
   19e02:	f895 3034 	ldrb.w	r3, [r5, #52]	; 0x34
   19e06:	069a      	lsls	r2, r3, #26
   19e08:	f57f ae8c 	bpl.w	19b24 <tcp_input+0x308>
        tcp_ack_now(pcb);
   19e0c:	f8b8 301a 	ldrh.w	r3, [r8, #26]
   19e10:	f043 0302 	orr.w	r3, r3, #2
   19e14:	f8a8 301a 	strh.w	r3, [r8, #26]
        tcp_pcb_purge(pcb);
   19e18:	4640      	mov	r0, r8
   19e1a:	f7fe ff21 	bl	18c60 <tcp_pcb_purge>
        TCP_RMV_ACTIVE(pcb);
   19e1e:	f8db 3000 	ldr.w	r3, [fp]
   19e22:	4598      	cmp	r8, r3
   19e24:	f000 81cf 	beq.w	1a1c6 <tcp_input+0x9aa>
   19e28:	2b00      	cmp	r3, #0
   19e2a:	f000 8177 	beq.w	1a11c <tcp_input+0x900>
   19e2e:	68da      	ldr	r2, [r3, #12]
   19e30:	4590      	cmp	r8, r2
   19e32:	f000 8170 	beq.w	1a116 <tcp_input+0x8fa>
   19e36:	4613      	mov	r3, r2
   19e38:	e7f6      	b.n	19e28 <tcp_input+0x60c>
      tcp_receive(pcb);
   19e3a:	4640      	mov	r0, r8
   19e3c:	f7ff f8e2 	bl	19004 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) { /* passive close */
   19e40:	f895 3034 	ldrb.w	r3, [r5, #52]	; 0x34
   19e44:	069c      	lsls	r4, r3, #26
   19e46:	f57f ae6d 	bpl.w	19b24 <tcp_input+0x308>
        tcp_ack_now(pcb);
   19e4a:	f8b8 301a 	ldrh.w	r3, [r8, #26]
        pcb->state = CLOSE_WAIT;
   19e4e:	2207      	movs	r2, #7
        tcp_ack_now(pcb);
   19e50:	f043 0302 	orr.w	r3, r3, #2
   19e54:	f8a8 301a 	strh.w	r3, [r8, #26]
        pcb->state = CLOSE_WAIT;
   19e58:	f888 2014 	strb.w	r2, [r8, #20]
   19e5c:	e662      	b.n	19b24 <tcp_input+0x308>
      if (flags & TCP_ACK) {
   19e5e:	06e3      	lsls	r3, r4, #27
   19e60:	f140 816b 	bpl.w	1a13a <tcp_input+0x91e>
        if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
   19e64:	f8d8 3044 	ldr.w	r3, [r8, #68]	; 0x44
   19e68:	69a9      	ldr	r1, [r5, #24]
   19e6a:	43db      	mvns	r3, r3
   19e6c:	42cb      	cmn	r3, r1
   19e6e:	d405      	bmi.n	19e7c <tcp_input+0x660>
   19e70:	f8d8 3050 	ldr.w	r3, [r8, #80]	; 0x50
   19e74:	1acb      	subs	r3, r1, r3
   19e76:	2b00      	cmp	r3, #0
   19e78:	f340 816e 	ble.w	1a158 <tcp_input+0x93c>
                  ip_current_src_addr(), tcphdr->dest, tcphdr->src);
   19e7c:	692b      	ldr	r3, [r5, #16]
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
   19e7e:	8ba8      	ldrh	r0, [r5, #28]
   19e80:	881a      	ldrh	r2, [r3, #0]
   19e82:	9202      	str	r2, [sp, #8]
   19e84:	682a      	ldr	r2, [r5, #0]
   19e86:	885b      	ldrh	r3, [r3, #2]
   19e88:	9301      	str	r3, [sp, #4]
   19e8a:	4402      	add	r2, r0
   19e8c:	9700      	str	r7, [sp, #0]
   19e8e:	4bbd      	ldr	r3, [pc, #756]	; (1a184 <tcp_input+0x968>)
   19e90:	4640      	mov	r0, r8
   19e92:	f000 fc1b 	bl	1a6cc <tcp_rst>
   19e96:	e645      	b.n	19b24 <tcp_input+0x308>
      tcp_receive(pcb);
   19e98:	4640      	mov	r0, r8
   19e9a:	f7ff f8b3 	bl	19004 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) {
   19e9e:	f895 3034 	ldrb.w	r3, [r5, #52]	; 0x34
   19ea2:	f013 0f20 	tst.w	r3, #32
        if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
   19ea6:	7d2b      	ldrb	r3, [r5, #20]
      if (recv_flags & TF_GOT_FIN) {
   19ea8:	f000 8083 	beq.w	19fb2 <tcp_input+0x796>
        if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
   19eac:	06d8      	lsls	r0, r3, #27
   19eae:	d505      	bpl.n	19ebc <tcp_input+0x6a0>
   19eb0:	f8d8 2050 	ldr.w	r2, [r8, #80]	; 0x50
   19eb4:	69ab      	ldr	r3, [r5, #24]
   19eb6:	429a      	cmp	r2, r3
   19eb8:	f000 816c 	beq.w	1a194 <tcp_input+0x978>
          tcp_ack_now(pcb);
   19ebc:	f8b8 301a 	ldrh.w	r3, [r8, #26]
          pcb->state = CLOSING;
   19ec0:	2208      	movs	r2, #8
          tcp_ack_now(pcb);
   19ec2:	f043 0302 	orr.w	r3, r3, #2
   19ec6:	f8a8 301a 	strh.w	r3, [r8, #26]
          pcb->state = CLOSING;
   19eca:	f888 2014 	strb.w	r2, [r8, #20]
   19ece:	e629      	b.n	19b24 <tcp_input+0x308>
      if ((flags & TCP_ACK) && (flags & TCP_SYN)
   19ed0:	f004 0312 	and.w	r3, r4, #18
   19ed4:	2b12      	cmp	r3, #18
   19ed6:	f000 808f 	beq.w	19ff8 <tcp_input+0x7dc>
      else if (flags & TCP_ACK) {
   19eda:	06e2      	lsls	r2, r4, #27
   19edc:	f57f ae22 	bpl.w	19b24 <tcp_input+0x308>
                ip_current_src_addr(), tcphdr->dest, tcphdr->src);
   19ee0:	692b      	ldr	r3, [r5, #16]
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
   19ee2:	8ba9      	ldrh	r1, [r5, #28]
   19ee4:	881a      	ldrh	r2, [r3, #0]
   19ee6:	9202      	str	r2, [sp, #8]
   19ee8:	682a      	ldr	r2, [r5, #0]
   19eea:	885b      	ldrh	r3, [r3, #2]
   19eec:	9301      	str	r3, [sp, #4]
   19eee:	9700      	str	r7, [sp, #0]
   19ef0:	440a      	add	r2, r1
   19ef2:	4ba4      	ldr	r3, [pc, #656]	; (1a184 <tcp_input+0x968>)
   19ef4:	69a9      	ldr	r1, [r5, #24]
   19ef6:	4640      	mov	r0, r8
   19ef8:	f000 fbe8 	bl	1a6cc <tcp_rst>
        if (pcb->nrtx < TCP_SYNMAXRTX) {
   19efc:	f898 3042 	ldrb.w	r3, [r8, #66]	; 0x42
   19f00:	2b05      	cmp	r3, #5
   19f02:	f63f ae0f 	bhi.w	19b24 <tcp_input+0x308>
          pcb->rtime = 0;
   19f06:	2300      	movs	r3, #0
   19f08:	f8a8 3030 	strh.w	r3, [r8, #48]	; 0x30
          tcp_rexmit_rto(pcb);
   19f0c:	4640      	mov	r0, r8
   19f0e:	f000 fe7f 	bl	1ac10 <tcp_rexmit_rto>
   19f12:	e607      	b.n	19b24 <tcp_input+0x308>
          tcp_send_empty_ack(pcb);
   19f14:	4640      	mov	r0, r8
   19f16:	f000 fc4f 	bl	1a7b8 <tcp_send_empty_ack>
   19f1a:	e566      	b.n	199ea <tcp_input+0x1ce>
      if (ackno == pcb->snd_nxt) {
   19f1c:	f8d8 2050 	ldr.w	r2, [r8, #80]	; 0x50
   19f20:	69ab      	ldr	r3, [r5, #24]
   19f22:	429a      	cmp	r2, r3
   19f24:	f47f adfe 	bne.w	19b24 <tcp_input+0x308>
      recv_flags |= TF_RESET;
   19f28:	f895 2034 	ldrb.w	r2, [r5, #52]	; 0x34
      tcp_clear_flags(pcb, TF_ACK_DELAY);
   19f2c:	f8b8 301a 	ldrh.w	r3, [r8, #26]
      recv_flags |= TF_RESET;
   19f30:	f042 0208 	orr.w	r2, r2, #8
      tcp_clear_flags(pcb, TF_ACK_DELAY);
   19f34:	f023 0301 	bic.w	r3, r3, #1
      recv_flags |= TF_RESET;
   19f38:	f885 2034 	strb.w	r2, [r5, #52]	; 0x34
      tcp_clear_flags(pcb, TF_ACK_DELAY);
   19f3c:	f8a8 301a 	strh.w	r3, [r8, #26]
   19f40:	e5f0      	b.n	19b24 <tcp_input+0x308>
    if (!(TCPH_FLAGS(tcphdr) & TCP_RST)) {
   19f42:	8998      	ldrh	r0, [r3, #12]
   19f44:	f7f9 fbd8 	bl	136f8 <lwip_htons>
   19f48:	f010 0004 	ands.w	r0, r0, #4
   19f4c:	f47f ac76 	bne.w	1983c <tcp_input+0x20>
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
   19f50:	692b      	ldr	r3, [r5, #16]
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
   19f52:	8ba9      	ldrh	r1, [r5, #28]
   19f54:	881a      	ldrh	r2, [r3, #0]
   19f56:	9202      	str	r2, [sp, #8]
   19f58:	682a      	ldr	r2, [r5, #0]
   19f5a:	885b      	ldrh	r3, [r3, #2]
   19f5c:	9301      	str	r3, [sp, #4]
   19f5e:	9700      	str	r7, [sp, #0]
   19f60:	440a      	add	r2, r1
   19f62:	4b88      	ldr	r3, [pc, #544]	; (1a184 <tcp_input+0x968>)
   19f64:	69a9      	ldr	r1, [r5, #24]
   19f66:	f000 fbb1 	bl	1a6cc <tcp_rst>
   19f6a:	e467      	b.n	1983c <tcp_input+0x20>
   19f6c:	4640      	mov	r0, r8
   19f6e:	f7ff f831 	bl	18fd4 <tcp_input_delayed_close.part.1>
        if (tcp_input_delayed_close(pcb)) {
   19f72:	2800      	cmp	r0, #0
   19f74:	f47f ad3a 	bne.w	199ec <tcp_input+0x1d0>
   19f78:	e60c      	b.n	19b94 <tcp_input+0x378>
            pbuf_free(recv_data);
   19f7a:	4610      	mov	r0, r2
   19f7c:	f7fd fc36 	bl	177ec <pbuf_free>
            tcp_abort(pcb);
   19f80:	4640      	mov	r0, r8
   19f82:	f7fe f9e1 	bl	18348 <tcp_abort>
            goto aborted;
   19f86:	e531      	b.n	199ec <tcp_input+0x1d0>
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
   19f88:	682a      	ldr	r2, [r5, #0]
   19f8a:	881b      	ldrh	r3, [r3, #0]
   19f8c:	9302      	str	r3, [sp, #8]
   19f8e:	e88d 4080 	stmia.w	sp, {r7, lr}
   19f92:	4648      	mov	r0, r9
   19f94:	9b04      	ldr	r3, [sp, #16]
   19f96:	69a9      	ldr	r1, [r5, #24]
   19f98:	4413      	add	r3, r2
   19f9a:	461a      	mov	r2, r3
   19f9c:	4b79      	ldr	r3, [pc, #484]	; (1a184 <tcp_input+0x968>)
   19f9e:	f000 fb95 	bl	1a6cc <tcp_rst>
   19fa2:	e44b      	b.n	1983c <tcp_input+0x20>
   19fa4:	4640      	mov	r0, r8
   19fa6:	f7ff f815 	bl	18fd4 <tcp_input_delayed_close.part.1>
        if (tcp_input_delayed_close(pcb)) {
   19faa:	2800      	cmp	r0, #0
   19fac:	f47f ad1e 	bne.w	199ec <tcp_input+0x1d0>
   19fb0:	e61d      	b.n	19bee <tcp_input+0x3d2>
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
   19fb2:	06d9      	lsls	r1, r3, #27
   19fb4:	f57f adb6 	bpl.w	19b24 <tcp_input+0x308>
   19fb8:	f8d8 2050 	ldr.w	r2, [r8, #80]	; 0x50
   19fbc:	69ab      	ldr	r3, [r5, #24]
   19fbe:	429a      	cmp	r2, r3
   19fc0:	f47f adb0 	bne.w	19b24 <tcp_input+0x308>
   19fc4:	f8d8 306c 	ldr.w	r3, [r8, #108]	; 0x6c
   19fc8:	2b00      	cmp	r3, #0
   19fca:	f47f adab 	bne.w	19b24 <tcp_input+0x308>
        pcb->state = FIN_WAIT_2;
   19fce:	2306      	movs	r3, #6
   19fd0:	f888 3014 	strb.w	r3, [r8, #20]
   19fd4:	e5a6      	b.n	19b24 <tcp_input+0x308>
      tcp_abandon(npcb, 0);
   19fd6:	4641      	mov	r1, r8
   19fd8:	4638      	mov	r0, r7
   19fda:	f7fe f8d7 	bl	1818c <tcp_abandon>
   19fde:	e42d      	b.n	1983c <tcp_input+0x20>
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
   19fe0:	f8d9 3018 	ldr.w	r3, [r9, #24]
   19fe4:	2b00      	cmp	r3, #0
   19fe6:	f43f ac29 	beq.w	1983c <tcp_input+0x20>
   19fea:	4601      	mov	r1, r0
   19fec:	f04f 32ff 	mov.w	r2, #4294967295
   19ff0:	f8d9 0010 	ldr.w	r0, [r9, #16]
   19ff4:	4798      	blx	r3
   19ff6:	e421      	b.n	1983c <tcp_input+0x20>
          && (ackno == pcb->lastack + 1)) {
   19ff8:	f8d8 2044 	ldr.w	r2, [r8, #68]	; 0x44
   19ffc:	69ab      	ldr	r3, [r5, #24]
   19ffe:	3201      	adds	r2, #1
   1a000:	429a      	cmp	r2, r3
   1a002:	f47f af6a 	bne.w	19eda <tcp_input+0x6be>
        pcb->rcv_nxt = seqno + 1;
   1a006:	682b      	ldr	r3, [r5, #0]
        pcb->snd_wnd = tcphdr->wnd;
   1a008:	6929      	ldr	r1, [r5, #16]
        pcb->lastack = ackno;
   1a00a:	f8c8 2044 	str.w	r2, [r8, #68]	; 0x44
        pcb->rcv_nxt = seqno + 1;
   1a00e:	1c5a      	adds	r2, r3, #1
   1a010:	f8c8 2024 	str.w	r2, [r8, #36]	; 0x24
        pcb->rcv_ann_right_edge = pcb->rcv_nxt;
   1a014:	f8c8 202c 	str.w	r2, [r8, #44]	; 0x2c
        pcb->snd_wnd = tcphdr->wnd;
   1a018:	89ca      	ldrh	r2, [r1, #14]
   1a01a:	f8a8 2060 	strh.w	r2, [r8, #96]	; 0x60
        pcb->state = ESTABLISHED;
   1a01e:	2104      	movs	r1, #4
        pcb->mss = tcp_eff_send_mss(pcb->mss, &pcb->local_ip, &pcb->remote_ip);
   1a020:	eb08 0401 	add.w	r4, r8, r1
        pcb->snd_wl1 = seqno - 1; /* initialise to seqno - 1 to force window update */
   1a024:	3b01      	subs	r3, #1
   1a026:	f8c8 3054 	str.w	r3, [r8, #84]	; 0x54
        pcb->snd_wnd_max = pcb->snd_wnd;
   1a02a:	f8a8 2062 	strh.w	r2, [r8, #98]	; 0x62
        pcb->state = ESTABLISHED;
   1a02e:	f888 1014 	strb.w	r1, [r8, #20]
        pcb->mss = tcp_eff_send_mss(pcb->mss, &pcb->local_ip, &pcb->remote_ip);
   1a032:	4620      	mov	r0, r4
   1a034:	f8b8 7032 	ldrh.w	r7, [r8, #50]	; 0x32
   1a038:	f002 f862 	bl	1c100 <ip4_route>
   1a03c:	4622      	mov	r2, r4
   1a03e:	4601      	mov	r1, r0
   1a040:	4638      	mov	r0, r7
   1a042:	f7fe fe5b 	bl	18cfc <tcp_eff_send_mss_netif>
        pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
   1a046:	f241 131c 	movw	r3, #4380	; 0x111c
   1a04a:	0042      	lsls	r2, r0, #1
   1a04c:	429a      	cmp	r2, r3
   1a04e:	4614      	mov	r4, r2
   1a050:	ea4f 0180 	mov.w	r1, r0, lsl #2
   1a054:	bf38      	it	cc
   1a056:	461c      	movcc	r4, r3
   1a058:	42a1      	cmp	r1, r4
        pcb->mss = tcp_eff_send_mss(pcb->mss, &pcb->local_ip, &pcb->remote_ip);
   1a05a:	f8a8 0032 	strh.w	r0, [r8, #50]	; 0x32
        pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
   1a05e:	d238      	bcs.n	1a0d2 <tcp_input+0x8b6>
   1a060:	b28b      	uxth	r3, r1
        --pcb->snd_queuelen;
   1a062:	f8b8 2066 	ldrh.w	r2, [r8, #102]	; 0x66
        rseg = pcb->unacked;
   1a066:	f8d8 0070 	ldr.w	r0, [r8, #112]	; 0x70
        pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
   1a06a:	f8a8 3048 	strh.w	r3, [r8, #72]	; 0x48
        --pcb->snd_queuelen;
   1a06e:	1e53      	subs	r3, r2, #1
   1a070:	f8a8 3066 	strh.w	r3, [r8, #102]	; 0x66
        if (rseg == NULL) {
   1a074:	b338      	cbz	r0, 1a0c6 <tcp_input+0x8aa>
          pcb->unacked = rseg->next;
   1a076:	6803      	ldr	r3, [r0, #0]
   1a078:	f8c8 3070 	str.w	r3, [r8, #112]	; 0x70
        tcp_seg_free(rseg);
   1a07c:	f7fe fcda 	bl	18a34 <tcp_seg_free>
        if (pcb->unacked == NULL) {
   1a080:	f8d8 3070 	ldr.w	r3, [r8, #112]	; 0x70
   1a084:	b1e3      	cbz	r3, 1a0c0 <tcp_input+0x8a4>
          pcb->nrtx = 0;
   1a086:	2300      	movs	r3, #0
   1a088:	f888 3042 	strb.w	r3, [r8, #66]	; 0x42
        TCP_EVENT_CONNECTED(pcb, ERR_OK, err);
   1a08c:	f8d8 4088 	ldr.w	r4, [r8, #136]	; 0x88
   1a090:	f8a8 3030 	strh.w	r3, [r8, #48]	; 0x30
   1a094:	2c00      	cmp	r4, #0
   1a096:	f43f ad63 	beq.w	19b60 <tcp_input+0x344>
   1a09a:	2200      	movs	r2, #0
   1a09c:	4641      	mov	r1, r8
   1a09e:	f8d8 0010 	ldr.w	r0, [r8, #16]
   1a0a2:	47a0      	blx	r4
        if (err == ERR_ABRT) {
   1a0a4:	300d      	adds	r0, #13
   1a0a6:	f47f ad5b 	bne.w	19b60 <tcp_input+0x344>
   1a0aa:	e49f      	b.n	199ec <tcp_input+0x1d0>
  } else if (flags & TCP_FIN) {
   1a0ac:	07cd      	lsls	r5, r1, #31
   1a0ae:	f57f ad03 	bpl.w	19ab8 <tcp_input+0x29c>
    pcb->tmr = tcp_ticks;
   1a0b2:	4b35      	ldr	r3, [pc, #212]	; (1a188 <tcp_input+0x96c>)
   1a0b4:	681b      	ldr	r3, [r3, #0]
   1a0b6:	6203      	str	r3, [r0, #32]
   1a0b8:	e4fe      	b.n	19ab8 <tcp_input+0x29c>
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
   1a0ba:	e88d 4180 	stmia.w	sp, {r7, r8, lr}
   1a0be:	e769      	b.n	19f94 <tcp_input+0x778>
          pcb->rtime = -1;
   1a0c0:	f04f 33ff 	mov.w	r3, #4294967295
   1a0c4:	e7e2      	b.n	1a08c <tcp_input+0x870>
          rseg = pcb->unsent;
   1a0c6:	f8d8 006c 	ldr.w	r0, [r8, #108]	; 0x6c
          pcb->unsent = rseg->next;
   1a0ca:	6803      	ldr	r3, [r0, #0]
   1a0cc:	f8c8 306c 	str.w	r3, [r8, #108]	; 0x6c
   1a0d0:	e7d4      	b.n	1a07c <tcp_input+0x860>
        pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
   1a0d2:	429a      	cmp	r2, r3
   1a0d4:	bf88      	it	hi
   1a0d6:	b293      	uxthhi	r3, r2
   1a0d8:	e7c3      	b.n	1a062 <tcp_input+0x846>
            if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
   1a0da:	f8b8 3028 	ldrh.w	r3, [r8, #40]	; 0x28
            TCP_EVENT_CLOSED(pcb, err);
   1a0de:	f8d8 4084 	ldr.w	r4, [r8, #132]	; 0x84
            if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
   1a0e2:	f241 62d0 	movw	r2, #5840	; 0x16d0
   1a0e6:	4293      	cmp	r3, r2
              pcb->rcv_wnd++;
   1a0e8:	bf1c      	itt	ne
   1a0ea:	3301      	addne	r3, #1
   1a0ec:	f8a8 3028 	strhne.w	r3, [r8, #40]	; 0x28
            TCP_EVENT_CLOSED(pcb, err);
   1a0f0:	2c00      	cmp	r4, #0
   1a0f2:	f43f ad75 	beq.w	19be0 <tcp_input+0x3c4>
   1a0f6:	2300      	movs	r3, #0
   1a0f8:	461a      	mov	r2, r3
   1a0fa:	4641      	mov	r1, r8
   1a0fc:	f8d8 0010 	ldr.w	r0, [r8, #16]
   1a100:	47a0      	blx	r4
            if (err == ERR_ABRT) {
   1a102:	300d      	adds	r0, #13
   1a104:	f47f ad6c 	bne.w	19be0 <tcp_input+0x3c4>
   1a108:	e470      	b.n	199ec <tcp_input+0x1d0>
          TCP_EVENT_RECV(pcb, recv_data, ERR_OK, err);
   1a10a:	4623      	mov	r3, r4
   1a10c:	4620      	mov	r0, r4
   1a10e:	4641      	mov	r1, r8
   1a110:	f7fd ffe0 	bl	180d4 <tcp_recv_null>
   1a114:	e54f      	b.n	19bb6 <tcp_input+0x39a>
        TCP_RMV_ACTIVE(pcb);
   1a116:	f8d8 200c 	ldr.w	r2, [r8, #12]
   1a11a:	60da      	str	r2, [r3, #12]
        TCP_REG(&tcp_tw_pcbs, pcb);
   1a11c:	4b1b      	ldr	r3, [pc, #108]	; (1a18c <tcp_input+0x970>)
        TCP_RMV_ACTIVE(pcb);
   1a11e:	4a1c      	ldr	r2, [pc, #112]	; (1a190 <tcp_input+0x974>)
        TCP_REG(&tcp_tw_pcbs, pcb);
   1a120:	6819      	ldr	r1, [r3, #0]
   1a122:	f8c8 100c 	str.w	r1, [r8, #12]
        pcb->state = TIME_WAIT;
   1a126:	200a      	movs	r0, #10
        TCP_RMV_ACTIVE(pcb);
   1a128:	2101      	movs	r1, #1
        pcb->state = TIME_WAIT;
   1a12a:	f888 0014 	strb.w	r0, [r8, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
   1a12e:	f8c3 8000 	str.w	r8, [r3]
        TCP_RMV_ACTIVE(pcb);
   1a132:	7011      	strb	r1, [r2, #0]
        TCP_REG(&tcp_tw_pcbs, pcb);
   1a134:	f000 ff5a 	bl	1afec <tcp_timer_needed>
   1a138:	e4f4      	b.n	19b24 <tcp_input+0x308>
      } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
   1a13a:	f1b9 0f00 	cmp.w	r9, #0
   1a13e:	f43f acf1 	beq.w	19b24 <tcp_input+0x308>
   1a142:	f8d8 3024 	ldr.w	r3, [r8, #36]	; 0x24
   1a146:	682a      	ldr	r2, [r5, #0]
   1a148:	3b01      	subs	r3, #1
   1a14a:	4293      	cmp	r3, r2
   1a14c:	f47f acea 	bne.w	19b24 <tcp_input+0x308>
        tcp_rexmit(pcb);
   1a150:	4640      	mov	r0, r8
   1a152:	f000 fa31 	bl	1a5b8 <tcp_rexmit>
   1a156:	e4e5      	b.n	19b24 <tcp_input+0x308>
          if (pcb->listener == NULL) {
   1a158:	f8d8 307c 	ldr.w	r3, [r8, #124]	; 0x7c
          pcb->state = ESTABLISHED;
   1a15c:	2204      	movs	r2, #4
   1a15e:	f888 2014 	strb.w	r2, [r8, #20]
          if (pcb->listener == NULL) {
   1a162:	2b00      	cmp	r3, #0
   1a164:	f43f af0c 	beq.w	19f80 <tcp_input+0x764>
            TCP_EVENT_ACCEPT(pcb->listener, pcb, pcb->callback_arg, ERR_OK, err);
   1a168:	699b      	ldr	r3, [r3, #24]
   1a16a:	2b00      	cmp	r3, #0
   1a16c:	f43f af08 	beq.w	19f80 <tcp_input+0x764>
   1a170:	2200      	movs	r2, #0
   1a172:	4641      	mov	r1, r8
   1a174:	f8d8 0010 	ldr.w	r0, [r8, #16]
   1a178:	4798      	blx	r3
          if (err != ERR_OK) {
   1a17a:	b348      	cbz	r0, 1a1d0 <tcp_input+0x9b4>
            if (err != ERR_ABRT) {
   1a17c:	300d      	adds	r0, #13
   1a17e:	f47f aeff 	bne.w	19f80 <tcp_input+0x764>
   1a182:	e433      	b.n	199ec <tcp_input+0x1d0>
   1a184:	2000a418 	.word	0x2000a418
   1a188:	2000a3ec 	.word	0x2000a3ec
   1a18c:	2000a3f8 	.word	0x2000a3f8
   1a190:	2000a3e4 	.word	0x2000a3e4
        if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
   1a194:	f8d8 306c 	ldr.w	r3, [r8, #108]	; 0x6c
   1a198:	2b00      	cmp	r3, #0
   1a19a:	f47f ae8f 	bne.w	19ebc <tcp_input+0x6a0>
          tcp_ack_now(pcb);
   1a19e:	f8b8 301a 	ldrh.w	r3, [r8, #26]
   1a1a2:	f043 0302 	orr.w	r3, r3, #2
   1a1a6:	f8a8 301a 	strh.w	r3, [r8, #26]
          tcp_pcb_purge(pcb);
   1a1aa:	4640      	mov	r0, r8
   1a1ac:	f7fe fd58 	bl	18c60 <tcp_pcb_purge>
          TCP_RMV_ACTIVE(pcb);
   1a1b0:	f8db 3000 	ldr.w	r3, [fp]
   1a1b4:	4598      	cmp	r8, r3
   1a1b6:	d006      	beq.n	1a1c6 <tcp_input+0x9aa>
   1a1b8:	2b00      	cmp	r3, #0
   1a1ba:	d0af      	beq.n	1a11c <tcp_input+0x900>
   1a1bc:	68da      	ldr	r2, [r3, #12]
   1a1be:	4590      	cmp	r8, r2
   1a1c0:	d0a9      	beq.n	1a116 <tcp_input+0x8fa>
   1a1c2:	4613      	mov	r3, r2
   1a1c4:	e7f8      	b.n	1a1b8 <tcp_input+0x99c>
        TCP_RMV_ACTIVE(pcb);
   1a1c6:	f8d8 300c 	ldr.w	r3, [r8, #12]
   1a1ca:	f8cb 3000 	str.w	r3, [fp]
   1a1ce:	e7a5      	b.n	1a11c <tcp_input+0x900>
          tcp_receive(pcb);
   1a1d0:	4640      	mov	r0, r8
   1a1d2:	f7fe ff17 	bl	19004 <tcp_receive>
          if (recv_acked != 0) {
   1a1d6:	8beb      	ldrh	r3, [r5, #30]
   1a1d8:	b10b      	cbz	r3, 1a1de <tcp_input+0x9c2>
            recv_acked--;
   1a1da:	3b01      	subs	r3, #1
   1a1dc:	83eb      	strh	r3, [r5, #30]
          pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
   1a1de:	f8b8 2032 	ldrh.w	r2, [r8, #50]	; 0x32
   1a1e2:	f241 131c 	movw	r3, #4380	; 0x111c
   1a1e6:	0051      	lsls	r1, r2, #1
   1a1e8:	4299      	cmp	r1, r3
   1a1ea:	4608      	mov	r0, r1
   1a1ec:	ea4f 0282 	mov.w	r2, r2, lsl #2
   1a1f0:	bf38      	it	cc
   1a1f2:	4618      	movcc	r0, r3
   1a1f4:	4282      	cmp	r2, r0
   1a1f6:	d208      	bcs.n	1a20a <tcp_input+0x9ee>
   1a1f8:	b293      	uxth	r3, r2
          if (recv_flags & TF_GOT_FIN) {
   1a1fa:	f895 2034 	ldrb.w	r2, [r5, #52]	; 0x34
          pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
   1a1fe:	f8a8 3048 	strh.w	r3, [r8, #72]	; 0x48
          if (recv_flags & TF_GOT_FIN) {
   1a202:	0697      	lsls	r7, r2, #26
   1a204:	f57f ac8e 	bpl.w	19b24 <tcp_input+0x308>
   1a208:	e61f      	b.n	19e4a <tcp_input+0x62e>
          pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
   1a20a:	4299      	cmp	r1, r3
   1a20c:	bf88      	it	hi
   1a20e:	b28b      	uxthhi	r3, r1
   1a210:	e7f3      	b.n	1a1fa <tcp_input+0x9de>
   1a212:	bf00      	nop

0001a214 <tcp_trigger_input_pcb_close>:
}

void
tcp_trigger_input_pcb_close(void)
{
  recv_flags |= TF_CLOSED;
   1a214:	4a03      	ldr	r2, [pc, #12]	; (1a224 <tcp_trigger_input_pcb_close+0x10>)
   1a216:	f892 3034 	ldrb.w	r3, [r2, #52]	; 0x34
   1a21a:	f043 0310 	orr.w	r3, r3, #16
   1a21e:	f882 3034 	strb.w	r3, [r2, #52]	; 0x34
   1a222:	4770      	bx	lr
   1a224:	20002908 	.word	0x20002908

0001a228 <tcp_create_segment.isra.2>:
 * @return a new tcp_seg pointing to p, or NULL.
 * The TCP header is filled in except ackno and wnd.
 * p is freed on failure.
 */
static struct tcp_seg *
tcp_create_segment(const struct tcp_pcb *pcb, struct pbuf *p, u8_t hdrflags, u32_t seqno, u8_t optflags)
   1a228:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1a22c:	f89d b02c 	ldrb.w	fp, [sp, #44]	; 0x2c
  u8_t optlen;

  LWIP_ASSERT("tcp_create_segment: invalid pcb", pcb != NULL);
  LWIP_ASSERT("tcp_create_segment: invalid pbuf", p != NULL);

  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
   1a230:	f00b 0401 	and.w	r4, fp, #1
   1a234:	2c00      	cmp	r4, #0
tcp_create_segment(const struct tcp_pcb *pcb, struct pbuf *p, u8_t hdrflags, u32_t seqno, u8_t optflags)
   1a236:	4681      	mov	r9, r0

  if ((seg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG)) == NULL) {
   1a238:	f04f 0004 	mov.w	r0, #4
tcp_create_segment(const struct tcp_pcb *pcb, struct pbuf *p, u8_t hdrflags, u32_t seqno, u8_t optflags)
   1a23c:	4688      	mov	r8, r1
   1a23e:	4615      	mov	r5, r2
   1a240:	461e      	mov	r6, r3
  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
   1a242:	bf0b      	itete	eq
   1a244:	f44f 47a0 	moveq.w	r7, #20480	; 0x5000
   1a248:	f44f 47c0 	movne.w	r7, #24576	; 0x6000
   1a24c:	f04f 0a00 	moveq.w	sl, #0
   1a250:	4682      	movne	sl, r0
  if ((seg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG)) == NULL) {
   1a252:	f7fc ff69 	bl	17128 <memp_malloc>
   1a256:	4604      	mov	r4, r0
   1a258:	2800      	cmp	r0, #0
   1a25a:	d03b      	beq.n	1a2d4 <tcp_create_segment.isra.2+0xac>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_create_segment: no memory.\n"));
    pbuf_free(p);
    return NULL;
  }
  seg->flags = optflags;
   1a25c:	f880 b00a 	strb.w	fp, [r0, #10]
  seg->next = NULL;
  seg->p = p;
  LWIP_ASSERT("p->tot_len >= optlen", p->tot_len >= optlen);
  seg->len = p->tot_len - optlen;
   1a260:	892b      	ldrh	r3, [r5, #8]
  seg->p = p;
   1a262:	6045      	str	r5, [r0, #4]
  seg->len = p->tot_len - optlen;
   1a264:	eba3 030a 	sub.w	r3, r3, sl
  seg->next = NULL;
   1a268:	f04f 0a00 	mov.w	sl, #0
  seg->len = p->tot_len - optlen;
   1a26c:	8103      	strh	r3, [r0, #8]
  LWIP_ASSERT("invalid optflags passed: TF_SEG_DATA_CHECKSUMMED",
              (optflags & TF_SEG_DATA_CHECKSUMMED) == 0);
#endif /* TCP_CHECKSUM_ON_COPY */

  /* build TCP header */
  if (pbuf_add_header(p, TCP_HLEN)) {
   1a26e:	2114      	movs	r1, #20
   1a270:	4628      	mov	r0, r5
  seg->next = NULL;
   1a272:	f8c4 a000 	str.w	sl, [r4]
  if (pbuf_add_header(p, TCP_HLEN)) {
   1a276:	f7fd fa47 	bl	17708 <pbuf_add_header>
   1a27a:	4605      	mov	r5, r0
   1a27c:	bb28      	cbnz	r0, 1a2ca <tcp_create_segment.isra.2+0xa2>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_create_segment: no room for TCP header in pbuf.\n"));
    TCP_STATS_INC(tcp.err);
    tcp_seg_free(seg);
    return NULL;
  }
  seg->tcphdr = (struct tcp_hdr *)seg->p->payload;
   1a27e:	6863      	ldr	r3, [r4, #4]
  seg->tcphdr->src = lwip_htons(pcb->local_port);
   1a280:	f8b9 0000 	ldrh.w	r0, [r9]
  seg->tcphdr = (struct tcp_hdr *)seg->p->payload;
   1a284:	f8d3 9004 	ldr.w	r9, [r3, #4]
   1a288:	f8c4 900c 	str.w	r9, [r4, #12]
  seg->tcphdr->src = lwip_htons(pcb->local_port);
   1a28c:	f7f9 fa34 	bl	136f8 <lwip_htons>
   1a290:	f8a9 0000 	strh.w	r0, [r9]
  seg->tcphdr->dest = lwip_htons(pcb->remote_port);
   1a294:	f8b8 0000 	ldrh.w	r0, [r8]
   1a298:	f8d4 800c 	ldr.w	r8, [r4, #12]
   1a29c:	f7f9 fa2c 	bl	136f8 <lwip_htons>
   1a2a0:	f8a8 0002 	strh.w	r0, [r8, #2]
  seg->tcphdr->seqno = lwip_htonl(seqno);
   1a2a4:	980a      	ldr	r0, [sp, #40]	; 0x28
   1a2a6:	f8d4 800c 	ldr.w	r8, [r4, #12]
   1a2aa:	f7f9 fa29 	bl	13700 <lwip_htonl>
   1a2ae:	f8c8 0004 	str.w	r0, [r8, #4]
  /* ackno is set in tcp_output */
  TCPH_HDRLEN_FLAGS_SET(seg->tcphdr, (5 + optlen / 4), hdrflags);
   1a2b2:	ea47 0006 	orr.w	r0, r7, r6
   1a2b6:	68e6      	ldr	r6, [r4, #12]
   1a2b8:	f7f9 fa1e 	bl	136f8 <lwip_htons>
  /* wnd and chksum are set in tcp_output */
  seg->tcphdr->urgp = 0;
   1a2bc:	68e3      	ldr	r3, [r4, #12]
  TCPH_HDRLEN_FLAGS_SET(seg->tcphdr, (5 + optlen / 4), hdrflags);
   1a2be:	81b0      	strh	r0, [r6, #12]
  seg->tcphdr->urgp = 0;
   1a2c0:	749d      	strb	r5, [r3, #18]
   1a2c2:	74dd      	strb	r5, [r3, #19]
  return seg;
}
   1a2c4:	4620      	mov	r0, r4
   1a2c6:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    tcp_seg_free(seg);
   1a2ca:	4620      	mov	r0, r4
   1a2cc:	f7fe fbb2 	bl	18a34 <tcp_seg_free>
    return NULL;
   1a2d0:	4654      	mov	r4, sl
   1a2d2:	e7f7      	b.n	1a2c4 <tcp_create_segment.isra.2+0x9c>
    pbuf_free(p);
   1a2d4:	4628      	mov	r0, r5
   1a2d6:	f7fd fa89 	bl	177ec <pbuf_free>
   1a2da:	e7f3      	b.n	1a2c4 <tcp_create_segment.isra.2+0x9c>

0001a2dc <tcp_split_unsent_seg>:
 * @param pcb the tcp_pcb for which to split the unsent head
 * @param split the amount of payload to remain in the head
 */
err_t
tcp_split_unsent_seg(struct tcp_pcb *pcb, u16_t split)
{
   1a2dc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  struct pbuf *q;
#endif /* TCP_CHECKSUM_ON_COPY */

  LWIP_ASSERT("tcp_split_unsent_seg: invalid pcb", pcb != NULL);

  useg = pcb->unsent;
   1a2e0:	6ec6      	ldr	r6, [r0, #108]	; 0x6c
{
   1a2e2:	b083      	sub	sp, #12
  if (useg == NULL) {
   1a2e4:	b34e      	cbz	r6, 1a33a <tcp_split_unsent_seg+0x5e>
    return ERR_MEM;
  }

  if (split == 0) {
   1a2e6:	2900      	cmp	r1, #0
   1a2e8:	f000 808e 	beq.w	1a408 <tcp_split_unsent_seg+0x12c>
    LWIP_ASSERT("Can't split segment into length 0", 0);
    return ERR_VAL;
  }

  if (useg->len <= split) {
   1a2ec:	8932      	ldrh	r2, [r6, #8]
   1a2ee:	4291      	cmp	r1, r2
   1a2f0:	d228      	bcs.n	1a344 <tcp_split_unsent_seg+0x68>
   * to split this packet so we may actually exceed the max value by
   * one!
   */
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue: split_unsent_seg: %u\n", (unsigned int)pcb->snd_queuelen));

  optflags = useg->flags;
   1a2f2:	f896 800a 	ldrb.w	r8, [r6, #10]
#if TCP_CHECKSUM_ON_COPY
  /* Remove since checksum is not stored until after tcp_create_segment() */
  optflags &= ~TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */
  optlen = LWIP_TCP_OPT_LENGTH(optflags);
  remainder = useg->len - split;
   1a2f6:	1a52      	subs	r2, r2, r1
  optlen = LWIP_TCP_OPT_LENGTH(optflags);
   1a2f8:	f018 0701 	ands.w	r7, r8, #1
   1a2fc:	bf18      	it	ne
   1a2fe:	2704      	movne	r7, #4
  remainder = useg->len - split;
   1a300:	b294      	uxth	r4, r2
   1a302:	460d      	mov	r5, r1

  /* Create new pbuf for the remainder of the split */
  p = pbuf_alloc(PBUF_TRANSPORT, remainder + optlen, PBUF_RAM);
   1a304:	19e1      	adds	r1, r4, r7
   1a306:	4681      	mov	r9, r0
   1a308:	b289      	uxth	r1, r1
   1a30a:	f44f 7220 	mov.w	r2, #640	; 0x280
   1a30e:	2036      	movs	r0, #54	; 0x36
   1a310:	f7fd f8c0 	bl	17494 <pbuf_alloc>
  if (p == NULL) {
   1a314:	4682      	mov	sl, r0
   1a316:	b180      	cbz	r0, 1a33a <tcp_split_unsent_seg+0x5e>
                ("tcp_split_unsent_seg: could not allocate memory for pbuf remainder %u\n", remainder));
    goto memerr;
  }

  /* Offset into the original pbuf is past TCP/IP headers, options, and split amount */
  offset = useg->p->tot_len - useg->len + split;
   1a318:	6870      	ldr	r0, [r6, #4]
   1a31a:	8932      	ldrh	r2, [r6, #8]
   1a31c:	8903      	ldrh	r3, [r0, #8]
  /* Copy remainder into new pbuf, headers and options will not be filled out */
  if (pbuf_copy_partial(useg->p, (u8_t *)p->payload + optlen, remainder, offset ) != remainder) {
   1a31e:	f8da 1004 	ldr.w	r1, [sl, #4]
  offset = useg->p->tot_len - useg->len + split;
   1a322:	1a9b      	subs	r3, r3, r2
   1a324:	442b      	add	r3, r5
  if (pbuf_copy_partial(useg->p, (u8_t *)p->payload + optlen, remainder, offset ) != remainder) {
   1a326:	b29b      	uxth	r3, r3
   1a328:	4439      	add	r1, r7
   1a32a:	4622      	mov	r2, r4
   1a32c:	f7fd fb34 	bl	17998 <pbuf_copy_partial>
   1a330:	4284      	cmp	r4, r0
   1a332:	d00b      	beq.n	1a34c <tcp_split_unsent_seg+0x70>
memerr:
  TCP_STATS_INC(tcp.memerr);

  LWIP_ASSERT("seg == NULL", seg == NULL);
  if (p != NULL) {
    pbuf_free(p);
   1a334:	4650      	mov	r0, sl
   1a336:	f7fd fa59 	bl	177ec <pbuf_free>
  }

  return ERR_MEM;
   1a33a:	f04f 30ff 	mov.w	r0, #4294967295
}
   1a33e:	b003      	add	sp, #12
   1a340:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    return ERR_OK;
   1a344:	2000      	movs	r0, #0
}
   1a346:	b003      	add	sp, #12
   1a348:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  split_flags = TCPH_FLAGS(useg->tcphdr);
   1a34c:	68f3      	ldr	r3, [r6, #12]
   1a34e:	8998      	ldrh	r0, [r3, #12]
   1a350:	f7f9 f9d2 	bl	136f8 <lwip_htons>
   1a354:	b2c0      	uxtb	r0, r0
  if (split_flags & TCP_PSH) {
   1a356:	f010 0b08 	ands.w	fp, r0, #8
   1a35a:	d14f      	bne.n	1a3fc <tcp_split_unsent_seg+0x120>
  split_flags = TCPH_FLAGS(useg->tcphdr);
   1a35c:	f000 073f 	and.w	r7, r0, #63	; 0x3f
   1a360:	2301      	movs	r3, #1
  if (split_flags & TCP_FIN) {
   1a362:	07fa      	lsls	r2, r7, #31
    remainder_flags |= TCP_FIN;
   1a364:	bf48      	it	mi
   1a366:	469b      	movmi	fp, r3
  seg = tcp_create_segment(pcb, p, remainder_flags, lwip_ntohl(useg->tcphdr->seqno) + split, optflags);
   1a368:	68f3      	ldr	r3, [r6, #12]
   1a36a:	6858      	ldr	r0, [r3, #4]
    split_flags &= ~TCP_FIN;
   1a36c:	bf48      	it	mi
   1a36e:	f007 07fe 	andmi.w	r7, r7, #254	; 0xfe
  seg = tcp_create_segment(pcb, p, remainder_flags, lwip_ntohl(useg->tcphdr->seqno) + split, optflags);
   1a372:	f7f9 f9c5 	bl	13700 <lwip_htonl>
   1a376:	4428      	add	r0, r5
   1a378:	e88d 0101 	stmia.w	sp, {r0, r8}
   1a37c:	465b      	mov	r3, fp
   1a37e:	4652      	mov	r2, sl
   1a380:	f109 0118 	add.w	r1, r9, #24
   1a384:	f109 0016 	add.w	r0, r9, #22
   1a388:	f7ff ff4e 	bl	1a228 <tcp_create_segment.isra.2>
  if (seg == NULL) {
   1a38c:	4605      	mov	r5, r0
   1a38e:	2800      	cmp	r0, #0
   1a390:	d0d0      	beq.n	1a334 <tcp_split_unsent_seg+0x58>
  pcb->snd_queuelen -= pbuf_clen(useg->p);
   1a392:	6870      	ldr	r0, [r6, #4]
   1a394:	f7fd fa60 	bl	17858 <pbuf_clen>
  pbuf_realloc(useg->p, useg->p->tot_len - remainder);
   1a398:	6872      	ldr	r2, [r6, #4]
  pcb->snd_queuelen -= pbuf_clen(useg->p);
   1a39a:	f8b9 3066 	ldrh.w	r3, [r9, #102]	; 0x66
  pbuf_realloc(useg->p, useg->p->tot_len - remainder);
   1a39e:	8911      	ldrh	r1, [r2, #8]
  pcb->snd_queuelen -= pbuf_clen(useg->p);
   1a3a0:	1a18      	subs	r0, r3, r0
  pbuf_realloc(useg->p, useg->p->tot_len - remainder);
   1a3a2:	1b09      	subs	r1, r1, r4
   1a3a4:	b289      	uxth	r1, r1
  pcb->snd_queuelen -= pbuf_clen(useg->p);
   1a3a6:	f8a9 0066 	strh.w	r0, [r9, #102]	; 0x66
  pbuf_realloc(useg->p, useg->p->tot_len - remainder);
   1a3aa:	4610      	mov	r0, r2
   1a3ac:	f7fd f954 	bl	17658 <pbuf_realloc>
  useg->len -= remainder;
   1a3b0:	8933      	ldrh	r3, [r6, #8]
  TCPH_SET_FLAG(useg->tcphdr, split_flags);
   1a3b2:	f8d6 800c 	ldr.w	r8, [r6, #12]
  useg->len -= remainder;
   1a3b6:	1b1c      	subs	r4, r3, r4
   1a3b8:	8134      	strh	r4, [r6, #8]
  TCPH_SET_FLAG(useg->tcphdr, split_flags);
   1a3ba:	4638      	mov	r0, r7
   1a3bc:	f8b8 400c 	ldrh.w	r4, [r8, #12]
   1a3c0:	f7f9 f99a 	bl	136f8 <lwip_htons>
   1a3c4:	4320      	orrs	r0, r4
   1a3c6:	f8a8 000c 	strh.w	r0, [r8, #12]
  pcb->snd_queuelen += pbuf_clen(useg->p);
   1a3ca:	6870      	ldr	r0, [r6, #4]
   1a3cc:	f7fd fa44 	bl	17858 <pbuf_clen>
   1a3d0:	f8b9 3066 	ldrh.w	r3, [r9, #102]	; 0x66
   1a3d4:	4418      	add	r0, r3
   1a3d6:	f8a9 0066 	strh.w	r0, [r9, #102]	; 0x66
  pcb->snd_queuelen += pbuf_clen(seg->p);
   1a3da:	6868      	ldr	r0, [r5, #4]
   1a3dc:	f7fd fa3c 	bl	17858 <pbuf_clen>
   1a3e0:	f8b9 3066 	ldrh.w	r3, [r9, #102]	; 0x66
  seg->next = useg->next;
   1a3e4:	6832      	ldr	r2, [r6, #0]
  pcb->snd_queuelen += pbuf_clen(seg->p);
   1a3e6:	4418      	add	r0, r3
   1a3e8:	f8a9 0066 	strh.w	r0, [r9, #102]	; 0x66
  seg->next = useg->next;
   1a3ec:	602a      	str	r2, [r5, #0]
  useg->next = seg;
   1a3ee:	6035      	str	r5, [r6, #0]
  if (seg->next == NULL) {
   1a3f0:	6828      	ldr	r0, [r5, #0]
   1a3f2:	2800      	cmp	r0, #0
   1a3f4:	d1a6      	bne.n	1a344 <tcp_split_unsent_seg+0x68>
    pcb->unsent_oversize = 0;
   1a3f6:	f8a9 0068 	strh.w	r0, [r9, #104]	; 0x68
   1a3fa:	e7a0      	b.n	1a33e <tcp_split_unsent_seg+0x62>
    split_flags &= ~TCP_PSH;
   1a3fc:	f000 0737 	and.w	r7, r0, #55	; 0x37
   1a400:	2309      	movs	r3, #9
    remainder_flags |= TCP_PSH;
   1a402:	f04f 0b08 	mov.w	fp, #8
   1a406:	e7ac      	b.n	1a362 <tcp_split_unsent_seg+0x86>
    return ERR_VAL;
   1a408:	f06f 0005 	mvn.w	r0, #5
   1a40c:	e797      	b.n	1a33e <tcp_split_unsent_seg+0x62>
   1a40e:	bf00      	nop

0001a410 <tcp_send_fin>:
 * @param pcb the tcp_pcb over which to send a segment
 * @return ERR_OK if sent, another err_t otherwise
 */
err_t
tcp_send_fin(struct tcp_pcb *pcb)
{
   1a410:	b5f0      	push	{r4, r5, r6, r7, lr}
  LWIP_ASSERT("tcp_send_fin: invalid pcb", pcb != NULL);

  /* first, try to add the fin to the last unsent segment */
  if (pcb->unsent != NULL) {
   1a412:	6ec4      	ldr	r4, [r0, #108]	; 0x6c
{
   1a414:	b083      	sub	sp, #12
   1a416:	4605      	mov	r5, r0
  if (pcb->unsent != NULL) {
   1a418:	b90c      	cbnz	r4, 1a41e <tcp_send_fin+0xe>
   1a41a:	e00a      	b.n	1a432 <tcp_send_fin+0x22>
   1a41c:	461c      	mov	r4, r3
    struct tcp_seg *last_unsent;
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
   1a41e:	6823      	ldr	r3, [r4, #0]
   1a420:	2b00      	cmp	r3, #0
   1a422:	d1fb      	bne.n	1a41c <tcp_send_fin+0xc>
         last_unsent = last_unsent->next);

    if ((TCPH_FLAGS(last_unsent->tcphdr) & (TCP_SYN | TCP_FIN | TCP_RST)) == 0) {
   1a424:	68e3      	ldr	r3, [r4, #12]
   1a426:	8998      	ldrh	r0, [r3, #12]
   1a428:	f7f9 f966 	bl	136f8 <lwip_htons>
   1a42c:	f010 0607 	ands.w	r6, r0, #7
   1a430:	d031      	beq.n	1a496 <tcp_send_fin+0x86>
  }
#endif /* LWIP_TCP_TIMESTAMPS */
  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);

  /* Allocate pbuf with room for TCP header + options */
  if ((p = pbuf_alloc(PBUF_TRANSPORT, optlen, PBUF_RAM)) == NULL) {
   1a432:	f44f 7220 	mov.w	r2, #640	; 0x280
   1a436:	2100      	movs	r1, #0
   1a438:	2036      	movs	r0, #54	; 0x36
   1a43a:	f7fd f82b 	bl	17494 <pbuf_alloc>
   1a43e:	2800      	cmp	r0, #0
   1a440:	d039      	beq.n	1a4b6 <tcp_send_fin+0xa6>
  }
  LWIP_ASSERT("tcp_enqueue_flags: check that first pbuf can hold optlen",
              (p->len >= optlen));

  /* Allocate memory for tcp_seg, and fill in fields. */
  if ((seg = tcp_create_segment(pcb, p, flags, pcb->snd_lbb, optflags)) == NULL) {
   1a442:	6deb      	ldr	r3, [r5, #92]	; 0x5c
   1a444:	9300      	str	r3, [sp, #0]
   1a446:	2200      	movs	r2, #0
   1a448:	9201      	str	r2, [sp, #4]
   1a44a:	2301      	movs	r3, #1
   1a44c:	4602      	mov	r2, r0
   1a44e:	f105 0118 	add.w	r1, r5, #24
   1a452:	f105 0016 	add.w	r0, r5, #22
   1a456:	f7ff fee7 	bl	1a228 <tcp_create_segment.isra.2>
   1a45a:	b360      	cbz	r0, 1a4b6 <tcp_send_fin+0xa6>
               lwip_ntohl(seg->tcphdr->seqno),
               lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg),
               (u16_t)flags));

  /* Now append seg to pcb->unsent queue */
  if (pcb->unsent == NULL) {
   1a45c:	6eea      	ldr	r2, [r5, #108]	; 0x6c
   1a45e:	b90a      	cbnz	r2, 1a464 <tcp_send_fin+0x54>
   1a460:	e027      	b.n	1a4b2 <tcp_send_fin+0xa2>
    pcb->unsent = seg;
  } else {
    struct tcp_seg *useg;
    for (useg = pcb->unsent; useg->next != NULL; useg = useg->next);
   1a462:	461a      	mov	r2, r3
   1a464:	6813      	ldr	r3, [r2, #0]
   1a466:	2b00      	cmp	r3, #0
   1a468:	d1fb      	bne.n	1a462 <tcp_send_fin+0x52>
    useg->next = seg;
   1a46a:	6010      	str	r0, [r2, #0]
  pcb->unsent_oversize = 0;
#endif /* TCP_OVERSIZE */

  /* SYN and FIN bump the sequence number */
  if ((flags & TCP_SYN) || (flags & TCP_FIN)) {
    pcb->snd_lbb++;
   1a46c:	6dea      	ldr	r2, [r5, #92]	; 0x5c
    /* optlen does not influence snd_buf */
  }
  if (flags & TCP_FIN) {
    tcp_set_flags(pcb, TF_FIN);
   1a46e:	8b6b      	ldrh	r3, [r5, #26]
  }

  /* update number of segments on the queues */
  pcb->snd_queuelen += pbuf_clen(seg->p);
   1a470:	6840      	ldr	r0, [r0, #4]
    tcp_set_flags(pcb, TF_FIN);
   1a472:	f043 0320 	orr.w	r3, r3, #32
    pcb->snd_lbb++;
   1a476:	3201      	adds	r2, #1
  pcb->unsent_oversize = 0;
   1a478:	2400      	movs	r4, #0
    tcp_set_flags(pcb, TF_FIN);
   1a47a:	836b      	strh	r3, [r5, #26]
    pcb->snd_lbb++;
   1a47c:	65ea      	str	r2, [r5, #92]	; 0x5c
  pcb->unsent_oversize = 0;
   1a47e:	f8a5 4068 	strh.w	r4, [r5, #104]	; 0x68
  pcb->snd_queuelen += pbuf_clen(seg->p);
   1a482:	f7fd f9e9 	bl	17858 <pbuf_clen>
   1a486:	f8b5 3066 	ldrh.w	r3, [r5, #102]	; 0x66
   1a48a:	4403      	add	r3, r0
   1a48c:	f8a5 3066 	strh.w	r3, [r5, #102]	; 0x66
  if (pcb->snd_queuelen != 0) {
    LWIP_ASSERT("tcp_enqueue_flags: invalid queue length",
                pcb->unacked != NULL || pcb->unsent != NULL);
  }

  return ERR_OK;
   1a490:	4620      	mov	r0, r4
}
   1a492:	b003      	add	sp, #12
   1a494:	bdf0      	pop	{r4, r5, r6, r7, pc}
      TCPH_SET_FLAG(last_unsent->tcphdr, TCP_FIN);
   1a496:	68e7      	ldr	r7, [r4, #12]
   1a498:	2001      	movs	r0, #1
   1a49a:	89bc      	ldrh	r4, [r7, #12]
   1a49c:	f7f9 f92c 	bl	136f8 <lwip_htons>
      tcp_set_flags(pcb, TF_FIN);
   1a4a0:	8b6b      	ldrh	r3, [r5, #26]
      TCPH_SET_FLAG(last_unsent->tcphdr, TCP_FIN);
   1a4a2:	4320      	orrs	r0, r4
   1a4a4:	81b8      	strh	r0, [r7, #12]
      tcp_set_flags(pcb, TF_FIN);
   1a4a6:	f043 0320 	orr.w	r3, r3, #32
      return ERR_OK;
   1a4aa:	4630      	mov	r0, r6
      tcp_set_flags(pcb, TF_FIN);
   1a4ac:	836b      	strh	r3, [r5, #26]
}
   1a4ae:	b003      	add	sp, #12
   1a4b0:	bdf0      	pop	{r4, r5, r6, r7, pc}
    pcb->unsent = seg;
   1a4b2:	66e8      	str	r0, [r5, #108]	; 0x6c
   1a4b4:	e7da      	b.n	1a46c <tcp_send_fin+0x5c>
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
   1a4b6:	8b6b      	ldrh	r3, [r5, #26]
   1a4b8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
   1a4bc:	836b      	strh	r3, [r5, #26]
    return ERR_MEM;
   1a4be:	f04f 30ff 	mov.w	r0, #4294967295
   1a4c2:	e7e6      	b.n	1a492 <tcp_send_fin+0x82>

0001a4c4 <tcp_enqueue_flags>:
{
   1a4c4:	b570      	push	{r4, r5, r6, lr}
   1a4c6:	460d      	mov	r5, r1
  if (flags & TCP_SYN) {
   1a4c8:	f011 0102 	ands.w	r1, r1, #2
{
   1a4cc:	b082      	sub	sp, #8
   1a4ce:	4604      	mov	r4, r0
   1a4d0:	bf18      	it	ne
   1a4d2:	2104      	movne	r1, #4
  if ((p = pbuf_alloc(PBUF_TRANSPORT, optlen, PBUF_RAM)) == NULL) {
   1a4d4:	f44f 7220 	mov.w	r2, #640	; 0x280
   1a4d8:	f04f 0036 	mov.w	r0, #54	; 0x36
  u8_t optflags = 0;
   1a4dc:	bf0c      	ite	eq
   1a4de:	460e      	moveq	r6, r1
    optflags = TF_SEG_OPTS_MSS;
   1a4e0:	2601      	movne	r6, #1
  if ((p = pbuf_alloc(PBUF_TRANSPORT, optlen, PBUF_RAM)) == NULL) {
   1a4e2:	f7fc ffd7 	bl	17494 <pbuf_alloc>
   1a4e6:	2800      	cmp	r0, #0
   1a4e8:	d02f      	beq.n	1a54a <tcp_enqueue_flags+0x86>
  if ((seg = tcp_create_segment(pcb, p, flags, pcb->snd_lbb, optflags)) == NULL) {
   1a4ea:	6de3      	ldr	r3, [r4, #92]	; 0x5c
   1a4ec:	9300      	str	r3, [sp, #0]
   1a4ee:	4602      	mov	r2, r0
   1a4f0:	9601      	str	r6, [sp, #4]
   1a4f2:	462b      	mov	r3, r5
   1a4f4:	f104 0118 	add.w	r1, r4, #24
   1a4f8:	f104 0016 	add.w	r0, r4, #22
   1a4fc:	f7ff fe94 	bl	1a228 <tcp_create_segment.isra.2>
   1a500:	b318      	cbz	r0, 1a54a <tcp_enqueue_flags+0x86>
  if (pcb->unsent == NULL) {
   1a502:	6ee2      	ldr	r2, [r4, #108]	; 0x6c
   1a504:	b90a      	cbnz	r2, 1a50a <tcp_enqueue_flags+0x46>
   1a506:	e01e      	b.n	1a546 <tcp_enqueue_flags+0x82>
   1a508:	461a      	mov	r2, r3
    for (useg = pcb->unsent; useg->next != NULL; useg = useg->next);
   1a50a:	6813      	ldr	r3, [r2, #0]
   1a50c:	2b00      	cmp	r3, #0
   1a50e:	d1fb      	bne.n	1a508 <tcp_enqueue_flags+0x44>
    useg->next = seg;
   1a510:	6010      	str	r0, [r2, #0]
  pcb->unsent_oversize = 0;
   1a512:	2300      	movs	r3, #0
  if ((flags & TCP_SYN) || (flags & TCP_FIN)) {
   1a514:	07aa      	lsls	r2, r5, #30
  pcb->unsent_oversize = 0;
   1a516:	f8a4 3068 	strh.w	r3, [r4, #104]	; 0x68
  if ((flags & TCP_SYN) || (flags & TCP_FIN)) {
   1a51a:	d002      	beq.n	1a522 <tcp_enqueue_flags+0x5e>
    pcb->snd_lbb++;
   1a51c:	6de3      	ldr	r3, [r4, #92]	; 0x5c
   1a51e:	3301      	adds	r3, #1
   1a520:	65e3      	str	r3, [r4, #92]	; 0x5c
  if (flags & TCP_FIN) {
   1a522:	07eb      	lsls	r3, r5, #31
   1a524:	d40a      	bmi.n	1a53c <tcp_enqueue_flags+0x78>
  pcb->snd_queuelen += pbuf_clen(seg->p);
   1a526:	6840      	ldr	r0, [r0, #4]
   1a528:	f7fd f996 	bl	17858 <pbuf_clen>
   1a52c:	f8b4 3066 	ldrh.w	r3, [r4, #102]	; 0x66
   1a530:	4418      	add	r0, r3
   1a532:	f8a4 0066 	strh.w	r0, [r4, #102]	; 0x66
  return ERR_OK;
   1a536:	2000      	movs	r0, #0
}
   1a538:	b002      	add	sp, #8
   1a53a:	bd70      	pop	{r4, r5, r6, pc}
    tcp_set_flags(pcb, TF_FIN);
   1a53c:	8b63      	ldrh	r3, [r4, #26]
   1a53e:	f043 0320 	orr.w	r3, r3, #32
   1a542:	8363      	strh	r3, [r4, #26]
   1a544:	e7ef      	b.n	1a526 <tcp_enqueue_flags+0x62>
    pcb->unsent = seg;
   1a546:	66e0      	str	r0, [r4, #108]	; 0x6c
   1a548:	e7e3      	b.n	1a512 <tcp_enqueue_flags+0x4e>
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
   1a54a:	8b63      	ldrh	r3, [r4, #26]
   1a54c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
   1a550:	8363      	strh	r3, [r4, #26]
    return ERR_MEM;
   1a552:	f04f 30ff 	mov.w	r0, #4294967295
   1a556:	e7ef      	b.n	1a538 <tcp_enqueue_flags+0x74>

0001a558 <tcp_rexmit_rto_prepare>:
{
  struct tcp_seg *seg;

  LWIP_ASSERT("tcp_rexmit_rto_prepare: invalid pcb", pcb != NULL);

  if (pcb->unacked == NULL) {
   1a558:	6f02      	ldr	r2, [r0, #112]	; 0x70
   1a55a:	b352      	cbz	r2, 1a5b2 <tcp_rexmit_rto_prepare+0x5a>
{
   1a55c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1a55e:	4615      	mov	r5, r2
  if (seg->p->ref != 1) {
   1a560:	686b      	ldr	r3, [r5, #4]

  /* Move all unacked segments to the head of the unsent queue.
     However, give up if any of the unsent pbufs are still referenced by the
     netif driver due to deferred transmission. No point loading the link further
     if it is struggling to flush its buffered writes. */
  for (seg = pcb->unacked; seg->next != NULL; seg = seg->next) {
   1a562:	682c      	ldr	r4, [r5, #0]
  if (seg->p->ref != 1) {
   1a564:	7b9b      	ldrb	r3, [r3, #14]
  for (seg = pcb->unacked; seg->next != NULL; seg = seg->next) {
   1a566:	b12c      	cbz	r4, 1a574 <tcp_rexmit_rto_prepare+0x1c>
  if (seg->p->ref != 1) {
   1a568:	2b01      	cmp	r3, #1
   1a56a:	4625      	mov	r5, r4
   1a56c:	d0f8      	beq.n	1a560 <tcp_rexmit_rto_prepare+0x8>
    return ERR_VAL;
   1a56e:	f06f 0005 	mvn.w	r0, #5
   1a572:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  if (seg->p->ref != 1) {
   1a574:	2b01      	cmp	r3, #1
   1a576:	d1fa      	bne.n	1a56e <tcp_rexmit_rto_prepare+0x16>
  pcb->unsent = pcb->unacked;
  /* unacked queue is now empty */
  pcb->unacked = NULL;

  /* Mark RTO in-progress */
  tcp_set_flags(pcb, TF_RTO);
   1a578:	8b43      	ldrh	r3, [r0, #26]
  /* Record the next byte following retransmit */
  pcb->rto_end = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
   1a57a:	68e9      	ldr	r1, [r5, #12]
   1a57c:	4606      	mov	r6, r0
  tcp_set_flags(pcb, TF_RTO);
   1a57e:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
  seg->next = pcb->unsent;
   1a582:	6ec0      	ldr	r0, [r0, #108]	; 0x6c
   1a584:	6028      	str	r0, [r5, #0]
  tcp_set_flags(pcb, TF_RTO);
   1a586:	8373      	strh	r3, [r6, #26]
  pcb->unsent = pcb->unacked;
   1a588:	66f2      	str	r2, [r6, #108]	; 0x6c
  pcb->unacked = NULL;
   1a58a:	6734      	str	r4, [r6, #112]	; 0x70
  pcb->rto_end = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
   1a58c:	6848      	ldr	r0, [r1, #4]
   1a58e:	f7f9 f8b7 	bl	13700 <lwip_htonl>
   1a592:	68eb      	ldr	r3, [r5, #12]
   1a594:	892d      	ldrh	r5, [r5, #8]
   1a596:	4607      	mov	r7, r0
   1a598:	8998      	ldrh	r0, [r3, #12]
   1a59a:	f7f9 f8ad 	bl	136f8 <lwip_htons>
   1a59e:	f010 0003 	ands.w	r0, r0, #3
   1a5a2:	442f      	add	r7, r5
   1a5a4:	bf18      	it	ne
   1a5a6:	2001      	movne	r0, #1
   1a5a8:	4438      	add	r0, r7
   1a5aa:	64f0      	str	r0, [r6, #76]	; 0x4c
  /* Don't take any RTT measurements after retransmitting. */
  pcb->rttest = 0;
   1a5ac:	6374      	str	r4, [r6, #52]	; 0x34

  return ERR_OK;
   1a5ae:	4620      	mov	r0, r4
}
   1a5b0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    return ERR_VAL;
   1a5b2:	f06f 0005 	mvn.w	r0, #5
   1a5b6:	4770      	bx	lr

0001a5b8 <tcp_rexmit>:
 *
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
err_t
tcp_rexmit(struct tcp_pcb *pcb)
{
   1a5b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  struct tcp_seg *seg;
  struct tcp_seg **cur_seg;

  LWIP_ASSERT("tcp_rexmit: invalid pcb", pcb != NULL);

  if (pcb->unacked == NULL) {
   1a5ba:	6f06      	ldr	r6, [r0, #112]	; 0x70
   1a5bc:	b11e      	cbz	r6, 1a5c6 <tcp_rexmit+0xe>
  if (seg->p->ref != 1) {
   1a5be:	6873      	ldr	r3, [r6, #4]
   1a5c0:	7b9b      	ldrb	r3, [r3, #14]
   1a5c2:	2b01      	cmp	r3, #1
   1a5c4:	d002      	beq.n	1a5cc <tcp_rexmit+0x14>
    return ERR_VAL;
   1a5c6:	f06f 0005 	mvn.w	r0, #5
   1a5ca:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  /* Move the first unacked segment to the unsent queue */
  /* Keep the unsent queue sorted. */
  pcb->unacked = seg->next;

  cur_seg = &(pcb->unsent);
  while (*cur_seg &&
   1a5cc:	6ec3      	ldr	r3, [r0, #108]	; 0x6c
  pcb->unacked = seg->next;
   1a5ce:	6832      	ldr	r2, [r6, #0]
   1a5d0:	6702      	str	r2, [r0, #112]	; 0x70
   1a5d2:	4607      	mov	r7, r0
  cur_seg = &(pcb->unsent);
   1a5d4:	f100 056c 	add.w	r5, r0, #108	; 0x6c
  while (*cur_seg &&
   1a5d8:	b91b      	cbnz	r3, 1a5e2 <tcp_rexmit+0x2a>
   1a5da:	e00f      	b.n	1a5fc <tcp_rexmit+0x44>
         TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
    cur_seg = &((*cur_seg)->next );
   1a5dc:	682d      	ldr	r5, [r5, #0]
  while (*cur_seg &&
   1a5de:	682b      	ldr	r3, [r5, #0]
   1a5e0:	b163      	cbz	r3, 1a5fc <tcp_rexmit+0x44>
         TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
   1a5e2:	68db      	ldr	r3, [r3, #12]
   1a5e4:	6858      	ldr	r0, [r3, #4]
   1a5e6:	f7f9 f88b 	bl	13700 <lwip_htonl>
   1a5ea:	68f3      	ldr	r3, [r6, #12]
   1a5ec:	4604      	mov	r4, r0
   1a5ee:	6858      	ldr	r0, [r3, #4]
   1a5f0:	f7f9 f886 	bl	13700 <lwip_htonl>
   1a5f4:	1a20      	subs	r0, r4, r0
  while (*cur_seg &&
   1a5f6:	2800      	cmp	r0, #0
   1a5f8:	dbf0      	blt.n	1a5dc <tcp_rexmit+0x24>
   1a5fa:	682b      	ldr	r3, [r5, #0]
  }
  seg->next = *cur_seg;
   1a5fc:	6033      	str	r3, [r6, #0]
  *cur_seg = seg;
   1a5fe:	602e      	str	r6, [r5, #0]
#if TCP_OVERSIZE
  if (seg->next == NULL) {
   1a600:	6833      	ldr	r3, [r6, #0]
   1a602:	b15b      	cbz	r3, 1a61c <tcp_rexmit+0x64>
    /* the retransmitted segment is last in unsent, so reset unsent_oversize */
    pcb->unsent_oversize = 0;
  }
#endif /* TCP_OVERSIZE */

  if (pcb->nrtx < 0xFF) {
   1a604:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
   1a608:	2bff      	cmp	r3, #255	; 0xff
    ++pcb->nrtx;
   1a60a:	bf18      	it	ne
   1a60c:	3301      	addne	r3, #1
  }

  /* Don't take any rtt measurements after retransmitting. */
  pcb->rttest = 0;
   1a60e:	f04f 0000 	mov.w	r0, #0
    ++pcb->nrtx;
   1a612:	bf18      	it	ne
   1a614:	f887 3042 	strbne.w	r3, [r7, #66]	; 0x42
  pcb->rttest = 0;
   1a618:	6378      	str	r0, [r7, #52]	; 0x34

  /* Do the actual retransmission. */
  MIB2_STATS_INC(mib2.tcpretranssegs);
  /* No need to call tcp_output: we are always called from tcp_input()
     and thus tcp_output directly returns. */
  return ERR_OK;
   1a61a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    pcb->unsent_oversize = 0;
   1a61c:	f8a7 3068 	strh.w	r3, [r7, #104]	; 0x68
   1a620:	e7f0      	b.n	1a604 <tcp_rexmit+0x4c>
   1a622:	bf00      	nop

0001a624 <tcp_rexmit_fast>:
 *
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
void
tcp_rexmit_fast(struct tcp_pcb *pcb)
{
   1a624:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  LWIP_ASSERT("tcp_rexmit_fast: invalid pcb", pcb != NULL);

  if (pcb->unacked != NULL && !(pcb->flags & TF_INFR)) {
   1a626:	6f07      	ldr	r7, [r0, #112]	; 0x70
   1a628:	b117      	cbz	r7, 1a630 <tcp_rexmit_fast+0xc>
   1a62a:	8b42      	ldrh	r2, [r0, #26]
   1a62c:	0753      	lsls	r3, r2, #29
   1a62e:	d500      	bpl.n	1a632 <tcp_rexmit_fast+0xe>
   1a630:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  if (seg->p->ref != 1) {
   1a632:	687b      	ldr	r3, [r7, #4]
   1a634:	7b9b      	ldrb	r3, [r3, #14]
   1a636:	2b01      	cmp	r3, #1
   1a638:	d1fa      	bne.n	1a630 <tcp_rexmit_fast+0xc>
  while (*cur_seg &&
   1a63a:	6ec3      	ldr	r3, [r0, #108]	; 0x6c
  pcb->unacked = seg->next;
   1a63c:	6839      	ldr	r1, [r7, #0]
   1a63e:	6701      	str	r1, [r0, #112]	; 0x70
   1a640:	4606      	mov	r6, r0
  cur_seg = &(pcb->unsent);
   1a642:	f100 056c 	add.w	r5, r0, #108	; 0x6c
  while (*cur_seg &&
   1a646:	b923      	cbnz	r3, 1a652 <tcp_rexmit_fast+0x2e>
   1a648:	e011      	b.n	1a66e <tcp_rexmit_fast+0x4a>
    cur_seg = &((*cur_seg)->next );
   1a64a:	682d      	ldr	r5, [r5, #0]
  while (*cur_seg &&
   1a64c:	682b      	ldr	r3, [r5, #0]
   1a64e:	2b00      	cmp	r3, #0
   1a650:	d037      	beq.n	1a6c2 <tcp_rexmit_fast+0x9e>
         TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
   1a652:	68db      	ldr	r3, [r3, #12]
   1a654:	6858      	ldr	r0, [r3, #4]
   1a656:	f7f9 f853 	bl	13700 <lwip_htonl>
   1a65a:	68fb      	ldr	r3, [r7, #12]
   1a65c:	4604      	mov	r4, r0
   1a65e:	6858      	ldr	r0, [r3, #4]
   1a660:	f7f9 f84e 	bl	13700 <lwip_htonl>
   1a664:	1a20      	subs	r0, r4, r0
  while (*cur_seg &&
   1a666:	2800      	cmp	r0, #0
   1a668:	dbef      	blt.n	1a64a <tcp_rexmit_fast+0x26>
   1a66a:	8b72      	ldrh	r2, [r6, #26]
   1a66c:	682b      	ldr	r3, [r5, #0]
  seg->next = *cur_seg;
   1a66e:	603b      	str	r3, [r7, #0]
  *cur_seg = seg;
   1a670:	602f      	str	r7, [r5, #0]
  if (seg->next == NULL) {
   1a672:	683b      	ldr	r3, [r7, #0]
   1a674:	b33b      	cbz	r3, 1a6c6 <tcp_rexmit_fast+0xa2>
  if (pcb->nrtx < 0xFF) {
   1a676:	f896 3042 	ldrb.w	r3, [r6, #66]	; 0x42
                 (u16_t)pcb->dupacks, pcb->lastack,
                 lwip_ntohl(pcb->unacked->tcphdr->seqno)));
    if (tcp_rexmit(pcb) == ERR_OK) {
      /* Set ssthresh to half of the minimum of the current
       * cwnd and the advertised window */
      pcb->ssthresh = LWIP_MIN(pcb->cwnd, pcb->snd_wnd) / 2;
   1a67a:	f8b6 1048 	ldrh.w	r1, [r6, #72]	; 0x48
  if (pcb->nrtx < 0xFF) {
   1a67e:	2bff      	cmp	r3, #255	; 0xff
    ++pcb->nrtx;
   1a680:	bf1c      	itt	ne
   1a682:	3301      	addne	r3, #1
   1a684:	f886 3042 	strbne.w	r3, [r6, #66]	; 0x42
      pcb->ssthresh = LWIP_MIN(pcb->cwnd, pcb->snd_wnd) / 2;
   1a688:	f8b6 3060 	ldrh.w	r3, [r6, #96]	; 0x60
   1a68c:	4299      	cmp	r1, r3
   1a68e:	bf38      	it	cc
   1a690:	084b      	lsrcc	r3, r1, #1

      /* The minimum value for ssthresh should be 2 MSS */
      if (pcb->ssthresh < (2U * pcb->mss)) {
   1a692:	8e71      	ldrh	r1, [r6, #50]	; 0x32
  pcb->rttest = 0;
   1a694:	f04f 0000 	mov.w	r0, #0
      pcb->ssthresh = LWIP_MIN(pcb->cwnd, pcb->snd_wnd) / 2;
   1a698:	bf28      	it	cs
   1a69a:	085b      	lsrcs	r3, r3, #1
  pcb->rttest = 0;
   1a69c:	6370      	str	r0, [r6, #52]	; 0x34
      if (pcb->ssthresh < (2U * pcb->mss)) {
   1a69e:	0048      	lsls	r0, r1, #1
   1a6a0:	4283      	cmp	r3, r0
      pcb->ssthresh = LWIP_MIN(pcb->cwnd, pcb->snd_wnd) / 2;
   1a6a2:	f8a6 304a 	strh.w	r3, [r6, #74]	; 0x4a
                     " should be min 2 mss %"U16_F"...\n",
                     pcb->ssthresh, (u16_t)(2 * pcb->mss)));
        pcb->ssthresh = 2 * pcb->mss;
      }

      pcb->cwnd = pcb->ssthresh + 3 * pcb->mss;
   1a6a6:	4401      	add	r1, r0
        pcb->ssthresh = 2 * pcb->mss;
   1a6a8:	bf3c      	itt	cc
   1a6aa:	b283      	uxthcc	r3, r0
   1a6ac:	f8a6 304a 	strhcc.w	r3, [r6, #74]	; 0x4a
      tcp_set_flags(pcb, TF_INFR);
   1a6b0:	f042 0204 	orr.w	r2, r2, #4
      pcb->cwnd = pcb->ssthresh + 3 * pcb->mss;
   1a6b4:	440b      	add	r3, r1

      /* Reset the retransmission timer to prevent immediate rto retransmissions */
      pcb->rtime = 0;
   1a6b6:	2100      	movs	r1, #0
      pcb->cwnd = pcb->ssthresh + 3 * pcb->mss;
   1a6b8:	f8a6 3048 	strh.w	r3, [r6, #72]	; 0x48
      tcp_set_flags(pcb, TF_INFR);
   1a6bc:	8372      	strh	r2, [r6, #26]
      pcb->rtime = 0;
   1a6be:	8631      	strh	r1, [r6, #48]	; 0x30
    }
  }
}
   1a6c0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   1a6c2:	8b72      	ldrh	r2, [r6, #26]
   1a6c4:	e7d3      	b.n	1a66e <tcp_rexmit_fast+0x4a>
    pcb->unsent_oversize = 0;
   1a6c6:	f8a6 3068 	strh.w	r3, [r6, #104]	; 0x68
   1a6ca:	e7d4      	b.n	1a676 <tcp_rexmit_fast+0x52>

0001a6cc <tcp_rst>:
 */
void
tcp_rst(const struct tcp_pcb *pcb, u32_t seqno, u32_t ackno,
        const ip_addr_t *local_ip, const ip_addr_t *remote_ip,
        u16_t local_port, u16_t remote_port)
{
   1a6cc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1a6d0:	b085      	sub	sp, #20
   1a6d2:	4606      	mov	r6, r0
  wnd = PP_HTONS(((TCP_WND >> TCP_RCV_SCALE) & 0xFFFF));
#else
  wnd = PP_HTONS(TCP_WND);
#endif

  p = tcp_output_alloc_header_common(ackno, optlen, 0, lwip_htonl(seqno), local_port,
   1a6d4:	4608      	mov	r0, r1
{
   1a6d6:	4691      	mov	r9, r2
   1a6d8:	4698      	mov	r8, r3
   1a6da:	9f0e      	ldr	r7, [sp, #56]	; 0x38
   1a6dc:	f8bd 403c 	ldrh.w	r4, [sp, #60]	; 0x3c
   1a6e0:	f8bd b040 	ldrh.w	fp, [sp, #64]	; 0x40
  p = tcp_output_alloc_header_common(ackno, optlen, 0, lwip_htonl(seqno), local_port,
   1a6e4:	f7f9 f80c 	bl	13700 <lwip_htonl>
  p = pbuf_alloc(PBUF_IP, TCP_HLEN + optlen + datalen, PBUF_RAM);
   1a6e8:	f44f 7220 	mov.w	r2, #640	; 0x280
  p = tcp_output_alloc_header_common(ackno, optlen, 0, lwip_htonl(seqno), local_port,
   1a6ec:	4682      	mov	sl, r0
  p = pbuf_alloc(PBUF_IP, TCP_HLEN + optlen + datalen, PBUF_RAM);
   1a6ee:	2114      	movs	r1, #20
   1a6f0:	2022      	movs	r0, #34	; 0x22
   1a6f2:	f7fc fecf 	bl	17494 <pbuf_alloc>
  if (p != NULL) {
   1a6f6:	2800      	cmp	r0, #0
   1a6f8:	d042      	beq.n	1a780 <tcp_rst+0xb4>
   1a6fa:	4605      	mov	r5, r0
    tcphdr->src = lwip_htons(src_port);
   1a6fc:	4620      	mov	r0, r4
    tcphdr = (struct tcp_hdr *)p->payload;
   1a6fe:	686c      	ldr	r4, [r5, #4]
    tcphdr->src = lwip_htons(src_port);
   1a700:	f7f8 fffa 	bl	136f8 <lwip_htons>
   1a704:	8020      	strh	r0, [r4, #0]
    tcphdr->dest = lwip_htons(dst_port);
   1a706:	4658      	mov	r0, fp
   1a708:	f7f8 fff6 	bl	136f8 <lwip_htons>
    tcphdr->seqno = seqno_be;
   1a70c:	f8c4 a004 	str.w	sl, [r4, #4]
    tcphdr->dest = lwip_htons(dst_port);
   1a710:	8060      	strh	r0, [r4, #2]
    tcphdr->ackno = lwip_htonl(ackno);
   1a712:	4648      	mov	r0, r9
   1a714:	f7f8 fff4 	bl	13700 <lwip_htonl>
   1a718:	60a0      	str	r0, [r4, #8]
    TCPH_HDRLEN_FLAGS_SET(tcphdr, (5 + optlen / 4), flags);
   1a71a:	f245 0014 	movw	r0, #20500	; 0x5014
   1a71e:	f7f8 ffeb 	bl	136f8 <lwip_htons>
   1a722:	81a0      	strh	r0, [r4, #12]
    tcphdr->wnd = lwip_htons(wnd);
   1a724:	f24d 0016 	movw	r0, #53270	; 0xd016
   1a728:	f7f8 ffe6 	bl	136f8 <lwip_htons>
    tcphdr->chksum = 0;
   1a72c:	2300      	movs	r3, #0
    tcphdr->wnd = lwip_htons(wnd);
   1a72e:	81e0      	strh	r0, [r4, #14]
    tcphdr->chksum = 0;
   1a730:	7423      	strb	r3, [r4, #16]
   1a732:	7463      	strb	r3, [r4, #17]
    tcphdr->urgp = 0;
   1a734:	74a3      	strb	r3, [r4, #18]
   1a736:	74e3      	strb	r3, [r4, #19]
  if ((pcb != NULL) && (pcb->netif_idx != NETIF_NO_INDEX)) {
   1a738:	b35e      	cbz	r6, 1a792 <tcp_rst+0xc6>
   1a73a:	7a30      	ldrb	r0, [r6, #8]
   1a73c:	bb18      	cbnz	r0, 1a786 <tcp_rst+0xba>
    return ip_route(src, dst);
   1a73e:	4638      	mov	r0, r7
   1a740:	f001 fcde 	bl	1c100 <ip4_route>
  if (netif == NULL) {
   1a744:	4604      	mov	r4, r0
   1a746:	b1a8      	cbz	r0, 1a774 <tcp_rst+0xa8>
      struct tcp_hdr *tcphdr = (struct tcp_hdr *)p->payload;
   1a748:	f8d5 9004 	ldr.w	r9, [r5, #4]
      tcphdr->chksum = ip_chksum_pseudo(p, IP_PROTO_TCP, p->tot_len,
   1a74c:	892a      	ldrh	r2, [r5, #8]
   1a74e:	9700      	str	r7, [sp, #0]
   1a750:	4643      	mov	r3, r8
   1a752:	2106      	movs	r1, #6
   1a754:	4628      	mov	r0, r5
   1a756:	f001 f98d 	bl	1ba74 <ip_chksum_pseudo>
   1a75a:	f8a9 0010 	strh.w	r0, [r9, #16]
      ttl = pcb->ttl;
   1a75e:	7af3      	ldrb	r3, [r6, #11]
      tos = pcb->tos;
   1a760:	7ab6      	ldrb	r6, [r6, #10]
    err = ip_output_if(p, src, dst, ttl, tos, IP_PROTO_TCP, netif);
   1a762:	9402      	str	r4, [sp, #8]
   1a764:	2006      	movs	r0, #6
   1a766:	9001      	str	r0, [sp, #4]
   1a768:	9600      	str	r6, [sp, #0]
   1a76a:	463a      	mov	r2, r7
   1a76c:	4641      	mov	r1, r8
   1a76e:	4628      	mov	r0, r5
   1a770:	f001 fe1c 	bl	1c3ac <ip4_output_if>
  pbuf_free(p);
   1a774:	4628      	mov	r0, r5

  MIB2_STATS_INC(mib2.tcpoutrsts);

  tcp_output_control_segment(pcb, p, local_ip, remote_ip);
  LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_rst: seqno %"U32_F" ackno %"U32_F".\n", seqno, ackno));
}
   1a776:	b005      	add	sp, #20
   1a778:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  pbuf_free(p);
   1a77c:	f7fd b836 	b.w	177ec <pbuf_free>
}
   1a780:	b005      	add	sp, #20
   1a782:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    return netif_get_by_index(pcb->netif_idx);
   1a786:	f7fc fe5d 	bl	17444 <netif_get_by_index>
  if (netif == NULL) {
   1a78a:	4604      	mov	r4, r0
   1a78c:	2800      	cmp	r0, #0
   1a78e:	d1db      	bne.n	1a748 <tcp_rst+0x7c>
   1a790:	e7f0      	b.n	1a774 <tcp_rst+0xa8>
    return ip_route(src, dst);
   1a792:	4638      	mov	r0, r7
   1a794:	f001 fcb4 	bl	1c100 <ip4_route>
  if (netif == NULL) {
   1a798:	4604      	mov	r4, r0
   1a79a:	2800      	cmp	r0, #0
   1a79c:	d0ea      	beq.n	1a774 <tcp_rst+0xa8>
      struct tcp_hdr *tcphdr = (struct tcp_hdr *)p->payload;
   1a79e:	f8d5 9004 	ldr.w	r9, [r5, #4]
      tcphdr->chksum = ip_chksum_pseudo(p, IP_PROTO_TCP, p->tot_len,
   1a7a2:	892a      	ldrh	r2, [r5, #8]
   1a7a4:	9700      	str	r7, [sp, #0]
   1a7a6:	4643      	mov	r3, r8
   1a7a8:	2106      	movs	r1, #6
   1a7aa:	4628      	mov	r0, r5
   1a7ac:	f001 f962 	bl	1ba74 <ip_chksum_pseudo>
      ttl = TCP_TTL;
   1a7b0:	23ff      	movs	r3, #255	; 0xff
      tcphdr->chksum = ip_chksum_pseudo(p, IP_PROTO_TCP, p->tot_len,
   1a7b2:	f8a9 0010 	strh.w	r0, [r9, #16]
   1a7b6:	e7d4      	b.n	1a762 <tcp_rst+0x96>

0001a7b8 <tcp_send_empty_ack>:
 *
 * @param pcb Protocol control block for the TCP connection to send the ACK
 */
err_t
tcp_send_empty_ack(struct tcp_pcb *pcb)
{
   1a7b8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   1a7bc:	4604      	mov	r4, r0
   1a7be:	b084      	sub	sp, #16
  if ((num_sacks = tcp_get_num_sacks(pcb, optlen)) > 0) {
    optlen += 4 + num_sacks * 8; /* 4 bytes for header (including 2*NOP), plus 8B for each SACK */
  }
#endif

  p = tcp_output_alloc_header(pcb, optlen, 0, lwip_htonl(pcb->snd_nxt));
   1a7c0:	6d00      	ldr	r0, [r0, #80]	; 0x50
   1a7c2:	f7f8 ff9d 	bl	13700 <lwip_htonl>
  p = pbuf_alloc(PBUF_IP, TCP_HLEN + optlen + datalen, PBUF_RAM);
   1a7c6:	f44f 7220 	mov.w	r2, #640	; 0x280
  p = tcp_output_alloc_header(pcb, optlen, 0, lwip_htonl(pcb->snd_nxt));
   1a7ca:	4681      	mov	r9, r0
  p = pbuf_alloc(PBUF_IP, TCP_HLEN + optlen + datalen, PBUF_RAM);
   1a7cc:	2114      	movs	r1, #20
   1a7ce:	2022      	movs	r0, #34	; 0x22
  p = tcp_output_alloc_header_common(pcb->rcv_nxt, optlen, datalen,
   1a7d0:	f8d4 8024 	ldr.w	r8, [r4, #36]	; 0x24
   1a7d4:	8ae5      	ldrh	r5, [r4, #22]
   1a7d6:	f8b4 a018 	ldrh.w	sl, [r4, #24]
   1a7da:	8d67      	ldrh	r7, [r4, #42]	; 0x2a
  p = pbuf_alloc(PBUF_IP, TCP_HLEN + optlen + datalen, PBUF_RAM);
   1a7dc:	f7fc fe5a 	bl	17494 <pbuf_alloc>
  if (p != NULL) {
   1a7e0:	2800      	cmp	r0, #0
   1a7e2:	d05d      	beq.n	1a8a0 <tcp_send_empty_ack+0xe8>
   1a7e4:	4606      	mov	r6, r0
    tcphdr->src = lwip_htons(src_port);
   1a7e6:	4628      	mov	r0, r5
    tcphdr = (struct tcp_hdr *)p->payload;
   1a7e8:	6875      	ldr	r5, [r6, #4]
    tcphdr->src = lwip_htons(src_port);
   1a7ea:	f7f8 ff85 	bl	136f8 <lwip_htons>
   1a7ee:	8028      	strh	r0, [r5, #0]
    tcphdr->dest = lwip_htons(dst_port);
   1a7f0:	4650      	mov	r0, sl
   1a7f2:	f7f8 ff81 	bl	136f8 <lwip_htons>
    tcphdr->seqno = seqno_be;
   1a7f6:	f8c5 9004 	str.w	r9, [r5, #4]
    tcphdr->dest = lwip_htons(dst_port);
   1a7fa:	8068      	strh	r0, [r5, #2]
    tcphdr->ackno = lwip_htonl(ackno);
   1a7fc:	4640      	mov	r0, r8
   1a7fe:	f7f8 ff7f 	bl	13700 <lwip_htonl>
   1a802:	60a8      	str	r0, [r5, #8]
    TCPH_HDRLEN_FLAGS_SET(tcphdr, (5 + optlen / 4), flags);
   1a804:	f245 0010 	movw	r0, #20496	; 0x5010
   1a808:	f7f8 ff76 	bl	136f8 <lwip_htons>
   1a80c:	81a8      	strh	r0, [r5, #12]
    tcphdr->wnd = lwip_htons(wnd);
   1a80e:	4638      	mov	r0, r7
   1a810:	f7f8 ff72 	bl	136f8 <lwip_htons>
    tcphdr->chksum = 0;
   1a814:	2300      	movs	r3, #0
   1a816:	742b      	strb	r3, [r5, #16]
   1a818:	746b      	strb	r3, [r5, #17]
    tcphdr->urgp = 0;
   1a81a:	74ab      	strb	r3, [r5, #18]
   1a81c:	74eb      	strb	r3, [r5, #19]
    tcphdr->wnd = lwip_htons(wnd);
   1a81e:	81e8      	strh	r0, [r5, #14]
    pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
   1a820:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
   1a822:	6a63      	ldr	r3, [r4, #36]	; 0x24
  if ((pcb != NULL) && (pcb->netif_idx != NETIF_NO_INDEX)) {
   1a824:	7a20      	ldrb	r0, [r4, #8]
    pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
   1a826:	4413      	add	r3, r2
   1a828:	62e3      	str	r3, [r4, #44]	; 0x2c
  pcb->ts_lastacksent = pcb->rcv_nxt;
#endif

  LWIP_DEBUGF(TCP_OUTPUT_DEBUG,
              ("tcp_output: sending ACK for %"U32_F"\n", pcb->rcv_nxt));
  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
   1a82a:	1d25      	adds	r5, r4, #4
  if ((pcb != NULL) && (pcb->netif_idx != NETIF_NO_INDEX)) {
   1a82c:	bba0      	cbnz	r0, 1a898 <tcp_send_empty_ack+0xe0>
    return ip_route(src, dst);
   1a82e:	4628      	mov	r0, r5
   1a830:	f001 fc66 	bl	1c100 <ip4_route>
   1a834:	4607      	mov	r7, r0
  if (netif == NULL) {
   1a836:	b317      	cbz	r7, 1a87e <tcp_send_empty_ack+0xc6>
      tcphdr->chksum = ip_chksum_pseudo(p, IP_PROTO_TCP, p->tot_len,
   1a838:	8932      	ldrh	r2, [r6, #8]
      struct tcp_hdr *tcphdr = (struct tcp_hdr *)p->payload;
   1a83a:	f8d6 8004 	ldr.w	r8, [r6, #4]
      tcphdr->chksum = ip_chksum_pseudo(p, IP_PROTO_TCP, p->tot_len,
   1a83e:	9500      	str	r5, [sp, #0]
   1a840:	4623      	mov	r3, r4
   1a842:	2106      	movs	r1, #6
   1a844:	4630      	mov	r0, r6
   1a846:	f001 f915 	bl	1ba74 <ip_chksum_pseudo>
   1a84a:	f8a8 0010 	strh.w	r0, [r8, #16]
    err = ip_output_if(p, src, dst, ttl, tos, IP_PROTO_TCP, netif);
   1a84e:	7aa0      	ldrb	r0, [r4, #10]
   1a850:	7ae3      	ldrb	r3, [r4, #11]
   1a852:	9702      	str	r7, [sp, #8]
   1a854:	2106      	movs	r1, #6
   1a856:	e88d 0003 	stmia.w	sp, {r0, r1}
   1a85a:	462a      	mov	r2, r5
   1a85c:	4621      	mov	r1, r4
   1a85e:	4630      	mov	r0, r6
   1a860:	f001 fda4 	bl	1c3ac <ip4_output_if>
   1a864:	4605      	mov	r5, r0
  pbuf_free(p);
   1a866:	4630      	mov	r0, r6
   1a868:	f7fc ffc0 	bl	177ec <pbuf_free>
  if (err != ERR_OK) {
   1a86c:	b965      	cbnz	r5, 1a888 <tcp_send_empty_ack+0xd0>
    /* let tcp_fasttmr retry sending this ACK */
    tcp_set_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
  } else {
    /* remove ACK flags from the PCB, as we sent an empty ACK now */
    tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
   1a86e:	8b63      	ldrh	r3, [r4, #26]
  }

  return err;
}
   1a870:	4628      	mov	r0, r5
    tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
   1a872:	f023 0303 	bic.w	r3, r3, #3
   1a876:	8363      	strh	r3, [r4, #26]
}
   1a878:	b004      	add	sp, #16
   1a87a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  pbuf_free(p);
   1a87e:	4630      	mov	r0, r6
   1a880:	f7fc ffb4 	bl	177ec <pbuf_free>
    err = ERR_RTE;
   1a884:	f06f 0503 	mvn.w	r5, #3
    tcp_set_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
   1a888:	8b63      	ldrh	r3, [r4, #26]
}
   1a88a:	4628      	mov	r0, r5
    tcp_set_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
   1a88c:	f043 0303 	orr.w	r3, r3, #3
   1a890:	8363      	strh	r3, [r4, #26]
}
   1a892:	b004      	add	sp, #16
   1a894:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    return netif_get_by_index(pcb->netif_idx);
   1a898:	f7fc fdd4 	bl	17444 <netif_get_by_index>
   1a89c:	4607      	mov	r7, r0
   1a89e:	e7ca      	b.n	1a836 <tcp_send_empty_ack+0x7e>
    tcp_set_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
   1a8a0:	8b63      	ldrh	r3, [r4, #26]
    return ERR_BUF;
   1a8a2:	f06f 0501 	mvn.w	r5, #1
    tcp_set_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
   1a8a6:	f043 0303 	orr.w	r3, r3, #3
}
   1a8aa:	4628      	mov	r0, r5
    tcp_set_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
   1a8ac:	8363      	strh	r3, [r4, #26]
}
   1a8ae:	b004      	add	sp, #16
   1a8b0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

0001a8b4 <tcp_output>:
  if (tcp_input_pcb == pcb) {
   1a8b4:	4bb8      	ldr	r3, [pc, #736]	; (1ab98 <tcp_output+0x2e4>)
   1a8b6:	681b      	ldr	r3, [r3, #0]
   1a8b8:	4283      	cmp	r3, r0
   1a8ba:	f000 817a 	beq.w	1abb2 <tcp_output+0x2fe>
{
   1a8be:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  wnd = LWIP_MIN(pcb->snd_wnd, pcb->cwnd);
   1a8c2:	f8b0 3048 	ldrh.w	r3, [r0, #72]	; 0x48
   1a8c6:	f8b0 8060 	ldrh.w	r8, [r0, #96]	; 0x60
  seg = pcb->unsent;
   1a8ca:	6ec5      	ldr	r5, [r0, #108]	; 0x6c
  wnd = LWIP_MIN(pcb->snd_wnd, pcb->cwnd);
   1a8cc:	4598      	cmp	r8, r3
{
   1a8ce:	b087      	sub	sp, #28
   1a8d0:	4604      	mov	r4, r0
  wnd = LWIP_MIN(pcb->snd_wnd, pcb->cwnd);
   1a8d2:	bf28      	it	cs
   1a8d4:	4698      	movcs	r8, r3
  if (seg == NULL) {
   1a8d6:	2d00      	cmp	r5, #0
   1a8d8:	f000 8154 	beq.w	1ab84 <tcp_output+0x2d0>
  if ((pcb != NULL) && (pcb->netif_idx != NETIF_NO_INDEX)) {
   1a8dc:	7a00      	ldrb	r0, [r0, #8]
  netif = tcp_route(pcb, &pcb->local_ip, &pcb->remote_ip);
   1a8de:	f104 0a04 	add.w	sl, r4, #4
  if ((pcb != NULL) && (pcb->netif_idx != NETIF_NO_INDEX)) {
   1a8e2:	2800      	cmp	r0, #0
   1a8e4:	f040 8160 	bne.w	1aba8 <tcp_output+0x2f4>
    return ip_route(src, dst);
   1a8e8:	4650      	mov	r0, sl
   1a8ea:	f001 fc09 	bl	1c100 <ip4_route>
   1a8ee:	9005      	str	r0, [sp, #20]
   1a8f0:	4603      	mov	r3, r0
  if (netif == NULL) {
   1a8f2:	2b00      	cmp	r3, #0
   1a8f4:	f000 815f 	beq.w	1abb6 <tcp_output+0x302>
  if (ip_addr_isany(&pcb->local_ip)) {
   1a8f8:	6823      	ldr	r3, [r4, #0]
   1a8fa:	b913      	cbnz	r3, 1a902 <tcp_output+0x4e>
    ip_addr_copy(pcb->local_ip, *local_ip);
   1a8fc:	9b05      	ldr	r3, [sp, #20]
   1a8fe:	685b      	ldr	r3, [r3, #4]
   1a900:	6023      	str	r3, [r4, #0]
  if (lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len > wnd) {
   1a902:	68eb      	ldr	r3, [r5, #12]
   1a904:	6858      	ldr	r0, [r3, #4]
   1a906:	f7f8 fefb 	bl	13700 <lwip_htonl>
   1a90a:	892b      	ldrh	r3, [r5, #8]
   1a90c:	6c62      	ldr	r2, [r4, #68]	; 0x44
   1a90e:	1a9b      	subs	r3, r3, r2
   1a910:	4418      	add	r0, r3
   1a912:	4540      	cmp	r0, r8
   1a914:	d90f      	bls.n	1a936 <tcp_output+0x82>
    if (wnd == pcb->snd_wnd && pcb->unacked == NULL && pcb->persist_backoff == 0) {
   1a916:	f8b4 3060 	ldrh.w	r3, [r4, #96]	; 0x60
   1a91a:	4543      	cmp	r3, r8
   1a91c:	f000 815b 	beq.w	1abd6 <tcp_output+0x322>
    if (pcb->flags & TF_ACK_NOW) {
   1a920:	8b62      	ldrh	r2, [r4, #26]
   1a922:	0791      	lsls	r1, r2, #30
   1a924:	f100 8168 	bmi.w	1abf8 <tcp_output+0x344>
  tcp_clear_flags(pcb, TF_NAGLEMEMERR);
   1a928:	f022 0280 	bic.w	r2, r2, #128	; 0x80
   1a92c:	8362      	strh	r2, [r4, #26]
  return ERR_OK;
   1a92e:	2000      	movs	r0, #0
}
   1a930:	b007      	add	sp, #28
   1a932:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  useg = pcb->unacked;
   1a936:	6f26      	ldr	r6, [r4, #112]	; 0x70
  pcb->persist_backoff = 0;
   1a938:	2300      	movs	r3, #0
   1a93a:	f884 3099 	strb.w	r3, [r4, #153]	; 0x99
  if (useg != NULL) {
   1a93e:	b90e      	cbnz	r6, 1a944 <tcp_output+0x90>
   1a940:	e003      	b.n	1a94a <tcp_output+0x96>
   1a942:	461e      	mov	r6, r3
    for (; useg->next != NULL; useg = useg->next);
   1a944:	6833      	ldr	r3, [r6, #0]
   1a946:	2b00      	cmp	r3, #0
   1a948:	d1fb      	bne.n	1a942 <tcp_output+0x8e>
  seg->tcphdr->chksum = 0;
   1a94a:	f04f 0900 	mov.w	r9, #0
   1a94e:	4657      	mov	r7, sl
   1a950:	e019      	b.n	1a986 <tcp_output+0xd2>
      if (pcb->unacked == NULL) {
   1a952:	6f23      	ldr	r3, [r4, #112]	; 0x70
      seg->next = NULL;
   1a954:	f8c5 9000 	str.w	r9, [r5]
      if (pcb->unacked == NULL) {
   1a958:	2b00      	cmp	r3, #0
   1a95a:	f000 80bc 	beq.w	1aad6 <tcp_output+0x222>
        if (TCP_SEQ_LT(lwip_ntohl(seg->tcphdr->seqno), lwip_ntohl(useg->tcphdr->seqno))) {
   1a95e:	68eb      	ldr	r3, [r5, #12]
   1a960:	6858      	ldr	r0, [r3, #4]
   1a962:	f7f8 fecd 	bl	13700 <lwip_htonl>
   1a966:	68f3      	ldr	r3, [r6, #12]
   1a968:	4683      	mov	fp, r0
   1a96a:	6858      	ldr	r0, [r3, #4]
   1a96c:	f7f8 fec8 	bl	13700 <lwip_htonl>
   1a970:	ebab 0000 	sub.w	r0, fp, r0
   1a974:	2800      	cmp	r0, #0
   1a976:	f2c0 80b1 	blt.w	1aadc <tcp_output+0x228>
          useg->next = seg;
   1a97a:	6035      	str	r5, [r6, #0]
   1a97c:	462e      	mov	r6, r5
    seg = pcb->unsent;
   1a97e:	6ee5      	ldr	r5, [r4, #108]	; 0x6c
  while (seg != NULL &&
   1a980:	2d00      	cmp	r5, #0
   1a982:	f000 811b 	beq.w	1abbc <tcp_output+0x308>
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
   1a986:	68eb      	ldr	r3, [r5, #12]
   1a988:	6858      	ldr	r0, [r3, #4]
   1a98a:	f7f8 feb9 	bl	13700 <lwip_htonl>
   1a98e:	6c63      	ldr	r3, [r4, #68]	; 0x44
   1a990:	892a      	ldrh	r2, [r5, #8]
   1a992:	1ac0      	subs	r0, r0, r3
   1a994:	4410      	add	r0, r2
  while (seg != NULL &&
   1a996:	4540      	cmp	r0, r8
   1a998:	f200 8116 	bhi.w	1abc8 <tcp_output+0x314>
    if ((tcp_do_output_nagle(pcb) == 0) &&
   1a99c:	6f23      	ldr	r3, [r4, #112]	; 0x70
   1a99e:	b163      	cbz	r3, 1a9ba <tcp_output+0x106>
   1a9a0:	8b63      	ldrh	r3, [r4, #26]
   1a9a2:	f013 0f44 	tst.w	r3, #68	; 0x44
   1a9a6:	461a      	mov	r2, r3
   1a9a8:	d107      	bne.n	1a9ba <tcp_output+0x106>
   1a9aa:	6ee1      	ldr	r1, [r4, #108]	; 0x6c
   1a9ac:	2900      	cmp	r1, #0
   1a9ae:	f000 80d7 	beq.w	1ab60 <tcp_output+0x2ac>
   1a9b2:	6808      	ldr	r0, [r1, #0]
   1a9b4:	2800      	cmp	r0, #0
   1a9b6:	f000 80cd 	beq.w	1ab54 <tcp_output+0x2a0>
    if (pcb->state != SYN_SENT) {
   1a9ba:	7d23      	ldrb	r3, [r4, #20]
   1a9bc:	2b02      	cmp	r3, #2
   1a9be:	d00a      	beq.n	1a9d6 <tcp_output+0x122>
      TCPH_SET_FLAG(seg->tcphdr, TCP_ACK);
   1a9c0:	f8d5 a00c 	ldr.w	sl, [r5, #12]
   1a9c4:	2010      	movs	r0, #16
   1a9c6:	f8ba b00c 	ldrh.w	fp, [sl, #12]
   1a9ca:	f7f8 fe95 	bl	136f8 <lwip_htons>
   1a9ce:	ea4b 0000 	orr.w	r0, fp, r0
   1a9d2:	f8aa 000c 	strh.w	r0, [sl, #12]
  if (seg->p->ref != 1) {
   1a9d6:	686b      	ldr	r3, [r5, #4]
   1a9d8:	7b9b      	ldrb	r3, [r3, #14]
   1a9da:	2b01      	cmp	r3, #1
   1a9dc:	d02f      	beq.n	1aa3e <tcp_output+0x18a>
    if (pcb->state != SYN_SENT) {
   1a9de:	7d23      	ldrb	r3, [r4, #20]
    pcb->unsent = seg->next;
   1a9e0:	682a      	ldr	r2, [r5, #0]
   1a9e2:	66e2      	str	r2, [r4, #108]	; 0x6c
    if (pcb->state != SYN_SENT) {
   1a9e4:	2b02      	cmp	r3, #2
   1a9e6:	d003      	beq.n	1a9f0 <tcp_output+0x13c>
      tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
   1a9e8:	8b63      	ldrh	r3, [r4, #26]
   1a9ea:	f023 0303 	bic.w	r3, r3, #3
   1a9ee:	8363      	strh	r3, [r4, #26]
    snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
   1a9f0:	68eb      	ldr	r3, [r5, #12]
   1a9f2:	6858      	ldr	r0, [r3, #4]
   1a9f4:	f7f8 fe84 	bl	13700 <lwip_htonl>
   1a9f8:	68ea      	ldr	r2, [r5, #12]
   1a9fa:	f8b5 a008 	ldrh.w	sl, [r5, #8]
   1a9fe:	4683      	mov	fp, r0
   1aa00:	8990      	ldrh	r0, [r2, #12]
   1aa02:	f7f8 fe79 	bl	136f8 <lwip_htons>
   1aa06:	f010 0003 	ands.w	r0, r0, #3
    if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
   1aa0a:	6d23      	ldr	r3, [r4, #80]	; 0x50
    snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
   1aa0c:	44d3      	add	fp, sl
   1aa0e:	bf18      	it	ne
   1aa10:	2001      	movne	r0, #1
   1aa12:	4458      	add	r0, fp
    if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
   1aa14:	1a1b      	subs	r3, r3, r0
   1aa16:	2b00      	cmp	r3, #0
    if (TCP_TCPLEN(seg) > 0) {
   1aa18:	68eb      	ldr	r3, [r5, #12]
      pcb->snd_nxt = snd_nxt;
   1aa1a:	bfb8      	it	lt
   1aa1c:	6520      	strlt	r0, [r4, #80]	; 0x50
    if (TCP_TCPLEN(seg) > 0) {
   1aa1e:	8998      	ldrh	r0, [r3, #12]
   1aa20:	f8b5 b008 	ldrh.w	fp, [r5, #8]
   1aa24:	f7f8 fe68 	bl	136f8 <lwip_htons>
   1aa28:	f010 0003 	ands.w	r0, r0, #3
   1aa2c:	bf18      	it	ne
   1aa2e:	2001      	movne	r0, #1
   1aa30:	eb10 0f0b 	cmn.w	r0, fp
   1aa34:	d18d      	bne.n	1a952 <tcp_output+0x9e>
      tcp_seg_free(seg);
   1aa36:	4628      	mov	r0, r5
   1aa38:	f7fd fffc 	bl	18a34 <tcp_seg_free>
   1aa3c:	e79f      	b.n	1a97e <tcp_output+0xca>
  seg->tcphdr->ackno = lwip_htonl(pcb->rcv_nxt);
   1aa3e:	6a60      	ldr	r0, [r4, #36]	; 0x24
   1aa40:	f8d5 b00c 	ldr.w	fp, [r5, #12]
   1aa44:	f7f8 fe5c 	bl	13700 <lwip_htonl>
   1aa48:	f8cb 0008 	str.w	r0, [fp, #8]
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
   1aa4c:	8d60      	ldrh	r0, [r4, #42]	; 0x2a
   1aa4e:	f8d5 b00c 	ldr.w	fp, [r5, #12]
   1aa52:	f7f8 fe51 	bl	136f8 <lwip_htons>
  pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
   1aa56:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
   1aa58:	6a63      	ldr	r3, [r4, #36]	; 0x24
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
   1aa5a:	f8ab 000e 	strh.w	r0, [fp, #14]
  pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
   1aa5e:	4413      	add	r3, r2
   1aa60:	62e3      	str	r3, [r4, #44]	; 0x2c
  if (seg->flags & TF_SEG_OPTS_MSS) {
   1aa62:	7aab      	ldrb	r3, [r5, #10]
  opts = (u32_t *)(void *)(seg->tcphdr + 1);
   1aa64:	f8d5 b00c 	ldr.w	fp, [r5, #12]
  if (seg->flags & TF_SEG_OPTS_MSS) {
   1aa68:	07db      	lsls	r3, r3, #31
   1aa6a:	d464      	bmi.n	1ab36 <tcp_output+0x282>
  if (pcb->rtime < 0) {
   1aa6c:	f9b4 3030 	ldrsh.w	r3, [r4, #48]	; 0x30
   1aa70:	2b00      	cmp	r3, #0
  if (pcb->rttest == 0) {
   1aa72:	6b63      	ldr	r3, [r4, #52]	; 0x34
    pcb->rtime = 0;
   1aa74:	bfb8      	it	lt
   1aa76:	f8a4 9030 	strhlt.w	r9, [r4, #48]	; 0x30
  if (pcb->rttest == 0) {
   1aa7a:	2b00      	cmp	r3, #0
   1aa7c:	d050      	beq.n	1ab20 <tcp_output+0x26c>
  len = (u16_t)((u8_t *)seg->tcphdr - (u8_t *)seg->p->payload);
   1aa7e:	6868      	ldr	r0, [r5, #4]
   1aa80:	6843      	ldr	r3, [r0, #4]
  seg->p->tot_len -= len;
   1aa82:	8902      	ldrh	r2, [r0, #8]
  seg->p->len -= len;
   1aa84:	8941      	ldrh	r1, [r0, #10]
  seg->p->payload = seg->tcphdr;
   1aa86:	f8c0 b004 	str.w	fp, [r0, #4]
  len = (u16_t)((u8_t *)seg->tcphdr - (u8_t *)seg->p->payload);
   1aa8a:	ebab 0303 	sub.w	r3, fp, r3
   1aa8e:	b29b      	uxth	r3, r3
  seg->p->tot_len -= len;
   1aa90:	1ad2      	subs	r2, r2, r3
   1aa92:	b292      	uxth	r2, r2
  seg->p->len -= len;
   1aa94:	1acb      	subs	r3, r1, r3
   1aa96:	8143      	strh	r3, [r0, #10]
  seg->p->tot_len -= len;
   1aa98:	8102      	strh	r2, [r0, #8]
    seg->tcphdr->chksum = ip_chksum_pseudo(seg->p, IP_PROTO_TCP,
   1aa9a:	4623      	mov	r3, r4
  seg->tcphdr->chksum = 0;
   1aa9c:	f88b 9010 	strb.w	r9, [fp, #16]
   1aaa0:	f88b 9011 	strb.w	r9, [fp, #17]
    seg->tcphdr->chksum = ip_chksum_pseudo(seg->p, IP_PROTO_TCP,
   1aaa4:	2106      	movs	r1, #6
   1aaa6:	9700      	str	r7, [sp, #0]
   1aaa8:	f000 ffe4 	bl	1ba74 <ip_chksum_pseudo>
   1aaac:	f8ab 0010 	strh.w	r0, [fp, #16]
  err = ip_output_if(seg->p, &pcb->local_ip, &pcb->remote_ip, pcb->ttl,
   1aab0:	7aa2      	ldrb	r2, [r4, #10]
   1aab2:	7ae3      	ldrb	r3, [r4, #11]
   1aab4:	6868      	ldr	r0, [r5, #4]
   1aab6:	9905      	ldr	r1, [sp, #20]
   1aab8:	9200      	str	r2, [sp, #0]
   1aaba:	2206      	movs	r2, #6
   1aabc:	9102      	str	r1, [sp, #8]
   1aabe:	9201      	str	r2, [sp, #4]
   1aac0:	4621      	mov	r1, r4
   1aac2:	463a      	mov	r2, r7
   1aac4:	f001 fc72 	bl	1c3ac <ip4_output_if>
    if (err != ERR_OK) {
   1aac8:	2800      	cmp	r0, #0
   1aaca:	d088      	beq.n	1a9de <tcp_output+0x12a>
      tcp_set_flags(pcb, TF_NAGLEMEMERR);
   1aacc:	8b63      	ldrh	r3, [r4, #26]
   1aace:	f043 0380 	orr.w	r3, r3, #128	; 0x80
   1aad2:	8363      	strh	r3, [r4, #26]
      return err;
   1aad4:	e72c      	b.n	1a930 <tcp_output+0x7c>
        pcb->unacked = seg;
   1aad6:	6725      	str	r5, [r4, #112]	; 0x70
   1aad8:	462e      	mov	r6, r5
   1aada:	e750      	b.n	1a97e <tcp_output+0xca>
          while (*cur_seg &&
   1aadc:	6f23      	ldr	r3, [r4, #112]	; 0x70
          struct tcp_seg **cur_seg = &(pcb->unacked);
   1aade:	f104 0a70 	add.w	sl, r4, #112	; 0x70
          while (*cur_seg &&
   1aae2:	b1cb      	cbz	r3, 1ab18 <tcp_output+0x264>
   1aae4:	4622      	mov	r2, r4
   1aae6:	4654      	mov	r4, sl
   1aae8:	4692      	mov	sl, r2
   1aaea:	e003      	b.n	1aaf4 <tcp_output+0x240>
            cur_seg = &((*cur_seg)->next );
   1aaec:	6824      	ldr	r4, [r4, #0]
          while (*cur_seg &&
   1aaee:	6823      	ldr	r3, [r4, #0]
   1aaf0:	2b00      	cmp	r3, #0
   1aaf2:	d055      	beq.n	1aba0 <tcp_output+0x2ec>
                 TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
   1aaf4:	68db      	ldr	r3, [r3, #12]
   1aaf6:	6858      	ldr	r0, [r3, #4]
   1aaf8:	f7f8 fe02 	bl	13700 <lwip_htonl>
   1aafc:	68eb      	ldr	r3, [r5, #12]
   1aafe:	4683      	mov	fp, r0
   1ab00:	6858      	ldr	r0, [r3, #4]
   1ab02:	f7f8 fdfd 	bl	13700 <lwip_htonl>
   1ab06:	ebab 0000 	sub.w	r0, fp, r0
          while (*cur_seg &&
   1ab0a:	2800      	cmp	r0, #0
   1ab0c:	dbee      	blt.n	1aaec <tcp_output+0x238>
   1ab0e:	4653      	mov	r3, sl
   1ab10:	46a2      	mov	sl, r4
   1ab12:	461c      	mov	r4, r3
   1ab14:	f8da 3000 	ldr.w	r3, [sl]
          seg->next = (*cur_seg);
   1ab18:	602b      	str	r3, [r5, #0]
          (*cur_seg) = seg;
   1ab1a:	f8ca 5000 	str.w	r5, [sl]
   1ab1e:	e72e      	b.n	1a97e <tcp_output+0xca>
    pcb->rttest = tcp_ticks;
   1ab20:	4b1e      	ldr	r3, [pc, #120]	; (1ab9c <tcp_output+0x2e8>)
   1ab22:	681b      	ldr	r3, [r3, #0]
   1ab24:	6363      	str	r3, [r4, #52]	; 0x34
    pcb->rtseq = lwip_ntohl(seg->tcphdr->seqno);
   1ab26:	f8db 0004 	ldr.w	r0, [fp, #4]
   1ab2a:	f7f8 fde9 	bl	13700 <lwip_htonl>
   1ab2e:	f8d5 b00c 	ldr.w	fp, [r5, #12]
   1ab32:	63a0      	str	r0, [r4, #56]	; 0x38
   1ab34:	e7a3      	b.n	1aa7e <tcp_output+0x1ca>
    mss = tcp_eff_send_mss_netif(TCP_MSS, netif, &pcb->remote_ip);
   1ab36:	463a      	mov	r2, r7
   1ab38:	9905      	ldr	r1, [sp, #20]
   1ab3a:	f240 50b4 	movw	r0, #1460	; 0x5b4
   1ab3e:	f7fe f8dd 	bl	18cfc <tcp_eff_send_mss_netif>
    *opts = TCP_BUILD_MSS_OPTION(mss);
   1ab42:	f040 7001 	orr.w	r0, r0, #33816576	; 0x2040000
   1ab46:	f7f8 fddb 	bl	13700 <lwip_htonl>
   1ab4a:	f8cb 0014 	str.w	r0, [fp, #20]
   1ab4e:	f8d5 b00c 	ldr.w	fp, [r5, #12]
   1ab52:	e78b      	b.n	1aa6c <tcp_output+0x1b8>
    if ((tcp_do_output_nagle(pcb) == 0) &&
   1ab54:	f8b1 e008 	ldrh.w	lr, [r1, #8]
   1ab58:	8e60      	ldrh	r0, [r4, #50]	; 0x32
   1ab5a:	4586      	cmp	lr, r0
   1ab5c:	f4bf af2d 	bcs.w	1a9ba <tcp_output+0x106>
   1ab60:	f8b4 0064 	ldrh.w	r0, [r4, #100]	; 0x64
   1ab64:	2800      	cmp	r0, #0
   1ab66:	f43f af28 	beq.w	1a9ba <tcp_output+0x106>
   1ab6a:	f8b4 0066 	ldrh.w	r0, [r4, #102]	; 0x66
   1ab6e:	2807      	cmp	r0, #7
   1ab70:	f63f af23 	bhi.w	1a9ba <tcp_output+0x106>
   1ab74:	f013 0fa0 	tst.w	r3, #160	; 0xa0
   1ab78:	f47f af1f 	bne.w	1a9ba <tcp_output+0x106>
  if (pcb->unsent == NULL) {
   1ab7c:	2900      	cmp	r1, #0
   1ab7e:	f47f aed3 	bne.w	1a928 <tcp_output+0x74>
   1ab82:	e01c      	b.n	1abbe <tcp_output+0x30a>
    if (pcb->flags & TF_ACK_NOW) {
   1ab84:	8b42      	ldrh	r2, [r0, #26]
   1ab86:	0795      	lsls	r5, r2, #30
   1ab88:	f57f aece 	bpl.w	1a928 <tcp_output+0x74>
}
   1ab8c:	b007      	add	sp, #28
   1ab8e:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
      return tcp_send_empty_ack(pcb);
   1ab92:	f7ff be11 	b.w	1a7b8 <tcp_send_empty_ack>
   1ab96:	bf00      	nop
   1ab98:	2000a3fc 	.word	0x2000a3fc
   1ab9c:	2000a3ec 	.word	0x2000a3ec
   1aba0:	4652      	mov	r2, sl
   1aba2:	46a2      	mov	sl, r4
   1aba4:	4614      	mov	r4, r2
   1aba6:	e7b7      	b.n	1ab18 <tcp_output+0x264>
    return netif_get_by_index(pcb->netif_idx);
   1aba8:	f7fc fc4c 	bl	17444 <netif_get_by_index>
   1abac:	9005      	str	r0, [sp, #20]
   1abae:	4603      	mov	r3, r0
   1abb0:	e69f      	b.n	1a8f2 <tcp_output+0x3e>
    return ERR_OK;
   1abb2:	2000      	movs	r0, #0
   1abb4:	4770      	bx	lr
    return ERR_RTE;
   1abb6:	f06f 0003 	mvn.w	r0, #3
   1abba:	e6b9      	b.n	1a930 <tcp_output+0x7c>
   1abbc:	8b63      	ldrh	r3, [r4, #26]
    pcb->unsent_oversize = 0;
   1abbe:	2100      	movs	r1, #0
   1abc0:	461a      	mov	r2, r3
   1abc2:	f8a4 1068 	strh.w	r1, [r4, #104]	; 0x68
   1abc6:	e6af      	b.n	1a928 <tcp_output+0x74>
   1abc8:	8b63      	ldrh	r3, [r4, #26]
   1abca:	6ee1      	ldr	r1, [r4, #108]	; 0x6c
   1abcc:	461a      	mov	r2, r3
  if (pcb->unsent == NULL) {
   1abce:	2900      	cmp	r1, #0
   1abd0:	f47f aeaa 	bne.w	1a928 <tcp_output+0x74>
   1abd4:	e7f3      	b.n	1abbe <tcp_output+0x30a>
    if (wnd == pcb->snd_wnd && pcb->unacked == NULL && pcb->persist_backoff == 0) {
   1abd6:	6f23      	ldr	r3, [r4, #112]	; 0x70
   1abd8:	2b00      	cmp	r3, #0
   1abda:	f47f aea1 	bne.w	1a920 <tcp_output+0x6c>
   1abde:	f894 3099 	ldrb.w	r3, [r4, #153]	; 0x99
   1abe2:	2b00      	cmp	r3, #0
   1abe4:	f47f ae9c 	bne.w	1a920 <tcp_output+0x6c>
      pcb->persist_backoff = 1;
   1abe8:	2201      	movs	r2, #1
      pcb->persist_cnt = 0;
   1abea:	f884 3098 	strb.w	r3, [r4, #152]	; 0x98
      pcb->persist_probe = 0;
   1abee:	f884 309a 	strb.w	r3, [r4, #154]	; 0x9a
      pcb->persist_backoff = 1;
   1abf2:	f884 2099 	strb.w	r2, [r4, #153]	; 0x99
   1abf6:	e693      	b.n	1a920 <tcp_output+0x6c>
      return tcp_send_empty_ack(pcb);
   1abf8:	4620      	mov	r0, r4
   1abfa:	e7c7      	b.n	1ab8c <tcp_output+0x2d8>

0001abfc <tcp_rexmit_rto_commit>:
  if (pcb->nrtx < 0xFF) {
   1abfc:	f890 3042 	ldrb.w	r3, [r0, #66]	; 0x42
   1ac00:	2bff      	cmp	r3, #255	; 0xff
    ++pcb->nrtx;
   1ac02:	bf1c      	itt	ne
   1ac04:	3301      	addne	r3, #1
   1ac06:	f880 3042 	strbne.w	r3, [r0, #66]	; 0x42
  tcp_output(pcb);
   1ac0a:	f7ff be53 	b.w	1a8b4 <tcp_output>
   1ac0e:	bf00      	nop

0001ac10 <tcp_rexmit_rto>:
  if (pcb->unacked == NULL) {
   1ac10:	6f02      	ldr	r2, [r0, #112]	; 0x70
   1ac12:	2a00      	cmp	r2, #0
   1ac14:	d032      	beq.n	1ac7c <tcp_rexmit_rto+0x6c>
{
   1ac16:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if (pcb->unacked == NULL) {
   1ac18:	4614      	mov	r4, r2
  if (seg->p->ref != 1) {
   1ac1a:	6863      	ldr	r3, [r4, #4]
  for (seg = pcb->unacked; seg->next != NULL; seg = seg->next) {
   1ac1c:	6825      	ldr	r5, [r4, #0]
  if (seg->p->ref != 1) {
   1ac1e:	7b9b      	ldrb	r3, [r3, #14]
  for (seg = pcb->unacked; seg->next != NULL; seg = seg->next) {
   1ac20:	b11d      	cbz	r5, 1ac2a <tcp_rexmit_rto+0x1a>
  if (seg->p->ref != 1) {
   1ac22:	2b01      	cmp	r3, #1
   1ac24:	462c      	mov	r4, r5
   1ac26:	d0f8      	beq.n	1ac1a <tcp_rexmit_rto+0xa>
   1ac28:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   1ac2a:	2b01      	cmp	r3, #1
   1ac2c:	d1fc      	bne.n	1ac28 <tcp_rexmit_rto+0x18>
  tcp_set_flags(pcb, TF_RTO);
   1ac2e:	8b43      	ldrh	r3, [r0, #26]
  pcb->rto_end = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
   1ac30:	68e1      	ldr	r1, [r4, #12]
   1ac32:	4606      	mov	r6, r0
  tcp_set_flags(pcb, TF_RTO);
   1ac34:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
  seg->next = pcb->unsent;
   1ac38:	6ec0      	ldr	r0, [r0, #108]	; 0x6c
   1ac3a:	6020      	str	r0, [r4, #0]
  tcp_set_flags(pcb, TF_RTO);
   1ac3c:	8373      	strh	r3, [r6, #26]
  pcb->unsent = pcb->unacked;
   1ac3e:	66f2      	str	r2, [r6, #108]	; 0x6c
  pcb->unacked = NULL;
   1ac40:	6735      	str	r5, [r6, #112]	; 0x70
  pcb->rto_end = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
   1ac42:	6848      	ldr	r0, [r1, #4]
   1ac44:	f7f8 fd5c 	bl	13700 <lwip_htonl>
   1ac48:	68e3      	ldr	r3, [r4, #12]
   1ac4a:	8924      	ldrh	r4, [r4, #8]
   1ac4c:	4607      	mov	r7, r0
   1ac4e:	8998      	ldrh	r0, [r3, #12]
   1ac50:	f7f8 fd52 	bl	136f8 <lwip_htons>
  if (pcb->nrtx < 0xFF) {
   1ac54:	f896 3042 	ldrb.w	r3, [r6, #66]	; 0x42
  pcb->rttest = 0;
   1ac58:	6375      	str	r5, [r6, #52]	; 0x34
  pcb->rto_end = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
   1ac5a:	f010 0003 	ands.w	r0, r0, #3
   1ac5e:	bf18      	it	ne
   1ac60:	2001      	movne	r0, #1
   1ac62:	4427      	add	r7, r4
   1ac64:	4438      	add	r0, r7
  if (pcb->nrtx < 0xFF) {
   1ac66:	2bff      	cmp	r3, #255	; 0xff
  pcb->rto_end = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
   1ac68:	64f0      	str	r0, [r6, #76]	; 0x4c
  if (pcb->nrtx < 0xFF) {
   1ac6a:	d002      	beq.n	1ac72 <tcp_rexmit_rto+0x62>
    ++pcb->nrtx;
   1ac6c:	3301      	adds	r3, #1
   1ac6e:	f886 3042 	strb.w	r3, [r6, #66]	; 0x42
  tcp_output(pcb);
   1ac72:	4630      	mov	r0, r6
}
   1ac74:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
  tcp_output(pcb);
   1ac78:	f7ff be1c 	b.w	1a8b4 <tcp_output>
   1ac7c:	4770      	bx	lr
   1ac7e:	bf00      	nop

0001ac80 <tcp_keepalive>:
 *
 * @param pcb the tcp_pcb for which to send a keepalive packet
 */
err_t
tcp_keepalive(struct tcp_pcb *pcb)
{
   1ac80:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   1ac84:	4604      	mov	r4, r0
  LWIP_DEBUGF(TCP_DEBUG, ("\n"));

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: tcp_ticks %"U32_F"   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
                          tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  p = tcp_output_alloc_header(pcb, optlen, 0, lwip_htonl(pcb->snd_nxt - 1));
   1ac86:	6d00      	ldr	r0, [r0, #80]	; 0x50
{
   1ac88:	b084      	sub	sp, #16
  p = tcp_output_alloc_header(pcb, optlen, 0, lwip_htonl(pcb->snd_nxt - 1));
   1ac8a:	3801      	subs	r0, #1
   1ac8c:	f7f8 fd38 	bl	13700 <lwip_htonl>
  p = pbuf_alloc(PBUF_IP, TCP_HLEN + optlen + datalen, PBUF_RAM);
   1ac90:	f44f 7220 	mov.w	r2, #640	; 0x280
  p = tcp_output_alloc_header(pcb, optlen, 0, lwip_htonl(pcb->snd_nxt - 1));
   1ac94:	4681      	mov	r9, r0
  p = pbuf_alloc(PBUF_IP, TCP_HLEN + optlen + datalen, PBUF_RAM);
   1ac96:	2114      	movs	r1, #20
   1ac98:	2022      	movs	r0, #34	; 0x22
  p = tcp_output_alloc_header_common(pcb->rcv_nxt, optlen, datalen,
   1ac9a:	f8d4 8024 	ldr.w	r8, [r4, #36]	; 0x24
   1ac9e:	8ae5      	ldrh	r5, [r4, #22]
   1aca0:	f8b4 a018 	ldrh.w	sl, [r4, #24]
   1aca4:	8d67      	ldrh	r7, [r4, #42]	; 0x2a
  p = pbuf_alloc(PBUF_IP, TCP_HLEN + optlen + datalen, PBUF_RAM);
   1aca6:	f7fc fbf5 	bl	17494 <pbuf_alloc>
  if (p != NULL) {
   1acaa:	2800      	cmp	r0, #0
   1acac:	d047      	beq.n	1ad3e <tcp_keepalive+0xbe>
   1acae:	4606      	mov	r6, r0
    tcphdr->src = lwip_htons(src_port);
   1acb0:	4628      	mov	r0, r5
    tcphdr = (struct tcp_hdr *)p->payload;
   1acb2:	6875      	ldr	r5, [r6, #4]
    tcphdr->src = lwip_htons(src_port);
   1acb4:	f7f8 fd20 	bl	136f8 <lwip_htons>
   1acb8:	8028      	strh	r0, [r5, #0]
    tcphdr->dest = lwip_htons(dst_port);
   1acba:	4650      	mov	r0, sl
   1acbc:	f7f8 fd1c 	bl	136f8 <lwip_htons>
    tcphdr->seqno = seqno_be;
   1acc0:	f8c5 9004 	str.w	r9, [r5, #4]
    tcphdr->dest = lwip_htons(dst_port);
   1acc4:	8068      	strh	r0, [r5, #2]
    tcphdr->ackno = lwip_htonl(ackno);
   1acc6:	4640      	mov	r0, r8
   1acc8:	f7f8 fd1a 	bl	13700 <lwip_htonl>
   1accc:	60a8      	str	r0, [r5, #8]
    TCPH_HDRLEN_FLAGS_SET(tcphdr, (5 + optlen / 4), flags);
   1acce:	f245 0010 	movw	r0, #20496	; 0x5010
   1acd2:	f7f8 fd11 	bl	136f8 <lwip_htons>
   1acd6:	81a8      	strh	r0, [r5, #12]
    tcphdr->wnd = lwip_htons(wnd);
   1acd8:	4638      	mov	r0, r7
   1acda:	f7f8 fd0d 	bl	136f8 <lwip_htons>
    tcphdr->chksum = 0;
   1acde:	2300      	movs	r3, #0
   1ace0:	742b      	strb	r3, [r5, #16]
   1ace2:	746b      	strb	r3, [r5, #17]
    tcphdr->urgp = 0;
   1ace4:	74ab      	strb	r3, [r5, #18]
   1ace6:	74eb      	strb	r3, [r5, #19]
    tcphdr->wnd = lwip_htons(wnd);
   1ace8:	81e8      	strh	r0, [r5, #14]
    pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
   1acea:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
   1acec:	6a63      	ldr	r3, [r4, #36]	; 0x24
  if ((pcb != NULL) && (pcb->netif_idx != NETIF_NO_INDEX)) {
   1acee:	7a20      	ldrb	r0, [r4, #8]
    pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
   1acf0:	4413      	add	r3, r2
   1acf2:	62e3      	str	r3, [r4, #44]	; 0x2c
    LWIP_DEBUGF(TCP_DEBUG,
                ("tcp_keepalive: could not allocate memory for pbuf\n"));
    return ERR_MEM;
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
   1acf4:	1d25      	adds	r5, r4, #4
  if ((pcb != NULL) && (pcb->netif_idx != NETIF_NO_INDEX)) {
   1acf6:	bb40      	cbnz	r0, 1ad4a <tcp_keepalive+0xca>
    return ip_route(src, dst);
   1acf8:	4628      	mov	r0, r5
   1acfa:	f001 fa01 	bl	1c100 <ip4_route>
   1acfe:	4607      	mov	r7, r0
  if (netif == NULL) {
   1ad00:	b347      	cbz	r7, 1ad54 <tcp_keepalive+0xd4>
      tcphdr->chksum = ip_chksum_pseudo(p, IP_PROTO_TCP, p->tot_len,
   1ad02:	8932      	ldrh	r2, [r6, #8]
      struct tcp_hdr *tcphdr = (struct tcp_hdr *)p->payload;
   1ad04:	f8d6 8004 	ldr.w	r8, [r6, #4]
      tcphdr->chksum = ip_chksum_pseudo(p, IP_PROTO_TCP, p->tot_len,
   1ad08:	9500      	str	r5, [sp, #0]
   1ad0a:	4623      	mov	r3, r4
   1ad0c:	2106      	movs	r1, #6
   1ad0e:	4630      	mov	r0, r6
   1ad10:	f000 feb0 	bl	1ba74 <ip_chksum_pseudo>
   1ad14:	f8a8 0010 	strh.w	r0, [r8, #16]
    err = ip_output_if(p, src, dst, ttl, tos, IP_PROTO_TCP, netif);
   1ad18:	7aa1      	ldrb	r1, [r4, #10]
   1ad1a:	7ae3      	ldrb	r3, [r4, #11]
   1ad1c:	9100      	str	r1, [sp, #0]
   1ad1e:	2006      	movs	r0, #6
   1ad20:	4621      	mov	r1, r4
   1ad22:	9001      	str	r0, [sp, #4]
   1ad24:	9702      	str	r7, [sp, #8]
   1ad26:	462a      	mov	r2, r5
   1ad28:	4630      	mov	r0, r6
   1ad2a:	f001 fb3f 	bl	1c3ac <ip4_output_if>
   1ad2e:	4604      	mov	r4, r0
  pbuf_free(p);
   1ad30:	4630      	mov	r0, r6
   1ad32:	f7fc fd5b 	bl	177ec <pbuf_free>

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: seqno %"U32_F" ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
}
   1ad36:	4620      	mov	r0, r4
   1ad38:	b004      	add	sp, #16
   1ad3a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    return ERR_MEM;
   1ad3e:	f04f 34ff 	mov.w	r4, #4294967295
}
   1ad42:	4620      	mov	r0, r4
   1ad44:	b004      	add	sp, #16
   1ad46:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    return netif_get_by_index(pcb->netif_idx);
   1ad4a:	f7fc fb7b 	bl	17444 <netif_get_by_index>
   1ad4e:	4607      	mov	r7, r0
  if (netif == NULL) {
   1ad50:	2f00      	cmp	r7, #0
   1ad52:	d1d6      	bne.n	1ad02 <tcp_keepalive+0x82>
    err = ERR_RTE;
   1ad54:	f06f 0403 	mvn.w	r4, #3
   1ad58:	e7ea      	b.n	1ad30 <tcp_keepalive+0xb0>
   1ad5a:	bf00      	nop

0001ad5c <tcp_zero_window_probe>:
 *
 * @param pcb the tcp_pcb for which to send a zero-window probe packet
 */
err_t
tcp_zero_window_probe(struct tcp_pcb *pcb)
{
   1ad5c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
              ("tcp_zero_window_probe: tcp_ticks %"U32_F
               "   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
               tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  /* Only consider unsent, persist timer should be off when there is data in-flight */
  seg = pcb->unsent;
   1ad60:	6ec5      	ldr	r5, [r0, #108]	; 0x6c
{
   1ad62:	b087      	sub	sp, #28
  if (seg == NULL) {
   1ad64:	2d00      	cmp	r5, #0
   1ad66:	f000 808b 	beq.w	1ae80 <tcp_zero_window_probe+0x124>

  /* increment probe count. NOTE: we record probe even if it fails
     to actually transmit due to an error. This ensures memory exhaustion/
     routing problem doesn't leave a zero-window pcb as an indefinite zombie.
     RTO mechanism has similar behavior, see pcb->nrtx */
  if (pcb->persist_probe < 0xFF) {
   1ad6a:	f890 309a 	ldrb.w	r3, [r0, #154]	; 0x9a
   1ad6e:	2bff      	cmp	r3, #255	; 0xff
    ++pcb->persist_probe;
   1ad70:	bf1c      	itt	ne
   1ad72:	3301      	addne	r3, #1
   1ad74:	f880 309a 	strbne.w	r3, [r0, #154]	; 0x9a
  }

  is_fin = ((TCPH_FLAGS(seg->tcphdr) & TCP_FIN) != 0) && (seg->len == 0);
   1ad78:	68eb      	ldr	r3, [r5, #12]
   1ad7a:	4604      	mov	r4, r0
   1ad7c:	8998      	ldrh	r0, [r3, #12]
   1ad7e:	f7f8 fcbb 	bl	136f8 <lwip_htons>
   1ad82:	f010 0001 	ands.w	r0, r0, #1
   1ad86:	d17f      	bne.n	1ae88 <tcp_zero_window_probe+0x12c>
   1ad88:	9005      	str	r0, [sp, #20]
   1ad8a:	2115      	movs	r1, #21
  /* we want to send one seqno: either FIN or data (no options) */
  len = is_fin ? 0 : 1;

  p = tcp_output_alloc_header(pcb, optlen, len, seg->tcphdr->seqno);
   1ad8c:	68eb      	ldr	r3, [r5, #12]
  p = tcp_output_alloc_header_common(pcb->rcv_nxt, optlen, datalen,
   1ad8e:	f8d4 8024 	ldr.w	r8, [r4, #36]	; 0x24
  p = tcp_output_alloc_header(pcb, optlen, len, seg->tcphdr->seqno);
   1ad92:	f8d3 9004 	ldr.w	r9, [r3, #4]
  p = tcp_output_alloc_header_common(pcb->rcv_nxt, optlen, datalen,
   1ad96:	f8b4 b016 	ldrh.w	fp, [r4, #22]
   1ad9a:	f8b4 a018 	ldrh.w	sl, [r4, #24]
   1ad9e:	8d67      	ldrh	r7, [r4, #42]	; 0x2a
  p = pbuf_alloc(PBUF_IP, TCP_HLEN + optlen + datalen, PBUF_RAM);
   1ada0:	f44f 7220 	mov.w	r2, #640	; 0x280
   1ada4:	2022      	movs	r0, #34	; 0x22
   1ada6:	f7fc fb75 	bl	17494 <pbuf_alloc>
  if (p != NULL) {
   1adaa:	4606      	mov	r6, r0
   1adac:	2800      	cmp	r0, #0
   1adae:	f000 808c 	beq.w	1aeca <tcp_zero_window_probe+0x16e>
    tcphdr->src = lwip_htons(src_port);
   1adb2:	4658      	mov	r0, fp
    tcphdr = (struct tcp_hdr *)p->payload;
   1adb4:	f8d6 b004 	ldr.w	fp, [r6, #4]
    tcphdr->src = lwip_htons(src_port);
   1adb8:	f7f8 fc9e 	bl	136f8 <lwip_htons>
   1adbc:	f8ab 0000 	strh.w	r0, [fp]
    tcphdr->dest = lwip_htons(dst_port);
   1adc0:	4650      	mov	r0, sl
   1adc2:	f7f8 fc99 	bl	136f8 <lwip_htons>
    tcphdr->seqno = seqno_be;
   1adc6:	f8cb 9004 	str.w	r9, [fp, #4]
    tcphdr->dest = lwip_htons(dst_port);
   1adca:	f8ab 0002 	strh.w	r0, [fp, #2]
    tcphdr->ackno = lwip_htonl(ackno);
   1adce:	4640      	mov	r0, r8
   1add0:	f7f8 fc96 	bl	13700 <lwip_htonl>
   1add4:	f8cb 0008 	str.w	r0, [fp, #8]
    TCPH_HDRLEN_FLAGS_SET(tcphdr, (5 + optlen / 4), flags);
   1add8:	f245 0010 	movw	r0, #20496	; 0x5010
   1addc:	f7f8 fc8c 	bl	136f8 <lwip_htons>
   1ade0:	f8ab 000c 	strh.w	r0, [fp, #12]
    tcphdr->wnd = lwip_htons(wnd);
   1ade4:	4638      	mov	r0, r7
   1ade6:	f7f8 fc87 	bl	136f8 <lwip_htons>
    pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
   1adea:	8d61      	ldrh	r1, [r4, #42]	; 0x2a
   1adec:	6a62      	ldr	r2, [r4, #36]	; 0x24
  if (p == NULL) {
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: no memory for pbuf\n"));
    return ERR_MEM;
  }
  tcphdr = (struct tcp_hdr *)p->payload;
   1adee:	f8d6 8004 	ldr.w	r8, [r6, #4]
    tcphdr->wnd = lwip_htons(wnd);
   1adf2:	f8ab 000e 	strh.w	r0, [fp, #14]
    tcphdr->chksum = 0;
   1adf6:	2300      	movs	r3, #0
   1adf8:	f88b 3010 	strb.w	r3, [fp, #16]
   1adfc:	f88b 3011 	strb.w	r3, [fp, #17]
    tcphdr->urgp = 0;
   1ae00:	f88b 3012 	strb.w	r3, [fp, #18]
   1ae04:	f88b 3013 	strb.w	r3, [fp, #19]

  if (is_fin) {
   1ae08:	9b05      	ldr	r3, [sp, #20]
    pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
   1ae0a:	440a      	add	r2, r1
   1ae0c:	62e2      	str	r2, [r4, #44]	; 0x2c
  if (is_fin) {
   1ae0e:	2b00      	cmp	r3, #0
   1ae10:	d043      	beq.n	1ae9a <tcp_zero_window_probe+0x13e>
    /* FIN segment, no data */
    TCPH_FLAGS_SET(tcphdr, TCP_ACK | TCP_FIN);
   1ae12:	2011      	movs	r0, #17
   1ae14:	f9b8 700c 	ldrsh.w	r7, [r8, #12]
   1ae18:	f7f8 fc6e 	bl	136f8 <lwip_htons>
   1ae1c:	f427 577c 	bic.w	r7, r7, #16128	; 0x3f00
   1ae20:	4338      	orrs	r0, r7
   1ae22:	f8a8 000c 	strh.w	r0, [r8, #12]
       Ensure we copy the first TCP data byte: */
    pbuf_copy_partial(seg->p, d, 1, seg->p->tot_len - seg->len);
  }

  /* The byte may be acknowledged without the window being opened. */
  snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + 1;
   1ae26:	68eb      	ldr	r3, [r5, #12]
   1ae28:	6858      	ldr	r0, [r3, #4]
   1ae2a:	f7f8 fc69 	bl	13700 <lwip_htonl>
  if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
   1ae2e:	6d23      	ldr	r3, [r4, #80]	; 0x50
  snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + 1;
   1ae30:	3001      	adds	r0, #1
  if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
   1ae32:	1a1b      	subs	r3, r3, r0
   1ae34:	2b00      	cmp	r3, #0
   1ae36:	db3b      	blt.n	1aeb0 <tcp_zero_window_probe+0x154>
  if ((pcb != NULL) && (pcb->netif_idx != NETIF_NO_INDEX)) {
   1ae38:	7a20      	ldrb	r0, [r4, #8]
    pcb->snd_nxt = snd_nxt;
  }
  tcp_output_fill_options(pcb, p, 0, optlen);

  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
   1ae3a:	1d25      	adds	r5, r4, #4
  if ((pcb != NULL) && (pcb->netif_idx != NETIF_NO_INDEX)) {
   1ae3c:	2800      	cmp	r0, #0
   1ae3e:	d13c      	bne.n	1aeba <tcp_zero_window_probe+0x15e>
    return ip_route(src, dst);
   1ae40:	4628      	mov	r0, r5
   1ae42:	f001 f95d 	bl	1c100 <ip4_route>
   1ae46:	4607      	mov	r7, r0
  if (netif == NULL) {
   1ae48:	2f00      	cmp	r7, #0
   1ae4a:	d03b      	beq.n	1aec4 <tcp_zero_window_probe+0x168>
      tcphdr->chksum = ip_chksum_pseudo(p, IP_PROTO_TCP, p->tot_len,
   1ae4c:	8932      	ldrh	r2, [r6, #8]
      struct tcp_hdr *tcphdr = (struct tcp_hdr *)p->payload;
   1ae4e:	f8d6 8004 	ldr.w	r8, [r6, #4]
      tcphdr->chksum = ip_chksum_pseudo(p, IP_PROTO_TCP, p->tot_len,
   1ae52:	9500      	str	r5, [sp, #0]
   1ae54:	4623      	mov	r3, r4
   1ae56:	2106      	movs	r1, #6
   1ae58:	4630      	mov	r0, r6
   1ae5a:	f000 fe0b 	bl	1ba74 <ip_chksum_pseudo>
   1ae5e:	f8a8 0010 	strh.w	r0, [r8, #16]
    err = ip_output_if(p, src, dst, ttl, tos, IP_PROTO_TCP, netif);
   1ae62:	7aa1      	ldrb	r1, [r4, #10]
   1ae64:	7ae3      	ldrb	r3, [r4, #11]
   1ae66:	9100      	str	r1, [sp, #0]
   1ae68:	2006      	movs	r0, #6
   1ae6a:	462a      	mov	r2, r5
   1ae6c:	9001      	str	r0, [sp, #4]
   1ae6e:	9702      	str	r7, [sp, #8]
   1ae70:	4621      	mov	r1, r4
   1ae72:	4630      	mov	r0, r6
   1ae74:	f001 fa9a 	bl	1c3ac <ip4_output_if>
   1ae78:	4605      	mov	r5, r0
  pbuf_free(p);
   1ae7a:	4630      	mov	r0, r6
   1ae7c:	f7fc fcb6 	bl	177ec <pbuf_free>

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: seqno %"U32_F
                          " ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
}
   1ae80:	4628      	mov	r0, r5
   1ae82:	b007      	add	sp, #28
   1ae84:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  is_fin = ((TCPH_FLAGS(seg->tcphdr) & TCP_FIN) != 0) && (seg->len == 0);
   1ae88:	892b      	ldrh	r3, [r5, #8]
   1ae8a:	2b00      	cmp	r3, #0
   1ae8c:	bf15      	itete	ne
   1ae8e:	2300      	movne	r3, #0
   1ae90:	2301      	moveq	r3, #1
   1ae92:	2115      	movne	r1, #21
   1ae94:	2114      	moveq	r1, #20
   1ae96:	9305      	str	r3, [sp, #20]
   1ae98:	e778      	b.n	1ad8c <tcp_zero_window_probe+0x30>
    pbuf_copy_partial(seg->p, d, 1, seg->p->tot_len - seg->len);
   1ae9a:	6868      	ldr	r0, [r5, #4]
   1ae9c:	892a      	ldrh	r2, [r5, #8]
   1ae9e:	8903      	ldrh	r3, [r0, #8]
   1aea0:	1a9b      	subs	r3, r3, r2
   1aea2:	f108 0114 	add.w	r1, r8, #20
   1aea6:	b29b      	uxth	r3, r3
   1aea8:	2201      	movs	r2, #1
   1aeaa:	f7fc fd75 	bl	17998 <pbuf_copy_partial>
   1aeae:	e7ba      	b.n	1ae26 <tcp_zero_window_probe+0xca>
    pcb->snd_nxt = snd_nxt;
   1aeb0:	6520      	str	r0, [r4, #80]	; 0x50
  if ((pcb != NULL) && (pcb->netif_idx != NETIF_NO_INDEX)) {
   1aeb2:	7a20      	ldrb	r0, [r4, #8]
  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
   1aeb4:	1d25      	adds	r5, r4, #4
  if ((pcb != NULL) && (pcb->netif_idx != NETIF_NO_INDEX)) {
   1aeb6:	2800      	cmp	r0, #0
   1aeb8:	d0c2      	beq.n	1ae40 <tcp_zero_window_probe+0xe4>
    return netif_get_by_index(pcb->netif_idx);
   1aeba:	f7fc fac3 	bl	17444 <netif_get_by_index>
   1aebe:	4607      	mov	r7, r0
  if (netif == NULL) {
   1aec0:	2f00      	cmp	r7, #0
   1aec2:	d1c3      	bne.n	1ae4c <tcp_zero_window_probe+0xf0>
    err = ERR_RTE;
   1aec4:	f06f 0503 	mvn.w	r5, #3
   1aec8:	e7d7      	b.n	1ae7a <tcp_zero_window_probe+0x11e>
    return ERR_MEM;
   1aeca:	f04f 35ff 	mov.w	r5, #4294967295
}
   1aece:	4628      	mov	r0, r5
   1aed0:	b007      	add	sp, #28
   1aed2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1aed6:	bf00      	nop

0001aed8 <tcpip_tcp_timer>:
 *
 * @param arg unused argument
 */
static void
tcpip_tcp_timer(void *arg)
{
   1aed8:	b538      	push	{r3, r4, r5, lr}
  LWIP_UNUSED_ARG(arg);

  /* call TCP timer handler */
  tcp_tmr();
   1aeda:	f7fd fd21 	bl	18920 <tcp_tmr>
  /* timer still needed? */
  if (tcp_active_pcbs || tcp_tw_pcbs) {
   1aede:	4b17      	ldr	r3, [pc, #92]	; (1af3c <tcpip_tcp_timer+0x64>)
   1aee0:	681b      	ldr	r3, [r3, #0]
   1aee2:	b303      	cbz	r3, 1af26 <tcpip_tcp_timer+0x4e>

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("Timeout time too long, max is LWIP_UINT32_MAX/4 msecs", msecs <= (LWIP_UINT32_MAX / 4));

  next_timeout_time = (u32_t)(Milliseconds() + msecs); /* overflow handled by TIME_LESS_THAN macro */ 
   1aee4:	f7ed fbea 	bl	86bc <Milliseconds>
   1aee8:	f100 04fa 	add.w	r4, r0, #250	; 0xfa
  timeout = (struct sys_timeo *)memp_malloc(MEMP_SYS_TIMEOUT);
   1aeec:	2007      	movs	r0, #7
   1aeee:	f7fc f91b 	bl	17128 <memp_malloc>
  if (timeout == NULL) {
   1aef2:	b1f0      	cbz	r0, 1af32 <tcpip_tcp_timer+0x5a>
  if (next_timeout == NULL) {
   1aef4:	4a12      	ldr	r2, [pc, #72]	; (1af40 <tcpip_tcp_timer+0x68>)
  timeout->h = handler;
   1aef6:	4d13      	ldr	r5, [pc, #76]	; (1af44 <tcpip_tcp_timer+0x6c>)
  if (next_timeout == NULL) {
   1aef8:	6811      	ldr	r1, [r2, #0]
  timeout->time = abs_time;
   1aefa:	6044      	str	r4, [r0, #4]
  timeout->next = NULL;
   1aefc:	2300      	movs	r3, #0
   1aefe:	6003      	str	r3, [r0, #0]
  timeout->arg = arg;
   1af00:	60c3      	str	r3, [r0, #12]
  timeout->h = handler;
   1af02:	6085      	str	r5, [r0, #8]
  if (next_timeout == NULL) {
   1af04:	b1b9      	cbz	r1, 1af36 <tcpip_tcp_timer+0x5e>
  if (TIME_LESS_THAN(timeout->time, next_timeout->time)) {
   1af06:	684b      	ldr	r3, [r1, #4]
   1af08:	1ae3      	subs	r3, r4, r3
   1af0a:	2b00      	cmp	r3, #0
   1af0c:	da05      	bge.n	1af1a <tcpip_tcp_timer+0x42>
   1af0e:	e011      	b.n	1af34 <tcpip_tcp_timer+0x5c>
      if ((t->next == NULL) || TIME_LESS_THAN(timeout->time, t->next->time)) {
   1af10:	685a      	ldr	r2, [r3, #4]
   1af12:	1aa2      	subs	r2, r4, r2
   1af14:	2a00      	cmp	r2, #0
   1af16:	db03      	blt.n	1af20 <tcpip_tcp_timer+0x48>
   1af18:	4619      	mov	r1, r3
   1af1a:	680b      	ldr	r3, [r1, #0]
   1af1c:	2b00      	cmp	r3, #0
   1af1e:	d1f7      	bne.n	1af10 <tcpip_tcp_timer+0x38>
        timeout->next = t->next;
   1af20:	6003      	str	r3, [r0, #0]
        t->next = timeout;
   1af22:	6008      	str	r0, [r1, #0]
   1af24:	bd38      	pop	{r3, r4, r5, pc}
  if (tcp_active_pcbs || tcp_tw_pcbs) {
   1af26:	4b08      	ldr	r3, [pc, #32]	; (1af48 <tcpip_tcp_timer+0x70>)
   1af28:	681b      	ldr	r3, [r3, #0]
   1af2a:	2b00      	cmp	r3, #0
   1af2c:	d1da      	bne.n	1aee4 <tcpip_tcp_timer+0xc>
    tcpip_tcp_timer_active = 0;
   1af2e:	4a04      	ldr	r2, [pc, #16]	; (1af40 <tcpip_tcp_timer+0x68>)
   1af30:	6053      	str	r3, [r2, #4]
   1af32:	bd38      	pop	{r3, r4, r5, pc}
    timeout->next = next_timeout;
   1af34:	6001      	str	r1, [r0, #0]
    next_timeout = timeout;
   1af36:	6010      	str	r0, [r2, #0]
   1af38:	bd38      	pop	{r3, r4, r5, pc}
   1af3a:	bf00      	nop
   1af3c:	2000a3e8 	.word	0x2000a3e8
   1af40:	20002940 	.word	0x20002940
   1af44:	0001aed9 	.word	0x0001aed9
   1af48:	2000a3f8 	.word	0x2000a3f8

0001af4c <lwip_cyclic_timer>:
{
   1af4c:	b570      	push	{r4, r5, r6, lr}
   1af4e:	4605      	mov	r5, r0
  next_timeout_time = (u32_t)(current_timeout_due_time + cyclic->interval_ms);  /* overflow handled by TIME_LESS_THAN macro */ 
   1af50:	4e24      	ldr	r6, [pc, #144]	; (1afe4 <lwip_cyclic_timer+0x98>)
  cyclic->handler();
   1af52:	6843      	ldr	r3, [r0, #4]
   1af54:	4798      	blx	r3
  now = Milliseconds();
   1af56:	f7ed fbb1 	bl	86bc <Milliseconds>
  next_timeout_time = (u32_t)(current_timeout_due_time + cyclic->interval_ms);  /* overflow handled by TIME_LESS_THAN macro */ 
   1af5a:	682b      	ldr	r3, [r5, #0]
   1af5c:	68b4      	ldr	r4, [r6, #8]
   1af5e:	441c      	add	r4, r3
  if (TIME_LESS_THAN(next_timeout_time, now)) {
   1af60:	1a21      	subs	r1, r4, r0
   1af62:	2900      	cmp	r1, #0
   1af64:	db1f      	blt.n	1afa6 <lwip_cyclic_timer+0x5a>
  timeout = (struct sys_timeo *)memp_malloc(MEMP_SYS_TIMEOUT);
   1af66:	2007      	movs	r0, #7
   1af68:	f7fc f8de 	bl	17128 <memp_malloc>
  if (timeout == NULL) {
   1af6c:	b1b8      	cbz	r0, 1af9e <lwip_cyclic_timer+0x52>
  if (next_timeout == NULL) {
   1af6e:	6831      	ldr	r1, [r6, #0]
  timeout->h = handler;
   1af70:	4b1d      	ldr	r3, [pc, #116]	; (1afe8 <lwip_cyclic_timer+0x9c>)
  timeout->arg = arg;
   1af72:	60c5      	str	r5, [r0, #12]
  timeout->next = NULL;
   1af74:	2200      	movs	r2, #0
   1af76:	e880 0014 	stmia.w	r0, {r2, r4}
  timeout->h = handler;
   1af7a:	6083      	str	r3, [r0, #8]
  if (next_timeout == NULL) {
   1af7c:	b189      	cbz	r1, 1afa2 <lwip_cyclic_timer+0x56>
  if (TIME_LESS_THAN(timeout->time, next_timeout->time)) {
   1af7e:	684b      	ldr	r3, [r1, #4]
   1af80:	1ae3      	subs	r3, r4, r3
   1af82:	2b00      	cmp	r3, #0
   1af84:	da05      	bge.n	1af92 <lwip_cyclic_timer+0x46>
   1af86:	e00b      	b.n	1afa0 <lwip_cyclic_timer+0x54>
      if ((t->next == NULL) || TIME_LESS_THAN(timeout->time, t->next->time)) {
   1af88:	685a      	ldr	r2, [r3, #4]
   1af8a:	1aa2      	subs	r2, r4, r2
   1af8c:	2a00      	cmp	r2, #0
   1af8e:	db03      	blt.n	1af98 <lwip_cyclic_timer+0x4c>
   1af90:	4619      	mov	r1, r3
   1af92:	680b      	ldr	r3, [r1, #0]
   1af94:	2b00      	cmp	r3, #0
   1af96:	d1f7      	bne.n	1af88 <lwip_cyclic_timer+0x3c>
        timeout->next = t->next;
   1af98:	6003      	str	r3, [r0, #0]
        t->next = timeout;
   1af9a:	6008      	str	r0, [r1, #0]
   1af9c:	bd70      	pop	{r4, r5, r6, pc}
   1af9e:	bd70      	pop	{r4, r5, r6, pc}
    timeout->next = next_timeout;
   1afa0:	6001      	str	r1, [r0, #0]
    next_timeout = timeout;
   1afa2:	6030      	str	r0, [r6, #0]
   1afa4:	bd70      	pop	{r4, r5, r6, pc}
   1afa6:	4602      	mov	r2, r0
  timeout = (struct sys_timeo *)memp_malloc(MEMP_SYS_TIMEOUT);
   1afa8:	2007      	movs	r0, #7
    sys_timeout_abs((u32_t)(now + cyclic->interval_ms), lwip_cyclic_timer, arg);
   1afaa:	18d4      	adds	r4, r2, r3
  timeout = (struct sys_timeo *)memp_malloc(MEMP_SYS_TIMEOUT);
   1afac:	f7fc f8bc 	bl	17128 <memp_malloc>
  if (timeout == NULL) {
   1afb0:	2800      	cmp	r0, #0
   1afb2:	d0f4      	beq.n	1af9e <lwip_cyclic_timer+0x52>
  if (next_timeout == NULL) {
   1afb4:	6831      	ldr	r1, [r6, #0]
  timeout->h = handler;
   1afb6:	4b0c      	ldr	r3, [pc, #48]	; (1afe8 <lwip_cyclic_timer+0x9c>)
  timeout->arg = arg;
   1afb8:	60c5      	str	r5, [r0, #12]
  timeout->next = NULL;
   1afba:	2200      	movs	r2, #0
   1afbc:	e880 0014 	stmia.w	r0, {r2, r4}
  timeout->h = handler;
   1afc0:	6083      	str	r3, [r0, #8]
  if (next_timeout == NULL) {
   1afc2:	2900      	cmp	r1, #0
   1afc4:	d0ed      	beq.n	1afa2 <lwip_cyclic_timer+0x56>
  if (TIME_LESS_THAN(timeout->time, next_timeout->time)) {
   1afc6:	684b      	ldr	r3, [r1, #4]
   1afc8:	1ae3      	subs	r3, r4, r3
   1afca:	2b00      	cmp	r3, #0
   1afcc:	da05      	bge.n	1afda <lwip_cyclic_timer+0x8e>
   1afce:	e7e7      	b.n	1afa0 <lwip_cyclic_timer+0x54>
      if ((t->next == NULL) || TIME_LESS_THAN(timeout->time, t->next->time)) {
   1afd0:	685a      	ldr	r2, [r3, #4]
   1afd2:	1aa2      	subs	r2, r4, r2
   1afd4:	2a00      	cmp	r2, #0
   1afd6:	dbdf      	blt.n	1af98 <lwip_cyclic_timer+0x4c>
   1afd8:	4619      	mov	r1, r3
   1afda:	680b      	ldr	r3, [r1, #0]
   1afdc:	2b00      	cmp	r3, #0
   1afde:	d1f7      	bne.n	1afd0 <lwip_cyclic_timer+0x84>
   1afe0:	e7da      	b.n	1af98 <lwip_cyclic_timer+0x4c>
   1afe2:	bf00      	nop
   1afe4:	20002940 	.word	0x20002940
   1afe8:	0001af4d 	.word	0x0001af4d

0001afec <tcp_timer_needed>:
{
   1afec:	b538      	push	{r3, r4, r5, lr}
  if (!tcpip_tcp_timer_active && (tcp_active_pcbs || tcp_tw_pcbs)) {
   1afee:	4d18      	ldr	r5, [pc, #96]	; (1b050 <tcp_timer_needed+0x64>)
   1aff0:	686b      	ldr	r3, [r5, #4]
   1aff2:	bb43      	cbnz	r3, 1b046 <tcp_timer_needed+0x5a>
   1aff4:	4b17      	ldr	r3, [pc, #92]	; (1b054 <tcp_timer_needed+0x68>)
   1aff6:	681b      	ldr	r3, [r3, #0]
   1aff8:	b30b      	cbz	r3, 1b03e <tcp_timer_needed+0x52>
    tcpip_tcp_timer_active = 1;
   1affa:	2301      	movs	r3, #1
   1affc:	606b      	str	r3, [r5, #4]
  next_timeout_time = (u32_t)(Milliseconds() + msecs); /* overflow handled by TIME_LESS_THAN macro */ 
   1affe:	f7ed fb5d 	bl	86bc <Milliseconds>
   1b002:	f100 04fa 	add.w	r4, r0, #250	; 0xfa
  timeout = (struct sys_timeo *)memp_malloc(MEMP_SYS_TIMEOUT);
   1b006:	2007      	movs	r0, #7
   1b008:	f7fc f88e 	bl	17128 <memp_malloc>
  if (timeout == NULL) {
   1b00c:	b1d8      	cbz	r0, 1b046 <tcp_timer_needed+0x5a>
  if (next_timeout == NULL) {
   1b00e:	6829      	ldr	r1, [r5, #0]
  timeout->h = handler;
   1b010:	4a11      	ldr	r2, [pc, #68]	; (1b058 <tcp_timer_needed+0x6c>)
  timeout->time = abs_time;
   1b012:	6044      	str	r4, [r0, #4]
  timeout->next = NULL;
   1b014:	2300      	movs	r3, #0
   1b016:	6003      	str	r3, [r0, #0]
  timeout->arg = arg;
   1b018:	60c3      	str	r3, [r0, #12]
  timeout->h = handler;
   1b01a:	6082      	str	r2, [r0, #8]
  if (next_timeout == NULL) {
   1b01c:	b1a9      	cbz	r1, 1b04a <tcp_timer_needed+0x5e>
  if (TIME_LESS_THAN(timeout->time, next_timeout->time)) {
   1b01e:	684b      	ldr	r3, [r1, #4]
   1b020:	1ae3      	subs	r3, r4, r3
   1b022:	2b00      	cmp	r3, #0
   1b024:	da05      	bge.n	1b032 <tcp_timer_needed+0x46>
   1b026:	e00f      	b.n	1b048 <tcp_timer_needed+0x5c>
      if ((t->next == NULL) || TIME_LESS_THAN(timeout->time, t->next->time)) {
   1b028:	685a      	ldr	r2, [r3, #4]
   1b02a:	1aa2      	subs	r2, r4, r2
   1b02c:	2a00      	cmp	r2, #0
   1b02e:	db03      	blt.n	1b038 <tcp_timer_needed+0x4c>
   1b030:	4619      	mov	r1, r3
   1b032:	680b      	ldr	r3, [r1, #0]
   1b034:	2b00      	cmp	r3, #0
   1b036:	d1f7      	bne.n	1b028 <tcp_timer_needed+0x3c>
        timeout->next = t->next;
   1b038:	6003      	str	r3, [r0, #0]
        t->next = timeout;
   1b03a:	6008      	str	r0, [r1, #0]
   1b03c:	bd38      	pop	{r3, r4, r5, pc}
  if (!tcpip_tcp_timer_active && (tcp_active_pcbs || tcp_tw_pcbs)) {
   1b03e:	4b07      	ldr	r3, [pc, #28]	; (1b05c <tcp_timer_needed+0x70>)
   1b040:	681b      	ldr	r3, [r3, #0]
   1b042:	2b00      	cmp	r3, #0
   1b044:	d1d9      	bne.n	1affa <tcp_timer_needed+0xe>
   1b046:	bd38      	pop	{r3, r4, r5, pc}
    timeout->next = next_timeout;
   1b048:	6001      	str	r1, [r0, #0]
    next_timeout = timeout;
   1b04a:	6028      	str	r0, [r5, #0]
   1b04c:	bd38      	pop	{r3, r4, r5, pc}
   1b04e:	bf00      	nop
   1b050:	20002940 	.word	0x20002940
   1b054:	2000a3e8 	.word	0x2000a3e8
   1b058:	0001aed9 	.word	0x0001aed9
   1b05c:	2000a3f8 	.word	0x2000a3f8

0001b060 <sys_timeouts_init>:
{
   1b060:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1b064:	f8df 8060 	ldr.w	r8, [pc, #96]	; 1b0c8 <sys_timeouts_init+0x68>
  timeout->h = handler;
   1b068:	4f15      	ldr	r7, [pc, #84]	; (1b0c0 <sys_timeouts_init+0x60>)
  if (next_timeout == NULL) {
   1b06a:	4d16      	ldr	r5, [pc, #88]	; (1b0c4 <sys_timeouts_init+0x64>)
   1b06c:	f108 0630 	add.w	r6, r8, #48	; 0x30
    sys_timeout(lwip_cyclic_timers[i].interval_ms, lwip_cyclic_timer, LWIP_CONST_CAST(void *, &lwip_cyclic_timers[i]));
   1b070:	f858 4f08 	ldr.w	r4, [r8, #8]!
  next_timeout_time = (u32_t)(Milliseconds() + msecs); /* overflow handled by TIME_LESS_THAN macro */ 
   1b074:	f7ed fb22 	bl	86bc <Milliseconds>
   1b078:	4404      	add	r4, r0
  timeout = (struct sys_timeo *)memp_malloc(MEMP_SYS_TIMEOUT);
   1b07a:	2007      	movs	r0, #7
   1b07c:	f7fc f854 	bl	17128 <memp_malloc>
  if (timeout == NULL) {
   1b080:	b1b0      	cbz	r0, 1b0b0 <sys_timeouts_init+0x50>
  if (next_timeout == NULL) {
   1b082:	6829      	ldr	r1, [r5, #0]
  timeout->h = handler;
   1b084:	6087      	str	r7, [r0, #8]
  timeout->next = NULL;
   1b086:	2300      	movs	r3, #0
  timeout->arg = arg;
   1b088:	f8c0 800c 	str.w	r8, [r0, #12]
  timeout->next = NULL;
   1b08c:	e880 0018 	stmia.w	r0, {r3, r4}
  if (next_timeout == NULL) {
   1b090:	b199      	cbz	r1, 1b0ba <sys_timeouts_init+0x5a>
  if (TIME_LESS_THAN(timeout->time, next_timeout->time)) {
   1b092:	684b      	ldr	r3, [r1, #4]
   1b094:	1ae3      	subs	r3, r4, r3
   1b096:	2b00      	cmp	r3, #0
   1b098:	da05      	bge.n	1b0a6 <sys_timeouts_init+0x46>
   1b09a:	e00d      	b.n	1b0b8 <sys_timeouts_init+0x58>
      if ((t->next == NULL) || TIME_LESS_THAN(timeout->time, t->next->time)) {
   1b09c:	685a      	ldr	r2, [r3, #4]
   1b09e:	1aa2      	subs	r2, r4, r2
   1b0a0:	2a00      	cmp	r2, #0
   1b0a2:	db03      	blt.n	1b0ac <sys_timeouts_init+0x4c>
   1b0a4:	4619      	mov	r1, r3
   1b0a6:	680b      	ldr	r3, [r1, #0]
   1b0a8:	2b00      	cmp	r3, #0
   1b0aa:	d1f7      	bne.n	1b09c <sys_timeouts_init+0x3c>
        timeout->next = t->next;
   1b0ac:	6003      	str	r3, [r0, #0]
        t->next = timeout;
   1b0ae:	6008      	str	r0, [r1, #0]
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
   1b0b0:	4546      	cmp	r6, r8
   1b0b2:	d1dd      	bne.n	1b070 <sys_timeouts_init+0x10>
}
   1b0b4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    timeout->next = next_timeout;
   1b0b8:	6001      	str	r1, [r0, #0]
    next_timeout = timeout;
   1b0ba:	6028      	str	r0, [r5, #0]
   1b0bc:	e7f8      	b.n	1b0b0 <sys_timeouts_init+0x50>
   1b0be:	bf00      	nop
   1b0c0:	0001af4d 	.word	0x0001af4d
   1b0c4:	20002940 	.word	0x20002940
   1b0c8:	0002d6fc 	.word	0x0002d6fc

0001b0cc <sys_check_timeouts>:
 *
 * Must be called periodically from your main loop.
 */
void
sys_check_timeouts(void)
{
   1b0cc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  u32_t now;

  LWIP_ASSERT_CORE_LOCKED();

  /* Process only timers expired at the start of the function. */
  now = Milliseconds();
   1b0d0:	f7ed faf4 	bl	86bc <Milliseconds>
   1b0d4:	4e12      	ldr	r6, [pc, #72]	; (1b120 <sys_check_timeouts+0x54>)
   1b0d6:	4c13      	ldr	r4, [pc, #76]	; (1b124 <sys_check_timeouts+0x58>)
   1b0d8:	4607      	mov	r7, r0
   1b0da:	e012      	b.n	1b102 <sys_check_timeouts+0x36>
    sys_timeout_handler handler;
    void *arg;

    PBUF_CHECK_FREE_OOSEQ();

    tmptimeout = next_timeout;
   1b0dc:	6823      	ldr	r3, [r4, #0]
    if (handler != NULL) {
      LWIP_DEBUGF(TIMERS_DEBUG, ("sct calling h=%s t=%"U32_F" arg=%p\n",
                                 tmptimeout->handler_name, Milliseconds() - tmptimeout->time, arg));
    }
#endif /* LWIP_DEBUG_TIMERNAMES */
    memp_free(MEMP_SYS_TIMEOUT, tmptimeout);
   1b0de:	2007      	movs	r0, #7
   1b0e0:	4619      	mov	r1, r3
    if (tmptimeout == NULL) {
   1b0e2:	b1c3      	cbz	r3, 1b116 <sys_check_timeouts+0x4a>
    if (TIME_LESS_THAN(now, tmptimeout->time)) {
   1b0e4:	685a      	ldr	r2, [r3, #4]
   1b0e6:	1abd      	subs	r5, r7, r2
   1b0e8:	2d00      	cmp	r5, #0
   1b0ea:	db14      	blt.n	1b116 <sys_check_timeouts+0x4a>
    handler = tmptimeout->h;
   1b0ec:	f8d3 8008 	ldr.w	r8, [r3, #8]
    next_timeout = tmptimeout->next;
   1b0f0:	681d      	ldr	r5, [r3, #0]
   1b0f2:	6025      	str	r5, [r4, #0]
    current_timeout_due_time = tmptimeout->time;
   1b0f4:	60a2      	str	r2, [r4, #8]
    arg = tmptimeout->arg;
   1b0f6:	68dd      	ldr	r5, [r3, #12]
    memp_free(MEMP_SYS_TIMEOUT, tmptimeout);
   1b0f8:	f7fc f826 	bl	17148 <memp_free>
    if (handler != NULL) {
   1b0fc:	f1b8 0f00 	cmp.w	r8, #0
   1b100:	d10b      	bne.n	1b11a <sys_check_timeouts+0x4e>
    PBUF_CHECK_FREE_OOSEQ();
   1b102:	7833      	ldrb	r3, [r6, #0]
   1b104:	2b00      	cmp	r3, #0
   1b106:	d0e9      	beq.n	1b0dc <sys_check_timeouts+0x10>
   1b108:	f7fc f9b0 	bl	1746c <pbuf_free_ooseq>
    tmptimeout = next_timeout;
   1b10c:	6823      	ldr	r3, [r4, #0]
    memp_free(MEMP_SYS_TIMEOUT, tmptimeout);
   1b10e:	2007      	movs	r0, #7
   1b110:	4619      	mov	r1, r3
    if (tmptimeout == NULL) {
   1b112:	2b00      	cmp	r3, #0
   1b114:	d1e6      	bne.n	1b0e4 <sys_check_timeouts+0x18>
   1b116:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      handler(arg);
   1b11a:	4628      	mov	r0, r5
   1b11c:	47c0      	blx	r8
   1b11e:	e7f0      	b.n	1b102 <sys_check_timeouts+0x36>
   1b120:	2000a3e0 	.word	0x2000a3e0
   1b124:	20002940 	.word	0x20002940

0001b128 <udp_init>:
/**
 * Initialize this module.
 */
void
udp_init(void)
{
   1b128:	b508      	push	{r3, lr}
#ifdef LWIP_RAND
  udp_port = UDP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
   1b12a:	f00c ff29 	bl	27f80 <rand>
   1b12e:	4b03      	ldr	r3, [pc, #12]	; (1b13c <udp_init+0x14>)
   1b130:	ea6f 4080 	mvn.w	r0, r0, lsl #18
   1b134:	ea6f 4090 	mvn.w	r0, r0, lsr #18
   1b138:	8018      	strh	r0, [r3, #0]
   1b13a:	bd08      	pop	{r3, pc}
   1b13c:	200000f8 	.word	0x200000f8

0001b140 <udp_input>:
 * @param inp network interface on which the datagram was received.
 *
 */
void
udp_input(struct pbuf *p, struct netif *inp)
{
   1b140:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  PERF_START;

  UDP_STATS_INC(udp.recv);

  /* Check minimum length (UDP header) */
  if (p->len < UDP_HLEN) {
   1b144:	8943      	ldrh	r3, [r0, #10]
   1b146:	2b07      	cmp	r3, #7
{
   1b148:	b087      	sub	sp, #28
   1b14a:	4606      	mov	r6, r0
  if (p->len < UDP_HLEN) {
   1b14c:	f240 8090 	bls.w	1b270 <udp_input+0x130>
  }

  udphdr = (struct udp_hdr *)p->payload;

  /* is broadcast packet ? */
  broadcast = ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif());
   1b150:	4f5f      	ldr	r7, [pc, #380]	; (1b2d0 <udp_input+0x190>)
  udphdr = (struct udp_hdr *)p->payload;
   1b152:	f8d0 b004 	ldr.w	fp, [r0, #4]
  broadcast = ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif());
   1b156:	6978      	ldr	r0, [r7, #20]
   1b158:	4689      	mov	r9, r1
   1b15a:	6839      	ldr	r1, [r7, #0]
   1b15c:	f7fb fdce 	bl	16cfc <ip4_addr_isbroadcast_u32>
   1b160:	4605      	mov	r5, r0

  LWIP_DEBUGF(UDP_DEBUG, ("udp_input: received datagram of length %"U16_F"\n", p->tot_len));

  /* convert src and dest ports to host byte order */
  src = lwip_ntohs(udphdr->src);
   1b162:	f8bb 0000 	ldrh.w	r0, [fp]
   1b166:	f7f8 fac7 	bl	136f8 <lwip_htons>
   1b16a:	4680      	mov	r8, r0
  dest = lwip_ntohs(udphdr->dest);
   1b16c:	f8bb 0002 	ldrh.w	r0, [fp, #2]
   1b170:	f7f8 fac2 	bl	136f8 <lwip_htons>
  uncon_pcb = NULL;
  /* Iterate through the UDP pcb list for a matching pcb.
   * 'Perfect match' pcbs (connected to the remote port & ip address) are
   * preferred. If no perfect match is found, the first unconnected pcb that
   * matches the local port and ip address gets the datagram. */
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
   1b174:	4b57      	ldr	r3, [pc, #348]	; (1b2d4 <udp_input+0x194>)
   1b176:	681b      	ldr	r3, [r3, #0]
   1b178:	9305      	str	r3, [sp, #20]
   1b17a:	461c      	mov	r4, r3
   1b17c:	2b00      	cmp	r3, #0
   1b17e:	d072      	beq.n	1b266 <udp_input+0x126>
      }

      /* compare PCB remote addr+port to UDP source addr+port */
      if ((pcb->remote_port == src) &&
          (ip_addr_isany_val(pcb->remote_ip) ||
           ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()))) {
   1b180:	f04f 0c00 	mov.w	ip, #0
   1b184:	693a      	ldr	r2, [r7, #16]
      (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
   1b186:	f8d7 a004 	ldr.w	sl, [r7, #4]
      if (ip_addr_isany(&pcb->local_ip) || ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
   1b18a:	f8d7 e014 	ldr.w	lr, [r7, #20]
           ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()))) {
   1b18e:	9203      	str	r2, [sp, #12]
   1b190:	4663      	mov	r3, ip
   1b192:	f8cd b010 	str.w	fp, [sp, #16]
   1b196:	e004      	b.n	1b1a2 <udp_input+0x62>
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
   1b198:	68e2      	ldr	r2, [r4, #12]
   1b19a:	4623      	mov	r3, r4
   1b19c:	2a00      	cmp	r2, #0
   1b19e:	d05d      	beq.n	1b25c <udp_input+0x11c>
   1b1a0:	4614      	mov	r4, r2
    if ((pcb->local_port == dest) &&
   1b1a2:	8a62      	ldrh	r2, [r4, #18]
   1b1a4:	4282      	cmp	r2, r0
   1b1a6:	d1f7      	bne.n	1b198 <udp_input+0x58>
  if ((pcb->netif_idx != NETIF_NO_INDEX) &&
   1b1a8:	7a21      	ldrb	r1, [r4, #8]
   1b1aa:	b129      	cbz	r1, 1b1b8 <udp_input+0x78>
      (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
   1b1ac:	f89a 2038 	ldrb.w	r2, [sl, #56]	; 0x38
   1b1b0:	3201      	adds	r2, #1
  if ((pcb->netif_idx != NETIF_NO_INDEX) &&
   1b1b2:	b2d2      	uxtb	r2, r2
   1b1b4:	4291      	cmp	r1, r2
   1b1b6:	d1ef      	bne.n	1b198 <udp_input+0x58>
    if (broadcast != 0) {
   1b1b8:	2d00      	cmp	r5, #0
   1b1ba:	d13e      	bne.n	1b23a <udp_input+0xfa>
      if (ip_addr_isany(&pcb->local_ip) || ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
   1b1bc:	6822      	ldr	r2, [r4, #0]
   1b1be:	b112      	cbz	r2, 1b1c6 <udp_input+0x86>
   1b1c0:	4572      	cmp	r2, lr
   1b1c2:	d1e9      	bne.n	1b198 <udp_input+0x58>
   1b1c4:	4672      	mov	r2, lr
      if ((pcb->flags & UDP_FLAGS_CONNECTED) == 0) {
   1b1c6:	7c21      	ldrb	r1, [r4, #16]
   1b1c8:	0749      	lsls	r1, r1, #29
   1b1ca:	d406      	bmi.n	1b1da <udp_input+0x9a>
        if (uncon_pcb == NULL) {
   1b1cc:	f1bc 0f00 	cmp.w	ip, #0
   1b1d0:	d061      	beq.n	1b296 <udp_input+0x156>
        } else if (broadcast && ip4_current_dest_addr()->addr == IPADDR_BROADCAST) {
   1b1d2:	b115      	cbz	r5, 1b1da <udp_input+0x9a>
   1b1d4:	f1be 3fff 	cmp.w	lr, #4294967295
   1b1d8:	d050      	beq.n	1b27c <udp_input+0x13c>
      if ((pcb->remote_port == src) &&
   1b1da:	8aa2      	ldrh	r2, [r4, #20]
   1b1dc:	4542      	cmp	r2, r8
   1b1de:	d1db      	bne.n	1b198 <udp_input+0x58>
          (ip_addr_isany_val(pcb->remote_ip) ||
   1b1e0:	6862      	ldr	r2, [r4, #4]
      if ((pcb->remote_port == src) &&
   1b1e2:	b112      	cbz	r2, 1b1ea <udp_input+0xaa>
          (ip_addr_isany_val(pcb->remote_ip) ||
   1b1e4:	9903      	ldr	r1, [sp, #12]
   1b1e6:	428a      	cmp	r2, r1
   1b1e8:	d1d6      	bne.n	1b198 <udp_input+0x58>
   1b1ea:	f8dd b010 	ldr.w	fp, [sp, #16]
        /* the first fully matching PCB */
        if (prev != NULL) {
   1b1ee:	b12b      	cbz	r3, 1b1fc <udp_input+0xbc>
          /* move the pcb to the front of udp_pcbs so that is
             found faster next time */
          prev->next = pcb->next;
   1b1f0:	68e2      	ldr	r2, [r4, #12]
          pcb->next = udp_pcbs;
          udp_pcbs = pcb;
   1b1f2:	4938      	ldr	r1, [pc, #224]	; (1b2d4 <udp_input+0x194>)
          prev->next = pcb->next;
   1b1f4:	60da      	str	r2, [r3, #12]
          pcb->next = udp_pcbs;
   1b1f6:	9b05      	ldr	r3, [sp, #20]
          udp_pcbs = pcb;
   1b1f8:	600c      	str	r4, [r1, #0]
          pcb->next = udp_pcbs;
   1b1fa:	60e3      	str	r3, [r4, #12]
          goto chkerr;
        }
      } else
#endif /* LWIP_UDPLITE */
      {
        if (udphdr->chksum != 0) {
   1b1fc:	f8bb 3006 	ldrh.w	r3, [fp, #6]
   1b200:	b143      	cbz	r3, 1b214 <udp_input+0xd4>
          if (ip_chksum_pseudo(p, IP_PROTO_UDP, p->tot_len,
   1b202:	4b35      	ldr	r3, [pc, #212]	; (1b2d8 <udp_input+0x198>)
   1b204:	8932      	ldrh	r2, [r6, #8]
   1b206:	9300      	str	r3, [sp, #0]
   1b208:	2111      	movs	r1, #17
   1b20a:	3b04      	subs	r3, #4
   1b20c:	4630      	mov	r0, r6
   1b20e:	f000 fc31 	bl	1ba74 <ip_chksum_pseudo>
   1b212:	bb68      	cbnz	r0, 1b270 <udp_input+0x130>
          }
        }
      }
    }
#endif /* CHECKSUM_CHECK_UDP */
    if (pbuf_remove_header(p, UDP_HLEN)) {
   1b214:	2108      	movs	r1, #8
   1b216:	4630      	mov	r0, r6
   1b218:	f7fc fa9a 	bl	17750 <pbuf_remove_header>
   1b21c:	bb40      	cbnz	r0, 1b270 <udp_input+0x130>
      MIB2_STATS_INC(mib2.udpinerrors);
      pbuf_free(p);
      goto end;
    }

    if (pcb != NULL) {
   1b21e:	2c00      	cmp	r4, #0
   1b220:	d03f      	beq.n	1b2a2 <udp_input+0x162>
          }
        }
      }
#endif /* SO_REUSE && SO_REUSE_RXTOALL */
      /* callback */
      if (pcb->recv != NULL) {
   1b222:	69a5      	ldr	r5, [r4, #24]
   1b224:	b325      	cbz	r5, 1b270 <udp_input+0x130>
        /* now the recv function is responsible for freeing p */
        pcb->recv(pcb->recv_arg, pcb, p, ip_current_src_addr(), src);
   1b226:	69e0      	ldr	r0, [r4, #28]
   1b228:	4b2c      	ldr	r3, [pc, #176]	; (1b2dc <udp_input+0x19c>)
   1b22a:	f8cd 8000 	str.w	r8, [sp]
   1b22e:	4632      	mov	r2, r6
   1b230:	4621      	mov	r1, r4
   1b232:	47a8      	blx	r5
  UDP_STATS_INC(udp.drop);
  MIB2_STATS_INC(mib2.udpinerrors);
  pbuf_free(p);
  PERF_STOP("udp_input");
#endif /* CHECKSUM_CHECK_UDP */
}
   1b234:	b007      	add	sp, #28
   1b236:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
   1b23a:	6822      	ldr	r2, [r4, #0]
   1b23c:	2a00      	cmp	r2, #0
   1b23e:	d0c2      	beq.n	1b1c6 <udp_input+0x86>
   1b240:	f1be 3fff 	cmp.w	lr, #4294967295
   1b244:	d0bf      	beq.n	1b1c6 <udp_input+0x86>
            ip4_addr_netcmp(ip_2_ip4(&pcb->local_ip), ip4_current_dest_addr(), netif_ip4_netmask(inp))) {
   1b246:	f8d9 1008 	ldr.w	r1, [r9, #8]
   1b24a:	ea82 0b0e 	eor.w	fp, r2, lr
            ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
   1b24e:	ea1b 0f01 	tst.w	fp, r1
   1b252:	d0b8      	beq.n	1b1c6 <udp_input+0x86>
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
   1b254:	68e2      	ldr	r2, [r4, #12]
   1b256:	4623      	mov	r3, r4
   1b258:	2a00      	cmp	r2, #0
   1b25a:	d1a1      	bne.n	1b1a0 <udp_input+0x60>
   1b25c:	f8dd b010 	ldr.w	fp, [sp, #16]
  if (pcb != NULL) {
   1b260:	f1bc 0f00 	cmp.w	ip, #0
   1b264:	d12f      	bne.n	1b2c6 <udp_input+0x186>
  if (for_us) {
   1b266:	f8d9 2004 	ldr.w	r2, [r9, #4]
   1b26a:	697b      	ldr	r3, [r7, #20]
   1b26c:	429a      	cmp	r2, r3
   1b26e:	d02c      	beq.n	1b2ca <udp_input+0x18a>
  pbuf_free(p);
   1b270:	4630      	mov	r0, r6
}
   1b272:	b007      	add	sp, #28
   1b274:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  pbuf_free(p);
   1b278:	f7fc bab8 	b.w	177ec <pbuf_free>
          if (!IP_IS_V4_VAL(uncon_pcb->local_ip) || !ip4_addr_cmp(ip_2_ip4(&uncon_pcb->local_ip), netif_ip4_addr(inp))) {
   1b27c:	f8d9 b004 	ldr.w	fp, [r9, #4]
   1b280:	f8dc 1000 	ldr.w	r1, [ip]
   1b284:	4559      	cmp	r1, fp
   1b286:	d0a8      	beq.n	1b1da <udp_input+0x9a>
   1b288:	455a      	cmp	r2, fp
   1b28a:	bf08      	it	eq
   1b28c:	46a4      	moveq	ip, r4
      if ((pcb->remote_port == src) &&
   1b28e:	8aa2      	ldrh	r2, [r4, #20]
   1b290:	4542      	cmp	r2, r8
   1b292:	d181      	bne.n	1b198 <udp_input+0x58>
   1b294:	e7a4      	b.n	1b1e0 <udp_input+0xa0>
   1b296:	8aa2      	ldrh	r2, [r4, #20]
   1b298:	4542      	cmp	r2, r8
   1b29a:	46a4      	mov	ip, r4
   1b29c:	f47f af7c 	bne.w	1b198 <udp_input+0x58>
   1b2a0:	e79e      	b.n	1b1e0 <udp_input+0xa0>
      if (!broadcast && !ip_addr_ismulticast(ip_current_dest_addr())) {
   1b2a2:	2d00      	cmp	r5, #0
   1b2a4:	d1e4      	bne.n	1b270 <udp_input+0x130>
   1b2a6:	697b      	ldr	r3, [r7, #20]
   1b2a8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
   1b2ac:	2be0      	cmp	r3, #224	; 0xe0
   1b2ae:	d0df      	beq.n	1b270 <udp_input+0x130>
        pbuf_header_force(p, (s16_t)(ip_current_header_tot_len() + UDP_HLEN));
   1b2b0:	89b9      	ldrh	r1, [r7, #12]
   1b2b2:	3108      	adds	r1, #8
   1b2b4:	b209      	sxth	r1, r1
   1b2b6:	4630      	mov	r0, r6
   1b2b8:	f7fc fa64 	bl	17784 <pbuf_header_force>
        icmp_port_unreach(ip_current_is_v6(), p);
   1b2bc:	2103      	movs	r1, #3
   1b2be:	4630      	mov	r0, r6
   1b2c0:	f000 fe92 	bl	1bfe8 <icmp_dest_unreach>
   1b2c4:	e7d4      	b.n	1b270 <udp_input+0x130>
   1b2c6:	4664      	mov	r4, ip
   1b2c8:	e798      	b.n	1b1fc <udp_input+0xbc>
   1b2ca:	2400      	movs	r4, #0
   1b2cc:	e796      	b.n	1b1fc <udp_input+0xbc>
   1b2ce:	bf00      	nop
   1b2d0:	2000a404 	.word	0x2000a404
   1b2d4:	2000a400 	.word	0x2000a400
   1b2d8:	2000a418 	.word	0x2000a418
   1b2dc:	2000a414 	.word	0x2000a414

0001b2e0 <udp_bind>:
  LWIP_ASSERT_CORE_LOCKED();

#if LWIP_IPV4
  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
    ipaddr = IP4_ADDR_ANY;
   1b2e0:	4b37      	ldr	r3, [pc, #220]	; (1b3c0 <udp_bind+0xe0>)
   1b2e2:	2900      	cmp	r1, #0
   1b2e4:	bf08      	it	eq
   1b2e6:	4619      	moveq	r1, r3
  }
#else /* LWIP_IPV4 */
  LWIP_ERROR("udp_bind: invalid ipaddr", ipaddr != NULL, return ERR_ARG);
#endif /* LWIP_IPV4 */

  LWIP_ERROR("udp_bind: invalid pcb", pcb != NULL, return ERR_ARG);
   1b2e8:	2800      	cmp	r0, #0
   1b2ea:	d066      	beq.n	1b3ba <udp_bind+0xda>
{
   1b2ec:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  ip_addr_debug_print(UDP_DEBUG | LWIP_DBG_TRACE, ipaddr);
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, (", port = %"U16_F")\n", port));

  rebind = 0;
  /* Check for double bind and rebind of the same pcb */
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
   1b2f0:	4f34      	ldr	r7, [pc, #208]	; (1b3c4 <udp_bind+0xe4>)
   1b2f2:	683e      	ldr	r6, [r7, #0]
   1b2f4:	b1ee      	cbz	r6, 1b332 <udp_bind+0x52>
    /* is this UDP PCB already on active list? */
    if (pcb == ipcb) {
   1b2f6:	42b0      	cmp	r0, r6
   1b2f8:	d04f      	beq.n	1b39a <udp_bind+0xba>
   1b2fa:	4634      	mov	r4, r6
   1b2fc:	e001      	b.n	1b302 <udp_bind+0x22>
   1b2fe:	42a0      	cmp	r0, r4
   1b300:	d04b      	beq.n	1b39a <udp_bind+0xba>
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
   1b302:	68e4      	ldr	r4, [r4, #12]
   1b304:	2c00      	cmp	r4, #0
   1b306:	d1fa      	bne.n	1b2fe <udp_bind+0x1e>
    ipaddr = &zoned_ipaddr;
  }
#endif /* LWIP_IPV6 && LWIP_IPV6_SCOPES */

  /* no port specified? */
  if (port == 0) {
   1b308:	b1b2      	cbz	r2, 1b338 <udp_bind+0x58>
   1b30a:	680d      	ldr	r5, [r1, #0]
   1b30c:	4633      	mov	r3, r6
   1b30e:	b915      	cbnz	r5, 1b316 <udp_bind+0x36>
   1b310:	e03a      	b.n	1b388 <udp_bind+0xa8>
      /* no more ports available in local range */
      LWIP_DEBUGF(UDP_DEBUG, ("udp_bind: out of free UDP ports\n"));
      return ERR_USE;
    }
  } else {
    for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
   1b312:	68db      	ldr	r3, [r3, #12]
   1b314:	b36b      	cbz	r3, 1b372 <udp_bind+0x92>
      if (pcb != ipcb) {
   1b316:	4298      	cmp	r0, r3
   1b318:	d0fb      	beq.n	1b312 <udp_bind+0x32>
        if (!ip_get_option(pcb, SOF_REUSEADDR) ||
            !ip_get_option(ipcb, SOF_REUSEADDR))
#endif /* SO_REUSE */
        {
          /* port matches that of PCB in list and REUSEADDR not set -> reject */
          if ((ipcb->local_port == port) &&
   1b31a:	8a59      	ldrh	r1, [r3, #18]
   1b31c:	4291      	cmp	r1, r2
   1b31e:	d1f8      	bne.n	1b312 <udp_bind+0x32>
              /* IP address matches or any IP used? */
              (ip_addr_cmp(&ipcb->local_ip, ipaddr) || ip_addr_isany(ipaddr) ||
   1b320:	6819      	ldr	r1, [r3, #0]
          if ((ipcb->local_port == port) &&
   1b322:	42a9      	cmp	r1, r5
   1b324:	d001      	beq.n	1b32a <udp_bind+0x4a>
              ip_addr_isany(&ipcb->local_ip))) {
   1b326:	2900      	cmp	r1, #0
   1b328:	d1f3      	bne.n	1b312 <udp_bind+0x32>
      return ERR_USE;
   1b32a:	f06f 0007 	mvn.w	r0, #7
   1b32e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if (port == 0) {
   1b332:	2a00      	cmp	r2, #0
   1b334:	d13d      	bne.n	1b3b2 <udp_bind+0xd2>
  rebind = 0;
   1b336:	4634      	mov	r4, r6
   1b338:	f8df c08c 	ldr.w	ip, [pc, #140]	; 1b3c8 <udp_bind+0xe8>
   1b33c:	f8bc 2000 	ldrh.w	r2, [ip]
   1b340:	f44f 4e80 	mov.w	lr, #16384	; 0x4000
  if (udp_port++ == UDP_LOCAL_PORT_RANGE_END) {
   1b344:	f64f 78ff 	movw	r8, #65535	; 0xffff
   1b348:	4542      	cmp	r2, r8
   1b34a:	bf1a      	itte	ne
   1b34c:	3201      	addne	r2, #1
   1b34e:	b292      	uxthne	r2, r2
   1b350:	f44f 4240 	moveq.w	r2, #49152	; 0xc000
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
   1b354:	b156      	cbz	r6, 1b36c <udp_bind+0x8c>
    if (pcb->local_port == udp_port) {
   1b356:	8a73      	ldrh	r3, [r6, #18]
   1b358:	4293      	cmp	r3, r2
   1b35a:	d020      	beq.n	1b39e <udp_bind+0xbe>
   1b35c:	4633      	mov	r3, r6
   1b35e:	e002      	b.n	1b366 <udp_bind+0x86>
   1b360:	8a5d      	ldrh	r5, [r3, #18]
   1b362:	4295      	cmp	r5, r2
   1b364:	d01b      	beq.n	1b39e <udp_bind+0xbe>
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
   1b366:	68db      	ldr	r3, [r3, #12]
   1b368:	2b00      	cmp	r3, #0
   1b36a:	d1f9      	bne.n	1b360 <udp_bind+0x80>
   1b36c:	680d      	ldr	r5, [r1, #0]
   1b36e:	f8ac 2000 	strh.w	r2, [ip]
        }
      }
    }
  }

  ip_addr_set_ipaddr(&pcb->local_ip, ipaddr);
   1b372:	6005      	str	r5, [r0, #0]

  pcb->local_port = port;
   1b374:	8242      	strh	r2, [r0, #18]
  mib2_udp_bind(pcb);
  /* pcb not active yet? */
  if (rebind == 0) {
   1b376:	b96c      	cbnz	r4, 1b394 <udp_bind+0xb4>
    /* place the PCB on the active list if not already there */
    pcb->next = udp_pcbs;
   1b378:	60c6      	str	r6, [r0, #12]
    udp_pcbs = pcb;
   1b37a:	6038      	str	r0, [r7, #0]
  }
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("udp_bind: bound to "));
  ip_addr_debug_print_val(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, pcb->local_ip);
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, (", port %"U16_F")\n", pcb->local_port));
  return ERR_OK;
   1b37c:	2000      	movs	r0, #0
   1b37e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
   1b382:	68db      	ldr	r3, [r3, #12]
   1b384:	2b00      	cmp	r3, #0
   1b386:	d0f4      	beq.n	1b372 <udp_bind+0x92>
      if (pcb != ipcb) {
   1b388:	4298      	cmp	r0, r3
   1b38a:	d0fa      	beq.n	1b382 <udp_bind+0xa2>
          if ((ipcb->local_port == port) &&
   1b38c:	8a59      	ldrh	r1, [r3, #18]
   1b38e:	4291      	cmp	r1, r2
   1b390:	d1f7      	bne.n	1b382 <udp_bind+0xa2>
   1b392:	e7ca      	b.n	1b32a <udp_bind+0x4a>
  return ERR_OK;
   1b394:	2000      	movs	r0, #0
   1b396:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      rebind = 1;
   1b39a:	2401      	movs	r4, #1
   1b39c:	e7b4      	b.n	1b308 <udp_bind+0x28>
   1b39e:	f10e 3eff 	add.w	lr, lr, #4294967295
   1b3a2:	fa1f fe8e 	uxth.w	lr, lr
      if (++n > (UDP_LOCAL_PORT_RANGE_END - UDP_LOCAL_PORT_RANGE_START)) {
   1b3a6:	f1be 0f00 	cmp.w	lr, #0
   1b3aa:	d1cd      	bne.n	1b348 <udp_bind+0x68>
   1b3ac:	f8ac 2000 	strh.w	r2, [ip]
   1b3b0:	e7bb      	b.n	1b32a <udp_bind+0x4a>
   1b3b2:	680b      	ldr	r3, [r1, #0]
  ip_addr_set_ipaddr(&pcb->local_ip, ipaddr);
   1b3b4:	6003      	str	r3, [r0, #0]
  pcb->local_port = port;
   1b3b6:	8242      	strh	r2, [r0, #18]
   1b3b8:	e7de      	b.n	1b378 <udp_bind+0x98>
  LWIP_ERROR("udp_bind: invalid pcb", pcb != NULL, return ERR_ARG);
   1b3ba:	f06f 000f 	mvn.w	r0, #15
   1b3be:	4770      	bx	lr
   1b3c0:	0002d58c 	.word	0x0002d58c
   1b3c4:	2000a400 	.word	0x2000a400
   1b3c8:	200000f8 	.word	0x200000f8

0001b3cc <udp_sendto_if_src>:
{
   1b3cc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1b3d0:	b085      	sub	sp, #20
   1b3d2:	f8dd b038 	ldr.w	fp, [sp, #56]	; 0x38
   1b3d6:	f8dd a03c 	ldr.w	sl, [sp, #60]	; 0x3c
  LWIP_ERROR("udp_sendto_if_src: invalid pcb", pcb != NULL, return ERR_ARG);
   1b3da:	2800      	cmp	r0, #0
   1b3dc:	d076      	beq.n	1b4cc <udp_sendto_if_src+0x100>
  LWIP_ERROR("udp_sendto_if_src: invalid pbuf", p != NULL, return ERR_ARG);
   1b3de:	2900      	cmp	r1, #0
   1b3e0:	d074      	beq.n	1b4cc <udp_sendto_if_src+0x100>
  LWIP_ERROR("udp_sendto_if_src: invalid dst_ip", dst_ip != NULL, return ERR_ARG);
   1b3e2:	2a00      	cmp	r2, #0
   1b3e4:	d072      	beq.n	1b4cc <udp_sendto_if_src+0x100>
  LWIP_ERROR("udp_sendto_if_src: invalid src_ip", src_ip != NULL, return ERR_ARG);
   1b3e6:	f1ba 0f00 	cmp.w	sl, #0
   1b3ea:	d06f      	beq.n	1b4cc <udp_sendto_if_src+0x100>
  LWIP_ERROR("udp_sendto_if_src: invalid netif", netif != NULL, return ERR_ARG);
   1b3ec:	f1bb 0f00 	cmp.w	fp, #0
   1b3f0:	d06c      	beq.n	1b4cc <udp_sendto_if_src+0x100>
   1b3f2:	4617      	mov	r7, r2
  if (pcb->local_port == 0) {
   1b3f4:	8a42      	ldrh	r2, [r0, #18]
   1b3f6:	4604      	mov	r4, r0
   1b3f8:	4699      	mov	r9, r3
   1b3fa:	460d      	mov	r5, r1
   1b3fc:	2a00      	cmp	r2, #0
   1b3fe:	d049      	beq.n	1b494 <udp_sendto_if_src+0xc8>
  if ((u16_t)(p->tot_len + UDP_HLEN) < p->tot_len) {
   1b400:	892a      	ldrh	r2, [r5, #8]
   1b402:	f102 0308 	add.w	r3, r2, #8
   1b406:	b29b      	uxth	r3, r3
   1b408:	429a      	cmp	r2, r3
   1b40a:	d85c      	bhi.n	1b4c6 <udp_sendto_if_src+0xfa>
  if (pbuf_add_header(p, UDP_HLEN)) {
   1b40c:	2108      	movs	r1, #8
   1b40e:	4628      	mov	r0, r5
   1b410:	f7fc f97a 	bl	17708 <pbuf_add_header>
   1b414:	bb78      	cbnz	r0, 1b476 <udp_sendto_if_src+0xaa>
   1b416:	462e      	mov	r6, r5
  udphdr->src = lwip_htons(pcb->local_port);
   1b418:	8a60      	ldrh	r0, [r4, #18]
  udphdr = (struct udp_hdr *)q->payload;
   1b41a:	f8d6 8004 	ldr.w	r8, [r6, #4]
  udphdr->src = lwip_htons(pcb->local_port);
   1b41e:	f7f8 f96b 	bl	136f8 <lwip_htons>
   1b422:	f8a8 0000 	strh.w	r0, [r8]
  udphdr->dest = lwip_htons(dst_port);
   1b426:	4648      	mov	r0, r9
   1b428:	f7f8 f966 	bl	136f8 <lwip_htons>
  udphdr->chksum = 0x0000;
   1b42c:	2300      	movs	r3, #0
  udphdr->dest = lwip_htons(dst_port);
   1b42e:	f8a8 0002 	strh.w	r0, [r8, #2]
  udphdr->chksum = 0x0000;
   1b432:	f888 3006 	strb.w	r3, [r8, #6]
   1b436:	f888 3007 	strb.w	r3, [r8, #7]
    udphdr->len = lwip_htons(q->tot_len);
   1b43a:	8930      	ldrh	r0, [r6, #8]
   1b43c:	f7f8 f95c 	bl	136f8 <lwip_htons>
   1b440:	f8a8 0004 	strh.w	r0, [r8, #4]
      if (IP_IS_V6(dst_ip) || (pcb->flags & UDP_FLAGS_NOCHKSUM) == 0) {
   1b444:	7c23      	ldrb	r3, [r4, #16]
   1b446:	07db      	lsls	r3, r3, #31
   1b448:	d52e      	bpl.n	1b4a8 <udp_sendto_if_src+0xdc>
  err = ip_output_if_src(q, src_ip, dst_ip, ttl, pcb->tos, ip_proto, netif);
   1b44a:	2211      	movs	r2, #17
   1b44c:	7ae3      	ldrb	r3, [r4, #11]
   1b44e:	9201      	str	r2, [sp, #4]
   1b450:	f8cd b008 	str.w	fp, [sp, #8]
   1b454:	7aa2      	ldrb	r2, [r4, #10]
   1b456:	9200      	str	r2, [sp, #0]
   1b458:	4651      	mov	r1, sl
   1b45a:	463a      	mov	r2, r7
   1b45c:	4630      	mov	r0, r6
   1b45e:	f001 f82b 	bl	1c4b8 <ip4_output_if_src>
  if (q != p) {
   1b462:	42ae      	cmp	r6, r5
  err = ip_output_if_src(q, src_ip, dst_ip, ttl, pcb->tos, ip_proto, netif);
   1b464:	4680      	mov	r8, r0
  if (q != p) {
   1b466:	d002      	beq.n	1b46e <udp_sendto_if_src+0xa2>
    pbuf_free(q);
   1b468:	4630      	mov	r0, r6
   1b46a:	f7fc f9bf 	bl	177ec <pbuf_free>
}
   1b46e:	4640      	mov	r0, r8
   1b470:	b005      	add	sp, #20
   1b472:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    q = pbuf_alloc(PBUF_IP, UDP_HLEN, PBUF_RAM);
   1b476:	f44f 7220 	mov.w	r2, #640	; 0x280
   1b47a:	2108      	movs	r1, #8
   1b47c:	2022      	movs	r0, #34	; 0x22
   1b47e:	f7fc f809 	bl	17494 <pbuf_alloc>
    if (q == NULL) {
   1b482:	4606      	mov	r6, r0
   1b484:	b1f8      	cbz	r0, 1b4c6 <udp_sendto_if_src+0xfa>
    if (p->tot_len != 0) {
   1b486:	892b      	ldrh	r3, [r5, #8]
   1b488:	2b00      	cmp	r3, #0
   1b48a:	d0c5      	beq.n	1b418 <udp_sendto_if_src+0x4c>
      pbuf_chain(q, p);
   1b48c:	4629      	mov	r1, r5
   1b48e:	f7fc fa0d 	bl	178ac <pbuf_chain>
   1b492:	e7c1      	b.n	1b418 <udp_sendto_if_src+0x4c>
    err = udp_bind(pcb, &pcb->local_ip, pcb->local_port);
   1b494:	4601      	mov	r1, r0
   1b496:	f7ff ff23 	bl	1b2e0 <udp_bind>
    if (err != ERR_OK) {
   1b49a:	4680      	mov	r8, r0
   1b49c:	2800      	cmp	r0, #0
   1b49e:	d0af      	beq.n	1b400 <udp_sendto_if_src+0x34>
}
   1b4a0:	4640      	mov	r0, r8
   1b4a2:	b005      	add	sp, #20
   1b4a4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
          udpchksum = ip_chksum_pseudo(q, IP_PROTO_UDP, q->tot_len,
   1b4a8:	8932      	ldrh	r2, [r6, #8]
   1b4aa:	9700      	str	r7, [sp, #0]
   1b4ac:	4653      	mov	r3, sl
   1b4ae:	2111      	movs	r1, #17
   1b4b0:	4630      	mov	r0, r6
   1b4b2:	f000 fadf 	bl	1ba74 <ip_chksum_pseudo>
          udpchksum = 0xffff;
   1b4b6:	f64f 73ff 	movw	r3, #65535	; 0xffff
        udphdr->chksum = udpchksum;
   1b4ba:	2800      	cmp	r0, #0
   1b4bc:	bf08      	it	eq
   1b4be:	4618      	moveq	r0, r3
   1b4c0:	f8a8 0006 	strh.w	r0, [r8, #6]
   1b4c4:	e7c1      	b.n	1b44a <udp_sendto_if_src+0x7e>
    return ERR_MEM;
   1b4c6:	f04f 38ff 	mov.w	r8, #4294967295
   1b4ca:	e7d0      	b.n	1b46e <udp_sendto_if_src+0xa2>
  LWIP_ERROR("udp_sendto_if_src: invalid pcb", pcb != NULL, return ERR_ARG);
   1b4cc:	f06f 080f 	mvn.w	r8, #15
   1b4d0:	e7cd      	b.n	1b46e <udp_sendto_if_src+0xa2>
   1b4d2:	bf00      	nop

0001b4d4 <udp_sendto_if>:
{
   1b4d4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1b4d8:	b085      	sub	sp, #20
   1b4da:	f8dd 9038 	ldr.w	r9, [sp, #56]	; 0x38
  LWIP_ERROR("udp_sendto_if: invalid pcb", pcb != NULL, return ERR_ARG);
   1b4de:	2800      	cmp	r0, #0
   1b4e0:	f000 8090 	beq.w	1b604 <udp_sendto_if+0x130>
  LWIP_ERROR("udp_sendto_if: invalid pbuf", p != NULL, return ERR_ARG);
   1b4e4:	2900      	cmp	r1, #0
   1b4e6:	f000 808d 	beq.w	1b604 <udp_sendto_if+0x130>
  LWIP_ERROR("udp_sendto_if: invalid dst_ip", dst_ip != NULL, return ERR_ARG);
   1b4ea:	2a00      	cmp	r2, #0
   1b4ec:	f000 808a 	beq.w	1b604 <udp_sendto_if+0x130>
  LWIP_ERROR("udp_sendto_if: invalid netif", netif != NULL, return ERR_ARG);
   1b4f0:	f1b9 0f00 	cmp.w	r9, #0
   1b4f4:	f000 8086 	beq.w	1b604 <udp_sendto_if+0x130>
    if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
   1b4f8:	6804      	ldr	r4, [r0, #0]
   1b4fa:	2c00      	cmp	r4, #0
   1b4fc:	d144      	bne.n	1b588 <udp_sendto_if+0xb4>
   1b4fe:	4616      	mov	r6, r2
  if (pcb->local_port == 0) {
   1b500:	8a42      	ldrh	r2, [r0, #18]
      src_ip = netif_ip_addr4(netif);
   1b502:	f109 0a04 	add.w	sl, r9, #4
   1b506:	4604      	mov	r4, r0
   1b508:	469b      	mov	fp, r3
   1b50a:	460d      	mov	r5, r1
  if (pcb->local_port == 0) {
   1b50c:	2a00      	cmp	r2, #0
   1b50e:	d04b      	beq.n	1b5a8 <udp_sendto_if+0xd4>
  if ((u16_t)(p->tot_len + UDP_HLEN) < p->tot_len) {
   1b510:	892a      	ldrh	r2, [r5, #8]
   1b512:	f102 0308 	add.w	r3, r2, #8
   1b516:	b29b      	uxth	r3, r3
   1b518:	429a      	cmp	r2, r3
   1b51a:	d86d      	bhi.n	1b5f8 <udp_sendto_if+0x124>
  if (pbuf_add_header(p, UDP_HLEN)) {
   1b51c:	2108      	movs	r1, #8
   1b51e:	4628      	mov	r0, r5
   1b520:	f7fc f8f2 	bl	17708 <pbuf_add_header>
   1b524:	2800      	cmp	r0, #0
   1b526:	d149      	bne.n	1b5bc <udp_sendto_if+0xe8>
   1b528:	462f      	mov	r7, r5
  udphdr->src = lwip_htons(pcb->local_port);
   1b52a:	8a60      	ldrh	r0, [r4, #18]
  udphdr = (struct udp_hdr *)q->payload;
   1b52c:	f8d7 8004 	ldr.w	r8, [r7, #4]
  udphdr->src = lwip_htons(pcb->local_port);
   1b530:	f7f8 f8e2 	bl	136f8 <lwip_htons>
   1b534:	f8a8 0000 	strh.w	r0, [r8]
  udphdr->dest = lwip_htons(dst_port);
   1b538:	4658      	mov	r0, fp
   1b53a:	f7f8 f8dd 	bl	136f8 <lwip_htons>
  udphdr->chksum = 0x0000;
   1b53e:	2300      	movs	r3, #0
  udphdr->dest = lwip_htons(dst_port);
   1b540:	f8a8 0002 	strh.w	r0, [r8, #2]
  udphdr->chksum = 0x0000;
   1b544:	f888 3006 	strb.w	r3, [r8, #6]
   1b548:	f888 3007 	strb.w	r3, [r8, #7]
    udphdr->len = lwip_htons(q->tot_len);
   1b54c:	8938      	ldrh	r0, [r7, #8]
   1b54e:	f7f8 f8d3 	bl	136f8 <lwip_htons>
   1b552:	f8a8 0004 	strh.w	r0, [r8, #4]
      if (IP_IS_V6(dst_ip) || (pcb->flags & UDP_FLAGS_NOCHKSUM) == 0) {
   1b556:	7c23      	ldrb	r3, [r4, #16]
   1b558:	07db      	lsls	r3, r3, #31
   1b55a:	d53e      	bpl.n	1b5da <udp_sendto_if+0x106>
  err = ip_output_if_src(q, src_ip, dst_ip, ttl, pcb->tos, ip_proto, netif);
   1b55c:	2211      	movs	r2, #17
   1b55e:	7ae3      	ldrb	r3, [r4, #11]
   1b560:	9201      	str	r2, [sp, #4]
   1b562:	f8cd 9008 	str.w	r9, [sp, #8]
   1b566:	7aa2      	ldrb	r2, [r4, #10]
   1b568:	9200      	str	r2, [sp, #0]
   1b56a:	4651      	mov	r1, sl
   1b56c:	4632      	mov	r2, r6
   1b56e:	4638      	mov	r0, r7
   1b570:	f000 ffa2 	bl	1c4b8 <ip4_output_if_src>
  if (q != p) {
   1b574:	42bd      	cmp	r5, r7
  err = ip_output_if_src(q, src_ip, dst_ip, ttl, pcb->tos, ip_proto, netif);
   1b576:	4680      	mov	r8, r0
  if (q != p) {
   1b578:	d002      	beq.n	1b580 <udp_sendto_if+0xac>
    pbuf_free(q);
   1b57a:	4638      	mov	r0, r7
   1b57c:	f7fc f936 	bl	177ec <pbuf_free>
}
   1b580:	4640      	mov	r0, r8
   1b582:	b005      	add	sp, #20
   1b584:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        ip4_addr_ismulticast(ip_2_ip4(&pcb->local_ip))) {
   1b588:	f004 05f0 	and.w	r5, r4, #240	; 0xf0
    if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
   1b58c:	2de0      	cmp	r5, #224	; 0xe0
   1b58e:	d0b6      	beq.n	1b4fe <udp_sendto_if+0x2a>
      if (!ip4_addr_cmp(ip_2_ip4(&(pcb->local_ip)), netif_ip4_addr(netif))) {
   1b590:	f8d9 5004 	ldr.w	r5, [r9, #4]
   1b594:	42ac      	cmp	r4, r5
   1b596:	d132      	bne.n	1b5fe <udp_sendto_if+0x12a>
   1b598:	4616      	mov	r6, r2
  if (pcb->local_port == 0) {
   1b59a:	8a42      	ldrh	r2, [r0, #18]
   1b59c:	4682      	mov	sl, r0
   1b59e:	4604      	mov	r4, r0
   1b5a0:	469b      	mov	fp, r3
   1b5a2:	460d      	mov	r5, r1
   1b5a4:	2a00      	cmp	r2, #0
   1b5a6:	d1b3      	bne.n	1b510 <udp_sendto_if+0x3c>
    err = udp_bind(pcb, &pcb->local_ip, pcb->local_port);
   1b5a8:	4601      	mov	r1, r0
   1b5aa:	f7ff fe99 	bl	1b2e0 <udp_bind>
    if (err != ERR_OK) {
   1b5ae:	4680      	mov	r8, r0
   1b5b0:	2800      	cmp	r0, #0
   1b5b2:	d0ad      	beq.n	1b510 <udp_sendto_if+0x3c>
}
   1b5b4:	4640      	mov	r0, r8
   1b5b6:	b005      	add	sp, #20
   1b5b8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    q = pbuf_alloc(PBUF_IP, UDP_HLEN, PBUF_RAM);
   1b5bc:	f44f 7220 	mov.w	r2, #640	; 0x280
   1b5c0:	2108      	movs	r1, #8
   1b5c2:	2022      	movs	r0, #34	; 0x22
   1b5c4:	f7fb ff66 	bl	17494 <pbuf_alloc>
    if (q == NULL) {
   1b5c8:	4607      	mov	r7, r0
   1b5ca:	b1a8      	cbz	r0, 1b5f8 <udp_sendto_if+0x124>
    if (p->tot_len != 0) {
   1b5cc:	892b      	ldrh	r3, [r5, #8]
   1b5ce:	2b00      	cmp	r3, #0
   1b5d0:	d0ab      	beq.n	1b52a <udp_sendto_if+0x56>
      pbuf_chain(q, p);
   1b5d2:	4629      	mov	r1, r5
   1b5d4:	f7fc f96a 	bl	178ac <pbuf_chain>
   1b5d8:	e7a7      	b.n	1b52a <udp_sendto_if+0x56>
          udpchksum = ip_chksum_pseudo(q, IP_PROTO_UDP, q->tot_len,
   1b5da:	893a      	ldrh	r2, [r7, #8]
   1b5dc:	9600      	str	r6, [sp, #0]
   1b5de:	4653      	mov	r3, sl
   1b5e0:	2111      	movs	r1, #17
   1b5e2:	4638      	mov	r0, r7
   1b5e4:	f000 fa46 	bl	1ba74 <ip_chksum_pseudo>
          udpchksum = 0xffff;
   1b5e8:	f64f 73ff 	movw	r3, #65535	; 0xffff
        udphdr->chksum = udpchksum;
   1b5ec:	2800      	cmp	r0, #0
   1b5ee:	bf08      	it	eq
   1b5f0:	4618      	moveq	r0, r3
   1b5f2:	f8a8 0006 	strh.w	r0, [r8, #6]
   1b5f6:	e7b1      	b.n	1b55c <udp_sendto_if+0x88>
    return ERR_MEM;
   1b5f8:	f04f 38ff 	mov.w	r8, #4294967295
   1b5fc:	e7c0      	b.n	1b580 <udp_sendto_if+0xac>
        return ERR_RTE;
   1b5fe:	f06f 0803 	mvn.w	r8, #3
   1b602:	e7bd      	b.n	1b580 <udp_sendto_if+0xac>
  LWIP_ERROR("udp_sendto_if: invalid pcb", pcb != NULL, return ERR_ARG);
   1b604:	f06f 080f 	mvn.w	r8, #15
   1b608:	e7ba      	b.n	1b580 <udp_sendto_if+0xac>
   1b60a:	bf00      	nop

0001b60c <udp_sendto>:
{
   1b60c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1b610:	b085      	sub	sp, #20
  LWIP_ERROR("udp_sendto: invalid pcb", pcb != NULL, return ERR_ARG);
   1b612:	2800      	cmp	r0, #0
   1b614:	f000 809b 	beq.w	1b74e <udp_sendto+0x142>
  LWIP_ERROR("udp_sendto: invalid pbuf", p != NULL, return ERR_ARG);
   1b618:	2900      	cmp	r1, #0
   1b61a:	f000 8098 	beq.w	1b74e <udp_sendto+0x142>
  LWIP_ERROR("udp_sendto: invalid dst_ip", dst_ip != NULL, return ERR_ARG);
   1b61e:	2a00      	cmp	r2, #0
   1b620:	f000 8095 	beq.w	1b74e <udp_sendto+0x142>
   1b624:	4604      	mov	r4, r0
  if (pcb->netif_idx != NETIF_NO_INDEX) {
   1b626:	7a00      	ldrb	r0, [r0, #8]
   1b628:	4699      	mov	r9, r3
   1b62a:	4616      	mov	r6, r2
   1b62c:	460d      	mov	r5, r1
   1b62e:	2800      	cmp	r0, #0
   1b630:	d05b      	beq.n	1b6ea <udp_sendto+0xde>
    netif = netif_get_by_index(pcb->netif_idx);
   1b632:	f7fb ff07 	bl	17444 <netif_get_by_index>
   1b636:	4682      	mov	sl, r0
  if (netif == NULL) {
   1b638:	f1ba 0f00 	cmp.w	sl, #0
   1b63c:	d05c      	beq.n	1b6f8 <udp_sendto+0xec>
    if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
   1b63e:	6823      	ldr	r3, [r4, #0]
   1b640:	2b00      	cmp	r3, #0
   1b642:	d05f      	beq.n	1b704 <udp_sendto+0xf8>
        ip4_addr_ismulticast(ip_2_ip4(&pcb->local_ip))) {
   1b644:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
    if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
   1b648:	2ae0      	cmp	r2, #224	; 0xe0
   1b64a:	d05b      	beq.n	1b704 <udp_sendto+0xf8>
      if (!ip4_addr_cmp(ip_2_ip4(&(pcb->local_ip)), netif_ip4_addr(netif))) {
   1b64c:	f8da 2004 	ldr.w	r2, [sl, #4]
   1b650:	4293      	cmp	r3, r2
   1b652:	d151      	bne.n	1b6f8 <udp_sendto+0xec>
  if (pcb->local_port == 0) {
   1b654:	8a62      	ldrh	r2, [r4, #18]
    if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
   1b656:	46a3      	mov	fp, r4
  if (pcb->local_port == 0) {
   1b658:	2a00      	cmp	r2, #0
   1b65a:	d058      	beq.n	1b70e <udp_sendto+0x102>
  if ((u16_t)(p->tot_len + UDP_HLEN) < p->tot_len) {
   1b65c:	892a      	ldrh	r2, [r5, #8]
   1b65e:	f102 0308 	add.w	r3, r2, #8
   1b662:	b29b      	uxth	r3, r3
   1b664:	429a      	cmp	r2, r3
   1b666:	d86f      	bhi.n	1b748 <udp_sendto+0x13c>
  if (pbuf_add_header(p, UDP_HLEN)) {
   1b668:	2108      	movs	r1, #8
   1b66a:	4628      	mov	r0, r5
   1b66c:	f7fc f84c 	bl	17708 <pbuf_add_header>
   1b670:	2800      	cmp	r0, #0
   1b672:	d054      	beq.n	1b71e <udp_sendto+0x112>
    q = pbuf_alloc(PBUF_IP, UDP_HLEN, PBUF_RAM);
   1b674:	f44f 7220 	mov.w	r2, #640	; 0x280
   1b678:	2108      	movs	r1, #8
   1b67a:	2022      	movs	r0, #34	; 0x22
   1b67c:	f7fb ff0a 	bl	17494 <pbuf_alloc>
    if (q == NULL) {
   1b680:	4607      	mov	r7, r0
   1b682:	2800      	cmp	r0, #0
   1b684:	d060      	beq.n	1b748 <udp_sendto+0x13c>
    if (p->tot_len != 0) {
   1b686:	892b      	ldrh	r3, [r5, #8]
   1b688:	2b00      	cmp	r3, #0
   1b68a:	d159      	bne.n	1b740 <udp_sendto+0x134>
  udphdr->src = lwip_htons(pcb->local_port);
   1b68c:	8a60      	ldrh	r0, [r4, #18]
  udphdr = (struct udp_hdr *)q->payload;
   1b68e:	f8d7 8004 	ldr.w	r8, [r7, #4]
  udphdr->src = lwip_htons(pcb->local_port);
   1b692:	f7f8 f831 	bl	136f8 <lwip_htons>
   1b696:	f8a8 0000 	strh.w	r0, [r8]
  udphdr->dest = lwip_htons(dst_port);
   1b69a:	4648      	mov	r0, r9
   1b69c:	f7f8 f82c 	bl	136f8 <lwip_htons>
  udphdr->chksum = 0x0000;
   1b6a0:	2300      	movs	r3, #0
  udphdr->dest = lwip_htons(dst_port);
   1b6a2:	f8a8 0002 	strh.w	r0, [r8, #2]
  udphdr->chksum = 0x0000;
   1b6a6:	f888 3006 	strb.w	r3, [r8, #6]
   1b6aa:	f888 3007 	strb.w	r3, [r8, #7]
    udphdr->len = lwip_htons(q->tot_len);
   1b6ae:	8938      	ldrh	r0, [r7, #8]
   1b6b0:	f7f8 f822 	bl	136f8 <lwip_htons>
   1b6b4:	f8a8 0004 	strh.w	r0, [r8, #4]
      if (IP_IS_V6(dst_ip) || (pcb->flags & UDP_FLAGS_NOCHKSUM) == 0) {
   1b6b8:	7c23      	ldrb	r3, [r4, #16]
   1b6ba:	07db      	lsls	r3, r3, #31
   1b6bc:	d531      	bpl.n	1b722 <udp_sendto+0x116>
  err = ip_output_if_src(q, src_ip, dst_ip, ttl, pcb->tos, ip_proto, netif);
   1b6be:	2211      	movs	r2, #17
   1b6c0:	7ae3      	ldrb	r3, [r4, #11]
   1b6c2:	9201      	str	r2, [sp, #4]
   1b6c4:	f8cd a008 	str.w	sl, [sp, #8]
   1b6c8:	7aa2      	ldrb	r2, [r4, #10]
   1b6ca:	9200      	str	r2, [sp, #0]
   1b6cc:	4659      	mov	r1, fp
   1b6ce:	4632      	mov	r2, r6
   1b6d0:	4638      	mov	r0, r7
   1b6d2:	f000 fef1 	bl	1c4b8 <ip4_output_if_src>
  if (q != p) {
   1b6d6:	42bd      	cmp	r5, r7
  err = ip_output_if_src(q, src_ip, dst_ip, ttl, pcb->tos, ip_proto, netif);
   1b6d8:	4680      	mov	r8, r0
  if (q != p) {
   1b6da:	d002      	beq.n	1b6e2 <udp_sendto+0xd6>
    pbuf_free(q);
   1b6dc:	4638      	mov	r0, r7
   1b6de:	f7fc f885 	bl	177ec <pbuf_free>
}
   1b6e2:	4640      	mov	r0, r8
   1b6e4:	b005      	add	sp, #20
   1b6e6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      netif = ip_route(&pcb->local_ip, dst_ip);
   1b6ea:	4610      	mov	r0, r2
   1b6ec:	f000 fd08 	bl	1c100 <ip4_route>
   1b6f0:	4682      	mov	sl, r0
  if (netif == NULL) {
   1b6f2:	f1ba 0f00 	cmp.w	sl, #0
   1b6f6:	d1a2      	bne.n	1b63e <udp_sendto+0x32>
        return ERR_RTE;
   1b6f8:	f06f 0803 	mvn.w	r8, #3
}
   1b6fc:	4640      	mov	r0, r8
   1b6fe:	b005      	add	sp, #20
   1b700:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  if (pcb->local_port == 0) {
   1b704:	8a62      	ldrh	r2, [r4, #18]
      src_ip = netif_ip_addr4(netif);
   1b706:	f10a 0b04 	add.w	fp, sl, #4
  if (pcb->local_port == 0) {
   1b70a:	2a00      	cmp	r2, #0
   1b70c:	d1a6      	bne.n	1b65c <udp_sendto+0x50>
    err = udp_bind(pcb, &pcb->local_ip, pcb->local_port);
   1b70e:	4621      	mov	r1, r4
   1b710:	4620      	mov	r0, r4
   1b712:	f7ff fde5 	bl	1b2e0 <udp_bind>
    if (err != ERR_OK) {
   1b716:	4680      	mov	r8, r0
   1b718:	2800      	cmp	r0, #0
   1b71a:	d09f      	beq.n	1b65c <udp_sendto+0x50>
   1b71c:	e7e1      	b.n	1b6e2 <udp_sendto+0xd6>
  if (pbuf_add_header(p, UDP_HLEN)) {
   1b71e:	462f      	mov	r7, r5
   1b720:	e7b4      	b.n	1b68c <udp_sendto+0x80>
          udpchksum = ip_chksum_pseudo(q, IP_PROTO_UDP, q->tot_len,
   1b722:	893a      	ldrh	r2, [r7, #8]
   1b724:	9600      	str	r6, [sp, #0]
   1b726:	465b      	mov	r3, fp
   1b728:	2111      	movs	r1, #17
   1b72a:	4638      	mov	r0, r7
   1b72c:	f000 f9a2 	bl	1ba74 <ip_chksum_pseudo>
          udpchksum = 0xffff;
   1b730:	f64f 73ff 	movw	r3, #65535	; 0xffff
        udphdr->chksum = udpchksum;
   1b734:	2800      	cmp	r0, #0
   1b736:	bf08      	it	eq
   1b738:	4618      	moveq	r0, r3
   1b73a:	f8a8 0006 	strh.w	r0, [r8, #6]
   1b73e:	e7be      	b.n	1b6be <udp_sendto+0xb2>
      pbuf_chain(q, p);
   1b740:	4629      	mov	r1, r5
   1b742:	f7fc f8b3 	bl	178ac <pbuf_chain>
   1b746:	e7a1      	b.n	1b68c <udp_sendto+0x80>
    return ERR_MEM;
   1b748:	f04f 38ff 	mov.w	r8, #4294967295
   1b74c:	e7c9      	b.n	1b6e2 <udp_sendto+0xd6>
  LWIP_ERROR("udp_sendto: invalid pcb", pcb != NULL, return ERR_ARG);
   1b74e:	f06f 080f 	mvn.w	r8, #15
   1b752:	e7c6      	b.n	1b6e2 <udp_sendto+0xd6>

0001b754 <udp_connect>:
{
  struct udp_pcb *ipcb;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_connect: invalid pcb", pcb != NULL, return ERR_ARG);
   1b754:	b328      	cbz	r0, 1b7a2 <udp_connect+0x4e>
  LWIP_ERROR("udp_connect: invalid ipaddr", ipaddr != NULL, return ERR_ARG);
   1b756:	b321      	cbz	r1, 1b7a2 <udp_connect+0x4e>
{
   1b758:	b570      	push	{r4, r5, r6, lr}
   1b75a:	4616      	mov	r6, r2

  if (pcb->local_port == 0) {
   1b75c:	8a42      	ldrh	r2, [r0, #18]
   1b75e:	4604      	mov	r4, r0
   1b760:	460d      	mov	r5, r1
   1b762:	b1c2      	cbz	r2, 1b796 <udp_connect+0x42>
  ip_addr_debug_print_val(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE,
                          pcb->remote_ip);
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, (", port %"U16_F")\n", pcb->remote_port));

  /* Insert UDP PCB into the list of active UDP PCBs. */
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
   1b764:	4910      	ldr	r1, [pc, #64]	; (1b7a8 <udp_connect+0x54>)
  pcb->flags |= UDP_FLAGS_CONNECTED;
   1b766:	7c23      	ldrb	r3, [r4, #16]
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
   1b768:	680a      	ldr	r2, [r1, #0]
  ip_addr_set_ipaddr(&pcb->remote_ip, ipaddr);
   1b76a:	6828      	ldr	r0, [r5, #0]
   1b76c:	6060      	str	r0, [r4, #4]
  pcb->flags |= UDP_FLAGS_CONNECTED;
   1b76e:	f043 0304 	orr.w	r3, r3, #4
  pcb->remote_port = port;
   1b772:	82a6      	strh	r6, [r4, #20]
  pcb->flags |= UDP_FLAGS_CONNECTED;
   1b774:	7423      	strb	r3, [r4, #16]
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
   1b776:	b142      	cbz	r2, 1b78a <udp_connect+0x36>
    if (pcb == ipcb) {
   1b778:	4294      	cmp	r4, r2
   1b77a:	d00a      	beq.n	1b792 <udp_connect+0x3e>
   1b77c:	4613      	mov	r3, r2
   1b77e:	e001      	b.n	1b784 <udp_connect+0x30>
   1b780:	429c      	cmp	r4, r3
   1b782:	d006      	beq.n	1b792 <udp_connect+0x3e>
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
   1b784:	68db      	ldr	r3, [r3, #12]
   1b786:	2b00      	cmp	r3, #0
   1b788:	d1fa      	bne.n	1b780 <udp_connect+0x2c>
      /* already on the list, just return */
      return ERR_OK;
    }
  }
  /* PCB not yet on the list, add PCB now */
  pcb->next = udp_pcbs;
   1b78a:	60e2      	str	r2, [r4, #12]
  udp_pcbs = pcb;
   1b78c:	600c      	str	r4, [r1, #0]
  return ERR_OK;
   1b78e:	2000      	movs	r0, #0
   1b790:	bd70      	pop	{r4, r5, r6, pc}
      return ERR_OK;
   1b792:	2000      	movs	r0, #0
}
   1b794:	bd70      	pop	{r4, r5, r6, pc}
    err_t err = udp_bind(pcb, &pcb->local_ip, pcb->local_port);
   1b796:	4601      	mov	r1, r0
   1b798:	f7ff fda2 	bl	1b2e0 <udp_bind>
    if (err != ERR_OK) {
   1b79c:	2800      	cmp	r0, #0
   1b79e:	d0e1      	beq.n	1b764 <udp_connect+0x10>
   1b7a0:	bd70      	pop	{r4, r5, r6, pc}
  LWIP_ERROR("udp_connect: invalid pcb", pcb != NULL, return ERR_ARG);
   1b7a2:	f06f 000f 	mvn.w	r0, #15
   1b7a6:	4770      	bx	lr
   1b7a8:	2000a400 	.word	0x2000a400

0001b7ac <udp_recv>:
void
udp_recv(struct udp_pcb *pcb, udp_recv_fn recv, void *recv_arg)
{
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_recv: invalid pcb", pcb != NULL, return);
   1b7ac:	b108      	cbz	r0, 1b7b2 <udp_recv+0x6>

  /* remember recv() callback and user data */
  pcb->recv = recv;
   1b7ae:	6181      	str	r1, [r0, #24]
  pcb->recv_arg = recv_arg;
   1b7b0:	61c2      	str	r2, [r0, #28]
   1b7b2:	4770      	bx	lr

0001b7b4 <udp_remove>:
{
  struct udp_pcb *pcb2;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_remove: invalid pcb", pcb != NULL, return);
   1b7b4:	b300      	cbz	r0, 1b7f8 <udp_remove+0x44>

  mib2_udp_unbind(pcb);
  /* pcb to be removed is first in list? */
  if (udp_pcbs == pcb) {
   1b7b6:	4a11      	ldr	r2, [pc, #68]	; (1b7fc <udp_remove+0x48>)
   1b7b8:	6813      	ldr	r3, [r2, #0]
   1b7ba:	4298      	cmp	r0, r3
   1b7bc:	d016      	beq.n	1b7ec <udp_remove+0x38>
    /* make list start at 2nd pcb */
    udp_pcbs = udp_pcbs->next;
    /* pcb not 1st in list */
  } else {
    for (pcb2 = udp_pcbs; pcb2 != NULL; pcb2 = pcb2->next) {
   1b7be:	b153      	cbz	r3, 1b7d6 <udp_remove+0x22>
      /* find pcb in udp_pcbs list */
      if (pcb2->next != NULL && pcb2->next == pcb) {
   1b7c0:	68da      	ldr	r2, [r3, #12]
   1b7c2:	b142      	cbz	r2, 1b7d6 <udp_remove+0x22>
   1b7c4:	4290      	cmp	r0, r2
   1b7c6:	d103      	bne.n	1b7d0 <udp_remove+0x1c>
   1b7c8:	e009      	b.n	1b7de <udp_remove+0x2a>
   1b7ca:	4298      	cmp	r0, r3
   1b7cc:	d008      	beq.n	1b7e0 <udp_remove+0x2c>
   1b7ce:	461a      	mov	r2, r3
   1b7d0:	68d3      	ldr	r3, [r2, #12]
   1b7d2:	2b00      	cmp	r3, #0
   1b7d4:	d1f9      	bne.n	1b7ca <udp_remove+0x16>
        pcb2->next = pcb->next;
        break;
      }
    }
  }
  memp_free(MEMP_UDP_PCB, pcb);
   1b7d6:	4601      	mov	r1, r0
   1b7d8:	2001      	movs	r0, #1
   1b7da:	f7fb bcb5 	b.w	17148 <memp_free>
      if (pcb2->next != NULL && pcb2->next == pcb) {
   1b7de:	461a      	mov	r2, r3
        pcb2->next = pcb->next;
   1b7e0:	68c3      	ldr	r3, [r0, #12]
   1b7e2:	60d3      	str	r3, [r2, #12]
  memp_free(MEMP_UDP_PCB, pcb);
   1b7e4:	4601      	mov	r1, r0
   1b7e6:	2001      	movs	r0, #1
   1b7e8:	f7fb bcae 	b.w	17148 <memp_free>
    udp_pcbs = udp_pcbs->next;
   1b7ec:	68c3      	ldr	r3, [r0, #12]
   1b7ee:	6013      	str	r3, [r2, #0]
  memp_free(MEMP_UDP_PCB, pcb);
   1b7f0:	4601      	mov	r1, r0
   1b7f2:	2001      	movs	r0, #1
   1b7f4:	f7fb bca8 	b.w	17148 <memp_free>
   1b7f8:	4770      	bx	lr
   1b7fa:	bf00      	nop
   1b7fc:	2000a400 	.word	0x2000a400

0001b800 <udp_new>:
 *
 * @see udp_remove()
 */
struct udp_pcb *
udp_new(void)
{
   1b800:	b510      	push	{r4, lr}
  struct udp_pcb *pcb;

  LWIP_ASSERT_CORE_LOCKED();

  pcb = (struct udp_pcb *)memp_malloc(MEMP_UDP_PCB);
   1b802:	2001      	movs	r0, #1
   1b804:	f7fb fc90 	bl	17128 <memp_malloc>
  /* could allocate UDP PCB? */
  if (pcb != NULL) {
   1b808:	4604      	mov	r4, r0
   1b80a:	b128      	cbz	r0, 1b818 <udp_new+0x18>
    /* UDP Lite: by initializing to all zeroes, chksum_len is set to 0
     * which means checksum is generated over the whole datagram per default
     * (recommended as default by RFC 3828). */
    /* initialize PCB to all zeroes */
    memset(pcb, 0, sizeof(struct udp_pcb));
   1b80c:	2220      	movs	r2, #32
   1b80e:	2100      	movs	r1, #0
   1b810:	f00c fb24 	bl	27e5c <memset>
    pcb->ttl = UDP_TTL;
   1b814:	23ff      	movs	r3, #255	; 0xff
   1b816:	72e3      	strb	r3, [r4, #11]
#if LWIP_MULTICAST_TX_OPTIONS
    udp_set_multicast_ttl(pcb, UDP_TTL);
#endif /* LWIP_MULTICAST_TX_OPTIONS */
  }
  return pcb;
}
   1b818:	4620      	mov	r0, r4
   1b81a:	bd10      	pop	{r4, pc}

0001b81c <udp_netif_ip_addr_changed>:
 */
void udp_netif_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
  struct udp_pcb *upcb;

  if (!ip_addr_isany(old_addr) && !ip_addr_isany(new_addr)) {
   1b81c:	b1a0      	cbz	r0, 1b848 <udp_netif_ip_addr_changed+0x2c>
   1b81e:	6802      	ldr	r2, [r0, #0]
   1b820:	b192      	cbz	r2, 1b848 <udp_netif_ip_addr_changed+0x2c>
   1b822:	b189      	cbz	r1, 1b848 <udp_netif_ip_addr_changed+0x2c>
   1b824:	680b      	ldr	r3, [r1, #0]
   1b826:	b17b      	cbz	r3, 1b848 <udp_netif_ip_addr_changed+0x2c>
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
   1b828:	4b08      	ldr	r3, [pc, #32]	; (1b84c <udp_netif_ip_addr_changed+0x30>)
   1b82a:	681b      	ldr	r3, [r3, #0]
   1b82c:	b163      	cbz	r3, 1b848 <udp_netif_ip_addr_changed+0x2c>
{
   1b82e:	b410      	push	{r4}
   1b830:	e000      	b.n	1b834 <udp_netif_ip_addr_changed+0x18>
   1b832:	6802      	ldr	r2, [r0, #0]
      /* PCB bound to current local interface address? */
      if (ip_addr_cmp(&upcb->local_ip, old_addr)) {
   1b834:	681c      	ldr	r4, [r3, #0]
   1b836:	42a2      	cmp	r2, r4
        /* The PCB is bound to the old ipaddr and
         * is set to bound to the new one instead */
        ip_addr_copy(upcb->local_ip, *new_addr);
   1b838:	bf04      	itt	eq
   1b83a:	680a      	ldreq	r2, [r1, #0]
   1b83c:	601a      	streq	r2, [r3, #0]
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
   1b83e:	68db      	ldr	r3, [r3, #12]
   1b840:	2b00      	cmp	r3, #0
   1b842:	d1f6      	bne.n	1b832 <udp_netif_ip_addr_changed+0x16>
      }
    }
  }
}
   1b844:	f85d 4b04 	ldr.w	r4, [sp], #4
   1b848:	4770      	bx	lr
   1b84a:	bf00      	nop
   1b84c:	2000a400 	.word	0x2000a400

0001b850 <ethernet_input>:
  u16_t next_hdr_offset = SIZEOF_ETH_HDR;
#endif /* LWIP_ARP || ETHARP_SUPPORT_VLAN */

  LWIP_ASSERT_CORE_LOCKED();

  if (p->len <= SIZEOF_ETH_HDR) {
   1b850:	8943      	ldrh	r3, [r0, #10]
   1b852:	2b0e      	cmp	r3, #14
{
   1b854:	b570      	push	{r4, r5, r6, lr}
   1b856:	4604      	mov	r4, r0
  if (p->len <= SIZEOF_ETH_HDR) {
   1b858:	d91f      	bls.n	1b89a <ethernet_input+0x4a>
    ETHARP_STATS_INC(etharp.drop);
    MIB2_STATS_NETIF_INC(netif, ifinerrors);
    goto free_and_return;
  }

  if (p->if_idx == NETIF_NO_INDEX) {
   1b85a:	7bc3      	ldrb	r3, [r0, #15]
   1b85c:	460e      	mov	r6, r1
   1b85e:	b91b      	cbnz	r3, 1b868 <ethernet_input+0x18>
    p->if_idx = netif_get_index(netif);
   1b860:	f891 3038 	ldrb.w	r3, [r1, #56]	; 0x38
   1b864:	3301      	adds	r3, #1
   1b866:	73c3      	strb	r3, [r0, #15]
  }

  /* points to packet payload, which starts with an Ethernet header */
  ethhdr = (struct eth_hdr *)p->payload;
   1b868:	6860      	ldr	r0, [r4, #4]

#if LWIP_ARP_FILTER_NETIF
  netif = LWIP_ARP_FILTER_NETIF_FN(p, netif, lwip_htons(type));
#endif /* LWIP_ARP_FILTER_NETIF*/

  if (ethhdr->dest.addr[0] & 1) {
   1b86a:	7803      	ldrb	r3, [r0, #0]
  type = ethhdr->type;
   1b86c:	8985      	ldrh	r5, [r0, #12]
  if (ethhdr->dest.addr[0] & 1) {
   1b86e:	07d9      	lsls	r1, r3, #31
   1b870:	d50a      	bpl.n	1b888 <ethernet_input+0x38>
    /* this might be a multicast or broadcast packet */
    if (ethhdr->dest.addr[0] == LL_IP4_MULTICAST_ADDR_0) {
   1b872:	2b01      	cmp	r3, #1
   1b874:	d030      	beq.n	1b8d8 <ethernet_input+0x88>
             (ethhdr->dest.addr[1] == LL_IP6_MULTICAST_ADDR_1)) {
      /* mark the pbuf as link-layer multicast */
      p->flags |= PBUF_FLAG_LLMCAST;
    }
#endif /* LWIP_IPV6 */
    else if (eth_addr_cmp(&ethhdr->dest, &ethbroadcast)) {
   1b876:	2206      	movs	r2, #6
   1b878:	491d      	ldr	r1, [pc, #116]	; (1b8f0 <ethernet_input+0xa0>)
   1b87a:	f00c f9c1 	bl	27c00 <memcmp>
   1b87e:	b918      	cbnz	r0, 1b888 <ethernet_input+0x38>
      /* mark the pbuf as link-layer broadcast */
      p->flags |= PBUF_FLAG_LLBCAST;
   1b880:	7b63      	ldrb	r3, [r4, #13]
   1b882:	f043 0308 	orr.w	r3, r3, #8
   1b886:	7363      	strb	r3, [r4, #13]
    }
  }

  switch (type) {
   1b888:	2d08      	cmp	r5, #8
   1b88a:	d00b      	beq.n	1b8a4 <ethernet_input+0x54>
   1b88c:	f5b5 6fc1 	cmp.w	r5, #1544	; 0x608
   1b890:	d103      	bne.n	1b89a <ethernet_input+0x4a>
        ip4_input(p, netif);
      }
      break;

    case PP_HTONS(ETHTYPE_ARP):
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
   1b892:	f896 3035 	ldrb.w	r3, [r6, #53]	; 0x35
   1b896:	071b      	lsls	r3, r3, #28
   1b898:	d413      	bmi.n	1b8c2 <ethernet_input+0x72>
  /* This means the pbuf is freed or consumed,
     so the caller doesn't have to free it again */
  return ERR_OK;

free_and_return:
  pbuf_free(p);
   1b89a:	4620      	mov	r0, r4
   1b89c:	f7fb ffa6 	bl	177ec <pbuf_free>
  return ERR_OK;
}
   1b8a0:	2000      	movs	r0, #0
   1b8a2:	bd70      	pop	{r4, r5, r6, pc}
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
   1b8a4:	f896 3035 	ldrb.w	r3, [r6, #53]	; 0x35
   1b8a8:	071a      	lsls	r2, r3, #28
   1b8aa:	d5f6      	bpl.n	1b89a <ethernet_input+0x4a>
      if (pbuf_remove_header(p, next_hdr_offset)) {
   1b8ac:	210e      	movs	r1, #14
   1b8ae:	4620      	mov	r0, r4
   1b8b0:	f7fb ff4e 	bl	17750 <pbuf_remove_header>
   1b8b4:	2800      	cmp	r0, #0
   1b8b6:	d1f0      	bne.n	1b89a <ethernet_input+0x4a>
        ip4_input(p, netif);
   1b8b8:	4631      	mov	r1, r6
   1b8ba:	4620      	mov	r0, r4
   1b8bc:	f000 fc58 	bl	1c170 <ip4_input>
      break;
   1b8c0:	e7ee      	b.n	1b8a0 <ethernet_input+0x50>
      if (pbuf_remove_header(p, next_hdr_offset)) {
   1b8c2:	210e      	movs	r1, #14
   1b8c4:	4620      	mov	r0, r4
   1b8c6:	f7fb ff43 	bl	17750 <pbuf_remove_header>
   1b8ca:	2800      	cmp	r0, #0
   1b8cc:	d1e5      	bne.n	1b89a <ethernet_input+0x4a>
        etharp_input(p, netif);
   1b8ce:	4631      	mov	r1, r6
   1b8d0:	4620      	mov	r0, r4
   1b8d2:	f7fa fd87 	bl	163e4 <etharp_input>
      break;
   1b8d6:	e7e3      	b.n	1b8a0 <ethernet_input+0x50>
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
   1b8d8:	7843      	ldrb	r3, [r0, #1]
   1b8da:	2b00      	cmp	r3, #0
   1b8dc:	d1d4      	bne.n	1b888 <ethernet_input+0x38>
   1b8de:	7883      	ldrb	r3, [r0, #2]
   1b8e0:	2b5e      	cmp	r3, #94	; 0x5e
   1b8e2:	d1d1      	bne.n	1b888 <ethernet_input+0x38>
        p->flags |= PBUF_FLAG_LLMCAST;
   1b8e4:	7b63      	ldrb	r3, [r4, #13]
   1b8e6:	f043 0310 	orr.w	r3, r3, #16
   1b8ea:	7363      	strb	r3, [r4, #13]
   1b8ec:	e7cc      	b.n	1b888 <ethernet_input+0x38>
   1b8ee:	bf00      	nop
   1b8f0:	0002d738 	.word	0x0002d738

0001b8f4 <ethernet_output>:
 * @return ERR_OK if the packet was sent, any other err_t on failure
 */
err_t
ethernet_output(struct netif * netif, struct pbuf * p,
                const struct eth_addr * src, const struct eth_addr * dst,
                u16_t eth_type) {
   1b8f4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1b8f8:	4605      	mov	r5, r0
  struct eth_hdr *ethhdr;
  u16_t eth_type_be = lwip_htons(eth_type);
   1b8fa:	f8bd 0018 	ldrh.w	r0, [sp, #24]
                u16_t eth_type) {
   1b8fe:	460c      	mov	r4, r1
   1b900:	4616      	mov	r6, r2
   1b902:	461f      	mov	r7, r3
  u16_t eth_type_be = lwip_htons(eth_type);
   1b904:	f7f7 fef8 	bl	136f8 <lwip_htons>

    eth_type_be = PP_HTONS(ETHTYPE_VLAN);
  } else
#endif /* ETHARP_SUPPORT_VLAN && defined(LWIP_HOOK_VLAN_SET) */
  {
    if (pbuf_add_header(p, SIZEOF_ETH_HDR) != 0) {
   1b908:	210e      	movs	r1, #14
  u16_t eth_type_be = lwip_htons(eth_type);
   1b90a:	4680      	mov	r8, r0
    if (pbuf_add_header(p, SIZEOF_ETH_HDR) != 0) {
   1b90c:	4620      	mov	r0, r4
   1b90e:	f7fb fefb 	bl	17708 <pbuf_add_header>
   1b912:	b988      	cbnz	r0, 1b938 <ethernet_output+0x44>
    }
  }

  LWIP_ASSERT_CORE_LOCKED();

  ethhdr = (struct eth_hdr *)p->payload;
   1b914:	6861      	ldr	r1, [r4, #4]
  ethhdr->type = eth_type_be;
   1b916:	f8a1 800c 	strh.w	r8, [r1, #12]
  SMEMCPY(&ethhdr->dest, dst, ETH_HWADDR_LEN);
   1b91a:	683b      	ldr	r3, [r7, #0]
   1b91c:	600b      	str	r3, [r1, #0]
   1b91e:	88bb      	ldrh	r3, [r7, #4]
   1b920:	808b      	strh	r3, [r1, #4]
  SMEMCPY(&ethhdr->src,  src, ETH_HWADDR_LEN);
   1b922:	6833      	ldr	r3, [r6, #0]
   1b924:	f8c1 3006 	str.w	r3, [r1, #6]
   1b928:	88b3      	ldrh	r3, [r6, #4]
   1b92a:	814b      	strh	r3, [r1, #10]
              (netif->hwaddr_len == ETH_HWADDR_LEN));
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE,
              ("ethernet_output: sending packet %p\n", (void *)p));

  /* send the packet */
  return netif->linkoutput(netif, p);
   1b92c:	69ab      	ldr	r3, [r5, #24]
   1b92e:	4621      	mov	r1, r4
   1b930:	4628      	mov	r0, r5
pbuf_header_failed:
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
              ("ethernet_output: could not allocate room for header.\n"));
  LINK_STATS_INC(link.lenerr);
  return ERR_BUF;
}
   1b932:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  return netif->linkoutput(netif, p);
   1b936:	4718      	bx	r3
}
   1b938:	f06f 0001 	mvn.w	r0, #1
   1b93c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0001b940 <inet_chksum_pseudo>:
 * @return checksum (as u16_t) to be saved directly in the protocol header
 */
u16_t
inet_chksum_pseudo(struct pbuf *p, u8_t proto, u16_t proto_len,
                   const ip4_addr_t *src, const ip4_addr_t *dest)
{
   1b940:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1b944:	b083      	sub	sp, #12
  u32_t acc;
  u32_t addr;

  addr = ip4_addr_get_u32(src);
   1b946:	681c      	ldr	r4, [r3, #0]
{
   1b948:	9d0c      	ldr	r5, [sp, #48]	; 0x30
  acc = (addr & 0xffffUL);
  acc = (u32_t)(acc + ((addr >> 16) & 0xffffUL));
  addr = ip4_addr_get_u32(dest);
   1b94a:	682b      	ldr	r3, [r5, #0]
  acc = (u32_t)(acc + (addr & 0xffffUL));
  acc = (u32_t)(acc + ((addr >> 16) & 0xffffUL));
   1b94c:	0c1d      	lsrs	r5, r3, #16
   1b94e:	fa15 f383 	uxtah	r3, r5, r3
   1b952:	fa13 f384 	uxtah	r3, r3, r4
   1b956:	eb03 4314 	add.w	r3, r3, r4, lsr #16
  /* fold down to 16 bits */
  acc = FOLD_U32T(acc);
   1b95a:	b29f      	uxth	r7, r3
   1b95c:	eb07 4313 	add.w	r3, r7, r3, lsr #16
  acc = FOLD_U32T(acc);
   1b960:	b29c      	uxth	r4, r3
{
   1b962:	4690      	mov	r8, r2
  acc = FOLD_U32T(acc);
   1b964:	eb04 4713 	add.w	r7, r4, r3, lsr #16
  for (q = p; q != NULL; q = q->next) {
   1b968:	2800      	cmp	r0, #0
   1b96a:	d059      	beq.n	1ba20 <inet_chksum_pseudo+0xe0>
   1b96c:	f04f 0e00 	mov.w	lr, #0
  u16_t t = 0;
   1b970:	46f4      	mov	ip, lr
    acc += LWIP_CHKSUM(q->payload, q->len);
   1b972:	6843      	ldr	r3, [r0, #4]
   1b974:	8942      	ldrh	r2, [r0, #10]
  u16_t t = 0;
   1b976:	f8ad c006 	strh.w	ip, [sp, #6]
  if (odd && len > 0) {
   1b97a:	f013 0901 	ands.w	r9, r3, #1
    acc += LWIP_CHKSUM(q->payload, q->len);
   1b97e:	4692      	mov	sl, r2
  if (odd && len > 0) {
   1b980:	d062      	beq.n	1ba48 <inet_chksum_pseudo+0x108>
   1b982:	2a00      	cmp	r2, #0
   1b984:	d074      	beq.n	1ba70 <inet_chksum_pseudo+0x130>
    len--;
   1b986:	f102 3aff 	add.w	sl, r2, #4294967295
    ((u8_t *)&t)[1] = *pb++;
   1b98a:	781c      	ldrb	r4, [r3, #0]
   1b98c:	f88d 4007 	strb.w	r4, [sp, #7]
  while (len > 1) {
   1b990:	f1ba 0f01 	cmp.w	sl, #1
    ((u8_t *)&t)[1] = *pb++;
   1b994:	f103 0b01 	add.w	fp, r3, #1
  while (len > 1) {
   1b998:	dd5a      	ble.n	1ba50 <inet_chksum_pseudo+0x110>
   1b99a:	4653      	mov	r3, sl
   1b99c:	465d      	mov	r5, fp
   1b99e:	2400      	movs	r4, #0
    sum += *ps++;
   1b9a0:	f835 6b02 	ldrh.w	r6, [r5], #2
    len -= 2;
   1b9a4:	3b02      	subs	r3, #2
  while (len > 1) {
   1b9a6:	2b01      	cmp	r3, #1
    sum += *ps++;
   1b9a8:	4434      	add	r4, r6
  while (len > 1) {
   1b9aa:	dcf9      	bgt.n	1b9a0 <inet_chksum_pseudo+0x60>
   1b9ac:	f1aa 0a02 	sub.w	sl, sl, #2
   1b9b0:	f02a 0301 	bic.w	r3, sl, #1
   1b9b4:	f00a 0a01 	and.w	sl, sl, #1
   1b9b8:	3302      	adds	r3, #2
  if (len > 0) {
   1b9ba:	f1ba 0f01 	cmp.w	sl, #1
   1b9be:	445b      	add	r3, fp
   1b9c0:	d14c      	bne.n	1ba5c <inet_chksum_pseudo+0x11c>
    ((u8_t *)&t)[0] = *(const u8_t *)ps;
   1b9c2:	781b      	ldrb	r3, [r3, #0]
   1b9c4:	f88d 3006 	strb.w	r3, [sp, #6]
   1b9c8:	f8bd 3006 	ldrh.w	r3, [sp, #6]
   1b9cc:	4423      	add	r3, r4
   1b9ce:	b29c      	uxth	r4, r3
   1b9d0:	eb04 4413 	add.w	r4, r4, r3, lsr #16
   1b9d4:	b2a3      	uxth	r3, r4
   1b9d6:	eb03 4414 	add.w	r4, r3, r4, lsr #16
  if (odd) {
   1b9da:	f1b9 0f00 	cmp.w	r9, #0
   1b9de:	d004      	beq.n	1b9ea <inet_chksum_pseudo+0xaa>
    sum = SWAP_BYTES_IN_WORD(sum);
   1b9e0:	0223      	lsls	r3, r4, #8
   1b9e2:	b29b      	uxth	r3, r3
   1b9e4:	f3c4 2407 	ubfx	r4, r4, #8, #8
   1b9e8:	431c      	orrs	r4, r3
    acc += LWIP_CHKSUM(q->payload, q->len);
   1b9ea:	fa17 f484 	uxtah	r4, r7, r4
    acc = FOLD_U32T(acc);
   1b9ee:	b2a7      	uxth	r7, r4
    if (q->len % 2 != 0) {
   1b9f0:	07d3      	lsls	r3, r2, #31
    acc = FOLD_U32T(acc);
   1b9f2:	eb07 4714 	add.w	r7, r7, r4, lsr #16
    if (q->len % 2 != 0) {
   1b9f6:	d507      	bpl.n	1ba08 <inet_chksum_pseudo+0xc8>
      acc = SWAP_BYTES_IN_WORD(acc);
   1b9f8:	023b      	lsls	r3, r7, #8
   1b9fa:	b29b      	uxth	r3, r3
   1b9fc:	f3c7 2407 	ubfx	r4, r7, #8, #8
   1ba00:	f08e 0e01 	eor.w	lr, lr, #1
   1ba04:	ea43 0704 	orr.w	r7, r3, r4
  for (q = p; q != NULL; q = q->next) {
   1ba08:	6800      	ldr	r0, [r0, #0]
   1ba0a:	2800      	cmp	r0, #0
   1ba0c:	d1b1      	bne.n	1b972 <inet_chksum_pseudo+0x32>
  if (swapped) {
   1ba0e:	f1be 0f00 	cmp.w	lr, #0
   1ba12:	d005      	beq.n	1ba20 <inet_chksum_pseudo+0xe0>
    acc = SWAP_BYTES_IN_WORD(acc);
   1ba14:	023b      	lsls	r3, r7, #8
   1ba16:	b29b      	uxth	r3, r3
   1ba18:	f3c7 2407 	ubfx	r4, r7, #8, #8
   1ba1c:	ea43 0704 	orr.w	r7, r3, r4
  acc += (u32_t)lwip_htons((u16_t)proto);
   1ba20:	4608      	mov	r0, r1
   1ba22:	f7f7 fe69 	bl	136f8 <lwip_htons>
   1ba26:	4604      	mov	r4, r0
  acc += (u32_t)lwip_htons(proto_len);
   1ba28:	4640      	mov	r0, r8
   1ba2a:	f7f7 fe65 	bl	136f8 <lwip_htons>
   1ba2e:	4404      	add	r4, r0
   1ba30:	443c      	add	r4, r7
  acc = FOLD_U32T(acc);
   1ba32:	b2a0      	uxth	r0, r4
   1ba34:	eb00 4414 	add.w	r4, r0, r4, lsr #16
  acc = FOLD_U32T(acc);
   1ba38:	b2a0      	uxth	r0, r4
   1ba3a:	eb00 4014 	add.w	r0, r0, r4, lsr #16
  return (u16_t)~(acc & 0xffffUL);
   1ba3e:	43c0      	mvns	r0, r0

  return inet_cksum_pseudo_base(p, proto, proto_len, acc);
}
   1ba40:	b280      	uxth	r0, r0
   1ba42:	b003      	add	sp, #12
   1ba44:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  while (len > 1) {
   1ba48:	f1ba 0f01 	cmp.w	sl, #1
    acc += LWIP_CHKSUM(q->payload, q->len);
   1ba4c:	469b      	mov	fp, r3
  while (len > 1) {
   1ba4e:	dca4      	bgt.n	1b99a <inet_chksum_pseudo+0x5a>
  if (len > 0) {
   1ba50:	f1ba 0f01 	cmp.w	sl, #1
  while (len > 1) {
   1ba54:	465b      	mov	r3, fp
  u32_t sum = 0;
   1ba56:	f04f 0400 	mov.w	r4, #0
  if (len > 0) {
   1ba5a:	d0b2      	beq.n	1b9c2 <inet_chksum_pseudo+0x82>
   1ba5c:	f8bd 3006 	ldrh.w	r3, [sp, #6]
   1ba60:	4423      	add	r3, r4
   1ba62:	b29c      	uxth	r4, r3
   1ba64:	eb04 4313 	add.w	r3, r4, r3, lsr #16
   1ba68:	b29c      	uxth	r4, r3
   1ba6a:	eb04 4413 	add.w	r4, r4, r3, lsr #16
   1ba6e:	e7b4      	b.n	1b9da <inet_chksum_pseudo+0x9a>
  if (odd && len > 0) {
   1ba70:	4614      	mov	r4, r2
   1ba72:	e7b5      	b.n	1b9e0 <inet_chksum_pseudo+0xa0>

0001ba74 <ip_chksum_pseudo>:
#if LWIP_IPV4 && LWIP_IPV6
  else
#endif /* LWIP_IPV4 && LWIP_IPV6 */
#if LWIP_IPV4
  {
    return inet_chksum_pseudo(p, proto, proto_len, ip_2_ip4(src), ip_2_ip4(dest));
   1ba74:	f7ff bf64 	b.w	1b940 <inet_chksum_pseudo>

0001ba78 <inet_chksum>:
 * @return checksum (as u16_t) to be saved directly in the protocol header
 */

u16_t
inet_chksum(const void *dataptr, u16_t len)
{
   1ba78:	b470      	push	{r4, r5, r6}
   1ba7a:	b083      	sub	sp, #12
  u16_t t = 0;
   1ba7c:	2300      	movs	r3, #0
  if (odd && len > 0) {
   1ba7e:	f010 0601 	ands.w	r6, r0, #1
  u16_t t = 0;
   1ba82:	f8ad 3006 	strh.w	r3, [sp, #6]
  if (odd && len > 0) {
   1ba86:	d005      	beq.n	1ba94 <inet_chksum+0x1c>
   1ba88:	b329      	cbz	r1, 1bad6 <inet_chksum+0x5e>
    ((u8_t *)&t)[1] = *pb++;
   1ba8a:	7803      	ldrb	r3, [r0, #0]
   1ba8c:	f88d 3007 	strb.w	r3, [sp, #7]
    len--;
   1ba90:	3901      	subs	r1, #1
    ((u8_t *)&t)[1] = *pb++;
   1ba92:	3001      	adds	r0, #1
  while (len > 1) {
   1ba94:	2901      	cmp	r1, #1
   1ba96:	dd34      	ble.n	1bb02 <inet_chksum+0x8a>
   1ba98:	460b      	mov	r3, r1
   1ba9a:	4604      	mov	r4, r0
   1ba9c:	2200      	movs	r2, #0
    sum += *ps++;
   1ba9e:	f834 5b02 	ldrh.w	r5, [r4], #2
    len -= 2;
   1baa2:	3b02      	subs	r3, #2
  while (len > 1) {
   1baa4:	2b01      	cmp	r3, #1
    sum += *ps++;
   1baa6:	442a      	add	r2, r5
  while (len > 1) {
   1baa8:	dcf9      	bgt.n	1ba9e <inet_chksum+0x26>
   1baaa:	3902      	subs	r1, #2
   1baac:	f021 0301 	bic.w	r3, r1, #1
   1bab0:	3302      	adds	r3, #2
   1bab2:	4418      	add	r0, r3
   1bab4:	f001 0101 	and.w	r1, r1, #1
  if (len > 0) {
   1bab8:	2901      	cmp	r1, #1
   1baba:	d116      	bne.n	1baea <inet_chksum+0x72>
    ((u8_t *)&t)[0] = *(const u8_t *)ps;
   1babc:	7803      	ldrb	r3, [r0, #0]
   1babe:	f88d 3006 	strb.w	r3, [sp, #6]
   1bac2:	f8bd 1006 	ldrh.w	r1, [sp, #6]
   1bac6:	440a      	add	r2, r1
   1bac8:	b291      	uxth	r1, r2
   1baca:	eb01 4212 	add.w	r2, r1, r2, lsr #16
   1bace:	b291      	uxth	r1, r2
   1bad0:	eb01 4112 	add.w	r1, r1, r2, lsr #16
  if (odd) {
   1bad4:	b126      	cbz	r6, 1bae0 <inet_chksum+0x68>
    sum = SWAP_BYTES_IN_WORD(sum);
   1bad6:	020b      	lsls	r3, r1, #8
   1bad8:	b29b      	uxth	r3, r3
   1bada:	f3c1 2107 	ubfx	r1, r1, #8, #8
   1bade:	4319      	orrs	r1, r3
  return (u16_t)~(unsigned int)LWIP_CHKSUM(dataptr, len);
   1bae0:	43c9      	mvns	r1, r1
}
   1bae2:	b288      	uxth	r0, r1
   1bae4:	b003      	add	sp, #12
   1bae6:	bc70      	pop	{r4, r5, r6}
   1bae8:	4770      	bx	lr
   1baea:	f8bd 3006 	ldrh.w	r3, [sp, #6]
   1baee:	441a      	add	r2, r3
   1baf0:	b293      	uxth	r3, r2
   1baf2:	eb03 4312 	add.w	r3, r3, r2, lsr #16
   1baf6:	b299      	uxth	r1, r3
   1baf8:	eb01 4113 	add.w	r1, r1, r3, lsr #16
  if (odd) {
   1bafc:	2e00      	cmp	r6, #0
   1bafe:	d1ea      	bne.n	1bad6 <inet_chksum+0x5e>
   1bb00:	e7ee      	b.n	1bae0 <inet_chksum+0x68>
  u32_t sum = 0;
   1bb02:	2200      	movs	r2, #0
   1bb04:	e7d8      	b.n	1bab8 <inet_chksum+0x40>
   1bb06:	bf00      	nop

0001bb08 <inet_chksum_pbuf>:
  u32_t acc;
  struct pbuf *q;
  int swapped = 0;

  acc = 0;
  for (q = p; q != NULL; q = q->next) {
   1bb08:	2800      	cmp	r0, #0
   1bb0a:	d06b      	beq.n	1bbe4 <inet_chksum_pbuf+0xdc>
{
   1bb0c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  for (q = p; q != NULL; q = q->next) {
   1bb10:	2700      	movs	r7, #0
{
   1bb12:	b083      	sub	sp, #12
  for (q = p; q != NULL; q = q->next) {
   1bb14:	46bc      	mov	ip, r7
  u16_t t = 0;
   1bb16:	46be      	mov	lr, r7
    acc += LWIP_CHKSUM(q->payload, q->len);
   1bb18:	6843      	ldr	r3, [r0, #4]
   1bb1a:	8946      	ldrh	r6, [r0, #10]
  u16_t t = 0;
   1bb1c:	f8ad e006 	strh.w	lr, [sp, #6]
  if (odd && len > 0) {
   1bb20:	f013 0801 	ands.w	r8, r3, #1
    acc += LWIP_CHKSUM(q->payload, q->len);
   1bb24:	4635      	mov	r5, r6
  if (odd && len > 0) {
   1bb26:	d04f      	beq.n	1bbc8 <inet_chksum_pbuf+0xc0>
   1bb28:	2e00      	cmp	r6, #0
   1bb2a:	d053      	beq.n	1bbd4 <inet_chksum_pbuf+0xcc>
    len--;
   1bb2c:	1e75      	subs	r5, r6, #1
    ((u8_t *)&t)[1] = *pb++;
   1bb2e:	781a      	ldrb	r2, [r3, #0]
   1bb30:	f88d 2007 	strb.w	r2, [sp, #7]
  while (len > 1) {
   1bb34:	2d01      	cmp	r5, #1
    ((u8_t *)&t)[1] = *pb++;
   1bb36:	f103 0901 	add.w	r9, r3, #1
  while (len > 1) {
   1bb3a:	dd48      	ble.n	1bbce <inet_chksum_pbuf+0xc6>
   1bb3c:	462b      	mov	r3, r5
   1bb3e:	4649      	mov	r1, r9
   1bb40:	2200      	movs	r2, #0
    sum += *ps++;
   1bb42:	f831 4b02 	ldrh.w	r4, [r1], #2
    len -= 2;
   1bb46:	3b02      	subs	r3, #2
  while (len > 1) {
   1bb48:	2b01      	cmp	r3, #1
    sum += *ps++;
   1bb4a:	4422      	add	r2, r4
  while (len > 1) {
   1bb4c:	dcf9      	bgt.n	1bb42 <inet_chksum_pbuf+0x3a>
   1bb4e:	3d02      	subs	r5, #2
   1bb50:	f025 0301 	bic.w	r3, r5, #1
   1bb54:	3302      	adds	r3, #2
   1bb56:	444b      	add	r3, r9
   1bb58:	f005 0501 	and.w	r5, r5, #1
  if (len > 0) {
   1bb5c:	2d01      	cmp	r5, #1
    ((u8_t *)&t)[0] = *(const u8_t *)ps;
   1bb5e:	bf04      	itt	eq
   1bb60:	781b      	ldrbeq	r3, [r3, #0]
   1bb62:	f88d 3006 	strbeq.w	r3, [sp, #6]
   1bb66:	f8bd 3006 	ldrh.w	r3, [sp, #6]
   1bb6a:	4413      	add	r3, r2
   1bb6c:	b29a      	uxth	r2, r3
   1bb6e:	eb02 4213 	add.w	r2, r2, r3, lsr #16
   1bb72:	b293      	uxth	r3, r2
   1bb74:	eb03 4212 	add.w	r2, r3, r2, lsr #16
  if (odd) {
   1bb78:	f1b8 0f00 	cmp.w	r8, #0
   1bb7c:	d004      	beq.n	1bb88 <inet_chksum_pbuf+0x80>
    sum = SWAP_BYTES_IN_WORD(sum);
   1bb7e:	0213      	lsls	r3, r2, #8
   1bb80:	b29b      	uxth	r3, r3
   1bb82:	f3c2 2207 	ubfx	r2, r2, #8, #8
   1bb86:	431a      	orrs	r2, r3
    acc += LWIP_CHKSUM(q->payload, q->len);
   1bb88:	fa1c f282 	uxtah	r2, ip, r2
    acc = FOLD_U32T(acc);
   1bb8c:	fa1f fc82 	uxth.w	ip, r2
    if (q->len % 2 != 0) {
   1bb90:	07f3      	lsls	r3, r6, #31
    acc = FOLD_U32T(acc);
   1bb92:	eb0c 4c12 	add.w	ip, ip, r2, lsr #16
    if (q->len % 2 != 0) {
   1bb96:	d508      	bpl.n	1bbaa <inet_chksum_pbuf+0xa2>
      swapped = !swapped;
      acc = SWAP_BYTES_IN_WORD(acc);
   1bb98:	ea4f 230c 	mov.w	r3, ip, lsl #8
   1bb9c:	b29b      	uxth	r3, r3
   1bb9e:	f3cc 2207 	ubfx	r2, ip, #8, #8
   1bba2:	f087 0701 	eor.w	r7, r7, #1
   1bba6:	ea43 0c02 	orr.w	ip, r3, r2
  for (q = p; q != NULL; q = q->next) {
   1bbaa:	6800      	ldr	r0, [r0, #0]
   1bbac:	2800      	cmp	r0, #0
   1bbae:	d1b3      	bne.n	1bb18 <inet_chksum_pbuf+0x10>
    }
  }

  if (swapped) {
   1bbb0:	b197      	cbz	r7, 1bbd8 <inet_chksum_pbuf+0xd0>
    acc = SWAP_BYTES_IN_WORD(acc);
   1bbb2:	ea4f 200c 	mov.w	r0, ip, lsl #8
   1bbb6:	f3cc 2207 	ubfx	r2, ip, #8, #8
   1bbba:	b280      	uxth	r0, r0
   1bbbc:	4310      	orrs	r0, r2
   1bbbe:	43c0      	mvns	r0, r0
   1bbc0:	b280      	uxth	r0, r0
  }
  return (u16_t)~(acc & 0xffffUL);
}
   1bbc2:	b003      	add	sp, #12
   1bbc4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  while (len > 1) {
   1bbc8:	2d01      	cmp	r5, #1
    acc += LWIP_CHKSUM(q->payload, q->len);
   1bbca:	4699      	mov	r9, r3
  while (len > 1) {
   1bbcc:	dcb6      	bgt.n	1bb3c <inet_chksum_pbuf+0x34>
   1bbce:	464b      	mov	r3, r9
  u32_t sum = 0;
   1bbd0:	2200      	movs	r2, #0
   1bbd2:	e7c3      	b.n	1bb5c <inet_chksum_pbuf+0x54>
  if (odd && len > 0) {
   1bbd4:	4632      	mov	r2, r6
   1bbd6:	e7d2      	b.n	1bb7e <inet_chksum_pbuf+0x76>
   1bbd8:	ea6f 020c 	mvn.w	r2, ip
   1bbdc:	b290      	uxth	r0, r2
}
   1bbde:	b003      	add	sp, #12
   1bbe0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  for (q = p; q != NULL; q = q->next) {
   1bbe4:	f64f 70ff 	movw	r0, #65535	; 0xffff
   1bbe8:	4770      	bx	lr
   1bbea:	bf00      	nop

0001bbec <autoip_start>:
 *
 * @param netif network interface on which start the AutoIP client
 */
err_t
autoip_start(struct netif *netif)
{
   1bbec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  struct autoip *autoip = netif_autoip_data(netif);
  err_t result = ERR_OK;

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ERROR("netif is not up, old style port?", netif_is_up(netif), return ERR_ARG;);
   1bbee:	f890 3035 	ldrb.w	r3, [r0, #53]	; 0x35
  struct autoip *autoip = netif_autoip_data(netif);
   1bbf2:	6a85      	ldr	r5, [r0, #40]	; 0x28
  LWIP_ERROR("netif is not up, old style port?", netif_is_up(netif), return ERR_ARG;);
   1bbf4:	07db      	lsls	r3, r3, #31
   1bbf6:	d550      	bpl.n	1bc9a <autoip_start+0xae>

  /* Set IP-Address, Netmask and Gateway to 0 to make sure that
   * ARP Packets are formed correctly
   */
  netif_set_addr(netif, IP4_ADDR_ANY4, IP4_ADDR_ANY4, IP4_ADDR_ANY4);
   1bbf8:	4b2f      	ldr	r3, [pc, #188]	; (1bcb8 <autoip_start+0xcc>)
   1bbfa:	461a      	mov	r2, r3
   1bbfc:	4619      	mov	r1, r3
   1bbfe:	4604      	mov	r4, r0
   1bc00:	f7fb fb56 	bl	172b0 <netif_set_addr>

  LWIP_DEBUGF(AUTOIP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE,
              ("autoip_start(netif=%p) %c%c%"U16_F"\n", (void *)netif, netif->name[0],
               netif->name[1], (u16_t)netif->num));
  if (autoip == NULL) {
   1bc04:	2d00      	cmp	r5, #0
   1bc06:	d04b      	beq.n	1bca0 <autoip_start+0xb4>
    }
    /* store this AutoIP client in the netif */
    netif_set_client_data(netif, LWIP_NETIF_CLIENT_DATA_INDEX_AUTOIP, autoip);
    LWIP_DEBUGF(AUTOIP_DEBUG | LWIP_DBG_TRACE, ("autoip_start(): allocated autoip"));
  } else {
    autoip->state = AUTOIP_STATE_OFF;
   1bc08:	2300      	movs	r3, #0
   1bc0a:	712b      	strb	r3, [r5, #4]
    autoip->ttw = 0;
    autoip->sent_num = 0;
   1bc0c:	716b      	strb	r3, [r5, #5]
    ip4_addr_set_zero(&autoip->llipaddr);
    autoip->lastconflict = 0;
   1bc0e:	722b      	strb	r3, [r5, #8]
   1bc10:	6aa6      	ldr	r6, [r4, #40]	; 0x28
    autoip->ttw = 0;
   1bc12:	80eb      	strh	r3, [r5, #6]
    ip4_addr_set_zero(&autoip->llipaddr);
   1bc14:	602b      	str	r3, [r5, #0]
  u32_t addr = lwip_ntohl(LWIP_AUTOIP_CREATE_SEED_ADDR(netif));
   1bc16:	8e63      	ldrh	r3, [r4, #50]	; 0x32
   1bc18:	4828      	ldr	r0, [pc, #160]	; (1bcbc <autoip_start+0xd0>)
   1bc1a:	4418      	add	r0, r3
   1bc1c:	f7f7 fd70 	bl	13700 <lwip_htonl>
   1bc20:	f7f7 fd6e 	bl	13700 <lwip_htonl>
  addr += autoip->tried_llipaddr;
   1bc24:	7a73      	ldrb	r3, [r6, #9]
  if (addr < AUTOIP_RANGE_START) {
   1bc26:	4a26      	ldr	r2, [pc, #152]	; (1bcc0 <autoip_start+0xd4>)
  addr += autoip->tried_llipaddr;
   1bc28:	4418      	add	r0, r3
  addr = AUTOIP_NET | (addr & 0xffff);
   1bc2a:	b280      	uxth	r0, r0
   1bc2c:	f040 4029 	orr.w	r0, r0, #2835349504	; 0xa9000000
   1bc30:	f440 007e 	orr.w	r0, r0, #16646144	; 0xfe0000
  if (addr < AUTOIP_RANGE_START) {
   1bc34:	4290      	cmp	r0, r2
   1bc36:	d91b      	bls.n	1bc70 <autoip_start+0x84>
  if (addr > AUTOIP_RANGE_END) {
   1bc38:	4b22      	ldr	r3, [pc, #136]	; (1bcc4 <autoip_start+0xd8>)
   1bc3a:	4298      	cmp	r0, r3
    addr -= AUTOIP_RANGE_END - AUTOIP_RANGE_START + 1;
   1bc3c:	bf88      	it	hi
   1bc3e:	f5a0 407e 	subhi.w	r0, r0, #65024	; 0xfe00
  ip4_addr_set_u32(ipaddr, lwip_htonl(addr));
   1bc42:	f7f7 fd5d 	bl	13700 <lwip_htonl>
   1bc46:	6aa2      	ldr	r2, [r4, #40]	; 0x28
   1bc48:	6028      	str	r0, [r5, #0]

  /* time to wait to first probe, this is randomly
   * chosen out of 0 to PROBE_WAIT seconds.
   * compliant to RFC 3927 Section 2.2.1
   */
  autoip->ttw = (u16_t)(LWIP_AUTOIP_RAND(netif) % (PROBE_WAIT * AUTOIP_TICKS_PER_SECOND));
   1bc4a:	7a55      	ldrb	r5, [r2, #9]
   1bc4c:	f894 6030 	ldrb.w	r6, [r4, #48]	; 0x30
   1bc50:	f894 3031 	ldrb.w	r3, [r4, #49]	; 0x31
   1bc54:	f894 7032 	ldrb.w	r7, [r4, #50]	; 0x32
   1bc58:	f894 4033 	ldrb.w	r4, [r4, #51]	; 0x33
  autoip->state = AUTOIP_STATE_PROBING;
   1bc5c:	2101      	movs	r1, #1
  autoip->sent_num = 0;
   1bc5e:	2000      	movs	r0, #0
  /*
   * if we tried more then MAX_CONFLICTS we must limit our rate for
   * acquiring and probing address
   * compliant to RFC 3927 Section 2.2.1
   */
  if (autoip->tried_llipaddr > MAX_CONFLICTS) {
   1bc60:	2d0a      	cmp	r5, #10
  autoip->state = AUTOIP_STATE_PROBING;
   1bc62:	7111      	strb	r1, [r2, #4]
  autoip->sent_num = 0;
   1bc64:	7150      	strb	r0, [r2, #5]
  if (autoip->tried_llipaddr > MAX_CONFLICTS) {
   1bc66:	d906      	bls.n	1bc76 <autoip_start+0x8a>
    autoip->ttw = RATE_LIMIT_INTERVAL * AUTOIP_TICKS_PER_SECOND;
   1bc68:	f44f 7316 	mov.w	r3, #600	; 0x258
   1bc6c:	80d3      	strh	r3, [r2, #6]
   1bc6e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    addr += AUTOIP_RANGE_END - AUTOIP_RANGE_START + 1;
   1bc70:	f500 407e 	add.w	r0, r0, #65024	; 0xfe00
   1bc74:	e7e5      	b.n	1bc42 <autoip_start+0x56>
  autoip->ttw = (u16_t)(LWIP_AUTOIP_RAND(netif) % (PROBE_WAIT * AUTOIP_TICKS_PER_SECOND));
   1bc76:	041b      	lsls	r3, r3, #16
   1bc78:	ea43 6304 	orr.w	r3, r3, r4, lsl #24
   1bc7c:	433b      	orrs	r3, r7
   1bc7e:	ea43 2306 	orr.w	r3, r3, r6, lsl #8
   1bc82:	442b      	add	r3, r5
   1bc84:	f101 31cc 	add.w	r1, r1, #3435973836	; 0xcccccccc
   1bc88:	fba1 4103 	umull	r4, r1, r1, r3
   1bc8c:	08c9      	lsrs	r1, r1, #3
   1bc8e:	eb01 0181 	add.w	r1, r1, r1, lsl #2
   1bc92:	eba3 0341 	sub.w	r3, r3, r1, lsl #1
   1bc96:	80d3      	strh	r3, [r2, #6]
   1bc98:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  LWIP_ERROR("netif is not up, old style port?", netif_is_up(netif), return ERR_ARG;);
   1bc9a:	f06f 000f 	mvn.w	r0, #15
   1bc9e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    autoip = (struct autoip *)mem_calloc(1, sizeof(struct autoip));
   1bca0:	210c      	movs	r1, #12
   1bca2:	2001      	movs	r0, #1
   1bca4:	f7fb f9fe 	bl	170a4 <mem_calloc>
    if (autoip == NULL) {
   1bca8:	4605      	mov	r5, r0
   1bcaa:	b110      	cbz	r0, 1bcb2 <autoip_start+0xc6>
    netif_set_client_data(netif, LWIP_NETIF_CLIENT_DATA_INDEX_AUTOIP, autoip);
   1bcac:	62a0      	str	r0, [r4, #40]	; 0x28
   1bcae:	4606      	mov	r6, r0
   1bcb0:	e7b1      	b.n	1bc16 <autoip_start+0x2a>
      return ERR_MEM;
   1bcb2:	f04f 30ff 	mov.w	r0, #4294967295
}
   1bcb6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   1bcb8:	0002d58c 	.word	0x0002d58c
   1bcbc:	a9fe0100 	.word	0xa9fe0100
   1bcc0:	a9fe00ff 	.word	0xa9fe00ff
   1bcc4:	a9fefeff 	.word	0xa9fefeff

0001bcc8 <autoip_network_changed>:
 * and begin probing with the same address.
 */
void
autoip_network_changed(struct netif *netif)
{
  struct autoip *autoip = netif_autoip_data(netif);
   1bcc8:	6a83      	ldr	r3, [r0, #40]	; 0x28

  if (autoip && (autoip->state != AUTOIP_STATE_OFF)) {
   1bcca:	b1ab      	cbz	r3, 1bcf8 <autoip_network_changed+0x30>
   1bccc:	791a      	ldrb	r2, [r3, #4]
   1bcce:	b19a      	cbz	r2, 1bcf8 <autoip_network_changed+0x30>
{
   1bcd0:	b4f0      	push	{r4, r5, r6, r7}
  autoip->ttw = (u16_t)(LWIP_AUTOIP_RAND(netif) % (PROBE_WAIT * AUTOIP_TICKS_PER_SECOND));
   1bcd2:	7a5c      	ldrb	r4, [r3, #9]
   1bcd4:	f890 5030 	ldrb.w	r5, [r0, #48]	; 0x30
   1bcd8:	f890 2031 	ldrb.w	r2, [r0, #49]	; 0x31
   1bcdc:	f890 6032 	ldrb.w	r6, [r0, #50]	; 0x32
   1bce0:	f890 7033 	ldrb.w	r7, [r0, #51]	; 0x33
  autoip->sent_num = 0;
   1bce4:	2100      	movs	r1, #0
  autoip->state = AUTOIP_STATE_PROBING;
   1bce6:	2001      	movs	r0, #1
  if (autoip->tried_llipaddr > MAX_CONFLICTS) {
   1bce8:	2c0a      	cmp	r4, #10
  autoip->state = AUTOIP_STATE_PROBING;
   1bcea:	7118      	strb	r0, [r3, #4]
  autoip->sent_num = 0;
   1bcec:	7159      	strb	r1, [r3, #5]
  if (autoip->tried_llipaddr > MAX_CONFLICTS) {
   1bcee:	d904      	bls.n	1bcfa <autoip_network_changed+0x32>
    autoip->ttw = RATE_LIMIT_INTERVAL * AUTOIP_TICKS_PER_SECOND;
   1bcf0:	f44f 7216 	mov.w	r2, #600	; 0x258
   1bcf4:	80da      	strh	r2, [r3, #6]
    autoip_start_probing(netif);
  }
}
   1bcf6:	bcf0      	pop	{r4, r5, r6, r7}
   1bcf8:	4770      	bx	lr
  autoip->ttw = (u16_t)(LWIP_AUTOIP_RAND(netif) % (PROBE_WAIT * AUTOIP_TICKS_PER_SECOND));
   1bcfa:	0412      	lsls	r2, r2, #16
   1bcfc:	ea42 6207 	orr.w	r2, r2, r7, lsl #24
   1bd00:	4332      	orrs	r2, r6
   1bd02:	ea42 2205 	orr.w	r2, r2, r5, lsl #8
   1bd06:	4422      	add	r2, r4
   1bd08:	f1a1 3133 	sub.w	r1, r1, #858993459	; 0x33333333
   1bd0c:	fba1 0102 	umull	r0, r1, r1, r2
   1bd10:	08c9      	lsrs	r1, r1, #3
   1bd12:	eb01 0181 	add.w	r1, r1, r1, lsl #2
   1bd16:	eba2 0241 	sub.w	r2, r2, r1, lsl #1
   1bd1a:	80da      	strh	r2, [r3, #6]
   1bd1c:	e7eb      	b.n	1bcf6 <autoip_network_changed+0x2e>
   1bd1e:	bf00      	nop

0001bd20 <autoip_tmr>:
/**
 * Has to be called in loop every AUTOIP_TMR_INTERVAL milliseconds
 */
void
autoip_tmr(void)
{
   1bd20:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  struct netif *netif;
  /* loop through netif's */
  NETIF_FOREACH(netif) {
   1bd24:	4b3c      	ldr	r3, [pc, #240]	; (1be18 <autoip_tmr+0xf8>)
   1bd26:	681d      	ldr	r5, [r3, #0]
{
   1bd28:	b082      	sub	sp, #8
  NETIF_FOREACH(netif) {
   1bd2a:	2d00      	cmp	r5, #0
   1bd2c:	d030      	beq.n	1bd90 <autoip_tmr+0x70>
              if (autoip->sent_num == PROBE_NUM) {
                /* calculate time to wait to for announce */
                autoip->ttw = ANNOUNCE_WAIT * AUTOIP_TICKS_PER_SECOND;
              } else {
                /* calculate time to wait to next probe */
                autoip->ttw = (u16_t)((LWIP_AUTOIP_RAND(netif) %
   1bd2e:	f8df 80ec 	ldr.w	r8, [pc, #236]	; 1be1c <autoip_tmr+0xfc>

        case AUTOIP_STATE_ANNOUNCING:
          if (autoip->ttw == 0) {
            autoip_arp_announce(netif);
            LWIP_DEBUGF(AUTOIP_DEBUG | LWIP_DBG_TRACE, ("autoip_tmr() ANNOUNCING Sent Announce\n"));
            autoip->ttw = ANNOUNCE_INTERVAL * AUTOIP_TICKS_PER_SECOND;
   1bd32:	2614      	movs	r6, #20
            autoip->sent_num++;

            if (autoip->sent_num >= ANNOUNCE_NUM) {
              autoip->state = AUTOIP_STATE_BOUND;
   1bd34:	2703      	movs	r7, #3
   1bd36:	e00a      	b.n	1bd4e <autoip_tmr+0x2e>
      switch (autoip->state) {
   1bd38:	7922      	ldrb	r2, [r4, #4]
        autoip->ttw--;
   1bd3a:	3b01      	subs	r3, #1
   1bd3c:	b29b      	uxth	r3, r3
      switch (autoip->state) {
   1bd3e:	2a01      	cmp	r2, #1
        autoip->ttw--;
   1bd40:	80e3      	strh	r3, [r4, #6]
      switch (autoip->state) {
   1bd42:	d028      	beq.n	1bd96 <autoip_tmr+0x76>
   1bd44:	2a02      	cmp	r2, #2
   1bd46:	d100      	bne.n	1bd4a <autoip_tmr+0x2a>
          if (autoip->ttw == 0) {
   1bd48:	b183      	cbz	r3, 1bd6c <autoip_tmr+0x4c>
  NETIF_FOREACH(netif) {
   1bd4a:	682d      	ldr	r5, [r5, #0]
   1bd4c:	b305      	cbz	r5, 1bd90 <autoip_tmr+0x70>
    struct autoip *autoip = netif_autoip_data(netif);
   1bd4e:	6aac      	ldr	r4, [r5, #40]	; 0x28
    if (autoip != NULL) {
   1bd50:	2c00      	cmp	r4, #0
   1bd52:	d0fa      	beq.n	1bd4a <autoip_tmr+0x2a>
      if (autoip->lastconflict > 0) {
   1bd54:	7a23      	ldrb	r3, [r4, #8]
   1bd56:	b10b      	cbz	r3, 1bd5c <autoip_tmr+0x3c>
        autoip->lastconflict--;
   1bd58:	3b01      	subs	r3, #1
   1bd5a:	7223      	strb	r3, [r4, #8]
      if (autoip->ttw > 0) {
   1bd5c:	88e3      	ldrh	r3, [r4, #6]
   1bd5e:	2b00      	cmp	r3, #0
   1bd60:	d1ea      	bne.n	1bd38 <autoip_tmr+0x18>
      switch (autoip->state) {
   1bd62:	7923      	ldrb	r3, [r4, #4]
   1bd64:	2b01      	cmp	r3, #1
   1bd66:	d018      	beq.n	1bd9a <autoip_tmr+0x7a>
   1bd68:	2b02      	cmp	r3, #2
   1bd6a:	d1ee      	bne.n	1bd4a <autoip_tmr+0x2a>
  return etharp_gratuitous(netif);
   1bd6c:	1d29      	adds	r1, r5, #4
   1bd6e:	4628      	mov	r0, r5
   1bd70:	f7fa ff7e 	bl	16c70 <etharp_request>
            autoip->sent_num++;
   1bd74:	7963      	ldrb	r3, [r4, #5]
            autoip->ttw = ANNOUNCE_INTERVAL * AUTOIP_TICKS_PER_SECOND;
   1bd76:	80e6      	strh	r6, [r4, #6]
            autoip->sent_num++;
   1bd78:	3301      	adds	r3, #1
   1bd7a:	b2db      	uxtb	r3, r3
            if (autoip->sent_num >= ANNOUNCE_NUM) {
   1bd7c:	2b01      	cmp	r3, #1
            autoip->sent_num++;
   1bd7e:	7163      	strb	r3, [r4, #5]
            if (autoip->sent_num >= ANNOUNCE_NUM) {
   1bd80:	d9e3      	bls.n	1bd4a <autoip_tmr+0x2a>
              autoip->sent_num = 0;
   1bd82:	2300      	movs	r3, #0
              autoip->state = AUTOIP_STATE_BOUND;
   1bd84:	7127      	strb	r7, [r4, #4]
              autoip->sent_num = 0;
   1bd86:	7163      	strb	r3, [r4, #5]
  NETIF_FOREACH(netif) {
   1bd88:	682d      	ldr	r5, [r5, #0]
              autoip->ttw = 0;
   1bd8a:	80e3      	strh	r3, [r4, #6]
  NETIF_FOREACH(netif) {
   1bd8c:	2d00      	cmp	r5, #0
   1bd8e:	d1de      	bne.n	1bd4e <autoip_tmr+0x2e>
          /* nothing to do in other states */
          break;
      }
    }
  }
}
   1bd90:	b002      	add	sp, #8
   1bd92:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
          if (autoip->ttw == 0) {
   1bd96:	2b00      	cmp	r3, #0
   1bd98:	d1d7      	bne.n	1bd4a <autoip_tmr+0x2a>
            if (autoip->sent_num >= PROBE_NUM) {
   1bd9a:	7963      	ldrb	r3, [r4, #5]
   1bd9c:	2b02      	cmp	r3, #2
   1bd9e:	d912      	bls.n	1bdc6 <autoip_tmr+0xa6>
  IP4_ADDR(&gw_addr, 0, 0, 0, 0);
   1bda0:	ab02      	add	r3, sp, #8
   1bda2:	2200      	movs	r2, #0
   1bda4:	f843 2d04 	str.w	r2, [r3, #-4]!
              autoip->state = AUTOIP_STATE_ANNOUNCING;
   1bda8:	2202      	movs	r2, #2
   1bdaa:	7122      	strb	r2, [r4, #4]
  IP4_ADDR(&sn_mask, 255, 255, 0, 0);
   1bdac:	f64f 7eff 	movw	lr, #65535	; 0xffff
  netif_set_addr(netif, &autoip->llipaddr, &sn_mask, &gw_addr);
   1bdb0:	466a      	mov	r2, sp
   1bdb2:	4621      	mov	r1, r4
   1bdb4:	4628      	mov	r0, r5
  IP4_ADDR(&sn_mask, 255, 255, 0, 0);
   1bdb6:	f8cd e000 	str.w	lr, [sp]
  netif_set_addr(netif, &autoip->llipaddr, &sn_mask, &gw_addr);
   1bdba:	f7fb fa79 	bl	172b0 <netif_set_addr>
              autoip->sent_num = 1;
   1bdbe:	2301      	movs	r3, #1
              autoip->ttw = ANNOUNCE_WAIT * AUTOIP_TICKS_PER_SECOND;
   1bdc0:	80e6      	strh	r6, [r4, #6]
              autoip->sent_num = 1;
   1bdc2:	7163      	strb	r3, [r4, #5]
   1bdc4:	e7c1      	b.n	1bd4a <autoip_tmr+0x2a>
  return etharp_request(netif, &autoip->llipaddr);
   1bdc6:	4621      	mov	r1, r4
   1bdc8:	4628      	mov	r0, r5
   1bdca:	f7fa ff51 	bl	16c70 <etharp_request>
              autoip->sent_num++;
   1bdce:	7963      	ldrb	r3, [r4, #5]
   1bdd0:	3301      	adds	r3, #1
   1bdd2:	b2db      	uxtb	r3, r3
              if (autoip->sent_num == PROBE_NUM) {
   1bdd4:	2b03      	cmp	r3, #3
              autoip->sent_num++;
   1bdd6:	7163      	strb	r3, [r4, #5]
              if (autoip->sent_num == PROBE_NUM) {
   1bdd8:	d01b      	beq.n	1be12 <autoip_tmr+0xf2>
                autoip->ttw = (u16_t)((LWIP_AUTOIP_RAND(netif) %
   1bdda:	f895 3031 	ldrb.w	r3, [r5, #49]	; 0x31
   1bdde:	f895 2033 	ldrb.w	r2, [r5, #51]	; 0x33
   1bde2:	f895 0032 	ldrb.w	r0, [r5, #50]	; 0x32
   1bde6:	f895 1030 	ldrb.w	r1, [r5, #48]	; 0x30
   1bdea:	041b      	lsls	r3, r3, #16
   1bdec:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
   1bdf0:	6aaa      	ldr	r2, [r5, #40]	; 0x28
   1bdf2:	4303      	orrs	r3, r0
   1bdf4:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
   1bdf8:	b102      	cbz	r2, 1bdfc <autoip_tmr+0xdc>
   1bdfa:	7a52      	ldrb	r2, [r2, #9]
   1bdfc:	4413      	add	r3, r2
   1bdfe:	fba8 1203 	umull	r1, r2, r8, r3
   1be02:	08d2      	lsrs	r2, r2, #3
   1be04:	eb02 0282 	add.w	r2, r2, r2, lsl #2
   1be08:	eba3 0342 	sub.w	r3, r3, r2, lsl #1
   1be0c:	330a      	adds	r3, #10
   1be0e:	80e3      	strh	r3, [r4, #6]
   1be10:	e79b      	b.n	1bd4a <autoip_tmr+0x2a>
                autoip->ttw = ANNOUNCE_WAIT * AUTOIP_TICKS_PER_SECOND;
   1be12:	80e6      	strh	r6, [r4, #6]
   1be14:	e799      	b.n	1bd4a <autoip_tmr+0x2a>
   1be16:	bf00      	nop
   1be18:	2000a3d8 	.word	0x2000a3d8
   1be1c:	cccccccd 	.word	0xcccccccd

0001be20 <autoip_arp_reply>:
 * @param netif network interface to use for autoip processing
 * @param hdr Incoming ARP packet
 */
void
autoip_arp_reply(struct netif *netif, struct etharp_hdr *hdr)
{
   1be20:	b530      	push	{r4, r5, lr}
  struct autoip *autoip = netif_autoip_data(netif);
   1be22:	6a85      	ldr	r5, [r0, #40]	; 0x28
{
   1be24:	b083      	sub	sp, #12

  LWIP_DEBUGF(AUTOIP_DEBUG | LWIP_DBG_TRACE, ("autoip_arp_reply()\n"));
  if ((autoip != NULL) && (autoip->state != AUTOIP_STATE_OFF)) {
   1be26:	b185      	cbz	r5, 1be4a <autoip_arp_reply+0x2a>
   1be28:	792b      	ldrb	r3, [r5, #4]
   1be2a:	b173      	cbz	r3, 1be4a <autoip_arp_reply+0x2a>
     * when probing  ip.dst == llipaddr && hw.src != netif->hwaddr
     * we have a conflict and must solve it
     */
    ip4_addr_t sipaddr, dipaddr;
    struct eth_addr netifaddr;
    SMEMCPY(netifaddr.addr, netif->hwaddr, ETH_HWADDR_LEN);
   1be2c:	4602      	mov	r2, r0
   1be2e:	4604      	mov	r4, r0
   1be30:	f852 0f2e 	ldr.w	r0, [r2, #46]!
   1be34:	9000      	str	r0, [sp, #0]
   1be36:	8892      	ldrh	r2, [r2, #4]
   1be38:	f8ad 2004 	strh.w	r2, [sp, #4]
     * structure packing (not using structure copy which breaks strict-aliasing rules).
     */
    IPADDR_WORDALIGNED_COPY_TO_IP4_ADDR_T(&sipaddr, &hdr->sipaddr);
    IPADDR_WORDALIGNED_COPY_TO_IP4_ADDR_T(&dipaddr, &hdr->dipaddr);

    if (autoip->state == AUTOIP_STATE_PROBING) {
   1be3c:	2b01      	cmp	r3, #1
    IPADDR_WORDALIGNED_COPY_TO_IP4_ADDR_T(&sipaddr, &hdr->sipaddr);
   1be3e:	f8d1 200e 	ldr.w	r2, [r1, #14]
       * from beginning to after ANNOUNCE_WAIT
       * seconds we have a conflict if
       * ip.src == llipaddr OR
       * ip.dst == llipaddr && hw.src != own hwaddr
       */
      if ((ip4_addr_cmp(&sipaddr, &autoip->llipaddr)) ||
   1be42:	682b      	ldr	r3, [r5, #0]
    if (autoip->state == AUTOIP_STATE_PROBING) {
   1be44:	d003      	beq.n	1be4e <autoip_arp_reply+0x2e>
    } else {
      /* RFC 3927 Section 2.5:
       * in any state we have a conflict if
       * ip.src == llipaddr && hw.src != own hwaddr
       */
      if (ip4_addr_cmp(&sipaddr, &autoip->llipaddr) &&
   1be46:	429a      	cmp	r2, r3
   1be48:	d018      	beq.n	1be7c <autoip_arp_reply+0x5c>
                    ("autoip_arp_reply(): Conflicting ARP-Packet detected\n"));
        autoip_handle_arp_conflict(netif);
      }
    }
  }
}
   1be4a:	b003      	add	sp, #12
   1be4c:	bd30      	pop	{r4, r5, pc}
      if ((ip4_addr_cmp(&sipaddr, &autoip->llipaddr)) ||
   1be4e:	429a      	cmp	r2, r3
   1be50:	d00b      	beq.n	1be6a <autoip_arp_reply+0x4a>
   1be52:	2a00      	cmp	r2, #0
   1be54:	d1f9      	bne.n	1be4a <autoip_arp_reply+0x2a>
    IPADDR_WORDALIGNED_COPY_TO_IP4_ADDR_T(&dipaddr, &hdr->dipaddr);
   1be56:	698a      	ldr	r2, [r1, #24]
          (ip4_addr_isany_val(sipaddr) &&
   1be58:	429a      	cmp	r2, r3
   1be5a:	d1f6      	bne.n	1be4a <autoip_arp_reply+0x2a>
           !eth_addr_cmp(&netifaddr, &hdr->shwaddr))) {
   1be5c:	3108      	adds	r1, #8
   1be5e:	4668      	mov	r0, sp
   1be60:	2206      	movs	r2, #6
   1be62:	f00b fecd 	bl	27c00 <memcmp>
           ip4_addr_cmp(&dipaddr, &autoip->llipaddr) &&
   1be66:	2800      	cmp	r0, #0
   1be68:	d0ef      	beq.n	1be4a <autoip_arp_reply+0x2a>
  autoip->tried_llipaddr++;
   1be6a:	7a6b      	ldrb	r3, [r5, #9]
  autoip_start(netif);
   1be6c:	4620      	mov	r0, r4
  autoip->tried_llipaddr++;
   1be6e:	3301      	adds	r3, #1
   1be70:	726b      	strb	r3, [r5, #9]
}
   1be72:	b003      	add	sp, #12
   1be74:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
  autoip_start(netif);
   1be78:	f7ff beb8 	b.w	1bbec <autoip_start>
          !eth_addr_cmp(&netifaddr, &hdr->shwaddr)) {
   1be7c:	3108      	adds	r1, #8
   1be7e:	4668      	mov	r0, sp
   1be80:	2206      	movs	r2, #6
   1be82:	f00b febd 	bl	27c00 <memcmp>
      if (ip4_addr_cmp(&sipaddr, &autoip->llipaddr) &&
   1be86:	2800      	cmp	r0, #0
   1be88:	d0df      	beq.n	1be4a <autoip_arp_reply+0x2a>
  if (autoip->lastconflict > 0) {
   1be8a:	7a2b      	ldrb	r3, [r5, #8]
   1be8c:	2b00      	cmp	r3, #0
   1be8e:	d1ec      	bne.n	1be6a <autoip_arp_reply+0x4a>
  return etharp_gratuitous(netif);
   1be90:	1d21      	adds	r1, r4, #4
   1be92:	4620      	mov	r0, r4
   1be94:	f7fa feec 	bl	16c70 <etharp_request>
    autoip->lastconflict = DEFEND_INTERVAL * AUTOIP_TICKS_PER_SECOND;
   1be98:	2364      	movs	r3, #100	; 0x64
   1be9a:	722b      	strb	r3, [r5, #8]
}
   1be9c:	e7d5      	b.n	1be4a <autoip_arp_reply+0x2a>
   1be9e:	bf00      	nop

0001bea0 <autoip_accept_packet>:
}

u8_t
autoip_accept_packet(struct netif *netif, const ip4_addr_t *addr)
{
  struct autoip *autoip = netif_autoip_data(netif);
   1bea0:	6a80      	ldr	r0, [r0, #40]	; 0x28
  return (autoip != NULL) && ip4_addr_cmp(addr, &(autoip->llipaddr));
   1bea2:	b128      	cbz	r0, 1beb0 <autoip_accept_packet+0x10>
   1bea4:	680b      	ldr	r3, [r1, #0]
   1bea6:	6800      	ldr	r0, [r0, #0]
   1bea8:	1a18      	subs	r0, r3, r0
   1beaa:	fab0 f080 	clz	r0, r0
   1beae:	0940      	lsrs	r0, r0, #5
}
   1beb0:	4770      	bx	lr
   1beb2:	bf00      	nop

0001beb4 <icmp_input>:
 * @param p the icmp echo request packet, p->payload pointing to the icmp header
 * @param inp the netif on which this packet was received
 */
void
icmp_input(struct pbuf *p, struct netif *inp)
{
   1beb4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  const ip4_addr_t *src;

  ICMP_STATS_INC(icmp.recv);
  MIB2_STATS_INC(mib2.icmpinmsgs);

  iphdr_in = ip4_current_header();
   1beb8:	4e49      	ldr	r6, [pc, #292]	; (1bfe0 <icmp_input+0x12c>)
   1beba:	68b7      	ldr	r7, [r6, #8]
  hlen = IPH_HL_BYTES(iphdr_in);
   1bebc:	783c      	ldrb	r4, [r7, #0]
   1bebe:	f004 040f 	and.w	r4, r4, #15
   1bec2:	00a4      	lsls	r4, r4, #2
  if (hlen < IP_HLEN) {
   1bec4:	2c13      	cmp	r4, #19
{
   1bec6:	b084      	sub	sp, #16
   1bec8:	4605      	mov	r5, r0
  if (hlen < IP_HLEN) {
   1beca:	d977      	bls.n	1bfbc <icmp_input+0x108>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: short IP header (%"S16_F" bytes) received\n", hlen));
    goto lenerr;
  }
  if (p->len < sizeof(u16_t) * 2) {
   1becc:	8943      	ldrh	r3, [r0, #10]
   1bece:	2b03      	cmp	r3, #3
   1bed0:	d974      	bls.n	1bfbc <icmp_input+0x108>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: short ICMP (%"U16_F" bytes) received\n", p->tot_len));
    goto lenerr;
  }

  type = *((u8_t *)p->payload);
   1bed2:	6843      	ldr	r3, [r0, #4]
#ifdef LWIP_DEBUG
  code = *(((u8_t *)p->payload) + 1);
  /* if debug is enabled but debug statement below is somehow disabled: */
  LWIP_UNUSED_ARG(code);
#endif /* LWIP_DEBUG */
  switch (type) {
   1bed4:	781b      	ldrb	r3, [r3, #0]
   1bed6:	2b08      	cmp	r3, #8
   1bed8:	d170      	bne.n	1bfbc <icmp_input+0x108>
      break;
    case ICMP_ECHO:
      MIB2_STATS_INC(mib2.icmpinechos);
      src = ip4_current_dest_addr();
      /* multicast destination address? */
      if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
   1beda:	6970      	ldr	r0, [r6, #20]
   1bedc:	f000 03f0 	and.w	r3, r0, #240	; 0xf0
   1bee0:	2be0      	cmp	r3, #224	; 0xe0
   1bee2:	d06b      	beq.n	1bfbc <icmp_input+0x108>
   1bee4:	4688      	mov	r8, r1
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: Not echoing to multicast pings\n"));
        goto icmperr;
#endif /* LWIP_MULTICAST_PING */
      }
      /* broadcast destination address? */
      if (ip4_addr_isbroadcast(ip4_current_dest_addr(), ip_current_netif())) {
   1bee6:	6831      	ldr	r1, [r6, #0]
   1bee8:	f7fa ff08 	bl	16cfc <ip4_addr_isbroadcast_u32>
   1beec:	2800      	cmp	r0, #0
   1beee:	d165      	bne.n	1bfbc <icmp_input+0x108>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: Not echoing to broadcast pings\n"));
        goto icmperr;
#endif /* LWIP_BROADCAST_PING */
      }
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ping\n"));
      if (p->tot_len < sizeof(struct icmp_echo_hdr)) {
   1bef0:	892b      	ldrh	r3, [r5, #8]
   1bef2:	2b07      	cmp	r3, #7
   1bef4:	d962      	bls.n	1bfbc <icmp_input+0x108>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: bad ICMP echo received\n"));
        goto lenerr;
      }
#if CHECKSUM_CHECK_ICMP
      IF__NETIF_CHECKSUM_ENABLED(inp, NETIF_CHECKSUM_CHECK_ICMP) {
        if (inet_chksum_pbuf(p) != 0) {
   1bef6:	4628      	mov	r0, r5
   1bef8:	f7ff fe06 	bl	1bb08 <inet_chksum_pbuf>
   1befc:	2800      	cmp	r0, #0
   1befe:	d15d      	bne.n	1bfbc <icmp_input+0x108>
          return;
        }
      }
#endif
#if LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN
      if (pbuf_add_header(p, hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN)) {
   1bf00:	f104 0a0e 	add.w	sl, r4, #14
   1bf04:	4651      	mov	r1, sl
   1bf06:	4628      	mov	r0, r5
  hlen = IPH_HL_BYTES(iphdr_in);
   1bf08:	fa1f f984 	uxth.w	r9, r4
      if (pbuf_add_header(p, hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN)) {
   1bf0c:	f7fb fbfc 	bl	17708 <pbuf_add_header>
   1bf10:	2800      	cmp	r0, #0
   1bf12:	d059      	beq.n	1bfc8 <icmp_input+0x114>
        /* p is not big enough to contain link headers
         * allocate a new one and copy p into it
         */
        struct pbuf *r;
        u16_t alloc_len = (u16_t)(p->tot_len + hlen);
   1bf14:	892b      	ldrh	r3, [r5, #8]
   1bf16:	eb09 0103 	add.w	r1, r9, r3
   1bf1a:	b289      	uxth	r1, r1
        if (alloc_len < p->tot_len) {
   1bf1c:	428b      	cmp	r3, r1
   1bf1e:	d84d      	bhi.n	1bfbc <icmp_input+0x108>
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: allocating new pbuf failed (tot_len overflow)\n"));
          goto icmperr;
        }
        /* allocate new packet buffer with space for link headers */
        r = pbuf_alloc(PBUF_LINK, alloc_len, PBUF_RAM);
   1bf20:	f44f 7220 	mov.w	r2, #640	; 0x280
   1bf24:	200e      	movs	r0, #14
   1bf26:	f7fb fab5 	bl	17494 <pbuf_alloc>
        if (r == NULL) {
   1bf2a:	4682      	mov	sl, r0
   1bf2c:	2800      	cmp	r0, #0
   1bf2e:	d045      	beq.n	1bfbc <icmp_input+0x108>
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: allocating new pbuf failed\n"));
          goto icmperr;
        }
        if (r->len < hlen + sizeof(struct icmp_echo_hdr)) {
   1bf30:	8942      	ldrh	r2, [r0, #10]
   1bf32:	f104 0308 	add.w	r3, r4, #8
   1bf36:	429a      	cmp	r2, r3
   1bf38:	d34d      	bcc.n	1bfd6 <icmp_input+0x122>
          LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("first pbuf cannot hold the ICMP header"));
          pbuf_free(r);
          goto icmperr;
        }
        /* copy the ip header */
        MEMCPY(r->payload, iphdr_in, hlen);
   1bf3a:	4639      	mov	r1, r7
   1bf3c:	4622      	mov	r2, r4
   1bf3e:	6840      	ldr	r0, [r0, #4]
   1bf40:	f00b fe8e 	bl	27c60 <memcpy>
        /* switch r->payload back to icmp header (cannot fail) */
        if (pbuf_remove_header(r, hlen)) {
   1bf44:	4621      	mov	r1, r4
   1bf46:	4650      	mov	r0, sl
   1bf48:	f7fb fc02 	bl	17750 <pbuf_remove_header>
   1bf4c:	2800      	cmp	r0, #0
   1bf4e:	d142      	bne.n	1bfd6 <icmp_input+0x122>
          LWIP_ASSERT("icmp_input: moving r->payload to icmp header failed\n", 0);
          pbuf_free(r);
          goto icmperr;
        }
        /* copy the rest of the packet without ip header */
        if (pbuf_copy(r, p) != ERR_OK) {
   1bf50:	4629      	mov	r1, r5
   1bf52:	4650      	mov	r0, sl
   1bf54:	f7fb fccc 	bl	178f0 <pbuf_copy>
   1bf58:	2800      	cmp	r0, #0
   1bf5a:	d13c      	bne.n	1bfd6 <icmp_input+0x122>
          LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("icmp_input: copying to new pbuf failed"));
          pbuf_free(r);
          goto icmperr;
        }
        /* free the original p */
        pbuf_free(p);
   1bf5c:	4628      	mov	r0, r5
   1bf5e:	f7fb fc45 	bl	177ec <pbuf_free>
   1bf62:	4655      	mov	r5, sl
#endif /* LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN */
      /* At this point, all checks are OK. */
      /* We generate an answer by switching the dest and src ip addresses,
       * setting the icmp type to ECHO_RESPONSE and updating the checksum. */
      iecho = (struct icmp_echo_hdr *)p->payload;
      if (pbuf_add_header(p, hlen)) {
   1bf64:	4621      	mov	r1, r4
   1bf66:	4628      	mov	r0, r5
      iecho = (struct icmp_echo_hdr *)p->payload;
   1bf68:	686f      	ldr	r7, [r5, #4]
      if (pbuf_add_header(p, hlen)) {
   1bf6a:	f7fb fbcd 	bl	17708 <pbuf_add_header>
   1bf6e:	bb28      	cbnz	r0, 1bfbc <icmp_input+0x108>
        LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("Can't move over header in packet"));
      } else {
        err_t ret;
        struct ip_hdr *iphdr = (struct ip_hdr *)p->payload;
   1bf70:	686c      	ldr	r4, [r5, #4]
        ip4_addr_copy(iphdr->src, *src);
   1bf72:	6972      	ldr	r2, [r6, #20]
        ip4_addr_copy(iphdr->dest, *ip4_current_src_addr());
   1bf74:	6933      	ldr	r3, [r6, #16]
   1bf76:	6123      	str	r3, [r4, #16]
        ip4_addr_copy(iphdr->src, *src);
   1bf78:	60e2      	str	r2, [r4, #12]
        ICMPH_TYPE_SET(iecho, ICMP_ER);
#if CHECKSUM_GEN_ICMP
        IF__NETIF_CHECKSUM_ENABLED(inp, NETIF_CHECKSUM_GEN_ICMP) {
          /* adjust the checksum */
          if (iecho->chksum > PP_HTONS(0xffffU - (ICMP_ECHO << 8))) {
   1bf7a:	887b      	ldrh	r3, [r7, #2]
        ICMPH_TYPE_SET(iecho, ICMP_ER);
   1bf7c:	7038      	strb	r0, [r7, #0]
          if (iecho->chksum > PP_HTONS(0xffffU - (ICMP_ECHO << 8))) {
   1bf7e:	f64f 72f7 	movw	r2, #65527	; 0xfff7
   1bf82:	4293      	cmp	r3, r2
            iecho->chksum = (u16_t)(iecho->chksum + PP_HTONS((u16_t)(ICMP_ECHO << 8)) + 1);
   1bf84:	bf8c      	ite	hi
   1bf86:	3309      	addhi	r3, #9
          } else {
            iecho->chksum = (u16_t)(iecho->chksum + PP_HTONS(ICMP_ECHO << 8));
   1bf88:	3308      	addls	r3, #8
   1bf8a:	b299      	uxth	r1, r3
        iecho->chksum = 0;
#endif /* CHECKSUM_GEN_ICMP */

        /* Set the correct TTL and recalculate the header checksum. */
        IPH_TTL_SET(iphdr, ICMP_TTL);
        IPH_CHKSUM_SET(iphdr, 0);
   1bf8c:	2600      	movs	r6, #0
        IPH_TTL_SET(iphdr, ICMP_TTL);
   1bf8e:	f04f 0aff 	mov.w	sl, #255	; 0xff
   1bf92:	8079      	strh	r1, [r7, #2]
#if CHECKSUM_GEN_IP
        IF__NETIF_CHECKSUM_ENABLED(inp, NETIF_CHECKSUM_GEN_IP) {
          IPH_CHKSUM_SET(iphdr, inet_chksum(iphdr, hlen));
   1bf94:	4620      	mov	r0, r4
   1bf96:	4649      	mov	r1, r9
        IPH_TTL_SET(iphdr, ICMP_TTL);
   1bf98:	f884 a008 	strb.w	sl, [r4, #8]
        IPH_CHKSUM_SET(iphdr, 0);
   1bf9c:	72a6      	strb	r6, [r4, #10]
   1bf9e:	72e6      	strb	r6, [r4, #11]
          IPH_CHKSUM_SET(iphdr, inet_chksum(iphdr, hlen));
   1bfa0:	f7ff fd6a 	bl	1ba78 <inet_chksum>
        MIB2_STATS_INC(mib2.icmpoutmsgs);
        /* increase number of echo replies attempted to send */
        MIB2_STATS_INC(mib2.icmpoutechoreps);

        /* send an ICMP packet */
        ret = ip4_output_if(p, src, LWIP_IP_HDRINCL,
   1bfa4:	2101      	movs	r1, #1
          IPH_CHKSUM_SET(iphdr, inet_chksum(iphdr, hlen));
   1bfa6:	8160      	strh	r0, [r4, #10]
        ret = ip4_output_if(p, src, LWIP_IP_HDRINCL,
   1bfa8:	4653      	mov	r3, sl
   1bfaa:	9101      	str	r1, [sp, #4]
   1bfac:	9600      	str	r6, [sp, #0]
   1bfae:	4632      	mov	r2, r6
   1bfb0:	f8cd 8008 	str.w	r8, [sp, #8]
   1bfb4:	490b      	ldr	r1, [pc, #44]	; (1bfe4 <icmp_input+0x130>)
   1bfb6:	4628      	mov	r0, r5
   1bfb8:	f000 f9f8 	bl	1c3ac <ip4_output_if>
  ICMP_STATS_INC(icmp.lenerr);
  MIB2_STATS_INC(mib2.icmpinerrors);
  return;
#if LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN || !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING
icmperr:
  pbuf_free(p);
   1bfbc:	4628      	mov	r0, r5
  ICMP_STATS_INC(icmp.err);
  MIB2_STATS_INC(mib2.icmpinerrors);
  return;
#endif /* LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN || !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING */
}
   1bfbe:	b004      	add	sp, #16
   1bfc0:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  pbuf_free(p);
   1bfc4:	f7fb bc12 	b.w	177ec <pbuf_free>
        if (pbuf_remove_header(p, hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN)) {
   1bfc8:	4651      	mov	r1, sl
   1bfca:	4628      	mov	r0, r5
   1bfcc:	f7fb fbc0 	bl	17750 <pbuf_remove_header>
   1bfd0:	2800      	cmp	r0, #0
   1bfd2:	d1f3      	bne.n	1bfbc <icmp_input+0x108>
   1bfd4:	e7c6      	b.n	1bf64 <icmp_input+0xb0>
          pbuf_free(r);
   1bfd6:	4650      	mov	r0, sl
   1bfd8:	f7fb fc08 	bl	177ec <pbuf_free>
          goto icmperr;
   1bfdc:	e7ee      	b.n	1bfbc <icmp_input+0x108>
   1bfde:	bf00      	nop
   1bfe0:	2000a404 	.word	0x2000a404
   1bfe4:	2000a418 	.word	0x2000a418

0001bfe8 <icmp_dest_unreach>:
 *          p->payload pointing to the IP header
 * @param t type of the 'unreachable' packet
 */
void
icmp_dest_unreach(struct pbuf *p, enum icmp_dur_type t)
{
   1bfe8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}

  /* increase number of messages attempted to send */
  MIB2_STATS_INC(mib2.icmpoutmsgs);

  /* ICMP header + IP header + 8 bytes of data */
  q = pbuf_alloc(PBUF_IP, sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE,
   1bfec:	f44f 7220 	mov.w	r2, #640	; 0x280
{
   1bff0:	b086      	sub	sp, #24
   1bff2:	4607      	mov	r7, r0
   1bff4:	460e      	mov	r6, r1
  q = pbuf_alloc(PBUF_IP, sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE,
   1bff6:	2022      	movs	r0, #34	; 0x22
   1bff8:	2124      	movs	r1, #36	; 0x24
   1bffa:	f7fb fa4b 	bl	17494 <pbuf_alloc>
                 PBUF_RAM);
  if (q == NULL) {
   1bffe:	b3a8      	cbz	r0, 1c06c <icmp_dest_unreach+0x84>
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->src);
  LWIP_DEBUGF(ICMP_DEBUG, (" to "));
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->dest);
  LWIP_DEBUGF(ICMP_DEBUG, ("\n"));

  icmphdr = (struct icmp_echo_hdr *)q->payload;
   1c000:	6844      	ldr	r4, [r0, #4]
  iphdr = (struct ip_hdr *)p->payload;
   1c002:	687b      	ldr	r3, [r7, #4]
  icmphdr->type = type;
  icmphdr->code = code;
   1c004:	7066      	strb	r6, [r4, #1]
  icmphdr->type = type;
   1c006:	2203      	movs	r2, #3
  icmphdr->id = 0;
   1c008:	2600      	movs	r6, #0
  icmphdr->type = type;
   1c00a:	7022      	strb	r2, [r4, #0]
  icmphdr->id = 0;
   1c00c:	6066      	str	r6, [r4, #4]
  icmphdr->seqno = 0;

  /* copy fields from original packet */
  SMEMCPY((u8_t *)q->payload + sizeof(struct icmp_echo_hdr), (u8_t *)p->payload,
   1c00e:	6859      	ldr	r1, [r3, #4]
   1c010:	689f      	ldr	r7, [r3, #8]
   1c012:	f8d3 e00c 	ldr.w	lr, [r3, #12]
   1c016:	4605      	mov	r5, r0
   1c018:	6818      	ldr	r0, [r3, #0]
   1c01a:	60a0      	str	r0, [r4, #8]
   1c01c:	60e1      	str	r1, [r4, #12]
   1c01e:	6127      	str	r7, [r4, #16]
   1c020:	f8c4 e014 	str.w	lr, [r4, #20]
   1c024:	6918      	ldr	r0, [r3, #16]
   1c026:	699f      	ldr	r7, [r3, #24]
   1c028:	6959      	ldr	r1, [r3, #20]
   1c02a:	61e1      	str	r1, [r4, #28]
   1c02c:	6227      	str	r7, [r4, #32]
   1c02e:	61a0      	str	r0, [r4, #24]
          IP_HLEN + ICMP_DEST_UNREACH_DATASIZE);

  ip4_addr_copy(iphdr_src, iphdr->src);
   1c030:	af06      	add	r7, sp, #24
   1c032:	68db      	ldr	r3, [r3, #12]
   1c034:	f847 3d04 	str.w	r3, [r7, #-4]!
    ip4_addr_t iphdr_dst;
    ip4_addr_copy(iphdr_dst, iphdr->dest);
    netif = ip4_route_src(&iphdr_dst, &iphdr_src);
  }
#else
  netif = ip4_route(&iphdr_src);
   1c038:	4638      	mov	r0, r7
   1c03a:	f000 f861 	bl	1c100 <ip4_route>
#endif
  if (netif != NULL) {
   1c03e:	4680      	mov	r8, r0
   1c040:	b188      	cbz	r0, 1c066 <icmp_dest_unreach+0x7e>
    /* calculate checksum */
    icmphdr->chksum = 0;
#if CHECKSUM_GEN_ICMP
    IF__NETIF_CHECKSUM_ENABLED(netif, NETIF_CHECKSUM_GEN_ICMP) {
      icmphdr->chksum = inet_chksum(icmphdr, q->len);
   1c042:	8969      	ldrh	r1, [r5, #10]
    icmphdr->chksum = 0;
   1c044:	70a6      	strb	r6, [r4, #2]
   1c046:	70e6      	strb	r6, [r4, #3]
      icmphdr->chksum = inet_chksum(icmphdr, q->len);
   1c048:	4620      	mov	r0, r4
   1c04a:	f7ff fd15 	bl	1ba78 <inet_chksum>
    }
#endif
    ICMP_STATS_INC(icmp.xmit);
    ip4_output_if(q, NULL, &iphdr_src, ICMP_TTL, 0, IP_PROTO_ICMP, netif);
   1c04e:	2301      	movs	r3, #1
      icmphdr->chksum = inet_chksum(icmphdr, q->len);
   1c050:	8060      	strh	r0, [r4, #2]
    ip4_output_if(q, NULL, &iphdr_src, ICMP_TTL, 0, IP_PROTO_ICMP, netif);
   1c052:	463a      	mov	r2, r7
   1c054:	9301      	str	r3, [sp, #4]
   1c056:	f8cd 8008 	str.w	r8, [sp, #8]
   1c05a:	9600      	str	r6, [sp, #0]
   1c05c:	4631      	mov	r1, r6
   1c05e:	23ff      	movs	r3, #255	; 0xff
   1c060:	4628      	mov	r0, r5
   1c062:	f000 f9a3 	bl	1c3ac <ip4_output_if>
  }
  pbuf_free(q);
   1c066:	4628      	mov	r0, r5
   1c068:	f7fb fbc0 	bl	177ec <pbuf_free>
}
   1c06c:	b006      	add	sp, #24
   1c06e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   1c072:	bf00      	nop

0001c074 <icmp_time_exceeded>:
{
   1c074:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  q = pbuf_alloc(PBUF_IP, sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE,
   1c078:	f44f 7220 	mov.w	r2, #640	; 0x280
{
   1c07c:	b086      	sub	sp, #24
   1c07e:	4607      	mov	r7, r0
   1c080:	460e      	mov	r6, r1
  q = pbuf_alloc(PBUF_IP, sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE,
   1c082:	2022      	movs	r0, #34	; 0x22
   1c084:	2124      	movs	r1, #36	; 0x24
   1c086:	f7fb fa05 	bl	17494 <pbuf_alloc>
  if (q == NULL) {
   1c08a:	b3a8      	cbz	r0, 1c0f8 <icmp_time_exceeded+0x84>
  icmphdr = (struct icmp_echo_hdr *)q->payload;
   1c08c:	6844      	ldr	r4, [r0, #4]
  iphdr = (struct ip_hdr *)p->payload;
   1c08e:	687b      	ldr	r3, [r7, #4]
  icmphdr->code = code;
   1c090:	7066      	strb	r6, [r4, #1]
  icmphdr->type = type;
   1c092:	220b      	movs	r2, #11
  icmphdr->id = 0;
   1c094:	2600      	movs	r6, #0
  icmphdr->type = type;
   1c096:	7022      	strb	r2, [r4, #0]
  icmphdr->id = 0;
   1c098:	6066      	str	r6, [r4, #4]
  SMEMCPY((u8_t *)q->payload + sizeof(struct icmp_echo_hdr), (u8_t *)p->payload,
   1c09a:	6859      	ldr	r1, [r3, #4]
   1c09c:	689f      	ldr	r7, [r3, #8]
   1c09e:	f8d3 e00c 	ldr.w	lr, [r3, #12]
   1c0a2:	4605      	mov	r5, r0
   1c0a4:	6818      	ldr	r0, [r3, #0]
   1c0a6:	60a0      	str	r0, [r4, #8]
   1c0a8:	60e1      	str	r1, [r4, #12]
   1c0aa:	6127      	str	r7, [r4, #16]
   1c0ac:	f8c4 e014 	str.w	lr, [r4, #20]
   1c0b0:	6918      	ldr	r0, [r3, #16]
   1c0b2:	699f      	ldr	r7, [r3, #24]
   1c0b4:	6959      	ldr	r1, [r3, #20]
   1c0b6:	61e1      	str	r1, [r4, #28]
   1c0b8:	6227      	str	r7, [r4, #32]
   1c0ba:	61a0      	str	r0, [r4, #24]
  ip4_addr_copy(iphdr_src, iphdr->src);
   1c0bc:	af06      	add	r7, sp, #24
   1c0be:	68db      	ldr	r3, [r3, #12]
   1c0c0:	f847 3d04 	str.w	r3, [r7, #-4]!
  netif = ip4_route(&iphdr_src);
   1c0c4:	4638      	mov	r0, r7
   1c0c6:	f000 f81b 	bl	1c100 <ip4_route>
  if (netif != NULL) {
   1c0ca:	4680      	mov	r8, r0
   1c0cc:	b188      	cbz	r0, 1c0f2 <icmp_time_exceeded+0x7e>
      icmphdr->chksum = inet_chksum(icmphdr, q->len);
   1c0ce:	8969      	ldrh	r1, [r5, #10]
    icmphdr->chksum = 0;
   1c0d0:	70a6      	strb	r6, [r4, #2]
   1c0d2:	70e6      	strb	r6, [r4, #3]
      icmphdr->chksum = inet_chksum(icmphdr, q->len);
   1c0d4:	4620      	mov	r0, r4
   1c0d6:	f7ff fccf 	bl	1ba78 <inet_chksum>
    ip4_output_if(q, NULL, &iphdr_src, ICMP_TTL, 0, IP_PROTO_ICMP, netif);
   1c0da:	2301      	movs	r3, #1
      icmphdr->chksum = inet_chksum(icmphdr, q->len);
   1c0dc:	8060      	strh	r0, [r4, #2]
    ip4_output_if(q, NULL, &iphdr_src, ICMP_TTL, 0, IP_PROTO_ICMP, netif);
   1c0de:	463a      	mov	r2, r7
   1c0e0:	9301      	str	r3, [sp, #4]
   1c0e2:	f8cd 8008 	str.w	r8, [sp, #8]
   1c0e6:	9600      	str	r6, [sp, #0]
   1c0e8:	4631      	mov	r1, r6
   1c0ea:	23ff      	movs	r3, #255	; 0xff
   1c0ec:	4628      	mov	r0, r5
   1c0ee:	f000 f95d 	bl	1c3ac <ip4_output_if>
  pbuf_free(q);
   1c0f2:	4628      	mov	r0, r5
   1c0f4:	f7fb fb7a 	bl	177ec <pbuf_free>
}
   1c0f8:	b006      	add	sp, #24
   1c0fa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   1c0fe:	bf00      	nop

0001c100 <ip4_route>:
 * @param dest the destination IP address for which to find the route
 * @return the netif on which to send to reach dest
 */
struct netif *
ip4_route(const ip4_addr_t *dest)
{
   1c100:	b430      	push	{r4, r5}

  /* bug #54569: in case LWIP_SINGLE_NETIF=1 and LWIP_DEBUGF() disabled, the following loop is optimized away */
  LWIP_UNUSED_ARG(dest);

  /* iterate through netifs */
  NETIF_FOREACH(netif) {
   1c102:	4b19      	ldr	r3, [pc, #100]	; (1c168 <ip4_route+0x68>)
   1c104:	681b      	ldr	r3, [r3, #0]
   1c106:	b1ab      	cbz	r3, 1c134 <ip4_route+0x34>
    /* is the netif up, does it have a link and a valid address? */
    if (netif_is_up(netif) && netif_is_link_up(netif) && !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
   1c108:	f893 2035 	ldrb.w	r2, [r3, #53]	; 0x35
   1c10c:	f002 0105 	and.w	r1, r2, #5
   1c110:	2905      	cmp	r1, #5
   1c112:	d1f7      	bne.n	1c104 <ip4_route+0x4>
   1c114:	6859      	ldr	r1, [r3, #4]
   1c116:	2900      	cmp	r1, #0
   1c118:	d0f4      	beq.n	1c104 <ip4_route+0x4>
      /* network mask matches? */
      if (ip4_addr_netcmp(dest, netif_ip4_addr(netif), netif_ip4_netmask(netif))) {
   1c11a:	6804      	ldr	r4, [r0, #0]
   1c11c:	689d      	ldr	r5, [r3, #8]
   1c11e:	4061      	eors	r1, r4
   1c120:	4229      	tst	r1, r5
   1c122:	d004      	beq.n	1c12e <ip4_route+0x2e>
        /* return netif on which to forward IP packet */
        return netif;
      }
      /* gateway matches on a non broadcast interface? (i.e. peer in a point to point interface) */
      if (((netif->flags & NETIF_FLAG_BROADCAST) == 0) && ip4_addr_cmp(dest, netif_ip4_gw(netif))) {
   1c124:	0792      	lsls	r2, r2, #30
   1c126:	d4ed      	bmi.n	1c104 <ip4_route+0x4>
   1c128:	68da      	ldr	r2, [r3, #12]
   1c12a:	4294      	cmp	r4, r2
   1c12c:	d1ea      	bne.n	1c104 <ip4_route+0x4>
    MIB2_STATS_INC(mib2.ipoutnoroutes);
    return NULL;
  }

  return netif_default;
}
   1c12e:	4618      	mov	r0, r3
   1c130:	bc30      	pop	{r4, r5}
   1c132:	4770      	bx	lr
  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
   1c134:	4b0d      	ldr	r3, [pc, #52]	; (1c16c <ip4_route+0x6c>)
   1c136:	681b      	ldr	r3, [r3, #0]
   1c138:	2b00      	cmp	r3, #0
   1c13a:	d0f8      	beq.n	1c12e <ip4_route+0x2e>
   1c13c:	f893 2035 	ldrb.w	r2, [r3, #53]	; 0x35
   1c140:	f002 0205 	and.w	r2, r2, #5
   1c144:	2a05      	cmp	r2, #5
   1c146:	d108      	bne.n	1c15a <ip4_route+0x5a>
   1c148:	685a      	ldr	r2, [r3, #4]
   1c14a:	b152      	cbz	r2, 1c162 <ip4_route+0x62>
      ip4_addr_isany_val(*netif_ip4_addr(netif_default)) || ip4_addr_isloopback(dest)) {
   1c14c:	7802      	ldrb	r2, [r0, #0]
    return NULL;
   1c14e:	2a7f      	cmp	r2, #127	; 0x7f
   1c150:	bf08      	it	eq
   1c152:	2300      	moveq	r3, #0
}
   1c154:	4618      	mov	r0, r3
   1c156:	bc30      	pop	{r4, r5}
   1c158:	4770      	bx	lr
    return NULL;
   1c15a:	2300      	movs	r3, #0
}
   1c15c:	4618      	mov	r0, r3
   1c15e:	bc30      	pop	{r4, r5}
   1c160:	4770      	bx	lr
    return NULL;
   1c162:	4613      	mov	r3, r2
   1c164:	e7e3      	b.n	1c12e <ip4_route+0x2e>
   1c166:	bf00      	nop
   1c168:	2000a3d8 	.word	0x2000a3d8
   1c16c:	2000a3dc 	.word	0x2000a3dc

0001c170 <ip4_input>:
 * @return ERR_OK if the packet was processed (could return ERR_* if it wasn't
 *         processed, but currently always returns ERR_OK)
 */
err_t
ip4_input(struct pbuf *p, struct netif *inp)
{
   1c170:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}

  IP_STATS_INC(ip.recv);
  MIB2_STATS_INC(mib2.ipinreceives);

  /* identify the IP header */
  iphdr = (struct ip_hdr *)p->payload;
   1c174:	6846      	ldr	r6, [r0, #4]
  if (IPH_V(iphdr) != 4) {
   1c176:	7833      	ldrb	r3, [r6, #0]
   1c178:	091a      	lsrs	r2, r3, #4
   1c17a:	2a04      	cmp	r2, #4
{
   1c17c:	4604      	mov	r4, r0
  if (IPH_V(iphdr) != 4) {
   1c17e:	d005      	beq.n	1c18c <ip4_input+0x1c>
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_WARNING, ("IP packet dropped due to bad version number %"U16_F"\n", (u16_t)IPH_V(iphdr)));
    ip4_debug_print(p);
    pbuf_free(p);
   1c180:	4620      	mov	r0, r4
   1c182:	f7fb fb33 	bl	177ec <pbuf_free>
  ip_data.current_ip_header_tot_len = 0;
  ip4_addr_set_any(ip4_current_src_addr());
  ip4_addr_set_any(ip4_current_dest_addr());

  return ERR_OK;
}
   1c186:	2000      	movs	r0, #0
   1c188:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  iphdr_hlen = IPH_HL_BYTES(iphdr);
   1c18c:	f003 030f 	and.w	r3, r3, #15
  iphdr_len = lwip_ntohs(IPH_LEN(iphdr));
   1c190:	8870      	ldrh	r0, [r6, #2]
  iphdr_hlen = IPH_HL_BYTES(iphdr);
   1c192:	009d      	lsls	r5, r3, #2
   1c194:	460f      	mov	r7, r1
  iphdr_len = lwip_ntohs(IPH_LEN(iphdr));
   1c196:	f7f7 faaf 	bl	136f8 <lwip_htons>
  if (iphdr_len < p->tot_len) {
   1c19a:	8923      	ldrh	r3, [r4, #8]
   1c19c:	4283      	cmp	r3, r0
  iphdr_len = lwip_ntohs(IPH_LEN(iphdr));
   1c19e:	4680      	mov	r8, r0
  iphdr_hlen = IPH_HL_BYTES(iphdr);
   1c1a0:	fa1f f985 	uxth.w	r9, r5
  if (iphdr_len < p->tot_len) {
   1c1a4:	d830      	bhi.n	1c208 <ip4_input+0x98>
  if ((iphdr_hlen > p->len) || (iphdr_len > p->tot_len) || (iphdr_hlen < IP_HLEN)) {
   1c1a6:	8963      	ldrh	r3, [r4, #10]
   1c1a8:	454b      	cmp	r3, r9
   1c1aa:	d3e9      	bcc.n	1c180 <ip4_input+0x10>
   1c1ac:	8923      	ldrh	r3, [r4, #8]
   1c1ae:	4543      	cmp	r3, r8
   1c1b0:	d3e6      	bcc.n	1c180 <ip4_input+0x10>
   1c1b2:	f1b9 0f13 	cmp.w	r9, #19
   1c1b6:	d9e3      	bls.n	1c180 <ip4_input+0x10>
    if (inet_chksum(iphdr, iphdr_hlen) != 0) {
   1c1b8:	4649      	mov	r1, r9
   1c1ba:	4630      	mov	r0, r6
   1c1bc:	f7ff fc5c 	bl	1ba78 <inet_chksum>
   1c1c0:	2800      	cmp	r0, #0
   1c1c2:	d1dd      	bne.n	1c180 <ip4_input+0x10>
  ip_addr_copy_from_ip4(ip_data.current_iphdr_dest, iphdr->dest);
   1c1c4:	6933      	ldr	r3, [r6, #16]
   1c1c6:	f8df 91dc 	ldr.w	r9, [pc, #476]	; 1c3a4 <ip4_input+0x234>
  if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
   1c1ca:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
  ip_addr_copy_from_ip4(ip_data.current_iphdr_dest, iphdr->dest);
   1c1ce:	f8c9 3014 	str.w	r3, [r9, #20]
  ip_addr_copy_from_ip4(ip_data.current_iphdr_src, iphdr->src);
   1c1d2:	68f0      	ldr	r0, [r6, #12]
   1c1d4:	f8c9 0010 	str.w	r0, [r9, #16]
  if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
   1c1d8:	2ae0      	cmp	r2, #224	; 0xe0
   1c1da:	d01a      	beq.n	1c212 <ip4_input+0xa2>
  if ((netif_is_up(netif)) && (!ip4_addr_isany_val(*netif_ip4_addr(netif)))) {
   1c1dc:	f897 2035 	ldrb.w	r2, [r7, #53]	; 0x35
   1c1e0:	07d2      	lsls	r2, r2, #31
   1c1e2:	f140 808f 	bpl.w	1c304 <ip4_input+0x194>
   1c1e6:	687a      	ldr	r2, [r7, #4]
   1c1e8:	2a00      	cmp	r2, #0
   1c1ea:	f000 808b 	beq.w	1c304 <ip4_input+0x194>
    if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
   1c1ee:	4293      	cmp	r3, r2
   1c1f0:	d005      	beq.n	1c1fe <ip4_input+0x8e>
        ip4_addr_isbroadcast(ip4_current_dest_addr(), netif)
   1c1f2:	4618      	mov	r0, r3
   1c1f4:	4639      	mov	r1, r7
   1c1f6:	f7fa fd81 	bl	16cfc <ip4_addr_isbroadcast_u32>
    if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
   1c1fa:	2800      	cmp	r0, #0
   1c1fc:	d078      	beq.n	1c2f0 <ip4_input+0x180>
      && !ip4_addr_isany_val(*ip4_current_src_addr())
   1c1fe:	46b8      	mov	r8, r7
   1c200:	f8d9 0010 	ldr.w	r0, [r9, #16]
   1c204:	b1a0      	cbz	r0, 1c230 <ip4_input+0xc0>
   1c206:	e066      	b.n	1c2d6 <ip4_input+0x166>
    pbuf_realloc(p, iphdr_len);
   1c208:	4601      	mov	r1, r0
   1c20a:	4620      	mov	r0, r4
   1c20c:	f7fb fa24 	bl	17658 <pbuf_realloc>
   1c210:	e7c9      	b.n	1c1a6 <ip4_input+0x36>
    if ((netif_is_up(inp)) && (!ip4_addr_isany_val(*netif_ip4_addr(inp)))) {
   1c212:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
   1c216:	07d9      	lsls	r1, r3, #31
   1c218:	f140 80a0 	bpl.w	1c35c <ip4_input+0x1ec>
   1c21c:	687b      	ldr	r3, [r7, #4]
   1c21e:	2b00      	cmp	r3, #0
   1c220:	f000 809c 	beq.w	1c35c <ip4_input+0x1ec>
      && !ip4_addr_isany_val(*ip4_current_src_addr())
   1c224:	2800      	cmp	r0, #0
   1c226:	d155      	bne.n	1c2d4 <ip4_input+0x164>
   1c228:	46b8      	mov	r8, r7
  if (netif == NULL) {
   1c22a:	f1b8 0f00 	cmp.w	r8, #0
   1c22e:	d0a7      	beq.n	1c180 <ip4_input+0x10>
  if ((IPH_OFFSET(iphdr) & PP_HTONS(IP_OFFMASK | IP_MF)) != 0) {
   1c230:	88f3      	ldrh	r3, [r6, #6]
   1c232:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
   1c236:	b133      	cbz	r3, 1c246 <ip4_input+0xd6>
    p = ip4_reass(p);
   1c238:	4620      	mov	r0, r4
   1c23a:	f000 fabb 	bl	1c7b4 <ip4_reass>
    if (p == NULL) {
   1c23e:	4604      	mov	r4, r0
   1c240:	2800      	cmp	r0, #0
   1c242:	d0a0      	beq.n	1c186 <ip4_input+0x16>
    iphdr = (const struct ip_hdr *)p->payload;
   1c244:	6846      	ldr	r6, [r0, #4]
  ip_data.current_netif = netif;
   1c246:	f8c9 8000 	str.w	r8, [r9]
  ip_data.current_input_netif = inp;
   1c24a:	f8c9 7004 	str.w	r7, [r9, #4]
  ip_data.current_ip4_header = iphdr;
   1c24e:	f8c9 6008 	str.w	r6, [r9, #8]
  ip_data.current_ip_header_tot_len = IPH_HL_BYTES(iphdr);
   1c252:	7833      	ldrb	r3, [r6, #0]
   1c254:	f003 030f 	and.w	r3, r3, #15
   1c258:	009b      	lsls	r3, r3, #2
  raw_status = raw_input(p, inp);
   1c25a:	4639      	mov	r1, r7
   1c25c:	4620      	mov	r0, r4
  ip_data.current_ip_header_tot_len = IPH_HL_BYTES(iphdr);
   1c25e:	f8a9 300c 	strh.w	r3, [r9, #12]
  raw_status = raw_input(p, inp);
   1c262:	f7fb fd41 	bl	17ce8 <raw_input>
  if (raw_status != RAW_INPUT_EATEN)
   1c266:	2801      	cmp	r0, #1
  raw_status = raw_input(p, inp);
   1c268:	4682      	mov	sl, r0
  if (raw_status != RAW_INPUT_EATEN)
   1c26a:	d025      	beq.n	1c2b8 <ip4_input+0x148>
    pbuf_remove_header(p, iphdr_hlen); /* Move to payload, no check necessary. */
   1c26c:	4629      	mov	r1, r5
   1c26e:	4620      	mov	r0, r4
   1c270:	f7fb fa6e 	bl	17750 <pbuf_remove_header>
    switch (IPH_PROTO(iphdr)) {
   1c274:	7a73      	ldrb	r3, [r6, #9]
   1c276:	2b06      	cmp	r3, #6
   1c278:	f000 8085 	beq.w	1c386 <ip4_input+0x216>
   1c27c:	2b11      	cmp	r3, #17
   1c27e:	d07d      	beq.n	1c37c <ip4_input+0x20c>
   1c280:	2b01      	cmp	r3, #1
   1c282:	d076      	beq.n	1c372 <ip4_input+0x202>
        if (raw_status == RAW_INPUT_DELIVERED) {
   1c284:	f1ba 0f02 	cmp.w	sl, #2
   1c288:	d013      	beq.n	1c2b2 <ip4_input+0x142>
          if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
   1c28a:	4641      	mov	r1, r8
   1c28c:	f8d9 0014 	ldr.w	r0, [r9, #20]
   1c290:	f7fa fd34 	bl	16cfc <ip4_addr_isbroadcast_u32>
   1c294:	b968      	cbnz	r0, 1c2b2 <ip4_input+0x142>
              !ip4_addr_ismulticast(ip4_current_dest_addr())) {
   1c296:	f8d9 3014 	ldr.w	r3, [r9, #20]
   1c29a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
          if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
   1c29e:	2be0      	cmp	r3, #224	; 0xe0
   1c2a0:	d007      	beq.n	1c2b2 <ip4_input+0x142>
            pbuf_header_force(p, (s16_t)iphdr_hlen); /* Move to ip header, no check necessary. */
   1c2a2:	4629      	mov	r1, r5
   1c2a4:	4620      	mov	r0, r4
   1c2a6:	f7fb fa6d 	bl	17784 <pbuf_header_force>
            icmp_dest_unreach(p, ICMP_DUR_PROTO);
   1c2aa:	2102      	movs	r1, #2
   1c2ac:	4620      	mov	r0, r4
   1c2ae:	f7ff fe9b 	bl	1bfe8 <icmp_dest_unreach>
        pbuf_free(p);
   1c2b2:	4620      	mov	r0, r4
   1c2b4:	f7fb fa9a 	bl	177ec <pbuf_free>
  ip_data.current_netif = NULL;
   1c2b8:	2300      	movs	r3, #0
   1c2ba:	f8c9 3000 	str.w	r3, [r9]
  ip_data.current_input_netif = NULL;
   1c2be:	f8c9 3004 	str.w	r3, [r9, #4]
  ip_data.current_ip4_header = NULL;
   1c2c2:	f8c9 3008 	str.w	r3, [r9, #8]
  ip_data.current_ip_header_tot_len = 0;
   1c2c6:	f8a9 300c 	strh.w	r3, [r9, #12]
  ip4_addr_set_any(ip4_current_src_addr());
   1c2ca:	f8c9 3010 	str.w	r3, [r9, #16]
  ip4_addr_set_any(ip4_current_dest_addr());
   1c2ce:	f8c9 3014 	str.w	r3, [r9, #20]
  return ERR_OK;
   1c2d2:	e758      	b.n	1c186 <ip4_input+0x16>
   1c2d4:	46b8      	mov	r8, r7
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
   1c2d6:	4639      	mov	r1, r7
   1c2d8:	f7fa fd10 	bl	16cfc <ip4_addr_isbroadcast_u32>
   1c2dc:	2800      	cmp	r0, #0
   1c2de:	f47f af4f 	bne.w	1c180 <ip4_input+0x10>
        (ip4_addr_ismulticast(ip4_current_src_addr()))) {
   1c2e2:	f8d9 3010 	ldr.w	r3, [r9, #16]
   1c2e6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
   1c2ea:	2be0      	cmp	r3, #224	; 0xe0
   1c2ec:	d19d      	bne.n	1c22a <ip4_input+0xba>
   1c2ee:	e747      	b.n	1c180 <ip4_input+0x10>
    if (autoip_accept_packet(netif, ip4_current_dest_addr())) {
   1c2f0:	f109 0114 	add.w	r1, r9, #20
   1c2f4:	4638      	mov	r0, r7
   1c2f6:	f7ff fdd3 	bl	1bea0 <autoip_accept_packet>
   1c2fa:	2800      	cmp	r0, #0
   1c2fc:	f47f af7f 	bne.w	1c1fe <ip4_input+0x8e>
   1c300:	f8d9 3014 	ldr.w	r3, [r9, #20]
      if (!ip4_addr_isloopback(ip4_current_dest_addr()))
   1c304:	b2db      	uxtb	r3, r3
   1c306:	2b7f      	cmp	r3, #127	; 0x7f
   1c308:	d028      	beq.n	1c35c <ip4_input+0x1ec>
        NETIF_FOREACH(netif) {
   1c30a:	4b25      	ldr	r3, [pc, #148]	; (1c3a0 <ip4_input+0x230>)
   1c30c:	f8d3 8000 	ldr.w	r8, [r3]
   1c310:	f1b8 0f00 	cmp.w	r8, #0
   1c314:	d022      	beq.n	1c35c <ip4_input+0x1ec>
    if (autoip_accept_packet(netif, ip4_current_dest_addr())) {
   1c316:	f8df a090 	ldr.w	sl, [pc, #144]	; 1c3a8 <ip4_input+0x238>
          if (netif == inp) {
   1c31a:	4547      	cmp	r7, r8
   1c31c:	d019      	beq.n	1c352 <ip4_input+0x1e2>
  if ((netif_is_up(netif)) && (!ip4_addr_isany_val(*netif_ip4_addr(netif)))) {
   1c31e:	f898 3035 	ldrb.w	r3, [r8, #53]	; 0x35
   1c322:	07db      	lsls	r3, r3, #31
   1c324:	d515      	bpl.n	1c352 <ip4_input+0x1e2>
   1c326:	f8d8 3004 	ldr.w	r3, [r8, #4]
   1c32a:	b193      	cbz	r3, 1c352 <ip4_input+0x1e2>
    if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
   1c32c:	f8d9 2014 	ldr.w	r2, [r9, #20]
   1c330:	4293      	cmp	r3, r2
        ip4_addr_isbroadcast(ip4_current_dest_addr(), netif)
   1c332:	4641      	mov	r1, r8
   1c334:	4610      	mov	r0, r2
    if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
   1c336:	f43f af63 	beq.w	1c200 <ip4_input+0x90>
        ip4_addr_isbroadcast(ip4_current_dest_addr(), netif)
   1c33a:	f7fa fcdf 	bl	16cfc <ip4_addr_isbroadcast_u32>
    if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
   1c33e:	2800      	cmp	r0, #0
   1c340:	f47f af5e 	bne.w	1c200 <ip4_input+0x90>
    if (autoip_accept_packet(netif, ip4_current_dest_addr())) {
   1c344:	4651      	mov	r1, sl
   1c346:	4640      	mov	r0, r8
   1c348:	f7ff fdaa 	bl	1bea0 <autoip_accept_packet>
   1c34c:	2800      	cmp	r0, #0
   1c34e:	f47f af57 	bne.w	1c200 <ip4_input+0x90>
        NETIF_FOREACH(netif) {
   1c352:	f8d8 8000 	ldr.w	r8, [r8]
   1c356:	f1b8 0f00 	cmp.w	r8, #0
   1c35a:	d1de      	bne.n	1c31a <ip4_input+0x1aa>
    if (IPH_PROTO(iphdr) == IP_PROTO_UDP) {
   1c35c:	7a73      	ldrb	r3, [r6, #9]
   1c35e:	2b11      	cmp	r3, #17
   1c360:	d016      	beq.n	1c390 <ip4_input+0x220>
      && !ip4_addr_isany_val(*ip4_current_src_addr())
   1c362:	f8d9 0010 	ldr.w	r0, [r9, #16]
   1c366:	2800      	cmp	r0, #0
   1c368:	f43f af0a 	beq.w	1c180 <ip4_input+0x10>
   1c36c:	f04f 0800 	mov.w	r8, #0
   1c370:	e7b1      	b.n	1c2d6 <ip4_input+0x166>
        icmp_input(p, inp);
   1c372:	4639      	mov	r1, r7
   1c374:	4620      	mov	r0, r4
   1c376:	f7ff fd9d 	bl	1beb4 <icmp_input>
        break;
   1c37a:	e79d      	b.n	1c2b8 <ip4_input+0x148>
        udp_input(p, inp);
   1c37c:	4639      	mov	r1, r7
   1c37e:	4620      	mov	r0, r4
   1c380:	f7fe fede 	bl	1b140 <udp_input>
        break;
   1c384:	e798      	b.n	1c2b8 <ip4_input+0x148>
        tcp_input(p, inp);
   1c386:	4639      	mov	r1, r7
   1c388:	4620      	mov	r0, r4
   1c38a:	f7fd fa47 	bl	1981c <tcp_input>
        break;
   1c38e:	e793      	b.n	1c2b8 <ip4_input+0x148>
      if (IP_ACCEPT_LINK_LAYER_ADDRESSED_PORT(udphdr->dest)) {
   1c390:	1973      	adds	r3, r6, r5
   1c392:	885b      	ldrh	r3, [r3, #2]
   1c394:	f5b3 4f88 	cmp.w	r3, #17408	; 0x4400
   1c398:	d1e3      	bne.n	1c362 <ip4_input+0x1f2>
      && !ip4_addr_isany_val(*ip4_current_src_addr())
   1c39a:	46b8      	mov	r8, r7
   1c39c:	e745      	b.n	1c22a <ip4_input+0xba>
   1c39e:	bf00      	nop
   1c3a0:	2000a3d8 	.word	0x2000a3d8
   1c3a4:	2000a404 	.word	0x2000a404
   1c3a8:	2000a418 	.word	0x2000a418

0001c3ac <ip4_output_if>:
 */
err_t
ip4_output_if(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
              u8_t ttl, u8_t tos,
              u8_t proto, struct netif *netif)
{
   1c3ac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1c3b0:	b085      	sub	sp, #20
   1c3b2:	469a      	mov	sl, r3
   1c3b4:	4606      	mov	r6, r0
   1c3b6:	f89d 5038 	ldrb.w	r5, [sp, #56]	; 0x38
   1c3ba:	f89d 303c 	ldrb.w	r3, [sp, #60]	; 0x3c
   1c3be:	9f10      	ldr	r7, [sp, #64]	; 0x40
                  u8_t ttl, u8_t tos, u8_t proto, struct netif *netif, void *ip_options,
                  u16_t optlen)
{
#endif /* IP_OPTIONS_SEND */
  const ip4_addr_t *src_used = src;
  if (dest != LWIP_IP_HDRINCL) {
   1c3c0:	2a00      	cmp	r2, #0
   1c3c2:	d05c      	beq.n	1c47e <ip4_output_if+0xd2>
   1c3c4:	4689      	mov	r9, r1
   1c3c6:	4690      	mov	r8, r2
    if (ip4_addr_isany(src)) {
   1c3c8:	b109      	cbz	r1, 1c3ce <ip4_output_if+0x22>
   1c3ca:	680a      	ldr	r2, [r1, #0]
   1c3cc:	b90a      	cbnz	r2, 1c3d2 <ip4_output_if+0x26>
      src_used = netif_ip4_addr(netif);
   1c3ce:	f107 0904 	add.w	r9, r7, #4
      }
#endif /* CHECKSUM_GEN_IP_INLINE */
    }
#endif /* IP_OPTIONS_SEND */
    /* generate IP header */
    if (pbuf_add_header(p, IP_HLEN)) {
   1c3d2:	2114      	movs	r1, #20
   1c3d4:	4630      	mov	r0, r6
   1c3d6:	9301      	str	r3, [sp, #4]
   1c3d8:	f7fb f996 	bl	17708 <pbuf_add_header>
   1c3dc:	9b01      	ldr	r3, [sp, #4]
   1c3de:	4602      	mov	r2, r0
   1c3e0:	2800      	cmp	r0, #0
   1c3e2:	d15e      	bne.n	1c4a2 <ip4_output_if+0xf6>
      IP_STATS_INC(ip.err);
      MIB2_STATS_INC(mib2.ipoutdiscards);
      return ERR_BUF;
    }

    iphdr = (struct ip_hdr *)p->payload;
   1c3e4:	6874      	ldr	r4, [r6, #4]
   1c3e6:	9201      	str	r2, [sp, #4]
    LWIP_ASSERT("check that first pbuf can hold struct ip_hdr",
                (p->len >= sizeof(struct ip_hdr)));

    IPH_TTL_SET(iphdr, ttl);
   1c3e8:	f884 a008 	strb.w	sl, [r4, #8]
    IPH_PROTO_SET(iphdr, proto);
   1c3ec:	7263      	strb	r3, [r4, #9]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(proto | (ttl << 8));
#endif /* CHECKSUM_GEN_IP_INLINE */

    /* dest cannot be NULL here */
    ip4_addr_copy(iphdr->dest, *dest);
   1c3ee:	f8d8 1000 	ldr.w	r1, [r8]
    chk_sum += ip4_addr_get_u32(&iphdr->dest) & 0xFFFF;
    chk_sum += ip4_addr_get_u32(&iphdr->dest) >> 16;
#endif /* CHECKSUM_GEN_IP_INLINE */

    IPH_VHL_SET(iphdr, 4, ip_hlen / 4);
    IPH_TOS_SET(iphdr, tos);
   1c3f2:	7065      	strb	r5, [r4, #1]
    IPH_VHL_SET(iphdr, 4, ip_hlen / 4);
   1c3f4:	2045      	movs	r0, #69	; 0x45
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(tos | (iphdr->_v_hl << 8));
   1c3f6:	022d      	lsls	r5, r5, #8
    IPH_VHL_SET(iphdr, 4, ip_hlen / 4);
   1c3f8:	7020      	strb	r0, [r4, #0]
    chk_sum += PP_NTOHS(tos | (iphdr->_v_hl << 8));
   1c3fa:	4305      	orrs	r5, r0
    chk_sum += ip4_addr_get_u32(&iphdr->dest) >> 16;
   1c3fc:	0c08      	lsrs	r0, r1, #16
    chk_sum += PP_NTOHS(proto | (ttl << 8));
   1c3fe:	ea43 230a 	orr.w	r3, r3, sl, lsl #8
    chk_sum += PP_NTOHS(tos | (iphdr->_v_hl << 8));
   1c402:	fa10 f081 	uxtah	r0, r0, r1
    chk_sum += PP_NTOHS(proto | (ttl << 8));
   1c406:	ea4f 2a23 	mov.w	sl, r3, asr #8
    ip4_addr_copy(iphdr->dest, *dest);
   1c40a:	6121      	str	r1, [r4, #16]
    chk_sum += PP_NTOHS(tos | (iphdr->_v_hl << 8));
   1c40c:	4405      	add	r5, r0
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_LEN_SET(iphdr, lwip_htons(p->tot_len));
   1c40e:	8930      	ldrh	r0, [r6, #8]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_len;
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_OFFSET_SET(iphdr, 0);
    IPH_ID_SET(iphdr, lwip_htons(ip_id));
   1c410:	f8df b0a0 	ldr.w	fp, [pc, #160]	; 1c4b4 <ip4_output_if+0x108>
    chk_sum += PP_NTOHS(proto | (ttl << 8));
   1c414:	ea4a 2a03 	orr.w	sl, sl, r3, lsl #8
    IPH_LEN_SET(iphdr, lwip_htons(p->tot_len));
   1c418:	f7f7 f96e 	bl	136f8 <lwip_htons>
    IPH_OFFSET_SET(iphdr, 0);
   1c41c:	9a01      	ldr	r2, [sp, #4]
    IPH_LEN_SET(iphdr, lwip_htons(p->tot_len));
   1c41e:	8060      	strh	r0, [r4, #2]
   1c420:	4603      	mov	r3, r0
    chk_sum += PP_NTOHS(tos | (iphdr->_v_hl << 8));
   1c422:	fa15 fa8a 	uxtah	sl, r5, sl
    IPH_OFFSET_SET(iphdr, 0);
   1c426:	71a2      	strb	r2, [r4, #6]
   1c428:	71e2      	strb	r2, [r4, #7]
    IPH_ID_SET(iphdr, lwip_htons(ip_id));
   1c42a:	f8bb 0000 	ldrh.w	r0, [fp]
    chk_sum += iphdr->_len;
   1c42e:	449a      	add	sl, r3
    IPH_ID_SET(iphdr, lwip_htons(ip_id));
   1c430:	f7f7 f962 	bl	136f8 <lwip_htons>
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_id;
#endif /* CHECKSUM_GEN_IP_INLINE */
    ++ip_id;
   1c434:	f8bb 3000 	ldrh.w	r3, [fp]
    IPH_ID_SET(iphdr, lwip_htons(ip_id));
   1c438:	80a0      	strh	r0, [r4, #4]
    ++ip_id;
   1c43a:	3301      	adds	r3, #1
    chk_sum += iphdr->_id;
   1c43c:	4450      	add	r0, sl
    ++ip_id;
   1c43e:	f8ab 3000 	strh.w	r3, [fp]

    if (src == NULL) {
   1c442:	f1b9 0f00 	cmp.w	r9, #0
   1c446:	d02f      	beq.n	1c4a8 <ip4_output_if+0xfc>
      ip4_addr_copy(iphdr->src, *IP4_ADDR_ANY4);
    } else {
      /* src cannot be NULL here */
      ip4_addr_copy(iphdr->src, *src);
   1c448:	f8d9 3000 	ldr.w	r3, [r9]
   1c44c:	60e3      	str	r3, [r4, #12]
    }

#if CHECKSUM_GEN_IP_INLINE
    chk_sum += ip4_addr_get_u32(&iphdr->src) & 0xFFFF;
   1c44e:	fa10 f083 	uxtah	r0, r0, r3
    chk_sum += ip4_addr_get_u32(&iphdr->src) >> 16;
   1c452:	eb00 4013 	add.w	r0, r0, r3, lsr #16
    chk_sum = (chk_sum >> 16) + (chk_sum & 0xFFFF);
   1c456:	b283      	uxth	r3, r0
   1c458:	eb03 4010 	add.w	r0, r3, r0, lsr #16
    chk_sum = (chk_sum >> 16) + chk_sum;
   1c45c:	eb00 4010 	add.w	r0, r0, r0, lsr #16
    chk_sum = ~chk_sum;
    IF__NETIF_CHECKSUM_ENABLED(netif, NETIF_CHECKSUM_GEN_IP) {
      iphdr->_chksum = (u16_t)chk_sum; /* network order */
   1c460:	43c0      	mvns	r0, r0
   1c462:	8160      	strh	r0, [r4, #10]
  }
#endif /* LWIP_MULTICAST_TX_OPTIONS */
#endif /* ENABLE_LOOPBACK */
#if IP_FRAG
  /* don't fragment if interface has mtu set to 0 [loopif] */
  if (netif->mtu && (p->tot_len > netif->mtu)) {
   1c464:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
   1c466:	b113      	cbz	r3, 1c46e <ip4_output_if+0xc2>
   1c468:	8932      	ldrh	r2, [r6, #8]
   1c46a:	429a      	cmp	r2, r3
   1c46c:	d811      	bhi.n	1c492 <ip4_output_if+0xe6>
    return ip4_frag(p, netif, dest);
  }
#endif /* IP_FRAG */

  LWIP_DEBUGF(IP_DEBUG, ("ip4_output_if: call netif->output()\n"));
  return netif->output(netif, p, dest);
   1c46e:	4642      	mov	r2, r8
   1c470:	4631      	mov	r1, r6
   1c472:	697b      	ldr	r3, [r7, #20]
   1c474:	4638      	mov	r0, r7
   1c476:	4798      	blx	r3
}
   1c478:	b005      	add	sp, #20
   1c47a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    if (p->len < IP_HLEN) {
   1c47e:	8943      	ldrh	r3, [r0, #10]
   1c480:	2b13      	cmp	r3, #19
   1c482:	d90e      	bls.n	1c4a2 <ip4_output_if+0xf6>
    ip4_addr_copy(dest_addr, iphdr->dest);
   1c484:	6873      	ldr	r3, [r6, #4]
   1c486:	f10d 0810 	add.w	r8, sp, #16
   1c48a:	691b      	ldr	r3, [r3, #16]
   1c48c:	f848 3d04 	str.w	r3, [r8, #-4]!
   1c490:	e7e8      	b.n	1c464 <ip4_output_if+0xb8>
    return ip4_frag(p, netif, dest);
   1c492:	4642      	mov	r2, r8
   1c494:	4639      	mov	r1, r7
   1c496:	4630      	mov	r0, r6
   1c498:	f000 fb5a 	bl	1cb50 <ip4_frag>
}
   1c49c:	b005      	add	sp, #20
   1c49e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      return ERR_BUF;
   1c4a2:	f06f 0001 	mvn.w	r0, #1
  return ip4_output_if_src(p, src_used, dest, ttl, tos, proto, netif);
   1c4a6:	e7e7      	b.n	1c478 <ip4_output_if+0xcc>
      ip4_addr_copy(iphdr->src, *IP4_ADDR_ANY4);
   1c4a8:	4b01      	ldr	r3, [pc, #4]	; (1c4b0 <ip4_output_if+0x104>)
   1c4aa:	681b      	ldr	r3, [r3, #0]
   1c4ac:	e7ce      	b.n	1c44c <ip4_output_if+0xa0>
   1c4ae:	bf00      	nop
   1c4b0:	0002d58c 	.word	0x0002d58c
   1c4b4:	2000294c 	.word	0x2000294c

0001c4b8 <ip4_output_if_src>:
{
   1c4b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1c4bc:	b085      	sub	sp, #20
   1c4be:	4606      	mov	r6, r0
   1c4c0:	9301      	str	r3, [sp, #4]
   1c4c2:	f89d 8038 	ldrb.w	r8, [sp, #56]	; 0x38
   1c4c6:	f89d a03c 	ldrb.w	sl, [sp, #60]	; 0x3c
   1c4ca:	9d10      	ldr	r5, [sp, #64]	; 0x40
  if (dest != LWIP_IP_HDRINCL) {
   1c4cc:	2a00      	cmp	r2, #0
   1c4ce:	d055      	beq.n	1c57c <ip4_output_if_src+0xc4>
   1c4d0:	4689      	mov	r9, r1
    if (pbuf_add_header(p, IP_HLEN)) {
   1c4d2:	2114      	movs	r1, #20
   1c4d4:	4617      	mov	r7, r2
   1c4d6:	f7fb f917 	bl	17708 <pbuf_add_header>
   1c4da:	9b01      	ldr	r3, [sp, #4]
   1c4dc:	2800      	cmp	r0, #0
   1c4de:	d161      	bne.n	1c5a4 <ip4_output_if_src+0xec>
    iphdr = (struct ip_hdr *)p->payload;
   1c4e0:	6874      	ldr	r4, [r6, #4]
   1c4e2:	9001      	str	r0, [sp, #4]
    IPH_TTL_SET(iphdr, ttl);
   1c4e4:	7223      	strb	r3, [r4, #8]
    IPH_PROTO_SET(iphdr, proto);
   1c4e6:	f884 a009 	strb.w	sl, [r4, #9]
    ip4_addr_copy(iphdr->dest, *dest);
   1c4ea:	6838      	ldr	r0, [r7, #0]
    IPH_TOS_SET(iphdr, tos);
   1c4ec:	f884 8001 	strb.w	r8, [r4, #1]
    IPH_VHL_SET(iphdr, 4, ip_hlen / 4);
   1c4f0:	2145      	movs	r1, #69	; 0x45
    chk_sum += PP_NTOHS(tos | (iphdr->_v_hl << 8));
   1c4f2:	ea4f 2808 	mov.w	r8, r8, lsl #8
    chk_sum += PP_NTOHS(proto | (ttl << 8));
   1c4f6:	ea4a 2303 	orr.w	r3, sl, r3, lsl #8
    chk_sum += PP_NTOHS(tos | (iphdr->_v_hl << 8));
   1c4fa:	ea48 0801 	orr.w	r8, r8, r1
    IPH_VHL_SET(iphdr, 4, ip_hlen / 4);
   1c4fe:	7021      	strb	r1, [r4, #0]
    chk_sum += ip4_addr_get_u32(&iphdr->dest) >> 16;
   1c500:	0c01      	lsrs	r1, r0, #16
    chk_sum += PP_NTOHS(tos | (iphdr->_v_hl << 8));
   1c502:	fa11 f180 	uxtah	r1, r1, r0
    ip4_addr_copy(iphdr->dest, *dest);
   1c506:	6120      	str	r0, [r4, #16]
    chk_sum += PP_NTOHS(proto | (ttl << 8));
   1c508:	1218      	asrs	r0, r3, #8
    chk_sum += PP_NTOHS(tos | (iphdr->_v_hl << 8));
   1c50a:	4441      	add	r1, r8
    chk_sum += PP_NTOHS(proto | (ttl << 8));
   1c50c:	ea40 2803 	orr.w	r8, r0, r3, lsl #8
    IPH_LEN_SET(iphdr, lwip_htons(p->tot_len));
   1c510:	8930      	ldrh	r0, [r6, #8]
    IPH_ID_SET(iphdr, lwip_htons(ip_id));
   1c512:	f8df b09c 	ldr.w	fp, [pc, #156]	; 1c5b0 <ip4_output_if_src+0xf8>
    chk_sum += PP_NTOHS(tos | (iphdr->_v_hl << 8));
   1c516:	fa11 f888 	uxtah	r8, r1, r8
    IPH_LEN_SET(iphdr, lwip_htons(p->tot_len));
   1c51a:	f7f7 f8ed 	bl	136f8 <lwip_htons>
    IPH_OFFSET_SET(iphdr, 0);
   1c51e:	9a01      	ldr	r2, [sp, #4]
    IPH_LEN_SET(iphdr, lwip_htons(p->tot_len));
   1c520:	8060      	strh	r0, [r4, #2]
   1c522:	4603      	mov	r3, r0
    IPH_OFFSET_SET(iphdr, 0);
   1c524:	71a2      	strb	r2, [r4, #6]
   1c526:	71e2      	strb	r2, [r4, #7]
    IPH_ID_SET(iphdr, lwip_htons(ip_id));
   1c528:	f8bb 0000 	ldrh.w	r0, [fp]
    chk_sum += iphdr->_len;
   1c52c:	4498      	add	r8, r3
    IPH_ID_SET(iphdr, lwip_htons(ip_id));
   1c52e:	f7f7 f8e3 	bl	136f8 <lwip_htons>
    ++ip_id;
   1c532:	f8bb 3000 	ldrh.w	r3, [fp]
    IPH_ID_SET(iphdr, lwip_htons(ip_id));
   1c536:	80a0      	strh	r0, [r4, #4]
    ++ip_id;
   1c538:	3301      	adds	r3, #1
    chk_sum += iphdr->_id;
   1c53a:	4440      	add	r0, r8
    ++ip_id;
   1c53c:	f8ab 3000 	strh.w	r3, [fp]
    if (src == NULL) {
   1c540:	f1b9 0f00 	cmp.w	r9, #0
   1c544:	d02b      	beq.n	1c59e <ip4_output_if_src+0xe6>
      ip4_addr_copy(iphdr->src, *src);
   1c546:	f8d9 3000 	ldr.w	r3, [r9]
   1c54a:	60e3      	str	r3, [r4, #12]
    chk_sum += ip4_addr_get_u32(&iphdr->src) & 0xFFFF;
   1c54c:	fa10 f083 	uxtah	r0, r0, r3
    chk_sum += ip4_addr_get_u32(&iphdr->src) >> 16;
   1c550:	eb00 4013 	add.w	r0, r0, r3, lsr #16
    chk_sum = (chk_sum >> 16) + (chk_sum & 0xFFFF);
   1c554:	b283      	uxth	r3, r0
   1c556:	eb03 4010 	add.w	r0, r3, r0, lsr #16
    chk_sum = (chk_sum >> 16) + chk_sum;
   1c55a:	eb00 4010 	add.w	r0, r0, r0, lsr #16
      iphdr->_chksum = (u16_t)chk_sum; /* network order */
   1c55e:	43c0      	mvns	r0, r0
   1c560:	8160      	strh	r0, [r4, #10]
  if (netif->mtu && (p->tot_len > netif->mtu)) {
   1c562:	8dab      	ldrh	r3, [r5, #44]	; 0x2c
   1c564:	b113      	cbz	r3, 1c56c <ip4_output_if_src+0xb4>
   1c566:	8932      	ldrh	r2, [r6, #8]
   1c568:	429a      	cmp	r2, r3
   1c56a:	d810      	bhi.n	1c58e <ip4_output_if_src+0xd6>
  return netif->output(netif, p, dest);
   1c56c:	463a      	mov	r2, r7
   1c56e:	4631      	mov	r1, r6
   1c570:	696b      	ldr	r3, [r5, #20]
   1c572:	4628      	mov	r0, r5
   1c574:	4798      	blx	r3
}
   1c576:	b005      	add	sp, #20
   1c578:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    if (p->len < IP_HLEN) {
   1c57c:	8943      	ldrh	r3, [r0, #10]
   1c57e:	2b13      	cmp	r3, #19
   1c580:	d910      	bls.n	1c5a4 <ip4_output_if_src+0xec>
    ip4_addr_copy(dest_addr, iphdr->dest);
   1c582:	6843      	ldr	r3, [r0, #4]
   1c584:	af04      	add	r7, sp, #16
   1c586:	691b      	ldr	r3, [r3, #16]
   1c588:	f847 3d04 	str.w	r3, [r7, #-4]!
   1c58c:	e7e9      	b.n	1c562 <ip4_output_if_src+0xaa>
    return ip4_frag(p, netif, dest);
   1c58e:	463a      	mov	r2, r7
   1c590:	4629      	mov	r1, r5
   1c592:	4630      	mov	r0, r6
   1c594:	f000 fadc 	bl	1cb50 <ip4_frag>
}
   1c598:	b005      	add	sp, #20
   1c59a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      ip4_addr_copy(iphdr->src, *IP4_ADDR_ANY4);
   1c59e:	4b03      	ldr	r3, [pc, #12]	; (1c5ac <ip4_output_if_src+0xf4>)
   1c5a0:	681b      	ldr	r3, [r3, #0]
   1c5a2:	e7d2      	b.n	1c54a <ip4_output_if_src+0x92>
      return ERR_BUF;
   1c5a4:	f06f 0001 	mvn.w	r0, #1
   1c5a8:	e7e5      	b.n	1c576 <ip4_output_if_src+0xbe>
   1c5aa:	bf00      	nop
   1c5ac:	0002d58c 	.word	0x0002d58c
   1c5b0:	2000294c 	.word	0x2000294c

0001c5b4 <ipfrag_free_pbuf_custom>:

/** Free-callback function to free a 'struct pbuf_custom_ref', called by
 * pbuf_free. */
static void
ipfrag_free_pbuf_custom(struct pbuf *p)
{
   1c5b4:	b510      	push	{r4, lr}
   1c5b6:	4604      	mov	r4, r0
  struct pbuf_custom_ref *pcr = (struct pbuf_custom_ref *)p;
  LWIP_ASSERT("pcr != NULL", pcr != NULL);
  LWIP_ASSERT("pcr == p", (void *)pcr == (void *)p);
  if (pcr->original != NULL) {
   1c5b8:	6940      	ldr	r0, [r0, #20]
   1c5ba:	b108      	cbz	r0, 1c5c0 <ipfrag_free_pbuf_custom+0xc>
    pbuf_free(pcr->original);
   1c5bc:	f7fb f916 	bl	177ec <pbuf_free>
  memp_free(MEMP_FRAG_PBUF, p);
   1c5c0:	4621      	mov	r1, r4
   1c5c2:	2006      	movs	r0, #6
  }
  ip_frag_free_pbuf_custom_ref(pcr);
}
   1c5c4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  memp_free(MEMP_FRAG_PBUF, p);
   1c5c8:	f7fa bdbe 	b.w	17148 <memp_free>

0001c5cc <ip_reass_remove_oldest_datagram>:
{
   1c5cc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1c5d0:	b083      	sub	sp, #12
  int pbufs_freed = 0, pbufs_freed_current;
   1c5d2:	2300      	movs	r3, #0
   1c5d4:	f8df a10c 	ldr.w	sl, [pc, #268]	; 1c6e4 <ip_reass_remove_oldest_datagram+0x118>
{
   1c5d8:	9101      	str	r1, [sp, #4]
   1c5da:	4681      	mov	r9, r0
  int pbufs_freed = 0, pbufs_freed_current;
   1c5dc:	9300      	str	r3, [sp, #0]
    r = reassdatagrams;
   1c5de:	f8da 3000 	ldr.w	r3, [sl]
    while (r != NULL) {
   1c5e2:	2b00      	cmp	r3, #0
   1c5e4:	d058      	beq.n	1c698 <ip_reass_remove_oldest_datagram+0xcc>
   1c5e6:	2700      	movs	r7, #0
   1c5e8:	46b8      	mov	r8, r7
   1c5ea:	4639      	mov	r1, r7
   1c5ec:	463d      	mov	r5, r7
   1c5ee:	f8d9 000c 	ldr.w	r0, [r9, #12]
   1c5f2:	e00b      	b.n	1c60c <ip_reass_remove_oldest_datagram+0x40>
        other_datagrams++;
   1c5f4:	3701      	adds	r7, #1
        if (oldest == NULL) {
   1c5f6:	b1cd      	cbz	r5, 1c62c <ip_reass_remove_oldest_datagram+0x60>
        } else if (r->timer <= oldest->timer) {
   1c5f8:	7fea      	ldrb	r2, [r5, #31]
   1c5fa:	7fdc      	ldrb	r4, [r3, #31]
   1c5fc:	4294      	cmp	r4, r2
   1c5fe:	bf9c      	itt	ls
   1c600:	4688      	movls	r8, r1
   1c602:	461d      	movls	r5, r3
      if (r->next != NULL) {
   1c604:	681c      	ldr	r4, [r3, #0]
   1c606:	4619      	mov	r1, r3
   1c608:	b1b4      	cbz	r4, 1c638 <ip_reass_remove_oldest_datagram+0x6c>
   1c60a:	4623      	mov	r3, r4
      if (!IP_ADDRESSES_AND_ID_MATCH(&r->iphdr, fraghdr)) {
   1c60c:	695a      	ldr	r2, [r3, #20]
   1c60e:	4282      	cmp	r2, r0
   1c610:	d1f0      	bne.n	1c5f4 <ip_reass_remove_oldest_datagram+0x28>
   1c612:	f8d9 2010 	ldr.w	r2, [r9, #16]
   1c616:	699c      	ldr	r4, [r3, #24]
   1c618:	4294      	cmp	r4, r2
   1c61a:	d1eb      	bne.n	1c5f4 <ip_reass_remove_oldest_datagram+0x28>
   1c61c:	899c      	ldrh	r4, [r3, #12]
   1c61e:	f8b9 2004 	ldrh.w	r2, [r9, #4]
   1c622:	4294      	cmp	r4, r2
   1c624:	d0ee      	beq.n	1c604 <ip_reass_remove_oldest_datagram+0x38>
        other_datagrams++;
   1c626:	3701      	adds	r7, #1
        if (oldest == NULL) {
   1c628:	2d00      	cmp	r5, #0
   1c62a:	d1e5      	bne.n	1c5f8 <ip_reass_remove_oldest_datagram+0x2c>
      if (r->next != NULL) {
   1c62c:	681c      	ldr	r4, [r3, #0]
   1c62e:	4688      	mov	r8, r1
   1c630:	461d      	mov	r5, r3
   1c632:	4619      	mov	r1, r3
   1c634:	2c00      	cmp	r4, #0
   1c636:	d1e8      	bne.n	1c60a <ip_reass_remove_oldest_datagram+0x3e>
    if (oldest != NULL) {
   1c638:	b345      	cbz	r5, 1c68c <ip_reass_remove_oldest_datagram+0xc0>
  iprh = (struct ip_reass_helper *)ipr->p->payload;
   1c63a:	686e      	ldr	r6, [r5, #4]
   1c63c:	6873      	ldr	r3, [r6, #4]
  if (iprh->start == 0) {
   1c63e:	889a      	ldrh	r2, [r3, #4]
   1c640:	b372      	cbz	r2, 1c6a0 <ip_reass_remove_oldest_datagram+0xd4>
    iprh = (struct ip_reass_helper *)p->payload;
   1c642:	6873      	ldr	r3, [r6, #4]
    clen = pbuf_clen(pcur);
   1c644:	4630      	mov	r0, r6
    p = iprh->next_pbuf;
   1c646:	f8d3 b000 	ldr.w	fp, [r3]
    clen = pbuf_clen(pcur);
   1c64a:	f7fb f905 	bl	17858 <pbuf_clen>
    pbufs_freed = (u16_t)(pbufs_freed + clen);
   1c64e:	4404      	add	r4, r0
    pbuf_free(pcur);
   1c650:	4630      	mov	r0, r6
  while (p != NULL) {
   1c652:	465e      	mov	r6, fp
    pbufs_freed = (u16_t)(pbufs_freed + clen);
   1c654:	b2a4      	uxth	r4, r4
    pbuf_free(pcur);
   1c656:	f7fb f8c9 	bl	177ec <pbuf_free>
  while (p != NULL) {
   1c65a:	2e00      	cmp	r6, #0
   1c65c:	d1f1      	bne.n	1c642 <ip_reass_remove_oldest_datagram+0x76>
  if (reassdatagrams == ipr) {
   1c65e:	f8da 3000 	ldr.w	r3, [sl]
   1c662:	429d      	cmp	r5, r3
    reassdatagrams = ipr->next;
   1c664:	682b      	ldr	r3, [r5, #0]
    prev->next = ipr->next;
   1c666:	bf18      	it	ne
   1c668:	f8c8 3000 	strne.w	r3, [r8]
  memp_free(MEMP_REASSDATA, ipr);
   1c66c:	4629      	mov	r1, r5
   1c66e:	f04f 0005 	mov.w	r0, #5
    reassdatagrams = ipr->next;
   1c672:	bf08      	it	eq
   1c674:	f8ca 3000 	streq.w	r3, [sl]
  memp_free(MEMP_REASSDATA, ipr);
   1c678:	f7fa fd66 	bl	17148 <memp_free>
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount - pbufs_freed);
   1c67c:	f8ba 3004 	ldrh.w	r3, [sl, #4]
      pbufs_freed += pbufs_freed_current;
   1c680:	9a00      	ldr	r2, [sp, #0]
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount - pbufs_freed);
   1c682:	1b1b      	subs	r3, r3, r4
      pbufs_freed += pbufs_freed_current;
   1c684:	4422      	add	r2, r4
   1c686:	9200      	str	r2, [sp, #0]
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount - pbufs_freed);
   1c688:	f8aa 3004 	strh.w	r3, [sl, #4]
  } while ((pbufs_freed < pbufs_needed) && (other_datagrams > 1));
   1c68c:	9b00      	ldr	r3, [sp, #0]
   1c68e:	9a01      	ldr	r2, [sp, #4]
   1c690:	4293      	cmp	r3, r2
   1c692:	da01      	bge.n	1c698 <ip_reass_remove_oldest_datagram+0xcc>
   1c694:	2f01      	cmp	r7, #1
   1c696:	dca2      	bgt.n	1c5de <ip_reass_remove_oldest_datagram+0x12>
}
   1c698:	9800      	ldr	r0, [sp, #0]
   1c69a:	b003      	add	sp, #12
   1c69c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    ipr->p = iprh->next_pbuf;
   1c6a0:	681a      	ldr	r2, [r3, #0]
   1c6a2:	606a      	str	r2, [r5, #4]
    SMEMCPY(p->payload, &ipr->iphdr, IP_HLEN);
   1c6a4:	462a      	mov	r2, r5
    icmp_time_exceeded(p, ICMP_TE_FRAG);
   1c6a6:	2101      	movs	r1, #1
    SMEMCPY(p->payload, &ipr->iphdr, IP_HLEN);
   1c6a8:	f852 0f08 	ldr.w	r0, [r2, #8]!
   1c6ac:	6894      	ldr	r4, [r2, #8]
   1c6ae:	f8d2 e004 	ldr.w	lr, [r2, #4]
   1c6b2:	f8d2 c00c 	ldr.w	ip, [r2, #12]
   1c6b6:	f8c3 c00c 	str.w	ip, [r3, #12]
   1c6ba:	609c      	str	r4, [r3, #8]
   1c6bc:	6018      	str	r0, [r3, #0]
   1c6be:	f8c3 e004 	str.w	lr, [r3, #4]
   1c6c2:	6910      	ldr	r0, [r2, #16]
   1c6c4:	6118      	str	r0, [r3, #16]
    icmp_time_exceeded(p, ICMP_TE_FRAG);
   1c6c6:	4630      	mov	r0, r6
   1c6c8:	f7ff fcd4 	bl	1c074 <icmp_time_exceeded>
    clen = pbuf_clen(p);
   1c6cc:	4630      	mov	r0, r6
   1c6ce:	f7fb f8c3 	bl	17858 <pbuf_clen>
   1c6d2:	4604      	mov	r4, r0
    pbuf_free(p);
   1c6d4:	4630      	mov	r0, r6
   1c6d6:	f7fb f889 	bl	177ec <pbuf_free>
   1c6da:	686e      	ldr	r6, [r5, #4]
  while (p != NULL) {
   1c6dc:	2e00      	cmp	r6, #0
   1c6de:	d1b0      	bne.n	1c642 <ip_reass_remove_oldest_datagram+0x76>
   1c6e0:	e7bd      	b.n	1c65e <ip_reass_remove_oldest_datagram+0x92>
   1c6e2:	bf00      	nop
   1c6e4:	20002950 	.word	0x20002950

0001c6e8 <ip_reass_tmr>:
{
   1c6e8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  r = reassdatagrams;
   1c6ec:	4f30      	ldr	r7, [pc, #192]	; (1c7b0 <ip_reass_tmr+0xc8>)
   1c6ee:	f8d7 a000 	ldr.w	sl, [r7]
  while (r != NULL) {
   1c6f2:	f1ba 0f00 	cmp.w	sl, #0
   1c6f6:	d00d      	beq.n	1c714 <ip_reass_tmr+0x2c>
   1c6f8:	f04f 0800 	mov.w	r8, #0
    if (r->timer > 0) {
   1c6fc:	f89a 401f 	ldrb.w	r4, [sl, #31]
   1c700:	b154      	cbz	r4, 1c718 <ip_reass_tmr+0x30>
      r->timer--;
   1c702:	3c01      	subs	r4, #1
   1c704:	f88a 401f 	strb.w	r4, [sl, #31]
   1c708:	46d0      	mov	r8, sl
      r = r->next;
   1c70a:	f8da a000 	ldr.w	sl, [sl]
  while (r != NULL) {
   1c70e:	f1ba 0f00 	cmp.w	sl, #0
   1c712:	d1f3      	bne.n	1c6fc <ip_reass_tmr+0x14>
   1c714:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  iprh = (struct ip_reass_helper *)ipr->p->payload;
   1c718:	f8da 5004 	ldr.w	r5, [sl, #4]
      r = r->next;
   1c71c:	f8da 9000 	ldr.w	r9, [sl]
  iprh = (struct ip_reass_helper *)ipr->p->payload;
   1c720:	686b      	ldr	r3, [r5, #4]
  if (iprh->start == 0) {
   1c722:	889a      	ldrh	r2, [r3, #4]
   1c724:	b312      	cbz	r2, 1c76c <ip_reass_tmr+0x84>
    iprh = (struct ip_reass_helper *)p->payload;
   1c726:	686b      	ldr	r3, [r5, #4]
    clen = pbuf_clen(pcur);
   1c728:	4628      	mov	r0, r5
    p = iprh->next_pbuf;
   1c72a:	681e      	ldr	r6, [r3, #0]
    clen = pbuf_clen(pcur);
   1c72c:	f7fb f894 	bl	17858 <pbuf_clen>
    pbufs_freed = (u16_t)(pbufs_freed + clen);
   1c730:	4404      	add	r4, r0
    pbuf_free(pcur);
   1c732:	4628      	mov	r0, r5
    pbufs_freed = (u16_t)(pbufs_freed + clen);
   1c734:	b2a4      	uxth	r4, r4
  while (p != NULL) {
   1c736:	4635      	mov	r5, r6
    pbuf_free(pcur);
   1c738:	f7fb f858 	bl	177ec <pbuf_free>
  while (p != NULL) {
   1c73c:	2e00      	cmp	r6, #0
   1c73e:	d1f2      	bne.n	1c726 <ip_reass_tmr+0x3e>
  if (reassdatagrams == ipr) {
   1c740:	683b      	ldr	r3, [r7, #0]
   1c742:	4553      	cmp	r3, sl
    reassdatagrams = ipr->next;
   1c744:	f8da 3000 	ldr.w	r3, [sl]
    prev->next = ipr->next;
   1c748:	bf18      	it	ne
   1c74a:	f8c8 3000 	strne.w	r3, [r8]
  memp_free(MEMP_REASSDATA, ipr);
   1c74e:	4651      	mov	r1, sl
   1c750:	f04f 0005 	mov.w	r0, #5
    reassdatagrams = ipr->next;
   1c754:	bf08      	it	eq
   1c756:	603b      	streq	r3, [r7, #0]
  memp_free(MEMP_REASSDATA, ipr);
   1c758:	f7fa fcf6 	bl	17148 <memp_free>
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount - pbufs_freed);
   1c75c:	88bb      	ldrh	r3, [r7, #4]
      r = r->next;
   1c75e:	46ca      	mov	sl, r9
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount - pbufs_freed);
   1c760:	1b1c      	subs	r4, r3, r4
   1c762:	80bc      	strh	r4, [r7, #4]
  while (r != NULL) {
   1c764:	f1ba 0f00 	cmp.w	sl, #0
   1c768:	d1c8      	bne.n	1c6fc <ip_reass_tmr+0x14>
   1c76a:	e7d3      	b.n	1c714 <ip_reass_tmr+0x2c>
    ipr->p = iprh->next_pbuf;
   1c76c:	681a      	ldr	r2, [r3, #0]
   1c76e:	f8ca 2004 	str.w	r2, [sl, #4]
    SMEMCPY(p->payload, &ipr->iphdr, IP_HLEN);
   1c772:	4652      	mov	r2, sl
    icmp_time_exceeded(p, ICMP_TE_FRAG);
   1c774:	2101      	movs	r1, #1
    SMEMCPY(p->payload, &ipr->iphdr, IP_HLEN);
   1c776:	f852 0f08 	ldr.w	r0, [r2, #8]!
   1c77a:	6894      	ldr	r4, [r2, #8]
   1c77c:	6856      	ldr	r6, [r2, #4]
   1c77e:	f8d2 e00c 	ldr.w	lr, [r2, #12]
   1c782:	f8c3 e00c 	str.w	lr, [r3, #12]
   1c786:	609c      	str	r4, [r3, #8]
   1c788:	6018      	str	r0, [r3, #0]
   1c78a:	605e      	str	r6, [r3, #4]
   1c78c:	6910      	ldr	r0, [r2, #16]
   1c78e:	6118      	str	r0, [r3, #16]
    icmp_time_exceeded(p, ICMP_TE_FRAG);
   1c790:	4628      	mov	r0, r5
   1c792:	f7ff fc6f 	bl	1c074 <icmp_time_exceeded>
    clen = pbuf_clen(p);
   1c796:	4628      	mov	r0, r5
   1c798:	f7fb f85e 	bl	17858 <pbuf_clen>
   1c79c:	4604      	mov	r4, r0
    pbuf_free(p);
   1c79e:	4628      	mov	r0, r5
   1c7a0:	f7fb f824 	bl	177ec <pbuf_free>
   1c7a4:	f8da 5004 	ldr.w	r5, [sl, #4]
  while (p != NULL) {
   1c7a8:	2d00      	cmp	r5, #0
   1c7aa:	d1bc      	bne.n	1c726 <ip_reass_tmr+0x3e>
   1c7ac:	e7c8      	b.n	1c740 <ip_reass_tmr+0x58>
   1c7ae:	bf00      	nop
   1c7b0:	20002950 	.word	0x20002950

0001c7b4 <ip4_reass>:
{
   1c7b4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  fraghdr = (struct ip_hdr *)p->payload;
   1c7b8:	f8d0 9004 	ldr.w	r9, [r0, #4]
  if (IPH_HL_BYTES(fraghdr) != IP_HLEN) {
   1c7bc:	f899 3000 	ldrb.w	r3, [r9]
   1c7c0:	f003 030f 	and.w	r3, r3, #15
   1c7c4:	2b05      	cmp	r3, #5
{
   1c7c6:	b083      	sub	sp, #12
   1c7c8:	4606      	mov	r6, r0
  if (IPH_HL_BYTES(fraghdr) != IP_HLEN) {
   1c7ca:	f040 80e2 	bne.w	1c992 <ip4_reass+0x1de>
  offset = IPH_OFFSET_BYTES(fraghdr);
   1c7ce:	f8b9 0006 	ldrh.w	r0, [r9, #6]
   1c7d2:	f7f6 ff91 	bl	136f8 <lwip_htons>
   1c7d6:	4605      	mov	r5, r0
  len = lwip_ntohs(IPH_LEN(fraghdr));
   1c7d8:	f8b9 0002 	ldrh.w	r0, [r9, #2]
   1c7dc:	f7f6 ff8c 	bl	136f8 <lwip_htons>
  hlen = IPH_HL_BYTES(fraghdr);
   1c7e0:	f899 3000 	ldrb.w	r3, [r9]
   1c7e4:	f003 030f 	and.w	r3, r3, #15
  if (hlen > len) {
   1c7e8:	009b      	lsls	r3, r3, #2
   1c7ea:	4298      	cmp	r0, r3
   1c7ec:	f0c0 80d1 	bcc.w	1c992 <ip4_reass+0x1de>
  len = (u16_t)(len - hlen);
   1c7f0:	1ac3      	subs	r3, r0, r3
   1c7f2:	b29b      	uxth	r3, r3
  if ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS) {
   1c7f4:	4fa1      	ldr	r7, [pc, #644]	; (1ca7c <ip4_reass+0x2c8>)
  len = (u16_t)(len - hlen);
   1c7f6:	9300      	str	r3, [sp, #0]
  clen = pbuf_clen(p);
   1c7f8:	4630      	mov	r0, r6
   1c7fa:	f7fb f82d 	bl	17858 <pbuf_clen>
  if ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS) {
   1c7fe:	88bb      	ldrh	r3, [r7, #4]
   1c800:	4403      	add	r3, r0
   1c802:	2b0a      	cmp	r3, #10
  clen = pbuf_clen(p);
   1c804:	4680      	mov	r8, r0
  if ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS) {
   1c806:	f300 80cd 	bgt.w	1c9a4 <ip4_reass+0x1f0>
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
   1c80a:	683c      	ldr	r4, [r7, #0]
   1c80c:	2c00      	cmp	r4, #0
   1c80e:	f000 8092 	beq.w	1c936 <ip4_reass+0x182>
   1c812:	f8d9 200c 	ldr.w	r2, [r9, #12]
   1c816:	e003      	b.n	1c820 <ip4_reass+0x6c>
   1c818:	6824      	ldr	r4, [r4, #0]
   1c81a:	2c00      	cmp	r4, #0
   1c81c:	f000 808b 	beq.w	1c936 <ip4_reass+0x182>
    if (IP_ADDRESSES_AND_ID_MATCH(&ipr->iphdr, fraghdr)) {
   1c820:	6963      	ldr	r3, [r4, #20]
   1c822:	4293      	cmp	r3, r2
   1c824:	d1f8      	bne.n	1c818 <ip4_reass+0x64>
   1c826:	f8d9 3010 	ldr.w	r3, [r9, #16]
   1c82a:	69a1      	ldr	r1, [r4, #24]
   1c82c:	4299      	cmp	r1, r3
   1c82e:	d1f3      	bne.n	1c818 <ip4_reass+0x64>
   1c830:	89a1      	ldrh	r1, [r4, #12]
   1c832:	f8b9 3004 	ldrh.w	r3, [r9, #4]
   1c836:	4299      	cmp	r1, r3
   1c838:	d1ee      	bne.n	1c818 <ip4_reass+0x64>
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
   1c83a:	f8b9 0006 	ldrh.w	r0, [r9, #6]
   1c83e:	f7f6 ff5b 	bl	136f8 <lwip_htons>
   1c842:	f3c0 000c 	ubfx	r0, r0, #0, #13
   1c846:	2800      	cmp	r0, #0
   1c848:	f000 80e0 	beq.w	1ca0c <ip4_reass+0x258>
  is_last = (IPH_OFFSET(fraghdr) & PP_NTOHS(IP_MF)) == 0;
   1c84c:	f8b9 3006 	ldrh.w	r3, [r9, #6]
  offset = IPH_OFFSET_BYTES(fraghdr);
   1c850:	f3c5 050c 	ubfx	r5, r5, #0, #13
  if (is_last) {
   1c854:	f013 0320 	ands.w	r3, r3, #32
  offset = IPH_OFFSET_BYTES(fraghdr);
   1c858:	ea4f 05c5 	mov.w	r5, r5, lsl #3
  if (is_last) {
   1c85c:	9301      	str	r3, [sp, #4]
   1c85e:	d10a      	bne.n	1c876 <ip4_reass+0xc2>
    u16_t datagram_len = (u16_t)(offset + len);
   1c860:	9b00      	ldr	r3, [sp, #0]
   1c862:	18eb      	adds	r3, r5, r3
   1c864:	b29b      	uxth	r3, r3
    if ((datagram_len < offset) || (datagram_len > (0xFFFF - IP_HLEN))) {
   1c866:	429d      	cmp	r5, r3
   1c868:	f200 8087 	bhi.w	1c97a <ip4_reass+0x1c6>
   1c86c:	f64f 72eb 	movw	r2, #65515	; 0xffeb
   1c870:	4293      	cmp	r3, r2
   1c872:	f200 8082 	bhi.w	1c97a <ip4_reass+0x1c6>
  fraghdr = (struct ip_hdr *)new_p->payload;
   1c876:	f8d6 9004 	ldr.w	r9, [r6, #4]
  len = lwip_ntohs(IPH_LEN(fraghdr));
   1c87a:	f8b9 0002 	ldrh.w	r0, [r9, #2]
   1c87e:	f7f6 ff3b 	bl	136f8 <lwip_htons>
  hlen = IPH_HL_BYTES(fraghdr);
   1c882:	f899 a000 	ldrb.w	sl, [r9]
   1c886:	f00a 0a0f 	and.w	sl, sl, #15
  if (hlen > len) {
   1c88a:	ea4f 0a8a 	mov.w	sl, sl, lsl #2
   1c88e:	4550      	cmp	r0, sl
   1c890:	d373      	bcc.n	1c97a <ip4_reass+0x1c6>
  len = (u16_t)(len - hlen);
   1c892:	eba0 0a0a 	sub.w	sl, r0, sl
  offset = IPH_OFFSET_BYTES(fraghdr);
   1c896:	f8b9 0006 	ldrh.w	r0, [r9, #6]
   1c89a:	f7f6 ff2d 	bl	136f8 <lwip_htons>
   1c89e:	f3c0 000c 	ubfx	r0, r0, #0, #13
   1c8a2:	00c0      	lsls	r0, r0, #3
  len = (u16_t)(len - hlen);
   1c8a4:	fa1f fa8a 	uxth.w	sl, sl
  iprh = (struct ip_reass_helper *)new_p->payload;
   1c8a8:	f8d6 b004 	ldr.w	fp, [r6, #4]
  iprh->end = (u16_t)(offset + len);
   1c8ac:	4482      	add	sl, r0
  iprh->next_pbuf = NULL;
   1c8ae:	2300      	movs	r3, #0
  iprh->end = (u16_t)(offset + len);
   1c8b0:	fa1f fa8a 	uxth.w	sl, sl
  iprh->next_pbuf = NULL;
   1c8b4:	f88b 3000 	strb.w	r3, [fp]
   1c8b8:	f88b 3001 	strb.w	r3, [fp, #1]
   1c8bc:	f88b 3002 	strb.w	r3, [fp, #2]
   1c8c0:	f88b 3003 	strb.w	r3, [fp, #3]
  if (iprh->end < offset) {
   1c8c4:	4550      	cmp	r0, sl
  iprh->end = (u16_t)(offset + len);
   1c8c6:	f8ab a006 	strh.w	sl, [fp, #6]
  iprh->start = offset;
   1c8ca:	f8ab 0004 	strh.w	r0, [fp, #4]
   1c8ce:	6863      	ldr	r3, [r4, #4]
  if (iprh->end < offset) {
   1c8d0:	d854      	bhi.n	1c97c <ip4_reass+0x1c8>
  for (q = ipr->p; q != NULL;) {
   1c8d2:	2b00      	cmp	r3, #0
   1c8d4:	d076      	beq.n	1c9c4 <ip4_reass+0x210>
    iprh_tmp = (struct ip_reass_helper *)q->payload;
   1c8d6:	f8d3 e004 	ldr.w	lr, [r3, #4]
    if (iprh->start < iprh_tmp->start) {
   1c8da:	f8be 2004 	ldrh.w	r2, [lr, #4]
   1c8de:	4290      	cmp	r0, r2
   1c8e0:	d36c      	bcc.n	1c9bc <ip4_reass+0x208>
    } else if (iprh->start == iprh_tmp->start) {
   1c8e2:	d056      	beq.n	1c992 <ip4_reass+0x1de>
    } else if (iprh->start < iprh_tmp->end) {
   1c8e4:	f8be c006 	ldrh.w	ip, [lr, #6]
   1c8e8:	4560      	cmp	r0, ip
   1c8ea:	d352      	bcc.n	1c992 <ip4_reass+0x1de>
   1c8ec:	f04f 0901 	mov.w	r9, #1
   1c8f0:	e00e      	b.n	1c910 <ip4_reass+0x15c>
    iprh_tmp = (struct ip_reass_helper *)q->payload;
   1c8f2:	6853      	ldr	r3, [r2, #4]
    if (iprh->start < iprh_tmp->start) {
   1c8f4:	8899      	ldrh	r1, [r3, #4]
   1c8f6:	4288      	cmp	r0, r1
   1c8f8:	f0c0 80a1 	bcc.w	1ca3e <ip4_reass+0x28a>
    } else if (iprh->start == iprh_tmp->start) {
   1c8fc:	d049      	beq.n	1c992 <ip4_reass+0x1de>
    } else if (iprh->start < iprh_tmp->end) {
   1c8fe:	88da      	ldrh	r2, [r3, #6]
   1c900:	4290      	cmp	r0, r2
   1c902:	d346      	bcc.n	1c992 <ip4_reass+0x1de>
          valid = 0;
   1c904:	4561      	cmp	r1, ip
   1c906:	bf18      	it	ne
   1c908:	f04f 0900 	movne.w	r9, #0
   1c90c:	469e      	mov	lr, r3
   1c90e:	4694      	mov	ip, r2
    q = iprh_tmp->next_pbuf;
   1c910:	f8de 2000 	ldr.w	r2, [lr]
  for (q = ipr->p; q != NULL;) {
   1c914:	2a00      	cmp	r2, #0
   1c916:	d1ec      	bne.n	1c8f2 <ip4_reass+0x13e>
      if (iprh_prev->end != iprh->start) {
   1c918:	4560      	cmp	r0, ip
      iprh_prev->next_pbuf = new_p;
   1c91a:	f8ce 6000 	str.w	r6, [lr]
      if (iprh_prev->end != iprh->start) {
   1c91e:	d054      	beq.n	1c9ca <ip4_reass+0x216>
  if (is_last || ((ipr->flags & IP_REASS_FLAG_LASTFRAG) != 0)) {
   1c920:	9b01      	ldr	r3, [sp, #4]
   1c922:	2b00      	cmp	r3, #0
   1c924:	d05f      	beq.n	1c9e6 <ip4_reass+0x232>
   1c926:	7fa3      	ldrb	r3, [r4, #30]
   1c928:	07db      	lsls	r3, r3, #31
   1c92a:	d45c      	bmi.n	1c9e6 <ip4_reass+0x232>
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount + clen);
   1c92c:	88bb      	ldrh	r3, [r7, #4]
   1c92e:	4498      	add	r8, r3
   1c930:	f8a7 8004 	strh.w	r8, [r7, #4]
   1c934:	e030      	b.n	1c998 <ip4_reass+0x1e4>
  ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
   1c936:	2005      	movs	r0, #5
   1c938:	f7fa fbf6 	bl	17128 <memp_malloc>
  if (ipr == NULL) {
   1c93c:	4604      	mov	r4, r0
   1c93e:	2800      	cmp	r0, #0
   1c940:	f000 8085 	beq.w	1ca4e <ip4_reass+0x29a>
  memset(ipr, 0, sizeof(struct ip_reassdata));
   1c944:	2220      	movs	r2, #32
   1c946:	2100      	movs	r1, #0
   1c948:	4620      	mov	r0, r4
   1c94a:	f00b fa87 	bl	27e5c <memset>
  ipr->next = reassdatagrams;
   1c94e:	683b      	ldr	r3, [r7, #0]
   1c950:	6023      	str	r3, [r4, #0]
  ipr->timer = IP_REASS_MAXAGE;
   1c952:	220f      	movs	r2, #15
   1c954:	77e2      	strb	r2, [r4, #31]
  SMEMCPY(&(ipr->iphdr), fraghdr, IP_HLEN);
   1c956:	f8d9 2000 	ldr.w	r2, [r9]
   1c95a:	f8d9 e004 	ldr.w	lr, [r9, #4]
   1c95e:	f8d9 0008 	ldr.w	r0, [r9, #8]
   1c962:	f8d9 100c 	ldr.w	r1, [r9, #12]
   1c966:	6161      	str	r1, [r4, #20]
   1c968:	60a2      	str	r2, [r4, #8]
   1c96a:	f8c4 e00c 	str.w	lr, [r4, #12]
   1c96e:	6120      	str	r0, [r4, #16]
   1c970:	f8d9 2010 	ldr.w	r2, [r9, #16]
  reassdatagrams = ipr;
   1c974:	603c      	str	r4, [r7, #0]
  SMEMCPY(&(ipr->iphdr), fraghdr, IP_HLEN);
   1c976:	61a2      	str	r2, [r4, #24]
   1c978:	e768      	b.n	1c84c <ip4_reass+0x98>
   1c97a:	6863      	ldr	r3, [r4, #4]
  if (ipr->p == NULL) {
   1c97c:	b94b      	cbnz	r3, 1c992 <ip4_reass+0x1de>
  if (reassdatagrams == ipr) {
   1c97e:	683a      	ldr	r2, [r7, #0]
   1c980:	4294      	cmp	r4, r2
   1c982:	f040 80ce 	bne.w	1cb22 <ip4_reass+0x36e>
    reassdatagrams = ipr->next;
   1c986:	6823      	ldr	r3, [r4, #0]
   1c988:	603b      	str	r3, [r7, #0]
  memp_free(MEMP_REASSDATA, ipr);
   1c98a:	4621      	mov	r1, r4
   1c98c:	2005      	movs	r0, #5
   1c98e:	f7fa fbdb 	bl	17148 <memp_free>
  pbuf_free(p);
   1c992:	4630      	mov	r0, r6
   1c994:	f7fa ff2a 	bl	177ec <pbuf_free>
  return NULL;
   1c998:	f04f 0800 	mov.w	r8, #0
}
   1c99c:	4640      	mov	r0, r8
   1c99e:	b003      	add	sp, #12
   1c9a0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
   1c9a4:	4601      	mov	r1, r0
   1c9a6:	4648      	mov	r0, r9
   1c9a8:	f7ff fe10 	bl	1c5cc <ip_reass_remove_oldest_datagram>
   1c9ac:	2800      	cmp	r0, #0
   1c9ae:	d0f0      	beq.n	1c992 <ip4_reass+0x1de>
        ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS))
   1c9b0:	88bb      	ldrh	r3, [r7, #4]
   1c9b2:	4443      	add	r3, r8
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
   1c9b4:	2b0a      	cmp	r3, #10
   1c9b6:	f77f af28 	ble.w	1c80a <ip4_reass+0x56>
   1c9ba:	e7ea      	b.n	1c992 <ip4_reass+0x1de>
        if (iprh->end > iprh_tmp->start) {
   1c9bc:	4592      	cmp	sl, r2
      iprh->next_pbuf = q;
   1c9be:	f8cb 3000 	str.w	r3, [fp]
        if (iprh->end > iprh_tmp->start) {
   1c9c2:	d8e6      	bhi.n	1c992 <ip4_reass+0x1de>
      ipr->p = new_p;
   1c9c4:	6066      	str	r6, [r4, #4]
   1c9c6:	f04f 0901 	mov.w	r9, #1
  if (is_last || ((ipr->flags & IP_REASS_FLAG_LASTFRAG) != 0)) {
   1c9ca:	9b01      	ldr	r3, [sp, #4]
   1c9cc:	b113      	cbz	r3, 1c9d4 <ip4_reass+0x220>
   1c9ce:	7fa3      	ldrb	r3, [r4, #30]
   1c9d0:	07da      	lsls	r2, r3, #31
   1c9d2:	d5ab      	bpl.n	1c92c <ip4_reass+0x178>
    if (valid) {
   1c9d4:	f1b9 0f00 	cmp.w	r9, #0
   1c9d8:	d005      	beq.n	1c9e6 <ip4_reass+0x232>
      if ((ipr->p == NULL) || (((struct ip_reass_helper *)ipr->p->payload)->start != 0)) {
   1c9da:	6863      	ldr	r3, [r4, #4]
   1c9dc:	b11b      	cbz	r3, 1c9e6 <ip4_reass+0x232>
   1c9de:	685b      	ldr	r3, [r3, #4]
   1c9e0:	889b      	ldrh	r3, [r3, #4]
   1c9e2:	2b00      	cmp	r3, #0
   1c9e4:	d041      	beq.n	1ca6a <ip4_reass+0x2b6>
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount + clen);
   1c9e6:	88bb      	ldrh	r3, [r7, #4]
   1c9e8:	4498      	add	r8, r3
  if (is_last) {
   1c9ea:	9b01      	ldr	r3, [sp, #4]
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount + clen);
   1c9ec:	f8a7 8004 	strh.w	r8, [r7, #4]
  if (is_last) {
   1c9f0:	2b00      	cmp	r3, #0
   1c9f2:	d1d1      	bne.n	1c998 <ip4_reass+0x1e4>
   1c9f4:	4699      	mov	r9, r3
    ipr->flags |= IP_REASS_FLAG_LASTFRAG;
   1c9f6:	7fa3      	ldrb	r3, [r4, #30]
    u16_t datagram_len = (u16_t)(offset + len);
   1c9f8:	9a00      	ldr	r2, [sp, #0]
    ipr->flags |= IP_REASS_FLAG_LASTFRAG;
   1c9fa:	f043 0301 	orr.w	r3, r3, #1
    u16_t datagram_len = (u16_t)(offset + len);
   1c9fe:	4415      	add	r5, r2
  if (valid == IP_REASS_VALIDATE_TELEGRAM_FINISHED) {
   1ca00:	f1b9 0f01 	cmp.w	r9, #1
    ipr->datagram_len = datagram_len;
   1ca04:	83a5      	strh	r5, [r4, #28]
    ipr->flags |= IP_REASS_FLAG_LASTFRAG;
   1ca06:	77a3      	strb	r3, [r4, #30]
  if (valid == IP_REASS_VALIDATE_TELEGRAM_FINISHED) {
   1ca08:	d04a      	beq.n	1caa0 <ip4_reass+0x2ec>
   1ca0a:	e7c5      	b.n	1c998 <ip4_reass+0x1e4>
        ((lwip_ntohs(IPH_OFFSET(&ipr->iphdr)) & IP_OFFMASK) != 0)) {
   1ca0c:	89e0      	ldrh	r0, [r4, #14]
   1ca0e:	f7f6 fe73 	bl	136f8 <lwip_htons>
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
   1ca12:	f3c0 000c 	ubfx	r0, r0, #0, #13
   1ca16:	2800      	cmp	r0, #0
   1ca18:	f43f af18 	beq.w	1c84c <ip4_reass+0x98>
      SMEMCPY(&ipr->iphdr, fraghdr, IP_HLEN);
   1ca1c:	f8d9 2000 	ldr.w	r2, [r9]
   1ca20:	f8d9 e004 	ldr.w	lr, [r9, #4]
   1ca24:	f8d9 0008 	ldr.w	r0, [r9, #8]
   1ca28:	f8d9 100c 	ldr.w	r1, [r9, #12]
   1ca2c:	6161      	str	r1, [r4, #20]
   1ca2e:	60a2      	str	r2, [r4, #8]
   1ca30:	f8c4 e00c 	str.w	lr, [r4, #12]
   1ca34:	6120      	str	r0, [r4, #16]
   1ca36:	f8d9 2010 	ldr.w	r2, [r9, #16]
   1ca3a:	61a2      	str	r2, [r4, #24]
   1ca3c:	e706      	b.n	1c84c <ip4_reass+0x98>
        if ((iprh->start < iprh_prev->end) || (iprh->end > iprh_tmp->start)) {
   1ca3e:	4560      	cmp	r0, ip
      iprh->next_pbuf = q;
   1ca40:	f8cb 2000 	str.w	r2, [fp]
        if ((iprh->start < iprh_prev->end) || (iprh->end > iprh_tmp->start)) {
   1ca44:	d3a5      	bcc.n	1c992 <ip4_reass+0x1de>
   1ca46:	458a      	cmp	sl, r1
   1ca48:	f67f af66 	bls.w	1c918 <ip4_reass+0x164>
   1ca4c:	e7a1      	b.n	1c992 <ip4_reass+0x1de>
    if (ip_reass_remove_oldest_datagram(fraghdr, clen) >= clen) {
   1ca4e:	4641      	mov	r1, r8
   1ca50:	4648      	mov	r0, r9
   1ca52:	f7ff fdbb 	bl	1c5cc <ip_reass_remove_oldest_datagram>
   1ca56:	4580      	cmp	r8, r0
   1ca58:	dc9b      	bgt.n	1c992 <ip4_reass+0x1de>
      ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
   1ca5a:	2005      	movs	r0, #5
   1ca5c:	f7fa fb64 	bl	17128 <memp_malloc>
    if (ipr == NULL)
   1ca60:	4604      	mov	r4, r0
   1ca62:	2800      	cmp	r0, #0
   1ca64:	f47f af6e 	bne.w	1c944 <ip4_reass+0x190>
   1ca68:	e793      	b.n	1c992 <ip4_reass+0x1de>
        q = iprh->next_pbuf;
   1ca6a:	f8db 3000 	ldr.w	r3, [fp]
        while (q != NULL) {
   1ca6e:	b183      	cbz	r3, 1ca92 <ip4_reass+0x2de>
          iprh = (struct ip_reass_helper *)q->payload;
   1ca70:	685b      	ldr	r3, [r3, #4]
          if (iprh_prev->end != iprh->start) {
   1ca72:	889a      	ldrh	r2, [r3, #4]
   1ca74:	4552      	cmp	r2, sl
   1ca76:	d009      	beq.n	1ca8c <ip4_reass+0x2d8>
   1ca78:	e7b5      	b.n	1c9e6 <ip4_reass+0x232>
   1ca7a:	bf00      	nop
   1ca7c:	20002950 	.word	0x20002950
          iprh = (struct ip_reass_helper *)q->payload;
   1ca80:	6852      	ldr	r2, [r2, #4]
          if (iprh_prev->end != iprh->start) {
   1ca82:	88d9      	ldrh	r1, [r3, #6]
   1ca84:	8893      	ldrh	r3, [r2, #4]
   1ca86:	4299      	cmp	r1, r3
   1ca88:	d1ad      	bne.n	1c9e6 <ip4_reass+0x232>
   1ca8a:	4613      	mov	r3, r2
          q = iprh->next_pbuf;
   1ca8c:	681a      	ldr	r2, [r3, #0]
        while (q != NULL) {
   1ca8e:	2a00      	cmp	r2, #0
   1ca90:	d1f6      	bne.n	1ca80 <ip4_reass+0x2cc>
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount + clen);
   1ca92:	88bb      	ldrh	r3, [r7, #4]
   1ca94:	4498      	add	r8, r3
  if (is_last) {
   1ca96:	9b01      	ldr	r3, [sp, #4]
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount + clen);
   1ca98:	f8a7 8004 	strh.w	r8, [r7, #4]
  if (is_last) {
   1ca9c:	2b00      	cmp	r3, #0
   1ca9e:	d0aa      	beq.n	1c9f6 <ip4_reass+0x242>
    SMEMCPY(fraghdr, &ipr->iphdr, IP_HLEN);
   1caa0:	4623      	mov	r3, r4
    r = ((struct ip_reass_helper *)ipr->p->payload)->next_pbuf;
   1caa2:	6861      	ldr	r1, [r4, #4]
    SMEMCPY(fraghdr, &ipr->iphdr, IP_HLEN);
   1caa4:	f853 2f08 	ldr.w	r2, [r3, #8]!
    r = ((struct ip_reass_helper *)ipr->p->payload)->next_pbuf;
   1caa8:	684e      	ldr	r6, [r1, #4]
    SMEMCPY(fraghdr, &ipr->iphdr, IP_HLEN);
   1caaa:	f8d3 c004 	ldr.w	ip, [r3, #4]
   1caae:	f8d3 e008 	ldr.w	lr, [r3, #8]
   1cab2:	68d9      	ldr	r1, [r3, #12]
    u16_t datagram_len = (u16_t)(ipr->datagram_len + IP_HLEN);
   1cab4:	8ba0      	ldrh	r0, [r4, #28]
    r = ((struct ip_reass_helper *)ipr->p->payload)->next_pbuf;
   1cab6:	6835      	ldr	r5, [r6, #0]
    SMEMCPY(fraghdr, &ipr->iphdr, IP_HLEN);
   1cab8:	f8c6 c004 	str.w	ip, [r6, #4]
   1cabc:	f8c6 e008 	str.w	lr, [r6, #8]
   1cac0:	60f1      	str	r1, [r6, #12]
   1cac2:	6032      	str	r2, [r6, #0]
   1cac4:	691a      	ldr	r2, [r3, #16]
   1cac6:	6132      	str	r2, [r6, #16]
    u16_t datagram_len = (u16_t)(ipr->datagram_len + IP_HLEN);
   1cac8:	3014      	adds	r0, #20
    IPH_LEN_SET(fraghdr, lwip_htons(datagram_len));
   1caca:	b280      	uxth	r0, r0
   1cacc:	f7f6 fe14 	bl	136f8 <lwip_htons>
    IPH_OFFSET_SET(fraghdr, 0);
   1cad0:	2300      	movs	r3, #0
    IPH_LEN_SET(fraghdr, lwip_htons(datagram_len));
   1cad2:	8070      	strh	r0, [r6, #2]
    IPH_OFFSET_SET(fraghdr, 0);
   1cad4:	71b3      	strb	r3, [r6, #6]
   1cad6:	71f3      	strb	r3, [r6, #7]
    IPH_CHKSUM_SET(fraghdr, 0);
   1cad8:	72b3      	strb	r3, [r6, #10]
   1cada:	72f3      	strb	r3, [r6, #11]
      IPH_CHKSUM_SET(fraghdr, inet_chksum(fraghdr, IP_HLEN));
   1cadc:	4630      	mov	r0, r6
   1cade:	2114      	movs	r1, #20
   1cae0:	f7fe ffca 	bl	1ba78 <inet_chksum>
    p = ipr->p;
   1cae4:	f8d4 8004 	ldr.w	r8, [r4, #4]
      IPH_CHKSUM_SET(fraghdr, inet_chksum(fraghdr, IP_HLEN));
   1cae8:	8170      	strh	r0, [r6, #10]
    while (r != NULL) {
   1caea:	b15d      	cbz	r5, 1cb04 <ip4_reass+0x350>
      iprh = (struct ip_reass_helper *)r->payload;
   1caec:	686e      	ldr	r6, [r5, #4]
      pbuf_remove_header(r, IP_HLEN);
   1caee:	2114      	movs	r1, #20
   1caf0:	4628      	mov	r0, r5
   1caf2:	f7fa fe2d 	bl	17750 <pbuf_remove_header>
      pbuf_cat(p, r);
   1caf6:	4629      	mov	r1, r5
   1caf8:	4640      	mov	r0, r8
   1cafa:	f7fa febf 	bl	1787c <pbuf_cat>
      r = iprh->next_pbuf;
   1cafe:	6835      	ldr	r5, [r6, #0]
    while (r != NULL) {
   1cb00:	2d00      	cmp	r5, #0
   1cb02:	d1f3      	bne.n	1caec <ip4_reass+0x338>
    if (ipr == reassdatagrams) {
   1cb04:	683a      	ldr	r2, [r7, #0]
   1cb06:	4294      	cmp	r4, r2
   1cb08:	d01f      	beq.n	1cb4a <ip4_reass+0x396>
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
   1cb0a:	b14a      	cbz	r2, 1cb20 <ip4_reass+0x36c>
        if (ipr_prev->next == ipr) {
   1cb0c:	6813      	ldr	r3, [r2, #0]
   1cb0e:	429c      	cmp	r4, r3
   1cb10:	d00a      	beq.n	1cb28 <ip4_reass+0x374>
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
   1cb12:	b12b      	cbz	r3, 1cb20 <ip4_reass+0x36c>
        if (ipr_prev->next == ipr) {
   1cb14:	681a      	ldr	r2, [r3, #0]
   1cb16:	4294      	cmp	r4, r2
   1cb18:	d007      	beq.n	1cb2a <ip4_reass+0x376>
   1cb1a:	4613      	mov	r3, r2
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
   1cb1c:	2b00      	cmp	r3, #0
   1cb1e:	d1f9      	bne.n	1cb14 <ip4_reass+0x360>
    prev->next = ipr->next;
   1cb20:	2300      	movs	r3, #0
   1cb22:	6822      	ldr	r2, [r4, #0]
   1cb24:	601a      	str	r2, [r3, #0]
   1cb26:	deff      	udf	#255	; 0xff
        if (ipr_prev->next == ipr) {
   1cb28:	4613      	mov	r3, r2
    prev->next = ipr->next;
   1cb2a:	6822      	ldr	r2, [r4, #0]
   1cb2c:	601a      	str	r2, [r3, #0]
  memp_free(MEMP_REASSDATA, ipr);
   1cb2e:	4621      	mov	r1, r4
   1cb30:	2005      	movs	r0, #5
   1cb32:	f7fa fb09 	bl	17148 <memp_free>
    clen = pbuf_clen(p);
   1cb36:	4640      	mov	r0, r8
   1cb38:	f7fa fe8e 	bl	17858 <pbuf_clen>
    ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount - clen);
   1cb3c:	88bb      	ldrh	r3, [r7, #4]
   1cb3e:	1a18      	subs	r0, r3, r0
   1cb40:	80b8      	strh	r0, [r7, #4]
}
   1cb42:	4640      	mov	r0, r8
   1cb44:	b003      	add	sp, #12
   1cb46:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    reassdatagrams = ipr->next;
   1cb4a:	6823      	ldr	r3, [r4, #0]
   1cb4c:	603b      	str	r3, [r7, #0]
   1cb4e:	e7ee      	b.n	1cb2e <ip4_reass+0x37a>

0001cb50 <ip4_frag>:
 *
 * @return ERR_OK if sent successfully, err_t otherwise
 */
err_t
ip4_frag(struct pbuf *p, struct netif *netif, const ip4_addr_t *dest)
{
   1cb50:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  int last;
  u16_t poff = IP_HLEN;
  u16_t tmp;
  int mf_set;

  original_iphdr = (struct ip_hdr *)p->payload;
   1cb54:	f8d0 b004 	ldr.w	fp, [r0, #4]
  const u16_t nfb = (u16_t)((netif->mtu - IP_HLEN) / 8);
   1cb58:	8d8b      	ldrh	r3, [r1, #44]	; 0x2c
  iphdr = original_iphdr;
  if (IPH_HL_BYTES(iphdr) != IP_HLEN) {
   1cb5a:	f89b 6000 	ldrb.w	r6, [fp]
{
   1cb5e:	b08d      	sub	sp, #52	; 0x34
  if (IPH_HL_BYTES(iphdr) != IP_HLEN) {
   1cb60:	f006 060f 	and.w	r6, r6, #15
{
   1cb64:	920a      	str	r2, [sp, #40]	; 0x28
  const u16_t nfb = (u16_t)((netif->mtu - IP_HLEN) / 8);
   1cb66:	f1b3 0214 	subs.w	r2, r3, #20
   1cb6a:	bf48      	it	mi
   1cb6c:	f1a3 020d 	submi.w	r2, r3, #13
  if (IPH_HL_BYTES(iphdr) != IP_HLEN) {
   1cb70:	00b6      	lsls	r6, r6, #2
  const u16_t nfb = (u16_t)((netif->mtu - IP_HLEN) / 8);
   1cb72:	f3c2 03cf 	ubfx	r3, r2, #3, #16
  if (IPH_HL_BYTES(iphdr) != IP_HLEN) {
   1cb76:	2e14      	cmp	r6, #20
{
   1cb78:	9106      	str	r1, [sp, #24]
   1cb7a:	4605      	mov	r5, r0
  const u16_t nfb = (u16_t)((netif->mtu - IP_HLEN) / 8);
   1cb7c:	9308      	str	r3, [sp, #32]
  if (IPH_HL_BYTES(iphdr) != IP_HLEN) {
   1cb7e:	f040 80b9 	bne.w	1ccf4 <ip4_frag+0x1a4>
    /* ip4_frag() does not support IP options */
    return ERR_VAL;
  }
  LWIP_ERROR("ip4_frag(): pbuf too short", p->len >= IP_HLEN, return ERR_VAL);
   1cb82:	8943      	ldrh	r3, [r0, #10]
   1cb84:	2b13      	cmp	r3, #19
   1cb86:	f240 80b5 	bls.w	1ccf4 <ip4_frag+0x1a4>

  /* Save original offset */
  tmp = lwip_ntohs(IPH_OFFSET(iphdr));
   1cb8a:	f8bb 0006 	ldrh.w	r0, [fp, #6]
   1cb8e:	f7f6 fdb3 	bl	136f8 <lwip_htons>
  ofo = tmp & IP_OFFMASK;
  /* already fragmented? if so, the last fragment we create must have MF, too */
  mf_set = tmp & IP_MF;

  left = (u16_t)(p->tot_len - IP_HLEN);
   1cb92:	f8b5 a008 	ldrh.w	sl, [r5, #8]
  ofo = tmp & IP_OFFMASK;
   1cb96:	f3c0 020c 	ubfx	r2, r0, #0, #13
  left = (u16_t)(p->tot_len - IP_HLEN);
   1cb9a:	f1aa 0a14 	sub.w	sl, sl, #20
   1cb9e:	fa1f f38a 	uxth.w	r3, sl
  ofo = tmp & IP_OFFMASK;
   1cba2:	9205      	str	r2, [sp, #20]
   1cba4:	f400 5200 	and.w	r2, r0, #8192	; 0x2000
  left = (u16_t)(p->tot_len - IP_HLEN);
   1cba8:	9303      	str	r3, [sp, #12]
   1cbaa:	920b      	str	r2, [sp, #44]	; 0x2c

  while (left) {
   1cbac:	2b00      	cmp	r3, #0
   1cbae:	f000 8093 	beq.w	1ccd8 <ip4_frag+0x188>
   1cbb2:	9b08      	ldr	r3, [sp, #32]
   1cbb4:	00db      	lsls	r3, r3, #3
   1cbb6:	b29b      	uxth	r3, r3
   1cbb8:	9309      	str	r3, [sp, #36]	; 0x24
   1cbba:	2400      	movs	r4, #0
    /* When not using a static buffer, create a chain of pbufs.
     * The first will be a PBUF_RAM holding the link and IP header.
     * The rest will be PBUF_REFs mirroring the pbuf chain to be fragged,
     * but limited to the size of an mtu.
     */
    rambuf = pbuf_alloc(PBUF_LINK, IP_HLEN, PBUF_RAM);
   1cbbc:	f44f 7220 	mov.w	r2, #640	; 0x280
   1cbc0:	2114      	movs	r1, #20
   1cbc2:	200e      	movs	r0, #14
   1cbc4:	f7fa fc66 	bl	17494 <pbuf_alloc>
    fragsize = LWIP_MIN(left, (u16_t)(nfb * 8));
   1cbc8:	9b09      	ldr	r3, [sp, #36]	; 0x24
   1cbca:	9a03      	ldr	r2, [sp, #12]
   1cbcc:	4293      	cmp	r3, r2
   1cbce:	bf28      	it	cs
   1cbd0:	4613      	movcs	r3, r2
    if (rambuf == NULL) {
   1cbd2:	4681      	mov	r9, r0
    fragsize = LWIP_MIN(left, (u16_t)(nfb * 8));
   1cbd4:	9304      	str	r3, [sp, #16]
    if (rambuf == NULL) {
   1cbd6:	2800      	cmp	r0, #0
   1cbd8:	f000 8091 	beq.w	1ccfe <ip4_frag+0x1ae>
      goto memerr;
    }
    LWIP_ASSERT("this needs a pbuf in one piece!",
                (rambuf->len >= (IP_HLEN)));
    SMEMCPY(rambuf->payload, original_iphdr, IP_HLEN);
   1cbdc:	6843      	ldr	r3, [r0, #4]
   1cbde:	f8db 2000 	ldr.w	r2, [fp]
   1cbe2:	f8db 0004 	ldr.w	r0, [fp, #4]
   1cbe6:	f8db 1008 	ldr.w	r1, [fp, #8]
   1cbea:	f8db 700c 	ldr.w	r7, [fp, #12]
   1cbee:	60df      	str	r7, [r3, #12]
   1cbf0:	601a      	str	r2, [r3, #0]
   1cbf2:	6058      	str	r0, [r3, #4]
   1cbf4:	6099      	str	r1, [r3, #8]
   1cbf6:	f8db 2010 	ldr.w	r2, [fp, #16]
   1cbfa:	611a      	str	r2, [r3, #16]
    iphdr = (struct ip_hdr *)rambuf->payload;

    left_to_copy = fragsize;
    while (left_to_copy) {
   1cbfc:	9b04      	ldr	r3, [sp, #16]
    iphdr = (struct ip_hdr *)rambuf->payload;
   1cbfe:	f8d9 2004 	ldr.w	r2, [r9, #4]
   1cc02:	9207      	str	r2, [sp, #28]
    while (left_to_copy) {
   1cc04:	b373      	cbz	r3, 1cc64 <ip4_frag+0x114>
   1cc06:	461f      	mov	r7, r3
   1cc08:	e001      	b.n	1cc0e <ip4_frag+0xbe>
       */
      pbuf_cat(rambuf, newpbuf);
      left_to_copy = (u16_t)(left_to_copy - newpbuflen);
      if (left_to_copy) {
        poff = 0;
        p = p->next;
   1cc0a:	682d      	ldr	r5, [r5, #0]
   1cc0c:	2600      	movs	r6, #0
      u16_t plen = (u16_t)(p->len - poff);
   1cc0e:	896c      	ldrh	r4, [r5, #10]
   1cc10:	1ba4      	subs	r4, r4, r6
      newpbuflen = LWIP_MIN(left_to_copy, plen);
   1cc12:	b2a4      	uxth	r4, r4
   1cc14:	42bc      	cmp	r4, r7
   1cc16:	bf28      	it	cs
   1cc18:	463c      	movcs	r4, r7
      if (!newpbuflen) {
   1cc1a:	2c00      	cmp	r4, #0
   1cc1c:	d0f5      	beq.n	1cc0a <ip4_frag+0xba>
  return (struct pbuf_custom_ref *)memp_malloc(MEMP_FRAG_PBUF);
   1cc1e:	2006      	movs	r0, #6
   1cc20:	f7fa fa82 	bl	17128 <memp_malloc>
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
   1cc24:	2241      	movs	r2, #65	; 0x41
      if (pcr == NULL) {
   1cc26:	4680      	mov	r8, r0
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
   1cc28:	4603      	mov	r3, r0
   1cc2a:	4621      	mov	r1, r4
      if (pcr == NULL) {
   1cc2c:	2800      	cmp	r0, #0
   1cc2e:	d059      	beq.n	1cce4 <ip4_frag+0x194>
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
   1cc30:	9401      	str	r4, [sp, #4]
   1cc32:	6868      	ldr	r0, [r5, #4]
   1cc34:	4430      	add	r0, r6
   1cc36:	9000      	str	r0, [sp, #0]
   1cc38:	2000      	movs	r0, #0
   1cc3a:	f7fa fcef 	bl	1761c <pbuf_alloced_custom>
      if (newpbuf == NULL) {
   1cc3e:	4682      	mov	sl, r0
   1cc40:	2800      	cmp	r0, #0
   1cc42:	d04b      	beq.n	1ccdc <ip4_frag+0x18c>
      pbuf_ref(p);
   1cc44:	4628      	mov	r0, r5
   1cc46:	f7fa fe13 	bl	17870 <pbuf_ref>
      left_to_copy = (u16_t)(left_to_copy - newpbuflen);
   1cc4a:	1b3f      	subs	r7, r7, r4
      pcr->pc.custom_free_function = ipfrag_free_pbuf_custom;
   1cc4c:	4b2d      	ldr	r3, [pc, #180]	; (1cd04 <ip4_frag+0x1b4>)
      pcr->original = p;
   1cc4e:	f8c8 5014 	str.w	r5, [r8, #20]
      pcr->pc.custom_free_function = ipfrag_free_pbuf_custom;
   1cc52:	f8c8 3010 	str.w	r3, [r8, #16]
      pbuf_cat(rambuf, newpbuf);
   1cc56:	4651      	mov	r1, sl
   1cc58:	4648      	mov	r0, r9
      left_to_copy = (u16_t)(left_to_copy - newpbuflen);
   1cc5a:	b2bf      	uxth	r7, r7
      pbuf_cat(rambuf, newpbuf);
   1cc5c:	f7fa fe0e 	bl	1787c <pbuf_cat>
      if (left_to_copy) {
   1cc60:	2f00      	cmp	r7, #0
   1cc62:	d1d2      	bne.n	1cc0a <ip4_frag+0xba>
    }
    poff = (u16_t)(poff + newpbuflen);
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */

    /* Correct header */
    last = (left <= netif->mtu - IP_HLEN);
   1cc64:	9b06      	ldr	r3, [sp, #24]

    /* Set new offset and MF flag */
    tmp = (IP_OFFMASK & (ofo));
   1cc66:	9a05      	ldr	r2, [sp, #20]
    last = (left <= netif->mtu - IP_HLEN);
   1cc68:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
    tmp = (IP_OFFMASK & (ofo));
   1cc6a:	f3c2 000c 	ubfx	r0, r2, #0, #13
    if (!last || mf_set) {
   1cc6e:	9a03      	ldr	r2, [sp, #12]
    last = (left <= netif->mtu - IP_HLEN);
   1cc70:	3b13      	subs	r3, #19
   1cc72:	4426      	add	r6, r4
    if (!last || mf_set) {
   1cc74:	4293      	cmp	r3, r2
   1cc76:	b2b6      	uxth	r6, r6
   1cc78:	dd01      	ble.n	1cc7e <ip4_frag+0x12e>
   1cc7a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   1cc7c:	b10b      	cbz	r3, 1cc82 <ip4_frag+0x132>
      /* the last fragment has MF set if the input frame had it */
      tmp = tmp | IP_MF;
   1cc7e:	f440 5000 	orr.w	r0, r0, #8192	; 0x2000
    }
    IPH_OFFSET_SET(iphdr, lwip_htons(tmp));
   1cc82:	f7f6 fd39 	bl	136f8 <lwip_htons>
    IPH_LEN_SET(iphdr, lwip_htons((u16_t)(fragsize + IP_HLEN)));
   1cc86:	9b04      	ldr	r3, [sp, #16]
    IPH_OFFSET_SET(iphdr, lwip_htons(tmp));
   1cc88:	9f07      	ldr	r7, [sp, #28]
    IPH_LEN_SET(iphdr, lwip_htons((u16_t)(fragsize + IP_HLEN)));
   1cc8a:	3314      	adds	r3, #20
    IPH_OFFSET_SET(iphdr, lwip_htons(tmp));
   1cc8c:	80f8      	strh	r0, [r7, #6]
    IPH_LEN_SET(iphdr, lwip_htons((u16_t)(fragsize + IP_HLEN)));
   1cc8e:	b298      	uxth	r0, r3
   1cc90:	f7f6 fd32 	bl	136f8 <lwip_htons>
    IPH_CHKSUM_SET(iphdr, 0);
   1cc94:	2300      	movs	r3, #0
    IPH_LEN_SET(iphdr, lwip_htons((u16_t)(fragsize + IP_HLEN)));
   1cc96:	8078      	strh	r0, [r7, #2]
    IPH_CHKSUM_SET(iphdr, 0);
   1cc98:	72bb      	strb	r3, [r7, #10]
   1cc9a:	72fb      	strb	r3, [r7, #11]
   1cc9c:	4638      	mov	r0, r7
#if CHECKSUM_GEN_IP
    IF__NETIF_CHECKSUM_ENABLED(netif, NETIF_CHECKSUM_GEN_IP) {
      IPH_CHKSUM_SET(iphdr, inet_chksum(iphdr, IP_HLEN));
   1cc9e:	2114      	movs	r1, #20
   1cca0:	f7fe feea 	bl	1ba78 <inet_chksum>
   1cca4:	46b8      	mov	r8, r7
#endif /* CHECKSUM_GEN_IP */

    /* No need for separate header pbuf - we allowed room for it in rambuf
     * when allocated.
     */
    netif->output(netif, rambuf, dest);
   1cca6:	9f06      	ldr	r7, [sp, #24]
   1cca8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   1ccaa:	697b      	ldr	r3, [r7, #20]
      IPH_CHKSUM_SET(iphdr, inet_chksum(iphdr, IP_HLEN));
   1ccac:	f8a8 000a 	strh.w	r0, [r8, #10]
    netif->output(netif, rambuf, dest);
   1ccb0:	4649      	mov	r1, r9
   1ccb2:	4638      	mov	r0, r7
   1ccb4:	4798      	blx	r3
     * recreate it next time round the loop. If we're lucky the hardware
     * will have already sent the packet, the free will really free, and
     * there will be zero memory penalty.
     */

    pbuf_free(rambuf);
   1ccb6:	4648      	mov	r0, r9
   1ccb8:	f7fa fd98 	bl	177ec <pbuf_free>
    left = (u16_t)(left - fragsize);
   1ccbc:	9a03      	ldr	r2, [sp, #12]
   1ccbe:	9b04      	ldr	r3, [sp, #16]
    ofo = (u16_t)(ofo + nfb);
   1ccc0:	9908      	ldr	r1, [sp, #32]
    left = (u16_t)(left - fragsize);
   1ccc2:	1ad3      	subs	r3, r2, r3
   1ccc4:	b29b      	uxth	r3, r3
   1ccc6:	461a      	mov	r2, r3
   1ccc8:	9303      	str	r3, [sp, #12]
    ofo = (u16_t)(ofo + nfb);
   1ccca:	9b05      	ldr	r3, [sp, #20]
   1cccc:	440b      	add	r3, r1
   1ccce:	b29b      	uxth	r3, r3
   1ccd0:	9305      	str	r3, [sp, #20]
  while (left) {
   1ccd2:	2a00      	cmp	r2, #0
   1ccd4:	f47f af72 	bne.w	1cbbc <ip4_frag+0x6c>
  }
  MIB2_STATS_INC(mib2.ipfragoks);
  return ERR_OK;
   1ccd8:	2000      	movs	r0, #0
   1ccda:	e008      	b.n	1ccee <ip4_frag+0x19e>
  memp_free(MEMP_FRAG_PBUF, p);
   1ccdc:	4641      	mov	r1, r8
   1ccde:	2006      	movs	r0, #6
   1cce0:	f7fa fa32 	bl	17148 <memp_free>
        pbuf_free(rambuf);
   1cce4:	4648      	mov	r0, r9
   1cce6:	f7fa fd81 	bl	177ec <pbuf_free>
memerr:
  MIB2_STATS_INC(mib2.ipfragfails);
  return ERR_MEM;
   1ccea:	f04f 30ff 	mov.w	r0, #4294967295
}
   1ccee:	b00d      	add	sp, #52	; 0x34
   1ccf0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    return ERR_VAL;
   1ccf4:	f06f 0005 	mvn.w	r0, #5
}
   1ccf8:	b00d      	add	sp, #52	; 0x34
   1ccfa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  return ERR_MEM;
   1ccfe:	f04f 30ff 	mov.w	r0, #4294967295
   1cd02:	e7f4      	b.n	1ccee <ip4_frag+0x19e>
   1cd04:	0001c5b5 	.word	0x0001c5b5

0001cd08 <arm_sin_q15>:
   1cd08:	0982      	lsrs	r2, r0, #6
   1cd0a:	490c      	ldr	r1, [pc, #48]	; (1cd3c <arm_sin_q15+0x34>)
   1cd0c:	f000 003f 	and.w	r0, r0, #63	; 0x3f
   1cd10:	0240      	lsls	r0, r0, #9
   1cd12:	f931 3012 	ldrsh.w	r3, [r1, r2, lsl #1]
   1cd16:	b410      	push	{r4}
   1cd18:	3201      	adds	r2, #1
   1cd1a:	f5c0 4400 	rsb	r4, r0, #32768	; 0x8000
   1cd1e:	fb03 f304 	mul.w	r3, r3, r4
   1cd22:	0c1b      	lsrs	r3, r3, #16
   1cd24:	f831 2012 	ldrh.w	r2, [r1, r2, lsl #1]
   1cd28:	f85d 4b04 	ldr.w	r4, [sp], #4
   1cd2c:	041b      	lsls	r3, r3, #16
   1cd2e:	fb10 3002 	smlabb	r0, r0, r2, r3
   1cd32:	f340 30cf 	sbfx	r0, r0, #15, #16
   1cd36:	f020 0001 	bic.w	r0, r0, #1
   1cd3a:	4770      	bx	lr
   1cd3c:	0002d748 	.word	0x0002d748

0001cd40 <_Znwj>:
   1cd40:	b510      	push	{r4, lr}
   1cd42:	2800      	cmp	r0, #0
   1cd44:	bf14      	ite	ne
   1cd46:	4604      	movne	r4, r0
   1cd48:	2401      	moveq	r4, #1
   1cd4a:	4620      	mov	r0, r4
   1cd4c:	f00a fc2e 	bl	275ac <malloc>
   1cd50:	b100      	cbz	r0, 1cd54 <_Znwj+0x14>
   1cd52:	bd10      	pop	{r4, pc}
   1cd54:	f000 f9c8 	bl	1d0e8 <_ZSt15get_new_handlerv>
   1cd58:	b108      	cbz	r0, 1cd5e <_Znwj+0x1e>
   1cd5a:	4780      	blx	r0
   1cd5c:	e7f5      	b.n	1cd4a <_Znwj+0xa>
   1cd5e:	2004      	movs	r0, #4
   1cd60:	f000 f8a2 	bl	1cea8 <__cxa_allocate_exception>
   1cd64:	4b02      	ldr	r3, [pc, #8]	; (1cd70 <_Znwj+0x30>)
   1cd66:	6003      	str	r3, [r0, #0]
   1cd68:	4a02      	ldr	r2, [pc, #8]	; (1cd74 <_Znwj+0x34>)
   1cd6a:	4903      	ldr	r1, [pc, #12]	; (1cd78 <_Znwj+0x38>)
   1cd6c:	f000 f946 	bl	1cffc <__cxa_throw>
   1cd70:	0002db9c 	.word	0x0002db9c
   1cd74:	0001cd99 	.word	0x0001cd99
   1cd78:	0002db78 	.word	0x0002db78

0001cd7c <__cxa_pure_virtual>:
   1cd7c:	b508      	push	{r3, lr}
   1cd7e:	221b      	movs	r2, #27
   1cd80:	4902      	ldr	r1, [pc, #8]	; (1cd8c <__cxa_pure_virtual+0x10>)
   1cd82:	2002      	movs	r0, #2
   1cd84:	f00d fb36 	bl	2a3f4 <write>
   1cd88:	f000 f8ee 	bl	1cf68 <_ZSt9terminatev>
   1cd8c:	0002db4c 	.word	0x0002db4c

0001cd90 <_ZNKSt9bad_alloc4whatEv>:
   1cd90:	4800      	ldr	r0, [pc, #0]	; (1cd94 <_ZNKSt9bad_alloc4whatEv+0x4>)
   1cd92:	4770      	bx	lr
   1cd94:	0002db68 	.word	0x0002db68

0001cd98 <_ZNSt9bad_allocD1Ev>:
   1cd98:	b510      	push	{r4, lr}
   1cd9a:	4b03      	ldr	r3, [pc, #12]	; (1cda8 <_ZNSt9bad_allocD1Ev+0x10>)
   1cd9c:	6003      	str	r3, [r0, #0]
   1cd9e:	4604      	mov	r4, r0
   1cda0:	f000 f8be 	bl	1cf20 <_ZNSt9exceptionD1Ev>
   1cda4:	4620      	mov	r0, r4
   1cda6:	bd10      	pop	{r4, pc}
   1cda8:	0002db9c 	.word	0x0002db9c

0001cdac <_ZNSt9bad_allocD0Ev>:
   1cdac:	b510      	push	{r4, lr}
   1cdae:	4b05      	ldr	r3, [pc, #20]	; (1cdc4 <_ZNSt9bad_allocD0Ev+0x18>)
   1cdb0:	6003      	str	r3, [r0, #0]
   1cdb2:	4604      	mov	r4, r0
   1cdb4:	f000 f8b4 	bl	1cf20 <_ZNSt9exceptionD1Ev>
   1cdb8:	4620      	mov	r0, r4
   1cdba:	2104      	movs	r1, #4
   1cdbc:	f000 f804 	bl	1cdc8 <_ZdlPvj>
   1cdc0:	4620      	mov	r0, r4
   1cdc2:	bd10      	pop	{r4, pc}
   1cdc4:	0002db9c 	.word	0x0002db9c

0001cdc8 <_ZdlPvj>:
   1cdc8:	f000 bac0 	b.w	1d34c <_ZdlPv>

0001cdcc <_ZN12_GLOBAL__N_14pool4freeEPv.constprop.4>:
   1cdcc:	b4f0      	push	{r4, r5, r6, r7}
   1cdce:	4c1b      	ldr	r4, [pc, #108]	; (1ce3c <_ZN12_GLOBAL__N_14pool4freeEPv.constprop.4+0x70>)
   1cdd0:	f850 7c08 	ldr.w	r7, [r0, #-8]
   1cdd4:	6861      	ldr	r1, [r4, #4]
   1cdd6:	f1a0 0608 	sub.w	r6, r0, #8
   1cdda:	b1c9      	cbz	r1, 1ce10 <_ZN12_GLOBAL__N_14pool4freeEPv.constprop.4+0x44>
   1cddc:	19f5      	adds	r5, r6, r7
   1cdde:	42a9      	cmp	r1, r5
   1cde0:	d01b      	beq.n	1ce1a <_ZN12_GLOBAL__N_14pool4freeEPv.constprop.4+0x4e>
   1cde2:	684a      	ldr	r2, [r1, #4]
   1cde4:	b32a      	cbz	r2, 1ce32 <_ZN12_GLOBAL__N_14pool4freeEPv.constprop.4+0x66>
   1cde6:	4295      	cmp	r5, r2
   1cde8:	d303      	bcc.n	1cdf2 <_ZN12_GLOBAL__N_14pool4freeEPv.constprop.4+0x26>
   1cdea:	e022      	b.n	1ce32 <_ZN12_GLOBAL__N_14pool4freeEPv.constprop.4+0x66>
   1cdec:	429d      	cmp	r5, r3
   1cdee:	d205      	bcs.n	1cdfc <_ZN12_GLOBAL__N_14pool4freeEPv.constprop.4+0x30>
   1cdf0:	461a      	mov	r2, r3
   1cdf2:	6853      	ldr	r3, [r2, #4]
   1cdf4:	1d0c      	adds	r4, r1, #4
   1cdf6:	4611      	mov	r1, r2
   1cdf8:	2b00      	cmp	r3, #0
   1cdfa:	d1f7      	bne.n	1cdec <_ZN12_GLOBAL__N_14pool4freeEPv.constprop.4+0x20>
   1cdfc:	6811      	ldr	r1, [r2, #0]
   1cdfe:	1855      	adds	r5, r2, r1
   1ce00:	42ae      	cmp	r6, r5
   1ce02:	d013      	beq.n	1ce2c <_ZN12_GLOBAL__N_14pool4freeEPv.constprop.4+0x60>
   1ce04:	f840 3c04 	str.w	r3, [r0, #-4]
   1ce08:	6823      	ldr	r3, [r4, #0]
   1ce0a:	605e      	str	r6, [r3, #4]
   1ce0c:	bcf0      	pop	{r4, r5, r6, r7}
   1ce0e:	4770      	bx	lr
   1ce10:	f840 1c04 	str.w	r1, [r0, #-4]
   1ce14:	6066      	str	r6, [r4, #4]
   1ce16:	bcf0      	pop	{r4, r5, r6, r7}
   1ce18:	4770      	bx	lr
   1ce1a:	680b      	ldr	r3, [r1, #0]
   1ce1c:	684a      	ldr	r2, [r1, #4]
   1ce1e:	f840 2c04 	str.w	r2, [r0, #-4]
   1ce22:	441f      	add	r7, r3
   1ce24:	f840 7c08 	str.w	r7, [r0, #-8]
   1ce28:	6066      	str	r6, [r4, #4]
   1ce2a:	e7ef      	b.n	1ce0c <_ZN12_GLOBAL__N_14pool4freeEPv.constprop.4+0x40>
   1ce2c:	440f      	add	r7, r1
   1ce2e:	6017      	str	r7, [r2, #0]
   1ce30:	e7ec      	b.n	1ce0c <_ZN12_GLOBAL__N_14pool4freeEPv.constprop.4+0x40>
   1ce32:	4613      	mov	r3, r2
   1ce34:	3404      	adds	r4, #4
   1ce36:	460a      	mov	r2, r1
   1ce38:	e7e0      	b.n	1cdfc <_ZN12_GLOBAL__N_14pool4freeEPv.constprop.4+0x30>
   1ce3a:	bf00      	nop
   1ce3c:	20002958 	.word	0x20002958

0001ce40 <_ZN12_GLOBAL__N_14pool8allocateEj.constprop.5>:
   1ce40:	b430      	push	{r4, r5}
   1ce42:	4c18      	ldr	r4, [pc, #96]	; (1cea4 <_ZN12_GLOBAL__N_14pool8allocateEj.constprop.5+0x64>)
   1ce44:	f100 0108 	add.w	r1, r0, #8
   1ce48:	6863      	ldr	r3, [r4, #4]
   1ce4a:	2908      	cmp	r1, #8
   1ce4c:	bf38      	it	cc
   1ce4e:	2108      	movcc	r1, #8
   1ce50:	b313      	cbz	r3, 1ce98 <_ZN12_GLOBAL__N_14pool8allocateEj.constprop.5+0x58>
   1ce52:	3107      	adds	r1, #7
   1ce54:	681a      	ldr	r2, [r3, #0]
   1ce56:	f021 0107 	bic.w	r1, r1, #7
   1ce5a:	4291      	cmp	r1, r2
   1ce5c:	d804      	bhi.n	1ce68 <_ZN12_GLOBAL__N_14pool8allocateEj.constprop.5+0x28>
   1ce5e:	e01d      	b.n	1ce9c <_ZN12_GLOBAL__N_14pool8allocateEj.constprop.5+0x5c>
   1ce60:	6802      	ldr	r2, [r0, #0]
   1ce62:	4291      	cmp	r1, r2
   1ce64:	d905      	bls.n	1ce72 <_ZN12_GLOBAL__N_14pool8allocateEj.constprop.5+0x32>
   1ce66:	4603      	mov	r3, r0
   1ce68:	6858      	ldr	r0, [r3, #4]
   1ce6a:	2800      	cmp	r0, #0
   1ce6c:	d1f8      	bne.n	1ce60 <_ZN12_GLOBAL__N_14pool8allocateEj.constprop.5+0x20>
   1ce6e:	bc30      	pop	{r4, r5}
   1ce70:	4770      	bx	lr
   1ce72:	3304      	adds	r3, #4
   1ce74:	1a52      	subs	r2, r2, r1
   1ce76:	2a07      	cmp	r2, #7
   1ce78:	d90a      	bls.n	1ce90 <_ZN12_GLOBAL__N_14pool8allocateEj.constprop.5+0x50>
   1ce7a:	1845      	adds	r5, r0, r1
   1ce7c:	6844      	ldr	r4, [r0, #4]
   1ce7e:	606c      	str	r4, [r5, #4]
   1ce80:	681c      	ldr	r4, [r3, #0]
   1ce82:	5042      	str	r2, [r0, r1]
   1ce84:	6021      	str	r1, [r4, #0]
   1ce86:	601d      	str	r5, [r3, #0]
   1ce88:	f104 0008 	add.w	r0, r4, #8
   1ce8c:	bc30      	pop	{r4, r5}
   1ce8e:	4770      	bx	lr
   1ce90:	6842      	ldr	r2, [r0, #4]
   1ce92:	601a      	str	r2, [r3, #0]
   1ce94:	4604      	mov	r4, r0
   1ce96:	e7f7      	b.n	1ce88 <_ZN12_GLOBAL__N_14pool8allocateEj.constprop.5+0x48>
   1ce98:	4618      	mov	r0, r3
   1ce9a:	e7e8      	b.n	1ce6e <_ZN12_GLOBAL__N_14pool8allocateEj.constprop.5+0x2e>
   1ce9c:	4618      	mov	r0, r3
   1ce9e:	1d23      	adds	r3, r4, #4
   1cea0:	e7e8      	b.n	1ce74 <_ZN12_GLOBAL__N_14pool8allocateEj.constprop.5+0x34>
   1cea2:	bf00      	nop
   1cea4:	20002958 	.word	0x20002958

0001cea8 <__cxa_allocate_exception>:
   1cea8:	b538      	push	{r3, r4, r5, lr}
   1ceaa:	f100 0580 	add.w	r5, r0, #128	; 0x80
   1ceae:	4628      	mov	r0, r5
   1ceb0:	f00a fb7c 	bl	275ac <malloc>
   1ceb4:	4604      	mov	r4, r0
   1ceb6:	b138      	cbz	r0, 1cec8 <__cxa_allocate_exception+0x20>
   1ceb8:	2280      	movs	r2, #128	; 0x80
   1ceba:	2100      	movs	r1, #0
   1cebc:	4620      	mov	r0, r4
   1cebe:	f00a ffcd 	bl	27e5c <memset>
   1cec2:	f104 0080 	add.w	r0, r4, #128	; 0x80
   1cec6:	bd38      	pop	{r3, r4, r5, pc}
   1cec8:	4628      	mov	r0, r5
   1ceca:	f7ff ffb9 	bl	1ce40 <_ZN12_GLOBAL__N_14pool8allocateEj.constprop.5>
   1cece:	4604      	mov	r4, r0
   1ced0:	2800      	cmp	r0, #0
   1ced2:	d1f1      	bne.n	1ceb8 <__cxa_allocate_exception+0x10>
   1ced4:	f000 f848 	bl	1cf68 <_ZSt9terminatev>

0001ced8 <__cxa_free_exception>:
   1ced8:	4a06      	ldr	r2, [pc, #24]	; (1cef4 <__cxa_free_exception+0x1c>)
   1ceda:	6893      	ldr	r3, [r2, #8]
   1cedc:	3880      	subs	r0, #128	; 0x80
   1cede:	4298      	cmp	r0, r3
   1cee0:	d905      	bls.n	1ceee <__cxa_free_exception+0x16>
   1cee2:	68d2      	ldr	r2, [r2, #12]
   1cee4:	4413      	add	r3, r2
   1cee6:	4298      	cmp	r0, r3
   1cee8:	d201      	bcs.n	1ceee <__cxa_free_exception+0x16>
   1ceea:	f7ff bf6f 	b.w	1cdcc <_ZN12_GLOBAL__N_14pool4freeEPv.constprop.4>
   1ceee:	f00a bb65 	b.w	275bc <free>
   1cef2:	bf00      	nop
   1cef4:	20002958 	.word	0x20002958

0001cef8 <_GLOBAL__sub_I__ZN9__gnu_cxx9__freeresEv>:
   1cef8:	b538      	push	{r3, r4, r5, lr}
   1cefa:	4c08      	ldr	r4, [pc, #32]	; (1cf1c <_GLOBAL__sub_I__ZN9__gnu_cxx9__freeresEv+0x24>)
   1cefc:	f44f 651e 	mov.w	r5, #2528	; 0x9e0
   1cf00:	4628      	mov	r0, r5
   1cf02:	60e5      	str	r5, [r4, #12]
   1cf04:	f00a fb52 	bl	275ac <malloc>
   1cf08:	60a0      	str	r0, [r4, #8]
   1cf0a:	b120      	cbz	r0, 1cf16 <_GLOBAL__sub_I__ZN9__gnu_cxx9__freeresEv+0x1e>
   1cf0c:	2300      	movs	r3, #0
   1cf0e:	6060      	str	r0, [r4, #4]
   1cf10:	6005      	str	r5, [r0, #0]
   1cf12:	6043      	str	r3, [r0, #4]
   1cf14:	bd38      	pop	{r3, r4, r5, pc}
   1cf16:	60e0      	str	r0, [r4, #12]
   1cf18:	6060      	str	r0, [r4, #4]
   1cf1a:	bd38      	pop	{r3, r4, r5, pc}
   1cf1c:	20002958 	.word	0x20002958

0001cf20 <_ZNSt9exceptionD1Ev>:
   1cf20:	4770      	bx	lr
   1cf22:	bf00      	nop

0001cf24 <_ZNSt13bad_exceptionD1Ev>:
   1cf24:	4770      	bx	lr
   1cf26:	bf00      	nop

0001cf28 <_ZGTtNKSt13bad_exception4whatEv>:
   1cf28:	4800      	ldr	r0, [pc, #0]	; (1cf2c <_ZGTtNKSt13bad_exception4whatEv+0x4>)
   1cf2a:	4770      	bx	lr
   1cf2c:	0002dba8 	.word	0x0002dba8

0001cf30 <_ZNSt13bad_exceptionD0Ev>:
   1cf30:	b510      	push	{r4, lr}
   1cf32:	2104      	movs	r1, #4
   1cf34:	4604      	mov	r4, r0
   1cf36:	f7ff ff47 	bl	1cdc8 <_ZdlPvj>
   1cf3a:	4620      	mov	r0, r4
   1cf3c:	bd10      	pop	{r4, pc}
   1cf3e:	bf00      	nop

0001cf40 <_ZN10__cxxabiv111__terminateEPFvvE>:
   1cf40:	b508      	push	{r3, lr}
   1cf42:	4780      	blx	r0
   1cf44:	f00a f896 	bl	27074 <abort>
   1cf48:	f000 fb6c 	bl	1d624 <__cxa_begin_catch>
   1cf4c:	f00a f892 	bl	27074 <abort>
   1cf50:	460d      	mov	r5, r1
   1cf52:	4604      	mov	r4, r0
   1cf54:	f000 fba4 	bl	1d6a0 <__cxa_end_catch>
   1cf58:	3501      	adds	r5, #1
   1cf5a:	d001      	beq.n	1cf60 <_ZN10__cxxabiv111__terminateEPFvvE+0x20>
   1cf5c:	f000 f9f8 	bl	1d350 <__cxa_end_cleanup>
   1cf60:	4620      	mov	r0, r4
   1cf62:	f000 faef 	bl	1d544 <__cxa_call_unexpected>
   1cf66:	bf00      	nop

0001cf68 <_ZSt9terminatev>:
   1cf68:	b508      	push	{r3, lr}
   1cf6a:	4b03      	ldr	r3, [pc, #12]	; (1cf78 <_ZSt9terminatev+0x10>)
   1cf6c:	6818      	ldr	r0, [r3, #0]
   1cf6e:	f3bf 8f5b 	dmb	ish
   1cf72:	f7ff ffe5 	bl	1cf40 <_ZN10__cxxabiv111__terminateEPFvvE>
   1cf76:	bf00      	nop
   1cf78:	20000100 	.word	0x20000100

0001cf7c <_ZN10__cxxabiv112__unexpectedEPFvvE>:
   1cf7c:	b508      	push	{r3, lr}
   1cf7e:	4780      	blx	r0
   1cf80:	f7ff fff2 	bl	1cf68 <_ZSt9terminatev>

0001cf84 <_ZSt10unexpectedv>:
   1cf84:	b508      	push	{r3, lr}
   1cf86:	4b03      	ldr	r3, [pc, #12]	; (1cf94 <_ZSt10unexpectedv+0x10>)
   1cf88:	6818      	ldr	r0, [r3, #0]
   1cf8a:	f3bf 8f5b 	dmb	ish
   1cf8e:	f7ff fff5 	bl	1cf7c <_ZN10__cxxabiv112__unexpectedEPFvvE>
   1cf92:	bf00      	nop
   1cf94:	200000fc 	.word	0x200000fc

0001cf98 <_ZSt13get_terminatev>:
   1cf98:	4b02      	ldr	r3, [pc, #8]	; (1cfa4 <_ZSt13get_terminatev+0xc>)
   1cf9a:	6818      	ldr	r0, [r3, #0]
   1cf9c:	f3bf 8f5b 	dmb	ish
   1cfa0:	4770      	bx	lr
   1cfa2:	bf00      	nop
   1cfa4:	20000100 	.word	0x20000100

0001cfa8 <_ZSt14get_unexpectedv>:
   1cfa8:	4b02      	ldr	r3, [pc, #8]	; (1cfb4 <_ZSt14get_unexpectedv+0xc>)
   1cfaa:	6818      	ldr	r0, [r3, #0]
   1cfac:	f3bf 8f5b 	dmb	ish
   1cfb0:	4770      	bx	lr
   1cfb2:	bf00      	nop
   1cfb4:	200000fc 	.word	0x200000fc

0001cfb8 <_ZL23__gxx_exception_cleanup19_Unwind_Reason_CodeP21_Unwind_Control_Block>:
   1cfb8:	2801      	cmp	r0, #1
   1cfba:	b510      	push	{r4, lr}
   1cfbc:	d81a      	bhi.n	1cff4 <_ZL23__gxx_exception_cleanup19_Unwind_Reason_CodeP21_Unwind_Control_Block+0x3c>
   1cfbe:	f3bf 8f5b 	dmb	ish
   1cfc2:	f1a1 0328 	sub.w	r3, r1, #40	; 0x28
   1cfc6:	e853 2f00 	ldrex	r2, [r3]
   1cfca:	3a01      	subs	r2, #1
   1cfcc:	e843 2000 	strex	r0, r2, [r3]
   1cfd0:	2800      	cmp	r0, #0
   1cfd2:	d1f8      	bne.n	1cfc6 <_ZL23__gxx_exception_cleanup19_Unwind_Reason_CodeP21_Unwind_Control_Block+0xe>
   1cfd4:	f3bf 8f5b 	dmb	ish
   1cfd8:	b95a      	cbnz	r2, 1cff2 <_ZL23__gxx_exception_cleanup19_Unwind_Reason_CodeP21_Unwind_Control_Block+0x3a>
   1cfda:	f851 3c1c 	ldr.w	r3, [r1, #-28]
   1cfde:	f101 0458 	add.w	r4, r1, #88	; 0x58
   1cfe2:	b10b      	cbz	r3, 1cfe8 <_ZL23__gxx_exception_cleanup19_Unwind_Reason_CodeP21_Unwind_Control_Block+0x30>
   1cfe4:	4620      	mov	r0, r4
   1cfe6:	4798      	blx	r3
   1cfe8:	4620      	mov	r0, r4
   1cfea:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   1cfee:	f7ff bf73 	b.w	1ced8 <__cxa_free_exception>
   1cff2:	bd10      	pop	{r4, pc}
   1cff4:	f851 0c14 	ldr.w	r0, [r1, #-20]
   1cff8:	f7ff ffa2 	bl	1cf40 <_ZN10__cxxabiv111__terminateEPFvvE>

0001cffc <__cxa_throw>:
   1cffc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1cffe:	4604      	mov	r4, r0
   1d000:	460f      	mov	r7, r1
   1d002:	4616      	mov	r6, r2
   1d004:	f000 fb96 	bl	1d734 <__cxa_get_globals>
   1d008:	6843      	ldr	r3, [r0, #4]
   1d00a:	2501      	movs	r5, #1
   1d00c:	442b      	add	r3, r5
   1d00e:	6043      	str	r3, [r0, #4]
   1d010:	f844 7c78 	str.w	r7, [r4, #-120]
   1d014:	f844 6c74 	str.w	r6, [r4, #-116]
   1d018:	f844 5c80 	str.w	r5, [r4, #-128]
   1d01c:	f7ff ffc4 	bl	1cfa8 <_ZSt14get_unexpectedv>
   1d020:	f844 0c70 	str.w	r0, [r4, #-112]
   1d024:	f7ff ffb8 	bl	1cf98 <_ZSt13get_terminatev>
   1d028:	2347      	movs	r3, #71	; 0x47
   1d02a:	2243      	movs	r2, #67	; 0x43
   1d02c:	f04f 0e4e 	mov.w	lr, #78	; 0x4e
   1d030:	4910      	ldr	r1, [pc, #64]	; (1d074 <__cxa_throw+0x78>)
   1d032:	f804 3c58 	strb.w	r3, [r4, #-88]
   1d036:	f1a4 0558 	sub.w	r5, r4, #88	; 0x58
   1d03a:	232b      	movs	r3, #43	; 0x2b
   1d03c:	2755      	movs	r7, #85	; 0x55
   1d03e:	2600      	movs	r6, #0
   1d040:	f844 0c6c 	str.w	r0, [r4, #-108]
   1d044:	f804 ec57 	strb.w	lr, [r4, #-87]
   1d048:	f844 1c50 	str.w	r1, [r4, #-80]
   1d04c:	f804 2c55 	strb.w	r2, [r4, #-85]
   1d050:	f804 2c54 	strb.w	r2, [r4, #-84]
   1d054:	f804 3c53 	strb.w	r3, [r4, #-83]
   1d058:	f804 3c52 	strb.w	r3, [r4, #-82]
   1d05c:	f804 7c56 	strb.w	r7, [r4, #-86]
   1d060:	f804 6c51 	strb.w	r6, [r4, #-81]
   1d064:	4628      	mov	r0, r5
   1d066:	f009 fde9 	bl	26c3c <_Unwind_RaiseException>
   1d06a:	4628      	mov	r0, r5
   1d06c:	f000 fada 	bl	1d624 <__cxa_begin_catch>
   1d070:	f7ff ff7a 	bl	1cf68 <_ZSt9terminatev>
   1d074:	0001cfb9 	.word	0x0001cfb9

0001d078 <__cxa_rethrow>:
   1d078:	b510      	push	{r4, lr}
   1d07a:	f000 fb5b 	bl	1d734 <__cxa_get_globals>
   1d07e:	6842      	ldr	r2, [r0, #4]
   1d080:	6804      	ldr	r4, [r0, #0]
   1d082:	3201      	adds	r2, #1
   1d084:	6042      	str	r2, [r0, #4]
   1d086:	b164      	cbz	r4, 1d0a2 <__cxa_rethrow+0x2a>
   1d088:	f894 2020 	ldrb.w	r2, [r4, #32]
   1d08c:	2a47      	cmp	r2, #71	; 0x47
   1d08e:	d00a      	beq.n	1d0a6 <__cxa_rethrow+0x2e>
   1d090:	2200      	movs	r2, #0
   1d092:	6002      	str	r2, [r0, #0]
   1d094:	3420      	adds	r4, #32
   1d096:	4620      	mov	r0, r4
   1d098:	f009 fdf4 	bl	26c84 <_Unwind_Resume_or_Rethrow>
   1d09c:	4620      	mov	r0, r4
   1d09e:	f000 fac1 	bl	1d624 <__cxa_begin_catch>
   1d0a2:	f7ff ff61 	bl	1cf68 <_ZSt9terminatev>
   1d0a6:	f894 2021 	ldrb.w	r2, [r4, #33]	; 0x21
   1d0aa:	2a4e      	cmp	r2, #78	; 0x4e
   1d0ac:	d1f0      	bne.n	1d090 <__cxa_rethrow+0x18>
   1d0ae:	f894 2022 	ldrb.w	r2, [r4, #34]	; 0x22
   1d0b2:	2a55      	cmp	r2, #85	; 0x55
   1d0b4:	d1ec      	bne.n	1d090 <__cxa_rethrow+0x18>
   1d0b6:	f894 2023 	ldrb.w	r2, [r4, #35]	; 0x23
   1d0ba:	2a43      	cmp	r2, #67	; 0x43
   1d0bc:	d1e8      	bne.n	1d090 <__cxa_rethrow+0x18>
   1d0be:	f894 2024 	ldrb.w	r2, [r4, #36]	; 0x24
   1d0c2:	2a43      	cmp	r2, #67	; 0x43
   1d0c4:	d1e4      	bne.n	1d090 <__cxa_rethrow+0x18>
   1d0c6:	f894 2025 	ldrb.w	r2, [r4, #37]	; 0x25
   1d0ca:	2a2b      	cmp	r2, #43	; 0x2b
   1d0cc:	d1e0      	bne.n	1d090 <__cxa_rethrow+0x18>
   1d0ce:	f894 2026 	ldrb.w	r2, [r4, #38]	; 0x26
   1d0d2:	2a2b      	cmp	r2, #43	; 0x2b
   1d0d4:	d1dc      	bne.n	1d090 <__cxa_rethrow+0x18>
   1d0d6:	f894 2027 	ldrb.w	r2, [r4, #39]	; 0x27
   1d0da:	2a01      	cmp	r2, #1
   1d0dc:	d8d8      	bhi.n	1d090 <__cxa_rethrow+0x18>
   1d0de:	6962      	ldr	r2, [r4, #20]
   1d0e0:	4252      	negs	r2, r2
   1d0e2:	6162      	str	r2, [r4, #20]
   1d0e4:	e7d6      	b.n	1d094 <__cxa_rethrow+0x1c>
   1d0e6:	bf00      	nop

0001d0e8 <_ZSt15get_new_handlerv>:
   1d0e8:	4b02      	ldr	r3, [pc, #8]	; (1d0f4 <_ZSt15get_new_handlerv+0xc>)
   1d0ea:	6818      	ldr	r0, [r3, #0]
   1d0ec:	f3bf 8f5b 	dmb	ish
   1d0f0:	4770      	bx	lr
   1d0f2:	bf00      	nop
   1d0f4:	20002968 	.word	0x20002968

0001d0f8 <_ZN10__cxxabiv120__si_class_type_infoD1Ev>:
   1d0f8:	b510      	push	{r4, lr}
   1d0fa:	4b03      	ldr	r3, [pc, #12]	; (1d108 <_ZN10__cxxabiv120__si_class_type_infoD1Ev+0x10>)
   1d0fc:	6003      	str	r3, [r0, #0]
   1d0fe:	4604      	mov	r4, r0
   1d100:	f000 f8ca 	bl	1d298 <_ZN10__cxxabiv117__class_type_infoD1Ev>
   1d104:	4620      	mov	r0, r4
   1d106:	bd10      	pop	{r4, pc}
   1d108:	0002dc98 	.word	0x0002dc98

0001d10c <_ZN10__cxxabiv120__si_class_type_infoD0Ev>:
   1d10c:	b510      	push	{r4, lr}
   1d10e:	4b05      	ldr	r3, [pc, #20]	; (1d124 <_ZN10__cxxabiv120__si_class_type_infoD0Ev+0x18>)
   1d110:	6003      	str	r3, [r0, #0]
   1d112:	4604      	mov	r4, r0
   1d114:	f000 f8c0 	bl	1d298 <_ZN10__cxxabiv117__class_type_infoD1Ev>
   1d118:	4620      	mov	r0, r4
   1d11a:	210c      	movs	r1, #12
   1d11c:	f7ff fe54 	bl	1cdc8 <_ZdlPvj>
   1d120:	4620      	mov	r0, r4
   1d122:	bd10      	pop	{r4, pc}
   1d124:	0002dc98 	.word	0x0002dc98

0001d128 <_ZNK10__cxxabiv120__si_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_>:
   1d128:	b570      	push	{r4, r5, r6, lr}
   1d12a:	b082      	sub	sp, #8
   1d12c:	460d      	mov	r5, r1
   1d12e:	9c06      	ldr	r4, [sp, #24]
   1d130:	4294      	cmp	r4, r2
   1d132:	4606      	mov	r6, r0
   1d134:	d009      	beq.n	1d14a <_ZNK10__cxxabiv120__si_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_+0x22>
   1d136:	68b0      	ldr	r0, [r6, #8]
   1d138:	6806      	ldr	r6, [r0, #0]
   1d13a:	9406      	str	r4, [sp, #24]
   1d13c:	6a34      	ldr	r4, [r6, #32]
   1d13e:	4629      	mov	r1, r5
   1d140:	46a4      	mov	ip, r4
   1d142:	b002      	add	sp, #8
   1d144:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   1d148:	4760      	bx	ip
   1d14a:	4619      	mov	r1, r3
   1d14c:	9201      	str	r2, [sp, #4]
   1d14e:	9300      	str	r3, [sp, #0]
   1d150:	f000 f86a 	bl	1d228 <_ZNKSt9type_infoeqERKS_>
   1d154:	9b00      	ldr	r3, [sp, #0]
   1d156:	9a01      	ldr	r2, [sp, #4]
   1d158:	2800      	cmp	r0, #0
   1d15a:	d0ec      	beq.n	1d136 <_ZNK10__cxxabiv120__si_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_+0xe>
   1d15c:	2006      	movs	r0, #6
   1d15e:	b002      	add	sp, #8
   1d160:	bd70      	pop	{r4, r5, r6, pc}
   1d162:	bf00      	nop

0001d164 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE>:
   1d164:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1d168:	b081      	sub	sp, #4
   1d16a:	460e      	mov	r6, r1
   1d16c:	4619      	mov	r1, r3
   1d16e:	461f      	mov	r7, r3
   1d170:	4691      	mov	r9, r2
   1d172:	4683      	mov	fp, r0
   1d174:	9c0a      	ldr	r4, [sp, #40]	; 0x28
   1d176:	f8dd a02c 	ldr.w	sl, [sp, #44]	; 0x2c
   1d17a:	f8dd 8030 	ldr.w	r8, [sp, #48]	; 0x30
   1d17e:	9d0d      	ldr	r5, [sp, #52]	; 0x34
   1d180:	f000 f852 	bl	1d228 <_ZNKSt9type_infoeqERKS_>
   1d184:	b170      	cbz	r0, 1d1a4 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x40>
   1d186:	2e00      	cmp	r6, #0
   1d188:	602c      	str	r4, [r5, #0]
   1d18a:	f885 9004 	strb.w	r9, [r5, #4]
   1d18e:	db1f      	blt.n	1d1d0 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x6c>
   1d190:	4434      	add	r4, r6
   1d192:	45a0      	cmp	r8, r4
   1d194:	bf0c      	ite	eq
   1d196:	2406      	moveq	r4, #6
   1d198:	2401      	movne	r4, #1
   1d19a:	71ac      	strb	r4, [r5, #6]
   1d19c:	2000      	movs	r0, #0
   1d19e:	b001      	add	sp, #4
   1d1a0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1d1a4:	4544      	cmp	r4, r8
   1d1a6:	d018      	beq.n	1d1da <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x76>
   1d1a8:	f8db 0008 	ldr.w	r0, [fp, #8]
   1d1ac:	f8d0 e000 	ldr.w	lr, [r0]
   1d1b0:	950d      	str	r5, [sp, #52]	; 0x34
   1d1b2:	f8cd 8030 	str.w	r8, [sp, #48]	; 0x30
   1d1b6:	f8cd a02c 	str.w	sl, [sp, #44]	; 0x2c
   1d1ba:	940a      	str	r4, [sp, #40]	; 0x28
   1d1bc:	f8de 401c 	ldr.w	r4, [lr, #28]
   1d1c0:	463b      	mov	r3, r7
   1d1c2:	464a      	mov	r2, r9
   1d1c4:	4631      	mov	r1, r6
   1d1c6:	46a4      	mov	ip, r4
   1d1c8:	b001      	add	sp, #4
   1d1ca:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1d1ce:	4760      	bx	ip
   1d1d0:	3602      	adds	r6, #2
   1d1d2:	d1e3      	bne.n	1d19c <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x38>
   1d1d4:	2301      	movs	r3, #1
   1d1d6:	71ab      	strb	r3, [r5, #6]
   1d1d8:	e7e0      	b.n	1d19c <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x38>
   1d1da:	4651      	mov	r1, sl
   1d1dc:	4658      	mov	r0, fp
   1d1de:	f000 f823 	bl	1d228 <_ZNKSt9type_infoeqERKS_>
   1d1e2:	2800      	cmp	r0, #0
   1d1e4:	d0e0      	beq.n	1d1a8 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x44>
   1d1e6:	2000      	movs	r0, #0
   1d1e8:	f885 9005 	strb.w	r9, [r5, #5]
   1d1ec:	b001      	add	sp, #4
   1d1ee:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1d1f2:	bf00      	nop

0001d1f4 <_ZNK10__cxxabiv120__si_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE>:
   1d1f4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1d1f8:	4607      	mov	r7, r0
   1d1fa:	460c      	mov	r4, r1
   1d1fc:	4615      	mov	r5, r2
   1d1fe:	461e      	mov	r6, r3
   1d200:	f000 f862 	bl	1d2c8 <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PKvRNS0_15__upcast_resultE>
   1d204:	b108      	cbz	r0, 1d20a <_ZNK10__cxxabiv120__si_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE+0x16>
   1d206:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   1d20a:	68b8      	ldr	r0, [r7, #8]
   1d20c:	6807      	ldr	r7, [r0, #0]
   1d20e:	4621      	mov	r1, r4
   1d210:	69bc      	ldr	r4, [r7, #24]
   1d212:	4633      	mov	r3, r6
   1d214:	462a      	mov	r2, r5
   1d216:	46a4      	mov	ip, r4
   1d218:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   1d21c:	4760      	bx	ip
   1d21e:	bf00      	nop

0001d220 <_ZNSt9type_infoD1Ev>:
   1d220:	4770      	bx	lr
   1d222:	bf00      	nop

0001d224 <_ZNKSt9type_info14__is_pointer_pEv>:
   1d224:	2000      	movs	r0, #0
   1d226:	4770      	bx	lr

0001d228 <_ZNKSt9type_infoeqERKS_>:
   1d228:	4281      	cmp	r1, r0
   1d22a:	d011      	beq.n	1d250 <_ZNKSt9type_infoeqERKS_+0x28>
   1d22c:	b508      	push	{r3, lr}
   1d22e:	6840      	ldr	r0, [r0, #4]
   1d230:	7803      	ldrb	r3, [r0, #0]
   1d232:	2b2a      	cmp	r3, #42	; 0x2a
   1d234:	d00a      	beq.n	1d24c <_ZNKSt9type_infoeqERKS_+0x24>
   1d236:	6849      	ldr	r1, [r1, #4]
   1d238:	780b      	ldrb	r3, [r1, #0]
   1d23a:	2b2a      	cmp	r3, #42	; 0x2a
   1d23c:	bf08      	it	eq
   1d23e:	3101      	addeq	r1, #1
   1d240:	f00b f942 	bl	284c8 <strcmp>
   1d244:	fab0 f080 	clz	r0, r0
   1d248:	0940      	lsrs	r0, r0, #5
   1d24a:	bd08      	pop	{r3, pc}
   1d24c:	2000      	movs	r0, #0
   1d24e:	bd08      	pop	{r3, pc}
   1d250:	2001      	movs	r0, #1
   1d252:	4770      	bx	lr

0001d254 <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PPv>:
   1d254:	b570      	push	{r4, r5, r6, lr}
   1d256:	6803      	ldr	r3, [r0, #0]
   1d258:	b084      	sub	sp, #16
   1d25a:	2400      	movs	r4, #0
   1d25c:	699e      	ldr	r6, [r3, #24]
   1d25e:	9400      	str	r4, [sp, #0]
   1d260:	2310      	movs	r3, #16
   1d262:	4615      	mov	r5, r2
   1d264:	9302      	str	r3, [sp, #8]
   1d266:	6812      	ldr	r2, [r2, #0]
   1d268:	f88d 4004 	strb.w	r4, [sp, #4]
   1d26c:	466b      	mov	r3, sp
   1d26e:	9403      	str	r4, [sp, #12]
   1d270:	47b0      	blx	r6
   1d272:	f89d 3004 	ldrb.w	r3, [sp, #4]
   1d276:	f003 0306 	and.w	r3, r3, #6
   1d27a:	2b06      	cmp	r3, #6
   1d27c:	bf03      	ittte	eq
   1d27e:	9b00      	ldreq	r3, [sp, #0]
   1d280:	602b      	streq	r3, [r5, #0]
   1d282:	2001      	moveq	r0, #1
   1d284:	4620      	movne	r0, r4
   1d286:	b004      	add	sp, #16
   1d288:	bd70      	pop	{r4, r5, r6, pc}
   1d28a:	bf00      	nop

0001d28c <_ZNK10__cxxabiv117__class_type_info20__do_find_public_srcEiPKvPKS0_S2_>:
   1d28c:	9800      	ldr	r0, [sp, #0]
   1d28e:	4290      	cmp	r0, r2
   1d290:	bf0c      	ite	eq
   1d292:	2006      	moveq	r0, #6
   1d294:	2001      	movne	r0, #1
   1d296:	4770      	bx	lr

0001d298 <_ZN10__cxxabiv117__class_type_infoD1Ev>:
   1d298:	b510      	push	{r4, lr}
   1d29a:	4b03      	ldr	r3, [pc, #12]	; (1d2a8 <_ZN10__cxxabiv117__class_type_infoD1Ev+0x10>)
   1d29c:	6003      	str	r3, [r0, #0]
   1d29e:	4604      	mov	r4, r0
   1d2a0:	f7ff ffbe 	bl	1d220 <_ZNSt9type_infoD1Ev>
   1d2a4:	4620      	mov	r0, r4
   1d2a6:	bd10      	pop	{r4, pc}
   1d2a8:	0002dd0c 	.word	0x0002dd0c

0001d2ac <_ZN10__cxxabiv117__class_type_infoD0Ev>:
   1d2ac:	b510      	push	{r4, lr}
   1d2ae:	4b05      	ldr	r3, [pc, #20]	; (1d2c4 <_ZN10__cxxabiv117__class_type_infoD0Ev+0x18>)
   1d2b0:	6003      	str	r3, [r0, #0]
   1d2b2:	4604      	mov	r4, r0
   1d2b4:	f7ff ffb4 	bl	1d220 <_ZNSt9type_infoD1Ev>
   1d2b8:	4620      	mov	r0, r4
   1d2ba:	2108      	movs	r1, #8
   1d2bc:	f7ff fd84 	bl	1cdc8 <_ZdlPvj>
   1d2c0:	4620      	mov	r0, r4
   1d2c2:	bd10      	pop	{r4, pc}
   1d2c4:	0002dd0c 	.word	0x0002dd0c

0001d2c8 <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PKvRNS0_15__upcast_resultE>:
   1d2c8:	b538      	push	{r3, r4, r5, lr}
   1d2ca:	4615      	mov	r5, r2
   1d2cc:	461c      	mov	r4, r3
   1d2ce:	f7ff ffab 	bl	1d228 <_ZNKSt9type_infoeqERKS_>
   1d2d2:	b120      	cbz	r0, 1d2de <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PKvRNS0_15__upcast_resultE+0x16>
   1d2d4:	2208      	movs	r2, #8
   1d2d6:	2306      	movs	r3, #6
   1d2d8:	6025      	str	r5, [r4, #0]
   1d2da:	60e2      	str	r2, [r4, #12]
   1d2dc:	7123      	strb	r3, [r4, #4]
   1d2de:	bd38      	pop	{r3, r4, r5, pc}

0001d2e0 <_ZNK10__cxxabiv117__class_type_info10__do_catchEPKSt9type_infoPPvj>:
   1d2e0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1d2e4:	4617      	mov	r7, r2
   1d2e6:	461c      	mov	r4, r3
   1d2e8:	4606      	mov	r6, r0
   1d2ea:	460d      	mov	r5, r1
   1d2ec:	f7ff ff9c 	bl	1d228 <_ZNKSt9type_infoeqERKS_>
   1d2f0:	b908      	cbnz	r0, 1d2f6 <_ZNK10__cxxabiv117__class_type_info10__do_catchEPKSt9type_infoPPvj+0x16>
   1d2f2:	2c03      	cmp	r4, #3
   1d2f4:	d901      	bls.n	1d2fa <_ZNK10__cxxabiv117__class_type_info10__do_catchEPKSt9type_infoPPvj+0x1a>
   1d2f6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   1d2fa:	682b      	ldr	r3, [r5, #0]
   1d2fc:	463a      	mov	r2, r7
   1d2fe:	4631      	mov	r1, r6
   1d300:	4628      	mov	r0, r5
   1d302:	695b      	ldr	r3, [r3, #20]
   1d304:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   1d308:	4718      	bx	r3
   1d30a:	bf00      	nop

0001d30c <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE>:
   1d30c:	b5f0      	push	{r4, r5, r6, r7, lr}
   1d30e:	b083      	sub	sp, #12
   1d310:	4617      	mov	r7, r2
   1d312:	9d08      	ldr	r5, [sp, #32]
   1d314:	990a      	ldr	r1, [sp, #40]	; 0x28
   1d316:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
   1d318:	428d      	cmp	r5, r1
   1d31a:	4606      	mov	r6, r0
   1d31c:	d00b      	beq.n	1d336 <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x2a>
   1d31e:	4619      	mov	r1, r3
   1d320:	4630      	mov	r0, r6
   1d322:	f7ff ff81 	bl	1d228 <_ZNKSt9type_infoeqERKS_>
   1d326:	b118      	cbz	r0, 1d330 <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x24>
   1d328:	2301      	movs	r3, #1
   1d32a:	6025      	str	r5, [r4, #0]
   1d32c:	7127      	strb	r7, [r4, #4]
   1d32e:	71a3      	strb	r3, [r4, #6]
   1d330:	2000      	movs	r0, #0
   1d332:	b003      	add	sp, #12
   1d334:	bdf0      	pop	{r4, r5, r6, r7, pc}
   1d336:	9909      	ldr	r1, [sp, #36]	; 0x24
   1d338:	9301      	str	r3, [sp, #4]
   1d33a:	f7ff ff75 	bl	1d228 <_ZNKSt9type_infoeqERKS_>
   1d33e:	b118      	cbz	r0, 1d348 <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x3c>
   1d340:	2000      	movs	r0, #0
   1d342:	7167      	strb	r7, [r4, #5]
   1d344:	b003      	add	sp, #12
   1d346:	bdf0      	pop	{r4, r5, r6, r7, pc}
   1d348:	9b01      	ldr	r3, [sp, #4]
   1d34a:	e7e8      	b.n	1d31e <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x12>

0001d34c <_ZdlPv>:
   1d34c:	f00a b936 	b.w	275bc <free>

0001d350 <__cxa_end_cleanup>:
   1d350:	b41e      	push	{r1, r2, r3, r4}
   1d352:	f000 f891 	bl	1d478 <__gnu_end_cleanup>
   1d356:	bc1e      	pop	{r1, r2, r3, r4}
   1d358:	f009 fc82 	bl	26c60 <_Unwind_Resume>

0001d35c <__cxa_type_match>:
   1d35c:	b5f0      	push	{r4, r5, r6, r7, lr}
   1d35e:	7802      	ldrb	r2, [r0, #0]
   1d360:	2a47      	cmp	r2, #71	; 0x47
   1d362:	b083      	sub	sp, #12
   1d364:	460d      	mov	r5, r1
   1d366:	461f      	mov	r7, r3
   1d368:	d01e      	beq.n	1d3a8 <__cxa_type_match+0x4c>
   1d36a:	2300      	movs	r3, #0
   1d36c:	4c27      	ldr	r4, [pc, #156]	; (1d40c <__cxa_type_match+0xb0>)
   1d36e:	9301      	str	r3, [sp, #4]
   1d370:	6823      	ldr	r3, [r4, #0]
   1d372:	4620      	mov	r0, r4
   1d374:	689b      	ldr	r3, [r3, #8]
   1d376:	4798      	blx	r3
   1d378:	b180      	cbz	r0, 1d39c <__cxa_type_match+0x40>
   1d37a:	9b01      	ldr	r3, [sp, #4]
   1d37c:	681b      	ldr	r3, [r3, #0]
   1d37e:	9301      	str	r3, [sp, #4]
   1d380:	2602      	movs	r6, #2
   1d382:	682b      	ldr	r3, [r5, #0]
   1d384:	4621      	mov	r1, r4
   1d386:	4628      	mov	r0, r5
   1d388:	691c      	ldr	r4, [r3, #16]
   1d38a:	aa01      	add	r2, sp, #4
   1d38c:	2301      	movs	r3, #1
   1d38e:	47a0      	blx	r4
   1d390:	b130      	cbz	r0, 1d3a0 <__cxa_type_match+0x44>
   1d392:	9b01      	ldr	r3, [sp, #4]
   1d394:	603b      	str	r3, [r7, #0]
   1d396:	4630      	mov	r0, r6
   1d398:	b003      	add	sp, #12
   1d39a:	bdf0      	pop	{r4, r5, r6, r7, pc}
   1d39c:	2601      	movs	r6, #1
   1d39e:	e7f0      	b.n	1d382 <__cxa_type_match+0x26>
   1d3a0:	4606      	mov	r6, r0
   1d3a2:	4630      	mov	r0, r6
   1d3a4:	b003      	add	sp, #12
   1d3a6:	bdf0      	pop	{r4, r5, r6, r7, pc}
   1d3a8:	7843      	ldrb	r3, [r0, #1]
   1d3aa:	2b4e      	cmp	r3, #78	; 0x4e
   1d3ac:	d1dd      	bne.n	1d36a <__cxa_type_match+0xe>
   1d3ae:	7883      	ldrb	r3, [r0, #2]
   1d3b0:	2b55      	cmp	r3, #85	; 0x55
   1d3b2:	d1da      	bne.n	1d36a <__cxa_type_match+0xe>
   1d3b4:	78c3      	ldrb	r3, [r0, #3]
   1d3b6:	2b43      	cmp	r3, #67	; 0x43
   1d3b8:	d019      	beq.n	1d3ee <__cxa_type_match+0x92>
   1d3ba:	78c3      	ldrb	r3, [r0, #3]
   1d3bc:	2b43      	cmp	r3, #67	; 0x43
   1d3be:	d1d4      	bne.n	1d36a <__cxa_type_match+0xe>
   1d3c0:	7903      	ldrb	r3, [r0, #4]
   1d3c2:	2b43      	cmp	r3, #67	; 0x43
   1d3c4:	d1d1      	bne.n	1d36a <__cxa_type_match+0xe>
   1d3c6:	7943      	ldrb	r3, [r0, #5]
   1d3c8:	2b2b      	cmp	r3, #43	; 0x2b
   1d3ca:	d1ce      	bne.n	1d36a <__cxa_type_match+0xe>
   1d3cc:	7983      	ldrb	r3, [r0, #6]
   1d3ce:	2b2b      	cmp	r3, #43	; 0x2b
   1d3d0:	d1cb      	bne.n	1d36a <__cxa_type_match+0xe>
   1d3d2:	79c3      	ldrb	r3, [r0, #7]
   1d3d4:	2b01      	cmp	r3, #1
   1d3d6:	d8c8      	bhi.n	1d36a <__cxa_type_match+0xe>
   1d3d8:	d004      	beq.n	1d3e4 <__cxa_type_match+0x88>
   1d3da:	f850 4c20 	ldr.w	r4, [r0, #-32]
   1d3de:	3058      	adds	r0, #88	; 0x58
   1d3e0:	9001      	str	r0, [sp, #4]
   1d3e2:	e7c5      	b.n	1d370 <__cxa_type_match+0x14>
   1d3e4:	f850 0c20 	ldr.w	r0, [r0, #-32]
   1d3e8:	f850 4c78 	ldr.w	r4, [r0, #-120]
   1d3ec:	e7f8      	b.n	1d3e0 <__cxa_type_match+0x84>
   1d3ee:	7903      	ldrb	r3, [r0, #4]
   1d3f0:	2b46      	cmp	r3, #70	; 0x46
   1d3f2:	d1e2      	bne.n	1d3ba <__cxa_type_match+0x5e>
   1d3f4:	7943      	ldrb	r3, [r0, #5]
   1d3f6:	2b4f      	cmp	r3, #79	; 0x4f
   1d3f8:	d1df      	bne.n	1d3ba <__cxa_type_match+0x5e>
   1d3fa:	7983      	ldrb	r3, [r0, #6]
   1d3fc:	2b52      	cmp	r3, #82	; 0x52
   1d3fe:	d1dc      	bne.n	1d3ba <__cxa_type_match+0x5e>
   1d400:	79c3      	ldrb	r3, [r0, #7]
   1d402:	2b00      	cmp	r3, #0
   1d404:	d1d9      	bne.n	1d3ba <__cxa_type_match+0x5e>
   1d406:	9301      	str	r3, [sp, #4]
   1d408:	4c01      	ldr	r4, [pc, #4]	; (1d410 <__cxa_type_match+0xb4>)
   1d40a:	e7b1      	b.n	1d370 <__cxa_type_match+0x14>
   1d40c:	0002dbc4 	.word	0x0002dbc4
   1d410:	0002dbbc 	.word	0x0002dbbc

0001d414 <__cxa_begin_cleanup>:
   1d414:	b510      	push	{r4, lr}
   1d416:	4604      	mov	r4, r0
   1d418:	f000 f98c 	bl	1d734 <__cxa_get_globals>
   1d41c:	7823      	ldrb	r3, [r4, #0]
   1d41e:	2b47      	cmp	r3, #71	; 0x47
   1d420:	f1a4 0220 	sub.w	r2, r4, #32
   1d424:	d004      	beq.n	1d430 <__cxa_begin_cleanup+0x1c>
   1d426:	6883      	ldr	r3, [r0, #8]
   1d428:	bb23      	cbnz	r3, 1d474 <__cxa_begin_cleanup+0x60>
   1d42a:	6082      	str	r2, [r0, #8]
   1d42c:	2001      	movs	r0, #1
   1d42e:	bd10      	pop	{r4, pc}
   1d430:	7863      	ldrb	r3, [r4, #1]
   1d432:	2b4e      	cmp	r3, #78	; 0x4e
   1d434:	d1f7      	bne.n	1d426 <__cxa_begin_cleanup+0x12>
   1d436:	78a3      	ldrb	r3, [r4, #2]
   1d438:	2b55      	cmp	r3, #85	; 0x55
   1d43a:	d1f4      	bne.n	1d426 <__cxa_begin_cleanup+0x12>
   1d43c:	78e3      	ldrb	r3, [r4, #3]
   1d43e:	2b43      	cmp	r3, #67	; 0x43
   1d440:	d1f1      	bne.n	1d426 <__cxa_begin_cleanup+0x12>
   1d442:	7923      	ldrb	r3, [r4, #4]
   1d444:	2b43      	cmp	r3, #67	; 0x43
   1d446:	d1ee      	bne.n	1d426 <__cxa_begin_cleanup+0x12>
   1d448:	7963      	ldrb	r3, [r4, #5]
   1d44a:	2b2b      	cmp	r3, #43	; 0x2b
   1d44c:	d1eb      	bne.n	1d426 <__cxa_begin_cleanup+0x12>
   1d44e:	79a3      	ldrb	r3, [r4, #6]
   1d450:	2b2b      	cmp	r3, #43	; 0x2b
   1d452:	d1e8      	bne.n	1d426 <__cxa_begin_cleanup+0x12>
   1d454:	79e3      	ldrb	r3, [r4, #7]
   1d456:	2b01      	cmp	r3, #1
   1d458:	d8e5      	bhi.n	1d426 <__cxa_begin_cleanup+0x12>
   1d45a:	f854 3c04 	ldr.w	r3, [r4, #-4]
   1d45e:	3301      	adds	r3, #1
   1d460:	2b01      	cmp	r3, #1
   1d462:	f844 3c04 	str.w	r3, [r4, #-4]
   1d466:	d1e1      	bne.n	1d42c <__cxa_begin_cleanup+0x18>
   1d468:	6883      	ldr	r3, [r0, #8]
   1d46a:	f844 3c08 	str.w	r3, [r4, #-8]
   1d46e:	6082      	str	r2, [r0, #8]
   1d470:	2001      	movs	r0, #1
   1d472:	bd10      	pop	{r4, pc}
   1d474:	f7ff fd78 	bl	1cf68 <_ZSt9terminatev>

0001d478 <__gnu_end_cleanup>:
   1d478:	b508      	push	{r3, lr}
   1d47a:	f000 f95b 	bl	1d734 <__cxa_get_globals>
   1d47e:	6883      	ldr	r3, [r0, #8]
   1d480:	b383      	cbz	r3, 1d4e4 <__gnu_end_cleanup+0x6c>
   1d482:	f893 2020 	ldrb.w	r2, [r3, #32]
   1d486:	2a47      	cmp	r2, #71	; 0x47
   1d488:	d004      	beq.n	1d494 <__gnu_end_cleanup+0x1c>
   1d48a:	2200      	movs	r2, #0
   1d48c:	6082      	str	r2, [r0, #8]
   1d48e:	f103 0020 	add.w	r0, r3, #32
   1d492:	bd08      	pop	{r3, pc}
   1d494:	f893 2021 	ldrb.w	r2, [r3, #33]	; 0x21
   1d498:	2a4e      	cmp	r2, #78	; 0x4e
   1d49a:	d1f6      	bne.n	1d48a <__gnu_end_cleanup+0x12>
   1d49c:	f893 2022 	ldrb.w	r2, [r3, #34]	; 0x22
   1d4a0:	2a55      	cmp	r2, #85	; 0x55
   1d4a2:	d1f2      	bne.n	1d48a <__gnu_end_cleanup+0x12>
   1d4a4:	f893 2023 	ldrb.w	r2, [r3, #35]	; 0x23
   1d4a8:	2a43      	cmp	r2, #67	; 0x43
   1d4aa:	d1ee      	bne.n	1d48a <__gnu_end_cleanup+0x12>
   1d4ac:	f893 2024 	ldrb.w	r2, [r3, #36]	; 0x24
   1d4b0:	2a43      	cmp	r2, #67	; 0x43
   1d4b2:	d1ea      	bne.n	1d48a <__gnu_end_cleanup+0x12>
   1d4b4:	f893 2025 	ldrb.w	r2, [r3, #37]	; 0x25
   1d4b8:	2a2b      	cmp	r2, #43	; 0x2b
   1d4ba:	d1e6      	bne.n	1d48a <__gnu_end_cleanup+0x12>
   1d4bc:	f893 2026 	ldrb.w	r2, [r3, #38]	; 0x26
   1d4c0:	2a2b      	cmp	r2, #43	; 0x2b
   1d4c2:	d1e2      	bne.n	1d48a <__gnu_end_cleanup+0x12>
   1d4c4:	f893 2027 	ldrb.w	r2, [r3, #39]	; 0x27
   1d4c8:	2a01      	cmp	r2, #1
   1d4ca:	d8de      	bhi.n	1d48a <__gnu_end_cleanup+0x12>
   1d4cc:	69da      	ldr	r2, [r3, #28]
   1d4ce:	3a01      	subs	r2, #1
   1d4d0:	61da      	str	r2, [r3, #28]
   1d4d2:	2a00      	cmp	r2, #0
   1d4d4:	d1db      	bne.n	1d48e <__gnu_end_cleanup+0x16>
   1d4d6:	699a      	ldr	r2, [r3, #24]
   1d4d8:	6082      	str	r2, [r0, #8]
   1d4da:	2200      	movs	r2, #0
   1d4dc:	619a      	str	r2, [r3, #24]
   1d4de:	f103 0020 	add.w	r0, r3, #32
   1d4e2:	bd08      	pop	{r3, pc}
   1d4e4:	f7ff fd40 	bl	1cf68 <_ZSt9terminatev>

0001d4e8 <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc>:
   1d4e8:	7803      	ldrb	r3, [r0, #0]
   1d4ea:	2b47      	cmp	r3, #71	; 0x47
   1d4ec:	d001      	beq.n	1d4f2 <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc+0xa>
   1d4ee:	2000      	movs	r0, #0
   1d4f0:	4770      	bx	lr
   1d4f2:	7843      	ldrb	r3, [r0, #1]
   1d4f4:	2b4e      	cmp	r3, #78	; 0x4e
   1d4f6:	d1fa      	bne.n	1d4ee <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc+0x6>
   1d4f8:	7883      	ldrb	r3, [r0, #2]
   1d4fa:	2b55      	cmp	r3, #85	; 0x55
   1d4fc:	d1f7      	bne.n	1d4ee <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc+0x6>
   1d4fe:	78c3      	ldrb	r3, [r0, #3]
   1d500:	2b43      	cmp	r3, #67	; 0x43
   1d502:	d1f4      	bne.n	1d4ee <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc+0x6>
   1d504:	7903      	ldrb	r3, [r0, #4]
   1d506:	2b43      	cmp	r3, #67	; 0x43
   1d508:	d1f1      	bne.n	1d4ee <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc+0x6>
   1d50a:	7943      	ldrb	r3, [r0, #5]
   1d50c:	2b2b      	cmp	r3, #43	; 0x2b
   1d50e:	d1ee      	bne.n	1d4ee <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc+0x6>
   1d510:	7983      	ldrb	r3, [r0, #6]
   1d512:	2b2b      	cmp	r3, #43	; 0x2b
   1d514:	d1eb      	bne.n	1d4ee <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc+0x6>
   1d516:	79c0      	ldrb	r0, [r0, #7]
   1d518:	2801      	cmp	r0, #1
   1d51a:	bf8c      	ite	hi
   1d51c:	2000      	movhi	r0, #0
   1d51e:	2001      	movls	r0, #1
   1d520:	4770      	bx	lr
   1d522:	bf00      	nop

0001d524 <__cxa_call_terminate>:
   1d524:	b510      	push	{r4, lr}
   1d526:	b130      	cbz	r0, 1d536 <__cxa_call_terminate+0x12>
   1d528:	4604      	mov	r4, r0
   1d52a:	f000 f87b 	bl	1d624 <__cxa_begin_catch>
   1d52e:	4620      	mov	r0, r4
   1d530:	f7ff ffda 	bl	1d4e8 <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc>
   1d534:	b908      	cbnz	r0, 1d53a <__cxa_call_terminate+0x16>
   1d536:	f7ff fd17 	bl	1cf68 <_ZSt9terminatev>
   1d53a:	f854 0c14 	ldr.w	r0, [r4, #-20]
   1d53e:	f7ff fcff 	bl	1cf40 <_ZN10__cxxabiv111__terminateEPFvvE>
   1d542:	bf00      	nop

0001d544 <__cxa_call_unexpected>:
   1d544:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1d548:	b085      	sub	sp, #20
   1d54a:	4602      	mov	r2, r0
   1d54c:	f7ff ffcc 	bl	1d4e8 <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc>
   1d550:	b160      	cbz	r0, 1d56c <__cxa_call_unexpected+0x28>
   1d552:	f852 8c18 	ldr.w	r8, [r2, #-24]
   1d556:	f852 5c14 	ldr.w	r5, [r2, #-20]
   1d55a:	6a96      	ldr	r6, [r2, #40]	; 0x28
   1d55c:	6b17      	ldr	r7, [r2, #48]	; 0x30
   1d55e:	6b54      	ldr	r4, [r2, #52]	; 0x34
   1d560:	4610      	mov	r0, r2
   1d562:	f000 f85f 	bl	1d624 <__cxa_begin_catch>
   1d566:	4640      	mov	r0, r8
   1d568:	f7ff fd08 	bl	1cf7c <_ZN10__cxxabiv112__unexpectedEPFvvE>
   1d56c:	4610      	mov	r0, r2
   1d56e:	f000 f859 	bl	1d624 <__cxa_begin_catch>
   1d572:	f7ff fd07 	bl	1cf84 <_ZSt10unexpectedv>
   1d576:	f000 f855 	bl	1d624 <__cxa_begin_catch>
   1d57a:	f7ff fcf5 	bl	1cf68 <_ZSt9terminatev>
   1d57e:	f000 f851 	bl	1d624 <__cxa_begin_catch>
   1d582:	f000 f8d3 	bl	1d72c <__cxa_get_globals_fast>
   1d586:	6803      	ldr	r3, [r0, #0]
   1d588:	f893 2027 	ldrb.w	r2, [r3, #39]	; 0x27
   1d58c:	2a01      	cmp	r2, #1
   1d58e:	d036      	beq.n	1d5fe <__cxa_call_unexpected+0xba>
   1d590:	f103 0278 	add.w	r2, r3, #120	; 0x78
   1d594:	f10d 0a10 	add.w	sl, sp, #16
   1d598:	f04f 0800 	mov.w	r8, #0
   1d59c:	3320      	adds	r3, #32
   1d59e:	f84a 2d08 	str.w	r2, [sl, #-8]!
   1d5a2:	f027 0b03 	bic.w	fp, r7, #3
   1d5a6:	9301      	str	r3, [sp, #4]
   1d5a8:	46c1      	mov	r9, r8
   1d5aa:	45b1      	cmp	r9, r6
   1d5ac:	da1b      	bge.n	1d5e6 <__cxa_call_unexpected+0xa2>
   1d5ae:	6827      	ldr	r7, [r4, #0]
   1d5b0:	b107      	cbz	r7, 1d5b4 <__cxa_call_unexpected+0x70>
   1d5b2:	4427      	add	r7, r4
   1d5b4:	4653      	mov	r3, sl
   1d5b6:	2200      	movs	r2, #0
   1d5b8:	4639      	mov	r1, r7
   1d5ba:	9801      	ldr	r0, [sp, #4]
   1d5bc:	f7ff fece 	bl	1d35c <__cxa_type_match>
   1d5c0:	bb10      	cbnz	r0, 1d608 <__cxa_call_unexpected+0xc4>
   1d5c2:	683b      	ldr	r3, [r7, #0]
   1d5c4:	4914      	ldr	r1, [pc, #80]	; (1d618 <__cxa_call_unexpected+0xd4>)
   1d5c6:	691b      	ldr	r3, [r3, #16]
   1d5c8:	9300      	str	r3, [sp, #0]
   1d5ca:	aa04      	add	r2, sp, #16
   1d5cc:	2301      	movs	r3, #1
   1d5ce:	f842 0d04 	str.w	r0, [r2, #-4]!
   1d5d2:	4638      	mov	r0, r7
   1d5d4:	9f00      	ldr	r7, [sp, #0]
   1d5d6:	47b8      	blx	r7
   1d5d8:	2800      	cmp	r0, #0
   1d5da:	bf18      	it	ne
   1d5dc:	4680      	movne	r8, r0
   1d5de:	f109 0901 	add.w	r9, r9, #1
   1d5e2:	445c      	add	r4, fp
   1d5e4:	e7e1      	b.n	1d5aa <__cxa_call_unexpected+0x66>
   1d5e6:	f1b8 0f00 	cmp.w	r8, #0
   1d5ea:	d00a      	beq.n	1d602 <__cxa_call_unexpected+0xbe>
   1d5ec:	2004      	movs	r0, #4
   1d5ee:	f7ff fc5b 	bl	1cea8 <__cxa_allocate_exception>
   1d5f2:	4b0a      	ldr	r3, [pc, #40]	; (1d61c <__cxa_call_unexpected+0xd8>)
   1d5f4:	6003      	str	r3, [r0, #0]
   1d5f6:	4a0a      	ldr	r2, [pc, #40]	; (1d620 <__cxa_call_unexpected+0xdc>)
   1d5f8:	4907      	ldr	r1, [pc, #28]	; (1d618 <__cxa_call_unexpected+0xd4>)
   1d5fa:	f7ff fcff 	bl	1cffc <__cxa_throw>
   1d5fe:	681a      	ldr	r2, [r3, #0]
   1d600:	e7c8      	b.n	1d594 <__cxa_call_unexpected+0x50>
   1d602:	4628      	mov	r0, r5
   1d604:	f7ff fc9c 	bl	1cf40 <_ZN10__cxxabiv111__terminateEPFvvE>
   1d608:	f7ff fd36 	bl	1d078 <__cxa_rethrow>
   1d60c:	f000 f848 	bl	1d6a0 <__cxa_end_catch>
   1d610:	f000 f846 	bl	1d6a0 <__cxa_end_catch>
   1d614:	f7ff fe9c 	bl	1d350 <__cxa_end_cleanup>
   1d618:	0002dbcc 	.word	0x0002dbcc
   1d61c:	0002dc50 	.word	0x0002dc50
   1d620:	0001cf25 	.word	0x0001cf25

0001d624 <__cxa_begin_catch>:
   1d624:	b538      	push	{r3, r4, r5, lr}
   1d626:	4604      	mov	r4, r0
   1d628:	f000 f884 	bl	1d734 <__cxa_get_globals>
   1d62c:	7822      	ldrb	r2, [r4, #0]
   1d62e:	6803      	ldr	r3, [r0, #0]
   1d630:	2a47      	cmp	r2, #71	; 0x47
   1d632:	f1a4 0120 	sub.w	r1, r4, #32
   1d636:	d004      	beq.n	1d642 <__cxa_begin_catch+0x1e>
   1d638:	bb83      	cbnz	r3, 1d69c <__cxa_begin_catch+0x78>
   1d63a:	461c      	mov	r4, r3
   1d63c:	6001      	str	r1, [r0, #0]
   1d63e:	4620      	mov	r0, r4
   1d640:	bd38      	pop	{r3, r4, r5, pc}
   1d642:	7862      	ldrb	r2, [r4, #1]
   1d644:	2a4e      	cmp	r2, #78	; 0x4e
   1d646:	d1f7      	bne.n	1d638 <__cxa_begin_catch+0x14>
   1d648:	78a2      	ldrb	r2, [r4, #2]
   1d64a:	2a55      	cmp	r2, #85	; 0x55
   1d64c:	d1f4      	bne.n	1d638 <__cxa_begin_catch+0x14>
   1d64e:	78e2      	ldrb	r2, [r4, #3]
   1d650:	2a43      	cmp	r2, #67	; 0x43
   1d652:	d1f1      	bne.n	1d638 <__cxa_begin_catch+0x14>
   1d654:	7922      	ldrb	r2, [r4, #4]
   1d656:	2a43      	cmp	r2, #67	; 0x43
   1d658:	d1ee      	bne.n	1d638 <__cxa_begin_catch+0x14>
   1d65a:	7962      	ldrb	r2, [r4, #5]
   1d65c:	2a2b      	cmp	r2, #43	; 0x2b
   1d65e:	d1eb      	bne.n	1d638 <__cxa_begin_catch+0x14>
   1d660:	79a2      	ldrb	r2, [r4, #6]
   1d662:	2a2b      	cmp	r2, #43	; 0x2b
   1d664:	d1e8      	bne.n	1d638 <__cxa_begin_catch+0x14>
   1d666:	79e2      	ldrb	r2, [r4, #7]
   1d668:	2a01      	cmp	r2, #1
   1d66a:	d8e5      	bhi.n	1d638 <__cxa_begin_catch+0x14>
   1d66c:	f854 2c0c 	ldr.w	r2, [r4, #-12]
   1d670:	2a00      	cmp	r2, #0
   1d672:	db10      	blt.n	1d696 <__cxa_begin_catch+0x72>
   1d674:	3201      	adds	r2, #1
   1d676:	6845      	ldr	r5, [r0, #4]
   1d678:	f844 2c0c 	str.w	r2, [r4, #-12]
   1d67c:	3d01      	subs	r5, #1
   1d67e:	6045      	str	r5, [r0, #4]
   1d680:	428b      	cmp	r3, r1
   1d682:	bf1c      	itt	ne
   1d684:	f844 3c10 	strne.w	r3, [r4, #-16]
   1d688:	6001      	strne	r1, [r0, #0]
   1d68a:	4620      	mov	r0, r4
   1d68c:	6a64      	ldr	r4, [r4, #36]	; 0x24
   1d68e:	f008 ff39 	bl	26504 <_Unwind_Complete>
   1d692:	4620      	mov	r0, r4
   1d694:	bd38      	pop	{r3, r4, r5, pc}
   1d696:	f1c2 0201 	rsb	r2, r2, #1
   1d69a:	e7ec      	b.n	1d676 <__cxa_begin_catch+0x52>
   1d69c:	f7ff fc64 	bl	1cf68 <_ZSt9terminatev>

0001d6a0 <__cxa_end_catch>:
   1d6a0:	b508      	push	{r3, lr}
   1d6a2:	f000 f843 	bl	1d72c <__cxa_get_globals_fast>
   1d6a6:	4602      	mov	r2, r0
   1d6a8:	6800      	ldr	r0, [r0, #0]
   1d6aa:	2800      	cmp	r0, #0
   1d6ac:	d03d      	beq.n	1d72a <__cxa_end_catch+0x8a>
   1d6ae:	f890 3020 	ldrb.w	r3, [r0, #32]
   1d6b2:	2b47      	cmp	r3, #71	; 0x47
   1d6b4:	d006      	beq.n	1d6c4 <__cxa_end_catch+0x24>
   1d6b6:	2300      	movs	r3, #0
   1d6b8:	6013      	str	r3, [r2, #0]
   1d6ba:	3020      	adds	r0, #32
   1d6bc:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
   1d6c0:	f008 bf22 	b.w	26508 <_Unwind_DeleteException>
   1d6c4:	f890 3021 	ldrb.w	r3, [r0, #33]	; 0x21
   1d6c8:	2b4e      	cmp	r3, #78	; 0x4e
   1d6ca:	d1f4      	bne.n	1d6b6 <__cxa_end_catch+0x16>
   1d6cc:	f890 3022 	ldrb.w	r3, [r0, #34]	; 0x22
   1d6d0:	2b55      	cmp	r3, #85	; 0x55
   1d6d2:	d1f0      	bne.n	1d6b6 <__cxa_end_catch+0x16>
   1d6d4:	f890 3023 	ldrb.w	r3, [r0, #35]	; 0x23
   1d6d8:	2b43      	cmp	r3, #67	; 0x43
   1d6da:	d1ec      	bne.n	1d6b6 <__cxa_end_catch+0x16>
   1d6dc:	f890 3024 	ldrb.w	r3, [r0, #36]	; 0x24
   1d6e0:	2b43      	cmp	r3, #67	; 0x43
   1d6e2:	d1e8      	bne.n	1d6b6 <__cxa_end_catch+0x16>
   1d6e4:	f890 3025 	ldrb.w	r3, [r0, #37]	; 0x25
   1d6e8:	2b2b      	cmp	r3, #43	; 0x2b
   1d6ea:	d1e4      	bne.n	1d6b6 <__cxa_end_catch+0x16>
   1d6ec:	f890 3026 	ldrb.w	r3, [r0, #38]	; 0x26
   1d6f0:	2b2b      	cmp	r3, #43	; 0x2b
   1d6f2:	d1e0      	bne.n	1d6b6 <__cxa_end_catch+0x16>
   1d6f4:	f890 3027 	ldrb.w	r3, [r0, #39]	; 0x27
   1d6f8:	2b01      	cmp	r3, #1
   1d6fa:	d8dc      	bhi.n	1d6b6 <__cxa_end_catch+0x16>
   1d6fc:	6943      	ldr	r3, [r0, #20]
   1d6fe:	2b00      	cmp	r3, #0
   1d700:	db05      	blt.n	1d70e <__cxa_end_catch+0x6e>
   1d702:	3b01      	subs	r3, #1
   1d704:	d008      	beq.n	1d718 <__cxa_end_catch+0x78>
   1d706:	1c5a      	adds	r2, r3, #1
   1d708:	d00d      	beq.n	1d726 <__cxa_end_catch+0x86>
   1d70a:	6143      	str	r3, [r0, #20]
   1d70c:	bd08      	pop	{r3, pc}
   1d70e:	3301      	adds	r3, #1
   1d710:	d1fb      	bne.n	1d70a <__cxa_end_catch+0x6a>
   1d712:	6901      	ldr	r1, [r0, #16]
   1d714:	6011      	str	r1, [r2, #0]
   1d716:	e7f8      	b.n	1d70a <__cxa_end_catch+0x6a>
   1d718:	6903      	ldr	r3, [r0, #16]
   1d71a:	6013      	str	r3, [r2, #0]
   1d71c:	3020      	adds	r0, #32
   1d71e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
   1d722:	f008 bef1 	b.w	26508 <_Unwind_DeleteException>
   1d726:	f7ff fc1f 	bl	1cf68 <_ZSt9terminatev>
   1d72a:	bd08      	pop	{r3, pc}

0001d72c <__cxa_get_globals_fast>:
   1d72c:	4800      	ldr	r0, [pc, #0]	; (1d730 <__cxa_get_globals_fast+0x4>)
   1d72e:	4770      	bx	lr
   1d730:	2000296c 	.word	0x2000296c

0001d734 <__cxa_get_globals>:
   1d734:	4800      	ldr	r0, [pc, #0]	; (1d738 <__cxa_get_globals+0x4>)
   1d736:	4770      	bx	lr
   1d738:	2000296c 	.word	0x2000296c

0001d73c <_ZL28read_encoded_value_with_basehjPKhPj>:
   1d73c:	2850      	cmp	r0, #80	; 0x50
   1d73e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1d740:	d054      	beq.n	1d7ec <_ZL28read_encoded_value_with_basehjPKhPj+0xb0>
   1d742:	f000 040f 	and.w	r4, r0, #15
   1d746:	2c0c      	cmp	r4, #12
   1d748:	d84e      	bhi.n	1d7e8 <_ZL28read_encoded_value_with_basehjPKhPj+0xac>
   1d74a:	e8df f004 	tbb	[pc, r4]
   1d74e:	3907      	.short	0x3907
   1d750:	4d170749 	.word	0x4d170749
   1d754:	1f4d4d4d 	.word	0x1f4d4d4d
   1d758:	071b      	.short	0x071b
   1d75a:	17          	.byte	0x17
   1d75b:	00          	.byte	0x00
   1d75c:	4615      	mov	r5, r2
   1d75e:	f855 4b04 	ldr.w	r4, [r5], #4
   1d762:	b144      	cbz	r4, 1d776 <_ZL28read_encoded_value_with_basehjPKhPj+0x3a>
   1d764:	f000 0670 	and.w	r6, r0, #112	; 0x70
   1d768:	2e10      	cmp	r6, #16
   1d76a:	bf08      	it	eq
   1d76c:	4611      	moveq	r1, r2
   1d76e:	440c      	add	r4, r1
   1d770:	0602      	lsls	r2, r0, #24
   1d772:	bf48      	it	mi
   1d774:	6824      	ldrmi	r4, [r4, #0]
   1d776:	601c      	str	r4, [r3, #0]
   1d778:	4628      	mov	r0, r5
   1d77a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   1d77c:	4615      	mov	r5, r2
   1d77e:	f855 4b08 	ldr.w	r4, [r5], #8
   1d782:	e7ee      	b.n	1d762 <_ZL28read_encoded_value_with_basehjPKhPj+0x26>
   1d784:	4615      	mov	r5, r2
   1d786:	f935 4b02 	ldrsh.w	r4, [r5], #2
   1d78a:	e7ea      	b.n	1d762 <_ZL28read_encoded_value_with_basehjPKhPj+0x26>
   1d78c:	2400      	movs	r4, #0
   1d78e:	4627      	mov	r7, r4
   1d790:	4615      	mov	r5, r2
   1d792:	f815 eb01 	ldrb.w	lr, [r5], #1
   1d796:	f00e 067f 	and.w	r6, lr, #127	; 0x7f
   1d79a:	40be      	lsls	r6, r7
   1d79c:	f01e 0f80 	tst.w	lr, #128	; 0x80
   1d7a0:	ea44 0406 	orr.w	r4, r4, r6
   1d7a4:	f107 0707 	add.w	r7, r7, #7
   1d7a8:	d1f3      	bne.n	1d792 <_ZL28read_encoded_value_with_basehjPKhPj+0x56>
   1d7aa:	2f1f      	cmp	r7, #31
   1d7ac:	d8d9      	bhi.n	1d762 <_ZL28read_encoded_value_with_basehjPKhPj+0x26>
   1d7ae:	f01e 0f40 	tst.w	lr, #64	; 0x40
   1d7b2:	d0d6      	beq.n	1d762 <_ZL28read_encoded_value_with_basehjPKhPj+0x26>
   1d7b4:	f04f 36ff 	mov.w	r6, #4294967295
   1d7b8:	fa06 f707 	lsl.w	r7, r6, r7
   1d7bc:	433c      	orrs	r4, r7
   1d7be:	e7d1      	b.n	1d764 <_ZL28read_encoded_value_with_basehjPKhPj+0x28>
   1d7c0:	2400      	movs	r4, #0
   1d7c2:	4627      	mov	r7, r4
   1d7c4:	4615      	mov	r5, r2
   1d7c6:	f815 eb01 	ldrb.w	lr, [r5], #1
   1d7ca:	f00e 067f 	and.w	r6, lr, #127	; 0x7f
   1d7ce:	40be      	lsls	r6, r7
   1d7d0:	f01e 0f80 	tst.w	lr, #128	; 0x80
   1d7d4:	ea44 0406 	orr.w	r4, r4, r6
   1d7d8:	f107 0707 	add.w	r7, r7, #7
   1d7dc:	d1f3      	bne.n	1d7c6 <_ZL28read_encoded_value_with_basehjPKhPj+0x8a>
   1d7de:	e7c0      	b.n	1d762 <_ZL28read_encoded_value_with_basehjPKhPj+0x26>
   1d7e0:	4615      	mov	r5, r2
   1d7e2:	f835 4b02 	ldrh.w	r4, [r5], #2
   1d7e6:	e7bc      	b.n	1d762 <_ZL28read_encoded_value_with_basehjPKhPj+0x26>
   1d7e8:	f009 fc44 	bl	27074 <abort>
   1d7ec:	3203      	adds	r2, #3
   1d7ee:	f022 0503 	bic.w	r5, r2, #3
   1d7f2:	f855 4b04 	ldr.w	r4, [r5], #4
   1d7f6:	601c      	str	r4, [r3, #0]
   1d7f8:	4628      	mov	r0, r5
   1d7fa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0001d7fc <_ZL21base_of_encoded_valuehP15_Unwind_Context>:
   1d7fc:	28ff      	cmp	r0, #255	; 0xff
   1d7fe:	d00d      	beq.n	1d81c <_ZL21base_of_encoded_valuehP15_Unwind_Context+0x20>
   1d800:	f000 0070 	and.w	r0, r0, #112	; 0x70
   1d804:	2820      	cmp	r0, #32
   1d806:	d015      	beq.n	1d834 <_ZL21base_of_encoded_valuehP15_Unwind_Context+0x38>
   1d808:	d90a      	bls.n	1d820 <_ZL21base_of_encoded_valuehP15_Unwind_Context+0x24>
   1d80a:	2840      	cmp	r0, #64	; 0x40
   1d80c:	d00f      	beq.n	1d82e <_ZL21base_of_encoded_valuehP15_Unwind_Context+0x32>
   1d80e:	2850      	cmp	r0, #80	; 0x50
   1d810:	d004      	beq.n	1d81c <_ZL21base_of_encoded_valuehP15_Unwind_Context+0x20>
   1d812:	2830      	cmp	r0, #48	; 0x30
   1d814:	d108      	bne.n	1d828 <_ZL21base_of_encoded_valuehP15_Unwind_Context+0x2c>
   1d816:	4608      	mov	r0, r1
   1d818:	f009 bc26 	b.w	27068 <_Unwind_GetDataRelBase>
   1d81c:	2000      	movs	r0, #0
   1d81e:	4770      	bx	lr
   1d820:	2800      	cmp	r0, #0
   1d822:	d0fb      	beq.n	1d81c <_ZL21base_of_encoded_valuehP15_Unwind_Context+0x20>
   1d824:	2810      	cmp	r0, #16
   1d826:	d0f9      	beq.n	1d81c <_ZL21base_of_encoded_valuehP15_Unwind_Context+0x20>
   1d828:	b508      	push	{r3, lr}
   1d82a:	f009 fc23 	bl	27074 <abort>
   1d82e:	4608      	mov	r0, r1
   1d830:	f009 bc06 	b.w	27040 <_Unwind_GetRegionStart>
   1d834:	4608      	mov	r0, r1
   1d836:	f009 bc13 	b.w	27060 <_Unwind_GetTextRelBase>
   1d83a:	bf00      	nop

0001d83c <_ZL17parse_lsda_headerP15_Unwind_ContextPKhP16lsda_header_info>:
   1d83c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1d83e:	460c      	mov	r4, r1
   1d840:	4615      	mov	r5, r2
   1d842:	4607      	mov	r7, r0
   1d844:	2800      	cmp	r0, #0
   1d846:	d044      	beq.n	1d8d2 <_ZL17parse_lsda_headerP15_Unwind_ContextPKhP16lsda_header_info+0x96>
   1d848:	f009 fbfa 	bl	27040 <_Unwind_GetRegionStart>
   1d84c:	6028      	str	r0, [r5, #0]
   1d84e:	7826      	ldrb	r6, [r4, #0]
   1d850:	2eff      	cmp	r6, #255	; 0xff
   1d852:	f104 0401 	add.w	r4, r4, #1
   1d856:	d032      	beq.n	1d8be <_ZL17parse_lsda_headerP15_Unwind_ContextPKhP16lsda_header_info+0x82>
   1d858:	4639      	mov	r1, r7
   1d85a:	4630      	mov	r0, r6
   1d85c:	f7ff ffce 	bl	1d7fc <_ZL21base_of_encoded_valuehP15_Unwind_Context>
   1d860:	4622      	mov	r2, r4
   1d862:	4601      	mov	r1, r0
   1d864:	1d2b      	adds	r3, r5, #4
   1d866:	4630      	mov	r0, r6
   1d868:	f7ff ff68 	bl	1d73c <_ZL28read_encoded_value_with_basehjPKhPj>
   1d86c:	4604      	mov	r4, r0
   1d86e:	1c60      	adds	r0, r4, #1
   1d870:	7823      	ldrb	r3, [r4, #0]
   1d872:	752b      	strb	r3, [r5, #20]
   1d874:	2bff      	cmp	r3, #255	; 0xff
   1d876:	d029      	beq.n	1d8cc <_ZL17parse_lsda_headerP15_Unwind_ContextPKhP16lsda_header_info+0x90>
   1d878:	2310      	movs	r3, #16
   1d87a:	2400      	movs	r4, #0
   1d87c:	752b      	strb	r3, [r5, #20]
   1d87e:	4622      	mov	r2, r4
   1d880:	f810 1b01 	ldrb.w	r1, [r0], #1
   1d884:	f001 037f 	and.w	r3, r1, #127	; 0x7f
   1d888:	4093      	lsls	r3, r2
   1d88a:	0609      	lsls	r1, r1, #24
   1d88c:	ea44 0403 	orr.w	r4, r4, r3
   1d890:	f102 0207 	add.w	r2, r2, #7
   1d894:	d4f4      	bmi.n	1d880 <_ZL17parse_lsda_headerP15_Unwind_ContextPKhP16lsda_header_info+0x44>
   1d896:	4404      	add	r4, r0
   1d898:	60ec      	str	r4, [r5, #12]
   1d89a:	7803      	ldrb	r3, [r0, #0]
   1d89c:	756b      	strb	r3, [r5, #21]
   1d89e:	2400      	movs	r4, #0
   1d8a0:	3001      	adds	r0, #1
   1d8a2:	4622      	mov	r2, r4
   1d8a4:	f810 1b01 	ldrb.w	r1, [r0], #1
   1d8a8:	f001 037f 	and.w	r3, r1, #127	; 0x7f
   1d8ac:	4093      	lsls	r3, r2
   1d8ae:	431c      	orrs	r4, r3
   1d8b0:	060b      	lsls	r3, r1, #24
   1d8b2:	f102 0207 	add.w	r2, r2, #7
   1d8b6:	d4f5      	bmi.n	1d8a4 <_ZL17parse_lsda_headerP15_Unwind_ContextPKhP16lsda_header_info+0x68>
   1d8b8:	4404      	add	r4, r0
   1d8ba:	612c      	str	r4, [r5, #16]
   1d8bc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   1d8be:	6068      	str	r0, [r5, #4]
   1d8c0:	7823      	ldrb	r3, [r4, #0]
   1d8c2:	752b      	strb	r3, [r5, #20]
   1d8c4:	2bff      	cmp	r3, #255	; 0xff
   1d8c6:	f104 0001 	add.w	r0, r4, #1
   1d8ca:	d1d5      	bne.n	1d878 <_ZL17parse_lsda_headerP15_Unwind_ContextPKhP16lsda_header_info+0x3c>
   1d8cc:	2300      	movs	r3, #0
   1d8ce:	60eb      	str	r3, [r5, #12]
   1d8d0:	e7e3      	b.n	1d89a <_ZL17parse_lsda_headerP15_Unwind_ContextPKhP16lsda_header_info+0x5e>
   1d8d2:	e7bb      	b.n	1d84c <_ZL17parse_lsda_headerP15_Unwind_ContextPKhP16lsda_header_info+0x10>

0001d8d4 <__gxx_personality_v0>:
   1d8d4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1d8d8:	f000 0403 	and.w	r4, r0, #3
   1d8dc:	b097      	sub	sp, #92	; 0x5c
   1d8de:	2300      	movs	r3, #0
   1d8e0:	2c01      	cmp	r4, #1
   1d8e2:	4689      	mov	r9, r1
   1d8e4:	4617      	mov	r7, r2
   1d8e6:	930a      	str	r3, [sp, #40]	; 0x28
   1d8e8:	d01e      	beq.n	1d928 <__gxx_personality_v0+0x54>
   1d8ea:	d30e      	bcc.n	1d90a <__gxx_personality_v0+0x36>
   1d8ec:	2c02      	cmp	r4, #2
   1d8ee:	d10a      	bne.n	1d906 <__gxx_personality_v0+0x32>
   1d8f0:	4639      	mov	r1, r7
   1d8f2:	4648      	mov	r0, r9
   1d8f4:	f009 fb90 	bl	27018 <__gnu_unwind_frame>
   1d8f8:	2800      	cmp	r0, #0
   1d8fa:	f000 80a5 	beq.w	1da48 <__gxx_personality_v0+0x174>
   1d8fe:	2009      	movs	r0, #9
   1d900:	b017      	add	sp, #92	; 0x5c
   1d902:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1d906:	f009 fbb5 	bl	27074 <abort>
   1d90a:	0700      	lsls	r0, r0, #28
   1d90c:	d4f0      	bmi.n	1d8f0 <__gxx_personality_v0+0x1c>
   1d90e:	2301      	movs	r3, #1
   1d910:	9303      	str	r3, [sp, #12]
   1d912:	aa16      	add	r2, sp, #88	; 0x58
   1d914:	2300      	movs	r3, #0
   1d916:	f842 9d2c 	str.w	r9, [r2, #-44]!
   1d91a:	4619      	mov	r1, r3
   1d91c:	9200      	str	r2, [sp, #0]
   1d91e:	4638      	mov	r0, r7
   1d920:	220c      	movs	r2, #12
   1d922:	f008 fe1d 	bl	26560 <_Unwind_VRS_Set>
   1d926:	e00f      	b.n	1d948 <__gxx_personality_v0+0x74>
   1d928:	f010 0408 	ands.w	r4, r0, #8
   1d92c:	f000 8090 	beq.w	1da50 <__gxx_personality_v0+0x17c>
   1d930:	aa16      	add	r2, sp, #88	; 0x58
   1d932:	f044 0402 	orr.w	r4, r4, #2
   1d936:	f842 1d2c 	str.w	r1, [r2, #-44]!
   1d93a:	4638      	mov	r0, r7
   1d93c:	9200      	str	r2, [sp, #0]
   1d93e:	4619      	mov	r1, r3
   1d940:	220c      	movs	r2, #12
   1d942:	9403      	str	r4, [sp, #12]
   1d944:	f008 fe0c 	bl	26560 <_Unwind_VRS_Set>
   1d948:	4638      	mov	r0, r7
   1d94a:	f009 fb7f 	bl	2704c <_Unwind_GetLanguageSpecificData>
   1d94e:	9005      	str	r0, [sp, #20]
   1d950:	2800      	cmp	r0, #0
   1d952:	d0cd      	beq.n	1d8f0 <__gxx_personality_v0+0x1c>
   1d954:	ab10      	add	r3, sp, #64	; 0x40
   1d956:	461a      	mov	r2, r3
   1d958:	9905      	ldr	r1, [sp, #20]
   1d95a:	9306      	str	r3, [sp, #24]
   1d95c:	4638      	mov	r0, r7
   1d95e:	f7ff ff6d 	bl	1d83c <_ZL17parse_lsda_headerP15_Unwind_ContextPKhP16lsda_header_info>
   1d962:	4639      	mov	r1, r7
   1d964:	4604      	mov	r4, r0
   1d966:	f89d 0054 	ldrb.w	r0, [sp, #84]	; 0x54
   1d96a:	f7ff ff47 	bl	1d7fc <_ZL21base_of_encoded_valuehP15_Unwind_Context>
   1d96e:	f10d 0b3c 	add.w	fp, sp, #60	; 0x3c
   1d972:	2300      	movs	r3, #0
   1d974:	9012      	str	r0, [sp, #72]	; 0x48
   1d976:	4619      	mov	r1, r3
   1d978:	220f      	movs	r2, #15
   1d97a:	f8cd b000 	str.w	fp, [sp]
   1d97e:	4638      	mov	r0, r7
   1d980:	f008 fdc8 	bl	26514 <_Unwind_VRS_Get>
   1d984:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   1d986:	9a14      	ldr	r2, [sp, #80]	; 0x50
   1d988:	f023 0301 	bic.w	r3, r3, #1
   1d98c:	42a2      	cmp	r2, r4
   1d98e:	f103 36ff 	add.w	r6, r3, #4294967295
   1d992:	d975      	bls.n	1da80 <__gxx_personality_v0+0x1ac>
   1d994:	f10d 0a34 	add.w	sl, sp, #52	; 0x34
   1d998:	f10d 0838 	add.w	r8, sp, #56	; 0x38
   1d99c:	f89d 5055 	ldrb.w	r5, [sp, #85]	; 0x55
   1d9a0:	2100      	movs	r1, #0
   1d9a2:	4628      	mov	r0, r5
   1d9a4:	f7ff ff2a 	bl	1d7fc <_ZL21base_of_encoded_valuehP15_Unwind_Context>
   1d9a8:	4622      	mov	r2, r4
   1d9aa:	4653      	mov	r3, sl
   1d9ac:	4601      	mov	r1, r0
   1d9ae:	4628      	mov	r0, r5
   1d9b0:	f7ff fec4 	bl	1d73c <_ZL28read_encoded_value_with_basehjPKhPj>
   1d9b4:	f89d 4055 	ldrb.w	r4, [sp, #85]	; 0x55
   1d9b8:	4605      	mov	r5, r0
   1d9ba:	2100      	movs	r1, #0
   1d9bc:	4620      	mov	r0, r4
   1d9be:	f7ff ff1d 	bl	1d7fc <_ZL21base_of_encoded_valuehP15_Unwind_Context>
   1d9c2:	462a      	mov	r2, r5
   1d9c4:	4643      	mov	r3, r8
   1d9c6:	4601      	mov	r1, r0
   1d9c8:	4620      	mov	r0, r4
   1d9ca:	f7ff feb7 	bl	1d73c <_ZL28read_encoded_value_with_basehjPKhPj>
   1d9ce:	f89d 4055 	ldrb.w	r4, [sp, #85]	; 0x55
   1d9d2:	4605      	mov	r5, r0
   1d9d4:	2100      	movs	r1, #0
   1d9d6:	4620      	mov	r0, r4
   1d9d8:	f7ff ff10 	bl	1d7fc <_ZL21base_of_encoded_valuehP15_Unwind_Context>
   1d9dc:	462a      	mov	r2, r5
   1d9de:	4601      	mov	r1, r0
   1d9e0:	465b      	mov	r3, fp
   1d9e2:	4620      	mov	r0, r4
   1d9e4:	f7ff feaa 	bl	1d73c <_ZL28read_encoded_value_with_basehjPKhPj>
   1d9e8:	4604      	mov	r4, r0
   1d9ea:	2000      	movs	r0, #0
   1d9ec:	4602      	mov	r2, r0
   1d9ee:	f814 1b01 	ldrb.w	r1, [r4], #1
   1d9f2:	f001 037f 	and.w	r3, r1, #127	; 0x7f
   1d9f6:	4093      	lsls	r3, r2
   1d9f8:	0609      	lsls	r1, r1, #24
   1d9fa:	ea40 0003 	orr.w	r0, r0, r3
   1d9fe:	f102 0207 	add.w	r2, r2, #7
   1da02:	d4f4      	bmi.n	1d9ee <__gxx_personality_v0+0x11a>
   1da04:	9b10      	ldr	r3, [sp, #64]	; 0x40
   1da06:	9a0d      	ldr	r2, [sp, #52]	; 0x34
   1da08:	4413      	add	r3, r2
   1da0a:	429e      	cmp	r6, r3
   1da0c:	d231      	bcs.n	1da72 <__gxx_personality_v0+0x19e>
   1da0e:	9b03      	ldr	r3, [sp, #12]
   1da10:	07db      	lsls	r3, r3, #31
   1da12:	d539      	bpl.n	1da88 <__gxx_personality_v0+0x1b4>
   1da14:	2500      	movs	r5, #0
   1da16:	9504      	str	r5, [sp, #16]
   1da18:	2300      	movs	r3, #0
   1da1a:	4619      	mov	r1, r3
   1da1c:	220d      	movs	r2, #13
   1da1e:	f8cd 8000 	str.w	r8, [sp]
   1da22:	4638      	mov	r0, r7
   1da24:	9c0a      	ldr	r4, [sp, #40]	; 0x28
   1da26:	f008 fd75 	bl	26514 <_Unwind_VRS_Get>
   1da2a:	9a05      	ldr	r2, [sp, #20]
   1da2c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   1da2e:	f8c9 202c 	str.w	r2, [r9, #44]	; 0x2c
   1da32:	9a04      	ldr	r2, [sp, #16]
   1da34:	f8c9 4024 	str.w	r4, [r9, #36]	; 0x24
   1da38:	f8c9 5028 	str.w	r5, [r9, #40]	; 0x28
   1da3c:	f8c9 2030 	str.w	r2, [r9, #48]	; 0x30
   1da40:	f8c9 3020 	str.w	r3, [r9, #32]
   1da44:	2006      	movs	r0, #6
   1da46:	e75b      	b.n	1d900 <__gxx_personality_v0+0x2c>
   1da48:	2008      	movs	r0, #8
   1da4a:	b017      	add	sp, #92	; 0x5c
   1da4c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1da50:	ab10      	add	r3, sp, #64	; 0x40
   1da52:	9300      	str	r3, [sp, #0]
   1da54:	9306      	str	r3, [sp, #24]
   1da56:	220d      	movs	r2, #13
   1da58:	4623      	mov	r3, r4
   1da5a:	4621      	mov	r1, r4
   1da5c:	4638      	mov	r0, r7
   1da5e:	f8d9 5020 	ldr.w	r5, [r9, #32]
   1da62:	f008 fd57 	bl	26514 <_Unwind_VRS_Get>
   1da66:	9b10      	ldr	r3, [sp, #64]	; 0x40
   1da68:	429d      	cmp	r5, r3
   1da6a:	d012      	beq.n	1da92 <__gxx_personality_v0+0x1be>
   1da6c:	2302      	movs	r3, #2
   1da6e:	9303      	str	r3, [sp, #12]
   1da70:	e74f      	b.n	1d912 <__gxx_personality_v0+0x3e>
   1da72:	9a0e      	ldr	r2, [sp, #56]	; 0x38
   1da74:	4413      	add	r3, r2
   1da76:	429e      	cmp	r6, r3
   1da78:	d359      	bcc.n	1db2e <__gxx_personality_v0+0x25a>
   1da7a:	9b14      	ldr	r3, [sp, #80]	; 0x50
   1da7c:	42a3      	cmp	r3, r4
   1da7e:	d88d      	bhi.n	1d99c <__gxx_personality_v0+0xc8>
   1da80:	2500      	movs	r5, #0
   1da82:	9504      	str	r5, [sp, #16]
   1da84:	2401      	movs	r4, #1
   1da86:	e105      	b.n	1dc94 <__gxx_personality_v0+0x3c0>
   1da88:	9b03      	ldr	r3, [sp, #12]
   1da8a:	071b      	lsls	r3, r3, #28
   1da8c:	d54c      	bpl.n	1db28 <__gxx_personality_v0+0x254>
   1da8e:	f7ff fa6b 	bl	1cf68 <_ZSt9terminatev>
   1da92:	aa16      	add	r2, sp, #88	; 0x58
   1da94:	4623      	mov	r3, r4
   1da96:	f842 9d2c 	str.w	r9, [r2, #-44]!
   1da9a:	4621      	mov	r1, r4
   1da9c:	9200      	str	r2, [sp, #0]
   1da9e:	4638      	mov	r0, r7
   1daa0:	220c      	movs	r2, #12
   1daa2:	f008 fd5d 	bl	26560 <_Unwind_VRS_Set>
   1daa6:	f8d9 3030 	ldr.w	r3, [r9, #48]	; 0x30
   1daaa:	9304      	str	r3, [sp, #16]
   1daac:	2b00      	cmp	r3, #0
   1daae:	d03b      	beq.n	1db28 <__gxx_personality_v0+0x254>
   1dab0:	f8d9 5028 	ldr.w	r5, [r9, #40]	; 0x28
   1dab4:	f8d9 102c 	ldr.w	r1, [r9, #44]	; 0x2c
   1dab8:	2403      	movs	r4, #3
   1daba:	2d00      	cmp	r5, #0
   1dabc:	f2c0 8106 	blt.w	1dccc <__gxx_personality_v0+0x3f8>
   1dac0:	f10d 0a34 	add.w	sl, sp, #52	; 0x34
   1dac4:	f10d 0838 	add.w	r8, sp, #56	; 0x38
   1dac8:	a916      	add	r1, sp, #88	; 0x58
   1daca:	2300      	movs	r3, #0
   1dacc:	f841 9d28 	str.w	r9, [r1, #-40]!
   1dad0:	461a      	mov	r2, r3
   1dad2:	9100      	str	r1, [sp, #0]
   1dad4:	4638      	mov	r0, r7
   1dad6:	4619      	mov	r1, r3
   1dad8:	f008 fd42 	bl	26560 <_Unwind_VRS_Set>
   1dadc:	2300      	movs	r3, #0
   1dade:	4619      	mov	r1, r3
   1dae0:	2201      	movs	r2, #1
   1dae2:	f8cd a000 	str.w	sl, [sp]
   1dae6:	4638      	mov	r0, r7
   1dae8:	950d      	str	r5, [sp, #52]	; 0x34
   1daea:	f008 fd39 	bl	26560 <_Unwind_VRS_Set>
   1daee:	2300      	movs	r3, #0
   1daf0:	4619      	mov	r1, r3
   1daf2:	220f      	movs	r2, #15
   1daf4:	f8cd 8000 	str.w	r8, [sp]
   1daf8:	4638      	mov	r0, r7
   1dafa:	f008 fd0b 	bl	26514 <_Unwind_VRS_Get>
   1dafe:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   1db00:	9a04      	ldr	r2, [sp, #16]
   1db02:	f8cd 8000 	str.w	r8, [sp]
   1db06:	f003 0501 	and.w	r5, r3, #1
   1db0a:	2300      	movs	r3, #0
   1db0c:	4315      	orrs	r5, r2
   1db0e:	4638      	mov	r0, r7
   1db10:	4619      	mov	r1, r3
   1db12:	220f      	movs	r2, #15
   1db14:	950e      	str	r5, [sp, #56]	; 0x38
   1db16:	f008 fd23 	bl	26560 <_Unwind_VRS_Set>
   1db1a:	2c02      	cmp	r4, #2
   1db1c:	f000 8080 	beq.w	1dc20 <__gxx_personality_v0+0x34c>
   1db20:	2007      	movs	r0, #7
   1db22:	b017      	add	sp, #92	; 0x5c
   1db24:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1db28:	4648      	mov	r0, r9
   1db2a:	f7ff fcfb 	bl	1d524 <__cxa_call_terminate>
   1db2e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   1db30:	9304      	str	r3, [sp, #16]
   1db32:	461a      	mov	r2, r3
   1db34:	2b00      	cmp	r3, #0
   1db36:	d178      	bne.n	1dc2a <__gxx_personality_v0+0x356>
   1db38:	2800      	cmp	r0, #0
   1db3a:	f43f aed9 	beq.w	1d8f0 <__gxx_personality_v0+0x1c>
   1db3e:	9b14      	ldr	r3, [sp, #80]	; 0x50
   1db40:	9a04      	ldr	r2, [sp, #16]
   1db42:	3801      	subs	r0, #1
   1db44:	4403      	add	r3, r0
   1db46:	2a00      	cmp	r2, #0
   1db48:	f43f aed2 	beq.w	1d8f0 <__gxx_personality_v0+0x1c>
   1db4c:	2b00      	cmp	r3, #0
   1db4e:	d075      	beq.n	1dc3c <__gxx_personality_v0+0x368>
   1db50:	9a03      	ldr	r2, [sp, #12]
   1db52:	f012 0208 	ands.w	r2, r2, #8
   1db56:	9209      	str	r2, [sp, #36]	; 0x24
   1db58:	f000 80f6 	beq.w	1dd48 <__gxx_personality_v0+0x474>
   1db5c:	2147      	movs	r1, #71	; 0x47
   1db5e:	224e      	movs	r2, #78	; 0x4e
   1db60:	f889 1000 	strb.w	r1, [r9]
   1db64:	f889 2001 	strb.w	r2, [r9, #1]
   1db68:	2155      	movs	r1, #85	; 0x55
   1db6a:	2243      	movs	r2, #67	; 0x43
   1db6c:	f889 1002 	strb.w	r1, [r9, #2]
   1db70:	f889 2003 	strb.w	r2, [r9, #3]
   1db74:	2146      	movs	r1, #70	; 0x46
   1db76:	224f      	movs	r2, #79	; 0x4f
   1db78:	f889 1004 	strb.w	r1, [r9, #4]
   1db7c:	f889 2005 	strb.w	r2, [r9, #5]
   1db80:	2152      	movs	r1, #82	; 0x52
   1db82:	2200      	movs	r2, #0
   1db84:	f889 1006 	strb.w	r1, [r9, #6]
   1db88:	f889 2007 	strb.w	r2, [r9, #7]
   1db8c:	2200      	movs	r2, #0
   1db8e:	9208      	str	r2, [sp, #32]
   1db90:	9707      	str	r7, [sp, #28]
   1db92:	2500      	movs	r5, #0
   1db94:	4629      	mov	r1, r5
   1db96:	e000      	b.n	1db9a <__gxx_personality_v0+0x2c6>
   1db98:	4623      	mov	r3, r4
   1db9a:	461c      	mov	r4, r3
   1db9c:	f814 0b01 	ldrb.w	r0, [r4], #1
   1dba0:	f000 027f 	and.w	r2, r0, #127	; 0x7f
   1dba4:	408a      	lsls	r2, r1
   1dba6:	0606      	lsls	r6, r0, #24
   1dba8:	ea45 0502 	orr.w	r5, r5, r2
   1dbac:	f101 0107 	add.w	r1, r1, #7
   1dbb0:	d4f2      	bmi.n	1db98 <__gxx_personality_v0+0x2c4>
   1dbb2:	291f      	cmp	r1, #31
   1dbb4:	d805      	bhi.n	1dbc2 <__gxx_personality_v0+0x2ee>
   1dbb6:	0642      	lsls	r2, r0, #25
   1dbb8:	d503      	bpl.n	1dbc2 <__gxx_personality_v0+0x2ee>
   1dbba:	2201      	movs	r2, #1
   1dbbc:	408a      	lsls	r2, r1
   1dbbe:	4252      	negs	r2, r2
   1dbc0:	4315      	orrs	r5, r2
   1dbc2:	2600      	movs	r6, #0
   1dbc4:	4631      	mov	r1, r6
   1dbc6:	f813 0f01 	ldrb.w	r0, [r3, #1]!
   1dbca:	f000 027f 	and.w	r2, r0, #127	; 0x7f
   1dbce:	408a      	lsls	r2, r1
   1dbd0:	0607      	lsls	r7, r0, #24
   1dbd2:	ea46 0602 	orr.w	r6, r6, r2
   1dbd6:	f101 0107 	add.w	r1, r1, #7
   1dbda:	d4f4      	bmi.n	1dbc6 <__gxx_personality_v0+0x2f2>
   1dbdc:	291f      	cmp	r1, #31
   1dbde:	d805      	bhi.n	1dbec <__gxx_personality_v0+0x318>
   1dbe0:	0640      	lsls	r0, r0, #25
   1dbe2:	d503      	bpl.n	1dbec <__gxx_personality_v0+0x318>
   1dbe4:	2301      	movs	r3, #1
   1dbe6:	408b      	lsls	r3, r1
   1dbe8:	425b      	negs	r3, r3
   1dbea:	431e      	orrs	r6, r3
   1dbec:	2d00      	cmp	r5, #0
   1dbee:	d05c      	beq.n	1dcaa <__gxx_personality_v0+0x3d6>
   1dbf0:	dd5e      	ble.n	1dcb0 <__gxx_personality_v0+0x3dc>
   1dbf2:	f89d 0054 	ldrb.w	r0, [sp, #84]	; 0x54
   1dbf6:	28ff      	cmp	r0, #255	; 0xff
   1dbf8:	f000 80a4 	beq.w	1dd44 <__gxx_personality_v0+0x470>
   1dbfc:	f000 0307 	and.w	r3, r0, #7
   1dc00:	2b04      	cmp	r3, #4
   1dc02:	f63f ae80 	bhi.w	1d906 <__gxx_personality_v0+0x32>
   1dc06:	a201      	add	r2, pc, #4	; (adr r2, 1dc0c <__gxx_personality_v0+0x338>)
   1dc08:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   1dc0c:	0001dc77 	.word	0x0001dc77
   1dc10:	0001d907 	.word	0x0001d907
   1dc14:	0001dc7d 	.word	0x0001dc7d
   1dc18:	0001dc77 	.word	0x0001dc77
   1dc1c:	0001dc55 	.word	0x0001dc55
   1dc20:	4648      	mov	r0, r9
   1dc22:	f7ff fbf7 	bl	1d414 <__cxa_begin_cleanup>
   1dc26:	2007      	movs	r0, #7
   1dc28:	e66a      	b.n	1d900 <__gxx_personality_v0+0x2c>
   1dc2a:	9b11      	ldr	r3, [sp, #68]	; 0x44
   1dc2c:	441a      	add	r2, r3
   1dc2e:	9204      	str	r2, [sp, #16]
   1dc30:	2800      	cmp	r0, #0
   1dc32:	d184      	bne.n	1db3e <__gxx_personality_v0+0x26a>
   1dc34:	9b04      	ldr	r3, [sp, #16]
   1dc36:	2b00      	cmp	r3, #0
   1dc38:	f43f ae5a 	beq.w	1d8f0 <__gxx_personality_v0+0x1c>
   1dc3c:	9b03      	ldr	r3, [sp, #12]
   1dc3e:	f013 0301 	ands.w	r3, r3, #1
   1dc42:	f47f ae55 	bne.w	1d8f0 <__gxx_personality_v0+0x1c>
   1dc46:	9a03      	ldr	r2, [sp, #12]
   1dc48:	f012 0508 	ands.w	r5, r2, #8
   1dc4c:	f040 8097 	bne.w	1dd7e <__gxx_personality_v0+0x4aa>
   1dc50:	2402      	movs	r4, #2
   1dc52:	e739      	b.n	1dac8 <__gxx_personality_v0+0x1f4>
   1dc54:	00eb      	lsls	r3, r5, #3
   1dc56:	425b      	negs	r3, r3
   1dc58:	9a13      	ldr	r2, [sp, #76]	; 0x4c
   1dc5a:	9912      	ldr	r1, [sp, #72]	; 0x48
   1dc5c:	441a      	add	r2, r3
   1dc5e:	4643      	mov	r3, r8
   1dc60:	f7ff fd6c 	bl	1d73c <_ZL28read_encoded_value_with_basehjPKhPj>
   1dc64:	990e      	ldr	r1, [sp, #56]	; 0x38
   1dc66:	b199      	cbz	r1, 1dc90 <__gxx_personality_v0+0x3bc>
   1dc68:	f1b9 0f00 	cmp.w	r9, #0
   1dc6c:	d109      	bne.n	1dc82 <__gxx_personality_v0+0x3ae>
   1dc6e:	2e00      	cmp	r6, #0
   1dc70:	d077      	beq.n	1dd62 <__gxx_personality_v0+0x48e>
   1dc72:	19a3      	adds	r3, r4, r6
   1dc74:	e78d      	b.n	1db92 <__gxx_personality_v0+0x2be>
   1dc76:	00ab      	lsls	r3, r5, #2
   1dc78:	425b      	negs	r3, r3
   1dc7a:	e7ed      	b.n	1dc58 <__gxx_personality_v0+0x384>
   1dc7c:	006b      	lsls	r3, r5, #1
   1dc7e:	425b      	negs	r3, r3
   1dc80:	e7ea      	b.n	1dc58 <__gxx_personality_v0+0x384>
   1dc82:	ab0a      	add	r3, sp, #40	; 0x28
   1dc84:	2200      	movs	r2, #0
   1dc86:	4648      	mov	r0, r9
   1dc88:	f7ff fb68 	bl	1d35c <__cxa_type_match>
   1dc8c:	2800      	cmp	r0, #0
   1dc8e:	d0ee      	beq.n	1dc6e <__gxx_personality_v0+0x39a>
   1dc90:	9f07      	ldr	r7, [sp, #28]
   1dc92:	2403      	movs	r4, #3
   1dc94:	9b03      	ldr	r3, [sp, #12]
   1dc96:	07da      	lsls	r2, r3, #31
   1dc98:	d460      	bmi.n	1dd5c <__gxx_personality_v0+0x488>
   1dc9a:	9b03      	ldr	r3, [sp, #12]
   1dc9c:	0719      	lsls	r1, r3, #28
   1dc9e:	d466      	bmi.n	1dd6e <__gxx_personality_v0+0x49a>
   1dca0:	2c01      	cmp	r4, #1
   1dca2:	f43f af41 	beq.w	1db28 <__gxx_personality_v0+0x254>
   1dca6:	9905      	ldr	r1, [sp, #20]
   1dca8:	e707      	b.n	1daba <__gxx_personality_v0+0x1e6>
   1dcaa:	2301      	movs	r3, #1
   1dcac:	9308      	str	r3, [sp, #32]
   1dcae:	e7de      	b.n	1dc6e <__gxx_personality_v0+0x39a>
   1dcb0:	f1b9 0f00 	cmp.w	r9, #0
   1dcb4:	d001      	beq.n	1dcba <__gxx_personality_v0+0x3e6>
   1dcb6:	9b09      	ldr	r3, [sp, #36]	; 0x24
   1dcb8:	b35b      	cbz	r3, 1dd12 <__gxx_personality_v0+0x43e>
   1dcba:	1c6b      	adds	r3, r5, #1
   1dcbc:	ebc3 7383 	rsb	r3, r3, r3, lsl #30
   1dcc0:	9a13      	ldr	r2, [sp, #76]	; 0x4c
   1dcc2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   1dcc6:	2b00      	cmp	r3, #0
   1dcc8:	d1d1      	bne.n	1dc6e <__gxx_personality_v0+0x39a>
   1dcca:	e7e1      	b.n	1dc90 <__gxx_personality_v0+0x3bc>
   1dccc:	9a06      	ldr	r2, [sp, #24]
   1dcce:	4638      	mov	r0, r7
   1dcd0:	f7ff fdb4 	bl	1d83c <_ZL17parse_lsda_headerP15_Unwind_ContextPKhP16lsda_header_info>
   1dcd4:	4639      	mov	r1, r7
   1dcd6:	f89d 0054 	ldrb.w	r0, [sp, #84]	; 0x54
   1dcda:	f7ff fd8f 	bl	1d7fc <_ZL21base_of_encoded_valuehP15_Unwind_Context>
   1dcde:	00aa      	lsls	r2, r5, #2
   1dce0:	f082 0203 	eor.w	r2, r2, #3
   1dce4:	43d2      	mvns	r2, r2
   1dce6:	9e13      	ldr	r6, [sp, #76]	; 0x4c
   1dce8:	9012      	str	r0, [sp, #72]	; 0x48
   1dcea:	58b3      	ldr	r3, [r6, r2]
   1dcec:	4416      	add	r6, r2
   1dcee:	b133      	cbz	r3, 1dcfe <__gxx_personality_v0+0x42a>
   1dcf0:	4632      	mov	r2, r6
   1dcf2:	2300      	movs	r3, #0
   1dcf4:	f852 1f04 	ldr.w	r1, [r2, #4]!
   1dcf8:	3301      	adds	r3, #1
   1dcfa:	2900      	cmp	r1, #0
   1dcfc:	d1fa      	bne.n	1dcf4 <__gxx_personality_v0+0x420>
   1dcfe:	2204      	movs	r2, #4
   1dd00:	f8c9 3028 	str.w	r3, [r9, #40]	; 0x28
   1dd04:	f8c9 002c 	str.w	r0, [r9, #44]	; 0x2c
   1dd08:	f8c9 6034 	str.w	r6, [r9, #52]	; 0x34
   1dd0c:	f8c9 2030 	str.w	r2, [r9, #48]	; 0x30
   1dd10:	e6d6      	b.n	1dac0 <__gxx_personality_v0+0x1ec>
   1dd12:	1c6f      	adds	r7, r5, #1
   1dd14:	ebc7 7387 	rsb	r3, r7, r7, lsl #30
   1dd18:	9f13      	ldr	r7, [sp, #76]	; 0x4c
   1dd1a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   1dd1c:	f857 1023 	ldr.w	r1, [r7, r3, lsl #2]
   1dd20:	920f      	str	r2, [sp, #60]	; 0x3c
   1dd22:	eb07 0783 	add.w	r7, r7, r3, lsl #2
   1dd26:	b921      	cbnz	r1, 1dd32 <__gxx_personality_v0+0x45e>
   1dd28:	e7b2      	b.n	1dc90 <__gxx_personality_v0+0x3bc>
   1dd2a:	f857 1f04 	ldr.w	r1, [r7, #4]!
   1dd2e:	2900      	cmp	r1, #0
   1dd30:	d0ae      	beq.n	1dc90 <__gxx_personality_v0+0x3bc>
   1dd32:	4439      	add	r1, r7
   1dd34:	465b      	mov	r3, fp
   1dd36:	2200      	movs	r2, #0
   1dd38:	4648      	mov	r0, r9
   1dd3a:	f7ff fb0f 	bl	1d35c <__cxa_type_match>
   1dd3e:	2800      	cmp	r0, #0
   1dd40:	d0f3      	beq.n	1dd2a <__gxx_personality_v0+0x456>
   1dd42:	e794      	b.n	1dc6e <__gxx_personality_v0+0x39a>
   1dd44:	2300      	movs	r3, #0
   1dd46:	e787      	b.n	1dc58 <__gxx_personality_v0+0x384>
   1dd48:	f899 2007 	ldrb.w	r2, [r9, #7]
   1dd4c:	2a01      	cmp	r2, #1
   1dd4e:	bf0c      	ite	eq
   1dd50:	f859 2c20 	ldreq.w	r2, [r9, #-32]
   1dd54:	f109 0258 	addne.w	r2, r9, #88	; 0x58
   1dd58:	920a      	str	r2, [sp, #40]	; 0x28
   1dd5a:	e717      	b.n	1db8c <__gxx_personality_v0+0x2b8>
   1dd5c:	f10d 0838 	add.w	r8, sp, #56	; 0x38
   1dd60:	e65a      	b.n	1da18 <__gxx_personality_v0+0x144>
   1dd62:	9b08      	ldr	r3, [sp, #32]
   1dd64:	9f07      	ldr	r7, [sp, #28]
   1dd66:	2b00      	cmp	r3, #0
   1dd68:	f47f af68 	bne.w	1dc3c <__gxx_personality_v0+0x368>
   1dd6c:	e5c0      	b.n	1d8f0 <__gxx_personality_v0+0x1c>
   1dd6e:	2c01      	cmp	r4, #1
   1dd70:	f43f ae8d 	beq.w	1da8e <__gxx_personality_v0+0x1ba>
   1dd74:	2d00      	cmp	r5, #0
   1dd76:	f6bf aea3 	bge.w	1dac0 <__gxx_personality_v0+0x1ec>
   1dd7a:	f7ff f903 	bl	1cf84 <_ZSt10unexpectedv>
   1dd7e:	461d      	mov	r5, r3
   1dd80:	2402      	movs	r4, #2
   1dd82:	e6a1      	b.n	1dac8 <__gxx_personality_v0+0x1f4>
   1dd84:	f7ff fc4e 	bl	1d624 <__cxa_begin_catch>
   1dd88:	e681      	b.n	1da8e <__gxx_personality_v0+0x1ba>
   1dd8a:	bf00      	nop

0001dd8c <_ZN9__gnu_cxx27__verbose_terminate_handlerEv>:
   1dd8c:	b570      	push	{r4, r5, r6, lr}
   1dd8e:	4b3c      	ldr	r3, [pc, #240]	; (1de80 <_ZN9__gnu_cxx27__verbose_terminate_handlerEv+0xf4>)
   1dd90:	781a      	ldrb	r2, [r3, #0]
   1dd92:	b082      	sub	sp, #8
   1dd94:	2a00      	cmp	r2, #0
   1dd96:	d135      	bne.n	1de04 <_ZN9__gnu_cxx27__verbose_terminate_handlerEv+0x78>
   1dd98:	2401      	movs	r4, #1
   1dd9a:	701c      	strb	r4, [r3, #0]
   1dd9c:	f006 fbd2 	bl	24544 <__cxa_current_exception_type>
   1dda0:	2800      	cmp	r0, #0
   1dda2:	d05b      	beq.n	1de5c <_ZN9__gnu_cxx27__verbose_terminate_handlerEv+0xd0>
   1dda4:	6844      	ldr	r4, [r0, #4]
   1dda6:	4d37      	ldr	r5, [pc, #220]	; (1de84 <_ZN9__gnu_cxx27__verbose_terminate_handlerEv+0xf8>)
   1dda8:	7823      	ldrb	r3, [r4, #0]
   1ddaa:	2b2a      	cmp	r3, #42	; 0x2a
   1ddac:	ab02      	add	r3, sp, #8
   1ddae:	f04f 32ff 	mov.w	r2, #4294967295
   1ddb2:	bf08      	it	eq
   1ddb4:	3401      	addeq	r4, #1
   1ddb6:	f843 2d04 	str.w	r2, [r3, #-4]!
   1ddba:	2200      	movs	r2, #0
   1ddbc:	4611      	mov	r1, r2
   1ddbe:	4620      	mov	r0, r4
   1ddc0:	f006 fb52 	bl	24468 <__cxa_demangle>
   1ddc4:	682b      	ldr	r3, [r5, #0]
   1ddc6:	4606      	mov	r6, r0
   1ddc8:	68db      	ldr	r3, [r3, #12]
   1ddca:	482f      	ldr	r0, [pc, #188]	; (1de88 <_ZN9__gnu_cxx27__verbose_terminate_handlerEv+0xfc>)
   1ddcc:	2230      	movs	r2, #48	; 0x30
   1ddce:	2101      	movs	r1, #1
   1ddd0:	f009 fba8 	bl	27524 <fwrite>
   1ddd4:	9b01      	ldr	r3, [sp, #4]
   1ddd6:	b17b      	cbz	r3, 1ddf8 <_ZN9__gnu_cxx27__verbose_terminate_handlerEv+0x6c>
   1ddd8:	682b      	ldr	r3, [r5, #0]
   1ddda:	4620      	mov	r0, r4
   1dddc:	68d9      	ldr	r1, [r3, #12]
   1ddde:	f009 f9cb 	bl	27178 <fputs>
   1dde2:	682b      	ldr	r3, [r5, #0]
   1dde4:	4829      	ldr	r0, [pc, #164]	; (1de8c <_ZN9__gnu_cxx27__verbose_terminate_handlerEv+0x100>)
   1dde6:	68db      	ldr	r3, [r3, #12]
   1dde8:	2202      	movs	r2, #2
   1ddea:	2101      	movs	r1, #1
   1ddec:	f009 fb9a 	bl	27524 <fwrite>
   1ddf0:	9b01      	ldr	r3, [sp, #4]
   1ddf2:	b18b      	cbz	r3, 1de18 <_ZN9__gnu_cxx27__verbose_terminate_handlerEv+0x8c>
   1ddf4:	f7ff f940 	bl	1d078 <__cxa_rethrow>
   1ddf8:	682b      	ldr	r3, [r5, #0]
   1ddfa:	4630      	mov	r0, r6
   1ddfc:	68d9      	ldr	r1, [r3, #12]
   1ddfe:	f009 f9bb 	bl	27178 <fputs>
   1de02:	e7ee      	b.n	1dde2 <_ZN9__gnu_cxx27__verbose_terminate_handlerEv+0x56>
   1de04:	4b1f      	ldr	r3, [pc, #124]	; (1de84 <_ZN9__gnu_cxx27__verbose_terminate_handlerEv+0xf8>)
   1de06:	4822      	ldr	r0, [pc, #136]	; (1de90 <_ZN9__gnu_cxx27__verbose_terminate_handlerEv+0x104>)
   1de08:	681b      	ldr	r3, [r3, #0]
   1de0a:	221d      	movs	r2, #29
   1de0c:	68db      	ldr	r3, [r3, #12]
   1de0e:	2101      	movs	r1, #1
   1de10:	f009 fb88 	bl	27524 <fwrite>
   1de14:	f009 f92e 	bl	27074 <abort>
   1de18:	4630      	mov	r0, r6
   1de1a:	f009 fbcf 	bl	275bc <free>
   1de1e:	e7e9      	b.n	1ddf4 <_ZN9__gnu_cxx27__verbose_terminate_handlerEv+0x68>
   1de20:	2901      	cmp	r1, #1
   1de22:	460c      	mov	r4, r1
   1de24:	d127      	bne.n	1de76 <_ZN9__gnu_cxx27__verbose_terminate_handlerEv+0xea>
   1de26:	f7ff fbfd 	bl	1d624 <__cxa_begin_catch>
   1de2a:	6803      	ldr	r3, [r0, #0]
   1de2c:	689b      	ldr	r3, [r3, #8]
   1de2e:	4798      	blx	r3
   1de30:	682b      	ldr	r3, [r5, #0]
   1de32:	4606      	mov	r6, r0
   1de34:	68db      	ldr	r3, [r3, #12]
   1de36:	4817      	ldr	r0, [pc, #92]	; (1de94 <_ZN9__gnu_cxx27__verbose_terminate_handlerEv+0x108>)
   1de38:	4621      	mov	r1, r4
   1de3a:	220b      	movs	r2, #11
   1de3c:	f009 fb72 	bl	27524 <fwrite>
   1de40:	682b      	ldr	r3, [r5, #0]
   1de42:	4630      	mov	r0, r6
   1de44:	68d9      	ldr	r1, [r3, #12]
   1de46:	f009 f997 	bl	27178 <fputs>
   1de4a:	682b      	ldr	r3, [r5, #0]
   1de4c:	200a      	movs	r0, #10
   1de4e:	68d9      	ldr	r1, [r3, #12]
   1de50:	f009 f922 	bl	27098 <fputc>
   1de54:	f7ff fc24 	bl	1d6a0 <__cxa_end_catch>
   1de58:	f009 f90c 	bl	27074 <abort>
   1de5c:	4b09      	ldr	r3, [pc, #36]	; (1de84 <_ZN9__gnu_cxx27__verbose_terminate_handlerEv+0xf8>)
   1de5e:	480e      	ldr	r0, [pc, #56]	; (1de98 <_ZN9__gnu_cxx27__verbose_terminate_handlerEv+0x10c>)
   1de60:	681b      	ldr	r3, [r3, #0]
   1de62:	4621      	mov	r1, r4
   1de64:	68db      	ldr	r3, [r3, #12]
   1de66:	222d      	movs	r2, #45	; 0x2d
   1de68:	f009 fb5c 	bl	27524 <fwrite>
   1de6c:	e7f4      	b.n	1de58 <_ZN9__gnu_cxx27__verbose_terminate_handlerEv+0xcc>
   1de6e:	f7ff fc17 	bl	1d6a0 <__cxa_end_catch>
   1de72:	f7ff fa6d 	bl	1d350 <__cxa_end_cleanup>
   1de76:	f7ff fbd5 	bl	1d624 <__cxa_begin_catch>
   1de7a:	f7ff fc11 	bl	1d6a0 <__cxa_end_catch>
   1de7e:	e7eb      	b.n	1de58 <_ZN9__gnu_cxx27__verbose_terminate_handlerEv+0xcc>
   1de80:	20002978 	.word	0x20002978
   1de84:	20000108 	.word	0x20000108
   1de88:	0002dd50 	.word	0x0002dd50
   1de8c:	0002dd84 	.word	0x0002dd84
   1de90:	0002dd30 	.word	0x0002dd30
   1de94:	0002ddb8 	.word	0x0002ddb8
   1de98:	0002dd88 	.word	0x0002dd88

0001de9c <d_make_comp>:
   1de9c:	b470      	push	{r4, r5, r6}
   1de9e:	1e4c      	subs	r4, r1, #1
   1dea0:	2c4c      	cmp	r4, #76	; 0x4c
   1dea2:	d82d      	bhi.n	1df00 <d_make_comp+0x64>
   1dea4:	e8df f004 	tbb	[pc, r4]
   1dea8:	3c3c3c3c 	.word	0x3c3c3c3c
   1deac:	2c2c2c2c 	.word	0x2c2c2c2c
   1deb0:	273c2727 	.word	0x273c2727
   1deb4:	27272727 	.word	0x27272727
   1deb8:	27272727 	.word	0x27272727
   1debc:	2c272727 	.word	0x2c272727
   1dec0:	28282828 	.word	0x28282828
   1dec4:	28282828 	.word	0x28282828
   1dec8:	2727273c 	.word	0x2727273c
   1decc:	272c2727 	.word	0x272c2727
   1ded0:	2c3c3e28 	.word	0x2c3c3e28
   1ded4:	3e28283c 	.word	0x3e28283c
   1ded8:	27272c2c 	.word	0x27272c2c
   1dedc:	3c3c3c27 	.word	0x3c3c3c27
   1dee0:	3c273c3c 	.word	0x3c273c3c
   1dee4:	2c3c273c 	.word	0x2c3c273c
   1dee8:	2727272c 	.word	0x2727272c
   1deec:	272c2c2c 	.word	0x272c2c2c
   1def0:	283c2727 	.word	0x283c2727
   1def4:	3c          	.byte	0x3c
   1def5:	00          	.byte	0x00
   1def6:	b11a      	cbz	r2, 1df00 <d_make_comp+0x64>
   1def8:	6944      	ldr	r4, [r0, #20]
   1defa:	6985      	ldr	r5, [r0, #24]
   1defc:	42ac      	cmp	r4, r5
   1defe:	db02      	blt.n	1df06 <d_make_comp+0x6a>
   1df00:	2000      	movs	r0, #0
   1df02:	bc70      	pop	{r4, r5, r6}
   1df04:	4770      	bx	lr
   1df06:	eb04 0544 	add.w	r5, r4, r4, lsl #1
   1df0a:	6906      	ldr	r6, [r0, #16]
   1df0c:	00ad      	lsls	r5, r5, #2
   1df0e:	3401      	adds	r4, #1
   1df10:	6144      	str	r4, [r0, #20]
   1df12:	1970      	adds	r0, r6, r5
   1df14:	d0f5      	beq.n	1df02 <d_make_comp+0x66>
   1df16:	5571      	strb	r1, [r6, r5]
   1df18:	6042      	str	r2, [r0, #4]
   1df1a:	6083      	str	r3, [r0, #8]
   1df1c:	bc70      	pop	{r4, r5, r6}
   1df1e:	4770      	bx	lr
   1df20:	2a00      	cmp	r2, #0
   1df22:	d0ed      	beq.n	1df00 <d_make_comp+0x64>
   1df24:	2b00      	cmp	r3, #0
   1df26:	d0eb      	beq.n	1df00 <d_make_comp+0x64>
   1df28:	6944      	ldr	r4, [r0, #20]
   1df2a:	6985      	ldr	r5, [r0, #24]
   1df2c:	42ac      	cmp	r4, r5
   1df2e:	dae7      	bge.n	1df00 <d_make_comp+0x64>
   1df30:	e7e9      	b.n	1df06 <d_make_comp+0x6a>
   1df32:	bf00      	nop

0001df34 <d_cv_qualifiers>:
   1df34:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   1df38:	68c3      	ldr	r3, [r0, #12]
   1df3a:	f1b2 0a00 	subs.w	sl, r2, #0
   1df3e:	4604      	mov	r4, r0
   1df40:	460e      	mov	r6, r1
   1df42:	781a      	ldrb	r2, [r3, #0]
   1df44:	bf15      	itete	ne
   1df46:	f04f 091e 	movne.w	r9, #30
   1df4a:	f04f 091b 	moveq.w	r9, #27
   1df4e:	f04f 081d 	movne.w	r8, #29
   1df52:	f04f 081a 	moveq.w	r8, #26
   1df56:	bf14      	ite	ne
   1df58:	271c      	movne	r7, #28
   1df5a:	2719      	moveq	r7, #25
   1df5c:	460d      	mov	r5, r1
   1df5e:	e018      	b.n	1df92 <d_cv_qualifiers+0x5e>
   1df60:	2a56      	cmp	r2, #86	; 0x56
   1df62:	d01f      	beq.n	1dfa4 <d_cv_qualifiers+0x70>
   1df64:	2a4b      	cmp	r2, #75	; 0x4b
   1df66:	d024      	beq.n	1dfb2 <d_cv_qualifiers+0x7e>
   1df68:	2a44      	cmp	r2, #68	; 0x44
   1df6a:	d12d      	bne.n	1dfc8 <d_cv_qualifiers+0x94>
   1df6c:	785a      	ldrb	r2, [r3, #1]
   1df6e:	2a78      	cmp	r2, #120	; 0x78
   1df70:	d127      	bne.n	1dfc2 <d_cv_qualifiers+0x8e>
   1df72:	6b22      	ldr	r2, [r4, #48]	; 0x30
   1df74:	3302      	adds	r3, #2
   1df76:	3211      	adds	r2, #17
   1df78:	60e3      	str	r3, [r4, #12]
   1df7a:	6322      	str	r2, [r4, #48]	; 0x30
   1df7c:	214c      	movs	r1, #76	; 0x4c
   1df7e:	2300      	movs	r3, #0
   1df80:	461a      	mov	r2, r3
   1df82:	4620      	mov	r0, r4
   1df84:	f7ff ff8a 	bl	1de9c <d_make_comp>
   1df88:	6028      	str	r0, [r5, #0]
   1df8a:	b1c8      	cbz	r0, 1dfc0 <d_cv_qualifiers+0x8c>
   1df8c:	68e3      	ldr	r3, [r4, #12]
   1df8e:	781a      	ldrb	r2, [r3, #0]
   1df90:	1d05      	adds	r5, r0, #4
   1df92:	2a72      	cmp	r2, #114	; 0x72
   1df94:	d1e4      	bne.n	1df60 <d_cv_qualifiers+0x2c>
   1df96:	6b22      	ldr	r2, [r4, #48]	; 0x30
   1df98:	3301      	adds	r3, #1
   1df9a:	3209      	adds	r2, #9
   1df9c:	60e3      	str	r3, [r4, #12]
   1df9e:	6322      	str	r2, [r4, #48]	; 0x30
   1dfa0:	4639      	mov	r1, r7
   1dfa2:	e7ec      	b.n	1df7e <d_cv_qualifiers+0x4a>
   1dfa4:	6b22      	ldr	r2, [r4, #48]	; 0x30
   1dfa6:	3301      	adds	r3, #1
   1dfa8:	3209      	adds	r2, #9
   1dfaa:	60e3      	str	r3, [r4, #12]
   1dfac:	6322      	str	r2, [r4, #48]	; 0x30
   1dfae:	4641      	mov	r1, r8
   1dfb0:	e7e5      	b.n	1df7e <d_cv_qualifiers+0x4a>
   1dfb2:	6b22      	ldr	r2, [r4, #48]	; 0x30
   1dfb4:	3301      	adds	r3, #1
   1dfb6:	3206      	adds	r2, #6
   1dfb8:	60e3      	str	r3, [r4, #12]
   1dfba:	6322      	str	r2, [r4, #48]	; 0x30
   1dfbc:	4649      	mov	r1, r9
   1dfbe:	e7de      	b.n	1df7e <d_cv_qualifiers+0x4a>
   1dfc0:	4605      	mov	r5, r0
   1dfc2:	4628      	mov	r0, r5
   1dfc4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   1dfc8:	f1ba 0f00 	cmp.w	sl, #0
   1dfcc:	d1f9      	bne.n	1dfc2 <d_cv_qualifiers+0x8e>
   1dfce:	2a46      	cmp	r2, #70	; 0x46
   1dfd0:	d1f7      	bne.n	1dfc2 <d_cv_qualifiers+0x8e>
   1dfd2:	42b5      	cmp	r5, r6
   1dfd4:	d0f5      	beq.n	1dfc2 <d_cv_qualifiers+0x8e>
   1dfd6:	201d      	movs	r0, #29
   1dfd8:	211e      	movs	r1, #30
   1dfda:	221c      	movs	r2, #28
   1dfdc:	e007      	b.n	1dfee <d_cv_qualifiers+0xba>
   1dfde:	2b1b      	cmp	r3, #27
   1dfe0:	d00b      	beq.n	1dffa <d_cv_qualifiers+0xc6>
   1dfe2:	2b19      	cmp	r3, #25
   1dfe4:	d100      	bne.n	1dfe8 <d_cv_qualifiers+0xb4>
   1dfe6:	7032      	strb	r2, [r6, #0]
   1dfe8:	3604      	adds	r6, #4
   1dfea:	42b5      	cmp	r5, r6
   1dfec:	d0e9      	beq.n	1dfc2 <d_cv_qualifiers+0x8e>
   1dfee:	6836      	ldr	r6, [r6, #0]
   1dff0:	7833      	ldrb	r3, [r6, #0]
   1dff2:	2b1a      	cmp	r3, #26
   1dff4:	d1f3      	bne.n	1dfde <d_cv_qualifiers+0xaa>
   1dff6:	7030      	strb	r0, [r6, #0]
   1dff8:	e7f6      	b.n	1dfe8 <d_cv_qualifiers+0xb4>
   1dffa:	7031      	strb	r1, [r6, #0]
   1dffc:	e7f4      	b.n	1dfe8 <d_cv_qualifiers+0xb4>
   1dffe:	bf00      	nop

0001e000 <d_ref_qualifier>:
   1e000:	b410      	push	{r4}
   1e002:	68c3      	ldr	r3, [r0, #12]
   1e004:	781c      	ldrb	r4, [r3, #0]
   1e006:	2c52      	cmp	r4, #82	; 0x52
   1e008:	460a      	mov	r2, r1
   1e00a:	d00f      	beq.n	1e02c <d_ref_qualifier+0x2c>
   1e00c:	2c4f      	cmp	r4, #79	; 0x4f
   1e00e:	d003      	beq.n	1e018 <d_ref_qualifier+0x18>
   1e010:	4608      	mov	r0, r1
   1e012:	f85d 4b04 	ldr.w	r4, [sp], #4
   1e016:	4770      	bx	lr
   1e018:	6b01      	ldr	r1, [r0, #48]	; 0x30
   1e01a:	3103      	adds	r1, #3
   1e01c:	6301      	str	r1, [r0, #48]	; 0x30
   1e01e:	2120      	movs	r1, #32
   1e020:	3301      	adds	r3, #1
   1e022:	60c3      	str	r3, [r0, #12]
   1e024:	f85d 4b04 	ldr.w	r4, [sp], #4
   1e028:	2300      	movs	r3, #0
   1e02a:	e737      	b.n	1de9c <d_make_comp>
   1e02c:	6b01      	ldr	r1, [r0, #48]	; 0x30
   1e02e:	3102      	adds	r1, #2
   1e030:	6301      	str	r1, [r0, #48]	; 0x30
   1e032:	211f      	movs	r1, #31
   1e034:	e7f4      	b.n	1e020 <d_ref_qualifier+0x20>
   1e036:	bf00      	nop

0001e038 <d_count_templates_scopes>:
   1e038:	2a00      	cmp	r2, #0
   1e03a:	d04d      	beq.n	1e0d8 <d_count_templates_scopes+0xa0>
   1e03c:	b570      	push	{r4, r5, r6, lr}
   1e03e:	4605      	mov	r5, r0
   1e040:	460e      	mov	r6, r1
   1e042:	4614      	mov	r4, r2
   1e044:	7823      	ldrb	r3, [r4, #0]
   1e046:	3b01      	subs	r3, #1
   1e048:	2b4c      	cmp	r3, #76	; 0x4c
   1e04a:	d82b      	bhi.n	1e0a4 <d_count_templates_scopes+0x6c>
   1e04c:	e8df f003 	tbb	[pc, r3]
   1e050:	3f363636 	.word	0x3f363636
   1e054:	27272a2a 	.word	0x27272a2a
   1e058:	36363636 	.word	0x36363636
   1e05c:	36363636 	.word	0x36363636
   1e060:	36363636 	.word	0x36363636
   1e064:	2a363636 	.word	0x2a363636
   1e068:	36363636 	.word	0x36363636
   1e06c:	36363636 	.word	0x36363636
   1e070:	2f2f3636 	.word	0x2f2f3636
   1e074:	362a3636 	.word	0x362a3636
   1e078:	2b363636 	.word	0x2b363636
   1e07c:	36363636 	.word	0x36363636
   1e080:	3636272a 	.word	0x3636272a
   1e084:	36363636 	.word	0x36363636
   1e088:	36363636 	.word	0x36363636
   1e08c:	2a363636 	.word	0x2a363636
   1e090:	2b2b362a 	.word	0x2b2b362a
   1e094:	362a2b2b 	.word	0x362a2b2b
   1e098:	36363636 	.word	0x36363636
   1e09c:	36          	.byte	0x36
   1e09d:	00          	.byte	0x00
   1e09e:	68a4      	ldr	r4, [r4, #8]
   1e0a0:	2c00      	cmp	r4, #0
   1e0a2:	d1cf      	bne.n	1e044 <d_count_templates_scopes+0xc>
   1e0a4:	bd70      	pop	{r4, r5, r6, pc}
   1e0a6:	6864      	ldr	r4, [r4, #4]
   1e0a8:	2c00      	cmp	r4, #0
   1e0aa:	d1cb      	bne.n	1e044 <d_count_templates_scopes+0xc>
   1e0ac:	e7fa      	b.n	1e0a4 <d_count_templates_scopes+0x6c>
   1e0ae:	6862      	ldr	r2, [r4, #4]
   1e0b0:	7813      	ldrb	r3, [r2, #0]
   1e0b2:	2b05      	cmp	r3, #5
   1e0b4:	d103      	bne.n	1e0be <d_count_templates_scopes+0x86>
   1e0b6:	6833      	ldr	r3, [r6, #0]
   1e0b8:	3301      	adds	r3, #1
   1e0ba:	6033      	str	r3, [r6, #0]
   1e0bc:	6862      	ldr	r2, [r4, #4]
   1e0be:	4631      	mov	r1, r6
   1e0c0:	4628      	mov	r0, r5
   1e0c2:	f7ff ffb9 	bl	1e038 <d_count_templates_scopes>
   1e0c6:	68a4      	ldr	r4, [r4, #8]
   1e0c8:	2c00      	cmp	r4, #0
   1e0ca:	d1bb      	bne.n	1e044 <d_count_templates_scopes+0xc>
   1e0cc:	e7ea      	b.n	1e0a4 <d_count_templates_scopes+0x6c>
   1e0ce:	682b      	ldr	r3, [r5, #0]
   1e0d0:	3301      	adds	r3, #1
   1e0d2:	602b      	str	r3, [r5, #0]
   1e0d4:	6862      	ldr	r2, [r4, #4]
   1e0d6:	e7f2      	b.n	1e0be <d_count_templates_scopes+0x86>
   1e0d8:	4770      	bx	lr
   1e0da:	bf00      	nop

0001e0dc <d_append_buffer>:
   1e0dc:	b37a      	cbz	r2, 1e13e <d_append_buffer+0x62>
   1e0de:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1e0e2:	460d      	mov	r5, r1
   1e0e4:	4604      	mov	r4, r0
   1e0e6:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
   1e0ea:	18af      	adds	r7, r5, r2
   1e0ec:	f04f 0800 	mov.w	r8, #0
   1e0f0:	e009      	b.n	1e106 <d_append_buffer+0x2a>
   1e0f2:	460b      	mov	r3, r1
   1e0f4:	42bd      	cmp	r5, r7
   1e0f6:	f101 0101 	add.w	r1, r1, #1
   1e0fa:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
   1e0fe:	54e6      	strb	r6, [r4, r3]
   1e100:	f884 6104 	strb.w	r6, [r4, #260]	; 0x104
   1e104:	d019      	beq.n	1e13a <d_append_buffer+0x5e>
   1e106:	29ff      	cmp	r1, #255	; 0xff
   1e108:	f815 6b01 	ldrb.w	r6, [r5], #1
   1e10c:	d1f1      	bne.n	1e0f2 <d_append_buffer+0x16>
   1e10e:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   1e112:	f884 80ff 	strb.w	r8, [r4, #255]	; 0xff
   1e116:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
   1e11a:	4620      	mov	r0, r4
   1e11c:	4798      	blx	r3
   1e11e:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   1e122:	3301      	adds	r3, #1
   1e124:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
   1e128:	2300      	movs	r3, #0
   1e12a:	2101      	movs	r1, #1
   1e12c:	42bd      	cmp	r5, r7
   1e12e:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
   1e132:	54e6      	strb	r6, [r4, r3]
   1e134:	f884 6104 	strb.w	r6, [r4, #260]	; 0x104
   1e138:	d1e5      	bne.n	1e106 <d_append_buffer+0x2a>
   1e13a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   1e13e:	4770      	bx	lr

0001e140 <d_number.isra.0>:
   1e140:	b470      	push	{r4, r5, r6}
   1e142:	6802      	ldr	r2, [r0, #0]
   1e144:	7811      	ldrb	r1, [r2, #0]
   1e146:	296e      	cmp	r1, #110	; 0x6e
   1e148:	d018      	beq.n	1e17c <d_number.isra.0+0x3c>
   1e14a:	f1a1 0330 	sub.w	r3, r1, #48	; 0x30
   1e14e:	2b09      	cmp	r3, #9
   1e150:	d81e      	bhi.n	1e190 <d_number.isra.0+0x50>
   1e152:	2600      	movs	r6, #0
   1e154:	2300      	movs	r3, #0
   1e156:	3201      	adds	r2, #1
   1e158:	eb03 0383 	add.w	r3, r3, r3, lsl #2
   1e15c:	6002      	str	r2, [r0, #0]
   1e15e:	eb01 0443 	add.w	r4, r1, r3, lsl #1
   1e162:	7811      	ldrb	r1, [r2, #0]
   1e164:	f1a1 0530 	sub.w	r5, r1, #48	; 0x30
   1e168:	2d09      	cmp	r5, #9
   1e16a:	f1a4 0330 	sub.w	r3, r4, #48	; 0x30
   1e16e:	d9f2      	bls.n	1e156 <d_number.isra.0+0x16>
   1e170:	b10e      	cbz	r6, 1e176 <d_number.isra.0+0x36>
   1e172:	f1c4 0330 	rsb	r3, r4, #48	; 0x30
   1e176:	4618      	mov	r0, r3
   1e178:	bc70      	pop	{r4, r5, r6}
   1e17a:	4770      	bx	lr
   1e17c:	1c53      	adds	r3, r2, #1
   1e17e:	6003      	str	r3, [r0, #0]
   1e180:	7851      	ldrb	r1, [r2, #1]
   1e182:	f1a1 0230 	sub.w	r2, r1, #48	; 0x30
   1e186:	2a09      	cmp	r2, #9
   1e188:	d802      	bhi.n	1e190 <d_number.isra.0+0x50>
   1e18a:	461a      	mov	r2, r3
   1e18c:	2601      	movs	r6, #1
   1e18e:	e7e1      	b.n	1e154 <d_number.isra.0+0x14>
   1e190:	2300      	movs	r3, #0
   1e192:	e7f0      	b.n	1e176 <d_number.isra.0+0x36>

0001e194 <d_number_component>:
   1e194:	6943      	ldr	r3, [r0, #20]
   1e196:	6982      	ldr	r2, [r0, #24]
   1e198:	4293      	cmp	r3, r2
   1e19a:	b510      	push	{r4, lr}
   1e19c:	da0f      	bge.n	1e1be <d_number_component+0x2a>
   1e19e:	eb03 0243 	add.w	r2, r3, r3, lsl #1
   1e1a2:	6901      	ldr	r1, [r0, #16]
   1e1a4:	0092      	lsls	r2, r2, #2
   1e1a6:	3301      	adds	r3, #1
   1e1a8:	188c      	adds	r4, r1, r2
   1e1aa:	6143      	str	r3, [r0, #20]
   1e1ac:	d005      	beq.n	1e1ba <d_number_component+0x26>
   1e1ae:	2341      	movs	r3, #65	; 0x41
   1e1b0:	300c      	adds	r0, #12
   1e1b2:	548b      	strb	r3, [r1, r2]
   1e1b4:	f7ff ffc4 	bl	1e140 <d_number.isra.0>
   1e1b8:	6060      	str	r0, [r4, #4]
   1e1ba:	4620      	mov	r0, r4
   1e1bc:	bd10      	pop	{r4, pc}
   1e1be:	2400      	movs	r4, #0
   1e1c0:	4620      	mov	r0, r4
   1e1c2:	bd10      	pop	{r4, pc}

0001e1c4 <d_compact_number>:
   1e1c4:	b510      	push	{r4, lr}
   1e1c6:	68c3      	ldr	r3, [r0, #12]
   1e1c8:	781a      	ldrb	r2, [r3, #0]
   1e1ca:	2a5f      	cmp	r2, #95	; 0x5f
   1e1cc:	4604      	mov	r4, r0
   1e1ce:	d00d      	beq.n	1e1ec <d_compact_number+0x28>
   1e1d0:	2a6e      	cmp	r2, #110	; 0x6e
   1e1d2:	d00f      	beq.n	1e1f4 <d_compact_number+0x30>
   1e1d4:	300c      	adds	r0, #12
   1e1d6:	f7ff ffb3 	bl	1e140 <d_number.isra.0>
   1e1da:	3001      	adds	r0, #1
   1e1dc:	d40a      	bmi.n	1e1f4 <d_compact_number+0x30>
   1e1de:	68e3      	ldr	r3, [r4, #12]
   1e1e0:	781a      	ldrb	r2, [r3, #0]
   1e1e2:	2a5f      	cmp	r2, #95	; 0x5f
   1e1e4:	d106      	bne.n	1e1f4 <d_compact_number+0x30>
   1e1e6:	3301      	adds	r3, #1
   1e1e8:	60e3      	str	r3, [r4, #12]
   1e1ea:	bd10      	pop	{r4, pc}
   1e1ec:	3301      	adds	r3, #1
   1e1ee:	2000      	movs	r0, #0
   1e1f0:	60e3      	str	r3, [r4, #12]
   1e1f2:	bd10      	pop	{r4, pc}
   1e1f4:	f04f 30ff 	mov.w	r0, #4294967295
   1e1f8:	bd10      	pop	{r4, pc}
   1e1fa:	bf00      	nop

0001e1fc <d_template_param>:
   1e1fc:	b538      	push	{r3, r4, r5, lr}
   1e1fe:	68c3      	ldr	r3, [r0, #12]
   1e200:	781a      	ldrb	r2, [r3, #0]
   1e202:	2a54      	cmp	r2, #84	; 0x54
   1e204:	d001      	beq.n	1e20a <d_template_param+0xe>
   1e206:	2000      	movs	r0, #0
   1e208:	bd38      	pop	{r3, r4, r5, pc}
   1e20a:	3301      	adds	r3, #1
   1e20c:	60c3      	str	r3, [r0, #12]
   1e20e:	4604      	mov	r4, r0
   1e210:	f7ff ffd8 	bl	1e1c4 <d_compact_number>
   1e214:	1e05      	subs	r5, r0, #0
   1e216:	dbf6      	blt.n	1e206 <d_template_param+0xa>
   1e218:	6aa2      	ldr	r2, [r4, #40]	; 0x28
   1e21a:	6963      	ldr	r3, [r4, #20]
   1e21c:	69a1      	ldr	r1, [r4, #24]
   1e21e:	3201      	adds	r2, #1
   1e220:	428b      	cmp	r3, r1
   1e222:	62a2      	str	r2, [r4, #40]	; 0x28
   1e224:	daef      	bge.n	1e206 <d_template_param+0xa>
   1e226:	eb03 0243 	add.w	r2, r3, r3, lsl #1
   1e22a:	6921      	ldr	r1, [r4, #16]
   1e22c:	0092      	lsls	r2, r2, #2
   1e22e:	3301      	adds	r3, #1
   1e230:	1888      	adds	r0, r1, r2
   1e232:	6163      	str	r3, [r4, #20]
   1e234:	d002      	beq.n	1e23c <d_template_param+0x40>
   1e236:	2305      	movs	r3, #5
   1e238:	548b      	strb	r3, [r1, r2]
   1e23a:	6045      	str	r5, [r0, #4]
   1e23c:	bd38      	pop	{r3, r4, r5, pc}
   1e23e:	bf00      	nop

0001e240 <d_source_name>:
   1e240:	b570      	push	{r4, r5, r6, lr}
   1e242:	4604      	mov	r4, r0
   1e244:	300c      	adds	r0, #12
   1e246:	f7ff ff7b 	bl	1e140 <d_number.isra.0>
   1e24a:	1e06      	subs	r6, r0, #0
   1e24c:	dd4d      	ble.n	1e2ea <d_source_name+0xaa>
   1e24e:	68e5      	ldr	r5, [r4, #12]
   1e250:	6863      	ldr	r3, [r4, #4]
   1e252:	1b5b      	subs	r3, r3, r5
   1e254:	429e      	cmp	r6, r3
   1e256:	dc2b      	bgt.n	1e2b0 <d_source_name+0x70>
   1e258:	68a2      	ldr	r2, [r4, #8]
   1e25a:	19ab      	adds	r3, r5, r6
   1e25c:	0752      	lsls	r2, r2, #29
   1e25e:	60e3      	str	r3, [r4, #12]
   1e260:	d504      	bpl.n	1e26c <d_source_name+0x2c>
   1e262:	5daa      	ldrb	r2, [r5, r6]
   1e264:	2a24      	cmp	r2, #36	; 0x24
   1e266:	bf04      	itt	eq
   1e268:	3301      	addeq	r3, #1
   1e26a:	60e3      	streq	r3, [r4, #12]
   1e26c:	2e09      	cmp	r6, #9
   1e26e:	dd0c      	ble.n	1e28a <d_source_name+0x4a>
   1e270:	2208      	movs	r2, #8
   1e272:	491f      	ldr	r1, [pc, #124]	; (1e2f0 <d_source_name+0xb0>)
   1e274:	4628      	mov	r0, r5
   1e276:	f009 fcc3 	bl	27c00 <memcmp>
   1e27a:	b930      	cbnz	r0, 1e28a <d_source_name+0x4a>
   1e27c:	7a2b      	ldrb	r3, [r5, #8]
   1e27e:	2b2e      	cmp	r3, #46	; 0x2e
   1e280:	d019      	beq.n	1e2b6 <d_source_name+0x76>
   1e282:	2b5f      	cmp	r3, #95	; 0x5f
   1e284:	d017      	beq.n	1e2b6 <d_source_name+0x76>
   1e286:	2b24      	cmp	r3, #36	; 0x24
   1e288:	d015      	beq.n	1e2b6 <d_source_name+0x76>
   1e28a:	6963      	ldr	r3, [r4, #20]
   1e28c:	69a2      	ldr	r2, [r4, #24]
   1e28e:	4293      	cmp	r3, r2
   1e290:	da0e      	bge.n	1e2b0 <d_source_name+0x70>
   1e292:	eb03 0243 	add.w	r2, r3, r3, lsl #1
   1e296:	6921      	ldr	r1, [r4, #16]
   1e298:	0092      	lsls	r2, r2, #2
   1e29a:	3301      	adds	r3, #1
   1e29c:	1888      	adds	r0, r1, r2
   1e29e:	6163      	str	r3, [r4, #20]
   1e2a0:	d006      	beq.n	1e2b0 <d_source_name+0x70>
   1e2a2:	b12d      	cbz	r5, 1e2b0 <d_source_name+0x70>
   1e2a4:	2300      	movs	r3, #0
   1e2a6:	548b      	strb	r3, [r1, r2]
   1e2a8:	6045      	str	r5, [r0, #4]
   1e2aa:	6086      	str	r6, [r0, #8]
   1e2ac:	62e0      	str	r0, [r4, #44]	; 0x2c
   1e2ae:	bd70      	pop	{r4, r5, r6, pc}
   1e2b0:	2000      	movs	r0, #0
   1e2b2:	62e0      	str	r0, [r4, #44]	; 0x2c
   1e2b4:	bd70      	pop	{r4, r5, r6, pc}
   1e2b6:	7a6b      	ldrb	r3, [r5, #9]
   1e2b8:	2b4e      	cmp	r3, #78	; 0x4e
   1e2ba:	d1e6      	bne.n	1e28a <d_source_name+0x4a>
   1e2bc:	6b23      	ldr	r3, [r4, #48]	; 0x30
   1e2be:	6962      	ldr	r2, [r4, #20]
   1e2c0:	69a1      	ldr	r1, [r4, #24]
   1e2c2:	3316      	adds	r3, #22
   1e2c4:	1b9e      	subs	r6, r3, r6
   1e2c6:	428a      	cmp	r2, r1
   1e2c8:	6326      	str	r6, [r4, #48]	; 0x30
   1e2ca:	daf1      	bge.n	1e2b0 <d_source_name+0x70>
   1e2cc:	eb02 0342 	add.w	r3, r2, r2, lsl #1
   1e2d0:	6921      	ldr	r1, [r4, #16]
   1e2d2:	009b      	lsls	r3, r3, #2
   1e2d4:	3201      	adds	r2, #1
   1e2d6:	18c8      	adds	r0, r1, r3
   1e2d8:	6162      	str	r2, [r4, #20]
   1e2da:	d0ea      	beq.n	1e2b2 <d_source_name+0x72>
   1e2dc:	2500      	movs	r5, #0
   1e2de:	54cd      	strb	r5, [r1, r3]
   1e2e0:	4a04      	ldr	r2, [pc, #16]	; (1e2f4 <d_source_name+0xb4>)
   1e2e2:	6042      	str	r2, [r0, #4]
   1e2e4:	2315      	movs	r3, #21
   1e2e6:	6083      	str	r3, [r0, #8]
   1e2e8:	e7e3      	b.n	1e2b2 <d_source_name+0x72>
   1e2ea:	2000      	movs	r0, #0
   1e2ec:	bd70      	pop	{r4, r5, r6, pc}
   1e2ee:	bf00      	nop
   1e2f0:	0002e55c 	.word	0x0002e55c
   1e2f4:	0002e568 	.word	0x0002e568

0001e2f8 <d_abi_tags>:
   1e2f8:	b570      	push	{r4, r5, r6, lr}
   1e2fa:	68c3      	ldr	r3, [r0, #12]
   1e2fc:	6ac6      	ldr	r6, [r0, #44]	; 0x2c
   1e2fe:	781a      	ldrb	r2, [r3, #0]
   1e300:	2a42      	cmp	r2, #66	; 0x42
   1e302:	4604      	mov	r4, r0
   1e304:	460d      	mov	r5, r1
   1e306:	d10f      	bne.n	1e328 <d_abi_tags+0x30>
   1e308:	3301      	adds	r3, #1
   1e30a:	60e3      	str	r3, [r4, #12]
   1e30c:	4620      	mov	r0, r4
   1e30e:	f7ff ff97 	bl	1e240 <d_source_name>
   1e312:	462a      	mov	r2, r5
   1e314:	4603      	mov	r3, r0
   1e316:	214b      	movs	r1, #75	; 0x4b
   1e318:	4620      	mov	r0, r4
   1e31a:	f7ff fdbf 	bl	1de9c <d_make_comp>
   1e31e:	68e3      	ldr	r3, [r4, #12]
   1e320:	781a      	ldrb	r2, [r3, #0]
   1e322:	2a42      	cmp	r2, #66	; 0x42
   1e324:	4605      	mov	r5, r0
   1e326:	d0ef      	beq.n	1e308 <d_abi_tags+0x10>
   1e328:	62e6      	str	r6, [r4, #44]	; 0x2c
   1e32a:	4628      	mov	r0, r5
   1e32c:	bd70      	pop	{r4, r5, r6, pc}
   1e32e:	bf00      	nop

0001e330 <d_substitution>:
   1e330:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1e334:	4605      	mov	r5, r0
   1e336:	68c0      	ldr	r0, [r0, #12]
   1e338:	7803      	ldrb	r3, [r0, #0]
   1e33a:	2b53      	cmp	r3, #83	; 0x53
   1e33c:	d002      	beq.n	1e344 <d_substitution+0x14>
   1e33e:	2000      	movs	r0, #0
   1e340:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   1e344:	1c43      	adds	r3, r0, #1
   1e346:	60eb      	str	r3, [r5, #12]
   1e348:	7842      	ldrb	r2, [r0, #1]
   1e34a:	b1a2      	cbz	r2, 1e376 <d_substitution+0x46>
   1e34c:	1c83      	adds	r3, r0, #2
   1e34e:	60eb      	str	r3, [r5, #12]
   1e350:	7842      	ldrb	r2, [r0, #1]
   1e352:	2a5f      	cmp	r2, #95	; 0x5f
   1e354:	d15a      	bne.n	1e40c <d_substitution+0xdc>
   1e356:	2300      	movs	r3, #0
   1e358:	6a2a      	ldr	r2, [r5, #32]
   1e35a:	4293      	cmp	r3, r2
   1e35c:	d2ef      	bcs.n	1e33e <d_substitution+0xe>
   1e35e:	6aaa      	ldr	r2, [r5, #40]	; 0x28
   1e360:	69e9      	ldr	r1, [r5, #28]
   1e362:	3201      	adds	r2, #1
   1e364:	62aa      	str	r2, [r5, #40]	; 0x28
   1e366:	f851 0023 	ldr.w	r0, [r1, r3, lsl #2]
   1e36a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   1e36e:	f1a2 0341 	sub.w	r3, r2, #65	; 0x41
   1e372:	2b19      	cmp	r3, #25
   1e374:	d94f      	bls.n	1e416 <d_substitution+0xe6>
   1e376:	68ab      	ldr	r3, [r5, #8]
   1e378:	f003 0308 	and.w	r3, r3, #8
   1e37c:	2b00      	cmp	r3, #0
   1e37e:	bf14      	ite	ne
   1e380:	2401      	movne	r4, #1
   1e382:	2400      	moveq	r4, #0
   1e384:	d101      	bne.n	1e38a <d_substitution+0x5a>
   1e386:	2900      	cmp	r1, #0
   1e388:	d169      	bne.n	1e45e <d_substitution+0x12e>
   1e38a:	4b46      	ldr	r3, [pc, #280]	; (1e4a4 <d_substitution+0x174>)
   1e38c:	2174      	movs	r1, #116	; 0x74
   1e38e:	f103 00c4 	add.w	r0, r3, #196	; 0xc4
   1e392:	e003      	b.n	1e39c <d_substitution+0x6c>
   1e394:	331c      	adds	r3, #28
   1e396:	4283      	cmp	r3, r0
   1e398:	d2d1      	bcs.n	1e33e <d_substitution+0xe>
   1e39a:	7819      	ldrb	r1, [r3, #0]
   1e39c:	428a      	cmp	r2, r1
   1e39e:	d1f9      	bne.n	1e394 <d_substitution+0x64>
   1e3a0:	695e      	ldr	r6, [r3, #20]
   1e3a2:	2e00      	cmp	r6, #0
   1e3a4:	d07b      	beq.n	1e49e <d_substitution+0x16e>
   1e3a6:	696a      	ldr	r2, [r5, #20]
   1e3a8:	69a9      	ldr	r1, [r5, #24]
   1e3aa:	428a      	cmp	r2, r1
   1e3ac:	da63      	bge.n	1e476 <d_substitution+0x146>
   1e3ae:	eb02 0742 	add.w	r7, r2, r2, lsl #1
   1e3b2:	f8d5 e010 	ldr.w	lr, [r5, #16]
   1e3b6:	f8d3 8018 	ldr.w	r8, [r3, #24]
   1e3ba:	00bf      	lsls	r7, r7, #2
   1e3bc:	3201      	adds	r2, #1
   1e3be:	eb1e 0007 	adds.w	r0, lr, r7
   1e3c2:	616a      	str	r2, [r5, #20]
   1e3c4:	d006      	beq.n	1e3d4 <d_substitution+0xa4>
   1e3c6:	f04f 0c18 	mov.w	ip, #24
   1e3ca:	f80e c007 	strb.w	ip, [lr, r7]
   1e3ce:	6046      	str	r6, [r0, #4]
   1e3d0:	f8c0 8008 	str.w	r8, [r0, #8]
   1e3d4:	62e8      	str	r0, [r5, #44]	; 0x2c
   1e3d6:	2c00      	cmp	r4, #0
   1e3d8:	d04a      	beq.n	1e470 <d_substitution+0x140>
   1e3da:	68de      	ldr	r6, [r3, #12]
   1e3dc:	691c      	ldr	r4, [r3, #16]
   1e3de:	6b2b      	ldr	r3, [r5, #48]	; 0x30
   1e3e0:	4291      	cmp	r1, r2
   1e3e2:	4423      	add	r3, r4
   1e3e4:	632b      	str	r3, [r5, #48]	; 0x30
   1e3e6:	dd41      	ble.n	1e46c <d_substitution+0x13c>
   1e3e8:	eb02 0342 	add.w	r3, r2, r2, lsl #1
   1e3ec:	6929      	ldr	r1, [r5, #16]
   1e3ee:	009b      	lsls	r3, r3, #2
   1e3f0:	3201      	adds	r2, #1
   1e3f2:	18c8      	adds	r0, r1, r3
   1e3f4:	616a      	str	r2, [r5, #20]
   1e3f6:	d003      	beq.n	1e400 <d_substitution+0xd0>
   1e3f8:	2218      	movs	r2, #24
   1e3fa:	54ca      	strb	r2, [r1, r3]
   1e3fc:	6046      	str	r6, [r0, #4]
   1e3fe:	6084      	str	r4, [r0, #8]
   1e400:	68eb      	ldr	r3, [r5, #12]
   1e402:	781b      	ldrb	r3, [r3, #0]
   1e404:	2b42      	cmp	r3, #66	; 0x42
   1e406:	d038      	beq.n	1e47a <d_substitution+0x14a>
   1e408:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   1e40c:	f1a2 0430 	sub.w	r4, r2, #48	; 0x30
   1e410:	b2e3      	uxtb	r3, r4
   1e412:	2b09      	cmp	r3, #9
   1e414:	d8ab      	bhi.n	1e36e <d_substitution+0x3e>
   1e416:	2100      	movs	r1, #0
   1e418:	e00d      	b.n	1e436 <d_substitution+0x106>
   1e41a:	3b30      	subs	r3, #48	; 0x30
   1e41c:	4299      	cmp	r1, r3
   1e41e:	d88e      	bhi.n	1e33e <d_substitution+0xe>
   1e420:	68e9      	ldr	r1, [r5, #12]
   1e422:	780a      	ldrb	r2, [r1, #0]
   1e424:	1c48      	adds	r0, r1, #1
   1e426:	b11a      	cbz	r2, 1e430 <d_substitution+0x100>
   1e428:	60e8      	str	r0, [r5, #12]
   1e42a:	780a      	ldrb	r2, [r1, #0]
   1e42c:	2a5f      	cmp	r2, #95	; 0x5f
   1e42e:	d014      	beq.n	1e45a <d_substitution+0x12a>
   1e430:	f1a2 0430 	sub.w	r4, r2, #48	; 0x30
   1e434:	4619      	mov	r1, r3
   1e436:	b2e4      	uxtb	r4, r4
   1e438:	eb01 03c1 	add.w	r3, r1, r1, lsl #3
   1e43c:	2c09      	cmp	r4, #9
   1e43e:	f1a2 0041 	sub.w	r0, r2, #65	; 0x41
   1e442:	eb02 0383 	add.w	r3, r2, r3, lsl #2
   1e446:	d9e8      	bls.n	1e41a <d_substitution+0xea>
   1e448:	2819      	cmp	r0, #25
   1e44a:	f63f af78 	bhi.w	1e33e <d_substitution+0xe>
   1e44e:	eb01 03c1 	add.w	r3, r1, r1, lsl #3
   1e452:	eb02 0383 	add.w	r3, r2, r3, lsl #2
   1e456:	3b37      	subs	r3, #55	; 0x37
   1e458:	e7e0      	b.n	1e41c <d_substitution+0xec>
   1e45a:	3301      	adds	r3, #1
   1e45c:	e77c      	b.n	1e358 <d_substitution+0x28>
   1e45e:	68eb      	ldr	r3, [r5, #12]
   1e460:	781b      	ldrb	r3, [r3, #0]
   1e462:	3b43      	subs	r3, #67	; 0x43
   1e464:	2b01      	cmp	r3, #1
   1e466:	bf98      	it	ls
   1e468:	2401      	movls	r4, #1
   1e46a:	e78e      	b.n	1e38a <d_substitution+0x5a>
   1e46c:	2000      	movs	r0, #0
   1e46e:	e7c7      	b.n	1e400 <d_substitution+0xd0>
   1e470:	685e      	ldr	r6, [r3, #4]
   1e472:	689c      	ldr	r4, [r3, #8]
   1e474:	e7b3      	b.n	1e3de <d_substitution+0xae>
   1e476:	2000      	movs	r0, #0
   1e478:	e7ac      	b.n	1e3d4 <d_substitution+0xa4>
   1e47a:	4601      	mov	r1, r0
   1e47c:	4628      	mov	r0, r5
   1e47e:	f7ff ff3b 	bl	1e2f8 <d_abi_tags>
   1e482:	2800      	cmp	r0, #0
   1e484:	f43f af5b 	beq.w	1e33e <d_substitution+0xe>
   1e488:	6a2b      	ldr	r3, [r5, #32]
   1e48a:	6a6a      	ldr	r2, [r5, #36]	; 0x24
   1e48c:	4293      	cmp	r3, r2
   1e48e:	dabb      	bge.n	1e408 <d_substitution+0xd8>
   1e490:	69e9      	ldr	r1, [r5, #28]
   1e492:	1c5a      	adds	r2, r3, #1
   1e494:	f841 0023 	str.w	r0, [r1, r3, lsl #2]
   1e498:	622a      	str	r2, [r5, #32]
   1e49a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   1e49e:	69a9      	ldr	r1, [r5, #24]
   1e4a0:	696a      	ldr	r2, [r5, #20]
   1e4a2:	e798      	b.n	1e3d6 <d_substitution+0xa6>
   1e4a4:	0002ddc4 	.word	0x0002ddc4

0001e4a8 <d_call_offset>:
   1e4a8:	b538      	push	{r3, r4, r5, lr}
   1e4aa:	4604      	mov	r4, r0
   1e4ac:	b929      	cbnz	r1, 1e4ba <d_call_offset+0x12>
   1e4ae:	68c3      	ldr	r3, [r0, #12]
   1e4b0:	781a      	ldrb	r2, [r3, #0]
   1e4b2:	b132      	cbz	r2, 1e4c2 <d_call_offset+0x1a>
   1e4b4:	1c5a      	adds	r2, r3, #1
   1e4b6:	60c2      	str	r2, [r0, #12]
   1e4b8:	7819      	ldrb	r1, [r3, #0]
   1e4ba:	2968      	cmp	r1, #104	; 0x68
   1e4bc:	d019      	beq.n	1e4f2 <d_call_offset+0x4a>
   1e4be:	2976      	cmp	r1, #118	; 0x76
   1e4c0:	d001      	beq.n	1e4c6 <d_call_offset+0x1e>
   1e4c2:	2000      	movs	r0, #0
   1e4c4:	bd38      	pop	{r3, r4, r5, pc}
   1e4c6:	f104 050c 	add.w	r5, r4, #12
   1e4ca:	4628      	mov	r0, r5
   1e4cc:	f7ff fe38 	bl	1e140 <d_number.isra.0>
   1e4d0:	68e3      	ldr	r3, [r4, #12]
   1e4d2:	781a      	ldrb	r2, [r3, #0]
   1e4d4:	2a5f      	cmp	r2, #95	; 0x5f
   1e4d6:	d1f4      	bne.n	1e4c2 <d_call_offset+0x1a>
   1e4d8:	3301      	adds	r3, #1
   1e4da:	60e3      	str	r3, [r4, #12]
   1e4dc:	4628      	mov	r0, r5
   1e4de:	f7ff fe2f 	bl	1e140 <d_number.isra.0>
   1e4e2:	68e3      	ldr	r3, [r4, #12]
   1e4e4:	781a      	ldrb	r2, [r3, #0]
   1e4e6:	2a5f      	cmp	r2, #95	; 0x5f
   1e4e8:	d1eb      	bne.n	1e4c2 <d_call_offset+0x1a>
   1e4ea:	3301      	adds	r3, #1
   1e4ec:	60e3      	str	r3, [r4, #12]
   1e4ee:	2001      	movs	r0, #1
   1e4f0:	bd38      	pop	{r3, r4, r5, pc}
   1e4f2:	f104 000c 	add.w	r0, r4, #12
   1e4f6:	f7ff fe23 	bl	1e140 <d_number.isra.0>
   1e4fa:	e7f2      	b.n	1e4e2 <d_call_offset+0x3a>

0001e4fc <d_lookup_template_argument.isra.6>:
   1e4fc:	f8d0 3110 	ldr.w	r3, [r0, #272]	; 0x110
   1e500:	b19b      	cbz	r3, 1e52a <d_lookup_template_argument.isra.6+0x2e>
   1e502:	680a      	ldr	r2, [r1, #0]
   1e504:	685b      	ldr	r3, [r3, #4]
   1e506:	2a00      	cmp	r2, #0
   1e508:	689b      	ldr	r3, [r3, #8]
   1e50a:	db09      	blt.n	1e520 <d_lookup_template_argument.isra.6+0x24>
   1e50c:	b923      	cbnz	r3, 1e518 <d_lookup_template_argument.isra.6+0x1c>
   1e50e:	e007      	b.n	1e520 <d_lookup_template_argument.isra.6+0x24>
   1e510:	b142      	cbz	r2, 1e524 <d_lookup_template_argument.isra.6+0x28>
   1e512:	689b      	ldr	r3, [r3, #8]
   1e514:	3a01      	subs	r2, #1
   1e516:	b11b      	cbz	r3, 1e520 <d_lookup_template_argument.isra.6+0x24>
   1e518:	7819      	ldrb	r1, [r3, #0]
   1e51a:	292f      	cmp	r1, #47	; 0x2f
   1e51c:	d0f8      	beq.n	1e510 <d_lookup_template_argument.isra.6+0x14>
   1e51e:	2300      	movs	r3, #0
   1e520:	4618      	mov	r0, r3
   1e522:	4770      	bx	lr
   1e524:	685b      	ldr	r3, [r3, #4]
   1e526:	4618      	mov	r0, r3
   1e528:	4770      	bx	lr
   1e52a:	2201      	movs	r2, #1
   1e52c:	f8c0 2118 	str.w	r2, [r0, #280]	; 0x118
   1e530:	e7f6      	b.n	1e520 <d_lookup_template_argument.isra.6+0x24>
   1e532:	bf00      	nop

0001e534 <d_find_pack>:
   1e534:	2900      	cmp	r1, #0
   1e536:	d041      	beq.n	1e5bc <d_find_pack+0x88>
   1e538:	b538      	push	{r3, r4, r5, lr}
   1e53a:	4605      	mov	r5, r0
   1e53c:	460c      	mov	r4, r1
   1e53e:	7823      	ldrb	r3, [r4, #0]
   1e540:	2b4b      	cmp	r3, #75	; 0x4b
   1e542:	d827      	bhi.n	1e594 <d_find_pack+0x60>
   1e544:	e8df f003 	tbb	[pc, r3]
   1e548:	2626262e 	.word	0x2626262e
   1e54c:	2b2e3026 	.word	0x2b2e3026
   1e550:	2626262b 	.word	0x2626262b
   1e554:	26262626 	.word	0x26262626
   1e558:	26262626 	.word	0x26262626
   1e55c:	26262626 	.word	0x26262626
   1e560:	2626262e 	.word	0x2626262e
   1e564:	26262626 	.word	0x26262626
   1e568:	26262626 	.word	0x26262626
   1e56c:	2e262626 	.word	0x2e262626
   1e570:	26262626 	.word	0x26262626
   1e574:	2626262e 	.word	0x2626262e
   1e578:	262b2e26 	.word	0x262b2e26
   1e57c:	26262626 	.word	0x26262626
   1e580:	26262626 	.word	0x26262626
   1e584:	26262626 	.word	0x26262626
   1e588:	26262e2e 	.word	0x26262e2e
   1e58c:	2e2e2e26 	.word	0x2e2e2e26
   1e590:	2e2e2626 	.word	0x2e2e2626
   1e594:	6861      	ldr	r1, [r4, #4]
   1e596:	4628      	mov	r0, r5
   1e598:	f7ff ffcc 	bl	1e534 <d_find_pack>
   1e59c:	b918      	cbnz	r0, 1e5a6 <d_find_pack+0x72>
   1e59e:	68a4      	ldr	r4, [r4, #8]
   1e5a0:	2c00      	cmp	r4, #0
   1e5a2:	d1cc      	bne.n	1e53e <d_find_pack+0xa>
   1e5a4:	2000      	movs	r0, #0
   1e5a6:	bd38      	pop	{r3, r4, r5, pc}
   1e5a8:	1d21      	adds	r1, r4, #4
   1e5aa:	4628      	mov	r0, r5
   1e5ac:	f7ff ffa6 	bl	1e4fc <d_lookup_template_argument.isra.6>
   1e5b0:	2800      	cmp	r0, #0
   1e5b2:	d0f7      	beq.n	1e5a4 <d_find_pack+0x70>
   1e5b4:	7803      	ldrb	r3, [r0, #0]
   1e5b6:	2b2f      	cmp	r3, #47	; 0x2f
   1e5b8:	d1f4      	bne.n	1e5a4 <d_find_pack+0x70>
   1e5ba:	bd38      	pop	{r3, r4, r5, pc}
   1e5bc:	2000      	movs	r0, #0
   1e5be:	4770      	bx	lr

0001e5c0 <d_growable_string_callback_adapter>:
   1e5c0:	b5f0      	push	{r4, r5, r6, r7, lr}
   1e5c2:	4615      	mov	r5, r2
   1e5c4:	6852      	ldr	r2, [r2, #4]
   1e5c6:	68ac      	ldr	r4, [r5, #8]
   1e5c8:	1c4b      	adds	r3, r1, #1
   1e5ca:	4413      	add	r3, r2
   1e5cc:	42a3      	cmp	r3, r4
   1e5ce:	b083      	sub	sp, #12
   1e5d0:	460e      	mov	r6, r1
   1e5d2:	4607      	mov	r7, r0
   1e5d4:	d813      	bhi.n	1e5fe <d_growable_string_callback_adapter+0x3e>
   1e5d6:	68ec      	ldr	r4, [r5, #12]
   1e5d8:	b10c      	cbz	r4, 1e5de <d_growable_string_callback_adapter+0x1e>
   1e5da:	b003      	add	sp, #12
   1e5dc:	bdf0      	pop	{r4, r5, r6, r7, pc}
   1e5de:	e895 0009 	ldmia.w	r5, {r0, r3}
   1e5e2:	4632      	mov	r2, r6
   1e5e4:	4639      	mov	r1, r7
   1e5e6:	4418      	add	r0, r3
   1e5e8:	f009 fb3a 	bl	27c60 <memcpy>
   1e5ec:	682b      	ldr	r3, [r5, #0]
   1e5ee:	686a      	ldr	r2, [r5, #4]
   1e5f0:	4433      	add	r3, r6
   1e5f2:	549c      	strb	r4, [r3, r2]
   1e5f4:	686b      	ldr	r3, [r5, #4]
   1e5f6:	441e      	add	r6, r3
   1e5f8:	606e      	str	r6, [r5, #4]
   1e5fa:	b003      	add	sp, #12
   1e5fc:	bdf0      	pop	{r4, r5, r6, r7, pc}
   1e5fe:	68ea      	ldr	r2, [r5, #12]
   1e600:	2a00      	cmp	r2, #0
   1e602:	d1ea      	bne.n	1e5da <d_growable_string_callback_adapter+0x1a>
   1e604:	b91c      	cbnz	r4, 1e60e <d_growable_string_callback_adapter+0x4e>
   1e606:	2b02      	cmp	r3, #2
   1e608:	f04f 0402 	mov.w	r4, #2
   1e60c:	d902      	bls.n	1e614 <d_growable_string_callback_adapter+0x54>
   1e60e:	0064      	lsls	r4, r4, #1
   1e610:	42a3      	cmp	r3, r4
   1e612:	d8fc      	bhi.n	1e60e <d_growable_string_callback_adapter+0x4e>
   1e614:	4621      	mov	r1, r4
   1e616:	6828      	ldr	r0, [r5, #0]
   1e618:	f009 fcd2 	bl	27fc0 <realloc>
   1e61c:	b110      	cbz	r0, 1e624 <d_growable_string_callback_adapter+0x64>
   1e61e:	6028      	str	r0, [r5, #0]
   1e620:	60ac      	str	r4, [r5, #8]
   1e622:	e7d8      	b.n	1e5d6 <d_growable_string_callback_adapter+0x16>
   1e624:	9001      	str	r0, [sp, #4]
   1e626:	6828      	ldr	r0, [r5, #0]
   1e628:	f008 ffc8 	bl	275bc <free>
   1e62c:	9b01      	ldr	r3, [sp, #4]
   1e62e:	602b      	str	r3, [r5, #0]
   1e630:	2201      	movs	r2, #1
   1e632:	606b      	str	r3, [r5, #4]
   1e634:	60ab      	str	r3, [r5, #8]
   1e636:	60ea      	str	r2, [r5, #12]
   1e638:	e7cf      	b.n	1e5da <d_growable_string_callback_adapter+0x1a>
   1e63a:	bf00      	nop

0001e63c <d_append_num>:
   1e63c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1e640:	b088      	sub	sp, #32
   1e642:	460a      	mov	r2, r1
   1e644:	4604      	mov	r4, r0
   1e646:	491b      	ldr	r1, [pc, #108]	; (1e6b4 <d_append_num+0x78>)
   1e648:	a801      	add	r0, sp, #4
   1e64a:	f009 ff13 	bl	28474 <sprintf>
   1e64e:	a801      	add	r0, sp, #4
   1e650:	f00a f8b6 	bl	287c0 <strlen>
   1e654:	b350      	cbz	r0, 1e6ac <d_append_num+0x70>
   1e656:	ad01      	add	r5, sp, #4
   1e658:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
   1e65c:	182f      	adds	r7, r5, r0
   1e65e:	f04f 0800 	mov.w	r8, #0
   1e662:	e009      	b.n	1e678 <d_append_num+0x3c>
   1e664:	460b      	mov	r3, r1
   1e666:	42bd      	cmp	r5, r7
   1e668:	f101 0101 	add.w	r1, r1, #1
   1e66c:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
   1e670:	54e6      	strb	r6, [r4, r3]
   1e672:	f884 6104 	strb.w	r6, [r4, #260]	; 0x104
   1e676:	d019      	beq.n	1e6ac <d_append_num+0x70>
   1e678:	29ff      	cmp	r1, #255	; 0xff
   1e67a:	f815 6b01 	ldrb.w	r6, [r5], #1
   1e67e:	d1f1      	bne.n	1e664 <d_append_num+0x28>
   1e680:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   1e684:	f884 80ff 	strb.w	r8, [r4, #255]	; 0xff
   1e688:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
   1e68c:	4620      	mov	r0, r4
   1e68e:	4798      	blx	r3
   1e690:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   1e694:	3301      	adds	r3, #1
   1e696:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
   1e69a:	2300      	movs	r3, #0
   1e69c:	2101      	movs	r1, #1
   1e69e:	42bd      	cmp	r5, r7
   1e6a0:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
   1e6a4:	54e6      	strb	r6, [r4, r3]
   1e6a6:	f884 6104 	strb.w	r6, [r4, #260]	; 0x104
   1e6aa:	d1e5      	bne.n	1e678 <d_append_num+0x3c>
   1e6ac:	b008      	add	sp, #32
   1e6ae:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   1e6b2:	bf00      	nop
   1e6b4:	0002e580 	.word	0x0002e580

0001e6b8 <d_exprlist>:
   1e6b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1e6bc:	68c3      	ldr	r3, [r0, #12]
   1e6be:	781d      	ldrb	r5, [r3, #0]
   1e6c0:	b083      	sub	sp, #12
   1e6c2:	2200      	movs	r2, #0
   1e6c4:	428d      	cmp	r5, r1
   1e6c6:	4604      	mov	r4, r0
   1e6c8:	9201      	str	r2, [sp, #4]
   1e6ca:	f000 81c6 	beq.w	1ea5a <d_exprlist+0x3a2>
   1e6ce:	4688      	mov	r8, r1
   1e6d0:	f8df 949c 	ldr.w	r9, [pc, #1180]	; 1eb70 <d_exprlist+0x4b8>
   1e6d4:	ae01      	add	r6, sp, #4
   1e6d6:	e023      	b.n	1e720 <d_exprlist+0x68>
   1e6d8:	2a66      	cmp	r2, #102	; 0x66
   1e6da:	d04c      	beq.n	1e776 <d_exprlist+0xbe>
   1e6dc:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
   1e6e0:	2909      	cmp	r1, #9
   1e6e2:	f200 8217 	bhi.w	1eb14 <d_exprlist+0x45c>
   1e6e6:	4620      	mov	r0, r4
   1e6e8:	f001 fb10 	bl	1fd0c <d_unqualified_name>
   1e6ec:	4605      	mov	r5, r0
   1e6ee:	2800      	cmp	r0, #0
   1e6f0:	f000 8170 	beq.w	1e9d4 <d_exprlist+0x31c>
   1e6f4:	68e3      	ldr	r3, [r4, #12]
   1e6f6:	781b      	ldrb	r3, [r3, #0]
   1e6f8:	2b49      	cmp	r3, #73	; 0x49
   1e6fa:	f000 8092 	beq.w	1e822 <d_exprlist+0x16a>
   1e6fe:	6367      	str	r7, [r4, #52]	; 0x34
   1e700:	462a      	mov	r2, r5
   1e702:	2300      	movs	r3, #0
   1e704:	212e      	movs	r1, #46	; 0x2e
   1e706:	4620      	mov	r0, r4
   1e708:	f7ff fbc8 	bl	1de9c <d_make_comp>
   1e70c:	6030      	str	r0, [r6, #0]
   1e70e:	2800      	cmp	r0, #0
   1e710:	d05b      	beq.n	1e7ca <d_exprlist+0x112>
   1e712:	68e3      	ldr	r3, [r4, #12]
   1e714:	781a      	ldrb	r2, [r3, #0]
   1e716:	4542      	cmp	r2, r8
   1e718:	f100 0608 	add.w	r6, r0, #8
   1e71c:	f000 8107 	beq.w	1e92e <d_exprlist+0x276>
   1e720:	2501      	movs	r5, #1
   1e722:	6b67      	ldr	r7, [r4, #52]	; 0x34
   1e724:	6365      	str	r5, [r4, #52]	; 0x34
   1e726:	781a      	ldrb	r2, [r3, #0]
   1e728:	2a4c      	cmp	r2, #76	; 0x4c
   1e72a:	d047      	beq.n	1e7bc <d_exprlist+0x104>
   1e72c:	2a54      	cmp	r2, #84	; 0x54
   1e72e:	d051      	beq.n	1e7d4 <d_exprlist+0x11c>
   1e730:	2a73      	cmp	r2, #115	; 0x73
   1e732:	d1d1      	bne.n	1e6d8 <d_exprlist+0x20>
   1e734:	785a      	ldrb	r2, [r3, #1]
   1e736:	2a72      	cmp	r2, #114	; 0x72
   1e738:	f000 80e2 	beq.w	1e900 <d_exprlist+0x248>
   1e73c:	2a70      	cmp	r2, #112	; 0x70
   1e73e:	f000 80fd 	beq.w	1e93c <d_exprlist+0x284>
   1e742:	4620      	mov	r0, r4
   1e744:	f001 fa22 	bl	1fb8c <d_operator_name>
   1e748:	4605      	mov	r5, r0
   1e74a:	2800      	cmp	r0, #0
   1e74c:	f000 8142 	beq.w	1e9d4 <d_exprlist+0x31c>
   1e750:	782b      	ldrb	r3, [r5, #0]
   1e752:	2b31      	cmp	r3, #49	; 0x31
   1e754:	d043      	beq.n	1e7de <d_exprlist+0x126>
   1e756:	2b32      	cmp	r3, #50	; 0x32
   1e758:	d05c      	beq.n	1e814 <d_exprlist+0x15c>
   1e75a:	2b33      	cmp	r3, #51	; 0x33
   1e75c:	d17b      	bne.n	1e856 <d_exprlist+0x19e>
   1e75e:	68e3      	ldr	r3, [r4, #12]
   1e760:	781a      	ldrb	r2, [r3, #0]
   1e762:	2a5f      	cmp	r2, #95	; 0x5f
   1e764:	f040 80c1 	bne.w	1e8ea <d_exprlist+0x232>
   1e768:	3301      	adds	r3, #1
   1e76a:	60e3      	str	r3, [r4, #12]
   1e76c:	2145      	movs	r1, #69	; 0x45
   1e76e:	4620      	mov	r0, r4
   1e770:	f7ff ffa2 	bl	1e6b8 <d_exprlist>
   1e774:	e0bc      	b.n	1e8f0 <d_exprlist+0x238>
   1e776:	785a      	ldrb	r2, [r3, #1]
   1e778:	2a70      	cmp	r2, #112	; 0x70
   1e77a:	d1e2      	bne.n	1e742 <d_exprlist+0x8a>
   1e77c:	1c9a      	adds	r2, r3, #2
   1e77e:	60e2      	str	r2, [r4, #12]
   1e780:	789a      	ldrb	r2, [r3, #2]
   1e782:	2a54      	cmp	r2, #84	; 0x54
   1e784:	d069      	beq.n	1e85a <d_exprlist+0x1a2>
   1e786:	4620      	mov	r0, r4
   1e788:	f7ff fd1c 	bl	1e1c4 <d_compact_number>
   1e78c:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
   1e790:	4298      	cmp	r0, r3
   1e792:	d060      	beq.n	1e856 <d_exprlist+0x19e>
   1e794:	1c43      	adds	r3, r0, #1
   1e796:	d05e      	beq.n	1e856 <d_exprlist+0x19e>
   1e798:	3001      	adds	r0, #1
   1e79a:	6963      	ldr	r3, [r4, #20]
   1e79c:	69a2      	ldr	r2, [r4, #24]
   1e79e:	4293      	cmp	r3, r2
   1e7a0:	da59      	bge.n	1e856 <d_exprlist+0x19e>
   1e7a2:	6922      	ldr	r2, [r4, #16]
   1e7a4:	1c59      	adds	r1, r3, #1
   1e7a6:	eb03 0343 	add.w	r3, r3, r3, lsl #1
   1e7aa:	eb12 0583 	adds.w	r5, r2, r3, lsl #2
   1e7ae:	6161      	str	r1, [r4, #20]
   1e7b0:	d051      	beq.n	1e856 <d_exprlist+0x19e>
   1e7b2:	2106      	movs	r1, #6
   1e7b4:	f802 1023 	strb.w	r1, [r2, r3, lsl #2]
   1e7b8:	6068      	str	r0, [r5, #4]
   1e7ba:	e7a0      	b.n	1e6fe <d_exprlist+0x46>
   1e7bc:	4620      	mov	r0, r4
   1e7be:	f001 fef3 	bl	205a8 <d_expr_primary>
   1e7c2:	4605      	mov	r5, r0
   1e7c4:	6367      	str	r7, [r4, #52]	; 0x34
   1e7c6:	2d00      	cmp	r5, #0
   1e7c8:	d19a      	bne.n	1e700 <d_exprlist+0x48>
   1e7ca:	2500      	movs	r5, #0
   1e7cc:	4628      	mov	r0, r5
   1e7ce:	b003      	add	sp, #12
   1e7d0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1e7d4:	4620      	mov	r0, r4
   1e7d6:	f7ff fd11 	bl	1e1fc <d_template_param>
   1e7da:	4605      	mov	r5, r0
   1e7dc:	e7f2      	b.n	1e7c4 <d_exprlist+0x10c>
   1e7de:	f8d5 b004 	ldr.w	fp, [r5, #4]
   1e7e2:	6b23      	ldr	r3, [r4, #48]	; 0x30
   1e7e4:	f8db 2008 	ldr.w	r2, [fp, #8]
   1e7e8:	f8db a000 	ldr.w	sl, [fp]
   1e7ec:	3a02      	subs	r2, #2
   1e7ee:	4413      	add	r3, r2
   1e7f0:	6323      	str	r3, [r4, #48]	; 0x30
   1e7f2:	4650      	mov	r0, sl
   1e7f4:	4649      	mov	r1, r9
   1e7f6:	f009 fe67 	bl	284c8 <strcmp>
   1e7fa:	2800      	cmp	r0, #0
   1e7fc:	f000 80e6 	beq.w	1e9cc <d_exprlist+0x314>
   1e800:	f8db 300c 	ldr.w	r3, [fp, #12]
   1e804:	2b03      	cmp	r3, #3
   1e806:	d826      	bhi.n	1e856 <d_exprlist+0x19e>
   1e808:	e8df f013 	tbh	[pc, r3, lsl #1]
   1e80c:	0135002b 	.word	0x0135002b
   1e810:	00a50033 	.word	0x00a50033
   1e814:	686b      	ldr	r3, [r5, #4]
   1e816:	2b03      	cmp	r3, #3
   1e818:	d81d      	bhi.n	1e856 <d_exprlist+0x19e>
   1e81a:	e8df f003 	tbb	[pc, r3]
   1e81e:	6622      	.short	0x6622
   1e820:	1c1c      	.short	0x1c1c
   1e822:	4620      	mov	r0, r4
   1e824:	f000 fc04 	bl	1f030 <d_template_args>
   1e828:	462a      	mov	r2, r5
   1e82a:	4603      	mov	r3, r0
   1e82c:	2104      	movs	r1, #4
   1e82e:	4620      	mov	r0, r4
   1e830:	f7ff fb34 	bl	1de9c <d_make_comp>
   1e834:	4605      	mov	r5, r0
   1e836:	e7c5      	b.n	1e7c4 <d_exprlist+0x10c>
   1e838:	2a74      	cmp	r2, #116	; 0x74
   1e83a:	d182      	bne.n	1e742 <d_exprlist+0x8a>
   1e83c:	785b      	ldrb	r3, [r3, #1]
   1e83e:	2b6c      	cmp	r3, #108	; 0x6c
   1e840:	f47f af7f 	bne.w	1e742 <d_exprlist+0x8a>
   1e844:	4620      	mov	r0, r4
   1e846:	f000 fdb9 	bl	1f3bc <d_type>
   1e84a:	68e3      	ldr	r3, [r4, #12]
   1e84c:	785a      	ldrb	r2, [r3, #1]
   1e84e:	4605      	mov	r5, r0
   1e850:	2a00      	cmp	r2, #0
   1e852:	f040 8169 	bne.w	1eb28 <d_exprlist+0x470>
   1e856:	6367      	str	r7, [r4, #52]	; 0x34
   1e858:	e7b7      	b.n	1e7ca <d_exprlist+0x112>
   1e85a:	3303      	adds	r3, #3
   1e85c:	60e3      	str	r3, [r4, #12]
   1e85e:	2000      	movs	r0, #0
   1e860:	e79b      	b.n	1e79a <d_exprlist+0xe2>
   1e862:	462a      	mov	r2, r5
   1e864:	2300      	movs	r3, #0
   1e866:	2135      	movs	r1, #53	; 0x35
   1e868:	4620      	mov	r0, r4
   1e86a:	f7ff fb17 	bl	1de9c <d_make_comp>
   1e86e:	4605      	mov	r5, r0
   1e870:	e7a8      	b.n	1e7c4 <d_exprlist+0x10c>
   1e872:	f1ba 0f00 	cmp.w	sl, #0
   1e876:	d0ee      	beq.n	1e856 <d_exprlist+0x19e>
   1e878:	686b      	ldr	r3, [r5, #4]
   1e87a:	681b      	ldr	r3, [r3, #0]
   1e87c:	785a      	ldrb	r2, [r3, #1]
   1e87e:	2a63      	cmp	r2, #99	; 0x63
   1e880:	f000 80d2 	beq.w	1ea28 <d_exprlist+0x370>
   1e884:	f89a 3000 	ldrb.w	r3, [sl]
   1e888:	2b66      	cmp	r3, #102	; 0x66
   1e88a:	f000 80ef 	beq.w	1ea6c <d_exprlist+0x3b4>
   1e88e:	4620      	mov	r0, r4
   1e890:	f000 f970 	bl	1eb74 <d_expression_1>
   1e894:	4683      	mov	fp, r0
   1e896:	49b1      	ldr	r1, [pc, #708]	; (1eb5c <d_exprlist+0x4a4>)
   1e898:	4650      	mov	r0, sl
   1e89a:	f009 fe15 	bl	284c8 <strcmp>
   1e89e:	2800      	cmp	r0, #0
   1e8a0:	f000 809d 	beq.w	1e9de <d_exprlist+0x326>
   1e8a4:	49ae      	ldr	r1, [pc, #696]	; (1eb60 <d_exprlist+0x4a8>)
   1e8a6:	4650      	mov	r0, sl
   1e8a8:	f009 fe0e 	bl	284c8 <strcmp>
   1e8ac:	b130      	cbz	r0, 1e8bc <d_exprlist+0x204>
   1e8ae:	4650      	mov	r0, sl
   1e8b0:	49ac      	ldr	r1, [pc, #688]	; (1eb64 <d_exprlist+0x4ac>)
   1e8b2:	f009 fe09 	bl	284c8 <strcmp>
   1e8b6:	2800      	cmp	r0, #0
   1e8b8:	f040 8083 	bne.w	1e9c2 <d_exprlist+0x30a>
   1e8bc:	4620      	mov	r0, r4
   1e8be:	f001 fa25 	bl	1fd0c <d_unqualified_name>
   1e8c2:	68e3      	ldr	r3, [r4, #12]
   1e8c4:	781b      	ldrb	r3, [r3, #0]
   1e8c6:	2b49      	cmp	r3, #73	; 0x49
   1e8c8:	4682      	mov	sl, r0
   1e8ca:	f000 80e9 	beq.w	1eaa0 <d_exprlist+0x3e8>
   1e8ce:	4653      	mov	r3, sl
   1e8d0:	465a      	mov	r2, fp
   1e8d2:	2138      	movs	r1, #56	; 0x38
   1e8d4:	4620      	mov	r0, r4
   1e8d6:	f7ff fae1 	bl	1de9c <d_make_comp>
   1e8da:	462a      	mov	r2, r5
   1e8dc:	4603      	mov	r3, r0
   1e8de:	2137      	movs	r1, #55	; 0x37
   1e8e0:	4620      	mov	r0, r4
   1e8e2:	f7ff fadb 	bl	1de9c <d_make_comp>
   1e8e6:	4605      	mov	r5, r0
   1e8e8:	e76c      	b.n	1e7c4 <d_exprlist+0x10c>
   1e8ea:	4620      	mov	r0, r4
   1e8ec:	f000 f942 	bl	1eb74 <d_expression_1>
   1e8f0:	4603      	mov	r3, r0
   1e8f2:	462a      	mov	r2, r5
   1e8f4:	2136      	movs	r1, #54	; 0x36
   1e8f6:	4620      	mov	r0, r4
   1e8f8:	f7ff fad0 	bl	1de9c <d_make_comp>
   1e8fc:	4605      	mov	r5, r0
   1e8fe:	e761      	b.n	1e7c4 <d_exprlist+0x10c>
   1e900:	3302      	adds	r3, #2
   1e902:	60e3      	str	r3, [r4, #12]
   1e904:	4620      	mov	r0, r4
   1e906:	f000 fd59 	bl	1f3bc <d_type>
   1e90a:	4682      	mov	sl, r0
   1e90c:	4620      	mov	r0, r4
   1e90e:	f001 f9fd 	bl	1fd0c <d_unqualified_name>
   1e912:	68e3      	ldr	r3, [r4, #12]
   1e914:	781b      	ldrb	r3, [r3, #0]
   1e916:	2b49      	cmp	r3, #73	; 0x49
   1e918:	4683      	mov	fp, r0
   1e91a:	f000 8093 	beq.w	1ea44 <d_exprlist+0x38c>
   1e91e:	4603      	mov	r3, r0
   1e920:	4629      	mov	r1, r5
   1e922:	4652      	mov	r2, sl
   1e924:	4620      	mov	r0, r4
   1e926:	f7ff fab9 	bl	1de9c <d_make_comp>
   1e92a:	4605      	mov	r5, r0
   1e92c:	e74a      	b.n	1e7c4 <d_exprlist+0x10c>
   1e92e:	9d01      	ldr	r5, [sp, #4]
   1e930:	3301      	adds	r3, #1
   1e932:	4628      	mov	r0, r5
   1e934:	60e3      	str	r3, [r4, #12]
   1e936:	b003      	add	sp, #12
   1e938:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1e93c:	3302      	adds	r3, #2
   1e93e:	60e3      	str	r3, [r4, #12]
   1e940:	4620      	mov	r0, r4
   1e942:	f000 f917 	bl	1eb74 <d_expression_1>
   1e946:	2300      	movs	r3, #0
   1e948:	4602      	mov	r2, r0
   1e94a:	214a      	movs	r1, #74	; 0x4a
   1e94c:	4620      	mov	r0, r4
   1e94e:	f7ff faa5 	bl	1de9c <d_make_comp>
   1e952:	4605      	mov	r5, r0
   1e954:	e736      	b.n	1e7c4 <d_exprlist+0x10c>
   1e956:	f1ba 0f00 	cmp.w	sl, #0
   1e95a:	f43f af7c 	beq.w	1e856 <d_exprlist+0x19e>
   1e95e:	4982      	ldr	r1, [pc, #520]	; (1eb68 <d_exprlist+0x4b0>)
   1e960:	4650      	mov	r0, sl
   1e962:	f009 fdb1 	bl	284c8 <strcmp>
   1e966:	2800      	cmp	r0, #0
   1e968:	d03f      	beq.n	1e9ea <d_exprlist+0x332>
   1e96a:	f89a 3000 	ldrb.w	r3, [sl]
   1e96e:	2b66      	cmp	r3, #102	; 0x66
   1e970:	f000 80bd 	beq.w	1eaee <d_exprlist+0x436>
   1e974:	2b6e      	cmp	r3, #110	; 0x6e
   1e976:	f47f af6e 	bne.w	1e856 <d_exprlist+0x19e>
   1e97a:	f89a 3001 	ldrb.w	r3, [sl, #1]
   1e97e:	2b77      	cmp	r3, #119	; 0x77
   1e980:	d002      	beq.n	1e988 <d_exprlist+0x2d0>
   1e982:	2b61      	cmp	r3, #97	; 0x61
   1e984:	f47f af67 	bne.w	1e856 <d_exprlist+0x19e>
   1e988:	215f      	movs	r1, #95	; 0x5f
   1e98a:	4620      	mov	r0, r4
   1e98c:	f7ff fe94 	bl	1e6b8 <d_exprlist>
   1e990:	4682      	mov	sl, r0
   1e992:	4620      	mov	r0, r4
   1e994:	f000 fd12 	bl	1f3bc <d_type>
   1e998:	68e3      	ldr	r3, [r4, #12]
   1e99a:	781a      	ldrb	r2, [r3, #0]
   1e99c:	2a45      	cmp	r2, #69	; 0x45
   1e99e:	4683      	mov	fp, r0
   1e9a0:	f000 80a1 	beq.w	1eae6 <d_exprlist+0x42e>
   1e9a4:	2a70      	cmp	r2, #112	; 0x70
   1e9a6:	f000 80a6 	beq.w	1eaf6 <d_exprlist+0x43e>
   1e9aa:	2a69      	cmp	r2, #105	; 0x69
   1e9ac:	f47f af53 	bne.w	1e856 <d_exprlist+0x19e>
   1e9b0:	785b      	ldrb	r3, [r3, #1]
   1e9b2:	2b6c      	cmp	r3, #108	; 0x6c
   1e9b4:	f47f af4f 	bne.w	1e856 <d_exprlist+0x19e>
   1e9b8:	4620      	mov	r0, r4
   1e9ba:	f000 f8db 	bl	1eb74 <d_expression_1>
   1e9be:	4603      	mov	r3, r0
   1e9c0:	e01f      	b.n	1ea02 <d_exprlist+0x34a>
   1e9c2:	4620      	mov	r0, r4
   1e9c4:	f000 f8d6 	bl	1eb74 <d_expression_1>
   1e9c8:	4682      	mov	sl, r0
   1e9ca:	e780      	b.n	1e8ce <d_exprlist+0x216>
   1e9cc:	4620      	mov	r0, r4
   1e9ce:	f000 fcf5 	bl	1f3bc <d_type>
   1e9d2:	e78d      	b.n	1e8f0 <d_exprlist+0x238>
   1e9d4:	4628      	mov	r0, r5
   1e9d6:	6367      	str	r7, [r4, #52]	; 0x34
   1e9d8:	b003      	add	sp, #12
   1e9da:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1e9de:	2145      	movs	r1, #69	; 0x45
   1e9e0:	4620      	mov	r0, r4
   1e9e2:	f7ff fe69 	bl	1e6b8 <d_exprlist>
   1e9e6:	4682      	mov	sl, r0
   1e9e8:	e771      	b.n	1e8ce <d_exprlist+0x216>
   1e9ea:	4620      	mov	r0, r4
   1e9ec:	f000 f8c2 	bl	1eb74 <d_expression_1>
   1e9f0:	4682      	mov	sl, r0
   1e9f2:	4620      	mov	r0, r4
   1e9f4:	f000 f8be 	bl	1eb74 <d_expression_1>
   1e9f8:	4683      	mov	fp, r0
   1e9fa:	4620      	mov	r0, r4
   1e9fc:	f000 f8ba 	bl	1eb74 <d_expression_1>
   1ea00:	4603      	mov	r3, r0
   1ea02:	465a      	mov	r2, fp
   1ea04:	213b      	movs	r1, #59	; 0x3b
   1ea06:	4620      	mov	r0, r4
   1ea08:	f7ff fa48 	bl	1de9c <d_make_comp>
   1ea0c:	4652      	mov	r2, sl
   1ea0e:	4603      	mov	r3, r0
   1ea10:	213a      	movs	r1, #58	; 0x3a
   1ea12:	4620      	mov	r0, r4
   1ea14:	f7ff fa42 	bl	1de9c <d_make_comp>
   1ea18:	462a      	mov	r2, r5
   1ea1a:	4603      	mov	r3, r0
   1ea1c:	2139      	movs	r1, #57	; 0x39
   1ea1e:	4620      	mov	r0, r4
   1ea20:	f7ff fa3c 	bl	1de9c <d_make_comp>
   1ea24:	4605      	mov	r5, r0
   1ea26:	e6cd      	b.n	1e7c4 <d_exprlist+0x10c>
   1ea28:	781b      	ldrb	r3, [r3, #0]
   1ea2a:	f1a3 0263 	sub.w	r2, r3, #99	; 0x63
   1ea2e:	2a01      	cmp	r2, #1
   1ea30:	d903      	bls.n	1ea3a <d_exprlist+0x382>
   1ea32:	3b72      	subs	r3, #114	; 0x72
   1ea34:	2b01      	cmp	r3, #1
   1ea36:	f63f af25 	bhi.w	1e884 <d_exprlist+0x1cc>
   1ea3a:	4620      	mov	r0, r4
   1ea3c:	f000 fcbe 	bl	1f3bc <d_type>
   1ea40:	4683      	mov	fp, r0
   1ea42:	e728      	b.n	1e896 <d_exprlist+0x1de>
   1ea44:	4620      	mov	r0, r4
   1ea46:	f000 faf3 	bl	1f030 <d_template_args>
   1ea4a:	465a      	mov	r2, fp
   1ea4c:	4603      	mov	r3, r0
   1ea4e:	2104      	movs	r1, #4
   1ea50:	4620      	mov	r0, r4
   1ea52:	f7ff fa23 	bl	1de9c <d_make_comp>
   1ea56:	4603      	mov	r3, r0
   1ea58:	e762      	b.n	1e920 <d_exprlist+0x268>
   1ea5a:	3301      	adds	r3, #1
   1ea5c:	60c3      	str	r3, [r0, #12]
   1ea5e:	212e      	movs	r1, #46	; 0x2e
   1ea60:	4613      	mov	r3, r2
   1ea62:	b003      	add	sp, #12
   1ea64:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1ea68:	f7ff ba18 	b.w	1de9c <d_make_comp>
   1ea6c:	4620      	mov	r0, r4
   1ea6e:	f001 f88d 	bl	1fb8c <d_operator_name>
   1ea72:	4683      	mov	fp, r0
   1ea74:	e70f      	b.n	1e896 <d_exprlist+0x1de>
   1ea76:	f1ba 0f00 	cmp.w	sl, #0
   1ea7a:	f43f af36 	beq.w	1e8ea <d_exprlist+0x232>
   1ea7e:	f89a 3000 	ldrb.w	r3, [sl]
   1ea82:	2b70      	cmp	r3, #112	; 0x70
   1ea84:	d017      	beq.n	1eab6 <d_exprlist+0x3fe>
   1ea86:	2b6d      	cmp	r3, #109	; 0x6d
   1ea88:	d015      	beq.n	1eab6 <d_exprlist+0x3fe>
   1ea8a:	4650      	mov	r0, sl
   1ea8c:	4937      	ldr	r1, [pc, #220]	; (1eb6c <d_exprlist+0x4b4>)
   1ea8e:	f009 fd1b 	bl	284c8 <strcmp>
   1ea92:	2800      	cmp	r0, #0
   1ea94:	f47f af29 	bne.w	1e8ea <d_exprlist+0x232>
   1ea98:	4620      	mov	r0, r4
   1ea9a:	f000 fa65 	bl	1ef68 <d_template_args_1>
   1ea9e:	e727      	b.n	1e8f0 <d_exprlist+0x238>
   1eaa0:	4620      	mov	r0, r4
   1eaa2:	f000 fac5 	bl	1f030 <d_template_args>
   1eaa6:	4652      	mov	r2, sl
   1eaa8:	4603      	mov	r3, r0
   1eaaa:	2104      	movs	r1, #4
   1eaac:	4620      	mov	r0, r4
   1eaae:	f7ff f9f5 	bl	1de9c <d_make_comp>
   1eab2:	4682      	mov	sl, r0
   1eab4:	e70b      	b.n	1e8ce <d_exprlist+0x216>
   1eab6:	f89a 2001 	ldrb.w	r2, [sl, #1]
   1eaba:	429a      	cmp	r2, r3
   1eabc:	d1e5      	bne.n	1ea8a <d_exprlist+0x3d2>
   1eabe:	68e3      	ldr	r3, [r4, #12]
   1eac0:	781a      	ldrb	r2, [r3, #0]
   1eac2:	2a5f      	cmp	r2, #95	; 0x5f
   1eac4:	d023      	beq.n	1eb0e <d_exprlist+0x456>
   1eac6:	4650      	mov	r0, sl
   1eac8:	4928      	ldr	r1, [pc, #160]	; (1eb6c <d_exprlist+0x4b4>)
   1eaca:	f009 fcfd 	bl	284c8 <strcmp>
   1eace:	2800      	cmp	r0, #0
   1ead0:	d03f      	beq.n	1eb52 <d_exprlist+0x49a>
   1ead2:	4620      	mov	r0, r4
   1ead4:	f000 f84e 	bl	1eb74 <d_expression_1>
   1ead8:	4603      	mov	r3, r0
   1eada:	461a      	mov	r2, r3
   1eadc:	2138      	movs	r1, #56	; 0x38
   1eade:	4620      	mov	r0, r4
   1eae0:	f7ff f9dc 	bl	1de9c <d_make_comp>
   1eae4:	e704      	b.n	1e8f0 <d_exprlist+0x238>
   1eae6:	3301      	adds	r3, #1
   1eae8:	60e3      	str	r3, [r4, #12]
   1eaea:	2300      	movs	r3, #0
   1eaec:	e789      	b.n	1ea02 <d_exprlist+0x34a>
   1eaee:	4620      	mov	r0, r4
   1eaf0:	f001 f84c 	bl	1fb8c <d_operator_name>
   1eaf4:	e77c      	b.n	1e9f0 <d_exprlist+0x338>
   1eaf6:	785a      	ldrb	r2, [r3, #1]
   1eaf8:	2a69      	cmp	r2, #105	; 0x69
   1eafa:	f47f aeac 	bne.w	1e856 <d_exprlist+0x19e>
   1eafe:	3302      	adds	r3, #2
   1eb00:	60e3      	str	r3, [r4, #12]
   1eb02:	2145      	movs	r1, #69	; 0x45
   1eb04:	4620      	mov	r0, r4
   1eb06:	f7ff fdd7 	bl	1e6b8 <d_exprlist>
   1eb0a:	4603      	mov	r3, r0
   1eb0c:	e779      	b.n	1ea02 <d_exprlist+0x34a>
   1eb0e:	3301      	adds	r3, #1
   1eb10:	60e3      	str	r3, [r4, #12]
   1eb12:	e7ba      	b.n	1ea8a <d_exprlist+0x3d2>
   1eb14:	2a6f      	cmp	r2, #111	; 0x6f
   1eb16:	d015      	beq.n	1eb44 <d_exprlist+0x48c>
   1eb18:	2a69      	cmp	r2, #105	; 0x69
   1eb1a:	f47f ae8d 	bne.w	1e838 <d_exprlist+0x180>
   1eb1e:	785a      	ldrb	r2, [r3, #1]
   1eb20:	2a6c      	cmp	r2, #108	; 0x6c
   1eb22:	f47f ae0e 	bne.w	1e742 <d_exprlist+0x8a>
   1eb26:	2500      	movs	r5, #0
   1eb28:	3302      	adds	r3, #2
   1eb2a:	60e3      	str	r3, [r4, #12]
   1eb2c:	2145      	movs	r1, #69	; 0x45
   1eb2e:	4620      	mov	r0, r4
   1eb30:	f7ff fdc2 	bl	1e6b8 <d_exprlist>
   1eb34:	462a      	mov	r2, r5
   1eb36:	4603      	mov	r3, r0
   1eb38:	2130      	movs	r1, #48	; 0x30
   1eb3a:	4620      	mov	r0, r4
   1eb3c:	f7ff f9ae 	bl	1de9c <d_make_comp>
   1eb40:	4605      	mov	r5, r0
   1eb42:	e63f      	b.n	1e7c4 <d_exprlist+0x10c>
   1eb44:	785a      	ldrb	r2, [r3, #1]
   1eb46:	2a6e      	cmp	r2, #110	; 0x6e
   1eb48:	f47f adfb 	bne.w	1e742 <d_exprlist+0x8a>
   1eb4c:	3302      	adds	r3, #2
   1eb4e:	60e3      	str	r3, [r4, #12]
   1eb50:	e5c9      	b.n	1e6e6 <d_exprlist+0x2e>
   1eb52:	4620      	mov	r0, r4
   1eb54:	f000 fa08 	bl	1ef68 <d_template_args_1>
   1eb58:	4603      	mov	r3, r0
   1eb5a:	e7be      	b.n	1eada <d_exprlist+0x422>
   1eb5c:	0002e588 	.word	0x0002e588
   1eb60:	0002e58c 	.word	0x0002e58c
   1eb64:	0002e590 	.word	0x0002e590
   1eb68:	0002e594 	.word	0x0002e594
   1eb6c:	0002e584 	.word	0x0002e584
   1eb70:	0002ea88 	.word	0x0002ea88

0001eb74 <d_expression_1>:
   1eb74:	68c1      	ldr	r1, [r0, #12]
   1eb76:	780b      	ldrb	r3, [r1, #0]
   1eb78:	2b4c      	cmp	r3, #76	; 0x4c
   1eb7a:	f000 8087 	beq.w	1ec8c <d_expression_1+0x118>
   1eb7e:	2b54      	cmp	r3, #84	; 0x54
   1eb80:	f000 8086 	beq.w	1ec90 <d_expression_1+0x11c>
   1eb84:	2b73      	cmp	r3, #115	; 0x73
   1eb86:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1eb8a:	4604      	mov	r4, r0
   1eb8c:	d037      	beq.n	1ebfe <d_expression_1+0x8a>
   1eb8e:	2b66      	cmp	r3, #102	; 0x66
   1eb90:	d012      	beq.n	1ebb8 <d_expression_1+0x44>
   1eb92:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
   1eb96:	2a09      	cmp	r2, #9
   1eb98:	f200 81b8 	bhi.w	1ef0c <d_expression_1+0x398>
   1eb9c:	4620      	mov	r0, r4
   1eb9e:	f001 f8b5 	bl	1fd0c <d_unqualified_name>
   1eba2:	4605      	mov	r5, r0
   1eba4:	2800      	cmp	r0, #0
   1eba6:	d06d      	beq.n	1ec84 <d_expression_1+0x110>
   1eba8:	68e3      	ldr	r3, [r4, #12]
   1ebaa:	781b      	ldrb	r3, [r3, #0]
   1ebac:	2b49      	cmp	r3, #73	; 0x49
   1ebae:	f000 8088 	beq.w	1ecc2 <d_expression_1+0x14e>
   1ebb2:	4628      	mov	r0, r5
   1ebb4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   1ebb8:	784b      	ldrb	r3, [r1, #1]
   1ebba:	2b70      	cmp	r3, #112	; 0x70
   1ebbc:	d039      	beq.n	1ec32 <d_expression_1+0xbe>
   1ebbe:	4620      	mov	r0, r4
   1ebc0:	f000 ffe4 	bl	1fb8c <d_operator_name>
   1ebc4:	4605      	mov	r5, r0
   1ebc6:	2800      	cmp	r0, #0
   1ebc8:	d05c      	beq.n	1ec84 <d_expression_1+0x110>
   1ebca:	7803      	ldrb	r3, [r0, #0]
   1ebcc:	2b31      	cmp	r3, #49	; 0x31
   1ebce:	d061      	beq.n	1ec94 <d_expression_1+0x120>
   1ebd0:	2b32      	cmp	r3, #50	; 0x32
   1ebd2:	d025      	beq.n	1ec20 <d_expression_1+0xac>
   1ebd4:	2b33      	cmp	r3, #51	; 0x33
   1ebd6:	d155      	bne.n	1ec84 <d_expression_1+0x110>
   1ebd8:	68e3      	ldr	r3, [r4, #12]
   1ebda:	781a      	ldrb	r2, [r3, #0]
   1ebdc:	2a5f      	cmp	r2, #95	; 0x5f
   1ebde:	f040 81b4 	bne.w	1ef4a <d_expression_1+0x3d6>
   1ebe2:	3301      	adds	r3, #1
   1ebe4:	60e3      	str	r3, [r4, #12]
   1ebe6:	2145      	movs	r1, #69	; 0x45
   1ebe8:	4620      	mov	r0, r4
   1ebea:	f7ff fd65 	bl	1e6b8 <d_exprlist>
   1ebee:	4603      	mov	r3, r0
   1ebf0:	462a      	mov	r2, r5
   1ebf2:	4620      	mov	r0, r4
   1ebf4:	2136      	movs	r1, #54	; 0x36
   1ebf6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   1ebfa:	f7ff b94f 	b.w	1de9c <d_make_comp>
   1ebfe:	784b      	ldrb	r3, [r1, #1]
   1ec00:	2b72      	cmp	r3, #114	; 0x72
   1ec02:	d069      	beq.n	1ecd8 <d_expression_1+0x164>
   1ec04:	2b70      	cmp	r3, #112	; 0x70
   1ec06:	d1da      	bne.n	1ebbe <d_expression_1+0x4a>
   1ec08:	3102      	adds	r1, #2
   1ec0a:	60c1      	str	r1, [r0, #12]
   1ec0c:	f7ff ffb2 	bl	1eb74 <d_expression_1>
   1ec10:	2300      	movs	r3, #0
   1ec12:	4602      	mov	r2, r0
   1ec14:	214a      	movs	r1, #74	; 0x4a
   1ec16:	4620      	mov	r0, r4
   1ec18:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   1ec1c:	f7ff b93e 	b.w	1de9c <d_make_comp>
   1ec20:	6843      	ldr	r3, [r0, #4]
   1ec22:	2b03      	cmp	r3, #3
   1ec24:	d82e      	bhi.n	1ec84 <d_expression_1+0x110>
   1ec26:	e8df f013 	tbh	[pc, r3, lsl #1]
   1ec2a:	0071      	.short	0x0071
   1ec2c:	002d0190 	.word	0x002d0190
   1ec30:	002d      	.short	0x002d
   1ec32:	1c8b      	adds	r3, r1, #2
   1ec34:	60c3      	str	r3, [r0, #12]
   1ec36:	788b      	ldrb	r3, [r1, #2]
   1ec38:	2b54      	cmp	r3, #84	; 0x54
   1ec3a:	d063      	beq.n	1ed04 <d_expression_1+0x190>
   1ec3c:	f7ff fac2 	bl	1e1c4 <d_compact_number>
   1ec40:	43c3      	mvns	r3, r0
   1ec42:	f033 4300 	bics.w	r3, r3, #2147483648	; 0x80000000
   1ec46:	d01d      	beq.n	1ec84 <d_expression_1+0x110>
   1ec48:	3001      	adds	r0, #1
   1ec4a:	6963      	ldr	r3, [r4, #20]
   1ec4c:	69a2      	ldr	r2, [r4, #24]
   1ec4e:	4293      	cmp	r3, r2
   1ec50:	da18      	bge.n	1ec84 <d_expression_1+0x110>
   1ec52:	eb03 0243 	add.w	r2, r3, r3, lsl #1
   1ec56:	6921      	ldr	r1, [r4, #16]
   1ec58:	0092      	lsls	r2, r2, #2
   1ec5a:	3301      	adds	r3, #1
   1ec5c:	188d      	adds	r5, r1, r2
   1ec5e:	6163      	str	r3, [r4, #20]
   1ec60:	d0a7      	beq.n	1ebb2 <d_expression_1+0x3e>
   1ec62:	2306      	movs	r3, #6
   1ec64:	548b      	strb	r3, [r1, r2]
   1ec66:	6068      	str	r0, [r5, #4]
   1ec68:	e7a3      	b.n	1ebb2 <d_expression_1+0x3e>
   1ec6a:	2b74      	cmp	r3, #116	; 0x74
   1ec6c:	d1a7      	bne.n	1ebbe <d_expression_1+0x4a>
   1ec6e:	784b      	ldrb	r3, [r1, #1]
   1ec70:	2b6c      	cmp	r3, #108	; 0x6c
   1ec72:	d1a4      	bne.n	1ebbe <d_expression_1+0x4a>
   1ec74:	f000 fba2 	bl	1f3bc <d_type>
   1ec78:	68e1      	ldr	r1, [r4, #12]
   1ec7a:	784b      	ldrb	r3, [r1, #1]
   1ec7c:	4605      	mov	r5, r0
   1ec7e:	2b00      	cmp	r3, #0
   1ec80:	f040 814e 	bne.w	1ef20 <d_expression_1+0x3ac>
   1ec84:	2500      	movs	r5, #0
   1ec86:	4628      	mov	r0, r5
   1ec88:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   1ec8c:	f001 bc8c 	b.w	205a8 <d_expr_primary>
   1ec90:	f7ff bab4 	b.w	1e1fc <d_template_param>
   1ec94:	6847      	ldr	r7, [r0, #4]
   1ec96:	6b23      	ldr	r3, [r4, #48]	; 0x30
   1ec98:	68ba      	ldr	r2, [r7, #8]
   1ec9a:	683e      	ldr	r6, [r7, #0]
   1ec9c:	49ac      	ldr	r1, [pc, #688]	; (1ef50 <d_expression_1+0x3dc>)
   1ec9e:	3a02      	subs	r2, #2
   1eca0:	4413      	add	r3, r2
   1eca2:	6323      	str	r3, [r4, #48]	; 0x30
   1eca4:	4630      	mov	r0, r6
   1eca6:	f009 fc0f 	bl	284c8 <strcmp>
   1ecaa:	2800      	cmp	r0, #0
   1ecac:	f000 80ab 	beq.w	1ee06 <d_expression_1+0x292>
   1ecb0:	68ff      	ldr	r7, [r7, #12]
   1ecb2:	2f03      	cmp	r7, #3
   1ecb4:	d8e6      	bhi.n	1ec84 <d_expression_1+0x110>
   1ecb6:	e8df f017 	tbh	[pc, r7, lsl #1]
   1ecba:	0029      	.short	0x0029
   1ecbc:	007100ff 	.word	0x007100ff
   1ecc0:	0031      	.short	0x0031
   1ecc2:	4620      	mov	r0, r4
   1ecc4:	f000 f9b4 	bl	1f030 <d_template_args>
   1ecc8:	462a      	mov	r2, r5
   1ecca:	4603      	mov	r3, r0
   1eccc:	2104      	movs	r1, #4
   1ecce:	4620      	mov	r0, r4
   1ecd0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   1ecd4:	f7ff b8e2 	b.w	1de9c <d_make_comp>
   1ecd8:	3102      	adds	r1, #2
   1ecda:	60c1      	str	r1, [r0, #12]
   1ecdc:	f000 fb6e 	bl	1f3bc <d_type>
   1ece0:	4605      	mov	r5, r0
   1ece2:	4620      	mov	r0, r4
   1ece4:	f001 f812 	bl	1fd0c <d_unqualified_name>
   1ece8:	68e3      	ldr	r3, [r4, #12]
   1ecea:	781b      	ldrb	r3, [r3, #0]
   1ecec:	2b49      	cmp	r3, #73	; 0x49
   1ecee:	4606      	mov	r6, r0
   1ecf0:	f000 80ae 	beq.w	1ee50 <d_expression_1+0x2dc>
   1ecf4:	4603      	mov	r3, r0
   1ecf6:	462a      	mov	r2, r5
   1ecf8:	4620      	mov	r0, r4
   1ecfa:	2101      	movs	r1, #1
   1ecfc:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   1ed00:	f7ff b8cc 	b.w	1de9c <d_make_comp>
   1ed04:	3103      	adds	r1, #3
   1ed06:	60c1      	str	r1, [r0, #12]
   1ed08:	2000      	movs	r0, #0
   1ed0a:	e79e      	b.n	1ec4a <d_expression_1+0xd6>
   1ed0c:	462a      	mov	r2, r5
   1ed0e:	4620      	mov	r0, r4
   1ed10:	2300      	movs	r3, #0
   1ed12:	2135      	movs	r1, #53	; 0x35
   1ed14:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   1ed18:	f7ff b8c0 	b.w	1de9c <d_make_comp>
   1ed1c:	2e00      	cmp	r6, #0
   1ed1e:	d0b1      	beq.n	1ec84 <d_expression_1+0x110>
   1ed20:	498c      	ldr	r1, [pc, #560]	; (1ef54 <d_expression_1+0x3e0>)
   1ed22:	4630      	mov	r0, r6
   1ed24:	f009 fbd0 	bl	284c8 <strcmp>
   1ed28:	2800      	cmp	r0, #0
   1ed2a:	d071      	beq.n	1ee10 <d_expression_1+0x29c>
   1ed2c:	7833      	ldrb	r3, [r6, #0]
   1ed2e:	2b66      	cmp	r3, #102	; 0x66
   1ed30:	f000 80b2 	beq.w	1ee98 <d_expression_1+0x324>
   1ed34:	2b6e      	cmp	r3, #110	; 0x6e
   1ed36:	d1a5      	bne.n	1ec84 <d_expression_1+0x110>
   1ed38:	7873      	ldrb	r3, [r6, #1]
   1ed3a:	2b77      	cmp	r3, #119	; 0x77
   1ed3c:	d001      	beq.n	1ed42 <d_expression_1+0x1ce>
   1ed3e:	2b61      	cmp	r3, #97	; 0x61
   1ed40:	d1a0      	bne.n	1ec84 <d_expression_1+0x110>
   1ed42:	215f      	movs	r1, #95	; 0x5f
   1ed44:	4620      	mov	r0, r4
   1ed46:	f7ff fcb7 	bl	1e6b8 <d_exprlist>
   1ed4a:	4606      	mov	r6, r0
   1ed4c:	4620      	mov	r0, r4
   1ed4e:	f000 fb35 	bl	1f3bc <d_type>
   1ed52:	68e3      	ldr	r3, [r4, #12]
   1ed54:	781a      	ldrb	r2, [r3, #0]
   1ed56:	2a45      	cmp	r2, #69	; 0x45
   1ed58:	4607      	mov	r7, r0
   1ed5a:	f000 8099 	beq.w	1ee90 <d_expression_1+0x31c>
   1ed5e:	2a70      	cmp	r2, #112	; 0x70
   1ed60:	f000 809e 	beq.w	1eea0 <d_expression_1+0x32c>
   1ed64:	2a69      	cmp	r2, #105	; 0x69
   1ed66:	d18d      	bne.n	1ec84 <d_expression_1+0x110>
   1ed68:	785b      	ldrb	r3, [r3, #1]
   1ed6a:	2b6c      	cmp	r3, #108	; 0x6c
   1ed6c:	d18a      	bne.n	1ec84 <d_expression_1+0x110>
   1ed6e:	4620      	mov	r0, r4
   1ed70:	f7ff ff00 	bl	1eb74 <d_expression_1>
   1ed74:	4603      	mov	r3, r0
   1ed76:	463a      	mov	r2, r7
   1ed78:	213b      	movs	r1, #59	; 0x3b
   1ed7a:	4620      	mov	r0, r4
   1ed7c:	f7ff f88e 	bl	1de9c <d_make_comp>
   1ed80:	4632      	mov	r2, r6
   1ed82:	4603      	mov	r3, r0
   1ed84:	213a      	movs	r1, #58	; 0x3a
   1ed86:	4620      	mov	r0, r4
   1ed88:	f7ff f888 	bl	1de9c <d_make_comp>
   1ed8c:	462a      	mov	r2, r5
   1ed8e:	4603      	mov	r3, r0
   1ed90:	2139      	movs	r1, #57	; 0x39
   1ed92:	4620      	mov	r0, r4
   1ed94:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   1ed98:	f7ff b880 	b.w	1de9c <d_make_comp>
   1ed9c:	2e00      	cmp	r6, #0
   1ed9e:	f43f af71 	beq.w	1ec84 <d_expression_1+0x110>
   1eda2:	686b      	ldr	r3, [r5, #4]
   1eda4:	681b      	ldr	r3, [r3, #0]
   1eda6:	785a      	ldrb	r2, [r3, #1]
   1eda8:	2a63      	cmp	r2, #99	; 0x63
   1edaa:	d044      	beq.n	1ee36 <d_expression_1+0x2c2>
   1edac:	7833      	ldrb	r3, [r6, #0]
   1edae:	2b66      	cmp	r3, #102	; 0x66
   1edb0:	d059      	beq.n	1ee66 <d_expression_1+0x2f2>
   1edb2:	4620      	mov	r0, r4
   1edb4:	f7ff fede 	bl	1eb74 <d_expression_1>
   1edb8:	4607      	mov	r7, r0
   1edba:	4967      	ldr	r1, [pc, #412]	; (1ef58 <d_expression_1+0x3e4>)
   1edbc:	4630      	mov	r0, r6
   1edbe:	f009 fb83 	bl	284c8 <strcmp>
   1edc2:	b390      	cbz	r0, 1ee2a <d_expression_1+0x2b6>
   1edc4:	4965      	ldr	r1, [pc, #404]	; (1ef5c <d_expression_1+0x3e8>)
   1edc6:	4630      	mov	r0, r6
   1edc8:	f009 fb7e 	bl	284c8 <strcmp>
   1edcc:	b128      	cbz	r0, 1edda <d_expression_1+0x266>
   1edce:	4630      	mov	r0, r6
   1edd0:	4963      	ldr	r1, [pc, #396]	; (1ef60 <d_expression_1+0x3ec>)
   1edd2:	f009 fb79 	bl	284c8 <strcmp>
   1edd6:	2800      	cmp	r0, #0
   1edd8:	d14a      	bne.n	1ee70 <d_expression_1+0x2fc>
   1edda:	4620      	mov	r0, r4
   1eddc:	f000 ff96 	bl	1fd0c <d_unqualified_name>
   1ede0:	68e3      	ldr	r3, [r4, #12]
   1ede2:	781b      	ldrb	r3, [r3, #0]
   1ede4:	2b49      	cmp	r3, #73	; 0x49
   1ede6:	4606      	mov	r6, r0
   1ede8:	d047      	beq.n	1ee7a <d_expression_1+0x306>
   1edea:	4633      	mov	r3, r6
   1edec:	463a      	mov	r2, r7
   1edee:	2138      	movs	r1, #56	; 0x38
   1edf0:	4620      	mov	r0, r4
   1edf2:	f7ff f853 	bl	1de9c <d_make_comp>
   1edf6:	462a      	mov	r2, r5
   1edf8:	4603      	mov	r3, r0
   1edfa:	2137      	movs	r1, #55	; 0x37
   1edfc:	4620      	mov	r0, r4
   1edfe:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   1ee02:	f7ff b84b 	b.w	1de9c <d_make_comp>
   1ee06:	4620      	mov	r0, r4
   1ee08:	f000 fad8 	bl	1f3bc <d_type>
   1ee0c:	4603      	mov	r3, r0
   1ee0e:	e6ef      	b.n	1ebf0 <d_expression_1+0x7c>
   1ee10:	4620      	mov	r0, r4
   1ee12:	f7ff feaf 	bl	1eb74 <d_expression_1>
   1ee16:	4606      	mov	r6, r0
   1ee18:	4620      	mov	r0, r4
   1ee1a:	f7ff feab 	bl	1eb74 <d_expression_1>
   1ee1e:	4607      	mov	r7, r0
   1ee20:	4620      	mov	r0, r4
   1ee22:	f7ff fea7 	bl	1eb74 <d_expression_1>
   1ee26:	4603      	mov	r3, r0
   1ee28:	e7a5      	b.n	1ed76 <d_expression_1+0x202>
   1ee2a:	2145      	movs	r1, #69	; 0x45
   1ee2c:	4620      	mov	r0, r4
   1ee2e:	f7ff fc43 	bl	1e6b8 <d_exprlist>
   1ee32:	4606      	mov	r6, r0
   1ee34:	e7d9      	b.n	1edea <d_expression_1+0x276>
   1ee36:	781b      	ldrb	r3, [r3, #0]
   1ee38:	f1a3 0263 	sub.w	r2, r3, #99	; 0x63
   1ee3c:	2a01      	cmp	r2, #1
   1ee3e:	d902      	bls.n	1ee46 <d_expression_1+0x2d2>
   1ee40:	3b72      	subs	r3, #114	; 0x72
   1ee42:	2b01      	cmp	r3, #1
   1ee44:	d8b2      	bhi.n	1edac <d_expression_1+0x238>
   1ee46:	4620      	mov	r0, r4
   1ee48:	f000 fab8 	bl	1f3bc <d_type>
   1ee4c:	4607      	mov	r7, r0
   1ee4e:	e7b4      	b.n	1edba <d_expression_1+0x246>
   1ee50:	4620      	mov	r0, r4
   1ee52:	f000 f8ed 	bl	1f030 <d_template_args>
   1ee56:	4632      	mov	r2, r6
   1ee58:	4603      	mov	r3, r0
   1ee5a:	2104      	movs	r1, #4
   1ee5c:	4620      	mov	r0, r4
   1ee5e:	f7ff f81d 	bl	1de9c <d_make_comp>
   1ee62:	4603      	mov	r3, r0
   1ee64:	e747      	b.n	1ecf6 <d_expression_1+0x182>
   1ee66:	4620      	mov	r0, r4
   1ee68:	f000 fe90 	bl	1fb8c <d_operator_name>
   1ee6c:	4607      	mov	r7, r0
   1ee6e:	e7a4      	b.n	1edba <d_expression_1+0x246>
   1ee70:	4620      	mov	r0, r4
   1ee72:	f7ff fe7f 	bl	1eb74 <d_expression_1>
   1ee76:	4606      	mov	r6, r0
   1ee78:	e7b7      	b.n	1edea <d_expression_1+0x276>
   1ee7a:	4620      	mov	r0, r4
   1ee7c:	f000 f8d8 	bl	1f030 <d_template_args>
   1ee80:	4632      	mov	r2, r6
   1ee82:	4603      	mov	r3, r0
   1ee84:	2104      	movs	r1, #4
   1ee86:	4620      	mov	r0, r4
   1ee88:	f7ff f808 	bl	1de9c <d_make_comp>
   1ee8c:	4606      	mov	r6, r0
   1ee8e:	e7ac      	b.n	1edea <d_expression_1+0x276>
   1ee90:	3301      	adds	r3, #1
   1ee92:	60e3      	str	r3, [r4, #12]
   1ee94:	2300      	movs	r3, #0
   1ee96:	e76e      	b.n	1ed76 <d_expression_1+0x202>
   1ee98:	4620      	mov	r0, r4
   1ee9a:	f000 fe77 	bl	1fb8c <d_operator_name>
   1ee9e:	e7ba      	b.n	1ee16 <d_expression_1+0x2a2>
   1eea0:	785a      	ldrb	r2, [r3, #1]
   1eea2:	2a69      	cmp	r2, #105	; 0x69
   1eea4:	f47f aeee 	bne.w	1ec84 <d_expression_1+0x110>
   1eea8:	3302      	adds	r3, #2
   1eeaa:	60e3      	str	r3, [r4, #12]
   1eeac:	2145      	movs	r1, #69	; 0x45
   1eeae:	4620      	mov	r0, r4
   1eeb0:	f7ff fc02 	bl	1e6b8 <d_exprlist>
   1eeb4:	4603      	mov	r3, r0
   1eeb6:	e75e      	b.n	1ed76 <d_expression_1+0x202>
   1eeb8:	2e00      	cmp	r6, #0
   1eeba:	d046      	beq.n	1ef4a <d_expression_1+0x3d6>
   1eebc:	7833      	ldrb	r3, [r6, #0]
   1eebe:	2b70      	cmp	r3, #112	; 0x70
   1eec0:	d015      	beq.n	1eeee <d_expression_1+0x37a>
   1eec2:	2b6d      	cmp	r3, #109	; 0x6d
   1eec4:	d013      	beq.n	1eeee <d_expression_1+0x37a>
   1eec6:	2700      	movs	r7, #0
   1eec8:	4630      	mov	r0, r6
   1eeca:	4926      	ldr	r1, [pc, #152]	; (1ef64 <d_expression_1+0x3f0>)
   1eecc:	f009 fafc 	bl	284c8 <strcmp>
   1eed0:	b1b8      	cbz	r0, 1ef02 <d_expression_1+0x38e>
   1eed2:	4620      	mov	r0, r4
   1eed4:	f7ff fe4e 	bl	1eb74 <d_expression_1>
   1eed8:	4603      	mov	r3, r0
   1eeda:	2f00      	cmp	r7, #0
   1eedc:	f43f ae88 	beq.w	1ebf0 <d_expression_1+0x7c>
   1eee0:	461a      	mov	r2, r3
   1eee2:	2138      	movs	r1, #56	; 0x38
   1eee4:	4620      	mov	r0, r4
   1eee6:	f7fe ffd9 	bl	1de9c <d_make_comp>
   1eeea:	4603      	mov	r3, r0
   1eeec:	e680      	b.n	1ebf0 <d_expression_1+0x7c>
   1eeee:	7872      	ldrb	r2, [r6, #1]
   1eef0:	429a      	cmp	r2, r3
   1eef2:	d1e8      	bne.n	1eec6 <d_expression_1+0x352>
   1eef4:	68e3      	ldr	r3, [r4, #12]
   1eef6:	781a      	ldrb	r2, [r3, #0]
   1eef8:	2a5f      	cmp	r2, #95	; 0x5f
   1eefa:	d1e5      	bne.n	1eec8 <d_expression_1+0x354>
   1eefc:	3301      	adds	r3, #1
   1eefe:	60e3      	str	r3, [r4, #12]
   1ef00:	e7e1      	b.n	1eec6 <d_expression_1+0x352>
   1ef02:	4620      	mov	r0, r4
   1ef04:	f000 f830 	bl	1ef68 <d_template_args_1>
   1ef08:	4603      	mov	r3, r0
   1ef0a:	e7e6      	b.n	1eeda <d_expression_1+0x366>
   1ef0c:	2b6f      	cmp	r3, #111	; 0x6f
   1ef0e:	d015      	beq.n	1ef3c <d_expression_1+0x3c8>
   1ef10:	2b69      	cmp	r3, #105	; 0x69
   1ef12:	f47f aeaa 	bne.w	1ec6a <d_expression_1+0xf6>
   1ef16:	784b      	ldrb	r3, [r1, #1]
   1ef18:	2b6c      	cmp	r3, #108	; 0x6c
   1ef1a:	f47f ae50 	bne.w	1ebbe <d_expression_1+0x4a>
   1ef1e:	2500      	movs	r5, #0
   1ef20:	3102      	adds	r1, #2
   1ef22:	60e1      	str	r1, [r4, #12]
   1ef24:	4620      	mov	r0, r4
   1ef26:	2145      	movs	r1, #69	; 0x45
   1ef28:	f7ff fbc6 	bl	1e6b8 <d_exprlist>
   1ef2c:	462a      	mov	r2, r5
   1ef2e:	4603      	mov	r3, r0
   1ef30:	2130      	movs	r1, #48	; 0x30
   1ef32:	4620      	mov	r0, r4
   1ef34:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   1ef38:	f7fe bfb0 	b.w	1de9c <d_make_comp>
   1ef3c:	784b      	ldrb	r3, [r1, #1]
   1ef3e:	2b6e      	cmp	r3, #110	; 0x6e
   1ef40:	f47f ae3d 	bne.w	1ebbe <d_expression_1+0x4a>
   1ef44:	3102      	adds	r1, #2
   1ef46:	60c1      	str	r1, [r0, #12]
   1ef48:	e628      	b.n	1eb9c <d_expression_1+0x28>
   1ef4a:	2700      	movs	r7, #0
   1ef4c:	e7c1      	b.n	1eed2 <d_expression_1+0x35e>
   1ef4e:	bf00      	nop
   1ef50:	0002ea88 	.word	0x0002ea88
   1ef54:	0002e594 	.word	0x0002e594
   1ef58:	0002e588 	.word	0x0002e588
   1ef5c:	0002e58c 	.word	0x0002e58c
   1ef60:	0002e590 	.word	0x0002e590
   1ef64:	0002e584 	.word	0x0002e584

0001ef68 <d_template_args_1>:
   1ef68:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   1ef6c:	68c2      	ldr	r2, [r0, #12]
   1ef6e:	f8d0 802c 	ldr.w	r8, [r0, #44]	; 0x2c
   1ef72:	7813      	ldrb	r3, [r2, #0]
   1ef74:	2b45      	cmp	r3, #69	; 0x45
   1ef76:	b083      	sub	sp, #12
   1ef78:	4604      	mov	r4, r0
   1ef7a:	d04e      	beq.n	1f01a <d_template_args_1+0xb2>
   1ef7c:	ae02      	add	r6, sp, #8
   1ef7e:	2100      	movs	r1, #0
   1ef80:	f846 1d04 	str.w	r1, [r6, #-4]!
   1ef84:	2701      	movs	r7, #1
   1ef86:	3b49      	subs	r3, #73	; 0x49
   1ef88:	2b0f      	cmp	r3, #15
   1ef8a:	d83e      	bhi.n	1f00a <d_template_args_1+0xa2>
   1ef8c:	e8df f003 	tbb	[pc, r3]
   1ef90:	1b3d3838 	.word	0x1b3d3838
   1ef94:	3d3d3d3d 	.word	0x3d3d3d3d
   1ef98:	3d3d3d3d 	.word	0x3d3d3d3d
   1ef9c:	083d3d3d 	.word	0x083d3d3d
   1efa0:	3201      	adds	r2, #1
   1efa2:	f8d4 9034 	ldr.w	r9, [r4, #52]	; 0x34
   1efa6:	60e2      	str	r2, [r4, #12]
   1efa8:	6367      	str	r7, [r4, #52]	; 0x34
   1efaa:	4620      	mov	r0, r4
   1efac:	f7ff fde2 	bl	1eb74 <d_expression_1>
   1efb0:	68e3      	ldr	r3, [r4, #12]
   1efb2:	f8c4 9034 	str.w	r9, [r4, #52]	; 0x34
   1efb6:	781a      	ldrb	r2, [r3, #0]
   1efb8:	2a45      	cmp	r2, #69	; 0x45
   1efba:	4605      	mov	r5, r0
   1efbc:	d02a      	beq.n	1f014 <d_template_args_1+0xac>
   1efbe:	2000      	movs	r0, #0
   1efc0:	b003      	add	sp, #12
   1efc2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   1efc6:	4620      	mov	r0, r4
   1efc8:	f001 faee 	bl	205a8 <d_expr_primary>
   1efcc:	4605      	mov	r5, r0
   1efce:	2300      	movs	r3, #0
   1efd0:	212f      	movs	r1, #47	; 0x2f
   1efd2:	462a      	mov	r2, r5
   1efd4:	4620      	mov	r0, r4
   1efd6:	2d00      	cmp	r5, #0
   1efd8:	d0f1      	beq.n	1efbe <d_template_args_1+0x56>
   1efda:	f7fe ff5f 	bl	1de9c <d_make_comp>
   1efde:	6030      	str	r0, [r6, #0]
   1efe0:	f100 0608 	add.w	r6, r0, #8
   1efe4:	2800      	cmp	r0, #0
   1efe6:	d0ea      	beq.n	1efbe <d_template_args_1+0x56>
   1efe8:	68e2      	ldr	r2, [r4, #12]
   1efea:	7813      	ldrb	r3, [r2, #0]
   1efec:	2b45      	cmp	r3, #69	; 0x45
   1efee:	d1ca      	bne.n	1ef86 <d_template_args_1+0x1e>
   1eff0:	9801      	ldr	r0, [sp, #4]
   1eff2:	f8c4 802c 	str.w	r8, [r4, #44]	; 0x2c
   1eff6:	3201      	adds	r2, #1
   1eff8:	60e2      	str	r2, [r4, #12]
   1effa:	b003      	add	sp, #12
   1effc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   1f000:	4620      	mov	r0, r4
   1f002:	f000 f815 	bl	1f030 <d_template_args>
   1f006:	4605      	mov	r5, r0
   1f008:	e7e1      	b.n	1efce <d_template_args_1+0x66>
   1f00a:	4620      	mov	r0, r4
   1f00c:	f000 f9d6 	bl	1f3bc <d_type>
   1f010:	4605      	mov	r5, r0
   1f012:	e7dc      	b.n	1efce <d_template_args_1+0x66>
   1f014:	3301      	adds	r3, #1
   1f016:	60e3      	str	r3, [r4, #12]
   1f018:	e7d9      	b.n	1efce <d_template_args_1+0x66>
   1f01a:	3201      	adds	r2, #1
   1f01c:	2300      	movs	r3, #0
   1f01e:	60c2      	str	r2, [r0, #12]
   1f020:	212f      	movs	r1, #47	; 0x2f
   1f022:	461a      	mov	r2, r3
   1f024:	b003      	add	sp, #12
   1f026:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
   1f02a:	f7fe bf37 	b.w	1de9c <d_make_comp>
   1f02e:	bf00      	nop

0001f030 <d_template_args>:
   1f030:	68c2      	ldr	r2, [r0, #12]
   1f032:	7813      	ldrb	r3, [r2, #0]
   1f034:	3b49      	subs	r3, #73	; 0x49
   1f036:	2b01      	cmp	r3, #1
   1f038:	d802      	bhi.n	1f040 <d_template_args+0x10>
   1f03a:	3201      	adds	r2, #1
   1f03c:	60c2      	str	r2, [r0, #12]
   1f03e:	e793      	b.n	1ef68 <d_template_args_1>
   1f040:	2000      	movs	r0, #0
   1f042:	4770      	bx	lr

0001f044 <d_name>:
   1f044:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   1f048:	68c2      	ldr	r2, [r0, #12]
   1f04a:	7813      	ldrb	r3, [r2, #0]
   1f04c:	3b4e      	subs	r3, #78	; 0x4e
   1f04e:	b085      	sub	sp, #20
   1f050:	4605      	mov	r5, r0
   1f052:	2b0c      	cmp	r3, #12
   1f054:	d870      	bhi.n	1f138 <d_name+0xf4>
   1f056:	e8df f003 	tbb	[pc, r3]
   1f05a:	6f1e      	.short	0x6f1e
   1f05c:	5b6f6f6f 	.word	0x5b6f6f6f
   1f060:	6f6f176f 	.word	0x6f6f176f
   1f064:	6f6f      	.short	0x6f6f
   1f066:	07          	.byte	0x07
   1f067:	00          	.byte	0x00
   1f068:	3201      	adds	r2, #1
   1f06a:	2100      	movs	r1, #0
   1f06c:	60c2      	str	r2, [r0, #12]
   1f06e:	f000 ffbd 	bl	1ffec <d_encoding>
   1f072:	68eb      	ldr	r3, [r5, #12]
   1f074:	7819      	ldrb	r1, [r3, #0]
   1f076:	2945      	cmp	r1, #69	; 0x45
   1f078:	4606      	mov	r6, r0
   1f07a:	f000 8099 	beq.w	1f1b0 <d_name+0x16c>
   1f07e:	2200      	movs	r2, #0
   1f080:	4610      	mov	r0, r2
   1f082:	b005      	add	sp, #20
   1f084:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   1f088:	f000 fe40 	bl	1fd0c <d_unqualified_name>
   1f08c:	4602      	mov	r2, r0
   1f08e:	4610      	mov	r0, r2
   1f090:	b005      	add	sp, #20
   1f092:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   1f096:	3201      	adds	r2, #1
   1f098:	60c2      	str	r2, [r0, #12]
   1f09a:	a903      	add	r1, sp, #12
   1f09c:	2201      	movs	r2, #1
   1f09e:	f7fe ff49 	bl	1df34 <d_cv_qualifiers>
   1f0a2:	4681      	mov	r9, r0
   1f0a4:	2800      	cmp	r0, #0
   1f0a6:	d0ea      	beq.n	1f07e <d_name+0x3a>
   1f0a8:	2100      	movs	r1, #0
   1f0aa:	4628      	mov	r0, r5
   1f0ac:	f7fe ffa8 	bl	1e000 <d_ref_qualifier>
   1f0b0:	68ea      	ldr	r2, [r5, #12]
   1f0b2:	4eb4      	ldr	r6, [pc, #720]	; (1f384 <d_name+0x340>)
   1f0b4:	7814      	ldrb	r4, [r2, #0]
   1f0b6:	4680      	mov	r8, r0
   1f0b8:	2700      	movs	r7, #0
   1f0ba:	2c00      	cmp	r4, #0
   1f0bc:	f000 80e8 	beq.w	1f290 <d_name+0x24c>
   1f0c0:	2c44      	cmp	r4, #68	; 0x44
   1f0c2:	f000 80d1 	beq.w	1f268 <d_name+0x224>
   1f0c6:	f1a4 0330 	sub.w	r3, r4, #48	; 0x30
   1f0ca:	b2db      	uxtb	r3, r3
   1f0cc:	2b1c      	cmp	r3, #28
   1f0ce:	f240 80a8 	bls.w	1f222 <d_name+0x1de>
   1f0d2:	f1a4 0361 	sub.w	r3, r4, #97	; 0x61
   1f0d6:	2b19      	cmp	r3, #25
   1f0d8:	f240 80a8 	bls.w	1f22c <d_name+0x1e8>
   1f0dc:	2c55      	cmp	r4, #85	; 0x55
   1f0de:	f000 80de 	beq.w	1f29e <d_name+0x25a>
   1f0e2:	2c53      	cmp	r4, #83	; 0x53
   1f0e4:	f000 80f1 	beq.w	1f2ca <d_name+0x286>
   1f0e8:	2c49      	cmp	r4, #73	; 0x49
   1f0ea:	f000 80da 	beq.w	1f2a2 <d_name+0x25e>
   1f0ee:	2c54      	cmp	r4, #84	; 0x54
   1f0f0:	f000 811f 	beq.w	1f332 <d_name+0x2ee>
   1f0f4:	2c45      	cmp	r4, #69	; 0x45
   1f0f6:	f000 814b 	beq.w	1f390 <d_name+0x34c>
   1f0fa:	2c4d      	cmp	r4, #77	; 0x4d
   1f0fc:	f040 80c8 	bne.w	1f290 <d_name+0x24c>
   1f100:	2f00      	cmp	r7, #0
   1f102:	f000 80c5 	beq.w	1f290 <d_name+0x24c>
   1f106:	1c53      	adds	r3, r2, #1
   1f108:	60eb      	str	r3, [r5, #12]
   1f10a:	7854      	ldrb	r4, [r2, #1]
   1f10c:	461a      	mov	r2, r3
   1f10e:	e7d4      	b.n	1f0ba <d_name+0x76>
   1f110:	7853      	ldrb	r3, [r2, #1]
   1f112:	2b74      	cmp	r3, #116	; 0x74
   1f114:	d031      	beq.n	1f17a <d_name+0x136>
   1f116:	2100      	movs	r1, #0
   1f118:	f7ff f90a 	bl	1e330 <d_substitution>
   1f11c:	68eb      	ldr	r3, [r5, #12]
   1f11e:	7819      	ldrb	r1, [r3, #0]
   1f120:	2949      	cmp	r1, #73	; 0x49
   1f122:	4602      	mov	r2, r0
   1f124:	d1b3      	bne.n	1f08e <d_name+0x4a>
   1f126:	3301      	adds	r3, #1
   1f128:	60eb      	str	r3, [r5, #12]
   1f12a:	4628      	mov	r0, r5
   1f12c:	9201      	str	r2, [sp, #4]
   1f12e:	f7ff ff1b 	bl	1ef68 <d_template_args_1>
   1f132:	9a01      	ldr	r2, [sp, #4]
   1f134:	4603      	mov	r3, r0
   1f136:	e017      	b.n	1f168 <d_name+0x124>
   1f138:	f000 fde8 	bl	1fd0c <d_unqualified_name>
   1f13c:	68eb      	ldr	r3, [r5, #12]
   1f13e:	7819      	ldrb	r1, [r3, #0]
   1f140:	2949      	cmp	r1, #73	; 0x49
   1f142:	4602      	mov	r2, r0
   1f144:	d1a3      	bne.n	1f08e <d_name+0x4a>
   1f146:	2a00      	cmp	r2, #0
   1f148:	d099      	beq.n	1f07e <d_name+0x3a>
   1f14a:	6a29      	ldr	r1, [r5, #32]
   1f14c:	6a68      	ldr	r0, [r5, #36]	; 0x24
   1f14e:	4281      	cmp	r1, r0
   1f150:	da95      	bge.n	1f07e <d_name+0x3a>
   1f152:	69ec      	ldr	r4, [r5, #28]
   1f154:	1c48      	adds	r0, r1, #1
   1f156:	f844 2021 	str.w	r2, [r4, r1, lsl #2]
   1f15a:	6228      	str	r0, [r5, #32]
   1f15c:	7819      	ldrb	r1, [r3, #0]
   1f15e:	3949      	subs	r1, #73	; 0x49
   1f160:	2901      	cmp	r1, #1
   1f162:	bf88      	it	hi
   1f164:	2300      	movhi	r3, #0
   1f166:	d9de      	bls.n	1f126 <d_name+0xe2>
   1f168:	4628      	mov	r0, r5
   1f16a:	2104      	movs	r1, #4
   1f16c:	f7fe fe96 	bl	1de9c <d_make_comp>
   1f170:	4602      	mov	r2, r0
   1f172:	4610      	mov	r0, r2
   1f174:	b005      	add	sp, #20
   1f176:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   1f17a:	6943      	ldr	r3, [r0, #20]
   1f17c:	6981      	ldr	r1, [r0, #24]
   1f17e:	3202      	adds	r2, #2
   1f180:	428b      	cmp	r3, r1
   1f182:	60c2      	str	r2, [r0, #12]
   1f184:	f2c0 80ab 	blt.w	1f2de <d_name+0x29a>
   1f188:	2400      	movs	r4, #0
   1f18a:	4628      	mov	r0, r5
   1f18c:	f000 fdbe 	bl	1fd0c <d_unqualified_name>
   1f190:	4622      	mov	r2, r4
   1f192:	4603      	mov	r3, r0
   1f194:	2101      	movs	r1, #1
   1f196:	4628      	mov	r0, r5
   1f198:	f7fe fe80 	bl	1de9c <d_make_comp>
   1f19c:	6b29      	ldr	r1, [r5, #48]	; 0x30
   1f19e:	68eb      	ldr	r3, [r5, #12]
   1f1a0:	3103      	adds	r1, #3
   1f1a2:	6329      	str	r1, [r5, #48]	; 0x30
   1f1a4:	7819      	ldrb	r1, [r3, #0]
   1f1a6:	2949      	cmp	r1, #73	; 0x49
   1f1a8:	4602      	mov	r2, r0
   1f1aa:	f47f af70 	bne.w	1f08e <d_name+0x4a>
   1f1ae:	e7ca      	b.n	1f146 <d_name+0x102>
   1f1b0:	1c5a      	adds	r2, r3, #1
   1f1b2:	60ea      	str	r2, [r5, #12]
   1f1b4:	7859      	ldrb	r1, [r3, #1]
   1f1b6:	2973      	cmp	r1, #115	; 0x73
   1f1b8:	f000 80a3 	beq.w	1f302 <d_name+0x2be>
   1f1bc:	2964      	cmp	r1, #100	; 0x64
   1f1be:	f000 80bc 	beq.w	1f33a <d_name+0x2f6>
   1f1c2:	4628      	mov	r0, r5
   1f1c4:	f7ff ff3e 	bl	1f044 <d_name>
   1f1c8:	4604      	mov	r4, r0
   1f1ca:	2800      	cmp	r0, #0
   1f1cc:	d072      	beq.n	1f2b4 <d_name+0x270>
   1f1ce:	7803      	ldrb	r3, [r0, #0]
   1f1d0:	2b45      	cmp	r3, #69	; 0x45
   1f1d2:	f000 8094 	beq.w	1f2fe <d_name+0x2ba>
   1f1d6:	2b47      	cmp	r3, #71	; 0x47
   1f1d8:	f000 8091 	beq.w	1f2fe <d_name+0x2ba>
   1f1dc:	68eb      	ldr	r3, [r5, #12]
   1f1de:	781a      	ldrb	r2, [r3, #0]
   1f1e0:	2a5f      	cmp	r2, #95	; 0x5f
   1f1e2:	f040 808c 	bne.w	1f2fe <d_name+0x2ba>
   1f1e6:	f04f 37ff 	mov.w	r7, #4294967295
   1f1ea:	4628      	mov	r0, r5
   1f1ec:	3301      	adds	r3, #1
   1f1ee:	f840 3f0c 	str.w	r3, [r0, #12]!
   1f1f2:	f7fe ffa5 	bl	1e140 <d_number.isra.0>
   1f1f6:	2800      	cmp	r0, #0
   1f1f8:	f6ff af41 	blt.w	1f07e <d_name+0x3a>
   1f1fc:	1c7b      	adds	r3, r7, #1
   1f1fe:	d07e      	beq.n	1f2fe <d_name+0x2ba>
   1f200:	696b      	ldr	r3, [r5, #20]
   1f202:	69aa      	ldr	r2, [r5, #24]
   1f204:	4293      	cmp	r3, r2
   1f206:	da55      	bge.n	1f2b4 <d_name+0x270>
   1f208:	eb03 0243 	add.w	r2, r3, r3, lsl #1
   1f20c:	6929      	ldr	r1, [r5, #16]
   1f20e:	3301      	adds	r3, #1
   1f210:	0092      	lsls	r2, r2, #2
   1f212:	616b      	str	r3, [r5, #20]
   1f214:	188b      	adds	r3, r1, r2
   1f216:	d04e      	beq.n	1f2b6 <d_name+0x272>
   1f218:	2046      	movs	r0, #70	; 0x46
   1f21a:	5488      	strb	r0, [r1, r2]
   1f21c:	609f      	str	r7, [r3, #8]
   1f21e:	605c      	str	r4, [r3, #4]
   1f220:	e049      	b.n	1f2b6 <d_name+0x272>
   1f222:	fa26 f303 	lsr.w	r3, r6, r3
   1f226:	07d9      	lsls	r1, r3, #31
   1f228:	f57f af53 	bpl.w	1f0d2 <d_name+0x8e>
   1f22c:	4628      	mov	r0, r5
   1f22e:	f000 fd6d 	bl	1fd0c <d_unqualified_name>
   1f232:	b347      	cbz	r7, 1f286 <d_name+0x242>
   1f234:	2101      	movs	r1, #1
   1f236:	4603      	mov	r3, r0
   1f238:	463a      	mov	r2, r7
   1f23a:	4628      	mov	r0, r5
   1f23c:	f7fe fe2e 	bl	1de9c <d_make_comp>
   1f240:	4607      	mov	r7, r0
   1f242:	2c53      	cmp	r4, #83	; 0x53
   1f244:	d01c      	beq.n	1f280 <d_name+0x23c>
   1f246:	68ea      	ldr	r2, [r5, #12]
   1f248:	7814      	ldrb	r4, [r2, #0]
   1f24a:	2c45      	cmp	r4, #69	; 0x45
   1f24c:	f43f af3b 	beq.w	1f0c6 <d_name+0x82>
   1f250:	b1f7      	cbz	r7, 1f290 <d_name+0x24c>
   1f252:	6a2b      	ldr	r3, [r5, #32]
   1f254:	6a69      	ldr	r1, [r5, #36]	; 0x24
   1f256:	428b      	cmp	r3, r1
   1f258:	da1a      	bge.n	1f290 <d_name+0x24c>
   1f25a:	69e9      	ldr	r1, [r5, #28]
   1f25c:	1c58      	adds	r0, r3, #1
   1f25e:	f841 7023 	str.w	r7, [r1, r3, lsl #2]
   1f262:	6228      	str	r0, [r5, #32]
   1f264:	7814      	ldrb	r4, [r2, #0]
   1f266:	e728      	b.n	1f0ba <d_name+0x76>
   1f268:	7853      	ldrb	r3, [r2, #1]
   1f26a:	f003 03df 	and.w	r3, r3, #223	; 0xdf
   1f26e:	2b54      	cmp	r3, #84	; 0x54
   1f270:	4628      	mov	r0, r5
   1f272:	d00a      	beq.n	1f28a <d_name+0x246>
   1f274:	f000 fd4a 	bl	1fd0c <d_unqualified_name>
   1f278:	2f00      	cmp	r7, #0
   1f27a:	d1db      	bne.n	1f234 <d_name+0x1f0>
   1f27c:	4607      	mov	r7, r0
   1f27e:	e7e2      	b.n	1f246 <d_name+0x202>
   1f280:	68ea      	ldr	r2, [r5, #12]
   1f282:	7814      	ldrb	r4, [r2, #0]
   1f284:	e719      	b.n	1f0ba <d_name+0x76>
   1f286:	4607      	mov	r7, r0
   1f288:	e7db      	b.n	1f242 <d_name+0x1fe>
   1f28a:	f000 f897 	bl	1f3bc <d_type>
   1f28e:	e7f3      	b.n	1f278 <d_name+0x234>
   1f290:	2200      	movs	r2, #0
   1f292:	4610      	mov	r0, r2
   1f294:	f8c9 2000 	str.w	r2, [r9]
   1f298:	b005      	add	sp, #20
   1f29a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   1f29e:	4628      	mov	r0, r5
   1f2a0:	e7e8      	b.n	1f274 <d_name+0x230>
   1f2a2:	2f00      	cmp	r7, #0
   1f2a4:	d0f4      	beq.n	1f290 <d_name+0x24c>
   1f2a6:	3201      	adds	r2, #1
   1f2a8:	60ea      	str	r2, [r5, #12]
   1f2aa:	4628      	mov	r0, r5
   1f2ac:	f7ff fe5c 	bl	1ef68 <d_template_args_1>
   1f2b0:	2104      	movs	r1, #4
   1f2b2:	e7c0      	b.n	1f236 <d_name+0x1f2>
   1f2b4:	2300      	movs	r3, #0
   1f2b6:	4632      	mov	r2, r6
   1f2b8:	4628      	mov	r0, r5
   1f2ba:	2102      	movs	r1, #2
   1f2bc:	f7fe fdee 	bl	1de9c <d_make_comp>
   1f2c0:	4602      	mov	r2, r0
   1f2c2:	4610      	mov	r0, r2
   1f2c4:	b005      	add	sp, #20
   1f2c6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   1f2ca:	2101      	movs	r1, #1
   1f2cc:	4628      	mov	r0, r5
   1f2ce:	f7ff f82f 	bl	1e330 <d_substitution>
   1f2d2:	2f00      	cmp	r7, #0
   1f2d4:	d1ae      	bne.n	1f234 <d_name+0x1f0>
   1f2d6:	68ea      	ldr	r2, [r5, #12]
   1f2d8:	4607      	mov	r7, r0
   1f2da:	7814      	ldrb	r4, [r2, #0]
   1f2dc:	e6ed      	b.n	1f0ba <d_name+0x76>
   1f2de:	eb03 0243 	add.w	r2, r3, r3, lsl #1
   1f2e2:	6901      	ldr	r1, [r0, #16]
   1f2e4:	0092      	lsls	r2, r2, #2
   1f2e6:	3301      	adds	r3, #1
   1f2e8:	188c      	adds	r4, r1, r2
   1f2ea:	6143      	str	r3, [r0, #20]
   1f2ec:	f43f af4d 	beq.w	1f18a <d_name+0x146>
   1f2f0:	2300      	movs	r3, #0
   1f2f2:	548b      	strb	r3, [r1, r2]
   1f2f4:	4824      	ldr	r0, [pc, #144]	; (1f388 <d_name+0x344>)
   1f2f6:	6060      	str	r0, [r4, #4]
   1f2f8:	2303      	movs	r3, #3
   1f2fa:	60a3      	str	r3, [r4, #8]
   1f2fc:	e745      	b.n	1f18a <d_name+0x146>
   1f2fe:	4623      	mov	r3, r4
   1f300:	e7d9      	b.n	1f2b6 <d_name+0x272>
   1f302:	1c9a      	adds	r2, r3, #2
   1f304:	60ea      	str	r2, [r5, #12]
   1f306:	789a      	ldrb	r2, [r3, #2]
   1f308:	2a5f      	cmp	r2, #95	; 0x5f
   1f30a:	d032      	beq.n	1f372 <d_name+0x32e>
   1f30c:	696b      	ldr	r3, [r5, #20]
   1f30e:	69aa      	ldr	r2, [r5, #24]
   1f310:	4293      	cmp	r3, r2
   1f312:	dacf      	bge.n	1f2b4 <d_name+0x270>
   1f314:	eb03 0243 	add.w	r2, r3, r3, lsl #1
   1f318:	6929      	ldr	r1, [r5, #16]
   1f31a:	3301      	adds	r3, #1
   1f31c:	0092      	lsls	r2, r2, #2
   1f31e:	616b      	str	r3, [r5, #20]
   1f320:	188b      	adds	r3, r1, r2
   1f322:	d0c8      	beq.n	1f2b6 <d_name+0x272>
   1f324:	2400      	movs	r4, #0
   1f326:	548c      	strb	r4, [r1, r2]
   1f328:	4818      	ldr	r0, [pc, #96]	; (1f38c <d_name+0x348>)
   1f32a:	6058      	str	r0, [r3, #4]
   1f32c:	220e      	movs	r2, #14
   1f32e:	609a      	str	r2, [r3, #8]
   1f330:	e7c1      	b.n	1f2b6 <d_name+0x272>
   1f332:	4628      	mov	r0, r5
   1f334:	f7fe ff62 	bl	1e1fc <d_template_param>
   1f338:	e79e      	b.n	1f278 <d_name+0x234>
   1f33a:	3302      	adds	r3, #2
   1f33c:	60eb      	str	r3, [r5, #12]
   1f33e:	4628      	mov	r0, r5
   1f340:	f7fe ff40 	bl	1e1c4 <d_compact_number>
   1f344:	1e07      	subs	r7, r0, #0
   1f346:	f6ff ae9a 	blt.w	1f07e <d_name+0x3a>
   1f34a:	4628      	mov	r0, r5
   1f34c:	f7ff fe7a 	bl	1f044 <d_name>
   1f350:	4604      	mov	r4, r0
   1f352:	2800      	cmp	r0, #0
   1f354:	f43f af54 	beq.w	1f200 <d_name+0x1bc>
   1f358:	7803      	ldrb	r3, [r0, #0]
   1f35a:	2b45      	cmp	r3, #69	; 0x45
   1f35c:	f43f af50 	beq.w	1f200 <d_name+0x1bc>
   1f360:	2b47      	cmp	r3, #71	; 0x47
   1f362:	f43f af4d 	beq.w	1f200 <d_name+0x1bc>
   1f366:	68eb      	ldr	r3, [r5, #12]
   1f368:	781a      	ldrb	r2, [r3, #0]
   1f36a:	2a5f      	cmp	r2, #95	; 0x5f
   1f36c:	f47f af48 	bne.w	1f200 <d_name+0x1bc>
   1f370:	e73b      	b.n	1f1ea <d_name+0x1a6>
   1f372:	4628      	mov	r0, r5
   1f374:	3303      	adds	r3, #3
   1f376:	f840 3f0c 	str.w	r3, [r0, #12]!
   1f37a:	f7fe fee1 	bl	1e140 <d_number.isra.0>
   1f37e:	2800      	cmp	r0, #0
   1f380:	dac4      	bge.n	1f30c <d_name+0x2c8>
   1f382:	e67c      	b.n	1f07e <d_name+0x3a>
   1f384:	100803ff 	.word	0x100803ff
   1f388:	0002e5a8 	.word	0x0002e5a8
   1f38c:	0002e598 	.word	0x0002e598
   1f390:	f8c9 7000 	str.w	r7, [r9]
   1f394:	2f00      	cmp	r7, #0
   1f396:	f43f ae72 	beq.w	1f07e <d_name+0x3a>
   1f39a:	f1b8 0f00 	cmp.w	r8, #0
   1f39e:	d004      	beq.n	1f3aa <d_name+0x366>
   1f3a0:	9b03      	ldr	r3, [sp, #12]
   1f3a2:	f8c8 3004 	str.w	r3, [r8, #4]
   1f3a6:	f8cd 800c 	str.w	r8, [sp, #12]
   1f3aa:	7813      	ldrb	r3, [r2, #0]
   1f3ac:	2b45      	cmp	r3, #69	; 0x45
   1f3ae:	f47f ae66 	bne.w	1f07e <d_name+0x3a>
   1f3b2:	3201      	adds	r2, #1
   1f3b4:	60ea      	str	r2, [r5, #12]
   1f3b6:	9a03      	ldr	r2, [sp, #12]
   1f3b8:	e669      	b.n	1f08e <d_name+0x4a>
   1f3ba:	bf00      	nop

0001f3bc <d_type>:
   1f3bc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   1f3c0:	68c2      	ldr	r2, [r0, #12]
   1f3c2:	7813      	ldrb	r3, [r2, #0]
   1f3c4:	2b72      	cmp	r3, #114	; 0x72
   1f3c6:	b083      	sub	sp, #12
   1f3c8:	4604      	mov	r4, r0
   1f3ca:	d058      	beq.n	1f47e <d_type+0xc2>
   1f3cc:	2b56      	cmp	r3, #86	; 0x56
   1f3ce:	d056      	beq.n	1f47e <d_type+0xc2>
   1f3d0:	2b4b      	cmp	r3, #75	; 0x4b
   1f3d2:	d054      	beq.n	1f47e <d_type+0xc2>
   1f3d4:	2b44      	cmp	r3, #68	; 0x44
   1f3d6:	f000 809f 	beq.w	1f518 <d_type+0x15c>
   1f3da:	f1a3 0130 	sub.w	r1, r3, #48	; 0x30
   1f3de:	294a      	cmp	r1, #74	; 0x4a
   1f3e0:	f200 808a 	bhi.w	1f4f8 <d_type+0x13c>
   1f3e4:	e8df f011 	tbh	[pc, r1, lsl #1]
   1f3e8:	012a012a 	.word	0x012a012a
   1f3ec:	012a012a 	.word	0x012a012a
   1f3f0:	012a012a 	.word	0x012a012a
   1f3f4:	012a012a 	.word	0x012a012a
   1f3f8:	012a012a 	.word	0x012a012a
   1f3fc:	00880088 	.word	0x00880088
   1f400:	00880088 	.word	0x00880088
   1f404:	00880088 	.word	0x00880088
   1f408:	020b0088 	.word	0x020b0088
   1f40c:	01520088 	.word	0x01520088
   1f410:	00880088 	.word	0x00880088
   1f414:	0160014c 	.word	0x0160014c
   1f418:	00880088 	.word	0x00880088
   1f41c:	00880088 	.word	0x00880088
   1f420:	016e0088 	.word	0x016e0088
   1f424:	0186012a 	.word	0x0186012a
   1f428:	008801c3 	.word	0x008801c3
   1f42c:	01a20194 	.word	0x01a20194
   1f430:	01f301d1 	.word	0x01f301d1
   1f434:	00880088 	.word	0x00880088
   1f438:	00880088 	.word	0x00880088
   1f43c:	0088012a 	.word	0x0088012a
   1f440:	00880088 	.word	0x00880088
   1f444:	00880088 	.word	0x00880088
   1f448:	010c0088 	.word	0x010c0088
   1f44c:	010c010c 	.word	0x010c010c
   1f450:	010c010c 	.word	0x010c010c
   1f454:	010c010c 	.word	0x010c010c
   1f458:	010c010c 	.word	0x010c010c
   1f45c:	0088010c 	.word	0x0088010c
   1f460:	010c010c 	.word	0x010c010c
   1f464:	010c010c 	.word	0x010c010c
   1f468:	00880088 	.word	0x00880088
   1f46c:	010c0088 	.word	0x010c0088
   1f470:	013e010c 	.word	0x013e010c
   1f474:	010c010c 	.word	0x010c010c
   1f478:	010c010c 	.word	0x010c010c
   1f47c:	010c      	.short	0x010c
   1f47e:	2200      	movs	r2, #0
   1f480:	a901      	add	r1, sp, #4
   1f482:	4620      	mov	r0, r4
   1f484:	f7fe fd56 	bl	1df34 <d_cv_qualifiers>
   1f488:	4605      	mov	r5, r0
   1f48a:	2800      	cmp	r0, #0
   1f48c:	d034      	beq.n	1f4f8 <d_type+0x13c>
   1f48e:	68e3      	ldr	r3, [r4, #12]
   1f490:	781b      	ldrb	r3, [r3, #0]
   1f492:	2b46      	cmp	r3, #70	; 0x46
   1f494:	4620      	mov	r0, r4
   1f496:	d034      	beq.n	1f502 <d_type+0x146>
   1f498:	f7ff ff90 	bl	1f3bc <d_type>
   1f49c:	6028      	str	r0, [r5, #0]
   1f49e:	b358      	cbz	r0, 1f4f8 <d_type+0x13c>
   1f4a0:	7803      	ldrb	r3, [r0, #0]
   1f4a2:	3b1f      	subs	r3, #31
   1f4a4:	2b01      	cmp	r3, #1
   1f4a6:	d930      	bls.n	1f50a <d_type+0x14e>
   1f4a8:	9a01      	ldr	r2, [sp, #4]
   1f4aa:	b32a      	cbz	r2, 1f4f8 <d_type+0x13c>
   1f4ac:	6a23      	ldr	r3, [r4, #32]
   1f4ae:	6a61      	ldr	r1, [r4, #36]	; 0x24
   1f4b0:	428b      	cmp	r3, r1
   1f4b2:	da21      	bge.n	1f4f8 <d_type+0x13c>
   1f4b4:	69e0      	ldr	r0, [r4, #28]
   1f4b6:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
   1f4ba:	9d01      	ldr	r5, [sp, #4]
   1f4bc:	1c59      	adds	r1, r3, #1
   1f4be:	4628      	mov	r0, r5
   1f4c0:	6221      	str	r1, [r4, #32]
   1f4c2:	b003      	add	sp, #12
   1f4c4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   1f4c8:	2301      	movs	r3, #1
   1f4ca:	6b45      	ldr	r5, [r0, #52]	; 0x34
   1f4cc:	6343      	str	r3, [r0, #52]	; 0x34
   1f4ce:	f7ff fb51 	bl	1eb74 <d_expression_1>
   1f4d2:	6365      	str	r5, [r4, #52]	; 0x34
   1f4d4:	4602      	mov	r2, r0
   1f4d6:	2300      	movs	r3, #0
   1f4d8:	2142      	movs	r1, #66	; 0x42
   1f4da:	4620      	mov	r0, r4
   1f4dc:	f7fe fcde 	bl	1de9c <d_make_comp>
   1f4e0:	4605      	mov	r5, r0
   1f4e2:	9001      	str	r0, [sp, #4]
   1f4e4:	b140      	cbz	r0, 1f4f8 <d_type+0x13c>
   1f4e6:	68e3      	ldr	r3, [r4, #12]
   1f4e8:	781a      	ldrb	r2, [r3, #0]
   1f4ea:	b12a      	cbz	r2, 1f4f8 <d_type+0x13c>
   1f4ec:	1c5a      	adds	r2, r3, #1
   1f4ee:	60e2      	str	r2, [r4, #12]
   1f4f0:	781b      	ldrb	r3, [r3, #0]
   1f4f2:	2b45      	cmp	r3, #69	; 0x45
   1f4f4:	f000 80aa 	beq.w	1f64c <d_type+0x290>
   1f4f8:	2500      	movs	r5, #0
   1f4fa:	4628      	mov	r0, r5
   1f4fc:	b003      	add	sp, #12
   1f4fe:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   1f502:	f000 fd53 	bl	1ffac <d_function_type>
   1f506:	6028      	str	r0, [r5, #0]
   1f508:	e7c9      	b.n	1f49e <d_type+0xe2>
   1f50a:	9a01      	ldr	r2, [sp, #4]
   1f50c:	6843      	ldr	r3, [r0, #4]
   1f50e:	6042      	str	r2, [r0, #4]
   1f510:	682a      	ldr	r2, [r5, #0]
   1f512:	9201      	str	r2, [sp, #4]
   1f514:	602b      	str	r3, [r5, #0]
   1f516:	e7c7      	b.n	1f4a8 <d_type+0xec>
   1f518:	7853      	ldrb	r3, [r2, #1]
   1f51a:	2b78      	cmp	r3, #120	; 0x78
   1f51c:	d0af      	beq.n	1f47e <d_type+0xc2>
   1f51e:	1c53      	adds	r3, r2, #1
   1f520:	60c3      	str	r3, [r0, #12]
   1f522:	7853      	ldrb	r3, [r2, #1]
   1f524:	2b00      	cmp	r3, #0
   1f526:	d0e7      	beq.n	1f4f8 <d_type+0x13c>
   1f528:	1c93      	adds	r3, r2, #2
   1f52a:	60c3      	str	r3, [r0, #12]
   1f52c:	7853      	ldrb	r3, [r2, #1]
   1f52e:	3b46      	subs	r3, #70	; 0x46
   1f530:	2b30      	cmp	r3, #48	; 0x30
   1f532:	d8e1      	bhi.n	1f4f8 <d_type+0x13c>
   1f534:	a101      	add	r1, pc, #4	; (adr r1, 1f53c <d_type+0x180>)
   1f536:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
   1f53a:	bf00      	nop
   1f53c:	0001fa27 	.word	0x0001fa27
   1f540:	0001f4f9 	.word	0x0001f4f9
   1f544:	0001f4f9 	.word	0x0001f4f9
   1f548:	0001f4f9 	.word	0x0001f4f9
   1f54c:	0001f4f9 	.word	0x0001f4f9
   1f550:	0001f4f9 	.word	0x0001f4f9
   1f554:	0001f4f9 	.word	0x0001f4f9
   1f558:	0001f4f9 	.word	0x0001f4f9
   1f55c:	0001f4f9 	.word	0x0001f4f9
   1f560:	0001f4f9 	.word	0x0001f4f9
   1f564:	0001f4f9 	.word	0x0001f4f9
   1f568:	0001f4f9 	.word	0x0001f4f9
   1f56c:	0001f4f9 	.word	0x0001f4f9
   1f570:	0001f4f9 	.word	0x0001f4f9
   1f574:	0001f4c9 	.word	0x0001f4c9
   1f578:	0001f4f9 	.word	0x0001f4f9
   1f57c:	0001f4f9 	.word	0x0001f4f9
   1f580:	0001f4f9 	.word	0x0001f4f9
   1f584:	0001f4f9 	.word	0x0001f4f9
   1f588:	0001f4f9 	.word	0x0001f4f9
   1f58c:	0001f4f9 	.word	0x0001f4f9
   1f590:	0001f4f9 	.word	0x0001f4f9
   1f594:	0001f4f9 	.word	0x0001f4f9
   1f598:	0001f4f9 	.word	0x0001f4f9
   1f59c:	0001f4f9 	.word	0x0001f4f9
   1f5a0:	0001f4f9 	.word	0x0001f4f9
   1f5a4:	0001f4f9 	.word	0x0001f4f9
   1f5a8:	0001f9fb 	.word	0x0001f9fb
   1f5ac:	0001f4f9 	.word	0x0001f4f9
   1f5b0:	0001f9cf 	.word	0x0001f9cf
   1f5b4:	0001f9af 	.word	0x0001f9af
   1f5b8:	0001f985 	.word	0x0001f985
   1f5bc:	0001f957 	.word	0x0001f957
   1f5c0:	0001f4f9 	.word	0x0001f4f9
   1f5c4:	0001f929 	.word	0x0001f929
   1f5c8:	0001f905 	.word	0x0001f905
   1f5cc:	0001f4f9 	.word	0x0001f4f9
   1f5d0:	0001f4f9 	.word	0x0001f4f9
   1f5d4:	0001f4f9 	.word	0x0001f4f9
   1f5d8:	0001f4f9 	.word	0x0001f4f9
   1f5dc:	0001f8cb 	.word	0x0001f8cb
   1f5e0:	0001f4f9 	.word	0x0001f4f9
   1f5e4:	0001f8b5 	.word	0x0001f8b5
   1f5e8:	0001f4f9 	.word	0x0001f4f9
   1f5ec:	0001f4f9 	.word	0x0001f4f9
   1f5f0:	0001f887 	.word	0x0001f887
   1f5f4:	0001f4c9 	.word	0x0001f4c9
   1f5f8:	0001f4f9 	.word	0x0001f4f9
   1f5fc:	0001f851 	.word	0x0001f851
   1f600:	6960      	ldr	r0, [r4, #20]
   1f602:	69a5      	ldr	r5, [r4, #24]
   1f604:	49bc      	ldr	r1, [pc, #752]	; (1f8f8 <d_type+0x53c>)
   1f606:	3b61      	subs	r3, #97	; 0x61
   1f608:	eb03 0383 	add.w	r3, r3, r3, lsl #2
   1f60c:	42a8      	cmp	r0, r5
   1f60e:	eb01 0383 	add.w	r3, r1, r3, lsl #2
   1f612:	f280 823a 	bge.w	1fa8a <d_type+0x6ce>
   1f616:	eb00 0140 	add.w	r1, r0, r0, lsl #1
   1f61a:	6926      	ldr	r6, [r4, #16]
   1f61c:	0089      	lsls	r1, r1, #2
   1f61e:	3001      	adds	r0, #1
   1f620:	1875      	adds	r5, r6, r1
   1f622:	6160      	str	r0, [r4, #20]
   1f624:	f000 8231 	beq.w	1fa8a <d_type+0x6ce>
   1f628:	2027      	movs	r0, #39	; 0x27
   1f62a:	5470      	strb	r0, [r6, r1]
   1f62c:	606b      	str	r3, [r5, #4]
   1f62e:	6859      	ldr	r1, [r3, #4]
   1f630:	6b23      	ldr	r3, [r4, #48]	; 0x30
   1f632:	3201      	adds	r2, #1
   1f634:	440b      	add	r3, r1
   1f636:	60e2      	str	r2, [r4, #12]
   1f638:	6323      	str	r3, [r4, #48]	; 0x30
   1f63a:	e75e      	b.n	1f4fa <d_type+0x13e>
   1f63c:	4620      	mov	r0, r4
   1f63e:	f7ff fd01 	bl	1f044 <d_name>
   1f642:	4605      	mov	r5, r0
   1f644:	9001      	str	r0, [sp, #4]
   1f646:	2d00      	cmp	r5, #0
   1f648:	f43f af56 	beq.w	1f4f8 <d_type+0x13c>
   1f64c:	6a23      	ldr	r3, [r4, #32]
   1f64e:	6a62      	ldr	r2, [r4, #36]	; 0x24
   1f650:	4293      	cmp	r3, r2
   1f652:	f6bf af51 	bge.w	1f4f8 <d_type+0x13c>
   1f656:	69e1      	ldr	r1, [r4, #28]
   1f658:	1c5a      	adds	r2, r3, #1
   1f65a:	f841 5023 	str.w	r5, [r1, r3, lsl #2]
   1f65e:	9d01      	ldr	r5, [sp, #4]
   1f660:	6222      	str	r2, [r4, #32]
   1f662:	e74a      	b.n	1f4fa <d_type+0x13e>
   1f664:	3201      	adds	r2, #1
   1f666:	60e2      	str	r2, [r4, #12]
   1f668:	4620      	mov	r0, r4
   1f66a:	f7fe fde9 	bl	1e240 <d_source_name>
   1f66e:	2300      	movs	r3, #0
   1f670:	4602      	mov	r2, r0
   1f672:	2128      	movs	r1, #40	; 0x28
   1f674:	4620      	mov	r0, r4
   1f676:	f7fe fc11 	bl	1de9c <d_make_comp>
   1f67a:	4605      	mov	r5, r0
   1f67c:	9001      	str	r0, [sp, #4]
   1f67e:	e7e2      	b.n	1f646 <d_type+0x28a>
   1f680:	4620      	mov	r0, r4
   1f682:	f000 fc93 	bl	1ffac <d_function_type>
   1f686:	4605      	mov	r5, r0
   1f688:	9001      	str	r0, [sp, #4]
   1f68a:	e7dc      	b.n	1f646 <d_type+0x28a>
   1f68c:	3201      	adds	r2, #1
   1f68e:	60e2      	str	r2, [r4, #12]
   1f690:	4620      	mov	r0, r4
   1f692:	f7ff fe93 	bl	1f3bc <d_type>
   1f696:	2300      	movs	r3, #0
   1f698:	4602      	mov	r2, r0
   1f69a:	2125      	movs	r1, #37	; 0x25
   1f69c:	4620      	mov	r0, r4
   1f69e:	f7fe fbfd 	bl	1de9c <d_make_comp>
   1f6a2:	4605      	mov	r5, r0
   1f6a4:	9001      	str	r0, [sp, #4]
   1f6a6:	e7ce      	b.n	1f646 <d_type+0x28a>
   1f6a8:	3201      	adds	r2, #1
   1f6aa:	60e2      	str	r2, [r4, #12]
   1f6ac:	4620      	mov	r0, r4
   1f6ae:	f7ff fe85 	bl	1f3bc <d_type>
   1f6b2:	2300      	movs	r3, #0
   1f6b4:	4602      	mov	r2, r0
   1f6b6:	2126      	movs	r1, #38	; 0x26
   1f6b8:	4620      	mov	r0, r4
   1f6ba:	f7fe fbef 	bl	1de9c <d_make_comp>
   1f6be:	4605      	mov	r5, r0
   1f6c0:	9001      	str	r0, [sp, #4]
   1f6c2:	e7c0      	b.n	1f646 <d_type+0x28a>
   1f6c4:	3201      	adds	r2, #1
   1f6c6:	60e2      	str	r2, [r4, #12]
   1f6c8:	4620      	mov	r0, r4
   1f6ca:	f7ff fe77 	bl	1f3bc <d_type>
   1f6ce:	4605      	mov	r5, r0
   1f6d0:	2800      	cmp	r0, #0
   1f6d2:	f000 80bb 	beq.w	1f84c <d_type+0x490>
   1f6d6:	4620      	mov	r0, r4
   1f6d8:	f7ff fe70 	bl	1f3bc <d_type>
   1f6dc:	2800      	cmp	r0, #0
   1f6de:	f000 80b5 	beq.w	1f84c <d_type+0x490>
   1f6e2:	4603      	mov	r3, r0
   1f6e4:	462a      	mov	r2, r5
   1f6e6:	212b      	movs	r1, #43	; 0x2b
   1f6e8:	4620      	mov	r0, r4
   1f6ea:	f7fe fbd7 	bl	1de9c <d_make_comp>
   1f6ee:	4605      	mov	r5, r0
   1f6f0:	9501      	str	r5, [sp, #4]
   1f6f2:	e7a8      	b.n	1f646 <d_type+0x28a>
   1f6f4:	3201      	adds	r2, #1
   1f6f6:	60e2      	str	r2, [r4, #12]
   1f6f8:	4620      	mov	r0, r4
   1f6fa:	f7ff fe5f 	bl	1f3bc <d_type>
   1f6fe:	2300      	movs	r3, #0
   1f700:	4602      	mov	r2, r0
   1f702:	2124      	movs	r1, #36	; 0x24
   1f704:	4620      	mov	r0, r4
   1f706:	f7fe fbc9 	bl	1de9c <d_make_comp>
   1f70a:	4605      	mov	r5, r0
   1f70c:	9001      	str	r0, [sp, #4]
   1f70e:	e79a      	b.n	1f646 <d_type+0x28a>
   1f710:	3201      	adds	r2, #1
   1f712:	60e2      	str	r2, [r4, #12]
   1f714:	4620      	mov	r0, r4
   1f716:	f7ff fe51 	bl	1f3bc <d_type>
   1f71a:	2300      	movs	r3, #0
   1f71c:	4602      	mov	r2, r0
   1f71e:	2123      	movs	r1, #35	; 0x23
   1f720:	4620      	mov	r0, r4
   1f722:	f7fe fbbb 	bl	1de9c <d_make_comp>
   1f726:	4605      	mov	r5, r0
   1f728:	9001      	str	r0, [sp, #4]
   1f72a:	e78c      	b.n	1f646 <d_type+0x28a>
   1f72c:	7853      	ldrb	r3, [r2, #1]
   1f72e:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
   1f732:	2a09      	cmp	r2, #9
   1f734:	d905      	bls.n	1f742 <d_type+0x386>
   1f736:	2b5f      	cmp	r3, #95	; 0x5f
   1f738:	d003      	beq.n	1f742 <d_type+0x386>
   1f73a:	3b41      	subs	r3, #65	; 0x41
   1f73c:	2b19      	cmp	r3, #25
   1f73e:	f200 81c3 	bhi.w	1fac8 <d_type+0x70c>
   1f742:	2100      	movs	r1, #0
   1f744:	4620      	mov	r0, r4
   1f746:	f7fe fdf3 	bl	1e330 <d_substitution>
   1f74a:	68e3      	ldr	r3, [r4, #12]
   1f74c:	9001      	str	r0, [sp, #4]
   1f74e:	781b      	ldrb	r3, [r3, #0]
   1f750:	2b49      	cmp	r3, #73	; 0x49
   1f752:	4605      	mov	r5, r0
   1f754:	f47f aed1 	bne.w	1f4fa <d_type+0x13e>
   1f758:	4620      	mov	r0, r4
   1f75a:	f7ff fc69 	bl	1f030 <d_template_args>
   1f75e:	462a      	mov	r2, r5
   1f760:	4603      	mov	r3, r0
   1f762:	2104      	movs	r1, #4
   1f764:	4620      	mov	r0, r4
   1f766:	f7fe fb99 	bl	1de9c <d_make_comp>
   1f76a:	4605      	mov	r5, r0
   1f76c:	e7c0      	b.n	1f6f0 <d_type+0x334>
   1f76e:	3201      	adds	r2, #1
   1f770:	60e2      	str	r2, [r4, #12]
   1f772:	4620      	mov	r0, r4
   1f774:	f7ff fe22 	bl	1f3bc <d_type>
   1f778:	2300      	movs	r3, #0
   1f77a:	4602      	mov	r2, r0
   1f77c:	2122      	movs	r1, #34	; 0x22
   1f77e:	4620      	mov	r0, r4
   1f780:	f7fe fb8c 	bl	1de9c <d_make_comp>
   1f784:	4605      	mov	r5, r0
   1f786:	9001      	str	r0, [sp, #4]
   1f788:	e75d      	b.n	1f646 <d_type+0x28a>
   1f78a:	4620      	mov	r0, r4
   1f78c:	f7fe fd36 	bl	1e1fc <d_template_param>
   1f790:	68e6      	ldr	r6, [r4, #12]
   1f792:	9001      	str	r0, [sp, #4]
   1f794:	7833      	ldrb	r3, [r6, #0]
   1f796:	2b49      	cmp	r3, #73	; 0x49
   1f798:	4605      	mov	r5, r0
   1f79a:	f47f af54 	bne.w	1f646 <d_type+0x28a>
   1f79e:	6ba3      	ldr	r3, [r4, #56]	; 0x38
   1f7a0:	2b00      	cmp	r3, #0
   1f7a2:	f040 81a9 	bne.w	1faf8 <d_type+0x73c>
   1f7a6:	2800      	cmp	r0, #0
   1f7a8:	f43f aea6 	beq.w	1f4f8 <d_type+0x13c>
   1f7ac:	6a23      	ldr	r3, [r4, #32]
   1f7ae:	6a62      	ldr	r2, [r4, #36]	; 0x24
   1f7b0:	4293      	cmp	r3, r2
   1f7b2:	f6bf aea1 	bge.w	1f4f8 <d_type+0x13c>
   1f7b6:	69e1      	ldr	r1, [r4, #28]
   1f7b8:	1c5a      	adds	r2, r3, #1
   1f7ba:	f841 0023 	str.w	r0, [r1, r3, lsl #2]
   1f7be:	6222      	str	r2, [r4, #32]
   1f7c0:	4620      	mov	r0, r4
   1f7c2:	9d01      	ldr	r5, [sp, #4]
   1f7c4:	f7ff fc34 	bl	1f030 <d_template_args>
   1f7c8:	462a      	mov	r2, r5
   1f7ca:	4603      	mov	r3, r0
   1f7cc:	e7c9      	b.n	1f762 <d_type+0x3a6>
   1f7ce:	3201      	adds	r2, #1
   1f7d0:	60e2      	str	r2, [r4, #12]
   1f7d2:	4620      	mov	r0, r4
   1f7d4:	f7fe fd34 	bl	1e240 <d_source_name>
   1f7d8:	68e3      	ldr	r3, [r4, #12]
   1f7da:	9001      	str	r0, [sp, #4]
   1f7dc:	781b      	ldrb	r3, [r3, #0]
   1f7de:	2b49      	cmp	r3, #73	; 0x49
   1f7e0:	4605      	mov	r5, r0
   1f7e2:	f000 817e 	beq.w	1fae2 <d_type+0x726>
   1f7e6:	4620      	mov	r0, r4
   1f7e8:	f7ff fde8 	bl	1f3bc <d_type>
   1f7ec:	9b01      	ldr	r3, [sp, #4]
   1f7ee:	4602      	mov	r2, r0
   1f7f0:	2121      	movs	r1, #33	; 0x21
   1f7f2:	4620      	mov	r0, r4
   1f7f4:	f7fe fb52 	bl	1de9c <d_make_comp>
   1f7f8:	4605      	mov	r5, r0
   1f7fa:	9001      	str	r0, [sp, #4]
   1f7fc:	e723      	b.n	1f646 <d_type+0x28a>
   1f7fe:	1c51      	adds	r1, r2, #1
   1f800:	60e1      	str	r1, [r4, #12]
   1f802:	7853      	ldrb	r3, [r2, #1]
   1f804:	2b5f      	cmp	r3, #95	; 0x5f
   1f806:	f000 8144 	beq.w	1fa92 <d_type+0x6d6>
   1f80a:	3b30      	subs	r3, #48	; 0x30
   1f80c:	2b09      	cmp	r3, #9
   1f80e:	f200 814e 	bhi.w	1faae <d_type+0x6f2>
   1f812:	460b      	mov	r3, r1
   1f814:	3301      	adds	r3, #1
   1f816:	60e3      	str	r3, [r4, #12]
   1f818:	781a      	ldrb	r2, [r3, #0]
   1f81a:	3a30      	subs	r2, #48	; 0x30
   1f81c:	2a09      	cmp	r2, #9
   1f81e:	d9f9      	bls.n	1f814 <d_type+0x458>
   1f820:	6962      	ldr	r2, [r4, #20]
   1f822:	69a0      	ldr	r0, [r4, #24]
   1f824:	4282      	cmp	r2, r0
   1f826:	da11      	bge.n	1f84c <d_type+0x490>
   1f828:	eb02 0042 	add.w	r0, r2, r2, lsl #1
   1f82c:	6926      	ldr	r6, [r4, #16]
   1f82e:	0080      	lsls	r0, r0, #2
   1f830:	3201      	adds	r2, #1
   1f832:	1835      	adds	r5, r6, r0
   1f834:	6162      	str	r2, [r4, #20]
   1f836:	d009      	beq.n	1f84c <d_type+0x490>
   1f838:	1a5a      	subs	r2, r3, r1
   1f83a:	d007      	beq.n	1f84c <d_type+0x490>
   1f83c:	2700      	movs	r7, #0
   1f83e:	5437      	strb	r7, [r6, r0]
   1f840:	6069      	str	r1, [r5, #4]
   1f842:	60aa      	str	r2, [r5, #8]
   1f844:	781a      	ldrb	r2, [r3, #0]
   1f846:	2a5f      	cmp	r2, #95	; 0x5f
   1f848:	f000 8190 	beq.w	1fb6c <d_type+0x7b0>
   1f84c:	2500      	movs	r5, #0
   1f84e:	e74f      	b.n	1f6f0 <d_type+0x334>
   1f850:	7893      	ldrb	r3, [r2, #2]
   1f852:	2b5f      	cmp	r3, #95	; 0x5f
   1f854:	f000 8180 	beq.w	1fb58 <d_type+0x79c>
   1f858:	f7fe fc9c 	bl	1e194 <d_number_component>
   1f85c:	4605      	mov	r5, r0
   1f85e:	2d00      	cmp	r5, #0
   1f860:	f43f af46 	beq.w	1f6f0 <d_type+0x334>
   1f864:	68e3      	ldr	r3, [r4, #12]
   1f866:	781a      	ldrb	r2, [r3, #0]
   1f868:	2a5f      	cmp	r2, #95	; 0x5f
   1f86a:	d1ef      	bne.n	1f84c <d_type+0x490>
   1f86c:	3301      	adds	r3, #1
   1f86e:	60e3      	str	r3, [r4, #12]
   1f870:	4620      	mov	r0, r4
   1f872:	f7ff fda3 	bl	1f3bc <d_type>
   1f876:	462a      	mov	r2, r5
   1f878:	4603      	mov	r3, r0
   1f87a:	212d      	movs	r1, #45	; 0x2d
   1f87c:	4620      	mov	r0, r4
   1f87e:	f7fe fb0d 	bl	1de9c <d_make_comp>
   1f882:	4605      	mov	r5, r0
   1f884:	e734      	b.n	1f6f0 <d_type+0x334>
   1f886:	6942      	ldr	r2, [r0, #20]
   1f888:	6983      	ldr	r3, [r0, #24]
   1f88a:	429a      	cmp	r2, r3
   1f88c:	f280 80fd 	bge.w	1fa8a <d_type+0x6ce>
   1f890:	230c      	movs	r3, #12
   1f892:	6901      	ldr	r1, [r0, #16]
   1f894:	fb03 f302 	mul.w	r3, r3, r2
   1f898:	18cd      	adds	r5, r1, r3
   1f89a:	f102 0201 	add.w	r2, r2, #1
   1f89e:	6142      	str	r2, [r0, #20]
   1f8a0:	f000 80f3 	beq.w	1fa8a <d_type+0x6ce>
   1f8a4:	4a15      	ldr	r2, [pc, #84]	; (1f8fc <d_type+0x540>)
   1f8a6:	2027      	movs	r0, #39	; 0x27
   1f8a8:	54c8      	strb	r0, [r1, r3]
   1f8aa:	606a      	str	r2, [r5, #4]
   1f8ac:	6b23      	ldr	r3, [r4, #48]	; 0x30
   1f8ae:	3308      	adds	r3, #8
   1f8b0:	6323      	str	r3, [r4, #48]	; 0x30
   1f8b2:	e622      	b.n	1f4fa <d_type+0x13e>
   1f8b4:	f7ff fd82 	bl	1f3bc <d_type>
   1f8b8:	2300      	movs	r3, #0
   1f8ba:	4602      	mov	r2, r0
   1f8bc:	214a      	movs	r1, #74	; 0x4a
   1f8be:	4620      	mov	r0, r4
   1f8c0:	f7fe faec 	bl	1de9c <d_make_comp>
   1f8c4:	4605      	mov	r5, r0
   1f8c6:	9001      	str	r0, [sp, #4]
   1f8c8:	e6bd      	b.n	1f646 <d_type+0x28a>
   1f8ca:	6942      	ldr	r2, [r0, #20]
   1f8cc:	6983      	ldr	r3, [r0, #24]
   1f8ce:	429a      	cmp	r2, r3
   1f8d0:	f280 80db 	bge.w	1fa8a <d_type+0x6ce>
   1f8d4:	230c      	movs	r3, #12
   1f8d6:	6901      	ldr	r1, [r0, #16]
   1f8d8:	fb03 f302 	mul.w	r3, r3, r2
   1f8dc:	18cd      	adds	r5, r1, r3
   1f8de:	f102 0201 	add.w	r2, r2, #1
   1f8e2:	6142      	str	r2, [r0, #20]
   1f8e4:	f000 80d1 	beq.w	1fa8a <d_type+0x6ce>
   1f8e8:	2027      	movs	r0, #39	; 0x27
   1f8ea:	4a05      	ldr	r2, [pc, #20]	; (1f900 <d_type+0x544>)
   1f8ec:	54c8      	strb	r0, [r1, r3]
   1f8ee:	606a      	str	r2, [r5, #4]
   1f8f0:	6b23      	ldr	r3, [r4, #48]	; 0x30
   1f8f2:	3311      	adds	r3, #17
   1f8f4:	6323      	str	r3, [r4, #48]	; 0x30
   1f8f6:	e600      	b.n	1f4fa <d_type+0x13e>
   1f8f8:	0002de88 	.word	0x0002de88
   1f8fc:	0002e0e0 	.word	0x0002e0e0
   1f900:	0002e108 	.word	0x0002e108
   1f904:	6942      	ldr	r2, [r0, #20]
   1f906:	6983      	ldr	r3, [r0, #24]
   1f908:	429a      	cmp	r2, r3
   1f90a:	f280 80be 	bge.w	1fa8a <d_type+0x6ce>
   1f90e:	230c      	movs	r3, #12
   1f910:	6901      	ldr	r1, [r0, #16]
   1f912:	fb03 f302 	mul.w	r3, r3, r2
   1f916:	18cd      	adds	r5, r1, r3
   1f918:	f102 0201 	add.w	r2, r2, #1
   1f91c:	6142      	str	r2, [r0, #20]
   1f91e:	f000 80b4 	beq.w	1fa8a <d_type+0x6ce>
   1f922:	2027      	movs	r0, #39	; 0x27
   1f924:	4a92      	ldr	r2, [pc, #584]	; (1fb70 <d_type+0x7b4>)
   1f926:	e7bf      	b.n	1f8a8 <d_type+0x4ec>
   1f928:	6942      	ldr	r2, [r0, #20]
   1f92a:	6983      	ldr	r3, [r0, #24]
   1f92c:	429a      	cmp	r2, r3
   1f92e:	f280 80ac 	bge.w	1fa8a <d_type+0x6ce>
   1f932:	230c      	movs	r3, #12
   1f934:	6901      	ldr	r1, [r0, #16]
   1f936:	fb03 f302 	mul.w	r3, r3, r2
   1f93a:	18cd      	adds	r5, r1, r3
   1f93c:	f102 0201 	add.w	r2, r2, #1
   1f940:	6142      	str	r2, [r0, #20]
   1f942:	f000 80a2 	beq.w	1fa8a <d_type+0x6ce>
   1f946:	2027      	movs	r0, #39	; 0x27
   1f948:	4a8a      	ldr	r2, [pc, #552]	; (1fb74 <d_type+0x7b8>)
   1f94a:	54c8      	strb	r0, [r1, r3]
   1f94c:	606a      	str	r2, [r5, #4]
   1f94e:	6b23      	ldr	r3, [r4, #48]	; 0x30
   1f950:	3304      	adds	r3, #4
   1f952:	6323      	str	r3, [r4, #48]	; 0x30
   1f954:	e5d1      	b.n	1f4fa <d_type+0x13e>
   1f956:	6942      	ldr	r2, [r0, #20]
   1f958:	6983      	ldr	r3, [r0, #24]
   1f95a:	429a      	cmp	r2, r3
   1f95c:	f280 8095 	bge.w	1fa8a <d_type+0x6ce>
   1f960:	230c      	movs	r3, #12
   1f962:	6901      	ldr	r1, [r0, #16]
   1f964:	fb03 f302 	mul.w	r3, r3, r2
   1f968:	18cd      	adds	r5, r1, r3
   1f96a:	f102 0201 	add.w	r2, r2, #1
   1f96e:	6142      	str	r2, [r0, #20]
   1f970:	f000 808b 	beq.w	1fa8a <d_type+0x6ce>
   1f974:	4a80      	ldr	r2, [pc, #512]	; (1fb78 <d_type+0x7bc>)
   1f976:	2027      	movs	r0, #39	; 0x27
   1f978:	54c8      	strb	r0, [r1, r3]
   1f97a:	606a      	str	r2, [r5, #4]
   1f97c:	6b23      	ldr	r3, [r4, #48]	; 0x30
   1f97e:	3309      	adds	r3, #9
   1f980:	6323      	str	r3, [r4, #48]	; 0x30
   1f982:	e5ba      	b.n	1f4fa <d_type+0x13e>
   1f984:	6942      	ldr	r2, [r0, #20]
   1f986:	6983      	ldr	r3, [r0, #24]
   1f988:	429a      	cmp	r2, r3
   1f98a:	da7e      	bge.n	1fa8a <d_type+0x6ce>
   1f98c:	230c      	movs	r3, #12
   1f98e:	6901      	ldr	r1, [r0, #16]
   1f990:	fb03 f302 	mul.w	r3, r3, r2
   1f994:	18cd      	adds	r5, r1, r3
   1f996:	f102 0201 	add.w	r2, r2, #1
   1f99a:	6142      	str	r2, [r0, #20]
   1f99c:	d075      	beq.n	1fa8a <d_type+0x6ce>
   1f99e:	2027      	movs	r0, #39	; 0x27
   1f9a0:	4a76      	ldr	r2, [pc, #472]	; (1fb7c <d_type+0x7c0>)
   1f9a2:	54c8      	strb	r0, [r1, r3]
   1f9a4:	606a      	str	r2, [r5, #4]
   1f9a6:	6b23      	ldr	r3, [r4, #48]	; 0x30
   1f9a8:	330a      	adds	r3, #10
   1f9aa:	6323      	str	r3, [r4, #48]	; 0x30
   1f9ac:	e5a5      	b.n	1f4fa <d_type+0x13e>
   1f9ae:	6942      	ldr	r2, [r0, #20]
   1f9b0:	6983      	ldr	r3, [r0, #24]
   1f9b2:	429a      	cmp	r2, r3
   1f9b4:	da69      	bge.n	1fa8a <d_type+0x6ce>
   1f9b6:	230c      	movs	r3, #12
   1f9b8:	6901      	ldr	r1, [r0, #16]
   1f9ba:	fb03 f302 	mul.w	r3, r3, r2
   1f9be:	18cd      	adds	r5, r1, r3
   1f9c0:	f102 0201 	add.w	r2, r2, #1
   1f9c4:	6142      	str	r2, [r0, #20]
   1f9c6:	d060      	beq.n	1fa8a <d_type+0x6ce>
   1f9c8:	2027      	movs	r0, #39	; 0x27
   1f9ca:	4a6d      	ldr	r2, [pc, #436]	; (1fb80 <d_type+0x7c4>)
   1f9cc:	e7d4      	b.n	1f978 <d_type+0x5bc>
   1f9ce:	6942      	ldr	r2, [r0, #20]
   1f9d0:	6983      	ldr	r3, [r0, #24]
   1f9d2:	429a      	cmp	r2, r3
   1f9d4:	f6bf ad90 	bge.w	1f4f8 <d_type+0x13c>
   1f9d8:	230c      	movs	r3, #12
   1f9da:	6901      	ldr	r1, [r0, #16]
   1f9dc:	fb03 f302 	mul.w	r3, r3, r2
   1f9e0:	18cd      	adds	r5, r1, r3
   1f9e2:	f102 0201 	add.w	r2, r2, #1
   1f9e6:	6142      	str	r2, [r0, #20]
   1f9e8:	f43f ad87 	beq.w	1f4fa <d_type+0x13e>
   1f9ec:	2000      	movs	r0, #0
   1f9ee:	54c8      	strb	r0, [r1, r3]
   1f9f0:	4a64      	ldr	r2, [pc, #400]	; (1fb84 <d_type+0x7c8>)
   1f9f2:	606a      	str	r2, [r5, #4]
   1f9f4:	230e      	movs	r3, #14
   1f9f6:	60ab      	str	r3, [r5, #8]
   1f9f8:	e57f      	b.n	1f4fa <d_type+0x13e>
   1f9fa:	6942      	ldr	r2, [r0, #20]
   1f9fc:	6983      	ldr	r3, [r0, #24]
   1f9fe:	429a      	cmp	r2, r3
   1fa00:	f6bf ad7a 	bge.w	1f4f8 <d_type+0x13c>
   1fa04:	230c      	movs	r3, #12
   1fa06:	6901      	ldr	r1, [r0, #16]
   1fa08:	fb03 f302 	mul.w	r3, r3, r2
   1fa0c:	18cd      	adds	r5, r1, r3
   1fa0e:	f102 0201 	add.w	r2, r2, #1
   1fa12:	6142      	str	r2, [r0, #20]
   1fa14:	f43f ad71 	beq.w	1f4fa <d_type+0x13e>
   1fa18:	2000      	movs	r0, #0
   1fa1a:	54c8      	strb	r0, [r1, r3]
   1fa1c:	4a5a      	ldr	r2, [pc, #360]	; (1fb88 <d_type+0x7cc>)
   1fa1e:	606a      	str	r2, [r5, #4]
   1fa20:	2304      	movs	r3, #4
   1fa22:	60ab      	str	r3, [r5, #8]
   1fa24:	e569      	b.n	1f4fa <d_type+0x13e>
   1fa26:	6943      	ldr	r3, [r0, #20]
   1fa28:	6981      	ldr	r1, [r0, #24]
   1fa2a:	428b      	cmp	r3, r1
   1fa2c:	da7a      	bge.n	1fb24 <d_type+0x768>
   1fa2e:	6900      	ldr	r0, [r0, #16]
   1fa30:	eb03 0143 	add.w	r1, r3, r3, lsl #1
   1fa34:	0089      	lsls	r1, r1, #2
   1fa36:	3301      	adds	r3, #1
   1fa38:	1845      	adds	r5, r0, r1
   1fa3a:	262c      	movs	r6, #44	; 0x2c
   1fa3c:	6163      	str	r3, [r4, #20]
   1fa3e:	9501      	str	r5, [sp, #4]
   1fa40:	5446      	strb	r6, [r0, r1]
   1fa42:	7893      	ldrb	r3, [r2, #2]
   1fa44:	3b30      	subs	r3, #48	; 0x30
   1fa46:	b2db      	uxtb	r3, r3
   1fa48:	2b09      	cmp	r3, #9
   1fa4a:	bf94      	ite	ls
   1fa4c:	2301      	movls	r3, #1
   1fa4e:	2300      	movhi	r3, #0
   1fa50:	812b      	strh	r3, [r5, #8]
   1fa52:	d97b      	bls.n	1fb4c <d_type+0x790>
   1fa54:	4620      	mov	r0, r4
   1fa56:	f7ff fcb1 	bl	1f3bc <d_type>
   1fa5a:	9b01      	ldr	r3, [sp, #4]
   1fa5c:	6068      	str	r0, [r5, #4]
   1fa5e:	685b      	ldr	r3, [r3, #4]
   1fa60:	2b00      	cmp	r3, #0
   1fa62:	f43f ad49 	beq.w	1f4f8 <d_type+0x13c>
   1fa66:	f104 000c 	add.w	r0, r4, #12
   1fa6a:	f7fe fb69 	bl	1e140 <d_number.isra.0>
   1fa6e:	68e2      	ldr	r2, [r4, #12]
   1fa70:	7813      	ldrb	r3, [r2, #0]
   1fa72:	b113      	cbz	r3, 1fa7a <d_type+0x6be>
   1fa74:	1c53      	adds	r3, r2, #1
   1fa76:	60e3      	str	r3, [r4, #12]
   1fa78:	7813      	ldrb	r3, [r2, #0]
   1fa7a:	9d01      	ldr	r5, [sp, #4]
   1fa7c:	f1a3 0373 	sub.w	r3, r3, #115	; 0x73
   1fa80:	fab3 f383 	clz	r3, r3
   1fa84:	095b      	lsrs	r3, r3, #5
   1fa86:	816b      	strh	r3, [r5, #10]
   1fa88:	e537      	b.n	1f4fa <d_type+0x13e>
   1fa8a:	2300      	movs	r3, #0
   1fa8c:	9301      	str	r3, [sp, #4]
   1fa8e:	685b      	ldr	r3, [r3, #4]
   1fa90:	deff      	udf	#255	; 0xff
   1fa92:	2500      	movs	r5, #0
   1fa94:	3101      	adds	r1, #1
   1fa96:	60e1      	str	r1, [r4, #12]
   1fa98:	4620      	mov	r0, r4
   1fa9a:	f7ff fc8f 	bl	1f3bc <d_type>
   1fa9e:	462a      	mov	r2, r5
   1faa0:	4603      	mov	r3, r0
   1faa2:	212a      	movs	r1, #42	; 0x2a
   1faa4:	4620      	mov	r0, r4
   1faa6:	f7fe f9f9 	bl	1de9c <d_make_comp>
   1faaa:	4605      	mov	r5, r0
   1faac:	e620      	b.n	1f6f0 <d_type+0x334>
   1faae:	2301      	movs	r3, #1
   1fab0:	6b65      	ldr	r5, [r4, #52]	; 0x34
   1fab2:	6363      	str	r3, [r4, #52]	; 0x34
   1fab4:	4620      	mov	r0, r4
   1fab6:	f7ff f85d 	bl	1eb74 <d_expression_1>
   1faba:	6365      	str	r5, [r4, #52]	; 0x34
   1fabc:	4605      	mov	r5, r0
   1fabe:	2800      	cmp	r0, #0
   1fac0:	f43f aec4 	beq.w	1f84c <d_type+0x490>
   1fac4:	68e3      	ldr	r3, [r4, #12]
   1fac6:	e6bd      	b.n	1f844 <d_type+0x488>
   1fac8:	4620      	mov	r0, r4
   1faca:	f7ff fabb 	bl	1f044 <d_name>
   1face:	4605      	mov	r5, r0
   1fad0:	9001      	str	r0, [sp, #4]
   1fad2:	2800      	cmp	r0, #0
   1fad4:	f43f ad10 	beq.w	1f4f8 <d_type+0x13c>
   1fad8:	7803      	ldrb	r3, [r0, #0]
   1fada:	2b18      	cmp	r3, #24
   1fadc:	f47f adb6 	bne.w	1f64c <d_type+0x290>
   1fae0:	e50b      	b.n	1f4fa <d_type+0x13e>
   1fae2:	4620      	mov	r0, r4
   1fae4:	f7ff faa4 	bl	1f030 <d_template_args>
   1fae8:	462a      	mov	r2, r5
   1faea:	4603      	mov	r3, r0
   1faec:	2104      	movs	r1, #4
   1faee:	4620      	mov	r0, r4
   1faf0:	f7fe f9d4 	bl	1de9c <d_make_comp>
   1faf4:	9001      	str	r0, [sp, #4]
   1faf6:	e676      	b.n	1f7e6 <d_type+0x42a>
   1faf8:	4620      	mov	r0, r4
   1fafa:	f8d4 9014 	ldr.w	r9, [r4, #20]
   1fafe:	f8d4 8020 	ldr.w	r8, [r4, #32]
   1fb02:	6aa7      	ldr	r7, [r4, #40]	; 0x28
   1fb04:	6b25      	ldr	r5, [r4, #48]	; 0x30
   1fb06:	f7ff fa93 	bl	1f030 <d_template_args>
   1fb0a:	68e2      	ldr	r2, [r4, #12]
   1fb0c:	7812      	ldrb	r2, [r2, #0]
   1fb0e:	2a49      	cmp	r2, #73	; 0x49
   1fb10:	d00b      	beq.n	1fb2a <d_type+0x76e>
   1fb12:	6325      	str	r5, [r4, #48]	; 0x30
   1fb14:	60e6      	str	r6, [r4, #12]
   1fb16:	f8c4 9014 	str.w	r9, [r4, #20]
   1fb1a:	f8c4 8020 	str.w	r8, [r4, #32]
   1fb1e:	62a7      	str	r7, [r4, #40]	; 0x28
   1fb20:	9d01      	ldr	r5, [sp, #4]
   1fb22:	e590      	b.n	1f646 <d_type+0x28a>
   1fb24:	2300      	movs	r3, #0
   1fb26:	701b      	strb	r3, [r3, #0]
   1fb28:	deff      	udf	#255	; 0xff
   1fb2a:	9b01      	ldr	r3, [sp, #4]
   1fb2c:	2b00      	cmp	r3, #0
   1fb2e:	f43f ace3 	beq.w	1f4f8 <d_type+0x13c>
   1fb32:	6a22      	ldr	r2, [r4, #32]
   1fb34:	6a61      	ldr	r1, [r4, #36]	; 0x24
   1fb36:	428a      	cmp	r2, r1
   1fb38:	f6bf acde 	bge.w	1f4f8 <d_type+0x13c>
   1fb3c:	69e5      	ldr	r5, [r4, #28]
   1fb3e:	1c51      	adds	r1, r2, #1
   1fb40:	f845 3022 	str.w	r3, [r5, r2, lsl #2]
   1fb44:	9a01      	ldr	r2, [sp, #4]
   1fb46:	6221      	str	r1, [r4, #32]
   1fb48:	4603      	mov	r3, r0
   1fb4a:	e60a      	b.n	1f762 <d_type+0x3a6>
   1fb4c:	f104 000c 	add.w	r0, r4, #12
   1fb50:	f7fe faf6 	bl	1e140 <d_number.isra.0>
   1fb54:	9d01      	ldr	r5, [sp, #4]
   1fb56:	e77d      	b.n	1fa54 <d_type+0x698>
   1fb58:	3203      	adds	r2, #3
   1fb5a:	2301      	movs	r3, #1
   1fb5c:	6b46      	ldr	r6, [r0, #52]	; 0x34
   1fb5e:	60c2      	str	r2, [r0, #12]
   1fb60:	6343      	str	r3, [r0, #52]	; 0x34
   1fb62:	f7ff f807 	bl	1eb74 <d_expression_1>
   1fb66:	6366      	str	r6, [r4, #52]	; 0x34
   1fb68:	4605      	mov	r5, r0
   1fb6a:	e678      	b.n	1f85e <d_type+0x4a2>
   1fb6c:	4619      	mov	r1, r3
   1fb6e:	e791      	b.n	1fa94 <d_type+0x6d8>
   1fb70:	0002e0f4 	.word	0x0002e0f4
   1fb74:	0002e0cc 	.word	0x0002e0cc
   1fb78:	0002e090 	.word	0x0002e090
   1fb7c:	0002e0b8 	.word	0x0002e0b8
   1fb80:	0002e0a4 	.word	0x0002e0a4
   1fb84:	0002e5b4 	.word	0x0002e5b4
   1fb88:	0002e5ac 	.word	0x0002e5ac

0001fb8c <d_operator_name>:
   1fb8c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1fb8e:	68c3      	ldr	r3, [r0, #12]
   1fb90:	781e      	ldrb	r6, [r3, #0]
   1fb92:	4684      	mov	ip, r0
   1fb94:	b326      	cbz	r6, 1fbe0 <d_operator_name+0x54>
   1fb96:	1c5a      	adds	r2, r3, #1
   1fb98:	60c2      	str	r2, [r0, #12]
   1fb9a:	785a      	ldrb	r2, [r3, #1]
   1fb9c:	781e      	ldrb	r6, [r3, #0]
   1fb9e:	2a00      	cmp	r2, #0
   1fba0:	d058      	beq.n	1fc54 <d_operator_name+0xc8>
   1fba2:	1c9a      	adds	r2, r3, #2
   1fba4:	60c2      	str	r2, [r0, #12]
   1fba6:	2e76      	cmp	r6, #118	; 0x76
   1fba8:	4604      	mov	r4, r0
   1fbaa:	f893 e001 	ldrb.w	lr, [r3, #1]
   1fbae:	d043      	beq.n	1fc38 <d_operator_name+0xac>
   1fbb0:	2e63      	cmp	r6, #99	; 0x63
   1fbb2:	d116      	bne.n	1fbe2 <d_operator_name+0x56>
   1fbb4:	f1be 0f76 	cmp.w	lr, #118	; 0x76
   1fbb8:	d113      	bne.n	1fbe2 <d_operator_name+0x56>
   1fbba:	6b43      	ldr	r3, [r0, #52]	; 0x34
   1fbbc:	6b85      	ldr	r5, [r0, #56]	; 0x38
   1fbbe:	fab3 f383 	clz	r3, r3
   1fbc2:	095b      	lsrs	r3, r3, #5
   1fbc4:	6383      	str	r3, [r0, #56]	; 0x38
   1fbc6:	f7ff fbf9 	bl	1f3bc <d_type>
   1fbca:	6ba3      	ldr	r3, [r4, #56]	; 0x38
   1fbcc:	4602      	mov	r2, r0
   1fbce:	2b00      	cmp	r3, #0
   1fbd0:	d052      	beq.n	1fc78 <d_operator_name+0xec>
   1fbd2:	2300      	movs	r3, #0
   1fbd4:	2134      	movs	r1, #52	; 0x34
   1fbd6:	4620      	mov	r0, r4
   1fbd8:	f7fe f960 	bl	1de9c <d_make_comp>
   1fbdc:	63a5      	str	r5, [r4, #56]	; 0x38
   1fbde:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   1fbe0:	46b6      	mov	lr, r6
   1fbe2:	4c28      	ldr	r4, [pc, #160]	; (1fc84 <d_operator_name+0xf8>)
   1fbe4:	2043      	movs	r0, #67	; 0x43
   1fbe6:	2200      	movs	r2, #0
   1fbe8:	e004      	b.n	1fbf4 <d_operator_name+0x68>
   1fbea:	bf94      	ite	ls
   1fbec:	1c5a      	addls	r2, r3, #1
   1fbee:	4618      	movhi	r0, r3
   1fbf0:	4282      	cmp	r2, r0
   1fbf2:	d02d      	beq.n	1fc50 <d_operator_name+0xc4>
   1fbf4:	1a83      	subs	r3, r0, r2
   1fbf6:	eb03 73d3 	add.w	r3, r3, r3, lsr #31
   1fbfa:	eb02 0363 	add.w	r3, r2, r3, asr #1
   1fbfe:	0119      	lsls	r1, r3, #4
   1fc00:	1867      	adds	r7, r4, r1
   1fc02:	5861      	ldr	r1, [r4, r1]
   1fc04:	780d      	ldrb	r5, [r1, #0]
   1fc06:	42b5      	cmp	r5, r6
   1fc08:	d1ef      	bne.n	1fbea <d_operator_name+0x5e>
   1fc0a:	7849      	ldrb	r1, [r1, #1]
   1fc0c:	4571      	cmp	r1, lr
   1fc0e:	d1ec      	bne.n	1fbea <d_operator_name+0x5e>
   1fc10:	f8dc 3014 	ldr.w	r3, [ip, #20]
   1fc14:	f8dc 2018 	ldr.w	r2, [ip, #24]
   1fc18:	4293      	cmp	r3, r2
   1fc1a:	da19      	bge.n	1fc50 <d_operator_name+0xc4>
   1fc1c:	eb03 0243 	add.w	r2, r3, r3, lsl #1
   1fc20:	f8dc 1010 	ldr.w	r1, [ip, #16]
   1fc24:	0092      	lsls	r2, r2, #2
   1fc26:	3301      	adds	r3, #1
   1fc28:	1888      	adds	r0, r1, r2
   1fc2a:	f8cc 3014 	str.w	r3, [ip, #20]
   1fc2e:	d013      	beq.n	1fc58 <d_operator_name+0xcc>
   1fc30:	2331      	movs	r3, #49	; 0x31
   1fc32:	548b      	strb	r3, [r1, r2]
   1fc34:	6047      	str	r7, [r0, #4]
   1fc36:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   1fc38:	f1ae 0530 	sub.w	r5, lr, #48	; 0x30
   1fc3c:	b2eb      	uxtb	r3, r5
   1fc3e:	2b09      	cmp	r3, #9
   1fc40:	d8cf      	bhi.n	1fbe2 <d_operator_name+0x56>
   1fc42:	f7fe fafd 	bl	1e240 <d_source_name>
   1fc46:	6963      	ldr	r3, [r4, #20]
   1fc48:	69a2      	ldr	r2, [r4, #24]
   1fc4a:	4293      	cmp	r3, r2
   1fc4c:	4601      	mov	r1, r0
   1fc4e:	db04      	blt.n	1fc5a <d_operator_name+0xce>
   1fc50:	2000      	movs	r0, #0
   1fc52:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   1fc54:	4696      	mov	lr, r2
   1fc56:	e7c4      	b.n	1fbe2 <d_operator_name+0x56>
   1fc58:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   1fc5a:	eb03 0243 	add.w	r2, r3, r3, lsl #1
   1fc5e:	6926      	ldr	r6, [r4, #16]
   1fc60:	0092      	lsls	r2, r2, #2
   1fc62:	3301      	adds	r3, #1
   1fc64:	18b0      	adds	r0, r6, r2
   1fc66:	6163      	str	r3, [r4, #20]
   1fc68:	d0f2      	beq.n	1fc50 <d_operator_name+0xc4>
   1fc6a:	2900      	cmp	r1, #0
   1fc6c:	d0f0      	beq.n	1fc50 <d_operator_name+0xc4>
   1fc6e:	2332      	movs	r3, #50	; 0x32
   1fc70:	54b3      	strb	r3, [r6, r2]
   1fc72:	6045      	str	r5, [r0, #4]
   1fc74:	6081      	str	r1, [r0, #8]
   1fc76:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   1fc78:	2133      	movs	r1, #51	; 0x33
   1fc7a:	4620      	mov	r0, r4
   1fc7c:	f7fe f90e 	bl	1de9c <d_make_comp>
   1fc80:	e7ac      	b.n	1fbdc <d_operator_name+0x50>
   1fc82:	bf00      	nop
   1fc84:	0002e11c 	.word	0x0002e11c

0001fc88 <d_parmlist>:
   1fc88:	b530      	push	{r4, r5, lr}
   1fc8a:	68c2      	ldr	r2, [r0, #12]
   1fc8c:	b083      	sub	sp, #12
   1fc8e:	2300      	movs	r3, #0
   1fc90:	9301      	str	r3, [sp, #4]
   1fc92:	7813      	ldrb	r3, [r2, #0]
   1fc94:	b343      	cbz	r3, 1fce8 <d_parmlist+0x60>
   1fc96:	2b45      	cmp	r3, #69	; 0x45
   1fc98:	d026      	beq.n	1fce8 <d_parmlist+0x60>
   1fc9a:	2b2e      	cmp	r3, #46	; 0x2e
   1fc9c:	d024      	beq.n	1fce8 <d_parmlist+0x60>
   1fc9e:	4604      	mov	r4, r0
   1fca0:	ad01      	add	r5, sp, #4
   1fca2:	e015      	b.n	1fcd0 <d_parmlist+0x48>
   1fca4:	2b4f      	cmp	r3, #79	; 0x4f
   1fca6:	d016      	beq.n	1fcd6 <d_parmlist+0x4e>
   1fca8:	f7ff fb88 	bl	1f3bc <d_type>
   1fcac:	2300      	movs	r3, #0
   1fcae:	4602      	mov	r2, r0
   1fcb0:	212e      	movs	r1, #46	; 0x2e
   1fcb2:	b1c8      	cbz	r0, 1fce8 <d_parmlist+0x60>
   1fcb4:	4620      	mov	r0, r4
   1fcb6:	f7fe f8f1 	bl	1de9c <d_make_comp>
   1fcba:	6028      	str	r0, [r5, #0]
   1fcbc:	b1a0      	cbz	r0, 1fce8 <d_parmlist+0x60>
   1fcbe:	68e2      	ldr	r2, [r4, #12]
   1fcc0:	7813      	ldrb	r3, [r2, #0]
   1fcc2:	f100 0508 	add.w	r5, r0, #8
   1fcc6:	b14b      	cbz	r3, 1fcdc <d_parmlist+0x54>
   1fcc8:	2b45      	cmp	r3, #69	; 0x45
   1fcca:	d007      	beq.n	1fcdc <d_parmlist+0x54>
   1fccc:	2b2e      	cmp	r3, #46	; 0x2e
   1fcce:	d005      	beq.n	1fcdc <d_parmlist+0x54>
   1fcd0:	2b52      	cmp	r3, #82	; 0x52
   1fcd2:	4620      	mov	r0, r4
   1fcd4:	d1e6      	bne.n	1fca4 <d_parmlist+0x1c>
   1fcd6:	7853      	ldrb	r3, [r2, #1]
   1fcd8:	2b45      	cmp	r3, #69	; 0x45
   1fcda:	d1e5      	bne.n	1fca8 <d_parmlist+0x20>
   1fcdc:	9801      	ldr	r0, [sp, #4]
   1fcde:	b118      	cbz	r0, 1fce8 <d_parmlist+0x60>
   1fce0:	6883      	ldr	r3, [r0, #8]
   1fce2:	b123      	cbz	r3, 1fcee <d_parmlist+0x66>
   1fce4:	b003      	add	sp, #12
   1fce6:	bd30      	pop	{r4, r5, pc}
   1fce8:	2000      	movs	r0, #0
   1fcea:	b003      	add	sp, #12
   1fcec:	bd30      	pop	{r4, r5, pc}
   1fcee:	6842      	ldr	r2, [r0, #4]
   1fcf0:	7811      	ldrb	r1, [r2, #0]
   1fcf2:	2927      	cmp	r1, #39	; 0x27
   1fcf4:	d1f6      	bne.n	1fce4 <d_parmlist+0x5c>
   1fcf6:	6852      	ldr	r2, [r2, #4]
   1fcf8:	7c11      	ldrb	r1, [r2, #16]
   1fcfa:	2909      	cmp	r1, #9
   1fcfc:	d1f2      	bne.n	1fce4 <d_parmlist+0x5c>
   1fcfe:	6851      	ldr	r1, [r2, #4]
   1fd00:	6b22      	ldr	r2, [r4, #48]	; 0x30
   1fd02:	1a52      	subs	r2, r2, r1
   1fd04:	6322      	str	r2, [r4, #48]	; 0x30
   1fd06:	6043      	str	r3, [r0, #4]
   1fd08:	e7ec      	b.n	1fce4 <d_parmlist+0x5c>
   1fd0a:	bf00      	nop

0001fd0c <d_unqualified_name>:
   1fd0c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1fd0e:	68c1      	ldr	r1, [r0, #12]
   1fd10:	780b      	ldrb	r3, [r1, #0]
   1fd12:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
   1fd16:	2a09      	cmp	r2, #9
   1fd18:	4604      	mov	r4, r0
   1fd1a:	d920      	bls.n	1fd5e <d_unqualified_name+0x52>
   1fd1c:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
   1fd20:	2a19      	cmp	r2, #25
   1fd22:	d925      	bls.n	1fd70 <d_unqualified_name+0x64>
   1fd24:	f1a3 0243 	sub.w	r2, r3, #67	; 0x43
   1fd28:	2a01      	cmp	r2, #1
   1fd2a:	d92c      	bls.n	1fd86 <d_unqualified_name+0x7a>
   1fd2c:	2b4c      	cmp	r3, #76	; 0x4c
   1fd2e:	f000 8088 	beq.w	1fe42 <d_unqualified_name+0x136>
   1fd32:	2b55      	cmp	r3, #85	; 0x55
   1fd34:	d133      	bne.n	1fd9e <d_unqualified_name+0x92>
   1fd36:	784b      	ldrb	r3, [r1, #1]
   1fd38:	2b6c      	cmp	r3, #108	; 0x6c
   1fd3a:	d033      	beq.n	1fda4 <d_unqualified_name+0x98>
   1fd3c:	2b74      	cmp	r3, #116	; 0x74
   1fd3e:	d12e      	bne.n	1fd9e <d_unqualified_name+0x92>
   1fd40:	1c4b      	adds	r3, r1, #1
   1fd42:	60c3      	str	r3, [r0, #12]
   1fd44:	784b      	ldrb	r3, [r1, #1]
   1fd46:	2b74      	cmp	r3, #116	; 0x74
   1fd48:	d05a      	beq.n	1fe00 <d_unqualified_name+0xf4>
   1fd4a:	2b42      	cmp	r3, #66	; 0x42
   1fd4c:	f04f 0500 	mov.w	r5, #0
   1fd50:	d10c      	bne.n	1fd6c <d_unqualified_name+0x60>
   1fd52:	4629      	mov	r1, r5
   1fd54:	4620      	mov	r0, r4
   1fd56:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
   1fd5a:	f7fe bacd 	b.w	1e2f8 <d_abi_tags>
   1fd5e:	f7fe fa6f 	bl	1e240 <d_source_name>
   1fd62:	68e3      	ldr	r3, [r4, #12]
   1fd64:	781b      	ldrb	r3, [r3, #0]
   1fd66:	4605      	mov	r5, r0
   1fd68:	2b42      	cmp	r3, #66	; 0x42
   1fd6a:	d0f2      	beq.n	1fd52 <d_unqualified_name+0x46>
   1fd6c:	4628      	mov	r0, r5
   1fd6e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   1fd70:	f7ff ff0c 	bl	1fb8c <d_operator_name>
   1fd74:	4605      	mov	r5, r0
   1fd76:	b118      	cbz	r0, 1fd80 <d_unqualified_name+0x74>
   1fd78:	7803      	ldrb	r3, [r0, #0]
   1fd7a:	2b31      	cmp	r3, #49	; 0x31
   1fd7c:	f000 80b2 	beq.w	1fee4 <d_unqualified_name+0x1d8>
   1fd80:	68e3      	ldr	r3, [r4, #12]
   1fd82:	781b      	ldrb	r3, [r3, #0]
   1fd84:	e7f0      	b.n	1fd68 <d_unqualified_name+0x5c>
   1fd86:	6ac5      	ldr	r5, [r0, #44]	; 0x2c
   1fd88:	b125      	cbz	r5, 1fd94 <d_unqualified_name+0x88>
   1fd8a:	782a      	ldrb	r2, [r5, #0]
   1fd8c:	2a00      	cmp	r2, #0
   1fd8e:	d06c      	beq.n	1fe6a <d_unqualified_name+0x15e>
   1fd90:	2a18      	cmp	r2, #24
   1fd92:	d06a      	beq.n	1fe6a <d_unqualified_name+0x15e>
   1fd94:	2b43      	cmp	r3, #67	; 0x43
   1fd96:	f000 80bf 	beq.w	1ff18 <d_unqualified_name+0x20c>
   1fd9a:	2b44      	cmp	r3, #68	; 0x44
   1fd9c:	d06f      	beq.n	1fe7e <d_unqualified_name+0x172>
   1fd9e:	2500      	movs	r5, #0
   1fda0:	4628      	mov	r0, r5
   1fda2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   1fda4:	1c4b      	adds	r3, r1, #1
   1fda6:	60c3      	str	r3, [r0, #12]
   1fda8:	784b      	ldrb	r3, [r1, #1]
   1fdaa:	2b6c      	cmp	r3, #108	; 0x6c
   1fdac:	d1cd      	bne.n	1fd4a <d_unqualified_name+0x3e>
   1fdae:	3102      	adds	r1, #2
   1fdb0:	60c1      	str	r1, [r0, #12]
   1fdb2:	f7ff ff69 	bl	1fc88 <d_parmlist>
   1fdb6:	4606      	mov	r6, r0
   1fdb8:	b1f0      	cbz	r0, 1fdf8 <d_unqualified_name+0xec>
   1fdba:	68e2      	ldr	r2, [r4, #12]
   1fdbc:	7813      	ldrb	r3, [r2, #0]
   1fdbe:	2b45      	cmp	r3, #69	; 0x45
   1fdc0:	d1c3      	bne.n	1fd4a <d_unqualified_name+0x3e>
   1fdc2:	3201      	adds	r2, #1
   1fdc4:	60e2      	str	r2, [r4, #12]
   1fdc6:	4620      	mov	r0, r4
   1fdc8:	f7fe f9fc 	bl	1e1c4 <d_compact_number>
   1fdcc:	2800      	cmp	r0, #0
   1fdce:	db13      	blt.n	1fdf8 <d_unqualified_name+0xec>
   1fdd0:	6963      	ldr	r3, [r4, #20]
   1fdd2:	69a2      	ldr	r2, [r4, #24]
   1fdd4:	4293      	cmp	r3, r2
   1fdd6:	da0f      	bge.n	1fdf8 <d_unqualified_name+0xec>
   1fdd8:	eb03 0243 	add.w	r2, r3, r3, lsl #1
   1fddc:	6921      	ldr	r1, [r4, #16]
   1fdde:	0092      	lsls	r2, r2, #2
   1fde0:	3301      	adds	r3, #1
   1fde2:	188d      	adds	r5, r1, r2
   1fde4:	6163      	str	r3, [r4, #20]
   1fde6:	d0cb      	beq.n	1fd80 <d_unqualified_name+0x74>
   1fde8:	2345      	movs	r3, #69	; 0x45
   1fdea:	548b      	strb	r3, [r1, r2]
   1fdec:	606e      	str	r6, [r5, #4]
   1fdee:	60a8      	str	r0, [r5, #8]
   1fdf0:	6a23      	ldr	r3, [r4, #32]
   1fdf2:	6a62      	ldr	r2, [r4, #36]	; 0x24
   1fdf4:	4293      	cmp	r3, r2
   1fdf6:	db1c      	blt.n	1fe32 <d_unqualified_name+0x126>
   1fdf8:	68e3      	ldr	r3, [r4, #12]
   1fdfa:	2500      	movs	r5, #0
   1fdfc:	781b      	ldrb	r3, [r3, #0]
   1fdfe:	e7b3      	b.n	1fd68 <d_unqualified_name+0x5c>
   1fe00:	3102      	adds	r1, #2
   1fe02:	60c1      	str	r1, [r0, #12]
   1fe04:	f7fe f9de 	bl	1e1c4 <d_compact_number>
   1fe08:	2800      	cmp	r0, #0
   1fe0a:	dbf5      	blt.n	1fdf8 <d_unqualified_name+0xec>
   1fe0c:	6963      	ldr	r3, [r4, #20]
   1fe0e:	69a2      	ldr	r2, [r4, #24]
   1fe10:	4293      	cmp	r3, r2
   1fe12:	daf1      	bge.n	1fdf8 <d_unqualified_name+0xec>
   1fe14:	eb03 0243 	add.w	r2, r3, r3, lsl #1
   1fe18:	6921      	ldr	r1, [r4, #16]
   1fe1a:	0092      	lsls	r2, r2, #2
   1fe1c:	3301      	adds	r3, #1
   1fe1e:	188d      	adds	r5, r1, r2
   1fe20:	6163      	str	r3, [r4, #20]
   1fe22:	d0ad      	beq.n	1fd80 <d_unqualified_name+0x74>
   1fe24:	2347      	movs	r3, #71	; 0x47
   1fe26:	548b      	strb	r3, [r1, r2]
   1fe28:	6068      	str	r0, [r5, #4]
   1fe2a:	6a23      	ldr	r3, [r4, #32]
   1fe2c:	6a62      	ldr	r2, [r4, #36]	; 0x24
   1fe2e:	4293      	cmp	r3, r2
   1fe30:	dae2      	bge.n	1fdf8 <d_unqualified_name+0xec>
   1fe32:	69e1      	ldr	r1, [r4, #28]
   1fe34:	68e2      	ldr	r2, [r4, #12]
   1fe36:	f841 5023 	str.w	r5, [r1, r3, lsl #2]
   1fe3a:	3301      	adds	r3, #1
   1fe3c:	6223      	str	r3, [r4, #32]
   1fe3e:	7813      	ldrb	r3, [r2, #0]
   1fe40:	e792      	b.n	1fd68 <d_unqualified_name+0x5c>
   1fe42:	3101      	adds	r1, #1
   1fe44:	60c1      	str	r1, [r0, #12]
   1fe46:	f7fe f9fb 	bl	1e240 <d_source_name>
   1fe4a:	4605      	mov	r5, r0
   1fe4c:	2800      	cmp	r0, #0
   1fe4e:	d0a6      	beq.n	1fd9e <d_unqualified_name+0x92>
   1fe50:	68e2      	ldr	r2, [r4, #12]
   1fe52:	7813      	ldrb	r3, [r2, #0]
   1fe54:	2b5f      	cmp	r3, #95	; 0x5f
   1fe56:	d187      	bne.n	1fd68 <d_unqualified_name+0x5c>
   1fe58:	4620      	mov	r0, r4
   1fe5a:	3201      	adds	r2, #1
   1fe5c:	f840 2f0c 	str.w	r2, [r0, #12]!
   1fe60:	f7fe f96e 	bl	1e140 <d_number.isra.0>
   1fe64:	2800      	cmp	r0, #0
   1fe66:	da8b      	bge.n	1fd80 <d_unqualified_name+0x74>
   1fe68:	e799      	b.n	1fd9e <d_unqualified_name+0x92>
   1fe6a:	6b23      	ldr	r3, [r4, #48]	; 0x30
   1fe6c:	68aa      	ldr	r2, [r5, #8]
   1fe6e:	4413      	add	r3, r2
   1fe70:	6323      	str	r3, [r4, #48]	; 0x30
   1fe72:	780b      	ldrb	r3, [r1, #0]
   1fe74:	2b43      	cmp	r3, #67	; 0x43
   1fe76:	d04f      	beq.n	1ff18 <d_unqualified_name+0x20c>
   1fe78:	2b44      	cmp	r3, #68	; 0x44
   1fe7a:	f47f af66 	bne.w	1fd4a <d_unqualified_name+0x3e>
   1fe7e:	784b      	ldrb	r3, [r1, #1]
   1fe80:	3b30      	subs	r3, #48	; 0x30
   1fe82:	2b05      	cmp	r3, #5
   1fe84:	d88b      	bhi.n	1fd9e <d_unqualified_name+0x92>
   1fe86:	a201      	add	r2, pc, #4	; (adr r2, 1fe8c <d_unqualified_name+0x180>)
   1fe88:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   1fe8c:	0001fee1 	.word	0x0001fee1
   1fe90:	0001fea5 	.word	0x0001fea5
   1fe94:	0001fedd 	.word	0x0001fedd
   1fe98:	0001fd9f 	.word	0x0001fd9f
   1fe9c:	0001fed9 	.word	0x0001fed9
   1fea0:	0001fed5 	.word	0x0001fed5
   1fea4:	2702      	movs	r7, #2
   1fea6:	6963      	ldr	r3, [r4, #20]
   1fea8:	69a2      	ldr	r2, [r4, #24]
   1feaa:	1c88      	adds	r0, r1, #2
   1feac:	4293      	cmp	r3, r2
   1feae:	60e0      	str	r0, [r4, #12]
   1feb0:	da56      	bge.n	1ff60 <d_unqualified_name+0x254>
   1feb2:	eb03 0243 	add.w	r2, r3, r3, lsl #1
   1feb6:	6920      	ldr	r0, [r4, #16]
   1feb8:	0092      	lsls	r2, r2, #2
   1feba:	3301      	adds	r3, #1
   1febc:	1886      	adds	r6, r0, r2
   1febe:	6163      	str	r3, [r4, #20]
   1fec0:	d005      	beq.n	1fece <d_unqualified_name+0x1c2>
   1fec2:	2d00      	cmp	r5, #0
   1fec4:	d04f      	beq.n	1ff66 <d_unqualified_name+0x25a>
   1fec6:	2308      	movs	r3, #8
   1fec8:	5483      	strb	r3, [r0, r2]
   1feca:	7137      	strb	r7, [r6, #4]
   1fecc:	60b5      	str	r5, [r6, #8]
   1fece:	788b      	ldrb	r3, [r1, #2]
   1fed0:	4635      	mov	r5, r6
   1fed2:	e749      	b.n	1fd68 <d_unqualified_name+0x5c>
   1fed4:	2705      	movs	r7, #5
   1fed6:	e7e6      	b.n	1fea6 <d_unqualified_name+0x19a>
   1fed8:	2704      	movs	r7, #4
   1feda:	e7e4      	b.n	1fea6 <d_unqualified_name+0x19a>
   1fedc:	2703      	movs	r7, #3
   1fede:	e7e2      	b.n	1fea6 <d_unqualified_name+0x19a>
   1fee0:	2701      	movs	r7, #1
   1fee2:	e7e0      	b.n	1fea6 <d_unqualified_name+0x19a>
   1fee4:	6842      	ldr	r2, [r0, #4]
   1fee6:	6b23      	ldr	r3, [r4, #48]	; 0x30
   1fee8:	6896      	ldr	r6, [r2, #8]
   1feea:	6810      	ldr	r0, [r2, #0]
   1feec:	491f      	ldr	r1, [pc, #124]	; (1ff6c <d_unqualified_name+0x260>)
   1feee:	3307      	adds	r3, #7
   1fef0:	4433      	add	r3, r6
   1fef2:	6323      	str	r3, [r4, #48]	; 0x30
   1fef4:	f008 fae8 	bl	284c8 <strcmp>
   1fef8:	2800      	cmp	r0, #0
   1fefa:	f47f af41 	bne.w	1fd80 <d_unqualified_name+0x74>
   1fefe:	4620      	mov	r0, r4
   1ff00:	f7fe f99e 	bl	1e240 <d_source_name>
   1ff04:	462a      	mov	r2, r5
   1ff06:	4603      	mov	r3, r0
   1ff08:	2136      	movs	r1, #54	; 0x36
   1ff0a:	4620      	mov	r0, r4
   1ff0c:	f7fd ffc6 	bl	1de9c <d_make_comp>
   1ff10:	68e3      	ldr	r3, [r4, #12]
   1ff12:	4605      	mov	r5, r0
   1ff14:	781b      	ldrb	r3, [r3, #0]
   1ff16:	e727      	b.n	1fd68 <d_unqualified_name+0x5c>
   1ff18:	784b      	ldrb	r3, [r1, #1]
   1ff1a:	3b31      	subs	r3, #49	; 0x31
   1ff1c:	2b04      	cmp	r3, #4
   1ff1e:	f63f af3e 	bhi.w	1fd9e <d_unqualified_name+0x92>
   1ff22:	e8df f003 	tbb	[pc, r3]
   1ff26:	0315      	.short	0x0315
   1ff28:	191b      	.short	0x191b
   1ff2a:	17          	.byte	0x17
   1ff2b:	00          	.byte	0x00
   1ff2c:	2702      	movs	r7, #2
   1ff2e:	6963      	ldr	r3, [r4, #20]
   1ff30:	69a2      	ldr	r2, [r4, #24]
   1ff32:	1c88      	adds	r0, r1, #2
   1ff34:	4293      	cmp	r3, r2
   1ff36:	60e0      	str	r0, [r4, #12]
   1ff38:	da12      	bge.n	1ff60 <d_unqualified_name+0x254>
   1ff3a:	eb03 0243 	add.w	r2, r3, r3, lsl #1
   1ff3e:	6920      	ldr	r0, [r4, #16]
   1ff40:	0092      	lsls	r2, r2, #2
   1ff42:	3301      	adds	r3, #1
   1ff44:	1886      	adds	r6, r0, r2
   1ff46:	6163      	str	r3, [r4, #20]
   1ff48:	d0c1      	beq.n	1fece <d_unqualified_name+0x1c2>
   1ff4a:	b165      	cbz	r5, 1ff66 <d_unqualified_name+0x25a>
   1ff4c:	2307      	movs	r3, #7
   1ff4e:	e7bb      	b.n	1fec8 <d_unqualified_name+0x1bc>
   1ff50:	2701      	movs	r7, #1
   1ff52:	e7ec      	b.n	1ff2e <d_unqualified_name+0x222>
   1ff54:	2705      	movs	r7, #5
   1ff56:	e7ea      	b.n	1ff2e <d_unqualified_name+0x222>
   1ff58:	2704      	movs	r7, #4
   1ff5a:	e7e8      	b.n	1ff2e <d_unqualified_name+0x222>
   1ff5c:	2703      	movs	r7, #3
   1ff5e:	e7e6      	b.n	1ff2e <d_unqualified_name+0x222>
   1ff60:	788b      	ldrb	r3, [r1, #2]
   1ff62:	2500      	movs	r5, #0
   1ff64:	e700      	b.n	1fd68 <d_unqualified_name+0x5c>
   1ff66:	788b      	ldrb	r3, [r1, #2]
   1ff68:	e6fe      	b.n	1fd68 <d_unqualified_name+0x5c>
   1ff6a:	bf00      	nop
   1ff6c:	0002e5c4 	.word	0x0002e5c4

0001ff70 <d_bare_function_type>:
   1ff70:	b570      	push	{r4, r5, r6, lr}
   1ff72:	68c3      	ldr	r3, [r0, #12]
   1ff74:	781a      	ldrb	r2, [r3, #0]
   1ff76:	2a4a      	cmp	r2, #74	; 0x4a
   1ff78:	4604      	mov	r4, r0
   1ff7a:	d00d      	beq.n	1ff98 <d_bare_function_type+0x28>
   1ff7c:	b971      	cbnz	r1, 1ff9c <d_bare_function_type+0x2c>
   1ff7e:	460d      	mov	r5, r1
   1ff80:	4620      	mov	r0, r4
   1ff82:	f7ff fe81 	bl	1fc88 <d_parmlist>
   1ff86:	b178      	cbz	r0, 1ffa8 <d_bare_function_type+0x38>
   1ff88:	4603      	mov	r3, r0
   1ff8a:	462a      	mov	r2, r5
   1ff8c:	4620      	mov	r0, r4
   1ff8e:	2129      	movs	r1, #41	; 0x29
   1ff90:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   1ff94:	f7fd bf82 	b.w	1de9c <d_make_comp>
   1ff98:	3301      	adds	r3, #1
   1ff9a:	60c3      	str	r3, [r0, #12]
   1ff9c:	4620      	mov	r0, r4
   1ff9e:	f7ff fa0d 	bl	1f3bc <d_type>
   1ffa2:	4605      	mov	r5, r0
   1ffa4:	2800      	cmp	r0, #0
   1ffa6:	d1eb      	bne.n	1ff80 <d_bare_function_type+0x10>
   1ffa8:	2000      	movs	r0, #0
   1ffaa:	bd70      	pop	{r4, r5, r6, pc}

0001ffac <d_function_type>:
   1ffac:	68c3      	ldr	r3, [r0, #12]
   1ffae:	781a      	ldrb	r2, [r3, #0]
   1ffb0:	2a46      	cmp	r2, #70	; 0x46
   1ffb2:	d001      	beq.n	1ffb8 <d_function_type+0xc>
   1ffb4:	2000      	movs	r0, #0
   1ffb6:	4770      	bx	lr
   1ffb8:	b510      	push	{r4, lr}
   1ffba:	1c5a      	adds	r2, r3, #1
   1ffbc:	60c2      	str	r2, [r0, #12]
   1ffbe:	785a      	ldrb	r2, [r3, #1]
   1ffc0:	2a59      	cmp	r2, #89	; 0x59
   1ffc2:	bf04      	itt	eq
   1ffc4:	3302      	addeq	r3, #2
   1ffc6:	60c3      	streq	r3, [r0, #12]
   1ffc8:	2101      	movs	r1, #1
   1ffca:	4604      	mov	r4, r0
   1ffcc:	f7ff ffd0 	bl	1ff70 <d_bare_function_type>
   1ffd0:	4601      	mov	r1, r0
   1ffd2:	4620      	mov	r0, r4
   1ffd4:	f7fe f814 	bl	1e000 <d_ref_qualifier>
   1ffd8:	68e3      	ldr	r3, [r4, #12]
   1ffda:	781a      	ldrb	r2, [r3, #0]
   1ffdc:	2a45      	cmp	r2, #69	; 0x45
   1ffde:	d001      	beq.n	1ffe4 <d_function_type+0x38>
   1ffe0:	2000      	movs	r0, #0
   1ffe2:	bd10      	pop	{r4, pc}
   1ffe4:	3301      	adds	r3, #1
   1ffe6:	60e3      	str	r3, [r4, #12]
   1ffe8:	bd10      	pop	{r4, pc}
   1ffea:	bf00      	nop

0001ffec <d_encoding>:
   1ffec:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   1fff0:	68c3      	ldr	r3, [r0, #12]
   1fff2:	781a      	ldrb	r2, [r3, #0]
   1fff4:	2a47      	cmp	r2, #71	; 0x47
   1fff6:	4605      	mov	r5, r0
   1fff8:	d01f      	beq.n	2003a <d_encoding+0x4e>
   1fffa:	2a54      	cmp	r2, #84	; 0x54
   1fffc:	d01d      	beq.n	2003a <d_encoding+0x4e>
   1fffe:	460e      	mov	r6, r1
   20000:	f7ff f820 	bl	1f044 <d_name>
   20004:	4604      	mov	r4, r0
   20006:	b310      	cbz	r0, 2004e <d_encoding+0x62>
   20008:	b32e      	cbz	r6, 20056 <d_encoding+0x6a>
   2000a:	68ab      	ldr	r3, [r5, #8]
   2000c:	07db      	lsls	r3, r3, #31
   2000e:	d422      	bmi.n	20056 <d_encoding+0x6a>
   20010:	7823      	ldrb	r3, [r4, #0]
   20012:	f1a3 021c 	sub.w	r2, r3, #28
   20016:	2a04      	cmp	r2, #4
   20018:	d940      	bls.n	2009c <d_encoding+0xb0>
   2001a:	2b4c      	cmp	r3, #76	; 0x4c
   2001c:	d03e      	beq.n	2009c <d_encoding+0xb0>
   2001e:	2b02      	cmp	r3, #2
   20020:	d116      	bne.n	20050 <d_encoding+0x64>
   20022:	68a3      	ldr	r3, [r4, #8]
   20024:	781a      	ldrb	r2, [r3, #0]
   20026:	f1a2 011c 	sub.w	r1, r2, #28
   2002a:	2904      	cmp	r1, #4
   2002c:	f240 8283 	bls.w	20536 <d_encoding+0x54a>
   20030:	2a4c      	cmp	r2, #76	; 0x4c
   20032:	f000 8280 	beq.w	20536 <d_encoding+0x54a>
   20036:	60a3      	str	r3, [r4, #8]
   20038:	e00a      	b.n	20050 <d_encoding+0x64>
   2003a:	6b29      	ldr	r1, [r5, #48]	; 0x30
   2003c:	f101 0214 	add.w	r2, r1, #20
   20040:	632a      	str	r2, [r5, #48]	; 0x30
   20042:	781a      	ldrb	r2, [r3, #0]
   20044:	2a54      	cmp	r2, #84	; 0x54
   20046:	d02b      	beq.n	200a0 <d_encoding+0xb4>
   20048:	2a47      	cmp	r2, #71	; 0x47
   2004a:	f000 809f 	beq.w	2018c <d_encoding+0x1a0>
   2004e:	2400      	movs	r4, #0
   20050:	4620      	mov	r0, r4
   20052:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   20056:	68eb      	ldr	r3, [r5, #12]
   20058:	781b      	ldrb	r3, [r3, #0]
   2005a:	2b00      	cmp	r3, #0
   2005c:	d0f8      	beq.n	20050 <d_encoding+0x64>
   2005e:	2b45      	cmp	r3, #69	; 0x45
   20060:	d0f6      	beq.n	20050 <d_encoding+0x64>
   20062:	4621      	mov	r1, r4
   20064:	780a      	ldrb	r2, [r1, #0]
   20066:	2a20      	cmp	r2, #32
   20068:	f200 8113 	bhi.w	20292 <d_encoding+0x2a6>
   2006c:	2a1c      	cmp	r2, #28
   2006e:	f080 8112 	bcs.w	20296 <d_encoding+0x2aa>
   20072:	2a04      	cmp	r2, #4
   20074:	f040 8101 	bne.w	2027a <d_encoding+0x28e>
   20078:	684a      	ldr	r2, [r1, #4]
   2007a:	b16a      	cbz	r2, 20098 <d_encoding+0xac>
   2007c:	7813      	ldrb	r3, [r2, #0]
   2007e:	2b08      	cmp	r3, #8
   20080:	f103 31ff 	add.w	r1, r3, #4294967295
   20084:	f200 80f6 	bhi.w	20274 <d_encoding+0x288>
   20088:	2b07      	cmp	r3, #7
   2008a:	f080 80f6 	bcs.w	2027a <d_encoding+0x28e>
   2008e:	2901      	cmp	r1, #1
   20090:	d802      	bhi.n	20098 <d_encoding+0xac>
   20092:	6892      	ldr	r2, [r2, #8]
   20094:	2a00      	cmp	r2, #0
   20096:	d1f1      	bne.n	2007c <d_encoding+0x90>
   20098:	2101      	movs	r1, #1
   2009a:	e0ef      	b.n	2027c <d_encoding+0x290>
   2009c:	6864      	ldr	r4, [r4, #4]
   2009e:	e7b7      	b.n	20010 <d_encoding+0x24>
   200a0:	1c5a      	adds	r2, r3, #1
   200a2:	60ea      	str	r2, [r5, #12]
   200a4:	785a      	ldrb	r2, [r3, #1]
   200a6:	2a00      	cmp	r2, #0
   200a8:	d0d1      	beq.n	2004e <d_encoding+0x62>
   200aa:	1c9a      	adds	r2, r3, #2
   200ac:	60ea      	str	r2, [r5, #12]
   200ae:	785b      	ldrb	r3, [r3, #1]
   200b0:	3b43      	subs	r3, #67	; 0x43
   200b2:	2b33      	cmp	r3, #51	; 0x33
   200b4:	d8cb      	bhi.n	2004e <d_encoding+0x62>
   200b6:	a201      	add	r2, pc, #4	; (adr r2, 200bc <d_encoding+0xd0>)
   200b8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   200bc:	000204f7 	.word	0x000204f7
   200c0:	0002004f 	.word	0x0002004f
   200c4:	0002004f 	.word	0x0002004f
   200c8:	000204e1 	.word	0x000204e1
   200cc:	0002004f 	.word	0x0002004f
   200d0:	000204cb 	.word	0x000204cb
   200d4:	000204b5 	.word	0x000204b5
   200d8:	0002049f 	.word	0x0002049f
   200dc:	0002004f 	.word	0x0002004f
   200e0:	0002004f 	.word	0x0002004f
   200e4:	0002004f 	.word	0x0002004f
   200e8:	0002004f 	.word	0x0002004f
   200ec:	0002004f 	.word	0x0002004f
   200f0:	0002004f 	.word	0x0002004f
   200f4:	0002004f 	.word	0x0002004f
   200f8:	0002004f 	.word	0x0002004f
   200fc:	00020489 	.word	0x00020489
   20100:	0002046f 	.word	0x0002046f
   20104:	0002004f 	.word	0x0002004f
   20108:	00020455 	.word	0x00020455
   2010c:	0002043f 	.word	0x0002043f
   20110:	0002004f 	.word	0x0002004f
   20114:	0002004f 	.word	0x0002004f
   20118:	0002004f 	.word	0x0002004f
   2011c:	0002004f 	.word	0x0002004f
   20120:	0002004f 	.word	0x0002004f
   20124:	0002004f 	.word	0x0002004f
   20128:	0002004f 	.word	0x0002004f
   2012c:	0002004f 	.word	0x0002004f
   20130:	0002004f 	.word	0x0002004f
   20134:	0002004f 	.word	0x0002004f
   20138:	0002004f 	.word	0x0002004f
   2013c:	0002040b 	.word	0x0002040b
   20140:	0002004f 	.word	0x0002004f
   20144:	0002004f 	.word	0x0002004f
   20148:	0002004f 	.word	0x0002004f
   2014c:	0002004f 	.word	0x0002004f
   20150:	000203e5 	.word	0x000203e5
   20154:	0002004f 	.word	0x0002004f
   20158:	0002004f 	.word	0x0002004f
   2015c:	0002004f 	.word	0x0002004f
   20160:	0002004f 	.word	0x0002004f
   20164:	0002004f 	.word	0x0002004f
   20168:	0002004f 	.word	0x0002004f
   2016c:	0002004f 	.word	0x0002004f
   20170:	0002004f 	.word	0x0002004f
   20174:	0002004f 	.word	0x0002004f
   20178:	0002004f 	.word	0x0002004f
   2017c:	0002004f 	.word	0x0002004f
   20180:	0002004f 	.word	0x0002004f
   20184:	0002004f 	.word	0x0002004f
   20188:	000203bf 	.word	0x000203bf
   2018c:	1c5a      	adds	r2, r3, #1
   2018e:	60ea      	str	r2, [r5, #12]
   20190:	785a      	ldrb	r2, [r3, #1]
   20192:	2a00      	cmp	r2, #0
   20194:	f43f af5b 	beq.w	2004e <d_encoding+0x62>
   20198:	1c9a      	adds	r2, r3, #2
   2019a:	60ea      	str	r2, [r5, #12]
   2019c:	785a      	ldrb	r2, [r3, #1]
   2019e:	3a41      	subs	r2, #65	; 0x41
   201a0:	2a31      	cmp	r2, #49	; 0x31
   201a2:	f63f af54 	bhi.w	2004e <d_encoding+0x62>
   201a6:	a101      	add	r1, pc, #4	; (adr r1, 201ac <d_encoding+0x1c0>)
   201a8:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
   201ac:	000202a1 	.word	0x000202a1
   201b0:	0002004f 	.word	0x0002004f
   201b4:	0002004f 	.word	0x0002004f
   201b8:	0002004f 	.word	0x0002004f
   201bc:	0002004f 	.word	0x0002004f
   201c0:	0002004f 	.word	0x0002004f
   201c4:	0002004f 	.word	0x0002004f
   201c8:	0002004f 	.word	0x0002004f
   201cc:	0002004f 	.word	0x0002004f
   201d0:	0002004f 	.word	0x0002004f
   201d4:	0002004f 	.word	0x0002004f
   201d8:	0002004f 	.word	0x0002004f
   201dc:	0002004f 	.word	0x0002004f
   201e0:	0002004f 	.word	0x0002004f
   201e4:	0002004f 	.word	0x0002004f
   201e8:	0002004f 	.word	0x0002004f
   201ec:	0002004f 	.word	0x0002004f
   201f0:	000203a1 	.word	0x000203a1
   201f4:	0002004f 	.word	0x0002004f
   201f8:	00020375 	.word	0x00020375
   201fc:	0002004f 	.word	0x0002004f
   20200:	0002035f 	.word	0x0002035f
   20204:	0002004f 	.word	0x0002004f
   20208:	0002004f 	.word	0x0002004f
   2020c:	0002004f 	.word	0x0002004f
   20210:	0002004f 	.word	0x0002004f
   20214:	0002004f 	.word	0x0002004f
   20218:	0002004f 	.word	0x0002004f
   2021c:	0002004f 	.word	0x0002004f
   20220:	0002004f 	.word	0x0002004f
   20224:	0002004f 	.word	0x0002004f
   20228:	0002004f 	.word	0x0002004f
   2022c:	0002004f 	.word	0x0002004f
   20230:	0002004f 	.word	0x0002004f
   20234:	0002004f 	.word	0x0002004f
   20238:	0002004f 	.word	0x0002004f
   2023c:	0002004f 	.word	0x0002004f
   20240:	0002004f 	.word	0x0002004f
   20244:	0002004f 	.word	0x0002004f
   20248:	0002004f 	.word	0x0002004f
   2024c:	0002004f 	.word	0x0002004f
   20250:	0002004f 	.word	0x0002004f
   20254:	0002004f 	.word	0x0002004f
   20258:	0002004f 	.word	0x0002004f
   2025c:	0002004f 	.word	0x0002004f
   20260:	0002004f 	.word	0x0002004f
   20264:	0002004f 	.word	0x0002004f
   20268:	0002004f 	.word	0x0002004f
   2026c:	0002004f 	.word	0x0002004f
   20270:	000202b9 	.word	0x000202b9
   20274:	2b34      	cmp	r3, #52	; 0x34
   20276:	f47f af0f 	bne.w	20098 <d_encoding+0xac>
   2027a:	2100      	movs	r1, #0
   2027c:	4628      	mov	r0, r5
   2027e:	f7ff fe77 	bl	1ff70 <d_bare_function_type>
   20282:	4622      	mov	r2, r4
   20284:	4603      	mov	r3, r0
   20286:	2103      	movs	r1, #3
   20288:	4628      	mov	r0, r5
   2028a:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   2028e:	f7fd be05 	b.w	1de9c <d_make_comp>
   20292:	2a4c      	cmp	r2, #76	; 0x4c
   20294:	d1f1      	bne.n	2027a <d_encoding+0x28e>
   20296:	6849      	ldr	r1, [r1, #4]
   20298:	2900      	cmp	r1, #0
   2029a:	f47f aee3 	bne.w	20064 <d_encoding+0x78>
   2029e:	e7ed      	b.n	2027c <d_encoding+0x290>
   202a0:	2100      	movs	r1, #0
   202a2:	4628      	mov	r0, r5
   202a4:	f7ff fea2 	bl	1ffec <d_encoding>
   202a8:	2300      	movs	r3, #0
   202aa:	4602      	mov	r2, r0
   202ac:	2117      	movs	r1, #23
   202ae:	4628      	mov	r0, r5
   202b0:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   202b4:	f7fd bdf2 	b.w	1de9c <d_make_comp>
   202b8:	f105 000c 	add.w	r0, r5, #12
   202bc:	f7fd ff40 	bl	1e140 <d_number.isra.0>
   202c0:	2801      	cmp	r0, #1
   202c2:	f77f aec4 	ble.w	2004e <d_encoding+0x62>
   202c6:	68eb      	ldr	r3, [r5, #12]
   202c8:	781a      	ldrb	r2, [r3, #0]
   202ca:	2a00      	cmp	r2, #0
   202cc:	f43f aebf 	beq.w	2004e <d_encoding+0x62>
   202d0:	1c5f      	adds	r7, r3, #1
   202d2:	60ef      	str	r7, [r5, #12]
   202d4:	781b      	ldrb	r3, [r3, #0]
   202d6:	2b5f      	cmp	r3, #95	; 0x5f
   202d8:	f47f aeb9 	bne.w	2004e <d_encoding+0x62>
   202dc:	2200      	movs	r2, #0
   202de:	1e46      	subs	r6, r0, #1
   202e0:	4690      	mov	r8, r2
   202e2:	f04f 0940 	mov.w	r9, #64	; 0x40
   202e6:	783b      	ldrb	r3, [r7, #0]
   202e8:	2b00      	cmp	r3, #0
   202ea:	f43f aeb0 	beq.w	2004e <d_encoding+0x62>
   202ee:	2b24      	cmp	r3, #36	; 0x24
   202f0:	f000 8128 	beq.w	20544 <d_encoding+0x558>
   202f4:	463c      	mov	r4, r7
   202f6:	2100      	movs	r1, #0
   202f8:	e004      	b.n	20304 <d_encoding+0x318>
   202fa:	f814 3f01 	ldrb.w	r3, [r4, #1]!
   202fe:	b123      	cbz	r3, 2030a <d_encoding+0x31e>
   20300:	2b24      	cmp	r3, #36	; 0x24
   20302:	d002      	beq.n	2030a <d_encoding+0x31e>
   20304:	3101      	adds	r1, #1
   20306:	42b1      	cmp	r1, r6
   20308:	dbf7      	blt.n	202fa <d_encoding+0x30e>
   2030a:	696c      	ldr	r4, [r5, #20]
   2030c:	69a8      	ldr	r0, [r5, #24]
   2030e:	4284      	cmp	r4, r0
   20310:	f280 8113 	bge.w	2053a <d_encoding+0x54e>
   20314:	6928      	ldr	r0, [r5, #16]
   20316:	1c63      	adds	r3, r4, #1
   20318:	eb04 0444 	add.w	r4, r4, r4, lsl #1
   2031c:	616b      	str	r3, [r5, #20]
   2031e:	eb10 0384 	adds.w	r3, r0, r4, lsl #2
   20322:	f000 810a 	beq.w	2053a <d_encoding+0x54e>
   20326:	f800 8024 	strb.w	r8, [r0, r4, lsl #2]
   2032a:	605f      	str	r7, [r3, #4]
   2032c:	6099      	str	r1, [r3, #8]
   2032e:	68ef      	ldr	r7, [r5, #12]
   20330:	440f      	add	r7, r1
   20332:	1a76      	subs	r6, r6, r1
   20334:	60ef      	str	r7, [r5, #12]
   20336:	2a00      	cmp	r2, #0
   20338:	f000 8121 	beq.w	2057e <d_encoding+0x592>
   2033c:	213f      	movs	r1, #63	; 0x3f
   2033e:	4628      	mov	r0, r5
   20340:	f7fd fdac 	bl	1de9c <d_make_comp>
   20344:	4602      	mov	r2, r0
   20346:	2800      	cmp	r0, #0
   20348:	f43f ae81 	beq.w	2004e <d_encoding+0x62>
   2034c:	2e00      	cmp	r6, #0
   2034e:	dcca      	bgt.n	202e6 <d_encoding+0x2fa>
   20350:	4628      	mov	r0, r5
   20352:	2300      	movs	r3, #0
   20354:	213e      	movs	r1, #62	; 0x3e
   20356:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   2035a:	f7fd bd9f 	b.w	1de9c <d_make_comp>
   2035e:	4628      	mov	r0, r5
   20360:	f7fe fe70 	bl	1f044 <d_name>
   20364:	2300      	movs	r3, #0
   20366:	4602      	mov	r2, r0
   20368:	2113      	movs	r1, #19
   2036a:	4628      	mov	r0, r5
   2036c:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   20370:	f7fd bd94 	b.w	1de9c <d_make_comp>
   20374:	789a      	ldrb	r2, [r3, #2]
   20376:	2100      	movs	r1, #0
   20378:	4628      	mov	r0, r5
   2037a:	2a00      	cmp	r2, #0
   2037c:	f000 8101 	beq.w	20582 <d_encoding+0x596>
   20380:	1cda      	adds	r2, r3, #3
   20382:	60ea      	str	r2, [r5, #12]
   20384:	789b      	ldrb	r3, [r3, #2]
   20386:	2b6e      	cmp	r3, #110	; 0x6e
   20388:	f040 80fb 	bne.w	20582 <d_encoding+0x596>
   2038c:	f7ff fe2e 	bl	1ffec <d_encoding>
   20390:	2300      	movs	r3, #0
   20392:	4602      	mov	r2, r0
   20394:	2149      	movs	r1, #73	; 0x49
   20396:	4628      	mov	r0, r5
   20398:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   2039c:	f7fd bd7e 	b.w	1de9c <d_make_comp>
   203a0:	4628      	mov	r0, r5
   203a2:	f7fe fe4f 	bl	1f044 <d_name>
   203a6:	4604      	mov	r4, r0
   203a8:	4628      	mov	r0, r5
   203aa:	f7fd fef3 	bl	1e194 <d_number_component>
   203ae:	4622      	mov	r2, r4
   203b0:	4603      	mov	r3, r0
   203b2:	2116      	movs	r1, #22
   203b4:	4628      	mov	r0, r5
   203b6:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   203ba:	f7fd bd6f 	b.w	1de9c <d_make_comp>
   203be:	2176      	movs	r1, #118	; 0x76
   203c0:	4628      	mov	r0, r5
   203c2:	f7fe f871 	bl	1e4a8 <d_call_offset>
   203c6:	2800      	cmp	r0, #0
   203c8:	f43f ae41 	beq.w	2004e <d_encoding+0x62>
   203cc:	2100      	movs	r1, #0
   203ce:	4628      	mov	r0, r5
   203d0:	f7ff fe0c 	bl	1ffec <d_encoding>
   203d4:	2300      	movs	r3, #0
   203d6:	4602      	mov	r2, r0
   203d8:	2110      	movs	r1, #16
   203da:	4628      	mov	r0, r5
   203dc:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   203e0:	f7fd bd5c 	b.w	1de9c <d_make_comp>
   203e4:	2168      	movs	r1, #104	; 0x68
   203e6:	4628      	mov	r0, r5
   203e8:	f7fe f85e 	bl	1e4a8 <d_call_offset>
   203ec:	2800      	cmp	r0, #0
   203ee:	f43f ae2e 	beq.w	2004e <d_encoding+0x62>
   203f2:	2100      	movs	r1, #0
   203f4:	4628      	mov	r0, r5
   203f6:	f7ff fdf9 	bl	1ffec <d_encoding>
   203fa:	2300      	movs	r3, #0
   203fc:	4602      	mov	r2, r0
   203fe:	210f      	movs	r1, #15
   20400:	4628      	mov	r0, r5
   20402:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   20406:	f7fd bd49 	b.w	1de9c <d_make_comp>
   2040a:	2100      	movs	r1, #0
   2040c:	4628      	mov	r0, r5
   2040e:	f7fe f84b 	bl	1e4a8 <d_call_offset>
   20412:	2800      	cmp	r0, #0
   20414:	f43f ae1b 	beq.w	2004e <d_encoding+0x62>
   20418:	2100      	movs	r1, #0
   2041a:	4628      	mov	r0, r5
   2041c:	f7fe f844 	bl	1e4a8 <d_call_offset>
   20420:	2800      	cmp	r0, #0
   20422:	f43f ae14 	beq.w	2004e <d_encoding+0x62>
   20426:	2100      	movs	r1, #0
   20428:	4628      	mov	r0, r5
   2042a:	f7ff fddf 	bl	1ffec <d_encoding>
   2042e:	2300      	movs	r3, #0
   20430:	4602      	mov	r2, r0
   20432:	2111      	movs	r1, #17
   20434:	4628      	mov	r0, r5
   20436:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   2043a:	f7fd bd2f 	b.w	1de9c <d_make_comp>
   2043e:	4628      	mov	r0, r5
   20440:	f7fe fe00 	bl	1f044 <d_name>
   20444:	2300      	movs	r3, #0
   20446:	4602      	mov	r2, r0
   20448:	2115      	movs	r1, #21
   2044a:	4628      	mov	r0, r5
   2044c:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   20450:	f7fd bd24 	b.w	1de9c <d_make_comp>
   20454:	310f      	adds	r1, #15
   20456:	6329      	str	r1, [r5, #48]	; 0x30
   20458:	4628      	mov	r0, r5
   2045a:	f7fe ffaf 	bl	1f3bc <d_type>
   2045e:	2300      	movs	r3, #0
   20460:	4602      	mov	r2, r0
   20462:	2109      	movs	r1, #9
   20464:	4628      	mov	r0, r5
   20466:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   2046a:	f7fd bd17 	b.w	1de9c <d_make_comp>
   2046e:	310a      	adds	r1, #10
   20470:	6329      	str	r1, [r5, #48]	; 0x30
   20472:	4628      	mov	r0, r5
   20474:	f7fe ffa2 	bl	1f3bc <d_type>
   20478:	2300      	movs	r3, #0
   2047a:	4602      	mov	r2, r0
   2047c:	210a      	movs	r1, #10
   2047e:	4628      	mov	r0, r5
   20480:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   20484:	f7fd bd0a 	b.w	1de9c <d_make_comp>
   20488:	4628      	mov	r0, r5
   2048a:	f7fe ff97 	bl	1f3bc <d_type>
   2048e:	2300      	movs	r3, #0
   20490:	4602      	mov	r2, r0
   20492:	210d      	movs	r1, #13
   20494:	4628      	mov	r0, r5
   20496:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   2049a:	f7fd bcff 	b.w	1de9c <d_make_comp>
   2049e:	4628      	mov	r0, r5
   204a0:	f7fe ff8c 	bl	1f3bc <d_type>
   204a4:	2300      	movs	r3, #0
   204a6:	4602      	mov	r2, r0
   204a8:	2112      	movs	r1, #18
   204aa:	4628      	mov	r0, r5
   204ac:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   204b0:	f7fd bcf4 	b.w	1de9c <d_make_comp>
   204b4:	4628      	mov	r0, r5
   204b6:	f7fe ff81 	bl	1f3bc <d_type>
   204ba:	2300      	movs	r3, #0
   204bc:	4602      	mov	r2, r0
   204be:	210c      	movs	r1, #12
   204c0:	4628      	mov	r0, r5
   204c2:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   204c6:	f7fd bce9 	b.w	1de9c <d_make_comp>
   204ca:	4628      	mov	r0, r5
   204cc:	f7fe fdba 	bl	1f044 <d_name>
   204d0:	2300      	movs	r3, #0
   204d2:	4602      	mov	r2, r0
   204d4:	2114      	movs	r1, #20
   204d6:	4628      	mov	r0, r5
   204d8:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   204dc:	f7fd bcde 	b.w	1de9c <d_make_comp>
   204e0:	4628      	mov	r0, r5
   204e2:	f7fe ff6b 	bl	1f3bc <d_type>
   204e6:	2300      	movs	r3, #0
   204e8:	4602      	mov	r2, r0
   204ea:	210e      	movs	r1, #14
   204ec:	4628      	mov	r0, r5
   204ee:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   204f2:	f7fd bcd3 	b.w	1de9c <d_make_comp>
   204f6:	4628      	mov	r0, r5
   204f8:	f7fe ff60 	bl	1f3bc <d_type>
   204fc:	4604      	mov	r4, r0
   204fe:	f105 000c 	add.w	r0, r5, #12
   20502:	f7fd fe1d 	bl	1e140 <d_number.isra.0>
   20506:	2800      	cmp	r0, #0
   20508:	f6ff ada1 	blt.w	2004e <d_encoding+0x62>
   2050c:	68eb      	ldr	r3, [r5, #12]
   2050e:	781a      	ldrb	r2, [r3, #0]
   20510:	2a5f      	cmp	r2, #95	; 0x5f
   20512:	f47f ad9c 	bne.w	2004e <d_encoding+0x62>
   20516:	3301      	adds	r3, #1
   20518:	60eb      	str	r3, [r5, #12]
   2051a:	4628      	mov	r0, r5
   2051c:	f7fe ff4e 	bl	1f3bc <d_type>
   20520:	6b2b      	ldr	r3, [r5, #48]	; 0x30
   20522:	1d59      	adds	r1, r3, #5
   20524:	6329      	str	r1, [r5, #48]	; 0x30
   20526:	4602      	mov	r2, r0
   20528:	4623      	mov	r3, r4
   2052a:	4628      	mov	r0, r5
   2052c:	210b      	movs	r1, #11
   2052e:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   20532:	f7fd bcb3 	b.w	1de9c <d_make_comp>
   20536:	685b      	ldr	r3, [r3, #4]
   20538:	e574      	b.n	20024 <d_encoding+0x38>
   2053a:	68eb      	ldr	r3, [r5, #12]
   2053c:	440b      	add	r3, r1
   2053e:	60eb      	str	r3, [r5, #12]
   20540:	2400      	movs	r4, #0
   20542:	e585      	b.n	20050 <d_encoding+0x64>
   20544:	787b      	ldrb	r3, [r7, #1]
   20546:	2b53      	cmp	r3, #83	; 0x53
   20548:	d027      	beq.n	2059a <d_encoding+0x5ae>
   2054a:	2b5f      	cmp	r3, #95	; 0x5f
   2054c:	d023      	beq.n	20596 <d_encoding+0x5aa>
   2054e:	2b24      	cmp	r3, #36	; 0x24
   20550:	f47f ad7d 	bne.w	2004e <d_encoding+0x62>
   20554:	4618      	mov	r0, r3
   20556:	6969      	ldr	r1, [r5, #20]
   20558:	69ab      	ldr	r3, [r5, #24]
   2055a:	4299      	cmp	r1, r3
   2055c:	da1f      	bge.n	2059e <d_encoding+0x5b2>
   2055e:	692c      	ldr	r4, [r5, #16]
   20560:	1c4f      	adds	r7, r1, #1
   20562:	eb01 0141 	add.w	r1, r1, r1, lsl #1
   20566:	eb14 0381 	adds.w	r3, r4, r1, lsl #2
   2056a:	616f      	str	r7, [r5, #20]
   2056c:	d017      	beq.n	2059e <d_encoding+0x5b2>
   2056e:	f804 9021 	strb.w	r9, [r4, r1, lsl #2]
   20572:	6058      	str	r0, [r3, #4]
   20574:	68ef      	ldr	r7, [r5, #12]
   20576:	3702      	adds	r7, #2
   20578:	3e02      	subs	r6, #2
   2057a:	60ef      	str	r7, [r5, #12]
   2057c:	e6db      	b.n	20336 <d_encoding+0x34a>
   2057e:	461a      	mov	r2, r3
   20580:	e6e4      	b.n	2034c <d_encoding+0x360>
   20582:	f7ff fd33 	bl	1ffec <d_encoding>
   20586:	2300      	movs	r3, #0
   20588:	4602      	mov	r2, r0
   2058a:	2148      	movs	r1, #72	; 0x48
   2058c:	4628      	mov	r0, r5
   2058e:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   20592:	f7fd bc83 	b.w	1de9c <d_make_comp>
   20596:	202e      	movs	r0, #46	; 0x2e
   20598:	e7dd      	b.n	20556 <d_encoding+0x56a>
   2059a:	202f      	movs	r0, #47	; 0x2f
   2059c:	e7db      	b.n	20556 <d_encoding+0x56a>
   2059e:	68eb      	ldr	r3, [r5, #12]
   205a0:	3302      	adds	r3, #2
   205a2:	60eb      	str	r3, [r5, #12]
   205a4:	2400      	movs	r4, #0
   205a6:	e553      	b.n	20050 <d_encoding+0x64>

000205a8 <d_expr_primary>:
   205a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   205aa:	68c2      	ldr	r2, [r0, #12]
   205ac:	7813      	ldrb	r3, [r2, #0]
   205ae:	2b4c      	cmp	r3, #76	; 0x4c
   205b0:	d001      	beq.n	205b6 <d_expr_primary+0xe>
   205b2:	2000      	movs	r0, #0
   205b4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   205b6:	1c53      	adds	r3, r2, #1
   205b8:	60c3      	str	r3, [r0, #12]
   205ba:	7851      	ldrb	r1, [r2, #1]
   205bc:	295f      	cmp	r1, #95	; 0x5f
   205be:	4605      	mov	r5, r0
   205c0:	d03a      	beq.n	20638 <d_expr_primary+0x90>
   205c2:	295a      	cmp	r1, #90	; 0x5a
   205c4:	d03f      	beq.n	20646 <d_expr_primary+0x9e>
   205c6:	f7fe fef9 	bl	1f3bc <d_type>
   205ca:	2800      	cmp	r0, #0
   205cc:	d0f1      	beq.n	205b2 <d_expr_primary+0xa>
   205ce:	7803      	ldrb	r3, [r0, #0]
   205d0:	2b27      	cmp	r3, #39	; 0x27
   205d2:	d046      	beq.n	20662 <d_expr_primary+0xba>
   205d4:	68ee      	ldr	r6, [r5, #12]
   205d6:	7833      	ldrb	r3, [r6, #0]
   205d8:	2b6e      	cmp	r3, #110	; 0x6e
   205da:	d04b      	beq.n	20674 <d_expr_primary+0xcc>
   205dc:	213c      	movs	r1, #60	; 0x3c
   205de:	2b45      	cmp	r3, #69	; 0x45
   205e0:	d04e      	beq.n	20680 <d_expr_primary+0xd8>
   205e2:	2b00      	cmp	r3, #0
   205e4:	d0e5      	beq.n	205b2 <d_expr_primary+0xa>
   205e6:	4633      	mov	r3, r6
   205e8:	e001      	b.n	205ee <d_expr_primary+0x46>
   205ea:	2c00      	cmp	r4, #0
   205ec:	d0e1      	beq.n	205b2 <d_expr_primary+0xa>
   205ee:	3301      	adds	r3, #1
   205f0:	60eb      	str	r3, [r5, #12]
   205f2:	781c      	ldrb	r4, [r3, #0]
   205f4:	2c45      	cmp	r4, #69	; 0x45
   205f6:	d1f8      	bne.n	205ea <d_expr_primary+0x42>
   205f8:	1b9c      	subs	r4, r3, r6
   205fa:	696b      	ldr	r3, [r5, #20]
   205fc:	69aa      	ldr	r2, [r5, #24]
   205fe:	4293      	cmp	r3, r2
   20600:	da2d      	bge.n	2065e <d_expr_primary+0xb6>
   20602:	eb03 0243 	add.w	r2, r3, r3, lsl #1
   20606:	692f      	ldr	r7, [r5, #16]
   20608:	3301      	adds	r3, #1
   2060a:	0092      	lsls	r2, r2, #2
   2060c:	616b      	str	r3, [r5, #20]
   2060e:	18bb      	adds	r3, r7, r2
   20610:	d025      	beq.n	2065e <d_expr_primary+0xb6>
   20612:	b326      	cbz	r6, 2065e <d_expr_primary+0xb6>
   20614:	b31c      	cbz	r4, 2065e <d_expr_primary+0xb6>
   20616:	f04f 0e00 	mov.w	lr, #0
   2061a:	f807 e002 	strb.w	lr, [r7, r2]
   2061e:	605e      	str	r6, [r3, #4]
   20620:	609c      	str	r4, [r3, #8]
   20622:	4602      	mov	r2, r0
   20624:	4628      	mov	r0, r5
   20626:	f7fd fc39 	bl	1de9c <d_make_comp>
   2062a:	68eb      	ldr	r3, [r5, #12]
   2062c:	781a      	ldrb	r2, [r3, #0]
   2062e:	2a45      	cmp	r2, #69	; 0x45
   20630:	d1bf      	bne.n	205b2 <d_expr_primary+0xa>
   20632:	3301      	adds	r3, #1
   20634:	60eb      	str	r3, [r5, #12]
   20636:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   20638:	1c93      	adds	r3, r2, #2
   2063a:	60c3      	str	r3, [r0, #12]
   2063c:	7892      	ldrb	r2, [r2, #2]
   2063e:	2a5a      	cmp	r2, #90	; 0x5a
   20640:	bf18      	it	ne
   20642:	2000      	movne	r0, #0
   20644:	d107      	bne.n	20656 <d_expr_primary+0xae>
   20646:	3301      	adds	r3, #1
   20648:	60eb      	str	r3, [r5, #12]
   2064a:	2100      	movs	r1, #0
   2064c:	4628      	mov	r0, r5
   2064e:	f7ff fccd 	bl	1ffec <d_encoding>
   20652:	68eb      	ldr	r3, [r5, #12]
   20654:	781a      	ldrb	r2, [r3, #0]
   20656:	2a45      	cmp	r2, #69	; 0x45
   20658:	d0eb      	beq.n	20632 <d_expr_primary+0x8a>
   2065a:	2000      	movs	r0, #0
   2065c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   2065e:	2300      	movs	r3, #0
   20660:	e7df      	b.n	20622 <d_expr_primary+0x7a>
   20662:	6843      	ldr	r3, [r0, #4]
   20664:	7c1a      	ldrb	r2, [r3, #16]
   20666:	2a00      	cmp	r2, #0
   20668:	d0b4      	beq.n	205d4 <d_expr_primary+0x2c>
   2066a:	685a      	ldr	r2, [r3, #4]
   2066c:	6b2b      	ldr	r3, [r5, #48]	; 0x30
   2066e:	1a9b      	subs	r3, r3, r2
   20670:	632b      	str	r3, [r5, #48]	; 0x30
   20672:	e7af      	b.n	205d4 <d_expr_primary+0x2c>
   20674:	1c72      	adds	r2, r6, #1
   20676:	60ea      	str	r2, [r5, #12]
   20678:	7873      	ldrb	r3, [r6, #1]
   2067a:	213d      	movs	r1, #61	; 0x3d
   2067c:	4616      	mov	r6, r2
   2067e:	e7ae      	b.n	205de <d_expr_primary+0x36>
   20680:	2400      	movs	r4, #0
   20682:	e7ba      	b.n	205fa <d_expr_primary+0x52>

00020684 <d_print_comp_inner>:
   20684:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   20688:	4604      	mov	r4, r0
   2068a:	b095      	sub	sp, #84	; 0x54
   2068c:	2a00      	cmp	r2, #0
   2068e:	f000 80db 	beq.w	20848 <d_print_comp_inner+0x1c4>
   20692:	f8d0 7118 	ldr.w	r7, [r0, #280]	; 0x118
   20696:	2f00      	cmp	r7, #0
   20698:	f040 80c2 	bne.w	20820 <d_print_comp_inner+0x19c>
   2069c:	7813      	ldrb	r3, [r2, #0]
   2069e:	4688      	mov	r8, r1
   206a0:	4615      	mov	r5, r2
   206a2:	2b4d      	cmp	r3, #77	; 0x4d
   206a4:	f201 81e6 	bhi.w	21a74 <d_print_comp_inner+0x13f0>
   206a8:	e8df f013 	tbh	[pc, r3, lsl #1]
   206ac:	043c045a 	.word	0x043c045a
   206b0:	03a4043c 	.word	0x03a4043c
   206b4:	048904a5 	.word	0x048904a5
   206b8:	038e04ea 	.word	0x038e04ea
   206bc:	0330037c 	.word	0x0330037c
   206c0:	030a0356 	.word	0x030a0356
   206c4:	029802e4 	.word	0x029802e4
   206c8:	027202be 	.word	0x027202be
   206cc:	01f0024c 	.word	0x01f0024c
   206d0:	01ca0226 	.word	0x01ca0226
   206d4:	015801a4 	.word	0x015801a4
   206d8:	0132017e 	.word	0x0132017e
   206dc:	00f2010b 	.word	0x00f2010b
   206e0:	00f200f2 	.word	0x00f200f2
   206e4:	00d400d4 	.word	0x00d400d4
   206e8:	00d400d4 	.word	0x00d400d4
   206ec:	00d400d4 	.word	0x00d400d4
   206f0:	06d500d4 	.word	0x06d500d4
   206f4:	00d406d5 	.word	0x00d406d5
   206f8:	06a900d4 	.word	0x06a900d4
   206fc:	069306fc 	.word	0x069306fc
   20700:	0701071d 	.word	0x0701071d
   20704:	07010788 	.word	0x07010788
   20708:	057b057b 	.word	0x057b057b
   2070c:	06060630 	.word	0x06060630
   20710:	09e405e0 	.word	0x09e405e0
   20714:	068e05ad 	.word	0x068e05ad
   20718:	004e0654 	.word	0x004e0654
   2071c:	094c0485 	.word	0x094c0485
   20720:	08df08df 	.word	0x08df08df
   20724:	08ae08ae 	.word	0x08ae08ae
   20728:	05480888 	.word	0x05480888
   2072c:	08e4053a 	.word	0x08e4053a
   20730:	09be0514 	.word	0x09be0514
   20734:	09980914 	.word	0x09980914
   20738:	07cb09e4 	.word	0x07cb09e4
   2073c:	07f10862 	.word	0x07f10862
   20740:	04130817 	.word	0x04130817
   20744:	055200d4 	.word	0x055200d4
   20748:	68ab      	ldr	r3, [r5, #8]
   2074a:	781b      	ldrb	r3, [r3, #0]
   2074c:	2b38      	cmp	r3, #56	; 0x38
   2074e:	d17b      	bne.n	20848 <d_print_comp_inner+0x1c4>
   20750:	686a      	ldr	r2, [r5, #4]
   20752:	6853      	ldr	r3, [r2, #4]
   20754:	681b      	ldr	r3, [r3, #0]
   20756:	7859      	ldrb	r1, [r3, #1]
   20758:	2963      	cmp	r1, #99	; 0x63
   2075a:	f002 814a 	beq.w	229f2 <d_print_comp_inner+0x236e>
   2075e:	f105 0308 	add.w	r3, r5, #8
   20762:	4641      	mov	r1, r8
   20764:	4620      	mov	r0, r4
   20766:	f003 fbbb 	bl	23ee0 <d_maybe_print_fold_expression.isra.15>
   2076a:	4606      	mov	r6, r0
   2076c:	2800      	cmp	r0, #0
   2076e:	d157      	bne.n	20820 <d_print_comp_inner+0x19c>
   20770:	686b      	ldr	r3, [r5, #4]
   20772:	781a      	ldrb	r2, [r3, #0]
   20774:	2a31      	cmp	r2, #49	; 0x31
   20776:	f002 836b 	beq.w	22e50 <d_print_comp_inner+0x27cc>
   2077a:	685b      	ldr	r3, [r3, #4]
   2077c:	49c7      	ldr	r1, [pc, #796]	; (20a9c <d_print_comp_inner+0x418>)
   2077e:	6818      	ldr	r0, [r3, #0]
   20780:	f007 fea2 	bl	284c8 <strcmp>
   20784:	68ab      	ldr	r3, [r5, #8]
   20786:	b920      	cbnz	r0, 20792 <d_print_comp_inner+0x10e>
   20788:	685a      	ldr	r2, [r3, #4]
   2078a:	7811      	ldrb	r1, [r2, #0]
   2078c:	2903      	cmp	r1, #3
   2078e:	f002 83a5 	beq.w	22edc <d_print_comp_inner+0x2858>
   20792:	685a      	ldr	r2, [r3, #4]
   20794:	4641      	mov	r1, r8
   20796:	4620      	mov	r0, r4
   20798:	f003 fb3e 	bl	23e18 <d_print_subexpr>
   2079c:	686f      	ldr	r7, [r5, #4]
   2079e:	49c0      	ldr	r1, [pc, #768]	; (20aa0 <d_print_comp_inner+0x41c>)
   207a0:	687b      	ldr	r3, [r7, #4]
   207a2:	f8d3 9000 	ldr.w	r9, [r3]
   207a6:	4648      	mov	r0, r9
   207a8:	f007 fe8e 	bl	284c8 <strcmp>
   207ac:	4606      	mov	r6, r0
   207ae:	2800      	cmp	r0, #0
   207b0:	f042 826f 	bne.w	22c92 <d_print_comp_inner+0x260e>
   207b4:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
   207b8:	29ff      	cmp	r1, #255	; 0xff
   207ba:	f002 844a 	beq.w	23052 <d_print_comp_inner+0x29ce>
   207be:	1c4a      	adds	r2, r1, #1
   207c0:	235b      	movs	r3, #91	; 0x5b
   207c2:	f8c4 2100 	str.w	r2, [r4, #256]	; 0x100
   207c6:	5463      	strb	r3, [r4, r1]
   207c8:	f884 3104 	strb.w	r3, [r4, #260]	; 0x104
   207cc:	68ab      	ldr	r3, [r5, #8]
   207ce:	4641      	mov	r1, r8
   207d0:	689a      	ldr	r2, [r3, #8]
   207d2:	4620      	mov	r0, r4
   207d4:	f002 fcfa 	bl	231cc <d_print_comp>
   207d8:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
   207dc:	29ff      	cmp	r1, #255	; 0xff
   207de:	f002 8425 	beq.w	2302c <d_print_comp_inner+0x29a8>
   207e2:	235d      	movs	r3, #93	; 0x5d
   207e4:	1c4a      	adds	r2, r1, #1
   207e6:	f8c4 2100 	str.w	r2, [r4, #256]	; 0x100
   207ea:	5463      	strb	r3, [r4, r1]
   207ec:	f884 3104 	strb.w	r3, [r4, #260]	; 0x104
   207f0:	686b      	ldr	r3, [r5, #4]
   207f2:	781a      	ldrb	r2, [r3, #0]
   207f4:	2a31      	cmp	r2, #49	; 0x31
   207f6:	d113      	bne.n	20820 <d_print_comp_inner+0x19c>
   207f8:	685b      	ldr	r3, [r3, #4]
   207fa:	689a      	ldr	r2, [r3, #8]
   207fc:	2a01      	cmp	r2, #1
   207fe:	d10f      	bne.n	20820 <d_print_comp_inner+0x19c>
   20800:	685b      	ldr	r3, [r3, #4]
   20802:	781b      	ldrb	r3, [r3, #0]
   20804:	2b3e      	cmp	r3, #62	; 0x3e
   20806:	d10b      	bne.n	20820 <d_print_comp_inner+0x19c>
   20808:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
   2080c:	29ff      	cmp	r1, #255	; 0xff
   2080e:	f002 8482 	beq.w	23116 <d_print_comp_inner+0x2a92>
   20812:	2329      	movs	r3, #41	; 0x29
   20814:	1c4a      	adds	r2, r1, #1
   20816:	f8c4 2100 	str.w	r2, [r4, #256]	; 0x100
   2081a:	5463      	strb	r3, [r4, r1]
   2081c:	f884 3104 	strb.w	r3, [r4, #260]	; 0x104
   20820:	b015      	add	sp, #84	; 0x54
   20822:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   20826:	f8d4 3120 	ldr.w	r3, [r4, #288]	; 0x120
   2082a:	2b00      	cmp	r3, #0
   2082c:	f2c1 84a4 	blt.w	22178 <d_print_comp_inner+0x1af4>
   20830:	2b00      	cmp	r3, #0
   20832:	f002 8432 	beq.w	2309a <d_print_comp_inner+0x2a16>
   20836:	6880      	ldr	r0, [r0, #8]
   20838:	3b01      	subs	r3, #1
   2083a:	b110      	cbz	r0, 20842 <d_print_comp_inner+0x1be>
   2083c:	7802      	ldrb	r2, [r0, #0]
   2083e:	2a2f      	cmp	r2, #47	; 0x2f
   20840:	d0f6      	beq.n	20830 <d_print_comp_inner+0x1ac>
   20842:	b10f      	cbz	r7, 20848 <d_print_comp_inner+0x1c4>
   20844:	f8c4 6110 	str.w	r6, [r4, #272]	; 0x110
   20848:	2301      	movs	r3, #1
   2084a:	f8c4 3118 	str.w	r3, [r4, #280]	; 0x118
   2084e:	b015      	add	sp, #84	; 0x54
   20850:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   20854:	f8d4 c114 	ldr.w	ip, [r4, #276]	; 0x114
   20858:	f8d4 2110 	ldr.w	r2, [r4, #272]	; 0x110
   2085c:	9505      	str	r5, [sp, #20]
   2085e:	ab14      	add	r3, sp, #80	; 0x50
   20860:	2100      	movs	r1, #0
   20862:	f843 cd40 	str.w	ip, [r3, #-64]!
   20866:	9106      	str	r1, [sp, #24]
   20868:	f8c4 3114 	str.w	r3, [r4, #276]	; 0x114
   2086c:	9207      	str	r2, [sp, #28]
   2086e:	686a      	ldr	r2, [r5, #4]
   20870:	4641      	mov	r1, r8
   20872:	4620      	mov	r0, r4
   20874:	f002 fcaa 	bl	231cc <d_print_comp>
   20878:	9b06      	ldr	r3, [sp, #24]
   2087a:	2b00      	cmp	r3, #0
   2087c:	f001 8389 	beq.w	21f92 <d_print_comp_inner+0x190e>
   20880:	9b04      	ldr	r3, [sp, #16]
   20882:	f8c4 3114 	str.w	r3, [r4, #276]	; 0x114
   20886:	2f00      	cmp	r7, #0
   20888:	d0ca      	beq.n	20820 <d_print_comp_inner+0x19c>
   2088a:	f8c4 6110 	str.w	r6, [r4, #272]	; 0x110
   2088e:	e7c7      	b.n	20820 <d_print_comp_inner+0x19c>
   20890:	f8d0 c114 	ldr.w	ip, [r0, #276]	; 0x114
   20894:	f1bc 0f00 	cmp.w	ip, #0
   20898:	d0de      	beq.n	20858 <d_print_comp_inner+0x1d4>
   2089a:	4662      	mov	r2, ip
   2089c:	e005      	b.n	208aa <d_print_comp_inner+0x226>
   2089e:	428b      	cmp	r3, r1
   208a0:	f001 86b8 	beq.w	22614 <d_print_comp_inner+0x1f90>
   208a4:	6812      	ldr	r2, [r2, #0]
   208a6:	2a00      	cmp	r2, #0
   208a8:	d0d6      	beq.n	20858 <d_print_comp_inner+0x1d4>
   208aa:	6890      	ldr	r0, [r2, #8]
   208ac:	2800      	cmp	r0, #0
   208ae:	d1f9      	bne.n	208a4 <d_print_comp_inner+0x220>
   208b0:	6851      	ldr	r1, [r2, #4]
   208b2:	7809      	ldrb	r1, [r1, #0]
   208b4:	f1a1 0e19 	sub.w	lr, r1, #25
   208b8:	f1be 0f02 	cmp.w	lr, #2
   208bc:	d9ef      	bls.n	2089e <d_print_comp_inner+0x21a>
   208be:	4607      	mov	r7, r0
   208c0:	e7ca      	b.n	20858 <d_print_comp_inner+0x1d4>
   208c2:	68af      	ldr	r7, [r5, #8]
   208c4:	686d      	ldr	r5, [r5, #4]
   208c6:	2f00      	cmp	r7, #0
   208c8:	d0aa      	beq.n	20820 <d_print_comp_inner+0x19c>
   208ca:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
   208ce:	442f      	add	r7, r5
   208d0:	f04f 0800 	mov.w	r8, #0
   208d4:	e008      	b.n	208e8 <d_print_comp_inner+0x264>
   208d6:	460b      	mov	r3, r1
   208d8:	3101      	adds	r1, #1
   208da:	42bd      	cmp	r5, r7
   208dc:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
   208e0:	54e6      	strb	r6, [r4, r3]
   208e2:	f884 6104 	strb.w	r6, [r4, #260]	; 0x104
   208e6:	d09b      	beq.n	20820 <d_print_comp_inner+0x19c>
   208e8:	29ff      	cmp	r1, #255	; 0xff
   208ea:	f815 6b01 	ldrb.w	r6, [r5], #1
   208ee:	d1f2      	bne.n	208d6 <d_print_comp_inner+0x252>
   208f0:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   208f4:	f884 80ff 	strb.w	r8, [r4, #255]	; 0xff
   208f8:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
   208fc:	4620      	mov	r0, r4
   208fe:	4798      	blx	r3
   20900:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   20904:	3301      	adds	r3, #1
   20906:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
   2090a:	2101      	movs	r1, #1
   2090c:	2300      	movs	r3, #0
   2090e:	e7e4      	b.n	208da <d_print_comp_inner+0x256>
   20910:	4e64      	ldr	r6, [pc, #400]	; (20aa4 <d_print_comp_inner+0x420>)
   20912:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
   20916:	f106 0a11 	add.w	sl, r6, #17
   2091a:	f04f 0900 	mov.w	r9, #0
   2091e:	e009      	b.n	20934 <d_print_comp_inner+0x2b0>
   20920:	460b      	mov	r3, r1
   20922:	3101      	adds	r1, #1
   20924:	4556      	cmp	r6, sl
   20926:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
   2092a:	54e7      	strb	r7, [r4, r3]
   2092c:	f884 7104 	strb.w	r7, [r4, #260]	; 0x104
   20930:	f001 8296 	beq.w	21e60 <d_print_comp_inner+0x17dc>
   20934:	29ff      	cmp	r1, #255	; 0xff
   20936:	f816 7f01 	ldrb.w	r7, [r6, #1]!
   2093a:	d1f1      	bne.n	20920 <d_print_comp_inner+0x29c>
   2093c:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   20940:	f884 90ff 	strb.w	r9, [r4, #255]	; 0xff
   20944:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
   20948:	4620      	mov	r0, r4
   2094a:	4798      	blx	r3
   2094c:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   20950:	3301      	adds	r3, #1
   20952:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
   20956:	2101      	movs	r1, #1
   20958:	2300      	movs	r3, #0
   2095a:	e7e3      	b.n	20924 <d_print_comp_inner+0x2a0>
   2095c:	4e52      	ldr	r6, [pc, #328]	; (20aa8 <d_print_comp_inner+0x424>)
   2095e:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
   20962:	f106 0a19 	add.w	sl, r6, #25
   20966:	f04f 0900 	mov.w	r9, #0
   2096a:	e009      	b.n	20980 <d_print_comp_inner+0x2fc>
   2096c:	460b      	mov	r3, r1
   2096e:	3101      	adds	r1, #1
   20970:	4556      	cmp	r6, sl
   20972:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
   20976:	54e7      	strb	r7, [r4, r3]
   20978:	f884 7104 	strb.w	r7, [r4, #260]	; 0x104
   2097c:	f001 82a8 	beq.w	21ed0 <d_print_comp_inner+0x184c>
   20980:	29ff      	cmp	r1, #255	; 0xff
   20982:	f816 7f01 	ldrb.w	r7, [r6, #1]!
   20986:	d1f1      	bne.n	2096c <d_print_comp_inner+0x2e8>
   20988:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   2098c:	f884 90ff 	strb.w	r9, [r4, #255]	; 0xff
   20990:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
   20994:	4620      	mov	r0, r4
   20996:	4798      	blx	r3
   20998:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   2099c:	3301      	adds	r3, #1
   2099e:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
   209a2:	2101      	movs	r1, #1
   209a4:	2300      	movs	r3, #0
   209a6:	e7e3      	b.n	20970 <d_print_comp_inner+0x2ec>
   209a8:	4e40      	ldr	r6, [pc, #256]	; (20aac <d_print_comp_inner+0x428>)
   209aa:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
   209ae:	f106 0a15 	add.w	sl, r6, #21
   209b2:	f04f 0900 	mov.w	r9, #0
   209b6:	e009      	b.n	209cc <d_print_comp_inner+0x348>
   209b8:	460b      	mov	r3, r1
   209ba:	3101      	adds	r1, #1
   209bc:	4556      	cmp	r6, sl
   209be:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
   209c2:	54e7      	strb	r7, [r4, r3]
   209c4:	f884 7104 	strb.w	r7, [r4, #260]	; 0x104
   209c8:	f001 8251 	beq.w	21e6e <d_print_comp_inner+0x17ea>
   209cc:	29ff      	cmp	r1, #255	; 0xff
   209ce:	f816 7f01 	ldrb.w	r7, [r6, #1]!
   209d2:	d1f1      	bne.n	209b8 <d_print_comp_inner+0x334>
   209d4:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   209d8:	f884 90ff 	strb.w	r9, [r4, #255]	; 0xff
   209dc:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
   209e0:	4620      	mov	r0, r4
   209e2:	4798      	blx	r3
   209e4:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   209e8:	3301      	adds	r3, #1
   209ea:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
   209ee:	2101      	movs	r1, #1
   209f0:	2300      	movs	r3, #0
   209f2:	e7e3      	b.n	209bc <d_print_comp_inner+0x338>
   209f4:	4e2e      	ldr	r6, [pc, #184]	; (20ab0 <d_print_comp_inner+0x42c>)
   209f6:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
   209fa:	f106 0a16 	add.w	sl, r6, #22
   209fe:	f04f 0900 	mov.w	r9, #0
   20a02:	e009      	b.n	20a18 <d_print_comp_inner+0x394>
   20a04:	460b      	mov	r3, r1
   20a06:	3101      	adds	r1, #1
   20a08:	4556      	cmp	r6, sl
   20a0a:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
   20a0e:	54e7      	strb	r7, [r4, r3]
   20a10:	f884 7104 	strb.w	r7, [r4, #260]	; 0x104
   20a14:	f001 8263 	beq.w	21ede <d_print_comp_inner+0x185a>
   20a18:	29ff      	cmp	r1, #255	; 0xff
   20a1a:	f816 7f01 	ldrb.w	r7, [r6, #1]!
   20a1e:	d1f1      	bne.n	20a04 <d_print_comp_inner+0x380>
   20a20:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   20a24:	f884 90ff 	strb.w	r9, [r4, #255]	; 0xff
   20a28:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
   20a2c:	4620      	mov	r0, r4
   20a2e:	4798      	blx	r3
   20a30:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   20a34:	3301      	adds	r3, #1
   20a36:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
   20a3a:	2101      	movs	r1, #1
   20a3c:	2300      	movs	r3, #0
   20a3e:	e7e3      	b.n	20a08 <d_print_comp_inner+0x384>
   20a40:	4e1c      	ldr	r6, [pc, #112]	; (20ab4 <d_print_comp_inner+0x430>)
   20a42:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
   20a46:	f106 0a13 	add.w	sl, r6, #19
   20a4a:	f04f 0900 	mov.w	r9, #0
   20a4e:	e009      	b.n	20a64 <d_print_comp_inner+0x3e0>
   20a50:	460b      	mov	r3, r1
   20a52:	3101      	adds	r1, #1
   20a54:	45b2      	cmp	sl, r6
   20a56:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
   20a5a:	54e7      	strb	r7, [r4, r3]
   20a5c:	f884 7104 	strb.w	r7, [r4, #260]	; 0x104
   20a60:	f001 8077 	beq.w	21b52 <d_print_comp_inner+0x14ce>
   20a64:	29ff      	cmp	r1, #255	; 0xff
   20a66:	f816 7f01 	ldrb.w	r7, [r6, #1]!
   20a6a:	d1f1      	bne.n	20a50 <d_print_comp_inner+0x3cc>
   20a6c:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   20a70:	f884 90ff 	strb.w	r9, [r4, #255]	; 0xff
   20a74:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
   20a78:	4620      	mov	r0, r4
   20a7a:	4798      	blx	r3
   20a7c:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   20a80:	3301      	adds	r3, #1
   20a82:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
   20a86:	2101      	movs	r1, #1
   20a88:	2300      	movs	r3, #0
   20a8a:	e7e3      	b.n	20a54 <d_print_comp_inner+0x3d0>
   20a8c:	4e0a      	ldr	r6, [pc, #40]	; (20ab8 <d_print_comp_inner+0x434>)
   20a8e:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
   20a92:	f106 0a1a 	add.w	sl, r6, #26
   20a96:	f04f 0900 	mov.w	r9, #0
   20a9a:	e019      	b.n	20ad0 <d_print_comp_inner+0x44c>
   20a9c:	0002e588 	.word	0x0002e588
   20aa0:	0002e784 	.word	0x0002e784
   20aa4:	0002e713 	.word	0x0002e713
   20aa8:	0002e6df 	.word	0x0002e6df
   20aac:	0002e6fb 	.word	0x0002e6fb
   20ab0:	0002e6c7 	.word	0x0002e6c7
   20ab4:	0002e6b3 	.word	0x0002e6b3
   20ab8:	0002e687 	.word	0x0002e687
   20abc:	460b      	mov	r3, r1
   20abe:	3101      	adds	r1, #1
   20ac0:	4556      	cmp	r6, sl
   20ac2:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
   20ac6:	54e7      	strb	r7, [r4, r3]
   20ac8:	f884 7104 	strb.w	r7, [r4, #260]	; 0x104
   20acc:	f001 804f 	beq.w	21b6e <d_print_comp_inner+0x14ea>
   20ad0:	29ff      	cmp	r1, #255	; 0xff
   20ad2:	f816 7f01 	ldrb.w	r7, [r6, #1]!
   20ad6:	d1f1      	bne.n	20abc <d_print_comp_inner+0x438>
   20ad8:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   20adc:	f884 90ff 	strb.w	r9, [r4, #255]	; 0xff
   20ae0:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
   20ae4:	4620      	mov	r0, r4
   20ae6:	4798      	blx	r3
   20ae8:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   20aec:	3301      	adds	r3, #1
   20aee:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
   20af2:	2101      	movs	r1, #1
   20af4:	2300      	movs	r3, #0
   20af6:	e7e3      	b.n	20ac0 <d_print_comp_inner+0x43c>
   20af8:	4eb5      	ldr	r6, [pc, #724]	; (20dd0 <d_print_comp_inner+0x74c>)
   20afa:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
   20afe:	f106 0a0f 	add.w	sl, r6, #15
   20b02:	f04f 0900 	mov.w	r9, #0
   20b06:	e009      	b.n	20b1c <d_print_comp_inner+0x498>
   20b08:	460b      	mov	r3, r1
   20b0a:	3101      	adds	r1, #1
   20b0c:	4556      	cmp	r6, sl
   20b0e:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
   20b12:	54e7      	strb	r7, [r4, r3]
   20b14:	f884 7104 	strb.w	r7, [r4, #260]	; 0x104
   20b18:	f001 8022 	beq.w	21b60 <d_print_comp_inner+0x14dc>
   20b1c:	29ff      	cmp	r1, #255	; 0xff
   20b1e:	f816 7f01 	ldrb.w	r7, [r6, #1]!
   20b22:	d1f1      	bne.n	20b08 <d_print_comp_inner+0x484>
   20b24:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   20b28:	f884 90ff 	strb.w	r9, [r4, #255]	; 0xff
   20b2c:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
   20b30:	4620      	mov	r0, r4
   20b32:	4798      	blx	r3
   20b34:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   20b38:	3301      	adds	r3, #1
   20b3a:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
   20b3e:	2101      	movs	r1, #1
   20b40:	2300      	movs	r3, #0
   20b42:	e7e3      	b.n	20b0c <d_print_comp_inner+0x488>
   20b44:	4ea3      	ldr	r6, [pc, #652]	; (20dd4 <d_print_comp_inner+0x750>)
   20b46:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
   20b4a:	f106 0a11 	add.w	sl, r6, #17
   20b4e:	f04f 0900 	mov.w	r9, #0
   20b52:	e009      	b.n	20b68 <d_print_comp_inner+0x4e4>
   20b54:	460b      	mov	r3, r1
   20b56:	3101      	adds	r1, #1
   20b58:	4556      	cmp	r6, sl
   20b5a:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
   20b5e:	54e7      	strb	r7, [r4, r3]
   20b60:	f884 7104 	strb.w	r7, [r4, #260]	; 0x104
   20b64:	f001 800a 	beq.w	21b7c <d_print_comp_inner+0x14f8>
   20b68:	29ff      	cmp	r1, #255	; 0xff
   20b6a:	f816 7f01 	ldrb.w	r7, [r6, #1]!
   20b6e:	d1f1      	bne.n	20b54 <d_print_comp_inner+0x4d0>
   20b70:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   20b74:	f884 90ff 	strb.w	r9, [r4, #255]	; 0xff
   20b78:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
   20b7c:	4620      	mov	r0, r4
   20b7e:	4798      	blx	r3
   20b80:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   20b84:	3301      	adds	r3, #1
   20b86:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
   20b8a:	2101      	movs	r1, #1
   20b8c:	2300      	movs	r3, #0
   20b8e:	e7e3      	b.n	20b58 <d_print_comp_inner+0x4d4>
   20b90:	4e91      	ldr	r6, [pc, #580]	; (20dd8 <d_print_comp_inner+0x754>)
   20b92:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
   20b96:	f106 0a15 	add.w	sl, r6, #21
   20b9a:	f04f 0900 	mov.w	r9, #0
   20b9e:	e009      	b.n	20bb4 <d_print_comp_inner+0x530>
   20ba0:	460b      	mov	r3, r1
   20ba2:	3101      	adds	r1, #1
   20ba4:	4556      	cmp	r6, sl
   20ba6:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
   20baa:	54e7      	strb	r7, [r4, r3]
   20bac:	f884 7104 	strb.w	r7, [r4, #260]	; 0x104
   20bb0:	f000 87b3 	beq.w	21b1a <d_print_comp_inner+0x1496>
   20bb4:	29ff      	cmp	r1, #255	; 0xff
   20bb6:	f816 7f01 	ldrb.w	r7, [r6, #1]!
   20bba:	d1f1      	bne.n	20ba0 <d_print_comp_inner+0x51c>
   20bbc:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   20bc0:	f884 90ff 	strb.w	r9, [r4, #255]	; 0xff
   20bc4:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
   20bc8:	4620      	mov	r0, r4
   20bca:	4798      	blx	r3
   20bcc:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   20bd0:	3301      	adds	r3, #1
   20bd2:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
   20bd6:	2101      	movs	r1, #1
   20bd8:	2300      	movs	r3, #0
   20bda:	e7e3      	b.n	20ba4 <d_print_comp_inner+0x520>
   20bdc:	4e7f      	ldr	r6, [pc, #508]	; (20ddc <d_print_comp_inner+0x758>)
   20bde:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
   20be2:	f106 0a12 	add.w	sl, r6, #18
   20be6:	f04f 0900 	mov.w	r9, #0
   20bea:	e009      	b.n	20c00 <d_print_comp_inner+0x57c>
   20bec:	460b      	mov	r3, r1
   20bee:	3101      	adds	r1, #1
   20bf0:	45b2      	cmp	sl, r6
   20bf2:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
   20bf6:	54e7      	strb	r7, [r4, r3]
   20bf8:	f884 7104 	strb.w	r7, [r4, #260]	; 0x104
   20bfc:	f000 879b 	beq.w	21b36 <d_print_comp_inner+0x14b2>
   20c00:	29ff      	cmp	r1, #255	; 0xff
   20c02:	f816 7f01 	ldrb.w	r7, [r6, #1]!
   20c06:	d1f1      	bne.n	20bec <d_print_comp_inner+0x568>
   20c08:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   20c0c:	f884 90ff 	strb.w	r9, [r4, #255]	; 0xff
   20c10:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
   20c14:	4620      	mov	r0, r4
   20c16:	4798      	blx	r3
   20c18:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   20c1c:	3301      	adds	r3, #1
   20c1e:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
   20c22:	2101      	movs	r1, #1
   20c24:	2300      	movs	r3, #0
   20c26:	e7e3      	b.n	20bf0 <d_print_comp_inner+0x56c>
   20c28:	4e6d      	ldr	r6, [pc, #436]	; (20de0 <d_print_comp_inner+0x75c>)
   20c2a:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
   20c2e:	f106 0a10 	add.w	sl, r6, #16
   20c32:	f04f 0900 	mov.w	r9, #0
   20c36:	e009      	b.n	20c4c <d_print_comp_inner+0x5c8>
   20c38:	460b      	mov	r3, r1
   20c3a:	3101      	adds	r1, #1
   20c3c:	4556      	cmp	r6, sl
   20c3e:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
   20c42:	54e7      	strb	r7, [r4, r3]
   20c44:	f884 7104 	strb.w	r7, [r4, #260]	; 0x104
   20c48:	f000 876e 	beq.w	21b28 <d_print_comp_inner+0x14a4>
   20c4c:	29ff      	cmp	r1, #255	; 0xff
   20c4e:	f816 7f01 	ldrb.w	r7, [r6, #1]!
   20c52:	d1f1      	bne.n	20c38 <d_print_comp_inner+0x5b4>
   20c54:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   20c58:	f884 90ff 	strb.w	r9, [r4, #255]	; 0xff
   20c5c:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
   20c60:	4620      	mov	r0, r4
   20c62:	4798      	blx	r3
   20c64:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   20c68:	3301      	adds	r3, #1
   20c6a:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
   20c6e:	2101      	movs	r1, #1
   20c70:	2300      	movs	r3, #0
   20c72:	e7e3      	b.n	20c3c <d_print_comp_inner+0x5b8>
   20c74:	4e5b      	ldr	r6, [pc, #364]	; (20de4 <d_print_comp_inner+0x760>)
   20c76:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
   20c7a:	f106 0a0d 	add.w	sl, r6, #13
   20c7e:	f04f 0900 	mov.w	r9, #0
   20c82:	e009      	b.n	20c98 <d_print_comp_inner+0x614>
   20c84:	460b      	mov	r3, r1
   20c86:	3101      	adds	r1, #1
   20c88:	4556      	cmp	r6, sl
   20c8a:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
   20c8e:	54e7      	strb	r7, [r4, r3]
   20c90:	f884 7104 	strb.w	r7, [r4, #260]	; 0x104
   20c94:	f000 8756 	beq.w	21b44 <d_print_comp_inner+0x14c0>
   20c98:	29ff      	cmp	r1, #255	; 0xff
   20c9a:	f816 7b01 	ldrb.w	r7, [r6], #1
   20c9e:	d1f1      	bne.n	20c84 <d_print_comp_inner+0x600>
   20ca0:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   20ca4:	f884 90ff 	strb.w	r9, [r4, #255]	; 0xff
   20ca8:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
   20cac:	4620      	mov	r0, r4
   20cae:	4798      	blx	r3
   20cb0:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   20cb4:	3301      	adds	r3, #1
   20cb6:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
   20cba:	2101      	movs	r1, #1
   20cbc:	2300      	movs	r3, #0
   20cbe:	e7e3      	b.n	20c88 <d_print_comp_inner+0x604>
   20cc0:	4e49      	ldr	r6, [pc, #292]	; (20de8 <d_print_comp_inner+0x764>)
   20cc2:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
   20cc6:	f106 0a18 	add.w	sl, r6, #24
   20cca:	f04f 0900 	mov.w	r9, #0
   20cce:	e009      	b.n	20ce4 <d_print_comp_inner+0x660>
   20cd0:	460b      	mov	r3, r1
   20cd2:	3101      	adds	r1, #1
   20cd4:	45b2      	cmp	sl, r6
   20cd6:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
   20cda:	54e7      	strb	r7, [r4, r3]
   20cdc:	f884 7104 	strb.w	r7, [r4, #260]	; 0x104
   20ce0:	f000 86e3 	beq.w	21aaa <d_print_comp_inner+0x1426>
   20ce4:	29ff      	cmp	r1, #255	; 0xff
   20ce6:	f816 7f01 	ldrb.w	r7, [r6, #1]!
   20cea:	d1f1      	bne.n	20cd0 <d_print_comp_inner+0x64c>
   20cec:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   20cf0:	f884 90ff 	strb.w	r9, [r4, #255]	; 0xff
   20cf4:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
   20cf8:	4620      	mov	r0, r4
   20cfa:	4798      	blx	r3
   20cfc:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   20d00:	3301      	adds	r3, #1
   20d02:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
   20d06:	2101      	movs	r1, #1
   20d08:	2300      	movs	r3, #0
   20d0a:	e7e3      	b.n	20cd4 <d_print_comp_inner+0x650>
   20d0c:	4e37      	ldr	r6, [pc, #220]	; (20dec <d_print_comp_inner+0x768>)
   20d0e:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
   20d12:	f106 0a0b 	add.w	sl, r6, #11
   20d16:	f04f 0900 	mov.w	r9, #0
   20d1a:	e009      	b.n	20d30 <d_print_comp_inner+0x6ac>
   20d1c:	460b      	mov	r3, r1
   20d1e:	3101      	adds	r1, #1
   20d20:	45b2      	cmp	sl, r6
   20d22:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
   20d26:	54e7      	strb	r7, [r4, r3]
   20d28:	f884 7104 	strb.w	r7, [r4, #260]	; 0x104
   20d2c:	f000 87ca 	beq.w	21cc4 <d_print_comp_inner+0x1640>
   20d30:	29ff      	cmp	r1, #255	; 0xff
   20d32:	f816 7b01 	ldrb.w	r7, [r6], #1
   20d36:	d1f1      	bne.n	20d1c <d_print_comp_inner+0x698>
   20d38:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   20d3c:	f884 90ff 	strb.w	r9, [r4, #255]	; 0xff
   20d40:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
   20d44:	4620      	mov	r0, r4
   20d46:	4798      	blx	r3
   20d48:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   20d4c:	3301      	adds	r3, #1
   20d4e:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
   20d52:	2101      	movs	r1, #1
   20d54:	2300      	movs	r3, #0
   20d56:	e7e3      	b.n	20d20 <d_print_comp_inner+0x69c>
   20d58:	4e25      	ldr	r6, [pc, #148]	; (20df0 <d_print_comp_inner+0x76c>)
   20d5a:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
   20d5e:	f106 0a08 	add.w	sl, r6, #8
   20d62:	f04f 0900 	mov.w	r9, #0
   20d66:	e009      	b.n	20d7c <d_print_comp_inner+0x6f8>
   20d68:	460b      	mov	r3, r1
   20d6a:	3101      	adds	r1, #1
   20d6c:	45b2      	cmp	sl, r6
   20d6e:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
   20d72:	54e7      	strb	r7, [r4, r3]
   20d74:	f884 7104 	strb.w	r7, [r4, #260]	; 0x104
   20d78:	f000 86c8 	beq.w	21b0c <d_print_comp_inner+0x1488>
   20d7c:	29ff      	cmp	r1, #255	; 0xff
   20d7e:	f816 7f01 	ldrb.w	r7, [r6, #1]!
   20d82:	d1f1      	bne.n	20d68 <d_print_comp_inner+0x6e4>
   20d84:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   20d88:	f884 90ff 	strb.w	r9, [r4, #255]	; 0xff
   20d8c:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
   20d90:	4620      	mov	r0, r4
   20d92:	4798      	blx	r3
   20d94:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   20d98:	3301      	adds	r3, #1
   20d9a:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
   20d9e:	2101      	movs	r1, #1
   20da0:	2300      	movs	r3, #0
   20da2:	e7e3      	b.n	20d6c <d_print_comp_inner+0x6e8>
   20da4:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
   20da8:	29ff      	cmp	r1, #255	; 0xff
   20daa:	f001 847c 	beq.w	226a6 <d_print_comp_inner+0x2022>
   20dae:	1c4a      	adds	r2, r1, #1
   20db0:	237e      	movs	r3, #126	; 0x7e
   20db2:	f8c4 2100 	str.w	r2, [r4, #256]	; 0x100
   20db6:	5463      	strb	r3, [r4, r1]
   20db8:	f884 3104 	strb.w	r3, [r4, #260]	; 0x104
   20dbc:	4641      	mov	r1, r8
   20dbe:	68aa      	ldr	r2, [r5, #8]
   20dc0:	4620      	mov	r0, r4
   20dc2:	f002 fa03 	bl	231cc <d_print_comp>
   20dc6:	e52b      	b.n	20820 <d_print_comp_inner+0x19c>
   20dc8:	68aa      	ldr	r2, [r5, #8]
   20dca:	f002 f9ff 	bl	231cc <d_print_comp>
   20dce:	e527      	b.n	20820 <d_print_comp_inner+0x19c>
   20dd0:	0002e6a3 	.word	0x0002e6a3
   20dd4:	0002e673 	.word	0x0002e673
   20dd8:	0002e66f 	.word	0x0002e66f
   20ddc:	0002e647 	.word	0x0002e647
   20de0:	0002e65b 	.word	0x0002e65b
   20de4:	0002e638 	.word	0x0002e638
   20de8:	0002e613 	.word	0x0002e613
   20dec:	0002e5fc 	.word	0x0002e5fc
   20df0:	0002e607 	.word	0x0002e607
   20df4:	2200      	movs	r2, #0
   20df6:	f8d0 3114 	ldr.w	r3, [r0, #276]	; 0x114
   20dfa:	f8c0 2114 	str.w	r2, [r0, #276]	; 0x114
   20dfe:	686e      	ldr	r6, [r5, #4]
   20e00:	9300      	str	r3, [sp, #0]
   20e02:	2e00      	cmp	r6, #0
   20e04:	f000 864c 	beq.w	21aa0 <d_print_comp_inner+0x141c>
   20e08:	f10d 0910 	add.w	r9, sp, #16
   20e0c:	f8d0 c110 	ldr.w	ip, [r0, #272]	; 0x110
   20e10:	4617      	mov	r7, r2
   20e12:	4696      	mov	lr, r2
   20e14:	464b      	mov	r3, r9
   20e16:	7831      	ldrb	r1, [r6, #0]
   20e18:	601a      	str	r2, [r3, #0]
   20e1a:	f1a1 021c 	sub.w	r2, r1, #28
   20e1e:	2a04      	cmp	r2, #4
   20e20:	605e      	str	r6, [r3, #4]
   20e22:	f8c3 e008 	str.w	lr, [r3, #8]
   20e26:	f8c3 c00c 	str.w	ip, [r3, #12]
   20e2a:	f107 0701 	add.w	r7, r7, #1
   20e2e:	4618      	mov	r0, r3
   20e30:	461a      	mov	r2, r3
   20e32:	f240 862a 	bls.w	21a8a <d_print_comp_inner+0x1406>
   20e36:	294c      	cmp	r1, #76	; 0x4c
   20e38:	f000 8627 	beq.w	21a8a <d_print_comp_inner+0x1406>
   20e3c:	2904      	cmp	r1, #4
   20e3e:	f8c4 3114 	str.w	r3, [r4, #276]	; 0x114
   20e42:	f001 87bb 	beq.w	22dbc <d_print_comp_inner+0x2738>
   20e46:	2902      	cmp	r1, #2
   20e48:	d11a      	bne.n	20e80 <d_print_comp_inner+0x7fc>
   20e4a:	f8d6 b008 	ldr.w	fp, [r6, #8]
   20e4e:	f89b 3000 	ldrb.w	r3, [fp]
   20e52:	2b46      	cmp	r3, #70	; 0x46
   20e54:	f002 8035 	beq.w	22ec2 <d_print_comp_inner+0x283e>
   20e58:	462b      	mov	r3, r5
   20e5a:	eb09 1e07 	add.w	lr, r9, r7, lsl #4
   20e5e:	9601      	str	r6, [sp, #4]
   20e60:	465d      	mov	r5, fp
   20e62:	4676      	mov	r6, lr
   20e64:	46a2      	mov	sl, r4
   20e66:	469b      	mov	fp, r3
   20e68:	782b      	ldrb	r3, [r5, #0]
   20e6a:	f1a3 021c 	sub.w	r2, r3, #28
   20e6e:	2a04      	cmp	r2, #4
   20e70:	f241 805d 	bls.w	21f2e <d_print_comp_inner+0x18aa>
   20e74:	2b4c      	cmp	r3, #76	; 0x4c
   20e76:	f001 805a 	beq.w	21f2e <d_print_comp_inner+0x18aa>
   20e7a:	9e01      	ldr	r6, [sp, #4]
   20e7c:	4654      	mov	r4, sl
   20e7e:	465d      	mov	r5, fp
   20e80:	68aa      	ldr	r2, [r5, #8]
   20e82:	4641      	mov	r1, r8
   20e84:	4620      	mov	r0, r4
   20e86:	f002 f9a1 	bl	231cc <d_print_comp>
   20e8a:	7833      	ldrb	r3, [r6, #0]
   20e8c:	2b04      	cmp	r3, #4
   20e8e:	f002 8020 	beq.w	22ed2 <d_print_comp_inner+0x284e>
   20e92:	eb09 1907 	add.w	r9, r9, r7, lsl #4
   20e96:	2620      	movs	r6, #32
   20e98:	f859 5c08 	ldr.w	r5, [r9, #-8]
   20e9c:	3f01      	subs	r7, #1
   20e9e:	b985      	cbnz	r5, 20ec2 <d_print_comp_inner+0x83e>
   20ea0:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
   20ea4:	29ff      	cmp	r1, #255	; 0xff
   20ea6:	f002 8043 	beq.w	22f30 <d_print_comp_inner+0x28ac>
   20eaa:	1c4b      	adds	r3, r1, #1
   20eac:	f8c4 3100 	str.w	r3, [r4, #256]	; 0x100
   20eb0:	f859 2c0c 	ldr.w	r2, [r9, #-12]
   20eb4:	5466      	strb	r6, [r4, r1]
   20eb6:	4620      	mov	r0, r4
   20eb8:	4641      	mov	r1, r8
   20eba:	f884 6104 	strb.w	r6, [r4, #260]	; 0x104
   20ebe:	f002 f995 	bl	231ec <d_print_mod>
   20ec2:	f1a9 0910 	sub.w	r9, r9, #16
   20ec6:	2f00      	cmp	r7, #0
   20ec8:	d1e6      	bne.n	20e98 <d_print_comp_inner+0x814>
   20eca:	9b00      	ldr	r3, [sp, #0]
   20ecc:	f8c4 3114 	str.w	r3, [r4, #276]	; 0x114
   20ed0:	e4a6      	b.n	20820 <d_print_comp_inner+0x19c>
   20ed2:	4ed1      	ldr	r6, [pc, #836]	; (21218 <d_print_comp_inner+0xb94>)
   20ed4:	686a      	ldr	r2, [r5, #4]
   20ed6:	f002 f979 	bl	231cc <d_print_comp>
   20eda:	f106 0a05 	add.w	sl, r6, #5
   20ede:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
   20ee2:	f04f 0900 	mov.w	r9, #0
   20ee6:	e009      	b.n	20efc <d_print_comp_inner+0x878>
   20ee8:	460b      	mov	r3, r1
   20eea:	3101      	adds	r1, #1
   20eec:	45b2      	cmp	sl, r6
   20eee:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
   20ef2:	54e7      	strb	r7, [r4, r3]
   20ef4:	f884 7104 	strb.w	r7, [r4, #260]	; 0x104
   20ef8:	f000 86d1 	beq.w	21c9e <d_print_comp_inner+0x161a>
   20efc:	29ff      	cmp	r1, #255	; 0xff
   20efe:	f816 7b01 	ldrb.w	r7, [r6], #1
   20f02:	d1f1      	bne.n	20ee8 <d_print_comp_inner+0x864>
   20f04:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   20f08:	f884 90ff 	strb.w	r9, [r4, #255]	; 0xff
   20f0c:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
   20f10:	4620      	mov	r0, r4
   20f12:	4798      	blx	r3
   20f14:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   20f18:	3301      	adds	r3, #1
   20f1a:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
   20f1e:	2101      	movs	r1, #1
   20f20:	2300      	movs	r3, #0
   20f22:	e7e3      	b.n	20eec <d_print_comp_inner+0x868>
   20f24:	686a      	ldr	r2, [r5, #4]
   20f26:	f002 f951 	bl	231cc <d_print_comp>
   20f2a:	f018 0904 	ands.w	r9, r8, #4
   20f2e:	f001 82aa 	beq.w	22486 <d_print_comp_inner+0x1e02>
   20f32:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
   20f36:	29ff      	cmp	r1, #255	; 0xff
   20f38:	f001 859a 	beq.w	22a70 <d_print_comp_inner+0x23ec>
   20f3c:	1c4a      	adds	r2, r1, #1
   20f3e:	232e      	movs	r3, #46	; 0x2e
   20f40:	f8c4 2100 	str.w	r2, [r4, #256]	; 0x100
   20f44:	5463      	strb	r3, [r4, r1]
   20f46:	f884 3104 	strb.w	r3, [r4, #260]	; 0x104
   20f4a:	68ad      	ldr	r5, [r5, #8]
   20f4c:	782b      	ldrb	r3, [r5, #0]
   20f4e:	2b46      	cmp	r3, #70	; 0x46
   20f50:	f001 83cc 	beq.w	226ec <d_print_comp_inner+0x2068>
   20f54:	462a      	mov	r2, r5
   20f56:	4641      	mov	r1, r8
   20f58:	4620      	mov	r0, r4
   20f5a:	f002 f937 	bl	231cc <d_print_comp>
   20f5e:	e45f      	b.n	20820 <d_print_comp_inner+0x19c>
   20f60:	f011 0804 	ands.w	r8, r1, #4
   20f64:	f041 808b 	bne.w	2207e <d_print_comp_inner+0x19fa>
   20f68:	68af      	ldr	r7, [r5, #8]
   20f6a:	686d      	ldr	r5, [r5, #4]
   20f6c:	2f00      	cmp	r7, #0
   20f6e:	f43f ac57 	beq.w	20820 <d_print_comp_inner+0x19c>
   20f72:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
   20f76:	442f      	add	r7, r5
   20f78:	e009      	b.n	20f8e <d_print_comp_inner+0x90a>
   20f7a:	460b      	mov	r3, r1
   20f7c:	3101      	adds	r1, #1
   20f7e:	42bd      	cmp	r5, r7
   20f80:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
   20f84:	54e6      	strb	r6, [r4, r3]
   20f86:	f884 6104 	strb.w	r6, [r4, #260]	; 0x104
   20f8a:	f43f ac49 	beq.w	20820 <d_print_comp_inner+0x19c>
   20f8e:	29ff      	cmp	r1, #255	; 0xff
   20f90:	f815 6b01 	ldrb.w	r6, [r5], #1
   20f94:	d1f1      	bne.n	20f7a <d_print_comp_inner+0x8f6>
   20f96:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   20f9a:	f884 80ff 	strb.w	r8, [r4, #255]	; 0xff
   20f9e:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
   20fa2:	4620      	mov	r0, r4
   20fa4:	4798      	blx	r3
   20fa6:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   20faa:	3301      	adds	r3, #1
   20fac:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
   20fb0:	2101      	movs	r1, #1
   20fb2:	2300      	movs	r3, #0
   20fb4:	e7e3      	b.n	20f7e <d_print_comp_inner+0x8fa>
   20fb6:	2301      	movs	r3, #1
   20fb8:	f8c0 3118 	str.w	r3, [r0, #280]	; 0x118
   20fbc:	e430      	b.n	20820 <d_print_comp_inner+0x19c>
   20fbe:	f8d0 311c 	ldr.w	r3, [r0, #284]	; 0x11c
   20fc2:	2b00      	cmp	r3, #0
   20fc4:	f041 8106 	bne.w	221d4 <d_print_comp_inner+0x1b50>
   20fc8:	1d29      	adds	r1, r5, #4
   20fca:	f7fd fa97 	bl	1e4fc <d_lookup_template_argument.isra.6>
   20fce:	2800      	cmp	r0, #0
   20fd0:	f43f ac3a 	beq.w	20848 <d_print_comp_inner+0x1c4>
   20fd4:	7803      	ldrb	r3, [r0, #0]
   20fd6:	2b2f      	cmp	r3, #47	; 0x2f
   20fd8:	f001 83fc 	beq.w	227d4 <d_print_comp_inner+0x2150>
   20fdc:	f8d4 5110 	ldr.w	r5, [r4, #272]	; 0x110
   20fe0:	682b      	ldr	r3, [r5, #0]
   20fe2:	f8c4 3110 	str.w	r3, [r4, #272]	; 0x110
   20fe6:	4602      	mov	r2, r0
   20fe8:	4641      	mov	r1, r8
   20fea:	4620      	mov	r0, r4
   20fec:	f002 f8ee 	bl	231cc <d_print_comp>
   20ff0:	f8c4 5110 	str.w	r5, [r4, #272]	; 0x110
   20ff4:	e414      	b.n	20820 <d_print_comp_inner+0x19c>
   20ff6:	2300      	movs	r3, #0
   20ff8:	f8d0 9114 	ldr.w	r9, [r0, #276]	; 0x114
   20ffc:	f8d0 7144 	ldr.w	r7, [r0, #324]	; 0x144
   21000:	f8c0 3114 	str.w	r3, [r0, #276]	; 0x114
   21004:	f8c0 5144 	str.w	r5, [r0, #324]	; 0x144
   21008:	f011 0f04 	tst.w	r1, #4
   2100c:	686e      	ldr	r6, [r5, #4]
   2100e:	d005      	beq.n	2101c <d_print_comp_inner+0x998>
   21010:	7833      	ldrb	r3, [r6, #0]
   21012:	b91b      	cbnz	r3, 2101c <d_print_comp_inner+0x998>
   21014:	68b2      	ldr	r2, [r6, #8]
   21016:	2a06      	cmp	r2, #6
   21018:	f001 853c 	beq.w	22a94 <d_print_comp_inner+0x2410>
   2101c:	4632      	mov	r2, r6
   2101e:	4641      	mov	r1, r8
   21020:	4620      	mov	r0, r4
   21022:	f002 f8d3 	bl	231cc <d_print_comp>
   21026:	f894 3104 	ldrb.w	r3, [r4, #260]	; 0x104
   2102a:	2b3c      	cmp	r3, #60	; 0x3c
   2102c:	f001 8274 	beq.w	22518 <d_print_comp_inner+0x1e94>
   21030:	f8d4 3100 	ldr.w	r3, [r4, #256]	; 0x100
   21034:	2bff      	cmp	r3, #255	; 0xff
   21036:	f001 8489 	beq.w	2294c <d_print_comp_inner+0x22c8>
   2103a:	1c59      	adds	r1, r3, #1
   2103c:	223c      	movs	r2, #60	; 0x3c
   2103e:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
   21042:	54e2      	strb	r2, [r4, r3]
   21044:	f884 2104 	strb.w	r2, [r4, #260]	; 0x104
   21048:	4641      	mov	r1, r8
   2104a:	68aa      	ldr	r2, [r5, #8]
   2104c:	4620      	mov	r0, r4
   2104e:	f002 f8bd 	bl	231cc <d_print_comp>
   21052:	f894 3104 	ldrb.w	r3, [r4, #260]	; 0x104
   21056:	2b3e      	cmp	r3, #62	; 0x3e
   21058:	f001 8239 	beq.w	224ce <d_print_comp_inner+0x1e4a>
   2105c:	f8d4 3100 	ldr.w	r3, [r4, #256]	; 0x100
   21060:	2bff      	cmp	r3, #255	; 0xff
   21062:	f001 8460 	beq.w	22926 <d_print_comp_inner+0x22a2>
   21066:	1c59      	adds	r1, r3, #1
   21068:	223e      	movs	r2, #62	; 0x3e
   2106a:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
   2106e:	54e2      	strb	r2, [r4, r3]
   21070:	f884 2104 	strb.w	r2, [r4, #260]	; 0x104
   21074:	f8c4 9114 	str.w	r9, [r4, #276]	; 0x114
   21078:	f8c4 7144 	str.w	r7, [r4, #324]	; 0x144
   2107c:	f7ff bbd0 	b.w	20820 <d_print_comp_inner+0x19c>
   21080:	686f      	ldr	r7, [r5, #4]
   21082:	2f00      	cmp	r7, #0
   21084:	f001 8082 	beq.w	2218c <d_print_comp_inner+0x1b08>
   21088:	4d64      	ldr	r5, [pc, #400]	; (2121c <d_print_comp_inner+0xb98>)
   2108a:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
   2108e:	f105 0906 	add.w	r9, r5, #6
   21092:	f04f 0800 	mov.w	r8, #0
   21096:	e009      	b.n	210ac <d_print_comp_inner+0xa28>
   21098:	460b      	mov	r3, r1
   2109a:	3101      	adds	r1, #1
   2109c:	45a9      	cmp	r9, r5
   2109e:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
   210a2:	54e6      	strb	r6, [r4, r3]
   210a4:	f884 6104 	strb.w	r6, [r4, #260]	; 0x104
   210a8:	f000 8782 	beq.w	21fb0 <d_print_comp_inner+0x192c>
   210ac:	29ff      	cmp	r1, #255	; 0xff
   210ae:	f815 6b01 	ldrb.w	r6, [r5], #1
   210b2:	d1f1      	bne.n	21098 <d_print_comp_inner+0xa14>
   210b4:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   210b8:	f884 80ff 	strb.w	r8, [r4, #255]	; 0xff
   210bc:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
   210c0:	4620      	mov	r0, r4
   210c2:	4798      	blx	r3
   210c4:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   210c8:	3301      	adds	r3, #1
   210ca:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
   210ce:	2101      	movs	r1, #1
   210d0:	2300      	movs	r3, #0
   210d2:	e7e3      	b.n	2109c <d_print_comp_inner+0xa18>
   210d4:	4e52      	ldr	r6, [pc, #328]	; (21220 <d_print_comp_inner+0xb9c>)
   210d6:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
   210da:	f106 0a0a 	add.w	sl, r6, #10
   210de:	f04f 0900 	mov.w	r9, #0
   210e2:	e009      	b.n	210f8 <d_print_comp_inner+0xa74>
   210e4:	460b      	mov	r3, r1
   210e6:	3101      	adds	r1, #1
   210e8:	4556      	cmp	r6, sl
   210ea:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
   210ee:	54e7      	strb	r7, [r4, r3]
   210f0:	f884 7104 	strb.w	r7, [r4, #260]	; 0x104
   210f4:	f000 8701 	beq.w	21efa <d_print_comp_inner+0x1876>
   210f8:	29ff      	cmp	r1, #255	; 0xff
   210fa:	f816 7b01 	ldrb.w	r7, [r6], #1
   210fe:	d1f1      	bne.n	210e4 <d_print_comp_inner+0xa60>
   21100:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   21104:	f884 90ff 	strb.w	r9, [r4, #255]	; 0xff
   21108:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
   2110c:	4620      	mov	r0, r4
   2110e:	4798      	blx	r3
   21110:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   21114:	3301      	adds	r3, #1
   21116:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
   2111a:	2101      	movs	r1, #1
   2111c:	2300      	movs	r3, #0
   2111e:	e7e3      	b.n	210e8 <d_print_comp_inner+0xa64>
   21120:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
   21124:	792d      	ldrb	r5, [r5, #4]
   21126:	29ff      	cmp	r1, #255	; 0xff
   21128:	f001 82ab 	beq.w	22682 <d_print_comp_inner+0x1ffe>
   2112c:	1c4b      	adds	r3, r1, #1
   2112e:	f8c4 3100 	str.w	r3, [r4, #256]	; 0x100
   21132:	5465      	strb	r5, [r4, r1]
   21134:	f884 5104 	strb.w	r5, [r4, #260]	; 0x104
   21138:	f7ff bb72 	b.w	20820 <d_print_comp_inner+0x19c>
   2113c:	686a      	ldr	r2, [r5, #4]
   2113e:	f002 f845 	bl	231cc <d_print_comp>
   21142:	68aa      	ldr	r2, [r5, #8]
   21144:	4641      	mov	r1, r8
   21146:	4620      	mov	r0, r4
   21148:	f002 f840 	bl	231cc <d_print_comp>
   2114c:	f7ff bb68 	b.w	20820 <d_print_comp_inner+0x19c>
   21150:	4e34      	ldr	r6, [pc, #208]	; (21224 <d_print_comp_inner+0xba0>)
   21152:	686a      	ldr	r2, [r5, #4]
   21154:	f002 f83a 	bl	231cc <d_print_comp>
   21158:	f106 0a08 	add.w	sl, r6, #8
   2115c:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
   21160:	f04f 0900 	mov.w	r9, #0
   21164:	e009      	b.n	2117a <d_print_comp_inner+0xaf6>
   21166:	460b      	mov	r3, r1
   21168:	3101      	adds	r1, #1
   2116a:	4556      	cmp	r6, sl
   2116c:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
   21170:	54e7      	strb	r7, [r4, r3]
   21172:	f884 7104 	strb.w	r7, [r4, #260]	; 0x104
   21176:	f000 8508 	beq.w	21b8a <d_print_comp_inner+0x1506>
   2117a:	29ff      	cmp	r1, #255	; 0xff
   2117c:	f816 7f01 	ldrb.w	r7, [r6, #1]!
   21180:	d1f1      	bne.n	21166 <d_print_comp_inner+0xae2>
   21182:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   21186:	f884 90ff 	strb.w	r9, [r4, #255]	; 0xff
   2118a:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
   2118e:	4620      	mov	r0, r4
   21190:	4798      	blx	r3
   21192:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   21196:	3301      	adds	r3, #1
   21198:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
   2119c:	2101      	movs	r1, #1
   2119e:	2300      	movs	r3, #0
   211a0:	e7e3      	b.n	2116a <d_print_comp_inner+0xae6>
   211a2:	686a      	ldr	r2, [r5, #4]
   211a4:	b10a      	cbz	r2, 211aa <d_print_comp_inner+0xb26>
   211a6:	f002 f811 	bl	231cc <d_print_comp>
   211aa:	68ab      	ldr	r3, [r5, #8]
   211ac:	2b00      	cmp	r3, #0
   211ae:	f43f ab37 	beq.w	20820 <d_print_comp_inner+0x19c>
   211b2:	f8d4 6100 	ldr.w	r6, [r4, #256]	; 0x100
   211b6:	2efd      	cmp	r6, #253	; 0xfd
   211b8:	f201 81bc 	bhi.w	22534 <d_print_comp_inner+0x1eb0>
   211bc:	4f1a      	ldr	r7, [pc, #104]	; (21228 <d_print_comp_inner+0xba4>)
   211be:	f04f 0a00 	mov.w	sl, #0
   211c2:	f107 0b02 	add.w	fp, r7, #2
   211c6:	4631      	mov	r1, r6
   211c8:	e009      	b.n	211de <d_print_comp_inner+0xb5a>
   211ca:	460b      	mov	r3, r1
   211cc:	3101      	adds	r1, #1
   211ce:	455f      	cmp	r7, fp
   211d0:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
   211d4:	54e6      	strb	r6, [r4, r3]
   211d6:	f884 6104 	strb.w	r6, [r4, #260]	; 0x104
   211da:	f000 86c1 	beq.w	21f60 <d_print_comp_inner+0x18dc>
   211de:	29ff      	cmp	r1, #255	; 0xff
   211e0:	f817 6b01 	ldrb.w	r6, [r7], #1
   211e4:	d1f1      	bne.n	211ca <d_print_comp_inner+0xb46>
   211e6:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   211ea:	f884 a0ff 	strb.w	sl, [r4, #255]	; 0xff
   211ee:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
   211f2:	4620      	mov	r0, r4
   211f4:	4798      	blx	r3
   211f6:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   211fa:	3301      	adds	r3, #1
   211fc:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
   21200:	2101      	movs	r1, #1
   21202:	2300      	movs	r3, #0
   21204:	e7e3      	b.n	211ce <d_print_comp_inner+0xb4a>
   21206:	4e09      	ldr	r6, [pc, #36]	; (2122c <d_print_comp_inner+0xba8>)
   21208:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
   2120c:	f106 0a09 	add.w	sl, r6, #9
   21210:	f04f 0900 	mov.w	r9, #0
   21214:	e016      	b.n	21244 <d_print_comp_inner+0xbc0>
   21216:	bf00      	nop
   21218:	0002e5c8 	.word	0x0002e5c8
   2121c:	0002e7d8 	.word	0x0002e7d8
   21220:	0002e7c0 	.word	0x0002e7c0
   21224:	0002e83f 	.word	0x0002e83f
   21228:	0002e75c 	.word	0x0002e75c
   2122c:	0002e76b 	.word	0x0002e76b
   21230:	460b      	mov	r3, r1
   21232:	3101      	adds	r1, #1
   21234:	4556      	cmp	r6, sl
   21236:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
   2123a:	54e7      	strb	r7, [r4, r3]
   2123c:	f884 7104 	strb.w	r7, [r4, #260]	; 0x104
   21240:	f000 8594 	beq.w	21d6c <d_print_comp_inner+0x16e8>
   21244:	29ff      	cmp	r1, #255	; 0xff
   21246:	f816 7f01 	ldrb.w	r7, [r6, #1]!
   2124a:	d1f1      	bne.n	21230 <d_print_comp_inner+0xbac>
   2124c:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   21250:	f884 90ff 	strb.w	r9, [r4, #255]	; 0xff
   21254:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
   21258:	4620      	mov	r0, r4
   2125a:	4798      	blx	r3
   2125c:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   21260:	3301      	adds	r3, #1
   21262:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
   21266:	2101      	movs	r1, #1
   21268:	2300      	movs	r3, #0
   2126a:	e7e3      	b.n	21234 <d_print_comp_inner+0xbb0>
   2126c:	4ed1      	ldr	r6, [pc, #836]	; (215b4 <d_print_comp_inner+0xf30>)
   2126e:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
   21272:	f106 0a09 	add.w	sl, r6, #9
   21276:	f04f 0900 	mov.w	r9, #0
   2127a:	e009      	b.n	21290 <d_print_comp_inner+0xc0c>
   2127c:	460b      	mov	r3, r1
   2127e:	3101      	adds	r1, #1
   21280:	4556      	cmp	r6, sl
   21282:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
   21286:	54e7      	strb	r7, [r4, r3]
   21288:	f884 7104 	strb.w	r7, [r4, #260]	; 0x104
   2128c:	f000 8597 	beq.w	21dbe <d_print_comp_inner+0x173a>
   21290:	29ff      	cmp	r1, #255	; 0xff
   21292:	f816 7f01 	ldrb.w	r7, [r6, #1]!
   21296:	d1f1      	bne.n	2127c <d_print_comp_inner+0xbf8>
   21298:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   2129c:	f884 90ff 	strb.w	r9, [r4, #255]	; 0xff
   212a0:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
   212a4:	4620      	mov	r0, r4
   212a6:	4798      	blx	r3
   212a8:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   212ac:	3301      	adds	r3, #1
   212ae:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
   212b2:	2101      	movs	r1, #1
   212b4:	2300      	movs	r3, #0
   212b6:	e7e3      	b.n	21280 <d_print_comp_inner+0xbfc>
   212b8:	f8d5 a004 	ldr.w	sl, [r5, #4]
   212bc:	4dbe      	ldr	r5, [pc, #760]	; (215b8 <d_print_comp_inner+0xf34>)
   212be:	f8da 7008 	ldr.w	r7, [sl, #8]
   212c2:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
   212c6:	f105 0808 	add.w	r8, r5, #8
   212ca:	f04f 0900 	mov.w	r9, #0
   212ce:	e009      	b.n	212e4 <d_print_comp_inner+0xc60>
   212d0:	460b      	mov	r3, r1
   212d2:	3101      	adds	r1, #1
   212d4:	45a8      	cmp	r8, r5
   212d6:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
   212da:	54e6      	strb	r6, [r4, r3]
   212dc:	f884 6104 	strb.w	r6, [r4, #260]	; 0x104
   212e0:	f000 8506 	beq.w	21cf0 <d_print_comp_inner+0x166c>
   212e4:	29ff      	cmp	r1, #255	; 0xff
   212e6:	f815 6f01 	ldrb.w	r6, [r5, #1]!
   212ea:	d1f1      	bne.n	212d0 <d_print_comp_inner+0xc4c>
   212ec:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   212f0:	f884 90ff 	strb.w	r9, [r4, #255]	; 0xff
   212f4:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
   212f8:	4620      	mov	r0, r4
   212fa:	4798      	blx	r3
   212fc:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   21300:	3301      	adds	r3, #1
   21302:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
   21306:	2101      	movs	r1, #1
   21308:	2300      	movs	r3, #0
   2130a:	e7e3      	b.n	212d4 <d_print_comp_inner+0xc50>
   2130c:	686a      	ldr	r2, [r5, #4]
   2130e:	68ae      	ldr	r6, [r5, #8]
   21310:	b10a      	cbz	r2, 21316 <d_print_comp_inner+0xc92>
   21312:	f001 ff5b 	bl	231cc <d_print_comp>
   21316:	f8d4 3100 	ldr.w	r3, [r4, #256]	; 0x100
   2131a:	2bff      	cmp	r3, #255	; 0xff
   2131c:	f001 82b1 	beq.w	22882 <d_print_comp_inner+0x21fe>
   21320:	1c5a      	adds	r2, r3, #1
   21322:	257b      	movs	r5, #123	; 0x7b
   21324:	f8c4 2100 	str.w	r2, [r4, #256]	; 0x100
   21328:	4641      	mov	r1, r8
   2132a:	54e5      	strb	r5, [r4, r3]
   2132c:	4632      	mov	r2, r6
   2132e:	4620      	mov	r0, r4
   21330:	f884 5104 	strb.w	r5, [r4, #260]	; 0x104
   21334:	f001 ff4a 	bl	231cc <d_print_comp>
   21338:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
   2133c:	29ff      	cmp	r1, #255	; 0xff
   2133e:	f001 81e7 	beq.w	22710 <d_print_comp_inner+0x208c>
   21342:	1c4a      	adds	r2, r1, #1
   21344:	237d      	movs	r3, #125	; 0x7d
   21346:	f8c4 2100 	str.w	r2, [r4, #256]	; 0x100
   2134a:	5463      	strb	r3, [r4, r1]
   2134c:	f884 3104 	strb.w	r3, [r4, #260]	; 0x104
   21350:	f7ff ba66 	b.w	20820 <d_print_comp_inner+0x19c>
   21354:	f8d5 9004 	ldr.w	r9, [r5, #4]
   21358:	68ae      	ldr	r6, [r5, #8]
   2135a:	f899 3000 	ldrb.w	r3, [r9]
   2135e:	2b31      	cmp	r3, #49	; 0x31
   21360:	f000 87cb 	beq.w	222fa <d_print_comp_inner+0x1c76>
   21364:	2b33      	cmp	r3, #51	; 0x33
   21366:	f041 86d3 	bne.w	23110 <d_print_comp_inner+0x2a8c>
   2136a:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
   2136e:	29ff      	cmp	r1, #255	; 0xff
   21370:	f001 84c3 	beq.w	22cfa <d_print_comp_inner+0x2676>
   21374:	1c4a      	adds	r2, r1, #1
   21376:	2328      	movs	r3, #40	; 0x28
   21378:	f8c4 2100 	str.w	r2, [r4, #256]	; 0x100
   2137c:	5463      	strb	r3, [r4, r1]
   2137e:	f884 3104 	strb.w	r3, [r4, #260]	; 0x104
   21382:	a904      	add	r1, sp, #16
   21384:	f8d9 2004 	ldr.w	r2, [r9, #4]
   21388:	f8d4 3128 	ldr.w	r3, [r4, #296]	; 0x128
   2138c:	f8c4 1128 	str.w	r1, [r4, #296]	; 0x128
   21390:	4620      	mov	r0, r4
   21392:	4641      	mov	r1, r8
   21394:	9305      	str	r3, [sp, #20]
   21396:	9204      	str	r2, [sp, #16]
   21398:	f7ff f974 	bl	20684 <d_print_comp_inner>
   2139c:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
   213a0:	9b05      	ldr	r3, [sp, #20]
   213a2:	f8c4 3128 	str.w	r3, [r4, #296]	; 0x128
   213a6:	29ff      	cmp	r1, #255	; 0xff
   213a8:	f001 8496 	beq.w	22cd8 <d_print_comp_inner+0x2654>
   213ac:	2329      	movs	r3, #41	; 0x29
   213ae:	1c4a      	adds	r2, r1, #1
   213b0:	f8c4 2100 	str.w	r2, [r4, #256]	; 0x100
   213b4:	5463      	strb	r3, [r4, r1]
   213b6:	f884 3104 	strb.w	r3, [r4, #260]	; 0x104
   213ba:	4632      	mov	r2, r6
   213bc:	4641      	mov	r1, r8
   213be:	4620      	mov	r0, r4
   213c0:	f002 fd2a 	bl	23e18 <d_print_subexpr>
   213c4:	f7ff ba2c 	b.w	20820 <d_print_comp_inner+0x19c>
   213c8:	686a      	ldr	r2, [r5, #4]
   213ca:	f002 fce7 	bl	23d9c <d_print_expr_op>
   213ce:	f7ff ba27 	b.w	20820 <d_print_comp_inner+0x19c>
   213d2:	f011 0f20 	tst.w	r1, #32
   213d6:	f040 8753 	bne.w	22280 <d_print_comp_inner+0x1bfc>
   213da:	686a      	ldr	r2, [r5, #4]
   213dc:	b11a      	cbz	r2, 213e6 <d_print_comp_inner+0xd62>
   213de:	f018 0340 	ands.w	r3, r8, #64	; 0x40
   213e2:	f001 81d0 	beq.w	22786 <d_print_comp_inner+0x2102>
   213e6:	f028 0860 	bic.w	r8, r8, #96	; 0x60
   213ea:	f105 0208 	add.w	r2, r5, #8
   213ee:	4641      	mov	r1, r8
   213f0:	f8d4 3114 	ldr.w	r3, [r4, #276]	; 0x114
   213f4:	4620      	mov	r0, r4
   213f6:	f002 fbdd 	bl	23bb4 <d_print_function_type.isra.11>
   213fa:	f7ff ba11 	b.w	20820 <d_print_comp_inner+0x19c>
   213fe:	f011 0804 	ands.w	r8, r1, #4
   21402:	686b      	ldr	r3, [r5, #4]
   21404:	f040 8612 	bne.w	2202c <d_print_comp_inner+0x19a8>
   21408:	e893 00a0 	ldmia.w	r3, {r5, r7}
   2140c:	2f00      	cmp	r7, #0
   2140e:	f43f aa07 	beq.w	20820 <d_print_comp_inner+0x19c>
   21412:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
   21416:	442f      	add	r7, r5
   21418:	e009      	b.n	2142e <d_print_comp_inner+0xdaa>
   2141a:	460b      	mov	r3, r1
   2141c:	3101      	adds	r1, #1
   2141e:	42bd      	cmp	r5, r7
   21420:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
   21424:	54e6      	strb	r6, [r4, r3]
   21426:	f884 6104 	strb.w	r6, [r4, #260]	; 0x104
   2142a:	f43f a9f9 	beq.w	20820 <d_print_comp_inner+0x19c>
   2142e:	29ff      	cmp	r1, #255	; 0xff
   21430:	f815 6b01 	ldrb.w	r6, [r5], #1
   21434:	d1f1      	bne.n	2141a <d_print_comp_inner+0xd96>
   21436:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   2143a:	f884 80ff 	strb.w	r8, [r4, #255]	; 0xff
   2143e:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
   21442:	4620      	mov	r0, r4
   21444:	4798      	blx	r3
   21446:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   2144a:	3301      	adds	r3, #1
   2144c:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
   21450:	2101      	movs	r1, #1
   21452:	2300      	movs	r3, #0
   21454:	e7e3      	b.n	2141e <d_print_comp_inner+0xd9a>
   21456:	6869      	ldr	r1, [r5, #4]
   21458:	f8d0 711c 	ldr.w	r7, [r0, #284]	; 0x11c
   2145c:	780b      	ldrb	r3, [r1, #0]
   2145e:	2f00      	cmp	r7, #0
   21460:	f040 85e1 	bne.w	22026 <d_print_comp_inner+0x19a2>
   21464:	2b05      	cmp	r3, #5
   21466:	f001 81c7 	beq.w	227f8 <d_print_comp_inner+0x2174>
   2146a:	2b23      	cmp	r3, #35	; 0x23
   2146c:	f000 8689 	beq.w	22182 <d_print_comp_inner+0x1afe>
   21470:	782a      	ldrb	r2, [r5, #0]
   21472:	429a      	cmp	r2, r3
   21474:	f000 8685 	beq.w	22182 <d_print_comp_inner+0x1afe>
   21478:	2b24      	cmp	r3, #36	; 0x24
   2147a:	f47f a9eb 	bne.w	20854 <d_print_comp_inner+0x1d0>
   2147e:	a814      	add	r0, sp, #80	; 0x50
   21480:	f8d4 3114 	ldr.w	r3, [r4, #276]	; 0x114
   21484:	684a      	ldr	r2, [r1, #4]
   21486:	f840 3d40 	str.w	r3, [r0, #-64]!
   2148a:	2100      	movs	r1, #0
   2148c:	f8d4 3110 	ldr.w	r3, [r4, #272]	; 0x110
   21490:	9505      	str	r5, [sp, #20]
   21492:	f8c4 0114 	str.w	r0, [r4, #276]	; 0x114
   21496:	9106      	str	r1, [sp, #24]
   21498:	9307      	str	r3, [sp, #28]
   2149a:	2a00      	cmp	r2, #0
   2149c:	f47f a9e8 	bne.w	20870 <d_print_comp_inner+0x1ec>
   214a0:	f7ff b9e5 	b.w	2086e <d_print_comp_inner+0x1ea>
   214a4:	686a      	ldr	r2, [r5, #4]
   214a6:	f001 fe91 	bl	231cc <d_print_comp>
   214aa:	f7ff b9b9 	b.w	20820 <d_print_comp_inner+0x19c>
   214ae:	ab14      	add	r3, sp, #80	; 0x50
   214b0:	f8d0 2114 	ldr.w	r2, [r0, #276]	; 0x114
   214b4:	f843 2d40 	str.w	r2, [r3, #-64]!
   214b8:	f8c0 3114 	str.w	r3, [r0, #276]	; 0x114
   214bc:	68aa      	ldr	r2, [r5, #8]
   214be:	f8d0 3110 	ldr.w	r3, [r0, #272]	; 0x110
   214c2:	9307      	str	r3, [sp, #28]
   214c4:	2600      	movs	r6, #0
   214c6:	9505      	str	r5, [sp, #20]
   214c8:	9606      	str	r6, [sp, #24]
   214ca:	f001 fe7f 	bl	231cc <d_print_comp>
   214ce:	9b06      	ldr	r3, [sp, #24]
   214d0:	b923      	cbnz	r3, 214dc <d_print_comp_inner+0xe58>
   214d2:	462a      	mov	r2, r5
   214d4:	4641      	mov	r1, r8
   214d6:	4620      	mov	r0, r4
   214d8:	f001 fe88 	bl	231ec <d_print_mod>
   214dc:	9b04      	ldr	r3, [sp, #16]
   214de:	f8c4 3114 	str.w	r3, [r4, #276]	; 0x114
   214e2:	f7ff b99d 	b.w	20820 <d_print_comp_inner+0x19c>
   214e6:	f10d 0950 	add.w	r9, sp, #80	; 0x50
   214ea:	f8d0 b114 	ldr.w	fp, [r0, #276]	; 0x114
   214ee:	f849 bd40 	str.w	fp, [r9, #-64]!
   214f2:	2200      	movs	r2, #0
   214f4:	f8d0 3110 	ldr.w	r3, [r0, #272]	; 0x110
   214f8:	f8cd b000 	str.w	fp, [sp]
   214fc:	4659      	mov	r1, fp
   214fe:	f8c0 9114 	str.w	r9, [r0, #276]	; 0x114
   21502:	9505      	str	r5, [sp, #20]
   21504:	9206      	str	r2, [sp, #24]
   21506:	9307      	str	r3, [sp, #28]
   21508:	2900      	cmp	r1, #0
   2150a:	f001 83a0 	beq.w	22c4e <d_print_comp_inner+0x25ca>
   2150e:	684b      	ldr	r3, [r1, #4]
   21510:	781b      	ldrb	r3, [r3, #0]
   21512:	3b19      	subs	r3, #25
   21514:	2b02      	cmp	r3, #2
   21516:	f201 839a 	bhi.w	22c4e <d_print_comp_inner+0x25ca>
   2151a:	46ac      	mov	ip, r5
   2151c:	2701      	movs	r7, #1
   2151e:	460e      	mov	r6, r1
   21520:	464d      	mov	r5, r9
   21522:	e004      	b.n	2152e <d_print_comp_inner+0xeaa>
   21524:	6873      	ldr	r3, [r6, #4]
   21526:	781b      	ldrb	r3, [r3, #0]
   21528:	3b19      	subs	r3, #25
   2152a:	2b02      	cmp	r3, #2
   2152c:	d81b      	bhi.n	21566 <d_print_comp_inner+0xee2>
   2152e:	68b3      	ldr	r3, [r6, #8]
   21530:	ea4f 1e07 	mov.w	lr, r7, lsl #4
   21534:	aa14      	add	r2, sp, #80	; 0x50
   21536:	eb02 0b0e 	add.w	fp, r2, lr
   2153a:	b98b      	cbnz	r3, 21560 <d_print_comp_inner+0xedc>
   2153c:	2f03      	cmp	r7, #3
   2153e:	f201 80f9 	bhi.w	22734 <d_print_comp_inner+0x20b0>
   21542:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
   21546:	f1ab 0a40 	sub.w	sl, fp, #64	; 0x40
   2154a:	e88a 000f 	stmia.w	sl, {r0, r1, r2, r3}
   2154e:	f84b 5c40 	str.w	r5, [fp, #-64]
   21552:	2301      	movs	r3, #1
   21554:	eb09 050e 	add.w	r5, r9, lr
   21558:	f8c4 5114 	str.w	r5, [r4, #276]	; 0x114
   2155c:	3701      	adds	r7, #1
   2155e:	60b3      	str	r3, [r6, #8]
   21560:	6836      	ldr	r6, [r6, #0]
   21562:	2e00      	cmp	r6, #0
   21564:	d1de      	bne.n	21524 <d_print_comp_inner+0xea0>
   21566:	f8dc 2008 	ldr.w	r2, [ip, #8]
   2156a:	4641      	mov	r1, r8
   2156c:	4620      	mov	r0, r4
   2156e:	4665      	mov	r5, ip
   21570:	f001 fe2c 	bl	231cc <d_print_comp>
   21574:	9b06      	ldr	r3, [sp, #24]
   21576:	9a00      	ldr	r2, [sp, #0]
   21578:	f8c4 2114 	str.w	r2, [r4, #276]	; 0x114
   2157c:	2b00      	cmp	r3, #0
   2157e:	f47f a94f 	bne.w	20820 <d_print_comp_inner+0x19c>
   21582:	2f01      	cmp	r7, #1
   21584:	d00c      	beq.n	215a0 <d_print_comp_inner+0xf1c>
   21586:	eb09 1907 	add.w	r9, r9, r7, lsl #4
   2158a:	f859 2c0c 	ldr.w	r2, [r9, #-12]
   2158e:	3f01      	subs	r7, #1
   21590:	4641      	mov	r1, r8
   21592:	4620      	mov	r0, r4
   21594:	f001 fe2a 	bl	231ec <d_print_mod>
   21598:	2f01      	cmp	r7, #1
   2159a:	f1a9 0910 	sub.w	r9, r9, #16
   2159e:	d1f4      	bne.n	2158a <d_print_comp_inner+0xf06>
   215a0:	1d2a      	adds	r2, r5, #4
   215a2:	4641      	mov	r1, r8
   215a4:	f8d4 3114 	ldr.w	r3, [r4, #276]	; 0x114
   215a8:	4620      	mov	r0, r4
   215aa:	f002 fa27 	bl	239fc <d_print_array_type.isra.10>
   215ae:	f7ff b937 	b.w	20820 <d_print_comp_inner+0x19c>
   215b2:	bf00      	nop
   215b4:	0002e76b 	.word	0x0002e76b
   215b8:	0002e75f 	.word	0x0002e75f
   215bc:	f9b5 300a 	ldrsh.w	r3, [r5, #10]
   215c0:	2b00      	cmp	r3, #0
   215c2:	f040 8674 	bne.w	222ae <d_print_comp_inner+0x1c2a>
   215c6:	686a      	ldr	r2, [r5, #4]
   215c8:	4bd5      	ldr	r3, [pc, #852]	; (21920 <d_print_comp_inner+0x129c>)
   215ca:	6851      	ldr	r1, [r2, #4]
   215cc:	4299      	cmp	r1, r3
   215ce:	f000 866a 	beq.w	222a6 <d_print_comp_inner+0x1c22>
   215d2:	4641      	mov	r1, r8
   215d4:	4620      	mov	r0, r4
   215d6:	f001 fdf9 	bl	231cc <d_print_comp>
   215da:	f8d4 3100 	ldr.w	r3, [r4, #256]	; 0x100
   215de:	2bff      	cmp	r3, #255	; 0xff
   215e0:	f001 82b2 	beq.w	22b48 <d_print_comp_inner+0x24c4>
   215e4:	1c59      	adds	r1, r3, #1
   215e6:	2220      	movs	r2, #32
   215e8:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
   215ec:	54e2      	strb	r2, [r4, r3]
   215ee:	f884 2104 	strb.w	r2, [r4, #260]	; 0x104
   215f2:	f9b5 3008 	ldrsh.w	r3, [r5, #8]
   215f6:	2b00      	cmp	r3, #0
   215f8:	f000 8595 	beq.w	22126 <d_print_comp_inner+0x1aa2>
   215fc:	4dc9      	ldr	r5, [pc, #804]	; (21924 <d_print_comp_inner+0x12a0>)
   215fe:	f04f 0800 	mov.w	r8, #0
   21602:	1daf      	adds	r7, r5, #6
   21604:	e009      	b.n	2161a <d_print_comp_inner+0xf96>
   21606:	460b      	mov	r3, r1
   21608:	3101      	adds	r1, #1
   2160a:	42bd      	cmp	r5, r7
   2160c:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
   21610:	54e6      	strb	r6, [r4, r3]
   21612:	f884 6104 	strb.w	r6, [r4, #260]	; 0x104
   21616:	f43f a903 	beq.w	20820 <d_print_comp_inner+0x19c>
   2161a:	29ff      	cmp	r1, #255	; 0xff
   2161c:	f815 6b01 	ldrb.w	r6, [r5], #1
   21620:	d1f1      	bne.n	21606 <d_print_comp_inner+0xf82>
   21622:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   21626:	f884 80ff 	strb.w	r8, [r4, #255]	; 0xff
   2162a:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
   2162e:	4620      	mov	r0, r4
   21630:	4798      	blx	r3
   21632:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   21636:	3301      	adds	r3, #1
   21638:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
   2163c:	2101      	movs	r1, #1
   2163e:	2300      	movs	r3, #0
   21640:	e7e3      	b.n	2160a <d_print_comp_inner+0xf86>
   21642:	4eb9      	ldr	r6, [pc, #740]	; (21928 <d_print_comp_inner+0x12a4>)
   21644:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
   21648:	f106 090e 	add.w	r9, r6, #14
   2164c:	f04f 0800 	mov.w	r8, #0
   21650:	e009      	b.n	21666 <d_print_comp_inner+0xfe2>
   21652:	460b      	mov	r3, r1
   21654:	3101      	adds	r1, #1
   21656:	45b1      	cmp	r9, r6
   21658:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
   2165c:	54e7      	strb	r7, [r4, r3]
   2165e:	f884 7104 	strb.w	r7, [r4, #260]	; 0x104
   21662:	f000 83b3 	beq.w	21dcc <d_print_comp_inner+0x1748>
   21666:	29ff      	cmp	r1, #255	; 0xff
   21668:	f816 7f01 	ldrb.w	r7, [r6, #1]!
   2166c:	d1f1      	bne.n	21652 <d_print_comp_inner+0xfce>
   2166e:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   21672:	f884 80ff 	strb.w	r8, [r4, #255]	; 0xff
   21676:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
   2167a:	4620      	mov	r0, r4
   2167c:	4798      	blx	r3
   2167e:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   21682:	3301      	adds	r3, #1
   21684:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
   21688:	2101      	movs	r1, #1
   2168a:	2300      	movs	r3, #0
   2168c:	e7e3      	b.n	21656 <d_print_comp_inner+0xfd2>
   2168e:	4ea7      	ldr	r6, [pc, #668]	; (2192c <d_print_comp_inner+0x12a8>)
   21690:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
   21694:	f106 0a1a 	add.w	sl, r6, #26
   21698:	f04f 0900 	mov.w	r9, #0
   2169c:	e009      	b.n	216b2 <d_print_comp_inner+0x102e>
   2169e:	460b      	mov	r3, r1
   216a0:	3101      	adds	r1, #1
   216a2:	4556      	cmp	r6, sl
   216a4:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
   216a8:	54e7      	strb	r7, [r4, r3]
   216aa:	f884 7104 	strb.w	r7, [r4, #260]	; 0x104
   216ae:	f000 82ef 	beq.w	21c90 <d_print_comp_inner+0x160c>
   216b2:	29ff      	cmp	r1, #255	; 0xff
   216b4:	f816 7f01 	ldrb.w	r7, [r6, #1]!
   216b8:	d1f1      	bne.n	2169e <d_print_comp_inner+0x101a>
   216ba:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   216be:	f884 90ff 	strb.w	r9, [r4, #255]	; 0xff
   216c2:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
   216c6:	4620      	mov	r0, r4
   216c8:	4798      	blx	r3
   216ca:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   216ce:	3301      	adds	r3, #1
   216d0:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
   216d4:	2101      	movs	r1, #1
   216d6:	2300      	movs	r3, #0
   216d8:	e7e3      	b.n	216a2 <d_print_comp_inner+0x101e>
   216da:	6869      	ldr	r1, [r5, #4]
   216dc:	f7fc ff2a 	bl	1e534 <d_find_pack>
   216e0:	f04f 0900 	mov.w	r9, #0
   216e4:	2800      	cmp	r0, #0
   216e6:	f001 835d 	beq.w	22da4 <d_print_comp_inner+0x2720>
   216ea:	7803      	ldrb	r3, [r0, #0]
   216ec:	2b2f      	cmp	r3, #47	; 0x2f
   216ee:	f040 8457 	bne.w	21fa0 <d_print_comp_inner+0x191c>
   216f2:	6843      	ldr	r3, [r0, #4]
   216f4:	2b00      	cmp	r3, #0
   216f6:	f000 8453 	beq.w	21fa0 <d_print_comp_inner+0x191c>
   216fa:	6880      	ldr	r0, [r0, #8]
   216fc:	f109 0901 	add.w	r9, r9, #1
   21700:	2800      	cmp	r0, #0
   21702:	d1f2      	bne.n	216ea <d_print_comp_inner+0x1066>
   21704:	686b      	ldr	r3, [r5, #4]
   21706:	9300      	str	r3, [sp, #0]
   21708:	f109 33ff 	add.w	r3, r9, #4294967295
   2170c:	9301      	str	r3, [sp, #4]
   2170e:	f04f 0a00 	mov.w	sl, #0
   21712:	f8c4 7120 	str.w	r7, [r4, #288]	; 0x120
   21716:	9a00      	ldr	r2, [sp, #0]
   21718:	4641      	mov	r1, r8
   2171a:	4620      	mov	r0, r4
   2171c:	f001 fd56 	bl	231cc <d_print_comp>
   21720:	9b01      	ldr	r3, [sp, #4]
   21722:	42bb      	cmp	r3, r7
   21724:	f340 81ab 	ble.w	21a7e <d_print_comp_inner+0x13fa>
   21728:	4d81      	ldr	r5, [pc, #516]	; (21930 <d_print_comp_inner+0x12ac>)
   2172a:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
   2172e:	f105 0b02 	add.w	fp, r5, #2
   21732:	e009      	b.n	21748 <d_print_comp_inner+0x10c4>
   21734:	460b      	mov	r3, r1
   21736:	3101      	adds	r1, #1
   21738:	45ab      	cmp	fp, r5
   2173a:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
   2173e:	54e6      	strb	r6, [r4, r3]
   21740:	f884 6104 	strb.w	r6, [r4, #260]	; 0x104
   21744:	f000 819b 	beq.w	21a7e <d_print_comp_inner+0x13fa>
   21748:	29ff      	cmp	r1, #255	; 0xff
   2174a:	f815 6b01 	ldrb.w	r6, [r5], #1
   2174e:	d1f1      	bne.n	21734 <d_print_comp_inner+0x10b0>
   21750:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   21754:	f884 a0ff 	strb.w	sl, [r4, #255]	; 0xff
   21758:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
   2175c:	4620      	mov	r0, r4
   2175e:	4798      	blx	r3
   21760:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   21764:	3301      	adds	r3, #1
   21766:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
   2176a:	2101      	movs	r1, #1
   2176c:	2300      	movs	r3, #0
   2176e:	e7e3      	b.n	21738 <d_print_comp_inner+0x10b4>
   21770:	4e70      	ldr	r6, [pc, #448]	; (21934 <d_print_comp_inner+0x12b0>)
   21772:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
   21776:	f106 0a16 	add.w	sl, r6, #22
   2177a:	f04f 0900 	mov.w	r9, #0
   2177e:	e009      	b.n	21794 <d_print_comp_inner+0x1110>
   21780:	460b      	mov	r3, r1
   21782:	3101      	adds	r1, #1
   21784:	45b2      	cmp	sl, r6
   21786:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
   2178a:	54e7      	strb	r7, [r4, r3]
   2178c:	f884 7104 	strb.w	r7, [r4, #260]	; 0x104
   21790:	f000 835f 	beq.w	21e52 <d_print_comp_inner+0x17ce>
   21794:	29ff      	cmp	r1, #255	; 0xff
   21796:	f816 7f01 	ldrb.w	r7, [r6, #1]!
   2179a:	d1f1      	bne.n	21780 <d_print_comp_inner+0x10fc>
   2179c:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   217a0:	f884 90ff 	strb.w	r9, [r4, #255]	; 0xff
   217a4:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
   217a8:	4620      	mov	r0, r4
   217aa:	4798      	blx	r3
   217ac:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   217b0:	3301      	adds	r3, #1
   217b2:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
   217b6:	2101      	movs	r1, #1
   217b8:	2300      	movs	r3, #0
   217ba:	e7e3      	b.n	21784 <d_print_comp_inner+0x1100>
   217bc:	4e5e      	ldr	r6, [pc, #376]	; (21938 <d_print_comp_inner+0x12b4>)
   217be:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
   217c2:	f106 0a0e 	add.w	sl, r6, #14
   217c6:	f04f 0900 	mov.w	r9, #0
   217ca:	e009      	b.n	217e0 <d_print_comp_inner+0x115c>
   217cc:	460b      	mov	r3, r1
   217ce:	3101      	adds	r1, #1
   217d0:	4556      	cmp	r6, sl
   217d2:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
   217d6:	54e7      	strb	r7, [r4, r3]
   217d8:	f884 7104 	strb.w	r7, [r4, #260]	; 0x104
   217dc:	f000 83a0 	beq.w	21f20 <d_print_comp_inner+0x189c>
   217e0:	29ff      	cmp	r1, #255	; 0xff
   217e2:	f816 7f01 	ldrb.w	r7, [r6, #1]!
   217e6:	d1f1      	bne.n	217cc <d_print_comp_inner+0x1148>
   217e8:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   217ec:	f884 90ff 	strb.w	r9, [r4, #255]	; 0xff
   217f0:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
   217f4:	4620      	mov	r0, r4
   217f6:	4798      	blx	r3
   217f8:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   217fc:	3301      	adds	r3, #1
   217fe:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
   21802:	2101      	movs	r1, #1
   21804:	2300      	movs	r3, #0
   21806:	e7e3      	b.n	217d0 <d_print_comp_inner+0x114c>
   21808:	686a      	ldr	r2, [r5, #4]
   2180a:	7811      	ldrb	r1, [r2, #0]
   2180c:	2927      	cmp	r1, #39	; 0x27
   2180e:	f000 8615 	beq.w	2243c <d_print_comp_inner+0x1db8>
   21812:	2600      	movs	r6, #0
   21814:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
   21818:	29ff      	cmp	r1, #255	; 0xff
   2181a:	f001 80c5 	beq.w	229a8 <d_print_comp_inner+0x2324>
   2181e:	2328      	movs	r3, #40	; 0x28
   21820:	1c4a      	adds	r2, r1, #1
   21822:	f8c4 2100 	str.w	r2, [r4, #256]	; 0x100
   21826:	5463      	strb	r3, [r4, r1]
   21828:	f884 3104 	strb.w	r3, [r4, #260]	; 0x104
   2182c:	686a      	ldr	r2, [r5, #4]
   2182e:	4641      	mov	r1, r8
   21830:	4620      	mov	r0, r4
   21832:	f001 fccb 	bl	231cc <d_print_comp>
   21836:	f8d4 3100 	ldr.w	r3, [r4, #256]	; 0x100
   2183a:	2bff      	cmp	r3, #255	; 0xff
   2183c:	f001 8099 	beq.w	22972 <d_print_comp_inner+0x22ee>
   21840:	1c59      	adds	r1, r3, #1
   21842:	2229      	movs	r2, #41	; 0x29
   21844:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
   21848:	54e2      	strb	r2, [r4, r3]
   2184a:	f884 2104 	strb.w	r2, [r4, #260]	; 0x104
   2184e:	782b      	ldrb	r3, [r5, #0]
   21850:	2b3d      	cmp	r3, #61	; 0x3d
   21852:	f000 86e6 	beq.w	22622 <d_print_comp_inner+0x1f9e>
   21856:	2e08      	cmp	r6, #8
   21858:	f000 867f 	beq.w	2255a <d_print_comp_inner+0x1ed6>
   2185c:	68aa      	ldr	r2, [r5, #8]
   2185e:	4641      	mov	r1, r8
   21860:	4620      	mov	r0, r4
   21862:	f001 fcb3 	bl	231cc <d_print_comp>
   21866:	f7fe bfdb 	b.w	20820 <d_print_comp_inner+0x19c>
   2186a:	2301      	movs	r3, #1
   2186c:	f8c0 3118 	str.w	r3, [r0, #280]	; 0x118
   21870:	f7fe bfd6 	b.w	20820 <d_print_comp_inner+0x19c>
   21874:	686a      	ldr	r2, [r5, #4]
   21876:	4931      	ldr	r1, [pc, #196]	; (2193c <d_print_comp_inner+0x12b8>)
   21878:	a804      	add	r0, sp, #16
   2187a:	f006 fdfb 	bl	28474 <sprintf>
   2187e:	a804      	add	r0, sp, #16
   21880:	f006 ff9e 	bl	287c0 <strlen>
   21884:	2800      	cmp	r0, #0
   21886:	f43e afcb 	beq.w	20820 <d_print_comp_inner+0x19c>
   2188a:	ad04      	add	r5, sp, #16
   2188c:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
   21890:	182f      	adds	r7, r5, r0
   21892:	f04f 0800 	mov.w	r8, #0
   21896:	e009      	b.n	218ac <d_print_comp_inner+0x1228>
   21898:	460b      	mov	r3, r1
   2189a:	3101      	adds	r1, #1
   2189c:	42bd      	cmp	r5, r7
   2189e:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
   218a2:	54e6      	strb	r6, [r4, r3]
   218a4:	f884 6104 	strb.w	r6, [r4, #260]	; 0x104
   218a8:	f43e afba 	beq.w	20820 <d_print_comp_inner+0x19c>
   218ac:	29ff      	cmp	r1, #255	; 0xff
   218ae:	f815 6b01 	ldrb.w	r6, [r5], #1
   218b2:	d1f1      	bne.n	21898 <d_print_comp_inner+0x1214>
   218b4:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   218b8:	f884 80ff 	strb.w	r8, [r4, #255]	; 0xff
   218bc:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
   218c0:	4620      	mov	r0, r4
   218c2:	4798      	blx	r3
   218c4:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   218c8:	3301      	adds	r3, #1
   218ca:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
   218ce:	2101      	movs	r1, #1
   218d0:	2300      	movs	r3, #0
   218d2:	e7e3      	b.n	2189c <d_print_comp_inner+0x1218>
   218d4:	4e1a      	ldr	r6, [pc, #104]	; (21940 <d_print_comp_inner+0x12bc>)
   218d6:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
   218da:	f106 0a1c 	add.w	sl, r6, #28
   218de:	f04f 0900 	mov.w	r9, #0
   218e2:	e009      	b.n	218f8 <d_print_comp_inner+0x1274>
   218e4:	460b      	mov	r3, r1
   218e6:	3101      	adds	r1, #1
   218e8:	4556      	cmp	r6, sl
   218ea:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
   218ee:	54e7      	strb	r7, [r4, r3]
   218f0:	f884 7104 	strb.w	r7, [r4, #260]	; 0x104
   218f4:	f000 82fa 	beq.w	21eec <d_print_comp_inner+0x1868>
   218f8:	29ff      	cmp	r1, #255	; 0xff
   218fa:	f816 7f01 	ldrb.w	r7, [r6, #1]!
   218fe:	d1f1      	bne.n	218e4 <d_print_comp_inner+0x1260>
   21900:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   21904:	f884 90ff 	strb.w	r9, [r4, #255]	; 0xff
   21908:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
   2190c:	4620      	mov	r0, r4
   2190e:	4798      	blx	r3
   21910:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   21914:	3301      	adds	r3, #1
   21916:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
   2191a:	2101      	movs	r1, #1
   2191c:	2300      	movs	r3, #0
   2191e:	e7e3      	b.n	218e8 <d_print_comp_inner+0x1264>
   21920:	0002df28 	.word	0x0002df28
   21924:	0002e74c 	.word	0x0002e74c
   21928:	0002e82f 	.word	0x0002e82f
   2192c:	0002e727 	.word	0x0002e727
   21930:	0002e75c 	.word	0x0002e75c
   21934:	0002e72b 	.word	0x0002e72b
   21938:	0002e7af 	.word	0x0002e7af
   2193c:	0002e580 	.word	0x0002e580
   21940:	0002e7ff 	.word	0x0002e7ff
   21944:	68ab      	ldr	r3, [r5, #8]
   21946:	781a      	ldrb	r2, [r3, #0]
   21948:	2a3a      	cmp	r2, #58	; 0x3a
   2194a:	f47e af7d 	bne.w	20848 <d_print_comp_inner+0x1c4>
   2194e:	689b      	ldr	r3, [r3, #8]
   21950:	781b      	ldrb	r3, [r3, #0]
   21952:	2b3b      	cmp	r3, #59	; 0x3b
   21954:	f47e af78 	bne.w	20848 <d_print_comp_inner+0x1c4>
   21958:	f105 0308 	add.w	r3, r5, #8
   2195c:	686a      	ldr	r2, [r5, #4]
   2195e:	f002 fabf 	bl	23ee0 <d_maybe_print_fold_expression.isra.15>
   21962:	4606      	mov	r6, r0
   21964:	2800      	cmp	r0, #0
   21966:	f47e af5b 	bne.w	20820 <d_print_comp_inner+0x19c>
   2196a:	f8d5 a004 	ldr.w	sl, [r5, #4]
   2196e:	68aa      	ldr	r2, [r5, #8]
   21970:	f8da 1004 	ldr.w	r1, [sl, #4]
   21974:	6893      	ldr	r3, [r2, #8]
   21976:	6808      	ldr	r0, [r1, #0]
   21978:	49d6      	ldr	r1, [pc, #856]	; (21cd4 <d_print_comp_inner+0x1650>)
   2197a:	f8d2 9004 	ldr.w	r9, [r2, #4]
   2197e:	685f      	ldr	r7, [r3, #4]
   21980:	689d      	ldr	r5, [r3, #8]
   21982:	f006 fda1 	bl	284c8 <strcmp>
   21986:	2800      	cmp	r0, #0
   21988:	f001 82e2 	beq.w	22f50 <d_print_comp_inner+0x28cc>
   2198c:	2204      	movs	r2, #4
   2198e:	49d2      	ldr	r1, [pc, #840]	; (21cd8 <d_print_comp_inner+0x1654>)
   21990:	4620      	mov	r0, r4
   21992:	f7fc fba3 	bl	1e0dc <d_append_buffer>
   21996:	f8d9 3004 	ldr.w	r3, [r9, #4]
   2199a:	b183      	cbz	r3, 219be <d_print_comp_inner+0x133a>
   2199c:	4641      	mov	r1, r8
   2199e:	464a      	mov	r2, r9
   219a0:	4620      	mov	r0, r4
   219a2:	f002 fa39 	bl	23e18 <d_print_subexpr>
   219a6:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
   219aa:	29ff      	cmp	r1, #255	; 0xff
   219ac:	f001 83ec 	beq.w	23188 <d_print_comp_inner+0x2b04>
   219b0:	2320      	movs	r3, #32
   219b2:	1c4a      	adds	r2, r1, #1
   219b4:	f8c4 2100 	str.w	r2, [r4, #256]	; 0x100
   219b8:	5463      	strb	r3, [r4, r1]
   219ba:	f884 3104 	strb.w	r3, [r4, #260]	; 0x104
   219be:	463a      	mov	r2, r7
   219c0:	4641      	mov	r1, r8
   219c2:	4620      	mov	r0, r4
   219c4:	f001 fc02 	bl	231cc <d_print_comp>
   219c8:	2d00      	cmp	r5, #0
   219ca:	f43e af29 	beq.w	20820 <d_print_comp_inner+0x19c>
   219ce:	462a      	mov	r2, r5
   219d0:	4641      	mov	r1, r8
   219d2:	4620      	mov	r0, r4
   219d4:	f002 fa20 	bl	23e18 <d_print_subexpr>
   219d8:	f7fe bf22 	b.w	20820 <d_print_comp_inner+0x19c>
   219dc:	4ebf      	ldr	r6, [pc, #764]	; (21cdc <d_print_comp_inner+0x1658>)
   219de:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
   219e2:	f106 0a08 	add.w	sl, r6, #8
   219e6:	f04f 0900 	mov.w	r9, #0
   219ea:	e009      	b.n	21a00 <d_print_comp_inner+0x137c>
   219ec:	460b      	mov	r3, r1
   219ee:	3101      	adds	r1, #1
   219f0:	4556      	cmp	r6, sl
   219f2:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
   219f6:	54e7      	strb	r7, [r4, r3]
   219f8:	f884 7104 	strb.w	r7, [r4, #260]	; 0x104
   219fc:	f000 80d8 	beq.w	21bb0 <d_print_comp_inner+0x152c>
   21a00:	29ff      	cmp	r1, #255	; 0xff
   21a02:	f816 7f01 	ldrb.w	r7, [r6, #1]!
   21a06:	d1f1      	bne.n	219ec <d_print_comp_inner+0x1368>
   21a08:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   21a0c:	f884 90ff 	strb.w	r9, [r4, #255]	; 0xff
   21a10:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
   21a14:	4620      	mov	r0, r4
   21a16:	4798      	blx	r3
   21a18:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   21a1c:	3301      	adds	r3, #1
   21a1e:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
   21a22:	2101      	movs	r1, #1
   21a24:	2300      	movs	r3, #0
   21a26:	e7e3      	b.n	219f0 <d_print_comp_inner+0x136c>
   21a28:	4ead      	ldr	r6, [pc, #692]	; (21ce0 <d_print_comp_inner+0x165c>)
   21a2a:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
   21a2e:	f106 0a1d 	add.w	sl, r6, #29
   21a32:	f04f 0900 	mov.w	r9, #0
   21a36:	e009      	b.n	21a4c <d_print_comp_inner+0x13c8>
   21a38:	460b      	mov	r3, r1
   21a3a:	3101      	adds	r1, #1
   21a3c:	45b2      	cmp	sl, r6
   21a3e:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
   21a42:	54e7      	strb	r7, [r4, r3]
   21a44:	f884 7104 	strb.w	r7, [r4, #260]	; 0x104
   21a48:	f000 81fc 	beq.w	21e44 <d_print_comp_inner+0x17c0>
   21a4c:	29ff      	cmp	r1, #255	; 0xff
   21a4e:	f816 7f01 	ldrb.w	r7, [r6, #1]!
   21a52:	d1f1      	bne.n	21a38 <d_print_comp_inner+0x13b4>
   21a54:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   21a58:	f884 90ff 	strb.w	r9, [r4, #255]	; 0xff
   21a5c:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
   21a60:	4620      	mov	r0, r4
   21a62:	4798      	blx	r3
   21a64:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   21a68:	3301      	adds	r3, #1
   21a6a:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
   21a6e:	2101      	movs	r1, #1
   21a70:	2300      	movs	r3, #0
   21a72:	e7e3      	b.n	21a3c <d_print_comp_inner+0x13b8>
   21a74:	2301      	movs	r3, #1
   21a76:	f8c0 3118 	str.w	r3, [r0, #280]	; 0x118
   21a7a:	f7fe bed1 	b.w	20820 <d_print_comp_inner+0x19c>
   21a7e:	3701      	adds	r7, #1
   21a80:	454f      	cmp	r7, r9
   21a82:	f47f ae46 	bne.w	21712 <d_print_comp_inner+0x108e>
   21a86:	f7fe becb 	b.w	20820 <d_print_comp_inner+0x19c>
   21a8a:	6876      	ldr	r6, [r6, #4]
   21a8c:	2e00      	cmp	r6, #0
   21a8e:	f001 806e 	beq.w	22b6e <d_print_comp_inner+0x24ea>
   21a92:	2f04      	cmp	r7, #4
   21a94:	f103 0310 	add.w	r3, r3, #16
   21a98:	f47f a9bd 	bne.w	20e16 <d_print_comp_inner+0x792>
   21a9c:	f8c4 0114 	str.w	r0, [r4, #276]	; 0x114
   21aa0:	2301      	movs	r3, #1
   21aa2:	f8c4 3118 	str.w	r3, [r4, #280]	; 0x118
   21aa6:	f7fe bebb 	b.w	20820 <d_print_comp_inner+0x19c>
   21aaa:	4e8e      	ldr	r6, [pc, #568]	; (21ce4 <d_print_comp_inner+0x1660>)
   21aac:	686a      	ldr	r2, [r5, #4]
   21aae:	4641      	mov	r1, r8
   21ab0:	4620      	mov	r0, r4
   21ab2:	f001 fb8b 	bl	231cc <d_print_comp>
   21ab6:	f106 0a04 	add.w	sl, r6, #4
   21aba:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
   21abe:	f04f 0900 	mov.w	r9, #0
   21ac2:	e008      	b.n	21ad6 <d_print_comp_inner+0x1452>
   21ac4:	460b      	mov	r3, r1
   21ac6:	3101      	adds	r1, #1
   21ac8:	45b2      	cmp	sl, r6
   21aca:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
   21ace:	54e7      	strb	r7, [r4, r3]
   21ad0:	f884 7104 	strb.w	r7, [r4, #260]	; 0x104
   21ad4:	d013      	beq.n	21afe <d_print_comp_inner+0x147a>
   21ad6:	29ff      	cmp	r1, #255	; 0xff
   21ad8:	f816 7b01 	ldrb.w	r7, [r6], #1
   21adc:	d1f2      	bne.n	21ac4 <d_print_comp_inner+0x1440>
   21ade:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   21ae2:	f884 90ff 	strb.w	r9, [r4, #255]	; 0xff
   21ae6:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
   21aea:	4620      	mov	r0, r4
   21aec:	4798      	blx	r3
   21aee:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   21af2:	3301      	adds	r3, #1
   21af4:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
   21af8:	2101      	movs	r1, #1
   21afa:	2300      	movs	r3, #0
   21afc:	e7e4      	b.n	21ac8 <d_print_comp_inner+0x1444>
   21afe:	68aa      	ldr	r2, [r5, #8]
   21b00:	4641      	mov	r1, r8
   21b02:	4620      	mov	r0, r4
   21b04:	f001 fb62 	bl	231cc <d_print_comp>
   21b08:	f7fe be8a 	b.w	20820 <d_print_comp_inner+0x19c>
   21b0c:	686a      	ldr	r2, [r5, #4]
   21b0e:	4641      	mov	r1, r8
   21b10:	4620      	mov	r0, r4
   21b12:	f001 fb5b 	bl	231cc <d_print_comp>
   21b16:	f7fe be83 	b.w	20820 <d_print_comp_inner+0x19c>
   21b1a:	686a      	ldr	r2, [r5, #4]
   21b1c:	4641      	mov	r1, r8
   21b1e:	4620      	mov	r0, r4
   21b20:	f001 fb54 	bl	231cc <d_print_comp>
   21b24:	f7fe be7c 	b.w	20820 <d_print_comp_inner+0x19c>
   21b28:	686a      	ldr	r2, [r5, #4]
   21b2a:	4641      	mov	r1, r8
   21b2c:	4620      	mov	r0, r4
   21b2e:	f001 fb4d 	bl	231cc <d_print_comp>
   21b32:	f7fe be75 	b.w	20820 <d_print_comp_inner+0x19c>
   21b36:	686a      	ldr	r2, [r5, #4]
   21b38:	4641      	mov	r1, r8
   21b3a:	4620      	mov	r0, r4
   21b3c:	f001 fb46 	bl	231cc <d_print_comp>
   21b40:	f7fe be6e 	b.w	20820 <d_print_comp_inner+0x19c>
   21b44:	686a      	ldr	r2, [r5, #4]
   21b46:	4641      	mov	r1, r8
   21b48:	4620      	mov	r0, r4
   21b4a:	f001 fb3f 	bl	231cc <d_print_comp>
   21b4e:	f7fe be67 	b.w	20820 <d_print_comp_inner+0x19c>
   21b52:	686a      	ldr	r2, [r5, #4]
   21b54:	4641      	mov	r1, r8
   21b56:	4620      	mov	r0, r4
   21b58:	f001 fb38 	bl	231cc <d_print_comp>
   21b5c:	f7fe be60 	b.w	20820 <d_print_comp_inner+0x19c>
   21b60:	686a      	ldr	r2, [r5, #4]
   21b62:	4641      	mov	r1, r8
   21b64:	4620      	mov	r0, r4
   21b66:	f001 fb31 	bl	231cc <d_print_comp>
   21b6a:	f7fe be59 	b.w	20820 <d_print_comp_inner+0x19c>
   21b6e:	686a      	ldr	r2, [r5, #4]
   21b70:	4641      	mov	r1, r8
   21b72:	4620      	mov	r0, r4
   21b74:	f001 fb2a 	bl	231cc <d_print_comp>
   21b78:	f7fe be52 	b.w	20820 <d_print_comp_inner+0x19c>
   21b7c:	686a      	ldr	r2, [r5, #4]
   21b7e:	4641      	mov	r1, r8
   21b80:	4620      	mov	r0, r4
   21b82:	f001 fb23 	bl	231cc <d_print_comp>
   21b86:	f7fe be4b 	b.w	20820 <d_print_comp_inner+0x19c>
   21b8a:	4641      	mov	r1, r8
   21b8c:	68aa      	ldr	r2, [r5, #8]
   21b8e:	4620      	mov	r0, r4
   21b90:	f001 fb1c 	bl	231cc <d_print_comp>
   21b94:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
   21b98:	29ff      	cmp	r1, #255	; 0xff
   21b9a:	f000 8560 	beq.w	2265e <d_print_comp_inner+0x1fda>
   21b9e:	1c4a      	adds	r2, r1, #1
   21ba0:	235d      	movs	r3, #93	; 0x5d
   21ba2:	f8c4 2100 	str.w	r2, [r4, #256]	; 0x100
   21ba6:	5463      	strb	r3, [r4, r1]
   21ba8:	f884 3104 	strb.w	r3, [r4, #260]	; 0x104
   21bac:	f7fe be38 	b.w	20820 <d_print_comp_inner+0x19c>
   21bb0:	f8d4 311c 	ldr.w	r3, [r4, #284]	; 0x11c
   21bb4:	4e4c      	ldr	r6, [pc, #304]	; (21ce8 <d_print_comp_inner+0x1664>)
   21bb6:	3301      	adds	r3, #1
   21bb8:	f8c4 311c 	str.w	r3, [r4, #284]	; 0x11c
   21bbc:	4641      	mov	r1, r8
   21bbe:	686a      	ldr	r2, [r5, #4]
   21bc0:	4620      	mov	r0, r4
   21bc2:	f001 fb03 	bl	231cc <d_print_comp>
   21bc6:	f8d4 311c 	ldr.w	r3, [r4, #284]	; 0x11c
   21bca:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
   21bce:	3b01      	subs	r3, #1
   21bd0:	f8c4 311c 	str.w	r3, [r4, #284]	; 0x11c
   21bd4:	f106 0902 	add.w	r9, r6, #2
   21bd8:	f04f 0800 	mov.w	r8, #0
   21bdc:	e008      	b.n	21bf0 <d_print_comp_inner+0x156c>
   21bde:	460b      	mov	r3, r1
   21be0:	3101      	adds	r1, #1
   21be2:	454e      	cmp	r6, r9
   21be4:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
   21be8:	54e7      	strb	r7, [r4, r3]
   21bea:	f884 7104 	strb.w	r7, [r4, #260]	; 0x104
   21bee:	d013      	beq.n	21c18 <d_print_comp_inner+0x1594>
   21bf0:	29ff      	cmp	r1, #255	; 0xff
   21bf2:	f816 7b01 	ldrb.w	r7, [r6], #1
   21bf6:	d1f2      	bne.n	21bde <d_print_comp_inner+0x155a>
   21bf8:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   21bfc:	f884 80ff 	strb.w	r8, [r4, #255]	; 0xff
   21c00:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
   21c04:	4620      	mov	r0, r4
   21c06:	4798      	blx	r3
   21c08:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   21c0c:	3301      	adds	r3, #1
   21c0e:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
   21c12:	2101      	movs	r1, #1
   21c14:	2300      	movs	r3, #0
   21c16:	e7e4      	b.n	21be2 <d_print_comp_inner+0x155e>
   21c18:	68aa      	ldr	r2, [r5, #8]
   21c1a:	4934      	ldr	r1, [pc, #208]	; (21cec <d_print_comp_inner+0x1668>)
   21c1c:	3201      	adds	r2, #1
   21c1e:	a804      	add	r0, sp, #16
   21c20:	f006 fc28 	bl	28474 <sprintf>
   21c24:	a804      	add	r0, sp, #16
   21c26:	f006 fdcb 	bl	287c0 <strlen>
   21c2a:	b318      	cbz	r0, 21c74 <d_print_comp_inner+0x15f0>
   21c2c:	ad04      	add	r5, sp, #16
   21c2e:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
   21c32:	182f      	adds	r7, r5, r0
   21c34:	f04f 0800 	mov.w	r8, #0
   21c38:	e008      	b.n	21c4c <d_print_comp_inner+0x15c8>
   21c3a:	460b      	mov	r3, r1
   21c3c:	3101      	adds	r1, #1
   21c3e:	42af      	cmp	r7, r5
   21c40:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
   21c44:	54e6      	strb	r6, [r4, r3]
   21c46:	f884 6104 	strb.w	r6, [r4, #260]	; 0x104
   21c4a:	d015      	beq.n	21c78 <d_print_comp_inner+0x15f4>
   21c4c:	29ff      	cmp	r1, #255	; 0xff
   21c4e:	f815 6b01 	ldrb.w	r6, [r5], #1
   21c52:	d1f2      	bne.n	21c3a <d_print_comp_inner+0x15b6>
   21c54:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   21c58:	f884 80ff 	strb.w	r8, [r4, #255]	; 0xff
   21c5c:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
   21c60:	4620      	mov	r0, r4
   21c62:	4798      	blx	r3
   21c64:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   21c68:	3301      	adds	r3, #1
   21c6a:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
   21c6e:	2101      	movs	r1, #1
   21c70:	2300      	movs	r3, #0
   21c72:	e7e4      	b.n	21c3e <d_print_comp_inner+0x15ba>
   21c74:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
   21c78:	29ff      	cmp	r1, #255	; 0xff
   21c7a:	f000 8560 	beq.w	2273e <d_print_comp_inner+0x20ba>
   21c7e:	1c4a      	adds	r2, r1, #1
   21c80:	237d      	movs	r3, #125	; 0x7d
   21c82:	f8c4 2100 	str.w	r2, [r4, #256]	; 0x100
   21c86:	5463      	strb	r3, [r4, r1]
   21c88:	f884 3104 	strb.w	r3, [r4, #260]	; 0x104
   21c8c:	f7fe bdc8 	b.w	20820 <d_print_comp_inner+0x19c>
   21c90:	686a      	ldr	r2, [r5, #4]
   21c92:	4641      	mov	r1, r8
   21c94:	4620      	mov	r0, r4
   21c96:	f001 fa99 	bl	231cc <d_print_comp>
   21c9a:	f7fe bdc1 	b.w	20820 <d_print_comp_inner+0x19c>
   21c9e:	4641      	mov	r1, r8
   21ca0:	68aa      	ldr	r2, [r5, #8]
   21ca2:	4620      	mov	r0, r4
   21ca4:	f001 fa92 	bl	231cc <d_print_comp>
   21ca8:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
   21cac:	29ff      	cmp	r1, #255	; 0xff
   21cae:	f000 850b 	beq.w	226c8 <d_print_comp_inner+0x2044>
   21cb2:	1c4a      	adds	r2, r1, #1
   21cb4:	235d      	movs	r3, #93	; 0x5d
   21cb6:	f8c4 2100 	str.w	r2, [r4, #256]	; 0x100
   21cba:	5463      	strb	r3, [r4, r1]
   21cbc:	f884 3104 	strb.w	r3, [r4, #260]	; 0x104
   21cc0:	f7fe bdae 	b.w	20820 <d_print_comp_inner+0x19c>
   21cc4:	686a      	ldr	r2, [r5, #4]
   21cc6:	4641      	mov	r1, r8
   21cc8:	4620      	mov	r0, r4
   21cca:	f001 fa7f 	bl	231cc <d_print_comp>
   21cce:	f7fe bda7 	b.w	20820 <d_print_comp_inner+0x19c>
   21cd2:	bf00      	nop
   21cd4:	0002e594 	.word	0x0002e594
   21cd8:	0002e78c 	.word	0x0002e78c
   21cdc:	0002e81f 	.word	0x0002e81f
   21ce0:	0002e7df 	.word	0x0002e7df
   21ce4:	0002e630 	.word	0x0002e630
   21ce8:	0002e82c 	.word	0x0002e82c
   21cec:	0002e580 	.word	0x0002e580
   21cf0:	f8da 5004 	ldr.w	r5, [sl, #4]
   21cf4:	782b      	ldrb	r3, [r5, #0]
   21cf6:	3b61      	subs	r3, #97	; 0x61
   21cf8:	2b19      	cmp	r3, #25
   21cfa:	d809      	bhi.n	21d10 <d_print_comp_inner+0x168c>
   21cfc:	29ff      	cmp	r1, #255	; 0xff
   21cfe:	f000 8793 	beq.w	22c28 <d_print_comp_inner+0x25a4>
   21d02:	2320      	movs	r3, #32
   21d04:	1c4a      	adds	r2, r1, #1
   21d06:	f8c4 2100 	str.w	r2, [r4, #256]	; 0x100
   21d0a:	5463      	strb	r3, [r4, r1]
   21d0c:	f884 3104 	strb.w	r3, [r4, #260]	; 0x104
   21d10:	19eb      	adds	r3, r5, r7
   21d12:	f813 3c01 	ldrb.w	r3, [r3, #-1]
   21d16:	2b20      	cmp	r3, #32
   21d18:	bf08      	it	eq
   21d1a:	f107 37ff 	addeq.w	r7, r7, #4294967295
   21d1e:	2f00      	cmp	r7, #0
   21d20:	f43e ad7e 	beq.w	20820 <d_print_comp_inner+0x19c>
   21d24:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
   21d28:	442f      	add	r7, r5
   21d2a:	f04f 0800 	mov.w	r8, #0
   21d2e:	e009      	b.n	21d44 <d_print_comp_inner+0x16c0>
   21d30:	460b      	mov	r3, r1
   21d32:	3101      	adds	r1, #1
   21d34:	42af      	cmp	r7, r5
   21d36:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
   21d3a:	54e6      	strb	r6, [r4, r3]
   21d3c:	f884 6104 	strb.w	r6, [r4, #260]	; 0x104
   21d40:	f43e ad6e 	beq.w	20820 <d_print_comp_inner+0x19c>
   21d44:	29ff      	cmp	r1, #255	; 0xff
   21d46:	f815 6b01 	ldrb.w	r6, [r5], #1
   21d4a:	d1f1      	bne.n	21d30 <d_print_comp_inner+0x16ac>
   21d4c:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   21d50:	f884 80ff 	strb.w	r8, [r4, #255]	; 0xff
   21d54:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
   21d58:	4620      	mov	r0, r4
   21d5a:	4798      	blx	r3
   21d5c:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   21d60:	3301      	adds	r3, #1
   21d62:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
   21d66:	2101      	movs	r1, #1
   21d68:	2300      	movs	r3, #0
   21d6a:	e7e3      	b.n	21d34 <d_print_comp_inner+0x16b0>
   21d6c:	f8d4 2144 	ldr.w	r2, [r4, #324]	; 0x144
   21d70:	b13a      	cbz	r2, 21d82 <d_print_comp_inner+0x16fe>
   21d72:	ab14      	add	r3, sp, #80	; 0x50
   21d74:	f8d4 1110 	ldr.w	r1, [r4, #272]	; 0x110
   21d78:	f843 1d48 	str.w	r1, [r3, #-72]!
   21d7c:	9203      	str	r2, [sp, #12]
   21d7e:	f8c4 3110 	str.w	r3, [r4, #272]	; 0x110
   21d82:	686b      	ldr	r3, [r5, #4]
   21d84:	781a      	ldrb	r2, [r3, #0]
   21d86:	2a04      	cmp	r2, #4
   21d88:	f000 830e 	beq.w	223a8 <d_print_comp_inner+0x1d24>
   21d8c:	a804      	add	r0, sp, #16
   21d8e:	461a      	mov	r2, r3
   21d90:	f8d4 5128 	ldr.w	r5, [r4, #296]	; 0x128
   21d94:	f8c4 0128 	str.w	r0, [r4, #296]	; 0x128
   21d98:	4641      	mov	r1, r8
   21d9a:	4620      	mov	r0, r4
   21d9c:	9304      	str	r3, [sp, #16]
   21d9e:	9505      	str	r5, [sp, #20]
   21da0:	f7fe fc70 	bl	20684 <d_print_comp_inner>
   21da4:	f8d4 3144 	ldr.w	r3, [r4, #324]	; 0x144
   21da8:	9a05      	ldr	r2, [sp, #20]
   21daa:	f8c4 2128 	str.w	r2, [r4, #296]	; 0x128
   21dae:	2b00      	cmp	r3, #0
   21db0:	f43e ad36 	beq.w	20820 <d_print_comp_inner+0x19c>
   21db4:	9b02      	ldr	r3, [sp, #8]
   21db6:	f8c4 3110 	str.w	r3, [r4, #272]	; 0x110
   21dba:	f7fe bd31 	b.w	20820 <d_print_comp_inner+0x19c>
   21dbe:	68aa      	ldr	r2, [r5, #8]
   21dc0:	4641      	mov	r1, r8
   21dc2:	4620      	mov	r0, r4
   21dc4:	f001 fa02 	bl	231cc <d_print_comp>
   21dc8:	f7fe bd2a 	b.w	20820 <d_print_comp_inner+0x19c>
   21dcc:	686a      	ldr	r2, [r5, #4]
   21dce:	49d8      	ldr	r1, [pc, #864]	; (22130 <d_print_comp_inner+0x1aac>)
   21dd0:	3201      	adds	r2, #1
   21dd2:	a804      	add	r0, sp, #16
   21dd4:	f006 fb4e 	bl	28474 <sprintf>
   21dd8:	a804      	add	r0, sp, #16
   21dda:	f006 fcf1 	bl	287c0 <strlen>
   21dde:	b318      	cbz	r0, 21e28 <d_print_comp_inner+0x17a4>
   21de0:	ad04      	add	r5, sp, #16
   21de2:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
   21de6:	182f      	adds	r7, r5, r0
   21de8:	f04f 0800 	mov.w	r8, #0
   21dec:	e008      	b.n	21e00 <d_print_comp_inner+0x177c>
   21dee:	460b      	mov	r3, r1
   21df0:	3101      	adds	r1, #1
   21df2:	42bd      	cmp	r5, r7
   21df4:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
   21df8:	54e6      	strb	r6, [r4, r3]
   21dfa:	f884 6104 	strb.w	r6, [r4, #260]	; 0x104
   21dfe:	d015      	beq.n	21e2c <d_print_comp_inner+0x17a8>
   21e00:	29ff      	cmp	r1, #255	; 0xff
   21e02:	f815 6b01 	ldrb.w	r6, [r5], #1
   21e06:	d1f2      	bne.n	21dee <d_print_comp_inner+0x176a>
   21e08:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   21e0c:	f884 80ff 	strb.w	r8, [r4, #255]	; 0xff
   21e10:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
   21e14:	4620      	mov	r0, r4
   21e16:	4798      	blx	r3
   21e18:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   21e1c:	3301      	adds	r3, #1
   21e1e:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
   21e22:	2101      	movs	r1, #1
   21e24:	2300      	movs	r3, #0
   21e26:	e7e4      	b.n	21df2 <d_print_comp_inner+0x176e>
   21e28:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
   21e2c:	29ff      	cmp	r1, #255	; 0xff
   21e2e:	f000 8404 	beq.w	2263a <d_print_comp_inner+0x1fb6>
   21e32:	1c4a      	adds	r2, r1, #1
   21e34:	237d      	movs	r3, #125	; 0x7d
   21e36:	f8c4 2100 	str.w	r2, [r4, #256]	; 0x100
   21e3a:	5463      	strb	r3, [r4, r1]
   21e3c:	f884 3104 	strb.w	r3, [r4, #260]	; 0x104
   21e40:	f7fe bcee 	b.w	20820 <d_print_comp_inner+0x19c>
   21e44:	686a      	ldr	r2, [r5, #4]
   21e46:	4641      	mov	r1, r8
   21e48:	4620      	mov	r0, r4
   21e4a:	f001 f9bf 	bl	231cc <d_print_comp>
   21e4e:	f7fe bce7 	b.w	20820 <d_print_comp_inner+0x19c>
   21e52:	686a      	ldr	r2, [r5, #4]
   21e54:	4641      	mov	r1, r8
   21e56:	4620      	mov	r0, r4
   21e58:	f001 f9b8 	bl	231cc <d_print_comp>
   21e5c:	f7fe bce0 	b.w	20820 <d_print_comp_inner+0x19c>
   21e60:	686a      	ldr	r2, [r5, #4]
   21e62:	4641      	mov	r1, r8
   21e64:	4620      	mov	r0, r4
   21e66:	f001 f9b1 	bl	231cc <d_print_comp>
   21e6a:	f7fe bcd9 	b.w	20820 <d_print_comp_inner+0x19c>
   21e6e:	4eb1      	ldr	r6, [pc, #708]	; (22134 <d_print_comp_inner+0x1ab0>)
   21e70:	68aa      	ldr	r2, [r5, #8]
   21e72:	4641      	mov	r1, r8
   21e74:	4620      	mov	r0, r4
   21e76:	f001 f9a9 	bl	231cc <d_print_comp>
   21e7a:	f106 0a05 	add.w	sl, r6, #5
   21e7e:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
   21e82:	f04f 0900 	mov.w	r9, #0
   21e86:	e008      	b.n	21e9a <d_print_comp_inner+0x1816>
   21e88:	460b      	mov	r3, r1
   21e8a:	3101      	adds	r1, #1
   21e8c:	4556      	cmp	r6, sl
   21e8e:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
   21e92:	54e7      	strb	r7, [r4, r3]
   21e94:	f884 7104 	strb.w	r7, [r4, #260]	; 0x104
   21e98:	d013      	beq.n	21ec2 <d_print_comp_inner+0x183e>
   21e9a:	29ff      	cmp	r1, #255	; 0xff
   21e9c:	f816 7b01 	ldrb.w	r7, [r6], #1
   21ea0:	d1f2      	bne.n	21e88 <d_print_comp_inner+0x1804>
   21ea2:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   21ea6:	f884 90ff 	strb.w	r9, [r4, #255]	; 0xff
   21eaa:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
   21eae:	4620      	mov	r0, r4
   21eb0:	4798      	blx	r3
   21eb2:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   21eb6:	3301      	adds	r3, #1
   21eb8:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
   21ebc:	2101      	movs	r1, #1
   21ebe:	2300      	movs	r3, #0
   21ec0:	e7e4      	b.n	21e8c <d_print_comp_inner+0x1808>
   21ec2:	686a      	ldr	r2, [r5, #4]
   21ec4:	4641      	mov	r1, r8
   21ec6:	4620      	mov	r0, r4
   21ec8:	f001 f980 	bl	231cc <d_print_comp>
   21ecc:	f7fe bca8 	b.w	20820 <d_print_comp_inner+0x19c>
   21ed0:	686a      	ldr	r2, [r5, #4]
   21ed2:	4641      	mov	r1, r8
   21ed4:	4620      	mov	r0, r4
   21ed6:	f001 f979 	bl	231cc <d_print_comp>
   21eda:	f7fe bca1 	b.w	20820 <d_print_comp_inner+0x19c>
   21ede:	686a      	ldr	r2, [r5, #4]
   21ee0:	4641      	mov	r1, r8
   21ee2:	4620      	mov	r0, r4
   21ee4:	f001 f972 	bl	231cc <d_print_comp>
   21ee8:	f7fe bc9a 	b.w	20820 <d_print_comp_inner+0x19c>
   21eec:	686a      	ldr	r2, [r5, #4]
   21eee:	4641      	mov	r1, r8
   21ef0:	4620      	mov	r0, r4
   21ef2:	f001 f96b 	bl	231cc <d_print_comp>
   21ef6:	f7fe bc93 	b.w	20820 <d_print_comp_inner+0x19c>
   21efa:	4641      	mov	r1, r8
   21efc:	686a      	ldr	r2, [r5, #4]
   21efe:	4620      	mov	r0, r4
   21f00:	f001 f964 	bl	231cc <d_print_comp>
   21f04:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
   21f08:	29ff      	cmp	r1, #255	; 0xff
   21f0a:	f000 842a 	beq.w	22762 <d_print_comp_inner+0x20de>
   21f0e:	1c4a      	adds	r2, r1, #1
   21f10:	2329      	movs	r3, #41	; 0x29
   21f12:	f8c4 2100 	str.w	r2, [r4, #256]	; 0x100
   21f16:	5463      	strb	r3, [r4, r1]
   21f18:	f884 3104 	strb.w	r3, [r4, #260]	; 0x104
   21f1c:	f7fe bc80 	b.w	20820 <d_print_comp_inner+0x19c>
   21f20:	686a      	ldr	r2, [r5, #4]
   21f22:	4641      	mov	r1, r8
   21f24:	4620      	mov	r0, r4
   21f26:	f001 f951 	bl	231cc <d_print_comp>
   21f2a:	f7fe bc79 	b.w	20820 <d_print_comp_inner+0x19c>
   21f2e:	2f04      	cmp	r7, #4
   21f30:	f1a6 0410 	sub.w	r4, r6, #16
   21f34:	f106 0e10 	add.w	lr, r6, #16
   21f38:	f000 8722 	beq.w	22d80 <d_print_comp_inner+0x26fc>
   21f3c:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
   21f40:	e886 000f 	stmia.w	r6, {r0, r1, r2, r3}
   21f44:	2300      	movs	r3, #0
   21f46:	f84e 4c10 	str.w	r4, [lr, #-16]
   21f4a:	e906 1008 	stmdb	r6, {r3, ip}
   21f4e:	f8ca 6114 	str.w	r6, [sl, #276]	; 0x114
   21f52:	f846 5c0c 	str.w	r5, [r6, #-12]
   21f56:	686d      	ldr	r5, [r5, #4]
   21f58:	3701      	adds	r7, #1
   21f5a:	4676      	mov	r6, lr
   21f5c:	f7fe bf84 	b.w	20e68 <d_print_comp_inner+0x7e4>
   21f60:	68aa      	ldr	r2, [r5, #8]
   21f62:	9300      	str	r3, [sp, #0]
   21f64:	460e      	mov	r6, r1
   21f66:	4620      	mov	r0, r4
   21f68:	4641      	mov	r1, r8
   21f6a:	f8d4 5124 	ldr.w	r5, [r4, #292]	; 0x124
   21f6e:	f001 f92d 	bl	231cc <d_print_comp>
   21f72:	f8d4 2124 	ldr.w	r2, [r4, #292]	; 0x124
   21f76:	9b00      	ldr	r3, [sp, #0]
   21f78:	4295      	cmp	r5, r2
   21f7a:	f47e ac51 	bne.w	20820 <d_print_comp_inner+0x19c>
   21f7e:	f8d4 2100 	ldr.w	r2, [r4, #256]	; 0x100
   21f82:	42b2      	cmp	r2, r6
   21f84:	f47e ac4c 	bne.w	20820 <d_print_comp_inner+0x19c>
   21f88:	3b01      	subs	r3, #1
   21f8a:	f8c4 3100 	str.w	r3, [r4, #256]	; 0x100
   21f8e:	f7fe bc47 	b.w	20820 <d_print_comp_inner+0x19c>
   21f92:	462a      	mov	r2, r5
   21f94:	4641      	mov	r1, r8
   21f96:	4620      	mov	r0, r4
   21f98:	f001 f928 	bl	231ec <d_print_mod>
   21f9c:	f7fe bc70 	b.w	20880 <d_print_comp_inner+0x1fc>
   21fa0:	686b      	ldr	r3, [r5, #4]
   21fa2:	9300      	str	r3, [sp, #0]
   21fa4:	f1b9 0f00 	cmp.w	r9, #0
   21fa8:	f47f abae 	bne.w	21708 <d_print_comp_inner+0x1084>
   21fac:	f7fe bc38 	b.w	20820 <d_print_comp_inner+0x19c>
   21fb0:	463a      	mov	r2, r7
   21fb2:	a804      	add	r0, sp, #16
   21fb4:	495e      	ldr	r1, [pc, #376]	; (22130 <d_print_comp_inner+0x1aac>)
   21fb6:	f006 fa5d 	bl	28474 <sprintf>
   21fba:	a804      	add	r0, sp, #16
   21fbc:	f006 fc00 	bl	287c0 <strlen>
   21fc0:	b318      	cbz	r0, 2200a <d_print_comp_inner+0x1986>
   21fc2:	ad04      	add	r5, sp, #16
   21fc4:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
   21fc8:	182f      	adds	r7, r5, r0
   21fca:	f04f 0800 	mov.w	r8, #0
   21fce:	e008      	b.n	21fe2 <d_print_comp_inner+0x195e>
   21fd0:	460b      	mov	r3, r1
   21fd2:	3101      	adds	r1, #1
   21fd4:	42af      	cmp	r7, r5
   21fd6:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
   21fda:	54e6      	strb	r6, [r4, r3]
   21fdc:	f884 6104 	strb.w	r6, [r4, #260]	; 0x104
   21fe0:	d015      	beq.n	2200e <d_print_comp_inner+0x198a>
   21fe2:	29ff      	cmp	r1, #255	; 0xff
   21fe4:	f815 6b01 	ldrb.w	r6, [r5], #1
   21fe8:	d1f2      	bne.n	21fd0 <d_print_comp_inner+0x194c>
   21fea:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   21fee:	f884 80ff 	strb.w	r8, [r4, #255]	; 0xff
   21ff2:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
   21ff6:	4620      	mov	r0, r4
   21ff8:	4798      	blx	r3
   21ffa:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   21ffe:	3301      	adds	r3, #1
   22000:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
   22004:	2101      	movs	r1, #1
   22006:	2300      	movs	r3, #0
   22008:	e7e4      	b.n	21fd4 <d_print_comp_inner+0x1950>
   2200a:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
   2200e:	29ff      	cmp	r1, #255	; 0xff
   22010:	f000 84dd 	beq.w	229ce <d_print_comp_inner+0x234a>
   22014:	1c4a      	adds	r2, r1, #1
   22016:	237d      	movs	r3, #125	; 0x7d
   22018:	f8c4 2100 	str.w	r2, [r4, #256]	; 0x100
   2201c:	5463      	strb	r3, [r4, r1]
   2201e:	f884 3104 	strb.w	r3, [r4, #260]	; 0x104
   22022:	f7fe bbfd 	b.w	20820 <d_print_comp_inner+0x19c>
   22026:	2700      	movs	r7, #0
   22028:	f7ff ba1f 	b.w	2146a <d_print_comp_inner+0xde6>
   2202c:	68df      	ldr	r7, [r3, #12]
   2202e:	689d      	ldr	r5, [r3, #8]
   22030:	2f00      	cmp	r7, #0
   22032:	f43e abf5 	beq.w	20820 <d_print_comp_inner+0x19c>
   22036:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
   2203a:	442f      	add	r7, r5
   2203c:	f04f 0800 	mov.w	r8, #0
   22040:	e009      	b.n	22056 <d_print_comp_inner+0x19d2>
   22042:	460b      	mov	r3, r1
   22044:	3101      	adds	r1, #1
   22046:	42bd      	cmp	r5, r7
   22048:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
   2204c:	54e6      	strb	r6, [r4, r3]
   2204e:	f884 6104 	strb.w	r6, [r4, #260]	; 0x104
   22052:	f43e abe5 	beq.w	20820 <d_print_comp_inner+0x19c>
   22056:	29ff      	cmp	r1, #255	; 0xff
   22058:	f815 6b01 	ldrb.w	r6, [r5], #1
   2205c:	d1f1      	bne.n	22042 <d_print_comp_inner+0x19be>
   2205e:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   22062:	f884 80ff 	strb.w	r8, [r4, #255]	; 0xff
   22066:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
   2206a:	4620      	mov	r0, r4
   2206c:	4798      	blx	r3
   2206e:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   22072:	3301      	adds	r3, #1
   22074:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
   22078:	2101      	movs	r1, #1
   2207a:	2300      	movs	r3, #0
   2207c:	e7e3      	b.n	22046 <d_print_comp_inner+0x19c2>
   2207e:	686e      	ldr	r6, [r5, #4]
   22080:	68af      	ldr	r7, [r5, #8]
   22082:	4437      	add	r7, r6
   22084:	42be      	cmp	r6, r7
   22086:	f4be abcb 	bcs.w	20820 <d_print_comp_inner+0x19c>
   2208a:	f04f 0800 	mov.w	r8, #0
   2208e:	e00d      	b.n	220ac <d_print_comp_inner+0x1a28>
   22090:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
   22094:	29ff      	cmp	r1, #255	; 0xff
   22096:	d036      	beq.n	22106 <d_print_comp_inner+0x1a82>
   22098:	1c4b      	adds	r3, r1, #1
   2209a:	f8c4 3100 	str.w	r3, [r4, #256]	; 0x100
   2209e:	5465      	strb	r5, [r4, r1]
   220a0:	f884 5104 	strb.w	r5, [r4, #260]	; 0x104
   220a4:	3601      	adds	r6, #1
   220a6:	42b7      	cmp	r7, r6
   220a8:	f67e abba 	bls.w	20820 <d_print_comp_inner+0x19c>
   220ac:	1bbb      	subs	r3, r7, r6
   220ae:	2b03      	cmp	r3, #3
   220b0:	7835      	ldrb	r5, [r6, #0]
   220b2:	dded      	ble.n	22090 <d_print_comp_inner+0x1a0c>
   220b4:	2d5f      	cmp	r5, #95	; 0x5f
   220b6:	d1eb      	bne.n	22090 <d_print_comp_inner+0x1a0c>
   220b8:	7873      	ldrb	r3, [r6, #1]
   220ba:	2b5f      	cmp	r3, #95	; 0x5f
   220bc:	d1e8      	bne.n	22090 <d_print_comp_inner+0x1a0c>
   220be:	78b3      	ldrb	r3, [r6, #2]
   220c0:	2b55      	cmp	r3, #85	; 0x55
   220c2:	d1e5      	bne.n	22090 <d_print_comp_inner+0x1a0c>
   220c4:	1cf3      	adds	r3, r6, #3
   220c6:	429f      	cmp	r7, r3
   220c8:	d9e2      	bls.n	22090 <d_print_comp_inner+0x1a0c>
   220ca:	2000      	movs	r0, #0
   220cc:	e006      	b.n	220dc <d_print_comp_inner+0x1a58>
   220ce:	f1a5 0237 	sub.w	r2, r5, #55	; 0x37
   220d2:	429f      	cmp	r7, r3
   220d4:	eb02 1000 	add.w	r0, r2, r0, lsl #4
   220d8:	f000 85c7 	beq.w	22c6a <d_print_comp_inner+0x25e6>
   220dc:	4699      	mov	r9, r3
   220de:	f813 5b01 	ldrb.w	r5, [r3], #1
   220e2:	f1a5 0230 	sub.w	r2, r5, #48	; 0x30
   220e6:	b2d1      	uxtb	r1, r2
   220e8:	2909      	cmp	r1, #9
   220ea:	f1a5 0e41 	sub.w	lr, r5, #65	; 0x41
   220ee:	d9f0      	bls.n	220d2 <d_print_comp_inner+0x1a4e>
   220f0:	f1be 0f05 	cmp.w	lr, #5
   220f4:	f1a5 0261 	sub.w	r2, r5, #97	; 0x61
   220f8:	d9e9      	bls.n	220ce <d_print_comp_inner+0x1a4a>
   220fa:	2a05      	cmp	r2, #5
   220fc:	f200 8743 	bhi.w	22f86 <d_print_comp_inner+0x2902>
   22100:	f1a5 0257 	sub.w	r2, r5, #87	; 0x57
   22104:	e7e5      	b.n	220d2 <d_print_comp_inner+0x1a4e>
   22106:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   2210a:	f884 80ff 	strb.w	r8, [r4, #255]	; 0xff
   2210e:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
   22112:	4620      	mov	r0, r4
   22114:	4798      	blx	r3
   22116:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   2211a:	3301      	adds	r3, #1
   2211c:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
   22120:	2100      	movs	r1, #0
   22122:	2301      	movs	r3, #1
   22124:	e7b9      	b.n	2209a <d_print_comp_inner+0x1a16>
   22126:	4d04      	ldr	r5, [pc, #16]	; (22138 <d_print_comp_inner+0x1ab4>)
   22128:	4698      	mov	r8, r3
   2212a:	1daf      	adds	r7, r5, #6
   2212c:	e010      	b.n	22150 <d_print_comp_inner+0x1acc>
   2212e:	bf00      	nop
   22130:	0002e580 	.word	0x0002e580
   22134:	0002e6f4 	.word	0x0002e6f4
   22138:	0002e754 	.word	0x0002e754
   2213c:	460b      	mov	r3, r1
   2213e:	3101      	adds	r1, #1
   22140:	42bd      	cmp	r5, r7
   22142:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
   22146:	54e6      	strb	r6, [r4, r3]
   22148:	f884 6104 	strb.w	r6, [r4, #260]	; 0x104
   2214c:	f43e ab68 	beq.w	20820 <d_print_comp_inner+0x19c>
   22150:	29ff      	cmp	r1, #255	; 0xff
   22152:	f815 6b01 	ldrb.w	r6, [r5], #1
   22156:	d1f1      	bne.n	2213c <d_print_comp_inner+0x1ab8>
   22158:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   2215c:	f884 80ff 	strb.w	r8, [r4, #255]	; 0xff
   22160:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
   22164:	4620      	mov	r0, r4
   22166:	4798      	blx	r3
   22168:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   2216c:	3301      	adds	r3, #1
   2216e:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
   22172:	2101      	movs	r1, #1
   22174:	2300      	movs	r3, #0
   22176:	e7e3      	b.n	22140 <d_print_comp_inner+0x1abc>
   22178:	782b      	ldrb	r3, [r5, #0]
   2217a:	2b2f      	cmp	r3, #47	; 0x2f
   2217c:	f47e ab6a 	bne.w	20854 <d_print_comp_inner+0x1d0>
   22180:	4601      	mov	r1, r0
   22182:	460d      	mov	r5, r1
   22184:	f8d4 c114 	ldr.w	ip, [r4, #276]	; 0x114
   22188:	f7fe bb66 	b.w	20858 <d_print_comp_inner+0x1d4>
   2218c:	4dd7      	ldr	r5, [pc, #860]	; (224ec <d_print_comp_inner+0x1e68>)
   2218e:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
   22192:	f105 0804 	add.w	r8, r5, #4
   22196:	e009      	b.n	221ac <d_print_comp_inner+0x1b28>
   22198:	460b      	mov	r3, r1
   2219a:	3101      	adds	r1, #1
   2219c:	45a8      	cmp	r8, r5
   2219e:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
   221a2:	54e6      	strb	r6, [r4, r3]
   221a4:	f884 6104 	strb.w	r6, [r4, #260]	; 0x104
   221a8:	f43e ab3a 	beq.w	20820 <d_print_comp_inner+0x19c>
   221ac:	29ff      	cmp	r1, #255	; 0xff
   221ae:	f815 6b01 	ldrb.w	r6, [r5], #1
   221b2:	d1f1      	bne.n	22198 <d_print_comp_inner+0x1b14>
   221b4:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   221b8:	f884 70ff 	strb.w	r7, [r4, #255]	; 0xff
   221bc:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
   221c0:	4620      	mov	r0, r4
   221c2:	4798      	blx	r3
   221c4:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   221c8:	3301      	adds	r3, #1
   221ca:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
   221ce:	2101      	movs	r1, #1
   221d0:	2300      	movs	r3, #0
   221d2:	e7e3      	b.n	2219c <d_print_comp_inner+0x1b18>
   221d4:	4ec6      	ldr	r6, [pc, #792]	; (224f0 <d_print_comp_inner+0x1e6c>)
   221d6:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
   221da:	f106 0905 	add.w	r9, r6, #5
   221de:	f04f 0800 	mov.w	r8, #0
   221e2:	e008      	b.n	221f6 <d_print_comp_inner+0x1b72>
   221e4:	460b      	mov	r3, r1
   221e6:	3101      	adds	r1, #1
   221e8:	45b1      	cmp	r9, r6
   221ea:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
   221ee:	54e7      	strb	r7, [r4, r3]
   221f0:	f884 7104 	strb.w	r7, [r4, #260]	; 0x104
   221f4:	d013      	beq.n	2221e <d_print_comp_inner+0x1b9a>
   221f6:	29ff      	cmp	r1, #255	; 0xff
   221f8:	f816 7b01 	ldrb.w	r7, [r6], #1
   221fc:	d1f2      	bne.n	221e4 <d_print_comp_inner+0x1b60>
   221fe:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   22202:	f884 80ff 	strb.w	r8, [r4, #255]	; 0xff
   22206:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
   2220a:	4620      	mov	r0, r4
   2220c:	4798      	blx	r3
   2220e:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   22212:	3301      	adds	r3, #1
   22214:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
   22218:	2101      	movs	r1, #1
   2221a:	2300      	movs	r3, #0
   2221c:	e7e4      	b.n	221e8 <d_print_comp_inner+0x1b64>
   2221e:	686a      	ldr	r2, [r5, #4]
   22220:	49b4      	ldr	r1, [pc, #720]	; (224f4 <d_print_comp_inner+0x1e70>)
   22222:	3201      	adds	r2, #1
   22224:	a804      	add	r0, sp, #16
   22226:	f006 f925 	bl	28474 <sprintf>
   2222a:	a804      	add	r0, sp, #16
   2222c:	f006 fac8 	bl	287c0 <strlen>
   22230:	2800      	cmp	r0, #0
   22232:	f43e aaf5 	beq.w	20820 <d_print_comp_inner+0x19c>
   22236:	ad04      	add	r5, sp, #16
   22238:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
   2223c:	182f      	adds	r7, r5, r0
   2223e:	f04f 0800 	mov.w	r8, #0
   22242:	e009      	b.n	22258 <d_print_comp_inner+0x1bd4>
   22244:	460b      	mov	r3, r1
   22246:	3101      	adds	r1, #1
   22248:	42af      	cmp	r7, r5
   2224a:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
   2224e:	54e6      	strb	r6, [r4, r3]
   22250:	f884 6104 	strb.w	r6, [r4, #260]	; 0x104
   22254:	f43e aae4 	beq.w	20820 <d_print_comp_inner+0x19c>
   22258:	29ff      	cmp	r1, #255	; 0xff
   2225a:	f815 6b01 	ldrb.w	r6, [r5], #1
   2225e:	d1f1      	bne.n	22244 <d_print_comp_inner+0x1bc0>
   22260:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   22264:	f884 80ff 	strb.w	r8, [r4, #255]	; 0xff
   22268:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
   2226c:	4620      	mov	r0, r4
   2226e:	4798      	blx	r3
   22270:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   22274:	3301      	adds	r3, #1
   22276:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
   2227a:	2101      	movs	r1, #1
   2227c:	2300      	movs	r3, #0
   2227e:	e7e3      	b.n	22248 <d_print_comp_inner+0x1bc4>
   22280:	f021 0860 	bic.w	r8, r1, #96	; 0x60
   22284:	f105 0208 	add.w	r2, r5, #8
   22288:	4641      	mov	r1, r8
   2228a:	f8d0 3114 	ldr.w	r3, [r0, #276]	; 0x114
   2228e:	f001 fc91 	bl	23bb4 <d_print_function_type.isra.11>
   22292:	686a      	ldr	r2, [r5, #4]
   22294:	2a00      	cmp	r2, #0
   22296:	f43e aac3 	beq.w	20820 <d_print_comp_inner+0x19c>
   2229a:	4641      	mov	r1, r8
   2229c:	4620      	mov	r0, r4
   2229e:	f000 ff95 	bl	231cc <d_print_comp>
   222a2:	f7fe babd 	b.w	20820 <d_print_comp_inner+0x19c>
   222a6:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
   222aa:	f7ff b9a2 	b.w	215f2 <d_print_comp_inner+0xf6e>
   222ae:	4e92      	ldr	r6, [pc, #584]	; (224f8 <d_print_comp_inner+0x1e74>)
   222b0:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
   222b4:	f106 0a05 	add.w	sl, r6, #5
   222b8:	f04f 0900 	mov.w	r9, #0
   222bc:	e009      	b.n	222d2 <d_print_comp_inner+0x1c4e>
   222be:	460b      	mov	r3, r1
   222c0:	3101      	adds	r1, #1
   222c2:	45b2      	cmp	sl, r6
   222c4:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
   222c8:	54e7      	strb	r7, [r4, r3]
   222ca:	f884 7104 	strb.w	r7, [r4, #260]	; 0x104
   222ce:	f43f a97a 	beq.w	215c6 <d_print_comp_inner+0xf42>
   222d2:	29ff      	cmp	r1, #255	; 0xff
   222d4:	f816 7b01 	ldrb.w	r7, [r6], #1
   222d8:	d1f1      	bne.n	222be <d_print_comp_inner+0x1c3a>
   222da:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   222de:	f884 90ff 	strb.w	r9, [r4, #255]	; 0xff
   222e2:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
   222e6:	4620      	mov	r0, r4
   222e8:	4798      	blx	r3
   222ea:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   222ee:	3301      	adds	r3, #1
   222f0:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
   222f4:	2101      	movs	r1, #1
   222f6:	2300      	movs	r3, #0
   222f8:	e7e3      	b.n	222c2 <d_print_comp_inner+0x1c3e>
   222fa:	f8d9 3004 	ldr.w	r3, [r9, #4]
   222fe:	497f      	ldr	r1, [pc, #508]	; (224fc <d_print_comp_inner+0x1e78>)
   22300:	681f      	ldr	r7, [r3, #0]
   22302:	4638      	mov	r0, r7
   22304:	f006 f8e0 	bl	284c8 <strcmp>
   22308:	f896 a000 	ldrb.w	sl, [r6]
   2230c:	b918      	cbnz	r0, 22316 <d_print_comp_inner+0x1c92>
   2230e:	f1ba 0f03 	cmp.w	sl, #3
   22312:	f000 851b 	beq.w	22d4c <d_print_comp_inner+0x26c8>
   22316:	f1ba 0f38 	cmp.w	sl, #56	; 0x38
   2231a:	f000 85fd 	beq.w	22f18 <d_print_comp_inner+0x2894>
   2231e:	4978      	ldr	r1, [pc, #480]	; (22500 <d_print_comp_inner+0x1e7c>)
   22320:	4638      	mov	r0, r7
   22322:	f006 f8d1 	bl	284c8 <strcmp>
   22326:	4605      	mov	r5, r0
   22328:	2800      	cmp	r0, #0
   2232a:	f000 8135 	beq.w	22598 <d_print_comp_inner+0x1f14>
   2232e:	4975      	ldr	r1, [pc, #468]	; (22504 <d_print_comp_inner+0x1e80>)
   22330:	4638      	mov	r0, r7
   22332:	f006 f8c9 	bl	284c8 <strcmp>
   22336:	2800      	cmp	r0, #0
   22338:	f000 82b6 	beq.w	228a8 <d_print_comp_inner+0x2224>
   2233c:	464a      	mov	r2, r9
   2233e:	4641      	mov	r1, r8
   22340:	4620      	mov	r0, r4
   22342:	f001 fd2b 	bl	23d9c <d_print_expr_op>
   22346:	2f00      	cmp	r7, #0
   22348:	f43f a837 	beq.w	213ba <d_print_comp_inner+0xd36>
   2234c:	496e      	ldr	r1, [pc, #440]	; (22508 <d_print_comp_inner+0x1e84>)
   2234e:	4638      	mov	r0, r7
   22350:	f006 f8ba 	bl	284c8 <strcmp>
   22354:	2800      	cmp	r0, #0
   22356:	f000 8384 	beq.w	22a62 <d_print_comp_inner+0x23de>
   2235a:	4638      	mov	r0, r7
   2235c:	496b      	ldr	r1, [pc, #428]	; (2250c <d_print_comp_inner+0x1e88>)
   2235e:	f006 f8b3 	bl	284c8 <strcmp>
   22362:	4605      	mov	r5, r0
   22364:	2800      	cmp	r0, #0
   22366:	f47f a828 	bne.w	213ba <d_print_comp_inner+0xd36>
   2236a:	f8d4 3100 	ldr.w	r3, [r4, #256]	; 0x100
   2236e:	2bff      	cmp	r3, #255	; 0xff
   22370:	f000 84db 	beq.w	22d2a <d_print_comp_inner+0x26a6>
   22374:	1c58      	adds	r0, r3, #1
   22376:	2528      	movs	r5, #40	; 0x28
   22378:	f8c4 0100 	str.w	r0, [r4, #256]	; 0x100
   2237c:	4641      	mov	r1, r8
   2237e:	54e5      	strb	r5, [r4, r3]
   22380:	4632      	mov	r2, r6
   22382:	4620      	mov	r0, r4
   22384:	f884 5104 	strb.w	r5, [r4, #260]	; 0x104
   22388:	f000 ff20 	bl	231cc <d_print_comp>
   2238c:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
   22390:	29ff      	cmp	r1, #255	; 0xff
   22392:	f000 846d 	beq.w	22c70 <d_print_comp_inner+0x25ec>
   22396:	2329      	movs	r3, #41	; 0x29
   22398:	1c4a      	adds	r2, r1, #1
   2239a:	f8c4 2100 	str.w	r2, [r4, #256]	; 0x100
   2239e:	5463      	strb	r3, [r4, r1]
   223a0:	f884 3104 	strb.w	r3, [r4, #260]	; 0x104
   223a4:	f7fe ba3c 	b.w	20820 <d_print_comp_inner+0x19c>
   223a8:	f10d 0910 	add.w	r9, sp, #16
   223ac:	685a      	ldr	r2, [r3, #4]
   223ae:	f8d4 3128 	ldr.w	r3, [r4, #296]	; 0x128
   223b2:	f8c4 9128 	str.w	r9, [r4, #296]	; 0x128
   223b6:	4641      	mov	r1, r8
   223b8:	4620      	mov	r0, r4
   223ba:	9204      	str	r2, [sp, #16]
   223bc:	9305      	str	r3, [sp, #20]
   223be:	f7fe f961 	bl	20684 <d_print_comp_inner>
   223c2:	f8d4 3144 	ldr.w	r3, [r4, #324]	; 0x144
   223c6:	9a05      	ldr	r2, [sp, #20]
   223c8:	f8c4 2128 	str.w	r2, [r4, #296]	; 0x128
   223cc:	b113      	cbz	r3, 223d4 <d_print_comp_inner+0x1d50>
   223ce:	9b02      	ldr	r3, [sp, #8]
   223d0:	f8c4 3110 	str.w	r3, [r4, #272]	; 0x110
   223d4:	f894 3104 	ldrb.w	r3, [r4, #260]	; 0x104
   223d8:	2b3c      	cmp	r3, #60	; 0x3c
   223da:	f000 83d9 	beq.w	22b90 <d_print_comp_inner+0x250c>
   223de:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
   223e2:	29ff      	cmp	r1, #255	; 0xff
   223e4:	f000 8467 	beq.w	22cb6 <d_print_comp_inner+0x2632>
   223e8:	1c4a      	adds	r2, r1, #1
   223ea:	233c      	movs	r3, #60	; 0x3c
   223ec:	f8c4 2100 	str.w	r2, [r4, #256]	; 0x100
   223f0:	5463      	strb	r3, [r4, r1]
   223f2:	f884 3104 	strb.w	r3, [r4, #260]	; 0x104
   223f6:	686b      	ldr	r3, [r5, #4]
   223f8:	f8d4 5128 	ldr.w	r5, [r4, #296]	; 0x128
   223fc:	689b      	ldr	r3, [r3, #8]
   223fe:	f8c4 9128 	str.w	r9, [r4, #296]	; 0x128
   22402:	461a      	mov	r2, r3
   22404:	4641      	mov	r1, r8
   22406:	4620      	mov	r0, r4
   22408:	9304      	str	r3, [sp, #16]
   2240a:	9505      	str	r5, [sp, #20]
   2240c:	f7fe f93a 	bl	20684 <d_print_comp_inner>
   22410:	f894 3104 	ldrb.w	r3, [r4, #260]	; 0x104
   22414:	9a05      	ldr	r2, [sp, #20]
   22416:	f8c4 2128 	str.w	r2, [r4, #296]	; 0x128
   2241a:	2b3e      	cmp	r3, #62	; 0x3e
   2241c:	f000 83ab 	beq.w	22b76 <d_print_comp_inner+0x24f2>
   22420:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
   22424:	29ff      	cmp	r1, #255	; 0xff
   22426:	f000 849a 	beq.w	22d5e <d_print_comp_inner+0x26da>
   2242a:	233e      	movs	r3, #62	; 0x3e
   2242c:	1c4a      	adds	r2, r1, #1
   2242e:	f8c4 2100 	str.w	r2, [r4, #256]	; 0x100
   22432:	5463      	strb	r3, [r4, r1]
   22434:	f884 3104 	strb.w	r3, [r4, #260]	; 0x104
   22438:	f7fe b9f2 	b.w	20820 <d_print_comp_inner+0x19c>
   2243c:	6852      	ldr	r2, [r2, #4]
   2243e:	7c16      	ldrb	r6, [r2, #16]
   22440:	2e00      	cmp	r6, #0
   22442:	f43f a9e7 	beq.w	21814 <d_print_comp_inner+0x1190>
   22446:	2e06      	cmp	r6, #6
   22448:	f240 8337 	bls.w	22aba <d_print_comp_inner+0x2436>
   2244c:	2e07      	cmp	r6, #7
   2244e:	f47f a9e1 	bne.w	21814 <d_print_comp_inner+0x1190>
   22452:	68aa      	ldr	r2, [r5, #8]
   22454:	7811      	ldrb	r1, [r2, #0]
   22456:	2900      	cmp	r1, #0
   22458:	f47f a9dc 	bne.w	21814 <d_print_comp_inner+0x1190>
   2245c:	6891      	ldr	r1, [r2, #8]
   2245e:	2901      	cmp	r1, #1
   22460:	f47f a9d8 	bne.w	21814 <d_print_comp_inner+0x1190>
   22464:	2b3c      	cmp	r3, #60	; 0x3c
   22466:	f47f a9d5 	bne.w	21814 <d_print_comp_inner+0x1190>
   2246a:	6853      	ldr	r3, [r2, #4]
   2246c:	781b      	ldrb	r3, [r3, #0]
   2246e:	2b30      	cmp	r3, #48	; 0x30
   22470:	f000 8626 	beq.w	230c0 <d_print_comp_inner+0x2a3c>
   22474:	2b31      	cmp	r3, #49	; 0x31
   22476:	f47f a9cd 	bne.w	21814 <d_print_comp_inner+0x1190>
   2247a:	2204      	movs	r2, #4
   2247c:	4924      	ldr	r1, [pc, #144]	; (22510 <d_print_comp_inner+0x1e8c>)
   2247e:	f7fb fe2d 	bl	1e0dc <d_append_buffer>
   22482:	f7fe b9cd 	b.w	20820 <d_print_comp_inner+0x19c>
   22486:	4e23      	ldr	r6, [pc, #140]	; (22514 <d_print_comp_inner+0x1e90>)
   22488:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
   2248c:	f106 0a02 	add.w	sl, r6, #2
   22490:	e009      	b.n	224a6 <d_print_comp_inner+0x1e22>
   22492:	460b      	mov	r3, r1
   22494:	3101      	adds	r1, #1
   22496:	45b2      	cmp	sl, r6
   22498:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
   2249c:	54e7      	strb	r7, [r4, r3]
   2249e:	f884 7104 	strb.w	r7, [r4, #260]	; 0x104
   224a2:	f43e ad52 	beq.w	20f4a <d_print_comp_inner+0x8c6>
   224a6:	29ff      	cmp	r1, #255	; 0xff
   224a8:	f816 7b01 	ldrb.w	r7, [r6], #1
   224ac:	d1f1      	bne.n	22492 <d_print_comp_inner+0x1e0e>
   224ae:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   224b2:	f884 90ff 	strb.w	r9, [r4, #255]	; 0xff
   224b6:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
   224ba:	4620      	mov	r0, r4
   224bc:	4798      	blx	r3
   224be:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   224c2:	3301      	adds	r3, #1
   224c4:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
   224c8:	2101      	movs	r1, #1
   224ca:	2300      	movs	r3, #0
   224cc:	e7e3      	b.n	22496 <d_print_comp_inner+0x1e12>
   224ce:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
   224d2:	29ff      	cmp	r1, #255	; 0xff
   224d4:	f000 84e4 	beq.w	22ea0 <d_print_comp_inner+0x281c>
   224d8:	2220      	movs	r2, #32
   224da:	1c4b      	adds	r3, r1, #1
   224dc:	f8c4 3100 	str.w	r3, [r4, #256]	; 0x100
   224e0:	5462      	strb	r2, [r4, r1]
   224e2:	f884 2104 	strb.w	r2, [r4, #260]	; 0x104
   224e6:	f7fe bdbb 	b.w	21060 <d_print_comp_inner+0x9dc>
   224ea:	bf00      	nop
   224ec:	0002e7d0 	.word	0x0002e7d0
   224f0:	0002e5f4 	.word	0x0002e5f4
   224f4:	0002e580 	.word	0x0002e580
   224f8:	0002e744 	.word	0x0002e744
   224fc:	0002e778 	.word	0x0002e778
   22500:	0002e84c 	.word	0x0002e84c
   22504:	0002e584 	.word	0x0002e584
   22508:	0002e77c 	.word	0x0002e77c
   2250c:	0002ea88 	.word	0x0002ea88
   22510:	0002e7a8 	.word	0x0002e7a8
   22514:	0002e5d0 	.word	0x0002e5d0
   22518:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
   2251c:	29ff      	cmp	r1, #255	; 0xff
   2251e:	f000 8465 	beq.w	22dec <d_print_comp_inner+0x2768>
   22522:	2220      	movs	r2, #32
   22524:	1c4b      	adds	r3, r1, #1
   22526:	f8c4 3100 	str.w	r3, [r4, #256]	; 0x100
   2252a:	5462      	strb	r2, [r4, r1]
   2252c:	f884 2104 	strb.w	r2, [r4, #260]	; 0x104
   22530:	f7fe bd80 	b.w	21034 <d_print_comp_inner+0x9b0>
   22534:	2700      	movs	r7, #0
   22536:	55a7      	strb	r7, [r4, r6]
   22538:	4631      	mov	r1, r6
   2253a:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   2253e:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
   22542:	4620      	mov	r0, r4
   22544:	4798      	blx	r3
   22546:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   2254a:	f8c4 7100 	str.w	r7, [r4, #256]	; 0x100
   2254e:	3301      	adds	r3, #1
   22550:	463e      	mov	r6, r7
   22552:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
   22556:	f7fe be31 	b.w	211bc <d_print_comp_inner+0xb38>
   2255a:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
   2255e:	29ff      	cmp	r1, #255	; 0xff
   22560:	f000 8465 	beq.w	22e2e <d_print_comp_inner+0x27aa>
   22564:	1c4a      	adds	r2, r1, #1
   22566:	235b      	movs	r3, #91	; 0x5b
   22568:	f8c4 2100 	str.w	r2, [r4, #256]	; 0x100
   2256c:	5463      	strb	r3, [r4, r1]
   2256e:	f884 3104 	strb.w	r3, [r4, #260]	; 0x104
   22572:	4641      	mov	r1, r8
   22574:	68aa      	ldr	r2, [r5, #8]
   22576:	4620      	mov	r0, r4
   22578:	f000 fe28 	bl	231cc <d_print_comp>
   2257c:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
   22580:	29ff      	cmp	r1, #255	; 0xff
   22582:	f000 8312 	beq.w	22baa <d_print_comp_inner+0x2526>
   22586:	235d      	movs	r3, #93	; 0x5d
   22588:	1c4a      	adds	r2, r1, #1
   2258a:	f8c4 2100 	str.w	r2, [r4, #256]	; 0x100
   2258e:	5463      	strb	r3, [r4, r1]
   22590:	f884 3104 	strb.w	r3, [r4, #260]	; 0x104
   22594:	f7fe b944 	b.w	20820 <d_print_comp_inner+0x19c>
   22598:	4631      	mov	r1, r6
   2259a:	4620      	mov	r0, r4
   2259c:	f7fb ffca 	bl	1e534 <d_find_pack>
   225a0:	b928      	cbnz	r0, 225ae <d_print_comp_inner+0x1f2a>
   225a2:	e007      	b.n	225b4 <d_print_comp_inner+0x1f30>
   225a4:	6843      	ldr	r3, [r0, #4]
   225a6:	b12b      	cbz	r3, 225b4 <d_print_comp_inner+0x1f30>
   225a8:	6880      	ldr	r0, [r0, #8]
   225aa:	3501      	adds	r5, #1
   225ac:	b110      	cbz	r0, 225b4 <d_print_comp_inner+0x1f30>
   225ae:	7803      	ldrb	r3, [r0, #0]
   225b0:	2b2f      	cmp	r3, #47	; 0x2f
   225b2:	d0f7      	beq.n	225a4 <d_print_comp_inner+0x1f20>
   225b4:	462a      	mov	r2, r5
   225b6:	a804      	add	r0, sp, #16
   225b8:	49d4      	ldr	r1, [pc, #848]	; (2290c <d_print_comp_inner+0x2288>)
   225ba:	f005 ff5b 	bl	28474 <sprintf>
   225be:	a804      	add	r0, sp, #16
   225c0:	f006 f8fe 	bl	287c0 <strlen>
   225c4:	2800      	cmp	r0, #0
   225c6:	f43e a92b 	beq.w	20820 <d_print_comp_inner+0x19c>
   225ca:	ad04      	add	r5, sp, #16
   225cc:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
   225d0:	182f      	adds	r7, r5, r0
   225d2:	f04f 0800 	mov.w	r8, #0
   225d6:	e009      	b.n	225ec <d_print_comp_inner+0x1f68>
   225d8:	460b      	mov	r3, r1
   225da:	3101      	adds	r1, #1
   225dc:	42bd      	cmp	r5, r7
   225de:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
   225e2:	54e6      	strb	r6, [r4, r3]
   225e4:	f884 6104 	strb.w	r6, [r4, #260]	; 0x104
   225e8:	f43e a91a 	beq.w	20820 <d_print_comp_inner+0x19c>
   225ec:	29ff      	cmp	r1, #255	; 0xff
   225ee:	f815 6b01 	ldrb.w	r6, [r5], #1
   225f2:	d1f1      	bne.n	225d8 <d_print_comp_inner+0x1f54>
   225f4:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   225f8:	f884 80ff 	strb.w	r8, [r4, #255]	; 0xff
   225fc:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
   22600:	4620      	mov	r0, r4
   22602:	4798      	blx	r3
   22604:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   22608:	3301      	adds	r3, #1
   2260a:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
   2260e:	2101      	movs	r1, #1
   22610:	2300      	movs	r3, #0
   22612:	e7e3      	b.n	225dc <d_print_comp_inner+0x1f58>
   22614:	686a      	ldr	r2, [r5, #4]
   22616:	4641      	mov	r1, r8
   22618:	4620      	mov	r0, r4
   2261a:	f000 fdd7 	bl	231cc <d_print_comp>
   2261e:	f7fe b8ff 	b.w	20820 <d_print_comp_inner+0x19c>
   22622:	29ff      	cmp	r1, #255	; 0xff
   22624:	f000 83d2 	beq.w	22dcc <d_print_comp_inner+0x2748>
   22628:	232d      	movs	r3, #45	; 0x2d
   2262a:	1c4a      	adds	r2, r1, #1
   2262c:	f8c4 2100 	str.w	r2, [r4, #256]	; 0x100
   22630:	5463      	strb	r3, [r4, r1]
   22632:	f884 3104 	strb.w	r3, [r4, #260]	; 0x104
   22636:	f7ff b90e 	b.w	21856 <d_print_comp_inner+0x11d2>
   2263a:	2500      	movs	r5, #0
   2263c:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   22640:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
   22644:	f884 50ff 	strb.w	r5, [r4, #255]	; 0xff
   22648:	4620      	mov	r0, r4
   2264a:	4798      	blx	r3
   2264c:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   22650:	3301      	adds	r3, #1
   22652:	4629      	mov	r1, r5
   22654:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
   22658:	2201      	movs	r2, #1
   2265a:	f7ff bbeb 	b.w	21e34 <d_print_comp_inner+0x17b0>
   2265e:	2500      	movs	r5, #0
   22660:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   22664:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
   22668:	f884 50ff 	strb.w	r5, [r4, #255]	; 0xff
   2266c:	4620      	mov	r0, r4
   2266e:	4798      	blx	r3
   22670:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   22674:	3301      	adds	r3, #1
   22676:	4629      	mov	r1, r5
   22678:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
   2267c:	2201      	movs	r2, #1
   2267e:	f7ff ba8f 	b.w	21ba0 <d_print_comp_inner+0x151c>
   22682:	2600      	movs	r6, #0
   22684:	f8d0 3108 	ldr.w	r3, [r0, #264]	; 0x108
   22688:	f880 60ff 	strb.w	r6, [r0, #255]	; 0xff
   2268c:	f8d0 210c 	ldr.w	r2, [r0, #268]	; 0x10c
   22690:	4798      	blx	r3
   22692:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   22696:	f8c4 6100 	str.w	r6, [r4, #256]	; 0x100
   2269a:	3301      	adds	r3, #1
   2269c:	4631      	mov	r1, r6
   2269e:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
   226a2:	f7fe bd43 	b.w	2112c <d_print_comp_inner+0xaa8>
   226a6:	2600      	movs	r6, #0
   226a8:	f8d0 3108 	ldr.w	r3, [r0, #264]	; 0x108
   226ac:	f8d0 210c 	ldr.w	r2, [r0, #268]	; 0x10c
   226b0:	f880 60ff 	strb.w	r6, [r0, #255]	; 0xff
   226b4:	4798      	blx	r3
   226b6:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   226ba:	3301      	adds	r3, #1
   226bc:	4631      	mov	r1, r6
   226be:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
   226c2:	2201      	movs	r2, #1
   226c4:	f7fe bb74 	b.w	20db0 <d_print_comp_inner+0x72c>
   226c8:	2500      	movs	r5, #0
   226ca:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   226ce:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
   226d2:	f884 50ff 	strb.w	r5, [r4, #255]	; 0xff
   226d6:	4620      	mov	r0, r4
   226d8:	4798      	blx	r3
   226da:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   226de:	3301      	adds	r3, #1
   226e0:	4629      	mov	r1, r5
   226e2:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
   226e6:	2201      	movs	r2, #1
   226e8:	f7ff bae4 	b.w	21cb4 <d_print_comp_inner+0x1630>
   226ec:	220d      	movs	r2, #13
   226ee:	4988      	ldr	r1, [pc, #544]	; (22910 <d_print_comp_inner+0x228c>)
   226f0:	4620      	mov	r0, r4
   226f2:	f7fb fcf3 	bl	1e0dc <d_append_buffer>
   226f6:	68a9      	ldr	r1, [r5, #8]
   226f8:	4620      	mov	r0, r4
   226fa:	3101      	adds	r1, #1
   226fc:	f7fb ff9e 	bl	1e63c <d_append_num>
   22700:	2203      	movs	r2, #3
   22702:	4984      	ldr	r1, [pc, #528]	; (22914 <d_print_comp_inner+0x2290>)
   22704:	4620      	mov	r0, r4
   22706:	f7fb fce9 	bl	1e0dc <d_append_buffer>
   2270a:	686d      	ldr	r5, [r5, #4]
   2270c:	f7fe bc22 	b.w	20f54 <d_print_comp_inner+0x8d0>
   22710:	2500      	movs	r5, #0
   22712:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   22716:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
   2271a:	f884 50ff 	strb.w	r5, [r4, #255]	; 0xff
   2271e:	4620      	mov	r0, r4
   22720:	4798      	blx	r3
   22722:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   22726:	3301      	adds	r3, #1
   22728:	4629      	mov	r1, r5
   2272a:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
   2272e:	2201      	movs	r2, #1
   22730:	f7fe be08 	b.w	21344 <d_print_comp_inner+0xcc0>
   22734:	2301      	movs	r3, #1
   22736:	f8c4 3118 	str.w	r3, [r4, #280]	; 0x118
   2273a:	f7fe b871 	b.w	20820 <d_print_comp_inner+0x19c>
   2273e:	2500      	movs	r5, #0
   22740:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   22744:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
   22748:	f884 50ff 	strb.w	r5, [r4, #255]	; 0xff
   2274c:	4620      	mov	r0, r4
   2274e:	4798      	blx	r3
   22750:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   22754:	3301      	adds	r3, #1
   22756:	4629      	mov	r1, r5
   22758:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
   2275c:	2201      	movs	r2, #1
   2275e:	f7ff ba8f 	b.w	21c80 <d_print_comp_inner+0x15fc>
   22762:	2500      	movs	r5, #0
   22764:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   22768:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
   2276c:	f884 50ff 	strb.w	r5, [r4, #255]	; 0xff
   22770:	4620      	mov	r0, r4
   22772:	4798      	blx	r3
   22774:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   22778:	3301      	adds	r3, #1
   2277a:	4629      	mov	r1, r5
   2277c:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
   22780:	2201      	movs	r2, #1
   22782:	f7ff bbc5 	b.w	21f10 <d_print_comp_inner+0x188c>
   22786:	a914      	add	r1, sp, #80	; 0x50
   22788:	f8d4 0114 	ldr.w	r0, [r4, #276]	; 0x114
   2278c:	f841 0d40 	str.w	r0, [r1, #-64]!
   22790:	f028 0860 	bic.w	r8, r8, #96	; 0x60
   22794:	f8d4 6110 	ldr.w	r6, [r4, #272]	; 0x110
   22798:	f8c4 1114 	str.w	r1, [r4, #276]	; 0x114
   2279c:	4620      	mov	r0, r4
   2279e:	4641      	mov	r1, r8
   227a0:	9306      	str	r3, [sp, #24]
   227a2:	9607      	str	r6, [sp, #28]
   227a4:	9505      	str	r5, [sp, #20]
   227a6:	f000 fd11 	bl	231cc <d_print_comp>
   227aa:	9e06      	ldr	r6, [sp, #24]
   227ac:	9b04      	ldr	r3, [sp, #16]
   227ae:	f8c4 3114 	str.w	r3, [r4, #276]	; 0x114
   227b2:	2e00      	cmp	r6, #0
   227b4:	f47e a834 	bne.w	20820 <d_print_comp_inner+0x19c>
   227b8:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
   227bc:	29ff      	cmp	r1, #255	; 0xff
   227be:	f000 8409 	beq.w	22fd4 <d_print_comp_inner+0x2950>
   227c2:	2320      	movs	r3, #32
   227c4:	1c4a      	adds	r2, r1, #1
   227c6:	f8c4 2100 	str.w	r2, [r4, #256]	; 0x100
   227ca:	5463      	strb	r3, [r4, r1]
   227cc:	f884 3104 	strb.w	r3, [r4, #260]	; 0x104
   227d0:	f7fe be0b 	b.w	213ea <d_print_comp_inner+0xd66>
   227d4:	f8d4 3120 	ldr.w	r3, [r4, #288]	; 0x120
   227d8:	2b00      	cmp	r3, #0
   227da:	f6fe abff 	blt.w	20fdc <d_print_comp_inner+0x958>
   227de:	2b00      	cmp	r3, #0
   227e0:	f000 829d 	beq.w	22d1e <d_print_comp_inner+0x269a>
   227e4:	6880      	ldr	r0, [r0, #8]
   227e6:	3b01      	subs	r3, #1
   227e8:	2800      	cmp	r0, #0
   227ea:	f43e a82d 	beq.w	20848 <d_print_comp_inner+0x1c4>
   227ee:	7802      	ldrb	r2, [r0, #0]
   227f0:	2a2f      	cmp	r2, #47	; 0x2f
   227f2:	d0f4      	beq.n	227de <d_print_comp_inner+0x215a>
   227f4:	f7fe b828 	b.w	20848 <d_print_comp_inner+0x1c4>
   227f8:	f8d0 e130 	ldr.w	lr, [r0, #304]	; 0x130
   227fc:	f8d0 212c 	ldr.w	r2, [r0, #300]	; 0x12c
   22800:	f1be 0f00 	cmp.w	lr, #0
   22804:	dd14      	ble.n	22830 <d_print_comp_inner+0x21ac>
   22806:	6813      	ldr	r3, [r2, #0]
   22808:	4299      	cmp	r1, r3
   2280a:	f000 83f5 	beq.w	22ff8 <d_print_comp_inner+0x2974>
   2280e:	f102 0008 	add.w	r0, r2, #8
   22812:	463b      	mov	r3, r7
   22814:	46a4      	mov	ip, r4
   22816:	e004      	b.n	22822 <d_print_comp_inner+0x219e>
   22818:	f852 4033 	ldr.w	r4, [r2, r3, lsl #3]
   2281c:	42a1      	cmp	r1, r4
   2281e:	f000 81d4 	beq.w	22bca <d_print_comp_inner+0x2546>
   22822:	3301      	adds	r3, #1
   22824:	459e      	cmp	lr, r3
   22826:	4681      	mov	r9, r0
   22828:	f100 0008 	add.w	r0, r0, #8
   2282c:	d1f4      	bne.n	22818 <d_print_comp_inner+0x2194>
   2282e:	4664      	mov	r4, ip
   22830:	f8d4 3134 	ldr.w	r3, [r4, #308]	; 0x134
   22834:	459e      	cmp	lr, r3
   22836:	f280 84b9 	bge.w	231ac <d_print_comp_inner+0x2b28>
   2283a:	f10e 0301 	add.w	r3, lr, #1
   2283e:	eb02 00ce 	add.w	r0, r2, lr, lsl #3
   22842:	f8c4 3130 	str.w	r3, [r4, #304]	; 0x130
   22846:	f842 103e 	str.w	r1, [r2, lr, lsl #3]
   2284a:	f8d4 2110 	ldr.w	r2, [r4, #272]	; 0x110
   2284e:	3004      	adds	r0, #4
   22850:	468e      	mov	lr, r1
   22852:	2a00      	cmp	r2, #0
   22854:	f000 848d 	beq.w	23172 <d_print_comp_inner+0x2aee>
   22858:	f8d4 313c 	ldr.w	r3, [r4, #316]	; 0x13c
   2285c:	f8d4 1140 	ldr.w	r1, [r4, #320]	; 0x140
   22860:	428b      	cmp	r3, r1
   22862:	f103 0c01 	add.w	ip, r3, #1
   22866:	f280 84a1 	bge.w	231ac <d_print_comp_inner+0x2b28>
   2286a:	f8d4 1138 	ldr.w	r1, [r4, #312]	; 0x138
   2286e:	f8c4 c13c 	str.w	ip, [r4, #316]	; 0x13c
   22872:	eb01 03c3 	add.w	r3, r1, r3, lsl #3
   22876:	6851      	ldr	r1, [r2, #4]
   22878:	6059      	str	r1, [r3, #4]
   2287a:	6003      	str	r3, [r0, #0]
   2287c:	6812      	ldr	r2, [r2, #0]
   2287e:	4618      	mov	r0, r3
   22880:	e7e7      	b.n	22852 <d_print_comp_inner+0x21ce>
   22882:	2500      	movs	r5, #0
   22884:	4619      	mov	r1, r3
   22886:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
   2288a:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   2288e:	f884 50ff 	strb.w	r5, [r4, #255]	; 0xff
   22892:	4620      	mov	r0, r4
   22894:	4798      	blx	r3
   22896:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   2289a:	1c5a      	adds	r2, r3, #1
   2289c:	f8c4 2124 	str.w	r2, [r4, #292]	; 0x124
   228a0:	462b      	mov	r3, r5
   228a2:	2201      	movs	r2, #1
   228a4:	f7fe bd3d 	b.w	21322 <d_print_comp_inner+0xc9e>
   228a8:	2e00      	cmp	r6, #0
   228aa:	f000 844d 	beq.w	23148 <d_print_comp_inner+0x2ac4>
   228ae:	f1ba 0f2f 	cmp.w	sl, #47	; 0x2f
   228b2:	f040 8488 	bne.w	231c6 <d_print_comp_inner+0x2b42>
   228b6:	6873      	ldr	r3, [r6, #4]
   228b8:	b373      	cbz	r3, 22918 <d_print_comp_inner+0x2294>
   228ba:	4607      	mov	r7, r0
   228bc:	e007      	b.n	228ce <d_print_comp_inner+0x224a>
   228be:	3701      	adds	r7, #1
   228c0:	68b6      	ldr	r6, [r6, #8]
   228c2:	b356      	cbz	r6, 2291a <d_print_comp_inner+0x2296>
   228c4:	7833      	ldrb	r3, [r6, #0]
   228c6:	2b2f      	cmp	r3, #47	; 0x2f
   228c8:	d127      	bne.n	2291a <d_print_comp_inner+0x2296>
   228ca:	6873      	ldr	r3, [r6, #4]
   228cc:	b32b      	cbz	r3, 2291a <d_print_comp_inner+0x2296>
   228ce:	781a      	ldrb	r2, [r3, #0]
   228d0:	2a4a      	cmp	r2, #74	; 0x4a
   228d2:	d1f4      	bne.n	228be <d_print_comp_inner+0x223a>
   228d4:	6859      	ldr	r1, [r3, #4]
   228d6:	4620      	mov	r0, r4
   228d8:	f7fb fe2c 	bl	1e534 <d_find_pack>
   228dc:	b198      	cbz	r0, 22906 <d_print_comp_inner+0x2282>
   228de:	7803      	ldrb	r3, [r0, #0]
   228e0:	2b2f      	cmp	r3, #47	; 0x2f
   228e2:	f040 846c 	bne.w	231be <d_print_comp_inner+0x2b3a>
   228e6:	6843      	ldr	r3, [r0, #4]
   228e8:	2b00      	cmp	r3, #0
   228ea:	f000 8464 	beq.w	231b6 <d_print_comp_inner+0x2b32>
   228ee:	4603      	mov	r3, r0
   228f0:	2000      	movs	r0, #0
   228f2:	e004      	b.n	228fe <d_print_comp_inner+0x227a>
   228f4:	781a      	ldrb	r2, [r3, #0]
   228f6:	2a2f      	cmp	r2, #47	; 0x2f
   228f8:	d105      	bne.n	22906 <d_print_comp_inner+0x2282>
   228fa:	685a      	ldr	r2, [r3, #4]
   228fc:	b11a      	cbz	r2, 22906 <d_print_comp_inner+0x2282>
   228fe:	689b      	ldr	r3, [r3, #8]
   22900:	3001      	adds	r0, #1
   22902:	2b00      	cmp	r3, #0
   22904:	d1f6      	bne.n	228f4 <d_print_comp_inner+0x2270>
   22906:	4407      	add	r7, r0
   22908:	e7da      	b.n	228c0 <d_print_comp_inner+0x223c>
   2290a:	bf00      	nop
   2290c:	0002e580 	.word	0x0002e580
   22910:	0002e5d4 	.word	0x0002e5d4
   22914:	0002e5e4 	.word	0x0002e5e4
   22918:	461f      	mov	r7, r3
   2291a:	4639      	mov	r1, r7
   2291c:	4620      	mov	r0, r4
   2291e:	f7fb fe8d 	bl	1e63c <d_append_num>
   22922:	f7fd bf7d 	b.w	20820 <d_print_comp_inner+0x19c>
   22926:	2500      	movs	r5, #0
   22928:	4619      	mov	r1, r3
   2292a:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
   2292e:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   22932:	f884 50ff 	strb.w	r5, [r4, #255]	; 0xff
   22936:	4620      	mov	r0, r4
   22938:	4798      	blx	r3
   2293a:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   2293e:	1c5a      	adds	r2, r3, #1
   22940:	f8c4 2124 	str.w	r2, [r4, #292]	; 0x124
   22944:	462b      	mov	r3, r5
   22946:	2101      	movs	r1, #1
   22948:	f7fe bb8e 	b.w	21068 <d_print_comp_inner+0x9e4>
   2294c:	2600      	movs	r6, #0
   2294e:	4619      	mov	r1, r3
   22950:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
   22954:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   22958:	f884 60ff 	strb.w	r6, [r4, #255]	; 0xff
   2295c:	4620      	mov	r0, r4
   2295e:	4798      	blx	r3
   22960:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   22964:	1c5a      	adds	r2, r3, #1
   22966:	f8c4 2124 	str.w	r2, [r4, #292]	; 0x124
   2296a:	4633      	mov	r3, r6
   2296c:	2101      	movs	r1, #1
   2296e:	f7fe bb65 	b.w	2103c <d_print_comp_inner+0x9b8>
   22972:	2200      	movs	r2, #0
   22974:	4619      	mov	r1, r3
   22976:	f884 20ff 	strb.w	r2, [r4, #255]	; 0xff
   2297a:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   2297e:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
   22982:	4620      	mov	r0, r4
   22984:	4798      	blx	r3
   22986:	2329      	movs	r3, #41	; 0x29
   22988:	7023      	strb	r3, [r4, #0]
   2298a:	f884 3104 	strb.w	r3, [r4, #260]	; 0x104
   2298e:	782a      	ldrb	r2, [r5, #0]
   22990:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   22994:	2101      	movs	r1, #1
   22996:	3301      	adds	r3, #1
   22998:	2a3d      	cmp	r2, #61	; 0x3d
   2299a:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
   2299e:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
   229a2:	f47e af58 	bne.w	21856 <d_print_comp_inner+0x11d2>
   229a6:	e63f      	b.n	22628 <d_print_comp_inner+0x1fa4>
   229a8:	2700      	movs	r7, #0
   229aa:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   229ae:	f884 70ff 	strb.w	r7, [r4, #255]	; 0xff
   229b2:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
   229b6:	4620      	mov	r0, r4
   229b8:	4798      	blx	r3
   229ba:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   229be:	f8c4 7100 	str.w	r7, [r4, #256]	; 0x100
   229c2:	3301      	adds	r3, #1
   229c4:	4639      	mov	r1, r7
   229c6:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
   229ca:	f7fe bf28 	b.w	2181e <d_print_comp_inner+0x119a>
   229ce:	2500      	movs	r5, #0
   229d0:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   229d4:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
   229d8:	f884 50ff 	strb.w	r5, [r4, #255]	; 0xff
   229dc:	4620      	mov	r0, r4
   229de:	4798      	blx	r3
   229e0:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   229e4:	3301      	adds	r3, #1
   229e6:	4629      	mov	r1, r5
   229e8:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
   229ec:	2201      	movs	r2, #1
   229ee:	f7ff bb12 	b.w	22016 <d_print_comp_inner+0x1992>
   229f2:	781b      	ldrb	r3, [r3, #0]
   229f4:	f1a3 0163 	sub.w	r1, r3, #99	; 0x63
   229f8:	2901      	cmp	r1, #1
   229fa:	d903      	bls.n	22a04 <d_print_comp_inner+0x2380>
   229fc:	3b72      	subs	r3, #114	; 0x72
   229fe:	2b01      	cmp	r3, #1
   22a00:	f63d aead 	bhi.w	2075e <d_print_comp_inner+0xda>
   22a04:	4641      	mov	r1, r8
   22a06:	4620      	mov	r0, r4
   22a08:	f001 f9c8 	bl	23d9c <d_print_expr_op>
   22a0c:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
   22a10:	29ff      	cmp	r1, #255	; 0xff
   22a12:	f000 8271 	beq.w	22ef8 <d_print_comp_inner+0x2874>
   22a16:	1c4a      	adds	r2, r1, #1
   22a18:	233c      	movs	r3, #60	; 0x3c
   22a1a:	f8c4 2100 	str.w	r2, [r4, #256]	; 0x100
   22a1e:	5463      	strb	r3, [r4, r1]
   22a20:	f884 3104 	strb.w	r3, [r4, #260]	; 0x104
   22a24:	68ab      	ldr	r3, [r5, #8]
   22a26:	4641      	mov	r1, r8
   22a28:	685a      	ldr	r2, [r3, #4]
   22a2a:	4620      	mov	r0, r4
   22a2c:	f000 fbce 	bl	231cc <d_print_comp>
   22a30:	2202      	movs	r2, #2
   22a32:	49d5      	ldr	r1, [pc, #852]	; (22d88 <d_print_comp_inner+0x2704>)
   22a34:	4620      	mov	r0, r4
   22a36:	f7fb fb51 	bl	1e0dc <d_append_buffer>
   22a3a:	68ab      	ldr	r3, [r5, #8]
   22a3c:	4641      	mov	r1, r8
   22a3e:	689a      	ldr	r2, [r3, #8]
   22a40:	4620      	mov	r0, r4
   22a42:	f000 fbc3 	bl	231cc <d_print_comp>
   22a46:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
   22a4a:	29ff      	cmp	r1, #255	; 0xff
   22a4c:	f000 81df 	beq.w	22e0e <d_print_comp_inner+0x278a>
   22a50:	2329      	movs	r3, #41	; 0x29
   22a52:	1c4a      	adds	r2, r1, #1
   22a54:	f8c4 2100 	str.w	r2, [r4, #256]	; 0x100
   22a58:	5463      	strb	r3, [r4, r1]
   22a5a:	f884 3104 	strb.w	r3, [r4, #260]	; 0x104
   22a5e:	f7fd bedf 	b.w	20820 <d_print_comp_inner+0x19c>
   22a62:	4632      	mov	r2, r6
   22a64:	4641      	mov	r1, r8
   22a66:	4620      	mov	r0, r4
   22a68:	f000 fbb0 	bl	231cc <d_print_comp>
   22a6c:	f7fd bed8 	b.w	20820 <d_print_comp_inner+0x19c>
   22a70:	2600      	movs	r6, #0
   22a72:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   22a76:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
   22a7a:	f884 60ff 	strb.w	r6, [r4, #255]	; 0xff
   22a7e:	4620      	mov	r0, r4
   22a80:	4798      	blx	r3
   22a82:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   22a86:	3301      	adds	r3, #1
   22a88:	4631      	mov	r1, r6
   22a8a:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
   22a8e:	2201      	movs	r2, #1
   22a90:	f7fe ba55 	b.w	20f3e <d_print_comp_inner+0x8ba>
   22a94:	49bd      	ldr	r1, [pc, #756]	; (22d8c <d_print_comp_inner+0x2708>)
   22a96:	6870      	ldr	r0, [r6, #4]
   22a98:	f005 ff00 	bl	2889c <strncmp>
   22a9c:	2800      	cmp	r0, #0
   22a9e:	f47e aabd 	bne.w	2101c <d_print_comp_inner+0x998>
   22aa2:	68aa      	ldr	r2, [r5, #8]
   22aa4:	4641      	mov	r1, r8
   22aa6:	4620      	mov	r0, r4
   22aa8:	f000 fb90 	bl	231cc <d_print_comp>
   22aac:	2202      	movs	r2, #2
   22aae:	49b8      	ldr	r1, [pc, #736]	; (22d90 <d_print_comp_inner+0x270c>)
   22ab0:	4620      	mov	r0, r4
   22ab2:	f7fb fb13 	bl	1e0dc <d_append_buffer>
   22ab6:	f7fe badd 	b.w	21074 <d_print_comp_inner+0x9f0>
   22aba:	68aa      	ldr	r2, [r5, #8]
   22abc:	7817      	ldrb	r7, [r2, #0]
   22abe:	2f00      	cmp	r7, #0
   22ac0:	f47e aea8 	bne.w	21814 <d_print_comp_inner+0x1190>
   22ac4:	2b3d      	cmp	r3, #61	; 0x3d
   22ac6:	f000 82ef 	beq.w	230a8 <d_print_comp_inner+0x2a24>
   22aca:	68aa      	ldr	r2, [r5, #8]
   22acc:	4641      	mov	r1, r8
   22ace:	4620      	mov	r0, r4
   22ad0:	3e02      	subs	r6, #2
   22ad2:	f000 fb7b 	bl	231cc <d_print_comp>
   22ad6:	2e04      	cmp	r6, #4
   22ad8:	f63d aea2 	bhi.w	20820 <d_print_comp_inner+0x19c>
   22adc:	e8df f006 	tbb	[pc, r6]
   22ae0:	0a111826 	.word	0x0a111826
   22ae4:	03          	.byte	0x03
   22ae5:	00          	.byte	0x00
   22ae6:	4620      	mov	r0, r4
   22ae8:	2203      	movs	r2, #3
   22aea:	49aa      	ldr	r1, [pc, #680]	; (22d94 <d_print_comp_inner+0x2710>)
   22aec:	f7fb faf6 	bl	1e0dc <d_append_buffer>
   22af0:	f7fd be96 	b.w	20820 <d_print_comp_inner+0x19c>
   22af4:	4620      	mov	r0, r4
   22af6:	2202      	movs	r2, #2
   22af8:	49a7      	ldr	r1, [pc, #668]	; (22d98 <d_print_comp_inner+0x2714>)
   22afa:	f7fb faef 	bl	1e0dc <d_append_buffer>
   22afe:	f7fd be8f 	b.w	20820 <d_print_comp_inner+0x19c>
   22b02:	4620      	mov	r0, r4
   22b04:	2202      	movs	r2, #2
   22b06:	49a5      	ldr	r1, [pc, #660]	; (22d9c <d_print_comp_inner+0x2718>)
   22b08:	f7fb fae8 	bl	1e0dc <d_append_buffer>
   22b0c:	f7fd be88 	b.w	20820 <d_print_comp_inner+0x19c>
   22b10:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
   22b14:	29ff      	cmp	r1, #255	; 0xff
   22b16:	f000 831a 	beq.w	2314e <d_print_comp_inner+0x2aca>
   22b1a:	236c      	movs	r3, #108	; 0x6c
   22b1c:	1c4a      	adds	r2, r1, #1
   22b1e:	f8c4 2100 	str.w	r2, [r4, #256]	; 0x100
   22b22:	5463      	strb	r3, [r4, r1]
   22b24:	f884 3104 	strb.w	r3, [r4, #260]	; 0x104
   22b28:	f7fd be7a 	b.w	20820 <d_print_comp_inner+0x19c>
   22b2c:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
   22b30:	29ff      	cmp	r1, #255	; 0xff
   22b32:	f000 82db 	beq.w	230ec <d_print_comp_inner+0x2a68>
   22b36:	2375      	movs	r3, #117	; 0x75
   22b38:	1c4a      	adds	r2, r1, #1
   22b3a:	f8c4 2100 	str.w	r2, [r4, #256]	; 0x100
   22b3e:	5463      	strb	r3, [r4, r1]
   22b40:	f884 3104 	strb.w	r3, [r4, #260]	; 0x104
   22b44:	f7fd be6c 	b.w	20820 <d_print_comp_inner+0x19c>
   22b48:	2600      	movs	r6, #0
   22b4a:	4619      	mov	r1, r3
   22b4c:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
   22b50:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   22b54:	f884 60ff 	strb.w	r6, [r4, #255]	; 0xff
   22b58:	4620      	mov	r0, r4
   22b5a:	4798      	blx	r3
   22b5c:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   22b60:	1c5a      	adds	r2, r3, #1
   22b62:	f8c4 2124 	str.w	r2, [r4, #292]	; 0x124
   22b66:	4633      	mov	r3, r6
   22b68:	2101      	movs	r1, #1
   22b6a:	f7fe bd3c 	b.w	215e6 <d_print_comp_inner+0xf62>
   22b6e:	f8c4 3114 	str.w	r3, [r4, #276]	; 0x114
   22b72:	f7fe bf95 	b.w	21aa0 <d_print_comp_inner+0x141c>
   22b76:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
   22b7a:	29ff      	cmp	r1, #255	; 0xff
   22b7c:	f000 8244 	beq.w	23008 <d_print_comp_inner+0x2984>
   22b80:	2320      	movs	r3, #32
   22b82:	1c4a      	adds	r2, r1, #1
   22b84:	f8c4 2100 	str.w	r2, [r4, #256]	; 0x100
   22b88:	5463      	strb	r3, [r4, r1]
   22b8a:	f884 3104 	strb.w	r3, [r4, #260]	; 0x104
   22b8e:	e447      	b.n	22420 <d_print_comp_inner+0x1d9c>
   22b90:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
   22b94:	29ff      	cmp	r1, #255	; 0xff
   22b96:	f000 826e 	beq.w	23076 <d_print_comp_inner+0x29f2>
   22b9a:	2320      	movs	r3, #32
   22b9c:	1c4a      	adds	r2, r1, #1
   22b9e:	f8c4 2100 	str.w	r2, [r4, #256]	; 0x100
   22ba2:	5463      	strb	r3, [r4, r1]
   22ba4:	f884 3104 	strb.w	r3, [r4, #260]	; 0x104
   22ba8:	e419      	b.n	223de <d_print_comp_inner+0x1d5a>
   22baa:	2500      	movs	r5, #0
   22bac:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   22bb0:	f884 50ff 	strb.w	r5, [r4, #255]	; 0xff
   22bb4:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
   22bb8:	4620      	mov	r0, r4
   22bba:	4798      	blx	r3
   22bbc:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   22bc0:	3301      	adds	r3, #1
   22bc2:	4629      	mov	r1, r5
   22bc4:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
   22bc8:	e4dd      	b.n	22586 <d_print_comp_inner+0x1f02>
   22bca:	4664      	mov	r4, ip
   22bcc:	f8d4 0128 	ldr.w	r0, [r4, #296]	; 0x128
   22bd0:	b1d8      	cbz	r0, 22c0a <d_print_comp_inner+0x2586>
   22bd2:	6802      	ldr	r2, [r0, #0]
   22bd4:	4291      	cmp	r1, r2
   22bd6:	d00a      	beq.n	22bee <d_print_comp_inner+0x256a>
   22bd8:	4603      	mov	r3, r0
   22bda:	e004      	b.n	22be6 <d_print_comp_inner+0x2562>
   22bdc:	685b      	ldr	r3, [r3, #4]
   22bde:	b1a3      	cbz	r3, 22c0a <d_print_comp_inner+0x2586>
   22be0:	681a      	ldr	r2, [r3, #0]
   22be2:	4291      	cmp	r1, r2
   22be4:	d003      	beq.n	22bee <d_print_comp_inner+0x256a>
   22be6:	4295      	cmp	r5, r2
   22be8:	d1f8      	bne.n	22bdc <d_print_comp_inner+0x2558>
   22bea:	4298      	cmp	r0, r3
   22bec:	d0f6      	beq.n	22bdc <d_print_comp_inner+0x2558>
   22bee:	3104      	adds	r1, #4
   22bf0:	4620      	mov	r0, r4
   22bf2:	f7fb fc83 	bl	1e4fc <d_lookup_template_argument.isra.6>
   22bf6:	2800      	cmp	r0, #0
   22bf8:	f43d ae26 	beq.w	20848 <d_print_comp_inner+0x1c4>
   22bfc:	7803      	ldrb	r3, [r0, #0]
   22bfe:	2b2f      	cmp	r3, #47	; 0x2f
   22c00:	f43d ae11 	beq.w	20826 <d_print_comp_inner+0x1a2>
   22c04:	4601      	mov	r1, r0
   22c06:	f7fe bc30 	b.w	2146a <d_print_comp_inner+0xde6>
   22c0a:	f8d9 3004 	ldr.w	r3, [r9, #4]
   22c0e:	f8d4 6110 	ldr.w	r6, [r4, #272]	; 0x110
   22c12:	f8c4 3110 	str.w	r3, [r4, #272]	; 0x110
   22c16:	3104      	adds	r1, #4
   22c18:	4620      	mov	r0, r4
   22c1a:	f7fb fc6f 	bl	1e4fc <d_lookup_template_argument.isra.6>
   22c1e:	2800      	cmp	r0, #0
   22c20:	f43d ae10 	beq.w	20844 <d_print_comp_inner+0x1c0>
   22c24:	2701      	movs	r7, #1
   22c26:	e7e9      	b.n	22bfc <d_print_comp_inner+0x2578>
   22c28:	2600      	movs	r6, #0
   22c2a:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   22c2e:	f884 60ff 	strb.w	r6, [r4, #255]	; 0xff
   22c32:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
   22c36:	4620      	mov	r0, r4
   22c38:	4798      	blx	r3
   22c3a:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   22c3e:	f8da 5004 	ldr.w	r5, [sl, #4]
   22c42:	3301      	adds	r3, #1
   22c44:	4631      	mov	r1, r6
   22c46:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
   22c4a:	f7ff b85a 	b.w	21d02 <d_print_comp_inner+0x167e>
   22c4e:	68aa      	ldr	r2, [r5, #8]
   22c50:	4641      	mov	r1, r8
   22c52:	4620      	mov	r0, r4
   22c54:	f000 faba 	bl	231cc <d_print_comp>
   22c58:	9b06      	ldr	r3, [sp, #24]
   22c5a:	9a00      	ldr	r2, [sp, #0]
   22c5c:	f8c4 2114 	str.w	r2, [r4, #276]	; 0x114
   22c60:	2b00      	cmp	r3, #0
   22c62:	f43e ac9d 	beq.w	215a0 <d_print_comp_inner+0xf1c>
   22c66:	f7fd bddb 	b.w	20820 <d_print_comp_inner+0x19c>
   22c6a:	255f      	movs	r5, #95	; 0x5f
   22c6c:	f7ff ba10 	b.w	22090 <d_print_comp_inner+0x1a0c>
   22c70:	2500      	movs	r5, #0
   22c72:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   22c76:	f884 50ff 	strb.w	r5, [r4, #255]	; 0xff
   22c7a:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
   22c7e:	4620      	mov	r0, r4
   22c80:	4798      	blx	r3
   22c82:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   22c86:	3301      	adds	r3, #1
   22c88:	4629      	mov	r1, r5
   22c8a:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
   22c8e:	f7ff bb82 	b.w	22396 <d_print_comp_inner+0x1d12>
   22c92:	4648      	mov	r0, r9
   22c94:	4942      	ldr	r1, [pc, #264]	; (22da0 <d_print_comp_inner+0x271c>)
   22c96:	f005 fc17 	bl	284c8 <strcmp>
   22c9a:	b120      	cbz	r0, 22ca6 <d_print_comp_inner+0x2622>
   22c9c:	463a      	mov	r2, r7
   22c9e:	4641      	mov	r1, r8
   22ca0:	4620      	mov	r0, r4
   22ca2:	f001 f87b 	bl	23d9c <d_print_expr_op>
   22ca6:	68ab      	ldr	r3, [r5, #8]
   22ca8:	4641      	mov	r1, r8
   22caa:	689a      	ldr	r2, [r3, #8]
   22cac:	4620      	mov	r0, r4
   22cae:	f001 f8b3 	bl	23e18 <d_print_subexpr>
   22cb2:	f7fd bd9d 	b.w	207f0 <d_print_comp_inner+0x16c>
   22cb6:	2600      	movs	r6, #0
   22cb8:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   22cbc:	f884 60ff 	strb.w	r6, [r4, #255]	; 0xff
   22cc0:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
   22cc4:	4620      	mov	r0, r4
   22cc6:	4798      	blx	r3
   22cc8:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   22ccc:	3301      	adds	r3, #1
   22cce:	4631      	mov	r1, r6
   22cd0:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
   22cd4:	f7ff bb88 	b.w	223e8 <d_print_comp_inner+0x1d64>
   22cd8:	2500      	movs	r5, #0
   22cda:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   22cde:	f884 50ff 	strb.w	r5, [r4, #255]	; 0xff
   22ce2:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
   22ce6:	4620      	mov	r0, r4
   22ce8:	4798      	blx	r3
   22cea:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   22cee:	3301      	adds	r3, #1
   22cf0:	4629      	mov	r1, r5
   22cf2:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
   22cf6:	f7fe bb59 	b.w	213ac <d_print_comp_inner+0xd28>
   22cfa:	2500      	movs	r5, #0
   22cfc:	f8d0 3108 	ldr.w	r3, [r0, #264]	; 0x108
   22d00:	f880 50ff 	strb.w	r5, [r0, #255]	; 0xff
   22d04:	f8d0 210c 	ldr.w	r2, [r0, #268]	; 0x10c
   22d08:	4798      	blx	r3
   22d0a:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   22d0e:	f8c4 5100 	str.w	r5, [r4, #256]	; 0x100
   22d12:	3301      	adds	r3, #1
   22d14:	4629      	mov	r1, r5
   22d16:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
   22d1a:	f7fe bb2b 	b.w	21374 <d_print_comp_inner+0xcf0>
   22d1e:	6840      	ldr	r0, [r0, #4]
   22d20:	2800      	cmp	r0, #0
   22d22:	f43d ad91 	beq.w	20848 <d_print_comp_inner+0x1c4>
   22d26:	f7fe b959 	b.w	20fdc <d_print_comp_inner+0x958>
   22d2a:	f884 00ff 	strb.w	r0, [r4, #255]	; 0xff
   22d2e:	4619      	mov	r1, r3
   22d30:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
   22d34:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   22d38:	4620      	mov	r0, r4
   22d3a:	4798      	blx	r3
   22d3c:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   22d40:	1c5a      	adds	r2, r3, #1
   22d42:	f8c4 2124 	str.w	r2, [r4, #292]	; 0x124
   22d46:	462b      	mov	r3, r5
   22d48:	f7ff bb14 	b.w	22374 <d_print_comp_inner+0x1cf0>
   22d4c:	6873      	ldr	r3, [r6, #4]
   22d4e:	781a      	ldrb	r2, [r3, #0]
   22d50:	2a01      	cmp	r2, #1
   22d52:	f000 8153 	beq.w	22ffc <d_print_comp_inner+0x2978>
   22d56:	f896 a000 	ldrb.w	sl, [r6]
   22d5a:	f7ff bae0 	b.w	2231e <d_print_comp_inner+0x1c9a>
   22d5e:	2500      	movs	r5, #0
   22d60:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   22d64:	f884 50ff 	strb.w	r5, [r4, #255]	; 0xff
   22d68:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
   22d6c:	4620      	mov	r0, r4
   22d6e:	4798      	blx	r3
   22d70:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   22d74:	3301      	adds	r3, #1
   22d76:	4629      	mov	r1, r5
   22d78:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
   22d7c:	f7ff bb55 	b.w	2242a <d_print_comp_inner+0x1da6>
   22d80:	4654      	mov	r4, sl
   22d82:	f7fe be8d 	b.w	21aa0 <d_print_comp_inner+0x141c>
   22d86:	bf00      	nop
   22d88:	0002e780 	.word	0x0002e780
   22d8c:	0002e5e8 	.word	0x0002e5e8
   22d90:	0002e5f0 	.word	0x0002e5f0
   22d94:	0002e79c 	.word	0x0002e79c
   22d98:	0002e798 	.word	0x0002e798
   22d9c:	0002e794 	.word	0x0002e794
   22da0:	0002e588 	.word	0x0002e588
   22da4:	686a      	ldr	r2, [r5, #4]
   22da6:	4641      	mov	r1, r8
   22da8:	4620      	mov	r0, r4
   22daa:	f001 f835 	bl	23e18 <d_print_subexpr>
   22dae:	4620      	mov	r0, r4
   22db0:	2203      	movs	r2, #3
   22db2:	49e2      	ldr	r1, [pc, #904]	; (2313c <d_print_comp_inner+0x2ab8>)
   22db4:	f7fb f992 	bl	1e0dc <d_append_buffer>
   22db8:	f7fd bd32 	b.w	20820 <d_print_comp_inner+0x19c>
   22dbc:	ab14      	add	r3, sp, #80	; 0x50
   22dbe:	9603      	str	r6, [sp, #12]
   22dc0:	f843 cd48 	str.w	ip, [r3, #-72]!
   22dc4:	f8c4 3110 	str.w	r3, [r4, #272]	; 0x110
   22dc8:	f7fe b85a 	b.w	20e80 <d_print_comp_inner+0x7fc>
   22dcc:	2700      	movs	r7, #0
   22dce:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   22dd2:	f884 70ff 	strb.w	r7, [r4, #255]	; 0xff
   22dd6:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
   22dda:	4620      	mov	r0, r4
   22ddc:	4798      	blx	r3
   22dde:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   22de2:	3301      	adds	r3, #1
   22de4:	4639      	mov	r1, r7
   22de6:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
   22dea:	e41d      	b.n	22628 <d_print_comp_inner+0x1fa4>
   22dec:	2600      	movs	r6, #0
   22dee:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   22df2:	f884 60ff 	strb.w	r6, [r4, #255]	; 0xff
   22df6:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
   22dfa:	4620      	mov	r0, r4
   22dfc:	4798      	blx	r3
   22dfe:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   22e02:	3301      	adds	r3, #1
   22e04:	4631      	mov	r1, r6
   22e06:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
   22e0a:	f7ff bb8a 	b.w	22522 <d_print_comp_inner+0x1e9e>
   22e0e:	2500      	movs	r5, #0
   22e10:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   22e14:	f884 50ff 	strb.w	r5, [r4, #255]	; 0xff
   22e18:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
   22e1c:	4620      	mov	r0, r4
   22e1e:	4798      	blx	r3
   22e20:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   22e24:	3301      	adds	r3, #1
   22e26:	4629      	mov	r1, r5
   22e28:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
   22e2c:	e610      	b.n	22a50 <d_print_comp_inner+0x23cc>
   22e2e:	2600      	movs	r6, #0
   22e30:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   22e34:	f884 60ff 	strb.w	r6, [r4, #255]	; 0xff
   22e38:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
   22e3c:	4620      	mov	r0, r4
   22e3e:	4798      	blx	r3
   22e40:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   22e44:	3301      	adds	r3, #1
   22e46:	4631      	mov	r1, r6
   22e48:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
   22e4c:	f7ff bb8a 	b.w	22564 <d_print_comp_inner+0x1ee0>
   22e50:	685a      	ldr	r2, [r3, #4]
   22e52:	6891      	ldr	r1, [r2, #8]
   22e54:	2901      	cmp	r1, #1
   22e56:	f47d ac90 	bne.w	2077a <d_print_comp_inner+0xf6>
   22e5a:	6852      	ldr	r2, [r2, #4]
   22e5c:	7812      	ldrb	r2, [r2, #0]
   22e5e:	2a3e      	cmp	r2, #62	; 0x3e
   22e60:	f47d ac8b 	bne.w	2077a <d_print_comp_inner+0xf6>
   22e64:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
   22e68:	29ff      	cmp	r1, #255	; 0xff
   22e6a:	d10f      	bne.n	22e8c <d_print_comp_inner+0x2808>
   22e6c:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   22e70:	f884 60ff 	strb.w	r6, [r4, #255]	; 0xff
   22e74:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
   22e78:	4620      	mov	r0, r4
   22e7a:	4798      	blx	r3
   22e7c:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   22e80:	f8c4 6100 	str.w	r6, [r4, #256]	; 0x100
   22e84:	3301      	adds	r3, #1
   22e86:	4631      	mov	r1, r6
   22e88:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
   22e8c:	2328      	movs	r3, #40	; 0x28
   22e8e:	1c4a      	adds	r2, r1, #1
   22e90:	f8c4 2100 	str.w	r2, [r4, #256]	; 0x100
   22e94:	5463      	strb	r3, [r4, r1]
   22e96:	f884 3104 	strb.w	r3, [r4, #260]	; 0x104
   22e9a:	686b      	ldr	r3, [r5, #4]
   22e9c:	f7fd bc6d 	b.w	2077a <d_print_comp_inner+0xf6>
   22ea0:	2500      	movs	r5, #0
   22ea2:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   22ea6:	f884 50ff 	strb.w	r5, [r4, #255]	; 0xff
   22eaa:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
   22eae:	4620      	mov	r0, r4
   22eb0:	4798      	blx	r3
   22eb2:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   22eb6:	3301      	adds	r3, #1
   22eb8:	4629      	mov	r1, r5
   22eba:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
   22ebe:	f7ff bb0b 	b.w	224d8 <d_print_comp_inner+0x1e54>
   22ec2:	f8db b004 	ldr.w	fp, [fp, #4]
   22ec6:	f1bb 0f00 	cmp.w	fp, #0
   22eca:	f43e ade9 	beq.w	21aa0 <d_print_comp_inner+0x141c>
   22ece:	f7fd bfc3 	b.w	20e58 <d_print_comp_inner+0x7d4>
   22ed2:	9b02      	ldr	r3, [sp, #8]
   22ed4:	f8c4 3110 	str.w	r3, [r4, #272]	; 0x110
   22ed8:	f7fd bfdb 	b.w	20e92 <d_print_comp_inner+0x80e>
   22edc:	6893      	ldr	r3, [r2, #8]
   22ede:	781b      	ldrb	r3, [r3, #0]
   22ee0:	2b29      	cmp	r3, #41	; 0x29
   22ee2:	bf1c      	itt	ne
   22ee4:	2301      	movne	r3, #1
   22ee6:	f8c4 3118 	strne.w	r3, [r4, #280]	; 0x118
   22eea:	6852      	ldr	r2, [r2, #4]
   22eec:	4641      	mov	r1, r8
   22eee:	4620      	mov	r0, r4
   22ef0:	f000 ff92 	bl	23e18 <d_print_subexpr>
   22ef4:	f7fd bc52 	b.w	2079c <d_print_comp_inner+0x118>
   22ef8:	2600      	movs	r6, #0
   22efa:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   22efe:	f884 60ff 	strb.w	r6, [r4, #255]	; 0xff
   22f02:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
   22f06:	4620      	mov	r0, r4
   22f08:	4798      	blx	r3
   22f0a:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   22f0e:	3301      	adds	r3, #1
   22f10:	4631      	mov	r1, r6
   22f12:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
   22f16:	e57e      	b.n	22a16 <d_print_comp_inner+0x2392>
   22f18:	6872      	ldr	r2, [r6, #4]
   22f1a:	4641      	mov	r1, r8
   22f1c:	4620      	mov	r0, r4
   22f1e:	f000 ff7b 	bl	23e18 <d_print_subexpr>
   22f22:	464a      	mov	r2, r9
   22f24:	4641      	mov	r1, r8
   22f26:	4620      	mov	r0, r4
   22f28:	f000 ff38 	bl	23d9c <d_print_expr_op>
   22f2c:	f7fd bc78 	b.w	20820 <d_print_comp_inner+0x19c>
   22f30:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   22f34:	f884 50ff 	strb.w	r5, [r4, #255]	; 0xff
   22f38:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
   22f3c:	4620      	mov	r0, r4
   22f3e:	4798      	blx	r3
   22f40:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   22f44:	3301      	adds	r3, #1
   22f46:	4629      	mov	r1, r5
   22f48:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
   22f4c:	f7fd bfad 	b.w	20eaa <d_print_comp_inner+0x826>
   22f50:	464a      	mov	r2, r9
   22f52:	4641      	mov	r1, r8
   22f54:	4620      	mov	r0, r4
   22f56:	f000 ff5f 	bl	23e18 <d_print_subexpr>
   22f5a:	4652      	mov	r2, sl
   22f5c:	4641      	mov	r1, r8
   22f5e:	4620      	mov	r0, r4
   22f60:	f000 ff1c 	bl	23d9c <d_print_expr_op>
   22f64:	463a      	mov	r2, r7
   22f66:	4641      	mov	r1, r8
   22f68:	4620      	mov	r0, r4
   22f6a:	f000 ff55 	bl	23e18 <d_print_subexpr>
   22f6e:	4620      	mov	r0, r4
   22f70:	2203      	movs	r2, #3
   22f72:	4973      	ldr	r1, [pc, #460]	; (23140 <d_print_comp_inner+0x2abc>)
   22f74:	f7fb f8b2 	bl	1e0dc <d_append_buffer>
   22f78:	462a      	mov	r2, r5
   22f7a:	4641      	mov	r1, r8
   22f7c:	4620      	mov	r0, r4
   22f7e:	f000 ff4b 	bl	23e18 <d_print_subexpr>
   22f82:	f7fd bc4d 	b.w	20820 <d_print_comp_inner+0x19c>
   22f86:	454f      	cmp	r7, r9
   22f88:	f67f ae6f 	bls.w	22c6a <d_print_comp_inner+0x25e6>
   22f8c:	2d5f      	cmp	r5, #95	; 0x5f
   22f8e:	f47f ae6c 	bne.w	22c6a <d_print_comp_inner+0x25e6>
   22f92:	28ff      	cmp	r0, #255	; 0xff
   22f94:	f63f a87c 	bhi.w	22090 <d_print_comp_inner+0x1a0c>
   22f98:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
   22f9c:	29ff      	cmp	r1, #255	; 0xff
   22f9e:	b2c5      	uxtb	r5, r0
   22fa0:	d10f      	bne.n	22fc2 <d_print_comp_inner+0x293e>
   22fa2:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   22fa6:	f884 80ff 	strb.w	r8, [r4, #255]	; 0xff
   22faa:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
   22fae:	4620      	mov	r0, r4
   22fb0:	4798      	blx	r3
   22fb2:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   22fb6:	f8c4 8100 	str.w	r8, [r4, #256]	; 0x100
   22fba:	3301      	adds	r3, #1
   22fbc:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
   22fc0:	2100      	movs	r1, #0
   22fc2:	1c4b      	adds	r3, r1, #1
   22fc4:	f8c4 3100 	str.w	r3, [r4, #256]	; 0x100
   22fc8:	464e      	mov	r6, r9
   22fca:	5465      	strb	r5, [r4, r1]
   22fcc:	f884 5104 	strb.w	r5, [r4, #260]	; 0x104
   22fd0:	f7ff b868 	b.w	220a4 <d_print_comp_inner+0x1a20>
   22fd4:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   22fd8:	f884 60ff 	strb.w	r6, [r4, #255]	; 0xff
   22fdc:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
   22fe0:	4620      	mov	r0, r4
   22fe2:	4798      	blx	r3
   22fe4:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   22fe8:	f8c4 6100 	str.w	r6, [r4, #256]	; 0x100
   22fec:	3301      	adds	r3, #1
   22fee:	4631      	mov	r1, r6
   22ff0:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
   22ff4:	f7ff bbe5 	b.w	227c2 <d_print_comp_inner+0x213e>
   22ff8:	4691      	mov	r9, r2
   22ffa:	e5e7      	b.n	22bcc <d_print_comp_inner+0x2548>
   22ffc:	68b2      	ldr	r2, [r6, #8]
   22ffe:	7812      	ldrb	r2, [r2, #0]
   23000:	2a29      	cmp	r2, #41	; 0x29
   23002:	bf08      	it	eq
   23004:	461e      	moveq	r6, r3
   23006:	e6a6      	b.n	22d56 <d_print_comp_inner+0x26d2>
   23008:	2500      	movs	r5, #0
   2300a:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   2300e:	f884 50ff 	strb.w	r5, [r4, #255]	; 0xff
   23012:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
   23016:	4620      	mov	r0, r4
   23018:	4798      	blx	r3
   2301a:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   2301e:	f8c4 5100 	str.w	r5, [r4, #256]	; 0x100
   23022:	3301      	adds	r3, #1
   23024:	4629      	mov	r1, r5
   23026:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
   2302a:	e5a9      	b.n	22b80 <d_print_comp_inner+0x24fc>
   2302c:	2600      	movs	r6, #0
   2302e:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   23032:	f884 60ff 	strb.w	r6, [r4, #255]	; 0xff
   23036:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
   2303a:	4620      	mov	r0, r4
   2303c:	4798      	blx	r3
   2303e:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   23042:	f8c4 6100 	str.w	r6, [r4, #256]	; 0x100
   23046:	3301      	adds	r3, #1
   23048:	4631      	mov	r1, r6
   2304a:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
   2304e:	f7fd bbc8 	b.w	207e2 <d_print_comp_inner+0x15e>
   23052:	f884 00ff 	strb.w	r0, [r4, #255]	; 0xff
   23056:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   2305a:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
   2305e:	4620      	mov	r0, r4
   23060:	4798      	blx	r3
   23062:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   23066:	f8c4 6100 	str.w	r6, [r4, #256]	; 0x100
   2306a:	3301      	adds	r3, #1
   2306c:	4631      	mov	r1, r6
   2306e:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
   23072:	f7fd bba4 	b.w	207be <d_print_comp_inner+0x13a>
   23076:	2600      	movs	r6, #0
   23078:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   2307c:	f884 60ff 	strb.w	r6, [r4, #255]	; 0xff
   23080:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
   23084:	4620      	mov	r0, r4
   23086:	4798      	blx	r3
   23088:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   2308c:	f8c4 6100 	str.w	r6, [r4, #256]	; 0x100
   23090:	3301      	adds	r3, #1
   23092:	4631      	mov	r1, r6
   23094:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
   23098:	e57f      	b.n	22b9a <d_print_comp_inner+0x2516>
   2309a:	6841      	ldr	r1, [r0, #4]
   2309c:	2900      	cmp	r1, #0
   2309e:	f43d abd0 	beq.w	20842 <d_print_comp_inner+0x1be>
   230a2:	780b      	ldrb	r3, [r1, #0]
   230a4:	f7fe b9e1 	b.w	2146a <d_print_comp_inner+0xde6>
   230a8:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
   230ac:	29ff      	cmp	r1, #255	; 0xff
   230ae:	d00d      	beq.n	230cc <d_print_comp_inner+0x2a48>
   230b0:	232d      	movs	r3, #45	; 0x2d
   230b2:	1c4a      	adds	r2, r1, #1
   230b4:	f8c4 2100 	str.w	r2, [r4, #256]	; 0x100
   230b8:	5463      	strb	r3, [r4, r1]
   230ba:	f884 3104 	strb.w	r3, [r4, #260]	; 0x104
   230be:	e504      	b.n	22aca <d_print_comp_inner+0x2446>
   230c0:	2205      	movs	r2, #5
   230c2:	4920      	ldr	r1, [pc, #128]	; (23144 <d_print_comp_inner+0x2ac0>)
   230c4:	f7fb f80a 	bl	1e0dc <d_append_buffer>
   230c8:	f7fd bbaa 	b.w	20820 <d_print_comp_inner+0x19c>
   230cc:	f8d0 3108 	ldr.w	r3, [r0, #264]	; 0x108
   230d0:	f880 70ff 	strb.w	r7, [r0, #255]	; 0xff
   230d4:	f8d0 210c 	ldr.w	r2, [r0, #268]	; 0x10c
   230d8:	4798      	blx	r3
   230da:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   230de:	f8c4 7100 	str.w	r7, [r4, #256]	; 0x100
   230e2:	3301      	adds	r3, #1
   230e4:	4639      	mov	r1, r7
   230e6:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
   230ea:	e7e1      	b.n	230b0 <d_print_comp_inner+0x2a2c>
   230ec:	2500      	movs	r5, #0
   230ee:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   230f2:	f884 50ff 	strb.w	r5, [r4, #255]	; 0xff
   230f6:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
   230fa:	4620      	mov	r0, r4
   230fc:	4798      	blx	r3
   230fe:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   23102:	f8c4 5100 	str.w	r5, [r4, #256]	; 0x100
   23106:	3301      	adds	r3, #1
   23108:	4629      	mov	r1, r5
   2310a:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
   2310e:	e512      	b.n	22b36 <d_print_comp_inner+0x24b2>
   23110:	2700      	movs	r7, #0
   23112:	f7ff b913 	b.w	2233c <d_print_comp_inner+0x1cb8>
   23116:	2500      	movs	r5, #0
   23118:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   2311c:	f884 50ff 	strb.w	r5, [r4, #255]	; 0xff
   23120:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
   23124:	4620      	mov	r0, r4
   23126:	4798      	blx	r3
   23128:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   2312c:	f8c4 5100 	str.w	r5, [r4, #256]	; 0x100
   23130:	3301      	adds	r3, #1
   23132:	4629      	mov	r1, r5
   23134:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
   23138:	f7fd bb6b 	b.w	20812 <d_print_comp_inner+0x18e>
   2313c:	0002e7cc 	.word	0x0002e7cc
   23140:	0002e788 	.word	0x0002e788
   23144:	0002e7a0 	.word	0x0002e7a0
   23148:	4637      	mov	r7, r6
   2314a:	f7ff bbe6 	b.w	2291a <d_print_comp_inner+0x2296>
   2314e:	2500      	movs	r5, #0
   23150:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   23154:	f884 50ff 	strb.w	r5, [r4, #255]	; 0xff
   23158:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
   2315c:	4620      	mov	r0, r4
   2315e:	4798      	blx	r3
   23160:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   23164:	f8c4 5100 	str.w	r5, [r4, #256]	; 0x100
   23168:	3301      	adds	r3, #1
   2316a:	4629      	mov	r1, r5
   2316c:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
   23170:	e4d3      	b.n	22b1a <d_print_comp_inner+0x2496>
   23172:	4671      	mov	r1, lr
   23174:	6002      	str	r2, [r0, #0]
   23176:	3104      	adds	r1, #4
   23178:	4620      	mov	r0, r4
   2317a:	f7fb f9bf 	bl	1e4fc <d_lookup_template_argument.isra.6>
   2317e:	2800      	cmp	r0, #0
   23180:	f47f ad3c 	bne.w	22bfc <d_print_comp_inner+0x2578>
   23184:	f7fd bb60 	b.w	20848 <d_print_comp_inner+0x1c4>
   23188:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   2318c:	f884 60ff 	strb.w	r6, [r4, #255]	; 0xff
   23190:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
   23194:	4620      	mov	r0, r4
   23196:	4798      	blx	r3
   23198:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   2319c:	f8c4 6100 	str.w	r6, [r4, #256]	; 0x100
   231a0:	3301      	adds	r3, #1
   231a2:	4631      	mov	r1, r6
   231a4:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
   231a8:	f7fe bc02 	b.w	219b0 <d_print_comp_inner+0x132c>
   231ac:	2301      	movs	r3, #1
   231ae:	f8c4 3118 	str.w	r3, [r4, #280]	; 0x118
   231b2:	f7fd bb35 	b.w	20820 <d_print_comp_inner+0x19c>
   231b6:	4618      	mov	r0, r3
   231b8:	4407      	add	r7, r0
   231ba:	f7ff bb81 	b.w	228c0 <d_print_comp_inner+0x223c>
   231be:	2000      	movs	r0, #0
   231c0:	4407      	add	r7, r0
   231c2:	f7ff bb7d 	b.w	228c0 <d_print_comp_inner+0x223c>
   231c6:	4607      	mov	r7, r0
   231c8:	f7ff bba7 	b.w	2291a <d_print_comp_inner+0x2296>

000231cc <d_print_comp>:
   231cc:	b510      	push	{r4, lr}
   231ce:	f8d0 3128 	ldr.w	r3, [r0, #296]	; 0x128
   231d2:	b082      	sub	sp, #8
   231d4:	f8c0 d128 	str.w	sp, [r0, #296]	; 0x128
   231d8:	4604      	mov	r4, r0
   231da:	e88d 000c 	stmia.w	sp, {r2, r3}
   231de:	f7fd fa51 	bl	20684 <d_print_comp_inner>
   231e2:	9b01      	ldr	r3, [sp, #4]
   231e4:	f8c4 3128 	str.w	r3, [r4, #296]	; 0x128
   231e8:	b002      	add	sp, #8
   231ea:	bd10      	pop	{r4, pc}

000231ec <d_print_mod>:
   231ec:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   231f0:	7813      	ldrb	r3, [r2, #0]
   231f2:	3b03      	subs	r3, #3
   231f4:	b082      	sub	sp, #8
   231f6:	4615      	mov	r5, r2
   231f8:	4604      	mov	r4, r0
   231fa:	4688      	mov	r8, r1
   231fc:	2b49      	cmp	r3, #73	; 0x49
   231fe:	f200 8223 	bhi.w	23648 <d_print_mod+0x45c>
   23202:	e8df f013 	tbh	[pc, r3, lsl #1]
   23206:	01e7      	.short	0x01e7
   23208:	02210221 	.word	0x02210221
   2320c:	02210221 	.word	0x02210221
   23210:	02210221 	.word	0x02210221
   23214:	02210221 	.word	0x02210221
   23218:	02210221 	.word	0x02210221
   2321c:	02210221 	.word	0x02210221
   23220:	02210221 	.word	0x02210221
   23224:	02210221 	.word	0x02210221
   23228:	02210221 	.word	0x02210221
   2322c:	02210221 	.word	0x02210221
   23230:	01e90221 	.word	0x01e90221
   23234:	01a80182 	.word	0x01a80182
   23238:	018201e9 	.word	0x018201e9
   2323c:	01cd01a8 	.word	0x01cd01a8
   23240:	006f01da 	.word	0x006f01da
   23244:	009c008c 	.word	0x009c008c
   23248:	00cf00ab 	.word	0x00cf00ab
   2324c:	022100f4 	.word	0x022100f4
   23250:	02210221 	.word	0x02210221
   23254:	01190221 	.word	0x01190221
   23258:	015c0221 	.word	0x015c0221
   2325c:	02210221 	.word	0x02210221
   23260:	02210221 	.word	0x02210221
   23264:	02210221 	.word	0x02210221
   23268:	02210221 	.word	0x02210221
   2326c:	02210221 	.word	0x02210221
   23270:	02210221 	.word	0x02210221
   23274:	02210221 	.word	0x02210221
   23278:	02210221 	.word	0x02210221
   2327c:	02210221 	.word	0x02210221
   23280:	02210221 	.word	0x02210221
   23284:	02210221 	.word	0x02210221
   23288:	02210221 	.word	0x02210221
   2328c:	02210221 	.word	0x02210221
   23290:	02210221 	.word	0x02210221
   23294:	02210221 	.word	0x02210221
   23298:	004a      	.short	0x004a
   2329a:	4dd3      	ldr	r5, [pc, #844]	; (235e8 <d_print_mod+0x3fc>)
   2329c:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
   232a0:	f105 0711 	add.w	r7, r5, #17
   232a4:	f04f 0800 	mov.w	r8, #0
   232a8:	e008      	b.n	232bc <d_print_mod+0xd0>
   232aa:	460b      	mov	r3, r1
   232ac:	3101      	adds	r1, #1
   232ae:	42bd      	cmp	r5, r7
   232b0:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
   232b4:	54e6      	strb	r6, [r4, r3]
   232b6:	f884 6104 	strb.w	r6, [r4, #260]	; 0x104
   232ba:	d02d      	beq.n	23318 <d_print_mod+0x12c>
   232bc:	29ff      	cmp	r1, #255	; 0xff
   232be:	f815 6f01 	ldrb.w	r6, [r5, #1]!
   232c2:	d1f2      	bne.n	232aa <d_print_mod+0xbe>
   232c4:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   232c8:	f884 80ff 	strb.w	r8, [r4, #255]	; 0xff
   232cc:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
   232d0:	4620      	mov	r0, r4
   232d2:	4798      	blx	r3
   232d4:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   232d8:	3301      	adds	r3, #1
   232da:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
   232de:	2101      	movs	r1, #1
   232e0:	2300      	movs	r3, #0
   232e2:	e7e4      	b.n	232ae <d_print_mod+0xc2>
   232e4:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
   232e8:	29ff      	cmp	r1, #255	; 0xff
   232ea:	f000 81f7 	beq.w	236dc <d_print_mod+0x4f0>
   232ee:	1c4a      	adds	r2, r1, #1
   232f0:	2320      	movs	r3, #32
   232f2:	f8c4 2100 	str.w	r2, [r4, #256]	; 0x100
   232f6:	5463      	strb	r3, [r4, r1]
   232f8:	f884 3104 	strb.w	r3, [r4, #260]	; 0x104
   232fc:	68aa      	ldr	r2, [r5, #8]
   232fe:	f8d4 3128 	ldr.w	r3, [r4, #296]	; 0x128
   23302:	9200      	str	r2, [sp, #0]
   23304:	4641      	mov	r1, r8
   23306:	f8c4 d128 	str.w	sp, [r4, #296]	; 0x128
   2330a:	4620      	mov	r0, r4
   2330c:	9301      	str	r3, [sp, #4]
   2330e:	f7fd f9b9 	bl	20684 <d_print_comp_inner>
   23312:	9b01      	ldr	r3, [sp, #4]
   23314:	f8c4 3128 	str.w	r3, [r4, #296]	; 0x128
   23318:	b002      	add	sp, #8
   2331a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   2331e:	f011 0504 	ands.w	r5, r1, #4
   23322:	d1f9      	bne.n	23318 <d_print_mod+0x12c>
   23324:	f8d0 3100 	ldr.w	r3, [r0, #256]	; 0x100
   23328:	2bff      	cmp	r3, #255	; 0xff
   2332a:	f000 821c 	beq.w	23766 <d_print_mod+0x57a>
   2332e:	222a      	movs	r2, #42	; 0x2a
   23330:	1c59      	adds	r1, r3, #1
   23332:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
   23336:	54e2      	strb	r2, [r4, r3]
   23338:	f884 2104 	strb.w	r2, [r4, #260]	; 0x104
   2333c:	e7ec      	b.n	23318 <d_print_mod+0x12c>
   2333e:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
   23342:	29ff      	cmp	r1, #255	; 0xff
   23344:	f000 81b9 	beq.w	236ba <d_print_mod+0x4ce>
   23348:	1c4a      	adds	r2, r1, #1
   2334a:	2326      	movs	r3, #38	; 0x26
   2334c:	f8c4 2100 	str.w	r2, [r4, #256]	; 0x100
   23350:	5463      	strb	r3, [r4, r1]
   23352:	f884 3104 	strb.w	r3, [r4, #260]	; 0x104
   23356:	b002      	add	sp, #8
   23358:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   2335c:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
   23360:	4da2      	ldr	r5, [pc, #648]	; (235ec <d_print_mod+0x400>)
   23362:	f04f 0800 	mov.w	r8, #0
   23366:	1caf      	adds	r7, r5, #2
   23368:	e008      	b.n	2337c <d_print_mod+0x190>
   2336a:	460b      	mov	r3, r1
   2336c:	3101      	adds	r1, #1
   2336e:	42bd      	cmp	r5, r7
   23370:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
   23374:	54e6      	strb	r6, [r4, r3]
   23376:	f884 6104 	strb.w	r6, [r4, #260]	; 0x104
   2337a:	d0cd      	beq.n	23318 <d_print_mod+0x12c>
   2337c:	29ff      	cmp	r1, #255	; 0xff
   2337e:	f815 6b01 	ldrb.w	r6, [r5], #1
   23382:	d1f2      	bne.n	2336a <d_print_mod+0x17e>
   23384:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   23388:	f884 80ff 	strb.w	r8, [r4, #255]	; 0xff
   2338c:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
   23390:	4620      	mov	r0, r4
   23392:	4798      	blx	r3
   23394:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   23398:	3301      	adds	r3, #1
   2339a:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
   2339e:	2101      	movs	r1, #1
   233a0:	2300      	movs	r3, #0
   233a2:	e7e4      	b.n	2336e <d_print_mod+0x182>
   233a4:	4d92      	ldr	r5, [pc, #584]	; (235f0 <d_print_mod+0x404>)
   233a6:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
   233aa:	f105 0708 	add.w	r7, r5, #8
   233ae:	f04f 0800 	mov.w	r8, #0
   233b2:	e008      	b.n	233c6 <d_print_mod+0x1da>
   233b4:	460b      	mov	r3, r1
   233b6:	3101      	adds	r1, #1
   233b8:	42bd      	cmp	r5, r7
   233ba:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
   233be:	54e6      	strb	r6, [r4, r3]
   233c0:	f884 6104 	strb.w	r6, [r4, #260]	; 0x104
   233c4:	d0a8      	beq.n	23318 <d_print_mod+0x12c>
   233c6:	29ff      	cmp	r1, #255	; 0xff
   233c8:	f815 6f01 	ldrb.w	r6, [r5, #1]!
   233cc:	d1f2      	bne.n	233b4 <d_print_mod+0x1c8>
   233ce:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   233d2:	f884 80ff 	strb.w	r8, [r4, #255]	; 0xff
   233d6:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
   233da:	4620      	mov	r0, r4
   233dc:	4798      	blx	r3
   233de:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   233e2:	3301      	adds	r3, #1
   233e4:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
   233e8:	2101      	movs	r1, #1
   233ea:	2300      	movs	r3, #0
   233ec:	e7e4      	b.n	233b8 <d_print_mod+0x1cc>
   233ee:	4d81      	ldr	r5, [pc, #516]	; (235f4 <d_print_mod+0x408>)
   233f0:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
   233f4:	f105 070a 	add.w	r7, r5, #10
   233f8:	f04f 0800 	mov.w	r8, #0
   233fc:	e008      	b.n	23410 <d_print_mod+0x224>
   233fe:	460b      	mov	r3, r1
   23400:	3101      	adds	r1, #1
   23402:	42bd      	cmp	r5, r7
   23404:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
   23408:	54e6      	strb	r6, [r4, r3]
   2340a:	f884 6104 	strb.w	r6, [r4, #260]	; 0x104
   2340e:	d083      	beq.n	23318 <d_print_mod+0x12c>
   23410:	29ff      	cmp	r1, #255	; 0xff
   23412:	f815 6b01 	ldrb.w	r6, [r5], #1
   23416:	d1f2      	bne.n	233fe <d_print_mod+0x212>
   23418:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   2341c:	f884 80ff 	strb.w	r8, [r4, #255]	; 0xff
   23420:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
   23424:	4620      	mov	r0, r4
   23426:	4798      	blx	r3
   23428:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   2342c:	3301      	adds	r3, #1
   2342e:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
   23432:	2101      	movs	r1, #1
   23434:	2300      	movs	r3, #0
   23436:	e7e4      	b.n	23402 <d_print_mod+0x216>
   23438:	f890 3104 	ldrb.w	r3, [r0, #260]	; 0x104
   2343c:	2b28      	cmp	r3, #40	; 0x28
   2343e:	d00b      	beq.n	23458 <d_print_mod+0x26c>
   23440:	f8d0 3100 	ldr.w	r3, [r0, #256]	; 0x100
   23444:	2bff      	cmp	r3, #255	; 0xff
   23446:	f000 8126 	beq.w	23696 <d_print_mod+0x4aa>
   2344a:	2220      	movs	r2, #32
   2344c:	1c59      	adds	r1, r3, #1
   2344e:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
   23452:	54e2      	strb	r2, [r4, r3]
   23454:	f884 2104 	strb.w	r2, [r4, #260]	; 0x104
   23458:	686a      	ldr	r2, [r5, #4]
   2345a:	f8d4 3128 	ldr.w	r3, [r4, #296]	; 0x128
   2345e:	4d66      	ldr	r5, [pc, #408]	; (235f8 <d_print_mod+0x40c>)
   23460:	f8c4 d128 	str.w	sp, [r4, #296]	; 0x128
   23464:	4641      	mov	r1, r8
   23466:	4620      	mov	r0, r4
   23468:	9301      	str	r3, [sp, #4]
   2346a:	9200      	str	r2, [sp, #0]
   2346c:	f7fd f90a 	bl	20684 <d_print_comp_inner>
   23470:	9b01      	ldr	r3, [sp, #4]
   23472:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
   23476:	f8c4 3128 	str.w	r3, [r4, #296]	; 0x128
   2347a:	1cef      	adds	r7, r5, #3
   2347c:	f04f 0800 	mov.w	r8, #0
   23480:	e009      	b.n	23496 <d_print_mod+0x2aa>
   23482:	460b      	mov	r3, r1
   23484:	3101      	adds	r1, #1
   23486:	42bd      	cmp	r5, r7
   23488:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
   2348c:	54e6      	strb	r6, [r4, r3]
   2348e:	f884 6104 	strb.w	r6, [r4, #260]	; 0x104
   23492:	f43f af41 	beq.w	23318 <d_print_mod+0x12c>
   23496:	29ff      	cmp	r1, #255	; 0xff
   23498:	f815 6b01 	ldrb.w	r6, [r5], #1
   2349c:	d1f1      	bne.n	23482 <d_print_mod+0x296>
   2349e:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   234a2:	f884 80ff 	strb.w	r8, [r4, #255]	; 0xff
   234a6:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
   234aa:	4620      	mov	r0, r4
   234ac:	4798      	blx	r3
   234ae:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   234b2:	3301      	adds	r3, #1
   234b4:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
   234b8:	2101      	movs	r1, #1
   234ba:	2300      	movs	r3, #0
   234bc:	e7e3      	b.n	23486 <d_print_mod+0x29a>
   234be:	4e4f      	ldr	r6, [pc, #316]	; (235fc <d_print_mod+0x410>)
   234c0:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
   234c4:	f106 0a0a 	add.w	sl, r6, #10
   234c8:	f04f 0900 	mov.w	r9, #0
   234cc:	e009      	b.n	234e2 <d_print_mod+0x2f6>
   234ce:	460b      	mov	r3, r1
   234d0:	3101      	adds	r1, #1
   234d2:	4556      	cmp	r6, sl
   234d4:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
   234d8:	54e7      	strb	r7, [r4, r3]
   234da:	f884 7104 	strb.w	r7, [r4, #260]	; 0x104
   234de:	f000 80c0 	beq.w	23662 <d_print_mod+0x476>
   234e2:	29ff      	cmp	r1, #255	; 0xff
   234e4:	f816 7b01 	ldrb.w	r7, [r6], #1
   234e8:	d1f1      	bne.n	234ce <d_print_mod+0x2e2>
   234ea:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   234ee:	f884 90ff 	strb.w	r9, [r4, #255]	; 0xff
   234f2:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
   234f6:	4620      	mov	r0, r4
   234f8:	4798      	blx	r3
   234fa:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   234fe:	3301      	adds	r3, #1
   23500:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
   23504:	2101      	movs	r1, #1
   23506:	2300      	movs	r3, #0
   23508:	e7e3      	b.n	234d2 <d_print_mod+0x2e6>
   2350a:	4d3d      	ldr	r5, [pc, #244]	; (23600 <d_print_mod+0x414>)
   2350c:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
   23510:	f105 0709 	add.w	r7, r5, #9
   23514:	f04f 0800 	mov.w	r8, #0
   23518:	e009      	b.n	2352e <d_print_mod+0x342>
   2351a:	460b      	mov	r3, r1
   2351c:	3101      	adds	r1, #1
   2351e:	42bd      	cmp	r5, r7
   23520:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
   23524:	54e6      	strb	r6, [r4, r3]
   23526:	f884 6104 	strb.w	r6, [r4, #260]	; 0x104
   2352a:	f43f aef5 	beq.w	23318 <d_print_mod+0x12c>
   2352e:	29ff      	cmp	r1, #255	; 0xff
   23530:	f815 6f01 	ldrb.w	r6, [r5, #1]!
   23534:	d1f1      	bne.n	2351a <d_print_mod+0x32e>
   23536:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   2353a:	f884 80ff 	strb.w	r8, [r4, #255]	; 0xff
   2353e:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
   23542:	4620      	mov	r0, r4
   23544:	4798      	blx	r3
   23546:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   2354a:	3301      	adds	r3, #1
   2354c:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
   23550:	2101      	movs	r1, #1
   23552:	2300      	movs	r3, #0
   23554:	e7e3      	b.n	2351e <d_print_mod+0x332>
   23556:	4d2b      	ldr	r5, [pc, #172]	; (23604 <d_print_mod+0x418>)
   23558:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
   2355c:	1daf      	adds	r7, r5, #6
   2355e:	f04f 0800 	mov.w	r8, #0
   23562:	e009      	b.n	23578 <d_print_mod+0x38c>
   23564:	460b      	mov	r3, r1
   23566:	3101      	adds	r1, #1
   23568:	42bd      	cmp	r5, r7
   2356a:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
   2356e:	54e6      	strb	r6, [r4, r3]
   23570:	f884 6104 	strb.w	r6, [r4, #260]	; 0x104
   23574:	f43f aed0 	beq.w	23318 <d_print_mod+0x12c>
   23578:	29ff      	cmp	r1, #255	; 0xff
   2357a:	f815 6b01 	ldrb.w	r6, [r5], #1
   2357e:	d1f1      	bne.n	23564 <d_print_mod+0x378>
   23580:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   23584:	f884 80ff 	strb.w	r8, [r4, #255]	; 0xff
   23588:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
   2358c:	4620      	mov	r0, r4
   2358e:	4798      	blx	r3
   23590:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   23594:	3301      	adds	r3, #1
   23596:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
   2359a:	2101      	movs	r1, #1
   2359c:	2300      	movs	r3, #0
   2359e:	e7e3      	b.n	23568 <d_print_mod+0x37c>
   235a0:	f8d0 3100 	ldr.w	r3, [r0, #256]	; 0x100
   235a4:	2bff      	cmp	r3, #255	; 0xff
   235a6:	f000 80cc 	beq.w	23742 <d_print_mod+0x556>
   235aa:	2220      	movs	r2, #32
   235ac:	1c59      	adds	r1, r3, #1
   235ae:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
   235b2:	54e2      	strb	r2, [r4, r3]
   235b4:	f884 2104 	strb.w	r2, [r4, #260]	; 0x104
   235b8:	e6c3      	b.n	23342 <d_print_mod+0x156>
   235ba:	f8d0 3100 	ldr.w	r3, [r0, #256]	; 0x100
   235be:	2bff      	cmp	r3, #255	; 0xff
   235c0:	f000 80ad 	beq.w	2371e <d_print_mod+0x532>
   235c4:	2220      	movs	r2, #32
   235c6:	1c59      	adds	r1, r3, #1
   235c8:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
   235cc:	54e2      	strb	r2, [r4, r3]
   235ce:	f884 2104 	strb.w	r2, [r4, #260]	; 0x104
   235d2:	e6c5      	b.n	23360 <d_print_mod+0x174>
   235d4:	686a      	ldr	r2, [r5, #4]
   235d6:	e692      	b.n	232fe <d_print_mod+0x112>
   235d8:	4d0b      	ldr	r5, [pc, #44]	; (23608 <d_print_mod+0x41c>)
   235da:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
   235de:	f105 0709 	add.w	r7, r5, #9
   235e2:	f04f 0800 	mov.w	r8, #0
   235e6:	e01b      	b.n	23620 <d_print_mod+0x434>
   235e8:	0002e86f 	.word	0x0002e86f
   235ec:	0002e884 	.word	0x0002e884
   235f0:	0002e887 	.word	0x0002e887
   235f4:	0002e894 	.word	0x0002e894
   235f8:	0002e8a0 	.word	0x0002e8a0
   235fc:	0002e8a4 	.word	0x0002e8a4
   23600:	0002e85b 	.word	0x0002e85b
   23604:	0002e868 	.word	0x0002e868
   23608:	0002e84f 	.word	0x0002e84f
   2360c:	460b      	mov	r3, r1
   2360e:	3101      	adds	r1, #1
   23610:	42af      	cmp	r7, r5
   23612:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
   23616:	54e6      	strb	r6, [r4, r3]
   23618:	f884 6104 	strb.w	r6, [r4, #260]	; 0x104
   2361c:	f43f ae7c 	beq.w	23318 <d_print_mod+0x12c>
   23620:	29ff      	cmp	r1, #255	; 0xff
   23622:	f815 6f01 	ldrb.w	r6, [r5, #1]!
   23626:	d1f1      	bne.n	2360c <d_print_mod+0x420>
   23628:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   2362c:	f884 80ff 	strb.w	r8, [r4, #255]	; 0xff
   23630:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
   23634:	4620      	mov	r0, r4
   23636:	4798      	blx	r3
   23638:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   2363c:	3301      	adds	r3, #1
   2363e:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
   23642:	2101      	movs	r1, #1
   23644:	2300      	movs	r3, #0
   23646:	e7e3      	b.n	23610 <d_print_mod+0x424>
   23648:	f8d0 3128 	ldr.w	r3, [r0, #296]	; 0x128
   2364c:	f8c0 d128 	str.w	sp, [r0, #296]	; 0x128
   23650:	462a      	mov	r2, r5
   23652:	9301      	str	r3, [sp, #4]
   23654:	9500      	str	r5, [sp, #0]
   23656:	f7fd f815 	bl	20684 <d_print_comp_inner>
   2365a:	9b01      	ldr	r3, [sp, #4]
   2365c:	f8c4 3128 	str.w	r3, [r4, #296]	; 0x128
   23660:	e65a      	b.n	23318 <d_print_mod+0x12c>
   23662:	f8d4 3128 	ldr.w	r3, [r4, #296]	; 0x128
   23666:	686a      	ldr	r2, [r5, #4]
   23668:	f8c4 d128 	str.w	sp, [r4, #296]	; 0x128
   2366c:	4641      	mov	r1, r8
   2366e:	4620      	mov	r0, r4
   23670:	9301      	str	r3, [sp, #4]
   23672:	9200      	str	r2, [sp, #0]
   23674:	f7fd f806 	bl	20684 <d_print_comp_inner>
   23678:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
   2367c:	9b01      	ldr	r3, [sp, #4]
   2367e:	f8c4 3128 	str.w	r3, [r4, #296]	; 0x128
   23682:	29ff      	cmp	r1, #255	; 0xff
   23684:	d03a      	beq.n	236fc <d_print_mod+0x510>
   23686:	1c4a      	adds	r2, r1, #1
   23688:	2329      	movs	r3, #41	; 0x29
   2368a:	f8c4 2100 	str.w	r2, [r4, #256]	; 0x100
   2368e:	5463      	strb	r3, [r4, r1]
   23690:	f884 3104 	strb.w	r3, [r4, #260]	; 0x104
   23694:	e640      	b.n	23318 <d_print_mod+0x12c>
   23696:	2600      	movs	r6, #0
   23698:	4619      	mov	r1, r3
   2369a:	f8d0 210c 	ldr.w	r2, [r0, #268]	; 0x10c
   2369e:	f8d0 3108 	ldr.w	r3, [r0, #264]	; 0x108
   236a2:	f880 60ff 	strb.w	r6, [r0, #255]	; 0xff
   236a6:	4798      	blx	r3
   236a8:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   236ac:	f8c4 6100 	str.w	r6, [r4, #256]	; 0x100
   236b0:	1c5a      	adds	r2, r3, #1
   236b2:	f8c4 2124 	str.w	r2, [r4, #292]	; 0x124
   236b6:	4633      	mov	r3, r6
   236b8:	e6c7      	b.n	2344a <d_print_mod+0x25e>
   236ba:	2500      	movs	r5, #0
   236bc:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   236c0:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
   236c4:	f884 50ff 	strb.w	r5, [r4, #255]	; 0xff
   236c8:	4620      	mov	r0, r4
   236ca:	4798      	blx	r3
   236cc:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   236d0:	3301      	adds	r3, #1
   236d2:	4629      	mov	r1, r5
   236d4:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
   236d8:	2201      	movs	r2, #1
   236da:	e636      	b.n	2334a <d_print_mod+0x15e>
   236dc:	2600      	movs	r6, #0
   236de:	f8d0 3108 	ldr.w	r3, [r0, #264]	; 0x108
   236e2:	f8d0 210c 	ldr.w	r2, [r0, #268]	; 0x10c
   236e6:	f880 60ff 	strb.w	r6, [r0, #255]	; 0xff
   236ea:	4798      	blx	r3
   236ec:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   236f0:	3301      	adds	r3, #1
   236f2:	4631      	mov	r1, r6
   236f4:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
   236f8:	2201      	movs	r2, #1
   236fa:	e5f9      	b.n	232f0 <d_print_mod+0x104>
   236fc:	2500      	movs	r5, #0
   236fe:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   23702:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
   23706:	f884 50ff 	strb.w	r5, [r4, #255]	; 0xff
   2370a:	4620      	mov	r0, r4
   2370c:	4798      	blx	r3
   2370e:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   23712:	3301      	adds	r3, #1
   23714:	4629      	mov	r1, r5
   23716:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
   2371a:	2201      	movs	r2, #1
   2371c:	e7b4      	b.n	23688 <d_print_mod+0x49c>
   2371e:	2500      	movs	r5, #0
   23720:	4619      	mov	r1, r3
   23722:	f8d0 210c 	ldr.w	r2, [r0, #268]	; 0x10c
   23726:	f8d0 3108 	ldr.w	r3, [r0, #264]	; 0x108
   2372a:	f880 50ff 	strb.w	r5, [r0, #255]	; 0xff
   2372e:	4798      	blx	r3
   23730:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   23734:	f8c4 5100 	str.w	r5, [r4, #256]	; 0x100
   23738:	1c5a      	adds	r2, r3, #1
   2373a:	f8c4 2124 	str.w	r2, [r4, #292]	; 0x124
   2373e:	462b      	mov	r3, r5
   23740:	e740      	b.n	235c4 <d_print_mod+0x3d8>
   23742:	2500      	movs	r5, #0
   23744:	4619      	mov	r1, r3
   23746:	f8d0 210c 	ldr.w	r2, [r0, #268]	; 0x10c
   2374a:	f8d0 3108 	ldr.w	r3, [r0, #264]	; 0x108
   2374e:	f880 50ff 	strb.w	r5, [r0, #255]	; 0xff
   23752:	4798      	blx	r3
   23754:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   23758:	f8c4 5100 	str.w	r5, [r4, #256]	; 0x100
   2375c:	1c5a      	adds	r2, r3, #1
   2375e:	f8c4 2124 	str.w	r2, [r4, #292]	; 0x124
   23762:	462b      	mov	r3, r5
   23764:	e721      	b.n	235aa <d_print_mod+0x3be>
   23766:	4619      	mov	r1, r3
   23768:	f8d0 210c 	ldr.w	r2, [r0, #268]	; 0x10c
   2376c:	f8d0 3108 	ldr.w	r3, [r0, #264]	; 0x108
   23770:	f880 50ff 	strb.w	r5, [r0, #255]	; 0xff
   23774:	4798      	blx	r3
   23776:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   2377a:	f8c4 5100 	str.w	r5, [r4, #256]	; 0x100
   2377e:	1c5a      	adds	r2, r3, #1
   23780:	f8c4 2124 	str.w	r2, [r4, #292]	; 0x124
   23784:	462b      	mov	r3, r5
   23786:	e5d2      	b.n	2332e <d_print_mod+0x142>

00023788 <d_print_mod_list>:
   23788:	2a00      	cmp	r2, #0
   2378a:	f000 80a1 	beq.w	238d0 <d_print_mod_list+0x148>
   2378e:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   23792:	461e      	mov	r6, r3
   23794:	f8d0 3118 	ldr.w	r3, [r0, #280]	; 0x118
   23798:	b089      	sub	sp, #36	; 0x24
   2379a:	4605      	mov	r5, r0
   2379c:	bb43      	cbnz	r3, 237f0 <d_print_mod_list+0x68>
   2379e:	460f      	mov	r7, r1
   237a0:	4614      	mov	r4, r2
   237a2:	f04f 0801 	mov.w	r8, #1
   237a6:	e002      	b.n	237ae <d_print_mod_list+0x26>
   237a8:	f8d5 3118 	ldr.w	r3, [r5, #280]	; 0x118
   237ac:	bb03      	cbnz	r3, 237f0 <d_print_mod_list+0x68>
   237ae:	68a3      	ldr	r3, [r4, #8]
   237b0:	b9db      	cbnz	r3, 237ea <d_print_mod_list+0x62>
   237b2:	6862      	ldr	r2, [r4, #4]
   237b4:	7813      	ldrb	r3, [r2, #0]
   237b6:	b92e      	cbnz	r6, 237c4 <d_print_mod_list+0x3c>
   237b8:	f1a3 011c 	sub.w	r1, r3, #28
   237bc:	2904      	cmp	r1, #4
   237be:	d914      	bls.n	237ea <d_print_mod_list+0x62>
   237c0:	2b4c      	cmp	r3, #76	; 0x4c
   237c2:	d012      	beq.n	237ea <d_print_mod_list+0x62>
   237c4:	68e1      	ldr	r1, [r4, #12]
   237c6:	f8c4 8008 	str.w	r8, [r4, #8]
   237ca:	2b29      	cmp	r3, #41	; 0x29
   237cc:	f8d5 9110 	ldr.w	r9, [r5, #272]	; 0x110
   237d0:	f8c5 1110 	str.w	r1, [r5, #272]	; 0x110
   237d4:	d00f      	beq.n	237f6 <d_print_mod_list+0x6e>
   237d6:	2b2a      	cmp	r3, #42	; 0x2a
   237d8:	d018      	beq.n	2380c <d_print_mod_list+0x84>
   237da:	2b02      	cmp	r3, #2
   237dc:	d021      	beq.n	23822 <d_print_mod_list+0x9a>
   237de:	4639      	mov	r1, r7
   237e0:	4628      	mov	r0, r5
   237e2:	f7ff fd03 	bl	231ec <d_print_mod>
   237e6:	f8c5 9110 	str.w	r9, [r5, #272]	; 0x110
   237ea:	6824      	ldr	r4, [r4, #0]
   237ec:	2c00      	cmp	r4, #0
   237ee:	d1db      	bne.n	237a8 <d_print_mod_list+0x20>
   237f0:	b009      	add	sp, #36	; 0x24
   237f2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   237f6:	6823      	ldr	r3, [r4, #0]
   237f8:	3208      	adds	r2, #8
   237fa:	4639      	mov	r1, r7
   237fc:	4628      	mov	r0, r5
   237fe:	f000 f9d9 	bl	23bb4 <d_print_function_type.isra.11>
   23802:	f8c5 9110 	str.w	r9, [r5, #272]	; 0x110
   23806:	b009      	add	sp, #36	; 0x24
   23808:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2380c:	6823      	ldr	r3, [r4, #0]
   2380e:	3204      	adds	r2, #4
   23810:	4639      	mov	r1, r7
   23812:	4628      	mov	r0, r5
   23814:	f000 f8f2 	bl	239fc <d_print_array_type.isra.10>
   23818:	f8c5 9110 	str.w	r9, [r5, #272]	; 0x110
   2381c:	b009      	add	sp, #36	; 0x24
   2381e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   23822:	2600      	movs	r6, #0
   23824:	f8d5 8114 	ldr.w	r8, [r5, #276]	; 0x114
   23828:	f8c5 6114 	str.w	r6, [r5, #276]	; 0x114
   2382c:	6852      	ldr	r2, [r2, #4]
   2382e:	4639      	mov	r1, r7
   23830:	4628      	mov	r0, r5
   23832:	f7ff fccb 	bl	231cc <d_print_comp>
   23836:	f017 0a04 	ands.w	sl, r7, #4
   2383a:	f8c5 8114 	str.w	r8, [r5, #276]	; 0x114
   2383e:	d023      	beq.n	23888 <d_print_mod_list+0x100>
   23840:	f8d5 1100 	ldr.w	r1, [r5, #256]	; 0x100
   23844:	29ff      	cmp	r1, #255	; 0xff
   23846:	f000 80c1 	beq.w	239cc <d_print_mod_list+0x244>
   2384a:	1c4a      	adds	r2, r1, #1
   2384c:	232e      	movs	r3, #46	; 0x2e
   2384e:	f8c5 2100 	str.w	r2, [r5, #256]	; 0x100
   23852:	546b      	strb	r3, [r5, r1]
   23854:	f885 3104 	strb.w	r3, [r5, #260]	; 0x104
   23858:	6863      	ldr	r3, [r4, #4]
   2385a:	689c      	ldr	r4, [r3, #8]
   2385c:	7823      	ldrb	r3, [r4, #0]
   2385e:	2b46      	cmp	r3, #70	; 0x46
   23860:	d037      	beq.n	238d2 <d_print_mod_list+0x14a>
   23862:	f1a3 021c 	sub.w	r2, r3, #28
   23866:	2a04      	cmp	r2, #4
   23868:	d90b      	bls.n	23882 <d_print_mod_list+0xfa>
   2386a:	2b4c      	cmp	r3, #76	; 0x4c
   2386c:	d009      	beq.n	23882 <d_print_mod_list+0xfa>
   2386e:	4622      	mov	r2, r4
   23870:	4639      	mov	r1, r7
   23872:	4628      	mov	r0, r5
   23874:	f7ff fcaa 	bl	231cc <d_print_comp>
   23878:	f8c5 9110 	str.w	r9, [r5, #272]	; 0x110
   2387c:	b009      	add	sp, #36	; 0x24
   2387e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   23882:	6864      	ldr	r4, [r4, #4]
   23884:	7823      	ldrb	r3, [r4, #0]
   23886:	e7ec      	b.n	23862 <d_print_mod_list+0xda>
   23888:	4e58      	ldr	r6, [pc, #352]	; (239ec <d_print_mod_list+0x264>)
   2388a:	f8d5 1100 	ldr.w	r1, [r5, #256]	; 0x100
   2388e:	f106 0b02 	add.w	fp, r6, #2
   23892:	e009      	b.n	238a8 <d_print_mod_list+0x120>
   23894:	460b      	mov	r3, r1
   23896:	3101      	adds	r1, #1
   23898:	455e      	cmp	r6, fp
   2389a:	f8c5 1100 	str.w	r1, [r5, #256]	; 0x100
   2389e:	f805 8003 	strb.w	r8, [r5, r3]
   238a2:	f885 8104 	strb.w	r8, [r5, #260]	; 0x104
   238a6:	d0d7      	beq.n	23858 <d_print_mod_list+0xd0>
   238a8:	29ff      	cmp	r1, #255	; 0xff
   238aa:	f816 8b01 	ldrb.w	r8, [r6], #1
   238ae:	d1f1      	bne.n	23894 <d_print_mod_list+0x10c>
   238b0:	f8d5 3108 	ldr.w	r3, [r5, #264]	; 0x108
   238b4:	f885 a0ff 	strb.w	sl, [r5, #255]	; 0xff
   238b8:	f8d5 210c 	ldr.w	r2, [r5, #268]	; 0x10c
   238bc:	4628      	mov	r0, r5
   238be:	4798      	blx	r3
   238c0:	f8d5 3124 	ldr.w	r3, [r5, #292]	; 0x124
   238c4:	3301      	adds	r3, #1
   238c6:	f8c5 3124 	str.w	r3, [r5, #292]	; 0x124
   238ca:	2101      	movs	r1, #1
   238cc:	2300      	movs	r3, #0
   238ce:	e7e3      	b.n	23898 <d_print_mod_list+0x110>
   238d0:	4770      	bx	lr
   238d2:	4e47      	ldr	r6, [pc, #284]	; (239f0 <d_print_mod_list+0x268>)
   238d4:	f8d5 1100 	ldr.w	r1, [r5, #256]	; 0x100
   238d8:	f106 0a0d 	add.w	sl, r6, #13
   238dc:	f04f 0b00 	mov.w	fp, #0
   238e0:	e009      	b.n	238f6 <d_print_mod_list+0x16e>
   238e2:	460b      	mov	r3, r1
   238e4:	3101      	adds	r1, #1
   238e6:	45b2      	cmp	sl, r6
   238e8:	f8c5 1100 	str.w	r1, [r5, #256]	; 0x100
   238ec:	f805 8003 	strb.w	r8, [r5, r3]
   238f0:	f885 8104 	strb.w	r8, [r5, #260]	; 0x104
   238f4:	d013      	beq.n	2391e <d_print_mod_list+0x196>
   238f6:	29ff      	cmp	r1, #255	; 0xff
   238f8:	f816 8b01 	ldrb.w	r8, [r6], #1
   238fc:	d1f1      	bne.n	238e2 <d_print_mod_list+0x15a>
   238fe:	f8d5 3108 	ldr.w	r3, [r5, #264]	; 0x108
   23902:	f885 b0ff 	strb.w	fp, [r5, #255]	; 0xff
   23906:	f8d5 210c 	ldr.w	r2, [r5, #268]	; 0x10c
   2390a:	4628      	mov	r0, r5
   2390c:	4798      	blx	r3
   2390e:	f8d5 3124 	ldr.w	r3, [r5, #292]	; 0x124
   23912:	3301      	adds	r3, #1
   23914:	f8c5 3124 	str.w	r3, [r5, #292]	; 0x124
   23918:	2101      	movs	r1, #1
   2391a:	2300      	movs	r3, #0
   2391c:	e7e3      	b.n	238e6 <d_print_mod_list+0x15e>
   2391e:	68a2      	ldr	r2, [r4, #8]
   23920:	4934      	ldr	r1, [pc, #208]	; (239f4 <d_print_mod_list+0x26c>)
   23922:	3201      	adds	r2, #1
   23924:	a801      	add	r0, sp, #4
   23926:	f004 fda5 	bl	28474 <sprintf>
   2392a:	a801      	add	r0, sp, #4
   2392c:	f004 ff48 	bl	287c0 <strlen>
   23930:	b328      	cbz	r0, 2397e <d_print_mod_list+0x1f6>
   23932:	ae01      	add	r6, sp, #4
   23934:	f8d5 1100 	ldr.w	r1, [r5, #256]	; 0x100
   23938:	eb06 0a00 	add.w	sl, r6, r0
   2393c:	f04f 0b00 	mov.w	fp, #0
   23940:	e009      	b.n	23956 <d_print_mod_list+0x1ce>
   23942:	460b      	mov	r3, r1
   23944:	3101      	adds	r1, #1
   23946:	45b2      	cmp	sl, r6
   23948:	f8c5 1100 	str.w	r1, [r5, #256]	; 0x100
   2394c:	f805 8003 	strb.w	r8, [r5, r3]
   23950:	f885 8104 	strb.w	r8, [r5, #260]	; 0x104
   23954:	d015      	beq.n	23982 <d_print_mod_list+0x1fa>
   23956:	29ff      	cmp	r1, #255	; 0xff
   23958:	f816 8b01 	ldrb.w	r8, [r6], #1
   2395c:	d1f1      	bne.n	23942 <d_print_mod_list+0x1ba>
   2395e:	f8d5 3108 	ldr.w	r3, [r5, #264]	; 0x108
   23962:	f885 b0ff 	strb.w	fp, [r5, #255]	; 0xff
   23966:	f8d5 210c 	ldr.w	r2, [r5, #268]	; 0x10c
   2396a:	4628      	mov	r0, r5
   2396c:	4798      	blx	r3
   2396e:	f8d5 3124 	ldr.w	r3, [r5, #292]	; 0x124
   23972:	3301      	adds	r3, #1
   23974:	f8c5 3124 	str.w	r3, [r5, #292]	; 0x124
   23978:	2101      	movs	r1, #1
   2397a:	2300      	movs	r3, #0
   2397c:	e7e3      	b.n	23946 <d_print_mod_list+0x1be>
   2397e:	f8d5 1100 	ldr.w	r1, [r5, #256]	; 0x100
   23982:	4e1d      	ldr	r6, [pc, #116]	; (239f8 <d_print_mod_list+0x270>)
   23984:	f04f 0b00 	mov.w	fp, #0
   23988:	f106 0a03 	add.w	sl, r6, #3
   2398c:	e00a      	b.n	239a4 <d_print_mod_list+0x21c>
   2398e:	460b      	mov	r3, r1
   23990:	3101      	adds	r1, #1
   23992:	45b2      	cmp	sl, r6
   23994:	f8c5 1100 	str.w	r1, [r5, #256]	; 0x100
   23998:	f805 8003 	strb.w	r8, [r5, r3]
   2399c:	f885 8104 	strb.w	r8, [r5, #260]	; 0x104
   239a0:	f43f af6f 	beq.w	23882 <d_print_mod_list+0xfa>
   239a4:	29ff      	cmp	r1, #255	; 0xff
   239a6:	f816 8b01 	ldrb.w	r8, [r6], #1
   239aa:	d1f0      	bne.n	2398e <d_print_mod_list+0x206>
   239ac:	f8d5 3108 	ldr.w	r3, [r5, #264]	; 0x108
   239b0:	f885 b0ff 	strb.w	fp, [r5, #255]	; 0xff
   239b4:	f8d5 210c 	ldr.w	r2, [r5, #268]	; 0x10c
   239b8:	4628      	mov	r0, r5
   239ba:	4798      	blx	r3
   239bc:	f8d5 3124 	ldr.w	r3, [r5, #292]	; 0x124
   239c0:	3301      	adds	r3, #1
   239c2:	f8c5 3124 	str.w	r3, [r5, #292]	; 0x124
   239c6:	2101      	movs	r1, #1
   239c8:	2300      	movs	r3, #0
   239ca:	e7e2      	b.n	23992 <d_print_mod_list+0x20a>
   239cc:	f8d5 3108 	ldr.w	r3, [r5, #264]	; 0x108
   239d0:	f8d5 210c 	ldr.w	r2, [r5, #268]	; 0x10c
   239d4:	f885 60ff 	strb.w	r6, [r5, #255]	; 0xff
   239d8:	4628      	mov	r0, r5
   239da:	4798      	blx	r3
   239dc:	f8d5 3124 	ldr.w	r3, [r5, #292]	; 0x124
   239e0:	3301      	adds	r3, #1
   239e2:	4631      	mov	r1, r6
   239e4:	f8c5 3124 	str.w	r3, [r5, #292]	; 0x124
   239e8:	2201      	movs	r2, #1
   239ea:	e72f      	b.n	2384c <d_print_mod_list+0xc4>
   239ec:	0002e5d0 	.word	0x0002e5d0
   239f0:	0002e5d4 	.word	0x0002e5d4
   239f4:	0002e580 	.word	0x0002e580
   239f8:	0002e5e4 	.word	0x0002e5e4

000239fc <d_print_array_type.isra.10>:
   239fc:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   23a00:	4604      	mov	r4, r0
   23a02:	460f      	mov	r7, r1
   23a04:	4690      	mov	r8, r2
   23a06:	b163      	cbz	r3, 23a22 <d_print_array_type.isra.10+0x26>
   23a08:	461e      	mov	r6, r3
   23a0a:	461a      	mov	r2, r3
   23a0c:	6893      	ldr	r3, [r2, #8]
   23a0e:	b393      	cbz	r3, 23a76 <d_print_array_type.isra.10+0x7a>
   23a10:	6812      	ldr	r2, [r2, #0]
   23a12:	2a00      	cmp	r2, #0
   23a14:	d1fa      	bne.n	23a0c <d_print_array_type.isra.10+0x10>
   23a16:	4613      	mov	r3, r2
   23a18:	4639      	mov	r1, r7
   23a1a:	4632      	mov	r2, r6
   23a1c:	4620      	mov	r0, r4
   23a1e:	f7ff feb3 	bl	23788 <d_print_mod_list>
   23a22:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
   23a26:	29ff      	cmp	r1, #255	; 0xff
   23a28:	f000 808d 	beq.w	23b46 <d_print_array_type.isra.10+0x14a>
   23a2c:	1c4b      	adds	r3, r1, #1
   23a2e:	2220      	movs	r2, #32
   23a30:	2bff      	cmp	r3, #255	; 0xff
   23a32:	f8c4 3100 	str.w	r3, [r4, #256]	; 0x100
   23a36:	5462      	strb	r2, [r4, r1]
   23a38:	f884 2104 	strb.w	r2, [r4, #260]	; 0x104
   23a3c:	d068      	beq.n	23b10 <d_print_array_type.isra.10+0x114>
   23a3e:	225b      	movs	r2, #91	; 0x5b
   23a40:	1c59      	adds	r1, r3, #1
   23a42:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
   23a46:	54e2      	strb	r2, [r4, r3]
   23a48:	f884 2104 	strb.w	r2, [r4, #260]	; 0x104
   23a4c:	f8d8 2000 	ldr.w	r2, [r8]
   23a50:	b12a      	cbz	r2, 23a5e <d_print_array_type.isra.10+0x62>
   23a52:	4639      	mov	r1, r7
   23a54:	4620      	mov	r0, r4
   23a56:	f7ff fbb9 	bl	231cc <d_print_comp>
   23a5a:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
   23a5e:	29ff      	cmp	r1, #255	; 0xff
   23a60:	f000 8082 	beq.w	23b68 <d_print_array_type.isra.10+0x16c>
   23a64:	1c4a      	adds	r2, r1, #1
   23a66:	235d      	movs	r3, #93	; 0x5d
   23a68:	f8c4 2100 	str.w	r2, [r4, #256]	; 0x100
   23a6c:	5463      	strb	r3, [r4, r1]
   23a6e:	f884 3104 	strb.w	r3, [r4, #260]	; 0x104
   23a72:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   23a76:	6852      	ldr	r2, [r2, #4]
   23a78:	7812      	ldrb	r2, [r2, #0]
   23a7a:	2a2a      	cmp	r2, #42	; 0x2a
   23a7c:	d03f      	beq.n	23afe <d_print_array_type.isra.10+0x102>
   23a7e:	f8df 9130 	ldr.w	r9, [pc, #304]	; 23bb0 <d_print_array_type.isra.10+0x1b4>
   23a82:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
   23a86:	461d      	mov	r5, r3
   23a88:	f109 0b02 	add.w	fp, r9, #2
   23a8c:	e00a      	b.n	23aa4 <d_print_array_type.isra.10+0xa8>
   23a8e:	460b      	mov	r3, r1
   23a90:	45cb      	cmp	fp, r9
   23a92:	f101 0101 	add.w	r1, r1, #1
   23a96:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
   23a9a:	f804 a003 	strb.w	sl, [r4, r3]
   23a9e:	f884 a104 	strb.w	sl, [r4, #260]	; 0x104
   23aa2:	d01a      	beq.n	23ada <d_print_array_type.isra.10+0xde>
   23aa4:	29ff      	cmp	r1, #255	; 0xff
   23aa6:	f819 ab01 	ldrb.w	sl, [r9], #1
   23aaa:	d1f0      	bne.n	23a8e <d_print_array_type.isra.10+0x92>
   23aac:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   23ab0:	f884 50ff 	strb.w	r5, [r4, #255]	; 0xff
   23ab4:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
   23ab8:	4620      	mov	r0, r4
   23aba:	4798      	blx	r3
   23abc:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   23ac0:	3301      	adds	r3, #1
   23ac2:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
   23ac6:	2300      	movs	r3, #0
   23ac8:	2101      	movs	r1, #1
   23aca:	45cb      	cmp	fp, r9
   23acc:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
   23ad0:	f804 a003 	strb.w	sl, [r4, r3]
   23ad4:	f884 a104 	strb.w	sl, [r4, #260]	; 0x104
   23ad8:	d1e4      	bne.n	23aa4 <d_print_array_type.isra.10+0xa8>
   23ada:	2300      	movs	r3, #0
   23adc:	4632      	mov	r2, r6
   23ade:	4639      	mov	r1, r7
   23ae0:	4620      	mov	r0, r4
   23ae2:	f7ff fe51 	bl	23788 <d_print_mod_list>
   23ae6:	f8d4 3100 	ldr.w	r3, [r4, #256]	; 0x100
   23aea:	2bff      	cmp	r3, #255	; 0xff
   23aec:	d04d      	beq.n	23b8a <d_print_array_type.isra.10+0x18e>
   23aee:	1c59      	adds	r1, r3, #1
   23af0:	2229      	movs	r2, #41	; 0x29
   23af2:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
   23af6:	54e2      	strb	r2, [r4, r3]
   23af8:	f884 2104 	strb.w	r2, [r4, #260]	; 0x104
   23afc:	e793      	b.n	23a26 <d_print_array_type.isra.10+0x2a>
   23afe:	4632      	mov	r2, r6
   23b00:	4639      	mov	r1, r7
   23b02:	4620      	mov	r0, r4
   23b04:	f7ff fe40 	bl	23788 <d_print_mod_list>
   23b08:	f8d4 3100 	ldr.w	r3, [r4, #256]	; 0x100
   23b0c:	2bff      	cmp	r3, #255	; 0xff
   23b0e:	d196      	bne.n	23a3e <d_print_array_type.isra.10+0x42>
   23b10:	2200      	movs	r2, #0
   23b12:	4619      	mov	r1, r3
   23b14:	f884 20ff 	strb.w	r2, [r4, #255]	; 0xff
   23b18:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   23b1c:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
   23b20:	4620      	mov	r0, r4
   23b22:	4798      	blx	r3
   23b24:	235b      	movs	r3, #91	; 0x5b
   23b26:	7023      	strb	r3, [r4, #0]
   23b28:	f884 3104 	strb.w	r3, [r4, #260]	; 0x104
   23b2c:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   23b30:	f8d8 2000 	ldr.w	r2, [r8]
   23b34:	3301      	adds	r3, #1
   23b36:	2101      	movs	r1, #1
   23b38:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
   23b3c:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
   23b40:	2a00      	cmp	r2, #0
   23b42:	d186      	bne.n	23a52 <d_print_array_type.isra.10+0x56>
   23b44:	e78e      	b.n	23a64 <d_print_array_type.isra.10+0x68>
   23b46:	2500      	movs	r5, #0
   23b48:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   23b4c:	f884 50ff 	strb.w	r5, [r4, #255]	; 0xff
   23b50:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
   23b54:	4620      	mov	r0, r4
   23b56:	4798      	blx	r3
   23b58:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   23b5c:	3301      	adds	r3, #1
   23b5e:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
   23b62:	4629      	mov	r1, r5
   23b64:	2301      	movs	r3, #1
   23b66:	e762      	b.n	23a2e <d_print_array_type.isra.10+0x32>
   23b68:	2500      	movs	r5, #0
   23b6a:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   23b6e:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
   23b72:	f884 50ff 	strb.w	r5, [r4, #255]	; 0xff
   23b76:	4620      	mov	r0, r4
   23b78:	4798      	blx	r3
   23b7a:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   23b7e:	3301      	adds	r3, #1
   23b80:	4629      	mov	r1, r5
   23b82:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
   23b86:	2201      	movs	r2, #1
   23b88:	e76d      	b.n	23a66 <d_print_array_type.isra.10+0x6a>
   23b8a:	2500      	movs	r5, #0
   23b8c:	4619      	mov	r1, r3
   23b8e:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
   23b92:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   23b96:	f884 50ff 	strb.w	r5, [r4, #255]	; 0xff
   23b9a:	4620      	mov	r0, r4
   23b9c:	4798      	blx	r3
   23b9e:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   23ba2:	1c5a      	adds	r2, r3, #1
   23ba4:	f8c4 2124 	str.w	r2, [r4, #292]	; 0x124
   23ba8:	462b      	mov	r3, r5
   23baa:	2101      	movs	r1, #1
   23bac:	e7a0      	b.n	23af0 <d_print_array_type.isra.10+0xf4>
   23bae:	bf00      	nop
   23bb0:	0002e7c8 	.word	0x0002e7c8

00023bb4 <d_print_function_type.isra.11>:
   23bb4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   23bb8:	4604      	mov	r4, r0
   23bba:	b083      	sub	sp, #12
   23bbc:	460e      	mov	r6, r1
   23bbe:	4617      	mov	r7, r2
   23bc0:	461d      	mov	r5, r3
   23bc2:	b34b      	cbz	r3, 23c18 <d_print_function_type.isra.11+0x64>
   23bc4:	689b      	ldr	r3, [r3, #8]
   23bc6:	bb3b      	cbnz	r3, 23c18 <d_print_function_type.isra.11+0x64>
   23bc8:	462a      	mov	r2, r5
   23bca:	2001      	movs	r0, #1
   23bcc:	f8df e1c8 	ldr.w	lr, [pc, #456]	; 23d98 <d_print_function_type.isra.11+0x1e4>
   23bd0:	e006      	b.n	23be0 <d_print_function_type.isra.11+0x2c>
   23bd2:	f411 6f60 	tst.w	r1, #3584	; 0xe00
   23bd6:	d15a      	bne.n	23c8e <d_print_function_type.isra.11+0xda>
   23bd8:	6812      	ldr	r2, [r2, #0]
   23bda:	b1ea      	cbz	r2, 23c18 <d_print_function_type.isra.11+0x64>
   23bdc:	6893      	ldr	r3, [r2, #8]
   23bde:	b9db      	cbnz	r3, 23c18 <d_print_function_type.isra.11+0x64>
   23be0:	6853      	ldr	r3, [r2, #4]
   23be2:	781b      	ldrb	r3, [r3, #0]
   23be4:	3b19      	subs	r3, #25
   23be6:	b2db      	uxtb	r3, r3
   23be8:	2b12      	cmp	r3, #18
   23bea:	fa00 f103 	lsl.w	r1, r0, r3
   23bee:	d8f3      	bhi.n	23bd8 <d_print_function_type.isra.11+0x24>
   23bf0:	ea11 0f0e 	tst.w	r1, lr
   23bf4:	d0ed      	beq.n	23bd2 <d_print_function_type.isra.11+0x1e>
   23bf6:	f894 3104 	ldrb.w	r3, [r4, #260]	; 0x104
   23bfa:	2b20      	cmp	r3, #32
   23bfc:	d04d      	beq.n	23c9a <d_print_function_type.isra.11+0xe6>
   23bfe:	f8d4 3100 	ldr.w	r3, [r4, #256]	; 0x100
   23c02:	2bff      	cmp	r3, #255	; 0xff
   23c04:	f000 80b4 	beq.w	23d70 <d_print_function_type.isra.11+0x1bc>
   23c08:	1c59      	adds	r1, r3, #1
   23c0a:	2220      	movs	r2, #32
   23c0c:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
   23c10:	54e2      	strb	r2, [r4, r3]
   23c12:	f884 2104 	strb.w	r2, [r4, #260]	; 0x104
   23c16:	e042      	b.n	23c9e <d_print_function_type.isra.11+0xea>
   23c18:	2300      	movs	r3, #0
   23c1a:	f8d4 8114 	ldr.w	r8, [r4, #276]	; 0x114
   23c1e:	f8c4 3114 	str.w	r3, [r4, #276]	; 0x114
   23c22:	4631      	mov	r1, r6
   23c24:	462a      	mov	r2, r5
   23c26:	4620      	mov	r0, r4
   23c28:	f7ff fdae 	bl	23788 <d_print_mod_list>
   23c2c:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
   23c30:	29ff      	cmp	r1, #255	; 0xff
   23c32:	d056      	beq.n	23ce2 <d_print_function_type.isra.11+0x12e>
   23c34:	1c4b      	adds	r3, r1, #1
   23c36:	2228      	movs	r2, #40	; 0x28
   23c38:	f8c4 3100 	str.w	r3, [r4, #256]	; 0x100
   23c3c:	5462      	strb	r2, [r4, r1]
   23c3e:	f884 2104 	strb.w	r2, [r4, #260]	; 0x104
   23c42:	6838      	ldr	r0, [r7, #0]
   23c44:	b178      	cbz	r0, 23c66 <d_print_function_type.isra.11+0xb2>
   23c46:	f8d4 3128 	ldr.w	r3, [r4, #296]	; 0x128
   23c4a:	9000      	str	r0, [sp, #0]
   23c4c:	4602      	mov	r2, r0
   23c4e:	f8c4 d128 	str.w	sp, [r4, #296]	; 0x128
   23c52:	4631      	mov	r1, r6
   23c54:	4620      	mov	r0, r4
   23c56:	9301      	str	r3, [sp, #4]
   23c58:	f7fc fd14 	bl	20684 <d_print_comp_inner>
   23c5c:	9a01      	ldr	r2, [sp, #4]
   23c5e:	f8d4 3100 	ldr.w	r3, [r4, #256]	; 0x100
   23c62:	f8c4 2128 	str.w	r2, [r4, #296]	; 0x128
   23c66:	2bff      	cmp	r3, #255	; 0xff
   23c68:	d04d      	beq.n	23d06 <d_print_function_type.isra.11+0x152>
   23c6a:	1c5a      	adds	r2, r3, #1
   23c6c:	2029      	movs	r0, #41	; 0x29
   23c6e:	f8c4 2100 	str.w	r2, [r4, #256]	; 0x100
   23c72:	4631      	mov	r1, r6
   23c74:	54e0      	strb	r0, [r4, r3]
   23c76:	462a      	mov	r2, r5
   23c78:	f884 0104 	strb.w	r0, [r4, #260]	; 0x104
   23c7c:	2301      	movs	r3, #1
   23c7e:	4620      	mov	r0, r4
   23c80:	f7ff fd82 	bl	23788 <d_print_mod_list>
   23c84:	f8c4 8114 	str.w	r8, [r4, #276]	; 0x114
   23c88:	b003      	add	sp, #12
   23c8a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   23c8e:	f894 3104 	ldrb.w	r3, [r4, #260]	; 0x104
   23c92:	f003 02fd 	and.w	r2, r3, #253	; 0xfd
   23c96:	2a28      	cmp	r2, #40	; 0x28
   23c98:	d1af      	bne.n	23bfa <d_print_function_type.isra.11+0x46>
   23c9a:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
   23c9e:	29ff      	cmp	r1, #255	; 0xff
   23ca0:	d054      	beq.n	23d4c <d_print_function_type.isra.11+0x198>
   23ca2:	1c4a      	adds	r2, r1, #1
   23ca4:	2328      	movs	r3, #40	; 0x28
   23ca6:	f8c4 2100 	str.w	r2, [r4, #256]	; 0x100
   23caa:	5463      	strb	r3, [r4, r1]
   23cac:	f04f 0900 	mov.w	r9, #0
   23cb0:	f884 3104 	strb.w	r3, [r4, #260]	; 0x104
   23cb4:	f8d4 8114 	ldr.w	r8, [r4, #276]	; 0x114
   23cb8:	f8c4 9114 	str.w	r9, [r4, #276]	; 0x114
   23cbc:	464b      	mov	r3, r9
   23cbe:	462a      	mov	r2, r5
   23cc0:	4631      	mov	r1, r6
   23cc2:	4620      	mov	r0, r4
   23cc4:	f7ff fd60 	bl	23788 <d_print_mod_list>
   23cc8:	f8d4 3100 	ldr.w	r3, [r4, #256]	; 0x100
   23ccc:	2bff      	cmp	r3, #255	; 0xff
   23cce:	d02c      	beq.n	23d2a <d_print_function_type.isra.11+0x176>
   23cd0:	1c59      	adds	r1, r3, #1
   23cd2:	2229      	movs	r2, #41	; 0x29
   23cd4:	29ff      	cmp	r1, #255	; 0xff
   23cd6:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
   23cda:	54e2      	strb	r2, [r4, r3]
   23cdc:	f884 2104 	strb.w	r2, [r4, #260]	; 0x104
   23ce0:	d1a8      	bne.n	23c34 <d_print_function_type.isra.11+0x80>
   23ce2:	f04f 0900 	mov.w	r9, #0
   23ce6:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   23cea:	f884 90ff 	strb.w	r9, [r4, #255]	; 0xff
   23cee:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
   23cf2:	4620      	mov	r0, r4
   23cf4:	4798      	blx	r3
   23cf6:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   23cfa:	3301      	adds	r3, #1
   23cfc:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
   23d00:	4649      	mov	r1, r9
   23d02:	2301      	movs	r3, #1
   23d04:	e797      	b.n	23c36 <d_print_function_type.isra.11+0x82>
   23d06:	2700      	movs	r7, #0
   23d08:	4619      	mov	r1, r3
   23d0a:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
   23d0e:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   23d12:	f884 70ff 	strb.w	r7, [r4, #255]	; 0xff
   23d16:	4620      	mov	r0, r4
   23d18:	4798      	blx	r3
   23d1a:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   23d1e:	1c5a      	adds	r2, r3, #1
   23d20:	f8c4 2124 	str.w	r2, [r4, #292]	; 0x124
   23d24:	463b      	mov	r3, r7
   23d26:	2201      	movs	r2, #1
   23d28:	e7a0      	b.n	23c6c <d_print_function_type.isra.11+0xb8>
   23d2a:	4619      	mov	r1, r3
   23d2c:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
   23d30:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   23d34:	f884 90ff 	strb.w	r9, [r4, #255]	; 0xff
   23d38:	4620      	mov	r0, r4
   23d3a:	4798      	blx	r3
   23d3c:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   23d40:	1c5a      	adds	r2, r3, #1
   23d42:	f8c4 2124 	str.w	r2, [r4, #292]	; 0x124
   23d46:	464b      	mov	r3, r9
   23d48:	2101      	movs	r1, #1
   23d4a:	e7c2      	b.n	23cd2 <d_print_function_type.isra.11+0x11e>
   23d4c:	f04f 0800 	mov.w	r8, #0
   23d50:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   23d54:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
   23d58:	f884 80ff 	strb.w	r8, [r4, #255]	; 0xff
   23d5c:	4620      	mov	r0, r4
   23d5e:	4798      	blx	r3
   23d60:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   23d64:	3301      	adds	r3, #1
   23d66:	4641      	mov	r1, r8
   23d68:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
   23d6c:	2201      	movs	r2, #1
   23d6e:	e799      	b.n	23ca4 <d_print_function_type.isra.11+0xf0>
   23d70:	f04f 0800 	mov.w	r8, #0
   23d74:	4619      	mov	r1, r3
   23d76:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
   23d7a:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   23d7e:	f884 80ff 	strb.w	r8, [r4, #255]	; 0xff
   23d82:	4620      	mov	r0, r4
   23d84:	4798      	blx	r3
   23d86:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   23d8a:	1c5a      	adds	r2, r3, #1
   23d8c:	f8c4 2124 	str.w	r2, [r4, #292]	; 0x124
   23d90:	4643      	mov	r3, r8
   23d92:	2101      	movs	r1, #1
   23d94:	e739      	b.n	23c0a <d_print_function_type.isra.11+0x56>
   23d96:	bf00      	nop
   23d98:	00043107 	.word	0x00043107

00023d9c <d_print_expr_op>:
   23d9c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   23da0:	7815      	ldrb	r5, [r2, #0]
   23da2:	2d31      	cmp	r5, #49	; 0x31
   23da4:	b082      	sub	sp, #8
   23da6:	4613      	mov	r3, r2
   23da8:	4604      	mov	r4, r0
   23daa:	d00d      	beq.n	23dc8 <d_print_expr_op+0x2c>
   23dac:	f8d0 5128 	ldr.w	r5, [r0, #296]	; 0x128
   23db0:	f8c0 d128 	str.w	sp, [r0, #296]	; 0x128
   23db4:	e88d 0028 	stmia.w	sp, {r3, r5}
   23db8:	f7fc fc64 	bl	20684 <d_print_comp_inner>
   23dbc:	9b01      	ldr	r3, [sp, #4]
   23dbe:	f8c4 3128 	str.w	r3, [r4, #296]	; 0x128
   23dc2:	b002      	add	sp, #8
   23dc4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   23dc8:	6853      	ldr	r3, [r2, #4]
   23dca:	689f      	ldr	r7, [r3, #8]
   23dcc:	685d      	ldr	r5, [r3, #4]
   23dce:	2f00      	cmp	r7, #0
   23dd0:	d0f7      	beq.n	23dc2 <d_print_expr_op+0x26>
   23dd2:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
   23dd6:	442f      	add	r7, r5
   23dd8:	f04f 0800 	mov.w	r8, #0
   23ddc:	e008      	b.n	23df0 <d_print_expr_op+0x54>
   23dde:	460b      	mov	r3, r1
   23de0:	3101      	adds	r1, #1
   23de2:	42bd      	cmp	r5, r7
   23de4:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
   23de8:	54e6      	strb	r6, [r4, r3]
   23dea:	f884 6104 	strb.w	r6, [r4, #260]	; 0x104
   23dee:	d0e8      	beq.n	23dc2 <d_print_expr_op+0x26>
   23df0:	29ff      	cmp	r1, #255	; 0xff
   23df2:	f815 6b01 	ldrb.w	r6, [r5], #1
   23df6:	d1f2      	bne.n	23dde <d_print_expr_op+0x42>
   23df8:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   23dfc:	f884 80ff 	strb.w	r8, [r4, #255]	; 0xff
   23e00:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
   23e04:	4620      	mov	r0, r4
   23e06:	4798      	blx	r3
   23e08:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   23e0c:	3301      	adds	r3, #1
   23e0e:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
   23e12:	2101      	movs	r1, #1
   23e14:	2300      	movs	r3, #0
   23e16:	e7e4      	b.n	23de2 <d_print_expr_op+0x46>

00023e18 <d_print_subexpr>:
   23e18:	b5f0      	push	{r4, r5, r6, r7, lr}
   23e1a:	7813      	ldrb	r3, [r2, #0]
   23e1c:	2b01      	cmp	r3, #1
   23e1e:	b083      	sub	sp, #12
   23e20:	4615      	mov	r5, r2
   23e22:	460e      	mov	r6, r1
   23e24:	4604      	mov	r4, r0
   23e26:	d929      	bls.n	23e7c <d_print_subexpr+0x64>
   23e28:	2b30      	cmp	r3, #48	; 0x30
   23e2a:	d027      	beq.n	23e7c <d_print_subexpr+0x64>
   23e2c:	2b06      	cmp	r3, #6
   23e2e:	d025      	beq.n	23e7c <d_print_subexpr+0x64>
   23e30:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
   23e34:	29ff      	cmp	r1, #255	; 0xff
   23e36:	d031      	beq.n	23e9c <d_print_subexpr+0x84>
   23e38:	1c4a      	adds	r2, r1, #1
   23e3a:	2328      	movs	r3, #40	; 0x28
   23e3c:	f8c4 2100 	str.w	r2, [r4, #256]	; 0x100
   23e40:	5463      	strb	r3, [r4, r1]
   23e42:	462a      	mov	r2, r5
   23e44:	4631      	mov	r1, r6
   23e46:	f884 3104 	strb.w	r3, [r4, #260]	; 0x104
   23e4a:	4620      	mov	r0, r4
   23e4c:	f8d4 3128 	ldr.w	r3, [r4, #296]	; 0x128
   23e50:	f8c4 d128 	str.w	sp, [r4, #296]	; 0x128
   23e54:	9301      	str	r3, [sp, #4]
   23e56:	9500      	str	r5, [sp, #0]
   23e58:	f7fc fc14 	bl	20684 <d_print_comp_inner>
   23e5c:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
   23e60:	9b01      	ldr	r3, [sp, #4]
   23e62:	f8c4 3128 	str.w	r3, [r4, #296]	; 0x128
   23e66:	29ff      	cmp	r1, #255	; 0xff
   23e68:	d028      	beq.n	23ebc <d_print_subexpr+0xa4>
   23e6a:	1c4a      	adds	r2, r1, #1
   23e6c:	2329      	movs	r3, #41	; 0x29
   23e6e:	f8c4 2100 	str.w	r2, [r4, #256]	; 0x100
   23e72:	5463      	strb	r3, [r4, r1]
   23e74:	f884 3104 	strb.w	r3, [r4, #260]	; 0x104
   23e78:	b003      	add	sp, #12
   23e7a:	bdf0      	pop	{r4, r5, r6, r7, pc}
   23e7c:	f8d4 3128 	ldr.w	r3, [r4, #296]	; 0x128
   23e80:	f8c4 d128 	str.w	sp, [r4, #296]	; 0x128
   23e84:	4631      	mov	r1, r6
   23e86:	462a      	mov	r2, r5
   23e88:	4620      	mov	r0, r4
   23e8a:	9301      	str	r3, [sp, #4]
   23e8c:	9500      	str	r5, [sp, #0]
   23e8e:	f7fc fbf9 	bl	20684 <d_print_comp_inner>
   23e92:	9b01      	ldr	r3, [sp, #4]
   23e94:	f8c4 3128 	str.w	r3, [r4, #296]	; 0x128
   23e98:	b003      	add	sp, #12
   23e9a:	bdf0      	pop	{r4, r5, r6, r7, pc}
   23e9c:	2700      	movs	r7, #0
   23e9e:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   23ea2:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
   23ea6:	f884 70ff 	strb.w	r7, [r4, #255]	; 0xff
   23eaa:	4798      	blx	r3
   23eac:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   23eb0:	3301      	adds	r3, #1
   23eb2:	4639      	mov	r1, r7
   23eb4:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
   23eb8:	2201      	movs	r2, #1
   23eba:	e7be      	b.n	23e3a <d_print_subexpr+0x22>
   23ebc:	2500      	movs	r5, #0
   23ebe:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   23ec2:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
   23ec6:	f884 50ff 	strb.w	r5, [r4, #255]	; 0xff
   23eca:	4620      	mov	r0, r4
   23ecc:	4798      	blx	r3
   23ece:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   23ed2:	3301      	adds	r3, #1
   23ed4:	4629      	mov	r1, r5
   23ed6:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
   23eda:	2201      	movs	r2, #1
   23edc:	e7c6      	b.n	23e6c <d_print_subexpr+0x54>
   23ede:	bf00      	nop

00023ee0 <d_maybe_print_fold_expression.isra.15>:
   23ee0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   23ee4:	6852      	ldr	r2, [r2, #4]
   23ee6:	6812      	ldr	r2, [r2, #0]
   23ee8:	7815      	ldrb	r5, [r2, #0]
   23eea:	2d66      	cmp	r5, #102	; 0x66
   23eec:	d002      	beq.n	23ef4 <d_maybe_print_fold_expression.isra.15+0x14>
   23eee:	2000      	movs	r0, #0
   23ef0:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   23ef4:	681b      	ldr	r3, [r3, #0]
   23ef6:	f8d0 7120 	ldr.w	r7, [r0, #288]	; 0x120
   23efa:	f8d3 9008 	ldr.w	r9, [r3, #8]
   23efe:	f8d3 8004 	ldr.w	r8, [r3, #4]
   23f02:	f899 3000 	ldrb.w	r3, [r9]
   23f06:	2b3b      	cmp	r3, #59	; 0x3b
   23f08:	f04f 33ff 	mov.w	r3, #4294967295
   23f0c:	bf04      	itt	eq
   23f0e:	f8d9 5008 	ldreq.w	r5, [r9, #8]
   23f12:	f8d9 9004 	ldreq.w	r9, [r9, #4]
   23f16:	f8c0 3120 	str.w	r3, [r0, #288]	; 0x120
   23f1a:	7853      	ldrb	r3, [r2, #1]
   23f1c:	f1a3 034c 	sub.w	r3, r3, #76	; 0x4c
   23f20:	bf18      	it	ne
   23f22:	2500      	movne	r5, #0
   23f24:	460e      	mov	r6, r1
   23f26:	4604      	mov	r4, r0
   23f28:	2b26      	cmp	r3, #38	; 0x26
   23f2a:	d82b      	bhi.n	23f84 <d_maybe_print_fold_expression.isra.15+0xa4>
   23f2c:	e8df f003 	tbb	[pc, r3]
   23f30:	2a2a2a90 	.word	0x2a2a2a90
   23f34:	2a902a2a 	.word	0x2a902a2a
   23f38:	2a2a2a2a 	.word	0x2a2a2a2a
   23f3c:	2a2a2a2a 	.word	0x2a2a2a2a
   23f40:	2a2a2a2a 	.word	0x2a2a2a2a
   23f44:	2a2a2a2a 	.word	0x2a2a2a2a
   23f48:	2a2a2a2a 	.word	0x2a2a2a2a
   23f4c:	2a2a2a2a 	.word	0x2a2a2a2a
   23f50:	2a2a2a6a 	.word	0x2a2a2a6a
   23f54:	2a2a      	.short	0x2a2a
   23f56:	2f          	.byte	0x2f
   23f57:	00          	.byte	0x00
   23f58:	4642      	mov	r2, r8
   23f5a:	4631      	mov	r1, r6
   23f5c:	4620      	mov	r0, r4
   23f5e:	f7ff ff1d 	bl	23d9c <d_print_expr_op>
   23f62:	464a      	mov	r2, r9
   23f64:	4631      	mov	r1, r6
   23f66:	4620      	mov	r0, r4
   23f68:	f7ff ff56 	bl	23e18 <d_print_subexpr>
   23f6c:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
   23f70:	29ff      	cmp	r1, #255	; 0xff
   23f72:	f000 80b2 	beq.w	240da <d_maybe_print_fold_expression.isra.15+0x1fa>
   23f76:	1c4a      	adds	r2, r1, #1
   23f78:	2329      	movs	r3, #41	; 0x29
   23f7a:	f8c4 2100 	str.w	r2, [r4, #256]	; 0x100
   23f7e:	5463      	strb	r3, [r4, r1]
   23f80:	f884 3104 	strb.w	r3, [r4, #260]	; 0x104
   23f84:	f8c4 7120 	str.w	r7, [r4, #288]	; 0x120
   23f88:	2001      	movs	r0, #1
   23f8a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   23f8e:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
   23f92:	29ff      	cmp	r1, #255	; 0xff
   23f94:	f000 80c5 	beq.w	24122 <d_maybe_print_fold_expression.isra.15+0x242>
   23f98:	1c4a      	adds	r2, r1, #1
   23f9a:	2328      	movs	r3, #40	; 0x28
   23f9c:	f8c4 2100 	str.w	r2, [r4, #256]	; 0x100
   23fa0:	4620      	mov	r0, r4
   23fa2:	5463      	strb	r3, [r4, r1]
   23fa4:	464a      	mov	r2, r9
   23fa6:	4631      	mov	r1, r6
   23fa8:	f884 3104 	strb.w	r3, [r4, #260]	; 0x104
   23fac:	4d65      	ldr	r5, [pc, #404]	; (24144 <d_maybe_print_fold_expression.isra.15+0x264>)
   23fae:	f7ff ff33 	bl	23e18 <d_print_subexpr>
   23fb2:	4642      	mov	r2, r8
   23fb4:	4631      	mov	r1, r6
   23fb6:	4620      	mov	r0, r4
   23fb8:	f7ff fef0 	bl	23d9c <d_print_expr_op>
   23fbc:	f105 0904 	add.w	r9, r5, #4
   23fc0:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
   23fc4:	f04f 0800 	mov.w	r8, #0
   23fc8:	e008      	b.n	23fdc <d_maybe_print_fold_expression.isra.15+0xfc>
   23fca:	460b      	mov	r3, r1
   23fcc:	3101      	adds	r1, #1
   23fce:	45a9      	cmp	r9, r5
   23fd0:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
   23fd4:	54e6      	strb	r6, [r4, r3]
   23fd6:	f884 6104 	strb.w	r6, [r4, #260]	; 0x104
   23fda:	d0d3      	beq.n	23f84 <d_maybe_print_fold_expression.isra.15+0xa4>
   23fdc:	29ff      	cmp	r1, #255	; 0xff
   23fde:	f815 6b01 	ldrb.w	r6, [r5], #1
   23fe2:	d1f2      	bne.n	23fca <d_maybe_print_fold_expression.isra.15+0xea>
   23fe4:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   23fe8:	f884 80ff 	strb.w	r8, [r4, #255]	; 0xff
   23fec:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
   23ff0:	4620      	mov	r0, r4
   23ff2:	4798      	blx	r3
   23ff4:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   23ff8:	3301      	adds	r3, #1
   23ffa:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
   23ffe:	2101      	movs	r1, #1
   24000:	2300      	movs	r3, #0
   24002:	e7e4      	b.n	23fce <d_maybe_print_fold_expression.isra.15+0xee>
   24004:	4d50      	ldr	r5, [pc, #320]	; (24148 <d_maybe_print_fold_expression.isra.15+0x268>)
   24006:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
   2400a:	f105 0b04 	add.w	fp, r5, #4
   2400e:	e009      	b.n	24024 <d_maybe_print_fold_expression.isra.15+0x144>
   24010:	460b      	mov	r3, r1
   24012:	3101      	adds	r1, #1
   24014:	455d      	cmp	r5, fp
   24016:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
   2401a:	f804 a003 	strb.w	sl, [r4, r3]
   2401e:	f884 a104 	strb.w	sl, [r4, #260]	; 0x104
   24022:	d099      	beq.n	23f58 <d_maybe_print_fold_expression.isra.15+0x78>
   24024:	29ff      	cmp	r1, #255	; 0xff
   24026:	f815 ab01 	ldrb.w	sl, [r5], #1
   2402a:	d1f1      	bne.n	24010 <d_maybe_print_fold_expression.isra.15+0x130>
   2402c:	f04f 0300 	mov.w	r3, #0
   24030:	f884 30ff 	strb.w	r3, [r4, #255]	; 0xff
   24034:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
   24038:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   2403c:	4620      	mov	r0, r4
   2403e:	4798      	blx	r3
   24040:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   24044:	3301      	adds	r3, #1
   24046:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
   2404a:	2101      	movs	r1, #1
   2404c:	2300      	movs	r3, #0
   2404e:	e7e1      	b.n	24014 <d_maybe_print_fold_expression.isra.15+0x134>
   24050:	f8d0 3100 	ldr.w	r3, [r0, #256]	; 0x100
   24054:	2bff      	cmp	r3, #255	; 0xff
   24056:	d051      	beq.n	240fc <d_maybe_print_fold_expression.isra.15+0x21c>
   24058:	1c59      	adds	r1, r3, #1
   2405a:	f04f 0e28 	mov.w	lr, #40	; 0x28
   2405e:	464a      	mov	r2, r9
   24060:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
   24064:	4620      	mov	r0, r4
   24066:	f804 e003 	strb.w	lr, [r4, r3]
   2406a:	4631      	mov	r1, r6
   2406c:	f884 e104 	strb.w	lr, [r4, #260]	; 0x104
   24070:	f8df 90d8 	ldr.w	r9, [pc, #216]	; 2414c <d_maybe_print_fold_expression.isra.15+0x26c>
   24074:	f7ff fed0 	bl	23e18 <d_print_subexpr>
   24078:	4631      	mov	r1, r6
   2407a:	4642      	mov	r2, r8
   2407c:	4620      	mov	r0, r4
   2407e:	f7ff fe8d 	bl	23d9c <d_print_expr_op>
   24082:	f109 0b03 	add.w	fp, r9, #3
   24086:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
   2408a:	e009      	b.n	240a0 <d_maybe_print_fold_expression.isra.15+0x1c0>
   2408c:	460b      	mov	r3, r1
   2408e:	3101      	adds	r1, #1
   24090:	45cb      	cmp	fp, r9
   24092:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
   24096:	f804 a003 	strb.w	sl, [r4, r3]
   2409a:	f884 a104 	strb.w	sl, [r4, #260]	; 0x104
   2409e:	d015      	beq.n	240cc <d_maybe_print_fold_expression.isra.15+0x1ec>
   240a0:	29ff      	cmp	r1, #255	; 0xff
   240a2:	f819 ab01 	ldrb.w	sl, [r9], #1
   240a6:	d1f1      	bne.n	2408c <d_maybe_print_fold_expression.isra.15+0x1ac>
   240a8:	f04f 0300 	mov.w	r3, #0
   240ac:	f884 30ff 	strb.w	r3, [r4, #255]	; 0xff
   240b0:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
   240b4:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   240b8:	4620      	mov	r0, r4
   240ba:	4798      	blx	r3
   240bc:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   240c0:	3301      	adds	r3, #1
   240c2:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
   240c6:	2101      	movs	r1, #1
   240c8:	2300      	movs	r3, #0
   240ca:	e7e1      	b.n	24090 <d_maybe_print_fold_expression.isra.15+0x1b0>
   240cc:	4642      	mov	r2, r8
   240ce:	4631      	mov	r1, r6
   240d0:	4620      	mov	r0, r4
   240d2:	f7ff fe63 	bl	23d9c <d_print_expr_op>
   240d6:	462a      	mov	r2, r5
   240d8:	e744      	b.n	23f64 <d_maybe_print_fold_expression.isra.15+0x84>
   240da:	2500      	movs	r5, #0
   240dc:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   240e0:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
   240e4:	f884 50ff 	strb.w	r5, [r4, #255]	; 0xff
   240e8:	4620      	mov	r0, r4
   240ea:	4798      	blx	r3
   240ec:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   240f0:	3301      	adds	r3, #1
   240f2:	4629      	mov	r1, r5
   240f4:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
   240f8:	2201      	movs	r2, #1
   240fa:	e73d      	b.n	23f78 <d_maybe_print_fold_expression.isra.15+0x98>
   240fc:	f04f 0a00 	mov.w	sl, #0
   24100:	4619      	mov	r1, r3
   24102:	f8d0 210c 	ldr.w	r2, [r0, #268]	; 0x10c
   24106:	f8d0 3108 	ldr.w	r3, [r0, #264]	; 0x108
   2410a:	f880 a0ff 	strb.w	sl, [r0, #255]	; 0xff
   2410e:	4798      	blx	r3
   24110:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   24114:	f8c4 a100 	str.w	sl, [r4, #256]	; 0x100
   24118:	1c5a      	adds	r2, r3, #1
   2411a:	f8c4 2124 	str.w	r2, [r4, #292]	; 0x124
   2411e:	4653      	mov	r3, sl
   24120:	e79a      	b.n	24058 <d_maybe_print_fold_expression.isra.15+0x178>
   24122:	2500      	movs	r5, #0
   24124:	f8d0 3108 	ldr.w	r3, [r0, #264]	; 0x108
   24128:	f8d0 210c 	ldr.w	r2, [r0, #268]	; 0x10c
   2412c:	f880 50ff 	strb.w	r5, [r0, #255]	; 0xff
   24130:	4798      	blx	r3
   24132:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   24136:	3301      	adds	r3, #1
   24138:	4629      	mov	r1, r5
   2413a:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
   2413e:	2201      	movs	r2, #1
   24140:	e72b      	b.n	23f9a <d_maybe_print_fold_expression.isra.15+0xba>
   24142:	bf00      	nop
   24144:	0002e8b8 	.word	0x0002e8b8
   24148:	0002e8b0 	.word	0x0002e8b0
   2414c:	0002e7cc 	.word	0x0002e7cc

00024150 <d_demangle_callback.constprop.17>:
   24150:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   24154:	b0e7      	sub	sp, #412	; 0x19c
   24156:	f890 9000 	ldrb.w	r9, [r0]
   2415a:	f1b9 0f5f 	cmp.w	r9, #95	; 0x5f
   2415e:	af00      	add	r7, sp, #0
   24160:	4605      	mov	r5, r0
   24162:	4688      	mov	r8, r1
   24164:	4616      	mov	r6, r2
   24166:	f000 80f1 	beq.w	2434c <d_demangle_callback.constprop.17+0x1fc>
   2416a:	2208      	movs	r2, #8
   2416c:	49bd      	ldr	r1, [pc, #756]	; (24464 <d_demangle_callback.constprop.17+0x314>)
   2416e:	4628      	mov	r0, r5
   24170:	f004 fb94 	bl	2889c <strncmp>
   24174:	b948      	cbnz	r0, 2418a <d_demangle_callback.constprop.17+0x3a>
   24176:	7a2b      	ldrb	r3, [r5, #8]
   24178:	2b2e      	cmp	r3, #46	; 0x2e
   2417a:	f000 80d6 	beq.w	2432a <d_demangle_callback.constprop.17+0x1da>
   2417e:	2b5f      	cmp	r3, #95	; 0x5f
   24180:	f000 80d3 	beq.w	2432a <d_demangle_callback.constprop.17+0x1da>
   24184:	2b24      	cmp	r3, #36	; 0x24
   24186:	f000 80d0 	beq.w	2432a <d_demangle_callback.constprop.17+0x1da>
   2418a:	f04f 0a00 	mov.w	sl, #0
   2418e:	4628      	mov	r0, r5
   24190:	f004 fb16 	bl	287c0 <strlen>
   24194:	ea4f 0b40 	mov.w	fp, r0, lsl #1
   24198:	0083      	lsls	r3, r0, #2
   2419a:	eb03 020b 	add.w	r2, r3, fp
   2419e:	0092      	lsls	r2, r2, #2
   241a0:	3208      	adds	r2, #8
   241a2:	330a      	adds	r3, #10
   241a4:	ebad 0d02 	sub.w	sp, sp, r2
   241a8:	f023 0307 	bic.w	r3, r3, #7
   241ac:	2400      	movs	r4, #0
   241ae:	466a      	mov	r2, sp
   241b0:	1829      	adds	r1, r5, r0
   241b2:	ebad 0d03 	sub.w	sp, sp, r3
   241b6:	f1ba 0f01 	cmp.w	sl, #1
   241ba:	f04f 0311 	mov.w	r3, #17
   241be:	627a      	str	r2, [r7, #36]	; 0x24
   241c0:	f8c7 d030 	str.w	sp, [r7, #48]	; 0x30
   241c4:	f8c7 b02c 	str.w	fp, [r7, #44]	; 0x2c
   241c8:	617d      	str	r5, [r7, #20]
   241ca:	623d      	str	r5, [r7, #32]
   241cc:	63b8      	str	r0, [r7, #56]	; 0x38
   241ce:	61b9      	str	r1, [r7, #24]
   241d0:	61fb      	str	r3, [r7, #28]
   241d2:	62bc      	str	r4, [r7, #40]	; 0x28
   241d4:	637c      	str	r4, [r7, #52]	; 0x34
   241d6:	63fc      	str	r4, [r7, #60]	; 0x3c
   241d8:	643c      	str	r4, [r7, #64]	; 0x40
   241da:	647c      	str	r4, [r7, #68]	; 0x44
   241dc:	64bc      	str	r4, [r7, #72]	; 0x48
   241de:	64fc      	str	r4, [r7, #76]	; 0x4c
   241e0:	f000 80bb 	beq.w	2435a <d_demangle_callback.constprop.17+0x20a>
   241e4:	f0c0 80cf 	bcc.w	24386 <d_demangle_callback.constprop.17+0x236>
   241e8:	7aeb      	ldrb	r3, [r5, #11]
   241ea:	f1ba 0f02 	cmp.w	sl, #2
   241ee:	bf18      	it	ne
   241f0:	f04f 0944 	movne.w	r9, #68	; 0x44
   241f4:	f105 0a0b 	add.w	sl, r5, #11
   241f8:	bf08      	it	eq
   241fa:	f04f 0943 	moveq.w	r9, #67	; 0x43
   241fe:	2b5f      	cmp	r3, #95	; 0x5f
   24200:	f8c7 a020 	str.w	sl, [r7, #32]
   24204:	f000 80b2 	beq.w	2436c <d_demangle_callback.constprop.17+0x21c>
   24208:	4650      	mov	r0, sl
   2420a:	607a      	str	r2, [r7, #4]
   2420c:	f004 fad8 	bl	287c0 <strlen>
   24210:	f1bb 0f00 	cmp.w	fp, #0
   24214:	687a      	ldr	r2, [r7, #4]
   24216:	f340 80bf 	ble.w	24398 <d_demangle_callback.constprop.17+0x248>
   2421a:	2301      	movs	r3, #1
   2421c:	62bb      	str	r3, [r7, #40]	; 0x28
   2421e:	2800      	cmp	r0, #0
   24220:	f000 80ba 	beq.w	24398 <d_demangle_callback.constprop.17+0x248>
   24224:	2300      	movs	r3, #0
   24226:	f8c2 a004 	str.w	sl, [r2, #4]
   2422a:	6090      	str	r0, [r2, #8]
   2422c:	7013      	strb	r3, [r2, #0]
   2422e:	4649      	mov	r1, r9
   24230:	2300      	movs	r3, #0
   24232:	f107 0014 	add.w	r0, r7, #20
   24236:	f7f9 fe31 	bl	1de9c <d_make_comp>
   2423a:	6a3c      	ldr	r4, [r7, #32]
   2423c:	4605      	mov	r5, r0
   2423e:	4620      	mov	r0, r4
   24240:	f004 fabe 	bl	287c0 <strlen>
   24244:	1823      	adds	r3, r4, r0
   24246:	623b      	str	r3, [r7, #32]
   24248:	f814 9000 	ldrb.w	r9, [r4, r0]
   2424c:	f1b9 0f00 	cmp.w	r9, #0
   24250:	f040 8086 	bne.w	24360 <d_demangle_callback.constprop.17+0x210>
   24254:	2d00      	cmp	r5, #0
   24256:	f000 8083 	beq.w	24360 <d_demangle_callback.constprop.17+0x210>
   2425a:	f107 0450 	add.w	r4, r7, #80	; 0x50
   2425e:	462a      	mov	r2, r5
   24260:	f507 71c2 	add.w	r1, r7, #388	; 0x184
   24264:	f507 70c8 	add.w	r0, r7, #400	; 0x190
   24268:	f8c4 8108 	str.w	r8, [r4, #264]	; 0x108
   2426c:	f8c4 610c 	str.w	r6, [r4, #268]	; 0x10c
   24270:	f8c4 9100 	str.w	r9, [r4, #256]	; 0x100
   24274:	f884 9104 	strb.w	r9, [r4, #260]	; 0x104
   24278:	f8c4 9110 	str.w	r9, [r4, #272]	; 0x110
   2427c:	f8c4 9114 	str.w	r9, [r4, #276]	; 0x114
   24280:	f8c4 9120 	str.w	r9, [r4, #288]	; 0x120
   24284:	f8c4 9124 	str.w	r9, [r4, #292]	; 0x124
   24288:	f8c4 9118 	str.w	r9, [r4, #280]	; 0x118
   2428c:	f8c4 911c 	str.w	r9, [r4, #284]	; 0x11c
   24290:	f8c4 9128 	str.w	r9, [r4, #296]	; 0x128
   24294:	f8c4 912c 	str.w	r9, [r4, #300]	; 0x12c
   24298:	f8c4 9130 	str.w	r9, [r4, #304]	; 0x130
   2429c:	f8c4 9134 	str.w	r9, [r4, #308]	; 0x134
   242a0:	f8c4 9138 	str.w	r9, [r4, #312]	; 0x138
   242a4:	f8c4 913c 	str.w	r9, [r4, #316]	; 0x13c
   242a8:	f8c4 9140 	str.w	r9, [r4, #320]	; 0x140
   242ac:	f7f9 fec4 	bl	1e038 <d_count_templates_scopes>
   242b0:	f8d4 2134 	ldr.w	r2, [r4, #308]	; 0x134
   242b4:	f8d4 1140 	ldr.w	r1, [r4, #320]	; 0x140
   242b8:	f8d4 3128 	ldr.w	r3, [r4, #296]	; 0x128
   242bc:	613b      	str	r3, [r7, #16]
   242be:	00d0      	lsls	r0, r2, #3
   242c0:	fb01 f102 	mul.w	r1, r1, r2
   242c4:	3008      	adds	r0, #8
   242c6:	46e8      	mov	r8, sp
   242c8:	00ca      	lsls	r2, r1, #3
   242ca:	ebad 0d00 	sub.w	sp, sp, r0
   242ce:	4668      	mov	r0, sp
   242d0:	3208      	adds	r2, #8
   242d2:	ebad 0d02 	sub.w	sp, sp, r2
   242d6:	f107 060c 	add.w	r6, r7, #12
   242da:	462a      	mov	r2, r5
   242dc:	f8c4 012c 	str.w	r0, [r4, #300]	; 0x12c
   242e0:	f8c4 1140 	str.w	r1, [r4, #320]	; 0x140
   242e4:	4620      	mov	r0, r4
   242e6:	2111      	movs	r1, #17
   242e8:	f8c4 d138 	str.w	sp, [r4, #312]	; 0x138
   242ec:	60fd      	str	r5, [r7, #12]
   242ee:	f8c4 9144 	str.w	r9, [r4, #324]	; 0x144
   242f2:	f8c4 6128 	str.w	r6, [r4, #296]	; 0x128
   242f6:	f7fc f9c5 	bl	20684 <d_print_comp_inner>
   242fa:	693b      	ldr	r3, [r7, #16]
   242fc:	f8c4 3128 	str.w	r3, [r4, #296]	; 0x128
   24300:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
   24304:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   24308:	f804 9001 	strb.w	r9, [r4, r1]
   2430c:	4620      	mov	r0, r4
   2430e:	46c5      	mov	sp, r8
   24310:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
   24314:	4798      	blx	r3
   24316:	f8d4 0118 	ldr.w	r0, [r4, #280]	; 0x118
   2431a:	fab0 f080 	clz	r0, r0
   2431e:	0940      	lsrs	r0, r0, #5
   24320:	f507 77ce 	add.w	r7, r7, #412	; 0x19c
   24324:	46bd      	mov	sp, r7
   24326:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2432a:	7a6b      	ldrb	r3, [r5, #9]
   2432c:	2b44      	cmp	r3, #68	; 0x44
   2432e:	d002      	beq.n	24336 <d_demangle_callback.constprop.17+0x1e6>
   24330:	2b49      	cmp	r3, #73	; 0x49
   24332:	f47f af2a 	bne.w	2418a <d_demangle_callback.constprop.17+0x3a>
   24336:	7aaa      	ldrb	r2, [r5, #10]
   24338:	2a5f      	cmp	r2, #95	; 0x5f
   2433a:	f47f af26 	bne.w	2418a <d_demangle_callback.constprop.17+0x3a>
   2433e:	2b49      	cmp	r3, #73	; 0x49
   24340:	bf14      	ite	ne
   24342:	f04f 0a03 	movne.w	sl, #3
   24346:	f04f 0a02 	moveq.w	sl, #2
   2434a:	e720      	b.n	2418e <d_demangle_callback.constprop.17+0x3e>
   2434c:	7843      	ldrb	r3, [r0, #1]
   2434e:	2b5a      	cmp	r3, #90	; 0x5a
   24350:	f47f af0b 	bne.w	2416a <d_demangle_callback.constprop.17+0x1a>
   24354:	f04f 0a01 	mov.w	sl, #1
   24358:	e719      	b.n	2418e <d_demangle_callback.constprop.17+0x3e>
   2435a:	f1b9 0f5f 	cmp.w	r9, #95	; 0x5f
   2435e:	d01d      	beq.n	2439c <d_demangle_callback.constprop.17+0x24c>
   24360:	2000      	movs	r0, #0
   24362:	f507 77ce 	add.w	r7, r7, #412	; 0x19c
   24366:	46bd      	mov	sp, r7
   24368:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2436c:	7b2b      	ldrb	r3, [r5, #12]
   2436e:	2b5a      	cmp	r3, #90	; 0x5a
   24370:	f47f af4a 	bne.w	24208 <d_demangle_callback.constprop.17+0xb8>
   24374:	350d      	adds	r5, #13
   24376:	4621      	mov	r1, r4
   24378:	f107 0014 	add.w	r0, r7, #20
   2437c:	623d      	str	r5, [r7, #32]
   2437e:	f7fb fe35 	bl	1ffec <d_encoding>
   24382:	4602      	mov	r2, r0
   24384:	e753      	b.n	2422e <d_demangle_callback.constprop.17+0xde>
   24386:	f107 0014 	add.w	r0, r7, #20
   2438a:	f7fb f817 	bl	1f3bc <d_type>
   2438e:	6a3b      	ldr	r3, [r7, #32]
   24390:	4605      	mov	r5, r0
   24392:	f893 9000 	ldrb.w	r9, [r3]
   24396:	e759      	b.n	2424c <d_demangle_callback.constprop.17+0xfc>
   24398:	2200      	movs	r2, #0
   2439a:	e748      	b.n	2422e <d_demangle_callback.constprop.17+0xde>
   2439c:	786b      	ldrb	r3, [r5, #1]
   2439e:	2b5a      	cmp	r3, #90	; 0x5a
   243a0:	d1de      	bne.n	24360 <d_demangle_callback.constprop.17+0x210>
   243a2:	3502      	adds	r5, #2
   243a4:	4651      	mov	r1, sl
   243a6:	f107 0014 	add.w	r0, r7, #20
   243aa:	623d      	str	r5, [r7, #32]
   243ac:	f7fb fe1e 	bl	1ffec <d_encoding>
   243b0:	69fb      	ldr	r3, [r7, #28]
   243b2:	07db      	lsls	r3, r3, #31
   243b4:	4605      	mov	r5, r0
   243b6:	d551      	bpl.n	2445c <d_demangle_callback.constprop.17+0x30c>
   243b8:	6a38      	ldr	r0, [r7, #32]
   243ba:	f890 9000 	ldrb.w	r9, [r0]
   243be:	f1b9 0f2e 	cmp.w	r9, #46	; 0x2e
   243c2:	f47f af43 	bne.w	2424c <d_demangle_callback.constprop.17+0xfc>
   243c6:	7843      	ldrb	r3, [r0, #1]
   243c8:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
   243cc:	2a19      	cmp	r2, #25
   243ce:	d939      	bls.n	24444 <d_demangle_callback.constprop.17+0x2f4>
   243d0:	2b5f      	cmp	r3, #95	; 0x5f
   243d2:	d037      	beq.n	24444 <d_demangle_callback.constprop.17+0x2f4>
   243d4:	3b30      	subs	r3, #48	; 0x30
   243d6:	2b09      	cmp	r3, #9
   243d8:	d840      	bhi.n	2445c <d_demangle_callback.constprop.17+0x30c>
   243da:	7803      	ldrb	r3, [r0, #0]
   243dc:	4602      	mov	r2, r0
   243de:	2b2e      	cmp	r3, #46	; 0x2e
   243e0:	d112      	bne.n	24408 <d_demangle_callback.constprop.17+0x2b8>
   243e2:	7853      	ldrb	r3, [r2, #1]
   243e4:	3b30      	subs	r3, #48	; 0x30
   243e6:	2b09      	cmp	r3, #9
   243e8:	d80e      	bhi.n	24408 <d_demangle_callback.constprop.17+0x2b8>
   243ea:	7893      	ldrb	r3, [r2, #2]
   243ec:	f1a3 0130 	sub.w	r1, r3, #48	; 0x30
   243f0:	2909      	cmp	r1, #9
   243f2:	f102 0202 	add.w	r2, r2, #2
   243f6:	d8f2      	bhi.n	243de <d_demangle_callback.constprop.17+0x28e>
   243f8:	f812 3f01 	ldrb.w	r3, [r2, #1]!
   243fc:	f1a3 0130 	sub.w	r1, r3, #48	; 0x30
   24400:	2909      	cmp	r1, #9
   24402:	d9f9      	bls.n	243f8 <d_demangle_callback.constprop.17+0x2a8>
   24404:	2b2e      	cmp	r3, #46	; 0x2e
   24406:	d0ec      	beq.n	243e2 <d_demangle_callback.constprop.17+0x292>
   24408:	6ab9      	ldr	r1, [r7, #40]	; 0x28
   2440a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   2440c:	623a      	str	r2, [r7, #32]
   2440e:	4299      	cmp	r1, r3
   24410:	da16      	bge.n	24440 <d_demangle_callback.constprop.17+0x2f0>
   24412:	f8d7 e024 	ldr.w	lr, [r7, #36]	; 0x24
   24416:	1c4b      	adds	r3, r1, #1
   24418:	eb01 0141 	add.w	r1, r1, r1, lsl #1
   2441c:	62bb      	str	r3, [r7, #40]	; 0x28
   2441e:	eb1e 0381 	adds.w	r3, lr, r1, lsl #2
   24422:	d00d      	beq.n	24440 <d_demangle_callback.constprop.17+0x2f0>
   24424:	1a12      	subs	r2, r2, r0
   24426:	d00b      	beq.n	24440 <d_demangle_callback.constprop.17+0x2f0>
   24428:	f80e 4021 	strb.w	r4, [lr, r1, lsl #2]
   2442c:	6058      	str	r0, [r3, #4]
   2442e:	609a      	str	r2, [r3, #8]
   24430:	462a      	mov	r2, r5
   24432:	214d      	movs	r1, #77	; 0x4d
   24434:	f107 0014 	add.w	r0, r7, #20
   24438:	f7f9 fd30 	bl	1de9c <d_make_comp>
   2443c:	4605      	mov	r5, r0
   2443e:	e7bb      	b.n	243b8 <d_demangle_callback.constprop.17+0x268>
   24440:	2300      	movs	r3, #0
   24442:	e7f5      	b.n	24430 <d_demangle_callback.constprop.17+0x2e0>
   24444:	1c81      	adds	r1, r0, #2
   24446:	460a      	mov	r2, r1
   24448:	f811 3b01 	ldrb.w	r3, [r1], #1
   2444c:	f1a3 0e61 	sub.w	lr, r3, #97	; 0x61
   24450:	f1be 0f19 	cmp.w	lr, #25
   24454:	d9f7      	bls.n	24446 <d_demangle_callback.constprop.17+0x2f6>
   24456:	2b5f      	cmp	r3, #95	; 0x5f
   24458:	d0f5      	beq.n	24446 <d_demangle_callback.constprop.17+0x2f6>
   2445a:	e7c0      	b.n	243de <d_demangle_callback.constprop.17+0x28e>
   2445c:	6a3b      	ldr	r3, [r7, #32]
   2445e:	f893 9000 	ldrb.w	r9, [r3]
   24462:	e6f3      	b.n	2424c <d_demangle_callback.constprop.17+0xfc>
   24464:	0002e55c 	.word	0x0002e55c

00024468 <__cxa_demangle>:
   24468:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   2446c:	b084      	sub	sp, #16
   2446e:	b378      	cbz	r0, 244d0 <__cxa_demangle+0x68>
   24470:	b101      	cbz	r1, 24474 <__cxa_demangle+0xc>
   24472:	b36a      	cbz	r2, 244d0 <__cxa_demangle+0x68>
   24474:	2400      	movs	r4, #0
   24476:	4616      	mov	r6, r2
   24478:	460d      	mov	r5, r1
   2447a:	466a      	mov	r2, sp
   2447c:	4927      	ldr	r1, [pc, #156]	; (2451c <__cxa_demangle+0xb4>)
   2447e:	9400      	str	r4, [sp, #0]
   24480:	461f      	mov	r7, r3
   24482:	9401      	str	r4, [sp, #4]
   24484:	9402      	str	r4, [sp, #8]
   24486:	9403      	str	r4, [sp, #12]
   24488:	f7ff fe62 	bl	24150 <d_demangle_callback.constprop.17>
   2448c:	2800      	cmp	r0, #0
   2448e:	d03f      	beq.n	24510 <__cxa_demangle+0xa8>
   24490:	9b03      	ldr	r3, [sp, #12]
   24492:	b1d3      	cbz	r3, 244ca <__cxa_demangle+0x62>
   24494:	f04f 0801 	mov.w	r8, #1
   24498:	9c00      	ldr	r4, [sp, #0]
   2449a:	b35c      	cbz	r4, 244f4 <__cxa_demangle+0x8c>
   2449c:	b33d      	cbz	r5, 244ee <__cxa_demangle+0x86>
   2449e:	4620      	mov	r0, r4
   244a0:	f004 f98e 	bl	287c0 <strlen>
   244a4:	6833      	ldr	r3, [r6, #0]
   244a6:	4298      	cmp	r0, r3
   244a8:	d21b      	bcs.n	244e2 <__cxa_demangle+0x7a>
   244aa:	1c42      	adds	r2, r0, #1
   244ac:	4621      	mov	r1, r4
   244ae:	4628      	mov	r0, r5
   244b0:	f003 fbd6 	bl	27c60 <memcpy>
   244b4:	4620      	mov	r0, r4
   244b6:	f003 f881 	bl	275bc <free>
   244ba:	462c      	mov	r4, r5
   244bc:	b10f      	cbz	r7, 244c2 <__cxa_demangle+0x5a>
   244be:	2300      	movs	r3, #0
   244c0:	603b      	str	r3, [r7, #0]
   244c2:	4620      	mov	r0, r4
   244c4:	b004      	add	sp, #16
   244c6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   244ca:	f8dd 8008 	ldr.w	r8, [sp, #8]
   244ce:	e7e3      	b.n	24498 <__cxa_demangle+0x30>
   244d0:	b113      	cbz	r3, 244d8 <__cxa_demangle+0x70>
   244d2:	f06f 0202 	mvn.w	r2, #2
   244d6:	601a      	str	r2, [r3, #0]
   244d8:	2400      	movs	r4, #0
   244da:	4620      	mov	r0, r4
   244dc:	b004      	add	sp, #16
   244de:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   244e2:	4628      	mov	r0, r5
   244e4:	f003 f86a 	bl	275bc <free>
   244e8:	f8c6 8000 	str.w	r8, [r6]
   244ec:	e7e6      	b.n	244bc <__cxa_demangle+0x54>
   244ee:	2e00      	cmp	r6, #0
   244f0:	d1fa      	bne.n	244e8 <__cxa_demangle+0x80>
   244f2:	e7e3      	b.n	244bc <__cxa_demangle+0x54>
   244f4:	2f00      	cmp	r7, #0
   244f6:	d0ef      	beq.n	244d8 <__cxa_demangle+0x70>
   244f8:	f1b8 0f01 	cmp.w	r8, #1
   244fc:	d004      	beq.n	24508 <__cxa_demangle+0xa0>
   244fe:	f06f 0301 	mvn.w	r3, #1
   24502:	603b      	str	r3, [r7, #0]
   24504:	2400      	movs	r4, #0
   24506:	e7dc      	b.n	244c2 <__cxa_demangle+0x5a>
   24508:	f04f 33ff 	mov.w	r3, #4294967295
   2450c:	603b      	str	r3, [r7, #0]
   2450e:	e7d8      	b.n	244c2 <__cxa_demangle+0x5a>
   24510:	9800      	ldr	r0, [sp, #0]
   24512:	f003 f853 	bl	275bc <free>
   24516:	2f00      	cmp	r7, #0
   24518:	d1f1      	bne.n	244fe <__cxa_demangle+0x96>
   2451a:	e7dd      	b.n	244d8 <__cxa_demangle+0x70>
   2451c:	0001e5c1 	.word	0x0001e5c1

00024520 <__gcclibcxx_demangle_callback>:
   24520:	b160      	cbz	r0, 2453c <__gcclibcxx_demangle_callback+0x1c>
   24522:	b508      	push	{r3, lr}
   24524:	b139      	cbz	r1, 24536 <__gcclibcxx_demangle_callback+0x16>
   24526:	f7ff fe13 	bl	24150 <d_demangle_callback.constprop.17>
   2452a:	2800      	cmp	r0, #0
   2452c:	bf0c      	ite	eq
   2452e:	f06f 0001 	mvneq.w	r0, #1
   24532:	2000      	movne	r0, #0
   24534:	bd08      	pop	{r3, pc}
   24536:	f06f 0002 	mvn.w	r0, #2
   2453a:	bd08      	pop	{r3, pc}
   2453c:	f06f 0002 	mvn.w	r0, #2
   24540:	4770      	bx	lr
   24542:	bf00      	nop

00024544 <__cxa_current_exception_type>:
   24544:	b508      	push	{r3, lr}
   24546:	f7f9 f8f5 	bl	1d734 <__cxa_get_globals>
   2454a:	6800      	ldr	r0, [r0, #0]
   2454c:	b130      	cbz	r0, 2455c <__cxa_current_exception_type+0x18>
   2454e:	f890 3027 	ldrb.w	r3, [r0, #39]	; 0x27
   24552:	2b01      	cmp	r3, #1
   24554:	bf04      	itt	eq
   24556:	6800      	ldreq	r0, [r0, #0]
   24558:	3878      	subeq	r0, #120	; 0x78
   2455a:	6800      	ldr	r0, [r0, #0]
   2455c:	bd08      	pop	{r3, pc}
   2455e:	bf00      	nop

00024560 <powf>:
   24560:	b5f0      	push	{r4, r5, r6, r7, lr}
   24562:	ed2d 8b04 	vpush	{d8-d9}
   24566:	4db3      	ldr	r5, [pc, #716]	; (24834 <powf+0x2d4>)
   24568:	b08b      	sub	sp, #44	; 0x2c
   2456a:	eef0 8a40 	vmov.f32	s17, s0
   2456e:	eeb0 8a60 	vmov.f32	s16, s1
   24572:	f000 f9df 	bl	24934 <__ieee754_powf>
   24576:	f995 4000 	ldrsb.w	r4, [r5]
   2457a:	1c63      	adds	r3, r4, #1
   2457c:	eeb0 9a40 	vmov.f32	s18, s0
   24580:	d02e      	beq.n	245e0 <powf+0x80>
   24582:	eeb4 8a48 	vcmp.f32	s16, s16
   24586:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   2458a:	d629      	bvs.n	245e0 <powf+0x80>
   2458c:	eef4 8a68 	vcmp.f32	s17, s17
   24590:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   24594:	f180 80a2 	bvs.w	246dc <powf+0x17c>
   24598:	eef5 8a40 	vcmp.f32	s17, #0.0
   2459c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   245a0:	d124      	bne.n	245ec <powf+0x8c>
   245a2:	eeb5 8a40 	vcmp.f32	s16, #0.0
   245a6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   245aa:	d159      	bne.n	24660 <powf+0x100>
   245ac:	2301      	movs	r3, #1
   245ae:	4aa2      	ldr	r2, [pc, #648]	; (24838 <powf+0x2d8>)
   245b0:	9300      	str	r3, [sp, #0]
   245b2:	ee18 0a90 	vmov	r0, s17
   245b6:	2300      	movs	r3, #0
   245b8:	9201      	str	r2, [sp, #4]
   245ba:	9308      	str	r3, [sp, #32]
   245bc:	f000 ff3a 	bl	25434 <__aeabi_f2d>
   245c0:	e9cd 0102 	strd	r0, r1, [sp, #8]
   245c4:	ee18 0a10 	vmov	r0, s16
   245c8:	f000 ff34 	bl	25434 <__aeabi_f2d>
   245cc:	2200      	movs	r2, #0
   245ce:	2300      	movs	r3, #0
   245d0:	e9cd 0104 	strd	r0, r1, [sp, #16]
   245d4:	e9cd 2306 	strd	r2, r3, [sp, #24]
   245d8:	2c00      	cmp	r4, #0
   245da:	d067      	beq.n	246ac <powf+0x14c>
   245dc:	eeb7 9a00 	vmov.f32	s18, #112	; 0x3f800000  1.0
   245e0:	eeb0 0a49 	vmov.f32	s0, s18
   245e4:	b00b      	add	sp, #44	; 0x2c
   245e6:	ecbd 8b04 	vpop	{d8-d9}
   245ea:	bdf0      	pop	{r4, r5, r6, r7, pc}
   245ec:	f000 fd3a 	bl	25064 <finitef>
   245f0:	4604      	mov	r4, r0
   245f2:	2800      	cmp	r0, #0
   245f4:	f000 8091 	beq.w	2471a <powf+0x1ba>
   245f8:	eeb5 9a40 	vcmp.f32	s18, #0.0
   245fc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   24600:	d1ee      	bne.n	245e0 <powf+0x80>
   24602:	eeb0 0a68 	vmov.f32	s0, s17
   24606:	f000 fd2d 	bl	25064 <finitef>
   2460a:	2800      	cmp	r0, #0
   2460c:	d0e8      	beq.n	245e0 <powf+0x80>
   2460e:	eeb0 0a48 	vmov.f32	s0, s16
   24612:	f000 fd27 	bl	25064 <finitef>
   24616:	2800      	cmp	r0, #0
   24618:	d0e2      	beq.n	245e0 <powf+0x80>
   2461a:	2304      	movs	r3, #4
   2461c:	4a86      	ldr	r2, [pc, #536]	; (24838 <powf+0x2d8>)
   2461e:	9300      	str	r3, [sp, #0]
   24620:	ee18 0a90 	vmov	r0, s17
   24624:	2300      	movs	r3, #0
   24626:	9308      	str	r3, [sp, #32]
   24628:	9201      	str	r2, [sp, #4]
   2462a:	f000 ff03 	bl	25434 <__aeabi_f2d>
   2462e:	e9cd 0102 	strd	r0, r1, [sp, #8]
   24632:	ee18 0a10 	vmov	r0, s16
   24636:	f000 fefd 	bl	25434 <__aeabi_f2d>
   2463a:	2600      	movs	r6, #0
   2463c:	2700      	movs	r7, #0
   2463e:	e9cd 0104 	strd	r0, r1, [sp, #16]
   24642:	e9cd 6706 	strd	r6, r7, [sp, #24]
   24646:	f995 3000 	ldrsb.w	r3, [r5]
   2464a:	2b02      	cmp	r3, #2
   2464c:	d003      	beq.n	24656 <powf+0xf6>
   2464e:	4668      	mov	r0, sp
   24650:	f000 fc6c 	bl	24f2c <matherr>
   24654:	bb80      	cbnz	r0, 246b8 <powf+0x158>
   24656:	f002 fd19 	bl	2708c <__errno>
   2465a:	2322      	movs	r3, #34	; 0x22
   2465c:	6003      	str	r3, [r0, #0]
   2465e:	e02b      	b.n	246b8 <powf+0x158>
   24660:	eeb0 0a48 	vmov.f32	s0, s16
   24664:	f000 fcfe 	bl	25064 <finitef>
   24668:	2800      	cmp	r0, #0
   2466a:	d0b9      	beq.n	245e0 <powf+0x80>
   2466c:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
   24670:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   24674:	d5b4      	bpl.n	245e0 <powf+0x80>
   24676:	2301      	movs	r3, #1
   24678:	4a6f      	ldr	r2, [pc, #444]	; (24838 <powf+0x2d8>)
   2467a:	9300      	str	r3, [sp, #0]
   2467c:	ee18 0a90 	vmov	r0, s17
   24680:	2300      	movs	r3, #0
   24682:	9308      	str	r3, [sp, #32]
   24684:	9201      	str	r2, [sp, #4]
   24686:	f000 fed5 	bl	25434 <__aeabi_f2d>
   2468a:	e9cd 0102 	strd	r0, r1, [sp, #8]
   2468e:	ee18 0a10 	vmov	r0, s16
   24692:	f000 fecf 	bl	25434 <__aeabi_f2d>
   24696:	f995 3000 	ldrsb.w	r3, [r5]
   2469a:	e9cd 0104 	strd	r0, r1, [sp, #16]
   2469e:	2b00      	cmp	r3, #0
   246a0:	f040 809b 	bne.w	247da <powf+0x27a>
   246a4:	2200      	movs	r2, #0
   246a6:	2300      	movs	r3, #0
   246a8:	e9cd 2306 	strd	r2, r3, [sp, #24]
   246ac:	4668      	mov	r0, sp
   246ae:	f000 fc3d 	bl	24f2c <matherr>
   246b2:	2800      	cmp	r0, #0
   246b4:	f000 808c 	beq.w	247d0 <powf+0x270>
   246b8:	9b08      	ldr	r3, [sp, #32]
   246ba:	b11b      	cbz	r3, 246c4 <powf+0x164>
   246bc:	f002 fce6 	bl	2708c <__errno>
   246c0:	9b08      	ldr	r3, [sp, #32]
   246c2:	6003      	str	r3, [r0, #0]
   246c4:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
   246c8:	f001 f9ea 	bl	25aa0 <__aeabi_d2f>
   246cc:	ee09 0a10 	vmov	s18, r0
   246d0:	eeb0 0a49 	vmov.f32	s0, s18
   246d4:	b00b      	add	sp, #44	; 0x2c
   246d6:	ecbd 8b04 	vpop	{d8-d9}
   246da:	bdf0      	pop	{r4, r5, r6, r7, pc}
   246dc:	eeb5 8a40 	vcmp.f32	s16, #0.0
   246e0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   246e4:	f47f af7c 	bne.w	245e0 <powf+0x80>
   246e8:	2301      	movs	r3, #1
   246ea:	4a53      	ldr	r2, [pc, #332]	; (24838 <powf+0x2d8>)
   246ec:	9300      	str	r3, [sp, #0]
   246ee:	ee18 0a90 	vmov	r0, s17
   246f2:	2300      	movs	r3, #0
   246f4:	9201      	str	r2, [sp, #4]
   246f6:	9308      	str	r3, [sp, #32]
   246f8:	f000 fe9c 	bl	25434 <__aeabi_f2d>
   246fc:	e9cd 0102 	strd	r0, r1, [sp, #8]
   24700:	ee18 0a10 	vmov	r0, s16
   24704:	f000 fe96 	bl	25434 <__aeabi_f2d>
   24708:	4b4c      	ldr	r3, [pc, #304]	; (2483c <powf+0x2dc>)
   2470a:	2200      	movs	r2, #0
   2470c:	2c02      	cmp	r4, #2
   2470e:	e9cd 0104 	strd	r0, r1, [sp, #16]
   24712:	e9cd 2306 	strd	r2, r3, [sp, #24]
   24716:	d1c9      	bne.n	246ac <powf+0x14c>
   24718:	e760      	b.n	245dc <powf+0x7c>
   2471a:	eeb0 0a68 	vmov.f32	s0, s17
   2471e:	f000 fca1 	bl	25064 <finitef>
   24722:	2800      	cmp	r0, #0
   24724:	f43f af68 	beq.w	245f8 <powf+0x98>
   24728:	eeb0 0a48 	vmov.f32	s0, s16
   2472c:	f000 fc9a 	bl	25064 <finitef>
   24730:	2800      	cmp	r0, #0
   24732:	f43f af61 	beq.w	245f8 <powf+0x98>
   24736:	eeb4 9a49 	vcmp.f32	s18, s18
   2473a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   2473e:	f180 8087 	bvs.w	24850 <powf+0x2f0>
   24742:	4b3d      	ldr	r3, [pc, #244]	; (24838 <powf+0x2d8>)
   24744:	9408      	str	r4, [sp, #32]
   24746:	2203      	movs	r2, #3
   24748:	ee18 0a90 	vmov	r0, s17
   2474c:	e88d 000c 	stmia.w	sp, {r2, r3}
   24750:	f000 fe70 	bl	25434 <__aeabi_f2d>
   24754:	e9cd 0102 	strd	r0, r1, [sp, #8]
   24758:	ee18 0a10 	vmov	r0, s16
   2475c:	f000 fe6a 	bl	25434 <__aeabi_f2d>
   24760:	f995 3000 	ldrsb.w	r3, [r5]
   24764:	e9cd 0104 	strd	r0, r1, [sp, #16]
   24768:	2b00      	cmp	r3, #0
   2476a:	d13d      	bne.n	247e8 <powf+0x288>
   2476c:	4b34      	ldr	r3, [pc, #208]	; (24840 <powf+0x2e0>)
   2476e:	eef5 8ac0 	vcmpe.f32	s17, #0.0
   24772:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
   24776:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   2477a:	e9cd 2306 	strd	r2, r3, [sp, #24]
   2477e:	f57f af66 	bpl.w	2464e <powf+0xee>
   24782:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
   24786:	ee68 7a27 	vmul.f32	s15, s16, s15
   2478a:	ee17 0a90 	vmov	r0, s15
   2478e:	f000 fe51 	bl	25434 <__aeabi_f2d>
   24792:	4606      	mov	r6, r0
   24794:	460f      	mov	r7, r1
   24796:	ec47 6b10 	vmov	d0, r6, r7
   2479a:	f000 fbc9 	bl	24f30 <rint>
   2479e:	4630      	mov	r0, r6
   247a0:	ec53 2b10 	vmov	r2, r3, d0
   247a4:	4639      	mov	r1, r7
   247a6:	f001 f901 	bl	259ac <__aeabi_dcmpeq>
   247aa:	2800      	cmp	r0, #0
   247ac:	d13f      	bne.n	2482e <powf+0x2ce>
   247ae:	4925      	ldr	r1, [pc, #148]	; (24844 <powf+0x2e4>)
   247b0:	f995 3000 	ldrsb.w	r3, [r5]
   247b4:	f04f 4060 	mov.w	r0, #3758096384	; 0xe0000000
   247b8:	e9cd 0106 	strd	r0, r1, [sp, #24]
   247bc:	e745      	b.n	2464a <powf+0xea>
   247be:	4610      	mov	r0, r2
   247c0:	4619      	mov	r1, r3
   247c2:	f000 ffb5 	bl	25730 <__aeabi_ddiv>
   247c6:	2c02      	cmp	r4, #2
   247c8:	e9cd 0106 	strd	r0, r1, [sp, #24]
   247cc:	f47f af6e 	bne.w	246ac <powf+0x14c>
   247d0:	f002 fc5c 	bl	2708c <__errno>
   247d4:	2321      	movs	r3, #33	; 0x21
   247d6:	6003      	str	r3, [r0, #0]
   247d8:	e76e      	b.n	246b8 <powf+0x158>
   247da:	491b      	ldr	r1, [pc, #108]	; (24848 <powf+0x2e8>)
   247dc:	2000      	movs	r0, #0
   247de:	2b02      	cmp	r3, #2
   247e0:	e9cd 0106 	strd	r0, r1, [sp, #24]
   247e4:	d0f4      	beq.n	247d0 <powf+0x270>
   247e6:	e761      	b.n	246ac <powf+0x14c>
   247e8:	4918      	ldr	r1, [pc, #96]	; (2484c <powf+0x2ec>)
   247ea:	eef5 8ac0 	vcmpe.f32	s17, #0.0
   247ee:	2000      	movs	r0, #0
   247f0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   247f4:	e9cd 0106 	strd	r0, r1, [sp, #24]
   247f8:	f57f af27 	bpl.w	2464a <powf+0xea>
   247fc:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
   24800:	ee68 7a27 	vmul.f32	s15, s16, s15
   24804:	ee17 0a90 	vmov	r0, s15
   24808:	f000 fe14 	bl	25434 <__aeabi_f2d>
   2480c:	4606      	mov	r6, r0
   2480e:	460f      	mov	r7, r1
   24810:	ec47 6b10 	vmov	d0, r6, r7
   24814:	f000 fb8c 	bl	24f30 <rint>
   24818:	4630      	mov	r0, r6
   2481a:	ec53 2b10 	vmov	r2, r3, d0
   2481e:	4639      	mov	r1, r7
   24820:	f001 f8c4 	bl	259ac <__aeabi_dcmpeq>
   24824:	b918      	cbnz	r0, 2482e <powf+0x2ce>
   24826:	4b08      	ldr	r3, [pc, #32]	; (24848 <powf+0x2e8>)
   24828:	2200      	movs	r2, #0
   2482a:	e9cd 2306 	strd	r2, r3, [sp, #24]
   2482e:	f995 3000 	ldrsb.w	r3, [r5]
   24832:	e70a      	b.n	2464a <powf+0xea>
   24834:	20000104 	.word	0x20000104
   24838:	0002eda8 	.word	0x0002eda8
   2483c:	3ff00000 	.word	0x3ff00000
   24840:	47efffff 	.word	0x47efffff
   24844:	c7efffff 	.word	0xc7efffff
   24848:	fff00000 	.word	0xfff00000
   2484c:	7ff00000 	.word	0x7ff00000
   24850:	4b0c      	ldr	r3, [pc, #48]	; (24884 <powf+0x324>)
   24852:	9408      	str	r4, [sp, #32]
   24854:	2201      	movs	r2, #1
   24856:	ee18 0a90 	vmov	r0, s17
   2485a:	e88d 000c 	stmia.w	sp, {r2, r3}
   2485e:	f000 fde9 	bl	25434 <__aeabi_f2d>
   24862:	e9cd 0102 	strd	r0, r1, [sp, #8]
   24866:	ee18 0a10 	vmov	r0, s16
   2486a:	f000 fde3 	bl	25434 <__aeabi_f2d>
   2486e:	f995 4000 	ldrsb.w	r4, [r5]
   24872:	e9cd 0104 	strd	r0, r1, [sp, #16]
   24876:	2200      	movs	r2, #0
   24878:	2300      	movs	r3, #0
   2487a:	2c00      	cmp	r4, #0
   2487c:	d19f      	bne.n	247be <powf+0x25e>
   2487e:	e9cd 2306 	strd	r2, r3, [sp, #24]
   24882:	e713      	b.n	246ac <powf+0x14c>
   24884:	0002eda8 	.word	0x0002eda8

00024888 <sqrtf>:
   24888:	b510      	push	{r4, lr}
   2488a:	ed2d 8b02 	vpush	{d8}
   2488e:	b08a      	sub	sp, #40	; 0x28
   24890:	eeb0 8a40 	vmov.f32	s16, s0
   24894:	f000 fb46 	bl	24f24 <__ieee754_sqrtf>
   24898:	4b24      	ldr	r3, [pc, #144]	; (2492c <sqrtf+0xa4>)
   2489a:	f993 4000 	ldrsb.w	r4, [r3]
   2489e:	1c63      	adds	r3, r4, #1
   248a0:	d009      	beq.n	248b6 <sqrtf+0x2e>
   248a2:	eeb4 8a48 	vcmp.f32	s16, s16
   248a6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   248aa:	d604      	bvs.n	248b6 <sqrtf+0x2e>
   248ac:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
   248b0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   248b4:	d403      	bmi.n	248be <sqrtf+0x36>
   248b6:	b00a      	add	sp, #40	; 0x28
   248b8:	ecbd 8b02 	vpop	{d8}
   248bc:	bd10      	pop	{r4, pc}
   248be:	2301      	movs	r3, #1
   248c0:	4a1b      	ldr	r2, [pc, #108]	; (24930 <sqrtf+0xa8>)
   248c2:	9300      	str	r3, [sp, #0]
   248c4:	ee18 0a10 	vmov	r0, s16
   248c8:	2300      	movs	r3, #0
   248ca:	9201      	str	r2, [sp, #4]
   248cc:	9308      	str	r3, [sp, #32]
   248ce:	f000 fdb1 	bl	25434 <__aeabi_f2d>
   248d2:	2200      	movs	r2, #0
   248d4:	e9cd 0104 	strd	r0, r1, [sp, #16]
   248d8:	e9cd 0102 	strd	r0, r1, [sp, #8]
   248dc:	2300      	movs	r3, #0
   248de:	b1bc      	cbz	r4, 24910 <sqrtf+0x88>
   248e0:	4610      	mov	r0, r2
   248e2:	4619      	mov	r1, r3
   248e4:	f000 ff24 	bl	25730 <__aeabi_ddiv>
   248e8:	2c02      	cmp	r4, #2
   248ea:	e9cd 0106 	strd	r0, r1, [sp, #24]
   248ee:	d111      	bne.n	24914 <sqrtf+0x8c>
   248f0:	f002 fbcc 	bl	2708c <__errno>
   248f4:	2321      	movs	r3, #33	; 0x21
   248f6:	6003      	str	r3, [r0, #0]
   248f8:	9b08      	ldr	r3, [sp, #32]
   248fa:	b98b      	cbnz	r3, 24920 <sqrtf+0x98>
   248fc:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
   24900:	f001 f8ce 	bl	25aa0 <__aeabi_d2f>
   24904:	ee00 0a10 	vmov	s0, r0
   24908:	b00a      	add	sp, #40	; 0x28
   2490a:	ecbd 8b02 	vpop	{d8}
   2490e:	bd10      	pop	{r4, pc}
   24910:	e9cd 2306 	strd	r2, r3, [sp, #24]
   24914:	4668      	mov	r0, sp
   24916:	f000 fb09 	bl	24f2c <matherr>
   2491a:	2800      	cmp	r0, #0
   2491c:	d1ec      	bne.n	248f8 <sqrtf+0x70>
   2491e:	e7e7      	b.n	248f0 <sqrtf+0x68>
   24920:	f002 fbb4 	bl	2708c <__errno>
   24924:	9b08      	ldr	r3, [sp, #32]
   24926:	6003      	str	r3, [r0, #0]
   24928:	e7e8      	b.n	248fc <sqrtf+0x74>
   2492a:	bf00      	nop
   2492c:	20000104 	.word	0x20000104
   24930:	0002edb0 	.word	0x0002edb0

00024934 <__ieee754_powf>:
   24934:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   24938:	ed2d 8b02 	vpush	{d8}
   2493c:	b082      	sub	sp, #8
   2493e:	edcd 0a00 	vstr	s1, [sp]
   24942:	9c00      	ldr	r4, [sp, #0]
   24944:	ed8d 0a01 	vstr	s0, [sp, #4]
   24948:	f034 4600 	bics.w	r6, r4, #2147483648	; 0x80000000
   2494c:	d014      	beq.n	24978 <__ieee754_powf+0x44>
   2494e:	f8dd 8004 	ldr.w	r8, [sp, #4]
   24952:	f028 4700 	bic.w	r7, r8, #2147483648	; 0x80000000
   24956:	f1b7 4fff 	cmp.w	r7, #2139095040	; 0x7f800000
   2495a:	dd07      	ble.n	2496c <__ieee754_powf+0x38>
   2495c:	4858      	ldr	r0, [pc, #352]	; (24ac0 <__ieee754_powf+0x18c>)
   2495e:	b002      	add	sp, #8
   24960:	ecbd 8b02 	vpop	{d8}
   24964:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   24968:	f000 bb86 	b.w	25078 <nanf>
   2496c:	f1b6 4fff 	cmp.w	r6, #2139095040	; 0x7f800000
   24970:	dd09      	ble.n	24986 <__ieee754_powf+0x52>
   24972:	f1b7 5f7e 	cmp.w	r7, #1065353216	; 0x3f800000
   24976:	d1f1      	bne.n	2495c <__ieee754_powf+0x28>
   24978:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
   2497c:	b002      	add	sp, #8
   2497e:	ecbd 8b02 	vpop	{d8}
   24982:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   24986:	f1b8 0f00 	cmp.w	r8, #0
   2498a:	db4d      	blt.n	24a28 <__ieee754_powf+0xf4>
   2498c:	f04f 0a00 	mov.w	sl, #0
   24990:	f1b6 4fff 	cmp.w	r6, #2139095040	; 0x7f800000
   24994:	d03f      	beq.n	24a16 <__ieee754_powf+0xe2>
   24996:	f1b6 5f7e 	cmp.w	r6, #1065353216	; 0x3f800000
   2499a:	d058      	beq.n	24a4e <__ieee754_powf+0x11a>
   2499c:	f1b4 4f80 	cmp.w	r4, #1073741824	; 0x40000000
   249a0:	d06e      	beq.n	24a80 <__ieee754_powf+0x14c>
   249a2:	9d01      	ldr	r5, [sp, #4]
   249a4:	f8dd 9000 	ldr.w	r9, [sp]
   249a8:	f1b4 5f7c 	cmp.w	r4, #1056964608	; 0x3f000000
   249ac:	ee00 5a10 	vmov	s0, r5
   249b0:	d01c      	beq.n	249ec <__ieee754_powf+0xb8>
   249b2:	f000 fb4f 	bl	25054 <fabsf>
   249b6:	f1b7 4fff 	cmp.w	r7, #2139095040	; 0x7f800000
   249ba:	d04d      	beq.n	24a58 <__ieee754_powf+0x124>
   249bc:	2f00      	cmp	r7, #0
   249be:	d04b      	beq.n	24a58 <__ieee754_powf+0x124>
   249c0:	f1b7 5f7e 	cmp.w	r7, #1065353216	; 0x3f800000
   249c4:	d048      	beq.n	24a58 <__ieee754_powf+0x124>
   249c6:	ea4f 73d8 	mov.w	r3, r8, lsr #31
   249ca:	3b01      	subs	r3, #1
   249cc:	ea5a 0203 	orrs.w	r2, sl, r3
   249d0:	d06e      	beq.n	24ab0 <__ieee754_powf+0x17c>
   249d2:	f1b6 4f9a 	cmp.w	r6, #1291845632	; 0x4d000000
   249d6:	dd7b      	ble.n	24ad0 <__ieee754_powf+0x19c>
   249d8:	4a3a      	ldr	r2, [pc, #232]	; (24ac4 <__ieee754_powf+0x190>)
   249da:	4297      	cmp	r7, r2
   249dc:	f300 81c8 	bgt.w	24d70 <__ieee754_powf+0x43c>
   249e0:	2c00      	cmp	r4, #0
   249e2:	f2c0 81cb 	blt.w	24d7c <__ieee754_powf+0x448>
   249e6:	ed9f 0a38 	vldr	s0, [pc, #224]	; 24ac8 <__ieee754_powf+0x194>
   249ea:	e7c7      	b.n	2497c <__ieee754_powf+0x48>
   249ec:	f1b8 0f00 	cmp.w	r8, #0
   249f0:	da4b      	bge.n	24a8a <__ieee754_powf+0x156>
   249f2:	f000 fb2f 	bl	25054 <fabsf>
   249f6:	f1b7 4fff 	cmp.w	r7, #2139095040	; 0x7f800000
   249fa:	d001      	beq.n	24a00 <__ieee754_powf+0xcc>
   249fc:	2f00      	cmp	r7, #0
   249fe:	d1df      	bne.n	249c0 <__ieee754_powf+0x8c>
   24a00:	f1a7 577e 	sub.w	r7, r7, #1065353216	; 0x3f800000
   24a04:	ea57 030a 	orrs.w	r3, r7, sl
   24a08:	d04d      	beq.n	24aa6 <__ieee754_powf+0x172>
   24a0a:	f1ba 0f01 	cmp.w	sl, #1
   24a0e:	d1b5      	bne.n	2497c <__ieee754_powf+0x48>
   24a10:	eeb1 0a40 	vneg.f32	s0, s0
   24a14:	e7b2      	b.n	2497c <__ieee754_powf+0x48>
   24a16:	f1b7 5f7e 	cmp.w	r7, #1065353216	; 0x3f800000
   24a1a:	d0ad      	beq.n	24978 <__ieee754_powf+0x44>
   24a1c:	dd29      	ble.n	24a72 <__ieee754_powf+0x13e>
   24a1e:	2c00      	cmp	r4, #0
   24a20:	dbe1      	blt.n	249e6 <__ieee754_powf+0xb2>
   24a22:	ed9d 0a00 	vldr	s0, [sp]
   24a26:	e7a9      	b.n	2497c <__ieee754_powf+0x48>
   24a28:	f1b6 4f97 	cmp.w	r6, #1266679808	; 0x4b800000
   24a2c:	da1e      	bge.n	24a6c <__ieee754_powf+0x138>
   24a2e:	f1b6 5f7e 	cmp.w	r6, #1065353216	; 0x3f800000
   24a32:	db09      	blt.n	24a48 <__ieee754_powf+0x114>
   24a34:	15f3      	asrs	r3, r6, #23
   24a36:	f1c3 0396 	rsb	r3, r3, #150	; 0x96
   24a3a:	fa46 f203 	asr.w	r2, r6, r3
   24a3e:	fa02 f303 	lsl.w	r3, r2, r3
   24a42:	429e      	cmp	r6, r3
   24a44:	f000 818f 	beq.w	24d66 <__ieee754_powf+0x432>
   24a48:	f04f 0a00 	mov.w	sl, #0
   24a4c:	e7a3      	b.n	24996 <__ieee754_powf+0x62>
   24a4e:	2c00      	cmp	r4, #0
   24a50:	db22      	blt.n	24a98 <__ieee754_powf+0x164>
   24a52:	ed9d 0a01 	vldr	s0, [sp, #4]
   24a56:	e791      	b.n	2497c <__ieee754_powf+0x48>
   24a58:	2c00      	cmp	r4, #0
   24a5a:	bfbc      	itt	lt
   24a5c:	eef7 7a00 	vmovlt.f32	s15, #112	; 0x3f800000  1.0
   24a60:	ee87 0a80 	vdivlt.f32	s0, s15, s0
   24a64:	f1b8 0f00 	cmp.w	r8, #0
   24a68:	da88      	bge.n	2497c <__ieee754_powf+0x48>
   24a6a:	e7c9      	b.n	24a00 <__ieee754_powf+0xcc>
   24a6c:	f04f 0a02 	mov.w	sl, #2
   24a70:	e78e      	b.n	24990 <__ieee754_powf+0x5c>
   24a72:	2c00      	cmp	r4, #0
   24a74:	dab7      	bge.n	249e6 <__ieee754_powf+0xb2>
   24a76:	eddd 7a00 	vldr	s15, [sp]
   24a7a:	eeb1 0a67 	vneg.f32	s0, s15
   24a7e:	e77d      	b.n	2497c <__ieee754_powf+0x48>
   24a80:	eddd 7a01 	vldr	s15, [sp, #4]
   24a84:	ee27 0aa7 	vmul.f32	s0, s15, s15
   24a88:	e778      	b.n	2497c <__ieee754_powf+0x48>
   24a8a:	b002      	add	sp, #8
   24a8c:	ecbd 8b02 	vpop	{d8}
   24a90:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   24a94:	f000 ba46 	b.w	24f24 <__ieee754_sqrtf>
   24a98:	ed9d 7a01 	vldr	s14, [sp, #4]
   24a9c:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
   24aa0:	ee87 0a87 	vdiv.f32	s0, s15, s14
   24aa4:	e76a      	b.n	2497c <__ieee754_powf+0x48>
   24aa6:	ee70 7a40 	vsub.f32	s15, s0, s0
   24aaa:	ee87 0aa7 	vdiv.f32	s0, s15, s15
   24aae:	e765      	b.n	2497c <__ieee754_powf+0x48>
   24ab0:	ee07 5a90 	vmov	s15, r5
   24ab4:	ee77 7ae7 	vsub.f32	s15, s15, s15
   24ab8:	ee87 0aa7 	vdiv.f32	s0, s15, s15
   24abc:	e75e      	b.n	2497c <__ieee754_powf+0x48>
   24abe:	bf00      	nop
   24ac0:	0002e848 	.word	0x0002e848
   24ac4:	3f7ffff7 	.word	0x3f7ffff7
   24ac8:	00000000 	.word	0x00000000
   24acc:	4b800000 	.word	0x4b800000
   24ad0:	f5b7 0f00 	cmp.w	r7, #8388608	; 0x800000
   24ad4:	f280 815f 	bge.w	24d96 <__ieee754_powf+0x462>
   24ad8:	ed5f 7a04 	vldr	s15, [pc, #-16]	; 24acc <__ieee754_powf+0x198>
   24adc:	ee60 7a27 	vmul.f32	s15, s0, s15
   24ae0:	f06f 0217 	mvn.w	r2, #23
   24ae4:	ee17 7a90 	vmov	r7, s15
   24ae8:	48ee      	ldr	r0, [pc, #952]	; (24ea4 <__ieee754_powf+0x570>)
   24aea:	15f9      	asrs	r1, r7, #23
   24aec:	f3c7 0716 	ubfx	r7, r7, #0, #23
   24af0:	397f      	subs	r1, #127	; 0x7f
   24af2:	4287      	cmp	r7, r0
   24af4:	4411      	add	r1, r2
   24af6:	f047 527e 	orr.w	r2, r7, #1065353216	; 0x3f800000
   24afa:	f340 8144 	ble.w	24d86 <__ieee754_powf+0x452>
   24afe:	48ea      	ldr	r0, [pc, #936]	; (24ea8 <__ieee754_powf+0x574>)
   24b00:	4287      	cmp	r7, r0
   24b02:	f340 8191 	ble.w	24e28 <__ieee754_powf+0x4f4>
   24b06:	eddf 4ae9 	vldr	s9, [pc, #932]	; 24eac <__ieee754_powf+0x578>
   24b0a:	3101      	adds	r1, #1
   24b0c:	f5a2 0200 	sub.w	r2, r2, #8388608	; 0x800000
   24b10:	eef0 3a64 	vmov.f32	s7, s9
   24b14:	2500      	movs	r5, #0
   24b16:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
   24b1a:	ee06 2a90 	vmov	s13, r2
   24b1e:	ee76 7a86 	vadd.f32	s15, s13, s12
   24b22:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
   24b26:	ee87 8a27 	vdiv.f32	s16, s14, s15
   24b2a:	1052      	asrs	r2, r2, #1
   24b2c:	f042 5200 	orr.w	r2, r2, #536870912	; 0x20000000
   24b30:	f502 2280 	add.w	r2, r2, #262144	; 0x40000
   24b34:	442a      	add	r2, r5
   24b36:	48de      	ldr	r0, [pc, #888]	; (24eb0 <__ieee754_powf+0x57c>)
   24b38:	ee36 7ac6 	vsub.f32	s14, s13, s12
   24b3c:	ee07 2a90 	vmov	s15, r2
   24b40:	ee27 4a08 	vmul.f32	s8, s14, s16
   24b44:	ee37 5ac6 	vsub.f32	s10, s15, s12
   24b48:	eddf 8ada 	vldr	s17, [pc, #872]	; 24eb4 <__ieee754_powf+0x580>
   24b4c:	ed9f 0ada 	vldr	s0, [pc, #872]	; 24eb8 <__ieee754_powf+0x584>
   24b50:	eddf 1ada 	vldr	s3, [pc, #872]	; 24ebc <__ieee754_powf+0x588>
   24b54:	eddf 0ada 	vldr	s1, [pc, #872]	; 24ec0 <__ieee754_powf+0x58c>
   24b58:	ed9f 1ada 	vldr	s2, [pc, #872]	; 24ec4 <__ieee754_powf+0x590>
   24b5c:	ed9f 2ada 	vldr	s4, [pc, #872]	; 24ec8 <__ieee754_powf+0x594>
   24b60:	eddf 2ada 	vldr	s5, [pc, #872]	; 24ecc <__ieee754_powf+0x598>
   24b64:	ed9f 3ada 	vldr	s6, [pc, #872]	; 24ed0 <__ieee754_powf+0x59c>
   24b68:	ee24 6a04 	vmul.f32	s12, s8, s8
   24b6c:	ee14 2a10 	vmov	r2, s8
   24b70:	eea6 0a28 	vfma.f32	s0, s12, s17
   24b74:	4002      	ands	r2, r0
   24b76:	ee76 6ac5 	vsub.f32	s13, s13, s10
   24b7a:	eeb0 5a61 	vmov.f32	s10, s3
   24b7e:	ee05 2a90 	vmov	s11, r2
   24b82:	eea6 5a00 	vfma.f32	s10, s12, s0
   24b86:	eef1 1a65 	vneg.f32	s3, s11
   24b8a:	eea1 7aa7 	vfma.f32	s14, s3, s15
   24b8e:	eef0 7a60 	vmov.f32	s15, s1
   24b92:	eee6 7a05 	vfma.f32	s15, s12, s10
   24b96:	eea1 7aa6 	vfma.f32	s14, s3, s13
   24b9a:	eeb0 5a41 	vmov.f32	s10, s2
   24b9e:	eea6 5a27 	vfma.f32	s10, s12, s15
   24ba2:	ee67 6a08 	vmul.f32	s13, s14, s16
   24ba6:	eeb0 7a42 	vmov.f32	s14, s4
   24baa:	eea6 7a05 	vfma.f32	s14, s12, s10
   24bae:	ee75 7a84 	vadd.f32	s15, s11, s8
   24bb2:	ee26 6a06 	vmul.f32	s12, s12, s12
   24bb6:	ee67 7aa6 	vmul.f32	s15, s15, s13
   24bba:	eeb0 5a08 	vmov.f32	s10, #8	; 0x40400000  3.0
   24bbe:	eee6 7a07 	vfma.f32	s15, s12, s14
   24bc2:	eeb0 7a45 	vmov.f32	s14, s10
   24bc6:	eea5 7aa5 	vfma.f32	s14, s11, s11
   24bca:	ed9f 2ac2 	vldr	s4, [pc, #776]	; 24ed4 <__ieee754_powf+0x5a0>
   24bce:	ee37 6a27 	vadd.f32	s12, s14, s15
   24bd2:	ee07 1a10 	vmov	s14, r1
   24bd6:	ee16 2a10 	vmov	r2, s12
   24bda:	4002      	ands	r2, r0
   24bdc:	ee06 2a10 	vmov	s12, r2
   24be0:	ee36 5a45 	vsub.f32	s10, s12, s10
   24be4:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
   24be8:	eea1 5aa5 	vfma.f32	s10, s3, s11
   24bec:	ee77 7ac5 	vsub.f32	s15, s15, s10
   24bf0:	ee67 7a84 	vmul.f32	s15, s15, s8
   24bf4:	eee6 7a26 	vfma.f32	s15, s12, s13
   24bf8:	eef0 6a67 	vmov.f32	s13, s15
   24bfc:	eee5 6a86 	vfma.f32	s13, s11, s12
   24c00:	ee16 2a90 	vmov	r2, s13
   24c04:	4002      	ands	r2, r0
   24c06:	ee06 2a90 	vmov	s13, r2
   24c0a:	eee1 6a86 	vfma.f32	s13, s3, s12
   24c0e:	ee05 2a90 	vmov	s11, r2
   24c12:	ee77 7ae6 	vsub.f32	s15, s15, s13
   24c16:	ee67 7aa2 	vmul.f32	s15, s15, s5
   24c1a:	eee5 7a83 	vfma.f32	s15, s11, s6
   24c1e:	ee77 7aa3 	vadd.f32	s15, s15, s7
   24c22:	eef0 6a67 	vmov.f32	s13, s15
   24c26:	eee5 6a82 	vfma.f32	s13, s11, s4
   24c2a:	ee76 6aa4 	vadd.f32	s13, s13, s9
   24c2e:	ee76 6a87 	vadd.f32	s13, s13, s14
   24c32:	ee16 2a90 	vmov	r2, s13
   24c36:	4002      	ands	r2, r0
   24c38:	ee06 2a90 	vmov	s13, r2
   24c3c:	ee36 7ac7 	vsub.f32	s14, s13, s14
   24c40:	ee37 7a64 	vsub.f32	s14, s14, s9
   24c44:	eea5 7ac2 	vfms.f32	s14, s11, s4
   24c48:	ee77 7ac7 	vsub.f32	s15, s15, s14
   24c4c:	f424 647f 	bic.w	r4, r4, #4080	; 0xff0
   24c50:	f024 040f 	bic.w	r4, r4, #15
   24c54:	ee07 9a10 	vmov	s14, r9
   24c58:	ee06 4a10 	vmov	s12, r4
   24c5c:	ee67 7a87 	vmul.f32	s15, s15, s14
   24c60:	ee37 6a46 	vsub.f32	s12, s14, s12
   24c64:	ee07 4a10 	vmov	s14, r4
   24c68:	eee6 7a86 	vfma.f32	s15, s13, s12
   24c6c:	f10a 3aff 	add.w	sl, sl, #4294967295
   24c70:	ea5a 0303 	orrs.w	r3, sl, r3
   24c74:	ee26 7a87 	vmul.f32	s14, s13, s14
   24c78:	eebf 0a00 	vmov.f32	s0, #240	; 0xbf800000 -1.0
   24c7c:	ee77 6a87 	vadd.f32	s13, s15, s14
   24c80:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
   24c84:	ee16 2a90 	vmov	r2, s13
   24c88:	bf14      	ite	ne
   24c8a:	eeb0 8a46 	vmovne.f32	s16, s12
   24c8e:	eeb0 8a40 	vmoveq.f32	s16, s0
   24c92:	2a00      	cmp	r2, #0
   24c94:	f022 4300 	bic.w	r3, r2, #2147483648	; 0x80000000
   24c98:	f340 80b3 	ble.w	24e02 <__ieee754_powf+0x4ce>
   24c9c:	f1b3 4f86 	cmp.w	r3, #1124073472	; 0x43000000
   24ca0:	f300 8086 	bgt.w	24db0 <__ieee754_powf+0x47c>
   24ca4:	d079      	beq.n	24d9a <__ieee754_powf+0x466>
   24ca6:	f1b3 5f7c 	cmp.w	r3, #1056964608	; 0x3f000000
   24caa:	f300 8088 	bgt.w	24dbe <__ieee754_powf+0x48a>
   24cae:	2100      	movs	r1, #0
   24cb0:	4608      	mov	r0, r1
   24cb2:	f422 637f 	bic.w	r3, r2, #4080	; 0xff0
   24cb6:	f023 030f 	bic.w	r3, r3, #15
   24cba:	ee06 3a10 	vmov	s12, r3
   24cbe:	eddf 6a86 	vldr	s13, [pc, #536]	; 24ed8 <__ieee754_powf+0x5a4>
   24cc2:	eddf 5a86 	vldr	s11, [pc, #536]	; 24edc <__ieee754_powf+0x5a8>
   24cc6:	ed9f 3a86 	vldr	s6, [pc, #536]	; 24ee0 <__ieee754_powf+0x5ac>
   24cca:	eddf 3a86 	vldr	s7, [pc, #536]	; 24ee4 <__ieee754_powf+0x5b0>
   24cce:	ed9f 2a86 	vldr	s4, [pc, #536]	; 24ee8 <__ieee754_powf+0x5b4>
   24cd2:	ed9f 4a86 	vldr	s8, [pc, #536]	; 24eec <__ieee754_powf+0x5b8>
   24cd6:	eddf 4a86 	vldr	s9, [pc, #536]	; 24ef0 <__ieee754_powf+0x5bc>
   24cda:	ed9f 5a86 	vldr	s10, [pc, #536]	; 24ef4 <__ieee754_powf+0x5c0>
   24cde:	ee36 7a47 	vsub.f32	s14, s12, s14
   24ce2:	eef0 2a00 	vmov.f32	s5, #0	; 0x40000000  2.0
   24ce6:	ee77 7ac7 	vsub.f32	s15, s15, s14
   24cea:	ee26 7a26 	vmul.f32	s14, s12, s13
   24cee:	eea7 7aa5 	vfma.f32	s14, s15, s11
   24cf2:	eef7 5a00 	vmov.f32	s11, #112	; 0x3f800000  1.0
   24cf6:	eef0 7a47 	vmov.f32	s15, s14
   24cfa:	eea6 7a03 	vfma.f32	s14, s12, s6
   24cfe:	ee67 6a07 	vmul.f32	s13, s14, s14
   24d02:	eef0 1a47 	vmov.f32	s3, s14
   24d06:	eee6 1a43 	vfms.f32	s3, s12, s6
   24d0a:	eeb0 6a63 	vmov.f32	s12, s7
   24d0e:	eea6 6a82 	vfma.f32	s12, s13, s4
   24d12:	ee77 7ae1 	vsub.f32	s15, s15, s3
   24d16:	eea6 4a86 	vfma.f32	s8, s13, s12
   24d1a:	eee7 7a27 	vfma.f32	s15, s14, s15
   24d1e:	eee6 4a84 	vfma.f32	s9, s13, s8
   24d22:	eea6 5aa4 	vfma.f32	s10, s13, s9
   24d26:	eeb0 6a45 	vmov.f32	s12, s10
   24d2a:	eeb0 5a47 	vmov.f32	s10, s14
   24d2e:	eea6 5ac6 	vfms.f32	s10, s13, s12
   24d32:	eef0 6a45 	vmov.f32	s13, s10
   24d36:	ee36 6ae2 	vsub.f32	s12, s13, s5
   24d3a:	ee27 5a05 	vmul.f32	s10, s14, s10
   24d3e:	eec5 6a06 	vdiv.f32	s13, s10, s12
   24d42:	ee76 7ae7 	vsub.f32	s15, s13, s15
   24d46:	ee37 7ac7 	vsub.f32	s14, s15, s14
   24d4a:	ee35 0ac7 	vsub.f32	s0, s11, s14
   24d4e:	ee10 3a10 	vmov	r3, s0
   24d52:	440b      	add	r3, r1
   24d54:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
   24d58:	f2c0 80a0 	blt.w	24e9c <__ieee754_powf+0x568>
   24d5c:	ee00 3a10 	vmov	s0, r3
   24d60:	ee20 0a08 	vmul.f32	s0, s0, s16
   24d64:	e60a      	b.n	2497c <__ieee754_powf+0x48>
   24d66:	f002 0201 	and.w	r2, r2, #1
   24d6a:	f1c2 0a02 	rsb	sl, r2, #2
   24d6e:	e612      	b.n	24996 <__ieee754_powf+0x62>
   24d70:	4a61      	ldr	r2, [pc, #388]	; (24ef8 <__ieee754_powf+0x5c4>)
   24d72:	4297      	cmp	r7, r2
   24d74:	dd61      	ble.n	24e3a <__ieee754_powf+0x506>
   24d76:	2c00      	cmp	r4, #0
   24d78:	f77f ae35 	ble.w	249e6 <__ieee754_powf+0xb2>
   24d7c:	ed9f 0a5f 	vldr	s0, [pc, #380]	; 24efc <__ieee754_powf+0x5c8>
   24d80:	ee20 0a00 	vmul.f32	s0, s0, s0
   24d84:	e5fa      	b.n	2497c <__ieee754_powf+0x48>
   24d86:	eddf 4a49 	vldr	s9, [pc, #292]	; 24eac <__ieee754_powf+0x578>
   24d8a:	2500      	movs	r5, #0
   24d8c:	eef0 3a64 	vmov.f32	s7, s9
   24d90:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
   24d94:	e6c1      	b.n	24b1a <__ieee754_powf+0x1e6>
   24d96:	2200      	movs	r2, #0
   24d98:	e6a6      	b.n	24ae8 <__ieee754_powf+0x1b4>
   24d9a:	ed9f 6a59 	vldr	s12, [pc, #356]	; 24f00 <__ieee754_powf+0x5cc>
   24d9e:	ee76 6ac7 	vsub.f32	s13, s13, s14
   24da2:	ee37 6a86 	vadd.f32	s12, s15, s12
   24da6:	eeb4 6ae6 	vcmpe.f32	s12, s13
   24daa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   24dae:	dd06      	ble.n	24dbe <__ieee754_powf+0x48a>
   24db0:	eddf 7a52 	vldr	s15, [pc, #328]	; 24efc <__ieee754_powf+0x5c8>
   24db4:	ee28 0a27 	vmul.f32	s0, s16, s15
   24db8:	ee20 0a27 	vmul.f32	s0, s0, s15
   24dbc:	e5de      	b.n	2497c <__ieee754_powf+0x48>
   24dbe:	15db      	asrs	r3, r3, #23
   24dc0:	f44f 0100 	mov.w	r1, #8388608	; 0x800000
   24dc4:	3b7e      	subs	r3, #126	; 0x7e
   24dc6:	fa41 f303 	asr.w	r3, r1, r3
   24dca:	4413      	add	r3, r2
   24dcc:	f3c3 51c7 	ubfx	r1, r3, #23, #8
   24dd0:	4c4c      	ldr	r4, [pc, #304]	; (24f04 <__ieee754_powf+0x5d0>)
   24dd2:	397f      	subs	r1, #127	; 0x7f
   24dd4:	410c      	asrs	r4, r1
   24dd6:	f3c3 0016 	ubfx	r0, r3, #0, #23
   24dda:	ea23 0304 	bic.w	r3, r3, r4
   24dde:	ee06 3a90 	vmov	s13, r3
   24de2:	ee37 7a66 	vsub.f32	s14, s14, s13
   24de6:	f1c1 0117 	rsb	r1, r1, #23
   24dea:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
   24dee:	4108      	asrs	r0, r1
   24df0:	2a00      	cmp	r2, #0
   24df2:	ee77 6a87 	vadd.f32	s13, s15, s14
   24df6:	bfb8      	it	lt
   24df8:	4240      	neglt	r0, r0
   24dfa:	05c1      	lsls	r1, r0, #23
   24dfc:	ee16 2a90 	vmov	r2, s13
   24e00:	e757      	b.n	24cb2 <__ieee754_powf+0x37e>
   24e02:	4941      	ldr	r1, [pc, #260]	; (24f08 <__ieee754_powf+0x5d4>)
   24e04:	428b      	cmp	r3, r1
   24e06:	dc08      	bgt.n	24e1a <__ieee754_powf+0x4e6>
   24e08:	f47f af4d 	bne.w	24ca6 <__ieee754_powf+0x372>
   24e0c:	ee76 6ac7 	vsub.f32	s13, s13, s14
   24e10:	eef4 7ae6 	vcmpe.f32	s15, s13
   24e14:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   24e18:	d8d1      	bhi.n	24dbe <__ieee754_powf+0x48a>
   24e1a:	eddf 7a3c 	vldr	s15, [pc, #240]	; 24f0c <__ieee754_powf+0x5d8>
   24e1e:	ee28 0a27 	vmul.f32	s0, s16, s15
   24e22:	ee20 0a27 	vmul.f32	s0, s0, s15
   24e26:	e5a9      	b.n	2497c <__ieee754_powf+0x48>
   24e28:	eddf 4a39 	vldr	s9, [pc, #228]	; 24f10 <__ieee754_powf+0x5dc>
   24e2c:	eddf 3a39 	vldr	s7, [pc, #228]	; 24f14 <__ieee754_powf+0x5e0>
   24e30:	f44f 1500 	mov.w	r5, #2097152	; 0x200000
   24e34:	eeb7 6a08 	vmov.f32	s12, #120	; 0x3fc00000  1.5
   24e38:	e66f      	b.n	24b1a <__ieee754_powf+0x1e6>
   24e3a:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
   24e3e:	ee30 0a67 	vsub.f32	s0, s0, s15
   24e42:	eddf 6a1f 	vldr	s13, [pc, #124]	; 24ec0 <__ieee754_powf+0x58c>
   24e46:	eddf 7a34 	vldr	s15, [pc, #208]	; 24f18 <__ieee754_powf+0x5e4>
   24e4a:	ed9f 5a34 	vldr	s10, [pc, #208]	; 24f1c <__ieee754_powf+0x5e8>
   24e4e:	eddf 5a34 	vldr	s11, [pc, #208]	; 24f20 <__ieee754_powf+0x5ec>
   24e52:	eeb1 6a40 	vneg.f32	s12, s0
   24e56:	eeb5 7a00 	vmov.f32	s14, #80	; 0x3e800000  0.250
   24e5a:	eee6 6a07 	vfma.f32	s13, s12, s14
   24e5e:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
   24e62:	eea6 7a26 	vfma.f32	s14, s12, s13
   24e66:	ee60 6a00 	vmul.f32	s13, s0, s0
   24e6a:	ee27 7a26 	vmul.f32	s14, s14, s13
   24e6e:	ee67 7ac7 	vnmul.f32	s15, s15, s14
   24e72:	eee0 7a05 	vfma.f32	s15, s0, s10
   24e76:	eef0 6a67 	vmov.f32	s13, s15
   24e7a:	eee0 6a25 	vfma.f32	s13, s0, s11
   24e7e:	ee16 2a90 	vmov	r2, s13
   24e82:	f422 627f 	bic.w	r2, r2, #4080	; 0xff0
   24e86:	f022 020f 	bic.w	r2, r2, #15
   24e8a:	ee07 2a10 	vmov	s14, r2
   24e8e:	eea6 7a25 	vfma.f32	s14, s12, s11
   24e92:	ee06 2a90 	vmov	s13, r2
   24e96:	ee77 7ac7 	vsub.f32	s15, s15, s14
   24e9a:	e6d7      	b.n	24c4c <__ieee754_powf+0x318>
   24e9c:	f000 f8f2 	bl	25084 <scalbnf>
   24ea0:	e75e      	b.n	24d60 <__ieee754_powf+0x42c>
   24ea2:	bf00      	nop
   24ea4:	001cc471 	.word	0x001cc471
   24ea8:	005db3d6 	.word	0x005db3d6
   24eac:	00000000 	.word	0x00000000
   24eb0:	fffff000 	.word	0xfffff000
   24eb4:	3e53f142 	.word	0x3e53f142
   24eb8:	3e6c3255 	.word	0x3e6c3255
   24ebc:	3e8ba305 	.word	0x3e8ba305
   24ec0:	3eaaaaab 	.word	0x3eaaaaab
   24ec4:	3edb6db7 	.word	0x3edb6db7
   24ec8:	3f19999a 	.word	0x3f19999a
   24ecc:	3f76384f 	.word	0x3f76384f
   24ed0:	369dc3a0 	.word	0x369dc3a0
   24ed4:	3f763800 	.word	0x3f763800
   24ed8:	35bfbe8c 	.word	0x35bfbe8c
   24edc:	3f317218 	.word	0x3f317218
   24ee0:	3f317200 	.word	0x3f317200
   24ee4:	b5ddea0e 	.word	0xb5ddea0e
   24ee8:	3331bb4c 	.word	0x3331bb4c
   24eec:	388ab355 	.word	0x388ab355
   24ef0:	bb360b61 	.word	0xbb360b61
   24ef4:	3e2aaaab 	.word	0x3e2aaaab
   24ef8:	3f800007 	.word	0x3f800007
   24efc:	7149f2ca 	.word	0x7149f2ca
   24f00:	3338aa3c 	.word	0x3338aa3c
   24f04:	007fffff 	.word	0x007fffff
   24f08:	43160000 	.word	0x43160000
   24f0c:	0da24260 	.word	0x0da24260
   24f10:	3f15c000 	.word	0x3f15c000
   24f14:	35d1cfdc 	.word	0x35d1cfdc
   24f18:	3fb8aa3b 	.word	0x3fb8aa3b
   24f1c:	36eca570 	.word	0x36eca570
   24f20:	3fb8aa00 	.word	0x3fb8aa00

00024f24 <__ieee754_sqrtf>:
   24f24:	eeb1 0ac0 	vsqrt.f32	s0, s0
   24f28:	4770      	bx	lr
   24f2a:	bf00      	nop

00024f2c <matherr>:
   24f2c:	2000      	movs	r0, #0
   24f2e:	4770      	bx	lr

00024f30 <rint>:
   24f30:	b5f0      	push	{r4, r5, r6, r7, lr}
   24f32:	ec53 2b10 	vmov	r2, r3, d0
   24f36:	f3c3 560a 	ubfx	r6, r3, #20, #11
   24f3a:	f2a6 30ff 	subw	r0, r6, #1023	; 0x3ff
   24f3e:	2813      	cmp	r0, #19
   24f40:	b083      	sub	sp, #12
   24f42:	4619      	mov	r1, r3
   24f44:	ea4f 74d3 	mov.w	r4, r3, lsr #31
   24f48:	ee10 5a10 	vmov	r5, s0
   24f4c:	dc2f      	bgt.n	24fae <rint+0x7e>
   24f4e:	2800      	cmp	r0, #0
   24f50:	db49      	blt.n	24fe6 <rint+0xb6>
   24f52:	4e3e      	ldr	r6, [pc, #248]	; (2504c <rint+0x11c>)
   24f54:	4106      	asrs	r6, r0
   24f56:	ea03 0706 	and.w	r7, r3, r6
   24f5a:	4317      	orrs	r7, r2
   24f5c:	d02c      	beq.n	24fb8 <rint+0x88>
   24f5e:	0876      	lsrs	r6, r6, #1
   24f60:	4033      	ands	r3, r6
   24f62:	431d      	orrs	r5, r3
   24f64:	d00c      	beq.n	24f80 <rint+0x50>
   24f66:	f44f 2380 	mov.w	r3, #262144	; 0x40000
   24f6a:	2813      	cmp	r0, #19
   24f6c:	ea21 0606 	bic.w	r6, r1, r6
   24f70:	fa43 f100 	asr.w	r1, r3, r0
   24f74:	ea41 0106 	orr.w	r1, r1, r6
   24f78:	bf0c      	ite	eq
   24f7a:	f04f 4500 	moveq.w	r5, #2147483648	; 0x80000000
   24f7e:	2500      	movne	r5, #0
   24f80:	4833      	ldr	r0, [pc, #204]	; (25050 <rint+0x120>)
   24f82:	eb00 04c4 	add.w	r4, r0, r4, lsl #3
   24f86:	462a      	mov	r2, r5
   24f88:	e9d4 4500 	ldrd	r4, r5, [r4]
   24f8c:	4610      	mov	r0, r2
   24f8e:	462b      	mov	r3, r5
   24f90:	4622      	mov	r2, r4
   24f92:	f000 f8f1 	bl	25178 <__adddf3>
   24f96:	e9cd 0100 	strd	r0, r1, [sp]
   24f9a:	4622      	mov	r2, r4
   24f9c:	462b      	mov	r3, r5
   24f9e:	e9dd 0100 	ldrd	r0, r1, [sp]
   24fa2:	f000 f8e7 	bl	25174 <__aeabi_dsub>
   24fa6:	ec41 0b10 	vmov	d0, r0, r1
   24faa:	b003      	add	sp, #12
   24fac:	bdf0      	pop	{r4, r5, r6, r7, pc}
   24fae:	2833      	cmp	r0, #51	; 0x33
   24fb0:	dd06      	ble.n	24fc0 <rint+0x90>
   24fb2:	f5b0 6f80 	cmp.w	r0, #1024	; 0x400
   24fb6:	d040      	beq.n	2503a <rint+0x10a>
   24fb8:	ec43 2b10 	vmov	d0, r2, r3
   24fbc:	b003      	add	sp, #12
   24fbe:	bdf0      	pop	{r4, r5, r6, r7, pc}
   24fc0:	f2a6 4613 	subw	r6, r6, #1043	; 0x413
   24fc4:	f04f 30ff 	mov.w	r0, #4294967295
   24fc8:	40f0      	lsrs	r0, r6
   24fca:	4202      	tst	r2, r0
   24fcc:	d0f4      	beq.n	24fb8 <rint+0x88>
   24fce:	0840      	lsrs	r0, r0, #1
   24fd0:	4202      	tst	r2, r0
   24fd2:	d0d5      	beq.n	24f80 <rint+0x50>
   24fd4:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   24fd8:	ea25 0000 	bic.w	r0, r5, r0
   24fdc:	fa43 f606 	asr.w	r6, r3, r6
   24fe0:	ea46 0500 	orr.w	r5, r6, r0
   24fe4:	e7cc      	b.n	24f80 <rint+0x50>
   24fe6:	f023 4000 	bic.w	r0, r3, #2147483648	; 0x80000000
   24fea:	4310      	orrs	r0, r2
   24fec:	d0e4      	beq.n	24fb8 <rint+0x88>
   24fee:	f3c3 0013 	ubfx	r0, r3, #0, #20
   24ff2:	4310      	orrs	r0, r2
   24ff4:	4247      	negs	r7, r0
   24ff6:	4307      	orrs	r7, r0
   24ff8:	4d15      	ldr	r5, [pc, #84]	; (25050 <rint+0x120>)
   24ffa:	0c5e      	lsrs	r6, r3, #17
   24ffc:	0b3f      	lsrs	r7, r7, #12
   24ffe:	f407 2300 	and.w	r3, r7, #524288	; 0x80000
   25002:	0476      	lsls	r6, r6, #17
   25004:	eb05 02c4 	add.w	r2, r5, r4, lsl #3
   25008:	ea43 0106 	orr.w	r1, r3, r6
   2500c:	e9d2 6700 	ldrd	r6, r7, [r2]
   25010:	ee10 0a10 	vmov	r0, s0
   25014:	4632      	mov	r2, r6
   25016:	463b      	mov	r3, r7
   25018:	f000 f8ae 	bl	25178 <__adddf3>
   2501c:	e9cd 0100 	strd	r0, r1, [sp]
   25020:	463b      	mov	r3, r7
   25022:	4632      	mov	r2, r6
   25024:	e9dd 0100 	ldrd	r0, r1, [sp]
   25028:	f000 f8a4 	bl	25174 <__aeabi_dsub>
   2502c:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
   25030:	ea43 71c4 	orr.w	r1, r3, r4, lsl #31
   25034:	ec41 0b10 	vmov	d0, r0, r1
   25038:	e7c0      	b.n	24fbc <rint+0x8c>
   2503a:	ee10 0a10 	vmov	r0, s0
   2503e:	4619      	mov	r1, r3
   25040:	f000 f89a 	bl	25178 <__adddf3>
   25044:	ec41 0b10 	vmov	d0, r0, r1
   25048:	e7b8      	b.n	24fbc <rint+0x8c>
   2504a:	bf00      	nop
   2504c:	000fffff 	.word	0x000fffff
   25050:	0002edb8 	.word	0x0002edb8

00025054 <fabsf>:
   25054:	ee10 3a10 	vmov	r3, s0
   25058:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
   2505c:	ee00 3a10 	vmov	s0, r3
   25060:	4770      	bx	lr
   25062:	bf00      	nop

00025064 <finitef>:
   25064:	ee10 3a10 	vmov	r3, s0
   25068:	f023 4000 	bic.w	r0, r3, #2147483648	; 0x80000000
   2506c:	f1b0 4fff 	cmp.w	r0, #2139095040	; 0x7f800000
   25070:	bfac      	ite	ge
   25072:	2000      	movge	r0, #0
   25074:	2001      	movlt	r0, #1
   25076:	4770      	bx	lr

00025078 <nanf>:
   25078:	ed9f 0a01 	vldr	s0, [pc, #4]	; 25080 <nanf+0x8>
   2507c:	4770      	bx	lr
   2507e:	bf00      	nop
   25080:	7fc00000 	.word	0x7fc00000

00025084 <scalbnf>:
   25084:	b508      	push	{r3, lr}
   25086:	ee10 3a10 	vmov	r3, s0
   2508a:	f033 4200 	bics.w	r2, r3, #2147483648	; 0x80000000
   2508e:	ed2d 8b02 	vpush	{d8}
   25092:	d011      	beq.n	250b8 <scalbnf+0x34>
   25094:	f1b2 4fff 	cmp.w	r2, #2139095040	; 0x7f800000
   25098:	d211      	bcs.n	250be <scalbnf+0x3a>
   2509a:	f5b2 0f00 	cmp.w	r2, #8388608	; 0x800000
   2509e:	d313      	bcc.n	250c8 <scalbnf+0x44>
   250a0:	0dd2      	lsrs	r2, r2, #23
   250a2:	4402      	add	r2, r0
   250a4:	2afe      	cmp	r2, #254	; 0xfe
   250a6:	dc2e      	bgt.n	25106 <scalbnf+0x82>
   250a8:	2a00      	cmp	r2, #0
   250aa:	dd1a      	ble.n	250e2 <scalbnf+0x5e>
   250ac:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
   250b0:	ea43 53c2 	orr.w	r3, r3, r2, lsl #23
   250b4:	ee00 3a10 	vmov	s0, r3
   250b8:	ecbd 8b02 	vpop	{d8}
   250bc:	bd08      	pop	{r3, pc}
   250be:	ecbd 8b02 	vpop	{d8}
   250c2:	ee30 0a00 	vadd.f32	s0, s0, s0
   250c6:	bd08      	pop	{r3, pc}
   250c8:	4b1d      	ldr	r3, [pc, #116]	; (25140 <scalbnf+0xbc>)
   250ca:	eddf 7a1e 	vldr	s15, [pc, #120]	; 25144 <scalbnf+0xc0>
   250ce:	4298      	cmp	r0, r3
   250d0:	ee20 0a27 	vmul.f32	s0, s0, s15
   250d4:	db22      	blt.n	2511c <scalbnf+0x98>
   250d6:	ee10 3a10 	vmov	r3, s0
   250da:	f3c3 52c7 	ubfx	r2, r3, #23, #8
   250de:	3a19      	subs	r2, #25
   250e0:	e7df      	b.n	250a2 <scalbnf+0x1e>
   250e2:	f112 0f16 	cmn.w	r2, #22
   250e6:	da1e      	bge.n	25126 <scalbnf+0xa2>
   250e8:	f24c 3350 	movw	r3, #50000	; 0xc350
   250ec:	4298      	cmp	r0, r3
   250ee:	dc0a      	bgt.n	25106 <scalbnf+0x82>
   250f0:	ed9f 8a15 	vldr	s16, [pc, #84]	; 25148 <scalbnf+0xc4>
   250f4:	eef0 0a40 	vmov.f32	s1, s0
   250f8:	eeb0 0a48 	vmov.f32	s0, s16
   250fc:	f000 f82a 	bl	25154 <copysignf>
   25100:	ee20 0a08 	vmul.f32	s0, s0, s16
   25104:	e7d8      	b.n	250b8 <scalbnf+0x34>
   25106:	ed9f 8a11 	vldr	s16, [pc, #68]	; 2514c <scalbnf+0xc8>
   2510a:	eef0 0a40 	vmov.f32	s1, s0
   2510e:	eeb0 0a48 	vmov.f32	s0, s16
   25112:	f000 f81f 	bl	25154 <copysignf>
   25116:	ee20 0a08 	vmul.f32	s0, s0, s16
   2511a:	e7cd      	b.n	250b8 <scalbnf+0x34>
   2511c:	eddf 0a0a 	vldr	s1, [pc, #40]	; 25148 <scalbnf+0xc4>
   25120:	ee20 0a20 	vmul.f32	s0, s0, s1
   25124:	e7c8      	b.n	250b8 <scalbnf+0x34>
   25126:	3219      	adds	r2, #25
   25128:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
   2512c:	ea43 53c2 	orr.w	r3, r3, r2, lsl #23
   25130:	eddf 7a07 	vldr	s15, [pc, #28]	; 25150 <scalbnf+0xcc>
   25134:	ee00 3a10 	vmov	s0, r3
   25138:	ee20 0a27 	vmul.f32	s0, s0, s15
   2513c:	e7bc      	b.n	250b8 <scalbnf+0x34>
   2513e:	bf00      	nop
   25140:	ffff3cb0 	.word	0xffff3cb0
   25144:	4c000000 	.word	0x4c000000
   25148:	0da24260 	.word	0x0da24260
   2514c:	7149f2ca 	.word	0x7149f2ca
   25150:	33000000 	.word	0x33000000

00025154 <copysignf>:
   25154:	ee10 3a10 	vmov	r3, s0
   25158:	ee10 2a90 	vmov	r2, s1
   2515c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
   25160:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
   25164:	4313      	orrs	r3, r2
   25166:	ee00 3a10 	vmov	s0, r3
   2516a:	4770      	bx	lr

0002516c <__aeabi_drsub>:
   2516c:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
   25170:	e002      	b.n	25178 <__adddf3>
   25172:	bf00      	nop

00025174 <__aeabi_dsub>:
   25174:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

00025178 <__adddf3>:
   25178:	b530      	push	{r4, r5, lr}
   2517a:	ea4f 0441 	mov.w	r4, r1, lsl #1
   2517e:	ea4f 0543 	mov.w	r5, r3, lsl #1
   25182:	ea94 0f05 	teq	r4, r5
   25186:	bf08      	it	eq
   25188:	ea90 0f02 	teqeq	r0, r2
   2518c:	bf1f      	itttt	ne
   2518e:	ea54 0c00 	orrsne.w	ip, r4, r0
   25192:	ea55 0c02 	orrsne.w	ip, r5, r2
   25196:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
   2519a:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   2519e:	f000 80e2 	beq.w	25366 <__adddf3+0x1ee>
   251a2:	ea4f 5454 	mov.w	r4, r4, lsr #21
   251a6:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
   251aa:	bfb8      	it	lt
   251ac:	426d      	neglt	r5, r5
   251ae:	dd0c      	ble.n	251ca <__adddf3+0x52>
   251b0:	442c      	add	r4, r5
   251b2:	ea80 0202 	eor.w	r2, r0, r2
   251b6:	ea81 0303 	eor.w	r3, r1, r3
   251ba:	ea82 0000 	eor.w	r0, r2, r0
   251be:	ea83 0101 	eor.w	r1, r3, r1
   251c2:	ea80 0202 	eor.w	r2, r0, r2
   251c6:	ea81 0303 	eor.w	r3, r1, r3
   251ca:	2d36      	cmp	r5, #54	; 0x36
   251cc:	bf88      	it	hi
   251ce:	bd30      	pophi	{r4, r5, pc}
   251d0:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
   251d4:	ea4f 3101 	mov.w	r1, r1, lsl #12
   251d8:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
   251dc:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
   251e0:	d002      	beq.n	251e8 <__adddf3+0x70>
   251e2:	4240      	negs	r0, r0
   251e4:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   251e8:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
   251ec:	ea4f 3303 	mov.w	r3, r3, lsl #12
   251f0:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
   251f4:	d002      	beq.n	251fc <__adddf3+0x84>
   251f6:	4252      	negs	r2, r2
   251f8:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
   251fc:	ea94 0f05 	teq	r4, r5
   25200:	f000 80a7 	beq.w	25352 <__adddf3+0x1da>
   25204:	f1a4 0401 	sub.w	r4, r4, #1
   25208:	f1d5 0e20 	rsbs	lr, r5, #32
   2520c:	db0d      	blt.n	2522a <__adddf3+0xb2>
   2520e:	fa02 fc0e 	lsl.w	ip, r2, lr
   25212:	fa22 f205 	lsr.w	r2, r2, r5
   25216:	1880      	adds	r0, r0, r2
   25218:	f141 0100 	adc.w	r1, r1, #0
   2521c:	fa03 f20e 	lsl.w	r2, r3, lr
   25220:	1880      	adds	r0, r0, r2
   25222:	fa43 f305 	asr.w	r3, r3, r5
   25226:	4159      	adcs	r1, r3
   25228:	e00e      	b.n	25248 <__adddf3+0xd0>
   2522a:	f1a5 0520 	sub.w	r5, r5, #32
   2522e:	f10e 0e20 	add.w	lr, lr, #32
   25232:	2a01      	cmp	r2, #1
   25234:	fa03 fc0e 	lsl.w	ip, r3, lr
   25238:	bf28      	it	cs
   2523a:	f04c 0c02 	orrcs.w	ip, ip, #2
   2523e:	fa43 f305 	asr.w	r3, r3, r5
   25242:	18c0      	adds	r0, r0, r3
   25244:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
   25248:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   2524c:	d507      	bpl.n	2525e <__adddf3+0xe6>
   2524e:	f04f 0e00 	mov.w	lr, #0
   25252:	f1dc 0c00 	rsbs	ip, ip, #0
   25256:	eb7e 0000 	sbcs.w	r0, lr, r0
   2525a:	eb6e 0101 	sbc.w	r1, lr, r1
   2525e:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
   25262:	d31b      	bcc.n	2529c <__adddf3+0x124>
   25264:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
   25268:	d30c      	bcc.n	25284 <__adddf3+0x10c>
   2526a:	0849      	lsrs	r1, r1, #1
   2526c:	ea5f 0030 	movs.w	r0, r0, rrx
   25270:	ea4f 0c3c 	mov.w	ip, ip, rrx
   25274:	f104 0401 	add.w	r4, r4, #1
   25278:	ea4f 5244 	mov.w	r2, r4, lsl #21
   2527c:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
   25280:	f080 809a 	bcs.w	253b8 <__adddf3+0x240>
   25284:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
   25288:	bf08      	it	eq
   2528a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
   2528e:	f150 0000 	adcs.w	r0, r0, #0
   25292:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   25296:	ea41 0105 	orr.w	r1, r1, r5
   2529a:	bd30      	pop	{r4, r5, pc}
   2529c:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
   252a0:	4140      	adcs	r0, r0
   252a2:	eb41 0101 	adc.w	r1, r1, r1
   252a6:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   252aa:	f1a4 0401 	sub.w	r4, r4, #1
   252ae:	d1e9      	bne.n	25284 <__adddf3+0x10c>
   252b0:	f091 0f00 	teq	r1, #0
   252b4:	bf04      	itt	eq
   252b6:	4601      	moveq	r1, r0
   252b8:	2000      	moveq	r0, #0
   252ba:	fab1 f381 	clz	r3, r1
   252be:	bf08      	it	eq
   252c0:	3320      	addeq	r3, #32
   252c2:	f1a3 030b 	sub.w	r3, r3, #11
   252c6:	f1b3 0220 	subs.w	r2, r3, #32
   252ca:	da0c      	bge.n	252e6 <__adddf3+0x16e>
   252cc:	320c      	adds	r2, #12
   252ce:	dd08      	ble.n	252e2 <__adddf3+0x16a>
   252d0:	f102 0c14 	add.w	ip, r2, #20
   252d4:	f1c2 020c 	rsb	r2, r2, #12
   252d8:	fa01 f00c 	lsl.w	r0, r1, ip
   252dc:	fa21 f102 	lsr.w	r1, r1, r2
   252e0:	e00c      	b.n	252fc <__adddf3+0x184>
   252e2:	f102 0214 	add.w	r2, r2, #20
   252e6:	bfd8      	it	le
   252e8:	f1c2 0c20 	rsble	ip, r2, #32
   252ec:	fa01 f102 	lsl.w	r1, r1, r2
   252f0:	fa20 fc0c 	lsr.w	ip, r0, ip
   252f4:	bfdc      	itt	le
   252f6:	ea41 010c 	orrle.w	r1, r1, ip
   252fa:	4090      	lslle	r0, r2
   252fc:	1ae4      	subs	r4, r4, r3
   252fe:	bfa2      	ittt	ge
   25300:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
   25304:	4329      	orrge	r1, r5
   25306:	bd30      	popge	{r4, r5, pc}
   25308:	ea6f 0404 	mvn.w	r4, r4
   2530c:	3c1f      	subs	r4, #31
   2530e:	da1c      	bge.n	2534a <__adddf3+0x1d2>
   25310:	340c      	adds	r4, #12
   25312:	dc0e      	bgt.n	25332 <__adddf3+0x1ba>
   25314:	f104 0414 	add.w	r4, r4, #20
   25318:	f1c4 0220 	rsb	r2, r4, #32
   2531c:	fa20 f004 	lsr.w	r0, r0, r4
   25320:	fa01 f302 	lsl.w	r3, r1, r2
   25324:	ea40 0003 	orr.w	r0, r0, r3
   25328:	fa21 f304 	lsr.w	r3, r1, r4
   2532c:	ea45 0103 	orr.w	r1, r5, r3
   25330:	bd30      	pop	{r4, r5, pc}
   25332:	f1c4 040c 	rsb	r4, r4, #12
   25336:	f1c4 0220 	rsb	r2, r4, #32
   2533a:	fa20 f002 	lsr.w	r0, r0, r2
   2533e:	fa01 f304 	lsl.w	r3, r1, r4
   25342:	ea40 0003 	orr.w	r0, r0, r3
   25346:	4629      	mov	r1, r5
   25348:	bd30      	pop	{r4, r5, pc}
   2534a:	fa21 f004 	lsr.w	r0, r1, r4
   2534e:	4629      	mov	r1, r5
   25350:	bd30      	pop	{r4, r5, pc}
   25352:	f094 0f00 	teq	r4, #0
   25356:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
   2535a:	bf06      	itte	eq
   2535c:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
   25360:	3401      	addeq	r4, #1
   25362:	3d01      	subne	r5, #1
   25364:	e74e      	b.n	25204 <__adddf3+0x8c>
   25366:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   2536a:	bf18      	it	ne
   2536c:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   25370:	d029      	beq.n	253c6 <__adddf3+0x24e>
   25372:	ea94 0f05 	teq	r4, r5
   25376:	bf08      	it	eq
   25378:	ea90 0f02 	teqeq	r0, r2
   2537c:	d005      	beq.n	2538a <__adddf3+0x212>
   2537e:	ea54 0c00 	orrs.w	ip, r4, r0
   25382:	bf04      	itt	eq
   25384:	4619      	moveq	r1, r3
   25386:	4610      	moveq	r0, r2
   25388:	bd30      	pop	{r4, r5, pc}
   2538a:	ea91 0f03 	teq	r1, r3
   2538e:	bf1e      	ittt	ne
   25390:	2100      	movne	r1, #0
   25392:	2000      	movne	r0, #0
   25394:	bd30      	popne	{r4, r5, pc}
   25396:	ea5f 5c54 	movs.w	ip, r4, lsr #21
   2539a:	d105      	bne.n	253a8 <__adddf3+0x230>
   2539c:	0040      	lsls	r0, r0, #1
   2539e:	4149      	adcs	r1, r1
   253a0:	bf28      	it	cs
   253a2:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
   253a6:	bd30      	pop	{r4, r5, pc}
   253a8:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
   253ac:	bf3c      	itt	cc
   253ae:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
   253b2:	bd30      	popcc	{r4, r5, pc}
   253b4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   253b8:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
   253bc:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   253c0:	f04f 0000 	mov.w	r0, #0
   253c4:	bd30      	pop	{r4, r5, pc}
   253c6:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   253ca:	bf1a      	itte	ne
   253cc:	4619      	movne	r1, r3
   253ce:	4610      	movne	r0, r2
   253d0:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
   253d4:	bf1c      	itt	ne
   253d6:	460b      	movne	r3, r1
   253d8:	4602      	movne	r2, r0
   253da:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
   253de:	bf06      	itte	eq
   253e0:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
   253e4:	ea91 0f03 	teqeq	r1, r3
   253e8:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
   253ec:	bd30      	pop	{r4, r5, pc}
   253ee:	bf00      	nop

000253f0 <__aeabi_ui2d>:
   253f0:	f090 0f00 	teq	r0, #0
   253f4:	bf04      	itt	eq
   253f6:	2100      	moveq	r1, #0
   253f8:	4770      	bxeq	lr
   253fa:	b530      	push	{r4, r5, lr}
   253fc:	f44f 6480 	mov.w	r4, #1024	; 0x400
   25400:	f104 0432 	add.w	r4, r4, #50	; 0x32
   25404:	f04f 0500 	mov.w	r5, #0
   25408:	f04f 0100 	mov.w	r1, #0
   2540c:	e750      	b.n	252b0 <__adddf3+0x138>
   2540e:	bf00      	nop

00025410 <__aeabi_i2d>:
   25410:	f090 0f00 	teq	r0, #0
   25414:	bf04      	itt	eq
   25416:	2100      	moveq	r1, #0
   25418:	4770      	bxeq	lr
   2541a:	b530      	push	{r4, r5, lr}
   2541c:	f44f 6480 	mov.w	r4, #1024	; 0x400
   25420:	f104 0432 	add.w	r4, r4, #50	; 0x32
   25424:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
   25428:	bf48      	it	mi
   2542a:	4240      	negmi	r0, r0
   2542c:	f04f 0100 	mov.w	r1, #0
   25430:	e73e      	b.n	252b0 <__adddf3+0x138>
   25432:	bf00      	nop

00025434 <__aeabi_f2d>:
   25434:	0042      	lsls	r2, r0, #1
   25436:	ea4f 01e2 	mov.w	r1, r2, asr #3
   2543a:	ea4f 0131 	mov.w	r1, r1, rrx
   2543e:	ea4f 7002 	mov.w	r0, r2, lsl #28
   25442:	bf1f      	itttt	ne
   25444:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
   25448:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
   2544c:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
   25450:	4770      	bxne	lr
   25452:	f092 0f00 	teq	r2, #0
   25456:	bf14      	ite	ne
   25458:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
   2545c:	4770      	bxeq	lr
   2545e:	b530      	push	{r4, r5, lr}
   25460:	f44f 7460 	mov.w	r4, #896	; 0x380
   25464:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   25468:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   2546c:	e720      	b.n	252b0 <__adddf3+0x138>
   2546e:	bf00      	nop

00025470 <__aeabi_ul2d>:
   25470:	ea50 0201 	orrs.w	r2, r0, r1
   25474:	bf08      	it	eq
   25476:	4770      	bxeq	lr
   25478:	b530      	push	{r4, r5, lr}
   2547a:	f04f 0500 	mov.w	r5, #0
   2547e:	e00a      	b.n	25496 <__aeabi_l2d+0x16>

00025480 <__aeabi_l2d>:
   25480:	ea50 0201 	orrs.w	r2, r0, r1
   25484:	bf08      	it	eq
   25486:	4770      	bxeq	lr
   25488:	b530      	push	{r4, r5, lr}
   2548a:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
   2548e:	d502      	bpl.n	25496 <__aeabi_l2d+0x16>
   25490:	4240      	negs	r0, r0
   25492:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   25496:	f44f 6480 	mov.w	r4, #1024	; 0x400
   2549a:	f104 0432 	add.w	r4, r4, #50	; 0x32
   2549e:	ea5f 5c91 	movs.w	ip, r1, lsr #22
   254a2:	f43f aedc 	beq.w	2525e <__adddf3+0xe6>
   254a6:	f04f 0203 	mov.w	r2, #3
   254aa:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   254ae:	bf18      	it	ne
   254b0:	3203      	addne	r2, #3
   254b2:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   254b6:	bf18      	it	ne
   254b8:	3203      	addne	r2, #3
   254ba:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
   254be:	f1c2 0320 	rsb	r3, r2, #32
   254c2:	fa00 fc03 	lsl.w	ip, r0, r3
   254c6:	fa20 f002 	lsr.w	r0, r0, r2
   254ca:	fa01 fe03 	lsl.w	lr, r1, r3
   254ce:	ea40 000e 	orr.w	r0, r0, lr
   254d2:	fa21 f102 	lsr.w	r1, r1, r2
   254d6:	4414      	add	r4, r2
   254d8:	e6c1      	b.n	2525e <__adddf3+0xe6>
   254da:	bf00      	nop

000254dc <__aeabi_dmul>:
   254dc:	b570      	push	{r4, r5, r6, lr}
   254de:	f04f 0cff 	mov.w	ip, #255	; 0xff
   254e2:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
   254e6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
   254ea:	bf1d      	ittte	ne
   254ec:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
   254f0:	ea94 0f0c 	teqne	r4, ip
   254f4:	ea95 0f0c 	teqne	r5, ip
   254f8:	f000 f8de 	bleq	256b8 <__aeabi_dmul+0x1dc>
   254fc:	442c      	add	r4, r5
   254fe:	ea81 0603 	eor.w	r6, r1, r3
   25502:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
   25506:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
   2550a:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
   2550e:	bf18      	it	ne
   25510:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
   25514:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   25518:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
   2551c:	d038      	beq.n	25590 <__aeabi_dmul+0xb4>
   2551e:	fba0 ce02 	umull	ip, lr, r0, r2
   25522:	f04f 0500 	mov.w	r5, #0
   25526:	fbe1 e502 	umlal	lr, r5, r1, r2
   2552a:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
   2552e:	fbe0 e503 	umlal	lr, r5, r0, r3
   25532:	f04f 0600 	mov.w	r6, #0
   25536:	fbe1 5603 	umlal	r5, r6, r1, r3
   2553a:	f09c 0f00 	teq	ip, #0
   2553e:	bf18      	it	ne
   25540:	f04e 0e01 	orrne.w	lr, lr, #1
   25544:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
   25548:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
   2554c:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
   25550:	d204      	bcs.n	2555c <__aeabi_dmul+0x80>
   25552:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
   25556:	416d      	adcs	r5, r5
   25558:	eb46 0606 	adc.w	r6, r6, r6
   2555c:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
   25560:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
   25564:	ea4f 20c5 	mov.w	r0, r5, lsl #11
   25568:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
   2556c:	ea4f 2ece 	mov.w	lr, lr, lsl #11
   25570:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
   25574:	bf88      	it	hi
   25576:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
   2557a:	d81e      	bhi.n	255ba <__aeabi_dmul+0xde>
   2557c:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
   25580:	bf08      	it	eq
   25582:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
   25586:	f150 0000 	adcs.w	r0, r0, #0
   2558a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   2558e:	bd70      	pop	{r4, r5, r6, pc}
   25590:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
   25594:	ea46 0101 	orr.w	r1, r6, r1
   25598:	ea40 0002 	orr.w	r0, r0, r2
   2559c:	ea81 0103 	eor.w	r1, r1, r3
   255a0:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
   255a4:	bfc2      	ittt	gt
   255a6:	ebd4 050c 	rsbsgt	r5, r4, ip
   255aa:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
   255ae:	bd70      	popgt	{r4, r5, r6, pc}
   255b0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   255b4:	f04f 0e00 	mov.w	lr, #0
   255b8:	3c01      	subs	r4, #1
   255ba:	f300 80ab 	bgt.w	25714 <__aeabi_dmul+0x238>
   255be:	f114 0f36 	cmn.w	r4, #54	; 0x36
   255c2:	bfde      	ittt	le
   255c4:	2000      	movle	r0, #0
   255c6:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
   255ca:	bd70      	pople	{r4, r5, r6, pc}
   255cc:	f1c4 0400 	rsb	r4, r4, #0
   255d0:	3c20      	subs	r4, #32
   255d2:	da35      	bge.n	25640 <__aeabi_dmul+0x164>
   255d4:	340c      	adds	r4, #12
   255d6:	dc1b      	bgt.n	25610 <__aeabi_dmul+0x134>
   255d8:	f104 0414 	add.w	r4, r4, #20
   255dc:	f1c4 0520 	rsb	r5, r4, #32
   255e0:	fa00 f305 	lsl.w	r3, r0, r5
   255e4:	fa20 f004 	lsr.w	r0, r0, r4
   255e8:	fa01 f205 	lsl.w	r2, r1, r5
   255ec:	ea40 0002 	orr.w	r0, r0, r2
   255f0:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
   255f4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   255f8:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
   255fc:	fa21 f604 	lsr.w	r6, r1, r4
   25600:	eb42 0106 	adc.w	r1, r2, r6
   25604:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   25608:	bf08      	it	eq
   2560a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   2560e:	bd70      	pop	{r4, r5, r6, pc}
   25610:	f1c4 040c 	rsb	r4, r4, #12
   25614:	f1c4 0520 	rsb	r5, r4, #32
   25618:	fa00 f304 	lsl.w	r3, r0, r4
   2561c:	fa20 f005 	lsr.w	r0, r0, r5
   25620:	fa01 f204 	lsl.w	r2, r1, r4
   25624:	ea40 0002 	orr.w	r0, r0, r2
   25628:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   2562c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
   25630:	f141 0100 	adc.w	r1, r1, #0
   25634:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   25638:	bf08      	it	eq
   2563a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   2563e:	bd70      	pop	{r4, r5, r6, pc}
   25640:	f1c4 0520 	rsb	r5, r4, #32
   25644:	fa00 f205 	lsl.w	r2, r0, r5
   25648:	ea4e 0e02 	orr.w	lr, lr, r2
   2564c:	fa20 f304 	lsr.w	r3, r0, r4
   25650:	fa01 f205 	lsl.w	r2, r1, r5
   25654:	ea43 0302 	orr.w	r3, r3, r2
   25658:	fa21 f004 	lsr.w	r0, r1, r4
   2565c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   25660:	fa21 f204 	lsr.w	r2, r1, r4
   25664:	ea20 0002 	bic.w	r0, r0, r2
   25668:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
   2566c:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   25670:	bf08      	it	eq
   25672:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   25676:	bd70      	pop	{r4, r5, r6, pc}
   25678:	f094 0f00 	teq	r4, #0
   2567c:	d10f      	bne.n	2569e <__aeabi_dmul+0x1c2>
   2567e:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
   25682:	0040      	lsls	r0, r0, #1
   25684:	eb41 0101 	adc.w	r1, r1, r1
   25688:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   2568c:	bf08      	it	eq
   2568e:	3c01      	subeq	r4, #1
   25690:	d0f7      	beq.n	25682 <__aeabi_dmul+0x1a6>
   25692:	ea41 0106 	orr.w	r1, r1, r6
   25696:	f095 0f00 	teq	r5, #0
   2569a:	bf18      	it	ne
   2569c:	4770      	bxne	lr
   2569e:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
   256a2:	0052      	lsls	r2, r2, #1
   256a4:	eb43 0303 	adc.w	r3, r3, r3
   256a8:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
   256ac:	bf08      	it	eq
   256ae:	3d01      	subeq	r5, #1
   256b0:	d0f7      	beq.n	256a2 <__aeabi_dmul+0x1c6>
   256b2:	ea43 0306 	orr.w	r3, r3, r6
   256b6:	4770      	bx	lr
   256b8:	ea94 0f0c 	teq	r4, ip
   256bc:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
   256c0:	bf18      	it	ne
   256c2:	ea95 0f0c 	teqne	r5, ip
   256c6:	d00c      	beq.n	256e2 <__aeabi_dmul+0x206>
   256c8:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   256cc:	bf18      	it	ne
   256ce:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   256d2:	d1d1      	bne.n	25678 <__aeabi_dmul+0x19c>
   256d4:	ea81 0103 	eor.w	r1, r1, r3
   256d8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   256dc:	f04f 0000 	mov.w	r0, #0
   256e0:	bd70      	pop	{r4, r5, r6, pc}
   256e2:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   256e6:	bf06      	itte	eq
   256e8:	4610      	moveq	r0, r2
   256ea:	4619      	moveq	r1, r3
   256ec:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   256f0:	d019      	beq.n	25726 <__aeabi_dmul+0x24a>
   256f2:	ea94 0f0c 	teq	r4, ip
   256f6:	d102      	bne.n	256fe <__aeabi_dmul+0x222>
   256f8:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
   256fc:	d113      	bne.n	25726 <__aeabi_dmul+0x24a>
   256fe:	ea95 0f0c 	teq	r5, ip
   25702:	d105      	bne.n	25710 <__aeabi_dmul+0x234>
   25704:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
   25708:	bf1c      	itt	ne
   2570a:	4610      	movne	r0, r2
   2570c:	4619      	movne	r1, r3
   2570e:	d10a      	bne.n	25726 <__aeabi_dmul+0x24a>
   25710:	ea81 0103 	eor.w	r1, r1, r3
   25714:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   25718:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
   2571c:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   25720:	f04f 0000 	mov.w	r0, #0
   25724:	bd70      	pop	{r4, r5, r6, pc}
   25726:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
   2572a:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
   2572e:	bd70      	pop	{r4, r5, r6, pc}

00025730 <__aeabi_ddiv>:
   25730:	b570      	push	{r4, r5, r6, lr}
   25732:	f04f 0cff 	mov.w	ip, #255	; 0xff
   25736:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
   2573a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
   2573e:	bf1d      	ittte	ne
   25740:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
   25744:	ea94 0f0c 	teqne	r4, ip
   25748:	ea95 0f0c 	teqne	r5, ip
   2574c:	f000 f8a7 	bleq	2589e <__aeabi_ddiv+0x16e>
   25750:	eba4 0405 	sub.w	r4, r4, r5
   25754:	ea81 0e03 	eor.w	lr, r1, r3
   25758:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
   2575c:	ea4f 3101 	mov.w	r1, r1, lsl #12
   25760:	f000 8088 	beq.w	25874 <__aeabi_ddiv+0x144>
   25764:	ea4f 3303 	mov.w	r3, r3, lsl #12
   25768:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
   2576c:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
   25770:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
   25774:	ea4f 2202 	mov.w	r2, r2, lsl #8
   25778:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
   2577c:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
   25780:	ea4f 2600 	mov.w	r6, r0, lsl #8
   25784:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
   25788:	429d      	cmp	r5, r3
   2578a:	bf08      	it	eq
   2578c:	4296      	cmpeq	r6, r2
   2578e:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
   25792:	f504 7440 	add.w	r4, r4, #768	; 0x300
   25796:	d202      	bcs.n	2579e <__aeabi_ddiv+0x6e>
   25798:	085b      	lsrs	r3, r3, #1
   2579a:	ea4f 0232 	mov.w	r2, r2, rrx
   2579e:	1ab6      	subs	r6, r6, r2
   257a0:	eb65 0503 	sbc.w	r5, r5, r3
   257a4:	085b      	lsrs	r3, r3, #1
   257a6:	ea4f 0232 	mov.w	r2, r2, rrx
   257aa:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
   257ae:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
   257b2:	ebb6 0e02 	subs.w	lr, r6, r2
   257b6:	eb75 0e03 	sbcs.w	lr, r5, r3
   257ba:	bf22      	ittt	cs
   257bc:	1ab6      	subcs	r6, r6, r2
   257be:	4675      	movcs	r5, lr
   257c0:	ea40 000c 	orrcs.w	r0, r0, ip
   257c4:	085b      	lsrs	r3, r3, #1
   257c6:	ea4f 0232 	mov.w	r2, r2, rrx
   257ca:	ebb6 0e02 	subs.w	lr, r6, r2
   257ce:	eb75 0e03 	sbcs.w	lr, r5, r3
   257d2:	bf22      	ittt	cs
   257d4:	1ab6      	subcs	r6, r6, r2
   257d6:	4675      	movcs	r5, lr
   257d8:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
   257dc:	085b      	lsrs	r3, r3, #1
   257de:	ea4f 0232 	mov.w	r2, r2, rrx
   257e2:	ebb6 0e02 	subs.w	lr, r6, r2
   257e6:	eb75 0e03 	sbcs.w	lr, r5, r3
   257ea:	bf22      	ittt	cs
   257ec:	1ab6      	subcs	r6, r6, r2
   257ee:	4675      	movcs	r5, lr
   257f0:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
   257f4:	085b      	lsrs	r3, r3, #1
   257f6:	ea4f 0232 	mov.w	r2, r2, rrx
   257fa:	ebb6 0e02 	subs.w	lr, r6, r2
   257fe:	eb75 0e03 	sbcs.w	lr, r5, r3
   25802:	bf22      	ittt	cs
   25804:	1ab6      	subcs	r6, r6, r2
   25806:	4675      	movcs	r5, lr
   25808:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
   2580c:	ea55 0e06 	orrs.w	lr, r5, r6
   25810:	d018      	beq.n	25844 <__aeabi_ddiv+0x114>
   25812:	ea4f 1505 	mov.w	r5, r5, lsl #4
   25816:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
   2581a:	ea4f 1606 	mov.w	r6, r6, lsl #4
   2581e:	ea4f 03c3 	mov.w	r3, r3, lsl #3
   25822:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
   25826:	ea4f 02c2 	mov.w	r2, r2, lsl #3
   2582a:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
   2582e:	d1c0      	bne.n	257b2 <__aeabi_ddiv+0x82>
   25830:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   25834:	d10b      	bne.n	2584e <__aeabi_ddiv+0x11e>
   25836:	ea41 0100 	orr.w	r1, r1, r0
   2583a:	f04f 0000 	mov.w	r0, #0
   2583e:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
   25842:	e7b6      	b.n	257b2 <__aeabi_ddiv+0x82>
   25844:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   25848:	bf04      	itt	eq
   2584a:	4301      	orreq	r1, r0
   2584c:	2000      	moveq	r0, #0
   2584e:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
   25852:	bf88      	it	hi
   25854:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
   25858:	f63f aeaf 	bhi.w	255ba <__aeabi_dmul+0xde>
   2585c:	ebb5 0c03 	subs.w	ip, r5, r3
   25860:	bf04      	itt	eq
   25862:	ebb6 0c02 	subseq.w	ip, r6, r2
   25866:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
   2586a:	f150 0000 	adcs.w	r0, r0, #0
   2586e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   25872:	bd70      	pop	{r4, r5, r6, pc}
   25874:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
   25878:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
   2587c:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
   25880:	bfc2      	ittt	gt
   25882:	ebd4 050c 	rsbsgt	r5, r4, ip
   25886:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
   2588a:	bd70      	popgt	{r4, r5, r6, pc}
   2588c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   25890:	f04f 0e00 	mov.w	lr, #0
   25894:	3c01      	subs	r4, #1
   25896:	e690      	b.n	255ba <__aeabi_dmul+0xde>
   25898:	ea45 0e06 	orr.w	lr, r5, r6
   2589c:	e68d      	b.n	255ba <__aeabi_dmul+0xde>
   2589e:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
   258a2:	ea94 0f0c 	teq	r4, ip
   258a6:	bf08      	it	eq
   258a8:	ea95 0f0c 	teqeq	r5, ip
   258ac:	f43f af3b 	beq.w	25726 <__aeabi_dmul+0x24a>
   258b0:	ea94 0f0c 	teq	r4, ip
   258b4:	d10a      	bne.n	258cc <__aeabi_ddiv+0x19c>
   258b6:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
   258ba:	f47f af34 	bne.w	25726 <__aeabi_dmul+0x24a>
   258be:	ea95 0f0c 	teq	r5, ip
   258c2:	f47f af25 	bne.w	25710 <__aeabi_dmul+0x234>
   258c6:	4610      	mov	r0, r2
   258c8:	4619      	mov	r1, r3
   258ca:	e72c      	b.n	25726 <__aeabi_dmul+0x24a>
   258cc:	ea95 0f0c 	teq	r5, ip
   258d0:	d106      	bne.n	258e0 <__aeabi_ddiv+0x1b0>
   258d2:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
   258d6:	f43f aefd 	beq.w	256d4 <__aeabi_dmul+0x1f8>
   258da:	4610      	mov	r0, r2
   258dc:	4619      	mov	r1, r3
   258de:	e722      	b.n	25726 <__aeabi_dmul+0x24a>
   258e0:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   258e4:	bf18      	it	ne
   258e6:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   258ea:	f47f aec5 	bne.w	25678 <__aeabi_dmul+0x19c>
   258ee:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
   258f2:	f47f af0d 	bne.w	25710 <__aeabi_dmul+0x234>
   258f6:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
   258fa:	f47f aeeb 	bne.w	256d4 <__aeabi_dmul+0x1f8>
   258fe:	e712      	b.n	25726 <__aeabi_dmul+0x24a>

00025900 <__gedf2>:
   25900:	f04f 3cff 	mov.w	ip, #4294967295
   25904:	e006      	b.n	25914 <__cmpdf2+0x4>
   25906:	bf00      	nop

00025908 <__ledf2>:
   25908:	f04f 0c01 	mov.w	ip, #1
   2590c:	e002      	b.n	25914 <__cmpdf2+0x4>
   2590e:	bf00      	nop

00025910 <__cmpdf2>:
   25910:	f04f 0c01 	mov.w	ip, #1
   25914:	f84d cd04 	str.w	ip, [sp, #-4]!
   25918:	ea4f 0c41 	mov.w	ip, r1, lsl #1
   2591c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   25920:	ea4f 0c43 	mov.w	ip, r3, lsl #1
   25924:	bf18      	it	ne
   25926:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
   2592a:	d01b      	beq.n	25964 <__cmpdf2+0x54>
   2592c:	b001      	add	sp, #4
   2592e:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
   25932:	bf0c      	ite	eq
   25934:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
   25938:	ea91 0f03 	teqne	r1, r3
   2593c:	bf02      	ittt	eq
   2593e:	ea90 0f02 	teqeq	r0, r2
   25942:	2000      	moveq	r0, #0
   25944:	4770      	bxeq	lr
   25946:	f110 0f00 	cmn.w	r0, #0
   2594a:	ea91 0f03 	teq	r1, r3
   2594e:	bf58      	it	pl
   25950:	4299      	cmppl	r1, r3
   25952:	bf08      	it	eq
   25954:	4290      	cmpeq	r0, r2
   25956:	bf2c      	ite	cs
   25958:	17d8      	asrcs	r0, r3, #31
   2595a:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
   2595e:	f040 0001 	orr.w	r0, r0, #1
   25962:	4770      	bx	lr
   25964:	ea4f 0c41 	mov.w	ip, r1, lsl #1
   25968:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   2596c:	d102      	bne.n	25974 <__cmpdf2+0x64>
   2596e:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
   25972:	d107      	bne.n	25984 <__cmpdf2+0x74>
   25974:	ea4f 0c43 	mov.w	ip, r3, lsl #1
   25978:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   2597c:	d1d6      	bne.n	2592c <__cmpdf2+0x1c>
   2597e:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
   25982:	d0d3      	beq.n	2592c <__cmpdf2+0x1c>
   25984:	f85d 0b04 	ldr.w	r0, [sp], #4
   25988:	4770      	bx	lr
   2598a:	bf00      	nop

0002598c <__aeabi_cdrcmple>:
   2598c:	4684      	mov	ip, r0
   2598e:	4610      	mov	r0, r2
   25990:	4662      	mov	r2, ip
   25992:	468c      	mov	ip, r1
   25994:	4619      	mov	r1, r3
   25996:	4663      	mov	r3, ip
   25998:	e000      	b.n	2599c <__aeabi_cdcmpeq>
   2599a:	bf00      	nop

0002599c <__aeabi_cdcmpeq>:
   2599c:	b501      	push	{r0, lr}
   2599e:	f7ff ffb7 	bl	25910 <__cmpdf2>
   259a2:	2800      	cmp	r0, #0
   259a4:	bf48      	it	mi
   259a6:	f110 0f00 	cmnmi.w	r0, #0
   259aa:	bd01      	pop	{r0, pc}

000259ac <__aeabi_dcmpeq>:
   259ac:	f84d ed08 	str.w	lr, [sp, #-8]!
   259b0:	f7ff fff4 	bl	2599c <__aeabi_cdcmpeq>
   259b4:	bf0c      	ite	eq
   259b6:	2001      	moveq	r0, #1
   259b8:	2000      	movne	r0, #0
   259ba:	f85d fb08 	ldr.w	pc, [sp], #8
   259be:	bf00      	nop

000259c0 <__aeabi_dcmplt>:
   259c0:	f84d ed08 	str.w	lr, [sp, #-8]!
   259c4:	f7ff ffea 	bl	2599c <__aeabi_cdcmpeq>
   259c8:	bf34      	ite	cc
   259ca:	2001      	movcc	r0, #1
   259cc:	2000      	movcs	r0, #0
   259ce:	f85d fb08 	ldr.w	pc, [sp], #8
   259d2:	bf00      	nop

000259d4 <__aeabi_dcmple>:
   259d4:	f84d ed08 	str.w	lr, [sp, #-8]!
   259d8:	f7ff ffe0 	bl	2599c <__aeabi_cdcmpeq>
   259dc:	bf94      	ite	ls
   259de:	2001      	movls	r0, #1
   259e0:	2000      	movhi	r0, #0
   259e2:	f85d fb08 	ldr.w	pc, [sp], #8
   259e6:	bf00      	nop

000259e8 <__aeabi_dcmpge>:
   259e8:	f84d ed08 	str.w	lr, [sp, #-8]!
   259ec:	f7ff ffce 	bl	2598c <__aeabi_cdrcmple>
   259f0:	bf94      	ite	ls
   259f2:	2001      	movls	r0, #1
   259f4:	2000      	movhi	r0, #0
   259f6:	f85d fb08 	ldr.w	pc, [sp], #8
   259fa:	bf00      	nop

000259fc <__aeabi_dcmpgt>:
   259fc:	f84d ed08 	str.w	lr, [sp, #-8]!
   25a00:	f7ff ffc4 	bl	2598c <__aeabi_cdrcmple>
   25a04:	bf34      	ite	cc
   25a06:	2001      	movcc	r0, #1
   25a08:	2000      	movcs	r0, #0
   25a0a:	f85d fb08 	ldr.w	pc, [sp], #8
   25a0e:	bf00      	nop

00025a10 <__aeabi_d2iz>:
   25a10:	ea4f 0241 	mov.w	r2, r1, lsl #1
   25a14:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
   25a18:	d215      	bcs.n	25a46 <__aeabi_d2iz+0x36>
   25a1a:	d511      	bpl.n	25a40 <__aeabi_d2iz+0x30>
   25a1c:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
   25a20:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
   25a24:	d912      	bls.n	25a4c <__aeabi_d2iz+0x3c>
   25a26:	ea4f 23c1 	mov.w	r3, r1, lsl #11
   25a2a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
   25a2e:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
   25a32:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
   25a36:	fa23 f002 	lsr.w	r0, r3, r2
   25a3a:	bf18      	it	ne
   25a3c:	4240      	negne	r0, r0
   25a3e:	4770      	bx	lr
   25a40:	f04f 0000 	mov.w	r0, #0
   25a44:	4770      	bx	lr
   25a46:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
   25a4a:	d105      	bne.n	25a58 <__aeabi_d2iz+0x48>
   25a4c:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
   25a50:	bf08      	it	eq
   25a52:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
   25a56:	4770      	bx	lr
   25a58:	f04f 0000 	mov.w	r0, #0
   25a5c:	4770      	bx	lr
   25a5e:	bf00      	nop

00025a60 <__aeabi_d2uiz>:
   25a60:	004a      	lsls	r2, r1, #1
   25a62:	d211      	bcs.n	25a88 <__aeabi_d2uiz+0x28>
   25a64:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
   25a68:	d211      	bcs.n	25a8e <__aeabi_d2uiz+0x2e>
   25a6a:	d50d      	bpl.n	25a88 <__aeabi_d2uiz+0x28>
   25a6c:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
   25a70:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
   25a74:	d40e      	bmi.n	25a94 <__aeabi_d2uiz+0x34>
   25a76:	ea4f 23c1 	mov.w	r3, r1, lsl #11
   25a7a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
   25a7e:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
   25a82:	fa23 f002 	lsr.w	r0, r3, r2
   25a86:	4770      	bx	lr
   25a88:	f04f 0000 	mov.w	r0, #0
   25a8c:	4770      	bx	lr
   25a8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
   25a92:	d102      	bne.n	25a9a <__aeabi_d2uiz+0x3a>
   25a94:	f04f 30ff 	mov.w	r0, #4294967295
   25a98:	4770      	bx	lr
   25a9a:	f04f 0000 	mov.w	r0, #0
   25a9e:	4770      	bx	lr

00025aa0 <__aeabi_d2f>:
   25aa0:	ea4f 0241 	mov.w	r2, r1, lsl #1
   25aa4:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
   25aa8:	bf24      	itt	cs
   25aaa:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
   25aae:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
   25ab2:	d90d      	bls.n	25ad0 <__aeabi_d2f+0x30>
   25ab4:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
   25ab8:	ea4f 02c0 	mov.w	r2, r0, lsl #3
   25abc:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
   25ac0:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
   25ac4:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
   25ac8:	bf08      	it	eq
   25aca:	f020 0001 	biceq.w	r0, r0, #1
   25ace:	4770      	bx	lr
   25ad0:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
   25ad4:	d121      	bne.n	25b1a <__aeabi_d2f+0x7a>
   25ad6:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
   25ada:	bfbc      	itt	lt
   25adc:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
   25ae0:	4770      	bxlt	lr
   25ae2:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   25ae6:	ea4f 5252 	mov.w	r2, r2, lsr #21
   25aea:	f1c2 0218 	rsb	r2, r2, #24
   25aee:	f1c2 0c20 	rsb	ip, r2, #32
   25af2:	fa10 f30c 	lsls.w	r3, r0, ip
   25af6:	fa20 f002 	lsr.w	r0, r0, r2
   25afa:	bf18      	it	ne
   25afc:	f040 0001 	orrne.w	r0, r0, #1
   25b00:	ea4f 23c1 	mov.w	r3, r1, lsl #11
   25b04:	ea4f 23d3 	mov.w	r3, r3, lsr #11
   25b08:	fa03 fc0c 	lsl.w	ip, r3, ip
   25b0c:	ea40 000c 	orr.w	r0, r0, ip
   25b10:	fa23 f302 	lsr.w	r3, r3, r2
   25b14:	ea4f 0343 	mov.w	r3, r3, lsl #1
   25b18:	e7cc      	b.n	25ab4 <__aeabi_d2f+0x14>
   25b1a:	ea7f 5362 	mvns.w	r3, r2, asr #21
   25b1e:	d107      	bne.n	25b30 <__aeabi_d2f+0x90>
   25b20:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
   25b24:	bf1e      	ittt	ne
   25b26:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
   25b2a:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
   25b2e:	4770      	bxne	lr
   25b30:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
   25b34:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
   25b38:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
   25b3c:	4770      	bx	lr
   25b3e:	bf00      	nop

00025b40 <__aeabi_frsub>:
   25b40:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
   25b44:	e002      	b.n	25b4c <__addsf3>
   25b46:	bf00      	nop

00025b48 <__aeabi_fsub>:
   25b48:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

00025b4c <__addsf3>:
   25b4c:	0042      	lsls	r2, r0, #1
   25b4e:	bf1f      	itttt	ne
   25b50:	ea5f 0341 	movsne.w	r3, r1, lsl #1
   25b54:	ea92 0f03 	teqne	r2, r3
   25b58:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
   25b5c:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
   25b60:	d06a      	beq.n	25c38 <__addsf3+0xec>
   25b62:	ea4f 6212 	mov.w	r2, r2, lsr #24
   25b66:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
   25b6a:	bfc1      	itttt	gt
   25b6c:	18d2      	addgt	r2, r2, r3
   25b6e:	4041      	eorgt	r1, r0
   25b70:	4048      	eorgt	r0, r1
   25b72:	4041      	eorgt	r1, r0
   25b74:	bfb8      	it	lt
   25b76:	425b      	neglt	r3, r3
   25b78:	2b19      	cmp	r3, #25
   25b7a:	bf88      	it	hi
   25b7c:	4770      	bxhi	lr
   25b7e:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
   25b82:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
   25b86:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
   25b8a:	bf18      	it	ne
   25b8c:	4240      	negne	r0, r0
   25b8e:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
   25b92:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
   25b96:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
   25b9a:	bf18      	it	ne
   25b9c:	4249      	negne	r1, r1
   25b9e:	ea92 0f03 	teq	r2, r3
   25ba2:	d03f      	beq.n	25c24 <__addsf3+0xd8>
   25ba4:	f1a2 0201 	sub.w	r2, r2, #1
   25ba8:	fa41 fc03 	asr.w	ip, r1, r3
   25bac:	eb10 000c 	adds.w	r0, r0, ip
   25bb0:	f1c3 0320 	rsb	r3, r3, #32
   25bb4:	fa01 f103 	lsl.w	r1, r1, r3
   25bb8:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
   25bbc:	d502      	bpl.n	25bc4 <__addsf3+0x78>
   25bbe:	4249      	negs	r1, r1
   25bc0:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
   25bc4:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
   25bc8:	d313      	bcc.n	25bf2 <__addsf3+0xa6>
   25bca:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
   25bce:	d306      	bcc.n	25bde <__addsf3+0x92>
   25bd0:	0840      	lsrs	r0, r0, #1
   25bd2:	ea4f 0131 	mov.w	r1, r1, rrx
   25bd6:	f102 0201 	add.w	r2, r2, #1
   25bda:	2afe      	cmp	r2, #254	; 0xfe
   25bdc:	d251      	bcs.n	25c82 <__addsf3+0x136>
   25bde:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
   25be2:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
   25be6:	bf08      	it	eq
   25be8:	f020 0001 	biceq.w	r0, r0, #1
   25bec:	ea40 0003 	orr.w	r0, r0, r3
   25bf0:	4770      	bx	lr
   25bf2:	0049      	lsls	r1, r1, #1
   25bf4:	eb40 0000 	adc.w	r0, r0, r0
   25bf8:	f410 0f00 	tst.w	r0, #8388608	; 0x800000
   25bfc:	f1a2 0201 	sub.w	r2, r2, #1
   25c00:	d1ed      	bne.n	25bde <__addsf3+0x92>
   25c02:	fab0 fc80 	clz	ip, r0
   25c06:	f1ac 0c08 	sub.w	ip, ip, #8
   25c0a:	ebb2 020c 	subs.w	r2, r2, ip
   25c0e:	fa00 f00c 	lsl.w	r0, r0, ip
   25c12:	bfaa      	itet	ge
   25c14:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
   25c18:	4252      	neglt	r2, r2
   25c1a:	4318      	orrge	r0, r3
   25c1c:	bfbc      	itt	lt
   25c1e:	40d0      	lsrlt	r0, r2
   25c20:	4318      	orrlt	r0, r3
   25c22:	4770      	bx	lr
   25c24:	f092 0f00 	teq	r2, #0
   25c28:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
   25c2c:	bf06      	itte	eq
   25c2e:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
   25c32:	3201      	addeq	r2, #1
   25c34:	3b01      	subne	r3, #1
   25c36:	e7b5      	b.n	25ba4 <__addsf3+0x58>
   25c38:	ea4f 0341 	mov.w	r3, r1, lsl #1
   25c3c:	ea7f 6c22 	mvns.w	ip, r2, asr #24
   25c40:	bf18      	it	ne
   25c42:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
   25c46:	d021      	beq.n	25c8c <__addsf3+0x140>
   25c48:	ea92 0f03 	teq	r2, r3
   25c4c:	d004      	beq.n	25c58 <__addsf3+0x10c>
   25c4e:	f092 0f00 	teq	r2, #0
   25c52:	bf08      	it	eq
   25c54:	4608      	moveq	r0, r1
   25c56:	4770      	bx	lr
   25c58:	ea90 0f01 	teq	r0, r1
   25c5c:	bf1c      	itt	ne
   25c5e:	2000      	movne	r0, #0
   25c60:	4770      	bxne	lr
   25c62:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
   25c66:	d104      	bne.n	25c72 <__addsf3+0x126>
   25c68:	0040      	lsls	r0, r0, #1
   25c6a:	bf28      	it	cs
   25c6c:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
   25c70:	4770      	bx	lr
   25c72:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
   25c76:	bf3c      	itt	cc
   25c78:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
   25c7c:	4770      	bxcc	lr
   25c7e:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
   25c82:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
   25c86:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
   25c8a:	4770      	bx	lr
   25c8c:	ea7f 6222 	mvns.w	r2, r2, asr #24
   25c90:	bf16      	itet	ne
   25c92:	4608      	movne	r0, r1
   25c94:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
   25c98:	4601      	movne	r1, r0
   25c9a:	0242      	lsls	r2, r0, #9
   25c9c:	bf06      	itte	eq
   25c9e:	ea5f 2341 	movseq.w	r3, r1, lsl #9
   25ca2:	ea90 0f01 	teqeq	r0, r1
   25ca6:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
   25caa:	4770      	bx	lr

00025cac <__aeabi_ui2f>:
   25cac:	f04f 0300 	mov.w	r3, #0
   25cb0:	e004      	b.n	25cbc <__aeabi_i2f+0x8>
   25cb2:	bf00      	nop

00025cb4 <__aeabi_i2f>:
   25cb4:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
   25cb8:	bf48      	it	mi
   25cba:	4240      	negmi	r0, r0
   25cbc:	ea5f 0c00 	movs.w	ip, r0
   25cc0:	bf08      	it	eq
   25cc2:	4770      	bxeq	lr
   25cc4:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
   25cc8:	4601      	mov	r1, r0
   25cca:	f04f 0000 	mov.w	r0, #0
   25cce:	e01c      	b.n	25d0a <__aeabi_l2f+0x2a>

00025cd0 <__aeabi_ul2f>:
   25cd0:	ea50 0201 	orrs.w	r2, r0, r1
   25cd4:	bf08      	it	eq
   25cd6:	4770      	bxeq	lr
   25cd8:	f04f 0300 	mov.w	r3, #0
   25cdc:	e00a      	b.n	25cf4 <__aeabi_l2f+0x14>
   25cde:	bf00      	nop

00025ce0 <__aeabi_l2f>:
   25ce0:	ea50 0201 	orrs.w	r2, r0, r1
   25ce4:	bf08      	it	eq
   25ce6:	4770      	bxeq	lr
   25ce8:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
   25cec:	d502      	bpl.n	25cf4 <__aeabi_l2f+0x14>
   25cee:	4240      	negs	r0, r0
   25cf0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   25cf4:	ea5f 0c01 	movs.w	ip, r1
   25cf8:	bf02      	ittt	eq
   25cfa:	4684      	moveq	ip, r0
   25cfc:	4601      	moveq	r1, r0
   25cfe:	2000      	moveq	r0, #0
   25d00:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
   25d04:	bf08      	it	eq
   25d06:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
   25d0a:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
   25d0e:	fabc f28c 	clz	r2, ip
   25d12:	3a08      	subs	r2, #8
   25d14:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
   25d18:	db10      	blt.n	25d3c <__aeabi_l2f+0x5c>
   25d1a:	fa01 fc02 	lsl.w	ip, r1, r2
   25d1e:	4463      	add	r3, ip
   25d20:	fa00 fc02 	lsl.w	ip, r0, r2
   25d24:	f1c2 0220 	rsb	r2, r2, #32
   25d28:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
   25d2c:	fa20 f202 	lsr.w	r2, r0, r2
   25d30:	eb43 0002 	adc.w	r0, r3, r2
   25d34:	bf08      	it	eq
   25d36:	f020 0001 	biceq.w	r0, r0, #1
   25d3a:	4770      	bx	lr
   25d3c:	f102 0220 	add.w	r2, r2, #32
   25d40:	fa01 fc02 	lsl.w	ip, r1, r2
   25d44:	f1c2 0220 	rsb	r2, r2, #32
   25d48:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
   25d4c:	fa21 f202 	lsr.w	r2, r1, r2
   25d50:	eb43 0002 	adc.w	r0, r3, r2
   25d54:	bf08      	it	eq
   25d56:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
   25d5a:	4770      	bx	lr

00025d5c <__aeabi_ldivmod>:
   25d5c:	b97b      	cbnz	r3, 25d7e <__aeabi_ldivmod+0x22>
   25d5e:	b972      	cbnz	r2, 25d7e <__aeabi_ldivmod+0x22>
   25d60:	2900      	cmp	r1, #0
   25d62:	bfbe      	ittt	lt
   25d64:	2000      	movlt	r0, #0
   25d66:	f04f 4100 	movlt.w	r1, #2147483648	; 0x80000000
   25d6a:	e006      	blt.n	25d7a <__aeabi_ldivmod+0x1e>
   25d6c:	bf08      	it	eq
   25d6e:	2800      	cmpeq	r0, #0
   25d70:	bf1c      	itt	ne
   25d72:	f06f 4100 	mvnne.w	r1, #2147483648	; 0x80000000
   25d76:	f04f 30ff 	movne.w	r0, #4294967295
   25d7a:	f001 b979 	b.w	27070 <__aeabi_idiv0>
   25d7e:	f1ad 0c08 	sub.w	ip, sp, #8
   25d82:	e96d ce04 	strd	ip, lr, [sp, #-16]!
   25d86:	2900      	cmp	r1, #0
   25d88:	db09      	blt.n	25d9e <__aeabi_ldivmod+0x42>
   25d8a:	2b00      	cmp	r3, #0
   25d8c:	db1a      	blt.n	25dc4 <__aeabi_ldivmod+0x68>
   25d8e:	f000 f885 	bl	25e9c <__udivmoddi4>
   25d92:	f8dd e004 	ldr.w	lr, [sp, #4]
   25d96:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
   25d9a:	b004      	add	sp, #16
   25d9c:	4770      	bx	lr
   25d9e:	4240      	negs	r0, r0
   25da0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   25da4:	2b00      	cmp	r3, #0
   25da6:	db1b      	blt.n	25de0 <__aeabi_ldivmod+0x84>
   25da8:	f000 f878 	bl	25e9c <__udivmoddi4>
   25dac:	f8dd e004 	ldr.w	lr, [sp, #4]
   25db0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
   25db4:	b004      	add	sp, #16
   25db6:	4240      	negs	r0, r0
   25db8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   25dbc:	4252      	negs	r2, r2
   25dbe:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
   25dc2:	4770      	bx	lr
   25dc4:	4252      	negs	r2, r2
   25dc6:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
   25dca:	f000 f867 	bl	25e9c <__udivmoddi4>
   25dce:	f8dd e004 	ldr.w	lr, [sp, #4]
   25dd2:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
   25dd6:	b004      	add	sp, #16
   25dd8:	4240      	negs	r0, r0
   25dda:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   25dde:	4770      	bx	lr
   25de0:	4252      	negs	r2, r2
   25de2:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
   25de6:	f000 f859 	bl	25e9c <__udivmoddi4>
   25dea:	f8dd e004 	ldr.w	lr, [sp, #4]
   25dee:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
   25df2:	b004      	add	sp, #16
   25df4:	4252      	negs	r2, r2
   25df6:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
   25dfa:	4770      	bx	lr

00025dfc <__aeabi_uldivmod>:
   25dfc:	b953      	cbnz	r3, 25e14 <__aeabi_uldivmod+0x18>
   25dfe:	b94a      	cbnz	r2, 25e14 <__aeabi_uldivmod+0x18>
   25e00:	2900      	cmp	r1, #0
   25e02:	bf08      	it	eq
   25e04:	2800      	cmpeq	r0, #0
   25e06:	bf1c      	itt	ne
   25e08:	f04f 31ff 	movne.w	r1, #4294967295
   25e0c:	f04f 30ff 	movne.w	r0, #4294967295
   25e10:	f001 b92e 	b.w	27070 <__aeabi_idiv0>
   25e14:	f1ad 0c08 	sub.w	ip, sp, #8
   25e18:	e96d ce04 	strd	ip, lr, [sp, #-16]!
   25e1c:	f000 f83e 	bl	25e9c <__udivmoddi4>
   25e20:	f8dd e004 	ldr.w	lr, [sp, #4]
   25e24:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
   25e28:	b004      	add	sp, #16
   25e2a:	4770      	bx	lr

00025e2c <__aeabi_f2lz>:
   25e2c:	ee07 0a90 	vmov	s15, r0
   25e30:	eef5 7ac0 	vcmpe.f32	s15, #0.0
   25e34:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   25e38:	d401      	bmi.n	25e3e <__aeabi_f2lz+0x12>
   25e3a:	f000 b809 	b.w	25e50 <__aeabi_f2ulz>
   25e3e:	b508      	push	{r3, lr}
   25e40:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
   25e44:	f000 f804 	bl	25e50 <__aeabi_f2ulz>
   25e48:	4240      	negs	r0, r0
   25e4a:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   25e4e:	bd08      	pop	{r3, pc}

00025e50 <__aeabi_f2ulz>:
   25e50:	b5d0      	push	{r4, r6, r7, lr}
   25e52:	f7ff faef 	bl	25434 <__aeabi_f2d>
   25e56:	2200      	movs	r2, #0
   25e58:	4b0e      	ldr	r3, [pc, #56]	; (25e94 <__aeabi_f2ulz+0x44>)
   25e5a:	4606      	mov	r6, r0
   25e5c:	460f      	mov	r7, r1
   25e5e:	f7ff fb3d 	bl	254dc <__aeabi_dmul>
   25e62:	f7ff fdfd 	bl	25a60 <__aeabi_d2uiz>
   25e66:	4604      	mov	r4, r0
   25e68:	f7ff fac2 	bl	253f0 <__aeabi_ui2d>
   25e6c:	2200      	movs	r2, #0
   25e6e:	4b0a      	ldr	r3, [pc, #40]	; (25e98 <__aeabi_f2ulz+0x48>)
   25e70:	f7ff fb34 	bl	254dc <__aeabi_dmul>
   25e74:	4602      	mov	r2, r0
   25e76:	460b      	mov	r3, r1
   25e78:	4630      	mov	r0, r6
   25e7a:	4639      	mov	r1, r7
   25e7c:	f7ff f97a 	bl	25174 <__aeabi_dsub>
   25e80:	f7ff fdee 	bl	25a60 <__aeabi_d2uiz>
   25e84:	4623      	mov	r3, r4
   25e86:	2200      	movs	r2, #0
   25e88:	ea42 0200 	orr.w	r2, r2, r0
   25e8c:	4610      	mov	r0, r2
   25e8e:	4619      	mov	r1, r3
   25e90:	bdd0      	pop	{r4, r6, r7, pc}
   25e92:	bf00      	nop
   25e94:	3df00000 	.word	0x3df00000
   25e98:	41f00000 	.word	0x41f00000

00025e9c <__udivmoddi4>:
   25e9c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   25ea0:	468c      	mov	ip, r1
   25ea2:	460d      	mov	r5, r1
   25ea4:	4604      	mov	r4, r0
   25ea6:	9e08      	ldr	r6, [sp, #32]
   25ea8:	2b00      	cmp	r3, #0
   25eaa:	d151      	bne.n	25f50 <__udivmoddi4+0xb4>
   25eac:	428a      	cmp	r2, r1
   25eae:	4617      	mov	r7, r2
   25eb0:	d96d      	bls.n	25f8e <__udivmoddi4+0xf2>
   25eb2:	fab2 fe82 	clz	lr, r2
   25eb6:	f1be 0f00 	cmp.w	lr, #0
   25eba:	d00b      	beq.n	25ed4 <__udivmoddi4+0x38>
   25ebc:	f1ce 0c20 	rsb	ip, lr, #32
   25ec0:	fa01 f50e 	lsl.w	r5, r1, lr
   25ec4:	fa20 fc0c 	lsr.w	ip, r0, ip
   25ec8:	fa02 f70e 	lsl.w	r7, r2, lr
   25ecc:	ea4c 0c05 	orr.w	ip, ip, r5
   25ed0:	fa00 f40e 	lsl.w	r4, r0, lr
   25ed4:	ea4f 4a17 	mov.w	sl, r7, lsr #16
   25ed8:	0c25      	lsrs	r5, r4, #16
   25eda:	fbbc f8fa 	udiv	r8, ip, sl
   25ede:	fa1f f987 	uxth.w	r9, r7
   25ee2:	fb0a cc18 	mls	ip, sl, r8, ip
   25ee6:	ea45 450c 	orr.w	r5, r5, ip, lsl #16
   25eea:	fb08 f309 	mul.w	r3, r8, r9
   25eee:	42ab      	cmp	r3, r5
   25ef0:	d90a      	bls.n	25f08 <__udivmoddi4+0x6c>
   25ef2:	19ed      	adds	r5, r5, r7
   25ef4:	f108 32ff 	add.w	r2, r8, #4294967295
   25ef8:	f080 8123 	bcs.w	26142 <__udivmoddi4+0x2a6>
   25efc:	42ab      	cmp	r3, r5
   25efe:	f240 8120 	bls.w	26142 <__udivmoddi4+0x2a6>
   25f02:	f1a8 0802 	sub.w	r8, r8, #2
   25f06:	443d      	add	r5, r7
   25f08:	1aed      	subs	r5, r5, r3
   25f0a:	b2a4      	uxth	r4, r4
   25f0c:	fbb5 f0fa 	udiv	r0, r5, sl
   25f10:	fb0a 5510 	mls	r5, sl, r0, r5
   25f14:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
   25f18:	fb00 f909 	mul.w	r9, r0, r9
   25f1c:	45a1      	cmp	r9, r4
   25f1e:	d909      	bls.n	25f34 <__udivmoddi4+0x98>
   25f20:	19e4      	adds	r4, r4, r7
   25f22:	f100 33ff 	add.w	r3, r0, #4294967295
   25f26:	f080 810a 	bcs.w	2613e <__udivmoddi4+0x2a2>
   25f2a:	45a1      	cmp	r9, r4
   25f2c:	f240 8107 	bls.w	2613e <__udivmoddi4+0x2a2>
   25f30:	3802      	subs	r0, #2
   25f32:	443c      	add	r4, r7
   25f34:	eba4 0409 	sub.w	r4, r4, r9
   25f38:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
   25f3c:	2100      	movs	r1, #0
   25f3e:	2e00      	cmp	r6, #0
   25f40:	d061      	beq.n	26006 <__udivmoddi4+0x16a>
   25f42:	fa24 f40e 	lsr.w	r4, r4, lr
   25f46:	2300      	movs	r3, #0
   25f48:	6034      	str	r4, [r6, #0]
   25f4a:	6073      	str	r3, [r6, #4]
   25f4c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   25f50:	428b      	cmp	r3, r1
   25f52:	d907      	bls.n	25f64 <__udivmoddi4+0xc8>
   25f54:	2e00      	cmp	r6, #0
   25f56:	d054      	beq.n	26002 <__udivmoddi4+0x166>
   25f58:	2100      	movs	r1, #0
   25f5a:	e886 0021 	stmia.w	r6, {r0, r5}
   25f5e:	4608      	mov	r0, r1
   25f60:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   25f64:	fab3 f183 	clz	r1, r3
   25f68:	2900      	cmp	r1, #0
   25f6a:	f040 808e 	bne.w	2608a <__udivmoddi4+0x1ee>
   25f6e:	42ab      	cmp	r3, r5
   25f70:	d302      	bcc.n	25f78 <__udivmoddi4+0xdc>
   25f72:	4282      	cmp	r2, r0
   25f74:	f200 80fa 	bhi.w	2616c <__udivmoddi4+0x2d0>
   25f78:	1a84      	subs	r4, r0, r2
   25f7a:	eb65 0503 	sbc.w	r5, r5, r3
   25f7e:	2001      	movs	r0, #1
   25f80:	46ac      	mov	ip, r5
   25f82:	2e00      	cmp	r6, #0
   25f84:	d03f      	beq.n	26006 <__udivmoddi4+0x16a>
   25f86:	e886 1010 	stmia.w	r6, {r4, ip}
   25f8a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   25f8e:	b912      	cbnz	r2, 25f96 <__udivmoddi4+0xfa>
   25f90:	2701      	movs	r7, #1
   25f92:	fbb7 f7f2 	udiv	r7, r7, r2
   25f96:	fab7 fe87 	clz	lr, r7
   25f9a:	f1be 0f00 	cmp.w	lr, #0
   25f9e:	d134      	bne.n	2600a <__udivmoddi4+0x16e>
   25fa0:	1beb      	subs	r3, r5, r7
   25fa2:	0c3a      	lsrs	r2, r7, #16
   25fa4:	fa1f fc87 	uxth.w	ip, r7
   25fa8:	2101      	movs	r1, #1
   25faa:	fbb3 f8f2 	udiv	r8, r3, r2
   25fae:	0c25      	lsrs	r5, r4, #16
   25fb0:	fb02 3318 	mls	r3, r2, r8, r3
   25fb4:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
   25fb8:	fb0c f308 	mul.w	r3, ip, r8
   25fbc:	42ab      	cmp	r3, r5
   25fbe:	d907      	bls.n	25fd0 <__udivmoddi4+0x134>
   25fc0:	19ed      	adds	r5, r5, r7
   25fc2:	f108 30ff 	add.w	r0, r8, #4294967295
   25fc6:	d202      	bcs.n	25fce <__udivmoddi4+0x132>
   25fc8:	42ab      	cmp	r3, r5
   25fca:	f200 80d1 	bhi.w	26170 <__udivmoddi4+0x2d4>
   25fce:	4680      	mov	r8, r0
   25fd0:	1aed      	subs	r5, r5, r3
   25fd2:	b2a3      	uxth	r3, r4
   25fd4:	fbb5 f0f2 	udiv	r0, r5, r2
   25fd8:	fb02 5510 	mls	r5, r2, r0, r5
   25fdc:	ea43 4405 	orr.w	r4, r3, r5, lsl #16
   25fe0:	fb0c fc00 	mul.w	ip, ip, r0
   25fe4:	45a4      	cmp	ip, r4
   25fe6:	d907      	bls.n	25ff8 <__udivmoddi4+0x15c>
   25fe8:	19e4      	adds	r4, r4, r7
   25fea:	f100 33ff 	add.w	r3, r0, #4294967295
   25fee:	d202      	bcs.n	25ff6 <__udivmoddi4+0x15a>
   25ff0:	45a4      	cmp	ip, r4
   25ff2:	f200 80b8 	bhi.w	26166 <__udivmoddi4+0x2ca>
   25ff6:	4618      	mov	r0, r3
   25ff8:	eba4 040c 	sub.w	r4, r4, ip
   25ffc:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
   26000:	e79d      	b.n	25f3e <__udivmoddi4+0xa2>
   26002:	4631      	mov	r1, r6
   26004:	4630      	mov	r0, r6
   26006:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   2600a:	f1ce 0420 	rsb	r4, lr, #32
   2600e:	fa05 f30e 	lsl.w	r3, r5, lr
   26012:	fa07 f70e 	lsl.w	r7, r7, lr
   26016:	fa20 f804 	lsr.w	r8, r0, r4
   2601a:	0c3a      	lsrs	r2, r7, #16
   2601c:	fa25 f404 	lsr.w	r4, r5, r4
   26020:	ea48 0803 	orr.w	r8, r8, r3
   26024:	fbb4 f1f2 	udiv	r1, r4, r2
   26028:	ea4f 4518 	mov.w	r5, r8, lsr #16
   2602c:	fb02 4411 	mls	r4, r2, r1, r4
   26030:	fa1f fc87 	uxth.w	ip, r7
   26034:	ea45 4504 	orr.w	r5, r5, r4, lsl #16
   26038:	fb01 f30c 	mul.w	r3, r1, ip
   2603c:	42ab      	cmp	r3, r5
   2603e:	fa00 f40e 	lsl.w	r4, r0, lr
   26042:	d909      	bls.n	26058 <__udivmoddi4+0x1bc>
   26044:	19ed      	adds	r5, r5, r7
   26046:	f101 30ff 	add.w	r0, r1, #4294967295
   2604a:	f080 808a 	bcs.w	26162 <__udivmoddi4+0x2c6>
   2604e:	42ab      	cmp	r3, r5
   26050:	f240 8087 	bls.w	26162 <__udivmoddi4+0x2c6>
   26054:	3902      	subs	r1, #2
   26056:	443d      	add	r5, r7
   26058:	1aeb      	subs	r3, r5, r3
   2605a:	fa1f f588 	uxth.w	r5, r8
   2605e:	fbb3 f0f2 	udiv	r0, r3, r2
   26062:	fb02 3310 	mls	r3, r2, r0, r3
   26066:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
   2606a:	fb00 f30c 	mul.w	r3, r0, ip
   2606e:	42ab      	cmp	r3, r5
   26070:	d907      	bls.n	26082 <__udivmoddi4+0x1e6>
   26072:	19ed      	adds	r5, r5, r7
   26074:	f100 38ff 	add.w	r8, r0, #4294967295
   26078:	d26f      	bcs.n	2615a <__udivmoddi4+0x2be>
   2607a:	42ab      	cmp	r3, r5
   2607c:	d96d      	bls.n	2615a <__udivmoddi4+0x2be>
   2607e:	3802      	subs	r0, #2
   26080:	443d      	add	r5, r7
   26082:	1aeb      	subs	r3, r5, r3
   26084:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
   26088:	e78f      	b.n	25faa <__udivmoddi4+0x10e>
   2608a:	f1c1 0720 	rsb	r7, r1, #32
   2608e:	fa22 f807 	lsr.w	r8, r2, r7
   26092:	408b      	lsls	r3, r1
   26094:	fa05 f401 	lsl.w	r4, r5, r1
   26098:	ea48 0303 	orr.w	r3, r8, r3
   2609c:	fa20 fe07 	lsr.w	lr, r0, r7
   260a0:	ea4f 4c13 	mov.w	ip, r3, lsr #16
   260a4:	40fd      	lsrs	r5, r7
   260a6:	ea4e 0e04 	orr.w	lr, lr, r4
   260aa:	fbb5 f9fc 	udiv	r9, r5, ip
   260ae:	ea4f 441e 	mov.w	r4, lr, lsr #16
   260b2:	fb0c 5519 	mls	r5, ip, r9, r5
   260b6:	fa1f f883 	uxth.w	r8, r3
   260ba:	ea44 4505 	orr.w	r5, r4, r5, lsl #16
   260be:	fb09 f408 	mul.w	r4, r9, r8
   260c2:	42ac      	cmp	r4, r5
   260c4:	fa02 f201 	lsl.w	r2, r2, r1
   260c8:	fa00 fa01 	lsl.w	sl, r0, r1
   260cc:	d908      	bls.n	260e0 <__udivmoddi4+0x244>
   260ce:	18ed      	adds	r5, r5, r3
   260d0:	f109 30ff 	add.w	r0, r9, #4294967295
   260d4:	d243      	bcs.n	2615e <__udivmoddi4+0x2c2>
   260d6:	42ac      	cmp	r4, r5
   260d8:	d941      	bls.n	2615e <__udivmoddi4+0x2c2>
   260da:	f1a9 0902 	sub.w	r9, r9, #2
   260de:	441d      	add	r5, r3
   260e0:	1b2d      	subs	r5, r5, r4
   260e2:	fa1f fe8e 	uxth.w	lr, lr
   260e6:	fbb5 f0fc 	udiv	r0, r5, ip
   260ea:	fb0c 5510 	mls	r5, ip, r0, r5
   260ee:	ea4e 4405 	orr.w	r4, lr, r5, lsl #16
   260f2:	fb00 f808 	mul.w	r8, r0, r8
   260f6:	45a0      	cmp	r8, r4
   260f8:	d907      	bls.n	2610a <__udivmoddi4+0x26e>
   260fa:	18e4      	adds	r4, r4, r3
   260fc:	f100 35ff 	add.w	r5, r0, #4294967295
   26100:	d229      	bcs.n	26156 <__udivmoddi4+0x2ba>
   26102:	45a0      	cmp	r8, r4
   26104:	d927      	bls.n	26156 <__udivmoddi4+0x2ba>
   26106:	3802      	subs	r0, #2
   26108:	441c      	add	r4, r3
   2610a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
   2610e:	eba4 0408 	sub.w	r4, r4, r8
   26112:	fba0 8902 	umull	r8, r9, r0, r2
   26116:	454c      	cmp	r4, r9
   26118:	46c6      	mov	lr, r8
   2611a:	464d      	mov	r5, r9
   2611c:	d315      	bcc.n	2614a <__udivmoddi4+0x2ae>
   2611e:	d012      	beq.n	26146 <__udivmoddi4+0x2aa>
   26120:	b156      	cbz	r6, 26138 <__udivmoddi4+0x29c>
   26122:	ebba 030e 	subs.w	r3, sl, lr
   26126:	eb64 0405 	sbc.w	r4, r4, r5
   2612a:	fa04 f707 	lsl.w	r7, r4, r7
   2612e:	40cb      	lsrs	r3, r1
   26130:	431f      	orrs	r7, r3
   26132:	40cc      	lsrs	r4, r1
   26134:	6037      	str	r7, [r6, #0]
   26136:	6074      	str	r4, [r6, #4]
   26138:	2100      	movs	r1, #0
   2613a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   2613e:	4618      	mov	r0, r3
   26140:	e6f8      	b.n	25f34 <__udivmoddi4+0x98>
   26142:	4690      	mov	r8, r2
   26144:	e6e0      	b.n	25f08 <__udivmoddi4+0x6c>
   26146:	45c2      	cmp	sl, r8
   26148:	d2ea      	bcs.n	26120 <__udivmoddi4+0x284>
   2614a:	ebb8 0e02 	subs.w	lr, r8, r2
   2614e:	eb69 0503 	sbc.w	r5, r9, r3
   26152:	3801      	subs	r0, #1
   26154:	e7e4      	b.n	26120 <__udivmoddi4+0x284>
   26156:	4628      	mov	r0, r5
   26158:	e7d7      	b.n	2610a <__udivmoddi4+0x26e>
   2615a:	4640      	mov	r0, r8
   2615c:	e791      	b.n	26082 <__udivmoddi4+0x1e6>
   2615e:	4681      	mov	r9, r0
   26160:	e7be      	b.n	260e0 <__udivmoddi4+0x244>
   26162:	4601      	mov	r1, r0
   26164:	e778      	b.n	26058 <__udivmoddi4+0x1bc>
   26166:	3802      	subs	r0, #2
   26168:	443c      	add	r4, r7
   2616a:	e745      	b.n	25ff8 <__udivmoddi4+0x15c>
   2616c:	4608      	mov	r0, r1
   2616e:	e708      	b.n	25f82 <__udivmoddi4+0xe6>
   26170:	f1a8 0802 	sub.w	r8, r8, #2
   26174:	443d      	add	r5, r7
   26176:	e72b      	b.n	25fd0 <__udivmoddi4+0x134>

00026178 <selfrel_offset31>:
   26178:	6803      	ldr	r3, [r0, #0]
   2617a:	005a      	lsls	r2, r3, #1
   2617c:	bf4c      	ite	mi
   2617e:	f043 4300 	orrmi.w	r3, r3, #2147483648	; 0x80000000
   26182:	f023 4300 	bicpl.w	r3, r3, #2147483648	; 0x80000000
   26186:	4418      	add	r0, r3
   26188:	4770      	bx	lr
   2618a:	bf00      	nop

0002618c <search_EIT_table>:
   2618c:	b361      	cbz	r1, 261e8 <search_EIT_table+0x5c>
   2618e:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   26192:	f101 3aff 	add.w	sl, r1, #4294967295
   26196:	4690      	mov	r8, r2
   26198:	4606      	mov	r6, r0
   2619a:	46d1      	mov	r9, sl
   2619c:	2700      	movs	r7, #0
   2619e:	eb07 0409 	add.w	r4, r7, r9
   261a2:	eb04 74d4 	add.w	r4, r4, r4, lsr #31
   261a6:	1064      	asrs	r4, r4, #1
   261a8:	00e5      	lsls	r5, r4, #3
   261aa:	1971      	adds	r1, r6, r5
   261ac:	4608      	mov	r0, r1
   261ae:	f7ff ffe3 	bl	26178 <selfrel_offset31>
   261b2:	45a2      	cmp	sl, r4
   261b4:	4683      	mov	fp, r0
   261b6:	f105 0008 	add.w	r0, r5, #8
   261ba:	4430      	add	r0, r6
   261bc:	d009      	beq.n	261d2 <search_EIT_table+0x46>
   261be:	f7ff ffdb 	bl	26178 <selfrel_offset31>
   261c2:	45c3      	cmp	fp, r8
   261c4:	f100 30ff 	add.w	r0, r0, #4294967295
   261c8:	d805      	bhi.n	261d6 <search_EIT_table+0x4a>
   261ca:	4540      	cmp	r0, r8
   261cc:	d209      	bcs.n	261e2 <search_EIT_table+0x56>
   261ce:	1c67      	adds	r7, r4, #1
   261d0:	e7e5      	b.n	2619e <search_EIT_table+0x12>
   261d2:	45c3      	cmp	fp, r8
   261d4:	d905      	bls.n	261e2 <search_EIT_table+0x56>
   261d6:	42a7      	cmp	r7, r4
   261d8:	d002      	beq.n	261e0 <search_EIT_table+0x54>
   261da:	f104 39ff 	add.w	r9, r4, #4294967295
   261de:	e7de      	b.n	2619e <search_EIT_table+0x12>
   261e0:	2100      	movs	r1, #0
   261e2:	4608      	mov	r0, r1
   261e4:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   261e8:	4608      	mov	r0, r1
   261ea:	4770      	bx	lr

000261ec <__gnu_unwind_get_pr_addr>:
   261ec:	2801      	cmp	r0, #1
   261ee:	d007      	beq.n	26200 <__gnu_unwind_get_pr_addr+0x14>
   261f0:	2802      	cmp	r0, #2
   261f2:	d007      	beq.n	26204 <__gnu_unwind_get_pr_addr+0x18>
   261f4:	4b04      	ldr	r3, [pc, #16]	; (26208 <__gnu_unwind_get_pr_addr+0x1c>)
   261f6:	2800      	cmp	r0, #0
   261f8:	bf0c      	ite	eq
   261fa:	4618      	moveq	r0, r3
   261fc:	2000      	movne	r0, #0
   261fe:	4770      	bx	lr
   26200:	4802      	ldr	r0, [pc, #8]	; (2620c <__gnu_unwind_get_pr_addr+0x20>)
   26202:	4770      	bx	lr
   26204:	4802      	ldr	r0, [pc, #8]	; (26210 <__gnu_unwind_get_pr_addr+0x24>)
   26206:	4770      	bx	lr
   26208:	000268f1 	.word	0x000268f1
   2620c:	000268f5 	.word	0x000268f5
   26210:	000268f9 	.word	0x000268f9

00026214 <get_eit_entry>:
   26214:	b530      	push	{r4, r5, lr}
   26216:	4b24      	ldr	r3, [pc, #144]	; (262a8 <get_eit_entry+0x94>)
   26218:	b083      	sub	sp, #12
   2621a:	4604      	mov	r4, r0
   2621c:	1e8d      	subs	r5, r1, #2
   2621e:	b37b      	cbz	r3, 26280 <get_eit_entry+0x6c>
   26220:	a901      	add	r1, sp, #4
   26222:	4628      	mov	r0, r5
   26224:	f3af 8000 	nop.w
   26228:	b320      	cbz	r0, 26274 <get_eit_entry+0x60>
   2622a:	9901      	ldr	r1, [sp, #4]
   2622c:	462a      	mov	r2, r5
   2622e:	f7ff ffad 	bl	2618c <search_EIT_table>
   26232:	4601      	mov	r1, r0
   26234:	b1f0      	cbz	r0, 26274 <get_eit_entry+0x60>
   26236:	f7ff ff9f 	bl	26178 <selfrel_offset31>
   2623a:	684b      	ldr	r3, [r1, #4]
   2623c:	64a0      	str	r0, [r4, #72]	; 0x48
   2623e:	2b01      	cmp	r3, #1
   26240:	d012      	beq.n	26268 <get_eit_entry+0x54>
   26242:	2b00      	cmp	r3, #0
   26244:	f101 0004 	add.w	r0, r1, #4
   26248:	db20      	blt.n	2628c <get_eit_entry+0x78>
   2624a:	f7ff ff95 	bl	26178 <selfrel_offset31>
   2624e:	2300      	movs	r3, #0
   26250:	64e0      	str	r0, [r4, #76]	; 0x4c
   26252:	6523      	str	r3, [r4, #80]	; 0x50
   26254:	6803      	ldr	r3, [r0, #0]
   26256:	2b00      	cmp	r3, #0
   26258:	db1c      	blt.n	26294 <get_eit_entry+0x80>
   2625a:	f7ff ff8d 	bl	26178 <selfrel_offset31>
   2625e:	2300      	movs	r3, #0
   26260:	6120      	str	r0, [r4, #16]
   26262:	4618      	mov	r0, r3
   26264:	b003      	add	sp, #12
   26266:	bd30      	pop	{r4, r5, pc}
   26268:	2300      	movs	r3, #0
   2626a:	6123      	str	r3, [r4, #16]
   2626c:	2305      	movs	r3, #5
   2626e:	4618      	mov	r0, r3
   26270:	b003      	add	sp, #12
   26272:	bd30      	pop	{r4, r5, pc}
   26274:	2300      	movs	r3, #0
   26276:	6123      	str	r3, [r4, #16]
   26278:	2309      	movs	r3, #9
   2627a:	4618      	mov	r0, r3
   2627c:	b003      	add	sp, #12
   2627e:	bd30      	pop	{r4, r5, pc}
   26280:	490a      	ldr	r1, [pc, #40]	; (262ac <get_eit_entry+0x98>)
   26282:	480b      	ldr	r0, [pc, #44]	; (262b0 <get_eit_entry+0x9c>)
   26284:	1a09      	subs	r1, r1, r0
   26286:	10c9      	asrs	r1, r1, #3
   26288:	9101      	str	r1, [sp, #4]
   2628a:	e7cf      	b.n	2622c <get_eit_entry+0x18>
   2628c:	2301      	movs	r3, #1
   2628e:	64e0      	str	r0, [r4, #76]	; 0x4c
   26290:	6523      	str	r3, [r4, #80]	; 0x50
   26292:	e7df      	b.n	26254 <get_eit_entry+0x40>
   26294:	f3c3 6003 	ubfx	r0, r3, #24, #4
   26298:	f7ff ffa8 	bl	261ec <__gnu_unwind_get_pr_addr>
   2629c:	2800      	cmp	r0, #0
   2629e:	6120      	str	r0, [r4, #16]
   262a0:	bf14      	ite	ne
   262a2:	2300      	movne	r3, #0
   262a4:	2309      	moveq	r3, #9
   262a6:	e7dc      	b.n	26262 <get_eit_entry+0x4e>
   262a8:	00000000 	.word	0x00000000
   262ac:	0002f2fc 	.word	0x0002f2fc
   262b0:	0002f174 	.word	0x0002f174

000262b4 <restore_non_core_regs>:
   262b4:	6803      	ldr	r3, [r0, #0]
   262b6:	07da      	lsls	r2, r3, #31
   262b8:	b510      	push	{r4, lr}
   262ba:	4604      	mov	r4, r0
   262bc:	d406      	bmi.n	262cc <restore_non_core_regs+0x18>
   262be:	079b      	lsls	r3, r3, #30
   262c0:	f100 0048 	add.w	r0, r0, #72	; 0x48
   262c4:	d509      	bpl.n	262da <restore_non_core_regs+0x26>
   262c6:	f000 fc51 	bl	26b6c <__gnu_Unwind_Restore_VFP_D>
   262ca:	6823      	ldr	r3, [r4, #0]
   262cc:	0759      	lsls	r1, r3, #29
   262ce:	d509      	bpl.n	262e4 <restore_non_core_regs+0x30>
   262d0:	071a      	lsls	r2, r3, #28
   262d2:	d50e      	bpl.n	262f2 <restore_non_core_regs+0x3e>
   262d4:	06db      	lsls	r3, r3, #27
   262d6:	d513      	bpl.n	26300 <restore_non_core_regs+0x4c>
   262d8:	bd10      	pop	{r4, pc}
   262da:	f000 fc3f 	bl	26b5c <__gnu_Unwind_Restore_VFP>
   262de:	6823      	ldr	r3, [r4, #0]
   262e0:	0759      	lsls	r1, r3, #29
   262e2:	d4f5      	bmi.n	262d0 <restore_non_core_regs+0x1c>
   262e4:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
   262e8:	f000 fc48 	bl	26b7c <__gnu_Unwind_Restore_VFP_D_16_to_31>
   262ec:	6823      	ldr	r3, [r4, #0]
   262ee:	071a      	lsls	r2, r3, #28
   262f0:	d4f0      	bmi.n	262d4 <restore_non_core_regs+0x20>
   262f2:	f504 70a8 	add.w	r0, r4, #336	; 0x150
   262f6:	f000 fc49 	bl	26b8c <__gnu_Unwind_Restore_WMMXD>
   262fa:	6823      	ldr	r3, [r4, #0]
   262fc:	06db      	lsls	r3, r3, #27
   262fe:	d4eb      	bmi.n	262d8 <restore_non_core_regs+0x24>
   26300:	f504 70e8 	add.w	r0, r4, #464	; 0x1d0
   26304:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   26308:	f000 bc84 	b.w	26c14 <__gnu_Unwind_Restore_WMMXC>

0002630c <_Unwind_decode_typeinfo_ptr.isra.0>:
   2630c:	6803      	ldr	r3, [r0, #0]
   2630e:	b103      	cbz	r3, 26312 <_Unwind_decode_typeinfo_ptr.isra.0+0x6>
   26310:	4403      	add	r3, r0
   26312:	4618      	mov	r0, r3
   26314:	4770      	bx	lr
   26316:	bf00      	nop

00026318 <__gnu_unwind_24bit.isra.1>:
   26318:	2009      	movs	r0, #9
   2631a:	4770      	bx	lr

0002631c <_Unwind_DebugHook>:
   2631c:	4770      	bx	lr
   2631e:	bf00      	nop

00026320 <unwind_phase2>:
   26320:	b570      	push	{r4, r5, r6, lr}
   26322:	4604      	mov	r4, r0
   26324:	460d      	mov	r5, r1
   26326:	e008      	b.n	2633a <unwind_phase2+0x1a>
   26328:	6c2b      	ldr	r3, [r5, #64]	; 0x40
   2632a:	6163      	str	r3, [r4, #20]
   2632c:	462a      	mov	r2, r5
   2632e:	6923      	ldr	r3, [r4, #16]
   26330:	4621      	mov	r1, r4
   26332:	2001      	movs	r0, #1
   26334:	4798      	blx	r3
   26336:	2808      	cmp	r0, #8
   26338:	d108      	bne.n	2634c <unwind_phase2+0x2c>
   2633a:	6c29      	ldr	r1, [r5, #64]	; 0x40
   2633c:	4620      	mov	r0, r4
   2633e:	f7ff ff69 	bl	26214 <get_eit_entry>
   26342:	4606      	mov	r6, r0
   26344:	2800      	cmp	r0, #0
   26346:	d0ef      	beq.n	26328 <unwind_phase2+0x8>
   26348:	f000 fe94 	bl	27074 <abort>
   2634c:	2807      	cmp	r0, #7
   2634e:	d1fb      	bne.n	26348 <unwind_phase2+0x28>
   26350:	4630      	mov	r0, r6
   26352:	6c29      	ldr	r1, [r5, #64]	; 0x40
   26354:	f7ff ffe2 	bl	2631c <_Unwind_DebugHook>
   26358:	1d28      	adds	r0, r5, #4
   2635a:	f000 fbf3 	bl	26b44 <__restore_core_regs>
   2635e:	bf00      	nop

00026360 <unwind_phase2_forced>:
   26360:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   26364:	1d0c      	adds	r4, r1, #4
   26366:	4605      	mov	r5, r0
   26368:	4692      	mov	sl, r2
   2636a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
   2636c:	f5ad 7d72 	sub.w	sp, sp, #968	; 0x3c8
   26370:	ae03      	add	r6, sp, #12
   26372:	c60f      	stmia	r6!, {r0, r1, r2, r3}
   26374:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
   26376:	c60f      	stmia	r6!, {r0, r1, r2, r3}
   26378:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
   2637a:	c60f      	stmia	r6!, {r0, r1, r2, r3}
   2637c:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
   26380:	ac02      	add	r4, sp, #8
   26382:	f8d5 800c 	ldr.w	r8, [r5, #12]
   26386:	f8d5 9018 	ldr.w	r9, [r5, #24]
   2638a:	e886 000f 	stmia.w	r6, {r0, r1, r2, r3}
   2638e:	2300      	movs	r3, #0
   26390:	4628      	mov	r0, r5
   26392:	6c21      	ldr	r1, [r4, #64]	; 0x40
   26394:	6023      	str	r3, [r4, #0]
   26396:	f7ff ff3d 	bl	26214 <get_eit_entry>
   2639a:	f1ba 0f00 	cmp.w	sl, #0
   2639e:	4607      	mov	r7, r0
   263a0:	bf14      	ite	ne
   263a2:	260a      	movne	r6, #10
   263a4:	2609      	moveq	r6, #9
   263a6:	b17f      	cbz	r7, 263c8 <unwind_phase2_forced+0x68>
   263a8:	6ba3      	ldr	r3, [r4, #56]	; 0x38
   263aa:	f046 0110 	orr.w	r1, r6, #16
   263ae:	e88d 0210 	stmia.w	sp, {r4, r9}
   263b2:	462a      	mov	r2, r5
   263b4:	6463      	str	r3, [r4, #68]	; 0x44
   263b6:	2001      	movs	r0, #1
   263b8:	462b      	mov	r3, r5
   263ba:	47c0      	blx	r8
   263bc:	bb78      	cbnz	r0, 2641e <unwind_phase2_forced+0xbe>
   263be:	4638      	mov	r0, r7
   263c0:	f50d 7d72 	add.w	sp, sp, #968	; 0x3c8
   263c4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   263c8:	6c23      	ldr	r3, [r4, #64]	; 0x40
   263ca:	616b      	str	r3, [r5, #20]
   263cc:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
   263d0:	4621      	mov	r1, r4
   263d2:	a87a      	add	r0, sp, #488	; 0x1e8
   263d4:	f001 fc44 	bl	27c60 <memcpy>
   263d8:	692b      	ldr	r3, [r5, #16]
   263da:	aa7a      	add	r2, sp, #488	; 0x1e8
   263dc:	4629      	mov	r1, r5
   263de:	4630      	mov	r0, r6
   263e0:	4798      	blx	r3
   263e2:	9b88      	ldr	r3, [sp, #544]	; 0x220
   263e4:	4682      	mov	sl, r0
   263e6:	e88d 0210 	stmia.w	sp, {r4, r9}
   263ea:	4631      	mov	r1, r6
   263ec:	6463      	str	r3, [r4, #68]	; 0x44
   263ee:	462a      	mov	r2, r5
   263f0:	462b      	mov	r3, r5
   263f2:	2001      	movs	r0, #1
   263f4:	47c0      	blx	r8
   263f6:	b990      	cbnz	r0, 2641e <unwind_phase2_forced+0xbe>
   263f8:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
   263fc:	a97a      	add	r1, sp, #488	; 0x1e8
   263fe:	4620      	mov	r0, r4
   26400:	f001 fc2e 	bl	27c60 <memcpy>
   26404:	f1ba 0f08 	cmp.w	sl, #8
   26408:	d106      	bne.n	26418 <unwind_phase2_forced+0xb8>
   2640a:	6c21      	ldr	r1, [r4, #64]	; 0x40
   2640c:	4628      	mov	r0, r5
   2640e:	f7ff ff01 	bl	26214 <get_eit_entry>
   26412:	2609      	movs	r6, #9
   26414:	4607      	mov	r7, r0
   26416:	e7c6      	b.n	263a6 <unwind_phase2_forced+0x46>
   26418:	f1ba 0f07 	cmp.w	sl, #7
   2641c:	d005      	beq.n	2642a <unwind_phase2_forced+0xca>
   2641e:	2709      	movs	r7, #9
   26420:	4638      	mov	r0, r7
   26422:	f50d 7d72 	add.w	sp, sp, #968	; 0x3c8
   26426:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   2642a:	4638      	mov	r0, r7
   2642c:	6c21      	ldr	r1, [r4, #64]	; 0x40
   2642e:	f7ff ff75 	bl	2631c <_Unwind_DebugHook>
   26432:	a803      	add	r0, sp, #12
   26434:	f000 fb86 	bl	26b44 <__restore_core_regs>

00026438 <_Unwind_GetCFA>:
   26438:	6c40      	ldr	r0, [r0, #68]	; 0x44
   2643a:	4770      	bx	lr

0002643c <__gnu_Unwind_RaiseException>:
   2643c:	b5f0      	push	{r4, r5, r6, r7, lr}
   2643e:	6bcb      	ldr	r3, [r1, #60]	; 0x3c
   26440:	640b      	str	r3, [r1, #64]	; 0x40
   26442:	1d0e      	adds	r6, r1, #4
   26444:	460f      	mov	r7, r1
   26446:	4604      	mov	r4, r0
   26448:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
   2644a:	b0f9      	sub	sp, #484	; 0x1e4
   2644c:	ad01      	add	r5, sp, #4
   2644e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
   26450:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
   26452:	c50f      	stmia	r5!, {r0, r1, r2, r3}
   26454:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
   26456:	c50f      	stmia	r5!, {r0, r1, r2, r3}
   26458:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
   2645c:	f04f 36ff 	mov.w	r6, #4294967295
   26460:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
   26464:	9600      	str	r6, [sp, #0]
   26466:	e006      	b.n	26476 <__gnu_Unwind_RaiseException+0x3a>
   26468:	6923      	ldr	r3, [r4, #16]
   2646a:	466a      	mov	r2, sp
   2646c:	4621      	mov	r1, r4
   2646e:	4798      	blx	r3
   26470:	2808      	cmp	r0, #8
   26472:	4605      	mov	r5, r0
   26474:	d108      	bne.n	26488 <__gnu_Unwind_RaiseException+0x4c>
   26476:	9910      	ldr	r1, [sp, #64]	; 0x40
   26478:	4620      	mov	r0, r4
   2647a:	f7ff fecb 	bl	26214 <get_eit_entry>
   2647e:	2800      	cmp	r0, #0
   26480:	d0f2      	beq.n	26468 <__gnu_Unwind_RaiseException+0x2c>
   26482:	2009      	movs	r0, #9
   26484:	b079      	add	sp, #484	; 0x1e4
   26486:	bdf0      	pop	{r4, r5, r6, r7, pc}
   26488:	4668      	mov	r0, sp
   2648a:	f7ff ff13 	bl	262b4 <restore_non_core_regs>
   2648e:	2d06      	cmp	r5, #6
   26490:	d1f7      	bne.n	26482 <__gnu_Unwind_RaiseException+0x46>
   26492:	4639      	mov	r1, r7
   26494:	4620      	mov	r0, r4
   26496:	f7ff ff43 	bl	26320 <unwind_phase2>
   2649a:	bf00      	nop

0002649c <__gnu_Unwind_ForcedUnwind>:
   2649c:	b430      	push	{r4, r5}
   2649e:	6bdd      	ldr	r5, [r3, #60]	; 0x3c
   264a0:	60c1      	str	r1, [r0, #12]
   264a2:	6182      	str	r2, [r0, #24]
   264a4:	4619      	mov	r1, r3
   264a6:	641d      	str	r5, [r3, #64]	; 0x40
   264a8:	2200      	movs	r2, #0
   264aa:	bc30      	pop	{r4, r5}
   264ac:	e758      	b.n	26360 <unwind_phase2_forced>
   264ae:	bf00      	nop

000264b0 <__gnu_Unwind_Resume>:
   264b0:	b570      	push	{r4, r5, r6, lr}
   264b2:	68c6      	ldr	r6, [r0, #12]
   264b4:	6943      	ldr	r3, [r0, #20]
   264b6:	640b      	str	r3, [r1, #64]	; 0x40
   264b8:	b126      	cbz	r6, 264c4 <__gnu_Unwind_Resume+0x14>
   264ba:	2201      	movs	r2, #1
   264bc:	f7ff ff50 	bl	26360 <unwind_phase2_forced>
   264c0:	f000 fdd8 	bl	27074 <abort>
   264c4:	6903      	ldr	r3, [r0, #16]
   264c6:	460a      	mov	r2, r1
   264c8:	4604      	mov	r4, r0
   264ca:	460d      	mov	r5, r1
   264cc:	4601      	mov	r1, r0
   264ce:	2002      	movs	r0, #2
   264d0:	4798      	blx	r3
   264d2:	2807      	cmp	r0, #7
   264d4:	d007      	beq.n	264e6 <__gnu_Unwind_Resume+0x36>
   264d6:	2808      	cmp	r0, #8
   264d8:	d103      	bne.n	264e2 <__gnu_Unwind_Resume+0x32>
   264da:	4629      	mov	r1, r5
   264dc:	4620      	mov	r0, r4
   264de:	f7ff ff1f 	bl	26320 <unwind_phase2>
   264e2:	f000 fdc7 	bl	27074 <abort>
   264e6:	4630      	mov	r0, r6
   264e8:	6c29      	ldr	r1, [r5, #64]	; 0x40
   264ea:	f7ff ff17 	bl	2631c <_Unwind_DebugHook>
   264ee:	1d28      	adds	r0, r5, #4
   264f0:	f000 fb28 	bl	26b44 <__restore_core_regs>

000264f4 <__gnu_Unwind_Resume_or_Rethrow>:
   264f4:	68c2      	ldr	r2, [r0, #12]
   264f6:	b11a      	cbz	r2, 26500 <__gnu_Unwind_Resume_or_Rethrow+0xc>
   264f8:	6bca      	ldr	r2, [r1, #60]	; 0x3c
   264fa:	640a      	str	r2, [r1, #64]	; 0x40
   264fc:	2200      	movs	r2, #0
   264fe:	e72f      	b.n	26360 <unwind_phase2_forced>
   26500:	e79c      	b.n	2643c <__gnu_Unwind_RaiseException>
   26502:	bf00      	nop

00026504 <_Unwind_Complete>:
   26504:	4770      	bx	lr
   26506:	bf00      	nop

00026508 <_Unwind_DeleteException>:
   26508:	6883      	ldr	r3, [r0, #8]
   2650a:	b113      	cbz	r3, 26512 <_Unwind_DeleteException+0xa>
   2650c:	4601      	mov	r1, r0
   2650e:	2001      	movs	r0, #1
   26510:	4718      	bx	r3
   26512:	4770      	bx	lr

00026514 <_Unwind_VRS_Get>:
   26514:	b500      	push	{lr}
   26516:	2904      	cmp	r1, #4
   26518:	d807      	bhi.n	2652a <_Unwind_VRS_Get+0x16>
   2651a:	e8df f001 	tbb	[pc, r1]
   2651e:	0903      	.short	0x0903
   26520:	0906      	.short	0x0906
   26522:	09          	.byte	0x09
   26523:	00          	.byte	0x00
   26524:	b90b      	cbnz	r3, 2652a <_Unwind_VRS_Get+0x16>
   26526:	2a0f      	cmp	r2, #15
   26528:	d905      	bls.n	26536 <_Unwind_VRS_Get+0x22>
   2652a:	2002      	movs	r0, #2
   2652c:	f85d fb04 	ldr.w	pc, [sp], #4
   26530:	2001      	movs	r0, #1
   26532:	f85d fb04 	ldr.w	pc, [sp], #4
   26536:	eb00 0282 	add.w	r2, r0, r2, lsl #2
   2653a:	4618      	mov	r0, r3
   2653c:	6853      	ldr	r3, [r2, #4]
   2653e:	9a01      	ldr	r2, [sp, #4]
   26540:	6013      	str	r3, [r2, #0]
   26542:	f85d fb04 	ldr.w	pc, [sp], #4
   26546:	bf00      	nop

00026548 <_Unwind_GetGR>:
   26548:	b510      	push	{r4, lr}
   2654a:	b084      	sub	sp, #16
   2654c:	2300      	movs	r3, #0
   2654e:	ac03      	add	r4, sp, #12
   26550:	460a      	mov	r2, r1
   26552:	9400      	str	r4, [sp, #0]
   26554:	4619      	mov	r1, r3
   26556:	f7ff ffdd 	bl	26514 <_Unwind_VRS_Get>
   2655a:	9803      	ldr	r0, [sp, #12]
   2655c:	b004      	add	sp, #16
   2655e:	bd10      	pop	{r4, pc}

00026560 <_Unwind_VRS_Set>:
   26560:	b500      	push	{lr}
   26562:	2904      	cmp	r1, #4
   26564:	d807      	bhi.n	26576 <_Unwind_VRS_Set+0x16>
   26566:	e8df f001 	tbb	[pc, r1]
   2656a:	0903      	.short	0x0903
   2656c:	0906      	.short	0x0906
   2656e:	09          	.byte	0x09
   2656f:	00          	.byte	0x00
   26570:	b90b      	cbnz	r3, 26576 <_Unwind_VRS_Set+0x16>
   26572:	2a0f      	cmp	r2, #15
   26574:	d905      	bls.n	26582 <_Unwind_VRS_Set+0x22>
   26576:	2002      	movs	r0, #2
   26578:	f85d fb04 	ldr.w	pc, [sp], #4
   2657c:	2001      	movs	r0, #1
   2657e:	f85d fb04 	ldr.w	pc, [sp], #4
   26582:	9901      	ldr	r1, [sp, #4]
   26584:	eb00 0282 	add.w	r2, r0, r2, lsl #2
   26588:	6809      	ldr	r1, [r1, #0]
   2658a:	6051      	str	r1, [r2, #4]
   2658c:	4618      	mov	r0, r3
   2658e:	f85d fb04 	ldr.w	pc, [sp], #4
   26592:	bf00      	nop

00026594 <_Unwind_SetGR>:
   26594:	b510      	push	{r4, lr}
   26596:	b084      	sub	sp, #16
   26598:	ac04      	add	r4, sp, #16
   2659a:	2300      	movs	r3, #0
   2659c:	f844 2d04 	str.w	r2, [r4, #-4]!
   265a0:	460a      	mov	r2, r1
   265a2:	9400      	str	r4, [sp, #0]
   265a4:	4619      	mov	r1, r3
   265a6:	f7ff ffdb 	bl	26560 <_Unwind_VRS_Set>
   265aa:	b004      	add	sp, #16
   265ac:	bd10      	pop	{r4, pc}
   265ae:	bf00      	nop

000265b0 <__gnu_Unwind_Backtrace>:
   265b0:	b5f0      	push	{r4, r5, r6, r7, lr}
   265b2:	6bd3      	ldr	r3, [r2, #60]	; 0x3c
   265b4:	6413      	str	r3, [r2, #64]	; 0x40
   265b6:	1d15      	adds	r5, r2, #4
   265b8:	4607      	mov	r7, r0
   265ba:	460e      	mov	r6, r1
   265bc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   265be:	f5ad 7d0f 	sub.w	sp, sp, #572	; 0x23c
   265c2:	ac17      	add	r4, sp, #92	; 0x5c
   265c4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   265c6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   265c8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   265ca:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   265cc:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   265ce:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
   265d2:	f04f 35ff 	mov.w	r5, #4294967295
   265d6:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
   265da:	9516      	str	r5, [sp, #88]	; 0x58
   265dc:	e010      	b.n	26600 <__gnu_Unwind_Backtrace+0x50>
   265de:	a816      	add	r0, sp, #88	; 0x58
   265e0:	f7ff ffd8 	bl	26594 <_Unwind_SetGR>
   265e4:	4631      	mov	r1, r6
   265e6:	a816      	add	r0, sp, #88	; 0x58
   265e8:	47b8      	blx	r7
   265ea:	aa16      	add	r2, sp, #88	; 0x58
   265ec:	4669      	mov	r1, sp
   265ee:	b978      	cbnz	r0, 26610 <__gnu_Unwind_Backtrace+0x60>
   265f0:	9b04      	ldr	r3, [sp, #16]
   265f2:	2008      	movs	r0, #8
   265f4:	4798      	blx	r3
   265f6:	2805      	cmp	r0, #5
   265f8:	4604      	mov	r4, r0
   265fa:	d00a      	beq.n	26612 <__gnu_Unwind_Backtrace+0x62>
   265fc:	2809      	cmp	r0, #9
   265fe:	d007      	beq.n	26610 <__gnu_Unwind_Backtrace+0x60>
   26600:	9926      	ldr	r1, [sp, #152]	; 0x98
   26602:	4668      	mov	r0, sp
   26604:	f7ff fe06 	bl	26214 <get_eit_entry>
   26608:	466a      	mov	r2, sp
   2660a:	210c      	movs	r1, #12
   2660c:	2800      	cmp	r0, #0
   2660e:	d0e6      	beq.n	265de <__gnu_Unwind_Backtrace+0x2e>
   26610:	2409      	movs	r4, #9
   26612:	a816      	add	r0, sp, #88	; 0x58
   26614:	f7ff fe4e 	bl	262b4 <restore_non_core_regs>
   26618:	4620      	mov	r0, r4
   2661a:	f50d 7d0f 	add.w	sp, sp, #572	; 0x23c
   2661e:	bdf0      	pop	{r4, r5, r6, r7, pc}

00026620 <__gnu_unwind_pr_common>:
   26620:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   26624:	460d      	mov	r5, r1
   26626:	6cc9      	ldr	r1, [r1, #76]	; 0x4c
   26628:	b08b      	sub	sp, #44	; 0x2c
   2662a:	1d0c      	adds	r4, r1, #4
   2662c:	6809      	ldr	r1, [r1, #0]
   2662e:	9107      	str	r1, [sp, #28]
   26630:	4691      	mov	r9, r2
   26632:	9408      	str	r4, [sp, #32]
   26634:	f000 0b03 	and.w	fp, r0, #3
   26638:	461e      	mov	r6, r3
   2663a:	2b00      	cmp	r3, #0
   2663c:	d160      	bne.n	26700 <__gnu_unwind_pr_common+0xe0>
   2663e:	0209      	lsls	r1, r1, #8
   26640:	2303      	movs	r3, #3
   26642:	9107      	str	r1, [sp, #28]
   26644:	f88d 6025 	strb.w	r6, [sp, #37]	; 0x25
   26648:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
   2664c:	6d2b      	ldr	r3, [r5, #80]	; 0x50
   2664e:	f1bb 0f02 	cmp.w	fp, #2
   26652:	bf08      	it	eq
   26654:	6bac      	ldreq	r4, [r5, #56]	; 0x38
   26656:	f013 0301 	ands.w	r3, r3, #1
   2665a:	d140      	bne.n	266de <__gnu_unwind_pr_common+0xbe>
   2665c:	9301      	str	r3, [sp, #4]
   2665e:	f000 0308 	and.w	r3, r0, #8
   26662:	9303      	str	r3, [sp, #12]
   26664:	f8d4 8000 	ldr.w	r8, [r4]
   26668:	f1b8 0f00 	cmp.w	r8, #0
   2666c:	d039      	beq.n	266e2 <__gnu_unwind_pr_common+0xc2>
   2666e:	2e02      	cmp	r6, #2
   26670:	d043      	beq.n	266fa <__gnu_unwind_pr_common+0xda>
   26672:	f8b4 8000 	ldrh.w	r8, [r4]
   26676:	8867      	ldrh	r7, [r4, #2]
   26678:	3404      	adds	r4, #4
   2667a:	6cab      	ldr	r3, [r5, #72]	; 0x48
   2667c:	f027 0a01 	bic.w	sl, r7, #1
   26680:	210f      	movs	r1, #15
   26682:	4648      	mov	r0, r9
   26684:	449a      	add	sl, r3
   26686:	f7ff ff5f 	bl	26548 <_Unwind_GetGR>
   2668a:	4582      	cmp	sl, r0
   2668c:	d833      	bhi.n	266f6 <__gnu_unwind_pr_common+0xd6>
   2668e:	f028 0301 	bic.w	r3, r8, #1
   26692:	449a      	add	sl, r3
   26694:	4550      	cmp	r0, sl
   26696:	bf2c      	ite	cs
   26698:	2000      	movcs	r0, #0
   2669a:	2001      	movcc	r0, #1
   2669c:	007f      	lsls	r7, r7, #1
   2669e:	f007 0702 	and.w	r7, r7, #2
   266a2:	f008 0801 	and.w	r8, r8, #1
   266a6:	ea47 0708 	orr.w	r7, r7, r8
   266aa:	2f01      	cmp	r7, #1
   266ac:	d03e      	beq.n	2672c <__gnu_unwind_pr_common+0x10c>
   266ae:	d335      	bcc.n	2671c <__gnu_unwind_pr_common+0xfc>
   266b0:	2f02      	cmp	r7, #2
   266b2:	d11c      	bne.n	266ee <__gnu_unwind_pr_common+0xce>
   266b4:	6823      	ldr	r3, [r4, #0]
   266b6:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
   266ba:	9202      	str	r2, [sp, #8]
   266bc:	f1bb 0f00 	cmp.w	fp, #0
   266c0:	d176      	bne.n	267b0 <__gnu_unwind_pr_common+0x190>
   266c2:	b128      	cbz	r0, 266d0 <__gnu_unwind_pr_common+0xb0>
   266c4:	9903      	ldr	r1, [sp, #12]
   266c6:	2900      	cmp	r1, #0
   266c8:	d07e      	beq.n	267c8 <__gnu_unwind_pr_common+0x1a8>
   266ca:	2a00      	cmp	r2, #0
   266cc:	f000 80a6 	beq.w	2681c <__gnu_unwind_pr_common+0x1fc>
   266d0:	2b00      	cmp	r3, #0
   266d2:	db77      	blt.n	267c4 <__gnu_unwind_pr_common+0x1a4>
   266d4:	9b02      	ldr	r3, [sp, #8]
   266d6:	3301      	adds	r3, #1
   266d8:	eb04 0483 	add.w	r4, r4, r3, lsl #2
   266dc:	e7c2      	b.n	26664 <__gnu_unwind_pr_common+0x44>
   266de:	2300      	movs	r3, #0
   266e0:	9301      	str	r3, [sp, #4]
   266e2:	2e02      	cmp	r6, #2
   266e4:	dd3e      	ble.n	26764 <__gnu_unwind_pr_common+0x144>
   266e6:	f7ff fe17 	bl	26318 <__gnu_unwind_24bit.isra.1>
   266ea:	2800      	cmp	r0, #0
   266ec:	d040      	beq.n	26770 <__gnu_unwind_pr_common+0x150>
   266ee:	2009      	movs	r0, #9
   266f0:	b00b      	add	sp, #44	; 0x2c
   266f2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   266f6:	2000      	movs	r0, #0
   266f8:	e7d0      	b.n	2669c <__gnu_unwind_pr_common+0x7c>
   266fa:	6867      	ldr	r7, [r4, #4]
   266fc:	3408      	adds	r4, #8
   266fe:	e7bc      	b.n	2667a <__gnu_unwind_pr_common+0x5a>
   26700:	2b02      	cmp	r3, #2
   26702:	dca3      	bgt.n	2664c <__gnu_unwind_pr_common+0x2c>
   26704:	0c0b      	lsrs	r3, r1, #16
   26706:	b2da      	uxtb	r2, r3
   26708:	0409      	lsls	r1, r1, #16
   2670a:	f88d 3025 	strb.w	r3, [sp, #37]	; 0x25
   2670e:	2302      	movs	r3, #2
   26710:	eb04 0482 	add.w	r4, r4, r2, lsl #2
   26714:	9107      	str	r1, [sp, #28]
   26716:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
   2671a:	e797      	b.n	2664c <__gnu_unwind_pr_common+0x2c>
   2671c:	f1bb 0f00 	cmp.w	fp, #0
   26720:	d002      	beq.n	26728 <__gnu_unwind_pr_common+0x108>
   26722:	2800      	cmp	r0, #0
   26724:	f040 80bd 	bne.w	268a2 <__gnu_unwind_pr_common+0x282>
   26728:	3404      	adds	r4, #4
   2672a:	e79b      	b.n	26664 <__gnu_unwind_pr_common+0x44>
   2672c:	f1bb 0f00 	cmp.w	fp, #0
   26730:	d125      	bne.n	2677e <__gnu_unwind_pr_common+0x15e>
   26732:	b1a8      	cbz	r0, 26760 <__gnu_unwind_pr_common+0x140>
   26734:	e894 000c 	ldmia.w	r4, {r2, r3}
   26738:	1c99      	adds	r1, r3, #2
   2673a:	ea4f 72d2 	mov.w	r2, r2, lsr #31
   2673e:	d0d6      	beq.n	266ee <__gnu_unwind_pr_common+0xce>
   26740:	f105 0158 	add.w	r1, r5, #88	; 0x58
   26744:	3301      	adds	r3, #1
   26746:	9106      	str	r1, [sp, #24]
   26748:	f000 80a3 	beq.w	26892 <__gnu_unwind_pr_common+0x272>
   2674c:	1d20      	adds	r0, r4, #4
   2674e:	f7ff fddd 	bl	2630c <_Unwind_decode_typeinfo_ptr.isra.0>
   26752:	ab06      	add	r3, sp, #24
   26754:	4601      	mov	r1, r0
   26756:	4628      	mov	r0, r5
   26758:	f7f6 fe00 	bl	1d35c <__cxa_type_match>
   2675c:	2800      	cmp	r0, #0
   2675e:	d177      	bne.n	26850 <__gnu_unwind_pr_common+0x230>
   26760:	3408      	adds	r4, #8
   26762:	e77f      	b.n	26664 <__gnu_unwind_pr_common+0x44>
   26764:	a907      	add	r1, sp, #28
   26766:	4648      	mov	r0, r9
   26768:	f000 faee 	bl	26d48 <__gnu_unwind_execute>
   2676c:	2800      	cmp	r0, #0
   2676e:	d1be      	bne.n	266ee <__gnu_unwind_pr_common+0xce>
   26770:	9b01      	ldr	r3, [sp, #4]
   26772:	2b00      	cmp	r3, #0
   26774:	d15c      	bne.n	26830 <__gnu_unwind_pr_common+0x210>
   26776:	2008      	movs	r0, #8
   26778:	b00b      	add	sp, #44	; 0x2c
   2677a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2677e:	210d      	movs	r1, #13
   26780:	4648      	mov	r0, r9
   26782:	6a2f      	ldr	r7, [r5, #32]
   26784:	f7ff fee0 	bl	26548 <_Unwind_GetGR>
   26788:	4287      	cmp	r7, r0
   2678a:	d1e9      	bne.n	26760 <__gnu_unwind_pr_common+0x140>
   2678c:	6aab      	ldr	r3, [r5, #40]	; 0x28
   2678e:	429c      	cmp	r4, r3
   26790:	d1e6      	bne.n	26760 <__gnu_unwind_pr_common+0x140>
   26792:	4620      	mov	r0, r4
   26794:	f7ff fcf0 	bl	26178 <selfrel_offset31>
   26798:	210f      	movs	r1, #15
   2679a:	4602      	mov	r2, r0
   2679c:	4648      	mov	r0, r9
   2679e:	f7ff fef9 	bl	26594 <_Unwind_SetGR>
   267a2:	4648      	mov	r0, r9
   267a4:	462a      	mov	r2, r5
   267a6:	2100      	movs	r1, #0
   267a8:	f7ff fef4 	bl	26594 <_Unwind_SetGR>
   267ac:	2007      	movs	r0, #7
   267ae:	e79f      	b.n	266f0 <__gnu_unwind_pr_common+0xd0>
   267b0:	210d      	movs	r1, #13
   267b2:	4648      	mov	r0, r9
   267b4:	6a2f      	ldr	r7, [r5, #32]
   267b6:	f7ff fec7 	bl	26548 <_Unwind_GetGR>
   267ba:	4287      	cmp	r7, r0
   267bc:	d058      	beq.n	26870 <__gnu_unwind_pr_common+0x250>
   267be:	6823      	ldr	r3, [r4, #0]
   267c0:	2b00      	cmp	r3, #0
   267c2:	da87      	bge.n	266d4 <__gnu_unwind_pr_common+0xb4>
   267c4:	3404      	adds	r4, #4
   267c6:	e785      	b.n	266d4 <__gnu_unwind_pr_common+0xb4>
   267c8:	9b02      	ldr	r3, [sp, #8]
   267ca:	b33b      	cbz	r3, 2681c <__gnu_unwind_pr_common+0x1fc>
   267cc:	f105 0358 	add.w	r3, r5, #88	; 0x58
   267d0:	1d27      	adds	r7, r4, #4
   267d2:	f8cd b010 	str.w	fp, [sp, #16]
   267d6:	f8dd 800c 	ldr.w	r8, [sp, #12]
   267da:	f8dd a008 	ldr.w	sl, [sp, #8]
   267de:	9605      	str	r6, [sp, #20]
   267e0:	46a3      	mov	fp, r4
   267e2:	461c      	mov	r4, r3
   267e4:	e002      	b.n	267ec <__gnu_unwind_pr_common+0x1cc>
   267e6:	45b2      	cmp	sl, r6
   267e8:	46b0      	mov	r8, r6
   267ea:	d016      	beq.n	2681a <__gnu_unwind_pr_common+0x1fa>
   267ec:	4638      	mov	r0, r7
   267ee:	9406      	str	r4, [sp, #24]
   267f0:	f7ff fd8c 	bl	2630c <_Unwind_decode_typeinfo_ptr.isra.0>
   267f4:	ab06      	add	r3, sp, #24
   267f6:	4601      	mov	r1, r0
   267f8:	2200      	movs	r2, #0
   267fa:	4628      	mov	r0, r5
   267fc:	f7f6 fdae 	bl	1d35c <__cxa_type_match>
   26800:	f108 0601 	add.w	r6, r8, #1
   26804:	3704      	adds	r7, #4
   26806:	2800      	cmp	r0, #0
   26808:	d0ed      	beq.n	267e6 <__gnu_unwind_pr_common+0x1c6>
   2680a:	9b02      	ldr	r3, [sp, #8]
   2680c:	9e05      	ldr	r6, [sp, #20]
   2680e:	4543      	cmp	r3, r8
   26810:	465c      	mov	r4, fp
   26812:	f8dd b010 	ldr.w	fp, [sp, #16]
   26816:	d1d2      	bne.n	267be <__gnu_unwind_pr_common+0x19e>
   26818:	e000      	b.n	2681c <__gnu_unwind_pr_common+0x1fc>
   2681a:	465c      	mov	r4, fp
   2681c:	4648      	mov	r0, r9
   2681e:	210d      	movs	r1, #13
   26820:	f7ff fe92 	bl	26548 <_Unwind_GetGR>
   26824:	9b06      	ldr	r3, [sp, #24]
   26826:	6228      	str	r0, [r5, #32]
   26828:	62ac      	str	r4, [r5, #40]	; 0x28
   2682a:	626b      	str	r3, [r5, #36]	; 0x24
   2682c:	2006      	movs	r0, #6
   2682e:	e75f      	b.n	266f0 <__gnu_unwind_pr_common+0xd0>
   26830:	210f      	movs	r1, #15
   26832:	4648      	mov	r0, r9
   26834:	f7ff fe88 	bl	26548 <_Unwind_GetGR>
   26838:	210e      	movs	r1, #14
   2683a:	4602      	mov	r2, r0
   2683c:	4648      	mov	r0, r9
   2683e:	f7ff fea9 	bl	26594 <_Unwind_SetGR>
   26842:	4648      	mov	r0, r9
   26844:	4a29      	ldr	r2, [pc, #164]	; (268ec <__gnu_unwind_pr_common+0x2cc>)
   26846:	210f      	movs	r1, #15
   26848:	f7ff fea4 	bl	26594 <_Unwind_SetGR>
   2684c:	2007      	movs	r0, #7
   2684e:	e74f      	b.n	266f0 <__gnu_unwind_pr_common+0xd0>
   26850:	4607      	mov	r7, r0
   26852:	210d      	movs	r1, #13
   26854:	4648      	mov	r0, r9
   26856:	f7ff fe77 	bl	26548 <_Unwind_GetGR>
   2685a:	2f02      	cmp	r7, #2
   2685c:	6228      	str	r0, [r5, #32]
   2685e:	d11d      	bne.n	2689c <__gnu_unwind_pr_common+0x27c>
   26860:	462b      	mov	r3, r5
   26862:	9a06      	ldr	r2, [sp, #24]
   26864:	f843 2f2c 	str.w	r2, [r3, #44]!
   26868:	626b      	str	r3, [r5, #36]	; 0x24
   2686a:	62ac      	str	r4, [r5, #40]	; 0x28
   2686c:	2006      	movs	r0, #6
   2686e:	e73f      	b.n	266f0 <__gnu_unwind_pr_common+0xd0>
   26870:	6aab      	ldr	r3, [r5, #40]	; 0x28
   26872:	429c      	cmp	r4, r3
   26874:	d1a3      	bne.n	267be <__gnu_unwind_pr_common+0x19e>
   26876:	2204      	movs	r2, #4
   26878:	2700      	movs	r7, #0
   2687a:	18a3      	adds	r3, r4, r2
   2687c:	9902      	ldr	r1, [sp, #8]
   2687e:	62a9      	str	r1, [r5, #40]	; 0x28
   26880:	62ef      	str	r7, [r5, #44]	; 0x2c
   26882:	632a      	str	r2, [r5, #48]	; 0x30
   26884:	636b      	str	r3, [r5, #52]	; 0x34
   26886:	6823      	ldr	r3, [r4, #0]
   26888:	42bb      	cmp	r3, r7
   2688a:	db1d      	blt.n	268c8 <__gnu_unwind_pr_common+0x2a8>
   2688c:	2301      	movs	r3, #1
   2688e:	9301      	str	r3, [sp, #4]
   26890:	e720      	b.n	266d4 <__gnu_unwind_pr_common+0xb4>
   26892:	4648      	mov	r0, r9
   26894:	210d      	movs	r1, #13
   26896:	f7ff fe57 	bl	26548 <_Unwind_GetGR>
   2689a:	6228      	str	r0, [r5, #32]
   2689c:	9b06      	ldr	r3, [sp, #24]
   2689e:	626b      	str	r3, [r5, #36]	; 0x24
   268a0:	e7e3      	b.n	2686a <__gnu_unwind_pr_common+0x24a>
   268a2:	4620      	mov	r0, r4
   268a4:	f7ff fc68 	bl	26178 <selfrel_offset31>
   268a8:	3404      	adds	r4, #4
   268aa:	4606      	mov	r6, r0
   268ac:	63ac      	str	r4, [r5, #56]	; 0x38
   268ae:	4628      	mov	r0, r5
   268b0:	f7f6 fdb0 	bl	1d414 <__cxa_begin_cleanup>
   268b4:	2800      	cmp	r0, #0
   268b6:	f43f af1a 	beq.w	266ee <__gnu_unwind_pr_common+0xce>
   268ba:	4648      	mov	r0, r9
   268bc:	4632      	mov	r2, r6
   268be:	210f      	movs	r1, #15
   268c0:	f7ff fe68 	bl	26594 <_Unwind_SetGR>
   268c4:	2007      	movs	r0, #7
   268c6:	e713      	b.n	266f0 <__gnu_unwind_pr_common+0xd0>
   268c8:	4608      	mov	r0, r1
   268ca:	3001      	adds	r0, #1
   268cc:	eb04 0080 	add.w	r0, r4, r0, lsl #2
   268d0:	f7ff fc52 	bl	26178 <selfrel_offset31>
   268d4:	210f      	movs	r1, #15
   268d6:	4602      	mov	r2, r0
   268d8:	4648      	mov	r0, r9
   268da:	f7ff fe5b 	bl	26594 <_Unwind_SetGR>
   268de:	4648      	mov	r0, r9
   268e0:	462a      	mov	r2, r5
   268e2:	4639      	mov	r1, r7
   268e4:	f7ff fe56 	bl	26594 <_Unwind_SetGR>
   268e8:	2007      	movs	r0, #7
   268ea:	e701      	b.n	266f0 <__gnu_unwind_pr_common+0xd0>
   268ec:	0001d545 	.word	0x0001d545

000268f0 <__aeabi_unwind_cpp_pr0>:
   268f0:	2300      	movs	r3, #0
   268f2:	e695      	b.n	26620 <__gnu_unwind_pr_common>

000268f4 <__aeabi_unwind_cpp_pr1>:
   268f4:	2301      	movs	r3, #1
   268f6:	e693      	b.n	26620 <__gnu_unwind_pr_common>

000268f8 <__aeabi_unwind_cpp_pr2>:
   268f8:	2302      	movs	r3, #2
   268fa:	e691      	b.n	26620 <__gnu_unwind_pr_common>

000268fc <_Unwind_VRS_Pop>:
   268fc:	b5f0      	push	{r4, r5, r6, r7, lr}
   268fe:	4604      	mov	r4, r0
   26900:	b0c5      	sub	sp, #276	; 0x114
   26902:	2904      	cmp	r1, #4
   26904:	d80d      	bhi.n	26922 <_Unwind_VRS_Pop+0x26>
   26906:	e8df f001 	tbb	[pc, r1]
   2690a:	0353      	.short	0x0353
   2690c:	310c      	.short	0x310c
   2690e:	0f          	.byte	0x0f
   2690f:	00          	.byte	0x00
   26910:	2b01      	cmp	r3, #1
   26912:	ea4f 4612 	mov.w	r6, r2, lsr #16
   26916:	b295      	uxth	r5, r2
   26918:	d162      	bne.n	269e0 <_Unwind_VRS_Pop+0xe4>
   2691a:	1972      	adds	r2, r6, r5
   2691c:	2a10      	cmp	r2, #16
   2691e:	f240 809b 	bls.w	26a58 <_Unwind_VRS_Pop+0x15c>
   26922:	2002      	movs	r0, #2
   26924:	b045      	add	sp, #276	; 0x114
   26926:	bdf0      	pop	{r4, r5, r6, r7, pc}
   26928:	2b00      	cmp	r3, #0
   2692a:	d1fa      	bne.n	26922 <_Unwind_VRS_Pop+0x26>
   2692c:	2a10      	cmp	r2, #16
   2692e:	d8f8      	bhi.n	26922 <_Unwind_VRS_Pop+0x26>
   26930:	6823      	ldr	r3, [r4, #0]
   26932:	06d8      	lsls	r0, r3, #27
   26934:	f100 80c6 	bmi.w	26ac4 <_Unwind_VRS_Pop+0x1c8>
   26938:	ae22      	add	r6, sp, #136	; 0x88
   2693a:	4630      	mov	r0, r6
   2693c:	9201      	str	r2, [sp, #4]
   2693e:	f000 f973 	bl	26c28 <__gnu_Unwind_Save_WMMXC>
   26942:	6ba0      	ldr	r0, [r4, #56]	; 0x38
   26944:	9a01      	ldr	r2, [sp, #4]
   26946:	2300      	movs	r3, #0
   26948:	2501      	movs	r5, #1
   2694a:	fa05 f103 	lsl.w	r1, r5, r3
   2694e:	4211      	tst	r1, r2
   26950:	d003      	beq.n	2695a <_Unwind_VRS_Pop+0x5e>
   26952:	6801      	ldr	r1, [r0, #0]
   26954:	f846 1023 	str.w	r1, [r6, r3, lsl #2]
   26958:	3004      	adds	r0, #4
   2695a:	3301      	adds	r3, #1
   2695c:	2b04      	cmp	r3, #4
   2695e:	d1f4      	bne.n	2694a <_Unwind_VRS_Pop+0x4e>
   26960:	63a0      	str	r0, [r4, #56]	; 0x38
   26962:	4630      	mov	r0, r6
   26964:	f000 f956 	bl	26c14 <__gnu_Unwind_Restore_WMMXC>
   26968:	2000      	movs	r0, #0
   2696a:	e7db      	b.n	26924 <_Unwind_VRS_Pop+0x28>
   2696c:	2b03      	cmp	r3, #3
   2696e:	d1d8      	bne.n	26922 <_Unwind_VRS_Pop+0x26>
   26970:	0c15      	lsrs	r5, r2, #16
   26972:	b297      	uxth	r7, r2
   26974:	19eb      	adds	r3, r5, r7
   26976:	2b10      	cmp	r3, #16
   26978:	d8d3      	bhi.n	26922 <_Unwind_VRS_Pop+0x26>
   2697a:	6823      	ldr	r3, [r4, #0]
   2697c:	071e      	lsls	r6, r3, #28
   2697e:	f100 80b5 	bmi.w	26aec <_Unwind_VRS_Pop+0x1f0>
   26982:	ae22      	add	r6, sp, #136	; 0x88
   26984:	4630      	mov	r0, r6
   26986:	f000 f923 	bl	26bd0 <__gnu_Unwind_Save_WMMXD>
   2698a:	00ed      	lsls	r5, r5, #3
   2698c:	6ba3      	ldr	r3, [r4, #56]	; 0x38
   2698e:	b14f      	cbz	r7, 269a4 <_Unwind_VRS_Pop+0xa8>
   26990:	3d04      	subs	r5, #4
   26992:	1971      	adds	r1, r6, r5
   26994:	eb03 00c7 	add.w	r0, r3, r7, lsl #3
   26998:	f853 2b04 	ldr.w	r2, [r3], #4
   2699c:	f841 2f04 	str.w	r2, [r1, #4]!
   269a0:	4283      	cmp	r3, r0
   269a2:	d1f9      	bne.n	26998 <_Unwind_VRS_Pop+0x9c>
   269a4:	4630      	mov	r0, r6
   269a6:	63a3      	str	r3, [r4, #56]	; 0x38
   269a8:	f000 f8f0 	bl	26b8c <__gnu_Unwind_Restore_WMMXD>
   269ac:	2000      	movs	r0, #0
   269ae:	e7b9      	b.n	26924 <_Unwind_VRS_Pop+0x28>
   269b0:	2b00      	cmp	r3, #0
   269b2:	d1b6      	bne.n	26922 <_Unwind_VRS_Pop+0x26>
   269b4:	6ba5      	ldr	r5, [r4, #56]	; 0x38
   269b6:	b297      	uxth	r7, r2
   269b8:	1d20      	adds	r0, r4, #4
   269ba:	2601      	movs	r6, #1
   269bc:	fa06 f103 	lsl.w	r1, r6, r3
   269c0:	4239      	tst	r1, r7
   269c2:	f103 0301 	add.w	r3, r3, #1
   269c6:	d002      	beq.n	269ce <_Unwind_VRS_Pop+0xd2>
   269c8:	6829      	ldr	r1, [r5, #0]
   269ca:	6001      	str	r1, [r0, #0]
   269cc:	3504      	adds	r5, #4
   269ce:	2b10      	cmp	r3, #16
   269d0:	f100 0004 	add.w	r0, r0, #4
   269d4:	d1f2      	bne.n	269bc <_Unwind_VRS_Pop+0xc0>
   269d6:	f412 5000 	ands.w	r0, r2, #8192	; 0x2000
   269da:	d13b      	bne.n	26a54 <_Unwind_VRS_Pop+0x158>
   269dc:	63a5      	str	r5, [r4, #56]	; 0x38
   269de:	e7a1      	b.n	26924 <_Unwind_VRS_Pop+0x28>
   269e0:	2b05      	cmp	r3, #5
   269e2:	d19e      	bne.n	26922 <_Unwind_VRS_Pop+0x26>
   269e4:	1977      	adds	r7, r6, r5
   269e6:	2f20      	cmp	r7, #32
   269e8:	d89b      	bhi.n	26922 <_Unwind_VRS_Pop+0x26>
   269ea:	2e0f      	cmp	r6, #15
   269ec:	d966      	bls.n	26abc <_Unwind_VRS_Pop+0x1c0>
   269ee:	462f      	mov	r7, r5
   269f0:	2d00      	cmp	r5, #0
   269f2:	d13a      	bne.n	26a6a <_Unwind_VRS_Pop+0x16e>
   269f4:	462a      	mov	r2, r5
   269f6:	2700      	movs	r7, #0
   269f8:	2a00      	cmp	r2, #0
   269fa:	6ba0      	ldr	r0, [r4, #56]	; 0x38
   269fc:	dd72      	ble.n	26ae4 <_Unwind_VRS_Pop+0x1e8>
   269fe:	eb00 02c2 	add.w	r2, r0, r2, lsl #3
   26a02:	4601      	mov	r1, r0
   26a04:	a844      	add	r0, sp, #272	; 0x110
   26a06:	eb00 00c6 	add.w	r0, r0, r6, lsl #3
   26a0a:	388c      	subs	r0, #140	; 0x8c
   26a0c:	f851 5b04 	ldr.w	r5, [r1], #4
   26a10:	f840 5f04 	str.w	r5, [r0, #4]!
   26a14:	4291      	cmp	r1, r2
   26a16:	d1f9      	bne.n	26a0c <_Unwind_VRS_Pop+0x110>
   26a18:	4608      	mov	r0, r1
   26a1a:	b197      	cbz	r7, 26a42 <_Unwind_VRS_Pop+0x146>
   26a1c:	2e10      	cmp	r6, #16
   26a1e:	4632      	mov	r2, r6
   26a20:	a944      	add	r1, sp, #272	; 0x110
   26a22:	bf38      	it	cc
   26a24:	2210      	movcc	r2, #16
   26a26:	eb01 02c2 	add.w	r2, r1, r2, lsl #3
   26a2a:	f5a2 72c4 	sub.w	r2, r2, #392	; 0x188
   26a2e:	0079      	lsls	r1, r7, #1
   26a30:	3a04      	subs	r2, #4
   26a32:	eb00 0181 	add.w	r1, r0, r1, lsl #2
   26a36:	f850 5b04 	ldr.w	r5, [r0], #4
   26a3a:	f842 5f04 	str.w	r5, [r2, #4]!
   26a3e:	4288      	cmp	r0, r1
   26a40:	d1f9      	bne.n	26a36 <_Unwind_VRS_Pop+0x13a>
   26a42:	2b01      	cmp	r3, #1
   26a44:	d048      	beq.n	26ad8 <_Unwind_VRS_Pop+0x1dc>
   26a46:	2e0f      	cmp	r6, #15
   26a48:	63a1      	str	r1, [r4, #56]	; 0x38
   26a4a:	d933      	bls.n	26ab4 <_Unwind_VRS_Pop+0x1b8>
   26a4c:	b117      	cbz	r7, 26a54 <_Unwind_VRS_Pop+0x158>
   26a4e:	a802      	add	r0, sp, #8
   26a50:	f000 f894 	bl	26b7c <__gnu_Unwind_Restore_VFP_D_16_to_31>
   26a54:	2000      	movs	r0, #0
   26a56:	e765      	b.n	26924 <_Unwind_VRS_Pop+0x28>
   26a58:	2e0f      	cmp	r6, #15
   26a5a:	f63f af62 	bhi.w	26922 <_Unwind_VRS_Pop+0x26>
   26a5e:	2700      	movs	r7, #0
   26a60:	6822      	ldr	r2, [r4, #0]
   26a62:	07d1      	lsls	r1, r2, #31
   26a64:	d417      	bmi.n	26a96 <_Unwind_VRS_Pop+0x19a>
   26a66:	2f00      	cmp	r7, #0
   26a68:	d060      	beq.n	26b2c <_Unwind_VRS_Pop+0x230>
   26a6a:	6822      	ldr	r2, [r4, #0]
   26a6c:	0751      	lsls	r1, r2, #29
   26a6e:	d445      	bmi.n	26afc <_Unwind_VRS_Pop+0x200>
   26a70:	2b01      	cmp	r3, #1
   26a72:	d04d      	beq.n	26b10 <_Unwind_VRS_Pop+0x214>
   26a74:	2e0f      	cmp	r6, #15
   26a76:	d806      	bhi.n	26a86 <_Unwind_VRS_Pop+0x18a>
   26a78:	a822      	add	r0, sp, #136	; 0x88
   26a7a:	9301      	str	r3, [sp, #4]
   26a7c:	f000 f87a 	bl	26b74 <__gnu_Unwind_Save_VFP_D>
   26a80:	9b01      	ldr	r3, [sp, #4]
   26a82:	2f00      	cmp	r7, #0
   26a84:	d0b6      	beq.n	269f4 <_Unwind_VRS_Pop+0xf8>
   26a86:	a802      	add	r0, sp, #8
   26a88:	9301      	str	r3, [sp, #4]
   26a8a:	f000 f87b 	bl	26b84 <__gnu_Unwind_Save_VFP_D_16_to_31>
   26a8e:	9b01      	ldr	r3, [sp, #4]
   26a90:	f1c6 0210 	rsb	r2, r6, #16
   26a94:	e7b0      	b.n	269f8 <_Unwind_VRS_Pop+0xfc>
   26a96:	f022 0101 	bic.w	r1, r2, #1
   26a9a:	2b05      	cmp	r3, #5
   26a9c:	6021      	str	r1, [r4, #0]
   26a9e:	9301      	str	r3, [sp, #4]
   26aa0:	4620      	mov	r0, r4
   26aa2:	d03b      	beq.n	26b1c <_Unwind_VRS_Pop+0x220>
   26aa4:	f022 0203 	bic.w	r2, r2, #3
   26aa8:	f840 2b48 	str.w	r2, [r0], #72
   26aac:	f000 f85a 	bl	26b64 <__gnu_Unwind_Save_VFP>
   26ab0:	9b01      	ldr	r3, [sp, #4]
   26ab2:	e7d8      	b.n	26a66 <_Unwind_VRS_Pop+0x16a>
   26ab4:	a822      	add	r0, sp, #136	; 0x88
   26ab6:	f000 f859 	bl	26b6c <__gnu_Unwind_Restore_VFP_D>
   26aba:	e7c7      	b.n	26a4c <_Unwind_VRS_Pop+0x150>
   26abc:	2f10      	cmp	r7, #16
   26abe:	d9ce      	bls.n	26a5e <_Unwind_VRS_Pop+0x162>
   26ac0:	3f10      	subs	r7, #16
   26ac2:	e7cd      	b.n	26a60 <_Unwind_VRS_Pop+0x164>
   26ac4:	f023 0310 	bic.w	r3, r3, #16
   26ac8:	6023      	str	r3, [r4, #0]
   26aca:	f504 70e8 	add.w	r0, r4, #464	; 0x1d0
   26ace:	9201      	str	r2, [sp, #4]
   26ad0:	f000 f8aa 	bl	26c28 <__gnu_Unwind_Save_WMMXC>
   26ad4:	9a01      	ldr	r2, [sp, #4]
   26ad6:	e72f      	b.n	26938 <_Unwind_VRS_Pop+0x3c>
   26ad8:	3104      	adds	r1, #4
   26ada:	63a1      	str	r1, [r4, #56]	; 0x38
   26adc:	a822      	add	r0, sp, #136	; 0x88
   26ade:	f000 f83d 	bl	26b5c <__gnu_Unwind_Restore_VFP>
   26ae2:	e7b7      	b.n	26a54 <_Unwind_VRS_Pop+0x158>
   26ae4:	2f00      	cmp	r7, #0
   26ae6:	d199      	bne.n	26a1c <_Unwind_VRS_Pop+0x120>
   26ae8:	4601      	mov	r1, r0
   26aea:	e7aa      	b.n	26a42 <_Unwind_VRS_Pop+0x146>
   26aec:	f023 0308 	bic.w	r3, r3, #8
   26af0:	6023      	str	r3, [r4, #0]
   26af2:	f504 70a8 	add.w	r0, r4, #336	; 0x150
   26af6:	f000 f86b 	bl	26bd0 <__gnu_Unwind_Save_WMMXD>
   26afa:	e742      	b.n	26982 <_Unwind_VRS_Pop+0x86>
   26afc:	4620      	mov	r0, r4
   26afe:	f022 0204 	bic.w	r2, r2, #4
   26b02:	f840 2bd0 	str.w	r2, [r0], #208
   26b06:	9301      	str	r3, [sp, #4]
   26b08:	f000 f83c 	bl	26b84 <__gnu_Unwind_Save_VFP_D_16_to_31>
   26b0c:	9b01      	ldr	r3, [sp, #4]
   26b0e:	e7af      	b.n	26a70 <_Unwind_VRS_Pop+0x174>
   26b10:	a822      	add	r0, sp, #136	; 0x88
   26b12:	9301      	str	r3, [sp, #4]
   26b14:	f000 f826 	bl	26b64 <__gnu_Unwind_Save_VFP>
   26b18:	9b01      	ldr	r3, [sp, #4]
   26b1a:	e7b9      	b.n	26a90 <_Unwind_VRS_Pop+0x194>
   26b1c:	f041 0102 	orr.w	r1, r1, #2
   26b20:	f840 1b48 	str.w	r1, [r0], #72
   26b24:	f000 f826 	bl	26b74 <__gnu_Unwind_Save_VFP_D>
   26b28:	9b01      	ldr	r3, [sp, #4]
   26b2a:	e79c      	b.n	26a66 <_Unwind_VRS_Pop+0x16a>
   26b2c:	2b01      	cmp	r3, #1
   26b2e:	d003      	beq.n	26b38 <_Unwind_VRS_Pop+0x23c>
   26b30:	2e0f      	cmp	r6, #15
   26b32:	f63f af5f 	bhi.w	269f4 <_Unwind_VRS_Pop+0xf8>
   26b36:	e79f      	b.n	26a78 <_Unwind_VRS_Pop+0x17c>
   26b38:	a822      	add	r0, sp, #136	; 0x88
   26b3a:	9301      	str	r3, [sp, #4]
   26b3c:	f000 f812 	bl	26b64 <__gnu_Unwind_Save_VFP>
   26b40:	9b01      	ldr	r3, [sp, #4]
   26b42:	e757      	b.n	269f4 <_Unwind_VRS_Pop+0xf8>

00026b44 <__restore_core_regs>:
   26b44:	f100 0134 	add.w	r1, r0, #52	; 0x34
   26b48:	e891 0038 	ldmia.w	r1, {r3, r4, r5}
   26b4c:	469c      	mov	ip, r3
   26b4e:	46a6      	mov	lr, r4
   26b50:	f84c 5d04 	str.w	r5, [ip, #-4]!
   26b54:	e890 0fff 	ldmia.w	r0, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp}
   26b58:	46e5      	mov	sp, ip
   26b5a:	bd00      	pop	{pc}

00026b5c <__gnu_Unwind_Restore_VFP>:
   26b5c:	ec90 0b21 	fldmiax	r0, {d0-d15}	;@ Deprecated
   26b60:	4770      	bx	lr
   26b62:	bf00      	nop

00026b64 <__gnu_Unwind_Save_VFP>:
   26b64:	ec80 0b21 	fstmiax	r0, {d0-d15}	;@ Deprecated
   26b68:	4770      	bx	lr
   26b6a:	bf00      	nop

00026b6c <__gnu_Unwind_Restore_VFP_D>:
   26b6c:	ec90 0b20 	vldmia	r0, {d0-d15}
   26b70:	4770      	bx	lr
   26b72:	bf00      	nop

00026b74 <__gnu_Unwind_Save_VFP_D>:
   26b74:	ec80 0b20 	vstmia	r0, {d0-d15}
   26b78:	4770      	bx	lr
   26b7a:	bf00      	nop

00026b7c <__gnu_Unwind_Restore_VFP_D_16_to_31>:
   26b7c:	ecd0 0b20 	vldmia	r0, {d16-d31}
   26b80:	4770      	bx	lr
   26b82:	bf00      	nop

00026b84 <__gnu_Unwind_Save_VFP_D_16_to_31>:
   26b84:	ecc0 0b20 	vstmia	r0, {d16-d31}
   26b88:	4770      	bx	lr
   26b8a:	bf00      	nop

00026b8c <__gnu_Unwind_Restore_WMMXD>:
   26b8c:	ecf0 0102 	ldfe	f0, [r0], #8
   26b90:	ecf0 1102 	ldfe	f1, [r0], #8
   26b94:	ecf0 2102 	ldfe	f2, [r0], #8
   26b98:	ecf0 3102 	ldfe	f3, [r0], #8
   26b9c:	ecf0 4102 	ldfe	f4, [r0], #8
   26ba0:	ecf0 5102 	ldfe	f5, [r0], #8
   26ba4:	ecf0 6102 	ldfe	f6, [r0], #8
   26ba8:	ecf0 7102 	ldfe	f7, [r0], #8
   26bac:	ecf0 8102 	ldfp	f0, [r0], #8
   26bb0:	ecf0 9102 	ldfp	f1, [r0], #8
   26bb4:	ecf0 a102 	ldfp	f2, [r0], #8
   26bb8:	ecf0 b102 	ldfp	f3, [r0], #8
   26bbc:	ecf0 c102 	ldfp	f4, [r0], #8
   26bc0:	ecf0 d102 	ldfp	f5, [r0], #8
   26bc4:	ecf0 e102 	ldfp	f6, [r0], #8
   26bc8:	ecf0 f102 	ldfp	f7, [r0], #8
   26bcc:	4770      	bx	lr
   26bce:	bf00      	nop

00026bd0 <__gnu_Unwind_Save_WMMXD>:
   26bd0:	ece0 0102 	stfe	f0, [r0], #8
   26bd4:	ece0 1102 	stfe	f1, [r0], #8
   26bd8:	ece0 2102 	stfe	f2, [r0], #8
   26bdc:	ece0 3102 	stfe	f3, [r0], #8
   26be0:	ece0 4102 	stfe	f4, [r0], #8
   26be4:	ece0 5102 	stfe	f5, [r0], #8
   26be8:	ece0 6102 	stfe	f6, [r0], #8
   26bec:	ece0 7102 	stfe	f7, [r0], #8
   26bf0:	ece0 8102 	stfp	f0, [r0], #8
   26bf4:	ece0 9102 	stfp	f1, [r0], #8
   26bf8:	ece0 a102 	stfp	f2, [r0], #8
   26bfc:	ece0 b102 	stfp	f3, [r0], #8
   26c00:	ece0 c102 	stfp	f4, [r0], #8
   26c04:	ece0 d102 	stfp	f5, [r0], #8
   26c08:	ece0 e102 	stfp	f6, [r0], #8
   26c0c:	ece0 f102 	stfp	f7, [r0], #8
   26c10:	4770      	bx	lr
   26c12:	bf00      	nop

00026c14 <__gnu_Unwind_Restore_WMMXC>:
   26c14:	fcb0 8101 	ldc2	1, cr8, [r0], #4
   26c18:	fcb0 9101 	ldc2	1, cr9, [r0], #4
   26c1c:	fcb0 a101 	ldc2	1, cr10, [r0], #4
   26c20:	fcb0 b101 	ldc2	1, cr11, [r0], #4
   26c24:	4770      	bx	lr
   26c26:	bf00      	nop

00026c28 <__gnu_Unwind_Save_WMMXC>:
   26c28:	fca0 8101 	stc2	1, cr8, [r0], #4
   26c2c:	fca0 9101 	stc2	1, cr9, [r0], #4
   26c30:	fca0 a101 	stc2	1, cr10, [r0], #4
   26c34:	fca0 b101 	stc2	1, cr11, [r0], #4
   26c38:	4770      	bx	lr
   26c3a:	bf00      	nop

00026c3c <_Unwind_RaiseException>:
   26c3c:	46ec      	mov	ip, sp
   26c3e:	b500      	push	{lr}
   26c40:	e92d 5000 	stmdb	sp!, {ip, lr}
   26c44:	e92d 1fff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip}
   26c48:	f04f 0300 	mov.w	r3, #0
   26c4c:	e92d 000c 	stmdb	sp!, {r2, r3}
   26c50:	a901      	add	r1, sp, #4
   26c52:	f7ff fbf3 	bl	2643c <__gnu_Unwind_RaiseException>
   26c56:	f8dd e040 	ldr.w	lr, [sp, #64]	; 0x40
   26c5a:	b012      	add	sp, #72	; 0x48
   26c5c:	4770      	bx	lr
   26c5e:	bf00      	nop

00026c60 <_Unwind_Resume>:
   26c60:	46ec      	mov	ip, sp
   26c62:	b500      	push	{lr}
   26c64:	e92d 5000 	stmdb	sp!, {ip, lr}
   26c68:	e92d 1fff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip}
   26c6c:	f04f 0300 	mov.w	r3, #0
   26c70:	e92d 000c 	stmdb	sp!, {r2, r3}
   26c74:	a901      	add	r1, sp, #4
   26c76:	f7ff fc1b 	bl	264b0 <__gnu_Unwind_Resume>
   26c7a:	f8dd e040 	ldr.w	lr, [sp, #64]	; 0x40
   26c7e:	b012      	add	sp, #72	; 0x48
   26c80:	4770      	bx	lr
   26c82:	bf00      	nop

00026c84 <_Unwind_Resume_or_Rethrow>:
   26c84:	46ec      	mov	ip, sp
   26c86:	b500      	push	{lr}
   26c88:	e92d 5000 	stmdb	sp!, {ip, lr}
   26c8c:	e92d 1fff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip}
   26c90:	f04f 0300 	mov.w	r3, #0
   26c94:	e92d 000c 	stmdb	sp!, {r2, r3}
   26c98:	a901      	add	r1, sp, #4
   26c9a:	f7ff fc2b 	bl	264f4 <__gnu_Unwind_Resume_or_Rethrow>
   26c9e:	f8dd e040 	ldr.w	lr, [sp, #64]	; 0x40
   26ca2:	b012      	add	sp, #72	; 0x48
   26ca4:	4770      	bx	lr
   26ca6:	bf00      	nop

00026ca8 <_Unwind_ForcedUnwind>:
   26ca8:	46ec      	mov	ip, sp
   26caa:	b500      	push	{lr}
   26cac:	e92d 5000 	stmdb	sp!, {ip, lr}
   26cb0:	e92d 1fff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip}
   26cb4:	f04f 0300 	mov.w	r3, #0
   26cb8:	e92d 000c 	stmdb	sp!, {r2, r3}
   26cbc:	ab01      	add	r3, sp, #4
   26cbe:	f7ff fbed 	bl	2649c <__gnu_Unwind_ForcedUnwind>
   26cc2:	f8dd e040 	ldr.w	lr, [sp, #64]	; 0x40
   26cc6:	b012      	add	sp, #72	; 0x48
   26cc8:	4770      	bx	lr
   26cca:	bf00      	nop

00026ccc <_Unwind_Backtrace>:
   26ccc:	46ec      	mov	ip, sp
   26cce:	b500      	push	{lr}
   26cd0:	e92d 5000 	stmdb	sp!, {ip, lr}
   26cd4:	e92d 1fff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip}
   26cd8:	f04f 0300 	mov.w	r3, #0
   26cdc:	e92d 000c 	stmdb	sp!, {r2, r3}
   26ce0:	aa01      	add	r2, sp, #4
   26ce2:	f7ff fc65 	bl	265b0 <__gnu_Unwind_Backtrace>
   26ce6:	f8dd e040 	ldr.w	lr, [sp, #64]	; 0x40
   26cea:	b012      	add	sp, #72	; 0x48
   26cec:	4770      	bx	lr
   26cee:	bf00      	nop

00026cf0 <next_unwind_byte>:
   26cf0:	7a02      	ldrb	r2, [r0, #8]
   26cf2:	b91a      	cbnz	r2, 26cfc <next_unwind_byte+0xc>
   26cf4:	7a43      	ldrb	r3, [r0, #9]
   26cf6:	b943      	cbnz	r3, 26d0a <next_unwind_byte+0x1a>
   26cf8:	20b0      	movs	r0, #176	; 0xb0
   26cfa:	4770      	bx	lr
   26cfc:	6803      	ldr	r3, [r0, #0]
   26cfe:	3a01      	subs	r2, #1
   26d00:	7202      	strb	r2, [r0, #8]
   26d02:	021a      	lsls	r2, r3, #8
   26d04:	6002      	str	r2, [r0, #0]
   26d06:	0e18      	lsrs	r0, r3, #24
   26d08:	4770      	bx	lr
   26d0a:	6842      	ldr	r2, [r0, #4]
   26d0c:	3b01      	subs	r3, #1
   26d0e:	b410      	push	{r4}
   26d10:	7243      	strb	r3, [r0, #9]
   26d12:	6813      	ldr	r3, [r2, #0]
   26d14:	2103      	movs	r1, #3
   26d16:	1d14      	adds	r4, r2, #4
   26d18:	7201      	strb	r1, [r0, #8]
   26d1a:	021a      	lsls	r2, r3, #8
   26d1c:	6044      	str	r4, [r0, #4]
   26d1e:	6002      	str	r2, [r0, #0]
   26d20:	f85d 4b04 	ldr.w	r4, [sp], #4
   26d24:	0e18      	lsrs	r0, r3, #24
   26d26:	4770      	bx	lr

00026d28 <_Unwind_GetGR.constprop.0>:
   26d28:	b500      	push	{lr}
   26d2a:	b085      	sub	sp, #20
   26d2c:	aa03      	add	r2, sp, #12
   26d2e:	2300      	movs	r3, #0
   26d30:	9200      	str	r2, [sp, #0]
   26d32:	4619      	mov	r1, r3
   26d34:	220c      	movs	r2, #12
   26d36:	f7ff fbed 	bl	26514 <_Unwind_VRS_Get>
   26d3a:	9803      	ldr	r0, [sp, #12]
   26d3c:	b005      	add	sp, #20
   26d3e:	f85d fb04 	ldr.w	pc, [sp], #4
   26d42:	bf00      	nop

00026d44 <unwind_UCB_from_context>:
   26d44:	e7f0      	b.n	26d28 <_Unwind_GetGR.constprop.0>
   26d46:	bf00      	nop

00026d48 <__gnu_unwind_execute>:
   26d48:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   26d4c:	4606      	mov	r6, r0
   26d4e:	b085      	sub	sp, #20
   26d50:	460f      	mov	r7, r1
   26d52:	f04f 0800 	mov.w	r8, #0
   26d56:	4638      	mov	r0, r7
   26d58:	f7ff ffca 	bl	26cf0 <next_unwind_byte>
   26d5c:	28b0      	cmp	r0, #176	; 0xb0
   26d5e:	4604      	mov	r4, r0
   26d60:	d023      	beq.n	26daa <__gnu_unwind_execute+0x62>
   26d62:	0605      	lsls	r5, r0, #24
   26d64:	d427      	bmi.n	26db6 <__gnu_unwind_execute+0x6e>
   26d66:	2300      	movs	r3, #0
   26d68:	f10d 090c 	add.w	r9, sp, #12
   26d6c:	4619      	mov	r1, r3
   26d6e:	0085      	lsls	r5, r0, #2
   26d70:	220d      	movs	r2, #13
   26d72:	f8cd 9000 	str.w	r9, [sp]
   26d76:	4630      	mov	r0, r6
   26d78:	f7ff fbcc 	bl	26514 <_Unwind_VRS_Get>
   26d7c:	b2ed      	uxtb	r5, r5
   26d7e:	9b03      	ldr	r3, [sp, #12]
   26d80:	f8cd 9000 	str.w	r9, [sp]
   26d84:	0660      	lsls	r0, r4, #25
   26d86:	f105 0504 	add.w	r5, r5, #4
   26d8a:	bf4c      	ite	mi
   26d8c:	1b5d      	submi	r5, r3, r5
   26d8e:	18ed      	addpl	r5, r5, r3
   26d90:	2300      	movs	r3, #0
   26d92:	4619      	mov	r1, r3
   26d94:	220d      	movs	r2, #13
   26d96:	4630      	mov	r0, r6
   26d98:	9503      	str	r5, [sp, #12]
   26d9a:	f7ff fbe1 	bl	26560 <_Unwind_VRS_Set>
   26d9e:	4638      	mov	r0, r7
   26da0:	f7ff ffa6 	bl	26cf0 <next_unwind_byte>
   26da4:	28b0      	cmp	r0, #176	; 0xb0
   26da6:	4604      	mov	r4, r0
   26da8:	d1db      	bne.n	26d62 <__gnu_unwind_execute+0x1a>
   26daa:	f1b8 0f00 	cmp.w	r8, #0
   26dae:	f000 8095 	beq.w	26edc <__gnu_unwind_execute+0x194>
   26db2:	2000      	movs	r0, #0
   26db4:	e01c      	b.n	26df0 <__gnu_unwind_execute+0xa8>
   26db6:	f000 03f0 	and.w	r3, r0, #240	; 0xf0
   26dba:	2b80      	cmp	r3, #128	; 0x80
   26dbc:	d05d      	beq.n	26e7a <__gnu_unwind_execute+0x132>
   26dbe:	2b90      	cmp	r3, #144	; 0x90
   26dc0:	d019      	beq.n	26df6 <__gnu_unwind_execute+0xae>
   26dc2:	2ba0      	cmp	r3, #160	; 0xa0
   26dc4:	d02c      	beq.n	26e20 <__gnu_unwind_execute+0xd8>
   26dc6:	2bb0      	cmp	r3, #176	; 0xb0
   26dc8:	d03f      	beq.n	26e4a <__gnu_unwind_execute+0x102>
   26dca:	2bc0      	cmp	r3, #192	; 0xc0
   26dcc:	d06c      	beq.n	26ea8 <__gnu_unwind_execute+0x160>
   26dce:	f000 03f8 	and.w	r3, r0, #248	; 0xf8
   26dd2:	2bd0      	cmp	r3, #208	; 0xd0
   26dd4:	d10b      	bne.n	26dee <__gnu_unwind_execute+0xa6>
   26dd6:	f000 0207 	and.w	r2, r0, #7
   26dda:	3201      	adds	r2, #1
   26ddc:	f442 2200 	orr.w	r2, r2, #524288	; 0x80000
   26de0:	2305      	movs	r3, #5
   26de2:	2101      	movs	r1, #1
   26de4:	4630      	mov	r0, r6
   26de6:	f7ff fd89 	bl	268fc <_Unwind_VRS_Pop>
   26dea:	2800      	cmp	r0, #0
   26dec:	d0b3      	beq.n	26d56 <__gnu_unwind_execute+0xe>
   26dee:	2009      	movs	r0, #9
   26df0:	b005      	add	sp, #20
   26df2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   26df6:	f000 030d 	and.w	r3, r0, #13
   26dfa:	2b0d      	cmp	r3, #13
   26dfc:	d0f7      	beq.n	26dee <__gnu_unwind_execute+0xa6>
   26dfe:	ad03      	add	r5, sp, #12
   26e00:	2300      	movs	r3, #0
   26e02:	f000 020f 	and.w	r2, r0, #15
   26e06:	4619      	mov	r1, r3
   26e08:	9500      	str	r5, [sp, #0]
   26e0a:	4630      	mov	r0, r6
   26e0c:	f7ff fb82 	bl	26514 <_Unwind_VRS_Get>
   26e10:	2300      	movs	r3, #0
   26e12:	9500      	str	r5, [sp, #0]
   26e14:	4619      	mov	r1, r3
   26e16:	220d      	movs	r2, #13
   26e18:	4630      	mov	r0, r6
   26e1a:	f7ff fba1 	bl	26560 <_Unwind_VRS_Set>
   26e1e:	e79a      	b.n	26d56 <__gnu_unwind_execute+0xe>
   26e20:	43c2      	mvns	r2, r0
   26e22:	f002 0307 	and.w	r3, r2, #7
   26e26:	f44f 627f 	mov.w	r2, #4080	; 0xff0
   26e2a:	411a      	asrs	r2, r3
   26e2c:	0701      	lsls	r1, r0, #28
   26e2e:	f402 627f 	and.w	r2, r2, #4080	; 0xff0
   26e32:	f04f 0300 	mov.w	r3, #0
   26e36:	bf48      	it	mi
   26e38:	f442 4280 	orrmi.w	r2, r2, #16384	; 0x4000
   26e3c:	4619      	mov	r1, r3
   26e3e:	4630      	mov	r0, r6
   26e40:	f7ff fd5c 	bl	268fc <_Unwind_VRS_Pop>
   26e44:	2800      	cmp	r0, #0
   26e46:	d1d2      	bne.n	26dee <__gnu_unwind_execute+0xa6>
   26e48:	e785      	b.n	26d56 <__gnu_unwind_execute+0xe>
   26e4a:	28b1      	cmp	r0, #177	; 0xb1
   26e4c:	d057      	beq.n	26efe <__gnu_unwind_execute+0x1b6>
   26e4e:	28b2      	cmp	r0, #178	; 0xb2
   26e50:	d068      	beq.n	26f24 <__gnu_unwind_execute+0x1dc>
   26e52:	28b3      	cmp	r0, #179	; 0xb3
   26e54:	f000 8095 	beq.w	26f82 <__gnu_unwind_execute+0x23a>
   26e58:	f000 03fc 	and.w	r3, r0, #252	; 0xfc
   26e5c:	2bb4      	cmp	r3, #180	; 0xb4
   26e5e:	d0c6      	beq.n	26dee <__gnu_unwind_execute+0xa6>
   26e60:	f000 0207 	and.w	r2, r0, #7
   26e64:	3201      	adds	r2, #1
   26e66:	2301      	movs	r3, #1
   26e68:	f442 2200 	orr.w	r2, r2, #524288	; 0x80000
   26e6c:	4619      	mov	r1, r3
   26e6e:	4630      	mov	r0, r6
   26e70:	f7ff fd44 	bl	268fc <_Unwind_VRS_Pop>
   26e74:	2800      	cmp	r0, #0
   26e76:	d1ba      	bne.n	26dee <__gnu_unwind_execute+0xa6>
   26e78:	e76d      	b.n	26d56 <__gnu_unwind_execute+0xe>
   26e7a:	4638      	mov	r0, r7
   26e7c:	f7ff ff38 	bl	26cf0 <next_unwind_byte>
   26e80:	0224      	lsls	r4, r4, #8
   26e82:	4304      	orrs	r4, r0
   26e84:	f5b4 4f00 	cmp.w	r4, #32768	; 0x8000
   26e88:	d0b1      	beq.n	26dee <__gnu_unwind_execute+0xa6>
   26e8a:	0124      	lsls	r4, r4, #4
   26e8c:	2300      	movs	r3, #0
   26e8e:	b2a2      	uxth	r2, r4
   26e90:	4619      	mov	r1, r3
   26e92:	4630      	mov	r0, r6
   26e94:	f7ff fd32 	bl	268fc <_Unwind_VRS_Pop>
   26e98:	2800      	cmp	r0, #0
   26e9a:	d1a8      	bne.n	26dee <__gnu_unwind_execute+0xa6>
   26e9c:	f414 4f00 	tst.w	r4, #32768	; 0x8000
   26ea0:	bf18      	it	ne
   26ea2:	f04f 0801 	movne.w	r8, #1
   26ea6:	e756      	b.n	26d56 <__gnu_unwind_execute+0xe>
   26ea8:	28c6      	cmp	r0, #198	; 0xc6
   26eaa:	d07d      	beq.n	26fa8 <__gnu_unwind_execute+0x260>
   26eac:	28c7      	cmp	r0, #199	; 0xc7
   26eae:	f000 8086 	beq.w	26fbe <__gnu_unwind_execute+0x276>
   26eb2:	f000 03f8 	and.w	r3, r0, #248	; 0xf8
   26eb6:	2bc0      	cmp	r3, #192	; 0xc0
   26eb8:	f000 8094 	beq.w	26fe4 <__gnu_unwind_execute+0x29c>
   26ebc:	28c8      	cmp	r0, #200	; 0xc8
   26ebe:	f000 809f 	beq.w	27000 <__gnu_unwind_execute+0x2b8>
   26ec2:	28c9      	cmp	r0, #201	; 0xc9
   26ec4:	d193      	bne.n	26dee <__gnu_unwind_execute+0xa6>
   26ec6:	4638      	mov	r0, r7
   26ec8:	f7ff ff12 	bl	26cf0 <next_unwind_byte>
   26ecc:	0302      	lsls	r2, r0, #12
   26ece:	f000 000f 	and.w	r0, r0, #15
   26ed2:	f402 2270 	and.w	r2, r2, #983040	; 0xf0000
   26ed6:	3001      	adds	r0, #1
   26ed8:	4302      	orrs	r2, r0
   26eda:	e781      	b.n	26de0 <__gnu_unwind_execute+0x98>
   26edc:	ac03      	add	r4, sp, #12
   26ede:	4643      	mov	r3, r8
   26ee0:	220e      	movs	r2, #14
   26ee2:	4641      	mov	r1, r8
   26ee4:	9400      	str	r4, [sp, #0]
   26ee6:	4630      	mov	r0, r6
   26ee8:	f7ff fb14 	bl	26514 <_Unwind_VRS_Get>
   26eec:	9400      	str	r4, [sp, #0]
   26eee:	4630      	mov	r0, r6
   26ef0:	4643      	mov	r3, r8
   26ef2:	220f      	movs	r2, #15
   26ef4:	4641      	mov	r1, r8
   26ef6:	f7ff fb33 	bl	26560 <_Unwind_VRS_Set>
   26efa:	4640      	mov	r0, r8
   26efc:	e778      	b.n	26df0 <__gnu_unwind_execute+0xa8>
   26efe:	4638      	mov	r0, r7
   26f00:	f7ff fef6 	bl	26cf0 <next_unwind_byte>
   26f04:	2800      	cmp	r0, #0
   26f06:	f43f af72 	beq.w	26dee <__gnu_unwind_execute+0xa6>
   26f0a:	f010 03f0 	ands.w	r3, r0, #240	; 0xf0
   26f0e:	f47f af6e 	bne.w	26dee <__gnu_unwind_execute+0xa6>
   26f12:	4602      	mov	r2, r0
   26f14:	4619      	mov	r1, r3
   26f16:	4630      	mov	r0, r6
   26f18:	f7ff fcf0 	bl	268fc <_Unwind_VRS_Pop>
   26f1c:	2800      	cmp	r0, #0
   26f1e:	f47f af66 	bne.w	26dee <__gnu_unwind_execute+0xa6>
   26f22:	e718      	b.n	26d56 <__gnu_unwind_execute+0xe>
   26f24:	2300      	movs	r3, #0
   26f26:	f10d 090c 	add.w	r9, sp, #12
   26f2a:	220d      	movs	r2, #13
   26f2c:	4619      	mov	r1, r3
   26f2e:	f8cd 9000 	str.w	r9, [sp]
   26f32:	4630      	mov	r0, r6
   26f34:	f7ff faee 	bl	26514 <_Unwind_VRS_Get>
   26f38:	4638      	mov	r0, r7
   26f3a:	f7ff fed9 	bl	26cf0 <next_unwind_byte>
   26f3e:	0602      	lsls	r2, r0, #24
   26f40:	f04f 0402 	mov.w	r4, #2
   26f44:	d50c      	bpl.n	26f60 <__gnu_unwind_execute+0x218>
   26f46:	9b03      	ldr	r3, [sp, #12]
   26f48:	f000 007f 	and.w	r0, r0, #127	; 0x7f
   26f4c:	40a0      	lsls	r0, r4
   26f4e:	4403      	add	r3, r0
   26f50:	4638      	mov	r0, r7
   26f52:	9303      	str	r3, [sp, #12]
   26f54:	f7ff fecc 	bl	26cf0 <next_unwind_byte>
   26f58:	0603      	lsls	r3, r0, #24
   26f5a:	f104 0407 	add.w	r4, r4, #7
   26f5e:	d4f2      	bmi.n	26f46 <__gnu_unwind_execute+0x1fe>
   26f60:	9b03      	ldr	r3, [sp, #12]
   26f62:	f8cd 9000 	str.w	r9, [sp]
   26f66:	f000 027f 	and.w	r2, r0, #127	; 0x7f
   26f6a:	40a2      	lsls	r2, r4
   26f6c:	f503 7401 	add.w	r4, r3, #516	; 0x204
   26f70:	2300      	movs	r3, #0
   26f72:	4414      	add	r4, r2
   26f74:	4619      	mov	r1, r3
   26f76:	220d      	movs	r2, #13
   26f78:	4630      	mov	r0, r6
   26f7a:	9403      	str	r4, [sp, #12]
   26f7c:	f7ff faf0 	bl	26560 <_Unwind_VRS_Set>
   26f80:	e6e9      	b.n	26d56 <__gnu_unwind_execute+0xe>
   26f82:	4638      	mov	r0, r7
   26f84:	f7ff feb4 	bl	26cf0 <next_unwind_byte>
   26f88:	0301      	lsls	r1, r0, #12
   26f8a:	f000 000f 	and.w	r0, r0, #15
   26f8e:	f401 2170 	and.w	r1, r1, #983040	; 0xf0000
   26f92:	1c42      	adds	r2, r0, #1
   26f94:	2301      	movs	r3, #1
   26f96:	430a      	orrs	r2, r1
   26f98:	4630      	mov	r0, r6
   26f9a:	4619      	mov	r1, r3
   26f9c:	f7ff fcae 	bl	268fc <_Unwind_VRS_Pop>
   26fa0:	2800      	cmp	r0, #0
   26fa2:	f47f af24 	bne.w	26dee <__gnu_unwind_execute+0xa6>
   26fa6:	e6d6      	b.n	26d56 <__gnu_unwind_execute+0xe>
   26fa8:	4638      	mov	r0, r7
   26faa:	f7ff fea1 	bl	26cf0 <next_unwind_byte>
   26fae:	0301      	lsls	r1, r0, #12
   26fb0:	f000 000f 	and.w	r0, r0, #15
   26fb4:	f401 2170 	and.w	r1, r1, #983040	; 0xf0000
   26fb8:	1c42      	adds	r2, r0, #1
   26fba:	2303      	movs	r3, #3
   26fbc:	e7eb      	b.n	26f96 <__gnu_unwind_execute+0x24e>
   26fbe:	4638      	mov	r0, r7
   26fc0:	f7ff fe96 	bl	26cf0 <next_unwind_byte>
   26fc4:	2800      	cmp	r0, #0
   26fc6:	f43f af12 	beq.w	26dee <__gnu_unwind_execute+0xa6>
   26fca:	f010 03f0 	ands.w	r3, r0, #240	; 0xf0
   26fce:	f47f af0e 	bne.w	26dee <__gnu_unwind_execute+0xa6>
   26fd2:	4602      	mov	r2, r0
   26fd4:	2104      	movs	r1, #4
   26fd6:	4630      	mov	r0, r6
   26fd8:	f7ff fc90 	bl	268fc <_Unwind_VRS_Pop>
   26fdc:	2800      	cmp	r0, #0
   26fde:	f47f af06 	bne.w	26dee <__gnu_unwind_execute+0xa6>
   26fe2:	e6b8      	b.n	26d56 <__gnu_unwind_execute+0xe>
   26fe4:	f000 020f 	and.w	r2, r0, #15
   26fe8:	3201      	adds	r2, #1
   26fea:	2303      	movs	r3, #3
   26fec:	f442 2220 	orr.w	r2, r2, #655360	; 0xa0000
   26ff0:	4619      	mov	r1, r3
   26ff2:	4630      	mov	r0, r6
   26ff4:	f7ff fc82 	bl	268fc <_Unwind_VRS_Pop>
   26ff8:	2800      	cmp	r0, #0
   26ffa:	f47f aef8 	bne.w	26dee <__gnu_unwind_execute+0xa6>
   26ffe:	e6aa      	b.n	26d56 <__gnu_unwind_execute+0xe>
   27000:	4638      	mov	r0, r7
   27002:	f7ff fe75 	bl	26cf0 <next_unwind_byte>
   27006:	f000 02f0 	and.w	r2, r0, #240	; 0xf0
   2700a:	f000 030f 	and.w	r3, r0, #15
   2700e:	3210      	adds	r2, #16
   27010:	3301      	adds	r3, #1
   27012:	ea43 3202 	orr.w	r2, r3, r2, lsl #12
   27016:	e6e3      	b.n	26de0 <__gnu_unwind_execute+0x98>

00027018 <__gnu_unwind_frame>:
   27018:	b510      	push	{r4, lr}
   2701a:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
   2701c:	b084      	sub	sp, #16
   2701e:	685a      	ldr	r2, [r3, #4]
   27020:	2003      	movs	r0, #3
   27022:	f88d 000c 	strb.w	r0, [sp, #12]
   27026:	79dc      	ldrb	r4, [r3, #7]
   27028:	f88d 400d 	strb.w	r4, [sp, #13]
   2702c:	0212      	lsls	r2, r2, #8
   2702e:	3308      	adds	r3, #8
   27030:	4608      	mov	r0, r1
   27032:	a901      	add	r1, sp, #4
   27034:	9201      	str	r2, [sp, #4]
   27036:	9302      	str	r3, [sp, #8]
   27038:	f7ff fe86 	bl	26d48 <__gnu_unwind_execute>
   2703c:	b004      	add	sp, #16
   2703e:	bd10      	pop	{r4, pc}

00027040 <_Unwind_GetRegionStart>:
   27040:	b508      	push	{r3, lr}
   27042:	f7ff fe7f 	bl	26d44 <unwind_UCB_from_context>
   27046:	6c80      	ldr	r0, [r0, #72]	; 0x48
   27048:	bd08      	pop	{r3, pc}
   2704a:	bf00      	nop

0002704c <_Unwind_GetLanguageSpecificData>:
   2704c:	b508      	push	{r3, lr}
   2704e:	f7ff fe79 	bl	26d44 <unwind_UCB_from_context>
   27052:	6cc0      	ldr	r0, [r0, #76]	; 0x4c
   27054:	79c3      	ldrb	r3, [r0, #7]
   27056:	eb00 0083 	add.w	r0, r0, r3, lsl #2
   2705a:	3008      	adds	r0, #8
   2705c:	bd08      	pop	{r3, pc}
   2705e:	bf00      	nop

00027060 <_Unwind_GetTextRelBase>:
   27060:	b508      	push	{r3, lr}
   27062:	f000 f807 	bl	27074 <abort>
   27066:	bf00      	nop

00027068 <_Unwind_GetDataRelBase>:
   27068:	b508      	push	{r3, lr}
   2706a:	f7ff fff9 	bl	27060 <_Unwind_GetTextRelBase>
   2706e:	bf00      	nop

00027070 <__aeabi_idiv0>:
   27070:	4770      	bx	lr
   27072:	bf00      	nop

00027074 <abort>:
   27074:	b508      	push	{r3, lr}
   27076:	2006      	movs	r0, #6
   27078:	f001 f992 	bl	283a0 <raise>
   2707c:	2001      	movs	r0, #1
   2707e:	f005 fd03 	bl	2ca88 <_exit>
   27082:	bf00      	nop

00027084 <atoi>:
   27084:	220a      	movs	r2, #10
   27086:	2100      	movs	r1, #0
   27088:	f001 bf52 	b.w	28f30 <strtol>

0002708c <__errno>:
   2708c:	4b01      	ldr	r3, [pc, #4]	; (27094 <__errno+0x8>)
   2708e:	6818      	ldr	r0, [r3, #0]
   27090:	4770      	bx	lr
   27092:	bf00      	nop
   27094:	20000108 	.word	0x20000108

00027098 <fputc>:
   27098:	4b14      	ldr	r3, [pc, #80]	; (270ec <fputc+0x54>)
   2709a:	b570      	push	{r4, r5, r6, lr}
   2709c:	681d      	ldr	r5, [r3, #0]
   2709e:	4606      	mov	r6, r0
   270a0:	460c      	mov	r4, r1
   270a2:	b10d      	cbz	r5, 270a8 <fputc+0x10>
   270a4:	6bab      	ldr	r3, [r5, #56]	; 0x38
   270a6:	b1c3      	cbz	r3, 270da <fputc+0x42>
   270a8:	6e63      	ldr	r3, [r4, #100]	; 0x64
   270aa:	07d8      	lsls	r0, r3, #31
   270ac:	d402      	bmi.n	270b4 <fputc+0x1c>
   270ae:	89a3      	ldrh	r3, [r4, #12]
   270b0:	0599      	lsls	r1, r3, #22
   270b2:	d516      	bpl.n	270e2 <fputc+0x4a>
   270b4:	4628      	mov	r0, r5
   270b6:	4622      	mov	r2, r4
   270b8:	4631      	mov	r1, r6
   270ba:	f000 ff29 	bl	27f10 <_putc_r>
   270be:	6e63      	ldr	r3, [r4, #100]	; 0x64
   270c0:	07da      	lsls	r2, r3, #31
   270c2:	4605      	mov	r5, r0
   270c4:	d402      	bmi.n	270cc <fputc+0x34>
   270c6:	89a3      	ldrh	r3, [r4, #12]
   270c8:	059b      	lsls	r3, r3, #22
   270ca:	d501      	bpl.n	270d0 <fputc+0x38>
   270cc:	4628      	mov	r0, r5
   270ce:	bd70      	pop	{r4, r5, r6, pc}
   270d0:	6da0      	ldr	r0, [r4, #88]	; 0x58
   270d2:	f000 fa69 	bl	275a8 <__retarget_lock_release_recursive>
   270d6:	4628      	mov	r0, r5
   270d8:	bd70      	pop	{r4, r5, r6, pc}
   270da:	4628      	mov	r0, r5
   270dc:	f004 fb7a 	bl	2b7d4 <__sinit>
   270e0:	e7e2      	b.n	270a8 <fputc+0x10>
   270e2:	6da0      	ldr	r0, [r4, #88]	; 0x58
   270e4:	f000 fa5e 	bl	275a4 <__retarget_lock_acquire_recursive>
   270e8:	e7e4      	b.n	270b4 <fputc+0x1c>
   270ea:	bf00      	nop
   270ec:	20000108 	.word	0x20000108

000270f0 <_fputs_r>:
   270f0:	b530      	push	{r4, r5, lr}
   270f2:	b087      	sub	sp, #28
   270f4:	4605      	mov	r5, r0
   270f6:	4608      	mov	r0, r1
   270f8:	4614      	mov	r4, r2
   270fa:	9101      	str	r1, [sp, #4]
   270fc:	f001 fb60 	bl	287c0 <strlen>
   27100:	aa01      	add	r2, sp, #4
   27102:	2301      	movs	r3, #1
   27104:	9005      	str	r0, [sp, #20]
   27106:	9002      	str	r0, [sp, #8]
   27108:	9203      	str	r2, [sp, #12]
   2710a:	9304      	str	r3, [sp, #16]
   2710c:	b10d      	cbz	r5, 27112 <_fputs_r+0x22>
   2710e:	6bab      	ldr	r3, [r5, #56]	; 0x38
   27110:	b333      	cbz	r3, 27160 <_fputs_r+0x70>
   27112:	6e63      	ldr	r3, [r4, #100]	; 0x64
   27114:	f013 0f01 	tst.w	r3, #1
   27118:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   2711c:	b29a      	uxth	r2, r3
   2711e:	d101      	bne.n	27124 <_fputs_r+0x34>
   27120:	0590      	lsls	r0, r2, #22
   27122:	d521      	bpl.n	27168 <_fputs_r+0x78>
   27124:	0491      	lsls	r1, r2, #18
   27126:	d406      	bmi.n	27136 <_fputs_r+0x46>
   27128:	6e62      	ldr	r2, [r4, #100]	; 0x64
   2712a:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
   2712e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
   27132:	81a3      	strh	r3, [r4, #12]
   27134:	6662      	str	r2, [r4, #100]	; 0x64
   27136:	4628      	mov	r0, r5
   27138:	aa03      	add	r2, sp, #12
   2713a:	4621      	mov	r1, r4
   2713c:	f000 f824 	bl	27188 <__sfvwrite_r>
   27140:	6e63      	ldr	r3, [r4, #100]	; 0x64
   27142:	07da      	lsls	r2, r3, #31
   27144:	4605      	mov	r5, r0
   27146:	d402      	bmi.n	2714e <_fputs_r+0x5e>
   27148:	89a3      	ldrh	r3, [r4, #12]
   2714a:	059b      	lsls	r3, r3, #22
   2714c:	d502      	bpl.n	27154 <_fputs_r+0x64>
   2714e:	4628      	mov	r0, r5
   27150:	b007      	add	sp, #28
   27152:	bd30      	pop	{r4, r5, pc}
   27154:	6da0      	ldr	r0, [r4, #88]	; 0x58
   27156:	f000 fa27 	bl	275a8 <__retarget_lock_release_recursive>
   2715a:	4628      	mov	r0, r5
   2715c:	b007      	add	sp, #28
   2715e:	bd30      	pop	{r4, r5, pc}
   27160:	4628      	mov	r0, r5
   27162:	f004 fb37 	bl	2b7d4 <__sinit>
   27166:	e7d4      	b.n	27112 <_fputs_r+0x22>
   27168:	6da0      	ldr	r0, [r4, #88]	; 0x58
   2716a:	f000 fa1b 	bl	275a4 <__retarget_lock_acquire_recursive>
   2716e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   27172:	b29a      	uxth	r2, r3
   27174:	e7d6      	b.n	27124 <_fputs_r+0x34>
   27176:	bf00      	nop

00027178 <fputs>:
   27178:	4b02      	ldr	r3, [pc, #8]	; (27184 <fputs+0xc>)
   2717a:	460a      	mov	r2, r1
   2717c:	4601      	mov	r1, r0
   2717e:	6818      	ldr	r0, [r3, #0]
   27180:	f7ff bfb6 	b.w	270f0 <_fputs_r>
   27184:	20000108 	.word	0x20000108

00027188 <__sfvwrite_r>:
   27188:	6893      	ldr	r3, [r2, #8]
   2718a:	2b00      	cmp	r3, #0
   2718c:	d073      	beq.n	27276 <__sfvwrite_r+0xee>
   2718e:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   27192:	898b      	ldrh	r3, [r1, #12]
   27194:	b083      	sub	sp, #12
   27196:	460c      	mov	r4, r1
   27198:	0719      	lsls	r1, r3, #28
   2719a:	9000      	str	r0, [sp, #0]
   2719c:	4616      	mov	r6, r2
   2719e:	d526      	bpl.n	271ee <__sfvwrite_r+0x66>
   271a0:	6922      	ldr	r2, [r4, #16]
   271a2:	b322      	cbz	r2, 271ee <__sfvwrite_r+0x66>
   271a4:	f013 0002 	ands.w	r0, r3, #2
   271a8:	6835      	ldr	r5, [r6, #0]
   271aa:	d02c      	beq.n	27206 <__sfvwrite_r+0x7e>
   271ac:	f04f 0900 	mov.w	r9, #0
   271b0:	4fb0      	ldr	r7, [pc, #704]	; (27474 <__sfvwrite_r+0x2ec>)
   271b2:	46c8      	mov	r8, r9
   271b4:	46b2      	mov	sl, r6
   271b6:	45b8      	cmp	r8, r7
   271b8:	4643      	mov	r3, r8
   271ba:	464a      	mov	r2, r9
   271bc:	bf28      	it	cs
   271be:	463b      	movcs	r3, r7
   271c0:	9800      	ldr	r0, [sp, #0]
   271c2:	f1b8 0f00 	cmp.w	r8, #0
   271c6:	d050      	beq.n	2726a <__sfvwrite_r+0xe2>
   271c8:	69e1      	ldr	r1, [r4, #28]
   271ca:	6a66      	ldr	r6, [r4, #36]	; 0x24
   271cc:	47b0      	blx	r6
   271ce:	2800      	cmp	r0, #0
   271d0:	dd58      	ble.n	27284 <__sfvwrite_r+0xfc>
   271d2:	f8da 3008 	ldr.w	r3, [sl, #8]
   271d6:	1a1b      	subs	r3, r3, r0
   271d8:	4481      	add	r9, r0
   271da:	eba8 0800 	sub.w	r8, r8, r0
   271de:	f8ca 3008 	str.w	r3, [sl, #8]
   271e2:	2b00      	cmp	r3, #0
   271e4:	d1e7      	bne.n	271b6 <__sfvwrite_r+0x2e>
   271e6:	2000      	movs	r0, #0
   271e8:	b003      	add	sp, #12
   271ea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   271ee:	4621      	mov	r1, r4
   271f0:	9800      	ldr	r0, [sp, #0]
   271f2:	f003 f9c9 	bl	2a588 <__swsetup_r>
   271f6:	2800      	cmp	r0, #0
   271f8:	f040 8133 	bne.w	27462 <__sfvwrite_r+0x2da>
   271fc:	89a3      	ldrh	r3, [r4, #12]
   271fe:	6835      	ldr	r5, [r6, #0]
   27200:	f013 0002 	ands.w	r0, r3, #2
   27204:	d1d2      	bne.n	271ac <__sfvwrite_r+0x24>
   27206:	f013 0901 	ands.w	r9, r3, #1
   2720a:	d145      	bne.n	27298 <__sfvwrite_r+0x110>
   2720c:	464f      	mov	r7, r9
   2720e:	9601      	str	r6, [sp, #4]
   27210:	b337      	cbz	r7, 27260 <__sfvwrite_r+0xd8>
   27212:	059a      	lsls	r2, r3, #22
   27214:	f8d4 8008 	ldr.w	r8, [r4, #8]
   27218:	f140 8083 	bpl.w	27322 <__sfvwrite_r+0x19a>
   2721c:	4547      	cmp	r7, r8
   2721e:	46c3      	mov	fp, r8
   27220:	f0c0 80ab 	bcc.w	2737a <__sfvwrite_r+0x1f2>
   27224:	f413 6f90 	tst.w	r3, #1152	; 0x480
   27228:	f040 80ac 	bne.w	27384 <__sfvwrite_r+0x1fc>
   2722c:	6820      	ldr	r0, [r4, #0]
   2722e:	46ba      	mov	sl, r7
   27230:	465a      	mov	r2, fp
   27232:	4649      	mov	r1, r9
   27234:	f000 fdae 	bl	27d94 <memmove>
   27238:	68a2      	ldr	r2, [r4, #8]
   2723a:	6823      	ldr	r3, [r4, #0]
   2723c:	eba2 0208 	sub.w	r2, r2, r8
   27240:	445b      	add	r3, fp
   27242:	60a2      	str	r2, [r4, #8]
   27244:	6023      	str	r3, [r4, #0]
   27246:	9a01      	ldr	r2, [sp, #4]
   27248:	6893      	ldr	r3, [r2, #8]
   2724a:	eba3 030a 	sub.w	r3, r3, sl
   2724e:	44d1      	add	r9, sl
   27250:	eba7 070a 	sub.w	r7, r7, sl
   27254:	6093      	str	r3, [r2, #8]
   27256:	2b00      	cmp	r3, #0
   27258:	d0c5      	beq.n	271e6 <__sfvwrite_r+0x5e>
   2725a:	89a3      	ldrh	r3, [r4, #12]
   2725c:	2f00      	cmp	r7, #0
   2725e:	d1d8      	bne.n	27212 <__sfvwrite_r+0x8a>
   27260:	f8d5 9000 	ldr.w	r9, [r5]
   27264:	686f      	ldr	r7, [r5, #4]
   27266:	3508      	adds	r5, #8
   27268:	e7d2      	b.n	27210 <__sfvwrite_r+0x88>
   2726a:	f8d5 9000 	ldr.w	r9, [r5]
   2726e:	f8d5 8004 	ldr.w	r8, [r5, #4]
   27272:	3508      	adds	r5, #8
   27274:	e79f      	b.n	271b6 <__sfvwrite_r+0x2e>
   27276:	2000      	movs	r0, #0
   27278:	4770      	bx	lr
   2727a:	4621      	mov	r1, r4
   2727c:	9800      	ldr	r0, [sp, #0]
   2727e:	f004 fa51 	bl	2b724 <_fflush_r>
   27282:	b370      	cbz	r0, 272e2 <__sfvwrite_r+0x15a>
   27284:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   27288:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   2728c:	f04f 30ff 	mov.w	r0, #4294967295
   27290:	81a3      	strh	r3, [r4, #12]
   27292:	b003      	add	sp, #12
   27294:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   27298:	4681      	mov	r9, r0
   2729a:	4633      	mov	r3, r6
   2729c:	464e      	mov	r6, r9
   2729e:	46a8      	mov	r8, r5
   272a0:	469a      	mov	sl, r3
   272a2:	464d      	mov	r5, r9
   272a4:	b34e      	cbz	r6, 272fa <__sfvwrite_r+0x172>
   272a6:	b380      	cbz	r0, 2730a <__sfvwrite_r+0x182>
   272a8:	6820      	ldr	r0, [r4, #0]
   272aa:	6923      	ldr	r3, [r4, #16]
   272ac:	6962      	ldr	r2, [r4, #20]
   272ae:	45b1      	cmp	r9, r6
   272b0:	46cb      	mov	fp, r9
   272b2:	bf28      	it	cs
   272b4:	46b3      	movcs	fp, r6
   272b6:	4298      	cmp	r0, r3
   272b8:	465f      	mov	r7, fp
   272ba:	d904      	bls.n	272c6 <__sfvwrite_r+0x13e>
   272bc:	68a3      	ldr	r3, [r4, #8]
   272be:	4413      	add	r3, r2
   272c0:	459b      	cmp	fp, r3
   272c2:	f300 80a6 	bgt.w	27412 <__sfvwrite_r+0x28a>
   272c6:	4593      	cmp	fp, r2
   272c8:	db4b      	blt.n	27362 <__sfvwrite_r+0x1da>
   272ca:	4613      	mov	r3, r2
   272cc:	6a67      	ldr	r7, [r4, #36]	; 0x24
   272ce:	69e1      	ldr	r1, [r4, #28]
   272d0:	9800      	ldr	r0, [sp, #0]
   272d2:	462a      	mov	r2, r5
   272d4:	47b8      	blx	r7
   272d6:	1e07      	subs	r7, r0, #0
   272d8:	ddd4      	ble.n	27284 <__sfvwrite_r+0xfc>
   272da:	ebb9 0907 	subs.w	r9, r9, r7
   272de:	d0cc      	beq.n	2727a <__sfvwrite_r+0xf2>
   272e0:	2001      	movs	r0, #1
   272e2:	f8da 3008 	ldr.w	r3, [sl, #8]
   272e6:	1bdb      	subs	r3, r3, r7
   272e8:	443d      	add	r5, r7
   272ea:	1bf6      	subs	r6, r6, r7
   272ec:	f8ca 3008 	str.w	r3, [sl, #8]
   272f0:	2b00      	cmp	r3, #0
   272f2:	f43f af78 	beq.w	271e6 <__sfvwrite_r+0x5e>
   272f6:	2e00      	cmp	r6, #0
   272f8:	d1d5      	bne.n	272a6 <__sfvwrite_r+0x11e>
   272fa:	f108 0308 	add.w	r3, r8, #8
   272fe:	e913 0060 	ldmdb	r3, {r5, r6}
   27302:	4698      	mov	r8, r3
   27304:	3308      	adds	r3, #8
   27306:	2e00      	cmp	r6, #0
   27308:	d0f9      	beq.n	272fe <__sfvwrite_r+0x176>
   2730a:	4632      	mov	r2, r6
   2730c:	210a      	movs	r1, #10
   2730e:	4628      	mov	r0, r5
   27310:	f000 fc26 	bl	27b60 <memchr>
   27314:	2800      	cmp	r0, #0
   27316:	f000 80a1 	beq.w	2745c <__sfvwrite_r+0x2d4>
   2731a:	3001      	adds	r0, #1
   2731c:	eba0 0905 	sub.w	r9, r0, r5
   27320:	e7c2      	b.n	272a8 <__sfvwrite_r+0x120>
   27322:	6820      	ldr	r0, [r4, #0]
   27324:	6923      	ldr	r3, [r4, #16]
   27326:	4298      	cmp	r0, r3
   27328:	d802      	bhi.n	27330 <__sfvwrite_r+0x1a8>
   2732a:	6963      	ldr	r3, [r4, #20]
   2732c:	429f      	cmp	r7, r3
   2732e:	d25d      	bcs.n	273ec <__sfvwrite_r+0x264>
   27330:	45b8      	cmp	r8, r7
   27332:	bf28      	it	cs
   27334:	46b8      	movcs	r8, r7
   27336:	4642      	mov	r2, r8
   27338:	4649      	mov	r1, r9
   2733a:	f000 fd2b 	bl	27d94 <memmove>
   2733e:	68a3      	ldr	r3, [r4, #8]
   27340:	6822      	ldr	r2, [r4, #0]
   27342:	eba3 0308 	sub.w	r3, r3, r8
   27346:	4442      	add	r2, r8
   27348:	60a3      	str	r3, [r4, #8]
   2734a:	6022      	str	r2, [r4, #0]
   2734c:	b10b      	cbz	r3, 27352 <__sfvwrite_r+0x1ca>
   2734e:	46c2      	mov	sl, r8
   27350:	e779      	b.n	27246 <__sfvwrite_r+0xbe>
   27352:	4621      	mov	r1, r4
   27354:	9800      	ldr	r0, [sp, #0]
   27356:	f004 f9e5 	bl	2b724 <_fflush_r>
   2735a:	2800      	cmp	r0, #0
   2735c:	d192      	bne.n	27284 <__sfvwrite_r+0xfc>
   2735e:	46c2      	mov	sl, r8
   27360:	e771      	b.n	27246 <__sfvwrite_r+0xbe>
   27362:	465a      	mov	r2, fp
   27364:	4629      	mov	r1, r5
   27366:	f000 fd15 	bl	27d94 <memmove>
   2736a:	68a2      	ldr	r2, [r4, #8]
   2736c:	6823      	ldr	r3, [r4, #0]
   2736e:	eba2 020b 	sub.w	r2, r2, fp
   27372:	445b      	add	r3, fp
   27374:	60a2      	str	r2, [r4, #8]
   27376:	6023      	str	r3, [r4, #0]
   27378:	e7af      	b.n	272da <__sfvwrite_r+0x152>
   2737a:	6820      	ldr	r0, [r4, #0]
   2737c:	46b8      	mov	r8, r7
   2737e:	46ba      	mov	sl, r7
   27380:	46bb      	mov	fp, r7
   27382:	e755      	b.n	27230 <__sfvwrite_r+0xa8>
   27384:	6962      	ldr	r2, [r4, #20]
   27386:	6820      	ldr	r0, [r4, #0]
   27388:	6921      	ldr	r1, [r4, #16]
   2738a:	eb02 0842 	add.w	r8, r2, r2, lsl #1
   2738e:	eba0 0a01 	sub.w	sl, r0, r1
   27392:	eb08 78d8 	add.w	r8, r8, r8, lsr #31
   27396:	f10a 0001 	add.w	r0, sl, #1
   2739a:	ea4f 0868 	mov.w	r8, r8, asr #1
   2739e:	4438      	add	r0, r7
   273a0:	4540      	cmp	r0, r8
   273a2:	4642      	mov	r2, r8
   273a4:	bf84      	itt	hi
   273a6:	4680      	movhi	r8, r0
   273a8:	4642      	movhi	r2, r8
   273aa:	055b      	lsls	r3, r3, #21
   273ac:	d544      	bpl.n	27438 <__sfvwrite_r+0x2b0>
   273ae:	4611      	mov	r1, r2
   273b0:	9800      	ldr	r0, [sp, #0]
   273b2:	f000 f90b 	bl	275cc <_malloc_r>
   273b6:	4683      	mov	fp, r0
   273b8:	2800      	cmp	r0, #0
   273ba:	d055      	beq.n	27468 <__sfvwrite_r+0x2e0>
   273bc:	4652      	mov	r2, sl
   273be:	6921      	ldr	r1, [r4, #16]
   273c0:	f000 fc4e 	bl	27c60 <memcpy>
   273c4:	89a3      	ldrh	r3, [r4, #12]
   273c6:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
   273ca:	f043 0380 	orr.w	r3, r3, #128	; 0x80
   273ce:	81a3      	strh	r3, [r4, #12]
   273d0:	eb0b 000a 	add.w	r0, fp, sl
   273d4:	eba8 030a 	sub.w	r3, r8, sl
   273d8:	f8c4 b010 	str.w	fp, [r4, #16]
   273dc:	f8c4 8014 	str.w	r8, [r4, #20]
   273e0:	6020      	str	r0, [r4, #0]
   273e2:	60a3      	str	r3, [r4, #8]
   273e4:	46b8      	mov	r8, r7
   273e6:	46ba      	mov	sl, r7
   273e8:	46bb      	mov	fp, r7
   273ea:	e721      	b.n	27230 <__sfvwrite_r+0xa8>
   273ec:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
   273f0:	42b9      	cmp	r1, r7
   273f2:	bf28      	it	cs
   273f4:	4639      	movcs	r1, r7
   273f6:	464a      	mov	r2, r9
   273f8:	fb91 f1f3 	sdiv	r1, r1, r3
   273fc:	9800      	ldr	r0, [sp, #0]
   273fe:	6a66      	ldr	r6, [r4, #36]	; 0x24
   27400:	fb03 f301 	mul.w	r3, r3, r1
   27404:	69e1      	ldr	r1, [r4, #28]
   27406:	47b0      	blx	r6
   27408:	f1b0 0a00 	subs.w	sl, r0, #0
   2740c:	f73f af1b 	bgt.w	27246 <__sfvwrite_r+0xbe>
   27410:	e738      	b.n	27284 <__sfvwrite_r+0xfc>
   27412:	461a      	mov	r2, r3
   27414:	4629      	mov	r1, r5
   27416:	9301      	str	r3, [sp, #4]
   27418:	f000 fcbc 	bl	27d94 <memmove>
   2741c:	6822      	ldr	r2, [r4, #0]
   2741e:	9b01      	ldr	r3, [sp, #4]
   27420:	9800      	ldr	r0, [sp, #0]
   27422:	441a      	add	r2, r3
   27424:	6022      	str	r2, [r4, #0]
   27426:	4621      	mov	r1, r4
   27428:	f004 f97c 	bl	2b724 <_fflush_r>
   2742c:	9b01      	ldr	r3, [sp, #4]
   2742e:	2800      	cmp	r0, #0
   27430:	f47f af28 	bne.w	27284 <__sfvwrite_r+0xfc>
   27434:	461f      	mov	r7, r3
   27436:	e750      	b.n	272da <__sfvwrite_r+0x152>
   27438:	9800      	ldr	r0, [sp, #0]
   2743a:	f000 fdc9 	bl	27fd0 <_realloc_r>
   2743e:	4683      	mov	fp, r0
   27440:	2800      	cmp	r0, #0
   27442:	d1c5      	bne.n	273d0 <__sfvwrite_r+0x248>
   27444:	9d00      	ldr	r5, [sp, #0]
   27446:	6921      	ldr	r1, [r4, #16]
   27448:	4628      	mov	r0, r5
   2744a:	f004 fa65 	bl	2b918 <_free_r>
   2744e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   27452:	220c      	movs	r2, #12
   27454:	f023 0380 	bic.w	r3, r3, #128	; 0x80
   27458:	602a      	str	r2, [r5, #0]
   2745a:	e715      	b.n	27288 <__sfvwrite_r+0x100>
   2745c:	f106 0901 	add.w	r9, r6, #1
   27460:	e722      	b.n	272a8 <__sfvwrite_r+0x120>
   27462:	f04f 30ff 	mov.w	r0, #4294967295
   27466:	e6bf      	b.n	271e8 <__sfvwrite_r+0x60>
   27468:	9a00      	ldr	r2, [sp, #0]
   2746a:	230c      	movs	r3, #12
   2746c:	6013      	str	r3, [r2, #0]
   2746e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   27472:	e709      	b.n	27288 <__sfvwrite_r+0x100>
   27474:	7ffffc00 	.word	0x7ffffc00

00027478 <_fwrite_r>:
   27478:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   2747c:	b086      	sub	sp, #24
   2747e:	fb02 f503 	mul.w	r5, r2, r3
   27482:	4690      	mov	r8, r2
   27484:	461e      	mov	r6, r3
   27486:	aa01      	add	r2, sp, #4
   27488:	2301      	movs	r3, #1
   2748a:	9101      	str	r1, [sp, #4]
   2748c:	9502      	str	r5, [sp, #8]
   2748e:	9505      	str	r5, [sp, #20]
   27490:	9203      	str	r2, [sp, #12]
   27492:	9304      	str	r3, [sp, #16]
   27494:	9c0c      	ldr	r4, [sp, #48]	; 0x30
   27496:	4607      	mov	r7, r0
   27498:	b110      	cbz	r0, 274a0 <_fwrite_r+0x28>
   2749a:	6b83      	ldr	r3, [r0, #56]	; 0x38
   2749c:	2b00      	cmp	r3, #0
   2749e:	d031      	beq.n	27504 <_fwrite_r+0x8c>
   274a0:	6e63      	ldr	r3, [r4, #100]	; 0x64
   274a2:	f013 0f01 	tst.w	r3, #1
   274a6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   274aa:	b29a      	uxth	r2, r3
   274ac:	d101      	bne.n	274b2 <_fwrite_r+0x3a>
   274ae:	0591      	lsls	r1, r2, #22
   274b0:	d52b      	bpl.n	2750a <_fwrite_r+0x92>
   274b2:	0492      	lsls	r2, r2, #18
   274b4:	d406      	bmi.n	274c4 <_fwrite_r+0x4c>
   274b6:	6e62      	ldr	r2, [r4, #100]	; 0x64
   274b8:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
   274bc:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
   274c0:	81a3      	strh	r3, [r4, #12]
   274c2:	6662      	str	r2, [r4, #100]	; 0x64
   274c4:	4638      	mov	r0, r7
   274c6:	aa03      	add	r2, sp, #12
   274c8:	4621      	mov	r1, r4
   274ca:	f7ff fe5d 	bl	27188 <__sfvwrite_r>
   274ce:	6e63      	ldr	r3, [r4, #100]	; 0x64
   274d0:	b940      	cbnz	r0, 274e4 <_fwrite_r+0x6c>
   274d2:	07d8      	lsls	r0, r3, #31
   274d4:	d402      	bmi.n	274dc <_fwrite_r+0x64>
   274d6:	89a3      	ldrh	r3, [r4, #12]
   274d8:	0599      	lsls	r1, r3, #22
   274da:	d51d      	bpl.n	27518 <_fwrite_r+0xa0>
   274dc:	4630      	mov	r0, r6
   274de:	b006      	add	sp, #24
   274e0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   274e4:	07da      	lsls	r2, r3, #31
   274e6:	d506      	bpl.n	274f6 <_fwrite_r+0x7e>
   274e8:	9805      	ldr	r0, [sp, #20]
   274ea:	1a2d      	subs	r5, r5, r0
   274ec:	fbb5 f0f8 	udiv	r0, r5, r8
   274f0:	b006      	add	sp, #24
   274f2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   274f6:	89a3      	ldrh	r3, [r4, #12]
   274f8:	059b      	lsls	r3, r3, #22
   274fa:	d4f5      	bmi.n	274e8 <_fwrite_r+0x70>
   274fc:	6da0      	ldr	r0, [r4, #88]	; 0x58
   274fe:	f000 f853 	bl	275a8 <__retarget_lock_release_recursive>
   27502:	e7f1      	b.n	274e8 <_fwrite_r+0x70>
   27504:	f004 f966 	bl	2b7d4 <__sinit>
   27508:	e7ca      	b.n	274a0 <_fwrite_r+0x28>
   2750a:	6da0      	ldr	r0, [r4, #88]	; 0x58
   2750c:	f000 f84a 	bl	275a4 <__retarget_lock_acquire_recursive>
   27510:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   27514:	b29a      	uxth	r2, r3
   27516:	e7cc      	b.n	274b2 <_fwrite_r+0x3a>
   27518:	6da0      	ldr	r0, [r4, #88]	; 0x58
   2751a:	f000 f845 	bl	275a8 <__retarget_lock_release_recursive>
   2751e:	4630      	mov	r0, r6
   27520:	e7e6      	b.n	274f0 <_fwrite_r+0x78>
   27522:	bf00      	nop

00027524 <fwrite>:
   27524:	b510      	push	{r4, lr}
   27526:	b082      	sub	sp, #8
   27528:	4c05      	ldr	r4, [pc, #20]	; (27540 <fwrite+0x1c>)
   2752a:	9300      	str	r3, [sp, #0]
   2752c:	6824      	ldr	r4, [r4, #0]
   2752e:	4613      	mov	r3, r2
   27530:	460a      	mov	r2, r1
   27532:	4601      	mov	r1, r0
   27534:	4620      	mov	r0, r4
   27536:	f7ff ff9f 	bl	27478 <_fwrite_r>
   2753a:	b002      	add	sp, #8
   2753c:	bd10      	pop	{r4, pc}
   2753e:	bf00      	nop
   27540:	20000108 	.word	0x20000108

00027544 <__libc_init_array>:
   27544:	b570      	push	{r4, r5, r6, lr}
   27546:	4e0f      	ldr	r6, [pc, #60]	; (27584 <__libc_init_array+0x40>)
   27548:	4d0f      	ldr	r5, [pc, #60]	; (27588 <__libc_init_array+0x44>)
   2754a:	1b76      	subs	r6, r6, r5
   2754c:	10b6      	asrs	r6, r6, #2
   2754e:	bf18      	it	ne
   27550:	2400      	movne	r4, #0
   27552:	d005      	beq.n	27560 <__libc_init_array+0x1c>
   27554:	3401      	adds	r4, #1
   27556:	f855 3b04 	ldr.w	r3, [r5], #4
   2755a:	4798      	blx	r3
   2755c:	42a6      	cmp	r6, r4
   2755e:	d1f9      	bne.n	27554 <__libc_init_array+0x10>
   27560:	4e0a      	ldr	r6, [pc, #40]	; (2758c <__libc_init_array+0x48>)
   27562:	4d0b      	ldr	r5, [pc, #44]	; (27590 <__libc_init_array+0x4c>)
   27564:	1b76      	subs	r6, r6, r5
   27566:	f005 faa3 	bl	2cab0 <_init>
   2756a:	10b6      	asrs	r6, r6, #2
   2756c:	bf18      	it	ne
   2756e:	2400      	movne	r4, #0
   27570:	d006      	beq.n	27580 <__libc_init_array+0x3c>
   27572:	3401      	adds	r4, #1
   27574:	f855 3b04 	ldr.w	r3, [r5], #4
   27578:	4798      	blx	r3
   2757a:	42a6      	cmp	r6, r4
   2757c:	d1f9      	bne.n	27572 <__libc_init_array+0x2e>
   2757e:	bd70      	pop	{r4, r5, r6, pc}
   27580:	bd70      	pop	{r4, r5, r6, pc}
   27582:	bf00      	nop
   27584:	0002cac8 	.word	0x0002cac8
   27588:	0002cac8 	.word	0x0002cac8
   2758c:	0002cb04 	.word	0x0002cb04
   27590:	0002cac8 	.word	0x0002cac8

00027594 <__locale_ctype_ptr_l>:
   27594:	f8d0 00ec 	ldr.w	r0, [r0, #236]	; 0xec
   27598:	4770      	bx	lr
   2759a:	bf00      	nop

0002759c <__retarget_lock_init_recursive>:
   2759c:	4770      	bx	lr
   2759e:	bf00      	nop

000275a0 <__retarget_lock_close_recursive>:
   275a0:	4770      	bx	lr
   275a2:	bf00      	nop

000275a4 <__retarget_lock_acquire_recursive>:
   275a4:	4770      	bx	lr
   275a6:	bf00      	nop

000275a8 <__retarget_lock_release_recursive>:
   275a8:	4770      	bx	lr
   275aa:	bf00      	nop

000275ac <malloc>:
   275ac:	4b02      	ldr	r3, [pc, #8]	; (275b8 <malloc+0xc>)
   275ae:	4601      	mov	r1, r0
   275b0:	6818      	ldr	r0, [r3, #0]
   275b2:	f000 b80b 	b.w	275cc <_malloc_r>
   275b6:	bf00      	nop
   275b8:	20000108 	.word	0x20000108

000275bc <free>:
   275bc:	4b02      	ldr	r3, [pc, #8]	; (275c8 <free+0xc>)
   275be:	4601      	mov	r1, r0
   275c0:	6818      	ldr	r0, [r3, #0]
   275c2:	f004 b9a9 	b.w	2b918 <_free_r>
   275c6:	bf00      	nop
   275c8:	20000108 	.word	0x20000108

000275cc <_malloc_r>:
   275cc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   275d0:	f101 060b 	add.w	r6, r1, #11
   275d4:	2e16      	cmp	r6, #22
   275d6:	b083      	sub	sp, #12
   275d8:	4605      	mov	r5, r0
   275da:	f240 809e 	bls.w	2771a <_malloc_r+0x14e>
   275de:	f036 0607 	bics.w	r6, r6, #7
   275e2:	f100 80bd 	bmi.w	27760 <_malloc_r+0x194>
   275e6:	42b1      	cmp	r1, r6
   275e8:	f200 80ba 	bhi.w	27760 <_malloc_r+0x194>
   275ec:	f000 fc84 	bl	27ef8 <__malloc_lock>
   275f0:	f5b6 7ffc 	cmp.w	r6, #504	; 0x1f8
   275f4:	f0c0 8293 	bcc.w	27b1e <_malloc_r+0x552>
   275f8:	0a73      	lsrs	r3, r6, #9
   275fa:	f000 80b8 	beq.w	2776e <_malloc_r+0x1a2>
   275fe:	2b04      	cmp	r3, #4
   27600:	f200 8179 	bhi.w	278f6 <_malloc_r+0x32a>
   27604:	09b3      	lsrs	r3, r6, #6
   27606:	f103 0039 	add.w	r0, r3, #57	; 0x39
   2760a:	f103 0e38 	add.w	lr, r3, #56	; 0x38
   2760e:	00c3      	lsls	r3, r0, #3
   27610:	4fbf      	ldr	r7, [pc, #764]	; (27910 <_malloc_r+0x344>)
   27612:	443b      	add	r3, r7
   27614:	f1a3 0108 	sub.w	r1, r3, #8
   27618:	685c      	ldr	r4, [r3, #4]
   2761a:	42a1      	cmp	r1, r4
   2761c:	d106      	bne.n	2762c <_malloc_r+0x60>
   2761e:	e00c      	b.n	2763a <_malloc_r+0x6e>
   27620:	2a00      	cmp	r2, #0
   27622:	f280 80aa 	bge.w	2777a <_malloc_r+0x1ae>
   27626:	68e4      	ldr	r4, [r4, #12]
   27628:	42a1      	cmp	r1, r4
   2762a:	d006      	beq.n	2763a <_malloc_r+0x6e>
   2762c:	6863      	ldr	r3, [r4, #4]
   2762e:	f023 0303 	bic.w	r3, r3, #3
   27632:	1b9a      	subs	r2, r3, r6
   27634:	2a0f      	cmp	r2, #15
   27636:	ddf3      	ble.n	27620 <_malloc_r+0x54>
   27638:	4670      	mov	r0, lr
   2763a:	693c      	ldr	r4, [r7, #16]
   2763c:	f8df e2e4 	ldr.w	lr, [pc, #740]	; 27924 <_malloc_r+0x358>
   27640:	4574      	cmp	r4, lr
   27642:	f000 81ab 	beq.w	2799c <_malloc_r+0x3d0>
   27646:	6863      	ldr	r3, [r4, #4]
   27648:	f023 0303 	bic.w	r3, r3, #3
   2764c:	1b9a      	subs	r2, r3, r6
   2764e:	2a0f      	cmp	r2, #15
   27650:	f300 8190 	bgt.w	27974 <_malloc_r+0x3a8>
   27654:	2a00      	cmp	r2, #0
   27656:	f8c7 e014 	str.w	lr, [r7, #20]
   2765a:	f8c7 e010 	str.w	lr, [r7, #16]
   2765e:	f280 809d 	bge.w	2779c <_malloc_r+0x1d0>
   27662:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
   27666:	f080 8161 	bcs.w	2792c <_malloc_r+0x360>
   2766a:	08db      	lsrs	r3, r3, #3
   2766c:	f103 0c01 	add.w	ip, r3, #1
   27670:	1099      	asrs	r1, r3, #2
   27672:	687a      	ldr	r2, [r7, #4]
   27674:	f857 803c 	ldr.w	r8, [r7, ip, lsl #3]
   27678:	f8c4 8008 	str.w	r8, [r4, #8]
   2767c:	2301      	movs	r3, #1
   2767e:	408b      	lsls	r3, r1
   27680:	eb07 01cc 	add.w	r1, r7, ip, lsl #3
   27684:	4313      	orrs	r3, r2
   27686:	3908      	subs	r1, #8
   27688:	60e1      	str	r1, [r4, #12]
   2768a:	607b      	str	r3, [r7, #4]
   2768c:	f847 403c 	str.w	r4, [r7, ip, lsl #3]
   27690:	f8c8 400c 	str.w	r4, [r8, #12]
   27694:	1082      	asrs	r2, r0, #2
   27696:	2401      	movs	r4, #1
   27698:	4094      	lsls	r4, r2
   2769a:	429c      	cmp	r4, r3
   2769c:	f200 808b 	bhi.w	277b6 <_malloc_r+0x1ea>
   276a0:	421c      	tst	r4, r3
   276a2:	d106      	bne.n	276b2 <_malloc_r+0xe6>
   276a4:	f020 0003 	bic.w	r0, r0, #3
   276a8:	0064      	lsls	r4, r4, #1
   276aa:	421c      	tst	r4, r3
   276ac:	f100 0004 	add.w	r0, r0, #4
   276b0:	d0fa      	beq.n	276a8 <_malloc_r+0xdc>
   276b2:	eb07 09c0 	add.w	r9, r7, r0, lsl #3
   276b6:	46cc      	mov	ip, r9
   276b8:	4680      	mov	r8, r0
   276ba:	f8dc 300c 	ldr.w	r3, [ip, #12]
   276be:	459c      	cmp	ip, r3
   276c0:	d107      	bne.n	276d2 <_malloc_r+0x106>
   276c2:	e16d      	b.n	279a0 <_malloc_r+0x3d4>
   276c4:	2a00      	cmp	r2, #0
   276c6:	f280 817b 	bge.w	279c0 <_malloc_r+0x3f4>
   276ca:	68db      	ldr	r3, [r3, #12]
   276cc:	459c      	cmp	ip, r3
   276ce:	f000 8167 	beq.w	279a0 <_malloc_r+0x3d4>
   276d2:	6859      	ldr	r1, [r3, #4]
   276d4:	f021 0103 	bic.w	r1, r1, #3
   276d8:	1b8a      	subs	r2, r1, r6
   276da:	2a0f      	cmp	r2, #15
   276dc:	ddf2      	ble.n	276c4 <_malloc_r+0xf8>
   276de:	f8d3 c00c 	ldr.w	ip, [r3, #12]
   276e2:	f8d3 8008 	ldr.w	r8, [r3, #8]
   276e6:	9300      	str	r3, [sp, #0]
   276e8:	199c      	adds	r4, r3, r6
   276ea:	4628      	mov	r0, r5
   276ec:	f046 0601 	orr.w	r6, r6, #1
   276f0:	f042 0501 	orr.w	r5, r2, #1
   276f4:	605e      	str	r6, [r3, #4]
   276f6:	f8c8 c00c 	str.w	ip, [r8, #12]
   276fa:	f8cc 8008 	str.w	r8, [ip, #8]
   276fe:	617c      	str	r4, [r7, #20]
   27700:	613c      	str	r4, [r7, #16]
   27702:	f8c4 e00c 	str.w	lr, [r4, #12]
   27706:	f8c4 e008 	str.w	lr, [r4, #8]
   2770a:	6065      	str	r5, [r4, #4]
   2770c:	505a      	str	r2, [r3, r1]
   2770e:	f000 fbf9 	bl	27f04 <__malloc_unlock>
   27712:	9b00      	ldr	r3, [sp, #0]
   27714:	f103 0408 	add.w	r4, r3, #8
   27718:	e01e      	b.n	27758 <_malloc_r+0x18c>
   2771a:	2910      	cmp	r1, #16
   2771c:	d820      	bhi.n	27760 <_malloc_r+0x194>
   2771e:	f000 fbeb 	bl	27ef8 <__malloc_lock>
   27722:	2610      	movs	r6, #16
   27724:	2318      	movs	r3, #24
   27726:	2002      	movs	r0, #2
   27728:	4f79      	ldr	r7, [pc, #484]	; (27910 <_malloc_r+0x344>)
   2772a:	443b      	add	r3, r7
   2772c:	f1a3 0208 	sub.w	r2, r3, #8
   27730:	685c      	ldr	r4, [r3, #4]
   27732:	4294      	cmp	r4, r2
   27734:	f000 813d 	beq.w	279b2 <_malloc_r+0x3e6>
   27738:	6863      	ldr	r3, [r4, #4]
   2773a:	68e1      	ldr	r1, [r4, #12]
   2773c:	68a6      	ldr	r6, [r4, #8]
   2773e:	f023 0303 	bic.w	r3, r3, #3
   27742:	4423      	add	r3, r4
   27744:	4628      	mov	r0, r5
   27746:	685a      	ldr	r2, [r3, #4]
   27748:	60f1      	str	r1, [r6, #12]
   2774a:	f042 0201 	orr.w	r2, r2, #1
   2774e:	608e      	str	r6, [r1, #8]
   27750:	605a      	str	r2, [r3, #4]
   27752:	f000 fbd7 	bl	27f04 <__malloc_unlock>
   27756:	3408      	adds	r4, #8
   27758:	4620      	mov	r0, r4
   2775a:	b003      	add	sp, #12
   2775c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   27760:	2400      	movs	r4, #0
   27762:	230c      	movs	r3, #12
   27764:	4620      	mov	r0, r4
   27766:	602b      	str	r3, [r5, #0]
   27768:	b003      	add	sp, #12
   2776a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2776e:	2040      	movs	r0, #64	; 0x40
   27770:	f44f 7300 	mov.w	r3, #512	; 0x200
   27774:	f04f 0e3f 	mov.w	lr, #63	; 0x3f
   27778:	e74a      	b.n	27610 <_malloc_r+0x44>
   2777a:	4423      	add	r3, r4
   2777c:	68e1      	ldr	r1, [r4, #12]
   2777e:	685a      	ldr	r2, [r3, #4]
   27780:	68a6      	ldr	r6, [r4, #8]
   27782:	f042 0201 	orr.w	r2, r2, #1
   27786:	60f1      	str	r1, [r6, #12]
   27788:	4628      	mov	r0, r5
   2778a:	608e      	str	r6, [r1, #8]
   2778c:	605a      	str	r2, [r3, #4]
   2778e:	f000 fbb9 	bl	27f04 <__malloc_unlock>
   27792:	3408      	adds	r4, #8
   27794:	4620      	mov	r0, r4
   27796:	b003      	add	sp, #12
   27798:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2779c:	4423      	add	r3, r4
   2779e:	4628      	mov	r0, r5
   277a0:	685a      	ldr	r2, [r3, #4]
   277a2:	f042 0201 	orr.w	r2, r2, #1
   277a6:	605a      	str	r2, [r3, #4]
   277a8:	f000 fbac 	bl	27f04 <__malloc_unlock>
   277ac:	3408      	adds	r4, #8
   277ae:	4620      	mov	r0, r4
   277b0:	b003      	add	sp, #12
   277b2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   277b6:	68bc      	ldr	r4, [r7, #8]
   277b8:	6863      	ldr	r3, [r4, #4]
   277ba:	f023 0803 	bic.w	r8, r3, #3
   277be:	45b0      	cmp	r8, r6
   277c0:	d304      	bcc.n	277cc <_malloc_r+0x200>
   277c2:	eba8 0306 	sub.w	r3, r8, r6
   277c6:	2b0f      	cmp	r3, #15
   277c8:	f300 8085 	bgt.w	278d6 <_malloc_r+0x30a>
   277cc:	f8df 9158 	ldr.w	r9, [pc, #344]	; 27928 <_malloc_r+0x35c>
   277d0:	4b50      	ldr	r3, [pc, #320]	; (27914 <_malloc_r+0x348>)
   277d2:	f8d9 2000 	ldr.w	r2, [r9]
   277d6:	681b      	ldr	r3, [r3, #0]
   277d8:	3201      	adds	r2, #1
   277da:	4433      	add	r3, r6
   277dc:	eb04 0a08 	add.w	sl, r4, r8
   277e0:	f000 8155 	beq.w	27a8e <_malloc_r+0x4c2>
   277e4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
   277e8:	330f      	adds	r3, #15
   277ea:	f423 6b7f 	bic.w	fp, r3, #4080	; 0xff0
   277ee:	f02b 0b0f 	bic.w	fp, fp, #15
   277f2:	4659      	mov	r1, fp
   277f4:	4628      	mov	r0, r5
   277f6:	f000 fd91 	bl	2831c <_sbrk_r>
   277fa:	1c41      	adds	r1, r0, #1
   277fc:	4602      	mov	r2, r0
   277fe:	f000 80fc 	beq.w	279fa <_malloc_r+0x42e>
   27802:	4582      	cmp	sl, r0
   27804:	f200 80f7 	bhi.w	279f6 <_malloc_r+0x42a>
   27808:	4b43      	ldr	r3, [pc, #268]	; (27918 <_malloc_r+0x34c>)
   2780a:	6819      	ldr	r1, [r3, #0]
   2780c:	4459      	add	r1, fp
   2780e:	6019      	str	r1, [r3, #0]
   27810:	f000 814d 	beq.w	27aae <_malloc_r+0x4e2>
   27814:	f8d9 0000 	ldr.w	r0, [r9]
   27818:	3001      	adds	r0, #1
   2781a:	bf1b      	ittet	ne
   2781c:	eba2 0a0a 	subne.w	sl, r2, sl
   27820:	4451      	addne	r1, sl
   27822:	f8c9 2000 	streq.w	r2, [r9]
   27826:	6019      	strne	r1, [r3, #0]
   27828:	f012 0107 	ands.w	r1, r2, #7
   2782c:	f000 8115 	beq.w	27a5a <_malloc_r+0x48e>
   27830:	f1c1 0008 	rsb	r0, r1, #8
   27834:	f5c1 5180 	rsb	r1, r1, #4096	; 0x1000
   27838:	4402      	add	r2, r0
   2783a:	3108      	adds	r1, #8
   2783c:	eb02 090b 	add.w	r9, r2, fp
   27840:	f3c9 090b 	ubfx	r9, r9, #0, #12
   27844:	eba1 0909 	sub.w	r9, r1, r9
   27848:	4649      	mov	r1, r9
   2784a:	4628      	mov	r0, r5
   2784c:	9301      	str	r3, [sp, #4]
   2784e:	9200      	str	r2, [sp, #0]
   27850:	f000 fd64 	bl	2831c <_sbrk_r>
   27854:	1c43      	adds	r3, r0, #1
   27856:	e89d 000c 	ldmia.w	sp, {r2, r3}
   2785a:	f000 8143 	beq.w	27ae4 <_malloc_r+0x518>
   2785e:	1a80      	subs	r0, r0, r2
   27860:	4448      	add	r0, r9
   27862:	f040 0001 	orr.w	r0, r0, #1
   27866:	6819      	ldr	r1, [r3, #0]
   27868:	60ba      	str	r2, [r7, #8]
   2786a:	4449      	add	r1, r9
   2786c:	42bc      	cmp	r4, r7
   2786e:	6050      	str	r0, [r2, #4]
   27870:	6019      	str	r1, [r3, #0]
   27872:	d017      	beq.n	278a4 <_malloc_r+0x2d8>
   27874:	f1b8 0f0f 	cmp.w	r8, #15
   27878:	f240 80fb 	bls.w	27a72 <_malloc_r+0x4a6>
   2787c:	6860      	ldr	r0, [r4, #4]
   2787e:	f1a8 020c 	sub.w	r2, r8, #12
   27882:	f022 0207 	bic.w	r2, r2, #7
   27886:	eb04 0e02 	add.w	lr, r4, r2
   2788a:	f000 0001 	and.w	r0, r0, #1
   2788e:	f04f 0c05 	mov.w	ip, #5
   27892:	4310      	orrs	r0, r2
   27894:	2a0f      	cmp	r2, #15
   27896:	6060      	str	r0, [r4, #4]
   27898:	f8ce c004 	str.w	ip, [lr, #4]
   2789c:	f8ce c008 	str.w	ip, [lr, #8]
   278a0:	f200 8117 	bhi.w	27ad2 <_malloc_r+0x506>
   278a4:	4b1d      	ldr	r3, [pc, #116]	; (2791c <_malloc_r+0x350>)
   278a6:	68bc      	ldr	r4, [r7, #8]
   278a8:	681a      	ldr	r2, [r3, #0]
   278aa:	4291      	cmp	r1, r2
   278ac:	bf88      	it	hi
   278ae:	6019      	strhi	r1, [r3, #0]
   278b0:	4b1b      	ldr	r3, [pc, #108]	; (27920 <_malloc_r+0x354>)
   278b2:	681a      	ldr	r2, [r3, #0]
   278b4:	4291      	cmp	r1, r2
   278b6:	6862      	ldr	r2, [r4, #4]
   278b8:	bf88      	it	hi
   278ba:	6019      	strhi	r1, [r3, #0]
   278bc:	f022 0203 	bic.w	r2, r2, #3
   278c0:	4296      	cmp	r6, r2
   278c2:	eba2 0306 	sub.w	r3, r2, r6
   278c6:	d801      	bhi.n	278cc <_malloc_r+0x300>
   278c8:	2b0f      	cmp	r3, #15
   278ca:	dc04      	bgt.n	278d6 <_malloc_r+0x30a>
   278cc:	4628      	mov	r0, r5
   278ce:	f000 fb19 	bl	27f04 <__malloc_unlock>
   278d2:	2400      	movs	r4, #0
   278d4:	e740      	b.n	27758 <_malloc_r+0x18c>
   278d6:	19a2      	adds	r2, r4, r6
   278d8:	f043 0301 	orr.w	r3, r3, #1
   278dc:	f046 0601 	orr.w	r6, r6, #1
   278e0:	6066      	str	r6, [r4, #4]
   278e2:	4628      	mov	r0, r5
   278e4:	60ba      	str	r2, [r7, #8]
   278e6:	6053      	str	r3, [r2, #4]
   278e8:	f000 fb0c 	bl	27f04 <__malloc_unlock>
   278ec:	3408      	adds	r4, #8
   278ee:	4620      	mov	r0, r4
   278f0:	b003      	add	sp, #12
   278f2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   278f6:	2b14      	cmp	r3, #20
   278f8:	d971      	bls.n	279de <_malloc_r+0x412>
   278fa:	2b54      	cmp	r3, #84	; 0x54
   278fc:	f200 80a3 	bhi.w	27a46 <_malloc_r+0x47a>
   27900:	0b33      	lsrs	r3, r6, #12
   27902:	f103 006f 	add.w	r0, r3, #111	; 0x6f
   27906:	f103 0e6e 	add.w	lr, r3, #110	; 0x6e
   2790a:	00c3      	lsls	r3, r0, #3
   2790c:	e680      	b.n	27610 <_malloc_r+0x44>
   2790e:	bf00      	nop
   27910:	200006a4 	.word	0x200006a4
   27914:	200029ac 	.word	0x200029ac
   27918:	2000297c 	.word	0x2000297c
   2791c:	200029a4 	.word	0x200029a4
   27920:	200029a8 	.word	0x200029a8
   27924:	200006ac 	.word	0x200006ac
   27928:	20000aac 	.word	0x20000aac
   2792c:	0a5a      	lsrs	r2, r3, #9
   2792e:	2a04      	cmp	r2, #4
   27930:	d95b      	bls.n	279ea <_malloc_r+0x41e>
   27932:	2a14      	cmp	r2, #20
   27934:	f200 80ae 	bhi.w	27a94 <_malloc_r+0x4c8>
   27938:	f102 015c 	add.w	r1, r2, #92	; 0x5c
   2793c:	00c9      	lsls	r1, r1, #3
   2793e:	325b      	adds	r2, #91	; 0x5b
   27940:	eb07 0c01 	add.w	ip, r7, r1
   27944:	5879      	ldr	r1, [r7, r1]
   27946:	f1ac 0c08 	sub.w	ip, ip, #8
   2794a:	458c      	cmp	ip, r1
   2794c:	f000 8088 	beq.w	27a60 <_malloc_r+0x494>
   27950:	684a      	ldr	r2, [r1, #4]
   27952:	f022 0203 	bic.w	r2, r2, #3
   27956:	4293      	cmp	r3, r2
   27958:	d273      	bcs.n	27a42 <_malloc_r+0x476>
   2795a:	6889      	ldr	r1, [r1, #8]
   2795c:	458c      	cmp	ip, r1
   2795e:	d1f7      	bne.n	27950 <_malloc_r+0x384>
   27960:	f8dc 200c 	ldr.w	r2, [ip, #12]
   27964:	687b      	ldr	r3, [r7, #4]
   27966:	60e2      	str	r2, [r4, #12]
   27968:	f8c4 c008 	str.w	ip, [r4, #8]
   2796c:	6094      	str	r4, [r2, #8]
   2796e:	f8cc 400c 	str.w	r4, [ip, #12]
   27972:	e68f      	b.n	27694 <_malloc_r+0xc8>
   27974:	19a1      	adds	r1, r4, r6
   27976:	f046 0c01 	orr.w	ip, r6, #1
   2797a:	f042 0601 	orr.w	r6, r2, #1
   2797e:	f8c4 c004 	str.w	ip, [r4, #4]
   27982:	4628      	mov	r0, r5
   27984:	6179      	str	r1, [r7, #20]
   27986:	6139      	str	r1, [r7, #16]
   27988:	f8c1 e00c 	str.w	lr, [r1, #12]
   2798c:	f8c1 e008 	str.w	lr, [r1, #8]
   27990:	604e      	str	r6, [r1, #4]
   27992:	50e2      	str	r2, [r4, r3]
   27994:	f000 fab6 	bl	27f04 <__malloc_unlock>
   27998:	3408      	adds	r4, #8
   2799a:	e6dd      	b.n	27758 <_malloc_r+0x18c>
   2799c:	687b      	ldr	r3, [r7, #4]
   2799e:	e679      	b.n	27694 <_malloc_r+0xc8>
   279a0:	f108 0801 	add.w	r8, r8, #1
   279a4:	f018 0f03 	tst.w	r8, #3
   279a8:	f10c 0c08 	add.w	ip, ip, #8
   279ac:	f47f ae85 	bne.w	276ba <_malloc_r+0xee>
   279b0:	e02d      	b.n	27a0e <_malloc_r+0x442>
   279b2:	68dc      	ldr	r4, [r3, #12]
   279b4:	42a3      	cmp	r3, r4
   279b6:	bf08      	it	eq
   279b8:	3002      	addeq	r0, #2
   279ba:	f43f ae3e 	beq.w	2763a <_malloc_r+0x6e>
   279be:	e6bb      	b.n	27738 <_malloc_r+0x16c>
   279c0:	4419      	add	r1, r3
   279c2:	461c      	mov	r4, r3
   279c4:	684a      	ldr	r2, [r1, #4]
   279c6:	68db      	ldr	r3, [r3, #12]
   279c8:	f854 6f08 	ldr.w	r6, [r4, #8]!
   279cc:	f042 0201 	orr.w	r2, r2, #1
   279d0:	604a      	str	r2, [r1, #4]
   279d2:	4628      	mov	r0, r5
   279d4:	60f3      	str	r3, [r6, #12]
   279d6:	609e      	str	r6, [r3, #8]
   279d8:	f000 fa94 	bl	27f04 <__malloc_unlock>
   279dc:	e6bc      	b.n	27758 <_malloc_r+0x18c>
   279de:	f103 005c 	add.w	r0, r3, #92	; 0x5c
   279e2:	f103 0e5b 	add.w	lr, r3, #91	; 0x5b
   279e6:	00c3      	lsls	r3, r0, #3
   279e8:	e612      	b.n	27610 <_malloc_r+0x44>
   279ea:	099a      	lsrs	r2, r3, #6
   279ec:	f102 0139 	add.w	r1, r2, #57	; 0x39
   279f0:	00c9      	lsls	r1, r1, #3
   279f2:	3238      	adds	r2, #56	; 0x38
   279f4:	e7a4      	b.n	27940 <_malloc_r+0x374>
   279f6:	42bc      	cmp	r4, r7
   279f8:	d054      	beq.n	27aa4 <_malloc_r+0x4d8>
   279fa:	68bc      	ldr	r4, [r7, #8]
   279fc:	6862      	ldr	r2, [r4, #4]
   279fe:	f022 0203 	bic.w	r2, r2, #3
   27a02:	e75d      	b.n	278c0 <_malloc_r+0x2f4>
   27a04:	f859 3908 	ldr.w	r3, [r9], #-8
   27a08:	4599      	cmp	r9, r3
   27a0a:	f040 8086 	bne.w	27b1a <_malloc_r+0x54e>
   27a0e:	f010 0f03 	tst.w	r0, #3
   27a12:	f100 30ff 	add.w	r0, r0, #4294967295
   27a16:	d1f5      	bne.n	27a04 <_malloc_r+0x438>
   27a18:	687b      	ldr	r3, [r7, #4]
   27a1a:	ea23 0304 	bic.w	r3, r3, r4
   27a1e:	607b      	str	r3, [r7, #4]
   27a20:	0064      	lsls	r4, r4, #1
   27a22:	429c      	cmp	r4, r3
   27a24:	f63f aec7 	bhi.w	277b6 <_malloc_r+0x1ea>
   27a28:	2c00      	cmp	r4, #0
   27a2a:	f43f aec4 	beq.w	277b6 <_malloc_r+0x1ea>
   27a2e:	421c      	tst	r4, r3
   27a30:	4640      	mov	r0, r8
   27a32:	f47f ae3e 	bne.w	276b2 <_malloc_r+0xe6>
   27a36:	0064      	lsls	r4, r4, #1
   27a38:	421c      	tst	r4, r3
   27a3a:	f100 0004 	add.w	r0, r0, #4
   27a3e:	d0fa      	beq.n	27a36 <_malloc_r+0x46a>
   27a40:	e637      	b.n	276b2 <_malloc_r+0xe6>
   27a42:	468c      	mov	ip, r1
   27a44:	e78c      	b.n	27960 <_malloc_r+0x394>
   27a46:	f5b3 7faa 	cmp.w	r3, #340	; 0x154
   27a4a:	d815      	bhi.n	27a78 <_malloc_r+0x4ac>
   27a4c:	0bf3      	lsrs	r3, r6, #15
   27a4e:	f103 0078 	add.w	r0, r3, #120	; 0x78
   27a52:	f103 0e77 	add.w	lr, r3, #119	; 0x77
   27a56:	00c3      	lsls	r3, r0, #3
   27a58:	e5da      	b.n	27610 <_malloc_r+0x44>
   27a5a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
   27a5e:	e6ed      	b.n	2783c <_malloc_r+0x270>
   27a60:	687b      	ldr	r3, [r7, #4]
   27a62:	1092      	asrs	r2, r2, #2
   27a64:	2101      	movs	r1, #1
   27a66:	fa01 f202 	lsl.w	r2, r1, r2
   27a6a:	4313      	orrs	r3, r2
   27a6c:	607b      	str	r3, [r7, #4]
   27a6e:	4662      	mov	r2, ip
   27a70:	e779      	b.n	27966 <_malloc_r+0x39a>
   27a72:	2301      	movs	r3, #1
   27a74:	6053      	str	r3, [r2, #4]
   27a76:	e729      	b.n	278cc <_malloc_r+0x300>
   27a78:	f240 5254 	movw	r2, #1364	; 0x554
   27a7c:	4293      	cmp	r3, r2
   27a7e:	d822      	bhi.n	27ac6 <_malloc_r+0x4fa>
   27a80:	0cb3      	lsrs	r3, r6, #18
   27a82:	f103 007d 	add.w	r0, r3, #125	; 0x7d
   27a86:	f103 0e7c 	add.w	lr, r3, #124	; 0x7c
   27a8a:	00c3      	lsls	r3, r0, #3
   27a8c:	e5c0      	b.n	27610 <_malloc_r+0x44>
   27a8e:	f103 0b10 	add.w	fp, r3, #16
   27a92:	e6ae      	b.n	277f2 <_malloc_r+0x226>
   27a94:	2a54      	cmp	r2, #84	; 0x54
   27a96:	d829      	bhi.n	27aec <_malloc_r+0x520>
   27a98:	0b1a      	lsrs	r2, r3, #12
   27a9a:	f102 016f 	add.w	r1, r2, #111	; 0x6f
   27a9e:	00c9      	lsls	r1, r1, #3
   27aa0:	326e      	adds	r2, #110	; 0x6e
   27aa2:	e74d      	b.n	27940 <_malloc_r+0x374>
   27aa4:	4b20      	ldr	r3, [pc, #128]	; (27b28 <_malloc_r+0x55c>)
   27aa6:	6819      	ldr	r1, [r3, #0]
   27aa8:	4459      	add	r1, fp
   27aaa:	6019      	str	r1, [r3, #0]
   27aac:	e6b2      	b.n	27814 <_malloc_r+0x248>
   27aae:	f3ca 000b 	ubfx	r0, sl, #0, #12
   27ab2:	2800      	cmp	r0, #0
   27ab4:	f47f aeae 	bne.w	27814 <_malloc_r+0x248>
   27ab8:	eb08 030b 	add.w	r3, r8, fp
   27abc:	68ba      	ldr	r2, [r7, #8]
   27abe:	f043 0301 	orr.w	r3, r3, #1
   27ac2:	6053      	str	r3, [r2, #4]
   27ac4:	e6ee      	b.n	278a4 <_malloc_r+0x2d8>
   27ac6:	207f      	movs	r0, #127	; 0x7f
   27ac8:	f44f 737e 	mov.w	r3, #1016	; 0x3f8
   27acc:	f04f 0e7e 	mov.w	lr, #126	; 0x7e
   27ad0:	e59e      	b.n	27610 <_malloc_r+0x44>
   27ad2:	f104 0108 	add.w	r1, r4, #8
   27ad6:	4628      	mov	r0, r5
   27ad8:	9300      	str	r3, [sp, #0]
   27ada:	f003 ff1d 	bl	2b918 <_free_r>
   27ade:	9b00      	ldr	r3, [sp, #0]
   27ae0:	6819      	ldr	r1, [r3, #0]
   27ae2:	e6df      	b.n	278a4 <_malloc_r+0x2d8>
   27ae4:	2001      	movs	r0, #1
   27ae6:	f04f 0900 	mov.w	r9, #0
   27aea:	e6bc      	b.n	27866 <_malloc_r+0x29a>
   27aec:	f5b2 7faa 	cmp.w	r2, #340	; 0x154
   27af0:	d805      	bhi.n	27afe <_malloc_r+0x532>
   27af2:	0bda      	lsrs	r2, r3, #15
   27af4:	f102 0178 	add.w	r1, r2, #120	; 0x78
   27af8:	00c9      	lsls	r1, r1, #3
   27afa:	3277      	adds	r2, #119	; 0x77
   27afc:	e720      	b.n	27940 <_malloc_r+0x374>
   27afe:	f240 5154 	movw	r1, #1364	; 0x554
   27b02:	428a      	cmp	r2, r1
   27b04:	d805      	bhi.n	27b12 <_malloc_r+0x546>
   27b06:	0c9a      	lsrs	r2, r3, #18
   27b08:	f102 017d 	add.w	r1, r2, #125	; 0x7d
   27b0c:	00c9      	lsls	r1, r1, #3
   27b0e:	327c      	adds	r2, #124	; 0x7c
   27b10:	e716      	b.n	27940 <_malloc_r+0x374>
   27b12:	f44f 717e 	mov.w	r1, #1016	; 0x3f8
   27b16:	227e      	movs	r2, #126	; 0x7e
   27b18:	e712      	b.n	27940 <_malloc_r+0x374>
   27b1a:	687b      	ldr	r3, [r7, #4]
   27b1c:	e780      	b.n	27a20 <_malloc_r+0x454>
   27b1e:	08f0      	lsrs	r0, r6, #3
   27b20:	f106 0308 	add.w	r3, r6, #8
   27b24:	e600      	b.n	27728 <_malloc_r+0x15c>
   27b26:	bf00      	nop
   27b28:	2000297c 	.word	0x2000297c

00027b2c <__ascii_mbtowc>:
   27b2c:	b082      	sub	sp, #8
   27b2e:	b149      	cbz	r1, 27b44 <__ascii_mbtowc+0x18>
   27b30:	b15a      	cbz	r2, 27b4a <__ascii_mbtowc+0x1e>
   27b32:	b16b      	cbz	r3, 27b50 <__ascii_mbtowc+0x24>
   27b34:	7813      	ldrb	r3, [r2, #0]
   27b36:	600b      	str	r3, [r1, #0]
   27b38:	7812      	ldrb	r2, [r2, #0]
   27b3a:	1c10      	adds	r0, r2, #0
   27b3c:	bf18      	it	ne
   27b3e:	2001      	movne	r0, #1
   27b40:	b002      	add	sp, #8
   27b42:	4770      	bx	lr
   27b44:	a901      	add	r1, sp, #4
   27b46:	2a00      	cmp	r2, #0
   27b48:	d1f3      	bne.n	27b32 <__ascii_mbtowc+0x6>
   27b4a:	4610      	mov	r0, r2
   27b4c:	b002      	add	sp, #8
   27b4e:	4770      	bx	lr
   27b50:	f06f 0001 	mvn.w	r0, #1
   27b54:	e7f4      	b.n	27b40 <__ascii_mbtowc+0x14>
   27b56:	bf00      	nop
	...

00027b60 <memchr>:
   27b60:	f001 01ff 	and.w	r1, r1, #255	; 0xff
   27b64:	2a10      	cmp	r2, #16
   27b66:	db2b      	blt.n	27bc0 <memchr+0x60>
   27b68:	f010 0f07 	tst.w	r0, #7
   27b6c:	d008      	beq.n	27b80 <memchr+0x20>
   27b6e:	f810 3b01 	ldrb.w	r3, [r0], #1
   27b72:	3a01      	subs	r2, #1
   27b74:	428b      	cmp	r3, r1
   27b76:	d02d      	beq.n	27bd4 <memchr+0x74>
   27b78:	f010 0f07 	tst.w	r0, #7
   27b7c:	b342      	cbz	r2, 27bd0 <memchr+0x70>
   27b7e:	d1f6      	bne.n	27b6e <memchr+0xe>
   27b80:	b4f0      	push	{r4, r5, r6, r7}
   27b82:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
   27b86:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
   27b8a:	f022 0407 	bic.w	r4, r2, #7
   27b8e:	f07f 0700 	mvns.w	r7, #0
   27b92:	2300      	movs	r3, #0
   27b94:	e8f0 5602 	ldrd	r5, r6, [r0], #8
   27b98:	3c08      	subs	r4, #8
   27b9a:	ea85 0501 	eor.w	r5, r5, r1
   27b9e:	ea86 0601 	eor.w	r6, r6, r1
   27ba2:	fa85 f547 	uadd8	r5, r5, r7
   27ba6:	faa3 f587 	sel	r5, r3, r7
   27baa:	fa86 f647 	uadd8	r6, r6, r7
   27bae:	faa5 f687 	sel	r6, r5, r7
   27bb2:	b98e      	cbnz	r6, 27bd8 <memchr+0x78>
   27bb4:	d1ee      	bne.n	27b94 <memchr+0x34>
   27bb6:	bcf0      	pop	{r4, r5, r6, r7}
   27bb8:	f001 01ff 	and.w	r1, r1, #255	; 0xff
   27bbc:	f002 0207 	and.w	r2, r2, #7
   27bc0:	b132      	cbz	r2, 27bd0 <memchr+0x70>
   27bc2:	f810 3b01 	ldrb.w	r3, [r0], #1
   27bc6:	3a01      	subs	r2, #1
   27bc8:	ea83 0301 	eor.w	r3, r3, r1
   27bcc:	b113      	cbz	r3, 27bd4 <memchr+0x74>
   27bce:	d1f8      	bne.n	27bc2 <memchr+0x62>
   27bd0:	2000      	movs	r0, #0
   27bd2:	4770      	bx	lr
   27bd4:	3801      	subs	r0, #1
   27bd6:	4770      	bx	lr
   27bd8:	2d00      	cmp	r5, #0
   27bda:	bf06      	itte	eq
   27bdc:	4635      	moveq	r5, r6
   27bde:	3803      	subeq	r0, #3
   27be0:	3807      	subne	r0, #7
   27be2:	f015 0f01 	tst.w	r5, #1
   27be6:	d107      	bne.n	27bf8 <memchr+0x98>
   27be8:	3001      	adds	r0, #1
   27bea:	f415 7f80 	tst.w	r5, #256	; 0x100
   27bee:	bf02      	ittt	eq
   27bf0:	3001      	addeq	r0, #1
   27bf2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
   27bf6:	3001      	addeq	r0, #1
   27bf8:	bcf0      	pop	{r4, r5, r6, r7}
   27bfa:	3801      	subs	r0, #1
   27bfc:	4770      	bx	lr
   27bfe:	bf00      	nop

00027c00 <memcmp>:
   27c00:	2a03      	cmp	r2, #3
   27c02:	b470      	push	{r4, r5, r6}
   27c04:	d922      	bls.n	27c4c <memcmp+0x4c>
   27c06:	ea40 0301 	orr.w	r3, r0, r1
   27c0a:	079b      	lsls	r3, r3, #30
   27c0c:	d011      	beq.n	27c32 <memcmp+0x32>
   27c0e:	7803      	ldrb	r3, [r0, #0]
   27c10:	780c      	ldrb	r4, [r1, #0]
   27c12:	42a3      	cmp	r3, r4
   27c14:	d11d      	bne.n	27c52 <memcmp+0x52>
   27c16:	440a      	add	r2, r1
   27c18:	3101      	adds	r1, #1
   27c1a:	e005      	b.n	27c28 <memcmp+0x28>
   27c1c:	f810 3f01 	ldrb.w	r3, [r0, #1]!
   27c20:	f811 4b01 	ldrb.w	r4, [r1], #1
   27c24:	42a3      	cmp	r3, r4
   27c26:	d114      	bne.n	27c52 <memcmp+0x52>
   27c28:	4291      	cmp	r1, r2
   27c2a:	d1f7      	bne.n	27c1c <memcmp+0x1c>
   27c2c:	2000      	movs	r0, #0
   27c2e:	bc70      	pop	{r4, r5, r6}
   27c30:	4770      	bx	lr
   27c32:	680d      	ldr	r5, [r1, #0]
   27c34:	6806      	ldr	r6, [r0, #0]
   27c36:	42ae      	cmp	r6, r5
   27c38:	460c      	mov	r4, r1
   27c3a:	4603      	mov	r3, r0
   27c3c:	f101 0104 	add.w	r1, r1, #4
   27c40:	f100 0004 	add.w	r0, r0, #4
   27c44:	d108      	bne.n	27c58 <memcmp+0x58>
   27c46:	3a04      	subs	r2, #4
   27c48:	2a03      	cmp	r2, #3
   27c4a:	d8f2      	bhi.n	27c32 <memcmp+0x32>
   27c4c:	2a00      	cmp	r2, #0
   27c4e:	d1de      	bne.n	27c0e <memcmp+0xe>
   27c50:	e7ec      	b.n	27c2c <memcmp+0x2c>
   27c52:	1b18      	subs	r0, r3, r4
   27c54:	bc70      	pop	{r4, r5, r6}
   27c56:	4770      	bx	lr
   27c58:	4621      	mov	r1, r4
   27c5a:	4618      	mov	r0, r3
   27c5c:	e7d7      	b.n	27c0e <memcmp+0xe>
   27c5e:	bf00      	nop

00027c60 <memcpy>:
   27c60:	4684      	mov	ip, r0
   27c62:	ea41 0300 	orr.w	r3, r1, r0
   27c66:	f013 0303 	ands.w	r3, r3, #3
   27c6a:	d16d      	bne.n	27d48 <memcpy+0xe8>
   27c6c:	3a40      	subs	r2, #64	; 0x40
   27c6e:	d341      	bcc.n	27cf4 <memcpy+0x94>
   27c70:	f851 3b04 	ldr.w	r3, [r1], #4
   27c74:	f840 3b04 	str.w	r3, [r0], #4
   27c78:	f851 3b04 	ldr.w	r3, [r1], #4
   27c7c:	f840 3b04 	str.w	r3, [r0], #4
   27c80:	f851 3b04 	ldr.w	r3, [r1], #4
   27c84:	f840 3b04 	str.w	r3, [r0], #4
   27c88:	f851 3b04 	ldr.w	r3, [r1], #4
   27c8c:	f840 3b04 	str.w	r3, [r0], #4
   27c90:	f851 3b04 	ldr.w	r3, [r1], #4
   27c94:	f840 3b04 	str.w	r3, [r0], #4
   27c98:	f851 3b04 	ldr.w	r3, [r1], #4
   27c9c:	f840 3b04 	str.w	r3, [r0], #4
   27ca0:	f851 3b04 	ldr.w	r3, [r1], #4
   27ca4:	f840 3b04 	str.w	r3, [r0], #4
   27ca8:	f851 3b04 	ldr.w	r3, [r1], #4
   27cac:	f840 3b04 	str.w	r3, [r0], #4
   27cb0:	f851 3b04 	ldr.w	r3, [r1], #4
   27cb4:	f840 3b04 	str.w	r3, [r0], #4
   27cb8:	f851 3b04 	ldr.w	r3, [r1], #4
   27cbc:	f840 3b04 	str.w	r3, [r0], #4
   27cc0:	f851 3b04 	ldr.w	r3, [r1], #4
   27cc4:	f840 3b04 	str.w	r3, [r0], #4
   27cc8:	f851 3b04 	ldr.w	r3, [r1], #4
   27ccc:	f840 3b04 	str.w	r3, [r0], #4
   27cd0:	f851 3b04 	ldr.w	r3, [r1], #4
   27cd4:	f840 3b04 	str.w	r3, [r0], #4
   27cd8:	f851 3b04 	ldr.w	r3, [r1], #4
   27cdc:	f840 3b04 	str.w	r3, [r0], #4
   27ce0:	f851 3b04 	ldr.w	r3, [r1], #4
   27ce4:	f840 3b04 	str.w	r3, [r0], #4
   27ce8:	f851 3b04 	ldr.w	r3, [r1], #4
   27cec:	f840 3b04 	str.w	r3, [r0], #4
   27cf0:	3a40      	subs	r2, #64	; 0x40
   27cf2:	d2bd      	bcs.n	27c70 <memcpy+0x10>
   27cf4:	3230      	adds	r2, #48	; 0x30
   27cf6:	d311      	bcc.n	27d1c <memcpy+0xbc>
   27cf8:	f851 3b04 	ldr.w	r3, [r1], #4
   27cfc:	f840 3b04 	str.w	r3, [r0], #4
   27d00:	f851 3b04 	ldr.w	r3, [r1], #4
   27d04:	f840 3b04 	str.w	r3, [r0], #4
   27d08:	f851 3b04 	ldr.w	r3, [r1], #4
   27d0c:	f840 3b04 	str.w	r3, [r0], #4
   27d10:	f851 3b04 	ldr.w	r3, [r1], #4
   27d14:	f840 3b04 	str.w	r3, [r0], #4
   27d18:	3a10      	subs	r2, #16
   27d1a:	d2ed      	bcs.n	27cf8 <memcpy+0x98>
   27d1c:	320c      	adds	r2, #12
   27d1e:	d305      	bcc.n	27d2c <memcpy+0xcc>
   27d20:	f851 3b04 	ldr.w	r3, [r1], #4
   27d24:	f840 3b04 	str.w	r3, [r0], #4
   27d28:	3a04      	subs	r2, #4
   27d2a:	d2f9      	bcs.n	27d20 <memcpy+0xc0>
   27d2c:	3204      	adds	r2, #4
   27d2e:	d008      	beq.n	27d42 <memcpy+0xe2>
   27d30:	07d2      	lsls	r2, r2, #31
   27d32:	bf1c      	itt	ne
   27d34:	f811 3b01 	ldrbne.w	r3, [r1], #1
   27d38:	f800 3b01 	strbne.w	r3, [r0], #1
   27d3c:	d301      	bcc.n	27d42 <memcpy+0xe2>
   27d3e:	880b      	ldrh	r3, [r1, #0]
   27d40:	8003      	strh	r3, [r0, #0]
   27d42:	4660      	mov	r0, ip
   27d44:	4770      	bx	lr
   27d46:	bf00      	nop
   27d48:	2a08      	cmp	r2, #8
   27d4a:	d313      	bcc.n	27d74 <memcpy+0x114>
   27d4c:	078b      	lsls	r3, r1, #30
   27d4e:	d08d      	beq.n	27c6c <memcpy+0xc>
   27d50:	f010 0303 	ands.w	r3, r0, #3
   27d54:	d08a      	beq.n	27c6c <memcpy+0xc>
   27d56:	f1c3 0304 	rsb	r3, r3, #4
   27d5a:	1ad2      	subs	r2, r2, r3
   27d5c:	07db      	lsls	r3, r3, #31
   27d5e:	bf1c      	itt	ne
   27d60:	f811 3b01 	ldrbne.w	r3, [r1], #1
   27d64:	f800 3b01 	strbne.w	r3, [r0], #1
   27d68:	d380      	bcc.n	27c6c <memcpy+0xc>
   27d6a:	f831 3b02 	ldrh.w	r3, [r1], #2
   27d6e:	f820 3b02 	strh.w	r3, [r0], #2
   27d72:	e77b      	b.n	27c6c <memcpy+0xc>
   27d74:	3a04      	subs	r2, #4
   27d76:	d3d9      	bcc.n	27d2c <memcpy+0xcc>
   27d78:	3a01      	subs	r2, #1
   27d7a:	f811 3b01 	ldrb.w	r3, [r1], #1
   27d7e:	f800 3b01 	strb.w	r3, [r0], #1
   27d82:	d2f9      	bcs.n	27d78 <memcpy+0x118>
   27d84:	780b      	ldrb	r3, [r1, #0]
   27d86:	7003      	strb	r3, [r0, #0]
   27d88:	784b      	ldrb	r3, [r1, #1]
   27d8a:	7043      	strb	r3, [r0, #1]
   27d8c:	788b      	ldrb	r3, [r1, #2]
   27d8e:	7083      	strb	r3, [r0, #2]
   27d90:	4660      	mov	r0, ip
   27d92:	4770      	bx	lr

00027d94 <memmove>:
   27d94:	4288      	cmp	r0, r1
   27d96:	b5f0      	push	{r4, r5, r6, r7, lr}
   27d98:	d90d      	bls.n	27db6 <memmove+0x22>
   27d9a:	188b      	adds	r3, r1, r2
   27d9c:	4298      	cmp	r0, r3
   27d9e:	d20a      	bcs.n	27db6 <memmove+0x22>
   27da0:	1884      	adds	r4, r0, r2
   27da2:	2a00      	cmp	r2, #0
   27da4:	d051      	beq.n	27e4a <memmove+0xb6>
   27da6:	4622      	mov	r2, r4
   27da8:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
   27dac:	f802 4d01 	strb.w	r4, [r2, #-1]!
   27db0:	4299      	cmp	r1, r3
   27db2:	d1f9      	bne.n	27da8 <memmove+0x14>
   27db4:	bdf0      	pop	{r4, r5, r6, r7, pc}
   27db6:	2a0f      	cmp	r2, #15
   27db8:	d948      	bls.n	27e4c <memmove+0xb8>
   27dba:	ea41 0300 	orr.w	r3, r1, r0
   27dbe:	079b      	lsls	r3, r3, #30
   27dc0:	d146      	bne.n	27e50 <memmove+0xbc>
   27dc2:	f100 0410 	add.w	r4, r0, #16
   27dc6:	f101 0310 	add.w	r3, r1, #16
   27dca:	4615      	mov	r5, r2
   27dcc:	f853 6c10 	ldr.w	r6, [r3, #-16]
   27dd0:	f844 6c10 	str.w	r6, [r4, #-16]
   27dd4:	f853 6c0c 	ldr.w	r6, [r3, #-12]
   27dd8:	f844 6c0c 	str.w	r6, [r4, #-12]
   27ddc:	f853 6c08 	ldr.w	r6, [r3, #-8]
   27de0:	f844 6c08 	str.w	r6, [r4, #-8]
   27de4:	3d10      	subs	r5, #16
   27de6:	f853 6c04 	ldr.w	r6, [r3, #-4]
   27dea:	f844 6c04 	str.w	r6, [r4, #-4]
   27dee:	2d0f      	cmp	r5, #15
   27df0:	f103 0310 	add.w	r3, r3, #16
   27df4:	f104 0410 	add.w	r4, r4, #16
   27df8:	d8e8      	bhi.n	27dcc <memmove+0x38>
   27dfa:	f1a2 0310 	sub.w	r3, r2, #16
   27dfe:	f023 030f 	bic.w	r3, r3, #15
   27e02:	f002 0e0f 	and.w	lr, r2, #15
   27e06:	3310      	adds	r3, #16
   27e08:	f1be 0f03 	cmp.w	lr, #3
   27e0c:	4419      	add	r1, r3
   27e0e:	4403      	add	r3, r0
   27e10:	d921      	bls.n	27e56 <memmove+0xc2>
   27e12:	1f1e      	subs	r6, r3, #4
   27e14:	460d      	mov	r5, r1
   27e16:	4674      	mov	r4, lr
   27e18:	3c04      	subs	r4, #4
   27e1a:	f855 7b04 	ldr.w	r7, [r5], #4
   27e1e:	f846 7f04 	str.w	r7, [r6, #4]!
   27e22:	2c03      	cmp	r4, #3
   27e24:	d8f8      	bhi.n	27e18 <memmove+0x84>
   27e26:	f1ae 0404 	sub.w	r4, lr, #4
   27e2a:	f024 0403 	bic.w	r4, r4, #3
   27e2e:	3404      	adds	r4, #4
   27e30:	4421      	add	r1, r4
   27e32:	4423      	add	r3, r4
   27e34:	f002 0203 	and.w	r2, r2, #3
   27e38:	b162      	cbz	r2, 27e54 <memmove+0xc0>
   27e3a:	3b01      	subs	r3, #1
   27e3c:	440a      	add	r2, r1
   27e3e:	f811 4b01 	ldrb.w	r4, [r1], #1
   27e42:	f803 4f01 	strb.w	r4, [r3, #1]!
   27e46:	428a      	cmp	r2, r1
   27e48:	d1f9      	bne.n	27e3e <memmove+0xaa>
   27e4a:	bdf0      	pop	{r4, r5, r6, r7, pc}
   27e4c:	4603      	mov	r3, r0
   27e4e:	e7f3      	b.n	27e38 <memmove+0xa4>
   27e50:	4603      	mov	r3, r0
   27e52:	e7f2      	b.n	27e3a <memmove+0xa6>
   27e54:	bdf0      	pop	{r4, r5, r6, r7, pc}
   27e56:	4672      	mov	r2, lr
   27e58:	e7ee      	b.n	27e38 <memmove+0xa4>
   27e5a:	bf00      	nop

00027e5c <memset>:
   27e5c:	b470      	push	{r4, r5, r6}
   27e5e:	0786      	lsls	r6, r0, #30
   27e60:	d046      	beq.n	27ef0 <memset+0x94>
   27e62:	1e54      	subs	r4, r2, #1
   27e64:	2a00      	cmp	r2, #0
   27e66:	d041      	beq.n	27eec <memset+0x90>
   27e68:	b2ca      	uxtb	r2, r1
   27e6a:	4603      	mov	r3, r0
   27e6c:	e002      	b.n	27e74 <memset+0x18>
   27e6e:	f114 34ff 	adds.w	r4, r4, #4294967295
   27e72:	d33b      	bcc.n	27eec <memset+0x90>
   27e74:	f803 2b01 	strb.w	r2, [r3], #1
   27e78:	079d      	lsls	r5, r3, #30
   27e7a:	d1f8      	bne.n	27e6e <memset+0x12>
   27e7c:	2c03      	cmp	r4, #3
   27e7e:	d92e      	bls.n	27ede <memset+0x82>
   27e80:	b2cd      	uxtb	r5, r1
   27e82:	ea45 2505 	orr.w	r5, r5, r5, lsl #8
   27e86:	2c0f      	cmp	r4, #15
   27e88:	ea45 4505 	orr.w	r5, r5, r5, lsl #16
   27e8c:	d919      	bls.n	27ec2 <memset+0x66>
   27e8e:	f103 0210 	add.w	r2, r3, #16
   27e92:	4626      	mov	r6, r4
   27e94:	3e10      	subs	r6, #16
   27e96:	2e0f      	cmp	r6, #15
   27e98:	f842 5c10 	str.w	r5, [r2, #-16]
   27e9c:	f842 5c0c 	str.w	r5, [r2, #-12]
   27ea0:	f842 5c08 	str.w	r5, [r2, #-8]
   27ea4:	f842 5c04 	str.w	r5, [r2, #-4]
   27ea8:	f102 0210 	add.w	r2, r2, #16
   27eac:	d8f2      	bhi.n	27e94 <memset+0x38>
   27eae:	f1a4 0210 	sub.w	r2, r4, #16
   27eb2:	f022 020f 	bic.w	r2, r2, #15
   27eb6:	f004 040f 	and.w	r4, r4, #15
   27eba:	3210      	adds	r2, #16
   27ebc:	2c03      	cmp	r4, #3
   27ebe:	4413      	add	r3, r2
   27ec0:	d90d      	bls.n	27ede <memset+0x82>
   27ec2:	461e      	mov	r6, r3
   27ec4:	4622      	mov	r2, r4
   27ec6:	3a04      	subs	r2, #4
   27ec8:	2a03      	cmp	r2, #3
   27eca:	f846 5b04 	str.w	r5, [r6], #4
   27ece:	d8fa      	bhi.n	27ec6 <memset+0x6a>
   27ed0:	1f22      	subs	r2, r4, #4
   27ed2:	f022 0203 	bic.w	r2, r2, #3
   27ed6:	3204      	adds	r2, #4
   27ed8:	4413      	add	r3, r2
   27eda:	f004 0403 	and.w	r4, r4, #3
   27ede:	b12c      	cbz	r4, 27eec <memset+0x90>
   27ee0:	b2c9      	uxtb	r1, r1
   27ee2:	441c      	add	r4, r3
   27ee4:	f803 1b01 	strb.w	r1, [r3], #1
   27ee8:	429c      	cmp	r4, r3
   27eea:	d1fb      	bne.n	27ee4 <memset+0x88>
   27eec:	bc70      	pop	{r4, r5, r6}
   27eee:	4770      	bx	lr
   27ef0:	4614      	mov	r4, r2
   27ef2:	4603      	mov	r3, r0
   27ef4:	e7c2      	b.n	27e7c <memset+0x20>
   27ef6:	bf00      	nop

00027ef8 <__malloc_lock>:
   27ef8:	4801      	ldr	r0, [pc, #4]	; (27f00 <__malloc_lock+0x8>)
   27efa:	f7ff bb53 	b.w	275a4 <__retarget_lock_acquire_recursive>
   27efe:	bf00      	nop
   27f00:	2000a42c 	.word	0x2000a42c

00027f04 <__malloc_unlock>:
   27f04:	4801      	ldr	r0, [pc, #4]	; (27f0c <__malloc_unlock+0x8>)
   27f06:	f7ff bb4f 	b.w	275a8 <__retarget_lock_release_recursive>
   27f0a:	bf00      	nop
   27f0c:	2000a42c 	.word	0x2000a42c

00027f10 <_putc_r>:
   27f10:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   27f12:	460e      	mov	r6, r1
   27f14:	4614      	mov	r4, r2
   27f16:	4607      	mov	r7, r0
   27f18:	b108      	cbz	r0, 27f1e <_putc_r+0xe>
   27f1a:	6b83      	ldr	r3, [r0, #56]	; 0x38
   27f1c:	b34b      	cbz	r3, 27f72 <_putc_r+0x62>
   27f1e:	6e63      	ldr	r3, [r4, #100]	; 0x64
   27f20:	07d8      	lsls	r0, r3, #31
   27f22:	d402      	bmi.n	27f2a <_putc_r+0x1a>
   27f24:	89a3      	ldrh	r3, [r4, #12]
   27f26:	0599      	lsls	r1, r3, #22
   27f28:	d526      	bpl.n	27f78 <_putc_r+0x68>
   27f2a:	68a3      	ldr	r3, [r4, #8]
   27f2c:	3b01      	subs	r3, #1
   27f2e:	2b00      	cmp	r3, #0
   27f30:	60a3      	str	r3, [r4, #8]
   27f32:	db11      	blt.n	27f58 <_putc_r+0x48>
   27f34:	b2f5      	uxtb	r5, r6
   27f36:	6823      	ldr	r3, [r4, #0]
   27f38:	1c5a      	adds	r2, r3, #1
   27f3a:	6022      	str	r2, [r4, #0]
   27f3c:	701e      	strb	r6, [r3, #0]
   27f3e:	6e63      	ldr	r3, [r4, #100]	; 0x64
   27f40:	07da      	lsls	r2, r3, #31
   27f42:	d402      	bmi.n	27f4a <_putc_r+0x3a>
   27f44:	89a3      	ldrh	r3, [r4, #12]
   27f46:	059b      	lsls	r3, r3, #22
   27f48:	d501      	bpl.n	27f4e <_putc_r+0x3e>
   27f4a:	4628      	mov	r0, r5
   27f4c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   27f4e:	6da0      	ldr	r0, [r4, #88]	; 0x58
   27f50:	f7ff fb2a 	bl	275a8 <__retarget_lock_release_recursive>
   27f54:	4628      	mov	r0, r5
   27f56:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   27f58:	69a2      	ldr	r2, [r4, #24]
   27f5a:	4293      	cmp	r3, r2
   27f5c:	db02      	blt.n	27f64 <_putc_r+0x54>
   27f5e:	b2f5      	uxtb	r5, r6
   27f60:	2d0a      	cmp	r5, #10
   27f62:	d1e8      	bne.n	27f36 <_putc_r+0x26>
   27f64:	4631      	mov	r1, r6
   27f66:	4638      	mov	r0, r7
   27f68:	4622      	mov	r2, r4
   27f6a:	f002 fa91 	bl	2a490 <__swbuf_r>
   27f6e:	4605      	mov	r5, r0
   27f70:	e7e5      	b.n	27f3e <_putc_r+0x2e>
   27f72:	f003 fc2f 	bl	2b7d4 <__sinit>
   27f76:	e7d2      	b.n	27f1e <_putc_r+0xe>
   27f78:	6da0      	ldr	r0, [r4, #88]	; 0x58
   27f7a:	f7ff fb13 	bl	275a4 <__retarget_lock_acquire_recursive>
   27f7e:	e7d4      	b.n	27f2a <_putc_r+0x1a>

00027f80 <rand>:
   27f80:	b410      	push	{r4}
   27f82:	4b0c      	ldr	r3, [pc, #48]	; (27fb4 <rand+0x34>)
   27f84:	480c      	ldr	r0, [pc, #48]	; (27fb8 <rand+0x38>)
   27f86:	6819      	ldr	r1, [r3, #0]
   27f88:	4c0c      	ldr	r4, [pc, #48]	; (27fbc <rand+0x3c>)
   27f8a:	f8d1 20a8 	ldr.w	r2, [r1, #168]	; 0xa8
   27f8e:	f8d1 30ac 	ldr.w	r3, [r1, #172]	; 0xac
   27f92:	fb00 f002 	mul.w	r0, r0, r2
   27f96:	fb04 0003 	mla	r0, r4, r3, r0
   27f9a:	fba2 2304 	umull	r2, r3, r2, r4
   27f9e:	4403      	add	r3, r0
   27fa0:	3201      	adds	r2, #1
   27fa2:	f143 0300 	adc.w	r3, r3, #0
   27fa6:	e9c1 232a 	strd	r2, r3, [r1, #168]	; 0xa8
   27faa:	f023 4000 	bic.w	r0, r3, #2147483648	; 0x80000000
   27fae:	f85d 4b04 	ldr.w	r4, [sp], #4
   27fb2:	4770      	bx	lr
   27fb4:	20000108 	.word	0x20000108
   27fb8:	5851f42d 	.word	0x5851f42d
   27fbc:	4c957f2d 	.word	0x4c957f2d

00027fc0 <realloc>:
   27fc0:	4b02      	ldr	r3, [pc, #8]	; (27fcc <realloc+0xc>)
   27fc2:	460a      	mov	r2, r1
   27fc4:	4601      	mov	r1, r0
   27fc6:	6818      	ldr	r0, [r3, #0]
   27fc8:	f000 b802 	b.w	27fd0 <_realloc_r>
   27fcc:	20000108 	.word	0x20000108

00027fd0 <_realloc_r>:
   27fd0:	2900      	cmp	r1, #0
   27fd2:	f000 8095 	beq.w	28100 <_realloc_r+0x130>
   27fd6:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   27fda:	460d      	mov	r5, r1
   27fdc:	4616      	mov	r6, r2
   27fde:	b083      	sub	sp, #12
   27fe0:	4680      	mov	r8, r0
   27fe2:	f106 070b 	add.w	r7, r6, #11
   27fe6:	f7ff ff87 	bl	27ef8 <__malloc_lock>
   27fea:	f855 ec04 	ldr.w	lr, [r5, #-4]
   27fee:	2f16      	cmp	r7, #22
   27ff0:	f02e 0403 	bic.w	r4, lr, #3
   27ff4:	f1a5 0908 	sub.w	r9, r5, #8
   27ff8:	d83c      	bhi.n	28074 <_realloc_r+0xa4>
   27ffa:	2210      	movs	r2, #16
   27ffc:	4617      	mov	r7, r2
   27ffe:	42be      	cmp	r6, r7
   28000:	d83d      	bhi.n	2807e <_realloc_r+0xae>
   28002:	4294      	cmp	r4, r2
   28004:	da43      	bge.n	2808e <_realloc_r+0xbe>
   28006:	4bc4      	ldr	r3, [pc, #784]	; (28318 <_realloc_r+0x348>)
   28008:	6899      	ldr	r1, [r3, #8]
   2800a:	eb09 0004 	add.w	r0, r9, r4
   2800e:	4288      	cmp	r0, r1
   28010:	f000 80b4 	beq.w	2817c <_realloc_r+0x1ac>
   28014:	6843      	ldr	r3, [r0, #4]
   28016:	f023 0101 	bic.w	r1, r3, #1
   2801a:	4401      	add	r1, r0
   2801c:	6849      	ldr	r1, [r1, #4]
   2801e:	07c9      	lsls	r1, r1, #31
   28020:	d54c      	bpl.n	280bc <_realloc_r+0xec>
   28022:	f01e 0f01 	tst.w	lr, #1
   28026:	f000 809b 	beq.w	28160 <_realloc_r+0x190>
   2802a:	4631      	mov	r1, r6
   2802c:	4640      	mov	r0, r8
   2802e:	f7ff facd 	bl	275cc <_malloc_r>
   28032:	4606      	mov	r6, r0
   28034:	2800      	cmp	r0, #0
   28036:	d03a      	beq.n	280ae <_realloc_r+0xde>
   28038:	f855 3c04 	ldr.w	r3, [r5, #-4]
   2803c:	f023 0301 	bic.w	r3, r3, #1
   28040:	444b      	add	r3, r9
   28042:	f1a0 0208 	sub.w	r2, r0, #8
   28046:	429a      	cmp	r2, r3
   28048:	f000 8121 	beq.w	2828e <_realloc_r+0x2be>
   2804c:	1f22      	subs	r2, r4, #4
   2804e:	2a24      	cmp	r2, #36	; 0x24
   28050:	f200 8107 	bhi.w	28262 <_realloc_r+0x292>
   28054:	2a13      	cmp	r2, #19
   28056:	f200 80db 	bhi.w	28210 <_realloc_r+0x240>
   2805a:	4603      	mov	r3, r0
   2805c:	462a      	mov	r2, r5
   2805e:	6811      	ldr	r1, [r2, #0]
   28060:	6019      	str	r1, [r3, #0]
   28062:	6851      	ldr	r1, [r2, #4]
   28064:	6059      	str	r1, [r3, #4]
   28066:	6892      	ldr	r2, [r2, #8]
   28068:	609a      	str	r2, [r3, #8]
   2806a:	4629      	mov	r1, r5
   2806c:	4640      	mov	r0, r8
   2806e:	f003 fc53 	bl	2b918 <_free_r>
   28072:	e01c      	b.n	280ae <_realloc_r+0xde>
   28074:	f027 0707 	bic.w	r7, r7, #7
   28078:	2f00      	cmp	r7, #0
   2807a:	463a      	mov	r2, r7
   2807c:	dabf      	bge.n	27ffe <_realloc_r+0x2e>
   2807e:	2600      	movs	r6, #0
   28080:	230c      	movs	r3, #12
   28082:	4630      	mov	r0, r6
   28084:	f8c8 3000 	str.w	r3, [r8]
   28088:	b003      	add	sp, #12
   2808a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2808e:	462e      	mov	r6, r5
   28090:	1be3      	subs	r3, r4, r7
   28092:	2b0f      	cmp	r3, #15
   28094:	d81e      	bhi.n	280d4 <_realloc_r+0x104>
   28096:	f8d9 3004 	ldr.w	r3, [r9, #4]
   2809a:	f003 0301 	and.w	r3, r3, #1
   2809e:	4323      	orrs	r3, r4
   280a0:	444c      	add	r4, r9
   280a2:	f8c9 3004 	str.w	r3, [r9, #4]
   280a6:	6863      	ldr	r3, [r4, #4]
   280a8:	f043 0301 	orr.w	r3, r3, #1
   280ac:	6063      	str	r3, [r4, #4]
   280ae:	4640      	mov	r0, r8
   280b0:	f7ff ff28 	bl	27f04 <__malloc_unlock>
   280b4:	4630      	mov	r0, r6
   280b6:	b003      	add	sp, #12
   280b8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   280bc:	f023 0303 	bic.w	r3, r3, #3
   280c0:	18e1      	adds	r1, r4, r3
   280c2:	4291      	cmp	r1, r2
   280c4:	db1f      	blt.n	28106 <_realloc_r+0x136>
   280c6:	68c3      	ldr	r3, [r0, #12]
   280c8:	6882      	ldr	r2, [r0, #8]
   280ca:	462e      	mov	r6, r5
   280cc:	60d3      	str	r3, [r2, #12]
   280ce:	460c      	mov	r4, r1
   280d0:	609a      	str	r2, [r3, #8]
   280d2:	e7dd      	b.n	28090 <_realloc_r+0xc0>
   280d4:	f8d9 2004 	ldr.w	r2, [r9, #4]
   280d8:	eb09 0107 	add.w	r1, r9, r7
   280dc:	f002 0201 	and.w	r2, r2, #1
   280e0:	444c      	add	r4, r9
   280e2:	f043 0301 	orr.w	r3, r3, #1
   280e6:	4317      	orrs	r7, r2
   280e8:	f8c9 7004 	str.w	r7, [r9, #4]
   280ec:	604b      	str	r3, [r1, #4]
   280ee:	6863      	ldr	r3, [r4, #4]
   280f0:	f043 0301 	orr.w	r3, r3, #1
   280f4:	3108      	adds	r1, #8
   280f6:	6063      	str	r3, [r4, #4]
   280f8:	4640      	mov	r0, r8
   280fa:	f003 fc0d 	bl	2b918 <_free_r>
   280fe:	e7d6      	b.n	280ae <_realloc_r+0xde>
   28100:	4611      	mov	r1, r2
   28102:	f7ff ba63 	b.w	275cc <_malloc_r>
   28106:	f01e 0f01 	tst.w	lr, #1
   2810a:	d18e      	bne.n	2802a <_realloc_r+0x5a>
   2810c:	f855 1c08 	ldr.w	r1, [r5, #-8]
   28110:	eba9 0a01 	sub.w	sl, r9, r1
   28114:	f8da 1004 	ldr.w	r1, [sl, #4]
   28118:	f021 0103 	bic.w	r1, r1, #3
   2811c:	440b      	add	r3, r1
   2811e:	4423      	add	r3, r4
   28120:	4293      	cmp	r3, r2
   28122:	db25      	blt.n	28170 <_realloc_r+0x1a0>
   28124:	68c2      	ldr	r2, [r0, #12]
   28126:	6881      	ldr	r1, [r0, #8]
   28128:	4656      	mov	r6, sl
   2812a:	60ca      	str	r2, [r1, #12]
   2812c:	6091      	str	r1, [r2, #8]
   2812e:	f8da 100c 	ldr.w	r1, [sl, #12]
   28132:	f856 0f08 	ldr.w	r0, [r6, #8]!
   28136:	1f22      	subs	r2, r4, #4
   28138:	2a24      	cmp	r2, #36	; 0x24
   2813a:	60c1      	str	r1, [r0, #12]
   2813c:	6088      	str	r0, [r1, #8]
   2813e:	f200 8094 	bhi.w	2826a <_realloc_r+0x29a>
   28142:	2a13      	cmp	r2, #19
   28144:	d96f      	bls.n	28226 <_realloc_r+0x256>
   28146:	6829      	ldr	r1, [r5, #0]
   28148:	f8ca 1008 	str.w	r1, [sl, #8]
   2814c:	6869      	ldr	r1, [r5, #4]
   2814e:	f8ca 100c 	str.w	r1, [sl, #12]
   28152:	2a1b      	cmp	r2, #27
   28154:	f200 80a2 	bhi.w	2829c <_realloc_r+0x2cc>
   28158:	3508      	adds	r5, #8
   2815a:	f10a 0210 	add.w	r2, sl, #16
   2815e:	e063      	b.n	28228 <_realloc_r+0x258>
   28160:	f855 3c08 	ldr.w	r3, [r5, #-8]
   28164:	eba9 0a03 	sub.w	sl, r9, r3
   28168:	f8da 1004 	ldr.w	r1, [sl, #4]
   2816c:	f021 0103 	bic.w	r1, r1, #3
   28170:	1863      	adds	r3, r4, r1
   28172:	4293      	cmp	r3, r2
   28174:	f6ff af59 	blt.w	2802a <_realloc_r+0x5a>
   28178:	4656      	mov	r6, sl
   2817a:	e7d8      	b.n	2812e <_realloc_r+0x15e>
   2817c:	6841      	ldr	r1, [r0, #4]
   2817e:	f021 0b03 	bic.w	fp, r1, #3
   28182:	44a3      	add	fp, r4
   28184:	f107 0010 	add.w	r0, r7, #16
   28188:	4583      	cmp	fp, r0
   2818a:	da56      	bge.n	2823a <_realloc_r+0x26a>
   2818c:	f01e 0f01 	tst.w	lr, #1
   28190:	f47f af4b 	bne.w	2802a <_realloc_r+0x5a>
   28194:	f855 1c08 	ldr.w	r1, [r5, #-8]
   28198:	eba9 0a01 	sub.w	sl, r9, r1
   2819c:	f8da 1004 	ldr.w	r1, [sl, #4]
   281a0:	f021 0103 	bic.w	r1, r1, #3
   281a4:	448b      	add	fp, r1
   281a6:	4558      	cmp	r0, fp
   281a8:	dce2      	bgt.n	28170 <_realloc_r+0x1a0>
   281aa:	4656      	mov	r6, sl
   281ac:	f8da 100c 	ldr.w	r1, [sl, #12]
   281b0:	f856 0f08 	ldr.w	r0, [r6, #8]!
   281b4:	1f22      	subs	r2, r4, #4
   281b6:	2a24      	cmp	r2, #36	; 0x24
   281b8:	60c1      	str	r1, [r0, #12]
   281ba:	6088      	str	r0, [r1, #8]
   281bc:	f200 808f 	bhi.w	282de <_realloc_r+0x30e>
   281c0:	2a13      	cmp	r2, #19
   281c2:	f240 808a 	bls.w	282da <_realloc_r+0x30a>
   281c6:	6829      	ldr	r1, [r5, #0]
   281c8:	f8ca 1008 	str.w	r1, [sl, #8]
   281cc:	6869      	ldr	r1, [r5, #4]
   281ce:	f8ca 100c 	str.w	r1, [sl, #12]
   281d2:	2a1b      	cmp	r2, #27
   281d4:	f200 808a 	bhi.w	282ec <_realloc_r+0x31c>
   281d8:	3508      	adds	r5, #8
   281da:	f10a 0210 	add.w	r2, sl, #16
   281de:	6829      	ldr	r1, [r5, #0]
   281e0:	6011      	str	r1, [r2, #0]
   281e2:	6869      	ldr	r1, [r5, #4]
   281e4:	6051      	str	r1, [r2, #4]
   281e6:	68a9      	ldr	r1, [r5, #8]
   281e8:	6091      	str	r1, [r2, #8]
   281ea:	eb0a 0107 	add.w	r1, sl, r7
   281ee:	ebab 0207 	sub.w	r2, fp, r7
   281f2:	f042 0201 	orr.w	r2, r2, #1
   281f6:	6099      	str	r1, [r3, #8]
   281f8:	604a      	str	r2, [r1, #4]
   281fa:	f8da 3004 	ldr.w	r3, [sl, #4]
   281fe:	f003 0301 	and.w	r3, r3, #1
   28202:	431f      	orrs	r7, r3
   28204:	4640      	mov	r0, r8
   28206:	f8ca 7004 	str.w	r7, [sl, #4]
   2820a:	f7ff fe7b 	bl	27f04 <__malloc_unlock>
   2820e:	e751      	b.n	280b4 <_realloc_r+0xe4>
   28210:	682b      	ldr	r3, [r5, #0]
   28212:	6003      	str	r3, [r0, #0]
   28214:	686b      	ldr	r3, [r5, #4]
   28216:	6043      	str	r3, [r0, #4]
   28218:	2a1b      	cmp	r2, #27
   2821a:	d82d      	bhi.n	28278 <_realloc_r+0x2a8>
   2821c:	f100 0308 	add.w	r3, r0, #8
   28220:	f105 0208 	add.w	r2, r5, #8
   28224:	e71b      	b.n	2805e <_realloc_r+0x8e>
   28226:	4632      	mov	r2, r6
   28228:	6829      	ldr	r1, [r5, #0]
   2822a:	6011      	str	r1, [r2, #0]
   2822c:	6869      	ldr	r1, [r5, #4]
   2822e:	6051      	str	r1, [r2, #4]
   28230:	68a9      	ldr	r1, [r5, #8]
   28232:	6091      	str	r1, [r2, #8]
   28234:	461c      	mov	r4, r3
   28236:	46d1      	mov	r9, sl
   28238:	e72a      	b.n	28090 <_realloc_r+0xc0>
   2823a:	eb09 0107 	add.w	r1, r9, r7
   2823e:	ebab 0b07 	sub.w	fp, fp, r7
   28242:	f04b 0201 	orr.w	r2, fp, #1
   28246:	6099      	str	r1, [r3, #8]
   28248:	604a      	str	r2, [r1, #4]
   2824a:	f855 3c04 	ldr.w	r3, [r5, #-4]
   2824e:	f003 0301 	and.w	r3, r3, #1
   28252:	431f      	orrs	r7, r3
   28254:	4640      	mov	r0, r8
   28256:	f845 7c04 	str.w	r7, [r5, #-4]
   2825a:	f7ff fe53 	bl	27f04 <__malloc_unlock>
   2825e:	462e      	mov	r6, r5
   28260:	e728      	b.n	280b4 <_realloc_r+0xe4>
   28262:	4629      	mov	r1, r5
   28264:	f7ff fd96 	bl	27d94 <memmove>
   28268:	e6ff      	b.n	2806a <_realloc_r+0x9a>
   2826a:	4629      	mov	r1, r5
   2826c:	4630      	mov	r0, r6
   2826e:	461c      	mov	r4, r3
   28270:	46d1      	mov	r9, sl
   28272:	f7ff fd8f 	bl	27d94 <memmove>
   28276:	e70b      	b.n	28090 <_realloc_r+0xc0>
   28278:	68ab      	ldr	r3, [r5, #8]
   2827a:	6083      	str	r3, [r0, #8]
   2827c:	68eb      	ldr	r3, [r5, #12]
   2827e:	60c3      	str	r3, [r0, #12]
   28280:	2a24      	cmp	r2, #36	; 0x24
   28282:	d017      	beq.n	282b4 <_realloc_r+0x2e4>
   28284:	f100 0310 	add.w	r3, r0, #16
   28288:	f105 0210 	add.w	r2, r5, #16
   2828c:	e6e7      	b.n	2805e <_realloc_r+0x8e>
   2828e:	f850 3c04 	ldr.w	r3, [r0, #-4]
   28292:	f023 0303 	bic.w	r3, r3, #3
   28296:	441c      	add	r4, r3
   28298:	462e      	mov	r6, r5
   2829a:	e6f9      	b.n	28090 <_realloc_r+0xc0>
   2829c:	68a9      	ldr	r1, [r5, #8]
   2829e:	f8ca 1010 	str.w	r1, [sl, #16]
   282a2:	68e9      	ldr	r1, [r5, #12]
   282a4:	f8ca 1014 	str.w	r1, [sl, #20]
   282a8:	2a24      	cmp	r2, #36	; 0x24
   282aa:	d00c      	beq.n	282c6 <_realloc_r+0x2f6>
   282ac:	3510      	adds	r5, #16
   282ae:	f10a 0218 	add.w	r2, sl, #24
   282b2:	e7b9      	b.n	28228 <_realloc_r+0x258>
   282b4:	692b      	ldr	r3, [r5, #16]
   282b6:	6103      	str	r3, [r0, #16]
   282b8:	696b      	ldr	r3, [r5, #20]
   282ba:	6143      	str	r3, [r0, #20]
   282bc:	f105 0218 	add.w	r2, r5, #24
   282c0:	f100 0318 	add.w	r3, r0, #24
   282c4:	e6cb      	b.n	2805e <_realloc_r+0x8e>
   282c6:	692a      	ldr	r2, [r5, #16]
   282c8:	f8ca 2018 	str.w	r2, [sl, #24]
   282cc:	696a      	ldr	r2, [r5, #20]
   282ce:	f8ca 201c 	str.w	r2, [sl, #28]
   282d2:	3518      	adds	r5, #24
   282d4:	f10a 0220 	add.w	r2, sl, #32
   282d8:	e7a6      	b.n	28228 <_realloc_r+0x258>
   282da:	4632      	mov	r2, r6
   282dc:	e77f      	b.n	281de <_realloc_r+0x20e>
   282de:	4629      	mov	r1, r5
   282e0:	4630      	mov	r0, r6
   282e2:	9301      	str	r3, [sp, #4]
   282e4:	f7ff fd56 	bl	27d94 <memmove>
   282e8:	9b01      	ldr	r3, [sp, #4]
   282ea:	e77e      	b.n	281ea <_realloc_r+0x21a>
   282ec:	68a9      	ldr	r1, [r5, #8]
   282ee:	f8ca 1010 	str.w	r1, [sl, #16]
   282f2:	68e9      	ldr	r1, [r5, #12]
   282f4:	f8ca 1014 	str.w	r1, [sl, #20]
   282f8:	2a24      	cmp	r2, #36	; 0x24
   282fa:	d003      	beq.n	28304 <_realloc_r+0x334>
   282fc:	3510      	adds	r5, #16
   282fe:	f10a 0218 	add.w	r2, sl, #24
   28302:	e76c      	b.n	281de <_realloc_r+0x20e>
   28304:	692a      	ldr	r2, [r5, #16]
   28306:	f8ca 2018 	str.w	r2, [sl, #24]
   2830a:	696a      	ldr	r2, [r5, #20]
   2830c:	f8ca 201c 	str.w	r2, [sl, #28]
   28310:	3518      	adds	r5, #24
   28312:	f10a 0220 	add.w	r2, sl, #32
   28316:	e762      	b.n	281de <_realloc_r+0x20e>
   28318:	200006a4 	.word	0x200006a4

0002831c <_sbrk_r>:
   2831c:	b538      	push	{r3, r4, r5, lr}
   2831e:	4c07      	ldr	r4, [pc, #28]	; (2833c <_sbrk_r+0x20>)
   28320:	2300      	movs	r3, #0
   28322:	4605      	mov	r5, r0
   28324:	4608      	mov	r0, r1
   28326:	6023      	str	r3, [r4, #0]
   28328:	f004 fb38 	bl	2c99c <_sbrk>
   2832c:	1c43      	adds	r3, r0, #1
   2832e:	d000      	beq.n	28332 <_sbrk_r+0x16>
   28330:	bd38      	pop	{r3, r4, r5, pc}
   28332:	6823      	ldr	r3, [r4, #0]
   28334:	2b00      	cmp	r3, #0
   28336:	d0fb      	beq.n	28330 <_sbrk_r+0x14>
   28338:	602b      	str	r3, [r5, #0]
   2833a:	bd38      	pop	{r3, r4, r5, pc}
   2833c:	2000a440 	.word	0x2000a440

00028340 <_raise_r>:
   28340:	291f      	cmp	r1, #31
   28342:	d828      	bhi.n	28396 <_raise_r+0x56>
   28344:	b520      	push	{r5, lr}
   28346:	f8d0 22dc 	ldr.w	r2, [r0, #732]	; 0x2dc
   2834a:	b082      	sub	sp, #8
   2834c:	4605      	mov	r5, r0
   2834e:	b1aa      	cbz	r2, 2837c <_raise_r+0x3c>
   28350:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
   28354:	b193      	cbz	r3, 2837c <_raise_r+0x3c>
   28356:	2b01      	cmp	r3, #1
   28358:	d00e      	beq.n	28378 <_raise_r+0x38>
   2835a:	1c58      	adds	r0, r3, #1
   2835c:	d007      	beq.n	2836e <_raise_r+0x2e>
   2835e:	2500      	movs	r5, #0
   28360:	4608      	mov	r0, r1
   28362:	f842 5021 	str.w	r5, [r2, r1, lsl #2]
   28366:	4798      	blx	r3
   28368:	4628      	mov	r0, r5
   2836a:	b002      	add	sp, #8
   2836c:	bd20      	pop	{r5, pc}
   2836e:	2316      	movs	r3, #22
   28370:	2001      	movs	r0, #1
   28372:	602b      	str	r3, [r5, #0]
   28374:	b002      	add	sp, #8
   28376:	bd20      	pop	{r5, pc}
   28378:	2000      	movs	r0, #0
   2837a:	e7f6      	b.n	2836a <_raise_r+0x2a>
   2837c:	4628      	mov	r0, r5
   2837e:	9101      	str	r1, [sp, #4]
   28380:	f000 f82a 	bl	283d8 <_getpid_r>
   28384:	9901      	ldr	r1, [sp, #4]
   28386:	460a      	mov	r2, r1
   28388:	4601      	mov	r1, r0
   2838a:	4628      	mov	r0, r5
   2838c:	b002      	add	sp, #8
   2838e:	e8bd 4020 	ldmia.w	sp!, {r5, lr}
   28392:	f000 b80d 	b.w	283b0 <_kill_r>
   28396:	2316      	movs	r3, #22
   28398:	6003      	str	r3, [r0, #0]
   2839a:	f04f 30ff 	mov.w	r0, #4294967295
   2839e:	4770      	bx	lr

000283a0 <raise>:
   283a0:	4b02      	ldr	r3, [pc, #8]	; (283ac <raise+0xc>)
   283a2:	4601      	mov	r1, r0
   283a4:	6818      	ldr	r0, [r3, #0]
   283a6:	f7ff bfcb 	b.w	28340 <_raise_r>
   283aa:	bf00      	nop
   283ac:	20000108 	.word	0x20000108

000283b0 <_kill_r>:
   283b0:	b538      	push	{r3, r4, r5, lr}
   283b2:	460b      	mov	r3, r1
   283b4:	4c07      	ldr	r4, [pc, #28]	; (283d4 <_kill_r+0x24>)
   283b6:	4605      	mov	r5, r0
   283b8:	4611      	mov	r1, r2
   283ba:	4618      	mov	r0, r3
   283bc:	2300      	movs	r3, #0
   283be:	6023      	str	r3, [r4, #0]
   283c0:	f004 fb66 	bl	2ca90 <_kill>
   283c4:	1c43      	adds	r3, r0, #1
   283c6:	d000      	beq.n	283ca <_kill_r+0x1a>
   283c8:	bd38      	pop	{r3, r4, r5, pc}
   283ca:	6823      	ldr	r3, [r4, #0]
   283cc:	2b00      	cmp	r3, #0
   283ce:	d0fb      	beq.n	283c8 <_kill_r+0x18>
   283d0:	602b      	str	r3, [r5, #0]
   283d2:	bd38      	pop	{r3, r4, r5, pc}
   283d4:	2000a440 	.word	0x2000a440

000283d8 <_getpid_r>:
   283d8:	f004 bade 	b.w	2c998 <_getpid>

000283dc <snprintf>:
   283dc:	b40c      	push	{r2, r3}
   283de:	b5f0      	push	{r4, r5, r6, r7, lr}
   283e0:	4b23      	ldr	r3, [pc, #140]	; (28470 <snprintf+0x94>)
   283e2:	1e0c      	subs	r4, r1, #0
   283e4:	b09d      	sub	sp, #116	; 0x74
   283e6:	681d      	ldr	r5, [r3, #0]
   283e8:	db3d      	blt.n	28466 <snprintf+0x8a>
   283ea:	f44f 7302 	mov.w	r3, #520	; 0x208
   283ee:	9002      	str	r0, [sp, #8]
   283f0:	9006      	str	r0, [sp, #24]
   283f2:	f8ad 3014 	strh.w	r3, [sp, #20]
   283f6:	ae23      	add	r6, sp, #140	; 0x8c
   283f8:	d017      	beq.n	2842a <snprintf+0x4e>
   283fa:	3c01      	subs	r4, #1
   283fc:	9a22      	ldr	r2, [sp, #136]	; 0x88
   283fe:	9404      	str	r4, [sp, #16]
   28400:	4633      	mov	r3, r6
   28402:	f64f 77ff 	movw	r7, #65535	; 0xffff
   28406:	a902      	add	r1, sp, #8
   28408:	4628      	mov	r0, r5
   2840a:	9407      	str	r4, [sp, #28]
   2840c:	9601      	str	r6, [sp, #4]
   2840e:	f8ad 7016 	strh.w	r7, [sp, #22]
   28412:	f000 fda5 	bl	28f60 <_svfprintf_r>
   28416:	1c42      	adds	r2, r0, #1
   28418:	db1b      	blt.n	28452 <snprintf+0x76>
   2841a:	9b02      	ldr	r3, [sp, #8]
   2841c:	2200      	movs	r2, #0
   2841e:	701a      	strb	r2, [r3, #0]
   28420:	b01d      	add	sp, #116	; 0x74
   28422:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
   28426:	b002      	add	sp, #8
   28428:	4770      	bx	lr
   2842a:	4633      	mov	r3, r6
   2842c:	f64f 77ff 	movw	r7, #65535	; 0xffff
   28430:	9a22      	ldr	r2, [sp, #136]	; 0x88
   28432:	9404      	str	r4, [sp, #16]
   28434:	a902      	add	r1, sp, #8
   28436:	4628      	mov	r0, r5
   28438:	9407      	str	r4, [sp, #28]
   2843a:	9601      	str	r6, [sp, #4]
   2843c:	f8ad 7016 	strh.w	r7, [sp, #22]
   28440:	f000 fd8e 	bl	28f60 <_svfprintf_r>
   28444:	1c43      	adds	r3, r0, #1
   28446:	db07      	blt.n	28458 <snprintf+0x7c>
   28448:	b01d      	add	sp, #116	; 0x74
   2844a:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
   2844e:	b002      	add	sp, #8
   28450:	4770      	bx	lr
   28452:	238b      	movs	r3, #139	; 0x8b
   28454:	602b      	str	r3, [r5, #0]
   28456:	e7e0      	b.n	2841a <snprintf+0x3e>
   28458:	238b      	movs	r3, #139	; 0x8b
   2845a:	602b      	str	r3, [r5, #0]
   2845c:	b01d      	add	sp, #116	; 0x74
   2845e:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
   28462:	b002      	add	sp, #8
   28464:	4770      	bx	lr
   28466:	238b      	movs	r3, #139	; 0x8b
   28468:	602b      	str	r3, [r5, #0]
   2846a:	f04f 30ff 	mov.w	r0, #4294967295
   2846e:	e7eb      	b.n	28448 <snprintf+0x6c>
   28470:	20000108 	.word	0x20000108

00028474 <sprintf>:
   28474:	b40e      	push	{r1, r2, r3}
   28476:	b5f0      	push	{r4, r5, r6, r7, lr}
   28478:	b09c      	sub	sp, #112	; 0x70
   2847a:	ab21      	add	r3, sp, #132	; 0x84
   2847c:	490f      	ldr	r1, [pc, #60]	; (284bc <sprintf+0x48>)
   2847e:	f853 2b04 	ldr.w	r2, [r3], #4
   28482:	9301      	str	r3, [sp, #4]
   28484:	4605      	mov	r5, r0
   28486:	f06f 4400 	mvn.w	r4, #2147483648	; 0x80000000
   2848a:	6808      	ldr	r0, [r1, #0]
   2848c:	9502      	str	r5, [sp, #8]
   2848e:	f44f 7702 	mov.w	r7, #520	; 0x208
   28492:	f64f 76ff 	movw	r6, #65535	; 0xffff
   28496:	a902      	add	r1, sp, #8
   28498:	9506      	str	r5, [sp, #24]
   2849a:	f8ad 7014 	strh.w	r7, [sp, #20]
   2849e:	9404      	str	r4, [sp, #16]
   284a0:	9407      	str	r4, [sp, #28]
   284a2:	f8ad 6016 	strh.w	r6, [sp, #22]
   284a6:	f000 fd5b 	bl	28f60 <_svfprintf_r>
   284aa:	9b02      	ldr	r3, [sp, #8]
   284ac:	2200      	movs	r2, #0
   284ae:	701a      	strb	r2, [r3, #0]
   284b0:	b01c      	add	sp, #112	; 0x70
   284b2:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
   284b6:	b003      	add	sp, #12
   284b8:	4770      	bx	lr
   284ba:	bf00      	nop
   284bc:	20000108 	.word	0x20000108
   284c0:	eba2 0003 	sub.w	r0, r2, r3
   284c4:	4770      	bx	lr
   284c6:	bf00      	nop

000284c8 <strcmp>:
   284c8:	7802      	ldrb	r2, [r0, #0]
   284ca:	780b      	ldrb	r3, [r1, #0]
   284cc:	2a01      	cmp	r2, #1
   284ce:	bf28      	it	cs
   284d0:	429a      	cmpcs	r2, r3
   284d2:	d1f5      	bne.n	284c0 <sprintf+0x4c>
   284d4:	e96d 4504 	strd	r4, r5, [sp, #-16]!
   284d8:	ea40 0401 	orr.w	r4, r0, r1
   284dc:	e9cd 6702 	strd	r6, r7, [sp, #8]
   284e0:	f06f 0c00 	mvn.w	ip, #0
   284e4:	ea4f 7244 	mov.w	r2, r4, lsl #29
   284e8:	b312      	cbz	r2, 28530 <strcmp+0x68>
   284ea:	ea80 0401 	eor.w	r4, r0, r1
   284ee:	f014 0f07 	tst.w	r4, #7
   284f2:	d16a      	bne.n	285ca <strcmp+0x102>
   284f4:	f000 0407 	and.w	r4, r0, #7
   284f8:	f020 0007 	bic.w	r0, r0, #7
   284fc:	f004 0503 	and.w	r5, r4, #3
   28500:	f021 0107 	bic.w	r1, r1, #7
   28504:	ea4f 05c5 	mov.w	r5, r5, lsl #3
   28508:	e8f0 2304 	ldrd	r2, r3, [r0], #16
   2850c:	f014 0f04 	tst.w	r4, #4
   28510:	e8f1 6704 	ldrd	r6, r7, [r1], #16
   28514:	fa0c f405 	lsl.w	r4, ip, r5
   28518:	ea62 0204 	orn	r2, r2, r4
   2851c:	ea66 0604 	orn	r6, r6, r4
   28520:	d00a      	beq.n	28538 <strcmp+0x70>
   28522:	ea63 0304 	orn	r3, r3, r4
   28526:	4662      	mov	r2, ip
   28528:	ea67 0704 	orn	r7, r7, r4
   2852c:	4666      	mov	r6, ip
   2852e:	e003      	b.n	28538 <strcmp+0x70>
   28530:	e8f0 2304 	ldrd	r2, r3, [r0], #16
   28534:	e8f1 6704 	ldrd	r6, r7, [r1], #16
   28538:	fa82 f54c 	uadd8	r5, r2, ip
   2853c:	ea82 0406 	eor.w	r4, r2, r6
   28540:	faa4 f48c 	sel	r4, r4, ip
   28544:	bb6c      	cbnz	r4, 285a2 <strcmp+0xda>
   28546:	fa83 f54c 	uadd8	r5, r3, ip
   2854a:	ea83 0507 	eor.w	r5, r3, r7
   2854e:	faa5 f58c 	sel	r5, r5, ip
   28552:	b995      	cbnz	r5, 2857a <strcmp+0xb2>
   28554:	e950 2302 	ldrd	r2, r3, [r0, #-8]
   28558:	e951 6702 	ldrd	r6, r7, [r1, #-8]
   2855c:	fa82 f54c 	uadd8	r5, r2, ip
   28560:	ea82 0406 	eor.w	r4, r2, r6
   28564:	faa4 f48c 	sel	r4, r4, ip
   28568:	fa83 f54c 	uadd8	r5, r3, ip
   2856c:	ea83 0507 	eor.w	r5, r3, r7
   28570:	faa5 f58c 	sel	r5, r5, ip
   28574:	4325      	orrs	r5, r4
   28576:	d0db      	beq.n	28530 <strcmp+0x68>
   28578:	b99c      	cbnz	r4, 285a2 <strcmp+0xda>
   2857a:	ba2d      	rev	r5, r5
   2857c:	fab5 f485 	clz	r4, r5
   28580:	f024 0407 	bic.w	r4, r4, #7
   28584:	fa27 f104 	lsr.w	r1, r7, r4
   28588:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
   2858c:	fa23 f304 	lsr.w	r3, r3, r4
   28590:	f003 00ff 	and.w	r0, r3, #255	; 0xff
   28594:	f001 01ff 	and.w	r1, r1, #255	; 0xff
   28598:	e8fd 4504 	ldrd	r4, r5, [sp], #16
   2859c:	eba0 0001 	sub.w	r0, r0, r1
   285a0:	4770      	bx	lr
   285a2:	ba24      	rev	r4, r4
   285a4:	fab4 f484 	clz	r4, r4
   285a8:	f024 0407 	bic.w	r4, r4, #7
   285ac:	fa26 f104 	lsr.w	r1, r6, r4
   285b0:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
   285b4:	fa22 f204 	lsr.w	r2, r2, r4
   285b8:	f002 00ff 	and.w	r0, r2, #255	; 0xff
   285bc:	f001 01ff 	and.w	r1, r1, #255	; 0xff
   285c0:	e8fd 4504 	ldrd	r4, r5, [sp], #16
   285c4:	eba0 0001 	sub.w	r0, r0, r1
   285c8:	4770      	bx	lr
   285ca:	f014 0f03 	tst.w	r4, #3
   285ce:	d13c      	bne.n	2864a <strcmp+0x182>
   285d0:	f010 0403 	ands.w	r4, r0, #3
   285d4:	d128      	bne.n	28628 <strcmp+0x160>
   285d6:	f850 2b08 	ldr.w	r2, [r0], #8
   285da:	f851 3b08 	ldr.w	r3, [r1], #8
   285de:	fa82 f54c 	uadd8	r5, r2, ip
   285e2:	ea82 0503 	eor.w	r5, r2, r3
   285e6:	faa5 f58c 	sel	r5, r5, ip
   285ea:	b95d      	cbnz	r5, 28604 <strcmp+0x13c>
   285ec:	f850 2c04 	ldr.w	r2, [r0, #-4]
   285f0:	f851 3c04 	ldr.w	r3, [r1, #-4]
   285f4:	fa82 f54c 	uadd8	r5, r2, ip
   285f8:	ea82 0503 	eor.w	r5, r2, r3
   285fc:	faa5 f58c 	sel	r5, r5, ip
   28600:	2d00      	cmp	r5, #0
   28602:	d0e8      	beq.n	285d6 <strcmp+0x10e>
   28604:	ba2d      	rev	r5, r5
   28606:	fab5 f485 	clz	r4, r5
   2860a:	f024 0407 	bic.w	r4, r4, #7
   2860e:	fa23 f104 	lsr.w	r1, r3, r4
   28612:	fa22 f204 	lsr.w	r2, r2, r4
   28616:	f002 00ff 	and.w	r0, r2, #255	; 0xff
   2861a:	f001 01ff 	and.w	r1, r1, #255	; 0xff
   2861e:	e8fd 4504 	ldrd	r4, r5, [sp], #16
   28622:	eba0 0001 	sub.w	r0, r0, r1
   28626:	4770      	bx	lr
   28628:	ea4f 04c4 	mov.w	r4, r4, lsl #3
   2862c:	f020 0003 	bic.w	r0, r0, #3
   28630:	f850 2b08 	ldr.w	r2, [r0], #8
   28634:	f021 0103 	bic.w	r1, r1, #3
   28638:	f851 3b08 	ldr.w	r3, [r1], #8
   2863c:	fa0c f404 	lsl.w	r4, ip, r4
   28640:	ea62 0204 	orn	r2, r2, r4
   28644:	ea63 0304 	orn	r3, r3, r4
   28648:	e7c9      	b.n	285de <strcmp+0x116>
   2864a:	f010 0403 	ands.w	r4, r0, #3
   2864e:	d01a      	beq.n	28686 <strcmp+0x1be>
   28650:	eba1 0104 	sub.w	r1, r1, r4
   28654:	f020 0003 	bic.w	r0, r0, #3
   28658:	07e4      	lsls	r4, r4, #31
   2865a:	f850 2b04 	ldr.w	r2, [r0], #4
   2865e:	d006      	beq.n	2866e <strcmp+0x1a6>
   28660:	d20f      	bcs.n	28682 <strcmp+0x1ba>
   28662:	788b      	ldrb	r3, [r1, #2]
   28664:	fa5f f4a2 	uxtb.w	r4, r2, ror #16
   28668:	1ae4      	subs	r4, r4, r3
   2866a:	d106      	bne.n	2867a <strcmp+0x1b2>
   2866c:	b12b      	cbz	r3, 2867a <strcmp+0x1b2>
   2866e:	78cb      	ldrb	r3, [r1, #3]
   28670:	fa5f f4b2 	uxtb.w	r4, r2, ror #24
   28674:	1ae4      	subs	r4, r4, r3
   28676:	d100      	bne.n	2867a <strcmp+0x1b2>
   28678:	b91b      	cbnz	r3, 28682 <strcmp+0x1ba>
   2867a:	4620      	mov	r0, r4
   2867c:	f85d 4b10 	ldr.w	r4, [sp], #16
   28680:	4770      	bx	lr
   28682:	f101 0104 	add.w	r1, r1, #4
   28686:	f850 2b04 	ldr.w	r2, [r0], #4
   2868a:	07cc      	lsls	r4, r1, #31
   2868c:	f021 0103 	bic.w	r1, r1, #3
   28690:	f851 3b04 	ldr.w	r3, [r1], #4
   28694:	d848      	bhi.n	28728 <strcmp+0x260>
   28696:	d224      	bcs.n	286e2 <strcmp+0x21a>
   28698:	f022 447f 	bic.w	r4, r2, #4278190080	; 0xff000000
   2869c:	fa82 f54c 	uadd8	r5, r2, ip
   286a0:	ea94 2513 	eors.w	r5, r4, r3, lsr #8
   286a4:	faa5 f58c 	sel	r5, r5, ip
   286a8:	d10a      	bne.n	286c0 <strcmp+0x1f8>
   286aa:	b965      	cbnz	r5, 286c6 <strcmp+0x1fe>
   286ac:	f851 3b04 	ldr.w	r3, [r1], #4
   286b0:	ea84 0402 	eor.w	r4, r4, r2
   286b4:	ebb4 6f03 	cmp.w	r4, r3, lsl #24
   286b8:	d10e      	bne.n	286d8 <strcmp+0x210>
   286ba:	f850 2b04 	ldr.w	r2, [r0], #4
   286be:	e7eb      	b.n	28698 <strcmp+0x1d0>
   286c0:	ea4f 2313 	mov.w	r3, r3, lsr #8
   286c4:	e055      	b.n	28772 <strcmp+0x2aa>
   286c6:	f035 457f 	bics.w	r5, r5, #4278190080	; 0xff000000
   286ca:	d14d      	bne.n	28768 <strcmp+0x2a0>
   286cc:	7808      	ldrb	r0, [r1, #0]
   286ce:	e8fd 4504 	ldrd	r4, r5, [sp], #16
   286d2:	f1c0 0000 	rsb	r0, r0, #0
   286d6:	4770      	bx	lr
   286d8:	ea4f 6212 	mov.w	r2, r2, lsr #24
   286dc:	f003 03ff 	and.w	r3, r3, #255	; 0xff
   286e0:	e047      	b.n	28772 <strcmp+0x2aa>
   286e2:	ea02 441c 	and.w	r4, r2, ip, lsr #16
   286e6:	fa82 f54c 	uadd8	r5, r2, ip
   286ea:	ea94 4513 	eors.w	r5, r4, r3, lsr #16
   286ee:	faa5 f58c 	sel	r5, r5, ip
   286f2:	d10a      	bne.n	2870a <strcmp+0x242>
   286f4:	b965      	cbnz	r5, 28710 <strcmp+0x248>
   286f6:	f851 3b04 	ldr.w	r3, [r1], #4
   286fa:	ea84 0402 	eor.w	r4, r4, r2
   286fe:	ebb4 4f03 	cmp.w	r4, r3, lsl #16
   28702:	d10c      	bne.n	2871e <strcmp+0x256>
   28704:	f850 2b04 	ldr.w	r2, [r0], #4
   28708:	e7eb      	b.n	286e2 <strcmp+0x21a>
   2870a:	ea4f 4313 	mov.w	r3, r3, lsr #16
   2870e:	e030      	b.n	28772 <strcmp+0x2aa>
   28710:	ea15 451c 	ands.w	r5, r5, ip, lsr #16
   28714:	d128      	bne.n	28768 <strcmp+0x2a0>
   28716:	880b      	ldrh	r3, [r1, #0]
   28718:	ea4f 4212 	mov.w	r2, r2, lsr #16
   2871c:	e029      	b.n	28772 <strcmp+0x2aa>
   2871e:	ea4f 4212 	mov.w	r2, r2, lsr #16
   28722:	ea03 431c 	and.w	r3, r3, ip, lsr #16
   28726:	e024      	b.n	28772 <strcmp+0x2aa>
   28728:	f002 04ff 	and.w	r4, r2, #255	; 0xff
   2872c:	fa82 f54c 	uadd8	r5, r2, ip
   28730:	ea94 6513 	eors.w	r5, r4, r3, lsr #24
   28734:	faa5 f58c 	sel	r5, r5, ip
   28738:	d10a      	bne.n	28750 <strcmp+0x288>
   2873a:	b965      	cbnz	r5, 28756 <strcmp+0x28e>
   2873c:	f851 3b04 	ldr.w	r3, [r1], #4
   28740:	ea84 0402 	eor.w	r4, r4, r2
   28744:	ebb4 2f03 	cmp.w	r4, r3, lsl #8
   28748:	d109      	bne.n	2875e <strcmp+0x296>
   2874a:	f850 2b04 	ldr.w	r2, [r0], #4
   2874e:	e7eb      	b.n	28728 <strcmp+0x260>
   28750:	ea4f 6313 	mov.w	r3, r3, lsr #24
   28754:	e00d      	b.n	28772 <strcmp+0x2aa>
   28756:	f015 0fff 	tst.w	r5, #255	; 0xff
   2875a:	d105      	bne.n	28768 <strcmp+0x2a0>
   2875c:	680b      	ldr	r3, [r1, #0]
   2875e:	ea4f 2212 	mov.w	r2, r2, lsr #8
   28762:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
   28766:	e004      	b.n	28772 <strcmp+0x2aa>
   28768:	f04f 0000 	mov.w	r0, #0
   2876c:	e8fd 4504 	ldrd	r4, r5, [sp], #16
   28770:	4770      	bx	lr
   28772:	ba12      	rev	r2, r2
   28774:	ba1b      	rev	r3, r3
   28776:	fa82 f44c 	uadd8	r4, r2, ip
   2877a:	ea82 0403 	eor.w	r4, r2, r3
   2877e:	faa4 f58c 	sel	r5, r4, ip
   28782:	fab5 f485 	clz	r4, r5
   28786:	fa02 f204 	lsl.w	r2, r2, r4
   2878a:	fa03 f304 	lsl.w	r3, r3, r4
   2878e:	ea4f 6012 	mov.w	r0, r2, lsr #24
   28792:	e8fd 4504 	ldrd	r4, r5, [sp], #16
   28796:	eba0 6013 	sub.w	r0, r0, r3, lsr #24
   2879a:	4770      	bx	lr
	...

000287c0 <strlen>:
   287c0:	f890 f000 	pld	[r0]
   287c4:	e96d 4502 	strd	r4, r5, [sp, #-8]!
   287c8:	f020 0107 	bic.w	r1, r0, #7
   287cc:	f06f 0c00 	mvn.w	ip, #0
   287d0:	f010 0407 	ands.w	r4, r0, #7
   287d4:	f891 f020 	pld	[r1, #32]
   287d8:	f040 8049 	bne.w	2886e <strlen+0xae>
   287dc:	f04f 0400 	mov.w	r4, #0
   287e0:	f06f 0007 	mvn.w	r0, #7
   287e4:	e9d1 2300 	ldrd	r2, r3, [r1]
   287e8:	f891 f040 	pld	[r1, #64]	; 0x40
   287ec:	f100 0008 	add.w	r0, r0, #8
   287f0:	fa82 f24c 	uadd8	r2, r2, ip
   287f4:	faa4 f28c 	sel	r2, r4, ip
   287f8:	fa83 f34c 	uadd8	r3, r3, ip
   287fc:	faa2 f38c 	sel	r3, r2, ip
   28800:	bb4b      	cbnz	r3, 28856 <strlen+0x96>
   28802:	e9d1 2302 	ldrd	r2, r3, [r1, #8]
   28806:	fa82 f24c 	uadd8	r2, r2, ip
   2880a:	f100 0008 	add.w	r0, r0, #8
   2880e:	faa4 f28c 	sel	r2, r4, ip
   28812:	fa83 f34c 	uadd8	r3, r3, ip
   28816:	faa2 f38c 	sel	r3, r2, ip
   2881a:	b9e3      	cbnz	r3, 28856 <strlen+0x96>
   2881c:	e9d1 2304 	ldrd	r2, r3, [r1, #16]
   28820:	fa82 f24c 	uadd8	r2, r2, ip
   28824:	f100 0008 	add.w	r0, r0, #8
   28828:	faa4 f28c 	sel	r2, r4, ip
   2882c:	fa83 f34c 	uadd8	r3, r3, ip
   28830:	faa2 f38c 	sel	r3, r2, ip
   28834:	b97b      	cbnz	r3, 28856 <strlen+0x96>
   28836:	e9d1 2306 	ldrd	r2, r3, [r1, #24]
   2883a:	f101 0120 	add.w	r1, r1, #32
   2883e:	fa82 f24c 	uadd8	r2, r2, ip
   28842:	f100 0008 	add.w	r0, r0, #8
   28846:	faa4 f28c 	sel	r2, r4, ip
   2884a:	fa83 f34c 	uadd8	r3, r3, ip
   2884e:	faa2 f38c 	sel	r3, r2, ip
   28852:	2b00      	cmp	r3, #0
   28854:	d0c6      	beq.n	287e4 <strlen+0x24>
   28856:	2a00      	cmp	r2, #0
   28858:	bf04      	itt	eq
   2885a:	3004      	addeq	r0, #4
   2885c:	461a      	moveq	r2, r3
   2885e:	ba12      	rev	r2, r2
   28860:	fab2 f282 	clz	r2, r2
   28864:	e8fd 4502 	ldrd	r4, r5, [sp], #8
   28868:	eb00 00d2 	add.w	r0, r0, r2, lsr #3
   2886c:	4770      	bx	lr
   2886e:	e9d1 2300 	ldrd	r2, r3, [r1]
   28872:	f004 0503 	and.w	r5, r4, #3
   28876:	f1c4 0000 	rsb	r0, r4, #0
   2887a:	ea4f 05c5 	mov.w	r5, r5, lsl #3
   2887e:	f014 0f04 	tst.w	r4, #4
   28882:	f891 f040 	pld	[r1, #64]	; 0x40
   28886:	fa0c f505 	lsl.w	r5, ip, r5
   2888a:	ea62 0205 	orn	r2, r2, r5
   2888e:	bf1c      	itt	ne
   28890:	ea63 0305 	ornne	r3, r3, r5
   28894:	4662      	movne	r2, ip
   28896:	f04f 0400 	mov.w	r4, #0
   2889a:	e7a9      	b.n	287f0 <strlen+0x30>

0002889c <strncmp>:
   2889c:	2a00      	cmp	r2, #0
   2889e:	d041      	beq.n	28924 <strncmp+0x88>
   288a0:	ea40 0301 	orr.w	r3, r0, r1
   288a4:	f013 0303 	ands.w	r3, r3, #3
   288a8:	b4f0      	push	{r4, r5, r6, r7}
   288aa:	d125      	bne.n	288f8 <strncmp+0x5c>
   288ac:	2a03      	cmp	r2, #3
   288ae:	d923      	bls.n	288f8 <strncmp+0x5c>
   288b0:	6804      	ldr	r4, [r0, #0]
   288b2:	680d      	ldr	r5, [r1, #0]
   288b4:	42ac      	cmp	r4, r5
   288b6:	d11f      	bne.n	288f8 <strncmp+0x5c>
   288b8:	3a04      	subs	r2, #4
   288ba:	d038      	beq.n	2892e <strncmp+0x92>
   288bc:	f1a4 3501 	sub.w	r5, r4, #16843009	; 0x1010101
   288c0:	ea25 0404 	bic.w	r4, r5, r4
   288c4:	f014 3f80 	tst.w	r4, #2155905152	; 0x80808080
   288c8:	d12e      	bne.n	28928 <strncmp+0x8c>
   288ca:	3004      	adds	r0, #4
   288cc:	3104      	adds	r1, #4
   288ce:	e00f      	b.n	288f0 <strncmp+0x54>
   288d0:	f850 3b04 	ldr.w	r3, [r0], #4
   288d4:	680e      	ldr	r6, [r1, #0]
   288d6:	f1a3 3401 	sub.w	r4, r3, #16843009	; 0x1010101
   288da:	42b3      	cmp	r3, r6
   288dc:	ea24 0403 	bic.w	r4, r4, r3
   288e0:	f101 0104 	add.w	r1, r1, #4
   288e4:	d126      	bne.n	28934 <strncmp+0x98>
   288e6:	3a04      	subs	r2, #4
   288e8:	d021      	beq.n	2892e <strncmp+0x92>
   288ea:	f014 3f80 	tst.w	r4, #2155905152	; 0x80808080
   288ee:	d11b      	bne.n	28928 <strncmp+0x8c>
   288f0:	2a03      	cmp	r2, #3
   288f2:	4607      	mov	r7, r0
   288f4:	460d      	mov	r5, r1
   288f6:	d8eb      	bhi.n	288d0 <strncmp+0x34>
   288f8:	7805      	ldrb	r5, [r0, #0]
   288fa:	780c      	ldrb	r4, [r1, #0]
   288fc:	42ac      	cmp	r4, r5
   288fe:	f102 33ff 	add.w	r3, r2, #4294967295
   28902:	d11a      	bne.n	2893a <strncmp+0x9e>
   28904:	b183      	cbz	r3, 28928 <strncmp+0x8c>
   28906:	b914      	cbnz	r4, 2890e <strncmp+0x72>
   28908:	e00e      	b.n	28928 <strncmp+0x8c>
   2890a:	b16b      	cbz	r3, 28928 <strncmp+0x8c>
   2890c:	b17a      	cbz	r2, 2892e <strncmp+0x92>
   2890e:	f810 2f01 	ldrb.w	r2, [r0, #1]!
   28912:	f811 4f01 	ldrb.w	r4, [r1, #1]!
   28916:	42a2      	cmp	r2, r4
   28918:	f103 33ff 	add.w	r3, r3, #4294967295
   2891c:	d0f5      	beq.n	2890a <strncmp+0x6e>
   2891e:	1b10      	subs	r0, r2, r4
   28920:	bcf0      	pop	{r4, r5, r6, r7}
   28922:	4770      	bx	lr
   28924:	4610      	mov	r0, r2
   28926:	4770      	bx	lr
   28928:	2000      	movs	r0, #0
   2892a:	bcf0      	pop	{r4, r5, r6, r7}
   2892c:	4770      	bx	lr
   2892e:	4610      	mov	r0, r2
   28930:	bcf0      	pop	{r4, r5, r6, r7}
   28932:	4770      	bx	lr
   28934:	4629      	mov	r1, r5
   28936:	4638      	mov	r0, r7
   28938:	e7de      	b.n	288f8 <strncmp+0x5c>
   2893a:	462a      	mov	r2, r5
   2893c:	e7ef      	b.n	2891e <strncmp+0x82>
   2893e:	bf00      	nop

00028940 <critical_factorization>:
   28940:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   28944:	f04f 0e01 	mov.w	lr, #1
   28948:	4674      	mov	r4, lr
   2894a:	2500      	movs	r5, #0
   2894c:	f04f 36ff 	mov.w	r6, #4294967295
   28950:	192b      	adds	r3, r5, r4
   28952:	428b      	cmp	r3, r1
   28954:	eb00 0706 	add.w	r7, r0, r6
   28958:	d20d      	bcs.n	28976 <critical_factorization+0x36>
   2895a:	5d3f      	ldrb	r7, [r7, r4]
   2895c:	f810 c003 	ldrb.w	ip, [r0, r3]
   28960:	45bc      	cmp	ip, r7
   28962:	d22d      	bcs.n	289c0 <critical_factorization+0x80>
   28964:	461d      	mov	r5, r3
   28966:	2401      	movs	r4, #1
   28968:	eba3 0e06 	sub.w	lr, r3, r6
   2896c:	192b      	adds	r3, r5, r4
   2896e:	428b      	cmp	r3, r1
   28970:	eb00 0706 	add.w	r7, r0, r6
   28974:	d3f1      	bcc.n	2895a <critical_factorization+0x1a>
   28976:	f04f 0801 	mov.w	r8, #1
   2897a:	f8c2 e000 	str.w	lr, [r2]
   2897e:	4644      	mov	r4, r8
   28980:	2500      	movs	r5, #0
   28982:	f04f 37ff 	mov.w	r7, #4294967295
   28986:	192b      	adds	r3, r5, r4
   28988:	4299      	cmp	r1, r3
   2898a:	eb00 0e07 	add.w	lr, r0, r7
   2898e:	d90e      	bls.n	289ae <critical_factorization+0x6e>
   28990:	f81e e004 	ldrb.w	lr, [lr, r4]
   28994:	f810 c003 	ldrb.w	ip, [r0, r3]
   28998:	45f4      	cmp	ip, lr
   2899a:	d918      	bls.n	289ce <critical_factorization+0x8e>
   2899c:	461d      	mov	r5, r3
   2899e:	2401      	movs	r4, #1
   289a0:	eba3 0807 	sub.w	r8, r3, r7
   289a4:	192b      	adds	r3, r5, r4
   289a6:	4299      	cmp	r1, r3
   289a8:	eb00 0e07 	add.w	lr, r0, r7
   289ac:	d8f0      	bhi.n	28990 <critical_factorization+0x50>
   289ae:	3701      	adds	r7, #1
   289b0:	1c70      	adds	r0, r6, #1
   289b2:	4287      	cmp	r7, r0
   289b4:	bf24      	itt	cs
   289b6:	f8c2 8000 	strcs.w	r8, [r2]
   289ba:	4638      	movcs	r0, r7
   289bc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   289c0:	d00c      	beq.n	289dc <critical_factorization+0x9c>
   289c2:	f04f 0e01 	mov.w	lr, #1
   289c6:	462e      	mov	r6, r5
   289c8:	4674      	mov	r4, lr
   289ca:	4475      	add	r5, lr
   289cc:	e7c0      	b.n	28950 <critical_factorization+0x10>
   289ce:	d00b      	beq.n	289e8 <critical_factorization+0xa8>
   289d0:	f04f 0801 	mov.w	r8, #1
   289d4:	462f      	mov	r7, r5
   289d6:	4644      	mov	r4, r8
   289d8:	4445      	add	r5, r8
   289da:	e7d4      	b.n	28986 <critical_factorization+0x46>
   289dc:	4574      	cmp	r4, lr
   289de:	bf12      	itee	ne
   289e0:	3401      	addne	r4, #1
   289e2:	461d      	moveq	r5, r3
   289e4:	2401      	moveq	r4, #1
   289e6:	e7b3      	b.n	28950 <critical_factorization+0x10>
   289e8:	4544      	cmp	r4, r8
   289ea:	bf12      	itee	ne
   289ec:	3401      	addne	r4, #1
   289ee:	461d      	moveq	r5, r3
   289f0:	2401      	moveq	r4, #1
   289f2:	e7c8      	b.n	28986 <critical_factorization+0x46>

000289f4 <two_way_long_needle>:
   289f4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   289f8:	f2ad 4d14 	subw	sp, sp, #1044	; 0x414
   289fc:	4616      	mov	r6, r2
   289fe:	4605      	mov	r5, r0
   28a00:	468b      	mov	fp, r1
   28a02:	4610      	mov	r0, r2
   28a04:	4619      	mov	r1, r3
   28a06:	aa03      	add	r2, sp, #12
   28a08:	461c      	mov	r4, r3
   28a0a:	f7ff ff99 	bl	28940 <critical_factorization>
   28a0e:	ab03      	add	r3, sp, #12
   28a10:	4681      	mov	r9, r0
   28a12:	f20d 420c 	addw	r2, sp, #1036	; 0x40c
   28a16:	f843 4f04 	str.w	r4, [r3, #4]!
   28a1a:	4293      	cmp	r3, r2
   28a1c:	d1fb      	bne.n	28a16 <two_way_long_needle+0x22>
   28a1e:	b14c      	cbz	r4, 28a34 <two_way_long_needle+0x40>
   28a20:	1e63      	subs	r3, r4, #1
   28a22:	1e72      	subs	r2, r6, #1
   28a24:	a804      	add	r0, sp, #16
   28a26:	f812 1f01 	ldrb.w	r1, [r2, #1]!
   28a2a:	f840 3021 	str.w	r3, [r0, r1, lsl #2]
   28a2e:	f113 33ff 	adds.w	r3, r3, #4294967295
   28a32:	d2f8      	bcs.n	28a26 <two_way_long_needle+0x32>
   28a34:	9903      	ldr	r1, [sp, #12]
   28a36:	464a      	mov	r2, r9
   28a38:	4431      	add	r1, r6
   28a3a:	4630      	mov	r0, r6
   28a3c:	f7ff f8e0 	bl	27c00 <memcmp>
   28a40:	2800      	cmp	r0, #0
   28a42:	d16f      	bne.n	28b24 <two_way_long_needle+0x130>
   28a44:	f109 33ff 	add.w	r3, r9, #4294967295
   28a48:	9300      	str	r3, [sp, #0]
   28a4a:	18f3      	adds	r3, r6, r3
   28a4c:	4682      	mov	sl, r0
   28a4e:	9301      	str	r3, [sp, #4]
   28a50:	4623      	mov	r3, r4
   28a52:	4680      	mov	r8, r0
   28a54:	4654      	mov	r4, sl
   28a56:	4658      	mov	r0, fp
   28a58:	469a      	mov	sl, r3
   28a5a:	eb08 070a 	add.w	r7, r8, sl
   28a5e:	1a3a      	subs	r2, r7, r0
   28a60:	2100      	movs	r1, #0
   28a62:	4428      	add	r0, r5
   28a64:	f7ff f87c 	bl	27b60 <memchr>
   28a68:	2800      	cmp	r0, #0
   28a6a:	d156      	bne.n	28b1a <two_way_long_needle+0x126>
   28a6c:	2f00      	cmp	r7, #0
   28a6e:	d054      	beq.n	28b1a <two_way_long_needle+0x126>
   28a70:	19eb      	adds	r3, r5, r7
   28a72:	aa04      	add	r2, sp, #16
   28a74:	f813 3c01 	ldrb.w	r3, [r3, #-1]
   28a78:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   28a7c:	b14b      	cbz	r3, 28a92 <two_way_long_needle+0x9e>
   28a7e:	b124      	cbz	r4, 28a8a <two_way_long_needle+0x96>
   28a80:	9a03      	ldr	r2, [sp, #12]
   28a82:	4293      	cmp	r3, r2
   28a84:	d201      	bcs.n	28a8a <two_way_long_needle+0x96>
   28a86:	ebaa 0302 	sub.w	r3, sl, r2
   28a8a:	4498      	add	r8, r3
   28a8c:	2400      	movs	r4, #0
   28a8e:	4638      	mov	r0, r7
   28a90:	e7e3      	b.n	28a5a <two_way_long_needle+0x66>
   28a92:	454c      	cmp	r4, r9
   28a94:	4623      	mov	r3, r4
   28a96:	f10a 3eff 	add.w	lr, sl, #4294967295
   28a9a:	bf38      	it	cc
   28a9c:	464b      	movcc	r3, r9
   28a9e:	4573      	cmp	r3, lr
   28aa0:	d213      	bcs.n	28aca <two_way_long_needle+0xd6>
   28aa2:	eb08 0203 	add.w	r2, r8, r3
   28aa6:	f816 c003 	ldrb.w	ip, [r6, r3]
   28aaa:	5ca8      	ldrb	r0, [r5, r2]
   28aac:	4584      	cmp	ip, r0
   28aae:	442a      	add	r2, r5
   28ab0:	eb06 0103 	add.w	r1, r6, r3
   28ab4:	d006      	beq.n	28ac4 <two_way_long_needle+0xd0>
   28ab6:	e02c      	b.n	28b12 <two_way_long_needle+0x11e>
   28ab8:	f811 cf01 	ldrb.w	ip, [r1, #1]!
   28abc:	f812 0f01 	ldrb.w	r0, [r2, #1]!
   28ac0:	4584      	cmp	ip, r0
   28ac2:	d126      	bne.n	28b12 <two_way_long_needle+0x11e>
   28ac4:	3301      	adds	r3, #1
   28ac6:	4573      	cmp	r3, lr
   28ac8:	d3f6      	bcc.n	28ab8 <two_way_long_needle+0xc4>
   28aca:	454c      	cmp	r4, r9
   28acc:	9900      	ldr	r1, [sp, #0]
   28ace:	f080 8089 	bcs.w	28be4 <two_way_long_needle+0x1f0>
   28ad2:	9b00      	ldr	r3, [sp, #0]
   28ad4:	eb08 0203 	add.w	r2, r8, r3
   28ad8:	9b01      	ldr	r3, [sp, #4]
   28ada:	5ca8      	ldrb	r0, [r5, r2]
   28adc:	781b      	ldrb	r3, [r3, #0]
   28ade:	4298      	cmp	r0, r3
   28ae0:	442a      	add	r2, r5
   28ae2:	d17f      	bne.n	28be4 <two_way_long_needle+0x1f0>
   28ae4:	9801      	ldr	r0, [sp, #4]
   28ae6:	f104 3bff 	add.w	fp, r4, #4294967295
   28aea:	e006      	b.n	28afa <two_way_long_needle+0x106>
   28aec:	f810 cd01 	ldrb.w	ip, [r0, #-1]!
   28af0:	f812 ed01 	ldrb.w	lr, [r2, #-1]!
   28af4:	45f4      	cmp	ip, lr
   28af6:	d103      	bne.n	28b00 <two_way_long_needle+0x10c>
   28af8:	4619      	mov	r1, r3
   28afa:	1e4b      	subs	r3, r1, #1
   28afc:	459b      	cmp	fp, r3
   28afe:	d1f5      	bne.n	28aec <two_way_long_needle+0xf8>
   28b00:	3401      	adds	r4, #1
   28b02:	428c      	cmp	r4, r1
   28b04:	d870      	bhi.n	28be8 <two_way_long_needle+0x1f4>
   28b06:	9c03      	ldr	r4, [sp, #12]
   28b08:	4638      	mov	r0, r7
   28b0a:	44a0      	add	r8, r4
   28b0c:	ebaa 0404 	sub.w	r4, sl, r4
   28b10:	e7a3      	b.n	28a5a <two_way_long_needle+0x66>
   28b12:	f1c9 0201 	rsb	r2, r9, #1
   28b16:	4490      	add	r8, r2
   28b18:	e7b7      	b.n	28a8a <two_way_long_needle+0x96>
   28b1a:	2000      	movs	r0, #0
   28b1c:	f20d 4d14 	addw	sp, sp, #1044	; 0x414
   28b20:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   28b24:	eba4 0309 	sub.w	r3, r4, r9
   28b28:	454b      	cmp	r3, r9
   28b2a:	bf38      	it	cc
   28b2c:	464b      	movcc	r3, r9
   28b2e:	3301      	adds	r3, #1
   28b30:	f109 38ff 	add.w	r8, r9, #4294967295
   28b34:	9303      	str	r3, [sp, #12]
   28b36:	eb06 0308 	add.w	r3, r6, r8
   28b3a:	4658      	mov	r0, fp
   28b3c:	f04f 0a00 	mov.w	sl, #0
   28b40:	46cb      	mov	fp, r9
   28b42:	4699      	mov	r9, r3
   28b44:	eb0a 0704 	add.w	r7, sl, r4
   28b48:	1a3a      	subs	r2, r7, r0
   28b4a:	2100      	movs	r1, #0
   28b4c:	4428      	add	r0, r5
   28b4e:	f7ff f807 	bl	27b60 <memchr>
   28b52:	2800      	cmp	r0, #0
   28b54:	d1e1      	bne.n	28b1a <two_way_long_needle+0x126>
   28b56:	2f00      	cmp	r7, #0
   28b58:	d0df      	beq.n	28b1a <two_way_long_needle+0x126>
   28b5a:	19eb      	adds	r3, r5, r7
   28b5c:	aa04      	add	r2, sp, #16
   28b5e:	f813 3c01 	ldrb.w	r3, [r3, #-1]
   28b62:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   28b66:	bba3      	cbnz	r3, 28bd2 <two_way_long_needle+0x1de>
   28b68:	1e61      	subs	r1, r4, #1
   28b6a:	458b      	cmp	fp, r1
   28b6c:	d215      	bcs.n	28b9a <two_way_long_needle+0x1a6>
   28b6e:	eb0a 020b 	add.w	r2, sl, fp
   28b72:	f816 300b 	ldrb.w	r3, [r6, fp]
   28b76:	f815 e002 	ldrb.w	lr, [r5, r2]
   28b7a:	459e      	cmp	lr, r3
   28b7c:	442a      	add	r2, r5
   28b7e:	eb06 000b 	add.w	r0, r6, fp
   28b82:	465b      	mov	r3, fp
   28b84:	d006      	beq.n	28b94 <two_way_long_needle+0x1a0>
   28b86:	e027      	b.n	28bd8 <two_way_long_needle+0x1e4>
   28b88:	f810 cf01 	ldrb.w	ip, [r0, #1]!
   28b8c:	f812 ef01 	ldrb.w	lr, [r2, #1]!
   28b90:	45f4      	cmp	ip, lr
   28b92:	d121      	bne.n	28bd8 <two_way_long_needle+0x1e4>
   28b94:	3301      	adds	r3, #1
   28b96:	428b      	cmp	r3, r1
   28b98:	d3f6      	bcc.n	28b88 <two_way_long_needle+0x194>
   28b9a:	f1b8 3fff 	cmp.w	r8, #4294967295
   28b9e:	d011      	beq.n	28bc4 <two_way_long_needle+0x1d0>
   28ba0:	eb0a 0208 	add.w	r2, sl, r8
   28ba4:	f899 1000 	ldrb.w	r1, [r9]
   28ba8:	5cab      	ldrb	r3, [r5, r2]
   28baa:	4299      	cmp	r1, r3
   28bac:	442a      	add	r2, r5
   28bae:	d10f      	bne.n	28bd0 <two_way_long_needle+0x1dc>
   28bb0:	464b      	mov	r3, r9
   28bb2:	e005      	b.n	28bc0 <two_way_long_needle+0x1cc>
   28bb4:	f813 0d01 	ldrb.w	r0, [r3, #-1]!
   28bb8:	f812 1d01 	ldrb.w	r1, [r2, #-1]!
   28bbc:	4288      	cmp	r0, r1
   28bbe:	d107      	bne.n	28bd0 <two_way_long_needle+0x1dc>
   28bc0:	42b3      	cmp	r3, r6
   28bc2:	d1f7      	bne.n	28bb4 <two_way_long_needle+0x1c0>
   28bc4:	eb05 000a 	add.w	r0, r5, sl
   28bc8:	f20d 4d14 	addw	sp, sp, #1044	; 0x414
   28bcc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   28bd0:	9b03      	ldr	r3, [sp, #12]
   28bd2:	449a      	add	sl, r3
   28bd4:	4638      	mov	r0, r7
   28bd6:	e7b5      	b.n	28b44 <two_way_long_needle+0x150>
   28bd8:	f1cb 0201 	rsb	r2, fp, #1
   28bdc:	4492      	add	sl, r2
   28bde:	449a      	add	sl, r3
   28be0:	4638      	mov	r0, r7
   28be2:	e7af      	b.n	28b44 <two_way_long_needle+0x150>
   28be4:	4649      	mov	r1, r9
   28be6:	e78b      	b.n	28b00 <two_way_long_needle+0x10c>
   28be8:	eb05 0008 	add.w	r0, r5, r8
   28bec:	e796      	b.n	28b1c <two_way_long_needle+0x128>
   28bee:	bf00      	nop

00028bf0 <strstr>:
   28bf0:	7802      	ldrb	r2, [r0, #0]
   28bf2:	2a00      	cmp	r2, #0
   28bf4:	f000 8101 	beq.w	28dfa <strstr+0x20a>
   28bf8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   28bfc:	f891 8000 	ldrb.w	r8, [r1]
   28c00:	b085      	sub	sp, #20
   28c02:	4644      	mov	r4, r8
   28c04:	f1b8 0f00 	cmp.w	r8, #0
   28c08:	d016      	beq.n	28c38 <strstr+0x48>
   28c0a:	4686      	mov	lr, r0
   28c0c:	f101 0c01 	add.w	ip, r1, #1
   28c10:	2701      	movs	r7, #1
   28c12:	e003      	b.n	28c1c <strstr+0x2c>
   28c14:	f813 4b01 	ldrb.w	r4, [r3], #1
   28c18:	b16c      	cbz	r4, 28c36 <strstr+0x46>
   28c1a:	469c      	mov	ip, r3
   28c1c:	42a2      	cmp	r2, r4
   28c1e:	bf14      	ite	ne
   28c20:	2700      	movne	r7, #0
   28c22:	f007 0701 	andeq.w	r7, r7, #1
   28c26:	f81e 2f01 	ldrb.w	r2, [lr, #1]!
   28c2a:	4663      	mov	r3, ip
   28c2c:	2a00      	cmp	r2, #0
   28c2e:	d1f1      	bne.n	28c14 <strstr+0x24>
   28c30:	f89c 3000 	ldrb.w	r3, [ip]
   28c34:	b9fb      	cbnz	r3, 28c76 <strstr+0x86>
   28c36:	b117      	cbz	r7, 28c3e <strstr+0x4e>
   28c38:	b005      	add	sp, #20
   28c3a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   28c3e:	460e      	mov	r6, r1
   28c40:	4605      	mov	r5, r0
   28c42:	4641      	mov	r1, r8
   28c44:	3001      	adds	r0, #1
   28c46:	ebac 0406 	sub.w	r4, ip, r6
   28c4a:	f003 fb3b 	bl	2c2c4 <strchr>
   28c4e:	4607      	mov	r7, r0
   28c50:	b188      	cbz	r0, 28c76 <strstr+0x86>
   28c52:	2c01      	cmp	r4, #1
   28c54:	d0f0      	beq.n	28c38 <strstr+0x48>
   28c56:	1928      	adds	r0, r5, r4
   28c58:	4287      	cmp	r7, r0
   28c5a:	bf94      	ite	ls
   28c5c:	1bc1      	subls	r1, r0, r7
   28c5e:	2101      	movhi	r1, #1
   28c60:	2c1f      	cmp	r4, #31
   28c62:	468b      	mov	fp, r1
   28c64:	d90b      	bls.n	28c7e <strstr+0x8e>
   28c66:	4623      	mov	r3, r4
   28c68:	4632      	mov	r2, r6
   28c6a:	4638      	mov	r0, r7
   28c6c:	f7ff fec2 	bl	289f4 <two_way_long_needle>
   28c70:	b005      	add	sp, #20
   28c72:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   28c76:	2000      	movs	r0, #0
   28c78:	b005      	add	sp, #20
   28c7a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   28c7e:	aa03      	add	r2, sp, #12
   28c80:	4621      	mov	r1, r4
   28c82:	4630      	mov	r0, r6
   28c84:	f7ff fe5c 	bl	28940 <critical_factorization>
   28c88:	9903      	ldr	r1, [sp, #12]
   28c8a:	4680      	mov	r8, r0
   28c8c:	4602      	mov	r2, r0
   28c8e:	4431      	add	r1, r6
   28c90:	4630      	mov	r0, r6
   28c92:	f7fe ffb5 	bl	27c00 <memcmp>
   28c96:	2800      	cmp	r0, #0
   28c98:	d157      	bne.n	28d4a <strstr+0x15a>
   28c9a:	f108 33ff 	add.w	r3, r8, #4294967295
   28c9e:	9300      	str	r3, [sp, #0]
   28ca0:	18f3      	adds	r3, r6, r3
   28ca2:	4681      	mov	r9, r0
   28ca4:	4605      	mov	r5, r0
   28ca6:	9301      	str	r3, [sp, #4]
   28ca8:	4658      	mov	r0, fp
   28caa:	46b2      	mov	sl, r6
   28cac:	1966      	adds	r6, r4, r5
   28cae:	1a32      	subs	r2, r6, r0
   28cb0:	2100      	movs	r1, #0
   28cb2:	4438      	add	r0, r7
   28cb4:	f7fe ff54 	bl	27b60 <memchr>
   28cb8:	2800      	cmp	r0, #0
   28cba:	d1dc      	bne.n	28c76 <strstr+0x86>
   28cbc:	2e00      	cmp	r6, #0
   28cbe:	d0da      	beq.n	28c76 <strstr+0x86>
   28cc0:	45c8      	cmp	r8, r9
   28cc2:	4643      	mov	r3, r8
   28cc4:	bf38      	it	cc
   28cc6:	464b      	movcc	r3, r9
   28cc8:	429c      	cmp	r4, r3
   28cca:	d912      	bls.n	28cf2 <strstr+0x102>
   28ccc:	195a      	adds	r2, r3, r5
   28cce:	f81a 1003 	ldrb.w	r1, [sl, r3]
   28cd2:	5cb8      	ldrb	r0, [r7, r2]
   28cd4:	4281      	cmp	r1, r0
   28cd6:	443a      	add	r2, r7
   28cd8:	eb0a 0e03 	add.w	lr, sl, r3
   28cdc:	d006      	beq.n	28cec <strstr+0xfc>
   28cde:	e02c      	b.n	28d3a <strstr+0x14a>
   28ce0:	f81e 0f01 	ldrb.w	r0, [lr, #1]!
   28ce4:	f812 1f01 	ldrb.w	r1, [r2, #1]!
   28ce8:	4288      	cmp	r0, r1
   28cea:	d126      	bne.n	28d3a <strstr+0x14a>
   28cec:	3301      	adds	r3, #1
   28cee:	429c      	cmp	r4, r3
   28cf0:	d1f6      	bne.n	28ce0 <strstr+0xf0>
   28cf2:	45c8      	cmp	r8, r9
   28cf4:	9900      	ldr	r1, [sp, #0]
   28cf6:	f240 8083 	bls.w	28e00 <strstr+0x210>
   28cfa:	9b00      	ldr	r3, [sp, #0]
   28cfc:	18ea      	adds	r2, r5, r3
   28cfe:	9b01      	ldr	r3, [sp, #4]
   28d00:	5cb8      	ldrb	r0, [r7, r2]
   28d02:	781b      	ldrb	r3, [r3, #0]
   28d04:	4298      	cmp	r0, r3
   28d06:	443a      	add	r2, r7
   28d08:	d17a      	bne.n	28e00 <strstr+0x210>
   28d0a:	9801      	ldr	r0, [sp, #4]
   28d0c:	f109 3bff 	add.w	fp, r9, #4294967295
   28d10:	e006      	b.n	28d20 <strstr+0x130>
   28d12:	f810 cd01 	ldrb.w	ip, [r0, #-1]!
   28d16:	f812 ed01 	ldrb.w	lr, [r2, #-1]!
   28d1a:	45f4      	cmp	ip, lr
   28d1c:	d103      	bne.n	28d26 <strstr+0x136>
   28d1e:	4619      	mov	r1, r3
   28d20:	1e4b      	subs	r3, r1, #1
   28d22:	455b      	cmp	r3, fp
   28d24:	d1f5      	bne.n	28d12 <strstr+0x122>
   28d26:	f109 0901 	add.w	r9, r9, #1
   28d2a:	4589      	cmp	r9, r1
   28d2c:	d857      	bhi.n	28dde <strstr+0x1ee>
   28d2e:	9b03      	ldr	r3, [sp, #12]
   28d30:	4630      	mov	r0, r6
   28d32:	441d      	add	r5, r3
   28d34:	eba4 0903 	sub.w	r9, r4, r3
   28d38:	e7b8      	b.n	28cac <strstr+0xbc>
   28d3a:	f1c8 0201 	rsb	r2, r8, #1
   28d3e:	4415      	add	r5, r2
   28d40:	441d      	add	r5, r3
   28d42:	f04f 0900 	mov.w	r9, #0
   28d46:	4630      	mov	r0, r6
   28d48:	e7b0      	b.n	28cac <strstr+0xbc>
   28d4a:	eba4 0308 	sub.w	r3, r4, r8
   28d4e:	4543      	cmp	r3, r8
   28d50:	bf38      	it	cc
   28d52:	4643      	movcc	r3, r8
   28d54:	3301      	adds	r3, #1
   28d56:	f108 39ff 	add.w	r9, r8, #4294967295
   28d5a:	9303      	str	r3, [sp, #12]
   28d5c:	eb06 0309 	add.w	r3, r6, r9
   28d60:	4658      	mov	r0, fp
   28d62:	2500      	movs	r5, #0
   28d64:	46bb      	mov	fp, r7
   28d66:	469a      	mov	sl, r3
   28d68:	1967      	adds	r7, r4, r5
   28d6a:	1a3a      	subs	r2, r7, r0
   28d6c:	2100      	movs	r1, #0
   28d6e:	4458      	add	r0, fp
   28d70:	f7fe fef6 	bl	27b60 <memchr>
   28d74:	2800      	cmp	r0, #0
   28d76:	f47f af7e 	bne.w	28c76 <strstr+0x86>
   28d7a:	2f00      	cmp	r7, #0
   28d7c:	f43f af7b 	beq.w	28c76 <strstr+0x86>
   28d80:	4544      	cmp	r4, r8
   28d82:	d915      	bls.n	28db0 <strstr+0x1c0>
   28d84:	eb08 0205 	add.w	r2, r8, r5
   28d88:	f816 3008 	ldrb.w	r3, [r6, r8]
   28d8c:	f81b 0002 	ldrb.w	r0, [fp, r2]
   28d90:	4298      	cmp	r0, r3
   28d92:	445a      	add	r2, fp
   28d94:	eb06 0108 	add.w	r1, r6, r8
   28d98:	4643      	mov	r3, r8
   28d9a:	d006      	beq.n	28daa <strstr+0x1ba>
   28d9c:	e023      	b.n	28de6 <strstr+0x1f6>
   28d9e:	f811 ef01 	ldrb.w	lr, [r1, #1]!
   28da2:	f812 0f01 	ldrb.w	r0, [r2, #1]!
   28da6:	4586      	cmp	lr, r0
   28da8:	d11d      	bne.n	28de6 <strstr+0x1f6>
   28daa:	3301      	adds	r3, #1
   28dac:	429c      	cmp	r4, r3
   28dae:	d1f6      	bne.n	28d9e <strstr+0x1ae>
   28db0:	f1b9 3fff 	cmp.w	r9, #4294967295
   28db4:	d012      	beq.n	28ddc <strstr+0x1ec>
   28db6:	eb05 0209 	add.w	r2, r5, r9
   28dba:	f89a 3000 	ldrb.w	r3, [sl]
   28dbe:	f81b 1002 	ldrb.w	r1, [fp, r2]
   28dc2:	4299      	cmp	r1, r3
   28dc4:	445a      	add	r2, fp
   28dc6:	d114      	bne.n	28df2 <strstr+0x202>
   28dc8:	4653      	mov	r3, sl
   28dca:	e005      	b.n	28dd8 <strstr+0x1e8>
   28dcc:	f813 0d01 	ldrb.w	r0, [r3, #-1]!
   28dd0:	f812 1d01 	ldrb.w	r1, [r2, #-1]!
   28dd4:	4288      	cmp	r0, r1
   28dd6:	d10c      	bne.n	28df2 <strstr+0x202>
   28dd8:	42b3      	cmp	r3, r6
   28dda:	d1f7      	bne.n	28dcc <strstr+0x1dc>
   28ddc:	465f      	mov	r7, fp
   28dde:	1978      	adds	r0, r7, r5
   28de0:	b005      	add	sp, #20
   28de2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   28de6:	f1c8 0201 	rsb	r2, r8, #1
   28dea:	4415      	add	r5, r2
   28dec:	441d      	add	r5, r3
   28dee:	4638      	mov	r0, r7
   28df0:	e7ba      	b.n	28d68 <strstr+0x178>
   28df2:	9b03      	ldr	r3, [sp, #12]
   28df4:	4638      	mov	r0, r7
   28df6:	441d      	add	r5, r3
   28df8:	e7b6      	b.n	28d68 <strstr+0x178>
   28dfa:	780b      	ldrb	r3, [r1, #0]
   28dfc:	b913      	cbnz	r3, 28e04 <strstr+0x214>
   28dfe:	4770      	bx	lr
   28e00:	4641      	mov	r1, r8
   28e02:	e790      	b.n	28d26 <strstr+0x136>
   28e04:	2000      	movs	r0, #0
   28e06:	4770      	bx	lr

00028e08 <_strtol_l.isra.0>:
   28e08:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   28e0c:	f8dd 9028 	ldr.w	r9, [sp, #40]	; 0x28
   28e10:	460f      	mov	r7, r1
   28e12:	4680      	mov	r8, r0
   28e14:	4616      	mov	r6, r2
   28e16:	461d      	mov	r5, r3
   28e18:	468a      	mov	sl, r1
   28e1a:	e000      	b.n	28e1e <_strtol_l.isra.0+0x16>
   28e1c:	46a2      	mov	sl, r4
   28e1e:	4654      	mov	r4, sl
   28e20:	4648      	mov	r0, r9
   28e22:	f814 bb01 	ldrb.w	fp, [r4], #1
   28e26:	f7fe fbb5 	bl	27594 <__locale_ctype_ptr_l>
   28e2a:	4458      	add	r0, fp
   28e2c:	7842      	ldrb	r2, [r0, #1]
   28e2e:	f012 0208 	ands.w	r2, r2, #8
   28e32:	d1f3      	bne.n	28e1c <_strtol_l.isra.0+0x14>
   28e34:	f1bb 0f2d 	cmp.w	fp, #45	; 0x2d
   28e38:	d04f      	beq.n	28eda <_strtol_l.isra.0+0xd2>
   28e3a:	f1bb 0f2b 	cmp.w	fp, #43	; 0x2b
   28e3e:	bf04      	itt	eq
   28e40:	f894 b000 	ldrbeq.w	fp, [r4]
   28e44:	f10a 0402 	addeq.w	r4, sl, #2
   28e48:	b11d      	cbz	r5, 28e52 <_strtol_l.isra.0+0x4a>
   28e4a:	2d10      	cmp	r5, #16
   28e4c:	d056      	beq.n	28efc <_strtol_l.isra.0+0xf4>
   28e4e:	46ac      	mov	ip, r5
   28e50:	e004      	b.n	28e5c <_strtol_l.isra.0+0x54>
   28e52:	f1bb 0f30 	cmp.w	fp, #48	; 0x30
   28e56:	d060      	beq.n	28f1a <_strtol_l.isra.0+0x112>
   28e58:	250a      	movs	r5, #10
   28e5a:	46ac      	mov	ip, r5
   28e5c:	2a00      	cmp	r2, #0
   28e5e:	bf0c      	ite	eq
   28e60:	f06f 4900 	mvneq.w	r9, #2147483648	; 0x80000000
   28e64:	f04f 4900 	movne.w	r9, #2147483648	; 0x80000000
   28e68:	2100      	movs	r1, #0
   28e6a:	fbb9 fefc 	udiv	lr, r9, ip
   28e6e:	4608      	mov	r0, r1
   28e70:	fb0c 9a1e 	mls	sl, ip, lr, r9
   28e74:	e005      	b.n	28e82 <_strtol_l.isra.0+0x7a>
   28e76:	d029      	beq.n	28ecc <_strtol_l.isra.0+0xc4>
   28e78:	fb0c 3000 	mla	r0, ip, r0, r3
   28e7c:	2101      	movs	r1, #1
   28e7e:	f814 bb01 	ldrb.w	fp, [r4], #1
   28e82:	f1ab 0330 	sub.w	r3, fp, #48	; 0x30
   28e86:	2b09      	cmp	r3, #9
   28e88:	d905      	bls.n	28e96 <_strtol_l.isra.0+0x8e>
   28e8a:	f1ab 0341 	sub.w	r3, fp, #65	; 0x41
   28e8e:	2b19      	cmp	r3, #25
   28e90:	d80b      	bhi.n	28eaa <_strtol_l.isra.0+0xa2>
   28e92:	f1ab 0337 	sub.w	r3, fp, #55	; 0x37
   28e96:	429d      	cmp	r5, r3
   28e98:	dd0f      	ble.n	28eba <_strtol_l.isra.0+0xb2>
   28e9a:	f1b1 3fff 	cmp.w	r1, #4294967295
   28e9e:	d0ee      	beq.n	28e7e <_strtol_l.isra.0+0x76>
   28ea0:	4586      	cmp	lr, r0
   28ea2:	d2e8      	bcs.n	28e76 <_strtol_l.isra.0+0x6e>
   28ea4:	f04f 31ff 	mov.w	r1, #4294967295
   28ea8:	e7e9      	b.n	28e7e <_strtol_l.isra.0+0x76>
   28eaa:	f1ab 0361 	sub.w	r3, fp, #97	; 0x61
   28eae:	2b19      	cmp	r3, #25
   28eb0:	d803      	bhi.n	28eba <_strtol_l.isra.0+0xb2>
   28eb2:	f1ab 0357 	sub.w	r3, fp, #87	; 0x57
   28eb6:	429d      	cmp	r5, r3
   28eb8:	dcef      	bgt.n	28e9a <_strtol_l.isra.0+0x92>
   28eba:	1c4b      	adds	r3, r1, #1
   28ebc:	d013      	beq.n	28ee6 <_strtol_l.isra.0+0xde>
   28ebe:	b102      	cbz	r2, 28ec2 <_strtol_l.isra.0+0xba>
   28ec0:	4240      	negs	r0, r0
   28ec2:	b146      	cbz	r6, 28ed6 <_strtol_l.isra.0+0xce>
   28ec4:	b9c1      	cbnz	r1, 28ef8 <_strtol_l.isra.0+0xf0>
   28ec6:	6037      	str	r7, [r6, #0]
   28ec8:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   28ecc:	459a      	cmp	sl, r3
   28ece:	dad3      	bge.n	28e78 <_strtol_l.isra.0+0x70>
   28ed0:	f04f 31ff 	mov.w	r1, #4294967295
   28ed4:	e7d3      	b.n	28e7e <_strtol_l.isra.0+0x76>
   28ed6:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   28eda:	f894 b000 	ldrb.w	fp, [r4]
   28ede:	2201      	movs	r2, #1
   28ee0:	f10a 0402 	add.w	r4, sl, #2
   28ee4:	e7b0      	b.n	28e48 <_strtol_l.isra.0+0x40>
   28ee6:	2322      	movs	r3, #34	; 0x22
   28ee8:	f8c8 3000 	str.w	r3, [r8]
   28eec:	b1ee      	cbz	r6, 28f2a <_strtol_l.isra.0+0x122>
   28eee:	1e67      	subs	r7, r4, #1
   28ef0:	4648      	mov	r0, r9
   28ef2:	6037      	str	r7, [r6, #0]
   28ef4:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   28ef8:	4681      	mov	r9, r0
   28efa:	e7f8      	b.n	28eee <_strtol_l.isra.0+0xe6>
   28efc:	f1bb 0f30 	cmp.w	fp, #48	; 0x30
   28f00:	d1a5      	bne.n	28e4e <_strtol_l.isra.0+0x46>
   28f02:	7823      	ldrb	r3, [r4, #0]
   28f04:	f003 03df 	and.w	r3, r3, #223	; 0xdf
   28f08:	2b58      	cmp	r3, #88	; 0x58
   28f0a:	d1a0      	bne.n	28e4e <_strtol_l.isra.0+0x46>
   28f0c:	f04f 0c10 	mov.w	ip, #16
   28f10:	f894 b001 	ldrb.w	fp, [r4, #1]
   28f14:	4665      	mov	r5, ip
   28f16:	3402      	adds	r4, #2
   28f18:	e7a0      	b.n	28e5c <_strtol_l.isra.0+0x54>
   28f1a:	7823      	ldrb	r3, [r4, #0]
   28f1c:	f003 03df 	and.w	r3, r3, #223	; 0xdf
   28f20:	2b58      	cmp	r3, #88	; 0x58
   28f22:	d0f3      	beq.n	28f0c <_strtol_l.isra.0+0x104>
   28f24:	2508      	movs	r5, #8
   28f26:	46ac      	mov	ip, r5
   28f28:	e798      	b.n	28e5c <_strtol_l.isra.0+0x54>
   28f2a:	4648      	mov	r0, r9
   28f2c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}

00028f30 <strtol>:
   28f30:	b530      	push	{r4, r5, lr}
   28f32:	4c08      	ldr	r4, [pc, #32]	; (28f54 <strtol+0x24>)
   28f34:	4b08      	ldr	r3, [pc, #32]	; (28f58 <strtol+0x28>)
   28f36:	6825      	ldr	r5, [r4, #0]
   28f38:	6b6c      	ldr	r4, [r5, #52]	; 0x34
   28f3a:	b083      	sub	sp, #12
   28f3c:	2c00      	cmp	r4, #0
   28f3e:	bf08      	it	eq
   28f40:	461c      	moveq	r4, r3
   28f42:	9400      	str	r4, [sp, #0]
   28f44:	4613      	mov	r3, r2
   28f46:	460a      	mov	r2, r1
   28f48:	4601      	mov	r1, r0
   28f4a:	4628      	mov	r0, r5
   28f4c:	f7ff ff5c 	bl	28e08 <_strtol_l.isra.0>
   28f50:	b003      	add	sp, #12
   28f52:	bd30      	pop	{r4, r5, pc}
   28f54:	20000108 	.word	0x20000108
   28f58:	20000538 	.word	0x20000538
   28f5c:	00000000 	.word	0x00000000

00028f60 <_svfprintf_r>:
   28f60:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   28f64:	b0c1      	sub	sp, #260	; 0x104
   28f66:	460c      	mov	r4, r1
   28f68:	9107      	str	r1, [sp, #28]
   28f6a:	4692      	mov	sl, r2
   28f6c:	930b      	str	r3, [sp, #44]	; 0x2c
   28f6e:	9008      	str	r0, [sp, #32]
   28f70:	f002 fde2 	bl	2bb38 <_localeconv_r>
   28f74:	6803      	ldr	r3, [r0, #0]
   28f76:	9314      	str	r3, [sp, #80]	; 0x50
   28f78:	4618      	mov	r0, r3
   28f7a:	f7ff fc21 	bl	287c0 <strlen>
   28f7e:	89a3      	ldrh	r3, [r4, #12]
   28f80:	9013      	str	r0, [sp, #76]	; 0x4c
   28f82:	0619      	lsls	r1, r3, #24
   28f84:	d503      	bpl.n	28f8e <_svfprintf_r+0x2e>
   28f86:	6923      	ldr	r3, [r4, #16]
   28f88:	2b00      	cmp	r3, #0
   28f8a:	f001 801b 	beq.w	29fc4 <_svfprintf_r+0x1064>
   28f8e:	ed9f 7b94 	vldr	d7, [pc, #592]	; 291e0 <_svfprintf_r+0x280>
   28f92:	ed8d 7b10 	vstr	d7, [sp, #64]	; 0x40
   28f96:	2300      	movs	r3, #0
   28f98:	f10d 09c0 	add.w	r9, sp, #192	; 0xc0
   28f9c:	930f      	str	r3, [sp, #60]	; 0x3c
   28f9e:	9325      	str	r3, [sp, #148]	; 0x94
   28fa0:	9324      	str	r3, [sp, #144]	; 0x90
   28fa2:	9312      	str	r3, [sp, #72]	; 0x48
   28fa4:	9315      	str	r3, [sp, #84]	; 0x54
   28fa6:	9305      	str	r3, [sp, #20]
   28fa8:	f8cd 908c 	str.w	r9, [sp, #140]	; 0x8c
   28fac:	46c8      	mov	r8, r9
   28fae:	f89a 3000 	ldrb.w	r3, [sl]
   28fb2:	4654      	mov	r4, sl
   28fb4:	b1e3      	cbz	r3, 28ff0 <_svfprintf_r+0x90>
   28fb6:	2b25      	cmp	r3, #37	; 0x25
   28fb8:	d102      	bne.n	28fc0 <_svfprintf_r+0x60>
   28fba:	e019      	b.n	28ff0 <_svfprintf_r+0x90>
   28fbc:	2b25      	cmp	r3, #37	; 0x25
   28fbe:	d003      	beq.n	28fc8 <_svfprintf_r+0x68>
   28fc0:	f814 3f01 	ldrb.w	r3, [r4, #1]!
   28fc4:	2b00      	cmp	r3, #0
   28fc6:	d1f9      	bne.n	28fbc <_svfprintf_r+0x5c>
   28fc8:	eba4 050a 	sub.w	r5, r4, sl
   28fcc:	b185      	cbz	r5, 28ff0 <_svfprintf_r+0x90>
   28fce:	9b24      	ldr	r3, [sp, #144]	; 0x90
   28fd0:	9a25      	ldr	r2, [sp, #148]	; 0x94
   28fd2:	f8c8 a000 	str.w	sl, [r8]
   28fd6:	3301      	adds	r3, #1
   28fd8:	442a      	add	r2, r5
   28fda:	2b07      	cmp	r3, #7
   28fdc:	f8c8 5004 	str.w	r5, [r8, #4]
   28fe0:	9225      	str	r2, [sp, #148]	; 0x94
   28fe2:	9324      	str	r3, [sp, #144]	; 0x90
   28fe4:	dc7f      	bgt.n	290e6 <_svfprintf_r+0x186>
   28fe6:	f108 0808 	add.w	r8, r8, #8
   28fea:	9b05      	ldr	r3, [sp, #20]
   28fec:	442b      	add	r3, r5
   28fee:	9305      	str	r3, [sp, #20]
   28ff0:	7823      	ldrb	r3, [r4, #0]
   28ff2:	2b00      	cmp	r3, #0
   28ff4:	d07f      	beq.n	290f6 <_svfprintf_r+0x196>
   28ff6:	2300      	movs	r3, #0
   28ff8:	461a      	mov	r2, r3
   28ffa:	f88d 306f 	strb.w	r3, [sp, #111]	; 0x6f
   28ffe:	4619      	mov	r1, r3
   29000:	9309      	str	r3, [sp, #36]	; 0x24
   29002:	469b      	mov	fp, r3
   29004:	f04f 30ff 	mov.w	r0, #4294967295
   29008:	7863      	ldrb	r3, [r4, #1]
   2900a:	9006      	str	r0, [sp, #24]
   2900c:	f104 0a01 	add.w	sl, r4, #1
   29010:	f10a 0a01 	add.w	sl, sl, #1
   29014:	f1a3 0020 	sub.w	r0, r3, #32
   29018:	2858      	cmp	r0, #88	; 0x58
   2901a:	f200 83d3 	bhi.w	297c4 <_svfprintf_r+0x864>
   2901e:	e8df f010 	tbh	[pc, r0, lsl #1]
   29022:	023f      	.short	0x023f
   29024:	03d103d1 	.word	0x03d103d1
   29028:	03d10247 	.word	0x03d10247
   2902c:	03d103d1 	.word	0x03d103d1
   29030:	03d103d1 	.word	0x03d103d1
   29034:	024c03d1 	.word	0x024c03d1
   29038:	03d1020a 	.word	0x03d1020a
   2903c:	0273005d 	.word	0x0273005d
   29040:	028e03d1 	.word	0x028e03d1
   29044:	03c103c1 	.word	0x03c103c1
   29048:	03c103c1 	.word	0x03c103c1
   2904c:	03c103c1 	.word	0x03c103c1
   29050:	03c103c1 	.word	0x03c103c1
   29054:	03d103c1 	.word	0x03d103c1
   29058:	03d103d1 	.word	0x03d103d1
   2905c:	03d103d1 	.word	0x03d103d1
   29060:	03d103d1 	.word	0x03d103d1
   29064:	03d103d1 	.word	0x03d103d1
   29068:	033f03d1 	.word	0x033f03d1
   2906c:	03d1035f 	.word	0x03d1035f
   29070:	03d1035f 	.word	0x03d1035f
   29074:	03d103d1 	.word	0x03d103d1
   29078:	03aa03d1 	.word	0x03aa03d1
   2907c:	03d103d1 	.word	0x03d103d1
   29080:	03d103af 	.word	0x03d103af
   29084:	03d103d1 	.word	0x03d103d1
   29088:	03d103d1 	.word	0x03d103d1
   2908c:	03d10261 	.word	0x03d10261
   29090:	032603d1 	.word	0x032603d1
   29094:	03d103d1 	.word	0x03d103d1
   29098:	03d103d1 	.word	0x03d103d1
   2909c:	03d103d1 	.word	0x03d103d1
   290a0:	03d103d1 	.word	0x03d103d1
   290a4:	03d103d1 	.word	0x03d103d1
   290a8:	02e302ce 	.word	0x02e302ce
   290ac:	035f035f 	.word	0x035f035f
   290b0:	0293035f 	.word	0x0293035f
   290b4:	03d102e3 	.word	0x03d102e3
   290b8:	029803d1 	.word	0x029803d1
   290bc:	02a503d1 	.word	0x02a503d1
   290c0:	02bc01d3 	.word	0x02bc01d3
   290c4:	03d1020f 	.word	0x03d1020f
   290c8:	03d101e8 	.word	0x03d101e8
   290cc:	03d1007e 	.word	0x03d1007e
   290d0:	021403d1 	.word	0x021403d1
   290d4:	9809      	ldr	r0, [sp, #36]	; 0x24
   290d6:	930b      	str	r3, [sp, #44]	; 0x2c
   290d8:	4240      	negs	r0, r0
   290da:	9009      	str	r0, [sp, #36]	; 0x24
   290dc:	f04b 0b04 	orr.w	fp, fp, #4
   290e0:	f89a 3000 	ldrb.w	r3, [sl]
   290e4:	e794      	b.n	29010 <_svfprintf_r+0xb0>
   290e6:	aa23      	add	r2, sp, #140	; 0x8c
   290e8:	9907      	ldr	r1, [sp, #28]
   290ea:	9808      	ldr	r0, [sp, #32]
   290ec:	f003 f95e 	bl	2c3ac <__ssprint_r>
   290f0:	b940      	cbnz	r0, 29104 <_svfprintf_r+0x1a4>
   290f2:	46c8      	mov	r8, r9
   290f4:	e779      	b.n	28fea <_svfprintf_r+0x8a>
   290f6:	9b25      	ldr	r3, [sp, #148]	; 0x94
   290f8:	b123      	cbz	r3, 29104 <_svfprintf_r+0x1a4>
   290fa:	9808      	ldr	r0, [sp, #32]
   290fc:	9907      	ldr	r1, [sp, #28]
   290fe:	aa23      	add	r2, sp, #140	; 0x8c
   29100:	f003 f954 	bl	2c3ac <__ssprint_r>
   29104:	9b07      	ldr	r3, [sp, #28]
   29106:	899b      	ldrh	r3, [r3, #12]
   29108:	f013 0f40 	tst.w	r3, #64	; 0x40
   2910c:	9b05      	ldr	r3, [sp, #20]
   2910e:	bf18      	it	ne
   29110:	f04f 33ff 	movne.w	r3, #4294967295
   29114:	9305      	str	r3, [sp, #20]
   29116:	9805      	ldr	r0, [sp, #20]
   29118:	b041      	add	sp, #260	; 0x104
   2911a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2911e:	f01b 0f20 	tst.w	fp, #32
   29122:	930d      	str	r3, [sp, #52]	; 0x34
   29124:	f040 81e5 	bne.w	294f2 <_svfprintf_r+0x592>
   29128:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
   2912a:	f01b 0f10 	tst.w	fp, #16
   2912e:	4613      	mov	r3, r2
   29130:	f040 8588 	bne.w	29c44 <_svfprintf_r+0xce4>
   29134:	f01b 0f40 	tst.w	fp, #64	; 0x40
   29138:	f000 8584 	beq.w	29c44 <_svfprintf_r+0xce4>
   2913c:	8814      	ldrh	r4, [r2, #0]
   2913e:	3204      	adds	r2, #4
   29140:	2500      	movs	r5, #0
   29142:	2301      	movs	r3, #1
   29144:	920b      	str	r2, [sp, #44]	; 0x2c
   29146:	2700      	movs	r7, #0
   29148:	f88d 706f 	strb.w	r7, [sp, #111]	; 0x6f
   2914c:	9906      	ldr	r1, [sp, #24]
   2914e:	1c4a      	adds	r2, r1, #1
   29150:	f000 826d 	beq.w	2962e <_svfprintf_r+0x6ce>
   29154:	f02b 0280 	bic.w	r2, fp, #128	; 0x80
   29158:	9203      	str	r2, [sp, #12]
   2915a:	ea54 0205 	orrs.w	r2, r4, r5
   2915e:	f040 826c 	bne.w	2963a <_svfprintf_r+0x6da>
   29162:	2900      	cmp	r1, #0
   29164:	f040 8451 	bne.w	29a0a <_svfprintf_r+0xaaa>
   29168:	2b00      	cmp	r3, #0
   2916a:	f040 850b 	bne.w	29b84 <_svfprintf_r+0xc24>
   2916e:	f01b 0301 	ands.w	r3, fp, #1
   29172:	930a      	str	r3, [sp, #40]	; 0x28
   29174:	f000 861a 	beq.w	29dac <_svfprintf_r+0xe4c>
   29178:	ae40      	add	r6, sp, #256	; 0x100
   2917a:	2330      	movs	r3, #48	; 0x30
   2917c:	f806 3d41 	strb.w	r3, [r6, #-65]!
   29180:	9b06      	ldr	r3, [sp, #24]
   29182:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   29184:	4293      	cmp	r3, r2
   29186:	bfb8      	it	lt
   29188:	4613      	movlt	r3, r2
   2918a:	9304      	str	r3, [sp, #16]
   2918c:	2300      	movs	r3, #0
   2918e:	930e      	str	r3, [sp, #56]	; 0x38
   29190:	b117      	cbz	r7, 29198 <_svfprintf_r+0x238>
   29192:	9b04      	ldr	r3, [sp, #16]
   29194:	3301      	adds	r3, #1
   29196:	9304      	str	r3, [sp, #16]
   29198:	9b03      	ldr	r3, [sp, #12]
   2919a:	f013 0302 	ands.w	r3, r3, #2
   2919e:	930c      	str	r3, [sp, #48]	; 0x30
   291a0:	d002      	beq.n	291a8 <_svfprintf_r+0x248>
   291a2:	9b04      	ldr	r3, [sp, #16]
   291a4:	3302      	adds	r3, #2
   291a6:	9304      	str	r3, [sp, #16]
   291a8:	9b03      	ldr	r3, [sp, #12]
   291aa:	f013 0584 	ands.w	r5, r3, #132	; 0x84
   291ae:	f040 8320 	bne.w	297f2 <_svfprintf_r+0x892>
   291b2:	9b09      	ldr	r3, [sp, #36]	; 0x24
   291b4:	9a04      	ldr	r2, [sp, #16]
   291b6:	eba3 0b02 	sub.w	fp, r3, r2
   291ba:	f1bb 0f00 	cmp.w	fp, #0
   291be:	f340 8318 	ble.w	297f2 <_svfprintf_r+0x892>
   291c2:	f1bb 0f10 	cmp.w	fp, #16
   291c6:	9c25      	ldr	r4, [sp, #148]	; 0x94
   291c8:	9a24      	ldr	r2, [sp, #144]	; 0x90
   291ca:	dd30      	ble.n	2922e <_svfprintf_r+0x2ce>
   291cc:	4643      	mov	r3, r8
   291ce:	4621      	mov	r1, r4
   291d0:	46a8      	mov	r8, r5
   291d2:	2710      	movs	r7, #16
   291d4:	9c08      	ldr	r4, [sp, #32]
   291d6:	9d07      	ldr	r5, [sp, #28]
   291d8:	e00d      	b.n	291f6 <_svfprintf_r+0x296>
   291da:	bf00      	nop
   291dc:	f3af 8000 	nop.w
	...
   291e8:	f1ab 0b10 	sub.w	fp, fp, #16
   291ec:	f1bb 0f10 	cmp.w	fp, #16
   291f0:	f103 0308 	add.w	r3, r3, #8
   291f4:	dd18      	ble.n	29228 <_svfprintf_r+0x2c8>
   291f6:	3201      	adds	r2, #1
   291f8:	48b7      	ldr	r0, [pc, #732]	; (294d8 <_svfprintf_r+0x578>)
   291fa:	9224      	str	r2, [sp, #144]	; 0x90
   291fc:	3110      	adds	r1, #16
   291fe:	2a07      	cmp	r2, #7
   29200:	9125      	str	r1, [sp, #148]	; 0x94
   29202:	e883 0081 	stmia.w	r3, {r0, r7}
   29206:	ddef      	ble.n	291e8 <_svfprintf_r+0x288>
   29208:	aa23      	add	r2, sp, #140	; 0x8c
   2920a:	4629      	mov	r1, r5
   2920c:	4620      	mov	r0, r4
   2920e:	f003 f8cd 	bl	2c3ac <__ssprint_r>
   29212:	2800      	cmp	r0, #0
   29214:	f47f af76 	bne.w	29104 <_svfprintf_r+0x1a4>
   29218:	f1ab 0b10 	sub.w	fp, fp, #16
   2921c:	f1bb 0f10 	cmp.w	fp, #16
   29220:	9925      	ldr	r1, [sp, #148]	; 0x94
   29222:	9a24      	ldr	r2, [sp, #144]	; 0x90
   29224:	464b      	mov	r3, r9
   29226:	dce6      	bgt.n	291f6 <_svfprintf_r+0x296>
   29228:	4645      	mov	r5, r8
   2922a:	460c      	mov	r4, r1
   2922c:	4698      	mov	r8, r3
   2922e:	3201      	adds	r2, #1
   29230:	4ba9      	ldr	r3, [pc, #676]	; (294d8 <_svfprintf_r+0x578>)
   29232:	9224      	str	r2, [sp, #144]	; 0x90
   29234:	445c      	add	r4, fp
   29236:	2a07      	cmp	r2, #7
   29238:	9425      	str	r4, [sp, #148]	; 0x94
   2923a:	e888 0808 	stmia.w	r8, {r3, fp}
   2923e:	f300 84a6 	bgt.w	29b8e <_svfprintf_r+0xc2e>
   29242:	f89d 706f 	ldrb.w	r7, [sp, #111]	; 0x6f
   29246:	f108 0808 	add.w	r8, r8, #8
   2924a:	b177      	cbz	r7, 2926a <_svfprintf_r+0x30a>
   2924c:	9b24      	ldr	r3, [sp, #144]	; 0x90
   2924e:	3301      	adds	r3, #1
   29250:	3401      	adds	r4, #1
   29252:	f10d 016f 	add.w	r1, sp, #111	; 0x6f
   29256:	2201      	movs	r2, #1
   29258:	2b07      	cmp	r3, #7
   2925a:	9425      	str	r4, [sp, #148]	; 0x94
   2925c:	9324      	str	r3, [sp, #144]	; 0x90
   2925e:	e888 0006 	stmia.w	r8, {r1, r2}
   29262:	f300 83f4 	bgt.w	29a4e <_svfprintf_r+0xaee>
   29266:	f108 0808 	add.w	r8, r8, #8
   2926a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   2926c:	b16b      	cbz	r3, 2928a <_svfprintf_r+0x32a>
   2926e:	9b24      	ldr	r3, [sp, #144]	; 0x90
   29270:	3301      	adds	r3, #1
   29272:	3402      	adds	r4, #2
   29274:	a91c      	add	r1, sp, #112	; 0x70
   29276:	2202      	movs	r2, #2
   29278:	2b07      	cmp	r3, #7
   2927a:	9425      	str	r4, [sp, #148]	; 0x94
   2927c:	9324      	str	r3, [sp, #144]	; 0x90
   2927e:	e888 0006 	stmia.w	r8, {r1, r2}
   29282:	f300 83d9 	bgt.w	29a38 <_svfprintf_r+0xad8>
   29286:	f108 0808 	add.w	r8, r8, #8
   2928a:	2d80      	cmp	r5, #128	; 0x80
   2928c:	f000 8322 	beq.w	298d4 <_svfprintf_r+0x974>
   29290:	9b06      	ldr	r3, [sp, #24]
   29292:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   29294:	1a9f      	subs	r7, r3, r2
   29296:	2f00      	cmp	r7, #0
   29298:	dd36      	ble.n	29308 <_svfprintf_r+0x3a8>
   2929a:	2f10      	cmp	r7, #16
   2929c:	9b24      	ldr	r3, [sp, #144]	; 0x90
   2929e:	4d8f      	ldr	r5, [pc, #572]	; (294dc <_svfprintf_r+0x57c>)
   292a0:	dd27      	ble.n	292f2 <_svfprintf_r+0x392>
   292a2:	4642      	mov	r2, r8
   292a4:	4621      	mov	r1, r4
   292a6:	46b0      	mov	r8, r6
   292a8:	f04f 0b10 	mov.w	fp, #16
   292ac:	462e      	mov	r6, r5
   292ae:	9c08      	ldr	r4, [sp, #32]
   292b0:	9d07      	ldr	r5, [sp, #28]
   292b2:	e004      	b.n	292be <_svfprintf_r+0x35e>
   292b4:	3f10      	subs	r7, #16
   292b6:	2f10      	cmp	r7, #16
   292b8:	f102 0208 	add.w	r2, r2, #8
   292bc:	dd15      	ble.n	292ea <_svfprintf_r+0x38a>
   292be:	3301      	adds	r3, #1
   292c0:	3110      	adds	r1, #16
   292c2:	2b07      	cmp	r3, #7
   292c4:	9125      	str	r1, [sp, #148]	; 0x94
   292c6:	9324      	str	r3, [sp, #144]	; 0x90
   292c8:	e882 0840 	stmia.w	r2, {r6, fp}
   292cc:	ddf2      	ble.n	292b4 <_svfprintf_r+0x354>
   292ce:	aa23      	add	r2, sp, #140	; 0x8c
   292d0:	4629      	mov	r1, r5
   292d2:	4620      	mov	r0, r4
   292d4:	f003 f86a 	bl	2c3ac <__ssprint_r>
   292d8:	2800      	cmp	r0, #0
   292da:	f47f af13 	bne.w	29104 <_svfprintf_r+0x1a4>
   292de:	3f10      	subs	r7, #16
   292e0:	2f10      	cmp	r7, #16
   292e2:	9925      	ldr	r1, [sp, #148]	; 0x94
   292e4:	9b24      	ldr	r3, [sp, #144]	; 0x90
   292e6:	464a      	mov	r2, r9
   292e8:	dce9      	bgt.n	292be <_svfprintf_r+0x35e>
   292ea:	4635      	mov	r5, r6
   292ec:	460c      	mov	r4, r1
   292ee:	4646      	mov	r6, r8
   292f0:	4690      	mov	r8, r2
   292f2:	3301      	adds	r3, #1
   292f4:	443c      	add	r4, r7
   292f6:	2b07      	cmp	r3, #7
   292f8:	9425      	str	r4, [sp, #148]	; 0x94
   292fa:	9324      	str	r3, [sp, #144]	; 0x90
   292fc:	e888 00a0 	stmia.w	r8, {r5, r7}
   29300:	f300 838f 	bgt.w	29a22 <_svfprintf_r+0xac2>
   29304:	f108 0808 	add.w	r8, r8, #8
   29308:	9b03      	ldr	r3, [sp, #12]
   2930a:	05df      	lsls	r7, r3, #23
   2930c:	f100 8273 	bmi.w	297f6 <_svfprintf_r+0x896>
   29310:	9b24      	ldr	r3, [sp, #144]	; 0x90
   29312:	990a      	ldr	r1, [sp, #40]	; 0x28
   29314:	f8c8 6000 	str.w	r6, [r8]
   29318:	3301      	adds	r3, #1
   2931a:	440c      	add	r4, r1
   2931c:	2b07      	cmp	r3, #7
   2931e:	9425      	str	r4, [sp, #148]	; 0x94
   29320:	f8c8 1004 	str.w	r1, [r8, #4]
   29324:	9324      	str	r3, [sp, #144]	; 0x90
   29326:	f300 835b 	bgt.w	299e0 <_svfprintf_r+0xa80>
   2932a:	f108 0808 	add.w	r8, r8, #8
   2932e:	9b03      	ldr	r3, [sp, #12]
   29330:	075b      	lsls	r3, r3, #29
   29332:	d53a      	bpl.n	293aa <_svfprintf_r+0x44a>
   29334:	9b09      	ldr	r3, [sp, #36]	; 0x24
   29336:	9a04      	ldr	r2, [sp, #16]
   29338:	1a9d      	subs	r5, r3, r2
   2933a:	2d00      	cmp	r5, #0
   2933c:	dd35      	ble.n	293aa <_svfprintf_r+0x44a>
   2933e:	2d10      	cmp	r5, #16
   29340:	9b24      	ldr	r3, [sp, #144]	; 0x90
   29342:	dd20      	ble.n	29386 <_svfprintf_r+0x426>
   29344:	2610      	movs	r6, #16
   29346:	9f08      	ldr	r7, [sp, #32]
   29348:	f8dd b01c 	ldr.w	fp, [sp, #28]
   2934c:	e004      	b.n	29358 <_svfprintf_r+0x3f8>
   2934e:	3d10      	subs	r5, #16
   29350:	2d10      	cmp	r5, #16
   29352:	f108 0808 	add.w	r8, r8, #8
   29356:	dd16      	ble.n	29386 <_svfprintf_r+0x426>
   29358:	3301      	adds	r3, #1
   2935a:	4a5f      	ldr	r2, [pc, #380]	; (294d8 <_svfprintf_r+0x578>)
   2935c:	9324      	str	r3, [sp, #144]	; 0x90
   2935e:	3410      	adds	r4, #16
   29360:	2b07      	cmp	r3, #7
   29362:	9425      	str	r4, [sp, #148]	; 0x94
   29364:	e888 0044 	stmia.w	r8, {r2, r6}
   29368:	ddf1      	ble.n	2934e <_svfprintf_r+0x3ee>
   2936a:	aa23      	add	r2, sp, #140	; 0x8c
   2936c:	4659      	mov	r1, fp
   2936e:	4638      	mov	r0, r7
   29370:	f003 f81c 	bl	2c3ac <__ssprint_r>
   29374:	2800      	cmp	r0, #0
   29376:	f47f aec5 	bne.w	29104 <_svfprintf_r+0x1a4>
   2937a:	3d10      	subs	r5, #16
   2937c:	2d10      	cmp	r5, #16
   2937e:	9c25      	ldr	r4, [sp, #148]	; 0x94
   29380:	9b24      	ldr	r3, [sp, #144]	; 0x90
   29382:	46c8      	mov	r8, r9
   29384:	dce8      	bgt.n	29358 <_svfprintf_r+0x3f8>
   29386:	3301      	adds	r3, #1
   29388:	4a53      	ldr	r2, [pc, #332]	; (294d8 <_svfprintf_r+0x578>)
   2938a:	9324      	str	r3, [sp, #144]	; 0x90
   2938c:	442c      	add	r4, r5
   2938e:	2b07      	cmp	r3, #7
   29390:	9425      	str	r4, [sp, #148]	; 0x94
   29392:	e888 0024 	stmia.w	r8, {r2, r5}
   29396:	dd08      	ble.n	293aa <_svfprintf_r+0x44a>
   29398:	aa23      	add	r2, sp, #140	; 0x8c
   2939a:	9907      	ldr	r1, [sp, #28]
   2939c:	9808      	ldr	r0, [sp, #32]
   2939e:	f003 f805 	bl	2c3ac <__ssprint_r>
   293a2:	2800      	cmp	r0, #0
   293a4:	f47f aeae 	bne.w	29104 <_svfprintf_r+0x1a4>
   293a8:	9c25      	ldr	r4, [sp, #148]	; 0x94
   293aa:	9b05      	ldr	r3, [sp, #20]
   293ac:	9a09      	ldr	r2, [sp, #36]	; 0x24
   293ae:	9904      	ldr	r1, [sp, #16]
   293b0:	428a      	cmp	r2, r1
   293b2:	bfac      	ite	ge
   293b4:	189b      	addge	r3, r3, r2
   293b6:	185b      	addlt	r3, r3, r1
   293b8:	9305      	str	r3, [sp, #20]
   293ba:	2c00      	cmp	r4, #0
   293bc:	f040 831b 	bne.w	299f6 <_svfprintf_r+0xa96>
   293c0:	2300      	movs	r3, #0
   293c2:	9324      	str	r3, [sp, #144]	; 0x90
   293c4:	46c8      	mov	r8, r9
   293c6:	e5f2      	b.n	28fae <_svfprintf_r+0x4e>
   293c8:	930d      	str	r3, [sp, #52]	; 0x34
   293ca:	f01b 0320 	ands.w	r3, fp, #32
   293ce:	f040 81de 	bne.w	2978e <_svfprintf_r+0x82e>
   293d2:	f01b 0210 	ands.w	r2, fp, #16
   293d6:	f040 842d 	bne.w	29c34 <_svfprintf_r+0xcd4>
   293da:	f01b 0340 	ands.w	r3, fp, #64	; 0x40
   293de:	f000 8429 	beq.w	29c34 <_svfprintf_r+0xcd4>
   293e2:	990b      	ldr	r1, [sp, #44]	; 0x2c
   293e4:	4613      	mov	r3, r2
   293e6:	460a      	mov	r2, r1
   293e8:	3204      	adds	r2, #4
   293ea:	880c      	ldrh	r4, [r1, #0]
   293ec:	920b      	str	r2, [sp, #44]	; 0x2c
   293ee:	2500      	movs	r5, #0
   293f0:	e6a9      	b.n	29146 <_svfprintf_r+0x1e6>
   293f2:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
   293f4:	930d      	str	r3, [sp, #52]	; 0x34
   293f6:	6816      	ldr	r6, [r2, #0]
   293f8:	2400      	movs	r4, #0
   293fa:	f88d 406f 	strb.w	r4, [sp, #111]	; 0x6f
   293fe:	1d15      	adds	r5, r2, #4
   29400:	2e00      	cmp	r6, #0
   29402:	f000 86b5 	beq.w	2a170 <_svfprintf_r+0x1210>
   29406:	9a06      	ldr	r2, [sp, #24]
   29408:	1c53      	adds	r3, r2, #1
   2940a:	f000 8617 	beq.w	2a03c <_svfprintf_r+0x10dc>
   2940e:	4621      	mov	r1, r4
   29410:	4630      	mov	r0, r6
   29412:	f7fe fba5 	bl	27b60 <memchr>
   29416:	2800      	cmp	r0, #0
   29418:	f000 8708 	beq.w	2a22c <_svfprintf_r+0x12cc>
   2941c:	1b83      	subs	r3, r0, r6
   2941e:	930a      	str	r3, [sp, #40]	; 0x28
   29420:	9406      	str	r4, [sp, #24]
   29422:	950b      	str	r5, [sp, #44]	; 0x2c
   29424:	f8cd b00c 	str.w	fp, [sp, #12]
   29428:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
   2942c:	9304      	str	r3, [sp, #16]
   2942e:	940e      	str	r4, [sp, #56]	; 0x38
   29430:	f89d 706f 	ldrb.w	r7, [sp, #111]	; 0x6f
   29434:	e6ac      	b.n	29190 <_svfprintf_r+0x230>
   29436:	f89a 3000 	ldrb.w	r3, [sl]
   2943a:	2201      	movs	r2, #1
   2943c:	212b      	movs	r1, #43	; 0x2b
   2943e:	e5e7      	b.n	29010 <_svfprintf_r+0xb0>
   29440:	f04b 0b20 	orr.w	fp, fp, #32
   29444:	f89a 3000 	ldrb.w	r3, [sl]
   29448:	e5e2      	b.n	29010 <_svfprintf_r+0xb0>
   2944a:	930d      	str	r3, [sp, #52]	; 0x34
   2944c:	2a00      	cmp	r2, #0
   2944e:	f040 87aa 	bne.w	2a3a6 <_svfprintf_r+0x1446>
   29452:	4b23      	ldr	r3, [pc, #140]	; (294e0 <_svfprintf_r+0x580>)
   29454:	9312      	str	r3, [sp, #72]	; 0x48
   29456:	f01b 0f20 	tst.w	fp, #32
   2945a:	f040 8112 	bne.w	29682 <_svfprintf_r+0x722>
   2945e:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
   29460:	f01b 0f10 	tst.w	fp, #16
   29464:	4613      	mov	r3, r2
   29466:	f040 83e0 	bne.w	29c2a <_svfprintf_r+0xcca>
   2946a:	f01b 0f40 	tst.w	fp, #64	; 0x40
   2946e:	f000 83dc 	beq.w	29c2a <_svfprintf_r+0xcca>
   29472:	3304      	adds	r3, #4
   29474:	8814      	ldrh	r4, [r2, #0]
   29476:	930b      	str	r3, [sp, #44]	; 0x2c
   29478:	2500      	movs	r5, #0
   2947a:	f01b 0f01 	tst.w	fp, #1
   2947e:	f000 810d 	beq.w	2969c <_svfprintf_r+0x73c>
   29482:	ea54 0305 	orrs.w	r3, r4, r5
   29486:	f000 8109 	beq.w	2969c <_svfprintf_r+0x73c>
   2948a:	2330      	movs	r3, #48	; 0x30
   2948c:	f89d 2034 	ldrb.w	r2, [sp, #52]	; 0x34
   29490:	f88d 3070 	strb.w	r3, [sp, #112]	; 0x70
   29494:	f88d 2071 	strb.w	r2, [sp, #113]	; 0x71
   29498:	f04b 0b02 	orr.w	fp, fp, #2
   2949c:	2302      	movs	r3, #2
   2949e:	e652      	b.n	29146 <_svfprintf_r+0x1e6>
   294a0:	f89a 3000 	ldrb.w	r3, [sl]
   294a4:	2900      	cmp	r1, #0
   294a6:	f47f adb3 	bne.w	29010 <_svfprintf_r+0xb0>
   294aa:	2201      	movs	r2, #1
   294ac:	2120      	movs	r1, #32
   294ae:	e5af      	b.n	29010 <_svfprintf_r+0xb0>
   294b0:	f04b 0b01 	orr.w	fp, fp, #1
   294b4:	f89a 3000 	ldrb.w	r3, [sl]
   294b8:	e5aa      	b.n	29010 <_svfprintf_r+0xb0>
   294ba:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
   294bc:	6823      	ldr	r3, [r4, #0]
   294be:	9309      	str	r3, [sp, #36]	; 0x24
   294c0:	4618      	mov	r0, r3
   294c2:	2800      	cmp	r0, #0
   294c4:	4623      	mov	r3, r4
   294c6:	f103 0304 	add.w	r3, r3, #4
   294ca:	f6ff ae03 	blt.w	290d4 <_svfprintf_r+0x174>
   294ce:	930b      	str	r3, [sp, #44]	; 0x2c
   294d0:	f89a 3000 	ldrb.w	r3, [sl]
   294d4:	e59c      	b.n	29010 <_svfprintf_r+0xb0>
   294d6:	bf00      	nop
   294d8:	0002ee1c 	.word	0x0002ee1c
   294dc:	0002ee2c 	.word	0x0002ee2c
   294e0:	0002edfc 	.word	0x0002edfc
   294e4:	f04b 0b10 	orr.w	fp, fp, #16
   294e8:	f01b 0f20 	tst.w	fp, #32
   294ec:	930d      	str	r3, [sp, #52]	; 0x34
   294ee:	f43f ae1b 	beq.w	29128 <_svfprintf_r+0x1c8>
   294f2:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
   294f4:	3507      	adds	r5, #7
   294f6:	f025 0307 	bic.w	r3, r5, #7
   294fa:	f103 0208 	add.w	r2, r3, #8
   294fe:	e9d3 4500 	ldrd	r4, r5, [r3]
   29502:	920b      	str	r2, [sp, #44]	; 0x2c
   29504:	2301      	movs	r3, #1
   29506:	e61e      	b.n	29146 <_svfprintf_r+0x1e6>
   29508:	f89a 3000 	ldrb.w	r3, [sl]
   2950c:	2b2a      	cmp	r3, #42	; 0x2a
   2950e:	f10a 0401 	add.w	r4, sl, #1
   29512:	f000 873b 	beq.w	2a38c <_svfprintf_r+0x142c>
   29516:	f1a3 0030 	sub.w	r0, r3, #48	; 0x30
   2951a:	2809      	cmp	r0, #9
   2951c:	46a2      	mov	sl, r4
   2951e:	f200 8691 	bhi.w	2a244 <_svfprintf_r+0x12e4>
   29522:	2300      	movs	r3, #0
   29524:	461c      	mov	r4, r3
   29526:	f81a 3b01 	ldrb.w	r3, [sl], #1
   2952a:	eb04 0484 	add.w	r4, r4, r4, lsl #2
   2952e:	eb00 0444 	add.w	r4, r0, r4, lsl #1
   29532:	f1a3 0030 	sub.w	r0, r3, #48	; 0x30
   29536:	2809      	cmp	r0, #9
   29538:	d9f5      	bls.n	29526 <_svfprintf_r+0x5c6>
   2953a:	9406      	str	r4, [sp, #24]
   2953c:	e56a      	b.n	29014 <_svfprintf_r+0xb4>
   2953e:	f04b 0b80 	orr.w	fp, fp, #128	; 0x80
   29542:	f89a 3000 	ldrb.w	r3, [sl]
   29546:	e563      	b.n	29010 <_svfprintf_r+0xb0>
   29548:	f04b 0b40 	orr.w	fp, fp, #64	; 0x40
   2954c:	f89a 3000 	ldrb.w	r3, [sl]
   29550:	e55e      	b.n	29010 <_svfprintf_r+0xb0>
   29552:	f89a 3000 	ldrb.w	r3, [sl]
   29556:	2b6c      	cmp	r3, #108	; 0x6c
   29558:	bf03      	ittte	eq
   2955a:	f89a 3001 	ldrbeq.w	r3, [sl, #1]
   2955e:	f04b 0b20 	orreq.w	fp, fp, #32
   29562:	f10a 0a01 	addeq.w	sl, sl, #1
   29566:	f04b 0b10 	orrne.w	fp, fp, #16
   2956a:	e551      	b.n	29010 <_svfprintf_r+0xb0>
   2956c:	2a00      	cmp	r2, #0
   2956e:	f040 871e 	bne.w	2a3ae <_svfprintf_r+0x144e>
   29572:	f01b 0f20 	tst.w	fp, #32
   29576:	f040 8509 	bne.w	29f8c <_svfprintf_r+0x102c>
   2957a:	f01b 0f10 	tst.w	fp, #16
   2957e:	f040 84bc 	bne.w	29efa <_svfprintf_r+0xf9a>
   29582:	f01b 0f40 	tst.w	fp, #64	; 0x40
   29586:	f000 84b8 	beq.w	29efa <_svfprintf_r+0xf9a>
   2958a:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
   2958c:	6813      	ldr	r3, [r2, #0]
   2958e:	3204      	adds	r2, #4
   29590:	920b      	str	r2, [sp, #44]	; 0x2c
   29592:	f8bd 2014 	ldrh.w	r2, [sp, #20]
   29596:	801a      	strh	r2, [r3, #0]
   29598:	e509      	b.n	28fae <_svfprintf_r+0x4e>
   2959a:	990b      	ldr	r1, [sp, #44]	; 0x2c
   2959c:	4bb9      	ldr	r3, [pc, #740]	; (29884 <_svfprintf_r+0x924>)
   2959e:	680c      	ldr	r4, [r1, #0]
   295a0:	9312      	str	r3, [sp, #72]	; 0x48
   295a2:	2230      	movs	r2, #48	; 0x30
   295a4:	2378      	movs	r3, #120	; 0x78
   295a6:	3104      	adds	r1, #4
   295a8:	f88d 3071 	strb.w	r3, [sp, #113]	; 0x71
   295ac:	930d      	str	r3, [sp, #52]	; 0x34
   295ae:	f04b 0b02 	orr.w	fp, fp, #2
   295b2:	910b      	str	r1, [sp, #44]	; 0x2c
   295b4:	2500      	movs	r5, #0
   295b6:	f88d 2070 	strb.w	r2, [sp, #112]	; 0x70
   295ba:	2302      	movs	r3, #2
   295bc:	e5c3      	b.n	29146 <_svfprintf_r+0x1e6>
   295be:	990b      	ldr	r1, [sp, #44]	; 0x2c
   295c0:	930d      	str	r3, [sp, #52]	; 0x34
   295c2:	680a      	ldr	r2, [r1, #0]
   295c4:	f88d 2098 	strb.w	r2, [sp, #152]	; 0x98
   295c8:	2300      	movs	r3, #0
   295ca:	460a      	mov	r2, r1
   295cc:	461f      	mov	r7, r3
   295ce:	f88d 306f 	strb.w	r3, [sp, #111]	; 0x6f
   295d2:	3204      	adds	r2, #4
   295d4:	2301      	movs	r3, #1
   295d6:	9304      	str	r3, [sp, #16]
   295d8:	f8cd b00c 	str.w	fp, [sp, #12]
   295dc:	9706      	str	r7, [sp, #24]
   295de:	970e      	str	r7, [sp, #56]	; 0x38
   295e0:	920b      	str	r2, [sp, #44]	; 0x2c
   295e2:	930a      	str	r3, [sp, #40]	; 0x28
   295e4:	ae26      	add	r6, sp, #152	; 0x98
   295e6:	e5d7      	b.n	29198 <_svfprintf_r+0x238>
   295e8:	930d      	str	r3, [sp, #52]	; 0x34
   295ea:	2a00      	cmp	r2, #0
   295ec:	f040 86fe 	bne.w	2a3ec <_svfprintf_r+0x148c>
   295f0:	f01b 0f20 	tst.w	fp, #32
   295f4:	d15d      	bne.n	296b2 <_svfprintf_r+0x752>
   295f6:	f01b 0f10 	tst.w	fp, #16
   295fa:	f040 8335 	bne.w	29c68 <_svfprintf_r+0xd08>
   295fe:	f01b 0f40 	tst.w	fp, #64	; 0x40
   29602:	f000 8331 	beq.w	29c68 <_svfprintf_r+0xd08>
   29606:	990b      	ldr	r1, [sp, #44]	; 0x2c
   29608:	f9b1 4000 	ldrsh.w	r4, [r1]
   2960c:	3104      	adds	r1, #4
   2960e:	17e5      	asrs	r5, r4, #31
   29610:	4622      	mov	r2, r4
   29612:	462b      	mov	r3, r5
   29614:	910b      	str	r1, [sp, #44]	; 0x2c
   29616:	2a00      	cmp	r2, #0
   29618:	f173 0300 	sbcs.w	r3, r3, #0
   2961c:	db58      	blt.n	296d0 <_svfprintf_r+0x770>
   2961e:	9906      	ldr	r1, [sp, #24]
   29620:	f89d 706f 	ldrb.w	r7, [sp, #111]	; 0x6f
   29624:	1c4a      	adds	r2, r1, #1
   29626:	f04f 0301 	mov.w	r3, #1
   2962a:	f47f ad93 	bne.w	29154 <_svfprintf_r+0x1f4>
   2962e:	ea54 0205 	orrs.w	r2, r4, r5
   29632:	f000 81ec 	beq.w	29a0e <_svfprintf_r+0xaae>
   29636:	f8cd b00c 	str.w	fp, [sp, #12]
   2963a:	2b01      	cmp	r3, #1
   2963c:	f000 8283 	beq.w	29b46 <_svfprintf_r+0xbe6>
   29640:	2b02      	cmp	r3, #2
   29642:	f040 8213 	bne.w	29a6c <_svfprintf_r+0xb0c>
   29646:	9812      	ldr	r0, [sp, #72]	; 0x48
   29648:	464e      	mov	r6, r9
   2964a:	0923      	lsrs	r3, r4, #4
   2964c:	f004 010f 	and.w	r1, r4, #15
   29650:	ea43 7305 	orr.w	r3, r3, r5, lsl #28
   29654:	092a      	lsrs	r2, r5, #4
   29656:	461c      	mov	r4, r3
   29658:	4615      	mov	r5, r2
   2965a:	5c43      	ldrb	r3, [r0, r1]
   2965c:	f806 3d01 	strb.w	r3, [r6, #-1]!
   29660:	ea54 0305 	orrs.w	r3, r4, r5
   29664:	d1f1      	bne.n	2964a <_svfprintf_r+0x6ea>
   29666:	eba9 0306 	sub.w	r3, r9, r6
   2966a:	930a      	str	r3, [sp, #40]	; 0x28
   2966c:	e588      	b.n	29180 <_svfprintf_r+0x220>
   2966e:	930d      	str	r3, [sp, #52]	; 0x34
   29670:	2a00      	cmp	r2, #0
   29672:	f040 86b7 	bne.w	2a3e4 <_svfprintf_r+0x1484>
   29676:	4b84      	ldr	r3, [pc, #528]	; (29888 <_svfprintf_r+0x928>)
   29678:	9312      	str	r3, [sp, #72]	; 0x48
   2967a:	f01b 0f20 	tst.w	fp, #32
   2967e:	f43f aeee 	beq.w	2945e <_svfprintf_r+0x4fe>
   29682:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
   29684:	3507      	adds	r5, #7
   29686:	f025 0307 	bic.w	r3, r5, #7
   2968a:	f103 0208 	add.w	r2, r3, #8
   2968e:	f01b 0f01 	tst.w	fp, #1
   29692:	920b      	str	r2, [sp, #44]	; 0x2c
   29694:	e9d3 4500 	ldrd	r4, r5, [r3]
   29698:	f47f aef3 	bne.w	29482 <_svfprintf_r+0x522>
   2969c:	2302      	movs	r3, #2
   2969e:	e552      	b.n	29146 <_svfprintf_r+0x1e6>
   296a0:	930d      	str	r3, [sp, #52]	; 0x34
   296a2:	2a00      	cmp	r2, #0
   296a4:	f040 869a 	bne.w	2a3dc <_svfprintf_r+0x147c>
   296a8:	f04b 0b10 	orr.w	fp, fp, #16
   296ac:	f01b 0f20 	tst.w	fp, #32
   296b0:	d0a1      	beq.n	295f6 <_svfprintf_r+0x696>
   296b2:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
   296b4:	3507      	adds	r5, #7
   296b6:	f025 0507 	bic.w	r5, r5, #7
   296ba:	e9d5 2300 	ldrd	r2, r3, [r5]
   296be:	2a00      	cmp	r2, #0
   296c0:	f105 0108 	add.w	r1, r5, #8
   296c4:	461d      	mov	r5, r3
   296c6:	f173 0300 	sbcs.w	r3, r3, #0
   296ca:	910b      	str	r1, [sp, #44]	; 0x2c
   296cc:	4614      	mov	r4, r2
   296ce:	daa6      	bge.n	2961e <_svfprintf_r+0x6be>
   296d0:	272d      	movs	r7, #45	; 0x2d
   296d2:	4264      	negs	r4, r4
   296d4:	eb65 0545 	sbc.w	r5, r5, r5, lsl #1
   296d8:	f88d 706f 	strb.w	r7, [sp, #111]	; 0x6f
   296dc:	2301      	movs	r3, #1
   296de:	e535      	b.n	2914c <_svfprintf_r+0x1ec>
   296e0:	930d      	str	r3, [sp, #52]	; 0x34
   296e2:	2a00      	cmp	r2, #0
   296e4:	f040 8676 	bne.w	2a3d4 <_svfprintf_r+0x1474>
   296e8:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
   296ea:	f01b 0f08 	tst.w	fp, #8
   296ee:	f105 0507 	add.w	r5, r5, #7
   296f2:	f000 83e8 	beq.w	29ec6 <_svfprintf_r+0xf66>
   296f6:	f025 0307 	bic.w	r3, r5, #7
   296fa:	ed93 7b00 	vldr	d7, [r3]
   296fe:	ed8d 7b10 	vstr	d7, [sp, #64]	; 0x40
   29702:	f103 0208 	add.w	r2, r3, #8
   29706:	920b      	str	r2, [sp, #44]	; 0x2c
   29708:	e9dd 1210 	ldrd	r1, r2, [sp, #64]	; 0x40
   2970c:	f022 4300 	bic.w	r3, r2, #2147483648	; 0x80000000
   29710:	9116      	str	r1, [sp, #88]	; 0x58
   29712:	9317      	str	r3, [sp, #92]	; 0x5c
   29714:	e9dd 4516 	ldrd	r4, r5, [sp, #88]	; 0x58
   29718:	f04f 32ff 	mov.w	r2, #4294967295
   2971c:	4620      	mov	r0, r4
   2971e:	4629      	mov	r1, r5
   29720:	4b5a      	ldr	r3, [pc, #360]	; (2988c <_svfprintf_r+0x92c>)
   29722:	f003 f819 	bl	2c758 <__aeabi_dcmpun>
   29726:	2800      	cmp	r0, #0
   29728:	f040 834f 	bne.w	29dca <_svfprintf_r+0xe6a>
   2972c:	f04f 32ff 	mov.w	r2, #4294967295
   29730:	4b56      	ldr	r3, [pc, #344]	; (2988c <_svfprintf_r+0x92c>)
   29732:	4620      	mov	r0, r4
   29734:	4629      	mov	r1, r5
   29736:	f7fc f94d 	bl	259d4 <__aeabi_dcmple>
   2973a:	2800      	cmp	r0, #0
   2973c:	f040 8345 	bne.w	29dca <_svfprintf_r+0xe6a>
   29740:	2200      	movs	r2, #0
   29742:	2300      	movs	r3, #0
   29744:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
   29748:	f7fc f93a 	bl	259c0 <__aeabi_dcmplt>
   2974c:	2800      	cmp	r0, #0
   2974e:	f040 8533 	bne.w	2a1b8 <_svfprintf_r+0x1258>
   29752:	f89d 706f 	ldrb.w	r7, [sp, #111]	; 0x6f
   29756:	4e4e      	ldr	r6, [pc, #312]	; (29890 <_svfprintf_r+0x930>)
   29758:	4b4e      	ldr	r3, [pc, #312]	; (29894 <_svfprintf_r+0x934>)
   2975a:	f02b 0080 	bic.w	r0, fp, #128	; 0x80
   2975e:	9003      	str	r0, [sp, #12]
   29760:	980d      	ldr	r0, [sp, #52]	; 0x34
   29762:	2203      	movs	r2, #3
   29764:	2100      	movs	r1, #0
   29766:	9204      	str	r2, [sp, #16]
   29768:	9106      	str	r1, [sp, #24]
   2976a:	2847      	cmp	r0, #71	; 0x47
   2976c:	bfd8      	it	le
   2976e:	461e      	movle	r6, r3
   29770:	920a      	str	r2, [sp, #40]	; 0x28
   29772:	910e      	str	r1, [sp, #56]	; 0x38
   29774:	e50c      	b.n	29190 <_svfprintf_r+0x230>
   29776:	f04b 0b08 	orr.w	fp, fp, #8
   2977a:	f89a 3000 	ldrb.w	r3, [sl]
   2977e:	e447      	b.n	29010 <_svfprintf_r+0xb0>
   29780:	f04b 0b10 	orr.w	fp, fp, #16
   29784:	930d      	str	r3, [sp, #52]	; 0x34
   29786:	f01b 0320 	ands.w	r3, fp, #32
   2978a:	f43f ae22 	beq.w	293d2 <_svfprintf_r+0x472>
   2978e:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
   29790:	3507      	adds	r5, #7
   29792:	f025 0307 	bic.w	r3, r5, #7
   29796:	f103 0208 	add.w	r2, r3, #8
   2979a:	e9d3 4500 	ldrd	r4, r5, [r3]
   2979e:	920b      	str	r2, [sp, #44]	; 0x2c
   297a0:	2300      	movs	r3, #0
   297a2:	e4d0      	b.n	29146 <_svfprintf_r+0x1e6>
   297a4:	f1a3 0030 	sub.w	r0, r3, #48	; 0x30
   297a8:	2300      	movs	r3, #0
   297aa:	461c      	mov	r4, r3
   297ac:	f81a 3b01 	ldrb.w	r3, [sl], #1
   297b0:	eb04 0484 	add.w	r4, r4, r4, lsl #2
   297b4:	eb00 0444 	add.w	r4, r0, r4, lsl #1
   297b8:	f1a3 0030 	sub.w	r0, r3, #48	; 0x30
   297bc:	2809      	cmp	r0, #9
   297be:	d9f5      	bls.n	297ac <_svfprintf_r+0x84c>
   297c0:	9409      	str	r4, [sp, #36]	; 0x24
   297c2:	e427      	b.n	29014 <_svfprintf_r+0xb4>
   297c4:	930d      	str	r3, [sp, #52]	; 0x34
   297c6:	2a00      	cmp	r2, #0
   297c8:	f040 85f5 	bne.w	2a3b6 <_svfprintf_r+0x1456>
   297cc:	9a0d      	ldr	r2, [sp, #52]	; 0x34
   297ce:	2a00      	cmp	r2, #0
   297d0:	f43f ac91 	beq.w	290f6 <_svfprintf_r+0x196>
   297d4:	2300      	movs	r3, #0
   297d6:	2101      	movs	r1, #1
   297d8:	461f      	mov	r7, r3
   297da:	9104      	str	r1, [sp, #16]
   297dc:	f88d 2098 	strb.w	r2, [sp, #152]	; 0x98
   297e0:	f8cd b00c 	str.w	fp, [sp, #12]
   297e4:	f88d 306f 	strb.w	r3, [sp, #111]	; 0x6f
   297e8:	9306      	str	r3, [sp, #24]
   297ea:	930e      	str	r3, [sp, #56]	; 0x38
   297ec:	910a      	str	r1, [sp, #40]	; 0x28
   297ee:	ae26      	add	r6, sp, #152	; 0x98
   297f0:	e4d2      	b.n	29198 <_svfprintf_r+0x238>
   297f2:	9c25      	ldr	r4, [sp, #148]	; 0x94
   297f4:	e529      	b.n	2924a <_svfprintf_r+0x2ea>
   297f6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   297f8:	2b65      	cmp	r3, #101	; 0x65
   297fa:	f340 80a9 	ble.w	29950 <_svfprintf_r+0x9f0>
   297fe:	2200      	movs	r2, #0
   29800:	2300      	movs	r3, #0
   29802:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
   29806:	f7fc f8d1 	bl	259ac <__aeabi_dcmpeq>
   2980a:	2800      	cmp	r0, #0
   2980c:	f000 8152 	beq.w	29ab4 <_svfprintf_r+0xb54>
   29810:	9b24      	ldr	r3, [sp, #144]	; 0x90
   29812:	4a21      	ldr	r2, [pc, #132]	; (29898 <_svfprintf_r+0x938>)
   29814:	f8c8 2000 	str.w	r2, [r8]
   29818:	3301      	adds	r3, #1
   2981a:	3401      	adds	r4, #1
   2981c:	2201      	movs	r2, #1
   2981e:	2b07      	cmp	r3, #7
   29820:	9425      	str	r4, [sp, #148]	; 0x94
   29822:	9324      	str	r3, [sp, #144]	; 0x90
   29824:	f8c8 2004 	str.w	r2, [r8, #4]
   29828:	f300 836f 	bgt.w	29f0a <_svfprintf_r+0xfaa>
   2982c:	f108 0808 	add.w	r8, r8, #8
   29830:	9b1d      	ldr	r3, [sp, #116]	; 0x74
   29832:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
   29834:	9c25      	ldr	r4, [sp, #148]	; 0x94
   29836:	4293      	cmp	r3, r2
   29838:	db03      	blt.n	29842 <_svfprintf_r+0x8e2>
   2983a:	9b03      	ldr	r3, [sp, #12]
   2983c:	07dd      	lsls	r5, r3, #31
   2983e:	f57f ad76 	bpl.w	2932e <_svfprintf_r+0x3ce>
   29842:	9b24      	ldr	r3, [sp, #144]	; 0x90
   29844:	9913      	ldr	r1, [sp, #76]	; 0x4c
   29846:	9a14      	ldr	r2, [sp, #80]	; 0x50
   29848:	f8c8 2000 	str.w	r2, [r8]
   2984c:	3301      	adds	r3, #1
   2984e:	440c      	add	r4, r1
   29850:	2b07      	cmp	r3, #7
   29852:	f8c8 1004 	str.w	r1, [r8, #4]
   29856:	9425      	str	r4, [sp, #148]	; 0x94
   29858:	9324      	str	r3, [sp, #144]	; 0x90
   2985a:	f300 83a3 	bgt.w	29fa4 <_svfprintf_r+0x1044>
   2985e:	f108 0808 	add.w	r8, r8, #8
   29862:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   29864:	1e5e      	subs	r6, r3, #1
   29866:	2e00      	cmp	r6, #0
   29868:	f77f ad61 	ble.w	2932e <_svfprintf_r+0x3ce>
   2986c:	2e10      	cmp	r6, #16
   2986e:	9b24      	ldr	r3, [sp, #144]	; 0x90
   29870:	4d0a      	ldr	r5, [pc, #40]	; (2989c <_svfprintf_r+0x93c>)
   29872:	f340 81ef 	ble.w	29c54 <_svfprintf_r+0xcf4>
   29876:	4622      	mov	r2, r4
   29878:	2710      	movs	r7, #16
   2987a:	f8dd b020 	ldr.w	fp, [sp, #32]
   2987e:	9c07      	ldr	r4, [sp, #28]
   29880:	e014      	b.n	298ac <_svfprintf_r+0x94c>
   29882:	bf00      	nop
   29884:	0002edfc 	.word	0x0002edfc
   29888:	0002ede8 	.word	0x0002ede8
   2988c:	7fefffff 	.word	0x7fefffff
   29890:	0002eddc 	.word	0x0002eddc
   29894:	0002edd8 	.word	0x0002edd8
   29898:	0002ee18 	.word	0x0002ee18
   2989c:	0002ee2c 	.word	0x0002ee2c
   298a0:	f108 0808 	add.w	r8, r8, #8
   298a4:	3e10      	subs	r6, #16
   298a6:	2e10      	cmp	r6, #16
   298a8:	f340 81d3 	ble.w	29c52 <_svfprintf_r+0xcf2>
   298ac:	3301      	adds	r3, #1
   298ae:	3210      	adds	r2, #16
   298b0:	2b07      	cmp	r3, #7
   298b2:	9225      	str	r2, [sp, #148]	; 0x94
   298b4:	9324      	str	r3, [sp, #144]	; 0x90
   298b6:	e888 00a0 	stmia.w	r8, {r5, r7}
   298ba:	ddf1      	ble.n	298a0 <_svfprintf_r+0x940>
   298bc:	aa23      	add	r2, sp, #140	; 0x8c
   298be:	4621      	mov	r1, r4
   298c0:	4658      	mov	r0, fp
   298c2:	f002 fd73 	bl	2c3ac <__ssprint_r>
   298c6:	2800      	cmp	r0, #0
   298c8:	f47f ac1c 	bne.w	29104 <_svfprintf_r+0x1a4>
   298cc:	9a25      	ldr	r2, [sp, #148]	; 0x94
   298ce:	9b24      	ldr	r3, [sp, #144]	; 0x90
   298d0:	46c8      	mov	r8, r9
   298d2:	e7e7      	b.n	298a4 <_svfprintf_r+0x944>
   298d4:	9b09      	ldr	r3, [sp, #36]	; 0x24
   298d6:	9a04      	ldr	r2, [sp, #16]
   298d8:	1a9f      	subs	r7, r3, r2
   298da:	2f00      	cmp	r7, #0
   298dc:	f77f acd8 	ble.w	29290 <_svfprintf_r+0x330>
   298e0:	2f10      	cmp	r7, #16
   298e2:	9b24      	ldr	r3, [sp, #144]	; 0x90
   298e4:	4db7      	ldr	r5, [pc, #732]	; (29bc4 <_svfprintf_r+0xc64>)
   298e6:	dd27      	ble.n	29938 <_svfprintf_r+0x9d8>
   298e8:	4642      	mov	r2, r8
   298ea:	4621      	mov	r1, r4
   298ec:	46b0      	mov	r8, r6
   298ee:	f04f 0b10 	mov.w	fp, #16
   298f2:	462e      	mov	r6, r5
   298f4:	9c08      	ldr	r4, [sp, #32]
   298f6:	9d07      	ldr	r5, [sp, #28]
   298f8:	e004      	b.n	29904 <_svfprintf_r+0x9a4>
   298fa:	3f10      	subs	r7, #16
   298fc:	2f10      	cmp	r7, #16
   298fe:	f102 0208 	add.w	r2, r2, #8
   29902:	dd15      	ble.n	29930 <_svfprintf_r+0x9d0>
   29904:	3301      	adds	r3, #1
   29906:	3110      	adds	r1, #16
   29908:	2b07      	cmp	r3, #7
   2990a:	9125      	str	r1, [sp, #148]	; 0x94
   2990c:	9324      	str	r3, [sp, #144]	; 0x90
   2990e:	e882 0840 	stmia.w	r2, {r6, fp}
   29912:	ddf2      	ble.n	298fa <_svfprintf_r+0x99a>
   29914:	aa23      	add	r2, sp, #140	; 0x8c
   29916:	4629      	mov	r1, r5
   29918:	4620      	mov	r0, r4
   2991a:	f002 fd47 	bl	2c3ac <__ssprint_r>
   2991e:	2800      	cmp	r0, #0
   29920:	f47f abf0 	bne.w	29104 <_svfprintf_r+0x1a4>
   29924:	3f10      	subs	r7, #16
   29926:	2f10      	cmp	r7, #16
   29928:	9925      	ldr	r1, [sp, #148]	; 0x94
   2992a:	9b24      	ldr	r3, [sp, #144]	; 0x90
   2992c:	464a      	mov	r2, r9
   2992e:	dce9      	bgt.n	29904 <_svfprintf_r+0x9a4>
   29930:	4635      	mov	r5, r6
   29932:	460c      	mov	r4, r1
   29934:	4646      	mov	r6, r8
   29936:	4690      	mov	r8, r2
   29938:	3301      	adds	r3, #1
   2993a:	443c      	add	r4, r7
   2993c:	2b07      	cmp	r3, #7
   2993e:	9425      	str	r4, [sp, #148]	; 0x94
   29940:	9324      	str	r3, [sp, #144]	; 0x90
   29942:	e888 00a0 	stmia.w	r8, {r5, r7}
   29946:	f300 8234 	bgt.w	29db2 <_svfprintf_r+0xe52>
   2994a:	f108 0808 	add.w	r8, r8, #8
   2994e:	e49f      	b.n	29290 <_svfprintf_r+0x330>
   29950:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   29952:	9f24      	ldr	r7, [sp, #144]	; 0x90
   29954:	2b01      	cmp	r3, #1
   29956:	f340 8200 	ble.w	29d5a <_svfprintf_r+0xdfa>
   2995a:	3701      	adds	r7, #1
   2995c:	3401      	adds	r4, #1
   2995e:	2301      	movs	r3, #1
   29960:	2f07      	cmp	r7, #7
   29962:	9425      	str	r4, [sp, #148]	; 0x94
   29964:	9724      	str	r7, [sp, #144]	; 0x90
   29966:	f8c8 6000 	str.w	r6, [r8]
   2996a:	f8c8 3004 	str.w	r3, [r8, #4]
   2996e:	f300 8205 	bgt.w	29d7c <_svfprintf_r+0xe1c>
   29972:	f108 0808 	add.w	r8, r8, #8
   29976:	9a13      	ldr	r2, [sp, #76]	; 0x4c
   29978:	9b14      	ldr	r3, [sp, #80]	; 0x50
   2997a:	f8c8 3000 	str.w	r3, [r8]
   2997e:	3701      	adds	r7, #1
   29980:	4414      	add	r4, r2
   29982:	2f07      	cmp	r7, #7
   29984:	9425      	str	r4, [sp, #148]	; 0x94
   29986:	9724      	str	r7, [sp, #144]	; 0x90
   29988:	f8c8 2004 	str.w	r2, [r8, #4]
   2998c:	f300 8202 	bgt.w	29d94 <_svfprintf_r+0xe34>
   29990:	f108 0808 	add.w	r8, r8, #8
   29994:	2300      	movs	r3, #0
   29996:	2200      	movs	r2, #0
   29998:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
   2999c:	f7fc f806 	bl	259ac <__aeabi_dcmpeq>
   299a0:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   299a2:	2800      	cmp	r0, #0
   299a4:	f040 8101 	bne.w	29baa <_svfprintf_r+0xc4a>
   299a8:	3b01      	subs	r3, #1
   299aa:	3701      	adds	r7, #1
   299ac:	3601      	adds	r6, #1
   299ae:	441c      	add	r4, r3
   299b0:	2f07      	cmp	r7, #7
   299b2:	9724      	str	r7, [sp, #144]	; 0x90
   299b4:	9425      	str	r4, [sp, #148]	; 0x94
   299b6:	f8c8 6000 	str.w	r6, [r8]
   299ba:	f8c8 3004 	str.w	r3, [r8, #4]
   299be:	f300 8128 	bgt.w	29c12 <_svfprintf_r+0xcb2>
   299c2:	f108 0808 	add.w	r8, r8, #8
   299c6:	9a15      	ldr	r2, [sp, #84]	; 0x54
   299c8:	f8c8 2004 	str.w	r2, [r8, #4]
   299cc:	3701      	adds	r7, #1
   299ce:	4414      	add	r4, r2
   299d0:	ab1f      	add	r3, sp, #124	; 0x7c
   299d2:	2f07      	cmp	r7, #7
   299d4:	9425      	str	r4, [sp, #148]	; 0x94
   299d6:	9724      	str	r7, [sp, #144]	; 0x90
   299d8:	f8c8 3000 	str.w	r3, [r8]
   299dc:	f77f aca5 	ble.w	2932a <_svfprintf_r+0x3ca>
   299e0:	aa23      	add	r2, sp, #140	; 0x8c
   299e2:	9907      	ldr	r1, [sp, #28]
   299e4:	9808      	ldr	r0, [sp, #32]
   299e6:	f002 fce1 	bl	2c3ac <__ssprint_r>
   299ea:	2800      	cmp	r0, #0
   299ec:	f47f ab8a 	bne.w	29104 <_svfprintf_r+0x1a4>
   299f0:	9c25      	ldr	r4, [sp, #148]	; 0x94
   299f2:	46c8      	mov	r8, r9
   299f4:	e49b      	b.n	2932e <_svfprintf_r+0x3ce>
   299f6:	aa23      	add	r2, sp, #140	; 0x8c
   299f8:	9907      	ldr	r1, [sp, #28]
   299fa:	9808      	ldr	r0, [sp, #32]
   299fc:	f002 fcd6 	bl	2c3ac <__ssprint_r>
   29a00:	2800      	cmp	r0, #0
   29a02:	f43f acdd 	beq.w	293c0 <_svfprintf_r+0x460>
   29a06:	f7ff bb7d 	b.w	29104 <_svfprintf_r+0x1a4>
   29a0a:	f8dd b00c 	ldr.w	fp, [sp, #12]
   29a0e:	2b01      	cmp	r3, #1
   29a10:	f000 8135 	beq.w	29c7e <_svfprintf_r+0xd1e>
   29a14:	2b02      	cmp	r3, #2
   29a16:	d125      	bne.n	29a64 <_svfprintf_r+0xb04>
   29a18:	f8cd b00c 	str.w	fp, [sp, #12]
   29a1c:	2400      	movs	r4, #0
   29a1e:	2500      	movs	r5, #0
   29a20:	e611      	b.n	29646 <_svfprintf_r+0x6e6>
   29a22:	aa23      	add	r2, sp, #140	; 0x8c
   29a24:	9907      	ldr	r1, [sp, #28]
   29a26:	9808      	ldr	r0, [sp, #32]
   29a28:	f002 fcc0 	bl	2c3ac <__ssprint_r>
   29a2c:	2800      	cmp	r0, #0
   29a2e:	f47f ab69 	bne.w	29104 <_svfprintf_r+0x1a4>
   29a32:	9c25      	ldr	r4, [sp, #148]	; 0x94
   29a34:	46c8      	mov	r8, r9
   29a36:	e467      	b.n	29308 <_svfprintf_r+0x3a8>
   29a38:	aa23      	add	r2, sp, #140	; 0x8c
   29a3a:	9907      	ldr	r1, [sp, #28]
   29a3c:	9808      	ldr	r0, [sp, #32]
   29a3e:	f002 fcb5 	bl	2c3ac <__ssprint_r>
   29a42:	2800      	cmp	r0, #0
   29a44:	f47f ab5e 	bne.w	29104 <_svfprintf_r+0x1a4>
   29a48:	9c25      	ldr	r4, [sp, #148]	; 0x94
   29a4a:	46c8      	mov	r8, r9
   29a4c:	e41d      	b.n	2928a <_svfprintf_r+0x32a>
   29a4e:	aa23      	add	r2, sp, #140	; 0x8c
   29a50:	9907      	ldr	r1, [sp, #28]
   29a52:	9808      	ldr	r0, [sp, #32]
   29a54:	f002 fcaa 	bl	2c3ac <__ssprint_r>
   29a58:	2800      	cmp	r0, #0
   29a5a:	f47f ab53 	bne.w	29104 <_svfprintf_r+0x1a4>
   29a5e:	9c25      	ldr	r4, [sp, #148]	; 0x94
   29a60:	46c8      	mov	r8, r9
   29a62:	e402      	b.n	2926a <_svfprintf_r+0x30a>
   29a64:	f8cd b00c 	str.w	fp, [sp, #12]
   29a68:	2400      	movs	r4, #0
   29a6a:	2500      	movs	r5, #0
   29a6c:	4649      	mov	r1, r9
   29a6e:	e000      	b.n	29a72 <_svfprintf_r+0xb12>
   29a70:	4631      	mov	r1, r6
   29a72:	08e2      	lsrs	r2, r4, #3
   29a74:	ea42 7245 	orr.w	r2, r2, r5, lsl #29
   29a78:	08e8      	lsrs	r0, r5, #3
   29a7a:	f004 0307 	and.w	r3, r4, #7
   29a7e:	4605      	mov	r5, r0
   29a80:	4614      	mov	r4, r2
   29a82:	3330      	adds	r3, #48	; 0x30
   29a84:	ea54 0205 	orrs.w	r2, r4, r5
   29a88:	f801 3c01 	strb.w	r3, [r1, #-1]
   29a8c:	f101 36ff 	add.w	r6, r1, #4294967295
   29a90:	d1ee      	bne.n	29a70 <_svfprintf_r+0xb10>
   29a92:	9a03      	ldr	r2, [sp, #12]
   29a94:	07d2      	lsls	r2, r2, #31
   29a96:	f57f ade6 	bpl.w	29666 <_svfprintf_r+0x706>
   29a9a:	2b30      	cmp	r3, #48	; 0x30
   29a9c:	f43f ade3 	beq.w	29666 <_svfprintf_r+0x706>
   29aa0:	3902      	subs	r1, #2
   29aa2:	2330      	movs	r3, #48	; 0x30
   29aa4:	f806 3c01 	strb.w	r3, [r6, #-1]
   29aa8:	eba9 0301 	sub.w	r3, r9, r1
   29aac:	930a      	str	r3, [sp, #40]	; 0x28
   29aae:	460e      	mov	r6, r1
   29ab0:	f7ff bb66 	b.w	29180 <_svfprintf_r+0x220>
   29ab4:	991d      	ldr	r1, [sp, #116]	; 0x74
   29ab6:	2900      	cmp	r1, #0
   29ab8:	f340 8231 	ble.w	29f1e <_svfprintf_r+0xfbe>
   29abc:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   29abe:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
   29ac0:	4293      	cmp	r3, r2
   29ac2:	bfa8      	it	ge
   29ac4:	4613      	movge	r3, r2
   29ac6:	2b00      	cmp	r3, #0
   29ac8:	461f      	mov	r7, r3
   29aca:	dd0d      	ble.n	29ae8 <_svfprintf_r+0xb88>
   29acc:	9b24      	ldr	r3, [sp, #144]	; 0x90
   29ace:	f8c8 6000 	str.w	r6, [r8]
   29ad2:	3301      	adds	r3, #1
   29ad4:	443c      	add	r4, r7
   29ad6:	2b07      	cmp	r3, #7
   29ad8:	9425      	str	r4, [sp, #148]	; 0x94
   29ada:	f8c8 7004 	str.w	r7, [r8, #4]
   29ade:	9324      	str	r3, [sp, #144]	; 0x90
   29ae0:	f300 8321 	bgt.w	2a126 <_svfprintf_r+0x11c6>
   29ae4:	f108 0808 	add.w	r8, r8, #8
   29ae8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   29aea:	2f00      	cmp	r7, #0
   29aec:	bfa8      	it	ge
   29aee:	1bdb      	subge	r3, r3, r7
   29af0:	2b00      	cmp	r3, #0
   29af2:	461f      	mov	r7, r3
   29af4:	f340 80d7 	ble.w	29ca6 <_svfprintf_r+0xd46>
   29af8:	2f10      	cmp	r7, #16
   29afa:	9b24      	ldr	r3, [sp, #144]	; 0x90
   29afc:	4d31      	ldr	r5, [pc, #196]	; (29bc4 <_svfprintf_r+0xc64>)
   29afe:	f340 81f0 	ble.w	29ee2 <_svfprintf_r+0xf82>
   29b02:	4642      	mov	r2, r8
   29b04:	4621      	mov	r1, r4
   29b06:	46b0      	mov	r8, r6
   29b08:	f04f 0b10 	mov.w	fp, #16
   29b0c:	462e      	mov	r6, r5
   29b0e:	9c08      	ldr	r4, [sp, #32]
   29b10:	9d07      	ldr	r5, [sp, #28]
   29b12:	e004      	b.n	29b1e <_svfprintf_r+0xbbe>
   29b14:	3208      	adds	r2, #8
   29b16:	3f10      	subs	r7, #16
   29b18:	2f10      	cmp	r7, #16
   29b1a:	f340 81de 	ble.w	29eda <_svfprintf_r+0xf7a>
   29b1e:	3301      	adds	r3, #1
   29b20:	3110      	adds	r1, #16
   29b22:	2b07      	cmp	r3, #7
   29b24:	9125      	str	r1, [sp, #148]	; 0x94
   29b26:	9324      	str	r3, [sp, #144]	; 0x90
   29b28:	e882 0840 	stmia.w	r2, {r6, fp}
   29b2c:	ddf2      	ble.n	29b14 <_svfprintf_r+0xbb4>
   29b2e:	aa23      	add	r2, sp, #140	; 0x8c
   29b30:	4629      	mov	r1, r5
   29b32:	4620      	mov	r0, r4
   29b34:	f002 fc3a 	bl	2c3ac <__ssprint_r>
   29b38:	2800      	cmp	r0, #0
   29b3a:	f47f aae3 	bne.w	29104 <_svfprintf_r+0x1a4>
   29b3e:	9925      	ldr	r1, [sp, #148]	; 0x94
   29b40:	9b24      	ldr	r3, [sp, #144]	; 0x90
   29b42:	464a      	mov	r2, r9
   29b44:	e7e7      	b.n	29b16 <_svfprintf_r+0xbb6>
   29b46:	2d00      	cmp	r5, #0
   29b48:	bf08      	it	eq
   29b4a:	2c0a      	cmpeq	r4, #10
   29b4c:	f0c0 8095 	bcc.w	29c7a <_svfprintf_r+0xd1a>
   29b50:	464e      	mov	r6, r9
   29b52:	4620      	mov	r0, r4
   29b54:	4629      	mov	r1, r5
   29b56:	220a      	movs	r2, #10
   29b58:	2300      	movs	r3, #0
   29b5a:	f7fc f94f 	bl	25dfc <__aeabi_uldivmod>
   29b5e:	3230      	adds	r2, #48	; 0x30
   29b60:	f806 2d01 	strb.w	r2, [r6, #-1]!
   29b64:	4620      	mov	r0, r4
   29b66:	4629      	mov	r1, r5
   29b68:	2300      	movs	r3, #0
   29b6a:	220a      	movs	r2, #10
   29b6c:	f7fc f946 	bl	25dfc <__aeabi_uldivmod>
   29b70:	4604      	mov	r4, r0
   29b72:	460d      	mov	r5, r1
   29b74:	ea54 0305 	orrs.w	r3, r4, r5
   29b78:	d1eb      	bne.n	29b52 <_svfprintf_r+0xbf2>
   29b7a:	eba9 0306 	sub.w	r3, r9, r6
   29b7e:	930a      	str	r3, [sp, #40]	; 0x28
   29b80:	f7ff bafe 	b.w	29180 <_svfprintf_r+0x220>
   29b84:	9b06      	ldr	r3, [sp, #24]
   29b86:	930a      	str	r3, [sp, #40]	; 0x28
   29b88:	464e      	mov	r6, r9
   29b8a:	f7ff baf9 	b.w	29180 <_svfprintf_r+0x220>
   29b8e:	aa23      	add	r2, sp, #140	; 0x8c
   29b90:	9907      	ldr	r1, [sp, #28]
   29b92:	9808      	ldr	r0, [sp, #32]
   29b94:	f002 fc0a 	bl	2c3ac <__ssprint_r>
   29b98:	2800      	cmp	r0, #0
   29b9a:	f47f aab3 	bne.w	29104 <_svfprintf_r+0x1a4>
   29b9e:	f89d 706f 	ldrb.w	r7, [sp, #111]	; 0x6f
   29ba2:	9c25      	ldr	r4, [sp, #148]	; 0x94
   29ba4:	46c8      	mov	r8, r9
   29ba6:	f7ff bb50 	b.w	2924a <_svfprintf_r+0x2ea>
   29baa:	1e5e      	subs	r6, r3, #1
   29bac:	2e00      	cmp	r6, #0
   29bae:	f77f af0a 	ble.w	299c6 <_svfprintf_r+0xa66>
   29bb2:	2e10      	cmp	r6, #16
   29bb4:	4d03      	ldr	r5, [pc, #12]	; (29bc4 <_svfprintf_r+0xc64>)
   29bb6:	dd23      	ble.n	29c00 <_svfprintf_r+0xca0>
   29bb8:	4622      	mov	r2, r4
   29bba:	f04f 0b10 	mov.w	fp, #16
   29bbe:	9c08      	ldr	r4, [sp, #32]
   29bc0:	e007      	b.n	29bd2 <_svfprintf_r+0xc72>
   29bc2:	bf00      	nop
   29bc4:	0002ee2c 	.word	0x0002ee2c
   29bc8:	3e10      	subs	r6, #16
   29bca:	2e10      	cmp	r6, #16
   29bcc:	f108 0808 	add.w	r8, r8, #8
   29bd0:	dd15      	ble.n	29bfe <_svfprintf_r+0xc9e>
   29bd2:	3701      	adds	r7, #1
   29bd4:	3210      	adds	r2, #16
   29bd6:	2f07      	cmp	r7, #7
   29bd8:	9225      	str	r2, [sp, #148]	; 0x94
   29bda:	9724      	str	r7, [sp, #144]	; 0x90
   29bdc:	e888 0820 	stmia.w	r8, {r5, fp}
   29be0:	ddf2      	ble.n	29bc8 <_svfprintf_r+0xc68>
   29be2:	aa23      	add	r2, sp, #140	; 0x8c
   29be4:	9907      	ldr	r1, [sp, #28]
   29be6:	4620      	mov	r0, r4
   29be8:	f002 fbe0 	bl	2c3ac <__ssprint_r>
   29bec:	2800      	cmp	r0, #0
   29bee:	f47f aa89 	bne.w	29104 <_svfprintf_r+0x1a4>
   29bf2:	3e10      	subs	r6, #16
   29bf4:	2e10      	cmp	r6, #16
   29bf6:	9a25      	ldr	r2, [sp, #148]	; 0x94
   29bf8:	9f24      	ldr	r7, [sp, #144]	; 0x90
   29bfa:	46c8      	mov	r8, r9
   29bfc:	dce9      	bgt.n	29bd2 <_svfprintf_r+0xc72>
   29bfe:	4614      	mov	r4, r2
   29c00:	3701      	adds	r7, #1
   29c02:	4434      	add	r4, r6
   29c04:	2f07      	cmp	r7, #7
   29c06:	9425      	str	r4, [sp, #148]	; 0x94
   29c08:	9724      	str	r7, [sp, #144]	; 0x90
   29c0a:	e888 0060 	stmia.w	r8, {r5, r6}
   29c0e:	f77f aed8 	ble.w	299c2 <_svfprintf_r+0xa62>
   29c12:	aa23      	add	r2, sp, #140	; 0x8c
   29c14:	9907      	ldr	r1, [sp, #28]
   29c16:	9808      	ldr	r0, [sp, #32]
   29c18:	f002 fbc8 	bl	2c3ac <__ssprint_r>
   29c1c:	2800      	cmp	r0, #0
   29c1e:	f47f aa71 	bne.w	29104 <_svfprintf_r+0x1a4>
   29c22:	9c25      	ldr	r4, [sp, #148]	; 0x94
   29c24:	9f24      	ldr	r7, [sp, #144]	; 0x90
   29c26:	46c8      	mov	r8, r9
   29c28:	e6cd      	b.n	299c6 <_svfprintf_r+0xa66>
   29c2a:	681c      	ldr	r4, [r3, #0]
   29c2c:	3304      	adds	r3, #4
   29c2e:	930b      	str	r3, [sp, #44]	; 0x2c
   29c30:	2500      	movs	r5, #0
   29c32:	e422      	b.n	2947a <_svfprintf_r+0x51a>
   29c34:	990b      	ldr	r1, [sp, #44]	; 0x2c
   29c36:	460a      	mov	r2, r1
   29c38:	3204      	adds	r2, #4
   29c3a:	680c      	ldr	r4, [r1, #0]
   29c3c:	920b      	str	r2, [sp, #44]	; 0x2c
   29c3e:	2500      	movs	r5, #0
   29c40:	f7ff ba81 	b.w	29146 <_svfprintf_r+0x1e6>
   29c44:	3204      	adds	r2, #4
   29c46:	681c      	ldr	r4, [r3, #0]
   29c48:	920b      	str	r2, [sp, #44]	; 0x2c
   29c4a:	2301      	movs	r3, #1
   29c4c:	2500      	movs	r5, #0
   29c4e:	f7ff ba7a 	b.w	29146 <_svfprintf_r+0x1e6>
   29c52:	4614      	mov	r4, r2
   29c54:	3301      	adds	r3, #1
   29c56:	4434      	add	r4, r6
   29c58:	2b07      	cmp	r3, #7
   29c5a:	9425      	str	r4, [sp, #148]	; 0x94
   29c5c:	9324      	str	r3, [sp, #144]	; 0x90
   29c5e:	e888 0060 	stmia.w	r8, {r5, r6}
   29c62:	f77f ab62 	ble.w	2932a <_svfprintf_r+0x3ca>
   29c66:	e6bb      	b.n	299e0 <_svfprintf_r+0xa80>
   29c68:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
   29c6a:	6814      	ldr	r4, [r2, #0]
   29c6c:	4613      	mov	r3, r2
   29c6e:	3304      	adds	r3, #4
   29c70:	17e5      	asrs	r5, r4, #31
   29c72:	930b      	str	r3, [sp, #44]	; 0x2c
   29c74:	4622      	mov	r2, r4
   29c76:	462b      	mov	r3, r5
   29c78:	e4cd      	b.n	29616 <_svfprintf_r+0x6b6>
   29c7a:	f8dd b00c 	ldr.w	fp, [sp, #12]
   29c7e:	f8cd b00c 	str.w	fp, [sp, #12]
   29c82:	ae40      	add	r6, sp, #256	; 0x100
   29c84:	3430      	adds	r4, #48	; 0x30
   29c86:	2301      	movs	r3, #1
   29c88:	f806 4d41 	strb.w	r4, [r6, #-65]!
   29c8c:	930a      	str	r3, [sp, #40]	; 0x28
   29c8e:	f7ff ba77 	b.w	29180 <_svfprintf_r+0x220>
   29c92:	aa23      	add	r2, sp, #140	; 0x8c
   29c94:	9907      	ldr	r1, [sp, #28]
   29c96:	9808      	ldr	r0, [sp, #32]
   29c98:	f002 fb88 	bl	2c3ac <__ssprint_r>
   29c9c:	2800      	cmp	r0, #0
   29c9e:	f47f aa31 	bne.w	29104 <_svfprintf_r+0x1a4>
   29ca2:	9c25      	ldr	r4, [sp, #148]	; 0x94
   29ca4:	46c8      	mov	r8, r9
   29ca6:	9a1d      	ldr	r2, [sp, #116]	; 0x74
   29ca8:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   29caa:	429a      	cmp	r2, r3
   29cac:	db44      	blt.n	29d38 <_svfprintf_r+0xdd8>
   29cae:	9b03      	ldr	r3, [sp, #12]
   29cb0:	07d9      	lsls	r1, r3, #31
   29cb2:	d441      	bmi.n	29d38 <_svfprintf_r+0xdd8>
   29cb4:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   29cb6:	980e      	ldr	r0, [sp, #56]	; 0x38
   29cb8:	1a9a      	subs	r2, r3, r2
   29cba:	1a1d      	subs	r5, r3, r0
   29cbc:	4295      	cmp	r5, r2
   29cbe:	bfa8      	it	ge
   29cc0:	4615      	movge	r5, r2
   29cc2:	2d00      	cmp	r5, #0
   29cc4:	dd0e      	ble.n	29ce4 <_svfprintf_r+0xd84>
   29cc6:	9924      	ldr	r1, [sp, #144]	; 0x90
   29cc8:	f8c8 5004 	str.w	r5, [r8, #4]
   29ccc:	3101      	adds	r1, #1
   29cce:	4406      	add	r6, r0
   29cd0:	442c      	add	r4, r5
   29cd2:	2907      	cmp	r1, #7
   29cd4:	f8c8 6000 	str.w	r6, [r8]
   29cd8:	9425      	str	r4, [sp, #148]	; 0x94
   29cda:	9124      	str	r1, [sp, #144]	; 0x90
   29cdc:	f300 823a 	bgt.w	2a154 <_svfprintf_r+0x11f4>
   29ce0:	f108 0808 	add.w	r8, r8, #8
   29ce4:	2d00      	cmp	r5, #0
   29ce6:	bfac      	ite	ge
   29ce8:	1b56      	subge	r6, r2, r5
   29cea:	4616      	movlt	r6, r2
   29cec:	2e00      	cmp	r6, #0
   29cee:	f77f ab1e 	ble.w	2932e <_svfprintf_r+0x3ce>
   29cf2:	2e10      	cmp	r6, #16
   29cf4:	9b24      	ldr	r3, [sp, #144]	; 0x90
   29cf6:	4db1      	ldr	r5, [pc, #708]	; (29fbc <_svfprintf_r+0x105c>)
   29cf8:	ddac      	ble.n	29c54 <_svfprintf_r+0xcf4>
   29cfa:	4622      	mov	r2, r4
   29cfc:	2710      	movs	r7, #16
   29cfe:	f8dd b020 	ldr.w	fp, [sp, #32]
   29d02:	9c07      	ldr	r4, [sp, #28]
   29d04:	e004      	b.n	29d10 <_svfprintf_r+0xdb0>
   29d06:	f108 0808 	add.w	r8, r8, #8
   29d0a:	3e10      	subs	r6, #16
   29d0c:	2e10      	cmp	r6, #16
   29d0e:	dda0      	ble.n	29c52 <_svfprintf_r+0xcf2>
   29d10:	3301      	adds	r3, #1
   29d12:	3210      	adds	r2, #16
   29d14:	2b07      	cmp	r3, #7
   29d16:	9225      	str	r2, [sp, #148]	; 0x94
   29d18:	9324      	str	r3, [sp, #144]	; 0x90
   29d1a:	e888 00a0 	stmia.w	r8, {r5, r7}
   29d1e:	ddf2      	ble.n	29d06 <_svfprintf_r+0xda6>
   29d20:	aa23      	add	r2, sp, #140	; 0x8c
   29d22:	4621      	mov	r1, r4
   29d24:	4658      	mov	r0, fp
   29d26:	f002 fb41 	bl	2c3ac <__ssprint_r>
   29d2a:	2800      	cmp	r0, #0
   29d2c:	f47f a9ea 	bne.w	29104 <_svfprintf_r+0x1a4>
   29d30:	9a25      	ldr	r2, [sp, #148]	; 0x94
   29d32:	9b24      	ldr	r3, [sp, #144]	; 0x90
   29d34:	46c8      	mov	r8, r9
   29d36:	e7e8      	b.n	29d0a <_svfprintf_r+0xdaa>
   29d38:	9b24      	ldr	r3, [sp, #144]	; 0x90
   29d3a:	9813      	ldr	r0, [sp, #76]	; 0x4c
   29d3c:	9914      	ldr	r1, [sp, #80]	; 0x50
   29d3e:	f8c8 1000 	str.w	r1, [r8]
   29d42:	3301      	adds	r3, #1
   29d44:	4404      	add	r4, r0
   29d46:	2b07      	cmp	r3, #7
   29d48:	9425      	str	r4, [sp, #148]	; 0x94
   29d4a:	f8c8 0004 	str.w	r0, [r8, #4]
   29d4e:	9324      	str	r3, [sp, #144]	; 0x90
   29d50:	f300 81f4 	bgt.w	2a13c <_svfprintf_r+0x11dc>
   29d54:	f108 0808 	add.w	r8, r8, #8
   29d58:	e7ac      	b.n	29cb4 <_svfprintf_r+0xd54>
   29d5a:	9b03      	ldr	r3, [sp, #12]
   29d5c:	07da      	lsls	r2, r3, #31
   29d5e:	f53f adfc 	bmi.w	2995a <_svfprintf_r+0x9fa>
   29d62:	3701      	adds	r7, #1
   29d64:	3401      	adds	r4, #1
   29d66:	2301      	movs	r3, #1
   29d68:	2f07      	cmp	r7, #7
   29d6a:	9425      	str	r4, [sp, #148]	; 0x94
   29d6c:	9724      	str	r7, [sp, #144]	; 0x90
   29d6e:	f8c8 6000 	str.w	r6, [r8]
   29d72:	f8c8 3004 	str.w	r3, [r8, #4]
   29d76:	f77f ae24 	ble.w	299c2 <_svfprintf_r+0xa62>
   29d7a:	e74a      	b.n	29c12 <_svfprintf_r+0xcb2>
   29d7c:	aa23      	add	r2, sp, #140	; 0x8c
   29d7e:	9907      	ldr	r1, [sp, #28]
   29d80:	9808      	ldr	r0, [sp, #32]
   29d82:	f002 fb13 	bl	2c3ac <__ssprint_r>
   29d86:	2800      	cmp	r0, #0
   29d88:	f47f a9bc 	bne.w	29104 <_svfprintf_r+0x1a4>
   29d8c:	9c25      	ldr	r4, [sp, #148]	; 0x94
   29d8e:	9f24      	ldr	r7, [sp, #144]	; 0x90
   29d90:	46c8      	mov	r8, r9
   29d92:	e5f0      	b.n	29976 <_svfprintf_r+0xa16>
   29d94:	aa23      	add	r2, sp, #140	; 0x8c
   29d96:	9907      	ldr	r1, [sp, #28]
   29d98:	9808      	ldr	r0, [sp, #32]
   29d9a:	f002 fb07 	bl	2c3ac <__ssprint_r>
   29d9e:	2800      	cmp	r0, #0
   29da0:	f47f a9b0 	bne.w	29104 <_svfprintf_r+0x1a4>
   29da4:	9c25      	ldr	r4, [sp, #148]	; 0x94
   29da6:	9f24      	ldr	r7, [sp, #144]	; 0x90
   29da8:	46c8      	mov	r8, r9
   29daa:	e5f3      	b.n	29994 <_svfprintf_r+0xa34>
   29dac:	464e      	mov	r6, r9
   29dae:	f7ff b9e7 	b.w	29180 <_svfprintf_r+0x220>
   29db2:	aa23      	add	r2, sp, #140	; 0x8c
   29db4:	9907      	ldr	r1, [sp, #28]
   29db6:	9808      	ldr	r0, [sp, #32]
   29db8:	f002 faf8 	bl	2c3ac <__ssprint_r>
   29dbc:	2800      	cmp	r0, #0
   29dbe:	f47f a9a1 	bne.w	29104 <_svfprintf_r+0x1a4>
   29dc2:	9c25      	ldr	r4, [sp, #148]	; 0x94
   29dc4:	46c8      	mov	r8, r9
   29dc6:	f7ff ba63 	b.w	29290 <_svfprintf_r+0x330>
   29dca:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
   29dce:	4602      	mov	r2, r0
   29dd0:	460b      	mov	r3, r1
   29dd2:	f002 fcc1 	bl	2c758 <__aeabi_dcmpun>
   29dd6:	2800      	cmp	r0, #0
   29dd8:	f040 8298 	bne.w	2a30c <_svfprintf_r+0x13ac>
   29ddc:	9b06      	ldr	r3, [sp, #24]
   29dde:	3301      	adds	r3, #1
   29de0:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   29de2:	f023 0720 	bic.w	r7, r3, #32
   29de6:	f000 81d2 	beq.w	2a18e <_svfprintf_r+0x122e>
   29dea:	2f47      	cmp	r7, #71	; 0x47
   29dec:	f000 8120 	beq.w	2a030 <_svfprintf_r+0x10d0>
   29df0:	9b11      	ldr	r3, [sp, #68]	; 0x44
   29df2:	f44b 7280 	orr.w	r2, fp, #256	; 0x100
   29df6:	2b00      	cmp	r3, #0
   29df8:	9203      	str	r2, [sp, #12]
   29dfa:	f2c0 81f0 	blt.w	2a1de <_svfprintf_r+0x127e>
   29dfe:	ed9d 7b10 	vldr	d7, [sp, #64]	; 0x40
   29e02:	ed8d 7b18 	vstr	d7, [sp, #96]	; 0x60
   29e06:	2300      	movs	r3, #0
   29e08:	930c      	str	r3, [sp, #48]	; 0x30
   29e0a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   29e0c:	2b66      	cmp	r3, #102	; 0x66
   29e0e:	f000 81c1 	beq.w	2a194 <_svfprintf_r+0x1234>
   29e12:	2b46      	cmp	r3, #70	; 0x46
   29e14:	f000 80f1 	beq.w	29ffa <_svfprintf_r+0x109a>
   29e18:	2f45      	cmp	r7, #69	; 0x45
   29e1a:	bf0c      	ite	eq
   29e1c:	9b06      	ldreq	r3, [sp, #24]
   29e1e:	9d06      	ldrne	r5, [sp, #24]
   29e20:	9808      	ldr	r0, [sp, #32]
   29e22:	bf08      	it	eq
   29e24:	1c5d      	addeq	r5, r3, #1
   29e26:	aa21      	add	r2, sp, #132	; 0x84
   29e28:	ab1e      	add	r3, sp, #120	; 0x78
   29e2a:	9201      	str	r2, [sp, #4]
   29e2c:	9300      	str	r3, [sp, #0]
   29e2e:	462a      	mov	r2, r5
   29e30:	ab1d      	add	r3, sp, #116	; 0x74
   29e32:	2102      	movs	r1, #2
   29e34:	ed9d 0b18 	vldr	d0, [sp, #96]	; 0x60
   29e38:	f000 fcae 	bl	2a798 <_dtoa_r>
   29e3c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   29e3e:	2b67      	cmp	r3, #103	; 0x67
   29e40:	4606      	mov	r6, r0
   29e42:	f040 81d5 	bne.w	2a1f0 <_svfprintf_r+0x1290>
   29e46:	f01b 0f01 	tst.w	fp, #1
   29e4a:	f000 824e 	beq.w	2a2ea <_svfprintf_r+0x138a>
   29e4e:	1974      	adds	r4, r6, r5
   29e50:	2200      	movs	r2, #0
   29e52:	2300      	movs	r3, #0
   29e54:	e9dd 0118 	ldrd	r0, r1, [sp, #96]	; 0x60
   29e58:	f7fb fda8 	bl	259ac <__aeabi_dcmpeq>
   29e5c:	2800      	cmp	r0, #0
   29e5e:	f040 8160 	bne.w	2a122 <_svfprintf_r+0x11c2>
   29e62:	9b21      	ldr	r3, [sp, #132]	; 0x84
   29e64:	42a3      	cmp	r3, r4
   29e66:	d206      	bcs.n	29e76 <_svfprintf_r+0xf16>
   29e68:	2130      	movs	r1, #48	; 0x30
   29e6a:	1c5a      	adds	r2, r3, #1
   29e6c:	9221      	str	r2, [sp, #132]	; 0x84
   29e6e:	7019      	strb	r1, [r3, #0]
   29e70:	9b21      	ldr	r3, [sp, #132]	; 0x84
   29e72:	429c      	cmp	r4, r3
   29e74:	d8f9      	bhi.n	29e6a <_svfprintf_r+0xf0a>
   29e76:	1b9b      	subs	r3, r3, r6
   29e78:	2f47      	cmp	r7, #71	; 0x47
   29e7a:	930f      	str	r3, [sp, #60]	; 0x3c
   29e7c:	f000 80f0 	beq.w	2a060 <_svfprintf_r+0x1100>
   29e80:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   29e82:	2b65      	cmp	r3, #101	; 0x65
   29e84:	f340 81c3 	ble.w	2a20e <_svfprintf_r+0x12ae>
   29e88:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   29e8a:	2b66      	cmp	r3, #102	; 0x66
   29e8c:	9b1d      	ldr	r3, [sp, #116]	; 0x74
   29e8e:	930e      	str	r3, [sp, #56]	; 0x38
   29e90:	f000 81c0 	beq.w	2a214 <_svfprintf_r+0x12b4>
   29e94:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   29e96:	9a0e      	ldr	r2, [sp, #56]	; 0x38
   29e98:	4619      	mov	r1, r3
   29e9a:	4291      	cmp	r1, r2
   29e9c:	f300 8191 	bgt.w	2a1c2 <_svfprintf_r+0x1262>
   29ea0:	f01b 0f01 	tst.w	fp, #1
   29ea4:	f040 8223 	bne.w	2a2ee <_svfprintf_r+0x138e>
   29ea8:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
   29eac:	9304      	str	r3, [sp, #16]
   29eae:	2367      	movs	r3, #103	; 0x67
   29eb0:	920a      	str	r2, [sp, #40]	; 0x28
   29eb2:	930d      	str	r3, [sp, #52]	; 0x34
   29eb4:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   29eb6:	2b00      	cmp	r3, #0
   29eb8:	f040 80cb 	bne.w	2a052 <_svfprintf_r+0x10f2>
   29ebc:	9306      	str	r3, [sp, #24]
   29ebe:	f89d 706f 	ldrb.w	r7, [sp, #111]	; 0x6f
   29ec2:	f7ff b965 	b.w	29190 <_svfprintf_r+0x230>
   29ec6:	f025 0507 	bic.w	r5, r5, #7
   29eca:	ed95 7b00 	vldr	d7, [r5]
   29ece:	f105 0308 	add.w	r3, r5, #8
   29ed2:	ed8d 7b10 	vstr	d7, [sp, #64]	; 0x40
   29ed6:	930b      	str	r3, [sp, #44]	; 0x2c
   29ed8:	e416      	b.n	29708 <_svfprintf_r+0x7a8>
   29eda:	4635      	mov	r5, r6
   29edc:	460c      	mov	r4, r1
   29ede:	4646      	mov	r6, r8
   29ee0:	4690      	mov	r8, r2
   29ee2:	3301      	adds	r3, #1
   29ee4:	443c      	add	r4, r7
   29ee6:	2b07      	cmp	r3, #7
   29ee8:	9425      	str	r4, [sp, #148]	; 0x94
   29eea:	9324      	str	r3, [sp, #144]	; 0x90
   29eec:	e888 00a0 	stmia.w	r8, {r5, r7}
   29ef0:	f73f aecf 	bgt.w	29c92 <_svfprintf_r+0xd32>
   29ef4:	f108 0808 	add.w	r8, r8, #8
   29ef8:	e6d5      	b.n	29ca6 <_svfprintf_r+0xd46>
   29efa:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
   29efc:	6813      	ldr	r3, [r2, #0]
   29efe:	3204      	adds	r2, #4
   29f00:	920b      	str	r2, [sp, #44]	; 0x2c
   29f02:	9a05      	ldr	r2, [sp, #20]
   29f04:	601a      	str	r2, [r3, #0]
   29f06:	f7ff b852 	b.w	28fae <_svfprintf_r+0x4e>
   29f0a:	aa23      	add	r2, sp, #140	; 0x8c
   29f0c:	9907      	ldr	r1, [sp, #28]
   29f0e:	9808      	ldr	r0, [sp, #32]
   29f10:	f002 fa4c 	bl	2c3ac <__ssprint_r>
   29f14:	2800      	cmp	r0, #0
   29f16:	f47f a8f5 	bne.w	29104 <_svfprintf_r+0x1a4>
   29f1a:	46c8      	mov	r8, r9
   29f1c:	e488      	b.n	29830 <_svfprintf_r+0x8d0>
   29f1e:	9b24      	ldr	r3, [sp, #144]	; 0x90
   29f20:	4a27      	ldr	r2, [pc, #156]	; (29fc0 <_svfprintf_r+0x1060>)
   29f22:	f8c8 2000 	str.w	r2, [r8]
   29f26:	3301      	adds	r3, #1
   29f28:	3401      	adds	r4, #1
   29f2a:	2201      	movs	r2, #1
   29f2c:	2b07      	cmp	r3, #7
   29f2e:	9425      	str	r4, [sp, #148]	; 0x94
   29f30:	9324      	str	r3, [sp, #144]	; 0x90
   29f32:	f8c8 2004 	str.w	r2, [r8, #4]
   29f36:	dc54      	bgt.n	29fe2 <_svfprintf_r+0x1082>
   29f38:	f108 0808 	add.w	r8, r8, #8
   29f3c:	b929      	cbnz	r1, 29f4a <_svfprintf_r+0xfea>
   29f3e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   29f40:	b91b      	cbnz	r3, 29f4a <_svfprintf_r+0xfea>
   29f42:	9b03      	ldr	r3, [sp, #12]
   29f44:	07d8      	lsls	r0, r3, #31
   29f46:	f57f a9f2 	bpl.w	2932e <_svfprintf_r+0x3ce>
   29f4a:	9b24      	ldr	r3, [sp, #144]	; 0x90
   29f4c:	9813      	ldr	r0, [sp, #76]	; 0x4c
   29f4e:	9a14      	ldr	r2, [sp, #80]	; 0x50
   29f50:	f8c8 2000 	str.w	r2, [r8]
   29f54:	3301      	adds	r3, #1
   29f56:	4602      	mov	r2, r0
   29f58:	4422      	add	r2, r4
   29f5a:	2b07      	cmp	r3, #7
   29f5c:	9225      	str	r2, [sp, #148]	; 0x94
   29f5e:	f8c8 0004 	str.w	r0, [r8, #4]
   29f62:	9324      	str	r3, [sp, #144]	; 0x90
   29f64:	f300 8195 	bgt.w	2a292 <_svfprintf_r+0x1332>
   29f68:	f108 0808 	add.w	r8, r8, #8
   29f6c:	2900      	cmp	r1, #0
   29f6e:	f2c0 816d 	blt.w	2a24c <_svfprintf_r+0x12ec>
   29f72:	990f      	ldr	r1, [sp, #60]	; 0x3c
   29f74:	f8c8 6000 	str.w	r6, [r8]
   29f78:	3301      	adds	r3, #1
   29f7a:	188c      	adds	r4, r1, r2
   29f7c:	2b07      	cmp	r3, #7
   29f7e:	9425      	str	r4, [sp, #148]	; 0x94
   29f80:	9324      	str	r3, [sp, #144]	; 0x90
   29f82:	f8c8 1004 	str.w	r1, [r8, #4]
   29f86:	f77f a9d0 	ble.w	2932a <_svfprintf_r+0x3ca>
   29f8a:	e529      	b.n	299e0 <_svfprintf_r+0xa80>
   29f8c:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
   29f8e:	9905      	ldr	r1, [sp, #20]
   29f90:	6813      	ldr	r3, [r2, #0]
   29f92:	17cd      	asrs	r5, r1, #31
   29f94:	4608      	mov	r0, r1
   29f96:	3204      	adds	r2, #4
   29f98:	4629      	mov	r1, r5
   29f9a:	920b      	str	r2, [sp, #44]	; 0x2c
   29f9c:	e9c3 0100 	strd	r0, r1, [r3]
   29fa0:	f7ff b805 	b.w	28fae <_svfprintf_r+0x4e>
   29fa4:	aa23      	add	r2, sp, #140	; 0x8c
   29fa6:	9907      	ldr	r1, [sp, #28]
   29fa8:	9808      	ldr	r0, [sp, #32]
   29faa:	f002 f9ff 	bl	2c3ac <__ssprint_r>
   29fae:	2800      	cmp	r0, #0
   29fb0:	f47f a8a8 	bne.w	29104 <_svfprintf_r+0x1a4>
   29fb4:	9c25      	ldr	r4, [sp, #148]	; 0x94
   29fb6:	46c8      	mov	r8, r9
   29fb8:	e453      	b.n	29862 <_svfprintf_r+0x902>
   29fba:	bf00      	nop
   29fbc:	0002ee2c 	.word	0x0002ee2c
   29fc0:	0002ee18 	.word	0x0002ee18
   29fc4:	2140      	movs	r1, #64	; 0x40
   29fc6:	9808      	ldr	r0, [sp, #32]
   29fc8:	f7fd fb00 	bl	275cc <_malloc_r>
   29fcc:	9a07      	ldr	r2, [sp, #28]
   29fce:	6010      	str	r0, [r2, #0]
   29fd0:	6110      	str	r0, [r2, #16]
   29fd2:	2800      	cmp	r0, #0
   29fd4:	f000 81f6 	beq.w	2a3c4 <_svfprintf_r+0x1464>
   29fd8:	9a07      	ldr	r2, [sp, #28]
   29fda:	2340      	movs	r3, #64	; 0x40
   29fdc:	6153      	str	r3, [r2, #20]
   29fde:	f7fe bfd6 	b.w	28f8e <_svfprintf_r+0x2e>
   29fe2:	aa23      	add	r2, sp, #140	; 0x8c
   29fe4:	9907      	ldr	r1, [sp, #28]
   29fe6:	9808      	ldr	r0, [sp, #32]
   29fe8:	f002 f9e0 	bl	2c3ac <__ssprint_r>
   29fec:	2800      	cmp	r0, #0
   29fee:	f47f a889 	bne.w	29104 <_svfprintf_r+0x1a4>
   29ff2:	991d      	ldr	r1, [sp, #116]	; 0x74
   29ff4:	9c25      	ldr	r4, [sp, #148]	; 0x94
   29ff6:	46c8      	mov	r8, r9
   29ff8:	e7a0      	b.n	29f3c <_svfprintf_r+0xfdc>
   29ffa:	9d06      	ldr	r5, [sp, #24]
   29ffc:	9808      	ldr	r0, [sp, #32]
   29ffe:	aa21      	add	r2, sp, #132	; 0x84
   2a000:	ab1e      	add	r3, sp, #120	; 0x78
   2a002:	9201      	str	r2, [sp, #4]
   2a004:	9300      	str	r3, [sp, #0]
   2a006:	462a      	mov	r2, r5
   2a008:	ab1d      	add	r3, sp, #116	; 0x74
   2a00a:	2103      	movs	r1, #3
   2a00c:	ed9d 0b18 	vldr	d0, [sp, #96]	; 0x60
   2a010:	f000 fbc2 	bl	2a798 <_dtoa_r>
   2a014:	4606      	mov	r6, r0
   2a016:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   2a018:	2b46      	cmp	r3, #70	; 0x46
   2a01a:	eb06 0405 	add.w	r4, r6, r5
   2a01e:	f47f af17 	bne.w	29e50 <_svfprintf_r+0xef0>
   2a022:	7833      	ldrb	r3, [r6, #0]
   2a024:	2b30      	cmp	r3, #48	; 0x30
   2a026:	f000 817d 	beq.w	2a324 <_svfprintf_r+0x13c4>
   2a02a:	9d1d      	ldr	r5, [sp, #116]	; 0x74
   2a02c:	442c      	add	r4, r5
   2a02e:	e70f      	b.n	29e50 <_svfprintf_r+0xef0>
   2a030:	9b06      	ldr	r3, [sp, #24]
   2a032:	2b00      	cmp	r3, #0
   2a034:	bf08      	it	eq
   2a036:	2301      	moveq	r3, #1
   2a038:	9306      	str	r3, [sp, #24]
   2a03a:	e6d9      	b.n	29df0 <_svfprintf_r+0xe90>
   2a03c:	4630      	mov	r0, r6
   2a03e:	9406      	str	r4, [sp, #24]
   2a040:	f7fe fbbe 	bl	287c0 <strlen>
   2a044:	950b      	str	r5, [sp, #44]	; 0x2c
   2a046:	900a      	str	r0, [sp, #40]	; 0x28
   2a048:	f8cd b00c 	str.w	fp, [sp, #12]
   2a04c:	4603      	mov	r3, r0
   2a04e:	f7ff b9eb 	b.w	29428 <_svfprintf_r+0x4c8>
   2a052:	272d      	movs	r7, #45	; 0x2d
   2a054:	2300      	movs	r3, #0
   2a056:	f88d 706f 	strb.w	r7, [sp, #111]	; 0x6f
   2a05a:	9306      	str	r3, [sp, #24]
   2a05c:	f7ff b899 	b.w	29192 <_svfprintf_r+0x232>
   2a060:	9b1d      	ldr	r3, [sp, #116]	; 0x74
   2a062:	930e      	str	r3, [sp, #56]	; 0x38
   2a064:	461a      	mov	r2, r3
   2a066:	3303      	adds	r3, #3
   2a068:	db04      	blt.n	2a074 <_svfprintf_r+0x1114>
   2a06a:	9b06      	ldr	r3, [sp, #24]
   2a06c:	4619      	mov	r1, r3
   2a06e:	4291      	cmp	r1, r2
   2a070:	f6bf af10 	bge.w	29e94 <_svfprintf_r+0xf34>
   2a074:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   2a076:	3b02      	subs	r3, #2
   2a078:	930d      	str	r3, [sp, #52]	; 0x34
   2a07a:	f89d 3034 	ldrb.w	r3, [sp, #52]	; 0x34
   2a07e:	f88d 307c 	strb.w	r3, [sp, #124]	; 0x7c
   2a082:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   2a084:	3b01      	subs	r3, #1
   2a086:	2b00      	cmp	r3, #0
   2a088:	931d      	str	r3, [sp, #116]	; 0x74
   2a08a:	bfbd      	ittte	lt
   2a08c:	9b0e      	ldrlt	r3, [sp, #56]	; 0x38
   2a08e:	f1c3 0301 	rsblt	r3, r3, #1
   2a092:	222d      	movlt	r2, #45	; 0x2d
   2a094:	222b      	movge	r2, #43	; 0x2b
   2a096:	2b09      	cmp	r3, #9
   2a098:	f88d 207d 	strb.w	r2, [sp, #125]	; 0x7d
   2a09c:	f340 811d 	ble.w	2a2da <_svfprintf_r+0x137a>
   2a0a0:	f10d 048b 	add.w	r4, sp, #139	; 0x8b
   2a0a4:	4620      	mov	r0, r4
   2a0a6:	4daf      	ldr	r5, [pc, #700]	; (2a364 <_svfprintf_r+0x1404>)
   2a0a8:	e000      	b.n	2a0ac <_svfprintf_r+0x114c>
   2a0aa:	4610      	mov	r0, r2
   2a0ac:	fb85 1203 	smull	r1, r2, r5, r3
   2a0b0:	17d9      	asrs	r1, r3, #31
   2a0b2:	ebc1 01a2 	rsb	r1, r1, r2, asr #2
   2a0b6:	eb01 0281 	add.w	r2, r1, r1, lsl #2
   2a0ba:	eba3 0242 	sub.w	r2, r3, r2, lsl #1
   2a0be:	3230      	adds	r2, #48	; 0x30
   2a0c0:	2909      	cmp	r1, #9
   2a0c2:	f800 2c01 	strb.w	r2, [r0, #-1]
   2a0c6:	460b      	mov	r3, r1
   2a0c8:	f100 32ff 	add.w	r2, r0, #4294967295
   2a0cc:	dced      	bgt.n	2a0aa <_svfprintf_r+0x114a>
   2a0ce:	3330      	adds	r3, #48	; 0x30
   2a0d0:	3802      	subs	r0, #2
   2a0d2:	b2d9      	uxtb	r1, r3
   2a0d4:	4284      	cmp	r4, r0
   2a0d6:	f802 1c01 	strb.w	r1, [r2, #-1]
   2a0da:	f240 8170 	bls.w	2a3be <_svfprintf_r+0x145e>
   2a0de:	f10d 007e 	add.w	r0, sp, #126	; 0x7e
   2a0e2:	4613      	mov	r3, r2
   2a0e4:	e001      	b.n	2a0ea <_svfprintf_r+0x118a>
   2a0e6:	f813 1b01 	ldrb.w	r1, [r3], #1
   2a0ea:	f800 1b01 	strb.w	r1, [r0], #1
   2a0ee:	42a3      	cmp	r3, r4
   2a0f0:	d1f9      	bne.n	2a0e6 <_svfprintf_r+0x1186>
   2a0f2:	3301      	adds	r3, #1
   2a0f4:	1a9b      	subs	r3, r3, r2
   2a0f6:	f10d 027e 	add.w	r2, sp, #126	; 0x7e
   2a0fa:	4413      	add	r3, r2
   2a0fc:	aa1f      	add	r2, sp, #124	; 0x7c
   2a0fe:	1a9b      	subs	r3, r3, r2
   2a100:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
   2a102:	9315      	str	r3, [sp, #84]	; 0x54
   2a104:	2a01      	cmp	r2, #1
   2a106:	4413      	add	r3, r2
   2a108:	930a      	str	r3, [sp, #40]	; 0x28
   2a10a:	f340 8120 	ble.w	2a34e <_svfprintf_r+0x13ee>
   2a10e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   2a110:	9a13      	ldr	r2, [sp, #76]	; 0x4c
   2a112:	4413      	add	r3, r2
   2a114:	930a      	str	r3, [sp, #40]	; 0x28
   2a116:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
   2a11a:	9304      	str	r3, [sp, #16]
   2a11c:	2300      	movs	r3, #0
   2a11e:	930e      	str	r3, [sp, #56]	; 0x38
   2a120:	e6c8      	b.n	29eb4 <_svfprintf_r+0xf54>
   2a122:	4623      	mov	r3, r4
   2a124:	e6a7      	b.n	29e76 <_svfprintf_r+0xf16>
   2a126:	aa23      	add	r2, sp, #140	; 0x8c
   2a128:	9907      	ldr	r1, [sp, #28]
   2a12a:	9808      	ldr	r0, [sp, #32]
   2a12c:	f002 f93e 	bl	2c3ac <__ssprint_r>
   2a130:	2800      	cmp	r0, #0
   2a132:	f47e afe7 	bne.w	29104 <_svfprintf_r+0x1a4>
   2a136:	9c25      	ldr	r4, [sp, #148]	; 0x94
   2a138:	46c8      	mov	r8, r9
   2a13a:	e4d5      	b.n	29ae8 <_svfprintf_r+0xb88>
   2a13c:	aa23      	add	r2, sp, #140	; 0x8c
   2a13e:	9907      	ldr	r1, [sp, #28]
   2a140:	9808      	ldr	r0, [sp, #32]
   2a142:	f002 f933 	bl	2c3ac <__ssprint_r>
   2a146:	2800      	cmp	r0, #0
   2a148:	f47e afdc 	bne.w	29104 <_svfprintf_r+0x1a4>
   2a14c:	9a1d      	ldr	r2, [sp, #116]	; 0x74
   2a14e:	9c25      	ldr	r4, [sp, #148]	; 0x94
   2a150:	46c8      	mov	r8, r9
   2a152:	e5af      	b.n	29cb4 <_svfprintf_r+0xd54>
   2a154:	aa23      	add	r2, sp, #140	; 0x8c
   2a156:	9907      	ldr	r1, [sp, #28]
   2a158:	9808      	ldr	r0, [sp, #32]
   2a15a:	f002 f927 	bl	2c3ac <__ssprint_r>
   2a15e:	2800      	cmp	r0, #0
   2a160:	f47e afd0 	bne.w	29104 <_svfprintf_r+0x1a4>
   2a164:	9a1d      	ldr	r2, [sp, #116]	; 0x74
   2a166:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   2a168:	9c25      	ldr	r4, [sp, #148]	; 0x94
   2a16a:	1a9a      	subs	r2, r3, r2
   2a16c:	46c8      	mov	r8, r9
   2a16e:	e5b9      	b.n	29ce4 <_svfprintf_r+0xd84>
   2a170:	9b06      	ldr	r3, [sp, #24]
   2a172:	960e      	str	r6, [sp, #56]	; 0x38
   2a174:	2b06      	cmp	r3, #6
   2a176:	bf28      	it	cs
   2a178:	2306      	movcs	r3, #6
   2a17a:	9606      	str	r6, [sp, #24]
   2a17c:	4637      	mov	r7, r6
   2a17e:	9304      	str	r3, [sp, #16]
   2a180:	950b      	str	r5, [sp, #44]	; 0x2c
   2a182:	f8cd b00c 	str.w	fp, [sp, #12]
   2a186:	930a      	str	r3, [sp, #40]	; 0x28
   2a188:	4e77      	ldr	r6, [pc, #476]	; (2a368 <_svfprintf_r+0x1408>)
   2a18a:	f7ff b801 	b.w	29190 <_svfprintf_r+0x230>
   2a18e:	2306      	movs	r3, #6
   2a190:	9306      	str	r3, [sp, #24]
   2a192:	e62d      	b.n	29df0 <_svfprintf_r+0xe90>
   2a194:	9c06      	ldr	r4, [sp, #24]
   2a196:	9808      	ldr	r0, [sp, #32]
   2a198:	aa21      	add	r2, sp, #132	; 0x84
   2a19a:	ab1e      	add	r3, sp, #120	; 0x78
   2a19c:	9201      	str	r2, [sp, #4]
   2a19e:	9300      	str	r3, [sp, #0]
   2a1a0:	4622      	mov	r2, r4
   2a1a2:	ab1d      	add	r3, sp, #116	; 0x74
   2a1a4:	2103      	movs	r1, #3
   2a1a6:	ed9d 0b18 	vldr	d0, [sp, #96]	; 0x60
   2a1aa:	f000 faf5 	bl	2a798 <_dtoa_r>
   2a1ae:	4623      	mov	r3, r4
   2a1b0:	4606      	mov	r6, r0
   2a1b2:	1904      	adds	r4, r0, r4
   2a1b4:	461d      	mov	r5, r3
   2a1b6:	e734      	b.n	2a022 <_svfprintf_r+0x10c2>
   2a1b8:	272d      	movs	r7, #45	; 0x2d
   2a1ba:	f88d 706f 	strb.w	r7, [sp, #111]	; 0x6f
   2a1be:	f7ff baca 	b.w	29756 <_svfprintf_r+0x7f6>
   2a1c2:	9a13      	ldr	r2, [sp, #76]	; 0x4c
   2a1c4:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   2a1c6:	4413      	add	r3, r2
   2a1c8:	9a0e      	ldr	r2, [sp, #56]	; 0x38
   2a1ca:	930a      	str	r3, [sp, #40]	; 0x28
   2a1cc:	2a00      	cmp	r2, #0
   2a1ce:	f340 80b7 	ble.w	2a340 <_svfprintf_r+0x13e0>
   2a1d2:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
   2a1d6:	9304      	str	r3, [sp, #16]
   2a1d8:	2367      	movs	r3, #103	; 0x67
   2a1da:	930d      	str	r3, [sp, #52]	; 0x34
   2a1dc:	e66a      	b.n	29eb4 <_svfprintf_r+0xf54>
   2a1de:	e9dd 1210 	ldrd	r1, r2, [sp, #64]	; 0x40
   2a1e2:	f102 4300 	add.w	r3, r2, #2147483648	; 0x80000000
   2a1e6:	9319      	str	r3, [sp, #100]	; 0x64
   2a1e8:	232d      	movs	r3, #45	; 0x2d
   2a1ea:	9118      	str	r1, [sp, #96]	; 0x60
   2a1ec:	930c      	str	r3, [sp, #48]	; 0x30
   2a1ee:	e60c      	b.n	29e0a <_svfprintf_r+0xeaa>
   2a1f0:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   2a1f2:	2b47      	cmp	r3, #71	; 0x47
   2a1f4:	f47f ae2b 	bne.w	29e4e <_svfprintf_r+0xeee>
   2a1f8:	f01b 0f01 	tst.w	fp, #1
   2a1fc:	f47f af0b 	bne.w	2a016 <_svfprintf_r+0x10b6>
   2a200:	9b21      	ldr	r3, [sp, #132]	; 0x84
   2a202:	2f47      	cmp	r7, #71	; 0x47
   2a204:	eba3 0306 	sub.w	r3, r3, r6
   2a208:	930f      	str	r3, [sp, #60]	; 0x3c
   2a20a:	f43f af29 	beq.w	2a060 <_svfprintf_r+0x1100>
   2a20e:	9b1d      	ldr	r3, [sp, #116]	; 0x74
   2a210:	930e      	str	r3, [sp, #56]	; 0x38
   2a212:	e732      	b.n	2a07a <_svfprintf_r+0x111a>
   2a214:	2b00      	cmp	r3, #0
   2a216:	f340 80af 	ble.w	2a378 <_svfprintf_r+0x1418>
   2a21a:	9a06      	ldr	r2, [sp, #24]
   2a21c:	2a00      	cmp	r2, #0
   2a21e:	d16b      	bne.n	2a2f8 <_svfprintf_r+0x1398>
   2a220:	f01b 0f01 	tst.w	fp, #1
   2a224:	d168      	bne.n	2a2f8 <_svfprintf_r+0x1398>
   2a226:	9304      	str	r3, [sp, #16]
   2a228:	930a      	str	r3, [sp, #40]	; 0x28
   2a22a:	e643      	b.n	29eb4 <_svfprintf_r+0xf54>
   2a22c:	9b06      	ldr	r3, [sp, #24]
   2a22e:	9304      	str	r3, [sp, #16]
   2a230:	930a      	str	r3, [sp, #40]	; 0x28
   2a232:	9006      	str	r0, [sp, #24]
   2a234:	950b      	str	r5, [sp, #44]	; 0x2c
   2a236:	f8cd b00c 	str.w	fp, [sp, #12]
   2a23a:	900e      	str	r0, [sp, #56]	; 0x38
   2a23c:	f89d 706f 	ldrb.w	r7, [sp, #111]	; 0x6f
   2a240:	f7fe bfa6 	b.w	29190 <_svfprintf_r+0x230>
   2a244:	2000      	movs	r0, #0
   2a246:	9006      	str	r0, [sp, #24]
   2a248:	f7fe bee4 	b.w	29014 <_svfprintf_r+0xb4>
   2a24c:	424f      	negs	r7, r1
   2a24e:	3110      	adds	r1, #16
   2a250:	4d46      	ldr	r5, [pc, #280]	; (2a36c <_svfprintf_r+0x140c>)
   2a252:	da2b      	bge.n	2a2ac <_svfprintf_r+0x134c>
   2a254:	2410      	movs	r4, #16
   2a256:	f8dd b020 	ldr.w	fp, [sp, #32]
   2a25a:	e004      	b.n	2a266 <_svfprintf_r+0x1306>
   2a25c:	f108 0808 	add.w	r8, r8, #8
   2a260:	3f10      	subs	r7, #16
   2a262:	2f10      	cmp	r7, #16
   2a264:	dd22      	ble.n	2a2ac <_svfprintf_r+0x134c>
   2a266:	3301      	adds	r3, #1
   2a268:	3210      	adds	r2, #16
   2a26a:	2b07      	cmp	r3, #7
   2a26c:	9225      	str	r2, [sp, #148]	; 0x94
   2a26e:	9324      	str	r3, [sp, #144]	; 0x90
   2a270:	f8c8 5000 	str.w	r5, [r8]
   2a274:	f8c8 4004 	str.w	r4, [r8, #4]
   2a278:	ddf0      	ble.n	2a25c <_svfprintf_r+0x12fc>
   2a27a:	aa23      	add	r2, sp, #140	; 0x8c
   2a27c:	9907      	ldr	r1, [sp, #28]
   2a27e:	4658      	mov	r0, fp
   2a280:	f002 f894 	bl	2c3ac <__ssprint_r>
   2a284:	2800      	cmp	r0, #0
   2a286:	f47e af3d 	bne.w	29104 <_svfprintf_r+0x1a4>
   2a28a:	9a25      	ldr	r2, [sp, #148]	; 0x94
   2a28c:	9b24      	ldr	r3, [sp, #144]	; 0x90
   2a28e:	46c8      	mov	r8, r9
   2a290:	e7e6      	b.n	2a260 <_svfprintf_r+0x1300>
   2a292:	aa23      	add	r2, sp, #140	; 0x8c
   2a294:	9907      	ldr	r1, [sp, #28]
   2a296:	9808      	ldr	r0, [sp, #32]
   2a298:	f002 f888 	bl	2c3ac <__ssprint_r>
   2a29c:	2800      	cmp	r0, #0
   2a29e:	f47e af31 	bne.w	29104 <_svfprintf_r+0x1a4>
   2a2a2:	991d      	ldr	r1, [sp, #116]	; 0x74
   2a2a4:	9a25      	ldr	r2, [sp, #148]	; 0x94
   2a2a6:	9b24      	ldr	r3, [sp, #144]	; 0x90
   2a2a8:	46c8      	mov	r8, r9
   2a2aa:	e65f      	b.n	29f6c <_svfprintf_r+0x100c>
   2a2ac:	3301      	adds	r3, #1
   2a2ae:	443a      	add	r2, r7
   2a2b0:	2b07      	cmp	r3, #7
   2a2b2:	e888 00a0 	stmia.w	r8, {r5, r7}
   2a2b6:	9225      	str	r2, [sp, #148]	; 0x94
   2a2b8:	9324      	str	r3, [sp, #144]	; 0x90
   2a2ba:	f108 0808 	add.w	r8, r8, #8
   2a2be:	f77f ae58 	ble.w	29f72 <_svfprintf_r+0x1012>
   2a2c2:	aa23      	add	r2, sp, #140	; 0x8c
   2a2c4:	9907      	ldr	r1, [sp, #28]
   2a2c6:	9808      	ldr	r0, [sp, #32]
   2a2c8:	f002 f870 	bl	2c3ac <__ssprint_r>
   2a2cc:	2800      	cmp	r0, #0
   2a2ce:	f47e af19 	bne.w	29104 <_svfprintf_r+0x1a4>
   2a2d2:	9a25      	ldr	r2, [sp, #148]	; 0x94
   2a2d4:	9b24      	ldr	r3, [sp, #144]	; 0x90
   2a2d6:	46c8      	mov	r8, r9
   2a2d8:	e64b      	b.n	29f72 <_svfprintf_r+0x1012>
   2a2da:	3330      	adds	r3, #48	; 0x30
   2a2dc:	2230      	movs	r2, #48	; 0x30
   2a2de:	f88d 307f 	strb.w	r3, [sp, #127]	; 0x7f
   2a2e2:	f88d 207e 	strb.w	r2, [sp, #126]	; 0x7e
   2a2e6:	ab20      	add	r3, sp, #128	; 0x80
   2a2e8:	e708      	b.n	2a0fc <_svfprintf_r+0x119c>
   2a2ea:	9b21      	ldr	r3, [sp, #132]	; 0x84
   2a2ec:	e5c3      	b.n	29e76 <_svfprintf_r+0xf16>
   2a2ee:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   2a2f0:	9a13      	ldr	r2, [sp, #76]	; 0x4c
   2a2f2:	4413      	add	r3, r2
   2a2f4:	930a      	str	r3, [sp, #40]	; 0x28
   2a2f6:	e76c      	b.n	2a1d2 <_svfprintf_r+0x1272>
   2a2f8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   2a2fa:	9a13      	ldr	r2, [sp, #76]	; 0x4c
   2a2fc:	4413      	add	r3, r2
   2a2fe:	9a06      	ldr	r2, [sp, #24]
   2a300:	441a      	add	r2, r3
   2a302:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
   2a306:	920a      	str	r2, [sp, #40]	; 0x28
   2a308:	9304      	str	r3, [sp, #16]
   2a30a:	e5d3      	b.n	29eb4 <_svfprintf_r+0xf54>
   2a30c:	9b11      	ldr	r3, [sp, #68]	; 0x44
   2a30e:	4e18      	ldr	r6, [pc, #96]	; (2a370 <_svfprintf_r+0x1410>)
   2a310:	2b00      	cmp	r3, #0
   2a312:	bfb6      	itet	lt
   2a314:	272d      	movlt	r7, #45	; 0x2d
   2a316:	f89d 706f 	ldrbge.w	r7, [sp, #111]	; 0x6f
   2a31a:	f88d 706f 	strblt.w	r7, [sp, #111]	; 0x6f
   2a31e:	4b15      	ldr	r3, [pc, #84]	; (2a374 <_svfprintf_r+0x1414>)
   2a320:	f7ff ba1b 	b.w	2975a <_svfprintf_r+0x7fa>
   2a324:	2200      	movs	r2, #0
   2a326:	2300      	movs	r3, #0
   2a328:	e9dd 0118 	ldrd	r0, r1, [sp, #96]	; 0x60
   2a32c:	f7fb fb3e 	bl	259ac <__aeabi_dcmpeq>
   2a330:	2800      	cmp	r0, #0
   2a332:	f47f ae7a 	bne.w	2a02a <_svfprintf_r+0x10ca>
   2a336:	f1c5 0501 	rsb	r5, r5, #1
   2a33a:	951d      	str	r5, [sp, #116]	; 0x74
   2a33c:	442c      	add	r4, r5
   2a33e:	e587      	b.n	29e50 <_svfprintf_r+0xef0>
   2a340:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   2a342:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   2a344:	f1c3 0301 	rsb	r3, r3, #1
   2a348:	441a      	add	r2, r3
   2a34a:	4613      	mov	r3, r2
   2a34c:	e7d2      	b.n	2a2f4 <_svfprintf_r+0x1394>
   2a34e:	f01b 0301 	ands.w	r3, fp, #1
   2a352:	930e      	str	r3, [sp, #56]	; 0x38
   2a354:	f47f aedb 	bne.w	2a10e <_svfprintf_r+0x11ae>
   2a358:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   2a35a:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
   2a35e:	9304      	str	r3, [sp, #16]
   2a360:	e5a8      	b.n	29eb4 <_svfprintf_r+0xf54>
   2a362:	bf00      	nop
   2a364:	66666667 	.word	0x66666667
   2a368:	0002ee10 	.word	0x0002ee10
   2a36c:	0002ee2c 	.word	0x0002ee2c
   2a370:	0002ede4 	.word	0x0002ede4
   2a374:	0002ede0 	.word	0x0002ede0
   2a378:	9b06      	ldr	r3, [sp, #24]
   2a37a:	b913      	cbnz	r3, 2a382 <_svfprintf_r+0x1422>
   2a37c:	f01b 0f01 	tst.w	fp, #1
   2a380:	d002      	beq.n	2a388 <_svfprintf_r+0x1428>
   2a382:	9b13      	ldr	r3, [sp, #76]	; 0x4c
   2a384:	3301      	adds	r3, #1
   2a386:	e7ba      	b.n	2a2fe <_svfprintf_r+0x139e>
   2a388:	2301      	movs	r3, #1
   2a38a:	e74c      	b.n	2a226 <_svfprintf_r+0x12c6>
   2a38c:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
   2a38e:	f89a 3001 	ldrb.w	r3, [sl, #1]
   2a392:	6828      	ldr	r0, [r5, #0]
   2a394:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   2a398:	9006      	str	r0, [sp, #24]
   2a39a:	4628      	mov	r0, r5
   2a39c:	3004      	adds	r0, #4
   2a39e:	46a2      	mov	sl, r4
   2a3a0:	900b      	str	r0, [sp, #44]	; 0x2c
   2a3a2:	f7fe be35 	b.w	29010 <_svfprintf_r+0xb0>
   2a3a6:	f88d 106f 	strb.w	r1, [sp, #111]	; 0x6f
   2a3aa:	f7ff b852 	b.w	29452 <_svfprintf_r+0x4f2>
   2a3ae:	f88d 106f 	strb.w	r1, [sp, #111]	; 0x6f
   2a3b2:	f7ff b8de 	b.w	29572 <_svfprintf_r+0x612>
   2a3b6:	f88d 106f 	strb.w	r1, [sp, #111]	; 0x6f
   2a3ba:	f7ff ba07 	b.w	297cc <_svfprintf_r+0x86c>
   2a3be:	f10d 037e 	add.w	r3, sp, #126	; 0x7e
   2a3c2:	e69b      	b.n	2a0fc <_svfprintf_r+0x119c>
   2a3c4:	9a08      	ldr	r2, [sp, #32]
   2a3c6:	230c      	movs	r3, #12
   2a3c8:	6013      	str	r3, [r2, #0]
   2a3ca:	f04f 33ff 	mov.w	r3, #4294967295
   2a3ce:	9305      	str	r3, [sp, #20]
   2a3d0:	f7fe bea1 	b.w	29116 <_svfprintf_r+0x1b6>
   2a3d4:	f88d 106f 	strb.w	r1, [sp, #111]	; 0x6f
   2a3d8:	f7ff b986 	b.w	296e8 <_svfprintf_r+0x788>
   2a3dc:	f88d 106f 	strb.w	r1, [sp, #111]	; 0x6f
   2a3e0:	f7ff b962 	b.w	296a8 <_svfprintf_r+0x748>
   2a3e4:	f88d 106f 	strb.w	r1, [sp, #111]	; 0x6f
   2a3e8:	f7ff b945 	b.w	29676 <_svfprintf_r+0x716>
   2a3ec:	f88d 106f 	strb.w	r1, [sp, #111]	; 0x6f
   2a3f0:	f7ff b8fe 	b.w	295f0 <_svfprintf_r+0x690>

0002a3f4 <write>:
   2a3f4:	b410      	push	{r4}
   2a3f6:	4c04      	ldr	r4, [pc, #16]	; (2a408 <write+0x14>)
   2a3f8:	4613      	mov	r3, r2
   2a3fa:	460a      	mov	r2, r1
   2a3fc:	4601      	mov	r1, r0
   2a3fe:	6820      	ldr	r0, [r4, #0]
   2a400:	f85d 4b04 	ldr.w	r4, [sp], #4
   2a404:	f000 b8aa 	b.w	2a55c <_write_r>
   2a408:	20000108 	.word	0x20000108

0002a40c <__utoa>:
   2a40c:	b5f0      	push	{r4, r5, r6, r7, lr}
   2a40e:	f8df e078 	ldr.w	lr, [pc, #120]	; 2a488 <__utoa+0x7c>
   2a412:	4616      	mov	r6, r2
   2a414:	4604      	mov	r4, r0
   2a416:	460f      	mov	r7, r1
   2a418:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
   2a41c:	b08b      	sub	sp, #44	; 0x2c
   2a41e:	466d      	mov	r5, sp
   2a420:	c50f      	stmia	r5!, {r0, r1, r2, r3}
   2a422:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
   2a426:	c50f      	stmia	r5!, {r0, r1, r2, r3}
   2a428:	e89e 0003 	ldmia.w	lr, {r0, r1}
   2a42c:	1eb3      	subs	r3, r6, #2
   2a42e:	f845 0b04 	str.w	r0, [r5], #4
   2a432:	2b22      	cmp	r3, #34	; 0x22
   2a434:	7029      	strb	r1, [r5, #0]
   2a436:	d822      	bhi.n	2a47e <__utoa+0x72>
   2a438:	1e7d      	subs	r5, r7, #1
   2a43a:	4628      	mov	r0, r5
   2a43c:	2200      	movs	r2, #0
   2a43e:	e000      	b.n	2a442 <__utoa+0x36>
   2a440:	461a      	mov	r2, r3
   2a442:	fbb4 f1f6 	udiv	r1, r4, r6
   2a446:	ab0a      	add	r3, sp, #40	; 0x28
   2a448:	fb06 4411 	mls	r4, r6, r1, r4
   2a44c:	4423      	add	r3, r4
   2a44e:	460c      	mov	r4, r1
   2a450:	f813 3c28 	ldrb.w	r3, [r3, #-40]
   2a454:	f800 3f01 	strb.w	r3, [r0, #1]!
   2a458:	1c53      	adds	r3, r2, #1
   2a45a:	2900      	cmp	r1, #0
   2a45c:	d1f0      	bne.n	2a440 <__utoa+0x34>
   2a45e:	54f9      	strb	r1, [r7, r3]
   2a460:	18bb      	adds	r3, r7, r2
   2a462:	b14a      	cbz	r2, 2a478 <__utoa+0x6c>
   2a464:	7819      	ldrb	r1, [r3, #0]
   2a466:	7868      	ldrb	r0, [r5, #1]
   2a468:	f805 1f01 	strb.w	r1, [r5, #1]!
   2a46c:	3401      	adds	r4, #1
   2a46e:	1b11      	subs	r1, r2, r4
   2a470:	428c      	cmp	r4, r1
   2a472:	f803 0901 	strb.w	r0, [r3], #-1
   2a476:	dbf5      	blt.n	2a464 <__utoa+0x58>
   2a478:	4638      	mov	r0, r7
   2a47a:	b00b      	add	sp, #44	; 0x2c
   2a47c:	bdf0      	pop	{r4, r5, r6, r7, pc}
   2a47e:	2000      	movs	r0, #0
   2a480:	7038      	strb	r0, [r7, #0]
   2a482:	b00b      	add	sp, #44	; 0x2c
   2a484:	bdf0      	pop	{r4, r5, r6, r7, pc}
   2a486:	bf00      	nop
   2a488:	0002ee3c 	.word	0x0002ee3c

0002a48c <utoa>:
   2a48c:	f7ff bfbe 	b.w	2a40c <__utoa>

0002a490 <__swbuf_r>:
   2a490:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   2a492:	460d      	mov	r5, r1
   2a494:	4614      	mov	r4, r2
   2a496:	4606      	mov	r6, r0
   2a498:	b110      	cbz	r0, 2a4a0 <__swbuf_r+0x10>
   2a49a:	6b83      	ldr	r3, [r0, #56]	; 0x38
   2a49c:	2b00      	cmp	r3, #0
   2a49e:	d04b      	beq.n	2a538 <__swbuf_r+0xa8>
   2a4a0:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
   2a4a4:	69a3      	ldr	r3, [r4, #24]
   2a4a6:	60a3      	str	r3, [r4, #8]
   2a4a8:	b291      	uxth	r1, r2
   2a4aa:	0708      	lsls	r0, r1, #28
   2a4ac:	d539      	bpl.n	2a522 <__swbuf_r+0x92>
   2a4ae:	6923      	ldr	r3, [r4, #16]
   2a4b0:	2b00      	cmp	r3, #0
   2a4b2:	d036      	beq.n	2a522 <__swbuf_r+0x92>
   2a4b4:	b2ed      	uxtb	r5, r5
   2a4b6:	0489      	lsls	r1, r1, #18
   2a4b8:	462f      	mov	r7, r5
   2a4ba:	d515      	bpl.n	2a4e8 <__swbuf_r+0x58>
   2a4bc:	6822      	ldr	r2, [r4, #0]
   2a4be:	6961      	ldr	r1, [r4, #20]
   2a4c0:	1ad3      	subs	r3, r2, r3
   2a4c2:	428b      	cmp	r3, r1
   2a4c4:	da1c      	bge.n	2a500 <__swbuf_r+0x70>
   2a4c6:	3301      	adds	r3, #1
   2a4c8:	68a1      	ldr	r1, [r4, #8]
   2a4ca:	1c50      	adds	r0, r2, #1
   2a4cc:	3901      	subs	r1, #1
   2a4ce:	60a1      	str	r1, [r4, #8]
   2a4d0:	6020      	str	r0, [r4, #0]
   2a4d2:	7015      	strb	r5, [r2, #0]
   2a4d4:	6962      	ldr	r2, [r4, #20]
   2a4d6:	429a      	cmp	r2, r3
   2a4d8:	d01a      	beq.n	2a510 <__swbuf_r+0x80>
   2a4da:	89a3      	ldrh	r3, [r4, #12]
   2a4dc:	07db      	lsls	r3, r3, #31
   2a4de:	d501      	bpl.n	2a4e4 <__swbuf_r+0x54>
   2a4e0:	2d0a      	cmp	r5, #10
   2a4e2:	d015      	beq.n	2a510 <__swbuf_r+0x80>
   2a4e4:	4638      	mov	r0, r7
   2a4e6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   2a4e8:	6e61      	ldr	r1, [r4, #100]	; 0x64
   2a4ea:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
   2a4ee:	f421 5100 	bic.w	r1, r1, #8192	; 0x2000
   2a4f2:	81a2      	strh	r2, [r4, #12]
   2a4f4:	6822      	ldr	r2, [r4, #0]
   2a4f6:	6661      	str	r1, [r4, #100]	; 0x64
   2a4f8:	6961      	ldr	r1, [r4, #20]
   2a4fa:	1ad3      	subs	r3, r2, r3
   2a4fc:	428b      	cmp	r3, r1
   2a4fe:	dbe2      	blt.n	2a4c6 <__swbuf_r+0x36>
   2a500:	4621      	mov	r1, r4
   2a502:	4630      	mov	r0, r6
   2a504:	f001 f90e 	bl	2b724 <_fflush_r>
   2a508:	b940      	cbnz	r0, 2a51c <__swbuf_r+0x8c>
   2a50a:	6822      	ldr	r2, [r4, #0]
   2a50c:	2301      	movs	r3, #1
   2a50e:	e7db      	b.n	2a4c8 <__swbuf_r+0x38>
   2a510:	4621      	mov	r1, r4
   2a512:	4630      	mov	r0, r6
   2a514:	f001 f906 	bl	2b724 <_fflush_r>
   2a518:	2800      	cmp	r0, #0
   2a51a:	d0e3      	beq.n	2a4e4 <__swbuf_r+0x54>
   2a51c:	f04f 37ff 	mov.w	r7, #4294967295
   2a520:	e7e0      	b.n	2a4e4 <__swbuf_r+0x54>
   2a522:	4621      	mov	r1, r4
   2a524:	4630      	mov	r0, r6
   2a526:	f000 f82f 	bl	2a588 <__swsetup_r>
   2a52a:	2800      	cmp	r0, #0
   2a52c:	d1f6      	bne.n	2a51c <__swbuf_r+0x8c>
   2a52e:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
   2a532:	6923      	ldr	r3, [r4, #16]
   2a534:	b291      	uxth	r1, r2
   2a536:	e7bd      	b.n	2a4b4 <__swbuf_r+0x24>
   2a538:	f001 f94c 	bl	2b7d4 <__sinit>
   2a53c:	e7b0      	b.n	2a4a0 <__swbuf_r+0x10>
   2a53e:	bf00      	nop

0002a540 <__ascii_wctomb>:
   2a540:	b121      	cbz	r1, 2a54c <__ascii_wctomb+0xc>
   2a542:	2aff      	cmp	r2, #255	; 0xff
   2a544:	d804      	bhi.n	2a550 <__ascii_wctomb+0x10>
   2a546:	700a      	strb	r2, [r1, #0]
   2a548:	2001      	movs	r0, #1
   2a54a:	4770      	bx	lr
   2a54c:	4608      	mov	r0, r1
   2a54e:	4770      	bx	lr
   2a550:	238a      	movs	r3, #138	; 0x8a
   2a552:	6003      	str	r3, [r0, #0]
   2a554:	f04f 30ff 	mov.w	r0, #4294967295
   2a558:	4770      	bx	lr
   2a55a:	bf00      	nop

0002a55c <_write_r>:
   2a55c:	b570      	push	{r4, r5, r6, lr}
   2a55e:	460d      	mov	r5, r1
   2a560:	4c08      	ldr	r4, [pc, #32]	; (2a584 <_write_r+0x28>)
   2a562:	4611      	mov	r1, r2
   2a564:	4606      	mov	r6, r0
   2a566:	461a      	mov	r2, r3
   2a568:	4628      	mov	r0, r5
   2a56a:	2300      	movs	r3, #0
   2a56c:	6023      	str	r3, [r4, #0]
   2a56e:	f002 f9a7 	bl	2c8c0 <_write>
   2a572:	1c43      	adds	r3, r0, #1
   2a574:	d000      	beq.n	2a578 <_write_r+0x1c>
   2a576:	bd70      	pop	{r4, r5, r6, pc}
   2a578:	6823      	ldr	r3, [r4, #0]
   2a57a:	2b00      	cmp	r3, #0
   2a57c:	d0fb      	beq.n	2a576 <_write_r+0x1a>
   2a57e:	6033      	str	r3, [r6, #0]
   2a580:	bd70      	pop	{r4, r5, r6, pc}
   2a582:	bf00      	nop
   2a584:	2000a440 	.word	0x2000a440

0002a588 <__swsetup_r>:
   2a588:	b538      	push	{r3, r4, r5, lr}
   2a58a:	4b30      	ldr	r3, [pc, #192]	; (2a64c <__swsetup_r+0xc4>)
   2a58c:	681b      	ldr	r3, [r3, #0]
   2a58e:	4605      	mov	r5, r0
   2a590:	460c      	mov	r4, r1
   2a592:	b113      	cbz	r3, 2a59a <__swsetup_r+0x12>
   2a594:	6b9a      	ldr	r2, [r3, #56]	; 0x38
   2a596:	2a00      	cmp	r2, #0
   2a598:	d038      	beq.n	2a60c <__swsetup_r+0x84>
   2a59a:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
   2a59e:	b293      	uxth	r3, r2
   2a5a0:	0718      	lsls	r0, r3, #28
   2a5a2:	d50c      	bpl.n	2a5be <__swsetup_r+0x36>
   2a5a4:	6920      	ldr	r0, [r4, #16]
   2a5a6:	b1a8      	cbz	r0, 2a5d4 <__swsetup_r+0x4c>
   2a5a8:	f013 0201 	ands.w	r2, r3, #1
   2a5ac:	d01e      	beq.n	2a5ec <__swsetup_r+0x64>
   2a5ae:	6963      	ldr	r3, [r4, #20]
   2a5b0:	2200      	movs	r2, #0
   2a5b2:	425b      	negs	r3, r3
   2a5b4:	61a3      	str	r3, [r4, #24]
   2a5b6:	60a2      	str	r2, [r4, #8]
   2a5b8:	b1f0      	cbz	r0, 2a5f8 <__swsetup_r+0x70>
   2a5ba:	2000      	movs	r0, #0
   2a5bc:	bd38      	pop	{r3, r4, r5, pc}
   2a5be:	06d9      	lsls	r1, r3, #27
   2a5c0:	d53c      	bpl.n	2a63c <__swsetup_r+0xb4>
   2a5c2:	0758      	lsls	r0, r3, #29
   2a5c4:	d426      	bmi.n	2a614 <__swsetup_r+0x8c>
   2a5c6:	6920      	ldr	r0, [r4, #16]
   2a5c8:	f042 0308 	orr.w	r3, r2, #8
   2a5cc:	81a3      	strh	r3, [r4, #12]
   2a5ce:	b29b      	uxth	r3, r3
   2a5d0:	2800      	cmp	r0, #0
   2a5d2:	d1e9      	bne.n	2a5a8 <__swsetup_r+0x20>
   2a5d4:	f403 7220 	and.w	r2, r3, #640	; 0x280
   2a5d8:	f5b2 7f00 	cmp.w	r2, #512	; 0x200
   2a5dc:	d0e4      	beq.n	2a5a8 <__swsetup_r+0x20>
   2a5de:	4628      	mov	r0, r5
   2a5e0:	4621      	mov	r1, r4
   2a5e2:	f001 fae5 	bl	2bbb0 <__smakebuf_r>
   2a5e6:	89a3      	ldrh	r3, [r4, #12]
   2a5e8:	6920      	ldr	r0, [r4, #16]
   2a5ea:	e7dd      	b.n	2a5a8 <__swsetup_r+0x20>
   2a5ec:	0799      	lsls	r1, r3, #30
   2a5ee:	bf58      	it	pl
   2a5f0:	6962      	ldrpl	r2, [r4, #20]
   2a5f2:	60a2      	str	r2, [r4, #8]
   2a5f4:	2800      	cmp	r0, #0
   2a5f6:	d1e0      	bne.n	2a5ba <__swsetup_r+0x32>
   2a5f8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   2a5fc:	061a      	lsls	r2, r3, #24
   2a5fe:	d5dd      	bpl.n	2a5bc <__swsetup_r+0x34>
   2a600:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   2a604:	81a3      	strh	r3, [r4, #12]
   2a606:	f04f 30ff 	mov.w	r0, #4294967295
   2a60a:	bd38      	pop	{r3, r4, r5, pc}
   2a60c:	4618      	mov	r0, r3
   2a60e:	f001 f8e1 	bl	2b7d4 <__sinit>
   2a612:	e7c2      	b.n	2a59a <__swsetup_r+0x12>
   2a614:	6b21      	ldr	r1, [r4, #48]	; 0x30
   2a616:	b151      	cbz	r1, 2a62e <__swsetup_r+0xa6>
   2a618:	f104 0340 	add.w	r3, r4, #64	; 0x40
   2a61c:	4299      	cmp	r1, r3
   2a61e:	d004      	beq.n	2a62a <__swsetup_r+0xa2>
   2a620:	4628      	mov	r0, r5
   2a622:	f001 f979 	bl	2b918 <_free_r>
   2a626:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
   2a62a:	2300      	movs	r3, #0
   2a62c:	6323      	str	r3, [r4, #48]	; 0x30
   2a62e:	2300      	movs	r3, #0
   2a630:	6920      	ldr	r0, [r4, #16]
   2a632:	6063      	str	r3, [r4, #4]
   2a634:	f022 0224 	bic.w	r2, r2, #36	; 0x24
   2a638:	6020      	str	r0, [r4, #0]
   2a63a:	e7c5      	b.n	2a5c8 <__swsetup_r+0x40>
   2a63c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
   2a640:	2309      	movs	r3, #9
   2a642:	602b      	str	r3, [r5, #0]
   2a644:	f04f 30ff 	mov.w	r0, #4294967295
   2a648:	81a2      	strh	r2, [r4, #12]
   2a64a:	bd38      	pop	{r3, r4, r5, pc}
   2a64c:	20000108 	.word	0x20000108

0002a650 <register_fini>:
   2a650:	4b02      	ldr	r3, [pc, #8]	; (2a65c <register_fini+0xc>)
   2a652:	b113      	cbz	r3, 2a65a <register_fini+0xa>
   2a654:	4802      	ldr	r0, [pc, #8]	; (2a660 <register_fini+0x10>)
   2a656:	f000 b805 	b.w	2a664 <atexit>
   2a65a:	4770      	bx	lr
   2a65c:	00000000 	.word	0x00000000
   2a660:	0002b845 	.word	0x0002b845

0002a664 <atexit>:
   2a664:	2300      	movs	r3, #0
   2a666:	4601      	mov	r1, r0
   2a668:	461a      	mov	r2, r3
   2a66a:	4618      	mov	r0, r3
   2a66c:	f001 bf1c 	b.w	2c4a8 <__register_exitproc>

0002a670 <quorem>:
   2a670:	6902      	ldr	r2, [r0, #16]
   2a672:	690b      	ldr	r3, [r1, #16]
   2a674:	4293      	cmp	r3, r2
   2a676:	f300 808d 	bgt.w	2a794 <quorem+0x124>
   2a67a:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2a67e:	f103 38ff 	add.w	r8, r3, #4294967295
   2a682:	f101 0714 	add.w	r7, r1, #20
   2a686:	f100 0b14 	add.w	fp, r0, #20
   2a68a:	f857 2028 	ldr.w	r2, [r7, r8, lsl #2]
   2a68e:	f85b 3028 	ldr.w	r3, [fp, r8, lsl #2]
   2a692:	ea4f 0488 	mov.w	r4, r8, lsl #2
   2a696:	b083      	sub	sp, #12
   2a698:	3201      	adds	r2, #1
   2a69a:	fbb3 f9f2 	udiv	r9, r3, r2
   2a69e:	eb0b 0304 	add.w	r3, fp, r4
   2a6a2:	9400      	str	r4, [sp, #0]
   2a6a4:	eb07 0a04 	add.w	sl, r7, r4
   2a6a8:	9301      	str	r3, [sp, #4]
   2a6aa:	f1b9 0f00 	cmp.w	r9, #0
   2a6ae:	d039      	beq.n	2a724 <quorem+0xb4>
   2a6b0:	2500      	movs	r5, #0
   2a6b2:	462e      	mov	r6, r5
   2a6b4:	46bc      	mov	ip, r7
   2a6b6:	46de      	mov	lr, fp
   2a6b8:	f85c 4b04 	ldr.w	r4, [ip], #4
   2a6bc:	f8de 3000 	ldr.w	r3, [lr]
   2a6c0:	b2a2      	uxth	r2, r4
   2a6c2:	fb09 5502 	mla	r5, r9, r2, r5
   2a6c6:	0c22      	lsrs	r2, r4, #16
   2a6c8:	0c2c      	lsrs	r4, r5, #16
   2a6ca:	fb09 4202 	mla	r2, r9, r2, r4
   2a6ce:	b2ad      	uxth	r5, r5
   2a6d0:	1b75      	subs	r5, r6, r5
   2a6d2:	b296      	uxth	r6, r2
   2a6d4:	ebc6 4613 	rsb	r6, r6, r3, lsr #16
   2a6d8:	fa15 f383 	uxtah	r3, r5, r3
   2a6dc:	eb06 4623 	add.w	r6, r6, r3, asr #16
   2a6e0:	b29b      	uxth	r3, r3
   2a6e2:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
   2a6e6:	45e2      	cmp	sl, ip
   2a6e8:	ea4f 4512 	mov.w	r5, r2, lsr #16
   2a6ec:	f84e 3b04 	str.w	r3, [lr], #4
   2a6f0:	ea4f 4626 	mov.w	r6, r6, asr #16
   2a6f4:	d2e0      	bcs.n	2a6b8 <quorem+0x48>
   2a6f6:	9b00      	ldr	r3, [sp, #0]
   2a6f8:	f85b 3003 	ldr.w	r3, [fp, r3]
   2a6fc:	b993      	cbnz	r3, 2a724 <quorem+0xb4>
   2a6fe:	9c01      	ldr	r4, [sp, #4]
   2a700:	1f23      	subs	r3, r4, #4
   2a702:	459b      	cmp	fp, r3
   2a704:	d20c      	bcs.n	2a720 <quorem+0xb0>
   2a706:	f854 3c04 	ldr.w	r3, [r4, #-4]
   2a70a:	b94b      	cbnz	r3, 2a720 <quorem+0xb0>
   2a70c:	f1a4 0308 	sub.w	r3, r4, #8
   2a710:	e002      	b.n	2a718 <quorem+0xa8>
   2a712:	681a      	ldr	r2, [r3, #0]
   2a714:	3b04      	subs	r3, #4
   2a716:	b91a      	cbnz	r2, 2a720 <quorem+0xb0>
   2a718:	459b      	cmp	fp, r3
   2a71a:	f108 38ff 	add.w	r8, r8, #4294967295
   2a71e:	d3f8      	bcc.n	2a712 <quorem+0xa2>
   2a720:	f8c0 8010 	str.w	r8, [r0, #16]
   2a724:	4604      	mov	r4, r0
   2a726:	f001 fc8b 	bl	2c040 <__mcmp>
   2a72a:	2800      	cmp	r0, #0
   2a72c:	db2e      	blt.n	2a78c <quorem+0x11c>
   2a72e:	f109 0901 	add.w	r9, r9, #1
   2a732:	465d      	mov	r5, fp
   2a734:	2300      	movs	r3, #0
   2a736:	f857 1b04 	ldr.w	r1, [r7], #4
   2a73a:	6828      	ldr	r0, [r5, #0]
   2a73c:	b28a      	uxth	r2, r1
   2a73e:	1a9a      	subs	r2, r3, r2
   2a740:	0c0b      	lsrs	r3, r1, #16
   2a742:	fa12 f280 	uxtah	r2, r2, r0
   2a746:	ebc3 4310 	rsb	r3, r3, r0, lsr #16
   2a74a:	eb03 4322 	add.w	r3, r3, r2, asr #16
   2a74e:	b292      	uxth	r2, r2
   2a750:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
   2a754:	45ba      	cmp	sl, r7
   2a756:	f845 2b04 	str.w	r2, [r5], #4
   2a75a:	ea4f 4323 	mov.w	r3, r3, asr #16
   2a75e:	d2ea      	bcs.n	2a736 <quorem+0xc6>
   2a760:	f85b 2028 	ldr.w	r2, [fp, r8, lsl #2]
   2a764:	eb0b 0388 	add.w	r3, fp, r8, lsl #2
   2a768:	b982      	cbnz	r2, 2a78c <quorem+0x11c>
   2a76a:	1f1a      	subs	r2, r3, #4
   2a76c:	4593      	cmp	fp, r2
   2a76e:	d20b      	bcs.n	2a788 <quorem+0x118>
   2a770:	f853 2c04 	ldr.w	r2, [r3, #-4]
   2a774:	b942      	cbnz	r2, 2a788 <quorem+0x118>
   2a776:	3b08      	subs	r3, #8
   2a778:	e002      	b.n	2a780 <quorem+0x110>
   2a77a:	681a      	ldr	r2, [r3, #0]
   2a77c:	3b04      	subs	r3, #4
   2a77e:	b91a      	cbnz	r2, 2a788 <quorem+0x118>
   2a780:	459b      	cmp	fp, r3
   2a782:	f108 38ff 	add.w	r8, r8, #4294967295
   2a786:	d3f8      	bcc.n	2a77a <quorem+0x10a>
   2a788:	f8c4 8010 	str.w	r8, [r4, #16]
   2a78c:	4648      	mov	r0, r9
   2a78e:	b003      	add	sp, #12
   2a790:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2a794:	2000      	movs	r0, #0
   2a796:	4770      	bx	lr

0002a798 <_dtoa_r>:
   2a798:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2a79c:	ec57 6b10 	vmov	r6, r7, d0
   2a7a0:	b097      	sub	sp, #92	; 0x5c
   2a7a2:	6c05      	ldr	r5, [r0, #64]	; 0x40
   2a7a4:	9102      	str	r1, [sp, #8]
   2a7a6:	4604      	mov	r4, r0
   2a7a8:	4693      	mov	fp, r2
   2a7aa:	9303      	str	r3, [sp, #12]
   2a7ac:	e9cd 6700 	strd	r6, r7, [sp]
   2a7b0:	b14d      	cbz	r5, 2a7c6 <_dtoa_r+0x2e>
   2a7b2:	6c42      	ldr	r2, [r0, #68]	; 0x44
   2a7b4:	606a      	str	r2, [r5, #4]
   2a7b6:	2301      	movs	r3, #1
   2a7b8:	4093      	lsls	r3, r2
   2a7ba:	60ab      	str	r3, [r5, #8]
   2a7bc:	4629      	mov	r1, r5
   2a7be:	f001 fa67 	bl	2bc90 <_Bfree>
   2a7c2:	2300      	movs	r3, #0
   2a7c4:	6423      	str	r3, [r4, #64]	; 0x40
   2a7c6:	e9dd 2300 	ldrd	r2, r3, [sp]
   2a7ca:	2b00      	cmp	r3, #0
   2a7cc:	4699      	mov	r9, r3
   2a7ce:	db38      	blt.n	2a842 <_dtoa_r+0xaa>
   2a7d0:	9a20      	ldr	r2, [sp, #128]	; 0x80
   2a7d2:	2300      	movs	r3, #0
   2a7d4:	6013      	str	r3, [r2, #0]
   2a7d6:	4ba0      	ldr	r3, [pc, #640]	; (2aa58 <_dtoa_r+0x2c0>)
   2a7d8:	ea33 0309 	bics.w	r3, r3, r9
   2a7dc:	d017      	beq.n	2a80e <_dtoa_r+0x76>
   2a7de:	e9dd 6700 	ldrd	r6, r7, [sp]
   2a7e2:	2200      	movs	r2, #0
   2a7e4:	2300      	movs	r3, #0
   2a7e6:	4630      	mov	r0, r6
   2a7e8:	4639      	mov	r1, r7
   2a7ea:	f7fb f8df 	bl	259ac <__aeabi_dcmpeq>
   2a7ee:	4680      	mov	r8, r0
   2a7f0:	2800      	cmp	r0, #0
   2a7f2:	d02f      	beq.n	2a854 <_dtoa_r+0xbc>
   2a7f4:	9a03      	ldr	r2, [sp, #12]
   2a7f6:	2301      	movs	r3, #1
   2a7f8:	6013      	str	r3, [r2, #0]
   2a7fa:	9b21      	ldr	r3, [sp, #132]	; 0x84
   2a7fc:	2b00      	cmp	r3, #0
   2a7fe:	f000 80c4 	beq.w	2a98a <_dtoa_r+0x1f2>
   2a802:	4896      	ldr	r0, [pc, #600]	; (2aa5c <_dtoa_r+0x2c4>)
   2a804:	6018      	str	r0, [r3, #0]
   2a806:	3801      	subs	r0, #1
   2a808:	b017      	add	sp, #92	; 0x5c
   2a80a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2a80e:	9a03      	ldr	r2, [sp, #12]
   2a810:	f242 730f 	movw	r3, #9999	; 0x270f
   2a814:	6013      	str	r3, [r2, #0]
   2a816:	9b00      	ldr	r3, [sp, #0]
   2a818:	b96b      	cbnz	r3, 2a836 <_dtoa_r+0x9e>
   2a81a:	f3c9 0313 	ubfx	r3, r9, #0, #20
   2a81e:	b953      	cbnz	r3, 2a836 <_dtoa_r+0x9e>
   2a820:	9b21      	ldr	r3, [sp, #132]	; 0x84
   2a822:	488f      	ldr	r0, [pc, #572]	; (2aa60 <_dtoa_r+0x2c8>)
   2a824:	2b00      	cmp	r3, #0
   2a826:	d0ef      	beq.n	2a808 <_dtoa_r+0x70>
   2a828:	f100 0308 	add.w	r3, r0, #8
   2a82c:	9a21      	ldr	r2, [sp, #132]	; 0x84
   2a82e:	6013      	str	r3, [r2, #0]
   2a830:	b017      	add	sp, #92	; 0x5c
   2a832:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2a836:	9b21      	ldr	r3, [sp, #132]	; 0x84
   2a838:	488a      	ldr	r0, [pc, #552]	; (2aa64 <_dtoa_r+0x2cc>)
   2a83a:	2b00      	cmp	r3, #0
   2a83c:	d0e4      	beq.n	2a808 <_dtoa_r+0x70>
   2a83e:	1cc3      	adds	r3, r0, #3
   2a840:	e7f4      	b.n	2a82c <_dtoa_r+0x94>
   2a842:	9a01      	ldr	r2, [sp, #4]
   2a844:	f022 4900 	bic.w	r9, r2, #2147483648	; 0x80000000
   2a848:	9a20      	ldr	r2, [sp, #128]	; 0x80
   2a84a:	f8cd 9004 	str.w	r9, [sp, #4]
   2a84e:	2301      	movs	r3, #1
   2a850:	6013      	str	r3, [r2, #0]
   2a852:	e7c0      	b.n	2a7d6 <_dtoa_r+0x3e>
   2a854:	aa14      	add	r2, sp, #80	; 0x50
   2a856:	a915      	add	r1, sp, #84	; 0x54
   2a858:	ec47 6b10 	vmov	d0, r6, r7
   2a85c:	4620      	mov	r0, r4
   2a85e:	f001 fc8f 	bl	2c180 <__d2b>
   2a862:	ea5f 5519 	movs.w	r5, r9, lsr #20
   2a866:	4682      	mov	sl, r0
   2a868:	d073      	beq.n	2a952 <_dtoa_r+0x1ba>
   2a86a:	f3c7 0313 	ubfx	r3, r7, #0, #20
   2a86e:	f043 517f 	orr.w	r1, r3, #1069547520	; 0x3fc00000
   2a872:	f8cd 8040 	str.w	r8, [sp, #64]	; 0x40
   2a876:	f8dd 8050 	ldr.w	r8, [sp, #80]	; 0x50
   2a87a:	4630      	mov	r0, r6
   2a87c:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
   2a880:	f441 1140 	orr.w	r1, r1, #3145728	; 0x300000
   2a884:	2200      	movs	r2, #0
   2a886:	4b78      	ldr	r3, [pc, #480]	; (2aa68 <_dtoa_r+0x2d0>)
   2a888:	f7fa fc74 	bl	25174 <__aeabi_dsub>
   2a88c:	a36c      	add	r3, pc, #432	; (adr r3, 2aa40 <_dtoa_r+0x2a8>)
   2a88e:	e9d3 2300 	ldrd	r2, r3, [r3]
   2a892:	f7fa fe23 	bl	254dc <__aeabi_dmul>
   2a896:	a36c      	add	r3, pc, #432	; (adr r3, 2aa48 <_dtoa_r+0x2b0>)
   2a898:	e9d3 2300 	ldrd	r2, r3, [r3]
   2a89c:	f7fa fc6c 	bl	25178 <__adddf3>
   2a8a0:	4606      	mov	r6, r0
   2a8a2:	4628      	mov	r0, r5
   2a8a4:	460f      	mov	r7, r1
   2a8a6:	f7fa fdb3 	bl	25410 <__aeabi_i2d>
   2a8aa:	a369      	add	r3, pc, #420	; (adr r3, 2aa50 <_dtoa_r+0x2b8>)
   2a8ac:	e9d3 2300 	ldrd	r2, r3, [r3]
   2a8b0:	f7fa fe14 	bl	254dc <__aeabi_dmul>
   2a8b4:	4602      	mov	r2, r0
   2a8b6:	460b      	mov	r3, r1
   2a8b8:	4630      	mov	r0, r6
   2a8ba:	4639      	mov	r1, r7
   2a8bc:	f7fa fc5c 	bl	25178 <__adddf3>
   2a8c0:	4606      	mov	r6, r0
   2a8c2:	460f      	mov	r7, r1
   2a8c4:	f7fb f8a4 	bl	25a10 <__aeabi_d2iz>
   2a8c8:	2200      	movs	r2, #0
   2a8ca:	9004      	str	r0, [sp, #16]
   2a8cc:	2300      	movs	r3, #0
   2a8ce:	4630      	mov	r0, r6
   2a8d0:	4639      	mov	r1, r7
   2a8d2:	f7fb f875 	bl	259c0 <__aeabi_dcmplt>
   2a8d6:	2800      	cmp	r0, #0
   2a8d8:	f040 816f 	bne.w	2abba <_dtoa_r+0x422>
   2a8dc:	9e04      	ldr	r6, [sp, #16]
   2a8de:	2e16      	cmp	r6, #22
   2a8e0:	f200 8159 	bhi.w	2ab96 <_dtoa_r+0x3fe>
   2a8e4:	4b61      	ldr	r3, [pc, #388]	; (2aa6c <_dtoa_r+0x2d4>)
   2a8e6:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
   2a8ea:	e9d3 0100 	ldrd	r0, r1, [r3]
   2a8ee:	e9dd 2300 	ldrd	r2, r3, [sp]
   2a8f2:	f7fb f883 	bl	259fc <__aeabi_dcmpgt>
   2a8f6:	2800      	cmp	r0, #0
   2a8f8:	f000 81c4 	beq.w	2ac84 <_dtoa_r+0x4ec>
   2a8fc:	1e73      	subs	r3, r6, #1
   2a8fe:	9304      	str	r3, [sp, #16]
   2a900:	2300      	movs	r3, #0
   2a902:	930c      	str	r3, [sp, #48]	; 0x30
   2a904:	eba8 0505 	sub.w	r5, r8, r5
   2a908:	1e6b      	subs	r3, r5, #1
   2a90a:	9305      	str	r3, [sp, #20]
   2a90c:	f100 814f 	bmi.w	2abae <_dtoa_r+0x416>
   2a910:	2300      	movs	r3, #0
   2a912:	9306      	str	r3, [sp, #24]
   2a914:	9b04      	ldr	r3, [sp, #16]
   2a916:	2b00      	cmp	r3, #0
   2a918:	f2c0 8140 	blt.w	2ab9c <_dtoa_r+0x404>
   2a91c:	9a05      	ldr	r2, [sp, #20]
   2a91e:	930b      	str	r3, [sp, #44]	; 0x2c
   2a920:	4611      	mov	r1, r2
   2a922:	4419      	add	r1, r3
   2a924:	2300      	movs	r3, #0
   2a926:	9105      	str	r1, [sp, #20]
   2a928:	930a      	str	r3, [sp, #40]	; 0x28
   2a92a:	9b02      	ldr	r3, [sp, #8]
   2a92c:	2b09      	cmp	r3, #9
   2a92e:	d82e      	bhi.n	2a98e <_dtoa_r+0x1f6>
   2a930:	2b05      	cmp	r3, #5
   2a932:	f340 8651 	ble.w	2b5d8 <_dtoa_r+0xe40>
   2a936:	3b04      	subs	r3, #4
   2a938:	9302      	str	r3, [sp, #8]
   2a93a:	2700      	movs	r7, #0
   2a93c:	9b02      	ldr	r3, [sp, #8]
   2a93e:	3b02      	subs	r3, #2
   2a940:	2b03      	cmp	r3, #3
   2a942:	f200 8633 	bhi.w	2b5ac <_dtoa_r+0xe14>
   2a946:	e8df f013 	tbh	[pc, r3, lsl #1]
   2a94a:	03d6      	.short	0x03d6
   2a94c:	03e302cb 	.word	0x03e302cb
   2a950:	0464      	.short	0x0464
   2a952:	f8dd 8050 	ldr.w	r8, [sp, #80]	; 0x50
   2a956:	9d15      	ldr	r5, [sp, #84]	; 0x54
   2a958:	4445      	add	r5, r8
   2a95a:	f205 4332 	addw	r3, r5, #1074	; 0x432
   2a95e:	2b20      	cmp	r3, #32
   2a960:	f340 818a 	ble.w	2ac78 <_dtoa_r+0x4e0>
   2a964:	f1c3 0340 	rsb	r3, r3, #64	; 0x40
   2a968:	fa09 f903 	lsl.w	r9, r9, r3
   2a96c:	9b00      	ldr	r3, [sp, #0]
   2a96e:	f205 4012 	addw	r0, r5, #1042	; 0x412
   2a972:	fa23 f000 	lsr.w	r0, r3, r0
   2a976:	ea40 0009 	orr.w	r0, r0, r9
   2a97a:	f7fa fd39 	bl	253f0 <__aeabi_ui2d>
   2a97e:	2301      	movs	r3, #1
   2a980:	3d01      	subs	r5, #1
   2a982:	f1a1 71f8 	sub.w	r1, r1, #32505856	; 0x1f00000
   2a986:	9310      	str	r3, [sp, #64]	; 0x40
   2a988:	e77c      	b.n	2a884 <_dtoa_r+0xec>
   2a98a:	4839      	ldr	r0, [pc, #228]	; (2aa70 <_dtoa_r+0x2d8>)
   2a98c:	e73c      	b.n	2a808 <_dtoa_r+0x70>
   2a98e:	2100      	movs	r1, #0
   2a990:	6461      	str	r1, [r4, #68]	; 0x44
   2a992:	4620      	mov	r0, r4
   2a994:	468b      	mov	fp, r1
   2a996:	f001 f955 	bl	2bc44 <_Balloc>
   2a99a:	f04f 33ff 	mov.w	r3, #4294967295
   2a99e:	9308      	str	r3, [sp, #32]
   2a9a0:	930d      	str	r3, [sp, #52]	; 0x34
   2a9a2:	2301      	movs	r3, #1
   2a9a4:	9007      	str	r0, [sp, #28]
   2a9a6:	6420      	str	r0, [r4, #64]	; 0x40
   2a9a8:	f8cd b008 	str.w	fp, [sp, #8]
   2a9ac:	9309      	str	r3, [sp, #36]	; 0x24
   2a9ae:	9b15      	ldr	r3, [sp, #84]	; 0x54
   2a9b0:	2b00      	cmp	r3, #0
   2a9b2:	f2c0 80d0 	blt.w	2ab56 <_dtoa_r+0x3be>
   2a9b6:	9a04      	ldr	r2, [sp, #16]
   2a9b8:	2a0e      	cmp	r2, #14
   2a9ba:	f300 80cc 	bgt.w	2ab56 <_dtoa_r+0x3be>
   2a9be:	4b2b      	ldr	r3, [pc, #172]	; (2aa6c <_dtoa_r+0x2d4>)
   2a9c0:	f1bb 0f00 	cmp.w	fp, #0
   2a9c4:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
   2a9c8:	e9d3 8900 	ldrd	r8, r9, [r3]
   2a9cc:	f2c0 83be 	blt.w	2b14c <_dtoa_r+0x9b4>
   2a9d0:	e9dd 6700 	ldrd	r6, r7, [sp]
   2a9d4:	4642      	mov	r2, r8
   2a9d6:	464b      	mov	r3, r9
   2a9d8:	4630      	mov	r0, r6
   2a9da:	4639      	mov	r1, r7
   2a9dc:	f7fa fea8 	bl	25730 <__aeabi_ddiv>
   2a9e0:	f7fb f816 	bl	25a10 <__aeabi_d2iz>
   2a9e4:	4683      	mov	fp, r0
   2a9e6:	f7fa fd13 	bl	25410 <__aeabi_i2d>
   2a9ea:	4642      	mov	r2, r8
   2a9ec:	464b      	mov	r3, r9
   2a9ee:	f7fa fd75 	bl	254dc <__aeabi_dmul>
   2a9f2:	460b      	mov	r3, r1
   2a9f4:	4602      	mov	r2, r0
   2a9f6:	4639      	mov	r1, r7
   2a9f8:	4630      	mov	r0, r6
   2a9fa:	f7fa fbbb 	bl	25174 <__aeabi_dsub>
   2a9fe:	9d07      	ldr	r5, [sp, #28]
   2aa00:	f10b 0330 	add.w	r3, fp, #48	; 0x30
   2aa04:	702b      	strb	r3, [r5, #0]
   2aa06:	9b08      	ldr	r3, [sp, #32]
   2aa08:	2b01      	cmp	r3, #1
   2aa0a:	4606      	mov	r6, r0
   2aa0c:	460f      	mov	r7, r1
   2aa0e:	f105 0501 	add.w	r5, r5, #1
   2aa12:	d061      	beq.n	2aad8 <_dtoa_r+0x340>
   2aa14:	2200      	movs	r2, #0
   2aa16:	4b17      	ldr	r3, [pc, #92]	; (2aa74 <_dtoa_r+0x2dc>)
   2aa18:	f7fa fd60 	bl	254dc <__aeabi_dmul>
   2aa1c:	2200      	movs	r2, #0
   2aa1e:	2300      	movs	r3, #0
   2aa20:	4606      	mov	r6, r0
   2aa22:	460f      	mov	r7, r1
   2aa24:	f7fa ffc2 	bl	259ac <__aeabi_dcmpeq>
   2aa28:	2800      	cmp	r0, #0
   2aa2a:	f040 8081 	bne.w	2ab30 <_dtoa_r+0x398>
   2aa2e:	f8cd a000 	str.w	sl, [sp]
   2aa32:	9402      	str	r4, [sp, #8]
   2aa34:	f8dd a01c 	ldr.w	sl, [sp, #28]
   2aa38:	9c08      	ldr	r4, [sp, #32]
   2aa3a:	e028      	b.n	2aa8e <_dtoa_r+0x2f6>
   2aa3c:	f3af 8000 	nop.w
   2aa40:	636f4361 	.word	0x636f4361
   2aa44:	3fd287a7 	.word	0x3fd287a7
   2aa48:	8b60c8b3 	.word	0x8b60c8b3
   2aa4c:	3fc68a28 	.word	0x3fc68a28
   2aa50:	509f79fb 	.word	0x509f79fb
   2aa54:	3fd34413 	.word	0x3fd34413
   2aa58:	7ff00000 	.word	0x7ff00000
   2aa5c:	0002ee19 	.word	0x0002ee19
   2aa60:	0002ef68 	.word	0x0002ef68
   2aa64:	0002ef74 	.word	0x0002ef74
   2aa68:	3ff80000 	.word	0x3ff80000
   2aa6c:	0002efa0 	.word	0x0002efa0
   2aa70:	0002ee18 	.word	0x0002ee18
   2aa74:	40240000 	.word	0x40240000
   2aa78:	f7fa fd30 	bl	254dc <__aeabi_dmul>
   2aa7c:	2200      	movs	r2, #0
   2aa7e:	2300      	movs	r3, #0
   2aa80:	4606      	mov	r6, r0
   2aa82:	460f      	mov	r7, r1
   2aa84:	f7fa ff92 	bl	259ac <__aeabi_dcmpeq>
   2aa88:	2800      	cmp	r0, #0
   2aa8a:	f040 83c5 	bne.w	2b218 <_dtoa_r+0xa80>
   2aa8e:	4642      	mov	r2, r8
   2aa90:	464b      	mov	r3, r9
   2aa92:	4630      	mov	r0, r6
   2aa94:	4639      	mov	r1, r7
   2aa96:	f7fa fe4b 	bl	25730 <__aeabi_ddiv>
   2aa9a:	f7fa ffb9 	bl	25a10 <__aeabi_d2iz>
   2aa9e:	4683      	mov	fp, r0
   2aaa0:	f7fa fcb6 	bl	25410 <__aeabi_i2d>
   2aaa4:	4642      	mov	r2, r8
   2aaa6:	464b      	mov	r3, r9
   2aaa8:	f7fa fd18 	bl	254dc <__aeabi_dmul>
   2aaac:	4602      	mov	r2, r0
   2aaae:	460b      	mov	r3, r1
   2aab0:	4630      	mov	r0, r6
   2aab2:	4639      	mov	r1, r7
   2aab4:	f7fa fb5e 	bl	25174 <__aeabi_dsub>
   2aab8:	f10b 0e30 	add.w	lr, fp, #48	; 0x30
   2aabc:	f805 eb01 	strb.w	lr, [r5], #1
   2aac0:	eba5 0e0a 	sub.w	lr, r5, sl
   2aac4:	45a6      	cmp	lr, r4
   2aac6:	4606      	mov	r6, r0
   2aac8:	460f      	mov	r7, r1
   2aaca:	f04f 0200 	mov.w	r2, #0
   2aace:	4b6e      	ldr	r3, [pc, #440]	; (2ac88 <_dtoa_r+0x4f0>)
   2aad0:	d1d2      	bne.n	2aa78 <_dtoa_r+0x2e0>
   2aad2:	f8dd a000 	ldr.w	sl, [sp]
   2aad6:	9c02      	ldr	r4, [sp, #8]
   2aad8:	4632      	mov	r2, r6
   2aada:	463b      	mov	r3, r7
   2aadc:	4630      	mov	r0, r6
   2aade:	4639      	mov	r1, r7
   2aae0:	f7fa fb4a 	bl	25178 <__adddf3>
   2aae4:	4606      	mov	r6, r0
   2aae6:	460f      	mov	r7, r1
   2aae8:	4602      	mov	r2, r0
   2aaea:	460b      	mov	r3, r1
   2aaec:	4640      	mov	r0, r8
   2aaee:	4649      	mov	r1, r9
   2aaf0:	f7fa ff66 	bl	259c0 <__aeabi_dcmplt>
   2aaf4:	b948      	cbnz	r0, 2ab0a <_dtoa_r+0x372>
   2aaf6:	4632      	mov	r2, r6
   2aaf8:	463b      	mov	r3, r7
   2aafa:	4640      	mov	r0, r8
   2aafc:	4649      	mov	r1, r9
   2aafe:	f7fa ff55 	bl	259ac <__aeabi_dcmpeq>
   2ab02:	b1a8      	cbz	r0, 2ab30 <_dtoa_r+0x398>
   2ab04:	f01b 0f01 	tst.w	fp, #1
   2ab08:	d012      	beq.n	2ab30 <_dtoa_r+0x398>
   2ab0a:	f815 8c01 	ldrb.w	r8, [r5, #-1]
   2ab0e:	9a07      	ldr	r2, [sp, #28]
   2ab10:	1e6b      	subs	r3, r5, #1
   2ab12:	e004      	b.n	2ab1e <_dtoa_r+0x386>
   2ab14:	429a      	cmp	r2, r3
   2ab16:	f000 842d 	beq.w	2b374 <_dtoa_r+0xbdc>
   2ab1a:	f813 8d01 	ldrb.w	r8, [r3, #-1]!
   2ab1e:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
   2ab22:	f103 0501 	add.w	r5, r3, #1
   2ab26:	d0f5      	beq.n	2ab14 <_dtoa_r+0x37c>
   2ab28:	f108 0801 	add.w	r8, r8, #1
   2ab2c:	f883 8000 	strb.w	r8, [r3]
   2ab30:	4651      	mov	r1, sl
   2ab32:	4620      	mov	r0, r4
   2ab34:	f001 f8ac 	bl	2bc90 <_Bfree>
   2ab38:	2200      	movs	r2, #0
   2ab3a:	9b04      	ldr	r3, [sp, #16]
   2ab3c:	702a      	strb	r2, [r5, #0]
   2ab3e:	9a03      	ldr	r2, [sp, #12]
   2ab40:	3301      	adds	r3, #1
   2ab42:	6013      	str	r3, [r2, #0]
   2ab44:	9b21      	ldr	r3, [sp, #132]	; 0x84
   2ab46:	2b00      	cmp	r3, #0
   2ab48:	f000 83a3 	beq.w	2b292 <_dtoa_r+0xafa>
   2ab4c:	9807      	ldr	r0, [sp, #28]
   2ab4e:	601d      	str	r5, [r3, #0]
   2ab50:	b017      	add	sp, #92	; 0x5c
   2ab52:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2ab56:	9a09      	ldr	r2, [sp, #36]	; 0x24
   2ab58:	2a00      	cmp	r2, #0
   2ab5a:	d040      	beq.n	2abde <_dtoa_r+0x446>
   2ab5c:	9a02      	ldr	r2, [sp, #8]
   2ab5e:	2a01      	cmp	r2, #1
   2ab60:	f340 831c 	ble.w	2b19c <_dtoa_r+0xa04>
   2ab64:	9b08      	ldr	r3, [sp, #32]
   2ab66:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   2ab68:	1e5f      	subs	r7, r3, #1
   2ab6a:	42ba      	cmp	r2, r7
   2ab6c:	f2c0 8394 	blt.w	2b298 <_dtoa_r+0xb00>
   2ab70:	1bd7      	subs	r7, r2, r7
   2ab72:	9b08      	ldr	r3, [sp, #32]
   2ab74:	2b00      	cmp	r3, #0
   2ab76:	f2c0 847e 	blt.w	2b476 <_dtoa_r+0xcde>
   2ab7a:	9d06      	ldr	r5, [sp, #24]
   2ab7c:	9b08      	ldr	r3, [sp, #32]
   2ab7e:	9a06      	ldr	r2, [sp, #24]
   2ab80:	441a      	add	r2, r3
   2ab82:	9206      	str	r2, [sp, #24]
   2ab84:	9a05      	ldr	r2, [sp, #20]
   2ab86:	2101      	movs	r1, #1
   2ab88:	441a      	add	r2, r3
   2ab8a:	4620      	mov	r0, r4
   2ab8c:	9205      	str	r2, [sp, #20]
   2ab8e:	f001 f919 	bl	2bdc4 <__i2b>
   2ab92:	4606      	mov	r6, r0
   2ab94:	e026      	b.n	2abe4 <_dtoa_r+0x44c>
   2ab96:	2301      	movs	r3, #1
   2ab98:	930c      	str	r3, [sp, #48]	; 0x30
   2ab9a:	e6b3      	b.n	2a904 <_dtoa_r+0x16c>
   2ab9c:	9a06      	ldr	r2, [sp, #24]
   2ab9e:	9b04      	ldr	r3, [sp, #16]
   2aba0:	1ad2      	subs	r2, r2, r3
   2aba2:	425b      	negs	r3, r3
   2aba4:	930a      	str	r3, [sp, #40]	; 0x28
   2aba6:	2300      	movs	r3, #0
   2aba8:	9206      	str	r2, [sp, #24]
   2abaa:	930b      	str	r3, [sp, #44]	; 0x2c
   2abac:	e6bd      	b.n	2a92a <_dtoa_r+0x192>
   2abae:	f1c5 0301 	rsb	r3, r5, #1
   2abb2:	9306      	str	r3, [sp, #24]
   2abb4:	2300      	movs	r3, #0
   2abb6:	9305      	str	r3, [sp, #20]
   2abb8:	e6ac      	b.n	2a914 <_dtoa_r+0x17c>
   2abba:	f8dd 9010 	ldr.w	r9, [sp, #16]
   2abbe:	4648      	mov	r0, r9
   2abc0:	f7fa fc26 	bl	25410 <__aeabi_i2d>
   2abc4:	4602      	mov	r2, r0
   2abc6:	460b      	mov	r3, r1
   2abc8:	4630      	mov	r0, r6
   2abca:	4639      	mov	r1, r7
   2abcc:	f7fa feee 	bl	259ac <__aeabi_dcmpeq>
   2abd0:	2800      	cmp	r0, #0
   2abd2:	f47f ae83 	bne.w	2a8dc <_dtoa_r+0x144>
   2abd6:	f109 33ff 	add.w	r3, r9, #4294967295
   2abda:	9304      	str	r3, [sp, #16]
   2abdc:	e67e      	b.n	2a8dc <_dtoa_r+0x144>
   2abde:	9f0a      	ldr	r7, [sp, #40]	; 0x28
   2abe0:	9d06      	ldr	r5, [sp, #24]
   2abe2:	9e09      	ldr	r6, [sp, #36]	; 0x24
   2abe4:	2d00      	cmp	r5, #0
   2abe6:	dd0c      	ble.n	2ac02 <_dtoa_r+0x46a>
   2abe8:	9905      	ldr	r1, [sp, #20]
   2abea:	2900      	cmp	r1, #0
   2abec:	460b      	mov	r3, r1
   2abee:	dd08      	ble.n	2ac02 <_dtoa_r+0x46a>
   2abf0:	42a9      	cmp	r1, r5
   2abf2:	9a06      	ldr	r2, [sp, #24]
   2abf4:	bfa8      	it	ge
   2abf6:	462b      	movge	r3, r5
   2abf8:	1ad2      	subs	r2, r2, r3
   2abfa:	1aed      	subs	r5, r5, r3
   2abfc:	1acb      	subs	r3, r1, r3
   2abfe:	9206      	str	r2, [sp, #24]
   2ac00:	9305      	str	r3, [sp, #20]
   2ac02:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   2ac04:	b1d3      	cbz	r3, 2ac3c <_dtoa_r+0x4a4>
   2ac06:	9b09      	ldr	r3, [sp, #36]	; 0x24
   2ac08:	2b00      	cmp	r3, #0
   2ac0a:	f000 82c0 	beq.w	2b18e <_dtoa_r+0x9f6>
   2ac0e:	2f00      	cmp	r7, #0
   2ac10:	dd10      	ble.n	2ac34 <_dtoa_r+0x49c>
   2ac12:	4631      	mov	r1, r6
   2ac14:	463a      	mov	r2, r7
   2ac16:	4620      	mov	r0, r4
   2ac18:	f001 f970 	bl	2befc <__pow5mult>
   2ac1c:	4652      	mov	r2, sl
   2ac1e:	4601      	mov	r1, r0
   2ac20:	4606      	mov	r6, r0
   2ac22:	4620      	mov	r0, r4
   2ac24:	f001 f8d8 	bl	2bdd8 <__multiply>
   2ac28:	4651      	mov	r1, sl
   2ac2a:	4680      	mov	r8, r0
   2ac2c:	4620      	mov	r0, r4
   2ac2e:	f001 f82f 	bl	2bc90 <_Bfree>
   2ac32:	46c2      	mov	sl, r8
   2ac34:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   2ac36:	1bda      	subs	r2, r3, r7
   2ac38:	f040 82aa 	bne.w	2b190 <_dtoa_r+0x9f8>
   2ac3c:	2101      	movs	r1, #1
   2ac3e:	4620      	mov	r0, r4
   2ac40:	f001 f8c0 	bl	2bdc4 <__i2b>
   2ac44:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   2ac46:	2b00      	cmp	r3, #0
   2ac48:	4681      	mov	r9, r0
   2ac4a:	dd1f      	ble.n	2ac8c <_dtoa_r+0x4f4>
   2ac4c:	4601      	mov	r1, r0
   2ac4e:	461a      	mov	r2, r3
   2ac50:	4620      	mov	r0, r4
   2ac52:	f001 f953 	bl	2befc <__pow5mult>
   2ac56:	9b02      	ldr	r3, [sp, #8]
   2ac58:	2b01      	cmp	r3, #1
   2ac5a:	4681      	mov	r9, r0
   2ac5c:	f340 825b 	ble.w	2b116 <_dtoa_r+0x97e>
   2ac60:	f04f 0800 	mov.w	r8, #0
   2ac64:	f8d9 3010 	ldr.w	r3, [r9, #16]
   2ac68:	eb09 0383 	add.w	r3, r9, r3, lsl #2
   2ac6c:	6918      	ldr	r0, [r3, #16]
   2ac6e:	f001 f859 	bl	2bd24 <__hi0bits>
   2ac72:	f1c0 0020 	rsb	r0, r0, #32
   2ac76:	e013      	b.n	2aca0 <_dtoa_r+0x508>
   2ac78:	f1c3 0920 	rsb	r9, r3, #32
   2ac7c:	9b00      	ldr	r3, [sp, #0]
   2ac7e:	fa03 f009 	lsl.w	r0, r3, r9
   2ac82:	e67a      	b.n	2a97a <_dtoa_r+0x1e2>
   2ac84:	900c      	str	r0, [sp, #48]	; 0x30
   2ac86:	e63d      	b.n	2a904 <_dtoa_r+0x16c>
   2ac88:	40240000 	.word	0x40240000
   2ac8c:	9b02      	ldr	r3, [sp, #8]
   2ac8e:	2b01      	cmp	r3, #1
   2ac90:	f340 828d 	ble.w	2b1ae <_dtoa_r+0xa16>
   2ac94:	f04f 0800 	mov.w	r8, #0
   2ac98:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   2ac9a:	2001      	movs	r0, #1
   2ac9c:	2b00      	cmp	r3, #0
   2ac9e:	d1e1      	bne.n	2ac64 <_dtoa_r+0x4cc>
   2aca0:	9a05      	ldr	r2, [sp, #20]
   2aca2:	4410      	add	r0, r2
   2aca4:	f010 001f 	ands.w	r0, r0, #31
   2aca8:	f000 80a1 	beq.w	2adee <_dtoa_r+0x656>
   2acac:	f1c0 0320 	rsb	r3, r0, #32
   2acb0:	2b04      	cmp	r3, #4
   2acb2:	f340 848c 	ble.w	2b5ce <_dtoa_r+0xe36>
   2acb6:	9b06      	ldr	r3, [sp, #24]
   2acb8:	f1c0 001c 	rsb	r0, r0, #28
   2acbc:	4403      	add	r3, r0
   2acbe:	9306      	str	r3, [sp, #24]
   2acc0:	4613      	mov	r3, r2
   2acc2:	4403      	add	r3, r0
   2acc4:	4405      	add	r5, r0
   2acc6:	9305      	str	r3, [sp, #20]
   2acc8:	9b06      	ldr	r3, [sp, #24]
   2acca:	2b00      	cmp	r3, #0
   2accc:	dd05      	ble.n	2acda <_dtoa_r+0x542>
   2acce:	4651      	mov	r1, sl
   2acd0:	461a      	mov	r2, r3
   2acd2:	4620      	mov	r0, r4
   2acd4:	f001 f962 	bl	2bf9c <__lshift>
   2acd8:	4682      	mov	sl, r0
   2acda:	9b05      	ldr	r3, [sp, #20]
   2acdc:	2b00      	cmp	r3, #0
   2acde:	dd05      	ble.n	2acec <_dtoa_r+0x554>
   2ace0:	4649      	mov	r1, r9
   2ace2:	461a      	mov	r2, r3
   2ace4:	4620      	mov	r0, r4
   2ace6:	f001 f959 	bl	2bf9c <__lshift>
   2acea:	4681      	mov	r9, r0
   2acec:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   2acee:	2b00      	cmp	r3, #0
   2acf0:	f040 8086 	bne.w	2ae00 <_dtoa_r+0x668>
   2acf4:	9b08      	ldr	r3, [sp, #32]
   2acf6:	2b00      	cmp	r3, #0
   2acf8:	f340 8269 	ble.w	2b1ce <_dtoa_r+0xa36>
   2acfc:	9b09      	ldr	r3, [sp, #36]	; 0x24
   2acfe:	2b00      	cmp	r3, #0
   2ad00:	f000 8098 	beq.w	2ae34 <_dtoa_r+0x69c>
   2ad04:	2d00      	cmp	r5, #0
   2ad06:	dd05      	ble.n	2ad14 <_dtoa_r+0x57c>
   2ad08:	4631      	mov	r1, r6
   2ad0a:	462a      	mov	r2, r5
   2ad0c:	4620      	mov	r0, r4
   2ad0e:	f001 f945 	bl	2bf9c <__lshift>
   2ad12:	4606      	mov	r6, r0
   2ad14:	f1b8 0f00 	cmp.w	r8, #0
   2ad18:	f040 8336 	bne.w	2b388 <_dtoa_r+0xbf0>
   2ad1c:	46b0      	mov	r8, r6
   2ad1e:	9b08      	ldr	r3, [sp, #32]
   2ad20:	9a07      	ldr	r2, [sp, #28]
   2ad22:	3b01      	subs	r3, #1
   2ad24:	18d3      	adds	r3, r2, r3
   2ad26:	9308      	str	r3, [sp, #32]
   2ad28:	9b00      	ldr	r3, [sp, #0]
   2ad2a:	f003 0301 	and.w	r3, r3, #1
   2ad2e:	9309      	str	r3, [sp, #36]	; 0x24
   2ad30:	4617      	mov	r7, r2
   2ad32:	4649      	mov	r1, r9
   2ad34:	4650      	mov	r0, sl
   2ad36:	f7ff fc9b 	bl	2a670 <quorem>
   2ad3a:	4631      	mov	r1, r6
   2ad3c:	4605      	mov	r5, r0
   2ad3e:	4650      	mov	r0, sl
   2ad40:	f001 f97e 	bl	2c040 <__mcmp>
   2ad44:	4642      	mov	r2, r8
   2ad46:	4649      	mov	r1, r9
   2ad48:	4683      	mov	fp, r0
   2ad4a:	4620      	mov	r0, r4
   2ad4c:	f001 f994 	bl	2c078 <__mdiff>
   2ad50:	f105 0230 	add.w	r2, r5, #48	; 0x30
   2ad54:	9200      	str	r2, [sp, #0]
   2ad56:	68c2      	ldr	r2, [r0, #12]
   2ad58:	4601      	mov	r1, r0
   2ad5a:	2a00      	cmp	r2, #0
   2ad5c:	f040 8232 	bne.w	2b1c4 <_dtoa_r+0xa2c>
   2ad60:	9006      	str	r0, [sp, #24]
   2ad62:	4650      	mov	r0, sl
   2ad64:	f001 f96c 	bl	2c040 <__mcmp>
   2ad68:	9b06      	ldr	r3, [sp, #24]
   2ad6a:	9005      	str	r0, [sp, #20]
   2ad6c:	4619      	mov	r1, r3
   2ad6e:	4620      	mov	r0, r4
   2ad70:	f000 ff8e 	bl	2bc90 <_Bfree>
   2ad74:	9a05      	ldr	r2, [sp, #20]
   2ad76:	b932      	cbnz	r2, 2ad86 <_dtoa_r+0x5ee>
   2ad78:	9b02      	ldr	r3, [sp, #8]
   2ad7a:	b923      	cbnz	r3, 2ad86 <_dtoa_r+0x5ee>
   2ad7c:	9b09      	ldr	r3, [sp, #36]	; 0x24
   2ad7e:	2b00      	cmp	r3, #0
   2ad80:	f000 83de 	beq.w	2b540 <_dtoa_r+0xda8>
   2ad84:	9a02      	ldr	r2, [sp, #8]
   2ad86:	f1bb 0f00 	cmp.w	fp, #0
   2ad8a:	f2c0 82a2 	blt.w	2b2d2 <_dtoa_r+0xb3a>
   2ad8e:	d105      	bne.n	2ad9c <_dtoa_r+0x604>
   2ad90:	9b02      	ldr	r3, [sp, #8]
   2ad92:	b91b      	cbnz	r3, 2ad9c <_dtoa_r+0x604>
   2ad94:	9b09      	ldr	r3, [sp, #36]	; 0x24
   2ad96:	2b00      	cmp	r3, #0
   2ad98:	f000 829b 	beq.w	2b2d2 <_dtoa_r+0xb3a>
   2ad9c:	2a00      	cmp	r2, #0
   2ad9e:	f300 8307 	bgt.w	2b3b0 <_dtoa_r+0xc18>
   2ada2:	f89d 3000 	ldrb.w	r3, [sp]
   2ada6:	703b      	strb	r3, [r7, #0]
   2ada8:	9b08      	ldr	r3, [sp, #32]
   2adaa:	f107 0b01 	add.w	fp, r7, #1
   2adae:	429f      	cmp	r7, r3
   2adb0:	465d      	mov	r5, fp
   2adb2:	f000 8308 	beq.w	2b3c6 <_dtoa_r+0xc2e>
   2adb6:	4651      	mov	r1, sl
   2adb8:	2300      	movs	r3, #0
   2adba:	220a      	movs	r2, #10
   2adbc:	4620      	mov	r0, r4
   2adbe:	f000 ff71 	bl	2bca4 <__multadd>
   2adc2:	4546      	cmp	r6, r8
   2adc4:	4682      	mov	sl, r0
   2adc6:	4631      	mov	r1, r6
   2adc8:	f04f 0300 	mov.w	r3, #0
   2adcc:	f04f 020a 	mov.w	r2, #10
   2add0:	4620      	mov	r0, r4
   2add2:	f000 81f1 	beq.w	2b1b8 <_dtoa_r+0xa20>
   2add6:	f000 ff65 	bl	2bca4 <__multadd>
   2adda:	4641      	mov	r1, r8
   2addc:	4606      	mov	r6, r0
   2adde:	2300      	movs	r3, #0
   2ade0:	220a      	movs	r2, #10
   2ade2:	4620      	mov	r0, r4
   2ade4:	f000 ff5e 	bl	2bca4 <__multadd>
   2ade8:	465f      	mov	r7, fp
   2adea:	4680      	mov	r8, r0
   2adec:	e7a1      	b.n	2ad32 <_dtoa_r+0x59a>
   2adee:	201c      	movs	r0, #28
   2adf0:	9b06      	ldr	r3, [sp, #24]
   2adf2:	4403      	add	r3, r0
   2adf4:	9306      	str	r3, [sp, #24]
   2adf6:	9b05      	ldr	r3, [sp, #20]
   2adf8:	4403      	add	r3, r0
   2adfa:	4405      	add	r5, r0
   2adfc:	9305      	str	r3, [sp, #20]
   2adfe:	e763      	b.n	2acc8 <_dtoa_r+0x530>
   2ae00:	4649      	mov	r1, r9
   2ae02:	4650      	mov	r0, sl
   2ae04:	f001 f91c 	bl	2c040 <__mcmp>
   2ae08:	2800      	cmp	r0, #0
   2ae0a:	f6bf af73 	bge.w	2acf4 <_dtoa_r+0x55c>
   2ae0e:	9f04      	ldr	r7, [sp, #16]
   2ae10:	4651      	mov	r1, sl
   2ae12:	2300      	movs	r3, #0
   2ae14:	220a      	movs	r2, #10
   2ae16:	4620      	mov	r0, r4
   2ae18:	3f01      	subs	r7, #1
   2ae1a:	9704      	str	r7, [sp, #16]
   2ae1c:	f000 ff42 	bl	2bca4 <__multadd>
   2ae20:	9b09      	ldr	r3, [sp, #36]	; 0x24
   2ae22:	4682      	mov	sl, r0
   2ae24:	2b00      	cmp	r3, #0
   2ae26:	f040 83a7 	bne.w	2b578 <_dtoa_r+0xde0>
   2ae2a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   2ae2c:	2b00      	cmp	r3, #0
   2ae2e:	f340 83b0 	ble.w	2b592 <_dtoa_r+0xdfa>
   2ae32:	9308      	str	r3, [sp, #32]
   2ae34:	f8dd b01c 	ldr.w	fp, [sp, #28]
   2ae38:	f8dd 8020 	ldr.w	r8, [sp, #32]
   2ae3c:	465d      	mov	r5, fp
   2ae3e:	e002      	b.n	2ae46 <_dtoa_r+0x6ae>
   2ae40:	f000 ff30 	bl	2bca4 <__multadd>
   2ae44:	4682      	mov	sl, r0
   2ae46:	4649      	mov	r1, r9
   2ae48:	4650      	mov	r0, sl
   2ae4a:	f7ff fc11 	bl	2a670 <quorem>
   2ae4e:	f100 0730 	add.w	r7, r0, #48	; 0x30
   2ae52:	f805 7b01 	strb.w	r7, [r5], #1
   2ae56:	eba5 030b 	sub.w	r3, r5, fp
   2ae5a:	4543      	cmp	r3, r8
   2ae5c:	f04f 020a 	mov.w	r2, #10
   2ae60:	f04f 0300 	mov.w	r3, #0
   2ae64:	4651      	mov	r1, sl
   2ae66:	4620      	mov	r0, r4
   2ae68:	dbea      	blt.n	2ae40 <_dtoa_r+0x6a8>
   2ae6a:	9b07      	ldr	r3, [sp, #28]
   2ae6c:	9a08      	ldr	r2, [sp, #32]
   2ae6e:	9700      	str	r7, [sp, #0]
   2ae70:	2a01      	cmp	r2, #1
   2ae72:	bfac      	ite	ge
   2ae74:	189b      	addge	r3, r3, r2
   2ae76:	3301      	addlt	r3, #1
   2ae78:	461d      	mov	r5, r3
   2ae7a:	f04f 0b00 	mov.w	fp, #0
   2ae7e:	4651      	mov	r1, sl
   2ae80:	2201      	movs	r2, #1
   2ae82:	4620      	mov	r0, r4
   2ae84:	f001 f88a 	bl	2bf9c <__lshift>
   2ae88:	4649      	mov	r1, r9
   2ae8a:	4682      	mov	sl, r0
   2ae8c:	f001 f8d8 	bl	2c040 <__mcmp>
   2ae90:	2800      	cmp	r0, #0
   2ae92:	f340 823a 	ble.w	2b30a <_dtoa_r+0xb72>
   2ae96:	f815 2c01 	ldrb.w	r2, [r5, #-1]
   2ae9a:	9907      	ldr	r1, [sp, #28]
   2ae9c:	1e6b      	subs	r3, r5, #1
   2ae9e:	e004      	b.n	2aeaa <_dtoa_r+0x712>
   2aea0:	428b      	cmp	r3, r1
   2aea2:	f000 81af 	beq.w	2b204 <_dtoa_r+0xa6c>
   2aea6:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
   2aeaa:	2a39      	cmp	r2, #57	; 0x39
   2aeac:	f103 0501 	add.w	r5, r3, #1
   2aeb0:	d0f6      	beq.n	2aea0 <_dtoa_r+0x708>
   2aeb2:	3201      	adds	r2, #1
   2aeb4:	701a      	strb	r2, [r3, #0]
   2aeb6:	4649      	mov	r1, r9
   2aeb8:	4620      	mov	r0, r4
   2aeba:	f000 fee9 	bl	2bc90 <_Bfree>
   2aebe:	2e00      	cmp	r6, #0
   2aec0:	f43f ae36 	beq.w	2ab30 <_dtoa_r+0x398>
   2aec4:	f1bb 0f00 	cmp.w	fp, #0
   2aec8:	d005      	beq.n	2aed6 <_dtoa_r+0x73e>
   2aeca:	45b3      	cmp	fp, r6
   2aecc:	d003      	beq.n	2aed6 <_dtoa_r+0x73e>
   2aece:	4659      	mov	r1, fp
   2aed0:	4620      	mov	r0, r4
   2aed2:	f000 fedd 	bl	2bc90 <_Bfree>
   2aed6:	4631      	mov	r1, r6
   2aed8:	4620      	mov	r0, r4
   2aeda:	f000 fed9 	bl	2bc90 <_Bfree>
   2aede:	e627      	b.n	2ab30 <_dtoa_r+0x398>
   2aee0:	2300      	movs	r3, #0
   2aee2:	9309      	str	r3, [sp, #36]	; 0x24
   2aee4:	9b04      	ldr	r3, [sp, #16]
   2aee6:	445b      	add	r3, fp
   2aee8:	930d      	str	r3, [sp, #52]	; 0x34
   2aeea:	3301      	adds	r3, #1
   2aeec:	2b01      	cmp	r3, #1
   2aeee:	461e      	mov	r6, r3
   2aef0:	461d      	mov	r5, r3
   2aef2:	9308      	str	r3, [sp, #32]
   2aef4:	bfb8      	it	lt
   2aef6:	2601      	movlt	r6, #1
   2aef8:	2100      	movs	r1, #0
   2aefa:	2e17      	cmp	r6, #23
   2aefc:	6461      	str	r1, [r4, #68]	; 0x44
   2aefe:	d90a      	bls.n	2af16 <_dtoa_r+0x77e>
   2af00:	2201      	movs	r2, #1
   2af02:	2304      	movs	r3, #4
   2af04:	005b      	lsls	r3, r3, #1
   2af06:	f103 0014 	add.w	r0, r3, #20
   2af0a:	4286      	cmp	r6, r0
   2af0c:	4611      	mov	r1, r2
   2af0e:	f102 0201 	add.w	r2, r2, #1
   2af12:	d2f7      	bcs.n	2af04 <_dtoa_r+0x76c>
   2af14:	6461      	str	r1, [r4, #68]	; 0x44
   2af16:	4620      	mov	r0, r4
   2af18:	f000 fe94 	bl	2bc44 <_Balloc>
   2af1c:	2d0e      	cmp	r5, #14
   2af1e:	9007      	str	r0, [sp, #28]
   2af20:	6420      	str	r0, [r4, #64]	; 0x40
   2af22:	f63f ad44 	bhi.w	2a9ae <_dtoa_r+0x216>
   2af26:	2f00      	cmp	r7, #0
   2af28:	f43f ad41 	beq.w	2a9ae <_dtoa_r+0x216>
   2af2c:	9904      	ldr	r1, [sp, #16]
   2af2e:	2900      	cmp	r1, #0
   2af30:	ed9d 7b00 	vldr	d7, [sp]
   2af34:	f340 81f6 	ble.w	2b324 <_dtoa_r+0xb8c>
   2af38:	4bb9      	ldr	r3, [pc, #740]	; (2b220 <_dtoa_r+0xa88>)
   2af3a:	f001 020f 	and.w	r2, r1, #15
   2af3e:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
   2af42:	110d      	asrs	r5, r1, #4
   2af44:	e9d3 6700 	ldrd	r6, r7, [r3]
   2af48:	06eb      	lsls	r3, r5, #27
   2af4a:	f140 81ad 	bpl.w	2b2a8 <_dtoa_r+0xb10>
   2af4e:	4bb5      	ldr	r3, [pc, #724]	; (2b224 <_dtoa_r+0xa8c>)
   2af50:	ec51 0b17 	vmov	r0, r1, d7
   2af54:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
   2af58:	f7fa fbea 	bl	25730 <__aeabi_ddiv>
   2af5c:	e9cd 010e 	strd	r0, r1, [sp, #56]	; 0x38
   2af60:	f005 050f 	and.w	r5, r5, #15
   2af64:	f04f 0903 	mov.w	r9, #3
   2af68:	b18d      	cbz	r5, 2af8e <_dtoa_r+0x7f6>
   2af6a:	f8df 82b8 	ldr.w	r8, [pc, #696]	; 2b224 <_dtoa_r+0xa8c>
   2af6e:	07e8      	lsls	r0, r5, #31
   2af70:	d509      	bpl.n	2af86 <_dtoa_r+0x7ee>
   2af72:	4630      	mov	r0, r6
   2af74:	4639      	mov	r1, r7
   2af76:	e9d8 2300 	ldrd	r2, r3, [r8]
   2af7a:	f7fa faaf 	bl	254dc <__aeabi_dmul>
   2af7e:	f109 0901 	add.w	r9, r9, #1
   2af82:	4606      	mov	r6, r0
   2af84:	460f      	mov	r7, r1
   2af86:	106d      	asrs	r5, r5, #1
   2af88:	f108 0808 	add.w	r8, r8, #8
   2af8c:	d1ef      	bne.n	2af6e <_dtoa_r+0x7d6>
   2af8e:	463b      	mov	r3, r7
   2af90:	4632      	mov	r2, r6
   2af92:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
   2af96:	f7fa fbcb 	bl	25730 <__aeabi_ddiv>
   2af9a:	4607      	mov	r7, r0
   2af9c:	4688      	mov	r8, r1
   2af9e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   2afa0:	b143      	cbz	r3, 2afb4 <_dtoa_r+0x81c>
   2afa2:	2200      	movs	r2, #0
   2afa4:	4ba0      	ldr	r3, [pc, #640]	; (2b228 <_dtoa_r+0xa90>)
   2afa6:	4638      	mov	r0, r7
   2afa8:	4641      	mov	r1, r8
   2afaa:	f7fa fd09 	bl	259c0 <__aeabi_dcmplt>
   2afae:	2800      	cmp	r0, #0
   2afb0:	f040 8273 	bne.w	2b49a <_dtoa_r+0xd02>
   2afb4:	4648      	mov	r0, r9
   2afb6:	f7fa fa2b 	bl	25410 <__aeabi_i2d>
   2afba:	463a      	mov	r2, r7
   2afbc:	4643      	mov	r3, r8
   2afbe:	f7fa fa8d 	bl	254dc <__aeabi_dmul>
   2afc2:	4b9a      	ldr	r3, [pc, #616]	; (2b22c <_dtoa_r+0xa94>)
   2afc4:	2200      	movs	r2, #0
   2afc6:	f7fa f8d7 	bl	25178 <__adddf3>
   2afca:	9b08      	ldr	r3, [sp, #32]
   2afcc:	4605      	mov	r5, r0
   2afce:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
   2afd2:	2b00      	cmp	r3, #0
   2afd4:	f000 8140 	beq.w	2b258 <_dtoa_r+0xac0>
   2afd8:	9b04      	ldr	r3, [sp, #16]
   2afda:	f8dd 9020 	ldr.w	r9, [sp, #32]
   2afde:	9311      	str	r3, [sp, #68]	; 0x44
   2afe0:	9b09      	ldr	r3, [sp, #36]	; 0x24
   2afe2:	2b00      	cmp	r3, #0
   2afe4:	f000 81f6 	beq.w	2b3d4 <_dtoa_r+0xc3c>
   2afe8:	4b8d      	ldr	r3, [pc, #564]	; (2b220 <_dtoa_r+0xa88>)
   2afea:	4991      	ldr	r1, [pc, #580]	; (2b230 <_dtoa_r+0xa98>)
   2afec:	eb03 03c9 	add.w	r3, r3, r9, lsl #3
   2aff0:	e953 2302 	ldrd	r2, r3, [r3, #-8]
   2aff4:	2000      	movs	r0, #0
   2aff6:	f7fa fb9b 	bl	25730 <__aeabi_ddiv>
   2affa:	462a      	mov	r2, r5
   2affc:	4633      	mov	r3, r6
   2affe:	f7fa f8b9 	bl	25174 <__aeabi_dsub>
   2b002:	e9cd 010e 	strd	r0, r1, [sp, #56]	; 0x38
   2b006:	4641      	mov	r1, r8
   2b008:	4638      	mov	r0, r7
   2b00a:	f7fa fd01 	bl	25a10 <__aeabi_d2iz>
   2b00e:	4605      	mov	r5, r0
   2b010:	f7fa f9fe 	bl	25410 <__aeabi_i2d>
   2b014:	4602      	mov	r2, r0
   2b016:	460b      	mov	r3, r1
   2b018:	4638      	mov	r0, r7
   2b01a:	4641      	mov	r1, r8
   2b01c:	f7fa f8aa 	bl	25174 <__aeabi_dsub>
   2b020:	3530      	adds	r5, #48	; 0x30
   2b022:	fa5f f885 	uxtb.w	r8, r5
   2b026:	9d07      	ldr	r5, [sp, #28]
   2b028:	4606      	mov	r6, r0
   2b02a:	460f      	mov	r7, r1
   2b02c:	f885 8000 	strb.w	r8, [r5]
   2b030:	4602      	mov	r2, r0
   2b032:	460b      	mov	r3, r1
   2b034:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
   2b038:	3501      	adds	r5, #1
   2b03a:	f7fa fcdf 	bl	259fc <__aeabi_dcmpgt>
   2b03e:	2800      	cmp	r0, #0
   2b040:	d156      	bne.n	2b0f0 <_dtoa_r+0x958>
   2b042:	4632      	mov	r2, r6
   2b044:	463b      	mov	r3, r7
   2b046:	2000      	movs	r0, #0
   2b048:	4977      	ldr	r1, [pc, #476]	; (2b228 <_dtoa_r+0xa90>)
   2b04a:	f7fa f893 	bl	25174 <__aeabi_dsub>
   2b04e:	4602      	mov	r2, r0
   2b050:	460b      	mov	r3, r1
   2b052:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
   2b056:	f7fa fcd1 	bl	259fc <__aeabi_dcmpgt>
   2b05a:	2800      	cmp	r0, #0
   2b05c:	f040 8262 	bne.w	2b524 <_dtoa_r+0xd8c>
   2b060:	f1b9 0f01 	cmp.w	r9, #1
   2b064:	f43f aca3 	beq.w	2a9ae <_dtoa_r+0x216>
   2b068:	9b07      	ldr	r3, [sp, #28]
   2b06a:	f8cd a048 	str.w	sl, [sp, #72]	; 0x48
   2b06e:	f8cd b04c 	str.w	fp, [sp, #76]	; 0x4c
   2b072:	4499      	add	r9, r3
   2b074:	46a0      	mov	r8, r4
   2b076:	e9dd ab0e 	ldrd	sl, fp, [sp, #56]	; 0x38
   2b07a:	e00d      	b.n	2b098 <_dtoa_r+0x900>
   2b07c:	2000      	movs	r0, #0
   2b07e:	496a      	ldr	r1, [pc, #424]	; (2b228 <_dtoa_r+0xa90>)
   2b080:	f7fa f878 	bl	25174 <__aeabi_dsub>
   2b084:	4652      	mov	r2, sl
   2b086:	465b      	mov	r3, fp
   2b088:	f7fa fc9a 	bl	259c0 <__aeabi_dcmplt>
   2b08c:	2800      	cmp	r0, #0
   2b08e:	f040 8244 	bne.w	2b51a <_dtoa_r+0xd82>
   2b092:	454d      	cmp	r5, r9
   2b094:	f000 824a 	beq.w	2b52c <_dtoa_r+0xd94>
   2b098:	4650      	mov	r0, sl
   2b09a:	4659      	mov	r1, fp
   2b09c:	2200      	movs	r2, #0
   2b09e:	4b65      	ldr	r3, [pc, #404]	; (2b234 <_dtoa_r+0xa9c>)
   2b0a0:	f7fa fa1c 	bl	254dc <__aeabi_dmul>
   2b0a4:	2200      	movs	r2, #0
   2b0a6:	4b63      	ldr	r3, [pc, #396]	; (2b234 <_dtoa_r+0xa9c>)
   2b0a8:	4682      	mov	sl, r0
   2b0aa:	468b      	mov	fp, r1
   2b0ac:	4630      	mov	r0, r6
   2b0ae:	4639      	mov	r1, r7
   2b0b0:	f7fa fa14 	bl	254dc <__aeabi_dmul>
   2b0b4:	460f      	mov	r7, r1
   2b0b6:	4606      	mov	r6, r0
   2b0b8:	f7fa fcaa 	bl	25a10 <__aeabi_d2iz>
   2b0bc:	4604      	mov	r4, r0
   2b0be:	f7fa f9a7 	bl	25410 <__aeabi_i2d>
   2b0c2:	4602      	mov	r2, r0
   2b0c4:	460b      	mov	r3, r1
   2b0c6:	4630      	mov	r0, r6
   2b0c8:	4639      	mov	r1, r7
   2b0ca:	f7fa f853 	bl	25174 <__aeabi_dsub>
   2b0ce:	3430      	adds	r4, #48	; 0x30
   2b0d0:	b2e4      	uxtb	r4, r4
   2b0d2:	4652      	mov	r2, sl
   2b0d4:	465b      	mov	r3, fp
   2b0d6:	f805 4b01 	strb.w	r4, [r5], #1
   2b0da:	4606      	mov	r6, r0
   2b0dc:	460f      	mov	r7, r1
   2b0de:	f7fa fc6f 	bl	259c0 <__aeabi_dcmplt>
   2b0e2:	4632      	mov	r2, r6
   2b0e4:	463b      	mov	r3, r7
   2b0e6:	2800      	cmp	r0, #0
   2b0e8:	d0c8      	beq.n	2b07c <_dtoa_r+0x8e4>
   2b0ea:	f8dd a048 	ldr.w	sl, [sp, #72]	; 0x48
   2b0ee:	4644      	mov	r4, r8
   2b0f0:	9b11      	ldr	r3, [sp, #68]	; 0x44
   2b0f2:	9304      	str	r3, [sp, #16]
   2b0f4:	e51c      	b.n	2ab30 <_dtoa_r+0x398>
   2b0f6:	2300      	movs	r3, #0
   2b0f8:	9309      	str	r3, [sp, #36]	; 0x24
   2b0fa:	f1bb 0f00 	cmp.w	fp, #0
   2b0fe:	f340 80da 	ble.w	2b2b6 <_dtoa_r+0xb1e>
   2b102:	465e      	mov	r6, fp
   2b104:	465d      	mov	r5, fp
   2b106:	f8cd b034 	str.w	fp, [sp, #52]	; 0x34
   2b10a:	f8cd b020 	str.w	fp, [sp, #32]
   2b10e:	e6f3      	b.n	2aef8 <_dtoa_r+0x760>
   2b110:	2301      	movs	r3, #1
   2b112:	9309      	str	r3, [sp, #36]	; 0x24
   2b114:	e7f1      	b.n	2b0fa <_dtoa_r+0x962>
   2b116:	9b00      	ldr	r3, [sp, #0]
   2b118:	2b00      	cmp	r3, #0
   2b11a:	f47f ada1 	bne.w	2ac60 <_dtoa_r+0x4c8>
   2b11e:	e9dd 1200 	ldrd	r1, r2, [sp]
   2b122:	f3c2 0313 	ubfx	r3, r2, #0, #20
   2b126:	2b00      	cmp	r3, #0
   2b128:	f47f adb4 	bne.w	2ac94 <_dtoa_r+0x4fc>
   2b12c:	f022 4700 	bic.w	r7, r2, #2147483648	; 0x80000000
   2b130:	0d3f      	lsrs	r7, r7, #20
   2b132:	053f      	lsls	r7, r7, #20
   2b134:	2f00      	cmp	r7, #0
   2b136:	f000 8200 	beq.w	2b53a <_dtoa_r+0xda2>
   2b13a:	9b06      	ldr	r3, [sp, #24]
   2b13c:	3301      	adds	r3, #1
   2b13e:	9306      	str	r3, [sp, #24]
   2b140:	9b05      	ldr	r3, [sp, #20]
   2b142:	3301      	adds	r3, #1
   2b144:	9305      	str	r3, [sp, #20]
   2b146:	f04f 0801 	mov.w	r8, #1
   2b14a:	e5a5      	b.n	2ac98 <_dtoa_r+0x500>
   2b14c:	9b08      	ldr	r3, [sp, #32]
   2b14e:	2b00      	cmp	r3, #0
   2b150:	f73f ac3e 	bgt.w	2a9d0 <_dtoa_r+0x238>
   2b154:	f040 8099 	bne.w	2b28a <_dtoa_r+0xaf2>
   2b158:	4649      	mov	r1, r9
   2b15a:	2200      	movs	r2, #0
   2b15c:	4b36      	ldr	r3, [pc, #216]	; (2b238 <_dtoa_r+0xaa0>)
   2b15e:	4640      	mov	r0, r8
   2b160:	f7fa f9bc 	bl	254dc <__aeabi_dmul>
   2b164:	e9dd 2300 	ldrd	r2, r3, [sp]
   2b168:	f7fa fc3e 	bl	259e8 <__aeabi_dcmpge>
   2b16c:	f8dd 9020 	ldr.w	r9, [sp, #32]
   2b170:	464e      	mov	r6, r9
   2b172:	2800      	cmp	r0, #0
   2b174:	d03e      	beq.n	2b1f4 <_dtoa_r+0xa5c>
   2b176:	ea6f 030b 	mvn.w	r3, fp
   2b17a:	9d07      	ldr	r5, [sp, #28]
   2b17c:	9304      	str	r3, [sp, #16]
   2b17e:	4649      	mov	r1, r9
   2b180:	4620      	mov	r0, r4
   2b182:	f000 fd85 	bl	2bc90 <_Bfree>
   2b186:	2e00      	cmp	r6, #0
   2b188:	f43f acd2 	beq.w	2ab30 <_dtoa_r+0x398>
   2b18c:	e6a3      	b.n	2aed6 <_dtoa_r+0x73e>
   2b18e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   2b190:	4651      	mov	r1, sl
   2b192:	4620      	mov	r0, r4
   2b194:	f000 feb2 	bl	2befc <__pow5mult>
   2b198:	4682      	mov	sl, r0
   2b19a:	e54f      	b.n	2ac3c <_dtoa_r+0x4a4>
   2b19c:	9a10      	ldr	r2, [sp, #64]	; 0x40
   2b19e:	2a00      	cmp	r2, #0
   2b1a0:	f000 816f 	beq.w	2b482 <_dtoa_r+0xcea>
   2b1a4:	f203 4333 	addw	r3, r3, #1075	; 0x433
   2b1a8:	9f0a      	ldr	r7, [sp, #40]	; 0x28
   2b1aa:	9d06      	ldr	r5, [sp, #24]
   2b1ac:	e4e7      	b.n	2ab7e <_dtoa_r+0x3e6>
   2b1ae:	9b00      	ldr	r3, [sp, #0]
   2b1b0:	2b00      	cmp	r3, #0
   2b1b2:	f47f ad6f 	bne.w	2ac94 <_dtoa_r+0x4fc>
   2b1b6:	e7b2      	b.n	2b11e <_dtoa_r+0x986>
   2b1b8:	f000 fd74 	bl	2bca4 <__multadd>
   2b1bc:	465f      	mov	r7, fp
   2b1be:	4606      	mov	r6, r0
   2b1c0:	4680      	mov	r8, r0
   2b1c2:	e5b6      	b.n	2ad32 <_dtoa_r+0x59a>
   2b1c4:	4620      	mov	r0, r4
   2b1c6:	f000 fd63 	bl	2bc90 <_Bfree>
   2b1ca:	2201      	movs	r2, #1
   2b1cc:	e5db      	b.n	2ad86 <_dtoa_r+0x5ee>
   2b1ce:	9b02      	ldr	r3, [sp, #8]
   2b1d0:	2b02      	cmp	r3, #2
   2b1d2:	f77f ad93 	ble.w	2acfc <_dtoa_r+0x564>
   2b1d6:	9b08      	ldr	r3, [sp, #32]
   2b1d8:	2b00      	cmp	r3, #0
   2b1da:	d1cc      	bne.n	2b176 <_dtoa_r+0x9de>
   2b1dc:	4649      	mov	r1, r9
   2b1de:	2205      	movs	r2, #5
   2b1e0:	4620      	mov	r0, r4
   2b1e2:	f000 fd5f 	bl	2bca4 <__multadd>
   2b1e6:	4601      	mov	r1, r0
   2b1e8:	4681      	mov	r9, r0
   2b1ea:	4650      	mov	r0, sl
   2b1ec:	f000 ff28 	bl	2c040 <__mcmp>
   2b1f0:	2800      	cmp	r0, #0
   2b1f2:	ddc0      	ble.n	2b176 <_dtoa_r+0x9de>
   2b1f4:	9a04      	ldr	r2, [sp, #16]
   2b1f6:	9907      	ldr	r1, [sp, #28]
   2b1f8:	2331      	movs	r3, #49	; 0x31
   2b1fa:	3201      	adds	r2, #1
   2b1fc:	9204      	str	r2, [sp, #16]
   2b1fe:	700b      	strb	r3, [r1, #0]
   2b200:	1c4d      	adds	r5, r1, #1
   2b202:	e7bc      	b.n	2b17e <_dtoa_r+0x9e6>
   2b204:	9a04      	ldr	r2, [sp, #16]
   2b206:	3201      	adds	r2, #1
   2b208:	9204      	str	r2, [sp, #16]
   2b20a:	9a07      	ldr	r2, [sp, #28]
   2b20c:	2331      	movs	r3, #49	; 0x31
   2b20e:	7013      	strb	r3, [r2, #0]
   2b210:	e651      	b.n	2aeb6 <_dtoa_r+0x71e>
   2b212:	2301      	movs	r3, #1
   2b214:	9309      	str	r3, [sp, #36]	; 0x24
   2b216:	e665      	b.n	2aee4 <_dtoa_r+0x74c>
   2b218:	f8dd a000 	ldr.w	sl, [sp]
   2b21c:	9c02      	ldr	r4, [sp, #8]
   2b21e:	e487      	b.n	2ab30 <_dtoa_r+0x398>
   2b220:	0002efa0 	.word	0x0002efa0
   2b224:	0002ef78 	.word	0x0002ef78
   2b228:	3ff00000 	.word	0x3ff00000
   2b22c:	401c0000 	.word	0x401c0000
   2b230:	3fe00000 	.word	0x3fe00000
   2b234:	40240000 	.word	0x40240000
   2b238:	40140000 	.word	0x40140000
   2b23c:	4648      	mov	r0, r9
   2b23e:	f7fa f8e7 	bl	25410 <__aeabi_i2d>
   2b242:	463a      	mov	r2, r7
   2b244:	4643      	mov	r3, r8
   2b246:	f7fa f949 	bl	254dc <__aeabi_dmul>
   2b24a:	2200      	movs	r2, #0
   2b24c:	4bc4      	ldr	r3, [pc, #784]	; (2b560 <_dtoa_r+0xdc8>)
   2b24e:	f7f9 ff93 	bl	25178 <__adddf3>
   2b252:	4605      	mov	r5, r0
   2b254:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
   2b258:	4641      	mov	r1, r8
   2b25a:	2200      	movs	r2, #0
   2b25c:	4bc1      	ldr	r3, [pc, #772]	; (2b564 <_dtoa_r+0xdcc>)
   2b25e:	4638      	mov	r0, r7
   2b260:	f7f9 ff88 	bl	25174 <__aeabi_dsub>
   2b264:	462a      	mov	r2, r5
   2b266:	4633      	mov	r3, r6
   2b268:	4680      	mov	r8, r0
   2b26a:	4689      	mov	r9, r1
   2b26c:	f7fa fbc6 	bl	259fc <__aeabi_dcmpgt>
   2b270:	2800      	cmp	r0, #0
   2b272:	f040 80ab 	bne.w	2b3cc <_dtoa_r+0xc34>
   2b276:	462a      	mov	r2, r5
   2b278:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
   2b27c:	4640      	mov	r0, r8
   2b27e:	4649      	mov	r1, r9
   2b280:	f7fa fb9e 	bl	259c0 <__aeabi_dcmplt>
   2b284:	2800      	cmp	r0, #0
   2b286:	f43f ab92 	beq.w	2a9ae <_dtoa_r+0x216>
   2b28a:	f04f 0900 	mov.w	r9, #0
   2b28e:	464e      	mov	r6, r9
   2b290:	e771      	b.n	2b176 <_dtoa_r+0x9de>
   2b292:	9807      	ldr	r0, [sp, #28]
   2b294:	f7ff bab8 	b.w	2a808 <_dtoa_r+0x70>
   2b298:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   2b29a:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
   2b29c:	970a      	str	r7, [sp, #40]	; 0x28
   2b29e:	1afb      	subs	r3, r7, r3
   2b2a0:	441a      	add	r2, r3
   2b2a2:	920b      	str	r2, [sp, #44]	; 0x2c
   2b2a4:	2700      	movs	r7, #0
   2b2a6:	e464      	b.n	2ab72 <_dtoa_r+0x3da>
   2b2a8:	ed9d 7b00 	vldr	d7, [sp]
   2b2ac:	f04f 0902 	mov.w	r9, #2
   2b2b0:	ed8d 7b0e 	vstr	d7, [sp, #56]	; 0x38
   2b2b4:	e658      	b.n	2af68 <_dtoa_r+0x7d0>
   2b2b6:	2100      	movs	r1, #0
   2b2b8:	6461      	str	r1, [r4, #68]	; 0x44
   2b2ba:	4620      	mov	r0, r4
   2b2bc:	f000 fcc2 	bl	2bc44 <_Balloc>
   2b2c0:	f04f 0b01 	mov.w	fp, #1
   2b2c4:	9007      	str	r0, [sp, #28]
   2b2c6:	6420      	str	r0, [r4, #64]	; 0x40
   2b2c8:	f8cd b020 	str.w	fp, [sp, #32]
   2b2cc:	f8cd b034 	str.w	fp, [sp, #52]	; 0x34
   2b2d0:	e629      	b.n	2af26 <_dtoa_r+0x78e>
   2b2d2:	2a00      	cmp	r2, #0
   2b2d4:	dd12      	ble.n	2b2fc <_dtoa_r+0xb64>
   2b2d6:	4651      	mov	r1, sl
   2b2d8:	2201      	movs	r2, #1
   2b2da:	4620      	mov	r0, r4
   2b2dc:	f000 fe5e 	bl	2bf9c <__lshift>
   2b2e0:	4649      	mov	r1, r9
   2b2e2:	4682      	mov	sl, r0
   2b2e4:	f000 feac 	bl	2c040 <__mcmp>
   2b2e8:	2800      	cmp	r0, #0
   2b2ea:	f340 8131 	ble.w	2b550 <_dtoa_r+0xdb8>
   2b2ee:	9b00      	ldr	r3, [sp, #0]
   2b2f0:	2b39      	cmp	r3, #57	; 0x39
   2b2f2:	f000 80f7 	beq.w	2b4e4 <_dtoa_r+0xd4c>
   2b2f6:	f105 0331 	add.w	r3, r5, #49	; 0x31
   2b2fa:	9300      	str	r3, [sp, #0]
   2b2fc:	f89d 3000 	ldrb.w	r3, [sp]
   2b300:	703b      	strb	r3, [r7, #0]
   2b302:	46b3      	mov	fp, r6
   2b304:	1c7d      	adds	r5, r7, #1
   2b306:	4646      	mov	r6, r8
   2b308:	e5d5      	b.n	2aeb6 <_dtoa_r+0x71e>
   2b30a:	d104      	bne.n	2b316 <_dtoa_r+0xb7e>
   2b30c:	9b00      	ldr	r3, [sp, #0]
   2b30e:	07db      	lsls	r3, r3, #31
   2b310:	d501      	bpl.n	2b316 <_dtoa_r+0xb7e>
   2b312:	e5c0      	b.n	2ae96 <_dtoa_r+0x6fe>
   2b314:	4615      	mov	r5, r2
   2b316:	f815 3c01 	ldrb.w	r3, [r5, #-1]
   2b31a:	2b30      	cmp	r3, #48	; 0x30
   2b31c:	f105 32ff 	add.w	r2, r5, #4294967295
   2b320:	d0f8      	beq.n	2b314 <_dtoa_r+0xb7c>
   2b322:	e5c8      	b.n	2aeb6 <_dtoa_r+0x71e>
   2b324:	f000 80b4 	beq.w	2b490 <_dtoa_r+0xcf8>
   2b328:	9b04      	ldr	r3, [sp, #16]
   2b32a:	425d      	negs	r5, r3
   2b32c:	4b8e      	ldr	r3, [pc, #568]	; (2b568 <_dtoa_r+0xdd0>)
   2b32e:	f005 020f 	and.w	r2, r5, #15
   2b332:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
   2b336:	e9d3 2300 	ldrd	r2, r3, [r3]
   2b33a:	e9dd 0100 	ldrd	r0, r1, [sp]
   2b33e:	f7fa f8cd 	bl	254dc <__aeabi_dmul>
   2b342:	112d      	asrs	r5, r5, #4
   2b344:	4607      	mov	r7, r0
   2b346:	4688      	mov	r8, r1
   2b348:	f000 8128 	beq.w	2b59c <_dtoa_r+0xe04>
   2b34c:	4e87      	ldr	r6, [pc, #540]	; (2b56c <_dtoa_r+0xdd4>)
   2b34e:	f04f 0902 	mov.w	r9, #2
   2b352:	07e9      	lsls	r1, r5, #31
   2b354:	d509      	bpl.n	2b36a <_dtoa_r+0xbd2>
   2b356:	4638      	mov	r0, r7
   2b358:	4641      	mov	r1, r8
   2b35a:	e9d6 2300 	ldrd	r2, r3, [r6]
   2b35e:	f7fa f8bd 	bl	254dc <__aeabi_dmul>
   2b362:	f109 0901 	add.w	r9, r9, #1
   2b366:	4607      	mov	r7, r0
   2b368:	4688      	mov	r8, r1
   2b36a:	106d      	asrs	r5, r5, #1
   2b36c:	f106 0608 	add.w	r6, r6, #8
   2b370:	d1ef      	bne.n	2b352 <_dtoa_r+0xbba>
   2b372:	e614      	b.n	2af9e <_dtoa_r+0x806>
   2b374:	9907      	ldr	r1, [sp, #28]
   2b376:	2230      	movs	r2, #48	; 0x30
   2b378:	700a      	strb	r2, [r1, #0]
   2b37a:	9a04      	ldr	r2, [sp, #16]
   2b37c:	f815 8c01 	ldrb.w	r8, [r5, #-1]
   2b380:	3201      	adds	r2, #1
   2b382:	9204      	str	r2, [sp, #16]
   2b384:	f7ff bbd0 	b.w	2ab28 <_dtoa_r+0x390>
   2b388:	6871      	ldr	r1, [r6, #4]
   2b38a:	4620      	mov	r0, r4
   2b38c:	f000 fc5a 	bl	2bc44 <_Balloc>
   2b390:	6933      	ldr	r3, [r6, #16]
   2b392:	3302      	adds	r3, #2
   2b394:	009a      	lsls	r2, r3, #2
   2b396:	4605      	mov	r5, r0
   2b398:	f106 010c 	add.w	r1, r6, #12
   2b39c:	300c      	adds	r0, #12
   2b39e:	f7fc fc5f 	bl	27c60 <memcpy>
   2b3a2:	4629      	mov	r1, r5
   2b3a4:	2201      	movs	r2, #1
   2b3a6:	4620      	mov	r0, r4
   2b3a8:	f000 fdf8 	bl	2bf9c <__lshift>
   2b3ac:	4680      	mov	r8, r0
   2b3ae:	e4b6      	b.n	2ad1e <_dtoa_r+0x586>
   2b3b0:	9b00      	ldr	r3, [sp, #0]
   2b3b2:	2b39      	cmp	r3, #57	; 0x39
   2b3b4:	f000 8096 	beq.w	2b4e4 <_dtoa_r+0xd4c>
   2b3b8:	9b00      	ldr	r3, [sp, #0]
   2b3ba:	3301      	adds	r3, #1
   2b3bc:	46b3      	mov	fp, r6
   2b3be:	703b      	strb	r3, [r7, #0]
   2b3c0:	1c7d      	adds	r5, r7, #1
   2b3c2:	4646      	mov	r6, r8
   2b3c4:	e577      	b.n	2aeb6 <_dtoa_r+0x71e>
   2b3c6:	46b3      	mov	fp, r6
   2b3c8:	4646      	mov	r6, r8
   2b3ca:	e558      	b.n	2ae7e <_dtoa_r+0x6e6>
   2b3cc:	f04f 0900 	mov.w	r9, #0
   2b3d0:	464e      	mov	r6, r9
   2b3d2:	e70f      	b.n	2b1f4 <_dtoa_r+0xa5c>
   2b3d4:	4964      	ldr	r1, [pc, #400]	; (2b568 <_dtoa_r+0xdd0>)
   2b3d6:	eb01 01c9 	add.w	r1, r1, r9, lsl #3
   2b3da:	462a      	mov	r2, r5
   2b3dc:	4633      	mov	r3, r6
   2b3de:	e951 0102 	ldrd	r0, r1, [r1, #-8]
   2b3e2:	f7fa f87b 	bl	254dc <__aeabi_dmul>
   2b3e6:	e9cd 010e 	strd	r0, r1, [sp, #56]	; 0x38
   2b3ea:	4638      	mov	r0, r7
   2b3ec:	4641      	mov	r1, r8
   2b3ee:	f7fa fb0f 	bl	25a10 <__aeabi_d2iz>
   2b3f2:	4605      	mov	r5, r0
   2b3f4:	f7fa f80c 	bl	25410 <__aeabi_i2d>
   2b3f8:	4602      	mov	r2, r0
   2b3fa:	460b      	mov	r3, r1
   2b3fc:	4638      	mov	r0, r7
   2b3fe:	4641      	mov	r1, r8
   2b400:	f7f9 feb8 	bl	25174 <__aeabi_dsub>
   2b404:	9a07      	ldr	r2, [sp, #28]
   2b406:	3530      	adds	r5, #48	; 0x30
   2b408:	f1b9 0f01 	cmp.w	r9, #1
   2b40c:	7015      	strb	r5, [r2, #0]
   2b40e:	4606      	mov	r6, r0
   2b410:	460f      	mov	r7, r1
   2b412:	f102 0501 	add.w	r5, r2, #1
   2b416:	d01c      	beq.n	2b452 <_dtoa_r+0xcba>
   2b418:	9b07      	ldr	r3, [sp, #28]
   2b41a:	4499      	add	r9, r3
   2b41c:	2200      	movs	r2, #0
   2b41e:	4b54      	ldr	r3, [pc, #336]	; (2b570 <_dtoa_r+0xdd8>)
   2b420:	4630      	mov	r0, r6
   2b422:	4639      	mov	r1, r7
   2b424:	f7fa f85a 	bl	254dc <__aeabi_dmul>
   2b428:	460f      	mov	r7, r1
   2b42a:	4606      	mov	r6, r0
   2b42c:	f7fa faf0 	bl	25a10 <__aeabi_d2iz>
   2b430:	4680      	mov	r8, r0
   2b432:	f7f9 ffed 	bl	25410 <__aeabi_i2d>
   2b436:	f108 0830 	add.w	r8, r8, #48	; 0x30
   2b43a:	4602      	mov	r2, r0
   2b43c:	460b      	mov	r3, r1
   2b43e:	4630      	mov	r0, r6
   2b440:	4639      	mov	r1, r7
   2b442:	f7f9 fe97 	bl	25174 <__aeabi_dsub>
   2b446:	f805 8b01 	strb.w	r8, [r5], #1
   2b44a:	454d      	cmp	r5, r9
   2b44c:	4606      	mov	r6, r0
   2b44e:	460f      	mov	r7, r1
   2b450:	d1e4      	bne.n	2b41c <_dtoa_r+0xc84>
   2b452:	2200      	movs	r2, #0
   2b454:	4b47      	ldr	r3, [pc, #284]	; (2b574 <_dtoa_r+0xddc>)
   2b456:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
   2b45a:	f7f9 fe8d 	bl	25178 <__adddf3>
   2b45e:	4632      	mov	r2, r6
   2b460:	463b      	mov	r3, r7
   2b462:	f7fa faad 	bl	259c0 <__aeabi_dcmplt>
   2b466:	2800      	cmp	r0, #0
   2b468:	d042      	beq.n	2b4f0 <_dtoa_r+0xd58>
   2b46a:	9b11      	ldr	r3, [sp, #68]	; 0x44
   2b46c:	9304      	str	r3, [sp, #16]
   2b46e:	f815 8c01 	ldrb.w	r8, [r5, #-1]
   2b472:	f7ff bb4c 	b.w	2ab0e <_dtoa_r+0x376>
   2b476:	9b06      	ldr	r3, [sp, #24]
   2b478:	9a08      	ldr	r2, [sp, #32]
   2b47a:	1a9d      	subs	r5, r3, r2
   2b47c:	2300      	movs	r3, #0
   2b47e:	f7ff bb7e 	b.w	2ab7e <_dtoa_r+0x3e6>
   2b482:	9b14      	ldr	r3, [sp, #80]	; 0x50
   2b484:	9f0a      	ldr	r7, [sp, #40]	; 0x28
   2b486:	9d06      	ldr	r5, [sp, #24]
   2b488:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
   2b48c:	f7ff bb77 	b.w	2ab7e <_dtoa_r+0x3e6>
   2b490:	e9dd 7800 	ldrd	r7, r8, [sp]
   2b494:	f04f 0902 	mov.w	r9, #2
   2b498:	e581      	b.n	2af9e <_dtoa_r+0x806>
   2b49a:	9b08      	ldr	r3, [sp, #32]
   2b49c:	2b00      	cmp	r3, #0
   2b49e:	f43f aecd 	beq.w	2b23c <_dtoa_r+0xaa4>
   2b4a2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   2b4a4:	2b00      	cmp	r3, #0
   2b4a6:	f77f aa82 	ble.w	2a9ae <_dtoa_r+0x216>
   2b4aa:	2200      	movs	r2, #0
   2b4ac:	4b30      	ldr	r3, [pc, #192]	; (2b570 <_dtoa_r+0xdd8>)
   2b4ae:	4638      	mov	r0, r7
   2b4b0:	4641      	mov	r1, r8
   2b4b2:	f7fa f813 	bl	254dc <__aeabi_dmul>
   2b4b6:	4607      	mov	r7, r0
   2b4b8:	4688      	mov	r8, r1
   2b4ba:	f109 0001 	add.w	r0, r9, #1
   2b4be:	f7f9 ffa7 	bl	25410 <__aeabi_i2d>
   2b4c2:	463a      	mov	r2, r7
   2b4c4:	4643      	mov	r3, r8
   2b4c6:	f7fa f809 	bl	254dc <__aeabi_dmul>
   2b4ca:	2200      	movs	r2, #0
   2b4cc:	4b24      	ldr	r3, [pc, #144]	; (2b560 <_dtoa_r+0xdc8>)
   2b4ce:	f7f9 fe53 	bl	25178 <__adddf3>
   2b4d2:	9a04      	ldr	r2, [sp, #16]
   2b4d4:	f8dd 9034 	ldr.w	r9, [sp, #52]	; 0x34
   2b4d8:	3a01      	subs	r2, #1
   2b4da:	4605      	mov	r5, r0
   2b4dc:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
   2b4e0:	9211      	str	r2, [sp, #68]	; 0x44
   2b4e2:	e57d      	b.n	2afe0 <_dtoa_r+0x848>
   2b4e4:	2239      	movs	r2, #57	; 0x39
   2b4e6:	46b3      	mov	fp, r6
   2b4e8:	703a      	strb	r2, [r7, #0]
   2b4ea:	4646      	mov	r6, r8
   2b4ec:	1c7d      	adds	r5, r7, #1
   2b4ee:	e4d4      	b.n	2ae9a <_dtoa_r+0x702>
   2b4f0:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
   2b4f4:	2000      	movs	r0, #0
   2b4f6:	491f      	ldr	r1, [pc, #124]	; (2b574 <_dtoa_r+0xddc>)
   2b4f8:	f7f9 fe3c 	bl	25174 <__aeabi_dsub>
   2b4fc:	4632      	mov	r2, r6
   2b4fe:	463b      	mov	r3, r7
   2b500:	f7fa fa7c 	bl	259fc <__aeabi_dcmpgt>
   2b504:	b910      	cbnz	r0, 2b50c <_dtoa_r+0xd74>
   2b506:	f7ff ba52 	b.w	2a9ae <_dtoa_r+0x216>
   2b50a:	4615      	mov	r5, r2
   2b50c:	f815 3c01 	ldrb.w	r3, [r5, #-1]
   2b510:	2b30      	cmp	r3, #48	; 0x30
   2b512:	f105 32ff 	add.w	r2, r5, #4294967295
   2b516:	d0f8      	beq.n	2b50a <_dtoa_r+0xd72>
   2b518:	e5ea      	b.n	2b0f0 <_dtoa_r+0x958>
   2b51a:	4643      	mov	r3, r8
   2b51c:	f8dd a048 	ldr.w	sl, [sp, #72]	; 0x48
   2b520:	46a0      	mov	r8, r4
   2b522:	461c      	mov	r4, r3
   2b524:	9b11      	ldr	r3, [sp, #68]	; 0x44
   2b526:	9304      	str	r3, [sp, #16]
   2b528:	f7ff baf1 	b.w	2ab0e <_dtoa_r+0x376>
   2b52c:	f8dd a048 	ldr.w	sl, [sp, #72]	; 0x48
   2b530:	f8dd b04c 	ldr.w	fp, [sp, #76]	; 0x4c
   2b534:	4644      	mov	r4, r8
   2b536:	f7ff ba3a 	b.w	2a9ae <_dtoa_r+0x216>
   2b53a:	46b8      	mov	r8, r7
   2b53c:	f7ff bbac 	b.w	2ac98 <_dtoa_r+0x500>
   2b540:	9b00      	ldr	r3, [sp, #0]
   2b542:	2b39      	cmp	r3, #57	; 0x39
   2b544:	d0ce      	beq.n	2b4e4 <_dtoa_r+0xd4c>
   2b546:	f1bb 0f00 	cmp.w	fp, #0
   2b54a:	f73f aed4 	bgt.w	2b2f6 <_dtoa_r+0xb5e>
   2b54e:	e6d5      	b.n	2b2fc <_dtoa_r+0xb64>
   2b550:	f47f aed4 	bne.w	2b2fc <_dtoa_r+0xb64>
   2b554:	9b00      	ldr	r3, [sp, #0]
   2b556:	07da      	lsls	r2, r3, #31
   2b558:	f57f aed0 	bpl.w	2b2fc <_dtoa_r+0xb64>
   2b55c:	e6c7      	b.n	2b2ee <_dtoa_r+0xb56>
   2b55e:	bf00      	nop
   2b560:	401c0000 	.word	0x401c0000
   2b564:	40140000 	.word	0x40140000
   2b568:	0002efa0 	.word	0x0002efa0
   2b56c:	0002ef78 	.word	0x0002ef78
   2b570:	40240000 	.word	0x40240000
   2b574:	3fe00000 	.word	0x3fe00000
   2b578:	4631      	mov	r1, r6
   2b57a:	2300      	movs	r3, #0
   2b57c:	220a      	movs	r2, #10
   2b57e:	4620      	mov	r0, r4
   2b580:	f000 fb90 	bl	2bca4 <__multadd>
   2b584:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   2b586:	2b00      	cmp	r3, #0
   2b588:	4606      	mov	r6, r0
   2b58a:	dd0a      	ble.n	2b5a2 <_dtoa_r+0xe0a>
   2b58c:	9308      	str	r3, [sp, #32]
   2b58e:	f7ff bbb9 	b.w	2ad04 <_dtoa_r+0x56c>
   2b592:	9b02      	ldr	r3, [sp, #8]
   2b594:	2b02      	cmp	r3, #2
   2b596:	dc22      	bgt.n	2b5de <_dtoa_r+0xe46>
   2b598:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   2b59a:	e44a      	b.n	2ae32 <_dtoa_r+0x69a>
   2b59c:	f04f 0902 	mov.w	r9, #2
   2b5a0:	e4fd      	b.n	2af9e <_dtoa_r+0x806>
   2b5a2:	9b02      	ldr	r3, [sp, #8]
   2b5a4:	2b02      	cmp	r3, #2
   2b5a6:	dc1a      	bgt.n	2b5de <_dtoa_r+0xe46>
   2b5a8:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   2b5aa:	e7ef      	b.n	2b58c <_dtoa_r+0xdf4>
   2b5ac:	2500      	movs	r5, #0
   2b5ae:	6465      	str	r5, [r4, #68]	; 0x44
   2b5b0:	4629      	mov	r1, r5
   2b5b2:	4620      	mov	r0, r4
   2b5b4:	f000 fb46 	bl	2bc44 <_Balloc>
   2b5b8:	f04f 33ff 	mov.w	r3, #4294967295
   2b5bc:	9308      	str	r3, [sp, #32]
   2b5be:	930d      	str	r3, [sp, #52]	; 0x34
   2b5c0:	2301      	movs	r3, #1
   2b5c2:	9007      	str	r0, [sp, #28]
   2b5c4:	46ab      	mov	fp, r5
   2b5c6:	6420      	str	r0, [r4, #64]	; 0x40
   2b5c8:	9309      	str	r3, [sp, #36]	; 0x24
   2b5ca:	f7ff b9f0 	b.w	2a9ae <_dtoa_r+0x216>
   2b5ce:	f43f ab7b 	beq.w	2acc8 <_dtoa_r+0x530>
   2b5d2:	f1c0 003c 	rsb	r0, r0, #60	; 0x3c
   2b5d6:	e40b      	b.n	2adf0 <_dtoa_r+0x658>
   2b5d8:	2701      	movs	r7, #1
   2b5da:	f7ff b9af 	b.w	2a93c <_dtoa_r+0x1a4>
   2b5de:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   2b5e0:	9308      	str	r3, [sp, #32]
   2b5e2:	e5f8      	b.n	2b1d6 <_dtoa_r+0xa3e>

0002b5e4 <__sflush_r>:
   2b5e4:	f9b1 300c 	ldrsh.w	r3, [r1, #12]
   2b5e8:	b29a      	uxth	r2, r3
   2b5ea:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   2b5ee:	460d      	mov	r5, r1
   2b5f0:	0711      	lsls	r1, r2, #28
   2b5f2:	4680      	mov	r8, r0
   2b5f4:	d43a      	bmi.n	2b66c <__sflush_r+0x88>
   2b5f6:	686a      	ldr	r2, [r5, #4]
   2b5f8:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
   2b5fc:	2a00      	cmp	r2, #0
   2b5fe:	81ab      	strh	r3, [r5, #12]
   2b600:	dd6f      	ble.n	2b6e2 <__sflush_r+0xfe>
   2b602:	6aac      	ldr	r4, [r5, #40]	; 0x28
   2b604:	2c00      	cmp	r4, #0
   2b606:	d049      	beq.n	2b69c <__sflush_r+0xb8>
   2b608:	2200      	movs	r2, #0
   2b60a:	b29b      	uxth	r3, r3
   2b60c:	f8d8 6000 	ldr.w	r6, [r8]
   2b610:	f8c8 2000 	str.w	r2, [r8]
   2b614:	f413 5280 	ands.w	r2, r3, #4096	; 0x1000
   2b618:	d067      	beq.n	2b6ea <__sflush_r+0x106>
   2b61a:	6d2a      	ldr	r2, [r5, #80]	; 0x50
   2b61c:	075f      	lsls	r7, r3, #29
   2b61e:	d505      	bpl.n	2b62c <__sflush_r+0x48>
   2b620:	6869      	ldr	r1, [r5, #4]
   2b622:	6b2b      	ldr	r3, [r5, #48]	; 0x30
   2b624:	1a52      	subs	r2, r2, r1
   2b626:	b10b      	cbz	r3, 2b62c <__sflush_r+0x48>
   2b628:	6beb      	ldr	r3, [r5, #60]	; 0x3c
   2b62a:	1ad2      	subs	r2, r2, r3
   2b62c:	2300      	movs	r3, #0
   2b62e:	69e9      	ldr	r1, [r5, #28]
   2b630:	4640      	mov	r0, r8
   2b632:	47a0      	blx	r4
   2b634:	1c44      	adds	r4, r0, #1
   2b636:	d03c      	beq.n	2b6b2 <__sflush_r+0xce>
   2b638:	f9b5 300c 	ldrsh.w	r3, [r5, #12]
   2b63c:	692a      	ldr	r2, [r5, #16]
   2b63e:	602a      	str	r2, [r5, #0]
   2b640:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
   2b644:	2200      	movs	r2, #0
   2b646:	81ab      	strh	r3, [r5, #12]
   2b648:	04db      	lsls	r3, r3, #19
   2b64a:	606a      	str	r2, [r5, #4]
   2b64c:	d447      	bmi.n	2b6de <__sflush_r+0xfa>
   2b64e:	6b29      	ldr	r1, [r5, #48]	; 0x30
   2b650:	f8c8 6000 	str.w	r6, [r8]
   2b654:	b311      	cbz	r1, 2b69c <__sflush_r+0xb8>
   2b656:	f105 0340 	add.w	r3, r5, #64	; 0x40
   2b65a:	4299      	cmp	r1, r3
   2b65c:	d002      	beq.n	2b664 <__sflush_r+0x80>
   2b65e:	4640      	mov	r0, r8
   2b660:	f000 f95a 	bl	2b918 <_free_r>
   2b664:	2000      	movs	r0, #0
   2b666:	6328      	str	r0, [r5, #48]	; 0x30
   2b668:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   2b66c:	692e      	ldr	r6, [r5, #16]
   2b66e:	b1ae      	cbz	r6, 2b69c <__sflush_r+0xb8>
   2b670:	682c      	ldr	r4, [r5, #0]
   2b672:	602e      	str	r6, [r5, #0]
   2b674:	0791      	lsls	r1, r2, #30
   2b676:	bf0c      	ite	eq
   2b678:	696b      	ldreq	r3, [r5, #20]
   2b67a:	2300      	movne	r3, #0
   2b67c:	1ba4      	subs	r4, r4, r6
   2b67e:	60ab      	str	r3, [r5, #8]
   2b680:	e00a      	b.n	2b698 <__sflush_r+0xb4>
   2b682:	4623      	mov	r3, r4
   2b684:	4632      	mov	r2, r6
   2b686:	6a6f      	ldr	r7, [r5, #36]	; 0x24
   2b688:	69e9      	ldr	r1, [r5, #28]
   2b68a:	4640      	mov	r0, r8
   2b68c:	47b8      	blx	r7
   2b68e:	2800      	cmp	r0, #0
   2b690:	eba4 0400 	sub.w	r4, r4, r0
   2b694:	4406      	add	r6, r0
   2b696:	dd04      	ble.n	2b6a2 <__sflush_r+0xbe>
   2b698:	2c00      	cmp	r4, #0
   2b69a:	dcf2      	bgt.n	2b682 <__sflush_r+0x9e>
   2b69c:	2000      	movs	r0, #0
   2b69e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   2b6a2:	89ab      	ldrh	r3, [r5, #12]
   2b6a4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   2b6a8:	81ab      	strh	r3, [r5, #12]
   2b6aa:	f04f 30ff 	mov.w	r0, #4294967295
   2b6ae:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   2b6b2:	f8d8 4000 	ldr.w	r4, [r8]
   2b6b6:	2c1d      	cmp	r4, #29
   2b6b8:	d8f3      	bhi.n	2b6a2 <__sflush_r+0xbe>
   2b6ba:	4b19      	ldr	r3, [pc, #100]	; (2b720 <__sflush_r+0x13c>)
   2b6bc:	40e3      	lsrs	r3, r4
   2b6be:	43db      	mvns	r3, r3
   2b6c0:	f013 0301 	ands.w	r3, r3, #1
   2b6c4:	d1ed      	bne.n	2b6a2 <__sflush_r+0xbe>
   2b6c6:	f9b5 200c 	ldrsh.w	r2, [r5, #12]
   2b6ca:	606b      	str	r3, [r5, #4]
   2b6cc:	f422 6300 	bic.w	r3, r2, #2048	; 0x800
   2b6d0:	6929      	ldr	r1, [r5, #16]
   2b6d2:	81ab      	strh	r3, [r5, #12]
   2b6d4:	04da      	lsls	r2, r3, #19
   2b6d6:	6029      	str	r1, [r5, #0]
   2b6d8:	d5b9      	bpl.n	2b64e <__sflush_r+0x6a>
   2b6da:	2c00      	cmp	r4, #0
   2b6dc:	d1b7      	bne.n	2b64e <__sflush_r+0x6a>
   2b6de:	6528      	str	r0, [r5, #80]	; 0x50
   2b6e0:	e7b5      	b.n	2b64e <__sflush_r+0x6a>
   2b6e2:	6bea      	ldr	r2, [r5, #60]	; 0x3c
   2b6e4:	2a00      	cmp	r2, #0
   2b6e6:	dc8c      	bgt.n	2b602 <__sflush_r+0x1e>
   2b6e8:	e7d8      	b.n	2b69c <__sflush_r+0xb8>
   2b6ea:	2301      	movs	r3, #1
   2b6ec:	69e9      	ldr	r1, [r5, #28]
   2b6ee:	4640      	mov	r0, r8
   2b6f0:	47a0      	blx	r4
   2b6f2:	1c43      	adds	r3, r0, #1
   2b6f4:	4602      	mov	r2, r0
   2b6f6:	d002      	beq.n	2b6fe <__sflush_r+0x11a>
   2b6f8:	89ab      	ldrh	r3, [r5, #12]
   2b6fa:	6aac      	ldr	r4, [r5, #40]	; 0x28
   2b6fc:	e78e      	b.n	2b61c <__sflush_r+0x38>
   2b6fe:	f8d8 3000 	ldr.w	r3, [r8]
   2b702:	2b00      	cmp	r3, #0
   2b704:	d0f8      	beq.n	2b6f8 <__sflush_r+0x114>
   2b706:	2b1d      	cmp	r3, #29
   2b708:	d001      	beq.n	2b70e <__sflush_r+0x12a>
   2b70a:	2b16      	cmp	r3, #22
   2b70c:	d102      	bne.n	2b714 <__sflush_r+0x130>
   2b70e:	f8c8 6000 	str.w	r6, [r8]
   2b712:	e7c3      	b.n	2b69c <__sflush_r+0xb8>
   2b714:	89ab      	ldrh	r3, [r5, #12]
   2b716:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   2b71a:	81ab      	strh	r3, [r5, #12]
   2b71c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   2b720:	20400001 	.word	0x20400001

0002b724 <_fflush_r>:
   2b724:	b538      	push	{r3, r4, r5, lr}
   2b726:	460d      	mov	r5, r1
   2b728:	4604      	mov	r4, r0
   2b72a:	b108      	cbz	r0, 2b730 <_fflush_r+0xc>
   2b72c:	6b83      	ldr	r3, [r0, #56]	; 0x38
   2b72e:	b1bb      	cbz	r3, 2b760 <_fflush_r+0x3c>
   2b730:	f9b5 000c 	ldrsh.w	r0, [r5, #12]
   2b734:	b188      	cbz	r0, 2b75a <_fflush_r+0x36>
   2b736:	6e6b      	ldr	r3, [r5, #100]	; 0x64
   2b738:	07db      	lsls	r3, r3, #31
   2b73a:	d401      	bmi.n	2b740 <_fflush_r+0x1c>
   2b73c:	0581      	lsls	r1, r0, #22
   2b73e:	d517      	bpl.n	2b770 <_fflush_r+0x4c>
   2b740:	4620      	mov	r0, r4
   2b742:	4629      	mov	r1, r5
   2b744:	f7ff ff4e 	bl	2b5e4 <__sflush_r>
   2b748:	6e6b      	ldr	r3, [r5, #100]	; 0x64
   2b74a:	07da      	lsls	r2, r3, #31
   2b74c:	4604      	mov	r4, r0
   2b74e:	d402      	bmi.n	2b756 <_fflush_r+0x32>
   2b750:	89ab      	ldrh	r3, [r5, #12]
   2b752:	059b      	lsls	r3, r3, #22
   2b754:	d507      	bpl.n	2b766 <_fflush_r+0x42>
   2b756:	4620      	mov	r0, r4
   2b758:	bd38      	pop	{r3, r4, r5, pc}
   2b75a:	4604      	mov	r4, r0
   2b75c:	4620      	mov	r0, r4
   2b75e:	bd38      	pop	{r3, r4, r5, pc}
   2b760:	f000 f838 	bl	2b7d4 <__sinit>
   2b764:	e7e4      	b.n	2b730 <_fflush_r+0xc>
   2b766:	6da8      	ldr	r0, [r5, #88]	; 0x58
   2b768:	f7fb ff1e 	bl	275a8 <__retarget_lock_release_recursive>
   2b76c:	4620      	mov	r0, r4
   2b76e:	bd38      	pop	{r3, r4, r5, pc}
   2b770:	6da8      	ldr	r0, [r5, #88]	; 0x58
   2b772:	f7fb ff17 	bl	275a4 <__retarget_lock_acquire_recursive>
   2b776:	e7e3      	b.n	2b740 <_fflush_r+0x1c>

0002b778 <_cleanup_r>:
   2b778:	4901      	ldr	r1, [pc, #4]	; (2b780 <_cleanup_r+0x8>)
   2b77a:	f000 b9b3 	b.w	2bae4 <_fwalk_reent>
   2b77e:	bf00      	nop
   2b780:	0002c5f1 	.word	0x0002c5f1

0002b784 <std.isra.0>:
   2b784:	b510      	push	{r4, lr}
   2b786:	2300      	movs	r3, #0
   2b788:	4604      	mov	r4, r0
   2b78a:	8181      	strh	r1, [r0, #12]
   2b78c:	81c2      	strh	r2, [r0, #14]
   2b78e:	6003      	str	r3, [r0, #0]
   2b790:	6043      	str	r3, [r0, #4]
   2b792:	6083      	str	r3, [r0, #8]
   2b794:	6643      	str	r3, [r0, #100]	; 0x64
   2b796:	6103      	str	r3, [r0, #16]
   2b798:	6143      	str	r3, [r0, #20]
   2b79a:	6183      	str	r3, [r0, #24]
   2b79c:	4619      	mov	r1, r3
   2b79e:	2208      	movs	r2, #8
   2b7a0:	305c      	adds	r0, #92	; 0x5c
   2b7a2:	f7fc fb5b 	bl	27e5c <memset>
   2b7a6:	4807      	ldr	r0, [pc, #28]	; (2b7c4 <std.isra.0+0x40>)
   2b7a8:	4907      	ldr	r1, [pc, #28]	; (2b7c8 <std.isra.0+0x44>)
   2b7aa:	4a08      	ldr	r2, [pc, #32]	; (2b7cc <std.isra.0+0x48>)
   2b7ac:	4b08      	ldr	r3, [pc, #32]	; (2b7d0 <std.isra.0+0x4c>)
   2b7ae:	6220      	str	r0, [r4, #32]
   2b7b0:	61e4      	str	r4, [r4, #28]
   2b7b2:	6261      	str	r1, [r4, #36]	; 0x24
   2b7b4:	62a2      	str	r2, [r4, #40]	; 0x28
   2b7b6:	62e3      	str	r3, [r4, #44]	; 0x2c
   2b7b8:	f104 0058 	add.w	r0, r4, #88	; 0x58
   2b7bc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   2b7c0:	f7fb beec 	b.w	2759c <__retarget_lock_init_recursive>
   2b7c4:	0002c23d 	.word	0x0002c23d
   2b7c8:	0002c261 	.word	0x0002c261
   2b7cc:	0002c29d 	.word	0x0002c29d
   2b7d0:	0002c2bd 	.word	0x0002c2bd

0002b7d4 <__sinit>:
   2b7d4:	b510      	push	{r4, lr}
   2b7d6:	4604      	mov	r4, r0
   2b7d8:	4812      	ldr	r0, [pc, #72]	; (2b824 <__sinit+0x50>)
   2b7da:	f7fb fee3 	bl	275a4 <__retarget_lock_acquire_recursive>
   2b7de:	6ba2      	ldr	r2, [r4, #56]	; 0x38
   2b7e0:	b9d2      	cbnz	r2, 2b818 <__sinit+0x44>
   2b7e2:	f504 733b 	add.w	r3, r4, #748	; 0x2ec
   2b7e6:	4810      	ldr	r0, [pc, #64]	; (2b828 <__sinit+0x54>)
   2b7e8:	f8c4 32e8 	str.w	r3, [r4, #744]	; 0x2e8
   2b7ec:	2103      	movs	r1, #3
   2b7ee:	f8c4 22e0 	str.w	r2, [r4, #736]	; 0x2e0
   2b7f2:	63e0      	str	r0, [r4, #60]	; 0x3c
   2b7f4:	f8c4 12e4 	str.w	r1, [r4, #740]	; 0x2e4
   2b7f8:	6860      	ldr	r0, [r4, #4]
   2b7fa:	2104      	movs	r1, #4
   2b7fc:	f7ff ffc2 	bl	2b784 <std.isra.0>
   2b800:	2201      	movs	r2, #1
   2b802:	2109      	movs	r1, #9
   2b804:	68a0      	ldr	r0, [r4, #8]
   2b806:	f7ff ffbd 	bl	2b784 <std.isra.0>
   2b80a:	2202      	movs	r2, #2
   2b80c:	2112      	movs	r1, #18
   2b80e:	68e0      	ldr	r0, [r4, #12]
   2b810:	f7ff ffb8 	bl	2b784 <std.isra.0>
   2b814:	2301      	movs	r3, #1
   2b816:	63a3      	str	r3, [r4, #56]	; 0x38
   2b818:	4802      	ldr	r0, [pc, #8]	; (2b824 <__sinit+0x50>)
   2b81a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   2b81e:	f7fb bec3 	b.w	275a8 <__retarget_lock_release_recursive>
   2b822:	bf00      	nop
   2b824:	2000a428 	.word	0x2000a428
   2b828:	0002b779 	.word	0x0002b779

0002b82c <__sfp_lock_acquire>:
   2b82c:	4801      	ldr	r0, [pc, #4]	; (2b834 <__sfp_lock_acquire+0x8>)
   2b82e:	f7fb beb9 	b.w	275a4 <__retarget_lock_acquire_recursive>
   2b832:	bf00      	nop
   2b834:	2000a43c 	.word	0x2000a43c

0002b838 <__sfp_lock_release>:
   2b838:	4801      	ldr	r0, [pc, #4]	; (2b840 <__sfp_lock_release+0x8>)
   2b83a:	f7fb beb5 	b.w	275a8 <__retarget_lock_release_recursive>
   2b83e:	bf00      	nop
   2b840:	2000a43c 	.word	0x2000a43c

0002b844 <__libc_fini_array>:
   2b844:	b538      	push	{r3, r4, r5, lr}
   2b846:	4c0a      	ldr	r4, [pc, #40]	; (2b870 <__libc_fini_array+0x2c>)
   2b848:	4d0a      	ldr	r5, [pc, #40]	; (2b874 <__libc_fini_array+0x30>)
   2b84a:	1b64      	subs	r4, r4, r5
   2b84c:	10a4      	asrs	r4, r4, #2
   2b84e:	d00a      	beq.n	2b866 <__libc_fini_array+0x22>
   2b850:	f104 4380 	add.w	r3, r4, #1073741824	; 0x40000000
   2b854:	3b01      	subs	r3, #1
   2b856:	eb05 0583 	add.w	r5, r5, r3, lsl #2
   2b85a:	3c01      	subs	r4, #1
   2b85c:	f855 3904 	ldr.w	r3, [r5], #-4
   2b860:	4798      	blx	r3
   2b862:	2c00      	cmp	r4, #0
   2b864:	d1f9      	bne.n	2b85a <__libc_fini_array+0x16>
   2b866:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   2b86a:	f001 b927 	b.w	2cabc <_fini>
   2b86e:	bf00      	nop
   2b870:	0002cb08 	.word	0x0002cb08
   2b874:	0002cb04 	.word	0x0002cb04

0002b878 <_malloc_trim_r>:
   2b878:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   2b87a:	4f24      	ldr	r7, [pc, #144]	; (2b90c <_malloc_trim_r+0x94>)
   2b87c:	460c      	mov	r4, r1
   2b87e:	4606      	mov	r6, r0
   2b880:	f7fc fb3a 	bl	27ef8 <__malloc_lock>
   2b884:	68bb      	ldr	r3, [r7, #8]
   2b886:	685d      	ldr	r5, [r3, #4]
   2b888:	f5c4 617e 	rsb	r1, r4, #4064	; 0xfe0
   2b88c:	310f      	adds	r1, #15
   2b88e:	f025 0503 	bic.w	r5, r5, #3
   2b892:	4429      	add	r1, r5
   2b894:	f421 617f 	bic.w	r1, r1, #4080	; 0xff0
   2b898:	f021 010f 	bic.w	r1, r1, #15
   2b89c:	f5a1 5480 	sub.w	r4, r1, #4096	; 0x1000
   2b8a0:	f5b4 5f80 	cmp.w	r4, #4096	; 0x1000
   2b8a4:	db07      	blt.n	2b8b6 <_malloc_trim_r+0x3e>
   2b8a6:	2100      	movs	r1, #0
   2b8a8:	4630      	mov	r0, r6
   2b8aa:	f7fc fd37 	bl	2831c <_sbrk_r>
   2b8ae:	68bb      	ldr	r3, [r7, #8]
   2b8b0:	442b      	add	r3, r5
   2b8b2:	4298      	cmp	r0, r3
   2b8b4:	d004      	beq.n	2b8c0 <_malloc_trim_r+0x48>
   2b8b6:	4630      	mov	r0, r6
   2b8b8:	f7fc fb24 	bl	27f04 <__malloc_unlock>
   2b8bc:	2000      	movs	r0, #0
   2b8be:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   2b8c0:	4261      	negs	r1, r4
   2b8c2:	4630      	mov	r0, r6
   2b8c4:	f7fc fd2a 	bl	2831c <_sbrk_r>
   2b8c8:	3001      	adds	r0, #1
   2b8ca:	d00d      	beq.n	2b8e8 <_malloc_trim_r+0x70>
   2b8cc:	4b10      	ldr	r3, [pc, #64]	; (2b910 <_malloc_trim_r+0x98>)
   2b8ce:	68ba      	ldr	r2, [r7, #8]
   2b8d0:	6819      	ldr	r1, [r3, #0]
   2b8d2:	1b2d      	subs	r5, r5, r4
   2b8d4:	f045 0501 	orr.w	r5, r5, #1
   2b8d8:	4630      	mov	r0, r6
   2b8da:	1b09      	subs	r1, r1, r4
   2b8dc:	6055      	str	r5, [r2, #4]
   2b8de:	6019      	str	r1, [r3, #0]
   2b8e0:	f7fc fb10 	bl	27f04 <__malloc_unlock>
   2b8e4:	2001      	movs	r0, #1
   2b8e6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   2b8e8:	2100      	movs	r1, #0
   2b8ea:	4630      	mov	r0, r6
   2b8ec:	f7fc fd16 	bl	2831c <_sbrk_r>
   2b8f0:	68ba      	ldr	r2, [r7, #8]
   2b8f2:	1a83      	subs	r3, r0, r2
   2b8f4:	2b0f      	cmp	r3, #15
   2b8f6:	ddde      	ble.n	2b8b6 <_malloc_trim_r+0x3e>
   2b8f8:	4c06      	ldr	r4, [pc, #24]	; (2b914 <_malloc_trim_r+0x9c>)
   2b8fa:	4905      	ldr	r1, [pc, #20]	; (2b910 <_malloc_trim_r+0x98>)
   2b8fc:	6824      	ldr	r4, [r4, #0]
   2b8fe:	f043 0301 	orr.w	r3, r3, #1
   2b902:	1b00      	subs	r0, r0, r4
   2b904:	6053      	str	r3, [r2, #4]
   2b906:	6008      	str	r0, [r1, #0]
   2b908:	e7d5      	b.n	2b8b6 <_malloc_trim_r+0x3e>
   2b90a:	bf00      	nop
   2b90c:	200006a4 	.word	0x200006a4
   2b910:	2000297c 	.word	0x2000297c
   2b914:	20000aac 	.word	0x20000aac

0002b918 <_free_r>:
   2b918:	2900      	cmp	r1, #0
   2b91a:	d044      	beq.n	2b9a6 <_free_r+0x8e>
   2b91c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   2b920:	460d      	mov	r5, r1
   2b922:	4680      	mov	r8, r0
   2b924:	f7fc fae8 	bl	27ef8 <__malloc_lock>
   2b928:	f855 7c04 	ldr.w	r7, [r5, #-4]
   2b92c:	4969      	ldr	r1, [pc, #420]	; (2bad4 <_free_r+0x1bc>)
   2b92e:	f027 0301 	bic.w	r3, r7, #1
   2b932:	f1a5 0408 	sub.w	r4, r5, #8
   2b936:	18e2      	adds	r2, r4, r3
   2b938:	688e      	ldr	r6, [r1, #8]
   2b93a:	6850      	ldr	r0, [r2, #4]
   2b93c:	42b2      	cmp	r2, r6
   2b93e:	f020 0003 	bic.w	r0, r0, #3
   2b942:	d05e      	beq.n	2ba02 <_free_r+0xea>
   2b944:	07fe      	lsls	r6, r7, #31
   2b946:	6050      	str	r0, [r2, #4]
   2b948:	d40b      	bmi.n	2b962 <_free_r+0x4a>
   2b94a:	f855 7c08 	ldr.w	r7, [r5, #-8]
   2b94e:	1be4      	subs	r4, r4, r7
   2b950:	f101 0e08 	add.w	lr, r1, #8
   2b954:	68a5      	ldr	r5, [r4, #8]
   2b956:	4575      	cmp	r5, lr
   2b958:	443b      	add	r3, r7
   2b95a:	d06d      	beq.n	2ba38 <_free_r+0x120>
   2b95c:	68e7      	ldr	r7, [r4, #12]
   2b95e:	60ef      	str	r7, [r5, #12]
   2b960:	60bd      	str	r5, [r7, #8]
   2b962:	1815      	adds	r5, r2, r0
   2b964:	686d      	ldr	r5, [r5, #4]
   2b966:	07ed      	lsls	r5, r5, #31
   2b968:	d53e      	bpl.n	2b9e8 <_free_r+0xd0>
   2b96a:	f043 0201 	orr.w	r2, r3, #1
   2b96e:	6062      	str	r2, [r4, #4]
   2b970:	50e3      	str	r3, [r4, r3]
   2b972:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
   2b976:	d217      	bcs.n	2b9a8 <_free_r+0x90>
   2b978:	08db      	lsrs	r3, r3, #3
   2b97a:	1c58      	adds	r0, r3, #1
   2b97c:	109a      	asrs	r2, r3, #2
   2b97e:	684d      	ldr	r5, [r1, #4]
   2b980:	f851 7030 	ldr.w	r7, [r1, r0, lsl #3]
   2b984:	60a7      	str	r7, [r4, #8]
   2b986:	2301      	movs	r3, #1
   2b988:	4093      	lsls	r3, r2
   2b98a:	eb01 02c0 	add.w	r2, r1, r0, lsl #3
   2b98e:	432b      	orrs	r3, r5
   2b990:	3a08      	subs	r2, #8
   2b992:	60e2      	str	r2, [r4, #12]
   2b994:	604b      	str	r3, [r1, #4]
   2b996:	f841 4030 	str.w	r4, [r1, r0, lsl #3]
   2b99a:	60fc      	str	r4, [r7, #12]
   2b99c:	4640      	mov	r0, r8
   2b99e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   2b9a2:	f7fc baaf 	b.w	27f04 <__malloc_unlock>
   2b9a6:	4770      	bx	lr
   2b9a8:	0a5a      	lsrs	r2, r3, #9
   2b9aa:	2a04      	cmp	r2, #4
   2b9ac:	d852      	bhi.n	2ba54 <_free_r+0x13c>
   2b9ae:	099a      	lsrs	r2, r3, #6
   2b9b0:	f102 0739 	add.w	r7, r2, #57	; 0x39
   2b9b4:	00ff      	lsls	r7, r7, #3
   2b9b6:	f102 0538 	add.w	r5, r2, #56	; 0x38
   2b9ba:	19c8      	adds	r0, r1, r7
   2b9bc:	59ca      	ldr	r2, [r1, r7]
   2b9be:	3808      	subs	r0, #8
   2b9c0:	4290      	cmp	r0, r2
   2b9c2:	d04f      	beq.n	2ba64 <_free_r+0x14c>
   2b9c4:	6851      	ldr	r1, [r2, #4]
   2b9c6:	f021 0103 	bic.w	r1, r1, #3
   2b9ca:	428b      	cmp	r3, r1
   2b9cc:	d232      	bcs.n	2ba34 <_free_r+0x11c>
   2b9ce:	6892      	ldr	r2, [r2, #8]
   2b9d0:	4290      	cmp	r0, r2
   2b9d2:	d1f7      	bne.n	2b9c4 <_free_r+0xac>
   2b9d4:	68c3      	ldr	r3, [r0, #12]
   2b9d6:	60a0      	str	r0, [r4, #8]
   2b9d8:	60e3      	str	r3, [r4, #12]
   2b9da:	609c      	str	r4, [r3, #8]
   2b9dc:	60c4      	str	r4, [r0, #12]
   2b9de:	4640      	mov	r0, r8
   2b9e0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   2b9e4:	f7fc ba8e 	b.w	27f04 <__malloc_unlock>
   2b9e8:	6895      	ldr	r5, [r2, #8]
   2b9ea:	4f3b      	ldr	r7, [pc, #236]	; (2bad8 <_free_r+0x1c0>)
   2b9ec:	42bd      	cmp	r5, r7
   2b9ee:	4403      	add	r3, r0
   2b9f0:	d040      	beq.n	2ba74 <_free_r+0x15c>
   2b9f2:	68d0      	ldr	r0, [r2, #12]
   2b9f4:	60e8      	str	r0, [r5, #12]
   2b9f6:	f043 0201 	orr.w	r2, r3, #1
   2b9fa:	6085      	str	r5, [r0, #8]
   2b9fc:	6062      	str	r2, [r4, #4]
   2b9fe:	50e3      	str	r3, [r4, r3]
   2ba00:	e7b7      	b.n	2b972 <_free_r+0x5a>
   2ba02:	07ff      	lsls	r7, r7, #31
   2ba04:	4403      	add	r3, r0
   2ba06:	d407      	bmi.n	2ba18 <_free_r+0x100>
   2ba08:	f855 2c08 	ldr.w	r2, [r5, #-8]
   2ba0c:	1aa4      	subs	r4, r4, r2
   2ba0e:	4413      	add	r3, r2
   2ba10:	68a0      	ldr	r0, [r4, #8]
   2ba12:	68e2      	ldr	r2, [r4, #12]
   2ba14:	60c2      	str	r2, [r0, #12]
   2ba16:	6090      	str	r0, [r2, #8]
   2ba18:	4a30      	ldr	r2, [pc, #192]	; (2badc <_free_r+0x1c4>)
   2ba1a:	6812      	ldr	r2, [r2, #0]
   2ba1c:	f043 0001 	orr.w	r0, r3, #1
   2ba20:	4293      	cmp	r3, r2
   2ba22:	6060      	str	r0, [r4, #4]
   2ba24:	608c      	str	r4, [r1, #8]
   2ba26:	d3b9      	bcc.n	2b99c <_free_r+0x84>
   2ba28:	4b2d      	ldr	r3, [pc, #180]	; (2bae0 <_free_r+0x1c8>)
   2ba2a:	4640      	mov	r0, r8
   2ba2c:	6819      	ldr	r1, [r3, #0]
   2ba2e:	f7ff ff23 	bl	2b878 <_malloc_trim_r>
   2ba32:	e7b3      	b.n	2b99c <_free_r+0x84>
   2ba34:	4610      	mov	r0, r2
   2ba36:	e7cd      	b.n	2b9d4 <_free_r+0xbc>
   2ba38:	1811      	adds	r1, r2, r0
   2ba3a:	6849      	ldr	r1, [r1, #4]
   2ba3c:	07c9      	lsls	r1, r1, #31
   2ba3e:	d444      	bmi.n	2baca <_free_r+0x1b2>
   2ba40:	6891      	ldr	r1, [r2, #8]
   2ba42:	68d2      	ldr	r2, [r2, #12]
   2ba44:	60ca      	str	r2, [r1, #12]
   2ba46:	4403      	add	r3, r0
   2ba48:	f043 0001 	orr.w	r0, r3, #1
   2ba4c:	6091      	str	r1, [r2, #8]
   2ba4e:	6060      	str	r0, [r4, #4]
   2ba50:	50e3      	str	r3, [r4, r3]
   2ba52:	e7a3      	b.n	2b99c <_free_r+0x84>
   2ba54:	2a14      	cmp	r2, #20
   2ba56:	d816      	bhi.n	2ba86 <_free_r+0x16e>
   2ba58:	f102 075c 	add.w	r7, r2, #92	; 0x5c
   2ba5c:	00ff      	lsls	r7, r7, #3
   2ba5e:	f102 055b 	add.w	r5, r2, #91	; 0x5b
   2ba62:	e7aa      	b.n	2b9ba <_free_r+0xa2>
   2ba64:	10aa      	asrs	r2, r5, #2
   2ba66:	2301      	movs	r3, #1
   2ba68:	684d      	ldr	r5, [r1, #4]
   2ba6a:	4093      	lsls	r3, r2
   2ba6c:	432b      	orrs	r3, r5
   2ba6e:	604b      	str	r3, [r1, #4]
   2ba70:	4603      	mov	r3, r0
   2ba72:	e7b0      	b.n	2b9d6 <_free_r+0xbe>
   2ba74:	f043 0201 	orr.w	r2, r3, #1
   2ba78:	614c      	str	r4, [r1, #20]
   2ba7a:	610c      	str	r4, [r1, #16]
   2ba7c:	60e5      	str	r5, [r4, #12]
   2ba7e:	60a5      	str	r5, [r4, #8]
   2ba80:	6062      	str	r2, [r4, #4]
   2ba82:	50e3      	str	r3, [r4, r3]
   2ba84:	e78a      	b.n	2b99c <_free_r+0x84>
   2ba86:	2a54      	cmp	r2, #84	; 0x54
   2ba88:	d806      	bhi.n	2ba98 <_free_r+0x180>
   2ba8a:	0b1a      	lsrs	r2, r3, #12
   2ba8c:	f102 076f 	add.w	r7, r2, #111	; 0x6f
   2ba90:	00ff      	lsls	r7, r7, #3
   2ba92:	f102 056e 	add.w	r5, r2, #110	; 0x6e
   2ba96:	e790      	b.n	2b9ba <_free_r+0xa2>
   2ba98:	f5b2 7faa 	cmp.w	r2, #340	; 0x154
   2ba9c:	d806      	bhi.n	2baac <_free_r+0x194>
   2ba9e:	0bda      	lsrs	r2, r3, #15
   2baa0:	f102 0778 	add.w	r7, r2, #120	; 0x78
   2baa4:	00ff      	lsls	r7, r7, #3
   2baa6:	f102 0577 	add.w	r5, r2, #119	; 0x77
   2baaa:	e786      	b.n	2b9ba <_free_r+0xa2>
   2baac:	f240 5054 	movw	r0, #1364	; 0x554
   2bab0:	4282      	cmp	r2, r0
   2bab2:	d806      	bhi.n	2bac2 <_free_r+0x1aa>
   2bab4:	0c9a      	lsrs	r2, r3, #18
   2bab6:	f102 077d 	add.w	r7, r2, #125	; 0x7d
   2baba:	00ff      	lsls	r7, r7, #3
   2babc:	f102 057c 	add.w	r5, r2, #124	; 0x7c
   2bac0:	e77b      	b.n	2b9ba <_free_r+0xa2>
   2bac2:	f44f 777e 	mov.w	r7, #1016	; 0x3f8
   2bac6:	257e      	movs	r5, #126	; 0x7e
   2bac8:	e777      	b.n	2b9ba <_free_r+0xa2>
   2baca:	f043 0101 	orr.w	r1, r3, #1
   2bace:	6061      	str	r1, [r4, #4]
   2bad0:	6013      	str	r3, [r2, #0]
   2bad2:	e763      	b.n	2b99c <_free_r+0x84>
   2bad4:	200006a4 	.word	0x200006a4
   2bad8:	200006ac 	.word	0x200006ac
   2badc:	20000ab0 	.word	0x20000ab0
   2bae0:	200029ac 	.word	0x200029ac

0002bae4 <_fwalk_reent>:
   2bae4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   2bae8:	f510 7738 	adds.w	r7, r0, #736	; 0x2e0
   2baec:	d01f      	beq.n	2bb2e <_fwalk_reent+0x4a>
   2baee:	4688      	mov	r8, r1
   2baf0:	4606      	mov	r6, r0
   2baf2:	f04f 0900 	mov.w	r9, #0
   2baf6:	687d      	ldr	r5, [r7, #4]
   2baf8:	68bc      	ldr	r4, [r7, #8]
   2bafa:	3d01      	subs	r5, #1
   2bafc:	d411      	bmi.n	2bb22 <_fwalk_reent+0x3e>
   2bafe:	89a3      	ldrh	r3, [r4, #12]
   2bb00:	2b01      	cmp	r3, #1
   2bb02:	f105 35ff 	add.w	r5, r5, #4294967295
   2bb06:	d908      	bls.n	2bb1a <_fwalk_reent+0x36>
   2bb08:	f9b4 300e 	ldrsh.w	r3, [r4, #14]
   2bb0c:	3301      	adds	r3, #1
   2bb0e:	4621      	mov	r1, r4
   2bb10:	4630      	mov	r0, r6
   2bb12:	d002      	beq.n	2bb1a <_fwalk_reent+0x36>
   2bb14:	47c0      	blx	r8
   2bb16:	ea49 0900 	orr.w	r9, r9, r0
   2bb1a:	1c6b      	adds	r3, r5, #1
   2bb1c:	f104 0468 	add.w	r4, r4, #104	; 0x68
   2bb20:	d1ed      	bne.n	2bafe <_fwalk_reent+0x1a>
   2bb22:	683f      	ldr	r7, [r7, #0]
   2bb24:	2f00      	cmp	r7, #0
   2bb26:	d1e6      	bne.n	2baf6 <_fwalk_reent+0x12>
   2bb28:	4648      	mov	r0, r9
   2bb2a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   2bb2e:	46b9      	mov	r9, r7
   2bb30:	4648      	mov	r0, r9
   2bb32:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   2bb36:	bf00      	nop

0002bb38 <_localeconv_r>:
   2bb38:	4a04      	ldr	r2, [pc, #16]	; (2bb4c <_localeconv_r+0x14>)
   2bb3a:	4b05      	ldr	r3, [pc, #20]	; (2bb50 <_localeconv_r+0x18>)
   2bb3c:	6812      	ldr	r2, [r2, #0]
   2bb3e:	6b50      	ldr	r0, [r2, #52]	; 0x34
   2bb40:	2800      	cmp	r0, #0
   2bb42:	bf08      	it	eq
   2bb44:	4618      	moveq	r0, r3
   2bb46:	30f0      	adds	r0, #240	; 0xf0
   2bb48:	4770      	bx	lr
   2bb4a:	bf00      	nop
   2bb4c:	20000108 	.word	0x20000108
   2bb50:	20000538 	.word	0x20000538

0002bb54 <__swhatbuf_r>:
   2bb54:	b570      	push	{r4, r5, r6, lr}
   2bb56:	460c      	mov	r4, r1
   2bb58:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
   2bb5c:	2900      	cmp	r1, #0
   2bb5e:	b090      	sub	sp, #64	; 0x40
   2bb60:	4615      	mov	r5, r2
   2bb62:	461e      	mov	r6, r3
   2bb64:	db14      	blt.n	2bb90 <__swhatbuf_r+0x3c>
   2bb66:	aa01      	add	r2, sp, #4
   2bb68:	f000 fda4 	bl	2c6b4 <_fstat_r>
   2bb6c:	2800      	cmp	r0, #0
   2bb6e:	db0f      	blt.n	2bb90 <__swhatbuf_r+0x3c>
   2bb70:	9a02      	ldr	r2, [sp, #8]
   2bb72:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
   2bb76:	f5a2 5200 	sub.w	r2, r2, #8192	; 0x2000
   2bb7a:	fab2 f282 	clz	r2, r2
   2bb7e:	0952      	lsrs	r2, r2, #5
   2bb80:	f44f 6380 	mov.w	r3, #1024	; 0x400
   2bb84:	f44f 6000 	mov.w	r0, #2048	; 0x800
   2bb88:	6032      	str	r2, [r6, #0]
   2bb8a:	602b      	str	r3, [r5, #0]
   2bb8c:	b010      	add	sp, #64	; 0x40
   2bb8e:	bd70      	pop	{r4, r5, r6, pc}
   2bb90:	89a2      	ldrh	r2, [r4, #12]
   2bb92:	2300      	movs	r3, #0
   2bb94:	f012 0080 	ands.w	r0, r2, #128	; 0x80
   2bb98:	6033      	str	r3, [r6, #0]
   2bb9a:	d004      	beq.n	2bba6 <__swhatbuf_r+0x52>
   2bb9c:	2240      	movs	r2, #64	; 0x40
   2bb9e:	4618      	mov	r0, r3
   2bba0:	602a      	str	r2, [r5, #0]
   2bba2:	b010      	add	sp, #64	; 0x40
   2bba4:	bd70      	pop	{r4, r5, r6, pc}
   2bba6:	f44f 6380 	mov.w	r3, #1024	; 0x400
   2bbaa:	602b      	str	r3, [r5, #0]
   2bbac:	b010      	add	sp, #64	; 0x40
   2bbae:	bd70      	pop	{r4, r5, r6, pc}

0002bbb0 <__smakebuf_r>:
   2bbb0:	898a      	ldrh	r2, [r1, #12]
   2bbb2:	0792      	lsls	r2, r2, #30
   2bbb4:	460b      	mov	r3, r1
   2bbb6:	d506      	bpl.n	2bbc6 <__smakebuf_r+0x16>
   2bbb8:	f101 0243 	add.w	r2, r1, #67	; 0x43
   2bbbc:	2101      	movs	r1, #1
   2bbbe:	601a      	str	r2, [r3, #0]
   2bbc0:	611a      	str	r2, [r3, #16]
   2bbc2:	6159      	str	r1, [r3, #20]
   2bbc4:	4770      	bx	lr
   2bbc6:	b5f0      	push	{r4, r5, r6, r7, lr}
   2bbc8:	b083      	sub	sp, #12
   2bbca:	ab01      	add	r3, sp, #4
   2bbcc:	466a      	mov	r2, sp
   2bbce:	460c      	mov	r4, r1
   2bbd0:	4606      	mov	r6, r0
   2bbd2:	f7ff ffbf 	bl	2bb54 <__swhatbuf_r>
   2bbd6:	9900      	ldr	r1, [sp, #0]
   2bbd8:	4605      	mov	r5, r0
   2bbda:	4630      	mov	r0, r6
   2bbdc:	f7fb fcf6 	bl	275cc <_malloc_r>
   2bbe0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   2bbe4:	b1d8      	cbz	r0, 2bc1e <__smakebuf_r+0x6e>
   2bbe6:	9a01      	ldr	r2, [sp, #4]
   2bbe8:	4f15      	ldr	r7, [pc, #84]	; (2bc40 <__smakebuf_r+0x90>)
   2bbea:	9900      	ldr	r1, [sp, #0]
   2bbec:	63f7      	str	r7, [r6, #60]	; 0x3c
   2bbee:	f043 0380 	orr.w	r3, r3, #128	; 0x80
   2bbf2:	81a3      	strh	r3, [r4, #12]
   2bbf4:	6020      	str	r0, [r4, #0]
   2bbf6:	6120      	str	r0, [r4, #16]
   2bbf8:	6161      	str	r1, [r4, #20]
   2bbfa:	b91a      	cbnz	r2, 2bc04 <__smakebuf_r+0x54>
   2bbfc:	432b      	orrs	r3, r5
   2bbfe:	81a3      	strh	r3, [r4, #12]
   2bc00:	b003      	add	sp, #12
   2bc02:	bdf0      	pop	{r4, r5, r6, r7, pc}
   2bc04:	4630      	mov	r0, r6
   2bc06:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
   2bc0a:	f000 fd67 	bl	2c6dc <_isatty_r>
   2bc0e:	b1a0      	cbz	r0, 2bc3a <__smakebuf_r+0x8a>
   2bc10:	89a3      	ldrh	r3, [r4, #12]
   2bc12:	f023 0303 	bic.w	r3, r3, #3
   2bc16:	f043 0301 	orr.w	r3, r3, #1
   2bc1a:	b21b      	sxth	r3, r3
   2bc1c:	e7ee      	b.n	2bbfc <__smakebuf_r+0x4c>
   2bc1e:	059a      	lsls	r2, r3, #22
   2bc20:	d4ee      	bmi.n	2bc00 <__smakebuf_r+0x50>
   2bc22:	f023 0303 	bic.w	r3, r3, #3
   2bc26:	f104 0243 	add.w	r2, r4, #67	; 0x43
   2bc2a:	f043 0302 	orr.w	r3, r3, #2
   2bc2e:	2101      	movs	r1, #1
   2bc30:	81a3      	strh	r3, [r4, #12]
   2bc32:	6022      	str	r2, [r4, #0]
   2bc34:	6122      	str	r2, [r4, #16]
   2bc36:	6161      	str	r1, [r4, #20]
   2bc38:	e7e2      	b.n	2bc00 <__smakebuf_r+0x50>
   2bc3a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   2bc3e:	e7dd      	b.n	2bbfc <__smakebuf_r+0x4c>
   2bc40:	0002b779 	.word	0x0002b779

0002bc44 <_Balloc>:
   2bc44:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
   2bc46:	b570      	push	{r4, r5, r6, lr}
   2bc48:	4605      	mov	r5, r0
   2bc4a:	460c      	mov	r4, r1
   2bc4c:	b14b      	cbz	r3, 2bc62 <_Balloc+0x1e>
   2bc4e:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
   2bc52:	b180      	cbz	r0, 2bc76 <_Balloc+0x32>
   2bc54:	6802      	ldr	r2, [r0, #0]
   2bc56:	f843 2024 	str.w	r2, [r3, r4, lsl #2]
   2bc5a:	2300      	movs	r3, #0
   2bc5c:	6103      	str	r3, [r0, #16]
   2bc5e:	60c3      	str	r3, [r0, #12]
   2bc60:	bd70      	pop	{r4, r5, r6, pc}
   2bc62:	2221      	movs	r2, #33	; 0x21
   2bc64:	2104      	movs	r1, #4
   2bc66:	f000 fc81 	bl	2c56c <_calloc_r>
   2bc6a:	64e8      	str	r0, [r5, #76]	; 0x4c
   2bc6c:	4603      	mov	r3, r0
   2bc6e:	2800      	cmp	r0, #0
   2bc70:	d1ed      	bne.n	2bc4e <_Balloc+0xa>
   2bc72:	2000      	movs	r0, #0
   2bc74:	bd70      	pop	{r4, r5, r6, pc}
   2bc76:	2101      	movs	r1, #1
   2bc78:	fa01 f604 	lsl.w	r6, r1, r4
   2bc7c:	1d72      	adds	r2, r6, #5
   2bc7e:	4628      	mov	r0, r5
   2bc80:	0092      	lsls	r2, r2, #2
   2bc82:	f000 fc73 	bl	2c56c <_calloc_r>
   2bc86:	2800      	cmp	r0, #0
   2bc88:	d0f3      	beq.n	2bc72 <_Balloc+0x2e>
   2bc8a:	6044      	str	r4, [r0, #4]
   2bc8c:	6086      	str	r6, [r0, #8]
   2bc8e:	e7e4      	b.n	2bc5a <_Balloc+0x16>

0002bc90 <_Bfree>:
   2bc90:	b131      	cbz	r1, 2bca0 <_Bfree+0x10>
   2bc92:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
   2bc94:	684a      	ldr	r2, [r1, #4]
   2bc96:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
   2bc9a:	6008      	str	r0, [r1, #0]
   2bc9c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
   2bca0:	4770      	bx	lr
   2bca2:	bf00      	nop

0002bca4 <__multadd>:
   2bca4:	b5f0      	push	{r4, r5, r6, r7, lr}
   2bca6:	690c      	ldr	r4, [r1, #16]
   2bca8:	b083      	sub	sp, #12
   2bcaa:	460d      	mov	r5, r1
   2bcac:	4606      	mov	r6, r0
   2bcae:	f101 0e14 	add.w	lr, r1, #20
   2bcb2:	2700      	movs	r7, #0
   2bcb4:	f8de 0000 	ldr.w	r0, [lr]
   2bcb8:	b281      	uxth	r1, r0
   2bcba:	fb02 3301 	mla	r3, r2, r1, r3
   2bcbe:	0c01      	lsrs	r1, r0, #16
   2bcc0:	0c18      	lsrs	r0, r3, #16
   2bcc2:	fb02 0101 	mla	r1, r2, r1, r0
   2bcc6:	b29b      	uxth	r3, r3
   2bcc8:	3701      	adds	r7, #1
   2bcca:	eb03 4301 	add.w	r3, r3, r1, lsl #16
   2bcce:	42bc      	cmp	r4, r7
   2bcd0:	f84e 3b04 	str.w	r3, [lr], #4
   2bcd4:	ea4f 4311 	mov.w	r3, r1, lsr #16
   2bcd8:	dcec      	bgt.n	2bcb4 <__multadd+0x10>
   2bcda:	b13b      	cbz	r3, 2bcec <__multadd+0x48>
   2bcdc:	68aa      	ldr	r2, [r5, #8]
   2bcde:	4294      	cmp	r4, r2
   2bce0:	da07      	bge.n	2bcf2 <__multadd+0x4e>
   2bce2:	eb05 0284 	add.w	r2, r5, r4, lsl #2
   2bce6:	3401      	adds	r4, #1
   2bce8:	6153      	str	r3, [r2, #20]
   2bcea:	612c      	str	r4, [r5, #16]
   2bcec:	4628      	mov	r0, r5
   2bcee:	b003      	add	sp, #12
   2bcf0:	bdf0      	pop	{r4, r5, r6, r7, pc}
   2bcf2:	6869      	ldr	r1, [r5, #4]
   2bcf4:	9301      	str	r3, [sp, #4]
   2bcf6:	3101      	adds	r1, #1
   2bcf8:	4630      	mov	r0, r6
   2bcfa:	f7ff ffa3 	bl	2bc44 <_Balloc>
   2bcfe:	692a      	ldr	r2, [r5, #16]
   2bd00:	3202      	adds	r2, #2
   2bd02:	f105 010c 	add.w	r1, r5, #12
   2bd06:	4607      	mov	r7, r0
   2bd08:	0092      	lsls	r2, r2, #2
   2bd0a:	300c      	adds	r0, #12
   2bd0c:	f7fb ffa8 	bl	27c60 <memcpy>
   2bd10:	6cf2      	ldr	r2, [r6, #76]	; 0x4c
   2bd12:	6869      	ldr	r1, [r5, #4]
   2bd14:	9b01      	ldr	r3, [sp, #4]
   2bd16:	f852 0021 	ldr.w	r0, [r2, r1, lsl #2]
   2bd1a:	6028      	str	r0, [r5, #0]
   2bd1c:	f842 5021 	str.w	r5, [r2, r1, lsl #2]
   2bd20:	463d      	mov	r5, r7
   2bd22:	e7de      	b.n	2bce2 <__multadd+0x3e>

0002bd24 <__hi0bits>:
   2bd24:	0c02      	lsrs	r2, r0, #16
   2bd26:	0412      	lsls	r2, r2, #16
   2bd28:	4603      	mov	r3, r0
   2bd2a:	b9b2      	cbnz	r2, 2bd5a <__hi0bits+0x36>
   2bd2c:	0403      	lsls	r3, r0, #16
   2bd2e:	2010      	movs	r0, #16
   2bd30:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
   2bd34:	bf04      	itt	eq
   2bd36:	021b      	lsleq	r3, r3, #8
   2bd38:	3008      	addeq	r0, #8
   2bd3a:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
   2bd3e:	bf04      	itt	eq
   2bd40:	011b      	lsleq	r3, r3, #4
   2bd42:	3004      	addeq	r0, #4
   2bd44:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
   2bd48:	bf04      	itt	eq
   2bd4a:	009b      	lsleq	r3, r3, #2
   2bd4c:	3002      	addeq	r0, #2
   2bd4e:	2b00      	cmp	r3, #0
   2bd50:	db02      	blt.n	2bd58 <__hi0bits+0x34>
   2bd52:	005b      	lsls	r3, r3, #1
   2bd54:	d403      	bmi.n	2bd5e <__hi0bits+0x3a>
   2bd56:	2020      	movs	r0, #32
   2bd58:	4770      	bx	lr
   2bd5a:	2000      	movs	r0, #0
   2bd5c:	e7e8      	b.n	2bd30 <__hi0bits+0xc>
   2bd5e:	3001      	adds	r0, #1
   2bd60:	4770      	bx	lr
   2bd62:	bf00      	nop

0002bd64 <__lo0bits>:
   2bd64:	6803      	ldr	r3, [r0, #0]
   2bd66:	f013 0207 	ands.w	r2, r3, #7
   2bd6a:	4601      	mov	r1, r0
   2bd6c:	d007      	beq.n	2bd7e <__lo0bits+0x1a>
   2bd6e:	07da      	lsls	r2, r3, #31
   2bd70:	d421      	bmi.n	2bdb6 <__lo0bits+0x52>
   2bd72:	0798      	lsls	r0, r3, #30
   2bd74:	d421      	bmi.n	2bdba <__lo0bits+0x56>
   2bd76:	089b      	lsrs	r3, r3, #2
   2bd78:	600b      	str	r3, [r1, #0]
   2bd7a:	2002      	movs	r0, #2
   2bd7c:	4770      	bx	lr
   2bd7e:	b298      	uxth	r0, r3
   2bd80:	b198      	cbz	r0, 2bdaa <__lo0bits+0x46>
   2bd82:	4610      	mov	r0, r2
   2bd84:	f013 0fff 	tst.w	r3, #255	; 0xff
   2bd88:	bf04      	itt	eq
   2bd8a:	0a1b      	lsreq	r3, r3, #8
   2bd8c:	3008      	addeq	r0, #8
   2bd8e:	071a      	lsls	r2, r3, #28
   2bd90:	bf04      	itt	eq
   2bd92:	091b      	lsreq	r3, r3, #4
   2bd94:	3004      	addeq	r0, #4
   2bd96:	079a      	lsls	r2, r3, #30
   2bd98:	bf04      	itt	eq
   2bd9a:	089b      	lsreq	r3, r3, #2
   2bd9c:	3002      	addeq	r0, #2
   2bd9e:	07da      	lsls	r2, r3, #31
   2bda0:	d407      	bmi.n	2bdb2 <__lo0bits+0x4e>
   2bda2:	085b      	lsrs	r3, r3, #1
   2bda4:	d104      	bne.n	2bdb0 <__lo0bits+0x4c>
   2bda6:	2020      	movs	r0, #32
   2bda8:	4770      	bx	lr
   2bdaa:	0c1b      	lsrs	r3, r3, #16
   2bdac:	2010      	movs	r0, #16
   2bdae:	e7e9      	b.n	2bd84 <__lo0bits+0x20>
   2bdb0:	3001      	adds	r0, #1
   2bdb2:	600b      	str	r3, [r1, #0]
   2bdb4:	4770      	bx	lr
   2bdb6:	2000      	movs	r0, #0
   2bdb8:	4770      	bx	lr
   2bdba:	085b      	lsrs	r3, r3, #1
   2bdbc:	600b      	str	r3, [r1, #0]
   2bdbe:	2001      	movs	r0, #1
   2bdc0:	4770      	bx	lr
   2bdc2:	bf00      	nop

0002bdc4 <__i2b>:
   2bdc4:	b510      	push	{r4, lr}
   2bdc6:	460c      	mov	r4, r1
   2bdc8:	2101      	movs	r1, #1
   2bdca:	f7ff ff3b 	bl	2bc44 <_Balloc>
   2bdce:	2201      	movs	r2, #1
   2bdd0:	6144      	str	r4, [r0, #20]
   2bdd2:	6102      	str	r2, [r0, #16]
   2bdd4:	bd10      	pop	{r4, pc}
   2bdd6:	bf00      	nop

0002bdd8 <__multiply>:
   2bdd8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2bddc:	690c      	ldr	r4, [r1, #16]
   2bdde:	6915      	ldr	r5, [r2, #16]
   2bde0:	42ac      	cmp	r4, r5
   2bde2:	b083      	sub	sp, #12
   2bde4:	468b      	mov	fp, r1
   2bde6:	4616      	mov	r6, r2
   2bde8:	da04      	bge.n	2bdf4 <__multiply+0x1c>
   2bdea:	4622      	mov	r2, r4
   2bdec:	46b3      	mov	fp, r6
   2bdee:	462c      	mov	r4, r5
   2bdf0:	460e      	mov	r6, r1
   2bdf2:	4615      	mov	r5, r2
   2bdf4:	f8db 3008 	ldr.w	r3, [fp, #8]
   2bdf8:	f8db 1004 	ldr.w	r1, [fp, #4]
   2bdfc:	eb04 0805 	add.w	r8, r4, r5
   2be00:	4598      	cmp	r8, r3
   2be02:	bfc8      	it	gt
   2be04:	3101      	addgt	r1, #1
   2be06:	f7ff ff1d 	bl	2bc44 <_Balloc>
   2be0a:	f100 0914 	add.w	r9, r0, #20
   2be0e:	eb09 0a88 	add.w	sl, r9, r8, lsl #2
   2be12:	45d1      	cmp	r9, sl
   2be14:	9000      	str	r0, [sp, #0]
   2be16:	d205      	bcs.n	2be24 <__multiply+0x4c>
   2be18:	464b      	mov	r3, r9
   2be1a:	2100      	movs	r1, #0
   2be1c:	f843 1b04 	str.w	r1, [r3], #4
   2be20:	459a      	cmp	sl, r3
   2be22:	d8fb      	bhi.n	2be1c <__multiply+0x44>
   2be24:	f106 0c14 	add.w	ip, r6, #20
   2be28:	eb0c 0385 	add.w	r3, ip, r5, lsl #2
   2be2c:	f10b 0b14 	add.w	fp, fp, #20
   2be30:	459c      	cmp	ip, r3
   2be32:	eb0b 0e84 	add.w	lr, fp, r4, lsl #2
   2be36:	d24c      	bcs.n	2bed2 <__multiply+0xfa>
   2be38:	f8cd a004 	str.w	sl, [sp, #4]
   2be3c:	469a      	mov	sl, r3
   2be3e:	f8dc 5000 	ldr.w	r5, [ip]
   2be42:	b2af      	uxth	r7, r5
   2be44:	b1ef      	cbz	r7, 2be82 <__multiply+0xaa>
   2be46:	2100      	movs	r1, #0
   2be48:	464d      	mov	r5, r9
   2be4a:	465e      	mov	r6, fp
   2be4c:	460c      	mov	r4, r1
   2be4e:	f856 2b04 	ldr.w	r2, [r6], #4
   2be52:	6828      	ldr	r0, [r5, #0]
   2be54:	b293      	uxth	r3, r2
   2be56:	b281      	uxth	r1, r0
   2be58:	fb07 1303 	mla	r3, r7, r3, r1
   2be5c:	0c12      	lsrs	r2, r2, #16
   2be5e:	0c01      	lsrs	r1, r0, #16
   2be60:	4423      	add	r3, r4
   2be62:	fb07 1102 	mla	r1, r7, r2, r1
   2be66:	eb01 4113 	add.w	r1, r1, r3, lsr #16
   2be6a:	b29b      	uxth	r3, r3
   2be6c:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
   2be70:	45b6      	cmp	lr, r6
   2be72:	f845 3b04 	str.w	r3, [r5], #4
   2be76:	ea4f 4411 	mov.w	r4, r1, lsr #16
   2be7a:	d8e8      	bhi.n	2be4e <__multiply+0x76>
   2be7c:	602c      	str	r4, [r5, #0]
   2be7e:	f8dc 5000 	ldr.w	r5, [ip]
   2be82:	0c2d      	lsrs	r5, r5, #16
   2be84:	d01d      	beq.n	2bec2 <__multiply+0xea>
   2be86:	f8d9 3000 	ldr.w	r3, [r9]
   2be8a:	4648      	mov	r0, r9
   2be8c:	461c      	mov	r4, r3
   2be8e:	4659      	mov	r1, fp
   2be90:	2200      	movs	r2, #0
   2be92:	880e      	ldrh	r6, [r1, #0]
   2be94:	0c24      	lsrs	r4, r4, #16
   2be96:	fb05 4406 	mla	r4, r5, r6, r4
   2be9a:	4422      	add	r2, r4
   2be9c:	b29b      	uxth	r3, r3
   2be9e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
   2bea2:	f840 3b04 	str.w	r3, [r0], #4
   2bea6:	f851 3b04 	ldr.w	r3, [r1], #4
   2beaa:	6804      	ldr	r4, [r0, #0]
   2beac:	0c1b      	lsrs	r3, r3, #16
   2beae:	b2a6      	uxth	r6, r4
   2beb0:	fb05 6303 	mla	r3, r5, r3, r6
   2beb4:	eb03 4312 	add.w	r3, r3, r2, lsr #16
   2beb8:	458e      	cmp	lr, r1
   2beba:	ea4f 4213 	mov.w	r2, r3, lsr #16
   2bebe:	d8e8      	bhi.n	2be92 <__multiply+0xba>
   2bec0:	6003      	str	r3, [r0, #0]
   2bec2:	f10c 0c04 	add.w	ip, ip, #4
   2bec6:	45e2      	cmp	sl, ip
   2bec8:	f109 0904 	add.w	r9, r9, #4
   2becc:	d8b7      	bhi.n	2be3e <__multiply+0x66>
   2bece:	f8dd a004 	ldr.w	sl, [sp, #4]
   2bed2:	f1b8 0f00 	cmp.w	r8, #0
   2bed6:	dd0b      	ble.n	2bef0 <__multiply+0x118>
   2bed8:	f85a 3c04 	ldr.w	r3, [sl, #-4]
   2bedc:	f1aa 0a04 	sub.w	sl, sl, #4
   2bee0:	b11b      	cbz	r3, 2beea <__multiply+0x112>
   2bee2:	e005      	b.n	2bef0 <__multiply+0x118>
   2bee4:	f85a 3d04 	ldr.w	r3, [sl, #-4]!
   2bee8:	b913      	cbnz	r3, 2bef0 <__multiply+0x118>
   2beea:	f1b8 0801 	subs.w	r8, r8, #1
   2beee:	d1f9      	bne.n	2bee4 <__multiply+0x10c>
   2bef0:	9800      	ldr	r0, [sp, #0]
   2bef2:	f8c0 8010 	str.w	r8, [r0, #16]
   2bef6:	b003      	add	sp, #12
   2bef8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0002befc <__pow5mult>:
   2befc:	f012 0303 	ands.w	r3, r2, #3
   2bf00:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   2bf04:	4614      	mov	r4, r2
   2bf06:	4607      	mov	r7, r0
   2bf08:	d12e      	bne.n	2bf68 <__pow5mult+0x6c>
   2bf0a:	460d      	mov	r5, r1
   2bf0c:	10a4      	asrs	r4, r4, #2
   2bf0e:	d01c      	beq.n	2bf4a <__pow5mult+0x4e>
   2bf10:	6cbe      	ldr	r6, [r7, #72]	; 0x48
   2bf12:	b396      	cbz	r6, 2bf7a <__pow5mult+0x7e>
   2bf14:	07e3      	lsls	r3, r4, #31
   2bf16:	f04f 0800 	mov.w	r8, #0
   2bf1a:	d406      	bmi.n	2bf2a <__pow5mult+0x2e>
   2bf1c:	1064      	asrs	r4, r4, #1
   2bf1e:	d014      	beq.n	2bf4a <__pow5mult+0x4e>
   2bf20:	6830      	ldr	r0, [r6, #0]
   2bf22:	b1a8      	cbz	r0, 2bf50 <__pow5mult+0x54>
   2bf24:	4606      	mov	r6, r0
   2bf26:	07e3      	lsls	r3, r4, #31
   2bf28:	d5f8      	bpl.n	2bf1c <__pow5mult+0x20>
   2bf2a:	4632      	mov	r2, r6
   2bf2c:	4629      	mov	r1, r5
   2bf2e:	4638      	mov	r0, r7
   2bf30:	f7ff ff52 	bl	2bdd8 <__multiply>
   2bf34:	b1b5      	cbz	r5, 2bf64 <__pow5mult+0x68>
   2bf36:	686a      	ldr	r2, [r5, #4]
   2bf38:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
   2bf3a:	1064      	asrs	r4, r4, #1
   2bf3c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
   2bf40:	6029      	str	r1, [r5, #0]
   2bf42:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
   2bf46:	4605      	mov	r5, r0
   2bf48:	d1ea      	bne.n	2bf20 <__pow5mult+0x24>
   2bf4a:	4628      	mov	r0, r5
   2bf4c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   2bf50:	4632      	mov	r2, r6
   2bf52:	4631      	mov	r1, r6
   2bf54:	4638      	mov	r0, r7
   2bf56:	f7ff ff3f 	bl	2bdd8 <__multiply>
   2bf5a:	6030      	str	r0, [r6, #0]
   2bf5c:	f8c0 8000 	str.w	r8, [r0]
   2bf60:	4606      	mov	r6, r0
   2bf62:	e7e0      	b.n	2bf26 <__pow5mult+0x2a>
   2bf64:	4605      	mov	r5, r0
   2bf66:	e7d9      	b.n	2bf1c <__pow5mult+0x20>
   2bf68:	1e5a      	subs	r2, r3, #1
   2bf6a:	4d0b      	ldr	r5, [pc, #44]	; (2bf98 <__pow5mult+0x9c>)
   2bf6c:	2300      	movs	r3, #0
   2bf6e:	f855 2022 	ldr.w	r2, [r5, r2, lsl #2]
   2bf72:	f7ff fe97 	bl	2bca4 <__multadd>
   2bf76:	4605      	mov	r5, r0
   2bf78:	e7c8      	b.n	2bf0c <__pow5mult+0x10>
   2bf7a:	2101      	movs	r1, #1
   2bf7c:	4638      	mov	r0, r7
   2bf7e:	f7ff fe61 	bl	2bc44 <_Balloc>
   2bf82:	f240 2171 	movw	r1, #625	; 0x271
   2bf86:	2201      	movs	r2, #1
   2bf88:	2300      	movs	r3, #0
   2bf8a:	6141      	str	r1, [r0, #20]
   2bf8c:	6102      	str	r2, [r0, #16]
   2bf8e:	4606      	mov	r6, r0
   2bf90:	64b8      	str	r0, [r7, #72]	; 0x48
   2bf92:	6003      	str	r3, [r0, #0]
   2bf94:	e7be      	b.n	2bf14 <__pow5mult+0x18>
   2bf96:	bf00      	nop
   2bf98:	0002f068 	.word	0x0002f068

0002bf9c <__lshift>:
   2bf9c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   2bfa0:	4691      	mov	r9, r2
   2bfa2:	690a      	ldr	r2, [r1, #16]
   2bfa4:	688b      	ldr	r3, [r1, #8]
   2bfa6:	ea4f 1469 	mov.w	r4, r9, asr #5
   2bfaa:	eb04 0802 	add.w	r8, r4, r2
   2bfae:	f108 0501 	add.w	r5, r8, #1
   2bfb2:	429d      	cmp	r5, r3
   2bfb4:	460e      	mov	r6, r1
   2bfb6:	4607      	mov	r7, r0
   2bfb8:	6849      	ldr	r1, [r1, #4]
   2bfba:	dd04      	ble.n	2bfc6 <__lshift+0x2a>
   2bfbc:	005b      	lsls	r3, r3, #1
   2bfbe:	429d      	cmp	r5, r3
   2bfc0:	f101 0101 	add.w	r1, r1, #1
   2bfc4:	dcfa      	bgt.n	2bfbc <__lshift+0x20>
   2bfc6:	4638      	mov	r0, r7
   2bfc8:	f7ff fe3c 	bl	2bc44 <_Balloc>
   2bfcc:	2c00      	cmp	r4, #0
   2bfce:	f100 0314 	add.w	r3, r0, #20
   2bfd2:	dd06      	ble.n	2bfe2 <__lshift+0x46>
   2bfd4:	eb03 0284 	add.w	r2, r3, r4, lsl #2
   2bfd8:	2100      	movs	r1, #0
   2bfda:	f843 1b04 	str.w	r1, [r3], #4
   2bfde:	429a      	cmp	r2, r3
   2bfe0:	d1fb      	bne.n	2bfda <__lshift+0x3e>
   2bfe2:	6934      	ldr	r4, [r6, #16]
   2bfe4:	f106 0114 	add.w	r1, r6, #20
   2bfe8:	f019 091f 	ands.w	r9, r9, #31
   2bfec:	eb01 0e84 	add.w	lr, r1, r4, lsl #2
   2bff0:	d01d      	beq.n	2c02e <__lshift+0x92>
   2bff2:	f1c9 0c20 	rsb	ip, r9, #32
   2bff6:	2200      	movs	r2, #0
   2bff8:	680c      	ldr	r4, [r1, #0]
   2bffa:	fa04 f409 	lsl.w	r4, r4, r9
   2bffe:	4314      	orrs	r4, r2
   2c000:	f843 4b04 	str.w	r4, [r3], #4
   2c004:	f851 2b04 	ldr.w	r2, [r1], #4
   2c008:	458e      	cmp	lr, r1
   2c00a:	fa22 f20c 	lsr.w	r2, r2, ip
   2c00e:	d8f3      	bhi.n	2bff8 <__lshift+0x5c>
   2c010:	601a      	str	r2, [r3, #0]
   2c012:	b10a      	cbz	r2, 2c018 <__lshift+0x7c>
   2c014:	f108 0502 	add.w	r5, r8, #2
   2c018:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
   2c01a:	6872      	ldr	r2, [r6, #4]
   2c01c:	3d01      	subs	r5, #1
   2c01e:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
   2c022:	6105      	str	r5, [r0, #16]
   2c024:	6031      	str	r1, [r6, #0]
   2c026:	f843 6022 	str.w	r6, [r3, r2, lsl #2]
   2c02a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   2c02e:	3b04      	subs	r3, #4
   2c030:	f851 2b04 	ldr.w	r2, [r1], #4
   2c034:	f843 2f04 	str.w	r2, [r3, #4]!
   2c038:	458e      	cmp	lr, r1
   2c03a:	d8f9      	bhi.n	2c030 <__lshift+0x94>
   2c03c:	e7ec      	b.n	2c018 <__lshift+0x7c>
   2c03e:	bf00      	nop

0002c040 <__mcmp>:
   2c040:	b430      	push	{r4, r5}
   2c042:	690b      	ldr	r3, [r1, #16]
   2c044:	4605      	mov	r5, r0
   2c046:	6900      	ldr	r0, [r0, #16]
   2c048:	1ac0      	subs	r0, r0, r3
   2c04a:	d10f      	bne.n	2c06c <__mcmp+0x2c>
   2c04c:	009b      	lsls	r3, r3, #2
   2c04e:	3514      	adds	r5, #20
   2c050:	3114      	adds	r1, #20
   2c052:	4419      	add	r1, r3
   2c054:	442b      	add	r3, r5
   2c056:	e001      	b.n	2c05c <__mcmp+0x1c>
   2c058:	429d      	cmp	r5, r3
   2c05a:	d207      	bcs.n	2c06c <__mcmp+0x2c>
   2c05c:	f853 4d04 	ldr.w	r4, [r3, #-4]!
   2c060:	f851 2d04 	ldr.w	r2, [r1, #-4]!
   2c064:	4294      	cmp	r4, r2
   2c066:	d0f7      	beq.n	2c058 <__mcmp+0x18>
   2c068:	d302      	bcc.n	2c070 <__mcmp+0x30>
   2c06a:	2001      	movs	r0, #1
   2c06c:	bc30      	pop	{r4, r5}
   2c06e:	4770      	bx	lr
   2c070:	f04f 30ff 	mov.w	r0, #4294967295
   2c074:	e7fa      	b.n	2c06c <__mcmp+0x2c>
   2c076:	bf00      	nop

0002c078 <__mdiff>:
   2c078:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   2c07c:	690f      	ldr	r7, [r1, #16]
   2c07e:	460e      	mov	r6, r1
   2c080:	6911      	ldr	r1, [r2, #16]
   2c082:	1a7f      	subs	r7, r7, r1
   2c084:	2f00      	cmp	r7, #0
   2c086:	4690      	mov	r8, r2
   2c088:	d117      	bne.n	2c0ba <__mdiff+0x42>
   2c08a:	0089      	lsls	r1, r1, #2
   2c08c:	f106 0514 	add.w	r5, r6, #20
   2c090:	f102 0e14 	add.w	lr, r2, #20
   2c094:	186b      	adds	r3, r5, r1
   2c096:	4471      	add	r1, lr
   2c098:	e001      	b.n	2c09e <__mdiff+0x26>
   2c09a:	429d      	cmp	r5, r3
   2c09c:	d25c      	bcs.n	2c158 <__mdiff+0xe0>
   2c09e:	f853 2d04 	ldr.w	r2, [r3, #-4]!
   2c0a2:	f851 4d04 	ldr.w	r4, [r1, #-4]!
   2c0a6:	42a2      	cmp	r2, r4
   2c0a8:	d0f7      	beq.n	2c09a <__mdiff+0x22>
   2c0aa:	d25e      	bcs.n	2c16a <__mdiff+0xf2>
   2c0ac:	4633      	mov	r3, r6
   2c0ae:	462c      	mov	r4, r5
   2c0b0:	4646      	mov	r6, r8
   2c0b2:	4675      	mov	r5, lr
   2c0b4:	4698      	mov	r8, r3
   2c0b6:	2701      	movs	r7, #1
   2c0b8:	e005      	b.n	2c0c6 <__mdiff+0x4e>
   2c0ba:	db58      	blt.n	2c16e <__mdiff+0xf6>
   2c0bc:	f106 0514 	add.w	r5, r6, #20
   2c0c0:	f108 0414 	add.w	r4, r8, #20
   2c0c4:	2700      	movs	r7, #0
   2c0c6:	6871      	ldr	r1, [r6, #4]
   2c0c8:	f7ff fdbc 	bl	2bc44 <_Balloc>
   2c0cc:	f8d8 3010 	ldr.w	r3, [r8, #16]
   2c0d0:	6936      	ldr	r6, [r6, #16]
   2c0d2:	60c7      	str	r7, [r0, #12]
   2c0d4:	eb04 0c83 	add.w	ip, r4, r3, lsl #2
   2c0d8:	46a6      	mov	lr, r4
   2c0da:	eb05 0786 	add.w	r7, r5, r6, lsl #2
   2c0de:	f100 0414 	add.w	r4, r0, #20
   2c0e2:	2300      	movs	r3, #0
   2c0e4:	f85e 1b04 	ldr.w	r1, [lr], #4
   2c0e8:	f855 8b04 	ldr.w	r8, [r5], #4
   2c0ec:	b28a      	uxth	r2, r1
   2c0ee:	fa13 f388 	uxtah	r3, r3, r8
   2c0f2:	0c09      	lsrs	r1, r1, #16
   2c0f4:	1a9a      	subs	r2, r3, r2
   2c0f6:	ebc1 4318 	rsb	r3, r1, r8, lsr #16
   2c0fa:	eb03 4322 	add.w	r3, r3, r2, asr #16
   2c0fe:	b292      	uxth	r2, r2
   2c100:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
   2c104:	45f4      	cmp	ip, lr
   2c106:	f844 2b04 	str.w	r2, [r4], #4
   2c10a:	ea4f 4323 	mov.w	r3, r3, asr #16
   2c10e:	d8e9      	bhi.n	2c0e4 <__mdiff+0x6c>
   2c110:	42af      	cmp	r7, r5
   2c112:	d917      	bls.n	2c144 <__mdiff+0xcc>
   2c114:	46a4      	mov	ip, r4
   2c116:	46ae      	mov	lr, r5
   2c118:	f85e 2b04 	ldr.w	r2, [lr], #4
   2c11c:	fa13 f382 	uxtah	r3, r3, r2
   2c120:	1419      	asrs	r1, r3, #16
   2c122:	eb01 4112 	add.w	r1, r1, r2, lsr #16
   2c126:	b29b      	uxth	r3, r3
   2c128:	ea43 4201 	orr.w	r2, r3, r1, lsl #16
   2c12c:	4577      	cmp	r7, lr
   2c12e:	f84c 2b04 	str.w	r2, [ip], #4
   2c132:	ea4f 4321 	mov.w	r3, r1, asr #16
   2c136:	d8ef      	bhi.n	2c118 <__mdiff+0xa0>
   2c138:	43ed      	mvns	r5, r5
   2c13a:	442f      	add	r7, r5
   2c13c:	f027 0703 	bic.w	r7, r7, #3
   2c140:	3704      	adds	r7, #4
   2c142:	443c      	add	r4, r7
   2c144:	3c04      	subs	r4, #4
   2c146:	b922      	cbnz	r2, 2c152 <__mdiff+0xda>
   2c148:	f854 3d04 	ldr.w	r3, [r4, #-4]!
   2c14c:	3e01      	subs	r6, #1
   2c14e:	2b00      	cmp	r3, #0
   2c150:	d0fa      	beq.n	2c148 <__mdiff+0xd0>
   2c152:	6106      	str	r6, [r0, #16]
   2c154:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   2c158:	2100      	movs	r1, #0
   2c15a:	f7ff fd73 	bl	2bc44 <_Balloc>
   2c15e:	2201      	movs	r2, #1
   2c160:	2300      	movs	r3, #0
   2c162:	6102      	str	r2, [r0, #16]
   2c164:	6143      	str	r3, [r0, #20]
   2c166:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   2c16a:	4674      	mov	r4, lr
   2c16c:	e7ab      	b.n	2c0c6 <__mdiff+0x4e>
   2c16e:	4633      	mov	r3, r6
   2c170:	f106 0414 	add.w	r4, r6, #20
   2c174:	f102 0514 	add.w	r5, r2, #20
   2c178:	4616      	mov	r6, r2
   2c17a:	2701      	movs	r7, #1
   2c17c:	4698      	mov	r8, r3
   2c17e:	e7a2      	b.n	2c0c6 <__mdiff+0x4e>

0002c180 <__d2b>:
   2c180:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   2c184:	ec57 6b10 	vmov	r6, r7, d0
   2c188:	b083      	sub	sp, #12
   2c18a:	4688      	mov	r8, r1
   2c18c:	2101      	movs	r1, #1
   2c18e:	463c      	mov	r4, r7
   2c190:	f3c7 550a 	ubfx	r5, r7, #20, #11
   2c194:	4617      	mov	r7, r2
   2c196:	f7ff fd55 	bl	2bc44 <_Balloc>
   2c19a:	f3c4 0413 	ubfx	r4, r4, #0, #20
   2c19e:	4681      	mov	r9, r0
   2c1a0:	b10d      	cbz	r5, 2c1a6 <__d2b+0x26>
   2c1a2:	f444 1480 	orr.w	r4, r4, #1048576	; 0x100000
   2c1a6:	9401      	str	r4, [sp, #4]
   2c1a8:	b31e      	cbz	r6, 2c1f2 <__d2b+0x72>
   2c1aa:	a802      	add	r0, sp, #8
   2c1ac:	f840 6d08 	str.w	r6, [r0, #-8]!
   2c1b0:	f7ff fdd8 	bl	2bd64 <__lo0bits>
   2c1b4:	2800      	cmp	r0, #0
   2c1b6:	d134      	bne.n	2c222 <__d2b+0xa2>
   2c1b8:	e89d 000c 	ldmia.w	sp, {r2, r3}
   2c1bc:	f8c9 2014 	str.w	r2, [r9, #20]
   2c1c0:	2b00      	cmp	r3, #0
   2c1c2:	bf0c      	ite	eq
   2c1c4:	2101      	moveq	r1, #1
   2c1c6:	2102      	movne	r1, #2
   2c1c8:	f8c9 3018 	str.w	r3, [r9, #24]
   2c1cc:	f8c9 1010 	str.w	r1, [r9, #16]
   2c1d0:	b9dd      	cbnz	r5, 2c20a <__d2b+0x8a>
   2c1d2:	eb09 0381 	add.w	r3, r9, r1, lsl #2
   2c1d6:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
   2c1da:	f8c8 0000 	str.w	r0, [r8]
   2c1de:	6918      	ldr	r0, [r3, #16]
   2c1e0:	f7ff fda0 	bl	2bd24 <__hi0bits>
   2c1e4:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
   2c1e8:	6038      	str	r0, [r7, #0]
   2c1ea:	4648      	mov	r0, r9
   2c1ec:	b003      	add	sp, #12
   2c1ee:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   2c1f2:	a801      	add	r0, sp, #4
   2c1f4:	f7ff fdb6 	bl	2bd64 <__lo0bits>
   2c1f8:	9b01      	ldr	r3, [sp, #4]
   2c1fa:	f8c9 3014 	str.w	r3, [r9, #20]
   2c1fe:	2101      	movs	r1, #1
   2c200:	3020      	adds	r0, #32
   2c202:	f8c9 1010 	str.w	r1, [r9, #16]
   2c206:	2d00      	cmp	r5, #0
   2c208:	d0e3      	beq.n	2c1d2 <__d2b+0x52>
   2c20a:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
   2c20e:	4405      	add	r5, r0
   2c210:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
   2c214:	f8c8 5000 	str.w	r5, [r8]
   2c218:	6038      	str	r0, [r7, #0]
   2c21a:	4648      	mov	r0, r9
   2c21c:	b003      	add	sp, #12
   2c21e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   2c222:	e89d 000a 	ldmia.w	sp, {r1, r3}
   2c226:	f1c0 0220 	rsb	r2, r0, #32
   2c22a:	fa03 f202 	lsl.w	r2, r3, r2
   2c22e:	430a      	orrs	r2, r1
   2c230:	40c3      	lsrs	r3, r0
   2c232:	9301      	str	r3, [sp, #4]
   2c234:	f8c9 2014 	str.w	r2, [r9, #20]
   2c238:	e7c2      	b.n	2c1c0 <__d2b+0x40>
   2c23a:	bf00      	nop

0002c23c <__sread>:
   2c23c:	b510      	push	{r4, lr}
   2c23e:	460c      	mov	r4, r1
   2c240:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
   2c244:	f000 fa72 	bl	2c72c <_read_r>
   2c248:	2800      	cmp	r0, #0
   2c24a:	db03      	blt.n	2c254 <__sread+0x18>
   2c24c:	6d23      	ldr	r3, [r4, #80]	; 0x50
   2c24e:	4403      	add	r3, r0
   2c250:	6523      	str	r3, [r4, #80]	; 0x50
   2c252:	bd10      	pop	{r4, pc}
   2c254:	89a3      	ldrh	r3, [r4, #12]
   2c256:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
   2c25a:	81a3      	strh	r3, [r4, #12]
   2c25c:	bd10      	pop	{r4, pc}
   2c25e:	bf00      	nop

0002c260 <__swrite>:
   2c260:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   2c264:	4616      	mov	r6, r2
   2c266:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
   2c26a:	461f      	mov	r7, r3
   2c26c:	05d3      	lsls	r3, r2, #23
   2c26e:	460c      	mov	r4, r1
   2c270:	4605      	mov	r5, r0
   2c272:	d507      	bpl.n	2c284 <__swrite+0x24>
   2c274:	2200      	movs	r2, #0
   2c276:	2302      	movs	r3, #2
   2c278:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
   2c27c:	f000 fa40 	bl	2c700 <_lseek_r>
   2c280:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
   2c284:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
   2c288:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
   2c28c:	81a2      	strh	r2, [r4, #12]
   2c28e:	463b      	mov	r3, r7
   2c290:	4632      	mov	r2, r6
   2c292:	4628      	mov	r0, r5
   2c294:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   2c298:	f7fe b960 	b.w	2a55c <_write_r>

0002c29c <__sseek>:
   2c29c:	b510      	push	{r4, lr}
   2c29e:	460c      	mov	r4, r1
   2c2a0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
   2c2a4:	f000 fa2c 	bl	2c700 <_lseek_r>
   2c2a8:	89a3      	ldrh	r3, [r4, #12]
   2c2aa:	1c42      	adds	r2, r0, #1
   2c2ac:	bf0e      	itee	eq
   2c2ae:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
   2c2b2:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
   2c2b6:	6520      	strne	r0, [r4, #80]	; 0x50
   2c2b8:	81a3      	strh	r3, [r4, #12]
   2c2ba:	bd10      	pop	{r4, pc}

0002c2bc <__sclose>:
   2c2bc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
   2c2c0:	f000 b984 	b.w	2c5cc <_close_r>

0002c2c4 <strchr>:
   2c2c4:	b2c9      	uxtb	r1, r1
   2c2c6:	2900      	cmp	r1, #0
   2c2c8:	d041      	beq.n	2c34e <strchr+0x8a>
   2c2ca:	0782      	lsls	r2, r0, #30
   2c2cc:	b4f0      	push	{r4, r5, r6, r7}
   2c2ce:	d067      	beq.n	2c3a0 <strchr+0xdc>
   2c2d0:	7803      	ldrb	r3, [r0, #0]
   2c2d2:	2b00      	cmp	r3, #0
   2c2d4:	d068      	beq.n	2c3a8 <strchr+0xe4>
   2c2d6:	4299      	cmp	r1, r3
   2c2d8:	d037      	beq.n	2c34a <strchr+0x86>
   2c2da:	1c43      	adds	r3, r0, #1
   2c2dc:	e004      	b.n	2c2e8 <strchr+0x24>
   2c2de:	f813 0b01 	ldrb.w	r0, [r3], #1
   2c2e2:	b390      	cbz	r0, 2c34a <strchr+0x86>
   2c2e4:	4281      	cmp	r1, r0
   2c2e6:	d02f      	beq.n	2c348 <strchr+0x84>
   2c2e8:	079a      	lsls	r2, r3, #30
   2c2ea:	461c      	mov	r4, r3
   2c2ec:	d1f7      	bne.n	2c2de <strchr+0x1a>
   2c2ee:	6825      	ldr	r5, [r4, #0]
   2c2f0:	ea41 2301 	orr.w	r3, r1, r1, lsl #8
   2c2f4:	ea43 4303 	orr.w	r3, r3, r3, lsl #16
   2c2f8:	ea83 0605 	eor.w	r6, r3, r5
   2c2fc:	f1a6 3001 	sub.w	r0, r6, #16843009	; 0x1010101
   2c300:	f1a5 3201 	sub.w	r2, r5, #16843009	; 0x1010101
   2c304:	ea20 0006 	bic.w	r0, r0, r6
   2c308:	ea22 0205 	bic.w	r2, r2, r5
   2c30c:	4302      	orrs	r2, r0
   2c30e:	f012 3f80 	tst.w	r2, #2155905152	; 0x80808080
   2c312:	d111      	bne.n	2c338 <strchr+0x74>
   2c314:	4620      	mov	r0, r4
   2c316:	f850 6f04 	ldr.w	r6, [r0, #4]!
   2c31a:	ea83 0706 	eor.w	r7, r3, r6
   2c31e:	f1a7 3501 	sub.w	r5, r7, #16843009	; 0x1010101
   2c322:	f1a6 3201 	sub.w	r2, r6, #16843009	; 0x1010101
   2c326:	ea25 0507 	bic.w	r5, r5, r7
   2c32a:	ea22 0206 	bic.w	r2, r2, r6
   2c32e:	432a      	orrs	r2, r5
   2c330:	f012 3f80 	tst.w	r2, #2155905152	; 0x80808080
   2c334:	d0ef      	beq.n	2c316 <strchr+0x52>
   2c336:	4604      	mov	r4, r0
   2c338:	7820      	ldrb	r0, [r4, #0]
   2c33a:	b918      	cbnz	r0, 2c344 <strchr+0x80>
   2c33c:	e005      	b.n	2c34a <strchr+0x86>
   2c33e:	f814 0f01 	ldrb.w	r0, [r4, #1]!
   2c342:	b110      	cbz	r0, 2c34a <strchr+0x86>
   2c344:	4281      	cmp	r1, r0
   2c346:	d1fa      	bne.n	2c33e <strchr+0x7a>
   2c348:	4620      	mov	r0, r4
   2c34a:	bcf0      	pop	{r4, r5, r6, r7}
   2c34c:	4770      	bx	lr
   2c34e:	0783      	lsls	r3, r0, #30
   2c350:	d024      	beq.n	2c39c <strchr+0xd8>
   2c352:	7803      	ldrb	r3, [r0, #0]
   2c354:	2b00      	cmp	r3, #0
   2c356:	d0f9      	beq.n	2c34c <strchr+0x88>
   2c358:	1c43      	adds	r3, r0, #1
   2c35a:	e003      	b.n	2c364 <strchr+0xa0>
   2c35c:	7802      	ldrb	r2, [r0, #0]
   2c35e:	3301      	adds	r3, #1
   2c360:	2a00      	cmp	r2, #0
   2c362:	d0f3      	beq.n	2c34c <strchr+0x88>
   2c364:	0799      	lsls	r1, r3, #30
   2c366:	4618      	mov	r0, r3
   2c368:	d1f8      	bne.n	2c35c <strchr+0x98>
   2c36a:	6819      	ldr	r1, [r3, #0]
   2c36c:	f1a1 3201 	sub.w	r2, r1, #16843009	; 0x1010101
   2c370:	ea22 0201 	bic.w	r2, r2, r1
   2c374:	f012 3f80 	tst.w	r2, #2155905152	; 0x80808080
   2c378:	d108      	bne.n	2c38c <strchr+0xc8>
   2c37a:	f853 1f04 	ldr.w	r1, [r3, #4]!
   2c37e:	f1a1 3201 	sub.w	r2, r1, #16843009	; 0x1010101
   2c382:	ea22 0201 	bic.w	r2, r2, r1
   2c386:	f012 3f80 	tst.w	r2, #2155905152	; 0x80808080
   2c38a:	d0f6      	beq.n	2c37a <strchr+0xb6>
   2c38c:	781a      	ldrb	r2, [r3, #0]
   2c38e:	4618      	mov	r0, r3
   2c390:	b142      	cbz	r2, 2c3a4 <strchr+0xe0>
   2c392:	f810 3f01 	ldrb.w	r3, [r0, #1]!
   2c396:	2b00      	cmp	r3, #0
   2c398:	d1fb      	bne.n	2c392 <strchr+0xce>
   2c39a:	4770      	bx	lr
   2c39c:	4603      	mov	r3, r0
   2c39e:	e7e4      	b.n	2c36a <strchr+0xa6>
   2c3a0:	4604      	mov	r4, r0
   2c3a2:	e7a4      	b.n	2c2ee <strchr+0x2a>
   2c3a4:	4618      	mov	r0, r3
   2c3a6:	4770      	bx	lr
   2c3a8:	4618      	mov	r0, r3
   2c3aa:	e7ce      	b.n	2c34a <strchr+0x86>

0002c3ac <__ssprint_r>:
   2c3ac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2c3b0:	6893      	ldr	r3, [r2, #8]
   2c3b2:	b083      	sub	sp, #12
   2c3b4:	4690      	mov	r8, r2
   2c3b6:	2b00      	cmp	r3, #0
   2c3b8:	d070      	beq.n	2c49c <__ssprint_r+0xf0>
   2c3ba:	4682      	mov	sl, r0
   2c3bc:	460c      	mov	r4, r1
   2c3be:	6817      	ldr	r7, [r2, #0]
   2c3c0:	688d      	ldr	r5, [r1, #8]
   2c3c2:	6808      	ldr	r0, [r1, #0]
   2c3c4:	e042      	b.n	2c44c <__ssprint_r+0xa0>
   2c3c6:	89a3      	ldrh	r3, [r4, #12]
   2c3c8:	f413 6f90 	tst.w	r3, #1152	; 0x480
   2c3cc:	d02e      	beq.n	2c42c <__ssprint_r+0x80>
   2c3ce:	6965      	ldr	r5, [r4, #20]
   2c3d0:	6921      	ldr	r1, [r4, #16]
   2c3d2:	eb05 0545 	add.w	r5, r5, r5, lsl #1
   2c3d6:	eba0 0b01 	sub.w	fp, r0, r1
   2c3da:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
   2c3de:	f10b 0001 	add.w	r0, fp, #1
   2c3e2:	106d      	asrs	r5, r5, #1
   2c3e4:	4430      	add	r0, r6
   2c3e6:	42a8      	cmp	r0, r5
   2c3e8:	462a      	mov	r2, r5
   2c3ea:	bf84      	itt	hi
   2c3ec:	4605      	movhi	r5, r0
   2c3ee:	462a      	movhi	r2, r5
   2c3f0:	055b      	lsls	r3, r3, #21
   2c3f2:	d538      	bpl.n	2c466 <__ssprint_r+0xba>
   2c3f4:	4611      	mov	r1, r2
   2c3f6:	4650      	mov	r0, sl
   2c3f8:	f7fb f8e8 	bl	275cc <_malloc_r>
   2c3fc:	2800      	cmp	r0, #0
   2c3fe:	d03c      	beq.n	2c47a <__ssprint_r+0xce>
   2c400:	465a      	mov	r2, fp
   2c402:	6921      	ldr	r1, [r4, #16]
   2c404:	9001      	str	r0, [sp, #4]
   2c406:	f7fb fc2b 	bl	27c60 <memcpy>
   2c40a:	89a2      	ldrh	r2, [r4, #12]
   2c40c:	9b01      	ldr	r3, [sp, #4]
   2c40e:	f422 6290 	bic.w	r2, r2, #1152	; 0x480
   2c412:	f042 0280 	orr.w	r2, r2, #128	; 0x80
   2c416:	81a2      	strh	r2, [r4, #12]
   2c418:	eba5 020b 	sub.w	r2, r5, fp
   2c41c:	eb03 000b 	add.w	r0, r3, fp
   2c420:	6165      	str	r5, [r4, #20]
   2c422:	6123      	str	r3, [r4, #16]
   2c424:	6020      	str	r0, [r4, #0]
   2c426:	60a2      	str	r2, [r4, #8]
   2c428:	4635      	mov	r5, r6
   2c42a:	46b3      	mov	fp, r6
   2c42c:	465a      	mov	r2, fp
   2c42e:	4649      	mov	r1, r9
   2c430:	f7fb fcb0 	bl	27d94 <memmove>
   2c434:	f8d8 3008 	ldr.w	r3, [r8, #8]
   2c438:	68a2      	ldr	r2, [r4, #8]
   2c43a:	6820      	ldr	r0, [r4, #0]
   2c43c:	1b55      	subs	r5, r2, r5
   2c43e:	4458      	add	r0, fp
   2c440:	1b9e      	subs	r6, r3, r6
   2c442:	60a5      	str	r5, [r4, #8]
   2c444:	6020      	str	r0, [r4, #0]
   2c446:	f8c8 6008 	str.w	r6, [r8, #8]
   2c44a:	b33e      	cbz	r6, 2c49c <__ssprint_r+0xf0>
   2c44c:	687e      	ldr	r6, [r7, #4]
   2c44e:	463b      	mov	r3, r7
   2c450:	3708      	adds	r7, #8
   2c452:	2e00      	cmp	r6, #0
   2c454:	d0fa      	beq.n	2c44c <__ssprint_r+0xa0>
   2c456:	42ae      	cmp	r6, r5
   2c458:	f8d3 9000 	ldr.w	r9, [r3]
   2c45c:	46ab      	mov	fp, r5
   2c45e:	d2b2      	bcs.n	2c3c6 <__ssprint_r+0x1a>
   2c460:	4635      	mov	r5, r6
   2c462:	46b3      	mov	fp, r6
   2c464:	e7e2      	b.n	2c42c <__ssprint_r+0x80>
   2c466:	4650      	mov	r0, sl
   2c468:	f7fb fdb2 	bl	27fd0 <_realloc_r>
   2c46c:	4603      	mov	r3, r0
   2c46e:	2800      	cmp	r0, #0
   2c470:	d1d2      	bne.n	2c418 <__ssprint_r+0x6c>
   2c472:	6921      	ldr	r1, [r4, #16]
   2c474:	4650      	mov	r0, sl
   2c476:	f7ff fa4f 	bl	2b918 <_free_r>
   2c47a:	230c      	movs	r3, #12
   2c47c:	f8ca 3000 	str.w	r3, [sl]
   2c480:	89a3      	ldrh	r3, [r4, #12]
   2c482:	2200      	movs	r2, #0
   2c484:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   2c488:	f04f 30ff 	mov.w	r0, #4294967295
   2c48c:	81a3      	strh	r3, [r4, #12]
   2c48e:	f8c8 2008 	str.w	r2, [r8, #8]
   2c492:	f8c8 2004 	str.w	r2, [r8, #4]
   2c496:	b003      	add	sp, #12
   2c498:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2c49c:	2000      	movs	r0, #0
   2c49e:	f8c8 0004 	str.w	r0, [r8, #4]
   2c4a2:	b003      	add	sp, #12
   2c4a4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0002c4a8 <__register_exitproc>:
   2c4a8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   2c4ac:	4d2c      	ldr	r5, [pc, #176]	; (2c560 <__register_exitproc+0xb8>)
   2c4ae:	4606      	mov	r6, r0
   2c4b0:	6828      	ldr	r0, [r5, #0]
   2c4b2:	4698      	mov	r8, r3
   2c4b4:	460f      	mov	r7, r1
   2c4b6:	4691      	mov	r9, r2
   2c4b8:	f7fb f874 	bl	275a4 <__retarget_lock_acquire_recursive>
   2c4bc:	4b29      	ldr	r3, [pc, #164]	; (2c564 <__register_exitproc+0xbc>)
   2c4be:	681c      	ldr	r4, [r3, #0]
   2c4c0:	f8d4 3148 	ldr.w	r3, [r4, #328]	; 0x148
   2c4c4:	2b00      	cmp	r3, #0
   2c4c6:	d03e      	beq.n	2c546 <__register_exitproc+0x9e>
   2c4c8:	685a      	ldr	r2, [r3, #4]
   2c4ca:	2a1f      	cmp	r2, #31
   2c4cc:	dc1c      	bgt.n	2c508 <__register_exitproc+0x60>
   2c4ce:	f102 0e01 	add.w	lr, r2, #1
   2c4d2:	b176      	cbz	r6, 2c4f2 <__register_exitproc+0x4a>
   2c4d4:	eb03 0182 	add.w	r1, r3, r2, lsl #2
   2c4d8:	2401      	movs	r4, #1
   2c4da:	f8c1 9088 	str.w	r9, [r1, #136]	; 0x88
   2c4de:	f8d3 0188 	ldr.w	r0, [r3, #392]	; 0x188
   2c4e2:	4094      	lsls	r4, r2
   2c4e4:	4320      	orrs	r0, r4
   2c4e6:	2e02      	cmp	r6, #2
   2c4e8:	f8c3 0188 	str.w	r0, [r3, #392]	; 0x188
   2c4ec:	f8c1 8108 	str.w	r8, [r1, #264]	; 0x108
   2c4f0:	d023      	beq.n	2c53a <__register_exitproc+0x92>
   2c4f2:	3202      	adds	r2, #2
   2c4f4:	f8c3 e004 	str.w	lr, [r3, #4]
   2c4f8:	6828      	ldr	r0, [r5, #0]
   2c4fa:	f843 7022 	str.w	r7, [r3, r2, lsl #2]
   2c4fe:	f7fb f853 	bl	275a8 <__retarget_lock_release_recursive>
   2c502:	2000      	movs	r0, #0
   2c504:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   2c508:	4b17      	ldr	r3, [pc, #92]	; (2c568 <__register_exitproc+0xc0>)
   2c50a:	b30b      	cbz	r3, 2c550 <__register_exitproc+0xa8>
   2c50c:	f44f 70c8 	mov.w	r0, #400	; 0x190
   2c510:	f7fb f84c 	bl	275ac <malloc>
   2c514:	4603      	mov	r3, r0
   2c516:	b1d8      	cbz	r0, 2c550 <__register_exitproc+0xa8>
   2c518:	f8d4 2148 	ldr.w	r2, [r4, #328]	; 0x148
   2c51c:	6002      	str	r2, [r0, #0]
   2c51e:	2100      	movs	r1, #0
   2c520:	6041      	str	r1, [r0, #4]
   2c522:	460a      	mov	r2, r1
   2c524:	f8c4 0148 	str.w	r0, [r4, #328]	; 0x148
   2c528:	f04f 0e01 	mov.w	lr, #1
   2c52c:	f8c0 1188 	str.w	r1, [r0, #392]	; 0x188
   2c530:	f8c0 118c 	str.w	r1, [r0, #396]	; 0x18c
   2c534:	2e00      	cmp	r6, #0
   2c536:	d0dc      	beq.n	2c4f2 <__register_exitproc+0x4a>
   2c538:	e7cc      	b.n	2c4d4 <__register_exitproc+0x2c>
   2c53a:	f8d3 118c 	ldr.w	r1, [r3, #396]	; 0x18c
   2c53e:	430c      	orrs	r4, r1
   2c540:	f8c3 418c 	str.w	r4, [r3, #396]	; 0x18c
   2c544:	e7d5      	b.n	2c4f2 <__register_exitproc+0x4a>
   2c546:	f504 73a6 	add.w	r3, r4, #332	; 0x14c
   2c54a:	f8c4 3148 	str.w	r3, [r4, #328]	; 0x148
   2c54e:	e7bb      	b.n	2c4c8 <__register_exitproc+0x20>
   2c550:	6828      	ldr	r0, [r5, #0]
   2c552:	f7fb f829 	bl	275a8 <__retarget_lock_release_recursive>
   2c556:	f04f 30ff 	mov.w	r0, #4294967295
   2c55a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   2c55e:	bf00      	nop
   2c560:	20000ab4 	.word	0x20000ab4
   2c564:	0002edc8 	.word	0x0002edc8
   2c568:	000275ad 	.word	0x000275ad

0002c56c <_calloc_r>:
   2c56c:	b510      	push	{r4, lr}
   2c56e:	fb02 f101 	mul.w	r1, r2, r1
   2c572:	f7fb f82b 	bl	275cc <_malloc_r>
   2c576:	4604      	mov	r4, r0
   2c578:	b1d8      	cbz	r0, 2c5b2 <_calloc_r+0x46>
   2c57a:	f850 2c04 	ldr.w	r2, [r0, #-4]
   2c57e:	f022 0203 	bic.w	r2, r2, #3
   2c582:	3a04      	subs	r2, #4
   2c584:	2a24      	cmp	r2, #36	; 0x24
   2c586:	d818      	bhi.n	2c5ba <_calloc_r+0x4e>
   2c588:	2a13      	cmp	r2, #19
   2c58a:	d914      	bls.n	2c5b6 <_calloc_r+0x4a>
   2c58c:	2300      	movs	r3, #0
   2c58e:	2a1b      	cmp	r2, #27
   2c590:	6003      	str	r3, [r0, #0]
   2c592:	6043      	str	r3, [r0, #4]
   2c594:	d916      	bls.n	2c5c4 <_calloc_r+0x58>
   2c596:	2a24      	cmp	r2, #36	; 0x24
   2c598:	6083      	str	r3, [r0, #8]
   2c59a:	60c3      	str	r3, [r0, #12]
   2c59c:	bf11      	iteee	ne
   2c59e:	f100 0210 	addne.w	r2, r0, #16
   2c5a2:	6103      	streq	r3, [r0, #16]
   2c5a4:	6143      	streq	r3, [r0, #20]
   2c5a6:	f100 0218 	addeq.w	r2, r0, #24
   2c5aa:	2300      	movs	r3, #0
   2c5ac:	6013      	str	r3, [r2, #0]
   2c5ae:	6053      	str	r3, [r2, #4]
   2c5b0:	6093      	str	r3, [r2, #8]
   2c5b2:	4620      	mov	r0, r4
   2c5b4:	bd10      	pop	{r4, pc}
   2c5b6:	4602      	mov	r2, r0
   2c5b8:	e7f7      	b.n	2c5aa <_calloc_r+0x3e>
   2c5ba:	2100      	movs	r1, #0
   2c5bc:	f7fb fc4e 	bl	27e5c <memset>
   2c5c0:	4620      	mov	r0, r4
   2c5c2:	bd10      	pop	{r4, pc}
   2c5c4:	f100 0208 	add.w	r2, r0, #8
   2c5c8:	e7ef      	b.n	2c5aa <_calloc_r+0x3e>
   2c5ca:	bf00      	nop

0002c5cc <_close_r>:
   2c5cc:	b538      	push	{r3, r4, r5, lr}
   2c5ce:	4c07      	ldr	r4, [pc, #28]	; (2c5ec <_close_r+0x20>)
   2c5d0:	2300      	movs	r3, #0
   2c5d2:	4605      	mov	r5, r0
   2c5d4:	4608      	mov	r0, r1
   2c5d6:	6023      	str	r3, [r4, #0]
   2c5d8:	f000 f9ac 	bl	2c934 <_close>
   2c5dc:	1c43      	adds	r3, r0, #1
   2c5de:	d000      	beq.n	2c5e2 <_close_r+0x16>
   2c5e0:	bd38      	pop	{r3, r4, r5, pc}
   2c5e2:	6823      	ldr	r3, [r4, #0]
   2c5e4:	2b00      	cmp	r3, #0
   2c5e6:	d0fb      	beq.n	2c5e0 <_close_r+0x14>
   2c5e8:	602b      	str	r3, [r5, #0]
   2c5ea:	bd38      	pop	{r3, r4, r5, pc}
   2c5ec:	2000a440 	.word	0x2000a440

0002c5f0 <_fclose_r>:
   2c5f0:	b570      	push	{r4, r5, r6, lr}
   2c5f2:	b159      	cbz	r1, 2c60c <_fclose_r+0x1c>
   2c5f4:	4605      	mov	r5, r0
   2c5f6:	460c      	mov	r4, r1
   2c5f8:	b110      	cbz	r0, 2c600 <_fclose_r+0x10>
   2c5fa:	6b83      	ldr	r3, [r0, #56]	; 0x38
   2c5fc:	2b00      	cmp	r3, #0
   2c5fe:	d03c      	beq.n	2c67a <_fclose_r+0x8a>
   2c600:	6e63      	ldr	r3, [r4, #100]	; 0x64
   2c602:	07d8      	lsls	r0, r3, #31
   2c604:	d505      	bpl.n	2c612 <_fclose_r+0x22>
   2c606:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   2c60a:	b92b      	cbnz	r3, 2c618 <_fclose_r+0x28>
   2c60c:	2600      	movs	r6, #0
   2c60e:	4630      	mov	r0, r6
   2c610:	bd70      	pop	{r4, r5, r6, pc}
   2c612:	89a3      	ldrh	r3, [r4, #12]
   2c614:	0599      	lsls	r1, r3, #22
   2c616:	d53c      	bpl.n	2c692 <_fclose_r+0xa2>
   2c618:	4621      	mov	r1, r4
   2c61a:	4628      	mov	r0, r5
   2c61c:	f7fe ffe2 	bl	2b5e4 <__sflush_r>
   2c620:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
   2c622:	4606      	mov	r6, r0
   2c624:	b133      	cbz	r3, 2c634 <_fclose_r+0x44>
   2c626:	69e1      	ldr	r1, [r4, #28]
   2c628:	4628      	mov	r0, r5
   2c62a:	4798      	blx	r3
   2c62c:	2800      	cmp	r0, #0
   2c62e:	bfb8      	it	lt
   2c630:	f04f 36ff 	movlt.w	r6, #4294967295
   2c634:	89a3      	ldrh	r3, [r4, #12]
   2c636:	061a      	lsls	r2, r3, #24
   2c638:	d422      	bmi.n	2c680 <_fclose_r+0x90>
   2c63a:	6b21      	ldr	r1, [r4, #48]	; 0x30
   2c63c:	b141      	cbz	r1, 2c650 <_fclose_r+0x60>
   2c63e:	f104 0340 	add.w	r3, r4, #64	; 0x40
   2c642:	4299      	cmp	r1, r3
   2c644:	d002      	beq.n	2c64c <_fclose_r+0x5c>
   2c646:	4628      	mov	r0, r5
   2c648:	f7ff f966 	bl	2b918 <_free_r>
   2c64c:	2300      	movs	r3, #0
   2c64e:	6323      	str	r3, [r4, #48]	; 0x30
   2c650:	6c61      	ldr	r1, [r4, #68]	; 0x44
   2c652:	b121      	cbz	r1, 2c65e <_fclose_r+0x6e>
   2c654:	4628      	mov	r0, r5
   2c656:	f7ff f95f 	bl	2b918 <_free_r>
   2c65a:	2300      	movs	r3, #0
   2c65c:	6463      	str	r3, [r4, #68]	; 0x44
   2c65e:	f7ff f8e5 	bl	2b82c <__sfp_lock_acquire>
   2c662:	6e63      	ldr	r3, [r4, #100]	; 0x64
   2c664:	2200      	movs	r2, #0
   2c666:	07db      	lsls	r3, r3, #31
   2c668:	81a2      	strh	r2, [r4, #12]
   2c66a:	d50e      	bpl.n	2c68a <_fclose_r+0x9a>
   2c66c:	6da0      	ldr	r0, [r4, #88]	; 0x58
   2c66e:	f7fa ff97 	bl	275a0 <__retarget_lock_close_recursive>
   2c672:	f7ff f8e1 	bl	2b838 <__sfp_lock_release>
   2c676:	4630      	mov	r0, r6
   2c678:	bd70      	pop	{r4, r5, r6, pc}
   2c67a:	f7ff f8ab 	bl	2b7d4 <__sinit>
   2c67e:	e7bf      	b.n	2c600 <_fclose_r+0x10>
   2c680:	6921      	ldr	r1, [r4, #16]
   2c682:	4628      	mov	r0, r5
   2c684:	f7ff f948 	bl	2b918 <_free_r>
   2c688:	e7d7      	b.n	2c63a <_fclose_r+0x4a>
   2c68a:	6da0      	ldr	r0, [r4, #88]	; 0x58
   2c68c:	f7fa ff8c 	bl	275a8 <__retarget_lock_release_recursive>
   2c690:	e7ec      	b.n	2c66c <_fclose_r+0x7c>
   2c692:	6da0      	ldr	r0, [r4, #88]	; 0x58
   2c694:	f7fa ff86 	bl	275a4 <__retarget_lock_acquire_recursive>
   2c698:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   2c69c:	2b00      	cmp	r3, #0
   2c69e:	d1bb      	bne.n	2c618 <_fclose_r+0x28>
   2c6a0:	6e66      	ldr	r6, [r4, #100]	; 0x64
   2c6a2:	f016 0601 	ands.w	r6, r6, #1
   2c6a6:	d1b1      	bne.n	2c60c <_fclose_r+0x1c>
   2c6a8:	6da0      	ldr	r0, [r4, #88]	; 0x58
   2c6aa:	f7fa ff7d 	bl	275a8 <__retarget_lock_release_recursive>
   2c6ae:	4630      	mov	r0, r6
   2c6b0:	bd70      	pop	{r4, r5, r6, pc}
   2c6b2:	bf00      	nop

0002c6b4 <_fstat_r>:
   2c6b4:	b538      	push	{r3, r4, r5, lr}
   2c6b6:	460b      	mov	r3, r1
   2c6b8:	4c07      	ldr	r4, [pc, #28]	; (2c6d8 <_fstat_r+0x24>)
   2c6ba:	4605      	mov	r5, r0
   2c6bc:	4611      	mov	r1, r2
   2c6be:	4618      	mov	r0, r3
   2c6c0:	2300      	movs	r3, #0
   2c6c2:	6023      	str	r3, [r4, #0]
   2c6c4:	f000 f9b4 	bl	2ca30 <_fstat>
   2c6c8:	1c43      	adds	r3, r0, #1
   2c6ca:	d000      	beq.n	2c6ce <_fstat_r+0x1a>
   2c6cc:	bd38      	pop	{r3, r4, r5, pc}
   2c6ce:	6823      	ldr	r3, [r4, #0]
   2c6d0:	2b00      	cmp	r3, #0
   2c6d2:	d0fb      	beq.n	2c6cc <_fstat_r+0x18>
   2c6d4:	602b      	str	r3, [r5, #0]
   2c6d6:	bd38      	pop	{r3, r4, r5, pc}
   2c6d8:	2000a440 	.word	0x2000a440

0002c6dc <_isatty_r>:
   2c6dc:	b538      	push	{r3, r4, r5, lr}
   2c6de:	4c07      	ldr	r4, [pc, #28]	; (2c6fc <_isatty_r+0x20>)
   2c6e0:	2300      	movs	r3, #0
   2c6e2:	4605      	mov	r5, r0
   2c6e4:	4608      	mov	r0, r1
   2c6e6:	6023      	str	r3, [r4, #0]
   2c6e8:	f000 f9b0 	bl	2ca4c <_isatty>
   2c6ec:	1c43      	adds	r3, r0, #1
   2c6ee:	d000      	beq.n	2c6f2 <_isatty_r+0x16>
   2c6f0:	bd38      	pop	{r3, r4, r5, pc}
   2c6f2:	6823      	ldr	r3, [r4, #0]
   2c6f4:	2b00      	cmp	r3, #0
   2c6f6:	d0fb      	beq.n	2c6f0 <_isatty_r+0x14>
   2c6f8:	602b      	str	r3, [r5, #0]
   2c6fa:	bd38      	pop	{r3, r4, r5, pc}
   2c6fc:	2000a440 	.word	0x2000a440

0002c700 <_lseek_r>:
   2c700:	b570      	push	{r4, r5, r6, lr}
   2c702:	460d      	mov	r5, r1
   2c704:	4c08      	ldr	r4, [pc, #32]	; (2c728 <_lseek_r+0x28>)
   2c706:	4611      	mov	r1, r2
   2c708:	4606      	mov	r6, r0
   2c70a:	461a      	mov	r2, r3
   2c70c:	4628      	mov	r0, r5
   2c70e:	2300      	movs	r3, #0
   2c710:	6023      	str	r3, [r4, #0]
   2c712:	f000 f8d3 	bl	2c8bc <_lseek>
   2c716:	1c43      	adds	r3, r0, #1
   2c718:	d000      	beq.n	2c71c <_lseek_r+0x1c>
   2c71a:	bd70      	pop	{r4, r5, r6, pc}
   2c71c:	6823      	ldr	r3, [r4, #0]
   2c71e:	2b00      	cmp	r3, #0
   2c720:	d0fb      	beq.n	2c71a <_lseek_r+0x1a>
   2c722:	6033      	str	r3, [r6, #0]
   2c724:	bd70      	pop	{r4, r5, r6, pc}
   2c726:	bf00      	nop
   2c728:	2000a440 	.word	0x2000a440

0002c72c <_read_r>:
   2c72c:	b570      	push	{r4, r5, r6, lr}
   2c72e:	460d      	mov	r5, r1
   2c730:	4c08      	ldr	r4, [pc, #32]	; (2c754 <_read_r+0x28>)
   2c732:	4611      	mov	r1, r2
   2c734:	4606      	mov	r6, r0
   2c736:	461a      	mov	r2, r3
   2c738:	4628      	mov	r0, r5
   2c73a:	2300      	movs	r3, #0
   2c73c:	6023      	str	r3, [r4, #0]
   2c73e:	f000 f84b 	bl	2c7d8 <_read>
   2c742:	1c43      	adds	r3, r0, #1
   2c744:	d000      	beq.n	2c748 <_read_r+0x1c>
   2c746:	bd70      	pop	{r4, r5, r6, pc}
   2c748:	6823      	ldr	r3, [r4, #0]
   2c74a:	2b00      	cmp	r3, #0
   2c74c:	d0fb      	beq.n	2c746 <_read_r+0x1a>
   2c74e:	6033      	str	r3, [r6, #0]
   2c750:	bd70      	pop	{r4, r5, r6, pc}
   2c752:	bf00      	nop
   2c754:	2000a440 	.word	0x2000a440

0002c758 <__aeabi_dcmpun>:
   2c758:	ea4f 0c41 	mov.w	ip, r1, lsl #1
   2c75c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   2c760:	d102      	bne.n	2c768 <__aeabi_dcmpun+0x10>
   2c762:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
   2c766:	d10a      	bne.n	2c77e <__aeabi_dcmpun+0x26>
   2c768:	ea4f 0c43 	mov.w	ip, r3, lsl #1
   2c76c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   2c770:	d102      	bne.n	2c778 <__aeabi_dcmpun+0x20>
   2c772:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
   2c776:	d102      	bne.n	2c77e <__aeabi_dcmpun+0x26>
   2c778:	f04f 0000 	mov.w	r0, #0
   2c77c:	4770      	bx	lr
   2c77e:	f04f 0001 	mov.w	r0, #1
   2c782:	4770      	bx	lr

0002c784 <findslot>:
   2c784:	4b0b      	ldr	r3, [pc, #44]	; (2c7b4 <findslot+0x30>)
   2c786:	681b      	ldr	r3, [r3, #0]
   2c788:	b510      	push	{r4, lr}
   2c78a:	4604      	mov	r4, r0
   2c78c:	b10b      	cbz	r3, 2c792 <findslot+0xe>
   2c78e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
   2c790:	b14a      	cbz	r2, 2c7a6 <findslot+0x22>
   2c792:	2c13      	cmp	r4, #19
   2c794:	d80c      	bhi.n	2c7b0 <findslot+0x2c>
   2c796:	4808      	ldr	r0, [pc, #32]	; (2c7b8 <findslot+0x34>)
   2c798:	f850 3034 	ldr.w	r3, [r0, r4, lsl #3]
   2c79c:	3301      	adds	r3, #1
   2c79e:	d007      	beq.n	2c7b0 <findslot+0x2c>
   2c7a0:	eb00 00c4 	add.w	r0, r0, r4, lsl #3
   2c7a4:	bd10      	pop	{r4, pc}
   2c7a6:	4618      	mov	r0, r3
   2c7a8:	f7ff f814 	bl	2b7d4 <__sinit>
   2c7ac:	2c13      	cmp	r4, #19
   2c7ae:	d9f2      	bls.n	2c796 <findslot+0x12>
   2c7b0:	2000      	movs	r0, #0
   2c7b2:	bd10      	pop	{r4, pc}
   2c7b4:	20000108 	.word	0x20000108
   2c7b8:	200029b4 	.word	0x200029b4

0002c7bc <checkerror.part.0>:
   2c7bc:	b570      	push	{r4, r5, r6, lr}
   2c7be:	f7fa fc65 	bl	2708c <__errno>
   2c7c2:	2413      	movs	r4, #19
   2c7c4:	4605      	mov	r5, r0
   2c7c6:	2600      	movs	r6, #0
   2c7c8:	4620      	mov	r0, r4
   2c7ca:	4631      	mov	r1, r6
   2c7cc:	beab      	bkpt	0x00ab
   2c7ce:	4604      	mov	r4, r0
   2c7d0:	f04f 30ff 	mov.w	r0, #4294967295
   2c7d4:	602c      	str	r4, [r5, #0]
   2c7d6:	bd70      	pop	{r4, r5, r6, pc}

0002c7d8 <_read>:
   2c7d8:	b5f0      	push	{r4, r5, r6, r7, lr}
   2c7da:	b085      	sub	sp, #20
   2c7dc:	460c      	mov	r4, r1
   2c7de:	4616      	mov	r6, r2
   2c7e0:	f7ff ffd0 	bl	2c784 <findslot>
   2c7e4:	b1c8      	cbz	r0, 2c81a <_read+0x42>
   2c7e6:	6803      	ldr	r3, [r0, #0]
   2c7e8:	9301      	str	r3, [sp, #4]
   2c7ea:	9402      	str	r4, [sp, #8]
   2c7ec:	4605      	mov	r5, r0
   2c7ee:	9603      	str	r6, [sp, #12]
   2c7f0:	2406      	movs	r4, #6
   2c7f2:	af01      	add	r7, sp, #4
   2c7f4:	4620      	mov	r0, r4
   2c7f6:	4639      	mov	r1, r7
   2c7f8:	beab      	bkpt	0x00ab
   2c7fa:	4604      	mov	r4, r0
   2c7fc:	1c62      	adds	r2, r4, #1
   2c7fe:	4620      	mov	r0, r4
   2c800:	d005      	beq.n	2c80e <_read+0x36>
   2c802:	686b      	ldr	r3, [r5, #4]
   2c804:	1a30      	subs	r0, r6, r0
   2c806:	4403      	add	r3, r0
   2c808:	606b      	str	r3, [r5, #4]
   2c80a:	b005      	add	sp, #20
   2c80c:	bdf0      	pop	{r4, r5, r6, r7, pc}
   2c80e:	f7ff ffd5 	bl	2c7bc <checkerror.part.0>
   2c812:	1c43      	adds	r3, r0, #1
   2c814:	d1f5      	bne.n	2c802 <_read+0x2a>
   2c816:	b005      	add	sp, #20
   2c818:	bdf0      	pop	{r4, r5, r6, r7, pc}
   2c81a:	f7fa fc37 	bl	2708c <__errno>
   2c81e:	2309      	movs	r3, #9
   2c820:	6003      	str	r3, [r0, #0]
   2c822:	f04f 30ff 	mov.w	r0, #4294967295
   2c826:	e7f0      	b.n	2c80a <_read+0x32>

0002c828 <_swilseek>:
   2c828:	b5f0      	push	{r4, r5, r6, r7, lr}
   2c82a:	b083      	sub	sp, #12
   2c82c:	460d      	mov	r5, r1
   2c82e:	4614      	mov	r4, r2
   2c830:	f7ff ffa8 	bl	2c784 <findslot>
   2c834:	2800      	cmp	r0, #0
   2c836:	d03a      	beq.n	2c8ae <_swilseek+0x86>
   2c838:	2c02      	cmp	r4, #2
   2c83a:	d825      	bhi.n	2c888 <_swilseek+0x60>
   2c83c:	2c01      	cmp	r4, #1
   2c83e:	4606      	mov	r6, r0
   2c840:	d01f      	beq.n	2c882 <_swilseek+0x5a>
   2c842:	2c02      	cmp	r4, #2
   2c844:	d010      	beq.n	2c868 <_swilseek+0x40>
   2c846:	466f      	mov	r7, sp
   2c848:	6833      	ldr	r3, [r6, #0]
   2c84a:	240a      	movs	r4, #10
   2c84c:	e88d 0028 	stmia.w	sp, {r3, r5}
   2c850:	4620      	mov	r0, r4
   2c852:	4639      	mov	r1, r7
   2c854:	beab      	bkpt	0x00ab
   2c856:	4604      	mov	r4, r0
   2c858:	1c63      	adds	r3, r4, #1
   2c85a:	d01c      	beq.n	2c896 <_swilseek+0x6e>
   2c85c:	2c00      	cmp	r4, #0
   2c85e:	db23      	blt.n	2c8a8 <_swilseek+0x80>
   2c860:	6075      	str	r5, [r6, #4]
   2c862:	4628      	mov	r0, r5
   2c864:	b003      	add	sp, #12
   2c866:	bdf0      	pop	{r4, r5, r6, r7, pc}
   2c868:	af02      	add	r7, sp, #8
   2c86a:	6803      	ldr	r3, [r0, #0]
   2c86c:	f847 3d08 	str.w	r3, [r7, #-8]!
   2c870:	240c      	movs	r4, #12
   2c872:	4620      	mov	r0, r4
   2c874:	4639      	mov	r1, r7
   2c876:	beab      	bkpt	0x00ab
   2c878:	4604      	mov	r4, r0
   2c87a:	1c61      	adds	r1, r4, #1
   2c87c:	d00f      	beq.n	2c89e <_swilseek+0x76>
   2c87e:	4425      	add	r5, r4
   2c880:	e7e2      	b.n	2c848 <_swilseek+0x20>
   2c882:	6840      	ldr	r0, [r0, #4]
   2c884:	182d      	adds	r5, r5, r0
   2c886:	d5de      	bpl.n	2c846 <_swilseek+0x1e>
   2c888:	f7fa fc00 	bl	2708c <__errno>
   2c88c:	2316      	movs	r3, #22
   2c88e:	6003      	str	r3, [r0, #0]
   2c890:	f04f 35ff 	mov.w	r5, #4294967295
   2c894:	e7e5      	b.n	2c862 <_swilseek+0x3a>
   2c896:	f7ff ff91 	bl	2c7bc <checkerror.part.0>
   2c89a:	4604      	mov	r4, r0
   2c89c:	e7de      	b.n	2c85c <_swilseek+0x34>
   2c89e:	f7ff ff8d 	bl	2c7bc <checkerror.part.0>
   2c8a2:	1c42      	adds	r2, r0, #1
   2c8a4:	4604      	mov	r4, r0
   2c8a6:	d1ea      	bne.n	2c87e <_swilseek+0x56>
   2c8a8:	f04f 35ff 	mov.w	r5, #4294967295
   2c8ac:	e7d9      	b.n	2c862 <_swilseek+0x3a>
   2c8ae:	f7fa fbed 	bl	2708c <__errno>
   2c8b2:	2309      	movs	r3, #9
   2c8b4:	6003      	str	r3, [r0, #0]
   2c8b6:	f04f 35ff 	mov.w	r5, #4294967295
   2c8ba:	e7d2      	b.n	2c862 <_swilseek+0x3a>

0002c8bc <_lseek>:
   2c8bc:	f7ff bfb4 	b.w	2c828 <_swilseek>

0002c8c0 <_write>:
   2c8c0:	b5f0      	push	{r4, r5, r6, r7, lr}
   2c8c2:	b085      	sub	sp, #20
   2c8c4:	460c      	mov	r4, r1
   2c8c6:	4616      	mov	r6, r2
   2c8c8:	f7ff ff5c 	bl	2c784 <findslot>
   2c8cc:	b350      	cbz	r0, 2c924 <_write+0x64>
   2c8ce:	6803      	ldr	r3, [r0, #0]
   2c8d0:	9301      	str	r3, [sp, #4]
   2c8d2:	9402      	str	r4, [sp, #8]
   2c8d4:	4605      	mov	r5, r0
   2c8d6:	9603      	str	r6, [sp, #12]
   2c8d8:	2405      	movs	r4, #5
   2c8da:	af01      	add	r7, sp, #4
   2c8dc:	4620      	mov	r0, r4
   2c8de:	4639      	mov	r1, r7
   2c8e0:	beab      	bkpt	0x00ab
   2c8e2:	4604      	mov	r4, r0
   2c8e4:	1c63      	adds	r3, r4, #1
   2c8e6:	d016      	beq.n	2c916 <_write+0x56>
   2c8e8:	2c00      	cmp	r4, #0
   2c8ea:	db18      	blt.n	2c91e <_write+0x5e>
   2c8ec:	686a      	ldr	r2, [r5, #4]
   2c8ee:	1b30      	subs	r0, r6, r4
   2c8f0:	4402      	add	r2, r0
   2c8f2:	42a6      	cmp	r6, r4
   2c8f4:	606a      	str	r2, [r5, #4]
   2c8f6:	d001      	beq.n	2c8fc <_write+0x3c>
   2c8f8:	b005      	add	sp, #20
   2c8fa:	bdf0      	pop	{r4, r5, r6, r7, pc}
   2c8fc:	f7fa fbc6 	bl	2708c <__errno>
   2c900:	2513      	movs	r5, #19
   2c902:	4606      	mov	r6, r0
   2c904:	2400      	movs	r4, #0
   2c906:	4628      	mov	r0, r5
   2c908:	4621      	mov	r1, r4
   2c90a:	beab      	bkpt	0x00ab
   2c90c:	4605      	mov	r5, r0
   2c90e:	4620      	mov	r0, r4
   2c910:	6035      	str	r5, [r6, #0]
   2c912:	b005      	add	sp, #20
   2c914:	bdf0      	pop	{r4, r5, r6, r7, pc}
   2c916:	f7ff ff51 	bl	2c7bc <checkerror.part.0>
   2c91a:	4604      	mov	r4, r0
   2c91c:	e7e4      	b.n	2c8e8 <_write+0x28>
   2c91e:	f04f 30ff 	mov.w	r0, #4294967295
   2c922:	e7e9      	b.n	2c8f8 <_write+0x38>
   2c924:	f7fa fbb2 	bl	2708c <__errno>
   2c928:	2309      	movs	r3, #9
   2c92a:	6003      	str	r3, [r0, #0]
   2c92c:	f04f 30ff 	mov.w	r0, #4294967295
   2c930:	e7e2      	b.n	2c8f8 <_write+0x38>
   2c932:	bf00      	nop

0002c934 <_close>:
   2c934:	b570      	push	{r4, r5, r6, lr}
   2c936:	b082      	sub	sp, #8
   2c938:	4604      	mov	r4, r0
   2c93a:	f7ff ff23 	bl	2c784 <findslot>
   2c93e:	b310      	cbz	r0, 2c986 <_close+0x52>
   2c940:	3c01      	subs	r4, #1
   2c942:	2c01      	cmp	r4, #1
   2c944:	4606      	mov	r6, r0
   2c946:	d911      	bls.n	2c96c <_close+0x38>
   2c948:	ad02      	add	r5, sp, #8
   2c94a:	6833      	ldr	r3, [r6, #0]
   2c94c:	f845 3d04 	str.w	r3, [r5, #-4]!
   2c950:	2402      	movs	r4, #2
   2c952:	4620      	mov	r0, r4
   2c954:	4629      	mov	r1, r5
   2c956:	beab      	bkpt	0x00ab
   2c958:	4604      	mov	r4, r0
   2c95a:	1c63      	adds	r3, r4, #1
   2c95c:	4620      	mov	r0, r4
   2c95e:	d00f      	beq.n	2c980 <_close+0x4c>
   2c960:	b910      	cbnz	r0, 2c968 <_close+0x34>
   2c962:	f04f 33ff 	mov.w	r3, #4294967295
   2c966:	6033      	str	r3, [r6, #0]
   2c968:	b002      	add	sp, #8
   2c96a:	bd70      	pop	{r4, r5, r6, pc}
   2c96c:	4b09      	ldr	r3, [pc, #36]	; (2c994 <_close+0x60>)
   2c96e:	689a      	ldr	r2, [r3, #8]
   2c970:	691b      	ldr	r3, [r3, #16]
   2c972:	429a      	cmp	r2, r3
   2c974:	d1e8      	bne.n	2c948 <_close+0x14>
   2c976:	f04f 33ff 	mov.w	r3, #4294967295
   2c97a:	6003      	str	r3, [r0, #0]
   2c97c:	2000      	movs	r0, #0
   2c97e:	e7f3      	b.n	2c968 <_close+0x34>
   2c980:	f7ff ff1c 	bl	2c7bc <checkerror.part.0>
   2c984:	e7ec      	b.n	2c960 <_close+0x2c>
   2c986:	f7fa fb81 	bl	2708c <__errno>
   2c98a:	2309      	movs	r3, #9
   2c98c:	6003      	str	r3, [r0, #0]
   2c98e:	f04f 30ff 	mov.w	r0, #4294967295
   2c992:	e7e9      	b.n	2c968 <_close+0x34>
   2c994:	200029b4 	.word	0x200029b4

0002c998 <_getpid>:
   2c998:	2001      	movs	r0, #1
   2c99a:	4770      	bx	lr

0002c99c <_sbrk>:
   2c99c:	4a0e      	ldr	r2, [pc, #56]	; (2c9d8 <_sbrk+0x3c>)
   2c99e:	6813      	ldr	r3, [r2, #0]
   2c9a0:	b510      	push	{r4, lr}
   2c9a2:	b1ab      	cbz	r3, 2c9d0 <_sbrk+0x34>
   2c9a4:	4418      	add	r0, r3
   2c9a6:	4669      	mov	r1, sp
   2c9a8:	4288      	cmp	r0, r1
   2c9aa:	d809      	bhi.n	2c9c0 <_sbrk+0x24>
   2c9ac:	490b      	ldr	r1, [pc, #44]	; (2c9dc <_sbrk+0x40>)
   2c9ae:	4c0c      	ldr	r4, [pc, #48]	; (2c9e0 <_sbrk+0x44>)
   2c9b0:	6809      	ldr	r1, [r1, #0]
   2c9b2:	42a1      	cmp	r1, r4
   2c9b4:	d001      	beq.n	2c9ba <_sbrk+0x1e>
   2c9b6:	4288      	cmp	r0, r1
   2c9b8:	d802      	bhi.n	2c9c0 <_sbrk+0x24>
   2c9ba:	6010      	str	r0, [r2, #0]
   2c9bc:	4618      	mov	r0, r3
   2c9be:	bd10      	pop	{r4, pc}
   2c9c0:	f7fa fb64 	bl	2708c <__errno>
   2c9c4:	230c      	movs	r3, #12
   2c9c6:	6003      	str	r3, [r0, #0]
   2c9c8:	f04f 33ff 	mov.w	r3, #4294967295
   2c9cc:	4618      	mov	r0, r3
   2c9ce:	bd10      	pop	{r4, pc}
   2c9d0:	4b04      	ldr	r3, [pc, #16]	; (2c9e4 <_sbrk+0x48>)
   2c9d2:	6013      	str	r3, [r2, #0]
   2c9d4:	e7e6      	b.n	2c9a4 <_sbrk+0x8>
   2c9d6:	bf00      	nop
   2c9d8:	200029b0 	.word	0x200029b0
   2c9dc:	20000ab8 	.word	0x20000ab8
   2c9e0:	cafedead 	.word	0xcafedead
   2c9e4:	2000a444 	.word	0x2000a444

0002c9e8 <_swistat>:
   2c9e8:	b570      	push	{r4, r5, r6, lr}
   2c9ea:	460d      	mov	r5, r1
   2c9ec:	f7ff feca 	bl	2c784 <findslot>
   2c9f0:	b1b8      	cbz	r0, 2ca22 <_swistat+0x3a>
   2c9f2:	686b      	ldr	r3, [r5, #4]
   2c9f4:	f44f 6280 	mov.w	r2, #1024	; 0x400
   2c9f8:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
   2c9fc:	4606      	mov	r6, r0
   2c9fe:	606b      	str	r3, [r5, #4]
   2ca00:	62ea      	str	r2, [r5, #44]	; 0x2c
   2ca02:	240c      	movs	r4, #12
   2ca04:	4620      	mov	r0, r4
   2ca06:	4631      	mov	r1, r6
   2ca08:	beab      	bkpt	0x00ab
   2ca0a:	4604      	mov	r4, r0
   2ca0c:	1c62      	adds	r2, r4, #1
   2ca0e:	4620      	mov	r0, r4
   2ca10:	d002      	beq.n	2ca18 <_swistat+0x30>
   2ca12:	6128      	str	r0, [r5, #16]
   2ca14:	2000      	movs	r0, #0
   2ca16:	bd70      	pop	{r4, r5, r6, pc}
   2ca18:	f7ff fed0 	bl	2c7bc <checkerror.part.0>
   2ca1c:	1c43      	adds	r3, r0, #1
   2ca1e:	d1f8      	bne.n	2ca12 <_swistat+0x2a>
   2ca20:	e7f9      	b.n	2ca16 <_swistat+0x2e>
   2ca22:	f7fa fb33 	bl	2708c <__errno>
   2ca26:	2309      	movs	r3, #9
   2ca28:	6003      	str	r3, [r0, #0]
   2ca2a:	f04f 30ff 	mov.w	r0, #4294967295
   2ca2e:	bd70      	pop	{r4, r5, r6, pc}

0002ca30 <_fstat>:
   2ca30:	b538      	push	{r3, r4, r5, lr}
   2ca32:	223c      	movs	r2, #60	; 0x3c
   2ca34:	460c      	mov	r4, r1
   2ca36:	4605      	mov	r5, r0
   2ca38:	4608      	mov	r0, r1
   2ca3a:	2100      	movs	r1, #0
   2ca3c:	f7fb fa0e 	bl	27e5c <memset>
   2ca40:	4621      	mov	r1, r4
   2ca42:	4628      	mov	r0, r5
   2ca44:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   2ca48:	f7ff bfce 	b.w	2c9e8 <_swistat>

0002ca4c <_isatty>:
   2ca4c:	b570      	push	{r4, r5, r6, lr}
   2ca4e:	f7ff fe99 	bl	2c784 <findslot>
   2ca52:	4605      	mov	r5, r0
   2ca54:	b190      	cbz	r0, 2ca7c <_isatty+0x30>
   2ca56:	2409      	movs	r4, #9
   2ca58:	4620      	mov	r0, r4
   2ca5a:	4629      	mov	r1, r5
   2ca5c:	beab      	bkpt	0x00ab
   2ca5e:	4604      	mov	r4, r0
   2ca60:	2c01      	cmp	r4, #1
   2ca62:	d009      	beq.n	2ca78 <_isatty+0x2c>
   2ca64:	f7fa fb12 	bl	2708c <__errno>
   2ca68:	2513      	movs	r5, #19
   2ca6a:	4606      	mov	r6, r0
   2ca6c:	2400      	movs	r4, #0
   2ca6e:	4628      	mov	r0, r5
   2ca70:	4621      	mov	r1, r4
   2ca72:	beab      	bkpt	0x00ab
   2ca74:	4605      	mov	r5, r0
   2ca76:	6035      	str	r5, [r6, #0]
   2ca78:	4620      	mov	r0, r4
   2ca7a:	bd70      	pop	{r4, r5, r6, pc}
   2ca7c:	f7fa fb06 	bl	2708c <__errno>
   2ca80:	2209      	movs	r2, #9
   2ca82:	462c      	mov	r4, r5
   2ca84:	6002      	str	r2, [r0, #0]
   2ca86:	e7f7      	b.n	2ca78 <_isatty+0x2c>

0002ca88 <_exit>:
   2ca88:	f04f 31ff 	mov.w	r1, #4294967295
   2ca8c:	f000 b800 	b.w	2ca90 <_kill>

0002ca90 <_kill>:
   2ca90:	2906      	cmp	r1, #6
   2ca92:	b530      	push	{r4, r5, lr}
   2ca94:	bf0c      	ite	eq
   2ca96:	4d04      	ldreq	r5, [pc, #16]	; (2caa8 <_kill+0x18>)
   2ca98:	4d04      	ldrne	r5, [pc, #16]	; (2caac <_kill+0x1c>)
   2ca9a:	2418      	movs	r4, #24
   2ca9c:	4620      	mov	r0, r4
   2ca9e:	4629      	mov	r1, r5
   2caa0:	beab      	bkpt	0x00ab
   2caa2:	4604      	mov	r4, r0
   2caa4:	4620      	mov	r0, r4
   2caa6:	bd30      	pop	{r4, r5, pc}
   2caa8:	00020023 	.word	0x00020023
   2caac:	00020026 	.word	0x00020026

0002cab0 <_init>:
   2cab0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   2cab2:	bf00      	nop
   2cab4:	bcf8      	pop	{r3, r4, r5, r6, r7}
   2cab6:	bc08      	pop	{r3}
   2cab8:	469e      	mov	lr, r3
   2caba:	4770      	bx	lr

0002cabc <_fini>:
   2cabc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   2cabe:	bf00      	nop
   2cac0:	bcf8      	pop	{r3, r4, r5, r6, r7}
   2cac2:	bc08      	pop	{r3}
   2cac4:	469e      	mov	lr, r3
   2cac6:	4770      	bx	lr

0002cac8 <__init_array_start>:
   2cac8:	0002a651 	.word	0x0002a651

0002cacc <__frame_dummy_init_array_entry>:
   2cacc:	00004289 000042d5 00006299 0000839d     .B...B...b......
   2cadc:	0000874d 0000973d 0000a1e1 0000c691     M...=...........
   2caec:	0000dea5 0000ebcd 0000ef45 00011ed9     ........E.......
   2cafc:	00011fbd 0001cef9                       ........

0002cb04 <__do_global_dtors_aux_fini_array_entry>:
   2cb04:	00004265                                eB..

0002cb08 <__fini_array_end>:
   2cb08:	50434844 	.word	0x50434844
   2cb0c:	69616620 	.word	0x69616620
   2cb10:	0064656c 	.word	0x0064656c
   2cb14:	64616552 	.word	0x64616552
   2cb18:	6f662079 	.word	0x6f662079
   2cb1c:	69642072 	.word	0x69642072
   2cb20:	766f6373 	.word	0x766f6373
   2cb24:	00797265 	.word	0x00797265
   2cb28:	74696157 	.word	0x74696157
   2cb2c:	20676e69 	.word	0x20676e69
   2cb30:	20726f66 	.word	0x20726f66
   2cb34:	65687445 	.word	0x65687445
   2cb38:	74656e72 	.word	0x74656e72
   2cb3c:	6e696c20 	.word	0x6e696c20
   2cb40:	2e2e2e6b 	.word	0x2e2e2e6b
   2cb44:	00000000 	.word	0x00000000
   2cb48:	3a746f47 	.word	0x3a746f47
   2cb4c:	00000020 	.word	0x00000020
   2cb50:	43534944 	.word	0x43534944
   2cb54:	5245564f 	.word	0x5245564f
   2cb58:	454c435f 	.word	0x454c435f
   2cb5c:	4f435241 	.word	0x4f435241
   2cb60:	00004552 	.word	0x00004552
   2cb64:	54524f50 	.word	0x54524f50
   2cb68:	0000003d 	.word	0x0000003d
   2cb6c:	63736944 	.word	0x63736944
   2cb70:	7265766f 	.word	0x7265766f
   2cb74:	74206465 	.word	0x74206465
   2cb78:	696d7265 	.word	0x696d7265
   2cb7c:	206c616e 	.word	0x206c616e
   2cb80:	00207461 	.word	0x00207461
   2cb84:	41454c43 	.word	0x41454c43
   2cb88:	524f4352 	.word	0x524f4352
   2cb8c:	43415f45 	.word	0x43415f45
   2cb90:	0000004b 	.word	0x0000004b
   2cb94:	6e756f43 	.word	0x6e756f43
   2cb98:	20726574 	.word	0x20726574
   2cb9c:	6425203d 	.word	0x6425203d
   2cba0:	00000000 	.word	0x00000000

0002cba4 <_ZTVN9ClearCore7ISerialE>:
	...
   2cbac:	0001cd7d 0001cd7d 0001cd7d 0001cd7d     }...}...}...}...
   2cbbc:	0001cd7d 0001cd7d 0001cd7d 0001cd7d     }...}...}...}...
   2cbcc:	0001cd7d 0001cd7d 0001cd7d 0001cd7d     }...}...}...}...
   2cbdc:	0001cd7d 0001cd7d 0001cd7d 0001cd7d     }...}...}...}...
   2cbec:	0001cd7d 0001cd7d                       }...}...

0002cbf4 <_ZTVN9ClearCore9SerialUsbE>:
	...
   2cbfc:	00004a01 000049f5 00004a19 00004a25     .J...I...J..%J..
   2cc0c:	00004a31 00004a3d 00004a49 00004a55     1J..=J..IJ..UJ..
   2cc1c:	00004a61 00004a6d 00004a79 00004a01     aJ..mJ..yJ...J..
   2cc2c:	00004a0d 00004a0d 00004979 00004985     .J...J..yI...I..
   2cc3c:	00004989 00004995 000049a1 000049ad     .I...I...I...I..
   2cc4c:	000049c1 00004a85 00004aa9 00004ad9     .I...J...J...J..
   2cc5c:	000049cd 000049d9 000049e9 fffffffc     .I...I...I......
   2cc6c:	00000000 000049a5 000049b9 000049c5     .....I...I...I..
   2cc7c:	00004aa1 00004ad1 00004b19 000049d1     .J...J...K...I..
   2cc8c:	00004971 000049ed 000049e1 008061fc     qI...I...I...a..
   2cc9c:	00806010 00806014 00806018              .`...`...`..

0002cca8 <_ZTVN9ClearCore12SdCardDriverE>:
	...
   2ccb0:	00010161 00010171 0001108d 000103e9     a...q...........
   2ccc0:	00010295 000062a9 00010185 000101bd     .....b..........
   2ccd0:	000101fd 000101d9 000101e9 0001023d     ............=...
   2cce0:	00010159 000062b1 00010501 000062ad     Y....b.......b..
   2ccf0:	000106d5 000105f1                       ........

0002ccf8 <_ZTVN9ClearCore10XBeeDriverE>:
	...
   2cd00:	00010161 00010171 0001108d 000103e9     a...q...........
   2cd10:	00010295 000062a9 00010185 000101bd     .....b..........
   2cd20:	000101fd 000101d9 000101e9 0001023d     ............=...
   2cd30:	00010159 000062b1 00010501 000062ad     Y....b.......b..
   2cd40:	000106d5 000105f1 40003c00 4101a000     .........<.@...A
   2cd50:	43001400                                ...C

0002cd54 <_ZN9ClearCore10hBridgeConE>:
   2cd54:	2000141c 200014a0                       ... ... 

0002cd5c <_ZN9ClearCore15MotorConnectorsE>:
   2cd5c:	20000c10 20000d58 20000ea0 20000fe8     ... X.. ... ... 

0002cd6c <_ZN9ClearCoreL10ConnectorsE>:
   2cd6c:	20001290 200012fc 2000135c 200013bc     ... ... \.. ... 
   2cd7c:	2000141c 200014a0 20001200 20001230     ... ... ... 0.. 
   2cd8c:	20001260 20000bcc 20001134 20001178     `.. ... 4.. x.. 
   2cd9c:	200011bc 20001524 20000c10 20000d58     ... $.. ... X.. 
   2cdac:	20000ea0 20000fe8 20001684 200017dc     ... ... ... ... 
   2cdbc:	20001534                                4.. 

0002cdc0 <_ZN9ClearCoreL10MicroSD_SSE>:
   2cdc0:	0504003d ffffff00 ffffffff 00ff0500     =...............

0002cdd0 <_ZN9ClearCoreL10XBee_Rx_INE>:
   2cdd0:	08180150 ffffff00 ffff0102 00ffffff     P...............

0002cde0 <_ZN9ClearCoreL11Com0_RTS_SSE>:
   2cde0:	02120142 ffffff00 ffff0207 00040001     B...............

0002cdf0 <_ZN9ClearCoreL11Com0_RX_SCKE>:
   2cdf0:	04140144 ffffff00 ffff0107 00060201     D...............

0002ce00 <_ZN9ClearCoreL11Com1_RTS_SSE>:
   2ce00:	0a0a001c ffffff00 00010200 00040200     ................

0002ce10 <_ZN9ClearCoreL11Com1_RX_SCKE>:
   2ce10:	0909001b ff03ff00 01000100 00ff0100     ................

0002ce20 <_ZN9ClearCoreL11IN06n_QuadAE>:
   2ce20:	00100238 ffffff01 ffff0006 00ff0000     8...............

0002ce30 <_ZN9ClearCoreL11IN07n_QuadBE>:
   2ce30:	01110239 ffffff01 ffff0106 00ff0100     9...............

0002ce40 <_ZN9ClearCoreL11IN08n_QuadIE>:
   2ce40:	0212023a ffffff01 ffff0206 00ff0200     :...............

0002ce50 <_ZN9ClearCoreL11IN09n_AIN09E>:
   2ce50:	0707010e ff09ff01 ffffffff 00ffffff     ................

0002ce60 <_ZN9ClearCoreL11IN10n_AIN10E>:
   2ce60:	0606010d ff08ff01 ffffffff 00ffffff     ................

0002ce70 <_ZN9ClearCoreL11IN11n_AIN11E>:
   2ce70:	0505010a ff07ff01 ffffffff 00ffffff     ................

0002ce80 <_ZN9ClearCoreL11IN12n_AIN12E>:
   2ce80:	03030206 ff05ff01 ffffffff 00ffffff     ................

0002ce90 <_ZN9ClearCoreL11MicroSD_SCKE>:
   2ce90:	09090110 ff01ff00 01040104 00ffffff     ................

0002cea0 <_ZN9ClearCoreL11XBee_CTS_INE>:
   2cea0:	09190253 ffffff00 ffff0302 00ffffff     S...............

0002ceb0 <_ZN9ClearCoreL11XBee_Tx_OUTE>:
   2ceb0:	09190151 ffffff00 ffff0002 00ffffff     Q...............

0002cec0 <_ZN9ClearCoreL12Com0_TX_MOSIE>:
   2cec0:	05150145 ffffff00 ffff0007 00070301     E...............

0002ced0 <_ZN9ClearCoreL12Com1_TX_MOSIE>:
   2ced0:	ff08001a ff02ff00 00000000 00ff0000     ................

0002cee0 <_ZN9ClearCoreL12MicroSD_MISOE>:
   2cee0:	0a0a0120 ffffff00 00050204 00040400      ...............

0002cef0 <_ZN9ClearCoreL12MicroSD_MOSIE>:
   2cef0:	0808010f ff00ff00 00040004 00ffffff     ................

0002cf00 <_ZN9ClearCoreL12Mtr0_An_SCTxE>:
   2cf00:	07170049 ffffff00 01040005 00ff0701     I...............

0002cf10 <_ZN9ClearCoreL12XBee_RTS_OUTE>:
   2cf10:	08180252 ffffff00 ffff0202 00ffffff     R...............

0002cf20 <_ZN9ClearCoreL13Com0_CTS_MISOE>:
   2cf20:	03130143 ffffff00 ffff0307 00050101     C...............

0002cf30 <_ZN9ClearCoreL13Com1_CTS_MISOE>:
   2cf30:	0b0b001d ffffff00 01010300 00050300     ................

0002cf40 <_ZN9ClearCoreL13IN00n_Aout00nE>:
   2cf40:	05050012 01ffff00 0100ffff 00ffffff     ................

0002cf50 <_ZN9ClearCoreL14Mtr0_HLFB_SCRxE>:
   2cf50:	04140046 ffffff01 00070205 00ff0401     F...............

0002cf60 <_ZN9ClearCoreL14OUT04_ENABLE04E>:
   2cf60:	00100140 ffffff00 00060005 00020003     @...............

0002cf70 <_ZN9ClearCoreL14OUT05_ENABLE05E>:
   2cf70:	03030164 ffffff00 0106ffff 00ffffff     d...............

0002cf80 <_ZN9ClearCoreL17Polarity04_PWM04AE>:
   2cf80:	0e0e0124 ffffff00 00050204 00000004     $...............

0002cf90 <_ZN9ClearCoreL17Polarity05_PWM05AE>:
   2cf90:	0c0c0122 ffffff00 00040004 00060003     "...............

0002cfa0 <_ZN9ClearCoreL18Mtr2_B_Sdrvr2_PWMBE>:
   2cfa0:	0d0d022b ffffff00 ffff0107 00ff0300     +...............

0002cfb0 <_ZN9ClearCoreL18Mtr3_B_Sdrvr3_PWMBE>:
   2cfb0:	0a0a0228 ffffff00 ffff0206 00ff0000     (...............

0002cfc0 <_ZN9ClearCoreL18Polarity04S_PWM04BE>:
   2cfc0:	0f0f0125 ffffff00 01050304 00010104     %...............

0002cfd0 <_ZN9ClearCoreL18Polarity05S_PWM05BE>:
   2cfd0:	0d0d0123 ffffff00 01040104 00070103     #...............

0002cfe0 <_ZN9ClearCoreL19Mtr2_An_Sdrvr2_PWMAE>:
   2cfe0:	06160048 ffffff00 00040003 00ff0601     H...............

0002cff0 <_ZN9ClearCoreL19Mtr3_An_Sdrvr3_PWMAE>:
   2cff0:	00100034 ffffff00 00020001 00020001     4...............

0002d000 <_ZN9ClearCoreL21Mtr2_HLFB_Sdrvr2_TrigE>:
   2d000:	0a1a0254 ffffff01 ffffffff 00ffffff     T...............

0002d010 <_ZN9ClearCoreL21Mtr3_HLFB_Sdrvr3_TrigE>:
   2d010:	0f1f0160 ffffff01 0100ffff 00ff0104     `...............

0002d020 <_ZN9ClearCoreL5IN01nE>:
   2d020:	02110107 00ffff00 ffffffff 00ffffff     ................

0002d030 <_ZN9ClearCoreL5IN02nE>:
   2d030:	03030008 ffffff00 ffffffff 00ffffff     ................

0002d040 <_ZN9ClearCoreL5IN03nE>:
   2d040:	04150211 ffffff00 0000ffff 00ffffff     ................

0002d050 <_ZN9ClearCoreL5IN04nE>:
   2d050:	0b1b0255 ffffff00 ffff0001 00ffffff     U...............

0002d060 <_ZN9ClearCoreL5IN05nE>:
   2d060:	0313023b ffffff00 ffff0306 00ff0300     ;...............

0002d070 <_ZN9ClearCoreL5OUT00E>:
   2d070:	00000001 ffffff00 0002ffff 00ffffff     ................

0002d080 <_ZN9ClearCoreL5OUT01E>:
   2d080:	01010002 ffffff00 0102ffff 00ffffff     ................

0002d090 <_ZN9ClearCoreL5OUT02E>:
   2d090:	06060013 ffffff00 0001ffff 00ffffff     ................

0002d0a0 <_ZN9ClearCoreL5OUT03E>:
   2d0a0:	07070014 ffffff00 0101ffff 00ffffff     ................

0002d0b0 <_ZN9ClearCoreL6Aout00E>:
   2d0b0:	02020007 01ffff00 0100ffff 00ffffff     ................

0002d0c0 <_ZN9ClearCoreL6Mtr0_BE>:
   2d0c0:	0e0e022c ffffff00 ffff0207 00ff0400     ,...............

0002d0d0 <_ZN9ClearCoreL6Mtr1_BE>:
   2d0d0:	0f0f022d ffffff00 ffff0307 00ff0500     -...............

0002d0e0 <_ZN9ClearCoreL7Mtr1_AnE>:
   2d0e0:	05150047 ffffff00 01070305 00ff0501     G...............

0002d0f0 <_ZN9ClearCoreL9Mtr1_HLFBE>:
   2d0f0:	0b0b0121 ffffff01 0105ffff 00050500     !...............
   2d100:	00000080 00000040 00000020 00000010     ....@... .......
   2d110:	00000008 00000004 01000000 02000000     ................
   2d120:	04000000 08000000 00800000 00400000     ..............@.
   2d130:	00200000 00004000 00008000 00040000     .. ..@..........
   2d140:	00080000                                ....

0002d144 <_ZTVN9ClearCore13StepGeneratorE>:
	...
   2d14c:	0000a1f1 0000a265 0001cd7d              ....e...}...

0002d158 <_ZN9ClearCoreL11IN06n_QuadAE>:
   2d158:	00100238 ffffff01 ffff0006 00ff0000     8...............

0002d168 <_ZN9ClearCoreL11IN07n_QuadBE>:
   2d168:	01110239 ffffff01 ffff0106 00ff0100     9...............

0002d178 <_ZN9ClearCoreL11IN08n_QuadIE>:
   2d178:	0212023a ffffff01 ffff0206 00ff0200     :...............
   2d188:	752f2e2e 642f6273 63697665 73752f65     ../usb/device/us
   2d198:	2e636462 00000063 682f2e2e 752f6c61     bdc.c...../hal/u
   2d1a8:	736c6974 6372732f 6974752f 6c5f736c     tils/src/utils_l
   2d1b8:	2e747369 00000063 0002d200 0002d1f0     ist.c...........
   2d1c8:	0002d1d0 0002d1e0                       ........

0002d1d0 <_ZN9ClearCoreL11Sdrvr2_iMonE>:
   2d1d0:	01010204 ff0bff00 ffffffff 00ffffff     ................

0002d1e0 <_ZN9ClearCoreL11Sdrvr3_iMonE>:
   2d1e0:	00000203 ff0aff00 ffffffff 00ffffff     ................

0002d1f0 <_ZN9ClearCoreL24Vsupply_MON_IO_4and5_RSTE>:
   2d1f0:	02020205 ff04ff00 ffffffff 00ffffff     ................

0002d200 <_ZN9ClearCoreL9_5VOB_MONE>:
   2d200:	04040109 ff06ff00 ffffffff 00ffffff     ................

0002d210 <_ZTVN9ClearCore21DigitalInOutAnalogOutE>:
	...
   2d218:	0000c6ed 0000c91d 0000c6f1 0000c6f5     ................
   2d228:	0000ca15 0000ca31 0000c6e5 0000c6dd     ....1...........
   2d238:	0000c905 0000cacd                       ........

0002d240 <_ZTVN9ClearCore17DigitalInAnalogInE>:
	...
   2d248:	0000cb71 0000cb81 0000cb75 0000cb79     q.......u...y...
   2d258:	0000cdd5 0000cb7d 0000cb6d 0000c6dd     ....}...m.......
   2d268:	0000cca9 0000cd21                       ....!...

0002d270 <_ZTVN9ClearCore12DigitalInOutE>:
	...
   2d278:	0000ce1d 0000cef1 0000ce21 0000ce25     ........!...%...
   2d288:	0000d38d 0000ce39 0000c6e5 0000c6dd     ....9...........
   2d298:	0000d181 0000d3cd                       ........

0002d2a0 <_ZZN9ClearCore12DigitalInOutC4ENS_13ShiftRegister5MasksEPK15PeripheralRouteS5_bE10tc_modules>:
   2d2a0:	40003800 40003c00 4101a000 4101c000     .8.@.<.@...A...A
   2d2b0:	42001400 42001800 43001400 43001800     ...B...B...C...C

0002d2c0 <_ZTVN9ClearCore9ConnectorE>:
	...
   2d2c8:	0000d441 0001cd7d 0001cd7d 0001cd7d     A...}...}...}...
   2d2d8:	0001cd7d 0001cd7d 0001cd7d 00004971     }...}...}...qI..
   2d2e8:	0001cd7d 0001cd7d                       }...}...

0002d2f0 <_ZTVN9ClearCore9DigitalInE>:
	...
   2d2f8:	0000d445 0000d449 0000d455 0000d459     E...I...U...Y...
   2d308:	0000d461 0000d45d 0000cb6d 0000c6dd     a...]...m.......
   2d318:	0000d555 0000d489                       U.......

0002d320 <_ZTVN9ClearCore19DigitalInOutHBridgeE>:
	...
   2d328:	0000d7b5 0000dc4d 0000d7b9 0000d7bd     ....M...........
   2d338:	0000d881 0000d8bd 0000c6e5 0000c6dd     ................
   2d348:	0000da71 0000db85                       q.......

0002d350 <_ZZN9ClearCore19DigitalInOutHBridgeC4ENS_13ShiftRegister5MasksEPK15PeripheralRouteS5_S5_S5_4IRQnbE11tcc_modules>:
   2d350:	41016000 41018000 42000c00 42001000     .`.A...A...B...B
   2d360:	43001000                                ...C

0002d364 <_ZTVN9ClearCore7CcioPinE>:
	...
   2d36c:	0000ebdd 0000ec39 0000ebe1 0000ebe5     ....9...........
   2d37c:	0000eca9 0000ed05 0000ece5 00004971     ............qI..
   2d38c:	0000ebf5 0000ebf9                       ........

0002d394 <CSWTCH.95>:
   2d394:	02030406 00000002                       ........

0002d39c <_ZN9ClearCoreL11tcc_modulesE>:
   2d39c:	41016000 41018000 42000c00 42001000     .`.A...A...B...B
   2d3ac:	43001000                                ...C

0002d3b0 <_ZTVN9ClearCore11MotorDriverE>:
	...
   2d3b8:	0000ef65 0000ef69 0000ef55 0000ef59     e...i...U...Y...
   2d3c8:	0000d461 0000d45d 0000ef5d 0000c6dd     a...]...].......
   2d3d8:	0000f5d1 0000fe05 0000fc2d 0000fd25     ........-...%...
   2d3e8:	0000f0cd ffffffd0 00000000 0000fd1d     ................
   2d3f8:	0000fdfd 0000f11d                       ........

0002d400 <_ZZN9ClearCore11MotorDriver10InitializeE13ClearCorePinsE10tc_modules>:
   2d400:	40003800 40003c00 4101a000 4101c000     .8.@.<.@...A...A
   2d410:	42001400 42001800 43001400 43001800     ...B...B...C...C

0002d420 <_ZTVN9ClearCore10SerialBaseE>:
	...
   2d428:	00010161 00010171 0001108d 000103e9     a...q...........
   2d438:	00010295 000062a9 00010185 000101bd     .....b..........
   2d448:	000101fd 000101d9 000101e9 0001023d     ............=...
   2d458:	00010159 000062b1 00010501 000062ad     Y....b.......b..
   2d468:	000106d5 000105f1                       ........

0002d470 <_ZZN9ClearCore10SerialBaseC4EPK15PeripheralRouteS3_S3_S3_hE16sercom_instances>:
   2d470:	40003000 40003400 41012000 41014000     .0.@.4.@. .A.@.A
   2d480:	43000000 43000400 43000800 43000c00     ...C...C...C...C

0002d490 <_ZTVN9ClearCore12SerialDriverE>:
	...
   2d498:	00010161 00010171 0001175d 000117b1     a...q...].......
   2d4a8:	000115ed 000062a9 00010185 000101bd     .....b..........
   2d4b8:	000101fd 000101d9 000101e9 0001023d     ............=...
   2d4c8:	00010159 000062b1 00010501 000062ad     Y....b.......b..
   2d4d8:	000106d5 000105f1 00011541 00011609     ........A.......
   2d4e8:	00011551 0001155d 0001156d 000118f5     Q...]...m.......
   2d4f8:	00011581 000117fd 0001158d fffffebc     ................
   2d508:	00000000 00011549 00011755 00011555     ....I...U...U...
   2d518:	00011565 00011579 000119a9 00011585     e...y...........
   2d528:	00004971 00011591 000118ed              qI..........

0002d534 <_ZTVN9ClearCore9LedDriverE>:
	...
   2d53c:	000119b1 000119b5 000119c1 000119c5     ................
   2d54c:	000119d9 000119f1 000119c9 00004971     ............qI..
   2d55c:	000119cd 000119d1                       ........

0002d564 <_usb_ep_cfgs>:
   2d564:	20001fdc 00000000 00000040 2000201c     ... ....@.... . 
   2d574:	00000000 00000040 2000205c 00000000     ....@...\ . ....
   2d584:	00000040                                @...

0002d588 <ip_addr_broadcast>:
   2d588:	ffffffff                                ....

0002d58c <ip_addr_any>:
   2d58c:	00000000                                ....

0002d590 <memp_RAW_PCB>:
   2d590:	0004001c 20003a9c 200028d4              .....:. .(. 

0002d59c <memp_pools>:
   2d59c:	0002d590 0002d624 0002d618 0002d60c     ....$...........
   2d5ac:	0002d600 0002d5f4 0002d5e8 0002d5dc     ................
   2d5bc:	0002d5d0 0002d5c4                       ........

0002d5c4 <memp_PBUF_POOL>:
   2d5c4:	001005fc 20003c14 200028d8              .....<. .(. 

0002d5d0 <memp_PBUF>:
   2d5d0:	00100010 20009d44 200028dc              ....D.. .(. 

0002d5dc <memp_SYS_TIMEOUT>:
   2d5dc:	00070010 2000a364 200028e0              ....d.. .(. 

0002d5e8 <memp_FRAG_PBUF>:
   2d5e8:	000f0018 20009bd8 200028e4              ....... .(. 

0002d5f4 <memp_REASSDATA>:
   2d5f4:	00050020 20009f2c 200028e8               ...,.. .(. 

0002d600 <memp_TCP_SEG>:
   2d600:	00100010 20003b10 200028ec              .....;. .(. 

0002d60c <memp_TCP_PCB_LISTEN>:
   2d60c:	0008001c 20009e48 200028f0              ....H.. .(. 

0002d618 <memp_TCP_PCB>:
   2d618:	0005009c 2000a054 200028f4              ....T.. .(. 

0002d624 <memp_UDP_PCB>:
   2d624:	00040020 20009fd0 200028f8               ...... .(. 

0002d630 <tcp_pcb_lists>:
   2d630:	2000a3f0 2000a3f4 2000a3e8 2000a3f8     ... ... ... ... 

0002d640 <tcp_persist_backoff>:
   2d640:	180c0603 00786030                       ....0`x.

0002d648 <tcp_backoff>:
   2d648:	04030201 07070605 07070707 00000007     ................

0002d658 <tcp_state_str>:
   2d658:	0002d684 0002d68c 0002d694 0002d6a0     ................
   2d668:	0002d6ac 0002d6b8 0002d6c4 0002d6d0     ................
   2d678:	0002d6dc 0002d6e4 0002d6f0 534f4c43     ............CLOS
   2d688:	00004445 5453494c 00004e45 5f4e5953     ED..LISTEN..SYN_
   2d698:	544e4553 00000000 5f4e5953 44564352     SENT....SYN_RCVD
   2d6a8:	00000000 41545345 53494c42 00444548     ....ESTABLISHED.
   2d6b8:	5f4e4946 54494157 0000315f 5f4e4946     FIN_WAIT_1..FIN_
   2d6c8:	54494157 0000325f 534f4c43 41575f45     WAIT_2..CLOSE_WA
   2d6d8:	00005449 534f4c43 00474e49 5453414c     IT..CLOSING.LAST
   2d6e8:	4b43415f 00000000 454d4954 4941575f     _ACK....TIME_WAI
   2d6f8:	00000054                                T...

0002d6fc <lwip_cyclic_timers>:
   2d6fc:	000000fa 00018921 000003e8 0001c6e9     ....!...........
   2d70c:	000003e8 000162e1 0000ea60 00015019     .....b..`....P..
   2d71c:	000001f4 000151ed 00000064 0001bd21     .....Q..d...!...
   2d72c:	000003e8 00013c09                       .....<..

0002d734 <lwip_num_cyclic_timers>:
   2d734:	00000007                                ....

0002d738 <ethbroadcast>:
   2d738:	ffffffff 0000ffff                       ........

0002d740 <ethzero>:
	...

0002d748 <sinTable_q15>:
   2d748:	01920000 04b60324 07d90648 0afb096b     ....$...H...k...
   2d758:	0e1c0c8c 113a0fab 145512c8 176e15e2     ......:...U...n.
   2d768:	1a8318f9 1d931c0c 209f1f1a 23a72224     ........... $".#
   2d778:	26a82528 29a42827 2c992b1f 2f872e11     (%.&'(.).+.,.../
   2d788:	326e30fc 354e33df 382536ba 3af3398d     .0n2.3N5.6%8.9.:
   2d798:	3db83c57 40743f17 432641ce 45cd447b     W<.=.?t@.A&C{D.E
   2d7a8:	486a471d 4afb49b4 4d814c40 4ffb4ec0     .GjH.I.J@L.M.N.O
   2d7b8:	52695134 54ca539b 571e55f6 59645843     4QiR.S.T.U.WCXdY
   2d7c8:	5b9d5a82 5dc85cb4 5fe45ed7 61f160ec     .Z.[.\.].^._.`.a
   2d7d8:	63ef62f2 65de64e9 67bd66d0 698c68a7     .b.c.d.e.f.g.h.i
   2d7e8:	6b4b6a6e 6cf96c24 6e976dca 70236f5f     njKk$l.l.m.n_o#p
   2d7f8:	719e70e3 73087255 746073b6 75a67505     .p.qUr.s.s`t.u.u
   2d808:	76d97642 77fb776c 790a7885 7a06798a     Bv.vlw.w.x.y.y.z
   2d818:	7aef7a7d 7bc67b5d 7c897c2a 7d3a7ce4     }z.z]{.{*|.|.|:}
   2d828:	7dd67d8a 7e607e1e 7ed67e9d 7f387f0a     .}.}.~`~.~.~..8.
   2d838:	7f877f62 7fc27fa7 7fea7fd9 7ffe7ff6     b...............
   2d848:	7ffe7fff 7fea7ff6 7fc27fd9 7f877fa7     ................
   2d858:	7f387f62 7ed67f0a 7e607e9d 7dd67e1e     b.8....~.~`~.~.}
   2d868:	7d3a7d8a 7c897ce4 7bc67c2a 7aef7b5d     .}:}.|.|*|.{]{.z
   2d878:	7a067a7d 790a798a 77fb7885 76d9776c     }z.z.y.y.x.wlw.v
   2d888:	75a67642 74607505 730873b6 719e7255     Bv.u.u`t.s.sUr.q
   2d898:	702370e3 6e976f5f 6cf96dca 6b4b6c24     .p#p_o.n.m.l$lKk
   2d8a8:	698c6a6e 67bd68a7 65de66d0 63ef64e9     nj.i.h.g.f.e.d.c
   2d8b8:	61f162f2 5fe460ec 5dc85ed7 5b9d5cb4     .b.a.`._.^.].\.[
   2d8c8:	59645a82 571e5843 54ca55f6 5269539b     .ZdYCX.W.U.T.SiR
   2d8d8:	4ffb5134 4d814ec0 4afb4c40 486a49b4     4Q.O.N.M@L.J.IjH
   2d8e8:	45cd471d 4326447b 407441ce 3db83f17     .G.E{D&C.At@.?.=
   2d8f8:	3af33c57 3825398d 354e36ba 326e33df     W<.:.9%8.6N5.3n2
   2d908:	2f8730fc 2c992e11 29a42b1f 26a82827     .0./...,.+.)'(.&
   2d918:	23a72528 209f2224 1d931f1a 1a831c0c     (%.#$". ........
   2d928:	176e18f9 145515e2 113a12c8 0e1c0fab     ..n...U...:.....
   2d938:	0afb0c8c 07d9096b 04b60648 01920324     ....k...H...$...
   2d948:	fe6e0000 fb4afcdc f827f9b8 f505f695     ..n...J...'.....
   2d958:	f1e4f374 eec6f055 ebabed38 e892ea1e     t...U...8.......
   2d968:	e57de707 e26de3f4 df61e0e6 dc59dddc     ..}...m...a...Y.
   2d978:	d958dad8 d65cd7d9 d367d4e1 d079d1ef     ..X...\...g...y.
   2d988:	cd92cf04 cab2cc21 c7dbc946 c50dc673     ....!...F...s...
   2d998:	c248c3a9 bf8cc0e9 bcdabe32 ba33bb85     ..H.....2.....3.
   2d9a8:	b796b8e3 b505b64c b27fb3c0 b005b140     ....L.......@...
   2d9b8:	ad97aecc ab36ac65 a8e2aa0a a69ca7bd     ....e.6.........
   2d9c8:	a463a57e a238a34c a01ca129 9e0f9f14     ~.c.L.8.).......
   2d9d8:	9c119d0e 9a229b17 98439930 96749759     ......".0.C.Y.t.
   2d9e8:	94b59592 930793dc 91699236 8fdd90a1     ........6.i.....
   2d9f8:	8e628f1d 8cf88dab 8ba08c4a 8a5a8afb     ..b.....J.....Z.
   2da08:	892789be 88058894 86f6877b 85fa8676     ..'.....{...v...
   2da18:	85118583 843a84a3 837783d6 82c6831c     ......:...w.....
   2da28:	822a8276 81a081e2 812a8163 80c880f6     v.*.....c.*.....
   2da38:	8079809e 803e8059 80168027 8002800a     ..y.Y.>.'.......
   2da48:	80028000 8016800a 803e8027 80798059     ........'.>.Y.y.
   2da58:	80c8809e 812a80f6 81a08163 822a81e2     ......*.c.....*.
   2da68:	82c68276 8377831c 843a83d6 851184a3     v.....w...:.....
   2da78:	85fa8583 86f68676 8805877b 89278894     ....v...{.....'.
   2da88:	8a5a89be 8ba08afb 8cf88c4a 8e628dab     ..Z.....J.....b.
   2da98:	8fdd8f1d 916990a1 93079236 94b593dc     ......i.6.......
   2daa8:	96749592 98439759 9a229930 9c119b17     ..t.Y.C.0.".....
   2dab8:	9e0f9d0e a01c9f14 a238a129 a463a34c     ........).8.L.c.
   2dac8:	a69ca57e a8e2a7bd ab36aa0a ad97ac65     ~.........6.e...
   2dad8:	b005aecc b27fb140 b505b3c0 b796b64c     ....@.......L...
   2dae8:	ba33b8e3 bcdabb85 bf8cbe32 c248c0e9     ..3.....2.....H.
   2daf8:	c50dc3a9 c7dbc673 cab2c946 cd92cc21     ....s...F...!...
   2db08:	d079cf04 d367d1ef d65cd4e1 d958d7d9     ..y...g...\...X.
   2db18:	dc59dad8 df61dddc e26de0e6 e57de3f4     ..Y...a...m...}.
   2db28:	e892e707 ebabea1e eec6ed38 f1e4f055     ........8...U...
   2db38:	f505f374 f827f695 fb4af9b8 fe6efcdc     t.....'...J...n.
   2db48:	00000000 65727570 72697620 6c617574     ....pure virtual
   2db58:	74656d20 20646f68 6c6c6163 000a6465      method called..
   2db68:	3a647473 6461623a 6c6c615f 0000636f     std::bad_alloc..

0002db78 <_ZTISt9bad_alloc>:
   2db78:	0002dc98 0002db84 0002dbd8              ............

0002db84 <_ZTSSt9bad_alloc>:
   2db84:	62397453 615f6461 636f6c6c 00000000     St9bad_alloc....

0002db94 <_ZTVSt9bad_alloc>:
   2db94:	00000000 0002db78 0001cd99 0001cdad     ....x...........
   2dba4:	0001cd91 3a647473 6461623a 6378655f     ....std::bad_exc
   2dbb4:	69747065 00006e6f                       eption..

0002dbbc <_ZTIN10__cxxabiv115__forced_unwindE>:
   2dbbc:	0002dd0c 0002dbe0                       ........

0002dbc4 <_ZTIN10__cxxabiv119__foreign_exceptionE>:
   2dbc4:	0002dd0c 0002dc00                       ........

0002dbcc <_ZTISt13bad_exception>:
   2dbcc:	0002dc98 0002dc24 0002dbd8              ....$.......

0002dbd8 <_ZTISt9exception>:
   2dbd8:	0002dd0c 0002dc38                       ....8...

0002dbe0 <_ZTSN10__cxxabiv115__forced_unwindE>:
   2dbe0:	5f30314e 7878635f 76696261 5f353131     N10__cxxabiv115_
   2dbf0:	726f665f 5f646563 69776e75 0045646e     _forced_unwindE.

0002dc00 <_ZTSN10__cxxabiv119__foreign_exceptionE>:
   2dc00:	5f30314e 7878635f 76696261 5f393131     N10__cxxabiv119_
   2dc10:	726f665f 6e676965 6378655f 69747065     _foreign_excepti
   2dc20:	00456e6f                                onE.

0002dc24 <_ZTSSt13bad_exception>:
   2dc24:	33317453 5f646162 65637865 6f697470     St13bad_exceptio
   2dc34:	0000006e                                n...

0002dc38 <_ZTSSt9exception>:
   2dc38:	65397453 70656378 6e6f6974 00000000     St9exception....

0002dc48 <_ZTVSt13bad_exception>:
   2dc48:	00000000 0002dbcc 0001cf25 0001cf31     ........%...1...
   2dc58:	0001cf29                                )...

0002dc5c <_ZTIN10__cxxabiv120__si_class_type_infoE>:
   2dc5c:	0002dc98 0002dc68 0002dcd4              ....h.......

0002dc68 <_ZTSN10__cxxabiv120__si_class_type_infoE>:
   2dc68:	5f30314e 7878635f 76696261 5f303231     N10__cxxabiv120_
   2dc78:	5f69735f 73616c63 79745f73 695f6570     _si_class_type_i
   2dc88:	456f666e 00000000                       nfoE....

0002dc90 <_ZTVN10__cxxabiv120__si_class_type_infoE>:
   2dc90:	00000000 0002dc5c 0001d0f9 0001d10d     ....\...........
   2dca0:	0001d225 0001d225 0001d2e1 0001d255     %...%.......U...
   2dcb0:	0001d1f5 0001d165 0001d129              ....e...)...

0002dcbc <_ZTISt9type_info>:
   2dcbc:	0002dd0c 0002dcc4                       ........

0002dcc4 <_ZTSSt9type_info>:
   2dcc4:	74397453 5f657079 6f666e69 00000000     St9type_info....

0002dcd4 <_ZTIN10__cxxabiv117__class_type_infoE>:
   2dcd4:	0002dc98 0002dce0 0002dcbc              ............

0002dce0 <_ZTSN10__cxxabiv117__class_type_infoE>:
   2dce0:	5f30314e 7878635f 76696261 5f373131     N10__cxxabiv117_
   2dcf0:	616c635f 745f7373 5f657079 6f666e69     _class_type_info
   2dd00:	00000045                                E...

0002dd04 <_ZTVN10__cxxabiv117__class_type_infoE>:
   2dd04:	00000000 0002dcd4 0001d299 0001d2ad     ................
   2dd14:	0001d225 0001d225 0001d2e1 0001d255     %...%.......U...
   2dd24:	0001d2c9 0001d30d 0001d28d 6d726574     ............term
   2dd34:	74616e69 61632065 64656c6c 63657220     inate called rec
   2dd44:	69737275 796c6576 0000000a 6d726574     ursively....term
   2dd54:	74616e69 61632065 64656c6c 74666120     inate called aft
   2dd64:	74207265 776f7268 20676e69 69206e61     er throwing an i
   2dd74:	6174736e 2065636e 2720666f 00000000     nstance of '....
   2dd84:	00000a27 6d726574 74616e69 61632065     '...terminate ca
   2dd94:	64656c6c 74697720 74756f68 206e6120     lled without an 
   2dda4:	69746361 65206576 70656378 6e6f6974     active exception
   2ddb4:	0000000a 68772020 29287461 0020203a     ....  what():  .

0002ddc4 <standard_subs>:
   2ddc4:	00000074 0002e5a8 00000003 0002e5a8     t...............
   2ddd4:	00000003 00000000 00000000 00000061     ............a...
   2dde4:	0002e8c0 0000000e 0002e8c0 0000000e     ................
   2ddf4:	0002e8d0 00000009 00000062 0002e8dc     ........b.......
   2de04:	00000011 0002e8dc 00000011 0002e8f0     ................
   2de14:	0000000c 00000073 0002e900 0000000b     ....s...........
   2de24:	0002e90c 00000046 0002e8f0 0000000c     ....F...........
   2de34:	00000069 0002e954 0000000c 0002e964     i...T.......d...
   2de44:	00000031 0002e998 0000000d 0000006f     1...........o...
   2de54:	0002e9a8 0000000c 0002e9b8 00000031     ............1...
   2de64:	0002e9ec 0000000d 00000064 0002e9fc     ........d.......
   2de74:	0000000d 0002ea0c 00000032 0002ea40     ........2...@...
   2de84:	0000000e                                ....

0002de88 <cplus_demangle_builtin_types>:
   2de88:	0002ec4c 0000000b 0002ec4c 0000000b     L.......L.......
   2de98:	00000000 0002ec58 00000004 0002ec60     ....X.......`...
   2dea8:	00000007 00000007 0002ec68 00000004     ........h.......
   2deb8:	0002ec70 00000004 00000000 0002ec78     p...........x...
   2dec8:	00000006 0002ec78 00000006 00000008     ....x...........
   2ded8:	0002ec80 0000000b 0002ec80 0000000b     ................
   2dee8:	00000008 0002ec8c 00000005 0002ec8c     ................
   2def8:	00000005 00000008 0002ec94 0000000a     ................
   2df08:	0002ec94 0000000a 00000008 0002eca0     ................
   2df18:	0000000d 0002eca0 0000000d 00000000     ................
   2df28:	0002ecb0 00000003 0002ecb0 00000003     ................
   2df38:	00000001 0002ecb4 0000000c 0002ecc4     ................
   2df48:	00000008 00000002 00000000 00000000     ................
	...
   2df64:	0002ecd0 00000004 0002ecd0 00000004     ................
   2df74:	00000003 0002ecd8 0000000d 0002ecd8     ................
   2df84:	0000000d 00000004 0002ece8 00000008     ................
   2df94:	0002ece8 00000008 00000000 0002ecf4     ................
   2dfa4:	00000011 0002ecf4 00000011 00000000     ................
	...
   2dff0:	0002ed08 00000005 0002ed08 00000005     ................
   2e000:	00000000 0002ed10 0000000e 0002ed10     ................
   2e010:	0000000e 00000000 00000000 00000000     ................
	...
   2e02c:	0002ed20 00000004 0002ed20 00000004      ....... .......
   2e03c:	00000009 0002ed28 00000007 0002ec68     ....(.......h...
   2e04c:	00000004 00000000 0002ed30 00000009     ........0.......
   2e05c:	0002ecd0 00000004 00000005 0002ed3c     ............<...
   2e06c:	00000012 0002ed3c 00000012 00000006     ....<...........
   2e07c:	0002e7cc 00000003 0002e7cc 00000003     ................
   2e08c:	00000000 0002ed50 00000009 0002ed50     ....P.......P...
   2e09c:	00000009 00000000 0002ed5c 00000009     ........\.......
   2e0ac:	0002ed5c 00000009 00000000 0002ed68     \...........h...
   2e0bc:	0000000a 0002ed68 0000000a 00000000     ....h...........
   2e0cc:	0002ed74 00000004 0002ed74 00000004     t.......t.......
   2e0dc:	00000008 0002ed7c 00000008 0002ed7c     ....|.......|...
   2e0ec:	00000008 00000000 0002ed88 00000008     ................
   2e0fc:	0002ed88 00000008 00000000 0002ed94     ................
   2e10c:	00000011 0002ed94 00000011 00000000     ................

0002e11c <cplus_demangle_operators>:
   2e11c:	0002ea50 0002ea54 00000002 00000002     P...T...........
   2e12c:	0002ea58 0002cb68 00000001 00000002     X...h...........
   2e13c:	0002ea5c 0002e884 00000002 00000002     \...............
   2e14c:	0002e778 0002ea60 00000001 00000001     x...`...........
   2e15c:	0002ea64 0002ea60 00000001 00000002     d...`...........
   2e16c:	0002ea68 0002ea6c 00000008 00000001     h...l...........
   2e17c:	0002ea78 0002ea6c 00000008 00000001     x...l...........
   2e18c:	0002ea7c 0002ea80 0000000a 00000002     |...............
   2e19c:	0002e588 0002ea8c 00000002 00000002     ................
   2e1ac:	0002ea90 0002ea94 00000001 00000002     ................
   2e1bc:	0002ea98 0002ea9c 00000001 00000001     ................
   2e1cc:	0002eaa0 0002eaa4 00000002 00000002     ................
   2e1dc:	0002eaa8 0002eaac 00000009 00000001     ................
   2e1ec:	0002eab8 0002eabc 0000000c 00000002     ................
   2e1fc:	0002eacc 0002ead0 00000001 00000001     ................
   2e20c:	0002ead4 0002ead8 00000007 00000001     ................
   2e21c:	0002eae0 0002eae4 00000002 00000002     ................
   2e22c:	0002e58c 0002ec14 00000001 00000002     ................
   2e23c:	0002eae8 0002eaec 00000001 00000002     ................
   2e24c:	0002eaf0 0002eaf4 00000002 00000002     ................
   2e25c:	0002eaf8 0002eafc 00000001 00000002     ................
   2e26c:	0002eb00 0002eb04 00000002 00000002     ................
   2e27c:	0002eb08 0002e7cc 00000003 00000003     ................
   2e28c:	0002eb0c 0002e7cc 00000003 00000003     ................
   2e29c:	0002eb10 0002e7cc 00000003 00000002     ................
   2e2ac:	0002eb14 0002e7cc 00000003 00000002     ................
   2e2bc:	0002eb18 0002eb1c 00000002 00000002     ................
   2e2cc:	0002e77c 0002e5d0 00000002 00000001     |...............
   2e2dc:	0002eb20 0002e994 00000001 00000002      ...............
   2e2ec:	0002e784 0002e5f0 00000002 00000002     ................
   2e2fc:	0002eb24 0002eb28 00000003 00000002     $...(...........
   2e30c:	0002ec7c 0002eb2c 00000002 00000002     |...,...........
   2e31c:	0002e5c4 0002eb30 0000000b 00000001     ....0...........
   2e32c:	0002eb3c 0002eb40 00000002 00000002     <...@...........
   2e33c:	0002eb44 0002eb48 00000001 00000002     D...H...........
   2e34c:	0002eb4c 0002eb50 00000002 00000002     L...P...........
   2e35c:	0002eb54 0002eb58 00000002 00000002     T...X...........
   2e36c:	0002eb5c 0002eb60 00000001 00000002     \...`...........
   2e37c:	0002eb64 0002ead0 00000001 00000002     d...............
   2e38c:	0002eb68 0002eb6c 00000002 00000001     h...l...........
   2e39c:	0002eb70 0002eb74 00000005 00000003     p...t...........
   2e3ac:	0002eb7c 0002eb80 00000002 00000002     |...............
   2e3bc:	0002ed4c 0002eb60 00000001 00000001     L...`...........
   2e3cc:	0002eb84 0002eb88 00000001 00000001     ................
   2e3dc:	0002eb8c 0002eb90 00000003 00000003     ................
   2e3ec:	0002eb94 0002eb98 00000002 00000002     ................
   2e3fc:	0002eb9c 0002eba0 00000002 00000002     ................
   2e40c:	0002e8cc 0002eba4 00000001 00000002     ................
   2e41c:	0002eba8 0002ebac 00000002 00000002     ................
   2e42c:	0002ebb0 0002ebb4 00000001 00000002     ................
   2e43c:	0002ebb8 0002ebbc 00000003 00000002     ................
   2e44c:	0002ebc0 0002ebc4 00000002 00000001     ................
   2e45c:	0002ebc8 0002ebb4 00000001 00000001     ................
   2e46c:	0002e590 0002ebcc 00000002 00000002     ................
   2e47c:	0002e594 0002ebd0 00000001 00000003     ................
   2e48c:	0002ebd4 0002ebd8 00000002 00000002     ................
   2e49c:	0002ebdc 0002ebe0 00000003 00000002     ................
   2e4ac:	0002ebe4 0002ebe8 00000010 00000002     ................
   2e4bc:	0002ebfc 0002ec00 00000001 00000002     ................
   2e4cc:	0002ec04 0002ec08 00000002 00000002     ................
   2e4dc:	0002e584 0002ec0c 00000009 00000001     ................
   2e4ec:	0002e84c 0002ec0c 00000009 00000001     L...............
   2e4fc:	0002ec18 0002ec1c 0000000b 00000002     ................
   2e50c:	0002ea88 0002ec28 00000007 00000001     ....(...........
   2e51c:	0002ec30 0002ec28 00000007 00000001     0...(...........
   2e52c:	0002ec34 0002ec38 00000005 00000000     4...8...........
   2e53c:	0002ec40 0002ec44 00000006 00000001     @...D...........
	...
   2e55c:	4f4c475f 5f4c4142 00000000 6f6e6128     _GLOBAL_....(ano
   2e56c:	6f6d796e 6e207375 73656d61 65636170     nymous namespace
   2e57c:	00000029 00006425 00005073 00006c63     )...%d..sP..cl..
   2e58c:	00007464 00007470 00007571 69727473     dt..pt..qu..stri
   2e59c:	6c20676e 72657469 00006c61 00647473     ng literal..std.
   2e5ac:	6f747561 00000000 6c636564 65707974     auto....decltype
   2e5bc:	74756128 0000296f 0000696c 6962615b     (auto)..li..[abi
   2e5cc:	0000003a 00003a3a 6665647b 746c7561     :...::..{default
   2e5dc:	67726120 00000023 003a3a7d 7272414a      arg#...}::.JArr
   2e5ec:	00007961 00005d5b 6f747561 0000003a     ay..[]..auto:...
   2e5fc:	62617476 6620656c 0020726f 20545456     vtable for .VTT 
   2e60c:	20726f66 00000000 736e6f63 63757274     for ....construc
   2e61c:	6e6f6974 61747620 20656c62 20726f66     tion vtable for 
   2e62c:	00000000 2d6e692d 00000000 65707974     ....-in-....type
   2e63c:	6f666e69 726f6620 00000020 65707974     info for ...type
   2e64c:	6f666e69 6d616e20 6f662065 00002072     info name for ..
   2e65c:	65707974 6f666e69 206e6620 20726f66     typeinfo fn for 
   2e66c:	00000000 2d6e6f6e 74726976 206c6175     ....non-virtual 
   2e67c:	6e756874 6f74206b 00000020 61766f63     thunk to ...cova
   2e68c:	6e616972 65722074 6e727574 75687420     riant return thu
   2e69c:	74206b6e 0000206f 6176616a 616c4320     nk to ..java Cla
   2e6ac:	66207373 0020726f 72617567 61762064     ss for .guard va
   2e6bc:	62616972 6620656c 0020726f 20534c54     riable for .TLS 
   2e6cc:	74696e69 6e756620 6f697463 6f66206e     init function fo
   2e6dc:	00002072 20534c54 70617277 20726570     r ..TLS wrapper 
   2e6ec:	636e7566 6e6f6974 726f6620 00000020     function for ...
   2e6fc:	65666572 636e6572 65742065 726f706d     reference tempor
   2e70c:	20797261 00000023 64646968 61206e65     ary #...hidden a
   2e71c:	7361696c 726f6620 00000020 2d6e6f6e     lias for ...non-
   2e72c:	6e617274 74636173 206e6f69 6e6f6c63     transaction clon
   2e73c:	6f662065 00002072 7461535f 00000020     e for .._Sat ...
   2e74c:	6363415f 00006d75 6172465f 00007463     _Accum.._Fract..
   2e75c:	0000202c 7265706f 726f7461 00000000     , ..operator....
   2e76c:	7265706f 726f7461 00000020 00006461     operator ...ad..
   2e77c:	00007367 0000283e 00007869 00203a20     gs..>(..ix.. : .
   2e78c:	2077656e 00000000 00006c75 00006c6c     new ....ul..ll..
   2e79c:	006c6c75 736c6166 00000065 65757274     ull.false...true
   2e7ac:	00000000 6176616a 73657220 6372756f     ....java resourc
   2e7bc:	00002065 6c636564 65707974 00002820     e ..decltype (..
   2e7cc:	002e2e2e 73696874 00000000 7261707b     ....this....{par
   2e7dc:	0000236d 626f6c67 63206c61 74736e6f     m#..global const
   2e7ec:	74637572 2073726f 6579656b 6f742064     ructors keyed to
   2e7fc:	00000020 626f6c67 64206c61 72747365      ...global destr
   2e80c:	6f746375 6b207372 64657965 206f7420     uctors keyed to 
   2e81c:	00000000 6d616c7b 28616462 00000000     ....{lambda(....
   2e82c:	00002329 6e6e757b 64656d61 70797420     )#..{unnamed typ
   2e83c:	00002365 6c635b20 20656e6f 00000000     e#.. [clone ....
   2e84c:	00005a73 73657220 63697274 00000074     sZ.. restrict...
   2e85c:	6c6f7620 6c697461 00000065 6e6f6320      volatile... con
   2e86c:	00007473 61727420 6361736e 6e6f6974     st.. transaction
   2e87c:	6661735f 00000065 00002626 706d6f63     _safe...&&..comp
   2e88c:	2078656c 00000000 67616d69 72616e69     lex ....imaginar
   2e89c:	00002079 002a3a3a 765f5f20 6f746365     y ..::*. __vecto
   2e8ac:	00002872 2e2e2e28 00000000 292e2e2e     r(..(..........)
   2e8bc:	00000000 3a647473 6c6c613a 7461636f     ....std::allocat
   2e8cc:	0000726f 6f6c6c61 6f746163 00000072     or..allocator...
   2e8dc:	3a647473 7361623a 735f6369 6e697274     std::basic_strin
   2e8ec:	00000067 69736162 74735f63 676e6972     g...basic_string
   2e8fc:	00000000 3a647473 7274733a 00676e69     ....std::string.
   2e90c:	3a647473 7361623a 735f6369 6e697274     std::basic_strin
   2e91c:	68633c67 202c7261 3a647473 6168633a     g<char, std::cha
   2e92c:	72745f72 73746961 6168633c 202c3e72     r_traits<char>, 
   2e93c:	3a647473 6c6c613a 7461636f 633c726f     std::allocator<c
   2e94c:	3e726168 00003e20 3a647473 7473693a     har> >..std::ist
   2e95c:	6d616572 00000000 3a647473 7361623a     ream....std::bas
   2e96c:	695f6369 65727473 633c6d61 2c726168     ic_istream<char,
   2e97c:	64747320 68633a3a 745f7261 74696172      std::char_trait
   2e98c:	68633c73 203e7261 0000003e 69736162     s<char> >...basi
   2e99c:	73695f63 61657274 0000006d 3a647473     c_istream...std:
   2e9ac:	74736f3a 6d616572 00000000 3a647473     :ostream....std:
   2e9bc:	7361623a 6f5f6369 65727473 633c6d61     :basic_ostream<c
   2e9cc:	2c726168 64747320 68633a3a 745f7261     har, std::char_t
   2e9dc:	74696172 68633c73 203e7261 0000003e     raits<char> >...
   2e9ec:	69736162 736f5f63 61657274 0000006d     basic_ostream...
   2e9fc:	3a647473 736f693a 61657274 0000006d     std::iostream...
   2ea0c:	3a647473 7361623a 695f6369 7274736f     std::basic_iostr
   2ea1c:	3c6d6165 72616863 7473202c 633a3a64     eam<char, std::c
   2ea2c:	5f726168 69617274 633c7374 3e726168     har_traits<char>
   2ea3c:	00003e20 69736162 6f695f63 65727473      >..basic_iostre
   2ea4c:	00006d61 00004e61 00003d26 00005361     am..aN..&=..aS..
   2ea5c:	00006161 00000026 00006e61 00007461     aa..&...an..at..
   2ea6c:	67696c61 20666f6e 00000000 00007a61     alignof ....az..
   2ea7c:	00006363 736e6f63 61635f74 00007473     cc..const_cast..
   2ea8c:	00002928 00006d63 0000002c 00006f63     ()..cm..,...co..
   2ea9c:	0000007e 00005664 00003d2f 00006164     ~...dV../=..da..
   2eaac:	656c6564 5d5b6574 00000020 00006364     delete[] ...dc..
   2eabc:	616e7964 5f63696d 74736163 00000000     dynamic_cast....
   2eacc:	00006564 0000002a 00006c64 656c6564     de..*...dl..dele
   2eadc:	00206574 00007364 00002a2e 00007664     te .ds...*..dv..
   2eaec:	0000002f 00004f65 00003d5e 00006f65     /...eO..^=..eo..
   2eafc:	0000005e 00007165 00003d3d 00004c66     ^...eq..==..fL..
   2eb0c:	00005266 00006c66 00007266 00006567     fR..fl..fr..ge..
   2eb1c:	00003d3e 00007467 0000536c 003d3c3c     >=..gt..lS..<<=.
   2eb2c:	00003d3c 7265706f 726f7461 00202222     <=..operator"" .
   2eb3c:	0000736c 00003c3c 0000746c 0000003c     ls..<<..lt..<...
   2eb4c:	0000496d 00003d2d 00004c6d 00003d2a     mI..-=..mL..*=..
   2eb5c:	0000696d 0000002d 00006c6d 00006d6d     mi..-...ml..mm..
   2eb6c:	00002d2d 0000616e 5b77656e 0000005d     --..na..new[]...
   2eb7c:	0000656e 00003d21 0000746e 00000021     ne..!=..nt..!...
   2eb8c:	0000776e 0077656e 0000526f 00003d7c     nw..new.oR..|=..
   2eb9c:	00006f6f 00007c7c 0000007c 00004c70     oo..||..|...pL..
   2ebac:	00003d2b 00006c70 0000002b 00006d70     +=..pl..+...pm..
   2ebbc:	002a3e2d 00007070 00002b2b 00007370     ->*.pp..++..ps..
   2ebcc:	00003e2d 0000003f 00004d72 00003d25     ->..?...rM..%=..
   2ebdc:	00005372 003d3e3e 00006372 6e696572     rS..>>=.rc..rein
   2ebec:	70726574 5f746572 74736163 00000000     terpret_cast....
   2ebfc:	00006d72 00000025 00007372 00003e3e     rm..%...rs..>>..
   2ec0c:	657a6973 2e2e666f 0000002e 00006373     sizeof......sc..
   2ec1c:	74617473 635f6369 00747361 657a6973     static_cast.size
   2ec2c:	0020666f 00007a73 00007274 6f726874     of .sz..tr..thro
   2ec3c:	00000077 00007774 6f726874 00002077     w...tw..throw ..
   2ec4c:	6e676973 63206465 00726168 6c6f6f62     signed char.bool
   2ec5c:	00000000 6c6f6f62 006e6165 72616863     ....boolean.char
   2ec6c:	00000000 65747962 00000000 62756f64     ....byte....doub
   2ec7c:	0000656c 676e6f6c 756f6420 00656c62     le..long double.
   2ec8c:	616f6c66 00000074 6c665f5f 3174616f     float...__float1
   2ec9c:	00003832 69736e75 64656e67 61686320     28..unsigned cha
   2ecac:	00000072 00746e69 69736e75 64656e67     r...int.unsigned
   2ecbc:	746e6920 00000000 69736e75 64656e67      int....unsigned
   2eccc:	00000000 676e6f6c 00000000 69736e75     ....long....unsi
   2ecdc:	64656e67 6e6f6c20 00000067 6e695f5f     gned long...__in
   2ecec:	38323174 00000000 69736e75 64656e67     t128....unsigned
   2ecfc:	695f5f20 3231746e 00000038 726f6873      __int128...shor
   2ed0c:	00000074 69736e75 64656e67 6f687320     t...unsigned sho
   2ed1c:	00007472 64696f76 00000000 61686377     rt..void....wcha
   2ed2c:	00745f72 676e6f6c 6e6f6c20 00000067     r_t.long long...
   2ed3c:	69736e75 64656e67 6e6f6c20 6f6c2067     unsigned long lo
   2ed4c:	0000676e 69636564 336c616d 00000032     ng..decimal32...
   2ed5c:	69636564 366c616d 00000034 69636564     decimal64...deci
   2ed6c:	316c616d 00003832 666c6168 00000000     mal128..half....
   2ed7c:	72616863 745f3631 00000000 72616863     char16_t....char
   2ed8c:	745f3233 00000000 6c636564 65707974     32_t....decltype
   2ed9c:	6c756e28 7274706c 00000029 66776f70     (nullptr)...powf
   2edac:	00000000 74727173 00000066              ....sqrtf...

0002edb8 <TWO52>:
   2edb8:	00000000 43300000 00000000 c3300000     ......0C......0.

0002edc8 <_global_impure_ptr>:
   2edc8:	20000110 00000043 49534f50 00000058     ... C...POSIX...
   2edd8:	00464e49 00666e69 004e414e 006e616e     INF.inf.NAN.nan.
   2ede8:	33323130 37363534 42413938 46454443     0123456789ABCDEF
   2edf8:	00000000 33323130 37363534 62613938     ....0123456789ab
   2ee08:	66656463 00000000 6c756e28 0000296c     cdef....(null)..
   2ee18:	00000030                                0...

0002ee1c <blanks.8346>:
   2ee1c:	20202020 20202020 20202020 20202020                     

0002ee2c <zeroes.8347>:
   2ee2c:	30303030 30303030 30303030 30303030     0000000000000000
   2ee3c:	33323130 37363534 62613938 66656463     0123456789abcdef
   2ee4c:	6a696867 6e6d6c6b 7271706f 76757473     ghijklmnopqrstuv
   2ee5c:	7a797877 00000000                       wxyz....

0002ee64 <_ctype_>:
   2ee64:	20202000 20202020 28282020 20282828     .         ((((( 
   2ee74:	20202020 20202020 20202020 20202020                     
   2ee84:	10108820 10101010 10101010 10101010      ...............
   2ee94:	04040410 04040404 10040404 10101010     ................
   2eea4:	41411010 41414141 01010101 01010101     ..AAAAAA........
   2eeb4:	01010101 01010101 01010101 10101010     ................
   2eec4:	42421010 42424242 02020202 02020202     ..BBBBBB........
   2eed4:	02020202 02020202 02020202 10101010     ................
   2eee4:	00000020 00000000 00000000 00000000      ...............
	...
   2ef68:	69666e49 7974696e 00000000 004e614e     Infinity....NaN.

0002ef78 <__mprec_bigtens>:
   2ef78:	37e08000 4341c379 b5056e17 4693b8b5     ...7y.AC.n.....F
   2ef88:	e93ff9f5 4d384f03 f9301d32 5a827748     ..?..O8M2.0.Hw.Z
   2ef98:	7f73bf3c 75154fdd                       <.s..O.u

0002efa0 <__mprec_tens>:
   2efa0:	00000000 3ff00000 00000000 40240000     .......?......$@
   2efb0:	00000000 40590000 00000000 408f4000     ......Y@.....@.@
   2efc0:	00000000 40c38800 00000000 40f86a00     .......@.....j.@
   2efd0:	00000000 412e8480 00000000 416312d0     .......A......cA
   2efe0:	00000000 4197d784 00000000 41cdcd65     .......A....e..A
   2eff0:	20000000 4202a05f e8000000 42374876     ... _..B....vH7B
   2f000:	a2000000 426d1a94 e5400000 42a2309c     ......mB..@..0.B
   2f010:	1e900000 42d6bcc4 26340000 430c6bf5     .......B..4&.k.C
   2f020:	37e08000 4341c379 85d8a000 43763457     ...7y.AC....W4vC
   2f030:	674ec800 43abc16d 60913d00 43e158e4     ..Ngm..C.=.`.X.C
   2f040:	78b58c40 4415af1d d6e2ef50 444b1ae4     @..x...DP.....KD
   2f050:	064dd592 4480f0cf c7e14af6 44b52d02     ..M....D.J...-.D
   2f060:	79d99db4 44ea7843                       ...yCx.D

0002f068 <p05.7178>:
   2f068:	00000005 00000019 0000007d              ........}...

0002f074 <__EH_FRAME_BEGIN__>:
   2f074:	00000000                                ....
