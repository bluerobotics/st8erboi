
Abs2PositionsHomeToSwitch.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00020e10  00004000  00004000  00004000  2**6
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .ARM.extab    000000fc  00024e10  00024e10  00024e10  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .ARM.exidx    00000188  00024f0c  00024f0c  00024f0c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .data         00000ab0  20000000  00025094  00030000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  4 .bss          000018e4  20000ab0  00025b50  00030ab0  2**4
                  ALLOC
  5 .ARM.attributes 00000030  00000000  00000000  00030ab0  2**0
                  CONTENTS, READONLY
  6 .comment      000000c9  00000000  00000000  00030ae0  2**0
                  CONTENTS, READONLY
  7 .debug_info   000a8f90  00000000  00000000  00030ba9  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 0000fd6e  00000000  00000000  000d9b39  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_aranges 000017f8  00000000  00000000  000e98a7  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 00007cf8  00000000  00000000  000eb09f  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_macro  00021b7c  00000000  00000000  000f2d97  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_line   00014272  00000000  00000000  00114913  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    000f1940  00000000  00000000  00128b85  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_frame  00007498  00000000  00000000  0021a4c8  2**2
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_loc    00023911  00000000  00000000  00221960  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00004000 <exception_table>:
    4000:	00 00 03 20 e5 99 00 00 d1 42 00 00 d1 42 00 00     ... .....B...B..
    4010:	d1 42 00 00 d1 42 00 00 d1 42 00 00 00 00 00 00     .B...B...B......
	...
    402c:	d1 42 00 00 d1 42 00 00 00 00 00 00 d1 42 00 00     .B...B.......B..
    403c:	81 98 00 00 d1 42 00 00 d1 42 00 00 d1 42 00 00     .....B...B...B..
    404c:	d1 42 00 00 d1 42 00 00 d1 42 00 00 d1 42 00 00     .B...B...B...B..
    405c:	d1 42 00 00 d1 42 00 00 d1 42 00 00 d1 42 00 00     .B...B...B...B..
    406c:	d1 42 00 00 55 97 00 00 65 97 00 00 75 97 00 00     .B..U...e...u...
    407c:	85 97 00 00 95 97 00 00 a5 97 00 00 b5 97 00 00     ................
    408c:	c5 97 00 00 d5 97 00 00 e5 97 00 00 f5 97 00 00     ................
    409c:	05 98 00 00 15 98 00 00 21 98 00 00 31 98 00 00     ........!...1...
    40ac:	41 98 00 00 d1 42 00 00 d1 42 00 00 d1 42 00 00     A....B...B...B..
    40bc:	d1 42 00 00 d1 42 00 00 d1 42 00 00 d1 42 00 00     .B...B...B...B..
    40cc:	d1 42 00 00 d1 42 00 00 d1 42 00 00 d1 42 00 00     .B...B...B...B..
    40dc:	d1 42 00 00 d1 42 00 00 d1 42 00 00 00 00 00 00     .B...B...B......
	...
    40f4:	d1 42 00 00 e9 96 00 00 d1 42 00 00 f5 96 00 00     .B.......B......
    4104:	01 97 00 00 d1 42 00 00 d1 42 00 00 d1 42 00 00     .....B...B...B..
    4114:	d1 42 00 00 0d 97 00 00 d1 42 00 00 19 97 00 00     .B.......B......
    4124:	25 97 00 00 d1 42 00 00 d1 42 00 00 d1 42 00 00     %....B...B...B..
    4134:	d1 42 00 00 d1 42 00 00 d1 42 00 00 d1 42 00 00     .B...B...B...B..
    4144:	d1 42 00 00 d1 42 00 00 d1 42 00 00 d1 42 00 00     .B...B...B...B..
    4154:	d1 42 00 00 d1 42 00 00 d1 42 00 00 d1 42 00 00     .B...B...B...B..
    4164:	d1 42 00 00 31 97 00 00 d1 42 00 00 3d 97 00 00     .B..1....B..=...
    4174:	49 97 00 00 00 00 00 00 00 00 00 00 dd 2f 01 00     I............/..
    4184:	e1 2f 01 00 e5 2f 01 00 e9 2f 01 00 dd 96 00 00     ./.../.../......
    4194:	d5 98 00 00 d1 42 00 00 d1 42 00 00 d1 42 00 00     .....B...B...B..
    41a4:	d1 42 00 00 d1 42 00 00 d1 42 00 00 d1 42 00 00     .B...B...B...B..
    41b4:	d1 42 00 00 d1 42 00 00 d1 42 00 00 d1 42 00 00     .B...B...B...B..
    41c4:	d1 42 00 00 d1 42 00 00 d1 42 00 00 d1 42 00 00     .B...B...B...B..
    41d4:	51 98 00 00 d1 42 00 00 d1 42 00 00 69 98 00 00     Q....B...B..i...
    41e4:	d1 42 00 00 d1 42 00 00 d1 42 00 00 d1 42 00 00     .B...B...B...B..
    41f4:	d1 42 00 00 d1 42 00 00 d1 42 00 00 d1 42 00 00     .B...B...B...B..
    4204:	d1 42 00 00 d1 42 00 00 d1 42 00 00 d1 42 00 00     .B...B...B...B..
    4214:	d1 42 00 00 d1 42 00 00 d1 42 00 00 d1 42 00 00     .B...B...B...B..
    4224:	d1 42 00 00 d1 42 00 00 d1 42 00 00 d1 42 00 00     .B...B...B...B..
    4234:	d1 42 00 00 d1 42 00 00 d1 42 00 00 d1 42 00 00     .B...B...B...B..
    4244:	d1 42 00 00 d1 42 00 00 d1 42 00 00 d1 42 00 00     .B...B...B...B..
    4254:	d1 42 00 00 d1 42 00 00 d1 42 00 00 d1 42 00 00     .B...B...B...B..

00004264 <__do_global_dtors_aux>:
    4264:	b510      	push	{r4, lr}
    4266:	4c05      	ldr	r4, [pc, #20]	; (427c <__do_global_dtors_aux+0x18>)
    4268:	7823      	ldrb	r3, [r4, #0]
    426a:	b933      	cbnz	r3, 427a <__do_global_dtors_aux+0x16>
    426c:	4b04      	ldr	r3, [pc, #16]	; (4280 <__do_global_dtors_aux+0x1c>)
    426e:	b113      	cbz	r3, 4276 <__do_global_dtors_aux+0x12>
    4270:	4804      	ldr	r0, [pc, #16]	; (4284 <__do_global_dtors_aux+0x20>)
    4272:	f3af 8000 	nop.w
    4276:	2301      	movs	r3, #1
    4278:	7023      	strb	r3, [r4, #0]
    427a:	bd10      	pop	{r4, pc}
    427c:	20000ab0 	.word	0x20000ab0
    4280:	00000000 	.word	0x00000000
    4284:	00024e0c 	.word	0x00024e0c

00004288 <frame_dummy>:
    4288:	4b0c      	ldr	r3, [pc, #48]	; (42bc <frame_dummy+0x34>)
    428a:	b143      	cbz	r3, 429e <frame_dummy+0x16>
    428c:	480c      	ldr	r0, [pc, #48]	; (42c0 <frame_dummy+0x38>)
    428e:	490d      	ldr	r1, [pc, #52]	; (42c4 <frame_dummy+0x3c>)
    4290:	b510      	push	{r4, lr}
    4292:	f3af 8000 	nop.w
    4296:	480c      	ldr	r0, [pc, #48]	; (42c8 <frame_dummy+0x40>)
    4298:	6803      	ldr	r3, [r0, #0]
    429a:	b923      	cbnz	r3, 42a6 <frame_dummy+0x1e>
    429c:	bd10      	pop	{r4, pc}
    429e:	480a      	ldr	r0, [pc, #40]	; (42c8 <frame_dummy+0x40>)
    42a0:	6803      	ldr	r3, [r0, #0]
    42a2:	b933      	cbnz	r3, 42b2 <frame_dummy+0x2a>
    42a4:	4770      	bx	lr
    42a6:	4b09      	ldr	r3, [pc, #36]	; (42cc <frame_dummy+0x44>)
    42a8:	2b00      	cmp	r3, #0
    42aa:	d0f7      	beq.n	429c <frame_dummy+0x14>
    42ac:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    42b0:	4718      	bx	r3
    42b2:	4b06      	ldr	r3, [pc, #24]	; (42cc <frame_dummy+0x44>)
    42b4:	2b00      	cmp	r3, #0
    42b6:	d0f5      	beq.n	42a4 <frame_dummy+0x1c>
    42b8:	4718      	bx	r3
    42ba:	bf00      	nop
    42bc:	00000000 	.word	0x00000000
    42c0:	00024e0c 	.word	0x00024e0c
    42c4:	20000ab4 	.word	0x20000ab4
    42c8:	20000aac 	.word	0x20000aac
    42cc:	00000000 	.word	0x00000000

000042d0 <Dummy_Handler>:

/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
    42d0:	e7fe      	b.n	42d0 <Dummy_Handler>
    42d2:	bf00      	nop

000042d4 <_Z20HomingSensorCallbackv>:
 * HomingSensorCallback
 *
 *    Reads the state of the homing sensor and passes the state to the motor.
 */
void HomingSensorCallback()
{
    42d4:	b508      	push	{r3, lr}
    \brief Blocks operations for ms milliseconds

    \param[in] ms Time in milliseconds to delay
**/
inline void Delay_ms(uint32_t ms)  {
    return Delay_cycles(static_cast<uint64_t>(ms) * CYCLES_PER_MILLISECOND);
    42d6:	2100      	movs	r1, #0
    42d8:	4806      	ldr	r0, [pc, #24]	; (42f4 <_Z20HomingSensorCallbackv+0x20>)
    42da:	f005 fd71 	bl	9dc0 <Delay_cycles>
    // A 1 ms delay is required in order to pass the correct filtered sensor
    // state.
    Delay_ms(1);
    motor.MotorInBState(HomingSensor.State());
    42de:	4806      	ldr	r0, [pc, #24]	; (42f8 <_Z20HomingSensorCallbackv+0x24>)
    42e0:	f000 fa5c 	bl	479c <_ZN9ClearCore9DigitalIn5StateEv>
    42e4:	1c01      	adds	r1, r0, #0
    42e6:	bf18      	it	ne
    42e8:	2101      	movne	r1, #1
    42ea:	4804      	ldr	r0, [pc, #16]	; (42fc <_Z20HomingSensorCallbackv+0x28>)
}
    42ec:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    motor.MotorInBState(HomingSensor.State());
    42f0:	f000 bf5a 	b.w	51a8 <_ZN9ClearCore11MotorDriver13MotorInBStateEb>
    42f4:	0001d4c0 	.word	0x0001d4c0
    42f8:	20001158 	.word	0x20001158
    42fc:	20000b68 	.word	0x20000b68

00004300 <_ZN9ClearCore7ISerial8SendLineEPKc.constprop.6>:
        Terminate the line with carriage return and newline characters.

        \param[in] nullTermStr The string to be sent
        \return success
    **/
    bool SendLine(const char *nullTermStr) {
    4300:	b570      	push	{r4, r5, r6, lr}
    4302:	4604      	mov	r4, r0
        return Send(nullTermStr, strlen(nullTermStr));
    4304:	f01a fcbc 	bl	1ec80 <strlen>
        for (size_t iChar = 0; iChar < bufferSize; iChar++) {
    4308:	b168      	cbz	r0, 4326 <_ZN9ClearCore7ISerial8SendLineEPKc.constprop.6+0x26>
            if (!SendChar(buffer[iChar])) {
    430a:	4e0d      	ldr	r6, [pc, #52]	; (4340 <_ZN9ClearCore7ISerial8SendLineEPKc.constprop.6+0x40>)
    430c:	1825      	adds	r5, r4, r0
    430e:	e001      	b.n	4314 <_ZN9ClearCore7ISerial8SendLineEPKc.constprop.6+0x14>
        for (size_t iChar = 0; iChar < bufferSize; iChar++) {
    4310:	42a5      	cmp	r5, r4
    4312:	d008      	beq.n	4326 <_ZN9ClearCore7ISerial8SendLineEPKc.constprop.6+0x26>
            if (!SendChar(buffer[iChar])) {
    4314:	f814 1b01 	ldrb.w	r1, [r4], #1
    4318:	4630      	mov	r0, r6
    431a:	f001 fef9 	bl	6110 <_ZN9ClearCore9SerialUsb8SendCharEh>
    431e:	2800      	cmp	r0, #0
    4320:	d1f6      	bne.n	4310 <_ZN9ClearCore7ISerial8SendLineEPKc.constprop.6+0x10>
        return Send(nullTermStr) && SendLine();
    }
    4322:	2000      	movs	r0, #0
    4324:	bd70      	pop	{r4, r5, r6, pc}
        return SendChar('\r') && SendChar('\n');
    4326:	210d      	movs	r1, #13
    4328:	4805      	ldr	r0, [pc, #20]	; (4340 <_ZN9ClearCore7ISerial8SendLineEPKc.constprop.6+0x40>)
    432a:	f001 fef1 	bl	6110 <_ZN9ClearCore9SerialUsb8SendCharEh>
    432e:	2800      	cmp	r0, #0
    4330:	d0f7      	beq.n	4322 <_ZN9ClearCore7ISerial8SendLineEPKc.constprop.6+0x22>
    4332:	210a      	movs	r1, #10
    4334:	4802      	ldr	r0, [pc, #8]	; (4340 <_ZN9ClearCore7ISerial8SendLineEPKc.constprop.6+0x40>)
    }
    4336:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
        return SendChar('\r') && SendChar('\n');
    433a:	f001 bee9 	b.w	6110 <_ZN9ClearCore9SerialUsb8SendCharEh>
    433e:	bf00      	nop
    4340:	20001488 	.word	0x20001488

00004344 <_Z14MoveToPositionh.part.2>:
bool MoveToPosition(uint8_t positionNum)
    4344:	b570      	push	{r4, r5, r6, lr}
    4346:	484a      	ldr	r0, [pc, #296]	; (4470 <_Z14MoveToPositionh.part.2+0x12c>)
    4348:	4c4a      	ldr	r4, [pc, #296]	; (4474 <_Z14MoveToPositionh.part.2+0x130>)
            if (!SendChar(buffer[iChar])) {
    434a:	4d4b      	ldr	r5, [pc, #300]	; (4478 <_Z14MoveToPositionh.part.2+0x134>)
    434c:	2100      	movs	r1, #0
    434e:	f005 fd37 	bl	9dc0 <Delay_cycles>
    4352:	f104 0619 	add.w	r6, r4, #25
    4356:	f814 1b01 	ldrb.w	r1, [r4], #1
    435a:	4628      	mov	r0, r5
    435c:	f001 fed8 	bl	6110 <_ZN9ClearCore9SerialUsb8SendCharEh>
    4360:	b138      	cbz	r0, 4372 <_Z14MoveToPositionh.part.2+0x2e>
        for (size_t iChar = 0; iChar < bufferSize; iChar++) {
    4362:	42b4      	cmp	r4, r6
    4364:	d1f7      	bne.n	4356 <_Z14MoveToPositionh.part.2+0x12>
        return SendChar('\r') && SendChar('\n');
    4366:	210d      	movs	r1, #13
    4368:	4843      	ldr	r0, [pc, #268]	; (4478 <_Z14MoveToPositionh.part.2+0x134>)
    436a:	f001 fed1 	bl	6110 <_ZN9ClearCore9SerialUsb8SendCharEh>
    436e:	2800      	cmp	r0, #0
    4370:	d164      	bne.n	443c <_Z14MoveToPositionh.part.2+0xf8>
    4372:	4a42      	ldr	r2, [pc, #264]	; (447c <_Z14MoveToPositionh.part.2+0x138>)
    while (motor.HlfbState() != MotorDriver::HLFB_ASSERTED &&
    4374:	f892 30f4 	ldrb.w	r3, [r2, #244]	; 0xf4
    4378:	2b01      	cmp	r3, #1
    437a:	d003      	beq.n	4384 <_Z14MoveToPositionh.part.2+0x40>
           !motor.StatusReg().bit.MotorInFault)
    437c:	f8d2 3118 	ldr.w	r3, [r2, #280]	; 0x118
    while (motor.HlfbState() != MotorDriver::HLFB_ASSERTED &&
    4380:	06d9      	lsls	r1, r3, #27
    4382:	d5f7      	bpl.n	4374 <_Z14MoveToPositionh.part.2+0x30>
    if (motor.StatusReg().bit.MotorInFault)
    4384:	f8d2 3118 	ldr.w	r3, [r2, #280]	; 0x118
    4388:	06db      	lsls	r3, r3, #27
    438a:	d415      	bmi.n	43b8 <_Z14MoveToPositionh.part.2+0x74>
    438c:	4c3c      	ldr	r4, [pc, #240]	; (4480 <_Z14MoveToPositionh.part.2+0x13c>)
            if (!SendChar(buffer[iChar])) {
    438e:	4d3a      	ldr	r5, [pc, #232]	; (4478 <_Z14MoveToPositionh.part.2+0x134>)
    4390:	f104 0609 	add.w	r6, r4, #9
    4394:	f814 1b01 	ldrb.w	r1, [r4], #1
    4398:	4628      	mov	r0, r5
    439a:	f001 feb9 	bl	6110 <_ZN9ClearCore9SerialUsb8SendCharEh>
    439e:	b140      	cbz	r0, 43b2 <_Z14MoveToPositionh.part.2+0x6e>
        for (size_t iChar = 0; iChar < bufferSize; iChar++) {
    43a0:	42a6      	cmp	r6, r4
    43a2:	d1f7      	bne.n	4394 <_Z14MoveToPositionh.part.2+0x50>
        return SendChar('\r') && SendChar('\n');
    43a4:	210d      	movs	r1, #13
    43a6:	4834      	ldr	r0, [pc, #208]	; (4478 <_Z14MoveToPositionh.part.2+0x134>)
    43a8:	f001 feb2 	bl	6110 <_ZN9ClearCore9SerialUsb8SendCharEh>
    43ac:	4604      	mov	r4, r0
    43ae:	2800      	cmp	r0, #0
    43b0:	d149      	bne.n	4446 <_Z14MoveToPositionh.part.2+0x102>
        return true;
    43b2:	2401      	movs	r4, #1
}
    43b4:	4620      	mov	r0, r4
    43b6:	bd70      	pop	{r4, r5, r6, pc}
    43b8:	4c32      	ldr	r4, [pc, #200]	; (4484 <_Z14MoveToPositionh.part.2+0x140>)
            if (!SendChar(buffer[iChar])) {
    43ba:	4d2f      	ldr	r5, [pc, #188]	; (4478 <_Z14MoveToPositionh.part.2+0x134>)
    43bc:	f104 0615 	add.w	r6, r4, #21
    43c0:	f814 1b01 	ldrb.w	r1, [r4], #1
    43c4:	4628      	mov	r0, r5
    43c6:	f001 fea3 	bl	6110 <_ZN9ClearCore9SerialUsb8SendCharEh>
    43ca:	b138      	cbz	r0, 43dc <_Z14MoveToPositionh.part.2+0x98>
        for (size_t iChar = 0; iChar < bufferSize; iChar++) {
    43cc:	42b4      	cmp	r4, r6
    43ce:	d1f7      	bne.n	43c0 <_Z14MoveToPositionh.part.2+0x7c>
        return SendChar('\r') && SendChar('\n');
    43d0:	210d      	movs	r1, #13
    43d2:	4829      	ldr	r0, [pc, #164]	; (4478 <_Z14MoveToPositionh.part.2+0x134>)
    43d4:	f001 fe9c 	bl	6110 <_ZN9ClearCore9SerialUsb8SendCharEh>
    43d8:	2800      	cmp	r0, #0
    43da:	d143      	bne.n	4464 <_Z14MoveToPositionh.part.2+0x120>
    43dc:	4c2a      	ldr	r4, [pc, #168]	; (4488 <_Z14MoveToPositionh.part.2+0x144>)
            if (!SendChar(buffer[iChar])) {
    43de:	4d26      	ldr	r5, [pc, #152]	; (4478 <_Z14MoveToPositionh.part.2+0x134>)
    43e0:	f104 0644 	add.w	r6, r4, #68	; 0x44
    43e4:	f814 1b01 	ldrb.w	r1, [r4], #1
    43e8:	4628      	mov	r0, r5
    43ea:	f001 fe91 	bl	6110 <_ZN9ClearCore9SerialUsb8SendCharEh>
    43ee:	b130      	cbz	r0, 43fe <_Z14MoveToPositionh.part.2+0xba>
        for (size_t iChar = 0; iChar < bufferSize; iChar++) {
    43f0:	42b4      	cmp	r4, r6
    43f2:	d1f7      	bne.n	43e4 <_Z14MoveToPositionh.part.2+0xa0>
        return SendChar('\r') && SendChar('\n');
    43f4:	210d      	movs	r1, #13
    43f6:	4820      	ldr	r0, [pc, #128]	; (4478 <_Z14MoveToPositionh.part.2+0x134>)
    43f8:	f001 fe8a 	bl	6110 <_ZN9ClearCore9SerialUsb8SendCharEh>
    43fc:	bb68      	cbnz	r0, 445a <_Z14MoveToPositionh.part.2+0x116>
    43fe:	4c23      	ldr	r4, [pc, #140]	; (448c <_Z14MoveToPositionh.part.2+0x148>)
            if (!SendChar(buffer[iChar])) {
    4400:	4d1d      	ldr	r5, [pc, #116]	; (4478 <_Z14MoveToPositionh.part.2+0x134>)
    4402:	f104 0640 	add.w	r6, r4, #64	; 0x40
    4406:	f814 1b01 	ldrb.w	r1, [r4], #1
    440a:	4628      	mov	r0, r5
    440c:	f001 fe80 	bl	6110 <_ZN9ClearCore9SerialUsb8SendCharEh>
    4410:	b130      	cbz	r0, 4420 <_Z14MoveToPositionh.part.2+0xdc>
        for (size_t iChar = 0; iChar < bufferSize; iChar++) {
    4412:	42a6      	cmp	r6, r4
    4414:	d1f7      	bne.n	4406 <_Z14MoveToPositionh.part.2+0xc2>
        return SendChar('\r') && SendChar('\n');
    4416:	210d      	movs	r1, #13
    4418:	4817      	ldr	r0, [pc, #92]	; (4478 <_Z14MoveToPositionh.part.2+0x134>)
    441a:	f001 fe79 	bl	6110 <_ZN9ClearCore9SerialUsb8SendCharEh>
    441e:	b9b8      	cbnz	r0, 4450 <_Z14MoveToPositionh.part.2+0x10c>
    4420:	210d      	movs	r1, #13
    4422:	4815      	ldr	r0, [pc, #84]	; (4478 <_Z14MoveToPositionh.part.2+0x134>)
    4424:	f001 fe74 	bl	6110 <_ZN9ClearCore9SerialUsb8SendCharEh>
    4428:	4604      	mov	r4, r0
    442a:	2800      	cmp	r0, #0
    442c:	d0c2      	beq.n	43b4 <_Z14MoveToPositionh.part.2+0x70>
    442e:	210a      	movs	r1, #10
        return false;
    4430:	2400      	movs	r4, #0
    4432:	4811      	ldr	r0, [pc, #68]	; (4478 <_Z14MoveToPositionh.part.2+0x134>)
    4434:	f001 fe6c 	bl	6110 <_ZN9ClearCore9SerialUsb8SendCharEh>
}
    4438:	4620      	mov	r0, r4
    443a:	bd70      	pop	{r4, r5, r6, pc}
    443c:	210a      	movs	r1, #10
    443e:	480e      	ldr	r0, [pc, #56]	; (4478 <_Z14MoveToPositionh.part.2+0x134>)
    4440:	f001 fe66 	bl	6110 <_ZN9ClearCore9SerialUsb8SendCharEh>
    4444:	e795      	b.n	4372 <_Z14MoveToPositionh.part.2+0x2e>
    4446:	210a      	movs	r1, #10
    4448:	480b      	ldr	r0, [pc, #44]	; (4478 <_Z14MoveToPositionh.part.2+0x134>)
    444a:	f001 fe61 	bl	6110 <_ZN9ClearCore9SerialUsb8SendCharEh>
    444e:	e7b1      	b.n	43b4 <_Z14MoveToPositionh.part.2+0x70>
    4450:	210a      	movs	r1, #10
    4452:	4809      	ldr	r0, [pc, #36]	; (4478 <_Z14MoveToPositionh.part.2+0x134>)
    4454:	f001 fe5c 	bl	6110 <_ZN9ClearCore9SerialUsb8SendCharEh>
    4458:	e7e2      	b.n	4420 <_Z14MoveToPositionh.part.2+0xdc>
    445a:	210a      	movs	r1, #10
    445c:	4806      	ldr	r0, [pc, #24]	; (4478 <_Z14MoveToPositionh.part.2+0x134>)
    445e:	f001 fe57 	bl	6110 <_ZN9ClearCore9SerialUsb8SendCharEh>
    4462:	e7cc      	b.n	43fe <_Z14MoveToPositionh.part.2+0xba>
    4464:	210a      	movs	r1, #10
    4466:	4804      	ldr	r0, [pc, #16]	; (4478 <_Z14MoveToPositionh.part.2+0x134>)
    4468:	f001 fe52 	bl	6110 <_ZN9ClearCore9SerialUsb8SendCharEh>
    446c:	e7b6      	b.n	43dc <_Z14MoveToPositionh.part.2+0x98>
    446e:	bf00      	nop
    4470:	00493e00 	.word	0x00493e00
    4474:	00022900 	.word	0x00022900
    4478:	20001488 	.word	0x20001488
    447c:	20000b68 	.word	0x20000b68
    4480:	000229c0 	.word	0x000229c0
    4484:	0002291c 	.word	0x0002291c
    4488:	00022934 	.word	0x00022934
    448c:	0002297c 	.word	0x0002297c

00004490 <main>:
{
    4490:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
        The only valid mode for this connector type is: #INPUT_DIGITAL.
        \return Returns false if the mode is invalid or setup fails.
    **/
    virtual bool Mode(ConnectorModes newMode) override {
        if (newMode == ConnectorModes::INPUT_DIGITAL) {
            m_mode = newMode;
    4494:	4da0      	ldr	r5, [pc, #640]	; (4718 <main+0x288>)
    HomingSensor.InterruptHandlerSet(HomingSensorCallback, InputManager::CHANGE);
    4496:	49a1      	ldr	r1, [pc, #644]	; (471c <main+0x28c>)
        \endcode

        \param[in] newMode HLFB mode to switch to
    **/
    void HlfbMode(HlfbModes newMode) {
        if (m_hlfbMode == newMode) {
    4498:	f8df a28c 	ldr.w	sl, [pc, #652]	; 4728 <main+0x298>
    449c:	2402      	movs	r4, #2
{
    449e:	b08b      	sub	sp, #44	; 0x2c
    HomingSensor.InterruptHandlerSet(HomingSensorCallback, InputManager::CHANGE);
    44a0:	4622      	mov	r2, r4
    44a2:	2301      	movs	r3, #1
    44a4:	4628      	mov	r0, r5
    44a6:	71ac      	strb	r4, [r5, #6]
    44a8:	f000 fad4 	bl	4a54 <_ZN9ClearCore9DigitalIn19InterruptHandlerSetEPFvvENS_12InputManager16InterruptTriggerEb>
    MotorMgr.MotorModeSet(MotorManager::MOTOR_ALL,
    44ac:	4b9c      	ldr	r3, [pc, #624]	; (4720 <main+0x290>)
                          Connector::CPM_MODE_A_DIRECT_B_DIRECT);
    44ae:	4621      	mov	r1, r4
    44b0:	6818      	ldr	r0, [r3, #0]
    44b2:	2209      	movs	r2, #9
    44b4:	f006 ff04 	bl	b2c0 <_ZN9ClearCore12MotorManager12MotorModeSetENS0_9MotorPairENS_9Connector14ConnectorModesE>
    44b8:	f89a 30d8 	ldrb.w	r3, [sl, #216]	; 0xd8
    44bc:	42a3      	cmp	r3, r4
    44be:	d007      	beq.n	44d0 <main+0x40>
            return;
        }
        m_hlfbMode = newMode;
        m_hlfbCarrierLost = true;
        m_hlfbDuty = HLFB_DUTY_UNKNOWN;
    44c0:	4a98      	ldr	r2, [pc, #608]	; (4724 <main+0x294>)
        m_hlfbMode = newMode;
    44c2:	f88a 40d8 	strb.w	r4, [sl, #216]	; 0xd8
        m_hlfbCarrierLost = true;
    44c6:	2301      	movs	r3, #1
        m_hlfbDuty = HLFB_DUTY_UNKNOWN;
    44c8:	f8ca 20f0 	str.w	r2, [sl, #240]	; 0xf0
        m_hlfbCarrierLost = true;
    44cc:	f88a 312f 	strb.w	r3, [sl, #303]	; 0x12f
            case HLFB_CARRIER_45_HZ:
                m_hlfbCarrierLossStateChange_ms =
                    HLFB_CARRIER_LOSS_STATE_CHANGE_MS_45_HZ;
                break;
            case HLFB_CARRIER_482_HZ:
                m_hlfbCarrierLossStateChange_ms =
    44d0:	2204      	movs	r2, #4
                    HLFB_CARRIER_LOSS_STATE_CHANGE_MS_482_HZ;
                break;
            default:
                return false;
        }
        m_hlfbCarrierFrequency = freq;
    44d2:	2301      	movs	r3, #1
    motor.MotorInAState(false);
    44d4:	2100      	movs	r1, #0
    44d6:	4894      	ldr	r0, [pc, #592]	; (4728 <main+0x298>)
                m_hlfbCarrierLossStateChange_ms =
    44d8:	f8ca 20e8 	str.w	r2, [sl, #232]	; 0xe8
        m_hlfbCarrierFrequency = freq;
    44dc:	f88a 30e4 	strb.w	r3, [sl, #228]	; 0xe4
    44e0:	f000 fe48 	bl	5174 <_ZN9ClearCore11MotorDriver13MotorInAStateEb>
    motor.MotorInBState(HomingSensor.State());
    44e4:	488c      	ldr	r0, [pc, #560]	; (4718 <main+0x288>)
    while (!SerialPort && Milliseconds() - startTime < timeout)
    44e6:	4e91      	ldr	r6, [pc, #580]	; (472c <main+0x29c>)
    motor.MotorInBState(HomingSensor.State());
    44e8:	f000 f958 	bl	479c <_ZN9ClearCore9DigitalIn5StateEv>
    44ec:	1c01      	adds	r1, r0, #0
    44ee:	bf18      	it	ne
    44f0:	2101      	movne	r1, #1
    44f2:	488d      	ldr	r0, [pc, #564]	; (4728 <main+0x298>)
    44f4:	f000 fe58 	bl	51a8 <_ZN9ClearCore11MotorDriver13MotorInBStateEb>
    SerialPort.Speed(baudRate);
    44f8:	f44f 5116 	mov.w	r1, #9600	; 0x2580
    44fc:	4630      	mov	r0, r6
    44fe:	f001 fdef 	bl	60e0 <_ZN9ClearCore9SerialUsb5SpeedEm>
    uint32_t startTime = Milliseconds();
    4502:	f005 fc33 	bl	9d6c <Milliseconds>
    4506:	4605      	mov	r5, r0
    SerialPort.PortOpen();
    4508:	4630      	mov	r0, r6
    450a:	f001 fddd 	bl	60c8 <_ZN9ClearCore9SerialUsb8PortOpenEv>
    while (!SerialPort && Milliseconds() - startTime < timeout)
    450e:	f241 3487 	movw	r4, #4999	; 0x1387
    4512:	4630      	mov	r0, r6
    4514:	f001 fdd2 	bl	60bc <_ZN9ClearCore9SerialUsb10PortIsOpenEv>
    4518:	2800      	cmp	r0, #0
    451a:	f000 80ef 	beq.w	46fc <main+0x26c>
    motor.EnableRequest(true);
    451e:	2101      	movs	r1, #1
    4520:	4881      	ldr	r0, [pc, #516]	; (4728 <main+0x298>)
    4522:	f000 fe59 	bl	51d8 <_ZN9ClearCore11MotorDriver13EnableRequestEb>
    SerialPort.SendLine("Motor Enabled");
    4526:	4882      	ldr	r0, [pc, #520]	; (4730 <main+0x2a0>)
    4528:	f7ff feea 	bl	4300 <_ZN9ClearCore7ISerial8SendLineEPKc.constprop.6>
    SerialPort.SendLine("Waiting for HLFB...");
    452c:	4881      	ldr	r0, [pc, #516]	; (4734 <main+0x2a4>)
    452e:	f7ff fee7 	bl	4300 <_ZN9ClearCore7ISerial8SendLineEPKc.constprop.6>
    while (motor.HlfbState() != MotorDriver::HLFB_ASSERTED &&
    4532:	f89a 30f4 	ldrb.w	r3, [sl, #244]	; 0xf4
    4536:	2b01      	cmp	r3, #1
    4538:	d003      	beq.n	4542 <main+0xb2>
           !motor.StatusReg().bit.MotorInFault)
    453a:	f8da 3118 	ldr.w	r3, [sl, #280]	; 0x118
    while (motor.HlfbState() != MotorDriver::HLFB_ASSERTED &&
    453e:	06d8      	lsls	r0, r3, #27
    4540:	d5f7      	bpl.n	4532 <main+0xa2>
    if (motor.StatusReg().bit.MotorInFault)
    4542:	f8da 3118 	ldr.w	r3, [sl, #280]	; 0x118
    4546:	06d9      	lsls	r1, r3, #27
    4548:	f140 80d4 	bpl.w	46f4 <main+0x264>
        SerialPort.SendLine("Motor fault detected.");
    454c:	487a      	ldr	r0, [pc, #488]	; (4738 <main+0x2a8>)
    454e:	f7ff fed7 	bl	4300 <_ZN9ClearCore7ISerial8SendLineEPKc.constprop.6>
            SerialPort.SendLine("Enable automatic fault handling by setting HANDLE_MOTOR_FAULTS to 1.");
    4552:	487a      	ldr	r0, [pc, #488]	; (473c <main+0x2ac>)
    4554:	f7ff fed4 	bl	4300 <_ZN9ClearCore7ISerial8SendLineEPKc.constprop.6>
        SerialPort.SendLine("Enabling may not have completed as expected. Proceed with caution.");
    4558:	4879      	ldr	r0, [pc, #484]	; (4740 <main+0x2b0>)
    455a:	f7ff fed1 	bl	4300 <_ZN9ClearCore7ISerial8SendLineEPKc.constprop.6>
    455e:	210d      	movs	r1, #13
    4560:	4872      	ldr	r0, [pc, #456]	; (472c <main+0x29c>)
    4562:	f001 fdd5 	bl	6110 <_ZN9ClearCore9SerialUsb8SendCharEh>
    4566:	b118      	cbz	r0, 4570 <main+0xe0>
    4568:	210a      	movs	r1, #10
    456a:	4870      	ldr	r0, [pc, #448]	; (472c <main+0x29c>)
    456c:	f001 fdd0 	bl	6110 <_ZN9ClearCore9SerialUsb8SendCharEh>
    if (motor.StatusReg().bit.MotorInFault)
    4570:	f8da 3118 	ldr.w	r3, [sl, #280]	; 0x118
    4574:	4e73      	ldr	r6, [pc, #460]	; (4744 <main+0x2b4>)
    4576:	4d74      	ldr	r5, [pc, #464]	; (4748 <main+0x2b8>)
    4578:	f8df 81d8 	ldr.w	r8, [pc, #472]	; 4754 <main+0x2c4>
    457c:	4f73      	ldr	r7, [pc, #460]	; (474c <main+0x2bc>)
            if (!SendChar(buffer[iChar])) {
    457e:	4c6b      	ldr	r4, [pc, #428]	; (472c <main+0x29c>)
    4580:	06da      	lsls	r2, r3, #27
    4582:	f100 8081 	bmi.w	4688 <main+0x1f8>
    4586:	f8df 91d0 	ldr.w	r9, [pc, #464]	; 4758 <main+0x2c8>
    458a:	f819 1b01 	ldrb.w	r1, [r9], #1
    458e:	4620      	mov	r0, r4
    4590:	f001 fdbe 	bl	6110 <_ZN9ClearCore9SerialUsb8SendCharEh>
    4594:	b108      	cbz	r0, 459a <main+0x10a>
        for (size_t iChar = 0; iChar < bufferSize; iChar++) {
    4596:	454d      	cmp	r5, r9
    4598:	d1f7      	bne.n	458a <main+0xfa>
        if (radix < 2 || radix > 16) {
            // Only support bases 2 through 16.
            return false;
        }
        char strRep[1 + 8 * sizeof(number)];
        utoa(number, strRep, radix);
    459a:	220a      	movs	r2, #10
    459c:	a901      	add	r1, sp, #4
    459e:	2001      	movs	r0, #1
    45a0:	f01b fec4 	bl	2032c <utoa>
        return Send(nullTermStr, strlen(nullTermStr));
    45a4:	a801      	add	r0, sp, #4
    45a6:	f01a fb6b 	bl	1ec80 <strlen>
        for (size_t iChar = 0; iChar < bufferSize; iChar++) {
    45aa:	b168      	cbz	r0, 45c8 <main+0x138>
    45ac:	ab01      	add	r3, sp, #4
    45ae:	eb03 0b00 	add.w	fp, r3, r0
    45b2:	4699      	mov	r9, r3
    45b4:	e001      	b.n	45ba <main+0x12a>
    45b6:	45d9      	cmp	r9, fp
    45b8:	d006      	beq.n	45c8 <main+0x138>
            if (!SendChar(buffer[iChar])) {
    45ba:	f819 1b01 	ldrb.w	r1, [r9], #1
    45be:	4620      	mov	r0, r4
    45c0:	f001 fda6 	bl	6110 <_ZN9ClearCore9SerialUsb8SendCharEh>
    45c4:	2800      	cmp	r0, #0
    45c6:	d1f6      	bne.n	45b6 <main+0x126>
        motor.MotorInAState(false);
    45c8:	2100      	movs	r1, #0
    45ca:	4857      	ldr	r0, [pc, #348]	; (4728 <main+0x298>)
    45cc:	f8df 918c 	ldr.w	r9, [pc, #396]	; 475c <main+0x2cc>
    45d0:	f000 fdd0 	bl	5174 <_ZN9ClearCore11MotorDriver13MotorInAStateEb>
    45d4:	f819 1b01 	ldrb.w	r1, [r9], #1
    45d8:	4620      	mov	r0, r4
    45da:	f001 fd99 	bl	6110 <_ZN9ClearCore9SerialUsb8SendCharEh>
    45de:	b138      	cbz	r0, 45f0 <main+0x160>
        for (size_t iChar = 0; iChar < bufferSize; iChar++) {
    45e0:	45c8      	cmp	r8, r9
    45e2:	d1f7      	bne.n	45d4 <main+0x144>
        return SendChar('\r') && SendChar('\n');
    45e4:	210d      	movs	r1, #13
    45e6:	4620      	mov	r0, r4
    45e8:	f001 fd92 	bl	6110 <_ZN9ClearCore9SerialUsb8SendCharEh>
    45ec:	2800      	cmp	r0, #0
    45ee:	d17c      	bne.n	46ea <main+0x25a>
    45f0:	f7ff fea8 	bl	4344 <_Z14MoveToPositionh.part.2>
    45f4:	a146      	add	r1, pc, #280	; (adr r1, 4710 <main+0x280>)
    45f6:	e9d1 0100 	ldrd	r0, r1, [r1]
    45fa:	f005 fbe1 	bl	9dc0 <Delay_cycles>
    if (motor.StatusReg().bit.MotorInFault)
    45fe:	f8da 3118 	ldr.w	r3, [sl, #280]	; 0x118
    4602:	06db      	lsls	r3, r3, #27
    4604:	d456      	bmi.n	46b4 <main+0x224>
    4606:	f8df 9150 	ldr.w	r9, [pc, #336]	; 4758 <main+0x2c8>
            if (!SendChar(buffer[iChar])) {
    460a:	f819 1b01 	ldrb.w	r1, [r9], #1
    460e:	4620      	mov	r0, r4
    4610:	f001 fd7e 	bl	6110 <_ZN9ClearCore9SerialUsb8SendCharEh>
    4614:	b108      	cbz	r0, 461a <main+0x18a>
        for (size_t iChar = 0; iChar < bufferSize; iChar++) {
    4616:	454d      	cmp	r5, r9
    4618:	d1f7      	bne.n	460a <main+0x17a>
        utoa(number, strRep, radix);
    461a:	220a      	movs	r2, #10
    461c:	a901      	add	r1, sp, #4
    461e:	2002      	movs	r0, #2
    4620:	f01b fe84 	bl	2032c <utoa>
        return Send(nullTermStr, strlen(nullTermStr));
    4624:	a801      	add	r0, sp, #4
    4626:	f01a fb2b 	bl	1ec80 <strlen>
        for (size_t iChar = 0; iChar < bufferSize; iChar++) {
    462a:	b168      	cbz	r0, 4648 <main+0x1b8>
    462c:	ab01      	add	r3, sp, #4
    462e:	eb03 0b00 	add.w	fp, r3, r0
    4632:	4699      	mov	r9, r3
    4634:	e001      	b.n	463a <main+0x1aa>
    4636:	45d9      	cmp	r9, fp
    4638:	d006      	beq.n	4648 <main+0x1b8>
            if (!SendChar(buffer[iChar])) {
    463a:	f819 1b01 	ldrb.w	r1, [r9], #1
    463e:	4620      	mov	r0, r4
    4640:	f001 fd66 	bl	6110 <_ZN9ClearCore9SerialUsb8SendCharEh>
    4644:	2800      	cmp	r0, #0
    4646:	d1f6      	bne.n	4636 <main+0x1a6>
        motor.MotorInAState(true);
    4648:	2101      	movs	r1, #1
    464a:	4837      	ldr	r0, [pc, #220]	; (4728 <main+0x298>)
    464c:	f8df 9110 	ldr.w	r9, [pc, #272]	; 4760 <main+0x2d0>
    4650:	f000 fd90 	bl	5174 <_ZN9ClearCore11MotorDriver13MotorInAStateEb>
    4654:	f819 1b01 	ldrb.w	r1, [r9], #1
    4658:	4620      	mov	r0, r4
    465a:	f001 fd59 	bl	6110 <_ZN9ClearCore9SerialUsb8SendCharEh>
    465e:	b138      	cbz	r0, 4670 <main+0x1e0>
        for (size_t iChar = 0; iChar < bufferSize; iChar++) {
    4660:	454f      	cmp	r7, r9
    4662:	d1f7      	bne.n	4654 <main+0x1c4>
        return SendChar('\r') && SendChar('\n');
    4664:	210d      	movs	r1, #13
    4666:	4620      	mov	r0, r4
    4668:	f001 fd52 	bl	6110 <_ZN9ClearCore9SerialUsb8SendCharEh>
    466c:	2800      	cmp	r0, #0
    466e:	d137      	bne.n	46e0 <main+0x250>
    4670:	f7ff fe68 	bl	4344 <_Z14MoveToPositionh.part.2>
    4674:	a126      	add	r1, pc, #152	; (adr r1, 4710 <main+0x280>)
    4676:	e9d1 0100 	ldrd	r0, r1, [r1]
    467a:	f005 fba1 	bl	9dc0 <Delay_cycles>
    if (motor.StatusReg().bit.MotorInFault)
    467e:	f8da 3118 	ldr.w	r3, [sl, #280]	; 0x118
    4682:	06da      	lsls	r2, r3, #27
    4684:	f57f af7f 	bpl.w	4586 <main+0xf6>
    4688:	f8df 90d8 	ldr.w	r9, [pc, #216]	; 4764 <main+0x2d4>
            if (!SendChar(buffer[iChar])) {
    468c:	f819 1b01 	ldrb.w	r1, [r9], #1
    4690:	4620      	mov	r0, r4
    4692:	f001 fd3d 	bl	6110 <_ZN9ClearCore9SerialUsb8SendCharEh>
    4696:	2800      	cmp	r0, #0
    4698:	d0ac      	beq.n	45f4 <main+0x164>
        for (size_t iChar = 0; iChar < bufferSize; iChar++) {
    469a:	454e      	cmp	r6, r9
    469c:	d1f6      	bne.n	468c <main+0x1fc>
        return SendChar('\r') && SendChar('\n');
    469e:	210d      	movs	r1, #13
    46a0:	4620      	mov	r0, r4
    46a2:	f001 fd35 	bl	6110 <_ZN9ClearCore9SerialUsb8SendCharEh>
    46a6:	2800      	cmp	r0, #0
    46a8:	d0a4      	beq.n	45f4 <main+0x164>
    46aa:	210a      	movs	r1, #10
    46ac:	4620      	mov	r0, r4
    46ae:	f001 fd2f 	bl	6110 <_ZN9ClearCore9SerialUsb8SendCharEh>
    46b2:	e79f      	b.n	45f4 <main+0x164>
    46b4:	f8df 90ac 	ldr.w	r9, [pc, #172]	; 4764 <main+0x2d4>
            if (!SendChar(buffer[iChar])) {
    46b8:	f819 1b01 	ldrb.w	r1, [r9], #1
    46bc:	4620      	mov	r0, r4
    46be:	f001 fd27 	bl	6110 <_ZN9ClearCore9SerialUsb8SendCharEh>
    46c2:	2800      	cmp	r0, #0
    46c4:	d0d6      	beq.n	4674 <main+0x1e4>
        for (size_t iChar = 0; iChar < bufferSize; iChar++) {
    46c6:	45b1      	cmp	r9, r6
    46c8:	d1f6      	bne.n	46b8 <main+0x228>
        return SendChar('\r') && SendChar('\n');
    46ca:	210d      	movs	r1, #13
    46cc:	4620      	mov	r0, r4
    46ce:	f001 fd1f 	bl	6110 <_ZN9ClearCore9SerialUsb8SendCharEh>
    46d2:	2800      	cmp	r0, #0
    46d4:	d0ce      	beq.n	4674 <main+0x1e4>
    46d6:	210a      	movs	r1, #10
    46d8:	4620      	mov	r0, r4
    46da:	f001 fd19 	bl	6110 <_ZN9ClearCore9SerialUsb8SendCharEh>
    46de:	e7c9      	b.n	4674 <main+0x1e4>
    46e0:	210a      	movs	r1, #10
    46e2:	4620      	mov	r0, r4
    46e4:	f001 fd14 	bl	6110 <_ZN9ClearCore9SerialUsb8SendCharEh>
    46e8:	e7c2      	b.n	4670 <main+0x1e0>
    46ea:	210a      	movs	r1, #10
    46ec:	4620      	mov	r0, r4
    46ee:	f001 fd0f 	bl	6110 <_ZN9ClearCore9SerialUsb8SendCharEh>
    46f2:	e77d      	b.n	45f0 <main+0x160>
        SerialPort.SendLine("Motor Ready");
    46f4:	4816      	ldr	r0, [pc, #88]	; (4750 <main+0x2c0>)
    46f6:	f7ff fe03 	bl	4300 <_ZN9ClearCore7ISerial8SendLineEPKc.constprop.6>
    46fa:	e739      	b.n	4570 <main+0xe0>
    while (!SerialPort && Milliseconds() - startTime < timeout)
    46fc:	f005 fb36 	bl	9d6c <Milliseconds>
    4700:	1b40      	subs	r0, r0, r5
    4702:	42a0      	cmp	r0, r4
    4704:	f67f af05 	bls.w	4512 <main+0x82>
    4708:	e709      	b.n	451e <main+0x8e>
    470a:	bf00      	nop
    470c:	f3af 8000 	nop.w
    4710:	07270e00 	.word	0x07270e00
    4714:	00000000 	.word	0x00000000
    4718:	20001158 	.word	0x20001158
    471c:	000042d5 	.word	0x000042d5
    4720:	20001c04 	.word	0x20001c04
    4724:	c61c3c00 	.word	0xc61c3c00
    4728:	20000b68 	.word	0x20000b68
    472c:	20001488 	.word	0x20001488
    4730:	00022a70 	.word	0x00022a70
    4734:	00022a80 	.word	0x00022a80
    4738:	0002291c 	.word	0x0002291c
    473c:	00022934 	.word	0x00022934
    4740:	00022a94 	.word	0x00022a94
    4744:	00022a35 	.word	0x00022a35
    4748:	00022a4c 	.word	0x00022a4c
    474c:	00022a6d 	.word	0x00022a6d
    4750:	00022ad8 	.word	0x00022ad8
    4754:	00022a5e 	.word	0x00022a5e
    4758:	00022a38 	.word	0x00022a38
    475c:	00022a50 	.word	0x00022a50
    4760:	00022a60 	.word	0x00022a60
    4764:	000229cc 	.word	0x000229cc

00004768 <_ZN9ClearCore9Connector4ModeEv>:

        \return The connector's current operational mode.
    **/
    virtual ConnectorModes Mode() {
        return m_mode;
    }
    4768:	7980      	ldrb	r0, [r0, #6]
    476a:	4770      	bx	lr

0000476c <_ZN9ClearCore9Connector17ExternalInterruptEv>:
        \note A value of -1 denotes that the connector has no external
        interrupt available.
    **/
    virtual int8_t ExternalInterrupt() {
        return -1;
    }
    476c:	f04f 30ff 	mov.w	r0, #4294967295
    4770:	4770      	bx	lr
    4772:	bf00      	nop

00004774 <_ZN9ClearCore9DigitalIn4ModeEv>:

        \return The connector's current operational mode.
    **/
    virtual ConnectorModes Mode() override {
        return Connector::Mode();
    }
    4774:	7980      	ldrb	r0, [r0, #6]
    4776:	4770      	bx	lr

00004778 <_ZN9ClearCore9DigitalIn4ModeENS_9Connector14ConnectorModesE>:
        \param[in] newMode The new mode to be set.
        The only valid mode for this connector type is: #INPUT_DIGITAL.
        \return Returns false if the mode is invalid or setup fails.
    **/
    virtual bool Mode(ConnectorModes newMode) override {
        if (newMode == ConnectorModes::INPUT_DIGITAL) {
    4778:	2902      	cmp	r1, #2
            m_mode = newMode;
    477a:	bf06      	itte	eq
    477c:	7181      	strbeq	r1, [r0, #6]
            return true;
    477e:	2001      	moveq	r0, #1
        }
        else {
            return false;
    4780:	2000      	movne	r0, #0
        }
    }
    4782:	4770      	bx	lr

00004784 <_ZN9ClearCore9DigitalIn4TypeEv>:

        \return The type of the current connector.
    **/
    Connector::ConnectorTypes Type() override {
        return Connector::DIGITAL_IN_TYPE;
    }
    4784:	2000      	movs	r0, #0
    4786:	4770      	bx	lr

00004788 <_ZN9ClearCore9DigitalIn10IsWritableEv>:

        \return False because the connector is read-only.
    **/
    bool IsWritable() override {
        return false;
    }
    4788:	2000      	movs	r0, #0
    478a:	4770      	bx	lr

0000478c <_ZN9ClearCore9DigitalIn5StateEs>:
        capability.
    **/
    bool State(int16_t newState) override {
        (void)newState;
        return false;
    }
    478c:	2000      	movs	r0, #0
    478e:	4770      	bx	lr

00004790 <_ZN9ClearCore9DigitalIn11IsInHwFaultEv>:
        a fault state is not possible and so this function will always
        return false.
    **/
    bool IsInHwFault() override {
        return false;
    }
    4790:	2000      	movs	r0, #0
    4792:	4770      	bx	lr

00004794 <_ZN9ClearCore9DigitalIn17ExternalInterruptEv>:
        \note A value of -1 denotes that the connector has no external
        interrupt available.
    **/
    int8_t ExternalInterrupt() override {
        return m_extInt;
    }
    4794:	f990 0018 	ldrsb.w	r0, [r0, #24]
    4798:	4770      	bx	lr
    479a:	bf00      	nop

0000479c <_ZN9ClearCore9DigitalIn5StateEv>:
    m_clearCorePin = clearCorePin;
    Mode(INPUT_DIGITAL);
}

int16_t DigitalIn::State() {
    if (m_filterLength == 0) {
    479c:	8d43      	ldrh	r3, [r0, #42]	; 0x2a
    479e:	b113      	cbz	r3, 47a6 <_ZN9ClearCore9DigitalIn5StateEv+0xa>
        // Pull an unfiltered, real time input value.
        return StateRT();
    }
    return m_stateFiltered;
    47a0:	f890 0028 	ldrb.w	r0, [r0, #40]	; 0x28
}
    47a4:	4770      	bx	lr

int16_t DigitalIn::StateRT() {
    // Pull an unfiltered, real time input value.
    return !(*InputMgr.m_inputPtrs[m_inputPort] & m_inputDataMask);
    47a6:	4b06      	ldr	r3, [pc, #24]	; (47c0 <_ZN9ClearCore9DigitalIn5StateEv+0x24>)
    47a8:	68c1      	ldr	r1, [r0, #12]
    47aa:	681a      	ldr	r2, [r3, #0]
    47ac:	6943      	ldr	r3, [r0, #20]
    47ae:	f852 2021 	ldr.w	r2, [r2, r1, lsl #2]
    47b2:	6812      	ldr	r2, [r2, #0]
    47b4:	421a      	tst	r2, r3
    47b6:	bf0c      	ite	eq
    47b8:	2001      	moveq	r0, #1
    47ba:	2000      	movne	r0, #0
    47bc:	4770      	bx	lr
    47be:	bf00      	nop
    47c0:	20000ad0 	.word	0x20000ad0

000047c4 <_ZN9ClearCore9DigitalIn10InitializeE13ClearCorePins>:
    m_filterLength = 3;
    47c4:	4b2e      	ldr	r3, [pc, #184]	; (4880 <_ZN9ClearCore9DigitalIn10InitializeE13ClearCorePins+0xbc>)
void DigitalIn::Initialize(ClearCorePins clearCorePin) {
    47c6:	b4f0      	push	{r4, r5, r6, r7}
    m_filterLength = 3;
    47c8:	f8c0 302a 	str.w	r3, [r0, #42]	; 0x2a
    PMUX_SELECTION(m_inputPort, m_inputDataBit, PER_EXTINT);
    47cc:	68c3      	ldr	r3, [r0, #12]
    47ce:	6904      	ldr	r4, [r0, #16]
    47d0:	01da      	lsls	r2, r3, #7
    47d2:	f102 4582 	add.w	r5, r2, #1090519040	; 0x41000000
    m_mode = INVALID_NONE;
    47d6:	2600      	movs	r6, #0
    PMUX_SELECTION(m_inputPort, m_inputDataBit, PER_EXTINT);
    47d8:	f505 4500 	add.w	r5, r5, #32768	; 0x8000
    47dc:	f014 0701 	ands.w	r7, r4, #1
    m_mode = INVALID_NONE;
    47e0:	7186      	strb	r6, [r0, #6]
    m_stateFiltered = false;
    47e2:	f880 6028 	strb.w	r6, [r0, #40]	; 0x28
    PMUX_SELECTION(m_inputPort, m_inputDataBit, PER_EXTINT);
    47e6:	eb05 0554 	add.w	r5, r5, r4, lsr #1
    47ea:	d034      	beq.n	4856 <_ZN9ClearCore9DigitalIn10InitializeE13ClearCorePins+0x92>
    47ec:	f895 7030 	ldrb.w	r7, [r5, #48]	; 0x30
    47f0:	f366 1707 	bfi	r7, r6, #4, #4
    47f4:	f885 7030 	strb.w	r7, [r5, #48]	; 0x30
        PIN_CONFIGURATION(m_inputPort, m_inputDataBit,
    47f8:	f102 4282 	add.w	r2, r2, #1090519040	; 0x41000000
    if (m_interruptAvail) {
    47fc:	7e45      	ldrb	r5, [r0, #25]
        PIN_CONFIGURATION(m_inputPort, m_inputDataBit,
    47fe:	f502 4200 	add.w	r2, r2, #32768	; 0x8000
    4802:	4422      	add	r2, r4
    if (m_interruptAvail) {
    4804:	2d00      	cmp	r5, #0
    4806:	d134      	bne.n	4872 <_ZN9ClearCore9DigitalIn10InitializeE13ClearCorePins+0xae>
        PIN_CONFIGURATION(m_inputPort, m_inputDataBit, PORT_PINCFG_INEN);
    4808:	2402      	movs	r4, #2
    480a:	f882 4040 	strb.w	r4, [r2, #64]	; 0x40
    m_changeRegPtr = &InputMgr.m_inputsUnfilteredChanges[m_inputPort];
    480e:	4a1d      	ldr	r2, [pc, #116]	; (4884 <_ZN9ClearCore9DigitalIn10InitializeE13ClearCorePins+0xc0>)
        \brief Atomic clear of shift register state fields.

        \param[in] bitsToClr LED bit in the shift register to be cleared.
    **/
    void ShifterStateClear(Masks bitsToClr) {
        atomic_and_fetch(&m_patternOutputs[LED_BLINK_IO_SET], ~bitsToClr);
    4810:	6884      	ldr	r4, [r0, #8]
    4812:	6812      	ldr	r2, [r2, #0]
    4814:	4e1c      	ldr	r6, [pc, #112]	; (4888 <_ZN9ClearCore9DigitalIn10InitializeE13ClearCorePins+0xc4>)
    4816:	3306      	adds	r3, #6
    4818:	009b      	lsls	r3, r3, #2
    m_inRegPtr = &InputMgr.m_inputsUnfiltered[m_inputPort];
    481a:	f1a3 050c 	sub.w	r5, r3, #12
    481e:	4415      	add	r5, r2
    m_changeRegPtr = &InputMgr.m_inputsUnfilteredChanges[m_inputPort];
    4820:	4413      	add	r3, r2
    m_inputRegRTPtr = &InputMgr.m_inputRegRT.reg;
    4822:	3224      	adds	r2, #36	; 0x24
    m_inRegPtr = &InputMgr.m_inputsUnfiltered[m_inputPort];
    4824:	6205      	str	r5, [r0, #32]
    m_changeRegPtr = &InputMgr.m_inputsUnfilteredChanges[m_inputPort];
    4826:	61c3      	str	r3, [r0, #28]
    m_inputRegRTPtr = &InputMgr.m_inputRegRT.reg;
    4828:	6242      	str	r2, [r0, #36]	; 0x24
    482a:	43e4      	mvns	r4, r4
    482c:	f3bf 8f5b 	dmb	ish
    4830:	e856 3f00 	ldrex	r3, [r6]
    4834:	4023      	ands	r3, r4
    4836:	e846 3200 	strex	r2, r3, [r6]
    483a:	2a00      	cmp	r2, #0
    483c:	d1f8      	bne.n	4830 <_ZN9ClearCore9DigitalIn10InitializeE13ClearCorePins+0x6c>
    483e:	f3bf 8f5b 	dmb	ish
    Mode(INPUT_DIGITAL);
    4842:	6803      	ldr	r3, [r0, #0]
    4844:	4a11      	ldr	r2, [pc, #68]	; (488c <_ZN9ClearCore9DigitalIn10InitializeE13ClearCorePins+0xc8>)
    4846:	685b      	ldr	r3, [r3, #4]
    m_clearCorePin = clearCorePin;
    4848:	8081      	strh	r1, [r0, #4]
    484a:	4293      	cmp	r3, r2
    484c:	d115      	bne.n	487a <_ZN9ClearCore9DigitalIn10InitializeE13ClearCorePins+0xb6>
            m_mode = newMode;
    484e:	2302      	movs	r3, #2
    4850:	7183      	strb	r3, [r0, #6]
}
    4852:	bcf0      	pop	{r4, r5, r6, r7}
    4854:	4770      	bx	lr
    PMUX_SELECTION(m_inputPort, m_inputDataBit, PER_EXTINT);
    4856:	f895 6030 	ldrb.w	r6, [r5, #48]	; 0x30
    485a:	f367 0603 	bfi	r6, r7, #0, #4
    485e:	f885 6030 	strb.w	r6, [r5, #48]	; 0x30
        PIN_CONFIGURATION(m_inputPort, m_inputDataBit,
    4862:	f102 4282 	add.w	r2, r2, #1090519040	; 0x41000000
    if (m_interruptAvail) {
    4866:	7e45      	ldrb	r5, [r0, #25]
        PIN_CONFIGURATION(m_inputPort, m_inputDataBit,
    4868:	f502 4200 	add.w	r2, r2, #32768	; 0x8000
    486c:	4422      	add	r2, r4
    if (m_interruptAvail) {
    486e:	2d00      	cmp	r5, #0
    4870:	d0ca      	beq.n	4808 <_ZN9ClearCore9DigitalIn10InitializeE13ClearCorePins+0x44>
        PIN_CONFIGURATION(m_inputPort, m_inputDataBit,
    4872:	2403      	movs	r4, #3
    4874:	f882 4040 	strb.w	r4, [r2, #64]	; 0x40
    4878:	e7c9      	b.n	480e <_ZN9ClearCore9DigitalIn10InitializeE13ClearCorePins+0x4a>
    Mode(INPUT_DIGITAL);
    487a:	2102      	movs	r1, #2
}
    487c:	bcf0      	pop	{r4, r5, r6, r7}
    Mode(INPUT_DIGITAL);
    487e:	4718      	bx	r3
    4880:	00010003 	.word	0x00010003
    4884:	20000ad0 	.word	0x20000ad0
    4888:	20001acc 	.word	0x20001acc
    488c:	00004779 	.word	0x00004779

00004890 <_ZN9ClearCore9DigitalIn7RefreshEv>:
    if (*m_changeRegPtr & m_inputDataMask) {
    4890:	69c2      	ldr	r2, [r0, #28]
    4892:	6943      	ldr	r3, [r0, #20]
    4894:	6812      	ldr	r2, [r2, #0]
    4896:	4213      	tst	r3, r2
void DigitalIn::Refresh() {
    4898:	b500      	push	{lr}
    if (*m_changeRegPtr & m_inputDataMask) {
    489a:	d005      	beq.n	48a8 <_ZN9ClearCore9DigitalIn7RefreshEv+0x18>
        m_filterTicksLeft = m_filterLength;
    489c:	8d42      	ldrh	r2, [r0, #42]	; 0x2a
    489e:	8582      	strh	r2, [r0, #44]	; 0x2c
        if (!m_filterLength) {
    48a0:	2a00      	cmp	r2, #0
    48a2:	d039      	beq.n	4918 <_ZN9ClearCore9DigitalIn7RefreshEv+0x88>
    48a4:	f85d fb04 	ldr.w	pc, [sp], #4
    else if (m_filterTicksLeft && !--m_filterTicksLeft) {
    48a8:	8d82      	ldrh	r2, [r0, #44]	; 0x2c
    48aa:	2a00      	cmp	r2, #0
    48ac:	d0fa      	beq.n	48a4 <_ZN9ClearCore9DigitalIn7RefreshEv+0x14>
    48ae:	3a01      	subs	r2, #1
    48b0:	b292      	uxth	r2, r2
    48b2:	8582      	strh	r2, [r0, #44]	; 0x2c
    48b4:	2a00      	cmp	r2, #0
    48b6:	d1f5      	bne.n	48a4 <_ZN9ClearCore9DigitalIn7RefreshEv+0x14>
    InputMgr.InterruptEnable(m_extInt, enable);
}

// Write the current filtered pin status back to the member variables
void DigitalIn::UpdateFilterState() {
    m_stateFiltered = !(*m_inRegPtr & m_inputDataMask);
    48b8:	6a01      	ldr	r1, [r0, #32]
    ShiftReg.ShifterState(m_stateFiltered, m_ledMask);
    48ba:	6882      	ldr	r2, [r0, #8]
    m_stateFiltered = !(*m_inRegPtr & m_inputDataMask);
    48bc:	6809      	ldr	r1, [r1, #0]
    48be:	400b      	ands	r3, r1
    48c0:	2b00      	cmp	r3, #0
    48c2:	bf0c      	ite	eq
    48c4:	2301      	moveq	r3, #1
    48c6:	2300      	movne	r3, #0
    48c8:	f880 3028 	strb.w	r3, [r0, #40]	; 0x28
        : ShifterStateClear(bitsToChange);
    48cc:	d053      	beq.n	4976 <_ZN9ClearCore9DigitalIn7RefreshEv+0xe6>
        atomic_and_fetch(&m_patternOutputs[LED_BLINK_IO_SET], ~bitsToClr);
    48ce:	f3bf 8f5b 	dmb	ish
    48d2:	4b41      	ldr	r3, [pc, #260]	; (49d8 <_ZN9ClearCore9DigitalIn7RefreshEv+0x148>)
    48d4:	43d2      	mvns	r2, r2
    48d6:	e853 1f00 	ldrex	r1, [r3]
    48da:	4011      	ands	r1, r2
    48dc:	e843 1e00 	strex	lr, r1, [r3]
    48e0:	f1be 0f00 	cmp.w	lr, #0
    48e4:	d1f7      	bne.n	48d6 <_ZN9ClearCore9DigitalIn7RefreshEv+0x46>
    48e6:	f3bf 8f5b 	dmb	ish

    // Update the SysManager Register
    if (m_stateFiltered) {
    48ea:	f890 3028 	ldrb.w	r3, [r0, #40]	; 0x28
        atomic_or_fetch(m_inputRegRTPtr, 1UL << m_clearCorePin);
    48ee:	f9b0 1004 	ldrsh.w	r1, [r0, #4]
    48f2:	6a42      	ldr	r2, [r0, #36]	; 0x24
    if (m_stateFiltered) {
    48f4:	2b00      	cmp	r3, #0
    48f6:	d14a      	bne.n	498e <_ZN9ClearCore9DigitalIn7RefreshEv+0xfe>
    }
    else {
        atomic_and_fetch(m_inputRegRTPtr, ~(1UL << m_clearCorePin));
    48f8:	f3bf 8f5b 	dmb	ish
    48fc:	2301      	movs	r3, #1
    48fe:	408b      	lsls	r3, r1
    4900:	43db      	mvns	r3, r3
    4902:	e852 1f00 	ldrex	r1, [r2]
    4906:	4019      	ands	r1, r3
    4908:	e842 1000 	strex	r0, r1, [r2]
    490c:	2800      	cmp	r0, #0
    490e:	d1f8      	bne.n	4902 <_ZN9ClearCore9DigitalIn7RefreshEv+0x72>
    4910:	f3bf 8f5b 	dmb	ish
}
    4914:	f85d fb04 	ldr.w	pc, [sp], #4
    m_stateFiltered = !(*m_inRegPtr & m_inputDataMask);
    4918:	6a01      	ldr	r1, [r0, #32]
    ShiftReg.ShifterState(m_stateFiltered, m_ledMask);
    491a:	6882      	ldr	r2, [r0, #8]
    m_stateFiltered = !(*m_inRegPtr & m_inputDataMask);
    491c:	6809      	ldr	r1, [r1, #0]
    491e:	400b      	ands	r3, r1
    4920:	2b00      	cmp	r3, #0
    4922:	bf0c      	ite	eq
    4924:	2301      	moveq	r3, #1
    4926:	2300      	movne	r3, #0
    4928:	f880 3028 	strb.w	r3, [r0, #40]	; 0x28
        : ShifterStateClear(bitsToChange);
    492c:	d047      	beq.n	49be <_ZN9ClearCore9DigitalIn7RefreshEv+0x12e>
        atomic_and_fetch(&m_patternOutputs[LED_BLINK_IO_SET], ~bitsToClr);
    492e:	f3bf 8f5b 	dmb	ish
    4932:	4b29      	ldr	r3, [pc, #164]	; (49d8 <_ZN9ClearCore9DigitalIn7RefreshEv+0x148>)
    4934:	43d2      	mvns	r2, r2
    4936:	e853 1f00 	ldrex	r1, [r3]
    493a:	4011      	ands	r1, r2
    493c:	e843 1e00 	strex	lr, r1, [r3]
    4940:	f1be 0f00 	cmp.w	lr, #0
    4944:	d1f7      	bne.n	4936 <_ZN9ClearCore9DigitalIn7RefreshEv+0xa6>
    4946:	f3bf 8f5b 	dmb	ish
    if (m_stateFiltered) {
    494a:	f890 3028 	ldrb.w	r3, [r0, #40]	; 0x28
        atomic_or_fetch(m_inputRegRTPtr, 1UL << m_clearCorePin);
    494e:	f9b0 1004 	ldrsh.w	r1, [r0, #4]
    4952:	6a42      	ldr	r2, [r0, #36]	; 0x24
    if (m_stateFiltered) {
    4954:	bb3b      	cbnz	r3, 49a6 <_ZN9ClearCore9DigitalIn7RefreshEv+0x116>
        atomic_and_fetch(m_inputRegRTPtr, ~(1UL << m_clearCorePin));
    4956:	f3bf 8f5b 	dmb	ish
    495a:	2301      	movs	r3, #1
    495c:	408b      	lsls	r3, r1
    495e:	43db      	mvns	r3, r3
    4960:	e852 1f00 	ldrex	r1, [r2]
    4964:	4019      	ands	r1, r3
    4966:	e842 1000 	strex	r0, r1, [r2]
    496a:	2800      	cmp	r0, #0
    496c:	d1f8      	bne.n	4960 <_ZN9ClearCore9DigitalIn7RefreshEv+0xd0>
    496e:	f3bf 8f5b 	dmb	ish
}
    4972:	f85d fb04 	ldr.w	pc, [sp], #4
        atomic_or_fetch(&m_patternOutputs[LED_BLINK_IO_SET], bitsToSet);
    4976:	4b18      	ldr	r3, [pc, #96]	; (49d8 <_ZN9ClearCore9DigitalIn7RefreshEv+0x148>)
    4978:	f3bf 8f5b 	dmb	ish
    497c:	e853 1f00 	ldrex	r1, [r3]
    4980:	4311      	orrs	r1, r2
    4982:	e843 1e00 	strex	lr, r1, [r3]
    4986:	f1be 0f00 	cmp.w	lr, #0
    498a:	d0ac      	beq.n	48e6 <_ZN9ClearCore9DigitalIn7RefreshEv+0x56>
    498c:	e7f6      	b.n	497c <_ZN9ClearCore9DigitalIn7RefreshEv+0xec>
        atomic_or_fetch(m_inputRegRTPtr, 1UL << m_clearCorePin);
    498e:	2301      	movs	r3, #1
    4990:	408b      	lsls	r3, r1
    4992:	f3bf 8f5b 	dmb	ish
    4996:	e852 1f00 	ldrex	r1, [r2]
    499a:	4319      	orrs	r1, r3
    499c:	e842 1000 	strex	r0, r1, [r2]
    49a0:	2800      	cmp	r0, #0
    49a2:	d0e4      	beq.n	496e <_ZN9ClearCore9DigitalIn7RefreshEv+0xde>
    49a4:	e7f7      	b.n	4996 <_ZN9ClearCore9DigitalIn7RefreshEv+0x106>
    49a6:	2301      	movs	r3, #1
    49a8:	408b      	lsls	r3, r1
    49aa:	f3bf 8f5b 	dmb	ish
    49ae:	e852 1f00 	ldrex	r1, [r2]
    49b2:	4319      	orrs	r1, r3
    49b4:	e842 1000 	strex	r0, r1, [r2]
    49b8:	2800      	cmp	r0, #0
    49ba:	d0d8      	beq.n	496e <_ZN9ClearCore9DigitalIn7RefreshEv+0xde>
    49bc:	e7f7      	b.n	49ae <_ZN9ClearCore9DigitalIn7RefreshEv+0x11e>
    49be:	4b06      	ldr	r3, [pc, #24]	; (49d8 <_ZN9ClearCore9DigitalIn7RefreshEv+0x148>)
    49c0:	f3bf 8f5b 	dmb	ish
    49c4:	e853 1f00 	ldrex	r1, [r3]
    49c8:	4311      	orrs	r1, r2
    49ca:	e843 1e00 	strex	lr, r1, [r3]
    49ce:	f1be 0f00 	cmp.w	lr, #0
    49d2:	d0b8      	beq.n	4946 <_ZN9ClearCore9DigitalIn7RefreshEv+0xb6>
    49d4:	e7f6      	b.n	49c4 <_ZN9ClearCore9DigitalIn7RefreshEv+0x134>
    49d6:	bf00      	nop
    49d8:	20001acc 	.word	0x20001acc

000049dc <_ZN9ClearCore9ConnectorC1Ev>:
      m_mode(INVALID_NONE) {}
    49dc:	4a03      	ldr	r2, [pc, #12]	; (49ec <_ZN9ClearCore9ConnectorC1Ev+0x10>)
    49de:	6002      	str	r2, [r0, #0]
    49e0:	f64f 71ff 	movw	r1, #65535	; 0xffff
    49e4:	2200      	movs	r2, #0
    49e6:	8081      	strh	r1, [r0, #4]
    49e8:	7182      	strb	r2, [r0, #6]
    49ea:	4770      	bx	lr
    49ec:	00022aec 	.word	0x00022aec

000049f0 <_ZN9ClearCore9DigitalInC1ENS_13ShiftRegister5MasksEPK15PeripheralRoute>:
DigitalIn::DigitalIn(
    49f0:	b470      	push	{r4, r5, r6}
      m_inputPort(inputInfo->gpioPort),
    49f2:	f992 4001 	ldrsb.w	r4, [r2, #1]
    49f6:	60c4      	str	r4, [r0, #12]
      m_filterTicksLeft(1) {}
    49f8:	4d0d      	ldr	r5, [pc, #52]	; (4a30 <_ZN9ClearCore9DigitalInC1ENS_13ShiftRegister5MasksEPK15PeripheralRoute+0x40>)
    49fa:	6081      	str	r1, [r0, #8]
      m_mode(INVALID_NONE) {}
    49fc:	2400      	movs	r4, #0
    49fe:	f64f 76ff 	movw	r6, #65535	; 0xffff
    4a02:	8086      	strh	r6, [r0, #4]
    4a04:	7184      	strb	r4, [r0, #6]
      m_filterTicksLeft(1) {}
    4a06:	6005      	str	r5, [r0, #0]
      m_inputDataBit(inputInfo->gpioPin),
    4a08:	7895      	ldrb	r5, [r2, #2]
    4a0a:	6105      	str	r5, [r0, #16]
      m_inputDataMask(1UL << inputInfo->gpioPin),
    4a0c:	2101      	movs	r1, #1
    4a0e:	40a9      	lsls	r1, r5
      m_filterTicksLeft(1) {}
    4a10:	6141      	str	r1, [r0, #20]
    4a12:	78d1      	ldrb	r1, [r2, #3]
    4a14:	7601      	strb	r1, [r0, #24]
    4a16:	7911      	ldrb	r1, [r2, #4]
    4a18:	4a06      	ldr	r2, [pc, #24]	; (4a34 <_ZN9ClearCore9DigitalInC1ENS_13ShiftRegister5MasksEPK15PeripheralRoute+0x44>)
    4a1a:	61c4      	str	r4, [r0, #28]
    4a1c:	6204      	str	r4, [r0, #32]
    4a1e:	6244      	str	r4, [r0, #36]	; 0x24
    4a20:	f880 4028 	strb.w	r4, [r0, #40]	; 0x28
    4a24:	7641      	strb	r1, [r0, #25]
    4a26:	f8c0 202a 	str.w	r2, [r0, #42]	; 0x2a
    4a2a:	bc70      	pop	{r4, r5, r6}
    4a2c:	4770      	bx	lr
    4a2e:	bf00      	nop
    4a30:	00022b1c 	.word	0x00022b1c
    4a34:	00010003 	.word	0x00010003

00004a38 <_ZN9ClearCore9DigitalIn7StateRTEv>:
    return !(*InputMgr.m_inputPtrs[m_inputPort] & m_inputDataMask);
    4a38:	4b05      	ldr	r3, [pc, #20]	; (4a50 <_ZN9ClearCore9DigitalIn7StateRTEv+0x18>)
    4a3a:	68c1      	ldr	r1, [r0, #12]
    4a3c:	681a      	ldr	r2, [r3, #0]
    4a3e:	6943      	ldr	r3, [r0, #20]
    4a40:	f852 2021 	ldr.w	r2, [r2, r1, lsl #2]
    4a44:	6812      	ldr	r2, [r2, #0]
    4a46:	421a      	tst	r2, r3
}
    4a48:	bf0c      	ite	eq
    4a4a:	2001      	moveq	r0, #1
    4a4c:	2000      	movne	r0, #0
    4a4e:	4770      	bx	lr
    4a50:	20000ad0 	.word	0x20000ad0

00004a54 <_ZN9ClearCore9DigitalIn19InterruptHandlerSetEPFvvENS_12InputManager16InterruptTriggerEb>:
                                    bool enable) {
    4a54:	b530      	push	{r4, r5, lr}
    4a56:	4604      	mov	r4, r0
    if (!m_interruptAvail) {
    4a58:	7e40      	ldrb	r0, [r0, #25]
                                    bool enable) {
    4a5a:	b083      	sub	sp, #12
    if (!m_interruptAvail) {
    4a5c:	b158      	cbz	r0, 4a76 <_ZN9ClearCore9DigitalIn19InterruptHandlerSetEPFvvENS_12InputManager16InterruptTriggerEb+0x22>
    return InputMgr.InterruptHandlerSet(m_extInt, callback, trigger, enable);
    4a5e:	4807      	ldr	r0, [pc, #28]	; (4a7c <_ZN9ClearCore9DigitalIn19InterruptHandlerSetEPFvvENS_12InputManager16InterruptTriggerEb+0x28>)
    4a60:	461d      	mov	r5, r3
    4a62:	4613      	mov	r3, r2
    4a64:	460a      	mov	r2, r1
    4a66:	f994 1018 	ldrsb.w	r1, [r4, #24]
    4a6a:	6800      	ldr	r0, [r0, #0]
    4a6c:	9500      	str	r5, [sp, #0]
    4a6e:	2400      	movs	r4, #0
    4a70:	9401      	str	r4, [sp, #4]
    4a72:	f000 f88d 	bl	4b90 <_ZN9ClearCore12InputManager19InterruptHandlerSetEaPFvvENS0_16InterruptTriggerEbb>
}
    4a76:	b003      	add	sp, #12
    4a78:	bd30      	pop	{r4, r5, pc}
    4a7a:	bf00      	nop
    4a7c:	20000ad0 	.word	0x20000ad0

00004a80 <_ZN9ClearCore9DigitalIn17UpdateFilterStateEv>:
    m_stateFiltered = !(*m_inRegPtr & m_inputDataMask);
    4a80:	6a03      	ldr	r3, [r0, #32]
    4a82:	6941      	ldr	r1, [r0, #20]
    4a84:	681b      	ldr	r3, [r3, #0]
    ShiftReg.ShifterState(m_stateFiltered, m_ledMask);
    4a86:	6882      	ldr	r2, [r0, #8]
    m_stateFiltered = !(*m_inRegPtr & m_inputDataMask);
    4a88:	400b      	ands	r3, r1
    4a8a:	2b00      	cmp	r3, #0
    4a8c:	bf0c      	ite	eq
    4a8e:	2301      	moveq	r3, #1
    4a90:	2300      	movne	r3, #0
void DigitalIn::UpdateFilterState() {
    4a92:	b500      	push	{lr}
    m_stateFiltered = !(*m_inRegPtr & m_inputDataMask);
    4a94:	f880 3028 	strb.w	r3, [r0, #40]	; 0x28
        : ShifterStateClear(bitsToChange);
    4a98:	d023      	beq.n	4ae2 <_ZN9ClearCore9DigitalIn17UpdateFilterStateEv+0x62>
        atomic_and_fetch(&m_patternOutputs[LED_BLINK_IO_SET], ~bitsToClr);
    4a9a:	f3bf 8f5b 	dmb	ish
    4a9e:	4b1e      	ldr	r3, [pc, #120]	; (4b18 <_ZN9ClearCore9DigitalIn17UpdateFilterStateEv+0x98>)
    4aa0:	43d2      	mvns	r2, r2
    4aa2:	e853 1f00 	ldrex	r1, [r3]
    4aa6:	4011      	ands	r1, r2
    4aa8:	e843 1e00 	strex	lr, r1, [r3]
    4aac:	f1be 0f00 	cmp.w	lr, #0
    4ab0:	d1f7      	bne.n	4aa2 <_ZN9ClearCore9DigitalIn17UpdateFilterStateEv+0x22>
    4ab2:	f3bf 8f5b 	dmb	ish
    if (m_stateFiltered) {
    4ab6:	f890 3028 	ldrb.w	r3, [r0, #40]	; 0x28
        atomic_or_fetch(m_inputRegRTPtr, 1UL << m_clearCorePin);
    4aba:	f9b0 1004 	ldrsh.w	r1, [r0, #4]
    4abe:	6a42      	ldr	r2, [r0, #36]	; 0x24
    if (m_stateFiltered) {
    4ac0:	b9db      	cbnz	r3, 4afa <_ZN9ClearCore9DigitalIn17UpdateFilterStateEv+0x7a>
        atomic_and_fetch(m_inputRegRTPtr, ~(1UL << m_clearCorePin));
    4ac2:	f3bf 8f5b 	dmb	ish
    4ac6:	2301      	movs	r3, #1
    4ac8:	408b      	lsls	r3, r1
    4aca:	43db      	mvns	r3, r3
    4acc:	e852 1f00 	ldrex	r1, [r2]
    4ad0:	4019      	ands	r1, r3
    4ad2:	e842 1000 	strex	r0, r1, [r2]
    4ad6:	2800      	cmp	r0, #0
    4ad8:	d1f8      	bne.n	4acc <_ZN9ClearCore9DigitalIn17UpdateFilterStateEv+0x4c>
    4ada:	f3bf 8f5b 	dmb	ish
    4ade:	f85d fb04 	ldr.w	pc, [sp], #4
        atomic_or_fetch(&m_patternOutputs[LED_BLINK_IO_SET], bitsToSet);
    4ae2:	4b0d      	ldr	r3, [pc, #52]	; (4b18 <_ZN9ClearCore9DigitalIn17UpdateFilterStateEv+0x98>)
    4ae4:	f3bf 8f5b 	dmb	ish
    4ae8:	e853 1f00 	ldrex	r1, [r3]
    4aec:	4311      	orrs	r1, r2
    4aee:	e843 1e00 	strex	lr, r1, [r3]
    4af2:	f1be 0f00 	cmp.w	lr, #0
    4af6:	d0dc      	beq.n	4ab2 <_ZN9ClearCore9DigitalIn17UpdateFilterStateEv+0x32>
    4af8:	e7f6      	b.n	4ae8 <_ZN9ClearCore9DigitalIn17UpdateFilterStateEv+0x68>
        atomic_or_fetch(m_inputRegRTPtr, 1UL << m_clearCorePin);
    4afa:	2301      	movs	r3, #1
    4afc:	408b      	lsls	r3, r1
    4afe:	f3bf 8f5b 	dmb	ish
    4b02:	e852 1f00 	ldrex	r1, [r2]
    4b06:	4319      	orrs	r1, r3
    4b08:	e842 1000 	strex	r0, r1, [r2]
    4b0c:	2800      	cmp	r0, #0
    4b0e:	d1f8      	bne.n	4b02 <_ZN9ClearCore9DigitalIn17UpdateFilterStateEv+0x82>
        atomic_and_fetch(m_inputRegRTPtr, ~(1UL << m_clearCorePin));
    4b10:	f3bf 8f5b 	dmb	ish
    4b14:	f85d fb04 	ldr.w	pc, [sp], #4
    4b18:	20001acc 	.word	0x20001acc

00004b1c <_ZN9ClearCore12InputManager8InstanceEv>:

namespace ClearCore {

InputManager &InputMgr = InputManager::Instance();

InputManager &InputManager::Instance() {
    4b1c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    static InputManager *instance = new InputManager();
    4b1e:	4e14      	ldr	r6, [pc, #80]	; (4b70 <_ZN9ClearCore12InputManager8InstanceEv+0x54>)
    4b20:	6834      	ldr	r4, [r6, #0]
    4b22:	f014 0401 	ands.w	r4, r4, #1
    4b26:	d002      	beq.n	4b2e <_ZN9ClearCore12InputManager8InstanceEv+0x12>
    4b28:	4b12      	ldr	r3, [pc, #72]	; (4b74 <_ZN9ClearCore12InputManager8InstanceEv+0x58>)
    4b2a:	6818      	ldr	r0, [r3, #0]
    4b2c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    4b2e:	2080      	movs	r0, #128	; 0x80
    4b30:	f00e fbde 	bl	132f0 <_Znwj>
    4b34:	4605      	mov	r5, r0
      m_inputRegRisen(0),
      m_inputRegFallen(0),
      m_interruptsMask(0),
      m_interruptsEnabled(true),
      m_interruptServiceRoutines(),
      m_oneTimeFlags(0) {}
    4b36:	2701      	movs	r7, #1
    4b38:	2240      	movs	r2, #64	; 0x40
    4b3a:	602c      	str	r4, [r5, #0]
    4b3c:	606c      	str	r4, [r5, #4]
    4b3e:	60ac      	str	r4, [r5, #8]
    4b40:	60ec      	str	r4, [r5, #12]
    4b42:	612c      	str	r4, [r5, #16]
    4b44:	616c      	str	r4, [r5, #20]
    4b46:	4621      	mov	r1, r4
    4b48:	61ac      	str	r4, [r5, #24]
    4b4a:	61ec      	str	r4, [r5, #28]
    4b4c:	622c      	str	r4, [r5, #32]
**/
union SysConnectorState {
    /**
        Constructor to allow initialization lists.
    **/
    SysConnectorState(uint32_t initialBits) : reg(initialBits) {}
    4b4e:	626c      	str	r4, [r5, #36]	; 0x24
    /**
        Default Constructor
    **/
    SysConnectorState() : reg(0) {}
    4b50:	62ac      	str	r4, [r5, #40]	; 0x28
    SysConnectorState(uint32_t initialBits) : reg(initialBits) {}
    4b52:	62ec      	str	r4, [r5, #44]	; 0x2c
    4b54:	632c      	str	r4, [r5, #48]	; 0x30
    4b56:	636c      	str	r4, [r5, #52]	; 0x34
    4b58:	f885 7038 	strb.w	r7, [r5, #56]	; 0x38
    4b5c:	303c      	adds	r0, #60	; 0x3c
    4b5e:	f019 fc4d 	bl	1e3fc <memset>
    static InputManager *instance = new InputManager();
    4b62:	4b04      	ldr	r3, [pc, #16]	; (4b74 <_ZN9ClearCore12InputManager8InstanceEv+0x58>)
      m_oneTimeFlags(0) {}
    4b64:	f8a5 407c 	strh.w	r4, [r5, #124]	; 0x7c
    static InputManager *instance = new InputManager();
    4b68:	6037      	str	r7, [r6, #0]
    4b6a:	601d      	str	r5, [r3, #0]
    4b6c:	4628      	mov	r0, r5
}
    4b6e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    4b70:	20000acc 	.word	0x20000acc
    4b74:	20000ad4 	.word	0x20000ad4

00004b78 <_ZN9ClearCore12InputManager10InitializeEv>:

void InputManager::SetInputRegisters(volatile uint32_t *a, volatile uint32_t *b,
                                     volatile uint32_t *c) {
    m_inputPtrs[PORTA] = a ? a : &PORT->Group[PORTA].IN.reg;
    m_inputPtrs[PORTB] = b ? b : &PORT->Group[PORTB].IN.reg;
    m_inputPtrs[PORTC] = c ? c : &PORT->Group[PORTC].IN.reg;
    4b78:	4902      	ldr	r1, [pc, #8]	; (4b84 <_ZN9ClearCore12InputManager10InitializeEv+0xc>)
    4b7a:	4a03      	ldr	r2, [pc, #12]	; (4b88 <_ZN9ClearCore12InputManager10InitializeEv+0x10>)
    4b7c:	4b03      	ldr	r3, [pc, #12]	; (4b8c <_ZN9ClearCore12InputManager10InitializeEv+0x14>)
    4b7e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
    4b82:	4770      	bx	lr
    4b84:	41008020 	.word	0x41008020
    4b88:	410080a0 	.word	0x410080a0
    4b8c:	41008120 	.word	0x41008120

00004b90 <_ZN9ClearCore12InputManager19InterruptHandlerSetEaPFvvENS0_16InterruptTriggerEbb>:
    }
}

bool InputManager::InterruptHandlerSet(int8_t extInt, voidFuncPtr callback,
                                       InterruptTrigger trigger, bool enable,
                                       bool oneTime) {
    4b90:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    if (extInt < 0 || extInt >= EIC_NUMBER_OF_INTERRUPTS) {
    4b94:	b2cc      	uxtb	r4, r1
    4b96:	2c0f      	cmp	r4, #15
                                       bool oneTime) {
    4b98:	f89d 701c 	ldrb.w	r7, [sp, #28]
    4b9c:	f89d e020 	ldrb.w	lr, [sp, #32]
    if (extInt < 0 || extInt >= EIC_NUMBER_OF_INTERRUPTS) {
    4ba0:	d870      	bhi.n	4c84 <_ZN9ClearCore12InputManager19InterruptHandlerSetEaPFvvENS0_16InterruptTriggerEbb+0xf4>
        return false; // Invalid external interrupt number
    }

    EIC->CTRLA.bit.ENABLE = 0;
    4ba2:	4d3c      	ldr	r5, [pc, #240]	; (4c94 <_ZN9ClearCore12InputManager19InterruptHandlerSetEaPFvvENS0_16InterruptTriggerEbb+0x104>)
    4ba4:	782c      	ldrb	r4, [r5, #0]
    4ba6:	f36f 0441 	bfc	r4, #1, #1
    4baa:	702c      	strb	r4, [r5, #0]
    SYNCBUSY_WAIT(EIC, EIC_SYNCBUSY_ENABLE);
    4bac:	686c      	ldr	r4, [r5, #4]
    4bae:	f014 0402 	ands.w	r4, r4, #2
    4bb2:	d1fb      	bne.n	4bac <_ZN9ClearCore12InputManager19InterruptHandlerSetEaPFvvENS0_16InterruptTriggerEbb+0x1c>

    // Clear any existing interrupt flag
    EIC->INTFLAG.reg = (1UL << extInt);
    4bb4:	2601      	movs	r6, #1
    4bb6:	408e      	lsls	r6, r1
    4bb8:	616e      	str	r6, [r5, #20]

    if (callback != nullptr) {
    4bba:	2a00      	cmp	r2, #0
    4bbc:	d068      	beq.n	4c90 <_ZN9ClearCore12InputManager19InterruptHandlerSetEaPFvvENS0_16InterruptTriggerEbb+0x100>
    4bbe:	10cd      	asrs	r5, r1, #3
    4bc0:	00ad      	lsls	r5, r5, #2
    4bc2:	f105 4580 	add.w	r5, r5, #1073741824	; 0x40000000
    4bc6:	f505 5520 	add.w	r5, r5, #10240	; 0x2800
        // Clear the existing interrupt trigger condition
        uint8_t shiftAmt = 4 * (extInt % 8);
    4bca:	f001 0c07 	and.w	ip, r1, #7
        EIC->CONFIG[extInt / 8].reg &= ~(0xf << shiftAmt);
    4bce:	f8d5 801c 	ldr.w	r8, [r5, #28]
    4bd2:	ea4f 0c8c 	mov.w	ip, ip, lsl #2
    4bd6:	f04f 090f 	mov.w	r9, #15
    4bda:	fa09 f90c 	lsl.w	r9, r9, ip
    4bde:	b2db      	uxtb	r3, r3
    4be0:	ea28 0809 	bic.w	r8, r8, r9
    4be4:	2b04      	cmp	r3, #4
    4be6:	f8c5 801c 	str.w	r8, [r5, #28]
    4bea:	d945      	bls.n	4c78 <_ZN9ClearCore12InputManager19InterruptHandlerSetEaPFvvENS0_16InterruptTriggerEbb+0xe8>

        // Set the interrupt trigger condition
        EIC->CONFIG[extInt / 8].reg |=
            static_cast<uint32_t>(EicSense(trigger) << shiftAmt);
    4bec:	69eb      	ldr	r3, [r5, #28]
    4bee:	431c      	orrs	r4, r3
        EIC->CONFIG[extInt / 8].reg |=
    4bf0:	61ec      	str	r4, [r5, #28]
    }
    else {
        enable = false;
    }

    m_interruptServiceRoutines[extInt] = callback;
    4bf2:	eb00 0181 	add.w	r1, r0, r1, lsl #2

    if (oneTime) {
        m_oneTimeFlags |= (1UL << extInt);
    4bf6:	f8b0 307c 	ldrh.w	r3, [r0, #124]	; 0x7c
    m_interruptServiceRoutines[extInt] = callback;
    4bfa:	63ca      	str	r2, [r1, #60]	; 0x3c
    if (oneTime) {
    4bfc:	f1be 0f00 	cmp.w	lr, #0
    4c00:	d11f      	bne.n	4c42 <_ZN9ClearCore12InputManager19InterruptHandlerSetEaPFvvENS0_16InterruptTriggerEbb+0xb2>
    }
    else  {
        m_oneTimeFlags &= ~(1UL << extInt);
    4c02:	ea23 0306 	bic.w	r3, r3, r6
    4c06:	f8a0 307c 	strh.w	r3, [r0, #124]	; 0x7c
                                   bool clearPending) {
    if (extInt < 0 || extInt >= EIC_NUMBER_OF_INTERRUPTS) {
        return; // Invalid external interrupt number
    }

    if (enable) {
    4c0a:	b307      	cbz	r7, 4c4e <_ZN9ClearCore12InputManager19InterruptHandlerSetEaPFvvENS0_16InterruptTriggerEbb+0xbe>
        if (clearPending) {
            // Clear any existing interrupt flag
            EIC->INTFLAG.reg = (1UL << extInt);
        }
        atomic_or_fetch(&m_interruptsMask, (1UL << extInt));
    4c0c:	f3bf 8f5b 	dmb	ish
    4c10:	f100 0334 	add.w	r3, r0, #52	; 0x34
    4c14:	e853 2f00 	ldrex	r2, [r3]
    4c18:	4332      	orrs	r2, r6
    4c1a:	e843 2100 	strex	r1, r2, [r3]
    4c1e:	2900      	cmp	r1, #0
    4c20:	d1f8      	bne.n	4c14 <_ZN9ClearCore12InputManager19InterruptHandlerSetEaPFvvENS0_16InterruptTriggerEbb+0x84>
    4c22:	f3bf 8f5b 	dmb	ish
        if (m_interruptsEnabled) {
    4c26:	f890 3038 	ldrb.w	r3, [r0, #56]	; 0x38
    4c2a:	bb73      	cbnz	r3, 4c8a <_ZN9ClearCore12InputManager19InterruptHandlerSetEaPFvvENS0_16InterruptTriggerEbb+0xfa>
    EIC->CTRLA.bit.ENABLE = 1;
    4c2c:	4a19      	ldr	r2, [pc, #100]	; (4c94 <_ZN9ClearCore12InputManager19InterruptHandlerSetEaPFvvENS0_16InterruptTriggerEbb+0x104>)
    4c2e:	7813      	ldrb	r3, [r2, #0]
    4c30:	f043 0302 	orr.w	r3, r3, #2
    4c34:	7013      	strb	r3, [r2, #0]
    SYNCBUSY_WAIT(EIC, EIC_SYNCBUSY_ENABLE);
    4c36:	6853      	ldr	r3, [r2, #4]
    4c38:	079b      	lsls	r3, r3, #30
    4c3a:	d4fc      	bmi.n	4c36 <_ZN9ClearCore12InputManager19InterruptHandlerSetEaPFvvENS0_16InterruptTriggerEbb+0xa6>
    return true;
    4c3c:	2001      	movs	r0, #1
    4c3e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
        m_oneTimeFlags |= (1UL << extInt);
    4c42:	4333      	orrs	r3, r6
    4c44:	b29b      	uxth	r3, r3
    4c46:	f8a0 307c 	strh.w	r3, [r0, #124]	; 0x7c
    if (enable) {
    4c4a:	2f00      	cmp	r7, #0
    4c4c:	d1de      	bne.n	4c0c <_ZN9ClearCore12InputManager19InterruptHandlerSetEaPFvvENS0_16InterruptTriggerEbb+0x7c>
            EIC->INTENSET.reg = (1UL << extInt);
        }
    }
    else {
        atomic_and_fetch(&m_interruptsMask, ~(1UL << extInt));
    4c4e:	f3bf 8f5b 	dmb	ish
    4c52:	43f3      	mvns	r3, r6
    4c54:	f100 0234 	add.w	r2, r0, #52	; 0x34
    4c58:	e852 1f00 	ldrex	r1, [r2]
    4c5c:	4019      	ands	r1, r3
    4c5e:	e842 1400 	strex	r4, r1, [r2]
    4c62:	2c00      	cmp	r4, #0
    4c64:	d1f8      	bne.n	4c58 <_ZN9ClearCore12InputManager19InterruptHandlerSetEaPFvvENS0_16InterruptTriggerEbb+0xc8>
    4c66:	f3bf 8f5b 	dmb	ish
        if (m_interruptsEnabled) {
    4c6a:	f890 3038 	ldrb.w	r3, [r0, #56]	; 0x38
    4c6e:	2b00      	cmp	r3, #0
    4c70:	d0dc      	beq.n	4c2c <_ZN9ClearCore12InputManager19InterruptHandlerSetEaPFvvENS0_16InterruptTriggerEbb+0x9c>
            EIC->INTENCLR.reg = (1UL << extInt);
    4c72:	4b08      	ldr	r3, [pc, #32]	; (4c94 <_ZN9ClearCore12InputManager19InterruptHandlerSetEaPFvvENS0_16InterruptTriggerEbb+0x104>)
    4c74:	60de      	str	r6, [r3, #12]
    4c76:	e7d9      	b.n	4c2c <_ZN9ClearCore12InputManager19InterruptHandlerSetEaPFvvENS0_16InterruptTriggerEbb+0x9c>
    4c78:	4c07      	ldr	r4, [pc, #28]	; (4c98 <_ZN9ClearCore12InputManager19InterruptHandlerSetEaPFvvENS0_16InterruptTriggerEbb+0x108>)
    4c7a:	f854 4023 	ldr.w	r4, [r4, r3, lsl #2]
    4c7e:	fa04 f40c 	lsl.w	r4, r4, ip
    4c82:	e7b3      	b.n	4bec <_ZN9ClearCore12InputManager19InterruptHandlerSetEaPFvvENS0_16InterruptTriggerEbb+0x5c>
        return false; // Invalid external interrupt number
    4c84:	2000      	movs	r0, #0
}
    4c86:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
            EIC->INTENSET.reg = (1UL << extInt);
    4c8a:	4b02      	ldr	r3, [pc, #8]	; (4c94 <_ZN9ClearCore12InputManager19InterruptHandlerSetEaPFvvENS0_16InterruptTriggerEbb+0x104>)
    4c8c:	611e      	str	r6, [r3, #16]
    4c8e:	e7cd      	b.n	4c2c <_ZN9ClearCore12InputManager19InterruptHandlerSetEaPFvvENS0_16InterruptTriggerEbb+0x9c>
        enable = false;
    4c90:	4617      	mov	r7, r2
    4c92:	e7ae      	b.n	4bf2 <_ZN9ClearCore12InputManager19InterruptHandlerSetEaPFvvENS0_16InterruptTriggerEbb+0x62>
    4c94:	40002800 	.word	0x40002800
    4c98:	00022b44 	.word	0x00022b44

00004c9c <_ZN9ClearCore12InputManager15InterruptEnableEabb>:
                                   bool clearPending) {
    4c9c:	b510      	push	{r4, lr}
    if (extInt < 0 || extInt >= EIC_NUMBER_OF_INTERRUPTS) {
    4c9e:	b2cc      	uxtb	r4, r1
    4ca0:	2c0f      	cmp	r4, #15
    4ca2:	d82e      	bhi.n	4d02 <_ZN9ClearCore12InputManager15InterruptEnableEabb+0x66>
    if (enable) {
    4ca4:	b1b2      	cbz	r2, 4cd4 <_ZN9ClearCore12InputManager15InterruptEnableEabb+0x38>
        if (clearPending) {
    4ca6:	bb6b      	cbnz	r3, 4d04 <_ZN9ClearCore12InputManager15InterruptEnableEabb+0x68>
    4ca8:	2301      	movs	r3, #1
    4caa:	fa03 f101 	lsl.w	r1, r3, r1
        atomic_or_fetch(&m_interruptsMask, (1UL << extInt));
    4cae:	f100 0334 	add.w	r3, r0, #52	; 0x34
    4cb2:	f3bf 8f5b 	dmb	ish
    4cb6:	e853 2f00 	ldrex	r2, [r3]
    4cba:	430a      	orrs	r2, r1
    4cbc:	e843 2400 	strex	r4, r2, [r3]
    4cc0:	2c00      	cmp	r4, #0
    4cc2:	d1f8      	bne.n	4cb6 <_ZN9ClearCore12InputManager15InterruptEnableEabb+0x1a>
    4cc4:	f3bf 8f5b 	dmb	ish
        if (m_interruptsEnabled) {
    4cc8:	f890 3038 	ldrb.w	r3, [r0, #56]	; 0x38
    4ccc:	b1cb      	cbz	r3, 4d02 <_ZN9ClearCore12InputManager15InterruptEnableEabb+0x66>
            EIC->INTENSET.reg = (1UL << extInt);
    4cce:	4b10      	ldr	r3, [pc, #64]	; (4d10 <_ZN9ClearCore12InputManager15InterruptEnableEabb+0x74>)
    4cd0:	6119      	str	r1, [r3, #16]
    4cd2:	bd10      	pop	{r4, pc}
        atomic_and_fetch(&m_interruptsMask, ~(1UL << extInt));
    4cd4:	2301      	movs	r3, #1
    4cd6:	fa03 f101 	lsl.w	r1, r3, r1
    4cda:	43ca      	mvns	r2, r1
    4cdc:	f100 0334 	add.w	r3, r0, #52	; 0x34
    4ce0:	f3bf 8f5b 	dmb	ish
    4ce4:	e853 4f00 	ldrex	r4, [r3]
    4ce8:	4014      	ands	r4, r2
    4cea:	e843 4e00 	strex	lr, r4, [r3]
    4cee:	f1be 0f00 	cmp.w	lr, #0
    4cf2:	d1f7      	bne.n	4ce4 <_ZN9ClearCore12InputManager15InterruptEnableEabb+0x48>
    4cf4:	f3bf 8f5b 	dmb	ish
        if (m_interruptsEnabled) {
    4cf8:	f890 3038 	ldrb.w	r3, [r0, #56]	; 0x38
    4cfc:	b10b      	cbz	r3, 4d02 <_ZN9ClearCore12InputManager15InterruptEnableEabb+0x66>
            EIC->INTENCLR.reg = (1UL << extInt);
    4cfe:	4b04      	ldr	r3, [pc, #16]	; (4d10 <_ZN9ClearCore12InputManager15InterruptEnableEabb+0x74>)
    4d00:	60d9      	str	r1, [r3, #12]
    4d02:	bd10      	pop	{r4, pc}
            EIC->INTFLAG.reg = (1UL << extInt);
    4d04:	2201      	movs	r2, #1
    4d06:	4b02      	ldr	r3, [pc, #8]	; (4d10 <_ZN9ClearCore12InputManager15InterruptEnableEabb+0x74>)
    4d08:	fa02 f101 	lsl.w	r1, r2, r1
    4d0c:	6159      	str	r1, [r3, #20]
    4d0e:	e7ce      	b.n	4cae <_ZN9ClearCore12InputManager15InterruptEnableEabb+0x12>
    4d10:	40002800 	.word	0x40002800

00004d14 <_ZN9ClearCore12InputManager11EIC_HandlerEh>:
        EIC->INTENCLR.reg = atomic_load_n(&m_interruptsMask);
    }
}

void InputManager::EIC_Handler(uint8_t index) {
    if (index < EIC_NUMBER_OF_INTERRUPTS) {
    4d14:	290f      	cmp	r1, #15
    4d16:	dc14      	bgt.n	4d42 <_ZN9ClearCore12InputManager11EIC_HandlerEh+0x2e>
        // If this is a one time interrupt, disable the interrupt.
        if (m_oneTimeFlags & (1UL << index)) {
    4d18:	f8b0 307c 	ldrh.w	r3, [r0, #124]	; 0x7c
    4d1c:	40cb      	lsrs	r3, r1
    4d1e:	f013 0f01 	tst.w	r3, #1
            atomic_and_fetch(&m_interruptsMask, ~(1UL << index));
    4d22:	f04f 0301 	mov.w	r3, #1
void InputManager::EIC_Handler(uint8_t index) {
    4d26:	b510      	push	{r4, lr}
            atomic_and_fetch(&m_interruptsMask, ~(1UL << index));
    4d28:	fa03 f301 	lsl.w	r3, r3, r1
        if (m_oneTimeFlags & (1UL << index)) {
    4d2c:	d10a      	bne.n	4d44 <_ZN9ClearCore12InputManager11EIC_HandlerEh+0x30>
            EIC->INTENCLR.reg = (1UL << index);
        }
        // Ack the interrupt early so that we don't miss subsequent events
        EIC->INTFLAG.reg = 1UL << index;
    4d2e:	4a0f      	ldr	r2, [pc, #60]	; (4d6c <_ZN9ClearCore12InputManager11EIC_HandlerEh+0x58>)
        voidFuncPtr callback = m_interruptServiceRoutines[index];
    4d30:	eb00 0181 	add.w	r1, r0, r1, lsl #2
        EIC->INTFLAG.reg = 1UL << index;
    4d34:	6153      	str	r3, [r2, #20]
        voidFuncPtr callback = m_interruptServiceRoutines[index];
    4d36:	6bcb      	ldr	r3, [r1, #60]	; 0x3c
        if (callback != nullptr) {
    4d38:	b113      	cbz	r3, 4d40 <_ZN9ClearCore12InputManager11EIC_HandlerEh+0x2c>
            callback();
        }
    }
}
    4d3a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
            callback();
    4d3e:	4718      	bx	r3
    4d40:	bd10      	pop	{r4, pc}
    4d42:	4770      	bx	lr
            atomic_and_fetch(&m_interruptsMask, ~(1UL << index));
    4d44:	43dc      	mvns	r4, r3
    4d46:	f100 0234 	add.w	r2, r0, #52	; 0x34
    4d4a:	f3bf 8f5b 	dmb	ish
    4d4e:	e852 ef00 	ldrex	lr, [r2]
    4d52:	ea0e 0e04 	and.w	lr, lr, r4
    4d56:	e842 ec00 	strex	ip, lr, [r2]
    4d5a:	f1bc 0f00 	cmp.w	ip, #0
    4d5e:	d1f6      	bne.n	4d4e <_ZN9ClearCore12InputManager11EIC_HandlerEh+0x3a>
    4d60:	f3bf 8f5b 	dmb	ish
            EIC->INTENCLR.reg = (1UL << index);
    4d64:	4a01      	ldr	r2, [pc, #4]	; (4d6c <_ZN9ClearCore12InputManager11EIC_HandlerEh+0x58>)
    4d66:	60d3      	str	r3, [r2, #12]
    4d68:	e7e1      	b.n	4d2e <_ZN9ClearCore12InputManager11EIC_HandlerEh+0x1a>
    4d6a:	bf00      	nop
    4d6c:	40002800 	.word	0x40002800

00004d70 <_ZN9ClearCore12InputManager11UpdateBeginEv>:

void InputManager::UpdateBegin() {
    for (int8_t iPort = 0; iPort < CLEARCORE_PORT_MAX; iPort++) {
        uint32_t last = m_inputsUnfiltered[iPort];
        m_inputsUnfiltered[iPort] = *m_inputPtrs[iPort];
    4d70:	6803      	ldr	r3, [r0, #0]
        uint32_t last = m_inputsUnfiltered[iPort];
    4d72:	68c1      	ldr	r1, [r0, #12]
        m_inputsUnfiltered[iPort] = *m_inputPtrs[iPort];
    4d74:	681b      	ldr	r3, [r3, #0]
    4d76:	60c3      	str	r3, [r0, #12]
    4d78:	6842      	ldr	r2, [r0, #4]
        m_inputsUnfilteredChanges[iPort] = m_inputsUnfiltered[iPort] ^ last;
    4d7a:	404b      	eors	r3, r1
    4d7c:	6183      	str	r3, [r0, #24]
        m_inputsUnfiltered[iPort] = *m_inputPtrs[iPort];
    4d7e:	6812      	ldr	r2, [r2, #0]
        uint32_t last = m_inputsUnfiltered[iPort];
    4d80:	6903      	ldr	r3, [r0, #16]
        m_inputsUnfiltered[iPort] = *m_inputPtrs[iPort];
    4d82:	6881      	ldr	r1, [r0, #8]
    4d84:	6102      	str	r2, [r0, #16]
        m_inputsUnfilteredChanges[iPort] = m_inputsUnfiltered[iPort] ^ last;
    4d86:	4053      	eors	r3, r2
    4d88:	61c3      	str	r3, [r0, #28]
        m_inputsUnfiltered[iPort] = *m_inputPtrs[iPort];
    4d8a:	680a      	ldr	r2, [r1, #0]
        uint32_t last = m_inputsUnfiltered[iPort];
    4d8c:	6943      	ldr	r3, [r0, #20]
        m_inputsUnfiltered[iPort] = *m_inputPtrs[iPort];
    4d8e:	6142      	str	r2, [r0, #20]
        m_inputsUnfilteredChanges[iPort] = m_inputsUnfiltered[iPort] ^ last;
    4d90:	4053      	eors	r3, r2
    4d92:	6203      	str	r3, [r0, #32]
    4d94:	4770      	bx	lr
    4d96:	bf00      	nop

00004d98 <_ZN9ClearCore12InputManager9UpdateEndEv>:
    }
}

void InputManager::UpdateEnd() {
    4d98:	b500      	push	{lr}
    atomic_fetch_or(&m_inputRegRisen.reg,
    4d9a:	6a81      	ldr	r1, [r0, #40]	; 0x28
    4d9c:	6a43      	ldr	r3, [r0, #36]	; 0x24
                    m_inputRegRT.reg & (~m_inputRegLast.reg));
    4d9e:	f3bf 8f5b 	dmb	ish
    4da2:	f100 022c 	add.w	r2, r0, #44	; 0x2c
    atomic_fetch_or(&m_inputRegRisen.reg,
    4da6:	ea23 0301 	bic.w	r3, r3, r1
                    m_inputRegRT.reg & (~m_inputRegLast.reg));
    4daa:	e852 1f00 	ldrex	r1, [r2]
    4dae:	4319      	orrs	r1, r3
    4db0:	e842 1e00 	strex	lr, r1, [r2]
    4db4:	f1be 0f00 	cmp.w	lr, #0
    4db8:	d1f7      	bne.n	4daa <_ZN9ClearCore12InputManager9UpdateEndEv+0x12>
    4dba:	f3bf 8f5b 	dmb	ish
    atomic_fetch_or(&m_inputRegFallen.reg,
    4dbe:	6a41      	ldr	r1, [r0, #36]	; 0x24
    4dc0:	6a83      	ldr	r3, [r0, #40]	; 0x28
                    (~m_inputRegRT.reg) & m_inputRegLast.reg);
    4dc2:	f3bf 8f5b 	dmb	ish
    4dc6:	f100 0230 	add.w	r2, r0, #48	; 0x30
    atomic_fetch_or(&m_inputRegFallen.reg,
    4dca:	ea23 0301 	bic.w	r3, r3, r1
                    (~m_inputRegRT.reg) & m_inputRegLast.reg);
    4dce:	e852 1f00 	ldrex	r1, [r2]
    4dd2:	4319      	orrs	r1, r3
    4dd4:	e842 1e00 	strex	lr, r1, [r2]
    4dd8:	f1be 0f00 	cmp.w	lr, #0
    4ddc:	d1f7      	bne.n	4dce <_ZN9ClearCore12InputManager9UpdateEndEv+0x36>
    4dde:	f3bf 8f5b 	dmb	ish
    m_inputRegLast.reg = m_inputRegRT.reg;
    4de2:	6a43      	ldr	r3, [r0, #36]	; 0x24
    4de4:	6283      	str	r3, [r0, #40]	; 0x28
    4de6:	f85d fb04 	ldr.w	pc, [sp], #4
    4dea:	bf00      	nop

00004dec <_GLOBAL__sub_I__ZN9ClearCore8InputMgrE>:
    SysConnectorState retVal;
    retVal.reg = atomic_load_n(&m_inputRegRT.reg) & mask.reg;
    return retVal;
}

} // ClearCore namespace
    4dec:	b508      	push	{r3, lr}
InputManager &InputMgr = InputManager::Instance();
    4dee:	f7ff fe95 	bl	4b1c <_ZN9ClearCore12InputManager8InstanceEv>
    4df2:	4b01      	ldr	r3, [pc, #4]	; (4df8 <_GLOBAL__sub_I__ZN9ClearCore8InputMgrE+0xc>)
    4df4:	6018      	str	r0, [r3, #0]
    4df6:	bd08      	pop	{r3, pc}
    4df8:	20000ad0 	.word	0x20000ad0

00004dfc <_ZN9ClearCore11MotorDriver4TypeEv>:

        \return The type of the current connector.
    **/
    Connector::ConnectorTypes Type() override {
        return Connector::CPM_TYPE;
    }
    4dfc:	2006      	movs	r0, #6
    4dfe:	4770      	bx	lr

00004e00 <_ZN9ClearCore11MotorDriver10IsWritableEv>:

        \return True because the connector is always writable
    **/
    bool IsWritable() override {
        return true;
    }
    4e00:	2001      	movs	r0, #1
    4e02:	4770      	bx	lr

00004e04 <_ZN9ClearCore11MotorDriver11IsInHwFaultEv>:
        \endcode

        \return Connector is in fault
    **/
    bool IsInHwFault() override {
        return (volatile bool &)m_inFault;
    4e04:	f890 0114 	ldrb.w	r0, [r0, #276]	; 0x114
    }
    4e08:	4770      	bx	lr
    4e0a:	bf00      	nop

00004e0c <_ZN9ClearCore11MotorDriver4ModeEv>:

        \return The connector's current operational mode.
    **/
    virtual ConnectorModes Mode() override {
        return Connector::Mode();
    }
    4e0c:	7980      	ldrb	r0, [r0, #6]
    4e0e:	4770      	bx	lr

00004e10 <_ZN9ClearCore11MotorDriver4ModeENS_9Connector14ConnectorModesE>:
    m_statusRegMotorFallen.reg = 0;

    m_initialized = true;
}

bool MotorDriver::Mode(ConnectorModes newMode) {
    4e10:	b538      	push	{r3, r4, r5, lr}
    // Bail out if we are already in the requested mode
    if (newMode == m_mode) {
    4e12:	7983      	ldrb	r3, [r0, #6]
    4e14:	428b      	cmp	r3, r1
    4e16:	f000 80a7 	beq.w	4f68 <_ZN9ClearCore11MotorDriver4ModeENS_9Connector14ConnectorModesE+0x158>
        return true;
    }

    switch (newMode) {
    4e1a:	f1a1 0309 	sub.w	r3, r1, #9
    4e1e:	460d      	mov	r5, r1
    4e20:	4604      	mov	r4, r0
    4e22:	2b03      	cmp	r3, #3
    4e24:	f200 80a2 	bhi.w	4f6c <_ZN9ClearCore11MotorDriver4ModeENS_9Connector14ConnectorModesE+0x15c>
    4e28:	e8df f003 	tbb	[pc, r3]
    4e2c:	0246467a 	.word	0x0246467a
        case CPM_MODE_A_PWM_B_PWM:
            // Stop any active S&D command
            MoveStopAbrupt();
    4e30:	3030      	adds	r0, #48	; 0x30
    4e32:	f006 fe75 	bl	bb20 <_ZN9ClearCore13StepGenerator14MoveStopAbruptEv>
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
    4e36:	b672      	cpsid	i

    return true;
}

void MotorDriver::UpdateADuty() {
    if (*m_aTccBuffer == m_aDutyCnt) {
    4e38:	f8d4 00b4 	ldr.w	r0, [r4, #180]	; 0xb4
    4e3c:	6803      	ldr	r3, [r0, #0]
            m_aDutyCnt = 0;
    4e3e:	2200      	movs	r2, #0
    4e40:	f8a4 2110 	strh.w	r2, [r4, #272]	; 0x110
    if (*m_aTccBuffer == m_aDutyCnt) {
    4e44:	b13b      	cbz	r3, 4e56 <_ZN9ClearCore11MotorDriver4ModeENS_9Connector14ConnectorModesE+0x46>
    4e46:	f8d4 10c4 	ldr.w	r1, [r4, #196]	; 0xc4
    4e4a:	f8d4 20c0 	ldr.w	r2, [r4, #192]	; 0xc0
        return;
    }
    while (*m_aTccSyncReg & m_aTccSyncMask) {
    4e4e:	680b      	ldr	r3, [r1, #0]
    4e50:	4013      	ands	r3, r2
    4e52:	d1fc      	bne.n	4e4e <_ZN9ClearCore11MotorDriver4ModeENS_9Connector14ConnectorModesE+0x3e>
        continue;
    }
    *m_aTccBuffer = m_aDutyCnt;
    4e54:	6003      	str	r3, [r0, #0]
}

void MotorDriver::UpdateBDuty() {
    if (*m_bTccBuffer == m_bDutyCnt) {
    4e56:	f8d4 00bc 	ldr.w	r0, [r4, #188]	; 0xbc
    4e5a:	6803      	ldr	r3, [r0, #0]
            m_bDutyCnt = 0;
    4e5c:	2200      	movs	r2, #0
    4e5e:	f8a4 2112 	strh.w	r2, [r4, #274]	; 0x112
    if (*m_bTccBuffer == m_bDutyCnt) {
    4e62:	b13b      	cbz	r3, 4e74 <_ZN9ClearCore11MotorDriver4ModeENS_9Connector14ConnectorModesE+0x64>
    4e64:	f8d4 10cc 	ldr.w	r1, [r4, #204]	; 0xcc
    4e68:	f8d4 20c8 	ldr.w	r2, [r4, #200]	; 0xc8
        return;
    }
    while (*m_bTccSyncReg & m_bTccSyncMask) {
    4e6c:	680b      	ldr	r3, [r1, #0]
    4e6e:	4013      	ands	r3, r2
    4e70:	d1fc      	bne.n	4e6c <_ZN9ClearCore11MotorDriver4ModeENS_9Connector14ConnectorModesE+0x5c>
        continue;
    }
    *m_bTccBuffer = m_bDutyCnt;
    4e72:	6003      	str	r3, [r0, #0]
            PMUX_ENABLE(m_aInfo->gpioPort, m_aInfo->gpioPin);
    4e74:	f8d4 10a4 	ldr.w	r1, [r4, #164]	; 0xa4
    4e78:	4a3d      	ldr	r2, [pc, #244]	; (4f70 <_ZN9ClearCore11MotorDriver4ModeENS_9Connector14ConnectorModesE+0x160>)
    4e7a:	f991 3001 	ldrsb.w	r3, [r1, #1]
    4e7e:	7889      	ldrb	r1, [r1, #2]
    4e80:	eb02 13c3 	add.w	r3, r2, r3, lsl #7
    4e84:	440b      	add	r3, r1
            m_mode = newMode;
    4e86:	200c      	movs	r0, #12
            PMUX_ENABLE(m_aInfo->gpioPort, m_aInfo->gpioPin);
    4e88:	f893 1040 	ldrb.w	r1, [r3, #64]	; 0x40
    4e8c:	f041 0101 	orr.w	r1, r1, #1
    4e90:	f883 1040 	strb.w	r1, [r3, #64]	; 0x40
            PMUX_ENABLE(m_bInfo->gpioPort, m_bInfo->gpioPin);
    4e94:	f8d4 10a8 	ldr.w	r1, [r4, #168]	; 0xa8
    4e98:	f991 3001 	ldrsb.w	r3, [r1, #1]
    4e9c:	7889      	ldrb	r1, [r1, #2]
    4e9e:	eb02 13c3 	add.w	r3, r2, r3, lsl #7
    4ea2:	440b      	add	r3, r1
    4ea4:	f893 2040 	ldrb.w	r2, [r3, #64]	; 0x40
    4ea8:	f042 0201 	orr.w	r2, r2, #1
    4eac:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
            m_mode = newMode;
    4eb0:	71a0      	strb	r0, [r4, #6]
  __ASM volatile ("cpsie i" : : : "memory");
    4eb2:	b662      	cpsie	i
    return true;
    4eb4:	2001      	movs	r0, #1
    4eb6:	bd38      	pop	{r3, r4, r5, pc}
            MoveStopAbrupt();
    4eb8:	3030      	adds	r0, #48	; 0x30
    4eba:	f006 fe31 	bl	bb20 <_ZN9ClearCore13StepGenerator14MoveStopAbruptEv>
  __ASM volatile ("cpsid i" : : : "memory");
    4ebe:	b672      	cpsid	i
    if (*m_bTccBuffer == m_bDutyCnt) {
    4ec0:	f8d4 00bc 	ldr.w	r0, [r4, #188]	; 0xbc
    4ec4:	6803      	ldr	r3, [r0, #0]
            m_bDutyCnt = 0;
    4ec6:	2200      	movs	r2, #0
    4ec8:	f8a4 2112 	strh.w	r2, [r4, #274]	; 0x112
    if (*m_bTccBuffer == m_bDutyCnt) {
    4ecc:	b13b      	cbz	r3, 4ede <_ZN9ClearCore11MotorDriver4ModeENS_9Connector14ConnectorModesE+0xce>
    4ece:	f8d4 10cc 	ldr.w	r1, [r4, #204]	; 0xcc
    4ed2:	f8d4 20c8 	ldr.w	r2, [r4, #200]	; 0xc8
    while (*m_bTccSyncReg & m_bTccSyncMask) {
    4ed6:	680b      	ldr	r3, [r1, #0]
    4ed8:	4013      	ands	r3, r2
    4eda:	d1fc      	bne.n	4ed6 <_ZN9ClearCore11MotorDriver4ModeENS_9Connector14ConnectorModesE+0xc6>
    *m_bTccBuffer = m_bDutyCnt;
    4edc:	6003      	str	r3, [r0, #0]
            PMUX_DISABLE(m_aInfo->gpioPort, m_aInfo->gpioPin);
    4ede:	f8d4 10a4 	ldr.w	r1, [r4, #164]	; 0xa4
    4ee2:	4a23      	ldr	r2, [pc, #140]	; (4f70 <_ZN9ClearCore11MotorDriver4ModeENS_9Connector14ConnectorModesE+0x160>)
    4ee4:	f991 3001 	ldrsb.w	r3, [r1, #1]
    4ee8:	7889      	ldrb	r1, [r1, #2]
    4eea:	eb02 13c3 	add.w	r3, r2, r3, lsl #7
    4eee:	440b      	add	r3, r1
    4ef0:	f893 1040 	ldrb.w	r1, [r3, #64]	; 0x40
    4ef4:	f36f 0100 	bfc	r1, #0, #1
    4ef8:	f883 1040 	strb.w	r1, [r3, #64]	; 0x40
            PMUX_ENABLE(m_bInfo->gpioPort, m_bInfo->gpioPin);
    4efc:	f8d4 10a8 	ldr.w	r1, [r4, #168]	; 0xa8
    4f00:	f991 3001 	ldrsb.w	r3, [r1, #1]
    4f04:	7889      	ldrb	r1, [r1, #2]
    4f06:	eb02 13c3 	add.w	r3, r2, r3, lsl #7
    4f0a:	440b      	add	r3, r1
    4f0c:	f893 2040 	ldrb.w	r2, [r3, #64]	; 0x40
    4f10:	f042 0201 	orr.w	r2, r2, #1
    4f14:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
            m_mode = newMode;
    4f18:	71a5      	strb	r5, [r4, #6]
  __ASM volatile ("cpsie i" : : : "memory");
    4f1a:	b662      	cpsie	i
    return true;
    4f1c:	2001      	movs	r0, #1
    4f1e:	bd38      	pop	{r3, r4, r5, pc}
            MoveStopAbrupt();
    4f20:	3030      	adds	r0, #48	; 0x30
    4f22:	f006 fdfd 	bl	bb20 <_ZN9ClearCore13StepGenerator14MoveStopAbruptEv>
            PMUX_DISABLE(m_aInfo->gpioPort, m_aInfo->gpioPin);
    4f26:	f8d4 10a4 	ldr.w	r1, [r4, #164]	; 0xa4
    4f2a:	4a11      	ldr	r2, [pc, #68]	; (4f70 <_ZN9ClearCore11MotorDriver4ModeENS_9Connector14ConnectorModesE+0x160>)
    4f2c:	f991 3001 	ldrsb.w	r3, [r1, #1]
    4f30:	7889      	ldrb	r1, [r1, #2]
    4f32:	eb02 13c3 	add.w	r3, r2, r3, lsl #7
    4f36:	440b      	add	r3, r1
            m_mode = CPM_MODE_A_DIRECT_B_DIRECT;
    4f38:	2509      	movs	r5, #9
            PMUX_DISABLE(m_aInfo->gpioPort, m_aInfo->gpioPin);
    4f3a:	f893 1040 	ldrb.w	r1, [r3, #64]	; 0x40
    4f3e:	f36f 0100 	bfc	r1, #0, #1
    4f42:	f883 1040 	strb.w	r1, [r3, #64]	; 0x40
            PMUX_DISABLE(m_bInfo->gpioPort, m_bInfo->gpioPin);
    4f46:	f8d4 10a8 	ldr.w	r1, [r4, #168]	; 0xa8
    4f4a:	f991 3001 	ldrsb.w	r3, [r1, #1]
    4f4e:	7889      	ldrb	r1, [r1, #2]
    4f50:	eb02 13c3 	add.w	r3, r2, r3, lsl #7
    4f54:	440b      	add	r3, r1
    return true;
    4f56:	2001      	movs	r0, #1
            PMUX_DISABLE(m_bInfo->gpioPort, m_bInfo->gpioPin);
    4f58:	f893 2040 	ldrb.w	r2, [r3, #64]	; 0x40
    4f5c:	f36f 0200 	bfc	r2, #0, #1
    4f60:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
            m_mode = CPM_MODE_A_DIRECT_B_DIRECT;
    4f64:	71a5      	strb	r5, [r4, #6]
            break;
    4f66:	bd38      	pop	{r3, r4, r5, pc}
        return true;
    4f68:	2001      	movs	r0, #1
    4f6a:	bd38      	pop	{r3, r4, r5, pc}
            return false;
    4f6c:	2000      	movs	r0, #0
}
    4f6e:	bd38      	pop	{r3, r4, r5, pc}
    4f70:	41008000 	.word	0x41008000

00004f74 <_ZN9ClearCore11MotorDriver15OutputDirectionEv>:
    }

#ifndef HIDE_FROM_DOXYGEN

    virtual void OutputDirection() override {
        if (m_mode == Connector::CPM_MODE_STEP_AND_DIR &&
    4f74:	7983      	ldrb	r3, [r0, #6]
    4f76:	2b0a      	cmp	r3, #10
    4f78:	d00f      	beq.n	4f9a <_ZN9ClearCore11MotorDriver15OutputDirectionEv+0x26>
                m_polarityInversions.bit.directionInverted) {
            DATA_OUTPUT_STATE(m_aInfo->gpioPort, m_aDataMask, Direction());
        }
        else {
            DATA_OUTPUT_STATE(m_aInfo->gpioPort, m_aDataMask, !Direction());
    4f7a:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
    4f7e:	b1a3      	cbz	r3, 4faa <_ZN9ClearCore11MotorDriver15OutputDirectionEv+0x36>
    4f80:	f8d0 30a4 	ldr.w	r3, [r0, #164]	; 0xa4
    4f84:	f8d0 20b0 	ldr.w	r2, [r0, #176]	; 0xb0
    4f88:	f993 3001 	ldrsb.w	r3, [r3, #1]
    4f8c:	01db      	lsls	r3, r3, #7
    4f8e:	f103 4382 	add.w	r3, r3, #1090519040	; 0x41000000
    4f92:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
    4f96:	615a      	str	r2, [r3, #20]
    4f98:	4770      	bx	lr
                m_polarityInversions.bit.directionInverted) {
    4f9a:	f890 30fc 	ldrb.w	r3, [r0, #252]	; 0xfc
        if (m_mode == Connector::CPM_MODE_STEP_AND_DIR &&
    4f9e:	079b      	lsls	r3, r3, #30
    4fa0:	d5eb      	bpl.n	4f7a <_ZN9ClearCore11MotorDriver15OutputDirectionEv+0x6>
            DATA_OUTPUT_STATE(m_aInfo->gpioPort, m_aDataMask, Direction());
    4fa2:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
    4fa6:	2b00      	cmp	r3, #0
    4fa8:	d0ea      	beq.n	4f80 <_ZN9ClearCore11MotorDriver15OutputDirectionEv+0xc>
            DATA_OUTPUT_STATE(m_aInfo->gpioPort, m_aDataMask, !Direction());
    4faa:	f8d0 30a4 	ldr.w	r3, [r0, #164]	; 0xa4
    4fae:	f8d0 20b0 	ldr.w	r2, [r0, #176]	; 0xb0
    4fb2:	f993 3001 	ldrsb.w	r3, [r3, #1]
    4fb6:	01db      	lsls	r3, r3, #7
    4fb8:	f103 4382 	add.w	r3, r3, #1090519040	; 0x41000000
    4fbc:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
    4fc0:	619a      	str	r2, [r3, #24]
    4fc2:	4770      	bx	lr

00004fc4 <_ZThn48_N9ClearCore11MotorDriver15OutputDirectionEv>:
    virtual void OutputDirection() override {
    4fc4:	f1a0 0030 	sub.w	r0, r0, #48	; 0x30
    4fc8:	e7d4      	b.n	4f74 <_ZN9ClearCore11MotorDriver15OutputDirectionEv>
    4fca:	bf00      	nop

00004fcc <_ZN9ClearCore11MotorDriverC1ENS_13ShiftRegister5MasksEPK15PeripheralRouteS5_S5_tt>:
MotorDriver::MotorDriver(ShiftRegister::Masks enableMask,
    4fcc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    4fd0:	9f08      	ldr	r7, [sp, #32]
    4fd2:	f8bd 9024 	ldrh.w	r9, [sp, #36]	; 0x24
    4fd6:	f8bd 8028 	ldrh.w	r8, [sp, #40]	; 0x28
    4fda:	4604      	mov	r4, r0
    4fdc:	4616      	mov	r6, r2
    4fde:	468a      	mov	sl, r1
      m_clearFaultHlfbTimer(0) {
    4fe0:	463a      	mov	r2, r7
    4fe2:	2100      	movs	r1, #0
MotorDriver::MotorDriver(ShiftRegister::Masks enableMask,
    4fe4:	461d      	mov	r5, r3
      m_clearFaultHlfbTimer(0) {
    4fe6:	f7ff fd03 	bl	49f0 <_ZN9ClearCore9DigitalInC1ENS_13ShiftRegister5MasksEPK15PeripheralRoute>
    4fea:	f104 0030 	add.w	r0, r4, #48	; 0x30
    4fee:	f006 fd65 	bl	babc <_ZN9ClearCore13StepGeneratorC1Ev>
    4ff2:	4b5c      	ldr	r3, [pc, #368]	; (5164 <_ZN9ClearCore11MotorDriverC1ENS_13ShiftRegister5MasksEPK15PeripheralRouteS5_S5_tt+0x198>)
    4ff4:	f8c4 a0a0 	str.w	sl, [r4, #160]	; 0xa0
    4ff8:	f103 023c 	add.w	r2, r3, #60	; 0x3c
    4ffc:	f8c4 60a4 	str.w	r6, [r4, #164]	; 0xa4
    5000:	f8c4 70ac 	str.w	r7, [r4, #172]	; 0xac
    5004:	6322      	str	r2, [r4, #48]	; 0x30
    5006:	f8c4 50a8 	str.w	r5, [r4, #168]	; 0xa8
    500a:	6023      	str	r3, [r4, #0]
      m_aDataMask(1UL << aInfo->gpioPin),
    500c:	78b3      	ldrb	r3, [r6, #2]
      m_clearFaultHlfbTimer(0) {
    500e:	f8df a160 	ldr.w	sl, [pc, #352]	; 5170 <_ZN9ClearCore11MotorDriverC1ENS_13ShiftRegister5MasksEPK15PeripheralRouteS5_S5_tt+0x1a4>
    Tcc *theTcc = (tcc_modules[m_aInfo->tccNum]);
    5012:	4f55      	ldr	r7, [pc, #340]	; (5168 <_ZN9ClearCore11MotorDriverC1ENS_13ShiftRegister5MasksEPK15PeripheralRouteS5_S5_tt+0x19c>)
      m_aDataMask(1UL << aInfo->gpioPin),
    5014:	2101      	movs	r1, #1
    5016:	fa01 f303 	lsl.w	r3, r1, r3
      m_clearFaultHlfbTimer(0) {
    501a:	f8c4 30b0 	str.w	r3, [r4, #176]	; 0xb0
      m_bDataMask(1UL << bInfo->gpioPin),
    501e:	78ab      	ldrb	r3, [r5, #2]
      m_clearFaultHlfbTimer(0) {
    5020:	f884 90d6 	strb.w	r9, [r4, #214]	; 0xd6
      m_bDataMask(1UL << bInfo->gpioPin),
    5024:	fa01 f303 	lsl.w	r3, r1, r3
      m_clearFaultHlfbTimer(0) {
    5028:	f04f 0e02 	mov.w	lr, #2
    502c:	2200      	movs	r2, #0
    502e:	f64f 70ff 	movw	r0, #65535	; 0xffff
    5032:	f8c4 30b8 	str.w	r3, [r4, #184]	; 0xb8
    5036:	f8a4 e0e2 	strh.w	lr, [r4, #226]	; 0xe2
    503a:	f04f 33ff 	mov.w	r3, #4294967295
    503e:	f04f 0e19 	mov.w	lr, #25
    5042:	f04f 0903 	mov.w	r9, #3
    5046:	f04f 0c7d 	mov.w	ip, #125	; 0x7d
    504a:	f884 20d8 	strb.w	r2, [r4, #216]	; 0xd8
    504e:	f8a4 20da 	strh.w	r2, [r4, #218]	; 0xda
    5052:	f8a4 20dc 	strh.w	r2, [r4, #220]	; 0xdc
    5056:	f8a4 20de 	strh.w	r2, [r4, #222]	; 0xde
    505a:	f8a4 20e0 	strh.w	r2, [r4, #224]	; 0xe0
    505e:	f884 20e4 	strb.w	r2, [r4, #228]	; 0xe4
    5062:	f884 20f5 	strb.w	r2, [r4, #245]	; 0xf5
    5066:	f884 20f6 	strb.w	r2, [r4, #246]	; 0xf6
            reg = val;
    506a:	f8a4 20fc 	strh.w	r2, [r4, #252]	; 0xfc
    506e:	f884 2100 	strb.w	r2, [r4, #256]	; 0x100
    5072:	f884 2101 	strb.w	r2, [r4, #257]	; 0x101
    5076:	f8a4 00d0 	strh.w	r0, [r4, #208]	; 0xd0
    507a:	f8a4 00d2 	strh.w	r0, [r4, #210]	; 0xd2
    507e:	f8a4 00d4 	strh.w	r0, [r4, #212]	; 0xd4
    5082:	f8c4 30ec 	str.w	r3, [r4, #236]	; 0xec
    5086:	f884 80d7 	strb.w	r8, [r4, #215]	; 0xd7
    508a:	f8c4 a0f0 	str.w	sl, [r4, #240]	; 0xf0
    508e:	f884 90f4 	strb.w	r9, [r4, #244]	; 0xf4
    5092:	f8a4 c0f8 	strh.w	ip, [r4, #248]	; 0xf8
    5096:	f8c4 e0e8 	str.w	lr, [r4, #232]	; 0xe8
    509a:	f8c4 2104 	str.w	r2, [r4, #260]	; 0x104
    509e:	f8c4 2108 	str.w	r2, [r4, #264]	; 0x108
    50a2:	f8c4 2110 	str.w	r2, [r4, #272]	; 0x110
    50a6:	f884 2114 	strb.w	r2, [r4, #276]	; 0x114
            reg = val;
    50aa:	f8c4 2118 	str.w	r2, [r4, #280]	; 0x118
    50ae:	f8c4 211c 	str.w	r2, [r4, #284]	; 0x11c
    50b2:	f8c4 2120 	str.w	r2, [r4, #288]	; 0x120
    50b6:	f8c4 2124 	str.w	r2, [r4, #292]	; 0x124
            reg = val;
    50ba:	f8c4 2128 	str.w	r2, [r4, #296]	; 0x128
    50be:	f8c4 212c 	str.w	r2, [r4, #300]	; 0x12c
    50c2:	f8c4 2130 	str.w	r2, [r4, #304]	; 0x130
    50c6:	f884 213c 	strb.w	r2, [r4, #316]	; 0x13c
    50ca:	f884 213d 	strb.w	r2, [r4, #317]	; 0x13d
    50ce:	f884 213e 	strb.w	r2, [r4, #318]	; 0x13e
    50d2:	f8c4 2140 	str.w	r2, [r4, #320]	; 0x140
    m_interruptAvail = true;
    50d6:	7661      	strb	r1, [r4, #25]
      m_clearFaultHlfbTimer(0) {
    50d8:	f8c4 e10c 	str.w	lr, [r4, #268]	; 0x10c
    50dc:	f8c4 3134 	str.w	r3, [r4, #308]	; 0x134
    50e0:	f8c4 3138 	str.w	r3, [r4, #312]	; 0x138
    Tcc *theTcc = (tcc_modules[m_aInfo->tccNum]);
    50e4:	7b33      	ldrb	r3, [r6, #12]
    uint8_t ccIndex = m_aInfo->tccPadNum % TccCcNum(m_aInfo->tccNum);
    50e6:	7b76      	ldrb	r6, [r6, #13]
    Tcc *theTcc = (tcc_modules[m_aInfo->tccNum]);
    50e8:	f857 0023 	ldr.w	r0, [r7, r3, lsl #2]
    50ec:	2b04      	cmp	r3, #4
    50ee:	bf9c      	itt	ls
    50f0:	4a1e      	ldrls	r2, [pc, #120]	; (516c <_ZN9ClearCore11MotorDriverC1ENS_13ShiftRegister5MasksEPK15PeripheralRouteS5_S5_tt+0x1a0>)
    50f2:	5cd2      	ldrbls	r2, [r2, r3]
    uint8_t ccIndex = m_aInfo->tccPadNum % TccCcNum(m_aInfo->tccNum);
    50f4:	fbb6 f1f2 	udiv	r1, r6, r2
    50f8:	fb02 6211 	mls	r2, r2, r1, r6
    m_aTccSyncMask = TCC_SYNCBUSY_CC(1UL << ccIndex);
    50fc:	f44f 7380 	mov.w	r3, #256	; 0x100
    uint8_t ccIndex = m_aInfo->tccPadNum % TccCcNum(m_aInfo->tccNum);
    5100:	b2d2      	uxtb	r2, r2
    m_aTccBuffer = &theTcc->CCBUF[ccIndex].reg;
    5102:	f102 011c 	add.w	r1, r2, #28
    m_aTccSyncMask = TCC_SYNCBUSY_CC(1UL << ccIndex);
    5106:	fa03 f202 	lsl.w	r2, r3, r2
    m_aTccBuffer = &theTcc->CCBUF[ccIndex].reg;
    510a:	eb00 0181 	add.w	r1, r0, r1, lsl #2
    m_aTccSyncMask = TCC_SYNCBUSY_CC(1UL << ccIndex);
    510e:	f402 527c 	and.w	r2, r2, #16128	; 0x3f00
    m_aTccSyncReg = &theTcc->SYNCBUSY.reg;
    5112:	3008      	adds	r0, #8
    m_aTccBuffer = &theTcc->CCBUF[ccIndex].reg;
    5114:	f8c4 10b4 	str.w	r1, [r4, #180]	; 0xb4
    m_aTccSyncReg = &theTcc->SYNCBUSY.reg;
    5118:	f8c4 00c4 	str.w	r0, [r4, #196]	; 0xc4
    m_aTccSyncMask = TCC_SYNCBUSY_CC(1UL << ccIndex);
    511c:	f8c4 20c0 	str.w	r2, [r4, #192]	; 0xc0
    theTcc = (tcc_modules[m_bInfo->tccNum]);
    5120:	7b2a      	ldrb	r2, [r5, #12]
    ccIndex = m_bInfo->tccPadNum % TccCcNum(m_bInfo->tccNum);
    5122:	7b68      	ldrb	r0, [r5, #13]
    theTcc = (tcc_modules[m_bInfo->tccNum]);
    5124:	f857 1022 	ldr.w	r1, [r7, r2, lsl #2]
    5128:	2a04      	cmp	r2, #4
    512a:	bf9a      	itte	ls
    512c:	4b0f      	ldrls	r3, [pc, #60]	; (516c <_ZN9ClearCore11MotorDriverC1ENS_13ShiftRegister5MasksEPK15PeripheralRouteS5_S5_tt+0x1a0>)
    512e:	5c9a      	ldrbls	r2, [r3, r2]
    ccIndex = m_bInfo->tccPadNum % TccCcNum(m_bInfo->tccNum);
    5130:	2200      	movhi	r2, #0
    5132:	fbb0 f3f2 	udiv	r3, r0, r2
    5136:	fb02 0313 	mls	r3, r2, r3, r0
    513a:	b2db      	uxtb	r3, r3
    m_bTccSyncMask = TCC_SYNCBUSY_CC(1UL << ccIndex);
    513c:	f44f 7280 	mov.w	r2, #256	; 0x100
    m_bTccBuffer = &theTcc->CCBUF[ccIndex].reg;
    5140:	f103 001c 	add.w	r0, r3, #28
    m_bTccSyncMask = TCC_SYNCBUSY_CC(1UL << ccIndex);
    5144:	fa02 f303 	lsl.w	r3, r2, r3
    m_bTccBuffer = &theTcc->CCBUF[ccIndex].reg;
    5148:	eb01 0080 	add.w	r0, r1, r0, lsl #2
    m_bTccSyncMask = TCC_SYNCBUSY_CC(1UL << ccIndex);
    514c:	f403 537c 	and.w	r3, r3, #16128	; 0x3f00
    m_bTccSyncReg = &theTcc->SYNCBUSY.reg;
    5150:	3108      	adds	r1, #8
    m_bTccBuffer = &theTcc->CCBUF[ccIndex].reg;
    5152:	f8c4 00bc 	str.w	r0, [r4, #188]	; 0xbc
    m_bTccSyncReg = &theTcc->SYNCBUSY.reg;
    5156:	f8c4 10cc 	str.w	r1, [r4, #204]	; 0xcc
    m_bTccSyncMask = TCC_SYNCBUSY_CC(1UL << ccIndex);
    515a:	f8c4 30c8 	str.w	r3, [r4, #200]	; 0xc8
}
    515e:	4620      	mov	r0, r4
    5160:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    5164:	00022b7c 	.word	0x00022b7c
    5168:	00022b60 	.word	0x00022b60
    516c:	00022b58 	.word	0x00022b58
    5170:	c61c3c00 	.word	0xc61c3c00

00005174 <_ZN9ClearCore11MotorDriver13MotorInAStateEb>:
    switch (m_mode) {
    5174:	7983      	ldrb	r3, [r0, #6]
    5176:	2b09      	cmp	r3, #9
    5178:	d003      	beq.n	5182 <_ZN9ClearCore11MotorDriver13MotorInAStateEb+0xe>
    517a:	2b0b      	cmp	r3, #11
    517c:	d001      	beq.n	5182 <_ZN9ClearCore11MotorDriver13MotorInAStateEb+0xe>
            return false;
    517e:	2000      	movs	r0, #0
}
    5180:	4770      	bx	lr
            DATA_OUTPUT_STATE(m_aInfo->gpioPort, m_aDataMask, !value);
    5182:	f8d0 30a4 	ldr.w	r3, [r0, #164]	; 0xa4
    5186:	f8d0 20b0 	ldr.w	r2, [r0, #176]	; 0xb0
    518a:	f993 3001 	ldrsb.w	r3, [r3, #1]
    518e:	01db      	lsls	r3, r3, #7
    5190:	f103 4382 	add.w	r3, r3, #1090519040	; 0x41000000
    5194:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
    5198:	b111      	cbz	r1, 51a0 <_ZN9ClearCore11MotorDriver13MotorInAStateEb+0x2c>
            return true;
    519a:	4608      	mov	r0, r1
            DATA_OUTPUT_STATE(m_aInfo->gpioPort, m_aDataMask, !value);
    519c:	615a      	str	r2, [r3, #20]
    519e:	4770      	bx	lr
    51a0:	2001      	movs	r0, #1
    51a2:	619a      	str	r2, [r3, #24]
    51a4:	4770      	bx	lr
    51a6:	bf00      	nop

000051a8 <_ZN9ClearCore11MotorDriver13MotorInBStateEb>:
    switch (m_mode) {
    51a8:	7983      	ldrb	r3, [r0, #6]
    51aa:	2b09      	cmp	r3, #9
    51ac:	d111      	bne.n	51d2 <_ZN9ClearCore11MotorDriver13MotorInBStateEb+0x2a>
            DATA_OUTPUT_STATE(m_bInfo->gpioPort, m_bDataMask, !value);
    51ae:	f8d0 30a8 	ldr.w	r3, [r0, #168]	; 0xa8
    51b2:	f8d0 20b8 	ldr.w	r2, [r0, #184]	; 0xb8
    51b6:	f993 3001 	ldrsb.w	r3, [r3, #1]
    51ba:	01db      	lsls	r3, r3, #7
    51bc:	f103 4382 	add.w	r3, r3, #1090519040	; 0x41000000
    51c0:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
    51c4:	b111      	cbz	r1, 51cc <_ZN9ClearCore11MotorDriver13MotorInBStateEb+0x24>
            return true;
    51c6:	4608      	mov	r0, r1
            DATA_OUTPUT_STATE(m_bInfo->gpioPort, m_bDataMask, !value);
    51c8:	615a      	str	r2, [r3, #20]
    51ca:	4770      	bx	lr
    51cc:	2001      	movs	r0, #1
    51ce:	619a      	str	r2, [r3, #24]
    51d0:	4770      	bx	lr
            return false;
    51d2:	2000      	movs	r0, #0
}
    51d4:	4770      	bx	lr
    51d6:	bf00      	nop

000051d8 <_ZN9ClearCore11MotorDriver13EnableRequestEb>:
void MotorDriver::EnableRequest(bool value) {
    51d8:	b530      	push	{r4, r5, lr}
    bool wasDisabled = !(m_isEnabled || m_isEnabling);
    51da:	f890 312e 	ldrb.w	r3, [r0, #302]	; 0x12e
void MotorDriver::EnableRequest(bool value) {
    51de:	b083      	sub	sp, #12
    51e0:	4604      	mov	r4, r0
    bool wasDisabled = !(m_isEnabled || m_isEnabling);
    51e2:	2b00      	cmp	r3, #0
    51e4:	d171      	bne.n	52ca <_ZN9ClearCore11MotorDriver13EnableRequestEb+0xf2>
    51e6:	f890 312d 	ldrb.w	r3, [r0, #301]	; 0x12d
    51ea:	f083 0301 	eor.w	r3, r3, #1
    if (value != m_enableRequestedState || m_inFault) {
    51ee:	f894 2100 	ldrb.w	r2, [r4, #256]	; 0x100
    bool wasPulsing = m_enableTriggerActive;
    51f2:	f894 5101 	ldrb.w	r5, [r4, #257]	; 0x101
    if (value != m_enableRequestedState || m_inFault) {
    51f6:	428a      	cmp	r2, r1
    51f8:	d031      	beq.n	525e <_ZN9ClearCore11MotorDriver13EnableRequestEb+0x86>
    51fa:	f894 0114 	ldrb.w	r0, [r4, #276]	; 0x114
    m_enableRequestedState = value;
    51fe:	f884 1100 	strb.w	r1, [r4, #256]	; 0x100
        m_enableTriggerActive = false;
    5202:	2200      	movs	r2, #0
    5204:	f884 2101 	strb.w	r2, [r4, #257]	; 0x101
        m_enableTriggerPulseCount = 0;
    5208:	f8c4 2108 	str.w	r2, [r4, #264]	; 0x108
    value = !m_inFault && value;
    520c:	b358      	cbz	r0, 5266 <_ZN9ClearCore11MotorDriver13EnableRequestEb+0x8e>
    520e:	2100      	movs	r1, #0
  __ASM volatile ("cpsid i" : : : "memory");
    5210:	b672      	cpsid	i
    if (wasDisabled && value) {
    5212:	b36b      	cbz	r3, 5270 <_ZN9ClearCore11MotorDriver13EnableRequestEb+0x98>
    5214:	b371      	cbz	r1, 5274 <_ZN9ClearCore11MotorDriver13EnableRequestEb+0x9c>
        m_enableCounter = CPM_ENABLE_DELAY;
    5216:	f240 42e2 	movw	r2, #1250	; 0x4e2
        m_isEnabling = true;
    521a:	2301      	movs	r3, #1
        m_enableCounter = CPM_ENABLE_DELAY;
    521c:	f8c4 2130 	str.w	r2, [r4, #304]	; 0x130
        m_isEnabling = true;
    5220:	f884 312d 	strb.w	r3, [r4, #301]	; 0x12d
  __ASM volatile ("cpsie i" : : : "memory");
    5224:	b662      	cpsie	i
    if (m_mode == Connector::CPM_MODE_STEP_AND_DIR) {
    5226:	79a3      	ldrb	r3, [r4, #6]
    5228:	2b0a      	cmp	r3, #10
    522a:	d02a      	beq.n	5282 <_ZN9ClearCore11MotorDriver13EnableRequestEb+0xaa>
    if (value != m_shiftRegEnableReq || (wasPulsing && !m_enableTriggerActive)) {
    522c:	f894 313d 	ldrb.w	r3, [r4, #317]	; 0x13d
    5230:	428b      	cmp	r3, r1
    5232:	d035      	beq.n	52a0 <_ZN9ClearCore11MotorDriver13EnableRequestEb+0xc8>
        ShiftReg.ShifterState(value, m_enableMask);
    5234:	f8d4 30a0 	ldr.w	r3, [r4, #160]	; 0xa0
        : ShifterStateClear(bitsToChange);
    5238:	2900      	cmp	r1, #0
    523a:	d13b      	bne.n	52b4 <_ZN9ClearCore11MotorDriver13EnableRequestEb+0xdc>
        atomic_and_fetch(&m_patternOutputs[LED_BLINK_IO_SET], ~bitsToClr);
    523c:	f3bf 8f5b 	dmb	ish
    5240:	4a2d      	ldr	r2, [pc, #180]	; (52f8 <_ZN9ClearCore11MotorDriver13EnableRequestEb+0x120>)
    5242:	43db      	mvns	r3, r3
    5244:	e852 0f00 	ldrex	r0, [r2]
    5248:	4018      	ands	r0, r3
    524a:	e842 0500 	strex	r5, r0, [r2]
    524e:	2d00      	cmp	r5, #0
    5250:	d1f8      	bne.n	5244 <_ZN9ClearCore11MotorDriver13EnableRequestEb+0x6c>
    5252:	f3bf 8f5b 	dmb	ish
     m_shiftRegEnableReq = value;
    5256:	f884 113d 	strb.w	r1, [r4, #317]	; 0x13d
}
    525a:	b003      	add	sp, #12
    525c:	bd30      	pop	{r4, r5, pc}
    if (value != m_enableRequestedState || m_inFault) {
    525e:	f894 2114 	ldrb.w	r2, [r4, #276]	; 0x114
    5262:	2a00      	cmp	r2, #0
    5264:	d133      	bne.n	52ce <_ZN9ClearCore11MotorDriver13EnableRequestEb+0xf6>
    value = !m_inFault && value;
    5266:	2900      	cmp	r1, #0
    5268:	d0d1      	beq.n	520e <_ZN9ClearCore11MotorDriver13EnableRequestEb+0x36>
  __ASM volatile ("cpsid i" : : : "memory");
    526a:	b672      	cpsid	i
    if (wasDisabled && value) {
    526c:	2b00      	cmp	r3, #0
    526e:	d1d1      	bne.n	5214 <_ZN9ClearCore11MotorDriver13EnableRequestEb+0x3c>
    else if (!value) {
    5270:	2900      	cmp	r1, #0
    5272:	d1d7      	bne.n	5224 <_ZN9ClearCore11MotorDriver13EnableRequestEb+0x4c>
        m_isEnabled = false;
    5274:	2300      	movs	r3, #0
    5276:	f884 312e 	strb.w	r3, [r4, #302]	; 0x12e
  __ASM volatile ("cpsie i" : : : "memory");
    527a:	b662      	cpsie	i
    if (m_mode == Connector::CPM_MODE_STEP_AND_DIR) {
    527c:	79a3      	ldrb	r3, [r4, #6]
    527e:	2b0a      	cmp	r3, #10
    5280:	d1d4      	bne.n	522c <_ZN9ClearCore11MotorDriver13EnableRequestEb+0x54>
        if (!value && m_statusRegMotor.bit.StepsActive) {
    5282:	b919      	cbnz	r1, 528c <_ZN9ClearCore11MotorDriver13EnableRequestEb+0xb4>
    5284:	f894 3118 	ldrb.w	r3, [r4, #280]	; 0x118
    5288:	079a      	lsls	r2, r3, #30
    528a:	d428      	bmi.n	52de <_ZN9ClearCore11MotorDriver13EnableRequestEb+0x106>
        if (m_polarityInversions.bit.enableInverted) {
    528c:	f894 30fc 	ldrb.w	r3, [r4, #252]	; 0xfc
    5290:	07db      	lsls	r3, r3, #31
    if (value != m_shiftRegEnableReq || (wasPulsing && !m_enableTriggerActive)) {
    5292:	f894 313d 	ldrb.w	r3, [r4, #317]	; 0x13d
        if (!value && m_statusRegMotor.bit.StepsActive) {
    5296:	bf48      	it	mi
    5298:	f081 0101 	eormi.w	r1, r1, #1
    if (value != m_shiftRegEnableReq || (wasPulsing && !m_enableTriggerActive)) {
    529c:	428b      	cmp	r3, r1
    529e:	d1c9      	bne.n	5234 <_ZN9ClearCore11MotorDriver13EnableRequestEb+0x5c>
    52a0:	2d00      	cmp	r5, #0
    52a2:	d0d8      	beq.n	5256 <_ZN9ClearCore11MotorDriver13EnableRequestEb+0x7e>
    52a4:	f894 3101 	ldrb.w	r3, [r4, #257]	; 0x101
    52a8:	2b00      	cmp	r3, #0
    52aa:	d1d4      	bne.n	5256 <_ZN9ClearCore11MotorDriver13EnableRequestEb+0x7e>
        ShiftReg.ShifterState(value, m_enableMask);
    52ac:	f8d4 30a0 	ldr.w	r3, [r4, #160]	; 0xa0
        : ShifterStateClear(bitsToChange);
    52b0:	2900      	cmp	r1, #0
    52b2:	d0c3      	beq.n	523c <_ZN9ClearCore11MotorDriver13EnableRequestEb+0x64>
        atomic_or_fetch(&m_patternOutputs[LED_BLINK_IO_SET], bitsToSet);
    52b4:	f3bf 8f5b 	dmb	ish
    52b8:	4a0f      	ldr	r2, [pc, #60]	; (52f8 <_ZN9ClearCore11MotorDriver13EnableRequestEb+0x120>)
    52ba:	e852 0f00 	ldrex	r0, [r2]
    52be:	4318      	orrs	r0, r3
    52c0:	e842 0500 	strex	r5, r0, [r2]
    52c4:	2d00      	cmp	r5, #0
    52c6:	d0c4      	beq.n	5252 <_ZN9ClearCore11MotorDriver13EnableRequestEb+0x7a>
    52c8:	e7f7      	b.n	52ba <_ZN9ClearCore11MotorDriver13EnableRequestEb+0xe2>
    bool wasDisabled = !(m_isEnabled || m_isEnabling);
    52ca:	2300      	movs	r3, #0
    52cc:	e78f      	b.n	51ee <_ZN9ClearCore11MotorDriver13EnableRequestEb+0x16>
        m_enableTriggerActive = false;
    52ce:	2200      	movs	r2, #0
    m_enableRequestedState = value;
    52d0:	f884 1100 	strb.w	r1, [r4, #256]	; 0x100
        m_enableTriggerActive = false;
    52d4:	f884 2101 	strb.w	r2, [r4, #257]	; 0x101
        m_enableTriggerPulseCount = 0;
    52d8:	f8c4 2108 	str.w	r2, [r4, #264]	; 0x108
    52dc:	e797      	b.n	520e <_ZN9ClearCore11MotorDriver13EnableRequestEb+0x36>
            m_alertRegMotor.bit.MotionCanceledMotorDisabled = 1;
    52de:	f894 3128 	ldrb.w	r3, [r4, #296]	; 0x128
    52e2:	9101      	str	r1, [sp, #4]
    52e4:	f043 0310 	orr.w	r3, r3, #16
    52e8:	f884 3128 	strb.w	r3, [r4, #296]	; 0x128
            MoveStopAbrupt();
    52ec:	f104 0030 	add.w	r0, r4, #48	; 0x30
    52f0:	f006 fc16 	bl	bb20 <_ZN9ClearCore13StepGenerator14MoveStopAbruptEv>
    52f4:	9901      	ldr	r1, [sp, #4]
    52f6:	e7c9      	b.n	528c <_ZN9ClearCore11MotorDriver13EnableRequestEb+0xb4>
    52f8:	20001acc 	.word	0x20001acc

000052fc <_ZN9ClearCore11MotorDriver11RefreshSlowEv>:
}

void MotorDriver::RefreshSlow() {
    if (!m_initialized) {
    52fc:	f890 312c 	ldrb.w	r3, [r0, #300]	; 0x12c
    5300:	2b00      	cmp	r3, #0
    5302:	d04a      	beq.n	539a <_ZN9ClearCore11MotorDriver11RefreshSlowEv+0x9e>
        return;
    }

    uint32_t currentTimeMs = TimingMgr.Milliseconds();
    5304:	4a35      	ldr	r2, [pc, #212]	; (53dc <_ZN9ClearCore11MotorDriver11RefreshSlowEv+0xe0>)
    if (m_enableTriggerActive &&
    5306:	f890 3101 	ldrb.w	r3, [r0, #257]	; 0x101
    uint32_t currentTimeMs = TimingMgr.Milliseconds();
    530a:	6812      	ldr	r2, [r2, #0]
void MotorDriver::RefreshSlow() {
    530c:	b500      	push	{lr}
    uint32_t currentTimeMs = TimingMgr.Milliseconds();
    530e:	6912      	ldr	r2, [r2, #16]
    if (m_enableTriggerActive &&
    5310:	b98b      	cbnz	r3, 5336 <_ZN9ClearCore11MotorDriver11RefreshSlowEv+0x3a>
        else {
            ToggleEnable();
        }
    }

    switch (m_clearFaultState) {
    5312:	f890 313e 	ldrb.w	r3, [r0, #318]	; 0x13e
    5316:	2b01      	cmp	r3, #1
    5318:	d022      	beq.n	5360 <_ZN9ClearCore11MotorDriver11RefreshSlowEv+0x64>
    531a:	2b02      	cmp	r3, #2
    531c:	d13b      	bne.n	5396 <_ZN9ClearCore11MotorDriver11RefreshSlowEv+0x9a>
                break;
            }
            m_clearFaultState = CLEAR_FAULT_WAIT_FOR_HLFB;
            // Fall through
        case CLEAR_FAULT_WAIT_FOR_HLFB:
            if (m_hlfbState != HLFB_DEASSERTED) {
    531e:	f890 30f4 	ldrb.w	r3, [r0, #244]	; 0xf4
    5322:	2b00      	cmp	r3, #0
    5324:	d145      	bne.n	53b2 <_ZN9ClearCore11MotorDriver11RefreshSlowEv+0xb6>
                AlertRegMotor mask;
                mask.bit.MotorFaulted = 1;
                ClearAlerts(mask.reg);
                m_clearFaultState = CLEAR_FAULT_IDLE;
            }
            else if (!(m_clearFaultHlfbTimer && m_clearFaultHlfbTimer--)) {
    5326:	f8d0 3140 	ldr.w	r3, [r0, #320]	; 0x140
    532a:	2b00      	cmp	r3, #0
    532c:	d13c      	bne.n	53a8 <_ZN9ClearCore11MotorDriver11RefreshSlowEv+0xac>
                m_clearFaultState = CLEAR_FAULT_IDLE;
    532e:	f880 313e 	strb.w	r3, [r0, #318]	; 0x13e
    5332:	f85d fb04 	ldr.w	pc, [sp], #4
            (currentTimeMs - m_enableTriggerPulseStartMs >=
    5336:	f8d0 3104 	ldr.w	r3, [r0, #260]	; 0x104
    if (m_enableTriggerActive &&
    533a:	f8d0 110c 	ldr.w	r1, [r0, #268]	; 0x10c
            (currentTimeMs - m_enableTriggerPulseStartMs >=
    533e:	1ad3      	subs	r3, r2, r3
    if (m_enableTriggerActive &&
    5340:	428b      	cmp	r3, r1
    5342:	d32b      	bcc.n	539c <_ZN9ClearCore11MotorDriver11RefreshSlowEv+0xa0>
        if (!--m_enableTriggerPulseCount) {
    5344:	f8d0 3108 	ldr.w	r3, [r0, #264]	; 0x108
        m_enableTriggerPulseStartMs = currentTimeMs;
    5348:	f8c0 2104 	str.w	r2, [r0, #260]	; 0x104
        if (!--m_enableTriggerPulseCount) {
    534c:	3b01      	subs	r3, #1
    534e:	f8c0 3108 	str.w	r3, [r0, #264]	; 0x108
    5352:	b94b      	cbnz	r3, 5368 <_ZN9ClearCore11MotorDriver11RefreshSlowEv+0x6c>
            m_enableTriggerActive = false;
    5354:	f880 3101 	strb.w	r3, [r0, #257]	; 0x101
    switch (m_clearFaultState) {
    5358:	f890 313e 	ldrb.w	r3, [r0, #318]	; 0x13e
    535c:	2b01      	cmp	r3, #1
    535e:	d1dc      	bne.n	531a <_ZN9ClearCore11MotorDriver11RefreshSlowEv+0x1e>
            m_clearFaultState = CLEAR_FAULT_WAIT_FOR_HLFB;
    5360:	2302      	movs	r3, #2
    5362:	f880 313e 	strb.w	r3, [r0, #318]	; 0x13e
    5366:	e7da      	b.n	531e <_ZN9ClearCore11MotorDriver11RefreshSlowEv+0x22>
        atomic_xor_fetch(&m_patternOutputs[LED_BLINK_IO_SET], fldsToToggle.reg);
    5368:	4b1d      	ldr	r3, [pc, #116]	; (53e0 <_ZN9ClearCore11MotorDriver11RefreshSlowEv+0xe4>)
    536a:	f8d0 20a0 	ldr.w	r2, [r0, #160]	; 0xa0
    536e:	f3bf 8f5b 	dmb	ish
    5372:	e853 1f00 	ldrex	r1, [r3]
    5376:	4051      	eors	r1, r2
    5378:	e843 1e00 	strex	lr, r1, [r3]
    537c:	f1be 0f00 	cmp.w	lr, #0
    5380:	d1f7      	bne.n	5372 <_ZN9ClearCore11MotorDriver11RefreshSlowEv+0x76>
    5382:	f3bf 8f5b 	dmb	ish
    switch (m_clearFaultState) {
    5386:	f890 313e 	ldrb.w	r3, [r0, #318]	; 0x13e
    538a:	2b01      	cmp	r3, #1
    538c:	d1c5      	bne.n	531a <_ZN9ClearCore11MotorDriver11RefreshSlowEv+0x1e>
            if (m_enableTriggerActive) {
    538e:	f890 3101 	ldrb.w	r3, [r0, #257]	; 0x101
    5392:	2b00      	cmp	r3, #0
    5394:	d0e4      	beq.n	5360 <_ZN9ClearCore11MotorDriver11RefreshSlowEv+0x64>
    5396:	f85d fb04 	ldr.w	pc, [sp], #4
    539a:	4770      	bx	lr
    switch (m_clearFaultState) {
    539c:	f890 313e 	ldrb.w	r3, [r0, #318]	; 0x13e
    53a0:	2b02      	cmp	r3, #2
    53a2:	d0bc      	beq.n	531e <_ZN9ClearCore11MotorDriver11RefreshSlowEv+0x22>
    53a4:	f85d fb04 	ldr.w	pc, [sp], #4
            else if (!(m_clearFaultHlfbTimer && m_clearFaultHlfbTimer--)) {
    53a8:	3b01      	subs	r3, #1
    53aa:	f8c0 3140 	str.w	r3, [r0, #320]	; 0x140
    53ae:	f85d fb04 	ldr.w	pc, [sp], #4
            reg = 0;
    53b2:	2200      	movs	r2, #0
        atomic_and_fetch(&m_alertRegMotor.reg, ~mask);
    53b4:	f500 7394 	add.w	r3, r0, #296	; 0x128
    53b8:	f3bf 8f5b 	dmb	ish
    53bc:	e853 1f00 	ldrex	r1, [r3]
    53c0:	f021 0120 	bic.w	r1, r1, #32
    53c4:	e843 1e00 	strex	lr, r1, [r3]
    53c8:	f1be 0f00 	cmp.w	lr, #0
    53cc:	d1f6      	bne.n	53bc <_ZN9ClearCore11MotorDriver11RefreshSlowEv+0xc0>
    53ce:	f3bf 8f5b 	dmb	ish
                m_clearFaultState = CLEAR_FAULT_IDLE;
    53d2:	f880 213e 	strb.w	r2, [r0, #318]	; 0x13e
    53d6:	f85d fb04 	ldr.w	pc, [sp], #4
    53da:	bf00      	nop
    53dc:	20001bec 	.word	0x20001bec
    53e0:	20001acc 	.word	0x20001acc

000053e4 <_ZN9ClearCore11MotorDriver10FaultStateEb>:
    bool wasDisabled = !(m_isEnabled || m_isEnabling);
    53e4:	f890 312e 	ldrb.w	r3, [r0, #302]	; 0x12e
        default:
            break;
    }
}

void MotorDriver::FaultState(bool isFaulted) {
    53e8:	b570      	push	{r4, r5, r6, lr}
    53ea:	4604      	mov	r4, r0
    m_inFault = isFaulted;
    53ec:	f880 1114 	strb.w	r1, [r0, #276]	; 0x114
    bool wasDisabled = !(m_isEnabled || m_isEnabling);
    53f0:	2b00      	cmp	r3, #0
    53f2:	d163      	bne.n	54bc <_ZN9ClearCore11MotorDriver10FaultStateEb+0xd8>
    53f4:	f890 312d 	ldrb.w	r3, [r0, #301]	; 0x12d
    53f8:	f083 0301 	eor.w	r3, r3, #1
    bool wasPulsing = m_enableTriggerActive;
    53fc:	f894 6101 	ldrb.w	r6, [r4, #257]	; 0x101
    if (value != m_enableRequestedState || m_inFault) {
    5400:	bb39      	cbnz	r1, 5452 <_ZN9ClearCore11MotorDriver10FaultStateEb+0x6e>
    // Let EnableRequest handle the fault condition logic
    EnableRequest(m_enableRequestedState);
    5402:	f894 5100 	ldrb.w	r5, [r4, #256]	; 0x100
  __ASM volatile ("cpsid i" : : : "memory");
    5406:	b672      	cpsid	i
    if (wasDisabled && value) {
    5408:	b35b      	cbz	r3, 5462 <_ZN9ClearCore11MotorDriver10FaultStateEb+0x7e>
    540a:	b365      	cbz	r5, 5466 <_ZN9ClearCore11MotorDriver10FaultStateEb+0x82>
        m_enableCounter = CPM_ENABLE_DELAY;
    540c:	f240 42e2 	movw	r2, #1250	; 0x4e2
        m_isEnabling = true;
    5410:	2301      	movs	r3, #1
        m_enableCounter = CPM_ENABLE_DELAY;
    5412:	f8c4 2130 	str.w	r2, [r4, #304]	; 0x130
        m_isEnabling = true;
    5416:	f884 312d 	strb.w	r3, [r4, #301]	; 0x12d
  __ASM volatile ("cpsie i" : : : "memory");
    541a:	b662      	cpsie	i
    if (m_mode == Connector::CPM_MODE_STEP_AND_DIR) {
    541c:	79a3      	ldrb	r3, [r4, #6]
    541e:	2b0a      	cmp	r3, #10
    5420:	d028      	beq.n	5474 <_ZN9ClearCore11MotorDriver10FaultStateEb+0x90>
    if (value != m_shiftRegEnableReq || (wasPulsing && !m_enableTriggerActive)) {
    5422:	f894 313d 	ldrb.w	r3, [r4, #317]	; 0x13d
    5426:	42ab      	cmp	r3, r5
    5428:	d033      	beq.n	5492 <_ZN9ClearCore11MotorDriver10FaultStateEb+0xae>
        ShiftReg.ShifterState(value, m_enableMask);
    542a:	f8d4 30a0 	ldr.w	r3, [r4, #160]	; 0xa0
        : ShifterStateClear(bitsToChange);
    542e:	2d00      	cmp	r5, #0
    5430:	d139      	bne.n	54a6 <_ZN9ClearCore11MotorDriver10FaultStateEb+0xc2>
        atomic_and_fetch(&m_patternOutputs[LED_BLINK_IO_SET], ~bitsToClr);
    5432:	f3bf 8f5b 	dmb	ish
    5436:	4a28      	ldr	r2, [pc, #160]	; (54d8 <_ZN9ClearCore11MotorDriver10FaultStateEb+0xf4>)
    5438:	43db      	mvns	r3, r3
    543a:	e852 1f00 	ldrex	r1, [r2]
    543e:	4019      	ands	r1, r3
    5440:	e842 1000 	strex	r0, r1, [r2]
    5444:	2800      	cmp	r0, #0
    5446:	d1f8      	bne.n	543a <_ZN9ClearCore11MotorDriver10FaultStateEb+0x56>
    5448:	f3bf 8f5b 	dmb	ish
     m_shiftRegEnableReq = value;
    544c:	f884 513d 	strb.w	r5, [r4, #317]	; 0x13d
    5450:	bd70      	pop	{r4, r5, r6, pc}
        m_enableTriggerActive = false;
    5452:	2500      	movs	r5, #0
    5454:	f884 5101 	strb.w	r5, [r4, #257]	; 0x101
        m_enableTriggerPulseCount = 0;
    5458:	f8c4 5108 	str.w	r5, [r4, #264]	; 0x108
  __ASM volatile ("cpsid i" : : : "memory");
    545c:	b672      	cpsid	i
    if (wasDisabled && value) {
    545e:	2b00      	cmp	r3, #0
    5460:	d1d3      	bne.n	540a <_ZN9ClearCore11MotorDriver10FaultStateEb+0x26>
    else if (!value) {
    5462:	2d00      	cmp	r5, #0
    5464:	d1d9      	bne.n	541a <_ZN9ClearCore11MotorDriver10FaultStateEb+0x36>
        m_isEnabled = false;
    5466:	2300      	movs	r3, #0
    5468:	f884 312e 	strb.w	r3, [r4, #302]	; 0x12e
  __ASM volatile ("cpsie i" : : : "memory");
    546c:	b662      	cpsie	i
    if (m_mode == Connector::CPM_MODE_STEP_AND_DIR) {
    546e:	79a3      	ldrb	r3, [r4, #6]
    5470:	2b0a      	cmp	r3, #10
    5472:	d1d6      	bne.n	5422 <_ZN9ClearCore11MotorDriver10FaultStateEb+0x3e>
        if (!value && m_statusRegMotor.bit.StepsActive) {
    5474:	b91d      	cbnz	r5, 547e <_ZN9ClearCore11MotorDriver10FaultStateEb+0x9a>
    5476:	f894 3118 	ldrb.w	r3, [r4, #280]	; 0x118
    547a:	079a      	lsls	r2, r3, #30
    547c:	d420      	bmi.n	54c0 <_ZN9ClearCore11MotorDriver10FaultStateEb+0xdc>
        if (m_polarityInversions.bit.enableInverted) {
    547e:	f894 30fc 	ldrb.w	r3, [r4, #252]	; 0xfc
    5482:	07db      	lsls	r3, r3, #31
    if (value != m_shiftRegEnableReq || (wasPulsing && !m_enableTriggerActive)) {
    5484:	f894 313d 	ldrb.w	r3, [r4, #317]	; 0x13d
        if (!value && m_statusRegMotor.bit.StepsActive) {
    5488:	bf48      	it	mi
    548a:	f085 0501 	eormi.w	r5, r5, #1
    if (value != m_shiftRegEnableReq || (wasPulsing && !m_enableTriggerActive)) {
    548e:	42ab      	cmp	r3, r5
    5490:	d1cb      	bne.n	542a <_ZN9ClearCore11MotorDriver10FaultStateEb+0x46>
    5492:	2e00      	cmp	r6, #0
    5494:	d0da      	beq.n	544c <_ZN9ClearCore11MotorDriver10FaultStateEb+0x68>
    5496:	f894 3101 	ldrb.w	r3, [r4, #257]	; 0x101
    549a:	2b00      	cmp	r3, #0
    549c:	d1d6      	bne.n	544c <_ZN9ClearCore11MotorDriver10FaultStateEb+0x68>
        ShiftReg.ShifterState(value, m_enableMask);
    549e:	f8d4 30a0 	ldr.w	r3, [r4, #160]	; 0xa0
        : ShifterStateClear(bitsToChange);
    54a2:	2d00      	cmp	r5, #0
    54a4:	d0c5      	beq.n	5432 <_ZN9ClearCore11MotorDriver10FaultStateEb+0x4e>
        atomic_or_fetch(&m_patternOutputs[LED_BLINK_IO_SET], bitsToSet);
    54a6:	f3bf 8f5b 	dmb	ish
    54aa:	4a0b      	ldr	r2, [pc, #44]	; (54d8 <_ZN9ClearCore11MotorDriver10FaultStateEb+0xf4>)
    54ac:	e852 1f00 	ldrex	r1, [r2]
    54b0:	4319      	orrs	r1, r3
    54b2:	e842 1000 	strex	r0, r1, [r2]
    54b6:	2800      	cmp	r0, #0
    54b8:	d0c6      	beq.n	5448 <_ZN9ClearCore11MotorDriver10FaultStateEb+0x64>
    54ba:	e7f7      	b.n	54ac <_ZN9ClearCore11MotorDriver10FaultStateEb+0xc8>
    bool wasDisabled = !(m_isEnabled || m_isEnabling);
    54bc:	2300      	movs	r3, #0
    54be:	e79d      	b.n	53fc <_ZN9ClearCore11MotorDriver10FaultStateEb+0x18>
            m_alertRegMotor.bit.MotionCanceledMotorDisabled = 1;
    54c0:	f894 3128 	ldrb.w	r3, [r4, #296]	; 0x128
    54c4:	f043 0310 	orr.w	r3, r3, #16
    54c8:	f884 3128 	strb.w	r3, [r4, #296]	; 0x128
            MoveStopAbrupt();
    54cc:	f104 0030 	add.w	r0, r4, #48	; 0x30
    54d0:	f006 fb26 	bl	bb20 <_ZN9ClearCore13StepGenerator14MoveStopAbruptEv>
    54d4:	e7d3      	b.n	547e <_ZN9ClearCore11MotorDriver10FaultStateEb+0x9a>
    54d6:	bf00      	nop
    54d8:	20001acc 	.word	0x20001acc
    54dc:	00000000 	.word	0x00000000

000054e0 <_ZN9ClearCore11MotorDriver7RefreshEv>:
void MotorDriver::Refresh() {
    54e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    if (!m_initialized) {
    54e2:	f890 312c 	ldrb.w	r3, [r0, #300]	; 0x12c
    54e6:	b903      	cbnz	r3, 54ea <_ZN9ClearCore11MotorDriver7RefreshEv+0xa>
    54e8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    54ea:	4604      	mov	r4, r0
    DigitalIn::Refresh();
    54ec:	f7ff f9d0 	bl	4890 <_ZN9ClearCore9DigitalIn7RefreshEv>
    bool invert = (m_mode == CPM_MODE_STEP_AND_DIR) &&
    54f0:	79a3      	ldrb	r3, [r4, #6]
    TcCount16 *tcCount = &tc_modules[m_hlfbTcNum]->COUNT16;
    54f2:	4a98      	ldr	r2, [pc, #608]	; (5754 <_ZN9ClearCore11MotorDriver7RefreshEv+0x274>)
    54f4:	f894 10d6 	ldrb.w	r1, [r4, #214]	; 0xd6
    bool invert = (m_mode == CPM_MODE_STEP_AND_DIR) &&
    54f8:	2b0a      	cmp	r3, #10
    54fa:	bf08      	it	eq
    54fc:	f894 30fc 	ldrbeq.w	r3, [r4, #252]	; 0xfc
    TcCount16 *tcCount = &tc_modules[m_hlfbTcNum]->COUNT16;
    5500:	f852 7021 	ldr.w	r7, [r2, r1, lsl #2]
    bool invert = (m_mode == CPM_MODE_STEP_AND_DIR) &&
    5504:	bf08      	it	eq
    5506:	f3c3 0680 	ubfxeq	r6, r3, #2, #1
    switch (m_hlfbMode) {
    550a:	f894 30d8 	ldrb.w	r3, [r4, #216]	; 0xd8
    uint8_t intFlagReg = tcCount->INTFLAG.reg;
    550e:	7abd      	ldrb	r5, [r7, #10]
    switch (m_hlfbMode) {
    5510:	f103 33ff 	add.w	r3, r3, #4294967295
    bool invert = (m_mode == CPM_MODE_STEP_AND_DIR) &&
    5514:	bf18      	it	ne
    5516:	2600      	movne	r6, #0
    switch (m_hlfbMode) {
    5518:	2b01      	cmp	r3, #1
    uint8_t intFlagReg = tcCount->INTFLAG.reg;
    551a:	b2ed      	uxtb	r5, r5
    switch (m_hlfbMode) {
    551c:	f240 80df 	bls.w	56de <_ZN9ClearCore11MotorDriver7RefreshEv+0x1fe>
    5520:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
    5524:	4073      	eors	r3, r6
            m_hlfbDuty = HLFB_DUTY_UNKNOWN;
    5526:	4a8c      	ldr	r2, [pc, #560]	; (5758 <_ZN9ClearCore11MotorDriver7RefreshEv+0x278>)
            m_hlfbState = (DigitalIn::m_stateFiltered ^ invert) ?
    5528:	f884 30f4 	strb.w	r3, [r4, #244]	; 0xf4
            m_hlfbDuty = HLFB_DUTY_UNKNOWN;
    552c:	f8c4 20f0 	str.w	r2, [r4, #240]	; 0xf0
    if (m_enableConnector != CLEARCORE_PIN_INVALID) {
    5530:	f9b4 10d0 	ldrsh.w	r1, [r4, #208]	; 0xd0
    5534:	1c48      	adds	r0, r1, #1
    5536:	d012      	beq.n	555e <_ZN9ClearCore11MotorDriver7RefreshEv+0x7e>
        Connector *input= SysMgr.ConnectorByIndex(m_enableConnector);
    5538:	4888      	ldr	r0, [pc, #544]	; (575c <_ZN9ClearCore11MotorDriver7RefreshEv+0x27c>)
    553a:	f003 fdf7 	bl	912c <_ZN9ClearCore10SysManager16ConnectorByIndexE13ClearCorePins>
        if (input->Type() == ClearCore::Connector::CCIO_DIGITAL_IN_OUT_TYPE) {
    553e:	6803      	ldr	r3, [r0, #0]
    5540:	689b      	ldr	r3, [r3, #8]
        Connector *input= SysMgr.ConnectorByIndex(m_enableConnector);
    5542:	4605      	mov	r5, r0
        if (input->Type() == ClearCore::Connector::CCIO_DIGITAL_IN_OUT_TYPE) {
    5544:	4798      	blx	r3
    5546:	2809      	cmp	r0, #9
    5548:	f000 8248 	beq.w	59dc <_ZN9ClearCore11MotorDriver7RefreshEv+0x4fc>
            EnableRequest(enableIn->DigitalIn::State());
    554c:	4628      	mov	r0, r5
    554e:	f7ff f925 	bl	479c <_ZN9ClearCore9DigitalIn5StateEv>
    5552:	1c01      	adds	r1, r0, #0
    5554:	bf18      	it	ne
    5556:	2101      	movne	r1, #1
    5558:	4620      	mov	r0, r4
    555a:	f7ff fe3d 	bl	51d8 <_ZN9ClearCore11MotorDriver13EnableRequestEb>
    if (m_inputAConnector != CLEARCORE_PIN_INVALID && m_mode != CPM_MODE_STEP_AND_DIR) {
    555e:	f9b4 10d2 	ldrsh.w	r1, [r4, #210]	; 0xd2
    5562:	1c4a      	adds	r2, r1, #1
    5564:	d016      	beq.n	5594 <_ZN9ClearCore11MotorDriver7RefreshEv+0xb4>
    5566:	79a3      	ldrb	r3, [r4, #6]
    5568:	2b0a      	cmp	r3, #10
    556a:	d039      	beq.n	55e0 <_ZN9ClearCore11MotorDriver7RefreshEv+0x100>
        Connector *input= SysMgr.ConnectorByIndex(m_inputAConnector);
    556c:	487b      	ldr	r0, [pc, #492]	; (575c <_ZN9ClearCore11MotorDriver7RefreshEv+0x27c>)
    556e:	f003 fddd 	bl	912c <_ZN9ClearCore10SysManager16ConnectorByIndexE13ClearCorePins>
        if (input->Type() == ClearCore::Connector::CCIO_DIGITAL_IN_OUT_TYPE) {
    5572:	6803      	ldr	r3, [r0, #0]
    5574:	689b      	ldr	r3, [r3, #8]
        Connector *input= SysMgr.ConnectorByIndex(m_inputAConnector);
    5576:	4605      	mov	r5, r0
        if (input->Type() == ClearCore::Connector::CCIO_DIGITAL_IN_OUT_TYPE) {
    5578:	4798      	blx	r3
    557a:	2809      	cmp	r0, #9
    557c:	f000 80d0 	beq.w	5720 <_ZN9ClearCore11MotorDriver7RefreshEv+0x240>
            MotorInAState(inputA->DigitalIn::State());
    5580:	4628      	mov	r0, r5
    5582:	f7ff f90b 	bl	479c <_ZN9ClearCore9DigitalIn5StateEv>
    switch (m_mode) {
    5586:	79a3      	ldrb	r3, [r4, #6]
    5588:	2b09      	cmp	r3, #9
    558a:	f000 80d3 	beq.w	5734 <_ZN9ClearCore11MotorDriver7RefreshEv+0x254>
    558e:	2b0b      	cmp	r3, #11
    5590:	f000 80d0 	beq.w	5734 <_ZN9ClearCore11MotorDriver7RefreshEv+0x254>
    if (m_inputBConnector != CLEARCORE_PIN_INVALID && m_mode != CPM_MODE_STEP_AND_DIR) {
    5594:	f9b4 10d4 	ldrsh.w	r1, [r4, #212]	; 0xd4
    5598:	1c4b      	adds	r3, r1, #1
    559a:	d021      	beq.n	55e0 <_ZN9ClearCore11MotorDriver7RefreshEv+0x100>
    559c:	79a3      	ldrb	r3, [r4, #6]
    559e:	2b0a      	cmp	r3, #10
    55a0:	d01e      	beq.n	55e0 <_ZN9ClearCore11MotorDriver7RefreshEv+0x100>
        Connector *input= SysMgr.ConnectorByIndex(m_inputBConnector);
    55a2:	486e      	ldr	r0, [pc, #440]	; (575c <_ZN9ClearCore11MotorDriver7RefreshEv+0x27c>)
    55a4:	f003 fdc2 	bl	912c <_ZN9ClearCore10SysManager16ConnectorByIndexE13ClearCorePins>
        if (input->Type() == ClearCore::Connector::CCIO_DIGITAL_IN_OUT_TYPE) {
    55a8:	6803      	ldr	r3, [r0, #0]
    55aa:	689b      	ldr	r3, [r3, #8]
        Connector *input= SysMgr.ConnectorByIndex(m_inputBConnector);
    55ac:	4605      	mov	r5, r0
        if (input->Type() == ClearCore::Connector::CCIO_DIGITAL_IN_OUT_TYPE) {
    55ae:	4798      	blx	r3
    55b0:	2809      	cmp	r0, #9
    55b2:	f000 8239 	beq.w	5a28 <_ZN9ClearCore11MotorDriver7RefreshEv+0x548>
            MotorInBState(inputB->DigitalIn::State());
    55b6:	4628      	mov	r0, r5
    55b8:	f7ff f8f0 	bl	479c <_ZN9ClearCore9DigitalIn5StateEv>
    switch (m_mode) {
    55bc:	79a3      	ldrb	r3, [r4, #6]
    55be:	2b09      	cmp	r3, #9
    55c0:	d10e      	bne.n	55e0 <_ZN9ClearCore11MotorDriver7RefreshEv+0x100>
            DATA_OUTPUT_STATE(m_bInfo->gpioPort, m_bDataMask, !value);
    55c2:	f8d4 30a8 	ldr.w	r3, [r4, #168]	; 0xa8
    55c6:	f8d4 20b8 	ldr.w	r2, [r4, #184]	; 0xb8
    55ca:	f993 3001 	ldrsb.w	r3, [r3, #1]
    55ce:	01db      	lsls	r3, r3, #7
    55d0:	f103 4382 	add.w	r3, r3, #1090519040	; 0x41000000
    55d4:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
    55d8:	2800      	cmp	r0, #0
    55da:	f000 81d4 	beq.w	5986 <_ZN9ClearCore11MotorDriver7RefreshEv+0x4a6>
    55de:	615a      	str	r2, [r3, #20]
    if (m_brakeOutputPin != CLEARCORE_PIN_INVALID) {
    55e0:	f9b4 1134 	ldrsh.w	r1, [r4, #308]	; 0x134
    55e4:	1c4f      	adds	r7, r1, #1
    55e6:	d010      	beq.n	560a <_ZN9ClearCore11MotorDriver7RefreshEv+0x12a>
        Connector *brakeOutput = SysMgr.ConnectorByIndex(m_brakeOutputPin);
    55e8:	485c      	ldr	r0, [pc, #368]	; (575c <_ZN9ClearCore11MotorDriver7RefreshEv+0x27c>)
    55ea:	f003 fd9f 	bl	912c <_ZN9ClearCore10SysManager16ConnectorByIndexE13ClearCorePins>
        if (brakeOutput->Type() == CCIO_DIGITAL_IN_OUT_TYPE ||
    55ee:	6803      	ldr	r3, [r0, #0]
    55f0:	689b      	ldr	r3, [r3, #8]
        Connector *brakeOutput = SysMgr.ConnectorByIndex(m_brakeOutputPin);
    55f2:	4605      	mov	r5, r0
        if (brakeOutput->Type() == CCIO_DIGITAL_IN_OUT_TYPE ||
    55f4:	4798      	blx	r3
    55f6:	2809      	cmp	r0, #9
    55f8:	f000 817d 	beq.w	58f6 <_ZN9ClearCore11MotorDriver7RefreshEv+0x416>
        brakeOutput->Mode() == ConnectorModes::OUTPUT_DIGITAL) {
    55fc:	682b      	ldr	r3, [r5, #0]
    55fe:	4628      	mov	r0, r5
    5600:	681b      	ldr	r3, [r3, #0]
    5602:	4798      	blx	r3
        if (brakeOutput->Type() == CCIO_DIGITAL_IN_OUT_TYPE ||
    5604:	2804      	cmp	r0, #4
    5606:	f000 8176 	beq.w	58f6 <_ZN9ClearCore11MotorDriver7RefreshEv+0x416>
    if (m_limitSwitchPos != CLEARCORE_PIN_INVALID) {
    560a:	f9b4 1138 	ldrsh.w	r1, [r4, #312]	; 0x138
    560e:	1c4e      	adds	r6, r1, #1
    5610:	d015      	beq.n	563e <_ZN9ClearCore11MotorDriver7RefreshEv+0x15e>
        Connector *input = SysMgr.ConnectorByIndex(m_limitSwitchPos);
    5612:	4852      	ldr	r0, [pc, #328]	; (575c <_ZN9ClearCore11MotorDriver7RefreshEv+0x27c>)
    5614:	f003 fd8a 	bl	912c <_ZN9ClearCore10SysManager16ConnectorByIndexE13ClearCorePins>
        if (input->Type() == CCIO_DIGITAL_IN_OUT_TYPE) {
    5618:	6803      	ldr	r3, [r0, #0]
    561a:	689b      	ldr	r3, [r3, #8]
        Connector *input = SysMgr.ConnectorByIndex(m_limitSwitchPos);
    561c:	4605      	mov	r5, r0
        if (input->Type() == CCIO_DIGITAL_IN_OUT_TYPE) {
    561e:	4798      	blx	r3
    5620:	2809      	cmp	r0, #9
    5622:	f000 81e6 	beq.w	59f2 <_ZN9ClearCore11MotorDriver7RefreshEv+0x512>
            PosLimitActive(!inputB->DigitalIn::State());
    5626:	4628      	mov	r0, r5
    5628:	f7ff f8b8 	bl	479c <_ZN9ClearCore9DigitalIn5StateEv>

        bool CheckTravelLimits();

        void PosLimitActive(bool isActive)
        {
            m_limitInfo.InPosHWLimit = isActive;
    562c:	f894 3040 	ldrb.w	r3, [r4, #64]	; 0x40
    5630:	fab0 f080 	clz	r0, r0
    5634:	0940      	lsrs	r0, r0, #5
    5636:	f360 03c3 	bfi	r3, r0, #3, #1
    563a:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
    if (m_limitSwitchNeg != CLEARCORE_PIN_INVALID) {
    563e:	f9b4 1136 	ldrsh.w	r1, [r4, #310]	; 0x136
    5642:	1c4d      	adds	r5, r1, #1
    5644:	d015      	beq.n	5672 <_ZN9ClearCore11MotorDriver7RefreshEv+0x192>
        Connector *input = SysMgr.ConnectorByIndex(m_limitSwitchNeg);
    5646:	4845      	ldr	r0, [pc, #276]	; (575c <_ZN9ClearCore11MotorDriver7RefreshEv+0x27c>)
    5648:	f003 fd70 	bl	912c <_ZN9ClearCore10SysManager16ConnectorByIndexE13ClearCorePins>
        if (input->Type() == CCIO_DIGITAL_IN_OUT_TYPE) {
    564c:	6803      	ldr	r3, [r0, #0]
    564e:	689b      	ldr	r3, [r3, #8]
        Connector *input = SysMgr.ConnectorByIndex(m_limitSwitchNeg);
    5650:	4605      	mov	r5, r0
        if (input->Type() == CCIO_DIGITAL_IN_OUT_TYPE) {
    5652:	4798      	blx	r3
    5654:	2809      	cmp	r0, #9
    5656:	f000 81d1 	beq.w	59fc <_ZN9ClearCore11MotorDriver7RefreshEv+0x51c>
            NegLimitActive(!inputB->DigitalIn::State());
    565a:	4628      	mov	r0, r5
    565c:	f7ff f89e 	bl	479c <_ZN9ClearCore9DigitalIn5StateEv>
        }

        void NegLimitActive(bool isActive)
        {
            m_limitInfo.InNegHWLimit = isActive;
    5660:	f894 3040 	ldrb.w	r3, [r4, #64]	; 0x40
    5664:	fab0 f080 	clz	r0, r0
    5668:	0940      	lsrs	r0, r0, #5
    566a:	f360 1304 	bfi	r3, r0, #4, #1
    566e:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
           (pin >= CLEARCORE_PIN_CCIOA0 && pin <= CLEARCORE_PIN_CCIOH7);
}

bool MotorDriver::CheckEStopSensor() {
    bool eStop = false;
    if (m_eStopConnector != CLEARCORE_PIN_INVALID) {
    5672:	f9b4 113a 	ldrsh.w	r1, [r4, #314]	; 0x13a
    StatusRegMotor statusRegPending = m_statusRegMotor;
    5676:	f8d4 5118 	ldr.w	r5, [r4, #280]	; 0x118
    AlertRegMotor alertRegPending = m_alertRegMotor;
    567a:	f8d4 6128 	ldr.w	r6, [r4, #296]	; 0x128
    if (m_eStopConnector != CLEARCORE_PIN_INVALID) {
    567e:	1c48      	adds	r0, r1, #1
    5680:	f000 8132 	beq.w	58e8 <_ZN9ClearCore11MotorDriver7RefreshEv+0x408>
        Connector *input = SysMgr.ConnectorByIndex(m_eStopConnector);
    5684:	4835      	ldr	r0, [pc, #212]	; (575c <_ZN9ClearCore11MotorDriver7RefreshEv+0x27c>)
    5686:	f003 fd51 	bl	912c <_ZN9ClearCore10SysManager16ConnectorByIndexE13ClearCorePins>
        if (input->Type() == ClearCore::Connector::CCIO_DIGITAL_IN_OUT_TYPE) {
    568a:	6803      	ldr	r3, [r0, #0]
    568c:	689b      	ldr	r3, [r3, #8]
        Connector *input = SysMgr.ConnectorByIndex(m_eStopConnector);
    568e:	4607      	mov	r7, r0
        if (input->Type() == ClearCore::Connector::CCIO_DIGITAL_IN_OUT_TYPE) {
    5690:	4798      	blx	r3
    5692:	2809      	cmp	r0, #9
    5694:	f000 81c0 	beq.w	5a18 <_ZN9ClearCore11MotorDriver7RefreshEv+0x538>
            eStop = !(input->State());
        }
        else {
            DigitalIn *inputB = static_cast<DigitalIn *>(input);
            eStop = !(inputB->DigitalIn::State());
    5698:	4638      	mov	r0, r7
    569a:	f7ff f87f 	bl	479c <_ZN9ClearCore9DigitalIn5StateEv>
    569e:	fab0 f780 	clz	r7, r0
    56a2:	097f      	lsrs	r7, r7, #5
    if (m_moveState == MS_IDLE) {
    56a4:	f894 303c 	ldrb.w	r3, [r4, #60]	; 0x3c
    56a8:	2b00      	cmp	r3, #0
    56aa:	f040 8131 	bne.w	5910 <_ZN9ClearCore11MotorDriver7RefreshEv+0x430>
        m_motionCancellingEStop = false;
    56ae:	f884 313c 	strb.w	r3, [r4, #316]	; 0x13c
    if (!m_lastMoveWasPositional && m_statusRegMotor.bit.StepsActive) {
    56b2:	f894 103e 	ldrb.w	r1, [r4, #62]	; 0x3e
    statusRegPending.bit.InEStopSensor = (eStopInput || m_motionCancellingEStop);
    56b6:	f367 4510 	bfi	r5, r7, #16, #1
    if (!m_lastMoveWasPositional && m_statusRegMotor.bit.StepsActive) {
    56ba:	2900      	cmp	r1, #0
    56bc:	d152      	bne.n	5764 <_ZN9ClearCore11MotorDriver7RefreshEv+0x284>
    56be:	f894 2118 	ldrb.w	r2, [r4, #280]	; 0x118
    56c2:	0792      	lsls	r2, r2, #30
    56c4:	d54e      	bpl.n	5764 <_ZN9ClearCore11MotorDriver7RefreshEv+0x284>
        if (m_direction && m_limitInfo.InNegHWLimit) {
    56c6:	f894 003d 	ldrb.w	r0, [r4, #61]	; 0x3d
    56ca:	f894 2040 	ldrb.w	r2, [r4, #64]	; 0x40
    56ce:	2800      	cmp	r0, #0
    56d0:	f000 8152 	beq.w	5978 <_ZN9ClearCore11MotorDriver7RefreshEv+0x498>
    56d4:	06d7      	lsls	r7, r2, #27
    56d6:	d549      	bpl.n	576c <_ZN9ClearCore11MotorDriver7RefreshEv+0x28c>
            alertRegPending.bit.MotionCanceledNegativeLimit = 1;
    56d8:	f046 0604 	orr.w	r6, r6, #4
    56dc:	e046      	b.n	576c <_ZN9ClearCore11MotorDriver7RefreshEv+0x28c>
            if ((intFlagReg & (TC_INTFLAG_OVF | TC_INTFLAG_ERR)) ||
    56de:	07aa      	lsls	r2, r5, #30
    56e0:	f000 8161 	beq.w	59a6 <_ZN9ClearCore11MotorDriver7RefreshEv+0x4c6>
                tcCount->INTFLAG.reg = TC_INTFLAG_OVF | TC_INTFLAG_MC0 |
    56e4:	2333      	movs	r3, #51	; 0x33
    56e6:	72bb      	strb	r3, [r7, #10]
                m_hlfbNoPwmSampleCount = __QADD16(m_hlfbNoPwmSampleCount, 1U);
    56e8:	f8b4 30e2 	ldrh.w	r3, [r4, #226]	; 0xe2

__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __QADD16(uint32_t op1, uint32_t op2)
{
  uint32_t result;

  __ASM volatile ("qadd16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
    56ec:	2201      	movs	r2, #1
    56ee:	fa93 f312 	qadd16	r3, r3, r2
                    m_hlfbNoPwmSampleCount > HLFB_CARRIER_LOSS_ERROR_LIMIT;
    56f2:	b29a      	uxth	r2, r3
    56f4:	3200      	adds	r2, #0
    56f6:	bf18      	it	ne
    56f8:	2201      	movne	r2, #1
                m_hlfbNoPwmSampleCount = __QADD16(m_hlfbNoPwmSampleCount, 1U);
    56fa:	f8a4 30e2 	strh.w	r3, [r4, #226]	; 0xe2
                    m_hlfbNoPwmSampleCount > HLFB_CARRIER_LOSS_ERROR_LIMIT;
    56fe:	f884 212f 	strb.w	r2, [r4, #303]	; 0x12f
            if (intFlagReg & TC_INTFLAG_MC0) {
    5702:	06eb      	lsls	r3, r5, #27
    5704:	f100 8158 	bmi.w	59b8 <_ZN9ClearCore11MotorDriver7RefreshEv+0x4d8>
    5708:	f894 312f 	ldrb.w	r3, [r4, #303]	; 0x12f
            if (!m_hlfbCarrierLost) {
    570c:	2b00      	cmp	r3, #0
    570e:	f040 810f 	bne.w	5930 <_ZN9ClearCore11MotorDriver7RefreshEv+0x450>
                m_hlfbStateChangeCounter = (MS_TO_SAMPLES * m_hlfbCarrierLossStateChange_ms);
    5712:	f8d4 30e8 	ldr.w	r3, [r4, #232]	; 0xe8
    5716:	eb03 0383 	add.w	r3, r3, r3, lsl #2
    571a:	f8a4 30f8 	strh.w	r3, [r4, #248]	; 0xf8
    571e:	e707      	b.n	5530 <_ZN9ClearCore11MotorDriver7RefreshEv+0x50>
            MotorInAState(CcioMgr.PinState(m_inputAConnector));
    5720:	4b0f      	ldr	r3, [pc, #60]	; (5760 <_ZN9ClearCore11MotorDriver7RefreshEv+0x280>)
    5722:	f9b4 10d2 	ldrsh.w	r1, [r4, #210]	; 0xd2
    5726:	6818      	ldr	r0, [r3, #0]
    5728:	f009 fe9c 	bl	f464 <_ZN9ClearCore16CcioBoardManager8PinStateE13ClearCorePins>
    switch (m_mode) {
    572c:	79a3      	ldrb	r3, [r4, #6]
    572e:	2b09      	cmp	r3, #9
    5730:	f47f af2d 	bne.w	558e <_ZN9ClearCore11MotorDriver7RefreshEv+0xae>
            DATA_OUTPUT_STATE(m_aInfo->gpioPort, m_aDataMask, !value);
    5734:	f8d4 30a4 	ldr.w	r3, [r4, #164]	; 0xa4
    5738:	f8d4 20b0 	ldr.w	r2, [r4, #176]	; 0xb0
    573c:	f993 3001 	ldrsb.w	r3, [r3, #1]
    5740:	01db      	lsls	r3, r3, #7
    5742:	f103 4382 	add.w	r3, r3, #1090519040	; 0x41000000
    5746:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
    574a:	2800      	cmp	r0, #0
    574c:	f000 8119 	beq.w	5982 <_ZN9ClearCore11MotorDriver7RefreshEv+0x4a2>
    5750:	615a      	str	r2, [r3, #20]
    5752:	e71f      	b.n	5594 <_ZN9ClearCore11MotorDriver7RefreshEv+0xb4>
    5754:	00022bc4 	.word	0x00022bc4
    5758:	c61c3c00 	.word	0xc61c3c00
    575c:	200019d4 	.word	0x200019d4
    5760:	20001efc 	.word	0x20001efc
    5764:	f894 003d 	ldrb.w	r0, [r4, #61]	; 0x3d
    5768:	f894 2040 	ldrb.w	r2, [r4, #64]	; 0x40
    statusRegPending.bit.InPositiveLimit = m_limitInfo.InPosHWLimit;
    576c:	f3c2 07c0 	ubfx	r7, r2, #3, #1
    5770:	f367 358e 	bfi	r5, r7, #14, #1
    statusRegPending.bit.InNegativeLimit = m_limitInfo.InNegHWLimit;
    5774:	f3c2 1200 	ubfx	r2, r2, #4, #1
    statusRegPending.bit.Triggering = m_enableTriggerActive;
    5778:	f894 7101 	ldrb.w	r7, [r4, #257]	; 0x101
    statusRegPending.bit.InNegativeLimit = m_limitInfo.InNegHWLimit;
    577c:	f362 35cf 	bfi	r5, r2, #15, #1
    statusRegPending.bit.Triggering = m_enableTriggerActive;
    5780:	f367 354d 	bfi	r5, r7, #13, #1
    statusRegPending.bit.MoveDirection = StepGenerator::m_direction;
    5784:	f360 05c3 	bfi	r5, r0, #3, #1
        (StepGenerator::m_moveState != StepGenerator::MoveStates::MS_IDLE &&
    5788:	2b00      	cmp	r3, #0
    578a:	f000 80ab 	beq.w	58e4 <_ZN9ClearCore11MotorDriver7RefreshEv+0x404>
    578e:	1f98      	subs	r0, r3, #6
    5790:	bf18      	it	ne
    5792:	2001      	movne	r0, #1
    statusRegPending.bit.AtTargetPosition = m_isEnabled && 
    5794:	f894 212e 	ldrb.w	r2, [r4, #302]	; 0x12e
    statusRegPending.bit.StepsActive =
    5798:	f360 0541 	bfi	r5, r0, #1, #1
        m_lastMoveWasPositional && !statusRegPending.bit.StepsActive &&
    579c:	2a00      	cmp	r2, #0
    579e:	f000 809b 	beq.w	58d8 <_ZN9ClearCore11MotorDriver7RefreshEv+0x3f8>
        m_hlfbState == HLFB_ASSERTED;
    57a2:	f894 00f4 	ldrb.w	r0, [r4, #244]	; 0xf4
    statusRegPending.bit.AtTargetPosition = m_isEnabled && 
    57a6:	b111      	cbz	r1, 57ae <_ZN9ClearCore11MotorDriver7RefreshEv+0x2ce>
        m_lastMoveWasPositional && !statusRegPending.bit.StepsActive &&
    57a8:	07af      	lsls	r7, r5, #30
    57aa:	f140 80df 	bpl.w	596c <_ZN9ClearCore11MotorDriver7RefreshEv+0x48c>
    statusRegPending.bit.AtTargetPosition = m_isEnabled && 
    57ae:	f36f 0500 	bfc	r5, #0, #1
    statusRegPending.bit.AtTargetVelocity = m_isEnabled &&
    57b2:	2b03      	cmp	r3, #3
    57b4:	d071      	beq.n	589a <_ZN9ClearCore11MotorDriver7RefreshEv+0x3ba>
        (StepGenerator::m_moveState == StepGenerator::MoveStates::MS_CRUISE ||
    57b6:	f015 0302 	ands.w	r3, r5, #2
    57ba:	f040 80ce 	bne.w	595a <_ZN9ClearCore11MotorDriver7RefreshEv+0x47a>
        (!statusRegPending.bit.StepsActive && !m_lastMoveWasPositional)) &&
    57be:	2900      	cmp	r1, #0
    57c0:	d06b      	beq.n	589a <_ZN9ClearCore11MotorDriver7RefreshEv+0x3ba>
    statusRegPending.bit.AtTargetVelocity = m_isEnabled &&
    57c2:	f363 0582 	bfi	r5, r3, #2, #1
    if (m_isEnabling) {
    57c6:	f894 312d 	ldrb.w	r3, [r4, #301]	; 0x12d
    statusRegPending.bit.PositionalMove = m_lastMoveWasPositional;
    57ca:	f361 1586 	bfi	r5, r1, #6, #1
    statusRegPending.bit.HlfbState = m_hlfbState;
    57ce:	f360 15c8 	bfi	r5, r0, #7, #2
    if (m_isEnabling) {
    57d2:	2b00      	cmp	r3, #0
    57d4:	d065      	beq.n	58a2 <_ZN9ClearCore11MotorDriver7RefreshEv+0x3c2>
        if (m_enableCounter > 0) {
    57d6:	f8d4 3130 	ldr.w	r3, [r4, #304]	; 0x130
    57da:	2b00      	cmp	r3, #0
    57dc:	f340 8113 	ble.w	5a06 <_ZN9ClearCore11MotorDriver7RefreshEv+0x526>
    statusRegPending.bit.Enabled = m_isEnabled;
    57e0:	f362 1545 	bfi	r5, r2, #5, #1
        statusRegPending.bit.ReadyState = MotorReadyStates::MOTOR_ENABLING;
    57e4:	2201      	movs	r2, #1
            m_enableCounter--;
    57e6:	3b01      	subs	r3, #1
        statusRegPending.bit.ReadyState = MotorReadyStates::MOTOR_ENABLING;
    57e8:	f362 258c 	bfi	r5, r2, #10, #3
            m_enableCounter--;
    57ec:	f8c4 3130 	str.w	r3, [r4, #304]	; 0x130
    57f0:	f005 0302 	and.w	r3, r5, #2
    if (statusRegPending.bit.StepsActive) {
    57f4:	b11b      	cbz	r3, 57fe <_ZN9ClearCore11MotorDriver7RefreshEv+0x31e>
        if (alertRegPending.bit.MotorFaulted) {
    57f6:	06b3      	lsls	r3, r6, #26
            alertRegPending.bit.MotionCanceledInAlert = 1;
    57f8:	bf48      	it	mi
    57fa:	f046 0601 	orrmi.w	r6, r6, #1
    statusRegPending.bit.AlertsPresent = (bool)alertRegPending.reg;
    57fe:	1c32      	adds	r2, r6, #0
    5800:	bf18      	it	ne
    5802:	2201      	movne	r2, #1
    atomic_or_fetch(&m_statusRegMotorRisen.reg,
    5804:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
    m_alertRegMotor = alertRegPending;
    5808:	f8c4 6128 	str.w	r6, [r4, #296]	; 0x128
    statusRegPending.bit.AlertsPresent = (bool)alertRegPending.reg;
    580c:	f362 2549 	bfi	r5, r2, #9, #1
    m_statusRegMotor = statusRegPending;
    5810:	f8c4 5118 	str.w	r5, [r4, #280]	; 0x118
    atomic_or_fetch(&m_statusRegMotorRisen.reg,
    5814:	ea25 0303 	bic.w	r3, r5, r3
                    ~m_statusRegMotorLast.reg & statusRegPending.reg);
    5818:	f504 728e 	add.w	r2, r4, #284	; 0x11c
    581c:	f3bf 8f5b 	dmb	ish
    5820:	e852 1f00 	ldrex	r1, [r2]
    5824:	4319      	orrs	r1, r3
    5826:	e842 1000 	strex	r0, r1, [r2]
    582a:	2800      	cmp	r0, #0
    582c:	d1f8      	bne.n	5820 <_ZN9ClearCore11MotorDriver7RefreshEv+0x340>
    582e:	f3bf 8f5b 	dmb	ish
    atomic_or_fetch(&m_statusRegMotorFallen.reg,
    5832:	f8d4 2124 	ldr.w	r2, [r4, #292]	; 0x124
                    m_statusRegMotorLast.reg & ~statusRegPending.reg);
    5836:	f3bf 8f5b 	dmb	ish
    583a:	f504 7390 	add.w	r3, r4, #288	; 0x120
    atomic_or_fetch(&m_statusRegMotorFallen.reg,
    583e:	ea22 0505 	bic.w	r5, r2, r5
                    m_statusRegMotorLast.reg & ~statusRegPending.reg);
    5842:	e853 2f00 	ldrex	r2, [r3]
    5846:	432a      	orrs	r2, r5
    5848:	e843 2100 	strex	r1, r2, [r3]
    584c:	2900      	cmp	r1, #0
    584e:	d1f8      	bne.n	5842 <_ZN9ClearCore11MotorDriver7RefreshEv+0x362>
    5850:	f3bf 8f5b 	dmb	ish
    if (Connector::m_mode == Connector::CPM_MODE_STEP_AND_DIR) {
    5854:	79a3      	ldrb	r3, [r4, #6]
    m_statusRegMotorLast.reg = m_statusRegMotor.reg;
    5856:	f8d4 2118 	ldr.w	r2, [r4, #280]	; 0x118
    585a:	f8c4 2124 	str.w	r2, [r4, #292]	; 0x124
    if (Connector::m_mode == Connector::CPM_MODE_STEP_AND_DIR) {
    585e:	2b0a      	cmp	r3, #10
    5860:	f47f ae42 	bne.w	54e8 <_ZN9ClearCore11MotorDriver7RefreshEv+0x8>
        StepGenerator::StepsCalculated();
    5864:	f104 0530 	add.w	r5, r4, #48	; 0x30
    5868:	4628      	mov	r0, r5
    586a:	f005 feb1 	bl	b5d0 <_ZN9ClearCore13StepGenerator15StepsCalculatedEv>
        StepGenerator::CheckTravelLimits();
    586e:	4628      	mov	r0, r5
    5870:	f006 f9d2 	bl	bc18 <_ZN9ClearCore13StepGenerator17CheckTravelLimitsEv>
    if (*m_bTccBuffer == m_bDutyCnt) {
    5874:	f8d4 50bc 	ldr.w	r5, [r4, #188]	; 0xbc
        m_bDutyCnt = StepGenerator::m_stepsPrevious;
    5878:	6b60      	ldr	r0, [r4, #52]	; 0x34
    if (*m_bTccBuffer == m_bDutyCnt) {
    587a:	682a      	ldr	r2, [r5, #0]
        m_bDutyCnt = StepGenerator::m_stepsPrevious;
    587c:	f8a4 0112 	strh.w	r0, [r4, #274]	; 0x112
    5880:	b280      	uxth	r0, r0
    if (*m_bTccBuffer == m_bDutyCnt) {
    5882:	4282      	cmp	r2, r0
    5884:	f43f ae30 	beq.w	54e8 <_ZN9ClearCore11MotorDriver7RefreshEv+0x8>
    5888:	f8d4 10cc 	ldr.w	r1, [r4, #204]	; 0xcc
    588c:	f8d4 20c8 	ldr.w	r2, [r4, #200]	; 0xc8
    while (*m_bTccSyncReg & m_bTccSyncMask) {
    5890:	680b      	ldr	r3, [r1, #0]
    5892:	4213      	tst	r3, r2
    5894:	d1fc      	bne.n	5890 <_ZN9ClearCore11MotorDriver7RefreshEv+0x3b0>
    *m_bTccBuffer = m_bDutyCnt;
    5896:	6028      	str	r0, [r5, #0]
    5898:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        (!statusRegPending.bit.StepsActive && !m_lastMoveWasPositional)) &&
    589a:	1c03      	adds	r3, r0, #0
    589c:	bf18      	it	ne
    589e:	2301      	movne	r3, #1
    58a0:	e78f      	b.n	57c2 <_ZN9ClearCore11MotorDriver7RefreshEv+0x2e2>
    statusRegPending.bit.Enabled = m_isEnabled;
    58a2:	f362 1545 	bfi	r5, r2, #5, #1
    if (!(m_isEnabled || m_isEnabling)) {
    58a6:	2a00      	cmp	r2, #0
    58a8:	d03a      	beq.n	5920 <_ZN9ClearCore11MotorDriver7RefreshEv+0x440>
        if (m_hlfbMode != HLFB_MODE_STATIC &&
    58aa:	f894 30d8 	ldrb.w	r3, [r4, #216]	; 0xd8
    58ae:	b933      	cbnz	r3, 58be <_ZN9ClearCore11MotorDriver7RefreshEv+0x3de>
        else if ((m_hlfbMode == HLFB_MODE_STATIC &&
    58b0:	b938      	cbnz	r0, 58c2 <_ZN9ClearCore11MotorDriver7RefreshEv+0x3e2>
    58b2:	f005 0302 	and.w	r3, r5, #2
            statusRegPending.bit.ReadyState = MotorReadyStates::MOTOR_MOVING;
    58b6:	2204      	movs	r2, #4
    58b8:	f362 258c 	bfi	r5, r2, #10, #3
    58bc:	e79a      	b.n	57f4 <_ZN9ClearCore11MotorDriver7RefreshEv+0x314>
        if (m_hlfbMode != HLFB_MODE_STATIC &&
    58be:	2800      	cmp	r0, #0
    58c0:	d063      	beq.n	598a <_ZN9ClearCore11MotorDriver7RefreshEv+0x4aa>
                  m_hlfbState == MotorDriver::HlfbStates::HLFB_DEASSERTED) ||
    58c2:	f015 0302 	ands.w	r3, r5, #2
    58c6:	d1f6      	bne.n	58b6 <_ZN9ClearCore11MotorDriver7RefreshEv+0x3d6>
            statusRegPending.bit.ReadyState = MotorReadyStates::MOTOR_READY;
    58c8:	2203      	movs	r2, #3
    58ca:	f362 258c 	bfi	r5, r2, #10, #3
            statusRegPending.bit.MotorInFault = 0;
    58ce:	f363 1504 	bfi	r5, r3, #4, #1
    58d2:	f005 0302 	and.w	r3, r5, #2
    58d6:	e78d      	b.n	57f4 <_ZN9ClearCore11MotorDriver7RefreshEv+0x314>
    statusRegPending.bit.AtTargetPosition = m_isEnabled && 
    58d8:	f362 0500 	bfi	r5, r2, #0, #1
    58dc:	f894 00f4 	ldrb.w	r0, [r4, #244]	; 0xf4
        (!statusRegPending.bit.StepsActive && !m_lastMoveWasPositional)) &&
    58e0:	4613      	mov	r3, r2
    58e2:	e76e      	b.n	57c2 <_ZN9ClearCore11MotorDriver7RefreshEv+0x2e2>
        (StepGenerator::m_moveState != StepGenerator::MoveStates::MS_IDLE &&
    58e4:	4618      	mov	r0, r3
    58e6:	e755      	b.n	5794 <_ZN9ClearCore11MotorDriver7RefreshEv+0x2b4>
    if (m_moveState == MS_IDLE) {
    58e8:	f894 303c 	ldrb.w	r3, [r4, #60]	; 0x3c
    58ec:	bb93      	cbnz	r3, 5954 <_ZN9ClearCore11MotorDriver7RefreshEv+0x474>
        m_motionCancellingEStop = false;
    58ee:	f884 313c 	strb.w	r3, [r4, #316]	; 0x13c
    58f2:	461f      	mov	r7, r3
    58f4:	e6dd      	b.n	56b2 <_ZN9ClearCore11MotorDriver7RefreshEv+0x1d2>
            if (m_hlfbMode == HLFB_MODE_STATIC) {
    58f6:	f894 10d8 	ldrb.w	r1, [r4, #216]	; 0xd8
    58fa:	b381      	cbz	r1, 595e <_ZN9ClearCore11MotorDriver7RefreshEv+0x47e>
                brakeOutput->State(static_cast<int16_t>(m_hlfbState != HLFB_DEASSERTED && m_isEnabled));
    58fc:	682b      	ldr	r3, [r5, #0]
    58fe:	f894 10f4 	ldrb.w	r1, [r4, #244]	; 0xf4
    5902:	695b      	ldr	r3, [r3, #20]
    5904:	b109      	cbz	r1, 590a <_ZN9ClearCore11MotorDriver7RefreshEv+0x42a>
    5906:	f894 112e 	ldrb.w	r1, [r4, #302]	; 0x12e
    590a:	4628      	mov	r0, r5
    590c:	4798      	blx	r3
    590e:	e67c      	b.n	560a <_ZN9ClearCore11MotorDriver7RefreshEv+0x12a>
    else if (eStopInput && !m_motionCancellingEStop) {
    5910:	b307      	cbz	r7, 5954 <_ZN9ClearCore11MotorDriver7RefreshEv+0x474>
    5912:	f894 113c 	ldrb.w	r1, [r4, #316]	; 0x13c
    5916:	2900      	cmp	r1, #0
    5918:	f000 80ab 	beq.w	5a72 <_ZN9ClearCore11MotorDriver7RefreshEv+0x592>
    statusRegPending.bit.InEStopSensor = (eStopInput || m_motionCancellingEStop);
    591c:	460f      	mov	r7, r1
    591e:	e6c8      	b.n	56b2 <_ZN9ClearCore11MotorDriver7RefreshEv+0x1d2>
        statusRegPending.bit.ReadyState = MotorReadyStates::MOTOR_DISABLED;
    5920:	f362 258c 	bfi	r5, r2, #10, #3
        if (statusRegPending.bit.StepsActive) {
    5924:	07aa      	lsls	r2, r5, #30
    5926:	f57f af6a 	bpl.w	57fe <_ZN9ClearCore11MotorDriver7RefreshEv+0x31e>
            alertRegPending.bit.MotionCanceledMotorDisabled = 1;
    592a:	f046 0610 	orr.w	r6, r6, #16
    592e:	e762      	b.n	57f6 <_ZN9ClearCore11MotorDriver7RefreshEv+0x316>
                bool readHlfbState = (DigitalIn::m_stateFiltered ^ invert);
    5930:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
                if (readHlfbState != m_lastHlfbInputValue) {
    5934:	f894 10f5 	ldrb.w	r1, [r4, #245]	; 0xf5
                bool readHlfbState = (DigitalIn::m_stateFiltered ^ invert);
    5938:	4073      	eors	r3, r6
    593a:	b2da      	uxtb	r2, r3
                if (readHlfbState != m_lastHlfbInputValue) {
    593c:	4291      	cmp	r1, r2
    593e:	f000 80a4 	beq.w	5a8a <_ZN9ClearCore11MotorDriver7RefreshEv+0x5aa>
                    m_hlfbStateChangeCounter = (MS_TO_SAMPLES * m_hlfbCarrierLossStateChange_ms);
    5942:	f8d4 30e8 	ldr.w	r3, [r4, #232]	; 0xe8
                    m_lastHlfbInputValue = readHlfbState;
    5946:	f884 20f5 	strb.w	r2, [r4, #245]	; 0xf5
                    m_hlfbStateChangeCounter = (MS_TO_SAMPLES * m_hlfbCarrierLossStateChange_ms);
    594a:	eb03 0383 	add.w	r3, r3, r3, lsl #2
    594e:	f8a4 30f8 	strh.w	r3, [r4, #248]	; 0xf8
    5952:	e5ed      	b.n	5530 <_ZN9ClearCore11MotorDriver7RefreshEv+0x50>
    5954:	f894 713c 	ldrb.w	r7, [r4, #316]	; 0x13c
    5958:	e6ab      	b.n	56b2 <_ZN9ClearCore11MotorDriver7RefreshEv+0x1d2>
        (!statusRegPending.bit.StepsActive && !m_lastMoveWasPositional)) &&
    595a:	2300      	movs	r3, #0
    595c:	e731      	b.n	57c2 <_ZN9ClearCore11MotorDriver7RefreshEv+0x2e2>
                brakeOutput->State(static_cast<int16_t>(m_hlfbState == HLFB_ASSERTED && m_isEnabled));
    595e:	f894 20f4 	ldrb.w	r2, [r4, #244]	; 0xf4
    5962:	682b      	ldr	r3, [r5, #0]
    5964:	2a01      	cmp	r2, #1
    5966:	695b      	ldr	r3, [r3, #20]
    5968:	d1cf      	bne.n	590a <_ZN9ClearCore11MotorDriver7RefreshEv+0x42a>
    596a:	e7cc      	b.n	5906 <_ZN9ClearCore11MotorDriver7RefreshEv+0x426>
        m_lastMoveWasPositional && !statusRegPending.bit.StepsActive &&
    596c:	2801      	cmp	r0, #1
    596e:	f47f af1e 	bne.w	57ae <_ZN9ClearCore11MotorDriver7RefreshEv+0x2ce>
    statusRegPending.bit.AtTargetPosition = m_isEnabled && 
    5972:	f045 0501 	orr.w	r5, r5, #1
    5976:	e71c      	b.n	57b2 <_ZN9ClearCore11MotorDriver7RefreshEv+0x2d2>
        else if (!m_direction && m_limitInfo.InPosHWLimit) {
    5978:	0717      	lsls	r7, r2, #28
            alertRegPending.bit.MotionCanceledPositiveLimit = 1;
    597a:	bf48      	it	mi
    597c:	f046 0602 	orrmi.w	r6, r6, #2
    5980:	e6f4      	b.n	576c <_ZN9ClearCore11MotorDriver7RefreshEv+0x28c>
            DATA_OUTPUT_STATE(m_aInfo->gpioPort, m_aDataMask, !value);
    5982:	619a      	str	r2, [r3, #24]
    5984:	e606      	b.n	5594 <_ZN9ClearCore11MotorDriver7RefreshEv+0xb4>
            DATA_OUTPUT_STATE(m_bInfo->gpioPort, m_bDataMask, !value);
    5986:	619a      	str	r2, [r3, #24]
    5988:	e62a      	b.n	55e0 <_ZN9ClearCore11MotorDriver7RefreshEv+0x100>
            statusRegPending.bit.ReadyState = MotorReadyStates::MOTOR_FAULTED;
    598a:	2302      	movs	r3, #2
    598c:	f363 258c 	bfi	r5, r3, #10, #3
            statusRegPending.bit.MotorInFault = 1;
    5990:	f045 0510 	orr.w	r5, r5, #16
            MoveStopAbrupt();
    5994:	f104 0030 	add.w	r0, r4, #48	; 0x30
    5998:	f006 f8c2 	bl	bb20 <_ZN9ClearCore13StepGenerator14MoveStopAbruptEv>
            alertRegPending.bit.MotorFaulted = 1;
    599c:	f046 0620 	orr.w	r6, r6, #32
    59a0:	f005 0302 	and.w	r3, r5, #2
    59a4:	e726      	b.n	57f4 <_ZN9ClearCore11MotorDriver7RefreshEv+0x314>
                (Milliseconds() - m_hlfbLastCarrierDetectTime
    59a6:	f004 f9e1 	bl	9d6c <Milliseconds>
    59aa:	f8d4 30ec 	ldr.w	r3, [r4, #236]	; 0xec
    59ae:	1ac0      	subs	r0, r0, r3
            if ((intFlagReg & (TC_INTFLAG_OVF | TC_INTFLAG_ERR)) ||
    59b0:	2803      	cmp	r0, #3
    59b2:	f63f ae97 	bhi.w	56e4 <_ZN9ClearCore11MotorDriver7RefreshEv+0x204>
    59b6:	e6a4      	b.n	5702 <_ZN9ClearCore11MotorDriver7RefreshEv+0x222>
                m_hlfbLastCarrierDetectTime = Milliseconds();
    59b8:	f004 f9d8 	bl	9d6c <Milliseconds>
                if (m_hlfbNoPwmSampleCount) {
    59bc:	f8b4 30e2 	ldrh.w	r3, [r4, #226]	; 0xe2
                m_hlfbLastCarrierDetectTime = Milliseconds();
    59c0:	f8c4 00ec 	str.w	r0, [r4, #236]	; 0xec
                if (m_hlfbNoPwmSampleCount) {
    59c4:	2b00      	cmp	r3, #0
    59c6:	d03a      	beq.n	5a3e <_ZN9ClearCore11MotorDriver7RefreshEv+0x55e>
                    tcCount->INTFLAG.reg = TC_INTFLAG_MC0 | TC_INTFLAG_MC1;
    59c8:	2330      	movs	r3, #48	; 0x30
    59ca:	72bb      	strb	r3, [r7, #10]
                    m_hlfbPwmReadingPending = false;
    59cc:	2200      	movs	r2, #0
    59ce:	f894 312f 	ldrb.w	r3, [r4, #303]	; 0x12f
    59d2:	f884 20f6 	strb.w	r2, [r4, #246]	; 0xf6
                    m_hlfbNoPwmSampleCount = 0;
    59d6:	f8a4 20e2 	strh.w	r2, [r4, #226]	; 0xe2
    59da:	e697      	b.n	570c <_ZN9ClearCore11MotorDriver7RefreshEv+0x22c>
            EnableRequest(CcioMgr.PinState(m_enableConnector));
    59dc:	4b54      	ldr	r3, [pc, #336]	; (5b30 <_ZN9ClearCore11MotorDriver7RefreshEv+0x650>)
    59de:	f9b4 10d0 	ldrsh.w	r1, [r4, #208]	; 0xd0
    59e2:	6818      	ldr	r0, [r3, #0]
    59e4:	f009 fd3e 	bl	f464 <_ZN9ClearCore16CcioBoardManager8PinStateE13ClearCorePins>
    59e8:	4601      	mov	r1, r0
    59ea:	4620      	mov	r0, r4
    59ec:	f7ff fbf4 	bl	51d8 <_ZN9ClearCore11MotorDriver13EnableRequestEb>
    59f0:	e5b5      	b.n	555e <_ZN9ClearCore11MotorDriver7RefreshEv+0x7e>
            PosLimitActive(!input->State());
    59f2:	682b      	ldr	r3, [r5, #0]
    59f4:	4628      	mov	r0, r5
    59f6:	691b      	ldr	r3, [r3, #16]
    59f8:	4798      	blx	r3
    59fa:	e617      	b.n	562c <_ZN9ClearCore11MotorDriver7RefreshEv+0x14c>
            NegLimitActive(!input->State());
    59fc:	682b      	ldr	r3, [r5, #0]
    59fe:	4628      	mov	r0, r5
    5a00:	691b      	ldr	r3, [r3, #16]
    5a02:	4798      	blx	r3
    5a04:	e62c      	b.n	5660 <_ZN9ClearCore11MotorDriver7RefreshEv+0x180>
            m_isEnabled = true;
    5a06:	2201      	movs	r2, #1
            m_isEnabling = false;
    5a08:	2300      	movs	r3, #0
    statusRegPending.bit.Enabled = m_isEnabled;
    5a0a:	f045 0520 	orr.w	r5, r5, #32
            m_isEnabled = true;
    5a0e:	f884 212e 	strb.w	r2, [r4, #302]	; 0x12e
            m_isEnabling = false;
    5a12:	f884 312d 	strb.w	r3, [r4, #301]	; 0x12d
    5a16:	e748      	b.n	58aa <_ZN9ClearCore11MotorDriver7RefreshEv+0x3ca>
            eStop = !(input->State());
    5a18:	683b      	ldr	r3, [r7, #0]
    5a1a:	4638      	mov	r0, r7
    5a1c:	691b      	ldr	r3, [r3, #16]
    5a1e:	4798      	blx	r3
    5a20:	fab0 f780 	clz	r7, r0
    5a24:	097f      	lsrs	r7, r7, #5
    5a26:	e63d      	b.n	56a4 <_ZN9ClearCore11MotorDriver7RefreshEv+0x1c4>
            MotorInBState(CcioMgr.PinState(m_inputBConnector));
    5a28:	4b41      	ldr	r3, [pc, #260]	; (5b30 <_ZN9ClearCore11MotorDriver7RefreshEv+0x650>)
    5a2a:	f9b4 10d4 	ldrsh.w	r1, [r4, #212]	; 0xd4
    5a2e:	6818      	ldr	r0, [r3, #0]
    5a30:	f009 fd18 	bl	f464 <_ZN9ClearCore16CcioBoardManager8PinStateE13ClearCorePins>
    switch (m_mode) {
    5a34:	79a3      	ldrb	r3, [r4, #6]
    5a36:	2b09      	cmp	r3, #9
    5a38:	f43f adc3 	beq.w	55c2 <_ZN9ClearCore11MotorDriver7RefreshEv+0xe2>
    5a3c:	e5d0      	b.n	55e0 <_ZN9ClearCore11MotorDriver7RefreshEv+0x100>
                else if (intFlagReg & TC_INTFLAG_MC1) {
    5a3e:	06ad      	lsls	r5, r5, #26
    5a40:	f57f ae62 	bpl.w	5708 <_ZN9ClearCore11MotorDriver7RefreshEv+0x228>
                    m_hlfbWidth[0] = m_hlfbWidth[CPM_HLFB_CAP_HISTORY - 1];
    5a44:	f8b4 10dc 	ldrh.w	r1, [r4, #220]	; 0xdc
                    m_hlfbPeriod[0] = m_hlfbPeriod[CPM_HLFB_CAP_HISTORY - 1];
    5a48:	f8b4 20e0 	ldrh.w	r2, [r4, #224]	; 0xe0
                    m_hlfbWidth[0] = m_hlfbWidth[CPM_HLFB_CAP_HISTORY - 1];
    5a4c:	f8a4 10da 	strh.w	r1, [r4, #218]	; 0xda
                    m_hlfbPeriod[0] = m_hlfbPeriod[CPM_HLFB_CAP_HISTORY - 1];
    5a50:	f8a4 20de 	strh.w	r2, [r4, #222]	; 0xde
                    m_hlfbWidth[CPM_HLFB_CAP_HISTORY - 1] = tcCount->CC[1].reg;
    5a54:	8bf8      	ldrh	r0, [r7, #30]
    5a56:	f8a4 00dc 	strh.w	r0, [r4, #220]	; 0xdc
                    if (m_hlfbPwmReadingPending) {
    5a5a:	f894 00f6 	ldrb.w	r0, [r4, #246]	; 0xf6
                    m_hlfbPeriod[CPM_HLFB_CAP_HISTORY - 1] = tcCount->CC[0].reg;
    5a5e:	8bbd      	ldrh	r5, [r7, #28]
    5a60:	f8a4 50e0 	strh.w	r5, [r4, #224]	; 0xe0
                    if (m_hlfbPwmReadingPending) {
    5a64:	b9d0      	cbnz	r0, 5a9c <_ZN9ClearCore11MotorDriver7RefreshEv+0x5bc>
    5a66:	f894 312f 	ldrb.w	r3, [r4, #303]	; 0x12f
                    m_hlfbPwmReadingPending = true;
    5a6a:	2201      	movs	r2, #1
    5a6c:	f884 20f6 	strb.w	r2, [r4, #246]	; 0xf6
    5a70:	e64c      	b.n	570c <_ZN9ClearCore11MotorDriver7RefreshEv+0x22c>
        MoveStopDecel();
    5a72:	f104 0030 	add.w	r0, r4, #48	; 0x30
    5a76:	f006 f86f 	bl	bb58 <_ZN9ClearCore13StepGenerator13MoveStopDecelEm>
        m_motionCancellingEStop = true;
    5a7a:	2301      	movs	r3, #1
    5a7c:	f884 313c 	strb.w	r3, [r4, #316]	; 0x13c
        alertRegPending.bit.MotionCanceledSensorEStop = 1;
    5a80:	f046 0608 	orr.w	r6, r6, #8
    5a84:	f894 303c 	ldrb.w	r3, [r4, #60]	; 0x3c
    5a88:	e613      	b.n	56b2 <_ZN9ClearCore11MotorDriver7RefreshEv+0x1d2>
                else if (m_hlfbStateChangeCounter && m_hlfbStateChangeCounter--) {
    5a8a:	f8b4 20f8 	ldrh.w	r2, [r4, #248]	; 0xf8
    5a8e:	2a00      	cmp	r2, #0
    5a90:	f43f ad49 	beq.w	5526 <_ZN9ClearCore11MotorDriver7RefreshEv+0x46>
    5a94:	3a01      	subs	r2, #1
    5a96:	f8a4 20f8 	strh.w	r2, [r4, #248]	; 0xf8
    5a9a:	e549      	b.n	5530 <_ZN9ClearCore11MotorDriver7RefreshEv+0x50>
                        float dutyCycle = static_cast<float>(m_hlfbWidth[0]) /
    5a9c:	ee07 1a90 	vmov	s15, r1
    5aa0:	eeb8 7a67 	vcvt.f32.u32	s14, s15
                                          static_cast<float>(m_hlfbPeriod[0]);
    5aa4:	ee07 2a90 	vmov	s15, r2
    5aa8:	eef8 7a67 	vcvt.f32.u32	s15, s15
                        m_hlfbCarrierLost = false;
    5aac:	f884 312f 	strb.w	r3, [r4, #303]	; 0x12f
                        m_hlfbDuty = (dutyCycle - 0.05) * (10000. / 90.);
    5ab0:	eec7 6a27 	vdiv.f32	s13, s14, s15
    5ab4:	ee16 0a90 	vmov	r0, s13
    5ab8:	f015 ff94 	bl	1b9e4 <__aeabi_f2d>
    5abc:	a318      	add	r3, pc, #96	; (adr r3, 5b20 <_ZN9ClearCore11MotorDriver7RefreshEv+0x640>)
    5abe:	e9d3 2300 	ldrd	r2, r3, [r3]
    5ac2:	f015 fe2f 	bl	1b724 <__aeabi_dsub>
    5ac6:	a318      	add	r3, pc, #96	; (adr r3, 5b28 <_ZN9ClearCore11MotorDriver7RefreshEv+0x648>)
    5ac8:	e9d3 2300 	ldrd	r2, r3, [r3]
    5acc:	f015 ffde 	bl	1ba8c <__aeabi_dmul>
    5ad0:	f016 fabe 	bl	1c050 <__aeabi_d2f>
    5ad4:	ee07 0a90 	vmov	s15, r0
                        if (invert) {
    5ad8:	b11e      	cbz	r6, 5ae2 <_ZN9ClearCore11MotorDriver7RefreshEv+0x602>
                            m_hlfbDuty = 100 - m_hlfbDuty;
    5ada:	ed9f 7a16 	vldr	s14, [pc, #88]	; 5b34 <_ZN9ClearCore11MotorDriver7RefreshEv+0x654>
    5ade:	ee77 7a67 	vsub.f32	s15, s14, s15
                        if (m_hlfbMode == HLFB_MODE_HAS_BIPOLAR_PWM) {
    5ae2:	f894 30d8 	ldrb.w	r3, [r4, #216]	; 0xd8
                            m_hlfbDuty = 100 - m_hlfbDuty;
    5ae6:	edc4 7a3c 	vstr	s15, [r4, #240]	; 0xf0
                        if (m_hlfbMode == HLFB_MODE_HAS_BIPOLAR_PWM) {
    5aea:	2b02      	cmp	r3, #2
    5aec:	d004      	beq.n	5af8 <_ZN9ClearCore11MotorDriver7RefreshEv+0x618>
                        m_hlfbState = HLFB_HAS_MEASUREMENT;
    5aee:	2302      	movs	r3, #2
    5af0:	f884 30f4 	strb.w	r3, [r4, #244]	; 0xf4
    5af4:	2300      	movs	r3, #0
    5af6:	e7b8      	b.n	5a6a <_ZN9ClearCore11MotorDriver7RefreshEv+0x58a>
                            m_hlfbDuty = 2.0 * (m_hlfbDuty - 50.);
    5af8:	ee17 0a90 	vmov	r0, s15
    5afc:	f015 ff72 	bl	1b9e4 <__aeabi_f2d>
    5b00:	2200      	movs	r2, #0
    5b02:	4b0d      	ldr	r3, [pc, #52]	; (5b38 <_ZN9ClearCore11MotorDriver7RefreshEv+0x658>)
    5b04:	f015 fe0e 	bl	1b724 <__aeabi_dsub>
    5b08:	4602      	mov	r2, r0
    5b0a:	460b      	mov	r3, r1
    5b0c:	f015 fe0c 	bl	1b728 <__adddf3>
    5b10:	f016 fa9e 	bl	1c050 <__aeabi_d2f>
    5b14:	f8c4 00f0 	str.w	r0, [r4, #240]	; 0xf0
    5b18:	e7e9      	b.n	5aee <_ZN9ClearCore11MotorDriver7RefreshEv+0x60e>
    5b1a:	bf00      	nop
    5b1c:	f3af 8000 	nop.w
    5b20:	9999999a 	.word	0x9999999a
    5b24:	3fa99999 	.word	0x3fa99999
    5b28:	71c71c72 	.word	0x71c71c72
    5b2c:	405bc71c 	.word	0x405bc71c
    5b30:	20001efc 	.word	0x20001efc
    5b34:	42c80000 	.word	0x42c80000
    5b38:	40490000 	.word	0x40490000

00005b3c <_ZN9ClearCore11MotorDriver4MoveElNS_13StepGenerator10MoveTargetE>:
bool MotorDriver::Move(int32_t dist, MoveTarget moveTarget) {
    5b3c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    5b40:	4604      	mov	r4, r0
    5b42:	460f      	mov	r7, r1
    if (moveTarget == MOVE_TARGET_ABSOLUTE) {
    5b44:	4690      	mov	r8, r2
    5b46:	2a00      	cmp	r2, #0
    5b48:	d154      	bne.n	5bf4 <_ZN9ClearCore11MotorDriver4MoveElNS_13StepGenerator10MoveTargetE+0xb8>
        negDir = dist - m_posnAbsolute < 0;
    5b4a:	6c45      	ldr	r5, [r0, #68]	; 0x44
    5b4c:	1b4d      	subs	r5, r1, r5
    5b4e:	0fed      	lsrs	r5, r5, #31
    if (m_alertRegMotor.reg) {
    5b50:	f8d4 3128 	ldr.w	r3, [r4, #296]	; 0x128
    5b54:	2b00      	cmp	r3, #0
    5b56:	d04b      	beq.n	5bf0 <_ZN9ClearCore11MotorDriver4MoveElNS_13StepGenerator10MoveTargetE+0xb4>
        m_alertRegMotor.bit.MotionCanceledInAlert = 1;
    5b58:	f894 3128 	ldrb.w	r3, [r4, #296]	; 0x128
    5b5c:	f043 0301 	orr.w	r3, r3, #1
    5b60:	f884 3128 	strb.w	r3, [r4, #296]	; 0x128
        valid = false;
    5b64:	2600      	movs	r6, #0
    5b66:	f894 3100 	ldrb.w	r3, [r4, #256]	; 0x100
    if (!EnableRequest()) {
    5b6a:	b933      	cbnz	r3, 5b7a <_ZN9ClearCore11MotorDriver4MoveElNS_13StepGenerator10MoveTargetE+0x3e>
        m_alertRegMotor.bit.MotionCanceledMotorDisabled = 1;
    5b6c:	f894 2128 	ldrb.w	r2, [r4, #296]	; 0x128
    5b70:	f042 0210 	orr.w	r2, r2, #16
        valid = false;
    5b74:	461e      	mov	r6, r3
        m_alertRegMotor.bit.MotionCanceledMotorDisabled = 1;
    5b76:	f884 2128 	strb.w	r2, [r4, #296]	; 0x128
    if (m_eStopConnector != CLEARCORE_PIN_INVALID) {
    5b7a:	f9b4 113a 	ldrsh.w	r1, [r4, #314]	; 0x13a
    5b7e:	1c48      	adds	r0, r1, #1
    5b80:	d016      	beq.n	5bb0 <_ZN9ClearCore11MotorDriver4MoveElNS_13StepGenerator10MoveTargetE+0x74>
        Connector *input = SysMgr.ConnectorByIndex(m_eStopConnector);
    5b82:	4829      	ldr	r0, [pc, #164]	; (5c28 <_ZN9ClearCore11MotorDriver4MoveElNS_13StepGenerator10MoveTargetE+0xec>)
    5b84:	f003 fad2 	bl	912c <_ZN9ClearCore10SysManager16ConnectorByIndexE13ClearCorePins>
        if (input->Type() == ClearCore::Connector::CCIO_DIGITAL_IN_OUT_TYPE) {
    5b88:	6803      	ldr	r3, [r0, #0]
    5b8a:	689b      	ldr	r3, [r3, #8]
        Connector *input = SysMgr.ConnectorByIndex(m_eStopConnector);
    5b8c:	4681      	mov	r9, r0
        if (input->Type() == ClearCore::Connector::CCIO_DIGITAL_IN_OUT_TYPE) {
    5b8e:	4798      	blx	r3
    5b90:	2809      	cmp	r0, #9
    5b92:	d040      	beq.n	5c16 <_ZN9ClearCore11MotorDriver4MoveElNS_13StepGenerator10MoveTargetE+0xda>
            eStop = !(inputB->DigitalIn::State());
    5b94:	4648      	mov	r0, r9
    5b96:	f7fe fe01 	bl	479c <_ZN9ClearCore9DigitalIn5StateEv>
    5b9a:	fab0 f080 	clz	r0, r0
    5b9e:	0940      	lsrs	r0, r0, #5
    if (CheckEStopSensor()) {
    5ba0:	b130      	cbz	r0, 5bb0 <_ZN9ClearCore11MotorDriver4MoveElNS_13StepGenerator10MoveTargetE+0x74>
        m_alertRegMotor.bit.MotionCanceledSensorEStop = 1;
    5ba2:	f894 3128 	ldrb.w	r3, [r4, #296]	; 0x128
    5ba6:	f043 0308 	orr.w	r3, r3, #8
    5baa:	f884 3128 	strb.w	r3, [r4, #296]	; 0x128
        valid = false;
    5bae:	2600      	movs	r6, #0
    if (negDirection && m_limitInfo.InNegHWLimit) {
    5bb0:	f894 3040 	ldrb.w	r3, [r4, #64]	; 0x40
    5bb4:	b16d      	cbz	r5, 5bd2 <_ZN9ClearCore11MotorDriver4MoveElNS_13StepGenerator10MoveTargetE+0x96>
    5bb6:	06d9      	lsls	r1, r3, #27
    5bb8:	d426      	bmi.n	5c08 <_ZN9ClearCore11MotorDriver4MoveElNS_13StepGenerator10MoveTargetE+0xcc>
    if (!ValidateMove(negDir)) {
    5bba:	b196      	cbz	r6, 5be2 <_ZN9ClearCore11MotorDriver4MoveElNS_13StepGenerator10MoveTargetE+0xa6>
    m_lastMoveWasPositional = true;
    5bbc:	2301      	movs	r3, #1
    return StepGenerator::Move(dist, moveTarget);
    5bbe:	4642      	mov	r2, r8
    5bc0:	4639      	mov	r1, r7
    m_lastMoveWasPositional = true;
    5bc2:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
    return StepGenerator::Move(dist, moveTarget);
    5bc6:	f104 0030 	add.w	r0, r4, #48	; 0x30
}
    5bca:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    return StepGenerator::Move(dist, moveTarget);
    5bce:	f005 bc7b 	b.w	b4c8 <_ZN9ClearCore13StepGenerator4MoveElNS0_10MoveTargetE>
    else if (!negDirection && m_limitInfo.InPosHWLimit) {
    5bd2:	071a      	lsls	r2, r3, #28
    5bd4:	d5f1      	bpl.n	5bba <_ZN9ClearCore11MotorDriver4MoveElNS_13StepGenerator10MoveTargetE+0x7e>
        m_alertRegMotor.bit.MotionCanceledPositiveLimit = 1;
    5bd6:	f894 3128 	ldrb.w	r3, [r4, #296]	; 0x128
    5bda:	f043 0302 	orr.w	r3, r3, #2
    5bde:	f884 3128 	strb.w	r3, [r4, #296]	; 0x128
        if (m_statusRegMotor.bit.StepsActive ) {
    5be2:	f894 3118 	ldrb.w	r3, [r4, #280]	; 0x118
    5be6:	079b      	lsls	r3, r3, #30
    5be8:	d406      	bmi.n	5bf8 <_ZN9ClearCore11MotorDriver4MoveElNS_13StepGenerator10MoveTargetE+0xbc>
}
    5bea:	2000      	movs	r0, #0
    5bec:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    bool valid = true;
    5bf0:	2601      	movs	r6, #1
    5bf2:	e7b8      	b.n	5b66 <_ZN9ClearCore11MotorDriver4MoveElNS_13StepGenerator10MoveTargetE+0x2a>
        negDir = dist < 0;
    5bf4:	0fcd      	lsrs	r5, r1, #31
    5bf6:	e7ab      	b.n	5b50 <_ZN9ClearCore11MotorDriver4MoveElNS_13StepGenerator10MoveTargetE+0x14>
            MoveStopDecel();
    5bf8:	f104 0030 	add.w	r0, r4, #48	; 0x30
    5bfc:	2100      	movs	r1, #0
    5bfe:	f005 ffab 	bl	bb58 <_ZN9ClearCore13StepGenerator13MoveStopDecelEm>
}
    5c02:	2000      	movs	r0, #0
    5c04:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
        m_alertRegMotor.bit.MotionCanceledNegativeLimit = 1;
    5c08:	f894 3128 	ldrb.w	r3, [r4, #296]	; 0x128
    5c0c:	f043 0304 	orr.w	r3, r3, #4
    5c10:	f884 3128 	strb.w	r3, [r4, #296]	; 0x128
    5c14:	e7e5      	b.n	5be2 <_ZN9ClearCore11MotorDriver4MoveElNS_13StepGenerator10MoveTargetE+0xa6>
            eStop = !(input->State());
    5c16:	f8d9 3000 	ldr.w	r3, [r9]
    5c1a:	4648      	mov	r0, r9
    5c1c:	691b      	ldr	r3, [r3, #16]
    5c1e:	4798      	blx	r3
    5c20:	fab0 f080 	clz	r0, r0
    5c24:	0940      	lsrs	r0, r0, #5
    5c26:	e7bb      	b.n	5ba0 <_ZN9ClearCore11MotorDriver4MoveElNS_13StepGenerator10MoveTargetE+0x64>
    5c28:	200019d4 	.word	0x200019d4

00005c2c <_ZThn48_N9ClearCore11MotorDriver4MoveElNS_13StepGenerator10MoveTargetE>:
    virtual bool Move(int32_t dist,
    5c2c:	f1a0 0030 	sub.w	r0, r0, #48	; 0x30
    5c30:	f7ff bf84 	b.w	5b3c <_ZN9ClearCore11MotorDriver4MoveElNS_13StepGenerator10MoveTargetE>

00005c34 <_ZN9ClearCore11MotorDriver12MoveVelocityEl>:
bool MotorDriver::MoveVelocity(int32_t velocity) {
    5c34:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    if (m_alertRegMotor.reg) {
    5c36:	f8d0 3128 	ldr.w	r3, [r0, #296]	; 0x128
bool MotorDriver::MoveVelocity(int32_t velocity) {
    5c3a:	4604      	mov	r4, r0
    5c3c:	460e      	mov	r6, r1
    if (m_alertRegMotor.reg) {
    5c3e:	2b00      	cmp	r3, #0
    5c40:	d04a      	beq.n	5cd8 <_ZN9ClearCore11MotorDriver12MoveVelocityEl+0xa4>
        m_alertRegMotor.bit.MotionCanceledInAlert = 1;
    5c42:	f890 3128 	ldrb.w	r3, [r0, #296]	; 0x128
    5c46:	f043 0301 	orr.w	r3, r3, #1
    5c4a:	f880 3128 	strb.w	r3, [r0, #296]	; 0x128
        valid = false;
    5c4e:	2500      	movs	r5, #0
    5c50:	f894 3100 	ldrb.w	r3, [r4, #256]	; 0x100
    if (!EnableRequest()) {
    5c54:	b933      	cbnz	r3, 5c64 <_ZN9ClearCore11MotorDriver12MoveVelocityEl+0x30>
        m_alertRegMotor.bit.MotionCanceledMotorDisabled = 1;
    5c56:	f894 2128 	ldrb.w	r2, [r4, #296]	; 0x128
    5c5a:	f042 0210 	orr.w	r2, r2, #16
        valid = false;
    5c5e:	461d      	mov	r5, r3
        m_alertRegMotor.bit.MotionCanceledMotorDisabled = 1;
    5c60:	f884 2128 	strb.w	r2, [r4, #296]	; 0x128
    if (m_eStopConnector != CLEARCORE_PIN_INVALID) {
    5c64:	f9b4 113a 	ldrsh.w	r1, [r4, #314]	; 0x13a
    5c68:	1c48      	adds	r0, r1, #1
    5c6a:	d016      	beq.n	5c9a <_ZN9ClearCore11MotorDriver12MoveVelocityEl+0x66>
        Connector *input = SysMgr.ConnectorByIndex(m_eStopConnector);
    5c6c:	4826      	ldr	r0, [pc, #152]	; (5d08 <_ZN9ClearCore11MotorDriver12MoveVelocityEl+0xd4>)
    5c6e:	f003 fa5d 	bl	912c <_ZN9ClearCore10SysManager16ConnectorByIndexE13ClearCorePins>
        if (input->Type() == ClearCore::Connector::CCIO_DIGITAL_IN_OUT_TYPE) {
    5c72:	6803      	ldr	r3, [r0, #0]
    5c74:	689b      	ldr	r3, [r3, #8]
        Connector *input = SysMgr.ConnectorByIndex(m_eStopConnector);
    5c76:	4607      	mov	r7, r0
        if (input->Type() == ClearCore::Connector::CCIO_DIGITAL_IN_OUT_TYPE) {
    5c78:	4798      	blx	r3
    5c7a:	2809      	cmp	r0, #9
    5c7c:	d03c      	beq.n	5cf8 <_ZN9ClearCore11MotorDriver12MoveVelocityEl+0xc4>
            eStop = !(inputB->DigitalIn::State());
    5c7e:	4638      	mov	r0, r7
    5c80:	f7fe fd8c 	bl	479c <_ZN9ClearCore9DigitalIn5StateEv>
    5c84:	fab0 f080 	clz	r0, r0
    5c88:	0940      	lsrs	r0, r0, #5
    if (CheckEStopSensor()) {
    5c8a:	b130      	cbz	r0, 5c9a <_ZN9ClearCore11MotorDriver12MoveVelocityEl+0x66>
        m_alertRegMotor.bit.MotionCanceledSensorEStop = 1;
    5c8c:	f894 3128 	ldrb.w	r3, [r4, #296]	; 0x128
    5c90:	f043 0308 	orr.w	r3, r3, #8
    5c94:	f884 3128 	strb.w	r3, [r4, #296]	; 0x128
        valid = false;
    5c98:	2500      	movs	r5, #0
    if (negDirection && m_limitInfo.InNegHWLimit) {
    5c9a:	2e00      	cmp	r6, #0
    5c9c:	f894 3040 	ldrb.w	r3, [r4, #64]	; 0x40
    5ca0:	da0c      	bge.n	5cbc <_ZN9ClearCore11MotorDriver12MoveVelocityEl+0x88>
    5ca2:	06d9      	lsls	r1, r3, #27
    5ca4:	d421      	bmi.n	5cea <_ZN9ClearCore11MotorDriver12MoveVelocityEl+0xb6>
    if (!ValidateMove(velocity < 0)) {
    5ca6:	b18d      	cbz	r5, 5ccc <_ZN9ClearCore11MotorDriver12MoveVelocityEl+0x98>
    m_lastMoveWasPositional = false;
    5ca8:	2300      	movs	r3, #0
    return StepGenerator::MoveVelocity(velocity);
    5caa:	4631      	mov	r1, r6
    m_lastMoveWasPositional = false;
    5cac:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
    return StepGenerator::MoveVelocity(velocity);
    5cb0:	f104 0030 	add.w	r0, r4, #48	; 0x30
}
    5cb4:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    return StepGenerator::MoveVelocity(velocity);
    5cb8:	f005 bc40 	b.w	b53c <_ZN9ClearCore13StepGenerator12MoveVelocityEl>
    else if (!negDirection && m_limitInfo.InPosHWLimit) {
    5cbc:	071a      	lsls	r2, r3, #28
    5cbe:	d5f2      	bpl.n	5ca6 <_ZN9ClearCore11MotorDriver12MoveVelocityEl+0x72>
        m_alertRegMotor.bit.MotionCanceledPositiveLimit = 1;
    5cc0:	f894 3128 	ldrb.w	r3, [r4, #296]	; 0x128
    5cc4:	f043 0302 	orr.w	r3, r3, #2
    5cc8:	f884 3128 	strb.w	r3, [r4, #296]	; 0x128
        if (m_statusRegMotor.bit.StepsActive ) {
    5ccc:	f894 3118 	ldrb.w	r3, [r4, #280]	; 0x118
    5cd0:	079b      	lsls	r3, r3, #30
    5cd2:	d403      	bmi.n	5cdc <_ZN9ClearCore11MotorDriver12MoveVelocityEl+0xa8>
}
    5cd4:	2000      	movs	r0, #0
    5cd6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    bool valid = true;
    5cd8:	2501      	movs	r5, #1
    5cda:	e7b9      	b.n	5c50 <_ZN9ClearCore11MotorDriver12MoveVelocityEl+0x1c>
            MoveStopDecel();
    5cdc:	f104 0030 	add.w	r0, r4, #48	; 0x30
    5ce0:	2100      	movs	r1, #0
    5ce2:	f005 ff39 	bl	bb58 <_ZN9ClearCore13StepGenerator13MoveStopDecelEm>
}
    5ce6:	2000      	movs	r0, #0
    5ce8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        m_alertRegMotor.bit.MotionCanceledNegativeLimit = 1;
    5cea:	f894 3128 	ldrb.w	r3, [r4, #296]	; 0x128
    5cee:	f043 0304 	orr.w	r3, r3, #4
    5cf2:	f884 3128 	strb.w	r3, [r4, #296]	; 0x128
    5cf6:	e7e9      	b.n	5ccc <_ZN9ClearCore11MotorDriver12MoveVelocityEl+0x98>
            eStop = !(input->State());
    5cf8:	683b      	ldr	r3, [r7, #0]
    5cfa:	4638      	mov	r0, r7
    5cfc:	691b      	ldr	r3, [r3, #16]
    5cfe:	4798      	blx	r3
    5d00:	fab0 f080 	clz	r0, r0
    5d04:	0940      	lsrs	r0, r0, #5
    5d06:	e7c0      	b.n	5c8a <_ZN9ClearCore11MotorDriver12MoveVelocityEl+0x56>
    5d08:	200019d4 	.word	0x200019d4

00005d0c <_ZThn48_N9ClearCore11MotorDriver12MoveVelocityEl>:
    virtual bool MoveVelocity(int32_t velocity) override;
    5d0c:	f1a0 0030 	sub.w	r0, r0, #48	; 0x30
    5d10:	f7ff bf90 	b.w	5c34 <_ZN9ClearCore11MotorDriver12MoveVelocityEl>

00005d14 <_ZN9ClearCore11MotorDriver10InitializeE13ClearCorePins>:
void MotorDriver::Initialize(ClearCorePins clearCorePin) {
    5d14:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    DATA_OUTPUT_STATE(m_aInfo->gpioPort, m_aDataMask, true);
    5d16:	f8d0 30a4 	ldr.w	r3, [r0, #164]	; 0xa4
    5d1a:	4dbc      	ldr	r5, [pc, #752]	; (600c <_ZN9ClearCore11MotorDriver10InitializeE13ClearCorePins+0x2f8>)
    5d1c:	f993 3001 	ldrsb.w	r3, [r3, #1]
    5d20:	f8d0 20b0 	ldr.w	r2, [r0, #176]	; 0xb0
    5d24:	eb05 13c3 	add.w	r3, r5, r3, lsl #7
void MotorDriver::Initialize(ClearCorePins clearCorePin) {
    5d28:	4604      	mov	r4, r0
    DATA_OUTPUT_STATE(m_aInfo->gpioPort, m_aDataMask, true);
    5d2a:	619a      	str	r2, [r3, #24]
    DATA_OUTPUT_STATE(m_bInfo->gpioPort, m_bDataMask, true);
    5d2c:	f8d0 30a8 	ldr.w	r3, [r0, #168]	; 0xa8
    5d30:	f8d0 20b8 	ldr.w	r2, [r0, #184]	; 0xb8
    5d34:	f993 3001 	ldrsb.w	r3, [r3, #1]
    5d38:	eb05 13c3 	add.w	r3, r5, r3, lsl #7
void MotorDriver::Initialize(ClearCorePins clearCorePin) {
    5d3c:	460e      	mov	r6, r1
    DATA_OUTPUT_STATE(m_bInfo->gpioPort, m_bDataMask, true);
    5d3e:	619a      	str	r2, [r3, #24]
    EnableRequest(false);
    5d40:	2100      	movs	r1, #0
    5d42:	f7ff fa49 	bl	51d8 <_ZN9ClearCore11MotorDriver13EnableRequestEb>
    DigitalIn::Initialize(clearCorePin);
    5d46:	4631      	mov	r1, r6
    5d48:	4620      	mov	r0, r4
    5d4a:	f7fe fd3b 	bl	47c4 <_ZN9ClearCore9DigitalIn10InitializeE13ClearCorePins>
    PIN_CONFIGURATION(m_aInfo->gpioPort, m_aInfo->gpioPin,  0);
    5d4e:	f8d4 30a4 	ldr.w	r3, [r4, #164]	; 0xa4
    5d52:	f993 2001 	ldrsb.w	r2, [r3, #1]
    5d56:	7898      	ldrb	r0, [r3, #2]
    5d58:	eb05 12c2 	add.w	r2, r5, r2, lsl #7
    5d5c:	1813      	adds	r3, r2, r0
    5d5e:	2700      	movs	r7, #0
    5d60:	f883 7040 	strb.w	r7, [r3, #64]	; 0x40
    PIN_CONFIGURATION(m_bInfo->gpioPort, m_bInfo->gpioPin,  0);
    5d64:	f8d4 10a8 	ldr.w	r1, [r4, #168]	; 0xa8
    5d68:	f991 3001 	ldrsb.w	r3, [r1, #1]
    5d6c:	788e      	ldrb	r6, [r1, #2]
    5d6e:	01db      	lsls	r3, r3, #7
    5d70:	18e9      	adds	r1, r5, r3
    5d72:	198d      	adds	r5, r1, r6
    PMUX_SELECTION(m_bInfo->gpioPort, m_bInfo->gpioPin, PER_TIMER_ALT);
    5d74:	f103 4382 	add.w	r3, r3, #1090519040	; 0x41000000
    PIN_CONFIGURATION(m_bInfo->gpioPort, m_bInfo->gpioPin,  0);
    5d78:	f885 7040 	strb.w	r7, [r5, #64]	; 0x40
    DATA_DIRECTION_OUTPUT(m_aInfo->gpioPort, m_aDataMask);
    5d7c:	f8d4 50b0 	ldr.w	r5, [r4, #176]	; 0xb0
    5d80:	6095      	str	r5, [r2, #8]
    DATA_DIRECTION_OUTPUT(m_bInfo->gpioPort, m_bDataMask);
    5d82:	f8d4 50b8 	ldr.w	r5, [r4, #184]	; 0xb8
    5d86:	608d      	str	r5, [r1, #8]
    PMUX_SELECTION(m_aInfo->gpioPort, m_aInfo->gpioPin, PER_TIMER_ALT);
    5d88:	eb02 0250 	add.w	r2, r2, r0, lsr #1
    5d8c:	f010 0f01 	tst.w	r0, #1
    5d90:	f892 1030 	ldrb.w	r1, [r2, #48]	; 0x30
    5d94:	f04f 0005 	mov.w	r0, #5
    PMUX_SELECTION(m_bInfo->gpioPort, m_bInfo->gpioPin, PER_TIMER_ALT);
    5d98:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
    PMUX_SELECTION(m_aInfo->gpioPort, m_aInfo->gpioPin, PER_TIMER_ALT);
    5d9c:	bf14      	ite	ne
    5d9e:	f360 1107 	bfine	r1, r0, #4, #4
    5da2:	f360 0103 	bfieq	r1, r0, #0, #4
    PMUX_SELECTION(m_bInfo->gpioPort, m_bInfo->gpioPin, PER_TIMER_ALT);
    5da6:	eb03 0356 	add.w	r3, r3, r6, lsr #1
    PMUX_SELECTION(m_aInfo->gpioPort, m_aInfo->gpioPin, PER_TIMER_ALT);
    5daa:	f882 1030 	strb.w	r1, [r2, #48]	; 0x30
    PMUX_SELECTION(m_bInfo->gpioPort, m_bInfo->gpioPin, PER_TIMER_ALT);
    5dae:	f893 2030 	ldrb.w	r2, [r3, #48]	; 0x30
    5db2:	07f0      	lsls	r0, r6, #31
    5db4:	f04f 0105 	mov.w	r1, #5
    5db8:	bf4c      	ite	mi
    5dba:	f361 1207 	bfimi	r2, r1, #4, #4
    5dbe:	f361 0203 	bfipl	r2, r1, #0, #4
    5dc2:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
    Mode(CPM_MODE_A_DIRECT_B_DIRECT);
    5dc6:	6823      	ldr	r3, [r4, #0]
    5dc8:	4a91      	ldr	r2, [pc, #580]	; (6010 <_ZN9ClearCore11MotorDriver10InitializeE13ClearCorePins+0x2fc>)
    5dca:	685b      	ldr	r3, [r3, #4]
    5dcc:	4293      	cmp	r3, r2
    5dce:	f040 8119 	bne.w	6004 <_ZN9ClearCore11MotorDriver10InitializeE13ClearCorePins+0x2f0>
    if (newMode == m_mode) {
    5dd2:	79a3      	ldrb	r3, [r4, #6]
    5dd4:	2b09      	cmp	r3, #9
    5dd6:	d022      	beq.n	5e1e <_ZN9ClearCore11MotorDriver10InitializeE13ClearCorePins+0x10a>
            MoveStopAbrupt();
    5dd8:	f104 0030 	add.w	r0, r4, #48	; 0x30
    5ddc:	f005 fea0 	bl	bb20 <_ZN9ClearCore13StepGenerator14MoveStopAbruptEv>
            PMUX_DISABLE(m_aInfo->gpioPort, m_aInfo->gpioPin);
    5de0:	f8d4 10a4 	ldr.w	r1, [r4, #164]	; 0xa4
    5de4:	4b89      	ldr	r3, [pc, #548]	; (600c <_ZN9ClearCore11MotorDriver10InitializeE13ClearCorePins+0x2f8>)
    5de6:	f991 2001 	ldrsb.w	r2, [r1, #1]
    5dea:	7889      	ldrb	r1, [r1, #2]
    5dec:	eb03 12c2 	add.w	r2, r3, r2, lsl #7
    5df0:	440a      	add	r2, r1
            m_mode = CPM_MODE_A_DIRECT_B_DIRECT;
    5df2:	2009      	movs	r0, #9
            PMUX_DISABLE(m_aInfo->gpioPort, m_aInfo->gpioPin);
    5df4:	f892 1040 	ldrb.w	r1, [r2, #64]	; 0x40
    5df8:	f36f 0100 	bfc	r1, #0, #1
    5dfc:	f882 1040 	strb.w	r1, [r2, #64]	; 0x40
            PMUX_DISABLE(m_bInfo->gpioPort, m_bInfo->gpioPin);
    5e00:	f8d4 20a8 	ldr.w	r2, [r4, #168]	; 0xa8
    5e04:	f992 1001 	ldrsb.w	r1, [r2, #1]
    5e08:	7892      	ldrb	r2, [r2, #2]
    5e0a:	eb03 13c1 	add.w	r3, r3, r1, lsl #7
    5e0e:	4413      	add	r3, r2
    5e10:	f893 2040 	ldrb.w	r2, [r3, #64]	; 0x40
    5e14:	f36f 0200 	bfc	r2, #0, #1
    5e18:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
            m_mode = CPM_MODE_A_DIRECT_B_DIRECT;
    5e1c:	71a0      	strb	r0, [r4, #6]
    PMUX_SELECTION(m_inputPort, m_inputDataBit, PER_EXTINT);
    5e1e:	68e3      	ldr	r3, [r4, #12]
    5e20:	6922      	ldr	r2, [r4, #16]
    5e22:	01db      	lsls	r3, r3, #7
    5e24:	f103 4182 	add.w	r1, r3, #1090519040	; 0x41000000
    5e28:	f501 4100 	add.w	r1, r1, #32768	; 0x8000
    5e2c:	eb01 0152 	add.w	r1, r1, r2, lsr #1
    PMUX_ENABLE(m_inputPort, m_inputDataBit);
    5e30:	f103 4382 	add.w	r3, r3, #1090519040	; 0x41000000
    PMUX_SELECTION(m_inputPort, m_inputDataBit, PER_EXTINT);
    5e34:	f891 0030 	ldrb.w	r0, [r1, #48]	; 0x30
    5e38:	f012 0501 	ands.w	r5, r2, #1
    PMUX_ENABLE(m_inputPort, m_inputDataBit);
    5e3c:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
    5e40:	4413      	add	r3, r2
    PMUX_SELECTION(m_inputPort, m_inputDataBit, PER_EXTINT);
    5e42:	bf14      	ite	ne
    5e44:	f36f 1007 	bfcne	r0, #4, #4
    5e48:	f365 0003 	bfieq	r0, r5, #0, #4
    5e4c:	f881 0030 	strb.w	r0, [r1, #48]	; 0x30
    PMUX_ENABLE(m_inputPort, m_inputDataBit);
    5e50:	f893 2040 	ldrb.w	r2, [r3, #64]	; 0x40
    TcCount16 *tcCount = &tc_modules[m_hlfbTcNum]->COUNT16;
    5e54:	496f      	ldr	r1, [pc, #444]	; (6014 <_ZN9ClearCore11MotorDriver10InitializeE13ClearCorePins+0x300>)
    PMUX_ENABLE(m_inputPort, m_inputDataBit);
    5e56:	f042 0201 	orr.w	r2, r2, #1
    5e5a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    TcCount16 *tcCount = &tc_modules[m_hlfbTcNum]->COUNT16;
    5e5e:	f894 00d6 	ldrb.w	r0, [r4, #214]	; 0xd6
    5e62:	f851 3020 	ldr.w	r3, [r1, r0, lsl #2]
    tcCount->CTRLA.bit.ENABLE = 0;
    5e66:	681a      	ldr	r2, [r3, #0]
    5e68:	f36f 0241 	bfc	r2, #1, #1
    5e6c:	601a      	str	r2, [r3, #0]
    SYNCBUSY_WAIT(tcCount, TC_SYNCBUSY_ENABLE);
    5e6e:	691a      	ldr	r2, [r3, #16]
    5e70:	0792      	lsls	r2, r2, #30
    5e72:	d4fc      	bmi.n	5e6e <_ZN9ClearCore11MotorDriver10InitializeE13ClearCorePins+0x15a>
    tcCount->CTRLA.bit.SWRST = 1;
    5e74:	681a      	ldr	r2, [r3, #0]
    5e76:	f042 0201 	orr.w	r2, r2, #1
    5e7a:	601a      	str	r2, [r3, #0]
    SYNCBUSY_WAIT(tcCount, TC_SYNCBUSY_SWRST);
    5e7c:	691a      	ldr	r2, [r3, #16]
    5e7e:	f012 0201 	ands.w	r2, r2, #1
    5e82:	d1fb      	bne.n	5e7c <_ZN9ClearCore11MotorDriver10InitializeE13ClearCorePins+0x168>
    tcCount->CTRLA.bit.PRESCSYNC = TC_CTRLA_PRESCSYNC_GCLK_Val;
    5e84:	681d      	ldr	r5, [r3, #0]
    EIC->CTRLA.bit.ENABLE = 0;
    5e86:	4964      	ldr	r1, [pc, #400]	; (6018 <_ZN9ClearCore11MotorDriver10InitializeE13ClearCorePins+0x304>)
    tcCount->CTRLA.bit.PRESCSYNC = TC_CTRLA_PRESCSYNC_GCLK_Val;
    5e88:	f362 1505 	bfi	r5, r2, #4, #2
    5e8c:	601d      	str	r5, [r3, #0]
    tcCount->CTRLA.bit.COPEN0 = 0;
    5e8e:	681d      	ldr	r5, [r3, #0]
    5e90:	f362 5514 	bfi	r5, r2, #20, #1
    5e94:	601d      	str	r5, [r3, #0]
    tcCount->CTRLA.bit.COPEN1 = 0;
    5e96:	681d      	ldr	r5, [r3, #0]
    5e98:	f362 5555 	bfi	r5, r2, #21, #1
    5e9c:	601d      	str	r5, [r3, #0]
    tcCount->CTRLA.bit.CAPTEN0 = 1;
    5e9e:	681d      	ldr	r5, [r3, #0]
    5ea0:	f445 3580 	orr.w	r5, r5, #65536	; 0x10000
    5ea4:	601d      	str	r5, [r3, #0]
    tcCount->CTRLA.bit.CAPTEN1 = 1;
    5ea6:	681d      	ldr	r5, [r3, #0]
    5ea8:	f445 3500 	orr.w	r5, r5, #131072	; 0x20000
    5eac:	601d      	str	r5, [r3, #0]
    tcCount->CTRLA.bit.ALOCK = 0;
    5eae:	681d      	ldr	r5, [r3, #0]
    5eb0:	f362 25cb 	bfi	r5, r2, #11, #1
    5eb4:	601d      	str	r5, [r3, #0]
    tcCount->CTRLA.bit.PRESCALER = TC_CTRLA_PRESCALER_DIV1_Val;
    5eb6:	681d      	ldr	r5, [r3, #0]
    5eb8:	f362 250a 	bfi	r5, r2, #8, #3
    5ebc:	601d      	str	r5, [r3, #0]
    tcCount->CTRLA.bit.ONDEMAND = 1;
    5ebe:	681d      	ldr	r5, [r3, #0]
    5ec0:	f045 0580 	orr.w	r5, r5, #128	; 0x80
    5ec4:	601d      	str	r5, [r3, #0]
    tcCount->CTRLA.bit.RUNSTDBY = 1;
    5ec6:	681d      	ldr	r5, [r3, #0]
    5ec8:	f045 0540 	orr.w	r5, r5, #64	; 0x40
    5ecc:	601d      	str	r5, [r3, #0]
    tcCount->CTRLA.bit.MODE = TC_CTRLA_MODE_COUNT16_Val;
    5ece:	681d      	ldr	r5, [r3, #0]
    5ed0:	f362 0583 	bfi	r5, r2, #2, #2
    5ed4:	601d      	str	r5, [r3, #0]
    tcCount->EVCTRL.bit.EVACT = TC_EVCTRL_EVACT_PPW_Val;
    5ed6:	88dd      	ldrh	r5, [r3, #6]
    5ed8:	2605      	movs	r6, #5
    5eda:	f366 0502 	bfi	r5, r6, #0, #3
    5ede:	80dd      	strh	r5, [r3, #6]
    tcCount->EVCTRL.bit.TCEI = 1;
    5ee0:	88dd      	ldrh	r5, [r3, #6]
    5ee2:	f045 0520 	orr.w	r5, r5, #32
    5ee6:	80dd      	strh	r5, [r3, #6]
    tcCount->EVCTRL.bit.MCEO0 = 0;
    5ee8:	88dd      	ldrh	r5, [r3, #6]
    5eea:	f362 350c 	bfi	r5, r2, #12, #1
    5eee:	80dd      	strh	r5, [r3, #6]
    tcCount->EVCTRL.bit.MCEO1 = 0;
    5ef0:	88dd      	ldrh	r5, [r3, #6]
    5ef2:	f362 354d 	bfi	r5, r2, #13, #1
    5ef6:	80dd      	strh	r5, [r3, #6]
    tcCount->EVCTRL.bit.OVFEO = 0;
    5ef8:	88dd      	ldrh	r5, [r3, #6]
    5efa:	f362 2508 	bfi	r5, r2, #8, #1
    5efe:	80dd      	strh	r5, [r3, #6]
    tcCount->EVCTRL.bit.TCINV = 1;
    5f00:	88dd      	ldrh	r5, [r3, #6]
    5f02:	f045 0510 	orr.w	r5, r5, #16
    5f06:	80dd      	strh	r5, [r3, #6]
    EIC->CTRLA.bit.ENABLE = 0;
    5f08:	780d      	ldrb	r5, [r1, #0]
    5f0a:	f362 0541 	bfi	r5, r2, #1, #1
    5f0e:	700d      	strb	r5, [r1, #0]
    EIC->EVCTRL.reg |= 1 << m_hlfbInfo->extInt;
    5f10:	f8d4 20ac 	ldr.w	r2, [r4, #172]	; 0xac
    5f14:	688e      	ldr	r6, [r1, #8]
    5f16:	78d5      	ldrb	r5, [r2, #3]
    5f18:	2201      	movs	r2, #1
    5f1a:	40aa      	lsls	r2, r5
    5f1c:	4316      	orrs	r6, r2
    5f1e:	608e      	str	r6, [r1, #8]
    5f20:	08ef      	lsrs	r7, r5, #3
    EIC->ASYNCH.reg |= 1 << m_hlfbInfo->extInt;
    5f22:	698e      	ldr	r6, [r1, #24]
    5f24:	00bf      	lsls	r7, r7, #2
    5f26:	f107 4e80 	add.w	lr, r7, #1073741824	; 0x40000000
    5f2a:	4316      	orrs	r6, r2
    5f2c:	f50e 5e20 	add.w	lr, lr, #10240	; 0x2800
    5f30:	618e      	str	r6, [r1, #24]
        (EIC_CONFIG_SENSE0_HIGH_Val << ((m_hlfbInfo->extInt & 7) * 4));
    5f32:	f005 0607 	and.w	r6, r5, #7
    5f36:	f8de c01c 	ldr.w	ip, [lr, #28]
    5f3a:	00b7      	lsls	r7, r6, #2
    5f3c:	2604      	movs	r6, #4
    5f3e:	40be      	lsls	r6, r7
    5f40:	ea46 060c 	orr.w	r6, r6, ip
    EIC->CONFIG[m_hlfbInfo->extInt / 8].reg |=
    5f44:	f8ce 601c 	str.w	r6, [lr, #28]
    EIC->INTENCLR.bit.EXTINT = 1 << m_hlfbInfo->extInt;
    5f48:	68ce      	ldr	r6, [r1, #12]
    5f4a:	b292      	uxth	r2, r2
    5f4c:	f362 060f 	bfi	r6, r2, #0, #16
    5f50:	60ce      	str	r6, [r1, #12]
    EIC->CTRLA.bit.ENABLE = 1;
    5f52:	780a      	ldrb	r2, [r1, #0]
    5f54:	f042 0202 	orr.w	r2, r2, #2
    5f58:	700a      	strb	r2, [r1, #0]
    SYNCBUSY_WAIT(EIC, EIC_SYNCBUSY_ENABLE);
    5f5a:	684a      	ldr	r2, [r1, #4]
    5f5c:	f012 0202 	ands.w	r2, r2, #2
    5f60:	d1fb      	bne.n	5f5a <_ZN9ClearCore11MotorDriver10InitializeE13ClearCorePins+0x246>
    SET_CLOCK_SOURCE(EVSYS_GCLK_ID_0 + m_hlfbEvt, 6);
    5f62:	f894 e0d7 	ldrb.w	lr, [r4, #215]	; 0xd7
    5f66:	492d      	ldr	r1, [pc, #180]	; (601c <_ZN9ClearCore11MotorDriver10InitializeE13ClearCorePins+0x308>)
    5f68:	f10e 072b 	add.w	r7, lr, #43	; 0x2b
    5f6c:	463e      	mov	r6, r7
    5f6e:	f851 c027 	ldr.w	ip, [r1, r7, lsl #2]
    5f72:	f362 1c86 	bfi	ip, r2, #6, #1
    5f76:	f841 c027 	str.w	ip, [r1, r7, lsl #2]
    5f7a:	f851 2026 	ldr.w	r2, [r1, r6, lsl #2]
    5f7e:	0657      	lsls	r7, r2, #25
    5f80:	d4fb      	bmi.n	5f7a <_ZN9ClearCore11MotorDriver10InitializeE13ClearCorePins+0x266>
    5f82:	f851 2026 	ldr.w	r2, [r1, r6, lsl #2]
    5f86:	4f25      	ldr	r7, [pc, #148]	; (601c <_ZN9ClearCore11MotorDriver10InitializeE13ClearCorePins+0x308>)
    5f88:	f04f 0c06 	mov.w	ip, #6
    5f8c:	f36c 0203 	bfi	r2, ip, #0, #4
    5f90:	f841 2026 	str.w	r2, [r1, r6, lsl #2]
    5f94:	f851 2026 	ldr.w	r2, [r1, r6, lsl #2]
    5f98:	f042 0240 	orr.w	r2, r2, #64	; 0x40
    5f9c:	f841 2026 	str.w	r2, [r1, r6, lsl #2]
    5fa0:	687a      	ldr	r2, [r7, #4]
    5fa2:	f012 0f18 	tst.w	r2, #24
    5fa6:	d1fb      	bne.n	5fa0 <_ZN9ClearCore11MotorDriver10InitializeE13ClearCorePins+0x28c>
    EVSYS->USER[EVSYS_ID_USER_TC0_EVU + m_hlfbTcNum].reg = m_hlfbEvt + 1;
    5fa8:	4a1d      	ldr	r2, [pc, #116]	; (6020 <_ZN9ClearCore11MotorDriver10InitializeE13ClearCorePins+0x30c>)
    EvsysChannel *theEvCh = &EVSYS->Channel[m_hlfbEvt];
    5faa:	4e1e      	ldr	r6, [pc, #120]	; (6024 <_ZN9ClearCore11MotorDriver10InitializeE13ClearCorePins+0x310>)
    EVSYS->USER[EVSYS_ID_USER_TC0_EVU + m_hlfbTcNum].reg = m_hlfbEvt + 1;
    5fac:	3074      	adds	r0, #116	; 0x74
    5fae:	f10e 0101 	add.w	r1, lr, #1
    EvsysChannel *theEvCh = &EVSYS->Channel[m_hlfbEvt];
    5fb2:	fa0f fe8e 	sxth.w	lr, lr
    EVSYS->USER[EVSYS_ID_USER_TC0_EVU + m_hlfbTcNum].reg = m_hlfbEvt + 1;
    5fb6:	f842 1020 	str.w	r1, [r2, r0, lsl #2]
    EvsysChannel *theEvCh = &EVSYS->Channel[m_hlfbEvt];
    5fba:	eb06 02ce 	add.w	r2, r6, lr, lsl #3
    theEvCh->CHINTFLAG.bit.EVD = 1;
    5fbe:	7991      	ldrb	r1, [r2, #6]
    5fc0:	f041 0102 	orr.w	r1, r1, #2
    5fc4:	7191      	strb	r1, [r2, #6]
    while (theEvCh->CHSTATUS.reg & EVSYS_CHSTATUS_RDYUSR) {
    5fc6:	79d1      	ldrb	r1, [r2, #7]
    5fc8:	07c8      	lsls	r0, r1, #31
    5fca:	d4fc      	bmi.n	5fc6 <_ZN9ClearCore11MotorDriver10InitializeE13ClearCorePins+0x2b2>
        EVSYS_CHANNEL_EVGEN(EVSYS_ID_GEN_EIC_EXTINT_0 + m_hlfbInfo->extInt) |
    5fcc:	3512      	adds	r5, #18
    5fce:	f005 057f 	and.w	r5, r5, #127	; 0x7f
    5fd2:	f445 7500 	orr.w	r5, r5, #512	; 0x200
    theEvCh->CHANNEL.reg =
    5fd6:	f846 503e 	str.w	r5, [r6, lr, lsl #3]
    while (theEvCh->CHSTATUS.reg & EVSYS_CHSTATUS_BUSYCH) {
    5fda:	79d1      	ldrb	r1, [r2, #7]
    5fdc:	0789      	lsls	r1, r1, #30
    5fde:	d4fc      	bmi.n	5fda <_ZN9ClearCore11MotorDriver10InitializeE13ClearCorePins+0x2c6>
    tcCount->CTRLA.bit.ENABLE = 1;
    5fe0:	681a      	ldr	r2, [r3, #0]
    5fe2:	f042 0202 	orr.w	r2, r2, #2
    5fe6:	601a      	str	r2, [r3, #0]
    SYNCBUSY_WAIT(tcCount, TC_SYNCBUSY_ENABLE);
    5fe8:	691a      	ldr	r2, [r3, #16]
    5fea:	f012 0202 	ands.w	r2, r2, #2
    5fee:	d1fb      	bne.n	5fe8 <_ZN9ClearCore11MotorDriver10InitializeE13ClearCorePins+0x2d4>
    m_initialized = true;
    5ff0:	2301      	movs	r3, #1
    m_statusRegMotor.reg = 0;
    5ff2:	f8c4 2118 	str.w	r2, [r4, #280]	; 0x118
    m_statusRegMotorRisen.reg = 0;
    5ff6:	f8c4 211c 	str.w	r2, [r4, #284]	; 0x11c
    m_statusRegMotorFallen.reg = 0;
    5ffa:	f8c4 2120 	str.w	r2, [r4, #288]	; 0x120
    m_initialized = true;
    5ffe:	f884 312c 	strb.w	r3, [r4, #300]	; 0x12c
    6002:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    Mode(CPM_MODE_A_DIRECT_B_DIRECT);
    6004:	2109      	movs	r1, #9
    6006:	4620      	mov	r0, r4
    6008:	4798      	blx	r3
    600a:	e708      	b.n	5e1e <_ZN9ClearCore11MotorDriver10InitializeE13ClearCorePins+0x10a>
    600c:	41008000 	.word	0x41008000
    6010:	00004e11 	.word	0x00004e11
    6014:	00022bc4 	.word	0x00022bc4
    6018:	40002800 	.word	0x40002800
    601c:	40001c00 	.word	0x40001c00
    6020:	4100e000 	.word	0x4100e000
    6024:	4100e020 	.word	0x4100e020

00006028 <_ZN9ClearCore9SerialUsb6ParityENS_7ISerial9_ParitiesE>:

        \return Returns true if port accepted the format change request.
    **/
    bool Parity(Parities newParity) override {
        return newParity == Parities::PARITY_N;
    }
    6028:	f1a1 0002 	sub.w	r0, r1, #2
    602c:	fab0 f080 	clz	r0, r0
    6030:	0940      	lsrs	r0, r0, #5
    6032:	4770      	bx	lr

00006034 <_ZN9ClearCore9SerialUsb6ParityEv>:

        \return Returns transmission parity enumeration.
    **/
    Parities Parity() override {
        return Parities::PARITY_N;
    }
    6034:	2002      	movs	r0, #2
    6036:	4770      	bx	lr

00006038 <_ZN9ClearCore9SerialUsb8StopBitsEh>:

        For USB Serial ports, only 1 stop bit is supported.
    **/
    bool StopBits(uint8_t bits) override {
        return bits == 1;
    }
    6038:	f1a1 0001 	sub.w	r0, r1, #1
    603c:	fab0 f080 	clz	r0, r0
    6040:	0940      	lsrs	r0, r0, #5
    6042:	4770      	bx	lr

00006044 <_ZN9ClearCore9SerialUsb8CharSizeEh>:

        For USB Serial ports, only 8-bit characters are supported.
    **/
    bool CharSize(uint8_t size) override {
        return size == 8;
    }
    6044:	f1a1 0008 	sub.w	r0, r1, #8
    6048:	fab0 f080 	clz	r0, r0
    604c:	0940      	lsrs	r0, r0, #5
    604e:	4770      	bx	lr

00006050 <_ZN9ClearCore9SerialUsb4ModeEv>:

        \return The connector's current operational mode.
    **/
    virtual ConnectorModes Mode() override {
        return Connector::Mode();
    }
    6050:	7a80      	ldrb	r0, [r0, #10]
    6052:	4770      	bx	lr

00006054 <_ZThn4_N9ClearCore9SerialUsb4ModeEv>:
    virtual ConnectorModes Mode() override {
    6054:	f1a0 0004 	sub.w	r0, r0, #4
    6058:	e7fa      	b.n	6050 <_ZN9ClearCore9SerialUsb4ModeEv>
    605a:	bf00      	nop

0000605c <_ZN9ClearCore9SerialUsb4ModeENS_9Connector14ConnectorModesE>:
        \param[in] newMode The new mode to be set.
        The only valid mode is #USB_CDC.
        \return Returns false if the mode is invalid or setup fails.
    **/
    bool Mode(ConnectorModes newMode) override {
        return (m_mode == newMode);
    605c:	7a80      	ldrb	r0, [r0, #10]
    }
    605e:	1a40      	subs	r0, r0, r1
    6060:	fab0 f080 	clz	r0, r0
    6064:	0940      	lsrs	r0, r0, #5
    6066:	4770      	bx	lr

00006068 <_ZThn4_N9ClearCore9SerialUsb4ModeENS_9Connector14ConnectorModesE>:
    bool Mode(ConnectorModes newMode) override {
    6068:	f1a0 0004 	sub.w	r0, r0, #4
    606c:	e7f6      	b.n	605c <_ZN9ClearCore9SerialUsb4ModeENS_9Connector14ConnectorModesE>
    606e:	bf00      	nop

00006070 <_ZN9ClearCore9SerialUsb4TypeEv>:

        \return The type of the current connector.
    **/
    Connector::ConnectorTypes Type() override {
        return Connector::SERIAL_USB_TYPE;
    }
    6070:	2008      	movs	r0, #8
    6072:	4770      	bx	lr

00006074 <_ZThn4_N9ClearCore9SerialUsb4TypeEv>:
    Connector::ConnectorTypes Type() override {
    6074:	f1a0 0004 	sub.w	r0, r0, #4
    6078:	e7fa      	b.n	6070 <_ZN9ClearCore9SerialUsb4TypeEv>
    607a:	bf00      	nop

0000607c <_ZN9ClearCore9SerialUsb11IsInHwFaultEv>:
        return true;
    }

    bool IsInHwFault() override {
        return false;
    }
    607c:	2000      	movs	r0, #0
    607e:	4770      	bx	lr

00006080 <_ZThn4_N9ClearCore9SerialUsb11IsInHwFaultEv>:
    bool IsInHwFault() override {
    6080:	f1a0 0004 	sub.w	r0, r0, #4
    6084:	e7fa      	b.n	607c <_ZN9ClearCore9SerialUsb11IsInHwFaultEv>
    6086:	bf00      	nop

00006088 <_ZN9ClearCore9SerialUsb10InitializeE13ClearCorePins>:
    /**
        Initialize hardware and/or internal state.
    **/
    void Initialize(ClearCorePins clearCorePin) override {
        m_index = clearCorePin;
        m_mode = USB_CDC;
    6088:	2311      	movs	r3, #17
        m_index = clearCorePin;
    608a:	8181      	strh	r1, [r0, #12]
        m_mode = USB_CDC;
    608c:	7283      	strb	r3, [r0, #10]
    608e:	4770      	bx	lr

00006090 <_ZThn4_N9ClearCore9SerialUsb10InitializeE13ClearCorePins>:
    void Initialize(ClearCorePins clearCorePin) override {
    6090:	f1a0 0004 	sub.w	r0, r0, #4
    6094:	e7f8      	b.n	6088 <_ZN9ClearCore9SerialUsb10InitializeE13ClearCorePins>
    6096:	bf00      	nop

00006098 <_ZN9ClearCore9SerialUsb7RefreshEv>:
    /**
        \brief Update connector's state.

        \return Update the internal state.
    **/
    void Refresh() override {};
    6098:	4770      	bx	lr
    609a:	bf00      	nop

0000609c <_ZThn4_N9ClearCore9SerialUsb7RefreshEv>:
    609c:	f1a0 0004 	sub.w	r0, r0, #4
    60a0:	e7fa      	b.n	6098 <_ZN9ClearCore9SerialUsb7RefreshEv>
    60a2:	bf00      	nop

000060a4 <_ZN9ClearCore9SerialUsb10FlushInputEv>:

SerialUsb::SerialUsb(uint16_t index) :
    m_index(index) {}

void SerialUsb::FlushInput() {
    UsbMgr.FlushInput();
    60a4:	4b01      	ldr	r3, [pc, #4]	; (60ac <_ZN9ClearCore9SerialUsb10FlushInputEv+0x8>)
    60a6:	6818      	ldr	r0, [r3, #0]
    60a8:	f000 be5e 	b.w	6d68 <_ZN9ClearCore10UsbManager10FlushInputEv>
    60ac:	20000adc 	.word	0x20000adc

000060b0 <_ZN9ClearCore9SerialUsb19WaitForTransmitIdleEv>:
int32_t SerialUsb::AvailableForWrite() {
    return UsbMgr.AvailableForWrite();
}

void SerialUsb::WaitForTransmitIdle() {
    UsbMgr.WaitForWriteFinish();
    60b0:	4b01      	ldr	r3, [pc, #4]	; (60b8 <_ZN9ClearCore9SerialUsb19WaitForTransmitIdleEv+0x8>)
    60b2:	6818      	ldr	r0, [r3, #0]
    60b4:	f000 be66 	b.w	6d84 <_ZN9ClearCore10UsbManager18WaitForWriteFinishEv>
    60b8:	20000adc 	.word	0x20000adc

000060bc <_ZN9ClearCore9SerialUsb10PortIsOpenEv>:
}

SerialUsb::operator bool() {
    return static_cast<bool>(UsbMgr);
    60bc:	4b01      	ldr	r3, [pc, #4]	; (60c4 <_ZN9ClearCore9SerialUsb10PortIsOpenEv+0x8>)
    60be:	6818      	ldr	r0, [r3, #0]
    60c0:	f000 be7a 	b.w	6db8 <_ZN9ClearCore10UsbManagercvbEv>
    60c4:	20000adc 	.word	0x20000adc

000060c8 <_ZN9ClearCore9SerialUsb8PortOpenEv>:
    UsbMgr.PortOpen();
    60c8:	4b01      	ldr	r3, [pc, #4]	; (60d0 <_ZN9ClearCore9SerialUsb8PortOpenEv+0x8>)
    60ca:	6818      	ldr	r0, [r3, #0]
    60cc:	f000 be30 	b.w	6d30 <_ZN9ClearCore10UsbManager8PortOpenEv>
    60d0:	20000adc 	.word	0x20000adc

000060d4 <_ZN9ClearCore9SerialUsb9PortCloseEv>:
    UsbMgr.PortClose();
    60d4:	4b01      	ldr	r3, [pc, #4]	; (60dc <_ZN9ClearCore9SerialUsb9PortCloseEv+0x8>)
    60d6:	6818      	ldr	r0, [r3, #0]
    60d8:	f001 ba04 	b.w	74e4 <_ZN9ClearCore10UsbManager9PortCloseEv>
    60dc:	20000adc 	.word	0x20000adc

000060e0 <_ZN9ClearCore9SerialUsb5SpeedEm>:
    return UsbMgr.Speed(bitsPerSecond);
    60e0:	4b01      	ldr	r3, [pc, #4]	; (60e8 <_ZN9ClearCore9SerialUsb5SpeedEm+0x8>)
    60e2:	6818      	ldr	r0, [r3, #0]
    60e4:	f000 be1c 	b.w	6d20 <_ZN9ClearCore10UsbManager5SpeedEm>
    60e8:	20000adc 	.word	0x20000adc

000060ec <_ZN9ClearCore9SerialUsb5SpeedEv>:
    return UsbMgr.Speed();
    60ec:	4b01      	ldr	r3, [pc, #4]	; (60f4 <_ZN9ClearCore9SerialUsb5SpeedEv+0x8>)
    60ee:	6818      	ldr	r0, [r3, #0]
    60f0:	f000 be18 	b.w	6d24 <_ZN9ClearCore10UsbManager5SpeedEv>
    60f4:	20000adc 	.word	0x20000adc

000060f8 <_ZN9ClearCore9SerialUsb7CharGetEv>:
    return UsbMgr.CharGet();
    60f8:	4b01      	ldr	r3, [pc, #4]	; (6100 <_ZN9ClearCore9SerialUsb7CharGetEv+0x8>)
    60fa:	6818      	ldr	r0, [r3, #0]
    60fc:	f000 be7a 	b.w	6df4 <_ZN9ClearCore10UsbManager7CharGetEv>
    6100:	20000adc 	.word	0x20000adc

00006104 <_ZN9ClearCore9SerialUsb8CharPeekEv>:
    return UsbMgr.CharPeek();
    6104:	4b01      	ldr	r3, [pc, #4]	; (610c <_ZN9ClearCore9SerialUsb8CharPeekEv+0x8>)
    6106:	6818      	ldr	r0, [r3, #0]
    6108:	f000 bfa0 	b.w	704c <_ZN9ClearCore10UsbManager8CharPeekEv>
    610c:	20000adc 	.word	0x20000adc

00006110 <_ZN9ClearCore9SerialUsb8SendCharEh>:
    return UsbMgr.SendChar(charToSend);
    6110:	4b01      	ldr	r3, [pc, #4]	; (6118 <_ZN9ClearCore9SerialUsb8SendCharEh+0x8>)
    6112:	6818      	ldr	r0, [r3, #0]
    6114:	f000 bfa6 	b.w	7064 <_ZN9ClearCore10UsbManager8SendCharEh>
    6118:	20000adc 	.word	0x20000adc

0000611c <_ZN9ClearCore9SerialUsb16AvailableForReadEv>:
    return UsbMgr.AvailableForRead();
    611c:	4b01      	ldr	r3, [pc, #4]	; (6124 <_ZN9ClearCore9SerialUsb16AvailableForReadEv+0x8>)
    611e:	6818      	ldr	r0, [r3, #0]
    6120:	f000 bfd4 	b.w	70cc <_ZN9ClearCore10UsbManager16AvailableForReadEv>
    6124:	20000adc 	.word	0x20000adc

00006128 <_ZN9ClearCore9SerialUsb17AvailableForWriteEv>:
    return UsbMgr.AvailableForWrite();
    6128:	4b01      	ldr	r3, [pc, #4]	; (6130 <_ZN9ClearCore9SerialUsb17AvailableForWriteEv+0x8>)
    612a:	6818      	ldr	r0, [r3, #0]
    612c:	f000 bfd6 	b.w	70dc <_ZN9ClearCore10UsbManager17AvailableForWriteEv>
    6130:	20000adc 	.word	0x20000adc

00006134 <_ZN9ClearCore9SerialUsb10IsWritableEv>:
        return PortIsOpen();
    6134:	6803      	ldr	r3, [r0, #0]
    6136:	4a04      	ldr	r2, [pc, #16]	; (6148 <_ZN9ClearCore9SerialUsb10IsWritableEv+0x14>)
    6138:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    613a:	4293      	cmp	r3, r2
    613c:	d103      	bne.n	6146 <_ZN9ClearCore9SerialUsb10IsWritableEv+0x12>
    return static_cast<bool>(UsbMgr);
    613e:	4b03      	ldr	r3, [pc, #12]	; (614c <_ZN9ClearCore9SerialUsb10IsWritableEv+0x18>)
    6140:	6818      	ldr	r0, [r3, #0]
    6142:	f000 be39 	b.w	6db8 <_ZN9ClearCore10UsbManagercvbEv>
    6146:	4718      	bx	r3
    6148:	000060bd 	.word	0x000060bd
    614c:	20000adc 	.word	0x20000adc

00006150 <_ZThn4_N9ClearCore9SerialUsb10IsWritableEv>:
    bool IsWritable() override {
    6150:	f1a0 0004 	sub.w	r0, r0, #4
    6154:	e7ee      	b.n	6134 <_ZN9ClearCore9SerialUsb10IsWritableEv>
    6156:	bf00      	nop

00006158 <_ZN9ClearCore9SerialUsb5StateEv>:
    int16_t State() override {
    6158:	b508      	push	{r3, lr}
        return PortIsOpen();
    615a:	6803      	ldr	r3, [r0, #0]
    615c:	4a06      	ldr	r2, [pc, #24]	; (6178 <_ZN9ClearCore9SerialUsb5StateEv+0x20>)
    615e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    6160:	4293      	cmp	r3, r2
    6162:	d105      	bne.n	6170 <_ZN9ClearCore9SerialUsb5StateEv+0x18>
    6164:	4b05      	ldr	r3, [pc, #20]	; (617c <_ZN9ClearCore9SerialUsb5StateEv+0x24>)
    6166:	6818      	ldr	r0, [r3, #0]
    6168:	f000 fe26 	bl	6db8 <_ZN9ClearCore10UsbManagercvbEv>
    }
    616c:	b200      	sxth	r0, r0
    616e:	bd08      	pop	{r3, pc}
        return PortIsOpen();
    6170:	4798      	blx	r3
    }
    6172:	b200      	sxth	r0, r0
    6174:	bd08      	pop	{r3, pc}
    6176:	bf00      	nop
    6178:	000060bd 	.word	0x000060bd
    617c:	20000adc 	.word	0x20000adc

00006180 <_ZThn4_N9ClearCore9SerialUsb5StateEv>:
    int16_t State() override {
    6180:	f1a0 0004 	sub.w	r0, r0, #4
    6184:	e7e8      	b.n	6158 <_ZN9ClearCore9SerialUsb5StateEv>
    6186:	bf00      	nop

00006188 <_ZN9ClearCore9SerialUsb5StateEs>:
    bool State(int16_t newState) override {
    6188:	b508      	push	{r3, lr}
            PortOpen();
    618a:	6803      	ldr	r3, [r0, #0]
        if (newState) {
    618c:	b961      	cbnz	r1, 61a8 <_ZN9ClearCore9SerialUsb5StateEs+0x20>
    618e:	4a0b      	ldr	r2, [pc, #44]	; (61bc <_ZN9ClearCore9SerialUsb5StateEs+0x34>)
            PortClose();
    6190:	68db      	ldr	r3, [r3, #12]
    6192:	4293      	cmp	r3, r2
    6194:	d105      	bne.n	61a2 <_ZN9ClearCore9SerialUsb5StateEs+0x1a>
    UsbMgr.PortClose();
    6196:	4b0a      	ldr	r3, [pc, #40]	; (61c0 <_ZN9ClearCore9SerialUsb5StateEs+0x38>)
    6198:	6818      	ldr	r0, [r3, #0]
    619a:	f001 f9a3 	bl	74e4 <_ZN9ClearCore10UsbManager9PortCloseEv>
    }
    619e:	2001      	movs	r0, #1
    61a0:	bd08      	pop	{r3, pc}
            PortClose();
    61a2:	4798      	blx	r3
    }
    61a4:	2001      	movs	r0, #1
    61a6:	bd08      	pop	{r3, pc}
    61a8:	4a06      	ldr	r2, [pc, #24]	; (61c4 <_ZN9ClearCore9SerialUsb5StateEs+0x3c>)
            PortOpen();
    61aa:	689b      	ldr	r3, [r3, #8]
    61ac:	4293      	cmp	r3, r2
    61ae:	d1f8      	bne.n	61a2 <_ZN9ClearCore9SerialUsb5StateEs+0x1a>
    UsbMgr.PortOpen();
    61b0:	4b03      	ldr	r3, [pc, #12]	; (61c0 <_ZN9ClearCore9SerialUsb5StateEs+0x38>)
    61b2:	6818      	ldr	r0, [r3, #0]
    61b4:	f000 fdbc 	bl	6d30 <_ZN9ClearCore10UsbManager8PortOpenEv>
    }
    61b8:	2001      	movs	r0, #1
    61ba:	bd08      	pop	{r3, pc}
    61bc:	000060d5 	.word	0x000060d5
    61c0:	20000adc 	.word	0x20000adc
    61c4:	000060c9 	.word	0x000060c9

000061c8 <_ZThn4_N9ClearCore9SerialUsb5StateEs>:
    bool State(int16_t newState) override {
    61c8:	f1a0 0004 	sub.w	r0, r0, #4
    61cc:	e7dc      	b.n	6188 <_ZN9ClearCore9SerialUsb5StateEs>
    61ce:	bf00      	nop

000061d0 <_ZN9ClearCore10UsbManager18CBLineStateChangedE22usb_cdc_control_signal>:
**/

/**
    Callback invoked when Line State Change
**/
bool UsbManager::CBLineStateChanged(usb_cdc_control_signal_t state) {
    61d0:	b530      	push	{r4, r5, lr}
    61d2:	b083      	sub	sp, #12
    UsbMgr.m_lineState = state;
    61d4:	4d1a      	ldr	r5, [pc, #104]	; (6240 <_ZN9ClearCore10UsbManager18CBLineStateChangedE22usb_cdc_control_signal+0x70>)
bool UsbManager::CBLineStateChanged(usb_cdc_control_signal_t state) {
    61d6:	f8ad 0004 	strh.w	r0, [sp, #4]
    if (state.rs232.DTR) {
    61da:	f89d 1004 	ldrb.w	r1, [sp, #4]
    UsbMgr.m_lineState = state;
    61de:	682b      	ldr	r3, [r5, #0]
    if (state.rs232.DTR) {
    61e0:	f011 0401 	ands.w	r4, r1, #1
    UsbMgr.m_lineState = state;
    61e4:	f8a3 0112 	strh.w	r0, [r3, #274]	; 0x112
    if (state.rs232.DTR) {
    61e8:	d112      	bne.n	6210 <_ZN9ClearCore10UsbManager18CBLineStateChangedE22usb_cdc_control_signal+0x40>
        // Start Rx
        cdcdf_acm_read(UsbMgr.m_usbReadBuf, sizeof(UsbMgr.m_usbReadBuf));
    }
    else {
        // Callbacks must be registered after endpoint allocation
        cdcdf_acm_register_callback(CDCDF_ACM_CB_READ, (FUNC_PTR)NULL);
    61ea:	4621      	mov	r1, r4
    61ec:	4620      	mov	r0, r4
    61ee:	f006 f8dd 	bl	c3ac <cdcdf_acm_register_callback>
        cdcdf_acm_register_callback(CDCDF_ACM_CB_WRITE, (FUNC_PTR)NULL);
    61f2:	4621      	mov	r1, r4
    61f4:	2001      	movs	r0, #1
    61f6:	f006 f8d9 	bl	c3ac <cdcdf_acm_register_callback>
        // Stop Rx/Tx
        cdcdf_acm_stop_xfer();
    61fa:	f006 f8cb 	bl	c394 <cdcdf_acm_stop_xfer>
        if (cdcdf_acm_get_line_coding()->dwDTERate == 1200) {
    61fe:	f006 f903 	bl	c408 <cdcdf_acm_get_line_coding>
    6202:	6803      	ldr	r3, [r0, #0]
    6204:	f5b3 6f96 	cmp.w	r3, #1200	; 0x4b0
    6208:	d012      	beq.n	6230 <_ZN9ClearCore10UsbManager18CBLineStateChangedE22usb_cdc_control_signal+0x60>
        }
    }

    // No error
    return false;
}
    620a:	2000      	movs	r0, #0
    620c:	b003      	add	sp, #12
    620e:	bd30      	pop	{r4, r5, pc}
        cdcdf_acm_register_callback(CDCDF_ACM_CB_READ, (FUNC_PTR)RxComplete);
    6210:	490c      	ldr	r1, [pc, #48]	; (6244 <_ZN9ClearCore10UsbManager18CBLineStateChangedE22usb_cdc_control_signal+0x74>)
    6212:	2000      	movs	r0, #0
    6214:	f006 f8ca 	bl	c3ac <cdcdf_acm_register_callback>
        cdcdf_acm_register_callback(CDCDF_ACM_CB_WRITE, (FUNC_PTR)TxComplete);
    6218:	490b      	ldr	r1, [pc, #44]	; (6248 <_ZN9ClearCore10UsbManager18CBLineStateChangedE22usb_cdc_control_signal+0x78>)
    621a:	2001      	movs	r0, #1
    621c:	f006 f8c6 	bl	c3ac <cdcdf_acm_register_callback>
        cdcdf_acm_read(UsbMgr.m_usbReadBuf, sizeof(UsbMgr.m_usbReadBuf));
    6220:	6828      	ldr	r0, [r5, #0]
    6222:	2140      	movs	r1, #64	; 0x40
    6224:	3080      	adds	r0, #128	; 0x80
    6226:	f006 f88d 	bl	c344 <cdcdf_acm_read>
}
    622a:	2000      	movs	r0, #0
    622c:	b003      	add	sp, #12
    622e:	bd30      	pop	{r4, r5, pc}
            SysMgr.ResetBoard(SysManager::RESET_TO_BOOTLOADER);
    6230:	2101      	movs	r1, #1
    6232:	4806      	ldr	r0, [pc, #24]	; (624c <_ZN9ClearCore10UsbManager18CBLineStateChangedE22usb_cdc_control_signal+0x7c>)
    6234:	f003 fa36 	bl	96a4 <_ZN9ClearCore10SysManager10ResetBoardENS0_10ResetModesE>
}
    6238:	2000      	movs	r0, #0
    623a:	b003      	add	sp, #12
    623c:	bd30      	pop	{r4, r5, pc}
    623e:	bf00      	nop
    6240:	20000adc 	.word	0x20000adc
    6244:	00006251 	.word	0x00006251
    6248:	00006489 	.word	0x00006489
    624c:	200019d4 	.word	0x200019d4

00006250 <_ZN9ClearCore10UsbManager10RxCompleteEh13usb_xfer_codem>:
    return true;
}

bool UsbManager::RxComplete(const uint8_t ep,
                            const enum usb_xfer_code rc,
                            const uint32_t count) {
    6250:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    6254:	b083      	sub	sp, #12
  __ASM volatile ("cpsid i" : : : "memory");
    6256:	b672      	cpsid	i
    UNUSED(ep);
    UNUSED(rc);

    __disable_irq();
    // Make the Rx data available to be copied into the Rx ring buffer
    UsbMgr.m_readBufAvail = count;
    6258:	498a      	ldr	r1, [pc, #552]	; (6484 <_ZN9ClearCore10UsbManager10RxCompleteEh13usb_xfer_codem+0x234>)
    625a:	680b      	ldr	r3, [r1, #0]
    UsbMgr.m_readBufPtr = UsbMgr.m_usbReadBuf;
    625c:	f103 0080 	add.w	r0, r3, #128	; 0x80
    UsbMgr.m_readBufAvail = count;
    6260:	f8c3 2118 	str.w	r2, [r3, #280]	; 0x118
    UsbMgr.m_readBufPtr = UsbMgr.m_usbReadBuf;
    6264:	f8c3 0114 	str.w	r0, [r3, #276]	; 0x114
  __ASM volatile ("cpsie i" : : : "memory");
    6268:	b662      	cpsie	i
    __enable_irq();
    UsbMgr.RxCopyToRingBuf();
    626a:	6808      	ldr	r0, [r1, #0]
  __ASM volatile ("cpsid i" : : : "memory");
    626c:	b672      	cpsid	i
    int32_t difference = m_inTail - m_inHead;
    626e:	f8d0 3104 	ldr.w	r3, [r0, #260]	; 0x104
    6272:	f8d0 2100 	ldr.w	r2, [r0, #256]	; 0x100
}

void UsbManager::RxCopyToRingBuf() {
    __disable_irq();
    uint32_t space = sizeof(m_bufferIn) - 1 - AvailableForRead();
    if (m_readBufAvail && space) {
    6276:	f8d0 4118 	ldr.w	r4, [r0, #280]	; 0x118
    if (difference < 0) {
    627a:	1a9b      	subs	r3, r3, r2
        return sizeof(m_bufferIn) + difference;
    627c:	bf48      	it	mi
    627e:	3340      	addmi	r3, #64	; 0x40
    if (m_readBufAvail && space) {
    6280:	2c00      	cmp	r4, #0
    6282:	f000 80d6 	beq.w	6432 <_ZN9ClearCore10UsbManager10RxCompleteEh13usb_xfer_codem+0x1e2>
    6286:	f1d3 033f 	rsbs	r3, r3, #63	; 0x3f
    628a:	f000 80d2 	beq.w	6432 <_ZN9ClearCore10UsbManager10RxCompleteEh13usb_xfer_codem+0x1e2>

        uint32_t count = min(space, m_readBufAvail);
        uint32_t tail = m_inTail;
    628e:	f8d0 5104 	ldr.w	r5, [r0, #260]	; 0x104
        uint8_t *inPtr = m_readBufPtr;
    6292:	f8d0 2114 	ldr.w	r2, [r0, #276]	; 0x114
    6296:	42a3      	cmp	r3, r4
    6298:	bf28      	it	cs
    629a:	4623      	movcs	r3, r4
        uint8_t *outPtr = &m_bufferIn[tail];
        uint32_t countTilWrap = sizeof(m_bufferIn) - tail;
    629c:	f1c5 0140 	rsb	r1, r5, #64	; 0x40
    62a0:	4299      	cmp	r1, r3
    62a2:	bf28      	it	cs
    62a4:	4619      	movcs	r1, r3
        uint8_t *outPtr = &m_bufferIn[tail];
    62a6:	1946      	adds	r6, r0, r5
        countTilWrap = min(countTilWrap, count);

        // Copy the available data until we get to the
        // end of input data or the ring buffer wrap point
        for (uint32_t i = 0; i < countTilWrap; i++) {
    62a8:	2900      	cmp	r1, #0
    62aa:	f000 80e8 	beq.w	647e <_ZN9ClearCore10UsbManager10RxCompleteEh13usb_xfer_codem+0x22e>
    62ae:	1d2c      	adds	r4, r5, #4
    62b0:	4404      	add	r4, r0
    62b2:	1d17      	adds	r7, r2, #4
    62b4:	42be      	cmp	r6, r7
    62b6:	bf38      	it	cc
    62b8:	42a2      	cmpcc	r2, r4
    62ba:	f0c0 80ce 	bcc.w	645a <_ZN9ClearCore10UsbManager10RxCompleteEh13usb_xfer_codem+0x20a>
    62be:	290b      	cmp	r1, #11
    62c0:	f240 80cb 	bls.w	645a <_ZN9ClearCore10UsbManager10RxCompleteEh13usb_xfer_codem+0x20a>
    62c4:	4254      	negs	r4, r2
    62c6:	f014 0403 	ands.w	r4, r4, #3
    62ca:	f000 80b7 	beq.w	643c <_ZN9ClearCore10UsbManager10RxCompleteEh13usb_xfer_codem+0x1ec>
            *outPtr++ = *inPtr++;
    62ce:	7817      	ldrb	r7, [r2, #0]
    62d0:	5547      	strb	r7, [r0, r5]
    62d2:	2c01      	cmp	r4, #1
    62d4:	f106 0c01 	add.w	ip, r6, #1
    62d8:	f102 0801 	add.w	r8, r2, #1
    62dc:	f000 80b0 	beq.w	6440 <_ZN9ClearCore10UsbManager10RxCompleteEh13usb_xfer_codem+0x1f0>
    62e0:	7857      	ldrb	r7, [r2, #1]
    62e2:	7077      	strb	r7, [r6, #1]
    62e4:	2c02      	cmp	r4, #2
    62e6:	f106 0c02 	add.w	ip, r6, #2
    62ea:	f102 0802 	add.w	r8, r2, #2
    62ee:	f000 80a7 	beq.w	6440 <_ZN9ClearCore10UsbManager10RxCompleteEh13usb_xfer_codem+0x1f0>
    62f2:	7897      	ldrb	r7, [r2, #2]
    62f4:	70b7      	strb	r7, [r6, #2]
    62f6:	f106 0c03 	add.w	ip, r6, #3
        for (uint32_t i = 0; i < countTilWrap; i++) {
    62fa:	2603      	movs	r6, #3
            *outPtr++ = *inPtr++;
    62fc:	f102 0803 	add.w	r8, r2, #3
        for (uint32_t i = 0; i < countTilWrap; i++) {
    6300:	9601      	str	r6, [sp, #4]
    6302:	eba1 0b04 	sub.w	fp, r1, r4
    6306:	f1ab 0604 	sub.w	r6, fp, #4
    630a:	08b6      	lsrs	r6, r6, #2
    630c:	192f      	adds	r7, r5, r4
    630e:	3601      	adds	r6, #1
    6310:	ea4f 0986 	mov.w	r9, r6, lsl #2
    6314:	4407      	add	r7, r0
    6316:	4414      	add	r4, r2
    6318:	f04f 0e00 	mov.w	lr, #0
    631c:	f10e 0e01 	add.w	lr, lr, #1
            *outPtr++ = *inPtr++;
    6320:	f854 ab04 	ldr.w	sl, [r4], #4
    6324:	f847 ab04 	str.w	sl, [r7], #4
    6328:	4576      	cmp	r6, lr
    632a:	d8f7      	bhi.n	631c <_ZN9ClearCore10UsbManager10RxCompleteEh13usb_xfer_codem+0xcc>
    632c:	9c01      	ldr	r4, [sp, #4]
    632e:	45cb      	cmp	fp, r9
    6330:	444c      	add	r4, r9
    6332:	eb0c 0709 	add.w	r7, ip, r9
    6336:	eb08 0e09 	add.w	lr, r8, r9
    633a:	f000 8089 	beq.w	6450 <_ZN9ClearCore10UsbManager10RxCompleteEh13usb_xfer_codem+0x200>
    633e:	f818 8026 	ldrb.w	r8, [r8, r6, lsl #2]
    6342:	f80c 8026 	strb.w	r8, [ip, r6, lsl #2]
        for (uint32_t i = 0; i < countTilWrap; i++) {
    6346:	1c66      	adds	r6, r4, #1
    6348:	42b1      	cmp	r1, r6
    634a:	f240 8081 	bls.w	6450 <_ZN9ClearCore10UsbManager10RxCompleteEh13usb_xfer_codem+0x200>
    634e:	3402      	adds	r4, #2
            *outPtr++ = *inPtr++;
    6350:	f89e 6001 	ldrb.w	r6, [lr, #1]
    6354:	707e      	strb	r6, [r7, #1]
        for (uint32_t i = 0; i < countTilWrap; i++) {
    6356:	42a1      	cmp	r1, r4
    6358:	d97a      	bls.n	6450 <_ZN9ClearCore10UsbManager10RxCompleteEh13usb_xfer_codem+0x200>
            *outPtr++ = *inPtr++;
    635a:	f89e 4002 	ldrb.w	r4, [lr, #2]
    635e:	70bc      	strb	r4, [r7, #2]
    6360:	1856      	adds	r6, r2, r1
    6362:	f8d0 2114 	ldr.w	r2, [r0, #276]	; 0x114
    6366:	f8d0 4118 	ldr.w	r4, [r0, #280]	; 0x118
        }
        count -= countTilWrap;
        m_readBufPtr += countTilWrap;
    636a:	440a      	add	r2, r1
        m_readBufAvail -= countTilWrap;
    636c:	1a64      	subs	r4, r4, r1
        if (count) {
    636e:	1a5b      	subs	r3, r3, r1
        m_readBufPtr += countTilWrap;
    6370:	f8c0 2114 	str.w	r2, [r0, #276]	; 0x114
        m_readBufAvail -= countTilWrap;
    6374:	f8c0 4118 	str.w	r4, [r0, #280]	; 0x118
        if (count) {
    6378:	d064      	beq.n	6444 <_ZN9ClearCore10UsbManager10RxCompleteEh13usb_xfer_codem+0x1f4>
    637a:	1d31      	adds	r1, r6, #4
    637c:	1d02      	adds	r2, r0, #4
    637e:	4296      	cmp	r6, r2
    6380:	bf38      	it	cc
    6382:	4288      	cmpcc	r0, r1
            // Account for the ring buffer wrap point
            // and copy the remaining available data
            outPtr = m_bufferIn;
    6384:	4604      	mov	r4, r0
    6386:	d371      	bcc.n	646c <_ZN9ClearCore10UsbManager10RxCompleteEh13usb_xfer_codem+0x21c>
    6388:	2b0b      	cmp	r3, #11
    638a:	d96f      	bls.n	646c <_ZN9ClearCore10UsbManager10RxCompleteEh13usb_xfer_codem+0x21c>
    638c:	4272      	negs	r2, r6
    638e:	f012 0203 	ands.w	r2, r2, #3
    6392:	d05f      	beq.n	6454 <_ZN9ClearCore10UsbManager10RxCompleteEh13usb_xfer_codem+0x204>
            for (uint32_t i = 0; i < count; i++) {
                *outPtr++ = *inPtr++;
    6394:	7831      	ldrb	r1, [r6, #0]
    6396:	7001      	strb	r1, [r0, #0]
    6398:	2a01      	cmp	r2, #1
    639a:	f100 0401 	add.w	r4, r0, #1
    639e:	f106 0e01 	add.w	lr, r6, #1
    63a2:	d058      	beq.n	6456 <_ZN9ClearCore10UsbManager10RxCompleteEh13usb_xfer_codem+0x206>
    63a4:	7871      	ldrb	r1, [r6, #1]
    63a6:	7041      	strb	r1, [r0, #1]
    63a8:	2a02      	cmp	r2, #2
    63aa:	f100 0402 	add.w	r4, r0, #2
    63ae:	f106 0e02 	add.w	lr, r6, #2
    63b2:	d050      	beq.n	6456 <_ZN9ClearCore10UsbManager10RxCompleteEh13usb_xfer_codem+0x206>
    63b4:	78b1      	ldrb	r1, [r6, #2]
    63b6:	7081      	strb	r1, [r0, #2]
    63b8:	1cc4      	adds	r4, r0, #3
    63ba:	f106 0e03 	add.w	lr, r6, #3
            for (uint32_t i = 0; i < count; i++) {
    63be:	2703      	movs	r7, #3
    63c0:	eba3 0c02 	sub.w	ip, r3, r2
    63c4:	f1ac 0104 	sub.w	r1, ip, #4
    63c8:	0889      	lsrs	r1, r1, #2
    63ca:	1c4d      	adds	r5, r1, #1
    63cc:	4416      	add	r6, r2
    63ce:	ea4f 0885 	mov.w	r8, r5, lsl #2
    63d2:	4402      	add	r2, r0
    63d4:	2100      	movs	r1, #0
    63d6:	3101      	adds	r1, #1
                *outPtr++ = *inPtr++;
    63d8:	f856 9b04 	ldr.w	r9, [r6], #4
    63dc:	f842 9b04 	str.w	r9, [r2], #4
    63e0:	428d      	cmp	r5, r1
    63e2:	d8f8      	bhi.n	63d6 <_ZN9ClearCore10UsbManager10RxCompleteEh13usb_xfer_codem+0x186>
    63e4:	45c4      	cmp	ip, r8
    63e6:	eb07 0208 	add.w	r2, r7, r8
    63ea:	eb04 0108 	add.w	r1, r4, r8
    63ee:	eb0e 0608 	add.w	r6, lr, r8
    63f2:	d00d      	beq.n	6410 <_ZN9ClearCore10UsbManager10RxCompleteEh13usb_xfer_codem+0x1c0>
    63f4:	f81e 7025 	ldrb.w	r7, [lr, r5, lsl #2]
    63f8:	f804 7025 	strb.w	r7, [r4, r5, lsl #2]
            for (uint32_t i = 0; i < count; i++) {
    63fc:	1c54      	adds	r4, r2, #1
    63fe:	42a3      	cmp	r3, r4
    6400:	d906      	bls.n	6410 <_ZN9ClearCore10UsbManager10RxCompleteEh13usb_xfer_codem+0x1c0>
    6402:	3202      	adds	r2, #2
                *outPtr++ = *inPtr++;
    6404:	7874      	ldrb	r4, [r6, #1]
    6406:	704c      	strb	r4, [r1, #1]
            for (uint32_t i = 0; i < count; i++) {
    6408:	4293      	cmp	r3, r2
    640a:	d901      	bls.n	6410 <_ZN9ClearCore10UsbManager10RxCompleteEh13usb_xfer_codem+0x1c0>
                *outPtr++ = *inPtr++;
    640c:	78b2      	ldrb	r2, [r6, #2]
    640e:	708a      	strb	r2, [r1, #2]
            }
            m_inTail = count;
            m_readBufPtr += count;
    6410:	f8d0 2114 	ldr.w	r2, [r0, #276]	; 0x114
            m_readBufAvail -= count;
    6414:	f8d0 4118 	ldr.w	r4, [r0, #280]	; 0x118
            m_inTail = count;
    6418:	f8c0 3104 	str.w	r3, [r0, #260]	; 0x104
            m_readBufPtr += count;
    641c:	441a      	add	r2, r3
            m_readBufAvail -= count;
    641e:	1ae4      	subs	r4, r4, r3
            m_readBufPtr += count;
    6420:	f8c0 2114 	str.w	r2, [r0, #276]	; 0x114
            m_readBufAvail -= count;
    6424:	f8c0 4118 	str.w	r4, [r0, #280]	; 0x118
            m_inTail = (tail + countTilWrap) & (sizeof(m_bufferIn) - 1);
        }

        // If all of the available input data has been copied into the
        // ring buffer, read more input data from the USB device
        if (!m_readBufAvail) {
    6428:	b91c      	cbnz	r4, 6432 <_ZN9ClearCore10UsbManager10RxCompleteEh13usb_xfer_codem+0x1e2>
            cdcdf_acm_read(m_usbReadBuf, sizeof(m_usbReadBuf));
    642a:	3080      	adds	r0, #128	; 0x80
    642c:	2140      	movs	r1, #64	; 0x40
    642e:	f005 ff89 	bl	c344 <cdcdf_acm_read>
  __ASM volatile ("cpsie i" : : : "memory");
    6432:	b662      	cpsie	i
}
    6434:	2001      	movs	r0, #1
    6436:	b003      	add	sp, #12
    6438:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        uint8_t *outPtr = &m_bufferIn[tail];
    643c:	46b4      	mov	ip, r6
        uint8_t *inPtr = m_readBufPtr;
    643e:	4690      	mov	r8, r2
        for (uint32_t i = 0; i < countTilWrap; i++) {
    6440:	9401      	str	r4, [sp, #4]
    6442:	e75e      	b.n	6302 <_ZN9ClearCore10UsbManager10RxCompleteEh13usb_xfer_codem+0xb2>
            m_inTail = (tail + countTilWrap) & (sizeof(m_bufferIn) - 1);
    6444:	4429      	add	r1, r5
    6446:	f001 013f 	and.w	r1, r1, #63	; 0x3f
    644a:	f8c0 1104 	str.w	r1, [r0, #260]	; 0x104
    644e:	e7eb      	b.n	6428 <_ZN9ClearCore10UsbManager10RxCompleteEh13usb_xfer_codem+0x1d8>
    6450:	1856      	adds	r6, r2, r1
    6452:	e786      	b.n	6362 <_ZN9ClearCore10UsbManager10RxCompleteEh13usb_xfer_codem+0x112>
            outPtr = m_bufferIn;
    6454:	46b6      	mov	lr, r6
            for (uint32_t i = 0; i < count; i++) {
    6456:	4617      	mov	r7, r2
    6458:	e7b2      	b.n	63c0 <_ZN9ClearCore10UsbManager10RxCompleteEh13usb_xfer_codem+0x170>
    645a:	1e74      	subs	r4, r6, #1
    645c:	1856      	adds	r6, r2, r1
            *outPtr++ = *inPtr++;
    645e:	f812 7b01 	ldrb.w	r7, [r2], #1
    6462:	f804 7f01 	strb.w	r7, [r4, #1]!
        for (uint32_t i = 0; i < countTilWrap; i++) {
    6466:	42b2      	cmp	r2, r6
    6468:	d1f9      	bne.n	645e <_ZN9ClearCore10UsbManager10RxCompleteEh13usb_xfer_codem+0x20e>
    646a:	e77a      	b.n	6362 <_ZN9ClearCore10UsbManager10RxCompleteEh13usb_xfer_codem+0x112>
    646c:	1e42      	subs	r2, r0, #1
    646e:	18f4      	adds	r4, r6, r3
                *outPtr++ = *inPtr++;
    6470:	f816 1b01 	ldrb.w	r1, [r6], #1
    6474:	f802 1f01 	strb.w	r1, [r2, #1]!
            for (uint32_t i = 0; i < count; i++) {
    6478:	42b4      	cmp	r4, r6
    647a:	d1f9      	bne.n	6470 <_ZN9ClearCore10UsbManager10RxCompleteEh13usb_xfer_codem+0x220>
    647c:	e7c8      	b.n	6410 <_ZN9ClearCore10UsbManager10RxCompleteEh13usb_xfer_codem+0x1c0>
        uint8_t *inPtr = m_readBufPtr;
    647e:	4616      	mov	r6, r2
    6480:	e773      	b.n	636a <_ZN9ClearCore10UsbManager10RxCompleteEh13usb_xfer_codem+0x11a>
    6482:	bf00      	nop
    6484:	20000adc 	.word	0x20000adc

00006488 <_ZN9ClearCore10UsbManager10TxCompleteEh13usb_xfer_codem>:
                            const uint32_t count) {
    6488:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
        UsbMgr.m_outHead =
    648c:	48d8      	ldr	r0, [pc, #864]	; (67f0 <_ZN9ClearCore10UsbManager10TxCompleteEh13usb_xfer_codem+0x368>)
                            const uint32_t count) {
    648e:	b083      	sub	sp, #12
    if (rc == USB_XFER_DONE) {
    6490:	2900      	cmp	r1, #0
    6492:	f040 81ab 	bne.w	67ec <_ZN9ClearCore10UsbManager10TxCompleteEh13usb_xfer_codem+0x364>
        UsbMgr.m_outHead =
    6496:	6801      	ldr	r1, [r0, #0]
            (UsbMgr.m_outHead + count) & (sizeof(m_bufferOut) - 1);
    6498:	f8d1 3108 	ldr.w	r3, [r1, #264]	; 0x108
    649c:	441a      	add	r2, r3
    649e:	f002 023f 	and.w	r2, r2, #63	; 0x3f
        UsbMgr.m_outHead =
    64a2:	f8c1 2108 	str.w	r2, [r1, #264]	; 0x108
    atomic_clear_seqcst(&UsbMgr.m_sendActive);
    64a6:	2300      	movs	r3, #0
    64a8:	f3bf 8f5b 	dmb	ish
    64ac:	f881 3110 	strb.w	r3, [r1, #272]	; 0x110
    64b0:	f3bf 8f5b 	dmb	ish
    UsbMgr.TxPump();
    64b4:	6804      	ldr	r4, [r0, #0]
    if (atomic_test_and_set_acqrel(&m_sendActive)) {
    64b6:	f3bf 8f5b 	dmb	ish
    64ba:	f04f 0101 	mov.w	r1, #1
    64be:	f504 7388 	add.w	r3, r4, #272	; 0x110
    64c2:	e8d3 2f4f 	ldrexb	r2, [r3]
    64c6:	e8c3 1f40 	strexb	r0, r1, [r3]
    64ca:	2800      	cmp	r0, #0
    64cc:	d1f9      	bne.n	64c2 <_ZN9ClearCore10UsbManager10TxCompleteEh13usb_xfer_codem+0x3a>
    64ce:	f3bf 8f5b 	dmb	ish
    64d2:	f012 0fff 	tst.w	r2, #255	; 0xff
    64d6:	f040 80dc 	bne.w	6692 <_ZN9ClearCore10UsbManager10TxCompleteEh13usb_xfer_codem+0x20a>
    uint32_t head = m_outHead;
    64da:	f8d4 6108 	ldr.w	r6, [r4, #264]	; 0x108
    uint32_t tail = m_outTail;
    64de:	f8d4 110c 	ldr.w	r1, [r4, #268]	; 0x10c
    if (head == tail) {
    64e2:	428e      	cmp	r6, r1
    64e4:	f000 8191 	beq.w	680a <_ZN9ClearCore10UsbManager10TxCompleteEh13usb_xfer_codem+0x382>
    uint8_t *inPtr = m_bufferOut + head, *outPtr = m_usbWriteBuf;
    64e8:	f104 0240 	add.w	r2, r4, #64	; 0x40
    64ec:	eb02 0706 	add.w	r7, r2, r6
    64f0:	f104 0ec0 	add.w	lr, r4, #192	; 0xc0
    if (head < tail) {
    64f4:	f0c0 80d1 	bcc.w	669a <_ZN9ClearCore10UsbManager10TxCompleteEh13usb_xfer_codem+0x212>
        uint32_t countTilWrap = sizeof(m_bufferOut) - head;
    64f8:	f1c6 0340 	rsb	r3, r6, #64	; 0x40
        count = min(count, countTilWrap + tail);
    64fc:	4419      	add	r1, r3
    64fe:	2940      	cmp	r1, #64	; 0x40
    6500:	bf28      	it	cs
    6502:	2140      	movcs	r1, #64	; 0x40
    6504:	428b      	cmp	r3, r1
    6506:	bf28      	it	cs
    6508:	460b      	movcs	r3, r1
        for (uint32_t iChar = 0; iChar < loopEnd; iChar++) {
    650a:	2b00      	cmp	r3, #0
    650c:	f000 81a1 	beq.w	6852 <_ZN9ClearCore10UsbManager10TxCompleteEh13usb_xfer_codem+0x3ca>
    6510:	f106 0540 	add.w	r5, r6, #64	; 0x40
    6514:	f106 0c44 	add.w	ip, r6, #68	; 0x44
    6518:	1960      	adds	r0, r4, r5
    651a:	44a4      	add	ip, r4
    651c:	f104 08c4 	add.w	r8, r4, #196	; 0xc4
    6520:	4540      	cmp	r0, r8
    6522:	bf38      	it	cc
    6524:	45e6      	cmpcc	lr, ip
    6526:	f0c0 818a 	bcc.w	683e <_ZN9ClearCore10UsbManager10TxCompleteEh13usb_xfer_codem+0x3b6>
    652a:	2b0b      	cmp	r3, #11
    652c:	f240 8187 	bls.w	683e <_ZN9ClearCore10UsbManager10TxCompleteEh13usb_xfer_codem+0x3b6>
    6530:	4240      	negs	r0, r0
    6532:	f010 0003 	ands.w	r0, r0, #3
    6536:	f000 8161 	beq.w	67fc <_ZN9ClearCore10UsbManager10TxCompleteEh13usb_xfer_codem+0x374>
            *outPtr++ = *inPtr++;
    653a:	5d96      	ldrb	r6, [r2, r6]
    653c:	f884 60c0 	strb.w	r6, [r4, #192]	; 0xc0
    6540:	2801      	cmp	r0, #1
    6542:	f104 0cc1 	add.w	ip, r4, #193	; 0xc1
    6546:	f107 0801 	add.w	r8, r7, #1
    654a:	f000 8159 	beq.w	6800 <_ZN9ClearCore10UsbManager10TxCompleteEh13usb_xfer_codem+0x378>
    654e:	787e      	ldrb	r6, [r7, #1]
    6550:	f884 60c1 	strb.w	r6, [r4, #193]	; 0xc1
    6554:	2802      	cmp	r0, #2
    6556:	f104 0cc2 	add.w	ip, r4, #194	; 0xc2
    655a:	f107 0802 	add.w	r8, r7, #2
    655e:	f000 814f 	beq.w	6800 <_ZN9ClearCore10UsbManager10TxCompleteEh13usb_xfer_codem+0x378>
    6562:	78be      	ldrb	r6, [r7, #2]
    6564:	f884 60c2 	strb.w	r6, [r4, #194]	; 0xc2
        for (uint32_t iChar = 0; iChar < loopEnd; iChar++) {
    6568:	2603      	movs	r6, #3
            *outPtr++ = *inPtr++;
    656a:	f107 0803 	add.w	r8, r7, #3
    656e:	f104 0cc3 	add.w	ip, r4, #195	; 0xc3
        for (uint32_t iChar = 0; iChar < loopEnd; iChar++) {
    6572:	9601      	str	r6, [sp, #4]
    6574:	eba3 0b00 	sub.w	fp, r3, r0
    6578:	f1ab 0604 	sub.w	r6, fp, #4
    657c:	08b6      	lsrs	r6, r6, #2
    657e:	4405      	add	r5, r0
    6580:	3601      	adds	r6, #1
    6582:	30c0      	adds	r0, #192	; 0xc0
    6584:	4425      	add	r5, r4
    6586:	4420      	add	r0, r4
    6588:	ea4f 0986 	mov.w	r9, r6, lsl #2
    658c:	2700      	movs	r7, #0
    658e:	3701      	adds	r7, #1
            *outPtr++ = *inPtr++;
    6590:	f855 ab04 	ldr.w	sl, [r5], #4
    6594:	f840 ab04 	str.w	sl, [r0], #4
    6598:	42b7      	cmp	r7, r6
    659a:	d3f8      	bcc.n	658e <_ZN9ClearCore10UsbManager10TxCompleteEh13usb_xfer_codem+0x106>
    659c:	9801      	ldr	r0, [sp, #4]
    659e:	45cb      	cmp	fp, r9
    65a0:	4448      	add	r0, r9
    65a2:	eb0c 0509 	add.w	r5, ip, r9
    65a6:	eb08 0709 	add.w	r7, r8, r9
    65aa:	d00d      	beq.n	65c8 <_ZN9ClearCore10UsbManager10TxCompleteEh13usb_xfer_codem+0x140>
    65ac:	f818 8026 	ldrb.w	r8, [r8, r6, lsl #2]
    65b0:	f80c 8026 	strb.w	r8, [ip, r6, lsl #2]
        for (uint32_t iChar = 0; iChar < loopEnd; iChar++) {
    65b4:	1c46      	adds	r6, r0, #1
    65b6:	42b3      	cmp	r3, r6
    65b8:	d906      	bls.n	65c8 <_ZN9ClearCore10UsbManager10TxCompleteEh13usb_xfer_codem+0x140>
    65ba:	3002      	adds	r0, #2
            *outPtr++ = *inPtr++;
    65bc:	787e      	ldrb	r6, [r7, #1]
    65be:	706e      	strb	r6, [r5, #1]
        for (uint32_t iChar = 0; iChar < loopEnd; iChar++) {
    65c0:	4283      	cmp	r3, r0
    65c2:	d901      	bls.n	65c8 <_ZN9ClearCore10UsbManager10TxCompleteEh13usb_xfer_codem+0x140>
            *outPtr++ = *inPtr++;
    65c4:	78b8      	ldrb	r0, [r7, #2]
    65c6:	70a8      	strb	r0, [r5, #2]
    65c8:	eb0e 0003 	add.w	r0, lr, r3
        for (uint32_t iChar = 0; iChar < loopEnd; iChar++) {
    65cc:	1acb      	subs	r3, r1, r3
    65ce:	f000 80fc 	beq.w	67ca <_ZN9ClearCore10UsbManager10TxCompleteEh13usb_xfer_codem+0x342>
    65d2:	f104 0544 	add.w	r5, r4, #68	; 0x44
    65d6:	1d06      	adds	r6, r0, #4
    65d8:	42b2      	cmp	r2, r6
    65da:	bf38      	it	cc
    65dc:	42a8      	cmpcc	r0, r5
    65de:	f0c0 8125 	bcc.w	682c <_ZN9ClearCore10UsbManager10TxCompleteEh13usb_xfer_codem+0x3a4>
    65e2:	2b0b      	cmp	r3, #11
    65e4:	f240 8122 	bls.w	682c <_ZN9ClearCore10UsbManager10TxCompleteEh13usb_xfer_codem+0x3a4>
    65e8:	4255      	negs	r5, r2
    65ea:	f015 0503 	ands.w	r5, r5, #3
    65ee:	f000 8109 	beq.w	6804 <_ZN9ClearCore10UsbManager10TxCompleteEh13usb_xfer_codem+0x37c>
            *outPtr++ = *inPtr++;
    65f2:	f894 2040 	ldrb.w	r2, [r4, #64]	; 0x40
    65f6:	7002      	strb	r2, [r0, #0]
    65f8:	2d01      	cmp	r5, #1
    65fa:	f100 0801 	add.w	r8, r0, #1
    65fe:	f104 0241 	add.w	r2, r4, #65	; 0x41
    6602:	f000 8100 	beq.w	6806 <_ZN9ClearCore10UsbManager10TxCompleteEh13usb_xfer_codem+0x37e>
    6606:	f894 2041 	ldrb.w	r2, [r4, #65]	; 0x41
    660a:	7042      	strb	r2, [r0, #1]
    660c:	2d02      	cmp	r5, #2
    660e:	f100 0802 	add.w	r8, r0, #2
    6612:	f104 0242 	add.w	r2, r4, #66	; 0x42
    6616:	f000 80f6 	beq.w	6806 <_ZN9ClearCore10UsbManager10TxCompleteEh13usb_xfer_codem+0x37e>
    661a:	f894 2042 	ldrb.w	r2, [r4, #66]	; 0x42
    661e:	7082      	strb	r2, [r0, #2]
    6620:	f100 0803 	add.w	r8, r0, #3
    6624:	f104 0243 	add.w	r2, r4, #67	; 0x43
        for (uint32_t iChar = 0; iChar < loopEnd; iChar++) {
    6628:	2703      	movs	r7, #3
    662a:	eba3 0905 	sub.w	r9, r3, r5
    662e:	f1a9 0604 	sub.w	r6, r9, #4
    6632:	08b6      	lsrs	r6, r6, #2
    6634:	f105 0c40 	add.w	ip, r5, #64	; 0x40
    6638:	3601      	adds	r6, #1
    663a:	4428      	add	r0, r5
    663c:	44a4      	add	ip, r4
    663e:	ea4f 0b86 	mov.w	fp, r6, lsl #2
    6642:	f04f 0a00 	mov.w	sl, #0
    6646:	f10a 0a01 	add.w	sl, sl, #1
            *outPtr++ = *inPtr++;
    664a:	f85c 5b04 	ldr.w	r5, [ip], #4
    664e:	f840 5b04 	str.w	r5, [r0], #4
    6652:	4556      	cmp	r6, sl
    6654:	d8f7      	bhi.n	6646 <_ZN9ClearCore10UsbManager10TxCompleteEh13usb_xfer_codem+0x1be>
    6656:	45d9      	cmp	r9, fp
    6658:	445f      	add	r7, fp
    665a:	eb08 000b 	add.w	r0, r8, fp
    665e:	eb02 050b 	add.w	r5, r2, fp
    6662:	f000 80b2 	beq.w	67ca <_ZN9ClearCore10UsbManager10TxCompleteEh13usb_xfer_codem+0x342>
    6666:	f812 2026 	ldrb.w	r2, [r2, r6, lsl #2]
    666a:	f808 2026 	strb.w	r2, [r8, r6, lsl #2]
        for (uint32_t iChar = 0; iChar < loopEnd; iChar++) {
    666e:	1c7a      	adds	r2, r7, #1
    6670:	4293      	cmp	r3, r2
    6672:	f240 80aa 	bls.w	67ca <_ZN9ClearCore10UsbManager10TxCompleteEh13usb_xfer_codem+0x342>
    6676:	3702      	adds	r7, #2
            *outPtr++ = *inPtr++;
    6678:	786a      	ldrb	r2, [r5, #1]
    667a:	7042      	strb	r2, [r0, #1]
        for (uint32_t iChar = 0; iChar < loopEnd; iChar++) {
    667c:	42bb      	cmp	r3, r7
    667e:	f240 80a4 	bls.w	67ca <_ZN9ClearCore10UsbManager10TxCompleteEh13usb_xfer_codem+0x342>
            *outPtr++ = *inPtr++;
    6682:	78ab      	ldrb	r3, [r5, #2]
    6684:	7083      	strb	r3, [r0, #2]
    if (cdcdf_acm_write(m_usbWriteBuf, count)) {
    6686:	4670      	mov	r0, lr
    6688:	f005 fe70 	bl	c36c <cdcdf_acm_write>
    668c:	2800      	cmp	r0, #0
    668e:	f040 80a2 	bne.w	67d6 <_ZN9ClearCore10UsbManager10TxCompleteEh13usb_xfer_codem+0x34e>
}
    6692:	2001      	movs	r0, #1
    6694:	b003      	add	sp, #12
    6696:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        count = min(count, tail - head);
    669a:	1b89      	subs	r1, r1, r6
    669c:	f106 0340 	add.w	r3, r6, #64	; 0x40
    66a0:	f106 0044 	add.w	r0, r6, #68	; 0x44
    66a4:	2940      	cmp	r1, #64	; 0x40
    66a6:	eb04 0803 	add.w	r8, r4, r3
    66aa:	4420      	add	r0, r4
    66ac:	f104 05c4 	add.w	r5, r4, #196	; 0xc4
    66b0:	bf28      	it	cs
    66b2:	2140      	movcs	r1, #64	; 0x40
    66b4:	45a8      	cmp	r8, r5
    66b6:	bf38      	it	cc
    66b8:	4586      	cmpcc	lr, r0
    66ba:	f0c0 80ad 	bcc.w	6818 <_ZN9ClearCore10UsbManager10TxCompleteEh13usb_xfer_codem+0x390>
    66be:	290b      	cmp	r1, #11
    66c0:	f240 80aa 	bls.w	6818 <_ZN9ClearCore10UsbManager10TxCompleteEh13usb_xfer_codem+0x390>
    66c4:	f1c8 0800 	rsb	r8, r8, #0
    66c8:	f018 0803 	ands.w	r8, r8, #3
    66cc:	f000 8092 	beq.w	67f4 <_ZN9ClearCore10UsbManager10TxCompleteEh13usb_xfer_codem+0x36c>
            *outPtr++ = *inPtr++;
    66d0:	5d92      	ldrb	r2, [r2, r6]
    66d2:	f884 20c0 	strb.w	r2, [r4, #192]	; 0xc0
    66d6:	f1b8 0f01 	cmp.w	r8, #1
    66da:	f104 05c1 	add.w	r5, r4, #193	; 0xc1
    66de:	f107 0601 	add.w	r6, r7, #1
    66e2:	f000 8089 	beq.w	67f8 <_ZN9ClearCore10UsbManager10TxCompleteEh13usb_xfer_codem+0x370>
    66e6:	787a      	ldrb	r2, [r7, #1]
    66e8:	f884 20c1 	strb.w	r2, [r4, #193]	; 0xc1
    66ec:	f1b8 0f02 	cmp.w	r8, #2
    66f0:	f104 05c2 	add.w	r5, r4, #194	; 0xc2
    66f4:	f107 0602 	add.w	r6, r7, #2
    66f8:	d07e      	beq.n	67f8 <_ZN9ClearCore10UsbManager10TxCompleteEh13usb_xfer_codem+0x370>
    66fa:	78ba      	ldrb	r2, [r7, #2]
    66fc:	f884 20c2 	strb.w	r2, [r4, #194]	; 0xc2
    6700:	1cfe      	adds	r6, r7, #3
    6702:	f104 05c3 	add.w	r5, r4, #195	; 0xc3
        for (uint32_t iChar = 0; iChar < count; iChar++) {
    6706:	f04f 0903 	mov.w	r9, #3
    670a:	4443      	add	r3, r8
    670c:	f108 00c0 	add.w	r0, r8, #192	; 0xc0
            *outPtr++ = *inPtr++;
    6710:	58e2      	ldr	r2, [r4, r3]
    6712:	5022      	str	r2, [r4, r0]
    6714:	eba1 0808 	sub.w	r8, r1, r8
    6718:	f1a8 0204 	sub.w	r2, r8, #4
    671c:	4423      	add	r3, r4
    671e:	0892      	lsrs	r2, r2, #2
    6720:	3201      	adds	r2, #1
    6722:	4420      	add	r0, r4
    6724:	685f      	ldr	r7, [r3, #4]
    6726:	6047      	str	r7, [r0, #4]
    6728:	2a02      	cmp	r2, #2
    672a:	ea4f 0c82 	mov.w	ip, r2, lsl #2
    672e:	d035      	beq.n	679c <_ZN9ClearCore10UsbManager10TxCompleteEh13usb_xfer_codem+0x314>
    6730:	689f      	ldr	r7, [r3, #8]
    6732:	6087      	str	r7, [r0, #8]
    6734:	2a03      	cmp	r2, #3
    6736:	d031      	beq.n	679c <_ZN9ClearCore10UsbManager10TxCompleteEh13usb_xfer_codem+0x314>
    6738:	68df      	ldr	r7, [r3, #12]
    673a:	60c7      	str	r7, [r0, #12]
    673c:	2a04      	cmp	r2, #4
    673e:	d02d      	beq.n	679c <_ZN9ClearCore10UsbManager10TxCompleteEh13usb_xfer_codem+0x314>
    6740:	691f      	ldr	r7, [r3, #16]
    6742:	6107      	str	r7, [r0, #16]
    6744:	2a05      	cmp	r2, #5
    6746:	d029      	beq.n	679c <_ZN9ClearCore10UsbManager10TxCompleteEh13usb_xfer_codem+0x314>
    6748:	695f      	ldr	r7, [r3, #20]
    674a:	6147      	str	r7, [r0, #20]
    674c:	2a06      	cmp	r2, #6
    674e:	d025      	beq.n	679c <_ZN9ClearCore10UsbManager10TxCompleteEh13usb_xfer_codem+0x314>
    6750:	699f      	ldr	r7, [r3, #24]
    6752:	6187      	str	r7, [r0, #24]
    6754:	2a07      	cmp	r2, #7
    6756:	d021      	beq.n	679c <_ZN9ClearCore10UsbManager10TxCompleteEh13usb_xfer_codem+0x314>
    6758:	69df      	ldr	r7, [r3, #28]
    675a:	61c7      	str	r7, [r0, #28]
    675c:	2a08      	cmp	r2, #8
    675e:	d01d      	beq.n	679c <_ZN9ClearCore10UsbManager10TxCompleteEh13usb_xfer_codem+0x314>
    6760:	6a1f      	ldr	r7, [r3, #32]
    6762:	6207      	str	r7, [r0, #32]
    6764:	2a09      	cmp	r2, #9
    6766:	d019      	beq.n	679c <_ZN9ClearCore10UsbManager10TxCompleteEh13usb_xfer_codem+0x314>
    6768:	6a5f      	ldr	r7, [r3, #36]	; 0x24
    676a:	6247      	str	r7, [r0, #36]	; 0x24
    676c:	2a0a      	cmp	r2, #10
    676e:	d015      	beq.n	679c <_ZN9ClearCore10UsbManager10TxCompleteEh13usb_xfer_codem+0x314>
    6770:	6a9f      	ldr	r7, [r3, #40]	; 0x28
    6772:	6287      	str	r7, [r0, #40]	; 0x28
    6774:	2a0b      	cmp	r2, #11
    6776:	d011      	beq.n	679c <_ZN9ClearCore10UsbManager10TxCompleteEh13usb_xfer_codem+0x314>
    6778:	6adf      	ldr	r7, [r3, #44]	; 0x2c
    677a:	62c7      	str	r7, [r0, #44]	; 0x2c
    677c:	2a0c      	cmp	r2, #12
    677e:	d00d      	beq.n	679c <_ZN9ClearCore10UsbManager10TxCompleteEh13usb_xfer_codem+0x314>
    6780:	6b1f      	ldr	r7, [r3, #48]	; 0x30
    6782:	6307      	str	r7, [r0, #48]	; 0x30
    6784:	2a0d      	cmp	r2, #13
    6786:	d009      	beq.n	679c <_ZN9ClearCore10UsbManager10TxCompleteEh13usb_xfer_codem+0x314>
    6788:	6b5f      	ldr	r7, [r3, #52]	; 0x34
    678a:	6347      	str	r7, [r0, #52]	; 0x34
    678c:	2a0e      	cmp	r2, #14
    678e:	d005      	beq.n	679c <_ZN9ClearCore10UsbManager10TxCompleteEh13usb_xfer_codem+0x314>
    6790:	6b9f      	ldr	r7, [r3, #56]	; 0x38
    6792:	6387      	str	r7, [r0, #56]	; 0x38
    6794:	2a0f      	cmp	r2, #15
    6796:	d001      	beq.n	679c <_ZN9ClearCore10UsbManager10TxCompleteEh13usb_xfer_codem+0x314>
    6798:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
    679a:	63c3      	str	r3, [r0, #60]	; 0x3c
    679c:	45e0      	cmp	r8, ip
    679e:	44e1      	add	r9, ip
    67a0:	eb05 030c 	add.w	r3, r5, ip
    67a4:	eb06 000c 	add.w	r0, r6, ip
    67a8:	d00f      	beq.n	67ca <_ZN9ClearCore10UsbManager10TxCompleteEh13usb_xfer_codem+0x342>
    67aa:	f816 6022 	ldrb.w	r6, [r6, r2, lsl #2]
    67ae:	f805 6022 	strb.w	r6, [r5, r2, lsl #2]
        for (uint32_t iChar = 0; iChar < count; iChar++) {
    67b2:	f109 0201 	add.w	r2, r9, #1
    67b6:	4291      	cmp	r1, r2
    67b8:	d907      	bls.n	67ca <_ZN9ClearCore10UsbManager10TxCompleteEh13usb_xfer_codem+0x342>
    67ba:	f109 0902 	add.w	r9, r9, #2
            *outPtr++ = *inPtr++;
    67be:	7842      	ldrb	r2, [r0, #1]
    67c0:	705a      	strb	r2, [r3, #1]
        for (uint32_t iChar = 0; iChar < count; iChar++) {
    67c2:	4549      	cmp	r1, r9
    67c4:	d901      	bls.n	67ca <_ZN9ClearCore10UsbManager10TxCompleteEh13usb_xfer_codem+0x342>
            *outPtr++ = *inPtr++;
    67c6:	7882      	ldrb	r2, [r0, #2]
    67c8:	709a      	strb	r2, [r3, #2]
    if (cdcdf_acm_write(m_usbWriteBuf, count)) {
    67ca:	4670      	mov	r0, lr
    67cc:	f005 fdce 	bl	c36c <cdcdf_acm_write>
    67d0:	2800      	cmp	r0, #0
    67d2:	f43f af5e 	beq.w	6692 <_ZN9ClearCore10UsbManager10TxCompleteEh13usb_xfer_codem+0x20a>
        atomic_clear_seqcst(&m_sendActive);
    67d6:	f3bf 8f5b 	dmb	ish
    67da:	2300      	movs	r3, #0
    67dc:	f884 3110 	strb.w	r3, [r4, #272]	; 0x110
}
    67e0:	2001      	movs	r0, #1
        atomic_clear_seqcst(&m_sendActive);
    67e2:	f3bf 8f5b 	dmb	ish
}
    67e6:	b003      	add	sp, #12
    67e8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    67ec:	6801      	ldr	r1, [r0, #0]
    67ee:	e65a      	b.n	64a6 <_ZN9ClearCore10UsbManager10TxCompleteEh13usb_xfer_codem+0x1e>
    67f0:	20000adc 	.word	0x20000adc
    uint8_t *inPtr = m_bufferOut + head, *outPtr = m_usbWriteBuf;
    67f4:	463e      	mov	r6, r7
    67f6:	4675      	mov	r5, lr
        for (uint32_t iChar = 0; iChar < count; iChar++) {
    67f8:	46c1      	mov	r9, r8
    67fa:	e786      	b.n	670a <_ZN9ClearCore10UsbManager10TxCompleteEh13usb_xfer_codem+0x282>
    uint8_t *inPtr = m_bufferOut + head, *outPtr = m_usbWriteBuf;
    67fc:	46b8      	mov	r8, r7
    67fe:	46f4      	mov	ip, lr
        for (uint32_t iChar = 0; iChar < loopEnd; iChar++) {
    6800:	9001      	str	r0, [sp, #4]
    6802:	e6b7      	b.n	6574 <_ZN9ClearCore10UsbManager10TxCompleteEh13usb_xfer_codem+0xec>
        for (uint32_t iChar = 0; iChar < loopEnd; iChar++) {
    6804:	4680      	mov	r8, r0
    6806:	462f      	mov	r7, r5
    6808:	e70f      	b.n	662a <_ZN9ClearCore10UsbManager10TxCompleteEh13usb_xfer_codem+0x1a2>
        atomic_clear_seqcst(&m_sendActive);
    680a:	f3bf 8f5b 	dmb	ish
    680e:	f884 2110 	strb.w	r2, [r4, #272]	; 0x110
    6812:	f3bf 8f5b 	dmb	ish
    6816:	e73c      	b.n	6692 <_ZN9ClearCore10UsbManager10TxCompleteEh13usb_xfer_codem+0x20a>
    6818:	f104 03bf 	add.w	r3, r4, #191	; 0xbf
    681c:	1878      	adds	r0, r7, r1
            *outPtr++ = *inPtr++;
    681e:	f817 2b01 	ldrb.w	r2, [r7], #1
    6822:	f803 2f01 	strb.w	r2, [r3, #1]!
        for (uint32_t iChar = 0; iChar < count; iChar++) {
    6826:	4287      	cmp	r7, r0
    6828:	d1f9      	bne.n	681e <_ZN9ClearCore10UsbManager10TxCompleteEh13usb_xfer_codem+0x396>
    682a:	e7ce      	b.n	67ca <_ZN9ClearCore10UsbManager10TxCompleteEh13usb_xfer_codem+0x342>
    682c:	3801      	subs	r0, #1
    682e:	4413      	add	r3, r2
            *outPtr++ = *inPtr++;
    6830:	f812 5b01 	ldrb.w	r5, [r2], #1
    6834:	f800 5f01 	strb.w	r5, [r0, #1]!
        for (uint32_t iChar = 0; iChar < loopEnd; iChar++) {
    6838:	429a      	cmp	r2, r3
    683a:	d1f9      	bne.n	6830 <_ZN9ClearCore10UsbManager10TxCompleteEh13usb_xfer_codem+0x3a8>
    683c:	e7c5      	b.n	67ca <_ZN9ClearCore10UsbManager10TxCompleteEh13usb_xfer_codem+0x342>
    683e:	f104 00bf 	add.w	r0, r4, #191	; 0xbf
    6842:	18fe      	adds	r6, r7, r3
            *outPtr++ = *inPtr++;
    6844:	f817 5b01 	ldrb.w	r5, [r7], #1
    6848:	f800 5f01 	strb.w	r5, [r0, #1]!
        for (uint32_t iChar = 0; iChar < loopEnd; iChar++) {
    684c:	42be      	cmp	r6, r7
    684e:	d1f9      	bne.n	6844 <_ZN9ClearCore10UsbManager10TxCompleteEh13usb_xfer_codem+0x3bc>
    6850:	e6ba      	b.n	65c8 <_ZN9ClearCore10UsbManager10TxCompleteEh13usb_xfer_codem+0x140>
    uint8_t *inPtr = m_bufferOut + head, *outPtr = m_usbWriteBuf;
    6852:	4670      	mov	r0, lr
    6854:	e6ba      	b.n	65cc <_ZN9ClearCore10UsbManager10TxCompleteEh13usb_xfer_codem+0x144>
    6856:	bf00      	nop

00006858 <_ZN9ClearCore10UsbManager8InstanceEv>:
UsbManager &UsbManager::Instance() {
    6858:	b570      	push	{r4, r5, r6, lr}
    static UsbManager *instance = new UsbManager();
    685a:	4e16      	ldr	r6, [pc, #88]	; (68b4 <_ZN9ClearCore10UsbManager8InstanceEv+0x5c>)
    685c:	6834      	ldr	r4, [r6, #0]
    685e:	f014 0401 	ands.w	r4, r4, #1
    6862:	d002      	beq.n	686a <_ZN9ClearCore10UsbManager8InstanceEv+0x12>
    6864:	4b14      	ldr	r3, [pc, #80]	; (68b8 <_ZN9ClearCore10UsbManager8InstanceEv+0x60>)
    6866:	6818      	ldr	r0, [r3, #0]
    6868:	bd70      	pop	{r4, r5, r6, pc}
    686a:	f44f 7090 	mov.w	r0, #288	; 0x120
    686e:	f00c fd3f 	bl	132f0 <_Znwj>
    6872:	4605      	mov	r5, r0
    m_portOpen(false) {
    6874:	f100 0380 	add.w	r3, r0, #128	; 0x80
    6878:	f8c0 4100 	str.w	r4, [r0, #256]	; 0x100
                                (FUNC_PTR)CBLineStateChanged);
    687c:	490f      	ldr	r1, [pc, #60]	; (68bc <_ZN9ClearCore10UsbManager8InstanceEv+0x64>)
    m_portOpen(false) {
    687e:	f8c5 4104 	str.w	r4, [r5, #260]	; 0x104
    6882:	f8c5 3114 	str.w	r3, [r5, #276]	; 0x114
    6886:	f8c5 4108 	str.w	r4, [r5, #264]	; 0x108
    688a:	f8c5 4118 	str.w	r4, [r5, #280]	; 0x118
    688e:	f8c5 410c 	str.w	r4, [r5, #268]	; 0x10c
    6892:	f885 411c 	strb.w	r4, [r5, #284]	; 0x11c
    6896:	f885 4110 	strb.w	r4, [r5, #272]	; 0x110
    m_lineState.value = 0;
    689a:	f8a5 4112 	strh.w	r4, [r5, #274]	; 0x112
    m_portOpen(false) {
    689e:	f885 4111 	strb.w	r4, [r5, #273]	; 0x111
                                (FUNC_PTR)CBLineStateChanged);
    68a2:	2003      	movs	r0, #3
    68a4:	f005 fd82 	bl	c3ac <cdcdf_acm_register_callback>
    static UsbManager *instance = new UsbManager();
    68a8:	4a03      	ldr	r2, [pc, #12]	; (68b8 <_ZN9ClearCore10UsbManager8InstanceEv+0x60>)
    68aa:	2301      	movs	r3, #1
    68ac:	6015      	str	r5, [r2, #0]
    68ae:	4628      	mov	r0, r5
    68b0:	6033      	str	r3, [r6, #0]
}
    68b2:	bd70      	pop	{r4, r5, r6, pc}
    68b4:	20000ad8 	.word	0x20000ad8
    68b8:	20000b20 	.word	0x20000b20
    68bc:	000061d1 	.word	0x000061d1

000068c0 <_ZN9ClearCore10UsbManager10InitializeEv>:
bool UsbManager::Initialize() {
    68c0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    SET_CLOCK_SOURCE(USB_GCLK_ID, 4);
    68c4:	4ac7      	ldr	r2, [pc, #796]	; (6be4 <_ZN9ClearCore10UsbManager10InitializeEv+0x324>)
    68c6:	f8d2 30a8 	ldr.w	r3, [r2, #168]	; 0xa8
    68ca:	f36f 1386 	bfc	r3, #6, #1
bool UsbManager::Initialize() {
    68ce:	b08c      	sub	sp, #48	; 0x30
    SET_CLOCK_SOURCE(USB_GCLK_ID, 4);
    68d0:	f8c2 30a8 	str.w	r3, [r2, #168]	; 0xa8
    68d4:	f8d2 30a8 	ldr.w	r3, [r2, #168]	; 0xa8
    68d8:	0659      	lsls	r1, r3, #25
    68da:	d4fb      	bmi.n	68d4 <_ZN9ClearCore10UsbManager10InitializeEv+0x14>
    68dc:	f8d2 30a8 	ldr.w	r3, [r2, #168]	; 0xa8
    68e0:	49c0      	ldr	r1, [pc, #768]	; (6be4 <_ZN9ClearCore10UsbManager10InitializeEv+0x324>)
    68e2:	2004      	movs	r0, #4
    68e4:	f360 0303 	bfi	r3, r0, #0, #4
    68e8:	f8c2 30a8 	str.w	r3, [r2, #168]	; 0xa8
    68ec:	f8d2 30a8 	ldr.w	r3, [r2, #168]	; 0xa8
    68f0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    68f4:	f8c2 30a8 	str.w	r3, [r2, #168]	; 0xa8
    68f8:	684b      	ldr	r3, [r1, #4]
    68fa:	06db      	lsls	r3, r3, #27
    68fc:	d4fc      	bmi.n	68f8 <_ZN9ClearCore10UsbManager10InitializeEv+0x38>
    CLOCK_ENABLE(AHBMASK, USB_);
    68fe:	4bba      	ldr	r3, [pc, #744]	; (6be8 <_ZN9ClearCore10UsbManager10InitializeEv+0x328>)
                              CONF_USB_CDCD_ACM_ISERIALNUM);
    6900:	49ba      	ldr	r1, [pc, #744]	; (6bec <_ZN9ClearCore10UsbManager10InitializeEv+0x32c>)
    CLOCK_ENABLE(AHBMASK, USB_);
    6902:	691a      	ldr	r2, [r3, #16]
    6904:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
    6908:	611a      	str	r2, [r3, #16]
    CLOCK_ENABLE(APBBMASK, USB_);
    690a:	699a      	ldr	r2, [r3, #24]
    690c:	f042 0201 	orr.w	r2, r2, #1
    6910:	619a      	str	r2, [r3, #24]
                              CONF_USB_CDCD_ACM_ISERIALNUM);
    6912:	f1a1 00d7 	sub.w	r0, r1, #215	; 0xd7
    6916:	2203      	movs	r2, #3
    6918:	f006 f8f4 	bl	cb04 <usb_find_str_desc>
    if (!serNumDescPtr) {
    691c:	4604      	mov	r4, r0
    691e:	2800      	cmp	r0, #0
    6920:	f000 819c 	beq.w	6c5c <_ZN9ClearCore10UsbManager10InitializeEv+0x39c>
                             };
    6924:	4bb2      	ldr	r3, [pc, #712]	; (6bf0 <_ZN9ClearCore10UsbManager10InitializeEv+0x330>)
    6926:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
    6928:	e88d 000f 	stmia.w	sp, {r0, r1, r2, r3}
        serial_number_idx += writeNum(&(serial_number[serial_number_idx]),
    692c:	6803      	ldr	r3, [r0, #0]
        int d = (n >> sh) & 0xf;
    692e:	0f1d      	lsrs	r5, r3, #28
            buf[i++] = d > 9 ? 'A' + d - 10 : '0' + d;
    6930:	b2e8      	uxtb	r0, r5
        int d = (n >> sh) & 0xf;
    6932:	f3c3 6803 	ubfx	r8, r3, #24, #4
            buf[i++] = d > 9 ? 'A' + d - 10 : '0' + d;
    6936:	f100 0730 	add.w	r7, r0, #48	; 0x30
    693a:	3037      	adds	r0, #55	; 0x37
    693c:	2d09      	cmp	r5, #9
    693e:	bf88      	it	hi
    6940:	4607      	movhi	r7, r0
    6942:	fa5f f088 	uxtb.w	r0, r8
        int d = (n >> sh) & 0xf;
    6946:	f3c3 5603 	ubfx	r6, r3, #20, #4
            buf[i++] = d > 9 ? 'A' + d - 10 : '0' + d;
    694a:	f100 0c30 	add.w	ip, r0, #48	; 0x30
    694e:	3037      	adds	r0, #55	; 0x37
    6950:	f1b8 0f09 	cmp.w	r8, #9
    6954:	bfc8      	it	gt
    6956:	4684      	movgt	ip, r0
    6958:	b2f0      	uxtb	r0, r6
        int d = (n >> sh) & 0xf;
    695a:	f3c3 4503 	ubfx	r5, r3, #16, #4
            buf[i++] = d > 9 ? 'A' + d - 10 : '0' + d;
    695e:	f88d c011 	strb.w	ip, [sp, #17]
    6962:	f100 0c30 	add.w	ip, r0, #48	; 0x30
    6966:	3037      	adds	r0, #55	; 0x37
    6968:	2e09      	cmp	r6, #9
    696a:	bfc8      	it	gt
    696c:	4684      	movgt	ip, r0
    696e:	b2e8      	uxtb	r0, r5
        int d = (n >> sh) & 0xf;
    6970:	f3c3 3e03 	ubfx	lr, r3, #12, #4
            buf[i++] = d > 9 ? 'A' + d - 10 : '0' + d;
    6974:	f88d c012 	strb.w	ip, [sp, #18]
    6978:	f100 0c30 	add.w	ip, r0, #48	; 0x30
    697c:	3037      	adds	r0, #55	; 0x37
    697e:	2d09      	cmp	r5, #9
    6980:	bfc8      	it	gt
    6982:	4684      	movgt	ip, r0
    6984:	fa5f f08e 	uxtb.w	r0, lr
    6988:	f88d 7010 	strb.w	r7, [sp, #16]
    698c:	f88d c013 	strb.w	ip, [sp, #19]
        int d = (n >> sh) & 0xf;
    6990:	f3c3 2703 	ubfx	r7, r3, #8, #4
            buf[i++] = d > 9 ? 'A' + d - 10 : '0' + d;
    6994:	f100 0c30 	add.w	ip, r0, #48	; 0x30
    6998:	3037      	adds	r0, #55	; 0x37
    699a:	f1be 0f09 	cmp.w	lr, #9
    699e:	bfd4      	ite	le
    69a0:	46e6      	movle	lr, ip
    69a2:	4686      	movgt	lr, r0
    69a4:	b2f8      	uxtb	r0, r7
        int d = (n >> sh) & 0xf;
    69a6:	f3c3 1603 	ubfx	r6, r3, #4, #4
        serial_number_idx += writeNum(&(serial_number[serial_number_idx]),
    69aa:	460a      	mov	r2, r1
            buf[i++] = d > 9 ? 'A' + d - 10 : '0' + d;
    69ac:	f88d e014 	strb.w	lr, [sp, #20]
    69b0:	f100 0e37 	add.w	lr, r0, #55	; 0x37
    69b4:	3030      	adds	r0, #48	; 0x30
    69b6:	2f09      	cmp	r7, #9
    69b8:	bfcc      	ite	gt
    69ba:	4677      	movgt	r7, lr
    69bc:	4607      	movle	r7, r0
    69be:	b2f0      	uxtb	r0, r6
        serial_number_idx += writeNum(&(serial_number[serial_number_idx]),
    69c0:	6812      	ldr	r2, [r2, #0]
            buf[i++] = d > 9 ? 'A' + d - 10 : '0' + d;
    69c2:	f88d 7015 	strb.w	r7, [sp, #21]
        int d = (n >> sh) & 0xf;
    69c6:	f003 030f 	and.w	r3, r3, #15
            buf[i++] = d > 9 ? 'A' + d - 10 : '0' + d;
    69ca:	f100 0737 	add.w	r7, r0, #55	; 0x37
    69ce:	3030      	adds	r0, #48	; 0x30
    69d0:	2e09      	cmp	r6, #9
    69d2:	bfcc      	ite	gt
    69d4:	463e      	movgt	r6, r7
    69d6:	4606      	movle	r6, r0
    69d8:	b2d8      	uxtb	r0, r3
        int d = (n >> sh) & 0xf;
    69da:	0f15      	lsrs	r5, r2, #28
            buf[i++] = d > 9 ? 'A' + d - 10 : '0' + d;
    69dc:	f88d 6016 	strb.w	r6, [sp, #22]
    69e0:	f100 0637 	add.w	r6, r0, #55	; 0x37
    69e4:	3030      	adds	r0, #48	; 0x30
    69e6:	2b09      	cmp	r3, #9
    69e8:	bfcc      	ite	gt
    69ea:	4633      	movgt	r3, r6
    69ec:	4603      	movle	r3, r0
    69ee:	b2e8      	uxtb	r0, r5
        int d = (n >> sh) & 0xf;
    69f0:	f3c2 6c03 	ubfx	ip, r2, #24, #4
            buf[i++] = d > 9 ? 'A' + d - 10 : '0' + d;
    69f4:	f88d 3017 	strb.w	r3, [sp, #23]
    69f8:	f100 0337 	add.w	r3, r0, #55	; 0x37
    69fc:	3030      	adds	r0, #48	; 0x30
    69fe:	2d09      	cmp	r5, #9
    6a00:	bf88      	it	hi
    6a02:	4618      	movhi	r0, r3
    6a04:	fa5f f38c 	uxtb.w	r3, ip
        int d = (n >> sh) & 0xf;
    6a08:	f3c2 5e03 	ubfx	lr, r2, #20, #4
            buf[i++] = d > 9 ? 'A' + d - 10 : '0' + d;
    6a0c:	f88d 0018 	strb.w	r0, [sp, #24]
    6a10:	f103 0037 	add.w	r0, r3, #55	; 0x37
    6a14:	3330      	adds	r3, #48	; 0x30
    6a16:	f1bc 0f09 	cmp.w	ip, #9
    6a1a:	bfcc      	ite	gt
    6a1c:	4684      	movgt	ip, r0
    6a1e:	469c      	movle	ip, r3
    6a20:	fa5f f38e 	uxtb.w	r3, lr
        int d = (n >> sh) & 0xf;
    6a24:	f3c2 4703 	ubfx	r7, r2, #16, #4
            buf[i++] = d > 9 ? 'A' + d - 10 : '0' + d;
    6a28:	f88d c019 	strb.w	ip, [sp, #25]
    6a2c:	f103 0c37 	add.w	ip, r3, #55	; 0x37
    6a30:	3330      	adds	r3, #48	; 0x30
    6a32:	f1be 0f09 	cmp.w	lr, #9
    6a36:	bfd8      	it	le
    6a38:	469c      	movle	ip, r3
    6a3a:	b2fb      	uxtb	r3, r7
        int d = (n >> sh) & 0xf;
    6a3c:	f3c2 3603 	ubfx	r6, r2, #12, #4
            buf[i++] = d > 9 ? 'A' + d - 10 : '0' + d;
    6a40:	f88d c01a 	strb.w	ip, [sp, #26]
    6a44:	f103 0c37 	add.w	ip, r3, #55	; 0x37
    6a48:	3330      	adds	r3, #48	; 0x30
    6a4a:	2f09      	cmp	r7, #9
    6a4c:	bfd8      	it	le
    6a4e:	469c      	movle	ip, r3
    6a50:	b2f3      	uxtb	r3, r6
        int d = (n >> sh) & 0xf;
    6a52:	f3c2 2503 	ubfx	r5, r2, #8, #4
            buf[i++] = d > 9 ? 'A' + d - 10 : '0' + d;
    6a56:	f88d c01b 	strb.w	ip, [sp, #27]
    6a5a:	f103 0c37 	add.w	ip, r3, #55	; 0x37
    6a5e:	3330      	adds	r3, #48	; 0x30
    6a60:	2e09      	cmp	r6, #9
    6a62:	bfd8      	it	le
    6a64:	469c      	movle	ip, r3
    6a66:	b2eb      	uxtb	r3, r5
        int d = (n >> sh) & 0xf;
    6a68:	f3c2 1003 	ubfx	r0, r2, #4, #4
        serial_number_idx += writeNum(&(serial_number[serial_number_idx]),
    6a6c:	9902      	ldr	r1, [sp, #8]
            buf[i++] = d > 9 ? 'A' + d - 10 : '0' + d;
    6a6e:	f88d c01c 	strb.w	ip, [sp, #28]
    6a72:	f103 0c37 	add.w	ip, r3, #55	; 0x37
    6a76:	3330      	adds	r3, #48	; 0x30
    6a78:	2d09      	cmp	r5, #9
    6a7a:	bfcc      	ite	gt
    6a7c:	4665      	movgt	r5, ip
    6a7e:	461d      	movle	r5, r3
    6a80:	b2c3      	uxtb	r3, r0
        serial_number_idx += writeNum(&(serial_number[serial_number_idx]),
    6a82:	6809      	ldr	r1, [r1, #0]
            buf[i++] = d > 9 ? 'A' + d - 10 : '0' + d;
    6a84:	f88d 501d 	strb.w	r5, [sp, #29]
        int d = (n >> sh) & 0xf;
    6a88:	f002 020f 	and.w	r2, r2, #15
            buf[i++] = d > 9 ? 'A' + d - 10 : '0' + d;
    6a8c:	f103 0537 	add.w	r5, r3, #55	; 0x37
    6a90:	3330      	adds	r3, #48	; 0x30
    6a92:	2809      	cmp	r0, #9
    6a94:	bfcc      	ite	gt
    6a96:	4628      	movgt	r0, r5
    6a98:	4618      	movle	r0, r3
    6a9a:	b2d3      	uxtb	r3, r2
        int d = (n >> sh) & 0xf;
    6a9c:	ea4f 7e11 	mov.w	lr, r1, lsr #28
            buf[i++] = d > 9 ? 'A' + d - 10 : '0' + d;
    6aa0:	f88d 001e 	strb.w	r0, [sp, #30]
    6aa4:	f103 0037 	add.w	r0, r3, #55	; 0x37
    6aa8:	3330      	adds	r3, #48	; 0x30
        int d = (n >> sh) & 0xf;
    6aaa:	f3c1 6703 	ubfx	r7, r1, #24, #4
            buf[i++] = d > 9 ? 'A' + d - 10 : '0' + d;
    6aae:	2a09      	cmp	r2, #9
    6ab0:	bfcc      	ite	gt
    6ab2:	4602      	movgt	r2, r0
    6ab4:	461a      	movle	r2, r3
    6ab6:	fa5f f58e 	uxtb.w	r5, lr
    6aba:	b2f8      	uxtb	r0, r7
    6abc:	f88d 201f 	strb.w	r2, [sp, #31]
    6ac0:	f105 0237 	add.w	r2, r5, #55	; 0x37
    6ac4:	3530      	adds	r5, #48	; 0x30
        int d = (n >> sh) & 0xf;
    6ac6:	f3c1 5603 	ubfx	r6, r1, #20, #4
            buf[i++] = d > 9 ? 'A' + d - 10 : '0' + d;
    6aca:	f1be 0f09 	cmp.w	lr, #9
    6ace:	bf88      	it	hi
    6ad0:	4615      	movhi	r5, r2
    6ad2:	f100 0237 	add.w	r2, r0, #55	; 0x37
    6ad6:	3030      	adds	r0, #48	; 0x30
    6ad8:	2f09      	cmp	r7, #9
    6ada:	bfc8      	it	gt
    6adc:	4610      	movgt	r0, r2
    6ade:	b2f3      	uxtb	r3, r6
    6ae0:	f103 0237 	add.w	r2, r3, #55	; 0x37
    6ae4:	f88d 0021 	strb.w	r0, [sp, #33]	; 0x21
    6ae8:	3330      	adds	r3, #48	; 0x30
        int d = (n >> sh) & 0xf;
    6aea:	f3c1 4003 	ubfx	r0, r1, #16, #4
            buf[i++] = d > 9 ? 'A' + d - 10 : '0' + d;
    6aee:	2e09      	cmp	r6, #9
    6af0:	bfc8      	it	gt
    6af2:	4613      	movgt	r3, r2
    6af4:	b2c2      	uxtb	r2, r0
        int d = (n >> sh) & 0xf;
    6af6:	f3c1 3e03 	ubfx	lr, r1, #12, #4
            buf[i++] = d > 9 ? 'A' + d - 10 : '0' + d;
    6afa:	f102 0837 	add.w	r8, r2, #55	; 0x37
    6afe:	3230      	adds	r2, #48	; 0x30
    6b00:	2809      	cmp	r0, #9
    6b02:	bfd8      	it	le
    6b04:	4690      	movle	r8, r2
    6b06:	fa5f f28e 	uxtb.w	r2, lr
        int d = (n >> sh) & 0xf;
    6b0a:	f3c1 2703 	ubfx	r7, r1, #8, #4
            buf[i++] = d > 9 ? 'A' + d - 10 : '0' + d;
    6b0e:	f88d 3022 	strb.w	r3, [sp, #34]	; 0x22
    6b12:	4620      	mov	r0, r4
        serial_number_idx += writeNum(&(serial_number[serial_number_idx]),
    6b14:	9b03      	ldr	r3, [sp, #12]
            buf[i++] = d > 9 ? 'A' + d - 10 : '0' + d;
    6b16:	f88d 5020 	strb.w	r5, [sp, #32]
    6b1a:	f102 0437 	add.w	r4, r2, #55	; 0x37
    6b1e:	3230      	adds	r2, #48	; 0x30
    6b20:	f1be 0f09 	cmp.w	lr, #9
    6b24:	bfd8      	it	le
    6b26:	4614      	movle	r4, r2
    6b28:	b2fa      	uxtb	r2, r7
        serial_number_idx += writeNum(&(serial_number[serial_number_idx]),
    6b2a:	681b      	ldr	r3, [r3, #0]
            buf[i++] = d > 9 ? 'A' + d - 10 : '0' + d;
    6b2c:	f88d 4024 	strb.w	r4, [sp, #36]	; 0x24
        int d = (n >> sh) & 0xf;
    6b30:	f3c1 1603 	ubfx	r6, r1, #4, #4
            buf[i++] = d > 9 ? 'A' + d - 10 : '0' + d;
    6b34:	f102 0437 	add.w	r4, r2, #55	; 0x37
    6b38:	3230      	adds	r2, #48	; 0x30
    6b3a:	2f09      	cmp	r7, #9
    6b3c:	bfcc      	ite	gt
    6b3e:	4627      	movgt	r7, r4
    6b40:	4617      	movle	r7, r2
    6b42:	b2f2      	uxtb	r2, r6
        int d = (n >> sh) & 0xf;
    6b44:	f001 010f 	and.w	r1, r1, #15
            buf[i++] = d > 9 ? 'A' + d - 10 : '0' + d;
    6b48:	f88d 7025 	strb.w	r7, [sp, #37]	; 0x25
    6b4c:	f102 0737 	add.w	r7, r2, #55	; 0x37
    6b50:	3230      	adds	r2, #48	; 0x30
    6b52:	2e09      	cmp	r6, #9
    6b54:	bfcc      	ite	gt
    6b56:	463e      	movgt	r6, r7
    6b58:	4616      	movle	r6, r2
    6b5a:	b2ca      	uxtb	r2, r1
        int d = (n >> sh) & 0xf;
    6b5c:	0f1d      	lsrs	r5, r3, #28
            buf[i++] = d > 9 ? 'A' + d - 10 : '0' + d;
    6b5e:	f88d 6026 	strb.w	r6, [sp, #38]	; 0x26
    6b62:	f102 0637 	add.w	r6, r2, #55	; 0x37
    6b66:	3230      	adds	r2, #48	; 0x30
    6b68:	2909      	cmp	r1, #9
    6b6a:	bfcc      	ite	gt
    6b6c:	4631      	movgt	r1, r6
    6b6e:	4611      	movle	r1, r2
    6b70:	b2ea      	uxtb	r2, r5
        int d = (n >> sh) & 0xf;
    6b72:	f3c3 6c03 	ubfx	ip, r3, #24, #4
            buf[i++] = d > 9 ? 'A' + d - 10 : '0' + d;
    6b76:	f88d 1027 	strb.w	r1, [sp, #39]	; 0x27
    6b7a:	f102 0130 	add.w	r1, r2, #48	; 0x30
    6b7e:	3237      	adds	r2, #55	; 0x37
    6b80:	2d09      	cmp	r5, #9
    6b82:	bf88      	it	hi
    6b84:	4611      	movhi	r1, r2
    6b86:	fa5f f28c 	uxtb.w	r2, ip
        int d = (n >> sh) & 0xf;
    6b8a:	f3c3 5e03 	ubfx	lr, r3, #20, #4
            buf[i++] = d > 9 ? 'A' + d - 10 : '0' + d;
    6b8e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
    6b92:	f102 0130 	add.w	r1, r2, #48	; 0x30
    6b96:	3237      	adds	r2, #55	; 0x37
    6b98:	f1bc 0f09 	cmp.w	ip, #9
    6b9c:	bfd4      	ite	le
    6b9e:	468c      	movle	ip, r1
    6ba0:	4694      	movgt	ip, r2
    6ba2:	fa5f f28e 	uxtb.w	r2, lr
        int d = (n >> sh) & 0xf;
    6ba6:	f3c3 4403 	ubfx	r4, r3, #16, #4
            buf[i++] = d > 9 ? 'A' + d - 10 : '0' + d;
    6baa:	f102 0137 	add.w	r1, r2, #55	; 0x37
    6bae:	3230      	adds	r2, #48	; 0x30
    6bb0:	f1be 0f09 	cmp.w	lr, #9
    6bb4:	bfcc      	ite	gt
    6bb6:	468e      	movgt	lr, r1
    6bb8:	4696      	movle	lr, r2
    6bba:	b2e1      	uxtb	r1, r4
        int d = (n >> sh) & 0xf;
    6bbc:	f3c3 3703 	ubfx	r7, r3, #12, #4
            buf[i++] = d > 9 ? 'A' + d - 10 : '0' + d;
    6bc0:	f88d e02a 	strb.w	lr, [sp, #42]	; 0x2a
    6bc4:	f101 0e37 	add.w	lr, r1, #55	; 0x37
    6bc8:	3130      	adds	r1, #48	; 0x30
    6bca:	2c09      	cmp	r4, #9
    6bcc:	bfd8      	it	le
    6bce:	468e      	movle	lr, r1
    6bd0:	b2fa      	uxtb	r2, r7
        int d = (n >> sh) & 0xf;
    6bd2:	f3c3 2603 	ubfx	r6, r3, #8, #4
            buf[i++] = d > 9 ? 'A' + d - 10 : '0' + d;
    6bd6:	f88d e02b 	strb.w	lr, [sp, #43]	; 0x2b
    6bda:	f102 0e30 	add.w	lr, r2, #48	; 0x30
    6bde:	3237      	adds	r2, #55	; 0x37
    6be0:	e008      	b.n	6bf4 <_ZN9ClearCore10UsbManager10InitializeEv+0x334>
    6be2:	bf00      	nop
    6be4:	40001c00 	.word	0x40001c00
    6be8:	40000800 	.word	0x40000800
    6bec:	200000df 	.word	0x200000df
    6bf0:	00022cd8 	.word	0x00022cd8
    6bf4:	2f09      	cmp	r7, #9
    6bf6:	bfd4      	ite	le
    6bf8:	4677      	movle	r7, lr
    6bfa:	4617      	movgt	r7, r2
        int d = (n >> sh) & 0xf;
    6bfc:	f3c3 1503 	ubfx	r5, r3, #4, #4
            buf[i++] = d > 9 ? 'A' + d - 10 : '0' + d;
    6c00:	b2f4      	uxtb	r4, r6
        int d = (n >> sh) & 0xf;
    6c02:	f003 030f 	and.w	r3, r3, #15
            buf[i++] = d > 9 ? 'A' + d - 10 : '0' + d;
    6c06:	b2da      	uxtb	r2, r3
    6c08:	b2e9      	uxtb	r1, r5
    6c0a:	f88d 702c 	strb.w	r7, [sp, #44]	; 0x2c
    6c0e:	f104 0730 	add.w	r7, r4, #48	; 0x30
    6c12:	3437      	adds	r4, #55	; 0x37
    6c14:	2e09      	cmp	r6, #9
    6c16:	bfd8      	it	le
    6c18:	463c      	movle	r4, r7
    6c1a:	f101 0e30 	add.w	lr, r1, #48	; 0x30
    6c1e:	f102 0730 	add.w	r7, r2, #48	; 0x30
    6c22:	3137      	adds	r1, #55	; 0x37
    6c24:	3237      	adds	r2, #55	; 0x37
    6c26:	2d09      	cmp	r5, #9
    6c28:	bfd8      	it	le
    6c2a:	4671      	movle	r1, lr
    6c2c:	2b09      	cmp	r3, #9
    6c2e:	bfd4      	ite	le
    6c30:	463b      	movle	r3, r7
    6c32:	4613      	movgt	r3, r2
    6c34:	f88d 102e 	strb.w	r1, [sp, #46]	; 0x2e
    6c38:	f88d 302f 	strb.w	r3, [sp, #47]	; 0x2f
    6c3c:	f88d 8023 	strb.w	r8, [sp, #35]	; 0x23
    6c40:	f88d c029 	strb.w	ip, [sp, #41]	; 0x29
    6c44:	f88d 402d 	strb.w	r4, [sp, #45]	; 0x2d
    6c48:	f10d 030f 	add.w	r3, sp, #15
    6c4c:	f10d 012f 	add.w	r1, sp, #47	; 0x2f
        *serNumDescPtr++ = serial_number[i];
    6c50:	f813 2f01 	ldrb.w	r2, [r3, #1]!
    6c54:	f820 2f02 	strh.w	r2, [r0, #2]!
    for (int i = 0; i < SERIAL_NUMBER_LENGTH; i++) {
    6c58:	428b      	cmp	r3, r1
    6c5a:	d1f9      	bne.n	6c50 <_ZN9ClearCore10UsbManager10InitializeEv+0x390>
	((Port *)hw)->Group[submodule_index].DIRTGL.reg = PORT_DIR_DIR(mask);
}

static inline void hri_port_set_DIR_reg(const void *const hw, uint8_t submodule_index, hri_port_dir_reg_t mask)
{
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
    6c5c:	4b2a      	ldr	r3, [pc, #168]	; (6d08 <_ZN9ClearCore10UsbManager10InitializeEv+0x448>)
  {
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
  else
  {
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    6c5e:	4a2b      	ldr	r2, [pc, #172]	; (6d0c <_ZN9ClearCore10UsbManager10InitializeEv+0x44c>)

static inline void hri_port_write_WRCONFIG_reg(const void *const hw, uint8_t submodule_index,
                                               hri_port_wrconfig_reg_t data)
{
	PORT_CRITICAL_SECTION_ENTER();
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
    6c60:	4f2b      	ldr	r7, [pc, #172]	; (6d10 <_ZN9ClearCore10UsbManager10InitializeEv+0x450>)
    6c62:	4d2c      	ldr	r5, [pc, #176]	; (6d14 <_ZN9ClearCore10UsbManager10InitializeEv+0x454>)
    usbdc_init(ctrl_buffer);
    6c64:	482c      	ldr	r0, [pc, #176]	; (6d18 <_ZN9ClearCore10UsbManager10InitializeEv+0x458>)
    6c66:	2180      	movs	r1, #128	; 0x80
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
    6c68:	f04f 7680 	mov.w	r6, #16777216	; 0x1000000
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
    6c6c:	f04f 4480 	mov.w	r4, #1073741824	; 0x40000000
    6c70:	f882 1350 	strb.w	r1, [r2, #848]	; 0x350
    6c74:	f882 1351 	strb.w	r1, [r2, #849]	; 0x351
    6c78:	f882 1352 	strb.w	r1, [r2, #850]	; 0x352
    6c7c:	f882 1353 	strb.w	r1, [r2, #851]	; 0x353
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
    6c80:	609e      	str	r6, [r3, #8]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
    6c82:	629c      	str	r4, [r3, #40]	; 0x28
    6c84:	629f      	str	r7, [r3, #40]	; 0x28
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
    6c86:	615e      	str	r6, [r3, #20]
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg &= ~PORT_PINCFG_PULLEN;
    6c88:	f893 2058 	ldrb.w	r2, [r3, #88]	; 0x58
    6c8c:	f002 02fb 	and.w	r2, r2, #251	; 0xfb
    6c90:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
    6c94:	f893 2058 	ldrb.w	r2, [r3, #88]	; 0x58
	tmp &= ~PORT_PINCFG_PMUXEN;
    6c98:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
    6c9c:	f042 0201 	orr.w	r2, r2, #1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
    6ca0:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
    6ca4:	f893 203c 	ldrb.w	r2, [r3, #60]	; 0x3c
	tmp &= ~PORT_PMUX_PMUXE_Msk;
    6ca8:	f002 02f0 	and.w	r2, r2, #240	; 0xf0
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
    6cac:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
	tmp |= PORT_PMUX_PMUXE(data);
    6cb0:	f042 0207 	orr.w	r2, r2, #7
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
    6cb4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
    6cb8:	6099      	str	r1, [r3, #8]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
    6cba:	629c      	str	r4, [r3, #40]	; 0x28
    6cbc:	629d      	str	r5, [r3, #40]	; 0x28
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
    6cbe:	6159      	str	r1, [r3, #20]
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg &= ~PORT_PINCFG_PULLEN;
    6cc0:	f893 2059 	ldrb.w	r2, [r3, #89]	; 0x59
    6cc4:	f002 02fb 	and.w	r2, r2, #251	; 0xfb
    6cc8:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
    6ccc:	f893 2059 	ldrb.w	r2, [r3, #89]	; 0x59
	tmp &= ~PORT_PINCFG_PMUXEN;
    6cd0:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
    6cd4:	f042 0201 	orr.w	r2, r2, #1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
    6cd8:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
    6cdc:	f893 203c 	ldrb.w	r2, [r3, #60]	; 0x3c
	tmp &= ~PORT_PMUX_PMUXO_Msk;
    6ce0:	f002 020f 	and.w	r2, r2, #15
	tmp |= PORT_PMUX_PMUXO(data);
    6ce4:	f042 0270 	orr.w	r2, r2, #112	; 0x70
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
    6ce8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    6cec:	f005 fe52 	bl	c994 <usbdc_init>
    cdcdf_acm_init();
    6cf0:	f005 fb0a 	bl	c308 <cdcdf_acm_init>
    usbdc_start(single_desc);
    6cf4:	4809      	ldr	r0, [pc, #36]	; (6d1c <_ZN9ClearCore10UsbManager10InitializeEv+0x45c>)
    6cf6:	f005 fe7b 	bl	c9f0 <usbdc_start>
    usbdc_attach();
    6cfa:	f005 fe91 	bl	ca20 <usbdc_attach>
}
    6cfe:	2001      	movs	r0, #1
    6d00:	b00c      	add	sp, #48	; 0x30
    6d02:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    6d06:	bf00      	nop
    6d08:	41008000 	.word	0x41008000
    6d0c:	e000e100 	.word	0xe000e100
    6d10:	c0000100 	.word	0xc0000100
    6d14:	c0000200 	.word	0xc0000200
    6d18:	20000ae0 	.word	0x20000ae0
    6d1c:	20000000 	.word	0x20000000

00006d20 <_ZN9ClearCore10UsbManager5SpeedEm>:
}
    6d20:	2001      	movs	r0, #1
    6d22:	4770      	bx	lr

00006d24 <_ZN9ClearCore10UsbManager5SpeedEv>:
uint32_t UsbManager::Speed() {
    6d24:	b508      	push	{r3, lr}
    return cdcdf_acm_get_line_coding()->dwDTERate;
    6d26:	f005 fb6f 	bl	c408 <cdcdf_acm_get_line_coding>
}
    6d2a:	6800      	ldr	r0, [r0, #0]
    6d2c:	bd08      	pop	{r3, pc}
    6d2e:	bf00      	nop

00006d30 <_ZN9ClearCore10UsbManager8PortOpenEv>:
void UsbManager::PortOpen() {
    6d30:	b538      	push	{r3, r4, r5, lr}
    if (m_portOpen) {
    6d32:	f890 311c 	ldrb.w	r3, [r0, #284]	; 0x11c
    6d36:	b103      	cbz	r3, 6d3a <_ZN9ClearCore10UsbManager8PortOpenEv+0xa>
    6d38:	bd38      	pop	{r3, r4, r5, pc}
    6d3a:	4604      	mov	r4, r0
    m_portOpen = true;
    6d3c:	2501      	movs	r5, #1
    cdcdf_acm_register_callback(CDCDF_ACM_CB_READ, (FUNC_PTR)RxComplete);
    6d3e:	4618      	mov	r0, r3
    m_portOpen = true;
    6d40:	f884 511c 	strb.w	r5, [r4, #284]	; 0x11c
    cdcdf_acm_register_callback(CDCDF_ACM_CB_READ, (FUNC_PTR)RxComplete);
    6d44:	4906      	ldr	r1, [pc, #24]	; (6d60 <_ZN9ClearCore10UsbManager8PortOpenEv+0x30>)
    6d46:	f005 fb31 	bl	c3ac <cdcdf_acm_register_callback>
    cdcdf_acm_register_callback(CDCDF_ACM_CB_WRITE, (FUNC_PTR)TxComplete);
    6d4a:	4628      	mov	r0, r5
    6d4c:	4905      	ldr	r1, [pc, #20]	; (6d64 <_ZN9ClearCore10UsbManager8PortOpenEv+0x34>)
    6d4e:	f005 fb2d 	bl	c3ac <cdcdf_acm_register_callback>
    cdcdf_acm_read(m_usbReadBuf, sizeof(m_usbReadBuf));
    6d52:	f104 0080 	add.w	r0, r4, #128	; 0x80
    6d56:	2140      	movs	r1, #64	; 0x40
}
    6d58:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    cdcdf_acm_read(m_usbReadBuf, sizeof(m_usbReadBuf));
    6d5c:	f005 baf2 	b.w	c344 <cdcdf_acm_read>
    6d60:	00006251 	.word	0x00006251
    6d64:	00006489 	.word	0x00006489

00006d68 <_ZN9ClearCore10UsbManager10FlushInputEv>:
void UsbManager::FlushInput() {
    6d68:	4603      	mov	r3, r0
    m_inHead = 0;
    6d6a:	2200      	movs	r2, #0
    6d6c:	f8c0 2100 	str.w	r2, [r0, #256]	; 0x100
    m_readBufAvail = 0;
    6d70:	f8c0 2118 	str.w	r2, [r0, #280]	; 0x118
    m_inTail = 0;
    6d74:	f8c0 2104 	str.w	r2, [r0, #260]	; 0x104
    cdcdf_acm_read(m_usbReadBuf, sizeof(m_usbReadBuf));
    6d78:	2140      	movs	r1, #64	; 0x40
    6d7a:	3080      	adds	r0, #128	; 0x80
    m_readActive = false;
    6d7c:	f883 2111 	strb.w	r2, [r3, #273]	; 0x111
    cdcdf_acm_read(m_usbReadBuf, sizeof(m_usbReadBuf));
    6d80:	f005 bae0 	b.w	c344 <cdcdf_acm_read>

00006d84 <_ZN9ClearCore10UsbManager18WaitForWriteFinishEv>:
void UsbManager::WaitForWriteFinish() {
    6d84:	b538      	push	{r3, r4, r5, lr}
    6d86:	4604      	mov	r4, r0
           USB->DEVICE.FSMSTATUS.bit.FSMSTATE == USB_FSMSTATUS_FSMSTATE_ON;
    6d88:	f04f 4582 	mov.w	r5, #1090519040	; 0x41000000
    while (m_outHead != m_outTail && Connected()) {
    6d8c:	f8d4 2108 	ldr.w	r2, [r4, #264]	; 0x108
    6d90:	f8d4 310c 	ldr.w	r3, [r4, #268]	; 0x10c
    6d94:	429a      	cmp	r2, r3
    6d96:	d100      	bne.n	6d9a <_ZN9ClearCore10UsbManager18WaitForWriteFinishEv+0x16>
    6d98:	bd38      	pop	{r3, r4, r5, pc}
    return cdcdf_acm_is_enabled() && LineState().rs232.DTR &&
    6d9a:	f005 fb2f 	bl	c3fc <cdcdf_acm_is_enabled>
    6d9e:	2800      	cmp	r0, #0
    6da0:	d0fa      	beq.n	6d98 <_ZN9ClearCore10UsbManager18WaitForWriteFinishEv+0x14>
    6da2:	f894 3112 	ldrb.w	r3, [r4, #274]	; 0x112
    6da6:	07db      	lsls	r3, r3, #31
    6da8:	d5f6      	bpl.n	6d98 <_ZN9ClearCore10UsbManager18WaitForWriteFinishEv+0x14>
           USB->DEVICE.FSMSTATUS.bit.FSMSTATE == USB_FSMSTATUS_FSMSTATE_ON;
    6daa:	7b6b      	ldrb	r3, [r5, #13]
    6dac:	f003 037f 	and.w	r3, r3, #127	; 0x7f
    return cdcdf_acm_is_enabled() && LineState().rs232.DTR &&
    6db0:	2b02      	cmp	r3, #2
    6db2:	d0eb      	beq.n	6d8c <_ZN9ClearCore10UsbManager18WaitForWriteFinishEv+0x8>
    6db4:	bd38      	pop	{r3, r4, r5, pc}
    6db6:	bf00      	nop

00006db8 <_ZN9ClearCore10UsbManagercvbEv>:
UsbManager::operator bool() {
    6db8:	b538      	push	{r3, r4, r5, lr}
    6dba:	4605      	mov	r5, r0
    return cdcdf_acm_is_enabled() && LineState().rs232.DTR &&
    6dbc:	f005 fb1e 	bl	c3fc <cdcdf_acm_is_enabled>
    6dc0:	4604      	mov	r4, r0
    6dc2:	b170      	cbz	r0, 6de2 <_ZN9ClearCore10UsbManagercvbEv+0x2a>
    6dc4:	f895 4112 	ldrb.w	r4, [r5, #274]	; 0x112
    6dc8:	f014 0401 	ands.w	r4, r4, #1
    6dcc:	d009      	beq.n	6de2 <_ZN9ClearCore10UsbManagercvbEv+0x2a>
           USB->DEVICE.FSMSTATUS.bit.FSMSTATE == USB_FSMSTATUS_FSMSTATE_ON;
    6dce:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
    6dd2:	7b5c      	ldrb	r4, [r3, #13]
    6dd4:	f004 047f 	and.w	r4, r4, #127	; 0x7f
    return cdcdf_acm_is_enabled() && LineState().rs232.DTR &&
    6dd8:	f1a4 0402 	sub.w	r4, r4, #2
    6ddc:	fab4 f484 	clz	r4, r4
    6de0:	0964      	lsrs	r4, r4, #5
    \brief Blocks operations for ms milliseconds

    \param[in] ms Time in milliseconds to delay
**/
inline void Delay_ms(uint32_t ms)  {
    return Delay_cycles(static_cast<uint64_t>(ms) * CYCLES_PER_MILLISECOND);
    6de2:	4803      	ldr	r0, [pc, #12]	; (6df0 <_ZN9ClearCore10UsbManagercvbEv+0x38>)
    6de4:	2100      	movs	r1, #0
    6de6:	f002 ffeb 	bl	9dc0 <Delay_cycles>
}
    6dea:	4620      	mov	r0, r4
    6dec:	bd38      	pop	{r3, r4, r5, pc}
    6dee:	bf00      	nop
    6df0:	00124f80 	.word	0x00124f80

00006df4 <_ZN9ClearCore10UsbManager7CharGetEv>:
    uint32_t head = m_inHead;
    6df4:	f8d0 3100 	ldr.w	r3, [r0, #256]	; 0x100
    if (m_inTail == head) {
    6df8:	f8d0 2104 	ldr.w	r2, [r0, #260]	; 0x104
    6dfc:	4293      	cmp	r3, r2
    6dfe:	f000 8116 	beq.w	702e <_ZN9ClearCore10UsbManager7CharGetEv+0x23a>
int16_t UsbManager::CharGet() {
    6e02:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    m_inHead = (head + 1) & (sizeof(m_bufferIn) - 1);
    6e06:	1c5a      	adds	r2, r3, #1
    6e08:	f002 023f 	and.w	r2, r2, #63	; 0x3f
    uint8_t retVal = m_bufferIn[head];
    6e0c:	5cc4      	ldrb	r4, [r0, r3]
    m_inHead = (head + 1) & (sizeof(m_bufferIn) - 1);
    6e0e:	f8c0 2100 	str.w	r2, [r0, #256]	; 0x100
int16_t UsbManager::CharGet() {
    6e12:	b083      	sub	sp, #12
  __ASM volatile ("cpsid i" : : : "memory");
    6e14:	b672      	cpsid	i
    int32_t difference = m_inTail - m_inHead;
    6e16:	f8d0 3104 	ldr.w	r3, [r0, #260]	; 0x104
    6e1a:	f8d0 2100 	ldr.w	r2, [r0, #256]	; 0x100
    if (m_readBufAvail && space) {
    6e1e:	f8d0 5118 	ldr.w	r5, [r0, #280]	; 0x118
    if (difference < 0) {
    6e22:	1a9b      	subs	r3, r3, r2
        return sizeof(m_bufferIn) + difference;
    6e24:	bf48      	it	mi
    6e26:	3340      	addmi	r3, #64	; 0x40
    if (m_readBufAvail && space) {
    6e28:	2d00      	cmp	r5, #0
    6e2a:	f000 80e3 	beq.w	6ff4 <_ZN9ClearCore10UsbManager7CharGetEv+0x200>
    6e2e:	f1d3 033f 	rsbs	r3, r3, #63	; 0x3f
    6e32:	f000 80df 	beq.w	6ff4 <_ZN9ClearCore10UsbManager7CharGetEv+0x200>
        uint32_t tail = m_inTail;
    6e36:	f8d0 6104 	ldr.w	r6, [r0, #260]	; 0x104
        uint8_t *inPtr = m_readBufPtr;
    6e3a:	f8d0 2114 	ldr.w	r2, [r0, #276]	; 0x114
    6e3e:	42ab      	cmp	r3, r5
    6e40:	bf28      	it	cs
    6e42:	462b      	movcs	r3, r5
        uint32_t countTilWrap = sizeof(m_bufferIn) - tail;
    6e44:	f1c6 0140 	rsb	r1, r6, #64	; 0x40
    6e48:	4299      	cmp	r1, r3
    6e4a:	bf28      	it	cs
    6e4c:	4619      	movcs	r1, r3
        uint8_t *outPtr = &m_bufferIn[tail];
    6e4e:	1987      	adds	r7, r0, r6
        for (uint32_t i = 0; i < countTilWrap; i++) {
    6e50:	2900      	cmp	r1, #0
    6e52:	f000 80f8 	beq.w	7046 <_ZN9ClearCore10UsbManager7CharGetEv+0x252>
    6e56:	1d35      	adds	r5, r6, #4
    6e58:	4405      	add	r5, r0
    6e5a:	f102 0e04 	add.w	lr, r2, #4
    6e5e:	4577      	cmp	r7, lr
    6e60:	bf38      	it	cc
    6e62:	42aa      	cmpcc	r2, r5
    6e64:	f0c0 80da 	bcc.w	701c <_ZN9ClearCore10UsbManager7CharGetEv+0x228>
    6e68:	290b      	cmp	r1, #11
    6e6a:	f240 80d7 	bls.w	701c <_ZN9ClearCore10UsbManager7CharGetEv+0x228>
    6e6e:	4255      	negs	r5, r2
    6e70:	f015 0503 	ands.w	r5, r5, #3
    6e74:	f000 80c3 	beq.w	6ffe <_ZN9ClearCore10UsbManager7CharGetEv+0x20a>
            *outPtr++ = *inPtr++;
    6e78:	f892 e000 	ldrb.w	lr, [r2]
    6e7c:	f800 e006 	strb.w	lr, [r0, r6]
    6e80:	2d01      	cmp	r5, #1
    6e82:	f107 0801 	add.w	r8, r7, #1
    6e86:	f102 0901 	add.w	r9, r2, #1
    6e8a:	f000 80ba 	beq.w	7002 <_ZN9ClearCore10UsbManager7CharGetEv+0x20e>
    6e8e:	f892 e001 	ldrb.w	lr, [r2, #1]
    6e92:	f887 e001 	strb.w	lr, [r7, #1]
    6e96:	2d02      	cmp	r5, #2
    6e98:	f107 0802 	add.w	r8, r7, #2
    6e9c:	f102 0902 	add.w	r9, r2, #2
    6ea0:	f000 80af 	beq.w	7002 <_ZN9ClearCore10UsbManager7CharGetEv+0x20e>
    6ea4:	f892 e002 	ldrb.w	lr, [r2, #2]
    6ea8:	f887 e002 	strb.w	lr, [r7, #2]
    6eac:	f107 0803 	add.w	r8, r7, #3
        for (uint32_t i = 0; i < countTilWrap; i++) {
    6eb0:	2703      	movs	r7, #3
            *outPtr++ = *inPtr++;
    6eb2:	f102 0903 	add.w	r9, r2, #3
        for (uint32_t i = 0; i < countTilWrap; i++) {
    6eb6:	9700      	str	r7, [sp, #0]
    6eb8:	eba1 0b05 	sub.w	fp, r1, r5
    6ebc:	f1ab 0704 	sub.w	r7, fp, #4
    6ec0:	08bf      	lsrs	r7, r7, #2
    6ec2:	eb06 0e05 	add.w	lr, r6, r5
    6ec6:	3701      	adds	r7, #1
    6ec8:	ea4f 0a87 	mov.w	sl, r7, lsl #2
    6ecc:	4486      	add	lr, r0
    6ece:	4415      	add	r5, r2
    6ed0:	f04f 0c00 	mov.w	ip, #0
    6ed4:	9401      	str	r4, [sp, #4]
    6ed6:	f10c 0c01 	add.w	ip, ip, #1
            *outPtr++ = *inPtr++;
    6eda:	f855 4b04 	ldr.w	r4, [r5], #4
    6ede:	f84e 4b04 	str.w	r4, [lr], #4
    6ee2:	4567      	cmp	r7, ip
    6ee4:	d8f7      	bhi.n	6ed6 <_ZN9ClearCore10UsbManager7CharGetEv+0xe2>
    6ee6:	9d00      	ldr	r5, [sp, #0]
    6ee8:	9c01      	ldr	r4, [sp, #4]
    6eea:	45d3      	cmp	fp, sl
    6eec:	4455      	add	r5, sl
    6eee:	eb08 0e0a 	add.w	lr, r8, sl
    6ef2:	eb09 0c0a 	add.w	ip, r9, sl
    6ef6:	f000 808c 	beq.w	7012 <_ZN9ClearCore10UsbManager7CharGetEv+0x21e>
    6efa:	f819 9027 	ldrb.w	r9, [r9, r7, lsl #2]
    6efe:	f808 9027 	strb.w	r9, [r8, r7, lsl #2]
        for (uint32_t i = 0; i < countTilWrap; i++) {
    6f02:	1c6f      	adds	r7, r5, #1
    6f04:	42b9      	cmp	r1, r7
    6f06:	f240 8084 	bls.w	7012 <_ZN9ClearCore10UsbManager7CharGetEv+0x21e>
    6f0a:	3502      	adds	r5, #2
            *outPtr++ = *inPtr++;
    6f0c:	f89c 7001 	ldrb.w	r7, [ip, #1]
    6f10:	f88e 7001 	strb.w	r7, [lr, #1]
        for (uint32_t i = 0; i < countTilWrap; i++) {
    6f14:	42a9      	cmp	r1, r5
    6f16:	d97c      	bls.n	7012 <_ZN9ClearCore10UsbManager7CharGetEv+0x21e>
            *outPtr++ = *inPtr++;
    6f18:	f89c 5002 	ldrb.w	r5, [ip, #2]
    6f1c:	f88e 5002 	strb.w	r5, [lr, #2]
    6f20:	1857      	adds	r7, r2, r1
    6f22:	f8d0 2114 	ldr.w	r2, [r0, #276]	; 0x114
    6f26:	f8d0 5118 	ldr.w	r5, [r0, #280]	; 0x118
        m_readBufPtr += countTilWrap;
    6f2a:	440a      	add	r2, r1
        m_readBufAvail -= countTilWrap;
    6f2c:	1a6d      	subs	r5, r5, r1
        if (count) {
    6f2e:	1a5b      	subs	r3, r3, r1
        m_readBufPtr += countTilWrap;
    6f30:	f8c0 2114 	str.w	r2, [r0, #276]	; 0x114
        m_readBufAvail -= countTilWrap;
    6f34:	f8c0 5118 	str.w	r5, [r0, #280]	; 0x118
        if (count) {
    6f38:	d065      	beq.n	7006 <_ZN9ClearCore10UsbManager7CharGetEv+0x212>
    6f3a:	1d01      	adds	r1, r0, #4
    6f3c:	1d3a      	adds	r2, r7, #4
    6f3e:	4290      	cmp	r0, r2
    6f40:	bf38      	it	cc
    6f42:	428f      	cmpcc	r7, r1
            outPtr = m_bufferIn;
    6f44:	4605      	mov	r5, r0
    6f46:	d375      	bcc.n	7034 <_ZN9ClearCore10UsbManager7CharGetEv+0x240>
    6f48:	2b0b      	cmp	r3, #11
    6f4a:	d973      	bls.n	7034 <_ZN9ClearCore10UsbManager7CharGetEv+0x240>
    6f4c:	4242      	negs	r2, r0
    6f4e:	f012 0203 	ands.w	r2, r2, #3
    6f52:	d060      	beq.n	7016 <_ZN9ClearCore10UsbManager7CharGetEv+0x222>
                *outPtr++ = *inPtr++;
    6f54:	7839      	ldrb	r1, [r7, #0]
    6f56:	7001      	strb	r1, [r0, #0]
    6f58:	2a01      	cmp	r2, #1
    6f5a:	f100 0501 	add.w	r5, r0, #1
    6f5e:	f107 0e01 	add.w	lr, r7, #1
    6f62:	d059      	beq.n	7018 <_ZN9ClearCore10UsbManager7CharGetEv+0x224>
    6f64:	7879      	ldrb	r1, [r7, #1]
    6f66:	7041      	strb	r1, [r0, #1]
    6f68:	2a02      	cmp	r2, #2
    6f6a:	f100 0502 	add.w	r5, r0, #2
    6f6e:	f107 0e02 	add.w	lr, r7, #2
    6f72:	d051      	beq.n	7018 <_ZN9ClearCore10UsbManager7CharGetEv+0x224>
    6f74:	78b9      	ldrb	r1, [r7, #2]
    6f76:	7081      	strb	r1, [r0, #2]
    6f78:	1cc5      	adds	r5, r0, #3
    6f7a:	f107 0e03 	add.w	lr, r7, #3
            for (uint32_t i = 0; i < count; i++) {
    6f7e:	f04f 0803 	mov.w	r8, #3
    6f82:	eba3 0c02 	sub.w	ip, r3, r2
    6f86:	f1ac 0104 	sub.w	r1, ip, #4
    6f8a:	0889      	lsrs	r1, r1, #2
    6f8c:	1c4e      	adds	r6, r1, #1
    6f8e:	4417      	add	r7, r2
    6f90:	ea4f 0986 	mov.w	r9, r6, lsl #2
    6f94:	4402      	add	r2, r0
    6f96:	2100      	movs	r1, #0
    6f98:	3101      	adds	r1, #1
                *outPtr++ = *inPtr++;
    6f9a:	f857 ab04 	ldr.w	sl, [r7], #4
    6f9e:	f842 ab04 	str.w	sl, [r2], #4
    6fa2:	428e      	cmp	r6, r1
    6fa4:	d8f8      	bhi.n	6f98 <_ZN9ClearCore10UsbManager7CharGetEv+0x1a4>
    6fa6:	45cc      	cmp	ip, r9
    6fa8:	eb08 0209 	add.w	r2, r8, r9
    6fac:	eb05 0109 	add.w	r1, r5, r9
    6fb0:	eb0e 0709 	add.w	r7, lr, r9
    6fb4:	d00d      	beq.n	6fd2 <_ZN9ClearCore10UsbManager7CharGetEv+0x1de>
    6fb6:	f81e e026 	ldrb.w	lr, [lr, r6, lsl #2]
    6fba:	f805 e026 	strb.w	lr, [r5, r6, lsl #2]
            for (uint32_t i = 0; i < count; i++) {
    6fbe:	1c55      	adds	r5, r2, #1
    6fc0:	42ab      	cmp	r3, r5
    6fc2:	d906      	bls.n	6fd2 <_ZN9ClearCore10UsbManager7CharGetEv+0x1de>
    6fc4:	3202      	adds	r2, #2
                *outPtr++ = *inPtr++;
    6fc6:	787d      	ldrb	r5, [r7, #1]
    6fc8:	704d      	strb	r5, [r1, #1]
            for (uint32_t i = 0; i < count; i++) {
    6fca:	4293      	cmp	r3, r2
    6fcc:	d901      	bls.n	6fd2 <_ZN9ClearCore10UsbManager7CharGetEv+0x1de>
                *outPtr++ = *inPtr++;
    6fce:	78ba      	ldrb	r2, [r7, #2]
    6fd0:	708a      	strb	r2, [r1, #2]
            m_readBufPtr += count;
    6fd2:	f8d0 2114 	ldr.w	r2, [r0, #276]	; 0x114
            m_readBufAvail -= count;
    6fd6:	f8d0 5118 	ldr.w	r5, [r0, #280]	; 0x118
            m_inTail = count;
    6fda:	f8c0 3104 	str.w	r3, [r0, #260]	; 0x104
            m_readBufPtr += count;
    6fde:	441a      	add	r2, r3
            m_readBufAvail -= count;
    6fe0:	1aed      	subs	r5, r5, r3
            m_readBufPtr += count;
    6fe2:	f8c0 2114 	str.w	r2, [r0, #276]	; 0x114
            m_readBufAvail -= count;
    6fe6:	f8c0 5118 	str.w	r5, [r0, #280]	; 0x118
        if (!m_readBufAvail) {
    6fea:	b91d      	cbnz	r5, 6ff4 <_ZN9ClearCore10UsbManager7CharGetEv+0x200>
            cdcdf_acm_read(m_usbReadBuf, sizeof(m_usbReadBuf));
    6fec:	3080      	adds	r0, #128	; 0x80
    6fee:	2140      	movs	r1, #64	; 0x40
    6ff0:	f005 f9a8 	bl	c344 <cdcdf_acm_read>
  __ASM volatile ("cpsie i" : : : "memory");
    6ff4:	b662      	cpsie	i
    return retVal;
    6ff6:	b220      	sxth	r0, r4
}
    6ff8:	b003      	add	sp, #12
    6ffa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        uint8_t *outPtr = &m_bufferIn[tail];
    6ffe:	46b8      	mov	r8, r7
        uint8_t *inPtr = m_readBufPtr;
    7000:	4691      	mov	r9, r2
        for (uint32_t i = 0; i < countTilWrap; i++) {
    7002:	9500      	str	r5, [sp, #0]
    7004:	e758      	b.n	6eb8 <_ZN9ClearCore10UsbManager7CharGetEv+0xc4>
            m_inTail = (tail + countTilWrap) & (sizeof(m_bufferIn) - 1);
    7006:	4431      	add	r1, r6
    7008:	f001 013f 	and.w	r1, r1, #63	; 0x3f
    700c:	f8c0 1104 	str.w	r1, [r0, #260]	; 0x104
    7010:	e7eb      	b.n	6fea <_ZN9ClearCore10UsbManager7CharGetEv+0x1f6>
    7012:	1857      	adds	r7, r2, r1
    7014:	e785      	b.n	6f22 <_ZN9ClearCore10UsbManager7CharGetEv+0x12e>
            outPtr = m_bufferIn;
    7016:	46be      	mov	lr, r7
            for (uint32_t i = 0; i < count; i++) {
    7018:	4690      	mov	r8, r2
    701a:	e7b2      	b.n	6f82 <_ZN9ClearCore10UsbManager7CharGetEv+0x18e>
    701c:	1e7d      	subs	r5, r7, #1
    701e:	1857      	adds	r7, r2, r1
            *outPtr++ = *inPtr++;
    7020:	f812 eb01 	ldrb.w	lr, [r2], #1
    7024:	f805 ef01 	strb.w	lr, [r5, #1]!
        for (uint32_t i = 0; i < countTilWrap; i++) {
    7028:	42ba      	cmp	r2, r7
    702a:	d1f9      	bne.n	7020 <_ZN9ClearCore10UsbManager7CharGetEv+0x22c>
    702c:	e779      	b.n	6f22 <_ZN9ClearCore10UsbManager7CharGetEv+0x12e>
        return -1;
    702e:	f04f 30ff 	mov.w	r0, #4294967295
    7032:	4770      	bx	lr
    7034:	1e42      	subs	r2, r0, #1
    7036:	18fd      	adds	r5, r7, r3
                *outPtr++ = *inPtr++;
    7038:	f817 1b01 	ldrb.w	r1, [r7], #1
    703c:	f802 1f01 	strb.w	r1, [r2, #1]!
            for (uint32_t i = 0; i < count; i++) {
    7040:	42bd      	cmp	r5, r7
    7042:	d1f9      	bne.n	7038 <_ZN9ClearCore10UsbManager7CharGetEv+0x244>
    7044:	e7c5      	b.n	6fd2 <_ZN9ClearCore10UsbManager7CharGetEv+0x1de>
        uint8_t *inPtr = m_readBufPtr;
    7046:	4617      	mov	r7, r2
    7048:	e76f      	b.n	6f2a <_ZN9ClearCore10UsbManager7CharGetEv+0x136>
    704a:	bf00      	nop

0000704c <_ZN9ClearCore10UsbManager8CharPeekEv>:
    if (m_inTail == m_inHead) {
    704c:	f8d0 2104 	ldr.w	r2, [r0, #260]	; 0x104
    7050:	f8d0 3100 	ldr.w	r3, [r0, #256]	; 0x100
    7054:	429a      	cmp	r2, r3
    return m_bufferIn[m_inHead];
    7056:	bf1a      	itte	ne
    7058:	f8d0 3100 	ldrne.w	r3, [r0, #256]	; 0x100
    705c:	5cc0      	ldrbne	r0, [r0, r3]
        return -1;
    705e:	f04f 30ff 	moveq.w	r0, #4294967295
}
    7062:	4770      	bx	lr

00007064 <_ZN9ClearCore10UsbManager8SendCharEh>:
bool UsbManager::SendChar(uint8_t charToSend) {
    7064:	b570      	push	{r4, r5, r6, lr}
    7066:	4604      	mov	r4, r0
    7068:	460e      	mov	r6, r1
           USB->DEVICE.FSMSTATUS.bit.FSMSTATE == USB_FSMSTATUS_FSMSTATE_ON;
    706a:	f04f 4582 	mov.w	r5, #1090519040	; 0x41000000
    return cdcdf_acm_is_enabled() && LineState().rs232.DTR &&
    706e:	f005 f9c5 	bl	c3fc <cdcdf_acm_is_enabled>
    7072:	b350      	cbz	r0, 70ca <_ZN9ClearCore10UsbManager8SendCharEh+0x66>
    7074:	f894 0112 	ldrb.w	r0, [r4, #274]	; 0x112
    7078:	f010 0001 	ands.w	r0, r0, #1
    707c:	d025      	beq.n	70ca <_ZN9ClearCore10UsbManager8SendCharEh+0x66>
           USB->DEVICE.FSMSTATUS.bit.FSMSTATE == USB_FSMSTATUS_FSMSTATE_ON;
    707e:	7b6b      	ldrb	r3, [r5, #13]
    7080:	f003 037f 	and.w	r3, r3, #127	; 0x7f
    return cdcdf_acm_is_enabled() && LineState().rs232.DTR &&
    7084:	2b02      	cmp	r3, #2
    7086:	d001      	beq.n	708c <_ZN9ClearCore10UsbManager8SendCharEh+0x28>
    return false;
    7088:	2000      	movs	r0, #0
    708a:	bd70      	pop	{r4, r5, r6, pc}
    while (Connected() && m_portOpen) {
    708c:	f894 011c 	ldrb.w	r0, [r4, #284]	; 0x11c
    7090:	b900      	cbnz	r0, 7094 <_ZN9ClearCore10UsbManager8SendCharEh+0x30>
    7092:	bd70      	pop	{r4, r5, r6, pc}
    int32_t difference = m_outHead - m_outTail - 1;
    7094:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
    7098:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
    709c:	1a9b      	subs	r3, r3, r2
    if (difference < 0) {
    709e:	1e5a      	subs	r2, r3, #1
    70a0:	d40e      	bmi.n	70c0 <_ZN9ClearCore10UsbManager8SendCharEh+0x5c>
        if (AvailableForWrite()) {
    70a2:	2a00      	cmp	r2, #0
    70a4:	d0e3      	beq.n	706e <_ZN9ClearCore10UsbManager8SendCharEh+0xa>
            m_bufferOut[m_outTail] = charToSend;
    70a6:	f8d4 310c 	ldr.w	r3, [r4, #268]	; 0x10c
    70aa:	4423      	add	r3, r4
    70ac:	f883 6040 	strb.w	r6, [r3, #64]	; 0x40
            m_outTail = (m_outTail + 1) & (sizeof(m_bufferOut) - 1);
    70b0:	f8d4 310c 	ldr.w	r3, [r4, #268]	; 0x10c
    70b4:	3301      	adds	r3, #1
    70b6:	f003 033f 	and.w	r3, r3, #63	; 0x3f
    70ba:	f8c4 310c 	str.w	r3, [r4, #268]	; 0x10c
            return true;
    70be:	bd70      	pop	{r4, r5, r6, pc}
        difference += sizeof(m_bufferOut);
    70c0:	f103 023f 	add.w	r2, r3, #63	; 0x3f
        if (AvailableForWrite()) {
    70c4:	2a00      	cmp	r2, #0
    70c6:	d0d2      	beq.n	706e <_ZN9ClearCore10UsbManager8SendCharEh+0xa>
    70c8:	e7ed      	b.n	70a6 <_ZN9ClearCore10UsbManager8SendCharEh+0x42>
}
    70ca:	bd70      	pop	{r4, r5, r6, pc}

000070cc <_ZN9ClearCore10UsbManager16AvailableForReadEv>:
    int32_t difference = m_inTail - m_inHead;
    70cc:	f8d0 3104 	ldr.w	r3, [r0, #260]	; 0x104
    70d0:	f8d0 0100 	ldr.w	r0, [r0, #256]	; 0x100
    if (difference < 0) {
    70d4:	1a18      	subs	r0, r3, r0
        return sizeof(m_bufferIn) + difference;
    70d6:	bf48      	it	mi
    70d8:	3040      	addmi	r0, #64	; 0x40
}
    70da:	4770      	bx	lr

000070dc <_ZN9ClearCore10UsbManager17AvailableForWriteEv>:
    int32_t difference = m_outHead - m_outTail - 1;
    70dc:	f8d0 3108 	ldr.w	r3, [r0, #264]	; 0x108
    70e0:	f8d0 210c 	ldr.w	r2, [r0, #268]	; 0x10c
    70e4:	1a9b      	subs	r3, r3, r2
    if (difference < 0) {
    70e6:	1e58      	subs	r0, r3, #1
        difference += sizeof(m_bufferOut);
    70e8:	bf48      	it	mi
    70ea:	f103 003f 	addmi.w	r0, r3, #63	; 0x3f
}
    70ee:	4770      	bx	lr

000070f0 <_ZN9ClearCore10UsbManager6TxPumpEv>:
void UsbManager::TxPump() {
    70f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    if (atomic_test_and_set_acqrel(&m_sendActive)) {
    70f4:	f500 7388 	add.w	r3, r0, #272	; 0x110
void UsbManager::TxPump() {
    70f8:	b083      	sub	sp, #12
    if (atomic_test_and_set_acqrel(&m_sendActive)) {
    70fa:	f04f 0101 	mov.w	r1, #1
    70fe:	f3bf 8f5b 	dmb	ish
    7102:	e8d3 2f4f 	ldrexb	r2, [r3]
    7106:	e8c3 1f44 	strexb	r4, r1, [r3]
    710a:	2c00      	cmp	r4, #0
    710c:	d1f9      	bne.n	7102 <_ZN9ClearCore10UsbManager6TxPumpEv+0x12>
    710e:	f3bf 8f5b 	dmb	ish
    7112:	f012 0fff 	tst.w	r2, #255	; 0xff
    7116:	f040 80e4 	bne.w	72e2 <_ZN9ClearCore10UsbManager6TxPumpEv+0x1f2>
    uint32_t head = m_outHead;
    711a:	f8d0 6108 	ldr.w	r6, [r0, #264]	; 0x108
    uint32_t tail = m_outTail;
    711e:	f8d0 110c 	ldr.w	r1, [r0, #268]	; 0x10c
    if (head == tail) {
    7122:	428e      	cmp	r6, r1
    7124:	f000 81b6 	beq.w	7494 <_ZN9ClearCore10UsbManager6TxPumpEv+0x3a4>
    uint8_t *inPtr = m_bufferOut + head, *outPtr = m_usbWriteBuf;
    7128:	f100 0340 	add.w	r3, r0, #64	; 0x40
    712c:	eb03 0706 	add.w	r7, r3, r6
    7130:	f100 05c0 	add.w	r5, r0, #192	; 0xc0
    if (head < tail) {
    7134:	f0c0 80d8 	bcc.w	72e8 <_ZN9ClearCore10UsbManager6TxPumpEv+0x1f8>
        uint32_t countTilWrap = sizeof(m_bufferOut) - head;
    7138:	f1c6 0240 	rsb	r2, r6, #64	; 0x40
        count = min(count, countTilWrap + tail);
    713c:	4411      	add	r1, r2
    713e:	2940      	cmp	r1, #64	; 0x40
    7140:	bf28      	it	cs
    7142:	2140      	movcs	r1, #64	; 0x40
    7144:	428a      	cmp	r2, r1
    7146:	bf28      	it	cs
    7148:	460a      	movcs	r2, r1
        for (uint32_t iChar = 0; iChar < loopEnd; iChar++) {
    714a:	2a00      	cmp	r2, #0
    714c:	f000 81c7 	beq.w	74de <_ZN9ClearCore10UsbManager6TxPumpEv+0x3ee>
    7150:	f106 0e40 	add.w	lr, r6, #64	; 0x40
    7154:	f106 0444 	add.w	r4, r6, #68	; 0x44
    7158:	eb00 080e 	add.w	r8, r0, lr
    715c:	4404      	add	r4, r0
    715e:	f100 0cc4 	add.w	ip, r0, #196	; 0xc4
    7162:	45e0      	cmp	r8, ip
    7164:	bf38      	it	cc
    7166:	42a5      	cmpcc	r5, r4
    7168:	f0c0 81ae 	bcc.w	74c8 <_ZN9ClearCore10UsbManager6TxPumpEv+0x3d8>
    716c:	2a0b      	cmp	r2, #11
    716e:	f240 81ab 	bls.w	74c8 <_ZN9ClearCore10UsbManager6TxPumpEv+0x3d8>
    7172:	426c      	negs	r4, r5
    7174:	f014 0403 	ands.w	r4, r4, #3
    7178:	f000 817f 	beq.w	747a <_ZN9ClearCore10UsbManager6TxPumpEv+0x38a>
            *outPtr++ = *inPtr++;
    717c:	5d9e      	ldrb	r6, [r3, r6]
    717e:	f880 60c0 	strb.w	r6, [r0, #192]	; 0xc0
    7182:	2c01      	cmp	r4, #1
    7184:	f100 0cc1 	add.w	ip, r0, #193	; 0xc1
    7188:	f107 0801 	add.w	r8, r7, #1
    718c:	f000 817b 	beq.w	7486 <_ZN9ClearCore10UsbManager6TxPumpEv+0x396>
    7190:	787e      	ldrb	r6, [r7, #1]
    7192:	f880 60c1 	strb.w	r6, [r0, #193]	; 0xc1
    7196:	2c02      	cmp	r4, #2
    7198:	f100 0cc2 	add.w	ip, r0, #194	; 0xc2
    719c:	f107 0802 	add.w	r8, r7, #2
    71a0:	f000 8171 	beq.w	7486 <_ZN9ClearCore10UsbManager6TxPumpEv+0x396>
    71a4:	78be      	ldrb	r6, [r7, #2]
    71a6:	f880 60c2 	strb.w	r6, [r0, #194]	; 0xc2
        for (uint32_t iChar = 0; iChar < loopEnd; iChar++) {
    71aa:	2603      	movs	r6, #3
            *outPtr++ = *inPtr++;
    71ac:	f107 0803 	add.w	r8, r7, #3
    71b0:	f100 0cc3 	add.w	ip, r0, #195	; 0xc3
        for (uint32_t iChar = 0; iChar < loopEnd; iChar++) {
    71b4:	9601      	str	r6, [sp, #4]
    71b6:	eba2 0b04 	sub.w	fp, r2, r4
    71ba:	f1ab 0704 	sub.w	r7, fp, #4
    71be:	08bf      	lsrs	r7, r7, #2
    71c0:	eb0e 0604 	add.w	r6, lr, r4
    71c4:	3701      	adds	r7, #1
    71c6:	34c0      	adds	r4, #192	; 0xc0
    71c8:	4406      	add	r6, r0
    71ca:	4404      	add	r4, r0
    71cc:	ea4f 0987 	mov.w	r9, r7, lsl #2
    uint8_t *inPtr = m_bufferOut + head, *outPtr = m_usbWriteBuf;
    71d0:	f04f 0e00 	mov.w	lr, #0
    71d4:	f10e 0e01 	add.w	lr, lr, #1
            *outPtr++ = *inPtr++;
    71d8:	f856 ab04 	ldr.w	sl, [r6], #4
    71dc:	f844 ab04 	str.w	sl, [r4], #4
    71e0:	45be      	cmp	lr, r7
    71e2:	d3f7      	bcc.n	71d4 <_ZN9ClearCore10UsbManager6TxPumpEv+0xe4>
    71e4:	9c01      	ldr	r4, [sp, #4]
    71e6:	45cb      	cmp	fp, r9
    71e8:	444c      	add	r4, r9
    71ea:	eb08 0e09 	add.w	lr, r8, r9
    71ee:	eb0c 0609 	add.w	r6, ip, r9
    71f2:	d00f      	beq.n	7214 <_ZN9ClearCore10UsbManager6TxPumpEv+0x124>
    71f4:	f818 8027 	ldrb.w	r8, [r8, r7, lsl #2]
    71f8:	f80c 8027 	strb.w	r8, [ip, r7, lsl #2]
        for (uint32_t iChar = 0; iChar < loopEnd; iChar++) {
    71fc:	1c67      	adds	r7, r4, #1
    71fe:	42ba      	cmp	r2, r7
    7200:	d908      	bls.n	7214 <_ZN9ClearCore10UsbManager6TxPumpEv+0x124>
    7202:	3402      	adds	r4, #2
            *outPtr++ = *inPtr++;
    7204:	f89e 7001 	ldrb.w	r7, [lr, #1]
    7208:	7077      	strb	r7, [r6, #1]
        for (uint32_t iChar = 0; iChar < loopEnd; iChar++) {
    720a:	42a2      	cmp	r2, r4
    720c:	d902      	bls.n	7214 <_ZN9ClearCore10UsbManager6TxPumpEv+0x124>
            *outPtr++ = *inPtr++;
    720e:	f89e 4002 	ldrb.w	r4, [lr, #2]
    7212:	70b4      	strb	r4, [r6, #2]
    7214:	18ac      	adds	r4, r5, r2
        for (uint32_t iChar = 0; iChar < loopEnd; iChar++) {
    7216:	1a8a      	subs	r2, r1, r2
    7218:	f000 811a 	beq.w	7450 <_ZN9ClearCore10UsbManager6TxPumpEv+0x360>
    721c:	1d26      	adds	r6, r4, #4
    721e:	f100 0744 	add.w	r7, r0, #68	; 0x44
    7222:	42bc      	cmp	r4, r7
    7224:	bf38      	it	cc
    7226:	42b3      	cmpcc	r3, r6
    7228:	f0c0 8145 	bcc.w	74b6 <_ZN9ClearCore10UsbManager6TxPumpEv+0x3c6>
    722c:	2a0b      	cmp	r2, #11
    722e:	f240 8142 	bls.w	74b6 <_ZN9ClearCore10UsbManager6TxPumpEv+0x3c6>
    7232:	425f      	negs	r7, r3
    7234:	f017 0703 	ands.w	r7, r7, #3
    7238:	f000 8129 	beq.w	748e <_ZN9ClearCore10UsbManager6TxPumpEv+0x39e>
            *outPtr++ = *inPtr++;
    723c:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
    7240:	7023      	strb	r3, [r4, #0]
    7242:	2f01      	cmp	r7, #1
    7244:	f104 0c01 	add.w	ip, r4, #1
    7248:	f100 0341 	add.w	r3, r0, #65	; 0x41
    724c:	f000 811d 	beq.w	748a <_ZN9ClearCore10UsbManager6TxPumpEv+0x39a>
    7250:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
    7254:	7063      	strb	r3, [r4, #1]
    7256:	2f02      	cmp	r7, #2
    7258:	f104 0c02 	add.w	ip, r4, #2
    725c:	f100 0342 	add.w	r3, r0, #66	; 0x42
    7260:	f000 8113 	beq.w	748a <_ZN9ClearCore10UsbManager6TxPumpEv+0x39a>
    7264:	f890 3042 	ldrb.w	r3, [r0, #66]	; 0x42
    7268:	70a3      	strb	r3, [r4, #2]
    726a:	f104 0c03 	add.w	ip, r4, #3
    726e:	f100 0343 	add.w	r3, r0, #67	; 0x43
        for (uint32_t iChar = 0; iChar < loopEnd; iChar++) {
    7272:	f04f 0903 	mov.w	r9, #3
    7276:	eba2 0807 	sub.w	r8, r2, r7
    727a:	f1a8 0e04 	sub.w	lr, r8, #4
    727e:	ea4f 0e9e 	mov.w	lr, lr, lsr #2
    7282:	f107 0640 	add.w	r6, r7, #64	; 0x40
    7286:	f10e 0e01 	add.w	lr, lr, #1
    728a:	443c      	add	r4, r7
    728c:	4406      	add	r6, r0
    728e:	ea4f 0a8e 	mov.w	sl, lr, lsl #2
    uint8_t *inPtr = m_bufferOut + head, *outPtr = m_usbWriteBuf;
    7292:	2700      	movs	r7, #0
    7294:	3701      	adds	r7, #1
            *outPtr++ = *inPtr++;
    7296:	f856 bb04 	ldr.w	fp, [r6], #4
    729a:	f844 bb04 	str.w	fp, [r4], #4
    729e:	45be      	cmp	lr, r7
    72a0:	d8f8      	bhi.n	7294 <_ZN9ClearCore10UsbManager6TxPumpEv+0x1a4>
    72a2:	45d0      	cmp	r8, sl
    72a4:	eb09 040a 	add.w	r4, r9, sl
    72a8:	eb03 070a 	add.w	r7, r3, sl
    72ac:	eb0c 060a 	add.w	r6, ip, sl
    72b0:	f000 80ce 	beq.w	7450 <_ZN9ClearCore10UsbManager6TxPumpEv+0x360>
    72b4:	f813 302e 	ldrb.w	r3, [r3, lr, lsl #2]
    72b8:	f80c 302e 	strb.w	r3, [ip, lr, lsl #2]
        for (uint32_t iChar = 0; iChar < loopEnd; iChar++) {
    72bc:	1c63      	adds	r3, r4, #1
    72be:	429a      	cmp	r2, r3
    72c0:	f240 80c6 	bls.w	7450 <_ZN9ClearCore10UsbManager6TxPumpEv+0x360>
    72c4:	3402      	adds	r4, #2
            *outPtr++ = *inPtr++;
    72c6:	787b      	ldrb	r3, [r7, #1]
    72c8:	7073      	strb	r3, [r6, #1]
        for (uint32_t iChar = 0; iChar < loopEnd; iChar++) {
    72ca:	42a2      	cmp	r2, r4
    72cc:	f240 80c0 	bls.w	7450 <_ZN9ClearCore10UsbManager6TxPumpEv+0x360>
            *outPtr++ = *inPtr++;
    72d0:	78bb      	ldrb	r3, [r7, #2]
    72d2:	70b3      	strb	r3, [r6, #2]
    72d4:	4604      	mov	r4, r0
    if (cdcdf_acm_write(m_usbWriteBuf, count)) {
    72d6:	4628      	mov	r0, r5
    72d8:	f005 f848 	bl	c36c <cdcdf_acm_write>
    72dc:	2800      	cmp	r0, #0
    72de:	f040 80be 	bne.w	745e <_ZN9ClearCore10UsbManager6TxPumpEv+0x36e>
}
    72e2:	b003      	add	sp, #12
    72e4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        count = min(count, tail - head);
    72e8:	1b89      	subs	r1, r1, r6
    72ea:	f106 0240 	add.w	r2, r6, #64	; 0x40
    72ee:	f106 0444 	add.w	r4, r6, #68	; 0x44
    72f2:	2940      	cmp	r1, #64	; 0x40
    72f4:	eb00 0c02 	add.w	ip, r0, r2
    72f8:	4404      	add	r4, r0
    72fa:	f100 0ec4 	add.w	lr, r0, #196	; 0xc4
    72fe:	bf28      	it	cs
    7300:	2140      	movcs	r1, #64	; 0x40
    7302:	45f4      	cmp	ip, lr
    7304:	bf38      	it	cc
    7306:	42a5      	cmpcc	r5, r4
    7308:	f0c0 80cb 	bcc.w	74a2 <_ZN9ClearCore10UsbManager6TxPumpEv+0x3b2>
    730c:	290b      	cmp	r1, #11
    730e:	f240 80c8 	bls.w	74a2 <_ZN9ClearCore10UsbManager6TxPumpEv+0x3b2>
    7312:	426c      	negs	r4, r5
    7314:	f014 0403 	ands.w	r4, r4, #3
    7318:	f000 80ab 	beq.w	7472 <_ZN9ClearCore10UsbManager6TxPumpEv+0x382>
            *outPtr++ = *inPtr++;
    731c:	5d9b      	ldrb	r3, [r3, r6]
    731e:	f880 30c0 	strb.w	r3, [r0, #192]	; 0xc0
    7322:	2c01      	cmp	r4, #1
    7324:	f100 06c1 	add.w	r6, r0, #193	; 0xc1
    7328:	f107 0e01 	add.w	lr, r7, #1
    732c:	f000 80a9 	beq.w	7482 <_ZN9ClearCore10UsbManager6TxPumpEv+0x392>
    7330:	787b      	ldrb	r3, [r7, #1]
    7332:	f880 30c1 	strb.w	r3, [r0, #193]	; 0xc1
    7336:	2c02      	cmp	r4, #2
    7338:	f100 06c2 	add.w	r6, r0, #194	; 0xc2
    733c:	f107 0e02 	add.w	lr, r7, #2
    7340:	f000 809f 	beq.w	7482 <_ZN9ClearCore10UsbManager6TxPumpEv+0x392>
    7344:	78bb      	ldrb	r3, [r7, #2]
    7346:	f880 30c2 	strb.w	r3, [r0, #194]	; 0xc2
    734a:	f107 0e03 	add.w	lr, r7, #3
    734e:	f100 06c3 	add.w	r6, r0, #195	; 0xc3
        for (uint32_t iChar = 0; iChar < count; iChar++) {
    7352:	f04f 0c03 	mov.w	ip, #3
    7356:	1913      	adds	r3, r2, r4
    7358:	4403      	add	r3, r0
    735a:	f104 08c0 	add.w	r8, r4, #192	; 0xc0
            *outPtr++ = *inPtr++;
    735e:	681a      	ldr	r2, [r3, #0]
    7360:	f840 2008 	str.w	r2, [r0, r8]
    7364:	1b0f      	subs	r7, r1, r4
    7366:	1f3a      	subs	r2, r7, #4
    7368:	0892      	lsrs	r2, r2, #2
    736a:	eb00 0408 	add.w	r4, r0, r8
    736e:	3201      	adds	r2, #1
    7370:	f8d3 8004 	ldr.w	r8, [r3, #4]
    7374:	f8c4 8004 	str.w	r8, [r4, #4]
    7378:	2a02      	cmp	r2, #2
    737a:	ea4f 0882 	mov.w	r8, r2, lsl #2
    737e:	d04f      	beq.n	7420 <_ZN9ClearCore10UsbManager6TxPumpEv+0x330>
    7380:	f8d3 9008 	ldr.w	r9, [r3, #8]
    7384:	f8c4 9008 	str.w	r9, [r4, #8]
    7388:	2a03      	cmp	r2, #3
    738a:	d049      	beq.n	7420 <_ZN9ClearCore10UsbManager6TxPumpEv+0x330>
    738c:	f8d3 900c 	ldr.w	r9, [r3, #12]
    7390:	f8c4 900c 	str.w	r9, [r4, #12]
    7394:	2a04      	cmp	r2, #4
    7396:	d043      	beq.n	7420 <_ZN9ClearCore10UsbManager6TxPumpEv+0x330>
    7398:	f8d3 9010 	ldr.w	r9, [r3, #16]
    739c:	f8c4 9010 	str.w	r9, [r4, #16]
    73a0:	2a05      	cmp	r2, #5
    73a2:	d03d      	beq.n	7420 <_ZN9ClearCore10UsbManager6TxPumpEv+0x330>
    73a4:	f8d3 9014 	ldr.w	r9, [r3, #20]
    73a8:	f8c4 9014 	str.w	r9, [r4, #20]
    73ac:	2a06      	cmp	r2, #6
    73ae:	d037      	beq.n	7420 <_ZN9ClearCore10UsbManager6TxPumpEv+0x330>
    73b0:	f8d3 9018 	ldr.w	r9, [r3, #24]
    73b4:	f8c4 9018 	str.w	r9, [r4, #24]
    73b8:	2a07      	cmp	r2, #7
    73ba:	d031      	beq.n	7420 <_ZN9ClearCore10UsbManager6TxPumpEv+0x330>
    73bc:	f8d3 901c 	ldr.w	r9, [r3, #28]
    73c0:	f8c4 901c 	str.w	r9, [r4, #28]
    73c4:	2a08      	cmp	r2, #8
    73c6:	d02b      	beq.n	7420 <_ZN9ClearCore10UsbManager6TxPumpEv+0x330>
    73c8:	f8d3 9020 	ldr.w	r9, [r3, #32]
    73cc:	f8c4 9020 	str.w	r9, [r4, #32]
    73d0:	2a09      	cmp	r2, #9
    73d2:	d025      	beq.n	7420 <_ZN9ClearCore10UsbManager6TxPumpEv+0x330>
    73d4:	f8d3 9024 	ldr.w	r9, [r3, #36]	; 0x24
    73d8:	f8c4 9024 	str.w	r9, [r4, #36]	; 0x24
    73dc:	2a0a      	cmp	r2, #10
    73de:	d01f      	beq.n	7420 <_ZN9ClearCore10UsbManager6TxPumpEv+0x330>
    73e0:	f8d3 9028 	ldr.w	r9, [r3, #40]	; 0x28
    73e4:	f8c4 9028 	str.w	r9, [r4, #40]	; 0x28
    73e8:	2a0b      	cmp	r2, #11
    73ea:	d019      	beq.n	7420 <_ZN9ClearCore10UsbManager6TxPumpEv+0x330>
    73ec:	f8d3 902c 	ldr.w	r9, [r3, #44]	; 0x2c
    73f0:	f8c4 902c 	str.w	r9, [r4, #44]	; 0x2c
    73f4:	2a0c      	cmp	r2, #12
    73f6:	d013      	beq.n	7420 <_ZN9ClearCore10UsbManager6TxPumpEv+0x330>
    73f8:	f8d3 9030 	ldr.w	r9, [r3, #48]	; 0x30
    73fc:	f8c4 9030 	str.w	r9, [r4, #48]	; 0x30
    7400:	2a0d      	cmp	r2, #13
    7402:	d00d      	beq.n	7420 <_ZN9ClearCore10UsbManager6TxPumpEv+0x330>
    7404:	f8d3 9034 	ldr.w	r9, [r3, #52]	; 0x34
    7408:	f8c4 9034 	str.w	r9, [r4, #52]	; 0x34
    740c:	2a0e      	cmp	r2, #14
    740e:	d007      	beq.n	7420 <_ZN9ClearCore10UsbManager6TxPumpEv+0x330>
    7410:	f8d3 9038 	ldr.w	r9, [r3, #56]	; 0x38
    7414:	f8c4 9038 	str.w	r9, [r4, #56]	; 0x38
    7418:	2a0f      	cmp	r2, #15
    741a:	d001      	beq.n	7420 <_ZN9ClearCore10UsbManager6TxPumpEv+0x330>
    741c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
    741e:	63e3      	str	r3, [r4, #60]	; 0x3c
    7420:	4547      	cmp	r7, r8
    7422:	eb0c 0308 	add.w	r3, ip, r8
    7426:	eb06 0408 	add.w	r4, r6, r8
    742a:	eb0e 0c08 	add.w	ip, lr, r8
    742e:	d00f      	beq.n	7450 <_ZN9ClearCore10UsbManager6TxPumpEv+0x360>
    7430:	f81e 7022 	ldrb.w	r7, [lr, r2, lsl #2]
    7434:	f806 7022 	strb.w	r7, [r6, r2, lsl #2]
        for (uint32_t iChar = 0; iChar < count; iChar++) {
    7438:	1c5a      	adds	r2, r3, #1
    743a:	4291      	cmp	r1, r2
    743c:	d908      	bls.n	7450 <_ZN9ClearCore10UsbManager6TxPumpEv+0x360>
    743e:	3302      	adds	r3, #2
            *outPtr++ = *inPtr++;
    7440:	f89c 2001 	ldrb.w	r2, [ip, #1]
    7444:	7062      	strb	r2, [r4, #1]
        for (uint32_t iChar = 0; iChar < count; iChar++) {
    7446:	4299      	cmp	r1, r3
    7448:	d902      	bls.n	7450 <_ZN9ClearCore10UsbManager6TxPumpEv+0x360>
            *outPtr++ = *inPtr++;
    744a:	f89c 3002 	ldrb.w	r3, [ip, #2]
    744e:	70a3      	strb	r3, [r4, #2]
    7450:	4604      	mov	r4, r0
    if (cdcdf_acm_write(m_usbWriteBuf, count)) {
    7452:	4628      	mov	r0, r5
    7454:	f004 ff8a 	bl	c36c <cdcdf_acm_write>
    7458:	2800      	cmp	r0, #0
    745a:	f43f af42 	beq.w	72e2 <_ZN9ClearCore10UsbManager6TxPumpEv+0x1f2>
        atomic_clear_seqcst(&m_sendActive);
    745e:	f3bf 8f5b 	dmb	ish
    7462:	2300      	movs	r3, #0
    7464:	f884 3110 	strb.w	r3, [r4, #272]	; 0x110
    7468:	f3bf 8f5b 	dmb	ish
}
    746c:	b003      	add	sp, #12
    746e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    uint8_t *inPtr = m_bufferOut + head, *outPtr = m_usbWriteBuf;
    7472:	46be      	mov	lr, r7
        for (uint32_t iChar = 0; iChar < count; iChar++) {
    7474:	46a4      	mov	ip, r4
    uint8_t *inPtr = m_bufferOut + head, *outPtr = m_usbWriteBuf;
    7476:	462e      	mov	r6, r5
    7478:	e76d      	b.n	7356 <_ZN9ClearCore10UsbManager6TxPumpEv+0x266>
    747a:	46b8      	mov	r8, r7
        for (uint32_t iChar = 0; iChar < loopEnd; iChar++) {
    747c:	9401      	str	r4, [sp, #4]
    uint8_t *inPtr = m_bufferOut + head, *outPtr = m_usbWriteBuf;
    747e:	46ac      	mov	ip, r5
    7480:	e699      	b.n	71b6 <_ZN9ClearCore10UsbManager6TxPumpEv+0xc6>
        for (uint32_t iChar = 0; iChar < count; iChar++) {
    7482:	46a4      	mov	ip, r4
    7484:	e767      	b.n	7356 <_ZN9ClearCore10UsbManager6TxPumpEv+0x266>
        for (uint32_t iChar = 0; iChar < loopEnd; iChar++) {
    7486:	9401      	str	r4, [sp, #4]
    7488:	e695      	b.n	71b6 <_ZN9ClearCore10UsbManager6TxPumpEv+0xc6>
        for (uint32_t iChar = 0; iChar < loopEnd; iChar++) {
    748a:	46b9      	mov	r9, r7
    748c:	e6f3      	b.n	7276 <_ZN9ClearCore10UsbManager6TxPumpEv+0x186>
    748e:	46b9      	mov	r9, r7
    7490:	46a4      	mov	ip, r4
    7492:	e6f0      	b.n	7276 <_ZN9ClearCore10UsbManager6TxPumpEv+0x186>
        atomic_clear_seqcst(&m_sendActive);
    7494:	f3bf 8f5b 	dmb	ish
    7498:	f880 2110 	strb.w	r2, [r0, #272]	; 0x110
    749c:	f3bf 8f5b 	dmb	ish
        return;
    74a0:	e71f      	b.n	72e2 <_ZN9ClearCore10UsbManager6TxPumpEv+0x1f2>
    74a2:	f100 03bf 	add.w	r3, r0, #191	; 0xbf
    74a6:	187c      	adds	r4, r7, r1
            *outPtr++ = *inPtr++;
    74a8:	f817 2b01 	ldrb.w	r2, [r7], #1
    74ac:	f803 2f01 	strb.w	r2, [r3, #1]!
        for (uint32_t iChar = 0; iChar < count; iChar++) {
    74b0:	42a7      	cmp	r7, r4
    74b2:	d1f9      	bne.n	74a8 <_ZN9ClearCore10UsbManager6TxPumpEv+0x3b8>
    74b4:	e7cc      	b.n	7450 <_ZN9ClearCore10UsbManager6TxPumpEv+0x360>
    74b6:	3c01      	subs	r4, #1
    74b8:	441a      	add	r2, r3
            *outPtr++ = *inPtr++;
    74ba:	f813 6b01 	ldrb.w	r6, [r3], #1
    74be:	f804 6f01 	strb.w	r6, [r4, #1]!
        for (uint32_t iChar = 0; iChar < loopEnd; iChar++) {
    74c2:	4293      	cmp	r3, r2
    74c4:	d1f9      	bne.n	74ba <_ZN9ClearCore10UsbManager6TxPumpEv+0x3ca>
    74c6:	e7c3      	b.n	7450 <_ZN9ClearCore10UsbManager6TxPumpEv+0x360>
    74c8:	f100 04bf 	add.w	r4, r0, #191	; 0xbf
    74cc:	eb07 0e02 	add.w	lr, r7, r2
            *outPtr++ = *inPtr++;
    74d0:	f817 6b01 	ldrb.w	r6, [r7], #1
    74d4:	f804 6f01 	strb.w	r6, [r4, #1]!
        for (uint32_t iChar = 0; iChar < loopEnd; iChar++) {
    74d8:	45be      	cmp	lr, r7
    74da:	d1f9      	bne.n	74d0 <_ZN9ClearCore10UsbManager6TxPumpEv+0x3e0>
    74dc:	e69a      	b.n	7214 <_ZN9ClearCore10UsbManager6TxPumpEv+0x124>
    uint8_t *inPtr = m_bufferOut + head, *outPtr = m_usbWriteBuf;
    74de:	462c      	mov	r4, r5
    74e0:	e699      	b.n	7216 <_ZN9ClearCore10UsbManager6TxPumpEv+0x126>
    74e2:	bf00      	nop

000074e4 <_ZN9ClearCore10UsbManager9PortCloseEv>:
void UsbManager::PortClose() {
    74e4:	b538      	push	{r3, r4, r5, lr}
    if (!m_portOpen) {
    74e6:	f890 311c 	ldrb.w	r3, [r0, #284]	; 0x11c
    74ea:	b903      	cbnz	r3, 74ee <_ZN9ClearCore10UsbManager9PortCloseEv+0xa>
    74ec:	bd38      	pop	{r3, r4, r5, pc}
    74ee:	4605      	mov	r5, r0
    TxPump();
    74f0:	f7ff fdfe 	bl	70f0 <_ZN9ClearCore10UsbManager6TxPumpEv>
           USB->DEVICE.FSMSTATUS.bit.FSMSTATE == USB_FSMSTATUS_FSMSTATE_ON;
    74f4:	f04f 4482 	mov.w	r4, #1090519040	; 0x41000000
    while (m_outHead != m_outTail && Connected()) {
    74f8:	f8d5 2108 	ldr.w	r2, [r5, #264]	; 0x108
    74fc:	f8d5 310c 	ldr.w	r3, [r5, #268]	; 0x10c
    7500:	429a      	cmp	r2, r3
    7502:	d00b      	beq.n	751c <_ZN9ClearCore10UsbManager9PortCloseEv+0x38>
    return cdcdf_acm_is_enabled() && LineState().rs232.DTR &&
    7504:	f004 ff7a 	bl	c3fc <cdcdf_acm_is_enabled>
    7508:	b140      	cbz	r0, 751c <_ZN9ClearCore10UsbManager9PortCloseEv+0x38>
    750a:	f895 3112 	ldrb.w	r3, [r5, #274]	; 0x112
    750e:	07db      	lsls	r3, r3, #31
    7510:	d504      	bpl.n	751c <_ZN9ClearCore10UsbManager9PortCloseEv+0x38>
           USB->DEVICE.FSMSTATUS.bit.FSMSTATE == USB_FSMSTATUS_FSMSTATE_ON;
    7512:	7b63      	ldrb	r3, [r4, #13]
    7514:	f003 037f 	and.w	r3, r3, #127	; 0x7f
    return cdcdf_acm_is_enabled() && LineState().rs232.DTR &&
    7518:	2b02      	cmp	r3, #2
    751a:	d0ed      	beq.n	74f8 <_ZN9ClearCore10UsbManager9PortCloseEv+0x14>
    m_portOpen = false;
    751c:	2400      	movs	r4, #0
    cdcdf_acm_register_callback(CDCDF_ACM_CB_READ, (FUNC_PTR)NULL);
    751e:	4621      	mov	r1, r4
    m_portOpen = false;
    7520:	f885 411c 	strb.w	r4, [r5, #284]	; 0x11c
    cdcdf_acm_register_callback(CDCDF_ACM_CB_READ, (FUNC_PTR)NULL);
    7524:	4620      	mov	r0, r4
    7526:	f004 ff41 	bl	c3ac <cdcdf_acm_register_callback>
    cdcdf_acm_register_callback(CDCDF_ACM_CB_WRITE, (FUNC_PTR)NULL);
    752a:	4621      	mov	r1, r4
    752c:	2001      	movs	r0, #1
    752e:	f004 ff3d 	bl	c3ac <cdcdf_acm_register_callback>
    cdcdf_acm_stop_xfer();
    7532:	f004 ff2f 	bl	c394 <cdcdf_acm_stop_xfer>
    m_inHead = 0;
    7536:	f8c5 4100 	str.w	r4, [r5, #256]	; 0x100
    m_readBufAvail = 0;
    753a:	f8c5 4118 	str.w	r4, [r5, #280]	; 0x118
    m_inTail = 0;
    753e:	f8c5 4104 	str.w	r4, [r5, #260]	; 0x104
    m_outHead = 0;
    7542:	f8c5 4108 	str.w	r4, [r5, #264]	; 0x108
    m_outTail = 0;
    7546:	f8c5 410c 	str.w	r4, [r5, #268]	; 0x10c
    m_sendActive = false;
    754a:	f885 4110 	strb.w	r4, [r5, #272]	; 0x110
    m_readActive = false;
    754e:	f885 4111 	strb.w	r4, [r5, #273]	; 0x111
    7552:	bd38      	pop	{r3, r4, r5, pc}

00007554 <_ZN9ClearCore10UsbManager7RefreshEv>:
    if (!m_sendActive && m_outHead != m_outTail) {
    7554:	f890 3110 	ldrb.w	r3, [r0, #272]	; 0x110
    7558:	b103      	cbz	r3, 755c <_ZN9ClearCore10UsbManager7RefreshEv+0x8>
    755a:	4770      	bx	lr
    755c:	f8d0 2108 	ldr.w	r2, [r0, #264]	; 0x108
    7560:	f8d0 310c 	ldr.w	r3, [r0, #268]	; 0x10c
    7564:	429a      	cmp	r2, r3
    7566:	f000 80fd 	beq.w	7764 <_ZN9ClearCore10UsbManager7RefreshEv+0x210>
void UsbManager::Refresh(void) {
    756a:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    if (atomic_test_and_set_acqrel(&m_sendActive)) {
    756e:	f500 7388 	add.w	r3, r0, #272	; 0x110
void UsbManager::Refresh(void) {
    7572:	b083      	sub	sp, #12
    if (atomic_test_and_set_acqrel(&m_sendActive)) {
    7574:	f04f 0101 	mov.w	r1, #1
    7578:	f3bf 8f5b 	dmb	ish
    757c:	e8d3 2f4f 	ldrexb	r2, [r3]
    7580:	e8c3 1f44 	strexb	r4, r1, [r3]
    7584:	2c00      	cmp	r4, #0
    7586:	d1f9      	bne.n	757c <_ZN9ClearCore10UsbManager7RefreshEv+0x28>
    7588:	f3bf 8f5b 	dmb	ish
    758c:	f012 0fff 	tst.w	r2, #255	; 0xff
    7590:	f040 80e5 	bne.w	775e <_ZN9ClearCore10UsbManager7RefreshEv+0x20a>
    uint32_t head = m_outHead;
    7594:	f8d0 6108 	ldr.w	r6, [r0, #264]	; 0x108
    uint32_t tail = m_outTail;
    7598:	f8d0 110c 	ldr.w	r1, [r0, #268]	; 0x10c
    if (head == tail) {
    759c:	428e      	cmp	r6, r1
    759e:	f000 81ab 	beq.w	78f8 <_ZN9ClearCore10UsbManager7RefreshEv+0x3a4>
    uint8_t *inPtr = m_bufferOut + head, *outPtr = m_usbWriteBuf;
    75a2:	f100 0340 	add.w	r3, r0, #64	; 0x40
    75a6:	eb03 0706 	add.w	r7, r3, r6
    75aa:	f100 05c0 	add.w	r5, r0, #192	; 0xc0
    if (head < tail) {
    75ae:	f0c0 80da 	bcc.w	7766 <_ZN9ClearCore10UsbManager7RefreshEv+0x212>
        uint32_t countTilWrap = sizeof(m_bufferOut) - head;
    75b2:	f1c6 0240 	rsb	r2, r6, #64	; 0x40
        count = min(count, countTilWrap + tail);
    75b6:	4411      	add	r1, r2
    75b8:	2940      	cmp	r1, #64	; 0x40
    75ba:	bf28      	it	cs
    75bc:	2140      	movcs	r1, #64	; 0x40
    75be:	428a      	cmp	r2, r1
    75c0:	bf28      	it	cs
    75c2:	460a      	movcs	r2, r1
        for (uint32_t iChar = 0; iChar < loopEnd; iChar++) {
    75c4:	2a00      	cmp	r2, #0
    75c6:	f000 81bc 	beq.w	7942 <_ZN9ClearCore10UsbManager7RefreshEv+0x3ee>
    75ca:	f106 0e40 	add.w	lr, r6, #64	; 0x40
    75ce:	f106 0444 	add.w	r4, r6, #68	; 0x44
    75d2:	eb00 080e 	add.w	r8, r0, lr
    75d6:	4404      	add	r4, r0
    75d8:	f100 0cc4 	add.w	ip, r0, #196	; 0xc4
    75dc:	45e0      	cmp	r8, ip
    75de:	bf38      	it	cc
    75e0:	42a5      	cmpcc	r5, r4
    75e2:	f0c0 81a3 	bcc.w	792c <_ZN9ClearCore10UsbManager7RefreshEv+0x3d8>
    75e6:	2a0b      	cmp	r2, #11
    75e8:	f240 81a0 	bls.w	792c <_ZN9ClearCore10UsbManager7RefreshEv+0x3d8>
    75ec:	426c      	negs	r4, r5
    75ee:	f014 0403 	ands.w	r4, r4, #3
    75f2:	f000 8177 	beq.w	78e4 <_ZN9ClearCore10UsbManager7RefreshEv+0x390>
            *outPtr++ = *inPtr++;
    75f6:	5d9e      	ldrb	r6, [r3, r6]
    75f8:	f880 60c0 	strb.w	r6, [r0, #192]	; 0xc0
    75fc:	2c01      	cmp	r4, #1
    75fe:	f100 0cc1 	add.w	ip, r0, #193	; 0xc1
    7602:	f107 0801 	add.w	r8, r7, #1
    7606:	f000 8171 	beq.w	78ec <_ZN9ClearCore10UsbManager7RefreshEv+0x398>
    760a:	787e      	ldrb	r6, [r7, #1]
    760c:	f880 60c1 	strb.w	r6, [r0, #193]	; 0xc1
    7610:	2c02      	cmp	r4, #2
    7612:	f100 0cc2 	add.w	ip, r0, #194	; 0xc2
    7616:	f107 0802 	add.w	r8, r7, #2
    761a:	f000 8165 	beq.w	78e8 <_ZN9ClearCore10UsbManager7RefreshEv+0x394>
    761e:	78be      	ldrb	r6, [r7, #2]
    7620:	f880 60c2 	strb.w	r6, [r0, #194]	; 0xc2
        for (uint32_t iChar = 0; iChar < loopEnd; iChar++) {
    7624:	2603      	movs	r6, #3
            *outPtr++ = *inPtr++;
    7626:	f107 0803 	add.w	r8, r7, #3
    762a:	f100 0cc3 	add.w	ip, r0, #195	; 0xc3
        for (uint32_t iChar = 0; iChar < loopEnd; iChar++) {
    762e:	9601      	str	r6, [sp, #4]
    7630:	eba2 0b04 	sub.w	fp, r2, r4
    7634:	f1ab 0704 	sub.w	r7, fp, #4
    7638:	08bf      	lsrs	r7, r7, #2
    763a:	eb0e 0604 	add.w	r6, lr, r4
    763e:	3701      	adds	r7, #1
    7640:	34c0      	adds	r4, #192	; 0xc0
    7642:	4406      	add	r6, r0
    7644:	4404      	add	r4, r0
    7646:	ea4f 0987 	mov.w	r9, r7, lsl #2
    764a:	f04f 0e00 	mov.w	lr, #0
    764e:	f10e 0e01 	add.w	lr, lr, #1
            *outPtr++ = *inPtr++;
    7652:	f856 ab04 	ldr.w	sl, [r6], #4
    7656:	f844 ab04 	str.w	sl, [r4], #4
    765a:	45be      	cmp	lr, r7
    765c:	d3f7      	bcc.n	764e <_ZN9ClearCore10UsbManager7RefreshEv+0xfa>
    765e:	9c01      	ldr	r4, [sp, #4]
    7660:	45cb      	cmp	fp, r9
    7662:	444c      	add	r4, r9
    7664:	eb0c 0609 	add.w	r6, ip, r9
    7668:	eb08 0e09 	add.w	lr, r8, r9
    766c:	d00f      	beq.n	768e <_ZN9ClearCore10UsbManager7RefreshEv+0x13a>
    766e:	f818 8027 	ldrb.w	r8, [r8, r7, lsl #2]
    7672:	f80c 8027 	strb.w	r8, [ip, r7, lsl #2]
        for (uint32_t iChar = 0; iChar < loopEnd; iChar++) {
    7676:	1c67      	adds	r7, r4, #1
    7678:	42ba      	cmp	r2, r7
    767a:	d908      	bls.n	768e <_ZN9ClearCore10UsbManager7RefreshEv+0x13a>
    767c:	3402      	adds	r4, #2
            *outPtr++ = *inPtr++;
    767e:	f89e 7001 	ldrb.w	r7, [lr, #1]
    7682:	7077      	strb	r7, [r6, #1]
        for (uint32_t iChar = 0; iChar < loopEnd; iChar++) {
    7684:	42a2      	cmp	r2, r4
    7686:	d902      	bls.n	768e <_ZN9ClearCore10UsbManager7RefreshEv+0x13a>
            *outPtr++ = *inPtr++;
    7688:	f89e 4002 	ldrb.w	r4, [lr, #2]
    768c:	70b4      	strb	r4, [r6, #2]
    768e:	18ac      	adds	r4, r5, r2
        for (uint32_t iChar = 0; iChar < loopEnd; iChar++) {
    7690:	1a8a      	subs	r2, r1, r2
    7692:	d058      	beq.n	7746 <_ZN9ClearCore10UsbManager7RefreshEv+0x1f2>
    7694:	1d26      	adds	r6, r4, #4
    7696:	f100 0744 	add.w	r7, r0, #68	; 0x44
    769a:	42bc      	cmp	r4, r7
    769c:	bf38      	it	cc
    769e:	42b3      	cmpcc	r3, r6
    76a0:	f0c0 813b 	bcc.w	791a <_ZN9ClearCore10UsbManager7RefreshEv+0x3c6>
    76a4:	2a0b      	cmp	r2, #11
    76a6:	f240 8138 	bls.w	791a <_ZN9ClearCore10UsbManager7RefreshEv+0x3c6>
    76aa:	425f      	negs	r7, r3
    76ac:	f017 0703 	ands.w	r7, r7, #3
    76b0:	f000 811f 	beq.w	78f2 <_ZN9ClearCore10UsbManager7RefreshEv+0x39e>
            *outPtr++ = *inPtr++;
    76b4:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
    76b8:	7023      	strb	r3, [r4, #0]
    76ba:	2f01      	cmp	r7, #1
    76bc:	f104 0c01 	add.w	ip, r4, #1
    76c0:	f100 0341 	add.w	r3, r0, #65	; 0x41
    76c4:	f000 8116 	beq.w	78f4 <_ZN9ClearCore10UsbManager7RefreshEv+0x3a0>
    76c8:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
    76cc:	7063      	strb	r3, [r4, #1]
    76ce:	2f02      	cmp	r7, #2
    76d0:	f104 0c02 	add.w	ip, r4, #2
    76d4:	f100 0342 	add.w	r3, r0, #66	; 0x42
    76d8:	f000 810c 	beq.w	78f4 <_ZN9ClearCore10UsbManager7RefreshEv+0x3a0>
    76dc:	f890 3042 	ldrb.w	r3, [r0, #66]	; 0x42
    76e0:	70a3      	strb	r3, [r4, #2]
    76e2:	f104 0c03 	add.w	ip, r4, #3
    76e6:	f100 0343 	add.w	r3, r0, #67	; 0x43
        for (uint32_t iChar = 0; iChar < loopEnd; iChar++) {
    76ea:	f04f 0903 	mov.w	r9, #3
    76ee:	eba2 0807 	sub.w	r8, r2, r7
    76f2:	f1a8 0e04 	sub.w	lr, r8, #4
    76f6:	ea4f 0e9e 	mov.w	lr, lr, lsr #2
    76fa:	f107 0640 	add.w	r6, r7, #64	; 0x40
    76fe:	f10e 0e01 	add.w	lr, lr, #1
    7702:	443c      	add	r4, r7
    7704:	4406      	add	r6, r0
    7706:	ea4f 0a8e 	mov.w	sl, lr, lsl #2
    770a:	2700      	movs	r7, #0
    770c:	3701      	adds	r7, #1
            *outPtr++ = *inPtr++;
    770e:	f856 bb04 	ldr.w	fp, [r6], #4
    7712:	f844 bb04 	str.w	fp, [r4], #4
    7716:	45be      	cmp	lr, r7
    7718:	d8f8      	bhi.n	770c <_ZN9ClearCore10UsbManager7RefreshEv+0x1b8>
    771a:	45d0      	cmp	r8, sl
    771c:	eb09 040a 	add.w	r4, r9, sl
    7720:	eb0c 060a 	add.w	r6, ip, sl
    7724:	eb03 070a 	add.w	r7, r3, sl
    7728:	d00d      	beq.n	7746 <_ZN9ClearCore10UsbManager7RefreshEv+0x1f2>
    772a:	f813 302e 	ldrb.w	r3, [r3, lr, lsl #2]
    772e:	f80c 302e 	strb.w	r3, [ip, lr, lsl #2]
        for (uint32_t iChar = 0; iChar < loopEnd; iChar++) {
    7732:	1c63      	adds	r3, r4, #1
    7734:	429a      	cmp	r2, r3
    7736:	d906      	bls.n	7746 <_ZN9ClearCore10UsbManager7RefreshEv+0x1f2>
    7738:	3402      	adds	r4, #2
            *outPtr++ = *inPtr++;
    773a:	787b      	ldrb	r3, [r7, #1]
    773c:	7073      	strb	r3, [r6, #1]
        for (uint32_t iChar = 0; iChar < loopEnd; iChar++) {
    773e:	42a2      	cmp	r2, r4
    7740:	d901      	bls.n	7746 <_ZN9ClearCore10UsbManager7RefreshEv+0x1f2>
            *outPtr++ = *inPtr++;
    7742:	78bb      	ldrb	r3, [r7, #2]
    7744:	70b3      	strb	r3, [r6, #2]
    7746:	4604      	mov	r4, r0
    if (cdcdf_acm_write(m_usbWriteBuf, count)) {
    7748:	4628      	mov	r0, r5
    774a:	f004 fe0f 	bl	c36c <cdcdf_acm_write>
    774e:	b130      	cbz	r0, 775e <_ZN9ClearCore10UsbManager7RefreshEv+0x20a>
        atomic_clear_seqcst(&m_sendActive);
    7750:	f3bf 8f5b 	dmb	ish
    7754:	2300      	movs	r3, #0
    7756:	f884 3110 	strb.w	r3, [r4, #272]	; 0x110
    775a:	f3bf 8f5b 	dmb	ish
}
    775e:	b003      	add	sp, #12
    7760:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    7764:	4770      	bx	lr
        count = min(count, tail - head);
    7766:	1b89      	subs	r1, r1, r6
    7768:	f106 0240 	add.w	r2, r6, #64	; 0x40
    776c:	f106 0444 	add.w	r4, r6, #68	; 0x44
    7770:	2940      	cmp	r1, #64	; 0x40
    7772:	eb00 0c02 	add.w	ip, r0, r2
    7776:	4404      	add	r4, r0
    7778:	f100 0ec4 	add.w	lr, r0, #196	; 0xc4
    777c:	bf28      	it	cs
    777e:	2140      	movcs	r1, #64	; 0x40
    7780:	45f4      	cmp	ip, lr
    7782:	bf38      	it	cc
    7784:	42a5      	cmpcc	r5, r4
    7786:	f0c0 80be 	bcc.w	7906 <_ZN9ClearCore10UsbManager7RefreshEv+0x3b2>
    778a:	290b      	cmp	r1, #11
    778c:	f240 80bb 	bls.w	7906 <_ZN9ClearCore10UsbManager7RefreshEv+0x3b2>
    7790:	426c      	negs	r4, r5
    7792:	f014 0403 	ands.w	r4, r4, #3
    7796:	f000 809e 	beq.w	78d6 <_ZN9ClearCore10UsbManager7RefreshEv+0x382>
            *outPtr++ = *inPtr++;
    779a:	5d9b      	ldrb	r3, [r3, r6]
    779c:	f880 30c0 	strb.w	r3, [r0, #192]	; 0xc0
    77a0:	2c01      	cmp	r4, #1
    77a2:	f100 06c1 	add.w	r6, r0, #193	; 0xc1
    77a6:	f107 0e01 	add.w	lr, r7, #1
    77aa:	f000 8096 	beq.w	78da <_ZN9ClearCore10UsbManager7RefreshEv+0x386>
    77ae:	787b      	ldrb	r3, [r7, #1]
    77b0:	f880 30c1 	strb.w	r3, [r0, #193]	; 0xc1
    77b4:	2c02      	cmp	r4, #2
    77b6:	f100 06c2 	add.w	r6, r0, #194	; 0xc2
    77ba:	f107 0e02 	add.w	lr, r7, #2
    77be:	f000 808e 	beq.w	78de <_ZN9ClearCore10UsbManager7RefreshEv+0x38a>
    77c2:	78bb      	ldrb	r3, [r7, #2]
    77c4:	f880 30c2 	strb.w	r3, [r0, #194]	; 0xc2
    77c8:	f107 0e03 	add.w	lr, r7, #3
    77cc:	f100 06c3 	add.w	r6, r0, #195	; 0xc3
        for (uint32_t iChar = 0; iChar < count; iChar++) {
    77d0:	f04f 0c03 	mov.w	ip, #3
    77d4:	1913      	adds	r3, r2, r4
    77d6:	4403      	add	r3, r0
    77d8:	f104 08c0 	add.w	r8, r4, #192	; 0xc0
            *outPtr++ = *inPtr++;
    77dc:	681a      	ldr	r2, [r3, #0]
    77de:	f840 2008 	str.w	r2, [r0, r8]
    77e2:	1b0f      	subs	r7, r1, r4
    77e4:	1f3a      	subs	r2, r7, #4
    77e6:	0892      	lsrs	r2, r2, #2
    77e8:	eb00 0408 	add.w	r4, r0, r8
    77ec:	3201      	adds	r2, #1
    77ee:	f8d3 8004 	ldr.w	r8, [r3, #4]
    77f2:	f8c4 8004 	str.w	r8, [r4, #4]
    77f6:	2a02      	cmp	r2, #2
    77f8:	ea4f 0882 	mov.w	r8, r2, lsl #2
    77fc:	d04f      	beq.n	789e <_ZN9ClearCore10UsbManager7RefreshEv+0x34a>
    77fe:	f8d3 9008 	ldr.w	r9, [r3, #8]
    7802:	f8c4 9008 	str.w	r9, [r4, #8]
    7806:	2a03      	cmp	r2, #3
    7808:	d049      	beq.n	789e <_ZN9ClearCore10UsbManager7RefreshEv+0x34a>
    780a:	f8d3 900c 	ldr.w	r9, [r3, #12]
    780e:	f8c4 900c 	str.w	r9, [r4, #12]
    7812:	2a04      	cmp	r2, #4
    7814:	d043      	beq.n	789e <_ZN9ClearCore10UsbManager7RefreshEv+0x34a>
    7816:	f8d3 9010 	ldr.w	r9, [r3, #16]
    781a:	f8c4 9010 	str.w	r9, [r4, #16]
    781e:	2a05      	cmp	r2, #5
    7820:	d03d      	beq.n	789e <_ZN9ClearCore10UsbManager7RefreshEv+0x34a>
    7822:	f8d3 9014 	ldr.w	r9, [r3, #20]
    7826:	f8c4 9014 	str.w	r9, [r4, #20]
    782a:	2a06      	cmp	r2, #6
    782c:	d037      	beq.n	789e <_ZN9ClearCore10UsbManager7RefreshEv+0x34a>
    782e:	f8d3 9018 	ldr.w	r9, [r3, #24]
    7832:	f8c4 9018 	str.w	r9, [r4, #24]
    7836:	2a07      	cmp	r2, #7
    7838:	d031      	beq.n	789e <_ZN9ClearCore10UsbManager7RefreshEv+0x34a>
    783a:	f8d3 901c 	ldr.w	r9, [r3, #28]
    783e:	f8c4 901c 	str.w	r9, [r4, #28]
    7842:	2a08      	cmp	r2, #8
    7844:	d02b      	beq.n	789e <_ZN9ClearCore10UsbManager7RefreshEv+0x34a>
    7846:	f8d3 9020 	ldr.w	r9, [r3, #32]
    784a:	f8c4 9020 	str.w	r9, [r4, #32]
    784e:	2a09      	cmp	r2, #9
    7850:	d025      	beq.n	789e <_ZN9ClearCore10UsbManager7RefreshEv+0x34a>
    7852:	f8d3 9024 	ldr.w	r9, [r3, #36]	; 0x24
    7856:	f8c4 9024 	str.w	r9, [r4, #36]	; 0x24
    785a:	2a0a      	cmp	r2, #10
    785c:	d01f      	beq.n	789e <_ZN9ClearCore10UsbManager7RefreshEv+0x34a>
    785e:	f8d3 9028 	ldr.w	r9, [r3, #40]	; 0x28
    7862:	f8c4 9028 	str.w	r9, [r4, #40]	; 0x28
    7866:	2a0b      	cmp	r2, #11
    7868:	d019      	beq.n	789e <_ZN9ClearCore10UsbManager7RefreshEv+0x34a>
    786a:	f8d3 902c 	ldr.w	r9, [r3, #44]	; 0x2c
    786e:	f8c4 902c 	str.w	r9, [r4, #44]	; 0x2c
    7872:	2a0c      	cmp	r2, #12
    7874:	d013      	beq.n	789e <_ZN9ClearCore10UsbManager7RefreshEv+0x34a>
    7876:	f8d3 9030 	ldr.w	r9, [r3, #48]	; 0x30
    787a:	f8c4 9030 	str.w	r9, [r4, #48]	; 0x30
    787e:	2a0d      	cmp	r2, #13
    7880:	d00d      	beq.n	789e <_ZN9ClearCore10UsbManager7RefreshEv+0x34a>
    7882:	f8d3 9034 	ldr.w	r9, [r3, #52]	; 0x34
    7886:	f8c4 9034 	str.w	r9, [r4, #52]	; 0x34
    788a:	2a0e      	cmp	r2, #14
    788c:	d007      	beq.n	789e <_ZN9ClearCore10UsbManager7RefreshEv+0x34a>
    788e:	f8d3 9038 	ldr.w	r9, [r3, #56]	; 0x38
    7892:	f8c4 9038 	str.w	r9, [r4, #56]	; 0x38
    7896:	2a0f      	cmp	r2, #15
    7898:	d001      	beq.n	789e <_ZN9ClearCore10UsbManager7RefreshEv+0x34a>
    789a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
    789c:	63e3      	str	r3, [r4, #60]	; 0x3c
    789e:	4547      	cmp	r7, r8
    78a0:	eb0c 0308 	add.w	r3, ip, r8
    78a4:	eb06 0408 	add.w	r4, r6, r8
    78a8:	eb0e 0c08 	add.w	ip, lr, r8
    78ac:	f43f af4b 	beq.w	7746 <_ZN9ClearCore10UsbManager7RefreshEv+0x1f2>
    78b0:	f81e 7022 	ldrb.w	r7, [lr, r2, lsl #2]
    78b4:	f806 7022 	strb.w	r7, [r6, r2, lsl #2]
        for (uint32_t iChar = 0; iChar < count; iChar++) {
    78b8:	1c5a      	adds	r2, r3, #1
    78ba:	4291      	cmp	r1, r2
    78bc:	f67f af43 	bls.w	7746 <_ZN9ClearCore10UsbManager7RefreshEv+0x1f2>
    78c0:	3302      	adds	r3, #2
            *outPtr++ = *inPtr++;
    78c2:	f89c 2001 	ldrb.w	r2, [ip, #1]
    78c6:	7062      	strb	r2, [r4, #1]
        for (uint32_t iChar = 0; iChar < count; iChar++) {
    78c8:	4299      	cmp	r1, r3
    78ca:	f67f af3c 	bls.w	7746 <_ZN9ClearCore10UsbManager7RefreshEv+0x1f2>
            *outPtr++ = *inPtr++;
    78ce:	f89c 3002 	ldrb.w	r3, [ip, #2]
    78d2:	70a3      	strb	r3, [r4, #2]
    78d4:	e737      	b.n	7746 <_ZN9ClearCore10UsbManager7RefreshEv+0x1f2>
    uint8_t *inPtr = m_bufferOut + head, *outPtr = m_usbWriteBuf;
    78d6:	46be      	mov	lr, r7
    78d8:	462e      	mov	r6, r5
        for (uint32_t iChar = 0; iChar < count; iChar++) {
    78da:	46a4      	mov	ip, r4
    78dc:	e77a      	b.n	77d4 <_ZN9ClearCore10UsbManager7RefreshEv+0x280>
    78de:	f04f 0c02 	mov.w	ip, #2
    78e2:	e777      	b.n	77d4 <_ZN9ClearCore10UsbManager7RefreshEv+0x280>
    uint8_t *inPtr = m_bufferOut + head, *outPtr = m_usbWriteBuf;
    78e4:	46b8      	mov	r8, r7
    78e6:	46ac      	mov	ip, r5
        for (uint32_t iChar = 0; iChar < loopEnd; iChar++) {
    78e8:	9401      	str	r4, [sp, #4]
    78ea:	e6a1      	b.n	7630 <_ZN9ClearCore10UsbManager7RefreshEv+0xdc>
    78ec:	2601      	movs	r6, #1
    78ee:	9601      	str	r6, [sp, #4]
    78f0:	e69e      	b.n	7630 <_ZN9ClearCore10UsbManager7RefreshEv+0xdc>
        for (uint32_t iChar = 0; iChar < loopEnd; iChar++) {
    78f2:	46a4      	mov	ip, r4
    78f4:	46b9      	mov	r9, r7
    78f6:	e6fa      	b.n	76ee <_ZN9ClearCore10UsbManager7RefreshEv+0x19a>
        atomic_clear_seqcst(&m_sendActive);
    78f8:	f3bf 8f5b 	dmb	ish
    78fc:	f880 2110 	strb.w	r2, [r0, #272]	; 0x110
    7900:	f3bf 8f5b 	dmb	ish
    7904:	e72b      	b.n	775e <_ZN9ClearCore10UsbManager7RefreshEv+0x20a>
    7906:	f100 03bf 	add.w	r3, r0, #191	; 0xbf
    790a:	187c      	adds	r4, r7, r1
            *outPtr++ = *inPtr++;
    790c:	f817 2b01 	ldrb.w	r2, [r7], #1
    7910:	f803 2f01 	strb.w	r2, [r3, #1]!
        for (uint32_t iChar = 0; iChar < count; iChar++) {
    7914:	42a7      	cmp	r7, r4
    7916:	d1f9      	bne.n	790c <_ZN9ClearCore10UsbManager7RefreshEv+0x3b8>
    7918:	e715      	b.n	7746 <_ZN9ClearCore10UsbManager7RefreshEv+0x1f2>
    791a:	3c01      	subs	r4, #1
    791c:	441a      	add	r2, r3
            *outPtr++ = *inPtr++;
    791e:	f813 6b01 	ldrb.w	r6, [r3], #1
    7922:	f804 6f01 	strb.w	r6, [r4, #1]!
        for (uint32_t iChar = 0; iChar < loopEnd; iChar++) {
    7926:	4293      	cmp	r3, r2
    7928:	d1f9      	bne.n	791e <_ZN9ClearCore10UsbManager7RefreshEv+0x3ca>
    792a:	e70c      	b.n	7746 <_ZN9ClearCore10UsbManager7RefreshEv+0x1f2>
    792c:	f100 04bf 	add.w	r4, r0, #191	; 0xbf
    7930:	eb07 0e02 	add.w	lr, r7, r2
            *outPtr++ = *inPtr++;
    7934:	f817 6b01 	ldrb.w	r6, [r7], #1
    7938:	f804 6f01 	strb.w	r6, [r4, #1]!
        for (uint32_t iChar = 0; iChar < loopEnd; iChar++) {
    793c:	45be      	cmp	lr, r7
    793e:	d1f9      	bne.n	7934 <_ZN9ClearCore10UsbManager7RefreshEv+0x3e0>
    7940:	e6a5      	b.n	768e <_ZN9ClearCore10UsbManager7RefreshEv+0x13a>
    uint8_t *inPtr = m_bufferOut + head, *outPtr = m_usbWriteBuf;
    7942:	462c      	mov	r4, r5
    7944:	e6a4      	b.n	7690 <_ZN9ClearCore10UsbManager7RefreshEv+0x13c>
    7946:	bf00      	nop

00007948 <_GLOBAL__sub_I__ZN9ClearCore6UsbMgrE>:
        }
    }
    __enable_irq();
}

} // ClearCore namespace
    7948:	b508      	push	{r3, lr}
UsbManager &UsbMgr = UsbManager::Instance();
    794a:	f7fe ff85 	bl	6858 <_ZN9ClearCore10UsbManager8InstanceEv>
    794e:	4b01      	ldr	r3, [pc, #4]	; (7954 <_GLOBAL__sub_I__ZN9ClearCore6UsbMgrE+0xc>)
    7950:	6018      	str	r0, [r3, #0]
    7952:	bd08      	pop	{r3, pc}
    7954:	20000adc 	.word	0x20000adc

00007958 <_ZN9ClearCore10SerialBase5SpeedEv>:
    /**
        \copydoc ISerial::Speed()
    **/
    virtual uint32_t Speed() override {
        return m_baudRate;
    }
    7958:	6a40      	ldr	r0, [r0, #36]	; 0x24
    795a:	4770      	bx	lr

0000795c <_ZN9ClearCore10SerialBase6ParityEv>:

        \return Returns transmission format enumeration.
    **/
    Parities Parity() override {
        return m_parity;
    }
    795c:	7900      	ldrb	r0, [r0, #4]
    795e:	4770      	bx	lr

00007960 <_ZN9ClearCore10SerialBasecvbEv>:
    /**
        bool operator for compatibility with ISerial
    **/
    operator bool() override {
        return true;
    }
    7960:	2001      	movs	r0, #1
    7962:	4770      	bx	lr

00007964 <_ZN9ClearCore11MotorDriverC1Ev>:

    /**
        \brief Default constructor so this connector can be a global and
        constructed by SysManager.
    **/
    MotorDriver() {};
    7964:	b510      	push	{r4, lr}
    7966:	4604      	mov	r4, r0
    DigitalIn() {};
    7968:	f7fd f838 	bl	49dc <_ZN9ClearCore9ConnectorC1Ev>
    796c:	4620      	mov	r0, r4
    796e:	4b0c      	ldr	r3, [pc, #48]	; (79a0 <_ZN9ClearCore11MotorDriverC1Ev+0x3c>)
    7970:	f840 3b30 	str.w	r3, [r0], #48
    7974:	f004 f8a2 	bl	babc <_ZN9ClearCore13StepGeneratorC1Ev>
    7978:	4a0a      	ldr	r2, [pc, #40]	; (79a4 <_ZN9ClearCore11MotorDriverC1Ev+0x40>)
    797a:	6022      	str	r2, [r4, #0]
            reg = 0;
    797c:	2300      	movs	r3, #0
    MotorDriver() {};
    797e:	323c      	adds	r2, #60	; 0x3c
            reg = 0;
    7980:	f8a4 30fc 	strh.w	r3, [r4, #252]	; 0xfc
            reg = 0;
    7984:	f8c4 3118 	str.w	r3, [r4, #280]	; 0x118
    7988:	f8c4 311c 	str.w	r3, [r4, #284]	; 0x11c
    798c:	f8c4 3120 	str.w	r3, [r4, #288]	; 0x120
    7990:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
            reg = 0;
    7994:	f8c4 3128 	str.w	r3, [r4, #296]	; 0x128
    MotorDriver() {};
    7998:	6322      	str	r2, [r4, #48]	; 0x30
    799a:	4620      	mov	r0, r4
    799c:	bd10      	pop	{r4, pc}
    799e:	bf00      	nop
    79a0:	00022b1c 	.word	0x00022b1c
    79a4:	00022b7c 	.word	0x00022b7c

000079a8 <_ZN9ClearCore10SysManagerC1Ev>:
};

/**
    Constructor
**/
SysManager::SysManager() : m_readyForOperations(false) {
    79a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    XBee = XBeeDriver(&XBee_CTS_IN, &XBee_RTS_OUT, &XBee_Rx_IN, &XBee_Tx_OUT,
    79ac:	4bbf      	ldr	r3, [pc, #764]	; (7cac <_ZN9ClearCore10SysManagerC1Ev+0x304>)
class SerialBase : public ISerial {
    79ae:	f8df a340 	ldr.w	sl, [pc, #832]	; 7cf0 <_ZN9ClearCore10SysManagerC1Ev+0x348>
    79b2:	4abf      	ldr	r2, [pc, #764]	; (7cb0 <_ZN9ClearCore10SysManagerC1Ev+0x308>)
    79b4:	49bf      	ldr	r1, [pc, #764]	; (7cb4 <_ZN9ClearCore10SysManagerC1Ev+0x30c>)
    79b6:	4dc0      	ldr	r5, [pc, #768]	; (7cb8 <_ZN9ClearCore10SysManagerC1Ev+0x310>)
SysManager::SysManager() : m_readyForOperations(false) {
    79b8:	b0df      	sub	sp, #380	; 0x17c
    XBee = XBeeDriver(&XBee_CTS_IN, &XBee_RTS_OUT, &XBee_Rx_IN, &XBee_Tx_OUT,
    79ba:	ac08      	add	r4, sp, #32
SysManager::SysManager() : m_readyForOperations(false) {
    79bc:	2700      	movs	r7, #0
    XBee = XBeeDriver(&XBee_CTS_IN, &XBee_RTS_OUT, &XBee_Rx_IN, &XBee_Tx_OUT,
    79be:	f04f 0803 	mov.w	r8, #3
SysManager::SysManager() : m_readyForOperations(false) {
    79c2:	7007      	strb	r7, [r0, #0]
    79c4:	4681      	mov	r9, r0
    XBee = XBeeDriver(&XBee_CTS_IN, &XBee_RTS_OUT, &XBee_Rx_IN, &XBee_Tx_OUT,
    79c6:	e88d 0108 	stmia.w	sp, {r3, r8}
    79ca:	4620      	mov	r0, r4
    79cc:	4bbb      	ldr	r3, [pc, #748]	; (7cbc <_ZN9ClearCore10SysManagerC1Ev+0x314>)
    79ce:	f00a f86b 	bl	11aa8 <_ZN9ClearCore10XBeeDriverC1EPK15PeripheralRouteS3_S3_S3_h>
    79d2:	68a1      	ldr	r1, [r4, #8]
    79d4:	6862      	ldr	r2, [r4, #4]
    79d6:	7b23      	ldrb	r3, [r4, #12]
    79d8:	f8ca 1008 	str.w	r1, [sl, #8]
    79dc:	f8ca 2004 	str.w	r2, [sl, #4]
    79e0:	6921      	ldr	r1, [r4, #16]
    79e2:	6962      	ldr	r2, [r4, #20]
    79e4:	f88a 300c 	strb.w	r3, [sl, #12]
    79e8:	69a3      	ldr	r3, [r4, #24]
    79ea:	f8ca 1010 	str.w	r1, [sl, #16]
    79ee:	f8ca 2014 	str.w	r2, [sl, #20]
    79f2:	69e1      	ldr	r1, [r4, #28]
    79f4:	6a22      	ldr	r2, [r4, #32]
    79f6:	f8ca 3018 	str.w	r3, [sl, #24]
    79fa:	6a63      	ldr	r3, [r4, #36]	; 0x24
    79fc:	f8ca 101c 	str.w	r1, [sl, #28]
    7a00:	f8ca 2020 	str.w	r2, [sl, #32]
    7a04:	f894 1028 	ldrb.w	r1, [r4, #40]	; 0x28
    7a08:	f894 2029 	ldrb.w	r2, [r4, #41]	; 0x29
    7a0c:	f8ca 3024 	str.w	r3, [sl, #36]	; 0x24
    7a10:	f894 302a 	ldrb.w	r3, [r4, #42]	; 0x2a
    7a14:	f88a 1028 	strb.w	r1, [sl, #40]	; 0x28
    7a18:	2680      	movs	r6, #128	; 0x80
    7a1a:	8da1      	ldrh	r1, [r4, #44]	; 0x2c
    7a1c:	f88a 2029 	strb.w	r2, [sl, #41]	; 0x29
    7a20:	f88a 302a 	strb.w	r3, [sl, #42]	; 0x2a
    7a24:	f894 202e 	ldrb.w	r2, [r4, #46]	; 0x2e
    7a28:	f894 302f 	ldrb.w	r3, [r4, #47]	; 0x2f
    7a2c:	f88a 302f 	strb.w	r3, [sl, #47]	; 0x2f
    7a30:	f8aa 102c 	strh.w	r1, [sl, #44]	; 0x2c
    7a34:	f88a 202e 	strb.w	r2, [sl, #46]	; 0x2e
    7a38:	a914      	add	r1, sp, #80	; 0x50
    7a3a:	4632      	mov	r2, r6
    7a3c:	f10a 0030 	add.w	r0, sl, #48	; 0x30
    7a40:	f016 fbde 	bl	1e200 <memcpy>
    7a44:	4632      	mov	r2, r6
    7a46:	a934      	add	r1, sp, #208	; 0xd0
    7a48:	f10a 00b0 	add.w	r0, sl, #176	; 0xb0
    7a4c:	f016 fbd8 	bl	1e200 <memcpy>
                      PER_SERCOM_ALT);
    SdCard = SdCardDriver(&MicroSD_MISO, &MicroSD_SS, &MicroSD_SCK,
    7a50:	f8cd 8004 	str.w	r8, [sp, #4]
    7a54:	499a      	ldr	r1, [pc, #616]	; (7cc0 <_ZN9ClearCore10SysManagerC1Ev+0x318>)
    7a56:	f8d4 3130 	ldr.w	r3, [r4, #304]	; 0x130
    7a5a:	f8d4 2134 	ldr.w	r2, [r4, #308]	; 0x134
    7a5e:	9100      	str	r1, [sp, #0]
    7a60:	f8d4 1138 	ldr.w	r1, [r4, #312]	; 0x138
    7a64:	f8ca 3130 	str.w	r3, [sl, #304]	; 0x130
    7a68:	f8ca 2134 	str.w	r2, [sl, #308]	; 0x134
    7a6c:	f8d4 313c 	ldr.w	r3, [r4, #316]	; 0x13c
    7a70:	f8d4 2140 	ldr.w	r2, [r4, #320]	; 0x140
    7a74:	f8ca 1138 	str.w	r1, [sl, #312]	; 0x138
    7a78:	f8ca 2140 	str.w	r2, [sl, #320]	; 0x140
    7a7c:	f8ca 313c 	str.w	r3, [sl, #316]	; 0x13c
    7a80:	4620      	mov	r0, r4
    7a82:	4b90      	ldr	r3, [pc, #576]	; (7cc4 <_ZN9ClearCore10SysManagerC1Ev+0x31c>)
    7a84:	4a90      	ldr	r2, [pc, #576]	; (7cc8 <_ZN9ClearCore10SysManagerC1Ev+0x320>)
    7a86:	4991      	ldr	r1, [pc, #580]	; (7ccc <_ZN9ClearCore10SysManagerC1Ev+0x324>)
    7a88:	f008 f926 	bl	fcd8 <_ZN9ClearCore12SdCardDriverC1EPK15PeripheralRouteS3_S3_S3_h>
    7a8c:	6863      	ldr	r3, [r4, #4]
    7a8e:	606b      	str	r3, [r5, #4]
    7a90:	69a3      	ldr	r3, [r4, #24]
    7a92:	68a2      	ldr	r2, [r4, #8]
    7a94:	f894 e00c 	ldrb.w	lr, [r4, #12]
    7a98:	6920      	ldr	r0, [r4, #16]
    7a9a:	61ab      	str	r3, [r5, #24]
    7a9c:	69e3      	ldr	r3, [r4, #28]
    7a9e:	60aa      	str	r2, [r5, #8]
    7aa0:	f885 e00c 	strb.w	lr, [r5, #12]
    7aa4:	6962      	ldr	r2, [r4, #20]
    7aa6:	f894 e028 	ldrb.w	lr, [r4, #40]	; 0x28
    7aaa:	6128      	str	r0, [r5, #16]
    7aac:	61eb      	str	r3, [r5, #28]
    7aae:	6a20      	ldr	r0, [r4, #32]
    7ab0:	f894 3029 	ldrb.w	r3, [r4, #41]	; 0x29
    7ab4:	f894 c02a 	ldrb.w	ip, [r4, #42]	; 0x2a
    7ab8:	616a      	str	r2, [r5, #20]
    7aba:	6228      	str	r0, [r5, #32]
    7abc:	6a62      	ldr	r2, [r4, #36]	; 0x24
    7abe:	8da0      	ldrh	r0, [r4, #44]	; 0x2c
    7ac0:	f885 e028 	strb.w	lr, [r5, #40]	; 0x28
    7ac4:	f885 3029 	strb.w	r3, [r5, #41]	; 0x29
    7ac8:	f894 e02e 	ldrb.w	lr, [r4, #46]	; 0x2e
    7acc:	f894 302f 	ldrb.w	r3, [r4, #47]	; 0x2f
    7ad0:	f885 c02a 	strb.w	ip, [r5, #42]	; 0x2a
    7ad4:	f885 e02e 	strb.w	lr, [r5, #46]	; 0x2e
    7ad8:	f885 302f 	strb.w	r3, [r5, #47]	; 0x2f
    7adc:	a914      	add	r1, sp, #80	; 0x50
    7ade:	626a      	str	r2, [r5, #36]	; 0x24
    7ae0:	85a8      	strh	r0, [r5, #44]	; 0x2c
    7ae2:	4632      	mov	r2, r6
    7ae4:	f105 0030 	add.w	r0, r5, #48	; 0x30
    7ae8:	f016 fb8a 	bl	1e200 <memcpy>
    7aec:	4632      	mov	r2, r6
    7aee:	a934      	add	r1, sp, #208	; 0xd0
    7af0:	f105 00b0 	add.w	r0, r5, #176	; 0xb0
    7af4:	f016 fb84 	bl	1e200 <memcpy>
    7af8:	f504 7098 	add.w	r0, r4, #304	; 0x130
    7afc:	c807      	ldmia	r0, {r0, r1, r2}
    7afe:	f8d4 3140 	ldr.w	r3, [r4, #320]	; 0x140
    7b02:	f8c5 3140 	str.w	r3, [r5, #320]	; 0x140
    7b06:	f8d4 313c 	ldr.w	r3, [r4, #316]	; 0x13c
    7b0a:	f8c5 0130 	str.w	r0, [r5, #304]	; 0x130
/**
    \brief ClearCore SD card interface

    This class manages access to the micro SD Card reader.
**/
class SdCardDriver : public SerialBase {
    7b0e:	f894 e144 	ldrb.w	lr, [r4, #324]	; 0x144
    7b12:	f8c5 1134 	str.w	r1, [r5, #308]	; 0x134
                          &MicroSD_MOSI, PER_SERCOM_ALT);
    ConnectorLed = LedDriver(ShiftRegister::SR_LED_USB_MASK);
    7b16:	4620      	mov	r0, r4
    7b18:	f8c5 2138 	str.w	r2, [r5, #312]	; 0x138
    7b1c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
    7b20:	f8c5 313c 	str.w	r3, [r5, #316]	; 0x13c

    ConnectorIO0 = DigitalInOutAnalogOut(ShiftRegister::SR_LED_IO_0_MASK,
    7b24:	f04f 0a01 	mov.w	sl, #1
    7b28:	f885 e144 	strb.w	lr, [r5, #324]	; 0x144
    ConnectorLed = LedDriver(ShiftRegister::SR_LED_USB_MASK);
    7b2c:	f009 fd62 	bl	115f4 <_ZN9ClearCore9LedDriverC1ENS_13ShiftRegister5MasksE>
    ConnectorIO0 = DigitalInOutAnalogOut(ShiftRegister::SR_LED_IO_0_MASK,
    7b30:	4b67      	ldr	r3, [pc, #412]	; (7cd0 <_ZN9ClearCore10SysManagerC1Ev+0x328>)
    7b32:	79a2      	ldrb	r2, [r4, #6]
class Connector {
    7b34:	f8b4 c004 	ldrh.w	ip, [r4, #4]
    7b38:	4d66      	ldr	r5, [pc, #408]	; (7cd4 <_ZN9ClearCore10SysManagerC1Ev+0x32c>)
    7b3a:	f8cd a004 	str.w	sl, [sp, #4]
    7b3e:	9300      	str	r3, [sp, #0]
    7b40:	4631      	mov	r1, r6
    \brief ClearCore LED control class

    This class manages access to the LED shift register so LEDs may be
    controlled at the connector level.
**/
class LedDriver : public Connector {
    7b42:	68a6      	ldr	r6, [r4, #8]
    7b44:	71aa      	strb	r2, [r5, #6]
    7b46:	f8a5 c004 	strh.w	ip, [r5, #4]
    7b4a:	60ae      	str	r6, [r5, #8]
    7b4c:	4620      	mov	r0, r4
    7b4e:	4b62      	ldr	r3, [pc, #392]	; (7cd8 <_ZN9ClearCore10SysManagerC1Ev+0x330>)
    7b50:	4a62      	ldr	r2, [pc, #392]	; (7cdc <_ZN9ClearCore10SysManagerC1Ev+0x334>)
    7b52:	4d63      	ldr	r5, [pc, #396]	; (7ce0 <_ZN9ClearCore10SysManagerC1Ev+0x338>)
    7b54:	f005 ff40 	bl	d9d8 <_ZN9ClearCore21DigitalInOutAnalogOutC1ENS_13ShiftRegister5MasksEPK15PeripheralRouteS5_S5_b>
class DigitalIn : public Connector {
    7b58:	f104 000c 	add.w	r0, r4, #12
    7b5c:	c807      	ldmia	r0, {r0, r1, r2}
    7b5e:	f894 e006 	ldrb.w	lr, [r4, #6]
    7b62:	68a3      	ldr	r3, [r4, #8]
    7b64:	88a6      	ldrh	r6, [r4, #4]
    7b66:	f885 e006 	strb.w	lr, [r5, #6]
    7b6a:	60ab      	str	r3, [r5, #8]
    7b6c:	f894 e018 	ldrb.w	lr, [r4, #24]
    7b70:	69e3      	ldr	r3, [r4, #28]
    7b72:	60e8      	str	r0, [r5, #12]
    7b74:	6a20      	ldr	r0, [r4, #32]
    7b76:	f894 c028 	ldrb.w	ip, [r4, #40]	; 0x28
    7b7a:	80ae      	strh	r6, [r5, #4]
    7b7c:	6129      	str	r1, [r5, #16]
    7b7e:	7e66      	ldrb	r6, [r4, #25]
    7b80:	6a61      	ldr	r1, [r4, #36]	; 0x24
    7b82:	616a      	str	r2, [r5, #20]
    7b84:	f885 e018 	strb.w	lr, [r5, #24]
    - #ConnectorIO5

    For more detailed information on the ClearCore Connector interface, check
    out the \ref ConnectorMain informational page.
**/
class DigitalInOut : public DigitalIn {
    7b88:	6b22      	ldr	r2, [r4, #48]	; 0x30
    7b8a:	f8d4 e02a 	ldr.w	lr, [r4, #42]	; 0x2a
    7b8e:	61eb      	str	r3, [r5, #28]
    7b90:	6228      	str	r0, [r5, #32]
    7b92:	6b63      	ldr	r3, [r4, #52]	; 0x34
    7b94:	6ba0      	ldr	r0, [r4, #56]	; 0x38
    7b96:	766e      	strb	r6, [r5, #25]
    7b98:	6269      	str	r1, [r5, #36]	; 0x24
    7b9a:	f885 c028 	strb.w	ip, [r5, #40]	; 0x28
    7b9e:	f8c5 e02a 	str.w	lr, [r5, #42]	; 0x2a
    7ba2:	632a      	str	r2, [r5, #48]	; 0x30
    7ba4:	63a8      	str	r0, [r5, #56]	; 0x38
    7ba6:	636b      	str	r3, [r5, #52]	; 0x34
    7ba8:	f894 303c 	ldrb.w	r3, [r4, #60]	; 0x3c
    7bac:	f894 003d 	ldrb.w	r0, [r4, #61]	; 0x3d
    7bb0:	6c21      	ldr	r1, [r4, #64]	; 0x40
    7bb2:	f894 e044 	ldrb.w	lr, [r4, #68]	; 0x44
    7bb6:	f894 6045 	ldrb.w	r6, [r4, #69]	; 0x45
    7bba:	6ca2      	ldr	r2, [r4, #72]	; 0x48
    7bbc:	f885 303c 	strb.w	r3, [r5, #60]	; 0x3c
    7bc0:	f885 003d 	strb.w	r0, [r5, #61]	; 0x3d
    7bc4:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
    7bc6:	6d20      	ldr	r0, [r4, #80]	; 0x50
    7bc8:	f894 c058 	ldrb.w	ip, [r4, #88]	; 0x58
    7bcc:	f894 b05b 	ldrb.w	fp, [r4, #91]	; 0x5b
    7bd0:	6429      	str	r1, [r5, #64]	; 0x40
    7bd2:	f885 e044 	strb.w	lr, [r5, #68]	; 0x44
    7bd6:	6d61      	ldr	r1, [r4, #84]	; 0x54
    7bd8:	f894 e059 	ldrb.w	lr, [r4, #89]	; 0x59
    7bdc:	f885 6045 	strb.w	r6, [r5, #69]	; 0x45
    7be0:	64aa      	str	r2, [r5, #72]	; 0x48
    7be2:	f894 605a 	ldrb.w	r6, [r4, #90]	; 0x5a
    - #ConnectorIO0

    For more detailed information on the ClearCore Connector interface, check
    out the \ref ConnectorMain informational page.
**/
class DigitalInOutAnalogOut : public DigitalInOut {
    7be6:	6e22      	ldr	r2, [r4, #96]	; 0x60
    7be8:	64eb      	str	r3, [r5, #76]	; 0x4c
    7bea:	6528      	str	r0, [r5, #80]	; 0x50
    7bec:	6e63      	ldr	r3, [r4, #100]	; 0x64
    7bee:	f8b4 005c 	ldrh.w	r0, [r4, #92]	; 0x5c
    7bf2:	f885 c058 	strb.w	ip, [r5, #88]	; 0x58
    7bf6:	f885 e059 	strb.w	lr, [r5, #89]	; 0x59
    7bfa:	f885 605a 	strb.w	r6, [r5, #90]	; 0x5a
    7bfe:	f885 b05b 	strb.w	fp, [r5, #91]	; 0x5b
    7c02:	f8a5 005c 	strh.w	r0, [r5, #92]	; 0x5c
    7c06:	662a      	str	r2, [r5, #96]	; 0x60
    7c08:	666b      	str	r3, [r5, #100]	; 0x64
    7c0a:	6569      	str	r1, [r5, #84]	; 0x54
    7c0c:	6ea1      	ldr	r1, [r4, #104]	; 0x68
                                         &IN00n_Aout00n, &OUT00, &Aout00, true);
    ConnectorIO1 = DigitalInOut(ShiftRegister::SR_LED_IO_1_MASK, &IN01n,
    7c0e:	4b35      	ldr	r3, [pc, #212]	; (7ce4 <_ZN9ClearCore10SysManagerC1Ev+0x33c>)
    7c10:	f8cd a000 	str.w	sl, [sp]
    7c14:	4620      	mov	r0, r4
    7c16:	66a9      	str	r1, [r5, #104]	; 0x68
    7c18:	4a33      	ldr	r2, [pc, #204]	; (7ce8 <_ZN9ClearCore10SysManagerC1Ev+0x340>)
    7c1a:	4d34      	ldr	r5, [pc, #208]	; (7cec <_ZN9ClearCore10SysManagerC1Ev+0x344>)
    7c1c:	2140      	movs	r1, #64	; 0x40
    7c1e:	f006 fbdf 	bl	e3e0 <_ZN9ClearCore12DigitalInOutC1ENS_13ShiftRegister5MasksEPK15PeripheralRouteS5_b>
    7c22:	f894 e006 	ldrb.w	lr, [r4, #6]
    7c26:	68a2      	ldr	r2, [r4, #8]
    7c28:	68e3      	ldr	r3, [r4, #12]
    7c2a:	88a6      	ldrh	r6, [r4, #4]
    7c2c:	6920      	ldr	r0, [r4, #16]
    7c2e:	6961      	ldr	r1, [r4, #20]
    7c30:	f885 e006 	strb.w	lr, [r5, #6]
    7c34:	60aa      	str	r2, [r5, #8]
    7c36:	f894 e018 	ldrb.w	lr, [r4, #24]
    7c3a:	69e2      	ldr	r2, [r4, #28]
    7c3c:	60eb      	str	r3, [r5, #12]
    7c3e:	6a23      	ldr	r3, [r4, #32]
    7c40:	f894 c028 	ldrb.w	ip, [r4, #40]	; 0x28
    7c44:	80ae      	strh	r6, [r5, #4]
    7c46:	6128      	str	r0, [r5, #16]
    7c48:	7e66      	ldrb	r6, [r4, #25]
    7c4a:	6a60      	ldr	r0, [r4, #36]	; 0x24
    7c4c:	6169      	str	r1, [r5, #20]
    7c4e:	f885 e018 	strb.w	lr, [r5, #24]
    7c52:	6b21      	ldr	r1, [r4, #48]	; 0x30
    7c54:	f8d4 e02a 	ldr.w	lr, [r4, #42]	; 0x2a
    7c58:	61ea      	str	r2, [r5, #28]
    7c5a:	622b      	str	r3, [r5, #32]
    7c5c:	6b62      	ldr	r2, [r4, #52]	; 0x34
    7c5e:	6ba3      	ldr	r3, [r4, #56]	; 0x38
    7c60:	f885 c028 	strb.w	ip, [r5, #40]	; 0x28
    7c64:	766e      	strb	r6, [r5, #25]
    7c66:	6268      	str	r0, [r5, #36]	; 0x24
    7c68:	6329      	str	r1, [r5, #48]	; 0x30
    7c6a:	636a      	str	r2, [r5, #52]	; 0x34
    7c6c:	63ab      	str	r3, [r5, #56]	; 0x38
    7c6e:	f8c5 e02a 	str.w	lr, [r5, #42]	; 0x2a
    7c72:	f894 e03c 	ldrb.w	lr, [r4, #60]	; 0x3c
                                &OUT01, true);
    ConnectorIO2 = DigitalInOut(ShiftRegister::SR_LED_IO_2_MASK, &IN02n,
    7c76:	f8cd a000 	str.w	sl, [sp]
    7c7a:	f894 6044 	ldrb.w	r6, [r4, #68]	; 0x44
    7c7e:	f894 103d 	ldrb.w	r1, [r4, #61]	; 0x3d
    7c82:	6c22      	ldr	r2, [r4, #64]	; 0x40
    7c84:	f885 e03c 	strb.w	lr, [r5, #60]	; 0x3c
    7c88:	f885 6044 	strb.w	r6, [r5, #68]	; 0x44
    7c8c:	f894 e045 	ldrb.w	lr, [r4, #69]	; 0x45
    7c90:	6d26      	ldr	r6, [r4, #80]	; 0x50
    7c92:	f885 103d 	strb.w	r1, [r5, #61]	; 0x3d
    7c96:	642a      	str	r2, [r5, #64]	; 0x40
    7c98:	6ca1      	ldr	r1, [r4, #72]	; 0x48
    7c9a:	6ce2      	ldr	r2, [r4, #76]	; 0x4c
    7c9c:	f885 e045 	strb.w	lr, [r5, #69]	; 0x45
    7ca0:	652e      	str	r6, [r5, #80]	; 0x50
    7ca2:	f894 e058 	ldrb.w	lr, [r4, #88]	; 0x58
    7ca6:	6d66      	ldr	r6, [r4, #84]	; 0x54
    7ca8:	64a9      	str	r1, [r5, #72]	; 0x48
    7caa:	e023      	b.n	7cf4 <_ZN9ClearCore10SysManagerC1Ev+0x34c>
    7cac:	00022ef0 	.word	0x00022ef0
    7cb0:	00022f50 	.word	0x00022f50
    7cb4:	00022ee0 	.word	0x00022ee0
    7cb8:	2000188c 	.word	0x2000188c
    7cbc:	00022e10 	.word	0x00022e10
    7cc0:	00022f30 	.word	0x00022f30
    7cc4:	00022ed0 	.word	0x00022ed0
    7cc8:	00022e00 	.word	0x00022e00
    7ccc:	00022f20 	.word	0x00022f20
    7cd0:	000230f0 	.word	0x000230f0
    7cd4:	2000147c 	.word	0x2000147c
    7cd8:	000230b0 	.word	0x000230b0
    7cdc:	00022f80 	.word	0x00022f80
    7ce0:	200011e8 	.word	0x200011e8
    7ce4:	000230c0 	.word	0x000230c0
    7ce8:	00023060 	.word	0x00023060
    7cec:	20001254 	.word	0x20001254
    7cf0:	20001748 	.word	0x20001748
    7cf4:	64ea      	str	r2, [r5, #76]	; 0x4c
    7cf6:	f894 105a 	ldrb.w	r1, [r4, #90]	; 0x5a
    7cfa:	f894 2059 	ldrb.w	r2, [r4, #89]	; 0x59
    7cfe:	656e      	str	r6, [r5, #84]	; 0x54
    7d00:	f885 e058 	strb.w	lr, [r5, #88]	; 0x58
    7d04:	f894 605b 	ldrb.w	r6, [r4, #91]	; 0x5b
    7d08:	f8b4 e05c 	ldrh.w	lr, [r4, #92]	; 0x5c
    7d0c:	f885 2059 	strb.w	r2, [r5, #89]	; 0x59
    7d10:	f885 105a 	strb.w	r1, [r5, #90]	; 0x5a
    7d14:	f885 605b 	strb.w	r6, [r5, #91]	; 0x5b
    7d18:	f8a5 e05c 	strh.w	lr, [r5, #92]	; 0x5c
    7d1c:	4620      	mov	r0, r4
    7d1e:	4db9      	ldr	r5, [pc, #740]	; (8004 <_ZN9ClearCore10SysManagerC1Ev+0x65c>)
    7d20:	4bb9      	ldr	r3, [pc, #740]	; (8008 <_ZN9ClearCore10SysManagerC1Ev+0x660>)
    7d22:	4aba      	ldr	r2, [pc, #744]	; (800c <_ZN9ClearCore10SysManagerC1Ev+0x664>)
    7d24:	2120      	movs	r1, #32
    7d26:	f006 fb5b 	bl	e3e0 <_ZN9ClearCore12DigitalInOutC1ENS_13ShiftRegister5MasksEPK15PeripheralRouteS5_b>
    7d2a:	f894 e006 	ldrb.w	lr, [r4, #6]
    7d2e:	68a2      	ldr	r2, [r4, #8]
    7d30:	68e3      	ldr	r3, [r4, #12]
    7d32:	88a6      	ldrh	r6, [r4, #4]
    7d34:	6920      	ldr	r0, [r4, #16]
    7d36:	6961      	ldr	r1, [r4, #20]
    7d38:	f885 e006 	strb.w	lr, [r5, #6]
    7d3c:	60aa      	str	r2, [r5, #8]
    7d3e:	f894 e018 	ldrb.w	lr, [r4, #24]
    7d42:	69e2      	ldr	r2, [r4, #28]
    7d44:	60eb      	str	r3, [r5, #12]
    7d46:	6a23      	ldr	r3, [r4, #32]
    7d48:	f894 c028 	ldrb.w	ip, [r4, #40]	; 0x28
    7d4c:	80ae      	strh	r6, [r5, #4]
    7d4e:	6128      	str	r0, [r5, #16]
    7d50:	7e66      	ldrb	r6, [r4, #25]
    7d52:	6a60      	ldr	r0, [r4, #36]	; 0x24
    7d54:	6169      	str	r1, [r5, #20]
    7d56:	f885 e018 	strb.w	lr, [r5, #24]
    7d5a:	6b21      	ldr	r1, [r4, #48]	; 0x30
    7d5c:	f8d4 e02a 	ldr.w	lr, [r4, #42]	; 0x2a
    7d60:	61ea      	str	r2, [r5, #28]
    7d62:	622b      	str	r3, [r5, #32]
    7d64:	6b62      	ldr	r2, [r4, #52]	; 0x34
    7d66:	6ba3      	ldr	r3, [r4, #56]	; 0x38
    7d68:	f885 c028 	strb.w	ip, [r5, #40]	; 0x28
    7d6c:	766e      	strb	r6, [r5, #25]
    7d6e:	6268      	str	r0, [r5, #36]	; 0x24
    7d70:	6329      	str	r1, [r5, #48]	; 0x30
    7d72:	636a      	str	r2, [r5, #52]	; 0x34
    7d74:	63ab      	str	r3, [r5, #56]	; 0x38
    7d76:	f8c5 e02a 	str.w	lr, [r5, #42]	; 0x2a
    7d7a:	f894 e03c 	ldrb.w	lr, [r4, #60]	; 0x3c
                                &OUT02, true);
    ConnectorIO3 = DigitalInOut(ShiftRegister::SR_LED_IO_3_MASK, &IN03n,
    7d7e:	f8cd a000 	str.w	sl, [sp]
    7d82:	f894 6044 	ldrb.w	r6, [r4, #68]	; 0x44
    7d86:	f894 103d 	ldrb.w	r1, [r4, #61]	; 0x3d
    7d8a:	6c22      	ldr	r2, [r4, #64]	; 0x40
    7d8c:	f885 e03c 	strb.w	lr, [r5, #60]	; 0x3c
    7d90:	f885 6044 	strb.w	r6, [r5, #68]	; 0x44
    7d94:	f894 e045 	ldrb.w	lr, [r4, #69]	; 0x45
    7d98:	6d26      	ldr	r6, [r4, #80]	; 0x50
    7d9a:	f885 103d 	strb.w	r1, [r5, #61]	; 0x3d
    7d9e:	642a      	str	r2, [r5, #64]	; 0x40
    7da0:	6ca1      	ldr	r1, [r4, #72]	; 0x48
    7da2:	6ce2      	ldr	r2, [r4, #76]	; 0x4c
    7da4:	f885 e045 	strb.w	lr, [r5, #69]	; 0x45
    7da8:	652e      	str	r6, [r5, #80]	; 0x50
    7daa:	f894 e058 	ldrb.w	lr, [r4, #88]	; 0x58
    7dae:	6d66      	ldr	r6, [r4, #84]	; 0x54
    7db0:	64a9      	str	r1, [r5, #72]	; 0x48
    7db2:	64ea      	str	r2, [r5, #76]	; 0x4c
    7db4:	f894 105a 	ldrb.w	r1, [r4, #90]	; 0x5a
    7db8:	f894 2059 	ldrb.w	r2, [r4, #89]	; 0x59
    7dbc:	656e      	str	r6, [r5, #84]	; 0x54
    7dbe:	f885 e058 	strb.w	lr, [r5, #88]	; 0x58
    7dc2:	f894 605b 	ldrb.w	r6, [r4, #91]	; 0x5b
    7dc6:	f8b4 e05c 	ldrh.w	lr, [r4, #92]	; 0x5c
    7dca:	f885 2059 	strb.w	r2, [r5, #89]	; 0x59
    7dce:	f885 105a 	strb.w	r1, [r5, #90]	; 0x5a
    7dd2:	f885 605b 	strb.w	r6, [r5, #91]	; 0x5b
    7dd6:	f8a5 e05c 	strh.w	lr, [r5, #92]	; 0x5c
    7dda:	4620      	mov	r0, r4
    7ddc:	4d8c      	ldr	r5, [pc, #560]	; (8010 <_ZN9ClearCore10SysManagerC1Ev+0x668>)
    7dde:	4b8d      	ldr	r3, [pc, #564]	; (8014 <_ZN9ClearCore10SysManagerC1Ev+0x66c>)
    7de0:	4a8d      	ldr	r2, [pc, #564]	; (8018 <_ZN9ClearCore10SysManagerC1Ev+0x670>)
    7de2:	2110      	movs	r1, #16
    7de4:	f006 fafc 	bl	e3e0 <_ZN9ClearCore12DigitalInOutC1ENS_13ShiftRegister5MasksEPK15PeripheralRouteS5_b>
    7de8:	f8b4 e004 	ldrh.w	lr, [r4, #4]
    7dec:	68a2      	ldr	r2, [r4, #8]
    7dee:	68e3      	ldr	r3, [r4, #12]
    7df0:	79a6      	ldrb	r6, [r4, #6]
    7df2:	6920      	ldr	r0, [r4, #16]
    7df4:	6961      	ldr	r1, [r4, #20]
    7df6:	f8a5 e004 	strh.w	lr, [r5, #4]
    7dfa:	60aa      	str	r2, [r5, #8]
    7dfc:	f894 e018 	ldrb.w	lr, [r4, #24]
    7e00:	69e2      	ldr	r2, [r4, #28]
    7e02:	60eb      	str	r3, [r5, #12]
    7e04:	6a23      	ldr	r3, [r4, #32]
    7e06:	f894 c028 	ldrb.w	ip, [r4, #40]	; 0x28
    7e0a:	71ae      	strb	r6, [r5, #6]
    7e0c:	6128      	str	r0, [r5, #16]
    7e0e:	7e66      	ldrb	r6, [r4, #25]
    7e10:	6a60      	ldr	r0, [r4, #36]	; 0x24
    7e12:	6169      	str	r1, [r5, #20]
    7e14:	f885 e018 	strb.w	lr, [r5, #24]
    7e18:	6b21      	ldr	r1, [r4, #48]	; 0x30
    7e1a:	f8d4 e02a 	ldr.w	lr, [r4, #42]	; 0x2a
    7e1e:	61ea      	str	r2, [r5, #28]
    7e20:	622b      	str	r3, [r5, #32]
    7e22:	6b62      	ldr	r2, [r4, #52]	; 0x34
    7e24:	6ba3      	ldr	r3, [r4, #56]	; 0x38
    7e26:	766e      	strb	r6, [r5, #25]
    7e28:	6268      	str	r0, [r5, #36]	; 0x24
    7e2a:	f885 c028 	strb.w	ip, [r5, #40]	; 0x28
    7e2e:	f8c5 e02a 	str.w	lr, [r5, #42]	; 0x2a
    7e32:	636a      	str	r2, [r5, #52]	; 0x34
    7e34:	63ab      	str	r3, [r5, #56]	; 0x38
    7e36:	6329      	str	r1, [r5, #48]	; 0x30
    7e38:	f894 103c 	ldrb.w	r1, [r4, #60]	; 0x3c
    7e3c:	f885 103c 	strb.w	r1, [r5, #60]	; 0x3c
    7e40:	f894 203d 	ldrb.w	r2, [r4, #61]	; 0x3d
    7e44:	6c23      	ldr	r3, [r4, #64]	; 0x40
    7e46:	f894 c044 	ldrb.w	ip, [r4, #68]	; 0x44
    7e4a:	f894 0045 	ldrb.w	r0, [r4, #69]	; 0x45
                                &OUT03, true);

    ConnectorIO4 = DigitalInOutHBridge(ShiftRegister::SR_LED_IO_4_MASK, &IN04n,
    7e4e:	9703      	str	r7, [sp, #12]
    7e50:	6ca1      	ldr	r1, [r4, #72]	; 0x48
    7e52:	f885 203d 	strb.w	r2, [r5, #61]	; 0x3d
    7e56:	642b      	str	r3, [r5, #64]	; 0x40
    7e58:	6ce2      	ldr	r2, [r4, #76]	; 0x4c
    7e5a:	6d23      	ldr	r3, [r4, #80]	; 0x50
    7e5c:	64a9      	str	r1, [r5, #72]	; 0x48
    7e5e:	f894 1058 	ldrb.w	r1, [r4, #88]	; 0x58
    7e62:	f885 c044 	strb.w	ip, [r5, #68]	; 0x44
    7e66:	f885 0045 	strb.w	r0, [r5, #69]	; 0x45
    7e6a:	f894 c059 	ldrb.w	ip, [r4, #89]	; 0x59
    7e6e:	6d60      	ldr	r0, [r4, #84]	; 0x54
    7e70:	64ea      	str	r2, [r5, #76]	; 0x4c
    7e72:	652b      	str	r3, [r5, #80]	; 0x50
    7e74:	f894 205b 	ldrb.w	r2, [r4, #91]	; 0x5b
    7e78:	f894 305a 	ldrb.w	r3, [r4, #90]	; 0x5a
    7e7c:	f885 1058 	strb.w	r1, [r5, #88]	; 0x58
    7e80:	f8b4 105c 	ldrh.w	r1, [r4, #92]	; 0x5c
    7e84:	6568      	str	r0, [r5, #84]	; 0x54
    7e86:	f885 c059 	strb.w	ip, [r5, #89]	; 0x59
    7e8a:	f885 305a 	strb.w	r3, [r5, #90]	; 0x5a
    7e8e:	f885 205b 	strb.w	r2, [r5, #91]	; 0x5b
    7e92:	f8a5 105c 	strh.w	r1, [r5, #92]	; 0x5c
    7e96:	f04f 0e68 	mov.w	lr, #104	; 0x68
    7e9a:	4d60      	ldr	r5, [pc, #384]	; (801c <_ZN9ClearCore10SysManagerC1Ev+0x674>)
    7e9c:	f8df c19c 	ldr.w	ip, [pc, #412]	; 803c <_ZN9ClearCore10SysManagerC1Ev+0x694>
    7ea0:	4e5f      	ldr	r6, [pc, #380]	; (8020 <_ZN9ClearCore10SysManagerC1Ev+0x678>)
    7ea2:	4b60      	ldr	r3, [pc, #384]	; (8024 <_ZN9ClearCore10SysManagerC1Ev+0x67c>)
    7ea4:	4a60      	ldr	r2, [pc, #384]	; (8028 <_ZN9ClearCore10SysManagerC1Ev+0x680>)
    7ea6:	f8cd e008 	str.w	lr, [sp, #8]
    7eaa:	4620      	mov	r0, r4
    7eac:	2108      	movs	r1, #8
    7eae:	9601      	str	r6, [sp, #4]
    7eb0:	f8cd c000 	str.w	ip, [sp]
    7eb4:	f006 fc36 	bl	e724 <_ZN9ClearCore19DigitalInOutHBridgeC1ENS_13ShiftRegister5MasksEPK15PeripheralRouteS5_S5_S5_4IRQnb>
    7eb8:	f8b4 e004 	ldrh.w	lr, [r4, #4]
    7ebc:	68a2      	ldr	r2, [r4, #8]
    7ebe:	68e3      	ldr	r3, [r4, #12]
    7ec0:	79a6      	ldrb	r6, [r4, #6]
    7ec2:	6920      	ldr	r0, [r4, #16]
    7ec4:	6961      	ldr	r1, [r4, #20]
    7ec6:	f8a5 e004 	strh.w	lr, [r5, #4]
    7eca:	60aa      	str	r2, [r5, #8]
    7ecc:	f894 e018 	ldrb.w	lr, [r4, #24]
    7ed0:	69e2      	ldr	r2, [r4, #28]
    7ed2:	60eb      	str	r3, [r5, #12]
    7ed4:	6a23      	ldr	r3, [r4, #32]
    7ed6:	f894 c028 	ldrb.w	ip, [r4, #40]	; 0x28
    7eda:	71ae      	strb	r6, [r5, #6]
    7edc:	6128      	str	r0, [r5, #16]
    7ede:	7e66      	ldrb	r6, [r4, #25]
    7ee0:	6a60      	ldr	r0, [r4, #36]	; 0x24
    7ee2:	6169      	str	r1, [r5, #20]
    7ee4:	f885 e018 	strb.w	lr, [r5, #24]
    7ee8:	6b21      	ldr	r1, [r4, #48]	; 0x30
    7eea:	f8d4 e02a 	ldr.w	lr, [r4, #42]	; 0x2a
    7eee:	61ea      	str	r2, [r5, #28]
    7ef0:	622b      	str	r3, [r5, #32]
    7ef2:	6b62      	ldr	r2, [r4, #52]	; 0x34
    7ef4:	6ba3      	ldr	r3, [r4, #56]	; 0x38
    7ef6:	766e      	strb	r6, [r5, #25]
    7ef8:	f885 c028 	strb.w	ip, [r5, #40]	; 0x28
    7efc:	f8c5 e02a 	str.w	lr, [r5, #42]	; 0x2a
    7f00:	6329      	str	r1, [r5, #48]	; 0x30
    7f02:	636a      	str	r2, [r5, #52]	; 0x34
    7f04:	63ab      	str	r3, [r5, #56]	; 0x38
    7f06:	6268      	str	r0, [r5, #36]	; 0x24
    7f08:	f894 003c 	ldrb.w	r0, [r4, #60]	; 0x3c
    7f0c:	f894 2044 	ldrb.w	r2, [r4, #68]	; 0x44
    7f10:	f894 103d 	ldrb.w	r1, [r4, #61]	; 0x3d
    7f14:	6c23      	ldr	r3, [r4, #64]	; 0x40
    7f16:	f885 003c 	strb.w	r0, [r5, #60]	; 0x3c
    7f1a:	f885 2044 	strb.w	r2, [r5, #68]	; 0x44
    7f1e:	6ca0      	ldr	r0, [r4, #72]	; 0x48
    7f20:	6d22      	ldr	r2, [r4, #80]	; 0x50
    7f22:	f894 6045 	ldrb.w	r6, [r4, #69]	; 0x45
    7f26:	f885 103d 	strb.w	r1, [r5, #61]	; 0x3d
    7f2a:	642b      	str	r3, [r5, #64]	; 0x40
    7f2c:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
    7f2e:	6d63      	ldr	r3, [r4, #84]	; 0x54
    7f30:	64a8      	str	r0, [r5, #72]	; 0x48
    7f32:	652a      	str	r2, [r5, #80]	; 0x50
    7f34:	f894 0059 	ldrb.w	r0, [r4, #89]	; 0x59
    7f38:	f894 205a 	ldrb.w	r2, [r4, #90]	; 0x5a
    7f3c:	f885 6045 	strb.w	r6, [r5, #69]	; 0x45
    7f40:	64e9      	str	r1, [r5, #76]	; 0x4c
    7f42:	f894 6058 	ldrb.w	r6, [r4, #88]	; 0x58
    7f46:	f8b4 105c 	ldrh.w	r1, [r4, #92]	; 0x5c
    7f4a:	656b      	str	r3, [r5, #84]	; 0x54
    7f4c:	f885 0059 	strb.w	r0, [r5, #89]	; 0x59
    7f50:	f894 305b 	ldrb.w	r3, [r4, #91]	; 0x5b

    \note If overloaded, these connectors will need to be reset using the
    StatusManager::HBridgeReset function. This applies when running in H-bridge
    mode or digital input/output modes.
**/
class DigitalInOutHBridge : public DigitalInOut {
    7f54:	f8b4 005e 	ldrh.w	r0, [r4, #94]	; 0x5e
    7f58:	f885 205a 	strb.w	r2, [r5, #90]	; 0x5a
                                       &OUT04_ENABLE04, &Polarity04_PWM04A,
                                       &Polarity04S_PWM04B, TCC4_0_IRQn, false);
    ConnectorIO5 = DigitalInOutHBridge(ShiftRegister::SR_LED_IO_5_MASK, &IN05n,
    7f5c:	f04f 0c65 	mov.w	ip, #101	; 0x65
    7f60:	f8b4 2060 	ldrh.w	r2, [r4, #96]	; 0x60
    7f64:	f885 305b 	strb.w	r3, [r5, #91]	; 0x5b
    7f68:	f8a5 105c 	strh.w	r1, [r5, #92]	; 0x5c
    7f6c:	f8a5 005e 	strh.w	r0, [r5, #94]	; 0x5e
    7f70:	f8a5 2060 	strh.w	r2, [r5, #96]	; 0x60
    7f74:	f8df e0c8 	ldr.w	lr, [pc, #200]	; 8040 <_ZN9ClearCore10SysManagerC1Ev+0x698>
    7f78:	f885 6058 	strb.w	r6, [r5, #88]	; 0x58
    7f7c:	f8b4 6062 	ldrh.w	r6, [r4, #98]	; 0x62
    7f80:	9703      	str	r7, [sp, #12]
    7f82:	f8cd c008 	str.w	ip, [sp, #8]
    7f86:	6e61      	ldr	r1, [r4, #100]	; 0x64
    7f88:	4b28      	ldr	r3, [pc, #160]	; (802c <_ZN9ClearCore10SysManagerC1Ev+0x684>)
    7f8a:	f8cd e004 	str.w	lr, [sp, #4]
    7f8e:	6ea2      	ldr	r2, [r4, #104]	; 0x68
    7f90:	9300      	str	r3, [sp, #0]
    7f92:	f894 e070 	ldrb.w	lr, [r4, #112]	; 0x70
    7f96:	f8a5 6062 	strh.w	r6, [r5, #98]	; 0x62
    7f9a:	6f66      	ldr	r6, [r4, #116]	; 0x74
    7f9c:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
    7f9e:	f8b4 c080 	ldrh.w	ip, [r4, #128]	; 0x80
    7fa2:	6669      	str	r1, [r5, #100]	; 0x64
    7fa4:	66aa      	str	r2, [r5, #104]	; 0x68
    7fa6:	6fa1      	ldr	r1, [r4, #120]	; 0x78
    7fa8:	6fe2      	ldr	r2, [r4, #124]	; 0x7c
    7faa:	f885 e070 	strb.w	lr, [r5, #112]	; 0x70
    7fae:	676e      	str	r6, [r5, #116]	; 0x74
    7fb0:	f894 e082 	ldrb.w	lr, [r4, #130]	; 0x82
    7fb4:	f894 6083 	ldrb.w	r6, [r4, #131]	; 0x83
    7fb8:	66eb      	str	r3, [r5, #108]	; 0x6c
    7fba:	67a9      	str	r1, [r5, #120]	; 0x78
    7fbc:	67ea      	str	r2, [r5, #124]	; 0x7c
    7fbe:	f8a5 c080 	strh.w	ip, [r5, #128]	; 0x80
    7fc2:	f885 e082 	strb.w	lr, [r5, #130]	; 0x82
    7fc6:	f885 6083 	strb.w	r6, [r5, #131]	; 0x83
    7fca:	4620      	mov	r0, r4
    7fcc:	4b18      	ldr	r3, [pc, #96]	; (8030 <_ZN9ClearCore10SysManagerC1Ev+0x688>)
    7fce:	4a19      	ldr	r2, [pc, #100]	; (8034 <_ZN9ClearCore10SysManagerC1Ev+0x68c>)
    7fd0:	4d19      	ldr	r5, [pc, #100]	; (8038 <_ZN9ClearCore10SysManagerC1Ev+0x690>)
    7fd2:	2104      	movs	r1, #4
    7fd4:	f006 fba6 	bl	e724 <_ZN9ClearCore19DigitalInOutHBridgeC1ENS_13ShiftRegister5MasksEPK15PeripheralRouteS5_S5_S5_4IRQnb>
    7fd8:	f104 000c 	add.w	r0, r4, #12
    7fdc:	c807      	ldmia	r0, {r0, r1, r2}
    7fde:	f8b4 e004 	ldrh.w	lr, [r4, #4]
    7fe2:	68a3      	ldr	r3, [r4, #8]
    7fe4:	79a6      	ldrb	r6, [r4, #6]
    7fe6:	f8a5 e004 	strh.w	lr, [r5, #4]
    7fea:	60ab      	str	r3, [r5, #8]
    7fec:	f894 e018 	ldrb.w	lr, [r4, #24]
    7ff0:	69e3      	ldr	r3, [r4, #28]
    7ff2:	60e8      	str	r0, [r5, #12]
    7ff4:	6a20      	ldr	r0, [r4, #32]
    7ff6:	f894 c028 	ldrb.w	ip, [r4, #40]	; 0x28
    7ffa:	71ae      	strb	r6, [r5, #6]
    7ffc:	6129      	str	r1, [r5, #16]
    7ffe:	7e66      	ldrb	r6, [r4, #25]
    8000:	6a61      	ldr	r1, [r4, #36]	; 0x24
    8002:	e01f      	b.n	8044 <_ZN9ClearCore10SysManagerC1Ev+0x69c>
    8004:	200012b4 	.word	0x200012b4
    8008:	000230d0 	.word	0x000230d0
    800c:	00023070 	.word	0x00023070
    8010:	20001314 	.word	0x20001314
    8014:	000230e0 	.word	0x000230e0
    8018:	00023080 	.word	0x00023080
    801c:	20001374 	.word	0x20001374
    8020:	00023000 	.word	0x00023000
    8024:	00022fa0 	.word	0x00022fa0
    8028:	00023090 	.word	0x00023090
    802c:	00022fd0 	.word	0x00022fd0
    8030:	00022fb0 	.word	0x00022fb0
    8034:	000230a0 	.word	0x000230a0
    8038:	200013f8 	.word	0x200013f8
    803c:	00022fc0 	.word	0x00022fc0
    8040:	00023010 	.word	0x00023010
    8044:	616a      	str	r2, [r5, #20]
    8046:	f885 e018 	strb.w	lr, [r5, #24]
    804a:	6b22      	ldr	r2, [r4, #48]	; 0x30
    804c:	f8d4 e02a 	ldr.w	lr, [r4, #42]	; 0x2a
    8050:	61eb      	str	r3, [r5, #28]
    8052:	6228      	str	r0, [r5, #32]
    8054:	6b63      	ldr	r3, [r4, #52]	; 0x34
    8056:	6ba0      	ldr	r0, [r4, #56]	; 0x38
    8058:	766e      	strb	r6, [r5, #25]
    805a:	6269      	str	r1, [r5, #36]	; 0x24
    805c:	f885 c028 	strb.w	ip, [r5, #40]	; 0x28
    8060:	f8c5 e02a 	str.w	lr, [r5, #42]	; 0x2a
    8064:	632a      	str	r2, [r5, #48]	; 0x30
    8066:	63a8      	str	r0, [r5, #56]	; 0x38
    8068:	636b      	str	r3, [r5, #52]	; 0x34
    806a:	f894 303c 	ldrb.w	r3, [r4, #60]	; 0x3c
    806e:	f894 003d 	ldrb.w	r0, [r4, #61]	; 0x3d
    8072:	6c21      	ldr	r1, [r4, #64]	; 0x40
    8074:	f894 e044 	ldrb.w	lr, [r4, #68]	; 0x44
    8078:	f894 6045 	ldrb.w	r6, [r4, #69]	; 0x45
    807c:	6ca2      	ldr	r2, [r4, #72]	; 0x48
    807e:	f885 303c 	strb.w	r3, [r5, #60]	; 0x3c
    8082:	f885 003d 	strb.w	r0, [r5, #61]	; 0x3d
    8086:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
    8088:	6d20      	ldr	r0, [r4, #80]	; 0x50
    808a:	f894 c058 	ldrb.w	ip, [r4, #88]	; 0x58
    808e:	f894 b05b 	ldrb.w	fp, [r4, #91]	; 0x5b
    8092:	6429      	str	r1, [r5, #64]	; 0x40
    8094:	f885 e044 	strb.w	lr, [r5, #68]	; 0x44
    8098:	6d61      	ldr	r1, [r4, #84]	; 0x54
    809a:	f894 e059 	ldrb.w	lr, [r4, #89]	; 0x59
    809e:	f885 6045 	strb.w	r6, [r5, #69]	; 0x45
    80a2:	64aa      	str	r2, [r5, #72]	; 0x48
    80a4:	f894 605a 	ldrb.w	r6, [r4, #90]	; 0x5a
    80a8:	f8b4 205e 	ldrh.w	r2, [r4, #94]	; 0x5e
    80ac:	64eb      	str	r3, [r5, #76]	; 0x4c
    80ae:	6528      	str	r0, [r5, #80]	; 0x50
    80b0:	f8b4 3060 	ldrh.w	r3, [r4, #96]	; 0x60
    80b4:	f8b4 005c 	ldrh.w	r0, [r4, #92]	; 0x5c
    80b8:	6569      	str	r1, [r5, #84]	; 0x54
    80ba:	f885 c058 	strb.w	ip, [r5, #88]	; 0x58
    80be:	f885 e059 	strb.w	lr, [r5, #89]	; 0x59
    80c2:	f885 b05b 	strb.w	fp, [r5, #91]	; 0x5b
    80c6:	f8a5 005c 	strh.w	r0, [r5, #92]	; 0x5c
    80ca:	f8a5 205e 	strh.w	r2, [r5, #94]	; 0x5e
    80ce:	f8a5 3060 	strh.w	r3, [r5, #96]	; 0x60
    80d2:	f885 605a 	strb.w	r6, [r5, #90]	; 0x5a
    80d6:	f8b4 6062 	ldrh.w	r6, [r4, #98]	; 0x62
    80da:	6e61      	ldr	r1, [r4, #100]	; 0x64
    80dc:	6ea3      	ldr	r3, [r4, #104]	; 0x68
    80de:	6ee0      	ldr	r0, [r4, #108]	; 0x6c
    80e0:	f894 e070 	ldrb.w	lr, [r4, #112]	; 0x70
    80e4:	f8a5 6062 	strh.w	r6, [r5, #98]	; 0x62
    80e8:	6669      	str	r1, [r5, #100]	; 0x64
    80ea:	6f66      	ldr	r6, [r4, #116]	; 0x74
    80ec:	6fa1      	ldr	r1, [r4, #120]	; 0x78
    80ee:	f8b4 c080 	ldrh.w	ip, [r4, #128]	; 0x80
    80f2:	66ab      	str	r3, [r5, #104]	; 0x68
    80f4:	66e8      	str	r0, [r5, #108]	; 0x6c
    80f6:	6fe3      	ldr	r3, [r4, #124]	; 0x7c
    80f8:	f885 e070 	strb.w	lr, [r5, #112]	; 0x70
    80fc:	676e      	str	r6, [r5, #116]	; 0x74
    80fe:	f894 e082 	ldrb.w	lr, [r4, #130]	; 0x82
    8102:	f894 6083 	ldrb.w	r6, [r4, #131]	; 0x83
    8106:	67a9      	str	r1, [r5, #120]	; 0x78
                                       &OUT05_ENABLE05, &Polarity05_PWM05A,
                                       &Polarity05S_PWM05B, TCC3_0_IRQn, false);

    ConnectorDI6 = DigitalIn(ShiftRegister::SR_LED_DI_6_MASK, &IN06n_QuadA);
    8108:	4abe      	ldr	r2, [pc, #760]	; (8404 <_ZN9ClearCore10SysManagerC1Ev+0xa5c>)
    810a:	67eb      	str	r3, [r5, #124]	; 0x7c
    810c:	4620      	mov	r0, r4
    810e:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
    8112:	f8a5 c080 	strh.w	ip, [r5, #128]	; 0x80
    8116:	f885 e082 	strb.w	lr, [r5, #130]	; 0x82
    811a:	f885 6083 	strb.w	r6, [r5, #131]	; 0x83
    811e:	f7fc fc67 	bl	49f0 <_ZN9ClearCore9DigitalInC1ENS_13ShiftRegister5MasksEPK15PeripheralRoute>
    8122:	f104 000c 	add.w	r0, r4, #12
    8126:	c807      	ldmia	r0, {r0, r1, r2}
    8128:	4db7      	ldr	r5, [pc, #732]	; (8408 <_ZN9ClearCore10SysManagerC1Ev+0xa60>)
    812a:	68a3      	ldr	r3, [r4, #8]
    812c:	f894 c018 	ldrb.w	ip, [r4, #24]
    8130:	f8b4 e004 	ldrh.w	lr, [r4, #4]
    8134:	79a6      	ldrb	r6, [r4, #6]
    8136:	60ab      	str	r3, [r5, #8]
    8138:	f885 c018 	strb.w	ip, [r5, #24]
    813c:	69e3      	ldr	r3, [r4, #28]
    813e:	f8d4 c02a 	ldr.w	ip, [r4, #42]	; 0x2a
    8142:	f894 b028 	ldrb.w	fp, [r4, #40]	; 0x28
    8146:	f8a5 e004 	strh.w	lr, [r5, #4]
    814a:	71ae      	strb	r6, [r5, #6]
    814c:	f894 e019 	ldrb.w	lr, [r4, #25]
    8150:	6a26      	ldr	r6, [r4, #32]
    8152:	60e8      	str	r0, [r5, #12]
    8154:	6129      	str	r1, [r5, #16]
    8156:	616a      	str	r2, [r5, #20]
    8158:	61eb      	str	r3, [r5, #28]
    815a:	f8c5 c02a 	str.w	ip, [r5, #42]	; 0x2a
    815e:	6a63      	ldr	r3, [r4, #36]	; 0x24
    ConnectorDI7 = DigitalIn(ShiftRegister::SR_LED_DI_7_MASK, &IN07n_QuadB);
    8160:	4aaa      	ldr	r2, [pc, #680]	; (840c <_ZN9ClearCore10SysManagerC1Ev+0xa64>)
    8162:	f885 e019 	strb.w	lr, [r5, #25]
    8166:	4620      	mov	r0, r4
    8168:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
    816c:	622e      	str	r6, [r5, #32]
    816e:	626b      	str	r3, [r5, #36]	; 0x24
    8170:	f885 b028 	strb.w	fp, [r5, #40]	; 0x28
    8174:	f7fc fc3c 	bl	49f0 <_ZN9ClearCore9DigitalInC1ENS_13ShiftRegister5MasksEPK15PeripheralRoute>
    8178:	f104 000c 	add.w	r0, r4, #12
    817c:	c807      	ldmia	r0, {r0, r1, r2}
    817e:	4da4      	ldr	r5, [pc, #656]	; (8410 <_ZN9ClearCore10SysManagerC1Ev+0xa68>)
    8180:	68a3      	ldr	r3, [r4, #8]
    8182:	f894 c018 	ldrb.w	ip, [r4, #24]
    8186:	f8b4 e004 	ldrh.w	lr, [r4, #4]
    818a:	79a6      	ldrb	r6, [r4, #6]
    818c:	60ab      	str	r3, [r5, #8]
    818e:	f885 c018 	strb.w	ip, [r5, #24]
    8192:	69e3      	ldr	r3, [r4, #28]
    8194:	f8d4 c02a 	ldr.w	ip, [r4, #42]	; 0x2a
    8198:	f894 b028 	ldrb.w	fp, [r4, #40]	; 0x28
    819c:	f8a5 e004 	strh.w	lr, [r5, #4]
    81a0:	71ae      	strb	r6, [r5, #6]
    81a2:	f894 e019 	ldrb.w	lr, [r4, #25]
    81a6:	6a26      	ldr	r6, [r4, #32]
    81a8:	60e8      	str	r0, [r5, #12]
    81aa:	6129      	str	r1, [r5, #16]
    81ac:	616a      	str	r2, [r5, #20]
    81ae:	61eb      	str	r3, [r5, #28]
    81b0:	f8c5 c02a 	str.w	ip, [r5, #42]	; 0x2a
    81b4:	6a63      	ldr	r3, [r4, #36]	; 0x24
    ConnectorDI8 = DigitalIn(ShiftRegister::SR_LED_DI_8_MASK, &IN08n_QuadI);
    81b6:	4a97      	ldr	r2, [pc, #604]	; (8414 <_ZN9ClearCore10SysManagerC1Ev+0xa6c>)
    81b8:	f885 e019 	strb.w	lr, [r5, #25]
    81bc:	4620      	mov	r0, r4
    81be:	f44f 0100 	mov.w	r1, #8388608	; 0x800000
    81c2:	622e      	str	r6, [r5, #32]
    81c4:	626b      	str	r3, [r5, #36]	; 0x24
    81c6:	f885 b028 	strb.w	fp, [r5, #40]	; 0x28
    81ca:	f7fc fc11 	bl	49f0 <_ZN9ClearCore9DigitalInC1ENS_13ShiftRegister5MasksEPK15PeripheralRoute>
    81ce:	4d92      	ldr	r5, [pc, #584]	; (8418 <_ZN9ClearCore10SysManagerC1Ev+0xa70>)
    81d0:	88a6      	ldrh	r6, [r4, #4]
    81d2:	80ae      	strh	r6, [r5, #4]
    81d4:	f104 000c 	add.w	r0, r4, #12
    81d8:	c807      	ldmia	r0, {r0, r1, r2}

    ConnectorA9 = DigitalInAnalogIn(ShiftRegister::SR_LED_ADI_09_MASK,
    81da:	2605      	movs	r6, #5
    81dc:	f894 e006 	ldrb.w	lr, [r4, #6]
    81e0:	68a3      	ldr	r3, [r4, #8]
    81e2:	9600      	str	r6, [sp, #0]
    81e4:	7e26      	ldrb	r6, [r4, #24]
    81e6:	f894 c019 	ldrb.w	ip, [r4, #25]
    81ea:	f885 e006 	strb.w	lr, [r5, #6]
    81ee:	60ab      	str	r3, [r5, #8]
    81f0:	f894 e028 	ldrb.w	lr, [r4, #40]	; 0x28
    81f4:	69e3      	ldr	r3, [r4, #28]
    81f6:	6129      	str	r1, [r5, #16]
    81f8:	616a      	str	r2, [r5, #20]
    81fa:	6a61      	ldr	r1, [r4, #36]	; 0x24
    81fc:	6a22      	ldr	r2, [r4, #32]
    81fe:	762e      	strb	r6, [r5, #24]
    8200:	f8d4 602a 	ldr.w	r6, [r4, #42]	; 0x2a
    8204:	60e8      	str	r0, [r5, #12]
    8206:	f885 c019 	strb.w	ip, [r5, #25]
    820a:	61eb      	str	r3, [r5, #28]
    820c:	622a      	str	r2, [r5, #32]
    820e:	6269      	str	r1, [r5, #36]	; 0x24
    8210:	f885 e028 	strb.w	lr, [r5, #40]	; 0x28
    8214:	f8c5 602a 	str.w	r6, [r5, #42]	; 0x2a
    8218:	4620      	mov	r0, r4
    821a:	4d80      	ldr	r5, [pc, #512]	; (841c <_ZN9ClearCore10SysManagerC1Ev+0xa74>)
    821c:	4b80      	ldr	r3, [pc, #512]	; (8420 <_ZN9ClearCore10SysManagerC1Ev+0xa78>)
    821e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
    8222:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
    8226:	f005 fe8f 	bl	df48 <_ZN9ClearCore17DigitalInAnalogInC1ENS_13ShiftRegister5MasksES2_PK15PeripheralRouteNS_10AdcManager11AdcChannelsE>
    822a:	f8b4 e004 	ldrh.w	lr, [r4, #4]
    822e:	68a2      	ldr	r2, [r4, #8]
    8230:	68e3      	ldr	r3, [r4, #12]
    8232:	79a6      	ldrb	r6, [r4, #6]
    8234:	6920      	ldr	r0, [r4, #16]
    8236:	6961      	ldr	r1, [r4, #20]
    8238:	f8a5 e004 	strh.w	lr, [r5, #4]
    823c:	60aa      	str	r2, [r5, #8]
    823e:	f894 e018 	ldrb.w	lr, [r4, #24]
    8242:	69e2      	ldr	r2, [r4, #28]
    8244:	60eb      	str	r3, [r5, #12]
    8246:	6a23      	ldr	r3, [r4, #32]
    8248:	f894 c028 	ldrb.w	ip, [r4, #40]	; 0x28
    824c:	71ae      	strb	r6, [r5, #6]
    824e:	6128      	str	r0, [r5, #16]
    8250:	7e66      	ldrb	r6, [r4, #25]
    8252:	6a60      	ldr	r0, [r4, #36]	; 0x24
    8254:	6169      	str	r1, [r5, #20]
    8256:	f885 e018 	strb.w	lr, [r5, #24]
    - #ConnectorA12

    For more detailed information on the ClearCore Connector interface, check
    out the \ref ConnectorMain informational page.
**/
class DigitalInAnalogIn : public DigitalIn {
    825a:	6b21      	ldr	r1, [r4, #48]	; 0x30
    825c:	f8d4 e02a 	ldr.w	lr, [r4, #42]	; 0x2a
    8260:	61ea      	str	r2, [r5, #28]
    8262:	622b      	str	r3, [r5, #32]
    8264:	f894 2034 	ldrb.w	r2, [r4, #52]	; 0x34
    8268:	6ba3      	ldr	r3, [r4, #56]	; 0x38
    826a:	f885 c028 	strb.w	ip, [r5, #40]	; 0x28
    826e:	766e      	strb	r6, [r5, #25]
    8270:	6268      	str	r0, [r5, #36]	; 0x24
                                    ShiftRegister::SR_ANAIN_DIGITAL_09_MASK,
                                    &IN09n_AIN09, AdcManager::ADC_AIN09);
    ConnectorA10 = DigitalInAnalogIn(ShiftRegister::SR_LED_ADI_10_MASK,
    8272:	2604      	movs	r6, #4
    8274:	f8c5 e02a 	str.w	lr, [r5, #42]	; 0x2a
    8278:	f885 2034 	strb.w	r2, [r5, #52]	; 0x34
    827c:	63ab      	str	r3, [r5, #56]	; 0x38
    827e:	6329      	str	r1, [r5, #48]	; 0x30
    8280:	6be1      	ldr	r1, [r4, #60]	; 0x3c
    8282:	f894 e040 	ldrb.w	lr, [r4, #64]	; 0x40
    8286:	4b67      	ldr	r3, [pc, #412]	; (8424 <_ZN9ClearCore10SysManagerC1Ev+0xa7c>)
    8288:	9600      	str	r6, [sp, #0]
    828a:	4620      	mov	r0, r4
    828c:	63e9      	str	r1, [r5, #60]	; 0x3c
    828e:	f885 e040 	strb.w	lr, [r5, #64]	; 0x40
    8292:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
    8296:	f04f 6180 	mov.w	r1, #67108864	; 0x4000000
    829a:	f005 fe55 	bl	df48 <_ZN9ClearCore17DigitalInAnalogInC1ENS_13ShiftRegister5MasksES2_PK15PeripheralRouteNS_10AdcManager11AdcChannelsE>
    829e:	f104 0008 	add.w	r0, r4, #8
    82a2:	c80d      	ldmia	r0, {r0, r2, r3}
    82a4:	4d60      	ldr	r5, [pc, #384]	; (8428 <_ZN9ClearCore10SysManagerC1Ev+0xa80>)
    82a6:	88a1      	ldrh	r1, [r4, #4]
    82a8:	f894 e006 	ldrb.w	lr, [r4, #6]
    82ac:	80a9      	strh	r1, [r5, #4]
    82ae:	f885 e006 	strb.w	lr, [r5, #6]
    82b2:	6961      	ldr	r1, [r4, #20]
    82b4:	f894 e018 	ldrb.w	lr, [r4, #24]
    82b8:	60a8      	str	r0, [r5, #8]
    82ba:	60ea      	str	r2, [r5, #12]
    82bc:	7e60      	ldrb	r0, [r4, #25]
    82be:	69e2      	ldr	r2, [r4, #28]
    82c0:	612b      	str	r3, [r5, #16]
    82c2:	6a23      	ldr	r3, [r4, #32]
    82c4:	f894 c034 	ldrb.w	ip, [r4, #52]	; 0x34
    82c8:	6169      	str	r1, [r5, #20]
    82ca:	f885 e018 	strb.w	lr, [r5, #24]
    82ce:	6a61      	ldr	r1, [r4, #36]	; 0x24
    82d0:	f894 e028 	ldrb.w	lr, [r4, #40]	; 0x28
    82d4:	7668      	strb	r0, [r5, #25]
    82d6:	61ea      	str	r2, [r5, #28]
    82d8:	f8d4 002a 	ldr.w	r0, [r4, #42]	; 0x2a
    82dc:	6b22      	ldr	r2, [r4, #48]	; 0x30
    82de:	622b      	str	r3, [r5, #32]
    82e0:	6ba3      	ldr	r3, [r4, #56]	; 0x38
    82e2:	f885 c034 	strb.w	ip, [r5, #52]	; 0x34
    82e6:	6269      	str	r1, [r5, #36]	; 0x24
    82e8:	f885 e028 	strb.w	lr, [r5, #40]	; 0x28
    82ec:	f8c5 002a 	str.w	r0, [r5, #42]	; 0x2a
    82f0:	63ab      	str	r3, [r5, #56]	; 0x38
    82f2:	632a      	str	r2, [r5, #48]	; 0x30
    82f4:	6be2      	ldr	r2, [r4, #60]	; 0x3c
                                     ShiftRegister::SR_ANAIN_DIGITAL_10_MASK,
                                     &IN10n_AIN10, AdcManager::ADC_AIN10);
    ConnectorA11 = DigitalInAnalogIn(ShiftRegister::SR_LED_ADI_11_MASK,
    82f6:	f8cd 8000 	str.w	r8, [sp]
    82fa:	f894 e040 	ldrb.w	lr, [r4, #64]	; 0x40
    82fe:	63ea      	str	r2, [r5, #60]	; 0x3c
    8300:	f885 e040 	strb.w	lr, [r5, #64]	; 0x40
    8304:	4620      	mov	r0, r4
    8306:	4d49      	ldr	r5, [pc, #292]	; (842c <_ZN9ClearCore10SysManagerC1Ev+0xa84>)
    8308:	4b49      	ldr	r3, [pc, #292]	; (8430 <_ZN9ClearCore10SysManagerC1Ev+0xa88>)
    830a:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
    830e:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
    8312:	f005 fe19 	bl	df48 <_ZN9ClearCore17DigitalInAnalogInC1ENS_13ShiftRegister5MasksES2_PK15PeripheralRouteNS_10AdcManager11AdcChannelsE>
    8316:	f894 c006 	ldrb.w	ip, [r4, #6]
    831a:	68a2      	ldr	r2, [r4, #8]
    831c:	68e3      	ldr	r3, [r4, #12]
    831e:	f8b4 e004 	ldrh.w	lr, [r4, #4]
    8322:	6920      	ldr	r0, [r4, #16]
    8324:	6961      	ldr	r1, [r4, #20]
    8326:	f885 c006 	strb.w	ip, [r5, #6]
    832a:	60aa      	str	r2, [r5, #8]
    832c:	f894 c018 	ldrb.w	ip, [r4, #24]
    8330:	69e2      	ldr	r2, [r4, #28]
    8332:	60eb      	str	r3, [r5, #12]
    8334:	6a23      	ldr	r3, [r4, #32]
    8336:	f894 8028 	ldrb.w	r8, [r4, #40]	; 0x28
    833a:	f8a5 e004 	strh.w	lr, [r5, #4]
    833e:	6128      	str	r0, [r5, #16]
    8340:	f894 e019 	ldrb.w	lr, [r4, #25]
    8344:	6a60      	ldr	r0, [r4, #36]	; 0x24
    8346:	6169      	str	r1, [r5, #20]
    8348:	f885 c018 	strb.w	ip, [r5, #24]
    834c:	6b21      	ldr	r1, [r4, #48]	; 0x30
    834e:	f8d4 c02a 	ldr.w	ip, [r4, #42]	; 0x2a
    8352:	61ea      	str	r2, [r5, #28]
    8354:	622b      	str	r3, [r5, #32]
    8356:	f894 2034 	ldrb.w	r2, [r4, #52]	; 0x34
    835a:	6ba3      	ldr	r3, [r4, #56]	; 0x38
    835c:	f8c5 c02a 	str.w	ip, [r5, #42]	; 0x2a
    8360:	f885 e019 	strb.w	lr, [r5, #25]
    8364:	6268      	str	r0, [r5, #36]	; 0x24
    8366:	f885 8028 	strb.w	r8, [r5, #40]	; 0x28
    836a:	6329      	str	r1, [r5, #48]	; 0x30
    836c:	63ab      	str	r3, [r5, #56]	; 0x38
    836e:	f885 2034 	strb.w	r2, [r5, #52]	; 0x34
    8372:	6be2      	ldr	r2, [r4, #60]	; 0x3c
                                     ShiftRegister::SR_ANAIN_DIGITAL_11_MASK,
                                     &IN11n_AIN11, AdcManager::ADC_AIN11);
    ConnectorA12 = DigitalInAnalogIn(ShiftRegister::SR_LED_ADI_12_MASK,
    8374:	f8cd a000 	str.w	sl, [sp]
    8378:	f894 e040 	ldrb.w	lr, [r4, #64]	; 0x40
    837c:	63ea      	str	r2, [r5, #60]	; 0x3c
    837e:	f885 e040 	strb.w	lr, [r5, #64]	; 0x40
    8382:	4620      	mov	r0, r4
    8384:	4b2b      	ldr	r3, [pc, #172]	; (8434 <_ZN9ClearCore10SysManagerC1Ev+0xa8c>)
    8386:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
    838a:	f04f 7180 	mov.w	r1, #16777216	; 0x1000000
    838e:	f005 fddb 	bl	df48 <_ZN9ClearCore17DigitalInAnalogInC1ENS_13ShiftRegister5MasksES2_PK15PeripheralRouteNS_10AdcManager11AdcChannelsE>
    8392:	f104 0008 	add.w	r0, r4, #8
    8396:	c80f      	ldmia	r0, {r0, r1, r2, r3}
    8398:	f8df e09c 	ldr.w	lr, [pc, #156]	; 8438 <_ZN9ClearCore10SysManagerC1Ev+0xa90>
    839c:	f894 c006 	ldrb.w	ip, [r4, #6]
    83a0:	88a5      	ldrh	r5, [r4, #4]
    83a2:	f88e c006 	strb.w	ip, [lr, #6]
    83a6:	f894 c019 	ldrb.w	ip, [r4, #25]
    83aa:	f894 8018 	ldrb.w	r8, [r4, #24]
    83ae:	f8ae 5004 	strh.w	r5, [lr, #4]
    83b2:	f8ce 0008 	str.w	r0, [lr, #8]
    83b6:	69e5      	ldr	r5, [r4, #28]
    83b8:	6a20      	ldr	r0, [r4, #32]
    83ba:	f8ce 100c 	str.w	r1, [lr, #12]
    83be:	f8ce 2010 	str.w	r2, [lr, #16]
    83c2:	f894 a028 	ldrb.w	sl, [r4, #40]	; 0x28
    83c6:	f8ce 3014 	str.w	r3, [lr, #20]
    83ca:	f8d4 b02a 	ldr.w	fp, [r4, #42]	; 0x2a
    83ce:	6b23      	ldr	r3, [r4, #48]	; 0x30
    83d0:	f88e c019 	strb.w	ip, [lr, #25]
    83d4:	6ba2      	ldr	r2, [r4, #56]	; 0x38
    83d6:	f894 c034 	ldrb.w	ip, [r4, #52]	; 0x34
    83da:	6a61      	ldr	r1, [r4, #36]	; 0x24
    83dc:	f88e 8018 	strb.w	r8, [lr, #24]
    83e0:	f8ce 501c 	str.w	r5, [lr, #28]
    83e4:	f8ce 0020 	str.w	r0, [lr, #32]
    83e8:	f88e a028 	strb.w	sl, [lr, #40]	; 0x28
    83ec:	f8ce b02a 	str.w	fp, [lr, #42]	; 0x2a
    83f0:	f8ce 3030 	str.w	r3, [lr, #48]	; 0x30
    83f4:	f88e c034 	strb.w	ip, [lr, #52]	; 0x34
    83f8:	f8ce 2038 	str.w	r2, [lr, #56]	; 0x38
    83fc:	f8ce 1024 	str.w	r1, [lr, #36]	; 0x24
    8400:	e01c      	b.n	843c <_ZN9ClearCore10SysManagerC1Ev+0xa94>
    8402:	bf00      	nop
    8404:	00022e60 	.word	0x00022e60
    8408:	20001158 	.word	0x20001158
    840c:	00022e70 	.word	0x00022e70
    8410:	20001188 	.word	0x20001188
    8414:	00022e80 	.word	0x00022e80
    8418:	200011b8 	.word	0x200011b8
    841c:	20000b24 	.word	0x20000b24
    8420:	00022e90 	.word	0x00022e90
    8424:	00022ea0 	.word	0x00022ea0
    8428:	2000108c 	.word	0x2000108c
    842c:	200010d0 	.word	0x200010d0
    8430:	00022eb0 	.word	0x00022eb0
    8434:	00022ec0 	.word	0x00022ec0
    8438:	20001114 	.word	0x20001114
    843c:	6be1      	ldr	r1, [r4, #60]	; 0x3c
                                     ShiftRegister::SR_ANAIN_DIGITAL_12_MASK,
                                     &IN12n_AIN12, AdcManager::ADC_AIN12);

    ConnectorM0 = MotorDriver(ShiftRegister::SR_EN_OUT_0_MASK, &Mtr0_An_SCTx,
    843e:	9702      	str	r7, [sp, #8]
    8440:	9601      	str	r6, [sp, #4]
    8442:	f894 6040 	ldrb.w	r6, [r4, #64]	; 0x40
    8446:	4dcc      	ldr	r5, [pc, #816]	; (8778 <_ZN9ClearCore10SysManagerC1Ev+0xdd0>)
    8448:	9500      	str	r5, [sp, #0]
    844a:	4620      	mov	r0, r4
    844c:	f8ce 103c 	str.w	r1, [lr, #60]	; 0x3c
    8450:	f88e 6040 	strb.w	r6, [lr, #64]	; 0x40
    8454:	4bc9      	ldr	r3, [pc, #804]	; (877c <_ZN9ClearCore10SysManagerC1Ev+0xdd4>)
    8456:	4aca      	ldr	r2, [pc, #808]	; (8780 <_ZN9ClearCore10SysManagerC1Ev+0xdd8>)
    8458:	f44f 6100 	mov.w	r1, #2048	; 0x800
    845c:	f7fc fdb6 	bl	4fcc <_ZN9ClearCore11MotorDriverC1ENS_13ShiftRegister5MasksEPK15PeripheralRouteS5_S5_tt>
    8460:	4bc8      	ldr	r3, [pc, #800]	; (8784 <_ZN9ClearCore10SysManagerC1Ev+0xddc>)
    8462:	79a7      	ldrb	r7, [r4, #6]
    8464:	68a6      	ldr	r6, [r4, #8]
    8466:	68e5      	ldr	r5, [r4, #12]
    8468:	6920      	ldr	r0, [r4, #16]
    846a:	6961      	ldr	r1, [r4, #20]
    846c:	f894 8018 	ldrb.w	r8, [r4, #24]
    8470:	69e2      	ldr	r2, [r4, #28]
    8472:	f8b4 e004 	ldrh.w	lr, [r4, #4]
    8476:	f894 c019 	ldrb.w	ip, [r4, #25]
    847a:	719f      	strb	r7, [r3, #6]
    847c:	609e      	str	r6, [r3, #8]
    847e:	6a67      	ldr	r7, [r4, #36]	; 0x24
    8480:	f894 6028 	ldrb.w	r6, [r4, #40]	; 0x28
    8484:	60dd      	str	r5, [r3, #12]
    8486:	6118      	str	r0, [r3, #16]
    8488:	f8d4 502a 	ldr.w	r5, [r4, #42]	; 0x2a
    class StepGenerator
    848c:	6b60      	ldr	r0, [r4, #52]	; 0x34
    848e:	6159      	str	r1, [r3, #20]
    8490:	f883 8018 	strb.w	r8, [r3, #24]
    8494:	6ba1      	ldr	r1, [r4, #56]	; 0x38
    8496:	f894 803c 	ldrb.w	r8, [r4, #60]	; 0x3c
    849a:	61da      	str	r2, [r3, #28]
    849c:	6a22      	ldr	r2, [r4, #32]
    849e:	f8a3 e004 	strh.w	lr, [r3, #4]
    84a2:	f883 c019 	strb.w	ip, [r3, #25]
    84a6:	621a      	str	r2, [r3, #32]
    84a8:	625f      	str	r7, [r3, #36]	; 0x24
    84aa:	f883 6028 	strb.w	r6, [r3, #40]	; 0x28
    84ae:	f8c3 502a 	str.w	r5, [r3, #42]	; 0x2a
    84b2:	6358      	str	r0, [r3, #52]	; 0x34
    84b4:	6399      	str	r1, [r3, #56]	; 0x38
    84b6:	f883 803c 	strb.w	r8, [r3, #60]	; 0x3c
    84ba:	f894 803d 	ldrb.w	r8, [r4, #61]	; 0x3d
    84be:	6ca2      	ldr	r2, [r4, #72]	; 0x48
    84c0:	649a      	str	r2, [r3, #72]	; 0x48
    84c2:	6de2      	ldr	r2, [r4, #92]	; 0x5c
    84c4:	9207      	str	r2, [sp, #28]
    84c6:	e9d4 ab1a 	ldrd	sl, fp, [r4, #104]	; 0x68
    84ca:	6ce2      	ldr	r2, [r4, #76]	; 0x4c
    84cc:	f894 0040 	ldrb.w	r0, [r4, #64]	; 0x40
    84d0:	6c61      	ldr	r1, [r4, #68]	; 0x44
    84d2:	f894 7050 	ldrb.w	r7, [r4, #80]	; 0x50
    84d6:	64da      	str	r2, [r3, #76]	; 0x4c
    84d8:	9a07      	ldr	r2, [sp, #28]
    84da:	f894 c03e 	ldrb.w	ip, [r4, #62]	; 0x3e
    84de:	f894 6051 	ldrb.w	r6, [r4, #81]	; 0x51
    84e2:	f894 5052 	ldrb.w	r5, [r4, #82]	; 0x52
    84e6:	f883 0040 	strb.w	r0, [r3, #64]	; 0x40
    84ea:	6459      	str	r1, [r3, #68]	; 0x44
    84ec:	6d60      	ldr	r0, [r4, #84]	; 0x54
    84ee:	6da1      	ldr	r1, [r4, #88]	; 0x58
    84f0:	f883 7050 	strb.w	r7, [r3, #80]	; 0x50
    84f4:	65da      	str	r2, [r3, #92]	; 0x5c
    84f6:	6f27      	ldr	r7, [r4, #112]	; 0x70
    84f8:	6e22      	ldr	r2, [r4, #96]	; 0x60
    84fa:	f883 803d 	strb.w	r8, [r3, #61]	; 0x3d
    84fe:	f883 c03e 	strb.w	ip, [r3, #62]	; 0x3e
    8502:	f883 6051 	strb.w	r6, [r3, #81]	; 0x51
    8506:	f883 5052 	strb.w	r5, [r3, #82]	; 0x52
    850a:	6f66      	ldr	r6, [r4, #116]	; 0x74
    850c:	6558      	str	r0, [r3, #84]	; 0x54
    850e:	6599      	str	r1, [r3, #88]	; 0x58
    8510:	661a      	str	r2, [r3, #96]	; 0x60
    8512:	e9c3 ab1a 	strd	sl, fp, [r3, #104]	; 0x68
    8516:	671f      	str	r7, [r3, #112]	; 0x70
    8518:	f8d4 0080 	ldr.w	r0, [r4, #128]	; 0x80
    851c:	f8d4 5090 	ldr.w	r5, [r4, #144]	; 0x90
    8520:	f8c3 0080 	str.w	r0, [r3, #128]	; 0x80
    8524:	e9d4 121e 	ldrd	r1, r2, [r4, #120]	; 0x78
    8528:	f8d4 0094 	ldr.w	r0, [r4, #148]	; 0x94
    852c:	f8c3 5090 	str.w	r5, [r3, #144]	; 0x90
    8530:	f8d4 5098 	ldr.w	r5, [r4, #152]	; 0x98
    8534:	675e      	str	r6, [r3, #116]	; 0x74
    8536:	e9d4 ab22 	ldrd	sl, fp, [r4, #136]	; 0x88
class MotorDriver : public DigitalIn, public StepGenerator {
    853a:	f8d4 60a0 	ldr.w	r6, [r4, #160]	; 0xa0
    853e:	f8c3 0094 	str.w	r0, [r3, #148]	; 0x94
    8542:	f8c3 5098 	str.w	r5, [r3, #152]	; 0x98
    8546:	f8d4 009c 	ldr.w	r0, [r4, #156]	; 0x9c
    854a:	f8d4 50a4 	ldr.w	r5, [r4, #164]	; 0xa4
    854e:	f8c3 009c 	str.w	r0, [r3, #156]	; 0x9c
    8552:	f8c3 60a0 	str.w	r6, [r3, #160]	; 0xa0
    8556:	f8d4 00a8 	ldr.w	r0, [r4, #168]	; 0xa8
    855a:	f8d4 60ac 	ldr.w	r6, [r4, #172]	; 0xac
    855e:	f8c3 50a4 	str.w	r5, [r3, #164]	; 0xa4
    8562:	f8d4 50b0 	ldr.w	r5, [r4, #176]	; 0xb0
    8566:	f8c3 00a8 	str.w	r0, [r3, #168]	; 0xa8
    856a:	e9c3 121e 	strd	r1, r2, [r3, #120]	; 0x78
    856e:	f8d4 00b4 	ldr.w	r0, [r4, #180]	; 0xb4
    8572:	f8c3 60ac 	str.w	r6, [r3, #172]	; 0xac
    8576:	4619      	mov	r1, r3
    8578:	f8d4 60b8 	ldr.w	r6, [r4, #184]	; 0xb8
    857c:	f8c3 50b0 	str.w	r5, [r3, #176]	; 0xb0
    8580:	f8d4 40bc 	ldr.w	r4, [r4, #188]	; 0xbc
    8584:	9d38      	ldr	r5, [sp, #224]	; 0xe0
    8586:	f8c3 00b4 	str.w	r0, [r3, #180]	; 0xb4
    858a:	e9c3 ab22 	strd	sl, fp, [r3, #136]	; 0x88
    858e:	f8c3 60b8 	str.w	r6, [r3, #184]	; 0xb8
    8592:	f8c3 40bc 	str.w	r4, [r3, #188]	; 0xbc
    8596:	f8c3 50c0 	str.w	r5, [r3, #192]	; 0xc0
    859a:	9c39      	ldr	r4, [sp, #228]	; 0xe4
    859c:	983a      	ldr	r0, [sp, #232]	; 0xe8
    859e:	9a3b      	ldr	r2, [sp, #236]	; 0xec
    85a0:	f89d 30f6 	ldrb.w	r3, [sp, #246]	; 0xf6
    85a4:	f8bd b0f0 	ldrh.w	fp, [sp, #240]	; 0xf0
    85a8:	f8bd a0f2 	ldrh.w	sl, [sp, #242]	; 0xf2
    85ac:	f8bd 80f4 	ldrh.w	r8, [sp, #244]	; 0xf4
    85b0:	f89d c0f7 	ldrb.w	ip, [sp, #247]	; 0xf7
    85b4:	f89d e0f8 	ldrb.w	lr, [sp, #248]	; 0xf8
    85b8:	f8bd 70fa 	ldrh.w	r7, [sp, #250]	; 0xfa
    85bc:	f8bd 60fc 	ldrh.w	r6, [sp, #252]	; 0xfc
    85c0:	f8bd 50fe 	ldrh.w	r5, [sp, #254]	; 0xfe
    85c4:	f8c1 40c4 	str.w	r4, [r1, #196]	; 0xc4
    85c8:	f8c1 00c8 	str.w	r0, [r1, #200]	; 0xc8
    85cc:	f8c1 20cc 	str.w	r2, [r1, #204]	; 0xcc
    85d0:	f8bd 0102 	ldrh.w	r0, [sp, #258]	; 0x102
    85d4:	f89d 2104 	ldrb.w	r2, [sp, #260]	; 0x104
    85d8:	f8bd 4100 	ldrh.w	r4, [sp, #256]	; 0x100
    85dc:	f881 30d6 	strb.w	r3, [r1, #214]	; 0xd6
    85e0:	9b42      	ldr	r3, [sp, #264]	; 0x108
    85e2:	f8a1 b0d0 	strh.w	fp, [r1, #208]	; 0xd0
    85e6:	f8a1 a0d2 	strh.w	sl, [r1, #210]	; 0xd2
    85ea:	f8a1 80d4 	strh.w	r8, [r1, #212]	; 0xd4
    85ee:	f881 c0d7 	strb.w	ip, [r1, #215]	; 0xd7
    85f2:	f881 e0d8 	strb.w	lr, [r1, #216]	; 0xd8
    85f6:	f8a1 70da 	strh.w	r7, [r1, #218]	; 0xda
    85fa:	f8a1 60dc 	strh.w	r6, [r1, #220]	; 0xdc
    85fe:	f8a1 50de 	strh.w	r5, [r1, #222]	; 0xde
    8602:	f8a1 00e2 	strh.w	r0, [r1, #226]	; 0xe2
    8606:	f881 20e4 	strb.w	r2, [r1, #228]	; 0xe4
    860a:	f8c1 30e8 	str.w	r3, [r1, #232]	; 0xe8
    860e:	f8a1 40e0 	strh.w	r4, [r1, #224]	; 0xe0
    8612:	9c43      	ldr	r4, [sp, #268]	; 0x10c
    8614:	9d44      	ldr	r5, [sp, #272]	; 0x110
    8616:	f89d 7115 	ldrb.w	r7, [sp, #277]	; 0x115
    861a:	f89d 0116 	ldrb.w	r0, [sp, #278]	; 0x116
    861e:	f8bd 2118 	ldrh.w	r2, [sp, #280]	; 0x118
    8622:	9b47      	ldr	r3, [sp, #284]	; 0x11c
    8624:	f89d 8114 	ldrb.w	r8, [sp, #276]	; 0x114
    8628:	f89d c120 	ldrb.w	ip, [sp, #288]	; 0x120
    862c:	f89d e121 	ldrb.w	lr, [sp, #289]	; 0x121
    8630:	f8c1 40ec 	str.w	r4, [r1, #236]	; 0xec
    8634:	9e49      	ldr	r6, [sp, #292]	; 0x124
    8636:	9c4b      	ldr	r4, [sp, #300]	; 0x12c
    8638:	f8c1 50f0 	str.w	r5, [r1, #240]	; 0xf0
    863c:	f881 70f5 	strb.w	r7, [r1, #245]	; 0xf5
    8640:	9d4a      	ldr	r5, [sp, #296]	; 0x128
    8642:	f8bd 7130 	ldrh.w	r7, [sp, #304]	; 0x130
    8646:	f881 00f6 	strb.w	r0, [r1, #246]	; 0xf6
    864a:	f8a1 20f8 	strh.w	r2, [r1, #248]	; 0xf8
    864e:	f8bd 0132 	ldrh.w	r0, [sp, #306]	; 0x132
    8652:	f89d 2134 	ldrb.w	r2, [sp, #308]	; 0x134
    8656:	f8c1 30fc 	str.w	r3, [r1, #252]	; 0xfc
    865a:	9b4e      	ldr	r3, [sp, #312]	; 0x138
    865c:	f881 80f4 	strb.w	r8, [r1, #244]	; 0xf4
    8660:	f881 c100 	strb.w	ip, [r1, #256]	; 0x100
    8664:	f881 e101 	strb.w	lr, [r1, #257]	; 0x101
    8668:	f8c1 5108 	str.w	r5, [r1, #264]	; 0x108
    866c:	f8c1 410c 	str.w	r4, [r1, #268]	; 0x10c
    8670:	f8a1 7110 	strh.w	r7, [r1, #272]	; 0x110
    8674:	f8a1 0112 	strh.w	r0, [r1, #274]	; 0x112
    8678:	f881 2114 	strb.w	r2, [r1, #276]	; 0x114
    867c:	f8c1 3118 	str.w	r3, [r1, #280]	; 0x118
    8680:	f8c1 6104 	str.w	r6, [r1, #260]	; 0x104
    8684:	9e4f      	ldr	r6, [sp, #316]	; 0x13c
    8686:	9b50      	ldr	r3, [sp, #320]	; 0x140
    8688:	9d51      	ldr	r5, [sp, #324]	; 0x144
    868a:	9852      	ldr	r0, [sp, #328]	; 0x148
    868c:	f89d c14c 	ldrb.w	ip, [sp, #332]	; 0x14c
    8690:	f89d e14d 	ldrb.w	lr, [sp, #333]	; 0x14d
    8694:	f89d 714e 	ldrb.w	r7, [sp, #334]	; 0x14e
    8698:	f8c1 3120 	str.w	r3, [r1, #288]	; 0x120
    869c:	9b54      	ldr	r3, [sp, #336]	; 0x150
    869e:	f89d 814f 	ldrb.w	r8, [sp, #335]	; 0x14f
    86a2:	f8c1 611c 	str.w	r6, [r1, #284]	; 0x11c
    86a6:	f8c1 5124 	str.w	r5, [r1, #292]	; 0x124
    86aa:	f8bd 6154 	ldrh.w	r6, [sp, #340]	; 0x154
    86ae:	f8c1 0128 	str.w	r0, [r1, #296]	; 0x128
    86b2:	f8bd 5156 	ldrh.w	r5, [sp, #342]	; 0x156
    86b6:	f89d 015d 	ldrb.w	r0, [sp, #349]	; 0x15d
    86ba:	f881 c12c 	strb.w	ip, [r1, #300]	; 0x12c
    86be:	f881 e12d 	strb.w	lr, [r1, #301]	; 0x12d
    86c2:	f8bd c158 	ldrh.w	ip, [sp, #344]	; 0x158
    86c6:	f8bd e15a 	ldrh.w	lr, [sp, #346]	; 0x15a
    86ca:	f881 712e 	strb.w	r7, [r1, #302]	; 0x12e
    86ce:	f8c1 3130 	str.w	r3, [r1, #304]	; 0x130
    86d2:	f89d 715c 	ldrb.w	r7, [sp, #348]	; 0x15c
    86d6:	f89d 315e 	ldrb.w	r3, [sp, #350]	; 0x15e
                              &Mtr0_B, &Mtr0_HLFB_SCRx, 4, EVSYS_M0);
    ConnectorM1 = MotorDriver(ShiftRegister::SR_EN_OUT_1_MASK, &Mtr1_An,
    86da:	4a2b      	ldr	r2, [pc, #172]	; (8788 <_ZN9ClearCore10SysManagerC1Ev+0xde0>)
    86dc:	f8a1 c138 	strh.w	ip, [r1, #312]	; 0x138
    86e0:	f8a1 e13a 	strh.w	lr, [r1, #314]	; 0x13a
    86e4:	2401      	movs	r4, #1
    86e6:	f881 812f 	strb.w	r8, [r1, #303]	; 0x12f
    86ea:	f8a1 6134 	strh.w	r6, [r1, #308]	; 0x134
    86ee:	f881 713c 	strb.w	r7, [r1, #316]	; 0x13c
    86f2:	f881 013d 	strb.w	r0, [r1, #317]	; 0x13d
    86f6:	f881 313e 	strb.w	r3, [r1, #318]	; 0x13e
    86fa:	2605      	movs	r6, #5
    86fc:	f8a1 5136 	strh.w	r5, [r1, #310]	; 0x136
    8700:	9d58      	ldr	r5, [sp, #352]	; 0x160
    8702:	4f22      	ldr	r7, [pc, #136]	; (878c <_ZN9ClearCore10SysManagerC1Ev+0xde4>)
    8704:	9402      	str	r4, [sp, #8]
    8706:	e88d 0044 	stmia.w	sp, {r2, r6}
    870a:	a808      	add	r0, sp, #32
    870c:	f8c1 5140 	str.w	r5, [r1, #320]	; 0x140
    8710:	4b1f      	ldr	r3, [pc, #124]	; (8790 <_ZN9ClearCore10SysManagerC1Ev+0xde8>)
    8712:	4a20      	ldr	r2, [pc, #128]	; (8794 <_ZN9ClearCore10SysManagerC1Ev+0xdec>)
    8714:	f44f 6180 	mov.w	r1, #1024	; 0x400
    8718:	f7fc fc58 	bl	4fcc <_ZN9ClearCore11MotorDriverC1ENS_13ShiftRegister5MasksEPK15PeripheralRouteS5_S5_tt>
    871c:	f89d 1026 	ldrb.w	r1, [sp, #38]	; 0x26
    8720:	f8bd 2024 	ldrh.w	r2, [sp, #36]	; 0x24
    8724:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    8726:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
    8728:	9d0c      	ldr	r5, [sp, #48]	; 0x30
    872a:	980d      	ldr	r0, [sp, #52]	; 0x34
    872c:	71b9      	strb	r1, [r7, #6]
    872e:	990f      	ldr	r1, [sp, #60]	; 0x3c
    8730:	f89d 8038 	ldrb.w	r8, [sp, #56]	; 0x38
    8734:	f89d e048 	ldrb.w	lr, [sp, #72]	; 0x48
    8738:	f8dd a04a 	ldr.w	sl, [sp, #74]	; 0x4a
    873c:	f89d c039 	ldrb.w	ip, [sp, #57]	; 0x39
    8740:	80ba      	strh	r2, [r7, #4]
    8742:	60bb      	str	r3, [r7, #8]
    8744:	9a10      	ldr	r2, [sp, #64]	; 0x40
    8746:	9b11      	ldr	r3, [sp, #68]	; 0x44
    8748:	60fe      	str	r6, [r7, #12]
    874a:	613d      	str	r5, [r7, #16]
    874c:	f89d 605c 	ldrb.w	r6, [sp, #92]	; 0x5c
    8750:	9d15      	ldr	r5, [sp, #84]	; 0x54
    8752:	6178      	str	r0, [r7, #20]
    8754:	61f9      	str	r1, [r7, #28]
    8756:	9816      	ldr	r0, [sp, #88]	; 0x58
    8758:	f887 8018 	strb.w	r8, [r7, #24]
    875c:	a919      	add	r1, sp, #100	; 0x64
    875e:	623a      	str	r2, [r7, #32]
    8760:	627b      	str	r3, [r7, #36]	; 0x24
    8762:	f887 e028 	strb.w	lr, [r7, #40]	; 0x28
    8766:	f8c7 a02a 	str.w	sl, [r7, #42]	; 0x2a
    876a:	637d      	str	r5, [r7, #52]	; 0x34
    876c:	63b8      	str	r0, [r7, #56]	; 0x38
    876e:	f887 603c 	strb.w	r6, [r7, #60]	; 0x3c
    8772:	f887 c019 	strb.w	ip, [r7, #25]
    8776:	e00f      	b.n	8798 <_ZN9ClearCore10SysManagerC1Ev+0xdf0>
    8778:	00022f90 	.word	0x00022f90
    877c:	00023100 	.word	0x00023100
    8780:	00022f40 	.word	0x00022f40
    8784:	20000b68 	.word	0x20000b68
    8788:	00023130 	.word	0x00023130
    878c:	20000cb0 	.word	0x20000cb0
    8790:	00023110 	.word	0x00023110
    8794:	00023120 	.word	0x00023120
    8798:	f89d c05d 	ldrb.w	ip, [sp, #93]	; 0x5d
    879c:	f89d 605e 	ldrb.w	r6, [sp, #94]	; 0x5e
    87a0:	f89d 0060 	ldrb.w	r0, [sp, #96]	; 0x60
    87a4:	f89d 5071 	ldrb.w	r5, [sp, #113]	; 0x71
    87a8:	f887 603e 	strb.w	r6, [r7, #62]	; 0x3e
    87ac:	c90e      	ldmia	r1, {r1, r2, r3}
    87ae:	e9dd ab22 	ldrd	sl, fp, [sp, #136]	; 0x88
    87b2:	f89d 6072 	ldrb.w	r6, [sp, #114]	; 0x72
    87b6:	f89d e070 	ldrb.w	lr, [sp, #112]	; 0x70
    87ba:	f887 0040 	strb.w	r0, [r7, #64]	; 0x40
    87be:	6479      	str	r1, [r7, #68]	; 0x44
    87c0:	981d      	ldr	r0, [sp, #116]	; 0x74
    87c2:	991e      	ldr	r1, [sp, #120]	; 0x78
    87c4:	64ba      	str	r2, [r7, #72]	; 0x48
    87c6:	64fb      	str	r3, [r7, #76]	; 0x4c
    87c8:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
    87ca:	9b20      	ldr	r3, [sp, #128]	; 0x80
    87cc:	f887 5051 	strb.w	r5, [r7, #81]	; 0x51
    87d0:	f887 6052 	strb.w	r6, [r7, #82]	; 0x52
    87d4:	9d24      	ldr	r5, [sp, #144]	; 0x90
    87d6:	9e25      	ldr	r6, [sp, #148]	; 0x94
    87d8:	f887 c03d 	strb.w	ip, [r7, #61]	; 0x3d
    87dc:	f887 e050 	strb.w	lr, [r7, #80]	; 0x50
    87e0:	6578      	str	r0, [r7, #84]	; 0x54
    87e2:	65b9      	str	r1, [r7, #88]	; 0x58
    87e4:	65fa      	str	r2, [r7, #92]	; 0x5c
    87e6:	663b      	str	r3, [r7, #96]	; 0x60
    87e8:	673d      	str	r5, [r7, #112]	; 0x70
    87ea:	677e      	str	r6, [r7, #116]	; 0x74
    87ec:	e9c7 ab1a 	strd	sl, fp, [r7, #104]	; 0x68
    87f0:	e9dd ab26 	ldrd	sl, fp, [sp, #152]	; 0x98
    87f4:	e9dd 232a 	ldrd	r2, r3, [sp, #168]	; 0xa8
    87f8:	9928      	ldr	r1, [sp, #160]	; 0xa0
    87fa:	982e      	ldr	r0, [sp, #184]	; 0xb8
    87fc:	f8c7 1080 	str.w	r1, [r7, #128]	; 0x80
    8800:	4615      	mov	r5, r2
    8802:	9a2c      	ldr	r2, [sp, #176]	; 0xb0
    8804:	992f      	ldr	r1, [sp, #188]	; 0xbc
    8806:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
    880a:	461e      	mov	r6, r3
    880c:	9a30      	ldr	r2, [sp, #192]	; 0xc0
    880e:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
    8810:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    8814:	f8c7 0098 	str.w	r0, [r7, #152]	; 0x98
    8818:	9b31      	ldr	r3, [sp, #196]	; 0xc4
    881a:	9832      	ldr	r0, [sp, #200]	; 0xc8
    881c:	f8c7 109c 	str.w	r1, [r7, #156]	; 0x9c
    8820:	f8c7 20a0 	str.w	r2, [r7, #160]	; 0xa0
    8824:	9933      	ldr	r1, [sp, #204]	; 0xcc
    8826:	9a34      	ldr	r2, [sp, #208]	; 0xd0
    8828:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    882c:	f8c7 00a8 	str.w	r0, [r7, #168]	; 0xa8
    8830:	9b35      	ldr	r3, [sp, #212]	; 0xd4
    8832:	9836      	ldr	r0, [sp, #216]	; 0xd8
    8834:	f8c7 10ac 	str.w	r1, [r7, #172]	; 0xac
    8838:	f8c7 20b0 	str.w	r2, [r7, #176]	; 0xb0
    883c:	9937      	ldr	r1, [sp, #220]	; 0xdc
    883e:	9a38      	ldr	r2, [sp, #224]	; 0xe0
    8840:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    8844:	e9c7 ab1e 	strd	sl, fp, [r7, #120]	; 0x78
    8848:	e9c7 5622 	strd	r5, r6, [r7, #136]	; 0x88
    884c:	f8c7 00b8 	str.w	r0, [r7, #184]	; 0xb8
    8850:	f8c7 10bc 	str.w	r1, [r7, #188]	; 0xbc
    8854:	f8c7 20c0 	str.w	r2, [r7, #192]	; 0xc0
    8858:	9d39      	ldr	r5, [sp, #228]	; 0xe4
    885a:	983a      	ldr	r0, [sp, #232]	; 0xe8
    885c:	993b      	ldr	r1, [sp, #236]	; 0xec
    885e:	f89d 20f6 	ldrb.w	r2, [sp, #246]	; 0xf6
    8862:	f89d 30f7 	ldrb.w	r3, [sp, #247]	; 0xf7
    8866:	f8bd b0f0 	ldrh.w	fp, [sp, #240]	; 0xf0
    886a:	f8bd a0f2 	ldrh.w	sl, [sp, #242]	; 0xf2
    886e:	f8bd 80f4 	ldrh.w	r8, [sp, #244]	; 0xf4
    8872:	f89d c0f8 	ldrb.w	ip, [sp, #248]	; 0xf8
    8876:	f8bd e0fa 	ldrh.w	lr, [sp, #250]	; 0xfa
    887a:	f8bd 60fc 	ldrh.w	r6, [sp, #252]	; 0xfc
    887e:	f8c7 50c4 	str.w	r5, [r7, #196]	; 0xc4
    8882:	f8c7 00c8 	str.w	r0, [r7, #200]	; 0xc8
    8886:	f8bd 50fe 	ldrh.w	r5, [sp, #254]	; 0xfe
    888a:	f8bd 0100 	ldrh.w	r0, [sp, #256]	; 0x100
    888e:	f8c7 10cc 	str.w	r1, [r7, #204]	; 0xcc
    8892:	f887 20d6 	strb.w	r2, [r7, #214]	; 0xd6
    8896:	f8bd 1102 	ldrh.w	r1, [sp, #258]	; 0x102
    889a:	f89d 2104 	ldrb.w	r2, [sp, #260]	; 0x104
    889e:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
    88a2:	9b42      	ldr	r3, [sp, #264]	; 0x108
    88a4:	f8a7 b0d0 	strh.w	fp, [r7, #208]	; 0xd0
    88a8:	f8a7 a0d2 	strh.w	sl, [r7, #210]	; 0xd2
    88ac:	f8a7 80d4 	strh.w	r8, [r7, #212]	; 0xd4
    88b0:	f887 c0d8 	strb.w	ip, [r7, #216]	; 0xd8
    88b4:	f8a7 e0da 	strh.w	lr, [r7, #218]	; 0xda
    88b8:	f8a7 60dc 	strh.w	r6, [r7, #220]	; 0xdc
    88bc:	f8a7 50de 	strh.w	r5, [r7, #222]	; 0xde
    88c0:	f8a7 00e0 	strh.w	r0, [r7, #224]	; 0xe0
    88c4:	f887 20e4 	strb.w	r2, [r7, #228]	; 0xe4
    88c8:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    88cc:	f8a7 10e2 	strh.w	r1, [r7, #226]	; 0xe2
    88d0:	9943      	ldr	r1, [sp, #268]	; 0x10c
    88d2:	9d44      	ldr	r5, [sp, #272]	; 0x110
    88d4:	f89d 0114 	ldrb.w	r0, [sp, #276]	; 0x114
    88d8:	f89d e115 	ldrb.w	lr, [sp, #277]	; 0x115
    88dc:	f89d 6116 	ldrb.w	r6, [sp, #278]	; 0x116
    88e0:	f8bd 2118 	ldrh.w	r2, [sp, #280]	; 0x118
    88e4:	9b47      	ldr	r3, [sp, #284]	; 0x11c
    88e6:	f89d 8120 	ldrb.w	r8, [sp, #288]	; 0x120
    88ea:	f89d c121 	ldrb.w	ip, [sp, #289]	; 0x121
    88ee:	f8c7 10ec 	str.w	r1, [r7, #236]	; 0xec
    88f2:	f8c7 50f0 	str.w	r5, [r7, #240]	; 0xf0
    88f6:	994b      	ldr	r1, [sp, #300]	; 0x12c
    88f8:	9d49      	ldr	r5, [sp, #292]	; 0x124
    88fa:	f887 00f4 	strb.w	r0, [r7, #244]	; 0xf4
    88fe:	f887 e0f5 	strb.w	lr, [r7, #245]	; 0xf5
    8902:	984a      	ldr	r0, [sp, #296]	; 0x128
    8904:	f8bd e130 	ldrh.w	lr, [sp, #304]	; 0x130
    8908:	f887 60f6 	strb.w	r6, [r7, #246]	; 0xf6
    890c:	f8a7 20f8 	strh.w	r2, [r7, #248]	; 0xf8
    8910:	f8bd 6132 	ldrh.w	r6, [sp, #306]	; 0x132
    8914:	f89d 2134 	ldrb.w	r2, [sp, #308]	; 0x134
    8918:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
    891c:	9b4e      	ldr	r3, [sp, #312]	; 0x138
    891e:	f887 8100 	strb.w	r8, [r7, #256]	; 0x100
    8922:	f887 c101 	strb.w	ip, [r7, #257]	; 0x101
    8926:	f8c7 0108 	str.w	r0, [r7, #264]	; 0x108
    892a:	f8c7 110c 	str.w	r1, [r7, #268]	; 0x10c
    892e:	f8a7 e110 	strh.w	lr, [r7, #272]	; 0x110
    8932:	f8a7 6112 	strh.w	r6, [r7, #274]	; 0x112
    8936:	f887 2114 	strb.w	r2, [r7, #276]	; 0x114
    893a:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
    893e:	f8c7 5104 	str.w	r5, [r7, #260]	; 0x104
    8942:	9d4f      	ldr	r5, [sp, #316]	; 0x13c
    8944:	9b50      	ldr	r3, [sp, #320]	; 0x140
    8946:	9851      	ldr	r0, [sp, #324]	; 0x144
    8948:	9952      	ldr	r1, [sp, #328]	; 0x148
    894a:	f89d c14c 	ldrb.w	ip, [sp, #332]	; 0x14c
    894e:	f89d e14d 	ldrb.w	lr, [sp, #333]	; 0x14d
    8952:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
    8956:	9b54      	ldr	r3, [sp, #336]	; 0x150
    8958:	f89d 614e 	ldrb.w	r6, [sp, #334]	; 0x14e
    895c:	f8bd 8154 	ldrh.w	r8, [sp, #340]	; 0x154
    8960:	f89d a15d 	ldrb.w	sl, [sp, #349]	; 0x15d
    8964:	f8c7 511c 	str.w	r5, [r7, #284]	; 0x11c
    8968:	f8c7 0124 	str.w	r0, [r7, #292]	; 0x124
    896c:	f89d 514f 	ldrb.w	r5, [sp, #335]	; 0x14f
    8970:	f8bd 0156 	ldrh.w	r0, [sp, #342]	; 0x156
    8974:	f8c7 1128 	str.w	r1, [r7, #296]	; 0x128
    8978:	f887 c12c 	strb.w	ip, [r7, #300]	; 0x12c
    897c:	f8bd 1158 	ldrh.w	r1, [sp, #344]	; 0x158
    8980:	f89d c15c 	ldrb.w	ip, [sp, #348]	; 0x15c
    8984:	f887 e12d 	strb.w	lr, [r7, #301]	; 0x12d
    8988:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
    898c:	f8bd e15a 	ldrh.w	lr, [sp, #346]	; 0x15a
    8990:	f89d 315e 	ldrb.w	r3, [sp, #350]	; 0x15e
                              &Mtr1_B, &Mtr1_HLFB, 5, EVSYS_M1);
    ConnectorM2 = MotorDriver(ShiftRegister::SR_EN_OUT_2_MASK,
    8994:	4aca      	ldr	r2, [pc, #808]	; (8cc0 <_ZN9ClearCore10SysManagerC1Ev+0x1318>)
    8996:	f8a7 e13a 	strh.w	lr, [r7, #314]	; 0x13a
    899a:	f887 c13c 	strb.w	ip, [r7, #316]	; 0x13c
    899e:	f887 612e 	strb.w	r6, [r7, #302]	; 0x12e
    89a2:	f887 512f 	strb.w	r5, [r7, #303]	; 0x12f
    89a6:	f8a7 8134 	strh.w	r8, [r7, #308]	; 0x134
    89aa:	2503      	movs	r5, #3
    89ac:	2602      	movs	r6, #2
    89ae:	f8a7 0136 	strh.w	r0, [r7, #310]	; 0x136
    89b2:	f887 a13d 	strb.w	sl, [r7, #317]	; 0x13d
    89b6:	f887 313e 	strb.w	r3, [r7, #318]	; 0x13e
    89ba:	f8a7 1138 	strh.w	r1, [r7, #312]	; 0x138
    89be:	9958      	ldr	r1, [sp, #352]	; 0x160
    89c0:	4bc0      	ldr	r3, [pc, #768]	; (8cc4 <_ZN9ClearCore10SysManagerC1Ev+0x131c>)
    89c2:	e88d 0064 	stmia.w	sp, {r2, r5, r6}
    89c6:	a808      	add	r0, sp, #32
    89c8:	f8c7 1140 	str.w	r1, [r7, #320]	; 0x140
    89cc:	4abe      	ldr	r2, [pc, #760]	; (8cc8 <_ZN9ClearCore10SysManagerC1Ev+0x1320>)
    89ce:	4fbf      	ldr	r7, [pc, #764]	; (8ccc <_ZN9ClearCore10SysManagerC1Ev+0x1324>)
    89d0:	f44f 7100 	mov.w	r1, #512	; 0x200
    89d4:	f7fc fafa 	bl	4fcc <_ZN9ClearCore11MotorDriverC1ENS_13ShiftRegister5MasksEPK15PeripheralRouteS5_S5_tt>
    89d8:	f8bd c024 	ldrh.w	ip, [sp, #36]	; 0x24
    89dc:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    89de:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    89e0:	990d      	ldr	r1, [sp, #52]	; 0x34
    89e2:	f89d e026 	ldrb.w	lr, [sp, #38]	; 0x26
    89e6:	980c      	ldr	r0, [sp, #48]	; 0x30
    89e8:	f8a7 c004 	strh.w	ip, [r7, #4]
    89ec:	60ba      	str	r2, [r7, #8]
    89ee:	f89d c038 	ldrb.w	ip, [sp, #56]	; 0x38
    89f2:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
    89f4:	60fb      	str	r3, [r7, #12]
    89f6:	6179      	str	r1, [r7, #20]
    89f8:	9b10      	ldr	r3, [sp, #64]	; 0x40
    89fa:	9915      	ldr	r1, [sp, #84]	; 0x54
    89fc:	f89d 8048 	ldrb.w	r8, [sp, #72]	; 0x48
    8a00:	f887 e006 	strb.w	lr, [r7, #6]
    8a04:	6138      	str	r0, [r7, #16]
    8a06:	f89d e039 	ldrb.w	lr, [sp, #57]	; 0x39
    8a0a:	9811      	ldr	r0, [sp, #68]	; 0x44
    8a0c:	f887 c018 	strb.w	ip, [r7, #24]
    8a10:	61fa      	str	r2, [r7, #28]
    8a12:	f8dd c04a 	ldr.w	ip, [sp, #74]	; 0x4a
    8a16:	9a16      	ldr	r2, [sp, #88]	; 0x58
    8a18:	623b      	str	r3, [r7, #32]
    8a1a:	6379      	str	r1, [r7, #52]	; 0x34
    8a1c:	f89d 305c 	ldrb.w	r3, [sp, #92]	; 0x5c
    8a20:	f887 e019 	strb.w	lr, [r7, #25]
    8a24:	a919      	add	r1, sp, #100	; 0x64
    8a26:	6278      	str	r0, [r7, #36]	; 0x24
    8a28:	f887 8028 	strb.w	r8, [r7, #40]	; 0x28
    8a2c:	63ba      	str	r2, [r7, #56]	; 0x38
    8a2e:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
    8a32:	f8c7 c02a 	str.w	ip, [r7, #42]	; 0x2a
    8a36:	f89d c05d 	ldrb.w	ip, [sp, #93]	; 0x5d
    8a3a:	f89d 0060 	ldrb.w	r0, [sp, #96]	; 0x60
    8a3e:	f89d e05e 	ldrb.w	lr, [sp, #94]	; 0x5e
    8a42:	f887 0040 	strb.w	r0, [r7, #64]	; 0x40
    8a46:	c90e      	ldmia	r1, {r1, r2, r3}
    8a48:	e9dd ab22 	ldrd	sl, fp, [sp, #136]	; 0x88
    8a4c:	f89d 0072 	ldrb.w	r0, [sp, #114]	; 0x72
    8a50:	6479      	str	r1, [r7, #68]	; 0x44
    8a52:	64ba      	str	r2, [r7, #72]	; 0x48
    8a54:	991d      	ldr	r1, [sp, #116]	; 0x74
    8a56:	9a1e      	ldr	r2, [sp, #120]	; 0x78
    8a58:	f887 c03d 	strb.w	ip, [r7, #61]	; 0x3d
    8a5c:	f887 e03e 	strb.w	lr, [r7, #62]	; 0x3e
    8a60:	f89d c070 	ldrb.w	ip, [sp, #112]	; 0x70
    8a64:	f89d e071 	ldrb.w	lr, [sp, #113]	; 0x71
    8a68:	64fb      	str	r3, [r7, #76]	; 0x4c
    8a6a:	f887 0052 	strb.w	r0, [r7, #82]	; 0x52
    8a6e:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
    8a70:	9820      	ldr	r0, [sp, #128]	; 0x80
    8a72:	6579      	str	r1, [r7, #84]	; 0x54
    8a74:	65ba      	str	r2, [r7, #88]	; 0x58
    8a76:	9924      	ldr	r1, [sp, #144]	; 0x90
    8a78:	9a25      	ldr	r2, [sp, #148]	; 0x94
    8a7a:	f887 c050 	strb.w	ip, [r7, #80]	; 0x50
    8a7e:	f887 e051 	strb.w	lr, [r7, #81]	; 0x51
    8a82:	65fb      	str	r3, [r7, #92]	; 0x5c
    8a84:	e9c7 ab1a 	strd	sl, fp, [r7, #104]	; 0x68
    8a88:	677a      	str	r2, [r7, #116]	; 0x74
    8a8a:	6638      	str	r0, [r7, #96]	; 0x60
    8a8c:	6739      	str	r1, [r7, #112]	; 0x70
    8a8e:	e9dd 0126 	ldrd	r0, r1, [sp, #152]	; 0x98
    8a92:	9b28      	ldr	r3, [sp, #160]	; 0xa0
    8a94:	9a2c      	ldr	r2, [sp, #176]	; 0xb0
    8a96:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    8a9a:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
    8a9e:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
    8aa0:	9a2e      	ldr	r2, [sp, #184]	; 0xb8
    8aa2:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    8aa6:	f8c7 2098 	str.w	r2, [r7, #152]	; 0x98
    8aaa:	9b2f      	ldr	r3, [sp, #188]	; 0xbc
    8aac:	9a30      	ldr	r2, [sp, #192]	; 0xc0
    8aae:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    8ab2:	f8c7 20a0 	str.w	r2, [r7, #160]	; 0xa0
    8ab6:	9b31      	ldr	r3, [sp, #196]	; 0xc4
    8ab8:	9a32      	ldr	r2, [sp, #200]	; 0xc8
    8aba:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    8abe:	e9dd ab2a 	ldrd	sl, fp, [sp, #168]	; 0xa8
    8ac2:	9b33      	ldr	r3, [sp, #204]	; 0xcc
    8ac4:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
    8ac8:	9a34      	ldr	r2, [sp, #208]	; 0xd0
    8aca:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    8ace:	f8c7 20b0 	str.w	r2, [r7, #176]	; 0xb0
    8ad2:	9b35      	ldr	r3, [sp, #212]	; 0xd4
    8ad4:	9a36      	ldr	r2, [sp, #216]	; 0xd8
    8ad6:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    8ada:	e9c7 011e 	strd	r0, r1, [r7, #120]	; 0x78
    8ade:	9b37      	ldr	r3, [sp, #220]	; 0xdc
    8ae0:	f8c7 20b8 	str.w	r2, [r7, #184]	; 0xb8
    8ae4:	a939      	add	r1, sp, #228	; 0xe4
    8ae6:	9a38      	ldr	r2, [sp, #224]	; 0xe0
    8ae8:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    8aec:	e9c7 ab22 	strd	sl, fp, [r7, #136]	; 0x88
    8af0:	f8c7 20c0 	str.w	r2, [r7, #192]	; 0xc0
    8af4:	c90e      	ldmia	r1, {r1, r2, r3}
    8af6:	f8bd c0f2 	ldrh.w	ip, [sp, #242]	; 0xf2
    8afa:	f8bd e0f4 	ldrh.w	lr, [sp, #244]	; 0xf4
    8afe:	f89d 00f6 	ldrb.w	r0, [sp, #246]	; 0xf6
    8b02:	f8c7 10c4 	str.w	r1, [r7, #196]	; 0xc4
    8b06:	f8c7 20c8 	str.w	r2, [r7, #200]	; 0xc8
    8b0a:	f89d 10f7 	ldrb.w	r1, [sp, #247]	; 0xf7
    8b0e:	f89d 20f8 	ldrb.w	r2, [sp, #248]	; 0xf8
    8b12:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    8b16:	f8bd 30fa 	ldrh.w	r3, [sp, #250]	; 0xfa
    8b1a:	f8bd 80f0 	ldrh.w	r8, [sp, #240]	; 0xf0
    8b1e:	f8a7 c0d2 	strh.w	ip, [r7, #210]	; 0xd2
    8b22:	f8a7 e0d4 	strh.w	lr, [r7, #212]	; 0xd4
    8b26:	f8bd c0fc 	ldrh.w	ip, [sp, #252]	; 0xfc
    8b2a:	f8bd e0fe 	ldrh.w	lr, [sp, #254]	; 0xfe
    8b2e:	f887 00d6 	strb.w	r0, [r7, #214]	; 0xd6
    8b32:	f887 10d7 	strb.w	r1, [r7, #215]	; 0xd7
    8b36:	f8bd 0100 	ldrh.w	r0, [sp, #256]	; 0x100
    8b3a:	f8bd 1102 	ldrh.w	r1, [sp, #258]	; 0x102
    8b3e:	f887 20d8 	strb.w	r2, [r7, #216]	; 0xd8
    8b42:	f8a7 30da 	strh.w	r3, [r7, #218]	; 0xda
    8b46:	f89d 2104 	ldrb.w	r2, [sp, #260]	; 0x104
    8b4a:	9b42      	ldr	r3, [sp, #264]	; 0x108
    8b4c:	f8a7 80d0 	strh.w	r8, [r7, #208]	; 0xd0
    8b50:	f8a7 c0dc 	strh.w	ip, [r7, #220]	; 0xdc
    8b54:	f8a7 e0de 	strh.w	lr, [r7, #222]	; 0xde
    8b58:	f8a7 00e0 	strh.w	r0, [r7, #224]	; 0xe0
    8b5c:	f8a7 10e2 	strh.w	r1, [r7, #226]	; 0xe2
    8b60:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    8b64:	f887 20e4 	strb.w	r2, [r7, #228]	; 0xe4
    8b68:	9a43      	ldr	r2, [sp, #268]	; 0x10c
    8b6a:	f8dd e110 	ldr.w	lr, [sp, #272]	; 0x110
    8b6e:	f89d 8114 	ldrb.w	r8, [sp, #276]	; 0x114
    8b72:	f89d c115 	ldrb.w	ip, [sp, #277]	; 0x115
    8b76:	f89d 3116 	ldrb.w	r3, [sp, #278]	; 0x116
    8b7a:	f8bd 0118 	ldrh.w	r0, [sp, #280]	; 0x118
    8b7e:	9947      	ldr	r1, [sp, #284]	; 0x11c
    8b80:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
    8b84:	f8c7 e0f0 	str.w	lr, [r7, #240]	; 0xf0
    8b88:	9a49      	ldr	r2, [sp, #292]	; 0x124
    8b8a:	f89d e120 	ldrb.w	lr, [sp, #288]	; 0x120
    8b8e:	f887 80f4 	strb.w	r8, [r7, #244]	; 0xf4
    8b92:	f887 c0f5 	strb.w	ip, [r7, #245]	; 0xf5
    8b96:	f89d 8121 	ldrb.w	r8, [sp, #289]	; 0x121
    8b9a:	f8bd c130 	ldrh.w	ip, [sp, #304]	; 0x130
    8b9e:	f887 30f6 	strb.w	r3, [r7, #246]	; 0xf6
    8ba2:	f8a7 00f8 	strh.w	r0, [r7, #248]	; 0xf8
    8ba6:	9b4a      	ldr	r3, [sp, #296]	; 0x128
    8ba8:	984b      	ldr	r0, [sp, #300]	; 0x12c
    8baa:	f8c7 10fc 	str.w	r1, [r7, #252]	; 0xfc
    8bae:	f887 e100 	strb.w	lr, [r7, #256]	; 0x100
    8bb2:	f89d 1134 	ldrb.w	r1, [sp, #308]	; 0x134
    8bb6:	f8bd e132 	ldrh.w	lr, [sp, #306]	; 0x132
    8bba:	f8c7 2104 	str.w	r2, [r7, #260]	; 0x104
    8bbe:	9a4e      	ldr	r2, [sp, #312]	; 0x138
    8bc0:	f887 8101 	strb.w	r8, [r7, #257]	; 0x101
    8bc4:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
    8bc8:	f8c7 010c 	str.w	r0, [r7, #268]	; 0x10c
    8bcc:	f8a7 c110 	strh.w	ip, [r7, #272]	; 0x110
    8bd0:	f8a7 e112 	strh.w	lr, [r7, #274]	; 0x112
    8bd4:	f8c7 2118 	str.w	r2, [r7, #280]	; 0x118
    8bd8:	f887 1114 	strb.w	r1, [r7, #276]	; 0x114
    8bdc:	994f      	ldr	r1, [sp, #316]	; 0x13c
    8bde:	9b51      	ldr	r3, [sp, #324]	; 0x144
    8be0:	9a50      	ldr	r2, [sp, #320]	; 0x140
    8be2:	f8c7 111c 	str.w	r1, [r7, #284]	; 0x11c
    8be6:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
    8bea:	f89d 114d 	ldrb.w	r1, [sp, #333]	; 0x14d
    8bee:	f89d 314f 	ldrb.w	r3, [sp, #335]	; 0x14f
    8bf2:	9852      	ldr	r0, [sp, #328]	; 0x148
    8bf4:	f89d c14e 	ldrb.w	ip, [sp, #334]	; 0x14e
    8bf8:	f8c7 2120 	str.w	r2, [r7, #288]	; 0x120
    8bfc:	f887 112d 	strb.w	r1, [r7, #301]	; 0x12d
    8c00:	9a54      	ldr	r2, [sp, #336]	; 0x150
    8c02:	f8bd 1154 	ldrh.w	r1, [sp, #340]	; 0x154
    8c06:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
    8c0a:	f8bd 3158 	ldrh.w	r3, [sp, #344]	; 0x158
    8c0e:	f89d a14c 	ldrb.w	sl, [sp, #332]	; 0x14c
    8c12:	f8c7 0128 	str.w	r0, [r7, #296]	; 0x128
    8c16:	f887 c12e 	strb.w	ip, [r7, #302]	; 0x12e
    8c1a:	f8bd 015a 	ldrh.w	r0, [sp, #346]	; 0x15a
    8c1e:	f8bd c156 	ldrh.w	ip, [sp, #342]	; 0x156
    8c22:	f8c7 2130 	str.w	r2, [r7, #304]	; 0x130
    8c26:	f8a7 1134 	strh.w	r1, [r7, #308]	; 0x134
    8c2a:	f89d 215d 	ldrb.w	r2, [sp, #349]	; 0x15d
    8c2e:	f89d 115c 	ldrb.w	r1, [sp, #348]	; 0x15c
    8c32:	f8a7 3138 	strh.w	r3, [r7, #312]	; 0x138
    8c36:	f89d 315e 	ldrb.w	r3, [sp, #350]	; 0x15e
    8c3a:	f8a7 c136 	strh.w	ip, [r7, #310]	; 0x136
                              &Mtr2_An_Sdrvr2_PWMA, &Mtr2_B_Sdrvr2_PWMB,
                              &Mtr2_HLFB_Sdrvr2_Trig, 3, EVSYS_M2);
    ConnectorM3 = MotorDriver(ShiftRegister::SR_EN_OUT_3_MASK,
    8c3e:	f04f 0800 	mov.w	r8, #0
    8c42:	f8df e098 	ldr.w	lr, [pc, #152]	; 8cdc <_ZN9ClearCore10SysManagerC1Ev+0x1334>
    8c46:	f887 a12c 	strb.w	sl, [r7, #300]	; 0x12c
    8c4a:	f8a7 013a 	strh.w	r0, [r7, #314]	; 0x13a
    8c4e:	f887 213d 	strb.w	r2, [r7, #317]	; 0x13d
    8c52:	f887 313e 	strb.w	r3, [r7, #318]	; 0x13e
    8c56:	f887 113c 	strb.w	r1, [r7, #316]	; 0x13c
    8c5a:	9958      	ldr	r1, [sp, #352]	; 0x160
    8c5c:	4b1c      	ldr	r3, [pc, #112]	; (8cd0 <_ZN9ClearCore10SysManagerC1Ev+0x1328>)
    8c5e:	9502      	str	r5, [sp, #8]
    8c60:	f8cd 8004 	str.w	r8, [sp, #4]
    8c64:	f8cd e000 	str.w	lr, [sp]
    8c68:	a808      	add	r0, sp, #32
    8c6a:	f8c7 1140 	str.w	r1, [r7, #320]	; 0x140
    8c6e:	4a19      	ldr	r2, [pc, #100]	; (8cd4 <_ZN9ClearCore10SysManagerC1Ev+0x132c>)
    8c70:	4f19      	ldr	r7, [pc, #100]	; (8cd8 <_ZN9ClearCore10SysManagerC1Ev+0x1330>)
    8c72:	f44f 7180 	mov.w	r1, #256	; 0x100
    8c76:	f7fc f9a9 	bl	4fcc <_ZN9ClearCore11MotorDriverC1ENS_13ShiftRegister5MasksEPK15PeripheralRouteS5_S5_tt>
    8c7a:	a80a      	add	r0, sp, #40	; 0x28
    8c7c:	c807      	ldmia	r0, {r0, r1, r2}
    8c7e:	f8bd 3024 	ldrh.w	r3, [sp, #36]	; 0x24
    8c82:	f89d e026 	ldrb.w	lr, [sp, #38]	; 0x26
    8c86:	80bb      	strh	r3, [r7, #4]
    8c88:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    8c8a:	f887 e006 	strb.w	lr, [r7, #6]
    8c8e:	60b8      	str	r0, [r7, #8]
    8c90:	f89d e038 	ldrb.w	lr, [sp, #56]	; 0x38
    8c94:	f89d 0039 	ldrb.w	r0, [sp, #57]	; 0x39
    8c98:	60f9      	str	r1, [r7, #12]
    8c9a:	613a      	str	r2, [r7, #16]
    8c9c:	990f      	ldr	r1, [sp, #60]	; 0x3c
    8c9e:	9a10      	ldr	r2, [sp, #64]	; 0x40
    8ca0:	617b      	str	r3, [r7, #20]
    8ca2:	9b11      	ldr	r3, [sp, #68]	; 0x44
    8ca4:	f887 e018 	strb.w	lr, [r7, #24]
    8ca8:	7678      	strb	r0, [r7, #25]
    8caa:	f89d e048 	ldrb.w	lr, [sp, #72]	; 0x48
    8cae:	f8dd 004a 	ldr.w	r0, [sp, #74]	; 0x4a
    8cb2:	61f9      	str	r1, [r7, #28]
    8cb4:	623a      	str	r2, [r7, #32]
    8cb6:	9915      	ldr	r1, [sp, #84]	; 0x54
    8cb8:	9a16      	ldr	r2, [sp, #88]	; 0x58
    8cba:	627b      	str	r3, [r7, #36]	; 0x24
    8cbc:	e010      	b.n	8ce0 <_ZN9ClearCore10SysManagerC1Ev+0x1338>
    8cbe:	bf00      	nop
    8cc0:	00023040 	.word	0x00023040
    8cc4:	00022fe0 	.word	0x00022fe0
    8cc8:	00023020 	.word	0x00023020
    8ccc:	20000df8 	.word	0x20000df8
    8cd0:	00022ff0 	.word	0x00022ff0
    8cd4:	00023030 	.word	0x00023030
    8cd8:	20000f40 	.word	0x20000f40
    8cdc:	00023050 	.word	0x00023050
    8ce0:	f89d 305c 	ldrb.w	r3, [sp, #92]	; 0x5c
    8ce4:	f8c7 002a 	str.w	r0, [r7, #42]	; 0x2a
    8ce8:	6379      	str	r1, [r7, #52]	; 0x34
    8cea:	63ba      	str	r2, [r7, #56]	; 0x38
    8cec:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
    8cf0:	f887 e028 	strb.w	lr, [r7, #40]	; 0x28
    8cf4:	f89d e05d 	ldrb.w	lr, [sp, #93]	; 0x5d
    8cf8:	f89d 3060 	ldrb.w	r3, [sp, #96]	; 0x60
    8cfc:	9919      	ldr	r1, [sp, #100]	; 0x64
    8cfe:	9a1a      	ldr	r2, [sp, #104]	; 0x68
    8d00:	f887 3040 	strb.w	r3, [r7, #64]	; 0x40
    8d04:	e9dd ab22 	ldrd	sl, fp, [sp, #136]	; 0x88
    8d08:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
    8d0a:	6479      	str	r1, [r7, #68]	; 0x44
    8d0c:	64ba      	str	r2, [r7, #72]	; 0x48
    8d0e:	f89d 1071 	ldrb.w	r1, [sp, #113]	; 0x71
    8d12:	f89d 2072 	ldrb.w	r2, [sp, #114]	; 0x72
    8d16:	f89d 005e 	ldrb.w	r0, [sp, #94]	; 0x5e
    8d1a:	64fb      	str	r3, [r7, #76]	; 0x4c
    8d1c:	f887 1051 	strb.w	r1, [r7, #81]	; 0x51
    8d20:	9b1d      	ldr	r3, [sp, #116]	; 0x74
    8d22:	991e      	ldr	r1, [sp, #120]	; 0x78
    8d24:	f887 2052 	strb.w	r2, [r7, #82]	; 0x52
    8d28:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
    8d2a:	f887 003e 	strb.w	r0, [r7, #62]	; 0x3e
    8d2e:	657b      	str	r3, [r7, #84]	; 0x54
    8d30:	f89d 0070 	ldrb.w	r0, [sp, #112]	; 0x70
    8d34:	9b20      	ldr	r3, [sp, #128]	; 0x80
    8d36:	65b9      	str	r1, [r7, #88]	; 0x58
    8d38:	65fa      	str	r2, [r7, #92]	; 0x5c
    8d3a:	9924      	ldr	r1, [sp, #144]	; 0x90
    8d3c:	9a25      	ldr	r2, [sp, #148]	; 0x94
    8d3e:	f887 e03d 	strb.w	lr, [r7, #61]	; 0x3d
    8d42:	f887 0050 	strb.w	r0, [r7, #80]	; 0x50
    8d46:	e9c7 ab1a 	strd	sl, fp, [r7, #104]	; 0x68
    8d4a:	6739      	str	r1, [r7, #112]	; 0x70
    8d4c:	663b      	str	r3, [r7, #96]	; 0x60
    8d4e:	677a      	str	r2, [r7, #116]	; 0x74
    8d50:	e9dd 2326 	ldrd	r2, r3, [sp, #152]	; 0x98
    8d54:	9928      	ldr	r1, [sp, #160]	; 0xa0
    8d56:	f8c7 1080 	str.w	r1, [r7, #128]	; 0x80
    8d5a:	992c      	ldr	r1, [sp, #176]	; 0xb0
    8d5c:	f8c7 1090 	str.w	r1, [r7, #144]	; 0x90
    8d60:	992d      	ldr	r1, [sp, #180]	; 0xb4
    8d62:	f8c7 1094 	str.w	r1, [r7, #148]	; 0x94
    8d66:	992e      	ldr	r1, [sp, #184]	; 0xb8
    8d68:	f8c7 1098 	str.w	r1, [r7, #152]	; 0x98
    8d6c:	992f      	ldr	r1, [sp, #188]	; 0xbc
    8d6e:	f8c7 109c 	str.w	r1, [r7, #156]	; 0x9c
    8d72:	9930      	ldr	r1, [sp, #192]	; 0xc0
    8d74:	f8c7 10a0 	str.w	r1, [r7, #160]	; 0xa0
    8d78:	9931      	ldr	r1, [sp, #196]	; 0xc4
    8d7a:	f8c7 10a4 	str.w	r1, [r7, #164]	; 0xa4
    8d7e:	9932      	ldr	r1, [sp, #200]	; 0xc8
    8d80:	f8c7 10a8 	str.w	r1, [r7, #168]	; 0xa8
    8d84:	9933      	ldr	r1, [sp, #204]	; 0xcc
    8d86:	f8c7 10ac 	str.w	r1, [r7, #172]	; 0xac
    8d8a:	9934      	ldr	r1, [sp, #208]	; 0xd0
    8d8c:	f8c7 10b0 	str.w	r1, [r7, #176]	; 0xb0
    8d90:	9935      	ldr	r1, [sp, #212]	; 0xd4
    8d92:	f8c7 10b4 	str.w	r1, [r7, #180]	; 0xb4
    8d96:	e9dd ab2a 	ldrd	sl, fp, [sp, #168]	; 0xa8
    8d9a:	9936      	ldr	r1, [sp, #216]	; 0xd8
    8d9c:	f8c7 10b8 	str.w	r1, [r7, #184]	; 0xb8
    8da0:	9937      	ldr	r1, [sp, #220]	; 0xdc
    8da2:	f8c7 10bc 	str.w	r1, [r7, #188]	; 0xbc
    8da6:	9938      	ldr	r1, [sp, #224]	; 0xe0
    8da8:	f8c7 10c0 	str.w	r1, [r7, #192]	; 0xc0
    8dac:	e9c7 ab22 	strd	sl, fp, [r7, #136]	; 0x88
    8db0:	e9c7 231e 	strd	r2, r3, [r7, #120]	; 0x78
    8db4:	9b39      	ldr	r3, [sp, #228]	; 0xe4
    8db6:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
    8dba:	983a      	ldr	r0, [sp, #232]	; 0xe8
    8dbc:	993b      	ldr	r1, [sp, #236]	; 0xec
    8dbe:	f8bd 20f2 	ldrh.w	r2, [sp, #242]	; 0xf2
    8dc2:	f8bd 30f4 	ldrh.w	r3, [sp, #244]	; 0xf4
    8dc6:	f89d e0f6 	ldrb.w	lr, [sp, #246]	; 0xf6
    8dca:	f8c7 00c8 	str.w	r0, [r7, #200]	; 0xc8
    8dce:	f8c7 10cc 	str.w	r1, [r7, #204]	; 0xcc
    8dd2:	f89d 00f7 	ldrb.w	r0, [sp, #247]	; 0xf7
    8dd6:	f89d 10f8 	ldrb.w	r1, [sp, #248]	; 0xf8
    8dda:	f8a7 20d2 	strh.w	r2, [r7, #210]	; 0xd2
    8dde:	f8a7 30d4 	strh.w	r3, [r7, #212]	; 0xd4
    8de2:	f8bd 20fa 	ldrh.w	r2, [sp, #250]	; 0xfa
    8de6:	f8bd 30fc 	ldrh.w	r3, [sp, #252]	; 0xfc
    8dea:	f8bd c0f0 	ldrh.w	ip, [sp, #240]	; 0xf0
    8dee:	f887 e0d6 	strb.w	lr, [r7, #214]	; 0xd6
    8df2:	f887 00d7 	strb.w	r0, [r7, #215]	; 0xd7
    8df6:	f8bd e0fe 	ldrh.w	lr, [sp, #254]	; 0xfe
    8dfa:	f8bd 0100 	ldrh.w	r0, [sp, #256]	; 0x100
    8dfe:	f887 10d8 	strb.w	r1, [r7, #216]	; 0xd8
    8e02:	f8a7 20da 	strh.w	r2, [r7, #218]	; 0xda
    8e06:	f8bd 1102 	ldrh.w	r1, [sp, #258]	; 0x102
    8e0a:	f89d 2104 	ldrb.w	r2, [sp, #260]	; 0x104
    8e0e:	f8a7 30dc 	strh.w	r3, [r7, #220]	; 0xdc
    8e12:	9b42      	ldr	r3, [sp, #264]	; 0x108
    8e14:	f8a7 c0d0 	strh.w	ip, [r7, #208]	; 0xd0
    8e18:	f8a7 e0de 	strh.w	lr, [r7, #222]	; 0xde
    8e1c:	f8a7 00e0 	strh.w	r0, [r7, #224]	; 0xe0
    8e20:	f8a7 10e2 	strh.w	r1, [r7, #226]	; 0xe2
    8e24:	f887 20e4 	strb.w	r2, [r7, #228]	; 0xe4
    8e28:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    8e2c:	9b43      	ldr	r3, [sp, #268]	; 0x10c
    8e2e:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    8e32:	9844      	ldr	r0, [sp, #272]	; 0x110
    8e34:	f89d e114 	ldrb.w	lr, [sp, #276]	; 0x114
    8e38:	f89d 1115 	ldrb.w	r1, [sp, #277]	; 0x115
    8e3c:	f89d 2116 	ldrb.w	r2, [sp, #278]	; 0x116
    8e40:	f8bd 3118 	ldrh.w	r3, [sp, #280]	; 0x118
    8e44:	f8c7 00f0 	str.w	r0, [r7, #240]	; 0xf0
    8e48:	f887 e0f4 	strb.w	lr, [r7, #244]	; 0xf4
    8e4c:	9847      	ldr	r0, [sp, #284]	; 0x11c
    8e4e:	f89d e120 	ldrb.w	lr, [sp, #288]	; 0x120
    8e52:	f887 10f5 	strb.w	r1, [r7, #245]	; 0xf5
    8e56:	f887 20f6 	strb.w	r2, [r7, #246]	; 0xf6
    8e5a:	f89d 1121 	ldrb.w	r1, [sp, #289]	; 0x121
    8e5e:	9a49      	ldr	r2, [sp, #292]	; 0x124
    8e60:	f8a7 30f8 	strh.w	r3, [r7, #248]	; 0xf8
    8e64:	9b4a      	ldr	r3, [sp, #296]	; 0x128
    8e66:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    8e6a:	f887 e100 	strb.w	lr, [r7, #256]	; 0x100
    8e6e:	984b      	ldr	r0, [sp, #300]	; 0x12c
    8e70:	f8bd e130 	ldrh.w	lr, [sp, #304]	; 0x130
    8e74:	f887 1101 	strb.w	r1, [r7, #257]	; 0x101
    8e78:	f8c7 2104 	str.w	r2, [r7, #260]	; 0x104
    8e7c:	f8bd 1132 	ldrh.w	r1, [sp, #306]	; 0x132
    8e80:	f89d 2134 	ldrb.w	r2, [sp, #308]	; 0x134
    8e84:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
    8e88:	9b4e      	ldr	r3, [sp, #312]	; 0x138
    8e8a:	f8c7 010c 	str.w	r0, [r7, #268]	; 0x10c
    8e8e:	f8a7 e110 	strh.w	lr, [r7, #272]	; 0x110
    8e92:	f8a7 1112 	strh.w	r1, [r7, #274]	; 0x112
    8e96:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
    8e9a:	f887 2114 	strb.w	r2, [r7, #276]	; 0x114
    8e9e:	9a4f      	ldr	r2, [sp, #316]	; 0x13c
    8ea0:	f8c7 211c 	str.w	r2, [r7, #284]	; 0x11c
    8ea4:	9850      	ldr	r0, [sp, #320]	; 0x140
    8ea6:	9951      	ldr	r1, [sp, #324]	; 0x144
    8ea8:	9a52      	ldr	r2, [sp, #328]	; 0x148
    8eaa:	f8c7 0120 	str.w	r0, [r7, #288]	; 0x120
    8eae:	f8c7 1124 	str.w	r1, [r7, #292]	; 0x124
    8eb2:	f89d 014e 	ldrb.w	r0, [sp, #334]	; 0x14e
    8eb6:	f89d 114f 	ldrb.w	r1, [sp, #335]	; 0x14f
    8eba:	f8c7 2128 	str.w	r2, [r7, #296]	; 0x128
    8ebe:	9a54      	ldr	r2, [sp, #336]	; 0x150
    8ec0:	f89d c14d 	ldrb.w	ip, [sp, #333]	; 0x14d
    8ec4:	f887 012e 	strb.w	r0, [r7, #302]	; 0x12e
    8ec8:	f887 112f 	strb.w	r1, [r7, #303]	; 0x12f
    8ecc:	f8bd 0156 	ldrh.w	r0, [sp, #342]	; 0x156
    8ed0:	f8bd 1158 	ldrh.w	r1, [sp, #344]	; 0x158
    8ed4:	f8c7 2130 	str.w	r2, [r7, #304]	; 0x130
    8ed8:	f8bd 215a 	ldrh.w	r2, [sp, #346]	; 0x15a
    8edc:	f89d a14c 	ldrb.w	sl, [sp, #332]	; 0x14c
    8ee0:	f887 c12d 	strb.w	ip, [r7, #301]	; 0x12d
    8ee4:	f8a7 0136 	strh.w	r0, [r7, #310]	; 0x136
    8ee8:	f8bd c154 	ldrh.w	ip, [sp, #340]	; 0x154
    8eec:	f89d 015c 	ldrb.w	r0, [sp, #348]	; 0x15c
    8ef0:	f8a7 1138 	strh.w	r1, [r7, #312]	; 0x138
    8ef4:	f8a7 213a 	strh.w	r2, [r7, #314]	; 0x13a
    8ef8:	f89d 115d 	ldrb.w	r1, [sp, #349]	; 0x15d
    8efc:	f89d 215e 	ldrb.w	r2, [sp, #350]	; 0x15e
    8f00:	f887 a12c 	strb.w	sl, [r7, #300]	; 0x12c
    8f04:	f8a7 c134 	strh.w	ip, [r7, #308]	; 0x134
    8f08:	f887 013c 	strb.w	r0, [r7, #316]	; 0x13c
    8f0c:	f887 113d 	strb.w	r1, [r7, #317]	; 0x13d
    8f10:	f887 213e 	strb.w	r2, [r7, #318]	; 0x13e
    8f14:	9a58      	ldr	r2, [sp, #352]	; 0x160
                              &Mtr3_An_Sdrvr3_PWMA, &Mtr3_B_Sdrvr3_PWMB,
                              &Mtr3_HLFB_Sdrvr3_Trig, 0, EVSYS_M3);

    ConnectorCOM0 = SerialDriver(0, ShiftRegister::SR_LED_COM_0_MASK,
    8f16:	f8df c208 	ldr.w	ip, [pc, #520]	; 9120 <_ZN9ClearCore10SysManagerC1Ev+0x1778>
    8f1a:	9207      	str	r2, [sp, #28]
    8f1c:	f8df e204 	ldr.w	lr, [pc, #516]	; 9124 <_ZN9ClearCore10SysManagerC1Ev+0x177c>
    8f20:	9505      	str	r5, [sp, #20]
    8f22:	4b78      	ldr	r3, [pc, #480]	; (9104 <_ZN9ClearCore10SysManagerC1Ev+0x175c>)
    8f24:	9d07      	ldr	r5, [sp, #28]
    8f26:	4878      	ldr	r0, [pc, #480]	; (9108 <_ZN9ClearCore10SysManagerC1Ev+0x1760>)
    8f28:	f8cd e010 	str.w	lr, [sp, #16]
    8f2c:	f44f 5200 	mov.w	r2, #8192	; 0x2000
    8f30:	e88d 1004 	stmia.w	sp, {r2, ip}
    8f34:	9303      	str	r3, [sp, #12]
    8f36:	9002      	str	r0, [sp, #8]
    8f38:	4641      	mov	r1, r8
    8f3a:	f8c7 5140 	str.w	r5, [r7, #320]	; 0x140
    8f3e:	f8df 81e8 	ldr.w	r8, [pc, #488]	; 9128 <_ZN9ClearCore10SysManagerC1Ev+0x1780>
    8f42:	4d72      	ldr	r5, [pc, #456]	; (910c <_ZN9ClearCore10SysManagerC1Ev+0x1764>)
    8f44:	a808      	add	r0, sp, #32
    8f46:	f44f 3300 	mov.w	r3, #131072	; 0x20000
    8f4a:	f44f 2280 	mov.w	r2, #262144	; 0x40000
    8f4e:	f008 f903 	bl	11158 <_ZN9ClearCore12SerialDriverC1EtNS_13ShiftRegister5MasksES2_S2_PK15PeripheralRouteS5_S5_S5_h>
    8f52:	990a      	ldr	r1, [sp, #40]	; 0x28
    8f54:	9a09      	ldr	r2, [sp, #36]	; 0x24
    8f56:	f89d 302c 	ldrb.w	r3, [sp, #44]	; 0x2c
    8f5a:	980c      	ldr	r0, [sp, #48]	; 0x30
    8f5c:	f8c8 1008 	str.w	r1, [r8, #8]
    8f60:	f8c8 2004 	str.w	r2, [r8, #4]
    8f64:	990d      	ldr	r1, [sp, #52]	; 0x34
    8f66:	9a0e      	ldr	r2, [sp, #56]	; 0x38
    8f68:	f888 300c 	strb.w	r3, [r8, #12]
    8f6c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    8f6e:	f8c8 0010 	str.w	r0, [r8, #16]
    8f72:	f8c8 1014 	str.w	r1, [r8, #20]
    8f76:	9810      	ldr	r0, [sp, #64]	; 0x40
    8f78:	9911      	ldr	r1, [sp, #68]	; 0x44
    8f7a:	f8c8 2018 	str.w	r2, [r8, #24]
    8f7e:	f8c8 301c 	str.w	r3, [r8, #28]
    8f82:	f89d 2048 	ldrb.w	r2, [sp, #72]	; 0x48
    8f86:	f89d 3049 	ldrb.w	r3, [sp, #73]	; 0x49
    8f8a:	f8c8 0020 	str.w	r0, [r8, #32]
    8f8e:	2780      	movs	r7, #128	; 0x80
    8f90:	f89d 004a 	ldrb.w	r0, [sp, #74]	; 0x4a
    8f94:	f8c8 1024 	str.w	r1, [r8, #36]	; 0x24
    8f98:	f888 2028 	strb.w	r2, [r8, #40]	; 0x28
    8f9c:	f8bd 104c 	ldrh.w	r1, [sp, #76]	; 0x4c
    8fa0:	f89d 204e 	ldrb.w	r2, [sp, #78]	; 0x4e
    8fa4:	f888 3029 	strb.w	r3, [r8, #41]	; 0x29
    8fa8:	f89d 304f 	ldrb.w	r3, [sp, #79]	; 0x4f
    8fac:	f888 302f 	strb.w	r3, [r8, #47]	; 0x2f
    8fb0:	f888 002a 	strb.w	r0, [r8, #42]	; 0x2a
    8fb4:	f8a8 102c 	strh.w	r1, [r8, #44]	; 0x2c
    8fb8:	f888 202e 	strb.w	r2, [r8, #46]	; 0x2e
    8fbc:	a914      	add	r1, sp, #80	; 0x50
    8fbe:	463a      	mov	r2, r7
    8fc0:	f108 0030 	add.w	r0, r8, #48	; 0x30
    8fc4:	f015 f91c 	bl	1e200 <memcpy>
    8fc8:	463a      	mov	r2, r7
    8fca:	a934      	add	r1, sp, #208	; 0xd0
    8fcc:	f108 00b0 	add.w	r0, r8, #176	; 0xb0
    8fd0:	f015 f916 	bl	1e200 <memcpy>
                                 ShiftRegister::SR_UART_SPI_SEL_0_MASK,
                                 ShiftRegister::SR_UART_TTL_0_MASK,
                                 &Com0_CTS_MISO, &Com0_RTS_SS, &Com0_RX_SCK,
                                 &Com0_TX_MOSI, PER_SERCOM_ALT);
    ConnectorCOM1 = SerialDriver(1, ShiftRegister::SR_LED_COM_1_MASK,
    8fd4:	4b4e      	ldr	r3, [pc, #312]	; (9110 <_ZN9ClearCore10SysManagerC1Ev+0x1768>)
    8fd6:	9303      	str	r3, [sp, #12]
    8fd8:	484e      	ldr	r0, [pc, #312]	; (9114 <_ZN9ClearCore10SysManagerC1Ev+0x176c>)
    8fda:	4a4f      	ldr	r2, [pc, #316]	; (9118 <_ZN9ClearCore10SysManagerC1Ev+0x1770>)
    8fdc:	9002      	str	r0, [sp, #8]
    8fde:	f44f 5380 	mov.w	r3, #4096	; 0x1000
    8fe2:	9201      	str	r2, [sp, #4]
    8fe4:	9300      	str	r3, [sp, #0]
    8fe6:	9854      	ldr	r0, [sp, #336]	; 0x150
    8fe8:	9a55      	ldr	r2, [sp, #340]	; 0x154
    8fea:	9b56      	ldr	r3, [sp, #344]	; 0x158
    8fec:	9605      	str	r6, [sp, #20]
    8fee:	4621      	mov	r1, r4
    8ff0:	9c57      	ldr	r4, [sp, #348]	; 0x15c
    8ff2:	f8c8 0130 	str.w	r0, [r8, #304]	; 0x130
    8ff6:	f8bd c168 	ldrh.w	ip, [sp, #360]	; 0x168
    8ffa:	f8c8 2134 	str.w	r2, [r8, #308]	; 0x134
    8ffe:	9858      	ldr	r0, [sp, #352]	; 0x160
    9000:	f8c8 3138 	str.w	r3, [r8, #312]	; 0x138
    9004:	f89d e16a 	ldrb.w	lr, [sp, #362]	; 0x16a
    9008:	f8c8 413c 	str.w	r4, [r8, #316]	; 0x13c
    \ref SerialDriverMain informational page.

    For more detailed information on the ClearCore Connector interface in
    general, check out the \ref ConnectorMain informational page.
**/
class SerialDriver : public SerialBase, public Connector {
    900c:	f89d 616b 	ldrb.w	r6, [sp, #363]	; 0x16b
    9010:	9a5b      	ldr	r2, [sp, #364]	; 0x16c
    9012:	9b5c      	ldr	r3, [sp, #368]	; 0x170
    9014:	9c5d      	ldr	r4, [sp, #372]	; 0x174
    9016:	f8c8 0140 	str.w	r0, [r8, #320]	; 0x140
    901a:	f8a8 c148 	strh.w	ip, [r8, #328]	; 0x148
    901e:	f888 e14a 	strb.w	lr, [r8, #330]	; 0x14a
    9022:	f888 614b 	strb.w	r6, [r8, #331]	; 0x14b
    9026:	f8c8 214c 	str.w	r2, [r8, #332]	; 0x14c
    902a:	f8c8 3150 	str.w	r3, [r8, #336]	; 0x150
    902e:	f8c8 4154 	str.w	r4, [r8, #340]	; 0x154
    9032:	a808      	add	r0, sp, #32
    9034:	4e39      	ldr	r6, [pc, #228]	; (911c <_ZN9ClearCore10SysManagerC1Ev+0x1774>)
    9036:	9604      	str	r6, [sp, #16]
    9038:	f44f 3380 	mov.w	r3, #65536	; 0x10000
    903c:	f44f 2200 	mov.w	r2, #524288	; 0x80000
    9040:	f008 f88a 	bl	11158 <_ZN9ClearCore12SerialDriverC1EtNS_13ShiftRegister5MasksES2_S2_PK15PeripheralRouteS5_S5_S5_h>
    9044:	9c0a      	ldr	r4, [sp, #40]	; 0x28
    9046:	9809      	ldr	r0, [sp, #36]	; 0x24
    9048:	f89d e02c 	ldrb.w	lr, [sp, #44]	; 0x2c
    904c:	9a0c      	ldr	r2, [sp, #48]	; 0x30
    904e:	9e0e      	ldr	r6, [sp, #56]	; 0x38
    9050:	9b11      	ldr	r3, [sp, #68]	; 0x44
    9052:	60ac      	str	r4, [r5, #8]
    9054:	6068      	str	r0, [r5, #4]
    9056:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
    9058:	980d      	ldr	r0, [sp, #52]	; 0x34
    905a:	f8bd c04c 	ldrh.w	ip, [sp, #76]	; 0x4c
    905e:	f885 e00c 	strb.w	lr, [r5, #12]
    9062:	612a      	str	r2, [r5, #16]
    9064:	f89d e049 	ldrb.w	lr, [sp, #73]	; 0x49
    9068:	f89d 2048 	ldrb.w	r2, [sp, #72]	; 0x48
    906c:	6168      	str	r0, [r5, #20]
    906e:	61ae      	str	r6, [r5, #24]
    9070:	9810      	ldr	r0, [sp, #64]	; 0x40
    9072:	f89d 604a 	ldrb.w	r6, [sp, #74]	; 0x4a
    9076:	61ec      	str	r4, [r5, #28]
    9078:	626b      	str	r3, [r5, #36]	; 0x24
    907a:	f89d 404e 	ldrb.w	r4, [sp, #78]	; 0x4e
    907e:	f89d 304f 	ldrb.w	r3, [sp, #79]	; 0x4f
    9082:	f885 e029 	strb.w	lr, [r5, #41]	; 0x29
    9086:	f8a5 c02c 	strh.w	ip, [r5, #44]	; 0x2c
    908a:	f885 302f 	strb.w	r3, [r5, #47]	; 0x2f
    908e:	a914      	add	r1, sp, #80	; 0x50
    9090:	6228      	str	r0, [r5, #32]
    9092:	f885 2028 	strb.w	r2, [r5, #40]	; 0x28
    9096:	f885 602a 	strb.w	r6, [r5, #42]	; 0x2a
    909a:	463a      	mov	r2, r7
    909c:	f885 402e 	strb.w	r4, [r5, #46]	; 0x2e
    90a0:	f105 0030 	add.w	r0, r5, #48	; 0x30
    90a4:	f015 f8ac 	bl	1e200 <memcpy>
    90a8:	463a      	mov	r2, r7
    90aa:	a934      	add	r1, sp, #208	; 0xd0
    90ac:	f105 00b0 	add.w	r0, r5, #176	; 0xb0
    90b0:	f015 f8a6 	bl	1e200 <memcpy>
    90b4:	a855      	add	r0, sp, #340	; 0x154
    90b6:	e890 1005 	ldmia.w	r0, {r0, r2, ip}
    90ba:	9b54      	ldr	r3, [sp, #336]	; 0x150
    90bc:	f8c5 3130 	str.w	r3, [r5, #304]	; 0x130
    90c0:	9b5c      	ldr	r3, [sp, #368]	; 0x170
    90c2:	9e58      	ldr	r6, [sp, #352]	; 0x160
    90c4:	f8bd e168 	ldrh.w	lr, [sp, #360]	; 0x168
    90c8:	f89d 716a 	ldrb.w	r7, [sp, #362]	; 0x16a
    90cc:	f89d 416b 	ldrb.w	r4, [sp, #363]	; 0x16b
    90d0:	995b      	ldr	r1, [sp, #364]	; 0x16c
    90d2:	f8c5 3150 	str.w	r3, [r5, #336]	; 0x150
    90d6:	9b5d      	ldr	r3, [sp, #372]	; 0x174
    90d8:	f8c5 0134 	str.w	r0, [r5, #308]	; 0x134
                                 ShiftRegister::SR_UART_SPI_SEL_1_MASK,
                                 ShiftRegister::SR_UART_TTL_1_MASK,
                                 &Com1_CTS_MISO, &Com1_RTS_SS, &Com1_RX_SCK,
                                 &Com1_TX_MOSI, PER_SERCOM);
}
    90dc:	4648      	mov	r0, r9
    90de:	f8c5 2138 	str.w	r2, [r5, #312]	; 0x138
    90e2:	f8c5 3154 	str.w	r3, [r5, #340]	; 0x154
    90e6:	f8c5 6140 	str.w	r6, [r5, #320]	; 0x140
    90ea:	f8c5 c13c 	str.w	ip, [r5, #316]	; 0x13c
    90ee:	f8a5 e148 	strh.w	lr, [r5, #328]	; 0x148
    90f2:	f885 714a 	strb.w	r7, [r5, #330]	; 0x14a
    90f6:	f885 414b 	strb.w	r4, [r5, #331]	; 0x14b
    90fa:	f8c5 114c 	str.w	r1, [r5, #332]	; 0x14c
    90fe:	b05f      	add	sp, #380	; 0x17c
    9100:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    9104:	00022e30 	.word	0x00022e30
    9108:	00022e20 	.word	0x00022e20
    910c:	200015f0 	.word	0x200015f0
    9110:	00022e50 	.word	0x00022e50
    9114:	00022e40 	.word	0x00022e40
    9118:	00022f70 	.word	0x00022f70
    911c:	00022f10 	.word	0x00022f10
    9120:	00022f60 	.word	0x00022f60
    9124:	00022f00 	.word	0x00022f00
    9128:	20001498 	.word	0x20001498

0000912c <_ZN9ClearCore10SysManager16ConnectorByIndexE13ClearCorePins>:
        MotorConnectors[iMotor]->RefreshSlow();
    }
}

Connector *SysManager::ConnectorByIndex(ClearCorePins theConnector) {
    if (theConnector < CLEARCORE_PIN_MAX) {
    912c:	2914      	cmp	r1, #20
    912e:	dc03      	bgt.n	9138 <_ZN9ClearCore10SysManager16ConnectorByIndexE13ClearCorePins+0xc>
        return Connectors[theConnector];
    9130:	4a03      	ldr	r2, [pc, #12]	; (9140 <_ZN9ClearCore10SysManager16ConnectorByIndexE13ClearCorePins+0x14>)
    9132:	f852 0021 	ldr.w	r0, [r2, r1, lsl #2]
    }
    else {
        return CcioMgr.PinByIndex(theConnector);
    }
}
    9136:	4770      	bx	lr
        return CcioMgr.PinByIndex(theConnector);
    9138:	4b02      	ldr	r3, [pc, #8]	; (9144 <_ZN9ClearCore10SysManager16ConnectorByIndexE13ClearCorePins+0x18>)
    913a:	6818      	ldr	r0, [r3, #0]
    913c:	f006 bce6 	b.w	fb0c <_ZN9ClearCore16CcioBoardManager10PinByIndexE13ClearCorePins>
    9140:	00022dac 	.word	0x00022dac
    9144:	20001efc 	.word	0x20001efc

00009148 <_ZN9ClearCore10SysManager10InitClocksEv>:

void SysManager::InitClocks() {
    9148:	b5f0      	push	{r4, r5, r6, r7, lr}
    // Set up TCC0 which will be used to generate the sample time interrupt
    // and by the motors in S&D/PWM mode to send bursts of steps or PWM duty.
    SET_CLOCK_SOURCE(TCC0_GCLK_ID, 1);
    914a:	4ab1      	ldr	r2, [pc, #708]	; (9410 <_ZN9ClearCore10SysManager10InitClocksEv+0x2c8>)
    914c:	f8d2 30e4 	ldr.w	r3, [r2, #228]	; 0xe4
    9150:	f36f 1386 	bfc	r3, #6, #1
void SysManager::InitClocks() {
    9154:	b085      	sub	sp, #20
    SET_CLOCK_SOURCE(TCC0_GCLK_ID, 1);
    9156:	f8c2 30e4 	str.w	r3, [r2, #228]	; 0xe4
    915a:	f8d2 30e4 	ldr.w	r3, [r2, #228]	; 0xe4
    915e:	065e      	lsls	r6, r3, #25
    9160:	d4fb      	bmi.n	915a <_ZN9ClearCore10SysManager10InitClocksEv+0x12>
    9162:	f8d2 30e4 	ldr.w	r3, [r2, #228]	; 0xe4
    9166:	49aa      	ldr	r1, [pc, #680]	; (9410 <_ZN9ClearCore10SysManager10InitClocksEv+0x2c8>)
    9168:	2001      	movs	r0, #1
    916a:	f360 0303 	bfi	r3, r0, #0, #4
    916e:	f8c2 30e4 	str.w	r3, [r2, #228]	; 0xe4
    9172:	f8d2 30e4 	ldr.w	r3, [r2, #228]	; 0xe4
    9176:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    917a:	f8c2 30e4 	str.w	r3, [r2, #228]	; 0xe4
    917e:	684b      	ldr	r3, [r1, #4]
    9180:	f013 0304 	ands.w	r3, r3, #4
    9184:	d1fb      	bne.n	917e <_ZN9ClearCore10SysManager10InitClocksEv+0x36>
    CLOCK_ENABLE(APBBMASK, TCC0_);
    9186:	48a3      	ldr	r0, [pc, #652]	; (9414 <_ZN9ClearCore10SysManager10InitClocksEv+0x2cc>)

    // Disable TCC0
    TCC0->CTRLA.bit.ENABLE = 0;
    9188:	4aa3      	ldr	r2, [pc, #652]	; (9418 <_ZN9ClearCore10SysManager10InitClocksEv+0x2d0>)
    CLOCK_ENABLE(APBBMASK, TCC0_);
    918a:	6981      	ldr	r1, [r0, #24]
    918c:	f441 6100 	orr.w	r1, r1, #2048	; 0x800
    9190:	6181      	str	r1, [r0, #24]
    TCC0->CTRLA.bit.ENABLE = 0;
    9192:	6811      	ldr	r1, [r2, #0]
    9194:	f363 0141 	bfi	r1, r3, #1, #1
    9198:	6011      	str	r1, [r2, #0]
    SYNCBUSY_WAIT(TCC0, TCC_SYNCBUSY_ENABLE);
    919a:	6893      	ldr	r3, [r2, #8]
    919c:	f013 0302 	ands.w	r3, r3, #2
    91a0:	d1fb      	bne.n	919a <_ZN9ClearCore10SysManager10InitClocksEv+0x52>

    // Initialize counter value to zero
    TCC0->COUNT.reg = 0;
    91a2:	6353      	str	r3, [r2, #52]	; 0x34

    // Use double buffering
    TCC0->CTRLBCLR.bit.LUPD = 1;
    91a4:	7910      	ldrb	r0, [r2, #4]
    }
    // Interrupt every period
    TCC0->INTENSET.bit.OVF = 1;

    // Setup TCC1 which will be used by motors using PWM input on InA
    SET_CLOCK_SOURCE(TCC1_GCLK_ID, 1);
    91a6:	499a      	ldr	r1, [pc, #616]	; (9410 <_ZN9ClearCore10SysManager10InitClocksEv+0x2c8>)
    TCC0->CTRLBCLR.bit.LUPD = 1;
    91a8:	f040 0002 	orr.w	r0, r0, #2
    91ac:	7110      	strb	r0, [r2, #4]
    TCC0->WAVE.reg |= TCC_WAVE_WAVEGEN_NPWM | TCC_WAVE_POL_Msk;
    91ae:	6bd0      	ldr	r0, [r2, #60]	; 0x3c
    91b0:	f440 107c 	orr.w	r0, r0, #4128768	; 0x3f0000
    91b4:	f040 0002 	orr.w	r0, r0, #2
    91b8:	63d0      	str	r0, [r2, #60]	; 0x3c
        TCC0->CC[iChannel].reg = 0;
    91ba:	6453      	str	r3, [r2, #68]	; 0x44
    91bc:	6493      	str	r3, [r2, #72]	; 0x48
    91be:	64d3      	str	r3, [r2, #76]	; 0x4c
    91c0:	6513      	str	r3, [r2, #80]	; 0x50
    91c2:	6553      	str	r3, [r2, #84]	; 0x54
    91c4:	6593      	str	r3, [r2, #88]	; 0x58
    TCC0->INTENSET.bit.OVF = 1;
    91c6:	6a90      	ldr	r0, [r2, #40]	; 0x28
    91c8:	f040 0001 	orr.w	r0, r0, #1
    91cc:	6290      	str	r0, [r2, #40]	; 0x28
    SET_CLOCK_SOURCE(TCC1_GCLK_ID, 1);
    91ce:	f8d1 20e4 	ldr.w	r2, [r1, #228]	; 0xe4
    91d2:	f363 1286 	bfi	r2, r3, #6, #1
    91d6:	f8c1 20e4 	str.w	r2, [r1, #228]	; 0xe4
    91da:	460a      	mov	r2, r1
    91dc:	f8d2 30e4 	ldr.w	r3, [r2, #228]	; 0xe4
    91e0:	065d      	lsls	r5, r3, #25
    91e2:	d4fb      	bmi.n	91dc <_ZN9ClearCore10SysManager10InitClocksEv+0x94>
    91e4:	f8d2 30e4 	ldr.w	r3, [r2, #228]	; 0xe4
    91e8:	4989      	ldr	r1, [pc, #548]	; (9410 <_ZN9ClearCore10SysManager10InitClocksEv+0x2c8>)
    91ea:	2001      	movs	r0, #1
    91ec:	f360 0303 	bfi	r3, r0, #0, #4
    91f0:	f8c2 30e4 	str.w	r3, [r2, #228]	; 0xe4
    91f4:	f8d2 30e4 	ldr.w	r3, [r2, #228]	; 0xe4
    91f8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    91fc:	f8c2 30e4 	str.w	r3, [r2, #228]	; 0xe4
    9200:	684b      	ldr	r3, [r1, #4]
    9202:	f013 0304 	ands.w	r3, r3, #4
    9206:	d1fb      	bne.n	9200 <_ZN9ClearCore10SysManager10InitClocksEv+0xb8>
    CLOCK_ENABLE(APBBMASK, TCC1_);
    9208:	4882      	ldr	r0, [pc, #520]	; (9414 <_ZN9ClearCore10SysManager10InitClocksEv+0x2cc>)

    // Disable TCC1
    TCC1->CTRLA.bit.ENABLE = 0;
    920a:	4a84      	ldr	r2, [pc, #528]	; (941c <_ZN9ClearCore10SysManager10InitClocksEv+0x2d4>)
    CLOCK_ENABLE(APBBMASK, TCC1_);
    920c:	6981      	ldr	r1, [r0, #24]
    920e:	f441 5180 	orr.w	r1, r1, #4096	; 0x1000
    9212:	6181      	str	r1, [r0, #24]
    TCC1->CTRLA.bit.ENABLE = 0;
    9214:	6811      	ldr	r1, [r2, #0]
    9216:	f363 0141 	bfi	r1, r3, #1, #1
    921a:	6011      	str	r1, [r2, #0]
    SYNCBUSY_WAIT(TCC1, TCC_SYNCBUSY_ENABLE);
    921c:	6893      	ldr	r3, [r2, #8]
    921e:	f013 0302 	ands.w	r3, r3, #2
    9222:	d1fb      	bne.n	921c <_ZN9ClearCore10SysManager10InitClocksEv+0xd4>

    // Initialize counter value to zero
    TCC1->COUNT.reg = 0;
    9224:	6353      	str	r3, [r2, #52]	; 0x34

    // Use double buffering
    TCC1->CTRLBCLR.bit.LUPD = 1;
    9226:	7910      	ldrb	r0, [r2, #4]
    for (int8_t iChannel = 0; iChannel < 6; iChannel++) {
        TCC1->CC[iChannel].reg = 0;
    }

    // Initialize Timer/Counters
    SET_CLOCK_SOURCE(TC1_GCLK_ID, 6);
    9228:	4979      	ldr	r1, [pc, #484]	; (9410 <_ZN9ClearCore10SysManager10InitClocksEv+0x2c8>)
    TCC1->CTRLBCLR.bit.LUPD = 1;
    922a:	f040 0002 	orr.w	r0, r0, #2
    922e:	7110      	strb	r0, [r2, #4]
    TCC1->WAVE.reg |= TCC_WAVE_WAVEGEN_NPWM | TCC_WAVE_POL_Msk;
    9230:	6bd0      	ldr	r0, [r2, #60]	; 0x3c
    9232:	f440 107c 	orr.w	r0, r0, #4128768	; 0x3f0000
    9236:	f040 0002 	orr.w	r0, r0, #2
    923a:	63d0      	str	r0, [r2, #60]	; 0x3c
        TCC1->CC[iChannel].reg = 0;
    923c:	6453      	str	r3, [r2, #68]	; 0x44
    923e:	6493      	str	r3, [r2, #72]	; 0x48
    9240:	64d3      	str	r3, [r2, #76]	; 0x4c
    9242:	6513      	str	r3, [r2, #80]	; 0x50
    9244:	6553      	str	r3, [r2, #84]	; 0x54
    9246:	6593      	str	r3, [r2, #88]	; 0x58
    SET_CLOCK_SOURCE(TC1_GCLK_ID, 6);
    9248:	f8d1 20a4 	ldr.w	r2, [r1, #164]	; 0xa4
    924c:	f363 1286 	bfi	r2, r3, #6, #1
    9250:	f8c1 20a4 	str.w	r2, [r1, #164]	; 0xa4
    9254:	460a      	mov	r2, r1
    9256:	f8d2 30a4 	ldr.w	r3, [r2, #164]	; 0xa4
    925a:	065c      	lsls	r4, r3, #25
    925c:	d4fb      	bmi.n	9256 <_ZN9ClearCore10SysManager10InitClocksEv+0x10e>
    925e:	f8d2 30a4 	ldr.w	r3, [r2, #164]	; 0xa4
    9262:	496b      	ldr	r1, [pc, #428]	; (9410 <_ZN9ClearCore10SysManager10InitClocksEv+0x2c8>)
    9264:	2006      	movs	r0, #6
    9266:	f360 0303 	bfi	r3, r0, #0, #4
    926a:	f8c2 30a4 	str.w	r3, [r2, #164]	; 0xa4
    926e:	f8d2 30a4 	ldr.w	r3, [r2, #164]	; 0xa4
    9272:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    9276:	f8c2 30a4 	str.w	r3, [r2, #164]	; 0xa4
    927a:	684b      	ldr	r3, [r1, #4]
    927c:	f013 0318 	ands.w	r3, r3, #24
    9280:	d1fb      	bne.n	927a <_ZN9ClearCore10SysManager10InitClocksEv+0x132>
    CLOCK_ENABLE(APBAMASK, TC1_); // Enable TC1 bus clock
    9282:	4c64      	ldr	r4, [pc, #400]	; (9414 <_ZN9ClearCore10SysManager10InitClocksEv+0x2cc>)

    SET_CLOCK_SOURCE(TC2_GCLK_ID, 6);
    9284:	4a62      	ldr	r2, [pc, #392]	; (9410 <_ZN9ClearCore10SysManager10InitClocksEv+0x2c8>)
    CLOCK_ENABLE(APBAMASK, TC1_); // Enable TC1 bus clock
    9286:	6960      	ldr	r0, [r4, #20]
    9288:	f440 4000 	orr.w	r0, r0, #32768	; 0x8000
    928c:	6160      	str	r0, [r4, #20]
    SET_CLOCK_SOURCE(TC2_GCLK_ID, 6);
    928e:	f8d1 00e8 	ldr.w	r0, [r1, #232]	; 0xe8
    9292:	f363 1086 	bfi	r0, r3, #6, #1
    9296:	f8c1 00e8 	str.w	r0, [r1, #232]	; 0xe8
    929a:	f8d2 30e8 	ldr.w	r3, [r2, #232]	; 0xe8
    929e:	0658      	lsls	r0, r3, #25
    92a0:	d4fb      	bmi.n	929a <_ZN9ClearCore10SysManager10InitClocksEv+0x152>
    92a2:	f8d2 30e8 	ldr.w	r3, [r2, #232]	; 0xe8
    92a6:	495a      	ldr	r1, [pc, #360]	; (9410 <_ZN9ClearCore10SysManager10InitClocksEv+0x2c8>)
    92a8:	2006      	movs	r0, #6
    92aa:	f360 0303 	bfi	r3, r0, #0, #4
    92ae:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
    92b2:	f8d2 30e8 	ldr.w	r3, [r2, #232]	; 0xe8
    92b6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    92ba:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
    92be:	684b      	ldr	r3, [r1, #4]
    92c0:	f013 0318 	ands.w	r3, r3, #24
    92c4:	d1fb      	bne.n	92be <_ZN9ClearCore10SysManager10InitClocksEv+0x176>
    CLOCK_ENABLE(APBBMASK, TC2_); // Enable TC2 bus clock
    92c6:	4c53      	ldr	r4, [pc, #332]	; (9414 <_ZN9ClearCore10SysManager10InitClocksEv+0x2cc>)

    SET_CLOCK_SOURCE(TC5_GCLK_ID, 6);
    92c8:	4a51      	ldr	r2, [pc, #324]	; (9410 <_ZN9ClearCore10SysManager10InitClocksEv+0x2c8>)
    CLOCK_ENABLE(APBBMASK, TC2_); // Enable TC2 bus clock
    92ca:	69a0      	ldr	r0, [r4, #24]
    92cc:	f440 5000 	orr.w	r0, r0, #8192	; 0x2000
    92d0:	61a0      	str	r0, [r4, #24]
    SET_CLOCK_SOURCE(TC5_GCLK_ID, 6);
    92d2:	f8d1 00f8 	ldr.w	r0, [r1, #248]	; 0xf8
    92d6:	f363 1086 	bfi	r0, r3, #6, #1
    92da:	f8c1 00f8 	str.w	r0, [r1, #248]	; 0xf8
    92de:	f8d2 30f8 	ldr.w	r3, [r2, #248]	; 0xf8
    92e2:	0659      	lsls	r1, r3, #25
    92e4:	d4fb      	bmi.n	92de <_ZN9ClearCore10SysManager10InitClocksEv+0x196>
    92e6:	f8d2 30f8 	ldr.w	r3, [r2, #248]	; 0xf8
    92ea:	4949      	ldr	r1, [pc, #292]	; (9410 <_ZN9ClearCore10SysManager10InitClocksEv+0x2c8>)
    92ec:	2006      	movs	r0, #6
    92ee:	f360 0303 	bfi	r3, r0, #0, #4
    92f2:	f8c2 30f8 	str.w	r3, [r2, #248]	; 0xf8
    92f6:	f8d2 30f8 	ldr.w	r3, [r2, #248]	; 0xf8
    92fa:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    92fe:	f8c2 30f8 	str.w	r3, [r2, #248]	; 0xf8
    9302:	684b      	ldr	r3, [r1, #4]
    9304:	f013 0318 	ands.w	r3, r3, #24
    9308:	d1fb      	bne.n	9302 <_ZN9ClearCore10SysManager10InitClocksEv+0x1ba>
    CLOCK_ENABLE(APBCMASK, TC5_); // Enable TC5 bus clock
    930a:	4842      	ldr	r0, [pc, #264]	; (9414 <_ZN9ClearCore10SysManager10InitClocksEv+0x2cc>)
    GCLK->PCHCTRL[TC6_GCLK_ID].reg =
        GCLK_PCHCTRL_GEN_GCLK6 | GCLK_PCHCTRL_CHEN;
    CLOCK_ENABLE(APBDMASK, TC6_); // Enable TC6 bus clock

    // TCC3 used by IO5 for H-bridge PWM generation
    SET_CLOCK_SOURCE(TCC3_GCLK_ID, 0);
    930c:	4a40      	ldr	r2, [pc, #256]	; (9410 <_ZN9ClearCore10SysManager10InitClocksEv+0x2c8>)
    CLOCK_ENABLE(APBCMASK, TC5_); // Enable TC5 bus clock
    930e:	69c4      	ldr	r4, [r0, #28]
    GCLK->PCHCTRL[TC6_GCLK_ID].reg =
    9310:	2546      	movs	r5, #70	; 0x46
    CLOCK_ENABLE(APBCMASK, TC5_); // Enable TC5 bus clock
    9312:	f044 0440 	orr.w	r4, r4, #64	; 0x40
    9316:	61c4      	str	r4, [r0, #28]
    GCLK->PCHCTRL[TC6_GCLK_ID].reg =
    9318:	f8c1 511c 	str.w	r5, [r1, #284]	; 0x11c
    CLOCK_ENABLE(APBDMASK, TC6_); // Enable TC6 bus clock
    931c:	6a04      	ldr	r4, [r0, #32]
    931e:	f044 0420 	orr.w	r4, r4, #32
    9322:	6204      	str	r4, [r0, #32]
    SET_CLOCK_SOURCE(TCC3_GCLK_ID, 0);
    9324:	f8d1 00f4 	ldr.w	r0, [r1, #244]	; 0xf4
    9328:	f363 1086 	bfi	r0, r3, #6, #1
    932c:	f8c1 00f4 	str.w	r0, [r1, #244]	; 0xf4
    9330:	f8d2 30f4 	ldr.w	r3, [r2, #244]	; 0xf4
    9334:	f3c3 1380 	ubfx	r3, r3, #6, #1
    9338:	2b00      	cmp	r3, #0
    933a:	d1f9      	bne.n	9330 <_ZN9ClearCore10SysManager10InitClocksEv+0x1e8>
    933c:	f8d2 10f4 	ldr.w	r1, [r2, #244]	; 0xf4
    CLOCK_ENABLE(APBCMASK, TCC3_);
    9340:	4834      	ldr	r0, [pc, #208]	; (9414 <_ZN9ClearCore10SysManager10InitClocksEv+0x2cc>)

    // TCC4 used by IO4 for H-bridge PWM generation
    SET_CLOCK_SOURCE(TCC4_GCLK_ID, 0);
    9342:	4c33      	ldr	r4, [pc, #204]	; (9410 <_ZN9ClearCore10SysManager10InitClocksEv+0x2c8>)
    SET_CLOCK_SOURCE(TCC3_GCLK_ID, 0);
    9344:	f363 0103 	bfi	r1, r3, #0, #4
    9348:	f8c2 10f4 	str.w	r1, [r2, #244]	; 0xf4
    934c:	f8d2 10f4 	ldr.w	r1, [r2, #244]	; 0xf4
    9350:	f041 0140 	orr.w	r1, r1, #64	; 0x40
    9354:	f8c2 10f4 	str.w	r1, [r2, #244]	; 0xf4
    9358:	6851      	ldr	r1, [r2, #4]
    CLOCK_ENABLE(APBCMASK, TCC3_);
    935a:	69c1      	ldr	r1, [r0, #28]
    935c:	f041 0110 	orr.w	r1, r1, #16
    9360:	61c1      	str	r1, [r0, #28]
    SET_CLOCK_SOURCE(TCC4_GCLK_ID, 0);
    9362:	f8d2 1118 	ldr.w	r1, [r2, #280]	; 0x118
    9366:	f363 1186 	bfi	r1, r3, #6, #1
    936a:	f8c2 1118 	str.w	r1, [r2, #280]	; 0x118
    936e:	f8d4 3118 	ldr.w	r3, [r4, #280]	; 0x118
    9372:	f3c3 1380 	ubfx	r3, r3, #6, #1
    9376:	2b00      	cmp	r3, #0
    9378:	d1f9      	bne.n	936e <_ZN9ClearCore10SysManager10InitClocksEv+0x226>
    937a:	f8d4 1118 	ldr.w	r1, [r4, #280]	; 0x118
    CLOCK_ENABLE(APBDMASK, TCC4_);

    Tc *TCs[] = {TC1, TC2, TC6};
    937e:	4a28      	ldr	r2, [pc, #160]	; (9420 <_ZN9ClearCore10SysManager10InitClocksEv+0x2d8>)
    CLOCK_ENABLE(APBDMASK, TCC4_);
    9380:	4d24      	ldr	r5, [pc, #144]	; (9414 <_ZN9ClearCore10SysManager10InitClocksEv+0x2cc>)
    SET_CLOCK_SOURCE(TCC4_GCLK_ID, 0);
    9382:	f363 0103 	bfi	r1, r3, #0, #4
    9386:	f8c4 1118 	str.w	r1, [r4, #280]	; 0x118
    938a:	f8d4 3118 	ldr.w	r3, [r4, #280]	; 0x118
    938e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    9392:	f8c4 3118 	str.w	r3, [r4, #280]	; 0x118
    Tc *TCs[] = {TC1, TC2, TC6};
    9396:	ca07      	ldmia	r2, {r0, r1, r2}
    SET_CLOCK_SOURCE(TCC4_GCLK_ID, 0);
    9398:	6863      	ldr	r3, [r4, #4]
    CLOCK_ENABLE(APBDMASK, TCC4_);
    939a:	6a2c      	ldr	r4, [r5, #32]
    Tc *TCs[] = {TC1, TC2, TC6};
    939c:	ab01      	add	r3, sp, #4
    CLOCK_ENABLE(APBDMASK, TCC4_);
    939e:	f044 0410 	orr.w	r4, r4, #16
    93a2:	622c      	str	r4, [r5, #32]
    93a4:	f10d 0c10 	add.w	ip, sp, #16
    Tc *TCs[] = {TC1, TC2, TC6};
    93a8:	e883 0007 	stmia.w	r3, {r0, r1, r2}
        // Disable TCx
        tcCount->CTRLA.bit.ENABLE = 0;
        SYNCBUSY_WAIT(tcCount, TC_SYNCBUSY_ENABLE);

        tcCount->CTRLBCLR.bit.LUPD = 1; // Double buffering
        tcCount->CTRLA.bit.MODE = TC_CTRLA_MODE_COUNT8_Val;
    93ac:	f04f 0e01 	mov.w	lr, #1
    93b0:	4619      	mov	r1, r3
        // Make 500Hz carrier from GCLK
        tcCount->CTRLA.bit.PRESCALER = TC_CTRLA_PRESCALER_DIV16_Val;
    93b2:	2704      	movs	r7, #4
        tcCount->WAVE.reg = TC_WAVE_WAVEGEN_NPWM;
    93b4:	2602      	movs	r6, #2
        tcCount->DRVCTRL.reg = TC_DRVCTRL_INVEN_Msk;
    93b6:	2503      	movs	r5, #3

        tcCount->PERBUF.reg = 254;
    93b8:	24fe      	movs	r4, #254	; 0xfe
        Tc *tc = TCs[tcIndex];
    93ba:	f851 2b04 	ldr.w	r2, [r1], #4
        tcCount->CTRLA.bit.ENABLE = 0;
    93be:	6813      	ldr	r3, [r2, #0]
    93c0:	f36f 0341 	bfc	r3, #1, #1
    93c4:	6013      	str	r3, [r2, #0]
        SYNCBUSY_WAIT(tcCount, TC_SYNCBUSY_ENABLE);
    93c6:	6913      	ldr	r3, [r2, #16]
    93c8:	f013 0302 	ands.w	r3, r3, #2
    93cc:	d1fb      	bne.n	93c6 <_ZN9ClearCore10SysManager10InitClocksEv+0x27e>
        tcCount->CTRLBCLR.bit.LUPD = 1; // Double buffering
    93ce:	7910      	ldrb	r0, [r2, #4]
    93d0:	f040 0002 	orr.w	r0, r0, #2
    93d4:	7110      	strb	r0, [r2, #4]
        tcCount->CTRLA.bit.MODE = TC_CTRLA_MODE_COUNT8_Val;
    93d6:	6810      	ldr	r0, [r2, #0]
    93d8:	f36e 0083 	bfi	r0, lr, #2, #2
    93dc:	6010      	str	r0, [r2, #0]
        tcCount->CTRLA.bit.PRESCALER = TC_CTRLA_PRESCALER_DIV16_Val;
    93de:	6810      	ldr	r0, [r2, #0]
    93e0:	f367 200a 	bfi	r0, r7, #8, #3
    93e4:	6010      	str	r0, [r2, #0]
        tcCount->WAVE.reg = TC_WAVE_WAVEGEN_NPWM;
    93e6:	7316      	strb	r6, [r2, #12]
        tcCount->DRVCTRL.reg = TC_DRVCTRL_INVEN_Msk;
    93e8:	7355      	strb	r5, [r2, #13]
        tcCount->PERBUF.reg = 254;
    93ea:	f882 402f 	strb.w	r4, [r2, #47]	; 0x2f
        tcCount->CCBUF[0].reg = 0;
    93ee:	f882 3030 	strb.w	r3, [r2, #48]	; 0x30
        tcCount->CCBUF[1].reg = 0;
    93f2:	f882 3031 	strb.w	r3, [r2, #49]	; 0x31

        tcCount->COUNT.reg = 0;
    93f6:	7513      	strb	r3, [r2, #20]

        // Enable TCx
        tcCount->CTRLA.bit.ENABLE = 1;
    93f8:	6813      	ldr	r3, [r2, #0]
    93fa:	f043 0302 	orr.w	r3, r3, #2
    93fe:	6013      	str	r3, [r2, #0]
        SYNCBUSY_WAIT(tcCount, TC_SYNCBUSY_ENABLE);
    9400:	6913      	ldr	r3, [r2, #16]
    9402:	079b      	lsls	r3, r3, #30
    9404:	d4fc      	bmi.n	9400 <_ZN9ClearCore10SysManager10InitClocksEv+0x2b8>
    for (int8_t tcIndex = 0; tcIndex < 3; tcIndex++) {
    9406:	4561      	cmp	r1, ip
    9408:	d1d7      	bne.n	93ba <_ZN9ClearCore10SysManager10InitClocksEv+0x272>
    }
}
    940a:	b005      	add	sp, #20
    940c:	bdf0      	pop	{r4, r5, r6, r7, pc}
    940e:	bf00      	nop
    9410:	40001c00 	.word	0x40001c00
    9414:	40000800 	.word	0x40000800
    9418:	41016000 	.word	0x41016000
    941c:	41018000 	.word	0x41018000
    9420:	00022d88 	.word	0x00022d88

00009424 <_ZN9ClearCore10SysManager10InitializeEv>:
    CoreDebug->DEMCR |= CoreDebug_DEMCR_TRCENA_Msk;
    9424:	498b      	ldr	r1, [pc, #556]	; (9654 <_ZN9ClearCore10SysManager10InitializeEv+0x230>)
    DWT->CYCCNT = 0;
    9426:	4a8c      	ldr	r2, [pc, #560]	; (9658 <_ZN9ClearCore10SysManager10InitializeEv+0x234>)
    CoreDebug->DEMCR |= CoreDebug_DEMCR_TRCENA_Msk;
    9428:	68cb      	ldr	r3, [r1, #12]
void SysManager::Initialize() {
    942a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    CoreDebug->DEMCR |= CoreDebug_DEMCR_TRCENA_Msk;
    942e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
    DWT->CTRL = DWT_CTRL_CYCCNTENA_Msk;
    9432:	f04f 0801 	mov.w	r8, #1
    DWT->CYCCNT = 0;
    9436:	2400      	movs	r4, #0
    CoreDebug->DEMCR |= CoreDebug_DEMCR_TRCENA_Msk;
    9438:	60cb      	str	r3, [r1, #12]
    DWT->CYCCNT = 0;
    943a:	6054      	str	r4, [r2, #4]
    DWT->CTRL = DWT_CTRL_CYCCNTENA_Msk;
    943c:	f8c2 8000 	str.w	r8, [r2]
void SysManager::Initialize() {
    9440:	4606      	mov	r6, r0
    InitClocks();
    9442:	f7ff fe81 	bl	9148 <_ZN9ClearCore10SysManager10InitClocksEv>
    SUPC->BOD33.bit.ENABLE = 0;
    9446:	4b85      	ldr	r3, [pc, #532]	; (965c <_ZN9ClearCore10SysManager10InitializeEv+0x238>)
    StatusMgr.HBridgeState(true);
    9448:	4985      	ldr	r1, [pc, #532]	; (9660 <_ZN9ClearCore10SysManager10InitializeEv+0x23c>)
    SUPC->BOD33.bit.ENABLE = 0;
    944a:	691a      	ldr	r2, [r3, #16]
    StatusMgr.HBridgeState(true);
    944c:	680d      	ldr	r5, [r1, #0]
    944e:	4f85      	ldr	r7, [pc, #532]	; (9664 <_ZN9ClearCore10SysManager10InitializeEv+0x240>)
    SUPC->BOD33.bit.ENABLE = 0;
    9450:	f364 0241 	bfi	r2, r4, #1, #1
    9454:	611a      	str	r2, [r3, #16]
    SUPC->BOD33.bit.LEVEL = 167;  // Brown out voltage = 1.5V + LEVEL * 6mV.
    9456:	691a      	ldr	r2, [r3, #16]
    9458:	21a7      	movs	r1, #167	; 0xa7
    945a:	f361 4217 	bfi	r2, r1, #16, #8
    945e:	611a      	str	r2, [r3, #16]
    SUPC->BOD33.bit.ACTION = SUPC_BOD33_ACTION_RESET_Val;//SUPC_BOD33_ACTION_NONE_Val;
    9460:	691a      	ldr	r2, [r3, #16]
    9462:	f368 0283 	bfi	r2, r8, #2, #2
    9466:	611a      	str	r2, [r3, #16]
    SUPC->BOD33.bit.HYST = 0x7;
    9468:	691a      	ldr	r2, [r3, #16]
    946a:	2107      	movs	r1, #7
    946c:	f361 220b 	bfi	r2, r1, #8, #4
    9470:	611a      	str	r2, [r3, #16]
    SUPC->BOD33.bit.ENABLE = 1; // enable brown-out detection
    9472:	691a      	ldr	r2, [r3, #16]
    9474:	f042 0202 	orr.w	r2, r2, #2
    9478:	611a      	str	r2, [r3, #16]
    StatusMgr.HBridgeState(true);
    947a:	4628      	mov	r0, r5
    947c:	4641      	mov	r1, r8
    947e:	f008 f91d 	bl	116bc <_ZN9ClearCore13StatusManager12HBridgeStateEb>
    9482:	4879      	ldr	r0, [pc, #484]	; (9668 <_ZN9ClearCore10SysManager10InitializeEv+0x244>)
    9484:	2100      	movs	r1, #0
    9486:	f000 fc9b 	bl	9dc0 <Delay_cycles>
    StatusMgr.HBridgeState(false);
    948a:	4621      	mov	r1, r4
    948c:	4628      	mov	r0, r5
    948e:	f008 f915 	bl	116bc <_ZN9ClearCore13StatusManager12HBridgeStateEb>
    DATA_DIRECTION_INPUT(OutFault_04or05.gpioPort,
    9492:	4b76      	ldr	r3, [pc, #472]	; (966c <_ZN9ClearCore10SysManager10InitializeEv+0x248>)
    InputMgr.Initialize();
    9494:	4a76      	ldr	r2, [pc, #472]	; (9670 <_ZN9ClearCore10SysManager10InitializeEv+0x24c>)
    DATA_DIRECTION_INPUT(OutFault_04or05.gpioPort,
    9496:	f8c3 8084 	str.w	r8, [r3, #132]	; 0x84
    PIN_CONFIGURATION(OutFault_04or05.gpioPort, OutFault_04or05.gpioPin,
    949a:	2102      	movs	r1, #2
    949c:	f883 10c0 	strb.w	r1, [r3, #192]	; 0xc0
    InputMgr.Initialize();
    94a0:	6810      	ldr	r0, [r2, #0]
    94a2:	f7fb fb69 	bl	4b78 <_ZN9ClearCore12InputManager10InitializeEv>
        Connectors[i]->Initialize(static_cast<ClearCorePins>(i));
    94a6:	f857 0f04 	ldr.w	r0, [r7, #4]!
    94aa:	6803      	ldr	r3, [r0, #0]
    94ac:	b221      	sxth	r1, r4
    94ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    for (int32_t i = 0; i < CLEARCORE_PIN_MAX; i++) {
    94b0:	3401      	adds	r4, #1
        Connectors[i]->Initialize(static_cast<ClearCorePins>(i));
    94b2:	4798      	blx	r3
    for (int32_t i = 0; i < CLEARCORE_PIN_MAX; i++) {
    94b4:	2c15      	cmp	r4, #21
    94b6:	d1f6      	bne.n	94a6 <_ZN9ClearCore10SysManager10InitializeEv+0x82>
    DmaMgr.Initialize();
    94b8:	f005 fc5a 	bl	ed70 <_ZN9ClearCore10DmaManager10InitializeEv>
    MotorMgr.Initialize();
    94bc:	4b6d      	ldr	r3, [pc, #436]	; (9674 <_ZN9ClearCore10SysManager10InitializeEv+0x250>)
    94be:	6818      	ldr	r0, [r3, #0]
    94c0:	f001 ff74 	bl	b3ac <_ZN9ClearCore12MotorManager10InitializeEv>
    ShiftReg.Initialize();
    94c4:	486c      	ldr	r0, [pc, #432]	; (9678 <_ZN9ClearCore10SysManager10InitializeEv+0x254>)
    94c6:	f001 fac9 	bl	aa5c <_ZN9ClearCore13ShiftRegister10InitializeEv>
    AdcMgr.Initialize();
    94ca:	4b6c      	ldr	r3, [pc, #432]	; (967c <_ZN9ClearCore10SysManager10InitializeEv+0x258>)
    94cc:	6818      	ldr	r0, [r3, #0]
    94ce:	f003 ff21 	bl	d314 <_ZN9ClearCore10AdcManager10InitializeEv>
    CcioMgr.Initialize();
    94d2:	4b6b      	ldr	r3, [pc, #428]	; (9680 <_ZN9ClearCore10SysManager10InitializeEv+0x25c>)
    94d4:	6818      	ldr	r0, [r3, #0]
    94d6:	f005 ff69 	bl	f3ac <_ZN9ClearCore16CcioBoardManager10InitializeEv>
    UsbMgr.Initialize();
    94da:	4b6a      	ldr	r3, [pc, #424]	; (9684 <_ZN9ClearCore10SysManager10InitializeEv+0x260>)
    94dc:	6818      	ldr	r0, [r3, #0]
    94de:	f7fd f9ef 	bl	68c0 <_ZN9ClearCore10UsbManager10InitializeEv>
    EncoderIn.Initialize();
    94e2:	4869      	ldr	r0, [pc, #420]	; (9688 <_ZN9ClearCore10SysManager10InitializeEv+0x264>)
    94e4:	f002 fd7c 	bl	bfe0 <_ZN9ClearCore12EncoderInput10InitializeEv>
    SET_CLOCK_SOURCE(EIC_GCLK_ID, 0);
    94e8:	4a68      	ldr	r2, [pc, #416]	; (968c <_ZN9ClearCore10SysManager10InitializeEv+0x268>)
    94ea:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
    94ee:	f36f 1386 	bfc	r3, #6, #1
    94f2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
    94f6:	f8d2 1090 	ldr.w	r1, [r2, #144]	; 0x90
    94fa:	f3c1 1180 	ubfx	r1, r1, #6, #1
    94fe:	2900      	cmp	r1, #0
    9500:	d1f9      	bne.n	94f6 <_ZN9ClearCore10SysManager10InitializeEv+0xd2>
    9502:	f8d2 0090 	ldr.w	r0, [r2, #144]	; 0x90
    CLOCK_ENABLE(APBAMASK, EIC_);
    9506:	4c62      	ldr	r4, [pc, #392]	; (9690 <_ZN9ClearCore10SysManager10InitializeEv+0x26c>)
        state ? m_patternMasks[pattern] |= ledMask
    9508:	4f5b      	ldr	r7, [pc, #364]	; (9678 <_ZN9ClearCore10SysManager10InitializeEv+0x254>)
  NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
    950a:	4b62      	ldr	r3, [pc, #392]	; (9694 <_ZN9ClearCore10SysManager10InitializeEv+0x270>)
    if (TimingMgr.SysTickPeriodMicroSec(1000)) {
    950c:	f8df c190 	ldr.w	ip, [pc, #400]	; 96a0 <_ZN9ClearCore10SysManager10InitializeEv+0x27c>
    SET_CLOCK_SOURCE(EIC_GCLK_ID, 0);
    9510:	f361 0003 	bfi	r0, r1, #0, #4
    9514:	f8c2 0090 	str.w	r0, [r2, #144]	; 0x90
    9518:	f8d2 1090 	ldr.w	r1, [r2, #144]	; 0x90
    951c:	f041 0140 	orr.w	r1, r1, #64	; 0x40
    9520:	f8c2 1090 	str.w	r1, [r2, #144]	; 0x90
    9524:	6852      	ldr	r2, [r2, #4]
    CLOCK_ENABLE(APBAMASK, EIC_);
    9526:	6961      	ldr	r1, [r4, #20]
    9528:	f8d7 00ec 	ldr.w	r0, [r7, #236]	; 0xec
    952c:	f441 6180 	orr.w	r1, r1, #1024	; 0x400
    9530:	f44f 5e80 	mov.w	lr, #4096	; 0x1000
    9534:	6161      	str	r1, [r4, #20]
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    9536:	22e0      	movs	r2, #224	; 0xe0
  NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
    9538:	f8c3 e000 	str.w	lr, [r3]
    953c:	f440 4080 	orr.w	r0, r0, #16384	; 0x4000
    9540:	f44f 3880 	mov.w	r8, #65536	; 0x10000
    9544:	f44f 3e00 	mov.w	lr, #131072	; 0x20000
    9548:	f44f 2180 	mov.w	r1, #262144	; 0x40000
    954c:	f44f 5900 	mov.w	r9, #8192	; 0x2000
    9550:	f44f 4480 	mov.w	r4, #16384	; 0x4000
    9554:	f44f 4a00 	mov.w	sl, #32768	; 0x8000
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    9558:	f883 230c 	strb.w	r2, [r3, #780]	; 0x30c
    955c:	f8c7 00ec 	str.w	r0, [r7, #236]	; 0xec
  NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
    9560:	f8c3 9000 	str.w	r9, [r3]
    9564:	f44f 2000 	mov.w	r0, #524288	; 0x80000
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    9568:	f883 230d 	strb.w	r2, [r3, #781]	; 0x30d
  NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
    956c:	f44f 1780 	mov.w	r7, #1048576	; 0x100000
    9570:	601c      	str	r4, [r3, #0]
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    9572:	f883 230e 	strb.w	r2, [r3, #782]	; 0x30e
  NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
    9576:	f8c3 a000 	str.w	sl, [r3]
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    957a:	f883 230f 	strb.w	r2, [r3, #783]	; 0x30f
  NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
    957e:	f8c3 8000 	str.w	r8, [r3]
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    9582:	f883 2310 	strb.w	r2, [r3, #784]	; 0x310
  NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
    9586:	f8c3 e000 	str.w	lr, [r3]
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    958a:	f883 2311 	strb.w	r2, [r3, #785]	; 0x311
  NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
    958e:	f44f 1e00 	mov.w	lr, #2097152	; 0x200000
    9592:	6019      	str	r1, [r3, #0]
    9594:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    9598:	f883 2312 	strb.w	r2, [r3, #786]	; 0x312
  NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
    959c:	6018      	str	r0, [r3, #0]
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    959e:	f883 2313 	strb.w	r2, [r3, #787]	; 0x313
  NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
    95a2:	f44f 0000 	mov.w	r0, #8388608	; 0x800000
    95a6:	601f      	str	r7, [r3, #0]
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    95a8:	f883 2314 	strb.w	r2, [r3, #788]	; 0x314
  NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
    95ac:	f8c3 e000 	str.w	lr, [r3]
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    95b0:	f883 2315 	strb.w	r2, [r3, #789]	; 0x315
  NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
    95b4:	6019      	str	r1, [r3, #0]
    95b6:	f04f 7180 	mov.w	r1, #16777216	; 0x1000000
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    95ba:	f883 2316 	strb.w	r2, [r3, #790]	; 0x316
  NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
    95be:	f04f 7800 	mov.w	r8, #33554432	; 0x2000000
    95c2:	6018      	str	r0, [r3, #0]
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    95c4:	f883 2317 	strb.w	r2, [r3, #791]	; 0x317
  NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
    95c8:	6019      	str	r1, [r3, #0]
    if (TimingMgr.SysTickPeriodMicroSec(1000)) {
    95ca:	f8dc 0000 	ldr.w	r0, [ip]
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    95ce:	f883 2318 	strb.w	r2, [r3, #792]	; 0x318
  NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
    95d2:	f04f 6180 	mov.w	r1, #67108864	; 0x4000000
    95d6:	f04f 6c00 	mov.w	ip, #134217728	; 0x8000000
    95da:	f8c3 8000 	str.w	r8, [r3]
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    95de:	f883 2319 	strb.w	r2, [r3, #793]	; 0x319
  NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
    95e2:	f44f 7880 	mov.w	r8, #256	; 0x100
    95e6:	6019      	str	r1, [r3, #0]
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    95e8:	f883 231a 	strb.w	r2, [r3, #794]	; 0x31a
    95ec:	2160      	movs	r1, #96	; 0x60
  NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
    95ee:	f8c3 c000 	str.w	ip, [r3]
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    95f2:	f883 231b 	strb.w	r2, [r3, #795]	; 0x31b
  NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
    95f6:	f04f 0c20 	mov.w	ip, #32
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    95fa:	2240      	movs	r2, #64	; 0x40
  NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
    95fc:	f8c3 e008 	str.w	lr, [r3, #8]
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    9600:	f883 1355 	strb.w	r1, [r3, #853]	; 0x355
  NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
    9604:	609f      	str	r7, [r3, #8]
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    9606:	f883 1354 	strb.w	r1, [r3, #852]	; 0x354
  NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
    960a:	f8c3 800c 	str.w	r8, [r3, #12]
    960e:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
    9612:	f8c3 c00c 	str.w	ip, [r3, #12]
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    9616:	f883 2368 	strb.w	r2, [r3, #872]	; 0x368
    961a:	f883 2365 	strb.w	r2, [r3, #869]	; 0x365
    961e:	f000 fb7f 	bl	9d20 <_ZN9ClearCore9SysTiming21SysTickPeriodMicroSecEm>
    9622:	b100      	cbz	r0, 9626 <_ZN9ClearCore10SysManager10InitializeEv+0x202>
    9624:	e7fe      	b.n	9624 <_ZN9ClearCore10SysManager10InitializeEv+0x200>
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    9626:	4b1c      	ldr	r3, [pc, #112]	; (9698 <_ZN9ClearCore10SysManager10InitializeEv+0x274>)
    9628:	22c0      	movs	r2, #192	; 0xc0
    StatusMgr.Initialize(ShiftRegister::SR_UNDERGLOW_MASK);
    962a:	4621      	mov	r1, r4
    962c:	4628      	mov	r0, r5
    962e:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23
    9632:	f008 f835 	bl	116a0 <_ZN9ClearCore13StatusManager10InitializeENS_13ShiftRegister5MasksE>
    while (Microseconds() < 10300) {
    9636:	f642 043b 	movw	r4, #10299	; 0x283b
    963a:	f000 fb9d 	bl	9d78 <Microseconds>
    963e:	42a0      	cmp	r0, r4
    9640:	d9fb      	bls.n	963a <_ZN9ClearCore10SysManager10InitializeEv+0x216>
    EthernetMgr.Initialize();
    9642:	4b16      	ldr	r3, [pc, #88]	; (969c <_ZN9ClearCore10SysManager10InitializeEv+0x278>)
    9644:	6818      	ldr	r0, [r3, #0]
    9646:	f000 fcdd 	bl	a004 <_ZN9ClearCore15EthernetManager10InitializeEv>
    m_readyForOperations = true;
    964a:	2301      	movs	r3, #1
    964c:	7033      	strb	r3, [r6, #0]
    964e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    9652:	bf00      	nop
    9654:	e000edf0 	.word	0xe000edf0
    9658:	e0001000 	.word	0xe0001000
    965c:	40001800 	.word	0x40001800
    9660:	20001f0c 	.word	0x20001f0c
    9664:	00022da8 	.word	0x00022da8
    9668:	0001d4c0 	.word	0x0001d4c0
    966c:	41008000 	.word	0x41008000
    9670:	20000ad0 	.word	0x20000ad0
    9674:	20001c04 	.word	0x20001c04
    9678:	200019d8 	.word	0x200019d8
    967c:	20001e04 	.word	0x20001e04
    9680:	20001efc 	.word	0x20001efc
    9684:	20000adc 	.word	0x20000adc
    9688:	20001af0 	.word	0x20001af0
    968c:	40001c00 	.word	0x40001c00
    9690:	40000800 	.word	0x40000800
    9694:	e000e100 	.word	0xe000e100
    9698:	e000ed00 	.word	0xe000ed00
    969c:	20001bf8 	.word	0x20001bf8
    96a0:	20001bec 	.word	0x20001bec

000096a4 <_ZN9ClearCore10SysManager10ResetBoardENS0_10ResetModesE>:
  __ASM volatile ("cpsid i" : : : "memory");
    96a4:	b672      	cpsid	i
    96a6:	4a09      	ldr	r2, [pc, #36]	; (96cc <_ZN9ClearCore10SysManager10ResetBoardENS0_10ResetModesE+0x28>)
    uint32_t *addr = (uint32_t *)BOOT_DOUBLE_TAP_ADDRESS;
    if (mode == RESET_TO_BOOTLOADER) {
        *addr = DOUBLE_TAP_MAGIC;
    }
    else {
        *addr = 0;
    96a8:	4b09      	ldr	r3, [pc, #36]	; (96d0 <_ZN9ClearCore10SysManager10ResetBoardENS0_10ResetModesE+0x2c>)
    96aa:	2901      	cmp	r1, #1
    96ac:	bf18      	it	ne
    96ae:	2300      	movne	r3, #0
    96b0:	6013      	str	r3, [r2, #0]
  __ASM volatile ("dsb 0xF":::"memory");
    96b2:	f3bf 8f4f 	dsb	sy
__STATIC_INLINE void NVIC_SystemReset(void)
{
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
    96b6:	4907      	ldr	r1, [pc, #28]	; (96d4 <_ZN9ClearCore10SysManager10ResetBoardENS0_10ResetModesE+0x30>)
    96b8:	4b07      	ldr	r3, [pc, #28]	; (96d8 <_ZN9ClearCore10SysManager10ResetBoardENS0_10ResetModesE+0x34>)
    96ba:	68ca      	ldr	r2, [r1, #12]
    96bc:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
    96c0:	4313      	orrs	r3, r2
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
    96c2:	60cb      	str	r3, [r1, #12]
    96c4:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("nop");
    96c8:	bf00      	nop
    96ca:	e7fd      	b.n	96c8 <_ZN9ClearCore10SysManager10ResetBoardENS0_10ResetModesE+0x24>
    96cc:	2002fffc 	.word	0x2002fffc
    96d0:	f01669ef 	.word	0xf01669ef
    96d4:	e000ed00 	.word	0xe000ed00
    96d8:	05fa0004 	.word	0x05fa0004

000096dc <GMAC_Handler>:
// =============================================================================
// =========================== Connector ISR Handlers ==========================
// =============================================================================

extern "C" void GMAC_Handler(void) {
    ClearCore::EthernetMgr.IrqHandlerGmac();
    96dc:	4b01      	ldr	r3, [pc, #4]	; (96e4 <GMAC_Handler+0x8>)
    96de:	6818      	ldr	r0, [r3, #0]
    96e0:	f001 b908 	b.w	a8f4 <_ZN9ClearCore15EthernetManager14IrqHandlerGmacEv>
    96e4:	20001bf8 	.word	0x20001bf8

000096e8 <SERCOM0_0_Handler>:
}

extern "C" void SERCOM0_0_Handler(void) {
    ClearCore::ConnectorCOM1.IrqHandlerTx();
    96e8:	4801      	ldr	r0, [pc, #4]	; (96f0 <SERCOM0_0_Handler+0x8>)
    96ea:	f007 bc6f 	b.w	10fcc <_ZN9ClearCore10SerialBase12IrqHandlerTxEv>
    96ee:	bf00      	nop
    96f0:	200015f0 	.word	0x200015f0

000096f4 <SERCOM0_2_Handler>:
}
extern "C" void SERCOM0_2_Handler(void) {
    ClearCore::ConnectorCOM1.IrqHandlerRx();
    96f4:	4801      	ldr	r0, [pc, #4]	; (96fc <SERCOM0_2_Handler+0x8>)
    96f6:	f007 bc91 	b.w	1101c <_ZN9ClearCore10SerialBase12IrqHandlerRxEv>
    96fa:	bf00      	nop
    96fc:	200015f0 	.word	0x200015f0

00009700 <SERCOM0_3_Handler>:
}
extern "C" void SERCOM0_3_Handler(void) {
    ClearCore::ConnectorCOM1.IrqHandlerException();
    9700:	4801      	ldr	r0, [pc, #4]	; (9708 <SERCOM0_3_Handler+0x8>)
    9702:	f007 bcc7 	b.w	11094 <_ZN9ClearCore10SerialBase19IrqHandlerExceptionEv>
    9706:	bf00      	nop
    9708:	200015f0 	.word	0x200015f0

0000970c <SERCOM2_0_Handler>:
}

extern "C" void SERCOM2_0_Handler(void) {
    ClearCore::XBee.IrqHandlerTx();
    970c:	4801      	ldr	r0, [pc, #4]	; (9714 <SERCOM2_0_Handler+0x8>)
    970e:	f007 bc5d 	b.w	10fcc <_ZN9ClearCore10SerialBase12IrqHandlerTxEv>
    9712:	bf00      	nop
    9714:	20001748 	.word	0x20001748

00009718 <SERCOM2_2_Handler>:
}
extern "C" void SERCOM2_2_Handler(void) {
    ClearCore::XBee.IrqHandlerRx();
    9718:	4801      	ldr	r0, [pc, #4]	; (9720 <SERCOM2_2_Handler+0x8>)
    971a:	f007 bc7f 	b.w	1101c <_ZN9ClearCore10SerialBase12IrqHandlerRxEv>
    971e:	bf00      	nop
    9720:	20001748 	.word	0x20001748

00009724 <SERCOM2_3_Handler>:
}
extern "C" void SERCOM2_3_Handler(void) {
    ClearCore::XBee.IrqHandlerException();
    9724:	4801      	ldr	r0, [pc, #4]	; (972c <SERCOM2_3_Handler+0x8>)
    9726:	f007 bcb5 	b.w	11094 <_ZN9ClearCore10SerialBase19IrqHandlerExceptionEv>
    972a:	bf00      	nop
    972c:	20001748 	.word	0x20001748

00009730 <SERCOM7_0_Handler>:
}

extern "C" void SERCOM7_0_Handler(void) {
    ClearCore::ConnectorCOM0.IrqHandlerTx();
    9730:	4801      	ldr	r0, [pc, #4]	; (9738 <SERCOM7_0_Handler+0x8>)
    9732:	f007 bc4b 	b.w	10fcc <_ZN9ClearCore10SerialBase12IrqHandlerTxEv>
    9736:	bf00      	nop
    9738:	20001498 	.word	0x20001498

0000973c <SERCOM7_2_Handler>:
}
extern "C" void SERCOM7_2_Handler(void) {
    ClearCore::ConnectorCOM0.IrqHandlerRx();
    973c:	4801      	ldr	r0, [pc, #4]	; (9744 <SERCOM7_2_Handler+0x8>)
    973e:	f007 bc6d 	b.w	1101c <_ZN9ClearCore10SerialBase12IrqHandlerRxEv>
    9742:	bf00      	nop
    9744:	20001498 	.word	0x20001498

00009748 <SERCOM7_3_Handler>:
}
extern "C" void SERCOM7_3_Handler(void) {
    ClearCore::ConnectorCOM0.IrqHandlerException();
    9748:	4801      	ldr	r0, [pc, #4]	; (9750 <SERCOM7_3_Handler+0x8>)
    974a:	f007 bca3 	b.w	11094 <_ZN9ClearCore10SerialBase19IrqHandlerExceptionEv>
    974e:	bf00      	nop
    9750:	20001498 	.word	0x20001498

00009754 <EIC_0_Handler>:
}

extern "C" void EIC_0_Handler(void) {
    ClearCore::InputMgr.EIC_Handler(0);
    9754:	4b02      	ldr	r3, [pc, #8]	; (9760 <EIC_0_Handler+0xc>)
    9756:	2100      	movs	r1, #0
    9758:	6818      	ldr	r0, [r3, #0]
    975a:	f7fb badb 	b.w	4d14 <_ZN9ClearCore12InputManager11EIC_HandlerEh>
    975e:	bf00      	nop
    9760:	20000ad0 	.word	0x20000ad0

00009764 <EIC_1_Handler>:
}

extern "C" void EIC_1_Handler(void) {
    ClearCore::InputMgr.EIC_Handler(1);
    9764:	4b02      	ldr	r3, [pc, #8]	; (9770 <EIC_1_Handler+0xc>)
    9766:	2101      	movs	r1, #1
    9768:	6818      	ldr	r0, [r3, #0]
    976a:	f7fb bad3 	b.w	4d14 <_ZN9ClearCore12InputManager11EIC_HandlerEh>
    976e:	bf00      	nop
    9770:	20000ad0 	.word	0x20000ad0

00009774 <EIC_2_Handler>:
}

extern "C" void EIC_2_Handler(void) {
    ClearCore::InputMgr.EIC_Handler(2);
    9774:	4b02      	ldr	r3, [pc, #8]	; (9780 <EIC_2_Handler+0xc>)
    9776:	2102      	movs	r1, #2
    9778:	6818      	ldr	r0, [r3, #0]
    977a:	f7fb bacb 	b.w	4d14 <_ZN9ClearCore12InputManager11EIC_HandlerEh>
    977e:	bf00      	nop
    9780:	20000ad0 	.word	0x20000ad0

00009784 <EIC_3_Handler>:
}

extern "C" void EIC_3_Handler(void) {
    ClearCore::InputMgr.EIC_Handler(3);
    9784:	4b02      	ldr	r3, [pc, #8]	; (9790 <EIC_3_Handler+0xc>)
    9786:	2103      	movs	r1, #3
    9788:	6818      	ldr	r0, [r3, #0]
    978a:	f7fb bac3 	b.w	4d14 <_ZN9ClearCore12InputManager11EIC_HandlerEh>
    978e:	bf00      	nop
    9790:	20000ad0 	.word	0x20000ad0

00009794 <EIC_4_Handler>:
}

extern "C" void EIC_4_Handler(void) {
    ClearCore::InputMgr.EIC_Handler(4);
    9794:	4b02      	ldr	r3, [pc, #8]	; (97a0 <EIC_4_Handler+0xc>)
    9796:	2104      	movs	r1, #4
    9798:	6818      	ldr	r0, [r3, #0]
    979a:	f7fb babb 	b.w	4d14 <_ZN9ClearCore12InputManager11EIC_HandlerEh>
    979e:	bf00      	nop
    97a0:	20000ad0 	.word	0x20000ad0

000097a4 <EIC_5_Handler>:
}

extern "C" void EIC_5_Handler(void) {
    ClearCore::InputMgr.EIC_Handler(5);
    97a4:	4b02      	ldr	r3, [pc, #8]	; (97b0 <EIC_5_Handler+0xc>)
    97a6:	2105      	movs	r1, #5
    97a8:	6818      	ldr	r0, [r3, #0]
    97aa:	f7fb bab3 	b.w	4d14 <_ZN9ClearCore12InputManager11EIC_HandlerEh>
    97ae:	bf00      	nop
    97b0:	20000ad0 	.word	0x20000ad0

000097b4 <EIC_6_Handler>:
}

extern "C" void EIC_6_Handler(void) {
    ClearCore::InputMgr.EIC_Handler(6);
    97b4:	4b02      	ldr	r3, [pc, #8]	; (97c0 <EIC_6_Handler+0xc>)
    97b6:	2106      	movs	r1, #6
    97b8:	6818      	ldr	r0, [r3, #0]
    97ba:	f7fb baab 	b.w	4d14 <_ZN9ClearCore12InputManager11EIC_HandlerEh>
    97be:	bf00      	nop
    97c0:	20000ad0 	.word	0x20000ad0

000097c4 <EIC_7_Handler>:
}

extern "C" void EIC_7_Handler(void) {
    ClearCore::InputMgr.EIC_Handler(7);
    97c4:	4b02      	ldr	r3, [pc, #8]	; (97d0 <EIC_7_Handler+0xc>)
    97c6:	2107      	movs	r1, #7
    97c8:	6818      	ldr	r0, [r3, #0]
    97ca:	f7fb baa3 	b.w	4d14 <_ZN9ClearCore12InputManager11EIC_HandlerEh>
    97ce:	bf00      	nop
    97d0:	20000ad0 	.word	0x20000ad0

000097d4 <EIC_8_Handler>:
}

extern "C" void EIC_8_Handler(void) {
    ClearCore::InputMgr.EIC_Handler(8);
    97d4:	4b02      	ldr	r3, [pc, #8]	; (97e0 <EIC_8_Handler+0xc>)
    97d6:	2108      	movs	r1, #8
    97d8:	6818      	ldr	r0, [r3, #0]
    97da:	f7fb ba9b 	b.w	4d14 <_ZN9ClearCore12InputManager11EIC_HandlerEh>
    97de:	bf00      	nop
    97e0:	20000ad0 	.word	0x20000ad0

000097e4 <EIC_9_Handler>:
}

extern "C" void EIC_9_Handler(void) {
    ClearCore::InputMgr.EIC_Handler(9);
    97e4:	4b02      	ldr	r3, [pc, #8]	; (97f0 <EIC_9_Handler+0xc>)
    97e6:	2109      	movs	r1, #9
    97e8:	6818      	ldr	r0, [r3, #0]
    97ea:	f7fb ba93 	b.w	4d14 <_ZN9ClearCore12InputManager11EIC_HandlerEh>
    97ee:	bf00      	nop
    97f0:	20000ad0 	.word	0x20000ad0

000097f4 <EIC_10_Handler>:
}

extern "C" void EIC_10_Handler(void) {
    ClearCore::InputMgr.EIC_Handler(10);
    97f4:	4b02      	ldr	r3, [pc, #8]	; (9800 <EIC_10_Handler+0xc>)
    97f6:	210a      	movs	r1, #10
    97f8:	6818      	ldr	r0, [r3, #0]
    97fa:	f7fb ba8b 	b.w	4d14 <_ZN9ClearCore12InputManager11EIC_HandlerEh>
    97fe:	bf00      	nop
    9800:	20000ad0 	.word	0x20000ad0

00009804 <EIC_11_Handler>:
}

extern "C" void EIC_11_Handler(void) {
    ClearCore::InputMgr.EIC_Handler(11);
    9804:	4b02      	ldr	r3, [pc, #8]	; (9810 <EIC_11_Handler+0xc>)
    9806:	210b      	movs	r1, #11
    9808:	6818      	ldr	r0, [r3, #0]
    980a:	f7fb ba83 	b.w	4d14 <_ZN9ClearCore12InputManager11EIC_HandlerEh>
    980e:	bf00      	nop
    9810:	20000ad0 	.word	0x20000ad0

00009814 <EIC_12_Handler>:
}

extern "C" void EIC_12_Handler(void) {
    ClearCore::EthernetMgr.IrqHandlerPhy();
    9814:	4b01      	ldr	r3, [pc, #4]	; (981c <EIC_12_Handler+0x8>)
    9816:	6818      	ldr	r0, [r3, #0]
    9818:	f000 beb0 	b.w	a57c <_ZN9ClearCore15EthernetManager13IrqHandlerPhyEv>
    981c:	20001bf8 	.word	0x20001bf8

00009820 <EIC_13_Handler>:
}

extern "C" void EIC_13_Handler(void) {
    ClearCore::InputMgr.EIC_Handler(13);
    9820:	4b02      	ldr	r3, [pc, #8]	; (982c <EIC_13_Handler+0xc>)
    9822:	210d      	movs	r1, #13
    9824:	6818      	ldr	r0, [r3, #0]
    9826:	f7fb ba75 	b.w	4d14 <_ZN9ClearCore12InputManager11EIC_HandlerEh>
    982a:	bf00      	nop
    982c:	20000ad0 	.word	0x20000ad0

00009830 <EIC_14_Handler>:
}

extern "C" void EIC_14_Handler(void) {
    ClearCore::InputMgr.EIC_Handler(14);
    9830:	4b02      	ldr	r3, [pc, #8]	; (983c <EIC_14_Handler+0xc>)
    9832:	210e      	movs	r1, #14
    9834:	6818      	ldr	r0, [r3, #0]
    9836:	f7fb ba6d 	b.w	4d14 <_ZN9ClearCore12InputManager11EIC_HandlerEh>
    983a:	bf00      	nop
    983c:	20000ad0 	.word	0x20000ad0

00009840 <EIC_15_Handler>:
}

extern "C" void EIC_15_Handler(void) {
    ClearCore::InputMgr.EIC_Handler(15);
    9840:	4b02      	ldr	r3, [pc, #8]	; (984c <EIC_15_Handler+0xc>)
    9842:	210f      	movs	r1, #15
    9844:	6818      	ldr	r0, [r3, #0]
    9846:	f7fb ba65 	b.w	4d14 <_ZN9ClearCore12InputManager11EIC_HandlerEh>
    984a:	bf00      	nop
    984c:	20000ad0 	.word	0x20000ad0

00009850 <TCC3_0_Handler>:
}

extern "C" void TCC3_0_Handler(void) {
    TCC3->INTFLAG.reg = TCC_INTFLAG_MASK;
    9850:	4b02      	ldr	r3, [pc, #8]	; (985c <TCC3_0_Handler+0xc>)
    9852:	4a03      	ldr	r2, [pc, #12]	; (9860 <TCC3_0_Handler+0x10>)
    9854:	62da      	str	r2, [r3, #44]	; 0x2c
    ClearCore::ConnectorIO5.ToneUpdate();
    9856:	4803      	ldr	r0, [pc, #12]	; (9864 <TCC3_0_Handler+0x14>)
    9858:	f005 b814 	b.w	e884 <_ZN9ClearCore19DigitalInOutHBridge10ToneUpdateEv>
    985c:	42001000 	.word	0x42001000
    9860:	003ffc0f 	.word	0x003ffc0f
    9864:	200013f8 	.word	0x200013f8

00009868 <TCC4_0_Handler>:
}
extern "C" void TCC4_0_Handler(void) {
    TCC4->INTFLAG.reg = TCC_INTFLAG_MASK;
    9868:	4b02      	ldr	r3, [pc, #8]	; (9874 <TCC4_0_Handler+0xc>)
    986a:	4a03      	ldr	r2, [pc, #12]	; (9878 <TCC4_0_Handler+0x10>)
    986c:	62da      	str	r2, [r3, #44]	; 0x2c
    ClearCore::ConnectorIO4.ToneUpdate();
    986e:	4803      	ldr	r0, [pc, #12]	; (987c <TCC4_0_Handler+0x14>)
    9870:	f005 b808 	b.w	e884 <_ZN9ClearCore19DigitalInOutHBridge10ToneUpdateEv>
    9874:	43001000 	.word	0x43001000
    9878:	003ffc0f 	.word	0x003ffc0f
    987c:	20001374 	.word	0x20001374

00009880 <SysTick_Handler>:
}

extern "C" void SysTick_Handler(void) {
    9880:	b508      	push	{r3, lr}
    if (!FastSysTick) {
    9882:	4b0d      	ldr	r3, [pc, #52]	; (98b8 <SysTick_Handler+0x38>)
    9884:	781b      	ldrb	r3, [r3, #0]
    9886:	b103      	cbz	r3, 988a <SysTick_Handler+0xa>
    9888:	bd08      	pop	{r3, pc}
    if (!m_readyForOperations) {
    988a:	4b0c      	ldr	r3, [pc, #48]	; (98bc <SysTick_Handler+0x3c>)
    988c:	781b      	ldrb	r3, [r3, #0]
    988e:	2b00      	cmp	r3, #0
    9890:	d0fa      	beq.n	9888 <SysTick_Handler+0x8>
    CcioMgr.RefreshSlow();
    9892:	4b0b      	ldr	r3, [pc, #44]	; (98c0 <SysTick_Handler+0x40>)
    9894:	6818      	ldr	r0, [r3, #0]
    9896:	f006 f8df 	bl	fa58 <_ZN9ClearCore16CcioBoardManager11RefreshSlowEv>
        MotorConnectors[iMotor]->RefreshSlow();
    989a:	480a      	ldr	r0, [pc, #40]	; (98c4 <SysTick_Handler+0x44>)
    989c:	f7fb fd2e 	bl	52fc <_ZN9ClearCore11MotorDriver11RefreshSlowEv>
    98a0:	4809      	ldr	r0, [pc, #36]	; (98c8 <SysTick_Handler+0x48>)
    98a2:	f7fb fd2b 	bl	52fc <_ZN9ClearCore11MotorDriver11RefreshSlowEv>
    98a6:	4809      	ldr	r0, [pc, #36]	; (98cc <SysTick_Handler+0x4c>)
    98a8:	f7fb fd28 	bl	52fc <_ZN9ClearCore11MotorDriver11RefreshSlowEv>
    98ac:	4808      	ldr	r0, [pc, #32]	; (98d0 <SysTick_Handler+0x50>)
    ClearCore::SysMgr.SysTickUpdate();
}
    98ae:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
        MotorConnectors[iMotor]->RefreshSlow();
    98b2:	f7fb bd23 	b.w	52fc <_ZN9ClearCore11MotorDriver11RefreshSlowEv>
    98b6:	bf00      	nop
    98b8:	20001088 	.word	0x20001088
    98bc:	200019d4 	.word	0x200019d4
    98c0:	20001efc 	.word	0x20001efc
    98c4:	20000b68 	.word	0x20000b68
    98c8:	20000cb0 	.word	0x20000cb0
    98cc:	20000df8 	.word	0x20000df8
    98d0:	20000f40 	.word	0x20000f40

000098d4 <TCC0_0_Handler>:
    TimingMgr.IsrStart();
    98d4:	4a30      	ldr	r2, [pc, #192]	; (9998 <TCC0_0_Handler+0xc4>)
/**
    Interrupt to handle ClearCore background tasks
**/
extern "C" void TCC0_0_Handler(void) {
    98d6:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    ACK_FAST_UPDATE_INT;
    98da:	4b30      	ldr	r3, [pc, #192]	; (999c <TCC0_0_Handler+0xc8>)
    TimingMgr.IsrStart();
    98dc:	6816      	ldr	r6, [r2, #0]
    ACK_FAST_UPDATE_INT;
    98de:	4a30      	ldr	r2, [pc, #192]	; (99a0 <TCC0_0_Handler+0xcc>)
    98e0:	62da      	str	r2, [r3, #44]	; 0x2c
    TimingMgr.IsrStart();
    98e2:	4630      	mov	r0, r6
    98e4:	f000 f9ca 	bl	9c7c <_ZN9ClearCore9SysTiming8IsrStartEv>
    CcioMgr.Refresh();
    98e8:	4b2e      	ldr	r3, [pc, #184]	; (99a4 <TCC0_0_Handler+0xd0>)

        \return True if the board is initialized and ready for
        operations.
    **/
    bool Ready() {
        return m_readyForOperations;
    98ea:	f8df 80f4 	ldr.w	r8, [pc, #244]	; 99e0 <TCC0_0_Handler+0x10c>
    98ee:	f8d3 9000 	ldr.w	r9, [r3]
    98f2:	4648      	mov	r0, r9
    98f4:	f005 fdce 	bl	f494 <_ZN9ClearCore16CcioBoardManager7RefreshEv>
    AdcMgr.Update();
    98f8:	4b2b      	ldr	r3, [pc, #172]	; (99a8 <TCC0_0_Handler+0xd4>)
    98fa:	6818      	ldr	r0, [r3, #0]
    98fc:	f003 fec4 	bl	d688 <_ZN9ClearCore10AdcManager6UpdateEv>
    StatusMgr.Refresh();
    9900:	4b2a      	ldr	r3, [pc, #168]	; (99ac <TCC0_0_Handler+0xd8>)
    9902:	6818      	ldr	r0, [r3, #0]
    9904:	f007 ff70 	bl	117e8 <_ZN9ClearCore13StatusManager7RefreshEv>
    UsbMgr.Refresh();
    9908:	4b29      	ldr	r3, [pc, #164]	; (99b0 <TCC0_0_Handler+0xdc>)
    990a:	6818      	ldr	r0, [r3, #0]
    990c:	f7fd fe22 	bl	7554 <_ZN9ClearCore10UsbManager7RefreshEv>
    InputMgr.UpdateBegin();
    9910:	4b28      	ldr	r3, [pc, #160]	; (99b4 <TCC0_0_Handler+0xe0>)
    9912:	681f      	ldr	r7, [r3, #0]
    9914:	4638      	mov	r0, r7
    9916:	f7fb fa2b 	bl	4d70 <_ZN9ClearCore12InputManager11UpdateBeginEv>
    if (SysMgr.Ready()) {
    991a:	f898 3000 	ldrb.w	r3, [r8]
    991e:	b15b      	cbz	r3, 9938 <TCC0_0_Handler+0x64>
    9920:	4c25      	ldr	r4, [pc, #148]	; (99b8 <TCC0_0_Handler+0xe4>)
    9922:	4826      	ldr	r0, [pc, #152]	; (99bc <TCC0_0_Handler+0xe8>)
    9924:	f104 0550 	add.w	r5, r4, #80	; 0x50
    9928:	e001      	b.n	992e <TCC0_0_Handler+0x5a>
    992a:	f854 0f04 	ldr.w	r0, [r4, #4]!
            Connectors[i]->Refresh();
    992e:	6803      	ldr	r3, [r0, #0]
    9930:	6a1b      	ldr	r3, [r3, #32]
    9932:	4798      	blx	r3
        for (uint8_t i = 0; i < CLEARCORE_PIN_MAX; i++) {
    9934:	42ac      	cmp	r4, r5
    9936:	d1f8      	bne.n	992a <TCC0_0_Handler+0x56>
    InputMgr.UpdateEnd();
    9938:	4638      	mov	r0, r7
    993a:	f7fb fa2d 	bl	4d98 <_ZN9ClearCore12InputManager9UpdateEndEv>
    EncoderIn.Update();
    993e:	4820      	ldr	r0, [pc, #128]	; (99c0 <TCC0_0_Handler+0xec>)
    9940:	f002 fb7c 	bl	c03c <_ZN9ClearCore12EncoderInput6UpdateEv>
    ShiftReg.Update();
    9944:	481f      	ldr	r0, [pc, #124]	; (99c4 <TCC0_0_Handler+0xf0>)
    9946:	f001 f95b 	bl	ac00 <_ZN9ClearCore13ShiftRegister6UpdateEv>
    TimingMgr.Update();
    994a:	4630      	mov	r0, r6
    994c:	f000 f9ac 	bl	9ca8 <_ZN9ClearCore9SysTiming6UpdateEv>
    tickCnt++;
    9950:	4a1d      	ldr	r2, [pc, #116]	; (99c8 <TCC0_0_Handler+0xf4>)
    if (FastSysTick) {
    9952:	491e      	ldr	r1, [pc, #120]	; (99cc <TCC0_0_Handler+0xf8>)
    tickCnt++;
    9954:	6813      	ldr	r3, [r2, #0]
    if (FastSysTick) {
    9956:	7809      	ldrb	r1, [r1, #0]
    tickCnt++;
    9958:	3301      	adds	r3, #1
    995a:	6013      	str	r3, [r2, #0]
    if (FastSysTick) {
    995c:	b111      	cbz	r1, 9964 <TCC0_0_Handler+0x90>
    if (!m_readyForOperations) {
    995e:	f898 3000 	ldrb.w	r3, [r8]
    9962:	b923      	cbnz	r3, 996e <TCC0_0_Handler+0x9a>
    TimingMgr.IsrEnd();
    9964:	4630      	mov	r0, r6
    ClearCore::SysMgr.FastUpdate();
}
    9966:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    TimingMgr.IsrEnd();
    996a:	f000 b98d 	b.w	9c88 <_ZN9ClearCore9SysTiming6IsrEndEv>
    CcioMgr.RefreshSlow();
    996e:	4648      	mov	r0, r9
    9970:	f006 f872 	bl	fa58 <_ZN9ClearCore16CcioBoardManager11RefreshSlowEv>
        MotorConnectors[iMotor]->RefreshSlow();
    9974:	4816      	ldr	r0, [pc, #88]	; (99d0 <TCC0_0_Handler+0xfc>)
    9976:	f7fb fcc1 	bl	52fc <_ZN9ClearCore11MotorDriver11RefreshSlowEv>
    997a:	4816      	ldr	r0, [pc, #88]	; (99d4 <TCC0_0_Handler+0x100>)
    997c:	f7fb fcbe 	bl	52fc <_ZN9ClearCore11MotorDriver11RefreshSlowEv>
    9980:	4815      	ldr	r0, [pc, #84]	; (99d8 <TCC0_0_Handler+0x104>)
    9982:	f7fb fcbb 	bl	52fc <_ZN9ClearCore11MotorDriver11RefreshSlowEv>
    9986:	4815      	ldr	r0, [pc, #84]	; (99dc <TCC0_0_Handler+0x108>)
    9988:	f7fb fcb8 	bl	52fc <_ZN9ClearCore11MotorDriver11RefreshSlowEv>
    TimingMgr.IsrEnd();
    998c:	4630      	mov	r0, r6
}
    998e:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    TimingMgr.IsrEnd();
    9992:	f000 b979 	b.w	9c88 <_ZN9ClearCore9SysTiming6IsrEndEv>
    9996:	bf00      	nop
    9998:	20001bec 	.word	0x20001bec
    999c:	41016000 	.word	0x41016000
    99a0:	003ffc0f 	.word	0x003ffc0f
    99a4:	20001efc 	.word	0x20001efc
    99a8:	20001e04 	.word	0x20001e04
    99ac:	20001f0c 	.word	0x20001f0c
    99b0:	20000adc 	.word	0x20000adc
    99b4:	20000ad0 	.word	0x20000ad0
    99b8:	00022dac 	.word	0x00022dac
    99bc:	200011e8 	.word	0x200011e8
    99c0:	20001af0 	.word	0x20001af0
    99c4:	200019d8 	.word	0x200019d8
    99c8:	20001be8 	.word	0x20001be8
    99cc:	20001088 	.word	0x20001088
    99d0:	20000b68 	.word	0x20000b68
    99d4:	20000cb0 	.word	0x20000cb0
    99d8:	20000df8 	.word	0x20000df8
    99dc:	20000f40 	.word	0x20000f40
    99e0:	200019d4 	.word	0x200019d4

000099e4 <Reset_Handler>:
extern int main(void);

/**
    This is called on processor reset to initialize the device and call main().
*/
void Reset_Handler(void) {
    99e4:	b508      	push	{r3, lr}

    // Initialize the initialized data section
    pSrc = &__etext;
    pDest = &__data_start__;

    if ((&__data_start__ != &__data_end__) && (pSrc != pDest)) {
    99e6:	4813      	ldr	r0, [pc, #76]	; (9a34 <Reset_Handler+0x50>)
    99e8:	4b13      	ldr	r3, [pc, #76]	; (9a38 <Reset_Handler+0x54>)
    99ea:	4298      	cmp	r0, r3
    99ec:	d00b      	beq.n	9a06 <Reset_Handler+0x22>
    99ee:	4913      	ldr	r1, [pc, #76]	; (9a3c <Reset_Handler+0x58>)
    99f0:	4281      	cmp	r1, r0
    99f2:	d008      	beq.n	9a06 <Reset_Handler+0x22>
        for (; pDest < &__data_end__; pDest++, pSrc++) {
    99f4:	4298      	cmp	r0, r3
    99f6:	d206      	bcs.n	9a06 <Reset_Handler+0x22>
            *pDest = *pSrc;
    99f8:	43c2      	mvns	r2, r0
    99fa:	441a      	add	r2, r3
    99fc:	f022 0203 	bic.w	r2, r2, #3
    9a00:	3204      	adds	r2, #4
    9a02:	f014 fbfd 	bl	1e200 <memcpy>
        }
    }

    // Clear the zero section
    if (&__bss_start__ != &__bss_end__) {
    9a06:	480e      	ldr	r0, [pc, #56]	; (9a40 <Reset_Handler+0x5c>)
    9a08:	4b0e      	ldr	r3, [pc, #56]	; (9a44 <Reset_Handler+0x60>)
    9a0a:	4298      	cmp	r0, r3
    9a0c:	d008      	beq.n	9a20 <Reset_Handler+0x3c>
        for (pDest = &__bss_start__; pDest < &__bss_end__; pDest++) {
    9a0e:	d207      	bcs.n	9a20 <Reset_Handler+0x3c>
            *pDest = 0ul;
    9a10:	43c2      	mvns	r2, r0
    9a12:	441a      	add	r2, r3
    9a14:	f022 0203 	bic.w	r2, r2, #3
    9a18:	3204      	adds	r2, #4
    9a1a:	2100      	movs	r1, #0
    9a1c:	f014 fcee 	bl	1e3fc <memset>
        }
    }

    SystemInit();
    9a20:	f002 f93a 	bl	bc98 <SystemInit>

    /* Initialize the C library */
    __libc_init_array();
    9a24:	f014 f862 	bl	1daec <__libc_init_array>

    ClearCore::SysMgr.Initialize();
    9a28:	4807      	ldr	r0, [pc, #28]	; (9a48 <Reset_Handler+0x64>)
    9a2a:	f7ff fcfb 	bl	9424 <_ZN9ClearCore10SysManager10InitializeEv>

#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wpedantic"
    // ISO C++ forbids hijacking main(), but we can't avoid it
    // in this application.
    main();
    9a2e:	f7fa fd2f 	bl	4490 <main>
    9a32:	e7fe      	b.n	9a32 <Reset_Handler+0x4e>
    9a34:	20000000 	.word	0x20000000
    9a38:	20000ab0 	.word	0x20000ab0
    9a3c:	00025094 	.word	0x00025094
    9a40:	20000ab0 	.word	0x20000ab0
    9a44:	20002394 	.word	0x20002394
    9a48:	200019d4 	.word	0x200019d4

00009a4c <_GLOBAL__sub_I__ZN9ClearCore11FastSysTickE>:
#pragma GCC diagnostic pop

    while (1) {
        continue;
    }
}
    9a4c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
EncoderInput EncoderIn;
    9a50:	4852      	ldr	r0, [pc, #328]	; (9b9c <_GLOBAL__sub_I__ZN9ClearCore11FastSysTickE+0x150>)
        \brief Default constructor so this connector can be a global and
        constructed by SysManager.

        \note Should not be called by anything other than SysManager.
    **/
    LedDriver() {};
    9a52:	4d53      	ldr	r5, [pc, #332]	; (9ba0 <_GLOBAL__sub_I__ZN9ClearCore11FastSysTickE+0x154>)
    DigitalIn() {};
    9a54:	4c53      	ldr	r4, [pc, #332]	; (9ba4 <_GLOBAL__sub_I__ZN9ClearCore11FastSysTickE+0x158>)
    9a56:	f8df 91bc 	ldr.w	r9, [pc, #444]	; 9c14 <_GLOBAL__sub_I__ZN9ClearCore11FastSysTickE+0x1c8>
    9a5a:	f8df 81bc 	ldr.w	r8, [pc, #444]	; 9c18 <_GLOBAL__sub_I__ZN9ClearCore11FastSysTickE+0x1cc>
    9a5e:	4f52      	ldr	r7, [pc, #328]	; (9ba8 <_GLOBAL__sub_I__ZN9ClearCore11FastSysTickE+0x15c>)
    9a60:	f002 fa94 	bl	bf8c <_ZN9ClearCore12EncoderInputC1Ev>
            reg = 0;
    9a64:	4b51      	ldr	r3, [pc, #324]	; (9bac <_GLOBAL__sub_I__ZN9ClearCore11FastSysTickE+0x160>)
#ifndef HIDE_FROM_DOXYGEN
    /**
        \brief Default constructor so this connector can be a global and
        constructed by SysManager
    **/
    SdCardDriver() {};
    9a66:	4a52      	ldr	r2, [pc, #328]	; (9bb0 <_GLOBAL__sub_I__ZN9ClearCore11FastSysTickE+0x164>)
ShiftRegister ShiftReg;
    9a68:	4852      	ldr	r0, [pc, #328]	; (9bb4 <_GLOBAL__sub_I__ZN9ClearCore11FastSysTickE+0x168>)
    9a6a:	601a      	str	r2, [r3, #0]
    9a6c:	2600      	movs	r6, #0
    9a6e:	f8c3 6140 	str.w	r6, [r3, #320]	; 0x140
    9a72:	f000 ff61 	bl	a938 <_ZN9ClearCore13ShiftRegisterC1Ev>
    9a76:	4b50      	ldr	r3, [pc, #320]	; (9bb8 <_GLOBAL__sub_I__ZN9ClearCore11FastSysTickE+0x16c>)
#ifndef HIDE_FROM_DOXYGEN
    /**
        Default constructor so this connector can be a global and constructed
        by SysManager.
    **/
    XBeeDriver() {};
    9a78:	4a50      	ldr	r2, [pc, #320]	; (9bbc <_GLOBAL__sub_I__ZN9ClearCore11FastSysTickE+0x170>)
    9a7a:	f8c3 6140 	str.w	r6, [r3, #320]	; 0x140
    9a7e:	4628      	mov	r0, r5
    9a80:	601a      	str	r2, [r3, #0]
    9a82:	f7fa ffab 	bl	49dc <_ZN9ClearCore9ConnectorC1Ev>
    9a86:	4b4e      	ldr	r3, [pc, #312]	; (9bc0 <_GLOBAL__sub_I__ZN9ClearCore11FastSysTickE+0x174>)
    9a88:	602b      	str	r3, [r5, #0]
    9a8a:	4620      	mov	r0, r4
    9a8c:	f7fa ffa6 	bl	49dc <_ZN9ClearCore9ConnectorC1Ev>
        \brief Default constructor so this connector can be a global and
        constructed by SysManager

        \note Should not be called by anything other than SysManager
    **/
    DigitalInOutAnalogOut() {};
    9a90:	4b4c      	ldr	r3, [pc, #304]	; (9bc4 <_GLOBAL__sub_I__ZN9ClearCore11FastSysTickE+0x178>)
    9a92:	6023      	str	r3, [r4, #0]
    9a94:	4648      	mov	r0, r9
    9a96:	f7fa ffa1 	bl	49dc <_ZN9ClearCore9ConnectorC1Ev>
        Default constructor so this connector can be a global and constructed
        by SysManager

        \note Should not be called by anything other than SysManager
    **/
    DigitalInOut() {};
    9a9a:	4c4b      	ldr	r4, [pc, #300]	; (9bc8 <_GLOBAL__sub_I__ZN9ClearCore11FastSysTickE+0x17c>)
    9a9c:	4d4b      	ldr	r5, [pc, #300]	; (9bcc <_GLOBAL__sub_I__ZN9ClearCore11FastSysTickE+0x180>)
    9a9e:	f8c9 4000 	str.w	r4, [r9]
    9aa2:	4640      	mov	r0, r8
    9aa4:	f7fa ff9a 	bl	49dc <_ZN9ClearCore9ConnectorC1Ev>
    9aa8:	f8df 9170 	ldr.w	r9, [pc, #368]	; 9c1c <_GLOBAL__sub_I__ZN9ClearCore11FastSysTickE+0x1d0>
    9aac:	f8c8 4000 	str.w	r4, [r8]
    9ab0:	4638      	mov	r0, r7
    9ab2:	f7fa ff93 	bl	49dc <_ZN9ClearCore9ConnectorC1Ev>
    9ab6:	f8df 8168 	ldr.w	r8, [pc, #360]	; 9c20 <_GLOBAL__sub_I__ZN9ClearCore11FastSysTickE+0x1d4>
    9aba:	603c      	str	r4, [r7, #0]
    9abc:	4628      	mov	r0, r5
    9abe:	f7fa ff8d 	bl	49dc <_ZN9ClearCore9ConnectorC1Ev>
        \brief Default constructor so this connector can be a global and
        constructed by SysManager.

        \note Should not be called by anything other than SysManager
    **/
    DigitalInOutHBridge() {};
    9ac2:	4c43      	ldr	r4, [pc, #268]	; (9bd0 <_GLOBAL__sub_I__ZN9ClearCore11FastSysTickE+0x184>)
    9ac4:	4f43      	ldr	r7, [pc, #268]	; (9bd4 <_GLOBAL__sub_I__ZN9ClearCore11FastSysTickE+0x188>)
    9ac6:	602c      	str	r4, [r5, #0]
    9ac8:	4648      	mov	r0, r9
    9aca:	f7fa ff87 	bl	49dc <_ZN9ClearCore9ConnectorC1Ev>
    9ace:	4d42      	ldr	r5, [pc, #264]	; (9bd8 <_GLOBAL__sub_I__ZN9ClearCore11FastSysTickE+0x18c>)
    9ad0:	f8c9 4000 	str.w	r4, [r9]
    9ad4:	4640      	mov	r0, r8
    9ad6:	f7fa ff81 	bl	49dc <_ZN9ClearCore9ConnectorC1Ev>
    9ada:	4c40      	ldr	r4, [pc, #256]	; (9bdc <_GLOBAL__sub_I__ZN9ClearCore11FastSysTickE+0x190>)
    9adc:	f8df 9144 	ldr.w	r9, [pc, #324]	; 9c24 <_GLOBAL__sub_I__ZN9ClearCore11FastSysTickE+0x1d8>
    9ae0:	f8c8 4000 	str.w	r4, [r8]
    9ae4:	4638      	mov	r0, r7
    9ae6:	f7fa ff79 	bl	49dc <_ZN9ClearCore9ConnectorC1Ev>
    9aea:	f8df 813c 	ldr.w	r8, [pc, #316]	; 9c28 <_GLOBAL__sub_I__ZN9ClearCore11FastSysTickE+0x1dc>
    9aee:	603c      	str	r4, [r7, #0]
    9af0:	4628      	mov	r0, r5
    9af2:	f7fa ff73 	bl	49dc <_ZN9ClearCore9ConnectorC1Ev>
    9af6:	4f3a      	ldr	r7, [pc, #232]	; (9be0 <_GLOBAL__sub_I__ZN9ClearCore11FastSysTickE+0x194>)
    9af8:	602c      	str	r4, [r5, #0]
    9afa:	4648      	mov	r0, r9
    9afc:	f7fa ff6e 	bl	49dc <_ZN9ClearCore9ConnectorC1Ev>
        Default constructor so this connector can be a global and constructed
        by SysManager

        \note Should not be called by anything other than SysManager
    **/
    DigitalInAnalogIn() {};
    9b00:	4c38      	ldr	r4, [pc, #224]	; (9be4 <_GLOBAL__sub_I__ZN9ClearCore11FastSysTickE+0x198>)
    9b02:	4d39      	ldr	r5, [pc, #228]	; (9be8 <_GLOBAL__sub_I__ZN9ClearCore11FastSysTickE+0x19c>)
    9b04:	f8c9 4000 	str.w	r4, [r9]
    9b08:	4640      	mov	r0, r8
    9b0a:	f7fa ff67 	bl	49dc <_ZN9ClearCore9ConnectorC1Ev>
    9b0e:	4638      	mov	r0, r7
    9b10:	f8c8 4000 	str.w	r4, [r8]
    9b14:	f7fa ff62 	bl	49dc <_ZN9ClearCore9ConnectorC1Ev>
    9b18:	4628      	mov	r0, r5
    9b1a:	603c      	str	r4, [r7, #0]
    9b1c:	f7fa ff5e 	bl	49dc <_ZN9ClearCore9ConnectorC1Ev>
MotorDriver ConnectorM0;
    9b20:	4832      	ldr	r0, [pc, #200]	; (9bec <_GLOBAL__sub_I__ZN9ClearCore11FastSysTickE+0x1a0>)
    9b22:	602c      	str	r4, [r5, #0]
    9b24:	f7fd ff1e 	bl	7964 <_ZN9ClearCore11MotorDriverC1Ev>
MotorDriver ConnectorM1;
    9b28:	4831      	ldr	r0, [pc, #196]	; (9bf0 <_GLOBAL__sub_I__ZN9ClearCore11FastSysTickE+0x1a4>)

    It provides a generic interface that all serial objects have. This includes
    - Port Opening/Closing
    - Communication configuration
**/
class ISerial {
    9b2a:	f8df 8100 	ldr.w	r8, [pc, #256]	; 9c2c <_GLOBAL__sub_I__ZN9ClearCore11FastSysTickE+0x1e0>

    /**
        Default constructor so this connector can be a global and constructed
        by SysManager
    **/
    SerialBase() {};
    9b2e:	4d31      	ldr	r5, [pc, #196]	; (9bf4 <_GLOBAL__sub_I__ZN9ClearCore11FastSysTickE+0x1a8>)
    9b30:	4c31      	ldr	r4, [pc, #196]	; (9bf8 <_GLOBAL__sub_I__ZN9ClearCore11FastSysTickE+0x1ac>)
#ifndef HIDE_FROM_DOXYGEN
    /**
        \brief Default constructor so this connector can be a global and
        constructed by SysManager.
    **/
    SerialDriver() {};
    9b32:	4f32      	ldr	r7, [pc, #200]	; (9bfc <_GLOBAL__sub_I__ZN9ClearCore11FastSysTickE+0x1b0>)
    9b34:	f8df 90f8 	ldr.w	r9, [pc, #248]	; 9c30 <_GLOBAL__sub_I__ZN9ClearCore11FastSysTickE+0x1e4>
    9b38:	f7fd ff14 	bl	7964 <_ZN9ClearCore11MotorDriverC1Ev>
MotorDriver ConnectorM2;
    9b3c:	4830      	ldr	r0, [pc, #192]	; (9c00 <_GLOBAL__sub_I__ZN9ClearCore11FastSysTickE+0x1b4>)
    9b3e:	f7fd ff11 	bl	7964 <_ZN9ClearCore11MotorDriverC1Ev>
MotorDriver ConnectorM3;
    9b42:	4830      	ldr	r0, [pc, #192]	; (9c04 <_GLOBAL__sub_I__ZN9ClearCore11FastSysTickE+0x1b8>)
    9b44:	f7fd ff0e 	bl	7964 <_ZN9ClearCore11MotorDriverC1Ev>
    9b48:	4640      	mov	r0, r8
    9b4a:	4b2f      	ldr	r3, [pc, #188]	; (9c08 <_GLOBAL__sub_I__ZN9ClearCore11FastSysTickE+0x1bc>)
    9b4c:	f840 3b04 	str.w	r3, [r0], #4
    SerialUsb() {};
    9b50:	f7fa ff44 	bl	49dc <_ZN9ClearCore9ConnectorC1Ev>
    9b54:	4b2d      	ldr	r3, [pc, #180]	; (9c0c <_GLOBAL__sub_I__ZN9ClearCore11FastSysTickE+0x1c0>)
    9b56:	f8c8 3000 	str.w	r3, [r8]
    9b5a:	f505 70a2 	add.w	r0, r5, #324	; 0x144
    9b5e:	3374      	adds	r3, #116	; 0x74
            reg = 0;
    9b60:	f8c5 6140 	str.w	r6, [r5, #320]	; 0x140
    SerialBase() {};
    9b64:	f8c5 9000 	str.w	r9, [r5]
    9b68:	f8c8 3004 	str.w	r3, [r8, #4]
    9b6c:	f7fa ff36 	bl	49dc <_ZN9ClearCore9ConnectorC1Ev>
    9b70:	f107 0874 	add.w	r8, r7, #116	; 0x74
    9b74:	f504 70a2 	add.w	r0, r4, #324	; 0x144
            reg = 0;
    9b78:	f8c4 6140 	str.w	r6, [r4, #320]	; 0x140
    SerialBase() {};
    9b7c:	f8c4 9000 	str.w	r9, [r4]
    9b80:	602f      	str	r7, [r5, #0]
    9b82:	f8c5 8144 	str.w	r8, [r5, #324]	; 0x144
    9b86:	f7fa ff29 	bl	49dc <_ZN9ClearCore9ConnectorC1Ev>
    9b8a:	f8c4 8144 	str.w	r8, [r4, #324]	; 0x144
    9b8e:	6027      	str	r7, [r4, #0]
SysManager SysMgr;
    9b90:	481f      	ldr	r0, [pc, #124]	; (9c10 <_GLOBAL__sub_I__ZN9ClearCore11FastSysTickE+0x1c4>)
}
    9b92:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
SysManager SysMgr;
    9b96:	f7fd bf07 	b.w	79a8 <_ZN9ClearCore10SysManagerC1Ev>
    9b9a:	bf00      	nop
    9b9c:	20001af0 	.word	0x20001af0
    9ba0:	2000147c 	.word	0x2000147c
    9ba4:	200011e8 	.word	0x200011e8
    9ba8:	20001314 	.word	0x20001314
    9bac:	2000188c 	.word	0x2000188c
    9bb0:	00022cf0 	.word	0x00022cf0
    9bb4:	200019d8 	.word	0x200019d8
    9bb8:	20001748 	.word	0x20001748
    9bbc:	00022d40 	.word	0x00022d40
    9bc0:	00023490 	.word	0x00023490
    9bc4:	00023258 	.word	0x00023258
    9bc8:	000232b8 	.word	0x000232b8
    9bcc:	20001374 	.word	0x20001374
    9bd0:	00023308 	.word	0x00023308
    9bd4:	20001188 	.word	0x20001188
    9bd8:	200011b8 	.word	0x200011b8
    9bdc:	00022b1c 	.word	0x00022b1c
    9be0:	200010d0 	.word	0x200010d0
    9be4:	00023288 	.word	0x00023288
    9be8:	20001114 	.word	0x20001114
    9bec:	20000b68 	.word	0x20000b68
    9bf0:	20000cb0 	.word	0x20000cb0
    9bf4:	20001498 	.word	0x20001498
    9bf8:	200015f0 	.word	0x200015f0
    9bfc:	000233ec 	.word	0x000233ec
    9c00:	20000df8 	.word	0x20000df8
    9c04:	20000f40 	.word	0x20000f40
    9c08:	00022bec 	.word	0x00022bec
    9c0c:	00022c3c 	.word	0x00022c3c
    9c10:	200019d4 	.word	0x200019d4
    9c14:	20001254 	.word	0x20001254
    9c18:	200012b4 	.word	0x200012b4
    9c1c:	200013f8 	.word	0x200013f8
    9c20:	20001158 	.word	0x20001158
    9c24:	20000b24 	.word	0x20000b24
    9c28:	2000108c 	.word	0x2000108c
    9c2c:	20001488 	.word	0x20001488
    9c30:	0002337c 	.word	0x0002337c

00009c34 <_ZN9ClearCore9SysTiming8InstanceEv>:
    m_microAdjLow(0),
    m_microAdjHighRemainder(0),
    m_microAdjLowRemainder(0) {}


SysTiming &SysTiming::Instance() {
    9c34:	b570      	push	{r4, r5, r6, lr}
    static SysTiming *instance = new SysTiming();
    9c36:	4d0f      	ldr	r5, [pc, #60]	; (9c74 <_ZN9ClearCore9SysTiming8InstanceEv+0x40>)
    9c38:	682c      	ldr	r4, [r5, #0]
    9c3a:	f014 0401 	ands.w	r4, r4, #1
    9c3e:	d002      	beq.n	9c46 <_ZN9ClearCore9SysTiming8InstanceEv+0x12>
    9c40:	4b0d      	ldr	r3, [pc, #52]	; (9c78 <_ZN9ClearCore9SysTiming8InstanceEv+0x44>)
    9c42:	6818      	ldr	r0, [r3, #0]
    9c44:	bd70      	pop	{r4, r5, r6, pc}
    9c46:	2030      	movs	r0, #48	; 0x30
    9c48:	f009 fb52 	bl	132f0 <_Znwj>
    9c4c:	4a0a      	ldr	r2, [pc, #40]	; (9c78 <_ZN9ClearCore9SysTiming8InstanceEv+0x44>)
    m_microAdjLowRemainder(0) {}
    9c4e:	6004      	str	r4, [r0, #0]
    9c50:	2105      	movs	r1, #5
    9c52:	f04f 36ff 	mov.w	r6, #4294967295
    static SysTiming *instance = new SysTiming();
    9c56:	2301      	movs	r3, #1
    m_microAdjLowRemainder(0) {}
    9c58:	7501      	strb	r1, [r0, #20]
    9c5a:	6084      	str	r4, [r0, #8]
    9c5c:	60c4      	str	r4, [r0, #12]
    9c5e:	6104      	str	r4, [r0, #16]
    9c60:	6184      	str	r4, [r0, #24]
    9c62:	61c4      	str	r4, [r0, #28]
    9c64:	6204      	str	r4, [r0, #32]
    9c66:	6244      	str	r4, [r0, #36]	; 0x24
    9c68:	6284      	str	r4, [r0, #40]	; 0x28
    9c6a:	62c4      	str	r4, [r0, #44]	; 0x2c
    9c6c:	6046      	str	r6, [r0, #4]
    static SysTiming *instance = new SysTiming();
    9c6e:	6010      	str	r0, [r2, #0]
    9c70:	602b      	str	r3, [r5, #0]
    return *instance;
}
    9c72:	bd70      	pop	{r4, r5, r6, pc}
    9c74:	20001be4 	.word	0x20001be4
    9c78:	20001bf0 	.word	0x20001bf0

00009c7c <_ZN9ClearCore9SysTiming8IsrStartEv>:

void SysTiming::IsrStart() {
    m_isrStartCycle = DWT->CYCCNT;
    9c7c:	4b01      	ldr	r3, [pc, #4]	; (9c84 <_ZN9ClearCore9SysTiming8IsrStartEv+0x8>)
    9c7e:	685b      	ldr	r3, [r3, #4]
    9c80:	6003      	str	r3, [r0, #0]
    9c82:	4770      	bx	lr
    9c84:	e0001000 	.word	0xe0001000

00009c88 <_ZN9ClearCore9SysTiming6IsrEndEv>:
}

void SysTiming::IsrEnd() {
    m_isrLastCycles = DWT->CYCCNT - m_isrStartCycle;
    9c88:	4b06      	ldr	r3, [pc, #24]	; (9ca4 <_ZN9ClearCore9SysTiming6IsrEndEv+0x1c>)
    9c8a:	6801      	ldr	r1, [r0, #0]
    9c8c:	685b      	ldr	r3, [r3, #4]
    if (m_isrMinCycles > m_isrLastCycles) {
    9c8e:	6842      	ldr	r2, [r0, #4]
    m_isrLastCycles = DWT->CYCCNT - m_isrStartCycle;
    9c90:	1a5b      	subs	r3, r3, r1
    if (m_isrMinCycles > m_isrLastCycles) {
    9c92:	4293      	cmp	r3, r2
        m_isrMinCycles = m_isrLastCycles;
    }
    if (m_isrMaxCycles < m_isrLastCycles) {
    9c94:	6882      	ldr	r2, [r0, #8]
        m_isrMinCycles = m_isrLastCycles;
    9c96:	bf38      	it	cc
    9c98:	6043      	strcc	r3, [r0, #4]
    if (m_isrMaxCycles < m_isrLastCycles) {
    9c9a:	4293      	cmp	r3, r2
    m_isrLastCycles = DWT->CYCCNT - m_isrStartCycle;
    9c9c:	60c3      	str	r3, [r0, #12]
        m_isrMaxCycles = m_isrLastCycles;
    9c9e:	bf88      	it	hi
    9ca0:	6083      	strhi	r3, [r0, #8]
    9ca2:	4770      	bx	lr
    9ca4:	e0001000 	.word	0xe0001000

00009ca8 <_ZN9ClearCore9SysTiming6UpdateEv>:
}

void SysTiming::Update() {
    // Detaching a debugger can clear CoreDebug_DEMCR_TRCENA_Msk
    // so make sure it stays set to keep the cycle counter enabled
    CoreDebug->DEMCR |= CoreDebug_DEMCR_TRCENA_Msk;
    9ca8:	4a1c      	ldr	r2, [pc, #112]	; (9d1c <_ZN9ClearCore9SysTiming6UpdateEv+0x74>)
void SysTiming::Update() {
    9caa:	b538      	push	{r3, r4, r5, lr}
    CoreDebug->DEMCR |= CoreDebug_DEMCR_TRCENA_Msk;
    9cac:	68d3      	ldr	r3, [r2, #12]
    9cae:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
    9cb2:	60d3      	str	r3, [r2, #12]

    // Update the millisecond tick counter
    if (!--m_fractMsTick) {
    9cb4:	7d03      	ldrb	r3, [r0, #20]
    9cb6:	3b01      	subs	r3, #1
    9cb8:	b2db      	uxtb	r3, r3
void SysTiming::Update() {
    9cba:	4604      	mov	r4, r0
    if (!--m_fractMsTick) {
    9cbc:	7503      	strb	r3, [r0, #20]
    9cbe:	b923      	cbnz	r3, 9cca <_ZN9ClearCore9SysTiming6UpdateEv+0x22>
        m_msTickCnt++;
    9cc0:	6903      	ldr	r3, [r0, #16]
        m_fractMsTick = MS_TO_SAMPLES;
    9cc2:	2205      	movs	r2, #5
        m_msTickCnt++;
    9cc4:	3301      	adds	r3, #1
    9cc6:	6103      	str	r3, [r0, #16]
        m_fractMsTick = MS_TO_SAMPLES;
    9cc8:	7502      	strb	r2, [r0, #20]
    // the wrap point to effectively extend the number of bits in the
    // cycleCounter and control the wrap point properly.
    // Precalculate adjustment values at UINT32_MAX/4 and UINT32_MAX*3/4
    // by timing when the adjustments are calculated and used, we can safely
    // modify the values when they are not in use (~9 sec margin).
    if (((m_isrStartCycle ^ m_lastIsrStartCnt) & 0xc0000000) == 0x40000000) {
    9cca:	6825      	ldr	r5, [r4, #0]
    9ccc:	69a3      	ldr	r3, [r4, #24]
    9cce:	406b      	eors	r3, r5
    9cd0:	f003 4340 	and.w	r3, r3, #3221225472	; 0xc0000000
    9cd4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
    9cd8:	d001      	beq.n	9cde <_ZN9ClearCore9SysTiming6UpdateEv+0x36>
            m_microAdjHigh = m_microAdjLow + 1;
            m_microAdjHighRemainder =
                CYCLES_PER_MICROSECOND - m_microAdjLowRemainder;
        }
    }
    m_lastIsrStartCnt = m_isrStartCycle;
    9cda:	61a5      	str	r5, [r4, #24]
    9cdc:	bd38      	pop	{r3, r4, r5, pc}
        if (m_isrStartCycle & 0x80000000) {
    9cde:	2d00      	cmp	r5, #0
    9ce0:	db08      	blt.n	9cf4 <_ZN9ClearCore9SysTiming6UpdateEv+0x4c>
            m_microAdjHigh = m_microAdjLow + 1;
    9ce2:	6a62      	ldr	r2, [r4, #36]	; 0x24
                CYCLES_PER_MICROSECOND - m_microAdjLowRemainder;
    9ce4:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
    m_lastIsrStartCnt = m_isrStartCycle;
    9ce6:	61a5      	str	r5, [r4, #24]
            m_microAdjHigh = m_microAdjLow + 1;
    9ce8:	3201      	adds	r2, #1
                CYCLES_PER_MICROSECOND - m_microAdjLowRemainder;
    9cea:	f1c3 0378 	rsb	r3, r3, #120	; 0x78
            m_microAdjHigh = m_microAdjLow + 1;
    9cee:	6222      	str	r2, [r4, #32]
            m_microAdjHighRemainder =
    9cf0:	62a3      	str	r3, [r4, #40]	; 0x28
    m_lastIsrStartCnt = m_isrStartCycle;
    9cf2:	bd38      	pop	{r3, r4, r5, pc}
            uint64_t cycCnt64 = (uint64_t)(++m_microAdj) << 32;
    9cf4:	69e1      	ldr	r1, [r4, #28]
    9cf6:	3101      	adds	r1, #1
    9cf8:	61e1      	str	r1, [r4, #28]
            m_microAdjLow = cycCnt64 / CYCLES_PER_MICROSECOND;
    9cfa:	2278      	movs	r2, #120	; 0x78
    9cfc:	2300      	movs	r3, #0
    9cfe:	2000      	movs	r0, #0
    9d00:	f012 fb54 	bl	1c3ac <__aeabi_uldivmod>
    9d04:	6260      	str	r0, [r4, #36]	; 0x24
            if (m_microAdjLow) {
    9d06:	b128      	cbz	r0, 9d14 <_ZN9ClearCore9SysTiming6UpdateEv+0x6c>
                    cycCnt64 - (m_microAdjLow * CYCLES_PER_MICROSECOND);
    9d08:	ebc0 1000 	rsb	r0, r0, r0, lsl #4
    9d0c:	00c3      	lsls	r3, r0, #3
    9d0e:	425b      	negs	r3, r3
                m_microAdjLowRemainder =
    9d10:	62e3      	str	r3, [r4, #44]	; 0x2c
    9d12:	e7e2      	b.n	9cda <_ZN9ClearCore9SysTiming6UpdateEv+0x32>
                m_microAdj = 0;
    9d14:	61e0      	str	r0, [r4, #28]
                m_microAdjLowRemainder = 0;
    9d16:	62e0      	str	r0, [r4, #44]	; 0x2c
    9d18:	e7df      	b.n	9cda <_ZN9ClearCore9SysTiming6UpdateEv+0x32>
    9d1a:	bf00      	nop
    9d1c:	e000edf0 	.word	0xe000edf0

00009d20 <_ZN9ClearCore9SysTiming21SysTickPeriodMicroSecEm>:

bool SysTiming::SysTickPeriodMicroSec(uint32_t microSeconds) {
    // If the SysTick is faster than the sample rate set a
    // flag to do the "slow update" within the sample interrupt
    FastSysTick = microSeconds < SAMPLE_PERIOD_MICROSECONDS;
    return SysTick_Config(microSeconds * CYCLES_PER_MICROSECOND);
    9d20:	ebc1 1301 	rsb	r3, r1, r1, lsl #4
    9d24:	00db      	lsls	r3, r3, #3
    FastSysTick = microSeconds < SAMPLE_PERIOD_MICROSECONDS;
    9d26:	29c7      	cmp	r1, #199	; 0xc7
    9d28:	4a0d      	ldr	r2, [pc, #52]	; (9d60 <_ZN9ClearCore9SysTiming21SysTickPeriodMicroSecEm+0x40>)
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
    9d2a:	f103 33ff 	add.w	r3, r3, #4294967295
    9d2e:	bf8c      	ite	hi
    9d30:	2100      	movhi	r1, #0
    9d32:	2101      	movls	r1, #1
    9d34:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
    9d38:	7011      	strb	r1, [r2, #0]
    9d3a:	d20e      	bcs.n	9d5a <_ZN9ClearCore9SysTiming21SysTickPeriodMicroSecEm+0x3a>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
    9d3c:	4a09      	ldr	r2, [pc, #36]	; (9d64 <_ZN9ClearCore9SysTiming21SysTickPeriodMicroSecEm+0x44>)
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    9d3e:	480a      	ldr	r0, [pc, #40]	; (9d68 <_ZN9ClearCore9SysTiming21SysTickPeriodMicroSecEm+0x48>)
bool SysTiming::SysTickPeriodMicroSec(uint32_t microSeconds) {
    9d40:	b410      	push	{r4}
    9d42:	24e0      	movs	r4, #224	; 0xe0
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
    9d44:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
    9d46:	2107      	movs	r1, #7
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    9d48:	f880 4023 	strb.w	r4, [r0, #35]	; 0x23
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
    9d4c:	2300      	movs	r3, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
    9d4e:	4618      	mov	r0, r3
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
    9d50:	6093      	str	r3, [r2, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
    9d52:	6011      	str	r1, [r2, #0]
}
    9d54:	f85d 4b04 	ldr.w	r4, [sp], #4
    9d58:	4770      	bx	lr
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
    9d5a:	2001      	movs	r0, #1
    9d5c:	4770      	bx	lr
    9d5e:	bf00      	nop
    9d60:	20001088 	.word	0x20001088
    9d64:	e000e010 	.word	0xe000e010
    9d68:	e000ed00 	.word	0xe000ed00

00009d6c <Milliseconds>:
#ifdef __cplusplus
extern "C" {
#endif

uint32_t Milliseconds(void) {
    return ClearCore::TimingMgr.Milliseconds();
    9d6c:	4b01      	ldr	r3, [pc, #4]	; (9d74 <Milliseconds+0x8>)
    9d6e:	681b      	ldr	r3, [r3, #0]
    9d70:	6918      	ldr	r0, [r3, #16]
}
    9d72:	4770      	bx	lr
    9d74:	20001bec 	.word	0x20001bec

00009d78 <Microseconds>:
    uint32_t cycleCounter = DWT->CYCCNT;
    9d78:	4b0e      	ldr	r3, [pc, #56]	; (9db4 <Microseconds+0x3c>)


uint32_t Microseconds(void) {
    return ClearCore::TimingMgr.Microseconds();
    9d7a:	4a0f      	ldr	r2, [pc, #60]	; (9db8 <Microseconds+0x40>)
    uint32_t cycleCounter = DWT->CYCCNT;
    9d7c:	685b      	ldr	r3, [r3, #4]
    return ClearCore::TimingMgr.Microseconds();
    9d7e:	6812      	ldr	r2, [r2, #0]
    if (cycleCounter > UINT32_MAX / 2) {
    9d80:	2b00      	cmp	r3, #0
uint32_t Microseconds(void) {
    9d82:	b410      	push	{r4}
    if (cycleCounter > UINT32_MAX / 2) {
    9d84:	db0a      	blt.n	9d9c <Microseconds+0x24>
        return ((cycleCounter + m_microAdjLowRemainder) /
    9d86:	6ad4      	ldr	r4, [r2, #44]	; 0x2c
    9d88:	490c      	ldr	r1, [pc, #48]	; (9dbc <Microseconds+0x44>)
                CYCLES_PER_MICROSECOND) + m_microAdjLow;
    9d8a:	6a50      	ldr	r0, [r2, #36]	; 0x24
        return ((cycleCounter + m_microAdjLowRemainder) /
    9d8c:	4423      	add	r3, r4
    9d8e:	fba1 2303 	umull	r2, r3, r1, r3
                CYCLES_PER_MICROSECOND) + m_microAdjLow;
    9d92:	eb00 1093 	add.w	r0, r0, r3, lsr #6
}
    9d96:	f85d 4b04 	ldr.w	r4, [sp], #4
    9d9a:	4770      	bx	lr
        return ((cycleCounter - m_microAdjHighRemainder) /
    9d9c:	6a94      	ldr	r4, [r2, #40]	; 0x28
    9d9e:	4907      	ldr	r1, [pc, #28]	; (9dbc <Microseconds+0x44>)
                CYCLES_PER_MICROSECOND) + m_microAdjHigh;
    9da0:	6a10      	ldr	r0, [r2, #32]
        return ((cycleCounter - m_microAdjHighRemainder) /
    9da2:	1b1b      	subs	r3, r3, r4
    9da4:	fba1 2303 	umull	r2, r3, r1, r3
                CYCLES_PER_MICROSECOND) + m_microAdjHigh;
    9da8:	eb00 1093 	add.w	r0, r0, r3, lsr #6
}
    9dac:	f85d 4b04 	ldr.w	r4, [sp], #4
    9db0:	4770      	bx	lr
    9db2:	bf00      	nop
    9db4:	e0001000 	.word	0xe0001000
    9db8:	20001bec 	.word	0x20001bec
    9dbc:	88888889 	.word	0x88888889

00009dc0 <Delay_cycles>:

void Delay_cycles(uint64_t cycles) {
    9dc0:	b470      	push	{r4, r5, r6}
    // Get a snapshot of the cycle counter as we enter the delay function
    uint32_t cyclesLast = DWT->CYCCNT;
    9dc2:	4e0d      	ldr	r6, [pc, #52]	; (9df8 <Delay_cycles+0x38>)

    // If we do not need to delay, bail out
    if (cycles == 0) {
    9dc4:	ea50 0301 	orrs.w	r3, r0, r1
    uint32_t cyclesLast = DWT->CYCCNT;
    9dc8:	6874      	ldr	r4, [r6, #4]
    if (cycles == 0) {
    9dca:	d013      	beq.n	9df4 <Delay_cycles+0x34>
        return;
    }

    uint64_t cyclesRemaining = cycles;
    uint32_t cyclesNow = DWT->CYCCNT;
    9dcc:	6873      	ldr	r3, [r6, #4]

    while (cyclesRemaining > cyclesNow - cyclesLast) {
    9dce:	2500      	movs	r5, #0
    9dd0:	1b1c      	subs	r4, r3, r4
    9dd2:	428d      	cmp	r5, r1
    9dd4:	bf08      	it	eq
    9dd6:	4284      	cmpeq	r4, r0
    9dd8:	d20c      	bcs.n	9df4 <Delay_cycles+0x34>
        cyclesRemaining -= (cyclesNow - cyclesLast);
        cyclesLast = cyclesNow;
        cyclesNow = DWT->CYCCNT;
    9dda:	6872      	ldr	r2, [r6, #4]
        cyclesRemaining -= (cyclesNow - cyclesLast);
    9ddc:	1b00      	subs	r0, r0, r4
    while (cyclesRemaining > cyclesNow - cyclesLast) {
    9dde:	eba2 0303 	sub.w	r3, r2, r3
        cyclesRemaining -= (cyclesNow - cyclesLast);
    9de2:	eb61 0105 	sbc.w	r1, r1, r5
    while (cyclesRemaining > cyclesNow - cyclesLast) {
    9de6:	2500      	movs	r5, #0
    9de8:	461c      	mov	r4, r3
    9dea:	428d      	cmp	r5, r1
    9dec:	bf08      	it	eq
    9dee:	4284      	cmpeq	r4, r0
        cyclesNow = DWT->CYCCNT;
    9df0:	4613      	mov	r3, r2
    while (cyclesRemaining > cyclesNow - cyclesLast) {
    9df2:	d3f2      	bcc.n	9dda <Delay_cycles+0x1a>
    }
}
    9df4:	bc70      	pop	{r4, r5, r6}
    9df6:	4770      	bx	lr
    9df8:	e0001000 	.word	0xe0001000

00009dfc <_GLOBAL__sub_I__ZN9ClearCore7tickCntE>:

#ifdef __cplusplus
}
    9dfc:	b508      	push	{r3, lr}
SysTiming &TimingMgr = SysTiming::Instance();
    9dfe:	f7ff ff19 	bl	9c34 <_ZN9ClearCore9SysTiming8InstanceEv>
    9e02:	4b01      	ldr	r3, [pc, #4]	; (9e08 <_GLOBAL__sub_I__ZN9ClearCore7tickCntE+0xc>)
    9e04:	6018      	str	r0, [r3, #0]
    9e06:	bd08      	pop	{r3, pc}
    9e08:	20001bec 	.word	0x20001bec

00009e0c <_ZN9ClearCore15EthernetManager8InstanceEv>:

extern NvmManager &NvmMgr;

EthernetManager &EthernetMgr = EthernetManager::Instance();

EthernetManager &EthernetManager::Instance() {
    9e0c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    static EthernetManager *instance = new EthernetManager();
    9e0e:	4e37      	ldr	r6, [pc, #220]	; (9eec <_ZN9ClearCore15EthernetManager8InstanceEv+0xe0>)
    9e10:	6835      	ldr	r5, [r6, #0]
    9e12:	f015 0501 	ands.w	r5, r5, #1
    9e16:	d002      	beq.n	9e1e <_ZN9ClearCore15EthernetManager8InstanceEv+0x12>
    9e18:	4b35      	ldr	r3, [pc, #212]	; (9ef0 <_ZN9ClearCore15EthernetManager8InstanceEv+0xe4>)
    9e1a:	6818      	ldr	r0, [r3, #0]
    9e1c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    9e1e:	f641 10c4 	movw	r0, #6596	; 0x19c4
    9e22:	f009 fa65 	bl	132f0 <_Znwj>
    9e26:	4604      	mov	r4, r0
      m_portPhyInt(PHY_INT.gpioPort), m_pinPhyInt(PHY_INT.gpioPin),
      m_phyExtInt(PHY_INT.extInt), m_phyLinkUp(false), m_phyRemoteFault(false),
      m_phyInitFailed(false), m_recv(false), m_dhcp(false), m_ethernetActive(false),
      m_rxBuffIndex(0), m_txBuffIndex(0), m_rxBuffer{0}, m_txBuffer{0},
      m_retransmissionTimeout(200), m_retransmissionCount(8),
      m_ethernetInterface({}), m_macInterface({}), m_dhcpData(nullptr) { }
    9e28:	2711      	movs	r7, #17
    9e2a:	2312      	movs	r3, #18
    9e2c:	6067      	str	r7, [r4, #4]
    9e2e:	60e3      	str	r3, [r4, #12]
    9e30:	2213      	movs	r2, #19
    9e32:	210d      	movs	r1, #13
    9e34:	2714      	movs	r7, #20
    9e36:	230b      	movs	r3, #11
    9e38:	6162      	str	r2, [r4, #20]
    9e3a:	61e1      	str	r1, [r4, #28]
    9e3c:	6367      	str	r7, [r4, #52]	; 0x34
    9e3e:	6463      	str	r3, [r4, #68]	; 0x44
    9e40:	270c      	movs	r7, #12
    9e42:	2302      	movs	r3, #2
    9e44:	200f      	movs	r0, #15
    9e46:	220e      	movs	r2, #14
    9e48:	211c      	movs	r1, #28
    9e4a:	6323      	str	r3, [r4, #48]	; 0x30
    9e4c:	63a3      	str	r3, [r4, #56]	; 0x38
    9e4e:	6423      	str	r3, [r4, #64]	; 0x40
    9e50:	6523      	str	r3, [r4, #80]	; 0x50
    9e52:	62e0      	str	r0, [r4, #44]	; 0x2c
    9e54:	64e2      	str	r2, [r4, #76]	; 0x4c
    9e56:	6561      	str	r1, [r4, #84]	; 0x54
    9e58:	6267      	str	r7, [r4, #36]	; 0x24
    9e5a:	4629      	mov	r1, r5
    9e5c:	63e7      	str	r7, [r4, #60]	; 0x3c
    9e5e:	65a7      	str	r7, [r4, #88]	; 0x58
    9e60:	6025      	str	r5, [r4, #0]
    9e62:	60a5      	str	r5, [r4, #8]
    9e64:	6125      	str	r5, [r4, #16]
    9e66:	61a5      	str	r5, [r4, #24]
    9e68:	6225      	str	r5, [r4, #32]
    9e6a:	62a5      	str	r5, [r4, #40]	; 0x28
    9e6c:	64a5      	str	r5, [r4, #72]	; 0x48
    9e6e:	f884 505c 	strb.w	r5, [r4, #92]	; 0x5c
    9e72:	f884 505d 	strb.w	r5, [r4, #93]	; 0x5d
    9e76:	f884 505e 	strb.w	r5, [r4, #94]	; 0x5e
    9e7a:	f884 505f 	strb.w	r5, [r4, #95]	; 0x5f
    9e7e:	f884 5060 	strb.w	r5, [r4, #96]	; 0x60
    9e82:	f884 5061 	strb.w	r5, [r4, #97]	; 0x61
    9e86:	f884 5062 	strb.w	r5, [r4, #98]	; 0x62
    9e8a:	f8a4 5064 	strh.w	r5, [r4, #100]	; 0x64
    9e8e:	f504 7094 	add.w	r0, r4, #296	; 0x128
    9e92:	f44f 6200 	mov.w	r2, #2048	; 0x800
    9e96:	f014 fab1 	bl	1e3fc <memset>
    9e9a:	4629      	mov	r1, r5
    9e9c:	f604 1028 	addw	r0, r4, #2344	; 0x928
    9ea0:	f44f 5282 	mov.w	r2, #4160	; 0x1040
    9ea4:	f014 faaa 	bl	1e3fc <memset>
    9ea8:	f641 176c 	movw	r7, #6508	; 0x196c
    9eac:	f641 1168 	movw	r1, #6504	; 0x1968
    9eb0:	19e3      	adds	r3, r4, r7
    9eb2:	f641 126a 	movw	r2, #6506	; 0x196a
    9eb6:	20c8      	movs	r0, #200	; 0xc8
    9eb8:	5260      	strh	r0, [r4, r1]
    9eba:	f504 50cc 	add.w	r0, r4, #6528	; 0x1980
    9ebe:	2108      	movs	r1, #8
    9ec0:	54a1      	strb	r1, [r4, r2]
    9ec2:	3004      	adds	r0, #4
    9ec4:	51e5      	str	r5, [r4, r7]
    9ec6:	4629      	mov	r1, r5
    9ec8:	605d      	str	r5, [r3, #4]
    9eca:	609d      	str	r5, [r3, #8]
    9ecc:	60dd      	str	r5, [r3, #12]
    9ece:	611d      	str	r5, [r3, #16]
    9ed0:	615d      	str	r5, [r3, #20]
    9ed2:	223c      	movs	r2, #60	; 0x3c
    9ed4:	f014 fa92 	bl	1e3fc <memset>
    static EthernetManager *instance = new EthernetManager();
    9ed8:	4905      	ldr	r1, [pc, #20]	; (9ef0 <_ZN9ClearCore15EthernetManager8InstanceEv+0xe4>)
      m_ethernetInterface({}), m_macInterface({}), m_dhcpData(nullptr) { }
    9eda:	f504 52ce 	add.w	r2, r4, #6592	; 0x19c0
    static EthernetManager *instance = new EthernetManager();
    9ede:	2301      	movs	r3, #1
    9ee0:	600c      	str	r4, [r1, #0]
      m_ethernetInterface({}), m_macInterface({}), m_dhcpData(nullptr) { }
    9ee2:	6015      	str	r5, [r2, #0]
    9ee4:	4620      	mov	r0, r4
    static EthernetManager *instance = new EthernetManager();
    9ee6:	6033      	str	r3, [r6, #0]
}
    9ee8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    9eea:	bf00      	nop
    9eec:	20001bf4 	.word	0x20001bf4
    9ef0:	20001bfc 	.word	0x20001bfc

00009ef4 <_ZN9ClearCore15EthernetManager13PhyInitializeEv>:
    NvmMgr.MacAddress(m_ethernetInterface.mac);
}

void EthernetManager::PhyInitialize() {
    // Reset PHY status values.
    m_phyLinkUp = false;
    9ef4:	2200      	movs	r2, #0

uint32_t EthernetManager::PhyShift(uint32_t phyOp, uint32_t phyReg,
                                   uint32_t contents) {
    // Enable the GMAC management port and initiate a shift operation to the
    // PHY. The PHY's status register is returned into the GMAC's MAN register.
    GMAC->NCR.bit.MPE = 1;
    9ef6:	4b3e      	ldr	r3, [pc, #248]	; (9ff0 <_ZN9ClearCore15EthernetManager13PhyInitializeEv+0xfc>)
    m_phyLinkUp = false;
    9ef8:	f880 205c 	strb.w	r2, [r0, #92]	; 0x5c
    m_phyInitFailed = false;
    9efc:	f880 205e 	strb.w	r2, [r0, #94]	; 0x5e
    m_phyRemoteFault = false;
    9f00:	f880 205d 	strb.w	r2, [r0, #93]	; 0x5d
    GMAC->NCR.bit.MPE = 1;
    9f04:	681a      	ldr	r2, [r3, #0]
    GMAC->MAN.reg = GMAC_MAN_CLTTO |   // Clause 22 or 45 operation (1 is 22)
    9f06:	493b      	ldr	r1, [pc, #236]	; (9ff4 <_ZN9ClearCore15EthernetManager13PhyInitializeEv+0x100>)
    GMAC->NCR.bit.MPE = 1;
    9f08:	f042 0210 	orr.w	r2, r2, #16
    9f0c:	601a      	str	r2, [r3, #0]
                    GMAC_MAN_PHYA(0) |          // PHY address (default is 0)
                    GMAC_MAN_REGA(phyReg) |     // Register in the PHY to access
                    GMAC_MAN_WTN(0x2) |         // Must be written to '1' '0'
                    GMAC_MAN_DATA(contents);

    while (!((GMAC->NSR.reg & GMAC_NSR_IDLE) >> GMAC_NSR_IDLE_Pos)) {
    9f0e:	461a      	mov	r2, r3
    GMAC->MAN.reg = GMAC_MAN_CLTTO |   // Clause 22 or 45 operation (1 is 22)
    9f10:	6359      	str	r1, [r3, #52]	; 0x34
    while (!((GMAC->NSR.reg & GMAC_NSR_IDLE) >> GMAC_NSR_IDLE_Pos)) {
    9f12:	6893      	ldr	r3, [r2, #8]
    9f14:	0759      	lsls	r1, r3, #29
    9f16:	d5fc      	bpl.n	9f12 <_ZN9ClearCore15EthernetManager13PhyInitializeEv+0x1e>
        // Wait for the PHY write to finish
        continue;
    }
    GMAC->NCR.bit.MPE = 0;
    9f18:	6813      	ldr	r3, [r2, #0]
    9f1a:	f36f 1304 	bfc	r3, #4, #1
    9f1e:	6013      	str	r3, [r2, #0]

    return GMAC_MAN_DATA(GMAC->MAN.reg);
    9f20:	6b53      	ldr	r3, [r2, #52]	; 0x34
    9f22:	f64f 71ff 	movw	r1, #65535	; 0xffff
    9f26:	b29b      	uxth	r3, r3
    if (PhyRead(PHY_B_CTRL) == 0xFFFF) {
    9f28:	428b      	cmp	r3, r1
    9f2a:	d05d      	beq.n	9fe8 <_ZN9ClearCore15EthernetManager13PhyInitializeEv+0xf4>
void EthernetManager::PhyInitialize() {
    9f2c:	b410      	push	{r4}
    GMAC->NCR.bit.MPE = 1;
    9f2e:	6813      	ldr	r3, [r2, #0]
    GMAC->MAN.reg = GMAC_MAN_CLTTO |   // Clause 22 or 45 operation (1 is 22)
    9f30:	4c31      	ldr	r4, [pc, #196]	; (9ff8 <_ZN9ClearCore15EthernetManager13PhyInitializeEv+0x104>)
    while (!((GMAC->NSR.reg & GMAC_NSR_IDLE) >> GMAC_NSR_IDLE_Pos)) {
    9f32:	492f      	ldr	r1, [pc, #188]	; (9ff0 <_ZN9ClearCore15EthernetManager13PhyInitializeEv+0xfc>)
    GMAC->NCR.bit.MPE = 1;
    9f34:	f043 0310 	orr.w	r3, r3, #16
    9f38:	6013      	str	r3, [r2, #0]
    GMAC->MAN.reg = GMAC_MAN_CLTTO |   // Clause 22 or 45 operation (1 is 22)
    9f3a:	6354      	str	r4, [r2, #52]	; 0x34
    while (!((GMAC->NSR.reg & GMAC_NSR_IDLE) >> GMAC_NSR_IDLE_Pos)) {
    9f3c:	688b      	ldr	r3, [r1, #8]
    9f3e:	075a      	lsls	r2, r3, #29
    9f40:	d5fc      	bpl.n	9f3c <_ZN9ClearCore15EthernetManager13PhyInitializeEv+0x48>
    GMAC->NCR.bit.MPE = 0;
    9f42:	680b      	ldr	r3, [r1, #0]
    GMAC->MAN.reg = GMAC_MAN_CLTTO |   // Clause 22 or 45 operation (1 is 22)
    9f44:	4c2b      	ldr	r4, [pc, #172]	; (9ff4 <_ZN9ClearCore15EthernetManager13PhyInitializeEv+0x100>)
    while (!((GMAC->NSR.reg & GMAC_NSR_IDLE) >> GMAC_NSR_IDLE_Pos)) {
    9f46:	4a2a      	ldr	r2, [pc, #168]	; (9ff0 <_ZN9ClearCore15EthernetManager13PhyInitializeEv+0xfc>)
    GMAC->NCR.bit.MPE = 0;
    9f48:	f36f 1304 	bfc	r3, #4, #1
    9f4c:	600b      	str	r3, [r1, #0]
    return GMAC_MAN_DATA(GMAC->MAN.reg);
    9f4e:	6b4b      	ldr	r3, [r1, #52]	; 0x34
    GMAC->NCR.bit.MPE = 1;
    9f50:	680b      	ldr	r3, [r1, #0]
    9f52:	f043 0310 	orr.w	r3, r3, #16
    9f56:	600b      	str	r3, [r1, #0]
    GMAC->MAN.reg = GMAC_MAN_CLTTO |   // Clause 22 or 45 operation (1 is 22)
    9f58:	634c      	str	r4, [r1, #52]	; 0x34
    while (!((GMAC->NSR.reg & GMAC_NSR_IDLE) >> GMAC_NSR_IDLE_Pos)) {
    9f5a:	6893      	ldr	r3, [r2, #8]
    9f5c:	075b      	lsls	r3, r3, #29
    9f5e:	d5fc      	bpl.n	9f5a <_ZN9ClearCore15EthernetManager13PhyInitializeEv+0x66>
    GMAC->NCR.bit.MPE = 0;
    9f60:	6813      	ldr	r3, [r2, #0]
    GMAC->MAN.reg = GMAC_MAN_CLTTO |   // Clause 22 or 45 operation (1 is 22)
    9f62:	4c26      	ldr	r4, [pc, #152]	; (9ffc <_ZN9ClearCore15EthernetManager13PhyInitializeEv+0x108>)
    while (!((GMAC->NSR.reg & GMAC_NSR_IDLE) >> GMAC_NSR_IDLE_Pos)) {
    9f64:	4922      	ldr	r1, [pc, #136]	; (9ff0 <_ZN9ClearCore15EthernetManager13PhyInitializeEv+0xfc>)
    GMAC->NCR.bit.MPE = 0;
    9f66:	f36f 1304 	bfc	r3, #4, #1
    9f6a:	6013      	str	r3, [r2, #0]
    return GMAC_MAN_DATA(GMAC->MAN.reg);
    9f6c:	6b53      	ldr	r3, [r2, #52]	; 0x34
    GMAC->NCR.bit.MPE = 1;
    9f6e:	6813      	ldr	r3, [r2, #0]
    9f70:	f043 0310 	orr.w	r3, r3, #16
    9f74:	6013      	str	r3, [r2, #0]
    GMAC->MAN.reg = GMAC_MAN_CLTTO |   // Clause 22 or 45 operation (1 is 22)
    9f76:	6354      	str	r4, [r2, #52]	; 0x34
    while (!((GMAC->NSR.reg & GMAC_NSR_IDLE) >> GMAC_NSR_IDLE_Pos)) {
    9f78:	688b      	ldr	r3, [r1, #8]
    9f7a:	075c      	lsls	r4, r3, #29
    9f7c:	d5fc      	bpl.n	9f78 <_ZN9ClearCore15EthernetManager13PhyInitializeEv+0x84>
    GMAC->NCR.bit.MPE = 0;
    9f7e:	680b      	ldr	r3, [r1, #0]
    9f80:	f36f 1304 	bfc	r3, #4, #1
    9f84:	600b      	str	r3, [r1, #0]
    return GMAC_MAN_DATA(GMAC->MAN.reg);
    9f86:	6b4b      	ldr	r3, [r1, #52]	; 0x34
    9f88:	b29b      	uxth	r3, r3
    if (PhyRead(PHY_ICS) != 0) {
    9f8a:	b12b      	cbz	r3, 9f98 <_ZN9ClearCore15EthernetManager13PhyInitializeEv+0xa4>
        m_phyInitFailed = true;
    9f8c:	2301      	movs	r3, #1
    9f8e:	f880 305e 	strb.w	r3, [r0, #94]	; 0x5e
}
    9f92:	f85d 4b04 	ldr.w	r4, [sp], #4
    9f96:	4770      	bx	lr
    GMAC->NCR.bit.MPE = 1;
    9f98:	680b      	ldr	r3, [r1, #0]
    GMAC->MAN.reg = GMAC_MAN_CLTTO |   // Clause 22 or 45 operation (1 is 22)
    9f9a:	4c19      	ldr	r4, [pc, #100]	; (a000 <_ZN9ClearCore15EthernetManager13PhyInitializeEv+0x10c>)
    while (!((GMAC->NSR.reg & GMAC_NSR_IDLE) >> GMAC_NSR_IDLE_Pos)) {
    9f9c:	4a14      	ldr	r2, [pc, #80]	; (9ff0 <_ZN9ClearCore15EthernetManager13PhyInitializeEv+0xfc>)
    GMAC->NCR.bit.MPE = 1;
    9f9e:	f043 0310 	orr.w	r3, r3, #16
    9fa2:	600b      	str	r3, [r1, #0]
    GMAC->MAN.reg = GMAC_MAN_CLTTO |   // Clause 22 or 45 operation (1 is 22)
    9fa4:	634c      	str	r4, [r1, #52]	; 0x34
    while (!((GMAC->NSR.reg & GMAC_NSR_IDLE) >> GMAC_NSR_IDLE_Pos)) {
    9fa6:	6893      	ldr	r3, [r2, #8]
    9fa8:	0759      	lsls	r1, r3, #29
    9faa:	d5fc      	bpl.n	9fa6 <_ZN9ClearCore15EthernetManager13PhyInitializeEv+0xb2>
    GMAC->NCR.bit.MPE = 0;
    9fac:	6813      	ldr	r3, [r2, #0]
    GMAC->MAN.reg = GMAC_MAN_CLTTO |   // Clause 22 or 45 operation (1 is 22)
    9fae:	4c13      	ldr	r4, [pc, #76]	; (9ffc <_ZN9ClearCore15EthernetManager13PhyInitializeEv+0x108>)
    while (!((GMAC->NSR.reg & GMAC_NSR_IDLE) >> GMAC_NSR_IDLE_Pos)) {
    9fb0:	490f      	ldr	r1, [pc, #60]	; (9ff0 <_ZN9ClearCore15EthernetManager13PhyInitializeEv+0xfc>)
    GMAC->NCR.bit.MPE = 0;
    9fb2:	f36f 1304 	bfc	r3, #4, #1
    9fb6:	6013      	str	r3, [r2, #0]
    return GMAC_MAN_DATA(GMAC->MAN.reg);
    9fb8:	6b53      	ldr	r3, [r2, #52]	; 0x34
    GMAC->NCR.bit.MPE = 1;
    9fba:	6813      	ldr	r3, [r2, #0]
    9fbc:	f043 0310 	orr.w	r3, r3, #16
    9fc0:	6013      	str	r3, [r2, #0]
    GMAC->MAN.reg = GMAC_MAN_CLTTO |   // Clause 22 or 45 operation (1 is 22)
    9fc2:	6354      	str	r4, [r2, #52]	; 0x34
    while (!((GMAC->NSR.reg & GMAC_NSR_IDLE) >> GMAC_NSR_IDLE_Pos)) {
    9fc4:	688b      	ldr	r3, [r1, #8]
    9fc6:	075b      	lsls	r3, r3, #29
    9fc8:	d5fc      	bpl.n	9fc4 <_ZN9ClearCore15EthernetManager13PhyInitializeEv+0xd0>
    GMAC->NCR.bit.MPE = 0;
    9fca:	680b      	ldr	r3, [r1, #0]
    9fcc:	f36f 1304 	bfc	r3, #4, #1
    9fd0:	600b      	str	r3, [r1, #0]
    return GMAC_MAN_DATA(GMAC->MAN.reg);
    9fd2:	6b4b      	ldr	r3, [r1, #52]	; 0x34
    if ((phyIntMask >> 8) != (phyIntValue >> 8)) {
    9fd4:	f3c3 2307 	ubfx	r3, r3, #8, #8
    9fd8:	2b07      	cmp	r3, #7
    9fda:	d1d7      	bne.n	9f8c <_ZN9ClearCore15EthernetManager13PhyInitializeEv+0x98>
    m_phyInitFailed = false;
    9fdc:	2300      	movs	r3, #0
    9fde:	f880 305e 	strb.w	r3, [r0, #94]	; 0x5e
}
    9fe2:	f85d 4b04 	ldr.w	r4, [sp], #4
    9fe6:	4770      	bx	lr
        m_phyInitFailed = true;
    9fe8:	2301      	movs	r3, #1
    9fea:	f880 305e 	strb.w	r3, [r0, #94]	; 0x5e
    9fee:	4770      	bx	lr
    9ff0:	42000800 	.word	0x42000800
    9ff4:	60020000 	.word	0x60020000
    9ff8:	50028000 	.word	0x50028000
    9ffc:	606e0000 	.word	0x606e0000
    a000:	506e0700 	.word	0x506e0700

0000a004 <_ZN9ClearCore15EthernetManager10InitializeEv>:
void EthernetManager::Initialize() {
    a004:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}

/**
    Enable transmit and receive of frames.
**/
void EthernetManager::Enable(bool enable) {
    bool enabled = (GMAC->NCR.bit.TXEN && GMAC->NCR.bit.RXEN);
    a008:	4be2      	ldr	r3, [pc, #904]	; (a394 <_ZN9ClearCore15EthernetManager10InitializeEv+0x390>)
    a00a:	681a      	ldr	r2, [r3, #0]
    a00c:	0715      	lsls	r5, r2, #28
void EthernetManager::Initialize() {
    a00e:	4604      	mov	r4, r0
    bool enabled = (GMAC->NCR.bit.TXEN && GMAC->NCR.bit.RXEN);
    a010:	d503      	bpl.n	a01a <_ZN9ClearCore15EthernetManager10InitializeEv+0x16>
    a012:	681a      	ldr	r2, [r3, #0]
    a014:	0750      	lsls	r0, r2, #29
    a016:	f100 82a2 	bmi.w	a55e <_ZN9ClearCore15EthernetManager10InitializeEv+0x55a>
    GMAC->NCR.bit.MPE = 1;          // Management port enabled
    a01a:	4ade      	ldr	r2, [pc, #888]	; (a394 <_ZN9ClearCore15EthernetManager10InitializeEv+0x390>)
  NVIC->ICER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
    a01c:	48de      	ldr	r0, [pc, #888]	; (a398 <_ZN9ClearCore15EthernetManager10InitializeEv+0x394>)
    a01e:	6813      	ldr	r3, [r2, #0]
    a020:	f043 0310 	orr.w	r3, r3, #16
    a024:	6013      	str	r3, [r2, #0]
    GMAC->NCFGR.bit.SPD = 1;        // 100 Mbps
    a026:	6853      	ldr	r3, [r2, #4]
    a028:	f043 0301 	orr.w	r3, r3, #1
    a02c:	6053      	str	r3, [r2, #4]
    GMAC->NCFGR.bit.FD = 1;         // Full duplex mode
    a02e:	6853      	ldr	r3, [r2, #4]
    a030:	f043 0302 	orr.w	r3, r3, #2
    a034:	6053      	str	r3, [r2, #4]
    GMAC->NCFGR.bit.MAXFS = 1;      // Increase max frame size
    a036:	6853      	ldr	r3, [r2, #4]
    a038:	f443 7380 	orr.w	r3, r3, #256	; 0x100
    a03c:	6053      	str	r3, [r2, #4]
    GMAC->NCFGR.bit.CLK = 0x04;     // MCK divided by 64
    a03e:	6853      	ldr	r3, [r2, #4]
    a040:	2104      	movs	r1, #4
    a042:	f361 4394 	bfi	r3, r1, #18, #3
    a046:	6053      	str	r3, [r2, #4]
    GMAC->UR.bit.MII = 0;           // RMII mode
    a048:	68d3      	ldr	r3, [r2, #12]
    a04a:	f36f 0300 	bfc	r3, #0, #1
    a04e:	60d3      	str	r3, [r2, #12]
    GMAC->DCFGR.bit.FBLDO = 0x04;   // Use INCR4 AHB bursts
    a050:	6913      	ldr	r3, [r2, #16]
    a052:	f361 0304 	bfi	r3, r1, #0, #5
    a056:	6113      	str	r3, [r2, #16]
    GMAC->DCFGR.bit.RXBMS = 0x03;   // 4 Kbytes receiver packet buffer mem size
    a058:	6913      	ldr	r3, [r2, #16]
    a05a:	f443 7340 	orr.w	r3, r3, #768	; 0x300
    a05e:	6113      	str	r3, [r2, #16]
    GMAC->DCFGR.bit.TXPBMS = 0x01;  // 4 Kb transmitter packet buffer mem size
    a060:	6913      	ldr	r3, [r2, #16]
    a062:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
    a066:	6113      	str	r3, [r2, #16]
    GMAC->DCFGR.bit.DRBS = 0x02;    // 128 bytes receiver buffer in AHB
    a068:	6915      	ldr	r5, [r2, #16]
    a06a:	2302      	movs	r3, #2
    a06c:	f363 4517 	bfi	r5, r3, #16, #8
    GMAC->IPGS.reg = GMAC_IPGS_FL((0x1 << 8) | 0x1);
    a070:	f240 1c01 	movw	ip, #257	; 0x101
    GMAC->WOL.reg = 0;
    a074:	2300      	movs	r3, #0
    GMAC->DCFGR.bit.DRBS = 0x02;    // 128 bytes receiver buffer in AHB
    a076:	6115      	str	r5, [r2, #16]
    GMAC->WOL.reg = 0;
    a078:	f8c2 30b8 	str.w	r3, [r2, #184]	; 0xb8
    GMAC->IPGS.reg = GMAC_IPGS_FL((0x1 << 8) | 0x1);
    a07c:	f8c2 c0bc 	str.w	ip, [r2, #188]	; 0xbc
        m_rxDesc[buff].reg[0] = (uint32_t) &m_rxBuffer[buff][0];
    a080:	f504 7c94 	add.w	ip, r4, #296	; 0x128
    a084:	f8c4 c068 	str.w	ip, [r4, #104]	; 0x68
    a088:	f504 7cd4 	add.w	ip, r4, #424	; 0x1a8
    a08c:	f8c4 c070 	str.w	ip, [r4, #112]	; 0x70
    a090:	f504 7c0a 	add.w	ip, r4, #552	; 0x228
    a094:	f604 01a8 	addw	r1, r4, #2216	; 0x8a8
    a098:	f8c4 c078 	str.w	ip, [r4, #120]	; 0x78
    a09c:	f504 7c2a 	add.w	ip, r4, #680	; 0x2a8
    m_rxDesc[RX_BUFF_CNT - 1].bit.WRAP = 1;
    a0a0:	fa5f fe81 	uxtb.w	lr, r1
        m_rxDesc[buff].reg[0] = (uint32_t) &m_rxBuffer[buff][0];
    a0a4:	f8c4 c080 	str.w	ip, [r4, #128]	; 0x80
    a0a8:	f504 7c4a 	add.w	ip, r4, #808	; 0x328
    m_rxDesc[RX_BUFF_CNT - 1].bit.WRAP = 1;
    a0ac:	f04e 0e02 	orr.w	lr, lr, #2
        m_rxDesc[buff].reg[0] = (uint32_t) &m_rxBuffer[buff][0];
    a0b0:	f8c4 c088 	str.w	ip, [r4, #136]	; 0x88
    a0b4:	f504 7c6a 	add.w	ip, r4, #936	; 0x3a8
        m_rxDesc[buff].reg[1] = 0;
    a0b8:	66e3      	str	r3, [r4, #108]	; 0x6c
    a0ba:	6763      	str	r3, [r4, #116]	; 0x74
    a0bc:	67e3      	str	r3, [r4, #124]	; 0x7c
    a0be:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
    a0c2:	f8c4 308c 	str.w	r3, [r4, #140]	; 0x8c
        m_rxDesc[buff].reg[0] = (uint32_t) &m_rxBuffer[buff][0];
    a0c6:	f8c4 c090 	str.w	ip, [r4, #144]	; 0x90
    a0ca:	f8c4 10e0 	str.w	r1, [r4, #224]	; 0xe0
    m_rxDesc[RX_BUFF_CNT - 1].bit.WRAP = 1;
    a0ce:	f884 e0e0 	strb.w	lr, [r4, #224]	; 0xe0
        m_rxDesc[buff].reg[0] = (uint32_t) &m_rxBuffer[buff][0];
    a0d2:	f504 6195 	add.w	r1, r4, #1192	; 0x4a8
    a0d6:	f504 6ea5 	add.w	lr, r4, #1320	; 0x528
    a0da:	f8c4 10a0 	str.w	r1, [r4, #160]	; 0xa0
    a0de:	f8c4 e0a8 	str.w	lr, [r4, #168]	; 0xa8
    a0e2:	f504 61b5 	add.w	r1, r4, #1448	; 0x5a8
    a0e6:	f504 6ec5 	add.w	lr, r4, #1576	; 0x628
    a0ea:	f8c4 10b0 	str.w	r1, [r4, #176]	; 0xb0
    a0ee:	f8c4 e0b8 	str.w	lr, [r4, #184]	; 0xb8
    a0f2:	f504 61d5 	add.w	r1, r4, #1704	; 0x6a8
    a0f6:	f504 6ee5 	add.w	lr, r4, #1832	; 0x728
    a0fa:	f8c4 10c0 	str.w	r1, [r4, #192]	; 0xc0
    a0fe:	f8c4 e0c8 	str.w	lr, [r4, #200]	; 0xc8
    a102:	f504 61f5 	add.w	r1, r4, #1960	; 0x7a8
    a106:	f604 0e28 	addw	lr, r4, #2088	; 0x828
    a10a:	f8c4 10d0 	str.w	r1, [r4, #208]	; 0xd0
    a10e:	f8c4 e0d8 	str.w	lr, [r4, #216]	; 0xd8
        m_txDesc[buff].reg[0] = (uint32_t) &m_txBuffer[buff][0];
    a112:	f604 1128 	addw	r1, r4, #2344	; 0x928
        m_txDesc[buff].bit.OWN = 1;
    a116:	f04f 0e80 	mov.w	lr, #128	; 0x80
        m_txDesc[buff].reg[1] = 0;
    a11a:	f8c4 30ec 	str.w	r3, [r4, #236]	; 0xec
        m_txDesc[buff].reg[0] = (uint32_t) &m_txBuffer[buff][0];
    a11e:	f8c4 10e8 	str.w	r1, [r4, #232]	; 0xe8
        m_txDesc[buff].bit.OWN = 1;
    a122:	f884 e0ef 	strb.w	lr, [r4, #239]	; 0xef
        m_txDesc[buff].bit.LB = 1;
    a126:	4671      	mov	r1, lr
        m_txDesc[buff].reg[0] = (uint32_t) &m_txBuffer[buff][0];
    a128:	f504 569a 	add.w	r6, r4, #4928	; 0x1340
    a12c:	f504 6e33 	add.w	lr, r4, #2864	; 0xb30
    a130:	f504 55aa 	add.w	r5, r4, #5440	; 0x1540
        m_txDesc[buff].reg[1] = 0;
    a134:	f8c4 30f4 	str.w	r3, [r4, #244]	; 0xf4
        m_txDesc[buff].reg[0] = (uint32_t) &m_txBuffer[buff][0];
    a138:	3610      	adds	r6, #16
    a13a:	3518      	adds	r5, #24
        m_txDesc[buff].bit.LB = 1;
    a13c:	f884 10ed 	strb.w	r1, [r4, #237]	; 0xed
        m_txDesc[buff].reg[0] = (uint32_t) &m_txBuffer[buff][0];
    a140:	f8c4 e0f0 	str.w	lr, [r4, #240]	; 0xf0
        m_txDesc[buff].bit.OWN = 1;
    a144:	f884 10f7 	strb.w	r1, [r4, #247]	; 0xf7
        m_txDesc[buff].bit.LB = 1;
    a148:	468e      	mov	lr, r1
        m_txDesc[buff].reg[0] = (uint32_t) &m_txBuffer[buff][0];
    a14a:	f504 578a 	add.w	r7, r4, #4416	; 0x1140
    a14e:	f604 5138 	addw	r1, r4, #3384	; 0xd38
        m_rxDesc[buff].reg[0] = (uint32_t) &m_rxBuffer[buff][0];
    a152:	f504 6c85 	add.w	ip, r4, #1064	; 0x428
        m_txDesc[buff].bit.OWN = 1;
    a156:	46f1      	mov	r9, lr
        m_txDesc[buff].reg[0] = (uint32_t) &m_txBuffer[buff][0];
    a158:	3708      	adds	r7, #8
        m_rxDesc[buff].reg[1] = 0;
    a15a:	f8c4 3094 	str.w	r3, [r4, #148]	; 0x94
    a15e:	f8c4 309c 	str.w	r3, [r4, #156]	; 0x9c
    a162:	f8c4 30a4 	str.w	r3, [r4, #164]	; 0xa4
    a166:	f8c4 30ac 	str.w	r3, [r4, #172]	; 0xac
    a16a:	f8c4 30b4 	str.w	r3, [r4, #180]	; 0xb4
    a16e:	f8c4 30bc 	str.w	r3, [r4, #188]	; 0xbc
    a172:	f8c4 30c4 	str.w	r3, [r4, #196]	; 0xc4
    a176:	f8c4 30cc 	str.w	r3, [r4, #204]	; 0xcc
    a17a:	f8c4 30d4 	str.w	r3, [r4, #212]	; 0xd4
    a17e:	f8c4 30dc 	str.w	r3, [r4, #220]	; 0xdc
    a182:	f8c4 30e4 	str.w	r3, [r4, #228]	; 0xe4
    m_rxBuffIndex = 0;
    a186:	f884 3062 	strb.w	r3, [r4, #98]	; 0x62
        m_txDesc[buff].bit.LB = 1;
    a18a:	f884 e0f5 	strb.w	lr, [r4, #245]	; 0xf5
        m_txDesc[buff].reg[0] = (uint32_t) &m_txBuffer[buff][0];
    a18e:	f8c4 10f8 	str.w	r1, [r4, #248]	; 0xf8
        m_rxDesc[buff].reg[0] = (uint32_t) &m_rxBuffer[buff][0];
    a192:	f8c4 c098 	str.w	ip, [r4, #152]	; 0x98
    m_txDesc[TX_BUFF_CNT - 1].bit.WRAP = 1;
    a196:	21c0      	movs	r1, #192	; 0xc0
        m_txDesc[buff].reg[1] = 0;
    a198:	f8c4 30fc 	str.w	r3, [r4, #252]	; 0xfc
        m_txDesc[buff].reg[0] = (uint32_t) &m_txBuffer[buff][0];
    a19c:	f504 6874 	add.w	r8, r4, #3904	; 0xf40
        m_txDesc[buff].reg[1] = 0;
    a1a0:	f8c4 3104 	str.w	r3, [r4, #260]	; 0x104
    a1a4:	f8c4 310c 	str.w	r3, [r4, #268]	; 0x10c
    a1a8:	f8c4 3114 	str.w	r3, [r4, #276]	; 0x114
    a1ac:	f8c4 311c 	str.w	r3, [r4, #284]	; 0x11c
    a1b0:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
    m_txBuffIndex = 0;
    a1b4:	f8a4 3064 	strh.w	r3, [r4, #100]	; 0x64
        m_txDesc[buff].reg[0] = (uint32_t) &m_txBuffer[buff][0];
    a1b8:	f8c4 6110 	str.w	r6, [r4, #272]	; 0x110
    a1bc:	f8c4 5118 	str.w	r5, [r4, #280]	; 0x118
        m_txDesc[buff].bit.OWN = 1;
    a1c0:	f884 e0ff 	strb.w	lr, [r4, #255]	; 0xff
        m_txDesc[buff].bit.LB = 1;
    a1c4:	f884 e0fd 	strb.w	lr, [r4, #253]	; 0xfd
        m_txDesc[buff].bit.OWN = 1;
    a1c8:	f884 e107 	strb.w	lr, [r4, #263]	; 0x107
        m_txDesc[buff].bit.LB = 1;
    a1cc:	f884 e105 	strb.w	lr, [r4, #261]	; 0x105
        m_txDesc[buff].bit.OWN = 1;
    a1d0:	f884 e10f 	strb.w	lr, [r4, #271]	; 0x10f
    a1d4:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
        m_txDesc[buff].reg[0] = (uint32_t) &m_txBuffer[buff][0];
    a1d8:	f504 5ebb 	add.w	lr, r4, #5984	; 0x1760
    GMAC->TBQB.reg = (uint32_t) &m_txDesc;
    a1dc:	f104 05e8 	add.w	r5, r4, #232	; 0xe8
    GMAC->RBQB.reg = (uint32_t) &m_rxDesc;
    a1e0:	f104 0668 	add.w	r6, r4, #104	; 0x68
        m_txDesc[buff].reg[0] = (uint32_t) &m_txBuffer[buff][0];
    a1e4:	f8c4 7108 	str.w	r7, [r4, #264]	; 0x108
    m_txDesc[TX_BUFF_CNT - 1].bit.WRAP = 1;
    a1e8:	f884 1127 	strb.w	r1, [r4, #295]	; 0x127
        m_txDesc[buff].reg[0] = (uint32_t) &m_txBuffer[buff][0];
    a1ec:	f8c4 8100 	str.w	r8, [r4, #256]	; 0x100
        m_txDesc[buff].bit.LB = 1;
    a1f0:	f884 910d 	strb.w	r9, [r4, #269]	; 0x10d
        m_txDesc[buff].bit.OWN = 1;
    a1f4:	f884 9117 	strb.w	r9, [r4, #279]	; 0x117
        m_txDesc[buff].bit.LB = 1;
    a1f8:	f884 9115 	strb.w	r9, [r4, #277]	; 0x115
        m_txDesc[buff].bit.OWN = 1;
    a1fc:	f884 911f 	strb.w	r9, [r4, #287]	; 0x11f
        m_txDesc[buff].bit.LB = 1;
    a200:	f884 911d 	strb.w	r9, [r4, #285]	; 0x11d
        m_txDesc[buff].reg[0] = (uint32_t) &m_txBuffer[buff][0];
    a204:	f8c4 e120 	str.w	lr, [r4, #288]	; 0x120
        m_txDesc[buff].bit.LB = 1;
    a208:	f884 9125 	strb.w	r9, [r4, #293]	; 0x125
    GMAC->TBQB.reg = (uint32_t) &m_txDesc;
    a20c:	61d5      	str	r5, [r2, #28]
    GMAC->RBQB.reg = (uint32_t) &m_rxDesc;
    a20e:	6196      	str	r6, [r2, #24]
    a210:	f8c0 3088 	str.w	r3, [r0, #136]	; 0x88
  NVIC->ICPR[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
    a214:	f8c0 3188 	str.w	r3, [r0, #392]	; 0x188
  NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
    a218:	6083      	str	r3, [r0, #8]
    ConfigureGpioPerGmac(m_portPhyTxen, m_pinPhyTxen);
    a21a:	6823      	ldr	r3, [r4, #0]
    a21c:	6861      	ldr	r1, [r4, #4]

/**
    Setup a single GMAC GPIO.
**/
void EthernetManager::ConfigureGpioPerGmac(uint32_t port, uint32_t pin) {
    PMUX_ENABLE(port, pin);
    a21e:	01db      	lsls	r3, r3, #7
    a220:	f103 4382 	add.w	r3, r3, #1090519040	; 0x41000000
    a224:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
    a228:	1858      	adds	r0, r3, r1
    PMUX_SELECTION(port, pin, PER_GMAC);
    a22a:	eb03 0351 	add.w	r3, r3, r1, lsr #1
    PMUX_ENABLE(port, pin);
    a22e:	f890 2040 	ldrb.w	r2, [r0, #64]	; 0x40
    a232:	f042 0201 	orr.w	r2, r2, #1
    a236:	f880 2040 	strb.w	r2, [r0, #64]	; 0x40
    PMUX_SELECTION(port, pin, PER_GMAC);
    a23a:	f893 2030 	ldrb.w	r2, [r3, #48]	; 0x30
    a23e:	f011 0f01 	tst.w	r1, #1
    a242:	f04f 010b 	mov.w	r1, #11
    a246:	bf14      	ite	ne
    a248:	f361 1207 	bfine	r2, r1, #4, #4
    a24c:	f361 0203 	bfieq	r2, r1, #0, #4
    a250:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
    ConfigureGpioPerGmac(m_portPhyTxd0, m_pinPhyTxd0);
    a254:	68a3      	ldr	r3, [r4, #8]
    a256:	68e2      	ldr	r2, [r4, #12]
    PMUX_ENABLE(port, pin);
    a258:	01db      	lsls	r3, r3, #7
    a25a:	f103 4382 	add.w	r3, r3, #1090519040	; 0x41000000
    a25e:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
    a262:	1898      	adds	r0, r3, r2
    PMUX_SELECTION(port, pin, PER_GMAC);
    a264:	eb03 0352 	add.w	r3, r3, r2, lsr #1
    PMUX_ENABLE(port, pin);
    a268:	f890 1040 	ldrb.w	r1, [r0, #64]	; 0x40
    a26c:	f041 0101 	orr.w	r1, r1, #1
    a270:	f880 1040 	strb.w	r1, [r0, #64]	; 0x40
    PMUX_SELECTION(port, pin, PER_GMAC);
    a274:	f012 0f01 	tst.w	r2, #1
    a278:	f893 2030 	ldrb.w	r2, [r3, #48]	; 0x30
    a27c:	f04f 010b 	mov.w	r1, #11
    a280:	bf14      	ite	ne
    a282:	f361 1207 	bfine	r2, r1, #4, #4
    a286:	f361 0203 	bfieq	r2, r1, #0, #4
    a28a:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
    ConfigureGpioPerGmac(m_portPhyTxd1, m_pinPhyTxd1);
    a28e:	6923      	ldr	r3, [r4, #16]
    a290:	6962      	ldr	r2, [r4, #20]
    PMUX_ENABLE(port, pin);
    a292:	01db      	lsls	r3, r3, #7
    a294:	f103 4382 	add.w	r3, r3, #1090519040	; 0x41000000
    a298:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
    a29c:	1898      	adds	r0, r3, r2
    PMUX_SELECTION(port, pin, PER_GMAC);
    a29e:	eb03 0352 	add.w	r3, r3, r2, lsr #1
    PMUX_ENABLE(port, pin);
    a2a2:	f890 1040 	ldrb.w	r1, [r0, #64]	; 0x40
    a2a6:	f041 0101 	orr.w	r1, r1, #1
    a2aa:	f880 1040 	strb.w	r1, [r0, #64]	; 0x40
    PMUX_SELECTION(port, pin, PER_GMAC);
    a2ae:	f012 0f01 	tst.w	r2, #1
    a2b2:	f893 2030 	ldrb.w	r2, [r3, #48]	; 0x30
    a2b6:	f04f 010b 	mov.w	r1, #11
    a2ba:	bf14      	ite	ne
    a2bc:	f361 1207 	bfine	r2, r1, #4, #4
    a2c0:	f361 0203 	bfieq	r2, r1, #0, #4
    a2c4:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
    ConfigureGpioPerGmac(m_portPhyRxd0, m_pinPhyRxd0);
    a2c8:	69a3      	ldr	r3, [r4, #24]
    a2ca:	69e2      	ldr	r2, [r4, #28]
    PMUX_ENABLE(port, pin);
    a2cc:	01db      	lsls	r3, r3, #7
    a2ce:	f103 4382 	add.w	r3, r3, #1090519040	; 0x41000000
    a2d2:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
    a2d6:	1898      	adds	r0, r3, r2
    PMUX_SELECTION(port, pin, PER_GMAC);
    a2d8:	eb03 0352 	add.w	r3, r3, r2, lsr #1
    PMUX_ENABLE(port, pin);
    a2dc:	f890 1040 	ldrb.w	r1, [r0, #64]	; 0x40
    a2e0:	f041 0101 	orr.w	r1, r1, #1
    a2e4:	f880 1040 	strb.w	r1, [r0, #64]	; 0x40
    PMUX_SELECTION(port, pin, PER_GMAC);
    a2e8:	f012 0f01 	tst.w	r2, #1
    a2ec:	f893 2030 	ldrb.w	r2, [r3, #48]	; 0x30
    a2f0:	f04f 010b 	mov.w	r1, #11
    a2f4:	bf14      	ite	ne
    a2f6:	f361 1207 	bfine	r2, r1, #4, #4
    a2fa:	f361 0203 	bfieq	r2, r1, #0, #4
    a2fe:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
    ConfigureGpioPerGmac(m_portPhyRxd1, m_pinPhyRxd1);
    a302:	6a23      	ldr	r3, [r4, #32]
    a304:	6a62      	ldr	r2, [r4, #36]	; 0x24
    PMUX_ENABLE(port, pin);
    a306:	01db      	lsls	r3, r3, #7
    a308:	f103 4382 	add.w	r3, r3, #1090519040	; 0x41000000
    a30c:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
    a310:	1898      	adds	r0, r3, r2
    PMUX_SELECTION(port, pin, PER_GMAC);
    a312:	eb03 0352 	add.w	r3, r3, r2, lsr #1
    PMUX_ENABLE(port, pin);
    a316:	f890 1040 	ldrb.w	r1, [r0, #64]	; 0x40
    a31a:	f041 0101 	orr.w	r1, r1, #1
    a31e:	f880 1040 	strb.w	r1, [r0, #64]	; 0x40
    PMUX_SELECTION(port, pin, PER_GMAC);
    a322:	f012 0f01 	tst.w	r2, #1
    a326:	f893 2030 	ldrb.w	r2, [r3, #48]	; 0x30
    a32a:	f04f 010b 	mov.w	r1, #11
    a32e:	bf14      	ite	ne
    a330:	f361 1207 	bfine	r2, r1, #4, #4
    a334:	f361 0203 	bfieq	r2, r1, #0, #4
    a338:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
    ConfigureGpioPerGmac(m_portPhyRxer, m_pinPhyRxer);
    a33c:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    a33e:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
    PMUX_ENABLE(port, pin);
    a340:	01db      	lsls	r3, r3, #7
    a342:	f103 4382 	add.w	r3, r3, #1090519040	; 0x41000000
    a346:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
    a34a:	1898      	adds	r0, r3, r2
    PMUX_SELECTION(port, pin, PER_GMAC);
    a34c:	eb03 0352 	add.w	r3, r3, r2, lsr #1
    PMUX_ENABLE(port, pin);
    a350:	f890 1040 	ldrb.w	r1, [r0, #64]	; 0x40
    a354:	f041 0101 	orr.w	r1, r1, #1
    a358:	f880 1040 	strb.w	r1, [r0, #64]	; 0x40
    PMUX_SELECTION(port, pin, PER_GMAC);
    a35c:	f012 0f01 	tst.w	r2, #1
    a360:	f893 2030 	ldrb.w	r2, [r3, #48]	; 0x30
    a364:	f04f 010b 	mov.w	r1, #11
    a368:	bf14      	ite	ne
    a36a:	f361 1207 	bfine	r2, r1, #4, #4
    a36e:	f361 0203 	bfieq	r2, r1, #0, #4
    a372:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
    ConfigureGpioPerGmac(m_portPhyRxdv, m_pinPhyRxdv);
    a376:	6b23      	ldr	r3, [r4, #48]	; 0x30
    a378:	6b62      	ldr	r2, [r4, #52]	; 0x34
    PMUX_ENABLE(port, pin);
    a37a:	01db      	lsls	r3, r3, #7
    a37c:	f103 4382 	add.w	r3, r3, #1090519040	; 0x41000000
    a380:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
    a384:	1898      	adds	r0, r3, r2
    PMUX_SELECTION(port, pin, PER_GMAC);
    a386:	eb03 0352 	add.w	r3, r3, r2, lsr #1
    PMUX_ENABLE(port, pin);
    a38a:	f890 1040 	ldrb.w	r1, [r0, #64]	; 0x40
    a38e:	f041 0101 	orr.w	r1, r1, #1
    a392:	e003      	b.n	a39c <_ZN9ClearCore15EthernetManager10InitializeEv+0x398>
    a394:	42000800 	.word	0x42000800
    a398:	e000e100 	.word	0xe000e100
    a39c:	f880 1040 	strb.w	r1, [r0, #64]	; 0x40
    PMUX_SELECTION(port, pin, PER_GMAC);
    a3a0:	f012 0f01 	tst.w	r2, #1
    a3a4:	f893 2030 	ldrb.w	r2, [r3, #48]	; 0x30
    a3a8:	f04f 010b 	mov.w	r1, #11
    a3ac:	bf14      	ite	ne
    a3ae:	f361 1207 	bfine	r2, r1, #4, #4
    a3b2:	f361 0203 	bfieq	r2, r1, #0, #4
    a3b6:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
    ConfigureGpioPerGmac(m_portPhyMdio, m_pinPhyMdio);
    a3ba:	6ba3      	ldr	r3, [r4, #56]	; 0x38
    a3bc:	6be2      	ldr	r2, [r4, #60]	; 0x3c
    PMUX_ENABLE(port, pin);
    a3be:	01db      	lsls	r3, r3, #7
    a3c0:	f103 4382 	add.w	r3, r3, #1090519040	; 0x41000000
    a3c4:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
    a3c8:	1898      	adds	r0, r3, r2
    PMUX_SELECTION(port, pin, PER_GMAC);
    a3ca:	eb03 0352 	add.w	r3, r3, r2, lsr #1
    PMUX_ENABLE(port, pin);
    a3ce:	f890 1040 	ldrb.w	r1, [r0, #64]	; 0x40
    a3d2:	f041 0101 	orr.w	r1, r1, #1
    a3d6:	f880 1040 	strb.w	r1, [r0, #64]	; 0x40
    PMUX_SELECTION(port, pin, PER_GMAC);
    a3da:	f012 0f01 	tst.w	r2, #1
    a3de:	f893 2030 	ldrb.w	r2, [r3, #48]	; 0x30
    a3e2:	f04f 010b 	mov.w	r1, #11
    a3e6:	bf14      	ite	ne
    a3e8:	f361 1207 	bfine	r2, r1, #4, #4
    a3ec:	f361 0203 	bfieq	r2, r1, #0, #4
    a3f0:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
    ConfigureGpioPerGmac(m_portPhyMdc, m_pinPhyMdc);
    a3f4:	6c23      	ldr	r3, [r4, #64]	; 0x40
    a3f6:	6c62      	ldr	r2, [r4, #68]	; 0x44
    PMUX_ENABLE(port, pin);
    a3f8:	01db      	lsls	r3, r3, #7
    a3fa:	f103 4382 	add.w	r3, r3, #1090519040	; 0x41000000
    a3fe:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
    a402:	1898      	adds	r0, r3, r2
    PMUX_SELECTION(port, pin, PER_GMAC);
    a404:	eb03 0352 	add.w	r3, r3, r2, lsr #1
    PMUX_ENABLE(port, pin);
    a408:	f890 1040 	ldrb.w	r1, [r0, #64]	; 0x40
    a40c:	f041 0101 	orr.w	r1, r1, #1
    a410:	f880 1040 	strb.w	r1, [r0, #64]	; 0x40
    PMUX_SELECTION(port, pin, PER_GMAC);
    a414:	f012 0f01 	tst.w	r2, #1
    a418:	f893 2030 	ldrb.w	r2, [r3, #48]	; 0x30
    a41c:	f04f 010b 	mov.w	r1, #11
    a420:	bf14      	ite	ne
    a422:	f361 1207 	bfine	r2, r1, #4, #4
    a426:	f361 0203 	bfieq	r2, r1, #0, #4
    a42a:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
    ConfigureGpioPerGmac(m_portPhyTxclk, m_pinPhyTxclk);
    a42e:	6ca3      	ldr	r3, [r4, #72]	; 0x48
    a430:	6ce2      	ldr	r2, [r4, #76]	; 0x4c
    PMUX_ENABLE(port, pin);
    a432:	01db      	lsls	r3, r3, #7
    a434:	f103 4382 	add.w	r3, r3, #1090519040	; 0x41000000
    a438:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
    a43c:	1898      	adds	r0, r3, r2
    PMUX_SELECTION(port, pin, PER_GMAC);
    a43e:	eb03 0352 	add.w	r3, r3, r2, lsr #1
    PMUX_ENABLE(port, pin);
    a442:	f890 1040 	ldrb.w	r1, [r0, #64]	; 0x40
    a446:	f041 0101 	orr.w	r1, r1, #1
    a44a:	f880 1040 	strb.w	r1, [r0, #64]	; 0x40
    PMUX_SELECTION(port, pin, PER_GMAC);
    a44e:	f012 0f01 	tst.w	r2, #1
    a452:	f893 2030 	ldrb.w	r2, [r3, #48]	; 0x30
    a456:	f04f 010b 	mov.w	r1, #11
    a45a:	bf14      	ite	ne
    a45c:	f361 1207 	bfine	r2, r1, #4, #4
    a460:	f361 0203 	bfieq	r2, r1, #0, #4
    a464:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
    PIN_CONFIGURATION(m_portPhyInt, m_pinPhyInt, PORT_PINCFG_INEN);
    a468:	6d23      	ldr	r3, [r4, #80]	; 0x50
    a46a:	6d61      	ldr	r1, [r4, #84]	; 0x54
    a46c:	01db      	lsls	r3, r3, #7
    a46e:	f103 4282 	add.w	r2, r3, #1090519040	; 0x41000000
    a472:	f502 4200 	add.w	r2, r2, #32768	; 0x8000
    a476:	1850      	adds	r0, r2, r1
    a478:	2702      	movs	r7, #2
    PMUX_SELECTION(m_portPhyInt, m_pinPhyInt, PER_EXTINT);
    a47a:	eb02 0251 	add.w	r2, r2, r1, lsr #1
    PIN_CONFIGURATION(m_portPhyInt, m_pinPhyInt, PORT_PINCFG_INEN);
    a47e:	f880 7040 	strb.w	r7, [r0, #64]	; 0x40
    PMUX_SELECTION(m_portPhyInt, m_pinPhyInt, PER_EXTINT);
    a482:	f892 0030 	ldrb.w	r0, [r2, #48]	; 0x30
    PMUX_ENABLE(m_portPhyInt, m_pinPhyInt);
    a486:	f103 4382 	add.w	r3, r3, #1090519040	; 0x41000000
    PMUX_SELECTION(m_portPhyInt, m_pinPhyInt, PER_EXTINT);
    a48a:	f011 0701 	ands.w	r7, r1, #1
    PMUX_ENABLE(m_portPhyInt, m_pinPhyInt);
    a48e:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
    a492:	440b      	add	r3, r1
    PMUX_SELECTION(m_portPhyInt, m_pinPhyInt, PER_EXTINT);
    a494:	bf14      	ite	ne
    a496:	f36f 1007 	bfcne	r0, #4, #4
    a49a:	f367 0003 	bfieq	r0, r7, #0, #4
    a49e:	f882 0030 	strb.w	r0, [r2, #48]	; 0x30
    PMUX_ENABLE(m_portPhyInt, m_pinPhyInt);
    a4a2:	f893 0040 	ldrb.w	r0, [r3, #64]	; 0x40
    GMAC->IER.bit.TCOMP = 1;    // Transmit complete
    a4a6:	4932      	ldr	r1, [pc, #200]	; (a570 <_ZN9ClearCore15EthernetManager10InitializeEv+0x56c>)
    EIC->CTRLA.bit.ENABLE = 0;
    a4a8:	4a32      	ldr	r2, [pc, #200]	; (a574 <_ZN9ClearCore15EthernetManager10InitializeEv+0x570>)
    PMUX_ENABLE(m_portPhyInt, m_pinPhyInt);
    a4aa:	f040 0001 	orr.w	r0, r0, #1
    a4ae:	f883 0040 	strb.w	r0, [r3, #64]	; 0x40
    PORT->Group[m_portPhyInt].PINCFG[m_pinPhyInt].bit.INEN = 1;
    a4b2:	f893 0040 	ldrb.w	r0, [r3, #64]	; 0x40
    a4b6:	f040 0002 	orr.w	r0, r0, #2
    a4ba:	f883 0040 	strb.w	r0, [r3, #64]	; 0x40
    GMAC->IER.bit.TCOMP = 1;    // Transmit complete
    a4be:	6a8b      	ldr	r3, [r1, #40]	; 0x28
    a4c0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
    a4c4:	628b      	str	r3, [r1, #40]	; 0x28
    GMAC->IER.bit.RCOMP = 1;    // Receive complete
    a4c6:	6a8b      	ldr	r3, [r1, #40]	; 0x28
    a4c8:	f043 0302 	orr.w	r3, r3, #2
    a4cc:	628b      	str	r3, [r1, #40]	; 0x28
    EIC->CTRLA.bit.ENABLE = 0;
    a4ce:	7813      	ldrb	r3, [r2, #0]
    a4d0:	f36f 0341 	bfc	r3, #1, #1
    a4d4:	7013      	strb	r3, [r2, #0]
    SYNCBUSY_WAIT(EIC, EIC_SYNCBUSY_ENABLE);
    a4d6:	6853      	ldr	r3, [r2, #4]
    a4d8:	0799      	lsls	r1, r3, #30
    a4da:	d4fc      	bmi.n	a4d6 <_ZN9ClearCore15EthernetManager10InitializeEv+0x4d2>
    uint32_t shiftAmt = 4 * (m_phyExtInt % 8);
    a4dc:	6da0      	ldr	r0, [r4, #88]	; 0x58
    SYNCBUSY_WAIT(EIC, EIC_SYNCBUSY_ENABLE);
    a4de:	4925      	ldr	r1, [pc, #148]	; (a574 <_ZN9ClearCore15EthernetManager10InitializeEv+0x570>)
    EIC->CONFIG[m_phyExtInt / 8].reg &= (uint32_t) ~(0xf << shiftAmt);
    a4e0:	08c3      	lsrs	r3, r0, #3
    a4e2:	009b      	lsls	r3, r3, #2
    a4e4:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
    EIC->INTENSET.reg = (1UL << m_phyExtInt);
    a4e8:	2701      	movs	r7, #1
    a4ea:	f503 5320 	add.w	r3, r3, #10240	; 0x2800
    a4ee:	4087      	lsls	r7, r0
    a4f0:	6117      	str	r7, [r2, #16]
    uint32_t shiftAmt = 4 * (m_phyExtInt % 8);
    a4f2:	f000 0007 	and.w	r0, r0, #7
    EIC->CONFIG[m_phyExtInt / 8].reg &= (uint32_t) ~(0xf << shiftAmt);
    a4f6:	69df      	ldr	r7, [r3, #28]
    uint32_t shiftAmt = 4 * (m_phyExtInt % 8);
    a4f8:	0080      	lsls	r0, r0, #2
    EIC->CONFIG[m_phyExtInt / 8].reg &= (uint32_t) ~(0xf << shiftAmt);
    a4fa:	f04f 0e0f 	mov.w	lr, #15
    a4fe:	fa0e fe00 	lsl.w	lr, lr, r0
    a502:	ea27 070e 	bic.w	r7, r7, lr
    a506:	61df      	str	r7, [r3, #28]
        (EIC_CONFIG_SENSE0_LOW_Val << shiftAmt);
    a508:	f8d3 e01c 	ldr.w	lr, [r3, #28]
    a50c:	2705      	movs	r7, #5
    a50e:	fa07 f000 	lsl.w	r0, r7, r0
    a512:	ea40 000e 	orr.w	r0, r0, lr
    EIC->CONFIG[m_phyExtInt / 8].reg |=
    a516:	61d8      	str	r0, [r3, #28]
    EIC->CTRLA.bit.ENABLE = 1;
    a518:	7813      	ldrb	r3, [r2, #0]
    a51a:	f043 0302 	orr.w	r3, r3, #2
    a51e:	7013      	strb	r3, [r2, #0]
    SYNCBUSY_WAIT(EIC, EIC_SYNCBUSY_ENABLE);
    a520:	684b      	ldr	r3, [r1, #4]
    a522:	079b      	lsls	r3, r3, #30
    a524:	d4fc      	bmi.n	a520 <_ZN9ClearCore15EthernetManager10InitializeEv+0x51c>
    PhyInitialize();
    a526:	4620      	mov	r0, r4
    a528:	f7ff fce4 	bl	9ef4 <_ZN9ClearCore15EthernetManager13PhyInitializeEv>
    m_ethernetInterface.rxDesc = &m_rxDesc[0];
    a52c:	f641 106c 	movw	r0, #6508	; 0x196c
    m_ethernetInterface.txDesc = &m_txDesc[0];
    a530:	f641 1170 	movw	r1, #6512	; 0x1970
    m_ethernetInterface.rxBuffIndex = &m_rxBuffIndex;
    a534:	f641 1774 	movw	r7, #6516	; 0x1974
    NvmMgr.MacAddress(m_ethernetInterface.mac);
    a538:	4b0f      	ldr	r3, [pc, #60]	; (a578 <_ZN9ClearCore15EthernetManager10InitializeEv+0x574>)
    m_ethernetInterface.rxDesc = &m_rxDesc[0];
    a53a:	5026      	str	r6, [r4, r0]
    m_ethernetInterface.txBuffIndex = &m_txBuffIndex;
    a53c:	f641 1278 	movw	r2, #6520	; 0x1978
    m_ethernetInterface.txDesc = &m_txDesc[0];
    a540:	5065      	str	r5, [r4, r1]
    m_ethernetInterface.txBuffIndex = &m_txBuffIndex;
    a542:	f104 0064 	add.w	r0, r4, #100	; 0x64
    m_ethernetInterface.rxBuffIndex = &m_rxBuffIndex;
    a546:	f104 0662 	add.w	r6, r4, #98	; 0x62
    NvmMgr.MacAddress(m_ethernetInterface.mac);
    a54a:	f504 51cb 	add.w	r1, r4, #6496	; 0x1960
    m_ethernetInterface.rxBuffIndex = &m_rxBuffIndex;
    a54e:	51e6      	str	r6, [r4, r7]
    NvmMgr.MacAddress(m_ethernetInterface.mac);
    a550:	311c      	adds	r1, #28
    m_ethernetInterface.txBuffIndex = &m_txBuffIndex;
    a552:	50a0      	str	r0, [r4, r2]
    NvmMgr.MacAddress(m_ethernetInterface.mac);
    a554:	6818      	ldr	r0, [r3, #0]
}
    a556:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    NvmMgr.MacAddress(m_ethernetInterface.mac);
    a55a:	f007 baeb 	b.w	11b34 <_ZN9ClearCore10NvmManager10MacAddressEPh>
    GMAC->NCR.bit.TXEN = enable ? 1 : 0;
    a55e:	681a      	ldr	r2, [r3, #0]
    a560:	f36f 02c3 	bfc	r2, #3, #1
    a564:	601a      	str	r2, [r3, #0]
    GMAC->NCR.bit.RXEN = enable ? 1 : 0;
    a566:	681a      	ldr	r2, [r3, #0]
    a568:	f36f 0282 	bfc	r2, #2, #1
    a56c:	601a      	str	r2, [r3, #0]
    a56e:	e554      	b.n	a01a <_ZN9ClearCore15EthernetManager10InitializeEv+0x16>
    a570:	42000800 	.word	0x42000800
    a574:	40002800 	.word	0x40002800
    a578:	20001f18 	.word	0x20001f18

0000a57c <_ZN9ClearCore15EthernetManager13IrqHandlerPhyEv>:
void EthernetManager::IrqHandlerPhy() {
    a57c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    EIC->INTFLAG.reg = 1UL << m_phyExtInt;
    a580:	6d85      	ldr	r5, [r0, #88]	; 0x58
    a582:	4ca1      	ldr	r4, [pc, #644]	; (a808 <_ZN9ClearCore15EthernetManager13IrqHandlerPhyEv+0x28c>)
    GMAC->NCR.bit.MPE = 1;
    a584:	4ba1      	ldr	r3, [pc, #644]	; (a80c <_ZN9ClearCore15EthernetManager13IrqHandlerPhyEv+0x290>)
    GMAC->MAN.reg = GMAC_MAN_CLTTO |   // Clause 22 or 45 operation (1 is 22)
    a586:	49a2      	ldr	r1, [pc, #648]	; (a810 <_ZN9ClearCore15EthernetManager13IrqHandlerPhyEv+0x294>)
    EIC->INTFLAG.reg = 1UL << m_phyExtInt;
    a588:	2201      	movs	r2, #1
    a58a:	40aa      	lsls	r2, r5
    a58c:	6162      	str	r2, [r4, #20]
    GMAC->NCR.bit.MPE = 1;
    a58e:	681a      	ldr	r2, [r3, #0]
    a590:	f042 0210 	orr.w	r2, r2, #16
    a594:	601a      	str	r2, [r3, #0]
    while (!((GMAC->NSR.reg & GMAC_NSR_IDLE) >> GMAC_NSR_IDLE_Pos)) {
    a596:	461a      	mov	r2, r3
    GMAC->MAN.reg = GMAC_MAN_CLTTO |   // Clause 22 or 45 operation (1 is 22)
    a598:	6359      	str	r1, [r3, #52]	; 0x34
    while (!((GMAC->NSR.reg & GMAC_NSR_IDLE) >> GMAC_NSR_IDLE_Pos)) {
    a59a:	6893      	ldr	r3, [r2, #8]
    a59c:	075d      	lsls	r5, r3, #29
    a59e:	d5fc      	bpl.n	a59a <_ZN9ClearCore15EthernetManager13IrqHandlerPhyEv+0x1e>
    GMAC->NCR.bit.MPE = 0;
    a5a0:	6813      	ldr	r3, [r2, #0]
    a5a2:	f36f 1304 	bfc	r3, #4, #1
    a5a6:	6013      	str	r3, [r2, #0]
    return GMAC_MAN_DATA(GMAC->MAN.reg);
    a5a8:	6b51      	ldr	r1, [r2, #52]	; 0x34
    if (phyRegData & PHY_ICS_LU) {
    a5aa:	07cc      	lsls	r4, r1, #31
    a5ac:	d415      	bmi.n	a5da <_ZN9ClearCore15EthernetManager13IrqHandlerPhyEv+0x5e>
    if (phyRegData & PHY_ICS_LD) {
    a5ae:	074d      	lsls	r5, r1, #29
        m_phyLinkUp = false;
    a5b0:	bf44      	itt	mi
    a5b2:	2300      	movmi	r3, #0
    a5b4:	f880 305c 	strbmi.w	r3, [r0, #92]	; 0x5c
    if (phyRegData & PHY_ICS_RF) {
    a5b8:	078c      	lsls	r4, r1, #30
    a5ba:	d401      	bmi.n	a5c0 <_ZN9ClearCore15EthernetManager13IrqHandlerPhyEv+0x44>
    a5bc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    bool enabled = (GMAC->NCR.bit.TXEN && GMAC->NCR.bit.RXEN);
    a5c0:	4b92      	ldr	r3, [pc, #584]	; (a80c <_ZN9ClearCore15EthernetManager13IrqHandlerPhyEv+0x290>)
    a5c2:	681a      	ldr	r2, [r3, #0]
        m_phyRemoteFault = true;
    a5c4:	2101      	movs	r1, #1
    a5c6:	f880 105d 	strb.w	r1, [r0, #93]	; 0x5d
    bool enabled = (GMAC->NCR.bit.TXEN && GMAC->NCR.bit.RXEN);
    a5ca:	0711      	lsls	r1, r2, #28
    a5cc:	d5f6      	bpl.n	a5bc <_ZN9ClearCore15EthernetManager13IrqHandlerPhyEv+0x40>
    a5ce:	681a      	ldr	r2, [r3, #0]
    a5d0:	0752      	lsls	r2, r2, #29
    a5d2:	f100 8121 	bmi.w	a818 <_ZN9ClearCore15EthernetManager13IrqHandlerPhyEv+0x29c>
    a5d6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        bool enabled = (GMAC->NCR.bit.TXEN == 1);
    a5da:	6814      	ldr	r4, [r2, #0]
    bool enabled = (GMAC->NCR.bit.TXEN && GMAC->NCR.bit.RXEN);
    a5dc:	6813      	ldr	r3, [r2, #0]
        m_phyLinkUp = true;
    a5de:	2501      	movs	r5, #1
    bool enabled = (GMAC->NCR.bit.TXEN && GMAC->NCR.bit.RXEN);
    a5e0:	071b      	lsls	r3, r3, #28
        bool enabled = (GMAC->NCR.bit.TXEN == 1);
    a5e2:	f3c4 04c0 	ubfx	r4, r4, #3, #1
        m_phyLinkUp = true;
    a5e6:	f880 505c 	strb.w	r5, [r0, #92]	; 0x5c
    bool enabled = (GMAC->NCR.bit.TXEN && GMAC->NCR.bit.RXEN);
    a5ea:	d56d      	bpl.n	a6c8 <_ZN9ClearCore15EthernetManager13IrqHandlerPhyEv+0x14c>
    a5ec:	6813      	ldr	r3, [r2, #0]
    a5ee:	075f      	lsls	r7, r3, #29
    a5f0:	d56a      	bpl.n	a6c8 <_ZN9ClearCore15EthernetManager13IrqHandlerPhyEv+0x14c>
    GMAC->NCR.bit.TXEN = enable ? 1 : 0;
    a5f2:	6813      	ldr	r3, [r2, #0]
    a5f4:	f36f 03c3 	bfc	r3, #3, #1
    a5f8:	6013      	str	r3, [r2, #0]
    GMAC->NCR.bit.RXEN = enable ? 1 : 0;
    a5fa:	6813      	ldr	r3, [r2, #0]
    a5fc:	f36f 0382 	bfc	r3, #2, #1
    a600:	6013      	str	r3, [r2, #0]
            m_txDesc[i].bit.OWN = 1;
    a602:	f890 e0f7 	ldrb.w	lr, [r0, #247]	; 0xf7
            m_txDesc[i].bit.LB = 1;
    a606:	f890 70f5 	ldrb.w	r7, [r0, #245]	; 0xf5
            m_txDesc[i].bit.OWN = 1;
    a60a:	f890 60ff 	ldrb.w	r6, [r0, #255]	; 0xff
            m_txDesc[i].bit.LB = 1;
    a60e:	f890 50fd 	ldrb.w	r5, [r0, #253]	; 0xfd
            m_txDesc[i].bit.OWN = 1;
    a612:	f890 2107 	ldrb.w	r2, [r0, #263]	; 0x107
            m_txDesc[i].bit.LB = 1;
    a616:	f890 3105 	ldrb.w	r3, [r0, #261]	; 0x105
            m_txDesc[i].bit.OWN = 1;
    a61a:	f890 80ef 	ldrb.w	r8, [r0, #239]	; 0xef
            m_txDesc[i].bit.LB = 1;
    a61e:	f890 c0ed 	ldrb.w	ip, [r0, #237]	; 0xed
            m_txDesc[i].bit.OWN = 1;
    a622:	f04e 0e80 	orr.w	lr, lr, #128	; 0x80
            m_txDesc[i].bit.LB = 1;
    a626:	f047 0780 	orr.w	r7, r7, #128	; 0x80
            m_txDesc[i].bit.OWN = 1;
    a62a:	f046 0680 	orr.w	r6, r6, #128	; 0x80
            m_txDesc[i].bit.LB = 1;
    a62e:	f045 0580 	orr.w	r5, r5, #128	; 0x80
            m_txDesc[i].bit.OWN = 1;
    a632:	f042 0280 	orr.w	r2, r2, #128	; 0x80
            m_txDesc[i].bit.LB = 1;
    a636:	f043 0380 	orr.w	r3, r3, #128	; 0x80
            m_txDesc[i].bit.OWN = 1;
    a63a:	f880 e0f7 	strb.w	lr, [r0, #247]	; 0xf7
            m_txDesc[i].bit.LB = 1;
    a63e:	f880 70f5 	strb.w	r7, [r0, #245]	; 0xf5
            m_txDesc[i].bit.OWN = 1;
    a642:	f890 e10f 	ldrb.w	lr, [r0, #271]	; 0x10f
            m_txDesc[i].bit.LB = 1;
    a646:	f890 710d 	ldrb.w	r7, [r0, #269]	; 0x10d
            m_txDesc[i].bit.OWN = 1;
    a64a:	f880 60ff 	strb.w	r6, [r0, #255]	; 0xff
            m_txDesc[i].bit.LB = 1;
    a64e:	f880 50fd 	strb.w	r5, [r0, #253]	; 0xfd
            m_txDesc[i].bit.OWN = 1;
    a652:	f890 6117 	ldrb.w	r6, [r0, #279]	; 0x117
            m_txDesc[i].bit.LB = 1;
    a656:	f890 5115 	ldrb.w	r5, [r0, #277]	; 0x115
            m_txDesc[i].bit.OWN = 1;
    a65a:	f880 2107 	strb.w	r2, [r0, #263]	; 0x107
            m_txDesc[i].bit.LB = 1;
    a65e:	f880 3105 	strb.w	r3, [r0, #261]	; 0x105
            m_txDesc[i].bit.OWN = 1;
    a662:	f890 211f 	ldrb.w	r2, [r0, #287]	; 0x11f
            m_txDesc[i].bit.LB = 1;
    a666:	f890 311d 	ldrb.w	r3, [r0, #285]	; 0x11d
    a66a:	f045 0580 	orr.w	r5, r5, #128	; 0x80
            m_txDesc[i].bit.OWN = 1;
    a66e:	f042 0280 	orr.w	r2, r2, #128	; 0x80
            m_txDesc[i].bit.LB = 1;
    a672:	f043 0380 	orr.w	r3, r3, #128	; 0x80
            m_txDesc[i].bit.OWN = 1;
    a676:	f048 0880 	orr.w	r8, r8, #128	; 0x80
            m_txDesc[i].bit.LB = 1;
    a67a:	f04c 0c80 	orr.w	ip, ip, #128	; 0x80
            m_txDesc[i].bit.OWN = 1;
    a67e:	f04e 0e80 	orr.w	lr, lr, #128	; 0x80
            m_txDesc[i].bit.LB = 1;
    a682:	f047 0780 	orr.w	r7, r7, #128	; 0x80
            m_txDesc[i].bit.OWN = 1;
    a686:	f046 0680 	orr.w	r6, r6, #128	; 0x80
            m_txDesc[i].bit.LB = 1;
    a68a:	f880 5115 	strb.w	r5, [r0, #277]	; 0x115
    a68e:	f880 311d 	strb.w	r3, [r0, #285]	; 0x11d
            m_txDesc[i].bit.OWN = 1;
    a692:	f880 80ef 	strb.w	r8, [r0, #239]	; 0xef
            m_txDesc[i].bit.LB = 1;
    a696:	f880 c0ed 	strb.w	ip, [r0, #237]	; 0xed
            m_txDesc[i].bit.OWN = 1;
    a69a:	f880 e10f 	strb.w	lr, [r0, #271]	; 0x10f
            m_txDesc[i].bit.LB = 1;
    a69e:	f880 710d 	strb.w	r7, [r0, #269]	; 0x10d
            m_txDesc[i].bit.OWN = 1;
    a6a2:	f880 6117 	strb.w	r6, [r0, #279]	; 0x117
    a6a6:	f880 211f 	strb.w	r2, [r0, #287]	; 0x11f
    a6aa:	f890 2127 	ldrb.w	r2, [r0, #295]	; 0x127
            m_txDesc[i].bit.LB = 1;
    a6ae:	f890 3125 	ldrb.w	r3, [r0, #293]	; 0x125
            m_txDesc[i].bit.OWN = 1;
    a6b2:	f042 0280 	orr.w	r2, r2, #128	; 0x80
            m_txDesc[i].bit.LB = 1;
    a6b6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
        m_txBuffIndex = 0;
    a6ba:	2500      	movs	r5, #0
            m_txDesc[i].bit.OWN = 1;
    a6bc:	f880 2127 	strb.w	r2, [r0, #295]	; 0x127
            m_txDesc[i].bit.LB = 1;
    a6c0:	f880 3125 	strb.w	r3, [r0, #293]	; 0x125
        m_txBuffIndex = 0;
    a6c4:	f8a0 5064 	strh.w	r5, [r0, #100]	; 0x64
    GMAC->NCR.bit.MPE = 1;
    a6c8:	4b50      	ldr	r3, [pc, #320]	; (a80c <_ZN9ClearCore15EthernetManager13IrqHandlerPhyEv+0x290>)
    GMAC->MAN.reg = GMAC_MAN_CLTTO |   // Clause 22 or 45 operation (1 is 22)
    a6ca:	4d52      	ldr	r5, [pc, #328]	; (a814 <_ZN9ClearCore15EthernetManager13IrqHandlerPhyEv+0x298>)
    GMAC->NCR.bit.MPE = 1;
    a6cc:	681a      	ldr	r2, [r3, #0]
    a6ce:	f042 0210 	orr.w	r2, r2, #16
    a6d2:	601a      	str	r2, [r3, #0]
    while (!((GMAC->NSR.reg & GMAC_NSR_IDLE) >> GMAC_NSR_IDLE_Pos)) {
    a6d4:	461a      	mov	r2, r3
    GMAC->MAN.reg = GMAC_MAN_CLTTO |   // Clause 22 or 45 operation (1 is 22)
    a6d6:	635d      	str	r5, [r3, #52]	; 0x34
    while (!((GMAC->NSR.reg & GMAC_NSR_IDLE) >> GMAC_NSR_IDLE_Pos)) {
    a6d8:	6893      	ldr	r3, [r2, #8]
    a6da:	075e      	lsls	r6, r3, #29
    a6dc:	d5fc      	bpl.n	a6d8 <_ZN9ClearCore15EthernetManager13IrqHandlerPhyEv+0x15c>
    GMAC->NCR.bit.MPE = 0;
    a6de:	6813      	ldr	r3, [r2, #0]
    a6e0:	f36f 1304 	bfc	r3, #4, #1
    a6e4:	6013      	str	r3, [r2, #0]
    return GMAC_MAN_DATA(GMAC->MAN.reg);
    a6e6:	6b53      	ldr	r3, [r2, #52]	; 0x34
        GMAC->NCFGR.bit.SPD = (phyMode & PHY_CTRL_AN_SPD_MSK) ? 1 : 0;
    a6e8:	6855      	ldr	r5, [r2, #4]
        uint16_t phyMode = PhyRead(PHY_CTRL_1) & PHY_CTRL_AN_MSK;
    a6ea:	b29b      	uxth	r3, r3
        GMAC->NCFGR.bit.SPD = (phyMode & PHY_CTRL_AN_SPD_MSK) ? 1 : 0;
    a6ec:	f3c3 0640 	ubfx	r6, r3, #1, #1
    a6f0:	f366 0500 	bfi	r5, r6, #0, #1
    a6f4:	6055      	str	r5, [r2, #4]
        GMAC->NCFGR.bit.FD = (phyMode & PHY_CTRL_AN_FD_MSK) ? 1 : 0;
    a6f6:	6855      	ldr	r5, [r2, #4]
    a6f8:	f3c3 0380 	ubfx	r3, r3, #2, #1
    a6fc:	f363 0541 	bfi	r5, r3, #1, #1
    a700:	6055      	str	r5, [r2, #4]
    bool enabled = (GMAC->NCR.bit.TXEN && GMAC->NCR.bit.RXEN);
    a702:	6813      	ldr	r3, [r2, #0]
    a704:	f3c3 03c0 	ubfx	r3, r3, #3, #1
    a708:	b96b      	cbnz	r3, a726 <_ZN9ClearCore15EthernetManager13IrqHandlerPhyEv+0x1aa>
    if (enable == enabled) {
    a70a:	429c      	cmp	r4, r3
    a70c:	f43f af4f 	beq.w	a5ae <_ZN9ClearCore15EthernetManager13IrqHandlerPhyEv+0x32>
    GMAC->NCR.bit.TXEN = enable ? 1 : 0;
    a710:	b16c      	cbz	r4, a72e <_ZN9ClearCore15EthernetManager13IrqHandlerPhyEv+0x1b2>
    a712:	4b3e      	ldr	r3, [pc, #248]	; (a80c <_ZN9ClearCore15EthernetManager13IrqHandlerPhyEv+0x290>)
    a714:	681a      	ldr	r2, [r3, #0]
    a716:	f042 0208 	orr.w	r2, r2, #8
    a71a:	601a      	str	r2, [r3, #0]
    GMAC->NCR.bit.RXEN = enable ? 1 : 0;
    a71c:	681a      	ldr	r2, [r3, #0]
    a71e:	f042 0204 	orr.w	r2, r2, #4
    a722:	601a      	str	r2, [r3, #0]
    a724:	e743      	b.n	a5ae <_ZN9ClearCore15EthernetManager13IrqHandlerPhyEv+0x32>
    bool enabled = (GMAC->NCR.bit.TXEN && GMAC->NCR.bit.RXEN);
    a726:	6813      	ldr	r3, [r2, #0]
    a728:	f3c3 0380 	ubfx	r3, r3, #2, #1
    a72c:	e7ed      	b.n	a70a <_ZN9ClearCore15EthernetManager13IrqHandlerPhyEv+0x18e>
    GMAC->NCR.bit.TXEN = enable ? 1 : 0;
    a72e:	4b37      	ldr	r3, [pc, #220]	; (a80c <_ZN9ClearCore15EthernetManager13IrqHandlerPhyEv+0x290>)
    a730:	681a      	ldr	r2, [r3, #0]
    a732:	f364 02c3 	bfi	r2, r4, #3, #1
    a736:	601a      	str	r2, [r3, #0]
    GMAC->NCR.bit.RXEN = enable ? 1 : 0;
    a738:	681a      	ldr	r2, [r3, #0]
    a73a:	f364 0282 	bfi	r2, r4, #2, #1
    a73e:	601a      	str	r2, [r3, #0]
            m_txDesc[i].bit.OWN = 1;
    a740:	f890 e0f7 	ldrb.w	lr, [r0, #247]	; 0xf7
            m_txDesc[i].bit.LB = 1;
    a744:	f890 70f5 	ldrb.w	r7, [r0, #245]	; 0xf5
            m_txDesc[i].bit.OWN = 1;
    a748:	f890 60ff 	ldrb.w	r6, [r0, #255]	; 0xff
            m_txDesc[i].bit.LB = 1;
    a74c:	f890 50fd 	ldrb.w	r5, [r0, #253]	; 0xfd
            m_txDesc[i].bit.OWN = 1;
    a750:	f890 2107 	ldrb.w	r2, [r0, #263]	; 0x107
            m_txDesc[i].bit.LB = 1;
    a754:	f890 3105 	ldrb.w	r3, [r0, #261]	; 0x105
            m_txDesc[i].bit.OWN = 1;
    a758:	f890 80ef 	ldrb.w	r8, [r0, #239]	; 0xef
            m_txDesc[i].bit.LB = 1;
    a75c:	f890 c0ed 	ldrb.w	ip, [r0, #237]	; 0xed
            m_txDesc[i].bit.OWN = 1;
    a760:	f04e 0e80 	orr.w	lr, lr, #128	; 0x80
            m_txDesc[i].bit.LB = 1;
    a764:	f047 0780 	orr.w	r7, r7, #128	; 0x80
            m_txDesc[i].bit.OWN = 1;
    a768:	f046 0680 	orr.w	r6, r6, #128	; 0x80
            m_txDesc[i].bit.LB = 1;
    a76c:	f045 0580 	orr.w	r5, r5, #128	; 0x80
            m_txDesc[i].bit.OWN = 1;
    a770:	f042 0280 	orr.w	r2, r2, #128	; 0x80
            m_txDesc[i].bit.LB = 1;
    a774:	f043 0380 	orr.w	r3, r3, #128	; 0x80
            m_txDesc[i].bit.OWN = 1;
    a778:	f880 e0f7 	strb.w	lr, [r0, #247]	; 0xf7
            m_txDesc[i].bit.LB = 1;
    a77c:	f880 70f5 	strb.w	r7, [r0, #245]	; 0xf5
            m_txDesc[i].bit.OWN = 1;
    a780:	f890 e10f 	ldrb.w	lr, [r0, #271]	; 0x10f
            m_txDesc[i].bit.LB = 1;
    a784:	f890 710d 	ldrb.w	r7, [r0, #269]	; 0x10d
            m_txDesc[i].bit.OWN = 1;
    a788:	f880 60ff 	strb.w	r6, [r0, #255]	; 0xff
            m_txDesc[i].bit.LB = 1;
    a78c:	f880 50fd 	strb.w	r5, [r0, #253]	; 0xfd
            m_txDesc[i].bit.OWN = 1;
    a790:	f890 6117 	ldrb.w	r6, [r0, #279]	; 0x117
            m_txDesc[i].bit.LB = 1;
    a794:	f890 5115 	ldrb.w	r5, [r0, #277]	; 0x115
            m_txDesc[i].bit.OWN = 1;
    a798:	f880 2107 	strb.w	r2, [r0, #263]	; 0x107
            m_txDesc[i].bit.LB = 1;
    a79c:	f880 3105 	strb.w	r3, [r0, #261]	; 0x105
            m_txDesc[i].bit.OWN = 1;
    a7a0:	f890 211f 	ldrb.w	r2, [r0, #287]	; 0x11f
            m_txDesc[i].bit.LB = 1;
    a7a4:	f890 311d 	ldrb.w	r3, [r0, #285]	; 0x11d
            m_txDesc[i].bit.OWN = 1;
    a7a8:	f042 0280 	orr.w	r2, r2, #128	; 0x80
            m_txDesc[i].bit.LB = 1;
    a7ac:	f043 0380 	orr.w	r3, r3, #128	; 0x80
            m_txDesc[i].bit.OWN = 1;
    a7b0:	f048 0880 	orr.w	r8, r8, #128	; 0x80
            m_txDesc[i].bit.LB = 1;
    a7b4:	f04c 0c80 	orr.w	ip, ip, #128	; 0x80
            m_txDesc[i].bit.OWN = 1;
    a7b8:	f04e 0e80 	orr.w	lr, lr, #128	; 0x80
            m_txDesc[i].bit.LB = 1;
    a7bc:	f047 0780 	orr.w	r7, r7, #128	; 0x80
            m_txDesc[i].bit.OWN = 1;
    a7c0:	f046 0680 	orr.w	r6, r6, #128	; 0x80
            m_txDesc[i].bit.LB = 1;
    a7c4:	f045 0580 	orr.w	r5, r5, #128	; 0x80
    a7c8:	f880 311d 	strb.w	r3, [r0, #285]	; 0x11d
            m_txDesc[i].bit.OWN = 1;
    a7cc:	f880 80ef 	strb.w	r8, [r0, #239]	; 0xef
            m_txDesc[i].bit.LB = 1;
    a7d0:	f880 c0ed 	strb.w	ip, [r0, #237]	; 0xed
            m_txDesc[i].bit.OWN = 1;
    a7d4:	f880 e10f 	strb.w	lr, [r0, #271]	; 0x10f
            m_txDesc[i].bit.LB = 1;
    a7d8:	f880 710d 	strb.w	r7, [r0, #269]	; 0x10d
            m_txDesc[i].bit.OWN = 1;
    a7dc:	f880 6117 	strb.w	r6, [r0, #279]	; 0x117
            m_txDesc[i].bit.LB = 1;
    a7e0:	f880 5115 	strb.w	r5, [r0, #277]	; 0x115
            m_txDesc[i].bit.OWN = 1;
    a7e4:	f880 211f 	strb.w	r2, [r0, #287]	; 0x11f
    a7e8:	f890 2127 	ldrb.w	r2, [r0, #295]	; 0x127
            m_txDesc[i].bit.LB = 1;
    a7ec:	f890 3125 	ldrb.w	r3, [r0, #293]	; 0x125
        m_txBuffIndex = 0;
    a7f0:	f8a0 4064 	strh.w	r4, [r0, #100]	; 0x64
            m_txDesc[i].bit.OWN = 1;
    a7f4:	f042 0280 	orr.w	r2, r2, #128	; 0x80
            m_txDesc[i].bit.LB = 1;
    a7f8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
            m_txDesc[i].bit.OWN = 1;
    a7fc:	f880 2127 	strb.w	r2, [r0, #295]	; 0x127
            m_txDesc[i].bit.LB = 1;
    a800:	f880 3125 	strb.w	r3, [r0, #293]	; 0x125
    a804:	e6d3      	b.n	a5ae <_ZN9ClearCore15EthernetManager13IrqHandlerPhyEv+0x32>
    a806:	bf00      	nop
    a808:	40002800 	.word	0x40002800
    a80c:	42000800 	.word	0x42000800
    a810:	606e0000 	.word	0x606e0000
    a814:	607a0000 	.word	0x607a0000
    GMAC->NCR.bit.TXEN = enable ? 1 : 0;
    a818:	681a      	ldr	r2, [r3, #0]
    a81a:	f36f 02c3 	bfc	r2, #3, #1
    a81e:	601a      	str	r2, [r3, #0]
    GMAC->NCR.bit.RXEN = enable ? 1 : 0;
    a820:	681a      	ldr	r2, [r3, #0]
    a822:	f36f 0282 	bfc	r2, #2, #1
    a826:	601a      	str	r2, [r3, #0]
            m_txDesc[i].bit.OWN = 1;
    a828:	f890 40f7 	ldrb.w	r4, [r0, #247]	; 0xf7
            m_txDesc[i].bit.LB = 1;
    a82c:	f890 10f5 	ldrb.w	r1, [r0, #245]	; 0xf5
            m_txDesc[i].bit.OWN = 1;
    a830:	f890 20ff 	ldrb.w	r2, [r0, #255]	; 0xff
            m_txDesc[i].bit.LB = 1;
    a834:	f890 30fd 	ldrb.w	r3, [r0, #253]	; 0xfd
            m_txDesc[i].bit.OWN = 1;
    a838:	f890 80ef 	ldrb.w	r8, [r0, #239]	; 0xef
            m_txDesc[i].bit.LB = 1;
    a83c:	f890 c0ed 	ldrb.w	ip, [r0, #237]	; 0xed
            m_txDesc[i].bit.OWN = 1;
    a840:	f890 e107 	ldrb.w	lr, [r0, #263]	; 0x107
            m_txDesc[i].bit.LB = 1;
    a844:	f890 7105 	ldrb.w	r7, [r0, #261]	; 0x105
            m_txDesc[i].bit.OWN = 1;
    a848:	f890 610f 	ldrb.w	r6, [r0, #271]	; 0x10f
            m_txDesc[i].bit.LB = 1;
    a84c:	f890 510d 	ldrb.w	r5, [r0, #269]	; 0x10d
            m_txDesc[i].bit.OWN = 1;
    a850:	f044 0480 	orr.w	r4, r4, #128	; 0x80
            m_txDesc[i].bit.LB = 1;
    a854:	f041 0180 	orr.w	r1, r1, #128	; 0x80
            m_txDesc[i].bit.OWN = 1;
    a858:	f042 0280 	orr.w	r2, r2, #128	; 0x80
            m_txDesc[i].bit.LB = 1;
    a85c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
            m_txDesc[i].bit.OWN = 1;
    a860:	f880 40f7 	strb.w	r4, [r0, #247]	; 0xf7
            m_txDesc[i].bit.LB = 1;
    a864:	f880 10f5 	strb.w	r1, [r0, #245]	; 0xf5
            m_txDesc[i].bit.OWN = 1;
    a868:	f890 4117 	ldrb.w	r4, [r0, #279]	; 0x117
            m_txDesc[i].bit.LB = 1;
    a86c:	f890 1115 	ldrb.w	r1, [r0, #277]	; 0x115
            m_txDesc[i].bit.OWN = 1;
    a870:	f880 20ff 	strb.w	r2, [r0, #255]	; 0xff
            m_txDesc[i].bit.LB = 1;
    a874:	f880 30fd 	strb.w	r3, [r0, #253]	; 0xfd
            m_txDesc[i].bit.OWN = 1;
    a878:	f890 211f 	ldrb.w	r2, [r0, #287]	; 0x11f
            m_txDesc[i].bit.LB = 1;
    a87c:	f890 311d 	ldrb.w	r3, [r0, #285]	; 0x11d
    a880:	f041 0180 	orr.w	r1, r1, #128	; 0x80
            m_txDesc[i].bit.OWN = 1;
    a884:	f042 0280 	orr.w	r2, r2, #128	; 0x80
            m_txDesc[i].bit.LB = 1;
    a888:	f043 0380 	orr.w	r3, r3, #128	; 0x80
            m_txDesc[i].bit.OWN = 1;
    a88c:	f048 0880 	orr.w	r8, r8, #128	; 0x80
            m_txDesc[i].bit.LB = 1;
    a890:	f04c 0c80 	orr.w	ip, ip, #128	; 0x80
            m_txDesc[i].bit.OWN = 1;
    a894:	f04e 0e80 	orr.w	lr, lr, #128	; 0x80
            m_txDesc[i].bit.LB = 1;
    a898:	f047 0780 	orr.w	r7, r7, #128	; 0x80
            m_txDesc[i].bit.OWN = 1;
    a89c:	f046 0680 	orr.w	r6, r6, #128	; 0x80
            m_txDesc[i].bit.LB = 1;
    a8a0:	f045 0580 	orr.w	r5, r5, #128	; 0x80
            m_txDesc[i].bit.OWN = 1;
    a8a4:	f044 0480 	orr.w	r4, r4, #128	; 0x80
            m_txDesc[i].bit.LB = 1;
    a8a8:	f880 1115 	strb.w	r1, [r0, #277]	; 0x115
    a8ac:	f880 311d 	strb.w	r3, [r0, #285]	; 0x11d
            m_txDesc[i].bit.OWN = 1;
    a8b0:	f880 80ef 	strb.w	r8, [r0, #239]	; 0xef
            m_txDesc[i].bit.LB = 1;
    a8b4:	f880 c0ed 	strb.w	ip, [r0, #237]	; 0xed
            m_txDesc[i].bit.OWN = 1;
    a8b8:	f880 e107 	strb.w	lr, [r0, #263]	; 0x107
            m_txDesc[i].bit.LB = 1;
    a8bc:	f880 7105 	strb.w	r7, [r0, #261]	; 0x105
            m_txDesc[i].bit.OWN = 1;
    a8c0:	f880 610f 	strb.w	r6, [r0, #271]	; 0x10f
            m_txDesc[i].bit.LB = 1;
    a8c4:	f880 510d 	strb.w	r5, [r0, #269]	; 0x10d
            m_txDesc[i].bit.OWN = 1;
    a8c8:	f880 4117 	strb.w	r4, [r0, #279]	; 0x117
    a8cc:	f880 211f 	strb.w	r2, [r0, #287]	; 0x11f
    a8d0:	f890 2127 	ldrb.w	r2, [r0, #295]	; 0x127
            m_txDesc[i].bit.LB = 1;
    a8d4:	f890 3125 	ldrb.w	r3, [r0, #293]	; 0x125
            m_txDesc[i].bit.OWN = 1;
    a8d8:	f042 0280 	orr.w	r2, r2, #128	; 0x80
            m_txDesc[i].bit.LB = 1;
    a8dc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
        m_txBuffIndex = 0;
    a8e0:	2100      	movs	r1, #0
            m_txDesc[i].bit.OWN = 1;
    a8e2:	f880 2127 	strb.w	r2, [r0, #295]	; 0x127
            m_txDesc[i].bit.LB = 1;
    a8e6:	f880 3125 	strb.w	r3, [r0, #293]	; 0x125
        m_txBuffIndex = 0;
    a8ea:	f8a0 1064 	strh.w	r1, [r0, #100]	; 0x64
    a8ee:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    a8f2:	bf00      	nop

0000a8f4 <_ZN9ClearCore15EthernetManager14IrqHandlerGmacEv>:
    tsr = GMAC->TSR.reg;    // Transmit status register
    a8f4:	4b0b      	ldr	r3, [pc, #44]	; (a924 <_ZN9ClearCore15EthernetManager14IrqHandlerGmacEv+0x30>)
void EthernetManager::IrqHandlerGmac() {
    a8f6:	b082      	sub	sp, #8
    tsr = GMAC->TSR.reg;    // Transmit status register
    a8f8:	695a      	ldr	r2, [r3, #20]
    a8fa:	9200      	str	r2, [sp, #0]
    rsr = GMAC->RSR.reg;    // Receive  status register
    a8fc:	6a1a      	ldr	r2, [r3, #32]
    a8fe:	9201      	str	r2, [sp, #4]
    GMAC->ISR.reg;
    a900:	6a5a      	ldr	r2, [r3, #36]	; 0x24
    if (tsr & GMAC_TSR_TXCOMP) {
    a902:	9a00      	ldr	r2, [sp, #0]
    a904:	0692      	lsls	r2, r2, #26
        GMAC->TSR.reg = tsr;
    a906:	bf44      	itt	mi
    a908:	9a00      	ldrmi	r2, [sp, #0]
    a90a:	615a      	strmi	r2, [r3, #20]
    if (rsr & GMAC_RSR_REC) {
    a90c:	9b01      	ldr	r3, [sp, #4]
    GMAC->RSR.reg = rsr;
    a90e:	9a01      	ldr	r2, [sp, #4]
    if (rsr & GMAC_RSR_REC) {
    a910:	079b      	lsls	r3, r3, #30
        m_recv = true;
    a912:	bf44      	itt	mi
    a914:	2301      	movmi	r3, #1
    a916:	f880 305f 	strbmi.w	r3, [r0, #95]	; 0x5f
    GMAC->RSR.reg = rsr;
    a91a:	4b02      	ldr	r3, [pc, #8]	; (a924 <_ZN9ClearCore15EthernetManager14IrqHandlerGmacEv+0x30>)
    a91c:	621a      	str	r2, [r3, #32]
}
    a91e:	b002      	add	sp, #8
    a920:	4770      	bx	lr
    a922:	bf00      	nop
    a924:	42000800 	.word	0x42000800

0000a928 <_GLOBAL__sub_I__Z12PacketLengthP6ethInt>:
        ethernetif_input(&m_macInterface, packet);
    }
    sys_check_timeouts();
}

    a928:	b508      	push	{r3, lr}
EthernetManager &EthernetMgr = EthernetManager::Instance();
    a92a:	f7ff fa6f 	bl	9e0c <_ZN9ClearCore15EthernetManager8InstanceEv>
    a92e:	4b01      	ldr	r3, [pc, #4]	; (a934 <_GLOBAL__sub_I__Z12PacketLengthP6ethInt+0xc>)
    a930:	6018      	str	r0, [r3, #0]
    a932:	bd08      	pop	{r3, pc}
    a934:	20001bf8 	.word	0x20001bf8

0000a938 <_ZN9ClearCore13ShiftRegisterC1Ev>:
namespace ClearCore {

/**
    Constructs and adjusts inversions for hardware constraints
**/
ShiftRegister::ShiftRegister() :
    a938:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    m_initialized(false),
    m_blinkCodeActive(false),
    m_blinkCodeState(false),
    m_useAltOutput(false),
    m_pendingOutput(0),
    m_lastOutput(0) {
    a93a:	4f46      	ldr	r7, [pc, #280]	; (aa54 <_ZN9ClearCore13ShiftRegisterC1Ev+0x11c>)
    a93c:	f8df e118 	ldr.w	lr, [pc, #280]	; aa58 <_ZN9ClearCore13ShiftRegisterC1Ev+0x120>
    a940:	463e      	mov	r6, r7
ShiftRegister::ShiftRegister() :
    a942:	4604      	mov	r4, r0
    m_lastOutput(0) {
    a944:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
    a946:	4625      	mov	r5, r4
    a948:	c50f      	stmia	r5!, {r0, r1, r2, r3}
    a94a:	e896 0003 	ldmia.w	r6, {r0, r1}
    a94e:	f107 0618 	add.w	r6, r7, #24
    a952:	e885 0003 	stmia.w	r5, {r0, r1}
    a956:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
    a958:	f104 0518 	add.w	r5, r4, #24
    a95c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
    a95e:	e896 0007 	ldmia.w	r6, {r0, r1, r2}
    a962:	f107 0334 	add.w	r3, r7, #52	; 0x34
    a966:	e885 0007 	stmia.w	r5, {r0, r1, r2}
    a96a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
    a96c:	f104 0534 	add.w	r5, r4, #52	; 0x34
    a970:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
              fadingIn(true) {}
    a974:	2608      	movs	r6, #8
    a976:	257f      	movs	r5, #127	; 0x7f
    a978:	23c8      	movs	r3, #200	; 0xc8
    a97a:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
    a97e:	f884 5064 	strb.w	r5, [r4, #100]	; 0x64
    a982:	f884 6065 	strb.w	r6, [r4, #101]	; 0x65
              count(0) {}
    a986:	2500      	movs	r5, #0
    a988:	f04f 36ff 	mov.w	r6, #4294967295
              fadingIn(true) {}
    a98c:	2001      	movs	r0, #1
              m_analogMasks{SR_NO_FEEDBACK_MASK} {}
    a98e:	21fe      	movs	r1, #254	; 0xfe
    a990:	f8c4 e044 	str.w	lr, [r4, #68]	; 0x44
              fadingIn(true) {}
    a994:	f884 0068 	strb.w	r0, [r4, #104]	; 0x68
              m_analogMasks{SR_NO_FEEDBACK_MASK} {}
    a998:	f884 107c 	strb.w	r1, [r4, #124]	; 0x7c
    a99c:	64a2      	str	r2, [r4, #72]	; 0x48
              count(0) {}
    a99e:	6522      	str	r2, [r4, #80]	; 0x50
              m_analogMasks{SR_NO_FEEDBACK_MASK} {}
    a9a0:	4629      	mov	r1, r5
    a9a2:	64e3      	str	r3, [r4, #76]	; 0x4c
              count(0) {}
    a9a4:	6563      	str	r3, [r4, #84]	; 0x54
    a9a6:	65a5      	str	r5, [r4, #88]	; 0x58
    a9a8:	65e5      	str	r5, [r4, #92]	; 0x5c
              fadingIn(true) {}
    a9aa:	f884 5066 	strb.w	r5, [r4, #102]	; 0x66
    a9ae:	f884 5067 	strb.w	r5, [r4, #103]	; 0x67
    a9b2:	66e5      	str	r5, [r4, #108]	; 0x6c
              m_analogMasks{SR_NO_FEEDBACK_MASK} {}
    a9b4:	f8a4 5074 	strh.w	r5, [r4, #116]	; 0x74
    a9b8:	67a5      	str	r5, [r4, #120]	; 0x78
    a9ba:	f8c4 507d 	str.w	r5, [r4, #125]	; 0x7d
              count(0) {}
    a9be:	6626      	str	r6, [r4, #96]	; 0x60
              fadingIn(true) {}
    a9c0:	6726      	str	r6, [r4, #112]	; 0x70
              m_analogMasks{SR_NO_FEEDBACK_MASK} {}
    a9c2:	f8c4 5081 	str.w	r5, [r4, #129]	; 0x81
    a9c6:	f8c4 5085 	str.w	r5, [r4, #133]	; 0x85
    a9ca:	f8c4 5089 	str.w	r5, [r4, #137]	; 0x89
    a9ce:	f104 00a0 	add.w	r0, r4, #160	; 0xa0
    a9d2:	f8c4 508d 	str.w	r5, [r4, #141]	; 0x8d
    a9d6:	2240      	movs	r2, #64	; 0x40
    a9d8:	f8c4 5091 	str.w	r5, [r4, #145]	; 0x91
    a9dc:	f8c4 5095 	str.w	r5, [r4, #149]	; 0x95
    a9e0:	f8c4 5099 	str.w	r5, [r4, #153]	; 0x99
    a9e4:	f013 fd0a 	bl	1e3fc <memset>
    m_shiftInversions.reg = 0xffffffff;
    m_shiftInversions.bit.LED_USB = 0;
    m_shiftInversions.bit.LED_IO_4 = 0;
    m_shiftInversions.bit.LED_IO_5 = 0;
    m_shiftInversions.bit.LED_COM_0 = 0;
    m_shiftInversions.bit.LED_COM_1 = 0;
    a9e8:	f06f 0704 	mvn.w	r7, #4
    m_shiftInversions.bit.LED_IO_5 = 0;
    a9ec:	f006 0ef7 	and.w	lr, r6, #247	; 0xf7
    m_shiftInversions.bit.EN_OUT_0 = 0;
    m_shiftInversions.bit.EN_OUT_1 = 0;
    m_shiftInversions.bit.EN_OUT_2 = 0;
    m_shiftInversions.bit.EN_OUT_3 = 0;
    m_shiftInversions.bit.UART_TTL_0 = 0;
    m_shiftInversions.bit.UART_TTL_1 = 0;
    a9f0:	f04f 0110 	mov.w	r1, #16
    m_shiftInversions.bit.LED_IO_5 = 0;
    a9f4:	f365 0e82 	bfi	lr, r5, #2, #1
    m_shiftInversions.bit.LED_COM_1 = 0;
    a9f8:	f365 07c3 	bfi	r7, r5, #3, #1
    m_shiftInversions.bit.UART_TTL_1 = 0;
    a9fc:	f365 1104 	bfi	r1, r5, #4, #1
    m_shiftInversions.reg = 0xffffffff;
    aa00:	f8c4 60e0 	str.w	r6, [r4, #224]	; 0xe0
    m_lastOutput(0) {
    aa04:	f44f 4c80 	mov.w	ip, #16384	; 0x4000
    m_shiftInversions.bit.LED_IO_5 = 0;
    aa08:	f884 e0e0 	strb.w	lr, [r4, #224]	; 0xe0
    m_shiftInversions.bit.LED_COM_1 = 0;
    aa0c:	f884 70e2 	strb.w	r7, [r4, #226]	; 0xe2
    m_shiftInversions.bit.UART_TTL_1 = 0;
    aa10:	f884 10e1 	strb.w	r1, [r4, #225]	; 0xe1
    m_lastOutput(0) {
    aa14:	f8c4 50e8 	str.w	r5, [r4, #232]	; 0xe8
    aa18:	f8c4 50ec 	str.w	r5, [r4, #236]	; 0xec
    aa1c:	f8c4 50f0 	str.w	r5, [r4, #240]	; 0xf0
    aa20:	f8c4 60e4 	str.w	r6, [r4, #228]	; 0xe4
    aa24:	f8c4 50f8 	str.w	r5, [r4, #248]	; 0xf8
    aa28:	f8c4 50fc 	str.w	r5, [r4, #252]	; 0xfc
    aa2c:	f8c4 5100 	str.w	r5, [r4, #256]	; 0x100
}
    aa30:	4620      	mov	r0, r4
    m_lastOutput(0) {
    aa32:	f8c4 5104 	str.w	r5, [r4, #260]	; 0x104
    aa36:	f884 5108 	strb.w	r5, [r4, #264]	; 0x108
    aa3a:	f884 5109 	strb.w	r5, [r4, #265]	; 0x109
    aa3e:	f884 510a 	strb.w	r5, [r4, #266]	; 0x10a
    aa42:	f884 510b 	strb.w	r5, [r4, #267]	; 0x10b
    aa46:	f8c4 510c 	str.w	r5, [r4, #268]	; 0x10c
    aa4a:	f8c4 5110 	str.w	r5, [r4, #272]	; 0x110
    aa4e:	f8c4 c0f4 	str.w	ip, [r4, #244]	; 0xf4
}
    aa52:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    aa54:	00023140 	.word	0x00023140
    aa58:	0fe080fc 	.word	0x0fe080fc

0000aa5c <_ZN9ClearCore13ShiftRegister10InitializeEv>:

/**
    Turn on the shifter and setup the mode for SPI
**/
void ShiftRegister::Initialize() {
    aa5c:	b4f0      	push	{r4, r5, r6, r7}
    SET_CLOCK_SOURCE(SERCOM6_GCLK_ID_CORE, 5);
    aa5e:	4a64      	ldr	r2, [pc, #400]	; (abf0 <_ZN9ClearCore13ShiftRegister10InitializeEv+0x194>)
    aa60:	f8d2 3110 	ldr.w	r3, [r2, #272]	; 0x110
    aa64:	f36f 1386 	bfc	r3, #6, #1
    aa68:	f8c2 3110 	str.w	r3, [r2, #272]	; 0x110
    aa6c:	f8d2 3110 	ldr.w	r3, [r2, #272]	; 0x110
    aa70:	065d      	lsls	r5, r3, #25
    aa72:	d4fb      	bmi.n	aa6c <_ZN9ClearCore13ShiftRegister10InitializeEv+0x10>
    aa74:	f8d2 3110 	ldr.w	r3, [r2, #272]	; 0x110
    aa78:	495d      	ldr	r1, [pc, #372]	; (abf0 <_ZN9ClearCore13ShiftRegister10InitializeEv+0x194>)
    aa7a:	2405      	movs	r4, #5
    aa7c:	f364 0303 	bfi	r3, r4, #0, #4
    aa80:	f8c2 3110 	str.w	r3, [r2, #272]	; 0x110
    aa84:	f8d2 3110 	ldr.w	r3, [r2, #272]	; 0x110
    aa88:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    aa8c:	f8c2 3110 	str.w	r3, [r2, #272]	; 0x110
    aa90:	684b      	ldr	r3, [r1, #4]
    aa92:	f013 0314 	ands.w	r3, r3, #20
    aa96:	d1fb      	bne.n	aa90 <_ZN9ClearCore13ShiftRegister10InitializeEv+0x34>
    CLOCK_ENABLE(APBDMASK, SERCOM6_);
    aa98:	4d56      	ldr	r5, [pc, #344]	; (abf4 <_ZN9ClearCore13ShiftRegister10InitializeEv+0x198>)

    // Set up pins for SERCOM6 in SPI master mode and enable it to control them
    PMUX_SELECTION(SR_CLK.gpioPort, SR_CLK.gpioPin, PER_SERCOM);
    aa9a:	4957      	ldr	r1, [pc, #348]	; (abf8 <_ZN9ClearCore13ShiftRegister10InitializeEv+0x19c>)
    CLOCK_ENABLE(APBDMASK, SERCOM6_);
    aa9c:	6a2c      	ldr	r4, [r5, #32]

    // A pointer to the SPI register to make things easier.
    SercomSpi *sercomSpi = &SERCOM6->SPI;

    // Disable SERCOM6 to switch its role
    sercomSpi->CTRLA.bit.ENABLE = 0;
    aa9e:	4a57      	ldr	r2, [pc, #348]	; (abfc <_ZN9ClearCore13ShiftRegister10InitializeEv+0x1a0>)
    CLOCK_ENABLE(APBDMASK, SERCOM6_);
    aaa0:	f044 0404 	orr.w	r4, r4, #4
    aaa4:	622c      	str	r4, [r5, #32]
    PMUX_SELECTION(SR_CLK.gpioPort, SR_CLK.gpioPin, PER_SERCOM);
    aaa6:	f891 5132 	ldrb.w	r5, [r1, #306]	; 0x132
    aaaa:	2402      	movs	r4, #2
    aaac:	f364 1507 	bfi	r5, r4, #4, #4
    aab0:	f881 5132 	strb.w	r5, [r1, #306]	; 0x132
    PMUX_ENABLE(SR_CLK.gpioPort, SR_CLK.gpioPin);
    aab4:	f891 5145 	ldrb.w	r5, [r1, #325]	; 0x145
    aab8:	f045 0501 	orr.w	r5, r5, #1
    aabc:	f881 5145 	strb.w	r5, [r1, #325]	; 0x145
    PMUX_SELECTION(SR_DATA.gpioPort, SR_DATA.gpioPin, PER_SERCOM);
    aac0:	f891 5133 	ldrb.w	r5, [r1, #307]	; 0x133
    aac4:	f364 1507 	bfi	r5, r4, #4, #4
    aac8:	f881 5133 	strb.w	r5, [r1, #307]	; 0x133
    PMUX_ENABLE(SR_DATA.gpioPort, SR_DATA.gpioPin);
    aacc:	f891 5147 	ldrb.w	r5, [r1, #327]	; 0x147
    aad0:	f045 0501 	orr.w	r5, r5, #1
    aad4:	f881 5147 	strb.w	r5, [r1, #327]	; 0x147
    PMUX_SELECTION(SR_DATA_RET.gpioPort, SR_DATA_RET.gpioPin, PER_SERCOM);
    aad8:	f891 5133 	ldrb.w	r5, [r1, #307]	; 0x133
    aadc:	f364 0503 	bfi	r5, r4, #0, #4
    aae0:	f881 5133 	strb.w	r5, [r1, #307]	; 0x133
    PMUX_ENABLE(SR_DATA_RET.gpioPort, SR_DATA_RET.gpioPin);
    aae4:	f891 5146 	ldrb.w	r5, [r1, #326]	; 0x146
    DATA_OUTPUT_STATE(SR_LOAD.gpioPort, 1UL << SR_LOAD.gpioPin, false);
    aae8:	2604      	movs	r6, #4
    PMUX_ENABLE(SR_DATA_RET.gpioPort, SR_DATA_RET.gpioPin);
    aaea:	f045 0501 	orr.w	r5, r5, #1
    aaee:	f881 5146 	strb.w	r5, [r1, #326]	; 0x146
    DATA_OUTPUT_STATE(SR_ENn.gpioPort, 1UL << SR_ENn.gpioPin, true);
    aaf2:	f8c1 4098 	str.w	r4, [r1, #152]	; 0x98
    DATA_OUTPUT_STATE(SR_LOAD.gpioPort, 1UL << SR_LOAD.gpioPin, false);
    aaf6:	f8c1 6094 	str.w	r6, [r1, #148]	; 0x94
    DATA_DIRECTION_OUTPUT(SR_ENn.gpioPort, (1UL << SR_ENn.gpioPin));
    aafa:	f8c1 4088 	str.w	r4, [r1, #136]	; 0x88
    DATA_DIRECTION_OUTPUT(SR_LOAD.gpioPort, (1UL << SR_LOAD.gpioPin));
    aafe:	f8c1 6088 	str.w	r6, [r1, #136]	; 0x88
    sercomSpi->CTRLA.bit.ENABLE = 0;
    ab02:	6811      	ldr	r1, [r2, #0]
    ab04:	f363 0141 	bfi	r1, r3, #1, #1
    ab08:	6011      	str	r1, [r2, #0]
    SYNCBUSY_WAIT(sercomSpi, SERCOM_SPI_SYNCBUSY_ENABLE);
    ab0a:	69d3      	ldr	r3, [r2, #28]
    ab0c:	f013 0302 	ands.w	r3, r3, #2
    ab10:	d1fb      	bne.n	ab0a <_ZN9ClearCore13ShiftRegister10InitializeEv+0xae>

    // Sets SERCOM6 to SPI Master mode
    sercomSpi->CTRLA.reg |= SERCOM_SPI_CTRLA_MODE(0x3);
    ab12:	6814      	ldr	r4, [r2, #0]
    // Sets the baud rate to GCLK1 frequency
    sercomSpi->BAUD.reg = 0;

    // Enables SERCOM6 and wait for core sync
    sercomSpi->CTRLA.bit.ENABLE = 1;
    SYNCBUSY_WAIT(sercomSpi, SERCOM_SPI_SYNCBUSY_ENABLE);
    ab14:	4939      	ldr	r1, [pc, #228]	; (abfc <_ZN9ClearCore13ShiftRegister10InitializeEv+0x1a0>)
    sercomSpi->CTRLA.reg |= SERCOM_SPI_CTRLA_MODE(0x3);
    ab16:	f044 040c 	orr.w	r4, r4, #12
    ab1a:	6014      	str	r4, [r2, #0]
                            SERCOM_SPI_CTRLA_DORD;
    ab1c:	6814      	ldr	r4, [r2, #0]
    ab1e:	f044 4480 	orr.w	r4, r4, #1073741824	; 0x40000000
    ab22:	f444 1408 	orr.w	r4, r4, #2228224	; 0x220000
    sercomSpi->CTRLA.reg |= SERCOM_SPI_CTRLA_DOPO(0x2) |
    ab26:	6014      	str	r4, [r2, #0]
    sercomSpi->CTRLB.bit.RXEN = 1;
    ab28:	6854      	ldr	r4, [r2, #4]
    ab2a:	f444 3400 	orr.w	r4, r4, #131072	; 0x20000
    ab2e:	6054      	str	r4, [r2, #4]
    sercomSpi->CTRLC.reg |= SERCOM_SPI_CTRLC_DATA32B;
    ab30:	6894      	ldr	r4, [r2, #8]
    ab32:	f044 7480 	orr.w	r4, r4, #16777216	; 0x1000000
    ab36:	6094      	str	r4, [r2, #8]
    sercomSpi->BAUD.reg = 0;
    ab38:	7313      	strb	r3, [r2, #12]
    sercomSpi->CTRLA.bit.ENABLE = 1;
    ab3a:	6813      	ldr	r3, [r2, #0]
    ab3c:	f043 0302 	orr.w	r3, r3, #2
    ab40:	6013      	str	r3, [r2, #0]
    SYNCBUSY_WAIT(sercomSpi, SERCOM_SPI_SYNCBUSY_ENABLE);
    ab42:	69cb      	ldr	r3, [r1, #28]
    ab44:	079c      	lsls	r4, r3, #30
    ab46:	d4fc      	bmi.n	ab42 <_ZN9ClearCore13ShiftRegister10InitializeEv+0xe6>

    // Send the initial values to the chain
    sercomSpi->DATA.reg = atomic_load_n(&m_patternOutputs[LED_BLINK_IO_SET])
    ab48:	f8d0 30f4 	ldr.w	r3, [r0, #244]	; 0xf4
    ab4c:	f3bf 8f5b 	dmb	ish
                          ^ m_shiftInversions.reg;
    ab50:	f8d0 40e0 	ldr.w	r4, [r0, #224]	; 0xe0
    Send();
}

void ShiftRegister::Send() {
    // Wait for TX-complete interrupt flag in case we get here too quickly
    while (!(SERCOM6->SPI.INTFLAG.bit.TXC)) {
    ab54:	4a29      	ldr	r2, [pc, #164]	; (abfc <_ZN9ClearCore13ShiftRegister10InitializeEv+0x1a0>)
                          ^ m_shiftInversions.reg;
    ab56:	4063      	eors	r3, r4
    sercomSpi->DATA.reg = atomic_load_n(&m_patternOutputs[LED_BLINK_IO_SET])
    ab58:	628b      	str	r3, [r1, #40]	; 0x28
    while (!(SERCOM6->SPI.INTFLAG.bit.TXC)) {
    ab5a:	7e13      	ldrb	r3, [r2, #24]
    ab5c:	0799      	lsls	r1, r3, #30
    ab5e:	d5fc      	bpl.n	ab5a <_ZN9ClearCore13ShiftRegister10InitializeEv+0xfe>
        continue;
    }
    uint32_t output;

    // Strobe the output with minimum pulse width to display last transfer
    DATA_OUTPUT_STATE(SR_LOAD.gpioPort, 1UL << SR_LOAD.gpioPin, true);
    ab60:	4b25      	ldr	r3, [pc, #148]	; (abf8 <_ZN9ClearCore13ShiftRegister10InitializeEv+0x19c>)
    DATA_OUTPUT_STATE(SR_LOAD.gpioPort, 1UL << SR_LOAD.gpioPin, false);
    while (!(SERCOM6->SPI.INTFLAG.bit.RXC)) {
    ab62:	4a26      	ldr	r2, [pc, #152]	; (abfc <_ZN9ClearCore13ShiftRegister10InitializeEv+0x1a0>)
    DATA_OUTPUT_STATE(SR_LOAD.gpioPort, 1UL << SR_LOAD.gpioPin, true);
    ab64:	2104      	movs	r1, #4
    ab66:	f8c3 1098 	str.w	r1, [r3, #152]	; 0x98
    DATA_OUTPUT_STATE(SR_LOAD.gpioPort, 1UL << SR_LOAD.gpioPin, false);
    ab6a:	f8c3 1094 	str.w	r1, [r3, #148]	; 0x94
    while (!(SERCOM6->SPI.INTFLAG.bit.RXC)) {
    ab6e:	7e13      	ldrb	r3, [r2, #24]
    ab70:	075b      	lsls	r3, r3, #29
    ab72:	d5fc      	bpl.n	ab6e <_ZN9ClearCore13ShiftRegister10InitializeEv+0x112>
        continue;
    }
    m_latchedOutput = SERCOM6->SPI.DATA.reg ^ m_shiftInversions.reg;
    ab74:	6a93      	ldr	r3, [r2, #40]	; 0x28
    m_lastOutput = m_pendingOutput;

    if (m_useAltOutput) {
    ab76:	f890 210b 	ldrb.w	r2, [r0, #267]	; 0x10b
    m_lastOutput = m_pendingOutput;
    ab7a:	f8d0 110c 	ldr.w	r1, [r0, #268]	; 0x10c
    ab7e:	f8c0 1110 	str.w	r1, [r0, #272]	; 0x110
    m_latchedOutput = SERCOM6->SPI.DATA.reg ^ m_shiftInversions.reg;
    ab82:	4063      	eors	r3, r4
    ab84:	f8c0 3114 	str.w	r3, [r0, #276]	; 0x114
    if (m_useAltOutput) {
    ab88:	bb7a      	cbnz	r2, abea <_ZN9ClearCore13ShiftRegister10InitializeEv+0x18e>
        output = m_altOutput;
    }
    else {
        // Start the output with the low priority mask
        output = m_patternOutputs[LED_BLINK_IO_SET];
    ab8a:	f8d0 30f4 	ldr.w	r3, [r0, #244]	; 0xf4
    ab8e:	f8d0 10f8 	ldr.w	r1, [r0, #248]	; 0xf8
    ab92:	f8d0 70e8 	ldr.w	r7, [r0, #232]	; 0xe8
    ab96:	f8d0 50fc 	ldr.w	r5, [r0, #252]	; 0xfc
    ab9a:	f8d0 60ec 	ldr.w	r6, [r0, #236]	; 0xec
    ab9e:	f8d0 2100 	ldr.w	r2, [r0, #256]	; 0x100
    aba2:	4059      	eors	r1, r3
    aba4:	4039      	ands	r1, r7
        for (uint32_t i = LED_BLINK_IO_SET + 1; i < LED_BLINK_CODE_MAX; i++) {
            // AND in the inverse of the mask to clear out the lower priority
            // patterns.
            output &= ~m_patternMasks[i];
            // Set the output bits to the output of the pattern output.
            output |= m_patternOutputs[i] & m_patternMasks[i];
    aba6:	404b      	eors	r3, r1
    aba8:	ea83 0105 	eor.w	r1, r3, r5
    abac:	4031      	ands	r1, r6
    abae:	4059      	eors	r1, r3
    abb0:	f8d0 30f0 	ldr.w	r3, [r0, #240]	; 0xf0
        }

        if (m_blinkCodeActive) {
    abb4:	f890 5109 	ldrb.w	r5, [r0, #265]	; 0x109
    abb8:	404a      	eors	r2, r1
    abba:	4013      	ands	r3, r2
            output |= m_patternOutputs[i] & m_patternMasks[i];
    abbc:	404b      	eors	r3, r1
        if (m_blinkCodeActive) {
    abbe:	b135      	cbz	r5, abce <_ZN9ClearCore13ShiftRegister10InitializeEv+0x172>
            output &= ~SR_UNDERGLOW_MASK;
            if (m_blinkCodeState) {
    abc0:	f890 210a 	ldrb.w	r2, [r0, #266]	; 0x10a
            output &= ~SR_UNDERGLOW_MASK;
    abc4:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
            if (m_blinkCodeState) {
    abc8:	b10a      	cbz	r2, abce <_ZN9ClearCore13ShiftRegister10InitializeEv+0x172>
                output |= SR_UNDERGLOW_MASK;
    abca:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
    m_pendingOutput = output;

    // Apply inversion
    output ^= m_shiftInversions.reg;

    SERCOM6->SPI.DATA.reg = output;
    abce:	4d0b      	ldr	r5, [pc, #44]	; (abfc <_ZN9ClearCore13ShiftRegister10InitializeEv+0x1a0>)
    DATA_OUTPUT_STATE(SR_ENn.gpioPort, 1UL << SR_ENn.gpioPin, false);
    abd0:	4909      	ldr	r1, [pc, #36]	; (abf8 <_ZN9ClearCore13ShiftRegister10InitializeEv+0x19c>)
    m_pendingOutput = output;
    abd2:	f8c0 310c 	str.w	r3, [r0, #268]	; 0x10c
    output ^= m_shiftInversions.reg;
    abd6:	4063      	eors	r3, r4
    DATA_OUTPUT_STATE(SR_ENn.gpioPort, 1UL << SR_ENn.gpioPin, false);
    abd8:	2402      	movs	r4, #2
    SERCOM6->SPI.DATA.reg = output;
    abda:	62ab      	str	r3, [r5, #40]	; 0x28
    m_initialized = true;
    abdc:	2201      	movs	r2, #1
    DATA_OUTPUT_STATE(SR_ENn.gpioPort, 1UL << SR_ENn.gpioPin, false);
    abde:	f8c1 4094 	str.w	r4, [r1, #148]	; 0x94
}
    abe2:	bcf0      	pop	{r4, r5, r6, r7}
    m_initialized = true;
    abe4:	f880 2108 	strb.w	r2, [r0, #264]	; 0x108
}
    abe8:	4770      	bx	lr
        output = m_altOutput;
    abea:	f8d0 3104 	ldr.w	r3, [r0, #260]	; 0x104
    abee:	e7ee      	b.n	abce <_ZN9ClearCore13ShiftRegister10InitializeEv+0x172>
    abf0:	40001c00 	.word	0x40001c00
    abf4:	40000800 	.word	0x40000800
    abf8:	41008000 	.word	0x41008000
    abfc:	43000800 	.word	0x43000800

0000ac00 <_ZN9ClearCore13ShiftRegister6UpdateEv>:
    if (!m_initialized) {
    ac00:	f890 3108 	ldrb.w	r3, [r0, #264]	; 0x108
    ac04:	2b00      	cmp	r3, #0
    ac06:	d078      	beq.n	acfa <_ZN9ClearCore13ShiftRegister6UpdateEv+0xfa>
            if (!count--) {
    ac08:	6d83      	ldr	r3, [r0, #88]	; 0x58
    ac0a:	1e5a      	subs	r2, r3, #1
void ShiftRegister::Update() {
    ac0c:	b4f0      	push	{r4, r5, r6, r7}
    ac0e:	6582      	str	r2, [r0, #88]	; 0x58
    ac10:	b90b      	cbnz	r3, ac16 <_ZN9ClearCore13ShiftRegister6UpdateEv+0x16>
                count = period;
    ac12:	6d02      	ldr	r2, [r0, #80]	; 0x50
    ac14:	6582      	str	r2, [r0, #88]	; 0x58
            return returnTable[count < cc];
    ac16:	6d41      	ldr	r1, [r0, #84]	; 0x54
            if (++m_count >= UINT8_MAX >> 2) {
    ac18:	f890 3066 	ldrb.w	r3, [r0, #102]	; 0x66
            return returnTable[count < cc];
    ac1c:	428a      	cmp	r2, r1
    ac1e:	bf34      	ite	cc
    ac20:	220c      	movcc	r2, #12
    ac22:	2208      	movcs	r2, #8
    ac24:	4402      	add	r2, r0
            if (++m_count >= UINT8_MAX >> 2) {
    ac26:	3301      	adds	r3, #1
    ac28:	b2db      	uxtb	r3, r3
            return returnTable[count < cc];
    ac2a:	6d52      	ldr	r2, [r2, #84]	; 0x54
    m_patternOutputs[LED_BLINK_FAST_STROBE]  = m_fastCounter.Update();
    ac2c:	f8c0 2100 	str.w	r2, [r0, #256]	; 0x100
            if (++m_count >= UINT8_MAX >> 2) {
    ac30:	2b3e      	cmp	r3, #62	; 0x3e
    ac32:	f880 3066 	strb.w	r3, [r0, #102]	; 0x66
    ac36:	d961      	bls.n	acfc <_ZN9ClearCore13ShiftRegister6UpdateEv+0xfc>
                if (fadingIn) {
    ac38:	f890 3068 	ldrb.w	r3, [r0, #104]	; 0x68
                    if (++m_compare >= m_maxValue) {
    ac3c:	f890 1067 	ldrb.w	r1, [r0, #103]	; 0x67
                m_count = 0;
    ac40:	2400      	movs	r4, #0
    ac42:	f880 4066 	strb.w	r4, [r0, #102]	; 0x66
                if (fadingIn) {
    ac46:	2b00      	cmp	r3, #0
    ac48:	f000 817a 	beq.w	af40 <_ZN9ClearCore13ShiftRegister6UpdateEv+0x340>
                    if (++m_compare >= m_maxValue) {
    ac4c:	f890 3064 	ldrb.w	r3, [r0, #100]	; 0x64
    ac50:	3101      	adds	r1, #1
    ac52:	b2c9      	uxtb	r1, r1
    ac54:	4299      	cmp	r1, r3
    ac56:	460a      	mov	r2, r1
    ac58:	f880 1067 	strb.w	r1, [r0, #103]	; 0x67
    ac5c:	f2c0 817e 	blt.w	af5c <_ZN9ClearCore13ShiftRegister6UpdateEv+0x35c>
                        fadingIn = false;
    ac60:	f880 4068 	strb.w	r4, [r0, #104]	; 0x68
    ac64:	4623      	mov	r3, r4
    ac66:	e04c      	b.n	ad02 <_ZN9ClearCore13ShiftRegister6UpdateEv+0x102>
                m_count = UINT8_MAX - 1;
    ac68:	23fe      	movs	r3, #254	; 0xfe
                return 0;
    ac6a:	460a      	mov	r2, r1
                m_count = UINT8_MAX - 1;
    ac6c:	f880 307c 	strb.w	r3, [r0, #124]	; 0x7c
    while (!(SERCOM6->SPI.INTFLAG.bit.TXC)) {
    ac70:	49b1      	ldr	r1, [pc, #708]	; (af38 <_ZN9ClearCore13ShiftRegister6UpdateEv+0x338>)
    m_patternOutputs[LED_BLINK_FADE]         = m_fadeCounter.Update();
    ac72:	f8c0 20f8 	str.w	r2, [r0, #248]	; 0xf8
    while (!(SERCOM6->SPI.INTFLAG.bit.TXC)) {
    ac76:	7e0b      	ldrb	r3, [r1, #24]
    ac78:	079c      	lsls	r4, r3, #30
    ac7a:	d5fc      	bpl.n	ac76 <_ZN9ClearCore13ShiftRegister6UpdateEv+0x76>
    DATA_OUTPUT_STATE(SR_LOAD.gpioPort, 1UL << SR_LOAD.gpioPin, true);
    ac7c:	4baf      	ldr	r3, [pc, #700]	; (af3c <_ZN9ClearCore13ShiftRegister6UpdateEv+0x33c>)
    while (!(SERCOM6->SPI.INTFLAG.bit.RXC)) {
    ac7e:	49ae      	ldr	r1, [pc, #696]	; (af38 <_ZN9ClearCore13ShiftRegister6UpdateEv+0x338>)
    DATA_OUTPUT_STATE(SR_LOAD.gpioPort, 1UL << SR_LOAD.gpioPin, true);
    ac80:	2404      	movs	r4, #4
    ac82:	f8c3 4098 	str.w	r4, [r3, #152]	; 0x98
    DATA_OUTPUT_STATE(SR_LOAD.gpioPort, 1UL << SR_LOAD.gpioPin, false);
    ac86:	f8c3 4094 	str.w	r4, [r3, #148]	; 0x94
    while (!(SERCOM6->SPI.INTFLAG.bit.RXC)) {
    ac8a:	7e0b      	ldrb	r3, [r1, #24]
    ac8c:	075b      	lsls	r3, r3, #29
    ac8e:	d5fc      	bpl.n	ac8a <_ZN9ClearCore13ShiftRegister6UpdateEv+0x8a>
    m_latchedOutput = SERCOM6->SPI.DATA.reg ^ m_shiftInversions.reg;
    ac90:	6a8b      	ldr	r3, [r1, #40]	; 0x28
    ac92:	f8d0 60e0 	ldr.w	r6, [r0, #224]	; 0xe0
    if (m_useAltOutput) {
    ac96:	f890 110b 	ldrb.w	r1, [r0, #267]	; 0x10b
    m_lastOutput = m_pendingOutput;
    ac9a:	f8d0 410c 	ldr.w	r4, [r0, #268]	; 0x10c
    ac9e:	f8c0 4110 	str.w	r4, [r0, #272]	; 0x110
    m_latchedOutput = SERCOM6->SPI.DATA.reg ^ m_shiftInversions.reg;
    aca2:	4073      	eors	r3, r6
    aca4:	f8c0 3114 	str.w	r3, [r0, #276]	; 0x114
    if (m_useAltOutput) {
    aca8:	2900      	cmp	r1, #0
    acaa:	f040 80d4 	bne.w	ae56 <_ZN9ClearCore13ShiftRegister6UpdateEv+0x256>
        output = m_patternOutputs[LED_BLINK_IO_SET];
    acae:	f8d0 30f4 	ldr.w	r3, [r0, #244]	; 0xf4
    acb2:	f8d0 70e8 	ldr.w	r7, [r0, #232]	; 0xe8
    acb6:	f8d0 40fc 	ldr.w	r4, [r0, #252]	; 0xfc
    acba:	f8d0 50ec 	ldr.w	r5, [r0, #236]	; 0xec
    acbe:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
    acc2:	405a      	eors	r2, r3
    acc4:	403a      	ands	r2, r7
            output |= m_patternOutputs[i] & m_patternMasks[i];
    acc6:	4053      	eors	r3, r2
    acc8:	ea83 0204 	eor.w	r2, r3, r4
    accc:	402a      	ands	r2, r5
    acce:	405a      	eors	r2, r3
    acd0:	f8d0 30f0 	ldr.w	r3, [r0, #240]	; 0xf0
        if (m_blinkCodeActive) {
    acd4:	f890 4109 	ldrb.w	r4, [r0, #265]	; 0x109
    acd8:	4051      	eors	r1, r2
    acda:	400b      	ands	r3, r1
            output |= m_patternOutputs[i] & m_patternMasks[i];
    acdc:	4053      	eors	r3, r2
        if (m_blinkCodeActive) {
    acde:	b134      	cbz	r4, acee <_ZN9ClearCore13ShiftRegister6UpdateEv+0xee>
            if (m_blinkCodeState) {
    ace0:	f890 210a 	ldrb.w	r2, [r0, #266]	; 0x10a
            output &= ~SR_UNDERGLOW_MASK;
    ace4:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
            if (m_blinkCodeState) {
    ace8:	b10a      	cbz	r2, acee <_ZN9ClearCore13ShiftRegister6UpdateEv+0xee>
                output |= SR_UNDERGLOW_MASK;
    acea:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
    SERCOM6->SPI.DATA.reg = output;
    acee:	4a92      	ldr	r2, [pc, #584]	; (af38 <_ZN9ClearCore13ShiftRegister6UpdateEv+0x338>)
    m_pendingOutput = output;
    acf0:	f8c0 310c 	str.w	r3, [r0, #268]	; 0x10c
    output ^= m_shiftInversions.reg;
    acf4:	4073      	eors	r3, r6
    SERCOM6->SPI.DATA.reg = output;
    acf6:	6293      	str	r3, [r2, #40]	; 0x28
}
    acf8:	bcf0      	pop	{r4, r5, r6, r7}
    acfa:	4770      	bx	lr
    acfc:	f890 2067 	ldrb.w	r2, [r0, #103]	; 0x67
    ad00:	009b      	lsls	r3, r3, #2
            return returnTable[m_count << 2 < m_compare];
    ad02:	4293      	cmp	r3, r2
    ad04:	bfb4      	ite	lt
    ad06:	230c      	movlt	r3, #12
    ad08:	2308      	movge	r3, #8
    ad0a:	4403      	add	r3, r0
            if (!m_activeMask) {
    ad0c:	f8b0 1074 	ldrh.w	r1, [r0, #116]	; 0x74
            return returnTable[m_count << 2 < m_compare];
    ad10:	6e5b      	ldr	r3, [r3, #100]	; 0x64
    m_patternOutputs[LED_BLINK_BREATHING]    = m_breathingCounter.Update();
    ad12:	f8c0 30fc 	str.w	r3, [r0, #252]	; 0xfc
            if (!m_activeMask) {
    ad16:	2900      	cmp	r1, #0
    ad18:	d0a6      	beq.n	ac68 <_ZN9ClearCore13ShiftRegister6UpdateEv+0x68>
            if (++m_count > UINT8_MAX >> 2) {
    ad1a:	f890 307c 	ldrb.w	r3, [r0, #124]	; 0x7c
            uint32_t retVal = m_lastOutput;
    ad1e:	6f82      	ldr	r2, [r0, #120]	; 0x78
            if (++m_count > UINT8_MAX >> 2) {
    ad20:	3301      	adds	r3, #1
    ad22:	b2db      	uxtb	r3, r3
    ad24:	2b3f      	cmp	r3, #63	; 0x3f
    ad26:	f880 307c 	strb.w	r3, [r0, #124]	; 0x7c
    ad2a:	f200 8097 	bhi.w	ae5c <_ZN9ClearCore13ShiftRegister6UpdateEv+0x25c>
                    if ((retVal & m_analogMasks[i]) &&
    ad2e:	f8d0 10a0 	ldr.w	r1, [r0, #160]	; 0xa0
                uint8_t compare = m_count << 2;
    ad32:	009b      	lsls	r3, r3, #2
                    if ((retVal & m_analogMasks[i]) &&
    ad34:	420a      	tst	r2, r1
                uint8_t compare = m_count << 2;
    ad36:	b2db      	uxtb	r3, r3
                    if ((retVal & m_analogMasks[i]) &&
    ad38:	d004      	beq.n	ad44 <_ZN9ClearCore13ShiftRegister6UpdateEv+0x144>
                            (m_values[i] < compare)) {
    ad3a:	f890 407d 	ldrb.w	r4, [r0, #125]	; 0x7d
                    if ((retVal & m_analogMasks[i]) &&
    ad3e:	429c      	cmp	r4, r3
                        retVal &= ~m_analogMasks[i];
    ad40:	bfb8      	it	lt
    ad42:	438a      	biclt	r2, r1
                    if ((retVal & m_analogMasks[i]) &&
    ad44:	f8d0 10a4 	ldr.w	r1, [r0, #164]	; 0xa4
    ad48:	420a      	tst	r2, r1
    ad4a:	d004      	beq.n	ad56 <_ZN9ClearCore13ShiftRegister6UpdateEv+0x156>
                            (m_values[i] < compare)) {
    ad4c:	f890 407e 	ldrb.w	r4, [r0, #126]	; 0x7e
                    if ((retVal & m_analogMasks[i]) &&
    ad50:	429c      	cmp	r4, r3
                        retVal &= ~m_analogMasks[i];
    ad52:	bfb8      	it	lt
    ad54:	438a      	biclt	r2, r1
                    if ((retVal & m_analogMasks[i]) &&
    ad56:	f8d0 10a8 	ldr.w	r1, [r0, #168]	; 0xa8
    ad5a:	420a      	tst	r2, r1
    ad5c:	d004      	beq.n	ad68 <_ZN9ClearCore13ShiftRegister6UpdateEv+0x168>
                            (m_values[i] < compare)) {
    ad5e:	f890 407f 	ldrb.w	r4, [r0, #127]	; 0x7f
                    if ((retVal & m_analogMasks[i]) &&
    ad62:	429c      	cmp	r4, r3
                        retVal &= ~m_analogMasks[i];
    ad64:	bfb8      	it	lt
    ad66:	438a      	biclt	r2, r1
                    if ((retVal & m_analogMasks[i]) &&
    ad68:	f8d0 10ac 	ldr.w	r1, [r0, #172]	; 0xac
    ad6c:	420a      	tst	r2, r1
    ad6e:	d004      	beq.n	ad7a <_ZN9ClearCore13ShiftRegister6UpdateEv+0x17a>
                            (m_values[i] < compare)) {
    ad70:	f890 4080 	ldrb.w	r4, [r0, #128]	; 0x80
                    if ((retVal & m_analogMasks[i]) &&
    ad74:	429c      	cmp	r4, r3
                        retVal &= ~m_analogMasks[i];
    ad76:	bfb8      	it	lt
    ad78:	438a      	biclt	r2, r1
                    if ((retVal & m_analogMasks[i]) &&
    ad7a:	f8d0 10b0 	ldr.w	r1, [r0, #176]	; 0xb0
    ad7e:	420a      	tst	r2, r1
    ad80:	d004      	beq.n	ad8c <_ZN9ClearCore13ShiftRegister6UpdateEv+0x18c>
                            (m_values[i] < compare)) {
    ad82:	f890 4081 	ldrb.w	r4, [r0, #129]	; 0x81
                    if ((retVal & m_analogMasks[i]) &&
    ad86:	429c      	cmp	r4, r3
                        retVal &= ~m_analogMasks[i];
    ad88:	bfb8      	it	lt
    ad8a:	438a      	biclt	r2, r1
                    if ((retVal & m_analogMasks[i]) &&
    ad8c:	f8d0 10b4 	ldr.w	r1, [r0, #180]	; 0xb4
    ad90:	420a      	tst	r2, r1
    ad92:	d004      	beq.n	ad9e <_ZN9ClearCore13ShiftRegister6UpdateEv+0x19e>
                            (m_values[i] < compare)) {
    ad94:	f890 4082 	ldrb.w	r4, [r0, #130]	; 0x82
                    if ((retVal & m_analogMasks[i]) &&
    ad98:	429c      	cmp	r4, r3
                        retVal &= ~m_analogMasks[i];
    ad9a:	bfb8      	it	lt
    ad9c:	438a      	biclt	r2, r1
                    if ((retVal & m_analogMasks[i]) &&
    ad9e:	f8d0 10b8 	ldr.w	r1, [r0, #184]	; 0xb8
    ada2:	420a      	tst	r2, r1
    ada4:	d004      	beq.n	adb0 <_ZN9ClearCore13ShiftRegister6UpdateEv+0x1b0>
                            (m_values[i] < compare)) {
    ada6:	f890 4083 	ldrb.w	r4, [r0, #131]	; 0x83
                    if ((retVal & m_analogMasks[i]) &&
    adaa:	429c      	cmp	r4, r3
                        retVal &= ~m_analogMasks[i];
    adac:	bfb8      	it	lt
    adae:	438a      	biclt	r2, r1
                    if ((retVal & m_analogMasks[i]) &&
    adb0:	f8d0 10bc 	ldr.w	r1, [r0, #188]	; 0xbc
    adb4:	420a      	tst	r2, r1
    adb6:	d004      	beq.n	adc2 <_ZN9ClearCore13ShiftRegister6UpdateEv+0x1c2>
                            (m_values[i] < compare)) {
    adb8:	f890 4084 	ldrb.w	r4, [r0, #132]	; 0x84
                    if ((retVal & m_analogMasks[i]) &&
    adbc:	429c      	cmp	r4, r3
                        retVal &= ~m_analogMasks[i];
    adbe:	bfb8      	it	lt
    adc0:	438a      	biclt	r2, r1
                    if ((retVal & m_analogMasks[i]) &&
    adc2:	f8d0 10c0 	ldr.w	r1, [r0, #192]	; 0xc0
    adc6:	420a      	tst	r2, r1
    adc8:	d004      	beq.n	add4 <_ZN9ClearCore13ShiftRegister6UpdateEv+0x1d4>
                            (m_values[i] < compare)) {
    adca:	f890 4085 	ldrb.w	r4, [r0, #133]	; 0x85
                    if ((retVal & m_analogMasks[i]) &&
    adce:	429c      	cmp	r4, r3
                        retVal &= ~m_analogMasks[i];
    add0:	bfb8      	it	lt
    add2:	438a      	biclt	r2, r1
                    if ((retVal & m_analogMasks[i]) &&
    add4:	f8d0 10c4 	ldr.w	r1, [r0, #196]	; 0xc4
    add8:	420a      	tst	r2, r1
    adda:	d004      	beq.n	ade6 <_ZN9ClearCore13ShiftRegister6UpdateEv+0x1e6>
                            (m_values[i] < compare)) {
    addc:	f890 4086 	ldrb.w	r4, [r0, #134]	; 0x86
                    if ((retVal & m_analogMasks[i]) &&
    ade0:	429c      	cmp	r4, r3
                        retVal &= ~m_analogMasks[i];
    ade2:	bfb8      	it	lt
    ade4:	438a      	biclt	r2, r1
                    if ((retVal & m_analogMasks[i]) &&
    ade6:	f8d0 10c8 	ldr.w	r1, [r0, #200]	; 0xc8
    adea:	420a      	tst	r2, r1
    adec:	d004      	beq.n	adf8 <_ZN9ClearCore13ShiftRegister6UpdateEv+0x1f8>
                            (m_values[i] < compare)) {
    adee:	f890 4087 	ldrb.w	r4, [r0, #135]	; 0x87
                    if ((retVal & m_analogMasks[i]) &&
    adf2:	429c      	cmp	r4, r3
                        retVal &= ~m_analogMasks[i];
    adf4:	bfb8      	it	lt
    adf6:	438a      	biclt	r2, r1
                    if ((retVal & m_analogMasks[i]) &&
    adf8:	f8d0 10cc 	ldr.w	r1, [r0, #204]	; 0xcc
    adfc:	420a      	tst	r2, r1
    adfe:	d004      	beq.n	ae0a <_ZN9ClearCore13ShiftRegister6UpdateEv+0x20a>
                            (m_values[i] < compare)) {
    ae00:	f890 4088 	ldrb.w	r4, [r0, #136]	; 0x88
                    if ((retVal & m_analogMasks[i]) &&
    ae04:	429c      	cmp	r4, r3
                        retVal &= ~m_analogMasks[i];
    ae06:	bfb8      	it	lt
    ae08:	438a      	biclt	r2, r1
                    if ((retVal & m_analogMasks[i]) &&
    ae0a:	f8d0 10d0 	ldr.w	r1, [r0, #208]	; 0xd0
    ae0e:	420a      	tst	r2, r1
    ae10:	d004      	beq.n	ae1c <_ZN9ClearCore13ShiftRegister6UpdateEv+0x21c>
                            (m_values[i] < compare)) {
    ae12:	f890 4089 	ldrb.w	r4, [r0, #137]	; 0x89
                    if ((retVal & m_analogMasks[i]) &&
    ae16:	429c      	cmp	r4, r3
                        retVal &= ~m_analogMasks[i];
    ae18:	bfb8      	it	lt
    ae1a:	438a      	biclt	r2, r1
                    if ((retVal & m_analogMasks[i]) &&
    ae1c:	f8d0 10d4 	ldr.w	r1, [r0, #212]	; 0xd4
    ae20:	420a      	tst	r2, r1
    ae22:	d004      	beq.n	ae2e <_ZN9ClearCore13ShiftRegister6UpdateEv+0x22e>
                            (m_values[i] < compare)) {
    ae24:	f890 408a 	ldrb.w	r4, [r0, #138]	; 0x8a
                    if ((retVal & m_analogMasks[i]) &&
    ae28:	429c      	cmp	r4, r3
                        retVal &= ~m_analogMasks[i];
    ae2a:	bfb8      	it	lt
    ae2c:	438a      	biclt	r2, r1
                    if ((retVal & m_analogMasks[i]) &&
    ae2e:	f8d0 10d8 	ldr.w	r1, [r0, #216]	; 0xd8
    ae32:	420a      	tst	r2, r1
    ae34:	d004      	beq.n	ae40 <_ZN9ClearCore13ShiftRegister6UpdateEv+0x240>
                            (m_values[i] < compare)) {
    ae36:	f890 408b 	ldrb.w	r4, [r0, #139]	; 0x8b
                    if ((retVal & m_analogMasks[i]) &&
    ae3a:	429c      	cmp	r4, r3
                        retVal &= ~m_analogMasks[i];
    ae3c:	bfb8      	it	lt
    ae3e:	438a      	biclt	r2, r1
                    if ((retVal & m_analogMasks[i]) &&
    ae40:	f8d0 10dc 	ldr.w	r1, [r0, #220]	; 0xdc
    ae44:	4211      	tst	r1, r2
    ae46:	d004      	beq.n	ae52 <_ZN9ClearCore13ShiftRegister6UpdateEv+0x252>
                            (m_values[i] < compare)) {
    ae48:	f890 408c 	ldrb.w	r4, [r0, #140]	; 0x8c
                    if ((retVal & m_analogMasks[i]) &&
    ae4c:	429c      	cmp	r4, r3
                        retVal &= ~m_analogMasks[i];
    ae4e:	bfb8      	it	lt
    ae50:	438a      	biclt	r2, r1
            return m_lastOutput = retVal;
    ae52:	6782      	str	r2, [r0, #120]	; 0x78
    ae54:	e70c      	b.n	ac70 <_ZN9ClearCore13ShiftRegister6UpdateEv+0x70>
        output = m_altOutput;
    ae56:	f8d0 3104 	ldr.w	r3, [r0, #260]	; 0x104
    ae5a:	e748      	b.n	acee <_ZN9ClearCore13ShiftRegister6UpdateEv+0xee>
                m_count = 0;
    ae5c:	2300      	movs	r3, #0
                    if (m_activeMask & (1 << i) && m_valuesBuf[i]) {
    ae5e:	f011 0201 	ands.w	r2, r1, #1
                m_count = 0;
    ae62:	f880 307c 	strb.w	r3, [r0, #124]	; 0x7c
                    if (m_activeMask & (1 << i) && m_valuesBuf[i]) {
    ae66:	d004      	beq.n	ae72 <_ZN9ClearCore13ShiftRegister6UpdateEv+0x272>
    ae68:	f890 208d 	ldrb.w	r2, [r0, #141]	; 0x8d
    ae6c:	2a00      	cmp	r2, #0
    ae6e:	f040 80cb 	bne.w	b008 <_ZN9ClearCore13ShiftRegister6UpdateEv+0x408>
    ae72:	078b      	lsls	r3, r1, #30
    ae74:	d504      	bpl.n	ae80 <_ZN9ClearCore13ShiftRegister6UpdateEv+0x280>
    ae76:	f890 308e 	ldrb.w	r3, [r0, #142]	; 0x8e
    ae7a:	2b00      	cmp	r3, #0
    ae7c:	f040 80be 	bne.w	affc <_ZN9ClearCore13ShiftRegister6UpdateEv+0x3fc>
    ae80:	074f      	lsls	r7, r1, #29
    ae82:	d504      	bpl.n	ae8e <_ZN9ClearCore13ShiftRegister6UpdateEv+0x28e>
    ae84:	f890 308f 	ldrb.w	r3, [r0, #143]	; 0x8f
    ae88:	2b00      	cmp	r3, #0
    ae8a:	f040 80b1 	bne.w	aff0 <_ZN9ClearCore13ShiftRegister6UpdateEv+0x3f0>
    ae8e:	070e      	lsls	r6, r1, #28
    ae90:	d504      	bpl.n	ae9c <_ZN9ClearCore13ShiftRegister6UpdateEv+0x29c>
    ae92:	f890 3090 	ldrb.w	r3, [r0, #144]	; 0x90
    ae96:	2b00      	cmp	r3, #0
    ae98:	f040 80a4 	bne.w	afe4 <_ZN9ClearCore13ShiftRegister6UpdateEv+0x3e4>
    ae9c:	06cd      	lsls	r5, r1, #27
    ae9e:	d504      	bpl.n	aeaa <_ZN9ClearCore13ShiftRegister6UpdateEv+0x2aa>
    aea0:	f890 3091 	ldrb.w	r3, [r0, #145]	; 0x91
    aea4:	2b00      	cmp	r3, #0
    aea6:	f040 8097 	bne.w	afd8 <_ZN9ClearCore13ShiftRegister6UpdateEv+0x3d8>
    aeaa:	068c      	lsls	r4, r1, #26
    aeac:	d504      	bpl.n	aeb8 <_ZN9ClearCore13ShiftRegister6UpdateEv+0x2b8>
    aeae:	f890 3092 	ldrb.w	r3, [r0, #146]	; 0x92
    aeb2:	2b00      	cmp	r3, #0
    aeb4:	f040 808a 	bne.w	afcc <_ZN9ClearCore13ShiftRegister6UpdateEv+0x3cc>
    aeb8:	064b      	lsls	r3, r1, #25
    aeba:	d503      	bpl.n	aec4 <_ZN9ClearCore13ShiftRegister6UpdateEv+0x2c4>
    aebc:	f890 3093 	ldrb.w	r3, [r0, #147]	; 0x93
    aec0:	2b00      	cmp	r3, #0
    aec2:	d17d      	bne.n	afc0 <_ZN9ClearCore13ShiftRegister6UpdateEv+0x3c0>
    aec4:	060f      	lsls	r7, r1, #24
    aec6:	d503      	bpl.n	aed0 <_ZN9ClearCore13ShiftRegister6UpdateEv+0x2d0>
    aec8:	f890 3094 	ldrb.w	r3, [r0, #148]	; 0x94
    aecc:	2b00      	cmp	r3, #0
    aece:	d171      	bne.n	afb4 <_ZN9ClearCore13ShiftRegister6UpdateEv+0x3b4>
    aed0:	05ce      	lsls	r6, r1, #23
    aed2:	d503      	bpl.n	aedc <_ZN9ClearCore13ShiftRegister6UpdateEv+0x2dc>
    aed4:	f890 3095 	ldrb.w	r3, [r0, #149]	; 0x95
    aed8:	2b00      	cmp	r3, #0
    aeda:	d165      	bne.n	afa8 <_ZN9ClearCore13ShiftRegister6UpdateEv+0x3a8>
    aedc:	058d      	lsls	r5, r1, #22
    aede:	d503      	bpl.n	aee8 <_ZN9ClearCore13ShiftRegister6UpdateEv+0x2e8>
    aee0:	f890 3096 	ldrb.w	r3, [r0, #150]	; 0x96
    aee4:	2b00      	cmp	r3, #0
    aee6:	d159      	bne.n	af9c <_ZN9ClearCore13ShiftRegister6UpdateEv+0x39c>
    aee8:	054c      	lsls	r4, r1, #21
    aeea:	d503      	bpl.n	aef4 <_ZN9ClearCore13ShiftRegister6UpdateEv+0x2f4>
    aeec:	f890 3097 	ldrb.w	r3, [r0, #151]	; 0x97
    aef0:	2b00      	cmp	r3, #0
    aef2:	d14d      	bne.n	af90 <_ZN9ClearCore13ShiftRegister6UpdateEv+0x390>
    aef4:	050b      	lsls	r3, r1, #20
    aef6:	d503      	bpl.n	af00 <_ZN9ClearCore13ShiftRegister6UpdateEv+0x300>
    aef8:	f890 3098 	ldrb.w	r3, [r0, #152]	; 0x98
    aefc:	2b00      	cmp	r3, #0
    aefe:	d141      	bne.n	af84 <_ZN9ClearCore13ShiftRegister6UpdateEv+0x384>
    af00:	04cf      	lsls	r7, r1, #19
    af02:	d503      	bpl.n	af0c <_ZN9ClearCore13ShiftRegister6UpdateEv+0x30c>
    af04:	f890 3099 	ldrb.w	r3, [r0, #153]	; 0x99
    af08:	2b00      	cmp	r3, #0
    af0a:	d135      	bne.n	af78 <_ZN9ClearCore13ShiftRegister6UpdateEv+0x378>
    af0c:	048e      	lsls	r6, r1, #18
    af0e:	d502      	bpl.n	af16 <_ZN9ClearCore13ShiftRegister6UpdateEv+0x316>
    af10:	f890 309a 	ldrb.w	r3, [r0, #154]	; 0x9a
    af14:	bb53      	cbnz	r3, af6c <_ZN9ClearCore13ShiftRegister6UpdateEv+0x36c>
    af16:	044d      	lsls	r5, r1, #17
    af18:	d502      	bpl.n	af20 <_ZN9ClearCore13ShiftRegister6UpdateEv+0x320>
    af1a:	f890 309b 	ldrb.w	r3, [r0, #155]	; 0x9b
    af1e:	b9fb      	cbnz	r3, af60 <_ZN9ClearCore13ShiftRegister6UpdateEv+0x360>
    af20:	0bcb      	lsrs	r3, r1, #15
    af22:	d096      	beq.n	ae52 <_ZN9ClearCore13ShiftRegister6UpdateEv+0x252>
    af24:	f890 309c 	ldrb.w	r3, [r0, #156]	; 0x9c
    af28:	2b00      	cmp	r3, #0
    af2a:	d092      	beq.n	ae52 <_ZN9ClearCore13ShiftRegister6UpdateEv+0x252>
                        retVal |= m_analogMasks[i];
    af2c:	f8d0 10dc 	ldr.w	r1, [r0, #220]	; 0xdc
                        m_values[i] = m_valuesBuf[i];
    af30:	f880 308c 	strb.w	r3, [r0, #140]	; 0x8c
                        retVal |= m_analogMasks[i];
    af34:	430a      	orrs	r2, r1
    af36:	e78c      	b.n	ae52 <_ZN9ClearCore13ShiftRegister6UpdateEv+0x252>
    af38:	43000800 	.word	0x43000800
    af3c:	41008000 	.word	0x41008000
                    if (--m_compare <= m_minValue) {
    af40:	f890 4065 	ldrb.w	r4, [r0, #101]	; 0x65
    af44:	3901      	subs	r1, #1
    af46:	b2c9      	uxtb	r1, r1
    af48:	42a1      	cmp	r1, r4
    af4a:	460a      	mov	r2, r1
    af4c:	f880 1067 	strb.w	r1, [r0, #103]	; 0x67
    af50:	f73f aed7 	bgt.w	ad02 <_ZN9ClearCore13ShiftRegister6UpdateEv+0x102>
                        fadingIn = true;
    af54:	2101      	movs	r1, #1
    af56:	f880 1068 	strb.w	r1, [r0, #104]	; 0x68
    af5a:	e6d2      	b.n	ad02 <_ZN9ClearCore13ShiftRegister6UpdateEv+0x102>
                    if (++m_compare >= m_maxValue) {
    af5c:	4623      	mov	r3, r4
    af5e:	e6d0      	b.n	ad02 <_ZN9ClearCore13ShiftRegister6UpdateEv+0x102>
                        retVal |= m_analogMasks[i];
    af60:	f8d0 40d8 	ldr.w	r4, [r0, #216]	; 0xd8
                        m_values[i] = m_valuesBuf[i];
    af64:	f880 308b 	strb.w	r3, [r0, #139]	; 0x8b
                        retVal |= m_analogMasks[i];
    af68:	4322      	orrs	r2, r4
    af6a:	e7d9      	b.n	af20 <_ZN9ClearCore13ShiftRegister6UpdateEv+0x320>
    af6c:	f8d0 40d4 	ldr.w	r4, [r0, #212]	; 0xd4
                        m_values[i] = m_valuesBuf[i];
    af70:	f880 308a 	strb.w	r3, [r0, #138]	; 0x8a
                        retVal |= m_analogMasks[i];
    af74:	4322      	orrs	r2, r4
    af76:	e7ce      	b.n	af16 <_ZN9ClearCore13ShiftRegister6UpdateEv+0x316>
    af78:	f8d0 40d0 	ldr.w	r4, [r0, #208]	; 0xd0
                        m_values[i] = m_valuesBuf[i];
    af7c:	f880 3089 	strb.w	r3, [r0, #137]	; 0x89
                        retVal |= m_analogMasks[i];
    af80:	4322      	orrs	r2, r4
    af82:	e7c3      	b.n	af0c <_ZN9ClearCore13ShiftRegister6UpdateEv+0x30c>
    af84:	f8d0 40cc 	ldr.w	r4, [r0, #204]	; 0xcc
                        m_values[i] = m_valuesBuf[i];
    af88:	f880 3088 	strb.w	r3, [r0, #136]	; 0x88
                        retVal |= m_analogMasks[i];
    af8c:	4322      	orrs	r2, r4
    af8e:	e7b7      	b.n	af00 <_ZN9ClearCore13ShiftRegister6UpdateEv+0x300>
    af90:	f8d0 40c8 	ldr.w	r4, [r0, #200]	; 0xc8
                        m_values[i] = m_valuesBuf[i];
    af94:	f880 3087 	strb.w	r3, [r0, #135]	; 0x87
                        retVal |= m_analogMasks[i];
    af98:	4322      	orrs	r2, r4
    af9a:	e7ab      	b.n	aef4 <_ZN9ClearCore13ShiftRegister6UpdateEv+0x2f4>
    af9c:	f8d0 40c4 	ldr.w	r4, [r0, #196]	; 0xc4
                        m_values[i] = m_valuesBuf[i];
    afa0:	f880 3086 	strb.w	r3, [r0, #134]	; 0x86
                        retVal |= m_analogMasks[i];
    afa4:	4322      	orrs	r2, r4
    afa6:	e79f      	b.n	aee8 <_ZN9ClearCore13ShiftRegister6UpdateEv+0x2e8>
    afa8:	f8d0 40c0 	ldr.w	r4, [r0, #192]	; 0xc0
                        m_values[i] = m_valuesBuf[i];
    afac:	f880 3085 	strb.w	r3, [r0, #133]	; 0x85
                        retVal |= m_analogMasks[i];
    afb0:	4322      	orrs	r2, r4
    afb2:	e793      	b.n	aedc <_ZN9ClearCore13ShiftRegister6UpdateEv+0x2dc>
    afb4:	f8d0 40bc 	ldr.w	r4, [r0, #188]	; 0xbc
                        m_values[i] = m_valuesBuf[i];
    afb8:	f880 3084 	strb.w	r3, [r0, #132]	; 0x84
                        retVal |= m_analogMasks[i];
    afbc:	4322      	orrs	r2, r4
    afbe:	e787      	b.n	aed0 <_ZN9ClearCore13ShiftRegister6UpdateEv+0x2d0>
    afc0:	f8d0 40b8 	ldr.w	r4, [r0, #184]	; 0xb8
                        m_values[i] = m_valuesBuf[i];
    afc4:	f880 3083 	strb.w	r3, [r0, #131]	; 0x83
                        retVal |= m_analogMasks[i];
    afc8:	4322      	orrs	r2, r4
    afca:	e77b      	b.n	aec4 <_ZN9ClearCore13ShiftRegister6UpdateEv+0x2c4>
    afcc:	f8d0 40b4 	ldr.w	r4, [r0, #180]	; 0xb4
                        m_values[i] = m_valuesBuf[i];
    afd0:	f880 3082 	strb.w	r3, [r0, #130]	; 0x82
                        retVal |= m_analogMasks[i];
    afd4:	4322      	orrs	r2, r4
    afd6:	e76f      	b.n	aeb8 <_ZN9ClearCore13ShiftRegister6UpdateEv+0x2b8>
    afd8:	f8d0 40b0 	ldr.w	r4, [r0, #176]	; 0xb0
                        m_values[i] = m_valuesBuf[i];
    afdc:	f880 3081 	strb.w	r3, [r0, #129]	; 0x81
                        retVal |= m_analogMasks[i];
    afe0:	4322      	orrs	r2, r4
    afe2:	e762      	b.n	aeaa <_ZN9ClearCore13ShiftRegister6UpdateEv+0x2aa>
    afe4:	f8d0 40ac 	ldr.w	r4, [r0, #172]	; 0xac
                        m_values[i] = m_valuesBuf[i];
    afe8:	f880 3080 	strb.w	r3, [r0, #128]	; 0x80
                        retVal |= m_analogMasks[i];
    afec:	4322      	orrs	r2, r4
    afee:	e755      	b.n	ae9c <_ZN9ClearCore13ShiftRegister6UpdateEv+0x29c>
    aff0:	f8d0 40a8 	ldr.w	r4, [r0, #168]	; 0xa8
                        m_values[i] = m_valuesBuf[i];
    aff4:	f880 307f 	strb.w	r3, [r0, #127]	; 0x7f
                        retVal |= m_analogMasks[i];
    aff8:	4322      	orrs	r2, r4
    affa:	e748      	b.n	ae8e <_ZN9ClearCore13ShiftRegister6UpdateEv+0x28e>
    affc:	f8d0 40a4 	ldr.w	r4, [r0, #164]	; 0xa4
                        m_values[i] = m_valuesBuf[i];
    b000:	f880 307e 	strb.w	r3, [r0, #126]	; 0x7e
                        retVal |= m_analogMasks[i];
    b004:	4322      	orrs	r2, r4
    b006:	e73b      	b.n	ae80 <_ZN9ClearCore13ShiftRegister6UpdateEv+0x280>
                        m_values[i] = m_valuesBuf[i];
    b008:	f880 207d 	strb.w	r2, [r0, #125]	; 0x7d
                        retVal |= m_analogMasks[i];
    b00c:	f8d0 20a0 	ldr.w	r2, [r0, #160]	; 0xa0
    b010:	e72f      	b.n	ae72 <_ZN9ClearCore13ShiftRegister6UpdateEv+0x272>
    b012:	bf00      	nop

0000b014 <_ZN9ClearCore13ShiftRegister18DiagnosticLedSweepEv>:
}

/**
    Turn all of the LEDs on briefly so the user can see that they all work.
**/
void ShiftRegister::DiagnosticLedSweep() {
    b014:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    m_altOutput = 0;
    m_useAltOutput = true;
    b018:	2301      	movs	r3, #1
    b01a:	f100 0834 	add.w	r8, r0, #52	; 0x34
    b01e:	4e4d      	ldr	r6, [pc, #308]	; (b154 <_ZN9ClearCore13ShiftRegister18DiagnosticLedSweepEv+0x140>)
    b020:	f880 310b 	strb.w	r3, [r0, #267]	; 0x10b
void ShiftRegister::DiagnosticLedSweep() {
    b024:	b083      	sub	sp, #12
    b026:	4681      	mov	r9, r0
    m_useAltOutput = true;
    b028:	4645      	mov	r5, r8
    b02a:	f100 0444 	add.w	r4, r0, #68	; 0x44
    b02e:	2200      	movs	r2, #0
    b030:	2700      	movs	r7, #0
    // Illuminate bank 2
    for (uint8_t i = 0; i < LED_BANK_2_LEN; i++) {
        m_altOutput |= LED_BANK_2[i];
    b032:	f855 3b04 	ldr.w	r3, [r5], #4
    b036:	4313      	orrs	r3, r2
    b038:	f8c9 3104 	str.w	r3, [r9, #260]	; 0x104
    b03c:	4630      	mov	r0, r6
    b03e:	4639      	mov	r1, r7
    b040:	f7fe febe 	bl	9dc0 <Delay_cycles>
    for (uint8_t i = 0; i < LED_BANK_2_LEN; i++) {
    b044:	42a5      	cmp	r5, r4
    b046:	d002      	beq.n	b04e <_ZN9ClearCore13ShiftRegister18DiagnosticLedSweepEv+0x3a>
    b048:	f8d9 2104 	ldr.w	r2, [r9, #260]	; 0x104
    b04c:	e7f1      	b.n	b032 <_ZN9ClearCore13ShiftRegister18DiagnosticLedSweepEv+0x1e>
    b04e:	f109 0318 	add.w	r3, r9, #24
    b052:	4e40      	ldr	r6, [pc, #256]	; (b154 <_ZN9ClearCore13ShiftRegister18DiagnosticLedSweepEv+0x140>)
    b054:	9301      	str	r3, [sp, #4]
    b056:	469b      	mov	fp, r3
    b058:	f04f 0a00 	mov.w	sl, #0
    b05c:	2700      	movs	r7, #0

    // Illuminate bank 0 and 1 simultaneously
    uint8_t largerBankLen = (LED_BANK_1_LEN > LED_BANK_0_LEN) ? LED_BANK_1_LEN
                            : LED_BANK_0_LEN;
    for (uint8_t i = 0; i < largerBankLen; i++) {
        if (i < LED_BANK_0_LEN) {
    b05e:	f1ba 0f06 	cmp.w	sl, #6
    b062:	4630      	mov	r0, r6
    b064:	4639      	mov	r1, r7
    b066:	f10a 0a01 	add.w	sl, sl, #1
    b06a:	d148      	bne.n	b0fe <_ZN9ClearCore13ShiftRegister18DiagnosticLedSweepEv+0xea>
            m_altOutput |= LED_BANK_0[i];
        }
        if (i < LED_BANK_1_LEN) {
            m_altOutput |= LED_BANK_1[i];
    b06c:	f8db 2000 	ldr.w	r2, [fp]
    b070:	f8d9 3104 	ldr.w	r3, [r9, #260]	; 0x104
    b074:	4837      	ldr	r0, [pc, #220]	; (b154 <_ZN9ClearCore13ShiftRegister18DiagnosticLedSweepEv+0x140>)
    b076:	4313      	orrs	r3, r2
    b078:	f8c9 3104 	str.w	r3, [r9, #260]	; 0x104
    b07c:	2100      	movs	r1, #0
    b07e:	f7fe fe9f 	bl	9dc0 <Delay_cycles>
    b082:	4835      	ldr	r0, [pc, #212]	; (b158 <_ZN9ClearCore13ShiftRegister18DiagnosticLedSweepEv+0x144>)
    b084:	4e33      	ldr	r6, [pc, #204]	; (b154 <_ZN9ClearCore13ShiftRegister18DiagnosticLedSweepEv+0x140>)
    b086:	2100      	movs	r1, #0
    b088:	f7fe fe9a 	bl	9dc0 <Delay_cycles>
    b08c:	2700      	movs	r7, #0

    Delay_ms(50);

    // Turn them off the same way they were turned on
    for (uint8_t i = 0; i < LED_BANK_2_LEN; i++) {
        m_altOutput &= ~LED_BANK_2[i];
    b08e:	f858 2b04 	ldr.w	r2, [r8], #4
    b092:	f8d9 3104 	ldr.w	r3, [r9, #260]	; 0x104
    b096:	ea23 0302 	bic.w	r3, r3, r2
    b09a:	f8c9 3104 	str.w	r3, [r9, #260]	; 0x104
    b09e:	4630      	mov	r0, r6
    b0a0:	4639      	mov	r1, r7
    b0a2:	f7fe fe8d 	bl	9dc0 <Delay_cycles>
    for (uint8_t i = 0; i < LED_BANK_2_LEN; i++) {
    b0a6:	4545      	cmp	r5, r8
    b0a8:	d1f1      	bne.n	b08e <_ZN9ClearCore13ShiftRegister18DiagnosticLedSweepEv+0x7a>
        atomic_or_fetch(&m_patternOutputs[LED_BLINK_IO_SET], bitsToSet);
    b0aa:	f3bf 8f5b 	dmb	ish
    b0ae:	f109 03f4 	add.w	r3, r9, #244	; 0xf4
    b0b2:	e853 2f00 	ldrex	r2, [r3]
    b0b6:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
    b0ba:	e843 2100 	strex	r1, r2, [r3]
    b0be:	2900      	cmp	r1, #0
    b0c0:	d1f7      	bne.n	b0b2 <_ZN9ClearCore13ShiftRegister18DiagnosticLedSweepEv+0x9e>
    b0c2:	f3bf 8f5b 	dmb	ish
    b0c6:	4e23      	ldr	r6, [pc, #140]	; (b154 <_ZN9ClearCore13ShiftRegister18DiagnosticLedSweepEv+0x140>)
    b0c8:	2500      	movs	r5, #0
    b0ca:	2700      	movs	r7, #0
    b0cc:	9b01      	ldr	r3, [sp, #4]
    }

    ShifterStateSet(SR_UNDERGLOW_MASK);

    for (uint8_t i = 0; i < largerBankLen; i++) {
        if (i < LED_BANK_0_LEN) {
    b0ce:	2d06      	cmp	r5, #6
    b0d0:	461a      	mov	r2, r3
    b0d2:	4630      	mov	r0, r6
    b0d4:	4639      	mov	r1, r7
    b0d6:	f105 0501 	add.w	r5, r5, #1
    b0da:	d122      	bne.n	b122 <_ZN9ClearCore13ShiftRegister18DiagnosticLedSweepEv+0x10e>
            m_altOutput &= ~LED_BANK_0[i];
        }
        if (i < LED_BANK_1_LEN) {
            m_altOutput &= ~LED_BANK_1[i];
    b0dc:	681a      	ldr	r2, [r3, #0]
    b0de:	f8d9 3104 	ldr.w	r3, [r9, #260]	; 0x104
    b0e2:	481c      	ldr	r0, [pc, #112]	; (b154 <_ZN9ClearCore13ShiftRegister18DiagnosticLedSweepEv+0x140>)
    b0e4:	ea23 0302 	bic.w	r3, r3, r2
    b0e8:	f8c9 3104 	str.w	r3, [r9, #260]	; 0x104
    b0ec:	2100      	movs	r1, #0
    b0ee:	f7fe fe67 	bl	9dc0 <Delay_cycles>
        }

        Delay_ms(DELAY_TIME);
    }
    m_useAltOutput = false;
    b0f2:	2300      	movs	r3, #0
    b0f4:	f889 310b 	strb.w	r3, [r9, #267]	; 0x10b
}
    b0f8:	b003      	add	sp, #12
    b0fa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
            m_altOutput |= LED_BANK_0[i];
    b0fe:	f85b 3c18 	ldr.w	r3, [fp, #-24]
    b102:	f8d9 4104 	ldr.w	r4, [r9, #260]	; 0x104
            m_altOutput |= LED_BANK_1[i];
    b106:	f8db 2000 	ldr.w	r2, [fp]
            m_altOutput |= LED_BANK_0[i];
    b10a:	4323      	orrs	r3, r4
            m_altOutput |= LED_BANK_1[i];
    b10c:	4313      	orrs	r3, r2
    b10e:	f8c9 3104 	str.w	r3, [r9, #260]	; 0x104
    b112:	f7fe fe55 	bl	9dc0 <Delay_cycles>
    for (uint8_t i = 0; i < largerBankLen; i++) {
    b116:	f1ba 0f07 	cmp.w	sl, #7
    b11a:	f10b 0b04 	add.w	fp, fp, #4
    b11e:	d19e      	bne.n	b05e <_ZN9ClearCore13ShiftRegister18DiagnosticLedSweepEv+0x4a>
    b120:	e7af      	b.n	b082 <_ZN9ClearCore13ShiftRegister18DiagnosticLedSweepEv+0x6e>
            m_altOutput &= ~LED_BANK_0[i];
    b122:	f853 3c18 	ldr.w	r3, [r3, #-24]
    b126:	f8d9 4104 	ldr.w	r4, [r9, #260]	; 0x104
            m_altOutput &= ~LED_BANK_1[i];
    b12a:	6812      	ldr	r2, [r2, #0]
            m_altOutput &= ~LED_BANK_0[i];
    b12c:	ea24 0303 	bic.w	r3, r4, r3
            m_altOutput &= ~LED_BANK_1[i];
    b130:	ea23 0302 	bic.w	r3, r3, r2
    b134:	f8c9 3104 	str.w	r3, [r9, #260]	; 0x104
    b138:	9b01      	ldr	r3, [sp, #4]
    b13a:	3304      	adds	r3, #4
    b13c:	9301      	str	r3, [sp, #4]
    b13e:	f7fe fe3f 	bl	9dc0 <Delay_cycles>
    for (uint8_t i = 0; i < largerBankLen; i++) {
    b142:	2d07      	cmp	r5, #7
    b144:	d1c2      	bne.n	b0cc <_ZN9ClearCore13ShiftRegister18DiagnosticLedSweepEv+0xb8>
    m_useAltOutput = false;
    b146:	2300      	movs	r3, #0
    b148:	f889 310b 	strb.w	r3, [r9, #267]	; 0x10b
}
    b14c:	b003      	add	sp, #12
    b14e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    b152:	bf00      	nop
    b154:	002dc6c0 	.word	0x002dc6c0
    b158:	005b8d80 	.word	0x005b8d80

0000b15c <_ZN9ClearCore12MotorManager8InstanceEv>:
extern MotorDriver *const MotorConnectors[MOTOR_CON_CNT];
extern ShiftRegister ShiftReg;

MotorManager &MotorMgr = MotorManager::Instance();

MotorManager &MotorManager::Instance() {
    b15c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    static MotorManager *instance = new MotorManager();
    b15e:	4d0e      	ldr	r5, [pc, #56]	; (b198 <_ZN9ClearCore12MotorManager8InstanceEv+0x3c>)
    b160:	682b      	ldr	r3, [r5, #0]
    b162:	f013 0401 	ands.w	r4, r3, #1
    b166:	d002      	beq.n	b16e <_ZN9ClearCore12MotorManager8InstanceEv+0x12>
    b168:	4b0c      	ldr	r3, [pc, #48]	; (b19c <_ZN9ClearCore12MotorManager8InstanceEv+0x40>)
    b16a:	6818      	ldr	r0, [r3, #0]
    b16c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    b16e:	2010      	movs	r0, #16
    b170:	f008 f8be 	bl	132f0 <_Znwj>
    Construct and wire in our output pins
**/
MotorManager::MotorManager()
    : m_gclkIndex(MAIN_INTERRUPT_GCLK_ID),
      m_clockRate(CLOCK_RATE_NORMAL),
      m_initialized(false) {
    b174:	2301      	movs	r3, #1
    static MotorManager *instance = new MotorManager();
    b176:	4909      	ldr	r1, [pc, #36]	; (b19c <_ZN9ClearCore12MotorManager8InstanceEv+0x40>)
      m_initialized(false) {
    b178:	7003      	strb	r3, [r0, #0]
    m_stepPorts[MOTOR_M0M1] =  Mtr_CLK_01.gpioPort;
    m_stepPorts[MOTOR_M2M3] = Mtr_CLK_23.gpioPort;
    m_stepDataBits[MOTOR_M0M1] = Mtr_CLK_01.gpioPin;
    m_stepDataBits[MOTOR_M2M3] = Mtr_CLK_23.gpioPin;
    m_motorModes[MOTOR_M0M1] = Connector::CPM_MODE_A_DIRECT_B_DIRECT;
    b17a:	2209      	movs	r2, #9
    m_stepDataBits[MOTOR_M0M1] = Mtr_CLK_01.gpioPin;
    b17c:	271b      	movs	r7, #27
    m_stepDataBits[MOTOR_M2M3] = Mtr_CLK_23.gpioPin;
    b17e:	2617      	movs	r6, #23
      m_initialized(false) {
    b180:	7384      	strb	r4, [r0, #14]
    m_stepPorts[MOTOR_M0M1] =  Mtr_CLK_01.gpioPort;
    b182:	7084      	strb	r4, [r0, #2]
    m_stepDataBits[MOTOR_M0M1] = Mtr_CLK_01.gpioPin;
    b184:	6047      	str	r7, [r0, #4]
    m_stepDataBits[MOTOR_M2M3] = Mtr_CLK_23.gpioPin;
    b186:	6086      	str	r6, [r0, #8]
    static MotorManager *instance = new MotorManager();
    b188:	6008      	str	r0, [r1, #0]
      m_initialized(false) {
    b18a:	7043      	strb	r3, [r0, #1]
    m_stepPorts[MOTOR_M2M3] = Mtr_CLK_23.gpioPort;
    b18c:	70c3      	strb	r3, [r0, #3]
    static MotorManager *instance = new MotorManager();
    b18e:	602b      	str	r3, [r5, #0]
    m_motorModes[MOTOR_M0M1] = Connector::CPM_MODE_A_DIRECT_B_DIRECT;
    b190:	7302      	strb	r2, [r0, #12]
    m_motorModes[MOTOR_M2M3] = Connector::CPM_MODE_A_DIRECT_B_DIRECT;
    b192:	7342      	strb	r2, [r0, #13]
}
    b194:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    b196:	bf00      	nop
    b198:	20001c00 	.word	0x20001c00
    b19c:	20001c08 	.word	0x20001c08

0000b1a0 <_ZN9ClearCore12MotorManager18MotorInputClockingENS0_15MotorClockRatesE>:
    Set the motor pulse rate.

    Returns true if successfully set.
**/
bool MotorManager::MotorInputClocking(MotorClockRates newRate) {
    if (m_clockRate == newRate && m_initialized) {
    b1a0:	7843      	ldrb	r3, [r0, #1]
    b1a2:	428b      	cmp	r3, r1
    b1a4:	d06d      	beq.n	b282 <_ZN9ClearCore12MotorManager18MotorInputClockingENS0_15MotorClockRatesE+0xe2>
    }

    uint32_t clkReq;
    bool modeValid = true;

    switch (newRate) {
    b1a6:	2901      	cmp	r1, #1
bool MotorManager::MotorInputClocking(MotorClockRates newRate) {
    b1a8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    switch (newRate) {
    b1ac:	d071      	beq.n	b292 <_ZN9ClearCore12MotorManager18MotorInputClockingENS0_15MotorClockRatesE+0xf2>
    b1ae:	d363      	bcc.n	b278 <_ZN9ClearCore12MotorManager18MotorInputClockingENS0_15MotorClockRatesE+0xd8>
    b1b0:	2902      	cmp	r1, #2
    b1b2:	d16b      	bne.n	b28c <_ZN9ClearCore12MotorManager18MotorInputClockingENS0_15MotorClockRatesE+0xec>
            break;
        case CLOCK_RATE_NORMAL:
            clkReq = CPM_CLOCK_RATE_NORMAL_HZ;
            break;
        case CLOCK_RATE_HIGH:
            clkReq = CPM_CLOCK_RATE_HIGH_HZ;
    b1b4:	4e39      	ldr	r6, [pc, #228]	; (b29c <_ZN9ClearCore12MotorManager18MotorInputClockingENS0_15MotorClockRatesE+0xfc>)
    switch (newRate) {
    b1b6:	f240 188f 	movw	r8, #399	; 0x18f
    b1ba:	f44f 77c8 	mov.w	r7, #400	; 0x190

    // Mode change successful; update the step rate.
    m_clockRate = newRate;

    // Configure TCC0 for the step step carrier signal
    TCC0->CTRLA.bit.ENABLE = 0; // Disable TCC0
    b1be:	4a38      	ldr	r2, [pc, #224]	; (b2a0 <_ZN9ClearCore12MotorManager18MotorInputClockingENS0_15MotorClockRatesE+0x100>)
    m_clockRate = newRate;
    b1c0:	7041      	strb	r1, [r0, #1]
    TCC0->CTRLA.bit.ENABLE = 0; // Disable TCC0
    b1c2:	6814      	ldr	r4, [r2, #0]
    TCC1->CTRLA.bit.ENABLE = 0; // Disable TCC1
    b1c4:	4b37      	ldr	r3, [pc, #220]	; (b2a4 <_ZN9ClearCore12MotorManager18MotorInputClockingENS0_15MotorClockRatesE+0x104>)
    TCC0->CTRLA.bit.ENABLE = 0; // Disable TCC0
    b1c6:	f36f 0441 	bfc	r4, #1, #1
    b1ca:	6014      	str	r4, [r2, #0]
    TCC1->CTRLA.bit.ENABLE = 0; // Disable TCC1
    b1cc:	681c      	ldr	r4, [r3, #0]
    b1ce:	f36f 0441 	bfc	r4, #1, #1
    b1d2:	601c      	str	r4, [r3, #0]

    SYNCBUSY_WAIT(TCC0, TCC_SYNCBUSY_ENABLE);
    b1d4:	6893      	ldr	r3, [r2, #8]
    b1d6:	079c      	lsls	r4, r3, #30
    b1d8:	d4fc      	bmi.n	b1d4 <_ZN9ClearCore12MotorManager18MotorInputClockingENS0_15MotorClockRatesE+0x34>
    SYNCBUSY_WAIT(TCC1, TCC_SYNCBUSY_ENABLE);
    b1da:	4d32      	ldr	r5, [pc, #200]	; (b2a4 <_ZN9ClearCore12MotorManager18MotorInputClockingENS0_15MotorClockRatesE+0x104>)
    b1dc:	68ac      	ldr	r4, [r5, #8]
    b1de:	f014 0402 	ands.w	r4, r4, #2
    b1e2:	d1fb      	bne.n	b1dc <_ZN9ClearCore12MotorManager18MotorInputClockingENS0_15MotorClockRatesE+0x3c>

    GClkFreqUpdate(m_gclkIndex, clkReq);
    b1e4:	4631      	mov	r1, r6
    b1e6:	7800      	ldrb	r0, [r0, #0]
    b1e8:	4e2f      	ldr	r6, [pc, #188]	; (b2a8 <_ZN9ClearCore12MotorManager18MotorInputClockingENS0_15MotorClockRatesE+0x108>)
    b1ea:	f000 fead 	bl	bf48 <GClkFreqUpdate>
    TCC0->COUNT.reg = 0;
    TCC1->COUNT.reg = 0;

    // Clear out any pending command
    for (int8_t iChannel = 0; iChannel < TCC0_CC_NUM; iChannel++) {
        TCC0->CC[iChannel].reg = 0;
    b1ee:	492f      	ldr	r1, [pc, #188]	; (b2ac <_ZN9ClearCore12MotorManager18MotorInputClockingENS0_15MotorClockRatesE+0x10c>)
    b1f0:	4a2f      	ldr	r2, [pc, #188]	; (b2b0 <_ZN9ClearCore12MotorManager18MotorInputClockingENS0_15MotorClockRatesE+0x110>)
    TCC0->COUNT.reg = 0;
    b1f2:	4b2b      	ldr	r3, [pc, #172]	; (b2a0 <_ZN9ClearCore12MotorManager18MotorInputClockingENS0_15MotorClockRatesE+0x100>)
        TCC0->CC[iChannel].reg = 0;
    b1f4:	482f      	ldr	r0, [pc, #188]	; (b2b4 <_ZN9ClearCore12MotorManager18MotorInputClockingENS0_15MotorClockRatesE+0x114>)
    TCC0->COUNT.reg = 0;
    b1f6:	635c      	str	r4, [r3, #52]	; 0x34
    TCC1->COUNT.reg = 0;
    b1f8:	636c      	str	r4, [r5, #52]	; 0x34
        TCC0->CC[iChannel].reg = 0;
    b1fa:	645c      	str	r4, [r3, #68]	; 0x44
        TCC0->CCBUF[iChannel].reg = 0;
    b1fc:	671c      	str	r4, [r3, #112]	; 0x70
        TCC0->CC[iChannel].reg = 0;
    b1fe:	644c      	str	r4, [r1, #68]	; 0x44
        TCC0->CCBUF[iChannel].reg = 0;
    b200:	670c      	str	r4, [r1, #112]	; 0x70
        TCC0->CC[iChannel].reg = 0;
    b202:	6454      	str	r4, [r2, #68]	; 0x44
        TCC0->CCBUF[iChannel].reg = 0;
    b204:	6714      	str	r4, [r2, #112]	; 0x70
        TCC0->CC[iChannel].reg = 0;
    b206:	6444      	str	r4, [r0, #68]	; 0x44
        TCC0->CCBUF[iChannel].reg = 0;
    b208:	6704      	str	r4, [r0, #112]	; 0x70
        TCC0->CC[iChannel].reg = 0;
    b20a:	650c      	str	r4, [r1, #80]	; 0x50
    }

    for (int8_t iChannel = 0; iChannel < TCC1_CC_NUM; iChannel++) {
        TCC1->CC[iChannel].reg = 0;
    b20c:	f500 50ff 	add.w	r0, r0, #8160	; 0x1fe0
        TCC0->CCBUF[iChannel].reg = 0;
    b210:	67cc      	str	r4, [r1, #124]	; 0x7c
        TCC0->CC[iChannel].reg = 0;
    b212:	6514      	str	r4, [r2, #80]	; 0x50
        TCC1->CC[iChannel].reg = 0;
    b214:	f501 5100 	add.w	r1, r1, #8192	; 0x2000
        TCC0->CCBUF[iChannel].reg = 0;
    b218:	67d4      	str	r4, [r2, #124]	; 0x7c
        TCC1->CC[iChannel].reg = 0;
    b21a:	f502 5200 	add.w	r2, r2, #8192	; 0x2000
    b21e:	3018      	adds	r0, #24
    b220:	3104      	adds	r1, #4
    b222:	3204      	adds	r2, #4
    b224:	646c      	str	r4, [r5, #68]	; 0x44
        TCC1->CCBUF[iChannel].reg = 0;
    b226:	672c      	str	r4, [r5, #112]	; 0x70
        TCC1->CC[iChannel].reg = 0;
    b228:	6444      	str	r4, [r0, #68]	; 0x44
        TCC1->CCBUF[iChannel].reg = 0;
    b22a:	6704      	str	r4, [r0, #112]	; 0x70
        TCC1->CC[iChannel].reg = 0;
    b22c:	644c      	str	r4, [r1, #68]	; 0x44
        TCC1->CCBUF[iChannel].reg = 0;
    b22e:	670c      	str	r4, [r1, #112]	; 0x70
        TCC1->CC[iChannel].reg = 0;
    b230:	6454      	str	r4, [r2, #68]	; 0x44
        TCC1->CCBUF[iChannel].reg = 0;
    b232:	6714      	str	r4, [r2, #112]	; 0x70
    }

    TCC0->PER.reg = newPeriod - 1;
    b234:	f8c3 8040 	str.w	r8, [r3, #64]	; 0x40
    b238:	f106 0410 	add.w	r4, r6, #16
    TCC1->PER.reg = newPeriod - 1;
    b23c:	f8c5 8040 	str.w	r8, [r5, #64]	; 0x40

    // Notify the StepGenerators of the new maximum rate
    for (uint8_t iMotor = 0; iMotor < MOTOR_CON_CNT; iMotor++) {
        MotorConnectors[iMotor]->StepsPerSampleMaxSet(newPeriod);
    b240:	f856 0b04 	ldr.w	r0, [r6], #4
    b244:	4639      	mov	r1, r7
    b246:	3030      	adds	r0, #48	; 0x30
    b248:	f000 fcb2 	bl	bbb0 <_ZN9ClearCore13StepGenerator20StepsPerSampleMaxSetEm>
    for (uint8_t iMotor = 0; iMotor < MOTOR_CON_CNT; iMotor++) {
    b24c:	42b4      	cmp	r4, r6
    b24e:	d1f7      	bne.n	b240 <_ZN9ClearCore12MotorManager18MotorInputClockingENS0_15MotorClockRatesE+0xa0>
    }

    TCC0->CTRLA.bit.ENABLE = 1; // Enable TCC0
    b250:	4a13      	ldr	r2, [pc, #76]	; (b2a0 <_ZN9ClearCore12MotorManager18MotorInputClockingENS0_15MotorClockRatesE+0x100>)
    TCC1->CTRLA.bit.ENABLE = 1; // Enable TCC1
    b252:	4914      	ldr	r1, [pc, #80]	; (b2a4 <_ZN9ClearCore12MotorManager18MotorInputClockingENS0_15MotorClockRatesE+0x104>)
    TCC0->CTRLA.bit.ENABLE = 1; // Enable TCC0
    b254:	6813      	ldr	r3, [r2, #0]
    b256:	f043 0302 	orr.w	r3, r3, #2
    b25a:	6013      	str	r3, [r2, #0]
    TCC1->CTRLA.bit.ENABLE = 1; // Enable TCC1
    b25c:	680b      	ldr	r3, [r1, #0]
    b25e:	f043 0302 	orr.w	r3, r3, #2
    b262:	600b      	str	r3, [r1, #0]

    SYNCBUSY_WAIT(TCC0, TCC_SYNCBUSY_ENABLE);
    b264:	6893      	ldr	r3, [r2, #8]
    b266:	0799      	lsls	r1, r3, #30
    b268:	d4fc      	bmi.n	b264 <_ZN9ClearCore12MotorManager18MotorInputClockingENS0_15MotorClockRatesE+0xc4>
    SYNCBUSY_WAIT(TCC1, TCC_SYNCBUSY_ENABLE);
    b26a:	4a0e      	ldr	r2, [pc, #56]	; (b2a4 <_ZN9ClearCore12MotorManager18MotorInputClockingENS0_15MotorClockRatesE+0x104>)
    b26c:	6893      	ldr	r3, [r2, #8]
    b26e:	079b      	lsls	r3, r3, #30
    b270:	d4fc      	bmi.n	b26c <_ZN9ClearCore12MotorManager18MotorInputClockingENS0_15MotorClockRatesE+0xcc>

    return true;
    b272:	2001      	movs	r0, #1
    b274:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    switch (newRate) {
    b278:	f04f 0813 	mov.w	r8, #19
    b27c:	2714      	movs	r7, #20
            clkReq = CPM_CLOCK_RATE_LOW_HZ;
    b27e:	4e0e      	ldr	r6, [pc, #56]	; (b2b8 <_ZN9ClearCore12MotorManager18MotorInputClockingENS0_15MotorClockRatesE+0x118>)
    b280:	e79d      	b.n	b1be <_ZN9ClearCore12MotorManager18MotorInputClockingENS0_15MotorClockRatesE+0x1e>
    if (m_clockRate == newRate && m_initialized) {
    b282:	7b83      	ldrb	r3, [r0, #14]
    b284:	2b00      	cmp	r3, #0
    b286:	d08e      	beq.n	b1a6 <_ZN9ClearCore12MotorManager18MotorInputClockingENS0_15MotorClockRatesE+0x6>
        return false;
    b288:	2000      	movs	r0, #0
    b28a:	4770      	bx	lr
        return false;
    b28c:	2000      	movs	r0, #0
    b28e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    switch (newRate) {
    b292:	f04f 0863 	mov.w	r8, #99	; 0x63
    b296:	2764      	movs	r7, #100	; 0x64
            clkReq = CPM_CLOCK_RATE_NORMAL_HZ;
    b298:	4e08      	ldr	r6, [pc, #32]	; (b2bc <_ZN9ClearCore12MotorManager18MotorInputClockingENS0_15MotorClockRatesE+0x11c>)
    b29a:	e790      	b.n	b1be <_ZN9ClearCore12MotorManager18MotorInputClockingENS0_15MotorClockRatesE+0x1e>
    b29c:	001e8480 	.word	0x001e8480
    b2a0:	41016000 	.word	0x41016000
    b2a4:	41018000 	.word	0x41018000
    b2a8:	00022d9c 	.word	0x00022d9c
    b2ac:	41016004 	.word	0x41016004
    b2b0:	41016008 	.word	0x41016008
    b2b4:	4101600c 	.word	0x4101600c
    b2b8:	000186a0 	.word	0x000186a0
    b2bc:	0007a120 	.word	0x0007a120

0000b2c0 <_ZN9ClearCore12MotorManager12MotorModeSetENS0_9MotorPairENS_9Connector14ConnectorModesE>:
}

bool MotorManager::MotorModeSet(MotorPair motorPair,
                                Connector::ConnectorModes newMode) {
    if (motorPair == MOTOR_ALL) {
    b2c0:	2902      	cmp	r1, #2
                                Connector::ConnectorModes newMode) {
    b2c2:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    b2c6:	4606      	mov	r6, r0
    b2c8:	4615      	mov	r5, r2
    if (motorPair == MOTOR_ALL) {
    b2ca:	d036      	beq.n	b33a <_ZN9ClearCore12MotorManager12MotorModeSetENS0_9MotorPairENS_9Connector14ConnectorModesE+0x7a>
    b2cc:	460c      	mov	r4, r1
    b2ce:	f1a2 0709 	sub.w	r7, r2, #9
        return MotorModeSet(MOTOR_M0M1, newMode) &&
               MotorModeSet(MOTOR_M2M3, newMode);
    }

    switch (newMode) {
    b2d2:	2f03      	cmp	r7, #3
    b2d4:	d907      	bls.n	b2e6 <_ZN9ClearCore12MotorManager12MotorModeSetENS0_9MotorPairENS_9Connector14ConnectorModesE+0x26>
    b2d6:	1937      	adds	r7, r6, r4
            }
            break;
        default:
            break;
    }
    return (m_motorModes[motorPair] == newMode);
    b2d8:	7b38      	ldrb	r0, [r7, #12]
    b2da:	1b40      	subs	r0, r0, r5
    b2dc:	fab0 f080 	clz	r0, r0
    b2e0:	0940      	lsrs	r0, r0, #5
    b2e2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    b2e6:	f8df 90c0 	ldr.w	r9, [pc, #192]	; b3a8 <_ZN9ClearCore12MotorManager12MotorModeSetENS0_9MotorPairENS_9Connector14ConnectorModesE+0xe8>
            MotorConnectors[motorPair * 2]->Mode(newMode);
    b2ea:	ea4f 0844 	mov.w	r8, r4, lsl #1
            m_motorModes[motorPair] = newMode;
    b2ee:	1937      	adds	r7, r6, r4
            MotorConnectors[motorPair * 2]->Mode(newMode);
    b2f0:	f859 0028 	ldr.w	r0, [r9, r8, lsl #2]
            m_motorModes[motorPair] = newMode;
    b2f4:	733d      	strb	r5, [r7, #12]
            MotorConnectors[motorPair * 2]->Mode(newMode);
    b2f6:	6803      	ldr	r3, [r0, #0]
            MotorConnectors[motorPair * 2 + 1]->Mode(newMode);
    b2f8:	f108 0801 	add.w	r8, r8, #1
            MotorConnectors[motorPair * 2]->Mode(newMode);
    b2fc:	685b      	ldr	r3, [r3, #4]
    b2fe:	4629      	mov	r1, r5
    b300:	4798      	blx	r3
            MotorConnectors[motorPair * 2 + 1]->Mode(newMode);
    b302:	f859 0028 	ldr.w	r0, [r9, r8, lsl #2]
    b306:	6803      	ldr	r3, [r0, #0]
    b308:	4629      	mov	r1, r5
    b30a:	685b      	ldr	r3, [r3, #4]
    b30c:	4798      	blx	r3
                PMUX_ENABLE(m_stepPorts[motorPair],
    b30e:	eb06 0184 	add.w	r1, r6, r4, lsl #2
    b312:	f997 2002 	ldrsb.w	r2, [r7, #2]
    b316:	684b      	ldr	r3, [r1, #4]
    b318:	eb03 13c2 	add.w	r3, r3, r2, lsl #7
    b31c:	f103 4382 	add.w	r3, r3, #1090519040	; 0x41000000
    b320:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
            if (newMode == Connector::CPM_MODE_STEP_AND_DIR) {
    b324:	2d0a      	cmp	r5, #10
                PMUX_ENABLE(m_stepPorts[motorPair],
    b326:	f893 2040 	ldrb.w	r2, [r3, #64]	; 0x40
    b32a:	bf0c      	ite	eq
    b32c:	f042 0201 	orreq.w	r2, r2, #1
                PMUX_DISABLE(m_stepPorts[motorPair],
    b330:	f36f 0200 	bfcne	r2, #0, #1
    b334:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    b338:	e7ce      	b.n	b2d8 <_ZN9ClearCore12MotorManager12MotorModeSetENS0_9MotorPairENS_9Connector14ConnectorModesE+0x18>
    switch (newMode) {
    b33a:	f1a2 0709 	sub.w	r7, r2, #9
    b33e:	2f03      	cmp	r7, #3
    b340:	d907      	bls.n	b352 <_ZN9ClearCore12MotorManager12MotorModeSetENS0_9MotorPairENS_9Connector14ConnectorModesE+0x92>
        return MotorModeSet(MOTOR_M0M1, newMode) &&
    b342:	7b33      	ldrb	r3, [r6, #12]
    b344:	42ab      	cmp	r3, r5
    b346:	d002      	beq.n	b34e <_ZN9ClearCore12MotorManager12MotorModeSetENS0_9MotorPairENS_9Connector14ConnectorModesE+0x8e>
    b348:	2000      	movs	r0, #0
}
    b34a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    b34e:	2401      	movs	r4, #1
    b350:	e7bf      	b.n	b2d2 <_ZN9ClearCore12MotorManager12MotorModeSetENS0_9MotorPairENS_9Connector14ConnectorModesE+0x12>
            MotorConnectors[motorPair * 2]->Mode(newMode);
    b352:	f8df 9054 	ldr.w	r9, [pc, #84]	; b3a8 <_ZN9ClearCore12MotorManager12MotorModeSetENS0_9MotorPairENS_9Connector14ConnectorModesE+0xe8>
            m_motorModes[motorPair] = newMode;
    b356:	7332      	strb	r2, [r6, #12]
            MotorConnectors[motorPair * 2]->Mode(newMode);
    b358:	f8d9 0000 	ldr.w	r0, [r9]
    b35c:	6803      	ldr	r3, [r0, #0]
    b35e:	4611      	mov	r1, r2
    b360:	685b      	ldr	r3, [r3, #4]
    b362:	4798      	blx	r3
            MotorConnectors[motorPair * 2 + 1]->Mode(newMode);
    b364:	f8d9 0004 	ldr.w	r0, [r9, #4]
    b368:	6803      	ldr	r3, [r0, #0]
    b36a:	4629      	mov	r1, r5
    b36c:	685b      	ldr	r3, [r3, #4]
    b36e:	4798      	blx	r3
                PMUX_ENABLE(m_stepPorts[motorPair],
    b370:	f996 2002 	ldrsb.w	r2, [r6, #2]
    b374:	6873      	ldr	r3, [r6, #4]
    b376:	eb03 13c2 	add.w	r3, r3, r2, lsl #7
    b37a:	f103 4382 	add.w	r3, r3, #1090519040	; 0x41000000
    b37e:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
            if (newMode == Connector::CPM_MODE_STEP_AND_DIR) {
    b382:	2d0a      	cmp	r5, #10
                PMUX_ENABLE(m_stepPorts[motorPair],
    b384:	f893 2040 	ldrb.w	r2, [r3, #64]	; 0x40
            if (newMode == Connector::CPM_MODE_STEP_AND_DIR) {
    b388:	d004      	beq.n	b394 <_ZN9ClearCore12MotorManager12MotorModeSetENS0_9MotorPairENS_9Connector14ConnectorModesE+0xd4>
                PMUX_DISABLE(m_stepPorts[motorPair],
    b38a:	f36f 0200 	bfc	r2, #0, #1
    b38e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    b392:	e7d6      	b.n	b342 <_ZN9ClearCore12MotorManager12MotorModeSetENS0_9MotorPairENS_9Connector14ConnectorModesE+0x82>
                PMUX_ENABLE(m_stepPorts[motorPair],
    b394:	f042 0201 	orr.w	r2, r2, #1
    b398:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return MotorModeSet(MOTOR_M0M1, newMode) &&
    b39c:	7b33      	ldrb	r3, [r6, #12]
    b39e:	2b0a      	cmp	r3, #10
    b3a0:	d1d2      	bne.n	b348 <_ZN9ClearCore12MotorManager12MotorModeSetENS0_9MotorPairENS_9Connector14ConnectorModesE+0x88>
    b3a2:	2401      	movs	r4, #1
    b3a4:	e7a1      	b.n	b2ea <_ZN9ClearCore12MotorManager12MotorModeSetENS0_9MotorPairENS_9Connector14ConnectorModesE+0x2a>
    b3a6:	bf00      	nop
    b3a8:	00022d9c 	.word	0x00022d9c

0000b3ac <_ZN9ClearCore12MotorManager10InitializeEv>:

void MotorManager::Initialize() {
    b3ac:	b570      	push	{r4, r5, r6, lr}
    m_motorModes[MOTOR_M0M1] = Connector::CPM_MODE_A_DIRECT_B_DIRECT;
    b3ae:	2309      	movs	r3, #9
void MotorManager::Initialize() {
    b3b0:	4605      	mov	r5, r0
    m_motorModes[MOTOR_M0M1] = Connector::CPM_MODE_A_DIRECT_B_DIRECT;
    b3b2:	7303      	strb	r3, [r0, #12]
    m_motorModes[MOTOR_M2M3] = Connector::CPM_MODE_A_DIRECT_B_DIRECT;
    b3b4:	7343      	strb	r3, [r0, #13]
    MotorInputClocking(CLOCK_RATE_NORMAL); // This will set m_clockRate
    b3b6:	2101      	movs	r1, #1
    b3b8:	f7ff fef2 	bl	b1a0 <_ZN9ClearCore12MotorManager18MotorInputClockingENS0_15MotorClockRatesE>

    for (uint8_t i = 0; i < NUM_MOTOR_PAIRS; i++) {
        // Configure the GClk output pin that will be used as the CPM step
        // output carrier signal
        PIN_CONFIGURATION(m_stepPorts[i], m_stepDataBits[i],  0);
    b3bc:	f995 2002 	ldrsb.w	r2, [r5, #2]
    b3c0:	6868      	ldr	r0, [r5, #4]
    b3c2:	01d2      	lsls	r2, r2, #7
    b3c4:	f102 4382 	add.w	r3, r2, #1090519040	; 0x41000000
    b3c8:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
    b3cc:	181c      	adds	r4, r3, r0
        DATA_OUTPUT_STATE(m_stepPorts[i], 1UL << m_stepDataBits[i], false);
    b3ce:	2101      	movs	r1, #1
    b3d0:	4081      	lsls	r1, r0
        PIN_CONFIGURATION(m_stepPorts[i], m_stepDataBits[i],  0);
    b3d2:	2600      	movs	r6, #0
    b3d4:	f884 6040 	strb.w	r6, [r4, #64]	; 0x40
        DATA_OUTPUT_STATE(m_stepPorts[i], 1UL << m_stepDataBits[i], false);
    b3d8:	6159      	str	r1, [r3, #20]
        PMUX_SELECTION(m_stepPorts[i], m_stepDataBits[i], PER_GCLK_AC);
    b3da:	eb03 0350 	add.w	r3, r3, r0, lsr #1
    b3de:	f010 0f01 	tst.w	r0, #1
    b3e2:	f893 0030 	ldrb.w	r0, [r3, #48]	; 0x30
    b3e6:	f04f 040c 	mov.w	r4, #12
    b3ea:	bf0c      	ite	eq
    b3ec:	f364 0003 	bfieq	r0, r4, #0, #4
    b3f0:	f364 1007 	bfine	r0, r4, #4, #4
    b3f4:	f883 0030 	strb.w	r0, [r3, #48]	; 0x30
        DATA_DIRECTION_OUTPUT(m_stepPorts[i], 1UL << m_stepDataBits[i]);
    b3f8:	4b2d      	ldr	r3, [pc, #180]	; (b4b0 <_ZN9ClearCore12MotorManager10InitializeEv+0x104>)
    b3fa:	441a      	add	r2, r3
        DATA_OUTPUT_STATE(m_stepPorts[i], 1UL << m_stepDataBits[i], false);
    b3fc:	2001      	movs	r0, #1
        DATA_DIRECTION_OUTPUT(m_stepPorts[i], 1UL << m_stepDataBits[i]);
    b3fe:	6091      	str	r1, [r2, #8]
        PIN_CONFIGURATION(m_stepPorts[i], m_stepDataBits[i],  0);
    b400:	f995 2003 	ldrsb.w	r2, [r5, #3]
    b404:	68a9      	ldr	r1, [r5, #8]
    b406:	01d2      	lsls	r2, r2, #7
    b408:	4413      	add	r3, r2
    b40a:	185c      	adds	r4, r3, r1
        DATA_OUTPUT_STATE(m_stepPorts[i], 1UL << m_stepDataBits[i], false);
    b40c:	4088      	lsls	r0, r1
        PIN_CONFIGURATION(m_stepPorts[i], m_stepDataBits[i],  0);
    b40e:	2600      	movs	r6, #0
    b410:	f884 6040 	strb.w	r6, [r4, #64]	; 0x40
        DATA_OUTPUT_STATE(m_stepPorts[i], 1UL << m_stepDataBits[i], false);
    b414:	6158      	str	r0, [r3, #20]
        PMUX_SELECTION(m_stepPorts[i], m_stepDataBits[i], PER_GCLK_AC);
    b416:	eb03 0351 	add.w	r3, r3, r1, lsr #1
    b41a:	f011 0f01 	tst.w	r1, #1
    b41e:	f893 1030 	ldrb.w	r1, [r3, #48]	; 0x30
    b422:	4e24      	ldr	r6, [pc, #144]	; (b4b4 <_ZN9ClearCore12MotorManager10InitializeEv+0x108>)
    b424:	f04f 040c 	mov.w	r4, #12
    b428:	bf14      	ite	ne
    b42a:	f364 1107 	bfine	r1, r4, #4, #4
    b42e:	f364 0103 	bfieq	r1, r4, #0, #4
    b432:	f883 1030 	strb.w	r1, [r3, #48]	; 0x30
        DATA_DIRECTION_OUTPUT(m_stepPorts[i], 1UL << m_stepDataBits[i]);
    b436:	f102 4382 	add.w	r3, r2, #1090519040	; 0x41000000
    b43a:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
    b43e:	2400      	movs	r4, #0
    b440:	6098      	str	r0, [r3, #8]
    Helper function to control if the step rate signal is active
**/
void MotorManager::PinMuxSet() {
    // Configure the motor connectors to be in the specified mode
    for (uint8_t iMotor = 0; iMotor < MOTOR_CON_CNT; iMotor++) {
        MotorConnectors[iMotor]->Mode(m_motorModes[iMotor / 2]);
    b442:	f856 0b04 	ldr.w	r0, [r6], #4
    b446:	f3c4 0346 	ubfx	r3, r4, #1, #7
    b44a:	6802      	ldr	r2, [r0, #0]
    b44c:	442b      	add	r3, r5
    b44e:	6852      	ldr	r2, [r2, #4]
    b450:	7b19      	ldrb	r1, [r3, #12]
    b452:	3401      	adds	r4, #1
    b454:	4790      	blx	r2
    for (uint8_t iMotor = 0; iMotor < MOTOR_CON_CNT; iMotor++) {
    b456:	2c04      	cmp	r4, #4
    b458:	d1f3      	bne.n	b442 <_ZN9ClearCore12MotorManager10InitializeEv+0x96>
    }

    // Turn on the carrier signals for S&D if needed
    for (uint8_t iMotorPair = 0; iMotorPair < NUM_MOTOR_PAIRS; iMotorPair++) {
        if (m_motorModes[iMotorPair] == Connector::CPM_MODE_STEP_AND_DIR) {
    b45a:	7b2b      	ldrb	r3, [r5, #12]
            PMUX_ENABLE(m_stepPorts[iMotorPair], m_stepDataBits[iMotorPair]);
    b45c:	f995 2002 	ldrsb.w	r2, [r5, #2]
        if (m_motorModes[iMotorPair] == Connector::CPM_MODE_STEP_AND_DIR) {
    b460:	2b0a      	cmp	r3, #10
            PMUX_ENABLE(m_stepPorts[iMotorPair], m_stepDataBits[iMotorPair]);
    b462:	686b      	ldr	r3, [r5, #4]
    b464:	eb03 13c2 	add.w	r3, r3, r2, lsl #7
    b468:	f103 4382 	add.w	r3, r3, #1090519040	; 0x41000000
    b46c:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
    b470:	f893 2040 	ldrb.w	r2, [r3, #64]	; 0x40
        }
        else {
            PMUX_DISABLE(m_stepPorts[iMotorPair], m_stepDataBits[iMotorPair]);
    b474:	bf14      	ite	ne
    b476:	f36f 0200 	bfcne	r2, #0, #1
            PMUX_ENABLE(m_stepPorts[iMotorPair], m_stepDataBits[iMotorPair]);
    b47a:	f042 0201 	orreq.w	r2, r2, #1
    b47e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        if (m_motorModes[iMotorPair] == Connector::CPM_MODE_STEP_AND_DIR) {
    b482:	7b6b      	ldrb	r3, [r5, #13]
            PMUX_ENABLE(m_stepPorts[iMotorPair], m_stepDataBits[iMotorPair]);
    b484:	f995 2003 	ldrsb.w	r2, [r5, #3]
        if (m_motorModes[iMotorPair] == Connector::CPM_MODE_STEP_AND_DIR) {
    b488:	2b0a      	cmp	r3, #10
            PMUX_ENABLE(m_stepPorts[iMotorPair], m_stepDataBits[iMotorPair]);
    b48a:	68ab      	ldr	r3, [r5, #8]
    b48c:	eb03 13c2 	add.w	r3, r3, r2, lsl #7
    b490:	f103 4382 	add.w	r3, r3, #1090519040	; 0x41000000
    b494:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
    b498:	f893 2040 	ldrb.w	r2, [r3, #64]	; 0x40
    b49c:	bf0c      	ite	eq
    b49e:	f042 0201 	orreq.w	r2, r2, #1
            PMUX_DISABLE(m_stepPorts[iMotorPair], m_stepDataBits[iMotorPair]);
    b4a2:	f36f 0200 	bfcne	r2, #0, #1
    b4a6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    m_initialized = true;
    b4aa:	2301      	movs	r3, #1
    b4ac:	73ab      	strb	r3, [r5, #14]
    b4ae:	bd70      	pop	{r4, r5, r6, pc}
    b4b0:	41008000 	.word	0x41008000
    b4b4:	00022d9c 	.word	0x00022d9c

0000b4b8 <_GLOBAL__sub_I__ZN9ClearCore8MotorMgrE>:
        }
    }
}

    b4b8:	b508      	push	{r3, lr}
MotorManager &MotorMgr = MotorManager::Instance();
    b4ba:	f7ff fe4f 	bl	b15c <_ZN9ClearCore12MotorManager8InstanceEv>
    b4be:	4b01      	ldr	r3, [pc, #4]	; (b4c4 <_GLOBAL__sub_I__ZN9ClearCore8MotorMgrE+0xc>)
    b4c0:	6018      	str	r0, [r3, #0]
    b4c2:	bd08      	pop	{r3, pc}
    b4c4:	20001c04 	.word	0x20001c04

0000b4c8 <_ZN9ClearCore13StepGenerator4MoveElNS0_10MoveTargetE>:
/*
    This function commands a directional move.

    The function will return true if the move was accepted.
*/
bool StepGenerator::Move(int32_t dist, MoveTarget moveTarget) {
    b4c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    b4ca:	4604      	mov	r4, r0
  __ASM volatile ("cpsid i" : : : "memory");
    b4cc:	b672      	cpsid	i

    // Block the interrupt while changing the command
    __disable_irq();
    // Make relative moves be based off of current position during a velocity
    // move
    if (m_velocityMove) {
    b4ce:	f890 3020 	ldrb.w	r3, [r0, #32]
    b4d2:	b113      	cbz	r3, b4da <_ZN9ClearCore13StepGenerator4MoveElNS0_10MoveTargetE+0x12>
        m_stepsCommanded = 0;
    b4d4:	2300      	movs	r3, #0
    b4d6:	6183      	str	r3, [r0, #24]
        m_stepsSent = 0;
    b4d8:	61c3      	str	r3, [r0, #28]
    }
    switch (moveTarget) {
    b4da:	b362      	cbz	r2, b536 <_ZN9ClearCore13StepGenerator4MoveElNS0_10MoveTargetE+0x6e>
            // overflow, the scale shifts by the number of steps taken
            // So account for this, the current steps should be taken off of the
            // previous commanded amount, then the new command should be added
            // The steps send are in the direction of the commanded steps, subtract
            // that first. Steps taken is always less than commanded, result (+)
            m_stepsCommanded -= m_stepsSent;
    b4dc:	69a0      	ldr	r0, [r4, #24]
    b4de:	69e2      	ldr	r2, [r4, #28]
            // Convert magnitude + direction format to signed int
            m_stepsCommanded = m_direction ? -m_stepsCommanded : m_stepsCommanded ;
    b4e0:	7b63      	ldrb	r3, [r4, #13]
            m_stepsCommanded -= m_stepsSent;
    b4e2:	1a80      	subs	r0, r0, r2
            m_stepsCommanded = m_direction ? -m_stepsCommanded : m_stepsCommanded ;
    b4e4:	bb2b      	cbnz	r3, b532 <_ZN9ClearCore13StepGenerator4MoveElNS0_10MoveTargetE+0x6a>
            // Now stepsCommanded and distance are signed and in the global
            // direction. Add them
            m_stepsCommanded += dist;
    b4e6:	4408      	add	r0, r1
    // reduce chance of overflow
    m_stepsSent = 0;

    // Zero the integer portion of the current position. We want to keep
    // partial steps so movement is smooth.
    m_posnCurrentQx = m_posnCurrentQx & ~(UINT64_MAX << FRACT_BITS);
    b4e8:	e9d4 230e 	ldrd	r2, r3, [r4, #56]	; 0x38
    b4ec:	f647 76ff 	movw	r6, #32767	; 0x7fff
    b4f0:	2700      	movs	r7, #0
    b4f2:	4032      	ands	r2, r6
    b4f4:	403b      	ands	r3, r7
    m_stepsSent = 0;
    b4f6:	2500      	movs	r5, #0

    // Determine the direction of the movements.
    m_dirCommanded = m_stepsCommanded < 0;
    b4f8:	0fc1      	lsrs	r1, r0, #31
    m_posnCurrentQx = m_posnCurrentQx & ~(UINT64_MAX << FRACT_BITS);
    b4fa:	e9c4 230e 	strd	r2, r3, [r4, #56]	; 0x38
    m_stepsSent = 0;
    b4fe:	61e5      	str	r5, [r4, #28]
    m_dirCommanded = m_stepsCommanded < 0;
    b500:	f884 1022 	strb.w	r1, [r4, #34]	; 0x22
  template<typename _Tp>
    inline _GLIBCXX_CONSTEXPR
    typename __gnu_cxx::__enable_if<__is_integer<_Tp>::__value,
                                    double>::__type
    abs(_Tp __x)
    { return __builtin_fabs(__x); }
    b504:	f010 fa5c 	bl	1b9c0 <__aeabi_i2d>
    b508:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000

    // Steps commanded now needs to be a positive value.
    m_stepsCommanded = abs(m_stepsCommanded);
    b50c:	4619      	mov	r1, r3
    b50e:	f010 fd57 	bl	1bfc0 <__aeabi_d2iz>
            Used to latch limits so a move followed immediate by a limit change
            is not used until the next move
        **/
        void UpdatePendingMoveLimits()
        {
            m_velLimitQx = m_velLimitPendingQx;
    b512:	6e27      	ldr	r7, [r4, #96]	; 0x60
            m_altVelLimitQx = m_altVelLimitPendingQx;
    b514:	6e66      	ldr	r6, [r4, #100]	; 0x64
            m_accelLimitQx = m_accelLimitPendingQx;
    b516:	6ea1      	ldr	r1, [r4, #104]	; 0x68
            m_altDecelLimitQx = m_altDecelLimitPendingQx;
    b518:	6ee2      	ldr	r2, [r4, #108]	; 0x6c

    m_velocityMove = false;
    b51a:	f884 5020 	strb.w	r5, [r4, #32]
    UpdatePendingMoveLimits();
    m_moveState = MS_START;
    b51e:	2301      	movs	r3, #1
    m_stepsCommanded = abs(m_stepsCommanded);
    b520:	61a0      	str	r0, [r4, #24]
            m_velLimitQx = m_velLimitPendingQx;
    b522:	6267      	str	r7, [r4, #36]	; 0x24
            m_altVelLimitQx = m_altVelLimitPendingQx;
    b524:	62a6      	str	r6, [r4, #40]	; 0x28
            m_accelLimitQx = m_accelLimitPendingQx;
    b526:	62e1      	str	r1, [r4, #44]	; 0x2c
            m_altDecelLimitQx = m_altDecelLimitPendingQx;
    b528:	6322      	str	r2, [r4, #48]	; 0x30
    m_moveState = MS_START;
    b52a:	7323      	strb	r3, [r4, #12]
  __ASM volatile ("cpsie i" : : : "memory");
    b52c:	b662      	cpsie	i

    __enable_irq();
    return true;
}
    b52e:	4618      	mov	r0, r3
    b530:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
            m_stepsCommanded = m_direction ? -m_stepsCommanded : m_stepsCommanded ;
    b532:	4240      	negs	r0, r0
    b534:	e7d7      	b.n	b4e6 <_ZN9ClearCore13StepGenerator4MoveElNS0_10MoveTargetE+0x1e>
            m_stepsCommanded = dist - m_posnAbsolute;
    b536:	6960      	ldr	r0, [r4, #20]
    b538:	1a08      	subs	r0, r1, r0
            break;
    b53a:	e7d5      	b.n	b4e8 <_ZN9ClearCore13StepGenerator4MoveElNS0_10MoveTargetE+0x20>

0000b53c <_ZN9ClearCore13StepGenerator12MoveVelocityEl>:

/*
    This function commands a velocity move.
    If there is a current move, it will be overwritten.
*/
bool StepGenerator::MoveVelocity(int32_t velocity) {
    b53c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    b53e:	4604      	mov	r4, r0
  __ASM volatile ("cpsid i" : : : "memory");
    b540:	b672      	cpsid	i
    // Block the interrupt while changing the command
    __disable_irq();
    m_dirCommanded = (velocity < 0);

    m_velocityMove = true;
    b542:	2301      	movs	r3, #1
    m_dirCommanded = (velocity < 0);
    b544:	0fca      	lsrs	r2, r1, #31
    b546:	f880 2022 	strb.w	r2, [r0, #34]	; 0x22
    m_velocityMove = true;
    b54a:	f884 3020 	strb.w	r3, [r4, #32]
    b54e:	4608      	mov	r0, r1
    b550:	f010 fa36 	bl	1b9c0 <__aeabi_i2d>
    b554:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000

    int32_t velAbsolute = abs(velocity);
    b558:	4619      	mov	r1, r3
    b55a:	f010 fd31 	bl	1bfc0 <__aeabi_d2iz>
    and sets AltVelLimitQx in step pulses/sample time.
*/
void StepGenerator::AltVelMax(int32_t velMax) {
    // Convert from step pulses/sec to step pulses/sample
    int64_t velLim64 =
        (static_cast<int64_t>(velMax) << FRACT_BITS) / SampleRateHz;
    b55e:	17c3      	asrs	r3, r0, #31
    b560:	03d9      	lsls	r1, r3, #15
    b562:	ea41 4150 	orr.w	r1, r1, r0, lsr #17
    b566:	f241 3288 	movw	r2, #5000	; 0x1388
    b56a:	2300      	movs	r3, #0
    b56c:	03c0      	lsls	r0, r0, #15
    b56e:	f010 fecd 	bl	1c30c <__aeabi_ldivmod>
    // Enforce the max steps per sample time
    velLim64 =
        min(velLim64, static_cast<int64_t>(m_stepsPerSampleMax) << FRACT_BITS);
    b572:	68a3      	ldr	r3, [r4, #8]
    // Ensure we didn't overflow 32-bit int
    m_altVelLimitPendingQx = min(velLim64, INT32_MAX);
    b574:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
        min(velLim64, static_cast<int64_t>(m_stepsPerSampleMax) << FRACT_BITS);
    b578:	03de      	lsls	r6, r3, #15
    b57a:	0c5f      	lsrs	r7, r3, #17
    m_altVelLimitPendingQx = min(velLim64, INT32_MAX);
    b57c:	42b2      	cmp	r2, r6
    b57e:	f04f 0300 	mov.w	r3, #0
    b582:	eb73 0507 	sbcs.w	r5, r3, r7
    b586:	bfbc      	itt	lt
    b588:	4616      	movlt	r6, r2
    b58a:	461f      	movlt	r7, r3
    b58c:	4286      	cmp	r6, r0
    b58e:	460b      	mov	r3, r1
    b590:	4602      	mov	r2, r0
    b592:	eb77 0103 	sbcs.w	r1, r7, r3
    m_posnCurrentQx &= ~(UINT64_MAX << FRACT_BITS);
    b596:	e9d4 010e 	ldrd	r0, r1, [r4, #56]	; 0x38
    m_altVelLimitPendingQx = min(velLim64, INT32_MAX);
    b59a:	bfb8      	it	lt
    b59c:	4632      	movlt	r2, r6
    m_posnCurrentQx &= ~(UINT64_MAX << FRACT_BITS);
    b59e:	2700      	movs	r7, #0
    b5a0:	f647 76ff 	movw	r6, #32767	; 0x7fff
    b5a4:	4030      	ands	r0, r6
    b5a6:	4039      	ands	r1, r7
            m_velLimitQx = m_velLimitPendingQx;
    b5a8:	6e26      	ldr	r6, [r4, #96]	; 0x60
            m_accelLimitQx = m_accelLimitPendingQx;
    b5aa:	6ea5      	ldr	r5, [r4, #104]	; 0x68
            m_altDecelLimitQx = m_altDecelLimitPendingQx;
    b5ac:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
    m_altVelLimitPendingQx = min(velLim64, INT32_MAX);
    b5ae:	6662      	str	r2, [r4, #100]	; 0x64
            m_altVelLimitQx = m_altVelLimitPendingQx;
    b5b0:	62a2      	str	r2, [r4, #40]	; 0x28
    m_stepsCommanded = INT32_MAX;
    b5b2:	f06f 4700 	mvn.w	r7, #2147483648	; 0x80000000
    m_stepsSent = 0;
    b5b6:	2200      	movs	r2, #0
    m_posnCurrentQx &= ~(UINT64_MAX << FRACT_BITS);
    b5b8:	e9c4 010e 	strd	r0, r1, [r4, #56]	; 0x38
    m_moveState = MS_START;
    b5bc:	2001      	movs	r0, #1
            m_velLimitQx = m_velLimitPendingQx;
    b5be:	6266      	str	r6, [r4, #36]	; 0x24
            m_accelLimitQx = m_accelLimitPendingQx;
    b5c0:	62e5      	str	r5, [r4, #44]	; 0x2c
            m_altDecelLimitQx = m_altDecelLimitPendingQx;
    b5c2:	6323      	str	r3, [r4, #48]	; 0x30
    m_stepsCommanded = INT32_MAX;
    b5c4:	61a7      	str	r7, [r4, #24]
    m_stepsSent = 0;
    b5c6:	61e2      	str	r2, [r4, #28]
    m_moveState = MS_START;
    b5c8:	7320      	strb	r0, [r4, #12]
  __ASM volatile ("cpsie i" : : : "memory");
    b5ca:	b662      	cpsie	i
}
    b5cc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    b5ce:	bf00      	nop

0000b5d0 <_ZN9ClearCore13StepGenerator15StepsCalculatedEv>:
void StepGenerator::StepsCalculated() {
    b5d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    if (m_moveState == MS_START) {
    b5d4:	7b03      	ldrb	r3, [r0, #12]
void StepGenerator::StepsCalculated() {
    b5d6:	ed2d 8b02 	vpush	{d8}
    if (m_moveState == MS_START) {
    b5da:	2b01      	cmp	r3, #1
void StepGenerator::StepsCalculated() {
    b5dc:	b085      	sub	sp, #20
    b5de:	4604      	mov	r4, r0
    if (m_moveState == MS_START) {
    b5e0:	d038      	beq.n	b654 <_ZN9ClearCore13StepGenerator15StepsCalculatedEv+0x84>
    switch (m_moveState) {
    b5e2:	2b07      	cmp	r3, #7
    b5e4:	f200 80da 	bhi.w	b79c <_ZN9ClearCore13StepGenerator15StepsCalculatedEv+0x1cc>
    b5e8:	e8df f013 	tbh	[pc, r3, lsl #1]
    b5ec:	00d8002f 	.word	0x00d8002f
    b5f0:	00be01d7 	.word	0x00be01d7
    b5f4:	025f0086 	.word	0x025f0086
    b5f8:	000800d8 	.word	0x000800d8
            if (m_direction == m_dirCommanded) {
    b5fc:	7b41      	ldrb	r1, [r0, #13]
    b5fe:	f890 3022 	ldrb.w	r3, [r0, #34]	; 0x22
    b602:	428b      	cmp	r3, r1
    b604:	f000 822d 	beq.w	ba62 <_ZN9ClearCore13StepGenerator15StepsCalculatedEv+0x492>
                m_stepsCommanded += m_stepsSent;
    b608:	6980      	ldr	r0, [r0, #24]
    b60a:	69e3      	ldr	r3, [r4, #28]
    b60c:	4418      	add	r0, r3
            m_posnCurrentQx = m_posnCurrentQx & ~(UINT64_MAX << FRACT_BITS);
    b60e:	e9d4 670e 	ldrd	r6, r7, [r4, #56]	; 0x38
    b612:	f647 72ff 	movw	r2, #32767	; 0x7fff
    b616:	2300      	movs	r3, #0
    b618:	4016      	ands	r6, r2
    b61a:	401f      	ands	r7, r3
    b61c:	e9c4 670e 	strd	r6, r7, [r4, #56]	; 0x38
            m_dirCommanded = !m_direction;
    b620:	f081 0201 	eor.w	r2, r1, #1
            m_moveState = MS_START;
    b624:	2501      	movs	r5, #1
            m_moveDirChange = false;
    b626:	2300      	movs	r3, #0
    b628:	61a0      	str	r0, [r4, #24]
            m_dirCommanded = !m_direction;
    b62a:	f884 2022 	strb.w	r2, [r4, #34]	; 0x22
            m_moveState = MS_START;
    b62e:	7325      	strb	r5, [r4, #12]
            m_moveDirChange = false;
    b630:	f884 3021 	strb.w	r3, [r4, #33]	; 0x21
    m_stepsPrevious = (m_posnCurrentQx >> FRACT_BITS) - m_stepsSent;
    b634:	0bf2      	lsrs	r2, r6, #15
    b636:	ea42 4247 	orr.w	r2, r2, r7, lsl #17
    b63a:	1ad3      	subs	r3, r2, r3
    m_stepsSent += m_stepsPrevious;
    b63c:	61e2      	str	r2, [r4, #28]
    m_stepsPrevious = (m_posnCurrentQx >> FRACT_BITS) - m_stepsSent;
    b63e:	6063      	str	r3, [r4, #4]
    m_posnAbsolute += m_direction ? -m_stepsPrevious : m_stepsPrevious;
    b640:	6962      	ldr	r2, [r4, #20]
    b642:	b101      	cbz	r1, b646 <_ZN9ClearCore13StepGenerator15StepsCalculatedEv+0x76>
    b644:	425b      	negs	r3, r3
    b646:	4413      	add	r3, r2
    b648:	6163      	str	r3, [r4, #20]
}
    b64a:	b005      	add	sp, #20
    b64c:	ecbd 8b02 	vpop	{d8}
    b650:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        m_posnTargetQx = static_cast<int64_t>(m_stepsCommanded)
    b654:	6982      	ldr	r2, [r0, #24]
        if (m_velocityMove) {
    b656:	f890 1020 	ldrb.w	r1, [r0, #32]
        m_accelCurrentQx = m_accelLimitQx;
    b65a:	f8d0 902c 	ldr.w	r9, [r0, #44]	; 0x2c
    b65e:	f8c0 9044 	str.w	r9, [r0, #68]	; 0x44
                         << FRACT_BITS;
    b662:	1457      	asrs	r7, r2, #17
    b664:	03d6      	lsls	r6, r2, #15
        m_posnTargetQx = static_cast<int64_t>(m_stepsCommanded)
    b666:	e9c0 6712 	strd	r6, r7, [r0, #72]	; 0x48
        if (m_velocityMove) {
    b66a:	2900      	cmp	r1, #0
    b66c:	d163      	bne.n	b736 <_ZN9ClearCore13StepGenerator15StepsCalculatedEv+0x166>
            if (m_velCurrentQx) {
    b66e:	6c05      	ldr	r5, [r0, #64]	; 0x40
    b670:	2d00      	cmp	r5, #0
    b672:	f000 8117 	beq.w	b8a4 <_ZN9ClearCore13StepGenerator15StepsCalculatedEv+0x2d4>
                if (m_direction == m_dirCommanded) {
    b676:	7b41      	ldrb	r1, [r0, #13]
    b678:	f890 2022 	ldrb.w	r2, [r0, #34]	; 0x22
    b67c:	9100      	str	r1, [sp, #0]
    b67e:	4291      	cmp	r1, r2
    b680:	f000 81f8 	beq.w	ba74 <_ZN9ClearCore13StepGenerator15StepsCalculatedEv+0x4a4>
                    m_moveDirChange = true;
    b684:	f880 3021 	strb.w	r3, [r0, #33]	; 0x21
                m_velTargetQx = 0;
    b688:	2000      	movs	r0, #0
                m_moveState = MS_DECEL_VEL;
    b68a:	2305      	movs	r3, #5
    b68c:	7323      	strb	r3, [r4, #12]
                m_velTargetQx = 0;
    b68e:	6520      	str	r0, [r4, #80]	; 0x50
    b690:	4682      	mov	sl, r0
            m_posnCurrentQx += m_velCurrentQx - (m_accelCurrentQx >> 1);
    b692:	e9d4 670e 	ldrd	r6, r7, [r4, #56]	; 0x38
    b696:	eba5 0369 	sub.w	r3, r5, r9, asr #1
    b69a:	18f6      	adds	r6, r6, r3
            m_velCurrentQx -= m_accelCurrentQx;
    b69c:	eba5 0509 	sub.w	r5, r5, r9
            m_posnCurrentQx += m_velCurrentQx - (m_accelCurrentQx >> 1);
    b6a0:	eb47 77e3 	adc.w	r7, r7, r3, asr #31
            if (m_velCurrentQx <= m_velTargetQx) {
    b6a4:	4555      	cmp	r5, sl
            m_posnCurrentQx += m_velCurrentQx - (m_accelCurrentQx >> 1);
    b6a6:	e9c4 670e 	strd	r6, r7, [r4, #56]	; 0x38
            m_velCurrentQx -= m_accelCurrentQx;
    b6aa:	6425      	str	r5, [r4, #64]	; 0x40
            if (m_velCurrentQx <= m_velTargetQx) {
    b6ac:	f300 80ab 	bgt.w	b806 <_ZN9ClearCore13StepGenerator15StepsCalculatedEv+0x236>
                    m_accelCurrentQx;
    b6b0:	464a      	mov	r2, r9
                uint32_t overshootQx = m_velTargetQx - m_velCurrentQx;
    b6b2:	ebaa 0505 	sub.w	r5, sl, r5
                    ((static_cast<uint64_t>(overshootQx)) << 32) /
    b6b6:	f04f 0900 	mov.w	r9, #0
                    m_accelCurrentQx;
    b6ba:	17d3      	asrs	r3, r2, #31
                m_velCurrentQx = m_velTargetQx;
    b6bc:	f8c4 a040 	str.w	sl, [r4, #64]	; 0x40
                    ((static_cast<uint64_t>(overshootQx)) << 32) /
    b6c0:	4629      	mov	r1, r5
    b6c2:	4648      	mov	r0, r9
                    m_accelCurrentQx;
    b6c4:	e9cd 2302 	strd	r2, r3, [sp, #8]
                    ((static_cast<uint64_t>(overshootQx)) << 32) /
    b6c8:	f010 fe70 	bl	1c3ac <__aeabi_uldivmod>
    b6cc:	17eb      	asrs	r3, r5, #31
                    (static_cast<uint64_t>(pctSampleOverQ32) * overshootQx) >>
    b6ce:	fba0 bc05 	umull	fp, ip, r0, r5
    b6d2:	fb00 cc03 	mla	ip, r0, r3, ip
    b6d6:	ea4f 025c 	mov.w	r2, ip, lsr #1
                m_posnCurrentQx += posnAdjQx;
    b6da:	18b6      	adds	r6, r6, r2
                if (m_moveDirChange) {
    b6dc:	f894 1021 	ldrb.w	r1, [r4, #33]	; 0x21
                m_posnCurrentQx += posnAdjQx;
    b6e0:	eb47 0709 	adc.w	r7, r7, r9
    b6e4:	e9c4 670e 	strd	r6, r7, [r4, #56]	; 0x38
                if (m_moveDirChange) {
    b6e8:	2900      	cmp	r1, #0
    b6ea:	f000 816e 	beq.w	b9ca <_ZN9ClearCore13StepGenerator15StepsCalculatedEv+0x3fa>
                    m_moveState = MS_CHANGE_DIR;
    b6ee:	2307      	movs	r3, #7
    b6f0:	7323      	strb	r3, [r4, #12]
    b6f2:	9900      	ldr	r1, [sp, #0]
    b6f4:	69e3      	ldr	r3, [r4, #28]
    b6f6:	e79d      	b.n	b634 <_ZN9ClearCore13StepGenerator15StepsCalculatedEv+0x64>
            m_posnCurrentQx += m_velCurrentQx - (m_accelCurrentQx >> 1);
    b6f8:	6c01      	ldr	r1, [r0, #64]	; 0x40
    b6fa:	6c40      	ldr	r0, [r0, #68]	; 0x44
    b6fc:	e9d4 230e 	ldrd	r2, r3, [r4, #56]	; 0x38
            if ((m_posnCurrentQx >= m_posnTargetQx) || (m_velCurrentQx <= 0) ||
    b700:	e9d4 6712 	ldrd	r6, r7, [r4, #72]	; 0x48
            m_posnCurrentQx += m_velCurrentQx - (m_accelCurrentQx >> 1);
    b704:	eba1 0560 	sub.w	r5, r1, r0, asr #1
    b708:	1952      	adds	r2, r2, r5
    b70a:	eb43 73e5 	adc.w	r3, r3, r5, asr #31
            if ((m_posnCurrentQx >= m_posnTargetQx) || (m_velCurrentQx <= 0) ||
    b70e:	42b2      	cmp	r2, r6
            m_velCurrentQx -= m_accelCurrentQx;
    b710:	eba1 0100 	sub.w	r1, r1, r0
            if ((m_posnCurrentQx >= m_posnTargetQx) || (m_velCurrentQx <= 0) ||
    b714:	eb73 0007 	sbcs.w	r0, r3, r7
            m_velCurrentQx -= m_accelCurrentQx;
    b718:	6421      	str	r1, [r4, #64]	; 0x40
            m_posnCurrentQx += m_velCurrentQx - (m_accelCurrentQx >> 1);
    b71a:	e9c4 230e 	strd	r2, r3, [r4, #56]	; 0x38
            if ((m_posnCurrentQx >= m_posnTargetQx) || (m_velCurrentQx <= 0) ||
    b71e:	da54      	bge.n	b7ca <_ZN9ClearCore13StepGenerator15StepsCalculatedEv+0x1fa>
    b720:	2900      	cmp	r1, #0
    b722:	dd52      	ble.n	b7ca <_ZN9ClearCore13StepGenerator15StepsCalculatedEv+0x1fa>
    b724:	2a01      	cmp	r2, #1
    b726:	f173 0100 	sbcs.w	r1, r3, #0
    b72a:	db4e      	blt.n	b7ca <_ZN9ClearCore13StepGenerator15StepsCalculatedEv+0x1fa>
    b72c:	461f      	mov	r7, r3
    b72e:	4616      	mov	r6, r2
    b730:	69e3      	ldr	r3, [r4, #28]
    b732:	7b61      	ldrb	r1, [r4, #13]
    b734:	e77e      	b.n	b634 <_ZN9ClearCore13StepGenerator15StepsCalculatedEv+0x64>
            if (m_altVelLimitQx && m_velCurrentQx && m_direction != m_dirCommanded) {
    b736:	6a83      	ldr	r3, [r0, #40]	; 0x28
    b738:	6c05      	ldr	r5, [r0, #64]	; 0x40
    b73a:	2b00      	cmp	r3, #0
    b73c:	f000 80a1 	beq.w	b882 <_ZN9ClearCore13StepGenerator15StepsCalculatedEv+0x2b2>
    b740:	2d00      	cmp	r5, #0
    b742:	f040 8130 	bne.w	b9a6 <_ZN9ClearCore13StepGenerator15StepsCalculatedEv+0x3d6>
    b746:	f890 2022 	ldrb.w	r2, [r0, #34]	; 0x22
                OutputDirection();
    b74a:	6820      	ldr	r0, [r4, #0]
    b74c:	6523      	str	r3, [r4, #80]	; 0x50
    b74e:	2100      	movs	r1, #0
    b750:	6883      	ldr	r3, [r0, #8]
                m_direction = m_dirCommanded;
    b752:	7362      	strb	r2, [r4, #13]
    b754:	f884 1021 	strb.w	r1, [r4, #33]	; 0x21
                OutputDirection();
    b758:	4620      	mov	r0, r4
    b75a:	4798      	blx	r3
    b75c:	7b63      	ldrb	r3, [r4, #13]
    b75e:	f8d4 a050 	ldr.w	sl, [r4, #80]	; 0x50
    b762:	6c25      	ldr	r5, [r4, #64]	; 0x40
    b764:	9300      	str	r3, [sp, #0]
    b766:	e094      	b.n	b892 <_ZN9ClearCore13StepGenerator15StepsCalculatedEv+0x2c2>
    b768:	e9d0 670e 	ldrd	r6, r7, [r0, #56]	; 0x38
    b76c:	7b43      	ldrb	r3, [r0, #13]
    b76e:	f8d0 a040 	ldr.w	sl, [r0, #64]	; 0x40
    b772:	9300      	str	r3, [sp, #0]
            m_posnCurrentQx += m_velCurrentQx;
    b774:	4652      	mov	r2, sl
    b776:	eb16 060a 	adds.w	r6, r6, sl
    b77a:	ea4f 73e2 	mov.w	r3, r2, asr #31
            if (m_velocityMove) {
    b77e:	f894 1020 	ldrb.w	r1, [r4, #32]
            m_posnCurrentQx += m_velCurrentQx;
    b782:	415f      	adcs	r7, r3
    b784:	e9c4 670e 	strd	r6, r7, [r4, #56]	; 0x38
            if (m_velocityMove) {
    b788:	2900      	cmp	r1, #0
    b78a:	d03f      	beq.n	b80c <_ZN9ClearCore13StepGenerator15StepsCalculatedEv+0x23c>
                if (!m_velCurrentQx) {
    b78c:	f1ba 0f00 	cmp.w	sl, #0
    b790:	d139      	bne.n	b806 <_ZN9ClearCore13StepGenerator15StepsCalculatedEv+0x236>
                    m_moveState = MS_END;
    b792:	2306      	movs	r3, #6
    b794:	7323      	strb	r3, [r4, #12]
    b796:	9900      	ldr	r1, [sp, #0]
    b798:	69e3      	ldr	r3, [r4, #28]
    b79a:	e74b      	b.n	b634 <_ZN9ClearCore13StepGenerator15StepsCalculatedEv+0x64>
            m_limitInfo.LimitRampPos = false;
    b79c:	7c02      	ldrb	r2, [r0, #16]
            m_velCurrentQx = 0;
    b79e:	2300      	movs	r3, #0
            m_limitInfo.LimitRampNeg = false;
    b7a0:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
    b7a4:	f363 0241 	bfi	r2, r3, #1, #1
            m_posnCurrentQx = 0;
    b7a8:	2000      	movs	r0, #0
    b7aa:	2100      	movs	r1, #0
            m_limitInfo.LimitRampNeg = false;
    b7ac:	7422      	strb	r2, [r4, #16]
            m_velCurrentQx = 0;
    b7ae:	6423      	str	r3, [r4, #64]	; 0x40
            m_stepsSent = 0;
    b7b0:	61e3      	str	r3, [r4, #28]
            m_stepsPrevious = 0;
    b7b2:	6063      	str	r3, [r4, #4]
            m_stepsCommanded = 0;
    b7b4:	61a3      	str	r3, [r4, #24]
            m_moveState = MS_IDLE;
    b7b6:	7323      	strb	r3, [r4, #12]
            m_velocityMove = false;
    b7b8:	f884 3020 	strb.w	r3, [r4, #32]
            m_posnCurrentQx = 0;
    b7bc:	e9c4 010e 	strd	r0, r1, [r4, #56]	; 0x38
}
    b7c0:	b005      	add	sp, #20
    b7c2:	ecbd 8b02 	vpop	{d8}
    b7c6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
                m_accelCurrentQx = 0;
    b7ca:	2300      	movs	r3, #0
                m_moveState = MS_END;
    b7cc:	2206      	movs	r2, #6
                m_accelCurrentQx = 0;
    b7ce:	6463      	str	r3, [r4, #68]	; 0x44
                m_velCurrentQx = 0;
    b7d0:	6423      	str	r3, [r4, #64]	; 0x40
                m_posnCurrentQx = m_posnTargetQx;
    b7d2:	e9c4 670e 	strd	r6, r7, [r4, #56]	; 0x38
                m_moveState = MS_END;
    b7d6:	7322      	strb	r2, [r4, #12]
    b7d8:	69e3      	ldr	r3, [r4, #28]
    b7da:	7b61      	ldrb	r1, [r4, #13]
    b7dc:	e72a      	b.n	b634 <_ZN9ClearCore13StepGenerator15StepsCalculatedEv+0x64>
                m_moveState = MS_ACCEL;
    b7de:	2302      	movs	r3, #2
    b7e0:	7323      	strb	r3, [r4, #12]
            m_posnCurrentQx += m_velCurrentQx + (m_accelCurrentQx >> 1);
    b7e2:	e9d4 670e 	ldrd	r6, r7, [r4, #56]	; 0x38
    b7e6:	6c63      	ldr	r3, [r4, #68]	; 0x44
    b7e8:	eb05 0263 	add.w	r2, r5, r3, asr #1
    b7ec:	18b6      	adds	r6, r6, r2
            m_velCurrentQx += m_accelCurrentQx;
    b7ee:	441d      	add	r5, r3
            m_posnCurrentQx += m_velCurrentQx + (m_accelCurrentQx >> 1);
    b7f0:	eb47 77e2 	adc.w	r7, r7, r2, asr #31
            if (m_velCurrentQx >= m_velTargetQx || m_velCurrentQx <= 0) {
    b7f4:	4555      	cmp	r5, sl
            m_velCurrentQx += m_accelCurrentQx;
    b7f6:	6425      	str	r5, [r4, #64]	; 0x40
            m_posnCurrentQx += m_velCurrentQx + (m_accelCurrentQx >> 1);
    b7f8:	e9c4 670e 	strd	r6, r7, [r4, #56]	; 0x38
            if (m_velCurrentQx >= m_velTargetQx || m_velCurrentQx <= 0) {
    b7fc:	f280 80a2 	bge.w	b944 <_ZN9ClearCore13StepGenerator15StepsCalculatedEv+0x374>
    b800:	2d00      	cmp	r5, #0
    b802:	f340 809f 	ble.w	b944 <_ZN9ClearCore13StepGenerator15StepsCalculatedEv+0x374>
    b806:	9900      	ldr	r1, [sp, #0]
    b808:	69e3      	ldr	r3, [r4, #28]
    b80a:	e713      	b.n	b634 <_ZN9ClearCore13StepGenerator15StepsCalculatedEv+0x64>
            if (m_posnCurrentQx >= m_posnDecelQx || m_posnCurrentQx <= 0) {
    b80c:	e9d4 0116 	ldrd	r0, r1, [r4, #88]	; 0x58
    b810:	4286      	cmp	r6, r0
    b812:	eb77 0501 	sbcs.w	r5, r7, r1
    b816:	da03      	bge.n	b820 <_ZN9ClearCore13StepGenerator15StepsCalculatedEv+0x250>
    b818:	2e01      	cmp	r6, #1
    b81a:	f177 0500 	sbcs.w	r5, r7, #0
    b81e:	daf2      	bge.n	b806 <_ZN9ClearCore13StepGenerator15StepsCalculatedEv+0x236>
                    (overshootQx << 32) / m_velCurrentQx;
    b820:	2500      	movs	r5, #0
    b822:	1a31      	subs	r1, r6, r0
    b824:	4628      	mov	r0, r5
    b826:	f010 fdc1 	bl	1c3ac <__aeabi_uldivmod>
                                     m_accelCurrentQx) >> 32;
    b82a:	6c62      	ldr	r2, [r4, #68]	; 0x44
                uint32_t velAdjQx = (static_cast<uint64_t>(pctSampleOverQ32) *
    b82c:	fba2 8900 	umull	r8, r9, r2, r0
                                     m_accelCurrentQx) >> 32;
    b830:	17d3      	asrs	r3, r2, #31
                uint32_t velAdjQx = (static_cast<uint64_t>(pctSampleOverQ32) *
    b832:	fb00 9e03 	mla	lr, r0, r3, r9
    b836:	4683      	mov	fp, r0
                    (static_cast<uint64_t>(pctSampleOverQ32) * velAdjQx) >> 33;
    b838:	fbae 230b 	umull	r2, r3, lr, fp
                uint32_t velAdjQx = (static_cast<uint64_t>(pctSampleOverQ32) *
    b83c:	f04f 0c00 	mov.w	ip, #0
                    (static_cast<uint64_t>(pctSampleOverQ32) * velAdjQx) >> 33;
    b840:	fb0e 330c 	mla	r3, lr, ip, r3
    b844:	0858      	lsrs	r0, r3, #1
                m_posnCurrentQx -= posnAdjQx;
    b846:	1a32      	subs	r2, r6, r0
    b848:	eb67 0305 	sbc.w	r3, r7, r5
                if ((m_posnCurrentQx >= m_posnTargetQx) ||
    b84c:	e9d4 6712 	ldrd	r6, r7, [r4, #72]	; 0x48
    b850:	42b2      	cmp	r2, r6
                m_velCurrentQx -= velAdjQx;
    b852:	ebaa 000e 	sub.w	r0, sl, lr
                if ((m_posnCurrentQx >= m_posnTargetQx) ||
    b856:	eb73 0107 	sbcs.w	r1, r3, r7
                m_velCurrentQx -= velAdjQx;
    b85a:	6420      	str	r0, [r4, #64]	; 0x40
                m_posnCurrentQx -= posnAdjQx;
    b85c:	e9c4 230e 	strd	r2, r3, [r4, #56]	; 0x38
                if ((m_posnCurrentQx >= m_posnTargetQx) ||
    b860:	f280 80a9 	bge.w	b9b6 <_ZN9ClearCore13StepGenerator15StepsCalculatedEv+0x3e6>
    b864:	42a8      	cmp	r0, r5
    b866:	f340 80a6 	ble.w	b9b6 <_ZN9ClearCore13StepGenerator15StepsCalculatedEv+0x3e6>
                        (m_velCurrentQx <= 0) || (m_posnCurrentQx <= 0)) {
    b86a:	2a01      	cmp	r2, #1
    b86c:	f173 0100 	sbcs.w	r1, r3, #0
    b870:	f2c0 80a1 	blt.w	b9b6 <_ZN9ClearCore13StepGenerator15StepsCalculatedEv+0x3e6>
                    m_moveState = MS_DECEL;
    b874:	2004      	movs	r0, #4
    b876:	461f      	mov	r7, r3
    b878:	9900      	ldr	r1, [sp, #0]
    b87a:	7320      	strb	r0, [r4, #12]
    b87c:	4616      	mov	r6, r2
    b87e:	69e3      	ldr	r3, [r4, #28]
    b880:	e6d8      	b.n	b634 <_ZN9ClearCore13StepGenerator15StepsCalculatedEv+0x64>
    b882:	7b42      	ldrb	r2, [r0, #13]
    b884:	9200      	str	r2, [sp, #0]
                m_moveDirChange = false;
    b886:	4619      	mov	r1, r3
    b888:	2000      	movs	r0, #0
    b88a:	f884 1021 	strb.w	r1, [r4, #33]	; 0x21
    b88e:	6520      	str	r0, [r4, #80]	; 0x50
void StepGenerator::StepsCalculated() {
    b890:	4682      	mov	sl, r0
            if (m_velCurrentQx == m_velTargetQx) {
    b892:	4555      	cmp	r5, sl
    b894:	f000 80db 	beq.w	ba4e <_ZN9ClearCore13StepGenerator15StepsCalculatedEv+0x47e>
            else if (m_velCurrentQx > m_velTargetQx) {
    b898:	dda1      	ble.n	b7de <_ZN9ClearCore13StepGenerator15StepsCalculatedEv+0x20e>
                m_moveState = MS_DECEL_VEL;
    b89a:	2305      	movs	r3, #5
    b89c:	7323      	strb	r3, [r4, #12]
    b89e:	f8d4 9044 	ldr.w	r9, [r4, #68]	; 0x44
    b8a2:	e6f6      	b.n	b692 <_ZN9ClearCore13StepGenerator15StepsCalculatedEv+0xc2>
                if (m_posnTargetQx != m_posnCurrentQx) {
    b8a4:	e9d0 230e 	ldrd	r2, r3, [r0, #56]	; 0x38
    b8a8:	4611      	mov	r1, r2
    b8aa:	461a      	mov	r2, r3
                m_direction = m_dirCommanded;
    b8ac:	f890 3022 	ldrb.w	r3, [r0, #34]	; 0x22
    b8b0:	7343      	strb	r3, [r0, #13]
                if (m_posnTargetQx != m_posnCurrentQx) {
    b8b2:	4613      	mov	r3, r2
    b8b4:	429f      	cmp	r7, r3
    b8b6:	bf08      	it	eq
    b8b8:	428e      	cmpeq	r6, r1
    b8ba:	e9cd 1200 	strd	r1, r2, [sp]
                m_moveDirChange = false;
    b8be:	f880 5021 	strb.w	r5, [r0, #33]	; 0x21
                if (m_posnTargetQx != m_posnCurrentQx) {
    b8c2:	d00e      	beq.n	b8e2 <_ZN9ClearCore13StepGenerator15StepsCalculatedEv+0x312>
                    OutputDirection();
    b8c4:	6803      	ldr	r3, [r0, #0]
    b8c6:	689b      	ldr	r3, [r3, #8]
    b8c8:	4798      	blx	r3
    b8ca:	f894 3021 	ldrb.w	r3, [r4, #33]	; 0x21
    b8ce:	6c25      	ldr	r5, [r4, #64]	; 0x40
            if (m_moveDirChange) {
    b8d0:	2b00      	cmp	r3, #0
    b8d2:	f040 80ca 	bne.w	ba6a <_ZN9ClearCore13StepGenerator15StepsCalculatedEv+0x49a>
    b8d6:	e9d4 2312 	ldrd	r2, r3, [r4, #72]	; 0x48
    b8da:	e9cd 2300 	strd	r2, r3, [sp]
    b8de:	f8d4 902c 	ldr.w	r9, [r4, #44]	; 0x2c
                int64_t accelStepsQx = (static_cast<int64_t>(m_velCurrentQx) *
    b8e2:	fb85 0105 	smull	r0, r1, r5, r5
                                        m_velCurrentQx / 2) / m_accelLimitQx;
    b8e6:	0fcb      	lsrs	r3, r1, #31
    b8e8:	18c0      	adds	r0, r0, r3
    b8ea:	464e      	mov	r6, r9
    b8ec:	f141 0100 	adc.w	r1, r1, #0
    b8f0:	17f7      	asrs	r7, r6, #31
    b8f2:	1049      	asrs	r1, r1, #1
    b8f4:	ea4f 0030 	mov.w	r0, r0, rrx
    b8f8:	464a      	mov	r2, r9
    b8fa:	463b      	mov	r3, r7
    b8fc:	f010 fd06 	bl	1c30c <__aeabi_ldivmod>
                if (static_cast<int64_t>(m_velLimitQx) * m_velLimitQx /
    b900:	f8d4 a024 	ldr.w	sl, [r4, #36]	; 0x24
                                        m_velCurrentQx / 2) / m_accelLimitQx;
    b904:	e9cd 0102 	strd	r0, r1, [sp, #8]
                if (static_cast<int64_t>(m_velLimitQx) * m_velLimitQx /
    b908:	464a      	mov	r2, r9
    b90a:	463b      	mov	r3, r7
    b90c:	fb8a 010a 	smull	r0, r1, sl, sl
    b910:	f010 fcfc 	bl	1c30c <__aeabi_ldivmod>
                        m_accelLimitQx - accelStepsQx > m_posnTargetQx) {
    b914:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
    b918:	1a82      	subs	r2, r0, r2
    b91a:	eb61 0303 	sbc.w	r3, r1, r3
    b91e:	4610      	mov	r0, r2
    b920:	4619      	mov	r1, r3
                if (static_cast<int64_t>(m_velLimitQx) * m_velLimitQx /
    b922:	e9dd 2300 	ldrd	r2, r3, [sp]
    b926:	4282      	cmp	r2, r0
    b928:	418b      	sbcs	r3, r1
    b92a:	db63      	blt.n	b9f4 <_ZN9ClearCore13StepGenerator15StepsCalculatedEv+0x424>
                    m_velTargetQx = m_velLimitQx;
    b92c:	f8c4 a050 	str.w	sl, [r4, #80]	; 0x50
                if (m_velCurrentQx > m_velTargetQx) {
    b930:	4555      	cmp	r5, sl
    b932:	f340 8091 	ble.w	ba58 <_ZN9ClearCore13StepGenerator15StepsCalculatedEv+0x488>
                    m_moveState = MS_DECEL_VEL;
    b936:	2305      	movs	r3, #5
    b938:	7323      	strb	r3, [r4, #12]
    b93a:	7b63      	ldrb	r3, [r4, #13]
    b93c:	f8d4 9044 	ldr.w	r9, [r4, #68]	; 0x44
    b940:	9300      	str	r3, [sp, #0]
    b942:	e6a6      	b.n	b692 <_ZN9ClearCore13StepGenerator15StepsCalculatedEv+0xc2>
                    m_accelCurrentQx;
    b944:	17da      	asrs	r2, r3, #31
                uint32_t overshootQx = m_velCurrentQx - m_velTargetQx;
    b946:	eba5 050a 	sub.w	r5, r5, sl
                    m_accelCurrentQx;
    b94a:	4691      	mov	r9, r2
    b94c:	4698      	mov	r8, r3
                    ((static_cast<uint64_t>(overshootQx)) << 32) /
    b94e:	461a      	mov	r2, r3
    b950:	4629      	mov	r1, r5
    b952:	464b      	mov	r3, r9
                m_velCurrentQx = m_velTargetQx;
    b954:	f8c4 a040 	str.w	sl, [r4, #64]	; 0x40
                    ((static_cast<uint64_t>(overshootQx)) << 32) /
    b958:	2000      	movs	r0, #0
    b95a:	f010 fd27 	bl	1c3ac <__aeabi_uldivmod>
                    (static_cast<uint64_t>(pctSampleOverQ32) * overshootQx) >>
    b95e:	4602      	mov	r2, r0
    b960:	fba2 0105 	umull	r0, r1, r2, r5
    b964:	2300      	movs	r3, #0
    b966:	fb05 1103 	mla	r1, r5, r3, r1
                m_posnCurrentQx -= (posnAdjQx + m_velCurrentQx);
    b96a:	eb0a 0551 	add.w	r5, sl, r1, lsr #1
    b96e:	1b76      	subs	r6, r6, r5
                                        m_velCurrentQx / m_accelCurrentQx) >> 1;
    b970:	4642      	mov	r2, r8
    b972:	464b      	mov	r3, r9
    b974:	fb8a 010a 	smull	r0, r1, sl, sl
                m_posnCurrentQx -= (posnAdjQx + m_velCurrentQx);
    b978:	f167 0700 	sbc.w	r7, r7, #0
                                        m_velCurrentQx / m_accelCurrentQx) >> 1;
    b97c:	f010 fd16 	bl	1c3ac <__aeabi_uldivmod>
                m_posnDecelQx = m_posnTargetQx - decelDistQx;
    b980:	e9d4 2312 	ldrd	r2, r3, [r4, #72]	; 0x48
                                        m_velCurrentQx / m_accelCurrentQx) >> 1;
    b984:	0849      	lsrs	r1, r1, #1
    b986:	ea4f 0030 	mov.w	r0, r0, rrx
                m_posnDecelQx = m_posnTargetQx - decelDistQx;
    b98a:	1a12      	subs	r2, r2, r0
    b98c:	eb63 0301 	sbc.w	r3, r3, r1
    b990:	e9c4 2316 	strd	r2, r3, [r4, #88]	; 0x58
                m_moveState = MS_CRUISE;
    b994:	2303      	movs	r3, #3
    b996:	7323      	strb	r3, [r4, #12]
    b998:	e6ec      	b.n	b774 <_ZN9ClearCore13StepGenerator15StepsCalculatedEv+0x1a4>
    b99a:	7b43      	ldrb	r3, [r0, #13]
    b99c:	6c05      	ldr	r5, [r0, #64]	; 0x40
    b99e:	f8d0 a050 	ldr.w	sl, [r0, #80]	; 0x50
    b9a2:	9300      	str	r3, [sp, #0]
    b9a4:	e71d      	b.n	b7e2 <_ZN9ClearCore13StepGenerator15StepsCalculatedEv+0x212>
            if (m_altVelLimitQx && m_velCurrentQx && m_direction != m_dirCommanded) {
    b9a6:	7b40      	ldrb	r0, [r0, #13]
    b9a8:	f894 2022 	ldrb.w	r2, [r4, #34]	; 0x22
    b9ac:	9000      	str	r0, [sp, #0]
    b9ae:	4290      	cmp	r0, r2
    b9b0:	f47f af6a 	bne.w	b888 <_ZN9ClearCore13StepGenerator15StepsCalculatedEv+0x2b8>
    b9b4:	e6c9      	b.n	b74a <_ZN9ClearCore13StepGenerator15StepsCalculatedEv+0x17a>
                    m_accelCurrentQx = 0;
    b9b6:	2300      	movs	r3, #0
                    m_moveState = MS_END;
    b9b8:	2206      	movs	r2, #6
                    m_accelCurrentQx = 0;
    b9ba:	6463      	str	r3, [r4, #68]	; 0x44
                    m_velCurrentQx = 0;
    b9bc:	6423      	str	r3, [r4, #64]	; 0x40
                    m_posnCurrentQx = m_posnTargetQx;
    b9be:	e9c4 670e 	strd	r6, r7, [r4, #56]	; 0x38
    b9c2:	9900      	ldr	r1, [sp, #0]
                    m_moveState = MS_END;
    b9c4:	7322      	strb	r2, [r4, #12]
    b9c6:	69e3      	ldr	r3, [r4, #28]
    b9c8:	e634      	b.n	b634 <_ZN9ClearCore13StepGenerator15StepsCalculatedEv+0x64>
                                            m_velCurrentQx / m_accelCurrentQx) >> 1;
    b9ca:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
    b9ce:	fb8a 010a 	smull	r0, r1, sl, sl
    b9d2:	f010 fceb 	bl	1c3ac <__aeabi_uldivmod>
                    m_posnDecelQx = m_posnTargetQx - decelDistQx;
    b9d6:	e9d4 2312 	ldrd	r2, r3, [r4, #72]	; 0x48
                                            m_velCurrentQx / m_accelCurrentQx) >> 1;
    b9da:	0849      	lsrs	r1, r1, #1
    b9dc:	ea4f 0030 	mov.w	r0, r0, rrx
                    m_posnDecelQx = m_posnTargetQx - decelDistQx;
    b9e0:	1a12      	subs	r2, r2, r0
    b9e2:	eb63 0301 	sbc.w	r3, r3, r1
                    m_moveState = MS_CRUISE;
    b9e6:	2003      	movs	r0, #3
                    m_posnDecelQx = m_posnTargetQx - decelDistQx;
    b9e8:	e9c4 2316 	strd	r2, r3, [r4, #88]	; 0x58
    b9ec:	9900      	ldr	r1, [sp, #0]
                    m_moveState = MS_CRUISE;
    b9ee:	7320      	strb	r0, [r4, #12]
    b9f0:	69e3      	ldr	r3, [r4, #28]
    b9f2:	e61f      	b.n	b634 <_ZN9ClearCore13StepGenerator15StepsCalculatedEv+0x64>
                                                       ((static_cast<int64_t>(m_stepsCommanded) << FRACT_BITS)
    b9f4:	69a6      	ldr	r6, [r4, #24]
    b9f6:	17f1      	asrs	r1, r6, #31
    b9f8:	03cb      	lsls	r3, r1, #15
                                                        + accelStepsQx) * m_accelLimitQx)));
    b9fa:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
                                                       ((static_cast<int64_t>(m_stepsCommanded) << FRACT_BITS)
    b9fe:	03f2      	lsls	r2, r6, #15
                                                        + accelStepsQx) * m_accelLimitQx)));
    ba00:	1880      	adds	r0, r0, r2
                                                       ((static_cast<int64_t>(m_stepsCommanded) << FRACT_BITS)
    ba02:	ea43 4356 	orr.w	r3, r3, r6, lsr #17
                                                        + accelStepsQx) * m_accelLimitQx)));
    ba06:	4159      	adcs	r1, r3
    ba08:	460b      	mov	r3, r1
    ba0a:	fb00 f107 	mul.w	r1, r0, r7
    ba0e:	fb09 1303 	mla	r3, r9, r3, r1
    ba12:	fba0 0109 	umull	r0, r1, r0, r9
    ba16:	4419      	add	r1, r3
                        static_cast<int64_t>(sqrtf((float)(
    ba18:	f010 fc3a 	bl	1c290 <__aeabi_l2f>
    ba1c:	ee00 0a10 	vmov	s0, r0
    ba20:	eeb5 0a40 	vcmp.f32	s0, #0.0
    ba24:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    ba28:	eeb1 8ac0 	vsqrt.f32	s16, s0
    ba2c:	d439      	bmi.n	baa2 <_ZN9ClearCore13StepGenerator15StepsCalculatedEv+0x4d2>
                                                        + accelStepsQx) * m_accelLimitQx)));
    ba2e:	ee18 0a10 	vmov	r0, s16
    ba32:	f010 fcd3 	bl	1c3dc <__aeabi_f2lz>
                    m_velTargetQx = static_cast<int32_t>(min(vel64, INT32_MAX));
    ba36:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
    ba3a:	4282      	cmp	r2, r0
    ba3c:	f04f 0300 	mov.w	r3, #0
    ba40:	eb73 0601 	sbcs.w	r6, r3, r1
    ba44:	bfb8      	it	lt
    ba46:	4610      	movlt	r0, r2
    ba48:	6520      	str	r0, [r4, #80]	; 0x50
    ba4a:	4682      	mov	sl, r0
    ba4c:	e770      	b.n	b930 <_ZN9ClearCore13StepGenerator15StepsCalculatedEv+0x360>
                m_moveState = MS_CRUISE;
    ba4e:	2303      	movs	r3, #3
    ba50:	7323      	strb	r3, [r4, #12]
    ba52:	e9d4 670e 	ldrd	r6, r7, [r4, #56]	; 0x38
    ba56:	e68d      	b.n	b774 <_ZN9ClearCore13StepGenerator15StepsCalculatedEv+0x1a4>
                    m_moveState = MS_ACCEL;
    ba58:	2302      	movs	r3, #2
    ba5a:	7323      	strb	r3, [r4, #12]
    ba5c:	7b63      	ldrb	r3, [r4, #13]
    ba5e:	9300      	str	r3, [sp, #0]
    ba60:	e6bf      	b.n	b7e2 <_ZN9ClearCore13StepGenerator15StepsCalculatedEv+0x212>
                m_stepsCommanded = m_stepsSent - m_stepsCommanded;
    ba62:	69c0      	ldr	r0, [r0, #28]
    ba64:	69a3      	ldr	r3, [r4, #24]
    ba66:	1ac0      	subs	r0, r0, r3
    ba68:	e5d1      	b.n	b60e <_ZN9ClearCore13StepGenerator15StepsCalculatedEv+0x3e>
    ba6a:	7b63      	ldrb	r3, [r4, #13]
    ba6c:	f8d4 9044 	ldr.w	r9, [r4, #68]	; 0x44
    ba70:	9300      	str	r3, [sp, #0]
    ba72:	e609      	b.n	b688 <_ZN9ClearCore13StepGenerator15StepsCalculatedEv+0xb8>
                    int64_t distToStopQx = (static_cast<int64_t>(m_velCurrentQx) * m_velCurrentQx /
    ba74:	464a      	mov	r2, r9
    ba76:	17d3      	asrs	r3, r2, #31
    ba78:	fb85 0105 	smull	r0, r1, r5, r5
    ba7c:	f010 fc46 	bl	1c30c <__aeabi_ldivmod>
                    m_moveDirChange = m_posnTargetQx - m_posnCurrentQx < distToStopQx;
    ba80:	e9d4 230e 	ldrd	r2, r3, [r4, #56]	; 0x38
                                          m_accelCurrentQx) >> 1;
    ba84:	1049      	asrs	r1, r1, #1
    ba86:	ea4f 0030 	mov.w	r0, r0, rrx
                    m_moveDirChange = m_posnTargetQx - m_posnCurrentQx < distToStopQx;
    ba8a:	1ab6      	subs	r6, r6, r2
    ba8c:	eb67 0703 	sbc.w	r7, r7, r3
    ba90:	4286      	cmp	r6, r0
    ba92:	eb77 0301 	sbcs.w	r3, r7, r1
    ba96:	bfb4      	ite	lt
    ba98:	2301      	movlt	r3, #1
    ba9a:	2300      	movge	r3, #0
    ba9c:	f884 3021 	strb.w	r3, [r4, #33]	; 0x21
    baa0:	e716      	b.n	b8d0 <_ZN9ClearCore13StepGenerator15StepsCalculatedEv+0x300>
                        static_cast<int64_t>(sqrtf((float)(
    baa2:	f00f f9c9 	bl	1ae38 <sqrtf>
    baa6:	6c25      	ldr	r5, [r4, #64]	; 0x40
    baa8:	e7c1      	b.n	ba2e <_ZN9ClearCore13StepGenerator15StepsCalculatedEv+0x45e>
    baaa:	7b43      	ldrb	r3, [r0, #13]
    baac:	6c05      	ldr	r5, [r0, #64]	; 0x40
    baae:	f8d0 a050 	ldr.w	sl, [r0, #80]	; 0x50
    bab2:	f8d0 9044 	ldr.w	r9, [r0, #68]	; 0x44
    bab6:	9300      	str	r3, [sp, #0]
    bab8:	e5eb      	b.n	b692 <_ZN9ClearCore13StepGenerator15StepsCalculatedEv+0xc2>
    baba:	bf00      	nop

0000babc <_ZN9ClearCore13StepGeneratorC1Ev>:
StepGenerator::StepGenerator()
    babc:	b4f0      	push	{r4, r5, r6, r7}
                  InNegHWLimitLast(0) {}
    babe:	7c04      	ldrb	r4, [r0, #16]
      m_altDecelLimitPendingQx(2) {}
    bac0:	4916      	ldr	r1, [pc, #88]	; (bb1c <_ZN9ClearCore13StepGeneratorC1Ev+0x60>)
    bac2:	6001      	str	r1, [r0, #0]
    bac4:	2200      	movs	r2, #0
    bac6:	f004 04c0 	and.w	r4, r4, #192	; 0xc0
    baca:	2501      	movs	r5, #1
    bacc:	2102      	movs	r1, #2
    bace:	2600      	movs	r6, #0
    bad0:	2700      	movs	r7, #0
    bad2:	f362 1486 	bfi	r4, r2, #6, #1
    bad6:	7404      	strb	r4, [r0, #16]
    bad8:	6042      	str	r2, [r0, #4]
    bada:	6082      	str	r2, [r0, #8]
    badc:	7302      	strb	r2, [r0, #12]
    bade:	7342      	strb	r2, [r0, #13]
    bae0:	6142      	str	r2, [r0, #20]
    bae2:	6182      	str	r2, [r0, #24]
    bae4:	61c2      	str	r2, [r0, #28]
    bae6:	f880 2020 	strb.w	r2, [r0, #32]
    baea:	f880 2021 	strb.w	r2, [r0, #33]	; 0x21
    baee:	f880 2022 	strb.w	r2, [r0, #34]	; 0x22
    baf2:	6282      	str	r2, [r0, #40]	; 0x28
    baf4:	6402      	str	r2, [r0, #64]	; 0x40
    baf6:	6442      	str	r2, [r0, #68]	; 0x44
    baf8:	6502      	str	r2, [r0, #80]	; 0x50
    bafa:	6642      	str	r2, [r0, #100]	; 0x64
    bafc:	7385      	strb	r5, [r0, #14]
    bafe:	6245      	str	r5, [r0, #36]	; 0x24
    bb00:	6605      	str	r5, [r0, #96]	; 0x60
    bb02:	62c1      	str	r1, [r0, #44]	; 0x2c
    bb04:	6301      	str	r1, [r0, #48]	; 0x30
    bb06:	6681      	str	r1, [r0, #104]	; 0x68
    bb08:	66c1      	str	r1, [r0, #108]	; 0x6c
    bb0a:	e9c0 670e 	strd	r6, r7, [r0, #56]	; 0x38
    bb0e:	e9c0 6712 	strd	r6, r7, [r0, #72]	; 0x48
    bb12:	e9c0 6716 	strd	r6, r7, [r0, #88]	; 0x58
    bb16:	bcf0      	pop	{r4, r5, r6, r7}
    bb18:	4770      	bx	lr
    bb1a:	bf00      	nop
    bb1c:	0002318c 	.word	0x0002318c

0000bb20 <_ZN9ClearCore13StepGenerator14MoveStopAbruptEv>:
void StepGenerator::MoveStopAbrupt() {
    bb20:	b4d0      	push	{r4, r6, r7}
  __ASM volatile ("cpsid i" : : : "memory");
    bb22:	b672      	cpsid	i
            m_velLimitQx = m_velLimitPendingQx;
    bb24:	6e03      	ldr	r3, [r0, #96]	; 0x60
            m_altVelLimitQx = m_altVelLimitPendingQx;
    bb26:	6e44      	ldr	r4, [r0, #100]	; 0x64
            m_accelLimitQx = m_accelLimitPendingQx;
    bb28:	6e81      	ldr	r1, [r0, #104]	; 0x68
            m_altDecelLimitQx = m_altDecelLimitPendingQx;
    bb2a:	6ec2      	ldr	r2, [r0, #108]	; 0x6c
            m_velLimitQx = m_velLimitPendingQx;
    bb2c:	6243      	str	r3, [r0, #36]	; 0x24
    m_posnCurrentQx = 0;
    bb2e:	2600      	movs	r6, #0
    m_velCurrentQx = 0;
    bb30:	2300      	movs	r3, #0
    m_posnCurrentQx = 0;
    bb32:	2700      	movs	r7, #0
    bb34:	e9c0 670e 	strd	r6, r7, [r0, #56]	; 0x38
            m_altVelLimitQx = m_altVelLimitPendingQx;
    bb38:	6284      	str	r4, [r0, #40]	; 0x28
            m_accelLimitQx = m_accelLimitPendingQx;
    bb3a:	62c1      	str	r1, [r0, #44]	; 0x2c
            m_altDecelLimitQx = m_altDecelLimitPendingQx;
    bb3c:	6302      	str	r2, [r0, #48]	; 0x30
    m_velCurrentQx = 0;
    bb3e:	6403      	str	r3, [r0, #64]	; 0x40
    m_stepsSent = 0;
    bb40:	61c3      	str	r3, [r0, #28]
    m_moveState = MS_IDLE;
    bb42:	7303      	strb	r3, [r0, #12]
    m_velocityMove = false;
    bb44:	f880 3020 	strb.w	r3, [r0, #32]
    m_stepsCommanded = 0;
    bb48:	6183      	str	r3, [r0, #24]
    m_stepsPrevious = 0;
    bb4a:	6043      	str	r3, [r0, #4]
  __ASM volatile ("cpsie i" : : : "memory");
    bb4c:	b662      	cpsie	i
}
    bb4e:	bcd0      	pop	{r4, r6, r7}
    bb50:	4770      	bx	lr
    bb52:	bf00      	nop
    bb54:	0000      	movs	r0, r0
	...

0000bb58 <_ZN9ClearCore13StepGenerator13MoveStopDecelEm>:
void StepGenerator::MoveStopDecel(uint32_t decelMax) {
    bb58:	b510      	push	{r4, lr}
    bb5a:	4604      	mov	r4, r0
    if (decelMax != 0) {
    bb5c:	b191      	cbz	r1, bb84 <_ZN9ClearCore13StepGenerator13MoveStopDecelEm+0x2c>
}

static int32_t ConvertAccel(uint32_t pulsesPerSecSq) {
    // Convert from step pulses/sec/sec to step pulses/sample/sample
    int64_t accelLim64 = ((static_cast<int64_t>(pulsesPerSecSq) << FRACT_BITS) /
                          (SampleRateHz * SampleRateHz));
    bb5e:	a312      	add	r3, pc, #72	; (adr r3, bba8 <_ZN9ClearCore13StepGenerator13MoveStopDecelEm+0x50>)
    bb60:	e9d3 2300 	ldrd	r2, r3, [r3]
    bb64:	03c8      	lsls	r0, r1, #15
    bb66:	0c49      	lsrs	r1, r1, #17
    bb68:	f010 fbd0 	bl	1c30c <__aeabi_ldivmod>
    bb6c:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
    bb6e:	2b02      	cmp	r3, #2
    // Ensure we didn't overflow 32-bit int
    int32_t accelLim32 = min(accelLim64, INT32_MAX);
    // Since accel has to be divided by 2 when calculating position increments,
    // make sure it is even
    accelLim32 &= ~1L;
    bb70:	f020 0201 	bic.w	r2, r0, #1
    bb74:	bfb8      	it	lt
    bb76:	2302      	movlt	r3, #2
    bb78:	4293      	cmp	r3, r2
    bb7a:	4618      	mov	r0, r3
    bb7c:	bfb8      	it	lt
    bb7e:	4610      	movlt	r0, r2
    value of the current move's accel limit or the decelMax given.
*/
void StepGenerator::EStopDecelMax(uint32_t decelMax) {
    // Convert from step pulses/sec/sec to step pulses/sample/sample
    int32_t decelQx = ConvertAccel(decelMax);
    m_altDecelLimitPendingQx = max(decelQx, m_accelLimitQx);
    bb80:	66e0      	str	r0, [r4, #108]	; 0x6c
        m_altDecelLimitQx = m_altDecelLimitPendingQx;
    bb82:	6320      	str	r0, [r4, #48]	; 0x30
  __ASM volatile ("cpsid i" : : : "memory");
    bb84:	b672      	cpsid	i
    m_accelLimitQx = max(m_altDecelLimitQx, m_accelLimitQx);
    bb86:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
    bb88:	6b22      	ldr	r2, [r4, #48]	; 0x30
    bb8a:	4293      	cmp	r3, r2
    bb8c:	bfb8      	it	lt
    bb8e:	4613      	movlt	r3, r2
    m_altVelLimitQx = 0;
    bb90:	2100      	movs	r1, #0
    m_velocityMove = true;
    bb92:	2201      	movs	r2, #1
    m_accelLimitQx = max(m_altDecelLimitQx, m_accelLimitQx);
    bb94:	62e3      	str	r3, [r4, #44]	; 0x2c
    m_altVelLimitQx = 0;
    bb96:	62a1      	str	r1, [r4, #40]	; 0x28
    m_velocityMove = true;
    bb98:	f884 2020 	strb.w	r2, [r4, #32]
    m_moveState = MS_START;
    bb9c:	7322      	strb	r2, [r4, #12]
  __ASM volatile ("cpsie i" : : : "memory");
    bb9e:	b662      	cpsie	i
    bba0:	bd10      	pop	{r4, pc}
    bba2:	bf00      	nop
    bba4:	f3af 8000 	nop.w
    bba8:	017d7840 	.word	0x017d7840
    bbac:	00000000 	.word	0x00000000

0000bbb0 <_ZN9ClearCore13StepGenerator20StepsPerSampleMaxSetEm>:

/*
    This function limits the velocity to the maximum that the step output
    can provide.
*/
void StepGenerator::StepsPerSampleMaxSet(uint32_t maxSteps) {
    bbb0:	b4f0      	push	{r4, r5, r6, r7}
  __ASM volatile ("cpsid i" : : : "memory");
    bbb2:	b672      	cpsid	i
            m_velLimitQx = m_velLimitPendingQx;
    bbb4:	6e03      	ldr	r3, [r0, #96]	; 0x60
            m_altVelLimitQx = m_altVelLimitPendingQx;
    bbb6:	6e45      	ldr	r5, [r0, #100]	; 0x64
            m_accelLimitQx = m_accelLimitPendingQx;
    bbb8:	6e84      	ldr	r4, [r0, #104]	; 0x68
            m_altDecelLimitQx = m_altDecelLimitPendingQx;
    bbba:	6ec2      	ldr	r2, [r0, #108]	; 0x6c
            m_velLimitQx = m_velLimitPendingQx;
    bbbc:	6243      	str	r3, [r0, #36]	; 0x24
    m_posnCurrentQx = 0;
    bbbe:	2600      	movs	r6, #0
    m_velCurrentQx = 0;
    bbc0:	2300      	movs	r3, #0
    m_posnCurrentQx = 0;
    bbc2:	2700      	movs	r7, #0
    bbc4:	e9c0 670e 	strd	r6, r7, [r0, #56]	; 0x38
            m_altVelLimitQx = m_altVelLimitPendingQx;
    bbc8:	6285      	str	r5, [r0, #40]	; 0x28
            m_accelLimitQx = m_accelLimitPendingQx;
    bbca:	62c4      	str	r4, [r0, #44]	; 0x2c
            m_altDecelLimitQx = m_altDecelLimitPendingQx;
    bbcc:	6302      	str	r2, [r0, #48]	; 0x30
    m_velCurrentQx = 0;
    bbce:	6403      	str	r3, [r0, #64]	; 0x40
    m_stepsSent = 0;
    bbd0:	61c3      	str	r3, [r0, #28]
    m_moveState = MS_IDLE;
    bbd2:	7303      	strb	r3, [r0, #12]
    m_velocityMove = false;
    bbd4:	f880 3020 	strb.w	r3, [r0, #32]
    m_stepsCommanded = 0;
    bbd8:	6183      	str	r3, [r0, #24]
    m_stepsPrevious = 0;
    bbda:	6043      	str	r3, [r0, #4]
  __ASM volatile ("cpsie i" : : : "memory");
    bbdc:	b662      	cpsie	i
    MoveStopAbrupt();
    m_stepsPerSampleMax = maxSteps;
    // Recalculate maximum velocity limit
    int64_t velLim64 = static_cast<int64_t>(m_stepsPerSampleMax) << FRACT_BITS;
    // Ensure we didn't overflow 32-bit int
    velLim64 = min(velLim64, INT32_MAX);
    bbde:	f06f 4400 	mvn.w	r4, #2147483648	; 0x80000000
    bbe2:	03ca      	lsls	r2, r1, #15
    bbe4:	0c4b      	lsrs	r3, r1, #17
    bbe6:	4294      	cmp	r4, r2
    bbe8:	f04f 0500 	mov.w	r5, #0
    m_stepsPerSampleMax = maxSteps;
    bbec:	6081      	str	r1, [r0, #8]
    velLim64 = min(velLim64, INT32_MAX);
    bbee:	eb75 0103 	sbcs.w	r1, r5, r3
    bbf2:	bfbc      	itt	lt
    bbf4:	4622      	movlt	r2, r4
    bbf6:	462b      	movlt	r3, r5
    // Enforce minimum velocity of 1 step pulse/sample
    velLim64 = max(velLim64, 1);
    bbf8:	2a01      	cmp	r2, #1
    bbfa:	f173 0100 	sbcs.w	r1, r3, #0
    // Clip velocity limit if higher than max velocity limit
    m_velLimitPendingQx = min(velLim64, m_velLimitQx);
    bbfe:	6a44      	ldr	r4, [r0, #36]	; 0x24
    velLim64 = max(velLim64, 1);
    bc00:	bfbc      	itt	lt
    bc02:	2201      	movlt	r2, #1
    bc04:	2300      	movlt	r3, #0
    m_velLimitPendingQx = min(velLim64, m_velLimitQx);
    bc06:	17e5      	asrs	r5, r4, #31
    bc08:	4294      	cmp	r4, r2
    bc0a:	eb75 0103 	sbcs.w	r1, r5, r3
    bc0e:	bfb8      	it	lt
    bc10:	4622      	movlt	r2, r4
    bc12:	6602      	str	r2, [r0, #96]	; 0x60
}
    bc14:	bcf0      	pop	{r4, r5, r6, r7}
    bc16:	4770      	bx	lr

0000bc18 <_ZN9ClearCore13StepGenerator17CheckTravelLimitsEv>:

 bool StepGenerator::CheckTravelLimits() {
    if (m_stepsPrevious == 0) {
    bc18:	6843      	ldr	r3, [r0, #4]
    bc1a:	b363      	cbz	r3, bc76 <_ZN9ClearCore13StepGenerator17CheckTravelLimitsEv+0x5e>
        return false;
    }

    // Determine if we are physically in the hardware limits
    m_limitInfo.EnterHWLimit = (m_limitInfo.InPosHWLimit || m_limitInfo.InNegHWLimit)
    bc1c:	7c03      	ldrb	r3, [r0, #16]
                            && ((m_limitInfo.InPosHWLimit != m_limitInfo.InPosHWLimitLast)
    bc1e:	f013 0218 	ands.w	r2, r3, #24
    bc22:	d12a      	bne.n	bc7a <_ZN9ClearCore13StepGenerator17CheckTravelLimitsEv+0x62>
    bc24:	4613      	mov	r3, r2
    m_limitInfo.EnterHWLimit = (m_limitInfo.InPosHWLimit || m_limitInfo.InNegHWLimit)
    bc26:	7c02      	ldrb	r2, [r0, #16]
    bc28:	f363 0282 	bfi	r2, r3, #2, #1
                            ||  (m_limitInfo.InNegHWLimit != m_limitInfo.InNegHWLimitLast));
    m_limitInfo.InPosHWLimitLast = m_limitInfo.InPosHWLimit;
    bc2c:	b2d2      	uxtb	r2, r2
    bc2e:	4613      	mov	r3, r2
    bc30:	f3c2 02c0 	ubfx	r2, r2, #3, #1
    bc34:	f362 1345 	bfi	r3, r2, #5, #1
    m_limitInfo.InNegHWLimitLast = m_limitInfo.InNegHWLimit;
    bc38:	b2db      	uxtb	r3, r3
    bc3a:	461a      	mov	r2, r3
    bc3c:	f3c3 1300 	ubfx	r3, r3, #4, #1
    bc40:	f363 1286 	bfi	r2, r3, #6, #1

    if (m_limitInfo.EnterHWLimit) {
    bc44:	b2d3      	uxtb	r3, r2
    m_limitInfo.InNegHWLimitLast = m_limitInfo.InNegHWLimit;
    bc46:	7402      	strb	r2, [r0, #16]
    if (m_limitInfo.EnterHWLimit) {
    bc48:	075a      	lsls	r2, r3, #29
    bc4a:	d514      	bpl.n	bc76 <_ZN9ClearCore13StepGenerator17CheckTravelLimitsEv+0x5e>

        if ((!m_direction && m_limitInfo.InPosHWLimit) ||
    bc4c:	7b42      	ldrb	r2, [r0, #13]
    bc4e:	b9e2      	cbnz	r2, bc8a <_ZN9ClearCore13StepGenerator17CheckTravelLimitsEv+0x72>
    bc50:	0719      	lsls	r1, r3, #28
    bc52:	d510      	bpl.n	bc76 <_ZN9ClearCore13StepGenerator17CheckTravelLimitsEv+0x5e>
            (m_direction && m_limitInfo.InNegHWLimit)) {
            // Ramp to a stop
            if (!m_direction) {
                m_limitInfo.LimitRampPos = true;
    bc54:	f043 0301 	orr.w	r3, r3, #1
    bc58:	7403      	strb	r3, [r0, #16]
  __ASM volatile ("cpsid i" : : : "memory");
    bc5a:	b672      	cpsid	i
    m_accelLimitQx = max(m_altDecelLimitQx, m_accelLimitQx);
    bc5c:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
    bc5e:	6b02      	ldr	r2, [r0, #48]	; 0x30
    bc60:	4293      	cmp	r3, r2
    bc62:	bfb8      	it	lt
    bc64:	4613      	movlt	r3, r2
    m_altVelLimitQx = 0;
    bc66:	2100      	movs	r1, #0
    m_velocityMove = true;
    bc68:	2201      	movs	r2, #1
    m_accelLimitQx = max(m_altDecelLimitQx, m_accelLimitQx);
    bc6a:	62c3      	str	r3, [r0, #44]	; 0x2c
    m_altVelLimitQx = 0;
    bc6c:	6281      	str	r1, [r0, #40]	; 0x28
    m_velocityMove = true;
    bc6e:	f880 2020 	strb.w	r2, [r0, #32]
    m_moveState = MS_START;
    bc72:	7302      	strb	r2, [r0, #12]
  __ASM volatile ("cpsie i" : : : "memory");
    bc74:	b662      	cpsie	i
            }
            MoveStopDecel();
        }
    }
    return false;
}
    bc76:	2000      	movs	r0, #0
    bc78:	4770      	bx	lr
                            && ((m_limitInfo.InPosHWLimit != m_limitInfo.InPosHWLimitLast)
    bc7a:	f3c3 02c1 	ubfx	r2, r3, #3, #2
    bc7e:	f3c3 1341 	ubfx	r3, r3, #5, #2
    bc82:	1ad3      	subs	r3, r2, r3
    bc84:	bf18      	it	ne
    bc86:	2301      	movne	r3, #1
    bc88:	e7cd      	b.n	bc26 <_ZN9ClearCore13StepGenerator17CheckTravelLimitsEv+0xe>
            (m_direction && m_limitInfo.InNegHWLimit)) {
    bc8a:	06da      	lsls	r2, r3, #27
    bc8c:	d5f3      	bpl.n	bc76 <_ZN9ClearCore13StepGenerator17CheckTravelLimitsEv+0x5e>
                m_limitInfo.LimitRampNeg = true;
    bc8e:	f043 0302 	orr.w	r3, r3, #2
    bc92:	7403      	strb	r3, [r0, #16]
    bc94:	e7e1      	b.n	bc5a <_ZN9ClearCore13StepGenerator17CheckTravelLimitsEv+0x42>
    bc96:	bf00      	nop

0000bc98 <SystemInit>:
    // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
    // Start and setup the various oscillators
    // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

    // Start the external 10MHz MEMS oscillator
    OSCCTRL->XOSCCTRL[1].reg =
    bc98:	4ba1      	ldr	r3, [pc, #644]	; (bf20 <SystemInit+0x288>)
    bc9a:	f242 6202 	movw	r2, #9730	; 0x2602
void SystemInit(void) {
    bc9e:	b4f0      	push	{r4, r5, r6, r7}
    OSCCTRL->XOSCCTRL[1].reg =
    bca0:	619a      	str	r2, [r3, #24]
        OSCCTRL_XOSCCTRL_IMULT(4) |
        OSCCTRL_XOSCCTRL_IPTAT(3) |
        OSCCTRL_XOSCCTRL_ENABLE;
    // Wait for clock to run
    while (!OSCCTRL->STATUS.bit.XOSCRDY1) {
    bca2:	691a      	ldr	r2, [r3, #16]
    bca4:	0792      	lsls	r2, r2, #30
    bca6:	d5fc      	bpl.n	bca2 <SystemInit+0xa>
        continue;
    }
    // Create 1MHz clock on GCLK5 to act as source for DPLL0/1 and SERCOM6
    GCLK->GENCTRL[5].reg = GCLK_GENCTRL_SRC(GCLK_GENCTRL_SRC_XOSC1_Val) |
    bca8:	4a9e      	ldr	r2, [pc, #632]	; (bf24 <SystemInit+0x28c>)
    bcaa:	4b9f      	ldr	r3, [pc, #636]	; (bf28 <SystemInit+0x290>)
    bcac:	6353      	str	r3, [r2, #52]	; 0x34
                           GCLK_GENCTRL_GENEN |
                           GCLK_GENCTRL_DIV(__CLEARCORE_OSC_HZ /
                                            __CLEARCORE_GCLK5_HZ) |
                           GCLK_GENCTRL_IDC;
    SYNCBUSY_WAIT(GCLK, GCLK_SYNCBUSY_GENCTRL5);
    bcae:	6853      	ldr	r3, [r2, #4]
    bcb0:	f013 0380 	ands.w	r3, r3, #128	; 0x80
    bcb4:	d1fb      	bne.n	bcae <SystemInit+0x16>

    // Make good 120MHz CPU clock using DPLL1 multiplying GCLK5 up
    SET_CLOCK_SOURCE(OSCCTRL_GCLK_ID_FDPLL1, 5);
    bcb6:	f8d2 0088 	ldr.w	r0, [r2, #136]	; 0x88
    bcba:	499a      	ldr	r1, [pc, #616]	; (bf24 <SystemInit+0x28c>)
    bcbc:	f363 1086 	bfi	r0, r3, #6, #1
    bcc0:	f8c2 0088 	str.w	r0, [r2, #136]	; 0x88
    bcc4:	f8d1 3088 	ldr.w	r3, [r1, #136]	; 0x88
    bcc8:	065b      	lsls	r3, r3, #25
    bcca:	d4fb      	bmi.n	bcc4 <SystemInit+0x2c>
    bccc:	f8d1 3088 	ldr.w	r3, [r1, #136]	; 0x88
    bcd0:	4a94      	ldr	r2, [pc, #592]	; (bf24 <SystemInit+0x28c>)
    bcd2:	2005      	movs	r0, #5
    bcd4:	f360 0303 	bfi	r3, r0, #0, #4
    bcd8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    bcdc:	f8d1 3088 	ldr.w	r3, [r1, #136]	; 0x88
    bce0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    bce4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    bce8:	6853      	ldr	r3, [r2, #4]
    bcea:	f013 0f14 	tst.w	r3, #20
    bcee:	d1fb      	bne.n	bce8 <SystemInit+0x50>
    // Set the integer part of the frequency multiplier (loop divider ratio)
    OSCCTRL->Dpll[1].DPLLRATIO.reg =
    bcf0:	4b8b      	ldr	r3, [pc, #556]	; (bf20 <SystemInit+0x288>)
    bcf2:	2277      	movs	r2, #119	; 0x77
    OSCCTRL_DPLLRATIO_LDR(__CLEARCORE_DPLL1_HZ / __CLEARCORE_GCLK5_HZ - 1);  
    // Set GCLK as the DPLL clock reference, and set Wake Up Fast
    OSCCTRL->Dpll[1].DPLLCTRLB.reg = OSCCTRL_DPLLCTRLB_REFCLK_GCLK |
    bcf4:	2010      	movs	r0, #16
                                     OSCCTRL_DPLLCTRLB_WUF;
        
    // Set the DPLL (digital phase-locked loop) to run in standby and sleep mode
    // If ONDEMAND is not set, the signal will be generated constantly
    // Finally, enable the DPLL
    OSCCTRL->Dpll[1].DPLLCTRLA.reg = OSCCTRL_DPLLCTRLA_RUNSTDBY |
    bcf6:	2142      	movs	r1, #66	; 0x42
    OSCCTRL->Dpll[1].DPLLRATIO.reg =
    bcf8:	649a      	str	r2, [r3, #72]	; 0x48
    OSCCTRL->Dpll[1].DPLLCTRLB.reg = OSCCTRL_DPLLCTRLB_REFCLK_GCLK |
    bcfa:	64d8      	str	r0, [r3, #76]	; 0x4c
                                     OSCCTRL_DPLLCTRLA_ENABLE;

    while (OSCCTRL->STATUS.bit.DPLL1LCKR) {
    bcfc:	461a      	mov	r2, r3
    OSCCTRL->Dpll[1].DPLLCTRLA.reg = OSCCTRL_DPLLCTRLA_RUNSTDBY |
    bcfe:	f883 1044 	strb.w	r1, [r3, #68]	; 0x44
    while (OSCCTRL->STATUS.bit.DPLL1LCKR) {
    bd02:	6913      	ldr	r3, [r2, #16]
    bd04:	01df      	lsls	r7, r3, #7
    bd06:	d4fc      	bmi.n	bd02 <SystemInit+0x6a>
        continue;
    }
    // Route DPLL1 @ 120MHz to CPU Clock before killing off 48MHz clock we
    // started with.
    GCLK->GENCTRL[0].reg = GCLK_GENCTRL_SRC(GCLK_GENCTRL_SRC_DPLL1_Val) |
    bd08:	4a86      	ldr	r2, [pc, #536]	; (bf24 <SystemInit+0x28c>)
    bd0a:	f44f 7384 	mov.w	r3, #264	; 0x108
    bd0e:	6213      	str	r3, [r2, #32]
                           GCLK_GENCTRL_GENEN |
                           GCLK_GENCTRL_DIV(0);
    SYNCBUSY_WAIT(GCLK, GCLK_SYNCBUSY_GENCTRL0);
    bd10:	6853      	ldr	r3, [r2, #4]
    bd12:	f013 0304 	ands.w	r3, r3, #4
    bd16:	d1fb      	bne.n	bd10 <SystemInit+0x78>
    // Clocks running and locked, switch core clock to 120MHz
    MCLK->CPUDIV.reg = MCLK_CPUDIV_DIV_DIV1;
    bd18:	4884      	ldr	r0, [pc, #528]	; (bf2c <SystemInit+0x294>)

    // Use 96MHz clock for USB with / 2 on GCLK4 for 48MHz
    // using GCLK5 as reference.
    SET_CLOCK_SOURCE(OSCCTRL_GCLK_ID_FDPLL0, 5);
    bd1a:	4982      	ldr	r1, [pc, #520]	; (bf24 <SystemInit+0x28c>)
    MCLK->CPUDIV.reg = MCLK_CPUDIV_DIV_DIV1;
    bd1c:	2401      	movs	r4, #1
    bd1e:	7144      	strb	r4, [r0, #5]
    SET_CLOCK_SOURCE(OSCCTRL_GCLK_ID_FDPLL0, 5);
    bd20:	f8d2 0084 	ldr.w	r0, [r2, #132]	; 0x84
    bd24:	f363 1086 	bfi	r0, r3, #6, #1
    bd28:	f8c2 0084 	str.w	r0, [r2, #132]	; 0x84
    bd2c:	f8d1 3084 	ldr.w	r3, [r1, #132]	; 0x84
    bd30:	065e      	lsls	r6, r3, #25
    bd32:	d4fb      	bmi.n	bd2c <SystemInit+0x94>
    bd34:	f8d1 3084 	ldr.w	r3, [r1, #132]	; 0x84
    bd38:	4a7a      	ldr	r2, [pc, #488]	; (bf24 <SystemInit+0x28c>)
    bd3a:	2005      	movs	r0, #5
    bd3c:	f360 0303 	bfi	r3, r0, #0, #4
    bd40:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    bd44:	f8d1 3084 	ldr.w	r3, [r1, #132]	; 0x84
    bd48:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    bd4c:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    bd50:	6853      	ldr	r3, [r2, #4]
    bd52:	f013 0314 	ands.w	r3, r3, #20
    bd56:	d1fb      	bne.n	bd50 <SystemInit+0xb8>
    // set the integer part of the frequency multiplier (loop divider ratio)
    OSCCTRL->Dpll[0].DPLLRATIO.reg =
    bd58:	4871      	ldr	r0, [pc, #452]	; (bf20 <SystemInit+0x288>)
    // enable the DPLL
    OSCCTRL->Dpll[0].DPLLCTRLA.reg = OSCCTRL_DPLLCTRLA_ENABLE;

    // Disable DFLL48M since we are going to use DPLL to generate 48MHz.
    GCLK->PCHCTRL[OSCCTRL_GCLK_ID_DFLL48].bit.CHEN = 0;
    while (GCLK->PCHCTRL[OSCCTRL_GCLK_ID_DFLL48].bit.CHEN) {
    bd5a:	4972      	ldr	r1, [pc, #456]	; (bf24 <SystemInit+0x28c>)
    OSCCTRL->Dpll[0].DPLLRATIO.reg =
    bd5c:	265f      	movs	r6, #95	; 0x5f
    OSCCTRL->Dpll[0].DPLLCTRLB.reg = OSCCTRL_DPLLCTRLB_LTIME_DEFAULT |
    bd5e:	2510      	movs	r5, #16
    OSCCTRL->Dpll[0].DPLLCTRLA.reg = OSCCTRL_DPLLCTRLA_ENABLE;
    bd60:	2402      	movs	r4, #2
    OSCCTRL->Dpll[0].DPLLRATIO.reg =
    bd62:	6346      	str	r6, [r0, #52]	; 0x34
    OSCCTRL->Dpll[0].DPLLCTRLB.reg = OSCCTRL_DPLLCTRLB_LTIME_DEFAULT |
    bd64:	6385      	str	r5, [r0, #56]	; 0x38
    OSCCTRL->Dpll[0].DPLLCTRLA.reg = OSCCTRL_DPLLCTRLA_ENABLE;
    bd66:	f880 4030 	strb.w	r4, [r0, #48]	; 0x30
    GCLK->PCHCTRL[OSCCTRL_GCLK_ID_DFLL48].bit.CHEN = 0;
    bd6a:	f8d2 0080 	ldr.w	r0, [r2, #128]	; 0x80
    bd6e:	f363 1086 	bfi	r0, r3, #6, #1
    bd72:	f8c2 0080 	str.w	r0, [r2, #128]	; 0x80
    while (GCLK->PCHCTRL[OSCCTRL_GCLK_ID_DFLL48].bit.CHEN) {
    bd76:	f8d1 3080 	ldr.w	r3, [r1, #128]	; 0x80
    bd7a:	f3c3 1380 	ubfx	r3, r3, #6, #1
    bd7e:	2b00      	cmp	r3, #0
    bd80:	d1f9      	bne.n	bd76 <SystemInit+0xde>
        continue;
    }

    OSCCTRL->DFLLCTRLA.reg = 0;
    bd82:	4c67      	ldr	r4, [pc, #412]	; (bf20 <SystemInit+0x288>)
    // Setup GCLK4 to output 48 MHz for USB
    GCLK->GENCTRL[4].reg = GCLK_GENCTRL_GENEN |
    bd84:	486a      	ldr	r0, [pc, #424]	; (bf30 <SystemInit+0x298>)
                           GCLK_GENCTRL_DIV(__CLEARCORE_DPLL0_HZ /
                                            __CLEARCORE_GCLK4_HZ) |
                           GCLK_GENCTRL_SRC_DPLL0;
    // Wait for clock domain sync
    SYNCBUSY_WAIT(GCLK, GCLK_SYNCBUSY_GENCTRL4);
    bd86:	4a67      	ldr	r2, [pc, #412]	; (bf24 <SystemInit+0x28c>)
    OSCCTRL->DFLLCTRLA.reg = 0;
    bd88:	7723      	strb	r3, [r4, #28]
    GCLK->GENCTRL[4].reg = GCLK_GENCTRL_GENEN |
    bd8a:	6308      	str	r0, [r1, #48]	; 0x30
    SYNCBUSY_WAIT(GCLK, GCLK_SYNCBUSY_GENCTRL4);
    bd8c:	6853      	ldr	r3, [r2, #4]
    bd8e:	065d      	lsls	r5, r3, #25
    bd90:	d4fc      	bmi.n	bd8c <SystemInit+0xf4>
                           GCLK_GENCTRL_OE;

    // Make sure PORT module is powered up and clocked
    // Should be on already: CLOCK_ENABLE(APBBMASK, PORT_);
    // Make sure SERCOMS are powered up and clocked
    CLOCK_ENABLE(APBAMASK, SERCOM0_);
    bd92:	4b66      	ldr	r3, [pc, #408]	; (bf2c <SystemInit+0x294>)
    GCLK->GENCTRL[1].reg = GCLK_GENCTRL_SRC(GCLK_GENCTRL_SRC_XOSC1_Val) |
    bd94:	4967      	ldr	r1, [pc, #412]	; (bf34 <SystemInit+0x29c>)
    bd96:	6251      	str	r1, [r2, #36]	; 0x24
    CLOCK_ENABLE(APBAMASK, SERCOM0_);
    bd98:	6958      	ldr	r0, [r3, #20]
    CLOCK_ENABLE(APBAMASK, TC0_); // HLFB(3)

    CLOCK_ENABLE(APBDMASK, TC6_); // HBridge PWM output

    // Enable the cache controller
    CMCC->CTRL.reg = CMCC_CTRL_CEN;
    bd9a:	4e67      	ldr	r6, [pc, #412]	; (bf38 <SystemInit+0x2a0>)
    // Enable the FPU
    SCB->CPACR = 0xFU << 20;
    bd9c:	4d67      	ldr	r5, [pc, #412]	; (bf3c <SystemInit+0x2a4>)

    // set up GCLK6 for OUT TCx and HLFB TCx
    GCLK->GENCTRL[6].reg = GCLK_GENCTRL_GENEN |
    bd9e:	4c68      	ldr	r4, [pc, #416]	; (bf40 <SystemInit+0x2a8>)
                           GCLK_GENCTRL_SRC(GCLK_GENCTRL_SRC_DPLL1_Val) |
                           GCLK_GENCTRL_DIV(__CLEARCORE_DPLL1_HZ /
                                            __CLEARCORE_GCLK6_HZ);
    SYNCBUSY_WAIT(GCLK, GCLK_SYNCBUSY_GENCTRL6);
    bda0:	4960      	ldr	r1, [pc, #384]	; (bf24 <SystemInit+0x28c>)
    CLOCK_ENABLE(APBAMASK, SERCOM0_);
    bda2:	f440 5080 	orr.w	r0, r0, #4096	; 0x1000
    bda6:	6158      	str	r0, [r3, #20]
    CLOCK_ENABLE(APBBMASK, TC3_); // HLFB(2)
    bda8:	6998      	ldr	r0, [r3, #24]
    bdaa:	f440 4080 	orr.w	r0, r0, #16384	; 0x4000
    bdae:	6198      	str	r0, [r3, #24]
    CLOCK_ENABLE(APBAMASK, EIC_);
    bdb0:	6958      	ldr	r0, [r3, #20]
    bdb2:	f440 6080 	orr.w	r0, r0, #1024	; 0x400
    bdb6:	6158      	str	r0, [r3, #20]
    CLOCK_ENABLE(APBBMASK, EVSYS_);
    bdb8:	6998      	ldr	r0, [r3, #24]
    bdba:	f040 0080 	orr.w	r0, r0, #128	; 0x80
    bdbe:	6198      	str	r0, [r3, #24]
    CLOCK_ENABLE(APBBMASK, SERCOM2_);          // XBee
    bdc0:	6998      	ldr	r0, [r3, #24]
    bdc2:	f440 7000 	orr.w	r0, r0, #512	; 0x200
    bdc6:	6198      	str	r0, [r3, #24]
    CLOCK_ENABLE(APBCMASK, TC4_); // HLFB(0)
    bdc8:	69d8      	ldr	r0, [r3, #28]
    bdca:	f040 0020 	orr.w	r0, r0, #32
    bdce:	61d8      	str	r0, [r3, #28]
    CLOCK_ENABLE(AHBMASK, GMAC_);
    bdd0:	6918      	ldr	r0, [r3, #16]
    bdd2:	f440 4080 	orr.w	r0, r0, #16384	; 0x4000
    bdd6:	6118      	str	r0, [r3, #16]
    CLOCK_ENABLE(APBCMASK, GMAC_); // Ethernet
    bdd8:	69d8      	ldr	r0, [r3, #28]
    bdda:	f040 0004 	orr.w	r0, r0, #4
    bdde:	61d8      	str	r0, [r3, #28]
    CLOCK_ENABLE(APBDMASK, SERCOM4_);          // SD
    bde0:	6a18      	ldr	r0, [r3, #32]
    bde2:	f040 0001 	orr.w	r0, r0, #1
    bde6:	6218      	str	r0, [r3, #32]
    CLOCK_ENABLE(APBDMASK, SERCOM7_);
    bde8:	6a18      	ldr	r0, [r3, #32]
    bdea:	f040 0008 	orr.w	r0, r0, #8
    bdee:	6218      	str	r0, [r3, #32]
    CLOCK_ENABLE(APBDMASK, ADC1_);
    bdf0:	6a18      	ldr	r0, [r3, #32]
    bdf2:	f440 7080 	orr.w	r0, r0, #256	; 0x100
    bdf6:	6218      	str	r0, [r3, #32]
    CLOCK_ENABLE(APBCMASK, TC5_); // HLFB(1)
    bdf8:	69d8      	ldr	r0, [r3, #28]
    bdfa:	f040 0040 	orr.w	r0, r0, #64	; 0x40
    bdfe:	61d8      	str	r0, [r3, #28]
    CLOCK_ENABLE(APBAMASK, TC0_); // HLFB(3)
    be00:	6958      	ldr	r0, [r3, #20]
    be02:	f440 4080 	orr.w	r0, r0, #16384	; 0x4000
    be06:	6158      	str	r0, [r3, #20]
    CLOCK_ENABLE(APBDMASK, TC6_); // HBridge PWM output
    be08:	6a18      	ldr	r0, [r3, #32]
    be0a:	f040 0020 	orr.w	r0, r0, #32
    be0e:	6218      	str	r0, [r3, #32]
    CMCC->CTRL.reg = CMCC_CTRL_CEN;
    be10:	2701      	movs	r7, #1
    SCB->CPACR = 0xFU << 20;
    be12:	f44f 0370 	mov.w	r3, #15728640	; 0xf00000
    CMCC->CTRL.reg = CMCC_CTRL_CEN;
    be16:	60b7      	str	r7, [r6, #8]
    SCB->CPACR = 0xFU << 20;
    be18:	f8c5 3088 	str.w	r3, [r5, #136]	; 0x88
    GCLK->GENCTRL[6].reg = GCLK_GENCTRL_GENEN |
    be1c:	6394      	str	r4, [r2, #56]	; 0x38
    SYNCBUSY_WAIT(GCLK, GCLK_SYNCBUSY_GENCTRL6);
    be1e:	684b      	ldr	r3, [r1, #4]
    be20:	f413 7380 	ands.w	r3, r3, #256	; 0x100
    be24:	d1fb      	bne.n	be1e <SystemInit+0x186>

    // set up GCLK7 for SPI sercom clocking
    GCLK->GENCTRL[7].reg = GCLK_GENCTRL_GENEN |
    be26:	4a47      	ldr	r2, [pc, #284]	; (bf44 <SystemInit+0x2ac>)
    be28:	63ca      	str	r2, [r1, #60]	; 0x3c
                           GCLK_GENCTRL_SRC(GCLK_GENCTRL_SRC_DPLL1_Val) |
                           GCLK_GENCTRL_DIV(__CLEARCORE_DPLL1_HZ /
                                            __CLEARCORE_GCLK7_HZ);

    // CPU Clock @ 120MHz on GCLK(0), GCLK(6)=2.048MHz
    SET_CLOCK_SOURCE(EIC_GCLK_ID, 6);
    be2a:	f8d1 0090 	ldr.w	r0, [r1, #144]	; 0x90
    be2e:	4a3d      	ldr	r2, [pc, #244]	; (bf24 <SystemInit+0x28c>)
    be30:	f363 1086 	bfi	r0, r3, #6, #1
    be34:	f8c1 0090 	str.w	r0, [r1, #144]	; 0x90
    be38:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
    be3c:	065c      	lsls	r4, r3, #25
    be3e:	d4fb      	bmi.n	be38 <SystemInit+0x1a0>
    be40:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
    be44:	4937      	ldr	r1, [pc, #220]	; (bf24 <SystemInit+0x28c>)
    be46:	2006      	movs	r0, #6
    be48:	f360 0303 	bfi	r3, r0, #0, #4
    be4c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
    be50:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
    be54:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    be58:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
    be5c:	684b      	ldr	r3, [r1, #4]
    be5e:	f013 0318 	ands.w	r3, r3, #24
    be62:	d1fb      	bne.n	be5c <SystemInit+0x1c4>
    // HLFB timers
    SET_CLOCK_SOURCE(TC0_GCLK_ID, 6);
    be64:	f8d1 00a4 	ldr.w	r0, [r1, #164]	; 0xa4
    be68:	4a2e      	ldr	r2, [pc, #184]	; (bf24 <SystemInit+0x28c>)
    be6a:	f363 1086 	bfi	r0, r3, #6, #1
    be6e:	f8c1 00a4 	str.w	r0, [r1, #164]	; 0xa4
    be72:	f8d2 30a4 	ldr.w	r3, [r2, #164]	; 0xa4
    be76:	0658      	lsls	r0, r3, #25
    be78:	d4fb      	bmi.n	be72 <SystemInit+0x1da>
    be7a:	f8d2 30a4 	ldr.w	r3, [r2, #164]	; 0xa4
    be7e:	4929      	ldr	r1, [pc, #164]	; (bf24 <SystemInit+0x28c>)
    be80:	2006      	movs	r0, #6
    be82:	f360 0303 	bfi	r3, r0, #0, #4
    be86:	f8c2 30a4 	str.w	r3, [r2, #164]	; 0xa4
    be8a:	f8d2 30a4 	ldr.w	r3, [r2, #164]	; 0xa4
    be8e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    be92:	f8c2 30a4 	str.w	r3, [r2, #164]	; 0xa4
    be96:	684b      	ldr	r3, [r1, #4]
    be98:	f013 0318 	ands.w	r3, r3, #24
    be9c:	d1fb      	bne.n	be96 <SystemInit+0x1fe>
    SET_CLOCK_SOURCE(TC4_GCLK_ID, 6);
    be9e:	f8d1 00f8 	ldr.w	r0, [r1, #248]	; 0xf8
    bea2:	4a20      	ldr	r2, [pc, #128]	; (bf24 <SystemInit+0x28c>)
    bea4:	f363 1086 	bfi	r0, r3, #6, #1
    bea8:	f8c1 00f8 	str.w	r0, [r1, #248]	; 0xf8
    beac:	f8d2 30f8 	ldr.w	r3, [r2, #248]	; 0xf8
    beb0:	0659      	lsls	r1, r3, #25
    beb2:	d4fb      	bmi.n	beac <SystemInit+0x214>
    beb4:	f8d2 30f8 	ldr.w	r3, [r2, #248]	; 0xf8
    beb8:	491a      	ldr	r1, [pc, #104]	; (bf24 <SystemInit+0x28c>)
    beba:	2006      	movs	r0, #6
    bebc:	f360 0303 	bfi	r3, r0, #0, #4
    bec0:	f8c2 30f8 	str.w	r3, [r2, #248]	; 0xf8
    bec4:	f8d2 30f8 	ldr.w	r3, [r2, #248]	; 0xf8
    bec8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    becc:	f8c2 30f8 	str.w	r3, [r2, #248]	; 0xf8
    bed0:	684b      	ldr	r3, [r1, #4]
    bed2:	f013 0318 	ands.w	r3, r3, #24
    bed6:	d1fb      	bne.n	bed0 <SystemInit+0x238>
    SET_CLOCK_SOURCE(TC6_GCLK_ID, 6);
    bed8:	f8d1 011c 	ldr.w	r0, [r1, #284]	; 0x11c
    bedc:	4a11      	ldr	r2, [pc, #68]	; (bf24 <SystemInit+0x28c>)
    bede:	f363 1086 	bfi	r0, r3, #6, #1
    bee2:	f8c1 011c 	str.w	r0, [r1, #284]	; 0x11c
    bee6:	f8d2 311c 	ldr.w	r3, [r2, #284]	; 0x11c
    beea:	065b      	lsls	r3, r3, #25
    beec:	d4fb      	bmi.n	bee6 <SystemInit+0x24e>
    beee:	f8d2 311c 	ldr.w	r3, [r2, #284]	; 0x11c
    bef2:	490c      	ldr	r1, [pc, #48]	; (bf24 <SystemInit+0x28c>)
    bef4:	2006      	movs	r0, #6
    bef6:	f360 0303 	bfi	r3, r0, #0, #4
    befa:	f8c2 311c 	str.w	r3, [r2, #284]	; 0x11c
    befe:	f8d2 311c 	ldr.w	r3, [r2, #284]	; 0x11c
    bf02:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    bf06:	f8c2 311c 	str.w	r3, [r2, #284]	; 0x11c
    bf0a:	684b      	ldr	r3, [r1, #4]
    bf0c:	f013 0f18 	tst.w	r3, #24
    bf10:	d1fb      	bne.n	bf0a <SystemInit+0x272>
    
    // NOTE: TC7 and TC6 share same clock source
    // SET_CLOCK_SOURCE(TC7_GCLK_ID, 6);

    // ZL: Is this still needed?
    while (GCLK->SYNCBUSY.reg) {
    bf12:	4a04      	ldr	r2, [pc, #16]	; (bf24 <SystemInit+0x28c>)
    bf14:	6853      	ldr	r3, [r2, #4]
    bf16:	2b00      	cmp	r3, #0
    bf18:	d1fc      	bne.n	bf14 <SystemInit+0x27c>
        continue;
    }
    return;
}
    bf1a:	bcf0      	pop	{r4, r5, r6, r7}
    bf1c:	4770      	bx	lr
    bf1e:	bf00      	nop
    bf20:	40001000 	.word	0x40001000
    bf24:	40001c00 	.word	0x40001c00
    bf28:	00190301 	.word	0x00190301
    bf2c:	40000800 	.word	0x40000800
    bf30:	00020107 	.word	0x00020107
    bf34:	00320b01 	.word	0x00320b01
    bf38:	41006000 	.word	0x41006000
    bf3c:	e000ed00 	.word	0xe000ed00
    bf40:	003a0108 	.word	0x003a0108
    bf44:	000c0108 	.word	0x000c0108

0000bf48 <GClkFreqUpdate>:
 * Update GClk frequency
 *
 * @brief  Updates the divisor on the specified GClk to
 *         generate the requested frequency
 */
void GClkFreqUpdate(uint8_t gclkIndex, uint32_t freqReq) {
    bf48:	b470      	push	{r4, r5, r6}
    // This adjustment is only supported for GClks that use XOSC1 as the src
    if (GCLK->GENCTRL[gclkIndex].bit.SRC != GCLK_GENCTRL_SRC_XOSC1_Val) {
    bf4a:	4a0e      	ldr	r2, [pc, #56]	; (bf84 <GClkFreqUpdate+0x3c>)
    bf4c:	f100 0408 	add.w	r4, r0, #8
    bf50:	f852 3024 	ldr.w	r3, [r2, r4, lsl #2]
    bf54:	f003 030f 	and.w	r3, r3, #15
    bf58:	2b01      	cmp	r3, #1
    bf5a:	d001      	beq.n	bf60 <GClkFreqUpdate+0x18>
    // Configure the clock divisor for the requested frequency
    GCLK->GENCTRL[gclkIndex].bit.DIV = __CLEARCORE_OSC_HZ / freqReq;
    while (GCLK->SYNCBUSY.vec.GENCTRL & (1 << gclkIndex)) {
        continue;
    }
}
    bf5c:	bc70      	pop	{r4, r5, r6}
    bf5e:	4770      	bx	lr
    GCLK->GENCTRL[gclkIndex].bit.DIV = __CLEARCORE_OSC_HZ / freqReq;
    bf60:	f852 6024 	ldr.w	r6, [r2, r4, lsl #2]
    bf64:	4d08      	ldr	r5, [pc, #32]	; (bf88 <GClkFreqUpdate+0x40>)
    bf66:	fbb5 f1f1 	udiv	r1, r5, r1
    bf6a:	b289      	uxth	r1, r1
    bf6c:	f361 461f 	bfi	r6, r1, #16, #16
    bf70:	f842 6024 	str.w	r6, [r2, r4, lsl #2]
    bf74:	4083      	lsls	r3, r0
    while (GCLK->SYNCBUSY.vec.GENCTRL & (1 << gclkIndex)) {
    bf76:	6851      	ldr	r1, [r2, #4]
    bf78:	f3c1 018b 	ubfx	r1, r1, #2, #12
    bf7c:	4219      	tst	r1, r3
    bf7e:	d1fa      	bne.n	bf76 <GClkFreqUpdate+0x2e>
}
    bf80:	bc70      	pop	{r4, r5, r6}
    bf82:	4770      	bx	lr
    bf84:	40001c00 	.word	0x40001c00
    bf88:	017d7840 	.word	0x017d7840

0000bf8c <_ZN9ClearCore12EncoderInputC1Ev>:
}

/*
    Construct and wire in our IO pins
*/
EncoderInput::EncoderInput()
    bf8c:	b538      	push	{r3, r4, r5, lr}
      m_processIndex(false),
      m_hwIndex(0),
      m_indexPosn(0),
      m_indexDetected(false),
      m_indexInverted(false),
      m_stepsLast(0) {
    bf8e:	4911      	ldr	r1, [pc, #68]	; (bfd4 <_ZN9ClearCore12EncoderInputC1Ev+0x48>)
    bf90:	4b11      	ldr	r3, [pc, #68]	; (bfd8 <_ZN9ClearCore12EncoderInputC1Ev+0x4c>)
    bf92:	4a12      	ldr	r2, [pc, #72]	; (bfdc <_ZN9ClearCore12EncoderInputC1Ev+0x50>)
    bf94:	6001      	str	r1, [r0, #0]
    bf96:	2500      	movs	r5, #0
EncoderInput::EncoderInput()
    bf98:	4604      	mov	r4, r0
      m_stepsLast(0) {
    bf9a:	6042      	str	r2, [r0, #4]
    bf9c:	6083      	str	r3, [r0, #8]
    bf9e:	60c5      	str	r5, [r0, #12]
    bfa0:	6105      	str	r5, [r0, #16]
    bfa2:	6145      	str	r5, [r0, #20]
    bfa4:	8305      	strh	r5, [r0, #24]
    bfa6:	4629      	mov	r1, r5
    bfa8:	22c8      	movs	r2, #200	; 0xc8
    bfaa:	301c      	adds	r0, #28
    bfac:	f012 fa26 	bl	1e3fc <memset>
    bfb0:	f884 50e4 	strb.w	r5, [r4, #228]	; 0xe4
    bfb4:	f884 50e5 	strb.w	r5, [r4, #229]	; 0xe5
    bfb8:	f884 50e6 	strb.w	r5, [r4, #230]	; 0xe6
    bfbc:	f8a4 50e8 	strh.w	r5, [r4, #232]	; 0xe8
    bfc0:	f8c4 50ec 	str.w	r5, [r4, #236]	; 0xec
    bfc4:	f884 50f0 	strb.w	r5, [r4, #240]	; 0xf0
    bfc8:	f884 50f1 	strb.w	r5, [r4, #241]	; 0xf1
    bfcc:	f8a4 50f2 	strh.w	r5, [r4, #242]	; 0xf2
}
    bfd0:	4620      	mov	r0, r4
    bfd2:	bd38      	pop	{r3, r4, r5, pc}
    bfd4:	00023198 	.word	0x00023198
    bfd8:	000231b8 	.word	0x000231b8
    bfdc:	000231a8 	.word	0x000231a8

0000bfe0 <_ZN9ClearCore12EncoderInput10InitializeEv>:


void EncoderInput::Initialize() {
    bfe0:	b430      	push	{r4, r5}

    // Set up PDEC

    // Set the clock source for PDEC to GCLK0 (120 MHz) and enable
    // the peripheral channel
    SET_CLOCK_SOURCE(PDEC_GCLK_ID, 0);
    bfe2:	4a12      	ldr	r2, [pc, #72]	; (c02c <_ZN9ClearCore12EncoderInput10InitializeEv+0x4c>)
    bfe4:	f8d2 30fc 	ldr.w	r3, [r2, #252]	; 0xfc
    bfe8:	f36f 1386 	bfc	r3, #6, #1
    bfec:	f8c2 30fc 	str.w	r3, [r2, #252]	; 0xfc
    bff0:	f8d2 30fc 	ldr.w	r3, [r2, #252]	; 0xfc
    bff4:	f3c3 1380 	ubfx	r3, r3, #6, #1
    bff8:	2b00      	cmp	r3, #0
    bffa:	d1f9      	bne.n	bff0 <_ZN9ClearCore12EncoderInput10InitializeEv+0x10>
    bffc:	f8d2 00fc 	ldr.w	r0, [r2, #252]	; 0xfc

    // Enables the peripheral clock to PDEC
    CLOCK_ENABLE(APBCMASK, PDEC_);
    c000:	490b      	ldr	r1, [pc, #44]	; (c030 <_ZN9ClearCore12EncoderInput10InitializeEv+0x50>)

    PDEC->CTRLA.reg = PDEC_CTRLA_MODE_QDEC | PDEC_CTRLA_CONF_X4 |
    c002:	4c0c      	ldr	r4, [pc, #48]	; (c034 <_ZN9ClearCore12EncoderInput10InitializeEv+0x54>)
    c004:	4d0c      	ldr	r5, [pc, #48]	; (c038 <_ZN9ClearCore12EncoderInput10InitializeEv+0x58>)
    SET_CLOCK_SOURCE(PDEC_GCLK_ID, 0);
    c006:	f363 0003 	bfi	r0, r3, #0, #4
    c00a:	f8c2 00fc 	str.w	r0, [r2, #252]	; 0xfc
    c00e:	f8d2 30fc 	ldr.w	r3, [r2, #252]	; 0xfc
    c012:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    c016:	f8c2 30fc 	str.w	r3, [r2, #252]	; 0xfc
    c01a:	6853      	ldr	r3, [r2, #4]
    CLOCK_ENABLE(APBCMASK, PDEC_);
    c01c:	69cb      	ldr	r3, [r1, #28]
    c01e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
    c022:	61cb      	str	r3, [r1, #28]
    PDEC->CTRLA.reg = PDEC_CTRLA_MODE_QDEC | PDEC_CTRLA_CONF_X4 |
    c024:	6025      	str	r5, [r4, #0]
                      PDEC_CTRLA_PINEN0 | PDEC_CTRLA_PINEN1 |
                      PDEC_CTRLA_ANGULAR_Msk;

}
    c026:	bc30      	pop	{r4, r5}
    c028:	4770      	bx	lr
    c02a:	bf00      	nop
    c02c:	40001c00 	.word	0x40001c00
    c030:	40000800 	.word	0x40000800
    c034:	42001c00 	.word	0x42001c00
    c038:	07030000 	.word	0x07030000

0000c03c <_ZN9ClearCore12EncoderInput6UpdateEv>:

void EncoderInput::Update() {
    c03c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    //If the encoder is disabled, just return
    if (!m_enabled) {
    c03e:	f890 30e5 	ldrb.w	r3, [r0, #229]	; 0xe5
    c042:	2b00      	cmp	r3, #0
    c044:	d038      	beq.n	c0b8 <_ZN9ClearCore12EncoderInput6UpdateEv+0x7c>
        return;
    }
    // Refresh the COUNT reading
    PDEC->CTRLBSET.reg = PDEC_CTRLBSET_CMD_READSYNC;
    c046:	4a29      	ldr	r2, [pc, #164]	; (c0ec <_ZN9ClearCore12EncoderInput6UpdateEv+0xb0>)
    c048:	2360      	movs	r3, #96	; 0x60
    c04a:	7153      	strb	r3, [r2, #5]
    SYNCBUSY_WAIT(PDEC, PDEC_SYNCBUSY_COUNT);
    c04c:	6913      	ldr	r3, [r2, #16]
    c04e:	f013 0340 	ands.w	r3, r3, #64	; 0x40
    c052:	d1fb      	bne.n	c04c <_ZN9ClearCore12EncoderInput6UpdateEv+0x10>
    int16_t currentHwPosn = PDEC->COUNT.reg;
    c054:	69d5      	ldr	r5, [r2, #28]
    m_stepsLast = currentHwPosn - m_hwPosn;
    c056:	8b02      	ldrh	r2, [r0, #24]
    
    m_indexDetected = m_processIndex;
    c058:	f890 10e6 	ldrb.w	r1, [r0, #230]	; 0xe6
    c05c:	f880 10f0 	strb.w	r1, [r0, #240]	; 0xf0
    m_stepsLast = currentHwPosn - m_hwPosn;
    c060:	1aaa      	subs	r2, r5, r2
    c062:	b212      	sxth	r2, r2
    c064:	4604      	mov	r4, r0
    c066:	f8a0 20f2 	strh.w	r2, [r0, #242]	; 0xf2
    int16_t currentHwPosn = PDEC->COUNT.reg;
    c06a:	b22d      	sxth	r5, r5
    if (m_processIndex) {
    c06c:	bb29      	cbnz	r1, c0ba <_ZN9ClearCore12EncoderInput6UpdateEv+0x7e>
        m_indexPosn = atomic_load_n(&m_curPosn) + m_hwIndex - m_hwPosn;
        m_processIndex = false;
        // Re-enable the index capture interrupt
        InputMgr.InterruptEnable(m_indexInfo->extInt, true, false);
    }
    m_hwPosn = currentHwPosn;
    c06e:	8325      	strh	r5, [r4, #24]
        m_indexPosn = atomic_load_n(&m_curPosn) + m_hwIndex - m_hwPosn;
    c070:	f104 030c 	add.w	r3, r4, #12
    // Adjust the measured position
    int32_t posnNow = atomic_add_fetch(&m_curPosn, (int32_t)m_stepsLast);
    c074:	f3bf 8f5b 	dmb	ish
    c078:	e853 6f00 	ldrex	r6, [r3]
    c07c:	4416      	add	r6, r2
    c07e:	e843 6100 	strex	r1, r6, [r3]
    c082:	2900      	cmp	r1, #0
    c084:	d1f8      	bne.n	c078 <_ZN9ClearCore12EncoderInput6UpdateEv+0x3c>
    c086:	f3bf 8f5b 	dmb	ish
    // Calculate the velocity based on the position change in the 
    // last VEL_EST_SAMPLES sample times and convert to cnts/sec
    int32_t posnDelta = posnNow - m_posnHistory[m_posnHistoryIndex];
    c08a:	f894 30e4 	ldrb.w	r3, [r4, #228]	; 0xe4
    m_velocity = posnDelta * (_CLEARCORE_SAMPLE_RATE_HZ / VEL_EST_SAMPLES);
    m_posnHistory[m_posnHistoryIndex] = posnNow;
    m_posnHistoryIndex = (m_posnHistoryIndex + 1) % VEL_EST_SAMPLES;
    c08e:	4d18      	ldr	r5, [pc, #96]	; (c0f0 <_ZN9ClearCore12EncoderInput6UpdateEv+0xb4>)
    c090:	eb04 0783 	add.w	r7, r4, r3, lsl #2
    c094:	3301      	adds	r3, #1
    int32_t posnDelta = posnNow - m_posnHistory[m_posnHistoryIndex];
    c096:	69f9      	ldr	r1, [r7, #28]
    m_posnHistoryIndex = (m_posnHistoryIndex + 1) % VEL_EST_SAMPLES;
    c098:	fb85 2503 	smull	r2, r5, r5, r3
    c09c:	17da      	asrs	r2, r3, #31
    int32_t posnDelta = posnNow - m_posnHistory[m_posnHistoryIndex];
    c09e:	1a70      	subs	r0, r6, r1
    m_posnHistoryIndex = (m_posnHistoryIndex + 1) % VEL_EST_SAMPLES;
    c0a0:	ebc2 1225 	rsb	r2, r2, r5, asr #4
    m_velocity = posnDelta * (_CLEARCORE_SAMPLE_RATE_HZ / VEL_EST_SAMPLES);
    c0a4:	2164      	movs	r1, #100	; 0x64
    m_posnHistoryIndex = (m_posnHistoryIndex + 1) % VEL_EST_SAMPLES;
    c0a6:	2532      	movs	r5, #50	; 0x32
    m_velocity = posnDelta * (_CLEARCORE_SAMPLE_RATE_HZ / VEL_EST_SAMPLES);
    c0a8:	fb01 f100 	mul.w	r1, r1, r0
    m_posnHistoryIndex = (m_posnHistoryIndex + 1) % VEL_EST_SAMPLES;
    c0ac:	fb05 3312 	mls	r3, r5, r2, r3
    m_velocity = posnDelta * (_CLEARCORE_SAMPLE_RATE_HZ / VEL_EST_SAMPLES);
    c0b0:	6161      	str	r1, [r4, #20]
    m_posnHistory[m_posnHistoryIndex] = posnNow;
    c0b2:	61fe      	str	r6, [r7, #28]
    m_posnHistoryIndex = (m_posnHistoryIndex + 1) % VEL_EST_SAMPLES;
    c0b4:	f884 30e4 	strb.w	r3, [r4, #228]	; 0xe4
    c0b8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        m_indexPosn = atomic_load_n(&m_curPosn) + m_hwIndex - m_hwPosn;
    c0ba:	68c6      	ldr	r6, [r0, #12]
    c0bc:	f3bf 8f5b 	dmb	ish
    c0c0:	f9b0 20e8 	ldrsh.w	r2, [r0, #232]	; 0xe8
    c0c4:	f9b0 0018 	ldrsh.w	r0, [r0, #24]
        InputMgr.InterruptEnable(m_indexInfo->extInt, true, false);
    c0c8:	68a1      	ldr	r1, [r4, #8]
        m_processIndex = false;
    c0ca:	f884 30e6 	strb.w	r3, [r4, #230]	; 0xe6
        m_indexPosn = atomic_load_n(&m_curPosn) + m_hwIndex - m_hwPosn;
    c0ce:	4432      	add	r2, r6
    c0d0:	1a12      	subs	r2, r2, r0
        InputMgr.InterruptEnable(m_indexInfo->extInt, true, false);
    c0d2:	4808      	ldr	r0, [pc, #32]	; (c0f4 <_ZN9ClearCore12EncoderInput6UpdateEv+0xb8>)
        m_indexPosn = atomic_load_n(&m_curPosn) + m_hwIndex - m_hwPosn;
    c0d4:	f8c4 20ec 	str.w	r2, [r4, #236]	; 0xec
        InputMgr.InterruptEnable(m_indexInfo->extInt, true, false);
    c0d8:	f991 1003 	ldrsb.w	r1, [r1, #3]
    c0dc:	6800      	ldr	r0, [r0, #0]
    c0de:	2201      	movs	r2, #1
    c0e0:	f7f8 fddc 	bl	4c9c <_ZN9ClearCore12InputManager15InterruptEnableEabb>
    c0e4:	f9b4 20f2 	ldrsh.w	r2, [r4, #242]	; 0xf2
    c0e8:	e7c1      	b.n	c06e <_ZN9ClearCore12EncoderInput6UpdateEv+0x32>
    c0ea:	bf00      	nop
    c0ec:	42001c00 	.word	0x42001c00
    c0f0:	51eb851f 	.word	0x51eb851f
    c0f4:	20000ad0 	.word	0x20000ad0

0000c0f8 <cdcdf_acm_req>:
 * \param[in] ep Endpoint address.
 * \param[in] req Pointer to the request.
 * \return Operation status.
 */
static int32_t cdcdf_acm_req(uint8_t ep, struct usb_req *req, enum usb_ctrl_stage stage)
{
    c0f8:	b5f0      	push	{r4, r5, r6, r7, lr}
	if (0x01 != ((req->bmRequestType >> 5) & 0x03)) { // class request
    c0fa:	780d      	ldrb	r5, [r1, #0]
    c0fc:	f3c5 1441 	ubfx	r4, r5, #5, #2
    c100:	2c01      	cmp	r4, #1
{
    c102:	b083      	sub	sp, #12
	if (0x01 != ((req->bmRequestType >> 5) & 0x03)) { // class request
    c104:	d152      	bne.n	c1ac <cdcdf_acm_req+0xb4>
		return ERR_NOT_FOUND;
	}
	if ((req->wIndex == _cdcdf_acm_funcd.func_iface[0]) || (req->wIndex == _cdcdf_acm_funcd.func_iface[1])) {
    c106:	4e30      	ldr	r6, [pc, #192]	; (c1c8 <cdcdf_acm_req+0xd0>)
    c108:	888c      	ldrh	r4, [r1, #4]
    c10a:	7833      	ldrb	r3, [r6, #0]
    c10c:	42a3      	cmp	r3, r4
    c10e:	d002      	beq.n	c116 <cdcdf_acm_req+0x1e>
    c110:	7873      	ldrb	r3, [r6, #1]
    c112:	42a3      	cmp	r3, r4
    c114:	d14a      	bne.n	c1ac <cdcdf_acm_req+0xb4>
		if (req->bmRequestType & USB_EP_DIR_IN) {
    c116:	062b      	lsls	r3, r5, #24
    c118:	4617      	mov	r7, r2
    c11a:	4606      	mov	r6, r0
    c11c:	460c      	mov	r4, r1
    c11e:	d438      	bmi.n	c192 <cdcdf_acm_req+0x9a>
	uint16_t                   len      = req->wLength;
    c120:	88cd      	ldrh	r5, [r1, #6]
	uint8_t *                  ctrl_buf = usbdc_get_ctrl_buffer();
    c122:	f000 fc7f 	bl	ca24 <usbdc_get_ctrl_buffer>
	switch (req->bRequest) {
    c126:	7863      	ldrb	r3, [r4, #1]
    c128:	2b20      	cmp	r3, #32
	uint8_t *                  ctrl_buf = usbdc_get_ctrl_buffer();
    c12a:	4601      	mov	r1, r0
	switch (req->bRequest) {
    c12c:	d00f      	beq.n	c14e <cdcdf_acm_req+0x56>
    c12e:	2b22      	cmp	r3, #34	; 0x22
    c130:	d128      	bne.n	c184 <cdcdf_acm_req+0x8c>
		usbdc_xfer(0, NULL, 0, 0);
    c132:	2300      	movs	r3, #0
    c134:	461a      	mov	r2, r3
    c136:	4619      	mov	r1, r3
    c138:	4618      	mov	r0, r3
    c13a:	f000 fc07 	bl	c94c <usbdc_xfer>
		if (NULL != cdcdf_acm_notify_state) {
    c13e:	4b23      	ldr	r3, [pc, #140]	; (c1cc <cdcdf_acm_req+0xd4>)
    c140:	681b      	ldr	r3, [r3, #0]
    c142:	b31b      	cbz	r3, c18c <cdcdf_acm_req+0x94>
			cdcdf_acm_notify_state(req->wValue);
    c144:	8860      	ldrh	r0, [r4, #2]
    c146:	4798      	blx	r3
		return ERR_NONE;
    c148:	2000      	movs	r0, #0
			return cdcdf_acm_set_req(ep, req, stage);
		}
	} else {
		return ERR_NOT_FOUND;
	}
}
    c14a:	b003      	add	sp, #12
    c14c:	bdf0      	pop	{r4, r5, r6, r7, pc}
		if (sizeof(struct usb_cdc_line_coding) != len) {
    c14e:	2d07      	cmp	r5, #7
    c150:	d136      	bne.n	c1c0 <cdcdf_acm_req+0xc8>
		if (USB_SETUP_STAGE == stage) {
    c152:	b37f      	cbz	r7, c1b4 <cdcdf_acm_req+0xbc>
			if ((NULL == cdcdf_acm_set_line_coding) || (true == cdcdf_acm_set_line_coding(&line_coding_tmp))) {
    c154:	4b1e      	ldr	r3, [pc, #120]	; (c1d0 <cdcdf_acm_req+0xd8>)
			memcpy(&line_coding_tmp, ctrl_buf, sizeof(struct usb_cdc_line_coding));
    c156:	6800      	ldr	r0, [r0, #0]
    c158:	9000      	str	r0, [sp, #0]
			if ((NULL == cdcdf_acm_set_line_coding) || (true == cdcdf_acm_set_line_coding(&line_coding_tmp))) {
    c15a:	681b      	ldr	r3, [r3, #0]
			memcpy(&line_coding_tmp, ctrl_buf, sizeof(struct usb_cdc_line_coding));
    c15c:	888a      	ldrh	r2, [r1, #4]
    c15e:	7989      	ldrb	r1, [r1, #6]
    c160:	f88d 1006 	strb.w	r1, [sp, #6]
    c164:	466c      	mov	r4, sp
    c166:	f8ad 2004 	strh.w	r2, [sp, #4]
			if ((NULL == cdcdf_acm_set_line_coding) || (true == cdcdf_acm_set_line_coding(&line_coding_tmp))) {
    c16a:	b113      	cbz	r3, c172 <cdcdf_acm_req+0x7a>
    c16c:	4668      	mov	r0, sp
    c16e:	4798      	blx	r3
    c170:	b160      	cbz	r0, c18c <cdcdf_acm_req+0x94>
				usbd_cdc_line_coding = line_coding_tmp;
    c172:	e894 0003 	ldmia.w	r4, {r0, r1}
    c176:	4b17      	ldr	r3, [pc, #92]	; (c1d4 <cdcdf_acm_req+0xdc>)
    c178:	0c0a      	lsrs	r2, r1, #16
    c17a:	6018      	str	r0, [r3, #0]
    c17c:	8099      	strh	r1, [r3, #4]
    c17e:	719a      	strb	r2, [r3, #6]
			return ERR_NONE;
    c180:	2000      	movs	r0, #0
    c182:	e001      	b.n	c188 <cdcdf_acm_req+0x90>
		return ERR_INVALID_ARG;
    c184:	f06f 000c 	mvn.w	r0, #12
}
    c188:	b003      	add	sp, #12
    c18a:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return ERR_NONE;
    c18c:	2000      	movs	r0, #0
}
    c18e:	b003      	add	sp, #12
    c190:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (USB_DATA_STAGE == stage) {
    c192:	2a01      	cmp	r2, #1
    c194:	d0fa      	beq.n	c18c <cdcdf_acm_req+0x94>
	switch (req->bRequest) {
    c196:	784b      	ldrb	r3, [r1, #1]
    c198:	2b21      	cmp	r3, #33	; 0x21
    c19a:	d1f3      	bne.n	c184 <cdcdf_acm_req+0x8c>
		if (sizeof(struct usb_cdc_line_coding) != len) {
    c19c:	88ca      	ldrh	r2, [r1, #6]
    c19e:	2a07      	cmp	r2, #7
    c1a0:	d10e      	bne.n	c1c0 <cdcdf_acm_req+0xc8>
		return usbdc_xfer(ep, (uint8_t *)&usbd_cdc_line_coding, len, false);
    c1a2:	2300      	movs	r3, #0
    c1a4:	490b      	ldr	r1, [pc, #44]	; (c1d4 <cdcdf_acm_req+0xdc>)
    c1a6:	f000 fbd1 	bl	c94c <usbdc_xfer>
    c1aa:	e7ed      	b.n	c188 <cdcdf_acm_req+0x90>
		return ERR_NOT_FOUND;
    c1ac:	f06f 0009 	mvn.w	r0, #9
}
    c1b0:	b003      	add	sp, #12
    c1b2:	bdf0      	pop	{r4, r5, r6, r7, pc}
			return usbdc_xfer(ep, ctrl_buf, len, false);
    c1b4:	463b      	mov	r3, r7
    c1b6:	462a      	mov	r2, r5
    c1b8:	4630      	mov	r0, r6
    c1ba:	f000 fbc7 	bl	c94c <usbdc_xfer>
    c1be:	e7e3      	b.n	c188 <cdcdf_acm_req+0x90>
			return ERR_INVALID_DATA;
    c1c0:	f04f 30ff 	mov.w	r0, #4294967295
    c1c4:	e7e0      	b.n	c188 <cdcdf_acm_req+0x90>
    c1c6:	bf00      	nop
    c1c8:	20001c18 	.word	0x20001c18
    c1cc:	20001c20 	.word	0x20001c20
    c1d0:	20001c24 	.word	0x20001c24
    c1d4:	20001c28 	.word	0x20001c28

0000c1d8 <cdcdf_acm_ctrl>:
	switch (ctrl) {
    c1d8:	2901      	cmp	r1, #1
{
    c1da:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    c1de:	4616      	mov	r6, r2
	switch (ctrl) {
    c1e0:	d008      	beq.n	c1f4 <cdcdf_acm_ctrl+0x1c>
    c1e2:	d314      	bcc.n	c20e <cdcdf_acm_ctrl+0x36>
		return ERR_INVALID_ARG;
    c1e4:	2902      	cmp	r1, #2
    c1e6:	bf0c      	ite	eq
    c1e8:	f06f 001a 	mvneq.w	r0, #26
    c1ec:	f06f 000c 	mvnne.w	r0, #12
    c1f0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    c1f4:	6884      	ldr	r4, [r0, #8]
	if (desc) {
    c1f6:	2a00      	cmp	r2, #0
    c1f8:	d047      	beq.n	c28a <cdcdf_acm_ctrl+0xb2>
		ifc_desc.bInterfaceClass = desc->sod[5];
    c1fa:	6813      	ldr	r3, [r2, #0]
		if ((ifc_desc.bInterfaceClass != CDC_CLASS_COMM) && (ifc_desc.bInterfaceClass != CDC_CLASS_DATA)) {
    c1fc:	795b      	ldrb	r3, [r3, #5]
    c1fe:	f003 03f7 	and.w	r3, r3, #247	; 0xf7
    c202:	2b02      	cmp	r3, #2
    c204:	d041      	beq.n	c28a <cdcdf_acm_ctrl+0xb2>
			return ERR_NOT_FOUND;
    c206:	f06f 0009 	mvn.w	r0, #9
    c20a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	ifc = desc->sod;
    c20e:	6813      	ldr	r3, [r2, #0]
    c210:	6887      	ldr	r7, [r0, #8]
		if (NULL == ifc) {
    c212:	2b00      	cmp	r3, #0
    c214:	d0f7      	beq.n	c206 <cdcdf_acm_ctrl+0x2e>
    c216:	f107 38ff 	add.w	r8, r7, #4294967295
    c21a:	f107 0901 	add.w	r9, r7, #1
		if ((CDC_CLASS_COMM == ifc_desc.bInterfaceClass) || (CDC_CLASS_DATA == ifc_desc.bInterfaceClass)) {
    c21e:	795a      	ldrb	r2, [r3, #5]
		ifc_desc.bInterfaceNumber = ifc[2];
    c220:	7899      	ldrb	r1, [r3, #2]
		if ((CDC_CLASS_COMM == ifc_desc.bInterfaceClass) || (CDC_CLASS_DATA == ifc_desc.bInterfaceClass)) {
    c222:	f002 02f7 	and.w	r2, r2, #247	; 0xf7
    c226:	2a02      	cmp	r2, #2
    c228:	d1ed      	bne.n	c206 <cdcdf_acm_ctrl+0x2e>
			if (func_data->func_iface[i] == ifc_desc.bInterfaceNumber) { // Initialized
    c22a:	f818 2f01 	ldrb.w	r2, [r8, #1]!
    c22e:	4291      	cmp	r1, r2
    c230:	d061      	beq.n	c2f6 <cdcdf_acm_ctrl+0x11e>
			} else if (func_data->func_iface[i] != 0xFF) { // Occupied
    c232:	2aff      	cmp	r2, #255	; 0xff
    c234:	d15b      	bne.n	c2ee <cdcdf_acm_ctrl+0x116>
				func_data->func_iface[i] = ifc_desc.bInterfaceNumber;
    c236:	f888 1000 	strb.w	r1, [r8]
		ep = usb_find_desc(ifc, desc->eod, USB_DT_ENDPOINT);
    c23a:	4618      	mov	r0, r3
    c23c:	6871      	ldr	r1, [r6, #4]
    c23e:	2205      	movs	r2, #5
    c240:	f000 fc00 	bl	ca44 <usb_find_desc>
		while (NULL != ep) {
    c244:	4604      	mov	r4, r0
    c246:	b980      	cbnz	r0, c26a <cdcdf_acm_ctrl+0x92>
    c248:	e041      	b.n	c2ce <cdcdf_acm_ctrl+0xf6>
			if (ep_desc.bEndpointAddress & USB_EP_DIR_IN) {
    c24a:	062b      	lsls	r3, r5, #24
				func_data->func_ep_in[i] = ep_desc.bEndpointAddress;
    c24c:	bf4c      	ite	mi
    c24e:	f888 5002 	strbmi.w	r5, [r8, #2]
				func_data->func_ep_out = ep_desc.bEndpointAddress;
    c252:	713d      	strbpl	r5, [r7, #4]
				usb_d_ep_enable(func_data->func_ep_out);
    c254:	4628      	mov	r0, r5
    c256:	f000 feaf 	bl	cfb8 <usb_d_ep_enable>
			desc->sod = ep;
    c25a:	6034      	str	r4, [r6, #0]
 *  \param[in] desc Byte pointer to the descriptor start address
 *  \return Byte pointer to the next descriptor
 */
static inline uint8_t *usb_desc_next(uint8_t *desc)
{
	return (desc + usb_desc_len(desc));
    c25c:	7820      	ldrb	r0, [r4, #0]
			ep        = usb_find_ep_desc(usb_desc_next(desc->sod), desc->eod);
    c25e:	6871      	ldr	r1, [r6, #4]
    c260:	4420      	add	r0, r4
    c262:	f000 fc09 	bl	ca78 <usb_find_ep_desc>
		while (NULL != ep) {
    c266:	4604      	mov	r4, r0
    c268:	b388      	cbz	r0, c2ce <cdcdf_acm_ctrl+0xf6>
	return (ptr[0] + (ptr[1] << 8));
    c26a:	7963      	ldrb	r3, [r4, #5]
    c26c:	7922      	ldrb	r2, [r4, #4]
			ep_desc.bEndpointAddress = ep[2];
    c26e:	78a5      	ldrb	r5, [r4, #2]
			if (usb_d_ep_init(ep_desc.bEndpointAddress, ep_desc.bmAttributes, ep_desc.wMaxPacketSize)) {
    c270:	78e1      	ldrb	r1, [r4, #3]
    c272:	eb02 2203 	add.w	r2, r2, r3, lsl #8
    c276:	b292      	uxth	r2, r2
    c278:	4628      	mov	r0, r5
    c27a:	f000 fe4b 	bl	cf14 <usb_d_ep_init>
    c27e:	2800      	cmp	r0, #0
    c280:	d0e3      	beq.n	c24a <cdcdf_acm_ctrl+0x72>
				return ERR_NOT_INITIALIZED;
    c282:	f06f 0013 	mvn.w	r0, #19
}
    c286:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		if (func_data->func_iface[i] == 0xFF) {
    c28a:	7823      	ldrb	r3, [r4, #0]
    c28c:	2bff      	cmp	r3, #255	; 0xff
    c28e:	d007      	beq.n	c2a0 <cdcdf_acm_ctrl+0xc8>
			if (func_data->func_ep_in[i] != 0xFF) {
    c290:	78a0      	ldrb	r0, [r4, #2]
			func_data->func_iface[i] = 0xFF;
    c292:	25ff      	movs	r5, #255	; 0xff
			if (func_data->func_ep_in[i] != 0xFF) {
    c294:	42a8      	cmp	r0, r5
			func_data->func_iface[i] = 0xFF;
    c296:	7025      	strb	r5, [r4, #0]
			if (func_data->func_ep_in[i] != 0xFF) {
    c298:	d002      	beq.n	c2a0 <cdcdf_acm_ctrl+0xc8>
				usb_d_ep_deinit(func_data->func_ep_in[i]);
    c29a:	f000 fe71 	bl	cf80 <usb_d_ep_deinit>
				func_data->func_ep_in[i] = 0xFF;
    c29e:	70a5      	strb	r5, [r4, #2]
		if (func_data->func_iface[i] == 0xFF) {
    c2a0:	7863      	ldrb	r3, [r4, #1]
    c2a2:	2bff      	cmp	r3, #255	; 0xff
    c2a4:	d007      	beq.n	c2b6 <cdcdf_acm_ctrl+0xde>
			if (func_data->func_ep_in[i] != 0xFF) {
    c2a6:	78e0      	ldrb	r0, [r4, #3]
			func_data->func_iface[i] = 0xFF;
    c2a8:	25ff      	movs	r5, #255	; 0xff
			if (func_data->func_ep_in[i] != 0xFF) {
    c2aa:	42a8      	cmp	r0, r5
			func_data->func_iface[i] = 0xFF;
    c2ac:	7065      	strb	r5, [r4, #1]
			if (func_data->func_ep_in[i] != 0xFF) {
    c2ae:	d002      	beq.n	c2b6 <cdcdf_acm_ctrl+0xde>
				usb_d_ep_deinit(func_data->func_ep_in[i]);
    c2b0:	f000 fe66 	bl	cf80 <usb_d_ep_deinit>
				func_data->func_ep_in[i] = 0xFF;
    c2b4:	70e5      	strb	r5, [r4, #3]
	if (func_data->func_ep_out != 0xFF) {
    c2b6:	7920      	ldrb	r0, [r4, #4]
    c2b8:	28ff      	cmp	r0, #255	; 0xff
    c2ba:	d003      	beq.n	c2c4 <cdcdf_acm_ctrl+0xec>
		usb_d_ep_deinit(func_data->func_ep_out);
    c2bc:	f000 fe60 	bl	cf80 <usb_d_ep_deinit>
		func_data->func_ep_out = 0xFF;
    c2c0:	23ff      	movs	r3, #255	; 0xff
    c2c2:	7123      	strb	r3, [r4, #4]
	_cdcdf_acm_funcd.enabled = false;
    c2c4:	4b0f      	ldr	r3, [pc, #60]	; (c304 <cdcdf_acm_ctrl+0x12c>)
    c2c6:	2000      	movs	r0, #0
    c2c8:	7158      	strb	r0, [r3, #5]
    c2ca:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		ifc = usb_find_desc(usb_desc_next(desc->sod), desc->eod, USB_DT_INTERFACE);
    c2ce:	6833      	ldr	r3, [r6, #0]
    c2d0:	6871      	ldr	r1, [r6, #4]
	return (desc + usb_desc_len(desc));
    c2d2:	7818      	ldrb	r0, [r3, #0]
    c2d4:	2204      	movs	r2, #4
    c2d6:	4418      	add	r0, r3
    c2d8:	f000 fbb4 	bl	ca44 <usb_find_desc>
	for (i = 0; i < 2; i++) {
    c2dc:	45c1      	cmp	r9, r8
		ifc = usb_find_desc(usb_desc_next(desc->sod), desc->eod, USB_DT_INTERFACE);
    c2de:	4603      	mov	r3, r0
	for (i = 0; i < 2; i++) {
    c2e0:	d10d      	bne.n	c2fe <cdcdf_acm_ctrl+0x126>
	_cdcdf_acm_funcd.enabled = true;
    c2e2:	4b08      	ldr	r3, [pc, #32]	; (c304 <cdcdf_acm_ctrl+0x12c>)
    c2e4:	2201      	movs	r2, #1
    c2e6:	715a      	strb	r2, [r3, #5]
	return ERR_NONE;
    c2e8:	2000      	movs	r0, #0
    c2ea:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
				return ERR_NO_RESOURCE;
    c2ee:	f06f 001b 	mvn.w	r0, #27
    c2f2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
				return ERR_ALREADY_INITIALIZED;
    c2f6:	f06f 0011 	mvn.w	r0, #17
    c2fa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		if (NULL == ifc) {
    c2fe:	2b00      	cmp	r3, #0
    c300:	d18d      	bne.n	c21e <cdcdf_acm_ctrl+0x46>
    c302:	e780      	b.n	c206 <cdcdf_acm_ctrl+0x2e>
    c304:	20001c18 	.word	0x20001c18

0000c308 <cdcdf_acm_init>:

/**
 * \brief Initialize the USB CDC ACM Function Driver
 */
int32_t cdcdf_acm_init(void)
{
    c308:	b508      	push	{r3, lr}
	if (usbdc_get_state() > USBD_S_POWER) {
    c30a:	f000 fb91 	bl	ca30 <usbdc_get_state>
    c30e:	2801      	cmp	r0, #1
    c310:	d80d      	bhi.n	c32e <cdcdf_acm_init+0x26>
		return ERR_DENIED;
	}

	_cdcdf_acm.ctrl      = cdcdf_acm_ctrl;
    c312:	4b08      	ldr	r3, [pc, #32]	; (c334 <cdcdf_acm_init+0x2c>)
	_cdcdf_acm.func_data = &_cdcdf_acm_funcd;
    c314:	4a08      	ldr	r2, [pc, #32]	; (c338 <cdcdf_acm_init+0x30>)
	_cdcdf_acm.ctrl      = cdcdf_acm_ctrl;
    c316:	4909      	ldr	r1, [pc, #36]	; (c33c <cdcdf_acm_init+0x34>)
    c318:	6059      	str	r1, [r3, #4]

	usbdc_register_function(&_cdcdf_acm);
    c31a:	4618      	mov	r0, r3
	_cdcdf_acm.func_data = &_cdcdf_acm_funcd;
    c31c:	609a      	str	r2, [r3, #8]
	usbdc_register_function(&_cdcdf_acm);
    c31e:	f000 fb61 	bl	c9e4 <usbdc_register_function>
	usbdc_register_handler(USBDC_HDL_REQ, &cdcdf_acm_req_h);
    c322:	4907      	ldr	r1, [pc, #28]	; (c340 <cdcdf_acm_init+0x38>)
    c324:	2001      	movs	r0, #1
    c326:	f000 fb1f 	bl	c968 <usbdc_register_handler>
	return ERR_NONE;
    c32a:	2000      	movs	r0, #0
    c32c:	bd08      	pop	{r3, pc}
		return ERR_DENIED;
    c32e:	f06f 0010 	mvn.w	r0, #16
}
    c332:	bd08      	pop	{r3, pc}
    c334:	20001c0c 	.word	0x20001c0c
    c338:	20001c18 	.word	0x20001c18
    c33c:	0000c1d9 	.word	0x0000c1d9
    c340:	200000e4 	.word	0x200000e4

0000c344 <cdcdf_acm_read>:
/**
 * \brief Check whether CDC ACM Function is enabled
 */
bool cdcdf_acm_is_enabled(void)
{
	return _cdcdf_acm_funcd.enabled;
    c344:	4b08      	ldr	r3, [pc, #32]	; (c368 <cdcdf_acm_read+0x24>)
{
    c346:	b410      	push	{r4}
	if (!cdcdf_acm_is_enabled()) {
    c348:	795c      	ldrb	r4, [r3, #5]
    c34a:	b13c      	cbz	r4, c35c <cdcdf_acm_read+0x18>
	return usbdc_xfer(_cdcdf_acm_funcd.func_ep_out, buf, size, false);
    c34c:	460a      	mov	r2, r1
}
    c34e:	f85d 4b04 	ldr.w	r4, [sp], #4
	return usbdc_xfer(_cdcdf_acm_funcd.func_ep_out, buf, size, false);
    c352:	4601      	mov	r1, r0
    c354:	7918      	ldrb	r0, [r3, #4]
    c356:	2300      	movs	r3, #0
    c358:	f000 baf8 	b.w	c94c <usbdc_xfer>
}
    c35c:	f06f 0010 	mvn.w	r0, #16
    c360:	f85d 4b04 	ldr.w	r4, [sp], #4
    c364:	4770      	bx	lr
    c366:	bf00      	nop
    c368:	20001c18 	.word	0x20001c18

0000c36c <cdcdf_acm_write>:
	return _cdcdf_acm_funcd.enabled;
    c36c:	4b08      	ldr	r3, [pc, #32]	; (c390 <cdcdf_acm_write+0x24>)
{
    c36e:	b410      	push	{r4}
	if (!cdcdf_acm_is_enabled()) {
    c370:	795c      	ldrb	r4, [r3, #5]
    c372:	b13c      	cbz	r4, c384 <cdcdf_acm_write+0x18>
	return usbdc_xfer(_cdcdf_acm_funcd.func_ep_in[CDCDF_ACM_DATA_EP_INDEX], buf, size, true);
    c374:	460a      	mov	r2, r1
}
    c376:	f85d 4b04 	ldr.w	r4, [sp], #4
	return usbdc_xfer(_cdcdf_acm_funcd.func_ep_in[CDCDF_ACM_DATA_EP_INDEX], buf, size, true);
    c37a:	4601      	mov	r1, r0
    c37c:	78d8      	ldrb	r0, [r3, #3]
    c37e:	2301      	movs	r3, #1
    c380:	f000 bae4 	b.w	c94c <usbdc_xfer>
}
    c384:	f06f 0010 	mvn.w	r0, #16
    c388:	f85d 4b04 	ldr.w	r4, [sp], #4
    c38c:	4770      	bx	lr
    c38e:	bf00      	nop
    c390:	20001c18 	.word	0x20001c18

0000c394 <cdcdf_acm_stop_xfer>:
{
    c394:	b510      	push	{r4, lr}
	usb_d_ep_abort(_cdcdf_acm_funcd.func_ep_in[CDCDF_ACM_DATA_EP_INDEX]);
    c396:	4c04      	ldr	r4, [pc, #16]	; (c3a8 <cdcdf_acm_stop_xfer+0x14>)
    c398:	78e0      	ldrb	r0, [r4, #3]
    c39a:	f000 fecb 	bl	d134 <usb_d_ep_abort>
	usb_d_ep_abort(_cdcdf_acm_funcd.func_ep_out);
    c39e:	7920      	ldrb	r0, [r4, #4]
}
    c3a0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	usb_d_ep_abort(_cdcdf_acm_funcd.func_ep_out);
    c3a4:	f000 bec6 	b.w	d134 <usb_d_ep_abort>
    c3a8:	20001c18 	.word	0x20001c18

0000c3ac <cdcdf_acm_register_callback>:
{
    c3ac:	b508      	push	{r3, lr}
	switch (cb_type) {
    c3ae:	2803      	cmp	r0, #3
    c3b0:	d81b      	bhi.n	c3ea <cdcdf_acm_register_callback+0x3e>
    c3b2:	e8df f000 	tbb	[pc, r0]
    c3b6:	0a12      	.short	0x0a12
    c3b8:	0206      	.short	0x0206
		cdcdf_acm_notify_state = (cdcdf_acm_notify_state_t)func;
    c3ba:	4b0d      	ldr	r3, [pc, #52]	; (c3f0 <cdcdf_acm_register_callback+0x44>)
    c3bc:	6019      	str	r1, [r3, #0]
	return ERR_NONE;
    c3be:	2000      	movs	r0, #0
		break;
    c3c0:	bd08      	pop	{r3, pc}
		cdcdf_acm_set_line_coding = (cdcdf_acm_set_line_coding_t)func;
    c3c2:	4b0c      	ldr	r3, [pc, #48]	; (c3f4 <cdcdf_acm_register_callback+0x48>)
    c3c4:	6019      	str	r1, [r3, #0]
	return ERR_NONE;
    c3c6:	2000      	movs	r0, #0
		break;
    c3c8:	bd08      	pop	{r3, pc}
		usb_d_ep_register_callback(_cdcdf_acm_funcd.func_ep_in[CDCDF_ACM_DATA_EP_INDEX], USB_D_EP_CB_XFER, func);
    c3ca:	4b0b      	ldr	r3, [pc, #44]	; (c3f8 <cdcdf_acm_register_callback+0x4c>)
    c3cc:	460a      	mov	r2, r1
    c3ce:	78d8      	ldrb	r0, [r3, #3]
    c3d0:	2102      	movs	r1, #2
    c3d2:	f000 ff05 	bl	d1e0 <usb_d_ep_register_callback>
	return ERR_NONE;
    c3d6:	2000      	movs	r0, #0
		break;
    c3d8:	bd08      	pop	{r3, pc}
		usb_d_ep_register_callback(_cdcdf_acm_funcd.func_ep_out, USB_D_EP_CB_XFER, func);
    c3da:	4b07      	ldr	r3, [pc, #28]	; (c3f8 <cdcdf_acm_register_callback+0x4c>)
    c3dc:	460a      	mov	r2, r1
    c3de:	7918      	ldrb	r0, [r3, #4]
    c3e0:	2102      	movs	r1, #2
    c3e2:	f000 fefd 	bl	d1e0 <usb_d_ep_register_callback>
	return ERR_NONE;
    c3e6:	2000      	movs	r0, #0
		break;
    c3e8:	bd08      	pop	{r3, pc}
		return ERR_INVALID_ARG;
    c3ea:	f06f 000c 	mvn.w	r0, #12
}
    c3ee:	bd08      	pop	{r3, pc}
    c3f0:	20001c20 	.word	0x20001c20
    c3f4:	20001c24 	.word	0x20001c24
    c3f8:	20001c18 	.word	0x20001c18

0000c3fc <cdcdf_acm_is_enabled>:
	return _cdcdf_acm_funcd.enabled;
    c3fc:	4b01      	ldr	r3, [pc, #4]	; (c404 <cdcdf_acm_is_enabled+0x8>)
}
    c3fe:	7958      	ldrb	r0, [r3, #5]
    c400:	4770      	bx	lr
    c402:	bf00      	nop
    c404:	20001c18 	.word	0x20001c18

0000c408 <cdcdf_acm_get_line_coding>:
 * \brief Return the CDC ACM line coding structure start address
 */
const struct usb_cdc_line_coding *cdcdf_acm_get_line_coding(void)
{
	return (const struct usb_cdc_line_coding *)&usbd_cdc_line_coding;
}
    c408:	4800      	ldr	r0, [pc, #0]	; (c40c <cdcdf_acm_get_line_coding+0x4>)
    c40a:	4770      	bx	lr
    c40c:	20001c28 	.word	0x20001c28

0000c410 <usbd_sof_cb>:
}

/** Invoke all registered SOF callbacks. */
static void usbdc_sof_notify(void)
{
	struct usbdc_sof_handler *sof = (struct usbdc_sof_handler *)usbdc.handlers.sof_list.head;
    c410:	4b05      	ldr	r3, [pc, #20]	; (c428 <usbd_sof_cb+0x18>)

/**
 * \brief Callback invoked on USB device SOF
 */
static void usbd_sof_cb(void)
{
    c412:	b510      	push	{r4, lr}
	struct usbdc_sof_handler *sof = (struct usbdc_sof_handler *)usbdc.handlers.sof_list.head;
    c414:	685c      	ldr	r4, [r3, #4]
	while (sof != NULL) {
    c416:	b12c      	cbz	r4, c424 <usbd_sof_cb+0x14>
		if (NULL != sof->cb) {
    c418:	6863      	ldr	r3, [r4, #4]
    c41a:	b103      	cbz	r3, c41e <usbd_sof_cb+0xe>
			sof->cb();
    c41c:	4798      	blx	r3
		sof = sof->next;
    c41e:	6824      	ldr	r4, [r4, #0]
	while (sof != NULL) {
    c420:	2c00      	cmp	r4, #0
    c422:	d1f9      	bne.n	c418 <usbd_sof_cb+0x8>
    c424:	bd10      	pop	{r4, pc}
    c426:	bf00      	nop
    c428:	20001c30 	.word	0x20001c30

0000c42c <usbdc_cb_ctl_done>:
 * \return Data has error or not.
 * \retval true There is data error, protocol error.
 * \retval false There is no data error.
 */
static bool usbdc_cb_ctl_done(const uint8_t ep, const enum usb_xfer_code code, struct usb_req *req)
{
    c42c:	b538      	push	{r3, r4, r5, lr}
    c42e:	4615      	mov	r5, r2
	(void)ep;

	switch (code) {
    c430:	b189      	cbz	r1, c456 <usbdc_cb_ctl_done+0x2a>
    c432:	2901      	cmp	r1, #1
    c434:	d10d      	bne.n	c452 <usbdc_cb_ctl_done+0x26>
	struct usbdc_req_handler *h = (struct usbdc_req_handler *)usbdc.handlers.req_list.head;
    c436:	4b23      	ldr	r3, [pc, #140]	; (c4c4 <usbdc_cb_ctl_done+0x98>)
    c438:	689c      	ldr	r4, [r3, #8]
	while (h != NULL) {
    c43a:	b154      	cbz	r4, c452 <usbdc_cb_ctl_done+0x26>
		if (NULL != h->cb) {
    c43c:	6863      	ldr	r3, [r4, #4]
			rc = h->cb(ep, req, stage);
    c43e:	2201      	movs	r2, #1
    c440:	4629      	mov	r1, r5
    c442:	2000      	movs	r0, #0
		if (NULL != h->cb) {
    c444:	b113      	cbz	r3, c44c <usbdc_cb_ctl_done+0x20>
			rc = h->cb(ep, req, stage);
    c446:	4798      	blx	r3
			} else if (ERR_NOT_FOUND != rc) {
    c448:	300a      	adds	r0, #10
    c44a:	d102      	bne.n	c452 <usbdc_cb_ctl_done+0x26>
		h = h->next;
    c44c:	6824      	ldr	r4, [r4, #0]
	while (h != NULL) {
    c44e:	2c00      	cmp	r4, #0
    c450:	d1f4      	bne.n	c43c <usbdc_cb_ctl_done+0x10>
		return usbdc_ctrl_data_end(req);
	default:
		break;
	}
	return false;
}
    c452:	2000      	movs	r0, #0
    c454:	bd38      	pop	{r3, r4, r5, pc}
	if (req->bmRequestType != USB_REQT_TYPE_STANDARD) {
    c456:	7813      	ldrb	r3, [r2, #0]
    c458:	2b00      	cmp	r3, #0
    c45a:	d1fa      	bne.n	c452 <usbdc_cb_ctl_done+0x26>
	switch (req->bRequest) {
    c45c:	7853      	ldrb	r3, [r2, #1]
    c45e:	2b05      	cmp	r3, #5
    c460:	d014      	beq.n	c48c <usbdc_cb_ctl_done+0x60>
    c462:	2b09      	cmp	r3, #9
    c464:	d1f5      	bne.n	c452 <usbdc_cb_ctl_done+0x26>
		usbdc.cfg_value = req->wValue;
    c466:	8852      	ldrh	r2, [r2, #2]
    c468:	4b16      	ldr	r3, [pc, #88]	; (c4c4 <usbdc_cb_ctl_done+0x98>)
    c46a:	76da      	strb	r2, [r3, #27]
		usbdc.state     = req->wValue ? USBD_S_CONFIG : USBD_S_ADDRESS;
    c46c:	bb3a      	cbnz	r2, c4be <usbdc_cb_ctl_done+0x92>
    c46e:	2503      	movs	r5, #3
    c470:	462a      	mov	r2, r5
	struct usbdc_change_handler *cg = (struct usbdc_change_handler *)usbdc.handlers.change_list.head;
    c472:	68dc      	ldr	r4, [r3, #12]
		usbdc.state     = req->wValue ? USBD_S_CONFIG : USBD_S_ADDRESS;
    c474:	769a      	strb	r2, [r3, #26]
	while (cg != NULL) {
    c476:	2c00      	cmp	r4, #0
    c478:	d0eb      	beq.n	c452 <usbdc_cb_ctl_done+0x26>
		if (NULL != cg->cb) {
    c47a:	6863      	ldr	r3, [r4, #4]
			cg->cb(change, value);
    c47c:	4629      	mov	r1, r5
    c47e:	2001      	movs	r0, #1
		if (NULL != cg->cb) {
    c480:	b103      	cbz	r3, c484 <usbdc_cb_ctl_done+0x58>
			cg->cb(change, value);
    c482:	4798      	blx	r3
		cg = cg->next;
    c484:	6824      	ldr	r4, [r4, #0]
	while (cg != NULL) {
    c486:	2c00      	cmp	r4, #0
    c488:	d1f7      	bne.n	c47a <usbdc_cb_ctl_done+0x4e>
    c48a:	e7e2      	b.n	c452 <usbdc_cb_ctl_done+0x26>
		usbdc_set_address(req->wValue);
    c48c:	8850      	ldrh	r0, [r2, #2]
	usb_d_set_address(addr);
    c48e:	b2c0      	uxtb	r0, r0
    c490:	f000 fcf0 	bl	ce74 <usb_d_set_address>
		usbdc.state = req->wValue ? USBD_S_ADDRESS : USBD_S_DEFAULT;
    c494:	886b      	ldrh	r3, [r5, #2]
    c496:	b97b      	cbnz	r3, c4b8 <usbdc_cb_ctl_done+0x8c>
    c498:	2502      	movs	r5, #2
    c49a:	462a      	mov	r2, r5
    c49c:	4b09      	ldr	r3, [pc, #36]	; (c4c4 <usbdc_cb_ctl_done+0x98>)
	struct usbdc_change_handler *cg = (struct usbdc_change_handler *)usbdc.handlers.change_list.head;
    c49e:	68dc      	ldr	r4, [r3, #12]
		usbdc.state = req->wValue ? USBD_S_ADDRESS : USBD_S_DEFAULT;
    c4a0:	769a      	strb	r2, [r3, #26]
	while (cg != NULL) {
    c4a2:	2c00      	cmp	r4, #0
    c4a4:	d0d5      	beq.n	c452 <usbdc_cb_ctl_done+0x26>
		if (NULL != cg->cb) {
    c4a6:	6863      	ldr	r3, [r4, #4]
			cg->cb(change, value);
    c4a8:	4629      	mov	r1, r5
    c4aa:	2001      	movs	r0, #1
		if (NULL != cg->cb) {
    c4ac:	b103      	cbz	r3, c4b0 <usbdc_cb_ctl_done+0x84>
			cg->cb(change, value);
    c4ae:	4798      	blx	r3
		cg = cg->next;
    c4b0:	6824      	ldr	r4, [r4, #0]
	while (cg != NULL) {
    c4b2:	2c00      	cmp	r4, #0
    c4b4:	d1f7      	bne.n	c4a6 <usbdc_cb_ctl_done+0x7a>
    c4b6:	e7cc      	b.n	c452 <usbdc_cb_ctl_done+0x26>
		usbdc.state = req->wValue ? USBD_S_ADDRESS : USBD_S_DEFAULT;
    c4b8:	2503      	movs	r5, #3
    c4ba:	462a      	mov	r2, r5
    c4bc:	e7ee      	b.n	c49c <usbdc_cb_ctl_done+0x70>
		usbdc.state     = req->wValue ? USBD_S_CONFIG : USBD_S_ADDRESS;
    c4be:	2504      	movs	r5, #4
    c4c0:	462a      	mov	r2, r5
    c4c2:	e7d6      	b.n	c472 <usbdc_cb_ctl_done+0x46>
    c4c4:	20001c30 	.word	0x20001c30

0000c4c8 <usbdc_cb_ctl_req>:
{
    c4c8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	struct usbdc_req_handler *h = (struct usbdc_req_handler *)usbdc.handlers.req_list.head;
    c4cc:	4fb6      	ldr	r7, [pc, #728]	; (c7a8 <usbdc_cb_ctl_req+0x2e0>)
    c4ce:	68bc      	ldr	r4, [r7, #8]
{
    c4d0:	b086      	sub	sp, #24
    c4d2:	4606      	mov	r6, r0
    c4d4:	460d      	mov	r5, r1
	while (h != NULL) {
    c4d6:	b15c      	cbz	r4, c4f0 <usbdc_cb_ctl_req+0x28>
		if (NULL != h->cb) {
    c4d8:	6863      	ldr	r3, [r4, #4]
			rc = h->cb(ep, req, stage);
    c4da:	2200      	movs	r2, #0
    c4dc:	4629      	mov	r1, r5
    c4de:	4630      	mov	r0, r6
		if (NULL != h->cb) {
    c4e0:	b11b      	cbz	r3, c4ea <usbdc_cb_ctl_req+0x22>
			rc = h->cb(ep, req, stage);
    c4e2:	4798      	blx	r3
			if (0 == rc) {
    c4e4:	b170      	cbz	r0, c504 <usbdc_cb_ctl_req+0x3c>
			} else if (ERR_NOT_FOUND != rc) {
    c4e6:	300a      	adds	r0, #10
    c4e8:	d108      	bne.n	c4fc <usbdc_cb_ctl_req+0x34>
		h = h->next;
    c4ea:	6824      	ldr	r4, [r4, #0]
	while (h != NULL) {
    c4ec:	2c00      	cmp	r4, #0
    c4ee:	d1f3      	bne.n	c4d8 <usbdc_cb_ctl_req+0x10>
	switch (req->bmRequestType & (USB_REQT_TYPE_MASK | USB_REQT_DIR_IN)) {
    c4f0:	782b      	ldrb	r3, [r5, #0]
    c4f2:	f013 02e0 	ands.w	r2, r3, #224	; 0xe0
    c4f6:	d025      	beq.n	c544 <usbdc_cb_ctl_req+0x7c>
    c4f8:	2a80      	cmp	r2, #128	; 0x80
    c4fa:	d007      	beq.n	c50c <usbdc_cb_ctl_req+0x44>
		return false;
    c4fc:	2000      	movs	r0, #0
}
    c4fe:	b006      	add	sp, #24
    c500:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return true;
    c504:	2001      	movs	r0, #1
}
    c506:	b006      	add	sp, #24
    c508:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	switch (req->bRequest) {
    c50c:	786a      	ldrb	r2, [r5, #1]
    c50e:	2a0a      	cmp	r2, #10
    c510:	d8f4      	bhi.n	c4fc <usbdc_cb_ctl_req+0x34>
    c512:	a101      	add	r1, pc, #4	; (adr r1, c518 <usbdc_cb_ctl_req+0x50>)
    c514:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
    c518:	0000c637 	.word	0x0000c637
    c51c:	0000c4fd 	.word	0x0000c4fd
    c520:	0000c4fd 	.word	0x0000c4fd
    c524:	0000c4fd 	.word	0x0000c4fd
    c528:	0000c4fd 	.word	0x0000c4fd
    c52c:	0000c4fd 	.word	0x0000c4fd
    c530:	0000c5eb 	.word	0x0000c5eb
    c534:	0000c4fd 	.word	0x0000c4fd
    c538:	0000c5c9 	.word	0x0000c5c9
    c53c:	0000c4fd 	.word	0x0000c4fd
    c540:	0000c581 	.word	0x0000c581
	switch (req->bRequest) {
    c544:	786a      	ldrb	r2, [r5, #1]
    c546:	3a01      	subs	r2, #1
    c548:	2a0a      	cmp	r2, #10
    c54a:	d8d7      	bhi.n	c4fc <usbdc_cb_ctl_req+0x34>
    c54c:	a101      	add	r1, pc, #4	; (adr r1, c554 <usbdc_cb_ctl_req+0x8c>)
    c54e:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
    c552:	bf00      	nop
    c554:	0000c74f 	.word	0x0000c74f
    c558:	0000c4fd 	.word	0x0000c4fd
    c55c:	0000c71f 	.word	0x0000c71f
    c560:	0000c4fd 	.word	0x0000c4fd
    c564:	0000c701 	.word	0x0000c701
    c568:	0000c4fd 	.word	0x0000c4fd
    c56c:	0000c4fd 	.word	0x0000c4fd
    c570:	0000c4fd 	.word	0x0000c4fd
    c574:	0000c6db 	.word	0x0000c6db
    c578:	0000c4fd 	.word	0x0000c4fd
    c57c:	0000c67f 	.word	0x0000c67f
	if (!(usbdc.ifc_alt_map & (1 << req->wIndex))) {
    c580:	7f7b      	ldrb	r3, [r7, #29]
    c582:	88aa      	ldrh	r2, [r5, #4]
    c584:	4113      	asrs	r3, r2
    c586:	f013 0301 	ands.w	r3, r3, #1
    c58a:	f000 818e 	beq.w	c8aa <usbdc_cb_ctl_req+0x3e2>
	struct usbdf_driver *func = (struct usbdf_driver *)usbdc.func_list.head;
    c58e:	693c      	ldr	r4, [r7, #16]
	while (NULL != func) {
    c590:	b91c      	cbnz	r4, c59a <usbdc_cb_ctl_req+0xd2>
    c592:	e7b3      	b.n	c4fc <usbdc_cb_ctl_req+0x34>
			func = func->next;
    c594:	6824      	ldr	r4, [r4, #0]
	while (NULL != func) {
    c596:	2c00      	cmp	r4, #0
    c598:	d0b0      	beq.n	c4fc <usbdc_cb_ctl_req+0x34>
		if (0 > (rc = func->ctrl(func, USBDF_GET_IFACE, req))) {
    c59a:	6863      	ldr	r3, [r4, #4]
    c59c:	462a      	mov	r2, r5
    c59e:	2102      	movs	r1, #2
    c5a0:	4620      	mov	r0, r4
    c5a2:	4798      	blx	r3
    c5a4:	2800      	cmp	r0, #0
    c5a6:	dbf5      	blt.n	c594 <usbdc_cb_ctl_req+0xcc>
			usbdc.ctrl_buf[0] = (uint8_t)rc;
    c5a8:	697b      	ldr	r3, [r7, #20]
    c5aa:	7018      	strb	r0, [r3, #0]
/**
 * \brief Issue USB device transfer
 */
int32_t usbdc_xfer(uint8_t ep, uint8_t *buf, uint32_t size, bool zlp)
{
	struct usb_d_transfer xfer = {(uint8_t *)buf, size, ep, zlp};
    c5ac:	697b      	ldr	r3, [r7, #20]
    c5ae:	9303      	str	r3, [sp, #12]
    c5b0:	2401      	movs	r4, #1
    c5b2:	2300      	movs	r3, #0
	return usb_d_ep_transfer(&xfer);
    c5b4:	a803      	add	r0, sp, #12
	struct usb_d_transfer xfer = {(uint8_t *)buf, size, ep, zlp};
    c5b6:	9404      	str	r4, [sp, #16]
    c5b8:	f88d 3014 	strb.w	r3, [sp, #20]
    c5bc:	f88d 3015 	strb.w	r3, [sp, #21]
	return usb_d_ep_transfer(&xfer);
    c5c0:	f000 fd24 	bl	d00c <usb_d_ep_transfer>
			return true;
    c5c4:	4620      	mov	r0, r4
    c5c6:	e79a      	b.n	c4fe <usbdc_cb_ctl_req+0x36>
		*(uint8_t *)usbdc.ctrl_buf = usbdc.cfg_value;
    c5c8:	697b      	ldr	r3, [r7, #20]
    c5ca:	7efa      	ldrb	r2, [r7, #27]
    c5cc:	701a      	strb	r2, [r3, #0]
	struct usb_d_transfer xfer = {(uint8_t *)buf, size, ep, zlp};
    c5ce:	697b      	ldr	r3, [r7, #20]
    c5d0:	9303      	str	r3, [sp, #12]
    c5d2:	2401      	movs	r4, #1
    c5d4:	2300      	movs	r3, #0
	return usb_d_ep_transfer(&xfer);
    c5d6:	a803      	add	r0, sp, #12
	struct usb_d_transfer xfer = {(uint8_t *)buf, size, ep, zlp};
    c5d8:	f88d 6014 	strb.w	r6, [sp, #20]
    c5dc:	9404      	str	r4, [sp, #16]
    c5de:	f88d 3015 	strb.w	r3, [sp, #21]
	return usb_d_ep_transfer(&xfer);
    c5e2:	f000 fd13 	bl	d00c <usb_d_ep_transfer>
		return true;
    c5e6:	4620      	mov	r0, r4
    c5e8:	e789      	b.n	c4fe <usbdc_cb_ctl_req+0x36>
	uint8_t type = (uint8_t)(req->wValue >> 8);
    c5ea:	886b      	ldrh	r3, [r5, #2]
	switch (type) {
    c5ec:	0a1a      	lsrs	r2, r3, #8
    c5ee:	2a02      	cmp	r2, #2
    c5f0:	f000 810a 	beq.w	c808 <usbdc_cb_ctl_req+0x340>
    c5f4:	2a03      	cmp	r2, #3
    c5f6:	f000 80f0 	beq.w	c7da <usbdc_cb_ctl_req+0x312>
    c5fa:	2a01      	cmp	r2, #1
    c5fc:	f47f af7e 	bne.w	c4fc <usbdc_cb_ctl_req+0x34>
		dev_desc = usb_find_desc(usbdc.desces.ls_fs->sod, usbdc.desces.ls_fs->eod, USB_DT_DEVICE);
    c600:	683b      	ldr	r3, [r7, #0]
	uint16_t length   = req->wLength;
    c602:	88ec      	ldrh	r4, [r5, #6]
		dev_desc = usb_find_desc(usbdc.desces.ls_fs->sod, usbdc.desces.ls_fs->eod, USB_DT_DEVICE);
    c604:	e893 0003 	ldmia.w	r3, {r0, r1}
    c608:	2c12      	cmp	r4, #18
    c60a:	bf28      	it	cs
    c60c:	2412      	movcs	r4, #18
    c60e:	f000 fa19 	bl	ca44 <usb_find_desc>
	if (!dev_desc) {
    c612:	4603      	mov	r3, r0
    c614:	2800      	cmp	r0, #0
    c616:	f43f af71 	beq.w	c4fc <usbdc_cb_ctl_req+0x34>
	if (length <= str_desc[0]) {
    c61a:	2200      	movs	r2, #0
	return usb_d_ep_transfer(&xfer);
    c61c:	a803      	add	r0, sp, #12
	struct usb_d_transfer xfer = {(uint8_t *)buf, size, ep, zlp};
    c61e:	9303      	str	r3, [sp, #12]
	if (ERR_NONE != usbdc_xfer(ep, str_desc, length, need_zlp)) {
    c620:	9404      	str	r4, [sp, #16]
	struct usb_d_transfer xfer = {(uint8_t *)buf, size, ep, zlp};
    c622:	f88d 6014 	strb.w	r6, [sp, #20]
    c626:	f88d 2015 	strb.w	r2, [sp, #21]
	return usb_d_ep_transfer(&xfer);
    c62a:	f000 fcef 	bl	d00c <usb_d_ep_transfer>
	if (ERR_NONE != usbdc_xfer(ep, str_desc, length, need_zlp)) {
    c62e:	fab0 f080 	clz	r0, r0
    c632:	0940      	lsrs	r0, r0, #5
    c634:	e763      	b.n	c4fe <usbdc_cb_ctl_req+0x36>
	switch (req->bmRequestType & USB_REQT_RECIP_MASK) {
    c636:	f003 011f 	and.w	r1, r3, #31
    c63a:	2901      	cmp	r1, #1
    c63c:	f240 8091 	bls.w	c762 <usbdc_cb_ctl_req+0x29a>
    c640:	2902      	cmp	r1, #2
    c642:	f47f af5b 	bne.w	c4fc <usbdc_cb_ctl_req+0x34>
		st = usb_d_ep_halt(req->wIndex & 0xFF, USB_EP_HALT_GET);
    c646:	88a8      	ldrh	r0, [r5, #4]
    c648:	b2c0      	uxtb	r0, r0
    c64a:	f000 fd91 	bl	d170 <usb_d_ep_halt>
		if (st < 0) {
    c64e:	1e03      	subs	r3, r0, #0
    c650:	f6ff af54 	blt.w	c4fc <usbdc_cb_ctl_req+0x34>
		st = st & 0x1;
    c654:	f003 0301 	and.w	r3, r3, #1
    c658:	9301      	str	r3, [sp, #4]
	memcpy(usbdc.ctrl_buf, &st, 2);
    c65a:	697b      	ldr	r3, [r7, #20]
    c65c:	f8bd 2004 	ldrh.w	r2, [sp, #4]
    c660:	801a      	strh	r2, [r3, #0]
	struct usb_d_transfer xfer = {(uint8_t *)buf, size, ep, zlp};
    c662:	697b      	ldr	r3, [r7, #20]
    c664:	9303      	str	r3, [sp, #12]
    c666:	2202      	movs	r2, #2
    c668:	2300      	movs	r3, #0
	return usb_d_ep_transfer(&xfer);
    c66a:	a803      	add	r0, sp, #12
	struct usb_d_transfer xfer = {(uint8_t *)buf, size, ep, zlp};
    c66c:	f88d 6014 	strb.w	r6, [sp, #20]
    c670:	9204      	str	r2, [sp, #16]
    c672:	f88d 3015 	strb.w	r3, [sp, #21]
	return usb_d_ep_transfer(&xfer);
    c676:	f000 fcc9 	bl	d00c <usb_d_ep_transfer>
	return true;
    c67a:	2001      	movs	r0, #1
    c67c:	e73f      	b.n	c4fe <usbdc_cb_ctl_req+0x36>
		ifc = usb_find_cfg_desc(usbdc.desces.ls_fs->sod, usbdc.desces.ls_fs->eod, usbdc.cfg_value);
    c67e:	683b      	ldr	r3, [r7, #0]
    c680:	7efa      	ldrb	r2, [r7, #27]
		return usbdc_set_interface(req->wValue, req->wIndex);
    c682:	886c      	ldrh	r4, [r5, #2]
    c684:	88ad      	ldrh	r5, [r5, #4]
		ifc = usb_find_cfg_desc(usbdc.desces.ls_fs->sod, usbdc.desces.ls_fs->eod, usbdc.cfg_value);
    c686:	e893 0003 	ldmia.w	r3, {r0, r1}
    c68a:	f000 fa0f 	bl	caac <usb_find_cfg_desc>
	if (NULL == ifc) {
    c68e:	2800      	cmp	r0, #0
    c690:	f43f af34 	beq.w	c4fc <usbdc_cb_ctl_req+0x34>
	desc.sod = ifc;
    c694:	9001      	str	r0, [sp, #4]
	return (ptr[0] + (ptr[1] << 8));
    c696:	78c1      	ldrb	r1, [r0, #3]
    c698:	7883      	ldrb	r3, [r0, #2]
    c69a:	eb03 2301 	add.w	r3, r3, r1, lsl #8
	desc.eod = ifc + usb_cfg_desc_total_len(ifc);
    c69e:	fa10 f383 	uxtah	r3, r0, r3
	if (NULL == (ifc = usb_find_desc(desc.sod, desc.eod, USB_DT_INTERFACE))) {
    c6a2:	4619      	mov	r1, r3
    c6a4:	2204      	movs	r2, #4
	desc.eod = ifc + usb_cfg_desc_total_len(ifc);
    c6a6:	9302      	str	r3, [sp, #8]
	if (NULL == (ifc = usb_find_desc(desc.sod, desc.eod, USB_DT_INTERFACE))) {
    c6a8:	f000 f9cc 	bl	ca44 <usb_find_desc>
    c6ac:	2800      	cmp	r0, #0
    c6ae:	f43f af25 	beq.w	c4fc <usbdc_cb_ctl_req+0x34>
	while (ifc[2] != ifc_id || ifc[3] != alt_set) {
    c6b2:	7883      	ldrb	r3, [r0, #2]
    c6b4:	42ab      	cmp	r3, r5
		ifc      = usb_find_desc(desc.sod, desc.eod, USB_DT_INTERFACE);
    c6b6:	f04f 0204 	mov.w	r2, #4
	while (ifc[2] != ifc_id || ifc[3] != alt_set) {
    c6ba:	d103      	bne.n	c6c4 <usbdc_cb_ctl_req+0x1fc>
    c6bc:	78c3      	ldrb	r3, [r0, #3]
    c6be:	42a3      	cmp	r3, r4
    c6c0:	f000 80c9 	beq.w	c856 <usbdc_cb_ctl_req+0x38e>
		desc.sod = usb_desc_next(desc.sod);
    c6c4:	9b01      	ldr	r3, [sp, #4]
		ifc      = usb_find_desc(desc.sod, desc.eod, USB_DT_INTERFACE);
    c6c6:	9902      	ldr	r1, [sp, #8]
	return (desc + usb_desc_len(desc));
    c6c8:	7818      	ldrb	r0, [r3, #0]
    c6ca:	4403      	add	r3, r0
    c6cc:	4618      	mov	r0, r3
		desc.sod = usb_desc_next(desc.sod);
    c6ce:	9301      	str	r3, [sp, #4]
		ifc      = usb_find_desc(desc.sod, desc.eod, USB_DT_INTERFACE);
    c6d0:	f000 f9b8 	bl	ca44 <usb_find_desc>
		if (NULL == ifc) {
    c6d4:	2800      	cmp	r0, #0
    c6d6:	d1ec      	bne.n	c6b2 <usbdc_cb_ctl_req+0x1ea>
    c6d8:	e710      	b.n	c4fc <usbdc_cb_ctl_req+0x34>
		if (!usbdc_set_config(req->wValue)) {
    c6da:	886a      	ldrh	r2, [r5, #2]
    c6dc:	b2d2      	uxtb	r2, r2
	if (cfg_value == 0) {
    c6de:	2a00      	cmp	r2, #0
    c6e0:	d142      	bne.n	c768 <usbdc_cb_ctl_req+0x2a0>
	struct usbdf_driver *func = (struct usbdf_driver *)usbdc.func_list.head;
    c6e2:	693c      	ldr	r4, [r7, #16]
	while (NULL != func) {
    c6e4:	b13c      	cbz	r4, c6f6 <usbdc_cb_ctl_req+0x22e>
		func->ctrl(func, USBDF_DISABLE, NULL);
    c6e6:	6863      	ldr	r3, [r4, #4]
    c6e8:	4620      	mov	r0, r4
    c6ea:	2200      	movs	r2, #0
    c6ec:	2101      	movs	r1, #1
    c6ee:	4798      	blx	r3
		func = func->next;
    c6f0:	6824      	ldr	r4, [r4, #0]
	while (NULL != func) {
    c6f2:	2c00      	cmp	r4, #0
    c6f4:	d1f7      	bne.n	c6e6 <usbdc_cb_ctl_req+0x21e>
    c6f6:	ad03      	add	r5, sp, #12
	return usb_d_ep_transfer(&xfer);
    c6f8:	4628      	mov	r0, r5
	struct usb_d_transfer xfer = {(uint8_t *)buf, size, ep, zlp};
    c6fa:	2300      	movs	r3, #0
    c6fc:	2201      	movs	r2, #1
    c6fe:	e002      	b.n	c706 <usbdc_cb_ctl_req+0x23e>
    c700:	2300      	movs	r3, #0
    c702:	2201      	movs	r2, #1
	return usb_d_ep_transfer(&xfer);
    c704:	a803      	add	r0, sp, #12
	struct usb_d_transfer xfer = {(uint8_t *)buf, size, ep, zlp};
    c706:	f88d 6014 	strb.w	r6, [sp, #20]
    c70a:	9303      	str	r3, [sp, #12]
    c70c:	9304      	str	r3, [sp, #16]
    c70e:	f88d 2015 	strb.w	r2, [sp, #21]
	return usb_d_ep_transfer(&xfer);
    c712:	f000 fc7b 	bl	d00c <usb_d_ep_transfer>
		return (ERR_NONE == usbdc_xfer(ep, NULL, 0, true));
    c716:	fab0 f080 	clz	r0, r0
    c71a:	0940      	lsrs	r0, r0, #5
    c71c:	e6ef      	b.n	c4fe <usbdc_cb_ctl_req+0x36>
	switch (req->bmRequestType & USB_REQT_RECIP_MASK) {
    c71e:	2b02      	cmp	r3, #2
    c720:	f47f aeec 	bne.w	c4fc <usbdc_cb_ctl_req+0x34>
		if (req->wLength != 0) {
    c724:	88ef      	ldrh	r7, [r5, #6]
    c726:	2f00      	cmp	r7, #0
    c728:	f47f aee8 	bne.w	c4fc <usbdc_cb_ctl_req+0x34>
		usb_d_ep_halt(req->wIndex & 0xFF, USB_EP_HALT_SET);
    c72c:	88a8      	ldrh	r0, [r5, #4]
    c72e:	2101      	movs	r1, #1
    c730:	b2c0      	uxtb	r0, r0
    c732:	f000 fd1d 	bl	d170 <usb_d_ep_halt>
	struct usb_d_transfer xfer = {(uint8_t *)buf, size, ep, zlp};
    c736:	2401      	movs	r4, #1
	return usb_d_ep_transfer(&xfer);
    c738:	a803      	add	r0, sp, #12
	struct usb_d_transfer xfer = {(uint8_t *)buf, size, ep, zlp};
    c73a:	9703      	str	r7, [sp, #12]
    c73c:	9704      	str	r7, [sp, #16]
    c73e:	f88d 6014 	strb.w	r6, [sp, #20]
    c742:	f88d 4015 	strb.w	r4, [sp, #21]
	return usb_d_ep_transfer(&xfer);
    c746:	f000 fc61 	bl	d00c <usb_d_ep_transfer>
		return true;
    c74a:	4620      	mov	r0, r4
    c74c:	e6d7      	b.n	c4fe <usbdc_cb_ctl_req+0x36>
	switch (req->bmRequestType & USB_REQT_RECIP_MASK) {
    c74e:	2b02      	cmp	r3, #2
    c750:	f47f aed4 	bne.w	c4fc <usbdc_cb_ctl_req+0x34>
		if (req->wLength != 0) {
    c754:	88ef      	ldrh	r7, [r5, #6]
    c756:	2f00      	cmp	r7, #0
    c758:	f47f aed0 	bne.w	c4fc <usbdc_cb_ctl_req+0x34>
		usb_d_ep_halt(req->wIndex & 0xFF, USB_EP_HALT_CLR);
    c75c:	88a8      	ldrh	r0, [r5, #4]
    c75e:	4639      	mov	r1, r7
    c760:	e7e6      	b.n	c730 <usbdc_cb_ctl_req+0x268>
		st = 0;
    c762:	2300      	movs	r3, #0
    c764:	9301      	str	r3, [sp, #4]
    c766:	e778      	b.n	c65a <usbdc_cb_ctl_req+0x192>
		cfg_desc = usb_find_cfg_desc(usbdc.desces.ls_fs->sod, usbdc.desces.ls_fs->eod, cfg_value);
    c768:	683b      	ldr	r3, [r7, #0]
    c76a:	e893 0003 	ldmia.w	r3, {r0, r1}
    c76e:	f000 f99d 	bl	caac <usb_find_cfg_desc>
	if (NULL == cfg_desc) {
    c772:	2800      	cmp	r0, #0
    c774:	f43f aec2 	beq.w	c4fc <usbdc_cb_ctl_req+0x34>
	return (ptr[0] + (ptr[1] << 8));
    c778:	78c1      	ldrb	r1, [r0, #3]
    c77a:	7882      	ldrb	r2, [r0, #2]
    c77c:	eb02 2201 	add.w	r2, r2, r1, lsl #8
	desc.eod  = cfg_desc + total_len;
    c780:	fa10 f382 	uxtah	r3, r0, r2
	desc.sod  = usb_find_desc(cfg_desc, desc.eod, USB_DT_INTERFACE);
    c784:	4619      	mov	r1, r3
    c786:	2204      	movs	r2, #4
	desc.eod  = cfg_desc + total_len;
    c788:	9304      	str	r3, [sp, #16]
	desc.sod  = usb_find_desc(cfg_desc, desc.eod, USB_DT_INTERFACE);
    c78a:	f000 f95b 	bl	ca44 <usb_find_desc>
    c78e:	9003      	str	r0, [sp, #12]
	while (NULL != desc.sod) {
    c790:	2800      	cmp	r0, #0
    c792:	d0b0      	beq.n	c6f6 <usbdc_cb_ctl_req+0x22e>
    c794:	24ff      	movs	r4, #255	; 0xff
    c796:	ad03      	add	r5, sp, #12
		if (last_iface != desc.sod[2] /* bInterfaceNumber */) {
    c798:	f890 8002 	ldrb.w	r8, [r0, #2]
    c79c:	45a0      	cmp	r8, r4
    c79e:	d010      	beq.n	c7c2 <usbdc_cb_ctl_req+0x2fa>
			func       = (struct usbdf_driver *)usbdc.func_list.head;
    c7a0:	693c      	ldr	r4, [r7, #16]
			while (NULL != func) {
    c7a2:	b92c      	cbnz	r4, c7b0 <usbdc_cb_ctl_req+0x2e8>
    c7a4:	e092      	b.n	c8cc <usbdc_cb_ctl_req+0x404>
    c7a6:	bf00      	nop
    c7a8:	20001c30 	.word	0x20001c30
					func = func->next;
    c7ac:	6824      	ldr	r4, [r4, #0]
			while (NULL != func) {
    c7ae:	b134      	cbz	r4, c7be <usbdc_cb_ctl_req+0x2f6>
				if (func->ctrl(func, USBDF_ENABLE, &desc)) {
    c7b0:	6863      	ldr	r3, [r4, #4]
    c7b2:	462a      	mov	r2, r5
    c7b4:	2100      	movs	r1, #0
    c7b6:	4620      	mov	r0, r4
    c7b8:	4798      	blx	r3
    c7ba:	2800      	cmp	r0, #0
    c7bc:	d1f6      	bne.n	c7ac <usbdc_cb_ctl_req+0x2e4>
    c7be:	9803      	ldr	r0, [sp, #12]
			while (NULL != func) {
    c7c0:	4644      	mov	r4, r8
	return (desc + usb_desc_len(desc));
    c7c2:	7803      	ldrb	r3, [r0, #0]
		desc.sod = usb_find_desc(desc.sod, desc.eod, USB_DT_INTERFACE);
    c7c4:	9904      	ldr	r1, [sp, #16]
    c7c6:	4403      	add	r3, r0
    c7c8:	4618      	mov	r0, r3
    c7ca:	2204      	movs	r2, #4
		desc.sod = usb_desc_next(desc.sod);
    c7cc:	9303      	str	r3, [sp, #12]
		desc.sod = usb_find_desc(desc.sod, desc.eod, USB_DT_INTERFACE);
    c7ce:	f000 f939 	bl	ca44 <usb_find_desc>
    c7d2:	9003      	str	r0, [sp, #12]
	while (NULL != desc.sod) {
    c7d4:	2800      	cmp	r0, #0
    c7d6:	d1df      	bne.n	c798 <usbdc_cb_ctl_req+0x2d0>
    c7d8:	e78e      	b.n	c6f8 <usbdc_cb_ctl_req+0x230>
	str_desc = usb_find_str_desc(usbdc.desces.ls_fs->sod, usbdc.desces.ls_fs->eod, index);
    c7da:	683a      	ldr	r2, [r7, #0]
	uint16_t length   = req->wLength;
    c7dc:	88ec      	ldrh	r4, [r5, #6]
	bool     need_zlp = !(length & (usbdc.ctrl_size - 1));
    c7de:	7f3d      	ldrb	r5, [r7, #28]
	str_desc = usb_find_str_desc(usbdc.desces.ls_fs->sod, usbdc.desces.ls_fs->eod, index);
    c7e0:	e892 0003 	ldmia.w	r2, {r0, r1}
    c7e4:	b2da      	uxtb	r2, r3
    c7e6:	f000 f98d 	bl	cb04 <usb_find_str_desc>
	if (NULL == str_desc) {
    c7ea:	4603      	mov	r3, r0
    c7ec:	2800      	cmp	r0, #0
    c7ee:	f43f ae85 	beq.w	c4fc <usbdc_cb_ctl_req+0x34>
	if (length <= str_desc[0]) {
    c7f2:	7801      	ldrb	r1, [r0, #0]
    c7f4:	428c      	cmp	r4, r1
    c7f6:	f67f af10 	bls.w	c61a <usbdc_cb_ctl_req+0x152>
	bool     need_zlp = !(length & (usbdc.ctrl_size - 1));
    c7fa:	3d01      	subs	r5, #1
    c7fc:	4225      	tst	r5, r4
    c7fe:	bf0c      	ite	eq
    c800:	2201      	moveq	r2, #1
    c802:	2200      	movne	r2, #0
    c804:	460c      	mov	r4, r1
    c806:	e709      	b.n	c61c <usbdc_cb_ctl_req+0x154>
		cfg_desc = usb_find_cfg_desc(usbdc.desces.ls_fs->sod, usbdc.desces.ls_fs->eod, index + 1);
    c808:	683a      	ldr	r2, [r7, #0]
	uint16_t length   = req->wLength;
    c80a:	88ec      	ldrh	r4, [r5, #6]
	bool     need_zlp = !(length & (usbdc.ctrl_size - 1));
    c80c:	7f3d      	ldrb	r5, [r7, #28]
		cfg_desc = usb_find_cfg_desc(usbdc.desces.ls_fs->sod, usbdc.desces.ls_fs->eod, index + 1);
    c80e:	3301      	adds	r3, #1
    c810:	e892 0003 	ldmia.w	r2, {r0, r1}
    c814:	b2da      	uxtb	r2, r3
    c816:	f000 f949 	bl	caac <usb_find_cfg_desc>
	if (NULL == cfg_desc) {
    c81a:	4602      	mov	r2, r0
    c81c:	2800      	cmp	r0, #0
    c81e:	f43f ae6d 	beq.w	c4fc <usbdc_cb_ctl_req+0x34>
	return (ptr[0] + (ptr[1] << 8));
    c822:	78c1      	ldrb	r1, [r0, #3]
    c824:	7883      	ldrb	r3, [r0, #2]
    c826:	eb03 2301 	add.w	r3, r3, r1, lsl #8
    c82a:	b29b      	uxth	r3, r3
	if (length <= total_len) {
    c82c:	429c      	cmp	r4, r3
    c82e:	d94b      	bls.n	c8c8 <usbdc_cb_ctl_req+0x400>
	bool     need_zlp = !(length & (usbdc.ctrl_size - 1));
    c830:	3d01      	subs	r5, #1
    c832:	4225      	tst	r5, r4
    c834:	bf0c      	ite	eq
    c836:	2101      	moveq	r1, #1
    c838:	2100      	movne	r1, #0
    c83a:	461c      	mov	r4, r3
	return usb_d_ep_transfer(&xfer);
    c83c:	a803      	add	r0, sp, #12
	struct usb_d_transfer xfer = {(uint8_t *)buf, size, ep, zlp};
    c83e:	9203      	str	r2, [sp, #12]
	if (ERR_NONE != usbdc_xfer(ep, cfg_desc, length, need_zlp)) {
    c840:	9404      	str	r4, [sp, #16]
	struct usb_d_transfer xfer = {(uint8_t *)buf, size, ep, zlp};
    c842:	f88d 6014 	strb.w	r6, [sp, #20]
    c846:	f88d 1015 	strb.w	r1, [sp, #21]
	return usb_d_ep_transfer(&xfer);
    c84a:	f000 fbdf 	bl	d00c <usb_d_ep_transfer>
	if (ERR_NONE != usbdc_xfer(ep, cfg_desc, length, need_zlp)) {
    c84e:	fab0 f080 	clz	r0, r0
    c852:	0940      	lsrs	r0, r0, #5
    c854:	e653      	b.n	c4fe <usbdc_cb_ctl_req+0x36>
	func     = (struct usbdf_driver *)usbdc.func_list.head;
    c856:	693e      	ldr	r6, [r7, #16]
	desc.sod = ifc;
    c858:	9001      	str	r0, [sp, #4]
	while (NULL != func) {
    c85a:	b926      	cbnz	r6, c866 <usbdc_cb_ctl_req+0x39e>
    c85c:	e64e      	b.n	c4fc <usbdc_cb_ctl_req+0x34>
			func = func->next;
    c85e:	6836      	ldr	r6, [r6, #0]
	while (NULL != func) {
    c860:	2e00      	cmp	r6, #0
    c862:	f43f ae4b 	beq.w	c4fc <usbdc_cb_ctl_req+0x34>
		if (func->ctrl(func, USBDF_DISABLE, &desc)) {
    c866:	6873      	ldr	r3, [r6, #4]
    c868:	aa01      	add	r2, sp, #4
    c86a:	2101      	movs	r1, #1
    c86c:	4630      	mov	r0, r6
    c86e:	4798      	blx	r3
    c870:	2800      	cmp	r0, #0
    c872:	d1f4      	bne.n	c85e <usbdc_cb_ctl_req+0x396>
		} else if (ERR_NONE == func->ctrl(func, USBDF_ENABLE, &desc)) {
    c874:	4601      	mov	r1, r0
    c876:	aa01      	add	r2, sp, #4
    c878:	6873      	ldr	r3, [r6, #4]
    c87a:	4630      	mov	r0, r6
    c87c:	4798      	blx	r3
    c87e:	2800      	cmp	r0, #0
    c880:	f47f ae3c 	bne.w	c4fc <usbdc_cb_ctl_req+0x34>
			if (alt_set) {
    c884:	b12c      	cbz	r4, c892 <usbdc_cb_ctl_req+0x3ca>
				usbdc.ifc_alt_map |= 1 << ifc_id;
    c886:	7f7b      	ldrb	r3, [r7, #29]
    c888:	2201      	movs	r2, #1
    c88a:	fa02 f505 	lsl.w	r5, r2, r5
    c88e:	432b      	orrs	r3, r5
    c890:	777b      	strb	r3, [r7, #29]
	struct usb_d_transfer xfer = {(uint8_t *)buf, size, ep, zlp};
    c892:	2300      	movs	r3, #0
	return usb_d_ep_transfer(&xfer);
    c894:	a803      	add	r0, sp, #12
	struct usb_d_transfer xfer = {(uint8_t *)buf, size, ep, zlp};
    c896:	9303      	str	r3, [sp, #12]
    c898:	9304      	str	r3, [sp, #16]
    c89a:	f88d 3014 	strb.w	r3, [sp, #20]
    c89e:	f88d 3015 	strb.w	r3, [sp, #21]
	return usb_d_ep_transfer(&xfer);
    c8a2:	f000 fbb3 	bl	d00c <usb_d_ep_transfer>
			return true;
    c8a6:	2001      	movs	r0, #1
    c8a8:	e629      	b.n	c4fe <usbdc_cb_ctl_req+0x36>
		usbdc.ctrl_buf[0] = 0;
    c8aa:	697a      	ldr	r2, [r7, #20]
    c8ac:	7013      	strb	r3, [r2, #0]
	struct usb_d_transfer xfer = {(uint8_t *)buf, size, ep, zlp};
    c8ae:	697a      	ldr	r2, [r7, #20]
    c8b0:	9203      	str	r2, [sp, #12]
    c8b2:	2401      	movs	r4, #1
	return usb_d_ep_transfer(&xfer);
    c8b4:	a803      	add	r0, sp, #12
	struct usb_d_transfer xfer = {(uint8_t *)buf, size, ep, zlp};
    c8b6:	f88d 3014 	strb.w	r3, [sp, #20]
    c8ba:	f88d 3015 	strb.w	r3, [sp, #21]
    c8be:	9404      	str	r4, [sp, #16]
	return usb_d_ep_transfer(&xfer);
    c8c0:	f000 fba4 	bl	d00c <usb_d_ep_transfer>
		return true;
    c8c4:	4620      	mov	r0, r4
    c8c6:	e61a      	b.n	c4fe <usbdc_cb_ctl_req+0x36>
	if (length <= total_len) {
    c8c8:	2100      	movs	r1, #0
    c8ca:	e7b7      	b.n	c83c <usbdc_cb_ctl_req+0x374>
			while (NULL != func) {
    c8cc:	4644      	mov	r4, r8
    c8ce:	e778      	b.n	c7c2 <usbdc_cb_ctl_req+0x2fa>

0000c8d0 <usbd_event_cb>:
{
    c8d0:	b570      	push	{r4, r5, r6, lr}
	switch (ev) {
    c8d2:	b338      	cbz	r0, c924 <usbd_event_cb+0x54>
    c8d4:	2801      	cmp	r0, #1
    c8d6:	d124      	bne.n	c922 <usbd_event_cb+0x52>
	struct usbdf_driver *func = (struct usbdf_driver *)usbdc.func_list.head;
    c8d8:	4d19      	ldr	r5, [pc, #100]	; (c940 <usbd_event_cb+0x70>)
    c8da:	692c      	ldr	r4, [r5, #16]
	while (NULL != func) {
    c8dc:	b13c      	cbz	r4, c8ee <usbd_event_cb+0x1e>
		func->ctrl(func, USBDF_DISABLE, NULL);
    c8de:	6863      	ldr	r3, [r4, #4]
    c8e0:	4620      	mov	r0, r4
    c8e2:	2200      	movs	r2, #0
    c8e4:	2101      	movs	r1, #1
    c8e6:	4798      	blx	r3
		func = func->next;
    c8e8:	6824      	ldr	r4, [r4, #0]
	while (NULL != func) {
    c8ea:	2c00      	cmp	r4, #0
    c8ec:	d1f7      	bne.n	c8de <usbd_event_cb+0xe>
	usbdc.cfg_value   = 0;
    c8ee:	2400      	movs	r4, #0
	usb_d_ep_deinit(0);
    c8f0:	4620      	mov	r0, r4
	usbdc.state       = USBD_S_DEFAULT;
    c8f2:	2602      	movs	r6, #2
	usbdc.cfg_value   = 0;
    c8f4:	76ec      	strb	r4, [r5, #27]
	usbdc.ifc_alt_map = 0;
    c8f6:	776c      	strb	r4, [r5, #29]
	usbdc.state       = USBD_S_DEFAULT;
    c8f8:	76ae      	strb	r6, [r5, #26]
	usb_d_ep_deinit(0);
    c8fa:	f000 fb41 	bl	cf80 <usb_d_ep_deinit>
	usb_d_ep0_init(usbdc.ctrl_size);
    c8fe:	7f28      	ldrb	r0, [r5, #28]
    c900:	f000 faba 	bl	ce78 <usb_d_ep0_init>
	usb_d_ep_register_callback(0, USB_D_EP_CB_SETUP, (FUNC_PTR)usbdc_cb_ctl_req);
    c904:	4621      	mov	r1, r4
    c906:	4620      	mov	r0, r4
    c908:	4a0e      	ldr	r2, [pc, #56]	; (c944 <usbd_event_cb+0x74>)
    c90a:	f000 fc69 	bl	d1e0 <usb_d_ep_register_callback>
	usb_d_ep_register_callback(0, USB_D_EP_CB_XFER, (FUNC_PTR)usbdc_cb_ctl_done);
    c90e:	4620      	mov	r0, r4
    c910:	4631      	mov	r1, r6
    c912:	4a0d      	ldr	r2, [pc, #52]	; (c948 <usbd_event_cb+0x78>)
    c914:	f000 fc64 	bl	d1e0 <usb_d_ep_register_callback>
	usb_d_ep_enable(0);
    c918:	4620      	mov	r0, r4
}
    c91a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	usb_d_ep_enable(0);
    c91e:	f000 bb4b 	b.w	cfb8 <usb_d_ep_enable>
    c922:	bd70      	pop	{r4, r5, r6, pc}
	struct usbdc_change_handler *cg = (struct usbdc_change_handler *)usbdc.handlers.change_list.head;
    c924:	4b06      	ldr	r3, [pc, #24]	; (c940 <usbd_event_cb+0x70>)
    c926:	68dc      	ldr	r4, [r3, #12]
    c928:	460d      	mov	r5, r1
	while (cg != NULL) {
    c92a:	b144      	cbz	r4, c93e <usbd_event_cb+0x6e>
		if (NULL != cg->cb) {
    c92c:	6863      	ldr	r3, [r4, #4]
			cg->cb(change, value);
    c92e:	4629      	mov	r1, r5
    c930:	2000      	movs	r0, #0
		if (NULL != cg->cb) {
    c932:	b103      	cbz	r3, c936 <usbd_event_cb+0x66>
			cg->cb(change, value);
    c934:	4798      	blx	r3
		cg = cg->next;
    c936:	6824      	ldr	r4, [r4, #0]
	while (cg != NULL) {
    c938:	2c00      	cmp	r4, #0
    c93a:	d1f7      	bne.n	c92c <usbd_event_cb+0x5c>
    c93c:	bd70      	pop	{r4, r5, r6, pc}
    c93e:	bd70      	pop	{r4, r5, r6, pc}
    c940:	20001c30 	.word	0x20001c30
    c944:	0000c4c9 	.word	0x0000c4c9
    c948:	0000c42d 	.word	0x0000c42d

0000c94c <usbdc_xfer>:
{
    c94c:	b500      	push	{lr}
    c94e:	b085      	sub	sp, #20
	struct usb_d_transfer xfer = {(uint8_t *)buf, size, ep, zlp};
    c950:	f88d 000c 	strb.w	r0, [sp, #12]
	return usb_d_ep_transfer(&xfer);
    c954:	a801      	add	r0, sp, #4
	struct usb_d_transfer xfer = {(uint8_t *)buf, size, ep, zlp};
    c956:	9101      	str	r1, [sp, #4]
    c958:	9202      	str	r2, [sp, #8]
    c95a:	f88d 300d 	strb.w	r3, [sp, #13]
	return usb_d_ep_transfer(&xfer);
    c95e:	f000 fb55 	bl	d00c <usb_d_ep_transfer>
}
    c962:	b005      	add	sp, #20
    c964:	f85d fb04 	ldr.w	pc, [sp], #4

0000c968 <usbdc_register_handler>:
/**
 * \brief Register the handler
 */
void usbdc_register_handler(enum usbdc_handler_type type, const struct usbdc_handler *h)
{
	switch (type) {
    c968:	2801      	cmp	r0, #1
    c96a:	d009      	beq.n	c980 <usbdc_register_handler+0x18>
    c96c:	d305      	bcc.n	c97a <usbdc_register_handler+0x12>
    c96e:	2802      	cmp	r0, #2
    c970:	d102      	bne.n	c978 <usbdc_register_handler+0x10>
		break;
	case USBDC_HDL_REQ:
		list_insert_at_end(&usbdc.handlers.req_list, (void *)h);
		break;
	case USBDC_HDL_CHANGE:
		list_insert_at_end(&usbdc.handlers.change_list, (void *)h);
    c972:	4805      	ldr	r0, [pc, #20]	; (c988 <usbdc_register_handler+0x20>)
    c974:	f000 bc66 	b.w	d244 <list_insert_at_end>
    c978:	4770      	bx	lr
		list_insert_at_end(&usbdc.handlers.sof_list, (void *)h);
    c97a:	4804      	ldr	r0, [pc, #16]	; (c98c <usbdc_register_handler+0x24>)
    c97c:	f000 bc62 	b.w	d244 <list_insert_at_end>
		list_insert_at_end(&usbdc.handlers.req_list, (void *)h);
    c980:	4803      	ldr	r0, [pc, #12]	; (c990 <usbdc_register_handler+0x28>)
    c982:	f000 bc5f 	b.w	d244 <list_insert_at_end>
    c986:	bf00      	nop
    c988:	20001c3c 	.word	0x20001c3c
    c98c:	20001c34 	.word	0x20001c34
    c990:	20001c38 	.word	0x20001c38

0000c994 <usbdc_init>:

/**
 * \brief Initialize the USB device core driver
 */
int32_t usbdc_init(uint8_t *ctrl_buf)
{
    c994:	b538      	push	{r3, r4, r5, lr}
	ASSERT(ctrl_buf);
    c996:	4605      	mov	r5, r0
    c998:	3000      	adds	r0, #0
    c99a:	bf18      	it	ne
    c99c:	2001      	movne	r0, #1
    c99e:	f240 3255 	movw	r2, #853	; 0x355
    c9a2:	490c      	ldr	r1, [pc, #48]	; (c9d4 <usbdc_init+0x40>)
    c9a4:	f000 fc4a 	bl	d23c <assert>

	int32_t rc;

	rc = usb_d_init();
    c9a8:	f000 f9dc 	bl	cd64 <usb_d_init>
	if (rc < 0) {
    c9ac:	2800      	cmp	r0, #0
    c9ae:	db0f      	blt.n	c9d0 <usbdc_init+0x3c>
		return rc;
	}

	memset(&usbdc, 0, sizeof(usbdc));
    c9b0:	4c09      	ldr	r4, [pc, #36]	; (c9d8 <usbdc_init+0x44>)
    c9b2:	2220      	movs	r2, #32
    c9b4:	2100      	movs	r1, #0
    c9b6:	4620      	mov	r0, r4
    c9b8:	f011 fd20 	bl	1e3fc <memset>
	usbdc.ctrl_buf = ctrl_buf;
	usb_d_register_callback(USB_D_CB_SOF, (FUNC_PTR)usbd_sof_cb);
    c9bc:	4907      	ldr	r1, [pc, #28]	; (c9dc <usbdc_init+0x48>)
	usbdc.ctrl_buf = ctrl_buf;
    c9be:	6165      	str	r5, [r4, #20]
	usb_d_register_callback(USB_D_CB_SOF, (FUNC_PTR)usbd_sof_cb);
    c9c0:	2000      	movs	r0, #0
    c9c2:	f000 fa51 	bl	ce68 <usb_d_register_callback>
	usb_d_register_callback(USB_D_CB_EVENT, (FUNC_PTR)usbd_event_cb);
    c9c6:	2001      	movs	r0, #1
    c9c8:	4905      	ldr	r1, [pc, #20]	; (c9e0 <usbdc_init+0x4c>)
    c9ca:	f000 fa4d 	bl	ce68 <usb_d_register_callback>

	return 0;
    c9ce:	2000      	movs	r0, #0
}
    c9d0:	bd38      	pop	{r3, r4, r5, pc}
    c9d2:	bf00      	nop
    c9d4:	000231c8 	.word	0x000231c8
    c9d8:	20001c30 	.word	0x20001c30
    c9dc:	0000c411 	.word	0x0000c411
    c9e0:	0000c8d1 	.word	0x0000c8d1

0000c9e4 <usbdc_register_function>:
 *
 * Must be invoked when USB device is stopped.
 */
void usbdc_register_function(struct usbdf_driver *func)
{
	list_insert_at_end(&usbdc.func_list, func);
    c9e4:	4601      	mov	r1, r0
    c9e6:	4801      	ldr	r0, [pc, #4]	; (c9ec <usbdc_register_function+0x8>)
    c9e8:	f000 bc2c 	b.w	d244 <list_insert_at_end>
    c9ec:	20001c40 	.word	0x20001c40

0000c9f0 <usbdc_start>:

/**
 * \brief Start the USB device driver with specific descriptors set
 */
int32_t usbdc_start(struct usbd_descriptors *desces)
{
    c9f0:	b510      	push	{r4, lr}
	if (usbdc.state >= USBD_S_POWER) {
    c9f2:	4b0a      	ldr	r3, [pc, #40]	; (ca1c <usbdc_start+0x2c>)
    c9f4:	7e9c      	ldrb	r4, [r3, #26]
    c9f6:	b954      	cbnz	r4, ca0e <usbdc_start+0x1e>
		return ERR_BUSY;
	}

	if (desces) {
    c9f8:	b160      	cbz	r0, ca14 <usbdc_start+0x24>
#endif
	} else {
		return ERR_BAD_DATA;
	}

	usbdc.ctrl_size = desces->sod[7];
    c9fa:	6802      	ldr	r2, [r0, #0]
		usbdc.desces.ls_fs = desces;
    c9fc:	6018      	str	r0, [r3, #0]
	usbdc.ctrl_size = desces->sod[7];
    c9fe:	79d2      	ldrb	r2, [r2, #7]
    ca00:	771a      	strb	r2, [r3, #28]
	usbdc.state     = USBD_S_POWER;
    ca02:	2201      	movs	r2, #1
    ca04:	769a      	strb	r2, [r3, #26]
	usb_d_enable();
    ca06:	f000 fa31 	bl	ce6c <usb_d_enable>
	return ERR_NONE;
    ca0a:	4620      	mov	r0, r4
    ca0c:	bd10      	pop	{r4, pc}
		return ERR_BUSY;
    ca0e:	f06f 0003 	mvn.w	r0, #3
    ca12:	bd10      	pop	{r4, pc}
		return ERR_BAD_DATA;
    ca14:	f06f 0008 	mvn.w	r0, #8
}
    ca18:	bd10      	pop	{r4, pc}
    ca1a:	bf00      	nop
    ca1c:	20001c30 	.word	0x20001c30

0000ca20 <usbdc_attach>:
/**
 * \brief Attach the USB device to host
 */
void usbdc_attach(void)
{
	usb_d_attach();
    ca20:	f000 ba26 	b.w	ce70 <usb_d_attach>

0000ca24 <usbdc_get_ctrl_buffer>:
/**
 * \brief Return USB Device endpoint0 buffer
 */
uint8_t *usbdc_get_ctrl_buffer(void)
{
	return usbdc.ctrl_buf;
    ca24:	4b01      	ldr	r3, [pc, #4]	; (ca2c <usbdc_get_ctrl_buffer+0x8>)
}
    ca26:	6958      	ldr	r0, [r3, #20]
    ca28:	4770      	bx	lr
    ca2a:	bf00      	nop
    ca2c:	20001c30 	.word	0x20001c30

0000ca30 <usbdc_get_state>:
/**
 * \brief Return current USB state
 */
uint8_t usbdc_get_state(void)
{
	if (usbdc.state & USBD_S_SUSPEND) {
    ca30:	4b03      	ldr	r3, [pc, #12]	; (ca40 <usbdc_get_state+0x10>)
    ca32:	7e98      	ldrb	r0, [r3, #26]
    ca34:	f010 0f10 	tst.w	r0, #16
		return USBD_S_SUSPEND;
	}
	return usbdc.state;
}
    ca38:	bf18      	it	ne
    ca3a:	2010      	movne	r0, #16
    ca3c:	4770      	bx	lr
    ca3e:	bf00      	nop
    ca40:	20001c30 	.word	0x20001c30

0000ca44 <usb_find_desc>:

uint8_t *usb_find_desc(uint8_t *desc, uint8_t *eof, uint8_t type)
{
	_param_error_check(desc && eof && (desc < eof));

	while (desc < eof) {
    ca44:	4288      	cmp	r0, r1
    ca46:	d214      	bcs.n	ca72 <usb_find_desc+0x2e>
    ca48:	7803      	ldrb	r3, [r0, #0]
		_desc_len_check();
    ca4a:	2b01      	cmp	r3, #1
    ca4c:	d911      	bls.n	ca72 <usb_find_desc+0x2e>
{
    ca4e:	b410      	push	{r4}
		if (type == usb_desc_type(desc)) {
    ca50:	7844      	ldrb	r4, [r0, #1]
    ca52:	4294      	cmp	r4, r2
    ca54:	d106      	bne.n	ca64 <usb_find_desc+0x20>
    ca56:	e009      	b.n	ca6c <usb_find_desc+0x28>
    ca58:	7803      	ldrb	r3, [r0, #0]
		_desc_len_check();
    ca5a:	2b01      	cmp	r3, #1
    ca5c:	d905      	bls.n	ca6a <usb_find_desc+0x26>
	return desc[1];
    ca5e:	7844      	ldrb	r4, [r0, #1]
		if (type == usb_desc_type(desc)) {
    ca60:	4294      	cmp	r4, r2
    ca62:	d003      	beq.n	ca6c <usb_find_desc+0x28>
	return (desc + usb_desc_len(desc));
    ca64:	4418      	add	r0, r3
	while (desc < eof) {
    ca66:	4281      	cmp	r1, r0
    ca68:	d8f6      	bhi.n	ca58 <usb_find_desc+0x14>
			return desc;
		}
		desc = usb_desc_next(desc);
	}
	return NULL;
    ca6a:	2000      	movs	r0, #0
}
    ca6c:	f85d 4b04 	ldr.w	r4, [sp], #4
    ca70:	4770      	bx	lr
	return NULL;
    ca72:	2000      	movs	r0, #0
    ca74:	4770      	bx	lr
    ca76:	bf00      	nop

0000ca78 <usb_find_ep_desc>:

uint8_t *usb_find_ep_desc(uint8_t *desc, uint8_t *eof)
{
	_param_error_check(desc && eof && (desc < eof));

	while (desc < eof) {
    ca78:	4288      	cmp	r0, r1
    ca7a:	d213      	bcs.n	caa4 <usb_find_ep_desc+0x2c>
    ca7c:	7803      	ldrb	r3, [r0, #0]
		_desc_len_check();
    ca7e:	2b01      	cmp	r3, #1
    ca80:	d910      	bls.n	caa4 <usb_find_ep_desc+0x2c>
	return desc[1];
    ca82:	7842      	ldrb	r2, [r0, #1]
		if (USB_DT_INTERFACE == usb_desc_type(desc)) {
    ca84:	2a04      	cmp	r2, #4
    ca86:	d00d      	beq.n	caa4 <usb_find_ep_desc+0x2c>
			break;
		}
		if (USB_DT_ENDPOINT == usb_desc_type(desc)) {
    ca88:	2a05      	cmp	r2, #5
    ca8a:	d108      	bne.n	ca9e <usb_find_ep_desc+0x26>
    ca8c:	e00c      	b.n	caa8 <usb_find_ep_desc+0x30>
    ca8e:	7803      	ldrb	r3, [r0, #0]
		_desc_len_check();
    ca90:	2b01      	cmp	r3, #1
    ca92:	d907      	bls.n	caa4 <usb_find_ep_desc+0x2c>
    ca94:	7842      	ldrb	r2, [r0, #1]
		if (USB_DT_INTERFACE == usb_desc_type(desc)) {
    ca96:	2a04      	cmp	r2, #4
    ca98:	d004      	beq.n	caa4 <usb_find_ep_desc+0x2c>
		if (USB_DT_ENDPOINT == usb_desc_type(desc)) {
    ca9a:	2a05      	cmp	r2, #5
    ca9c:	d003      	beq.n	caa6 <usb_find_ep_desc+0x2e>
	return (desc + usb_desc_len(desc));
    ca9e:	4418      	add	r0, r3
	while (desc < eof) {
    caa0:	4281      	cmp	r1, r0
    caa2:	d8f4      	bhi.n	ca8e <usb_find_ep_desc+0x16>
			return desc;
		}
		desc = usb_desc_next(desc);
	}
	return NULL;
    caa4:	2000      	movs	r0, #0
}
    caa6:	4770      	bx	lr
    caa8:	4770      	bx	lr
    caaa:	bf00      	nop

0000caac <usb_find_cfg_desc>:
	while (desc < eof) {
    caac:	4288      	cmp	r0, r1
    caae:	d226      	bcs.n	cafe <usb_find_cfg_desc+0x52>
    cab0:	7803      	ldrb	r3, [r0, #0]
		_desc_len_check();
    cab2:	2b01      	cmp	r3, #1
    cab4:	d923      	bls.n	cafe <usb_find_cfg_desc+0x52>

uint8_t *usb_find_cfg_desc(uint8_t *desc, uint8_t *eof, uint8_t cfg_value)
{
    cab6:	b410      	push	{r4}
		if (type == usb_desc_type(desc)) {
    cab8:	7844      	ldrb	r4, [r0, #1]
    caba:	2c02      	cmp	r4, #2
    cabc:	d106      	bne.n	cacc <usb_find_cfg_desc+0x20>
    cabe:	e012      	b.n	cae6 <usb_find_cfg_desc+0x3a>
    cac0:	7803      	ldrb	r3, [r0, #0]
		_desc_len_check();
    cac2:	2b01      	cmp	r3, #1
    cac4:	d905      	bls.n	cad2 <usb_find_cfg_desc+0x26>
	return desc[1];
    cac6:	7844      	ldrb	r4, [r0, #1]
		if (type == usb_desc_type(desc)) {
    cac8:	2c02      	cmp	r4, #2
    caca:	d00c      	beq.n	cae6 <usb_find_cfg_desc+0x3a>
	return (desc + usb_desc_len(desc));
    cacc:	4418      	add	r0, r3
	while (desc < eof) {
    cace:	4281      	cmp	r1, r0
    cad0:	d8f6      	bhi.n	cac0 <usb_find_cfg_desc+0x14>
	_param_error_check(desc && eof && (desc < eof));

	desc = usb_find_desc(desc, eof, USB_DT_CONFIG);
	if (!desc) {
		return NULL;
    cad2:	2000      	movs	r0, #0
			return desc;
		}
		desc = usb_cfg_desc_next(desc);
	}
	return NULL;
}
    cad4:	f85d 4b04 	ldr.w	r4, [sp], #4
    cad8:	4770      	bx	lr
		_desc_len_check();
    cada:	7803      	ldrb	r3, [r0, #0]
    cadc:	2b01      	cmp	r3, #1
    cade:	d9f8      	bls.n	cad2 <usb_find_cfg_desc+0x26>
		if (desc[1] != USB_DT_CONFIG) {
    cae0:	7843      	ldrb	r3, [r0, #1]
    cae2:	2b02      	cmp	r3, #2
    cae4:	d1f5      	bne.n	cad2 <usb_find_cfg_desc+0x26>
		if (desc[5] == cfg_value) {
    cae6:	7943      	ldrb	r3, [r0, #5]
    cae8:	4293      	cmp	r3, r2
    caea:	d0f3      	beq.n	cad4 <usb_find_cfg_desc+0x28>
	return (ptr[0] + (ptr[1] << 8));
    caec:	78c4      	ldrb	r4, [r0, #3]
    caee:	7883      	ldrb	r3, [r0, #2]
    caf0:	eb03 2304 	add.w	r3, r3, r4, lsl #8
 *  \param[in] cfg_desc Byte pointer to the descriptor start address
 *  \return Byte pointer to descriptor after configuration end
 */
static inline uint8_t *usb_cfg_desc_next(uint8_t *cfg_desc)
{
	return (cfg_desc + usb_cfg_desc_total_len(cfg_desc));
    caf4:	fa10 f083 	uxtah	r0, r0, r3
	while (desc < eof) {
    caf8:	4281      	cmp	r1, r0
    cafa:	d8ee      	bhi.n	cada <usb_find_cfg_desc+0x2e>
    cafc:	e7e9      	b.n	cad2 <usb_find_cfg_desc+0x26>
		return NULL;
    cafe:	2000      	movs	r0, #0
    cb00:	4770      	bx	lr
    cb02:	bf00      	nop

0000cb04 <usb_find_str_desc>:
{
	uint8_t i;

	_param_error_check(desc && eof && (desc < eof));

	for (i = 0; desc < eof;) {
    cb04:	4288      	cmp	r0, r1
    cb06:	d216      	bcs.n	cb36 <usb_find_str_desc+0x32>
{
    cb08:	b430      	push	{r4, r5}
	for (i = 0; desc < eof;) {
    cb0a:	2500      	movs	r5, #0
    cb0c:	e005      	b.n	cb1a <usb_find_str_desc+0x16>
	return desc[1];
    cb0e:	7844      	ldrb	r4, [r0, #1]
		if (type == usb_desc_type(desc)) {
    cb10:	2c03      	cmp	r4, #3
    cb12:	d008      	beq.n	cb26 <usb_find_str_desc+0x22>
	return (desc + usb_desc_len(desc));
    cb14:	4418      	add	r0, r3
	while (desc < eof) {
    cb16:	4281      	cmp	r1, r0
    cb18:	d902      	bls.n	cb20 <usb_find_str_desc+0x1c>
    cb1a:	7803      	ldrb	r3, [r0, #0]
		_desc_len_check();
    cb1c:	2b01      	cmp	r3, #1
    cb1e:	d8f6      	bhi.n	cb0e <usb_find_str_desc+0xa>
			desc = usb_desc_next(desc);
		} else {
			return NULL;
		}
	}
	return NULL;
    cb20:	2000      	movs	r0, #0
}
    cb22:	bc30      	pop	{r4, r5}
    cb24:	4770      	bx	lr
			if (i == str_index) {
    cb26:	4295      	cmp	r5, r2
    cb28:	d0fb      	beq.n	cb22 <usb_find_str_desc+0x1e>
    cb2a:	4418      	add	r0, r3
	for (i = 0; desc < eof;) {
    cb2c:	4281      	cmp	r1, r0
    cb2e:	f105 0501 	add.w	r5, r5, #1
    cb32:	d8f2      	bhi.n	cb1a <usb_find_str_desc+0x16>
    cb34:	e7f4      	b.n	cb20 <usb_find_str_desc+0x1c>
	return NULL;
    cb36:	2000      	movs	r0, #0
    cb38:	4770      	bx	lr
    cb3a:	bf00      	nop

0000cb3c <usb_d_dummy_cb_false>:
{
	(void)unused0;
	(void)unused1;
	(void)unused2;
	return false;
}
    cb3c:	2000      	movs	r0, #0
    cb3e:	4770      	bx	lr

0000cb40 <usb_d_cb_trans_more>:
 * \brief Callback invoked when request more data
 * \param[in] ep Endpoint number with transfer direction on bit 8.
 * \param[in] transfered Number of bytes transfered.
 */
static bool usb_d_cb_trans_more(const uint8_t ep, const uint32_t transfered)
{
    cb40:	b5f0      	push	{r4, r5, r6, r7, lr}
    cb42:	4f0f      	ldr	r7, [pc, #60]	; (cb80 <usb_d_cb_trans_more+0x40>)
		    && (ep & USB_EP_N_MASK) == usb_d_inst.ep[i].xfer.hdr.ep) {
    cb44:	f000 0e0f 	and.w	lr, r0, #15
    cb48:	463a      	mov	r2, r7
{
    cb4a:	2300      	movs	r3, #0
		if (usb_d_inst.ep[i].xfer.hdr.ep == ep) {
    cb4c:	7854      	ldrb	r4, [r2, #1]
    cb4e:	42a0      	cmp	r0, r4
    cb50:	461e      	mov	r6, r3
    cb52:	f103 0301 	add.w	r3, r3, #1
    cb56:	d008      	beq.n	cb6a <usb_d_cb_trans_more+0x2a>
		if (usb_d_inst.ep[i].xfer.hdr.type == USB_EP_XTYPE_CTRL
    cb58:	7815      	ldrb	r5, [r2, #0]
    cb5a:	3220      	adds	r2, #32
    cb5c:	b90d      	cbnz	r5, cb62 <usb_d_cb_trans_more+0x22>
		    && (ep & USB_EP_N_MASK) == usb_d_inst.ep[i].xfer.hdr.ep) {
    cb5e:	4574      	cmp	r4, lr
    cb60:	d003      	beq.n	cb6a <usb_d_cb_trans_more+0x2a>
	for (i = 0; i < CONF_USB_D_NUM_EP_SP; i++) {
    cb62:	2b0d      	cmp	r3, #13
    cb64:	d1f2      	bne.n	cb4c <usb_d_cb_trans_more+0xc>
    cb66:	f04f 36ff 	mov.w	r6, #4294967295
	int8_t           ep_index = _usb_d_find_ep(ep);
	struct usb_d_ep *ept      = &usb_d_inst.ep[ep_index];
	if (ept->xfer.hdr.state == USB_EP_S_X_DATA) {
    cb6a:	eb07 1646 	add.w	r6, r7, r6, lsl #5
    cb6e:	78b3      	ldrb	r3, [r6, #2]
    cb70:	2b03      	cmp	r3, #3
    cb72:	d001      	beq.n	cb78 <usb_d_cb_trans_more+0x38>
		return ept->callbacks.more(ep, transfered);
	}
	return false;
}
    cb74:	2000      	movs	r0, #0
    cb76:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return ept->callbacks.more(ep, transfered);
    cb78:	69b3      	ldr	r3, [r6, #24]
}
    cb7a:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
		return ept->callbacks.more(ep, transfered);
    cb7e:	4718      	bx	r3
    cb80:	20001c50 	.word	0x20001c50

0000cb84 <_usb_d_cb_trans_done>:

/**
 * Callback when USB transactions are finished.
 */
static void _usb_d_cb_trans_done(const uint8_t ep, const int32_t code, const uint32_t transferred)
{
    cb84:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    cb88:	f8df 9130 	ldr.w	r9, [pc, #304]	; ccbc <_usb_d_cb_trans_done+0x138>
    cb8c:	4607      	mov	r7, r0
    cb8e:	4688      	mov	r8, r1
    cb90:	b087      	sub	sp, #28
		    && (ep & USB_EP_N_MASK) == usb_d_inst.ep[i].xfer.hdr.ep) {
    cb92:	f000 010f 	and.w	r1, r0, #15
{
    cb96:	2300      	movs	r3, #0
    cb98:	4648      	mov	r0, r9
		if (usb_d_inst.ep[i].xfer.hdr.ep == ep) {
    cb9a:	7844      	ldrb	r4, [r0, #1]
    cb9c:	42a7      	cmp	r7, r4
    cb9e:	461e      	mov	r6, r3
    cba0:	f103 0301 	add.w	r3, r3, #1
    cba4:	d008      	beq.n	cbb8 <_usb_d_cb_trans_done+0x34>
		if (usb_d_inst.ep[i].xfer.hdr.type == USB_EP_XTYPE_CTRL
    cba6:	7805      	ldrb	r5, [r0, #0]
    cba8:	3020      	adds	r0, #32
    cbaa:	b90d      	cbnz	r5, cbb0 <_usb_d_cb_trans_done+0x2c>
		    && (ep & USB_EP_N_MASK) == usb_d_inst.ep[i].xfer.hdr.ep) {
    cbac:	428c      	cmp	r4, r1
    cbae:	d003      	beq.n	cbb8 <_usb_d_cb_trans_done+0x34>
	for (i = 0; i < CONF_USB_D_NUM_EP_SP; i++) {
    cbb0:	2b0d      	cmp	r3, #13
    cbb2:	d1f2      	bne.n	cb9a <_usb_d_cb_trans_done+0x16>
    cbb4:	f04f 36ff 	mov.w	r6, #4294967295
	int8_t           ep_index = _usb_d_find_ep(ep);
	struct usb_d_ep *ept      = &usb_d_inst.ep[ep_index];

	if (code == USB_TRANS_DONE) {
		ept->xfer.hdr.status = USB_XFER_DONE;
    cbb8:	0176      	lsls	r6, r6, #5
	if (code == USB_TRANS_DONE) {
    cbba:	f1b8 0f00 	cmp.w	r8, #0
    cbbe:	d110      	bne.n	cbe2 <_usb_d_cb_trans_done+0x5e>
		ept->xfer.hdr.status = USB_XFER_DONE;
    cbc0:	eb09 0406 	add.w	r4, r9, r6
		if (ept->xfer.hdr.type == USB_EP_XTYPE_CTRL) {
    cbc4:	f819 3006 	ldrb.w	r3, [r9, r6]
		ept->xfer.hdr.status = USB_XFER_DONE;
    cbc8:	f884 8003 	strb.w	r8, [r4, #3]
		if (ept->xfer.hdr.type == USB_EP_XTYPE_CTRL) {
    cbcc:	b32b      	cbz	r3, cc1a <_usb_d_cb_trans_done+0x96>
			usb_d_ctrl_trans_done(ept);
			return;
		}
		ept->xfer.hdr.state = USB_EP_S_IDLE;
    cbce:	2301      	movs	r3, #1
    cbd0:	4641      	mov	r1, r8
    cbd2:	70a3      	strb	r3, [r4, #2]
	} else {
		ept->xfer.hdr.state  = USB_EP_S_ERROR;
		ept->xfer.hdr.status = USB_XFER_ERROR;
	}

	ept->callbacks.xfer(ep, (enum usb_xfer_code)ept->xfer.hdr.status, (void *)transferred);
    cbd4:	444e      	add	r6, r9
    cbd6:	4638      	mov	r0, r7
    cbd8:	69f3      	ldr	r3, [r6, #28]
    cbda:	4798      	blx	r3
}
    cbdc:	b007      	add	sp, #28
    cbde:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	} else if (code == USB_TRANS_STALL) {
    cbe2:	f1b8 0f01 	cmp.w	r8, #1
    cbe6:	d00b      	beq.n	cc00 <_usb_d_cb_trans_done+0x7c>
	} else if (code == USB_TRANS_ABORT) {
    cbe8:	f1b8 0f02 	cmp.w	r8, #2
		ept->xfer.hdr.status = USB_XFER_ABORT;
    cbec:	eb09 0306 	add.w	r3, r9, r6
	} else if (code == USB_TRANS_ABORT) {
    cbf0:	d025      	beq.n	cc3e <_usb_d_cb_trans_done+0xba>
	} else if (code == USB_TRANS_RESET) {
    cbf2:	f1b8 0f03 	cmp.w	r8, #3
    cbf6:	d01d      	beq.n	cc34 <_usb_d_cb_trans_done+0xb0>
		ept->xfer.hdr.state  = USB_EP_S_ERROR;
    cbf8:	2106      	movs	r1, #6
    cbfa:	7099      	strb	r1, [r3, #2]
		ept->xfer.hdr.status = USB_XFER_ERROR;
    cbfc:	70d9      	strb	r1, [r3, #3]
    cbfe:	e7e9      	b.n	cbd4 <_usb_d_cb_trans_done+0x50>
		ept->xfer.hdr.status = USB_XFER_HALT;
    cc00:	eb09 0406 	add.w	r4, r9, r6
		if (ept->xfer.hdr.type == USB_EP_XTYPE_CTRL) {
    cc04:	f819 1006 	ldrb.w	r1, [r9, r6]
		ept->xfer.hdr.status = USB_XFER_HALT;
    cc08:	f04f 0802 	mov.w	r8, #2
    cc0c:	f884 8003 	strb.w	r8, [r4, #3]
		if (ept->xfer.hdr.type == USB_EP_XTYPE_CTRL) {
    cc10:	b1e9      	cbz	r1, cc4e <_usb_d_cb_trans_done+0xca>
			ept->xfer.hdr.state = USB_EP_S_HALTED;
    cc12:	2305      	movs	r3, #5
    cc14:	4641      	mov	r1, r8
    cc16:	70a3      	strb	r3, [r4, #2]
    cc18:	e7dc      	b.n	cbd4 <_usb_d_cb_trans_done+0x50>
	if (state == USB_EP_S_X_DATA) {
    cc1a:	78a3      	ldrb	r3, [r4, #2]
		bool err = ept->callbacks.xfer(ept->xfer.hdr.ep, USB_XFER_DATA, ept->xfer.req);
    cc1c:	360c      	adds	r6, #12
	if (state == USB_EP_S_X_DATA) {
    cc1e:	2b03      	cmp	r3, #3
		bool err = ept->callbacks.xfer(ept->xfer.hdr.ep, USB_XFER_DATA, ept->xfer.req);
    cc20:	eb09 0206 	add.w	r2, r9, r6
	if (state == USB_EP_S_X_DATA) {
    cc24:	d01f      	beq.n	cc66 <_usb_d_cb_trans_done+0xe2>
		ept->callbacks.xfer(ept->xfer.hdr.ep, USB_XFER_DONE, ept->xfer.req);
    cc26:	69e3      	ldr	r3, [r4, #28]
    cc28:	7860      	ldrb	r0, [r4, #1]
    cc2a:	4641      	mov	r1, r8
    cc2c:	4798      	blx	r3
		ept->xfer.hdr.state = USB_EP_S_X_SETUP;
    cc2e:	2302      	movs	r3, #2
    cc30:	70a3      	strb	r3, [r4, #2]
    cc32:	e7d3      	b.n	cbdc <_usb_d_cb_trans_done+0x58>
		ept->xfer.hdr.state  = USB_EP_S_DISABLED;
    cc34:	2000      	movs	r0, #0
		ept->xfer.hdr.status = USB_XFER_RESET;
    cc36:	2105      	movs	r1, #5
		ept->xfer.hdr.state  = USB_EP_S_DISABLED;
    cc38:	7098      	strb	r0, [r3, #2]
		ept->xfer.hdr.status = USB_XFER_RESET;
    cc3a:	70d9      	strb	r1, [r3, #3]
    cc3c:	e7ca      	b.n	cbd4 <_usb_d_cb_trans_done+0x50>
		if (ept->xfer.hdr.type == USB_EP_XTYPE_CTRL) {
    cc3e:	f819 0006 	ldrb.w	r0, [r9, r6]
		ept->xfer.hdr.status = USB_XFER_ABORT;
    cc42:	2104      	movs	r1, #4
    cc44:	70d9      	strb	r1, [r3, #3]
		if (ept->xfer.hdr.type == USB_EP_XTYPE_CTRL) {
    cc46:	b158      	cbz	r0, cc60 <_usb_d_cb_trans_done+0xdc>
		ept->xfer.hdr.state = USB_EP_S_IDLE;
    cc48:	2001      	movs	r0, #1
    cc4a:	7098      	strb	r0, [r3, #2]
    cc4c:	e7c2      	b.n	cbd4 <_usb_d_cb_trans_done+0x50>
			_usb_d_dev_ep_stall(ep, USB_EP_STALL_CLR);
    cc4e:	4638      	mov	r0, r7
			ept->xfer.hdr.state = USB_EP_S_X_SETUP;
    cc50:	f884 8002 	strb.w	r8, [r4, #2]
    cc54:	9201      	str	r2, [sp, #4]
			_usb_d_dev_ep_stall(ep, USB_EP_STALL_CLR);
    cc56:	f005 ffb7 	bl	12bc8 <_usb_d_dev_ep_stall>
    cc5a:	78e1      	ldrb	r1, [r4, #3]
    cc5c:	9a01      	ldr	r2, [sp, #4]
    cc5e:	e7b9      	b.n	cbd4 <_usb_d_cb_trans_done+0x50>
			ept->xfer.hdr.state = USB_EP_S_X_SETUP;
    cc60:	f883 8002 	strb.w	r8, [r3, #2]
			return;
    cc64:	e7ba      	b.n	cbdc <_usb_d_cb_trans_done+0x58>
		bool err = ept->callbacks.xfer(ept->xfer.hdr.ep, USB_XFER_DATA, ept->xfer.req);
    cc66:	69e3      	ldr	r3, [r4, #28]
    cc68:	7860      	ldrb	r0, [r4, #1]
    cc6a:	f994 500c 	ldrsb.w	r5, [r4, #12]
    cc6e:	2101      	movs	r1, #1
    cc70:	4798      	blx	r3
		if (err) {
    cc72:	b160      	cbz	r0, cc8e <_usb_d_cb_trans_done+0x10a>
			_usb_d_dev_ep_stall(req_dir ? ept->xfer.hdr.ep : (ept->xfer.hdr.ep | USB_EP_DIR), USB_EP_STALL_SET);
    cc74:	7860      	ldrb	r0, [r4, #1]
			ept->xfer.hdr.state  = USB_EP_S_HALTED;
    cc76:	2205      	movs	r2, #5
			ept->xfer.hdr.status = USB_XFER_HALT;
    cc78:	2302      	movs	r3, #2
			_usb_d_dev_ep_stall(req_dir ? ept->xfer.hdr.ep : (ept->xfer.hdr.ep | USB_EP_DIR), USB_EP_STALL_SET);
    cc7a:	2d00      	cmp	r5, #0
			ept->xfer.hdr.state  = USB_EP_S_HALTED;
    cc7c:	70a2      	strb	r2, [r4, #2]
			ept->xfer.hdr.status = USB_XFER_HALT;
    cc7e:	70e3      	strb	r3, [r4, #3]
			_usb_d_dev_ep_stall(req_dir ? ept->xfer.hdr.ep : (ept->xfer.hdr.ep | USB_EP_DIR), USB_EP_STALL_SET);
    cc80:	bfa8      	it	ge
    cc82:	f040 0080 	orrge.w	r0, r0, #128	; 0x80
    cc86:	2101      	movs	r1, #1
    cc88:	f005 ff9e 	bl	12bc8 <_usb_d_dev_ep_stall>
    cc8c:	e7a6      	b.n	cbdc <_usb_d_cb_trans_done+0x58>
			ept->xfer.hdr.state = USB_EP_S_X_STATUS;
    cc8e:	2304      	movs	r3, #4
    cc90:	70a3      	strb	r3, [r4, #2]
			_usb_d_trans(ept->xfer.hdr.ep, !req_dir, NULL, 0, 1);
    cc92:	7863      	ldrb	r3, [r4, #1]
	struct usb_d_transfer trans
    cc94:	f8cd 800c 	str.w	r8, [sp, #12]
    cc98:	2d00      	cmp	r5, #0
    cc9a:	bfac      	ite	ge
    cc9c:	f043 0380 	orrge.w	r3, r3, #128	; 0x80
    cca0:	f003 030f 	andlt.w	r3, r3, #15
    cca4:	2201      	movs	r2, #1
	return _usb_d_dev_ep_trans(&trans);
    cca6:	a803      	add	r0, sp, #12
	struct usb_d_transfer trans
    cca8:	f8cd 8010 	str.w	r8, [sp, #16]
    ccac:	f88d 3014 	strb.w	r3, [sp, #20]
    ccb0:	f88d 2015 	strb.w	r2, [sp, #21]
	return _usb_d_dev_ep_trans(&trans);
    ccb4:	f006 f844 	bl	12d40 <_usb_d_dev_ep_trans>
    ccb8:	e790      	b.n	cbdc <_usb_d_cb_trans_done+0x58>
    ccba:	bf00      	nop
    ccbc:	20001c50 	.word	0x20001c50

0000ccc0 <usb_d_cb_trans_setup>:
{
    ccc0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    ccc4:	4f26      	ldr	r7, [pc, #152]	; (cd60 <usb_d_cb_trans_setup+0xa0>)
    ccc6:	4604      	mov	r4, r0
		    && (ep & USB_EP_N_MASK) == usb_d_inst.ep[i].xfer.hdr.ep) {
    ccc8:	f000 060f 	and.w	r6, r0, #15
    cccc:	463a      	mov	r2, r7
{
    ccce:	2300      	movs	r3, #0
		if (usb_d_inst.ep[i].xfer.hdr.ep == ep) {
    ccd0:	7851      	ldrb	r1, [r2, #1]
    ccd2:	428c      	cmp	r4, r1
    ccd4:	461d      	mov	r5, r3
    ccd6:	f103 0301 	add.w	r3, r3, #1
    ccda:	d032      	beq.n	cd42 <usb_d_cb_trans_setup+0x82>
		if (usb_d_inst.ep[i].xfer.hdr.type == USB_EP_XTYPE_CTRL
    ccdc:	7810      	ldrb	r0, [r2, #0]
    ccde:	3220      	adds	r2, #32
    cce0:	b908      	cbnz	r0, cce6 <usb_d_cb_trans_setup+0x26>
		    && (ep & USB_EP_N_MASK) == usb_d_inst.ep[i].xfer.hdr.ep) {
    cce2:	42b1      	cmp	r1, r6
    cce4:	d02d      	beq.n	cd42 <usb_d_cb_trans_setup+0x82>
	for (i = 0; i < CONF_USB_D_NUM_EP_SP; i++) {
    cce6:	2b0d      	cmp	r3, #13
    cce8:	d1f2      	bne.n	ccd0 <usb_d_cb_trans_setup+0x10>
    ccea:	f06f 0613 	mvn.w	r6, #19
    ccee:	f04f 35ff 	mov.w	r5, #4294967295
	uint8_t *        req      = ept->xfer.req;
    ccf2:	443e      	add	r6, r7
	uint8_t n = _usb_d_dev_ep_read_req(ep, req);
    ccf4:	4631      	mov	r1, r6
    ccf6:	4620      	mov	r0, r4
    ccf8:	f005 fff8 	bl	12cec <_usb_d_dev_ep_read_req>
	if (n != 8) {
    ccfc:	b2c0      	uxtb	r0, r0
    ccfe:	2808      	cmp	r0, #8
    cd00:	d00a      	beq.n	cd18 <usb_d_cb_trans_setup+0x58>
		_usb_d_dev_ep_stall(ep, USB_EP_STALL_SET);
    cd02:	2101      	movs	r1, #1
    cd04:	4620      	mov	r0, r4
    cd06:	f005 ff5f 	bl	12bc8 <_usb_d_dev_ep_stall>
		_usb_d_dev_ep_stall(ep | USB_EP_DIR, USB_EP_STALL_SET);
    cd0a:	f044 0080 	orr.w	r0, r4, #128	; 0x80
    cd0e:	2101      	movs	r1, #1
}
    cd10:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		_usb_d_dev_ep_stall(ep | USB_EP_DIR, USB_EP_STALL_SET);
    cd14:	f005 bf58 	b.w	12bc8 <_usb_d_dev_ep_stall>
	ept->xfer.hdr.state = USB_EP_S_IDLE;
    cd18:	eb07 1545 	add.w	r5, r7, r5, lsl #5
	_usb_d_dev_ep_stall(ep, USB_EP_STALL_CLR);
    cd1c:	2100      	movs	r1, #0
    cd1e:	4620      	mov	r0, r4
	_usb_d_dev_ep_stall(ep | USB_EP_DIR, USB_EP_STALL_CLR);
    cd20:	f044 0880 	orr.w	r8, r4, #128	; 0x80
	_usb_d_dev_ep_stall(ep, USB_EP_STALL_CLR);
    cd24:	f005 ff50 	bl	12bc8 <_usb_d_dev_ep_stall>
	ept->xfer.hdr.state = USB_EP_S_IDLE;
    cd28:	2701      	movs	r7, #1
	_usb_d_dev_ep_stall(ep | USB_EP_DIR, USB_EP_STALL_CLR);
    cd2a:	2100      	movs	r1, #0
    cd2c:	4640      	mov	r0, r8
    cd2e:	f005 ff4b 	bl	12bc8 <_usb_d_dev_ep_stall>
	if (!ept->callbacks.req(ep, req)) {
    cd32:	4631      	mov	r1, r6
	ept->xfer.hdr.state = USB_EP_S_IDLE;
    cd34:	70af      	strb	r7, [r5, #2]
	if (!ept->callbacks.req(ep, req)) {
    cd36:	696b      	ldr	r3, [r5, #20]
    cd38:	4620      	mov	r0, r4
    cd3a:	4798      	blx	r3
    cd3c:	b120      	cbz	r0, cd48 <usb_d_cb_trans_setup+0x88>
    cd3e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    cd42:	016e      	lsls	r6, r5, #5
    cd44:	360c      	adds	r6, #12
    cd46:	e7d4      	b.n	ccf2 <usb_d_cb_trans_setup+0x32>
		ept->xfer.hdr.state = USB_EP_S_HALTED;
    cd48:	2305      	movs	r3, #5
		_usb_d_dev_ep_stall(ep, USB_EP_STALL_SET);
    cd4a:	4639      	mov	r1, r7
    cd4c:	4620      	mov	r0, r4
		ept->xfer.hdr.state = USB_EP_S_HALTED;
    cd4e:	70ab      	strb	r3, [r5, #2]
		_usb_d_dev_ep_stall(ep, USB_EP_STALL_SET);
    cd50:	f005 ff3a 	bl	12bc8 <_usb_d_dev_ep_stall>
		_usb_d_dev_ep_stall(ep | USB_EP_DIR, USB_EP_STALL_SET);
    cd54:	4639      	mov	r1, r7
    cd56:	4640      	mov	r0, r8
}
    cd58:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		_usb_d_dev_ep_stall(ep | USB_EP_DIR, USB_EP_STALL_SET);
    cd5c:	f005 bf34 	b.w	12bc8 <_usb_d_dev_ep_stall>
    cd60:	20001c50 	.word	0x20001c50

0000cd64 <usb_d_init>:

int32_t usb_d_init(void)
{
    cd64:	b510      	push	{r4, lr}
	int32_t rc = _usb_d_dev_init();
    cd66:	f005 fc2b 	bl	125c0 <_usb_d_dev_init>
	uint8_t i;
	if (rc < 0) {
    cd6a:	2800      	cmp	r0, #0
    cd6c:	db70      	blt.n	ce50 <usb_d_init+0xec>
		return rc;
	}
	memset(usb_d_inst.ep, 0x00, sizeof(struct usb_d_ep) * CONF_USB_D_NUM_EP_SP);
    cd6e:	4c39      	ldr	r4, [pc, #228]	; (ce54 <usb_d_init+0xf0>)
    cd70:	f44f 72d0 	mov.w	r2, #416	; 0x1a0
    cd74:	2100      	movs	r1, #0
    cd76:	4620      	mov	r0, r4
    cd78:	f011 fb40 	bl	1e3fc <memset>
	for (i = 0; i < CONF_USB_D_NUM_EP_SP; i++) {
		usb_d_inst.ep[i].xfer.hdr.ep    = 0xFF;
		usb_d_inst.ep[i].callbacks.req  = (usb_d_ep_cb_setup_t)usb_d_dummy_cb_false;
    cd7c:	4b36      	ldr	r3, [pc, #216]	; (ce58 <usb_d_init+0xf4>)
		usb_d_inst.ep[i].callbacks.more = (usb_d_ep_cb_more_t)usb_d_dummy_cb_false;
		usb_d_inst.ep[i].callbacks.xfer = (usb_d_ep_cb_xfer_t)usb_d_dummy_cb_false;
	}
	/* Handles device driver endpoint callbacks to build transfer. */
	_usb_d_dev_register_ep_callback(USB_D_DEV_EP_CB_SETUP, (FUNC_PTR)usb_d_cb_trans_setup);
    cd7e:	4937      	ldr	r1, [pc, #220]	; (ce5c <usb_d_init+0xf8>)
		usb_d_inst.ep[i].callbacks.req  = (usb_d_ep_cb_setup_t)usb_d_dummy_cb_false;
    cd80:	6163      	str	r3, [r4, #20]
		usb_d_inst.ep[i].xfer.hdr.ep    = 0xFF;
    cd82:	22ff      	movs	r2, #255	; 0xff
    cd84:	7062      	strb	r2, [r4, #1]
    cd86:	f884 2021 	strb.w	r2, [r4, #33]	; 0x21
    cd8a:	f884 2041 	strb.w	r2, [r4, #65]	; 0x41
    cd8e:	f884 2061 	strb.w	r2, [r4, #97]	; 0x61
    cd92:	f884 2081 	strb.w	r2, [r4, #129]	; 0x81
    cd96:	f884 20a1 	strb.w	r2, [r4, #161]	; 0xa1
    cd9a:	f884 20c1 	strb.w	r2, [r4, #193]	; 0xc1
    cd9e:	f884 20e1 	strb.w	r2, [r4, #225]	; 0xe1
	_usb_d_dev_register_ep_callback(USB_D_DEV_EP_CB_SETUP, (FUNC_PTR)usb_d_cb_trans_setup);
    cda2:	2000      	movs	r0, #0
		usb_d_inst.ep[i].callbacks.more = (usb_d_ep_cb_more_t)usb_d_dummy_cb_false;
    cda4:	61a3      	str	r3, [r4, #24]
		usb_d_inst.ep[i].callbacks.xfer = (usb_d_ep_cb_xfer_t)usb_d_dummy_cb_false;
    cda6:	61e3      	str	r3, [r4, #28]
		usb_d_inst.ep[i].callbacks.req  = (usb_d_ep_cb_setup_t)usb_d_dummy_cb_false;
    cda8:	6363      	str	r3, [r4, #52]	; 0x34
		usb_d_inst.ep[i].callbacks.more = (usb_d_ep_cb_more_t)usb_d_dummy_cb_false;
    cdaa:	63a3      	str	r3, [r4, #56]	; 0x38
		usb_d_inst.ep[i].callbacks.xfer = (usb_d_ep_cb_xfer_t)usb_d_dummy_cb_false;
    cdac:	63e3      	str	r3, [r4, #60]	; 0x3c
		usb_d_inst.ep[i].callbacks.req  = (usb_d_ep_cb_setup_t)usb_d_dummy_cb_false;
    cdae:	6563      	str	r3, [r4, #84]	; 0x54
		usb_d_inst.ep[i].callbacks.more = (usb_d_ep_cb_more_t)usb_d_dummy_cb_false;
    cdb0:	65a3      	str	r3, [r4, #88]	; 0x58
		usb_d_inst.ep[i].callbacks.xfer = (usb_d_ep_cb_xfer_t)usb_d_dummy_cb_false;
    cdb2:	65e3      	str	r3, [r4, #92]	; 0x5c
		usb_d_inst.ep[i].callbacks.req  = (usb_d_ep_cb_setup_t)usb_d_dummy_cb_false;
    cdb4:	6763      	str	r3, [r4, #116]	; 0x74
		usb_d_inst.ep[i].callbacks.more = (usb_d_ep_cb_more_t)usb_d_dummy_cb_false;
    cdb6:	67a3      	str	r3, [r4, #120]	; 0x78
		usb_d_inst.ep[i].callbacks.xfer = (usb_d_ep_cb_xfer_t)usb_d_dummy_cb_false;
    cdb8:	67e3      	str	r3, [r4, #124]	; 0x7c
		usb_d_inst.ep[i].callbacks.req  = (usb_d_ep_cb_setup_t)usb_d_dummy_cb_false;
    cdba:	f8c4 3094 	str.w	r3, [r4, #148]	; 0x94
		usb_d_inst.ep[i].callbacks.more = (usb_d_ep_cb_more_t)usb_d_dummy_cb_false;
    cdbe:	f8c4 3098 	str.w	r3, [r4, #152]	; 0x98
		usb_d_inst.ep[i].callbacks.xfer = (usb_d_ep_cb_xfer_t)usb_d_dummy_cb_false;
    cdc2:	f8c4 309c 	str.w	r3, [r4, #156]	; 0x9c
		usb_d_inst.ep[i].callbacks.req  = (usb_d_ep_cb_setup_t)usb_d_dummy_cb_false;
    cdc6:	f8c4 30b4 	str.w	r3, [r4, #180]	; 0xb4
		usb_d_inst.ep[i].callbacks.more = (usb_d_ep_cb_more_t)usb_d_dummy_cb_false;
    cdca:	f8c4 30b8 	str.w	r3, [r4, #184]	; 0xb8
		usb_d_inst.ep[i].callbacks.xfer = (usb_d_ep_cb_xfer_t)usb_d_dummy_cb_false;
    cdce:	f8c4 30bc 	str.w	r3, [r4, #188]	; 0xbc
		usb_d_inst.ep[i].callbacks.req  = (usb_d_ep_cb_setup_t)usb_d_dummy_cb_false;
    cdd2:	f8c4 30d4 	str.w	r3, [r4, #212]	; 0xd4
		usb_d_inst.ep[i].callbacks.more = (usb_d_ep_cb_more_t)usb_d_dummy_cb_false;
    cdd6:	f8c4 30d8 	str.w	r3, [r4, #216]	; 0xd8
		usb_d_inst.ep[i].callbacks.xfer = (usb_d_ep_cb_xfer_t)usb_d_dummy_cb_false;
    cdda:	f8c4 30dc 	str.w	r3, [r4, #220]	; 0xdc
		usb_d_inst.ep[i].callbacks.req  = (usb_d_ep_cb_setup_t)usb_d_dummy_cb_false;
    cdde:	f8c4 30f4 	str.w	r3, [r4, #244]	; 0xf4
		usb_d_inst.ep[i].callbacks.more = (usb_d_ep_cb_more_t)usb_d_dummy_cb_false;
    cde2:	f8c4 30f8 	str.w	r3, [r4, #248]	; 0xf8
		usb_d_inst.ep[i].callbacks.xfer = (usb_d_ep_cb_xfer_t)usb_d_dummy_cb_false;
    cde6:	f8c4 30fc 	str.w	r3, [r4, #252]	; 0xfc
		usb_d_inst.ep[i].xfer.hdr.ep    = 0xFF;
    cdea:	f884 2101 	strb.w	r2, [r4, #257]	; 0x101
    cdee:	f884 2121 	strb.w	r2, [r4, #289]	; 0x121
    cdf2:	f884 2141 	strb.w	r2, [r4, #321]	; 0x141
    cdf6:	f884 2161 	strb.w	r2, [r4, #353]	; 0x161
    cdfa:	f884 2181 	strb.w	r2, [r4, #385]	; 0x181
		usb_d_inst.ep[i].callbacks.req  = (usb_d_ep_cb_setup_t)usb_d_dummy_cb_false;
    cdfe:	f8c4 3114 	str.w	r3, [r4, #276]	; 0x114
		usb_d_inst.ep[i].callbacks.more = (usb_d_ep_cb_more_t)usb_d_dummy_cb_false;
    ce02:	f8c4 3118 	str.w	r3, [r4, #280]	; 0x118
		usb_d_inst.ep[i].callbacks.xfer = (usb_d_ep_cb_xfer_t)usb_d_dummy_cb_false;
    ce06:	f8c4 311c 	str.w	r3, [r4, #284]	; 0x11c
		usb_d_inst.ep[i].callbacks.req  = (usb_d_ep_cb_setup_t)usb_d_dummy_cb_false;
    ce0a:	f8c4 3134 	str.w	r3, [r4, #308]	; 0x134
		usb_d_inst.ep[i].callbacks.more = (usb_d_ep_cb_more_t)usb_d_dummy_cb_false;
    ce0e:	f8c4 3138 	str.w	r3, [r4, #312]	; 0x138
		usb_d_inst.ep[i].callbacks.xfer = (usb_d_ep_cb_xfer_t)usb_d_dummy_cb_false;
    ce12:	f8c4 313c 	str.w	r3, [r4, #316]	; 0x13c
		usb_d_inst.ep[i].callbacks.req  = (usb_d_ep_cb_setup_t)usb_d_dummy_cb_false;
    ce16:	f8c4 3154 	str.w	r3, [r4, #340]	; 0x154
		usb_d_inst.ep[i].callbacks.more = (usb_d_ep_cb_more_t)usb_d_dummy_cb_false;
    ce1a:	f8c4 3158 	str.w	r3, [r4, #344]	; 0x158
		usb_d_inst.ep[i].callbacks.xfer = (usb_d_ep_cb_xfer_t)usb_d_dummy_cb_false;
    ce1e:	f8c4 315c 	str.w	r3, [r4, #348]	; 0x15c
		usb_d_inst.ep[i].callbacks.req  = (usb_d_ep_cb_setup_t)usb_d_dummy_cb_false;
    ce22:	f8c4 3174 	str.w	r3, [r4, #372]	; 0x174
		usb_d_inst.ep[i].callbacks.more = (usb_d_ep_cb_more_t)usb_d_dummy_cb_false;
    ce26:	f8c4 3178 	str.w	r3, [r4, #376]	; 0x178
		usb_d_inst.ep[i].callbacks.xfer = (usb_d_ep_cb_xfer_t)usb_d_dummy_cb_false;
    ce2a:	f8c4 317c 	str.w	r3, [r4, #380]	; 0x17c
		usb_d_inst.ep[i].callbacks.req  = (usb_d_ep_cb_setup_t)usb_d_dummy_cb_false;
    ce2e:	f8c4 3194 	str.w	r3, [r4, #404]	; 0x194
		usb_d_inst.ep[i].callbacks.more = (usb_d_ep_cb_more_t)usb_d_dummy_cb_false;
    ce32:	f8c4 3198 	str.w	r3, [r4, #408]	; 0x198
		usb_d_inst.ep[i].callbacks.xfer = (usb_d_ep_cb_xfer_t)usb_d_dummy_cb_false;
    ce36:	f8c4 319c 	str.w	r3, [r4, #412]	; 0x19c
	_usb_d_dev_register_ep_callback(USB_D_DEV_EP_CB_SETUP, (FUNC_PTR)usb_d_cb_trans_setup);
    ce3a:	f006 f8b9 	bl	12fb0 <_usb_d_dev_register_ep_callback>
	_usb_d_dev_register_ep_callback(USB_D_DEV_EP_CB_MORE, (FUNC_PTR)usb_d_cb_trans_more);
    ce3e:	4908      	ldr	r1, [pc, #32]	; (ce60 <usb_d_init+0xfc>)
    ce40:	2001      	movs	r0, #1
    ce42:	f006 f8b5 	bl	12fb0 <_usb_d_dev_register_ep_callback>
	_usb_d_dev_register_ep_callback(USB_D_DEV_EP_CB_DONE, (FUNC_PTR)_usb_d_cb_trans_done);
    ce46:	2002      	movs	r0, #2
    ce48:	4906      	ldr	r1, [pc, #24]	; (ce64 <usb_d_init+0x100>)
    ce4a:	f006 f8b1 	bl	12fb0 <_usb_d_dev_register_ep_callback>
	return ERR_NONE;
    ce4e:	2000      	movs	r0, #0
}
    ce50:	bd10      	pop	{r4, pc}
    ce52:	bf00      	nop
    ce54:	20001c50 	.word	0x20001c50
    ce58:	0000cb3d 	.word	0x0000cb3d
    ce5c:	0000ccc1 	.word	0x0000ccc1
    ce60:	0000cb41 	.word	0x0000cb41
    ce64:	0000cb85 	.word	0x0000cb85

0000ce68 <usb_d_register_callback>:
}

void usb_d_register_callback(const enum usb_d_cb_type type, const FUNC_PTR func)
{
	/* Directly uses device driver callback. */
	_usb_d_dev_register_callback(type, func);
    ce68:	f006 b890 	b.w	12f8c <_usb_d_dev_register_callback>

0000ce6c <usb_d_enable>:
}

int32_t usb_d_enable(void)
{
	return _usb_d_dev_enable();
    ce6c:	f005 bc48 	b.w	12700 <_usb_d_dev_enable>

0000ce70 <usb_d_attach>:
	_usb_d_dev_disable();
}

void usb_d_attach(void)
{
	_usb_d_dev_attach();
    ce70:	f005 bc76 	b.w	12760 <_usb_d_dev_attach>

0000ce74 <usb_d_set_address>:
	return _usb_d_dev_get_uframe_n();
}

void usb_d_set_address(const uint8_t addr)
{
	_usb_d_dev_set_address(addr);
    ce74:	f005 bc7e 	b.w	12774 <_usb_d_dev_set_address>

0000ce78 <usb_d_ep0_init>:
{
	_usb_d_dev_send_remotewakeup();
}

int32_t usb_d_ep0_init(const uint8_t max_pkt_size)
{
    ce78:	b570      	push	{r4, r5, r6, lr}
		if (usb_d_inst.ep[i].xfer.hdr.ep == ep) {
    ce7a:	4e25      	ldr	r6, [pc, #148]	; (cf10 <usb_d_ep0_init+0x98>)
    ce7c:	7873      	ldrb	r3, [r6, #1]
    ce7e:	2b00      	cmp	r3, #0
    ce80:	d043      	beq.n	cf0a <usb_d_ep0_init+0x92>
    ce82:	f896 3021 	ldrb.w	r3, [r6, #33]	; 0x21
    ce86:	2b00      	cmp	r3, #0
    ce88:	d03f      	beq.n	cf0a <usb_d_ep0_init+0x92>
    ce8a:	f896 3041 	ldrb.w	r3, [r6, #65]	; 0x41
    ce8e:	2b00      	cmp	r3, #0
    ce90:	d03b      	beq.n	cf0a <usb_d_ep0_init+0x92>
    ce92:	f896 3061 	ldrb.w	r3, [r6, #97]	; 0x61
    ce96:	b3c3      	cbz	r3, cf0a <usb_d_ep0_init+0x92>
    ce98:	f896 3081 	ldrb.w	r3, [r6, #129]	; 0x81
    ce9c:	b3ab      	cbz	r3, cf0a <usb_d_ep0_init+0x92>
    ce9e:	f896 30a1 	ldrb.w	r3, [r6, #161]	; 0xa1
    cea2:	b393      	cbz	r3, cf0a <usb_d_ep0_init+0x92>
    cea4:	f896 30c1 	ldrb.w	r3, [r6, #193]	; 0xc1
    cea8:	b37b      	cbz	r3, cf0a <usb_d_ep0_init+0x92>
    ceaa:	f896 30e1 	ldrb.w	r3, [r6, #225]	; 0xe1
    ceae:	b363      	cbz	r3, cf0a <usb_d_ep0_init+0x92>
    ceb0:	f896 3101 	ldrb.w	r3, [r6, #257]	; 0x101
    ceb4:	b34b      	cbz	r3, cf0a <usb_d_ep0_init+0x92>
    ceb6:	f896 3121 	ldrb.w	r3, [r6, #289]	; 0x121
    ceba:	b333      	cbz	r3, cf0a <usb_d_ep0_init+0x92>
    cebc:	f896 3141 	ldrb.w	r3, [r6, #321]	; 0x141
    cec0:	b31b      	cbz	r3, cf0a <usb_d_ep0_init+0x92>
    cec2:	f896 3161 	ldrb.w	r3, [r6, #353]	; 0x161
    cec6:	b303      	cbz	r3, cf0a <usb_d_ep0_init+0x92>
    cec8:	f896 3181 	ldrb.w	r3, [r6, #385]	; 0x181
    cecc:	b1eb      	cbz	r3, cf0a <usb_d_ep0_init+0x92>
    cece:	4633      	mov	r3, r6
    ced0:	2400      	movs	r4, #0
    ced2:	7859      	ldrb	r1, [r3, #1]
    ced4:	29ff      	cmp	r1, #255	; 0xff
    ced6:	d00a      	beq.n	ceee <usb_d_ep0_init+0x76>
		if (usb_d_inst.ep[i].xfer.hdr.type == USB_EP_XTYPE_CTRL
    ced8:	781d      	ldrb	r5, [r3, #0]
    ceda:	3320      	adds	r3, #32
    cedc:	b90d      	cbnz	r5, cee2 <usb_d_ep0_init+0x6a>
		    && (ep & USB_EP_N_MASK) == usb_d_inst.ep[i].xfer.hdr.ep) {
    cede:	290f      	cmp	r1, #15
    cee0:	d005      	beq.n	ceee <usb_d_ep0_init+0x76>
    cee2:	3401      	adds	r4, #1
	for (i = 0; i < CONF_USB_D_NUM_EP_SP; i++) {
    cee4:	2c0d      	cmp	r4, #13
    cee6:	d1f4      	bne.n	ced2 <usb_d_ep0_init+0x5a>
	if (ep_index >= 0) {
		return -USB_ERR_REDO;
	} else {
		ep_index = _usb_d_find_ep(0xFF);
		if (ep_index < 0) {
			return -USB_ERR_ALLOC_FAIL;
    cee8:	f06f 0014 	mvn.w	r0, #20
    ceec:	bd70      	pop	{r4, r5, r6, pc}
		}
		ept = &usb_d_inst.ep[ep_index];
	}
	rc = _usb_d_dev_ep_init(ep, attr, max_pkt_size);
    ceee:	2100      	movs	r1, #0
    cef0:	4602      	mov	r2, r0
    cef2:	4608      	mov	r0, r1
    cef4:	f005 fc44 	bl	12780 <_usb_d_dev_ep_init>
	if (rc < 0) {
    cef8:	2800      	cmp	r0, #0
    cefa:	db05      	blt.n	cf08 <usb_d_ep0_init+0x90>
		return rc;
	}
	ept->xfer.hdr.ep   = ep;
    cefc:	0164      	lsls	r4, r4, #5
    cefe:	1933      	adds	r3, r6, r4
    cf00:	2000      	movs	r0, #0
    cf02:	7058      	strb	r0, [r3, #1]
	ept->xfer.hdr.type = attr & USB_EP_XTYPE_MASK;
    cf04:	5530      	strb	r0, [r6, r4]
    cf06:	bd70      	pop	{r4, r5, r6, pc}
}
    cf08:	bd70      	pop	{r4, r5, r6, pc}
		return -USB_ERR_REDO;
    cf0a:	f06f 0013 	mvn.w	r0, #19
	return usb_d_ep_init(0, USB_EP_XTYPE_CTRL, max_pkt_size);
    cf0e:	bd70      	pop	{r4, r5, r6, pc}
    cf10:	20001c50 	.word	0x20001c50

0000cf14 <usb_d_ep_init>:
{
    cf14:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    cf16:	4c19      	ldr	r4, [pc, #100]	; (cf7c <usb_d_ep_init+0x68>)
		    && (ep & USB_EP_N_MASK) == usb_d_inst.ep[i].xfer.hdr.ep) {
    cf18:	f000 0c0f 	and.w	ip, r0, #15
    cf1c:	f504 7ed0 	add.w	lr, r4, #416	; 0x1a0
{
    cf20:	4627      	mov	r7, r4
    cf22:	4623      	mov	r3, r4
		if (usb_d_inst.ep[i].xfer.hdr.ep == ep) {
    cf24:	785d      	ldrb	r5, [r3, #1]
    cf26:	42a8      	cmp	r0, r5
    cf28:	d024      	beq.n	cf74 <usb_d_ep_init+0x60>
		if (usb_d_inst.ep[i].xfer.hdr.type == USB_EP_XTYPE_CTRL
    cf2a:	781e      	ldrb	r6, [r3, #0]
    cf2c:	3320      	adds	r3, #32
    cf2e:	b90e      	cbnz	r6, cf34 <usb_d_ep_init+0x20>
		    && (ep & USB_EP_N_MASK) == usb_d_inst.ep[i].xfer.hdr.ep) {
    cf30:	4565      	cmp	r5, ip
    cf32:	d01f      	beq.n	cf74 <usb_d_ep_init+0x60>
	for (i = 0; i < CONF_USB_D_NUM_EP_SP; i++) {
    cf34:	459e      	cmp	lr, r3
    cf36:	d1f5      	bne.n	cf24 <usb_d_ep_init+0x10>
    cf38:	2500      	movs	r5, #0
		if (usb_d_inst.ep[i].xfer.hdr.ep == ep) {
    cf3a:	7863      	ldrb	r3, [r4, #1]
    cf3c:	2bff      	cmp	r3, #255	; 0xff
    cf3e:	d00a      	beq.n	cf56 <usb_d_ep_init+0x42>
		if (usb_d_inst.ep[i].xfer.hdr.type == USB_EP_XTYPE_CTRL
    cf40:	7826      	ldrb	r6, [r4, #0]
    cf42:	3420      	adds	r4, #32
    cf44:	b90e      	cbnz	r6, cf4a <usb_d_ep_init+0x36>
		    && (ep & USB_EP_N_MASK) == usb_d_inst.ep[i].xfer.hdr.ep) {
    cf46:	2b0f      	cmp	r3, #15
    cf48:	d005      	beq.n	cf56 <usb_d_ep_init+0x42>
    cf4a:	3501      	adds	r5, #1
	for (i = 0; i < CONF_USB_D_NUM_EP_SP; i++) {
    cf4c:	2d0d      	cmp	r5, #13
    cf4e:	d1f4      	bne.n	cf3a <usb_d_ep_init+0x26>
			return -USB_ERR_ALLOC_FAIL;
    cf50:	f06f 0014 	mvn.w	r0, #20
    cf54:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    cf56:	460e      	mov	r6, r1
    cf58:	4604      	mov	r4, r0
	rc = _usb_d_dev_ep_init(ep, attr, max_pkt_size);
    cf5a:	f005 fc11 	bl	12780 <_usb_d_dev_ep_init>
	if (rc < 0) {
    cf5e:	2800      	cmp	r0, #0
    cf60:	db07      	blt.n	cf72 <usb_d_ep_init+0x5e>
	ept->xfer.hdr.ep   = ep;
    cf62:	016d      	lsls	r5, r5, #5
    cf64:	197b      	adds	r3, r7, r5
	ept->xfer.hdr.type = attr & USB_EP_XTYPE_MASK;
    cf66:	f006 0603 	and.w	r6, r6, #3
    cf6a:	557e      	strb	r6, [r7, r5]
	ept->xfer.hdr.ep   = ep;
    cf6c:	705c      	strb	r4, [r3, #1]
	return ERR_NONE;
    cf6e:	2000      	movs	r0, #0
    cf70:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
}
    cf72:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		return -USB_ERR_REDO;
    cf74:	f06f 0013 	mvn.w	r0, #19
    cf78:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    cf7a:	bf00      	nop
    cf7c:	20001c50 	.word	0x20001c50

0000cf80 <usb_d_ep_deinit>:

void usb_d_ep_deinit(const uint8_t ep)
{
    cf80:	b570      	push	{r4, r5, r6, lr}
    cf82:	4e0c      	ldr	r6, [pc, #48]	; (cfb4 <usb_d_ep_deinit+0x34>)
		    && (ep & USB_EP_N_MASK) == usb_d_inst.ep[i].xfer.hdr.ep) {
    cf84:	f000 050f 	and.w	r5, r0, #15
    cf88:	4633      	mov	r3, r6
{
    cf8a:	2400      	movs	r4, #0
		if (usb_d_inst.ep[i].xfer.hdr.ep == ep) {
    cf8c:	785a      	ldrb	r2, [r3, #1]
    cf8e:	4290      	cmp	r0, r2
    cf90:	d008      	beq.n	cfa4 <usb_d_ep_deinit+0x24>
		if (usb_d_inst.ep[i].xfer.hdr.type == USB_EP_XTYPE_CTRL
    cf92:	7819      	ldrb	r1, [r3, #0]
    cf94:	3320      	adds	r3, #32
    cf96:	b909      	cbnz	r1, cf9c <usb_d_ep_deinit+0x1c>
		    && (ep & USB_EP_N_MASK) == usb_d_inst.ep[i].xfer.hdr.ep) {
    cf98:	42aa      	cmp	r2, r5
    cf9a:	d003      	beq.n	cfa4 <usb_d_ep_deinit+0x24>
    cf9c:	3401      	adds	r4, #1
	for (i = 0; i < CONF_USB_D_NUM_EP_SP; i++) {
    cf9e:	2c0d      	cmp	r4, #13
    cfa0:	d1f4      	bne.n	cf8c <usb_d_ep_deinit+0xc>
    cfa2:	bd70      	pop	{r4, r5, r6, pc}
	struct usb_d_ep *ept      = &usb_d_inst.ep[ep_index];
	if (ep_index < 0) {
		return;
	}
	_usb_d_dev_ep_deinit(ep);
	ept->xfer.hdr.ep = 0xFF;
    cfa4:	eb06 1444 	add.w	r4, r6, r4, lsl #5
	_usb_d_dev_ep_deinit(ep);
    cfa8:	f005 fc5c 	bl	12864 <_usb_d_dev_ep_deinit>
	ept->xfer.hdr.ep = 0xFF;
    cfac:	23ff      	movs	r3, #255	; 0xff
    cfae:	7063      	strb	r3, [r4, #1]
    cfb0:	bd70      	pop	{r4, r5, r6, pc}
    cfb2:	bf00      	nop
    cfb4:	20001c50 	.word	0x20001c50

0000cfb8 <usb_d_ep_enable>:
}

int32_t usb_d_ep_enable(const uint8_t ep)
{
    cfb8:	b570      	push	{r4, r5, r6, lr}
    cfba:	4d13      	ldr	r5, [pc, #76]	; (d008 <usb_d_ep_enable+0x50>)
		    && (ep & USB_EP_N_MASK) == usb_d_inst.ep[i].xfer.hdr.ep) {
    cfbc:	f000 060f 	and.w	r6, r0, #15
    cfc0:	462b      	mov	r3, r5
{
    cfc2:	2200      	movs	r2, #0
		if (usb_d_inst.ep[i].xfer.hdr.ep == ep) {
    cfc4:	7859      	ldrb	r1, [r3, #1]
    cfc6:	4288      	cmp	r0, r1
    cfc8:	d00a      	beq.n	cfe0 <usb_d_ep_enable+0x28>
		if (usb_d_inst.ep[i].xfer.hdr.type == USB_EP_XTYPE_CTRL
    cfca:	781c      	ldrb	r4, [r3, #0]
    cfcc:	3320      	adds	r3, #32
    cfce:	b90c      	cbnz	r4, cfd4 <usb_d_ep_enable+0x1c>
		    && (ep & USB_EP_N_MASK) == usb_d_inst.ep[i].xfer.hdr.ep) {
    cfd0:	42b1      	cmp	r1, r6
    cfd2:	d015      	beq.n	d000 <usb_d_ep_enable+0x48>
    cfd4:	3201      	adds	r2, #1
	for (i = 0; i < CONF_USB_D_NUM_EP_SP; i++) {
    cfd6:	2a0d      	cmp	r2, #13
    cfd8:	d1f4      	bne.n	cfc4 <usb_d_ep_enable+0xc>
	int8_t           ep_index = _usb_d_find_ep(ep);
	struct usb_d_ep *ept      = &usb_d_inst.ep[ep_index];
	int32_t          rc;
	if (ep_index < 0) {
		return -USB_ERR_PARAM;
    cfda:	f06f 0011 	mvn.w	r0, #17
    cfde:	bd70      	pop	{r4, r5, r6, pc}
	}
	ept->xfer.hdr.state = (ept->xfer.hdr.type == USB_EP_XTYPE_CTRL) ? USB_EP_S_X_SETUP : USB_EP_S_IDLE;
    cfe0:	0152      	lsls	r2, r2, #5
    cfe2:	5cab      	ldrb	r3, [r5, r2]
    cfe4:	2b00      	cmp	r3, #0
    cfe6:	bf14      	ite	ne
    cfe8:	2301      	movne	r3, #1
    cfea:	2302      	moveq	r3, #2
    cfec:	4415      	add	r5, r2
    cfee:	70ab      	strb	r3, [r5, #2]
	rc                  = _usb_d_dev_ep_enable(ep);
    cff0:	f005 fcca 	bl	12988 <_usb_d_dev_ep_enable>
	if (rc < 0) {
    cff4:	2800      	cmp	r0, #0
    cff6:	db00      	blt.n	cffa <usb_d_ep_enable+0x42>
		ept->xfer.hdr.state = USB_EP_S_DISABLED;
	}
	return rc;
}
    cff8:	bd70      	pop	{r4, r5, r6, pc}
		ept->xfer.hdr.state = USB_EP_S_DISABLED;
    cffa:	2300      	movs	r3, #0
    cffc:	70ab      	strb	r3, [r5, #2]
    cffe:	bd70      	pop	{r4, r5, r6, pc}
    d000:	0152      	lsls	r2, r2, #5
	ept->xfer.hdr.state = (ept->xfer.hdr.type == USB_EP_XTYPE_CTRL) ? USB_EP_S_X_SETUP : USB_EP_S_IDLE;
    d002:	2302      	movs	r3, #2
    d004:	e7f2      	b.n	cfec <usb_d_ep_enable+0x34>
    d006:	bf00      	nop
    d008:	20001c50 	.word	0x20001c50

0000d00c <usb_d_ep_transfer>:
	}
	return usb_d_inst.ep[ep_index].xfer.req;
}

int32_t usb_d_ep_transfer(const struct usb_d_transfer *xfer)
{
    d00c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    d010:	f8df 811c 	ldr.w	r8, [pc, #284]	; d130 <usb_d_ep_transfer+0x124>
	int8_t                ep_index = _usb_d_find_ep(xfer->ep);
    d014:	7a05      	ldrb	r5, [r0, #8]
{
    d016:	b087      	sub	sp, #28
    d018:	4643      	mov	r3, r8
		    && (ep & USB_EP_N_MASK) == usb_d_inst.ep[i].xfer.hdr.ep) {
    d01a:	f005 070f 	and.w	r7, r5, #15
	int8_t                ep_index = _usb_d_find_ep(xfer->ep);
    d01e:	2200      	movs	r2, #0
		if (usb_d_inst.ep[i].xfer.hdr.ep == ep) {
    d020:	7859      	ldrb	r1, [r3, #1]
    d022:	428d      	cmp	r5, r1
    d024:	d00c      	beq.n	d040 <usb_d_ep_transfer+0x34>
		if (usb_d_inst.ep[i].xfer.hdr.type == USB_EP_XTYPE_CTRL
    d026:	781c      	ldrb	r4, [r3, #0]
    d028:	3320      	adds	r3, #32
    d02a:	b90c      	cbnz	r4, d030 <usb_d_ep_transfer+0x24>
		    && (ep & USB_EP_N_MASK) == usb_d_inst.ep[i].xfer.hdr.ep) {
    d02c:	42b9      	cmp	r1, r7
    d02e:	d007      	beq.n	d040 <usb_d_ep_transfer+0x34>
    d030:	3201      	adds	r2, #1
	for (i = 0; i < CONF_USB_D_NUM_EP_SP; i++) {
    d032:	2a0d      	cmp	r2, #13
    d034:	d1f4      	bne.n	d020 <usb_d_ep_transfer+0x14>
	int32_t               rc;
	volatile uint8_t      state;
	volatile hal_atomic_t flags;

	if (ep_index < 0) {
		return -USB_ERR_PARAM;
    d036:	f06f 0011 	mvn.w	r0, #17
		}
	}

	rc = _usb_d_trans(xfer->ep, dir, xfer->buf, len, zlp);
	return rc;
}
    d03a:	b007      	add	sp, #28
    d03c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	state = ept->xfer.hdr.state;
    d040:	0154      	lsls	r4, r2, #5
    d042:	4606      	mov	r6, r0
    d044:	eb08 0b04 	add.w	fp, r8, r4
	atomic_enter_critical(&flags);
    d048:	a802      	add	r0, sp, #8
	bool                  dir = USB_EP_GET_DIR(xfer->ep), zlp = xfer->zlp;
    d04a:	f896 a009 	ldrb.w	sl, [r6, #9]
	uint32_t              len = xfer->size;
    d04e:	f8d6 9004 	ldr.w	r9, [r6, #4]
	atomic_enter_critical(&flags);
    d052:	f005 ffcb 	bl	12fec <atomic_enter_critical>
	state = ept->xfer.hdr.state;
    d056:	f89b 3002 	ldrb.w	r3, [fp, #2]
    d05a:	f88d 3007 	strb.w	r3, [sp, #7]
	if (state == USB_EP_S_IDLE) {
    d05e:	f89d 7007 	ldrb.w	r7, [sp, #7]
    d062:	b2ff      	uxtb	r7, r7
    d064:	2f01      	cmp	r7, #1
    d066:	d011      	beq.n	d08c <usb_d_ep_transfer+0x80>
		atomic_leave_critical(&flags);
    d068:	a802      	add	r0, sp, #8
    d06a:	f005 ffc7 	bl	12ffc <atomic_leave_critical>
		switch (state) {
    d06e:	f89d 3007 	ldrb.w	r3, [sp, #7]
    d072:	b2db      	uxtb	r3, r3
    d074:	2b05      	cmp	r3, #5
    d076:	d040      	beq.n	d0fa <usb_d_ep_transfer+0xee>
    d078:	2b06      	cmp	r3, #6
    d07a:	d022      	beq.n	d0c2 <usb_d_ep_transfer+0xb6>
			return USB_BUSY;
    d07c:	2b00      	cmp	r3, #0
    d07e:	bf0c      	ite	eq
    d080:	f06f 0012 	mvneq.w	r0, #18
    d084:	2001      	movne	r0, #1
}
    d086:	b007      	add	sp, #28
    d088:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		ept->xfer.hdr.state = USB_EP_S_X_DATA;
    d08c:	2303      	movs	r3, #3
		atomic_leave_critical(&flags);
    d08e:	a802      	add	r0, sp, #8
		ept->xfer.hdr.state = USB_EP_S_X_DATA;
    d090:	f88b 3002 	strb.w	r3, [fp, #2]
		atomic_leave_critical(&flags);
    d094:	f005 ffb2 	bl	12ffc <atomic_leave_critical>
	if (ept->xfer.hdr.type == USB_EP_XTYPE_CTRL) {
    d098:	f818 2004 	ldrb.w	r2, [r8, r4]
    d09c:	b9b2      	cbnz	r2, d0cc <usb_d_ep_transfer+0xc0>
		uint16_t req_len = USB_GET_wLength(ept->xfer.req);
    d09e:	f89b 1013 	ldrb.w	r1, [fp, #19]
    d0a2:	f89b 3012 	ldrb.w	r3, [fp, #18]
    d0a6:	eb03 2301 	add.w	r3, r3, r1, lsl #8
    d0aa:	b29b      	uxth	r3, r3
		if (req_len == 0) {
    d0ac:	bb4b      	cbnz	r3, d102 <usb_d_ep_transfer+0xf6>
			ept->xfer.hdr.state = USB_EP_S_X_STATUS;
    d0ae:	2204      	movs	r2, #4
    d0b0:	f88b 2002 	strb.w	r2, [fp, #2]
	struct usb_d_transfer trans
    d0b4:	9304      	str	r3, [sp, #16]
    d0b6:	6832      	ldr	r2, [r6, #0]
	rc = _usb_d_trans(xfer->ep, dir, xfer->buf, len, zlp);
    d0b8:	7a33      	ldrb	r3, [r6, #8]
	struct usb_d_transfer trans
    d0ba:	9203      	str	r2, [sp, #12]
    d0bc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
    d0c0:	e011      	b.n	d0e6 <usb_d_ep_transfer+0xda>
			return -USB_ERROR;
    d0c2:	f06f 000f 	mvn.w	r0, #15
}
    d0c6:	b007      	add	sp, #28
    d0c8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	rc = _usb_d_trans(xfer->ep, dir, xfer->buf, len, zlp);
    d0cc:	f11a 0700 	adds.w	r7, sl, #0
	struct usb_d_transfer trans
    d0d0:	6833      	ldr	r3, [r6, #0]
    d0d2:	9303      	str	r3, [sp, #12]
	rc = _usb_d_trans(xfer->ep, dir, xfer->buf, len, zlp);
    d0d4:	bf18      	it	ne
    d0d6:	2701      	movne	r7, #1
	struct usb_d_transfer trans
    d0d8:	062a      	lsls	r2, r5, #24
    d0da:	f8cd 9010 	str.w	r9, [sp, #16]
	rc = _usb_d_trans(xfer->ep, dir, xfer->buf, len, zlp);
    d0de:	7a33      	ldrb	r3, [r6, #8]
	struct usb_d_transfer trans
    d0e0:	d4ec      	bmi.n	d0bc <usb_d_ep_transfer+0xb0>
    d0e2:	f003 030f 	and.w	r3, r3, #15
	return _usb_d_dev_ep_trans(&trans);
    d0e6:	a803      	add	r0, sp, #12
	struct usb_d_transfer trans
    d0e8:	f88d 3014 	strb.w	r3, [sp, #20]
    d0ec:	f88d 7015 	strb.w	r7, [sp, #21]
	return _usb_d_dev_ep_trans(&trans);
    d0f0:	f005 fe26 	bl	12d40 <_usb_d_dev_ep_trans>
}
    d0f4:	b007      	add	sp, #28
    d0f6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			return USB_HALTED;
    d0fa:	2002      	movs	r0, #2
}
    d0fc:	b007      	add	sp, #28
    d0fe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			if (dir) {
    d102:	f99b 100c 	ldrsb.w	r1, [fp, #12]
    d106:	4599      	cmp	r9, r3
    d108:	464f      	mov	r7, r9
    d10a:	bf28      	it	cs
    d10c:	461f      	movcs	r7, r3
    d10e:	2900      	cmp	r1, #0
    d110:	db05      	blt.n	d11e <usb_d_ep_transfer+0x112>
	struct usb_d_transfer trans
    d112:	6833      	ldr	r3, [r6, #0]
    d114:	9704      	str	r7, [sp, #16]
    d116:	9303      	str	r3, [sp, #12]
	rc = _usb_d_trans(xfer->ep, dir, xfer->buf, len, zlp);
    d118:	4617      	mov	r7, r2
    d11a:	7a33      	ldrb	r3, [r6, #8]
    d11c:	e7e1      	b.n	d0e2 <usb_d_ep_transfer+0xd6>
    d11e:	42bb      	cmp	r3, r7
	struct usb_d_transfer trans
    d120:	6832      	ldr	r2, [r6, #0]
    d122:	9704      	str	r7, [sp, #16]
    d124:	9203      	str	r2, [sp, #12]
	rc = _usb_d_trans(xfer->ep, dir, xfer->buf, len, zlp);
    d126:	bf94      	ite	ls
    d128:	2700      	movls	r7, #0
    d12a:	2701      	movhi	r7, #1
    d12c:	7a33      	ldrb	r3, [r6, #8]
    d12e:	e7c5      	b.n	d0bc <usb_d_ep_transfer+0xb0>
    d130:	20001c50 	.word	0x20001c50

0000d134 <usb_d_ep_abort>:

void usb_d_ep_abort(const uint8_t ep)
{
    d134:	b570      	push	{r4, r5, r6, lr}
    d136:	4e0d      	ldr	r6, [pc, #52]	; (d16c <usb_d_ep_abort+0x38>)
		    && (ep & USB_EP_N_MASK) == usb_d_inst.ep[i].xfer.hdr.ep) {
    d138:	f000 050f 	and.w	r5, r0, #15
    d13c:	4633      	mov	r3, r6
{
    d13e:	2400      	movs	r4, #0
		if (usb_d_inst.ep[i].xfer.hdr.ep == ep) {
    d140:	785a      	ldrb	r2, [r3, #1]
    d142:	4290      	cmp	r0, r2
    d144:	d008      	beq.n	d158 <usb_d_ep_abort+0x24>
		if (usb_d_inst.ep[i].xfer.hdr.type == USB_EP_XTYPE_CTRL
    d146:	7819      	ldrb	r1, [r3, #0]
    d148:	3320      	adds	r3, #32
    d14a:	b909      	cbnz	r1, d150 <usb_d_ep_abort+0x1c>
		    && (ep & USB_EP_N_MASK) == usb_d_inst.ep[i].xfer.hdr.ep) {
    d14c:	42aa      	cmp	r2, r5
    d14e:	d003      	beq.n	d158 <usb_d_ep_abort+0x24>
    d150:	3401      	adds	r4, #1
	for (i = 0; i < CONF_USB_D_NUM_EP_SP; i++) {
    d152:	2c0d      	cmp	r4, #13
    d154:	d1f4      	bne.n	d140 <usb_d_ep_abort+0xc>
    d156:	bd70      	pop	{r4, r5, r6, pc}
	struct usb_d_ep *ept      = &usb_d_inst.ep[ep_index];
	if (ep_index < 0) {
		return;
	}
	_usb_d_dev_ep_abort(ep);
	ept->xfer.hdr.state  = USB_EP_S_IDLE;
    d158:	eb06 1444 	add.w	r4, r6, r4, lsl #5
	_usb_d_dev_ep_abort(ep);
    d15c:	f005 febe 	bl	12edc <_usb_d_dev_ep_abort>
	ept->xfer.hdr.state  = USB_EP_S_IDLE;
    d160:	2201      	movs	r2, #1
	ept->xfer.hdr.status = USB_XFER_ABORT;
    d162:	2304      	movs	r3, #4
	ept->xfer.hdr.state  = USB_EP_S_IDLE;
    d164:	70a2      	strb	r2, [r4, #2]
	ept->xfer.hdr.status = USB_XFER_ABORT;
    d166:	70e3      	strb	r3, [r4, #3]
    d168:	bd70      	pop	{r4, r5, r6, pc}
    d16a:	bf00      	nop
    d16c:	20001c50 	.word	0x20001c50

0000d170 <usb_d_ep_halt>:
	}
	return ERR_NONE;
}

int32_t usb_d_ep_halt(const uint8_t ep, const enum usb_ep_halt_ctrl ctrl)
{
    d170:	b570      	push	{r4, r5, r6, lr}
	if (ctrl == USB_EP_HALT_CLR) {
    d172:	460c      	mov	r4, r1
    d174:	b131      	cbz	r1, d184 <usb_d_ep_halt+0x14>
		return _usb_d_ep_halt_clr(ep);
	} else if (ctrl == USB_EP_HALT_SET) {
    d176:	2901      	cmp	r1, #1
		return _usb_d_dev_ep_stall(ep, USB_EP_STALL_SET);
	} else {
		return _usb_d_dev_ep_stall(ep, USB_EP_STALL_GET);
    d178:	bf18      	it	ne
    d17a:	2102      	movne	r1, #2
	}
}
    d17c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		return _usb_d_dev_ep_stall(ep, USB_EP_STALL_GET);
    d180:	f005 bd22 	b.w	12bc8 <_usb_d_dev_ep_stall>
    d184:	4e15      	ldr	r6, [pc, #84]	; (d1dc <usb_d_ep_halt+0x6c>)
    d186:	4605      	mov	r5, r0
    d188:	4633      	mov	r3, r6
		    && (ep & USB_EP_N_MASK) == usb_d_inst.ep[i].xfer.hdr.ep) {
    d18a:	f000 000f 	and.w	r0, r0, #15
		if (usb_d_inst.ep[i].xfer.hdr.ep == ep) {
    d18e:	785a      	ldrb	r2, [r3, #1]
    d190:	4295      	cmp	r5, r2
    d192:	d00a      	beq.n	d1aa <usb_d_ep_halt+0x3a>
		if (usb_d_inst.ep[i].xfer.hdr.type == USB_EP_XTYPE_CTRL
    d194:	7819      	ldrb	r1, [r3, #0]
    d196:	3320      	adds	r3, #32
    d198:	b909      	cbnz	r1, d19e <usb_d_ep_halt+0x2e>
		    && (ep & USB_EP_N_MASK) == usb_d_inst.ep[i].xfer.hdr.ep) {
    d19a:	4282      	cmp	r2, r0
    d19c:	d005      	beq.n	d1aa <usb_d_ep_halt+0x3a>
    d19e:	3401      	adds	r4, #1
	for (i = 0; i < CONF_USB_D_NUM_EP_SP; i++) {
    d1a0:	2c0d      	cmp	r4, #13
    d1a2:	d1f4      	bne.n	d18e <usb_d_ep_halt+0x1e>
		return -USB_ERR_PARAM;
    d1a4:	f06f 0011 	mvn.w	r0, #17
    d1a8:	bd70      	pop	{r4, r5, r6, pc}
	if (_usb_d_dev_ep_stall(ep, USB_EP_STALL_GET)) {
    d1aa:	2102      	movs	r1, #2
    d1ac:	4628      	mov	r0, r5
    d1ae:	f005 fd0b 	bl	12bc8 <_usb_d_dev_ep_stall>
    d1b2:	b900      	cbnz	r0, d1b6 <usb_d_ep_halt+0x46>
}
    d1b4:	bd70      	pop	{r4, r5, r6, pc}
		rc = _usb_d_dev_ep_stall(ep, USB_EP_STALL_CLR);
    d1b6:	2100      	movs	r1, #0
    d1b8:	4628      	mov	r0, r5
    d1ba:	f005 fd05 	bl	12bc8 <_usb_d_dev_ep_stall>
		if (rc < 0) {
    d1be:	2800      	cmp	r0, #0
    d1c0:	dbf8      	blt.n	d1b4 <usb_d_ep_halt+0x44>
		ept->xfer.hdr.state  = USB_EP_S_IDLE;
    d1c2:	eb06 1444 	add.w	r4, r6, r4, lsl #5
		ept->xfer.hdr.status = USB_XFER_UNHALT;
    d1c6:	2103      	movs	r1, #3
		ept->xfer.hdr.state  = USB_EP_S_IDLE;
    d1c8:	2301      	movs	r3, #1
    d1ca:	70a3      	strb	r3, [r4, #2]
		ept->callbacks.xfer(ep, USB_XFER_UNHALT, NULL);
    d1cc:	4628      	mov	r0, r5
		ept->xfer.hdr.status = USB_XFER_UNHALT;
    d1ce:	70e1      	strb	r1, [r4, #3]
		ept->callbacks.xfer(ep, USB_XFER_UNHALT, NULL);
    d1d0:	69e3      	ldr	r3, [r4, #28]
    d1d2:	2200      	movs	r2, #0
    d1d4:	4798      	blx	r3
	return ERR_NONE;
    d1d6:	2000      	movs	r0, #0
    d1d8:	bd70      	pop	{r4, r5, r6, pc}
    d1da:	bf00      	nop
    d1dc:	20001c50 	.word	0x20001c50

0000d1e0 <usb_d_ep_register_callback>:

void usb_d_ep_register_callback(const uint8_t ep, const enum usb_d_ep_cb_type type, const FUNC_PTR func)
{
    d1e0:	b5f0      	push	{r4, r5, r6, r7, lr}
    d1e2:	f8df e054 	ldr.w	lr, [pc, #84]	; d238 <usb_d_ep_register_callback+0x58>
		    && (ep & USB_EP_N_MASK) == usb_d_inst.ep[i].xfer.hdr.ep) {
    d1e6:	f000 070f 	and.w	r7, r0, #15
    d1ea:	4673      	mov	r3, lr
{
    d1ec:	2400      	movs	r4, #0
		if (usb_d_inst.ep[i].xfer.hdr.ep == ep) {
    d1ee:	785d      	ldrb	r5, [r3, #1]
    d1f0:	42a8      	cmp	r0, r5
    d1f2:	d008      	beq.n	d206 <usb_d_ep_register_callback+0x26>
		if (usb_d_inst.ep[i].xfer.hdr.type == USB_EP_XTYPE_CTRL
    d1f4:	781e      	ldrb	r6, [r3, #0]
    d1f6:	3320      	adds	r3, #32
    d1f8:	b90e      	cbnz	r6, d1fe <usb_d_ep_register_callback+0x1e>
		    && (ep & USB_EP_N_MASK) == usb_d_inst.ep[i].xfer.hdr.ep) {
    d1fa:	42bd      	cmp	r5, r7
    d1fc:	d003      	beq.n	d206 <usb_d_ep_register_callback+0x26>
    d1fe:	3401      	adds	r4, #1
	for (i = 0; i < CONF_USB_D_NUM_EP_SP; i++) {
    d200:	2c0d      	cmp	r4, #13
    d202:	d1f4      	bne.n	d1ee <usb_d_ep_register_callback+0xe>
    d204:	bdf0      	pop	{r4, r5, r6, r7, pc}
	int8_t           ep_index = _usb_d_find_ep(ep);
	struct usb_d_ep *ept      = &usb_d_inst.ep[ep_index];
	FUNC_PTR         f        = func ? (FUNC_PTR)func : (FUNC_PTR)usb_d_dummy_cb_false;
    d206:	4b0b      	ldr	r3, [pc, #44]	; (d234 <usb_d_ep_register_callback+0x54>)
    d208:	2a00      	cmp	r2, #0
    d20a:	bf08      	it	eq
    d20c:	461a      	moveq	r2, r3
	if (ep_index < 0) {
		return;
	}
	switch (type) {
    d20e:	2901      	cmp	r1, #1
    d210:	d003      	beq.n	d21a <usb_d_ep_register_callback+0x3a>
    d212:	d30a      	bcc.n	d22a <usb_d_ep_register_callback+0x4a>
    d214:	2902      	cmp	r1, #2
    d216:	d004      	beq.n	d222 <usb_d_ep_register_callback+0x42>
    d218:	bdf0      	pop	{r4, r5, r6, r7, pc}
	case USB_D_EP_CB_SETUP:
		ept->callbacks.req = (usb_d_ep_cb_setup_t)f;
		break;
	case USB_D_EP_CB_MORE:
		ept->callbacks.more = (usb_d_ep_cb_more_t)f;
    d21a:	eb0e 1444 	add.w	r4, lr, r4, lsl #5
    d21e:	61a2      	str	r2, [r4, #24]
		break;
    d220:	bdf0      	pop	{r4, r5, r6, r7, pc}
	case USB_D_EP_CB_XFER:
		ept->callbacks.xfer = (usb_d_ep_cb_xfer_t)f;
    d222:	eb0e 1444 	add.w	r4, lr, r4, lsl #5
    d226:	61e2      	str	r2, [r4, #28]
    d228:	bdf0      	pop	{r4, r5, r6, r7, pc}
		ept->callbacks.req = (usb_d_ep_cb_setup_t)f;
    d22a:	eb0e 1444 	add.w	r4, lr, r4, lsl #5
    d22e:	6162      	str	r2, [r4, #20]
		break;
    d230:	bdf0      	pop	{r4, r5, r6, r7, pc}
    d232:	bf00      	nop
    d234:	0000cb3d 	.word	0x0000cb3d
    d238:	20001c50 	.word	0x20001c50

0000d23c <assert>:
/**
 * \brief Assert function
 */
void assert(const bool condition, const char *const file, const int line)
{
	if (!(condition)) {
    d23c:	b900      	cbnz	r0, d240 <assert+0x4>
		__asm("BKPT #0");
    d23e:	be00      	bkpt	0x0000
    d240:	4770      	bx	lr
    d242:	bf00      	nop

0000d244 <list_insert_at_end>:

/**
 * \brief Insert an element at list end
 */
void list_insert_at_end(struct list_descriptor *const list, void *const element)
{
    d244:	b570      	push	{r4, r5, r6, lr}
	struct list_element *it = list->head;
    d246:	6804      	ldr	r4, [r0, #0]
{
    d248:	4606      	mov	r6, r0
    d24a:	460d      	mov	r5, r1
	for (it = list->head; it; it = it->next) {
    d24c:	b144      	cbz	r4, d260 <list_insert_at_end+0x1c>
		if (it == element) {
    d24e:	428c      	cmp	r4, r1
    d250:	d015      	beq.n	d27e <list_insert_at_end+0x3a>
    d252:	4623      	mov	r3, r4
    d254:	e001      	b.n	d25a <list_insert_at_end+0x16>
    d256:	429d      	cmp	r5, r3
    d258:	d011      	beq.n	d27e <list_insert_at_end+0x3a>
	for (it = list->head; it; it = it->next) {
    d25a:	681b      	ldr	r3, [r3, #0]
    d25c:	2b00      	cmp	r3, #0
    d25e:	d1fa      	bne.n	d256 <list_insert_at_end+0x12>
    d260:	2001      	movs	r0, #1

	ASSERT(!is_list_element(list, element));
    d262:	224f      	movs	r2, #79	; 0x4f
    d264:	4908      	ldr	r1, [pc, #32]	; (d288 <list_insert_at_end+0x44>)
    d266:	f7ff ffe9 	bl	d23c <assert>

	if (!list->head) {
    d26a:	6833      	ldr	r3, [r6, #0]
    d26c:	b90b      	cbnz	r3, d272 <list_insert_at_end+0x2e>
    d26e:	e008      	b.n	d282 <list_insert_at_end+0x3e>
    d270:	461c      	mov	r4, r3
		list->head                             = (struct list_element *)element;
		((struct list_element *)element)->next = NULL;
		return;
	}

	while (it->next) {
    d272:	6823      	ldr	r3, [r4, #0]
    d274:	2b00      	cmp	r3, #0
    d276:	d1fb      	bne.n	d270 <list_insert_at_end+0x2c>
		it = it->next;
	}
	it->next                               = (struct list_element *)element;
    d278:	6025      	str	r5, [r4, #0]
	((struct list_element *)element)->next = NULL;
    d27a:	602b      	str	r3, [r5, #0]
    d27c:	bd70      	pop	{r4, r5, r6, pc}
		if (it == element) {
    d27e:	2000      	movs	r0, #0
    d280:	e7ef      	b.n	d262 <list_insert_at_end+0x1e>
		list->head                             = (struct list_element *)element;
    d282:	6035      	str	r5, [r6, #0]
		((struct list_element *)element)->next = NULL;
    d284:	602b      	str	r3, [r5, #0]
		return;
    d286:	bd70      	pop	{r4, r5, r6, pc}
    d288:	000231e0 	.word	0x000231e0

0000d28c <_ZN9ClearCore10AdcManager8InstanceEv>:
    while (ADC1->STATUS.bit.ADCBUSY) {
        continue;
    }
}

AdcManager &AdcManager::Instance() {
    d28c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    static AdcManager *instance = new AdcManager();
    d28e:	4d1f      	ldr	r5, [pc, #124]	; (d30c <_ZN9ClearCore10AdcManager8InstanceEv+0x80>)
    d290:	682c      	ldr	r4, [r5, #0]
    d292:	f014 0401 	ands.w	r4, r4, #1
    d296:	d002      	beq.n	d29e <_ZN9ClearCore10AdcManager8InstanceEv+0x12>
    d298:	4b1d      	ldr	r3, [pc, #116]	; (d310 <_ZN9ClearCore10AdcManager8InstanceEv+0x84>)
    d29a:	6818      	ldr	r0, [r3, #0]
    d29c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    d29e:	2074      	movs	r0, #116	; 0x74
    d2a0:	f006 f826 	bl	132f0 <_Znwj>
    d2a4:	4e1a      	ldr	r6, [pc, #104]	; (d310 <_ZN9ClearCore10AdcManager8InstanceEv+0x84>)
      m_shiftRegSnapshot(UINT32_MAX),
      m_shiftRegPending(UINT32_MAX),
      m_AdcResolution(ADC_RESOLUTION_DEFAULT),
      m_AdcResPending(ADC_RESOLUTION_DEFAULT),
      m_AdcTimeoutLimit(ADC_TIMEOUT_DEFAULT),
      m_AdcBusyCount(0) {}
    d2a6:	6004      	str	r4, [r0, #0]
    static AdcManager *instance = new AdcManager();
    d2a8:	4603      	mov	r3, r0
      m_AdcBusyCount(0) {}
    d2aa:	210c      	movs	r1, #12
    d2ac:	f04f 30ff 	mov.w	r0, #4294967295
    d2b0:	2703      	movs	r7, #3
    static AdcManager *instance = new AdcManager();
    d2b2:	2201      	movs	r2, #1
      m_AdcBusyCount(0) {}
    d2b4:	605c      	str	r4, [r3, #4]
    d2b6:	6658      	str	r0, [r3, #100]	; 0x64
    d2b8:	609c      	str	r4, [r3, #8]
    d2ba:	6698      	str	r0, [r3, #104]	; 0x68
    d2bc:	60dc      	str	r4, [r3, #12]
///     The DSP efficient form is:
///            = input - K*input + K*output
//
class Iir16 {
public:
    Iir16(void) : m_tc(0), m_z(0) {};
    d2be:	841c      	strh	r4, [r3, #32]
    d2c0:	611c      	str	r4, [r3, #16]
    d2c2:	625c      	str	r4, [r3, #36]	; 0x24
    d2c4:	615c      	str	r4, [r3, #20]
    d2c6:	851c      	strh	r4, [r3, #40]	; 0x28
    d2c8:	619c      	str	r4, [r3, #24]
    d2ca:	62dc      	str	r4, [r3, #44]	; 0x2c
    d2cc:	61dc      	str	r4, [r3, #28]
    d2ce:	861c      	strh	r4, [r3, #48]	; 0x30
    d2d0:	635c      	str	r4, [r3, #52]	; 0x34
    d2d2:	871c      	strh	r4, [r3, #56]	; 0x38
    d2d4:	63dc      	str	r4, [r3, #60]	; 0x3c
    d2d6:	f8a3 4040 	strh.w	r4, [r3, #64]	; 0x40
    d2da:	645c      	str	r4, [r3, #68]	; 0x44
    d2dc:	f8a3 4048 	strh.w	r4, [r3, #72]	; 0x48
    d2e0:	64dc      	str	r4, [r3, #76]	; 0x4c
    d2e2:	f8a3 4050 	strh.w	r4, [r3, #80]	; 0x50
    d2e6:	655c      	str	r4, [r3, #84]	; 0x54
    d2e8:	f8a3 4058 	strh.w	r4, [r3, #88]	; 0x58
    d2ec:	65dc      	str	r4, [r3, #92]	; 0x5c
    d2ee:	f883 4060 	strb.w	r4, [r3, #96]	; 0x60
    d2f2:	f883 4061 	strb.w	r4, [r3, #97]	; 0x61
    d2f6:	671c      	str	r4, [r3, #112]	; 0x70
    d2f8:	f883 706e 	strb.w	r7, [r3, #110]	; 0x6e
    d2fc:	f883 106c 	strb.w	r1, [r3, #108]	; 0x6c
    d300:	f883 106d 	strb.w	r1, [r3, #109]	; 0x6d
    d304:	4618      	mov	r0, r3
    static AdcManager *instance = new AdcManager();
    d306:	6033      	str	r3, [r6, #0]
    d308:	602a      	str	r2, [r5, #0]
}
    d30a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    d30c:	20001df0 	.word	0x20001df0
    d310:	20001e28 	.word	0x20001e28

0000d314 <_ZN9ClearCore10AdcManager10InitializeEv>:

/**
    Initialize the ADC to power-up state.
**/
void AdcManager::Initialize() {
    d314:	b5f0      	push	{r4, r5, r6, r7, lr}
    // Configure internal analog inputs: Sdrvr2, Sdrvr3, VBus, 5V Ob monitor
    const uint8_t INTERNAL_ADC_INPUTS = 4;
    const PeripheralRoute *adcsToSetup[INTERNAL_ADC_INPUTS] = {
        &_5VOB_MON, &Vsupply_MON_IO_4and5_RST,
        &Sdrvr2_iMon, &Sdrvr3_iMon
    };
    d316:	4bbd      	ldr	r3, [pc, #756]	; (d60c <_ZN9ClearCore10AdcManager10InitializeEv+0x2f8>)
void AdcManager::Initialize() {
    d318:	4605      	mov	r5, r0
    };
    d31a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
void AdcManager::Initialize() {
    d31c:	b085      	sub	sp, #20
    };
    d31e:	ac04      	add	r4, sp, #16
    d320:	e904 000f 	stmdb	r4, {r0, r1, r2, r3}
    m_AdcResolution = ADC_RESOLUTION_DEFAULT;
    d324:	210c      	movs	r1, #12

    for (uint8_t i = 0; i < INTERNAL_ADC_INPUTS; i++) {
        const PeripheralRoute *prPtr = adcsToSetup[i];
    d326:	9800      	ldr	r0, [sp, #0]
    m_AdcResolution = ADC_RESOLUTION_DEFAULT;
    d328:	f885 106c 	strb.w	r1, [r5, #108]	; 0x6c
    m_AdcTimeoutLimit = ADC_TIMEOUT_DEFAULT;
    d32c:	2303      	movs	r3, #3
    d32e:	f885 306e 	strb.w	r3, [r5, #110]	; 0x6e
    m_AdcResPending = ADC_RESOLUTION_DEFAULT;
    d332:	f885 106d 	strb.w	r1, [r5, #109]	; 0x6d
        return m_tc;
    };

    void TcSamples(uint16_t riseSamples99pct) {
        float tcTemp = powf(.01, 1. / riseSamples99pct) * 32768 + 0.5;
        m_tc = (tcTemp < INT16_MAX) ? tcTemp : INT16_MAX;
    d336:	f245 03c3 	movw	r3, #20675	; 0x50c3
    d33a:	842b      	strh	r3, [r5, #32]
    d33c:	852b      	strh	r3, [r5, #40]	; 0x28
    d33e:	862b      	strh	r3, [r5, #48]	; 0x30
    d340:	872b      	strh	r3, [r5, #56]	; 0x38
    d342:	f8a5 3040 	strh.w	r3, [r5, #64]	; 0x40
    d346:	f8a5 3048 	strh.w	r3, [r5, #72]	; 0x48
    d34a:	f8a5 3050 	strh.w	r3, [r5, #80]	; 0x50
    d34e:	f8a5 3058 	strh.w	r3, [r5, #88]	; 0x58

        ClearCorePorts adcGpioPort = prPtr->gpioPort;
    d352:	f990 3001 	ldrsb.w	r3, [r0, #1]
    m_initialized = false;
    d356:	2200      	movs	r2, #0
    m_shiftRegSnapshot = UINT32_MAX;
    d358:	f04f 34ff 	mov.w	r4, #4294967295
    m_initialized = false;
    d35c:	f885 2060 	strb.w	r2, [r5, #96]	; 0x60
    m_AdcTimeout = false;
    d360:	f885 2061 	strb.w	r2, [r5, #97]	; 0x61
    m_AdcBusyCount = 0;
    d364:	672a      	str	r2, [r5, #112]	; 0x70
    m_shiftRegSnapshot = UINT32_MAX;
    d366:	666c      	str	r4, [r5, #100]	; 0x64
    m_shiftRegPending = UINT32_MAX;
    d368:	66ac      	str	r4, [r5, #104]	; 0x68
        uint8_t adcGpioPin = prPtr->gpioPin;

        PMUX_SELECTION(adcGpioPort, adcGpioPin, PER_ANALOG);
    d36a:	01db      	lsls	r3, r3, #7
        uint8_t adcGpioPin = prPtr->gpioPin;
    d36c:	7881      	ldrb	r1, [r0, #2]
        PMUX_SELECTION(adcGpioPort, adcGpioPin, PER_ANALOG);
    d36e:	f103 4282 	add.w	r2, r3, #1090519040	; 0x41000000
    d372:	f502 4200 	add.w	r2, r2, #32768	; 0x8000
    d376:	eb02 0251 	add.w	r2, r2, r1, lsr #1
    d37a:	07cf      	lsls	r7, r1, #31
    d37c:	f892 0030 	ldrb.w	r0, [r2, #48]	; 0x30
    d380:	f04f 0401 	mov.w	r4, #1
    d384:	bf54      	ite	pl
    d386:	f364 0003 	bfipl	r0, r4, #0, #4
    d38a:	f364 1007 	bfimi	r0, r4, #4, #4
    d38e:	f882 0030 	strb.w	r0, [r2, #48]	; 0x30
        PMUX_ENABLE(adcGpioPort, adcGpioPin);
    d392:	4a9f      	ldr	r2, [pc, #636]	; (d610 <_ZN9ClearCore10AdcManager10InitializeEv+0x2fc>)
    d394:	4413      	add	r3, r2
    d396:	440b      	add	r3, r1
        PMUX_SELECTION(adcGpioPort, adcGpioPin, PER_ANALOG);
    d398:	2401      	movs	r4, #1
        PMUX_ENABLE(adcGpioPort, adcGpioPin);
    d39a:	f893 1040 	ldrb.w	r1, [r3, #64]	; 0x40
    d39e:	f041 0101 	orr.w	r1, r1, #1
    d3a2:	f883 1040 	strb.w	r1, [r3, #64]	; 0x40
        const PeripheralRoute *prPtr = adcsToSetup[i];
    d3a6:	9b01      	ldr	r3, [sp, #4]
        uint8_t adcGpioPin = prPtr->gpioPin;
    d3a8:	7899      	ldrb	r1, [r3, #2]
        ClearCorePorts adcGpioPort = prPtr->gpioPort;
    d3aa:	f993 3001 	ldrsb.w	r3, [r3, #1]
        PMUX_SELECTION(adcGpioPort, adcGpioPin, PER_ANALOG);
    d3ae:	01db      	lsls	r3, r3, #7
    d3b0:	441a      	add	r2, r3
    d3b2:	eb02 0251 	add.w	r2, r2, r1, lsr #1
    d3b6:	07ce      	lsls	r6, r1, #31
    d3b8:	f892 0030 	ldrb.w	r0, [r2, #48]	; 0x30
    d3bc:	bf54      	ite	pl
    d3be:	f364 0003 	bfipl	r0, r4, #0, #4
    d3c2:	f364 1007 	bfimi	r0, r4, #4, #4
    d3c6:	f882 0030 	strb.w	r0, [r2, #48]	; 0x30
        PMUX_ENABLE(adcGpioPort, adcGpioPin);
    d3ca:	4a91      	ldr	r2, [pc, #580]	; (d610 <_ZN9ClearCore10AdcManager10InitializeEv+0x2fc>)
    d3cc:	4413      	add	r3, r2
    d3ce:	440b      	add	r3, r1
        PMUX_SELECTION(adcGpioPort, adcGpioPin, PER_ANALOG);
    d3d0:	2401      	movs	r4, #1
        PMUX_ENABLE(adcGpioPort, adcGpioPin);
    d3d2:	f893 1040 	ldrb.w	r1, [r3, #64]	; 0x40
    d3d6:	f041 0101 	orr.w	r1, r1, #1
    d3da:	f883 1040 	strb.w	r1, [r3, #64]	; 0x40
        const PeripheralRoute *prPtr = adcsToSetup[i];
    d3de:	9b02      	ldr	r3, [sp, #8]
        uint8_t adcGpioPin = prPtr->gpioPin;
    d3e0:	7899      	ldrb	r1, [r3, #2]
        ClearCorePorts adcGpioPort = prPtr->gpioPort;
    d3e2:	f993 3001 	ldrsb.w	r3, [r3, #1]
        PMUX_SELECTION(adcGpioPort, adcGpioPin, PER_ANALOG);
    d3e6:	01db      	lsls	r3, r3, #7
    d3e8:	441a      	add	r2, r3
    d3ea:	eb02 0251 	add.w	r2, r2, r1, lsr #1
    d3ee:	07cf      	lsls	r7, r1, #31
    d3f0:	f892 0030 	ldrb.w	r0, [r2, #48]	; 0x30
    d3f4:	bf54      	ite	pl
    d3f6:	f364 0003 	bfipl	r0, r4, #0, #4
    d3fa:	f364 1007 	bfimi	r0, r4, #4, #4
    d3fe:	f882 0030 	strb.w	r0, [r2, #48]	; 0x30
        PMUX_ENABLE(adcGpioPort, adcGpioPin);
    d402:	4a83      	ldr	r2, [pc, #524]	; (d610 <_ZN9ClearCore10AdcManager10InitializeEv+0x2fc>)
    d404:	4413      	add	r3, r2
    d406:	440b      	add	r3, r1
        PMUX_SELECTION(adcGpioPort, adcGpioPin, PER_ANALOG);
    d408:	2401      	movs	r4, #1
        PMUX_ENABLE(adcGpioPort, adcGpioPin);
    d40a:	f893 1040 	ldrb.w	r1, [r3, #64]	; 0x40
    d40e:	f041 0101 	orr.w	r1, r1, #1
    d412:	f883 1040 	strb.w	r1, [r3, #64]	; 0x40
        const PeripheralRoute *prPtr = adcsToSetup[i];
    d416:	9b03      	ldr	r3, [sp, #12]
        uint8_t adcGpioPin = prPtr->gpioPin;
    d418:	7899      	ldrb	r1, [r3, #2]
        ClearCorePorts adcGpioPort = prPtr->gpioPort;
    d41a:	f993 3001 	ldrsb.w	r3, [r3, #1]
        PMUX_SELECTION(adcGpioPort, adcGpioPin, PER_ANALOG);
    d41e:	01db      	lsls	r3, r3, #7
    d420:	441a      	add	r2, r3
    d422:	eb02 0251 	add.w	r2, r2, r1, lsr #1
        PMUX_ENABLE(adcGpioPort, adcGpioPin);
    d426:	f103 4382 	add.w	r3, r3, #1090519040	; 0x41000000
        PMUX_SELECTION(adcGpioPort, adcGpioPin, PER_ANALOG);
    d42a:	f892 0030 	ldrb.w	r0, [r2, #48]	; 0x30
    d42e:	07ce      	lsls	r6, r1, #31
        PMUX_ENABLE(adcGpioPort, adcGpioPin);
    d430:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
    d434:	440b      	add	r3, r1
        PMUX_SELECTION(adcGpioPort, adcGpioPin, PER_ANALOG);
    d436:	bf4c      	ite	mi
    d438:	f364 1007 	bfimi	r0, r4, #4, #4
    d43c:	f364 0003 	bfipl	r0, r4, #0, #4
    d440:	f882 0030 	strb.w	r0, [r2, #48]	; 0x30
        PMUX_ENABLE(adcGpioPort, adcGpioPin);
    d444:	f893 1040 	ldrb.w	r1, [r3, #64]	; 0x40

    // Set up ADC

    // Set the clock source for ADC1 to GCLK4 (48 MHz) and enable
    // the peripheral channel
    SET_CLOCK_SOURCE(ADC1_GCLK_ID, 4);
    d448:	4a72      	ldr	r2, [pc, #456]	; (d614 <_ZN9ClearCore10AdcManager10InitializeEv+0x300>)
        PMUX_ENABLE(adcGpioPort, adcGpioPin);
    d44a:	f041 0101 	orr.w	r1, r1, #1
    d44e:	f883 1040 	strb.w	r1, [r3, #64]	; 0x40
    SET_CLOCK_SOURCE(ADC1_GCLK_ID, 4);
    d452:	f8d2 3124 	ldr.w	r3, [r2, #292]	; 0x124
    d456:	f36f 1386 	bfc	r3, #6, #1
    d45a:	f8c2 3124 	str.w	r3, [r2, #292]	; 0x124
    d45e:	f8d2 3124 	ldr.w	r3, [r2, #292]	; 0x124
    d462:	065f      	lsls	r7, r3, #25
    d464:	d4fb      	bmi.n	d45e <_ZN9ClearCore10AdcManager10InitializeEv+0x14a>
    d466:	f8d2 3124 	ldr.w	r3, [r2, #292]	; 0x124
    d46a:	496a      	ldr	r1, [pc, #424]	; (d614 <_ZN9ClearCore10AdcManager10InitializeEv+0x300>)
    d46c:	2004      	movs	r0, #4
    d46e:	f360 0303 	bfi	r3, r0, #0, #4
    d472:	f8c2 3124 	str.w	r3, [r2, #292]	; 0x124
    d476:	f8d2 3124 	ldr.w	r3, [r2, #292]	; 0x124
    d47a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    d47e:	f8c2 3124 	str.w	r3, [r2, #292]	; 0x124
    d482:	684b      	ldr	r3, [r1, #4]
    d484:	06de      	lsls	r6, r3, #27
    d486:	d4fc      	bmi.n	d482 <_ZN9ClearCore10AdcManager10InitializeEv+0x16e>

    // Enables the peripheral clock to ADC1
    CLOCK_ENABLE(APBDMASK, ADC1_);
    d488:	4963      	ldr	r1, [pc, #396]	; (d618 <_ZN9ClearCore10AdcManager10InitializeEv+0x304>)

    // Reset the ADC1 module
    ADC1->CTRLA.bit.SWRST = 1;
    d48a:	4a64      	ldr	r2, [pc, #400]	; (d61c <_ZN9ClearCore10AdcManager10InitializeEv+0x308>)
    CLOCK_ENABLE(APBDMASK, ADC1_);
    d48c:	6a0b      	ldr	r3, [r1, #32]
    d48e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
    d492:	620b      	str	r3, [r1, #32]
    ADC1->CTRLA.bit.SWRST = 1;
    d494:	8813      	ldrh	r3, [r2, #0]
    d496:	f043 0301 	orr.w	r3, r3, #1
    d49a:	8013      	strh	r3, [r2, #0]
    SYNCBUSY_WAIT(ADC1, ADC_SYNCBUSY_SWRST);
    d49c:	6b13      	ldr	r3, [r2, #48]	; 0x30
    d49e:	f013 0301 	ands.w	r3, r3, #1
    d4a2:	d1fb      	bne.n	d49c <_ZN9ClearCore10AdcManager10InitializeEv+0x188>
    }
    return true;
}

bool AdcManager::AdcResChange() {
    switch (m_AdcResPending) {
    d4a4:	f895 106d 	ldrb.w	r1, [r5, #109]	; 0x6d
    d4a8:	290a      	cmp	r1, #10
    d4aa:	f000 80e7 	beq.w	d67c <_ZN9ClearCore10AdcManager10InitializeEv+0x368>
    d4ae:	290c      	cmp	r1, #12
    d4b0:	f000 80df 	beq.w	d672 <_ZN9ClearCore10AdcManager10InitializeEv+0x35e>
    d4b4:	2908      	cmp	r1, #8
    d4b6:	f000 80d5 	beq.w	d664 <_ZN9ClearCore10AdcManager10InitializeEv+0x350>
    ADC1->CTRLA.bit.PRESCALER = ADC_CTRLA_PRESCALER_DIV4_Val;
    d4ba:	4b58      	ldr	r3, [pc, #352]	; (d61c <_ZN9ClearCore10AdcManager10InitializeEv+0x308>)
    d4bc:	881a      	ldrh	r2, [r3, #0]
    d4be:	2101      	movs	r1, #1
    d4c0:	f361 220a 	bfi	r2, r1, #8, #3
    d4c4:	801a      	strh	r2, [r3, #0]
    ADC1->INPUTCTRL.reg |= ADC_INPUTCTRL_MUXPOS_AIN4 | ADC_INPUTCTRL_DSEQSTOP;
    d4c6:	889a      	ldrh	r2, [r3, #4]
    d4c8:	b292      	uxth	r2, r2
    d4ca:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
    d4ce:	f042 0204 	orr.w	r2, r2, #4
    d4d2:	809a      	strh	r2, [r3, #4]
    SYNCBUSY_WAIT(ADC1, ADC_SYNCBUSY_INPUTCTRL);
    d4d4:	6b1c      	ldr	r4, [r3, #48]	; 0x30
    d4d6:	f014 0404 	ands.w	r4, r4, #4
    d4da:	d1fb      	bne.n	d4d4 <_ZN9ClearCore10AdcManager10InitializeEv+0x1c0>
    channel = DmaManager::Channel(DMA_ADC_RESULTS);
    d4dc:	4620      	mov	r0, r4
    d4de:	f001 fc79 	bl	edd4 <_ZN9ClearCore10DmaManager7ChannelENS_11DmaChannelsE>
    d4e2:	4606      	mov	r6, r0
    baseDesc = DmaManager::BaseDescriptor(DMA_ADC_RESULTS);
    d4e4:	4620      	mov	r0, r4
    d4e6:	f001 fc7f 	bl	ede8 <_ZN9ClearCore10DmaManager14BaseDescriptorENS_11DmaChannelsE>
    channel->CHCTRLA.reg &= ~DMAC_CHCTRLA_ENABLE;
    d4ea:	6833      	ldr	r3, [r6, #0]
    channel->CHCTRLA.reg = DMAC_CHCTRLA_SWRST;
    d4ec:	2101      	movs	r1, #1
    channel->CHCTRLA.reg &= ~DMAC_CHCTRLA_ENABLE;
    d4ee:	f023 0302 	bic.w	r3, r3, #2
    d4f2:	6033      	str	r3, [r6, #0]
    baseDesc = DmaManager::BaseDescriptor(DMA_ADC_RESULTS);
    d4f4:	4602      	mov	r2, r0
    channel->CHCTRLA.reg = DMAC_CHCTRLA_SWRST;
    d4f6:	6031      	str	r1, [r6, #0]
    while (channel->CHCTRLA.reg == DMAC_CHCTRLA_SWRST) {
    d4f8:	6833      	ldr	r3, [r6, #0]
    d4fa:	2b01      	cmp	r3, #1
    d4fc:	d0fc      	beq.n	d4f8 <_ZN9ClearCore10AdcManager10InitializeEv+0x1e4>
    channel->CHCTRLA.reg = DMAC_CHCTRLA_TRIGSRC(ADC1_DMAC_ID_RESRDY) |
    d4fe:	4b48      	ldr	r3, [pc, #288]	; (d620 <_ZN9ClearCore10AdcManager10InitializeEv+0x30c>)
    d500:	6033      	str	r3, [r6, #0]
    baseDesc->DSTADDR.reg = (uint32_t)(AdcResultsRaw + ADC_CHANNEL_COUNT);
    d502:	4948      	ldr	r1, [pc, #288]	; (d624 <_ZN9ClearCore10AdcManager10InitializeEv+0x310>)
    baseDesc->SRCADDR.reg = (uint32_t)&ADC1->RESULT.reg;
    d504:	4f48      	ldr	r7, [pc, #288]	; (d628 <_ZN9ClearCore10AdcManager10InitializeEv+0x314>)
    baseDesc->BTCTRL.reg =
    d506:	f640 1301 	movw	r3, #2305	; 0x901
    baseDesc->DESCADDR.reg = static_cast<uint32_t>(0);
    d50a:	2000      	movs	r0, #0
    baseDesc->BTCNT.reg = ADC_CHANNEL_COUNT;
    d50c:	2408      	movs	r4, #8
    baseDesc->DESCADDR.reg = static_cast<uint32_t>(0);
    d50e:	60d0      	str	r0, [r2, #12]
    baseDesc->SRCADDR.reg = (uint32_t)&ADC1->RESULT.reg;
    d510:	6057      	str	r7, [r2, #4]
    channel = DmaManager::Channel(DMA_ADC_SEQUENCE);
    d512:	2001      	movs	r0, #1
    baseDesc->BTCNT.reg = ADC_CHANNEL_COUNT;
    d514:	8054      	strh	r4, [r2, #2]
    baseDesc->DSTADDR.reg = (uint32_t)(AdcResultsRaw + ADC_CHANNEL_COUNT);
    d516:	6091      	str	r1, [r2, #8]
    baseDesc->BTCTRL.reg =
    d518:	8013      	strh	r3, [r2, #0]
    channel = DmaManager::Channel(DMA_ADC_SEQUENCE);
    d51a:	f001 fc5b 	bl	edd4 <_ZN9ClearCore10DmaManager7ChannelENS_11DmaChannelsE>
    channel->CHCTRLA.reg &= ~DMAC_CHCTRLA_ENABLE;
    d51e:	6803      	ldr	r3, [r0, #0]
    channel->CHCTRLA.reg = DMAC_CHCTRLA_SWRST;
    d520:	2201      	movs	r2, #1
    channel->CHCTRLA.reg &= ~DMAC_CHCTRLA_ENABLE;
    d522:	f023 0302 	bic.w	r3, r3, #2
    d526:	6003      	str	r3, [r0, #0]
    channel->CHCTRLA.reg = DMAC_CHCTRLA_SWRST;
    d528:	6002      	str	r2, [r0, #0]
    while (channel->CHCTRLA.reg == DMAC_CHCTRLA_SWRST) {
    d52a:	6803      	ldr	r3, [r0, #0]
    d52c:	2b01      	cmp	r3, #1
    d52e:	d0fc      	beq.n	d52a <_ZN9ClearCore10AdcManager10InitializeEv+0x216>
    channel->CHCTRLA.reg = DMAC_CHCTRLA_TRIGSRC(ADC1_DMAC_ID_SEQ) |
    d530:	4b3e      	ldr	r3, [pc, #248]	; (d62c <_ZN9ClearCore10AdcManager10InitializeEv+0x318>)
    d532:	6003      	str	r3, [r0, #0]
    baseDesc = DmaManager::BaseDescriptor(DMA_ADC_SEQUENCE);
    d534:	2001      	movs	r0, #1
    d536:	f001 fc57 	bl	ede8 <_ZN9ClearCore10DmaManager14BaseDescriptorENS_11DmaChannelsE>
    baseDesc->DESCADDR.reg = static_cast<uint32_t>(0);
    d53a:	2300      	movs	r3, #0
    d53c:	60c3      	str	r3, [r0, #12]
    ADC1->DSEQCTRL.bit.INPUTCTRL = 1;
    d53e:	4a37      	ldr	r2, [pc, #220]	; (d61c <_ZN9ClearCore10AdcManager10InitializeEv+0x308>)
        (reinterpret_cast<uint32_t>(&adcSequence)) + sizeof(adcSequence);
    d540:	4e3b      	ldr	r6, [pc, #236]	; (d630 <_ZN9ClearCore10AdcManager10InitializeEv+0x31c>)
    baseDesc->DSTADDR.reg =
    d542:	493c      	ldr	r1, [pc, #240]	; (d634 <_ZN9ClearCore10AdcManager10InitializeEv+0x320>)
    baseDesc->SRCADDR.reg =
    d544:	6046      	str	r6, [r0, #4]
    baseDesc->BTCTRL.reg = DMAC_BTCTRL_BEATSIZE_WORD | DMAC_BTCTRL_STEPSEL_SRC |
    d546:	f241 6301 	movw	r3, #5633	; 0x1601
    baseDesc->BTCNT.reg = ADC_CHANNEL_COUNT;
    d54a:	2408      	movs	r4, #8
    d54c:	8044      	strh	r4, [r0, #2]
    baseDesc->DSTADDR.reg =
    d54e:	6081      	str	r1, [r0, #8]
    baseDesc->BTCTRL.reg = DMAC_BTCTRL_BEATSIZE_WORD | DMAC_BTCTRL_STEPSEL_SRC |
    d550:	8003      	strh	r3, [r0, #0]
    ADC1->DSEQCTRL.bit.INPUTCTRL = 1;
    d552:	6b93      	ldr	r3, [r2, #56]	; 0x38
    d554:	f043 0301 	orr.w	r3, r3, #1
    d558:	6393      	str	r3, [r2, #56]	; 0x38
    SYNCBUSY_WAIT(ADC1, ADC_SYNCBUSY_INPUTCTRL);
    d55a:	6b13      	ldr	r3, [r2, #48]	; 0x30
    d55c:	075c      	lsls	r4, r3, #29
    d55e:	d4fc      	bmi.n	d55a <_ZN9ClearCore10AdcManager10InitializeEv+0x246>
    ADC1->DSEQCTRL.bit.AUTOSTART = 1;
    d560:	6b93      	ldr	r3, [r2, #56]	; 0x38
    SYNCBUSY_WAIT(ADC1, ADC_SYNCBUSY_REFCTRL);
    d562:	492e      	ldr	r1, [pc, #184]	; (d61c <_ZN9ClearCore10AdcManager10InitializeEv+0x308>)
    ADC1->DSEQCTRL.bit.AUTOSTART = 1;
    d564:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
    d568:	6393      	str	r3, [r2, #56]	; 0x38
    ADC1->REFCTRL.reg |= ADC_REFCTRL_REFCOMP | ADC_REFCTRL_REFSEL_INTVCC1;
    d56a:	7a13      	ldrb	r3, [r2, #8]
    d56c:	f043 0383 	orr.w	r3, r3, #131	; 0x83
    d570:	7213      	strb	r3, [r2, #8]
    SYNCBUSY_WAIT(ADC1, ADC_SYNCBUSY_REFCTRL);
    d572:	6b0b      	ldr	r3, [r1, #48]	; 0x30
    d574:	06d8      	lsls	r0, r3, #27
    d576:	d4fc      	bmi.n	d572 <_ZN9ClearCore10AdcManager10InitializeEv+0x25e>
    ADC1->SAMPCTRL.reg = ADC_SAMPCTRL_SAMPLEN(31);
    d578:	231f      	movs	r3, #31
    SYNCBUSY_WAIT(ADC1, ADC_SYNCBUSY_SAMPCTRL);
    d57a:	4c28      	ldr	r4, [pc, #160]	; (d61c <_ZN9ClearCore10AdcManager10InitializeEv+0x308>)
    ADC1->SAMPCTRL.reg = ADC_SAMPCTRL_SAMPLEN(31);
    d57c:	72cb      	strb	r3, [r1, #11]
    SYNCBUSY_WAIT(ADC1, ADC_SYNCBUSY_SAMPCTRL);
    d57e:	6b20      	ldr	r0, [r4, #48]	; 0x30
    d580:	f010 0040 	ands.w	r0, r0, #64	; 0x40
    d584:	d1fb      	bne.n	d57e <_ZN9ClearCore10AdcManager10InitializeEv+0x26a>
    ADC1->DBGCTRL.bit.DBGRUN = 1;
    d586:	78e3      	ldrb	r3, [r4, #3]
    d588:	f043 0301 	orr.w	r3, r3, #1
    d58c:	70e3      	strb	r3, [r4, #3]
    DmaManager::Channel(DMA_ADC_RESULTS)->CHCTRLA.reg |= DMAC_CHCTRLA_ENABLE;
    d58e:	f001 fc21 	bl	edd4 <_ZN9ClearCore10DmaManager7ChannelENS_11DmaChannelsE>
    d592:	4602      	mov	r2, r0
    DmaManager::Channel(DMA_ADC_SEQUENCE)->CHCTRLA.reg |= DMAC_CHCTRLA_ENABLE;
    d594:	2001      	movs	r0, #1
    DmaManager::Channel(DMA_ADC_RESULTS)->CHCTRLA.reg |= DMAC_CHCTRLA_ENABLE;
    d596:	6813      	ldr	r3, [r2, #0]
    d598:	f043 0302 	orr.w	r3, r3, #2
    d59c:	6013      	str	r3, [r2, #0]
    DmaManager::Channel(DMA_ADC_SEQUENCE)->CHCTRLA.reg |= DMAC_CHCTRLA_ENABLE;
    d59e:	f001 fc19 	bl	edd4 <_ZN9ClearCore10DmaManager7ChannelENS_11DmaChannelsE>
    d5a2:	6803      	ldr	r3, [r0, #0]
    SYNCBUSY_WAIT(ADC1, ADC_SYNCBUSY_ENABLE);
    d5a4:	4a1d      	ldr	r2, [pc, #116]	; (d61c <_ZN9ClearCore10AdcManager10InitializeEv+0x308>)
    DmaManager::Channel(DMA_ADC_SEQUENCE)->CHCTRLA.reg |= DMAC_CHCTRLA_ENABLE;
    d5a6:	f043 0302 	orr.w	r3, r3, #2
    d5aa:	6003      	str	r3, [r0, #0]
    ADC1->INPUTCTRL.reg &= ~ADC_INPUTCTRL_DSEQSTOP;
    d5ac:	88a3      	ldrh	r3, [r4, #4]
    d5ae:	f3c3 030e 	ubfx	r3, r3, #0, #15
    d5b2:	80a3      	strh	r3, [r4, #4]
    ADC1->CTRLA.bit.ENABLE = 0x01;
    d5b4:	8823      	ldrh	r3, [r4, #0]
    d5b6:	f043 0302 	orr.w	r3, r3, #2
    d5ba:	8023      	strh	r3, [r4, #0]
    SYNCBUSY_WAIT(ADC1, ADC_SYNCBUSY_ENABLE);
    d5bc:	6b13      	ldr	r3, [r2, #48]	; 0x30
    d5be:	0799      	lsls	r1, r3, #30
    d5c0:	d4fc      	bmi.n	d5bc <_ZN9ClearCore10AdcManager10InitializeEv+0x2a8>
    while (DmaManager::Channel(DMA_ADC_RESULTS)->CHCTRLA.bit.ENABLE) {
    d5c2:	2000      	movs	r0, #0
    d5c4:	f001 fc06 	bl	edd4 <_ZN9ClearCore10DmaManager7ChannelENS_11DmaChannelsE>
    d5c8:	6803      	ldr	r3, [r0, #0]
    d5ca:	079a      	lsls	r2, r3, #30
    d5cc:	d4f9      	bmi.n	d5c2 <_ZN9ClearCore10AdcManager10InitializeEv+0x2ae>
    while (DmaManager::Channel(DMA_ADC_SEQUENCE)->CHCTRLA.bit.ENABLE) {
    d5ce:	2001      	movs	r0, #1
    d5d0:	f001 fc00 	bl	edd4 <_ZN9ClearCore10DmaManager7ChannelENS_11DmaChannelsE>
    d5d4:	6803      	ldr	r3, [r0, #0]
    d5d6:	079b      	lsls	r3, r3, #30
    d5d8:	d4f9      	bmi.n	d5ce <_ZN9ClearCore10AdcManager10InitializeEv+0x2ba>
    while (ADC1->STATUS.bit.ADCBUSY) {
    d5da:	4a10      	ldr	r2, [pc, #64]	; (d61c <_ZN9ClearCore10AdcManager10InitializeEv+0x308>)
    d5dc:	f892 302f 	ldrb.w	r3, [r2, #47]	; 0x2f
    d5e0:	f013 0301 	ands.w	r3, r3, #1
    d5e4:	d1fa      	bne.n	d5dc <_ZN9ClearCore10AdcManager10InitializeEv+0x2c8>
        TcSamples(riseMs99pct * MS_TO_SAMPLES);
    }

    // Reset the filter to this level
    void Reset(uint16_t newSetting) {
        m_z = (newSetting << 16);
    d5e6:	4e14      	ldr	r6, [pc, #80]	; (d638 <_ZN9ClearCore10AdcManager10InitializeEv+0x324>)
    d5e8:	4c14      	ldr	r4, [pc, #80]	; (d63c <_ZN9ClearCore10AdcManager10InitializeEv+0x328>)
    d5ea:	62eb      	str	r3, [r5, #44]	; 0x2c
        m_AdcResultsConverted[i] = val;
    d5ec:	f242 51ff 	movw	r1, #9727	; 0x25ff
    d5f0:	f246 02f8 	movw	r2, #24824	; 0x60f8
    m_initialized = true;
    d5f4:	2001      	movs	r0, #1
        m_AdcResultsConverted[i] = val;
    d5f6:	8029      	strh	r1, [r5, #0]
    d5f8:	63eb      	str	r3, [r5, #60]	; 0x3c
        m_AdcResultsConvertedFiltered[i] = val;
    d5fa:	8229      	strh	r1, [r5, #16]
    d5fc:	646b      	str	r3, [r5, #68]	; 0x44
        m_AdcResultsConverted[i] = val;
    d5fe:	806b      	strh	r3, [r5, #2]
    d600:	64eb      	str	r3, [r5, #76]	; 0x4c
        m_AdcResultsConvertedFiltered[i] = val;
    d602:	826b      	strh	r3, [r5, #18]
    d604:	656b      	str	r3, [r5, #84]	; 0x54
        m_AdcResultsConverted[i] = val;
    d606:	80aa      	strh	r2, [r5, #4]
    d608:	e01a      	b.n	d640 <_ZN9ClearCore10AdcManager10InitializeEv+0x32c>
    d60a:	bf00      	nop
    d60c:	00023200 	.word	0x00023200
    d610:	41008000 	.word	0x41008000
    d614:	40001c00 	.word	0x40001c00
    d618:	40000800 	.word	0x40000800
    d61c:	43002000 	.word	0x43002000
    d620:	00204600 	.word	0x00204600
    d624:	20001e04 	.word	0x20001e04
    d628:	43002040 	.word	0x43002040
    d62c:	00204700 	.word	0x00204700
    d630:	20001e28 	.word	0x20001e28
    d634:	43002034 	.word	0x43002034
    d638:	25ff0000 	.word	0x25ff0000
    d63c:	60f80000 	.word	0x60f80000
    d640:	65eb      	str	r3, [r5, #92]	; 0x5c
        m_AdcResultsConvertedFiltered[i] = val;
    d642:	82aa      	strh	r2, [r5, #20]
    d644:	626e      	str	r6, [r5, #36]	; 0x24
        m_AdcResultsConverted[i] = val;
    d646:	80eb      	strh	r3, [r5, #6]
    d648:	636c      	str	r4, [r5, #52]	; 0x34
        m_AdcResultsConvertedFiltered[i] = val;
    d64a:	82eb      	strh	r3, [r5, #22]
    m_initialized = true;
    d64c:	f885 0060 	strb.w	r0, [r5, #96]	; 0x60
        m_AdcResultsConverted[i] = val;
    d650:	812b      	strh	r3, [r5, #8]
        m_AdcResultsConvertedFiltered[i] = val;
    d652:	832b      	strh	r3, [r5, #24]
        m_AdcResultsConverted[i] = val;
    d654:	816b      	strh	r3, [r5, #10]
        m_AdcResultsConvertedFiltered[i] = val;
    d656:	836b      	strh	r3, [r5, #26]
        m_AdcResultsConverted[i] = val;
    d658:	81ab      	strh	r3, [r5, #12]
        m_AdcResultsConvertedFiltered[i] = val;
    d65a:	83ab      	strh	r3, [r5, #28]
        m_AdcResultsConverted[i] = val;
    d65c:	81eb      	strh	r3, [r5, #14]
        m_AdcResultsConvertedFiltered[i] = val;
    d65e:	83eb      	strh	r3, [r5, #30]
}
    d660:	b005      	add	sp, #20
    d662:	bdf0      	pop	{r4, r5, r6, r7, pc}
        case 8:
            ADC1->CTRLB.bit.RESSEL = ADC_CTRLB_RESSEL_8BIT_Val;
    d664:	88d3      	ldrh	r3, [r2, #6]
    d666:	f043 0318 	orr.w	r3, r3, #24
    d66a:	80d3      	strh	r3, [r2, #6]
        default:
            // Invalid value
            return false;
    }

    m_AdcResolution = m_AdcResPending;
    d66c:	f885 106c 	strb.w	r1, [r5, #108]	; 0x6c
    d670:	e723      	b.n	d4ba <_ZN9ClearCore10AdcManager10InitializeEv+0x1a6>
            ADC1->CTRLB.bit.RESSEL = ADC_CTRLB_RESSEL_12BIT_Val;
    d672:	88d0      	ldrh	r0, [r2, #6]
    d674:	f363 00c4 	bfi	r0, r3, #3, #2
    d678:	80d0      	strh	r0, [r2, #6]
    d67a:	e7f7      	b.n	d66c <_ZN9ClearCore10AdcManager10InitializeEv+0x358>
            ADC1->CTRLB.bit.RESSEL = ADC_CTRLB_RESSEL_10BIT_Val;
    d67c:	88d3      	ldrh	r3, [r2, #6]
    d67e:	2002      	movs	r0, #2
    d680:	f360 03c4 	bfi	r3, r0, #3, #2
    d684:	80d3      	strh	r3, [r2, #6]
    d686:	e7f1      	b.n	d66c <_ZN9ClearCore10AdcManager10InitializeEv+0x358>

0000d688 <_ZN9ClearCore10AdcManager6UpdateEv>:
void AdcManager::Update() {
    d688:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    if (!m_initialized) {
    d68c:	f890 3060 	ldrb.w	r3, [r0, #96]	; 0x60
    d690:	2b00      	cmp	r3, #0
    d692:	f000 80ab 	beq.w	d7ec <_ZN9ClearCore10AdcManager6UpdateEv+0x164>
    if (ADC1->STATUS.bit.ADCBUSY ||
    d696:	4b89      	ldr	r3, [pc, #548]	; (d8bc <_ZN9ClearCore10AdcManager6UpdateEv+0x234>)
    d698:	4604      	mov	r4, r0
    d69a:	f893 002f 	ldrb.w	r0, [r3, #47]	; 0x2f
    d69e:	f010 0001 	ands.w	r0, r0, #1
    d6a2:	f000 80a5 	beq.w	d7f0 <_ZN9ClearCore10AdcManager6UpdateEv+0x168>
        if (++m_AdcBusyCount >= m_AdcTimeoutLimit) {
    d6a6:	6f23      	ldr	r3, [r4, #112]	; 0x70
    d6a8:	f894 206e 	ldrb.w	r2, [r4, #110]	; 0x6e
    d6ac:	3301      	adds	r3, #1
    d6ae:	4293      	cmp	r3, r2
    d6b0:	6723      	str	r3, [r4, #112]	; 0x70
    d6b2:	d302      	bcc.n	d6ba <_ZN9ClearCore10AdcManager6UpdateEv+0x32>
            m_AdcTimeout = true;
    d6b4:	2301      	movs	r3, #1
    d6b6:	f884 3061 	strb.w	r3, [r4, #97]	; 0x61
    d6ba:	8c23      	ldrh	r3, [r4, #32]
        m_z = ((static_cast<int64_t>(m_z) * m_tc) >> 15) -
    d6bc:	6a66      	ldr	r6, [r4, #36]	; 0x24
        m_analogFilter[i].Update(m_AdcResultsConverted[i]);
    d6be:	8821      	ldrh	r1, [r4, #0]
    d6c0:	6ae5      	ldr	r5, [r4, #44]	; 0x2c
    d6c2:	8d20      	ldrh	r0, [r4, #40]	; 0x28
    d6c4:	fb83 6706 	smull	r6, r7, r3, r6
    d6c8:	0bf2      	lsrs	r2, r6, #15
    d6ca:	ea42 4247 	orr.w	r2, r2, r7, lsl #17
    d6ce:	b289      	uxth	r1, r1
              ((static_cast<int32_t>(input) * m_tc) << 1) +
    d6d0:	eb02 4201 	add.w	r2, r2, r1, lsl #16
    d6d4:	fb01 f103 	mul.w	r1, r1, r3
    d6d8:	eba2 0241 	sub.w	r2, r2, r1, lsl #1
        return (m_z >> 16);
    d6dc:	0c13      	lsrs	r3, r2, #16
        m_AdcResultsConvertedFiltered[i] = m_analogFilter[i].LastOutput();
    d6de:	8223      	strh	r3, [r4, #16]
        m_analogFilter[i].Update(m_AdcResultsConverted[i]);
    d6e0:	8866      	ldrh	r6, [r4, #2]
        m_z = ((static_cast<int64_t>(m_z) * m_tc) >> 15) -
    d6e2:	6262      	str	r2, [r4, #36]	; 0x24
    d6e4:	fb80 8905 	smull	r8, r9, r0, r5
    d6e8:	ea4f 33d8 	mov.w	r3, r8, lsr #15
    d6ec:	b2b2      	uxth	r2, r6
    d6ee:	ea43 4349 	orr.w	r3, r3, r9, lsl #17
              ((static_cast<int32_t>(input) * m_tc) << 1) +
    d6f2:	fb02 f000 	mul.w	r0, r2, r0
    d6f6:	eb03 4302 	add.w	r3, r3, r2, lsl #16
    d6fa:	eba3 0340 	sub.w	r3, r3, r0, lsl #1
    d6fe:	8e21      	ldrh	r1, [r4, #48]	; 0x30
        m_z = ((static_cast<int64_t>(m_z) * m_tc) >> 15) -
    d700:	6b62      	ldr	r2, [r4, #52]	; 0x34
    d702:	62e3      	str	r3, [r4, #44]	; 0x2c
        return (m_z >> 16);
    d704:	0c18      	lsrs	r0, r3, #16
        m_AdcResultsConvertedFiltered[i] = m_analogFilter[i].LastOutput();
    d706:	8260      	strh	r0, [r4, #18]
        m_analogFilter[i].Update(m_AdcResultsConverted[i]);
    d708:	88a0      	ldrh	r0, [r4, #4]
    d70a:	8f26      	ldrh	r6, [r4, #56]	; 0x38
    d70c:	f8b4 5040 	ldrh.w	r5, [r4, #64]	; 0x40
        m_z = ((static_cast<int64_t>(m_z) * m_tc) >> 15) -
    d710:	fb81 2302 	smull	r2, r3, r1, r2
    d714:	0bd2      	lsrs	r2, r2, #15
    d716:	b280      	uxth	r0, r0
    d718:	ea42 4243 	orr.w	r2, r2, r3, lsl #17
              ((static_cast<int32_t>(input) * m_tc) << 1) +
    d71c:	fb00 f101 	mul.w	r1, r0, r1
    d720:	eb02 4200 	add.w	r2, r2, r0, lsl #16
    d724:	eba2 0041 	sub.w	r0, r2, r1, lsl #1
        m_z = ((static_cast<int64_t>(m_z) * m_tc) >> 15) -
    d728:	6be3      	ldr	r3, [r4, #60]	; 0x3c
    d72a:	6360      	str	r0, [r4, #52]	; 0x34
        return (m_z >> 16);
    d72c:	0c02      	lsrs	r2, r0, #16
        m_AdcResultsConvertedFiltered[i] = m_analogFilter[i].LastOutput();
    d72e:	82a2      	strh	r2, [r4, #20]
        m_analogFilter[i].Update(m_AdcResultsConverted[i]);
    d730:	88e1      	ldrh	r1, [r4, #6]
    d732:	f8b4 0048 	ldrh.w	r0, [r4, #72]	; 0x48
        m_z = ((static_cast<int64_t>(m_z) * m_tc) >> 15) -
    d736:	fb86 8903 	smull	r8, r9, r6, r3
    d73a:	ea4f 33d8 	mov.w	r3, r8, lsr #15
    d73e:	b289      	uxth	r1, r1
    d740:	ea43 4349 	orr.w	r3, r3, r9, lsl #17
              ((static_cast<int32_t>(input) * m_tc) << 1) +
    d744:	fb01 f606 	mul.w	r6, r1, r6
    d748:	eb03 4301 	add.w	r3, r3, r1, lsl #16
    d74c:	eba3 0146 	sub.w	r1, r3, r6, lsl #1
        return (m_z >> 16);
    d750:	0c0b      	lsrs	r3, r1, #16
        m_z = ((static_cast<int64_t>(m_z) * m_tc) >> 15) -
    d752:	6c66      	ldr	r6, [r4, #68]	; 0x44
        m_AdcResultsConvertedFiltered[i] = m_analogFilter[i].LastOutput();
    d754:	82e3      	strh	r3, [r4, #22]
        m_analogFilter[i].Update(m_AdcResultsConverted[i]);
    d756:	8923      	ldrh	r3, [r4, #8]
    d758:	63e1      	str	r1, [r4, #60]	; 0x3c
    d75a:	fb85 6706 	smull	r6, r7, r5, r6
    d75e:	0bf2      	lsrs	r2, r6, #15
    d760:	b29b      	uxth	r3, r3
    d762:	ea42 4247 	orr.w	r2, r2, r7, lsl #17
              ((static_cast<int32_t>(input) * m_tc) << 1) +
    d766:	fb03 f505 	mul.w	r5, r3, r5
    d76a:	eb02 4203 	add.w	r2, r2, r3, lsl #16
    d76e:	eba2 0245 	sub.w	r2, r2, r5, lsl #1
        return (m_z >> 16);
    d772:	0c13      	lsrs	r3, r2, #16
        m_z = ((static_cast<int64_t>(m_z) * m_tc) >> 15) -
    d774:	6ce6      	ldr	r6, [r4, #76]	; 0x4c
        m_AdcResultsConvertedFiltered[i] = m_analogFilter[i].LastOutput();
    d776:	8323      	strh	r3, [r4, #24]
        m_analogFilter[i].Update(m_AdcResultsConverted[i]);
    d778:	8961      	ldrh	r1, [r4, #10]
    d77a:	6462      	str	r2, [r4, #68]	; 0x44
    d77c:	fb80 6706 	smull	r6, r7, r0, r6
    d780:	0bf3      	lsrs	r3, r6, #15
    d782:	b28a      	uxth	r2, r1
    d784:	ea43 4347 	orr.w	r3, r3, r7, lsl #17
              ((static_cast<int32_t>(input) * m_tc) << 1) +
    d788:	fb02 f000 	mul.w	r0, r2, r0
    d78c:	eb03 4302 	add.w	r3, r3, r2, lsl #16
    d790:	eba3 0340 	sub.w	r3, r3, r0, lsl #1
        return (m_z >> 16);
    d794:	0c1a      	lsrs	r2, r3, #16
        m_AdcResultsConvertedFiltered[i] = m_analogFilter[i].LastOutput();
    d796:	8362      	strh	r2, [r4, #26]
        m_z = ((static_cast<int64_t>(m_z) * m_tc) >> 15) -
    d798:	64e3      	str	r3, [r4, #76]	; 0x4c
        m_analogFilter[i].Update(m_AdcResultsConverted[i]);
    d79a:	89a0      	ldrh	r0, [r4, #12]
    d79c:	f8b4 3050 	ldrh.w	r3, [r4, #80]	; 0x50
    d7a0:	6d62      	ldr	r2, [r4, #84]	; 0x54
    d7a2:	f8b4 1058 	ldrh.w	r1, [r4, #88]	; 0x58
    d7a6:	6de6      	ldr	r6, [r4, #92]	; 0x5c
    d7a8:	fb83 8902 	smull	r8, r9, r3, r2
    d7ac:	ea4f 32d8 	mov.w	r2, r8, lsr #15
    d7b0:	b280      	uxth	r0, r0
    d7b2:	ea42 4249 	orr.w	r2, r2, r9, lsl #17
              ((static_cast<int32_t>(input) * m_tc) << 1) +
    d7b6:	fb00 f303 	mul.w	r3, r0, r3
    d7ba:	eb02 4200 	add.w	r2, r2, r0, lsl #16
    d7be:	eba2 0243 	sub.w	r2, r2, r3, lsl #1
        return (m_z >> 16);
    d7c2:	0c13      	lsrs	r3, r2, #16
        m_AdcResultsConvertedFiltered[i] = m_analogFilter[i].LastOutput();
    d7c4:	83a3      	strh	r3, [r4, #28]
        m_z = ((static_cast<int64_t>(m_z) * m_tc) >> 15) -
    d7c6:	fb81 6706 	smull	r6, r7, r1, r6
        m_analogFilter[i].Update(m_AdcResultsConverted[i]);
    d7ca:	89e0      	ldrh	r0, [r4, #14]
    d7cc:	6562      	str	r2, [r4, #84]	; 0x54
    d7ce:	0bf3      	lsrs	r3, r6, #15
    d7d0:	b282      	uxth	r2, r0
    d7d2:	ea43 4347 	orr.w	r3, r3, r7, lsl #17
              ((static_cast<int32_t>(input) * m_tc) << 1) +
    d7d6:	fb02 f101 	mul.w	r1, r2, r1
    d7da:	eb03 4302 	add.w	r3, r3, r2, lsl #16
    d7de:	eba3 0341 	sub.w	r3, r3, r1, lsl #1
        return (m_z >> 16);
    d7e2:	0c1a      	lsrs	r2, r3, #16
        m_z = ((static_cast<int64_t>(m_z) * m_tc) >> 15) -
    d7e4:	65e3      	str	r3, [r4, #92]	; 0x5c
        m_AdcResultsConvertedFiltered[i] = m_analogFilter[i].LastOutput();
    d7e6:	83e2      	strh	r2, [r4, #30]
    d7e8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    d7ec:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
            DmaManager::Channel(DMA_ADC_RESULTS)->CHCTRLA.bit.ENABLE) {
    d7f0:	f001 faf0 	bl	edd4 <_ZN9ClearCore10DmaManager7ChannelENS_11DmaChannelsE>
    d7f4:	6803      	ldr	r3, [r0, #0]
    d7f6:	f3c3 0340 	ubfx	r3, r3, #1, #1
    d7fa:	b2de      	uxtb	r6, r3
    if (ADC1->STATUS.bit.ADCBUSY ||
    d7fc:	2e00      	cmp	r6, #0
    d7fe:	f47f af52 	bne.w	d6a6 <_ZN9ClearCore10AdcManager6UpdateEv+0x1e>
        m_AdcBusyCount = 0;
    d802:	6726      	str	r6, [r4, #112]	; 0x70
        m_AdcTimeout = false;
    d804:	f884 3061 	strb.w	r3, [r4, #97]	; 0x61
    d808:	2501      	movs	r5, #1
    d80a:	f8df 80bc 	ldr.w	r8, [pc, #188]	; d8c8 <_ZN9ClearCore10AdcManager6UpdateEv+0x240>
            if (i == ADC_VSUPPLY_MON && StatusMgr.StatusRT().bit.HBridgeReset) {
    d80e:	4f2c      	ldr	r7, [pc, #176]	; (d8c0 <_ZN9ClearCore10AdcManager6UpdateEv+0x238>)
    d810:	e00f      	b.n	d832 <_ZN9ClearCore10AdcManager6UpdateEv+0x1aa>
                AdcResultsRaw[i] << (15 - m_AdcResolution);
    d812:	f838 3016 	ldrh.w	r3, [r8, r6, lsl #1]
    d816:	f894 206c 	ldrb.w	r2, [r4, #108]	; 0x6c
    d81a:	b29b      	uxth	r3, r3
    d81c:	f1c2 010f 	rsb	r1, r2, #15
    d820:	408b      	lsls	r3, r1
    d822:	b29b      	uxth	r3, r3
        for (uint8_t i = 0; i < ADC_CHANNEL_COUNT; i++) {
    d824:	2d07      	cmp	r5, #7
            m_AdcResultsConverted[i] =
    d826:	f824 3016 	strh.w	r3, [r4, r6, lsl #1]
        for (uint8_t i = 0; i < ADC_CHANNEL_COUNT; i++) {
    d82a:	462e      	mov	r6, r5
    d82c:	dc0c      	bgt.n	d848 <_ZN9ClearCore10AdcManager6UpdateEv+0x1c0>
    d82e:	3501      	adds	r5, #1
    d830:	b2ed      	uxtb	r5, r5
            if (i == ADC_VSUPPLY_MON && StatusMgr.StatusRT().bit.HBridgeReset) {
    d832:	2d01      	cmp	r5, #1
    d834:	d1ed      	bne.n	d812 <_ZN9ClearCore10AdcManager6UpdateEv+0x18a>
    d836:	f04f 31ff 	mov.w	r1, #4294967295
    d83a:	6838      	ldr	r0, [r7, #0]
    d83c:	f003 ff24 	bl	11688 <_ZN9ClearCore13StatusManager8StatusRTENS0_14StatusRegisterE>
    d840:	0703      	lsls	r3, r0, #28
    d842:	d5e6      	bpl.n	d812 <_ZN9ClearCore10AdcManager6UpdateEv+0x18a>
        for (uint8_t i = 0; i < ADC_CHANNEL_COUNT; i++) {
    d844:	462e      	mov	r6, r5
    d846:	e7f2      	b.n	d82e <_ZN9ClearCore10AdcManager6UpdateEv+0x1a6>
        if (m_AdcResolution != m_AdcResPending) {
    d848:	f894 306d 	ldrb.w	r3, [r4, #109]	; 0x6d
    d84c:	429a      	cmp	r2, r3
    d84e:	d005      	beq.n	d85c <_ZN9ClearCore10AdcManager6UpdateEv+0x1d4>
    switch (m_AdcResPending) {
    d850:	2b0a      	cmp	r3, #10
    d852:	d02c      	beq.n	d8ae <_ZN9ClearCore10AdcManager6UpdateEv+0x226>
    d854:	2b0c      	cmp	r3, #12
    d856:	d024      	beq.n	d8a2 <_ZN9ClearCore10AdcManager6UpdateEv+0x21a>
    d858:	2b08      	cmp	r3, #8
    d85a:	d01a      	beq.n	d892 <_ZN9ClearCore10AdcManager6UpdateEv+0x20a>
        m_shiftRegSnapshot = m_shiftRegPending;
    d85c:	6ea2      	ldr	r2, [r4, #104]	; 0x68
        m_shiftRegPending = ShiftReg.LastOutput();
    d85e:	4b19      	ldr	r3, [pc, #100]	; (d8c4 <_ZN9ClearCore10AdcManager6UpdateEv+0x23c>)
        m_shiftRegSnapshot = m_shiftRegPending;
    d860:	6662      	str	r2, [r4, #100]	; 0x64
        m_shiftRegPending = ShiftReg.LastOutput();
    d862:	f8d3 3110 	ldr.w	r3, [r3, #272]	; 0x110
    d866:	66a3      	str	r3, [r4, #104]	; 0x68
    DmaManager::Channel(DMA_ADC_RESULTS)->CHCTRLA.reg |= DMAC_CHCTRLA_ENABLE;
    d868:	2000      	movs	r0, #0
    d86a:	f001 fab3 	bl	edd4 <_ZN9ClearCore10DmaManager7ChannelENS_11DmaChannelsE>
    d86e:	4602      	mov	r2, r0
    DmaManager::Channel(DMA_ADC_SEQUENCE)->CHCTRLA.reg |= DMAC_CHCTRLA_ENABLE;
    d870:	2001      	movs	r0, #1
    DmaManager::Channel(DMA_ADC_RESULTS)->CHCTRLA.reg |= DMAC_CHCTRLA_ENABLE;
    d872:	6813      	ldr	r3, [r2, #0]
    d874:	f043 0302 	orr.w	r3, r3, #2
    d878:	6013      	str	r3, [r2, #0]
    DmaManager::Channel(DMA_ADC_SEQUENCE)->CHCTRLA.reg |= DMAC_CHCTRLA_ENABLE;
    d87a:	f001 faab 	bl	edd4 <_ZN9ClearCore10DmaManager7ChannelENS_11DmaChannelsE>
    d87e:	6803      	ldr	r3, [r0, #0]
    ADC1->INPUTCTRL.reg &= ~ADC_INPUTCTRL_DSEQSTOP;
    d880:	4a0e      	ldr	r2, [pc, #56]	; (d8bc <_ZN9ClearCore10AdcManager6UpdateEv+0x234>)
    DmaManager::Channel(DMA_ADC_SEQUENCE)->CHCTRLA.reg |= DMAC_CHCTRLA_ENABLE;
    d882:	f043 0302 	orr.w	r3, r3, #2
    d886:	6003      	str	r3, [r0, #0]
    ADC1->INPUTCTRL.reg &= ~ADC_INPUTCTRL_DSEQSTOP;
    d888:	8893      	ldrh	r3, [r2, #4]
    d88a:	f3c3 030e 	ubfx	r3, r3, #0, #15
    d88e:	8093      	strh	r3, [r2, #4]
    d890:	e713      	b.n	d6ba <_ZN9ClearCore10AdcManager6UpdateEv+0x32>
            ADC1->CTRLB.bit.RESSEL = ADC_CTRLB_RESSEL_8BIT_Val;
    d892:	490a      	ldr	r1, [pc, #40]	; (d8bc <_ZN9ClearCore10AdcManager6UpdateEv+0x234>)
    d894:	88ca      	ldrh	r2, [r1, #6]
    d896:	f042 0218 	orr.w	r2, r2, #24
    d89a:	80ca      	strh	r2, [r1, #6]
    m_AdcResolution = m_AdcResPending;
    d89c:	f884 306c 	strb.w	r3, [r4, #108]	; 0x6c
    d8a0:	e7dc      	b.n	d85c <_ZN9ClearCore10AdcManager6UpdateEv+0x1d4>
            ADC1->CTRLB.bit.RESSEL = ADC_CTRLB_RESSEL_12BIT_Val;
    d8a2:	4a06      	ldr	r2, [pc, #24]	; (d8bc <_ZN9ClearCore10AdcManager6UpdateEv+0x234>)
    d8a4:	88d1      	ldrh	r1, [r2, #6]
    d8a6:	f36f 01c4 	bfc	r1, #3, #2
    d8aa:	80d1      	strh	r1, [r2, #6]
    d8ac:	e7f6      	b.n	d89c <_ZN9ClearCore10AdcManager6UpdateEv+0x214>
            ADC1->CTRLB.bit.RESSEL = ADC_CTRLB_RESSEL_10BIT_Val;
    d8ae:	4a03      	ldr	r2, [pc, #12]	; (d8bc <_ZN9ClearCore10AdcManager6UpdateEv+0x234>)
    d8b0:	88d1      	ldrh	r1, [r2, #6]
    d8b2:	2002      	movs	r0, #2
    d8b4:	f360 01c4 	bfi	r1, r0, #3, #2
    d8b8:	80d1      	strh	r1, [r2, #6]
    d8ba:	e7ef      	b.n	d89c <_ZN9ClearCore10AdcManager6UpdateEv+0x214>
    d8bc:	43002000 	.word	0x43002000
    d8c0:	20001f0c 	.word	0x20001f0c
    d8c4:	200019d8 	.word	0x200019d8
    d8c8:	20001df4 	.word	0x20001df4

0000d8cc <_ZN9ClearCore10AdcManager8FilterTcENS0_11AdcChannelsEtNS0_11FilterUnitsE>:
}

bool AdcManager::FilterTc(AdcChannels adcChannel,
                          uint16_t tc,
                          FilterUnits theUnits) {
    if (adcChannel >= ADC_CHANNEL_COUNT) {
    d8cc:	2907      	cmp	r1, #7
    d8ce:	dc33      	bgt.n	d938 <_ZN9ClearCore10AdcManager8FilterTcENS0_11AdcChannelsEtNS0_11FilterUnitsE+0x6c>
                          FilterUnits theUnits) {
    d8d0:	b530      	push	{r4, r5, lr}
        return false;
    }

    switch (theUnits) {
    d8d2:	2b01      	cmp	r3, #1
                          FilterUnits theUnits) {
    d8d4:	b083      	sub	sp, #12
    d8d6:	4605      	mov	r5, r0
    switch (theUnits) {
    d8d8:	d033      	beq.n	d942 <_ZN9ClearCore10AdcManager8FilterTcENS0_11AdcChannelsEtNS0_11FilterUnitsE+0x76>
    d8da:	d336      	bcc.n	d94a <_ZN9ClearCore10AdcManager8FilterTcENS0_11AdcChannelsEtNS0_11FilterUnitsE+0x7e>
    d8dc:	2b02      	cmp	r3, #2
    d8de:	d12d      	bne.n	d93c <_ZN9ClearCore10AdcManager8FilterTcENS0_11AdcChannelsEtNS0_11FilterUnitsE+0x70>
        float tcTemp = powf(.01, 1. / riseSamples99pct) * 32768 + 0.5;
    d8e0:	4610      	mov	r0, r2
            return true;
        case AdcManager::FilterUnits::FILTER_UNIT_MS:
            m_analogFilter[adcChannel].Tc_ms(tc);
            return true;
        case AdcManager::FilterUnits::FILTER_UNIT_SAMPLES:
            m_analogFilter[adcChannel].TcSamples(tc);
    d8e2:	1d0c      	adds	r4, r1, #4
    d8e4:	f00e f86c 	bl	1b9c0 <__aeabi_i2d>
    d8e8:	460b      	mov	r3, r1
    d8ea:	4602      	mov	r2, r0
    d8ec:	491a      	ldr	r1, [pc, #104]	; (d958 <_ZN9ClearCore10AdcManager8FilterTcENS0_11AdcChannelsEtNS0_11FilterUnitsE+0x8c>)
    d8ee:	2000      	movs	r0, #0
    d8f0:	f00e f9f6 	bl	1bce0 <__aeabi_ddiv>
    d8f4:	f00e fbac 	bl	1c050 <__aeabi_d2f>
    d8f8:	ed9f 0a18 	vldr	s0, [pc, #96]	; d95c <_ZN9ClearCore10AdcManager8FilterTcENS0_11AdcChannelsEtNS0_11FilterUnitsE+0x90>
    d8fc:	ee00 0a90 	vmov	s1, r0
    d900:	f00d f906 	bl	1ab10 <powf>
    d904:	eddf 6a16 	vldr	s13, [pc, #88]	; d960 <_ZN9ClearCore10AdcManager8FilterTcENS0_11AdcChannelsEtNS0_11FilterUnitsE+0x94>
        m_tc = (tcTemp < INT16_MAX) ? tcTemp : INT16_MAX;
    d908:	ed9f 7a16 	vldr	s14, [pc, #88]	; d964 <_ZN9ClearCore10AdcManager8FilterTcENS0_11AdcChannelsEtNS0_11FilterUnitsE+0x98>
        float tcTemp = powf(.01, 1. / riseSamples99pct) * 32768 + 0.5;
    d90c:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
    d910:	eee0 7a26 	vfma.f32	s15, s0, s13
            return true;
    d914:	2001      	movs	r0, #1
        m_tc = (tcTemp < INT16_MAX) ? tcTemp : INT16_MAX;
    d916:	eef4 7ac7 	vcmpe.f32	s15, s14
    d91a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    d91e:	bf49      	itett	mi
    d920:	eefc 7ae7 	vcvtmi.u32.f32	s15, s15
    d924:	f647 73ff 	movwpl	r3, #32767	; 0x7fff
    d928:	edcd 7a01 	vstrmi	s15, [sp, #4]
    d92c:	f8bd 3004 	ldrhmi.w	r3, [sp, #4]
    d930:	f825 3034 	strh.w	r3, [r5, r4, lsl #3]
        default:
            // Error
            return false;
    }
}
    d934:	b003      	add	sp, #12
    d936:	bd30      	pop	{r4, r5, pc}
        return false;
    d938:	2000      	movs	r0, #0
    d93a:	4770      	bx	lr
            return false;
    d93c:	2000      	movs	r0, #0
}
    d93e:	b003      	add	sp, #12
    d940:	bd30      	pop	{r4, r5, pc}
        TcSamples(riseMs99pct * MS_TO_SAMPLES);
    d942:	eb02 0282 	add.w	r2, r2, r2, lsl #2
        float tcTemp = powf(.01, 1. / riseSamples99pct) * 32768 + 0.5;
    d946:	b290      	uxth	r0, r2
    d948:	e7cb      	b.n	d8e2 <_ZN9ClearCore10AdcManager8FilterTcENS0_11AdcChannelsEtNS0_11FilterUnitsE+0x16>
            m_analogFilter[adcChannel].Tc(tc);
    d94a:	3104      	adds	r1, #4
            return true;
    d94c:	2001      	movs	r0, #1
        m_tc = newTc;
    d94e:	f825 2031 	strh.w	r2, [r5, r1, lsl #3]
}
    d952:	b003      	add	sp, #12
    d954:	bd30      	pop	{r4, r5, pc}
    d956:	bf00      	nop
    d958:	3ff00000 	.word	0x3ff00000
    d95c:	3c23d70a 	.word	0x3c23d70a
    d960:	47000000 	.word	0x47000000
    d964:	46fffe00 	.word	0x46fffe00

0000d968 <_GLOBAL__sub_I__ZN9ClearCore6AdcMgrE>:
    DmaManager::Channel(DMA_ADC_RESULTS)->CHINTFLAG.reg =
        DMAC_CHINTENCLR_TCMPL; // clear interrupt
}
#endif

    d968:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
AdcManager &AdcMgr = AdcManager::Instance();
    d96a:	f7ff fc8f 	bl	d28c <_ZN9ClearCore10AdcManager8InstanceEv>
    d96e:	4a0f      	ldr	r2, [pc, #60]	; (d9ac <_GLOBAL__sub_I__ZN9ClearCore6AdcMgrE+0x44>)
        bit.INPUTCTRL.reg = inputCtrl;
    d970:	4b0f      	ldr	r3, [pc, #60]	; (d9b0 <_GLOBAL__sub_I__ZN9ClearCore6AdcMgrE+0x48>)
AdcManager &AdcMgr = AdcManager::Instance();
    d972:	6010      	str	r0, [r2, #0]
        bit.INPUTCTRL.reg = inputCtrl;
    d974:	2104      	movs	r1, #4
    d976:	2205      	movs	r2, #5
    d978:	2706      	movs	r7, #6
    d97a:	2607      	movs	r6, #7
    d97c:	2508      	movs	r5, #8
    d97e:	2409      	movs	r4, #9
    d980:	200a      	movs	r0, #10
    d982:	8019      	strh	r1, [r3, #0]
    d984:	809a      	strh	r2, [r3, #4]
    d986:	f248 010b 	movw	r1, #32779	; 0x800b
        bit.CTRLB.reg = ctrlb;
    d98a:	2200      	movs	r2, #0
        bit.INPUTCTRL.reg = inputCtrl;
    d98c:	811f      	strh	r7, [r3, #8]
    d98e:	819e      	strh	r6, [r3, #12]
    d990:	821d      	strh	r5, [r3, #16]
    d992:	829c      	strh	r4, [r3, #20]
    d994:	8318      	strh	r0, [r3, #24]
    d996:	8399      	strh	r1, [r3, #28]
        bit.CTRLB.reg = ctrlb;
    d998:	805a      	strh	r2, [r3, #2]
    d99a:	80da      	strh	r2, [r3, #6]
    d99c:	815a      	strh	r2, [r3, #10]
    d99e:	81da      	strh	r2, [r3, #14]
    d9a0:	825a      	strh	r2, [r3, #18]
    d9a2:	82da      	strh	r2, [r3, #22]
    d9a4:	835a      	strh	r2, [r3, #26]
    d9a6:	83da      	strh	r2, [r3, #30]
    d9a8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    d9aa:	bf00      	nop
    d9ac:	20001e04 	.word	0x20001e04
    d9b0:	20001e08 	.word	0x20001e08

0000d9b4 <_ZN9ClearCore12DigitalInOut11IsInHwFaultEv>:

    /**
        \copydoc Connector::IsInHwFault()
    **/
    bool IsInHwFault() override {
        return (volatile bool &)m_isInFault;
    d9b4:	f890 003d 	ldrb.w	r0, [r0, #61]	; 0x3d
    }
    d9b8:	4770      	bx	lr
    d9ba:	bf00      	nop

0000d9bc <_ZN9ClearCore21DigitalInOutAnalogOut4ModeEv>:
    /**
        \copydoc Connector::Mode
    **/
    virtual ConnectorModes Mode() override {
        return Connector::Mode();
    }
    d9bc:	7980      	ldrb	r0, [r0, #6]
    d9be:	4770      	bx	lr

0000d9c0 <_ZN9ClearCore21DigitalInOutAnalogOut4TypeEv>:

        \return The type of the current connector.
    **/
    Connector::ConnectorTypes Type() override {
        return Connector::ANALOG_OUT_DIGITAL_IN_OUT_TYPE;
    }
    d9c0:	2004      	movs	r0, #4
    d9c2:	4770      	bx	lr

0000d9c4 <_ZN9ClearCore21DigitalInOutAnalogOut10IsWritableEv>:

    return (m_mode == newMode);
}

bool DigitalInOutAnalogOut::IsWritable() {
    return m_mode == OUTPUT_DIGITAL || m_mode == OUTPUT_ANALOG ||
    d9c4:	7980      	ldrb	r0, [r0, #6]
    d9c6:	1ec3      	subs	r3, r0, #3
    d9c8:	2b01      	cmp	r3, #1
    d9ca:	bf83      	ittte	hi
    d9cc:	3806      	subhi	r0, #6
    d9ce:	fab0 f080 	clzhi	r0, r0
    d9d2:	0940      	lsrhi	r0, r0, #5
    d9d4:	2001      	movls	r0, #1
           m_mode == OUTPUT_PWM;
}
    d9d6:	4770      	bx	lr

0000d9d8 <_ZN9ClearCore21DigitalInOutAnalogOutC1ENS_13ShiftRegister5MasksEPK15PeripheralRouteS5_S5_b>:
DigitalInOutAnalogOut::DigitalInOutAnalogOut(
    d9d8:	b530      	push	{r4, r5, lr}
    d9da:	b083      	sub	sp, #12
    d9dc:	f89d 401c 	ldrb.w	r4, [sp, #28]
    d9e0:	9d06      	ldr	r5, [sp, #24]
      m_dacSpan(DAC_DEFAULT_SPAN) {}
    d9e2:	9400      	str	r4, [sp, #0]
DigitalInOutAnalogOut::DigitalInOutAnalogOut(
    d9e4:	4604      	mov	r4, r0
      m_dacSpan(DAC_DEFAULT_SPAN) {}
    d9e6:	f000 fcfb 	bl	e3e0 <_ZN9ClearCore12DigitalInOutC1ENS_13ShiftRegister5MasksEPK15PeripheralRouteS5_b>
      m_analogPort(outputAnalogInfo->gpioPort),
    d9ea:	f995 3001 	ldrsb.w	r3, [r5, #1]
      m_dacSpan(DAC_DEFAULT_SPAN) {}
    d9ee:	4a05      	ldr	r2, [pc, #20]	; (da04 <_ZN9ClearCore21DigitalInOutAnalogOutC1ENS_13ShiftRegister5MasksEPK15PeripheralRouteS5_S5_b+0x2c>)
      m_analogPort(outputAnalogInfo->gpioPort),
    d9f0:	6623      	str	r3, [r4, #96]	; 0x60
      m_dacSpan(DAC_DEFAULT_SPAN) {}
    d9f2:	6022      	str	r2, [r4, #0]
      m_analogDataBit(outputAnalogInfo->gpioPin),
    d9f4:	78aa      	ldrb	r2, [r5, #2]
      m_dacSpan(DAC_DEFAULT_SPAN) {}
    d9f6:	4b04      	ldr	r3, [pc, #16]	; (da08 <_ZN9ClearCore21DigitalInOutAnalogOutC1ENS_13ShiftRegister5MasksEPK15PeripheralRouteS5_S5_b+0x30>)
      m_analogDataBit(outputAnalogInfo->gpioPin),
    d9f8:	6662      	str	r2, [r4, #100]	; 0x64
      m_dacSpan(DAC_DEFAULT_SPAN) {}
    d9fa:	4620      	mov	r0, r4
    d9fc:	66a3      	str	r3, [r4, #104]	; 0x68
    d9fe:	b003      	add	sp, #12
    da00:	bd30      	pop	{r4, r5, pc}
    da02:	bf00      	nop
    da04:	00023258 	.word	0x00023258
    da08:	06a40000 	.word	0x06a40000

0000da0c <_ZN9ClearCore21DigitalInOutAnalogOut13DacInitializeEv>:
}

/**
    One-time DAC Configuration
**/
void DigitalInOutAnalogOut::DacInitialize() {
    da0c:	b538      	push	{r3, r4, r5, lr}
    // Give the DAC a clock
    // The DAC will misbehave if clocked at more than 100 MHz
    SET_CLOCK_SOURCE(DAC_GCLK_ID, 4);
    da0e:	4a3a      	ldr	r2, [pc, #232]	; (daf8 <_ZN9ClearCore21DigitalInOutAnalogOut13DacInitializeEv+0xec>)
    da10:	f8d2 3128 	ldr.w	r3, [r2, #296]	; 0x128
    da14:	f36f 1386 	bfc	r3, #6, #1
void DigitalInOutAnalogOut::DacInitialize() {
    da18:	4604      	mov	r4, r0
    SET_CLOCK_SOURCE(DAC_GCLK_ID, 4);
    da1a:	f8c2 3128 	str.w	r3, [r2, #296]	; 0x128
    da1e:	f8d2 3128 	ldr.w	r3, [r2, #296]	; 0x128
    da22:	065d      	lsls	r5, r3, #25
    da24:	d4fb      	bmi.n	da1e <_ZN9ClearCore21DigitalInOutAnalogOut13DacInitializeEv+0x12>
    da26:	f8d2 3128 	ldr.w	r3, [r2, #296]	; 0x128
    da2a:	4933      	ldr	r1, [pc, #204]	; (daf8 <_ZN9ClearCore21DigitalInOutAnalogOut13DacInitializeEv+0xec>)
    da2c:	2004      	movs	r0, #4
    da2e:	f360 0303 	bfi	r3, r0, #0, #4
    da32:	f8c2 3128 	str.w	r3, [r2, #296]	; 0x128
    da36:	f8d2 3128 	ldr.w	r3, [r2, #296]	; 0x128
    da3a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    da3e:	f8c2 3128 	str.w	r3, [r2, #296]	; 0x128
    da42:	684b      	ldr	r3, [r1, #4]
    da44:	06d8      	lsls	r0, r3, #27
    da46:	d4fc      	bmi.n	da42 <_ZN9ClearCore21DigitalInOutAnalogOut13DacInitializeEv+0x36>

    // Set the supply controller's internal bandgap reference
    SUPC->VREF.bit.SEL = SUPC_VREF_SEL_2V5_Val;
    da48:	4a2c      	ldr	r2, [pc, #176]	; (dafc <_ZN9ClearCore21DigitalInOutAnalogOut13DacInitializeEv+0xf0>)

    // Enables the peripheral clock to the DAC
    CLOCK_ENABLE(APBDMASK, DAC_);
    da4a:	492d      	ldr	r1, [pc, #180]	; (db00 <_ZN9ClearCore21DigitalInOutAnalogOut13DacInitializeEv+0xf4>)
    SUPC->VREF.bit.SEL = SUPC_VREF_SEL_2V5_Val;
    da4c:	69d0      	ldr	r0, [r2, #28]

    // Reset the DAC module
    DAC->CTRLA.bit.SWRST = 1;
    da4e:	4b2d      	ldr	r3, [pc, #180]	; (db04 <_ZN9ClearCore21DigitalInOutAnalogOut13DacInitializeEv+0xf8>)
    SUPC->VREF.bit.SEL = SUPC_VREF_SEL_2V5_Val;
    da50:	2507      	movs	r5, #7
    da52:	f365 4013 	bfi	r0, r5, #16, #4
    da56:	61d0      	str	r0, [r2, #28]
    CLOCK_ENABLE(APBDMASK, DAC_);
    da58:	6a0a      	ldr	r2, [r1, #32]
    da5a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
    da5e:	620a      	str	r2, [r1, #32]
    DAC->CTRLA.bit.SWRST = 1;
    da60:	781a      	ldrb	r2, [r3, #0]
    da62:	f042 0201 	orr.w	r2, r2, #1
    da66:	701a      	strb	r2, [r3, #0]
    SYNCBUSY_WAIT(DAC, DAC_SYNCBUSY_SWRST);
    da68:	689a      	ldr	r2, [r3, #8]
    da6a:	07d2      	lsls	r2, r2, #31
    da6c:	d4fc      	bmi.n	da68 <_ZN9ClearCore21DigitalInOutAnalogOut13DacInitializeEv+0x5c>

    // Use differential mode
    DAC->CTRLB.bit.DIFF = 1;
    da6e:	785a      	ldrb	r2, [r3, #1]
    da70:	f042 0201 	orr.w	r2, r2, #1
    da74:	705a      	strb	r2, [r3, #1]

    // Set to internal bandgap reference
    DAC->CTRLB.bit.REFSEL = DAC_CTRLB_REFSEL_INTREF_Val;
    da76:	785a      	ldrb	r2, [r3, #1]
    da78:	f042 0206 	orr.w	r2, r2, #6
    da7c:	705a      	strb	r2, [r3, #1]

    // Enable the DAC
    DAC->DACCTRL[0].bit.ENABLE = 1;
    da7e:	899a      	ldrh	r2, [r3, #12]
    da80:	f042 0202 	orr.w	r2, r2, #2
    da84:	819a      	strh	r2, [r3, #12]
    // Set refresh rate to (5 x 30) = 150 us
    DAC->DACCTRL[0].bit.REFRESH = 0x5;
    da86:	899a      	ldrh	r2, [r3, #12]
    da88:	2105      	movs	r1, #5
    da8a:	f361 220b 	bfi	r2, r1, #8, #4
    da8e:	819a      	strh	r2, [r3, #12]
    // Current control: CC12M (6 MHz < GCLK_DAC <= 12 MHz)
    DAC->DACCTRL[0].bit.CCTRL = DAC_DACCTRL_CCTRL_CC12M_Val;
    da90:	899a      	ldrh	r2, [r3, #12]
    da92:	2102      	movs	r1, #2
    da94:	f361 0283 	bfi	r2, r1, #2, #2
    da98:	819a      	strh	r2, [r3, #12]

/**
    Write a value to the DAC DATA register.
**/
void DigitalInOutAnalogOut::DacRegisterWrite(uint16_t value) {
    if (DAC->DATA[0].reg != value) {
    da9a:	8a1b      	ldrh	r3, [r3, #16]
    da9c:	b29b      	uxth	r3, r3
    da9e:	bb23      	cbnz	r3, daea <_ZN9ClearCore21DigitalInOutAnalogOut13DacInitializeEv+0xde>
    m_dacZero = NvmMgr.Int16(NvmManager::NVM_LOC_DAC_ZERO);
    daa0:	4b19      	ldr	r3, [pc, #100]	; (db08 <_ZN9ClearCore21DigitalInOutAnalogOut13DacInitializeEv+0xfc>)
    daa2:	681d      	ldr	r5, [r3, #0]
    daa4:	f44f 71ee 	mov.w	r1, #476	; 0x1dc
    daa8:	4628      	mov	r0, r5
    daaa:	f004 f839 	bl	11b20 <_ZN9ClearCore10NvmManager5Int16ENS0_12NvmLocationsE>
    m_dacSpan = NvmMgr.Int16(NvmManager::NVM_LOC_DAC_SPAN);
    daae:	f44f 71ef 	mov.w	r1, #478	; 0x1de
    m_dacZero = NvmMgr.Int16(NvmManager::NVM_LOC_DAC_ZERO);
    dab2:	f8a4 0068 	strh.w	r0, [r4, #104]	; 0x68
    m_dacSpan = NvmMgr.Int16(NvmManager::NVM_LOC_DAC_SPAN);
    dab6:	4628      	mov	r0, r5
    dab8:	f004 f832 	bl	11b20 <_ZN9ClearCore10NvmManager5Int16ENS0_12NvmLocationsE>
    if (m_dacZero > DAC_MAX_VALUE) {
    dabc:	f8b4 3068 	ldrh.w	r3, [r4, #104]	; 0x68
    m_dacSpan = NvmMgr.Int16(NvmManager::NVM_LOC_DAC_SPAN);
    dac0:	b280      	uxth	r0, r0
    if (m_dacZero > DAC_MAX_VALUE) {
    dac2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
    m_dacSpan = NvmMgr.Int16(NvmManager::NVM_LOC_DAC_SPAN);
    dac6:	f8a4 006a 	strh.w	r0, [r4, #106]	; 0x6a
    if (m_dacZero > DAC_MAX_VALUE) {
    daca:	461a      	mov	r2, r3
    dacc:	db03      	blt.n	dad6 <_ZN9ClearCore21DigitalInOutAnalogOut13DacInitializeEv+0xca>
        m_dacZero = 0;
    dace:	2300      	movs	r3, #0
    dad0:	461a      	mov	r2, r3
    dad2:	f8a4 3068 	strh.w	r3, [r4, #104]	; 0x68
    if (m_dacZero + m_dacSpan > DAC_MAX_VALUE) {
    dad6:	4410      	add	r0, r2
    dad8:	f5b0 6f00 	cmp.w	r0, #2048	; 0x800
    dadc:	db04      	blt.n	dae8 <_ZN9ClearCore21DigitalInOutAnalogOut13DacInitializeEv+0xdc>
        m_dacSpan = DAC_DEFAULT_SPAN - m_dacZero;
    dade:	f5c3 63d4 	rsb	r3, r3, #1696	; 0x6a0
    dae2:	3304      	adds	r3, #4
    dae4:	f8a4 306a 	strh.w	r3, [r4, #106]	; 0x6a
    dae8:	bd38      	pop	{r3, r4, r5, pc}
        SYNCBUSY_WAIT(DAC, DAC_SYNCBUSY_DATA0);
    daea:	4a06      	ldr	r2, [pc, #24]	; (db04 <_ZN9ClearCore21DigitalInOutAnalogOut13DacInitializeEv+0xf8>)
    daec:	6893      	ldr	r3, [r2, #8]
    daee:	f013 0304 	ands.w	r3, r3, #4
    daf2:	d1fb      	bne.n	daec <_ZN9ClearCore21DigitalInOutAnalogOut13DacInitializeEv+0xe0>
        DAC->DATA[0].reg = value;
    daf4:	8213      	strh	r3, [r2, #16]
    daf6:	e7d3      	b.n	daa0 <_ZN9ClearCore21DigitalInOutAnalogOut13DacInitializeEv+0x94>
    daf8:	40001c00 	.word	0x40001c00
    dafc:	40001800 	.word	0x40001800
    db00:	40000800 	.word	0x40000800
    db04:	43002400 	.word	0x43002400
    db08:	20001f18 	.word	0x20001f18

0000db0c <_ZN9ClearCore21DigitalInOutAnalogOut9DacEnableEv>:
void DigitalInOutAnalogOut::DacEnable() {
    db0c:	b470      	push	{r4, r5, r6}
    if (DAC->DATA[0].reg != value) {
    db0e:	4a2e      	ldr	r2, [pc, #184]	; (dbc8 <_ZN9ClearCore21DigitalInOutAnalogOut9DacEnableEv+0xbc>)
    DacRegisterWrite(m_dacZero);
    db10:	f8b0 1068 	ldrh.w	r1, [r0, #104]	; 0x68
    if (DAC->DATA[0].reg != value) {
    db14:	8a13      	ldrh	r3, [r2, #16]
    db16:	b29b      	uxth	r3, r3
    db18:	4299      	cmp	r1, r3
    db1a:	d003      	beq.n	db24 <_ZN9ClearCore21DigitalInOutAnalogOut9DacEnableEv+0x18>
        SYNCBUSY_WAIT(DAC, DAC_SYNCBUSY_DATA0);
    db1c:	6893      	ldr	r3, [r2, #8]
    db1e:	075d      	lsls	r5, r3, #29
    db20:	d4fc      	bmi.n	db1c <_ZN9ClearCore21DigitalInOutAnalogOut9DacEnableEv+0x10>
        DAC->DATA[0].reg = value;
    db22:	8211      	strh	r1, [r2, #16]
    PMUX_ENABLE(m_inputPort, m_inputDataBit);   // (-) DAC output
    db24:	68c3      	ldr	r3, [r0, #12]
    db26:	4929      	ldr	r1, [pc, #164]	; (dbcc <_ZN9ClearCore21DigitalInOutAnalogOut9DacEnableEv+0xc0>)
    db28:	6904      	ldr	r4, [r0, #16]
    SYNCBUSY_WAIT(DAC, DAC_SYNCBUSY_ENABLE);
    db2a:	4a27      	ldr	r2, [pc, #156]	; (dbc8 <_ZN9ClearCore21DigitalInOutAnalogOut9DacEnableEv+0xbc>)
    PMUX_ENABLE(m_inputPort, m_inputDataBit);   // (-) DAC output
    db2c:	eb01 13c3 	add.w	r3, r1, r3, lsl #7
    db30:	4423      	add	r3, r4
    db32:	f893 4040 	ldrb.w	r4, [r3, #64]	; 0x40
    db36:	f044 0401 	orr.w	r4, r4, #1
    db3a:	f883 4040 	strb.w	r4, [r3, #64]	; 0x40
    PMUX_ENABLE(m_analogPort, m_analogDataBit); // (+) DAC output
    db3e:	6e03      	ldr	r3, [r0, #96]	; 0x60
    db40:	6e44      	ldr	r4, [r0, #100]	; 0x64
    db42:	eb01 13c3 	add.w	r3, r1, r3, lsl #7
    db46:	4423      	add	r3, r4
    db48:	f893 1040 	ldrb.w	r1, [r3, #64]	; 0x40
    db4c:	f041 0101 	orr.w	r1, r1, #1
    db50:	f883 1040 	strb.w	r1, [r3, #64]	; 0x40
    SYNCBUSY_WAIT(DAC, DAC_SYNCBUSY_ENABLE);
    db54:	6893      	ldr	r3, [r2, #8]
    db56:	079c      	lsls	r4, r3, #30
    db58:	d4fc      	bmi.n	db54 <_ZN9ClearCore21DigitalInOutAnalogOut9DacEnableEv+0x48>
    if (!DAC->CTRLA.bit.ENABLE) {
    db5a:	7813      	ldrb	r3, [r2, #0]
    db5c:	0799      	lsls	r1, r3, #30
    db5e:	d407      	bmi.n	db70 <_ZN9ClearCore21DigitalInOutAnalogOut9DacEnableEv+0x64>
        DAC->CTRLA.bit.ENABLE = 1;
    db60:	7813      	ldrb	r3, [r2, #0]
        SYNCBUSY_WAIT(DAC, DAC_SYNCBUSY_ENABLE);
    db62:	4919      	ldr	r1, [pc, #100]	; (dbc8 <_ZN9ClearCore21DigitalInOutAnalogOut9DacEnableEv+0xbc>)
        DAC->CTRLA.bit.ENABLE = 1;
    db64:	f043 0302 	orr.w	r3, r3, #2
    db68:	7013      	strb	r3, [r2, #0]
        SYNCBUSY_WAIT(DAC, DAC_SYNCBUSY_ENABLE);
    db6a:	688b      	ldr	r3, [r1, #8]
    db6c:	079a      	lsls	r2, r3, #30
    db6e:	d4fc      	bmi.n	db6a <_ZN9ClearCore21DigitalInOutAnalogOut9DacEnableEv+0x5e>
    while (!DAC->STATUS.vec.READY) {
    db70:	4a15      	ldr	r2, [pc, #84]	; (dbc8 <_ZN9ClearCore21DigitalInOutAnalogOut9DacEnableEv+0xbc>)
    db72:	79d3      	ldrb	r3, [r2, #7]
    db74:	079b      	lsls	r3, r3, #30
    db76:	d0fc      	beq.n	db72 <_ZN9ClearCore21DigitalInOutAnalogOut9DacEnableEv+0x66>
        index &= 0xf;   // guard against index out of bounds
    db78:	7902      	ldrb	r2, [r0, #4]
        m_fadeCounter.m_valuesBuf[index] = value;
    db7a:	4b15      	ldr	r3, [pc, #84]	; (dbd0 <_ZN9ClearCore21DigitalInOutAnalogOut9DacEnableEv+0xc4>)
    db7c:	f002 010f 	and.w	r1, r2, #15
    db80:	185a      	adds	r2, r3, r1
    db82:	2400      	movs	r4, #0
    db84:	f882 408d 	strb.w	r4, [r2, #141]	; 0x8d
    ShiftReg.LedInPwm(m_ledMask, true, m_clearCorePin);
    db88:	6884      	ldr	r4, [r0, #8]
        state ? m_fadeCounter.m_activeMask |= 1 << index
    db8a:	f8b3 6074 	ldrh.w	r6, [r3, #116]	; 0x74
        state ? m_patternMasks[pattern] |= ledMask
    db8e:	f8d3 00e8 	ldr.w	r0, [r3, #232]	; 0xe8
        state ? m_fadeCounter.m_activeMask |= 1 << index
    db92:	2201      	movs	r2, #1
        m_fadeCounter.m_analogMasks[index] = ledMask;
    db94:	eb03 0581 	add.w	r5, r3, r1, lsl #2
        state ? m_fadeCounter.m_activeMask |= 1 << index
    db98:	408a      	lsls	r2, r1
        state ? m_patternMasks[pattern] |= ledMask
    db9a:	4320      	orrs	r0, r4
        state ? m_fadeCounter.m_activeMask |= 1 << index
    db9c:	4332      	orrs	r2, r6
        state ? m_patternMasks[pattern] |= ledMask
    db9e:	f8c3 00e8 	str.w	r0, [r3, #232]	; 0xe8
        state ? m_fadeCounter.m_activeMask |= 1 << index
    dba2:	f8a3 2074 	strh.w	r2, [r3, #116]	; 0x74
        m_fadeCounter.m_analogMasks[index] = ledMask;
    dba6:	f8c5 40a0 	str.w	r4, [r5, #160]	; 0xa0
        atomic_or_fetch(&m_patternOutputs[LED_BLINK_IO_SET], bitsToSet);
    dbaa:	33f4      	adds	r3, #244	; 0xf4
    dbac:	f3bf 8f5b 	dmb	ish
    dbb0:	e853 2f00 	ldrex	r2, [r3]
    dbb4:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
    dbb8:	e843 2100 	strex	r1, r2, [r3]
    dbbc:	2900      	cmp	r1, #0
    dbbe:	d1f7      	bne.n	dbb0 <_ZN9ClearCore21DigitalInOutAnalogOut9DacEnableEv+0xa4>
    dbc0:	f3bf 8f5b 	dmb	ish
}
    dbc4:	bc70      	pop	{r4, r5, r6}
    dbc6:	4770      	bx	lr
    dbc8:	43002400 	.word	0x43002400
    dbcc:	41008000 	.word	0x41008000
    dbd0:	200019d8 	.word	0x200019d8

0000dbd4 <_ZN9ClearCore21DigitalInOutAnalogOut7RefreshEv>:
    switch (m_mode) {
    dbd4:	7983      	ldrb	r3, [r0, #6]
    dbd6:	2b06      	cmp	r3, #6
    dbd8:	d805      	bhi.n	dbe6 <_ZN9ClearCore21DigitalInOutAnalogOut7RefreshEv+0x12>
    dbda:	2201      	movs	r2, #1
    dbdc:	fa02 f303 	lsl.w	r3, r2, r3
    dbe0:	f013 0f54 	tst.w	r3, #84	; 0x54
    dbe4:	d100      	bne.n	dbe8 <_ZN9ClearCore21DigitalInOutAnalogOut7RefreshEv+0x14>
    dbe6:	4770      	bx	lr
            DigitalInOut::Refresh();
    dbe8:	f000 bc30 	b.w	e44c <_ZN9ClearCore12DigitalInOut7RefreshEv>

0000dbec <_ZN9ClearCore21DigitalInOutAnalogOut4ModeENS_9Connector14ConnectorModesE>:
bool DigitalInOutAnalogOut::Mode(ConnectorModes newMode) {
    dbec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    if (m_mode == newMode) {
    dbee:	7983      	ldrb	r3, [r0, #6]
    dbf0:	428b      	cmp	r3, r1
    dbf2:	d06e      	beq.n	dcd2 <_ZN9ClearCore21DigitalInOutAnalogOut4ModeENS_9Connector14ConnectorModesE+0xe6>
    switch (newMode) {
    dbf4:	1e8a      	subs	r2, r1, #2
    dbf6:	460c      	mov	r4, r1
    dbf8:	4605      	mov	r5, r0
    dbfa:	2a04      	cmp	r2, #4
    dbfc:	d80d      	bhi.n	dc1a <_ZN9ClearCore21DigitalInOutAnalogOut4ModeENS_9Connector14ConnectorModesE+0x2e>
    dbfe:	e8df f002 	tbb	[pc, r2]
    dc02:	0311      	.short	0x0311
    dc04:	0c11      	.short	0x0c11
    dc06:	11          	.byte	0x11
    dc07:	00          	.byte	0x00
            DigitalInOut::Mode(INPUT_DIGITAL);
    dc08:	2102      	movs	r1, #2
    dc0a:	f000 fad7 	bl	e1bc <_ZN9ClearCore12DigitalInOut4ModeENS_9Connector14ConnectorModesE>
            DacEnable();
    dc0e:	4628      	mov	r0, r5
    dc10:	f7ff ff7c 	bl	db0c <_ZN9ClearCore21DigitalInOutAnalogOut9DacEnableEv>
            m_mode = newMode;
    dc14:	2303      	movs	r3, #3
    dc16:	71ab      	strb	r3, [r5, #6]
            break;
    dc18:	4623      	mov	r3, r4
    return (m_mode == newMode);
    dc1a:	1ae0      	subs	r0, r4, r3
    dc1c:	fab0 f080 	clz	r0, r0
    dc20:	0940      	lsrs	r0, r0, #5
    dc22:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        atomic_and_fetch(&m_patternOutputs[LED_BLINK_IO_SET], ~bitsToClr);
    dc24:	4b2c      	ldr	r3, [pc, #176]	; (dcd8 <_ZN9ClearCore21DigitalInOutAnalogOut4ModeENS_9Connector14ConnectorModesE+0xec>)
    dc26:	f3bf 8f5b 	dmb	ish
    dc2a:	e853 2f00 	ldrex	r2, [r3]
    dc2e:	f422 1280 	bic.w	r2, r2, #1048576	; 0x100000
    dc32:	e843 2100 	strex	r1, r2, [r3]
    dc36:	2900      	cmp	r1, #0
    dc38:	d1f7      	bne.n	dc2a <_ZN9ClearCore21DigitalInOutAnalogOut4ModeENS_9Connector14ConnectorModesE+0x3e>
    dc3a:	f3bf 8f5b 	dmb	ish
        index &= 0xf;   // guard against index out of bounds
    dc3e:	792a      	ldrb	r2, [r5, #4]
                                              : m_fadeCounter.m_activeMask &= ~(1 << index);
    dc40:	f833 7c80 	ldrh.w	r7, [r3, #-128]
    PMUX_DISABLE(m_inputPort, m_inputDataBit);   // (-) DAC output
    dc44:	68e8      	ldr	r0, [r5, #12]
    ShiftReg.LedInPwm(m_ledMask, false, m_clearCorePin);
    dc46:	68ae      	ldr	r6, [r5, #8]
    PMUX_DISABLE(m_inputPort, m_inputDataBit);   // (-) DAC output
    dc48:	4924      	ldr	r1, [pc, #144]	; (dcdc <_ZN9ClearCore21DigitalInOutAnalogOut4ModeENS_9Connector14ConnectorModesE+0xf0>)
        m_fadeCounter.m_analogMasks[index] = ledMask;
    dc4a:	3bf4      	subs	r3, #244	; 0xf4
    dc4c:	f002 020f 	and.w	r2, r2, #15
                                              : m_fadeCounter.m_activeMask &= ~(1 << index);
    dc50:	f04f 0e01 	mov.w	lr, #1
    dc54:	fa0e fe02 	lsl.w	lr, lr, r2
        m_fadeCounter.m_analogMasks[index] = ledMask;
    dc58:	eb03 0282 	add.w	r2, r3, r2, lsl #2
                                              : m_fadeCounter.m_activeMask &= ~(1 << index);
    dc5c:	ea27 070e 	bic.w	r7, r7, lr
    dc60:	f8a3 7074 	strh.w	r7, [r3, #116]	; 0x74
    dc64:	692f      	ldr	r7, [r5, #16]
        m_fadeCounter.m_analogMasks[index] = ledMask;
    dc66:	f8c2 60a0 	str.w	r6, [r2, #160]	; 0xa0
                                           : m_patternMasks[pattern] &= ~ledMask;
    dc6a:	f8d3 20e8 	ldr.w	r2, [r3, #232]	; 0xe8
    dc6e:	eb01 10c0 	add.w	r0, r1, r0, lsl #7
    dc72:	4438      	add	r0, r7
    dc74:	ea22 0606 	bic.w	r6, r2, r6
    dc78:	f8c3 60e8 	str.w	r6, [r3, #232]	; 0xe8
    dc7c:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
    SYNCBUSY_WAIT(DAC, DAC_SYNCBUSY_ENABLE);
    dc80:	4a17      	ldr	r2, [pc, #92]	; (dce0 <_ZN9ClearCore21DigitalInOutAnalogOut4ModeENS_9Connector14ConnectorModesE+0xf4>)
    PMUX_DISABLE(m_inputPort, m_inputDataBit);   // (-) DAC output
    dc82:	f36f 0300 	bfc	r3, #0, #1
    dc86:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40
    PMUX_DISABLE(m_analogPort, m_analogDataBit); // (+) DAC output
    dc8a:	6e2b      	ldr	r3, [r5, #96]	; 0x60
    dc8c:	6e68      	ldr	r0, [r5, #100]	; 0x64
    dc8e:	eb01 13c3 	add.w	r3, r1, r3, lsl #7
    dc92:	4403      	add	r3, r0
    dc94:	f893 1040 	ldrb.w	r1, [r3, #64]	; 0x40
    dc98:	f36f 0100 	bfc	r1, #0, #1
    dc9c:	f883 1040 	strb.w	r1, [r3, #64]	; 0x40
    SYNCBUSY_WAIT(DAC, DAC_SYNCBUSY_ENABLE);
    dca0:	6893      	ldr	r3, [r2, #8]
    dca2:	f013 0302 	ands.w	r3, r3, #2
    dca6:	d1fb      	bne.n	dca0 <_ZN9ClearCore21DigitalInOutAnalogOut4ModeENS_9Connector14ConnectorModesE+0xb4>
    if (DAC->CTRLA.bit.ENABLE) {
    dca8:	7811      	ldrb	r1, [r2, #0]
    dcaa:	0789      	lsls	r1, r1, #30
    dcac:	d507      	bpl.n	dcbe <_ZN9ClearCore21DigitalInOutAnalogOut4ModeENS_9Connector14ConnectorModesE+0xd2>
        DAC->CTRLA.bit.ENABLE = 0;
    dcae:	7810      	ldrb	r0, [r2, #0]
        SYNCBUSY_WAIT(DAC, DAC_SYNCBUSY_ENABLE);
    dcb0:	490b      	ldr	r1, [pc, #44]	; (dce0 <_ZN9ClearCore21DigitalInOutAnalogOut4ModeENS_9Connector14ConnectorModesE+0xf4>)
        DAC->CTRLA.bit.ENABLE = 0;
    dcb2:	f363 0041 	bfi	r0, r3, #1, #1
    dcb6:	7010      	strb	r0, [r2, #0]
        SYNCBUSY_WAIT(DAC, DAC_SYNCBUSY_ENABLE);
    dcb8:	688b      	ldr	r3, [r1, #8]
    dcba:	079b      	lsls	r3, r3, #30
    dcbc:	d4fc      	bmi.n	dcb8 <_ZN9ClearCore21DigitalInOutAnalogOut4ModeENS_9Connector14ConnectorModesE+0xcc>
            DigitalInOut::Mode(newMode);
    dcbe:	4621      	mov	r1, r4
    dcc0:	4628      	mov	r0, r5
    dcc2:	f000 fa7b 	bl	e1bc <_ZN9ClearCore12DigitalInOut4ModeENS_9Connector14ConnectorModesE>
    dcc6:	79ab      	ldrb	r3, [r5, #6]
    return (m_mode == newMode);
    dcc8:	1ae0      	subs	r0, r4, r3
    dcca:	fab0 f080 	clz	r0, r0
    dcce:	0940      	lsrs	r0, r0, #5
    dcd0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        return true;
    dcd2:	2001      	movs	r0, #1
}
    dcd4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    dcd6:	bf00      	nop
    dcd8:	20001acc 	.word	0x20001acc
    dcdc:	41008000 	.word	0x41008000
    dce0:	43002400 	.word	0x43002400

0000dce4 <_ZN9ClearCore21DigitalInOutAnalogOut5StateEv>:
    switch (m_mode) {
    dce4:	7983      	ldrb	r3, [r0, #6]
    dce6:	2b06      	cmp	r3, #6
    dce8:	d805      	bhi.n	dcf6 <_ZN9ClearCore21DigitalInOutAnalogOut5StateEv+0x12>
    dcea:	2201      	movs	r2, #1
    dcec:	fa02 f303 	lsl.w	r3, r2, r3
    dcf0:	f013 0f54 	tst.w	r3, #84	; 0x54
    dcf4:	d101      	bne.n	dcfa <_ZN9ClearCore21DigitalInOutAnalogOut5StateEv+0x16>
}
    dcf6:	2000      	movs	r0, #0
    dcf8:	4770      	bx	lr
            state = DigitalInOut::State();
    dcfa:	f000 bcad 	b.w	e658 <_ZN9ClearCore12DigitalInOut5StateEv>
    dcfe:	bf00      	nop

0000dd00 <_ZN9ClearCore21DigitalInOutAnalogOut5StateEs>:
    switch (m_mode) {
    dd00:	7983      	ldrb	r3, [r0, #6]
    dd02:	3b02      	subs	r3, #2
    dd04:	2b04      	cmp	r3, #4
    dd06:	d83c      	bhi.n	dd82 <_ZN9ClearCore21DigitalInOutAnalogOut5StateEs+0x82>
    dd08:	e8df f003 	tbb	[pc, r3]
    dd0c:	3b390339 	.word	0x3b390339
    dd10:	39          	.byte	0x39
    dd11:	00          	.byte	0x00
            newState = max(newState, 0);
    dd12:	ea21 71e1 	bic.w	r1, r1, r1, asr #31
bool DigitalInOutAnalogOut::State(int16_t newState) {
    dd16:	b5f0      	push	{r4, r5, r6, r7, lr}
    value = min(value, DAC_MAX_VALUE);
    dd18:	b289      	uxth	r1, r1
    dd1a:	f240 74ff 	movw	r4, #2047	; 0x7ff
    dd1e:	42a1      	cmp	r1, r4
    dd20:	bf28      	it	cs
    dd22:	4621      	movcs	r1, r4
        index &= 0xf;   // guard against index out of bounds
    dd24:	7907      	ldrb	r7, [r0, #4]
    ShiftReg.LedPwmValue(m_clearCorePin, value * UINT8_MAX / DAC_MAX_VALUE);
    dd26:	4d19      	ldr	r5, [pc, #100]	; (dd8c <_ZN9ClearCore21DigitalInOutAnalogOut5StateEs+0x8c>)
        m_fadeCounter.m_valuesBuf[index] = value;
    dd28:	4e19      	ldr	r6, [pc, #100]	; (dd90 <_ZN9ClearCore21DigitalInOutAnalogOut5StateEs+0x90>)
                        / DAC_MAX_VALUE) + m_dacZero;
    dd2a:	4a1a      	ldr	r2, [pc, #104]	; (dd94 <_ZN9ClearCore21DigitalInOutAnalogOut5StateEs+0x94>)
    ShiftReg.LedPwmValue(m_clearCorePin, value * UINT8_MAX / DAC_MAX_VALUE);
    dd2c:	ebc1 2301 	rsb	r3, r1, r1, lsl #8
    dd30:	fb85 e503 	smull	lr, r5, r5, r3
    dd34:	f007 070f 	and.w	r7, r7, #15
    dd38:	441d      	add	r5, r3
    dd3a:	443e      	add	r6, r7
    dd3c:	17db      	asrs	r3, r3, #31
    dd3e:	ebc3 23a5 	rsb	r3, r3, r5, asr #10
    dd42:	f886 308d 	strb.w	r3, [r6, #141]	; 0x8d
    uint16_t command = ((static_cast<uint32_t>(value) * m_dacSpan)
    dd46:	f8b0 506a 	ldrh.w	r5, [r0, #106]	; 0x6a
                        / DAC_MAX_VALUE) + m_dacZero;
    dd4a:	f8b0 3068 	ldrh.w	r3, [r0, #104]	; 0x68
    if (DAC->DATA[0].reg != value) {
    dd4e:	4812      	ldr	r0, [pc, #72]	; (dd98 <_ZN9ClearCore21DigitalInOutAnalogOut5StateEs+0x98>)
    uint16_t command = ((static_cast<uint32_t>(value) * m_dacSpan)
    dd50:	fb01 f105 	mul.w	r1, r1, r5
                        / DAC_MAX_VALUE) + m_dacZero;
    dd54:	fba2 5201 	umull	r5, r2, r2, r1
    dd58:	1a89      	subs	r1, r1, r2
    dd5a:	eb02 0151 	add.w	r1, r2, r1, lsr #1
    dd5e:	eb03 2191 	add.w	r1, r3, r1, lsr #10
    dd62:	b289      	uxth	r1, r1
    if (DAC->DATA[0].reg != value) {
    dd64:	8a03      	ldrh	r3, [r0, #16]
    command = min(command, DAC_MAX_VALUE);
    dd66:	42a1      	cmp	r1, r4
    dd68:	bf28      	it	cs
    dd6a:	4621      	movcs	r1, r4
    if (DAC->DATA[0].reg != value) {
    dd6c:	b29b      	uxth	r3, r3
    dd6e:	4299      	cmp	r1, r3
    dd70:	d009      	beq.n	dd86 <_ZN9ClearCore21DigitalInOutAnalogOut5StateEs+0x86>
        SYNCBUSY_WAIT(DAC, DAC_SYNCBUSY_DATA0);
    dd72:	6883      	ldr	r3, [r0, #8]
    dd74:	075b      	lsls	r3, r3, #29
    dd76:	d4fc      	bmi.n	dd72 <_ZN9ClearCore21DigitalInOutAnalogOut5StateEs+0x72>
        DAC->DATA[0].reg = value;
    dd78:	8201      	strh	r1, [r0, #16]
            success = true;
    dd7a:	2001      	movs	r0, #1
    dd7c:	bdf0      	pop	{r4, r5, r6, r7, pc}
            success = DigitalInOut::State(newState);
    dd7e:	f000 b9c1 	b.w	e104 <_ZN9ClearCore12DigitalInOut5StateEs>
    bool success = false;
    dd82:	2000      	movs	r0, #0
    dd84:	4770      	bx	lr
            success = true;
    dd86:	2001      	movs	r0, #1
}
    dd88:	bdf0      	pop	{r4, r5, r6, r7, pc}
    dd8a:	bf00      	nop
    dd8c:	80100201 	.word	0x80100201
    dd90:	200019d8 	.word	0x200019d8
    dd94:	00200401 	.word	0x00200401
    dd98:	43002400 	.word	0x43002400

0000dd9c <_ZN9ClearCore21DigitalInOutAnalogOut10InitializeE13ClearCorePins>:
void DigitalInOutAnalogOut::Initialize(ClearCorePins clearCorePin) {
    dd9c:	b538      	push	{r3, r4, r5, lr}
    dd9e:	4604      	mov	r4, r0
    dda0:	460d      	mov	r5, r1
    DacInitialize();
    dda2:	f7ff fe33 	bl	da0c <_ZN9ClearCore21DigitalInOutAnalogOut13DacInitializeEv>
    DigitalInOut::Initialize(clearCorePin);
    dda6:	4620      	mov	r0, r4
    dda8:	4629      	mov	r1, r5
    ddaa:	f000 fc75 	bl	e698 <_ZN9ClearCore12DigitalInOut10InitializeE13ClearCorePins>
    PMUX_SELECTION(m_inputPort, m_inputDataBit, PER_ANALOG);   // (-) DAC output
    ddae:	6920      	ldr	r0, [r4, #16]
    ddb0:	07c2      	lsls	r2, r0, #31
    ddb2:	d521      	bpl.n	ddf8 <_ZN9ClearCore21DigitalInOutAnalogOut10InitializeE13ClearCorePins+0x5c>
    ddb4:	68e1      	ldr	r1, [r4, #12]
    ddb6:	01c9      	lsls	r1, r1, #7
    ddb8:	f101 4282 	add.w	r2, r1, #1090519040	; 0x41000000
    ddbc:	f502 4200 	add.w	r2, r2, #32768	; 0x8000
    ddc0:	eb02 0250 	add.w	r2, r2, r0, lsr #1
    ddc4:	2101      	movs	r1, #1
    ddc6:	f892 3030 	ldrb.w	r3, [r2, #48]	; 0x30
    ddca:	f361 1307 	bfi	r3, r1, #4, #4
    ddce:	f882 3030 	strb.w	r3, [r2, #48]	; 0x30
    PMUX_SELECTION(m_analogPort, m_analogDataBit, PER_ANALOG); // (+) DAC output
    ddd2:	6e61      	ldr	r1, [r4, #100]	; 0x64
    ddd4:	07cb      	lsls	r3, r1, #31
    ddd6:	d421      	bmi.n	de1c <_ZN9ClearCore21DigitalInOutAnalogOut10InitializeE13ClearCorePins+0x80>
    ddd8:	6e23      	ldr	r3, [r4, #96]	; 0x60
    ddda:	01db      	lsls	r3, r3, #7
    dddc:	f103 4382 	add.w	r3, r3, #1090519040	; 0x41000000
    dde0:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
    dde4:	eb03 0351 	add.w	r3, r3, r1, lsr #1
    dde8:	2101      	movs	r1, #1
    ddea:	f893 2030 	ldrb.w	r2, [r3, #48]	; 0x30
    ddee:	f361 0203 	bfi	r2, r1, #0, #4
    ddf2:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
    ddf6:	bd38      	pop	{r3, r4, r5, pc}
    PMUX_SELECTION(m_inputPort, m_inputDataBit, PER_ANALOG);   // (-) DAC output
    ddf8:	68e2      	ldr	r2, [r4, #12]
    ddfa:	01d2      	lsls	r2, r2, #7
    ddfc:	f102 4382 	add.w	r3, r2, #1090519040	; 0x41000000
    de00:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
    de04:	eb03 0350 	add.w	r3, r3, r0, lsr #1
    de08:	2101      	movs	r1, #1
    de0a:	f893 2030 	ldrb.w	r2, [r3, #48]	; 0x30
    de0e:	f361 0203 	bfi	r2, r1, #0, #4
    de12:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
    PMUX_SELECTION(m_analogPort, m_analogDataBit, PER_ANALOG); // (+) DAC output
    de16:	6e61      	ldr	r1, [r4, #100]	; 0x64
    de18:	07cb      	lsls	r3, r1, #31
    de1a:	d5dd      	bpl.n	ddd8 <_ZN9ClearCore21DigitalInOutAnalogOut10InitializeE13ClearCorePins+0x3c>
    de1c:	6e22      	ldr	r2, [r4, #96]	; 0x60
    de1e:	01d2      	lsls	r2, r2, #7
    de20:	f102 4282 	add.w	r2, r2, #1090519040	; 0x41000000
    de24:	f502 4200 	add.w	r2, r2, #32768	; 0x8000
    de28:	eb02 0251 	add.w	r2, r2, r1, lsr #1
    de2c:	2101      	movs	r1, #1
    de2e:	f892 3030 	ldrb.w	r3, [r2, #48]	; 0x30
    de32:	f361 1307 	bfi	r3, r1, #4, #4
    de36:	f882 3030 	strb.w	r3, [r2, #48]	; 0x30
    de3a:	bd38      	pop	{r3, r4, r5, pc}

0000de3c <_ZN9ClearCore17DigitalInAnalogIn4ModeEv>:

        \return The connector's current operational mode.
    **/
    virtual ConnectorModes Mode() override {
        return Connector::Mode();
    }
    de3c:	7980      	ldrb	r0, [r0, #6]
    de3e:	4770      	bx	lr

0000de40 <_ZN9ClearCore17DigitalInAnalogIn4TypeEv>:

        \return The type of this connector (Analog Input)
    **/
    Connector::ConnectorTypes Type() override {
        return Connector::ANALOG_IN_DIGITAL_IN_TYPE;
    }
    de40:	2003      	movs	r0, #3
    de42:	4770      	bx	lr

0000de44 <_ZN9ClearCore17DigitalInAnalogIn10IsWritableEv>:

        \return False since this is a read-only connector.
    **/
    bool IsWritable() override {
        return false;
    }
    de44:	2000      	movs	r0, #0
    de46:	4770      	bx	lr

0000de48 <_ZN9ClearCore17DigitalInAnalogIn5StateEs>:
    **/
    bool State(int16_t newState) override {
        // ignore attempts to write state
        (void)newState;
        return false;
    }
    de48:	2000      	movs	r0, #0
    de4a:	4770      	bx	lr

0000de4c <_ZN9ClearCore17DigitalInAnalogIn4ModeENS_9Connector14ConnectorModesE>:
bool DigitalInAnalogIn::FilterTc(uint16_t tc,
                                 AdcManager::FilterUnits theUnits) {
    return AdcMgr.FilterTc(m_adcChannel, tc, theUnits);
}

bool DigitalInAnalogIn::Mode(ConnectorModes newMode) {
    de4c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    // Bail out if we are already in the requested mode
    if (newMode == m_mode) {
    de4e:	7983      	ldrb	r3, [r0, #6]
    de50:	428b      	cmp	r3, r1
    de52:	d072      	beq.n	df3a <_ZN9ClearCore17DigitalInAnalogIn4ModeENS_9Connector14ConnectorModesE+0xee>
        return true;
    }

    switch (newMode) {
    de54:	2901      	cmp	r1, #1
    de56:	460c      	mov	r4, r1
    de58:	4605      	mov	r5, r0
    de5a:	d03c      	beq.n	ded6 <_ZN9ClearCore17DigitalInAnalogIn4ModeENS_9Connector14ConnectorModesE+0x8a>
    de5c:	2902      	cmp	r1, #2
    de5e:	d135      	bne.n	decc <_ZN9ClearCore17DigitalInAnalogIn4ModeENS_9Connector14ConnectorModesE+0x80>
        atomic_or_fetch(&m_patternOutputs[LED_BLINK_IO_SET], bitsToSet);
    de60:	4e37      	ldr	r6, [pc, #220]	; (df40 <_ZN9ClearCore17DigitalInAnalogIn4ModeENS_9Connector14ConnectorModesE+0xf4>)
    de62:	6b03      	ldr	r3, [r0, #48]	; 0x30
    de64:	f3bf 8f5b 	dmb	ish
    de68:	e856 2f00 	ldrex	r2, [r6]
    de6c:	431a      	orrs	r2, r3
    de6e:	e846 2100 	strex	r1, r2, [r6]
    de72:	2900      	cmp	r1, #0
    de74:	d1f8      	bne.n	de68 <_ZN9ClearCore17DigitalInAnalogIn4ModeENS_9Connector14ConnectorModesE+0x1c>
    de76:	f3bf 8f5b 	dmb	ish
        case INPUT_DIGITAL:
            ShiftReg.ShifterState(true, m_modeControlBitMask);
            // If the system has already been initialized, wait until the
            // digital reading is valid then reset the filtered state
            if (ShiftReg.Ready()) {
    de7a:	3ef4      	subs	r6, #244	; 0xf4
    de7c:	f896 3108 	ldrb.w	r3, [r6, #264]	; 0x108
    de80:	b143      	cbz	r3, de94 <_ZN9ClearCore17DigitalInAnalogIn4ModeENS_9Connector14ConnectorModesE+0x48>
    de82:	4b30      	ldr	r3, [pc, #192]	; (df44 <_ZN9ClearCore17DigitalInAnalogIn4ModeENS_9Connector14ConnectorModesE+0xf8>)
    de84:	6b29      	ldr	r1, [r5, #48]	; 0x30
    de86:	681a      	ldr	r2, [r3, #0]
                while (!(AdcMgr.ShiftRegSnapshot() & m_modeControlBitMask)) {
    de88:	6e53      	ldr	r3, [r2, #100]	; 0x64
    de8a:	420b      	tst	r3, r1
    de8c:	d0fc      	beq.n	de88 <_ZN9ClearCore17DigitalInAnalogIn4ModeENS_9Connector14ConnectorModesE+0x3c>
                    continue;
                }
                UpdateFilterState();
    de8e:	4628      	mov	r0, r5
    de90:	f7f6 fdf6 	bl	4a80 <_ZN9ClearCore9DigitalIn17UpdateFilterStateEv>
        index &= 0xf;   // guard against index out of bounds
    de94:	792b      	ldrb	r3, [r5, #4]
                                              : m_fadeCounter.m_activeMask &= ~(1 << index);
    de96:	f8b6 1074 	ldrh.w	r1, [r6, #116]	; 0x74
            }
            ShiftReg.LedInPwm(m_ledMask, false, m_clearCorePin);
    de9a:	68af      	ldr	r7, [r5, #8]
                                           : m_patternMasks[pattern] &= ~ledMask;
    de9c:	f8d6 20e8 	ldr.w	r2, [r6, #232]	; 0xe8
        m_fadeCounter.m_analogMasks[index] = ledMask;
    dea0:	f003 030f 	and.w	r3, r3, #15
                                              : m_fadeCounter.m_activeMask &= ~(1 << index);
    dea4:	2001      	movs	r0, #1
    dea6:	4098      	lsls	r0, r3
    dea8:	ea21 0100 	bic.w	r1, r1, r0
        m_fadeCounter.m_analogMasks[index] = ledMask;
    deac:	eb06 0383 	add.w	r3, r6, r3, lsl #2
                                              : m_fadeCounter.m_activeMask &= ~(1 << index);
    deb0:	f8a6 1074 	strh.w	r1, [r6, #116]	; 0x74
            m_mode = newMode;
    deb4:	2002      	movs	r0, #2
                                           : m_patternMasks[pattern] &= ~ledMask;
    deb6:	ea22 0207 	bic.w	r2, r2, r7
            m_analogValid = false;
    deba:	2100      	movs	r1, #0
        m_fadeCounter.m_analogMasks[index] = ledMask;
    debc:	f8c3 70a0 	str.w	r7, [r3, #160]	; 0xa0
                                           : m_patternMasks[pattern] &= ~ledMask;
    dec0:	f8c6 20e8 	str.w	r2, [r6, #232]	; 0xe8
            break;
    dec4:	4603      	mov	r3, r0
            m_mode = newMode;
    dec6:	71a8      	strb	r0, [r5, #6]
            m_analogValid = false;
    dec8:	f885 1040 	strb.w	r1, [r5, #64]	; 0x40
            break;
        default:
            break;
    }

    return (m_mode == newMode);
    decc:	1ae0      	subs	r0, r4, r3
    dece:	fab0 f080 	clz	r0, r0
    ded2:	0940      	lsrs	r0, r0, #5
    ded4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        atomic_and_fetch(&m_patternOutputs[LED_BLINK_IO_SET], ~bitsToClr);
    ded6:	6b03      	ldr	r3, [r0, #48]	; 0x30
    ded8:	4e19      	ldr	r6, [pc, #100]	; (df40 <_ZN9ClearCore17DigitalInAnalogIn4ModeENS_9Connector14ConnectorModesE+0xf4>)
    deda:	f3bf 8f5b 	dmb	ish
    dede:	43db      	mvns	r3, r3
    dee0:	e856 2f00 	ldrex	r2, [r6]
    dee4:	401a      	ands	r2, r3
    dee6:	e846 2100 	strex	r1, r2, [r6]
    deea:	2900      	cmp	r1, #0
    deec:	d1f8      	bne.n	dee0 <_ZN9ClearCore17DigitalInAnalogIn4ModeENS_9Connector14ConnectorModesE+0x94>
    deee:	f3bf 8f5b 	dmb	ish
            if (ShiftReg.Ready()) {
    def2:	3ef4      	subs	r6, #244	; 0xf4
    def4:	f896 3108 	ldrb.w	r3, [r6, #264]	; 0x108
            m_mode = newMode;
    def8:	71ac      	strb	r4, [r5, #6]
            if (ShiftReg.Ready()) {
    defa:	b11b      	cbz	r3, df04 <_ZN9ClearCore17DigitalInAnalogIn4ModeENS_9Connector14ConnectorModesE+0xb8>
                while (!m_analogValid) {
    defc:	f895 3040 	ldrb.w	r3, [r5, #64]	; 0x40
    df00:	2b00      	cmp	r3, #0
    df02:	d0fb      	beq.n	defc <_ZN9ClearCore17DigitalInAnalogIn4ModeENS_9Connector14ConnectorModesE+0xb0>
        index &= 0xf;   // guard against index out of bounds
    df04:	792b      	ldrb	r3, [r5, #4]
        state ? m_fadeCounter.m_activeMask |= 1 << index
    df06:	f8b6 2074 	ldrh.w	r2, [r6, #116]	; 0x74
            ShiftReg.LedInPwm(m_ledMask, true, m_clearCorePin);
    df0a:	68ad      	ldr	r5, [r5, #8]
        state ? m_patternMasks[pattern] |= ledMask
    df0c:	f8d6 10e8 	ldr.w	r1, [r6, #232]	; 0xe8
        state ? m_fadeCounter.m_activeMask |= 1 << index
    df10:	2001      	movs	r0, #1
        m_fadeCounter.m_analogMasks[index] = ledMask;
    df12:	f003 030f 	and.w	r3, r3, #15
    df16:	eb06 0783 	add.w	r7, r6, r3, lsl #2
        state ? m_fadeCounter.m_activeMask |= 1 << index
    df1a:	fa00 f303 	lsl.w	r3, r0, r3
    df1e:	431a      	orrs	r2, r3
        state ? m_patternMasks[pattern] |= ledMask
    df20:	4603      	mov	r3, r0
    return (m_mode == newMode);
    df22:	1ae0      	subs	r0, r4, r3
    df24:	4329      	orrs	r1, r5
    df26:	fab0 f080 	clz	r0, r0
        m_fadeCounter.m_analogMasks[index] = ledMask;
    df2a:	f8c7 50a0 	str.w	r5, [r7, #160]	; 0xa0
        state ? m_patternMasks[pattern] |= ledMask
    df2e:	f8c6 10e8 	str.w	r1, [r6, #232]	; 0xe8
        state ? m_fadeCounter.m_activeMask |= 1 << index
    df32:	f8a6 2074 	strh.w	r2, [r6, #116]	; 0x74
    df36:	0940      	lsrs	r0, r0, #5
    df38:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        return true;
    df3a:	2001      	movs	r0, #1
}
    df3c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    df3e:	bf00      	nop
    df40:	20001acc 	.word	0x20001acc
    df44:	20001e04 	.word	0x20001e04

0000df48 <_ZN9ClearCore17DigitalInAnalogInC1ENS_13ShiftRegister5MasksES2_PK15PeripheralRouteNS_10AdcManager11AdcChannelsE>:
DigitalInAnalogIn::DigitalInAnalogIn(ShiftRegister::Masks ledMask,
    df48:	b570      	push	{r4, r5, r6, lr}
    df4a:	4604      	mov	r4, r0
    df4c:	4616      	mov	r6, r2
      m_analogValid(false) {}
    df4e:	461a      	mov	r2, r3
DigitalInAnalogIn::DigitalInAnalogIn(ShiftRegister::Masks ledMask,
    df50:	f89d 5010 	ldrb.w	r5, [sp, #16]
      m_analogValid(false) {}
    df54:	f7f6 fd4c 	bl	49f0 <_ZN9ClearCore9DigitalInC1ENS_13ShiftRegister5MasksEPK15PeripheralRoute>
    df58:	2300      	movs	r3, #0
    df5a:	4a05      	ldr	r2, [pc, #20]	; (df70 <_ZN9ClearCore17DigitalInAnalogInC1ENS_13ShiftRegister5MasksES2_PK15PeripheralRouteNS_10AdcManager11AdcChannelsE+0x28>)
    df5c:	6326      	str	r6, [r4, #48]	; 0x30
    df5e:	f884 5034 	strb.w	r5, [r4, #52]	; 0x34
    df62:	6022      	str	r2, [r4, #0]
    df64:	63a3      	str	r3, [r4, #56]	; 0x38
    df66:	63e3      	str	r3, [r4, #60]	; 0x3c
    df68:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
    df6c:	4620      	mov	r0, r4
    df6e:	bd70      	pop	{r4, r5, r6, pc}
    df70:	00023288 	.word	0x00023288

0000df74 <_ZN9ClearCore17DigitalInAnalogIn7RefreshEv>:
    switch (m_mode) {
    df74:	7982      	ldrb	r2, [r0, #6]
    df76:	2a01      	cmp	r2, #1
    df78:	d004      	beq.n	df84 <_ZN9ClearCore17DigitalInAnalogIn7RefreshEv+0x10>
    df7a:	2a02      	cmp	r2, #2
    df7c:	d101      	bne.n	df82 <_ZN9ClearCore17DigitalInAnalogIn7RefreshEv+0xe>
            DigitalIn::Refresh();
    df7e:	f7f6 bc87 	b.w	4890 <_ZN9ClearCore9DigitalIn7RefreshEv>
    df82:	4770      	bx	lr
            if (!(AdcMgr.ShiftRegSnapshot() & m_modeControlBitMask)) {
    df84:	4a17      	ldr	r2, [pc, #92]	; (dfe4 <_ZN9ClearCore17DigitalInAnalogIn7RefreshEv+0x70>)
    df86:	6b01      	ldr	r1, [r0, #48]	; 0x30
    df88:	6812      	ldr	r2, [r2, #0]
    df8a:	4603      	mov	r3, r0
    df8c:	6e50      	ldr	r0, [r2, #100]	; 0x64
    df8e:	4208      	tst	r0, r1
    df90:	d126      	bne.n	dfe0 <_ZN9ClearCore17DigitalInAnalogIn7RefreshEv+0x6c>
                if (!m_analogValid) {
    df92:	f893 1040 	ldrb.w	r1, [r3, #64]	; 0x40
void DigitalInAnalogIn::Refresh() {
    df96:	b470      	push	{r4, r5, r6}
                if (!m_analogValid) {
    df98:	b991      	cbnz	r1, dfc0 <_ZN9ClearCore17DigitalInAnalogIn7RefreshEv+0x4c>
                    AdcMgr.FilterReset(m_adcChannel, *m_adcResultConvertedPtr);
    df9a:	6b99      	ldr	r1, [r3, #56]	; 0x38
    df9c:	f893 4034 	ldrb.w	r4, [r3, #52]	; 0x34
    dfa0:	8808      	ldrh	r0, [r1, #0]
        \param[in] adcChannel ADC Channel filter to reset.
        \param[in] newSetting The initial filter value.
        \return Success.
    **/
    bool FilterReset(AdcChannels adcChannel, uint16_t newSetting) {
        if (adcChannel >= ADC_CHANNEL_COUNT) {
    dfa2:	2c07      	cmp	r4, #7
    dfa4:	b280      	uxth	r0, r0
    dfa6:	dc07      	bgt.n	dfb8 <_ZN9ClearCore17DigitalInAnalogIn7RefreshEv+0x44>
        m_z = (newSetting << 16);
    dfa8:	0400      	lsls	r0, r0, #16
    dfaa:	eb02 06c4 	add.w	r6, r2, r4, lsl #3
            return false;
        }
        m_analogFilter[adcChannel].Reset(newSetting);
        m_AdcResultsConvertedFiltered[adcChannel] =
    dfae:	3408      	adds	r4, #8
        return (m_z >> 16);
    dfb0:	0c05      	lsrs	r5, r0, #16
        m_z = (newSetting << 16);
    dfb2:	6270      	str	r0, [r6, #36]	; 0x24
    dfb4:	f822 5014 	strh.w	r5, [r2, r4, lsl #1]
                    m_analogValid = true;
    dfb8:	2201      	movs	r2, #1
    dfba:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    dfbe:	e000      	b.n	dfc2 <_ZN9ClearCore17DigitalInAnalogIn7RefreshEv+0x4e>
    dfc0:	6b99      	ldr	r1, [r3, #56]	; 0x38
                uint8_t value = (*m_adcResultConvertedPtr) >> 7;
    dfc2:	880a      	ldrh	r2, [r1, #0]
        index &= 0xf;   // guard against index out of bounds
    dfc4:	7918      	ldrb	r0, [r3, #4]
        m_fadeCounter.m_valuesBuf[index] = value;
    dfc6:	4908      	ldr	r1, [pc, #32]	; (dfe8 <_ZN9ClearCore17DigitalInAnalogIn7RefreshEv+0x74>)
    dfc8:	f3c2 13c8 	ubfx	r3, r2, #7, #9
    dfcc:	f000 020f 	and.w	r2, r0, #15
                if (value < 0x03) {
    dfd0:	b2d8      	uxtb	r0, r3
    dfd2:	440a      	add	r2, r1
    dfd4:	2802      	cmp	r0, #2
    dfd6:	bfd8      	it	le
    dfd8:	2300      	movle	r3, #0
    dfda:	f882 308d 	strb.w	r3, [r2, #141]	; 0x8d
}
    dfde:	bc70      	pop	{r4, r5, r6}
    dfe0:	4770      	bx	lr
    dfe2:	bf00      	nop
    dfe4:	20001e04 	.word	0x20001e04
    dfe8:	200019d8 	.word	0x200019d8

0000dfec <_ZN9ClearCore17DigitalInAnalogIn10InitializeE13ClearCorePins>:
    AdcMgr.FilterTc(m_adcChannel,
    dfec:	4b29      	ldr	r3, [pc, #164]	; (e094 <_ZN9ClearCore17DigitalInAnalogIn10InitializeE13ClearCorePins+0xa8>)
void DigitalInAnalogIn::Initialize(ClearCorePins clearCorePin) {
    dfee:	b570      	push	{r4, r5, r6, lr}
    dff0:	4604      	mov	r4, r0
    AdcMgr.FilterTc(m_adcChannel,
    dff2:	681d      	ldr	r5, [r3, #0]
void DigitalInAnalogIn::Initialize(ClearCorePins clearCorePin) {
    dff4:	460e      	mov	r6, r1
                    AdcManager::FILTER_UNIT_MS);
    dff6:	4628      	mov	r0, r5
    dff8:	f894 1034 	ldrb.w	r1, [r4, #52]	; 0x34
    dffc:	2301      	movs	r3, #1
    dffe:	2202      	movs	r2, #2
    e000:	f7ff fc64 	bl	d8cc <_ZN9ClearCore10AdcManager8FilterTcENS0_11AdcChannelsEtNS0_11FilterUnitsE>
    e004:	f894 3034 	ldrb.w	r3, [r4, #52]	; 0x34
    e008:	005b      	lsls	r3, r3, #1
        return m_AdcResultsConvertedFiltered[adcChannel];
    e00a:	f103 0210 	add.w	r2, r3, #16
        return m_AdcResultsConverted[adcChannel];
    e00e:	442b      	add	r3, r5
        return m_AdcResultsConvertedFiltered[adcChannel];
    e010:	4415      	add	r5, r2
    m_adcResultConvertedPtr = &AdcMgr.ConvertedResult(m_adcChannel);
    e012:	63a3      	str	r3, [r4, #56]	; 0x38
    DigitalIn::Initialize(clearCorePin);
    e014:	4631      	mov	r1, r6
    m_adcResultConvertedFilteredPtr = &AdcMgr.FilteredResult(m_adcChannel);
    e016:	63e5      	str	r5, [r4, #60]	; 0x3c
    DigitalIn::Initialize(clearCorePin);
    e018:	4620      	mov	r0, r4
    e01a:	f7f6 fbd3 	bl	47c4 <_ZN9ClearCore9DigitalIn10InitializeE13ClearCorePins>
    Mode(INPUT_ANALOG);
    e01e:	6823      	ldr	r3, [r4, #0]
    e020:	4a1d      	ldr	r2, [pc, #116]	; (e098 <_ZN9ClearCore17DigitalInAnalogIn10InitializeE13ClearCorePins+0xac>)
    e022:	685b      	ldr	r3, [r3, #4]
    e024:	4293      	cmp	r3, r2
    e026:	d130      	bne.n	e08a <_ZN9ClearCore17DigitalInAnalogIn10InitializeE13ClearCorePins+0x9e>
    if (newMode == m_mode) {
    e028:	79a3      	ldrb	r3, [r4, #6]
    e02a:	2b01      	cmp	r3, #1
    e02c:	d02c      	beq.n	e088 <_ZN9ClearCore17DigitalInAnalogIn10InitializeE13ClearCorePins+0x9c>
        atomic_and_fetch(&m_patternOutputs[LED_BLINK_IO_SET], ~bitsToClr);
    e02e:	6b23      	ldr	r3, [r4, #48]	; 0x30
    e030:	4a1a      	ldr	r2, [pc, #104]	; (e09c <_ZN9ClearCore17DigitalInAnalogIn10InitializeE13ClearCorePins+0xb0>)
    e032:	f3bf 8f5b 	dmb	ish
    e036:	43db      	mvns	r3, r3
    e038:	e852 1f00 	ldrex	r1, [r2]
    e03c:	4019      	ands	r1, r3
    e03e:	e842 1000 	strex	r0, r1, [r2]
    e042:	2800      	cmp	r0, #0
    e044:	d1f8      	bne.n	e038 <_ZN9ClearCore17DigitalInAnalogIn10InitializeE13ClearCorePins+0x4c>
    e046:	f3bf 8f5b 	dmb	ish
            if (ShiftReg.Ready()) {
    e04a:	3af4      	subs	r2, #244	; 0xf4
    e04c:	f892 3108 	ldrb.w	r3, [r2, #264]	; 0x108
            m_mode = newMode;
    e050:	2101      	movs	r1, #1
    e052:	71a1      	strb	r1, [r4, #6]
            if (ShiftReg.Ready()) {
    e054:	b11b      	cbz	r3, e05e <_ZN9ClearCore17DigitalInAnalogIn10InitializeE13ClearCorePins+0x72>
                while (!m_analogValid) {
    e056:	f894 3040 	ldrb.w	r3, [r4, #64]	; 0x40
    e05a:	2b00      	cmp	r3, #0
    e05c:	d0fb      	beq.n	e056 <_ZN9ClearCore17DigitalInAnalogIn10InitializeE13ClearCorePins+0x6a>
        index &= 0xf;   // guard against index out of bounds
    e05e:	7923      	ldrb	r3, [r4, #4]
        state ? m_fadeCounter.m_activeMask |= 1 << index
    e060:	f8b2 6074 	ldrh.w	r6, [r2, #116]	; 0x74
            ShiftReg.LedInPwm(m_ledMask, true, m_clearCorePin);
    e064:	68a4      	ldr	r4, [r4, #8]
        state ? m_patternMasks[pattern] |= ledMask
    e066:	f8d2 00e8 	ldr.w	r0, [r2, #232]	; 0xe8
        m_fadeCounter.m_analogMasks[index] = ledMask;
    e06a:	f003 010f 	and.w	r1, r3, #15
        state ? m_fadeCounter.m_activeMask |= 1 << index
    e06e:	2301      	movs	r3, #1
        m_fadeCounter.m_analogMasks[index] = ledMask;
    e070:	eb02 0581 	add.w	r5, r2, r1, lsl #2
        state ? m_fadeCounter.m_activeMask |= 1 << index
    e074:	408b      	lsls	r3, r1
    e076:	4333      	orrs	r3, r6
        state ? m_patternMasks[pattern] |= ledMask
    e078:	4320      	orrs	r0, r4
        m_fadeCounter.m_analogMasks[index] = ledMask;
    e07a:	f8c5 40a0 	str.w	r4, [r5, #160]	; 0xa0
        state ? m_fadeCounter.m_activeMask |= 1 << index
    e07e:	f8a2 3074 	strh.w	r3, [r2, #116]	; 0x74
        state ? m_patternMasks[pattern] |= ledMask
    e082:	f8c2 00e8 	str.w	r0, [r2, #232]	; 0xe8
    e086:	bd70      	pop	{r4, r5, r6, pc}
    e088:	bd70      	pop	{r4, r5, r6, pc}
    Mode(INPUT_ANALOG);
    e08a:	4620      	mov	r0, r4
    e08c:	2101      	movs	r1, #1
}
    e08e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    Mode(INPUT_ANALOG);
    e092:	4718      	bx	r3
    e094:	20001e04 	.word	0x20001e04
    e098:	0000de4d 	.word	0x0000de4d
    e09c:	20001acc 	.word	0x20001acc

0000e0a0 <_ZN9ClearCore17DigitalInAnalogIn5StateEv>:
    switch (m_mode) {
    e0a0:	7982      	ldrb	r2, [r0, #6]
    e0a2:	2a01      	cmp	r2, #1
    e0a4:	d005      	beq.n	e0b2 <_ZN9ClearCore17DigitalInAnalogIn5StateEv+0x12>
    e0a6:	2a02      	cmp	r2, #2
    e0a8:	d101      	bne.n	e0ae <_ZN9ClearCore17DigitalInAnalogIn5StateEv+0xe>
            state = DigitalIn::State();
    e0aa:	f7f6 bb77 	b.w	479c <_ZN9ClearCore9DigitalIn5StateEv>
            state = 0;
    e0ae:	2000      	movs	r0, #0
    e0b0:	4770      	bx	lr
            if (StatusMgr.AdcIsInTimeout()) {
    e0b2:	4b0b      	ldr	r3, [pc, #44]	; (e0e0 <_ZN9ClearCore17DigitalInAnalogIn5StateEv+0x40>)
int16_t DigitalInAnalogIn::State() {
    e0b4:	b510      	push	{r4, lr}
    e0b6:	4604      	mov	r4, r0
            if (StatusMgr.AdcIsInTimeout()) {
    e0b8:	6818      	ldr	r0, [r3, #0]
    e0ba:	f003 faeb 	bl	11694 <_ZN9ClearCore13StatusManager14AdcIsInTimeoutEv>
    e0be:	b958      	cbnz	r0, e0d8 <_ZN9ClearCore17DigitalInAnalogIn5StateEv+0x38>
                        (15 - AdcMgr.AdcResolution());
    e0c0:	4b08      	ldr	r3, [pc, #32]	; (e0e4 <_ZN9ClearCore17DigitalInAnalogIn5StateEv+0x44>)
                state = *m_adcResultConvertedFilteredPtr >>
    e0c2:	6be2      	ldr	r2, [r4, #60]	; 0x3c
                        (15 - AdcMgr.AdcResolution());
    e0c4:	681b      	ldr	r3, [r3, #0]
                state = *m_adcResultConvertedFilteredPtr >>
    e0c6:	8810      	ldrh	r0, [r2, #0]
                        (15 - AdcMgr.AdcResolution());
    e0c8:	f893 306c 	ldrb.w	r3, [r3, #108]	; 0x6c
                state = *m_adcResultConvertedFilteredPtr >>
    e0cc:	b280      	uxth	r0, r0
                        (15 - AdcMgr.AdcResolution());
    e0ce:	f1c3 030f 	rsb	r3, r3, #15
                state = *m_adcResultConvertedFilteredPtr >>
    e0d2:	4118      	asrs	r0, r3
    e0d4:	b200      	sxth	r0, r0
    e0d6:	bd10      	pop	{r4, pc}
                state = -1;
    e0d8:	f04f 30ff 	mov.w	r0, #4294967295
}
    e0dc:	bd10      	pop	{r4, pc}
    e0de:	bf00      	nop
    e0e0:	20001f0c 	.word	0x20001f0c
    e0e4:	20001e04 	.word	0x20001e04

0000e0e8 <_ZN9ClearCore12DigitalInOut4ModeEv>:
    }
    e0e8:	7980      	ldrb	r0, [r0, #6]
    e0ea:	4770      	bx	lr

0000e0ec <_ZN9ClearCore12DigitalInOut4TypeEv>:
    }
    e0ec:	2001      	movs	r0, #1
    e0ee:	4770      	bx	lr

0000e0f0 <_ZN9ClearCore12DigitalInOut10IsWritableEv>:
        return m_mode == OUTPUT_DIGITAL || m_mode == OUTPUT_PWM;
    e0f0:	7980      	ldrb	r0, [r0, #6]
    e0f2:	2804      	cmp	r0, #4
    e0f4:	bf1d      	ittte	ne
    e0f6:	3806      	subne	r0, #6
    e0f8:	fab0 f080 	clzne	r0, r0
    e0fc:	0940      	lsrne	r0, r0, #5
    e0fe:	2001      	moveq	r0, #1
    }
    e100:	4770      	bx	lr
    e102:	bf00      	nop

0000e104 <_ZN9ClearCore12DigitalInOut5StateEs>:
bool DigitalInOut::State(int16_t newState) {
    bool success = false;
    m_pulseActive = false;
    m_pulseStopPending = false;

    switch (m_mode) {
    e104:	7982      	ldrb	r2, [r0, #6]
    m_pulseActive = false;
    e106:	2300      	movs	r3, #0
    switch (m_mode) {
    e108:	2a04      	cmp	r2, #4
    m_pulseActive = false;
    e10a:	f880 3059 	strb.w	r3, [r0, #89]	; 0x59
    m_pulseStopPending = false;
    e10e:	f880 305b 	strb.w	r3, [r0, #91]	; 0x5b
    switch (m_mode) {
    e112:	d02a      	beq.n	e16a <_ZN9ClearCore12DigitalInOut5StateEs+0x66>
    e114:	2a06      	cmp	r2, #6
    e116:	d126      	bne.n	e166 <_ZN9ClearCore12DigitalInOut5StateEs+0x62>
            // Not writable in input mode
            success = false;
            break;
        case OUTPUT_PWM:
            // Cap the input at max PWM (255)
            if (static_cast<uint16_t>(newState) > UINT8_MAX) {
    e118:	b28b      	uxth	r3, r1
    e11a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
    if (m_mode != OUTPUT_PWM) {
        return false;
    }

    // Wait for the TC CC value to be ready to be written
    uint8_t ccBufVal = (m_logicInversion) ? newDuty : 255 - newDuty;
    e11e:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
            if (static_cast<uint16_t>(newState) > UINT8_MAX) {
    e122:	bf28      	it	cs
    e124:	21ff      	movcs	r1, #255	; 0xff
bool DigitalInOut::State(int16_t newState) {
    e126:	b470      	push	{r4, r5, r6}
    e128:	b2c9      	uxtb	r1, r1
    uint8_t ccBufVal = (m_logicInversion) ? newDuty : 255 - newDuty;
    e12a:	2b00      	cmp	r3, #0
    e12c:	d040      	beq.n	e1b0 <_ZN9ClearCore12DigitalInOut5StateEs+0xac>
    e12e:	460d      	mov	r5, r1
    if (m_tc->COUNT8.CCBUF[m_tcPadNum].reg != ccBufVal) {
    e130:	6c02      	ldr	r2, [r0, #64]	; 0x40
    e132:	f890 3044 	ldrb.w	r3, [r0, #68]	; 0x44
    e136:	18d6      	adds	r6, r2, r3
    e138:	f896 4030 	ldrb.w	r4, [r6, #48]	; 0x30
    e13c:	42ac      	cmp	r4, r5
    e13e:	d008      	beq.n	e152 <_ZN9ClearCore12DigitalInOut5StateEs+0x4e>
        uint32_t syncMask = m_tcPadNum ? TC_SYNCBUSY_CC1 : TC_SYNCBUSY_CC0;
    e140:	2b00      	cmp	r3, #0
    e142:	bf0c      	ite	eq
    e144:	2440      	moveq	r4, #64	; 0x40
    e146:	2480      	movne	r4, #128	; 0x80
        SYNCBUSY_WAIT(&m_tc->COUNT8, syncMask);
    e148:	6913      	ldr	r3, [r2, #16]
    e14a:	4223      	tst	r3, r4
    e14c:	d1fc      	bne.n	e148 <_ZN9ClearCore12DigitalInOut5StateEs+0x44>
        m_tc->COUNT8.CCBUF[m_tcPadNum].reg = ccBufVal;
    e14e:	f886 5030 	strb.w	r5, [r6, #48]	; 0x30
        index &= 0xf;   // guard against index out of bounds
    e152:	7902      	ldrb	r2, [r0, #4]
        m_fadeCounter.m_valuesBuf[index] = value;
    e154:	4b18      	ldr	r3, [pc, #96]	; (e1b8 <_ZN9ClearCore12DigitalInOut5StateEs+0xb4>)
    e156:	f002 020f 	and.w	r2, r2, #15
    e15a:	4413      	add	r3, r2
    e15c:	2001      	movs	r0, #1
    e15e:	f883 108d 	strb.w	r1, [r3, #141]	; 0x8d
}
    e162:	bc70      	pop	{r4, r5, r6}
    e164:	4770      	bx	lr
    bool success = false;
    e166:	4618      	mov	r0, r3
    e168:	4770      	bx	lr
            if (m_outState != static_cast<bool>(newState)) {
    e16a:	1c0b      	adds	r3, r1, #0
    e16c:	f890 2045 	ldrb.w	r2, [r0, #69]	; 0x45
    e170:	bf18      	it	ne
    e172:	2301      	movne	r3, #1
    e174:	429a      	cmp	r2, r3
    e176:	d004      	beq.n	e182 <_ZN9ClearCore12DigitalInOut5StateEs+0x7e>
                m_overloadTripCnt = OVERLOAD_TRIP_TICKS;
    e178:	220c      	movs	r2, #12
                m_outState = static_cast<bool>(newState);
    e17a:	f880 3045 	strb.w	r3, [r0, #69]	; 0x45
                m_overloadTripCnt = OVERLOAD_TRIP_TICKS;
    e17e:	f880 2058 	strb.w	r2, [r0, #88]	; 0x58
            OutputPin(newState && !m_overloadFoldbackCnt);
    e182:	b121      	cbz	r1, e18e <_ZN9ClearCore12DigitalInOut5StateEs+0x8a>
    e184:	f8b0 105c 	ldrh.w	r1, [r0, #92]	; 0x5c
    e188:	fab1 f181 	clz	r1, r1
    e18c:	0949      	lsrs	r1, r1, #5
    bool m_pulseValue;
    bool m_pulseStopPending;
    uint16_t m_overloadFoldbackCnt;

    void OutputPin(bool val) {
        DATA_OUTPUT_STATE(m_outputPort, m_outputDataMask,
    e18e:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
    e192:	6b82      	ldr	r2, [r0, #56]	; 0x38
    e194:	428b      	cmp	r3, r1
    e196:	6b03      	ldr	r3, [r0, #48]	; 0x30
    e198:	ea4f 13c3 	mov.w	r3, r3, lsl #7
    e19c:	f103 4382 	add.w	r3, r3, #1090519040	; 0x41000000
    e1a0:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
    e1a4:	f04f 0001 	mov.w	r0, #1
    e1a8:	bf14      	ite	ne
    e1aa:	619a      	strne	r2, [r3, #24]
    e1ac:	615a      	streq	r2, [r3, #20]
    e1ae:	4770      	bx	lr
    uint8_t ccBufVal = (m_logicInversion) ? newDuty : 255 - newDuty;
    e1b0:	43cd      	mvns	r5, r1
    e1b2:	b2ed      	uxtb	r5, r5
    e1b4:	e7bc      	b.n	e130 <_ZN9ClearCore12DigitalInOut5StateEs+0x2c>
    e1b6:	bf00      	nop
    e1b8:	200019d8 	.word	0x200019d8

0000e1bc <_ZN9ClearCore12DigitalInOut4ModeENS_9Connector14ConnectorModesE>:
    if (newMode == m_mode) {
    e1bc:	7983      	ldrb	r3, [r0, #6]
    e1be:	428b      	cmp	r3, r1
    e1c0:	f000 80cb 	beq.w	e35a <_ZN9ClearCore12DigitalInOut4ModeENS_9Connector14ConnectorModesE+0x19e>
bool DigitalInOut::Mode(ConnectorModes newMode) {
    e1c4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    switch (newMode) {
    e1c8:	2904      	cmp	r1, #4
bool DigitalInOut::Mode(ConnectorModes newMode) {
    e1ca:	b082      	sub	sp, #8
    e1cc:	4604      	mov	r4, r0
    e1ce:	460d      	mov	r5, r1
    switch (newMode) {
    e1d0:	f000 8087 	beq.w	e2e2 <_ZN9ClearCore12DigitalInOut4ModeENS_9Connector14ConnectorModesE+0x126>
    e1d4:	2906      	cmp	r1, #6
    e1d6:	d008      	beq.n	e1ea <_ZN9ClearCore12DigitalInOut4ModeENS_9Connector14ConnectorModesE+0x2e>
    e1d8:	2902      	cmp	r1, #2
    e1da:	d033      	beq.n	e244 <_ZN9ClearCore12DigitalInOut4ModeENS_9Connector14ConnectorModesE+0x88>
    return (m_mode == newMode);
    e1dc:	1ae8      	subs	r0, r5, r3
    e1de:	fab0 f080 	clz	r0, r0
    e1e2:	0940      	lsrs	r0, r0, #5
}
    e1e4:	b002      	add	sp, #8
    e1e6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
            State(0);
    e1ea:	6803      	ldr	r3, [r0, #0]
    e1ec:	4a79      	ldr	r2, [pc, #484]	; (e3d4 <_ZN9ClearCore12DigitalInOut4ModeENS_9Connector14ConnectorModesE+0x218>)
    e1ee:	695b      	ldr	r3, [r3, #20]
            m_mode = newMode;
    e1f0:	71a1      	strb	r1, [r4, #6]
    e1f2:	4293      	cmp	r3, r2
    e1f4:	f040 80b3 	bne.w	e35e <_ZN9ClearCore12DigitalInOut4ModeENS_9Connector14ConnectorModesE+0x1a2>
    if (m_tc->COUNT8.CCBUF[m_tcPadNum].reg != ccBufVal) {
    e1f8:	6c01      	ldr	r1, [r0, #64]	; 0x40
    e1fa:	f890 6044 	ldrb.w	r6, [r0, #68]	; 0x44
    uint8_t ccBufVal = (m_logicInversion) ? newDuty : 255 - newDuty;
    e1fe:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
    m_pulseActive = false;
    e202:	2200      	movs	r2, #0
    if (m_tc->COUNT8.CCBUF[m_tcPadNum].reg != ccBufVal) {
    e204:	1988      	adds	r0, r1, r6
    uint8_t ccBufVal = (m_logicInversion) ? newDuty : 255 - newDuty;
    e206:	f083 0301 	eor.w	r3, r3, #1
    m_pulseActive = false;
    e20a:	f884 2059 	strb.w	r2, [r4, #89]	; 0x59
    m_pulseStopPending = false;
    e20e:	f884 205b 	strb.w	r2, [r4, #91]	; 0x5b
    uint8_t ccBufVal = (m_logicInversion) ? newDuty : 255 - newDuty;
    e212:	425b      	negs	r3, r3
    if (m_tc->COUNT8.CCBUF[m_tcPadNum].reg != ccBufVal) {
    e214:	f890 2030 	ldrb.w	r2, [r0, #48]	; 0x30
    uint8_t ccBufVal = (m_logicInversion) ? newDuty : 255 - newDuty;
    e218:	b2db      	uxtb	r3, r3
    if (m_tc->COUNT8.CCBUF[m_tcPadNum].reg != ccBufVal) {
    e21a:	429a      	cmp	r2, r3
    e21c:	d008      	beq.n	e230 <_ZN9ClearCore12DigitalInOut4ModeENS_9Connector14ConnectorModesE+0x74>
        uint32_t syncMask = m_tcPadNum ? TC_SYNCBUSY_CC1 : TC_SYNCBUSY_CC0;
    e21e:	2e00      	cmp	r6, #0
    e220:	bf0c      	ite	eq
    e222:	2640      	moveq	r6, #64	; 0x40
    e224:	2680      	movne	r6, #128	; 0x80
        SYNCBUSY_WAIT(&m_tc->COUNT8, syncMask);
    e226:	690a      	ldr	r2, [r1, #16]
    e228:	4232      	tst	r2, r6
    e22a:	d1fc      	bne.n	e226 <_ZN9ClearCore12DigitalInOut4ModeENS_9Connector14ConnectorModesE+0x6a>
        m_tc->COUNT8.CCBUF[m_tcPadNum].reg = ccBufVal;
    e22c:	f880 3030 	strb.w	r3, [r0, #48]	; 0x30
    }
    ShiftReg.LedPwmValue(m_clearCorePin, newDuty);
    e230:	f9b4 1004 	ldrsh.w	r1, [r4, #4]
    e234:	4e68      	ldr	r6, [pc, #416]	; (e3d8 <_ZN9ClearCore12DigitalInOut4ModeENS_9Connector14ConnectorModesE+0x21c>)
    e236:	f001 020f 	and.w	r2, r1, #15
    e23a:	18b3      	adds	r3, r6, r2
    e23c:	2000      	movs	r0, #0
    e23e:	f883 008d 	strb.w	r0, [r3, #141]	; 0x8d
    e242:	e093      	b.n	e36c <_ZN9ClearCore12DigitalInOut4ModeENS_9Connector14ConnectorModesE+0x1b0>
            m_pulseActive = false;
    e244:	2300      	movs	r3, #0
    e246:	f890 203c 	ldrb.w	r2, [r0, #60]	; 0x3c
            m_mode = newMode;
    e24a:	71a1      	strb	r1, [r4, #6]
            m_pulseActive = false;
    e24c:	f880 3059 	strb.w	r3, [r0, #89]	; 0x59
            m_pulseStopPending = false;
    e250:	f880 305b 	strb.w	r3, [r0, #91]	; 0x5b
    e254:	6b03      	ldr	r3, [r0, #48]	; 0x30
    e256:	6b81      	ldr	r1, [r0, #56]	; 0x38
    e258:	01db      	lsls	r3, r3, #7
    e25a:	2a00      	cmp	r2, #0
    e25c:	d177      	bne.n	e34e <_ZN9ClearCore12DigitalInOut4ModeENS_9Connector14ConnectorModesE+0x192>
    e25e:	f103 4282 	add.w	r2, r3, #1090519040	; 0x41000000
    e262:	f502 4200 	add.w	r2, r2, #32768	; 0x8000
    e266:	6151      	str	r1, [r2, #20]
            ShiftReg.LedInPwm(m_ledMask, false, m_clearCorePin);
    e268:	f9b4 1004 	ldrsh.w	r1, [r4, #4]
        m_fadeCounter.m_analogMasks[index] = ledMask;
    e26c:	4e5a      	ldr	r6, [pc, #360]	; (e3d8 <_ZN9ClearCore12DigitalInOut4ModeENS_9Connector14ConnectorModesE+0x21c>)
            PMUX_DISABLE(m_outputPort, m_outputDataBit);
    e26e:	6b67      	ldr	r7, [r4, #52]	; 0x34
                                              : m_fadeCounter.m_activeMask &= ~(1 << index);
    e270:	f8b6 8074 	ldrh.w	r8, [r6, #116]	; 0x74
            ShiftReg.LedInPwm(m_ledMask, false, m_clearCorePin);
    e274:	f8d4 c008 	ldr.w	ip, [r4, #8]
                                           : m_patternMasks[pattern] &= ~ledMask;
    e278:	f8d6 00e8 	ldr.w	r0, [r6, #232]	; 0xe8
            PMUX_DISABLE(m_outputPort, m_outputDataBit);
    e27c:	f103 4382 	add.w	r3, r3, #1090519040	; 0x41000000
        m_fadeCounter.m_analogMasks[index] = ledMask;
    e280:	f001 020f 	and.w	r2, r1, #15
                                              : m_fadeCounter.m_activeMask &= ~(1 << index);
    e284:	f04f 0e01 	mov.w	lr, #1
    e288:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
    e28c:	443b      	add	r3, r7
    e28e:	fa0e f702 	lsl.w	r7, lr, r2
    e292:	ea28 0707 	bic.w	r7, r8, r7
    e296:	f8a6 7074 	strh.w	r7, [r6, #116]	; 0x74
        m_fadeCounter.m_analogMasks[index] = ledMask;
    e29a:	eb06 0282 	add.w	r2, r6, r2, lsl #2
                                           : m_patternMasks[pattern] &= ~ledMask;
    e29e:	ea6f 070c 	mvn.w	r7, ip
    e2a2:	4038      	ands	r0, r7
        m_fadeCounter.m_analogMasks[index] = ledMask;
    e2a4:	f8c2 c0a0 	str.w	ip, [r2, #160]	; 0xa0
                                           : m_patternMasks[pattern] &= ~ledMask;
    e2a8:	f8c6 00e8 	str.w	r0, [r6, #232]	; 0xe8
    e2ac:	f893 2040 	ldrb.w	r2, [r3, #64]	; 0x40
    e2b0:	f36f 0200 	bfc	r2, #0, #1
    e2b4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    return true;
}

void DigitalInOut::IsInHwFault(bool inFault) {
    if (inFault != m_isInFault) {
    e2b8:	f894 303d 	ldrb.w	r3, [r4, #61]	; 0x3d
    e2bc:	2b00      	cmp	r3, #0
    e2be:	f000 8086 	beq.w	e3ce <_ZN9ClearCore12DigitalInOut4ModeENS_9Connector14ConnectorModesE+0x212>
            m_patternMasks[LED_BLINK_OVERLOAD] &= ~ledMask;
    e2c2:	f8d6 30f0 	ldr.w	r3, [r6, #240]	; 0xf0
        m_isInFault = inFault;
        ShiftReg.LedInFault(m_ledMask, m_isInFault);
        StatusMgr.OverloadUpdate(1UL << m_clearCorePin, m_isInFault);
    e2c6:	4845      	ldr	r0, [pc, #276]	; (e3dc <_ZN9ClearCore12DigitalInOut4ModeENS_9Connector14ConnectorModesE+0x220>)
    e2c8:	fa0e f101 	lsl.w	r1, lr, r1
        m_isInFault = inFault;
    e2cc:	2200      	movs	r2, #0
    e2ce:	401f      	ands	r7, r3
    e2d0:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
        StatusMgr.OverloadUpdate(1UL << m_clearCorePin, m_isInFault);
    e2d4:	6800      	ldr	r0, [r0, #0]
    e2d6:	f8c6 70f0 	str.w	r7, [r6, #240]	; 0xf0
    e2da:	f003 fbcf 	bl	11a7c <_ZN9ClearCore13StatusManager14OverloadUpdateEmb>
    e2de:	79a3      	ldrb	r3, [r4, #6]
    e2e0:	e77c      	b.n	e1dc <_ZN9ClearCore12DigitalInOut4ModeENS_9Connector14ConnectorModesE+0x20>
            m_overloadTripCnt = OVERLOAD_TRIP_TICKS;
    e2e2:	220c      	movs	r2, #12
            State(m_outState);
    e2e4:	6803      	ldr	r3, [r0, #0]
            m_overloadTripCnt = OVERLOAD_TRIP_TICKS;
    e2e6:	f880 2058 	strb.w	r2, [r0, #88]	; 0x58
            m_overloadFoldbackCnt = 0;
    e2ea:	2600      	movs	r6, #0
            m_mode = newMode;
    e2ec:	71a1      	strb	r1, [r4, #6]
            State(m_outState);
    e2ee:	695b      	ldr	r3, [r3, #20]
    e2f0:	f890 1045 	ldrb.w	r1, [r0, #69]	; 0x45
            m_overloadFoldbackCnt = 0;
    e2f4:	f8a0 605c 	strh.w	r6, [r0, #92]	; 0x5c
            State(m_outState);
    e2f8:	4798      	blx	r3
        index &= 0xf;   // guard against index out of bounds
    e2fa:	7922      	ldrb	r2, [r4, #4]
        m_fadeCounter.m_analogMasks[index] = ledMask;
    e2fc:	4936      	ldr	r1, [pc, #216]	; (e3d8 <_ZN9ClearCore12DigitalInOut4ModeENS_9Connector14ConnectorModesE+0x21c>)
            PMUX_DISABLE(m_outputPort, m_outputDataBit);
    e2fe:	6b20      	ldr	r0, [r4, #48]	; 0x30
    e300:	6b63      	ldr	r3, [r4, #52]	; 0x34
                                              : m_fadeCounter.m_activeMask &= ~(1 << index);
    e302:	f8b1 7074 	ldrh.w	r7, [r1, #116]	; 0x74
        m_fadeCounter.m_analogMasks[index] = ledMask;
    e306:	f002 020f 	and.w	r2, r2, #15
                                              : m_fadeCounter.m_activeMask &= ~(1 << index);
    e30a:	f04f 0e01 	mov.w	lr, #1
    e30e:	eb03 13c0 	add.w	r3, r3, r0, lsl #7
    e312:	fa0e f002 	lsl.w	r0, lr, r2
    e316:	ea27 0700 	bic.w	r7, r7, r0
            ShiftReg.LedInPwm(m_ledMask, false, m_clearCorePin);
    e31a:	f8d4 e008 	ldr.w	lr, [r4, #8]
                                           : m_patternMasks[pattern] &= ~ledMask;
    e31e:	f8d1 00e8 	ldr.w	r0, [r1, #232]	; 0xe8
                                              : m_fadeCounter.m_activeMask &= ~(1 << index);
    e322:	f8a1 7074 	strh.w	r7, [r1, #116]	; 0x74
        m_fadeCounter.m_analogMasks[index] = ledMask;
    e326:	eb01 0282 	add.w	r2, r1, r2, lsl #2
            PMUX_DISABLE(m_outputPort, m_outputDataBit);
    e32a:	f103 4382 	add.w	r3, r3, #1090519040	; 0x41000000
    e32e:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
                                           : m_patternMasks[pattern] &= ~ledMask;
    e332:	ea20 000e 	bic.w	r0, r0, lr
        m_fadeCounter.m_analogMasks[index] = ledMask;
    e336:	f8c2 e0a0 	str.w	lr, [r2, #160]	; 0xa0
                                           : m_patternMasks[pattern] &= ~ledMask;
    e33a:	f8c1 00e8 	str.w	r0, [r1, #232]	; 0xe8
    e33e:	f893 2040 	ldrb.w	r2, [r3, #64]	; 0x40
    e342:	f366 0200 	bfi	r2, r6, #0, #1
    e346:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    e34a:	79a3      	ldrb	r3, [r4, #6]
            break;
    e34c:	e746      	b.n	e1dc <_ZN9ClearCore12DigitalInOut4ModeENS_9Connector14ConnectorModesE+0x20>
    e34e:	f103 4282 	add.w	r2, r3, #1090519040	; 0x41000000
    e352:	f502 4200 	add.w	r2, r2, #32768	; 0x8000
    e356:	6191      	str	r1, [r2, #24]
    e358:	e786      	b.n	e268 <_ZN9ClearCore12DigitalInOut4ModeENS_9Connector14ConnectorModesE+0xac>
        return true;
    e35a:	2001      	movs	r0, #1
    e35c:	4770      	bx	lr
            State(0);
    e35e:	2100      	movs	r1, #0
    e360:	4798      	blx	r3
    e362:	f9b4 1004 	ldrsh.w	r1, [r4, #4]
    e366:	4e1c      	ldr	r6, [pc, #112]	; (e3d8 <_ZN9ClearCore12DigitalInOut4ModeENS_9Connector14ConnectorModesE+0x21c>)
    e368:	f001 020f 	and.w	r2, r1, #15
        state ? m_patternMasks[pattern] |= ledMask
    e36c:	f8d6 30e8 	ldr.w	r3, [r6, #232]	; 0xe8
            PMUX_ENABLE(m_outputPort, m_outputDataBit);
    e370:	6b60      	ldr	r0, [r4, #52]	; 0x34
    e372:	9301      	str	r3, [sp, #4]
    e374:	6b23      	ldr	r3, [r4, #48]	; 0x30
            ShiftReg.LedInPwm(m_ledMask, true, m_clearCorePin);
    e376:	68a7      	ldr	r7, [r4, #8]
        state ? m_fadeCounter.m_activeMask |= 1 << index
    e378:	f8b6 8074 	ldrh.w	r8, [r6, #116]	; 0x74
            PMUX_ENABLE(m_outputPort, m_outputDataBit);
    e37c:	eb00 13c3 	add.w	r3, r0, r3, lsl #7
    e380:	f04f 0c01 	mov.w	ip, #1
        state ? m_patternMasks[pattern] |= ledMask
    e384:	9801      	ldr	r0, [sp, #4]
        state ? m_fadeCounter.m_activeMask |= 1 << index
    e386:	fa0c fe02 	lsl.w	lr, ip, r2
    e38a:	f103 4382 	add.w	r3, r3, #1090519040	; 0x41000000
        m_fadeCounter.m_analogMasks[index] = ledMask;
    e38e:	eb06 0282 	add.w	r2, r6, r2, lsl #2
    e392:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
        state ? m_fadeCounter.m_activeMask |= 1 << index
    e396:	ea4e 0e08 	orr.w	lr, lr, r8
        state ? m_patternMasks[pattern] |= ledMask
    e39a:	4338      	orrs	r0, r7
        state ? m_fadeCounter.m_activeMask |= 1 << index
    e39c:	f8a6 e074 	strh.w	lr, [r6, #116]	; 0x74
        m_fadeCounter.m_analogMasks[index] = ledMask;
    e3a0:	f8c2 70a0 	str.w	r7, [r2, #160]	; 0xa0
        state ? m_patternMasks[pattern] |= ledMask
    e3a4:	f8c6 00e8 	str.w	r0, [r6, #232]	; 0xe8
    e3a8:	f893 2040 	ldrb.w	r2, [r3, #64]	; 0x40
    e3ac:	ea42 020c 	orr.w	r2, r2, ip
    e3b0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    if (inFault != m_isInFault) {
    e3b4:	f894 303d 	ldrb.w	r3, [r4, #61]	; 0x3d
    e3b8:	2b00      	cmp	r3, #0
    e3ba:	d090      	beq.n	e2de <_ZN9ClearCore12DigitalInOut4ModeENS_9Connector14ConnectorModesE+0x122>
            m_patternMasks[LED_BLINK_OVERLOAD] &= ~ledMask;
    e3bc:	f8d6 30f0 	ldr.w	r3, [r6, #240]	; 0xf0
        StatusMgr.OverloadUpdate(1UL << m_clearCorePin, m_isInFault);
    e3c0:	4806      	ldr	r0, [pc, #24]	; (e3dc <_ZN9ClearCore12DigitalInOut4ModeENS_9Connector14ConnectorModesE+0x220>)
    e3c2:	fa0c f101 	lsl.w	r1, ip, r1
        m_isInFault = inFault;
    e3c6:	2200      	movs	r2, #0
    e3c8:	ea23 0707 	bic.w	r7, r3, r7
    e3cc:	e780      	b.n	e2d0 <_ZN9ClearCore12DigitalInOut4ModeENS_9Connector14ConnectorModesE+0x114>
    if (inFault != m_isInFault) {
    e3ce:	2302      	movs	r3, #2
    e3d0:	e704      	b.n	e1dc <_ZN9ClearCore12DigitalInOut4ModeENS_9Connector14ConnectorModesE+0x20>
    e3d2:	bf00      	nop
    e3d4:	0000e105 	.word	0x0000e105
    e3d8:	200019d8 	.word	0x200019d8
    e3dc:	20001f0c 	.word	0x20001f0c

0000e3e0 <_ZN9ClearCore12DigitalInOutC1ENS_13ShiftRegister5MasksEPK15PeripheralRouteS5_b>:
DigitalInOut::DigitalInOut(ShiftRegister::Masks ledMask,
    e3e0:	b570      	push	{r4, r5, r6, lr}
    e3e2:	461d      	mov	r5, r3
    e3e4:	4604      	mov	r4, r0
    e3e6:	f89d 6010 	ldrb.w	r6, [sp, #16]
      m_overloadFoldbackCnt(0) {
    e3ea:	f7f6 fb01 	bl	49f0 <_ZN9ClearCore9DigitalInC1ENS_13ShiftRegister5MasksEPK15PeripheralRoute>
      m_outputPort(outputInfo->gpioPort),
    e3ee:	f995 3001 	ldrsb.w	r3, [r5, #1]
      m_overloadFoldbackCnt(0) {
    e3f2:	4a14      	ldr	r2, [pc, #80]	; (e444 <_ZN9ClearCore12DigitalInOutC1ENS_13ShiftRegister5MasksEPK15PeripheralRouteS5_b+0x64>)
      m_outputPort(outputInfo->gpioPort),
    e3f4:	6323      	str	r3, [r4, #48]	; 0x30
      m_overloadFoldbackCnt(0) {
    e3f6:	6022      	str	r2, [r4, #0]
      m_outputDataBit(outputInfo->gpioPin),
    e3f8:	78aa      	ldrb	r2, [r5, #2]
    e3fa:	6362      	str	r2, [r4, #52]	; 0x34
      m_outputDataMask(1UL << outputInfo->gpioPin),
    e3fc:	2301      	movs	r3, #1
    e3fe:	4093      	lsls	r3, r2
      m_overloadFoldbackCnt(0) {
    e400:	2200      	movs	r2, #0
    e402:	f884 603c 	strb.w	r6, [r4, #60]	; 0x3c
    e406:	63a3      	str	r3, [r4, #56]	; 0x38
    e408:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
    e40c:	7aeb      	ldrb	r3, [r5, #11]
    e40e:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
    e412:	230c      	movs	r3, #12
    e414:	f884 3058 	strb.w	r3, [r4, #88]	; 0x58
    e418:	f884 2045 	strb.w	r2, [r4, #69]	; 0x45
    e41c:	64a2      	str	r2, [r4, #72]	; 0x48
    e41e:	64e2      	str	r2, [r4, #76]	; 0x4c
    e420:	6522      	str	r2, [r4, #80]	; 0x50
    e422:	6562      	str	r2, [r4, #84]	; 0x54
    e424:	f884 2059 	strb.w	r2, [r4, #89]	; 0x59
    e428:	f884 205a 	strb.w	r2, [r4, #90]	; 0x5a
    e42c:	f884 205b 	strb.w	r2, [r4, #91]	; 0x5b
    e430:	f8a4 205c 	strh.w	r2, [r4, #92]	; 0x5c
    m_tc = tc_modules[outputInfo->tcNum];
    e434:	7aaa      	ldrb	r2, [r5, #10]
    e436:	4b04      	ldr	r3, [pc, #16]	; (e448 <_ZN9ClearCore12DigitalInOutC1ENS_13ShiftRegister5MasksEPK15PeripheralRouteS5_b+0x68>)
    e438:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    e43c:	6423      	str	r3, [r4, #64]	; 0x40
}
    e43e:	4620      	mov	r0, r4
    e440:	bd70      	pop	{r4, r5, r6, pc}
    e442:	bf00      	nop
    e444:	000232b8 	.word	0x000232b8
    e448:	000232e0 	.word	0x000232e0

0000e44c <_ZN9ClearCore12DigitalInOut7RefreshEv>:
void DigitalInOut::Refresh() {
    e44c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    e44e:	4604      	mov	r4, r0
    DigitalIn::Refresh();
    e450:	f7f6 fa1e 	bl	4890 <_ZN9ClearCore9DigitalIn7RefreshEv>
    switch (m_mode) {
    e454:	79a3      	ldrb	r3, [r4, #6]
    e456:	2b04      	cmp	r3, #4
    e458:	d12d      	bne.n	e4b6 <_ZN9ClearCore12DigitalInOut7RefreshEv+0x6a>
            if (m_overloadFoldbackCnt) {
    e45a:	f8b4 305c 	ldrh.w	r3, [r4, #92]	; 0x5c
    e45e:	bb5b      	cbnz	r3, e4b8 <_ZN9ClearCore12DigitalInOut7RefreshEv+0x6c>
            else if (m_outState && !StateRT()) {
    e460:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
    e464:	2b00      	cmp	r3, #0
    e466:	f040 809d 	bne.w	e5a4 <_ZN9ClearCore12DigitalInOut7RefreshEv+0x158>
    if (inFault != m_isInFault) {
    e46a:	f894 303d 	ldrb.w	r3, [r4, #61]	; 0x3d
                m_overloadTripCnt = OVERLOAD_TRIP_TICKS;
    e46e:	220c      	movs	r2, #12
    e470:	f884 2058 	strb.w	r2, [r4, #88]	; 0x58
    if (inFault != m_isInFault) {
    e474:	b19b      	cbz	r3, e49e <_ZN9ClearCore12DigitalInOut7RefreshEv+0x52>
    e476:	4d75      	ldr	r5, [pc, #468]	; (e64c <_ZN9ClearCore12DigitalInOut7RefreshEv+0x200>)
    e478:	68a7      	ldr	r7, [r4, #8]
    e47a:	f8d5 30f0 	ldr.w	r3, [r5, #240]	; 0xf0
        StatusMgr.OverloadUpdate(1UL << m_clearCorePin, m_isInFault);
    e47e:	f9b4 1004 	ldrsh.w	r1, [r4, #4]
    e482:	4873      	ldr	r0, [pc, #460]	; (e650 <_ZN9ClearCore12DigitalInOut7RefreshEv+0x204>)
        m_isInFault = inFault;
    e484:	2200      	movs	r2, #0
        StatusMgr.OverloadUpdate(1UL << m_clearCorePin, m_isInFault);
    e486:	2601      	movs	r6, #1
    e488:	ea23 0307 	bic.w	r3, r3, r7
        m_isInFault = inFault;
    e48c:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
        StatusMgr.OverloadUpdate(1UL << m_clearCorePin, m_isInFault);
    e490:	fa06 f101 	lsl.w	r1, r6, r1
    e494:	6800      	ldr	r0, [r0, #0]
    e496:	f8c5 30f0 	str.w	r3, [r5, #240]	; 0xf0
    e49a:	f003 faef 	bl	11a7c <_ZN9ClearCore13StatusManager14OverloadUpdateEmb>
            if (!m_pulseActive) {
    e49e:	f894 3059 	ldrb.w	r3, [r4, #89]	; 0x59
    e4a2:	b143      	cbz	r3, e4b6 <_ZN9ClearCore12DigitalInOut7RefreshEv+0x6a>
            if (m_pulseStopCount == 0 || m_pulseCounter < m_pulseStopCount) {
    e4a4:	f8b4 3054 	ldrh.w	r3, [r4, #84]	; 0x54
    e4a8:	b303      	cbz	r3, e4ec <_ZN9ClearCore12DigitalInOut7RefreshEv+0xa0>
    e4aa:	f8b4 2056 	ldrh.w	r2, [r4, #86]	; 0x56
    e4ae:	429a      	cmp	r2, r3
    e4b0:	db1c      	blt.n	e4ec <_ZN9ClearCore12DigitalInOut7RefreshEv+0xa0>
            else if (m_pulseCounter == m_pulseStopCount) {
    e4b2:	4293      	cmp	r3, r2
    e4b4:	d070      	beq.n	e598 <_ZN9ClearCore12DigitalInOut7RefreshEv+0x14c>
    e4b6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
                if (!(--m_overloadFoldbackCnt)) {
    e4b8:	3b01      	subs	r3, #1
    e4ba:	b29b      	uxth	r3, r3
    e4bc:	f8a4 305c 	strh.w	r3, [r4, #92]	; 0x5c
    e4c0:	2b00      	cmp	r3, #0
    e4c2:	d1ec      	bne.n	e49e <_ZN9ClearCore12DigitalInOut7RefreshEv+0x52>
    e4c4:	f894 2045 	ldrb.w	r2, [r4, #69]	; 0x45
    e4c8:	f894 303c 	ldrb.w	r3, [r4, #60]	; 0x3c
    e4cc:	429a      	cmp	r2, r3
    e4ce:	6b23      	ldr	r3, [r4, #48]	; 0x30
    e4d0:	6ba2      	ldr	r2, [r4, #56]	; 0x38
    e4d2:	ea4f 13c3 	mov.w	r3, r3, lsl #7
    e4d6:	f103 4382 	add.w	r3, r3, #1090519040	; 0x41000000
    e4da:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
    e4de:	bf14      	ite	ne
    e4e0:	619a      	strne	r2, [r3, #24]
    e4e2:	615a      	streq	r2, [r3, #20]
                    m_overloadTripCnt = OVERLOAD_TRIP_TICKS;
    e4e4:	230c      	movs	r3, #12
    e4e6:	f884 3058 	strb.w	r3, [r4, #88]	; 0x58
    e4ea:	e7d8      	b.n	e49e <_ZN9ClearCore12DigitalInOut7RefreshEv+0x52>
                if (m_pulseValue) {
    e4ec:	f894 305a 	ldrb.w	r3, [r4, #90]	; 0x5a
    e4f0:	bb5b      	cbnz	r3, e54a <_ZN9ClearCore12DigitalInOut7RefreshEv+0xfe>
                    if (m_pulseStopPending) {
    e4f2:	f894 305b 	ldrb.w	r3, [r4, #91]	; 0x5b
    e4f6:	2b00      	cmp	r3, #0
    e4f8:	d14e      	bne.n	e598 <_ZN9ClearCore12DigitalInOut7RefreshEv+0x14c>
                    else if (tickCnt - m_pulseStart >= m_pulseOffTicks) {
    e4fa:	4a56      	ldr	r2, [pc, #344]	; (e654 <_ZN9ClearCore12DigitalInOut7RefreshEv+0x208>)
    e4fc:	6d20      	ldr	r0, [r4, #80]	; 0x50
    e4fe:	6813      	ldr	r3, [r2, #0]
    e500:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
    e502:	1a1b      	subs	r3, r3, r0
    e504:	428b      	cmp	r3, r1
    e506:	d3d6      	bcc.n	e4b6 <_ZN9ClearCore12DigitalInOut7RefreshEv+0x6a>
                        OutputPin(!m_overloadFoldbackCnt);
    e508:	f8b4 305c 	ldrh.w	r3, [r4, #92]	; 0x5c
    e50c:	f894 103c 	ldrb.w	r1, [r4, #60]	; 0x3c
                        m_pulseStart = tickCnt;
    e510:	6812      	ldr	r2, [r2, #0]
    e512:	6522      	str	r2, [r4, #80]	; 0x50
    e514:	fab3 f383 	clz	r3, r3
    e518:	095b      	lsrs	r3, r3, #5
    e51a:	428b      	cmp	r3, r1
    e51c:	6b23      	ldr	r3, [r4, #48]	; 0x30
    e51e:	ea4f 13c3 	mov.w	r3, r3, lsl #7
    e522:	f103 4382 	add.w	r3, r3, #1090519040	; 0x41000000
    e526:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
                        m_overloadTripCnt = OVERLOAD_TRIP_TICKS;
    e52a:	f04f 020c 	mov.w	r2, #12
    e52e:	f884 2058 	strb.w	r2, [r4, #88]	; 0x58
                        m_pulseValue = true;
    e532:	f04f 0001 	mov.w	r0, #1
    e536:	6ba2      	ldr	r2, [r4, #56]	; 0x38
    e538:	f884 005a 	strb.w	r0, [r4, #90]	; 0x5a
    e53c:	bf14      	ite	ne
    e53e:	619a      	strne	r2, [r3, #24]
    e540:	615a      	streq	r2, [r3, #20]
                        m_outState = true;
    e542:	2301      	movs	r3, #1
    e544:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
    e548:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
                    if (tickCnt - m_pulseStart >= m_pulseOnTicks) {
    e54a:	4a42      	ldr	r2, [pc, #264]	; (e654 <_ZN9ClearCore12DigitalInOut7RefreshEv+0x208>)
    e54c:	6d20      	ldr	r0, [r4, #80]	; 0x50
    e54e:	6813      	ldr	r3, [r2, #0]
    e550:	6ca1      	ldr	r1, [r4, #72]	; 0x48
    e552:	1a1b      	subs	r3, r3, r0
    e554:	428b      	cmp	r3, r1
    e556:	d3ae      	bcc.n	e4b6 <_ZN9ClearCore12DigitalInOut7RefreshEv+0x6a>
                        m_pulseStart = tickCnt;
    e558:	6812      	ldr	r2, [r2, #0]
    e55a:	f894 303c 	ldrb.w	r3, [r4, #60]	; 0x3c
    e55e:	6522      	str	r2, [r4, #80]	; 0x50
                        m_pulseValue = false;
    e560:	2100      	movs	r1, #0
                        m_overloadTripCnt = OVERLOAD_TRIP_TICKS;
    e562:	220c      	movs	r2, #12
                        m_pulseValue = false;
    e564:	f884 105a 	strb.w	r1, [r4, #90]	; 0x5a
                        m_overloadTripCnt = OVERLOAD_TRIP_TICKS;
    e568:	f884 2058 	strb.w	r2, [r4, #88]	; 0x58
    e56c:	2b00      	cmp	r3, #0
    e56e:	d15b      	bne.n	e628 <_ZN9ClearCore12DigitalInOut7RefreshEv+0x1dc>
    e570:	6b23      	ldr	r3, [r4, #48]	; 0x30
    e572:	6ba2      	ldr	r2, [r4, #56]	; 0x38
    e574:	01db      	lsls	r3, r3, #7
    e576:	f103 4382 	add.w	r3, r3, #1090519040	; 0x41000000
    e57a:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
    e57e:	615a      	str	r2, [r3, #20]
                        ++m_pulseCounter;
    e580:	f8b4 3056 	ldrh.w	r3, [r4, #86]	; 0x56
                        if (m_pulseStopPending) {
    e584:	f894 205b 	ldrb.w	r2, [r4, #91]	; 0x5b
                        ++m_pulseCounter;
    e588:	3301      	adds	r3, #1
                        m_outState = false;
    e58a:	2100      	movs	r1, #0
                        ++m_pulseCounter;
    e58c:	f8a4 3056 	strh.w	r3, [r4, #86]	; 0x56
                        m_outState = false;
    e590:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
                        if (m_pulseStopPending) {
    e594:	2a00      	cmp	r2, #0
    e596:	d08e      	beq.n	e4b6 <_ZN9ClearCore12DigitalInOut7RefreshEv+0x6a>
                            m_pulseActive = false;
    e598:	2300      	movs	r3, #0
    e59a:	f884 3059 	strb.w	r3, [r4, #89]	; 0x59
                            m_pulseStopPending = false;
    e59e:	f884 305b 	strb.w	r3, [r4, #91]	; 0x5b
    e5a2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
            else if (m_outState && !StateRT()) {
    e5a4:	4620      	mov	r0, r4
    e5a6:	f7f6 fa47 	bl	4a38 <_ZN9ClearCore9DigitalIn7StateRTEv>
    e5aa:	2800      	cmp	r0, #0
    e5ac:	f47f af5d 	bne.w	e46a <_ZN9ClearCore12DigitalInOut7RefreshEv+0x1e>
                if (m_overloadTripCnt && !--m_overloadTripCnt) {
    e5b0:	f894 3058 	ldrb.w	r3, [r4, #88]	; 0x58
    e5b4:	2b00      	cmp	r3, #0
    e5b6:	f43f af72 	beq.w	e49e <_ZN9ClearCore12DigitalInOut7RefreshEv+0x52>
    e5ba:	3b01      	subs	r3, #1
    e5bc:	b2db      	uxtb	r3, r3
    e5be:	f884 3058 	strb.w	r3, [r4, #88]	; 0x58
    e5c2:	2b00      	cmp	r3, #0
    e5c4:	f47f af6b 	bne.w	e49e <_ZN9ClearCore12DigitalInOut7RefreshEv+0x52>
    if (inFault != m_isInFault) {
    e5c8:	f894 603d 	ldrb.w	r6, [r4, #61]	; 0x3d
    e5cc:	b9e6      	cbnz	r6, e608 <_ZN9ClearCore12DigitalInOut7RefreshEv+0x1bc>
            m_patternMasks[LED_BLINK_OVERLOAD] |= ledMask;
    e5ce:	4a1f      	ldr	r2, [pc, #124]	; (e64c <_ZN9ClearCore12DigitalInOut7RefreshEv+0x200>)
        StatusMgr.OverloadUpdate(1UL << m_clearCorePin, m_isInFault);
    e5d0:	491f      	ldr	r1, [pc, #124]	; (e650 <_ZN9ClearCore12DigitalInOut7RefreshEv+0x204>)
    e5d2:	f8d2 00f0 	ldr.w	r0, [r2, #240]	; 0xf0
    e5d6:	68a3      	ldr	r3, [r4, #8]
    e5d8:	680f      	ldr	r7, [r1, #0]
    e5da:	f9b4 1004 	ldrsh.w	r1, [r4, #4]
        m_isInFault = inFault;
    e5de:	2501      	movs	r5, #1
    e5e0:	4303      	orrs	r3, r0
    e5e2:	f884 503d 	strb.w	r5, [r4, #61]	; 0x3d
        StatusMgr.OverloadUpdate(1UL << m_clearCorePin, m_isInFault);
    e5e6:	fa05 f101 	lsl.w	r1, r5, r1
    e5ea:	4638      	mov	r0, r7
    e5ec:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
    e5f0:	462a      	mov	r2, r5
    e5f2:	f003 fa43 	bl	11a7c <_ZN9ClearCore13StatusManager14OverloadUpdateEmb>
        if (inFault) {
            StatusMgr.BlinkCode(
                BlinkCodeDriver::BLINK_GROUP_IO_OVERLOAD,
                1UL << m_clearCorePin);
    e5f6:	f9b4 2004 	ldrsh.w	r2, [r4, #4]
    e5fa:	fa05 f202 	lsl.w	r2, r5, r2
    e5fe:	4638      	mov	r0, r7
    e600:	4631      	mov	r1, r6
    e602:	b2d2      	uxtb	r2, r2
    e604:	f003 f88e 	bl	11724 <_ZN9ClearCore13StatusManager9BlinkCodeENS_15BlinkCodeDriver15BlinkCodeGroupsEh>
    e608:	f894 303c 	ldrb.w	r3, [r4, #60]	; 0x3c
    e60c:	b9ab      	cbnz	r3, e63a <_ZN9ClearCore12DigitalInOut7RefreshEv+0x1ee>
    e60e:	6b23      	ldr	r3, [r4, #48]	; 0x30
    e610:	6ba2      	ldr	r2, [r4, #56]	; 0x38
    e612:	01db      	lsls	r3, r3, #7
    e614:	f103 4382 	add.w	r3, r3, #1090519040	; 0x41000000
    e618:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
    e61c:	615a      	str	r2, [r3, #20]
                    m_overloadFoldbackCnt = OVERLOAD_FOLDBACK_TICKS;
    e61e:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
    e622:	f8a4 305c 	strh.w	r3, [r4, #92]	; 0x5c
    e626:	e73a      	b.n	e49e <_ZN9ClearCore12DigitalInOut7RefreshEv+0x52>
    e628:	6b23      	ldr	r3, [r4, #48]	; 0x30
    e62a:	6ba2      	ldr	r2, [r4, #56]	; 0x38
    e62c:	01db      	lsls	r3, r3, #7
    e62e:	f103 4382 	add.w	r3, r3, #1090519040	; 0x41000000
    e632:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
    e636:	619a      	str	r2, [r3, #24]
    e638:	e7a2      	b.n	e580 <_ZN9ClearCore12DigitalInOut7RefreshEv+0x134>
    e63a:	6b23      	ldr	r3, [r4, #48]	; 0x30
    e63c:	6ba2      	ldr	r2, [r4, #56]	; 0x38
    e63e:	01db      	lsls	r3, r3, #7
    e640:	f103 4382 	add.w	r3, r3, #1090519040	; 0x41000000
    e644:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
    e648:	619a      	str	r2, [r3, #24]
    e64a:	e7e8      	b.n	e61e <_ZN9ClearCore12DigitalInOut7RefreshEv+0x1d2>
    e64c:	200019d8 	.word	0x200019d8
    e650:	20001f0c 	.word	0x20001f0c
    e654:	20001be8 	.word	0x20001be8

0000e658 <_ZN9ClearCore12DigitalInOut5StateEv>:
    switch (m_mode) {
    e658:	7983      	ldrb	r3, [r0, #6]
    e65a:	2b04      	cmp	r3, #4
    e65c:	d014      	beq.n	e688 <_ZN9ClearCore12DigitalInOut5StateEv+0x30>
    e65e:	2b06      	cmp	r3, #6
    e660:	d005      	beq.n	e66e <_ZN9ClearCore12DigitalInOut5StateEv+0x16>
    e662:	2b02      	cmp	r3, #2
    e664:	d001      	beq.n	e66a <_ZN9ClearCore12DigitalInOut5StateEv+0x12>
            state = 0;
    e666:	2000      	movs	r0, #0
    e668:	4770      	bx	lr
            state = DigitalIn::State();
    e66a:	f7f6 b897 	b.w	479c <_ZN9ClearCore9DigitalIn5StateEv>
            if (!m_tc) {
    e66e:	6c03      	ldr	r3, [r0, #64]	; 0x40
    e670:	b173      	cbz	r3, e690 <_ZN9ClearCore12DigitalInOut5StateEv+0x38>
                state = m_tc->COUNT8.CCBUF[m_tcPadNum].reg;
    e672:	f890 2044 	ldrb.w	r2, [r0, #68]	; 0x44
            if (m_logicInversion) {
    e676:	f890 103c 	ldrb.w	r1, [r0, #60]	; 0x3c
                state = m_tc->COUNT8.CCBUF[m_tcPadNum].reg;
    e67a:	4413      	add	r3, r2
    e67c:	f893 0030 	ldrb.w	r0, [r3, #48]	; 0x30
            if (m_logicInversion) {
    e680:	b929      	cbnz	r1, e68e <_ZN9ClearCore12DigitalInOut5StateEv+0x36>
                state = 255 - m_tc->COUNT8.CCBUF[m_tcPadNum].reg;
    e682:	f1c0 00ff 	rsb	r0, r0, #255	; 0xff
    e686:	4770      	bx	lr
            state = m_outState;
    e688:	f890 0045 	ldrb.w	r0, [r0, #69]	; 0x45
            break;
    e68c:	4770      	bx	lr
    e68e:	4770      	bx	lr
    int16_t state = -1;
    e690:	f04f 30ff 	mov.w	r0, #4294967295
}
    e694:	4770      	bx	lr
    e696:	bf00      	nop

0000e698 <_ZN9ClearCore12DigitalInOut10InitializeE13ClearCorePins>:
void DigitalInOut::Initialize(ClearCorePins clearCorePin) {
    e698:	b538      	push	{r3, r4, r5, lr}
    PMUX_SELECTION(m_outputPort, m_outputDataBit, PER_TIMER);
    e69a:	6b45      	ldr	r5, [r0, #52]	; 0x34
    m_outState = false;
    e69c:	2200      	movs	r2, #0
    PMUX_SELECTION(m_outputPort, m_outputDataBit, PER_TIMER);
    e69e:	07eb      	lsls	r3, r5, #31
void DigitalInOut::Initialize(ClearCorePins clearCorePin) {
    e6a0:	4604      	mov	r4, r0
    m_outState = false;
    e6a2:	f880 2045 	strb.w	r2, [r0, #69]	; 0x45
    m_isInFault = false;
    e6a6:	f880 203d 	strb.w	r2, [r0, #61]	; 0x3d
    m_pulseActive = false;
    e6aa:	f880 2059 	strb.w	r2, [r0, #89]	; 0x59
    m_pulseStopPending = false;
    e6ae:	f880 205b 	strb.w	r2, [r0, #91]	; 0x5b
    PMUX_SELECTION(m_outputPort, m_outputDataBit, PER_TIMER);
    e6b2:	d41a      	bmi.n	e6ea <_ZN9ClearCore12DigitalInOut10InitializeE13ClearCorePins+0x52>
    e6b4:	6b02      	ldr	r2, [r0, #48]	; 0x30
    e6b6:	01d2      	lsls	r2, r2, #7
    e6b8:	f102 4382 	add.w	r3, r2, #1090519040	; 0x41000000
    e6bc:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
    e6c0:	eb03 0355 	add.w	r3, r3, r5, lsr #1
    e6c4:	2004      	movs	r0, #4
    e6c6:	f893 2030 	ldrb.w	r2, [r3, #48]	; 0x30
    e6ca:	f360 0203 	bfi	r2, r0, #0, #4
    e6ce:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
    DigitalIn::Initialize(clearCorePin);
    e6d2:	4620      	mov	r0, r4
    e6d4:	f7f6 f876 	bl	47c4 <_ZN9ClearCore9DigitalIn10InitializeE13ClearCorePins>
    DATA_DIRECTION_OUTPUT(m_outputPort, m_outputDataMask);
    e6d8:	6b23      	ldr	r3, [r4, #48]	; 0x30
    e6da:	6ba2      	ldr	r2, [r4, #56]	; 0x38
    e6dc:	01db      	lsls	r3, r3, #7
    e6de:	f103 4382 	add.w	r3, r3, #1090519040	; 0x41000000
    e6e2:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
    e6e6:	609a      	str	r2, [r3, #8]
    e6e8:	bd38      	pop	{r3, r4, r5, pc}
    PMUX_SELECTION(m_outputPort, m_outputDataBit, PER_TIMER);
    e6ea:	6b00      	ldr	r0, [r0, #48]	; 0x30
    e6ec:	01c0      	lsls	r0, r0, #7
    e6ee:	f100 4282 	add.w	r2, r0, #1090519040	; 0x41000000
    e6f2:	f502 4200 	add.w	r2, r2, #32768	; 0x8000
    e6f6:	eb02 0255 	add.w	r2, r2, r5, lsr #1
    e6fa:	2004      	movs	r0, #4
    e6fc:	f892 3030 	ldrb.w	r3, [r2, #48]	; 0x30
    e700:	f360 1307 	bfi	r3, r0, #4, #4
    e704:	f882 3030 	strb.w	r3, [r2, #48]	; 0x30
    e708:	e7e3      	b.n	e6d2 <_ZN9ClearCore12DigitalInOut10InitializeE13ClearCorePins+0x3a>
    e70a:	bf00      	nop

0000e70c <_ZN9ClearCore19DigitalInOutHBridge4ModeEv>:

        \return The connector's current operational mode.
    **/
    virtual ConnectorModes Mode() override {
        return Connector::Mode();
    }
    e70c:	7980      	ldrb	r0, [r0, #6]
    e70e:	4770      	bx	lr

0000e710 <_ZN9ClearCore19DigitalInOutHBridge4TypeEv>:

        \return The type of the current connector.
    **/
    Connector::ConnectorTypes Type() override {
        return Connector::H_BRIDGE_TYPE;
    }
    e710:	2005      	movs	r0, #5
    e712:	4770      	bx	lr

0000e714 <_ZN9ClearCore19DigitalInOutHBridge10IsWritableEv>:
}

bool DigitalInOutHBridge::IsWritable() {
    bool isWritable;

    switch (m_mode) {
    e714:	7980      	ldrb	r0, [r0, #6]
    e716:	3804      	subs	r0, #4
        default:
            isWritable = false;
            break;
    }
    return isWritable;
}
    e718:	2804      	cmp	r0, #4
    e71a:	bf8c      	ite	hi
    e71c:	2000      	movhi	r0, #0
    e71e:	2001      	movls	r0, #1
    e720:	4770      	bx	lr
    e722:	bf00      	nop

0000e724 <_ZN9ClearCore19DigitalInOutHBridgeC1ENS_13ShiftRegister5MasksEPK15PeripheralRouteS5_S5_S5_4IRQnb>:
DigitalInOutHBridge::DigitalInOutHBridge(ShiftRegister::Masks ledMask,
    e724:	b5f0      	push	{r4, r5, r6, r7, lr}
    e726:	b083      	sub	sp, #12
    e728:	f89d 402c 	ldrb.w	r4, [sp, #44]	; 0x2c
      m_forceToneDuration(false) {
    e72c:	9400      	str	r4, [sp, #0]
DigitalInOutHBridge::DigitalInOutHBridge(ShiftRegister::Masks ledMask,
    e72e:	4604      	mov	r4, r0
    e730:	9d08      	ldr	r5, [sp, #32]
    e732:	9e09      	ldr	r6, [sp, #36]	; 0x24
    e734:	f9bd 7028 	ldrsh.w	r7, [sp, #40]	; 0x28
      m_forceToneDuration(false) {
    e738:	f7ff fe52 	bl	e3e0 <_ZN9ClearCore12DigitalInOutC1ENS_13ShiftRegister5MasksEPK15PeripheralRouteS5_b>
    e73c:	2300      	movs	r3, #0
    e73e:	490f      	ldr	r1, [pc, #60]	; (e77c <_ZN9ClearCore19DigitalInOutHBridgeC1ENS_13ShiftRegister5MasksEPK15PeripheralRouteS5_S5_S5_4IRQnb+0x58>)
    e740:	f8a4 3060 	strh.w	r3, [r4, #96]	; 0x60
    e744:	f640 42cc 	movw	r2, #3276	; 0xccc
    e748:	f8a4 3062 	strh.w	r3, [r4, #98]	; 0x62
    e74c:	6663      	str	r3, [r4, #100]	; 0x64
    e74e:	66a3      	str	r3, [r4, #104]	; 0x68
    e750:	66e3      	str	r3, [r4, #108]	; 0x6c
    e752:	f884 3070 	strb.w	r3, [r4, #112]	; 0x70
    e756:	f884 3082 	strb.w	r3, [r4, #130]	; 0x82
    e75a:	f884 3083 	strb.w	r3, [r4, #131]	; 0x83
    e75e:	6765      	str	r5, [r4, #116]	; 0x74
    e760:	67a6      	str	r6, [r4, #120]	; 0x78
    e762:	f8a4 7080 	strh.w	r7, [r4, #128]	; 0x80
    e766:	6021      	str	r1, [r4, #0]
    e768:	f8a4 205e 	strh.w	r2, [r4, #94]	; 0x5e
    m_tcc = tcc_modules[pwmAInfo->tccNum];
    e76c:	7b2a      	ldrb	r2, [r5, #12]
    e76e:	4b04      	ldr	r3, [pc, #16]	; (e780 <_ZN9ClearCore19DigitalInOutHBridgeC1ENS_13ShiftRegister5MasksEPK15PeripheralRouteS5_S5_S5_4IRQnb+0x5c>)
    e770:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    e774:	67e3      	str	r3, [r4, #124]	; 0x7c
}
    e776:	4620      	mov	r0, r4
    e778:	b003      	add	sp, #12
    e77a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    e77c:	00023308 	.word	0x00023308
    e780:	00023330 	.word	0x00023330

0000e784 <_ZN9ClearCore19DigitalInOutHBridge10FaultStateEb>:
    m_mode = newMode;

    return modeChangeSuccess;
}

void DigitalInOutHBridge::FaultState(bool isFaulted) {
    e784:	b510      	push	{r4, lr}
    m_inFault = isFaulted;
    // Disable H-bridge driver when in an overload state
    switch (Mode()) {
    e786:	6803      	ldr	r3, [r0, #0]
    e788:	4a12      	ldr	r2, [pc, #72]	; (e7d4 <_ZN9ClearCore19DigitalInOutHBridge10FaultStateEb+0x50>)
    e78a:	681b      	ldr	r3, [r3, #0]
    m_inFault = isFaulted;
    e78c:	f880 1082 	strb.w	r1, [r0, #130]	; 0x82
    e790:	4293      	cmp	r3, r2
void DigitalInOutHBridge::FaultState(bool isFaulted) {
    e792:	b082      	sub	sp, #8
    e794:	4604      	mov	r4, r0
    e796:	d115      	bne.n	e7c4 <_ZN9ClearCore19DigitalInOutHBridge10FaultStateEb+0x40>
        return m_mode;
    e798:	7980      	ldrb	r0, [r0, #6]
    e79a:	2808      	cmp	r0, #8
    e79c:	d805      	bhi.n	e7aa <_ZN9ClearCore19DigitalInOutHBridge10FaultStateEb+0x26>
    e79e:	2301      	movs	r3, #1
    e7a0:	fa03 f000 	lsl.w	r0, r3, r0
    e7a4:	f410 7fd0 	tst.w	r0, #416	; 0x1a0
    e7a8:	d101      	bne.n	e7ae <_ZN9ClearCore19DigitalInOutHBridge10FaultStateEb+0x2a>
            DATA_OUTPUT_STATE(m_outputPort, m_outputDataMask, !isFaulted);
            break;
        default:
            break;
    }
}
    e7aa:	b002      	add	sp, #8
    e7ac:	bd10      	pop	{r4, pc}
            DATA_OUTPUT_STATE(m_outputPort, m_outputDataMask, !isFaulted);
    e7ae:	6b23      	ldr	r3, [r4, #48]	; 0x30
    e7b0:	6ba2      	ldr	r2, [r4, #56]	; 0x38
    e7b2:	01db      	lsls	r3, r3, #7
    e7b4:	f103 4382 	add.w	r3, r3, #1090519040	; 0x41000000
    e7b8:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
    e7bc:	b131      	cbz	r1, e7cc <_ZN9ClearCore19DigitalInOutHBridge10FaultStateEb+0x48>
    e7be:	615a      	str	r2, [r3, #20]
}
    e7c0:	b002      	add	sp, #8
    e7c2:	bd10      	pop	{r4, pc}
    e7c4:	9101      	str	r1, [sp, #4]
    switch (Mode()) {
    e7c6:	4798      	blx	r3
    e7c8:	9901      	ldr	r1, [sp, #4]
    e7ca:	e7e6      	b.n	e79a <_ZN9ClearCore19DigitalInOutHBridge10FaultStateEb+0x16>
            DATA_OUTPUT_STATE(m_outputPort, m_outputDataMask, !isFaulted);
    e7cc:	619a      	str	r2, [r3, #24]
}
    e7ce:	b002      	add	sp, #8
    e7d0:	bd10      	pop	{r4, pc}
    e7d2:	bf00      	nop
    e7d4:	0000e70d 	.word	0x0000e70d

0000e7d8 <_ZN9ClearCore19DigitalInOutHBridge5StateEv>:
    switch (m_mode) {
    e7d8:	7982      	ldrb	r2, [r0, #6]
    e7da:	2a07      	cmp	r2, #7
int16_t DigitalInOutHBridge::State() {
    e7dc:	4601      	mov	r1, r0
    e7de:	d808      	bhi.n	e7f2 <_ZN9ClearCore19DigitalInOutHBridge5StateEv+0x1a>
    e7e0:	2301      	movs	r3, #1
    e7e2:	4093      	lsls	r3, r2
    e7e4:	f013 0f54 	tst.w	r3, #84	; 0x54
    e7e8:	d112      	bne.n	e810 <_ZN9ClearCore19DigitalInOutHBridge5StateEv+0x38>
    e7ea:	f013 00a0 	ands.w	r0, r3, #160	; 0xa0
    e7ee:	d102      	bne.n	e7f6 <_ZN9ClearCore19DigitalInOutHBridge5StateEv+0x1e>
    e7f0:	4770      	bx	lr
            state = 0;
    e7f2:	2000      	movs	r0, #0
}
    e7f4:	4770      	bx	lr
                static_cast<int16_t>((static_cast<int32_t>(m_tcc->CC[0].reg) -
    e7f6:	6fcb      	ldr	r3, [r1, #124]	; 0x7c
    e7f8:	6c58      	ldr	r0, [r3, #68]	; 0x44
                                      (m_tcc->PER.reg >> 1)) * INT16_MAX / m_tcc->PER.reg >> 1);
    e7fa:	6c1a      	ldr	r2, [r3, #64]	; 0x40
    e7fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
                static_cast<int16_t>((static_cast<int32_t>(m_tcc->CC[0].reg) -
    e7fe:	eba0 0052 	sub.w	r0, r0, r2, lsr #1
                                      (m_tcc->PER.reg >> 1)) * INT16_MAX / m_tcc->PER.reg >> 1);
    e802:	ebc0 30c0 	rsb	r0, r0, r0, lsl #15
    e806:	fbb0 f0f3 	udiv	r0, r0, r3
            state =
    e80a:	f340 004f 	sbfx	r0, r0, #1, #16
    e80e:	4770      	bx	lr
            state = DigitalInOut::State();
    e810:	f7ff bf22 	b.w	e658 <_ZN9ClearCore12DigitalInOut5StateEv>

0000e814 <_ZN9ClearCore19DigitalInOutHBridge5StateEs>:
bool DigitalInOutHBridge::State(int16_t newState) {
    e814:	b510      	push	{r4, lr}
    switch (m_mode) {
    e816:	7983      	ldrb	r3, [r0, #6]
    uint16_t halfDuty = m_tcc->PER.reg >> 1; // 50% duty cycle
    e818:	6fc4      	ldr	r4, [r0, #124]	; 0x7c
    switch (m_mode) {
    e81a:	3b02      	subs	r3, #2
    uint16_t halfDuty = m_tcc->PER.reg >> 1; // 50% duty cycle
    e81c:	6c22      	ldr	r2, [r4, #64]	; 0x40
    switch (m_mode) {
    e81e:	2b05      	cmp	r3, #5
    e820:	d82a      	bhi.n	e878 <_ZN9ClearCore19DigitalInOutHBridge5StateEs+0x64>
    e822:	e8df f003 	tbb	[pc, r3]
    e826:	2925      	.short	0x2925
    e828:	13250325 	.word	0x13250325
        index &= 0xf;   // guard against index out of bounds
    e82c:	7900      	ldrb	r0, [r0, #4]
        m_fadeCounter.m_valuesBuf[index] = value;
    e82e:	4b13      	ldr	r3, [pc, #76]	; (e87c <_ZN9ClearCore19DigitalInOutHBridge5StateEs+0x68>)
    e830:	f000 000f 	and.w	r0, r0, #15
            if (newState == INT16_MIN) {
    e834:	f511 4f00 	cmn.w	r1, #32768	; 0x8000
    e838:	4403      	add	r3, r0
                ShiftReg.LedPwmValue(m_clearCorePin, labs(newState) >> 7);
    e83a:	bf1b      	ittet	ne
    e83c:	ea81 70e1 	eorne.w	r0, r1, r1, asr #31
    e840:	eba0 70e1 	subne.w	r0, r0, r1, asr #31
    e844:	20ff      	moveq	r0, #255	; 0xff
    e846:	11c0      	asrne	r0, r0, #7
    e848:	f883 008d 	strb.w	r0, [r3, #141]	; 0x8d
            m_tcc->CCBUF[0].reg = halfDuty + halfDuty * newState / INT16_MAX;
    e84c:	f3c2 024f 	ubfx	r2, r2, #1, #16
    e850:	4b0b      	ldr	r3, [pc, #44]	; (e880 <_ZN9ClearCore19DigitalInOutHBridge5StateEs+0x6c>)
    e852:	fb01 f102 	mul.w	r1, r1, r2
    e856:	fb83 0301 	smull	r0, r3, r3, r1
    e85a:	440b      	add	r3, r1
    e85c:	139b      	asrs	r3, r3, #14
    e85e:	17c9      	asrs	r1, r1, #31
    e860:	1a58      	subs	r0, r3, r1
            m_tcc->CCBUF[1].reg = halfDuty - halfDuty * newState / INT16_MAX;
    e862:	1ac9      	subs	r1, r1, r3
            m_tcc->CCBUF[0].reg = halfDuty + halfDuty * newState / INT16_MAX;
    e864:	4410      	add	r0, r2
            m_tcc->CCBUF[1].reg = halfDuty - halfDuty * newState / INT16_MAX;
    e866:	4411      	add	r1, r2
            m_tcc->CCBUF[0].reg = halfDuty + halfDuty * newState / INT16_MAX;
    e868:	6720      	str	r0, [r4, #112]	; 0x70
            m_tcc->CCBUF[1].reg = halfDuty - halfDuty * newState / INT16_MAX;
    e86a:	6761      	str	r1, [r4, #116]	; 0x74
            success = true;
    e86c:	2001      	movs	r0, #1
            break;
    e86e:	bd10      	pop	{r4, pc}
}
    e870:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
            success = DigitalInOut::State(newState);
    e874:	f7ff bc46 	b.w	e104 <_ZN9ClearCore12DigitalInOut5StateEs>
    bool success = false;
    e878:	2000      	movs	r0, #0
}
    e87a:	bd10      	pop	{r4, pc}
    e87c:	200019d8 	.word	0x200019d8
    e880:	80010003 	.word	0x80010003

0000e884 <_ZN9ClearCore19DigitalInOutHBridge10ToneUpdateEv>:
    int32_t nextAngle = static_cast<int32_t>(m_angle) + m_sinStep;
    e884:	f9b0 3062 	ldrsh.w	r3, [r0, #98]	; 0x62
    e888:	f9b0 1060 	ldrsh.w	r1, [r0, #96]	; 0x60
    if ((ToneActiveState() && (ToneActiveState() != TONE_PERIODIC_OFF)) ||
    e88c:	f890 2070 	ldrb.w	r2, [r0, #112]	; 0x70
void DigitalInOutHBridge::ToneUpdate() {
    e890:	b570      	push	{r4, r5, r6, lr}
    int32_t nextAngle = static_cast<int32_t>(m_angle) + m_sinStep;
    e892:	440b      	add	r3, r1
    if ((ToneActiveState() && (ToneActiveState() != TONE_PERIODIC_OFF)) ||
    e894:	b302      	cbz	r2, e8d8 <_ZN9ClearCore19DigitalInOutHBridge10ToneUpdateEv+0x54>
    e896:	f890 2070 	ldrb.w	r2, [r0, #112]	; 0x70
    e89a:	2a04      	cmp	r2, #4
    e89c:	d01c      	beq.n	e8d8 <_ZN9ClearCore19DigitalInOutHBridge10ToneUpdateEv+0x54>
    e89e:	4604      	mov	r4, r0
        m_angle = nextAngle & INT16_MAX;
    e8a0:	f3c3 000e 	ubfx	r0, r3, #0, #15
                                    m_amplitude) >> 15));
    e8a4:	6823      	ldr	r3, [r4, #0]
        m_angle = nextAngle & INT16_MAX;
    e8a6:	f8a4 0062 	strh.w	r0, [r4, #98]	; 0x62
                                    m_amplitude) >> 15));
    e8aa:	695d      	ldr	r5, [r3, #20]
        State(static_cast<int16_t>((static_cast<int32_t>(arm_sin_q15(m_angle)) *
    e8ac:	f004 fd04 	bl	132b8 <arm_sin_q15>
    e8b0:	f8b4 105e 	ldrh.w	r1, [r4, #94]	; 0x5e
    e8b4:	4b41      	ldr	r3, [pc, #260]	; (e9bc <_ZN9ClearCore19DigitalInOutHBridge10ToneUpdateEv+0x138>)
    e8b6:	fb11 f100 	smulbb	r1, r1, r0
    e8ba:	429d      	cmp	r5, r3
    e8bc:	f341 31cf 	sbfx	r1, r1, #15, #16
    e8c0:	d177      	bne.n	e9b2 <_ZN9ClearCore19DigitalInOutHBridge10ToneUpdateEv+0x12e>
    switch (m_mode) {
    e8c2:	79a3      	ldrb	r3, [r4, #6]
    uint16_t halfDuty = m_tcc->PER.reg >> 1; // 50% duty cycle
    e8c4:	6fe0      	ldr	r0, [r4, #124]	; 0x7c
    switch (m_mode) {
    e8c6:	3b02      	subs	r3, #2
    uint16_t halfDuty = m_tcc->PER.reg >> 1; // 50% duty cycle
    e8c8:	6c02      	ldr	r2, [r0, #64]	; 0x40
    switch (m_mode) {
    e8ca:	2b05      	cmp	r3, #5
    e8cc:	d81e      	bhi.n	e90c <_ZN9ClearCore19DigitalInOutHBridge10ToneUpdateEv+0x88>
    e8ce:	e8df f003 	tbb	[pc, r3]
    e8d2:	1d6b      	.short	0x1d6b
    e8d4:	5a6b4a6b 	.word	0x5a6b4a6b
            (m_mode == OUTPUT_TONE && nextAngle < INT16_MAX)) {
    e8d8:	7982      	ldrb	r2, [r0, #6]
    if ((ToneActiveState() && (ToneActiveState() != TONE_PERIODIC_OFF)) ||
    e8da:	2a07      	cmp	r2, #7
    e8dc:	d017      	beq.n	e90e <_ZN9ClearCore19DigitalInOutHBridge10ToneUpdateEv+0x8a>
        m_tcc->INTENCLR.bit.OVF = 1;
    e8de:	6fc1      	ldr	r1, [r0, #124]	; 0x7c
    e8e0:	4c36      	ldr	r4, [pc, #216]	; (e9bc <_ZN9ClearCore19DigitalInOutHBridge10ToneUpdateEv+0x138>)
    e8e2:	6a4b      	ldr	r3, [r1, #36]	; 0x24
    e8e4:	f043 0301 	orr.w	r3, r3, #1
    e8e8:	624b      	str	r3, [r1, #36]	; 0x24
        State(0);
    e8ea:	6803      	ldr	r3, [r0, #0]
    e8ec:	695b      	ldr	r3, [r3, #20]
        m_angle = 0;
    e8ee:	2500      	movs	r5, #0
    e8f0:	42a3      	cmp	r3, r4
    e8f2:	f8a0 5062 	strh.w	r5, [r0, #98]	; 0x62
    e8f6:	d132      	bne.n	e95e <_ZN9ClearCore19DigitalInOutHBridge10ToneUpdateEv+0xda>
    uint16_t halfDuty = m_tcc->PER.reg >> 1; // 50% duty cycle
    e8f8:	6c0b      	ldr	r3, [r1, #64]	; 0x40
    switch (m_mode) {
    e8fa:	3a02      	subs	r2, #2
    uint16_t halfDuty = m_tcc->PER.reg >> 1; // 50% duty cycle
    e8fc:	085b      	lsrs	r3, r3, #1
    switch (m_mode) {
    e8fe:	2a04      	cmp	r2, #4
    e900:	d804      	bhi.n	e90c <_ZN9ClearCore19DigitalInOutHBridge10ToneUpdateEv+0x88>
    e902:	e8df f002 	tbb	[pc, r2]
    e906:	0327      	.short	0x0327
    e908:	1b27      	.short	0x1b27
    e90a:	27          	.byte	0x27
    e90b:	00          	.byte	0x00
    e90c:	bd70      	pop	{r4, r5, r6, pc}
            (m_mode == OUTPUT_TONE && nextAngle < INT16_MAX)) {
    e90e:	f647 72fe 	movw	r2, #32766	; 0x7ffe
    e912:	4293      	cmp	r3, r2
    e914:	ddc3      	ble.n	e89e <_ZN9ClearCore19DigitalInOutHBridge10ToneUpdateEv+0x1a>
        m_tcc->INTENCLR.bit.OVF = 1;
    e916:	6fc1      	ldr	r1, [r0, #124]	; 0x7c
    e918:	4a28      	ldr	r2, [pc, #160]	; (e9bc <_ZN9ClearCore19DigitalInOutHBridge10ToneUpdateEv+0x138>)
    e91a:	6a4b      	ldr	r3, [r1, #36]	; 0x24
    e91c:	f043 0301 	orr.w	r3, r3, #1
    e920:	624b      	str	r3, [r1, #36]	; 0x24
        State(0);
    e922:	6803      	ldr	r3, [r0, #0]
    e924:	695b      	ldr	r3, [r3, #20]
        m_angle = 0;
    e926:	2400      	movs	r4, #0
    e928:	4293      	cmp	r3, r2
    e92a:	f8a0 4062 	strh.w	r4, [r0, #98]	; 0x62
    e92e:	d116      	bne.n	e95e <_ZN9ClearCore19DigitalInOutHBridge10ToneUpdateEv+0xda>
    uint16_t halfDuty = m_tcc->PER.reg >> 1; // 50% duty cycle
    e930:	6c0b      	ldr	r3, [r1, #64]	; 0x40
    e932:	085b      	lsrs	r3, r3, #1
    e934:	b29b      	uxth	r3, r3
            m_tcc->CCBUF[0].reg = halfDuty + halfDuty * newState / INT16_MAX;
    e936:	670b      	str	r3, [r1, #112]	; 0x70
            m_tcc->CCBUF[1].reg = halfDuty - halfDuty * newState / INT16_MAX;
    e938:	674b      	str	r3, [r1, #116]	; 0x74
    e93a:	bd70      	pop	{r4, r5, r6, pc}
        index &= 0xf;   // guard against index out of bounds
    e93c:	7900      	ldrb	r0, [r0, #4]
        m_fadeCounter.m_valuesBuf[index] = value;
    e93e:	4a20      	ldr	r2, [pc, #128]	; (e9c0 <_ZN9ClearCore19DigitalInOutHBridge10ToneUpdateEv+0x13c>)
    e940:	f000 000f 	and.w	r0, r0, #15
    e944:	4402      	add	r2, r0
    e946:	b29b      	uxth	r3, r3
    e948:	2000      	movs	r0, #0
    e94a:	f882 008d 	strb.w	r0, [r2, #141]	; 0x8d
            m_tcc->CCBUF[0].reg = halfDuty + halfDuty * newState / INT16_MAX;
    e94e:	670b      	str	r3, [r1, #112]	; 0x70
            m_tcc->CCBUF[1].reg = halfDuty - halfDuty * newState / INT16_MAX;
    e950:	674b      	str	r3, [r1, #116]	; 0x74
    e952:	bd70      	pop	{r4, r5, r6, pc}
            success = DigitalInOut::State(newState);
    e954:	2100      	movs	r1, #0
}
    e956:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
            success = DigitalInOut::State(newState);
    e95a:	f7ff bbd3 	b.w	e104 <_ZN9ClearCore12DigitalInOut5StateEs>
        State(0);
    e95e:	2100      	movs	r1, #0
}
    e960:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
        State(0);
    e964:	4718      	bx	r3
        index &= 0xf;   // guard against index out of bounds
    e966:	7924      	ldrb	r4, [r4, #4]
        m_fadeCounter.m_valuesBuf[index] = value;
    e968:	4b15      	ldr	r3, [pc, #84]	; (e9c0 <_ZN9ClearCore19DigitalInOutHBridge10ToneUpdateEv+0x13c>)
    e96a:	f004 040f 	and.w	r4, r4, #15
            if (newState == INT16_MIN) {
    e96e:	f511 4f00 	cmn.w	r1, #32768	; 0x8000
    e972:	4423      	add	r3, r4
                ShiftReg.LedPwmValue(m_clearCorePin, labs(newState) >> 7);
    e974:	bf1b      	ittet	ne
    e976:	ea81 74e1 	eorne.w	r4, r1, r1, asr #31
    e97a:	eba4 74e1 	subne.w	r4, r4, r1, asr #31
    e97e:	24ff      	moveq	r4, #255	; 0xff
    e980:	11e4      	asrne	r4, r4, #7
    e982:	f883 408d 	strb.w	r4, [r3, #141]	; 0x8d
            m_tcc->CCBUF[0].reg = halfDuty + halfDuty * newState / INT16_MAX;
    e986:	f3c2 024f 	ubfx	r2, r2, #1, #16
    e98a:	4b0e      	ldr	r3, [pc, #56]	; (e9c4 <_ZN9ClearCore19DigitalInOutHBridge10ToneUpdateEv+0x140>)
    e98c:	fb01 f102 	mul.w	r1, r1, r2
    e990:	fb83 4301 	smull	r4, r3, r3, r1
    e994:	440b      	add	r3, r1
    e996:	139b      	asrs	r3, r3, #14
    e998:	17c9      	asrs	r1, r1, #31
    e99a:	1a5c      	subs	r4, r3, r1
            m_tcc->CCBUF[1].reg = halfDuty - halfDuty * newState / INT16_MAX;
    e99c:	1ac9      	subs	r1, r1, r3
            m_tcc->CCBUF[0].reg = halfDuty + halfDuty * newState / INT16_MAX;
    e99e:	4414      	add	r4, r2
            m_tcc->CCBUF[1].reg = halfDuty - halfDuty * newState / INT16_MAX;
    e9a0:	4411      	add	r1, r2
            m_tcc->CCBUF[0].reg = halfDuty + halfDuty * newState / INT16_MAX;
    e9a2:	6704      	str	r4, [r0, #112]	; 0x70
            m_tcc->CCBUF[1].reg = halfDuty - halfDuty * newState / INT16_MAX;
    e9a4:	6741      	str	r1, [r0, #116]	; 0x74
    e9a6:	bd70      	pop	{r4, r5, r6, pc}
            success = DigitalInOut::State(newState);
    e9a8:	4620      	mov	r0, r4
}
    e9aa:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
            success = DigitalInOut::State(newState);
    e9ae:	f7ff bba9 	b.w	e104 <_ZN9ClearCore12DigitalInOut5StateEs>
                                    m_amplitude) >> 15));
    e9b2:	4620      	mov	r0, r4
    e9b4:	462b      	mov	r3, r5
}
    e9b6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
                                    m_amplitude) >> 15));
    e9ba:	4718      	bx	r3
    e9bc:	0000e815 	.word	0x0000e815
    e9c0:	200019d8 	.word	0x200019d8
    e9c4:	80010003 	.word	0x80010003

0000e9c8 <_ZN9ClearCore19DigitalInOutHBridge7RefreshEv>:
    switch (m_mode) {
    e9c8:	7983      	ldrb	r3, [r0, #6]
    e9ca:	3b02      	subs	r3, #2
    e9cc:	2b05      	cmp	r3, #5
    e9ce:	d804      	bhi.n	e9da <_ZN9ClearCore19DigitalInOutHBridge7RefreshEv+0x12>
    e9d0:	e8df f003 	tbb	[pc, r3]
    e9d4:	03040304 	.word	0x03040304
    e9d8:	0604      	.short	0x0604
    e9da:	4770      	bx	lr
            DigitalInOut::Refresh();
    e9dc:	f7ff bd36 	b.w	e44c <_ZN9ClearCore12DigitalInOut7RefreshEv>
            switch (m_toneState) {
    e9e0:	f890 3070 	ldrb.w	r3, [r0, #112]	; 0x70
    e9e4:	2b03      	cmp	r3, #3
void DigitalInOutHBridge::Refresh() {
    e9e6:	b4f0      	push	{r4, r5, r6, r7}
            switch (m_toneState) {
    e9e8:	d02c      	beq.n	ea44 <_ZN9ClearCore19DigitalInOutHBridge7RefreshEv+0x7c>
    e9ea:	2b04      	cmp	r3, #4
    e9ec:	d003      	beq.n	e9f6 <_ZN9ClearCore19DigitalInOutHBridge7RefreshEv+0x2e>
    e9ee:	2b02      	cmp	r3, #2
    e9f0:	d04c      	beq.n	ea8c <_ZN9ClearCore19DigitalInOutHBridge7RefreshEv+0xc4>
}
    e9f2:	bcf0      	pop	{r4, r5, r6, r7}
    e9f4:	4770      	bx	lr
                    if (tickCnt - m_toneStartTick > m_toneOffTicks) {
    e9f6:	4937      	ldr	r1, [pc, #220]	; (ead4 <_ZN9ClearCore19DigitalInOutHBridge7RefreshEv+0x10c>)
    e9f8:	6e44      	ldr	r4, [r0, #100]	; 0x64
    e9fa:	680b      	ldr	r3, [r1, #0]
    e9fc:	6ec2      	ldr	r2, [r0, #108]	; 0x6c
    e9fe:	1b1b      	subs	r3, r3, r4
    ea00:	4293      	cmp	r3, r2
    ea02:	d9f6      	bls.n	e9f2 <_ZN9ClearCore19DigitalInOutHBridge7RefreshEv+0x2a>
                        m_tcc->INTENSET.bit.OVF = 1;
    ea04:	6fc4      	ldr	r4, [r0, #124]	; 0x7c
                        m_toneState = TONE_PERIODIC_ON;
    ea06:	2303      	movs	r3, #3
    ea08:	f880 3070 	strb.w	r3, [r0, #112]	; 0x70
                        m_tcc->INTENSET.bit.OVF = 1;
    ea0c:	6aa2      	ldr	r2, [r4, #40]	; 0x28
        m_fadeCounter.m_analogMasks[index] = ledMask;
    ea0e:	4b32      	ldr	r3, [pc, #200]	; (ead8 <_ZN9ClearCore19DigitalInOutHBridge7RefreshEv+0x110>)
    ea10:	f042 0201 	orr.w	r2, r2, #1
    ea14:	62a2      	str	r2, [r4, #40]	; 0x28
        index &= 0xf;   // guard against index out of bounds
    ea16:	7902      	ldrb	r2, [r0, #4]
                        m_toneStartTick = tickCnt;
    ea18:	6809      	ldr	r1, [r1, #0]
                        ShiftReg.LedInPwm(m_ledMask, true, m_clearCorePin);
    ea1a:	6885      	ldr	r5, [r0, #8]
        state ? m_fadeCounter.m_activeMask |= 1 << index
    ea1c:	f8b3 6074 	ldrh.w	r6, [r3, #116]	; 0x74
        state ? m_patternMasks[pattern] |= ledMask
    ea20:	f8d3 40e8 	ldr.w	r4, [r3, #232]	; 0xe8
                        m_toneStartTick = tickCnt;
    ea24:	6641      	str	r1, [r0, #100]	; 0x64
        m_fadeCounter.m_analogMasks[index] = ledMask;
    ea26:	f002 010f 	and.w	r1, r2, #15
        state ? m_fadeCounter.m_activeMask |= 1 << index
    ea2a:	2201      	movs	r2, #1
        m_fadeCounter.m_analogMasks[index] = ledMask;
    ea2c:	eb03 0081 	add.w	r0, r3, r1, lsl #2
        state ? m_fadeCounter.m_activeMask |= 1 << index
    ea30:	408a      	lsls	r2, r1
    ea32:	4332      	orrs	r2, r6
        state ? m_patternMasks[pattern] |= ledMask
    ea34:	432c      	orrs	r4, r5
        m_fadeCounter.m_analogMasks[index] = ledMask;
    ea36:	f8c0 50a0 	str.w	r5, [r0, #160]	; 0xa0
        state ? m_fadeCounter.m_activeMask |= 1 << index
    ea3a:	f8a3 2074 	strh.w	r2, [r3, #116]	; 0x74
        state ? m_patternMasks[pattern] |= ledMask
    ea3e:	f8c3 40e8 	str.w	r4, [r3, #232]	; 0xe8
}
    ea42:	e7d6      	b.n	e9f2 <_ZN9ClearCore19DigitalInOutHBridge7RefreshEv+0x2a>
                    if (tickCnt - m_toneStartTick > m_toneOnTicks) {
    ea44:	4923      	ldr	r1, [pc, #140]	; (ead4 <_ZN9ClearCore19DigitalInOutHBridge7RefreshEv+0x10c>)
    ea46:	6e44      	ldr	r4, [r0, #100]	; 0x64
    ea48:	680b      	ldr	r3, [r1, #0]
    ea4a:	6e82      	ldr	r2, [r0, #104]	; 0x68
    ea4c:	1b1b      	subs	r3, r3, r4
    ea4e:	4293      	cmp	r3, r2
    ea50:	d9cf      	bls.n	e9f2 <_ZN9ClearCore19DigitalInOutHBridge7RefreshEv+0x2a>
        m_fadeCounter.m_analogMasks[index] = ledMask;
    ea52:	4a21      	ldr	r2, [pc, #132]	; (ead8 <_ZN9ClearCore19DigitalInOutHBridge7RefreshEv+0x110>)
        index &= 0xf;   // guard against index out of bounds
    ea54:	7903      	ldrb	r3, [r0, #4]
                        m_toneStartTick = tickCnt;
    ea56:	6809      	ldr	r1, [r1, #0]
                        ShiftReg.LedInPwm(m_ledMask, false, m_clearCorePin);
    ea58:	6886      	ldr	r6, [r0, #8]
                                              : m_fadeCounter.m_activeMask &= ~(1 << index);
    ea5a:	f8b2 5074 	ldrh.w	r5, [r2, #116]	; 0x74
                                           : m_patternMasks[pattern] &= ~ledMask;
    ea5e:	f8d2 40e8 	ldr.w	r4, [r2, #232]	; 0xe8
                        m_toneStartTick = tickCnt;
    ea62:	6641      	str	r1, [r0, #100]	; 0x64
        m_fadeCounter.m_analogMasks[index] = ledMask;
    ea64:	f003 030f 	and.w	r3, r3, #15
                                              : m_fadeCounter.m_activeMask &= ~(1 << index);
    ea68:	2101      	movs	r1, #1
    ea6a:	4099      	lsls	r1, r3
        m_fadeCounter.m_analogMasks[index] = ledMask;
    ea6c:	eb02 0383 	add.w	r3, r2, r3, lsl #2
                                              : m_fadeCounter.m_activeMask &= ~(1 << index);
    ea70:	ea25 0501 	bic.w	r5, r5, r1
                        m_toneState = TONE_PERIODIC_OFF;
    ea74:	2704      	movs	r7, #4
                                           : m_patternMasks[pattern] &= ~ledMask;
    ea76:	ea24 0406 	bic.w	r4, r4, r6
    ea7a:	f880 7070 	strb.w	r7, [r0, #112]	; 0x70
                                              : m_fadeCounter.m_activeMask &= ~(1 << index);
    ea7e:	f8a2 5074 	strh.w	r5, [r2, #116]	; 0x74
        m_fadeCounter.m_analogMasks[index] = ledMask;
    ea82:	f8c3 60a0 	str.w	r6, [r3, #160]	; 0xa0
                                           : m_patternMasks[pattern] &= ~ledMask;
    ea86:	f8c2 40e8 	str.w	r4, [r2, #232]	; 0xe8
    ea8a:	e7b2      	b.n	e9f2 <_ZN9ClearCore19DigitalInOutHBridge7RefreshEv+0x2a>
                    if (tickCnt - m_toneStartTick > m_toneOnTicks) {
    ea8c:	4b11      	ldr	r3, [pc, #68]	; (ead4 <_ZN9ClearCore19DigitalInOutHBridge7RefreshEv+0x10c>)
    ea8e:	6e41      	ldr	r1, [r0, #100]	; 0x64
    ea90:	681b      	ldr	r3, [r3, #0]
    ea92:	6e82      	ldr	r2, [r0, #104]	; 0x68
    ea94:	1a5b      	subs	r3, r3, r1
    ea96:	4293      	cmp	r3, r2
    ea98:	d9ab      	bls.n	e9f2 <_ZN9ClearCore19DigitalInOutHBridge7RefreshEv+0x2a>
        m_fadeCounter.m_analogMasks[index] = ledMask;
    ea9a:	4a0f      	ldr	r2, [pc, #60]	; (ead8 <_ZN9ClearCore19DigitalInOutHBridge7RefreshEv+0x110>)
        index &= 0xf;   // guard against index out of bounds
    ea9c:	7903      	ldrb	r3, [r0, #4]
                        ShiftReg.LedInPwm(m_ledMask, false, m_clearCorePin);
    ea9e:	6886      	ldr	r6, [r0, #8]
                                           : m_patternMasks[pattern] &= ~ledMask;
    eaa0:	f8d2 10e8 	ldr.w	r1, [r2, #232]	; 0xe8
                                              : m_fadeCounter.m_activeMask &= ~(1 << index);
    eaa4:	f8b2 4074 	ldrh.w	r4, [r2, #116]	; 0x74
        m_fadeCounter.m_analogMasks[index] = ledMask;
    eaa8:	f003 030f 	and.w	r3, r3, #15
                                              : m_fadeCounter.m_activeMask &= ~(1 << index);
    eaac:	2501      	movs	r5, #1
    eaae:	409d      	lsls	r5, r3
        m_fadeCounter.m_analogMasks[index] = ledMask;
    eab0:	eb02 0383 	add.w	r3, r2, r3, lsl #2
                                              : m_fadeCounter.m_activeMask &= ~(1 << index);
    eab4:	ea24 0405 	bic.w	r4, r4, r5
                                           : m_patternMasks[pattern] &= ~ledMask;
    eab8:	ea21 0106 	bic.w	r1, r1, r6
                        m_toneState = TONE_OFF;
    eabc:	2500      	movs	r5, #0
    eabe:	f880 5070 	strb.w	r5, [r0, #112]	; 0x70
                        m_forceToneDuration = false;
    eac2:	f880 5083 	strb.w	r5, [r0, #131]	; 0x83
                                              : m_fadeCounter.m_activeMask &= ~(1 << index);
    eac6:	f8a2 4074 	strh.w	r4, [r2, #116]	; 0x74
        m_fadeCounter.m_analogMasks[index] = ledMask;
    eaca:	f8c3 60a0 	str.w	r6, [r3, #160]	; 0xa0
                                           : m_patternMasks[pattern] &= ~ledMask;
    eace:	f8c2 10e8 	str.w	r1, [r2, #232]	; 0xe8
    ead2:	e78e      	b.n	e9f2 <_ZN9ClearCore19DigitalInOutHBridge7RefreshEv+0x2a>
    ead4:	20001be8 	.word	0x20001be8
    ead8:	200019d8 	.word	0x200019d8

0000eadc <_ZN9ClearCore19DigitalInOutHBridge10InitializeE13ClearCorePins>:
void DigitalInOutHBridge::Initialize(ClearCorePins clearCorePin) {
    eadc:	b570      	push	{r4, r5, r6, lr}
    eade:	4604      	mov	r4, r0
    DigitalInOut::Initialize(clearCorePin);
    eae0:	f7ff fdda 	bl	e698 <_ZN9ClearCore12DigitalInOut10InitializeE13ClearCorePins>
    m_inFault = false;
    eae4:	2300      	movs	r3, #0
    m_tcc->CTRLA.bit.SWRST = 1;
    eae6:	6fe2      	ldr	r2, [r4, #124]	; 0x7c
    m_inFault = false;
    eae8:	f884 3082 	strb.w	r3, [r4, #130]	; 0x82
    m_tcc->CTRLA.bit.SWRST = 1;
    eaec:	6813      	ldr	r3, [r2, #0]
    eaee:	f043 0301 	orr.w	r3, r3, #1
    eaf2:	6013      	str	r3, [r2, #0]
    SYNCBUSY_WAIT(m_tcc, TCC_SYNCBUSY_SWRST);
    eaf4:	6893      	ldr	r3, [r2, #8]
    eaf6:	f013 0301 	ands.w	r3, r3, #1
    eafa:	d1fb      	bne.n	eaf4 <_ZN9ClearCore19DigitalInOutHBridge10InitializeE13ClearCorePins+0x18>
    m_tcc->DBGCTRL.reg = TCC_DBGCTRL_DBGRUN;
    eafc:	2101      	movs	r1, #1
    m_tcc->COUNT.reg = 0;
    eafe:	6353      	str	r3, [r2, #52]	; 0x34
    m_tcc->DBGCTRL.reg = TCC_DBGCTRL_DBGRUN;
    eb00:	7791      	strb	r1, [r2, #30]
    m_tcc->CTRLBCLR.bit.LUPD = 1;
    eb02:	7915      	ldrb	r5, [r2, #4]
    m_tcc->PER.reg = SystemCoreClock / (TONE_RATE_HZ << 1) - 1;
    eb04:	4b24      	ldr	r3, [pc, #144]	; (eb98 <_ZN9ClearCore19DigitalInOutHBridge10InitializeE13ClearCorePins+0xbc>)
    eb06:	4e25      	ldr	r6, [pc, #148]	; (eb9c <_ZN9ClearCore19DigitalInOutHBridge10InitializeE13ClearCorePins+0xc0>)
    DATA_OUTPUT_STATE(m_pwmAInfo->gpioPort, 1UL << m_pwmAInfo->gpioPin, false);
    eb08:	4825      	ldr	r0, [pc, #148]	; (eba0 <_ZN9ClearCore19DigitalInOutHBridge10InitializeE13ClearCorePins+0xc4>)
    m_tcc->CTRLBCLR.bit.LUPD = 1;
    eb0a:	f045 0502 	orr.w	r5, r5, #2
    eb0e:	7115      	strb	r5, [r2, #4]
    m_tcc->WAVE.reg |= TCC_WAVE_WAVEGEN_DSBOTTOM;
    eb10:	6bd5      	ldr	r5, [r2, #60]	; 0x3c
    eb12:	f045 0505 	orr.w	r5, r5, #5
    eb16:	63d5      	str	r5, [r2, #60]	; 0x3c
    m_tcc->INTENCLR.bit.OVF = 1;
    eb18:	6a55      	ldr	r5, [r2, #36]	; 0x24
    eb1a:	430d      	orrs	r5, r1
    eb1c:	6255      	str	r5, [r2, #36]	; 0x24
    m_tcc->PER.reg = SystemCoreClock / (TONE_RATE_HZ << 1) - 1;
    eb1e:	681b      	ldr	r3, [r3, #0]
    eb20:	fba6 5303 	umull	r5, r3, r6, r3
    eb24:	0bdb      	lsrs	r3, r3, #15
    eb26:	3b01      	subs	r3, #1
    eb28:	6413      	str	r3, [r2, #64]	; 0x40
        m_tcc->CC[iChannel].reg = m_tcc->PER.reg;
    eb2a:	6c13      	ldr	r3, [r2, #64]	; 0x40
    eb2c:	6453      	str	r3, [r2, #68]	; 0x44
    eb2e:	6c13      	ldr	r3, [r2, #64]	; 0x40
    eb30:	6493      	str	r3, [r2, #72]	; 0x48
    DATA_OUTPUT_STATE(m_pwmAInfo->gpioPort, 1UL << m_pwmAInfo->gpioPin, false);
    eb32:	6f63      	ldr	r3, [r4, #116]	; 0x74
    eb34:	f993 2001 	ldrsb.w	r2, [r3, #1]
    eb38:	789d      	ldrb	r5, [r3, #2]
    eb3a:	eb00 12c2 	add.w	r2, r0, r2, lsl #7
    eb3e:	fa01 f605 	lsl.w	r6, r1, r5
    eb42:	6156      	str	r6, [r2, #20]
    DATA_OUTPUT_STATE(m_pwmBInfo->gpioPort, 1UL << m_pwmBInfo->gpioPin, true);
    eb44:	6fa4      	ldr	r4, [r4, #120]	; 0x78
    eb46:	f994 3001 	ldrsb.w	r3, [r4, #1]
    eb4a:	78a4      	ldrb	r4, [r4, #2]
    eb4c:	01db      	lsls	r3, r3, #7
    eb4e:	4418      	add	r0, r3
    eb50:	40a1      	lsls	r1, r4
    eb52:	6181      	str	r1, [r0, #24]
    DATA_DIRECTION_OUTPUT(m_pwmAInfo->gpioPort, 1UL << m_pwmAInfo->gpioPin);
    eb54:	6096      	str	r6, [r2, #8]
    PMUX_SELECTION(m_pwmAInfo->gpioPort, m_pwmAInfo->gpioPin, PER_TIMER_ALT);
    eb56:	eb02 0255 	add.w	r2, r2, r5, lsr #1
    DATA_DIRECTION_OUTPUT(m_pwmBInfo->gpioPort, 1UL << m_pwmBInfo->gpioPin);
    eb5a:	6081      	str	r1, [r0, #8]
    PMUX_SELECTION(m_pwmAInfo->gpioPort, m_pwmAInfo->gpioPin, PER_TIMER_ALT);
    eb5c:	f892 1030 	ldrb.w	r1, [r2, #48]	; 0x30
    PMUX_SELECTION(m_pwmBInfo->gpioPort, m_pwmBInfo->gpioPin, PER_TIMER_ALT);
    eb60:	f103 4382 	add.w	r3, r3, #1090519040	; 0x41000000
    PMUX_SELECTION(m_pwmAInfo->gpioPort, m_pwmAInfo->gpioPin, PER_TIMER_ALT);
    eb64:	2005      	movs	r0, #5
    eb66:	07ed      	lsls	r5, r5, #31
    PMUX_SELECTION(m_pwmBInfo->gpioPort, m_pwmBInfo->gpioPin, PER_TIMER_ALT);
    eb68:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
    PMUX_SELECTION(m_pwmAInfo->gpioPort, m_pwmAInfo->gpioPin, PER_TIMER_ALT);
    eb6c:	bf4c      	ite	mi
    eb6e:	f360 1107 	bfimi	r1, r0, #4, #4
    eb72:	f360 0103 	bfipl	r1, r0, #0, #4
    PMUX_SELECTION(m_pwmBInfo->gpioPort, m_pwmBInfo->gpioPin, PER_TIMER_ALT);
    eb76:	eb03 0354 	add.w	r3, r3, r4, lsr #1
    PMUX_SELECTION(m_pwmAInfo->gpioPort, m_pwmAInfo->gpioPin, PER_TIMER_ALT);
    eb7a:	f882 1030 	strb.w	r1, [r2, #48]	; 0x30
    PMUX_SELECTION(m_pwmBInfo->gpioPort, m_pwmBInfo->gpioPin, PER_TIMER_ALT);
    eb7e:	f893 2030 	ldrb.w	r2, [r3, #48]	; 0x30
    eb82:	2105      	movs	r1, #5
    eb84:	07e0      	lsls	r0, r4, #31
    eb86:	bf4c      	ite	mi
    eb88:	f361 1207 	bfimi	r2, r1, #4, #4
    eb8c:	f361 0203 	bfipl	r2, r1, #0, #4
    eb90:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
    eb94:	bd70      	pop	{r4, r5, r6, pc}
    eb96:	bf00      	nop
    eb98:	200000e0 	.word	0x200000e0
    eb9c:	be37c63b 	.word	0xbe37c63b
    eba0:	41008000 	.word	0x41008000

0000eba4 <_ZN9ClearCore19DigitalInOutHBridge4ModeENS_9Connector14ConnectorModesE>:
    if (m_mode == newMode) {
    eba4:	7982      	ldrb	r2, [r0, #6]
    eba6:	428a      	cmp	r2, r1
    eba8:	d07a      	beq.n	eca0 <_ZN9ClearCore19DigitalInOutHBridge4ModeENS_9Connector14ConnectorModesE+0xfc>
    ebaa:	2908      	cmp	r1, #8
bool DigitalInOutHBridge::Mode(ConnectorModes newMode) {
    ebac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    ebae:	460d      	mov	r5, r1
    ebb0:	d867      	bhi.n	ec82 <_ZN9ClearCore19DigitalInOutHBridge4ModeENS_9Connector14ConnectorModesE+0xde>
    ebb2:	2201      	movs	r2, #1
    ebb4:	fa02 f301 	lsl.w	r3, r2, r1
    ebb8:	f013 0f54 	tst.w	r3, #84	; 0x54
    ebbc:	4604      	mov	r4, r0
    ebbe:	d171      	bne.n	eca4 <_ZN9ClearCore19DigitalInOutHBridge4ModeENS_9Connector14ConnectorModesE+0x100>
    ebc0:	f413 7f90 	tst.w	r3, #288	; 0x120
    ebc4:	d05f      	beq.n	ec86 <_ZN9ClearCore19DigitalInOutHBridge4ModeENS_9Connector14ConnectorModesE+0xe2>
    ebc6:	7901      	ldrb	r1, [r0, #4]
    ebc8:	4a5d      	ldr	r2, [pc, #372]	; (ed40 <_ZN9ClearCore19DigitalInOutHBridge4ModeENS_9Connector14ConnectorModesE+0x19c>)
    ebca:	f001 010f 	and.w	r1, r1, #15
            DATA_OUTPUT_STATE(m_outputPort, m_outputDataMask, !m_inFault);
    ebce:	f894 3082 	ldrb.w	r3, [r4, #130]	; 0x82
    ebd2:	2b00      	cmp	r3, #0
    ebd4:	f040 809e 	bne.w	ed14 <_ZN9ClearCore19DigitalInOutHBridge4ModeENS_9Connector14ConnectorModesE+0x170>
    ebd8:	6b23      	ldr	r3, [r4, #48]	; 0x30
    ebda:	6ba6      	ldr	r6, [r4, #56]	; 0x38
    ebdc:	01db      	lsls	r3, r3, #7
    ebde:	f103 4082 	add.w	r0, r3, #1090519040	; 0x41000000
    ebe2:	f500 4000 	add.w	r0, r0, #32768	; 0x8000
    ebe6:	6186      	str	r6, [r0, #24]
            PMUX_DISABLE(m_outputPort, m_outputDataBit);
    ebe8:	6b60      	ldr	r0, [r4, #52]	; 0x34
    ebea:	f103 4382 	add.w	r3, r3, #1090519040	; 0x41000000
    ebee:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
    ebf2:	4403      	add	r3, r0
        m_fadeCounter.m_analogMasks[index] = ledMask;
    ebf4:	eb02 0681 	add.w	r6, r2, r1, lsl #2
    ebf8:	f893 0040 	ldrb.w	r0, [r3, #64]	; 0x40
    ebfc:	f36f 0000 	bfc	r0, #0, #1
    ec00:	f883 0040 	strb.w	r0, [r3, #64]	; 0x40
            ShiftReg.LedInPwm(m_ledMask,
    ec04:	68a3      	ldr	r3, [r4, #8]
    ec06:	f8c6 30a0 	str.w	r3, [r6, #160]	; 0xa0
                                              : m_fadeCounter.m_activeMask &= ~(1 << index);
    ec0a:	2d05      	cmp	r5, #5
    ec0c:	f000 808b 	beq.w	ed26 <_ZN9ClearCore19DigitalInOutHBridge4ModeENS_9Connector14ConnectorModesE+0x182>
    ec10:	f8b2 0074 	ldrh.w	r0, [r2, #116]	; 0x74
                                           : m_patternMasks[pattern] &= ~ledMask;
    ec14:	f8d2 60e8 	ldr.w	r6, [r2, #232]	; 0xe8
                                              : m_fadeCounter.m_activeMask &= ~(1 << index);
    ec18:	2701      	movs	r7, #1
    ec1a:	fa07 f101 	lsl.w	r1, r7, r1
    ec1e:	ea20 0101 	bic.w	r1, r0, r1
    ec22:	f8a2 1074 	strh.w	r1, [r2, #116]	; 0x74
                                           : m_patternMasks[pattern] &= ~ledMask;
    ec26:	ea26 0303 	bic.w	r3, r6, r3
        PMUX_ENABLE(m_pwmAInfo->gpioPort, m_pwmAInfo->gpioPin);
    ec2a:	6f61      	ldr	r1, [r4, #116]	; 0x74
    ec2c:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
    ec30:	f991 3001 	ldrsb.w	r3, [r1, #1]
    ec34:	4a43      	ldr	r2, [pc, #268]	; (ed44 <_ZN9ClearCore19DigitalInOutHBridge4ModeENS_9Connector14ConnectorModesE+0x1a0>)
    ec36:	7889      	ldrb	r1, [r1, #2]
    ec38:	eb02 13c3 	add.w	r3, r2, r3, lsl #7
    ec3c:	440b      	add	r3, r1
    ec3e:	2101      	movs	r1, #1
    ec40:	f893 0040 	ldrb.w	r0, [r3, #64]	; 0x40
    ec44:	4308      	orrs	r0, r1
    ec46:	f883 0040 	strb.w	r0, [r3, #64]	; 0x40
        PMUX_ENABLE(m_pwmBInfo->gpioPort, m_pwmBInfo->gpioPin);
    ec4a:	6fa0      	ldr	r0, [r4, #120]	; 0x78
    ec4c:	f990 3001 	ldrsb.w	r3, [r0, #1]
    ec50:	7880      	ldrb	r0, [r0, #2]
    ec52:	eb02 13c3 	add.w	r3, r2, r3, lsl #7
    ec56:	4403      	add	r3, r0
    ec58:	f893 2040 	ldrb.w	r2, [r3, #64]	; 0x40
    ec5c:	430a      	orrs	r2, r1
    ec5e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    if (m_tcc->CTRLA.bit.ENABLE != tccControlPwm) {
    ec62:	6fe2      	ldr	r2, [r4, #124]	; 0x7c
    ec64:	6813      	ldr	r3, [r2, #0]
    ec66:	f3c3 0340 	ubfx	r3, r3, #1, #1
    ec6a:	428b      	cmp	r3, r1
    ec6c:	d006      	beq.n	ec7c <_ZN9ClearCore19DigitalInOutHBridge4ModeENS_9Connector14ConnectorModesE+0xd8>
        m_tcc->CTRLA.bit.ENABLE = tccControlPwm;
    ec6e:	6813      	ldr	r3, [r2, #0]
    ec70:	f361 0341 	bfi	r3, r1, #1, #1
    ec74:	6013      	str	r3, [r2, #0]
        SYNCBUSY_WAIT(m_tcc, TCC_SYNCBUSY_ENABLE);
    ec76:	6893      	ldr	r3, [r2, #8]
    ec78:	079b      	lsls	r3, r3, #30
    ec7a:	d4fc      	bmi.n	ec76 <_ZN9ClearCore19DigitalInOutHBridge4ModeENS_9Connector14ConnectorModesE+0xd2>
    m_mode = newMode;
    ec7c:	71a5      	strb	r5, [r4, #6]
    return modeChangeSuccess;
    ec7e:	2001      	movs	r0, #1
    ec80:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        return false;
    ec82:	2000      	movs	r0, #0
    ec84:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    ec86:	061a      	lsls	r2, r3, #24
    ec88:	d5fb      	bpl.n	ec82 <_ZN9ClearCore19DigitalInOutHBridge4ModeENS_9Connector14ConnectorModesE+0xde>
        index &= 0xf;   // guard against index out of bounds
    ec8a:	7901      	ldrb	r1, [r0, #4]
        m_fadeCounter.m_valuesBuf[index] = value;
    ec8c:	4a2c      	ldr	r2, [pc, #176]	; (ed40 <_ZN9ClearCore19DigitalInOutHBridge4ModeENS_9Connector14ConnectorModesE+0x19c>)
            ShiftReg.LedPwmValue(m_clearCorePin, m_amplitude >> 7);
    ec8e:	f9b0 305e 	ldrsh.w	r3, [r0, #94]	; 0x5e
    ec92:	f001 010f 	and.w	r1, r1, #15
    ec96:	1850      	adds	r0, r2, r1
    ec98:	11db      	asrs	r3, r3, #7
    ec9a:	f880 308d 	strb.w	r3, [r0, #141]	; 0x8d
    ec9e:	e796      	b.n	ebce <_ZN9ClearCore19DigitalInOutHBridge4ModeENS_9Connector14ConnectorModesE+0x2a>
        return true;
    eca0:	2001      	movs	r0, #1
    eca2:	4770      	bx	lr
        m_fadeCounter.m_analogMasks[index] = ledMask;
    eca4:	4f26      	ldr	r7, [pc, #152]	; (ed40 <_ZN9ClearCore19DigitalInOutHBridge4ModeENS_9Connector14ConnectorModesE+0x19c>)
        index &= 0xf;   // guard against index out of bounds
    eca6:	7903      	ldrb	r3, [r0, #4]
            ShiftReg.LedInPwm(m_ledMask, false, m_clearCorePin);
    eca8:	f8d0 e008 	ldr.w	lr, [r0, #8]
                                              : m_fadeCounter.m_activeMask &= ~(1 << index);
    ecac:	f8b7 c074 	ldrh.w	ip, [r7, #116]	; 0x74
                                           : m_patternMasks[pattern] &= ~ledMask;
    ecb0:	f8d7 60e8 	ldr.w	r6, [r7, #232]	; 0xe8
        m_fadeCounter.m_analogMasks[index] = ledMask;
    ecb4:	f003 030f 	and.w	r3, r3, #15
                                              : m_fadeCounter.m_activeMask &= ~(1 << index);
    ecb8:	409a      	lsls	r2, r3
        m_fadeCounter.m_analogMasks[index] = ledMask;
    ecba:	eb07 0383 	add.w	r3, r7, r3, lsl #2
                                              : m_fadeCounter.m_activeMask &= ~(1 << index);
    ecbe:	ea2c 0202 	bic.w	r2, ip, r2
                                           : m_patternMasks[pattern] &= ~ledMask;
    ecc2:	ea26 060e 	bic.w	r6, r6, lr
                                              : m_fadeCounter.m_activeMask &= ~(1 << index);
    ecc6:	f8a7 2074 	strh.w	r2, [r7, #116]	; 0x74
        m_fadeCounter.m_analogMasks[index] = ledMask;
    ecca:	f8c3 e0a0 	str.w	lr, [r3, #160]	; 0xa0
                                           : m_patternMasks[pattern] &= ~ledMask;
    ecce:	f8c7 60e8 	str.w	r6, [r7, #232]	; 0xe8
            modeChangeSuccess = DigitalInOut::Mode(newMode);
    ecd2:	f7ff fa73 	bl	e1bc <_ZN9ClearCore12DigitalInOut4ModeENS_9Connector14ConnectorModesE>
    if (!modeChangeSuccess) {
    ecd6:	2800      	cmp	r0, #0
    ecd8:	d0d3      	beq.n	ec82 <_ZN9ClearCore19DigitalInOutHBridge4ModeENS_9Connector14ConnectorModesE+0xde>
        PMUX_DISABLE(m_pwmAInfo->gpioPort, m_pwmAInfo->gpioPin);
    ecda:	6f61      	ldr	r1, [r4, #116]	; 0x74
    ecdc:	4b19      	ldr	r3, [pc, #100]	; (ed44 <_ZN9ClearCore19DigitalInOutHBridge4ModeENS_9Connector14ConnectorModesE+0x1a0>)
    ecde:	f991 2001 	ldrsb.w	r2, [r1, #1]
    ece2:	7889      	ldrb	r1, [r1, #2]
    ece4:	eb03 12c2 	add.w	r2, r3, r2, lsl #7
    ece8:	440a      	add	r2, r1
        PMUX_DISABLE(m_pwmBInfo->gpioPort, m_pwmBInfo->gpioPin);
    ecea:	2100      	movs	r1, #0
        PMUX_DISABLE(m_pwmAInfo->gpioPort, m_pwmAInfo->gpioPin);
    ecec:	f892 0040 	ldrb.w	r0, [r2, #64]	; 0x40
    ecf0:	f36f 0000 	bfc	r0, #0, #1
    ecf4:	f882 0040 	strb.w	r0, [r2, #64]	; 0x40
        PMUX_DISABLE(m_pwmBInfo->gpioPort, m_pwmBInfo->gpioPin);
    ecf8:	6fa2      	ldr	r2, [r4, #120]	; 0x78
    ecfa:	f992 0001 	ldrsb.w	r0, [r2, #1]
    ecfe:	7892      	ldrb	r2, [r2, #2]
    ed00:	eb03 13c0 	add.w	r3, r3, r0, lsl #7
    ed04:	4413      	add	r3, r2
    ed06:	f893 2040 	ldrb.w	r2, [r3, #64]	; 0x40
    ed0a:	f36f 0200 	bfc	r2, #0, #1
    ed0e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    ed12:	e7a6      	b.n	ec62 <_ZN9ClearCore19DigitalInOutHBridge4ModeENS_9Connector14ConnectorModesE+0xbe>
            DATA_OUTPUT_STATE(m_outputPort, m_outputDataMask, !m_inFault);
    ed14:	6b23      	ldr	r3, [r4, #48]	; 0x30
    ed16:	6ba6      	ldr	r6, [r4, #56]	; 0x38
    ed18:	01db      	lsls	r3, r3, #7
    ed1a:	f103 4082 	add.w	r0, r3, #1090519040	; 0x41000000
    ed1e:	f500 4000 	add.w	r0, r0, #32768	; 0x8000
    ed22:	6146      	str	r6, [r0, #20]
    ed24:	e760      	b.n	ebe8 <_ZN9ClearCore19DigitalInOutHBridge4ModeENS_9Connector14ConnectorModesE+0x44>
        state ? m_fadeCounter.m_activeMask |= 1 << index
    ed26:	f8b2 7074 	ldrh.w	r7, [r2, #116]	; 0x74
        state ? m_patternMasks[pattern] |= ledMask
    ed2a:	f8d2 00e8 	ldr.w	r0, [r2, #232]	; 0xe8
        state ? m_fadeCounter.m_activeMask |= 1 << index
    ed2e:	2601      	movs	r6, #1
    ed30:	fa06 f101 	lsl.w	r1, r6, r1
    ed34:	4339      	orrs	r1, r7
    ed36:	f8a2 1074 	strh.w	r1, [r2, #116]	; 0x74
        state ? m_patternMasks[pattern] |= ledMask
    ed3a:	4303      	orrs	r3, r0
    ed3c:	e775      	b.n	ec2a <_ZN9ClearCore19DigitalInOutHBridge4ModeENS_9Connector14ConnectorModesE+0x86>
    ed3e:	bf00      	nop
    ed40:	200019d8 	.word	0x200019d8
    ed44:	41008000 	.word	0x41008000

0000ed48 <_ZN9ClearCore10DmaManager8InstanceEv>:
            aligned(16)));
#endif

DmaManager &DmaMgr = DmaManager::Instance();

DmaManager &DmaManager::Instance() {
    ed48:	b510      	push	{r4, lr}
    static DmaManager *instance = new DmaManager();
    ed4a:	4c07      	ldr	r4, [pc, #28]	; (ed68 <_ZN9ClearCore10DmaManager8InstanceEv+0x20>)
    ed4c:	6823      	ldr	r3, [r4, #0]
    ed4e:	07db      	lsls	r3, r3, #31
    ed50:	d502      	bpl.n	ed58 <_ZN9ClearCore10DmaManager8InstanceEv+0x10>
    ed52:	4b06      	ldr	r3, [pc, #24]	; (ed6c <_ZN9ClearCore10DmaManager8InstanceEv+0x24>)
    ed54:	6818      	ldr	r0, [r3, #0]
    ed56:	bd10      	pop	{r4, pc}
    ed58:	2001      	movs	r0, #1
    ed5a:	f004 fac9 	bl	132f0 <_Znwj>
    ed5e:	4a03      	ldr	r2, [pc, #12]	; (ed6c <_ZN9ClearCore10DmaManager8InstanceEv+0x24>)
    ed60:	2301      	movs	r3, #1
    ed62:	6010      	str	r0, [r2, #0]
    ed64:	6023      	str	r3, [r4, #0]
    return *instance;
}
    ed66:	bd10      	pop	{r4, pc}
    ed68:	20001e2c 	.word	0x20001e2c
    ed6c:	20001ef4 	.word	0x20001ef4

0000ed70 <_ZN9ClearCore10DmaManager10InitializeEv>:

void DmaManager::Initialize() {
    ed70:	b470      	push	{r4, r5, r6}
    /***********************************************************
     * DMA peripheral initialization
     ***********************************************************/
    // Enables the peripheral clock to the DMAC
    CLOCK_ENABLE(AHBMASK, DMAC_);
    ed72:	4a13      	ldr	r2, [pc, #76]	; (edc0 <_ZN9ClearCore10DmaManager10InitializeEv+0x50>)

    // Reset the DMAC to start fresh
    DMAC->CTRL.reg = DMAC_CTRL_SWRST;
    ed74:	4913      	ldr	r1, [pc, #76]	; (edc4 <_ZN9ClearCore10DmaManager10InitializeEv+0x54>)
    CLOCK_ENABLE(AHBMASK, DMAC_);
    ed76:	6913      	ldr	r3, [r2, #16]
    DMAC->CTRL.reg = DMAC_CTRL_SWRST;
    ed78:	2001      	movs	r0, #1
    CLOCK_ENABLE(AHBMASK, DMAC_);
    ed7a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
    ed7e:	6113      	str	r3, [r2, #16]
    // Wait for the reset to finish
    while (DMAC->CTRL.reg == DMAC_CHCTRLA_SWRST) {
    ed80:	460a      	mov	r2, r1
    DMAC->CTRL.reg = DMAC_CTRL_SWRST;
    ed82:	8008      	strh	r0, [r1, #0]
    while (DMAC->CTRL.reg == DMAC_CHCTRLA_SWRST) {
    ed84:	8813      	ldrh	r3, [r2, #0]
    ed86:	b29b      	uxth	r3, r3
    ed88:	2b01      	cmp	r3, #1
    ed8a:	d0fb      	beq.n	ed84 <_ZN9ClearCore10DmaManager10InitializeEv+0x14>
  NVIC->ICER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
    ed8c:	4b0e      	ldr	r3, [pc, #56]	; (edc8 <_ZN9ClearCore10DmaManager10InitializeEv+0x58>)
    NVIC_DisableIRQ(DMAC_0_IRQn);
    /* Initialize DMA interrupt priority  */
    NVIC_SetPriority(DMAC_0_IRQn, DMA_COMPLETE_PRIORITY);

    // Tell the DMAC where the descriptors are (must be located in SRAM)
    DMAC->BASEADDR.reg = (uint32_t)descriptorBase;
    ed8e:	4d0f      	ldr	r5, [pc, #60]	; (edcc <_ZN9ClearCore10DmaManager10InitializeEv+0x5c>)
    DMAC->WRBADDR.reg = (uint32_t)writeBackDescriptor;
    ed90:	4c0f      	ldr	r4, [pc, #60]	; (edd0 <_ZN9ClearCore10DmaManager10InitializeEv+0x60>)
    ed92:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    ed96:	2640      	movs	r6, #64	; 0x40

    // Enable the DMAC and set the priority
    DMAC->CTRL.reg = DMAC_CTRL_DMAENABLE | DMAC_CTRL_LVLEN(0xf);
    ed98:	f640 7102 	movw	r1, #3842	; 0xf02
  NVIC->ICER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
    ed9c:	f8c3 0080 	str.w	r0, [r3, #128]	; 0x80
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    eda0:	f883 631f 	strb.w	r6, [r3, #799]	; 0x31f
    DMAC->BASEADDR.reg = (uint32_t)descriptorBase;
    eda4:	6355      	str	r5, [r2, #52]	; 0x34
    DMAC->WRBADDR.reg = (uint32_t)writeBackDescriptor;
    eda6:	6394      	str	r4, [r2, #56]	; 0x38
    DMAC->CTRL.reg = DMAC_CTRL_DMAENABLE | DMAC_CTRL_LVLEN(0xf);
    eda8:	8011      	strh	r1, [r2, #0]

    DMAC->DBGCTRL.bit.DBGRUN = 1;
    edaa:	7b51      	ldrb	r1, [r2, #13]
    edac:	f041 0101 	orr.w	r1, r1, #1
    edb0:	7351      	strb	r1, [r2, #13]
  NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
    edb2:	6018      	str	r0, [r3, #0]
     * DMA channels that will be automatically triggered
     ***************************************************************/
    DMAC->SWTRIGCTRL.reg &=
        ~((1UL << DMA_ADC_SEQUENCE) | (1UL << DMA_ADC_RESULTS) |
          (1UL << DMA_SERCOM0_SPI_TX) | (1UL << DMA_SERCOM0_SPI_RX) |
          (1UL << DMA_SERCOM7_SPI_TX) | (1UL << DMA_SERCOM7_SPI_RX));
    edb4:	6913      	ldr	r3, [r2, #16]
    edb6:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
    DMAC->SWTRIGCTRL.reg &=
    edba:	6113      	str	r3, [r2, #16]
}
    edbc:	bc70      	pop	{r4, r5, r6}
    edbe:	4770      	bx	lr
    edc0:	40000800 	.word	0x40000800
    edc4:	4100a000 	.word	0x4100a000
    edc8:	e000e100 	.word	0xe000e100
    edcc:	20001e30 	.word	0x20001e30
    edd0:	20001e90 	.word	0x20001e90

0000edd4 <_ZN9ClearCore10DmaManager7ChannelENS_11DmaChannelsE>:

DmacChannel *DmaManager::Channel(DmaChannels index) {
    if (index >= DMA_CHANNEL_COUNT) {
    edd4:	2805      	cmp	r0, #5
        return NULL;
    }
    return &DMAC->Channel[index];
    edd6:	bfda      	itte	le
    edd8:	4b02      	ldrle	r3, [pc, #8]	; (ede4 <_ZN9ClearCore10DmaManager7ChannelENS_11DmaChannelsE+0x10>)
    edda:	eb03 1000 	addle.w	r0, r3, r0, lsl #4
        return NULL;
    edde:	2000      	movgt	r0, #0
}
    ede0:	4770      	bx	lr
    ede2:	bf00      	nop
    ede4:	4100a040 	.word	0x4100a040

0000ede8 <_ZN9ClearCore10DmaManager14BaseDescriptorENS_11DmaChannelsE>:

DmacDescriptor *DmaManager::BaseDescriptor(DmaChannels index) {
    if (index >= DMA_CHANNEL_COUNT) {
    ede8:	2805      	cmp	r0, #5
        return NULL;
    }
    return &descriptorBase[index];
    edea:	bfda      	itte	le
    edec:	4b02      	ldrle	r3, [pc, #8]	; (edf8 <_ZN9ClearCore10DmaManager14BaseDescriptorENS_11DmaChannelsE+0x10>)
    edee:	eb03 1000 	addle.w	r0, r3, r0, lsl #4
        return NULL;
    edf2:	2000      	movgt	r0, #0
}
    edf4:	4770      	bx	lr
    edf6:	bf00      	nop
    edf8:	20001e30 	.word	0x20001e30

0000edfc <_GLOBAL__sub_I__ZN9ClearCore10DmaManager19writeBackDescriptorE>:

    edfc:	b508      	push	{r3, lr}
DmaManager &DmaMgr = DmaManager::Instance();
    edfe:	f7ff ffa3 	bl	ed48 <_ZN9ClearCore10DmaManager8InstanceEv>
    ee02:	4b01      	ldr	r3, [pc, #4]	; (ee08 <_GLOBAL__sub_I__ZN9ClearCore10DmaManager19writeBackDescriptorE+0xc>)
    ee04:	6018      	str	r0, [r3, #0]
    ee06:	bd08      	pop	{r3, pc}
    ee08:	20001ef0 	.word	0x20001ef0

0000ee0c <_ZN9ClearCore16CcioBoardManager12CcioDiscoverEPNS_12SerialDriverE.part.1>:
    else {
        m_pulseStopPending |= pinMask;
    }
}

uint8_t CcioBoardManager::CcioDiscover(SerialDriver *comInstance) {
    ee0c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    ee10:	4604      	mov	r4, r0
    ee12:	4267      	negs	r7, r4
    ee14:	f007 0703 	and.w	r7, r7, #3
        m_faultLed = ShiftRegister::Masks::SR_NO_FEEDBACK_MASK;
        m_lastDiscoverTime = tickCnt;
        return 0;
    }

    m_faultLed = m_serPort->m_ledMask;
    ee18:	f8d1 314c 	ldr.w	r3, [r1, #332]	; 0x14c
    ee1c:	f8c0 30c0 	str.w	r3, [r0, #192]	; 0xc0
    ee20:	f1c7 090d 	rsb	r9, r7, #13

    m_serPort->SpiSsMode(SerialBase::CtrlLineModes::LINE_ON);
    ee24:	4608      	mov	r0, r1
    ee26:	ea4f 0999 	mov.w	r9, r9, lsr #2
    ee2a:	2101      	movs	r1, #1
    ee2c:	f001 ff84 	bl	10d38 <_ZN9ClearCore10SerialBase9SpiSsModeENS0_13CtrlLineModesE>
    ee30:	f109 0901 	add.w	r9, r9, #1
    bool flush0Success = false;
    ee34:	2600      	movs	r6, #0
    bool sendData = true;
    ee36:	2201      	movs	r2, #1
    ee38:	f894 3024 	ldrb.w	r3, [r4, #36]	; 0x24
    ee3c:	ea4f 0a89 	mov.w	sl, r9, lsl #2
    ee40:	f1c7 0b11 	rsb	fp, r7, #17
    uint8_t flushCnt = 0;
    ee44:	4635      	mov	r5, r6
                }
                else {
                    // Check if any 1's got through, otherwise resend 1s
                    if (!AllEntriesEqual(m_readBuf.buf8,
                                         2 * MAX_CCIO_DEVICES, 0)) {
                        m_discoverState = CCIO_TEST;
    ee46:	4690      	mov	r8, r2
    ee48:	2b02      	cmp	r3, #2
    ee4a:	f000 821b 	beq.w	f284 <_ZN9ClearCore16CcioBoardManager12CcioDiscoverEPNS_12SerialDriverE.part.1+0x478>
    ee4e:	2d03      	cmp	r5, #3
    ee50:	f300 8159 	bgt.w	f106 <_ZN9ClearCore16CcioBoardManager12CcioDiscoverEPNS_12SerialDriverE.part.1+0x2fa>
        switch (m_discoverState) {
    ee54:	b1a3      	cbz	r3, ee80 <_ZN9ClearCore16CcioBoardManager12CcioDiscoverEPNS_12SerialDriverE.part.1+0x74>
    ee56:	2b01      	cmp	r3, #1
    ee58:	d1fc      	bne.n	ee54 <_ZN9ClearCore16CcioBoardManager12CcioDiscoverEPNS_12SerialDriverE.part.1+0x48>
                    flushCnt++;
                    sendData = true;
                }
                break;
            case CCIO_TEST:
                if (sendData) {
    ee5a:	b1da      	cbz	r2, ee94 <_ZN9ClearCore16CcioBoardManager12CcioDiscoverEPNS_12SerialDriverE.part.1+0x88>
                    if (!flush0Success) {
    ee5c:	2e00      	cmp	r6, #0
    ee5e:	f040 808d 	bne.w	ef7c <_ZN9ClearCore16CcioBoardManager12CcioDiscoverEPNS_12SerialDriverE.part.1+0x170>
        Fill a buffer with len bytes of the given val
    */
    static void FillBuffer(uint8_t *buf, uint8_t len, uint8_t val) {
        uint8_t i;
        for (i = 0; i < len; i++) {
            *buf++ = val;
    ee62:	6026      	str	r6, [r4, #0]
    ee64:	6066      	str	r6, [r4, #4]
    ee66:	60a6      	str	r6, [r4, #8]
    ee68:	60e6      	str	r6, [r4, #12]
                        // Attempt to flush with 0's
                        FillBuffer(m_writeBuf.buf8, 2 * MAX_CCIO_DEVICES, 0);
                        m_serPort->SpiTransferData(m_writeBuf.buf8,
                                                   m_readBuf.buf8,
                                                   2 * MAX_CCIO_DEVICES);
    ee6a:	2310      	movs	r3, #16
                        // CCIOs
                        FillBuffer(m_writeBuf.buf8,
                                   2 * MAX_CCIO_DEVICES + 1, 0xaa);
                        m_serPort->SpiTransferData(m_writeBuf.buf8,
                                                   m_readBuf.buf8,
                                                   2 * MAX_CCIO_DEVICES + 1);
    ee6c:	f104 0212 	add.w	r2, r4, #18
    ee70:	4621      	mov	r1, r4
    ee72:	6aa0      	ldr	r0, [r4, #40]	; 0x28
    ee74:	f002 f80a 	bl	10e8c <_ZN9ClearCore10SerialBase15SpiTransferDataEPKhPhl>
    ee78:	f894 3024 	ldrb.w	r3, [r4, #36]	; 0x24
    ee7c:	2200      	movs	r2, #0
    ee7e:	e7e3      	b.n	ee48 <_ZN9ClearCore16CcioBoardManager12CcioDiscoverEPNS_12SerialDriverE.part.1+0x3c>
                if (sendData) {
    ee80:	2a00      	cmp	r2, #0
    ee82:	d053      	beq.n	ef2c <_ZN9ClearCore16CcioBoardManager12CcioDiscoverEPNS_12SerialDriverE.part.1+0x120>
    ee84:	f04f 33ff 	mov.w	r3, #4294967295
    ee88:	6023      	str	r3, [r4, #0]
    ee8a:	6063      	str	r3, [r4, #4]
    ee8c:	60a3      	str	r3, [r4, #8]
    ee8e:	60e3      	str	r3, [r4, #12]
                                               2 * MAX_CCIO_DEVICES);
    ee90:	2310      	movs	r3, #16
    ee92:	e7eb      	b.n	ee6c <_ZN9ClearCore16CcioBoardManager12CcioDiscoverEPNS_12SerialDriverE.part.1+0x60>
                    }
                    sendData = false;
                }
                else {
                    if (!flush0Success) {
    ee94:	2e00      	cmp	r6, #0
    ee96:	f040 80a2 	bne.w	efde <_ZN9ClearCore16CcioBoardManager12CcioDiscoverEPNS_12SerialDriverE.part.1+0x1d2>
        Return true if all entries are equal to val
    */
    static bool AllEntriesEqual(const uint8_t *buf, uint8_t len, uint8_t val) {
        uint8_t i;
        for (i = 0; i < len; i++) {
            if (buf[i] != val) {
    ee9a:	7ca2      	ldrb	r2, [r4, #18]
    ee9c:	2aff      	cmp	r2, #255	; 0xff
    ee9e:	f040 8128 	bne.w	f0f2 <_ZN9ClearCore16CcioBoardManager12CcioDiscoverEPNS_12SerialDriverE.part.1+0x2e6>
    eea2:	7ce2      	ldrb	r2, [r4, #19]
    eea4:	2aff      	cmp	r2, #255	; 0xff
    eea6:	f040 8124 	bne.w	f0f2 <_ZN9ClearCore16CcioBoardManager12CcioDiscoverEPNS_12SerialDriverE.part.1+0x2e6>
    eeaa:	7d22      	ldrb	r2, [r4, #20]
    eeac:	2aff      	cmp	r2, #255	; 0xff
    eeae:	f040 8120 	bne.w	f0f2 <_ZN9ClearCore16CcioBoardManager12CcioDiscoverEPNS_12SerialDriverE.part.1+0x2e6>
    eeb2:	7d62      	ldrb	r2, [r4, #21]
    eeb4:	2aff      	cmp	r2, #255	; 0xff
    eeb6:	f040 811c 	bne.w	f0f2 <_ZN9ClearCore16CcioBoardManager12CcioDiscoverEPNS_12SerialDriverE.part.1+0x2e6>
    eeba:	7da2      	ldrb	r2, [r4, #22]
    eebc:	2aff      	cmp	r2, #255	; 0xff
    eebe:	f040 8118 	bne.w	f0f2 <_ZN9ClearCore16CcioBoardManager12CcioDiscoverEPNS_12SerialDriverE.part.1+0x2e6>
    eec2:	7de2      	ldrb	r2, [r4, #23]
    eec4:	2aff      	cmp	r2, #255	; 0xff
    eec6:	f040 8114 	bne.w	f0f2 <_ZN9ClearCore16CcioBoardManager12CcioDiscoverEPNS_12SerialDriverE.part.1+0x2e6>
    eeca:	7e22      	ldrb	r2, [r4, #24]
    eecc:	2aff      	cmp	r2, #255	; 0xff
    eece:	f040 8110 	bne.w	f0f2 <_ZN9ClearCore16CcioBoardManager12CcioDiscoverEPNS_12SerialDriverE.part.1+0x2e6>
    eed2:	7e62      	ldrb	r2, [r4, #25]
    eed4:	2aff      	cmp	r2, #255	; 0xff
    eed6:	f040 810c 	bne.w	f0f2 <_ZN9ClearCore16CcioBoardManager12CcioDiscoverEPNS_12SerialDriverE.part.1+0x2e6>
    eeda:	7ea2      	ldrb	r2, [r4, #26]
    eedc:	2aff      	cmp	r2, #255	; 0xff
    eede:	f040 8108 	bne.w	f0f2 <_ZN9ClearCore16CcioBoardManager12CcioDiscoverEPNS_12SerialDriverE.part.1+0x2e6>
    eee2:	7ee2      	ldrb	r2, [r4, #27]
    eee4:	2aff      	cmp	r2, #255	; 0xff
    eee6:	f040 8104 	bne.w	f0f2 <_ZN9ClearCore16CcioBoardManager12CcioDiscoverEPNS_12SerialDriverE.part.1+0x2e6>
    eeea:	7f22      	ldrb	r2, [r4, #28]
    eeec:	2aff      	cmp	r2, #255	; 0xff
    eeee:	f040 8100 	bne.w	f0f2 <_ZN9ClearCore16CcioBoardManager12CcioDiscoverEPNS_12SerialDriverE.part.1+0x2e6>
    eef2:	7f62      	ldrb	r2, [r4, #29]
    eef4:	2aff      	cmp	r2, #255	; 0xff
    eef6:	f040 80fc 	bne.w	f0f2 <_ZN9ClearCore16CcioBoardManager12CcioDiscoverEPNS_12SerialDriverE.part.1+0x2e6>
    eefa:	7fa2      	ldrb	r2, [r4, #30]
    eefc:	2aff      	cmp	r2, #255	; 0xff
    eefe:	f040 80f8 	bne.w	f0f2 <_ZN9ClearCore16CcioBoardManager12CcioDiscoverEPNS_12SerialDriverE.part.1+0x2e6>
    ef02:	7fe2      	ldrb	r2, [r4, #31]
    ef04:	2aff      	cmp	r2, #255	; 0xff
    ef06:	f040 80f4 	bne.w	f0f2 <_ZN9ClearCore16CcioBoardManager12CcioDiscoverEPNS_12SerialDriverE.part.1+0x2e6>
    ef0a:	f894 2020 	ldrb.w	r2, [r4, #32]
    ef0e:	2aff      	cmp	r2, #255	; 0xff
    ef10:	f040 80ef 	bne.w	f0f2 <_ZN9ClearCore16CcioBoardManager12CcioDiscoverEPNS_12SerialDriverE.part.1+0x2e6>
    ef14:	f894 6021 	ldrb.w	r6, [r4, #33]	; 0x21
    ef18:	3eff      	subs	r6, #255	; 0xff
    ef1a:	bf18      	it	ne
    ef1c:	2601      	movne	r6, #1
                        // resend 0's.
                        if (!AllEntriesEqual(m_readBuf.buf8,
                                             2 * MAX_CCIO_DEVICES, 0xff)) {
                            flush0Success = true;
                        }
                        flushCnt++;
    ef1e:	3501      	adds	r5, #1
    ef20:	b2ed      	uxtb	r5, r5
    ef22:	2d03      	cmp	r5, #3
    ef24:	f04f 0201 	mov.w	r2, #1
    ef28:	dd94      	ble.n	ee54 <_ZN9ClearCore16CcioBoardManager12CcioDiscoverEPNS_12SerialDriverE.part.1+0x48>
    ef2a:	e0ec      	b.n	f106 <_ZN9ClearCore16CcioBoardManager12CcioDiscoverEPNS_12SerialDriverE.part.1+0x2fa>
    ef2c:	7ca2      	ldrb	r2, [r4, #18]
    ef2e:	bb02      	cbnz	r2, ef72 <_ZN9ClearCore16CcioBoardManager12CcioDiscoverEPNS_12SerialDriverE.part.1+0x166>
    ef30:	7ce2      	ldrb	r2, [r4, #19]
    ef32:	b9f2      	cbnz	r2, ef72 <_ZN9ClearCore16CcioBoardManager12CcioDiscoverEPNS_12SerialDriverE.part.1+0x166>
    ef34:	7d22      	ldrb	r2, [r4, #20]
    ef36:	b9e2      	cbnz	r2, ef72 <_ZN9ClearCore16CcioBoardManager12CcioDiscoverEPNS_12SerialDriverE.part.1+0x166>
    ef38:	7d62      	ldrb	r2, [r4, #21]
    ef3a:	b9d2      	cbnz	r2, ef72 <_ZN9ClearCore16CcioBoardManager12CcioDiscoverEPNS_12SerialDriverE.part.1+0x166>
    ef3c:	7da2      	ldrb	r2, [r4, #22]
    ef3e:	b9c2      	cbnz	r2, ef72 <_ZN9ClearCore16CcioBoardManager12CcioDiscoverEPNS_12SerialDriverE.part.1+0x166>
    ef40:	7de2      	ldrb	r2, [r4, #23]
    ef42:	b9b2      	cbnz	r2, ef72 <_ZN9ClearCore16CcioBoardManager12CcioDiscoverEPNS_12SerialDriverE.part.1+0x166>
    ef44:	7e22      	ldrb	r2, [r4, #24]
    ef46:	b9a2      	cbnz	r2, ef72 <_ZN9ClearCore16CcioBoardManager12CcioDiscoverEPNS_12SerialDriverE.part.1+0x166>
    ef48:	7e62      	ldrb	r2, [r4, #25]
    ef4a:	b992      	cbnz	r2, ef72 <_ZN9ClearCore16CcioBoardManager12CcioDiscoverEPNS_12SerialDriverE.part.1+0x166>
    ef4c:	7ea2      	ldrb	r2, [r4, #26]
    ef4e:	b982      	cbnz	r2, ef72 <_ZN9ClearCore16CcioBoardManager12CcioDiscoverEPNS_12SerialDriverE.part.1+0x166>
    ef50:	7ee2      	ldrb	r2, [r4, #27]
    ef52:	b972      	cbnz	r2, ef72 <_ZN9ClearCore16CcioBoardManager12CcioDiscoverEPNS_12SerialDriverE.part.1+0x166>
    ef54:	7f22      	ldrb	r2, [r4, #28]
    ef56:	b962      	cbnz	r2, ef72 <_ZN9ClearCore16CcioBoardManager12CcioDiscoverEPNS_12SerialDriverE.part.1+0x166>
    ef58:	7f62      	ldrb	r2, [r4, #29]
    ef5a:	b952      	cbnz	r2, ef72 <_ZN9ClearCore16CcioBoardManager12CcioDiscoverEPNS_12SerialDriverE.part.1+0x166>
    ef5c:	7fa2      	ldrb	r2, [r4, #30]
    ef5e:	b942      	cbnz	r2, ef72 <_ZN9ClearCore16CcioBoardManager12CcioDiscoverEPNS_12SerialDriverE.part.1+0x166>
    ef60:	7fe2      	ldrb	r2, [r4, #31]
    ef62:	b932      	cbnz	r2, ef72 <_ZN9ClearCore16CcioBoardManager12CcioDiscoverEPNS_12SerialDriverE.part.1+0x166>
    ef64:	f894 2020 	ldrb.w	r2, [r4, #32]
    ef68:	b91a      	cbnz	r2, ef72 <_ZN9ClearCore16CcioBoardManager12CcioDiscoverEPNS_12SerialDriverE.part.1+0x166>
    ef6a:	f894 2021 	ldrb.w	r2, [r4, #33]	; 0x21
    ef6e:	2a00      	cmp	r2, #0
    ef70:	d0d5      	beq.n	ef1e <_ZN9ClearCore16CcioBoardManager12CcioDiscoverEPNS_12SerialDriverE.part.1+0x112>
                        m_discoverState = CCIO_TEST;
    ef72:	f884 8024 	strb.w	r8, [r4, #36]	; 0x24
    ef76:	2501      	movs	r5, #1
                        flush0Success = false;
    ef78:	2600      	movs	r6, #0
    ef7a:	e772      	b.n	ee62 <_ZN9ClearCore16CcioBoardManager12CcioDiscoverEPNS_12SerialDriverE.part.1+0x56>
    ef7c:	2f00      	cmp	r7, #0
    ef7e:	f000 80ba 	beq.w	f0f6 <_ZN9ClearCore16CcioBoardManager12CcioDiscoverEPNS_12SerialDriverE.part.1+0x2ea>
            *buf++ = val;
    ef82:	23aa      	movs	r3, #170	; 0xaa
    ef84:	2f01      	cmp	r7, #1
    ef86:	7023      	strb	r3, [r4, #0]
    ef88:	f104 0101 	add.w	r1, r4, #1
    ef8c:	f000 80db 	beq.w	f146 <_ZN9ClearCore16CcioBoardManager12CcioDiscoverEPNS_12SerialDriverE.part.1+0x33a>
    ef90:	2f02      	cmp	r7, #2
    ef92:	7063      	strb	r3, [r4, #1]
    ef94:	f104 0102 	add.w	r1, r4, #2
    ef98:	f000 80d3 	beq.w	f142 <_ZN9ClearCore16CcioBoardManager12CcioDiscoverEPNS_12SerialDriverE.part.1+0x336>
    ef9c:	70a3      	strb	r3, [r4, #2]
    ef9e:	1ce1      	adds	r1, r4, #3
    efa0:	220e      	movs	r2, #14
    efa2:	f04f 33aa 	mov.w	r3, #2863311530	; 0xaaaaaaaa
    efa6:	51e3      	str	r3, [r4, r7]
    efa8:	19e3      	adds	r3, r4, r7
    efaa:	3304      	adds	r3, #4
    efac:	f04f 30aa 	mov.w	r0, #2863311530	; 0xaaaaaaaa
    efb0:	f1b9 0f03 	cmp.w	r9, #3
    efb4:	6018      	str	r0, [r3, #0]
    efb6:	6058      	str	r0, [r3, #4]
    efb8:	d000      	beq.n	efbc <_ZN9ClearCore16CcioBoardManager12CcioDiscoverEPNS_12SerialDriverE.part.1+0x1b0>
    efba:	6098      	str	r0, [r3, #8]
    efbc:	45d3      	cmp	fp, sl
    efbe:	eba2 020a 	sub.w	r2, r2, sl
    efc2:	eb01 000a 	add.w	r0, r1, sl
    efc6:	d008      	beq.n	efda <_ZN9ClearCore16CcioBoardManager12CcioDiscoverEPNS_12SerialDriverE.part.1+0x1ce>
    efc8:	23aa      	movs	r3, #170	; 0xaa
        for (i = 0; i < len; i++) {
    efca:	2a01      	cmp	r2, #1
            *buf++ = val;
    efcc:	f801 300a 	strb.w	r3, [r1, sl]
        for (i = 0; i < len; i++) {
    efd0:	d003      	beq.n	efda <_ZN9ClearCore16CcioBoardManager12CcioDiscoverEPNS_12SerialDriverE.part.1+0x1ce>
    efd2:	2a02      	cmp	r2, #2
            *buf++ = val;
    efd4:	7043      	strb	r3, [r0, #1]
        for (i = 0; i < len; i++) {
    efd6:	d000      	beq.n	efda <_ZN9ClearCore16CcioBoardManager12CcioDiscoverEPNS_12SerialDriverE.part.1+0x1ce>
            *buf++ = val;
    efd8:	7083      	strb	r3, [r0, #2]
                                                   2 * MAX_CCIO_DEVICES + 1);
    efda:	2311      	movs	r3, #17
    efdc:	e746      	b.n	ee6c <_ZN9ClearCore16CcioBoardManager12CcioDiscoverEPNS_12SerialDriverE.part.1+0x60>
                    else {
                        uint8_t i;
                        bool foundAA = false;
                        // Count until we see a's
                        for (i = 0; i < 2 * MAX_CCIO_DEVICES && !foundAA; i++) {
                            if (m_readBuf.buf8[i] == 0xaa) {
    efde:	7ca1      	ldrb	r1, [r4, #18]
    efe0:	29aa      	cmp	r1, #170	; 0xaa
    efe2:	f000 80aa 	beq.w	f13a <_ZN9ClearCore16CcioBoardManager12CcioDiscoverEPNS_12SerialDriverE.part.1+0x32e>
    efe6:	7ce2      	ldrb	r2, [r4, #19]
    efe8:	2aaa      	cmp	r2, #170	; 0xaa
    efea:	d040      	beq.n	f06e <_ZN9ClearCore16CcioBoardManager12CcioDiscoverEPNS_12SerialDriverE.part.1+0x262>
    efec:	7d23      	ldrb	r3, [r4, #20]
    efee:	2baa      	cmp	r3, #170	; 0xaa
    eff0:	f000 80a5 	beq.w	f13e <_ZN9ClearCore16CcioBoardManager12CcioDiscoverEPNS_12SerialDriverE.part.1+0x332>
    eff4:	7d63      	ldrb	r3, [r4, #21]
    eff6:	2baa      	cmp	r3, #170	; 0xaa
    eff8:	f000 80a7 	beq.w	f14a <_ZN9ClearCore16CcioBoardManager12CcioDiscoverEPNS_12SerialDriverE.part.1+0x33e>
    effc:	7da3      	ldrb	r3, [r4, #22]
    effe:	2baa      	cmp	r3, #170	; 0xaa
    f000:	f000 8118 	beq.w	f234 <_ZN9ClearCore16CcioBoardManager12CcioDiscoverEPNS_12SerialDriverE.part.1+0x428>
    f004:	7de3      	ldrb	r3, [r4, #23]
    f006:	2baa      	cmp	r3, #170	; 0xaa
    f008:	f000 80a1 	beq.w	f14e <_ZN9ClearCore16CcioBoardManager12CcioDiscoverEPNS_12SerialDriverE.part.1+0x342>
    f00c:	7e23      	ldrb	r3, [r4, #24]
    f00e:	2baa      	cmp	r3, #170	; 0xaa
    f010:	f000 8112 	beq.w	f238 <_ZN9ClearCore16CcioBoardManager12CcioDiscoverEPNS_12SerialDriverE.part.1+0x42c>
    f014:	7e63      	ldrb	r3, [r4, #25]
    f016:	2baa      	cmp	r3, #170	; 0xaa
    f018:	f000 8110 	beq.w	f23c <_ZN9ClearCore16CcioBoardManager12CcioDiscoverEPNS_12SerialDriverE.part.1+0x430>
    f01c:	7ea3      	ldrb	r3, [r4, #26]
    f01e:	2baa      	cmp	r3, #170	; 0xaa
    f020:	f000 810e 	beq.w	f240 <_ZN9ClearCore16CcioBoardManager12CcioDiscoverEPNS_12SerialDriverE.part.1+0x434>
    f024:	7ee3      	ldrb	r3, [r4, #27]
    f026:	2baa      	cmp	r3, #170	; 0xaa
    f028:	f000 8102 	beq.w	f230 <_ZN9ClearCore16CcioBoardManager12CcioDiscoverEPNS_12SerialDriverE.part.1+0x424>
    f02c:	7f23      	ldrb	r3, [r4, #28]
    f02e:	2baa      	cmp	r3, #170	; 0xaa
    f030:	f000 8108 	beq.w	f244 <_ZN9ClearCore16CcioBoardManager12CcioDiscoverEPNS_12SerialDriverE.part.1+0x438>
    f034:	7f63      	ldrb	r3, [r4, #29]
    f036:	2baa      	cmp	r3, #170	; 0xaa
    f038:	f000 811c 	beq.w	f274 <_ZN9ClearCore16CcioBoardManager12CcioDiscoverEPNS_12SerialDriverE.part.1+0x468>
    f03c:	7fa3      	ldrb	r3, [r4, #30]
    f03e:	2baa      	cmp	r3, #170	; 0xaa
    f040:	f000 811a 	beq.w	f278 <_ZN9ClearCore16CcioBoardManager12CcioDiscoverEPNS_12SerialDriverE.part.1+0x46c>
    f044:	7fe3      	ldrb	r3, [r4, #31]
    f046:	2baa      	cmp	r3, #170	; 0xaa
    f048:	f000 8118 	beq.w	f27c <_ZN9ClearCore16CcioBoardManager12CcioDiscoverEPNS_12SerialDriverE.part.1+0x470>
    f04c:	f894 3020 	ldrb.w	r3, [r4, #32]
    f050:	2baa      	cmp	r3, #170	; 0xaa
    f052:	f000 8115 	beq.w	f280 <_ZN9ClearCore16CcioBoardManager12CcioDiscoverEPNS_12SerialDriverE.part.1+0x474>
    f056:	f894 3021 	ldrb.w	r3, [r4, #33]	; 0x21
    f05a:	2baa      	cmp	r3, #170	; 0xaa
    f05c:	f000 8108 	beq.w	f270 <_ZN9ClearCore16CcioBoardManager12CcioDiscoverEPNS_12SerialDriverE.part.1+0x464>
                            }
                            else {
                                numFound++;
                            }
                        }
                        if (!foundAA &&
    f060:	f894 3022 	ldrb.w	r3, [r4, #34]	; 0x22
    f064:	2baa      	cmp	r3, #170	; 0xaa
                                numFound++;
    f066:	bf08      	it	eq
    f068:	2310      	moveq	r3, #16
                        if (!foundAA &&
    f06a:	f040 80ed 	bne.w	f248 <_ZN9ClearCore16CcioBoardManager12CcioDiscoverEPNS_12SerialDriverE.part.1+0x43c>
            buf64.writeMarker = 0;
    f06e:	2200      	movs	r2, #0
                                                false);
                            m_lastDiscoverTime = tickCnt;
                            return 0;
                        }
                        // Break from loop
                        m_discoverState = CCIO_FOUND;
    f070:	2502      	movs	r5, #2
    f072:	f884 5024 	strb.w	r5, [r4, #36]	; 0x24
    f076:	74a2      	strb	r2, [r4, #18]
            buf64.inputs = 0;
    f078:	74e2      	strb	r2, [r4, #19]
    f07a:	7522      	strb	r2, [r4, #20]
    f07c:	7562      	strb	r2, [r4, #21]
    f07e:	75a2      	strb	r2, [r4, #22]
    f080:	75e2      	strb	r2, [r4, #23]
    f082:	7622      	strb	r2, [r4, #24]
    f084:	7662      	strb	r2, [r4, #25]
    f086:	76a2      	strb	r2, [r4, #26]
            buf64.outputsSwapped = 0;
    f088:	76e2      	strb	r2, [r4, #27]
    f08a:	7722      	strb	r2, [r4, #28]
    f08c:	7762      	strb	r2, [r4, #29]
    f08e:	77a2      	strb	r2, [r4, #30]
    f090:	77e2      	strb	r2, [r4, #31]
    f092:	f884 2020 	strb.w	r2, [r4, #32]
    f096:	f884 2021 	strb.w	r2, [r4, #33]	; 0x21
    f09a:	f884 2022 	strb.w	r2, [r4, #34]	; 0x22
            buf64.readMarker = 0;
    f09e:	f884 2023 	strb.w	r2, [r4, #35]	; 0x23
        }
    }

    // numFound is the number of input and output regs found
    // so divide by 2 to get CCIO-8 count
    numFound >>= 1;
    f0a2:	105b      	asrs	r3, r3, #1
    f0a4:	b2dd      	uxtb	r5, r3
    m_ccioCnt = numFound;
    m_ccioMask = (1 << (m_ccioCnt * CCIO_PINS_PER_BOARD)) - 1;
    f0a6:	2701      	movs	r7, #1
    f0a8:	00da      	lsls	r2, r3, #3
    m_ccioCnt = numFound;
    f0aa:	f884 502c 	strb.w	r5, [r4, #44]	; 0x2c
    m_ccioMask = (1 << (m_ccioCnt * CCIO_PINS_PER_BOARD)) - 1;
    f0ae:	fa07 f202 	lsl.w	r2, r7, r2
        uint8_t cnt = CcioCount();
    f0b2:	f894 602c 	ldrb.w	r6, [r4, #44]	; 0x2c
    f0b6:	3a01      	subs	r2, #1
    f0b8:	4610      	mov	r0, r2
    f0ba:	17d1      	asrs	r1, r2, #31
    f0bc:	b2f2      	uxtb	r2, r6
        return (cnt > 1) ? (cnt >> 1) : 1;
    f0be:	42ba      	cmp	r2, r7
    f0c0:	bfc8      	it	gt
    f0c2:	fa42 f707 	asrgt.w	r7, r2, r7
    f0c6:	e9c4 011c 	strd	r0, r1, [r4, #112]	; 0x70
    m_ccioRefreshRate = RefreshRate();
    f0ca:	f884 702d 	strb.w	r7, [r4, #45]	; 0x2d

    if (numFound != 0) {
    f0ce:	2b00      	cmp	r3, #0
    f0d0:	d13f      	bne.n	f152 <_ZN9ClearCore16CcioBoardManager12CcioDiscoverEPNS_12SerialDriverE.part.1+0x346>
    f0d2:	4b6d      	ldr	r3, [pc, #436]	; (f288 <_ZN9ClearCore16CcioBoardManager12CcioDiscoverEPNS_12SerialDriverE.part.1+0x47c>)
        m_ccioOverloaded = 0;
        m_ccioLinkBroken = false;
        ShiftReg.LedInFault(m_faultLed, m_ccioOverloaded);
    }

    ShiftReg.LedPattern(m_faultLed,
    f0d4:	f8d4 10c0 	ldr.w	r1, [r4, #192]	; 0xc0
                                           : m_patternMasks[pattern] &= ~ledMask;
    f0d8:	f8d3 20ec 	ldr.w	r2, [r3, #236]	; 0xec
    f0dc:	43c9      	mvns	r1, r1
    f0de:	4011      	ands	r1, r2
                        ShiftRegister::LED_BLINK_CCIO_ONLINE,
                        !m_ccioLinkBroken && !m_ccioOverloaded &&
                        (numFound > 0));

    m_lastDiscoverTime = tickCnt;
    f0e0:	4a6a      	ldr	r2, [pc, #424]	; (f28c <_ZN9ClearCore16CcioBoardManager12CcioDiscoverEPNS_12SerialDriverE.part.1+0x480>)
    f0e2:	f8c3 10ec 	str.w	r1, [r3, #236]	; 0xec
    f0e6:	6813      	ldr	r3, [r2, #0]
    f0e8:	f8c4 30c8 	str.w	r3, [r4, #200]	; 0xc8
    return numFound;
}
    f0ec:	4628      	mov	r0, r5
    f0ee:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
                            flush0Success = true;
    f0f2:	2601      	movs	r6, #1
    f0f4:	e713      	b.n	ef1e <_ZN9ClearCore16CcioBoardManager12CcioDiscoverEPNS_12SerialDriverE.part.1+0x112>
            *buf++ = val;
    f0f6:	4623      	mov	r3, r4
    f0f8:	f04f 32aa 	mov.w	r2, #2863311530	; 0xaaaaaaaa
    f0fc:	f843 2b04 	str.w	r2, [r3], #4
                        FillBuffer(m_writeBuf.buf8,
    f100:	4621      	mov	r1, r4
    f102:	2211      	movs	r2, #17
    f104:	e752      	b.n	efac <_ZN9ClearCore16CcioBoardManager12CcioDiscoverEPNS_12SerialDriverE.part.1+0x1a0>
            StatusMgr.BlinkCode(
    f106:	4a62      	ldr	r2, [pc, #392]	; (f290 <_ZN9ClearCore16CcioBoardManager12CcioDiscoverEPNS_12SerialDriverE.part.1+0x484>)
                                BlinkCodeDriver::DEVICE_ERROR_CCIO);
    f108:	6810      	ldr	r0, [r2, #0]
                            m_ccioLinkBroken = true;
    f10a:	2301      	movs	r3, #1
    f10c:	f884 3092 	strb.w	r3, [r4, #146]	; 0x92
                                BlinkCodeDriver::DEVICE_ERROR_CCIO);
    f110:	2208      	movs	r2, #8
    f112:	2102      	movs	r1, #2
    f114:	f002 fb06 	bl	11724 <_ZN9ClearCore13StatusManager9BlinkCodeENS_15BlinkCodeDriver15BlinkCodeGroupsEh>
    f118:	4a5b      	ldr	r2, [pc, #364]	; (f288 <_ZN9ClearCore16CcioBoardManager12CcioDiscoverEPNS_12SerialDriverE.part.1+0x47c>)
    f11a:	f8d4 00c0 	ldr.w	r0, [r4, #192]	; 0xc0
    f11e:	f8d2 30ec 	ldr.w	r3, [r2, #236]	; 0xec
                            m_lastDiscoverTime = tickCnt;
    f122:	495a      	ldr	r1, [pc, #360]	; (f28c <_ZN9ClearCore16CcioBoardManager12CcioDiscoverEPNS_12SerialDriverE.part.1+0x480>)
    f124:	ea23 0300 	bic.w	r3, r3, r0
    f128:	6809      	ldr	r1, [r1, #0]
    f12a:	f8c2 30ec 	str.w	r3, [r2, #236]	; 0xec
                            return 0;
    f12e:	2500      	movs	r5, #0
                            m_lastDiscoverTime = tickCnt;
    f130:	f8c4 10c8 	str.w	r1, [r4, #200]	; 0xc8
}
    f134:	4628      	mov	r0, r5
    f136:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
                            if (m_readBuf.buf8[i] == 0xaa) {
    f13a:	4613      	mov	r3, r2
    f13c:	e797      	b.n	f06e <_ZN9ClearCore16CcioBoardManager12CcioDiscoverEPNS_12SerialDriverE.part.1+0x262>
                                numFound++;
    f13e:	2302      	movs	r3, #2
    f140:	e795      	b.n	f06e <_ZN9ClearCore16CcioBoardManager12CcioDiscoverEPNS_12SerialDriverE.part.1+0x262>
    f142:	220f      	movs	r2, #15
    f144:	e72d      	b.n	efa2 <_ZN9ClearCore16CcioBoardManager12CcioDiscoverEPNS_12SerialDriverE.part.1+0x196>
    f146:	2210      	movs	r2, #16
    f148:	e72b      	b.n	efa2 <_ZN9ClearCore16CcioBoardManager12CcioDiscoverEPNS_12SerialDriverE.part.1+0x196>
    f14a:	2303      	movs	r3, #3
    f14c:	e78f      	b.n	f06e <_ZN9ClearCore16CcioBoardManager12CcioDiscoverEPNS_12SerialDriverE.part.1+0x262>
    f14e:	2305      	movs	r3, #5
    f150:	e78d      	b.n	f06e <_ZN9ClearCore16CcioBoardManager12CcioDiscoverEPNS_12SerialDriverE.part.1+0x262>
            UINT64_MAX >> ((MAX_CCIO_DEVICES - m_ccioCnt) *
    f152:	f1c3 0108 	rsb	r1, r3, #8
    f156:	00ce      	lsls	r6, r1, #3
    f158:	f04f 30ff 	mov.w	r0, #4294967295
    f15c:	f1c6 0220 	rsb	r2, r6, #32
    f160:	fa00 f202 	lsl.w	r2, r0, r2
    f164:	fa20 fe06 	lsr.w	lr, r0, r6
    f168:	f1a6 0720 	sub.w	r7, r6, #32
    f16c:	fa20 f707 	lsr.w	r7, r0, r7
    f170:	ea4e 0e02 	orr.w	lr, lr, r2
            buf64.writeMarker = 0;
    f174:	4622      	mov	r2, r4
    f176:	ea4e 0e07 	orr.w	lr, lr, r7
    f17a:	40f0      	lsrs	r0, r6
    f17c:	2600      	movs	r6, #0
        m_lastOutputsSwapped =
    f17e:	f8c4 e058 	str.w	lr, [r4, #88]	; 0x58
    f182:	65e0      	str	r0, [r4, #92]	; 0x5c
    f184:	f802 6b01 	strb.w	r6, [r2], #1
        m_writeBuf.buf8[MAX_CCIO_DEVICES] = MARKER_BYTE;
    f188:	27cc      	movs	r7, #204	; 0xcc
            buf64.inputs = 0;
    f18a:	7066      	strb	r6, [r4, #1]
        m_serPort->SpiTransferData(m_writeBuf.buf8 +
    f18c:	f104 0812 	add.w	r8, r4, #18
    f190:	7056      	strb	r6, [r2, #1]
    f192:	7096      	strb	r6, [r2, #2]
    f194:	70d6      	strb	r6, [r2, #3]
    f196:	7116      	strb	r6, [r2, #4]
    f198:	7156      	strb	r6, [r2, #5]
    f19a:	7196      	strb	r6, [r2, #6]
                                   (MAX_CCIO_DEVICES - m_ccioCnt) + 1,
    f19c:	f1c3 0209 	rsb	r2, r3, #9
                                   2 * m_ccioCnt + 1);
    f1a0:	005b      	lsls	r3, r3, #1
        m_writeBuf.buf64.outputsSwapped =
    f1a2:	f8c4 e009 	str.w	lr, [r4, #9]
                                   2 * m_ccioCnt + 1);
    f1a6:	4442      	add	r2, r8
    f1a8:	3301      	adds	r3, #1
    f1aa:	4421      	add	r1, r4
        m_writeBuf.buf64.outputsSwapped =
    f1ac:	f8c4 000d 	str.w	r0, [r4, #13]
        m_writeBuf.buf8[MAX_CCIO_DEVICES] = MARKER_BYTE;
    f1b0:	7227      	strb	r7, [r4, #8]
            buf64.readMarker = 0;
    f1b2:	7466      	strb	r6, [r4, #17]
                                   2 * m_ccioCnt + 1);
    f1b4:	6aa0      	ldr	r0, [r4, #40]	; 0x28
    f1b6:	f001 fe69 	bl	10e8c <_ZN9ClearCore10SerialBase15SpiTransferDataEPKhPhl>
        m_serPort->SpiSsMode(SerialBase::CtrlLineModes::LINE_OFF);
    f1ba:	4631      	mov	r1, r6
    f1bc:	6aa0      	ldr	r0, [r4, #40]	; 0x28
    f1be:	f001 fdbb 	bl	10d38 <_ZN9ClearCore10SerialBase9SpiSsModeENS0_13CtrlLineModesE>
        m_writeBuf.buf8[(MAX_CCIO_DEVICES - m_ccioCnt)] = MARKER_BYTE;
    f1c2:	f894 302c 	ldrb.w	r3, [r4, #44]	; 0x2c
    f1c6:	f1c3 0308 	rsb	r3, r3, #8
        m_serPort->SpiSsMode(SerialBase::CtrlLineModes::LINE_ON);
    f1ca:	2101      	movs	r1, #1
        m_writeBuf.buf8[(MAX_CCIO_DEVICES - m_ccioCnt)] = MARKER_BYTE;
    f1cc:	54e7      	strb	r7, [r4, r3]
        m_writeBuf.buf8[MAX_CCIO_DEVICES] = 0;
    f1ce:	7226      	strb	r6, [r4, #8]
        m_serPort->SpiSsMode(SerialBase::CtrlLineModes::LINE_ON);
    f1d0:	6aa0      	ldr	r0, [r4, #40]	; 0x28
    f1d2:	f001 fdb1 	bl	10d38 <_ZN9ClearCore10SerialBase9SpiSsModeENS0_13CtrlLineModesE>
                                   (MAX_CCIO_DEVICES - m_ccioCnt),
    f1d6:	f894 302c 	ldrb.w	r3, [r4, #44]	; 0x2c
                                   2 * m_ccioCnt + 1);
    f1da:	6aa0      	ldr	r0, [r4, #40]	; 0x28
                                   (MAX_CCIO_DEVICES - m_ccioCnt) + 1,
    f1dc:	f1c3 0209 	rsb	r2, r3, #9
                                   (MAX_CCIO_DEVICES - m_ccioCnt),
    f1e0:	f1c3 0108 	rsb	r1, r3, #8
                                   2 * m_ccioCnt + 1);
    f1e4:	2701      	movs	r7, #1
    f1e6:	4442      	add	r2, r8
    f1e8:	eb07 0343 	add.w	r3, r7, r3, lsl #1
    f1ec:	4421      	add	r1, r4
    f1ee:	f001 fe4d 	bl	10e8c <_ZN9ClearCore10SerialBase15SpiTransferDataEPKhPhl>
        m_serPort->SpiSsMode(SerialBase::CtrlLineModes::LINE_OFF);
    f1f2:	4631      	mov	r1, r6
    f1f4:	6aa0      	ldr	r0, [r4, #40]	; 0x28
    f1f6:	f001 fd9f 	bl	10d38 <_ZN9ClearCore10SerialBase9SpiSsModeENS0_13CtrlLineModesE>
        m_ccioRefreshDelay = m_ccioRefreshRate;
    f1fa:	f894 202d 	ldrb.w	r2, [r4, #45]	; 0x2d
            m_patternMasks[LED_BLINK_OVERLOAD] &= ~ledMask;
    f1fe:	4b22      	ldr	r3, [pc, #136]	; (f288 <_ZN9ClearCore16CcioBoardManager12CcioDiscoverEPNS_12SerialDriverE.part.1+0x47c>)
    f200:	f884 202e 	strb.w	r2, [r4, #46]	; 0x2e
    f204:	f8d3 20f0 	ldr.w	r2, [r3, #240]	; 0xf0
        ShiftReg.LedInFault(m_faultLed, m_ccioOverloaded);
    f208:	f8d4 10c0 	ldr.w	r1, [r4, #192]	; 0xc0
        state ? m_patternMasks[pattern] |= ledMask
    f20c:	f8d3 00ec 	ldr.w	r0, [r3, #236]	; 0xec
        m_consGlitchCnt = 0;
    f210:	f8a4 6090 	strh.w	r6, [r4, #144]	; 0x90
            m_patternMasks[LED_BLINK_OVERLOAD] &= ~ledMask;
    f214:	ea22 0201 	bic.w	r2, r2, r1
        m_ccioOverloaded = 0;
    f218:	f04f 0800 	mov.w	r8, #0
    f21c:	f04f 0900 	mov.w	r9, #0
        m_ccioLinkBroken = false;
    f220:	f884 6092 	strb.w	r6, [r4, #146]	; 0x92
        m_ccioOverloaded = 0;
    f224:	e9c4 8926 	strd	r8, r9, [r4, #152]	; 0x98
        state ? m_patternMasks[pattern] |= ledMask
    f228:	4301      	orrs	r1, r0
            m_patternMasks[LED_BLINK_OVERLOAD] &= ~ledMask;
    f22a:	f8c3 20f0 	str.w	r2, [r3, #240]	; 0xf0
    f22e:	e757      	b.n	f0e0 <_ZN9ClearCore16CcioBoardManager12CcioDiscoverEPNS_12SerialDriverE.part.1+0x2d4>
                                numFound++;
    f230:	2309      	movs	r3, #9
    f232:	e71c      	b.n	f06e <_ZN9ClearCore16CcioBoardManager12CcioDiscoverEPNS_12SerialDriverE.part.1+0x262>
    f234:	2304      	movs	r3, #4
    f236:	e71a      	b.n	f06e <_ZN9ClearCore16CcioBoardManager12CcioDiscoverEPNS_12SerialDriverE.part.1+0x262>
    f238:	2306      	movs	r3, #6
    f23a:	e718      	b.n	f06e <_ZN9ClearCore16CcioBoardManager12CcioDiscoverEPNS_12SerialDriverE.part.1+0x262>
    f23c:	2307      	movs	r3, #7
    f23e:	e716      	b.n	f06e <_ZN9ClearCore16CcioBoardManager12CcioDiscoverEPNS_12SerialDriverE.part.1+0x262>
    f240:	2308      	movs	r3, #8
    f242:	e714      	b.n	f06e <_ZN9ClearCore16CcioBoardManager12CcioDiscoverEPNS_12SerialDriverE.part.1+0x262>
    f244:	230a      	movs	r3, #10
    f246:	e712      	b.n	f06e <_ZN9ClearCore16CcioBoardManager12CcioDiscoverEPNS_12SerialDriverE.part.1+0x262>
                            m_ccioCnt = 0;
    f248:	2300      	movs	r3, #0
    f24a:	f884 302c 	strb.w	r3, [r4, #44]	; 0x2c
        uint8_t cnt = CcioCount();
    f24e:	f894 302c 	ldrb.w	r3, [r4, #44]	; 0x2c
                            StatusMgr.BlinkCode(
    f252:	4a0f      	ldr	r2, [pc, #60]	; (f290 <_ZN9ClearCore16CcioBoardManager12CcioDiscoverEPNS_12SerialDriverE.part.1+0x484>)
    f254:	b2db      	uxtb	r3, r3
        return (cnt > 1) ? (cnt >> 1) : 1;
    f256:	2b01      	cmp	r3, #1
                            m_ccioMask = 0;
    f258:	f04f 0000 	mov.w	r0, #0
    f25c:	f04f 0100 	mov.w	r1, #0
    f260:	bfcc      	ite	gt
    f262:	105b      	asrgt	r3, r3, #1
    f264:	2301      	movle	r3, #1
    f266:	e9c4 011c 	strd	r0, r1, [r4, #112]	; 0x70
                            m_ccioRefreshRate = RefreshRate();
    f26a:	f884 302d 	strb.w	r3, [r4, #45]	; 0x2d
    f26e:	e74b      	b.n	f108 <_ZN9ClearCore16CcioBoardManager12CcioDiscoverEPNS_12SerialDriverE.part.1+0x2fc>
                                numFound++;
    f270:	230f      	movs	r3, #15
    f272:	e6fc      	b.n	f06e <_ZN9ClearCore16CcioBoardManager12CcioDiscoverEPNS_12SerialDriverE.part.1+0x262>
    f274:	230b      	movs	r3, #11
    f276:	e6fa      	b.n	f06e <_ZN9ClearCore16CcioBoardManager12CcioDiscoverEPNS_12SerialDriverE.part.1+0x262>
    f278:	230c      	movs	r3, #12
    f27a:	e6f8      	b.n	f06e <_ZN9ClearCore16CcioBoardManager12CcioDiscoverEPNS_12SerialDriverE.part.1+0x262>
    f27c:	230d      	movs	r3, #13
    f27e:	e6f6      	b.n	f06e <_ZN9ClearCore16CcioBoardManager12CcioDiscoverEPNS_12SerialDriverE.part.1+0x262>
    f280:	230e      	movs	r3, #14
    f282:	e6f4      	b.n	f06e <_ZN9ClearCore16CcioBoardManager12CcioDiscoverEPNS_12SerialDriverE.part.1+0x262>
        if (flushCnt >= MAX_FLUSH_ATTEMPTS) {
    f284:	2300      	movs	r3, #0
    f286:	e70c      	b.n	f0a2 <_ZN9ClearCore16CcioBoardManager12CcioDiscoverEPNS_12SerialDriverE.part.1+0x296>
    f288:	200019d8 	.word	0x200019d8
    f28c:	20001be8 	.word	0x20001be8
    f290:	20001f0c 	.word	0x20001f0c

0000f294 <_ZN9ClearCore16CcioBoardManager8InstanceEv>:
CcioBoardManager &CcioBoardManager::Instance() {
    f294:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    static CcioBoardManager *instance = new CcioBoardManager();
    f298:	4f42      	ldr	r7, [pc, #264]	; (f3a4 <_ZN9ClearCore16CcioBoardManager8InstanceEv+0x110>)
    f29a:	683c      	ldr	r4, [r7, #0]
    f29c:	f014 0401 	ands.w	r4, r4, #1
    f2a0:	d003      	beq.n	f2aa <_ZN9ClearCore16CcioBoardManager8InstanceEv+0x16>
    f2a2:	4b41      	ldr	r3, [pc, #260]	; (f3a8 <_ZN9ClearCore16CcioBoardManager8InstanceEv+0x114>)
    f2a4:	6818      	ldr	r0, [r3, #0]
    f2a6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    f2aa:	f44f 602d 	mov.w	r0, #2768	; 0xad0
    f2ae:	f004 f81f 	bl	132f0 <_Znwj>
            buf64.writeMarker = 0;
    f2b2:	4603      	mov	r3, r0
    f2b4:	4606      	mov	r6, r0
    f2b6:	f803 4b01 	strb.w	r4, [r3], #1
      m_lastDiscoverTime(0) {
    f2ba:	f04f 38ff 	mov.w	r8, #4294967295
    f2be:	f04f 39ff 	mov.w	r9, #4294967295
    f2c2:	2200      	movs	r2, #0
            buf64.inputs = 0;
    f2c4:	7074      	strb	r4, [r6, #1]
    f2c6:	705c      	strb	r4, [r3, #1]
    f2c8:	709c      	strb	r4, [r3, #2]
    f2ca:	70dc      	strb	r4, [r3, #3]
    f2cc:	711c      	strb	r4, [r3, #4]
    f2ce:	715c      	strb	r4, [r3, #5]
    f2d0:	719c      	strb	r4, [r3, #6]
    f2d2:	71dc      	strb	r4, [r3, #7]
    f2d4:	2300      	movs	r3, #0
            buf64.outputsSwapped = 0;
    f2d6:	7274      	strb	r4, [r6, #9]
    f2d8:	72b4      	strb	r4, [r6, #10]
    f2da:	72f4      	strb	r4, [r6, #11]
    f2dc:	7334      	strb	r4, [r6, #12]
    f2de:	7374      	strb	r4, [r6, #13]
    f2e0:	73b4      	strb	r4, [r6, #14]
    f2e2:	73f4      	strb	r4, [r6, #15]
    f2e4:	7434      	strb	r4, [r6, #16]
            buf64.readMarker = 0;
    f2e6:	7474      	strb	r4, [r6, #17]
            buf64.writeMarker = 0;
    f2e8:	74b4      	strb	r4, [r6, #18]
            buf64.inputs = 0;
    f2ea:	74f4      	strb	r4, [r6, #19]
    f2ec:	7534      	strb	r4, [r6, #20]
    f2ee:	7574      	strb	r4, [r6, #21]
    f2f0:	75b4      	strb	r4, [r6, #22]
    f2f2:	75f4      	strb	r4, [r6, #23]
    f2f4:	7634      	strb	r4, [r6, #24]
    f2f6:	7674      	strb	r4, [r6, #25]
    f2f8:	76b4      	strb	r4, [r6, #26]
            buf64.outputsSwapped = 0;
    f2fa:	76f4      	strb	r4, [r6, #27]
    f2fc:	7734      	strb	r4, [r6, #28]
    f2fe:	7774      	strb	r4, [r6, #29]
    f300:	77b4      	strb	r4, [r6, #30]
    f302:	77f4      	strb	r4, [r6, #31]
    f304:	f886 4020 	strb.w	r4, [r6, #32]
    f308:	e9c6 8916 	strd	r8, r9, [r6, #88]	; 0x58
    f30c:	e9c6 230c 	strd	r2, r3, [r6, #48]	; 0x30
    f310:	e9c6 230e 	strd	r2, r3, [r6, #56]	; 0x38
    f314:	e9c6 2310 	strd	r2, r3, [r6, #64]	; 0x40
    f318:	e9c6 2312 	strd	r2, r3, [r6, #72]	; 0x48
    f31c:	e9c6 2314 	strd	r2, r3, [r6, #80]	; 0x50
    f320:	e9c6 2318 	strd	r2, r3, [r6, #96]	; 0x60
    f324:	e9c6 231a 	strd	r2, r3, [r6, #104]	; 0x68
    f328:	e9c6 231c 	strd	r2, r3, [r6, #112]	; 0x70
    f32c:	e9c6 231e 	strd	r2, r3, [r6, #120]	; 0x78
    f330:	e9c6 2320 	strd	r2, r3, [r6, #128]	; 0x80
    f334:	e9c6 2322 	strd	r2, r3, [r6, #136]	; 0x88
    f338:	e9c6 2326 	strd	r2, r3, [r6, #152]	; 0x98
    f33c:	e9c6 2328 	strd	r2, r3, [r6, #160]	; 0xa0
    f340:	e9c6 232a 	strd	r2, r3, [r6, #168]	; 0xa8
    f344:	e9c6 232c 	strd	r2, r3, [r6, #176]	; 0xb0
    f348:	e9c6 232e 	strd	r2, r3, [r6, #184]	; 0xb8
    f34c:	2301      	movs	r3, #1
    f34e:	f886 4021 	strb.w	r4, [r6, #33]	; 0x21
    f352:	f886 4022 	strb.w	r4, [r6, #34]	; 0x22
            buf64.readMarker = 0;
    f356:	f886 4023 	strb.w	r4, [r6, #35]	; 0x23
    f35a:	f886 4024 	strb.w	r4, [r6, #36]	; 0x24
    f35e:	62b4      	str	r4, [r6, #40]	; 0x28
    f360:	f886 402c 	strb.w	r4, [r6, #44]	; 0x2c
    f364:	f886 402e 	strb.w	r4, [r6, #46]	; 0x2e
    f368:	f8a6 4090 	strh.w	r4, [r6, #144]	; 0x90
    f36c:	f886 4092 	strb.w	r4, [r6, #146]	; 0x92
    f370:	f8c6 40c0 	str.w	r4, [r6, #192]	; 0xc0
    f374:	f8c6 40c8 	str.w	r4, [r6, #200]	; 0xc8
    f378:	f886 302d 	strb.w	r3, [r6, #45]	; 0x2d
    f37c:	f886 30c4 	strb.w	r3, [r6, #196]	; 0xc4
    f380:	f106 04d0 	add.w	r4, r6, #208	; 0xd0
    f384:	f506 652d 	add.w	r5, r6, #2768	; 0xad0
    f388:	4620      	mov	r0, r4
    f38a:	3428      	adds	r4, #40	; 0x28
    f38c:	f000 fc8a 	bl	fca4 <_ZN9ClearCore7CcioPinC1Ev>
    f390:	42ac      	cmp	r4, r5
    f392:	d1f9      	bne.n	f388 <_ZN9ClearCore16CcioBoardManager8InstanceEv+0xf4>
    static CcioBoardManager *instance = new CcioBoardManager();
    f394:	4a04      	ldr	r2, [pc, #16]	; (f3a8 <_ZN9ClearCore16CcioBoardManager8InstanceEv+0x114>)
    f396:	2301      	movs	r3, #1
    f398:	6016      	str	r6, [r2, #0]
    f39a:	4630      	mov	r0, r6
    f39c:	603b      	str	r3, [r7, #0]
}
    f39e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    f3a2:	bf00      	nop
    f3a4:	20001ef8 	.word	0x20001ef8
    f3a8:	20001f00 	.word	0x20001f00

0000f3ac <_ZN9ClearCore16CcioBoardManager10InitializeEv>:
void CcioBoardManager::Initialize() {
    f3ac:	b570      	push	{r4, r5, r6, lr}
    f3ae:	4606      	mov	r6, r0
    f3b0:	f100 05d0 	add.w	r5, r0, #208	; 0xd0
    f3b4:	2440      	movs	r4, #64	; 0x40
        m_ccioPins[i].Initialize((ClearCorePins)(i + CLEARCORE_PIN_CCIO_BASE));
    f3b6:	682b      	ldr	r3, [r5, #0]
    f3b8:	b221      	sxth	r1, r4
    f3ba:	3401      	adds	r4, #1
    f3bc:	4628      	mov	r0, r5
    f3be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    f3c0:	b2a4      	uxth	r4, r4
    f3c2:	4798      	blx	r3
    for (uint8_t i = 0; i < CCIO_PIN_CNT; i++) {
    f3c4:	2c80      	cmp	r4, #128	; 0x80
    f3c6:	f105 0528 	add.w	r5, r5, #40	; 0x28
    f3ca:	d1f4      	bne.n	f3b6 <_ZN9ClearCore16CcioBoardManager10InitializeEv+0xa>
    if (m_discoverState == CCIO_FOUND || (LinkBroken() && !m_autoRediscover)) {
    f3cc:	f896 3024 	ldrb.w	r3, [r6, #36]	; 0x24
    f3d0:	2b02      	cmp	r3, #2
    f3d2:	d00b      	beq.n	f3ec <_ZN9ClearCore16CcioBoardManager10InitializeEv+0x40>
    f3d4:	f896 3092 	ldrb.w	r3, [r6, #146]	; 0x92
    f3d8:	2b00      	cmp	r3, #0
    f3da:	d13c      	bne.n	f456 <_ZN9ClearCore16CcioBoardManager10InitializeEv+0xaa>
        m_lastDiscoverTime = tickCnt;
    f3dc:	4a20      	ldr	r2, [pc, #128]	; (f460 <_ZN9ClearCore16CcioBoardManager10InitializeEv+0xb4>)
    m_serPort = comInstance;
    f3de:	2300      	movs	r3, #0
        m_lastDiscoverTime = tickCnt;
    f3e0:	6812      	ldr	r2, [r2, #0]
    f3e2:	f8c6 20c8 	str.w	r2, [r6, #200]	; 0xc8
    m_serPort = comInstance;
    f3e6:	62b3      	str	r3, [r6, #40]	; 0x28
        m_faultLed = ShiftRegister::Masks::SR_NO_FEEDBACK_MASK;
    f3e8:	f8c6 30c0 	str.w	r3, [r6, #192]	; 0xc0
    m_ccioCnt = 0;
    f3ec:	2100      	movs	r1, #0
    m_ccioRefreshRate = 1;
    f3ee:	2001      	movs	r0, #1
    m_ccioMask = 0;
    f3f0:	2200      	movs	r2, #0
    f3f2:	2300      	movs	r3, #0
    m_lastOutputsSwapped = ~0ULL;
    f3f4:	f04f 34ff 	mov.w	r4, #4294967295
    f3f8:	f04f 35ff 	mov.w	r5, #4294967295
    m_ccioCnt = 0;
    f3fc:	f886 102c 	strb.w	r1, [r6, #44]	; 0x2c
    m_ccioRefreshDelay = 0;
    f400:	f886 102e 	strb.w	r1, [r6, #46]	; 0x2e
    m_ccioRefreshRate = 1;
    f404:	f886 002d 	strb.w	r0, [r6, #45]	; 0x2d
    m_consGlitchCnt = 0;
    f408:	f8a6 1090 	strh.w	r1, [r6, #144]	; 0x90
    m_ccioLinkBroken = false;
    f40c:	f886 1092 	strb.w	r1, [r6, #146]	; 0x92
    m_ccioMask = 0;
    f410:	e9c6 231c 	strd	r2, r3, [r6, #112]	; 0x70
    m_throttledOutputs = 0;
    f414:	e9c6 230c 	strd	r2, r3, [r6, #48]	; 0x30
    m_currentInputs = 0;
    f418:	e9c6 230e 	strd	r2, r3, [r6, #56]	; 0x38
    m_filteredInputs = 0;
    f41c:	e9c6 2310 	strd	r2, r3, [r6, #64]	; 0x40
    m_currentOutputs = 0;
    f420:	e9c6 2312 	strd	r2, r3, [r6, #72]	; 0x48
    m_outputMask = 0;
    f424:	e9c6 2314 	strd	r2, r3, [r6, #80]	; 0x50
    m_lastOutputs = 0;
    f428:	e9c6 2318 	strd	r2, r3, [r6, #96]	; 0x60
    m_outputsWithThrottling = 0;
    f42c:	e9c6 231a 	strd	r2, r3, [r6, #104]	; 0x68
    m_pulseActive = 0;
    f430:	e9c6 231e 	strd	r2, r3, [r6, #120]	; 0x78
    m_pulseValue = 0;
    f434:	e9c6 2320 	strd	r2, r3, [r6, #128]	; 0x80
    m_pulseStopPending = 0;
    f438:	e9c6 2322 	strd	r2, r3, [r6, #136]	; 0x88
    m_ccioOverloaded = 0;
    f43c:	e9c6 2326 	strd	r2, r3, [r6, #152]	; 0x98
    m_ccioOverloadAccum = 0;
    f440:	e9c6 2328 	strd	r2, r3, [r6, #160]	; 0xa0
    m_inputRegRisen = 0;
    f444:	e9c6 232c 	strd	r2, r3, [r6, #176]	; 0xb0
    m_inputRegFallen = 0;
    f448:	e9c6 232e 	strd	r2, r3, [r6, #184]	; 0xb8
    m_autoRediscover = true;
    f44c:	f886 00c4 	strb.w	r0, [r6, #196]	; 0xc4
    m_lastOutputsSwapped = ~0ULL;
    f450:	e9c6 4516 	strd	r4, r5, [r6, #88]	; 0x58
}
    f454:	bd70      	pop	{r4, r5, r6, pc}
    if (m_discoverState == CCIO_FOUND || (LinkBroken() && !m_autoRediscover)) {
    f456:	f896 30c4 	ldrb.w	r3, [r6, #196]	; 0xc4
    f45a:	2b00      	cmp	r3, #0
    f45c:	d1be      	bne.n	f3dc <_ZN9ClearCore16CcioBoardManager10InitializeEv+0x30>
    f45e:	e7c5      	b.n	f3ec <_ZN9ClearCore16CcioBoardManager10InitializeEv+0x40>
    f460:	20001be8 	.word	0x20001be8

0000f464 <_ZN9ClearCore16CcioBoardManager8PinStateE13ClearCorePins>:
    if (pinNum < CLEARCORE_PIN_CCIO_BASE || pinNum >= CLEARCORE_PIN_CCIO_MAX) {
    f464:	3940      	subs	r1, #64	; 0x40
    f466:	b28b      	uxth	r3, r1
    f468:	2b3f      	cmp	r3, #63	; 0x3f
    f46a:	d80f      	bhi.n	f48c <_ZN9ClearCore16CcioBoardManager8PinStateE13ClearCorePins+0x28>
    return ((m_filteredInputs >> bitIndex) & 1);
    f46c:	6c42      	ldr	r2, [r0, #68]	; 0x44
    f46e:	6c00      	ldr	r0, [r0, #64]	; 0x40
    f470:	b2c9      	uxtb	r1, r1
    f472:	f1c1 0320 	rsb	r3, r1, #32
    f476:	fa02 f303 	lsl.w	r3, r2, r3
    f47a:	40c8      	lsrs	r0, r1
    f47c:	3920      	subs	r1, #32
    f47e:	4318      	orrs	r0, r3
    f480:	fa22 f101 	lsr.w	r1, r2, r1
    f484:	4308      	orrs	r0, r1
}
    f486:	f000 0001 	and.w	r0, r0, #1
    f48a:	4770      	bx	lr
    f48c:	2000      	movs	r0, #0
    f48e:	f000 0001 	and.w	r0, r0, #1
    f492:	4770      	bx	lr

0000f494 <_ZN9ClearCore16CcioBoardManager7RefreshEv>:
    if (!m_serPort || !m_ccioCnt || m_ccioLinkBroken) {
    f494:	6a81      	ldr	r1, [r0, #40]	; 0x28
    f496:	2900      	cmp	r1, #0
    f498:	f000 8084 	beq.w	f5a4 <_ZN9ClearCore16CcioBoardManager7RefreshEv+0x110>
    f49c:	f890 302c 	ldrb.w	r3, [r0, #44]	; 0x2c
    f4a0:	2b00      	cmp	r3, #0
    f4a2:	d07f      	beq.n	f5a4 <_ZN9ClearCore16CcioBoardManager7RefreshEv+0x110>
    f4a4:	f890 2092 	ldrb.w	r2, [r0, #146]	; 0x92
    f4a8:	2a00      	cmp	r2, #0
    f4aa:	d17b      	bne.n	f5a4 <_ZN9ClearCore16CcioBoardManager7RefreshEv+0x110>
void CcioBoardManager::Refresh() {
    f4ac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    if (m_pulseActive) {
    f4b0:	e9d0 ab1e 	ldrd	sl, fp, [r0, #120]	; 0x78
    f4b4:	ea5a 040b 	orrs.w	r4, sl, fp
void CcioBoardManager::Refresh() {
    f4b8:	b091      	sub	sp, #68	; 0x44
    if (m_pulseActive) {
    f4ba:	f000 80a3 	beq.w	f604 <_ZN9ClearCore16CcioBoardManager7RefreshEv+0x170>
    f4be:	e9d0 4520 	ldrd	r4, r5, [r0, #128]	; 0x80
    f4c2:	e9cd 4502 	strd	r4, r5, [sp, #8]
        for (uint8_t i = 0; i < CCIO_PINS_PER_BOARD * m_ccioCnt; i++) {
    f4c6:	2400      	movs	r4, #0
    f4c8:	2500      	movs	r5, #0
    f4ca:	4690      	mov	r8, r2
    f4cc:	ea4f 0cc3 	mov.w	ip, r3, lsl #3
    f4d0:	4696      	mov	lr, r2
    f4d2:	e9cd 4504 	strd	r4, r5, [sp, #16]
    f4d6:	e9cd 4500 	strd	r4, r5, [sp]
    f4da:	2201      	movs	r2, #1
    f4dc:	2300      	movs	r3, #0
    f4de:	4626      	mov	r6, r4
    f4e0:	462f      	mov	r7, r5
    f4e2:	9106      	str	r1, [sp, #24]
    f4e4:	e037      	b.n	f556 <_ZN9ClearCore16CcioBoardManager7RefreshEv+0xc2>
                        if (++currentPin.m_pulseCounter >=
    f4e6:	f8b1 80f6 	ldrh.w	r8, [r1, #246]	; 0xf6
                        currentPin.m_pulseTicksRemaining =
    f4ea:	f8d1 50ec 	ldr.w	r5, [r1, #236]	; 0xec
                                currentPin.m_pulseStopCount &&
    f4ee:	f8b1 40f4 	ldrh.w	r4, [r1, #244]	; 0xf4
                        currentPin.m_pulseTicksRemaining =
    f4f2:	f8c1 50f0 	str.w	r5, [r1, #240]	; 0xf0
                        if (++currentPin.m_pulseCounter >=
    f4f6:	f108 0501 	add.w	r5, r8, #1
    f4fa:	b2ad      	uxth	r5, r5
                                currentPin.m_pulseStopCount &&
    f4fc:	42a5      	cmp	r5, r4
                        pulseFall |= mask;
    f4fe:	ea46 0602 	orr.w	r6, r6, r2
    f502:	ea47 0703 	orr.w	r7, r7, r3
                                currentPin.m_pulseStopCount &&
    f506:	f8a1 50f6 	strh.w	r5, [r1, #246]	; 0xf6
    f50a:	db06      	blt.n	f51a <_ZN9ClearCore16CcioBoardManager7RefreshEv+0x86>
    f50c:	b12c      	cbz	r4, f51a <_ZN9ClearCore16CcioBoardManager7RefreshEv+0x86>
                            pulsesEnded |= mask;
    f50e:	e9dd 4500 	ldrd	r4, r5, [sp]
    f512:	4314      	orrs	r4, r2
    f514:	431d      	orrs	r5, r3
    f516:	e9cd 4500 	strd	r4, r5, [sp]
                        if (m_pulseStopPending & mask) {
    f51a:	e9d0 4522 	ldrd	r4, r5, [r0, #136]	; 0x88
    f51e:	ea04 0802 	and.w	r8, r4, r2
    f522:	ea05 0903 	and.w	r9, r5, r3
    f526:	ea58 0109 	orrs.w	r1, r8, r9
    f52a:	d00b      	beq.n	f544 <_ZN9ClearCore16CcioBoardManager7RefreshEv+0xb0>
                            m_pulseStopPending &= ~mask;
    f52c:	ea24 0402 	bic.w	r4, r4, r2
    f530:	ea25 0503 	bic.w	r5, r5, r3
    f534:	e9c0 4522 	strd	r4, r5, [r0, #136]	; 0x88
                            pulsesEnded |= mask;
    f538:	e9dd 4500 	ldrd	r4, r5, [sp]
    f53c:	4314      	orrs	r4, r2
    f53e:	431d      	orrs	r5, r3
    f540:	e9cd 4500 	strd	r4, r5, [sp]
        for (uint8_t i = 0; i < CCIO_PINS_PER_BOARD * m_ccioCnt; i++) {
    f544:	f10e 0e01 	add.w	lr, lr, #1
    f548:	fa5f fe8e 	uxtb.w	lr, lr
            mask <<= 1;
    f54c:	1892      	adds	r2, r2, r2
    f54e:	415b      	adcs	r3, r3
        for (uint8_t i = 0; i < CCIO_PINS_PER_BOARD * m_ccioCnt; i++) {
    f550:	45e6      	cmp	lr, ip
    f552:	46f0      	mov	r8, lr
    f554:	da27      	bge.n	f5a6 <_ZN9ClearCore16CcioBoardManager7RefreshEv+0x112>
            if (m_pulseActive & mask) {
    f556:	ea0a 0402 	and.w	r4, sl, r2
    f55a:	ea0b 0503 	and.w	r5, fp, r3
    f55e:	ea54 0105 	orrs.w	r1, r4, r5
    f562:	d0ef      	beq.n	f544 <_ZN9ClearCore16CcioBoardManager7RefreshEv+0xb0>
                if (!--currentPin.m_pulseTicksRemaining) {
    f564:	eb08 0888 	add.w	r8, r8, r8, lsl #2
    f568:	eb00 01c8 	add.w	r1, r0, r8, lsl #3
    f56c:	f8d1 40f0 	ldr.w	r4, [r1, #240]	; 0xf0
    f570:	3c01      	subs	r4, #1
    f572:	f8c1 40f0 	str.w	r4, [r1, #240]	; 0xf0
    f576:	2c00      	cmp	r4, #0
    f578:	d1e4      	bne.n	f544 <_ZN9ClearCore16CcioBoardManager7RefreshEv+0xb0>
                    if (m_pulseValue & mask) {
    f57a:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
    f57e:	4014      	ands	r4, r2
    f580:	401d      	ands	r5, r3
    f582:	432c      	orrs	r4, r5
    f584:	d1af      	bne.n	f4e6 <_ZN9ClearCore16CcioBoardManager7RefreshEv+0x52>
                        if (m_pulseStopPending & mask) {
    f586:	e9d0 4522 	ldrd	r4, r5, [r0, #136]	; 0x88
    f58a:	ea04 0802 	and.w	r8, r4, r2
    f58e:	ea05 0903 	and.w	r9, r5, r3
    f592:	e9cd 4508 	strd	r4, r5, [sp, #32]
    f596:	ea58 0409 	orrs.w	r4, r8, r9
    f59a:	f000 8115 	beq.w	f7c8 <_ZN9ClearCore16CcioBoardManager7RefreshEv+0x334>
                            m_pulseStopPending &= ~mask;
    f59e:	e9dd 4508 	ldrd	r4, r5, [sp, #32]
    f5a2:	e7c3      	b.n	f52c <_ZN9ClearCore16CcioBoardManager7RefreshEv+0x98>
    f5a4:	4770      	bx	lr
        m_currentOutputs = (m_currentOutputs | pulseRise) & ~pulseFall;
    f5a6:	e9d0 8912 	ldrd	r8, r9, [r0, #72]	; 0x48
    f5aa:	9906      	ldr	r1, [sp, #24]
    f5ac:	e9cd 8906 	strd	r8, r9, [sp, #24]
        m_pulseValue = (m_pulseValue | pulseRise) & ~pulseFall;
    f5b0:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
    f5b4:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
    f5b8:	4642      	mov	r2, r8
    f5ba:	464b      	mov	r3, r9
    f5bc:	4322      	orrs	r2, r4
    f5be:	432b      	orrs	r3, r5
    f5c0:	4614      	mov	r4, r2
    f5c2:	461d      	mov	r5, r3
        m_currentOutputs = (m_currentOutputs | pulseRise) & ~pulseFall;
    f5c4:	4642      	mov	r2, r8
    f5c6:	464b      	mov	r3, r9
    f5c8:	e9dd 8906 	ldrd	r8, r9, [sp, #24]
    f5cc:	43f6      	mvns	r6, r6
    f5ce:	43ff      	mvns	r7, r7
    f5d0:	ea48 0802 	orr.w	r8, r8, r2
    f5d4:	ea49 0903 	orr.w	r9, r9, r3
        m_pulseValue = (m_pulseValue | pulseRise) & ~pulseFall;
    f5d8:	ea04 0206 	and.w	r2, r4, r6
    f5dc:	ea05 0307 	and.w	r3, r5, r7
        m_pulseActive &= ~pulsesEnded;
    f5e0:	e9dd 4500 	ldrd	r4, r5, [sp]
    f5e4:	ea2a 0404 	bic.w	r4, sl, r4
    f5e8:	ea2b 0505 	bic.w	r5, fp, r5
    f5ec:	46a2      	mov	sl, r4
    f5ee:	46ab      	mov	fp, r5
        m_currentOutputs = (m_currentOutputs | pulseRise) & ~pulseFall;
    f5f0:	ea08 0406 	and.w	r4, r8, r6
    f5f4:	ea09 0507 	and.w	r5, r9, r7
        m_pulseValue = (m_pulseValue | pulseRise) & ~pulseFall;
    f5f8:	e9c0 2320 	strd	r2, r3, [r0, #128]	; 0x80
        m_pulseActive &= ~pulsesEnded;
    f5fc:	e9c0 ab1e 	strd	sl, fp, [r0, #120]	; 0x78
        m_currentOutputs = (m_currentOutputs | pulseRise) & ~pulseFall;
    f600:	e9c0 4512 	strd	r4, r5, [r0, #72]	; 0x48
    if (--m_ccioRefreshDelay) {
    f604:	f890 502e 	ldrb.w	r5, [r0, #46]	; 0x2e
    f608:	3d01      	subs	r5, #1
    f60a:	b2ed      	uxtb	r5, r5
    f60c:	f880 502e 	strb.w	r5, [r0, #46]	; 0x2e
    f610:	b115      	cbz	r5, f618 <_ZN9ClearCore16CcioBoardManager7RefreshEv+0x184>
}
    f612:	b011      	add	sp, #68	; 0x44
    f614:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    f618:	4604      	mov	r4, r0
        m_ccioRefreshDelay = m_ccioRefreshRate;
    f61a:	f890 302d 	ldrb.w	r3, [r0, #45]	; 0x2d
    f61e:	f880 302e 	strb.w	r3, [r0, #46]	; 0x2e
    m_serPort->SpiAsyncWaitComplete();
    f622:	4608      	mov	r0, r1
    f624:	f001 fcb4 	bl	10f90 <_ZN9ClearCore10SerialBase20SpiAsyncWaitCompleteEv>
    m_serPort->SpiSsMode(SerialBase::CtrlLineModes::LINE_OFF);
    f628:	4629      	mov	r1, r5
    f62a:	6aa0      	ldr	r0, [r4, #40]	; 0x28
    f62c:	f001 fb84 	bl	10d38 <_ZN9ClearCore10SerialBase9SpiSsModeENS0_13CtrlLineModesE>
        m_readBuf.buf8[MAX_CCIO_DEVICES + m_ccioCnt + 1] != MARKER_BYTE;
    f630:	f894 c02c 	ldrb.w	ip, [r4, #44]	; 0x2c
    f634:	f10c 0309 	add.w	r3, ip, #9
    f638:	4423      	add	r3, r4
    uint64_t lastInputs = m_currentInputs;
    f63a:	e9d4 010e 	ldrd	r0, r1, [r4, #56]	; 0x38
        m_readBuf.buf8[MAX_CCIO_DEVICES + m_ccioCnt + 1] != MARKER_BYTE;
    f63e:	7c9a      	ldrb	r2, [r3, #18]
    m_readBuf.buf8[MAX_CCIO_DEVICES + m_ccioCnt + 1] = 0;
    f640:	749d      	strb	r5, [r3, #18]
    if (markerError || m_lastOutputsSwapped ^ m_readBuf.buf64.outputsSwapped) {
    f642:	2acc      	cmp	r2, #204	; 0xcc
    f644:	f000 814e 	beq.w	f8e4 <_ZN9ClearCore16CcioBoardManager7RefreshEv+0x450>
        if ((m_consGlitchCnt++ >= MAX_GLITCH_LIM) && (MAX_GLITCH_LIM > 0)) {
    f648:	f8b4 3090 	ldrh.w	r3, [r4, #144]	; 0x90
    f64c:	1c5a      	adds	r2, r3, #1
    f64e:	b292      	uxth	r2, r2
    f650:	3b04      	subs	r3, #4
    f652:	4616      	mov	r6, r2
    f654:	920b      	str	r2, [sp, #44]	; 0x2c
    f656:	b29b      	uxth	r3, r3
    f658:	f64f 72fb 	movw	r2, #65531	; 0xfffb
    f65c:	4293      	cmp	r3, r2
    f65e:	f8a4 6090 	strh.w	r6, [r4, #144]	; 0x90
    f662:	f240 81c6 	bls.w	f9f2 <_ZN9ClearCore16CcioBoardManager7RefreshEv+0x55e>
    f666:	2200      	movs	r2, #0
    f668:	2300      	movs	r3, #0
    f66a:	e9cd 0108 	strd	r0, r1, [sp, #32]
    f66e:	e9cd 2302 	strd	r2, r3, [sp, #8]
    uint64_t overloadedOutputSample = m_outputsWithThrottling & ~lastInputs;
    f672:	e9d4 231a 	ldrd	r2, r3, [r4, #104]	; 0x68
    f676:	ea22 0000 	bic.w	r0, r2, r0
    f67a:	ea23 0101 	bic.w	r1, r3, r1
    uint64_t overloadedOutputRT = m_ccioOverloaded;
    f67e:	e9d4 2326 	ldrd	r2, r3, [r4, #152]	; 0x98
    uint64_t overloadedOutputSample = m_outputsWithThrottling & ~lastInputs;
    f682:	e9cd 0106 	strd	r0, r1, [sp, #24]
    uint64_t overloadedOutputRT = m_ccioOverloaded;
    f686:	4610      	mov	r0, r2
    f688:	4619      	mov	r1, r3
    for (uint8_t i = 0; i < CCIO_PINS_PER_BOARD * m_ccioCnt; i++) {
    f68a:	ea4f 0ecc 	mov.w	lr, ip, lsl #3
    uint64_t overloadedOutputRT = m_ccioOverloaded;
    f68e:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
    for (uint8_t i = 0; i < CCIO_PINS_PER_BOARD * m_ccioCnt; i++) {
    f692:	f1bc 0f00 	cmp.w	ip, #0
    f696:	f000 81d3 	beq.w	fa40 <_ZN9ClearCore16CcioBoardManager7RefreshEv+0x5ac>
    f69a:	e9cd 0104 	strd	r0, r1, [sp, #16]
    f69e:	2200      	movs	r2, #0
    f6a0:	2000      	movs	r0, #0
    f6a2:	2100      	movs	r1, #0
    f6a4:	4613      	mov	r3, r2
    f6a6:	e9cd 0100 	strd	r0, r1, [sp]
    f6aa:	f04f 0801 	mov.w	r8, #1
    f6ae:	f04f 0900 	mov.w	r9, #0
            currentPin.m_overloadTripCnt = CCIO_OVERLOAD_TRIP_TICKS;
    f6b2:	f04f 0a0c 	mov.w	sl, #12
    f6b6:	e038      	b.n	f72a <_ZN9ClearCore16CcioBoardManager7RefreshEv+0x296>
            if (!(--currentPin.m_overloadFoldbackCnt)) {
    f6b8:	0099      	lsls	r1, r3, #2
    f6ba:	18c8      	adds	r0, r1, r3
    f6bc:	eb04 00c0 	add.w	r0, r4, r0, lsl #3
    f6c0:	f8b0 b0e6 	ldrh.w	fp, [r0, #230]	; 0xe6
    f6c4:	f10b 3bff 	add.w	fp, fp, #4294967295
    f6c8:	fa1f fb8b 	uxth.w	fp, fp
    f6cc:	f8a0 b0e6 	strh.w	fp, [r0, #230]	; 0xe6
    f6d0:	f1bb 0f00 	cmp.w	fp, #0
    f6d4:	d107      	bne.n	f6e6 <_ZN9ClearCore16CcioBoardManager7RefreshEv+0x252>
                m_throttledOutputs &= ~mask;
    f6d6:	ea26 0608 	bic.w	r6, r6, r8
    f6da:	ea27 0709 	bic.w	r7, r7, r9
    f6de:	e9c4 670c 	strd	r6, r7, [r4, #48]	; 0x30
                currentPin.m_overloadTripCnt = CCIO_OVERLOAD_TRIP_TICKS;
    f6e2:	f8a0 a0e4 	strh.w	sl, [r0, #228]	; 0xe4
        if (changedInputs & mask) {
    f6e6:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
    f6ea:	ea06 0608 	and.w	r6, r6, r8
    f6ee:	ea07 0709 	and.w	r7, r7, r9
            currentPin.m_filterTicksLeft = currentPin.m_filterLength;
    f6f2:	4419      	add	r1, r3
        if (changedInputs & mask) {
    f6f4:	ea56 0007 	orrs.w	r0, r6, r7
            currentPin.m_filterTicksLeft = currentPin.m_filterLength;
    f6f8:	eb04 01c1 	add.w	r1, r4, r1, lsl #3
        if (changedInputs & mask) {
    f6fc:	d04e      	beq.n	f79c <_ZN9ClearCore16CcioBoardManager7RefreshEv+0x308>
            if (!currentPin.m_filterLength) {
    f6fe:	f8b1 30e0 	ldrh.w	r3, [r1, #224]	; 0xe0
            currentPin.m_filterTicksLeft = currentPin.m_filterLength;
    f702:	f8a1 30e2 	strh.w	r3, [r1, #226]	; 0xe2
            if (!currentPin.m_filterLength) {
    f706:	b93b      	cbnz	r3, f718 <_ZN9ClearCore16CcioBoardManager7RefreshEv+0x284>
            settledChanges |= mask;
    f708:	e9dd 0100 	ldrd	r0, r1, [sp]
    f70c:	ea40 0008 	orr.w	r0, r0, r8
    f710:	ea41 0109 	orr.w	r1, r1, r9
    f714:	e9cd 0100 	strd	r0, r1, [sp]
    for (uint8_t i = 0; i < CCIO_PINS_PER_BOARD * m_ccioCnt; i++) {
    f718:	3201      	adds	r2, #1
    f71a:	b2d2      	uxtb	r2, r2
        mask <<= 1;
    f71c:	eb18 0808 	adds.w	r8, r8, r8
    f720:	eb49 0909 	adc.w	r9, r9, r9
    for (uint8_t i = 0; i < CCIO_PINS_PER_BOARD * m_ccioCnt; i++) {
    f724:	4596      	cmp	lr, r2
    f726:	4613      	mov	r3, r2
    f728:	dd59      	ble.n	f7de <_ZN9ClearCore16CcioBoardManager7RefreshEv+0x34a>
        if (m_throttledOutputs & mask) {
    f72a:	e9d4 010c 	ldrd	r0, r1, [r4, #48]	; 0x30
    f72e:	4606      	mov	r6, r0
    f730:	460f      	mov	r7, r1
    f732:	ea00 0008 	and.w	r0, r0, r8
    f736:	ea01 0109 	and.w	r1, r1, r9
    f73a:	4301      	orrs	r1, r0
    f73c:	d1bc      	bne.n	f6b8 <_ZN9ClearCore16CcioBoardManager7RefreshEv+0x224>
        else if (overloadedOutputSample & mask) {
    f73e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
    f742:	ea00 0008 	and.w	r0, r0, r8
    f746:	ea01 0109 	and.w	r1, r1, r9
    f74a:	4301      	orrs	r1, r0
            if (currentPin.m_overloadTripCnt &&
    f74c:	ea4f 0183 	mov.w	r1, r3, lsl #2
    f750:	eb01 0003 	add.w	r0, r1, r3
    f754:	eb04 00c0 	add.w	r0, r4, r0, lsl #3
        else if (overloadedOutputSample & mask) {
    f758:	d02b      	beq.n	f7b2 <_ZN9ClearCore16CcioBoardManager7RefreshEv+0x31e>
            if (currentPin.m_overloadTripCnt &&
    f75a:	f8b0 b0e4 	ldrh.w	fp, [r0, #228]	; 0xe4
    f75e:	f1bb 0f00 	cmp.w	fp, #0
    f762:	d0c0      	beq.n	f6e6 <_ZN9ClearCore16CcioBoardManager7RefreshEv+0x252>
                    !--currentPin.m_overloadTripCnt) {
    f764:	f10b 3bff 	add.w	fp, fp, #4294967295
    f768:	fa1f fb8b 	uxth.w	fp, fp
            if (currentPin.m_overloadTripCnt &&
    f76c:	f8a0 b0e4 	strh.w	fp, [r0, #228]	; 0xe4
    f770:	f1bb 0f00 	cmp.w	fp, #0
    f774:	d1b7      	bne.n	f6e6 <_ZN9ClearCore16CcioBoardManager7RefreshEv+0x252>
                m_throttledOutputs |= mask;
    f776:	ea46 0608 	orr.w	r6, r6, r8
    f77a:	ea47 0709 	orr.w	r7, r7, r9
    f77e:	e9c4 670c 	strd	r6, r7, [r4, #48]	; 0x30
                overloadedOutputRT |= mask;
    f782:	e9dd 6704 	ldrd	r6, r7, [sp, #16]
    f786:	ea46 0608 	orr.w	r6, r6, r8
    f78a:	ea47 0709 	orr.w	r7, r7, r9
    f78e:	e9cd 6704 	strd	r6, r7, [sp, #16]
                currentPin.m_overloadFoldbackCnt = CCIO_OVERLOAD_FOLDBACK_TICKS;
    f792:	f44f 76fa 	mov.w	r6, #500	; 0x1f4
    f796:	f8a0 60e6 	strh.w	r6, [r0, #230]	; 0xe6
    f79a:	e7a4      	b.n	f6e6 <_ZN9ClearCore16CcioBoardManager7RefreshEv+0x252>
        else if (currentPin.m_filterTicksLeft &&
    f79c:	f8b1 00e2 	ldrh.w	r0, [r1, #226]	; 0xe2
    f7a0:	2800      	cmp	r0, #0
    f7a2:	d0b9      	beq.n	f718 <_ZN9ClearCore16CcioBoardManager7RefreshEv+0x284>
                 !(--currentPin.m_filterTicksLeft)) {
    f7a4:	3801      	subs	r0, #1
    f7a6:	b280      	uxth	r0, r0
        else if (currentPin.m_filterTicksLeft &&
    f7a8:	f8a1 00e2 	strh.w	r0, [r1, #226]	; 0xe2
    f7ac:	2800      	cmp	r0, #0
    f7ae:	d0ab      	beq.n	f708 <_ZN9ClearCore16CcioBoardManager7RefreshEv+0x274>
    f7b0:	e7b2      	b.n	f718 <_ZN9ClearCore16CcioBoardManager7RefreshEv+0x284>
            overloadedOutputRT &= ~mask;
    f7b2:	e9dd 6704 	ldrd	r6, r7, [sp, #16]
    f7b6:	ea26 0608 	bic.w	r6, r6, r8
    f7ba:	ea27 0709 	bic.w	r7, r7, r9
    f7be:	e9cd 6704 	strd	r6, r7, [sp, #16]
            currentPin.m_overloadTripCnt = CCIO_OVERLOAD_TRIP_TICKS;
    f7c2:	f8a0 a0e4 	strh.w	sl, [r0, #228]	; 0xe4
    f7c6:	e78e      	b.n	f6e6 <_ZN9ClearCore16CcioBoardManager7RefreshEv+0x252>
                                currentPin.m_pulseOnTicks;
    f7c8:	f8d1 40e8 	ldr.w	r4, [r1, #232]	; 0xe8
                            currentPin.m_pulseTicksRemaining =
    f7cc:	f8c1 40f0 	str.w	r4, [r1, #240]	; 0xf0
                            pulseRise |= mask;
    f7d0:	e9dd 4504 	ldrd	r4, r5, [sp, #16]
    f7d4:	4314      	orrs	r4, r2
    f7d6:	431d      	orrs	r5, r3
    f7d8:	e9cd 4504 	strd	r4, r5, [sp, #16]
    f7dc:	e6b2      	b.n	f544 <_ZN9ClearCore16CcioBoardManager7RefreshEv+0xb0>
    f7de:	e9dd 2300 	ldrd	r2, r3, [sp]
    lastInputs = m_filteredInputs;
    f7e2:	e9d4 ab10 	ldrd	sl, fp, [r4, #64]	; 0x40
    m_filteredInputs = (m_filteredInputs & ~settledChanges) |
    f7e6:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
    f7ea:	ea80 000a 	eor.w	r0, r0, sl
    f7ee:	ea81 010b 	eor.w	r1, r1, fp
    f7f2:	4002      	ands	r2, r0
    f7f4:	400b      	ands	r3, r1
    f7f6:	ea82 080a 	eor.w	r8, r2, sl
    f7fa:	ea83 090b 	eor.w	r9, r3, fp
    m_inputRegRisen |= (m_filteredInputs & ~lastInputs);
    f7fe:	e9d4 232c 	ldrd	r2, r3, [r4, #176]	; 0xb0
    f802:	ea28 000a 	bic.w	r0, r8, sl
    f806:	ea29 010b 	bic.w	r1, r9, fp
    f80a:	ea40 0602 	orr.w	r6, r0, r2
    f80e:	ea41 0703 	orr.w	r7, r1, r3
    m_inputRegFallen |= (~m_filteredInputs & lastInputs);
    f812:	e9d4 232e 	ldrd	r2, r3, [r4, #184]	; 0xb8
    f816:	e9cd 8900 	strd	r8, r9, [sp]
    f81a:	ea2a 0808 	bic.w	r8, sl, r8
    f81e:	ea2b 0909 	bic.w	r9, fp, r9
    f822:	ea43 0109 	orr.w	r1, r3, r9
    f826:	ea42 0008 	orr.w	r0, r2, r8
    m_filteredInputs = (m_filteredInputs & ~settledChanges) |
    f82a:	e9dd 8900 	ldrd	r8, r9, [sp]
    if (m_consGlitchCnt == 0) {
    f82e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    m_filteredInputs = (m_filteredInputs & ~settledChanges) |
    f830:	e9c4 8910 	strd	r8, r9, [r4, #64]	; 0x40
    m_inputRegRisen |= (m_filteredInputs & ~lastInputs);
    f834:	e9c4 672c 	strd	r6, r7, [r4, #176]	; 0xb0
    m_inputRegFallen |= (~m_filteredInputs & lastInputs);
    f838:	e9c4 012e 	strd	r0, r1, [r4, #184]	; 0xb8
    if (m_consGlitchCnt == 0) {
    f83c:	2b00      	cmp	r3, #0
    f83e:	f000 8083 	beq.w	f948 <_ZN9ClearCore16CcioBoardManager7RefreshEv+0x4b4>
    m_lastOutputs = m_currentOutputs;
    f842:	e9d4 6712 	ldrd	r6, r7, [r4, #72]	; 0x48
        m_currentOutputs & ~m_throttledOutputs & m_outputMask;
    f846:	e9d4 2314 	ldrd	r2, r3, [r4, #80]	; 0x50
    f84a:	e9d4 010c 	ldrd	r0, r1, [r4, #48]	; 0x30
    f84e:	ea03 0907 	and.w	r9, r3, r7
    f852:	ea29 0101 	bic.w	r1, r9, r1
    f856:	ea02 0806 	and.w	r8, r2, r6
    f85a:	468b      	mov	fp, r1
        outputSwapped >> ((MAX_CCIO_DEVICES - m_ccioCnt) * CCIO_PINS_PER_BOARD);
    f85c:	f1cc 0c08 	rsb	ip, ip, #8
                                     static_cast<uint32_t>(m_outputsWithThrottling))) << 32) |
    f860:	2100      	movs	r1, #0
        m_currentOutputs & ~m_throttledOutputs & m_outputMask;
    f862:	ea28 0000 	bic.w	r0, r8, r0
    __asm("REV %[result], %[input]" : [result] "=r"(res) : [input] "r"(value));
    f866:	ba03      	rev	r3, r0
                                     static_cast<uint32_t>(m_outputsWithThrottling))) << 32) |
    f868:	461a      	mov	r2, r3
    __asm("REV %[result], %[input]" : [result] "=r"(res) : [input] "r"(value));
    f86a:	fa9b f38b 	rev.w	r3, fp
                                     static_cast<uint32_t>(m_outputsWithThrottling))) << 32) |
    f86e:	ea41 0803 	orr.w	r8, r1, r3
        outputSwapped >> ((MAX_CCIO_DEVICES - m_ccioCnt) * CCIO_PINS_PER_BOARD);
    f872:	ea4f 03cc 	mov.w	r3, ip, lsl #3
          reverseBytes(static_cast<uint32_t>(m_outputsWithThrottling >> 32)));
    f876:	43d1      	mvns	r1, r2
        m_currentOutputs & ~m_throttledOutputs & m_outputMask;
    f878:	4682      	mov	sl, r0
        outputSwapped >> ((MAX_CCIO_DEVICES - m_ccioCnt) * CCIO_PINS_PER_BOARD);
    f87a:	f1c3 0520 	rsb	r5, r3, #32
          reverseBytes(static_cast<uint32_t>(m_outputsWithThrottling >> 32)));
    f87e:	ea6f 0008 	mvn.w	r0, r8
        outputSwapped >> ((MAX_CCIO_DEVICES - m_ccioCnt) * CCIO_PINS_PER_BOARD);
    f882:	fa01 f505 	lsl.w	r5, r1, r5
    f886:	fa20 f203 	lsr.w	r2, r0, r3
    f88a:	432a      	orrs	r2, r5
    f88c:	f1a3 0520 	sub.w	r5, r3, #32
    f890:	fa21 f505 	lsr.w	r5, r1, r5
    f894:	432a      	orrs	r2, r5
    m_lastOutputs = m_currentOutputs;
    f896:	e9c4 6718 	strd	r6, r7, [r4, #96]	; 0x60
    m_lastOutputsSwapped = m_writeBuf.buf64.outputsSwapped;
    f89a:	f8d4 500d 	ldr.w	r5, [r4, #13]
    f89e:	f8d4 6009 	ldr.w	r6, [r4, #9]
    m_writeBuf.buf64.outputsSwapped =
    f8a2:	f8c4 2009 	str.w	r2, [r4, #9]
        outputSwapped >> ((MAX_CCIO_DEVICES - m_ccioCnt) * CCIO_PINS_PER_BOARD);
    f8a6:	fa21 f303 	lsr.w	r3, r1, r3
    m_writeBuf.buf8[(MAX_CCIO_DEVICES - m_ccioCnt)] = MARKER_BYTE;
    f8aa:	22cc      	movs	r2, #204	; 0xcc
    m_writeBuf.buf64.outputsSwapped =
    f8ac:	f8c4 300d 	str.w	r3, [r4, #13]
    m_lastOutputsSwapped = m_writeBuf.buf64.outputsSwapped;
    f8b0:	65e5      	str	r5, [r4, #92]	; 0x5c
    m_outputsWithThrottling =
    f8b2:	e9c4 ab1a 	strd	sl, fp, [r4, #104]	; 0x68
    m_lastOutputsSwapped = m_writeBuf.buf64.outputsSwapped;
    f8b6:	65a6      	str	r6, [r4, #88]	; 0x58
    m_writeBuf.buf8[(MAX_CCIO_DEVICES - m_ccioCnt)] = MARKER_BYTE;
    f8b8:	f804 200c 	strb.w	r2, [r4, ip]
    m_serPort->SpiSsMode(SerialBase::CtrlLineModes::LINE_ON);
    f8bc:	2101      	movs	r1, #1
    f8be:	6aa0      	ldr	r0, [r4, #40]	; 0x28
    f8c0:	f001 fa3a 	bl	10d38 <_ZN9ClearCore10SerialBase9SpiSsModeENS0_13CtrlLineModesE>
        m_writeBuf.buf8 + (MAX_CCIO_DEVICES - m_ccioCnt),
    f8c4:	f894 302c 	ldrb.w	r3, [r4, #44]	; 0x2c
        m_readBuf.buf8 + (MAX_CCIO_DEVICES - m_ccioCnt) + 1, 2 * m_ccioCnt + 1);
    f8c8:	6aa0      	ldr	r0, [r4, #40]	; 0x28
    f8ca:	1ae2      	subs	r2, r4, r3
        m_writeBuf.buf8 + (MAX_CCIO_DEVICES - m_ccioCnt),
    f8cc:	f1c3 0108 	rsb	r1, r3, #8
        m_readBuf.buf8 + (MAX_CCIO_DEVICES - m_ccioCnt) + 1, 2 * m_ccioCnt + 1);
    f8d0:	2501      	movs	r5, #1
    f8d2:	321b      	adds	r2, #27
    f8d4:	4421      	add	r1, r4
    f8d6:	eb05 0343 	add.w	r3, r5, r3, lsl #1
}
    f8da:	b011      	add	sp, #68	; 0x44
    f8dc:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
        m_readBuf.buf8 + (MAX_CCIO_DEVICES - m_ccioCnt) + 1, 2 * m_ccioCnt + 1);
    f8e0:	f001 bb04 	b.w	10eec <_ZN9ClearCore10SerialBase20SpiTransferDataAsyncEPKhPhl>
    if (markerError || m_lastOutputsSwapped ^ m_readBuf.buf64.outputsSwapped) {
    f8e4:	e9d4 2316 	ldrd	r2, r3, [r4, #88]	; 0x58
    f8e8:	f8d4 701f 	ldr.w	r7, [r4, #31]
    f8ec:	f8d4 601b 	ldr.w	r6, [r4, #27]
    f8f0:	42bb      	cmp	r3, r7
    f8f2:	bf08      	it	eq
    f8f4:	42b2      	cmpeq	r2, r6
    f8f6:	f47f aea7 	bne.w	f648 <_ZN9ClearCore16CcioBoardManager7RefreshEv+0x1b4>
            (~m_readBuf.buf64.inputs) >> ((MAX_CCIO_DEVICES - m_ccioCnt)
    f8fa:	f8d4 2013 	ldr.w	r2, [r4, #19]
    f8fe:	f8d4 3017 	ldr.w	r3, [r4, #23]
        m_consGlitchCnt = 0;
    f902:	f8a4 5090 	strh.w	r5, [r4, #144]	; 0x90
            (~m_readBuf.buf64.inputs) >> ((MAX_CCIO_DEVICES - m_ccioCnt)
    f906:	f1cc 0608 	rsb	r6, ip, #8
                                          * CCIO_PINS_PER_BOARD);
    f90a:	00f6      	lsls	r6, r6, #3
            (~m_readBuf.buf64.inputs) >> ((MAX_CCIO_DEVICES - m_ccioCnt)
    f90c:	ea6f 0903 	mvn.w	r9, r3
    f910:	ea6f 0802 	mvn.w	r8, r2
    f914:	f1c6 0720 	rsb	r7, r6, #32
    f918:	fa28 f306 	lsr.w	r3, r8, r6
    f91c:	fa09 f707 	lsl.w	r7, r9, r7
    f920:	f1a6 0220 	sub.w	r2, r6, #32
    f924:	fa29 f202 	lsr.w	r2, r9, r2
    f928:	433b      	orrs	r3, r7
    f92a:	4313      	orrs	r3, r2
    f92c:	9308      	str	r3, [sp, #32]
    f92e:	fa29 f306 	lsr.w	r3, r9, r6
    f932:	9309      	str	r3, [sp, #36]	; 0x24
        m_currentInputs =
    f934:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
    f938:	e9c4 230e 	strd	r2, r3, [r4, #56]	; 0x38
    f93c:	4042      	eors	r2, r0
    f93e:	404b      	eors	r3, r1
    f940:	e9cd 2302 	strd	r2, r3, [sp, #8]
    f944:	950b      	str	r5, [sp, #44]	; 0x2c
    f946:	e694      	b.n	f672 <_ZN9ClearCore16CcioBoardManager7RefreshEv+0x1de>
        IoOverloadRT(overloadedOutputRT & m_ccioMask);
    f948:	e9d4 231c 	ldrd	r2, r3, [r4, #112]	; 0x70
    f94c:	e9dd 6704 	ldrd	r6, r7, [sp, #16]
    m_ccioOverloadAccum |= overloadState;
    f950:	e9d4 0128 	ldrd	r0, r1, [r4, #160]	; 0xa0
        IoOverloadRT(overloadedOutputRT & m_ccioMask);
    f954:	4016      	ands	r6, r2
    f956:	401f      	ands	r7, r3
    m_ccioOverloadAccum |= overloadState;
    f958:	ea40 0206 	orr.w	r2, r0, r6
    f95c:	ea41 0307 	orr.w	r3, r1, r7
    f960:	e9c4 2328 	strd	r2, r3, [r4, #160]	; 0xa0
    if (m_ccioOverloaded == overloadState) {
    f964:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
    f968:	42bb      	cmp	r3, r7
        IoOverloadRT(overloadedOutputRT & m_ccioMask);
    f96a:	46b0      	mov	r8, r6
    f96c:	46b9      	mov	r9, r7
    if (m_ccioOverloaded == overloadState) {
    f96e:	bf08      	it	eq
    f970:	42b2      	cmpeq	r2, r6
    f972:	e9cd 890e 	strd	r8, r9, [sp, #56]	; 0x38
    f976:	f43f af64 	beq.w	f842 <_ZN9ClearCore16CcioBoardManager7RefreshEv+0x3ae>
        if (state) {
    f97a:	ea58 0309 	orrs.w	r3, r8, r9
    m_ccioOverloaded = overloadState;
    f97e:	e9c4 8926 	strd	r8, r9, [r4, #152]	; 0x98
    ShiftReg.LedInFault(m_faultLed, overloadState);
    f982:	f8d4 70c0 	ldr.w	r7, [r4, #192]	; 0xc0
    f986:	d053      	beq.n	fa30 <_ZN9ClearCore16CcioBoardManager7RefreshEv+0x59c>
    f988:	f8df e0c8 	ldr.w	lr, [pc, #200]	; fa54 <_ZN9ClearCore16CcioBoardManager7RefreshEv+0x5c0>
    if (overloadState & ~m_overloadSinceStartupAccum) {
    f98c:	e9d4 012a 	ldrd	r0, r1, [r4, #168]	; 0xa8
            m_patternMasks[LED_BLINK_OVERLOAD] |= ledMask;
    f990:	f8de 60f0 	ldr.w	r6, [lr, #240]	; 0xf0
    f994:	433e      	orrs	r6, r7
    f996:	f8ce 60f0 	str.w	r6, [lr, #240]	; 0xf0
    f99a:	ea29 0701 	bic.w	r7, r9, r1
    f99e:	ea28 0600 	bic.w	r6, r8, r0
    f9a2:	ea56 0307 	orrs.w	r3, r6, r7
    f9a6:	f43f af4c 	beq.w	f842 <_ZN9ClearCore16CcioBoardManager7RefreshEv+0x3ae>
        m_overloadSinceStartupAccum |= overloadState;
    f9aa:	ea48 0200 	orr.w	r2, r8, r0
    f9ae:	ea49 0301 	orr.w	r3, r9, r1
    f9b2:	e9c4 232a 	strd	r2, r3, [r4, #168]	; 0xa8
        for (uint8_t i = 0; i < m_ccioCnt; i++) {
    f9b6:	f1bc 0f00 	cmp.w	ip, #0
    f9ba:	f43f af42 	beq.w	f842 <_ZN9ClearCore16CcioBoardManager7RefreshEv+0x3ae>
                StatusMgr.BlinkCode(
    f9be:	4e24      	ldr	r6, [pc, #144]	; (fa50 <_ZN9ClearCore16CcioBoardManager7RefreshEv+0x5bc>)
        for (uint8_t i = 0; i < m_ccioCnt; i++) {
    f9c0:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
                    BlinkCodeDriver::BLINK_GROUP_CCIO_OVERLOAD, 1 << i);
    f9c2:	2701      	movs	r7, #1
    f9c4:	e005      	b.n	f9d2 <_ZN9ClearCore16CcioBoardManager7RefreshEv+0x53e>
        for (uint8_t i = 0; i < m_ccioCnt; i++) {
    f9c6:	3501      	adds	r5, #1
    f9c8:	b2ed      	uxtb	r5, r5
    f9ca:	4565      	cmp	r5, ip
    f9cc:	462a      	mov	r2, r5
    f9ce:	f6bf af38 	bge.w	f842 <_ZN9ClearCore16CcioBoardManager7RefreshEv+0x3ae>
            if (charPtr[i]) {
    f9d2:	ab10      	add	r3, sp, #64	; 0x40
    f9d4:	442b      	add	r3, r5
    f9d6:	f813 3c08 	ldrb.w	r3, [r3, #-8]
    f9da:	2b00      	cmp	r3, #0
    f9dc:	d0f3      	beq.n	f9c6 <_ZN9ClearCore16CcioBoardManager7RefreshEv+0x532>
                    BlinkCodeDriver::BLINK_GROUP_CCIO_OVERLOAD, 1 << i);
    f9de:	fa07 f202 	lsl.w	r2, r7, r2
    f9e2:	b2d2      	uxtb	r2, r2
    f9e4:	2103      	movs	r1, #3
    f9e6:	6830      	ldr	r0, [r6, #0]
    f9e8:	f001 fe9c 	bl	11724 <_ZN9ClearCore13StatusManager9BlinkCodeENS_15BlinkCodeDriver15BlinkCodeGroupsEh>
    f9ec:	f894 c02c 	ldrb.w	ip, [r4, #44]	; 0x2c
    f9f0:	e7e9      	b.n	f9c6 <_ZN9ClearCore16CcioBoardManager7RefreshEv+0x532>
            m_ccioLinkBroken = true;
    f9f2:	2101      	movs	r1, #1
    f9f4:	f884 1092 	strb.w	r1, [r4, #146]	; 0x92
            m_serPort->SpiSsMode(SerialBase::CtrlLineModes::LINE_ON);
    f9f8:	6aa0      	ldr	r0, [r4, #40]	; 0x28
    f9fa:	f001 f99d 	bl	10d38 <_ZN9ClearCore10SerialBase9SpiSsModeENS0_13CtrlLineModesE>
            StatusMgr.BlinkCode(
    f9fe:	4914      	ldr	r1, [pc, #80]	; (fa50 <_ZN9ClearCore16CcioBoardManager7RefreshEv+0x5bc>)
            m_ccioOverloaded = 0;
    fa00:	2300      	movs	r3, #0
    fa02:	2200      	movs	r2, #0
                BlinkCodeDriver::DEVICE_ERROR_CCIO);
    fa04:	6808      	ldr	r0, [r1, #0]
            m_ccioOverloaded = 0;
    fa06:	e9c4 2326 	strd	r2, r3, [r4, #152]	; 0x98
                BlinkCodeDriver::DEVICE_ERROR_CCIO);
    fa0a:	2102      	movs	r1, #2
    fa0c:	2208      	movs	r2, #8
    fa0e:	f001 fe89 	bl	11724 <_ZN9ClearCore13StatusManager9BlinkCodeENS_15BlinkCodeDriver15BlinkCodeGroupsEh>
            m_patternMasks[LED_BLINK_OVERLOAD] &= ~ledMask;
    fa12:	4b10      	ldr	r3, [pc, #64]	; (fa54 <_ZN9ClearCore16CcioBoardManager7RefreshEv+0x5c0>)
    fa14:	f8d4 20c0 	ldr.w	r2, [r4, #192]	; 0xc0
    fa18:	f8d3 00f0 	ldr.w	r0, [r3, #240]	; 0xf0
                                           : m_patternMasks[pattern] &= ~ledMask;
    fa1c:	f8d3 10ec 	ldr.w	r1, [r3, #236]	; 0xec
            m_patternMasks[LED_BLINK_OVERLOAD] &= ~ledMask;
    fa20:	43d2      	mvns	r2, r2
    fa22:	4010      	ands	r0, r2
                                           : m_patternMasks[pattern] &= ~ledMask;
    fa24:	400a      	ands	r2, r1
            m_patternMasks[LED_BLINK_OVERLOAD] &= ~ledMask;
    fa26:	f8c3 00f0 	str.w	r0, [r3, #240]	; 0xf0
                                           : m_patternMasks[pattern] &= ~ledMask;
    fa2a:	f8c3 20ec 	str.w	r2, [r3, #236]	; 0xec
    fa2e:	e5f0      	b.n	f612 <_ZN9ClearCore16CcioBoardManager7RefreshEv+0x17e>
    fa30:	4a08      	ldr	r2, [pc, #32]	; (fa54 <_ZN9ClearCore16CcioBoardManager7RefreshEv+0x5c0>)
            m_patternMasks[LED_BLINK_OVERLOAD] &= ~ledMask;
    fa32:	f8d2 30f0 	ldr.w	r3, [r2, #240]	; 0xf0
    fa36:	ea23 0307 	bic.w	r3, r3, r7
    fa3a:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
    fa3e:	e700      	b.n	f842 <_ZN9ClearCore16CcioBoardManager7RefreshEv+0x3ae>
    uint64_t overloadedOutputRT = m_ccioOverloaded;
    fa40:	e9cd 2304 	strd	r2, r3, [sp, #16]
    uint64_t settledChanges = 0;
    fa44:	2200      	movs	r2, #0
    fa46:	2300      	movs	r3, #0
    fa48:	e9cd 2300 	strd	r2, r3, [sp]
    fa4c:	e6c9      	b.n	f7e2 <_ZN9ClearCore16CcioBoardManager7RefreshEv+0x34e>
    fa4e:	bf00      	nop
    fa50:	20001f0c 	.word	0x20001f0c
    fa54:	200019d8 	.word	0x200019d8

0000fa58 <_ZN9ClearCore16CcioBoardManager11RefreshSlowEv>:
    if (m_serPort && LinkBroken() && m_autoRediscover &&
    fa58:	6a81      	ldr	r1, [r0, #40]	; 0x28
    fa5a:	b1c1      	cbz	r1, fa8e <_ZN9ClearCore16CcioBoardManager11RefreshSlowEv+0x36>
    fa5c:	f890 2092 	ldrb.w	r2, [r0, #146]	; 0x92
    fa60:	b1aa      	cbz	r2, fa8e <_ZN9ClearCore16CcioBoardManager11RefreshSlowEv+0x36>
    fa62:	f890 20c4 	ldrb.w	r2, [r0, #196]	; 0xc4
    fa66:	b192      	cbz	r2, fa8e <_ZN9ClearCore16CcioBoardManager11RefreshSlowEv+0x36>
            tickCnt - m_lastDiscoverTime > CCIO_REDISCOVER_TIME_TICKS) {
    fa68:	4a09      	ldr	r2, [pc, #36]	; (fa90 <_ZN9ClearCore16CcioBoardManager11RefreshSlowEv+0x38>)
void CcioBoardManager::RefreshSlow() {
    fa6a:	b430      	push	{r4, r5}
            tickCnt - m_lastDiscoverTime > CCIO_REDISCOVER_TIME_TICKS) {
    fa6c:	6812      	ldr	r2, [r2, #0]
    fa6e:	f8d0 50c8 	ldr.w	r5, [r0, #200]	; 0xc8
    if (m_serPort && LinkBroken() && m_autoRediscover &&
    fa72:	f241 3488 	movw	r4, #5000	; 0x1388
            tickCnt - m_lastDiscoverTime > CCIO_REDISCOVER_TIME_TICKS) {
    fa76:	1b52      	subs	r2, r2, r5
    if (m_serPort && LinkBroken() && m_autoRediscover &&
    fa78:	42a2      	cmp	r2, r4
    fa7a:	d907      	bls.n	fa8c <_ZN9ClearCore16CcioBoardManager11RefreshSlowEv+0x34>
        m_discoverState = CCIO_SEARCH;
    fa7c:	2200      	movs	r2, #0
    if (m_discoverState == CCIO_FOUND || (LinkBroken() && !m_autoRediscover)) {
    fa7e:	f890 4092 	ldrb.w	r4, [r0, #146]	; 0x92
        m_discoverState = CCIO_SEARCH;
    fa82:	f880 2024 	strb.w	r2, [r0, #36]	; 0x24
}
    fa86:	bc30      	pop	{r4, r5}
    fa88:	f7ff b9c0 	b.w	ee0c <_ZN9ClearCore16CcioBoardManager12CcioDiscoverEPNS_12SerialDriverE.part.1>
    fa8c:	bc30      	pop	{r4, r5}
    fa8e:	4770      	bx	lr
    fa90:	20001be8 	.word	0x20001be8

0000fa94 <_ZN9ClearCore16CcioBoardManager9LinkCloseEv>:
                                           : m_patternMasks[pattern] &= ~ledMask;
    fa94:	4a0e      	ldr	r2, [pc, #56]	; (fad0 <_ZN9ClearCore16CcioBoardManager9LinkCloseEv+0x3c>)
void CcioBoardManager::LinkClose() {
    fa96:	b4f0      	push	{r4, r5, r6, r7}
    ShiftReg.LedPattern(m_faultLed, ShiftRegister::LED_BLINK_CCIO_COMM_ERR,
    fa98:	f8d0 60c0 	ldr.w	r6, [r0, #192]	; 0xc0
    fa9c:	f8d2 10e8 	ldr.w	r1, [r2, #232]	; 0xe8
        if (state) {
    faa0:	e9d0 4526 	ldrd	r4, r5, [r0, #152]	; 0x98
                                           : m_patternMasks[pattern] &= ~ledMask;
    faa4:	43f3      	mvns	r3, r6
    faa6:	4019      	ands	r1, r3
    m_discoverState = CCIO_SEARCH;
    faa8:	2700      	movs	r7, #0
    faaa:	f880 7024 	strb.w	r7, [r0, #36]	; 0x24
    faae:	f8c2 10e8 	str.w	r1, [r2, #232]	; 0xe8
        if (state) {
    fab2:	ea54 0105 	orrs.w	r1, r4, r5
            m_patternMasks[LED_BLINK_OVERLOAD] |= ledMask;
    fab6:	bf15      	itete	ne
    fab8:	f8d2 30f0 	ldrne.w	r3, [r2, #240]	; 0xf0
            m_patternMasks[LED_BLINK_OVERLOAD] &= ~ledMask;
    fabc:	f8d2 10f0 	ldreq.w	r1, [r2, #240]	; 0xf0
            m_patternMasks[LED_BLINK_OVERLOAD] |= ledMask;
    fac0:	4333      	orrne	r3, r6
            m_patternMasks[LED_BLINK_OVERLOAD] &= ~ledMask;
    fac2:	400b      	andeq	r3, r1
    fac4:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
}
    fac8:	bcf0      	pop	{r4, r5, r6, r7}
    Initialize();
    faca:	f7ff bc6f 	b.w	f3ac <_ZN9ClearCore16CcioBoardManager10InitializeEv>
    face:	bf00      	nop
    fad0:	200019d8 	.word	0x200019d8

0000fad4 <_ZN9ClearCore16CcioBoardManager12CcioDiscoverEPNS_12SerialDriverE>:
    if (m_discoverState == CCIO_FOUND || (LinkBroken() && !m_autoRediscover)) {
    fad4:	f890 3024 	ldrb.w	r3, [r0, #36]	; 0x24
    fad8:	2b02      	cmp	r3, #2
    fada:	d005      	beq.n	fae8 <_ZN9ClearCore16CcioBoardManager12CcioDiscoverEPNS_12SerialDriverE+0x14>
    fadc:	f890 3092 	ldrb.w	r3, [r0, #146]	; 0x92
    fae0:	b12b      	cbz	r3, faee <_ZN9ClearCore16CcioBoardManager12CcioDiscoverEPNS_12SerialDriverE+0x1a>
    fae2:	f890 30c4 	ldrb.w	r3, [r0, #196]	; 0xc4
    fae6:	b913      	cbnz	r3, faee <_ZN9ClearCore16CcioBoardManager12CcioDiscoverEPNS_12SerialDriverE+0x1a>
        return m_ccioCnt;
    fae8:	f890 002c 	ldrb.w	r0, [r0, #44]	; 0x2c
    faec:	4770      	bx	lr
    m_serPort = comInstance;
    faee:	6281      	str	r1, [r0, #40]	; 0x28
    if (!m_serPort) {
    faf0:	b109      	cbz	r1, faf6 <_ZN9ClearCore16CcioBoardManager12CcioDiscoverEPNS_12SerialDriverE+0x22>
    faf2:	f7ff b98b 	b.w	ee0c <_ZN9ClearCore16CcioBoardManager12CcioDiscoverEPNS_12SerialDriverE.part.1>
        m_lastDiscoverTime = tickCnt;
    faf6:	4b04      	ldr	r3, [pc, #16]	; (fb08 <_ZN9ClearCore16CcioBoardManager12CcioDiscoverEPNS_12SerialDriverE+0x34>)
        m_faultLed = ShiftRegister::Masks::SR_NO_FEEDBACK_MASK;
    faf8:	f8c0 10c0 	str.w	r1, [r0, #192]	; 0xc0
        m_lastDiscoverTime = tickCnt;
    fafc:	681b      	ldr	r3, [r3, #0]
    fafe:	f8c0 30c8 	str.w	r3, [r0, #200]	; 0xc8
        return 0;
    fb02:	4608      	mov	r0, r1
    fb04:	4770      	bx	lr
    fb06:	bf00      	nop
    fb08:	20001be8 	.word	0x20001be8

0000fb0c <_ZN9ClearCore16CcioBoardManager10PinByIndexE13ClearCorePins>:
void CcioBoardManager::CcioRediscoverEnable(bool enable) {
    m_autoRediscover = enable;
}

CcioPin *CcioBoardManager::PinByIndex(ClearCorePins connectorIndex) {
    if (connectorIndex >= ClearCorePins::CLEARCORE_PIN_CCIO_BASE &&
    fb0c:	3940      	subs	r1, #64	; 0x40
    fb0e:	b28b      	uxth	r3, r1
    fb10:	2b3f      	cmp	r3, #63	; 0x3f
            connectorIndex < ClearCorePins::CLEARCORE_PIN_CCIO_MAX) {
        return &m_ccioPins[connectorIndex - CLEARCORE_PIN_CCIO_BASE];
    fb12:	bf9d      	ittte	ls
    fb14:	eb01 0181 	addls.w	r1, r1, r1, lsl #2
    fb18:	eb00 00c1 	addls.w	r0, r0, r1, lsl #3
    fb1c:	30d0      	addls	r0, #208	; 0xd0
    }
    else {
        return NULL;
    fb1e:	2000      	movhi	r0, #0
    }
}
    fb20:	4770      	bx	lr
    fb22:	bf00      	nop

0000fb24 <_GLOBAL__sub_I__ZN9ClearCore7CcioMgrE>:

} // ClearCore namespace
    fb24:	b508      	push	{r3, lr}
CcioBoardManager &CcioMgr = CcioBoardManager::Instance();
    fb26:	f7ff fbb5 	bl	f294 <_ZN9ClearCore16CcioBoardManager8InstanceEv>
    fb2a:	4b01      	ldr	r3, [pc, #4]	; (fb30 <_GLOBAL__sub_I__ZN9ClearCore7CcioMgrE+0xc>)
    fb2c:	6018      	str	r0, [r3, #0]
    fb2e:	bd08      	pop	{r3, pc}
    fb30:	20001efc 	.word	0x20001efc

0000fb34 <_ZN9ClearCore7CcioPin4ModeEv>:

        \return The connector's current operational mode.
    **/
    virtual ConnectorModes Mode() override {
        return Connector::Mode();
    }
    fb34:	7980      	ldrb	r0, [r0, #6]
    fb36:	4770      	bx	lr

0000fb38 <_ZN9ClearCore7CcioPin4TypeEv>:

        \return The type of the current connector.
    **/
    Connector::ConnectorTypes Type() override {
        return Connector::CCIO_DIGITAL_IN_OUT_TYPE;
    }
    fb38:	2009      	movs	r0, #9
    fb3a:	4770      	bx	lr

0000fb3c <_ZN9ClearCore7CcioPin10IsWritableEv>:
        \endcode

        \return True if in #OUTPUT_DIGITAL mode, false otherwise
    **/
    bool IsWritable() override {
        return m_mode == OUTPUT_DIGITAL;
    fb3c:	7980      	ldrb	r0, [r0, #6]
    }
    fb3e:	f1a0 0004 	sub.w	r0, r0, #4
    fb42:	fab0 f080 	clz	r0, r0
    fb46:	0940      	lsrs	r0, r0, #5
    fb48:	4770      	bx	lr
    fb4a:	bf00      	nop

0000fb4c <_ZN9ClearCore7CcioPin7RefreshEv>:
        Poll the underlying connector for new state update.

        This is typically called from a timer or main loop to update the
        underlying value.
    **/
    void Refresh() override {}
    fb4c:	4770      	bx	lr
    fb4e:	bf00      	nop

0000fb50 <_ZN9ClearCore7CcioPin10InitializeE13ClearCorePins>:
      m_pulseTicksRemaining(0),
      m_pulseStopCount(0),
      m_pulseCounter(0) {}


void CcioPin::Initialize(ClearCorePins ccioPin) {
    fb50:	b470      	push	{r4, r5, r6}
    m_clearCorePin = ccioPin;
    m_dataBit = 1ULL << (ccioPin - CLEARCORE_PIN_CCIO_BASE);
    fb52:	f1a1 0540 	sub.w	r5, r1, #64	; 0x40
    fb56:	2201      	movs	r2, #1
    fb58:	f1a1 0360 	sub.w	r3, r1, #96	; 0x60
    fb5c:	f1c5 0420 	rsb	r4, r5, #32
    fb60:	fa22 f404 	lsr.w	r4, r2, r4
    fb64:	fa02 f303 	lsl.w	r3, r2, r3
    fb68:	4323      	orrs	r3, r4
    fb6a:	40aa      	lsls	r2, r5
    m_mode = ConnectorModes::INPUT_DIGITAL;
    fb6c:	2602      	movs	r6, #2
    m_filterLength = 3;
    fb6e:	4d07      	ldr	r5, [pc, #28]	; (fb8c <_ZN9ClearCore7CcioPin10InitializeE13ClearCorePins+0x3c>)
    m_clearCorePin = ccioPin;
    fb70:	8081      	strh	r1, [r0, #4]
    m_filterLength = 3;
    fb72:	240c      	movs	r4, #12
    m_dataBit = 1ULL << (ccioPin - CLEARCORE_PIN_CCIO_BASE);
    fb74:	2100      	movs	r1, #0
    m_mode = ConnectorModes::INPUT_DIGITAL;
    fb76:	7186      	strb	r6, [r0, #6]
    m_filterLength = 3;
    fb78:	6105      	str	r5, [r0, #16]
    fb7a:	6144      	str	r4, [r0, #20]
    m_dataBit = 1ULL << (ccioPin - CLEARCORE_PIN_CCIO_BASE);
    fb7c:	6082      	str	r2, [r0, #8]
    fb7e:	60c3      	str	r3, [r0, #12]
    m_filterTicksLeft = 1;
    m_overloadTripCnt = CCIO_OVERLOAD_TRIP_TICKS;
    m_overloadFoldbackCnt = 0;
    m_pulseOnTicks = 0;
    fb80:	6181      	str	r1, [r0, #24]
    m_pulseOffTicks = 0;
    fb82:	61c1      	str	r1, [r0, #28]
    m_pulseTicksRemaining = 0;
    fb84:	6201      	str	r1, [r0, #32]
    m_pulseStopCount = 0;
    fb86:	6241      	str	r1, [r0, #36]	; 0x24
    m_pulseCounter = 0;
}
    fb88:	bc70      	pop	{r4, r5, r6}
    fb8a:	4770      	bx	lr
    fb8c:	00010003 	.word	0x00010003

0000fb90 <_ZN9ClearCore7CcioPin4ModeENS_9Connector14ConnectorModesE>:

bool CcioPin::Mode(ConnectorModes newMode) {
    // Bail out if we are already in the requested mode
    if (newMode == m_mode) {
    fb90:	7983      	ldrb	r3, [r0, #6]
    fb92:	428b      	cmp	r3, r1
    fb94:	d02f      	beq.n	fbf6 <_ZN9ClearCore7CcioPin4ModeENS_9Connector14ConnectorModesE+0x66>
        return true;
    }

    switch (newMode) {
    fb96:	2902      	cmp	r1, #2
bool CcioPin::Mode(ConnectorModes newMode) {
    fb98:	e92d 0370 	stmdb	sp!, {r4, r5, r6, r8, r9}
    switch (newMode) {
    fb9c:	d014      	beq.n	fbc8 <_ZN9ClearCore7CcioPin4ModeENS_9Connector14ConnectorModesE+0x38>
    fb9e:	2904      	cmp	r1, #4
    fba0:	d10b      	bne.n	fbba <_ZN9ClearCore7CcioPin4ModeENS_9Connector14ConnectorModesE+0x2a>
        // Set up as output
        case OUTPUT_DIGITAL:
            CcioMgr.m_outputMask |= m_dataBit;
    fba2:	4b16      	ldr	r3, [pc, #88]	; (fbfc <_ZN9ClearCore7CcioPin4ModeENS_9Connector14ConnectorModesE+0x6c>)
    fba4:	681e      	ldr	r6, [r3, #0]
    fba6:	e9d0 4502 	ldrd	r4, r5, [r0, #8]
    fbaa:	e9d6 2314 	ldrd	r2, r3, [r6, #80]	; 0x50
    fbae:	432b      	orrs	r3, r5
    fbb0:	4322      	orrs	r2, r4
    fbb2:	e9c6 2314 	strd	r2, r3, [r6, #80]	; 0x50
            m_mode = newMode;
            break;
    fbb6:	460b      	mov	r3, r1
            m_mode = newMode;
    fbb8:	7181      	strb	r1, [r0, #6]
            break;
        // Unsupported mode, don't change anything
        default:
            break;
    }
    return m_mode == newMode;
    fbba:	1ac8      	subs	r0, r1, r3
    fbbc:	fab0 f080 	clz	r0, r0
    fbc0:	0940      	lsrs	r0, r0, #5
}
    fbc2:	e8bd 0370 	ldmia.w	sp!, {r4, r5, r6, r8, r9}
    fbc6:	4770      	bx	lr
            CcioMgr.m_outputMask &= ~m_dataBit;
    fbc8:	4b0c      	ldr	r3, [pc, #48]	; (fbfc <_ZN9ClearCore7CcioPin4ModeENS_9Connector14ConnectorModesE+0x6c>)
    fbca:	681e      	ldr	r6, [r3, #0]
    fbcc:	e9d0 2302 	ldrd	r2, r3, [r0, #8]
    fbd0:	e9d6 4514 	ldrd	r4, r5, [r6, #80]	; 0x50
            CcioMgr.m_pulseActive &= ~m_dataBit;
    fbd4:	e9d6 891e 	ldrd	r8, r9, [r6, #120]	; 0x78
            CcioMgr.m_outputMask &= ~m_dataBit;
    fbd8:	43d2      	mvns	r2, r2
    fbda:	43db      	mvns	r3, r3
    fbdc:	4014      	ands	r4, r2
    fbde:	401d      	ands	r5, r3
            CcioMgr.m_pulseActive &= ~m_dataBit;
    fbe0:	ea02 0208 	and.w	r2, r2, r8
    fbe4:	ea03 0309 	and.w	r3, r3, r9
    fbe8:	e9c6 231e 	strd	r2, r3, [r6, #120]	; 0x78
            CcioMgr.m_outputMask &= ~m_dataBit;
    fbec:	e9c6 4514 	strd	r4, r5, [r6, #80]	; 0x50
            break;
    fbf0:	460b      	mov	r3, r1
            m_mode = newMode;
    fbf2:	7181      	strb	r1, [r0, #6]
            break;
    fbf4:	e7e1      	b.n	fbba <_ZN9ClearCore7CcioPin4ModeENS_9Connector14ConnectorModesE+0x2a>
        return true;
    fbf6:	2001      	movs	r0, #1
    fbf8:	4770      	bx	lr
    fbfa:	bf00      	nop
    fbfc:	20001efc 	.word	0x20001efc

0000fc00 <_ZN9ClearCore7CcioPin5StateEv>:

int16_t CcioPin::State() {
    bool state = false;

    switch (m_mode) {
    fc00:	7983      	ldrb	r3, [r0, #6]
    fc02:	2b02      	cmp	r3, #2
    fc04:	d010      	beq.n	fc28 <_ZN9ClearCore7CcioPin5StateEv+0x28>
    fc06:	2b04      	cmp	r3, #4
    fc08:	d10c      	bne.n	fc24 <_ZN9ClearCore7CcioPin5StateEv+0x24>
        case OUTPUT_DIGITAL:
            state = CcioMgr.m_currentOutputs & m_dataBit;
    fc0a:	4b0b      	ldr	r3, [pc, #44]	; (fc38 <_ZN9ClearCore7CcioPin5StateEv+0x38>)
    fc0c:	681b      	ldr	r3, [r3, #0]
    fc0e:	e9d0 0102 	ldrd	r0, r1, [r0, #8]
    fc12:	e9d3 2312 	ldrd	r2, r3, [r3, #72]	; 0x48
            break;
        case INPUT_DIGITAL:
            state = CcioMgr.m_filteredInputs & m_dataBit;
    fc16:	4002      	ands	r2, r0
    fc18:	400b      	ands	r3, r1
    fc1a:	4313      	orrs	r3, r2
    fc1c:	bf14      	ite	ne
    fc1e:	2001      	movne	r0, #1
    fc20:	2000      	moveq	r0, #0
            break;
    fc22:	4770      	bx	lr
    switch (m_mode) {
    fc24:	2000      	movs	r0, #0
        default:
            break;
    }

    return state;
}
    fc26:	4770      	bx	lr
            state = CcioMgr.m_filteredInputs & m_dataBit;
    fc28:	4b03      	ldr	r3, [pc, #12]	; (fc38 <_ZN9ClearCore7CcioPin5StateEv+0x38>)
    fc2a:	681b      	ldr	r3, [r3, #0]
    fc2c:	e9d0 0102 	ldrd	r0, r1, [r0, #8]
    fc30:	e9d3 2310 	ldrd	r2, r3, [r3, #64]	; 0x40
    fc34:	e7ef      	b.n	fc16 <_ZN9ClearCore7CcioPin5StateEv+0x16>
    fc36:	bf00      	nop
    fc38:	20001efc 	.word	0x20001efc

0000fc3c <_ZN9ClearCore7CcioPin11IsInHwFaultEv>:
bool CcioPin::InputFallen() {
    return CcioMgr.InputsFallen(m_dataBit);
}

bool CcioPin::IsInHwFault() {
    return (volatile uint64_t &)(CcioMgr.m_ccioOverloaded) & m_dataBit;
    fc3c:	4b06      	ldr	r3, [pc, #24]	; (fc58 <_ZN9ClearCore7CcioPin11IsInHwFaultEv+0x1c>)
    fc3e:	681b      	ldr	r3, [r3, #0]
    fc40:	e9d0 0102 	ldrd	r0, r1, [r0, #8]
    fc44:	e9d3 2326 	ldrd	r2, r3, [r3, #152]	; 0x98
    fc48:	4002      	ands	r2, r0
    fc4a:	400b      	ands	r3, r1
    fc4c:	4313      	orrs	r3, r2
}
    fc4e:	bf14      	ite	ne
    fc50:	2001      	movne	r0, #1
    fc52:	2000      	moveq	r0, #0
    fc54:	4770      	bx	lr
    fc56:	bf00      	nop
    fc58:	20001efc 	.word	0x20001efc

0000fc5c <_ZN9ClearCore7CcioPin5StateEs>:
    switch (m_mode) {
    fc5c:	7983      	ldrb	r3, [r0, #6]
    fc5e:	2b04      	cmp	r3, #4
    fc60:	d11c      	bne.n	fc9c <_ZN9ClearCore7CcioPin5StateEs+0x40>
bool CcioPin::State(int16_t newState) {
    fc62:	b430      	push	{r4, r5}
                CcioMgr.m_currentOutputs |= m_dataBit;
    fc64:	4b0e      	ldr	r3, [pc, #56]	; (fca0 <_ZN9ClearCore7CcioPin5StateEs+0x44>)
            if (newState) {
    fc66:	b969      	cbnz	r1, fc84 <_ZN9ClearCore7CcioPin5StateEs+0x28>
                CcioMgr.m_currentOutputs &= ~m_dataBit;
    fc68:	6819      	ldr	r1, [r3, #0]
    fc6a:	e9d0 2302 	ldrd	r2, r3, [r0, #8]
    fc6e:	e9d1 4512 	ldrd	r4, r5, [r1, #72]	; 0x48
    fc72:	ea24 0202 	bic.w	r2, r4, r2
    fc76:	ea25 0303 	bic.w	r3, r5, r3
            success = true;
    fc7a:	2001      	movs	r0, #1
                CcioMgr.m_currentOutputs &= ~m_dataBit;
    fc7c:	e9c1 2312 	strd	r2, r3, [r1, #72]	; 0x48
}
    fc80:	bc30      	pop	{r4, r5}
    fc82:	4770      	bx	lr
                CcioMgr.m_currentOutputs |= m_dataBit;
    fc84:	6819      	ldr	r1, [r3, #0]
    fc86:	e9d0 4502 	ldrd	r4, r5, [r0, #8]
    fc8a:	e9d1 2312 	ldrd	r2, r3, [r1, #72]	; 0x48
    fc8e:	4322      	orrs	r2, r4
    fc90:	432b      	orrs	r3, r5
    fc92:	2001      	movs	r0, #1
    fc94:	e9c1 2312 	strd	r2, r3, [r1, #72]	; 0x48
}
    fc98:	bc30      	pop	{r4, r5}
    fc9a:	4770      	bx	lr
    bool success = false;
    fc9c:	2000      	movs	r0, #0
    fc9e:	4770      	bx	lr
    fca0:	20001efc 	.word	0x20001efc

0000fca4 <_ZN9ClearCore7CcioPinC1Ev>:
CcioPin::CcioPin()
    fca4:	b5d0      	push	{r4, r6, r7, lr}
    fca6:	4604      	mov	r4, r0
      m_pulseCounter(0) {}
    fca8:	f7f4 fe98 	bl	49dc <_ZN9ClearCore9ConnectorC1Ev>
    fcac:	4b08      	ldr	r3, [pc, #32]	; (fcd0 <_ZN9ClearCore7CcioPinC1Ev+0x2c>)
    fcae:	4909      	ldr	r1, [pc, #36]	; (fcd4 <_ZN9ClearCore7CcioPinC1Ev+0x30>)
    fcb0:	6023      	str	r3, [r4, #0]
    fcb2:	2600      	movs	r6, #0
    fcb4:	2300      	movs	r3, #0
    fcb6:	2700      	movs	r7, #0
    fcb8:	220c      	movs	r2, #12
    fcba:	e9c4 6702 	strd	r6, r7, [r4, #8]
    fcbe:	6121      	str	r1, [r4, #16]
    fcc0:	6162      	str	r2, [r4, #20]
    fcc2:	61a3      	str	r3, [r4, #24]
    fcc4:	61e3      	str	r3, [r4, #28]
    fcc6:	6223      	str	r3, [r4, #32]
    fcc8:	6263      	str	r3, [r4, #36]	; 0x24
    fcca:	4620      	mov	r0, r4
    fccc:	bdd0      	pop	{r4, r6, r7, pc}
    fcce:	bf00      	nop
    fcd0:	0002334c 	.word	0x0002334c
    fcd4:	00010003 	.word	0x00010003

0000fcd8 <_ZN9ClearCore12SdCardDriverC1EPK15PeripheralRouteS3_S3_S3_h>:
namespace ClearCore {

/**
    Construct and wire into the board.
**/
SdCardDriver::SdCardDriver(const PeripheralRoute *misoInfo,
    fcd8:	b530      	push	{r4, r5, lr}
    fcda:	b083      	sub	sp, #12
    fcdc:	9d06      	ldr	r5, [sp, #24]
    fcde:	f89d 401c 	ldrb.w	r4, [sp, #28]
                           const PeripheralRoute *ssInfo,
                           const PeripheralRoute *sckInfo,
                           const PeripheralRoute *mosiInfo,
                           uint8_t peripheral)
    : SerialBase(misoInfo, ssInfo, sckInfo, mosiInfo, peripheral),
      m_errorCode(0) {
    fce2:	9500      	str	r5, [sp, #0]
    fce4:	9401      	str	r4, [sp, #4]
SdCardDriver::SdCardDriver(const PeripheralRoute *misoInfo,
    fce6:	4604      	mov	r4, r0
      m_errorCode(0) {
    fce8:	2500      	movs	r5, #0
    fcea:	f000 ffbb 	bl	10c64 <_ZN9ClearCore10SerialBaseC1EPK15PeripheralRouteS3_S3_S3_h>
    fcee:	4b09      	ldr	r3, [pc, #36]	; (fd14 <_ZN9ClearCore12SdCardDriverC1EPK15PeripheralRouteS3_S3_S3_h+0x3c>)
    fcf0:	6023      	str	r3, [r4, #0]
    fcf2:	f884 5144 	strb.w	r5, [r4, #324]	; 0x144
    PortMode(SerialBase::SPI);
    fcf6:	4620      	mov	r0, r4
    fcf8:	2101      	movs	r1, #1
    fcfa:	f001 f811 	bl	10d20 <_ZN9ClearCore10SerialBase8PortModeENS0_9PortModesE>
    SpiClock(SCK_LOW, LEAD_SAMPLE);
    fcfe:	462a      	mov	r2, r5
    fd00:	4629      	mov	r1, r5
    fd02:	4620      	mov	r0, r4
    fd04:	f001 f852 	bl	10dac <_ZN9ClearCore10SerialBase8SpiClockENS0_18SpiClockPolaritiesENS0_14SpiClockPhasesE>
    PortOpen();
    fd08:	4620      	mov	r0, r4
    fd0a:	f000 ff9f 	bl	10c4c <_ZN9ClearCore10SerialBase8PortOpenEv>
}
    fd0e:	4620      	mov	r0, r4
    fd10:	b003      	add	sp, #12
    fd12:	bd30      	pop	{r4, r5, pc}
    fd14:	00022cf0 	.word	0x00022cf0

0000fd18 <_ZN9ClearCore10SerialBase10PortIsOpenEv>:
/**
    Return if the port is open or not.
**/
bool SerialBase::PortIsOpen() {
    return m_portOpen;
}
    fd18:	f890 0029 	ldrb.w	r0, [r0, #41]	; 0x29
    fd1c:	4770      	bx	lr
    fd1e:	bf00      	nop

0000fd20 <_ZN9ClearCore10SerialBase5FlushEv>:
/**
    Flush transmit buffers.
**/
void SerialBase::Flush() {
    // Flush buffers
    m_bufferOut[0] = 0;
    fd20:	2300      	movs	r3, #0
    m_outTail = 0;
    fd22:	f8c0 313c 	str.w	r3, [r0, #316]	; 0x13c
    m_bufferOut[0] = 0;
    fd26:	f8a0 30b0 	strh.w	r3, [r0, #176]	; 0xb0
    m_outHead = 0;
    fd2a:	f8c0 3138 	str.w	r3, [r0, #312]	; 0x138
    fd2e:	4770      	bx	lr

0000fd30 <_ZN9ClearCore10SerialBase10FlushInputEv>:

/**
    Enable the Receive Complete USART interrupt.
**/
void SerialBase::EnableRxcInterruptUart() {
    m_serPort->USART.INTENSET.reg = SERCOM_USART_INTENSET_RXC;
    fd30:	6902      	ldr	r2, [r0, #16]
    m_bufferIn[0] = 0;
    fd32:	2300      	movs	r3, #0
    m_serPort->USART.INTENSET.reg = SERCOM_USART_INTENSET_RXC;
    fd34:	2104      	movs	r1, #4
    m_inTail = 0;
    fd36:	f8c0 3134 	str.w	r3, [r0, #308]	; 0x134
    m_bufferIn[0] = 0;
    fd3a:	8603      	strh	r3, [r0, #48]	; 0x30
    m_inHead = 0;
    fd3c:	f8c0 3130 	str.w	r3, [r0, #304]	; 0x130
    m_serPort->USART.INTENSET.reg = SERCOM_USART_INTENSET_RXC;
    fd40:	7591      	strb	r1, [r2, #22]
    fd42:	4770      	bx	lr

0000fd44 <_ZN9ClearCore10SerialBase7CharGetEv>:
/**
    Attempt to get next character from serial channel.
**/
int16_t SerialBase::CharGet() {
    // Return if nothing is waiting.
    if (m_inTail == m_inHead) {
    fd44:	f8d0 1134 	ldr.w	r1, [r0, #308]	; 0x134
    fd48:	f8d0 2130 	ldr.w	r2, [r0, #304]	; 0x130
    fd4c:	4291      	cmp	r1, r2
    fd4e:	d012      	beq.n	fd76 <_ZN9ClearCore10SerialBase7CharGetEv+0x32>
int16_t SerialBase::CharGet() {
    fd50:	b430      	push	{r4, r5}
        return SerialBase::EOB;
    }

    // Get head of buffer, wrapped.
    int32_t nextIndex = NextIndex(m_inHead);
    fd52:	f8d0 2130 	ldr.w	r2, [r0, #304]	; 0x130
    // Get head character.
    int16_t returnChar = m_bufferIn[m_inHead];
    fd56:	f8d0 1130 	ldr.w	r1, [r0, #304]	; 0x130
    m_serPort->USART.INTENSET.reg = SERCOM_USART_INTENSET_RXC;
    fd5a:	6904      	ldr	r4, [r0, #16]
    fd5c:	4603      	mov	r3, r0

    /**
        Helper function to get next index in a buffer.
    **/
    uint32_t NextIndex(uint32_t currentIndex) {
        return ((currentIndex + 1) & (SERIAL_BUFFER_SIZE - 1));
    fd5e:	3201      	adds	r2, #1
    int16_t returnChar = m_bufferIn[m_inHead];
    fd60:	3118      	adds	r1, #24
    m_serPort->USART.INTENSET.reg = SERCOM_USART_INTENSET_RXC;
    fd62:	2504      	movs	r5, #4
    fd64:	f002 023f 	and.w	r2, r2, #63	; 0x3f
    int16_t returnChar = m_bufferIn[m_inHead];
    fd68:	f930 0011 	ldrsh.w	r0, [r0, r1, lsl #1]
    // Save new head ptr.
    m_inHead = nextIndex;
    fd6c:	f8c3 2130 	str.w	r2, [r3, #304]	; 0x130
    m_serPort->USART.INTENSET.reg = SERCOM_USART_INTENSET_RXC;
    fd70:	75a5      	strb	r5, [r4, #22]
    EnableRxcInterruptUart();

    return returnChar;
}
    fd72:	bc30      	pop	{r4, r5}
    fd74:	4770      	bx	lr
        return SerialBase::EOB;
    fd76:	f04f 30ff 	mov.w	r0, #4294967295
    fd7a:	4770      	bx	lr

0000fd7c <_ZN9ClearCore10SerialBase8CharPeekEv>:
    Attempt to get next character from serial channel without pulling it
    out of the buffer.
**/
int16_t SerialBase::CharPeek() {
    // Return if nothing is waiting
    if (m_inTail == m_inHead) {
    fd7c:	f8d0 2134 	ldr.w	r2, [r0, #308]	; 0x134
    fd80:	f8d0 3130 	ldr.w	r3, [r0, #304]	; 0x130
    fd84:	429a      	cmp	r2, r3
        return SerialBase::EOB;
    }

    // Get head character
    int16_t peekChar = m_bufferIn[m_inHead];
    fd86:	bf1d      	ittte	ne
    fd88:	f8d0 3130 	ldrne.w	r3, [r0, #304]	; 0x130
    fd8c:	3318      	addne	r3, #24
    fd8e:	f930 0013 	ldrshne.w	r0, [r0, r3, lsl #1]
        return SerialBase::EOB;
    fd92:	f04f 30ff 	moveq.w	r0, #4294967295
    return (peekChar);
}
    fd96:	4770      	bx	lr

0000fd98 <_ZN9ClearCore10SerialBase16AvailableForReadEv>:

/**
    Return the number of free characters in the receive buffer
**/
int32_t SerialBase::AvailableForRead() {
    int32_t difference = m_inTail - m_inHead;
    fd98:	f8d0 3134 	ldr.w	r3, [r0, #308]	; 0x134
    fd9c:	f8d0 0130 	ldr.w	r0, [r0, #304]	; 0x130

    if (difference < 0) {
    fda0:	1a18      	subs	r0, r3, r0
        return SERIAL_BUFFER_SIZE + difference;
    fda2:	bf48      	it	mi
    fda4:	3040      	addmi	r0, #64	; 0x40
    }
    else {
        return difference;
    }
}
    fda6:	4770      	bx	lr

0000fda8 <_ZN9ClearCore10SerialBase17AvailableForWriteEv>:

/**
    Returns the number of available characters in the transmit buffer
**/
int32_t SerialBase::AvailableForWrite() {
    int32_t difference = m_outHead - m_outTail - 1;
    fda8:	f8d0 3138 	ldr.w	r3, [r0, #312]	; 0x138
    fdac:	f8d0 213c 	ldr.w	r2, [r0, #316]	; 0x13c
    fdb0:	1e58      	subs	r0, r3, #1

    if (difference < 0) {
    fdb2:	1a80      	subs	r0, r0, r2
        difference += SERIAL_BUFFER_SIZE;
    fdb4:	bf48      	it	mi
    fdb6:	3040      	addmi	r0, #64	; 0x40
    }

    return difference;
}
    fdb8:	4770      	bx	lr
    fdba:	bf00      	nop

0000fdbc <_ZN9ClearCore10SerialBase8SendCharEh>:
bool SerialBase::SendChar(uint8_t charToSend) {
    fdbc:	4602      	mov	r2, r0
    if (!m_portOpen || m_portMode == PortModes::SPI) {
    fdbe:	f890 0029 	ldrb.w	r0, [r0, #41]	; 0x29
    fdc2:	b1b8      	cbz	r0, fdf4 <_ZN9ClearCore10SerialBase8SendCharEh+0x38>
    fdc4:	79d3      	ldrb	r3, [r2, #7]
    fdc6:	2b01      	cmp	r3, #1
    fdc8:	d015      	beq.n	fdf6 <_ZN9ClearCore10SerialBase8SendCharEh+0x3a>
bool SerialBase::SendChar(uint8_t charToSend) {
    fdca:	b470      	push	{r4, r5, r6}
    uint32_t nextIndex = NextIndex(m_outTail);
    fdcc:	f8d2 413c 	ldr.w	r4, [r2, #316]	; 0x13c
    fdd0:	3401      	adds	r4, #1
    fdd2:	f004 043f 	and.w	r4, r4, #63	; 0x3f
    while (nextIndex == m_outHead) {
    fdd6:	f8d2 3138 	ldr.w	r3, [r2, #312]	; 0x138
    fdda:	429c      	cmp	r4, r3
    fddc:	d0fb      	beq.n	fdd6 <_ZN9ClearCore10SerialBase8SendCharEh+0x1a>
    m_bufferOut[m_outTail] = charToSend;
    fdde:	f8d2 313c 	ldr.w	r3, [r2, #316]	; 0x13c
    m_serPort->USART.INTENSET.reg = SERCOM_USART_INTENSET_DRE;
    fde2:	6915      	ldr	r5, [r2, #16]
    m_bufferOut[m_outTail] = charToSend;
    fde4:	3358      	adds	r3, #88	; 0x58
    m_serPort->USART.INTENSET.reg = SERCOM_USART_INTENSET_DRE;
    fde6:	2601      	movs	r6, #1
    m_bufferOut[m_outTail] = charToSend;
    fde8:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
    m_outTail = nextIndex;
    fdec:	f8c2 413c 	str.w	r4, [r2, #316]	; 0x13c
    m_serPort->USART.INTENSET.reg = SERCOM_USART_INTENSET_DRE;
    fdf0:	75ae      	strb	r6, [r5, #22]
}
    fdf2:	bc70      	pop	{r4, r5, r6}
    fdf4:	4770      	bx	lr
        return false;
    fdf6:	2000      	movs	r0, #0
    fdf8:	4770      	bx	lr
    fdfa:	bf00      	nop

0000fdfc <_ZN9ClearCore10SerialBase19WaitForTransmitIdleEv>:
    if (m_portMode == UART) {
    fdfc:	79c3      	ldrb	r3, [r0, #7]
    fdfe:	b113      	cbz	r3, fe06 <_ZN9ClearCore10SerialBase19WaitForTransmitIdleEv+0xa>
    else if (m_portMode == SPI) {
    fe00:	2b01      	cmp	r3, #1
    fe02:	d00e      	beq.n	fe22 <_ZN9ClearCore10SerialBase19WaitForTransmitIdleEv+0x26>
    fe04:	4770      	bx	lr
        while (m_outHead != m_outTail) {
    fe06:	f8d0 2138 	ldr.w	r2, [r0, #312]	; 0x138
    fe0a:	f8d0 313c 	ldr.w	r3, [r0, #316]	; 0x13c
    fe0e:	429a      	cmp	r2, r3
    fe10:	d1f9      	bne.n	fe06 <_ZN9ClearCore10SerialBase19WaitForTransmitIdleEv+0xa>
        if (m_serPort->USART.INTFLAG.bit.DRE) {
    fe12:	6902      	ldr	r2, [r0, #16]
    fe14:	7e13      	ldrb	r3, [r2, #24]
    fe16:	07d8      	lsls	r0, r3, #31
    fe18:	d4f4      	bmi.n	fe04 <_ZN9ClearCore10SerialBase19WaitForTransmitIdleEv+0x8>
        while (!m_serPort->USART.INTFLAG.bit.TXC) {
    fe1a:	7e13      	ldrb	r3, [r2, #24]
    fe1c:	0799      	lsls	r1, r3, #30
    fe1e:	d5fc      	bpl.n	fe1a <_ZN9ClearCore10SerialBase19WaitForTransmitIdleEv+0x1e>
    fe20:	4770      	bx	lr
    if (m_dmaRxChannel == DMA_INVALID_CHANNEL ||
    fe22:	f890 302e 	ldrb.w	r3, [r0, #46]	; 0x2e
    fe26:	2b07      	cmp	r3, #7
    fe28:	d0ec      	beq.n	fe04 <_ZN9ClearCore10SerialBase19WaitForTransmitIdleEv+0x8>
    fe2a:	f890 302f 	ldrb.w	r3, [r0, #47]	; 0x2f
    fe2e:	2b07      	cmp	r3, #7
void SerialBase::WaitForTransmitIdle() {
    fe30:	b510      	push	{r4, lr}
    fe32:	4604      	mov	r4, r0
    if (m_dmaRxChannel == DMA_INVALID_CHANNEL ||
    fe34:	d005      	beq.n	fe42 <_ZN9ClearCore10SerialBase19WaitForTransmitIdleEv+0x46>
    while (m_portOpen && m_portMode == SPI &&
    fe36:	f894 3029 	ldrb.w	r3, [r4, #41]	; 0x29
    fe3a:	b113      	cbz	r3, fe42 <_ZN9ClearCore10SerialBase19WaitForTransmitIdleEv+0x46>
    fe3c:	79e3      	ldrb	r3, [r4, #7]
    fe3e:	2b01      	cmp	r3, #1
    fe40:	d000      	beq.n	fe44 <_ZN9ClearCore10SerialBase19WaitForTransmitIdleEv+0x48>
    fe42:	bd10      	pop	{r4, pc}
            DmaManager::Channel(m_dmaRxChannel)->CHCTRLA.bit.ENABLE) {
    fe44:	f894 002e 	ldrb.w	r0, [r4, #46]	; 0x2e
    fe48:	f7fe ffc4 	bl	edd4 <_ZN9ClearCore10DmaManager7ChannelENS_11DmaChannelsE>
    fe4c:	6803      	ldr	r3, [r0, #0]
    while (m_portOpen && m_portMode == SPI &&
    fe4e:	079b      	lsls	r3, r3, #30
    fe50:	d4f1      	bmi.n	fe36 <_ZN9ClearCore10SerialBase19WaitForTransmitIdleEv+0x3a>
    fe52:	e7f6      	b.n	fe42 <_ZN9ClearCore10SerialBase19WaitForTransmitIdleEv+0x46>

0000fe54 <_ZN9ClearCore10SerialBase5SpeedEm>:
bool SerialBase::Speed(uint32_t bitsPerSecond) {
    fe54:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    PMUX_DISABLE(m_txMosiInfo->gpioPort, m_txMosiInfo->gpioPin);
    fe58:	6a02      	ldr	r2, [r0, #32]
    m_baudRate = bitsPerSecond;
    fe5a:	6241      	str	r1, [r0, #36]	; 0x24
    PMUX_DISABLE(m_txMosiInfo->gpioPort, m_txMosiInfo->gpioPin);
    fe5c:	7893      	ldrb	r3, [r2, #2]
bool SerialBase::Speed(uint32_t bitsPerSecond) {
    fe5e:	460f      	mov	r7, r1
    PMUX_DISABLE(m_txMosiInfo->gpioPort, m_txMosiInfo->gpioPin);
    fe60:	f992 1001 	ldrsb.w	r1, [r2, #1]
    bool sercomEnabled = m_serPort->USART.CTRLA.bit.ENABLE;
    fe64:	6902      	ldr	r2, [r0, #16]
    PMUX_DISABLE(m_txMosiInfo->gpioPort, m_txMosiInfo->gpioPin);
    fe66:	eb03 13c1 	add.w	r3, r3, r1, lsl #7
    fe6a:	f103 4382 	add.w	r3, r3, #1090519040	; 0x41000000
    fe6e:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
    bool sercomEnabled = m_serPort->USART.CTRLA.bit.ENABLE;
    fe72:	6816      	ldr	r6, [r2, #0]
    PMUX_DISABLE(m_txMosiInfo->gpioPort, m_txMosiInfo->gpioPin);
    fe74:	f893 1040 	ldrb.w	r1, [r3, #64]	; 0x40
    fe78:	f36f 0100 	bfc	r1, #0, #1
    fe7c:	f883 1040 	strb.w	r1, [r3, #64]	; 0x40
    if (m_serPort->USART.CTRLA.bit.ENABLE) {
    fe80:	6813      	ldr	r3, [r2, #0]
    fe82:	0799      	lsls	r1, r3, #30
bool SerialBase::Speed(uint32_t bitsPerSecond) {
    fe84:	4604      	mov	r4, r0
    bool sercomEnabled = m_serPort->USART.CTRLA.bit.ENABLE;
    fe86:	f3c6 0640 	ubfx	r6, r6, #1, #1
    if (m_serPort->USART.CTRLA.bit.ENABLE) {
    fe8a:	d503      	bpl.n	fe94 <_ZN9ClearCore10SerialBase5SpeedEm+0x40>
        m_serPort->USART.CTRLA.bit.ENABLE = 0;
    fe8c:	6813      	ldr	r3, [r2, #0]
    fe8e:	f36f 0341 	bfc	r3, #1, #1
    fe92:	6013      	str	r3, [r2, #0]
    SYNCBUSY_WAIT(usart, SERCOM_USART_SYNCBUSY_ENABLE);
    fe94:	69d3      	ldr	r3, [r2, #28]
    fe96:	f013 0302 	ands.w	r3, r3, #2
    fe9a:	d1fb      	bne.n	fe94 <_ZN9ClearCore10SerialBase5SpeedEm+0x40>
    Flush();
    fe9c:	6822      	ldr	r2, [r4, #0]
    fe9e:	483a      	ldr	r0, [pc, #232]	; (ff88 <_ZN9ClearCore10SerialBase5SpeedEm+0x134>)
    fea0:	6811      	ldr	r1, [r2, #0]
    fea2:	4281      	cmp	r1, r0
    fea4:	d165      	bne.n	ff72 <_ZN9ClearCore10SerialBase5SpeedEm+0x11e>
    m_outTail = 0;
    fea6:	f8c4 313c 	str.w	r3, [r4, #316]	; 0x13c
    m_bufferOut[0] = 0;
    feaa:	f8a4 30b0 	strh.w	r3, [r4, #176]	; 0xb0
    m_outHead = 0;
    feae:	f8c4 3138 	str.w	r3, [r4, #312]	; 0x138
    FlushInput();
    feb2:	6853      	ldr	r3, [r2, #4]
    feb4:	4a35      	ldr	r2, [pc, #212]	; (ff8c <_ZN9ClearCore10SerialBase5SpeedEm+0x138>)
    feb6:	4293      	cmp	r3, r2
    feb8:	d162      	bne.n	ff80 <_ZN9ClearCore10SerialBase5SpeedEm+0x12c>
    m_serPort->USART.INTENSET.reg = SERCOM_USART_INTENSET_RXC;
    feba:	6925      	ldr	r5, [r4, #16]
    m_bufferIn[0] = 0;
    febc:	2300      	movs	r3, #0
    m_serPort->USART.INTENSET.reg = SERCOM_USART_INTENSET_RXC;
    febe:	2204      	movs	r2, #4
    m_inTail = 0;
    fec0:	f8c4 3134 	str.w	r3, [r4, #308]	; 0x134
    m_bufferIn[0] = 0;
    fec4:	8623      	strh	r3, [r4, #48]	; 0x30
    m_inHead = 0;
    fec6:	f8c4 3130 	str.w	r3, [r4, #304]	; 0x130
    m_serPort->USART.INTENSET.reg = SERCOM_USART_INTENSET_RXC;
    feca:	75aa      	strb	r2, [r5, #22]
    switch (m_portMode) {
    fecc:	79e0      	ldrb	r0, [r4, #7]
    fece:	2801      	cmp	r0, #1
    fed0:	d124      	bne.n	ff1c <_ZN9ClearCore10SerialBase5SpeedEm+0xc8>
            baudVal = ((__SERCOM_SPI_CLOCK / 2 + (bitsPerSecond - 1)) /
    fed2:	4b2f      	ldr	r3, [pc, #188]	; (ff90 <_ZN9ClearCore10SerialBase5SpeedEm+0x13c>)
    fed4:	443b      	add	r3, r7
    fed6:	fbb3 f3f7 	udiv	r3, r3, r7
    feda:	3b01      	subs	r3, #1
            if (baudVal > UINT8_MAX) {
    fedc:	2bff      	cmp	r3, #255	; 0xff
    fede:	bf92      	itee	ls
    fee0:	b2db      	uxtbls	r3, r3
    fee2:	23ff      	movhi	r3, #255	; 0xff
                success = false;
    fee4:	2000      	movhi	r0, #0
            m_serPort->SPI.BAUD.bit.BAUD = static_cast<uint8_t>(baudVal);
    fee6:	732b      	strb	r3, [r5, #12]
    if (sercomEnabled) {
    fee8:	b1b6      	cbz	r6, ff18 <_ZN9ClearCore10SerialBase5SpeedEm+0xc4>
    m_serPort->USART.CTRLA.bit.ENABLE = 1;
    feea:	682b      	ldr	r3, [r5, #0]
    feec:	f043 0302 	orr.w	r3, r3, #2
    fef0:	602b      	str	r3, [r5, #0]
    SYNCBUSY_WAIT(usart, SERCOM_USART_SYNCBUSY_ENABLE);
    fef2:	69eb      	ldr	r3, [r5, #28]
    fef4:	079b      	lsls	r3, r3, #30
    fef6:	d4fc      	bmi.n	fef2 <_ZN9ClearCore10SerialBase5SpeedEm+0x9e>
        PMUX_ENABLE(m_txMosiInfo->gpioPort, m_txMosiInfo->gpioPin);
    fef8:	6a22      	ldr	r2, [r4, #32]
    fefa:	f992 1001 	ldrsb.w	r1, [r2, #1]
    fefe:	7893      	ldrb	r3, [r2, #2]
    ff00:	eb03 13c1 	add.w	r3, r3, r1, lsl #7
    ff04:	f103 4382 	add.w	r3, r3, #1090519040	; 0x41000000
    ff08:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
    ff0c:	f893 2040 	ldrb.w	r2, [r3, #64]	; 0x40
    ff10:	f042 0201 	orr.w	r2, r2, #1
    ff14:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
}
    ff18:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
                65536 * (1 - (16.0 * bitsPerSecond / __SERCOM_USART_CLOCK));
    ff1c:	4638      	mov	r0, r7
    ff1e:	f00b fd3f 	bl	1b9a0 <__aeabi_ui2d>
    ff22:	2200      	movs	r2, #0
    ff24:	4b1b      	ldr	r3, [pc, #108]	; (ff94 <_ZN9ClearCore10SerialBase5SpeedEm+0x140>)
    ff26:	f00b fdb1 	bl	1ba8c <__aeabi_dmul>
    ff2a:	4b1b      	ldr	r3, [pc, #108]	; (ff98 <_ZN9ClearCore10SerialBase5SpeedEm+0x144>)
    ff2c:	4680      	mov	r8, r0
    ff2e:	6818      	ldr	r0, [r3, #0]
    ff30:	4689      	mov	r9, r1
    ff32:	f00b fd35 	bl	1b9a0 <__aeabi_ui2d>
    ff36:	4602      	mov	r2, r0
    ff38:	460b      	mov	r3, r1
    ff3a:	4640      	mov	r0, r8
    ff3c:	4649      	mov	r1, r9
    ff3e:	f00b fecf 	bl	1bce0 <__aeabi_ddiv>
    ff42:	4602      	mov	r2, r0
    ff44:	460b      	mov	r3, r1
    ff46:	2000      	movs	r0, #0
    ff48:	4914      	ldr	r1, [pc, #80]	; (ff9c <_ZN9ClearCore10SerialBase5SpeedEm+0x148>)
    ff4a:	f00b fbeb 	bl	1b724 <__aeabi_dsub>
    ff4e:	2200      	movs	r2, #0
    ff50:	4b13      	ldr	r3, [pc, #76]	; (ffa0 <_ZN9ClearCore10SerialBase5SpeedEm+0x14c>)
    ff52:	f00b fd9b 	bl	1ba8c <__aeabi_dmul>
    ff56:	f00c f87b 	bl	1c050 <__aeabi_d2f>
            m_serPort->USART.BAUD.bit.BAUD = (uint16_t)(baudFloat + 0.5);
    ff5a:	f00b fd43 	bl	1b9e4 <__aeabi_f2d>
    ff5e:	2200      	movs	r2, #0
    ff60:	4b10      	ldr	r3, [pc, #64]	; (ffa4 <_ZN9ClearCore10SerialBase5SpeedEm+0x150>)
    ff62:	f00b fbe1 	bl	1b728 <__adddf3>
    ff66:	f00c f853 	bl	1c010 <__aeabi_d2uiz>
    ff6a:	b280      	uxth	r0, r0
    ff6c:	81a8      	strh	r0, [r5, #12]
    bool success = true;
    ff6e:	2001      	movs	r0, #1
            break;
    ff70:	e7ba      	b.n	fee8 <_ZN9ClearCore10SerialBase5SpeedEm+0x94>
    Flush();
    ff72:	4620      	mov	r0, r4
    ff74:	4788      	blx	r1
    ff76:	6822      	ldr	r2, [r4, #0]
    FlushInput();
    ff78:	6853      	ldr	r3, [r2, #4]
    ff7a:	4a04      	ldr	r2, [pc, #16]	; (ff8c <_ZN9ClearCore10SerialBase5SpeedEm+0x138>)
    ff7c:	4293      	cmp	r3, r2
    ff7e:	d09c      	beq.n	feba <_ZN9ClearCore10SerialBase5SpeedEm+0x66>
    ff80:	4620      	mov	r0, r4
    ff82:	4798      	blx	r3
    ff84:	6925      	ldr	r5, [r4, #16]
    ff86:	e7a1      	b.n	fecc <_ZN9ClearCore10SerialBase5SpeedEm+0x78>
    ff88:	0000fd21 	.word	0x0000fd21
    ff8c:	0000fd31 	.word	0x0000fd31
    ff90:	004c4b3f 	.word	0x004c4b3f
    ff94:	40300000 	.word	0x40300000
    ff98:	200000e0 	.word	0x200000e0
    ff9c:	3ff00000 	.word	0x3ff00000
    ffa0:	40f00000 	.word	0x40f00000
    ffa4:	3fe00000 	.word	0x3fe00000

0000ffa8 <_ZN9ClearCore10SerialBase9PortCloseEv>:
    if (m_portOpen) {
    ffa8:	f890 3029 	ldrb.w	r3, [r0, #41]	; 0x29
    ffac:	b903      	cbnz	r3, ffb0 <_ZN9ClearCore10SerialBase9PortCloseEv+0x8>
    ffae:	4770      	bx	lr
void SerialBase::PortClose() {
    ffb0:	b570      	push	{r4, r5, r6, lr}
        WaitForTransmitIdle();
    ffb2:	6805      	ldr	r5, [r0, #0]
    ffb4:	4a3e      	ldr	r2, [pc, #248]	; (100b0 <_ZN9ClearCore10SerialBase9PortCloseEv+0x108>)
    ffb6:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
    ffb8:	4293      	cmp	r3, r2
    ffba:	4604      	mov	r4, r0
    ffbc:	d157      	bne.n	1006e <_ZN9ClearCore10SerialBase9PortCloseEv+0xc6>
    if (m_portMode == UART) {
    ffbe:	79c3      	ldrb	r3, [r0, #7]
    ffc0:	2b00      	cmp	r3, #0
    ffc2:	d03f      	beq.n	10044 <_ZN9ClearCore10SerialBase9PortCloseEv+0x9c>
    else if (m_portMode == SPI) {
    ffc4:	2b01      	cmp	r3, #1
    ffc6:	d056      	beq.n	10076 <_ZN9ClearCore10SerialBase9PortCloseEv+0xce>
    ffc8:	6922      	ldr	r2, [r4, #16]
        DATA_DIRECTION_INPUT(m_rtsSsInfo->gpioPort, 1L << m_rtsSsInfo->gpioPin);
    ffca:	69a0      	ldr	r0, [r4, #24]
    ffcc:	4939      	ldr	r1, [pc, #228]	; (100b4 <_ZN9ClearCore10SerialBase9PortCloseEv+0x10c>)
    ffce:	f990 3001 	ldrsb.w	r3, [r0, #1]
    ffd2:	7886      	ldrb	r6, [r0, #2]
    ffd4:	eb01 13c3 	add.w	r3, r1, r3, lsl #7
    ffd8:	2001      	movs	r0, #1
    ffda:	40b0      	lsls	r0, r6
    ffdc:	6058      	str	r0, [r3, #4]
    PMUX_DISABLE(m_txMosiInfo->gpioPort, m_txMosiInfo->gpioPin);
    ffde:	6a20      	ldr	r0, [r4, #32]
    ffe0:	f990 3001 	ldrsb.w	r3, [r0, #1]
    ffe4:	7880      	ldrb	r0, [r0, #2]
    ffe6:	eb01 13c3 	add.w	r3, r1, r3, lsl #7
    ffea:	4403      	add	r3, r0
    ffec:	f893 1040 	ldrb.w	r1, [r3, #64]	; 0x40
    fff0:	f36f 0100 	bfc	r1, #0, #1
    fff4:	f883 1040 	strb.w	r1, [r3, #64]	; 0x40
    if (m_serPort->USART.CTRLA.bit.ENABLE) {
    fff8:	6813      	ldr	r3, [r2, #0]
    fffa:	079b      	lsls	r3, r3, #30
    fffc:	d503      	bpl.n	10006 <_ZN9ClearCore10SerialBase9PortCloseEv+0x5e>
        m_serPort->USART.CTRLA.bit.ENABLE = 0;
    fffe:	6813      	ldr	r3, [r2, #0]
   10000:	f36f 0341 	bfc	r3, #1, #1
   10004:	6013      	str	r3, [r2, #0]
    SYNCBUSY_WAIT(usart, SERCOM_USART_SYNCBUSY_ENABLE);
   10006:	69d3      	ldr	r3, [r2, #28]
   10008:	f013 0302 	ands.w	r3, r3, #2
   1000c:	d1fb      	bne.n	10006 <_ZN9ClearCore10SerialBase9PortCloseEv+0x5e>
    Flush();
   1000e:	682a      	ldr	r2, [r5, #0]
   10010:	4929      	ldr	r1, [pc, #164]	; (100b8 <_ZN9ClearCore10SerialBase9PortCloseEv+0x110>)
   10012:	428a      	cmp	r2, r1
   10014:	d124      	bne.n	10060 <_ZN9ClearCore10SerialBase9PortCloseEv+0xb8>
    m_outTail = 0;
   10016:	f8c4 313c 	str.w	r3, [r4, #316]	; 0x13c
    m_bufferOut[0] = 0;
   1001a:	f8a4 30b0 	strh.w	r3, [r4, #176]	; 0xb0
    m_outHead = 0;
   1001e:	f8c4 3138 	str.w	r3, [r4, #312]	; 0x138
    FlushInput();
   10022:	686b      	ldr	r3, [r5, #4]
   10024:	4a25      	ldr	r2, [pc, #148]	; (100bc <_ZN9ClearCore10SerialBase9PortCloseEv+0x114>)
   10026:	4293      	cmp	r3, r2
   10028:	d11e      	bne.n	10068 <_ZN9ClearCore10SerialBase9PortCloseEv+0xc0>
    m_serPort->USART.INTENSET.reg = SERCOM_USART_INTENSET_RXC;
   1002a:	6922      	ldr	r2, [r4, #16]
    m_bufferIn[0] = 0;
   1002c:	2300      	movs	r3, #0
    m_serPort->USART.INTENSET.reg = SERCOM_USART_INTENSET_RXC;
   1002e:	2104      	movs	r1, #4
    m_inTail = 0;
   10030:	f8c4 3134 	str.w	r3, [r4, #308]	; 0x134
    m_bufferIn[0] = 0;
   10034:	8623      	strh	r3, [r4, #48]	; 0x30
    m_inHead = 0;
   10036:	f8c4 3130 	str.w	r3, [r4, #304]	; 0x130
    m_serPort->USART.INTENSET.reg = SERCOM_USART_INTENSET_RXC;
   1003a:	7591      	strb	r1, [r2, #22]
        m_portOpen = false;
   1003c:	2300      	movs	r3, #0
   1003e:	f884 3029 	strb.w	r3, [r4, #41]	; 0x29
   10042:	bd70      	pop	{r4, r5, r6, pc}
        while (m_outHead != m_outTail) {
   10044:	f8d4 2138 	ldr.w	r2, [r4, #312]	; 0x138
   10048:	f8d4 313c 	ldr.w	r3, [r4, #316]	; 0x13c
   1004c:	429a      	cmp	r2, r3
   1004e:	d1f9      	bne.n	10044 <_ZN9ClearCore10SerialBase9PortCloseEv+0x9c>
        if (m_serPort->USART.INTFLAG.bit.DRE) {
   10050:	6922      	ldr	r2, [r4, #16]
   10052:	7e13      	ldrb	r3, [r2, #24]
   10054:	07d8      	lsls	r0, r3, #31
   10056:	d4b8      	bmi.n	ffca <_ZN9ClearCore10SerialBase9PortCloseEv+0x22>
        while (!m_serPort->USART.INTFLAG.bit.TXC) {
   10058:	7e13      	ldrb	r3, [r2, #24]
   1005a:	0799      	lsls	r1, r3, #30
   1005c:	d5fc      	bpl.n	10058 <_ZN9ClearCore10SerialBase9PortCloseEv+0xb0>
   1005e:	e7b4      	b.n	ffca <_ZN9ClearCore10SerialBase9PortCloseEv+0x22>
    Flush();
   10060:	4620      	mov	r0, r4
   10062:	4790      	blx	r2
   10064:	6825      	ldr	r5, [r4, #0]
   10066:	e7dc      	b.n	10022 <_ZN9ClearCore10SerialBase9PortCloseEv+0x7a>
    FlushInput();
   10068:	4620      	mov	r0, r4
   1006a:	4798      	blx	r3
   1006c:	e7e6      	b.n	1003c <_ZN9ClearCore10SerialBase9PortCloseEv+0x94>
        WaitForTransmitIdle();
   1006e:	4798      	blx	r3
   10070:	6922      	ldr	r2, [r4, #16]
   10072:	6825      	ldr	r5, [r4, #0]
   10074:	e7a9      	b.n	ffca <_ZN9ClearCore10SerialBase9PortCloseEv+0x22>
    if (m_dmaRxChannel == DMA_INVALID_CHANNEL ||
   10076:	f890 002e 	ldrb.w	r0, [r0, #46]	; 0x2e
   1007a:	2807      	cmp	r0, #7
   1007c:	d0a4      	beq.n	ffc8 <_ZN9ClearCore10SerialBase9PortCloseEv+0x20>
   1007e:	f894 302f 	ldrb.w	r3, [r4, #47]	; 0x2f
   10082:	2b07      	cmp	r3, #7
   10084:	d0a0      	beq.n	ffc8 <_ZN9ClearCore10SerialBase9PortCloseEv+0x20>
            DmaManager::Channel(m_dmaRxChannel)->CHCTRLA.bit.ENABLE) {
   10086:	f7fe fea5 	bl	edd4 <_ZN9ClearCore10DmaManager7ChannelENS_11DmaChannelsE>
   1008a:	6803      	ldr	r3, [r0, #0]
    while (m_portOpen && m_portMode == SPI &&
   1008c:	079a      	lsls	r2, r3, #30
   1008e:	d5ef      	bpl.n	10070 <_ZN9ClearCore10SerialBase9PortCloseEv+0xc8>
   10090:	f894 3029 	ldrb.w	r3, [r4, #41]	; 0x29
   10094:	2b00      	cmp	r3, #0
   10096:	d0eb      	beq.n	10070 <_ZN9ClearCore10SerialBase9PortCloseEv+0xc8>
   10098:	79e3      	ldrb	r3, [r4, #7]
   1009a:	2b01      	cmp	r3, #1
   1009c:	d1e8      	bne.n	10070 <_ZN9ClearCore10SerialBase9PortCloseEv+0xc8>
   1009e:	f894 002e 	ldrb.w	r0, [r4, #46]	; 0x2e
            DmaManager::Channel(m_dmaRxChannel)->CHCTRLA.bit.ENABLE) {
   100a2:	f7fe fe97 	bl	edd4 <_ZN9ClearCore10DmaManager7ChannelENS_11DmaChannelsE>
   100a6:	6803      	ldr	r3, [r0, #0]
    while (m_portOpen && m_portMode == SPI &&
   100a8:	079a      	lsls	r2, r3, #30
   100aa:	d4f1      	bmi.n	10090 <_ZN9ClearCore10SerialBase9PortCloseEv+0xe8>
   100ac:	e7e0      	b.n	10070 <_ZN9ClearCore10SerialBase9PortCloseEv+0xc8>
   100ae:	bf00      	nop
   100b0:	0000fdfd 	.word	0x0000fdfd
   100b4:	41008000 	.word	0x41008000
   100b8:	0000fd21 	.word	0x0000fd21
   100bc:	0000fd31 	.word	0x0000fd31

000100c0 <_ZN9ClearCore10SerialBase6ParityENS_7ISerial9_ParitiesE>:
bool SerialBase::Parity(Parities newParity) {
   100c0:	b538      	push	{r3, r4, r5, lr}
    switch (m_portMode) {
   100c2:	79c3      	ldrb	r3, [r0, #7]
    m_parity = newParity;
   100c4:	7101      	strb	r1, [r0, #4]
    switch (m_portMode) {
   100c6:	2b01      	cmp	r3, #1
   100c8:	d101      	bne.n	100ce <_ZN9ClearCore10SerialBase6ParityENS_7ISerial9_ParitiesE+0xe>
            return false;
   100ca:	2000      	movs	r0, #0
   100cc:	bd38      	pop	{r3, r4, r5, pc}
    PMUX_DISABLE(m_txMosiInfo->gpioPort, m_txMosiInfo->gpioPin);
   100ce:	6a01      	ldr	r1, [r0, #32]
            bool sercomEnabled = m_serPort->USART.CTRLA.bit.ENABLE;
   100d0:	6902      	ldr	r2, [r0, #16]
    PMUX_DISABLE(m_txMosiInfo->gpioPort, m_txMosiInfo->gpioPin);
   100d2:	f991 4001 	ldrsb.w	r4, [r1, #1]
   100d6:	788b      	ldrb	r3, [r1, #2]
            bool sercomEnabled = m_serPort->USART.CTRLA.bit.ENABLE;
   100d8:	6815      	ldr	r5, [r2, #0]
    PMUX_DISABLE(m_txMosiInfo->gpioPort, m_txMosiInfo->gpioPin);
   100da:	eb03 13c4 	add.w	r3, r3, r4, lsl #7
   100de:	f103 4382 	add.w	r3, r3, #1090519040	; 0x41000000
   100e2:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
            bool sercomEnabled = m_serPort->USART.CTRLA.bit.ENABLE;
   100e6:	f3c5 0540 	ubfx	r5, r5, #1, #1
    PMUX_DISABLE(m_txMosiInfo->gpioPort, m_txMosiInfo->gpioPin);
   100ea:	f893 1040 	ldrb.w	r1, [r3, #64]	; 0x40
   100ee:	f36f 0100 	bfc	r1, #0, #1
   100f2:	f883 1040 	strb.w	r1, [r3, #64]	; 0x40
    if (m_serPort->USART.CTRLA.bit.ENABLE) {
   100f6:	6813      	ldr	r3, [r2, #0]
   100f8:	0799      	lsls	r1, r3, #30
   100fa:	d503      	bpl.n	10104 <_ZN9ClearCore10SerialBase6ParityENS_7ISerial9_ParitiesE+0x44>
        m_serPort->USART.CTRLA.bit.ENABLE = 0;
   100fc:	6813      	ldr	r3, [r2, #0]
   100fe:	f36f 0341 	bfc	r3, #1, #1
   10102:	6013      	str	r3, [r2, #0]
    SYNCBUSY_WAIT(usart, SERCOM_USART_SYNCBUSY_ENABLE);
   10104:	69d3      	ldr	r3, [r2, #28]
   10106:	f013 0302 	ands.w	r3, r3, #2
   1010a:	d1fb      	bne.n	10104 <_ZN9ClearCore10SerialBase6ParityENS_7ISerial9_ParitiesE+0x44>
    Flush();
   1010c:	6802      	ldr	r2, [r0, #0]
   1010e:	4604      	mov	r4, r0
   10110:	6811      	ldr	r1, [r2, #0]
   10112:	4825      	ldr	r0, [pc, #148]	; (101a8 <_ZN9ClearCore10SerialBase6ParityENS_7ISerial9_ParitiesE+0xe8>)
   10114:	4281      	cmp	r1, r0
   10116:	d142      	bne.n	1019e <_ZN9ClearCore10SerialBase6ParityENS_7ISerial9_ParitiesE+0xde>
    m_outTail = 0;
   10118:	f8c4 313c 	str.w	r3, [r4, #316]	; 0x13c
    m_bufferOut[0] = 0;
   1011c:	f8a4 30b0 	strh.w	r3, [r4, #176]	; 0xb0
    m_outHead = 0;
   10120:	f8c4 3138 	str.w	r3, [r4, #312]	; 0x138
    FlushInput();
   10124:	6853      	ldr	r3, [r2, #4]
   10126:	4a21      	ldr	r2, [pc, #132]	; (101ac <_ZN9ClearCore10SerialBase6ParityENS_7ISerial9_ParitiesE+0xec>)
   10128:	4293      	cmp	r3, r2
   1012a:	d134      	bne.n	10196 <_ZN9ClearCore10SerialBase6ParityENS_7ISerial9_ParitiesE+0xd6>
    m_serPort->USART.INTENSET.reg = SERCOM_USART_INTENSET_RXC;
   1012c:	6922      	ldr	r2, [r4, #16]
    m_bufferIn[0] = 0;
   1012e:	2300      	movs	r3, #0
    m_serPort->USART.INTENSET.reg = SERCOM_USART_INTENSET_RXC;
   10130:	2104      	movs	r1, #4
    m_inTail = 0;
   10132:	f8c4 3134 	str.w	r3, [r4, #308]	; 0x134
    m_bufferIn[0] = 0;
   10136:	8623      	strh	r3, [r4, #48]	; 0x30
    m_inHead = 0;
   10138:	f8c4 3130 	str.w	r3, [r4, #304]	; 0x130
    m_serPort->USART.INTENSET.reg = SERCOM_USART_INTENSET_RXC;
   1013c:	7591      	strb	r1, [r2, #22]
            if (m_parity != PARITY_N) {
   1013e:	7923      	ldrb	r3, [r4, #4]
   10140:	2b02      	cmp	r3, #2
   10142:	d023      	beq.n	1018c <_ZN9ClearCore10SerialBase6ParityENS_7ISerial9_ParitiesE+0xcc>
                m_serPort->USART.CTRLA.bit.FORM = 1;
   10144:	6811      	ldr	r1, [r2, #0]
   10146:	2001      	movs	r0, #1
   10148:	f360 611b 	bfi	r1, r0, #24, #4
   1014c:	6011      	str	r1, [r2, #0]
                m_serPort->USART.CTRLB.bit.PMODE = m_parity;
   1014e:	6851      	ldr	r1, [r2, #4]
   10150:	f363 314d 	bfi	r1, r3, #13, #1
   10154:	6051      	str	r1, [r2, #4]
            if (sercomEnabled) {
   10156:	b1bd      	cbz	r5, 10188 <_ZN9ClearCore10SerialBase6ParityENS_7ISerial9_ParitiesE+0xc8>
    m_serPort->USART.CTRLA.bit.ENABLE = 1;
   10158:	6813      	ldr	r3, [r2, #0]
   1015a:	f043 0302 	orr.w	r3, r3, #2
   1015e:	6013      	str	r3, [r2, #0]
    SYNCBUSY_WAIT(usart, SERCOM_USART_SYNCBUSY_ENABLE);
   10160:	69d3      	ldr	r3, [r2, #28]
   10162:	079b      	lsls	r3, r3, #30
   10164:	d4fc      	bmi.n	10160 <_ZN9ClearCore10SerialBase6ParityENS_7ISerial9_ParitiesE+0xa0>
        PMUX_ENABLE(m_txMosiInfo->gpioPort, m_txMosiInfo->gpioPin);
   10166:	6a22      	ldr	r2, [r4, #32]
   10168:	f992 1001 	ldrsb.w	r1, [r2, #1]
   1016c:	7893      	ldrb	r3, [r2, #2]
   1016e:	eb03 13c1 	add.w	r3, r3, r1, lsl #7
   10172:	f103 4382 	add.w	r3, r3, #1090519040	; 0x41000000
   10176:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
   1017a:	2001      	movs	r0, #1
   1017c:	f893 2040 	ldrb.w	r2, [r3, #64]	; 0x40
   10180:	4302      	orrs	r2, r0
   10182:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
   10186:	bd38      	pop	{r3, r4, r5, pc}
            return true;
   10188:	2001      	movs	r0, #1
}
   1018a:	bd38      	pop	{r3, r4, r5, pc}
                m_serPort->USART.CTRLA.bit.FORM = 0;
   1018c:	6813      	ldr	r3, [r2, #0]
   1018e:	f36f 631b 	bfc	r3, #24, #4
   10192:	6013      	str	r3, [r2, #0]
   10194:	e7df      	b.n	10156 <_ZN9ClearCore10SerialBase6ParityENS_7ISerial9_ParitiesE+0x96>
    FlushInput();
   10196:	4620      	mov	r0, r4
   10198:	4798      	blx	r3
   1019a:	6922      	ldr	r2, [r4, #16]
   1019c:	e7cf      	b.n	1013e <_ZN9ClearCore10SerialBase6ParityENS_7ISerial9_ParitiesE+0x7e>
    Flush();
   1019e:	4620      	mov	r0, r4
   101a0:	4788      	blx	r1
   101a2:	6822      	ldr	r2, [r4, #0]
   101a4:	e7be      	b.n	10124 <_ZN9ClearCore10SerialBase6ParityENS_7ISerial9_ParitiesE+0x64>
   101a6:	bf00      	nop
   101a8:	0000fd21 	.word	0x0000fd21
   101ac:	0000fd31 	.word	0x0000fd31

000101b0 <_ZN9ClearCore10SerialBase8CharSizeEh>:
bool SerialBase::CharSize(uint8_t size) {
   101b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    if (size < 5 || size > 9) {
   101b2:	1f4b      	subs	r3, r1, #5
   101b4:	2b04      	cmp	r3, #4
   101b6:	d85d      	bhi.n	10274 <_ZN9ClearCore10SerialBase8CharSizeEh+0xc4>
    else if (m_portMode == SPI && (size < 8 || size > 9)) {
   101b8:	79c3      	ldrb	r3, [r0, #7]
   101ba:	2b01      	cmp	r3, #1
   101bc:	d056      	beq.n	1026c <_ZN9ClearCore10SerialBase8CharSizeEh+0xbc>
    PMUX_DISABLE(m_txMosiInfo->gpioPort, m_txMosiInfo->gpioPin);
   101be:	6a02      	ldr	r2, [r0, #32]
    m_charSize = size;
   101c0:	7181      	strb	r1, [r0, #6]
    PMUX_DISABLE(m_txMosiInfo->gpioPort, m_txMosiInfo->gpioPin);
   101c2:	f992 4001 	ldrsb.w	r4, [r2, #1]
   101c6:	7893      	ldrb	r3, [r2, #2]
    bool sercomEnabled = m_serPort->USART.CTRLA.bit.ENABLE;
   101c8:	6902      	ldr	r2, [r0, #16]
    PMUX_DISABLE(m_txMosiInfo->gpioPort, m_txMosiInfo->gpioPin);
   101ca:	eb03 13c4 	add.w	r3, r3, r4, lsl #7
   101ce:	f103 4382 	add.w	r3, r3, #1090519040	; 0x41000000
   101d2:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
    bool sercomEnabled = m_serPort->USART.CTRLA.bit.ENABLE;
   101d6:	6815      	ldr	r5, [r2, #0]
    PMUX_DISABLE(m_txMosiInfo->gpioPort, m_txMosiInfo->gpioPin);
   101d8:	f893 4040 	ldrb.w	r4, [r3, #64]	; 0x40
   101dc:	f36f 0400 	bfc	r4, #0, #1
   101e0:	f883 4040 	strb.w	r4, [r3, #64]	; 0x40
    if (m_serPort->USART.CTRLA.bit.ENABLE) {
   101e4:	6813      	ldr	r3, [r2, #0]
   101e6:	079c      	lsls	r4, r3, #30
    bool sercomEnabled = m_serPort->USART.CTRLA.bit.ENABLE;
   101e8:	f3c5 0540 	ubfx	r5, r5, #1, #1
    if (m_serPort->USART.CTRLA.bit.ENABLE) {
   101ec:	d503      	bpl.n	101f6 <_ZN9ClearCore10SerialBase8CharSizeEh+0x46>
        m_serPort->USART.CTRLA.bit.ENABLE = 0;
   101ee:	6813      	ldr	r3, [r2, #0]
   101f0:	f36f 0341 	bfc	r3, #1, #1
   101f4:	6013      	str	r3, [r2, #0]
    SYNCBUSY_WAIT(usart, SERCOM_USART_SYNCBUSY_ENABLE);
   101f6:	69d3      	ldr	r3, [r2, #28]
   101f8:	f013 0302 	ands.w	r3, r3, #2
   101fc:	d1fb      	bne.n	101f6 <_ZN9ClearCore10SerialBase8CharSizeEh+0x46>
    Flush();
   101fe:	6802      	ldr	r2, [r0, #0]
   10200:	460f      	mov	r7, r1
   10202:	6816      	ldr	r6, [r2, #0]
   10204:	4921      	ldr	r1, [pc, #132]	; (1028c <_ZN9ClearCore10SerialBase8CharSizeEh+0xdc>)
   10206:	428e      	cmp	r6, r1
   10208:	4604      	mov	r4, r0
   1020a:	d13b      	bne.n	10284 <_ZN9ClearCore10SerialBase8CharSizeEh+0xd4>
    m_outTail = 0;
   1020c:	f8c0 313c 	str.w	r3, [r0, #316]	; 0x13c
    m_bufferOut[0] = 0;
   10210:	f8a0 30b0 	strh.w	r3, [r0, #176]	; 0xb0
    m_outHead = 0;
   10214:	f8c0 3138 	str.w	r3, [r0, #312]	; 0x138
    FlushInput();
   10218:	6853      	ldr	r3, [r2, #4]
   1021a:	4a1d      	ldr	r2, [pc, #116]	; (10290 <_ZN9ClearCore10SerialBase8CharSizeEh+0xe0>)
   1021c:	4293      	cmp	r3, r2
   1021e:	d12d      	bne.n	1027c <_ZN9ClearCore10SerialBase8CharSizeEh+0xcc>
    m_serPort->USART.INTENSET.reg = SERCOM_USART_INTENSET_RXC;
   10220:	6922      	ldr	r2, [r4, #16]
    m_bufferIn[0] = 0;
   10222:	2300      	movs	r3, #0
    m_serPort->USART.INTENSET.reg = SERCOM_USART_INTENSET_RXC;
   10224:	2104      	movs	r1, #4
    m_inTail = 0;
   10226:	f8c4 3134 	str.w	r3, [r4, #308]	; 0x134
    m_bufferIn[0] = 0;
   1022a:	8623      	strh	r3, [r4, #48]	; 0x30
    m_inHead = 0;
   1022c:	f8c4 3130 	str.w	r3, [r4, #304]	; 0x130
    m_serPort->USART.INTENSET.reg = SERCOM_USART_INTENSET_RXC;
   10230:	7591      	strb	r1, [r2, #22]
            m_serPort->SPI.CTRLB.bit.CHSIZE = size &
   10232:	6853      	ldr	r3, [r2, #4]
   10234:	f367 0302 	bfi	r3, r7, #0, #3
   10238:	6053      	str	r3, [r2, #4]
    if (sercomEnabled) {
   1023a:	b1ed      	cbz	r5, 10278 <_ZN9ClearCore10SerialBase8CharSizeEh+0xc8>
    m_serPort->USART.CTRLA.bit.ENABLE = 1;
   1023c:	6813      	ldr	r3, [r2, #0]
   1023e:	f043 0302 	orr.w	r3, r3, #2
   10242:	6013      	str	r3, [r2, #0]
    SYNCBUSY_WAIT(usart, SERCOM_USART_SYNCBUSY_ENABLE);
   10244:	69d3      	ldr	r3, [r2, #28]
   10246:	079b      	lsls	r3, r3, #30
   10248:	d4fc      	bmi.n	10244 <_ZN9ClearCore10SerialBase8CharSizeEh+0x94>
        PMUX_ENABLE(m_txMosiInfo->gpioPort, m_txMosiInfo->gpioPin);
   1024a:	6a22      	ldr	r2, [r4, #32]
   1024c:	f992 1001 	ldrsb.w	r1, [r2, #1]
   10250:	7893      	ldrb	r3, [r2, #2]
   10252:	eb03 13c1 	add.w	r3, r3, r1, lsl #7
   10256:	f103 4382 	add.w	r3, r3, #1090519040	; 0x41000000
   1025a:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
   1025e:	2001      	movs	r0, #1
   10260:	f893 2040 	ldrb.w	r2, [r3, #64]	; 0x40
   10264:	4302      	orrs	r2, r0
   10266:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
   1026a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    else if (m_portMode == SPI && (size < 8 || size > 9)) {
   1026c:	f1a1 0308 	sub.w	r3, r1, #8
   10270:	2b01      	cmp	r3, #1
   10272:	d9a4      	bls.n	101be <_ZN9ClearCore10SerialBase8CharSizeEh+0xe>
        return false;
   10274:	2000      	movs	r0, #0
   10276:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    return true;
   10278:	2001      	movs	r0, #1
}
   1027a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    FlushInput();
   1027c:	4620      	mov	r0, r4
   1027e:	4798      	blx	r3
   10280:	6922      	ldr	r2, [r4, #16]
   10282:	e7d6      	b.n	10232 <_ZN9ClearCore10SerialBase8CharSizeEh+0x82>
    Flush();
   10284:	47b0      	blx	r6
   10286:	6822      	ldr	r2, [r4, #0]
   10288:	e7c6      	b.n	10218 <_ZN9ClearCore10SerialBase8CharSizeEh+0x68>
   1028a:	bf00      	nop
   1028c:	0000fd21 	.word	0x0000fd21
   10290:	0000fd31 	.word	0x0000fd31

00010294 <_ZN9ClearCore10SerialBase8StopBitsEh>:
bool SerialBase::StopBits(uint8_t bits) {
   10294:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    if (bits < 1 || bits > 2) {
   10296:	1e4c      	subs	r4, r1, #1
   10298:	b2e4      	uxtb	r4, r4
   1029a:	2c01      	cmp	r4, #1
   1029c:	d901      	bls.n	102a2 <_ZN9ClearCore10SerialBase8StopBitsEh+0xe>
        return false;
   1029e:	2000      	movs	r0, #0
}
   102a0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if (m_portMode != PortModes::UART) {
   102a2:	79c5      	ldrb	r5, [r0, #7]
    m_stopBits = bits;
   102a4:	7141      	strb	r1, [r0, #5]
    if (m_portMode != PortModes::UART) {
   102a6:	b10d      	cbz	r5, 102ac <_ZN9ClearCore10SerialBase8StopBitsEh+0x18>
        return true;
   102a8:	2001      	movs	r0, #1
   102aa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    PMUX_DISABLE(m_txMosiInfo->gpioPort, m_txMosiInfo->gpioPin);
   102ac:	6a01      	ldr	r1, [r0, #32]
    bool sercomEnabled = m_serPort->USART.CTRLA.bit.ENABLE;
   102ae:	6902      	ldr	r2, [r0, #16]
    PMUX_DISABLE(m_txMosiInfo->gpioPort, m_txMosiInfo->gpioPin);
   102b0:	f991 7001 	ldrsb.w	r7, [r1, #1]
   102b4:	788b      	ldrb	r3, [r1, #2]
    bool sercomEnabled = m_serPort->USART.CTRLA.bit.ENABLE;
   102b6:	6816      	ldr	r6, [r2, #0]
    PMUX_DISABLE(m_txMosiInfo->gpioPort, m_txMosiInfo->gpioPin);
   102b8:	eb03 13c7 	add.w	r3, r3, r7, lsl #7
   102bc:	f103 4382 	add.w	r3, r3, #1090519040	; 0x41000000
   102c0:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
    bool sercomEnabled = m_serPort->USART.CTRLA.bit.ENABLE;
   102c4:	f3c6 0640 	ubfx	r6, r6, #1, #1
    PMUX_DISABLE(m_txMosiInfo->gpioPort, m_txMosiInfo->gpioPin);
   102c8:	f893 1040 	ldrb.w	r1, [r3, #64]	; 0x40
   102cc:	f365 0100 	bfi	r1, r5, #0, #1
   102d0:	f883 1040 	strb.w	r1, [r3, #64]	; 0x40
    if (m_serPort->USART.CTRLA.bit.ENABLE) {
   102d4:	6813      	ldr	r3, [r2, #0]
   102d6:	0799      	lsls	r1, r3, #30
   102d8:	d503      	bpl.n	102e2 <_ZN9ClearCore10SerialBase8StopBitsEh+0x4e>
        m_serPort->USART.CTRLA.bit.ENABLE = 0;
   102da:	6813      	ldr	r3, [r2, #0]
   102dc:	f365 0341 	bfi	r3, r5, #1, #1
   102e0:	6013      	str	r3, [r2, #0]
    SYNCBUSY_WAIT(usart, SERCOM_USART_SYNCBUSY_ENABLE);
   102e2:	69d3      	ldr	r3, [r2, #28]
   102e4:	f013 0302 	ands.w	r3, r3, #2
   102e8:	d1fb      	bne.n	102e2 <_ZN9ClearCore10SerialBase8StopBitsEh+0x4e>
    Flush();
   102ea:	6802      	ldr	r2, [r0, #0]
   102ec:	4605      	mov	r5, r0
   102ee:	6811      	ldr	r1, [r2, #0]
   102f0:	481d      	ldr	r0, [pc, #116]	; (10368 <_ZN9ClearCore10SerialBase8StopBitsEh+0xd4>)
   102f2:	4281      	cmp	r1, r0
   102f4:	d130      	bne.n	10358 <_ZN9ClearCore10SerialBase8StopBitsEh+0xc4>
    m_outTail = 0;
   102f6:	f8c5 313c 	str.w	r3, [r5, #316]	; 0x13c
    m_bufferOut[0] = 0;
   102fa:	f8a5 30b0 	strh.w	r3, [r5, #176]	; 0xb0
    m_outHead = 0;
   102fe:	f8c5 3138 	str.w	r3, [r5, #312]	; 0x138
    FlushInput();
   10302:	6853      	ldr	r3, [r2, #4]
   10304:	4a19      	ldr	r2, [pc, #100]	; (1036c <_ZN9ClearCore10SerialBase8StopBitsEh+0xd8>)
   10306:	4293      	cmp	r3, r2
   10308:	d12a      	bne.n	10360 <_ZN9ClearCore10SerialBase8StopBitsEh+0xcc>
    m_serPort->USART.INTENSET.reg = SERCOM_USART_INTENSET_RXC;
   1030a:	692a      	ldr	r2, [r5, #16]
    m_bufferIn[0] = 0;
   1030c:	2300      	movs	r3, #0
    m_serPort->USART.INTENSET.reg = SERCOM_USART_INTENSET_RXC;
   1030e:	2104      	movs	r1, #4
    m_inTail = 0;
   10310:	f8c5 3134 	str.w	r3, [r5, #308]	; 0x134
    m_bufferIn[0] = 0;
   10314:	862b      	strh	r3, [r5, #48]	; 0x30
    m_inHead = 0;
   10316:	f8c5 3130 	str.w	r3, [r5, #304]	; 0x130
    m_serPort->USART.INTENSET.reg = SERCOM_USART_INTENSET_RXC;
   1031a:	7591      	strb	r1, [r2, #22]
    m_serPort->USART.CTRLB.bit.SBMODE = bits - 1;
   1031c:	6853      	ldr	r3, [r2, #4]
   1031e:	f364 1386 	bfi	r3, r4, #6, #1
   10322:	6053      	str	r3, [r2, #4]
    if (sercomEnabled) {
   10324:	2e00      	cmp	r6, #0
   10326:	d0bf      	beq.n	102a8 <_ZN9ClearCore10SerialBase8StopBitsEh+0x14>
    m_serPort->USART.CTRLA.bit.ENABLE = 1;
   10328:	6813      	ldr	r3, [r2, #0]
   1032a:	f043 0302 	orr.w	r3, r3, #2
   1032e:	6013      	str	r3, [r2, #0]
    SYNCBUSY_WAIT(usart, SERCOM_USART_SYNCBUSY_ENABLE);
   10330:	69d3      	ldr	r3, [r2, #28]
   10332:	079b      	lsls	r3, r3, #30
   10334:	d4fc      	bmi.n	10330 <_ZN9ClearCore10SerialBase8StopBitsEh+0x9c>
        PMUX_ENABLE(m_txMosiInfo->gpioPort, m_txMosiInfo->gpioPin);
   10336:	6a2a      	ldr	r2, [r5, #32]
   10338:	f992 1001 	ldrsb.w	r1, [r2, #1]
   1033c:	7893      	ldrb	r3, [r2, #2]
   1033e:	eb03 13c1 	add.w	r3, r3, r1, lsl #7
   10342:	f103 4382 	add.w	r3, r3, #1090519040	; 0x41000000
   10346:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
    return true;
   1034a:	2001      	movs	r0, #1
        PMUX_ENABLE(m_txMosiInfo->gpioPort, m_txMosiInfo->gpioPin);
   1034c:	f893 2040 	ldrb.w	r2, [r3, #64]	; 0x40
   10350:	4302      	orrs	r2, r0
   10352:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
   10356:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    Flush();
   10358:	4628      	mov	r0, r5
   1035a:	4788      	blx	r1
   1035c:	682a      	ldr	r2, [r5, #0]
   1035e:	e7d0      	b.n	10302 <_ZN9ClearCore10SerialBase8StopBitsEh+0x6e>
    FlushInput();
   10360:	4628      	mov	r0, r5
   10362:	4798      	blx	r3
   10364:	692a      	ldr	r2, [r5, #16]
   10366:	e7d9      	b.n	1031c <_ZN9ClearCore10SerialBase8StopBitsEh+0x88>
   10368:	0000fd21 	.word	0x0000fd21
   1036c:	0000fd31 	.word	0x0000fd31

00010370 <_ZN9ClearCore10SerialBase8PortModeENS0_9PortModesE.part.9>:
bool SerialBase::PortMode(PortModes newMode) {
   10370:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    SercomUsart *usart = &m_serPort->USART;
   10374:	6905      	ldr	r5, [r0, #16]
    usart->CTRLA.bit.SWRST = 1;
   10376:	682b      	ldr	r3, [r5, #0]
   10378:	f043 0301 	orr.w	r3, r3, #1
bool SerialBase::PortMode(PortModes newMode) {
   1037c:	b089      	sub	sp, #36	; 0x24
   1037e:	4604      	mov	r4, r0
    usart->CTRLA.bit.SWRST = 1;
   10380:	602b      	str	r3, [r5, #0]
    SYNCBUSY_WAIT(usart, SERCOM_USART_SYNCBUSY_SWRST);
   10382:	69eb      	ldr	r3, [r5, #28]
   10384:	f013 0301 	ands.w	r3, r3, #1
   10388:	d1fb      	bne.n	10382 <_ZN9ClearCore10SerialBase8PortModeENS0_9PortModesE.part.9+0x12>
    Flush();
   1038a:	6822      	ldr	r2, [r4, #0]
   1038c:	f8df 80d4 	ldr.w	r8, [pc, #212]	; 10464 <_ZN9ClearCore10SerialBase8PortModeENS0_9PortModesE.part.9+0xf4>
   10390:	6811      	ldr	r1, [r2, #0]
   10392:	4541      	cmp	r1, r8
   10394:	d153      	bne.n	1043e <_ZN9ClearCore10SerialBase8PortModeENS0_9PortModesE.part.9+0xce>
    m_outTail = 0;
   10396:	f8c4 313c 	str.w	r3, [r4, #316]	; 0x13c
    m_bufferOut[0] = 0;
   1039a:	f8a4 30b0 	strh.w	r3, [r4, #176]	; 0xb0
    m_outHead = 0;
   1039e:	f8c4 3138 	str.w	r3, [r4, #312]	; 0x138
    FlushInput();
   103a2:	6853      	ldr	r3, [r2, #4]
   103a4:	4a28      	ldr	r2, [pc, #160]	; (10448 <_ZN9ClearCore10SerialBase8PortModeENS0_9PortModesE.part.9+0xd8>)
   103a6:	4293      	cmp	r3, r2
   103a8:	d122      	bne.n	103f0 <_ZN9ClearCore10SerialBase8PortModeENS0_9PortModesE.part.9+0x80>
    m_bufferIn[0] = 0;
   103aa:	2200      	movs	r2, #0
    m_inTail = 0;
   103ac:	f8c4 2134 	str.w	r2, [r4, #308]	; 0x134
    m_serPort->USART.INTENSET.reg = SERCOM_USART_INTENSET_RXC;
   103b0:	6923      	ldr	r3, [r4, #16]
    m_bufferIn[0] = 0;
   103b2:	8622      	strh	r2, [r4, #48]	; 0x30
    m_inHead = 0;
   103b4:	f8c4 2130 	str.w	r2, [r4, #304]	; 0x130
    if (m_serPort == SERCOM0) {
   103b8:	4a24      	ldr	r2, [pc, #144]	; (1044c <_ZN9ClearCore10SerialBase8PortModeENS0_9PortModesE.part.9+0xdc>)
    m_serPort->USART.INTENSET.reg = SERCOM_USART_INTENSET_RXC;
   103ba:	2104      	movs	r1, #4
    if (m_serPort == SERCOM0) {
   103bc:	4293      	cmp	r3, r2
    m_serPort->USART.INTENSET.reg = SERCOM_USART_INTENSET_RXC;
   103be:	7599      	strb	r1, [r3, #22]
    if (m_serPort == SERCOM0) {
   103c0:	d01c      	beq.n	103fc <_ZN9ClearCore10SerialBase8PortModeENS0_9PortModesE.part.9+0x8c>
    else if (m_serPort == SERCOM2) {
   103c2:	4a23      	ldr	r2, [pc, #140]	; (10450 <_ZN9ClearCore10SerialBase8PortModeENS0_9PortModesE.part.9+0xe0>)
   103c4:	4293      	cmp	r3, r2
   103c6:	f000 8310 	beq.w	109ea <_ZN9ClearCore10SerialBase8PortModeENS0_9PortModesE.part.9+0x67a>
    else if (m_serPort == SERCOM3) {
   103ca:	4a22      	ldr	r2, [pc, #136]	; (10454 <_ZN9ClearCore10SerialBase8PortModeENS0_9PortModesE.part.9+0xe4>)
   103cc:	4293      	cmp	r3, r2
   103ce:	f000 8341 	beq.w	10a54 <_ZN9ClearCore10SerialBase8PortModeENS0_9PortModesE.part.9+0x6e4>
    else if (m_serPort == SERCOM4) {
   103d2:	f1b3 4f86 	cmp.w	r3, #1124073472	; 0x43000000
   103d6:	f000 839a 	beq.w	10b0e <_ZN9ClearCore10SerialBase8PortModeENS0_9PortModesE.part.9+0x79e>
    else if (m_serPort == SERCOM5) {
   103da:	4a1f      	ldr	r2, [pc, #124]	; (10458 <_ZN9ClearCore10SerialBase8PortModeENS0_9PortModesE.part.9+0xe8>)
   103dc:	4293      	cmp	r3, r2
   103de:	d043      	beq.n	10468 <_ZN9ClearCore10SerialBase8PortModeENS0_9PortModesE.part.9+0xf8>
    else if (m_serPort == SERCOM7) {
   103e0:	4a1e      	ldr	r2, [pc, #120]	; (1045c <_ZN9ClearCore10SerialBase8PortModeENS0_9PortModesE.part.9+0xec>)
   103e2:	4293      	cmp	r3, r2
   103e4:	f000 8372 	beq.w	10acc <_ZN9ClearCore10SerialBase8PortModeENS0_9PortModesE.part.9+0x75c>
        return false;
   103e8:	2000      	movs	r0, #0
}
   103ea:	b009      	add	sp, #36	; 0x24
   103ec:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    FlushInput();
   103f0:	4620      	mov	r0, r4
   103f2:	4798      	blx	r3
   103f4:	6923      	ldr	r3, [r4, #16]
    if (m_serPort == SERCOM0) {
   103f6:	4a15      	ldr	r2, [pc, #84]	; (1044c <_ZN9ClearCore10SerialBase8PortModeENS0_9PortModesE.part.9+0xdc>)
   103f8:	4293      	cmp	r3, r2
   103fa:	d1e2      	bne.n	103c2 <_ZN9ClearCore10SerialBase8PortModeENS0_9PortModesE.part.9+0x52>
        m_dmaTxChannel = DMA_SERCOM0_SPI_TX;
   103fc:	2203      	movs	r2, #3
   103fe:	f884 202f 	strb.w	r2, [r4, #47]	; 0x2f
   10402:	4a17      	ldr	r2, [pc, #92]	; (10460 <_ZN9ClearCore10SerialBase8PortModeENS0_9PortModesE.part.9+0xf0>)
   10404:	9207      	str	r2, [sp, #28]
   10406:	f5a2 7280 	sub.w	r2, r2, #256	; 0x100
   1040a:	9206      	str	r2, [sp, #24]
   1040c:	f44f 3200 	mov.w	r2, #131072	; 0x20000
   10410:	9202      	str	r2, [sp, #8]
   10412:	2231      	movs	r2, #49	; 0x31
   10414:	9205      	str	r2, [sp, #20]
   10416:	f44f 3280 	mov.w	r2, #65536	; 0x10000
   1041a:	9201      	str	r2, [sp, #4]
   1041c:	2230      	movs	r2, #48	; 0x30
        m_dmaRxChannel = DMA_SERCOM0_SPI_RX;
   1041e:	2002      	movs	r0, #2
        m_dmaTxChannel = DMA_SERCOM0_SPI_TX;
   10420:	2601      	movs	r6, #1
   10422:	f04f 092e 	mov.w	r9, #46	; 0x2e
   10426:	9204      	str	r2, [sp, #16]
   10428:	f44f 4280 	mov.w	r2, #16384	; 0x4000
        m_dmaRxChannel = DMA_SERCOM0_SPI_RX;
   1042c:	f884 002e 	strb.w	r0, [r4, #46]	; 0x2e
        m_dmaTxChannel = DMA_SERCOM0_SPI_TX;
   10430:	4637      	mov	r7, r6
        IdNvic = SERCOM0_0_IRQn;
   10432:	f8cd 900c 	str.w	r9, [sp, #12]
        m_dmaTxChannel = DMA_SERCOM0_SPI_TX;
   10436:	f04f 0a07 	mov.w	sl, #7
   1043a:	9200      	str	r2, [sp, #0]
   1043c:	e02f      	b.n	1049e <_ZN9ClearCore10SerialBase8PortModeENS0_9PortModesE.part.9+0x12e>
    Flush();
   1043e:	4620      	mov	r0, r4
   10440:	4788      	blx	r1
   10442:	6822      	ldr	r2, [r4, #0]
   10444:	e7ad      	b.n	103a2 <_ZN9ClearCore10SerialBase8PortModeENS0_9PortModesE.part.9+0x32>
   10446:	bf00      	nop
   10448:	0000fd31 	.word	0x0000fd31
   1044c:	40003000 	.word	0x40003000
   10450:	41012000 	.word	0x41012000
   10454:	41014000 	.word	0x41014000
   10458:	43000400 	.word	0x43000400
   1045c:	43000c00 	.word	0x43000c00
   10460:	00200500 	.word	0x00200500
   10464:	0000fd21 	.word	0x0000fd21
        m_dmaTxChannel = DMA_INVALID_CHANNEL;
   10468:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
   1046c:	9207      	str	r2, [sp, #28]
   1046e:	9206      	str	r2, [sp, #24]
   10470:	2220      	movs	r2, #32
   10472:	9202      	str	r2, [sp, #8]
   10474:	2245      	movs	r2, #69	; 0x45
   10476:	9205      	str	r2, [sp, #20]
   10478:	2210      	movs	r2, #16
   1047a:	9201      	str	r2, [sp, #4]
   1047c:	2244      	movs	r2, #68	; 0x44
        m_dmaRxChannel = DMA_INVALID_CHANNEL;
   1047e:	2007      	movs	r0, #7
        m_dmaTxChannel = DMA_INVALID_CHANNEL;
   10480:	2602      	movs	r6, #2
   10482:	f04f 0942 	mov.w	r9, #66	; 0x42
   10486:	9204      	str	r2, [sp, #16]
   10488:	2204      	movs	r2, #4
        m_dmaRxChannel = DMA_INVALID_CHANNEL;
   1048a:	f884 002e 	strb.w	r0, [r4, #46]	; 0x2e
        m_dmaTxChannel = DMA_INVALID_CHANNEL;
   1048e:	f884 002f 	strb.w	r0, [r4, #47]	; 0x2f
   10492:	4637      	mov	r7, r6
        IdNvic = SERCOM5_0_IRQn;
   10494:	f8cd 900c 	str.w	r9, [sp, #12]
        m_dmaTxChannel = DMA_INVALID_CHANNEL;
   10498:	f04f 0a23 	mov.w	sl, #35	; 0x23
   1049c:	9200      	str	r2, [sp, #0]
    DATA_OUTPUT_STATE(m_txMosiInfo->gpioPort,
   1049e:	6a21      	ldr	r1, [r4, #32]
   104a0:	f991 2001 	ldrsb.w	r2, [r1, #1]
   104a4:	f891 b002 	ldrb.w	fp, [r1, #2]
   104a8:	01d2      	lsls	r2, r2, #7
   104aa:	f102 4282 	add.w	r2, r2, #1090519040	; 0x41000000
   104ae:	f502 4200 	add.w	r2, r2, #32768	; 0x8000
   104b2:	f04f 0e01 	mov.w	lr, #1
   104b6:	fa0e fc0b 	lsl.w	ip, lr, fp
   104ba:	f8c2 c018 	str.w	ip, [r2, #24]
    DATA_DIRECTION_OUTPUT(m_txMosiInfo->gpioPort, 1L << m_txMosiInfo->gpioPin);
   104be:	f8c2 c008 	str.w	ip, [r2, #8]
    switch (m_portMode) {
   104c2:	f894 c007 	ldrb.w	ip, [r4, #7]
   104c6:	45f4      	cmp	ip, lr
   104c8:	f040 819d 	bne.w	10806 <_ZN9ClearCore10SerialBase8PortModeENS0_9PortModesE.part.9+0x496>
  NVIC->ICER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
   104cc:	4dc4      	ldr	r5, [pc, #784]	; (107e0 <_ZN9ClearCore10SerialBase8PortModeENS0_9PortModesE.part.9+0x470>)
            SET_CLOCK_SOURCE(clockId, __SERCOM_SPI_CLOCK_INDEX);
   104ce:	4ac5      	ldr	r2, [pc, #788]	; (107e4 <_ZN9ClearCore10SerialBase8PortModeENS0_9PortModesE.part.9+0x474>)
   104d0:	f107 0e20 	add.w	lr, r7, #32
   104d4:	3620      	adds	r6, #32
   104d6:	9f00      	ldr	r7, [sp, #0]
   104d8:	f845 702e 	str.w	r7, [r5, lr, lsl #2]
   104dc:	9f01      	ldr	r7, [sp, #4]
   104de:	f845 7026 	str.w	r7, [r5, r6, lsl #2]
   104e2:	9f02      	ldr	r7, [sp, #8]
   104e4:	f845 7026 	str.w	r7, [r5, r6, lsl #2]
   104e8:	f10a 0e20 	add.w	lr, sl, #32
   104ec:	f852 502e 	ldr.w	r5, [r2, lr, lsl #2]
   104f0:	f36f 1586 	bfc	r5, #6, #1
   104f4:	f842 502e 	str.w	r5, [r2, lr, lsl #2]
   104f8:	f852 502e 	ldr.w	r5, [r2, lr, lsl #2]
   104fc:	066d      	lsls	r5, r5, #25
   104fe:	d4fb      	bmi.n	104f8 <_ZN9ClearCore10SerialBase8PortModeENS0_9PortModesE.part.9+0x188>
   10500:	f852 502e 	ldr.w	r5, [r2, lr, lsl #2]
   10504:	4eb7      	ldr	r6, [pc, #732]	; (107e4 <_ZN9ClearCore10SerialBase8PortModeENS0_9PortModesE.part.9+0x474>)
   10506:	f04f 0c07 	mov.w	ip, #7
   1050a:	f36c 0503 	bfi	r5, ip, #0, #4
   1050e:	f842 502e 	str.w	r5, [r2, lr, lsl #2]
   10512:	f852 502e 	ldr.w	r5, [r2, lr, lsl #2]
   10516:	f045 0540 	orr.w	r5, r5, #64	; 0x40
   1051a:	f842 502e 	str.w	r5, [r2, lr, lsl #2]
   1051e:	6875      	ldr	r5, [r6, #4]
   10520:	f015 051c 	ands.w	r5, r5, #28
   10524:	d1fb      	bne.n	1051e <_ZN9ClearCore10SerialBase8PortModeENS0_9PortModesE.part.9+0x1ae>
            m_serPort->SPI.CTRLA.bit.MODE = 0x3;
   10526:	681a      	ldr	r2, [r3, #0]
   10528:	2603      	movs	r6, #3
   1052a:	f366 0284 	bfi	r2, r6, #2, #3
   1052e:	601a      	str	r2, [r3, #0]
            m_serPort->SPI.CTRLA.bit.CPOL = m_polarity;
   10530:	681a      	ldr	r2, [r3, #0]
   10532:	7a26      	ldrb	r6, [r4, #8]
   10534:	f366 725d 	bfi	r2, r6, #29, #1
   10538:	601a      	str	r2, [r3, #0]
            m_serPort->SPI.CTRLA.bit.CPHA = m_phase;
   1053a:	681a      	ldr	r2, [r3, #0]
   1053c:	7a66      	ldrb	r6, [r4, #9]
   1053e:	f366 721c 	bfi	r2, r6, #28, #1
   10542:	601a      	str	r2, [r3, #0]
            m_serPort->SPI.CTRLA.bit.FORM = 0;
   10544:	681a      	ldr	r2, [r3, #0]
   10546:	f365 621b 	bfi	r2, r5, #24, #4
   1054a:	601a      	str	r2, [r3, #0]
            m_serPort->SPI.CTRLA.bit.DIPO = m_ctsMisoInfo->sercomPadNum;
   1054c:	6962      	ldr	r2, [r4, #20]
   1054e:	681e      	ldr	r6, [r3, #0]
   10550:	7a52      	ldrb	r2, [r2, #9]
   10552:	f362 5615 	bfi	r6, r2, #20, #2
   10556:	601e      	str	r6, [r3, #0]
            m_serPort->SPI.CTRLA.bit.DOPO = m_txMosiInfo->sercomPadNum ? 2 : 0;
   10558:	7a49      	ldrb	r1, [r1, #9]
   1055a:	681a      	ldr	r2, [r3, #0]
   1055c:	2900      	cmp	r1, #0
   1055e:	bf0c      	ite	eq
   10560:	2100      	moveq	r1, #0
   10562:	2102      	movne	r1, #2
   10564:	f361 4211 	bfi	r2, r1, #16, #2
   10568:	601a      	str	r2, [r3, #0]
            m_serPort->SPI.CTRLB.bit.CHSIZE = m_charSize &
   1056a:	685a      	ldr	r2, [r3, #4]
   1056c:	79a1      	ldrb	r1, [r4, #6]
   1056e:	f361 0202 	bfi	r2, r1, #0, #3
   10572:	605a      	str	r2, [r3, #4]
            m_serPort->SPI.CTRLA.bit.DORD = 0;
   10574:	681a      	ldr	r2, [r3, #0]
   10576:	f365 729e 	bfi	r2, r5, #30, #1
   1057a:	601a      	str	r2, [r3, #0]
            m_serPort->SPI.CTRLA.bit.IBON = 1;
   1057c:	681a      	ldr	r2, [r3, #0]
   1057e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
   10582:	601a      	str	r2, [r3, #0]
            m_serPort->SPI.CTRLB.bit.MSSEN = 1;
   10584:	685a      	ldr	r2, [r3, #4]
   10586:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
   1058a:	605a      	str	r2, [r3, #4]
            m_serPort->SPI.CTRLB.bit.RXEN = 1;
   1058c:	685a      	ldr	r2, [r3, #4]
   1058e:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
   10592:	605a      	str	r2, [r3, #4]
            PMUX_SELECTION(m_rtsSsInfo->gpioPort, m_rtsSsInfo->gpioPin,
   10594:	69a3      	ldr	r3, [r4, #24]
   10596:	f894 6028 	ldrb.w	r6, [r4, #40]	; 0x28
   1059a:	789a      	ldrb	r2, [r3, #2]
   1059c:	f993 3001 	ldrsb.w	r3, [r3, #1]
   105a0:	01db      	lsls	r3, r3, #7
   105a2:	f103 4182 	add.w	r1, r3, #1090519040	; 0x41000000
   105a6:	f501 4100 	add.w	r1, r1, #32768	; 0x8000
   105aa:	eb01 0152 	add.w	r1, r1, r2, lsr #1
   105ae:	07d7      	lsls	r7, r2, #31
   105b0:	f891 5030 	ldrb.w	r5, [r1, #48]	; 0x30
   105b4:	bf4c      	ite	mi
   105b6:	f366 1507 	bfimi	r5, r6, #4, #4
   105ba:	f366 0503 	bfipl	r5, r6, #0, #4
   105be:	f881 5030 	strb.w	r5, [r1, #48]	; 0x30
            SpiSsMode(m_ssMode);
   105c2:	7aa1      	ldrb	r1, [r4, #10]
    switch (mode) {
   105c4:	2901      	cmp	r1, #1
   105c6:	f240 822f 	bls.w	10a28 <_ZN9ClearCore10SerialBase8PortModeENS0_9PortModesE.part.9+0x6b8>
   105ca:	2902      	cmp	r1, #2
   105cc:	d10a      	bne.n	105e4 <_ZN9ClearCore10SerialBase8PortModeENS0_9PortModesE.part.9+0x274>
            PMUX_ENABLE(m_rtsSsInfo->gpioPort, m_rtsSsInfo->gpioPin);
   105ce:	f103 4382 	add.w	r3, r3, #1090519040	; 0x41000000
   105d2:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
   105d6:	4413      	add	r3, r2
   105d8:	f893 2040 	ldrb.w	r2, [r3, #64]	; 0x40
   105dc:	f042 0201 	orr.w	r2, r2, #1
   105e0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
            if (m_dmaRxChannel != DMA_INVALID_CHANNEL &&
   105e4:	2807      	cmp	r0, #7
   105e6:	d031      	beq.n	1064c <_ZN9ClearCore10SerialBase8PortModeENS0_9PortModesE.part.9+0x2dc>
   105e8:	f894 302f 	ldrb.w	r3, [r4, #47]	; 0x2f
   105ec:	2b07      	cmp	r3, #7
   105ee:	d02d      	beq.n	1064c <_ZN9ClearCore10SerialBase8PortModeENS0_9PortModesE.part.9+0x2dc>
                channel = DmaManager::Channel(m_dmaRxChannel);
   105f0:	f7fe fbf0 	bl	edd4 <_ZN9ClearCore10DmaManager7ChannelENS_11DmaChannelsE>
                channel->CHCTRLA.reg &= ~DMAC_CHCTRLA_ENABLE;
   105f4:	6803      	ldr	r3, [r0, #0]
                channel->CHCTRLA.reg = DMAC_CHCTRLA_SWRST;
   105f6:	2201      	movs	r2, #1
                channel->CHCTRLA.reg &= ~DMAC_CHCTRLA_ENABLE;
   105f8:	f023 0302 	bic.w	r3, r3, #2
   105fc:	6003      	str	r3, [r0, #0]
                channel->CHCTRLA.reg = DMAC_CHCTRLA_SWRST;
   105fe:	6002      	str	r2, [r0, #0]
                while (channel->CHCTRLA.reg == DMAC_CHCTRLA_SWRST) {
   10600:	6803      	ldr	r3, [r0, #0]
   10602:	2b01      	cmp	r3, #1
   10604:	d0fc      	beq.n	10600 <_ZN9ClearCore10SerialBase8PortModeENS0_9PortModesE.part.9+0x290>
                channel->CHCTRLA.reg = DMAC_CHCTRLA_TRIGSRC(dmaRxTrigger) |
   10606:	9b06      	ldr	r3, [sp, #24]
   10608:	6003      	str	r3, [r0, #0]
                baseDesc = DmaManager::BaseDescriptor(m_dmaRxChannel);
   1060a:	f894 002e 	ldrb.w	r0, [r4, #46]	; 0x2e
   1060e:	f7fe fbeb 	bl	ede8 <_ZN9ClearCore10DmaManager14BaseDescriptorENS_11DmaChannelsE>
                baseDesc->DESCADDR.reg = static_cast<uint32_t>(0);
   10612:	2300      	movs	r3, #0
   10614:	60c3      	str	r3, [r0, #12]
                baseDesc->SRCADDR.reg = (uint32_t)&m_serPort->SPI.DATA.reg;
   10616:	6923      	ldr	r3, [r4, #16]
   10618:	3328      	adds	r3, #40	; 0x28
   1061a:	6043      	str	r3, [r0, #4]
                channel = DmaManager::Channel(m_dmaTxChannel);
   1061c:	f894 002f 	ldrb.w	r0, [r4, #47]	; 0x2f
   10620:	f7fe fbd8 	bl	edd4 <_ZN9ClearCore10DmaManager7ChannelENS_11DmaChannelsE>
                channel->CHCTRLA.reg &= ~DMAC_CHCTRLA_ENABLE;
   10624:	6803      	ldr	r3, [r0, #0]
                channel->CHCTRLA.reg = DMAC_CHCTRLA_SWRST;
   10626:	2201      	movs	r2, #1
                channel->CHCTRLA.reg &= ~DMAC_CHCTRLA_ENABLE;
   10628:	f023 0302 	bic.w	r3, r3, #2
   1062c:	6003      	str	r3, [r0, #0]
                channel->CHCTRLA.reg = DMAC_CHCTRLA_SWRST;
   1062e:	6002      	str	r2, [r0, #0]
                while (channel->CHCTRLA.reg == DMAC_CHCTRLA_SWRST) {
   10630:	6803      	ldr	r3, [r0, #0]
   10632:	2b01      	cmp	r3, #1
   10634:	d0fc      	beq.n	10630 <_ZN9ClearCore10SerialBase8PortModeENS0_9PortModesE.part.9+0x2c0>
                channel->CHCTRLA.reg = DMAC_CHCTRLA_TRIGSRC(dmaTxTrigger) |
   10636:	9b07      	ldr	r3, [sp, #28]
   10638:	6003      	str	r3, [r0, #0]
                baseDesc = DmaManager::BaseDescriptor(m_dmaTxChannel);
   1063a:	f894 002f 	ldrb.w	r0, [r4, #47]	; 0x2f
   1063e:	f7fe fbd3 	bl	ede8 <_ZN9ClearCore10DmaManager14BaseDescriptorENS_11DmaChannelsE>
                baseDesc->DESCADDR.reg = static_cast<uint32_t>(0);
   10642:	2300      	movs	r3, #0
   10644:	60c3      	str	r3, [r0, #12]
                baseDesc->DSTADDR.reg = (uint32_t)&m_serPort->SPI.DATA.reg;
   10646:	6923      	ldr	r3, [r4, #16]
   10648:	3328      	adds	r3, #40	; 0x28
   1064a:	6083      	str	r3, [r0, #8]
    Speed(m_baudRate);
   1064c:	6820      	ldr	r0, [r4, #0]
   1064e:	4a66      	ldr	r2, [pc, #408]	; (107e8 <_ZN9ClearCore10SerialBase8PortModeENS0_9PortModesE.part.9+0x478>)
   10650:	6903      	ldr	r3, [r0, #16]
   10652:	f8d4 9024 	ldr.w	r9, [r4, #36]	; 0x24
   10656:	4293      	cmp	r3, r2
   10658:	f040 81bd 	bne.w	109d6 <_ZN9ClearCore10SerialBase8PortModeENS0_9PortModesE.part.9+0x666>
    PMUX_DISABLE(m_txMosiInfo->gpioPort, m_txMosiInfo->gpioPin);
   1065c:	6a21      	ldr	r1, [r4, #32]
    bool sercomEnabled = m_serPort->USART.CTRLA.bit.ENABLE;
   1065e:	6922      	ldr	r2, [r4, #16]
    PMUX_DISABLE(m_txMosiInfo->gpioPort, m_txMosiInfo->gpioPin);
   10660:	f991 5001 	ldrsb.w	r5, [r1, #1]
   10664:	788b      	ldrb	r3, [r1, #2]
    bool sercomEnabled = m_serPort->USART.CTRLA.bit.ENABLE;
   10666:	6816      	ldr	r6, [r2, #0]
    PMUX_DISABLE(m_txMosiInfo->gpioPort, m_txMosiInfo->gpioPin);
   10668:	eb03 13c5 	add.w	r3, r3, r5, lsl #7
   1066c:	f103 4382 	add.w	r3, r3, #1090519040	; 0x41000000
   10670:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
    bool sercomEnabled = m_serPort->USART.CTRLA.bit.ENABLE;
   10674:	f3c6 0640 	ubfx	r6, r6, #1, #1
    PMUX_DISABLE(m_txMosiInfo->gpioPort, m_txMosiInfo->gpioPin);
   10678:	f893 1040 	ldrb.w	r1, [r3, #64]	; 0x40
   1067c:	f36f 0100 	bfc	r1, #0, #1
   10680:	f883 1040 	strb.w	r1, [r3, #64]	; 0x40
    if (m_serPort->USART.CTRLA.bit.ENABLE) {
   10684:	6813      	ldr	r3, [r2, #0]
   10686:	0799      	lsls	r1, r3, #30
   10688:	d503      	bpl.n	10692 <_ZN9ClearCore10SerialBase8PortModeENS0_9PortModesE.part.9+0x322>
        m_serPort->USART.CTRLA.bit.ENABLE = 0;
   1068a:	6813      	ldr	r3, [r2, #0]
   1068c:	f36f 0341 	bfc	r3, #1, #1
   10690:	6013      	str	r3, [r2, #0]
    SYNCBUSY_WAIT(usart, SERCOM_USART_SYNCBUSY_ENABLE);
   10692:	69d3      	ldr	r3, [r2, #28]
   10694:	f013 0302 	ands.w	r3, r3, #2
   10698:	d1fb      	bne.n	10692 <_ZN9ClearCore10SerialBase8PortModeENS0_9PortModesE.part.9+0x322>
    Flush();
   1069a:	6802      	ldr	r2, [r0, #0]
   1069c:	4542      	cmp	r2, r8
   1069e:	f040 8211 	bne.w	10ac4 <_ZN9ClearCore10SerialBase8PortModeENS0_9PortModesE.part.9+0x754>
    m_outTail = 0;
   106a2:	f8c4 313c 	str.w	r3, [r4, #316]	; 0x13c
    m_bufferOut[0] = 0;
   106a6:	f8a4 30b0 	strh.w	r3, [r4, #176]	; 0xb0
    m_outHead = 0;
   106aa:	f8c4 3138 	str.w	r3, [r4, #312]	; 0x138
    FlushInput();
   106ae:	6843      	ldr	r3, [r0, #4]
   106b0:	4a4e      	ldr	r2, [pc, #312]	; (107ec <_ZN9ClearCore10SerialBase8PortModeENS0_9PortModesE.part.9+0x47c>)
   106b2:	4293      	cmp	r3, r2
   106b4:	f040 8202 	bne.w	10abc <_ZN9ClearCore10SerialBase8PortModeENS0_9PortModesE.part.9+0x74c>
    m_serPort->USART.INTENSET.reg = SERCOM_USART_INTENSET_RXC;
   106b8:	6925      	ldr	r5, [r4, #16]
    m_bufferIn[0] = 0;
   106ba:	2300      	movs	r3, #0
    m_serPort->USART.INTENSET.reg = SERCOM_USART_INTENSET_RXC;
   106bc:	2204      	movs	r2, #4
    m_inTail = 0;
   106be:	f8c4 3134 	str.w	r3, [r4, #308]	; 0x134
    m_bufferIn[0] = 0;
   106c2:	8623      	strh	r3, [r4, #48]	; 0x30
    m_inHead = 0;
   106c4:	f8c4 3130 	str.w	r3, [r4, #304]	; 0x130
    m_serPort->USART.INTENSET.reg = SERCOM_USART_INTENSET_RXC;
   106c8:	75aa      	strb	r2, [r5, #22]
    switch (m_portMode) {
   106ca:	79e3      	ldrb	r3, [r4, #7]
   106cc:	2b01      	cmp	r3, #1
   106ce:	f040 8150 	bne.w	10972 <_ZN9ClearCore10SerialBase8PortModeENS0_9PortModesE.part.9+0x602>
            baudVal = ((__SERCOM_SPI_CLOCK / 2 + (bitsPerSecond - 1)) /
   106d2:	4b47      	ldr	r3, [pc, #284]	; (107f0 <_ZN9ClearCore10SerialBase8PortModeENS0_9PortModesE.part.9+0x480>)
   106d4:	444b      	add	r3, r9
   106d6:	fbb3 f3f9 	udiv	r3, r3, r9
   106da:	3b01      	subs	r3, #1
            m_serPort->SPI.BAUD.bit.BAUD = static_cast<uint8_t>(baudVal);
   106dc:	2bff      	cmp	r3, #255	; 0xff
   106de:	bf28      	it	cs
   106e0:	23ff      	movcs	r3, #255	; 0xff
   106e2:	b2db      	uxtb	r3, r3
   106e4:	732b      	strb	r3, [r5, #12]
    if (sercomEnabled) {
   106e6:	2e00      	cmp	r6, #0
   106e8:	f000 816f 	beq.w	109ca <_ZN9ClearCore10SerialBase8PortModeENS0_9PortModesE.part.9+0x65a>
    m_serPort->USART.CTRLA.bit.ENABLE = 1;
   106ec:	682b      	ldr	r3, [r5, #0]
   106ee:	f043 0302 	orr.w	r3, r3, #2
   106f2:	602b      	str	r3, [r5, #0]
    SYNCBUSY_WAIT(usart, SERCOM_USART_SYNCBUSY_ENABLE);
   106f4:	69eb      	ldr	r3, [r5, #28]
   106f6:	079b      	lsls	r3, r3, #30
   106f8:	d4fc      	bmi.n	106f4 <_ZN9ClearCore10SerialBase8PortModeENS0_9PortModesE.part.9+0x384>
        PMUX_ENABLE(m_txMosiInfo->gpioPort, m_txMosiInfo->gpioPin);
   106fa:	6a22      	ldr	r2, [r4, #32]
   106fc:	f992 3001 	ldrsb.w	r3, [r2, #1]
   10700:	7890      	ldrb	r0, [r2, #2]
   10702:	01db      	lsls	r3, r3, #7
   10704:	f103 4282 	add.w	r2, r3, #1090519040	; 0x41000000
   10708:	f502 4200 	add.w	r2, r2, #32768	; 0x8000
   1070c:	4402      	add	r2, r0
   1070e:	f892 1040 	ldrb.w	r1, [r2, #64]	; 0x40
   10712:	f041 0101 	orr.w	r1, r1, #1
   10716:	f882 1040 	strb.w	r1, [r2, #64]	; 0x40
    DATA_DIRECTION_OUTPUT(m_rtsSsInfo->gpioPort, 1L << m_rtsSsInfo->gpioPin);
   1071a:	69a6      	ldr	r6, [r4, #24]
   1071c:	4a35      	ldr	r2, [pc, #212]	; (107f4 <_ZN9ClearCore10SerialBase8PortModeENS0_9PortModesE.part.9+0x484>)
   1071e:	f996 1001 	ldrsb.w	r1, [r6, #1]
   10722:	78b7      	ldrb	r7, [r6, #2]
   10724:	eb02 11c1 	add.w	r1, r2, r1, lsl #7
   10728:	2601      	movs	r6, #1
   1072a:	40be      	lsls	r6, r7
   1072c:	608e      	str	r6, [r1, #8]
    PMUX_SELECTION(m_ctsMisoInfo->gpioPort, m_ctsMisoInfo->gpioPin,
   1072e:	6961      	ldr	r1, [r4, #20]
   10730:	f894 6028 	ldrb.w	r6, [r4, #40]	; 0x28
   10734:	f891 c002 	ldrb.w	ip, [r1, #2]
   10738:	f991 e001 	ldrsb.w	lr, [r1, #1]
   1073c:	f01c 0f01 	tst.w	ip, #1
   10740:	ea4f 1ece 	mov.w	lr, lr, lsl #7
   10744:	f000 8108 	beq.w	10958 <_ZN9ClearCore10SerialBase8PortModeENS0_9PortModesE.part.9+0x5e8>
   10748:	4472      	add	r2, lr
   1074a:	eb02 025c 	add.w	r2, r2, ip, lsr #1
   1074e:	f006 060f 	and.w	r6, r6, #15
   10752:	f892 1030 	ldrb.w	r1, [r2, #48]	; 0x30
   10756:	f366 1107 	bfi	r1, r6, #4, #4
   1075a:	f882 1030 	strb.w	r1, [r2, #48]	; 0x30
    PIN_CONFIGURATION(m_ctsMisoInfo->gpioPort, m_ctsMisoInfo->gpioPin,
   1075e:	4925      	ldr	r1, [pc, #148]	; (107f4 <_ZN9ClearCore10SerialBase8PortModeENS0_9PortModesE.part.9+0x484>)
   10760:	eb01 020e 	add.w	r2, r1, lr
   10764:	eb02 0e0c 	add.w	lr, r2, ip
    DATA_DIRECTION_INPUT(m_ctsMisoInfo->gpioPort, 1L << m_ctsMisoInfo->gpioPin);
   10768:	2701      	movs	r7, #1
   1076a:	fa07 f70c 	lsl.w	r7, r7, ip
    PIN_CONFIGURATION(m_ctsMisoInfo->gpioPort, m_ctsMisoInfo->gpioPin,
   1076e:	f04f 0803 	mov.w	r8, #3
   10772:	f88e 8040 	strb.w	r8, [lr, #64]	; 0x40
    DATA_DIRECTION_INPUT(m_ctsMisoInfo->gpioPort, 1L << m_ctsMisoInfo->gpioPin);
   10776:	6057      	str	r7, [r2, #4]
    PMUX_SELECTION(m_rxSckInfo->gpioPort, m_rxSckInfo->gpioPin,
   10778:	69e2      	ldr	r2, [r4, #28]
   1077a:	7894      	ldrb	r4, [r2, #2]
   1077c:	f992 2001 	ldrsb.w	r2, [r2, #1]
   10780:	01d2      	lsls	r2, r2, #7
   10782:	4411      	add	r1, r2
   10784:	eb01 0154 	add.w	r1, r1, r4, lsr #1
   10788:	f014 0f01 	tst.w	r4, #1
   1078c:	f891 7030 	ldrb.w	r7, [r1, #48]	; 0x30
   10790:	bf14      	ite	ne
   10792:	f366 1707 	bfine	r7, r6, #4, #4
   10796:	f366 0703 	bfieq	r7, r6, #0, #4
   1079a:	f881 7030 	strb.w	r7, [r1, #48]	; 0x30
    PIN_CONFIGURATION(m_rxSckInfo->gpioPort, m_rxSckInfo->gpioPin,
   1079e:	4915      	ldr	r1, [pc, #84]	; (107f4 <_ZN9ClearCore10SerialBase8PortModeENS0_9PortModesE.part.9+0x484>)
   107a0:	440a      	add	r2, r1
   107a2:	4422      	add	r2, r4
    PMUX_SELECTION(m_txMosiInfo->gpioPort, m_txMosiInfo->gpioPin,
   107a4:	4419      	add	r1, r3
    PIN_CONFIGURATION(m_rxSckInfo->gpioPort, m_rxSckInfo->gpioPin,
   107a6:	2401      	movs	r4, #1
    PMUX_SELECTION(m_txMosiInfo->gpioPort, m_txMosiInfo->gpioPin,
   107a8:	eb01 0150 	add.w	r1, r1, r0, lsr #1
    PIN_CONFIGURATION(m_rxSckInfo->gpioPort, m_rxSckInfo->gpioPin,
   107ac:	f882 4040 	strb.w	r4, [r2, #64]	; 0x40
    PMUX_SELECTION(m_txMosiInfo->gpioPort, m_txMosiInfo->gpioPin,
   107b0:	f891 2030 	ldrb.w	r2, [r1, #48]	; 0x30
    PIN_CONFIGURATION(m_txMosiInfo->gpioPort, m_txMosiInfo->gpioPin,
   107b4:	f103 4382 	add.w	r3, r3, #1090519040	; 0x41000000
    PMUX_SELECTION(m_txMosiInfo->gpioPort, m_txMosiInfo->gpioPin,
   107b8:	07c4      	lsls	r4, r0, #31
    PIN_CONFIGURATION(m_txMosiInfo->gpioPort, m_txMosiInfo->gpioPin,
   107ba:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
    PMUX_SELECTION(m_txMosiInfo->gpioPort, m_txMosiInfo->gpioPin,
   107be:	bf4c      	ite	mi
   107c0:	f366 1207 	bfimi	r2, r6, #4, #4
   107c4:	f366 0203 	bfipl	r2, r6, #0, #4
    PIN_CONFIGURATION(m_txMosiInfo->gpioPort, m_txMosiInfo->gpioPin,
   107c8:	4403      	add	r3, r0
    PMUX_SELECTION(m_txMosiInfo->gpioPort, m_txMosiInfo->gpioPin,
   107ca:	f881 2030 	strb.w	r2, [r1, #48]	; 0x30
    PIN_CONFIGURATION(m_txMosiInfo->gpioPort, m_txMosiInfo->gpioPin,
   107ce:	2201      	movs	r2, #1
   107d0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    m_serPort->USART.CTRLA.bit.ENABLE = 1;
   107d4:	682b      	ldr	r3, [r5, #0]
   107d6:	f043 0302 	orr.w	r3, r3, #2
   107da:	602b      	str	r3, [r5, #0]
   107dc:	e00c      	b.n	107f8 <_ZN9ClearCore10SerialBase8PortModeENS0_9PortModesE.part.9+0x488>
   107de:	bf00      	nop
   107e0:	e000e100 	.word	0xe000e100
   107e4:	40001c00 	.word	0x40001c00
   107e8:	0000fe55 	.word	0x0000fe55
   107ec:	0000fd31 	.word	0x0000fd31
   107f0:	004c4b3f 	.word	0x004c4b3f
   107f4:	41008000 	.word	0x41008000
    SYNCBUSY_WAIT(usart, SERCOM_USART_SYNCBUSY_ENABLE);
   107f8:	69eb      	ldr	r3, [r5, #28]
   107fa:	079b      	lsls	r3, r3, #30
   107fc:	d4fc      	bmi.n	107f8 <_ZN9ClearCore10SerialBase8PortModeENS0_9PortModesE.part.9+0x488>
    return true;
   107fe:	2001      	movs	r0, #1
}
   10800:	b009      	add	sp, #36	; 0x24
   10802:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
            usart->CTRLA.bit.MODE = 1;
   10806:	6829      	ldr	r1, [r5, #0]
   10808:	f36e 0184 	bfi	r1, lr, #2, #3
   1080c:	6029      	str	r1, [r5, #0]
            usart->CTRLA.bit.SAMPR = 0;
   1080e:	6829      	ldr	r1, [r5, #0]
   10810:	f36f 314f 	bfc	r1, #13, #3
   10814:	6029      	str	r1, [r5, #0]
            usart->CTRLA.bit.CMODE = 0;
   10816:	6829      	ldr	r1, [r5, #0]
   10818:	f36f 711c 	bfc	r1, #28, #1
   1081c:	6029      	str	r1, [r5, #0]
            usart->CTRLA.bit.RXPO = 1;
   1081e:	6829      	ldr	r1, [r5, #0]
   10820:	f36e 5115 	bfi	r1, lr, #20, #2
   10824:	6029      	str	r1, [r5, #0]
    if (m_portMode == UART && m_portOpen) {
   10826:	f1bc 0f00 	cmp.w	ip, #0
   1082a:	d104      	bne.n	10836 <_ZN9ClearCore10SerialBase8PortModeENS0_9PortModesE.part.9+0x4c6>
   1082c:	f894 1029 	ldrb.w	r1, [r4, #41]	; 0x29
   10830:	2900      	cmp	r1, #0
   10832:	f040 81af 	bne.w	10b94 <_ZN9ClearCore10SerialBase8PortModeENS0_9PortModesE.part.9+0x824>
            usart->CTRLB.bit.CHSIZE =
   10836:	686b      	ldr	r3, [r5, #4]
                m_charSize & SERCOM_USART_CTRLB_CHSIZE_Msk;
   10838:	79a2      	ldrb	r2, [r4, #6]
            usart->CTRLB.bit.CHSIZE =
   1083a:	f362 0302 	bfi	r3, r2, #0, #3
   1083e:	606b      	str	r3, [r5, #4]
            usart->CTRLA.bit.DORD = 1;
   10840:	682b      	ldr	r3, [r5, #0]
   10842:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
   10846:	602b      	str	r3, [r5, #0]
            if (m_parity != PARITY_N) {
   10848:	7923      	ldrb	r3, [r4, #4]
   1084a:	2b02      	cmp	r3, #2
   1084c:	f000 817c 	beq.w	10b48 <_ZN9ClearCore10SerialBase8PortModeENS0_9PortModesE.part.9+0x7d8>
                usart->CTRLA.bit.FORM = 1;
   10850:	682a      	ldr	r2, [r5, #0]
   10852:	2101      	movs	r1, #1
   10854:	f361 621b 	bfi	r2, r1, #24, #4
   10858:	602a      	str	r2, [r5, #0]
                usart->CTRLB.bit.PMODE = m_parity;
   1085a:	686a      	ldr	r2, [r5, #4]
   1085c:	f363 324d 	bfi	r2, r3, #13, #1
   10860:	606a      	str	r2, [r5, #4]
            usart->CTRLB.bit.SBMODE = m_stopBits - 1;
   10862:	7963      	ldrb	r3, [r4, #5]
   10864:	686a      	ldr	r2, [r5, #4]
   10866:	3b01      	subs	r3, #1
   10868:	f363 1286 	bfi	r2, r3, #6, #1
   1086c:	606a      	str	r2, [r5, #4]
            usart->CTRLB.bit.RXEN = 1;
   1086e:	686b      	ldr	r3, [r5, #4]
   10870:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
   10874:	606b      	str	r3, [r5, #4]
            usart->CTRLB.bit.TXEN = 1;
   10876:	686b      	ldr	r3, [r5, #4]
   10878:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
   1087c:	606b      	str	r3, [r5, #4]
            usart->CTRLB.bit.SFDE = 0;
   1087e:	686b      	ldr	r3, [r5, #4]
            usart->INTENSET.reg =
   10880:	2284      	movs	r2, #132	; 0x84
            usart->CTRLB.bit.SFDE = 0;
   10882:	f36f 2349 	bfc	r3, #9, #1
   10886:	606b      	str	r3, [r5, #4]
            usart->INTENSET.reg =
   10888:	75aa      	strb	r2, [r5, #22]
            SYNCBUSY_WAIT(usart, SERCOM_USART_SYNCBUSY_CTRLB);
   1088a:	69eb      	ldr	r3, [r5, #28]
   1088c:	075b      	lsls	r3, r3, #29
   1088e:	d4fc      	bmi.n	1088a <_ZN9ClearCore10SerialBase8PortModeENS0_9PortModesE.part.9+0x51a>
            m_dreIrqN = (IRQn_Type)(IdNvic + SERCOM_USART_INTFLAG_DRE_Pos);
   10890:	f8bd 200c 	ldrh.w	r2, [sp, #12]
   10894:	85a2      	strh	r2, [r4, #44]	; 0x2c
  NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
   10896:	4bb7      	ldr	r3, [pc, #732]	; (10b74 <_ZN9ClearCore10SerialBase8PortModeENS0_9PortModesE.part.9+0x804>)
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   10898:	9a04      	ldr	r2, [sp, #16]
   1089a:	441a      	add	r2, r3
   1089c:	4610      	mov	r0, r2
   1089e:	9a05      	ldr	r2, [sp, #20]
   108a0:	eb03 0109 	add.w	r1, r3, r9
   108a4:	441a      	add	r2, r3
  NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
   108a6:	46be      	mov	lr, r7
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   108a8:	4615      	mov	r5, r2
  NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
   108aa:	9f00      	ldr	r7, [sp, #0]
   108ac:	f843 702e 	str.w	r7, [r3, lr, lsl #2]
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   108b0:	2220      	movs	r2, #32
   108b2:	f881 2300 	strb.w	r2, [r1, #768]	; 0x300
  NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
   108b6:	9901      	ldr	r1, [sp, #4]
   108b8:	f843 1026 	str.w	r1, [r3, r6, lsl #2]
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   108bc:	f880 2300 	strb.w	r2, [r0, #768]	; 0x300
  NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
   108c0:	9a02      	ldr	r2, [sp, #8]
   108c2:	f843 2026 	str.w	r2, [r3, r6, lsl #2]
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   108c6:	f04f 0ee0 	mov.w	lr, #224	; 0xe0
   108ca:	f885 e300 	strb.w	lr, [r5, #768]	; 0x300
            PMUX_SELECTION(m_rtsSsInfo->gpioPort, m_rtsSsInfo->gpioPin,
   108ce:	69a3      	ldr	r3, [r4, #24]
   108d0:	f894 5028 	ldrb.w	r5, [r4, #40]	; 0x28
   108d4:	789a      	ldrb	r2, [r3, #2]
   108d6:	f993 3001 	ldrsb.w	r3, [r3, #1]
   108da:	01db      	lsls	r3, r3, #7
   108dc:	f103 4182 	add.w	r1, r3, #1090519040	; 0x41000000
   108e0:	f501 4100 	add.w	r1, r1, #32768	; 0x8000
   108e4:	eb01 0152 	add.w	r1, r1, r2, lsr #1
   108e8:	07d6      	lsls	r6, r2, #31
   108ea:	f891 0030 	ldrb.w	r0, [r1, #48]	; 0x30
   108ee:	bf4c      	ite	mi
   108f0:	f365 1007 	bfimi	r0, r5, #4, #4
   108f4:	f365 0003 	bfipl	r0, r5, #0, #4
   108f8:	f881 0030 	strb.w	r0, [r1, #48]	; 0x30
            RtsMode(m_rtsMode);
   108fc:	7ae1      	ldrb	r1, [r4, #11]
    switch (mode) {
   108fe:	2901      	cmp	r1, #1
   10900:	f240 80c7 	bls.w	10a92 <_ZN9ClearCore10SerialBase8PortModeENS0_9PortModesE.part.9+0x722>
   10904:	2902      	cmp	r1, #2
   10906:	d10a      	bne.n	1091e <_ZN9ClearCore10SerialBase8PortModeENS0_9PortModesE.part.9+0x5ae>
            PMUX_ENABLE(m_rtsSsInfo->gpioPort, m_rtsSsInfo->gpioPin);
   10908:	f103 4382 	add.w	r3, r3, #1090519040	; 0x41000000
   1090c:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
   10910:	4413      	add	r3, r2
   10912:	f893 2040 	ldrb.w	r2, [r3, #64]	; 0x40
   10916:	f042 0201 	orr.w	r2, r2, #1
   1091a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
            SET_CLOCK_SOURCE(clockId, __SERCOM_USART_CLOCK_INDEX);
   1091e:	f10a 0e20 	add.w	lr, sl, #32
   10922:	4a95      	ldr	r2, [pc, #596]	; (10b78 <_ZN9ClearCore10SerialBase8PortModeENS0_9PortModesE.part.9+0x808>)
   10924:	f852 302e 	ldr.w	r3, [r2, lr, lsl #2]
   10928:	f36f 1386 	bfc	r3, #6, #1
   1092c:	f842 302e 	str.w	r3, [r2, lr, lsl #2]
   10930:	f852 302e 	ldr.w	r3, [r2, lr, lsl #2]
   10934:	f3c3 1380 	ubfx	r3, r3, #6, #1
   10938:	2b00      	cmp	r3, #0
   1093a:	d1f9      	bne.n	10930 <_ZN9ClearCore10SerialBase8PortModeENS0_9PortModesE.part.9+0x5c0>
   1093c:	f852 102e 	ldr.w	r1, [r2, lr, lsl #2]
   10940:	f363 0103 	bfi	r1, r3, #0, #4
   10944:	f842 102e 	str.w	r1, [r2, lr, lsl #2]
   10948:	f852 302e 	ldr.w	r3, [r2, lr, lsl #2]
   1094c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   10950:	f842 302e 	str.w	r3, [r2, lr, lsl #2]
   10954:	6853      	ldr	r3, [r2, #4]
   10956:	e679      	b.n	1064c <_ZN9ClearCore10SerialBase8PortModeENS0_9PortModesE.part.9+0x2dc>
    PMUX_SELECTION(m_ctsMisoInfo->gpioPort, m_ctsMisoInfo->gpioPin,
   10958:	eb02 010e 	add.w	r1, r2, lr
   1095c:	eb01 015c 	add.w	r1, r1, ip, lsr #1
   10960:	f006 060f 	and.w	r6, r6, #15
   10964:	f891 2030 	ldrb.w	r2, [r1, #48]	; 0x30
   10968:	f366 0203 	bfi	r2, r6, #0, #4
   1096c:	f881 2030 	strb.w	r2, [r1, #48]	; 0x30
   10970:	e6f5      	b.n	1075e <_ZN9ClearCore10SerialBase8PortModeENS0_9PortModesE.part.9+0x3ee>
                65536 * (1 - (16.0 * bitsPerSecond / __SERCOM_USART_CLOCK));
   10972:	4648      	mov	r0, r9
   10974:	f00b f814 	bl	1b9a0 <__aeabi_ui2d>
   10978:	2200      	movs	r2, #0
   1097a:	4b80      	ldr	r3, [pc, #512]	; (10b7c <_ZN9ClearCore10SerialBase8PortModeENS0_9PortModesE.part.9+0x80c>)
   1097c:	f00b f886 	bl	1ba8c <__aeabi_dmul>
   10980:	4b7f      	ldr	r3, [pc, #508]	; (10b80 <_ZN9ClearCore10SerialBase8PortModeENS0_9PortModesE.part.9+0x810>)
   10982:	4680      	mov	r8, r0
   10984:	6818      	ldr	r0, [r3, #0]
   10986:	4689      	mov	r9, r1
   10988:	f00b f80a 	bl	1b9a0 <__aeabi_ui2d>
   1098c:	4602      	mov	r2, r0
   1098e:	460b      	mov	r3, r1
   10990:	4640      	mov	r0, r8
   10992:	4649      	mov	r1, r9
   10994:	f00b f9a4 	bl	1bce0 <__aeabi_ddiv>
   10998:	4602      	mov	r2, r0
   1099a:	460b      	mov	r3, r1
   1099c:	2000      	movs	r0, #0
   1099e:	4979      	ldr	r1, [pc, #484]	; (10b84 <_ZN9ClearCore10SerialBase8PortModeENS0_9PortModesE.part.9+0x814>)
   109a0:	f00a fec0 	bl	1b724 <__aeabi_dsub>
   109a4:	2200      	movs	r2, #0
   109a6:	4b78      	ldr	r3, [pc, #480]	; (10b88 <_ZN9ClearCore10SerialBase8PortModeENS0_9PortModesE.part.9+0x818>)
   109a8:	f00b f870 	bl	1ba8c <__aeabi_dmul>
   109ac:	f00b fb50 	bl	1c050 <__aeabi_d2f>
            m_serPort->USART.BAUD.bit.BAUD = (uint16_t)(baudFloat + 0.5);
   109b0:	f00b f818 	bl	1b9e4 <__aeabi_f2d>
   109b4:	2200      	movs	r2, #0
   109b6:	4b75      	ldr	r3, [pc, #468]	; (10b8c <_ZN9ClearCore10SerialBase8PortModeENS0_9PortModesE.part.9+0x81c>)
   109b8:	f00a feb6 	bl	1b728 <__adddf3>
   109bc:	f00b fb28 	bl	1c010 <__aeabi_d2uiz>
   109c0:	b280      	uxth	r0, r0
   109c2:	81a8      	strh	r0, [r5, #12]
    if (sercomEnabled) {
   109c4:	2e00      	cmp	r6, #0
   109c6:	f47f ae91 	bne.w	106ec <_ZN9ClearCore10SerialBase8PortModeENS0_9PortModesE.part.9+0x37c>
   109ca:	6a22      	ldr	r2, [r4, #32]
   109cc:	f992 3001 	ldrsb.w	r3, [r2, #1]
   109d0:	7890      	ldrb	r0, [r2, #2]
   109d2:	01db      	lsls	r3, r3, #7
   109d4:	e6a1      	b.n	1071a <_ZN9ClearCore10SerialBase8PortModeENS0_9PortModesE.part.9+0x3aa>
    Speed(m_baudRate);
   109d6:	4649      	mov	r1, r9
   109d8:	4620      	mov	r0, r4
   109da:	4798      	blx	r3
   109dc:	6a22      	ldr	r2, [r4, #32]
   109de:	6925      	ldr	r5, [r4, #16]
   109e0:	f992 3001 	ldrsb.w	r3, [r2, #1]
   109e4:	7890      	ldrb	r0, [r2, #2]
   109e6:	01db      	lsls	r3, r3, #7
   109e8:	e697      	b.n	1071a <_ZN9ClearCore10SerialBase8PortModeENS0_9PortModesE.part.9+0x3aa>
        m_dmaTxChannel = DMA_INVALID_CHANNEL;
   109ea:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
   109ee:	9207      	str	r2, [sp, #28]
   109f0:	9206      	str	r2, [sp, #24]
   109f2:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
   109f6:	9202      	str	r2, [sp, #8]
   109f8:	2239      	movs	r2, #57	; 0x39
   109fa:	9205      	str	r2, [sp, #20]
   109fc:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
   10a00:	9201      	str	r2, [sp, #4]
   10a02:	2238      	movs	r2, #56	; 0x38
        m_dmaRxChannel = DMA_INVALID_CHANNEL;
   10a04:	2007      	movs	r0, #7
        m_dmaTxChannel = DMA_INVALID_CHANNEL;
   10a06:	2601      	movs	r6, #1
   10a08:	f04f 0936 	mov.w	r9, #54	; 0x36
   10a0c:	9204      	str	r2, [sp, #16]
   10a0e:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
        m_dmaRxChannel = DMA_INVALID_CHANNEL;
   10a12:	f884 002e 	strb.w	r0, [r4, #46]	; 0x2e
        m_dmaTxChannel = DMA_INVALID_CHANNEL;
   10a16:	f884 002f 	strb.w	r0, [r4, #47]	; 0x2f
   10a1a:	4637      	mov	r7, r6
        IdNvic = SERCOM2_0_IRQn;
   10a1c:	f8cd 900c 	str.w	r9, [sp, #12]
        m_dmaTxChannel = DMA_INVALID_CHANNEL;
   10a20:	f04f 0a17 	mov.w	sl, #23
   10a24:	9200      	str	r2, [sp, #0]
   10a26:	e53a      	b.n	1049e <_ZN9ClearCore10SerialBase8PortModeENS0_9PortModesE.part.9+0x12e>
            DATA_OUTPUT_STATE(m_rtsSsInfo->gpioPort,
   10a28:	2900      	cmp	r1, #0
   10a2a:	f040 8092 	bne.w	10b52 <_ZN9ClearCore10SerialBase8PortModeENS0_9PortModesE.part.9+0x7e2>
   10a2e:	f103 4182 	add.w	r1, r3, #1090519040	; 0x41000000
   10a32:	f501 4100 	add.w	r1, r1, #32768	; 0x8000
   10a36:	2501      	movs	r5, #1
   10a38:	4095      	lsls	r5, r2
   10a3a:	618d      	str	r5, [r1, #24]
            PMUX_DISABLE(m_rtsSsInfo->gpioPort, m_rtsSsInfo->gpioPin);
   10a3c:	f103 4382 	add.w	r3, r3, #1090519040	; 0x41000000
   10a40:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
   10a44:	4413      	add	r3, r2
   10a46:	f893 2040 	ldrb.w	r2, [r3, #64]	; 0x40
   10a4a:	f36f 0200 	bfc	r2, #0, #1
   10a4e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
   10a52:	e5c7      	b.n	105e4 <_ZN9ClearCore10SerialBase8PortModeENS0_9PortModesE.part.9+0x274>
        m_dmaTxChannel = DMA_INVALID_CHANNEL;
   10a54:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
   10a58:	9207      	str	r2, [sp, #28]
   10a5a:	9206      	str	r2, [sp, #24]
   10a5c:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
   10a60:	9202      	str	r2, [sp, #8]
   10a62:	223d      	movs	r2, #61	; 0x3d
   10a64:	9205      	str	r2, [sp, #20]
   10a66:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
   10a6a:	9201      	str	r2, [sp, #4]
   10a6c:	223c      	movs	r2, #60	; 0x3c
        m_dmaRxChannel = DMA_INVALID_CHANNEL;
   10a6e:	2007      	movs	r0, #7
        m_dmaTxChannel = DMA_INVALID_CHANNEL;
   10a70:	2601      	movs	r6, #1
   10a72:	f04f 093a 	mov.w	r9, #58	; 0x3a
   10a76:	9204      	str	r2, [sp, #16]
   10a78:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
        m_dmaRxChannel = DMA_INVALID_CHANNEL;
   10a7c:	f884 002e 	strb.w	r0, [r4, #46]	; 0x2e
        m_dmaTxChannel = DMA_INVALID_CHANNEL;
   10a80:	f884 002f 	strb.w	r0, [r4, #47]	; 0x2f
   10a84:	4637      	mov	r7, r6
        IdNvic = SERCOM3_0_IRQn;
   10a86:	f8cd 900c 	str.w	r9, [sp, #12]
        m_dmaTxChannel = DMA_INVALID_CHANNEL;
   10a8a:	f04f 0a18 	mov.w	sl, #24
   10a8e:	9200      	str	r2, [sp, #0]
   10a90:	e505      	b.n	1049e <_ZN9ClearCore10SerialBase8PortModeENS0_9PortModesE.part.9+0x12e>
            DATA_OUTPUT_STATE(m_rtsSsInfo->gpioPort,
   10a92:	2900      	cmp	r1, #0
   10a94:	d165      	bne.n	10b62 <_ZN9ClearCore10SerialBase8PortModeENS0_9PortModesE.part.9+0x7f2>
   10a96:	f103 4182 	add.w	r1, r3, #1090519040	; 0x41000000
   10a9a:	f501 4100 	add.w	r1, r1, #32768	; 0x8000
   10a9e:	2001      	movs	r0, #1
   10aa0:	4090      	lsls	r0, r2
   10aa2:	6188      	str	r0, [r1, #24]
            PMUX_DISABLE(m_rtsSsInfo->gpioPort, m_rtsSsInfo->gpioPin);
   10aa4:	f103 4382 	add.w	r3, r3, #1090519040	; 0x41000000
   10aa8:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
   10aac:	4413      	add	r3, r2
   10aae:	f893 2040 	ldrb.w	r2, [r3, #64]	; 0x40
   10ab2:	f36f 0200 	bfc	r2, #0, #1
   10ab6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
   10aba:	e730      	b.n	1091e <_ZN9ClearCore10SerialBase8PortModeENS0_9PortModesE.part.9+0x5ae>
    FlushInput();
   10abc:	4620      	mov	r0, r4
   10abe:	4798      	blx	r3
   10ac0:	6925      	ldr	r5, [r4, #16]
   10ac2:	e602      	b.n	106ca <_ZN9ClearCore10SerialBase8PortModeENS0_9PortModesE.part.9+0x35a>
    Flush();
   10ac4:	4620      	mov	r0, r4
   10ac6:	4790      	blx	r2
   10ac8:	6820      	ldr	r0, [r4, #0]
   10aca:	e5f0      	b.n	106ae <_ZN9ClearCore10SerialBase8PortModeENS0_9PortModesE.part.9+0x33e>
        m_dmaTxChannel = DMA_SERCOM7_SPI_TX;
   10acc:	2205      	movs	r2, #5
   10ace:	f884 202f 	strb.w	r2, [r4, #47]	; 0x2f
   10ad2:	f44f 5200 	mov.w	r2, #8192	; 0x2000
   10ad6:	9202      	str	r2, [sp, #8]
   10ad8:	224d      	movs	r2, #77	; 0x4d
   10ada:	492d      	ldr	r1, [pc, #180]	; (10b90 <_ZN9ClearCore10SerialBase8PortModeENS0_9PortModesE.part.9+0x820>)
   10adc:	9205      	str	r2, [sp, #20]
   10ade:	f44f 5280 	mov.w	r2, #4096	; 0x1000
   10ae2:	9201      	str	r2, [sp, #4]
   10ae4:	224c      	movs	r2, #76	; 0x4c
        m_dmaRxChannel = DMA_SERCOM7_SPI_RX;
   10ae6:	2004      	movs	r0, #4
        m_dmaTxChannel = DMA_SERCOM7_SPI_TX;
   10ae8:	2602      	movs	r6, #2
   10aea:	f04f 094a 	mov.w	r9, #74	; 0x4a
   10aee:	9107      	str	r1, [sp, #28]
   10af0:	9204      	str	r2, [sp, #16]
   10af2:	f5a1 7180 	sub.w	r1, r1, #256	; 0x100
   10af6:	f44f 6280 	mov.w	r2, #1024	; 0x400
   10afa:	9106      	str	r1, [sp, #24]
        m_dmaRxChannel = DMA_SERCOM7_SPI_RX;
   10afc:	f884 002e 	strb.w	r0, [r4, #46]	; 0x2e
        m_dmaTxChannel = DMA_SERCOM7_SPI_TX;
   10b00:	4637      	mov	r7, r6
        IdNvic = SERCOM7_0_IRQn;
   10b02:	f8cd 900c 	str.w	r9, [sp, #12]
        m_dmaTxChannel = DMA_SERCOM7_SPI_TX;
   10b06:	f04f 0a25 	mov.w	sl, #37	; 0x25
   10b0a:	9200      	str	r2, [sp, #0]
   10b0c:	e4c7      	b.n	1049e <_ZN9ClearCore10SerialBase8PortModeENS0_9PortModesE.part.9+0x12e>
        m_dmaTxChannel = DMA_INVALID_CHANNEL;
   10b0e:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
   10b12:	9207      	str	r2, [sp, #28]
   10b14:	9206      	str	r2, [sp, #24]
   10b16:	2241      	movs	r2, #65	; 0x41
   10b18:	9205      	str	r2, [sp, #20]
   10b1a:	2240      	movs	r2, #64	; 0x40
   10b1c:	2601      	movs	r6, #1
        m_dmaRxChannel = DMA_INVALID_CHANNEL;
   10b1e:	2007      	movs	r0, #7
        m_dmaTxChannel = DMA_INVALID_CHANNEL;
   10b20:	2102      	movs	r1, #2
   10b22:	f04f 093e 	mov.w	r9, #62	; 0x3e
   10b26:	9204      	str	r2, [sp, #16]
   10b28:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
   10b2c:	4637      	mov	r7, r6
   10b2e:	9601      	str	r6, [sp, #4]
   10b30:	9102      	str	r1, [sp, #8]
        m_dmaRxChannel = DMA_INVALID_CHANNEL;
   10b32:	f884 002e 	strb.w	r0, [r4, #46]	; 0x2e
        m_dmaTxChannel = DMA_INVALID_CHANNEL;
   10b36:	f884 002f 	strb.w	r0, [r4, #47]	; 0x2f
   10b3a:	460e      	mov	r6, r1
        IdNvic = SERCOM4_0_IRQn;
   10b3c:	f8cd 900c 	str.w	r9, [sp, #12]
        m_dmaTxChannel = DMA_INVALID_CHANNEL;
   10b40:	f04f 0a22 	mov.w	sl, #34	; 0x22
   10b44:	9200      	str	r2, [sp, #0]
   10b46:	e4aa      	b.n	1049e <_ZN9ClearCore10SerialBase8PortModeENS0_9PortModesE.part.9+0x12e>
                usart->CTRLA.bit.FORM = 0;
   10b48:	682b      	ldr	r3, [r5, #0]
   10b4a:	f36f 631b 	bfc	r3, #24, #4
   10b4e:	602b      	str	r3, [r5, #0]
   10b50:	e687      	b.n	10862 <_ZN9ClearCore10SerialBase8PortModeENS0_9PortModesE.part.9+0x4f2>
            DATA_OUTPUT_STATE(m_rtsSsInfo->gpioPort,
   10b52:	f103 4182 	add.w	r1, r3, #1090519040	; 0x41000000
   10b56:	f501 4100 	add.w	r1, r1, #32768	; 0x8000
   10b5a:	2501      	movs	r5, #1
   10b5c:	4095      	lsls	r5, r2
   10b5e:	614d      	str	r5, [r1, #20]
   10b60:	e76c      	b.n	10a3c <_ZN9ClearCore10SerialBase8PortModeENS0_9PortModesE.part.9+0x6cc>
   10b62:	f103 4182 	add.w	r1, r3, #1090519040	; 0x41000000
   10b66:	f501 4100 	add.w	r1, r1, #32768	; 0x8000
   10b6a:	2001      	movs	r0, #1
   10b6c:	4090      	lsls	r0, r2
   10b6e:	6148      	str	r0, [r1, #20]
   10b70:	e798      	b.n	10aa4 <_ZN9ClearCore10SerialBase8PortModeENS0_9PortModesE.part.9+0x734>
   10b72:	bf00      	nop
   10b74:	e000e100 	.word	0xe000e100
   10b78:	40001c00 	.word	0x40001c00
   10b7c:	40300000 	.word	0x40300000
   10b80:	200000e0 	.word	0x200000e0
   10b84:	3ff00000 	.word	0x3ff00000
   10b88:	40f00000 	.word	0x40f00000
   10b8c:	3fe00000 	.word	0x3fe00000
   10b90:	00201300 	.word	0x00201300
    PMUX_DISABLE(m_txMosiInfo->gpioPort, m_txMosiInfo->gpioPin);
   10b94:	445a      	add	r2, fp
        bool sercomEnabled = m_serPort->USART.CTRLA.bit.ENABLE;
   10b96:	6818      	ldr	r0, [r3, #0]
    PMUX_DISABLE(m_txMosiInfo->gpioPort, m_txMosiInfo->gpioPin);
   10b98:	f892 1040 	ldrb.w	r1, [r2, #64]	; 0x40
   10b9c:	f36c 0100 	bfi	r1, ip, #0, #1
   10ba0:	f882 1040 	strb.w	r1, [r2, #64]	; 0x40
    if (m_serPort->USART.CTRLA.bit.ENABLE) {
   10ba4:	681a      	ldr	r2, [r3, #0]
        bool sercomEnabled = m_serPort->USART.CTRLA.bit.ENABLE;
   10ba6:	f3c0 0b40 	ubfx	fp, r0, #1, #1
    if (m_serPort->USART.CTRLA.bit.ENABLE) {
   10baa:	0790      	lsls	r0, r2, #30
   10bac:	d503      	bpl.n	10bb6 <_ZN9ClearCore10SerialBase8PortModeENS0_9PortModesE.part.9+0x846>
        m_serPort->USART.CTRLA.bit.ENABLE = 0;
   10bae:	681a      	ldr	r2, [r3, #0]
   10bb0:	f36c 0241 	bfi	r2, ip, #1, #1
   10bb4:	601a      	str	r2, [r3, #0]
    SYNCBUSY_WAIT(usart, SERCOM_USART_SYNCBUSY_ENABLE);
   10bb6:	69da      	ldr	r2, [r3, #28]
   10bb8:	f012 0202 	ands.w	r2, r2, #2
   10bbc:	d1fb      	bne.n	10bb6 <_ZN9ClearCore10SerialBase8PortModeENS0_9PortModesE.part.9+0x846>
    Flush();
   10bbe:	6821      	ldr	r1, [r4, #0]
   10bc0:	680b      	ldr	r3, [r1, #0]
   10bc2:	4543      	cmp	r3, r8
   10bc4:	d13b      	bne.n	10c3e <_ZN9ClearCore10SerialBase8PortModeENS0_9PortModesE.part.9+0x8ce>
    m_outTail = 0;
   10bc6:	f8c4 213c 	str.w	r2, [r4, #316]	; 0x13c
    m_bufferOut[0] = 0;
   10bca:	f8a4 20b0 	strh.w	r2, [r4, #176]	; 0xb0
    m_outHead = 0;
   10bce:	f8c4 2138 	str.w	r2, [r4, #312]	; 0x138
    FlushInput();
   10bd2:	684b      	ldr	r3, [r1, #4]
   10bd4:	4a1c      	ldr	r2, [pc, #112]	; (10c48 <_ZN9ClearCore10SerialBase8PortModeENS0_9PortModesE.part.9+0x8d8>)
   10bd6:	4293      	cmp	r3, r2
   10bd8:	d12d      	bne.n	10c36 <_ZN9ClearCore10SerialBase8PortModeENS0_9PortModesE.part.9+0x8c6>
    m_serPort->USART.INTENSET.reg = SERCOM_USART_INTENSET_RXC;
   10bda:	6922      	ldr	r2, [r4, #16]
    m_bufferIn[0] = 0;
   10bdc:	2300      	movs	r3, #0
    m_serPort->USART.INTENSET.reg = SERCOM_USART_INTENSET_RXC;
   10bde:	2104      	movs	r1, #4
    m_inTail = 0;
   10be0:	f8c4 3134 	str.w	r3, [r4, #308]	; 0x134
    m_bufferIn[0] = 0;
   10be4:	8623      	strh	r3, [r4, #48]	; 0x30
    m_inHead = 0;
   10be6:	f8c4 3130 	str.w	r3, [r4, #304]	; 0x130
    m_serPort->USART.INTENSET.reg = SERCOM_USART_INTENSET_RXC;
   10bea:	7591      	strb	r1, [r2, #22]
        m_serPort->USART.CTRLA.bit.TXPO = m_flowControl ? 2 : 0;
   10bec:	7b21      	ldrb	r1, [r4, #12]
   10bee:	6813      	ldr	r3, [r2, #0]
   10bf0:	2900      	cmp	r1, #0
   10bf2:	bf0c      	ite	eq
   10bf4:	2100      	moveq	r1, #0
   10bf6:	2102      	movne	r1, #2
   10bf8:	f361 4311 	bfi	r3, r1, #16, #2
   10bfc:	6013      	str	r3, [r2, #0]
        if (sercomEnabled) {
   10bfe:	f1bb 0f00 	cmp.w	fp, #0
   10c02:	f43f ae18 	beq.w	10836 <_ZN9ClearCore10SerialBase8PortModeENS0_9PortModesE.part.9+0x4c6>
    m_serPort->USART.CTRLA.bit.ENABLE = 1;
   10c06:	6813      	ldr	r3, [r2, #0]
   10c08:	f043 0302 	orr.w	r3, r3, #2
   10c0c:	6013      	str	r3, [r2, #0]
    SYNCBUSY_WAIT(usart, SERCOM_USART_SYNCBUSY_ENABLE);
   10c0e:	69d3      	ldr	r3, [r2, #28]
   10c10:	0799      	lsls	r1, r3, #30
   10c12:	d4fc      	bmi.n	10c0e <_ZN9ClearCore10SerialBase8PortModeENS0_9PortModesE.part.9+0x89e>
        PMUX_ENABLE(m_txMosiInfo->gpioPort, m_txMosiInfo->gpioPin);
   10c14:	6a23      	ldr	r3, [r4, #32]
   10c16:	f993 2001 	ldrsb.w	r2, [r3, #1]
   10c1a:	789b      	ldrb	r3, [r3, #2]
   10c1c:	eb03 13c2 	add.w	r3, r3, r2, lsl #7
   10c20:	f103 4382 	add.w	r3, r3, #1090519040	; 0x41000000
   10c24:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
   10c28:	f893 2040 	ldrb.w	r2, [r3, #64]	; 0x40
   10c2c:	f042 0201 	orr.w	r2, r2, #1
   10c30:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
   10c34:	e5ff      	b.n	10836 <_ZN9ClearCore10SerialBase8PortModeENS0_9PortModesE.part.9+0x4c6>
    FlushInput();
   10c36:	4620      	mov	r0, r4
   10c38:	4798      	blx	r3
   10c3a:	6922      	ldr	r2, [r4, #16]
   10c3c:	e7d6      	b.n	10bec <_ZN9ClearCore10SerialBase8PortModeENS0_9PortModesE.part.9+0x87c>
    Flush();
   10c3e:	4620      	mov	r0, r4
   10c40:	4798      	blx	r3
   10c42:	6821      	ldr	r1, [r4, #0]
   10c44:	e7c5      	b.n	10bd2 <_ZN9ClearCore10SerialBase8PortModeENS0_9PortModesE.part.9+0x862>
   10c46:	bf00      	nop
   10c48:	0000fd31 	.word	0x0000fd31

00010c4c <_ZN9ClearCore10SerialBase8PortOpenEv>:
    if (!m_portOpen) {
   10c4c:	f890 2029 	ldrb.w	r2, [r0, #41]	; 0x29
   10c50:	b92a      	cbnz	r2, 10c5e <_ZN9ClearCore10SerialBase8PortOpenEv+0x12>
    if (newMode != SPI && newMode != UART) {
   10c52:	79c2      	ldrb	r2, [r0, #7]
        m_portOpen = true;
   10c54:	2101      	movs	r1, #1
    if (newMode != SPI && newMode != UART) {
   10c56:	428a      	cmp	r2, r1
        m_portOpen = true;
   10c58:	f880 1029 	strb.w	r1, [r0, #41]	; 0x29
    if (newMode != SPI && newMode != UART) {
   10c5c:	d900      	bls.n	10c60 <_ZN9ClearCore10SerialBase8PortOpenEv+0x14>
   10c5e:	4770      	bx	lr
   10c60:	f7ff bb86 	b.w	10370 <_ZN9ClearCore10SerialBase8PortModeENS0_9PortModesE.part.9>

00010c64 <_ZN9ClearCore10SerialBaseC1EPK15PeripheralRouteS3_S3_S3_h>:
SerialBase::SerialBase(const PeripheralRoute *ctsMisoInfo,
   10c64:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   10c66:	4604      	mov	r4, r0
      m_outHead(0), m_outTail(0) {
   10c68:	4f20      	ldr	r7, [pc, #128]	; (10cec <_ZN9ClearCore10SerialBaseC1EPK15PeripheralRouteS3_S3_S3_h+0x88>)
   10c6a:	6182      	str	r2, [r0, #24]
   10c6c:	61c3      	str	r3, [r0, #28]
   10c6e:	4d20      	ldr	r5, [pc, #128]	; (10cf0 <_ZN9ClearCore10SerialBaseC1EPK15PeripheralRouteS3_S3_S3_h+0x8c>)
   10c70:	60a7      	str	r7, [r4, #8]
   10c72:	9f06      	ldr	r7, [sp, #24]
   10c74:	f8df c080 	ldr.w	ip, [pc, #128]	; 10cf8 <_ZN9ClearCore10SerialBaseC1EPK15PeripheralRouteS3_S3_S3_h+0x94>
SerialBase::SerialBase(const PeripheralRoute *ctsMisoInfo,
   10c78:	f89d 001c 	ldrb.w	r0, [sp, #28]
      m_outHead(0), m_outTail(0) {
   10c7c:	6065      	str	r5, [r4, #4]
   10c7e:	2307      	movs	r3, #7
   10c80:	2500      	movs	r5, #0
SerialBase::SerialBase(const PeripheralRoute *ctsMisoInfo,
   10c82:	460e      	mov	r6, r1
      m_outHead(0), m_outTail(0) {
   10c84:	6227      	str	r7, [r4, #32]
   10c86:	f44f 5116 	mov.w	r1, #9600	; 0x2580
   10c8a:	2780      	movs	r7, #128	; 0x80
   10c8c:	f64f 72ff 	movw	r2, #65535	; 0xffff
   10c90:	f884 302e 	strb.w	r3, [r4, #46]	; 0x2e
   10c94:	f884 302f 	strb.w	r3, [r4, #47]	; 0x2f
   10c98:	f8c4 c000 	str.w	ip, [r4]
   10c9c:	6261      	str	r1, [r4, #36]	; 0x24
   10c9e:	f884 0028 	strb.w	r0, [r4, #40]	; 0x28
   10ca2:	85a2      	strh	r2, [r4, #44]	; 0x2c
   10ca4:	4629      	mov	r1, r5
   10ca6:	463a      	mov	r2, r7
   10ca8:	6166      	str	r6, [r4, #20]
   10caa:	7325      	strb	r5, [r4, #12]
   10cac:	f884 5029 	strb.w	r5, [r4, #41]	; 0x29
   10cb0:	f884 502a 	strb.w	r5, [r4, #42]	; 0x2a
   10cb4:	f104 0030 	add.w	r0, r4, #48	; 0x30
   10cb8:	f00d fba0 	bl	1e3fc <memset>
   10cbc:	463a      	mov	r2, r7
   10cbe:	4629      	mov	r1, r5
   10cc0:	f104 00b0 	add.w	r0, r4, #176	; 0xb0
   10cc4:	f00d fb9a 	bl	1e3fc <memset>
   10cc8:	f8c4 5130 	str.w	r5, [r4, #304]	; 0x130
            reg = 0;
   10ccc:	f8c4 5140 	str.w	r5, [r4, #320]	; 0x140
   10cd0:	f8c4 5134 	str.w	r5, [r4, #308]	; 0x134
   10cd4:	f8c4 5138 	str.w	r5, [r4, #312]	; 0x138
   10cd8:	f8c4 513c 	str.w	r5, [r4, #316]	; 0x13c
    m_serPort = sercom_instances[ctsMisoInfo->sercomNum];
   10cdc:	7a32      	ldrb	r2, [r6, #8]
   10cde:	4b05      	ldr	r3, [pc, #20]	; (10cf4 <_ZN9ClearCore10SerialBaseC1EPK15PeripheralRouteS3_S3_S3_h+0x90>)
   10ce0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
   10ce4:	6123      	str	r3, [r4, #16]
}
   10ce6:	4620      	mov	r0, r4
   10ce8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   10cea:	bf00      	nop
   10cec:	02000100 	.word	0x02000100
   10cf0:	00080102 	.word	0x00080102
   10cf4:	000233c4 	.word	0x000233c4
   10cf8:	0002337c 	.word	0x0002337c

00010cfc <_ZN9ClearCore10SerialBase15WaitOneCharTimeEv>:
        max(2, (SampleRateHz * 10 + m_baudRate - 1) / m_baudRate);
   10cfc:	6a43      	ldr	r3, [r0, #36]	; 0x24
    uint32_t tickVal = tickCnt;
   10cfe:	4907      	ldr	r1, [pc, #28]	; (10d1c <_ZN9ClearCore10SerialBase15WaitOneCharTimeEv+0x20>)
        max(2, (SampleRateHz * 10 + m_baudRate - 1) / m_baudRate);
   10d00:	f503 4243 	add.w	r2, r3, #49920	; 0xc300
   10d04:	324f      	adds	r2, #79	; 0x4f
    uint32_t tickVal = tickCnt;
   10d06:	6808      	ldr	r0, [r1, #0]
        max(2, (SampleRateHz * 10 + m_baudRate - 1) / m_baudRate);
   10d08:	fbb2 f2f3 	udiv	r2, r2, r3
   10d0c:	2a02      	cmp	r2, #2
   10d0e:	bf38      	it	cc
   10d10:	2202      	movcc	r2, #2
    while (tickCnt - tickVal < ticksNeeded) {
   10d12:	680b      	ldr	r3, [r1, #0]
   10d14:	1a1b      	subs	r3, r3, r0
   10d16:	429a      	cmp	r2, r3
   10d18:	d8fb      	bhi.n	10d12 <_ZN9ClearCore10SerialBase15WaitOneCharTimeEv+0x16>
}
   10d1a:	4770      	bx	lr
   10d1c:	20001be8 	.word	0x20001be8

00010d20 <_ZN9ClearCore10SerialBase8PortModeENS0_9PortModesE>:
    if (newMode != SPI && newMode != UART) {
   10d20:	2901      	cmp	r1, #1
   10d22:	d901      	bls.n	10d28 <_ZN9ClearCore10SerialBase8PortModeENS0_9PortModesE+0x8>
        return false;
   10d24:	2000      	movs	r0, #0
   10d26:	4770      	bx	lr
    if (!m_portOpen) {
   10d28:	f890 2029 	ldrb.w	r2, [r0, #41]	; 0x29
    m_portMode = newMode;
   10d2c:	71c1      	strb	r1, [r0, #7]
    if (!m_portOpen) {
   10d2e:	b10a      	cbz	r2, 10d34 <_ZN9ClearCore10SerialBase8PortModeENS0_9PortModesE+0x14>
   10d30:	f7ff bb1e 	b.w	10370 <_ZN9ClearCore10SerialBase8PortModeENS0_9PortModesE.part.9>
        return true;
   10d34:	2001      	movs	r0, #1
}
   10d36:	4770      	bx	lr

00010d38 <_ZN9ClearCore10SerialBase9SpiSsModeENS0_13CtrlLineModesE>:
    switch (mode) {
   10d38:	2901      	cmp	r1, #1
    m_ssMode = mode;
   10d3a:	7281      	strb	r1, [r0, #10]
    switch (mode) {
   10d3c:	d914      	bls.n	10d68 <_ZN9ClearCore10SerialBase9SpiSsModeENS0_13CtrlLineModesE+0x30>
   10d3e:	2902      	cmp	r1, #2
   10d40:	d110      	bne.n	10d64 <_ZN9ClearCore10SerialBase9SpiSsModeENS0_13CtrlLineModesE+0x2c>
            PMUX_ENABLE(m_rtsSsInfo->gpioPort, m_rtsSsInfo->gpioPin);
   10d42:	6982      	ldr	r2, [r0, #24]
   10d44:	f992 1001 	ldrsb.w	r1, [r2, #1]
   10d48:	7893      	ldrb	r3, [r2, #2]
   10d4a:	eb03 13c1 	add.w	r3, r3, r1, lsl #7
   10d4e:	f103 4382 	add.w	r3, r3, #1090519040	; 0x41000000
   10d52:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
    bool success = true;
   10d56:	2001      	movs	r0, #1
            PMUX_ENABLE(m_rtsSsInfo->gpioPort, m_rtsSsInfo->gpioPin);
   10d58:	f893 2040 	ldrb.w	r2, [r3, #64]	; 0x40
   10d5c:	4302      	orrs	r2, r0
   10d5e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
   10d62:	4770      	bx	lr
            success = false;
   10d64:	2000      	movs	r0, #0
}
   10d66:	4770      	bx	lr
            DATA_OUTPUT_STATE(m_rtsSsInfo->gpioPort,
   10d68:	6982      	ldr	r2, [r0, #24]
   10d6a:	f992 3001 	ldrsb.w	r3, [r2, #1]
   10d6e:	7892      	ldrb	r2, [r2, #2]
   10d70:	01db      	lsls	r3, r3, #7
   10d72:	b199      	cbz	r1, 10d9c <_ZN9ClearCore10SerialBase9SpiSsModeENS0_13CtrlLineModesE+0x64>
   10d74:	f103 4182 	add.w	r1, r3, #1090519040	; 0x41000000
   10d78:	f501 4100 	add.w	r1, r1, #32768	; 0x8000
   10d7c:	2001      	movs	r0, #1
   10d7e:	4090      	lsls	r0, r2
   10d80:	6148      	str	r0, [r1, #20]
            PMUX_DISABLE(m_rtsSsInfo->gpioPort, m_rtsSsInfo->gpioPin);
   10d82:	f103 4382 	add.w	r3, r3, #1090519040	; 0x41000000
   10d86:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
   10d8a:	4413      	add	r3, r2
   10d8c:	2001      	movs	r0, #1
   10d8e:	f893 2040 	ldrb.w	r2, [r3, #64]	; 0x40
   10d92:	f36f 0200 	bfc	r2, #0, #1
   10d96:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
   10d9a:	4770      	bx	lr
            DATA_OUTPUT_STATE(m_rtsSsInfo->gpioPort,
   10d9c:	f103 4182 	add.w	r1, r3, #1090519040	; 0x41000000
   10da0:	f501 4100 	add.w	r1, r1, #32768	; 0x8000
   10da4:	2001      	movs	r0, #1
   10da6:	4090      	lsls	r0, r2
   10da8:	6188      	str	r0, [r1, #24]
   10daa:	e7ea      	b.n	10d82 <_ZN9ClearCore10SerialBase9SpiSsModeENS0_13CtrlLineModesE+0x4a>

00010dac <_ZN9ClearCore10SerialBase8SpiClockENS0_18SpiClockPolaritiesENS0_14SpiClockPhasesE>:
    SpiClockPolarities polarity, SpiClockPhases phase) {
   10dac:	b538      	push	{r3, r4, r5, lr}
    if (m_portMode != PortModes::SPI) {
   10dae:	79c3      	ldrb	r3, [r0, #7]
    m_polarity = polarity;
   10db0:	7201      	strb	r1, [r0, #8]
    if (m_portMode != PortModes::SPI) {
   10db2:	2b01      	cmp	r3, #1
    m_phase = phase;
   10db4:	7242      	strb	r2, [r0, #9]
    if (m_portMode != PortModes::SPI) {
   10db6:	d000      	beq.n	10dba <_ZN9ClearCore10SerialBase8SpiClockENS0_18SpiClockPolaritiesENS0_14SpiClockPhasesE+0xe>
   10db8:	bd38      	pop	{r3, r4, r5, pc}
    PMUX_DISABLE(m_txMosiInfo->gpioPort, m_txMosiInfo->gpioPin);
   10dba:	6a01      	ldr	r1, [r0, #32]
    bool sercomEnabled = m_serPort->USART.CTRLA.bit.ENABLE;
   10dbc:	6902      	ldr	r2, [r0, #16]
    PMUX_DISABLE(m_txMosiInfo->gpioPort, m_txMosiInfo->gpioPin);
   10dbe:	f991 4001 	ldrsb.w	r4, [r1, #1]
   10dc2:	788b      	ldrb	r3, [r1, #2]
    bool sercomEnabled = m_serPort->USART.CTRLA.bit.ENABLE;
   10dc4:	6815      	ldr	r5, [r2, #0]
    PMUX_DISABLE(m_txMosiInfo->gpioPort, m_txMosiInfo->gpioPin);
   10dc6:	eb03 13c4 	add.w	r3, r3, r4, lsl #7
   10dca:	f103 4382 	add.w	r3, r3, #1090519040	; 0x41000000
   10dce:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
    bool sercomEnabled = m_serPort->USART.CTRLA.bit.ENABLE;
   10dd2:	f3c5 0540 	ubfx	r5, r5, #1, #1
    PMUX_DISABLE(m_txMosiInfo->gpioPort, m_txMosiInfo->gpioPin);
   10dd6:	f893 1040 	ldrb.w	r1, [r3, #64]	; 0x40
   10dda:	f36f 0100 	bfc	r1, #0, #1
   10dde:	f883 1040 	strb.w	r1, [r3, #64]	; 0x40
    if (m_serPort->USART.CTRLA.bit.ENABLE) {
   10de2:	6813      	ldr	r3, [r2, #0]
   10de4:	0799      	lsls	r1, r3, #30
   10de6:	d503      	bpl.n	10df0 <_ZN9ClearCore10SerialBase8SpiClockENS0_18SpiClockPolaritiesENS0_14SpiClockPhasesE+0x44>
        m_serPort->USART.CTRLA.bit.ENABLE = 0;
   10de8:	6813      	ldr	r3, [r2, #0]
   10dea:	f36f 0341 	bfc	r3, #1, #1
   10dee:	6013      	str	r3, [r2, #0]
    SYNCBUSY_WAIT(usart, SERCOM_USART_SYNCBUSY_ENABLE);
   10df0:	69d3      	ldr	r3, [r2, #28]
   10df2:	f013 0302 	ands.w	r3, r3, #2
   10df6:	d1fb      	bne.n	10df0 <_ZN9ClearCore10SerialBase8SpiClockENS0_18SpiClockPolaritiesENS0_14SpiClockPhasesE+0x44>
    Flush();
   10df8:	6802      	ldr	r2, [r0, #0]
   10dfa:	4604      	mov	r4, r0
   10dfc:	6811      	ldr	r1, [r2, #0]
   10dfe:	4821      	ldr	r0, [pc, #132]	; (10e84 <_ZN9ClearCore10SerialBase8SpiClockENS0_18SpiClockPolaritiesENS0_14SpiClockPhasesE+0xd8>)
   10e00:	4281      	cmp	r1, r0
   10e02:	d136      	bne.n	10e72 <_ZN9ClearCore10SerialBase8SpiClockENS0_18SpiClockPolaritiesENS0_14SpiClockPhasesE+0xc6>
    m_outTail = 0;
   10e04:	f8c4 313c 	str.w	r3, [r4, #316]	; 0x13c
    m_bufferOut[0] = 0;
   10e08:	f8a4 30b0 	strh.w	r3, [r4, #176]	; 0xb0
    m_outHead = 0;
   10e0c:	f8c4 3138 	str.w	r3, [r4, #312]	; 0x138
    FlushInput();
   10e10:	6853      	ldr	r3, [r2, #4]
   10e12:	4a1d      	ldr	r2, [pc, #116]	; (10e88 <_ZN9ClearCore10SerialBase8SpiClockENS0_18SpiClockPolaritiesENS0_14SpiClockPhasesE+0xdc>)
   10e14:	4293      	cmp	r3, r2
   10e16:	d130      	bne.n	10e7a <_ZN9ClearCore10SerialBase8SpiClockENS0_18SpiClockPolaritiesENS0_14SpiClockPhasesE+0xce>
    m_serPort->USART.INTENSET.reg = SERCOM_USART_INTENSET_RXC;
   10e18:	6923      	ldr	r3, [r4, #16]
    m_bufferIn[0] = 0;
   10e1a:	2200      	movs	r2, #0
    m_serPort->USART.INTENSET.reg = SERCOM_USART_INTENSET_RXC;
   10e1c:	2104      	movs	r1, #4
    m_inTail = 0;
   10e1e:	f8c4 2134 	str.w	r2, [r4, #308]	; 0x134
    m_bufferIn[0] = 0;
   10e22:	8622      	strh	r2, [r4, #48]	; 0x30
    m_inHead = 0;
   10e24:	f8c4 2130 	str.w	r2, [r4, #304]	; 0x130
    m_serPort->USART.INTENSET.reg = SERCOM_USART_INTENSET_RXC;
   10e28:	7599      	strb	r1, [r3, #22]
    m_serPort->SPI.CTRLA.bit.CPOL = m_polarity;
   10e2a:	7a21      	ldrb	r1, [r4, #8]
   10e2c:	681a      	ldr	r2, [r3, #0]
   10e2e:	f361 725d 	bfi	r2, r1, #29, #1
   10e32:	601a      	str	r2, [r3, #0]
    m_serPort->SPI.CTRLA.bit.CPHA = m_phase;
   10e34:	7a61      	ldrb	r1, [r4, #9]
   10e36:	681a      	ldr	r2, [r3, #0]
   10e38:	f361 721c 	bfi	r2, r1, #28, #1
   10e3c:	601a      	str	r2, [r3, #0]
    if (sercomEnabled) {
   10e3e:	2d00      	cmp	r5, #0
   10e40:	d0ba      	beq.n	10db8 <_ZN9ClearCore10SerialBase8SpiClockENS0_18SpiClockPolaritiesENS0_14SpiClockPhasesE+0xc>
    m_serPort->USART.CTRLA.bit.ENABLE = 1;
   10e42:	681a      	ldr	r2, [r3, #0]
   10e44:	f042 0202 	orr.w	r2, r2, #2
   10e48:	601a      	str	r2, [r3, #0]
    SYNCBUSY_WAIT(usart, SERCOM_USART_SYNCBUSY_ENABLE);
   10e4a:	69da      	ldr	r2, [r3, #28]
   10e4c:	0792      	lsls	r2, r2, #30
   10e4e:	d4fc      	bmi.n	10e4a <_ZN9ClearCore10SerialBase8SpiClockENS0_18SpiClockPolaritiesENS0_14SpiClockPhasesE+0x9e>
        PMUX_ENABLE(m_txMosiInfo->gpioPort, m_txMosiInfo->gpioPin);
   10e50:	6a22      	ldr	r2, [r4, #32]
   10e52:	f992 1001 	ldrsb.w	r1, [r2, #1]
   10e56:	7893      	ldrb	r3, [r2, #2]
   10e58:	eb03 13c1 	add.w	r3, r3, r1, lsl #7
   10e5c:	f103 4382 	add.w	r3, r3, #1090519040	; 0x41000000
   10e60:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
   10e64:	f893 2040 	ldrb.w	r2, [r3, #64]	; 0x40
   10e68:	f042 0201 	orr.w	r2, r2, #1
   10e6c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
   10e70:	bd38      	pop	{r3, r4, r5, pc}
    Flush();
   10e72:	4620      	mov	r0, r4
   10e74:	4788      	blx	r1
   10e76:	6822      	ldr	r2, [r4, #0]
   10e78:	e7ca      	b.n	10e10 <_ZN9ClearCore10SerialBase8SpiClockENS0_18SpiClockPolaritiesENS0_14SpiClockPhasesE+0x64>
    FlushInput();
   10e7a:	4620      	mov	r0, r4
   10e7c:	4798      	blx	r3
   10e7e:	6923      	ldr	r3, [r4, #16]
   10e80:	e7d3      	b.n	10e2a <_ZN9ClearCore10SerialBase8SpiClockENS0_18SpiClockPolaritiesENS0_14SpiClockPhasesE+0x7e>
   10e82:	bf00      	nop
   10e84:	0000fd21 	.word	0x0000fd21
   10e88:	0000fd31 	.word	0x0000fd31

00010e8c <_ZN9ClearCore10SerialBase15SpiTransferDataEPKhPhl>:
    uint8_t const *writeBuf, uint8_t *readBuf, int32_t len) {
   10e8c:	b470      	push	{r4, r5, r6}
   10e8e:	4604      	mov	r4, r0
    if (!m_portOpen || m_portMode != SPI) {
   10e90:	f890 0029 	ldrb.w	r0, [r0, #41]	; 0x29
   10e94:	b120      	cbz	r0, 10ea0 <_ZN9ClearCore10SerialBase15SpiTransferDataEPKhPhl+0x14>
   10e96:	79e0      	ldrb	r0, [r4, #7]
   10e98:	2801      	cmp	r0, #1
        return 0;
   10e9a:	f04f 0000 	mov.w	r0, #0
    if (!m_portOpen || m_portMode != SPI) {
   10e9e:	d001      	beq.n	10ea4 <_ZN9ClearCore10SerialBase15SpiTransferDataEPKhPhl+0x18>
}
   10ea0:	bc70      	pop	{r4, r5, r6}
   10ea2:	4770      	bx	lr
    for (iChar = 0; iChar < len; iChar++) {
   10ea4:	2b00      	cmp	r3, #0
   10ea6:	ddfb      	ble.n	10ea0 <_ZN9ClearCore10SerialBase15SpiTransferDataEPKhPhl+0x14>
        m_serPort->SPI.DATA.bit.DATA = writeBuf ? *writeBuf++ : 0;
   10ea8:	6925      	ldr	r5, [r4, #16]
   10eaa:	b1b9      	cbz	r1, 10edc <_ZN9ClearCore10SerialBase15SpiTransferDataEPKhPhl+0x50>
   10eac:	1c4e      	adds	r6, r1, #1
   10eae:	7809      	ldrb	r1, [r1, #0]
   10eb0:	62a9      	str	r1, [r5, #40]	; 0x28
   10eb2:	e003      	b.n	10ebc <_ZN9ClearCore10SerialBase15SpiTransferDataEPKhPhl+0x30>
            if (!m_portOpen) {
   10eb4:	f894 1029 	ldrb.w	r1, [r4, #41]	; 0x29
   10eb8:	2900      	cmp	r1, #0
   10eba:	d0f1      	beq.n	10ea0 <_ZN9ClearCore10SerialBase15SpiTransferDataEPKhPhl+0x14>
        while (!m_serPort->SPI.INTFLAG.bit.RXC ||
   10ebc:	7e29      	ldrb	r1, [r5, #24]
   10ebe:	0749      	lsls	r1, r1, #29
   10ec0:	d5f8      	bpl.n	10eb4 <_ZN9ClearCore10SerialBase15SpiTransferDataEPKhPhl+0x28>
                !m_serPort->SPI.INTFLAG.bit.TXC) {
   10ec2:	7e29      	ldrb	r1, [r5, #24]
        while (!m_serPort->SPI.INTFLAG.bit.RXC ||
   10ec4:	0789      	lsls	r1, r1, #30
   10ec6:	d5f5      	bpl.n	10eb4 <_ZN9ClearCore10SerialBase15SpiTransferDataEPKhPhl+0x28>
        if (readBuf) {
   10ec8:	b152      	cbz	r2, 10ee0 <_ZN9ClearCore10SerialBase15SpiTransferDataEPKhPhl+0x54>
    for (iChar = 0; iChar < len; iChar++) {
   10eca:	3001      	adds	r0, #1
            *readBuf++ = m_serPort->SPI.DATA.bit.DATA;
   10ecc:	6aa9      	ldr	r1, [r5, #40]	; 0x28
   10ece:	7011      	strb	r1, [r2, #0]
    for (iChar = 0; iChar < len; iChar++) {
   10ed0:	4298      	cmp	r0, r3
            *readBuf++ = m_serPort->SPI.DATA.bit.DATA;
   10ed2:	f102 0201 	add.w	r2, r2, #1
    for (iChar = 0; iChar < len; iChar++) {
   10ed6:	d007      	beq.n	10ee8 <_ZN9ClearCore10SerialBase15SpiTransferDataEPKhPhl+0x5c>
   10ed8:	4631      	mov	r1, r6
   10eda:	e7e5      	b.n	10ea8 <_ZN9ClearCore10SerialBase15SpiTransferDataEPKhPhl+0x1c>
   10edc:	460e      	mov	r6, r1
   10ede:	e7e7      	b.n	10eb0 <_ZN9ClearCore10SerialBase15SpiTransferDataEPKhPhl+0x24>
   10ee0:	3001      	adds	r0, #1
   10ee2:	4283      	cmp	r3, r0
            (void)m_serPort->SPI.DATA.bit.DATA;
   10ee4:	6aa9      	ldr	r1, [r5, #40]	; 0x28
    for (iChar = 0; iChar < len; iChar++) {
   10ee6:	d1f7      	bne.n	10ed8 <_ZN9ClearCore10SerialBase15SpiTransferDataEPKhPhl+0x4c>
        return 0;
   10ee8:	4618      	mov	r0, r3
   10eea:	e7d9      	b.n	10ea0 <_ZN9ClearCore10SerialBase15SpiTransferDataEPKhPhl+0x14>

00010eec <_ZN9ClearCore10SerialBase20SpiTransferDataAsyncEPKhPhl>:
    uint8_t const *writeBuf, uint8_t *readBuf, int32_t len) {
   10eec:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    if (!m_portOpen || m_portMode != SPI) {
   10ef0:	f890 5029 	ldrb.w	r5, [r0, #41]	; 0x29
   10ef4:	b12d      	cbz	r5, 10f02 <_ZN9ClearCore10SerialBase20SpiTransferDataAsyncEPKhPhl+0x16>
   10ef6:	f890 8007 	ldrb.w	r8, [r0, #7]
   10efa:	f1b8 0f01 	cmp.w	r8, #1
   10efe:	d003      	beq.n	10f08 <_ZN9ClearCore10SerialBase20SpiTransferDataAsyncEPKhPhl+0x1c>
        return false;
   10f00:	2500      	movs	r5, #0
}
   10f02:	4628      	mov	r0, r5
   10f04:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    if (m_dmaRxChannel == DMA_INVALID_CHANNEL ||
   10f08:	f890 e02e 	ldrb.w	lr, [r0, #46]	; 0x2e
   10f0c:	f1be 0f07 	cmp.w	lr, #7
   10f10:	d0f6      	beq.n	10f00 <_ZN9ClearCore10SerialBase20SpiTransferDataAsyncEPKhPhl+0x14>
   10f12:	f890 402f 	ldrb.w	r4, [r0, #47]	; 0x2f
   10f16:	2c07      	cmp	r4, #7
   10f18:	d0f2      	beq.n	10f00 <_ZN9ClearCore10SerialBase20SpiTransferDataAsyncEPKhPhl+0x14>
   10f1a:	4616      	mov	r6, r2
   10f1c:	4604      	mov	r4, r0
    baseDesc = DmaManager::BaseDescriptor(m_dmaRxChannel);
   10f1e:	4670      	mov	r0, lr
   10f20:	461f      	mov	r7, r3
   10f22:	4689      	mov	r9, r1
   10f24:	f7fd ff60 	bl	ede8 <_ZN9ClearCore10DmaManager14BaseDescriptorENS_11DmaChannelsE>
    if (readBuf) {
   10f28:	b336      	cbz	r6, 10f78 <_ZN9ClearCore10SerialBase20SpiTransferDataAsyncEPKhPhl+0x8c>
        baseDesc->DSTADDR.reg = (uint32_t)(readBuf + len);
   10f2a:	443e      	add	r6, r7
        baseDesc->BTCTRL.reg =
   10f2c:	f640 0301 	movw	r3, #2049	; 0x801
        baseDesc->DSTADDR.reg = (uint32_t)(readBuf + len);
   10f30:	6086      	str	r6, [r0, #8]
        baseDesc->BTCTRL.reg =
   10f32:	8003      	strh	r3, [r0, #0]
    baseDesc->BTCNT.reg = len;
   10f34:	b2be      	uxth	r6, r7
   10f36:	8046      	strh	r6, [r0, #2]
    DmaManager::Channel(m_dmaRxChannel)->CHCTRLA.reg |= DMAC_CHCTRLA_ENABLE;
   10f38:	f894 002e 	ldrb.w	r0, [r4, #46]	; 0x2e
   10f3c:	f7fd ff4a 	bl	edd4 <_ZN9ClearCore10DmaManager7ChannelENS_11DmaChannelsE>
   10f40:	6803      	ldr	r3, [r0, #0]
   10f42:	f043 0302 	orr.w	r3, r3, #2
   10f46:	6003      	str	r3, [r0, #0]
    baseDesc = DmaManager::BaseDescriptor(m_dmaTxChannel);
   10f48:	f894 002f 	ldrb.w	r0, [r4, #47]	; 0x2f
   10f4c:	f7fd ff4c 	bl	ede8 <_ZN9ClearCore10DmaManager14BaseDescriptorENS_11DmaChannelsE>
    if (writeBuf) {
   10f50:	f1b9 0f00 	cmp.w	r9, #0
   10f54:	d015      	beq.n	10f82 <_ZN9ClearCore10SerialBase20SpiTransferDataAsyncEPKhPhl+0x96>
        baseDesc->SRCADDR.reg = (uint32_t)(writeBuf + len);
   10f56:	444f      	add	r7, r9
        baseDesc->BTCTRL.reg =
   10f58:	f240 4301 	movw	r3, #1025	; 0x401
        baseDesc->SRCADDR.reg = (uint32_t)(writeBuf + len);
   10f5c:	6047      	str	r7, [r0, #4]
        baseDesc->BTCTRL.reg =
   10f5e:	8003      	strh	r3, [r0, #0]
    baseDesc->BTCNT.reg = len;
   10f60:	8046      	strh	r6, [r0, #2]
    DmaManager::Channel(m_dmaTxChannel)->CHCTRLA.reg |= DMAC_CHCTRLA_ENABLE;
   10f62:	f894 002f 	ldrb.w	r0, [r4, #47]	; 0x2f
   10f66:	f7fd ff35 	bl	edd4 <_ZN9ClearCore10DmaManager7ChannelENS_11DmaChannelsE>
   10f6a:	6803      	ldr	r3, [r0, #0]
   10f6c:	f043 0302 	orr.w	r3, r3, #2
   10f70:	6003      	str	r3, [r0, #0]
}
   10f72:	4628      	mov	r0, r5
   10f74:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
        baseDesc->DSTADDR.reg = (uint32_t)&spiDummy;
   10f78:	4b04      	ldr	r3, [pc, #16]	; (10f8c <_ZN9ClearCore10SerialBase20SpiTransferDataAsyncEPKhPhl+0xa0>)
   10f7a:	6083      	str	r3, [r0, #8]
        baseDesc->BTCTRL.reg = DMAC_BTCTRL_BEATSIZE_BYTE | DMAC_BTCTRL_VALID;
   10f7c:	f8a0 8000 	strh.w	r8, [r0]
   10f80:	e7d8      	b.n	10f34 <_ZN9ClearCore10SerialBase20SpiTransferDataAsyncEPKhPhl+0x48>
        baseDesc->SRCADDR.reg = (uint32_t)&spiDummy;
   10f82:	4b02      	ldr	r3, [pc, #8]	; (10f8c <_ZN9ClearCore10SerialBase20SpiTransferDataAsyncEPKhPhl+0xa0>)
   10f84:	6043      	str	r3, [r0, #4]
        baseDesc->BTCTRL.reg = DMAC_BTCTRL_BEATSIZE_BYTE | DMAC_BTCTRL_VALID;
   10f86:	2301      	movs	r3, #1
   10f88:	8003      	strh	r3, [r0, #0]
   10f8a:	e7e9      	b.n	10f60 <_ZN9ClearCore10SerialBase20SpiTransferDataAsyncEPKhPhl+0x74>
   10f8c:	20001f04 	.word	0x20001f04

00010f90 <_ZN9ClearCore10SerialBase20SpiAsyncWaitCompleteEv>:
    if (m_dmaRxChannel == DMA_INVALID_CHANNEL ||
   10f90:	f890 302e 	ldrb.w	r3, [r0, #46]	; 0x2e
   10f94:	2b07      	cmp	r3, #7
   10f96:	d016      	beq.n	10fc6 <_ZN9ClearCore10SerialBase20SpiAsyncWaitCompleteEv+0x36>
   10f98:	f890 302f 	ldrb.w	r3, [r0, #47]	; 0x2f
   10f9c:	2b07      	cmp	r3, #7
bool SerialBase::SpiAsyncWaitComplete() {
   10f9e:	b510      	push	{r4, lr}
   10fa0:	4604      	mov	r4, r0
    if (m_dmaRxChannel == DMA_INVALID_CHANNEL ||
   10fa2:	d005      	beq.n	10fb0 <_ZN9ClearCore10SerialBase20SpiAsyncWaitCompleteEv+0x20>
    while (m_portOpen && m_portMode == SPI &&
   10fa4:	f894 3029 	ldrb.w	r3, [r4, #41]	; 0x29
   10fa8:	b113      	cbz	r3, 10fb0 <_ZN9ClearCore10SerialBase20SpiAsyncWaitCompleteEv+0x20>
   10faa:	79e3      	ldrb	r3, [r4, #7]
   10fac:	2b01      	cmp	r3, #1
   10fae:	d001      	beq.n	10fb4 <_ZN9ClearCore10SerialBase20SpiAsyncWaitCompleteEv+0x24>
}
   10fb0:	2001      	movs	r0, #1
   10fb2:	bd10      	pop	{r4, pc}
            DmaManager::Channel(m_dmaRxChannel)->CHCTRLA.bit.ENABLE) {
   10fb4:	f894 002e 	ldrb.w	r0, [r4, #46]	; 0x2e
   10fb8:	f7fd ff0c 	bl	edd4 <_ZN9ClearCore10DmaManager7ChannelENS_11DmaChannelsE>
   10fbc:	6803      	ldr	r3, [r0, #0]
    while (m_portOpen && m_portMode == SPI &&
   10fbe:	079b      	lsls	r3, r3, #30
   10fc0:	d4f0      	bmi.n	10fa4 <_ZN9ClearCore10SerialBase20SpiAsyncWaitCompleteEv+0x14>
}
   10fc2:	2001      	movs	r0, #1
   10fc4:	bd10      	pop	{r4, pc}
   10fc6:	2001      	movs	r0, #1
   10fc8:	4770      	bx	lr
   10fca:	bf00      	nop

00010fcc <_ZN9ClearCore10SerialBase12IrqHandlerTxEv>:
    The TX data service interrupt handler.

    This should be called by SERCOMx_0 Interrupt Vector.
**/
void SerialBase::IrqHandlerTx() {
    switch (m_portMode) {
   10fcc:	79c3      	ldrb	r3, [r0, #7]
   10fce:	2b01      	cmp	r3, #1
   10fd0:	d022      	beq.n	11018 <_ZN9ClearCore10SerialBase12IrqHandlerTxEv+0x4c>
    while (m_outHead != m_outTail) {
   10fd2:	f8d0 2138 	ldr.w	r2, [r0, #312]	; 0x138
   10fd6:	f8d0 313c 	ldr.w	r3, [r0, #316]	; 0x13c
        if (!m_serPort->USART.INTFLAG.bit.DRE) {
   10fda:	6901      	ldr	r1, [r0, #16]
    while (m_outHead != m_outTail) {
   10fdc:	429a      	cmp	r2, r3
   10fde:	d019      	beq.n	11014 <_ZN9ClearCore10SerialBase12IrqHandlerTxEv+0x48>
        if (!m_serPort->USART.INTFLAG.bit.DRE) {
   10fe0:	7e0b      	ldrb	r3, [r1, #24]
   10fe2:	07da      	lsls	r2, r3, #31
   10fe4:	d403      	bmi.n	10fee <_ZN9ClearCore10SerialBase12IrqHandlerTxEv+0x22>
   10fe6:	e018      	b.n	1101a <_ZN9ClearCore10SerialBase12IrqHandlerTxEv+0x4e>
   10fe8:	7e0b      	ldrb	r3, [r1, #24]
   10fea:	07db      	lsls	r3, r3, #31
   10fec:	d514      	bpl.n	11018 <_ZN9ClearCore10SerialBase12IrqHandlerTxEv+0x4c>
        int32_t nextIndex = NextIndex(m_outHead);
   10fee:	f8d0 3138 	ldr.w	r3, [r0, #312]	; 0x138
        m_serPort->USART.DATA.bit.DATA = m_bufferOut[m_outHead];
   10ff2:	f8d0 2138 	ldr.w	r2, [r0, #312]	; 0x138
   10ff6:	3258      	adds	r2, #88	; 0x58
        return ((currentIndex + 1) & (SERIAL_BUFFER_SIZE - 1));
   10ff8:	3301      	adds	r3, #1
   10ffa:	f930 2012 	ldrsh.w	r2, [r0, r2, lsl #1]
   10ffe:	628a      	str	r2, [r1, #40]	; 0x28
   11000:	f003 033f 	and.w	r3, r3, #63	; 0x3f
        m_outHead = nextIndex;
   11004:	f8c0 3138 	str.w	r3, [r0, #312]	; 0x138
    while (m_outHead != m_outTail) {
   11008:	f8d0 2138 	ldr.w	r2, [r0, #312]	; 0x138
   1100c:	f8d0 313c 	ldr.w	r3, [r0, #316]	; 0x13c
   11010:	429a      	cmp	r2, r3
   11012:	d1e9      	bne.n	10fe8 <_ZN9ClearCore10SerialBase12IrqHandlerTxEv+0x1c>
    m_serPort->USART.INTENCLR.reg = SERCOM_USART_INTENCLR_DRE;
   11014:	2301      	movs	r3, #1
   11016:	750b      	strb	r3, [r1, #20]
   11018:	4770      	bx	lr
   1101a:	4770      	bx	lr

0001101c <_ZN9ClearCore10SerialBase12IrqHandlerRxEv>:
    Interrupt handler for the RX data service.

    This should be called by SERCOMx_2 Interrupt Vector.
**/
void SerialBase::IrqHandlerRx() {
    switch (m_portMode) {
   1101c:	79c3      	ldrb	r3, [r0, #7]
   1101e:	2b01      	cmp	r3, #1
   11020:	d100      	bne.n	11024 <_ZN9ClearCore10SerialBase12IrqHandlerRxEv+0x8>
        case UART:
        default:
            RxProc();
            break;
    }
}
   11022:	4770      	bx	lr
void SerialBase::IrqHandlerRx() {
   11024:	b410      	push	{r4}
    if (m_serPort->USART.RXERRCNT.reg != 0) {
   11026:	6901      	ldr	r1, [r0, #16]
   11028:	f891 3020 	ldrb.w	r3, [r1, #32]
   1102c:	b303      	cbz	r3, 11070 <_ZN9ClearCore10SerialBase12IrqHandlerRxEv+0x54>
        m_inTail = 0;
   1102e:	2300      	movs	r3, #0
   11030:	f8c0 3134 	str.w	r3, [r0, #308]	; 0x134
        m_inHead = 0;
   11034:	f8c0 3130 	str.w	r3, [r0, #304]	; 0x130
        m_bufferIn[m_inTail++] = SerialBase::BREAK_DETECTED;
   11038:	f8d0 3134 	ldr.w	r3, [r0, #308]	; 0x134
   1103c:	f103 0218 	add.w	r2, r3, #24
   11040:	f64b 54bd 	movw	r4, #48573	; 0xbdbd
   11044:	3301      	adds	r3, #1
   11046:	f8c0 3134 	str.w	r3, [r0, #308]	; 0x134
   1104a:	f820 4012 	strh.w	r4, [r0, r2, lsl #1]
        m_serPort->USART.INTFLAG.bit.ERROR = 1;
   1104e:	7e0b      	ldrb	r3, [r1, #24]
   11050:	f043 0380 	orr.w	r3, r3, #128	; 0x80
   11054:	760b      	strb	r3, [r1, #24]
   11056:	e00b      	b.n	11070 <_ZN9ClearCore10SerialBase12IrqHandlerRxEv+0x54>
    while (m_serPort->USART.INTFLAG.bit.RXC && nextIndex != m_inHead) {
   11058:	f8d0 2130 	ldr.w	r2, [r0, #304]	; 0x130
   1105c:	429a      	cmp	r2, r3
   1105e:	d00f      	beq.n	11080 <_ZN9ClearCore10SerialBase12IrqHandlerRxEv+0x64>
        m_bufferIn[m_inTail] = m_serPort->USART.DATA.bit.DATA;
   11060:	f8d0 2134 	ldr.w	r2, [r0, #308]	; 0x134
   11064:	6a8c      	ldr	r4, [r1, #40]	; 0x28
   11066:	3218      	adds	r2, #24
   11068:	f820 4012 	strh.w	r4, [r0, r2, lsl #1]
        m_inTail = nextIndex;
   1106c:	f8c0 3134 	str.w	r3, [r0, #308]	; 0x134
        nextIndex = NextIndex(m_inTail);
   11070:	f8d0 3134 	ldr.w	r3, [r0, #308]	; 0x134
    while (m_serPort->USART.INTFLAG.bit.RXC && nextIndex != m_inHead) {
   11074:	7e0a      	ldrb	r2, [r1, #24]
   11076:	3301      	adds	r3, #1
   11078:	0752      	lsls	r2, r2, #29
   1107a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
   1107e:	d4eb      	bmi.n	11058 <_ZN9ClearCore10SerialBase12IrqHandlerRxEv+0x3c>
    if (nextIndex == m_inHead) {
   11080:	f8d0 2130 	ldr.w	r2, [r0, #304]	; 0x130
   11084:	429a      	cmp	r2, r3
   11086:	d002      	beq.n	1108e <_ZN9ClearCore10SerialBase12IrqHandlerRxEv+0x72>
}
   11088:	f85d 4b04 	ldr.w	r4, [sp], #4
   1108c:	4770      	bx	lr
    m_serPort->USART.INTENCLR.reg = SERCOM_USART_INTENCLR_RXC;
   1108e:	2304      	movs	r3, #4
   11090:	750b      	strb	r3, [r1, #20]
}
   11092:	e7f9      	b.n	11088 <_ZN9ClearCore10SerialBase12IrqHandlerRxEv+0x6c>

00011094 <_ZN9ClearCore10SerialBase19IrqHandlerExceptionEv>:
    Interrupt handler for any serial port exceptions.

    Should be called by SERCOMx_3 Interrupt Vector.
**/
void SerialBase::IrqHandlerException() {
    switch (m_portMode) {
   11094:	79c3      	ldrb	r3, [r0, #7]
   11096:	2b01      	cmp	r3, #1
        case SPI:
            // This should not occur, but clear the interrupt flags to be safe.
            m_serPort->USART.INTFLAG.reg = SERCOM_USART_INTFLAG_ERROR;
   11098:	6903      	ldr	r3, [r0, #16]
    switch (m_portMode) {
   1109a:	d022      	beq.n	110e2 <_ZN9ClearCore10SerialBase19IrqHandlerExceptionEv+0x4e>
            break;
        case UART:
        default:
            if (m_serPort->USART.INTFLAG.bit.ERROR) {
   1109c:	7e1a      	ldrb	r2, [r3, #24]
   1109e:	09d2      	lsrs	r2, r2, #7
   110a0:	d01e      	beq.n	110e0 <_ZN9ClearCore10SerialBase19IrqHandlerExceptionEv+0x4c>
                // Clear the interrupt flag
                m_serPort->USART.INTFLAG.reg = SERCOM_USART_INTFLAG_ERROR;
   110a2:	2280      	movs	r2, #128	; 0x80
   110a4:	761a      	strb	r2, [r3, #24]
    if (m_serPort->USART.STATUS.bit.FERR) {
   110a6:	8b5a      	ldrh	r2, [r3, #26]
   110a8:	0792      	lsls	r2, r2, #30
   110aa:	d509      	bpl.n	110c0 <_ZN9ClearCore10SerialBase19IrqHandlerExceptionEv+0x2c>
        m_serPort->USART.STATUS.bit.FERR = 1;
   110ac:	8b5a      	ldrh	r2, [r3, #26]
   110ae:	f042 0202 	orr.w	r2, r2, #2
   110b2:	835a      	strh	r2, [r3, #26]
        m_errorRegAccum.bit.SerialFrameError = 1;
   110b4:	f890 2140 	ldrb.w	r2, [r0, #320]	; 0x140
   110b8:	f042 0201 	orr.w	r2, r2, #1
   110bc:	f880 2140 	strb.w	r2, [r0, #320]	; 0x140
    if (m_serPort->USART.STATUS.bit.PERR) {
   110c0:	8b5a      	ldrh	r2, [r3, #26]
   110c2:	07d1      	lsls	r1, r2, #31
   110c4:	d410      	bmi.n	110e8 <_ZN9ClearCore10SerialBase19IrqHandlerExceptionEv+0x54>
    if (m_serPort->USART.STATUS.bit.BUFOVF) {
   110c6:	8b5a      	ldrh	r2, [r3, #26]
   110c8:	0752      	lsls	r2, r2, #29
   110ca:	d509      	bpl.n	110e0 <_ZN9ClearCore10SerialBase19IrqHandlerExceptionEv+0x4c>
        m_serPort->USART.STATUS.bit.BUFOVF = 1;
   110cc:	8b5a      	ldrh	r2, [r3, #26]
   110ce:	f042 0204 	orr.w	r2, r2, #4
   110d2:	835a      	strh	r2, [r3, #26]
        m_errorRegAccum.bit.SerialOverflowError = 1;
   110d4:	f890 3140 	ldrb.w	r3, [r0, #320]	; 0x140
   110d8:	f043 0304 	orr.w	r3, r3, #4
   110dc:	f880 3140 	strb.w	r3, [r0, #320]	; 0x140
   110e0:	4770      	bx	lr
            m_serPort->USART.INTFLAG.reg = SERCOM_USART_INTFLAG_ERROR;
   110e2:	2280      	movs	r2, #128	; 0x80
   110e4:	761a      	strb	r2, [r3, #24]
            break;
   110e6:	4770      	bx	lr
        m_serPort->USART.STATUS.bit.PERR = 1;
   110e8:	8b5a      	ldrh	r2, [r3, #26]
   110ea:	f042 0201 	orr.w	r2, r2, #1
   110ee:	835a      	strh	r2, [r3, #26]
        m_errorRegAccum.bit.SerialParityError = 1;
   110f0:	f890 2140 	ldrb.w	r2, [r0, #320]	; 0x140
   110f4:	f042 0202 	orr.w	r2, r2, #2
   110f8:	f880 2140 	strb.w	r2, [r0, #320]	; 0x140
   110fc:	e7e3      	b.n	110c6 <_ZN9ClearCore10SerialBase19IrqHandlerExceptionEv+0x32>
   110fe:	bf00      	nop

00011100 <_ZN9ClearCore12SerialDriver4ModeEv>:

        \return The connector's current operational mode.
    **/
    virtual ConnectorModes Mode() override {
        return Connector::Mode();
    }
   11100:	f890 014a 	ldrb.w	r0, [r0, #330]	; 0x14a
   11104:	4770      	bx	lr
   11106:	bf00      	nop

00011108 <_ZThn324_N9ClearCore12SerialDriver4ModeEv>:
    virtual ConnectorModes Mode() override {
   11108:	f5a0 70a2 	sub.w	r0, r0, #324	; 0x144
   1110c:	e7f8      	b.n	11100 <_ZN9ClearCore12SerialDriver4ModeEv>
   1110e:	bf00      	nop

00011110 <_ZN9ClearCore12SerialDriver4TypeEv>:

        \return The type of the current connector.
    **/
    Connector::ConnectorTypes Type() override {
        return Connector::SERIAL_TYPE;
    };
   11110:	2007      	movs	r0, #7
   11112:	4770      	bx	lr

00011114 <_ZThn324_N9ClearCore12SerialDriver4TypeEv>:
    Connector::ConnectorTypes Type() override {
   11114:	f5a0 70a2 	sub.w	r0, r0, #324	; 0x144
   11118:	e7fa      	b.n	11110 <_ZN9ClearCore12SerialDriver4TypeEv>
   1111a:	bf00      	nop

0001111c <_ZN9ClearCore12SerialDriver10IsWritableEv>:
        \brief Get R/W status of the connector.

        \return True if the port is open.
    **/
    bool IsWritable() override {
        return PortIsOpen();
   1111c:	6803      	ldr	r3, [r0, #0]
   1111e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   11120:	4718      	bx	r3
   11122:	bf00      	nop

00011124 <_ZThn324_N9ClearCore12SerialDriver10IsWritableEv>:
    bool IsWritable() override {
   11124:	f5a0 70a2 	sub.w	r0, r0, #324	; 0x144
   11128:	e7f8      	b.n	1111c <_ZN9ClearCore12SerialDriver10IsWritableEv>
   1112a:	bf00      	nop

0001112c <_ZN9ClearCore12SerialDriver5StateEv>:
    /**
        \brief Alias to ISerial::PortIsOpen().

        \return True if the port is open, and false otherwise.
    **/
    int16_t State() override {
   1112c:	b508      	push	{r3, lr}
        return PortIsOpen();
   1112e:	6803      	ldr	r3, [r0, #0]
   11130:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   11132:	4798      	blx	r3
    }
   11134:	b200      	sxth	r0, r0
   11136:	bd08      	pop	{r3, pc}

00011138 <_ZThn324_N9ClearCore12SerialDriver5StateEv>:
    int16_t State() override {
   11138:	f5a0 70a2 	sub.w	r0, r0, #324	; 0x144
   1113c:	e7f6      	b.n	1112c <_ZN9ClearCore12SerialDriver5StateEv>
   1113e:	bf00      	nop

00011140 <_ZN9ClearCore12SerialDriver11IsInHwFaultEv>:
        return true;
    }

    bool IsInHwFault() override {
        return false;
    }
   11140:	2000      	movs	r0, #0
   11142:	4770      	bx	lr

00011144 <_ZThn324_N9ClearCore12SerialDriver11IsInHwFaultEv>:
    bool IsInHwFault() override {
   11144:	f5a0 70a2 	sub.w	r0, r0, #324	; 0x144
   11148:	e7fa      	b.n	11140 <_ZN9ClearCore12SerialDriver11IsInHwFaultEv>
   1114a:	bf00      	nop

0001114c <_ZN9ClearCore12SerialDriver7RefreshEv>:
    void Initialize(ClearCorePins clearCorePin) override;

    /**
        Update connector's state.
    **/
    void Refresh() override {};
   1114c:	4770      	bx	lr
   1114e:	bf00      	nop

00011150 <_ZThn324_N9ClearCore12SerialDriver7RefreshEv>:
   11150:	f5a0 70a2 	sub.w	r0, r0, #324	; 0x144
   11154:	e7fa      	b.n	1114c <_ZN9ClearCore12SerialDriver7RefreshEv>
   11156:	bf00      	nop

00011158 <_ZN9ClearCore12SerialDriverC1EtNS_13ShiftRegister5MasksES2_S2_PK15PeripheralRouteS5_S5_S5_h>:
// LED feedback and option shift register
extern ShiftRegister ShiftReg;
// CCIO-8 management
extern CcioBoardManager &CcioMgr;

SerialDriver::SerialDriver(uint16_t index,
   11158:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1115c:	b082      	sub	sp, #8
   1115e:	4688      	mov	r8, r1
   11160:	9d0c      	ldr	r5, [sp, #48]	; 0x30
   11162:	f89d 4034 	ldrb.w	r4, [sp, #52]	; 0x34
    : SerialBase(ctsMisoInfo, rtsSsInfo, rxSckInfo, txMosiInfo,
                 peripheral),
      m_index(index),
      m_ledMask(feedBackLedMask),
      m_controlMask(controlMask),
      m_polarityMask(polarityMask) {}
   11166:	9500      	str	r5, [sp, #0]
   11168:	9401      	str	r4, [sp, #4]
   1116a:	a909      	add	r1, sp, #36	; 0x24
SerialDriver::SerialDriver(uint16_t index,
   1116c:	4604      	mov	r4, r0
   1116e:	4617      	mov	r7, r2
   11170:	461e      	mov	r6, r3
      m_polarityMask(polarityMask) {}
   11172:	c90e      	ldmia	r1, {r1, r2, r3}
SerialDriver::SerialDriver(uint16_t index,
   11174:	9d08      	ldr	r5, [sp, #32]
      m_polarityMask(polarityMask) {}
   11176:	f7ff fd75 	bl	10c64 <_ZN9ClearCore10SerialBaseC1EPK15PeripheralRouteS3_S3_S3_h>
   1117a:	f504 70a2 	add.w	r0, r4, #324	; 0x144
   1117e:	f7f3 fc2d 	bl	49dc <_ZN9ClearCore9ConnectorC1Ev>
   11182:	4b09      	ldr	r3, [pc, #36]	; (111a8 <_ZN9ClearCore12SerialDriverC1EtNS_13ShiftRegister5MasksES2_S2_PK15PeripheralRouteS5_S5_S5_h+0x50>)
   11184:	f884 814b 	strb.w	r8, [r4, #331]	; 0x14b
   11188:	f103 0208 	add.w	r2, r3, #8
   1118c:	4620      	mov	r0, r4
   1118e:	337c      	adds	r3, #124	; 0x7c
   11190:	f8c4 714c 	str.w	r7, [r4, #332]	; 0x14c
   11194:	f8c4 6150 	str.w	r6, [r4, #336]	; 0x150
   11198:	f8c4 5154 	str.w	r5, [r4, #340]	; 0x154
   1119c:	6022      	str	r2, [r4, #0]
   1119e:	f8c4 3144 	str.w	r3, [r4, #324]	; 0x144
   111a2:	b002      	add	sp, #8
   111a4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   111a8:	000233e4 	.word	0x000233e4

000111ac <_ZN9ClearCore12SerialDriver5SpeedEm>:
    bool Speed(uint32_t bitsPerSecond) override {
   111ac:	b538      	push	{r3, r4, r5, lr}
   111ae:	4604      	mov	r4, r0
        bool retVal = SerialBase::Speed(bitsPerSecond);
   111b0:	f7fe fe50 	bl	fe54 <_ZN9ClearCore10SerialBase5SpeedEm>
        if (m_portOpen) {
   111b4:	f894 3029 	ldrb.w	r3, [r4, #41]	; 0x29
        bool retVal = SerialBase::Speed(bitsPerSecond);
   111b8:	4605      	mov	r5, r0
        if (m_portOpen) {
   111ba:	b113      	cbz	r3, 111c2 <_ZN9ClearCore12SerialDriver5SpeedEm+0x16>
            WaitOneCharTime();
   111bc:	4620      	mov	r0, r4
   111be:	f7ff fd9d 	bl	10cfc <_ZN9ClearCore10SerialBase15WaitOneCharTimeEv>
    }
   111c2:	4628      	mov	r0, r5
   111c4:	bd38      	pop	{r3, r4, r5, pc}
   111c6:	bf00      	nop

000111c8 <_ZN9ClearCore12SerialDriver4ModeENS_9Connector14ConnectorModesE>:
    PortClose();
    // Default to TTL mode
    Mode(ConnectorModes::TTL);
}

bool SerialDriver::Mode(ConnectorModes newMode) {
   111c8:	b538      	push	{r3, r4, r5, lr}
    SerialBase::PortModes portMode;

    if (m_mode == newMode) {
   111ca:	f890 314a 	ldrb.w	r3, [r0, #330]	; 0x14a
   111ce:	428b      	cmp	r3, r1
   111d0:	d00d      	beq.n	111ee <_ZN9ClearCore12SerialDriver4ModeENS_9Connector14ConnectorModesE+0x26>
        // No change needed
        return true;
    }

    if (m_mode == Connector::CCIO) {
   111d2:	2b10      	cmp	r3, #16
   111d4:	460d      	mov	r5, r1
   111d6:	4604      	mov	r4, r0
   111d8:	f000 808c 	beq.w	112f4 <_ZN9ClearCore12SerialDriver4ModeENS_9Connector14ConnectorModesE+0x12c>
        CcioMgr.LinkClose();
    }

    switch (newMode) {
   111dc:	f1a5 030d 	sub.w	r3, r5, #13
   111e0:	2b03      	cmp	r3, #3
   111e2:	f200 808c 	bhi.w	112fe <_ZN9ClearCore12SerialDriver4ModeENS_9Connector14ConnectorModesE+0x136>
   111e6:	e8df f003 	tbb	[pc, r3]
   111ea:	3169      	.short	0x3169
   111ec:	4f06      	.short	0x4f06
        return true;
   111ee:	2501      	movs	r5, #1
    // register and settle for a full character time before sending data
    if (m_portOpen) {
        WaitOneCharTime();
    }
    return true;
}
   111f0:	4628      	mov	r0, r5
   111f2:	bd38      	pop	{r3, r4, r5, pc}
            Speed(CCIO_DEFAULT_BAUD_RATE);
   111f4:	4798      	blx	r3
        atomic_and_fetch(&m_patternOutputs[LED_BLINK_IO_SET], ~bitsToClr);
   111f6:	f8d4 2154 	ldr.w	r2, [r4, #340]	; 0x154
   111fa:	4b42      	ldr	r3, [pc, #264]	; (11304 <_ZN9ClearCore12SerialDriver4ModeENS_9Connector14ConnectorModesE+0x13c>)
   111fc:	f3bf 8f5b 	dmb	ish
   11200:	43d2      	mvns	r2, r2
   11202:	e853 1f00 	ldrex	r1, [r3]
   11206:	4011      	ands	r1, r2
   11208:	e843 1000 	strex	r0, r1, [r3]
   1120c:	2800      	cmp	r0, #0
   1120e:	d1f8      	bne.n	11202 <_ZN9ClearCore12SerialDriver4ModeENS_9Connector14ConnectorModesE+0x3a>
   11210:	f3bf 8f5b 	dmb	ish
        atomic_or_fetch(&m_patternOutputs[LED_BLINK_IO_SET], bitsToSet);
   11214:	f8d4 2150 	ldr.w	r2, [r4, #336]	; 0x150
   11218:	f3bf 8f5b 	dmb	ish
   1121c:	e853 1f00 	ldrex	r1, [r3]
   11220:	4311      	orrs	r1, r2
   11222:	e843 1000 	strex	r0, r1, [r3]
   11226:	2800      	cmp	r0, #0
   11228:	d1f8      	bne.n	1121c <_ZN9ClearCore12SerialDriver4ModeENS_9Connector14ConnectorModesE+0x54>
   1122a:	f3bf 8f5b 	dmb	ish
            portMode = SerialBase::SPI;
   1122e:	2101      	movs	r1, #1
    m_mode = newMode;
   11230:	f884 514a 	strb.w	r5, [r4, #330]	; 0x14a
    PortMode(portMode);
   11234:	4620      	mov	r0, r4
   11236:	f7ff fd73 	bl	10d20 <_ZN9ClearCore10SerialBase8PortModeENS0_9PortModesE>
    if (m_portOpen) {
   1123a:	f894 5029 	ldrb.w	r5, [r4, #41]	; 0x29
   1123e:	2d00      	cmp	r5, #0
   11240:	d0d5      	beq.n	111ee <_ZN9ClearCore12SerialDriver4ModeENS_9Connector14ConnectorModesE+0x26>
        WaitOneCharTime();
   11242:	4620      	mov	r0, r4
   11244:	f7ff fd5a 	bl	10cfc <_ZN9ClearCore10SerialBase15WaitOneCharTimeEv>
}
   11248:	4628      	mov	r0, r5
   1124a:	bd38      	pop	{r3, r4, r5, pc}
   1124c:	4b2d      	ldr	r3, [pc, #180]	; (11304 <_ZN9ClearCore12SerialDriver4ModeENS_9Connector14ConnectorModesE+0x13c>)
   1124e:	f8d4 2154 	ldr.w	r2, [r4, #340]	; 0x154
   11252:	f3bf 8f5b 	dmb	ish
   11256:	e853 1f00 	ldrex	r1, [r3]
   1125a:	4311      	orrs	r1, r2
   1125c:	e843 1000 	strex	r0, r1, [r3]
   11260:	2800      	cmp	r0, #0
   11262:	d1f8      	bne.n	11256 <_ZN9ClearCore12SerialDriver4ModeENS_9Connector14ConnectorModesE+0x8e>
   11264:	f3bf 8f5b 	dmb	ish
        atomic_and_fetch(&m_patternOutputs[LED_BLINK_IO_SET], ~bitsToClr);
   11268:	f8d4 2150 	ldr.w	r2, [r4, #336]	; 0x150
   1126c:	f3bf 8f5b 	dmb	ish
   11270:	43d2      	mvns	r2, r2
   11272:	e853 1f00 	ldrex	r1, [r3]
   11276:	4011      	ands	r1, r2
   11278:	e843 1000 	strex	r0, r1, [r3]
   1127c:	2800      	cmp	r0, #0
   1127e:	d1f8      	bne.n	11272 <_ZN9ClearCore12SerialDriver4ModeENS_9Connector14ConnectorModesE+0xaa>
   11280:	f3bf 8f5b 	dmb	ish
            portMode = SerialBase::UART;
   11284:	2100      	movs	r1, #0
   11286:	e7d3      	b.n	11230 <_ZN9ClearCore12SerialDriver4ModeENS_9Connector14ConnectorModesE+0x68>
            SpiClock(SerialDriver::SCK_LOW, SerialDriver::LEAD_CHANGE);
   11288:	2201      	movs	r2, #1
   1128a:	2100      	movs	r1, #0
   1128c:	4620      	mov	r0, r4
   1128e:	f7ff fd8d 	bl	10dac <_ZN9ClearCore10SerialBase8SpiClockENS0_18SpiClockPolaritiesENS0_14SpiClockPhasesE>
            SpiSsMode(SerialBase::CtrlLineModes::LINE_ON);
   11292:	2101      	movs	r1, #1
   11294:	4620      	mov	r0, r4
   11296:	f7ff fd4f 	bl	10d38 <_ZN9ClearCore10SerialBase9SpiSsModeENS0_13CtrlLineModesE>
            Speed(CCIO_DEFAULT_BAUD_RATE);
   1129a:	6823      	ldr	r3, [r4, #0]
   1129c:	4a1a      	ldr	r2, [pc, #104]	; (11308 <_ZN9ClearCore12SerialDriver4ModeENS_9Connector14ConnectorModesE+0x140>)
   1129e:	691b      	ldr	r3, [r3, #16]
        bool retVal = SerialBase::Speed(bitsPerSecond);
   112a0:	491a      	ldr	r1, [pc, #104]	; (1130c <_ZN9ClearCore12SerialDriver4ModeENS_9Connector14ConnectorModesE+0x144>)
   112a2:	4293      	cmp	r3, r2
   112a4:	4620      	mov	r0, r4
   112a6:	d1a5      	bne.n	111f4 <_ZN9ClearCore12SerialDriver4ModeENS_9Connector14ConnectorModesE+0x2c>
   112a8:	f7fe fdd4 	bl	fe54 <_ZN9ClearCore10SerialBase5SpeedEm>
        if (m_portOpen) {
   112ac:	f894 3029 	ldrb.w	r3, [r4, #41]	; 0x29
   112b0:	2b00      	cmp	r3, #0
   112b2:	d0a0      	beq.n	111f6 <_ZN9ClearCore12SerialDriver4ModeENS_9Connector14ConnectorModesE+0x2e>
            WaitOneCharTime();
   112b4:	4620      	mov	r0, r4
   112b6:	f7ff fd21 	bl	10cfc <_ZN9ClearCore10SerialBase15WaitOneCharTimeEv>
   112ba:	e79c      	b.n	111f6 <_ZN9ClearCore12SerialDriver4ModeENS_9Connector14ConnectorModesE+0x2e>
   112bc:	f8d4 2154 	ldr.w	r2, [r4, #340]	; 0x154
   112c0:	4b10      	ldr	r3, [pc, #64]	; (11304 <_ZN9ClearCore12SerialDriver4ModeENS_9Connector14ConnectorModesE+0x13c>)
   112c2:	f3bf 8f5b 	dmb	ish
   112c6:	43d2      	mvns	r2, r2
   112c8:	e853 1f00 	ldrex	r1, [r3]
   112cc:	4011      	ands	r1, r2
   112ce:	e843 1000 	strex	r0, r1, [r3]
   112d2:	2800      	cmp	r0, #0
   112d4:	d1f8      	bne.n	112c8 <_ZN9ClearCore12SerialDriver4ModeENS_9Connector14ConnectorModesE+0x100>
   112d6:	f3bf 8f5b 	dmb	ish
   112da:	f8d4 2150 	ldr.w	r2, [r4, #336]	; 0x150
   112de:	f3bf 8f5b 	dmb	ish
   112e2:	43d2      	mvns	r2, r2
   112e4:	e853 1f00 	ldrex	r1, [r3]
   112e8:	4011      	ands	r1, r2
   112ea:	e843 1000 	strex	r0, r1, [r3]
   112ee:	2800      	cmp	r0, #0
   112f0:	d0c6      	beq.n	11280 <_ZN9ClearCore12SerialDriver4ModeENS_9Connector14ConnectorModesE+0xb8>
   112f2:	e7f7      	b.n	112e4 <_ZN9ClearCore12SerialDriver4ModeENS_9Connector14ConnectorModesE+0x11c>
        CcioMgr.LinkClose();
   112f4:	4b06      	ldr	r3, [pc, #24]	; (11310 <_ZN9ClearCore12SerialDriver4ModeENS_9Connector14ConnectorModesE+0x148>)
   112f6:	6818      	ldr	r0, [r3, #0]
   112f8:	f7fe fbcc 	bl	fa94 <_ZN9ClearCore16CcioBoardManager9LinkCloseEv>
   112fc:	e76e      	b.n	111dc <_ZN9ClearCore12SerialDriver4ModeENS_9Connector14ConnectorModesE+0x14>
            return false;
   112fe:	2500      	movs	r5, #0
   11300:	e776      	b.n	111f0 <_ZN9ClearCore12SerialDriver4ModeENS_9Connector14ConnectorModesE+0x28>
   11302:	bf00      	nop
   11304:	20001acc 	.word	0x20001acc
   11308:	000111ad 	.word	0x000111ad
   1130c:	0007a120 	.word	0x0007a120
   11310:	20001efc 	.word	0x20001efc

00011314 <_ZThn324_N9ClearCore12SerialDriver4ModeENS_9Connector14ConnectorModesE>:
    bool Mode(ConnectorModes newMode) override;
   11314:	f5a0 70a2 	sub.w	r0, r0, #324	; 0x144
   11318:	f7ff bf56 	b.w	111c8 <_ZN9ClearCore12SerialDriver4ModeENS_9Connector14ConnectorModesE>

0001131c <_ZN9ClearCore12SerialDriver8PortOpenEv>:

void SerialDriver::PortOpen() {
   1131c:	b510      	push	{r4, lr}
   1131e:	4604      	mov	r4, r0
    if (!SerialBase::PortIsOpen()) {
   11320:	f7fe fcfa 	bl	fd18 <_ZN9ClearCore10SerialBase10PortIsOpenEv>
   11324:	b100      	cbz	r0, 11328 <_ZN9ClearCore12SerialDriver8PortOpenEv+0xc>
   11326:	bd10      	pop	{r4, pc}
        SerialBase::PortOpen();
   11328:	4620      	mov	r0, r4
   1132a:	f7ff fc8f 	bl	10c4c <_ZN9ClearCore10SerialBase8PortOpenEv>
        // Delay to allow the port polarity to be written to the shift
        // register and settle for a full character time before sending data
        WaitOneCharTime();
   1132e:	4620      	mov	r0, r4
   11330:	f7ff fce4 	bl	10cfc <_ZN9ClearCore10SerialBase15WaitOneCharTimeEv>
        atomic_or_fetch(&m_patternOutputs[LED_BLINK_IO_SET], bitsToSet);
   11334:	4b0c      	ldr	r3, [pc, #48]	; (11368 <_ZN9ClearCore12SerialDriver8PortOpenEv+0x4c>)
   11336:	f8d4 214c 	ldr.w	r2, [r4, #332]	; 0x14c
   1133a:	f3bf 8f5b 	dmb	ish
   1133e:	e853 1f00 	ldrex	r1, [r3]
   11342:	4311      	orrs	r1, r2
   11344:	e843 1000 	strex	r0, r1, [r3]
   11348:	2800      	cmp	r0, #0
   1134a:	d1f8      	bne.n	1133e <_ZN9ClearCore12SerialDriver8PortOpenEv+0x22>
   1134c:	f3bf 8f5b 	dmb	ish
        // LED under connector on
        ShiftReg.ShifterStateSet(m_ledMask);

        // Initialize the CCIO manager
        if (m_mode == Connector::CCIO) {
   11350:	f894 314a 	ldrb.w	r3, [r4, #330]	; 0x14a
   11354:	2b10      	cmp	r3, #16
   11356:	d1e6      	bne.n	11326 <_ZN9ClearCore12SerialDriver8PortOpenEv+0xa>
            CcioMgr.CcioDiscover(this);
   11358:	4b04      	ldr	r3, [pc, #16]	; (1136c <_ZN9ClearCore12SerialDriver8PortOpenEv+0x50>)
   1135a:	4621      	mov	r1, r4
   1135c:	6818      	ldr	r0, [r3, #0]
        }
    }
}
   1135e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
            CcioMgr.CcioDiscover(this);
   11362:	f7fe bbb7 	b.w	fad4 <_ZN9ClearCore16CcioBoardManager12CcioDiscoverEPNS_12SerialDriverE>
   11366:	bf00      	nop
   11368:	20001acc 	.word	0x20001acc
   1136c:	20001efc 	.word	0x20001efc

00011370 <_ZN9ClearCore12SerialDriver9PortCloseEv>:

void SerialDriver::PortClose() {
   11370:	b510      	push	{r4, lr}
   11372:	4604      	mov	r4, r0
    if (SerialBase::PortIsOpen()) {
   11374:	f7fe fcd0 	bl	fd18 <_ZN9ClearCore10SerialBase10PortIsOpenEv>
   11378:	b1a8      	cbz	r0, 113a6 <_ZN9ClearCore12SerialDriver9PortCloseEv+0x36>
        if (m_mode == Connector::CCIO) {
   1137a:	f894 314a 	ldrb.w	r3, [r4, #330]	; 0x14a
   1137e:	2b10      	cmp	r3, #16
   11380:	d012      	beq.n	113a8 <_ZN9ClearCore12SerialDriver9PortCloseEv+0x38>
            CcioMgr.LinkClose();
        }
        SerialBase::PortClose();
   11382:	4620      	mov	r0, r4
   11384:	f7fe fe10 	bl	ffa8 <_ZN9ClearCore10SerialBase9PortCloseEv>
        atomic_and_fetch(&m_patternOutputs[LED_BLINK_IO_SET], ~bitsToClr);
   11388:	f8d4 314c 	ldr.w	r3, [r4, #332]	; 0x14c
   1138c:	4a09      	ldr	r2, [pc, #36]	; (113b4 <_ZN9ClearCore12SerialDriver9PortCloseEv+0x44>)
   1138e:	f3bf 8f5b 	dmb	ish
   11392:	43db      	mvns	r3, r3
   11394:	e852 1f00 	ldrex	r1, [r2]
   11398:	4019      	ands	r1, r3
   1139a:	e842 1000 	strex	r0, r1, [r2]
   1139e:	2800      	cmp	r0, #0
   113a0:	d1f8      	bne.n	11394 <_ZN9ClearCore12SerialDriver9PortCloseEv+0x24>
   113a2:	f3bf 8f5b 	dmb	ish
   113a6:	bd10      	pop	{r4, pc}
            CcioMgr.LinkClose();
   113a8:	4b03      	ldr	r3, [pc, #12]	; (113b8 <_ZN9ClearCore12SerialDriver9PortCloseEv+0x48>)
   113aa:	6818      	ldr	r0, [r3, #0]
   113ac:	f7fe fb72 	bl	fa94 <_ZN9ClearCore16CcioBoardManager9LinkCloseEv>
   113b0:	e7e7      	b.n	11382 <_ZN9ClearCore12SerialDriver9PortCloseEv+0x12>
   113b2:	bf00      	nop
   113b4:	20001acc 	.word	0x20001acc
   113b8:	20001efc 	.word	0x20001efc

000113bc <_ZN9ClearCore12SerialDriver10InitializeE13ClearCorePins>:
    PortClose();
   113bc:	6803      	ldr	r3, [r0, #0]
   113be:	4a37      	ldr	r2, [pc, #220]	; (1149c <_ZN9ClearCore12SerialDriver10InitializeE13ClearCorePins+0xe0>)
   113c0:	68db      	ldr	r3, [r3, #12]
   113c2:	4293      	cmp	r3, r2
void SerialDriver::Initialize(ClearCorePins clearCorePin) {
   113c4:	b510      	push	{r4, lr}
   113c6:	4604      	mov	r4, r0
    m_clearCorePin = clearCorePin;
   113c8:	f8a0 1148 	strh.w	r1, [r0, #328]	; 0x148
   113cc:	d150      	bne.n	11470 <_ZN9ClearCore12SerialDriver10InitializeE13ClearCorePins+0xb4>
    if (SerialBase::PortIsOpen()) {
   113ce:	f7fe fca3 	bl	fd18 <_ZN9ClearCore10SerialBase10PortIsOpenEv>
   113d2:	b1a8      	cbz	r0, 11400 <_ZN9ClearCore12SerialDriver10InitializeE13ClearCorePins+0x44>
        if (m_mode == Connector::CCIO) {
   113d4:	f894 314a 	ldrb.w	r3, [r4, #330]	; 0x14a
   113d8:	2b10      	cmp	r3, #16
   113da:	d059      	beq.n	11490 <_ZN9ClearCore12SerialDriver10InitializeE13ClearCorePins+0xd4>
        SerialBase::PortClose();
   113dc:	4620      	mov	r0, r4
   113de:	f7fe fde3 	bl	ffa8 <_ZN9ClearCore10SerialBase9PortCloseEv>
   113e2:	f8d4 314c 	ldr.w	r3, [r4, #332]	; 0x14c
   113e6:	4a2e      	ldr	r2, [pc, #184]	; (114a0 <_ZN9ClearCore12SerialDriver10InitializeE13ClearCorePins+0xe4>)
   113e8:	f3bf 8f5b 	dmb	ish
   113ec:	43db      	mvns	r3, r3
   113ee:	e852 1f00 	ldrex	r1, [r2]
   113f2:	4019      	ands	r1, r3
   113f4:	e842 1000 	strex	r0, r1, [r2]
   113f8:	2800      	cmp	r0, #0
   113fa:	d1f8      	bne.n	113ee <_ZN9ClearCore12SerialDriver10InitializeE13ClearCorePins+0x32>
   113fc:	f3bf 8f5b 	dmb	ish
    Mode(ConnectorModes::TTL);
   11400:	6823      	ldr	r3, [r4, #0]
   11402:	4a28      	ldr	r2, [pc, #160]	; (114a4 <_ZN9ClearCore12SerialDriver10InitializeE13ClearCorePins+0xe8>)
   11404:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   11406:	4293      	cmp	r3, r2
   11408:	d138      	bne.n	1147c <_ZN9ClearCore12SerialDriver10InitializeE13ClearCorePins+0xc0>
    if (m_mode == newMode) {
   1140a:	f894 314a 	ldrb.w	r3, [r4, #330]	; 0x14a
   1140e:	2b0d      	cmp	r3, #13
   11410:	d028      	beq.n	11464 <_ZN9ClearCore12SerialDriver10InitializeE13ClearCorePins+0xa8>
    if (m_mode == Connector::CCIO) {
   11412:	2b10      	cmp	r3, #16
   11414:	d037      	beq.n	11486 <_ZN9ClearCore12SerialDriver10InitializeE13ClearCorePins+0xca>
   11416:	f8d4 2154 	ldr.w	r2, [r4, #340]	; 0x154
   1141a:	4b21      	ldr	r3, [pc, #132]	; (114a0 <_ZN9ClearCore12SerialDriver10InitializeE13ClearCorePins+0xe4>)
   1141c:	f3bf 8f5b 	dmb	ish
   11420:	43d2      	mvns	r2, r2
   11422:	e853 1f00 	ldrex	r1, [r3]
   11426:	4011      	ands	r1, r2
   11428:	e843 1000 	strex	r0, r1, [r3]
   1142c:	2800      	cmp	r0, #0
   1142e:	d1f8      	bne.n	11422 <_ZN9ClearCore12SerialDriver10InitializeE13ClearCorePins+0x66>
   11430:	f3bf 8f5b 	dmb	ish
   11434:	f8d4 2150 	ldr.w	r2, [r4, #336]	; 0x150
   11438:	f3bf 8f5b 	dmb	ish
   1143c:	43d2      	mvns	r2, r2
   1143e:	e853 1f00 	ldrex	r1, [r3]
   11442:	4011      	ands	r1, r2
   11444:	e843 1000 	strex	r0, r1, [r3]
   11448:	2800      	cmp	r0, #0
   1144a:	d1f8      	bne.n	1143e <_ZN9ClearCore12SerialDriver10InitializeE13ClearCorePins+0x82>
   1144c:	f3bf 8f5b 	dmb	ish
    m_mode = newMode;
   11450:	230d      	movs	r3, #13
   11452:	f884 314a 	strb.w	r3, [r4, #330]	; 0x14a
    PortMode(portMode);
   11456:	4620      	mov	r0, r4
   11458:	2100      	movs	r1, #0
   1145a:	f7ff fc61 	bl	10d20 <_ZN9ClearCore10SerialBase8PortModeENS0_9PortModesE>
    if (m_portOpen) {
   1145e:	f894 3029 	ldrb.w	r3, [r4, #41]	; 0x29
   11462:	b903      	cbnz	r3, 11466 <_ZN9ClearCore12SerialDriver10InitializeE13ClearCorePins+0xaa>
   11464:	bd10      	pop	{r4, pc}
        WaitOneCharTime();
   11466:	4620      	mov	r0, r4
}
   11468:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        WaitOneCharTime();
   1146c:	f7ff bc46 	b.w	10cfc <_ZN9ClearCore10SerialBase15WaitOneCharTimeEv>
    PortClose();
   11470:	4798      	blx	r3
    Mode(ConnectorModes::TTL);
   11472:	6823      	ldr	r3, [r4, #0]
   11474:	4a0b      	ldr	r2, [pc, #44]	; (114a4 <_ZN9ClearCore12SerialDriver10InitializeE13ClearCorePins+0xe8>)
   11476:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   11478:	4293      	cmp	r3, r2
   1147a:	d0c6      	beq.n	1140a <_ZN9ClearCore12SerialDriver10InitializeE13ClearCorePins+0x4e>
   1147c:	4620      	mov	r0, r4
   1147e:	210d      	movs	r1, #13
}
   11480:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    Mode(ConnectorModes::TTL);
   11484:	4718      	bx	r3
        CcioMgr.LinkClose();
   11486:	4b08      	ldr	r3, [pc, #32]	; (114a8 <_ZN9ClearCore12SerialDriver10InitializeE13ClearCorePins+0xec>)
   11488:	6818      	ldr	r0, [r3, #0]
   1148a:	f7fe fb03 	bl	fa94 <_ZN9ClearCore16CcioBoardManager9LinkCloseEv>
   1148e:	e7c2      	b.n	11416 <_ZN9ClearCore12SerialDriver10InitializeE13ClearCorePins+0x5a>
            CcioMgr.LinkClose();
   11490:	4b05      	ldr	r3, [pc, #20]	; (114a8 <_ZN9ClearCore12SerialDriver10InitializeE13ClearCorePins+0xec>)
   11492:	6818      	ldr	r0, [r3, #0]
   11494:	f7fe fafe 	bl	fa94 <_ZN9ClearCore16CcioBoardManager9LinkCloseEv>
   11498:	e7a0      	b.n	113dc <_ZN9ClearCore12SerialDriver10InitializeE13ClearCorePins+0x20>
   1149a:	bf00      	nop
   1149c:	00011371 	.word	0x00011371
   114a0:	20001acc 	.word	0x20001acc
   114a4:	000111c9 	.word	0x000111c9
   114a8:	20001efc 	.word	0x20001efc

000114ac <_ZThn324_N9ClearCore12SerialDriver10InitializeE13ClearCorePins>:
    void Initialize(ClearCorePins clearCorePin) override;
   114ac:	f5a0 70a2 	sub.w	r0, r0, #324	; 0x144
   114b0:	f7ff bf84 	b.w	113bc <_ZN9ClearCore12SerialDriver10InitializeE13ClearCorePins>

000114b4 <_ZN9ClearCore12SerialDriver5StateEs>:
    bool State(int16_t newState) override {
   114b4:	b510      	push	{r4, lr}
            PortOpen();
   114b6:	6803      	ldr	r3, [r0, #0]
    bool State(int16_t newState) override {
   114b8:	4604      	mov	r4, r0
        if (newState) {
   114ba:	bb09      	cbnz	r1, 11500 <_ZN9ClearCore12SerialDriver5StateEs+0x4c>
   114bc:	4a26      	ldr	r2, [pc, #152]	; (11558 <_ZN9ClearCore12SerialDriver5StateEs+0xa4>)
            PortClose();
   114be:	68db      	ldr	r3, [r3, #12]
   114c0:	4293      	cmp	r3, r2
   114c2:	d11a      	bne.n	114fa <_ZN9ClearCore12SerialDriver5StateEs+0x46>
    if (SerialBase::PortIsOpen()) {
   114c4:	f7fe fc28 	bl	fd18 <_ZN9ClearCore10SerialBase10PortIsOpenEv>
   114c8:	b1a8      	cbz	r0, 114f6 <_ZN9ClearCore12SerialDriver5StateEs+0x42>
        if (m_mode == Connector::CCIO) {
   114ca:	f894 314a 	ldrb.w	r3, [r4, #330]	; 0x14a
   114ce:	2b10      	cmp	r3, #16
   114d0:	d03c      	beq.n	1154c <_ZN9ClearCore12SerialDriver5StateEs+0x98>
        SerialBase::PortClose();
   114d2:	4620      	mov	r0, r4
   114d4:	f7fe fd68 	bl	ffa8 <_ZN9ClearCore10SerialBase9PortCloseEv>
   114d8:	f8d4 314c 	ldr.w	r3, [r4, #332]	; 0x14c
   114dc:	4a1f      	ldr	r2, [pc, #124]	; (1155c <_ZN9ClearCore12SerialDriver5StateEs+0xa8>)
   114de:	f3bf 8f5b 	dmb	ish
   114e2:	43db      	mvns	r3, r3
   114e4:	e852 1f00 	ldrex	r1, [r2]
   114e8:	4019      	ands	r1, r3
   114ea:	e842 1000 	strex	r0, r1, [r2]
   114ee:	2800      	cmp	r0, #0
   114f0:	d1f8      	bne.n	114e4 <_ZN9ClearCore12SerialDriver5StateEs+0x30>
   114f2:	f3bf 8f5b 	dmb	ish
    }
   114f6:	2001      	movs	r0, #1
   114f8:	bd10      	pop	{r4, pc}
            PortClose();
   114fa:	4798      	blx	r3
    }
   114fc:	2001      	movs	r0, #1
   114fe:	bd10      	pop	{r4, pc}
   11500:	4a17      	ldr	r2, [pc, #92]	; (11560 <_ZN9ClearCore12SerialDriver5StateEs+0xac>)
            PortOpen();
   11502:	689b      	ldr	r3, [r3, #8]
   11504:	4293      	cmp	r3, r2
   11506:	d1f8      	bne.n	114fa <_ZN9ClearCore12SerialDriver5StateEs+0x46>
    if (!SerialBase::PortIsOpen()) {
   11508:	f7fe fc06 	bl	fd18 <_ZN9ClearCore10SerialBase10PortIsOpenEv>
   1150c:	2800      	cmp	r0, #0
   1150e:	d1f2      	bne.n	114f6 <_ZN9ClearCore12SerialDriver5StateEs+0x42>
        SerialBase::PortOpen();
   11510:	4620      	mov	r0, r4
   11512:	f7ff fb9b 	bl	10c4c <_ZN9ClearCore10SerialBase8PortOpenEv>
        WaitOneCharTime();
   11516:	4620      	mov	r0, r4
   11518:	f7ff fbf0 	bl	10cfc <_ZN9ClearCore10SerialBase15WaitOneCharTimeEv>
        atomic_or_fetch(&m_patternOutputs[LED_BLINK_IO_SET], bitsToSet);
   1151c:	4b0f      	ldr	r3, [pc, #60]	; (1155c <_ZN9ClearCore12SerialDriver5StateEs+0xa8>)
   1151e:	f8d4 214c 	ldr.w	r2, [r4, #332]	; 0x14c
   11522:	f3bf 8f5b 	dmb	ish
   11526:	e853 1f00 	ldrex	r1, [r3]
   1152a:	4311      	orrs	r1, r2
   1152c:	e843 1000 	strex	r0, r1, [r3]
   11530:	2800      	cmp	r0, #0
   11532:	d1f8      	bne.n	11526 <_ZN9ClearCore12SerialDriver5StateEs+0x72>
   11534:	f3bf 8f5b 	dmb	ish
        if (m_mode == Connector::CCIO) {
   11538:	f894 314a 	ldrb.w	r3, [r4, #330]	; 0x14a
   1153c:	2b10      	cmp	r3, #16
   1153e:	d1da      	bne.n	114f6 <_ZN9ClearCore12SerialDriver5StateEs+0x42>
            CcioMgr.CcioDiscover(this);
   11540:	4b08      	ldr	r3, [pc, #32]	; (11564 <_ZN9ClearCore12SerialDriver5StateEs+0xb0>)
   11542:	4621      	mov	r1, r4
   11544:	6818      	ldr	r0, [r3, #0]
   11546:	f7fe fac5 	bl	fad4 <_ZN9ClearCore16CcioBoardManager12CcioDiscoverEPNS_12SerialDriverE>
   1154a:	e7d4      	b.n	114f6 <_ZN9ClearCore12SerialDriver5StateEs+0x42>
            CcioMgr.LinkClose();
   1154c:	4b05      	ldr	r3, [pc, #20]	; (11564 <_ZN9ClearCore12SerialDriver5StateEs+0xb0>)
   1154e:	6818      	ldr	r0, [r3, #0]
   11550:	f7fe faa0 	bl	fa94 <_ZN9ClearCore16CcioBoardManager9LinkCloseEv>
   11554:	e7bd      	b.n	114d2 <_ZN9ClearCore12SerialDriver5StateEs+0x1e>
   11556:	bf00      	nop
   11558:	00011371 	.word	0x00011371
   1155c:	20001acc 	.word	0x20001acc
   11560:	0001131d 	.word	0x0001131d
   11564:	20001efc 	.word	0x20001efc

00011568 <_ZThn324_N9ClearCore12SerialDriver5StateEs>:
    bool State(int16_t newState) override {
   11568:	f5a0 70a2 	sub.w	r0, r0, #324	; 0x144
   1156c:	e7a2      	b.n	114b4 <_ZN9ClearCore12SerialDriver5StateEs>
   1156e:	bf00      	nop

00011570 <_ZN9ClearCore9LedDriver4ModeEv>:

        \return The connector's current operational mode.
    **/
    virtual ConnectorModes Mode() override {
        return Connector::Mode();
    }
   11570:	7980      	ldrb	r0, [r0, #6]
   11572:	4770      	bx	lr

00011574 <_ZN9ClearCore9LedDriver4ModeENS_9Connector14ConnectorModesE>:
        The only valid mode for this connector type is: #OUTPUT_DIGITAL.
        \return Returns false if the mode is invalid or setup fails.
    **/
    bool Mode(ConnectorModes newMode) override {
        return newMode == ConnectorModes::OUTPUT_DIGITAL;
    }
   11574:	f1a1 0004 	sub.w	r0, r1, #4
   11578:	fab0 f080 	clz	r0, r0
   1157c:	0940      	lsrs	r0, r0, #5
   1157e:	4770      	bx	lr

00011580 <_ZN9ClearCore9LedDriver4TypeEv>:

        \return The type of the current connector.
    **/
    Connector::ConnectorTypes Type() override {
        return Connector::SHIFT_REG_TYPE;
    }
   11580:	2002      	movs	r0, #2
   11582:	4770      	bx	lr

00011584 <_ZN9ClearCore9LedDriver10IsWritableEv>:

        \return True because this connector is always writable.
    **/
    bool IsWritable() override {
        return true;
    }
   11584:	2001      	movs	r0, #1
   11586:	4770      	bx	lr

00011588 <_ZN9ClearCore9LedDriver11IsInHwFaultEv>:
    bool State(int16_t newState) override;

#ifndef HIDE_FROM_DOXYGEN
    bool IsInHwFault() override {
        return false;
    }
   11588:	2000      	movs	r0, #0
   1158a:	4770      	bx	lr

0001158c <_ZN9ClearCore9LedDriver7RefreshEv>:
        Poll the underlying connector for new state update.

        This is typically called from a timer or main loop to update the
        underlying value.
    **/
    void Refresh() override {}
   1158c:	4770      	bx	lr
   1158e:	bf00      	nop

00011590 <_ZN9ClearCore9LedDriver10InitializeE13ClearCorePins>:
        \note This class requires no initialization, but requires an
        implementation of Initialize() to be a concrete class.
    **/
    void Initialize(ClearCorePins clearCorePin) override {
        m_clearCorePin = clearCorePin;
        m_mode = OUTPUT_DIGITAL;
   11590:	2304      	movs	r3, #4
        m_clearCorePin = clearCorePin;
   11592:	8081      	strh	r1, [r0, #4]
        m_mode = OUTPUT_DIGITAL;
   11594:	7183      	strb	r3, [r0, #6]
   11596:	4770      	bx	lr

00011598 <_ZN9ClearCore9LedDriver5StateEv>:
        return atomic_load_n(&m_patternOutputs[LED_BLINK_IO_SET]);
   11598:	4b04      	ldr	r3, [pc, #16]	; (115ac <_ZN9ClearCore9LedDriver5StateEv+0x14>)
   1159a:	681a      	ldr	r2, [r3, #0]
   1159c:	f3bf 8f5b 	dmb	ish
LedDriver::LedDriver(ShiftRegister::Masks ledMask)
    : Connector(),
      m_ledMask(ledMask) {}

int16_t LedDriver::State() {
    return static_cast<bool>(ShiftReg.ShifterState().reg & m_ledMask);
   115a0:	6883      	ldr	r3, [r0, #8]
   115a2:	421a      	tst	r2, r3
}
   115a4:	bf14      	ite	ne
   115a6:	2001      	movne	r0, #1
   115a8:	2000      	moveq	r0, #0
   115aa:	4770      	bx	lr
   115ac:	20001acc 	.word	0x20001acc

000115b0 <_ZN9ClearCore9LedDriver5StateEs>:

bool LedDriver::State(int16_t newState) {
    ShiftReg.ShifterState(newState, m_ledMask);
   115b0:	6883      	ldr	r3, [r0, #8]
        : ShifterStateClear(bitsToChange);
   115b2:	b971      	cbnz	r1, 115d2 <_ZN9ClearCore9LedDriver5StateEs+0x22>
        atomic_and_fetch(&m_patternOutputs[LED_BLINK_IO_SET], ~bitsToClr);
   115b4:	f3bf 8f5b 	dmb	ish
   115b8:	4a0d      	ldr	r2, [pc, #52]	; (115f0 <_ZN9ClearCore9LedDriver5StateEs+0x40>)
   115ba:	43db      	mvns	r3, r3
   115bc:	e852 1f00 	ldrex	r1, [r2]
   115c0:	4019      	ands	r1, r3
   115c2:	e842 1000 	strex	r0, r1, [r2]
   115c6:	2800      	cmp	r0, #0
   115c8:	d1f8      	bne.n	115bc <_ZN9ClearCore9LedDriver5StateEs+0xc>
   115ca:	f3bf 8f5b 	dmb	ish
    return true;
}
   115ce:	2001      	movs	r0, #1
   115d0:	4770      	bx	lr
        atomic_or_fetch(&m_patternOutputs[LED_BLINK_IO_SET], bitsToSet);
   115d2:	4a07      	ldr	r2, [pc, #28]	; (115f0 <_ZN9ClearCore9LedDriver5StateEs+0x40>)
   115d4:	f3bf 8f5b 	dmb	ish
   115d8:	e852 1f00 	ldrex	r1, [r2]
   115dc:	4319      	orrs	r1, r3
   115de:	e842 1000 	strex	r0, r1, [r2]
   115e2:	2800      	cmp	r0, #0
   115e4:	d1f8      	bne.n	115d8 <_ZN9ClearCore9LedDriver5StateEs+0x28>
        atomic_and_fetch(&m_patternOutputs[LED_BLINK_IO_SET], ~bitsToClr);
   115e6:	f3bf 8f5b 	dmb	ish
   115ea:	2001      	movs	r0, #1
   115ec:	4770      	bx	lr
   115ee:	bf00      	nop
   115f0:	20001acc 	.word	0x20001acc

000115f4 <_ZN9ClearCore9LedDriverC1ENS_13ShiftRegister5MasksE>:
LedDriver::LedDriver(ShiftRegister::Masks ledMask)
   115f4:	b538      	push	{r3, r4, r5, lr}
   115f6:	4604      	mov	r4, r0
   115f8:	460d      	mov	r5, r1
      m_ledMask(ledMask) {}
   115fa:	f7f3 f9ef 	bl	49dc <_ZN9ClearCore9ConnectorC1Ev>
   115fe:	4b02      	ldr	r3, [pc, #8]	; (11608 <_ZN9ClearCore9LedDriverC1ENS_13ShiftRegister5MasksE+0x14>)
   11600:	60a5      	str	r5, [r4, #8]
   11602:	6023      	str	r3, [r4, #0]
   11604:	4620      	mov	r0, r4
   11606:	bd38      	pop	{r3, r4, r5, pc}
   11608:	00023490 	.word	0x00023490

0001160c <_ZN9ClearCore13StatusManager8InstanceEv>:
#define UNDER_VOLTAGE_EXIT_CNT ((uint16_t)(UNDER_VOLTAGE_EXIT_V * (1 << 15) / \
   AdcManager::ADC_CHANNEL_MAX_FLOAT[AdcManager::ADC_VSUPPLY_MON]))


// Ensures that only one instance of StatusManager is ever created.
StatusManager &StatusManager::Instance() {
   1160c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    static StatusManager *instance = new StatusManager;
   1160e:	4d19      	ldr	r5, [pc, #100]	; (11674 <_ZN9ClearCore13StatusManager8InstanceEv+0x68>)
   11610:	682c      	ldr	r4, [r5, #0]
   11612:	f014 0401 	ands.w	r4, r4, #1
   11616:	d002      	beq.n	1161e <_ZN9ClearCore13StatusManager8InstanceEv+0x12>
   11618:	4b17      	ldr	r3, [pc, #92]	; (11678 <_ZN9ClearCore13StatusManager8InstanceEv+0x6c>)
   1161a:	6818      	ldr	r0, [r3, #0]
   1161c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   1161e:	2044      	movs	r0, #68	; 0x44
   11620:	f001 fe66 	bl	132f0 <_Znwj>
   11624:	4a14      	ldr	r2, [pc, #80]	; (11678 <_ZN9ClearCore13StatusManager8InstanceEv+0x6c>)
          m_strobeOnOffTicks(250),
          m_blinkTicks(2500),
          m_prestartTicks(5000),
          m_startTicks(11500),
          m_pregroupTicks(5000),
          m_precodeTicks(2500) {}
   11626:	4f15      	ldr	r7, [pc, #84]	; (1167c <_ZN9ClearCore13StatusManager8InstanceEv+0x70>)
   11628:	4e15      	ldr	r6, [pc, #84]	; (11680 <_ZN9ClearCore13StatusManager8InstanceEv+0x74>)
   1162a:	4916      	ldr	r1, [pc, #88]	; (11684 <_ZN9ClearCore13StatusManager8InstanceEv+0x78>)

        /**
            Status Register default constructor
        **/
        StatusRegister() {
            reg = 0;
   1162c:	6004      	str	r4, [r0, #0]
   1162e:	2301      	movs	r3, #1
   11630:	6044      	str	r4, [r0, #4]
   11632:	6084      	str	r4, [r0, #8]
   11634:	60c4      	str	r4, [r0, #12]
   11636:	6104      	str	r4, [r0, #16]
    SysConnectorState() : reg(0) {}
   11638:	6144      	str	r4, [r0, #20]
   1163a:	6184      	str	r4, [r0, #24]
   1163c:	61c4      	str	r4, [r0, #28]
   1163e:	6244      	str	r4, [r0, #36]	; 0x24
   11640:	f880 4028 	strb.w	r4, [r0, #40]	; 0x28
   11644:	f880 402a 	strb.w	r4, [r0, #42]	; 0x2a
   11648:	f880 402b 	strb.w	r4, [r0, #43]	; 0x2b
          m_statusRegAccum(),
          m_statusRegRisen(),
          m_statusRegFallen(),
          m_faultLed(ShiftRegister::SR_NO_FEEDBACK_MASK),
          m_disableMotors(false),
          m_hbridgeResetting(false) {}
   1164c:	6204      	str	r4, [r0, #32]
   1164e:	f880 4029 	strb.w	r4, [r0, #41]	; 0x29
   11652:	8584      	strh	r4, [r0, #44]	; 0x2c
   11654:	85c4      	strh	r4, [r0, #46]	; 0x2e
   11656:	8604      	strh	r4, [r0, #48]	; 0x30
   11658:	f880 4032 	strb.w	r4, [r0, #50]	; 0x32
   1165c:	f880 4033 	strb.w	r4, [r0, #51]	; 0x33
   11660:	f880 4040 	strb.w	r4, [r0, #64]	; 0x40
   11664:	f880 4041 	strb.w	r4, [r0, #65]	; 0x41
   11668:	6347      	str	r7, [r0, #52]	; 0x34
   1166a:	6386      	str	r6, [r0, #56]	; 0x38
   1166c:	63c1      	str	r1, [r0, #60]	; 0x3c
   1166e:	6010      	str	r0, [r2, #0]
   11670:	602b      	str	r3, [r5, #0]
    return *instance;
}
   11672:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   11674:	20001f08 	.word	0x20001f08
   11678:	20001f10 	.word	0x20001f10
   1167c:	09c400fa 	.word	0x09c400fa
   11680:	2cec1388 	.word	0x2cec1388
   11684:	09c41388 	.word	0x09c41388

00011688 <_ZN9ClearCore13StatusManager8StatusRTENS0_14StatusRegisterE>:

StatusManager::StatusRegister StatusManager::StatusRT(StatusRegister mask) {
    StatusRegister statusReg;
    statusReg.reg = atomic_load_n(&m_statusRegRT.reg) & mask.reg;
   11688:	6840      	ldr	r0, [r0, #4]
   1168a:	f3bf 8f5b 	dmb	ish
    return statusReg;
}
   1168e:	4008      	ands	r0, r1
   11690:	4770      	bx	lr
   11692:	bf00      	nop

00011694 <_ZN9ClearCore13StatusManager14AdcIsInTimeoutEv>:
    statusReg.reg = atomic_load_n(&m_statusRegRT.reg) & mask.reg;
   11694:	6840      	ldr	r0, [r0, #4]
   11696:	f3bf 8f5b 	dmb	ish
}

bool StatusManager::AdcIsInTimeout() {
    StatusRegister statusReg = StatusRT();
    return statusReg.bit.AdcTimeout;
}
   1169a:	f3c0 2000 	ubfx	r0, r0, #8, #1
   1169e:	4770      	bx	lr

000116a0 <_ZN9ClearCore13StatusManager10InitializeENS_13ShiftRegister5MasksE>:
inline bool HBridgeFaultCheck() {
    return (!static_cast<bool>(PORT->Group[OutFault_04or05.gpioPort].IN.reg &
                               (1UL << OutFault_04or05.gpioPin)));
}

bool StatusManager::Initialize(ShiftRegister::Masks faultLed) {
   116a0:	b508      	push	{r3, lr}
    m_faultLed = faultLed;
    m_disableMotors = false;
   116a2:	2300      	movs	r3, #0
    m_faultLed = faultLed;
   116a4:	6201      	str	r1, [r0, #32]
    m_disableMotors = false;
   116a6:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40
    m_statusRegSinceStartup = 0;
   116aa:	6003      	str	r3, [r0, #0]
    ShiftReg.DiagnosticLedSweep();
   116ac:	4802      	ldr	r0, [pc, #8]	; (116b8 <_ZN9ClearCore13StatusManager10InitializeENS_13ShiftRegister5MasksE+0x18>)
   116ae:	f7f9 fcb1 	bl	b014 <_ZN9ClearCore13ShiftRegister18DiagnosticLedSweepEv>

    return true;
}
   116b2:	2001      	movs	r0, #1
   116b4:	bd08      	pop	{r3, pc}
   116b6:	bf00      	nop
   116b8:	200019d8 	.word	0x200019d8

000116bc <_ZN9ClearCore13StatusManager12HBridgeStateEb>:
void StatusManager::HBridgeState(bool reset) {
    ClearCorePorts port = Vsupply_MON_IO_4and5_RST.gpioPort;
    uint32_t pin = Vsupply_MON_IO_4and5_RST.gpioPin;
    StatusRegister resetBit;
    resetBit.bit.HBridgeReset = 1;
    m_hbridgeResetting = reset;
   116bc:	f880 1041 	strb.w	r1, [r0, #65]	; 0x41

    if (reset) {
   116c0:	b951      	cbnz	r1, 116d8 <_ZN9ClearCore13StatusManager12HBridgeStateEb+0x1c>
        // Set the pin as an output
        DATA_DIRECTION_OUTPUT(port, 1UL << pin);
    }
    else {
        // Set the pin as an input
        DATA_DIRECTION_INPUT(port, 1UL << pin);
   116c2:	4b17      	ldr	r3, [pc, #92]	; (11720 <_ZN9ClearCore13StatusManager12HBridgeStateEb+0x64>)
   116c4:	2204      	movs	r2, #4
   116c6:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
        // Enable the Peripheral Multiplexer
        PMUX_ENABLE(port, pin);
   116ca:	f893 2142 	ldrb.w	r2, [r3, #322]	; 0x142
   116ce:	f042 0201 	orr.w	r2, r2, #1
   116d2:	f883 2142 	strb.w	r2, [r3, #322]	; 0x142
   116d6:	4770      	bx	lr
        atomic_or_fetch(&m_statusRegRT.reg, resetBit.reg);
   116d8:	1d03      	adds	r3, r0, #4
   116da:	f3bf 8f5b 	dmb	ish
   116de:	e853 2f00 	ldrex	r2, [r3]
   116e2:	f042 0208 	orr.w	r2, r2, #8
   116e6:	e843 2100 	strex	r1, r2, [r3]
   116ea:	2900      	cmp	r1, #0
   116ec:	d1f7      	bne.n	116de <_ZN9ClearCore13StatusManager12HBridgeStateEb+0x22>
   116ee:	f3bf 8f5b 	dmb	ish
        atomic_or_fetch(&m_statusRegRisen.reg, resetBit.reg);
   116f2:	f3bf 8f5b 	dmb	ish
   116f6:	300c      	adds	r0, #12
   116f8:	e850 3f00 	ldrex	r3, [r0]
   116fc:	f043 0308 	orr.w	r3, r3, #8
   11700:	e840 3200 	strex	r2, r3, [r0]
   11704:	2a00      	cmp	r2, #0
   11706:	d1f7      	bne.n	116f8 <_ZN9ClearCore13StatusManager12HBridgeStateEb+0x3c>
   11708:	f3bf 8f5b 	dmb	ish
        PIN_CONFIGURATION(port, pin, PORT_PINCFG_INEN);
   1170c:	4b04      	ldr	r3, [pc, #16]	; (11720 <_ZN9ClearCore13StatusManager12HBridgeStateEb+0x64>)
        DATA_OUTPUT_STATE(port, 1UL << pin, true);
   1170e:	2204      	movs	r2, #4
        PIN_CONFIGURATION(port, pin, PORT_PINCFG_INEN);
   11710:	2102      	movs	r1, #2
   11712:	f883 1142 	strb.w	r1, [r3, #322]	; 0x142
        DATA_OUTPUT_STATE(port, 1UL << pin, true);
   11716:	f8c3 2118 	str.w	r2, [r3, #280]	; 0x118
        DATA_DIRECTION_OUTPUT(port, 1UL << pin);
   1171a:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108
   1171e:	4770      	bx	lr
   11720:	41008000 	.word	0x41008000

00011724 <_ZN9ClearCore13StatusManager9BlinkCodeENS_15BlinkCodeDriver15BlinkCodeGroupsEh>:

    /**
        Activate the given blink code.
    **/
    void CodeGroupAdd(uint8_t group, uint8_t codes) {
        m_codes[group] |= codes;
   11724:	4401      	add	r1, r0
   11726:	f891 3024 	ldrb.w	r3, [r1, #36]	; 0x24
   1172a:	431a      	orrs	r2, r3
   1172c:	f881 2024 	strb.w	r2, [r1, #36]	; 0x24
   11730:	4770      	bx	lr
   11732:	bf00      	nop

00011734 <_ZN9ClearCore13StatusManager16UpdateBlinkCodesENS0_14StatusRegisterE>:
                              uint8_t mask) {
    m_blinkMgr.CodeGroupAdd(group, mask);
}

void StatusManager::UpdateBlinkCodes(StatusRegister status) {
    if (status.bit.VSupplyOverVoltage) {
   11734:	b2cb      	uxtb	r3, r1
   11736:	07da      	lsls	r2, r3, #31
void StatusManager::UpdateBlinkCodes(StatusRegister status) {
   11738:	b510      	push	{r4, lr}
   1173a:	4604      	mov	r4, r0
    if (status.bit.VSupplyOverVoltage) {
   1173c:	d505      	bpl.n	1174a <_ZN9ClearCore13StatusManager16UpdateBlinkCodesENS0_14StatusRegisterE+0x16>
   1173e:	f890 2025 	ldrb.w	r2, [r0, #37]	; 0x25
   11742:	f042 0202 	orr.w	r2, r2, #2
   11746:	f880 2025 	strb.w	r2, [r0, #37]	; 0x25
        m_blinkMgr.CodeGroupAdd(
            BlinkCodeDriver::BLINK_GROUP_SUPPLY_ERROR,
            BlinkCodeDriver::SUPPLY_ERROR_VSUPPLY_HIGH);
    }
    if (status.bit.VSupplyUnderVoltage) {
   1174a:	0798      	lsls	r0, r3, #30
   1174c:	d505      	bpl.n	1175a <_ZN9ClearCore13StatusManager16UpdateBlinkCodesENS0_14StatusRegisterE+0x26>
   1174e:	f894 2025 	ldrb.w	r2, [r4, #37]	; 0x25
   11752:	f042 0201 	orr.w	r2, r2, #1
   11756:	f884 2025 	strb.w	r2, [r4, #37]	; 0x25
        m_blinkMgr.CodeGroupAdd(
            BlinkCodeDriver::BLINK_GROUP_SUPPLY_ERROR,
            BlinkCodeDriver::SUPPLY_ERROR_VSUPPLY_LOW);
    }
    if (status.bit.HBridgeOverloaded) {
   1175a:	075a      	lsls	r2, r3, #29
   1175c:	d505      	bpl.n	1176a <_ZN9ClearCore13StatusManager16UpdateBlinkCodesENS0_14StatusRegisterE+0x36>
   1175e:	f894 2026 	ldrb.w	r2, [r4, #38]	; 0x26
   11762:	f042 0201 	orr.w	r2, r2, #1
   11766:	f884 2026 	strb.w	r2, [r4, #38]	; 0x26
        m_blinkMgr.CodeGroupAdd(
            BlinkCodeDriver::BLINK_GROUP_DEVICE_ERROR,
            BlinkCodeDriver::DEVICE_ERROR_HBRIDGE);
    }
    if (status.bit.Overloaded5V) {
   1176a:	06d8      	lsls	r0, r3, #27
   1176c:	d505      	bpl.n	1177a <_ZN9ClearCore13StatusManager16UpdateBlinkCodesENS0_14StatusRegisterE+0x46>
   1176e:	f894 2025 	ldrb.w	r2, [r4, #37]	; 0x25
   11772:	f042 0204 	orr.w	r2, r2, #4
   11776:	f884 2025 	strb.w	r2, [r4, #37]	; 0x25
        m_blinkMgr.CodeGroupAdd(
            BlinkCodeDriver::BLINK_GROUP_SUPPLY_ERROR,
            BlinkCodeDriver::SUPPLY_ERROR_5VOB_OVERLOAD);
    }
    if (status.bit.SdCardError) {
   1177a:	f3c1 2107 	ubfx	r1, r1, #8, #8
   1177e:	06ca      	lsls	r2, r1, #27
   11780:	d505      	bpl.n	1178e <_ZN9ClearCore13StatusManager16UpdateBlinkCodesENS0_14StatusRegisterE+0x5a>
   11782:	f894 2026 	ldrb.w	r2, [r4, #38]	; 0x26
   11786:	f042 0202 	orr.w	r2, r2, #2
   1178a:	f884 2026 	strb.w	r2, [r4, #38]	; 0x26
            BlinkCodeDriver::BLINK_GROUP_DEVICE_ERROR,
            BlinkCodeDriver::DEVICE_ERROR_SD_CARD);
    }
    // Only report Ethernet problems if we called EthernetManager::Setup()
    // and expect Ethernet to be functional.
    if (EthernetMgr.EthernetActive() &&
   1178e:	4a14      	ldr	r2, [pc, #80]	; (117e0 <_ZN9ClearCore13StatusManager16UpdateBlinkCodesENS0_14StatusRegisterE+0xac>)
   11790:	6812      	ldr	r2, [r2, #0]
   11792:	f892 2061 	ldrb.w	r2, [r2, #97]	; 0x61
   11796:	b112      	cbz	r2, 1179e <_ZN9ClearCore13StatusManager16UpdateBlinkCodesENS0_14StatusRegisterE+0x6a>
   11798:	f011 0f0c 	tst.w	r1, #12
   1179c:	d118      	bne.n	117d0 <_ZN9ClearCore13StatusManager16UpdateBlinkCodesENS0_14StatusRegisterE+0x9c>
             status.bit.EthernetPhyInitFailed)) {
        m_blinkMgr.CodeGroupAdd(
            BlinkCodeDriver::BLINK_GROUP_DEVICE_ERROR,
            BlinkCodeDriver::DEVICE_ERROR_ETHERNET);
    }
    if (status.bit.CcioLinkBroken) {
   1179e:	061b      	lsls	r3, r3, #24
   117a0:	d505      	bpl.n	117ae <_ZN9ClearCore13StatusManager16UpdateBlinkCodesENS0_14StatusRegisterE+0x7a>
   117a2:	f894 3026 	ldrb.w	r3, [r4, #38]	; 0x26
   117a6:	f043 0308 	orr.w	r3, r3, #8
   117aa:	f884 3026 	strb.w	r3, [r4, #38]	; 0x26
        m_blinkMgr.CodeGroupAdd(
            BlinkCodeDriver::BLINK_GROUP_DEVICE_ERROR,
            BlinkCodeDriver::DEVICE_ERROR_CCIO);
    }

    m_blinkMgr.Update();
   117ae:	f104 0024 	add.w	r0, r4, #36	; 0x24
   117b2:	f001 fc29 	bl	13008 <_ZN9ClearCore15BlinkCodeDriver6UpdateEv>
        return m_blinkState != IDLE;
   117b6:	f894 3029 	ldrb.w	r3, [r4, #41]	; 0x29
        underglow.
    **/
    void DiagnosticLedSweep();

    void BlinkCode(bool blinkCodeActive, bool blinkCodeState) {
        m_blinkCodeActive = blinkCodeActive;
   117ba:	4a0a      	ldr	r2, [pc, #40]	; (117e4 <_ZN9ClearCore13StatusManager16UpdateBlinkCodesENS0_14StatusRegisterE+0xb0>)
    ShiftReg.BlinkCode(m_blinkMgr.CodePresent(), m_blinkMgr.LedState());
   117bc:	f894 1032 	ldrb.w	r1, [r4, #50]	; 0x32
        m_blinkCodeState = blinkCodeState;
   117c0:	f882 110a 	strb.w	r1, [r2, #266]	; 0x10a
   117c4:	3300      	adds	r3, #0
   117c6:	bf18      	it	ne
   117c8:	2301      	movne	r3, #1
   117ca:	f882 3109 	strb.w	r3, [r2, #265]	; 0x109
}
   117ce:	bd10      	pop	{r4, pc}
        m_codes[group] |= codes;
   117d0:	f894 2026 	ldrb.w	r2, [r4, #38]	; 0x26
   117d4:	f042 0204 	orr.w	r2, r2, #4
   117d8:	f884 2026 	strb.w	r2, [r4, #38]	; 0x26
   117dc:	e7df      	b.n	1179e <_ZN9ClearCore13StatusManager16UpdateBlinkCodesENS0_14StatusRegisterE+0x6a>
   117de:	bf00      	nop
   117e0:	20001bf8 	.word	0x20001bf8
   117e4:	200019d8 	.word	0x200019d8

000117e8 <_ZN9ClearCore13StatusManager7RefreshEv>:
void StatusManager::Refresh() {
   117e8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   117ec:	b082      	sub	sp, #8
            reg = 0;
   117ee:	2300      	movs	r3, #0
   117f0:	9301      	str	r3, [sp, #4]
            AdcMgr.FilteredResult(AdcManager::ADC_VSUPPLY_MON) >=
   117f2:	4b98      	ldr	r3, [pc, #608]	; (11a54 <_ZN9ClearCore13StatusManager7RefreshEv+0x26c>)
    atomic_load(&m_statusRegRT.reg, &statusPrev.reg);
   117f4:	6844      	ldr	r4, [r0, #4]
   117f6:	f3bf 8f5b 	dmb	ish
            AdcMgr.FilteredResult(AdcManager::ADC_VSUPPLY_MON) >=
   117fa:	681a      	ldr	r2, [r3, #0]
    return (!static_cast<bool>(PORT->Group[OutFault_04or05.gpioPort].IN.reg &
   117fc:	4f96      	ldr	r7, [pc, #600]	; (11a58 <_ZN9ClearCore13StatusManager7RefreshEv+0x270>)
            AdcMgr.FilteredResult(AdcManager::ADC_VSUPPLY_MON) >=
   117fe:	8a13      	ldrh	r3, [r2, #16]
   11800:	f8df 8274 	ldr.w	r8, [pc, #628]	; 11a78 <_ZN9ClearCore13StatusManager7RefreshEv+0x290>
        VSupplyOverVoltageCheck(statusPrev.bit.VSupplyOverVoltage);
   11804:	b2e1      	uxtb	r1, r4
            OVER_VOLTAGE_EXIT_CNT) || (!currentStatus &&
   11806:	07ce      	lsls	r6, r1, #31
void StatusManager::Refresh() {
   11808:	4605      	mov	r5, r0
                                       AdcMgr.FilteredResult(AdcManager::ADC_VSUPPLY_MON) >=
   1180a:	b29b      	uxth	r3, r3
    return (currentStatus &&
   1180c:	bf4c      	ite	mi
   1180e:	f642 4053 	movwmi	r0, #11347	; 0x2c53
            OVER_VOLTAGE_EXIT_CNT) || (!currentStatus &&
   11812:	f243 20a8 	movwpl	r0, #12968	; 0x32a8
   11816:	4283      	cmp	r3, r0
    statusPending.bit.VSupplyOverVoltage =
   11818:	f89d 0004 	ldrb.w	r0, [sp, #4]
    statusPending.bit.EthernetDisconnect = !EthernetMgr.PhyLinkActive();
   1181c:	4e8f      	ldr	r6, [pc, #572]	; (11a5c <_ZN9ClearCore13StatusManager7RefreshEv+0x274>)
            OVER_VOLTAGE_EXIT_CNT) || (!currentStatus &&
   1181e:	bfd4      	ite	le
   11820:	2300      	movle	r3, #0
   11822:	2301      	movgt	r3, #1
    statusPending.bit.VSupplyOverVoltage =
   11824:	f363 0000 	bfi	r0, r3, #0, #1
   11828:	f88d 0004 	strb.w	r0, [sp, #4]
            AdcMgr.FilteredResult(AdcManager::ADC_VSUPPLY_MON) <
   1182c:	8a13      	ldrh	r3, [r2, #16]
    statusPending.bit.EthernetDisconnect = !EthernetMgr.PhyLinkActive();
   1182e:	6836      	ldr	r6, [r6, #0]
            UNDER_VOLTAGE_EXIT_CNT) || (!currentStatus &&
   11830:	0788      	lsls	r0, r1, #30
                                        AdcMgr.FilteredResult(AdcManager::ADC_VSUPPLY_MON) <
   11832:	b29b      	uxth	r3, r3
    return (currentStatus &&
   11834:	bf4c      	ite	mi
   11836:	f241 1069 	movwmi	r0, #4457	; 0x1169
            UNDER_VOLTAGE_EXIT_CNT) || (!currentStatus &&
   1183a:	f640 70d3 	movwpl	r0, #4051	; 0xfd3
   1183e:	4283      	cmp	r3, r0
    statusPending.bit.VSupplyUnderVoltage =
   11840:	f89d 0004 	ldrb.w	r0, [sp, #4]
            UNDER_VOLTAGE_EXIT_CNT) || (!currentStatus &&
   11844:	bfcc      	ite	gt
   11846:	2300      	movgt	r3, #0
   11848:	2301      	movle	r3, #1
    statusPending.bit.VSupplyUnderVoltage =
   1184a:	f363 0041 	bfi	r0, r3, #1, #1
   1184e:	f88d 0004 	strb.w	r0, [sp, #4]
            AdcMgr.FilteredResult(AdcManager::ADC_5VOB_MON) <
   11852:	8a93      	ldrh	r3, [r2, #20]
    statusPending.bit.Overloaded5V =
   11854:	f89d 0004 	ldrb.w	r0, [sp, #4]
            OFFBOARD_5V_EXIT_CNT) || (!currentStatus &&
   11858:	06c9      	lsls	r1, r1, #27
                                      AdcMgr.FilteredResult(AdcManager::ADC_5VOB_MON) <
   1185a:	b29b      	uxth	r3, r3
    return (currentStatus &&
   1185c:	bf4c      	ite	mi
   1185e:	f245 7144 	movwmi	r1, #22340	; 0x5744
            OFFBOARD_5V_EXIT_CNT) || (!currentStatus &&
   11862:	f644 5192 	movwpl	r1, #19858	; 0x4d92
   11866:	428b      	cmp	r3, r1
   11868:	bfcc      	ite	gt
   1186a:	2300      	movgt	r3, #0
   1186c:	2301      	movle	r3, #1
    statusPending.bit.Overloaded5V =
   1186e:	f363 1004 	bfi	r0, r3, #4, #1
   11872:	f88d 0004 	strb.w	r0, [sp, #4]
    return (!static_cast<bool>(PORT->Group[OutFault_04or05.gpioPort].IN.reg &
   11876:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
    statusPending.bit.HBridgeReset = m_hbridgeResetting;
   1187a:	f895 c041 	ldrb.w	ip, [r5, #65]	; 0x41
    statusPending.bit.AdcTimeout = AdcMgr.AdcTimeout();
   1187e:	f892 e061 	ldrb.w	lr, [r2, #97]	; 0x61
   11882:	f89d 2005 	ldrb.w	r2, [sp, #5]
    statusPending.bit.CcioLinkBroken = CcioMgr.LinkBroken();
   11886:	4976      	ldr	r1, [pc, #472]	; (11a60 <_ZN9ClearCore13StatusManager7RefreshEv+0x278>)
        static_cast<bool>(ShiftReg.OverloadActive());
   11888:	4f76      	ldr	r7, [pc, #472]	; (11a64 <_ZN9ClearCore13StatusManager7RefreshEv+0x27c>)
    statusPending.bit.CcioLinkBroken = CcioMgr.LinkBroken();
   1188a:	6809      	ldr	r1, [r1, #0]
    statusPending.bit.HBridgeOverloaded = HBridgeFaultCheck();
   1188c:	43db      	mvns	r3, r3
   1188e:	b2c0      	uxtb	r0, r0
   11890:	f363 0082 	bfi	r0, r3, #2, #1
    statusPending.bit.AdcTimeout = AdcMgr.AdcTimeout();
   11894:	f36e 0200 	bfi	r2, lr, #0, #1
    statusPending.bit.HBridgeReset = m_hbridgeResetting;
   11898:	b2c3      	uxtb	r3, r0
    statusPending.bit.AdcTimeout = AdcMgr.AdcTimeout();
   1189a:	f88d 2005 	strb.w	r2, [sp, #5]
    statusPending.bit.HBridgeReset = m_hbridgeResetting;
   1189e:	f36c 03c3 	bfi	r3, ip, #3, #1
        static_cast<bool>(ShiftReg.OverloadActive());
   118a2:	f8d7 20f0 	ldr.w	r2, [r7, #240]	; 0xf0
    statusPending.bit.HBridgeOverloaded = HBridgeFaultCheck();
   118a6:	f88d 0004 	strb.w	r0, [sp, #4]
    statusPending.bit.HBridgeReset = m_hbridgeResetting;
   118aa:	f88d 3004 	strb.w	r3, [sp, #4]
    statusPending.bit.CcioLinkBroken = CcioMgr.LinkBroken();
   118ae:	f891 e092 	ldrb.w	lr, [r1, #146]	; 0x92
        static_cast<bool>(ShiftReg.OverloadActive());
   118b2:	3200      	adds	r2, #0
    statusPending.bit.CcioOverloaded = CcioMgr.IoOverloadRT();
   118b4:	e9d1 0126 	ldrd	r0, r1, [r1, #152]	; 0x98
    statusPending.bit.OutputOverloaded =
   118b8:	f89d 1004 	ldrb.w	r1, [sp, #4]
    statusPending.bit.EthernetDisconnect = !EthernetMgr.PhyLinkActive();
   118bc:	f896 305c 	ldrb.w	r3, [r6, #92]	; 0x5c
        static_cast<bool>(ShiftReg.OverloadActive());
   118c0:	bf18      	it	ne
   118c2:	2201      	movne	r2, #1
    statusPending.bit.OutputOverloaded =
   118c4:	f362 1145 	bfi	r1, r2, #5, #1
    statusPending.bit.EthernetDisconnect = !EthernetMgr.PhyLinkActive();
   118c8:	f89d 2005 	ldrb.w	r2, [sp, #5]
    statusPending.bit.OutputOverloaded =
   118cc:	f88d 1004 	strb.w	r1, [sp, #4]
    statusPending.bit.EthernetDisconnect = !EthernetMgr.PhyLinkActive();
   118d0:	f083 0301 	eor.w	r3, r3, #1
   118d4:	f363 0241 	bfi	r2, r3, #1, #1
   118d8:	f88d 2005 	strb.w	r2, [sp, #5]
    statusPending.bit.CcioLinkBroken = CcioMgr.LinkBroken();
   118dc:	b2cb      	uxtb	r3, r1
    statusPending.bit.EthernetRemoteFault = EthernetMgr.PhyRemoteFault();
   118de:	f896 105d 	ldrb.w	r1, [r6, #93]	; 0x5d
    statusPending.bit.EthernetPhyInitFailed = EthernetMgr.PhyInitFailed();
   118e2:	f896 605e 	ldrb.w	r6, [r6, #94]	; 0x5e
    statusPending.bit.EthernetRemoteFault = EthernetMgr.PhyRemoteFault();
   118e6:	b2d2      	uxtb	r2, r2
   118e8:	f361 0282 	bfi	r2, r1, #2, #1
   118ec:	f88d 2005 	strb.w	r2, [sp, #5]
    statusPending.bit.CcioLinkBroken = CcioMgr.LinkBroken();
   118f0:	f36e 13c7 	bfi	r3, lr, #7, #1
        \brief Check if the SD card is in a fault state

        \return True if an error code is present
    **/
    bool IsInFault() {
        return (m_errorCode != 0);
   118f4:	4a5c      	ldr	r2, [pc, #368]	; (11a68 <_ZN9ClearCore13StatusManager7RefreshEv+0x280>)
   118f6:	f88d 3004 	strb.w	r3, [sp, #4]
    statusPending.bit.CcioOverloaded = CcioMgr.IoOverloadRT();
   118fa:	f89d 1004 	ldrb.w	r1, [sp, #4]
   118fe:	f892 2144 	ldrb.w	r2, [r2, #324]	; 0x144
    statusPending.bit.EthernetPhyInitFailed = EthernetMgr.PhyInitFailed();
   11902:	f89d 3005 	ldrb.w	r3, [sp, #5]
   11906:	3200      	adds	r2, #0
    statusPending.bit.CcioOverloaded = CcioMgr.IoOverloadRT();
   11908:	f360 1186 	bfi	r1, r0, #6, #1
    statusPending.bit.NvmDesync = !NvmMgr.Synchonized();
   1190c:	4857      	ldr	r0, [pc, #348]	; (11a6c <_ZN9ClearCore13StatusManager7RefreshEv+0x284>)
    statusPending.bit.CcioOverloaded = CcioMgr.IoOverloadRT();
   1190e:	f88d 1004 	strb.w	r1, [sp, #4]
   11912:	bf18      	it	ne
   11914:	2201      	movne	r2, #1
    statusPending.bit.EthernetPhyInitFailed = EthernetMgr.PhyInitFailed();
   11916:	f366 03c3 	bfi	r3, r6, #3, #1
    statusPending.bit.SdCardError = SdCard.IsInFault();
   1191a:	f362 1304 	bfi	r3, r2, #4, #1
    statusPending.bit.NvmDesync = !NvmMgr.Synchonized();
   1191e:	6802      	ldr	r2, [r0, #0]
    if (hBridgeCon[0]->Mode() != Connector::OUTPUT_DIGITAL) {
   11920:	4e53      	ldr	r6, [pc, #332]	; (11a70 <_ZN9ClearCore13StatusManager7RefreshEv+0x288>)
    statusPending.bit.NvmDesync = !NvmMgr.Synchonized();
   11922:	f892 2206 	ldrb.w	r2, [r2, #518]	; 0x206
   11926:	f362 1345 	bfi	r3, r2, #5, #1
   1192a:	f88d 3005 	strb.w	r3, [sp, #5]
    UpdateBlinkCodes(statusPending);
   1192e:	4628      	mov	r0, r5
   11930:	9901      	ldr	r1, [sp, #4]
   11932:	f7ff feff 	bl	11734 <_ZN9ClearCore13StatusManager16UpdateBlinkCodesENS0_14StatusRegisterE>
    if (hBridgeCon[0]->Mode() != Connector::OUTPUT_DIGITAL) {
   11936:	6830      	ldr	r0, [r6, #0]
   11938:	6803      	ldr	r3, [r0, #0]
   1193a:	681b      	ldr	r3, [r3, #0]
   1193c:	4543      	cmp	r3, r8
   1193e:	f040 8084 	bne.w	11a4a <_ZN9ClearCore13StatusManager7RefreshEv+0x262>
   11942:	7980      	ldrb	r0, [r0, #6]
   11944:	2804      	cmp	r0, #4
   11946:	d00c      	beq.n	11962 <_ZN9ClearCore13StatusManager7RefreshEv+0x17a>
        ShiftReg.LedInFault(ShiftRegister::SR_LED_IO_4_MASK,
   11948:	f89d 3004 	ldrb.w	r3, [sp, #4]
        if (state) {
   1194c:	f013 0f04 	tst.w	r3, #4
            m_patternMasks[LED_BLINK_OVERLOAD] |= ledMask;
   11950:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
   11954:	bf14      	ite	ne
   11956:	f043 0308 	orrne.w	r3, r3, #8
            m_patternMasks[LED_BLINK_OVERLOAD] &= ~ledMask;
   1195a:	f023 0308 	biceq.w	r3, r3, #8
   1195e:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
    if (hBridgeCon[1]->Mode() != Connector::OUTPUT_DIGITAL) {
   11962:	6870      	ldr	r0, [r6, #4]
   11964:	6803      	ldr	r3, [r0, #0]
   11966:	681b      	ldr	r3, [r3, #0]
   11968:	4543      	cmp	r3, r8
   1196a:	d170      	bne.n	11a4e <_ZN9ClearCore13StatusManager7RefreshEv+0x266>
   1196c:	7980      	ldrb	r0, [r0, #6]
   1196e:	2804      	cmp	r0, #4
   11970:	d00c      	beq.n	1198c <_ZN9ClearCore13StatusManager7RefreshEv+0x1a4>
        ShiftReg.LedInFault(ShiftRegister::SR_LED_IO_5_MASK,
   11972:	f89d 3004 	ldrb.w	r3, [sp, #4]
        if (state) {
   11976:	f013 0f04 	tst.w	r3, #4
            m_patternMasks[LED_BLINK_OVERLOAD] |= ledMask;
   1197a:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
   1197e:	bf14      	ite	ne
   11980:	f043 0304 	orrne.w	r3, r3, #4
            m_patternMasks[LED_BLINK_OVERLOAD] &= ~ledMask;
   11984:	f023 0304 	biceq.w	r3, r3, #4
   11988:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
    atomic_load(&statusPending.reg, &m_statusRegRT.reg);
   1198c:	9a01      	ldr	r2, [sp, #4]
   1198e:	f3bf 8f5b 	dmb	ish
    atomic_or_fetch(&m_statusRegFallen.reg,
   11992:	9b01      	ldr	r3, [sp, #4]
    atomic_load(&statusPending.reg, &m_statusRegRT.reg);
   11994:	606a      	str	r2, [r5, #4]
    atomic_or_fetch(&m_statusRegFallen.reg,
   11996:	ea24 0303 	bic.w	r3, r4, r3
                    statusPrev.reg & ~statusPending.reg);
   1199a:	f105 0210 	add.w	r2, r5, #16
   1199e:	f3bf 8f5b 	dmb	ish
   119a2:	e852 1f00 	ldrex	r1, [r2]
   119a6:	4319      	orrs	r1, r3
   119a8:	e842 1000 	strex	r0, r1, [r2]
   119ac:	2800      	cmp	r0, #0
   119ae:	d1f8      	bne.n	119a2 <_ZN9ClearCore13StatusManager7RefreshEv+0x1ba>
   119b0:	f3bf 8f5b 	dmb	ish
    atomic_or_fetch(&m_statusRegRisen.reg,
   119b4:	9a01      	ldr	r2, [sp, #4]
                    ~statusPrev.reg & statusPending.reg);
   119b6:	f3bf 8f5b 	dmb	ish
   119ba:	f105 030c 	add.w	r3, r5, #12
    atomic_or_fetch(&m_statusRegRisen.reg,
   119be:	ea22 0404 	bic.w	r4, r2, r4
                    ~statusPrev.reg & statusPending.reg);
   119c2:	e853 2f00 	ldrex	r2, [r3]
   119c6:	4322      	orrs	r2, r4
   119c8:	e843 2100 	strex	r1, r2, [r3]
   119cc:	2900      	cmp	r1, #0
   119ce:	d1f8      	bne.n	119c2 <_ZN9ClearCore13StatusManager7RefreshEv+0x1da>
   119d0:	f3bf 8f5b 	dmb	ish
    atomic_or_fetch(&m_statusRegAccum.reg, statusPending.reg);
   119d4:	f105 0308 	add.w	r3, r5, #8
   119d8:	9a01      	ldr	r2, [sp, #4]
   119da:	f3bf 8f5b 	dmb	ish
   119de:	e853 1f00 	ldrex	r1, [r3]
   119e2:	4311      	orrs	r1, r2
   119e4:	e843 1000 	strex	r0, r1, [r3]
   119e8:	2800      	cmp	r0, #0
   119ea:	d1f8      	bne.n	119de <_ZN9ClearCore13StatusManager7RefreshEv+0x1f6>
   119ec:	f3bf 8f5b 	dmb	ish
    atomic_or_fetch(&m_statusRegSinceStartup.reg, statusPending.reg);
   119f0:	9b01      	ldr	r3, [sp, #4]
   119f2:	f3bf 8f5b 	dmb	ish
   119f6:	e855 2f00 	ldrex	r2, [r5]
   119fa:	431a      	orrs	r2, r3
   119fc:	e845 2100 	strex	r1, r2, [r5]
   11a00:	2900      	cmp	r1, #0
   11a02:	d1f8      	bne.n	119f6 <_ZN9ClearCore13StatusManager7RefreshEv+0x20e>
   11a04:	f3bf 8f5b 	dmb	ish
    m_disableMotors = m_statusRegRT.bit.VSupplyOverVoltage |
   11a08:	7929      	ldrb	r1, [r5, #4]
    bool disableMotorsPrev = m_disableMotors;
   11a0a:	f895 3040 	ldrb.w	r3, [r5, #64]	; 0x40
                      m_statusRegRT.bit.HBridgeReset;
   11a0e:	ea41 01d1 	orr.w	r1, r1, r1, lsr #3
    m_disableMotors = m_statusRegRT.bit.VSupplyOverVoltage |
   11a12:	f001 0101 	and.w	r1, r1, #1
    if (disableMotorsPrev != m_disableMotors) {
   11a16:	428b      	cmp	r3, r1
    m_disableMotors = m_statusRegRT.bit.VSupplyOverVoltage |
   11a18:	f885 1040 	strb.w	r1, [r5, #64]	; 0x40
    if (disableMotorsPrev != m_disableMotors) {
   11a1c:	d012      	beq.n	11a44 <_ZN9ClearCore13StatusManager7RefreshEv+0x25c>
   11a1e:	4c15      	ldr	r4, [pc, #84]	; (11a74 <_ZN9ClearCore13StatusManager7RefreshEv+0x28c>)
   11a20:	f104 0710 	add.w	r7, r4, #16
            MotorConnectors[i]->FaultState(m_disableMotors);
   11a24:	f854 0b04 	ldr.w	r0, [r4], #4
   11a28:	f7f3 fcdc 	bl	53e4 <_ZN9ClearCore11MotorDriver10FaultStateEb>
        for (uint8_t i = 0; i < MOTOR_CON_CNT; i++) {
   11a2c:	42bc      	cmp	r4, r7
            hBridgeCon[i]->FaultState(m_disableMotors);
   11a2e:	f895 1040 	ldrb.w	r1, [r5, #64]	; 0x40
        for (uint8_t i = 0; i < MOTOR_CON_CNT; i++) {
   11a32:	d1f7      	bne.n	11a24 <_ZN9ClearCore13StatusManager7RefreshEv+0x23c>
            hBridgeCon[i]->FaultState(m_disableMotors);
   11a34:	6830      	ldr	r0, [r6, #0]
   11a36:	f7fc fea5 	bl	e784 <_ZN9ClearCore19DigitalInOutHBridge10FaultStateEb>
   11a3a:	f895 1040 	ldrb.w	r1, [r5, #64]	; 0x40
   11a3e:	6870      	ldr	r0, [r6, #4]
   11a40:	f7fc fea0 	bl	e784 <_ZN9ClearCore19DigitalInOutHBridge10FaultStateEb>
}
   11a44:	b002      	add	sp, #8
   11a46:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if (hBridgeCon[0]->Mode() != Connector::OUTPUT_DIGITAL) {
   11a4a:	4798      	blx	r3
   11a4c:	e77a      	b.n	11944 <_ZN9ClearCore13StatusManager7RefreshEv+0x15c>
    if (hBridgeCon[1]->Mode() != Connector::OUTPUT_DIGITAL) {
   11a4e:	4798      	blx	r3
   11a50:	e78d      	b.n	1196e <_ZN9ClearCore13StatusManager7RefreshEv+0x186>
   11a52:	bf00      	nop
   11a54:	20001e04 	.word	0x20001e04
   11a58:	41008000 	.word	0x41008000
   11a5c:	20001bf8 	.word	0x20001bf8
   11a60:	20001efc 	.word	0x20001efc
   11a64:	200019d8 	.word	0x200019d8
   11a68:	2000188c 	.word	0x2000188c
   11a6c:	20001f18 	.word	0x20001f18
   11a70:	00022d94 	.word	0x00022d94
   11a74:	00022d9c 	.word	0x00022d9c
   11a78:	0000e70d 	.word	0x0000e70d

00011a7c <_ZN9ClearCore13StatusManager14OverloadUpdateEmb>:

void StatusManager::OverloadUpdate(uint32_t mask, bool inFault) {
    if (inFault) {
        m_overloadRT.reg |= mask;
   11a7c:	69c3      	ldr	r3, [r0, #28]
    if (inFault) {
   11a7e:	b94a      	cbnz	r2, 11a94 <_ZN9ClearCore13StatusManager14OverloadUpdateEmb+0x18>
    }
    else {
        m_overloadRT.reg &= ~mask;
   11a80:	ea23 0101 	bic.w	r1, r3, r1
    }
    m_overloadSinceStartup.reg |= m_overloadRT.reg;
   11a84:	6942      	ldr	r2, [r0, #20]
    m_overloadAccum.reg |= m_overloadRT.reg;
   11a86:	6983      	ldr	r3, [r0, #24]
   11a88:	61c1      	str	r1, [r0, #28]
    m_overloadSinceStartup.reg |= m_overloadRT.reg;
   11a8a:	430a      	orrs	r2, r1
    m_overloadAccum.reg |= m_overloadRT.reg;
   11a8c:	4319      	orrs	r1, r3
    m_overloadSinceStartup.reg |= m_overloadRT.reg;
   11a8e:	6142      	str	r2, [r0, #20]
    m_overloadAccum.reg |= m_overloadRT.reg;
   11a90:	6181      	str	r1, [r0, #24]
   11a92:	4770      	bx	lr
        m_overloadRT.reg |= mask;
   11a94:	4319      	orrs	r1, r3
   11a96:	e7f5      	b.n	11a84 <_ZN9ClearCore13StatusManager14OverloadUpdateEmb+0x8>

00011a98 <_GLOBAL__sub_I__ZN9ClearCore9StatusMgrE>:
}

   11a98:	b508      	push	{r3, lr}
StatusManager &StatusMgr = StatusManager::Instance();
   11a9a:	f7ff fdb7 	bl	1160c <_ZN9ClearCore13StatusManager8InstanceEv>
   11a9e:	4b01      	ldr	r3, [pc, #4]	; (11aa4 <_GLOBAL__sub_I__ZN9ClearCore9StatusMgrE+0xc>)
   11aa0:	6018      	str	r0, [r3, #0]
   11aa2:	bd08      	pop	{r3, pc}
   11aa4:	20001f0c 	.word	0x20001f0c

00011aa8 <_ZN9ClearCore10XBeeDriverC1EPK15PeripheralRouteS3_S3_S3_h>:
namespace ClearCore {

/**
    Construct and wire into the board.
**/
XBeeDriver::XBeeDriver(const PeripheralRoute *ctsInfo,
   11aa8:	b530      	push	{r4, r5, lr}
   11aaa:	b083      	sub	sp, #12
   11aac:	f89d 401c 	ldrb.w	r4, [sp, #28]
   11ab0:	9d06      	ldr	r5, [sp, #24]
                       const PeripheralRoute *rtsInfo,
                       const PeripheralRoute *rxInfo,
                       const PeripheralRoute *txInfo,
                       uint8_t peripheral)
    : SerialBase(ctsInfo, rtsInfo, rxInfo, txInfo, peripheral) {
   11ab2:	9401      	str	r4, [sp, #4]
   11ab4:	9500      	str	r5, [sp, #0]
XBeeDriver::XBeeDriver(const PeripheralRoute *ctsInfo,
   11ab6:	4604      	mov	r4, r0
    : SerialBase(ctsInfo, rtsInfo, rxInfo, txInfo, peripheral) {
   11ab8:	f7ff f8d4 	bl	10c64 <_ZN9ClearCore10SerialBaseC1EPK15PeripheralRouteS3_S3_S3_h>
   11abc:	4b04      	ldr	r3, [pc, #16]	; (11ad0 <_ZN9ClearCore10XBeeDriverC1EPK15PeripheralRouteS3_S3_S3_h+0x28>)
   11abe:	6023      	str	r3, [r4, #0]
    PortMode(SerialBase::UART);
   11ac0:	4620      	mov	r0, r4
   11ac2:	2100      	movs	r1, #0
   11ac4:	f7ff f92c 	bl	10d20 <_ZN9ClearCore10SerialBase8PortModeENS0_9PortModesE>
}
   11ac8:	4620      	mov	r0, r4
   11aca:	b003      	add	sp, #12
   11acc:	bd30      	pop	{r4, r5, pc}
   11ace:	bf00      	nop
   11ad0:	00022d40 	.word	0x00022d40

00011ad4 <_ZN9ClearCore10NvmManager8InstanceEv>:
#define DEFAULT_MAC_ADDRESS 0x241510b00000

NvmManager &NvmMgr = NvmManager::Instance();
uint32_t NvmMgrUnlock;

NvmManager &NvmManager::Instance() {
   11ad4:	b538      	push	{r3, r4, r5, lr}
    static NvmManager *instance = new NvmManager();
   11ad6:	4d0f      	ldr	r5, [pc, #60]	; (11b14 <_ZN9ClearCore10NvmManager8InstanceEv+0x40>)
   11ad8:	682b      	ldr	r3, [r5, #0]
   11ada:	f013 0401 	ands.w	r4, r3, #1
   11ade:	d002      	beq.n	11ae6 <_ZN9ClearCore10NvmManager8InstanceEv+0x12>
   11ae0:	4b0d      	ldr	r3, [pc, #52]	; (11b18 <_ZN9ClearCore10NvmManager8InstanceEv+0x44>)
   11ae2:	6818      	ldr	r0, [r3, #0]
   11ae4:	bd38      	pop	{r3, r4, r5, pc}
   11ae6:	f44f 7002 	mov.w	r0, #520	; 0x208
   11aea:	f001 fc01 	bl	132f0 <_Znwj>
   11aee:	4603      	mov	r3, r0
    // if the cache is disabled. 
    //NVMCTRL->CTRLA.bit.CACHEDIS0 = 1;
    //NVMCTRL->CTRLA.bit.CACHEDIS1 = 1;
    // Copy the contents of memory into a buffer
    memcpy(m_nvmPageCache, reinterpret_cast<const void *>(NVMCTRL_USER),
           NVMCTRL_PAGE_SIZE);
   11af0:	f44f 7200 	mov.w	r2, #512	; 0x200
      m_pageModified(false) {
   11af4:	f8c3 0200 	str.w	r0, [r3, #512]	; 0x200
           NVMCTRL_PAGE_SIZE);
   11af8:	4908      	ldr	r1, [pc, #32]	; (11b1c <_ZN9ClearCore10NvmManager8InstanceEv+0x48>)
      m_pageModified(false) {
   11afa:	f880 4204 	strb.w	r4, [r0, #516]	; 0x204
   11afe:	f880 4205 	strb.w	r4, [r0, #517]	; 0x205
   11b02:	f880 4206 	strb.w	r4, [r0, #518]	; 0x206
           NVMCTRL_PAGE_SIZE);
   11b06:	f00c fb7b 	bl	1e200 <memcpy>
    static NvmManager *instance = new NvmManager();
   11b0a:	4903      	ldr	r1, [pc, #12]	; (11b18 <_ZN9ClearCore10NvmManager8InstanceEv+0x44>)
   11b0c:	2201      	movs	r2, #1
   11b0e:	6008      	str	r0, [r1, #0]
   11b10:	602a      	str	r2, [r5, #0]
}
   11b12:	bd38      	pop	{r3, r4, r5, pc}
   11b14:	20001f14 	.word	0x20001f14
   11b18:	20001f1c 	.word	0x20001f1c
   11b1c:	00804000 	.word	0x00804000

00011b20 <_ZN9ClearCore10NvmManager5Int16ENS0_12NvmLocationsE>:
    if (nvmLocation >=
   11b20:	f5b1 7fef 	cmp.w	r1, #478	; 0x1de
    returnValue = address[0];
   11b24:	bf9a      	itte	ls
   11b26:	1840      	addls	r0, r0, r1
   11b28:	f9b0 0020 	ldrshls.w	r0, [r0, #32]
        return -1;
   11b2c:	f04f 30ff 	movhi.w	r0, #4294967295
}
   11b30:	4770      	bx	lr
   11b32:	bf00      	nop

00011b34 <_ZN9ClearCore10NvmManager10MacAddressEPh>:
}

void NvmManager::MacAddress(uint8_t *macAddress) {
   11b34:	b4f0      	push	{r4, r5, r6, r7}
    returnValue = (returnValue << 32) | val2;
   11b36:	f8d0 51f4 	ldr.w	r5, [r0, #500]	; 0x1f4
   11b3a:	f8d0 01f8 	ldr.w	r0, [r0, #504]	; 0x1f8
   11b3e:	2400      	movs	r4, #0
   11b40:	ea44 0200 	orr.w	r2, r4, r0
    uint64_t macNvm = Int64(NVM_LOC_MAC_FIRST);
    // If an invalid MAC address is detected, revert to 
    // the default MAC address to be able to come online.
    if (macNvm == UINT64_MAX || (macNvm >> 48)) {
   11b44:	1c6b      	adds	r3, r5, #1
   11b46:	bf08      	it	eq
   11b48:	f1b2 3fff 	cmpeq.w	r2, #4294967295
   11b4c:	d005      	beq.n	11b5a <_ZN9ClearCore10NvmManager10MacAddressEPh+0x26>
   11b4e:	0c2e      	lsrs	r6, r5, #16
   11b50:	4627      	mov	r7, r4
   11b52:	ea56 0007 	orrs.w	r0, r6, r7
   11b56:	462b      	mov	r3, r5
   11b58:	d002      	beq.n	11b60 <_ZN9ClearCore10NvmManager10MacAddressEPh+0x2c>
        macNvm = DEFAULT_MAC_ADDRESS;
   11b5a:	4a07      	ldr	r2, [pc, #28]	; (11b78 <_ZN9ClearCore10NvmManager10MacAddressEPh+0x44>)
   11b5c:	f242 4315 	movw	r3, #9237	; 0x2415
    }
    for (int8_t shift = 5; shift >= 0; shift--) {
        macAddress[5 - shift] = (macNvm >> shift * 8) & 0xFF;
   11b60:	0a1e      	lsrs	r6, r3, #8
   11b62:	0e15      	lsrs	r5, r2, #24
   11b64:	0c14      	lsrs	r4, r2, #16
   11b66:	0a10      	lsrs	r0, r2, #8
   11b68:	700e      	strb	r6, [r1, #0]
   11b6a:	708d      	strb	r5, [r1, #2]
   11b6c:	70cc      	strb	r4, [r1, #3]
   11b6e:	704b      	strb	r3, [r1, #1]
   11b70:	714a      	strb	r2, [r1, #5]
   11b72:	7108      	strb	r0, [r1, #4]
    }
}
   11b74:	bcf0      	pop	{r4, r5, r6, r7}
   11b76:	4770      	bx	lr
   11b78:	10b00000 	.word	0x10b00000

00011b7c <_GLOBAL__sub_I__ZN9ClearCore6NvmMgrE>:
    //return StatusManager::Instance().StatusRT().bit.VSupplyUnderVoltage;
    return AdcManager::Instance().ConvertedResult(AdcManager::ADC_VSUPPLY_MON) 
           < UNDER_VOLTAGE_TRIP_CNT;
}

} // ClearCore namespace
   11b7c:	b508      	push	{r3, lr}
NvmManager &NvmMgr = NvmManager::Instance();
   11b7e:	f7ff ffa9 	bl	11ad4 <_ZN9ClearCore10NvmManager8InstanceEv>
   11b82:	4b01      	ldr	r3, [pc, #4]	; (11b88 <_GLOBAL__sub_I__ZN9ClearCore6NvmMgrE+0xc>)
   11b84:	6018      	str	r0, [r3, #0]
   11b86:	bd08      	pop	{r3, pc}
   11b88:	20001f18 	.word	0x20001f18

00011b8c <_dummy_func_no_return>:
static bool _dummy_func_no_return(uint32_t unused0, uint32_t unused1)
{
	(void)unused0;
	(void)unused1;
	return false;
}
   11b8c:	2000      	movs	r0, #0
   11b8e:	4770      	bx	lr

00011b90 <_usb_d_dev_in_next>:
 * \brief Prepare next IN transactions
 * \param[in] ept Pointer to endpoint information.
 * \param[in] isr Invoked from ISR.
 */
static void _usb_d_dev_in_next(struct _usb_d_dev_ep *ept, bool isr)
{
   11b90:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   11b94:	4605      	mov	r5, r0
	Usb *              hw          = USB;
	uint8_t            epn         = USB_EP_GET_N(ept->ep);
   11b96:	7c80      	ldrb	r0, [r0, #18]
	UsbDeviceDescBank *bank        = &prvt_inst.desc_table[epn].DeviceDescBank[0];
	uint16_t           trans_count = isr ? bank[1].PCKSIZE.bit.BYTE_COUNT : 0;
   11b98:	460f      	mov	r7, r1
	uint8_t            epn         = USB_EP_GET_N(ept->ep);
   11b9a:	f000 040f 	and.w	r4, r0, #15
	uint16_t           trans_count = isr ? bank[1].PCKSIZE.bit.BYTE_COUNT : 0;
   11b9e:	2900      	cmp	r1, #0
   11ba0:	d04f      	beq.n	11c42 <_usb_d_dev_in_next+0xb2>
	UsbDeviceDescBank *bank        = &prvt_inst.desc_table[epn].DeviceDescBank[0];
   11ba2:	4b55      	ldr	r3, [pc, #340]	; (11cf8 <_usb_d_dev_in_next+0x168>)
	uint16_t           trans_next;
	uint16_t           last_pkt = trans_count & ((ept->size == 1023) ? ept->size : (ept->size - 1));
   11ba4:	f8b5 e010 	ldrh.w	lr, [r5, #16]
	UsbDeviceDescBank *bank        = &prvt_inst.desc_table[epn].DeviceDescBank[0];
   11ba8:	eb03 1344 	add.w	r3, r3, r4, lsl #5
	uint16_t           last_pkt = trans_count & ((ept->size == 1023) ? ept->size : (ept->size - 1));
   11bac:	f240 36ff 	movw	r6, #1023	; 0x3ff
	uint16_t           trans_count = isr ? bank[1].PCKSIZE.bit.BYTE_COUNT : 0;
   11bb0:	695b      	ldr	r3, [r3, #20]
	uint16_t           last_pkt = trans_count & ((ept->size == 1023) ? ept->size : (ept->size - 1));
   11bb2:	45b6      	cmp	lr, r6
	uint16_t           trans_count = isr ? bank[1].PCKSIZE.bit.BYTE_COUNT : 0;
   11bb4:	f3c3 030d 	ubfx	r3, r3, #0, #14
   11bb8:	b299      	uxth	r1, r3
	uint16_t           last_pkt = trans_count & ((ept->size == 1023) ? ept->size : (ept->size - 1));
   11bba:	f000 8095 	beq.w	11ce8 <_usb_d_dev_in_next+0x158>
   11bbe:	f10e 32ff 	add.w	r2, lr, #4294967295
	uint8_t            inten    = 0;
	bool               is_ctrl  = _usb_d_dev_ep_is_ctrl(ept);
   11bc2:	f895 c013 	ldrb.w	ip, [r5, #19]
   11bc6:	401a      	ands	r2, r3
   11bc8:	b292      	uxth	r2, r2
   11bca:	f00c 0807 	and.w	r8, ip, #7
}

static inline void hri_usbendpoint_clear_EPINTFLAG_reg(const void *const hw, uint8_t submodule_index,
                                                       hri_usbendpoint_epintflag_reg_t mask)
{
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg = mask;
   11bce:	0163      	lsls	r3, r4, #5
   11bd0:	f103 4382 	add.w	r3, r3, #1090519040	; 0x41000000
   11bd4:	2602      	movs	r6, #2
   11bd6:	f883 6107 	strb.w	r6, [r3, #263]	; 0x107

	if (isr) {
		_usbd_ep_ack_io_cpt(epn, 1);
	}

	ept->trans_count += trans_count;
   11bda:	68ab      	ldr	r3, [r5, #8]
	/* Send more data. */
	if (ept->trans_count < ept->trans_size) {
   11bdc:	686e      	ldr	r6, [r5, #4]
	ept->trans_count += trans_count;
   11bde:	4419      	add	r1, r3
	if (ept->trans_count < ept->trans_size) {
   11be0:	42b1      	cmp	r1, r6
	ept->trans_count += trans_count;
   11be2:	60a9      	str	r1, [r5, #8]
	if (ept->trans_count < ept->trans_size) {
   11be4:	d235      	bcs.n	11c52 <_usb_d_dev_in_next+0xc2>
		trans_next = ept->trans_size - ept->trans_count;
   11be6:	1a76      	subs	r6, r6, r1
		if (ept->flags.bits.use_cache) {
   11be8:	f01c 0f20 	tst.w	ip, #32
		trans_next = ept->trans_size - ept->trans_count;
   11bec:	b2b6      	uxth	r6, r6
		if (ept->flags.bits.use_cache) {
   11bee:	d05e      	beq.n	11cae <_usb_d_dev_in_next+0x11e>
			if (trans_next > ept->size) {
				trans_next = ept->size;
			}
			memcpy(ept->cache, &ept->trans_buf[ept->trans_count], trans_next);
   11bf0:	682b      	ldr	r3, [r5, #0]
   11bf2:	68e8      	ldr	r0, [r5, #12]
   11bf4:	4576      	cmp	r6, lr
   11bf6:	bf28      	it	cs
   11bf8:	4676      	movcs	r6, lr
   11bfa:	4419      	add	r1, r3
   11bfc:	4632      	mov	r2, r6
   11bfe:	f00c faff 	bl	1e200 <memcpy>
	bank->ADDR.reg          = addr;
   11c02:	4b3d      	ldr	r3, [pc, #244]	; (11cf8 <_usb_d_dev_in_next+0x168>)
			_usbd_ep_set_buf(epn, 1, (uint32_t)ept->cache);
   11c04:	68e8      	ldr	r0, [r5, #12]
	bank->ADDR.reg          = addr;
   11c06:	0162      	lsls	r2, r4, #5
   11c08:	1899      	adds	r1, r3, r2
   11c0a:	6108      	str	r0, [r1, #16]
	bank->PCKSIZE.bit.BYTE_COUNT = size;
   11c0c:	4413      	add	r3, r2
   11c0e:	6959      	ldr	r1, [r3, #20]
   11c10:	f366 010d 	bfi	r1, r6, #0, #14
   11c14:	6159      	str	r1, [r3, #20]
	bank->PCKSIZE.bit.MULTI_PACKET_SIZE = count;
   11c16:	6959      	ldr	r1, [r3, #20]
   11c18:	f36f 319b 	bfc	r1, #14, #14
   11c1c:	6159      	str	r1, [r3, #20]
	/* Finish normally. */
	_usb_d_dev_trans_done(ept, USB_TRANS_DONE);
	return;

_in_tx_exec:
	if (!isr) {
   11c1e:	b947      	cbnz	r7, 11c32 <_usb_d_dev_in_next+0xa2>
}

static inline void hri_usbendpoint_set_EPINTEN_reg(const void *const hw, uint8_t submodule_index,
                                                   hri_usbendpoint_epintenset_reg_t mask)
{
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENSET.reg = mask;
   11c20:	f102 4382 	add.w	r3, r2, #1090519040	; 0x41000000
			/* Control endpoint: SETUP or OUT will abort IN transaction.
			 * SETUP: terminate the IN without any notification. Trigger
			 *        SETUP callback.
			 * OUT NAK: terminate IN.
			 */
			inten = USB_D_BANK1_INT_FLAGS | USB_DEVICE_EPINTFLAG_TRFAIL0;
   11c24:	f1b8 0f01 	cmp.w	r8, #1
   11c28:	bf14      	ite	ne
   11c2a:	224a      	movne	r2, #74	; 0x4a
   11c2c:	224e      	moveq	r2, #78	; 0x4e
   11c2e:	f883 2109 	strb.w	r2, [r3, #265]	; 0x109
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSSET.reg = mask;
   11c32:	0164      	lsls	r4, r4, #5
   11c34:	f104 4482 	add.w	r4, r4, #1090519040	; 0x41000000
   11c38:	2380      	movs	r3, #128	; 0x80
   11c3a:	f884 3105 	strb.w	r3, [r4, #261]	; 0x105
   11c3e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	bool               is_ctrl  = _usb_d_dev_ep_is_ctrl(ept);
   11c42:	f895 c013 	ldrb.w	ip, [r5, #19]
	uint16_t           last_pkt = trans_count & ((ept->size == 1023) ? ept->size : (ept->size - 1));
   11c46:	f8b5 e010 	ldrh.w	lr, [r5, #16]
	bool               is_ctrl  = _usb_d_dev_ep_is_ctrl(ept);
   11c4a:	f00c 0807 	and.w	r8, ip, #7
   11c4e:	460a      	mov	r2, r1
   11c50:	e7c3      	b.n	11bda <_usb_d_dev_in_next+0x4a>
	} else if (ept->flags.bits.need_zlp) {
   11c52:	f01c 0f10 	tst.w	ip, #16
   11c56:	d11a      	bne.n	11c8e <_usb_d_dev_in_next+0xfe>
}

static inline void hri_usbendpoint_clear_EPINTEN_reg(const void *const hw, uint8_t submodule_index,
                                                     hri_usbendpoint_epintenset_reg_t mask)
{
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENCLR.reg = mask;
   11c58:	0164      	lsls	r4, r4, #5
	if (is_ctrl) {
   11c5a:	f1b8 0f01 	cmp.w	r8, #1
   11c5e:	f104 4482 	add.w	r4, r4, #1090519040	; 0x41000000
   11c62:	bf0c      	ite	eq
   11c64:	234b      	moveq	r3, #75	; 0x4b
   11c66:	234a      	movne	r3, #74	; 0x4a
	if (last_pkt == ept->size) {
   11c68:	4596      	cmp	lr, r2
   11c6a:	f884 3108 	strb.w	r3, [r4, #264]	; 0x108
   11c6e:	d02c      	beq.n	11cca <_usb_d_dev_in_next+0x13a>
 * \param[in, out] ept Pointer to endpoint information.
 * \param[in] code Information code passed.
 */
static void _usb_d_dev_trans_done(struct _usb_d_dev_ep *ept, const int32_t code)
{
	if (!(_usb_d_dev_ep_is_used(ept) && _usb_d_dev_ep_is_busy(ept))) {
   11c70:	28ff      	cmp	r0, #255	; 0xff
   11c72:	d028      	beq.n	11cc6 <_usb_d_dev_in_next+0x136>
   11c74:	7ceb      	ldrb	r3, [r5, #19]
   11c76:	065a      	lsls	r2, r3, #25
   11c78:	d525      	bpl.n	11cc6 <_usb_d_dev_in_next+0x136>
		return;
	}
	ept->flags.bits.is_busy = 0;
   11c7a:	f36f 1386 	bfc	r3, #6, #1
	dev_inst.ep_callbacks.done(ept->ep, code, ept->trans_count);
   11c7e:	491f      	ldr	r1, [pc, #124]	; (11cfc <_usb_d_dev_in_next+0x16c>)
	ept->flags.bits.is_busy = 0;
   11c80:	74eb      	strb	r3, [r5, #19]
	dev_inst.ep_callbacks.done(ept->ep, code, ept->trans_count);
   11c82:	68aa      	ldr	r2, [r5, #8]
   11c84:	690b      	ldr	r3, [r1, #16]
}
   11c86:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	dev_inst.ep_callbacks.done(ept->ep, code, ept->trans_count);
   11c8a:	2100      	movs	r1, #0
   11c8c:	4718      	bx	r3
		ept->flags.bits.need_zlp = 0;
   11c8e:	7ce9      	ldrb	r1, [r5, #19]
	bank->PCKSIZE.bit.BYTE_COUNT = size;
   11c90:	4b1b      	ldr	r3, [pc, #108]	; (11d00 <_usb_d_dev_in_next+0x170>)
   11c92:	0162      	lsls	r2, r4, #5
   11c94:	4413      	add	r3, r2
		ept->flags.bits.need_zlp = 0;
   11c96:	f36f 1104 	bfc	r1, #4, #1
   11c9a:	74e9      	strb	r1, [r5, #19]
	bank->PCKSIZE.bit.BYTE_COUNT = size;
   11c9c:	6859      	ldr	r1, [r3, #4]
   11c9e:	f36f 010d 	bfc	r1, #0, #14
   11ca2:	6059      	str	r1, [r3, #4]
	bank->PCKSIZE.bit.MULTI_PACKET_SIZE = count;
   11ca4:	6859      	ldr	r1, [r3, #4]
   11ca6:	f36f 319b 	bfc	r1, #14, #14
   11caa:	6059      	str	r1, [r3, #4]
   11cac:	e7b7      	b.n	11c1e <_usb_d_dev_in_next+0x8e>
	bank->ADDR.reg          = addr;
   11cae:	4b12      	ldr	r3, [pc, #72]	; (11cf8 <_usb_d_dev_in_next+0x168>)
			_usbd_ep_set_buf(epn, 1, (uint32_t)&ept->trans_buf[ept->trans_count]);
   11cb0:	6828      	ldr	r0, [r5, #0]
	bank->ADDR.reg          = addr;
   11cb2:	0162      	lsls	r2, r4, #5
   11cb4:	189d      	adds	r5, r3, r2
			_usbd_ep_set_buf(epn, 1, (uint32_t)&ept->trans_buf[ept->trans_count]);
   11cb6:	4401      	add	r1, r0
   11cb8:	f5b6 5f00 	cmp.w	r6, #8192	; 0x2000
   11cbc:	bf28      	it	cs
   11cbe:	f44f 5600 	movcs.w	r6, #8192	; 0x2000
	bank->ADDR.reg          = addr;
   11cc2:	6129      	str	r1, [r5, #16]
   11cc4:	e7a2      	b.n	11c0c <_usb_d_dev_in_next+0x7c>
   11cc6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		ept->flags.bits.is_busy = 0;
   11cca:	7ceb      	ldrb	r3, [r5, #19]
		if (dev_inst.ep_callbacks.more(ept->ep, ept->trans_count)) {
   11ccc:	4a0b      	ldr	r2, [pc, #44]	; (11cfc <_usb_d_dev_in_next+0x16c>)
		ept->flags.bits.is_busy = 0;
   11cce:	f36f 1386 	bfc	r3, #6, #1
   11cd2:	74eb      	strb	r3, [r5, #19]
		if (dev_inst.ep_callbacks.more(ept->ep, ept->trans_count)) {
   11cd4:	68d3      	ldr	r3, [r2, #12]
   11cd6:	4798      	blx	r3
   11cd8:	2800      	cmp	r0, #0
   11cda:	d1f4      	bne.n	11cc6 <_usb_d_dev_in_next+0x136>
		ept->flags.bits.is_busy = 1;
   11cdc:	7ceb      	ldrb	r3, [r5, #19]
   11cde:	7ca8      	ldrb	r0, [r5, #18]
   11ce0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   11ce4:	74eb      	strb	r3, [r5, #19]
   11ce6:	e7c3      	b.n	11c70 <_usb_d_dev_in_next+0xe0>
	bool               is_ctrl  = _usb_d_dev_ep_is_ctrl(ept);
   11ce8:	f895 c013 	ldrb.w	ip, [r5, #19]
	uint16_t           last_pkt = trans_count & ((ept->size == 1023) ? ept->size : (ept->size - 1));
   11cec:	f3c1 0209 	ubfx	r2, r1, #0, #10
	bool               is_ctrl  = _usb_d_dev_ep_is_ctrl(ept);
   11cf0:	f00c 0807 	and.w	r8, ip, #7
   11cf4:	e76b      	b.n	11bce <_usb_d_dev_in_next+0x3e>
   11cf6:	bf00      	nop
   11cf8:	20002210 	.word	0x20002210
   11cfc:	20001fe0 	.word	0x20001fe0
   11d00:	20002220 	.word	0x20002220

00011d04 <_usb_d_dev_out_next>:
{
   11d04:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	uint8_t            epn        = USB_EP_GET_N(ept->ep);
   11d08:	7c85      	ldrb	r5, [r0, #18]
{
   11d0a:	b083      	sub	sp, #12
   11d0c:	4604      	mov	r4, r0
	uint16_t           trans_size = isr ? bank->PCKSIZE.bit.MULTI_PACKET_SIZE : 0;
   11d0e:	460f      	mov	r7, r1
	uint8_t            epn        = USB_EP_GET_N(ept->ep);
   11d10:	f005 050f 	and.w	r5, r5, #15
	uint16_t           trans_size = isr ? bank->PCKSIZE.bit.MULTI_PACKET_SIZE : 0;
   11d14:	2900      	cmp	r1, #0
   11d16:	f000 8085 	beq.w	11e24 <_usb_d_dev_out_next+0x120>
   11d1a:	4b76      	ldr	r3, [pc, #472]	; (11ef4 <_usb_d_dev_out_next+0x1f0>)
	uint16_t           size_mask  = (ept->size == 1023) ? 1023 : (ept->size - 1);
   11d1c:	8a06      	ldrh	r6, [r0, #16]
	uint16_t           trans_size = isr ? bank->PCKSIZE.bit.MULTI_PACKET_SIZE : 0;
   11d1e:	ea4f 1845 	mov.w	r8, r5, lsl #5
   11d22:	4443      	add	r3, r8
	uint16_t           size_mask  = (ept->size == 1023) ? 1023 : (ept->size - 1);
   11d24:	f240 32ff 	movw	r2, #1023	; 0x3ff
	uint16_t           trans_size = isr ? bank->PCKSIZE.bit.MULTI_PACKET_SIZE : 0;
   11d28:	6859      	ldr	r1, [r3, #4]
	uint16_t           last_trans = isr ? bank->PCKSIZE.bit.BYTE_COUNT : 0;
   11d2a:	685b      	ldr	r3, [r3, #4]
	uint16_t           size_mask  = (ept->size == 1023) ? 1023 : (ept->size - 1);
   11d2c:	4296      	cmp	r6, r2
	uint16_t           trans_size = isr ? bank->PCKSIZE.bit.MULTI_PACKET_SIZE : 0;
   11d2e:	f3c1 3a8d 	ubfx	sl, r1, #14, #14
	uint16_t           last_trans = isr ? bank->PCKSIZE.bit.BYTE_COUNT : 0;
   11d32:	f3c3 090d 	ubfx	r9, r3, #0, #14
	uint16_t           size_mask  = (ept->size == 1023) ? 1023 : (ept->size - 1);
   11d36:	f000 80d7 	beq.w	11ee8 <_usb_d_dev_out_next+0x1e4>
   11d3a:	3e01      	subs	r6, #1
	bool               is_ctrl = _usb_d_dev_ep_is_ctrl(ept);
   11d3c:	7cc2      	ldrb	r2, [r0, #19]
   11d3e:	b2b6      	uxth	r6, r6
   11d40:	ea09 0306 	and.w	r3, r9, r6
   11d44:	f002 0b07 	and.w	fp, r2, #7
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg = mask;
   11d48:	0169      	lsls	r1, r5, #5
   11d4a:	f101 4182 	add.w	r1, r1, #1090519040	; 0x41000000
   11d4e:	2001      	movs	r0, #1
   11d50:	f881 0107 	strb.w	r0, [r1, #263]	; 0x107
	if (ept->flags.bits.use_cache && ept->trans_size) {
   11d54:	0691      	lsls	r1, r2, #26
   11d56:	d512      	bpl.n	11d7e <_usb_d_dev_out_next+0x7a>
   11d58:	f8d4 e004 	ldr.w	lr, [r4, #4]
   11d5c:	f1be 0f00 	cmp.w	lr, #0
   11d60:	d048      	beq.n	11df4 <_usb_d_dev_out_next+0xf0>
		uint16_t buf_remain = ept->trans_size - ept->trans_count;
   11d62:	68a0      	ldr	r0, [r4, #8]
		memcpy(&ept->trans_buf[ept->trans_count], ept->cache, (buf_remain > last_pkt) ? last_pkt : buf_remain);
   11d64:	9301      	str	r3, [sp, #4]
		uint16_t buf_remain = ept->trans_size - ept->trans_count;
   11d66:	ebae 0200 	sub.w	r2, lr, r0
   11d6a:	b292      	uxth	r2, r2
		memcpy(&ept->trans_buf[ept->trans_count], ept->cache, (buf_remain > last_pkt) ? last_pkt : buf_remain);
   11d6c:	429a      	cmp	r2, r3
   11d6e:	bf28      	it	cs
   11d70:	461a      	movcs	r2, r3
   11d72:	6823      	ldr	r3, [r4, #0]
   11d74:	68e1      	ldr	r1, [r4, #12]
   11d76:	4418      	add	r0, r3
   11d78:	f00c fa42 	bl	1e200 <memcpy>
   11d7c:	9b01      	ldr	r3, [sp, #4]
	if (ept->trans_size == 0 && ept->flags.bits.need_zlp) {
   11d7e:	6862      	ldr	r2, [r4, #4]
   11d80:	2a00      	cmp	r2, #0
   11d82:	d036      	beq.n	11df2 <_usb_d_dev_out_next+0xee>
	} else if (isr && last_pkt < ept->size) {
   11d84:	2f00      	cmp	r7, #0
   11d86:	d15b      	bne.n	11e40 <_usb_d_dev_out_next+0x13c>
		ept->trans_count += trans_size;
   11d88:	68a3      	ldr	r3, [r4, #8]
   11d8a:	4453      	add	r3, sl
		if (ept->trans_count < ept->trans_size) {
   11d8c:	429a      	cmp	r2, r3
		ept->trans_count += trans_size;
   11d8e:	60a3      	str	r3, [r4, #8]
		if (ept->trans_count < ept->trans_size) {
   11d90:	d960      	bls.n	11e54 <_usb_d_dev_out_next+0x150>
			if (ept->flags.bits.use_cache) {
   11d92:	7ce1      	ldrb	r1, [r4, #19]
			trans_next = ept->trans_size - ept->trans_count;
   11d94:	1ad2      	subs	r2, r2, r3
			if (ept->flags.bits.use_cache) {
   11d96:	0688      	lsls	r0, r1, #26
			trans_next = ept->trans_size - ept->trans_count;
   11d98:	b292      	uxth	r2, r2
			if (ept->flags.bits.use_cache) {
   11d9a:	f140 808b 	bpl.w	11eb4 <_usb_d_dev_out_next+0x1b0>
   11d9e:	8a26      	ldrh	r6, [r4, #16]
	bank->ADDR.reg          = addr;
   11da0:	4954      	ldr	r1, [pc, #336]	; (11ef4 <_usb_d_dev_out_next+0x1f0>)
				_usbd_ep_set_buf(epn, 0, (uint32_t)ept->cache);
   11da2:	68e3      	ldr	r3, [r4, #12]
	bank->ADDR.reg          = addr;
   11da4:	f841 3008 	str.w	r3, [r1, r8]
   11da8:	42b2      	cmp	r2, r6
   11daa:	bf28      	it	cs
   11dac:	4632      	movcs	r2, r6
   11dae:	f3c2 020d 	ubfx	r2, r2, #0, #14
	bank->PCKSIZE.bit.MULTI_PACKET_SIZE = size;
   11db2:	eb01 0308 	add.w	r3, r1, r8
   11db6:	6858      	ldr	r0, [r3, #4]
   11db8:	f362 309b 	bfi	r0, r2, #14, #14
   11dbc:	6058      	str	r0, [r3, #4]
	bank->PCKSIZE.bit.BYTE_COUNT = count;
   11dbe:	685a      	ldr	r2, [r3, #4]
   11dc0:	f36f 020d 	bfc	r2, #0, #14
   11dc4:	605a      	str	r2, [r3, #4]
	if (!isr) {
   11dc6:	b95f      	cbnz	r7, 11de0 <_usb_d_dev_out_next+0xdc>
		if (is_ctrl) {
   11dc8:	f1bb 0f01 	cmp.w	fp, #1
	bank->STATUS_BK.reg     = 0;
   11dcc:	bf08      	it	eq
   11dce:	4441      	addeq	r1, r8
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENSET.reg = mask;
   11dd0:	f108 4882 	add.w	r8, r8, #1090519040	; 0x41000000
			inten = USB_D_BANK0_INT_FLAGS | USB_DEVICE_EPINTFLAG_TRFAIL1;
   11dd4:	bf0a      	itet	eq
   11dd6:	232d      	moveq	r3, #45	; 0x2d
			inten = USB_D_BANK0_INT_FLAGS;
   11dd8:	2325      	movne	r3, #37	; 0x25
	bank->STATUS_BK.reg     = 0;
   11dda:	768f      	strbeq	r7, [r1, #26]
   11ddc:	f888 3109 	strb.w	r3, [r8, #265]	; 0x109
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSCLR.reg = mask;
   11de0:	016d      	lsls	r5, r5, #5
   11de2:	f105 4582 	add.w	r5, r5, #1090519040	; 0x41000000
   11de6:	2340      	movs	r3, #64	; 0x40
   11de8:	f885 3104 	strb.w	r3, [r5, #260]	; 0x104
}
   11dec:	b003      	add	sp, #12
   11dee:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   11df2:	7ce2      	ldrb	r2, [r4, #19]
	if (ept->trans_size == 0 && ept->flags.bits.need_zlp) {
   11df4:	06d6      	lsls	r6, r2, #27
   11df6:	d54b      	bpl.n	11e90 <_usb_d_dev_out_next+0x18c>
		ept->flags.bits.need_zlp  = 0;
   11df8:	7ce3      	ldrb	r3, [r4, #19]
	bank->ADDR.reg          = addr;
   11dfa:	493e      	ldr	r1, [pc, #248]	; (11ef4 <_usb_d_dev_out_next+0x1f0>)
		_usbd_ep_set_buf(epn, 0, (uint32_t)ept->cache);
   11dfc:	68e2      	ldr	r2, [r4, #12]
		ept->flags.bits.use_cache = 1;
   11dfe:	f003 03ef 	and.w	r3, r3, #239	; 0xef
   11e02:	f043 0320 	orr.w	r3, r3, #32
   11e06:	74e3      	strb	r3, [r4, #19]
	bank->ADDR.reg          = addr;
   11e08:	f841 2008 	str.w	r2, [r1, r8]
   11e0c:	eb01 0308 	add.w	r3, r1, r8
	bank->PCKSIZE.bit.MULTI_PACKET_SIZE = size;
   11e10:	8a20      	ldrh	r0, [r4, #16]
   11e12:	685a      	ldr	r2, [r3, #4]
   11e14:	f360 329b 	bfi	r2, r0, #14, #14
   11e18:	605a      	str	r2, [r3, #4]
	bank->PCKSIZE.bit.BYTE_COUNT = count;
   11e1a:	685a      	ldr	r2, [r3, #4]
   11e1c:	f36f 020d 	bfc	r2, #0, #14
   11e20:	605a      	str	r2, [r3, #4]
   11e22:	e7d0      	b.n	11dc6 <_usb_d_dev_out_next+0xc2>
	uint16_t           size_mask  = (ept->size == 1023) ? 1023 : (ept->size - 1);
   11e24:	8a06      	ldrh	r6, [r0, #16]
	bool               is_ctrl = _usb_d_dev_ep_is_ctrl(ept);
   11e26:	7cc2      	ldrb	r2, [r0, #19]
	uint16_t           size_mask  = (ept->size == 1023) ? 1023 : (ept->size - 1);
   11e28:	f240 33ff 	movw	r3, #1023	; 0x3ff
   11e2c:	429e      	cmp	r6, r3
   11e2e:	d137      	bne.n	11ea0 <_usb_d_dev_out_next+0x19c>
	uint16_t           trans_size = isr ? bank->PCKSIZE.bit.MULTI_PACKET_SIZE : 0;
   11e30:	46ba      	mov	sl, r7
	bool               is_ctrl = _usb_d_dev_ep_is_ctrl(ept);
   11e32:	f002 0b07 	and.w	fp, r2, #7
	uint16_t           last_pkt   = last_trans & size_mask;
   11e36:	463b      	mov	r3, r7
	uint16_t           last_trans = isr ? bank->PCKSIZE.bit.BYTE_COUNT : 0;
   11e38:	46b9      	mov	r9, r7
   11e3a:	ea4f 1845 	mov.w	r8, r5, lsl #5
   11e3e:	e789      	b.n	11d54 <_usb_d_dev_out_next+0x50>
	} else if (isr && last_pkt < ept->size) {
   11e40:	8a21      	ldrh	r1, [r4, #16]
   11e42:	4299      	cmp	r1, r3
   11e44:	d9a0      	bls.n	11d88 <_usb_d_dev_out_next+0x84>
		ept->flags.bits.need_zlp = 0;
   11e46:	7ce2      	ldrb	r2, [r4, #19]
		ept->trans_count += last_trans;
   11e48:	68a3      	ldr	r3, [r4, #8]
		ept->flags.bits.need_zlp = 0;
   11e4a:	f36f 1204 	bfc	r2, #4, #1
		ept->trans_count += last_trans;
   11e4e:	444b      	add	r3, r9
		ept->flags.bits.need_zlp = 0;
   11e50:	74e2      	strb	r2, [r4, #19]
		ept->trans_count += last_trans;
   11e52:	60a3      	str	r3, [r4, #8]
	if (is_ctrl) {
   11e54:	f1bb 0f01 	cmp.w	fp, #1
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENCLR.reg = mask;
   11e58:	f108 4882 	add.w	r8, r8, #1090519040	; 0x41000000
   11e5c:	bf0c      	ite	eq
   11e5e:	232d      	moveq	r3, #45	; 0x2d
   11e60:	2325      	movne	r3, #37	; 0x25
   11e62:	f888 3108 	strb.w	r3, [r8, #264]	; 0x108
	if (0 == epn) {
   11e66:	b915      	cbnz	r5, 11e6e <_usb_d_dev_out_next+0x16a>
	bank->ADDR.reg          = addr;
   11e68:	4b22      	ldr	r3, [pc, #136]	; (11ef4 <_usb_d_dev_out_next+0x1f0>)
		_usbd_ep_set_buf(epn, 0, (uint32_t)ept->cache);
   11e6a:	68e2      	ldr	r2, [r4, #12]
	bank->ADDR.reg          = addr;
   11e6c:	601a      	str	r2, [r3, #0]
	if (!(_usb_d_dev_ep_is_used(ept) && _usb_d_dev_ep_is_busy(ept))) {
   11e6e:	7ca0      	ldrb	r0, [r4, #18]
   11e70:	28ff      	cmp	r0, #255	; 0xff
   11e72:	d0bb      	beq.n	11dec <_usb_d_dev_out_next+0xe8>
   11e74:	7ce3      	ldrb	r3, [r4, #19]
   11e76:	065a      	lsls	r2, r3, #25
   11e78:	d5b8      	bpl.n	11dec <_usb_d_dev_out_next+0xe8>
	ept->flags.bits.is_busy = 0;
   11e7a:	f36f 1386 	bfc	r3, #6, #1
	dev_inst.ep_callbacks.done(ept->ep, code, ept->trans_count);
   11e7e:	491e      	ldr	r1, [pc, #120]	; (11ef8 <_usb_d_dev_out_next+0x1f4>)
	ept->flags.bits.is_busy = 0;
   11e80:	74e3      	strb	r3, [r4, #19]
	dev_inst.ep_callbacks.done(ept->ep, code, ept->trans_count);
   11e82:	690b      	ldr	r3, [r1, #16]
   11e84:	68a2      	ldr	r2, [r4, #8]
   11e86:	2100      	movs	r1, #0
}
   11e88:	b003      	add	sp, #12
   11e8a:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	dev_inst.ep_callbacks.done(ept->ep, code, ept->trans_count);
   11e8e:	4718      	bx	r3
	} else if (isr && last_pkt < ept->size) {
   11e90:	b117      	cbz	r7, 11e98 <_usb_d_dev_out_next+0x194>
   11e92:	8a22      	ldrh	r2, [r4, #16]
   11e94:	429a      	cmp	r2, r3
   11e96:	d8d6      	bhi.n	11e46 <_usb_d_dev_out_next+0x142>
		ept->trans_count += trans_size;
   11e98:	68a3      	ldr	r3, [r4, #8]
   11e9a:	4453      	add	r3, sl
   11e9c:	60a3      	str	r3, [r4, #8]
   11e9e:	e7d9      	b.n	11e54 <_usb_d_dev_out_next+0x150>
   11ea0:	3e01      	subs	r6, #1
   11ea2:	b2b6      	uxth	r6, r6
	bool               is_ctrl = _usb_d_dev_ep_is_ctrl(ept);
   11ea4:	f002 0b07 	and.w	fp, r2, #7
	uint16_t           trans_size = isr ? bank->PCKSIZE.bit.MULTI_PACKET_SIZE : 0;
   11ea8:	468a      	mov	sl, r1
	bool               is_ctrl = _usb_d_dev_ep_is_ctrl(ept);
   11eaa:	460b      	mov	r3, r1
	uint16_t           last_trans = isr ? bank->PCKSIZE.bit.BYTE_COUNT : 0;
   11eac:	4689      	mov	r9, r1
   11eae:	ea4f 1845 	mov.w	r8, r5, lsl #5
   11eb2:	e74f      	b.n	11d54 <_usb_d_dev_out_next+0x50>
				if (trans_next > ept->size) {
   11eb4:	8a20      	ldrh	r0, [r4, #16]
   11eb6:	4282      	cmp	r2, r0
   11eb8:	d905      	bls.n	11ec6 <_usb_d_dev_out_next+0x1c2>
					if (trans_next > USB_D_DEV_TRANS_MAX) {
   11eba:	f5b2 5f00 	cmp.w	r2, #8192	; 0x2000
   11ebe:	d90e      	bls.n	11ede <_usb_d_dev_out_next+0x1da>
   11ec0:	f44f 5200 	mov.w	r2, #8192	; 0x2000
   11ec4:	e005      	b.n	11ed2 <_usb_d_dev_out_next+0x1ce>
					ept->flags.bits.use_cache = 1;
   11ec6:	bf3c      	itt	cc
   11ec8:	f041 0120 	orrcc.w	r1, r1, #32
   11ecc:	74e1      	strbcc	r1, [r4, #19]
   11ece:	f3c2 020d 	ubfx	r2, r2, #0, #14
				_usbd_ep_set_buf(epn, 0, (uint32_t)&ept->trans_buf[ept->trans_count]);
   11ed2:	6820      	ldr	r0, [r4, #0]
	bank->ADDR.reg          = addr;
   11ed4:	4907      	ldr	r1, [pc, #28]	; (11ef4 <_usb_d_dev_out_next+0x1f0>)
				_usbd_ep_set_buf(epn, 0, (uint32_t)&ept->trans_buf[ept->trans_count]);
   11ed6:	4403      	add	r3, r0
	bank->ADDR.reg          = addr;
   11ed8:	f841 3008 	str.w	r3, [r1, r8]
   11edc:	e769      	b.n	11db2 <_usb_d_dev_out_next+0xae>
   11ede:	ea22 0206 	bic.w	r2, r2, r6
   11ee2:	f3c2 020d 	ubfx	r2, r2, #0, #14
   11ee6:	e7f4      	b.n	11ed2 <_usb_d_dev_out_next+0x1ce>
	bool               is_ctrl = _usb_d_dev_ep_is_ctrl(ept);
   11ee8:	7cc2      	ldrb	r2, [r0, #19]
	uint16_t           last_pkt   = last_trans & size_mask;
   11eea:	f3c9 0309 	ubfx	r3, r9, #0, #10
	bool               is_ctrl = _usb_d_dev_ep_is_ctrl(ept);
   11eee:	f002 0b07 	and.w	fp, r2, #7
   11ef2:	e729      	b.n	11d48 <_usb_d_dev_out_next+0x44>
   11ef4:	20002210 	.word	0x20002210
   11ef8:	20001fe0 	.word	0x20001fe0

00011efc <_usb_d_dev_handler>:
{
   11efc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	uint16_t epint = hw->DEVICE.EPINTSMRY.reg;
   11f00:	f04f 4282 	mov.w	r2, #1090519040	; 0x41000000
{
   11f04:	b081      	sub	sp, #4
	uint16_t epint = hw->DEVICE.EPINTSMRY.reg;
   11f06:	8c16      	ldrh	r6, [r2, #32]
   11f08:	b2b6      	uxth	r6, r6
	if (0 == epint) {
   11f0a:	2e00      	cmp	r6, #0
   11f0c:	f000 812c 	beq.w	12168 <_usb_d_dev_handler+0x26c>
   11f10:	4dc4      	ldr	r5, [pc, #784]	; (12224 <_usb_d_dev_handler+0x328>)
	((Usb *)hw)->DEVICE.INTENCLR.reg = USB_DEVICE_INTENSET_LPMSUSP;
}

static inline void hri_usbdevice_set_INTEN_reg(const void *const hw, hri_usbdevice_intenset_reg_t mask)
{
	((Usb *)hw)->DEVICE.INTENSET.reg = mask;
   11f12:	2400      	movs	r4, #0
	if (!(epint & (1u << epn))) {
   11f14:	2701      	movs	r7, #1
		if (ept->ep == 0xFF) {
   11f16:	7ca8      	ldrb	r0, [r5, #18]
   11f18:	28ff      	cmp	r0, #255	; 0xff
   11f1a:	d030      	beq.n	11f7e <_usb_d_dev_handler+0x82>
	uint8_t epn = USB_EP_GET_N(ept->ep);
   11f1c:	f000 030f 	and.w	r3, r0, #15
	if (!(epint & (1u << epn))) {
   11f20:	fa07 f203 	lsl.w	r2, r7, r3
   11f24:	4232      	tst	r2, r6
   11f26:	d02a      	beq.n	11f7e <_usb_d_dev_handler+0x82>
   11f28:	ea4f 1e43 	mov.w	lr, r3, lsl #5
   11f2c:	f10e 4882 	add.w	r8, lr, #1090519040	; 0x41000000
	mask  = hw->DEVICE.DeviceEndpoint[epn].EPINTENSET.reg;
   11f30:	4672      	mov	r2, lr
	flags = hw->DEVICE.DeviceEndpoint[epn].EPINTFLAG.reg;
   11f32:	f898 1107 	ldrb.w	r1, [r8, #263]	; 0x107
	mask  = hw->DEVICE.DeviceEndpoint[epn].EPINTENSET.reg;
   11f36:	f898 3109 	ldrb.w	r3, [r8, #265]	; 0x109
	if (flags) {
   11f3a:	400b      	ands	r3, r1
	mask  = hw->DEVICE.DeviceEndpoint[epn].EPINTENSET.reg;
   11f3c:	46c1      	mov	r9, r8
	if (flags) {
   11f3e:	d01e      	beq.n	11f7e <_usb_d_dev_handler+0x82>
		if ((ept->flags.bits.eptype == 0x1) && !_usb_d_dev_ep_is_busy(ept)) {
   11f40:	49b9      	ldr	r1, [pc, #740]	; (12228 <_usb_d_dev_handler+0x32c>)
   11f42:	ea4f 0a84 	mov.w	sl, r4, lsl #2
   11f46:	eb0a 0c04 	add.w	ip, sl, r4
   11f4a:	eb01 0c8c 	add.w	ip, r1, ip, lsl #2
   11f4e:	f89c b027 	ldrb.w	fp, [ip, #39]	; 0x27
   11f52:	f00b 0147 	and.w	r1, fp, #71	; 0x47
   11f56:	2901      	cmp	r1, #1
   11f58:	f000 80f4 	beq.w	12144 <_usb_d_dev_handler+0x248>
		} else if (_usb_d_dev_ep_is_in(ept)) {
   11f5c:	f01b 0f80 	tst.w	fp, #128	; 0x80
   11f60:	d115      	bne.n	11f8e <_usb_d_dev_handler+0x92>
	if (flags & USB_DEVICE_EPINTFLAG_STALL0) {
   11f62:	f013 0120 	ands.w	r1, r3, #32
   11f66:	d15a      	bne.n	1201e <_usb_d_dev_handler+0x122>
	} else if (flags & USB_DEVICE_EPINTFLAG_TRFAIL0) {
   11f68:	f013 0f04 	tst.w	r3, #4
   11f6c:	f040 8098 	bne.w	120a0 <_usb_d_dev_handler+0x1a4>
	} else if (flags & USB_DEVICE_EPINTFLAG_TRCPT0) {
   11f70:	07d9      	lsls	r1, r3, #31
   11f72:	f100 80e2 	bmi.w	1213a <_usb_d_dev_handler+0x23e>
	} else if (_usb_d_dev_ep_is_ctrl(ept)) {
   11f76:	f00b 0107 	and.w	r1, fp, #7
   11f7a:	2901      	cmp	r1, #1
   11f7c:	d058      	beq.n	12030 <_usb_d_dev_handler+0x134>
   11f7e:	3401      	adds	r4, #1
	for (i = 0; i < USB_D_N_EP; i++) {
   11f80:	2c1b      	cmp	r4, #27
   11f82:	f105 0514 	add.w	r5, r5, #20
   11f86:	d1c6      	bne.n	11f16 <_usb_d_dev_handler+0x1a>
}
   11f88:	b001      	add	sp, #4
   11f8a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	if (flags & USB_DEVICE_EPINTFLAG_STALL1) {
   11f8e:	f013 0140 	ands.w	r1, r3, #64	; 0x40
   11f92:	f040 8143 	bne.w	1221c <_usb_d_dev_handler+0x320>
	} else if (flags & USB_DEVICE_EPINTFLAG_TRFAIL1) {
   11f96:	f013 0f08 	tst.w	r3, #8
   11f9a:	f040 8189 	bne.w	122b0 <_usb_d_dev_handler+0x3b4>
	} else if (flags & USB_DEVICE_EPINTFLAG_TRCPT1) {
   11f9e:	0799      	lsls	r1, r3, #30
   11fa0:	f100 8137 	bmi.w	12212 <_usb_d_dev_handler+0x316>
	} else if (_usb_d_dev_ep_is_ctrl(ept)) {
   11fa4:	f00b 0107 	and.w	r1, fp, #7
   11fa8:	2901      	cmp	r1, #1
   11faa:	d1e8      	bne.n	11f7e <_usb_d_dev_handler+0x82>
		if (flags & USB_DEVICE_EPINTFLAG_TRFAIL0) {
   11fac:	0759      	lsls	r1, r3, #29
   11fae:	f100 8241 	bmi.w	12434 <_usb_d_dev_handler+0x538>
		} else if (flags & USB_DEVICE_EPINTFLAG_RXSTP) {
   11fb2:	06db      	lsls	r3, r3, #27
   11fb4:	d5e3      	bpl.n	11f7e <_usb_d_dev_handler+0x82>
	if (_usb_d_dev_ep_is_busy(ept)) {
   11fb6:	f01b 0f40 	tst.w	fp, #64	; 0x40
   11fba:	d011      	beq.n	11fe0 <_usb_d_dev_handler+0xe4>
		ept->flags.bits.is_busy = 0;
   11fbc:	499a      	ldr	r1, [pc, #616]	; (12228 <_usb_d_dev_handler+0x32c>)
   11fbe:	eb0a 0304 	add.w	r3, sl, r4
   11fc2:	eb01 0383 	add.w	r3, r1, r3, lsl #2
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSCLR.reg = mask;
   11fc6:	f04f 0e80 	mov.w	lr, #128	; 0x80
   11fca:	f893 1027 	ldrb.w	r1, [r3, #39]	; 0x27
   11fce:	f36f 1186 	bfc	r1, #6, #1
   11fd2:	f883 1027 	strb.w	r1, [r3, #39]	; 0x27
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSSET.reg = mask;
   11fd6:	2340      	movs	r3, #64	; 0x40
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSCLR.reg = mask;
   11fd8:	f888 e104 	strb.w	lr, [r8, #260]	; 0x104
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSSET.reg = mask;
   11fdc:	f888 3105 	strb.w	r3, [r8, #261]	; 0x105
	ept->flags.bits.is_stalled = 0;
   11fe0:	4b91      	ldr	r3, [pc, #580]	; (12228 <_usb_d_dev_handler+0x32c>)
   11fe2:	eb0a 0104 	add.w	r1, sl, r4
   11fe6:	eb03 0181 	add.w	r1, r3, r1, lsl #2
	bank->STATUS_BK.reg     = 0;
   11fea:	4b90      	ldr	r3, [pc, #576]	; (1222c <_usb_d_dev_handler+0x330>)
	ept->flags.bits.is_stalled = 0;
   11fec:	f891 c027 	ldrb.w	ip, [r1, #39]	; 0x27
	bank->STATUS_BK.reg     = 0;
   11ff0:	eb03 0e02 	add.w	lr, r3, r2
	ept->flags.bits.is_stalled = 0;
   11ff4:	f36f 0cc3 	bfc	ip, #3, #1
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENCLR.reg = mask;
   11ff8:	f102 4382 	add.w	r3, r2, #1090519040	; 0x41000000
   11ffc:	f881 c027 	strb.w	ip, [r1, #39]	; 0x27
	bank->STATUS_BK.reg     = 0;
   12000:	f04f 0c00 	mov.w	ip, #0
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg = mask;
   12004:	216f      	movs	r1, #111	; 0x6f
   12006:	f88e c00a 	strb.w	ip, [lr, #10]
   1200a:	f88e c01a 	strb.w	ip, [lr, #26]
   1200e:	f888 1107 	strb.w	r1, [r8, #263]	; 0x107
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENCLR.reg = mask;
   12012:	f883 1108 	strb.w	r1, [r3, #264]	; 0x108
	dev_inst.ep_callbacks.setup(ept->ep);
   12016:	4b84      	ldr	r3, [pc, #528]	; (12228 <_usb_d_dev_handler+0x32c>)
   12018:	689b      	ldr	r3, [r3, #8]
   1201a:	4798      	blx	r3
   1201c:	e7af      	b.n	11f7e <_usb_d_dev_handler+0x82>
   1201e:	68aa      	ldr	r2, [r5, #8]
   12020:	2320      	movs	r3, #32
   12022:	f889 3108 	strb.w	r3, [r9, #264]	; 0x108
	dev_inst.ep_callbacks.done(ept->ep, USB_TRANS_STALL, ept->trans_count);
   12026:	4b80      	ldr	r3, [pc, #512]	; (12228 <_usb_d_dev_handler+0x32c>)
   12028:	2101      	movs	r1, #1
   1202a:	691b      	ldr	r3, [r3, #16]
   1202c:	4798      	blx	r3
   1202e:	e7a6      	b.n	11f7e <_usb_d_dev_handler+0x82>
		if (flags & USB_DEVICE_EPINTFLAG_TRFAIL1) {
   12030:	0719      	lsls	r1, r3, #28
   12032:	f100 80fd 	bmi.w	12230 <_usb_d_dev_handler+0x334>
		} else if (flags & USB_DEVICE_EPINTFLAG_RXSTP) {
   12036:	06db      	lsls	r3, r3, #27
   12038:	d5a1      	bpl.n	11f7e <_usb_d_dev_handler+0x82>
	if (_usb_d_dev_ep_is_busy(ept)) {
   1203a:	f01b 0f40 	tst.w	fp, #64	; 0x40
   1203e:	d011      	beq.n	12064 <_usb_d_dev_handler+0x168>
		ept->flags.bits.is_busy = 0;
   12040:	4979      	ldr	r1, [pc, #484]	; (12228 <_usb_d_dev_handler+0x32c>)
   12042:	eb0a 0304 	add.w	r3, sl, r4
   12046:	eb01 0383 	add.w	r3, r1, r3, lsl #2
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSCLR.reg = mask;
   1204a:	f04f 0e80 	mov.w	lr, #128	; 0x80
   1204e:	f893 1027 	ldrb.w	r1, [r3, #39]	; 0x27
   12052:	f36f 1186 	bfc	r1, #6, #1
   12056:	f883 1027 	strb.w	r1, [r3, #39]	; 0x27
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSSET.reg = mask;
   1205a:	2340      	movs	r3, #64	; 0x40
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSCLR.reg = mask;
   1205c:	f888 e104 	strb.w	lr, [r8, #260]	; 0x104
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSSET.reg = mask;
   12060:	f888 3105 	strb.w	r3, [r8, #261]	; 0x105
	ept->flags.bits.is_stalled = 0;
   12064:	4b70      	ldr	r3, [pc, #448]	; (12228 <_usb_d_dev_handler+0x32c>)
   12066:	eb0a 0104 	add.w	r1, sl, r4
   1206a:	eb03 0181 	add.w	r1, r3, r1, lsl #2
	bank->STATUS_BK.reg     = 0;
   1206e:	4b6f      	ldr	r3, [pc, #444]	; (1222c <_usb_d_dev_handler+0x330>)
	ept->flags.bits.is_stalled = 0;
   12070:	f891 c027 	ldrb.w	ip, [r1, #39]	; 0x27
	bank->STATUS_BK.reg     = 0;
   12074:	eb03 0e02 	add.w	lr, r3, r2
	ept->flags.bits.is_stalled = 0;
   12078:	f36f 0cc3 	bfc	ip, #3, #1
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENCLR.reg = mask;
   1207c:	f102 4382 	add.w	r3, r2, #1090519040	; 0x41000000
   12080:	f881 c027 	strb.w	ip, [r1, #39]	; 0x27
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg = mask;
   12084:	226f      	movs	r2, #111	; 0x6f
	bank->STATUS_BK.reg     = 0;
   12086:	2100      	movs	r1, #0
   12088:	f88e 100a 	strb.w	r1, [lr, #10]
   1208c:	f88e 101a 	strb.w	r1, [lr, #26]
   12090:	f888 2107 	strb.w	r2, [r8, #263]	; 0x107
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENCLR.reg = mask;
   12094:	f883 2108 	strb.w	r2, [r3, #264]	; 0x108
	dev_inst.ep_callbacks.setup(ept->ep);
   12098:	4b63      	ldr	r3, [pc, #396]	; (12228 <_usb_d_dev_handler+0x32c>)
   1209a:	689b      	ldr	r3, [r3, #8]
   1209c:	4798      	blx	r3
   1209e:	e76e      	b.n	11f7e <_usb_d_dev_handler+0x82>
	UsbDeviceDescBank *bank    = prvt_inst.desc_table[epn].DeviceDescBank;
   120a0:	4b62      	ldr	r3, [pc, #392]	; (1222c <_usb_d_dev_handler+0x330>)
	tmp = ((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPCFG.reg;
   120a2:	f898 c100 	ldrb.w	ip, [r8, #256]	; 0x100
   120a6:	449e      	add	lr, r3
	if ((eptype == USB_D_EPTYPE_ISOCH) && st.bit.CRCERR) {
   120a8:	f00c 0c07 	and.w	ip, ip, #7
	st.reg = bank[bank_n].STATUS_BK.reg;
   120ac:	f89e 300a 	ldrb.w	r3, [lr, #10]
	if ((eptype == USB_D_EPTYPE_ISOCH) && st.bit.CRCERR) {
   120b0:	f1bc 0f02 	cmp.w	ip, #2
	st.reg = bank[bank_n].STATUS_BK.reg;
   120b4:	b2db      	uxtb	r3, r3
	if ((eptype == USB_D_EPTYPE_ISOCH) && st.bit.CRCERR) {
   120b6:	d07c      	beq.n	121b2 <_usb_d_dev_handler+0x2b6>
	} else if (st.bit.ERRORFLOW) {
   120b8:	f013 0302 	ands.w	r3, r3, #2
   120bc:	d032      	beq.n	12124 <_usb_d_dev_handler+0x228>
		bank[bank_n].STATUS_BK.bit.ERRORFLOW = 0;
   120be:	f89e 100a 	ldrb.w	r1, [lr, #10]
   120c2:	f36f 0141 	bfc	r1, #1, #1
   120c6:	f88e 100a 	strb.w	r1, [lr, #10]
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENCLR.reg = mask;
   120ca:	f102 4382 	add.w	r3, r2, #1090519040	; 0x41000000
		if (is_ctrl && _usb_d_dev_ep_is_busy(ept)) {
   120ce:	f00b 0107 	and.w	r1, fp, #7
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg = mask;
   120d2:	2204      	movs	r2, #4
   120d4:	2901      	cmp	r1, #1
   120d6:	f888 2107 	strb.w	r2, [r8, #263]	; 0x107
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENCLR.reg = mask;
   120da:	f883 2108 	strb.w	r2, [r3, #264]	; 0x108
   120de:	f47f af4e 	bne.w	11f7e <_usb_d_dev_handler+0x82>
   120e2:	f01b 0f40 	tst.w	fp, #64	; 0x40
   120e6:	f43f af4a 	beq.w	11f7e <_usb_d_dev_handler+0x82>
			if (bank_n != _usb_d_dev_ep_is_in(ept)) {
   120ea:	494f      	ldr	r1, [pc, #316]	; (12228 <_usb_d_dev_handler+0x32c>)
   120ec:	eb0a 0204 	add.w	r2, sl, r4
   120f0:	eb01 0282 	add.w	r2, r1, r2, lsl #2
   120f4:	3220      	adds	r2, #32
   120f6:	79d1      	ldrb	r1, [r2, #7]
   120f8:	09c9      	lsrs	r1, r1, #7
   120fa:	f43f af40 	beq.w	11f7e <_usb_d_dev_handler+0x82>
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg = mask;
   120fe:	214a      	movs	r1, #74	; 0x4a
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSCLR.reg = mask;
   12100:	f04f 0e80 	mov.w	lr, #128	; 0x80
   12104:	f888 e104 	strb.w	lr, [r8, #260]	; 0x104
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg = mask;
   12108:	f888 1107 	strb.w	r1, [r8, #263]	; 0x107
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENCLR.reg = mask;
   1210c:	f883 1108 	strb.w	r1, [r3, #264]	; 0x108
	ept->flags.bits.is_busy = 0;
   12110:	79d1      	ldrb	r1, [r2, #7]
	dev_inst.ep_callbacks.done(ept->ep, code, ept->trans_count);
   12112:	4b45      	ldr	r3, [pc, #276]	; (12228 <_usb_d_dev_handler+0x32c>)
	ept->flags.bits.is_busy = 0;
   12114:	f36f 1186 	bfc	r1, #6, #1
   12118:	71d1      	strb	r1, [r2, #7]
	dev_inst.ep_callbacks.done(ept->ep, code, ept->trans_count);
   1211a:	691b      	ldr	r3, [r3, #16]
   1211c:	68aa      	ldr	r2, [r5, #8]
   1211e:	2100      	movs	r1, #0
   12120:	4798      	blx	r3
   12122:	e72c      	b.n	11f7e <_usb_d_dev_handler+0x82>
	bank->STATUS_BK.reg     = 0;
   12124:	4941      	ldr	r1, [pc, #260]	; (1222c <_usb_d_dev_handler+0x330>)
   12126:	1888      	adds	r0, r1, r2
   12128:	f102 4282 	add.w	r2, r2, #1090519040	; 0x41000000
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg = mask;
   1212c:	2104      	movs	r1, #4
   1212e:	7283      	strb	r3, [r0, #10]
   12130:	f888 1107 	strb.w	r1, [r8, #263]	; 0x107
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENCLR.reg = mask;
   12134:	f882 1108 	strb.w	r1, [r2, #264]	; 0x108
   12138:	e721      	b.n	11f7e <_usb_d_dev_handler+0x82>
		_usb_d_dev_out_next(ept, true);
   1213a:	2101      	movs	r1, #1
   1213c:	4628      	mov	r0, r5
   1213e:	f7ff fde1 	bl	11d04 <_usb_d_dev_out_next>
   12142:	e71c      	b.n	11f7e <_usb_d_dev_handler+0x82>
	if (flags & USB_DEVICE_EPINTFLAG_RXSTP) {
   12144:	f013 0f10 	tst.w	r3, #16
   12148:	f040 80e0 	bne.w	1230c <_usb_d_dev_handler+0x410>
	} else if (flags & USB_DEVICE_EPINTFLAG_STALL1) {
   1214c:	065a      	lsls	r2, r3, #25
   1214e:	f100 80e7 	bmi.w	12320 <_usb_d_dev_handler+0x424>
	} else if (flags & USB_DEVICE_EPINTFLAG_STALL0) {
   12152:	069b      	lsls	r3, r3, #26
   12154:	f57f af13 	bpl.w	11f7e <_usb_d_dev_handler+0x82>
   12158:	2320      	movs	r3, #32
   1215a:	68aa      	ldr	r2, [r5, #8]
   1215c:	f888 3108 	strb.w	r3, [r8, #264]	; 0x108
	dev_inst.ep_callbacks.done(ept->ep, USB_TRANS_STALL, ept->trans_count);
   12160:	4b31      	ldr	r3, [pc, #196]	; (12228 <_usb_d_dev_handler+0x32c>)
   12162:	691b      	ldr	r3, [r3, #16]
   12164:	4798      	blx	r3
   12166:	e70a      	b.n	11f7e <_usb_d_dev_handler+0x82>
	return ((Usb *)hw)->DEVICE.INTFLAG.reg;
   12168:	8b91      	ldrh	r1, [r2, #28]
	return tmp;
}

static inline hri_usbdevice_intenset_reg_t hri_usbdevice_read_INTEN_reg(const void *const hw)
{
	return ((Usb *)hw)->DEVICE.INTENSET.reg;
   1216a:	8b13      	ldrh	r3, [r2, #24]
   1216c:	b29b      	uxth	r3, r3
	flags &= hri_usbdevice_read_INTEN_reg(USB);
   1216e:	400b      	ands	r3, r1
	if (flags & USB_DEVICE_INTFLAG_SOF) {
   12170:	f013 0004 	ands.w	r0, r3, #4
   12174:	f040 80dc 	bne.w	12330 <_usb_d_dev_handler+0x434>
	if (flags & USB_DEVICE_INTFLAG_LPMSUSP) {
   12178:	f413 7100 	ands.w	r1, r3, #512	; 0x200
   1217c:	f040 80e0 	bne.w	12340 <_usb_d_dev_handler+0x444>
	} else if (flags & USB_DEVICE_INTFLAG_RAMACER) {
   12180:	0618      	lsls	r0, r3, #24
   12182:	f100 8140 	bmi.w	12406 <_usb_d_dev_handler+0x50a>
	} else if (flags & USB_D_WAKEUP_INT_FLAGS) {
   12186:	f013 0470 	ands.w	r4, r3, #112	; 0x70
   1218a:	f040 8191 	bne.w	124b0 <_usb_d_dev_handler+0x5b4>
	} else if (flags & USB_DEVICE_INTFLAG_EORST) {
   1218e:	f013 0108 	ands.w	r1, r3, #8
   12192:	f040 819e 	bne.w	124d2 <_usb_d_dev_handler+0x5d6>
	} else if (flags & USB_DEVICE_INTFLAG_SUSPEND) {
   12196:	07db      	lsls	r3, r3, #31
   12198:	f57f aeba 	bpl.w	11f10 <_usb_d_dev_handler+0x14>
	((Usb *)hw)->DEVICE.INTFLAG.reg = mask;
   1219c:	f240 2301 	movw	r3, #513	; 0x201
	dev_inst.callbacks.event(USB_EV_SUSPEND, 0);
   121a0:	4821      	ldr	r0, [pc, #132]	; (12228 <_usb_d_dev_handler+0x32c>)
   121a2:	8393      	strh	r3, [r2, #28]
   121a4:	6844      	ldr	r4, [r0, #4]
	((Usb *)hw)->DEVICE.INTENCLR.reg = ~data;
}

static inline void hri_usbdevice_clear_INTEN_reg(const void *const hw, hri_usbdevice_intenset_reg_t mask)
{
	((Usb *)hw)->DEVICE.INTENCLR.reg = mask;
   121a6:	8293      	strh	r3, [r2, #20]
	((Usb *)hw)->DEVICE.INTENSET.reg = mask;
   121a8:	2570      	movs	r5, #112	; 0x70
   121aa:	2004      	movs	r0, #4
   121ac:	8315      	strh	r5, [r2, #24]
   121ae:	4623      	mov	r3, r4
   121b0:	e0de      	b.n	12370 <_usb_d_dev_handler+0x474>
	if ((eptype == USB_D_EPTYPE_ISOCH) && st.bit.CRCERR) {
   121b2:	f013 0f01 	tst.w	r3, #1
   121b6:	f43f af7f 	beq.w	120b8 <_usb_d_dev_handler+0x1bc>
		bank[bank_n].STATUS_BK.bit.CRCERR = 0;
   121ba:	f89e 300a 	ldrb.w	r3, [lr, #10]
static void _usb_d_dev_trans_stop(struct _usb_d_dev_ep *ept, bool dir, const int32_t code)
{
	uint8_t epn = USB_EP_GET_N(ept->ep);
	;
	const uint8_t intflags[2] = {USB_D_BANK0_INT_FLAGS, USB_D_BANK1_INT_FLAGS};
	if (!(_usb_d_dev_ep_is_used(ept) && _usb_d_dev_ep_is_busy(ept))) {
   121be:	f01b 0f40 	tst.w	fp, #64	; 0x40
		bank[bank_n].STATUS_BK.bit.CRCERR = 0;
   121c2:	f361 0300 	bfi	r3, r1, #0, #1
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg = mask;
   121c6:	f04f 0104 	mov.w	r1, #4
   121ca:	f88e 300a 	strb.w	r3, [lr, #10]
   121ce:	f888 1107 	strb.w	r1, [r8, #263]	; 0x107
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENCLR.reg = mask;
   121d2:	f888 1108 	strb.w	r1, [r8, #264]	; 0x108
	if (!(_usb_d_dev_ep_is_used(ept) && _usb_d_dev_ep_is_busy(ept))) {
   121d6:	f43f aed2 	beq.w	11f7e <_usb_d_dev_handler+0x82>
	ept->flags.bits.is_busy = 0;
   121da:	4b13      	ldr	r3, [pc, #76]	; (12228 <_usb_d_dev_handler+0x32c>)
   121dc:	eb0a 0104 	add.w	r1, sl, r4
   121e0:	eb03 0181 	add.w	r1, r3, r1, lsl #2
   121e4:	f102 4382 	add.w	r3, r2, #1090519040	; 0x41000000
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg = mask;
   121e8:	f04f 0e25 	mov.w	lr, #37	; 0x25
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSSET.reg = mask;
   121ec:	2240      	movs	r2, #64	; 0x40
   121ee:	f888 2105 	strb.w	r2, [r8, #261]	; 0x105
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg = mask;
   121f2:	f888 e107 	strb.w	lr, [r8, #263]	; 0x107
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENCLR.reg = mask;
   121f6:	f883 e108 	strb.w	lr, [r3, #264]	; 0x108
   121fa:	f891 2027 	ldrb.w	r2, [r1, #39]	; 0x27
	dev_inst.ep_callbacks.done(ept->ep, code, ept->trans_count);
   121fe:	4b0a      	ldr	r3, [pc, #40]	; (12228 <_usb_d_dev_handler+0x32c>)
	ept->flags.bits.is_busy = 0;
   12200:	f36f 1286 	bfc	r2, #6, #1
   12204:	f881 2027 	strb.w	r2, [r1, #39]	; 0x27
	dev_inst.ep_callbacks.done(ept->ep, code, ept->trans_count);
   12208:	691b      	ldr	r3, [r3, #16]
   1220a:	68aa      	ldr	r2, [r5, #8]
   1220c:	2104      	movs	r1, #4
   1220e:	4798      	blx	r3
   12210:	e6b5      	b.n	11f7e <_usb_d_dev_handler+0x82>
		_usb_d_dev_in_next(ept, true);
   12212:	2101      	movs	r1, #1
   12214:	4628      	mov	r0, r5
   12216:	f7ff fcbb 	bl	11b90 <_usb_d_dev_in_next>
   1221a:	e6b0      	b.n	11f7e <_usb_d_dev_handler+0x82>
   1221c:	68aa      	ldr	r2, [r5, #8]
   1221e:	2340      	movs	r3, #64	; 0x40
   12220:	e6ff      	b.n	12022 <_usb_d_dev_handler+0x126>
   12222:	bf00      	nop
   12224:	20001ff4 	.word	0x20001ff4
   12228:	20001fe0 	.word	0x20001fe0
   1222c:	20002210 	.word	0x20002210
	UsbDeviceDescBank *bank    = prvt_inst.desc_table[epn].DeviceDescBank;
   12230:	4bc3      	ldr	r3, [pc, #780]	; (12540 <_usb_d_dev_handler+0x644>)
	tmp = ((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPCFG.reg;
   12232:	f898 1100 	ldrb.w	r1, [r8, #256]	; 0x100
   12236:	449e      	add	lr, r3
	if ((eptype == USB_D_EPTYPE_ISOCH) && st.bit.CRCERR) {
   12238:	f3c1 1102 	ubfx	r1, r1, #4, #3
	st.reg = bank[bank_n].STATUS_BK.reg;
   1223c:	f89e 301a 	ldrb.w	r3, [lr, #26]
	if ((eptype == USB_D_EPTYPE_ISOCH) && st.bit.CRCERR) {
   12240:	2902      	cmp	r1, #2
	st.reg = bank[bank_n].STATUS_BK.reg;
   12242:	b2db      	uxtb	r3, r3
	if ((eptype == USB_D_EPTYPE_ISOCH) && st.bit.CRCERR) {
   12244:	f000 8098 	beq.w	12378 <_usb_d_dev_handler+0x47c>
	} else if (st.bit.ERRORFLOW) {
   12248:	f013 0302 	ands.w	r3, r3, #2
   1224c:	d053      	beq.n	122f6 <_usb_d_dev_handler+0x3fa>
		bank[bank_n].STATUS_BK.bit.ERRORFLOW = 0;
   1224e:	f89e 101a 	ldrb.w	r1, [lr, #26]
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENCLR.reg = mask;
   12252:	f102 4382 	add.w	r3, r2, #1090519040	; 0x41000000
   12256:	f36f 0141 	bfc	r1, #1, #1
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg = mask;
   1225a:	2208      	movs	r2, #8
   1225c:	f88e 101a 	strb.w	r1, [lr, #26]
   12260:	f888 2107 	strb.w	r2, [r8, #263]	; 0x107
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENCLR.reg = mask;
   12264:	f883 2108 	strb.w	r2, [r3, #264]	; 0x108
		if (is_ctrl && _usb_d_dev_ep_is_busy(ept)) {
   12268:	f01b 0f40 	tst.w	fp, #64	; 0x40
   1226c:	f43f ae87 	beq.w	11f7e <_usb_d_dev_handler+0x82>
			if (bank_n != _usb_d_dev_ep_is_in(ept)) {
   12270:	4ab4      	ldr	r2, [pc, #720]	; (12544 <_usb_d_dev_handler+0x648>)
   12272:	eb0a 0e04 	add.w	lr, sl, r4
   12276:	eb02 0e8e 	add.w	lr, r2, lr, lsl #2
   1227a:	f10e 0e20 	add.w	lr, lr, #32
   1227e:	f89e 1007 	ldrb.w	r1, [lr, #7]
   12282:	09c9      	lsrs	r1, r1, #7
   12284:	f47f ae7b 	bne.w	11f7e <_usb_d_dev_handler+0x82>
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg = mask;
   12288:	2225      	movs	r2, #37	; 0x25
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSSET.reg = mask;
   1228a:	f04f 0c40 	mov.w	ip, #64	; 0x40
   1228e:	f888 c105 	strb.w	ip, [r8, #261]	; 0x105
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg = mask;
   12292:	f888 2107 	strb.w	r2, [r8, #263]	; 0x107
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENCLR.reg = mask;
   12296:	f883 2108 	strb.w	r2, [r3, #264]	; 0x108
	ept->flags.bits.is_busy = 0;
   1229a:	f89e 2007 	ldrb.w	r2, [lr, #7]
	dev_inst.ep_callbacks.done(ept->ep, code, ept->trans_count);
   1229e:	4ba9      	ldr	r3, [pc, #676]	; (12544 <_usb_d_dev_handler+0x648>)
	ept->flags.bits.is_busy = 0;
   122a0:	f361 1286 	bfi	r2, r1, #6, #1
   122a4:	f88e 2007 	strb.w	r2, [lr, #7]
	dev_inst.ep_callbacks.done(ept->ep, code, ept->trans_count);
   122a8:	691b      	ldr	r3, [r3, #16]
   122aa:	68aa      	ldr	r2, [r5, #8]
   122ac:	4798      	blx	r3
   122ae:	e666      	b.n	11f7e <_usb_d_dev_handler+0x82>
	UsbDeviceDescBank *bank    = prvt_inst.desc_table[epn].DeviceDescBank;
   122b0:	4ba3      	ldr	r3, [pc, #652]	; (12540 <_usb_d_dev_handler+0x644>)
	tmp = ((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPCFG.reg;
   122b2:	f898 c100 	ldrb.w	ip, [r8, #256]	; 0x100
   122b6:	449e      	add	lr, r3
	if ((eptype == USB_D_EPTYPE_ISOCH) && st.bit.CRCERR) {
   122b8:	f3cc 1c02 	ubfx	ip, ip, #4, #3
	st.reg = bank[bank_n].STATUS_BK.reg;
   122bc:	f89e 301a 	ldrb.w	r3, [lr, #26]
	if ((eptype == USB_D_EPTYPE_ISOCH) && st.bit.CRCERR) {
   122c0:	f1bc 0f02 	cmp.w	ip, #2
	st.reg = bank[bank_n].STATUS_BK.reg;
   122c4:	b2db      	uxtb	r3, r3
	if ((eptype == USB_D_EPTYPE_ISOCH) && st.bit.CRCERR) {
   122c6:	d07a      	beq.n	123be <_usb_d_dev_handler+0x4c2>
	} else if (st.bit.ERRORFLOW) {
   122c8:	f013 0302 	ands.w	r3, r3, #2
   122cc:	d013      	beq.n	122f6 <_usb_d_dev_handler+0x3fa>
		bank[bank_n].STATUS_BK.bit.ERRORFLOW = 0;
   122ce:	f89e 101a 	ldrb.w	r1, [lr, #26]
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENCLR.reg = mask;
   122d2:	f102 4382 	add.w	r3, r2, #1090519040	; 0x41000000
		if (is_ctrl && _usb_d_dev_ep_is_busy(ept)) {
   122d6:	f00b 0207 	and.w	r2, fp, #7
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg = mask;
   122da:	f04f 0c08 	mov.w	ip, #8
		bank[bank_n].STATUS_BK.bit.ERRORFLOW = 0;
   122de:	f36f 0141 	bfc	r1, #1, #1
		if (is_ctrl && _usb_d_dev_ep_is_busy(ept)) {
   122e2:	2a01      	cmp	r2, #1
		bank[bank_n].STATUS_BK.bit.ERRORFLOW = 0;
   122e4:	f88e 101a 	strb.w	r1, [lr, #26]
   122e8:	f888 c107 	strb.w	ip, [r8, #263]	; 0x107
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENCLR.reg = mask;
   122ec:	f883 c108 	strb.w	ip, [r3, #264]	; 0x108
		if (is_ctrl && _usb_d_dev_ep_is_busy(ept)) {
   122f0:	f47f ae45 	bne.w	11f7e <_usb_d_dev_handler+0x82>
   122f4:	e7b8      	b.n	12268 <_usb_d_dev_handler+0x36c>
	bank->STATUS_BK.reg     = 0;
   122f6:	4992      	ldr	r1, [pc, #584]	; (12540 <_usb_d_dev_handler+0x644>)
   122f8:	1888      	adds	r0, r1, r2
   122fa:	f102 4282 	add.w	r2, r2, #1090519040	; 0x41000000
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg = mask;
   122fe:	2108      	movs	r1, #8
   12300:	7683      	strb	r3, [r0, #26]
   12302:	f888 1107 	strb.w	r1, [r8, #263]	; 0x107
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENCLR.reg = mask;
   12306:	f882 1108 	strb.w	r1, [r2, #264]	; 0x108
   1230a:	e638      	b.n	11f7e <_usb_d_dev_handler+0x82>
	if (!is_ctrl) {
   1230c:	f00b 0307 	and.w	r3, fp, #7
   12310:	2b01      	cmp	r3, #1
   12312:	d07e      	beq.n	12412 <_usb_d_dev_handler+0x516>
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg = mask;
   12314:	2310      	movs	r3, #16
   12316:	f888 3107 	strb.w	r3, [r8, #263]	; 0x107
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENCLR.reg = USB_DEVICE_EPINTENSET_RXSTP;
   1231a:	f888 3108 	strb.w	r3, [r8, #264]	; 0x108
   1231e:	e62e      	b.n	11f7e <_usb_d_dev_handler+0x82>
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENCLR.reg = mask;
   12320:	2340      	movs	r3, #64	; 0x40
   12322:	68aa      	ldr	r2, [r5, #8]
   12324:	f888 3108 	strb.w	r3, [r8, #264]	; 0x108
	dev_inst.ep_callbacks.done(ept->ep, USB_TRANS_STALL, ept->trans_count);
   12328:	4b86      	ldr	r3, [pc, #536]	; (12544 <_usb_d_dev_handler+0x648>)
   1232a:	691b      	ldr	r3, [r3, #16]
   1232c:	4798      	blx	r3
   1232e:	e626      	b.n	11f7e <_usb_d_dev_handler+0x82>
	((Usb *)hw)->DEVICE.INTFLAG.reg = mask;
   12330:	2104      	movs	r1, #4
	dev_inst.callbacks.sof();
   12332:	4b84      	ldr	r3, [pc, #528]	; (12544 <_usb_d_dev_handler+0x648>)
   12334:	8391      	strh	r1, [r2, #28]
   12336:	681b      	ldr	r3, [r3, #0]
}
   12338:	b001      	add	sp, #4
   1233a:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	dev_inst.callbacks.sof();
   1233e:	4718      	bx	r3
   12340:	f240 2101 	movw	r1, #513	; 0x201
	((Usb *)hw)->DEVICE.INTENSET.reg = mask;
   12344:	2470      	movs	r4, #112	; 0x70
		if (bank->EXTREG.bit.SUBPID == 0x3) {
   12346:	4b7e      	ldr	r3, [pc, #504]	; (12540 <_usb_d_dev_handler+0x644>)
	((Usb *)hw)->DEVICE.INTFLAG.reg = mask;
   12348:	8391      	strh	r1, [r2, #28]
	((Usb *)hw)->DEVICE.INTENCLR.reg = mask;
   1234a:	8291      	strh	r1, [r2, #20]
	((Usb *)hw)->DEVICE.INTENSET.reg = mask;
   1234c:	8314      	strh	r4, [r2, #24]
   1234e:	891a      	ldrh	r2, [r3, #8]
   12350:	f002 020f 	and.w	r2, r2, #15
   12354:	2a03      	cmp	r2, #3
   12356:	f000 8128 	beq.w	125aa <_usb_d_dev_handler+0x6ae>
   1235a:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
   1235c:	f002 020f 	and.w	r2, r2, #15
   12360:	2a03      	cmp	r2, #3
	uint32_t lpm_variable = 0;
   12362:	bf18      	it	ne
   12364:	4601      	movne	r1, r0
		if (bank->EXTREG.bit.SUBPID == 0x3) {
   12366:	f000 811f 	beq.w	125a8 <_usb_d_dev_handler+0x6ac>
	dev_inst.callbacks.event(USB_EV_LPM_SUSPEND, lpm_variable);
   1236a:	4b76      	ldr	r3, [pc, #472]	; (12544 <_usb_d_dev_handler+0x648>)
   1236c:	685b      	ldr	r3, [r3, #4]
   1236e:	2003      	movs	r0, #3
}
   12370:	b001      	add	sp, #4
   12372:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	dev_inst.callbacks.event(USB_EV_SUSPEND, 0);
   12376:	4718      	bx	r3
	if ((eptype == USB_D_EPTYPE_ISOCH) && st.bit.CRCERR) {
   12378:	07d9      	lsls	r1, r3, #31
   1237a:	f57f af65 	bpl.w	12248 <_usb_d_dev_handler+0x34c>
		bank[bank_n].STATUS_BK.bit.CRCERR = 0;
   1237e:	f89e 101a 	ldrb.w	r1, [lr, #26]
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENCLR.reg = mask;
   12382:	f102 4382 	add.w	r3, r2, #1090519040	; 0x41000000
   12386:	f36f 0100 	bfc	r1, #0, #1
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg = mask;
   1238a:	2208      	movs	r2, #8
	if (!(_usb_d_dev_ep_is_used(ept) && _usb_d_dev_ep_is_busy(ept))) {
   1238c:	f01b 0f40 	tst.w	fp, #64	; 0x40
		bank[bank_n].STATUS_BK.bit.CRCERR = 0;
   12390:	f88e 101a 	strb.w	r1, [lr, #26]
   12394:	f888 2107 	strb.w	r2, [r8, #263]	; 0x107
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENCLR.reg = mask;
   12398:	f883 2108 	strb.w	r2, [r3, #264]	; 0x108
	if (!(_usb_d_dev_ep_is_used(ept) && _usb_d_dev_ep_is_busy(ept))) {
   1239c:	f43f adef 	beq.w	11f7e <_usb_d_dev_handler+0x82>
	ept->flags.bits.is_busy = 0;
   123a0:	4a68      	ldr	r2, [pc, #416]	; (12544 <_usb_d_dev_handler+0x648>)
   123a2:	eb0a 0104 	add.w	r1, sl, r4
   123a6:	eb02 0181 	add.w	r1, r2, r1, lsl #2
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSCLR.reg = mask;
   123aa:	f04f 0e80 	mov.w	lr, #128	; 0x80
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg = mask;
   123ae:	224a      	movs	r2, #74	; 0x4a
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSCLR.reg = mask;
   123b0:	f888 e104 	strb.w	lr, [r8, #260]	; 0x104
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg = mask;
   123b4:	f888 2107 	strb.w	r2, [r8, #263]	; 0x107
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENCLR.reg = mask;
   123b8:	f883 2108 	strb.w	r2, [r3, #264]	; 0x108
   123bc:	e71d      	b.n	121fa <_usb_d_dev_handler+0x2fe>
	if ((eptype == USB_D_EPTYPE_ISOCH) && st.bit.CRCERR) {
   123be:	f013 0f01 	tst.w	r3, #1
   123c2:	d081      	beq.n	122c8 <_usb_d_dev_handler+0x3cc>
		bank[bank_n].STATUS_BK.bit.CRCERR = 0;
   123c4:	f89e 301a 	ldrb.w	r3, [lr, #26]
	if (!(_usb_d_dev_ep_is_used(ept) && _usb_d_dev_ep_is_busy(ept))) {
   123c8:	f01b 0f40 	tst.w	fp, #64	; 0x40
		bank[bank_n].STATUS_BK.bit.CRCERR = 0;
   123cc:	f361 0300 	bfi	r3, r1, #0, #1
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg = mask;
   123d0:	f04f 0108 	mov.w	r1, #8
   123d4:	f88e 301a 	strb.w	r3, [lr, #26]
   123d8:	f888 1107 	strb.w	r1, [r8, #263]	; 0x107
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENCLR.reg = mask;
   123dc:	f888 1108 	strb.w	r1, [r8, #264]	; 0x108
	if (!(_usb_d_dev_ep_is_used(ept) && _usb_d_dev_ep_is_busy(ept))) {
   123e0:	f43f adcd 	beq.w	11f7e <_usb_d_dev_handler+0x82>
	ept->flags.bits.is_busy = 0;
   123e4:	4b57      	ldr	r3, [pc, #348]	; (12544 <_usb_d_dev_handler+0x648>)
   123e6:	eb0a 0104 	add.w	r1, sl, r4
   123ea:	eb03 0181 	add.w	r1, r3, r1, lsl #2
   123ee:	f102 4382 	add.w	r3, r2, #1090519040	; 0x41000000
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg = mask;
   123f2:	f04f 0e4a 	mov.w	lr, #74	; 0x4a
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSCLR.reg = mask;
   123f6:	2280      	movs	r2, #128	; 0x80
   123f8:	f888 2104 	strb.w	r2, [r8, #260]	; 0x104
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg = mask;
   123fc:	f888 e107 	strb.w	lr, [r8, #263]	; 0x107
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENCLR.reg = mask;
   12400:	f883 e108 	strb.w	lr, [r3, #264]	; 0x108
   12404:	e6f9      	b.n	121fa <_usb_d_dev_handler+0x2fe>
	dev_inst.callbacks.event(USB_EV_ERROR, 0);
   12406:	4b4f      	ldr	r3, [pc, #316]	; (12544 <_usb_d_dev_handler+0x648>)
	((Usb *)hw)->DEVICE.INTFLAG.reg = mask;
   12408:	2080      	movs	r0, #128	; 0x80
   1240a:	685b      	ldr	r3, [r3, #4]
   1240c:	8390      	strh	r0, [r2, #28]
   1240e:	2005      	movs	r0, #5
   12410:	e7ae      	b.n	12370 <_usb_d_dev_handler+0x474>
	if (_usb_d_dev_ep_is_busy(ept)) {
   12412:	f01b 0f40 	tst.w	fp, #64	; 0x40
   12416:	f43f ade3 	beq.w	11fe0 <_usb_d_dev_handler+0xe4>
		ept->flags.bits.is_busy = 0;
   1241a:	f89c 3027 	ldrb.w	r3, [ip, #39]	; 0x27
   1241e:	f36f 1386 	bfc	r3, #6, #1
   12422:	f88c 3027 	strb.w	r3, [ip, #39]	; 0x27
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSCLR.reg = mask;
   12426:	2180      	movs	r1, #128	; 0x80
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSSET.reg = mask;
   12428:	2340      	movs	r3, #64	; 0x40
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSCLR.reg = mask;
   1242a:	f888 1104 	strb.w	r1, [r8, #260]	; 0x104
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSSET.reg = mask;
   1242e:	f888 3105 	strb.w	r3, [r8, #261]	; 0x105
   12432:	e5d5      	b.n	11fe0 <_usb_d_dev_handler+0xe4>
	UsbDeviceDescBank *bank    = prvt_inst.desc_table[epn].DeviceDescBank;
   12434:	4b42      	ldr	r3, [pc, #264]	; (12540 <_usb_d_dev_handler+0x644>)
	tmp = ((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPCFG.reg;
   12436:	f898 1100 	ldrb.w	r1, [r8, #256]	; 0x100
   1243a:	449e      	add	lr, r3
	if ((eptype == USB_D_EPTYPE_ISOCH) && st.bit.CRCERR) {
   1243c:	f001 0107 	and.w	r1, r1, #7
	st.reg = bank[bank_n].STATUS_BK.reg;
   12440:	f89e 300a 	ldrb.w	r3, [lr, #10]
	if ((eptype == USB_D_EPTYPE_ISOCH) && st.bit.CRCERR) {
   12444:	2902      	cmp	r1, #2
	st.reg = bank[bank_n].STATUS_BK.reg;
   12446:	b2db      	uxtb	r3, r3
	if ((eptype == USB_D_EPTYPE_ISOCH) && st.bit.CRCERR) {
   12448:	f000 8080 	beq.w	1254c <_usb_d_dev_handler+0x650>
	} else if (st.bit.ERRORFLOW) {
   1244c:	f013 0302 	ands.w	r3, r3, #2
   12450:	f43f ae68 	beq.w	12124 <_usb_d_dev_handler+0x228>
		bank[bank_n].STATUS_BK.bit.ERRORFLOW = 0;
   12454:	f89e 100a 	ldrb.w	r1, [lr, #10]
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENCLR.reg = mask;
   12458:	f102 4382 	add.w	r3, r2, #1090519040	; 0x41000000
   1245c:	f36f 0141 	bfc	r1, #1, #1
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg = mask;
   12460:	2204      	movs	r2, #4
		if (is_ctrl && _usb_d_dev_ep_is_busy(ept)) {
   12462:	f01b 0f40 	tst.w	fp, #64	; 0x40
		bank[bank_n].STATUS_BK.bit.ERRORFLOW = 0;
   12466:	f88e 100a 	strb.w	r1, [lr, #10]
   1246a:	f888 2107 	strb.w	r2, [r8, #263]	; 0x107
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENCLR.reg = mask;
   1246e:	f883 2108 	strb.w	r2, [r3, #264]	; 0x108
		if (is_ctrl && _usb_d_dev_ep_is_busy(ept)) {
   12472:	f43f ad84 	beq.w	11f7e <_usb_d_dev_handler+0x82>
			if (bank_n != _usb_d_dev_ep_is_in(ept)) {
   12476:	4a33      	ldr	r2, [pc, #204]	; (12544 <_usb_d_dev_handler+0x648>)
   12478:	eb0a 0104 	add.w	r1, sl, r4
   1247c:	eb02 0181 	add.w	r1, r2, r1, lsl #2
   12480:	3120      	adds	r1, #32
   12482:	79ca      	ldrb	r2, [r1, #7]
   12484:	09d2      	lsrs	r2, r2, #7
   12486:	f43f ad7a 	beq.w	11f7e <_usb_d_dev_handler+0x82>
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg = mask;
   1248a:	224a      	movs	r2, #74	; 0x4a
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSCLR.reg = mask;
   1248c:	f04f 0e80 	mov.w	lr, #128	; 0x80
   12490:	f888 e104 	strb.w	lr, [r8, #260]	; 0x104
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg = mask;
   12494:	f888 2107 	strb.w	r2, [r8, #263]	; 0x107
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENCLR.reg = mask;
   12498:	f883 2108 	strb.w	r2, [r3, #264]	; 0x108
	ept->flags.bits.is_busy = 0;
   1249c:	79ca      	ldrb	r2, [r1, #7]
	dev_inst.ep_callbacks.done(ept->ep, code, ept->trans_count);
   1249e:	4b29      	ldr	r3, [pc, #164]	; (12544 <_usb_d_dev_handler+0x648>)
	ept->flags.bits.is_busy = 0;
   124a0:	f36f 1286 	bfc	r2, #6, #1
   124a4:	71ca      	strb	r2, [r1, #7]
	dev_inst.ep_callbacks.done(ept->ep, code, ept->trans_count);
   124a6:	691b      	ldr	r3, [r3, #16]
   124a8:	68aa      	ldr	r2, [r5, #8]
   124aa:	2100      	movs	r1, #0
   124ac:	4798      	blx	r3
   124ae:	e566      	b.n	11f7e <_usb_d_dev_handler+0x82>
	((Usb *)hw)->DEVICE.INTFLAG.reg = mask;
   124b0:	2370      	movs	r3, #112	; 0x70
	((Usb *)hw)->DEVICE.INTENSET.reg = mask;
   124b2:	f240 2001 	movw	r0, #513	; 0x201

static inline hri_oscctrl_dpllstatus_reg_t hri_oscctrl_get_DPLLSTATUS_reg(const void *const hw, uint8_t submodule_index,
                                                                          hri_oscctrl_dpllstatus_reg_t mask)
{
	uint32_t tmp;
	tmp = ((Oscctrl *)hw)->Dpll[submodule_index].DPLLSTATUS.reg;
   124b6:	4924      	ldr	r1, [pc, #144]	; (12548 <_usb_d_dev_handler+0x64c>)
	((Usb *)hw)->DEVICE.INTFLAG.reg = mask;
   124b8:	8393      	strh	r3, [r2, #28]
	((Usb *)hw)->DEVICE.INTENCLR.reg = mask;
   124ba:	8293      	strh	r3, [r2, #20]
	((Usb *)hw)->DEVICE.INTENSET.reg = mask;
   124bc:	8310      	strh	r0, [r2, #24]
   124be:	6c0b      	ldr	r3, [r1, #64]	; 0x40
	tmp &= mask;
   124c0:	f003 0303 	and.w	r3, r3, #3
	while (hri_oscctrl_get_DPLLSTATUS_reg(OSCCTRL, 0, DPLL_READY_FLAG) != DPLL_READY_FLAG)
   124c4:	2b03      	cmp	r3, #3
   124c6:	d1fa      	bne.n	124be <_usb_d_dev_handler+0x5c2>
	dev_inst.callbacks.event(USB_EV_WAKEUP, 0);
   124c8:	4b1e      	ldr	r3, [pc, #120]	; (12544 <_usb_d_dev_handler+0x648>)
   124ca:	2100      	movs	r1, #0
   124cc:	685b      	ldr	r3, [r3, #4]
   124ce:	2002      	movs	r0, #2
   124d0:	e74e      	b.n	12370 <_usb_d_dev_handler+0x474>
   124d2:	4e1c      	ldr	r6, [pc, #112]	; (12544 <_usb_d_dev_handler+0x648>)
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPCFG.reg = data;
   124d4:	f882 4100 	strb.w	r4, [r2, #256]	; 0x100
	((Usb *)hw)->DEVICE.INTFLAG.reg = mask;
   124d8:	2008      	movs	r0, #8
	((Usb *)hw)->DEVICE.INTENCLR.reg = mask;
   124da:	2170      	movs	r1, #112	; 0x70
	((Usb *)hw)->DEVICE.INTENSET.reg = mask;
   124dc:	f240 2301 	movw	r3, #513	; 0x201
	((Usb *)hw)->DEVICE.INTFLAG.reg = mask;
   124e0:	8390      	strh	r0, [r2, #28]
		dev_inst.ep[i].flags.u8 = 0;
   124e2:	4627      	mov	r7, r4
	((Usb *)hw)->DEVICE.INTENCLR.reg = mask;
   124e4:	8291      	strh	r1, [r2, #20]
   124e6:	4635      	mov	r5, r6
	((Usb *)hw)->DEVICE.INTENSET.reg = mask;
   124e8:	8313      	strh	r3, [r2, #24]
		dev_inst.ep[i].ep       = 0xFF;
   124ea:	f04f 08ff 	mov.w	r8, #255	; 0xff
   124ee:	e007      	b.n	12500 <_usb_d_dev_handler+0x604>
	for (i = 0; i < USB_D_N_EP; i++) {
   124f0:	2c1b      	cmp	r4, #27
		dev_inst.ep[i].ep       = 0xFF;
   124f2:	f885 8026 	strb.w	r8, [r5, #38]	; 0x26
		dev_inst.ep[i].flags.u8 = 0;
   124f6:	f885 7027 	strb.w	r7, [r5, #39]	; 0x27
   124fa:	f105 0514 	add.w	r5, r5, #20
	for (i = 0; i < USB_D_N_EP; i++) {
   124fe:	d016      	beq.n	1252e <_usb_d_dev_handler+0x632>
	if (!(_usb_d_dev_ep_is_used(ept) && _usb_d_dev_ep_is_busy(ept))) {
   12500:	f895 0026 	ldrb.w	r0, [r5, #38]	; 0x26
   12504:	eb04 0384 	add.w	r3, r4, r4, lsl #2
   12508:	eb06 0383 	add.w	r3, r6, r3, lsl #2
   1250c:	28ff      	cmp	r0, #255	; 0xff
   1250e:	f103 0320 	add.w	r3, r3, #32
   12512:	f104 0401 	add.w	r4, r4, #1
   12516:	d0eb      	beq.n	124f0 <_usb_d_dev_handler+0x5f4>
   12518:	79da      	ldrb	r2, [r3, #7]
   1251a:	0651      	lsls	r1, r2, #25
   1251c:	d5e8      	bpl.n	124f0 <_usb_d_dev_handler+0x5f4>
	ept->flags.bits.is_busy = 0;
   1251e:	f36f 1286 	bfc	r2, #6, #1
   12522:	71da      	strb	r2, [r3, #7]
	dev_inst.ep_callbacks.done(ept->ep, code, ept->trans_count);
   12524:	69ea      	ldr	r2, [r5, #28]
   12526:	6933      	ldr	r3, [r6, #16]
   12528:	2103      	movs	r1, #3
   1252a:	4798      	blx	r3
   1252c:	e7e0      	b.n	124f0 <_usb_d_dev_handler+0x5f4>
	memset(prvt_inst.desc_table, 0, sizeof(UsbDeviceDescriptor) * (CONF_USB_D_MAX_EP_N + 1));
   1252e:	2100      	movs	r1, #0
   12530:	2260      	movs	r2, #96	; 0x60
   12532:	4803      	ldr	r0, [pc, #12]	; (12540 <_usb_d_dev_handler+0x644>)
   12534:	f00b ff62 	bl	1e3fc <memset>
	dev_inst.callbacks.event(USB_EV_RESET, 0);
   12538:	6873      	ldr	r3, [r6, #4]
   1253a:	2100      	movs	r1, #0
   1253c:	2001      	movs	r0, #1
   1253e:	e717      	b.n	12370 <_usb_d_dev_handler+0x474>
   12540:	20002210 	.word	0x20002210
   12544:	20001fe0 	.word	0x20001fe0
   12548:	40001000 	.word	0x40001000
	if ((eptype == USB_D_EPTYPE_ISOCH) && st.bit.CRCERR) {
   1254c:	07d9      	lsls	r1, r3, #31
   1254e:	f57f af7d 	bpl.w	1244c <_usb_d_dev_handler+0x550>
		bank[bank_n].STATUS_BK.bit.CRCERR = 0;
   12552:	f89e 100a 	ldrb.w	r1, [lr, #10]
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENCLR.reg = mask;
   12556:	f102 4382 	add.w	r3, r2, #1090519040	; 0x41000000
   1255a:	460a      	mov	r2, r1
   1255c:	f36f 0200 	bfc	r2, #0, #1
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg = mask;
   12560:	2104      	movs	r1, #4
	if (!(_usb_d_dev_ep_is_used(ept) && _usb_d_dev_ep_is_busy(ept))) {
   12562:	f01b 0f40 	tst.w	fp, #64	; 0x40
		bank[bank_n].STATUS_BK.bit.CRCERR = 0;
   12566:	f88e 200a 	strb.w	r2, [lr, #10]
   1256a:	f888 1107 	strb.w	r1, [r8, #263]	; 0x107
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENCLR.reg = mask;
   1256e:	f883 1108 	strb.w	r1, [r3, #264]	; 0x108
	if (!(_usb_d_dev_ep_is_used(ept) && _usb_d_dev_ep_is_busy(ept))) {
   12572:	f43f ad04 	beq.w	11f7e <_usb_d_dev_handler+0x82>
	ept->flags.bits.is_busy = 0;
   12576:	4a11      	ldr	r2, [pc, #68]	; (125bc <_usb_d_dev_handler+0x6c0>)
   12578:	eb0a 0e04 	add.w	lr, sl, r4
   1257c:	eb02 0e8e 	add.w	lr, r2, lr, lsl #2
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSSET.reg = mask;
   12580:	f04f 0c40 	mov.w	ip, #64	; 0x40
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg = mask;
   12584:	2225      	movs	r2, #37	; 0x25
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSSET.reg = mask;
   12586:	f888 c105 	strb.w	ip, [r8, #261]	; 0x105
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg = mask;
   1258a:	f888 2107 	strb.w	r2, [r8, #263]	; 0x107
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENCLR.reg = mask;
   1258e:	f883 2108 	strb.w	r2, [r3, #264]	; 0x108
   12592:	f89e 2027 	ldrb.w	r2, [lr, #39]	; 0x27
	dev_inst.ep_callbacks.done(ept->ep, code, ept->trans_count);
   12596:	4b09      	ldr	r3, [pc, #36]	; (125bc <_usb_d_dev_handler+0x6c0>)
	ept->flags.bits.is_busy = 0;
   12598:	f36f 1286 	bfc	r2, #6, #1
   1259c:	f88e 2027 	strb.w	r2, [lr, #39]	; 0x27
	dev_inst.ep_callbacks.done(ept->ep, code, ept->trans_count);
   125a0:	691b      	ldr	r3, [r3, #16]
   125a2:	68aa      	ldr	r2, [r5, #8]
   125a4:	4798      	blx	r3
   125a6:	e4ea      	b.n	11f7e <_usb_d_dev_handler+0x82>
		UsbDeviceDescBank *bank = &prvt_inst.desc_table[i].DeviceDescBank[0];
   125a8:	2001      	movs	r0, #1
			lpm_variable = bank->EXTREG.bit.VARIABLE;
   125aa:	eb03 1040 	add.w	r0, r3, r0, lsl #5
			bank->EXTREG.reg = 0;
   125ae:	2300      	movs	r3, #0
			lpm_variable = bank->EXTREG.bit.VARIABLE;
   125b0:	8901      	ldrh	r1, [r0, #8]
			bank->EXTREG.reg = 0;
   125b2:	8103      	strh	r3, [r0, #8]
			lpm_variable = bank->EXTREG.bit.VARIABLE;
   125b4:	f3c1 110a 	ubfx	r1, r1, #4, #11
   125b8:	e6d7      	b.n	1236a <_usb_d_dev_handler+0x46e>
   125ba:	bf00      	nop
   125bc:	20001fe0 	.word	0x20001fe0

000125c0 <_usb_d_dev_init>:
{
   125c0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	return ((Usb *)hw)->DEVICE.SYNCBUSY.reg & reg;
   125c4:	f04f 4282 	mov.w	r2, #1090519040	; 0x41000000
   125c8:	7893      	ldrb	r3, [r2, #2]
	if (!hri_usbdevice_is_syncing(hw, USB_SYNCBUSY_SWRST)) {
   125ca:	07db      	lsls	r3, r3, #31
   125cc:	d551      	bpl.n	12672 <_usb_d_dev_init+0xb2>
	while (((Usb *)hw)->DEVICE.SYNCBUSY.reg & reg) {
   125ce:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
   125d2:	789c      	ldrb	r4, [r3, #2]
   125d4:	f014 0401 	ands.w	r4, r4, #1
   125d8:	d1fb      	bne.n	125d2 <_usb_d_dev_init+0x12>
	dev_inst.callbacks.sof   = (_usb_d_dev_sof_cb_t)_dummy_func_no_return;
   125da:	4b45      	ldr	r3, [pc, #276]	; (126f0 <_usb_d_dev_init+0x130>)
   125dc:	4a45      	ldr	r2, [pc, #276]	; (126f4 <_usb_d_dev_init+0x134>)
   125de:	601a      	str	r2, [r3, #0]
   125e0:	461e      	mov	r6, r3
   125e2:	461d      	mov	r5, r3
	dev_inst.callbacks.event = (_usb_d_dev_event_cb_t)_dummy_func_no_return;
   125e4:	605a      	str	r2, [r3, #4]
	dev_inst.ep_callbacks.setup = (_usb_d_dev_ep_cb_setup_t)_dummy_func_no_return;
   125e6:	609a      	str	r2, [r3, #8]
	dev_inst.ep_callbacks.more  = (_usb_d_dev_ep_cb_more_t)_dummy_func_no_return;
   125e8:	60da      	str	r2, [r3, #12]
	dev_inst.ep_callbacks.done  = (_usb_d_dev_ep_cb_done_t)_dummy_func_no_return;
   125ea:	611a      	str	r2, [r3, #16]
		dev_inst.ep[i].flags.u8 = 0;
   125ec:	46a0      	mov	r8, r4
		dev_inst.ep[i].ep       = 0xFF;
   125ee:	27ff      	movs	r7, #255	; 0xff
   125f0:	e007      	b.n	12602 <_usb_d_dev_init+0x42>
	for (i = 0; i < USB_D_N_EP; i++) {
   125f2:	2c1b      	cmp	r4, #27
		dev_inst.ep[i].ep       = 0xFF;
   125f4:	f885 7026 	strb.w	r7, [r5, #38]	; 0x26
		dev_inst.ep[i].flags.u8 = 0;
   125f8:	f885 8027 	strb.w	r8, [r5, #39]	; 0x27
   125fc:	f105 0514 	add.w	r5, r5, #20
	for (i = 0; i < USB_D_N_EP; i++) {
   12600:	d01d      	beq.n	1263e <_usb_d_dev_init+0x7e>
	if (!(_usb_d_dev_ep_is_used(ept) && _usb_d_dev_ep_is_busy(ept))) {
   12602:	f895 0026 	ldrb.w	r0, [r5, #38]	; 0x26
   12606:	eb04 0384 	add.w	r3, r4, r4, lsl #2
   1260a:	eb06 0383 	add.w	r3, r6, r3, lsl #2
   1260e:	28ff      	cmp	r0, #255	; 0xff
   12610:	f103 0320 	add.w	r3, r3, #32
   12614:	f104 0401 	add.w	r4, r4, #1
   12618:	d0eb      	beq.n	125f2 <_usb_d_dev_init+0x32>
   1261a:	79da      	ldrb	r2, [r3, #7]
   1261c:	0651      	lsls	r1, r2, #25
   1261e:	d5e8      	bpl.n	125f2 <_usb_d_dev_init+0x32>
	ept->flags.bits.is_busy = 0;
   12620:	f36f 1286 	bfc	r2, #6, #1
   12624:	71da      	strb	r2, [r3, #7]
	dev_inst.ep_callbacks.done(ept->ep, code, ept->trans_count);
   12626:	69ea      	ldr	r2, [r5, #28]
   12628:	6933      	ldr	r3, [r6, #16]
   1262a:	2103      	movs	r1, #3
   1262c:	4798      	blx	r3
	for (i = 0; i < USB_D_N_EP; i++) {
   1262e:	2c1b      	cmp	r4, #27
		dev_inst.ep[i].ep       = 0xFF;
   12630:	f885 7026 	strb.w	r7, [r5, #38]	; 0x26
		dev_inst.ep[i].flags.u8 = 0;
   12634:	f885 8027 	strb.w	r8, [r5, #39]	; 0x27
   12638:	f105 0514 	add.w	r5, r5, #20
	for (i = 0; i < USB_D_N_EP; i++) {
   1263c:	d1e1      	bne.n	12602 <_usb_d_dev_init+0x42>
	memset(prvt_inst.desc_table, 0, sizeof(UsbDeviceDescriptor) * (CONF_USB_D_MAX_EP_N + 1));
   1263e:	2260      	movs	r2, #96	; 0x60
   12640:	2100      	movs	r1, #0
   12642:	482d      	ldr	r0, [pc, #180]	; (126f8 <_usb_d_dev_init+0x138>)
   12644:	f00b feda 	bl	1e3fc <memset>
	    = (*((uint32_t *)(NVMCTRL_SW0) + (NVM_USB_PAD_TRANSN_POS / 32)) >> (NVM_USB_PAD_TRANSN_POS % 32))
   12648:	4b2c      	ldr	r3, [pc, #176]	; (126fc <_usb_d_dev_init+0x13c>)
   1264a:	681b      	ldr	r3, [r3, #0]
	uint32_t pad_transp
   1264c:	f3c3 1044 	ubfx	r0, r3, #5, #5
	uint32_t pad_trim = (*((uint32_t *)(NVMCTRL_SW0) + (NVM_USB_PAD_TRIM_POS / 32)) >> (NVM_USB_PAD_TRIM_POS % 32))
   12650:	f3c3 2282 	ubfx	r2, r3, #10, #3
	if (pad_transn == 0 || pad_transn == 0x1F) {
   12654:	f013 031f 	ands.w	r3, r3, #31
   12658:	d027      	beq.n	126aa <_usb_d_dev_init+0xea>
   1265a:	2b1f      	cmp	r3, #31
   1265c:	d025      	beq.n	126aa <_usb_d_dev_init+0xea>
   1265e:	019b      	lsls	r3, r3, #6
	if (pad_transp == 0 || pad_transp == 0x1F) {
   12660:	b338      	cbz	r0, 126b2 <_usb_d_dev_init+0xf2>
   12662:	281f      	cmp	r0, #31
   12664:	d025      	beq.n	126b2 <_usb_d_dev_init+0xf2>
   12666:	b280      	uxth	r0, r0
	if (pad_trim == 0 || pad_trim == 0x7) {
   12668:	b332      	cbz	r2, 126b8 <_usb_d_dev_init+0xf8>
   1266a:	2a07      	cmp	r2, #7
   1266c:	d024      	beq.n	126b8 <_usb_d_dev_init+0xf8>
   1266e:	0311      	lsls	r1, r2, #12
   12670:	e024      	b.n	126bc <_usb_d_dev_init+0xfc>
   12672:	7893      	ldrb	r3, [r2, #2]
   12674:	079f      	lsls	r7, r3, #30
   12676:	d1fc      	bne.n	12672 <_usb_d_dev_init+0xb2>

static inline hri_usb_ctrla_reg_t hri_usb_get_CTRLA_reg(const void *const hw, hri_usb_ctrla_reg_t mask)
{
	uint8_t tmp;
	hri_usb_wait_for_sync(hw, USB_SYNCBUSY_MASK);
	tmp = ((Usb *)hw)->HOST.CTRLA.reg;
   12678:	7813      	ldrb	r3, [r2, #0]
		if (hri_usbdevice_get_CTRLA_reg(hw, USB_CTRLA_ENABLE)) {
   1267a:	079e      	lsls	r6, r3, #30
   1267c:	d50d      	bpl.n	1269a <_usb_d_dev_init+0xda>
	((Usb *)hw)->HOST.CTRLA.reg &= ~USB_CTRLA_ENABLE;
   1267e:	7813      	ldrb	r3, [r2, #0]
   12680:	f003 03fd 	and.w	r3, r3, #253	; 0xfd
   12684:	7013      	strb	r3, [r2, #0]
	while (((Usb *)hw)->DEVICE.SYNCBUSY.reg & reg) {
   12686:	f04f 4282 	mov.w	r2, #1090519040	; 0x41000000
   1268a:	7893      	ldrb	r3, [r2, #2]
   1268c:	079d      	lsls	r5, r3, #30
   1268e:	d1fc      	bne.n	1268a <_usb_d_dev_init+0xca>
   12690:	f04f 4282 	mov.w	r2, #1090519040	; 0x41000000
   12694:	7893      	ldrb	r3, [r2, #2]
   12696:	079c      	lsls	r4, r3, #30
   12698:	d4fc      	bmi.n	12694 <_usb_d_dev_init+0xd4>
}

static inline void hri_usb_write_CTRLA_reg(const void *const hw, hri_usb_ctrla_reg_t data)
{
	USB_CRITICAL_SECTION_ENTER();
	((Usb *)hw)->HOST.CTRLA.reg = data;
   1269a:	f04f 4282 	mov.w	r2, #1090519040	; 0x41000000
   1269e:	2301      	movs	r3, #1
   126a0:	7013      	strb	r3, [r2, #0]
	while (((Usb *)hw)->DEVICE.SYNCBUSY.reg & reg) {
   126a2:	7893      	ldrb	r3, [r2, #2]
   126a4:	0798      	lsls	r0, r3, #30
   126a6:	d1fc      	bne.n	126a2 <_usb_d_dev_init+0xe2>
   126a8:	e791      	b.n	125ce <_usb_d_dev_init+0xe>
	if (pad_transn == 0 || pad_transn == 0x1F) {
   126aa:	f44f 7310 	mov.w	r3, #576	; 0x240
	if (pad_transp == 0 || pad_transp == 0x1F) {
   126ae:	2800      	cmp	r0, #0
   126b0:	d1d7      	bne.n	12662 <_usb_d_dev_init+0xa2>
   126b2:	2019      	movs	r0, #25
	if (pad_trim == 0 || pad_trim == 0x7) {
   126b4:	2a00      	cmp	r2, #0
   126b6:	d1d8      	bne.n	1266a <_usb_d_dev_init+0xaa>
   126b8:	f44f 41c0 	mov.w	r1, #24576	; 0x6000
	hw->DEVICE.PADCAL.reg = USB_PADCAL_TRANSN(pad_transn) | USB_PADCAL_TRANSP(pad_transp) | USB_PADCAL_TRIM(pad_trim);
   126bc:	f04f 4282 	mov.w	r2, #1090519040	; 0x41000000
   126c0:	4303      	orrs	r3, r0
   126c2:	430b      	orrs	r3, r1
   126c4:	8513      	strh	r3, [r2, #40]	; 0x28
	hw->DEVICE.QOSCTRL.bit.CQOS = 3;
   126c6:	78d3      	ldrb	r3, [r2, #3]
   126c8:	f043 0303 	orr.w	r3, r3, #3
   126cc:	70d3      	strb	r3, [r2, #3]
	hw->DEVICE.QOSCTRL.bit.DQOS = 3;
   126ce:	78d3      	ldrb	r3, [r2, #3]
	((Usb *)hw)->HOST.CTRLA.reg = data;
   126d0:	2104      	movs	r1, #4
   126d2:	f043 030c 	orr.w	r3, r3, #12
   126d6:	70d3      	strb	r3, [r2, #3]
	while (((Usb *)hw)->DEVICE.SYNCBUSY.reg & reg) {
   126d8:	4613      	mov	r3, r2
	((Usb *)hw)->HOST.CTRLA.reg = data;
   126da:	7011      	strb	r1, [r2, #0]
	while (((Usb *)hw)->DEVICE.SYNCBUSY.reg & reg) {
   126dc:	7898      	ldrb	r0, [r3, #2]
   126de:	f010 0003 	ands.w	r0, r0, #3
   126e2:	d1fb      	bne.n	126dc <_usb_d_dev_init+0x11c>
	hri_usbdevice_write_DESCADD_reg(hw, (uint32_t)prvt_inst.desc_table);
   126e4:	4a04      	ldr	r2, [pc, #16]	; (126f8 <_usb_d_dev_init+0x138>)
}

static inline void hri_usb_write_DESCADD_reg(const void *const hw, hri_usb_descadd_reg_t data)
{
	USB_CRITICAL_SECTION_ENTER();
	((Usb *)hw)->HOST.DESCADD.reg = data;
   126e6:	625a      	str	r2, [r3, #36]	; 0x24
	((Usb *)hw)->DEVICE.CTRLB.reg = data;
   126e8:	2201      	movs	r2, #1
   126ea:	811a      	strh	r2, [r3, #8]
}
   126ec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   126f0:	20001fe0 	.word	0x20001fe0
   126f4:	00011b8d 	.word	0x00011b8d
   126f8:	20002210 	.word	0x20002210
   126fc:	00800084 	.word	0x00800084

00012700 <_usb_d_dev_enable>:
	tmp = ((Usb *)hw)->HOST.SYNCBUSY.reg;
   12700:	f04f 4282 	mov.w	r2, #1090519040	; 0x41000000
   12704:	7893      	ldrb	r3, [r2, #2]
	if (hri_usbdevice_get_SYNCBUSY_reg(hw, (USB_SYNCBUSY_ENABLE | USB_SYNCBUSY_SWRST))) {
   12706:	079b      	lsls	r3, r3, #30
   12708:	d124      	bne.n	12754 <_usb_d_dev_enable+0x54>
{
   1270a:	b470      	push	{r4, r5, r6}
	while (((Usb *)hw)->DEVICE.SYNCBUSY.reg & reg) {
   1270c:	7893      	ldrb	r3, [r2, #2]
   1270e:	0798      	lsls	r0, r3, #30
   12710:	d1fc      	bne.n	1270c <_usb_d_dev_enable+0xc>
	return ((Usb *)hw)->HOST.CTRLA.reg;
   12712:	7813      	ldrb	r3, [r2, #0]
   12714:	b2db      	uxtb	r3, r3
	if ((ctrla & USB_CTRLA_ENABLE) == 0) {
   12716:	0799      	lsls	r1, r3, #30
   12718:	d407      	bmi.n	1272a <_usb_d_dev_enable+0x2a>
		hri_usbdevice_write_CTRLA_reg(hw, ctrla | USB_CTRLA_ENABLE);
   1271a:	f043 0302 	orr.w	r3, r3, #2
	((Usb *)hw)->HOST.CTRLA.reg = data;
   1271e:	7013      	strb	r3, [r2, #0]
	while (((Usb *)hw)->DEVICE.SYNCBUSY.reg & reg) {
   12720:	f04f 4282 	mov.w	r2, #1090519040	; 0x41000000
   12724:	7893      	ldrb	r3, [r2, #2]
   12726:	079b      	lsls	r3, r3, #30
   12728:	d1fc      	bne.n	12724 <_usb_d_dev_enable+0x24>
  NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
   1272a:	4b0c      	ldr	r3, [pc, #48]	; (1275c <_usb_d_dev_enable+0x5c>)
	((Usb *)hw)->DEVICE.INTENSET.reg = mask;
   1272c:	f04f 4282 	mov.w	r2, #1090519040	; 0x41000000
   12730:	f44f 3080 	mov.w	r0, #65536	; 0x10000
   12734:	f44f 3600 	mov.w	r6, #131072	; 0x20000
   12738:	f44f 2580 	mov.w	r5, #262144	; 0x40000
   1273c:	f44f 2400 	mov.w	r4, #524288	; 0x80000
   12740:	f240 218d 	movw	r1, #653	; 0x28d
   12744:	6098      	str	r0, [r3, #8]
   12746:	609e      	str	r6, [r3, #8]
   12748:	609d      	str	r5, [r3, #8]
   1274a:	609c      	str	r4, [r3, #8]
   1274c:	8311      	strh	r1, [r2, #24]
	return ERR_NONE;
   1274e:	2000      	movs	r0, #0
}
   12750:	bc70      	pop	{r4, r5, r6}
   12752:	4770      	bx	lr
		return -USB_ERR_DENIED;
   12754:	f06f 0010 	mvn.w	r0, #16
   12758:	4770      	bx	lr
   1275a:	bf00      	nop
   1275c:	e000e100 	.word	0xe000e100

00012760 <_usb_d_dev_attach>:
	((Usb *)hw)->DEVICE.CTRLB.reg &= ~USB_DEVICE_CTRLB_DETACH;
   12760:	f04f 4282 	mov.w	r2, #1090519040	; 0x41000000
   12764:	8913      	ldrh	r3, [r2, #8]
   12766:	f023 0301 	bic.w	r3, r3, #1
   1276a:	041b      	lsls	r3, r3, #16
   1276c:	0c1b      	lsrs	r3, r3, #16
   1276e:	8113      	strh	r3, [r2, #8]
   12770:	4770      	bx	lr
   12772:	bf00      	nop

00012774 <_usb_d_dev_set_address>:
	((Usb *)hw)->DEVICE.DADD.reg = data;
   12774:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
	hri_usbdevice_write_DADD_reg(USB, USB_DEVICE_DADD_ADDEN | USB_DEVICE_DADD_DADD(addr));
   12778:	f040 0080 	orr.w	r0, r0, #128	; 0x80
   1277c:	7298      	strb	r0, [r3, #10]
   1277e:	4770      	bx	lr

00012780 <_usb_d_dev_ep_init>:
{
   12780:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	uint8_t ep_index = (epn == 0) ? 0 : (dir ? (epn + CONF_USB_D_MAX_EP_N) : epn);
   12784:	f010 050f 	ands.w	r5, r0, #15
   12788:	fa4f fc80 	sxtb.w	ip, r0
   1278c:	d02a      	beq.n	127e4 <_usb_d_dev_ep_init+0x64>
   1278e:	f1bc 0f00 	cmp.w	ip, #0
   12792:	bfb4      	ite	lt
   12794:	1cab      	addlt	r3, r5, #2
   12796:	462b      	movge	r3, r5
	if (epn > CONF_USB_D_MAX_EP_N) {
   12798:	2d02      	cmp	r5, #2
	uint8_t                        ep_type = attr & USB_EP_XTYPE_MASK;
   1279a:	f001 0103 	and.w	r1, r1, #3
	if (epn > CONF_USB_D_MAX_EP_N) {
   1279e:	d859      	bhi.n	12854 <_usb_d_dev_ep_init+0xd4>
	if (ept->ep != 0xFF) {
   127a0:	009c      	lsls	r4, r3, #2
   127a2:	f8df e0b8 	ldr.w	lr, [pc, #184]	; 1285c <_usb_d_dev_ep_init+0xdc>
   127a6:	18e6      	adds	r6, r4, r3
   127a8:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
   127ac:	f896 6026 	ldrb.w	r6, [r6, #38]	; 0x26
   127b0:	2eff      	cmp	r6, #255	; 0xff
   127b2:	d14b      	bne.n	1284c <_usb_d_dev_ep_init+0xcc>
	if (ep_type == USB_EP_XTYPE_CTRL) {
   127b4:	b1d1      	cbz	r1, 127ec <_usb_d_dev_ep_init+0x6c>
	if ((dir ? pcfg->i_cache : pcfg->cache) && ((dir ? pcfg->i_size : pcfg->size) < max_pkt_siz)) {
   127b6:	f1bc 0f00 	cmp.w	ip, #0
   127ba:	db3a      	blt.n	12832 <_usb_d_dev_ep_init+0xb2>
   127bc:	006f      	lsls	r7, r5, #1
   127be:	197e      	adds	r6, r7, r5
   127c0:	f8df 809c 	ldr.w	r8, [pc, #156]	; 12860 <_usb_d_dev_ep_init+0xe0>
   127c4:	f858 6026 	ldr.w	r6, [r8, r6, lsl #2]
   127c8:	bb4e      	cbnz	r6, 1281e <_usb_d_dev_ep_init+0x9e>
	ept->cache    = (uint8_t *)(dir ? pcfg->i_cache : pcfg->cache);
   127ca:	4423      	add	r3, r4
   127cc:	eb0e 0383 	add.w	r3, lr, r3, lsl #2
	ept->flags.u8 = (ep_type + 1);
   127d0:	3101      	adds	r1, #1
   127d2:	f883 1027 	strb.w	r1, [r3, #39]	; 0x27
	ept->ep       = ep;
   127d6:	f883 0026 	strb.w	r0, [r3, #38]	; 0x26
	ept->cache    = (uint8_t *)(dir ? pcfg->i_cache : pcfg->cache);
   127da:	621e      	str	r6, [r3, #32]
	ept->size     = max_pkt_siz;
   127dc:	849a      	strh	r2, [r3, #36]	; 0x24
	return USB_OK;
   127de:	2000      	movs	r0, #0
   127e0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	uint8_t                        ep_type = attr & USB_EP_XTYPE_MASK;
   127e4:	f001 0103 	and.w	r1, r1, #3
	return &dev_inst.ep[ep_index];
   127e8:	462b      	mov	r3, r5
   127ea:	e7d9      	b.n	127a0 <_usb_d_dev_ep_init+0x20>
	uint8_t ep_index = (epn == 0) ? 0 : (dir ? (epn + CONF_USB_D_MAX_EP_N) : epn);
   127ec:	b125      	cbz	r5, 127f8 <_usb_d_dev_ep_init+0x78>
   127ee:	f1bc 0f00 	cmp.w	ip, #0
   127f2:	db01      	blt.n	127f8 <_usb_d_dev_ep_init+0x78>
   127f4:	1cae      	adds	r6, r5, #2
   127f6:	e000      	b.n	127fa <_usb_d_dev_ep_init+0x7a>
   127f8:	462e      	mov	r6, r5
		if (ept_in->ep != 0xFF) {
   127fa:	eb06 0686 	add.w	r6, r6, r6, lsl #2
   127fe:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
   12802:	f896 6026 	ldrb.w	r6, [r6, #38]	; 0x26
   12806:	2eff      	cmp	r6, #255	; 0xff
   12808:	d120      	bne.n	1284c <_usb_d_dev_ep_init+0xcc>
		if (pcfg->cache == NULL) {
   1280a:	006f      	lsls	r7, r5, #1
   1280c:	197e      	adds	r6, r7, r5
   1280e:	f8df 8050 	ldr.w	r8, [pc, #80]	; 12860 <_usb_d_dev_ep_init+0xe0>
   12812:	f858 6026 	ldr.w	r6, [r8, r6, lsl #2]
   12816:	b146      	cbz	r6, 1282a <_usb_d_dev_ep_init+0xaa>
	if ((dir ? pcfg->i_cache : pcfg->cache) && ((dir ? pcfg->i_size : pcfg->size) < max_pkt_siz)) {
   12818:	f1bc 0f00 	cmp.w	ip, #0
   1281c:	db0c      	blt.n	12838 <_usb_d_dev_ep_init+0xb8>
   1281e:	443d      	add	r5, r7
   12820:	eb08 0585 	add.w	r5, r8, r5, lsl #2
   12824:	892d      	ldrh	r5, [r5, #8]
   12826:	4295      	cmp	r5, r2
   12828:	dacf      	bge.n	127ca <_usb_d_dev_ep_init+0x4a>
			return -USB_ERR_FUNC;
   1282a:	f06f 0012 	mvn.w	r0, #18
   1282e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   12832:	f8df 802c 	ldr.w	r8, [pc, #44]	; 12860 <_usb_d_dev_ep_init+0xe0>
   12836:	006f      	lsls	r7, r5, #1
	if ((dir ? pcfg->i_cache : pcfg->cache) && ((dir ? pcfg->i_size : pcfg->size) < max_pkt_siz)) {
   12838:	442f      	add	r7, r5
   1283a:	eb08 0787 	add.w	r7, r8, r7, lsl #2
   1283e:	687d      	ldr	r5, [r7, #4]
   12840:	b115      	cbz	r5, 12848 <_usb_d_dev_ep_init+0xc8>
   12842:	897e      	ldrh	r6, [r7, #10]
   12844:	4296      	cmp	r6, r2
   12846:	dbf0      	blt.n	1282a <_usb_d_dev_ep_init+0xaa>
   12848:	462e      	mov	r6, r5
   1284a:	e7be      	b.n	127ca <_usb_d_dev_ep_init+0x4a>
		return -USB_ERR_REDO;
   1284c:	f06f 0013 	mvn.w	r0, #19
   12850:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return -USB_ERR_PARAM;
   12854:	f06f 0011 	mvn.w	r0, #17
   12858:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   1285c:	20001fe0 	.word	0x20001fe0
   12860:	000234b8 	.word	0x000234b8

00012864 <_usb_d_dev_ep_deinit>:
{
   12864:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	uint8_t ep_index = (epn == 0) ? 0 : (dir ? (epn + CONF_USB_D_MAX_EP_N) : epn);
   12868:	f010 070f 	ands.w	r7, r0, #15
{
   1286c:	b082      	sub	sp, #8
   1286e:	fa4f f980 	sxtb.w	r9, r0
	uint8_t ep_index = (epn == 0) ? 0 : (dir ? (epn + CONF_USB_D_MAX_EP_N) : epn);
   12872:	d009      	beq.n	12888 <_usb_d_dev_ep_deinit+0x24>
   12874:	f1b9 0f00 	cmp.w	r9, #0
   12878:	bfb4      	ite	lt
   1287a:	1cbe      	addlt	r6, r7, #2
   1287c:	463e      	movge	r6, r7
	if (epn > CONF_USB_D_MAX_EP_N || !_usb_d_dev_ep_is_used(ept)) {
   1287e:	2f02      	cmp	r7, #2
   12880:	d903      	bls.n	1288a <_usb_d_dev_ep_deinit+0x26>
}
   12882:	b002      	add	sp, #8
   12884:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	return &dev_inst.ep[ep_index];
   12888:	463e      	mov	r6, r7
	if (epn > CONF_USB_D_MAX_EP_N || !_usb_d_dev_ep_is_used(ept)) {
   1288a:	ea4f 0886 	mov.w	r8, r6, lsl #2
   1288e:	4d3d      	ldr	r5, [pc, #244]	; (12984 <_usb_d_dev_ep_deinit+0x120>)
   12890:	eb08 0306 	add.w	r3, r8, r6
   12894:	eb05 0383 	add.w	r3, r5, r3, lsl #2
   12898:	f893 1026 	ldrb.w	r1, [r3, #38]	; 0x26
   1289c:	29ff      	cmp	r1, #255	; 0xff
   1289e:	d0f0      	beq.n	12882 <_usb_d_dev_ep_deinit+0x1e>
	if (!(_usb_d_dev_ep_is_used(ept) && _usb_d_dev_ep_is_busy(ept))) {
   128a0:	f893 3027 	ldrb.w	r3, [r3, #39]	; 0x27
	const uint8_t intflags[2] = {USB_D_BANK0_INT_FLAGS, USB_D_BANK1_INT_FLAGS};
   128a4:	224a      	movs	r2, #74	; 0x4a
   128a6:	4604      	mov	r4, r0
   128a8:	f88d 2005 	strb.w	r2, [sp, #5]
   128ac:	2025      	movs	r0, #37	; 0x25
	if (!(_usb_d_dev_ep_is_used(ept) && _usb_d_dev_ep_is_busy(ept))) {
   128ae:	065a      	lsls	r2, r3, #25
	const uint8_t intflags[2] = {USB_D_BANK0_INT_FLAGS, USB_D_BANK1_INT_FLAGS};
   128b0:	f88d 0004 	strb.w	r0, [sp, #4]
	if (!(_usb_d_dev_ep_is_used(ept) && _usb_d_dev_ep_is_busy(ept))) {
   128b4:	d41b      	bmi.n	128ee <_usb_d_dev_ep_deinit+0x8a>
	if (_usb_d_dev_ep_is_ctrl(ept)) {
   128b6:	f003 0307 	and.w	r3, r3, #7
   128ba:	2b01      	cmp	r3, #1
   128bc:	d050      	beq.n	12960 <_usb_d_dev_ep_deinit+0xfc>
	} else if (USB_EP_GET_DIR(ep)) {
   128be:	f1b9 0f00 	cmp.w	r9, #0
   128c2:	db54      	blt.n	1296e <_usb_d_dev_ep_deinit+0x10a>
   128c4:	0160      	lsls	r0, r4, #5
   128c6:	f100 4082 	add.w	r0, r0, #1090519040	; 0x41000000
		hw->DEVICE.DeviceEndpoint[ep].EPCFG.reg &= ~USB_DEVICE_EPCFG_EPTYPE0_Msk;
   128ca:	f890 3100 	ldrb.w	r3, [r0, #256]	; 0x100
   128ce:	f003 03f8 	and.w	r3, r3, #248	; 0xf8
   128d2:	f880 3100 	strb.w	r3, [r0, #256]	; 0x100
	ept->flags.u8 = 0;
   128d6:	4446      	add	r6, r8
   128d8:	eb05 0586 	add.w	r5, r5, r6, lsl #2
   128dc:	2200      	movs	r2, #0
	ept->ep       = 0xFF;
   128de:	23ff      	movs	r3, #255	; 0xff
	ept->flags.u8 = 0;
   128e0:	f885 2027 	strb.w	r2, [r5, #39]	; 0x27
	ept->ep       = 0xFF;
   128e4:	f885 3026 	strb.w	r3, [r5, #38]	; 0x26
}
   128e8:	b002      	add	sp, #8
   128ea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	uint8_t epn = USB_EP_GET_N(ept->ep);
   128ee:	f001 030f 	and.w	r3, r1, #15
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSCLR.reg = mask;
   128f2:	f103 0208 	add.w	r2, r3, #8
   128f6:	0150      	lsls	r0, r2, #5
		return;
	}
	/* Stop transfer */
	if (dir) {
   128f8:	f1b9 0f00 	cmp.w	r9, #0
   128fc:	f100 4082 	add.w	r0, r0, #1090519040	; 0x41000000
   12900:	bfb5      	itete	lt
   12902:	f04f 0e80 	movlt.w	lr, #128	; 0x80
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSSET.reg = mask;
   12906:	f04f 0e40 	movge.w	lr, #64	; 0x40
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSCLR.reg = mask;
   1290a:	f880 e004 	strblt.w	lr, [r0, #4]
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSSET.reg = mask;
   1290e:	f880 e005 	strbge.w	lr, [r0, #5]
		_usbd_ep_set_in_rdy(epn, 1, false);
	} else {
		/* NAK OUT */
		_usbd_ep_set_out_rdy(epn, 0, false);
	}
	_usbd_ep_int_ack(epn, intflags[dir]);
   12912:	f10d 0e08 	add.w	lr, sp, #8
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg = mask;
   12916:	0150      	lsls	r0, r2, #5
   12918:	eb0e 7ed9 	add.w	lr, lr, r9, lsr #31
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENCLR.reg = mask;
   1291c:	015a      	lsls	r2, r3, #5
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg = mask;
   1291e:	f100 4082 	add.w	r0, r0, #1090519040	; 0x41000000
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENCLR.reg = mask;
   12922:	f102 4282 	add.w	r2, r2, #1090519040	; 0x41000000
	ept->flags.bits.is_busy = 0;
   12926:	eb08 0306 	add.w	r3, r8, r6
   1292a:	eb05 0383 	add.w	r3, r5, r3, lsl #2
	_usbd_ep_int_ack(epn, intflags[dir]);
   1292e:	f81e ec04 	ldrb.w	lr, [lr, #-4]
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg = mask;
   12932:	f880 e007 	strb.w	lr, [r0, #7]
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENCLR.reg = mask;
   12936:	f882 e108 	strb.w	lr, [r2, #264]	; 0x108
	ept->flags.bits.is_busy = 0;
   1293a:	f893 e027 	ldrb.w	lr, [r3, #39]	; 0x27
	dev_inst.ep_callbacks.done(ept->ep, code, ept->trans_count);
   1293e:	69da      	ldr	r2, [r3, #28]
	ept->flags.bits.is_busy = 0;
   12940:	f103 0a20 	add.w	sl, r3, #32
   12944:	f36f 1e86 	bfc	lr, #6, #1
	dev_inst.ep_callbacks.done(ept->ep, code, ept->trans_count);
   12948:	692b      	ldr	r3, [r5, #16]
	ept->flags.bits.is_busy = 0;
   1294a:	f88a e007 	strb.w	lr, [sl, #7]
	dev_inst.ep_callbacks.done(ept->ep, code, ept->trans_count);
   1294e:	4608      	mov	r0, r1
   12950:	2103      	movs	r1, #3
   12952:	4798      	blx	r3
   12954:	f89a 3007 	ldrb.w	r3, [sl, #7]
	if (_usb_d_dev_ep_is_ctrl(ept)) {
   12958:	f003 0307 	and.w	r3, r3, #7
   1295c:	2b01      	cmp	r3, #1
   1295e:	d1ae      	bne.n	128be <_usb_d_dev_ep_deinit+0x5a>
		hw->DEVICE.DeviceEndpoint[ep].EPCFG.reg = 0;
   12960:	0160      	lsls	r0, r4, #5
   12962:	f100 4082 	add.w	r0, r0, #1090519040	; 0x41000000
   12966:	2300      	movs	r3, #0
   12968:	f880 3100 	strb.w	r3, [r0, #256]	; 0x100
   1296c:	e7b3      	b.n	128d6 <_usb_d_dev_ep_deinit+0x72>
   1296e:	017f      	lsls	r7, r7, #5
   12970:	f107 4782 	add.w	r7, r7, #1090519040	; 0x41000000
		hw->DEVICE.DeviceEndpoint[USB_EP_GET_N(ep)].EPCFG.reg &= ~USB_DEVICE_EPCFG_EPTYPE1_Msk;
   12974:	f897 3100 	ldrb.w	r3, [r7, #256]	; 0x100
   12978:	f003 038f 	and.w	r3, r3, #143	; 0x8f
   1297c:	f887 3100 	strb.w	r3, [r7, #256]	; 0x100
   12980:	e7a9      	b.n	128d6 <_usb_d_dev_ep_deinit+0x72>
   12982:	bf00      	nop
   12984:	20001fe0 	.word	0x20001fe0

00012988 <_usb_d_dev_ep_enable>:
{
   12988:	b5f0      	push	{r4, r5, r6, r7, lr}
   1298a:	b246      	sxtb	r6, r0
	uint8_t ep_index = (epn == 0) ? 0 : (dir ? (epn + CONF_USB_D_MAX_EP_N) : epn);
   1298c:	f010 000f 	ands.w	r0, r0, #15
   12990:	d045      	beq.n	12a1e <_usb_d_dev_ep_enable+0x96>
	return ((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPCFG.reg;
   12992:	0142      	lsls	r2, r0, #5
   12994:	2e00      	cmp	r6, #0
   12996:	f102 4282 	add.w	r2, r2, #1090519040	; 0x41000000
   1299a:	bfb4      	ite	lt
   1299c:	1c83      	addlt	r3, r0, #2
   1299e:	4603      	movge	r3, r0
   129a0:	f892 4100 	ldrb.w	r4, [r2, #256]	; 0x100
	return &dev_inst.ep[ep_index];
   129a4:	4a84      	ldr	r2, [pc, #528]	; (12bb8 <_usb_d_dev_ep_enable+0x230>)
   129a6:	1c59      	adds	r1, r3, #1
   129a8:	eb01 0181 	add.w	r1, r1, r1, lsl #2
	if (epn > CONF_USB_D_MAX_EP_N || !_usb_d_dev_ep_is_used(ept)) {
   129ac:	2802      	cmp	r0, #2
   129ae:	b2e4      	uxtb	r4, r4
	return &dev_inst.ep[ep_index];
   129b0:	eb02 0181 	add.w	r1, r2, r1, lsl #2
	if (epn > CONF_USB_D_MAX_EP_N || !_usb_d_dev_ep_is_used(ept)) {
   129b4:	f200 809f 	bhi.w	12af6 <_usb_d_dev_ep_enable+0x16e>
   129b8:	eb03 0383 	add.w	r3, r3, r3, lsl #2
   129bc:	eb02 0383 	add.w	r3, r2, r3, lsl #2
   129c0:	f893 2026 	ldrb.w	r2, [r3, #38]	; 0x26
   129c4:	2aff      	cmp	r2, #255	; 0xff
   129c6:	f000 8096 	beq.w	12af6 <_usb_d_dev_ep_enable+0x16e>
	if (ept->flags.bits.eptype == USB_D_EPTYPE_CTRL) {
   129ca:	f893 2027 	ldrb.w	r2, [r3, #39]	; 0x27
	bank = prvt_inst.desc_table[epn].DeviceDescBank;
   129ce:	4d7b      	ldr	r5, [pc, #492]	; (12bbc <_usb_d_dev_ep_enable+0x234>)
	if (ept->flags.bits.eptype == USB_D_EPTYPE_CTRL) {
   129d0:	f002 0e07 	and.w	lr, r2, #7
   129d4:	0140      	lsls	r0, r0, #5
   129d6:	f1be 0f01 	cmp.w	lr, #1
	bank = prvt_inst.desc_table[epn].DeviceDescBank;
   129da:	eb05 0700 	add.w	r7, r5, r0
	if (ept->flags.bits.eptype == USB_D_EPTYPE_CTRL) {
   129de:	d028      	beq.n	12a32 <_usb_d_dev_ep_enable+0xaa>
	} else if (dir) {
   129e0:	2e00      	cmp	r6, #0
   129e2:	db65      	blt.n	12ab0 <_usb_d_dev_ep_enable+0x128>
		if (epcfg & USB_DEVICE_EPCFG_EPTYPE0_Msk) {
   129e4:	0761      	lsls	r1, r4, #29
   129e6:	f040 80a4 	bne.w	12b32 <_usb_d_dev_ep_enable+0x1aa>
		bank[0].PCKSIZE.reg = USB_DEVICE_PCKSIZE_MULTI_PACKET_SIZE(ept->size)
   129ea:	8c99      	ldrh	r1, [r3, #36]	; 0x24
   129ec:	4b74      	ldr	r3, [pc, #464]	; (12bc0 <_usb_d_dev_ep_enable+0x238>)
		epcfg |= USB_DEVICE_EPCFG_EPTYPE0(ept->flags.bits.eptype);
   129ee:	f002 0207 	and.w	r2, r2, #7
   129f2:	f100 4682 	add.w	r6, r0, #1090519040	; 0x41000000
   129f6:	4322      	orrs	r2, r4
	        : ((n > 256) ? 6 : ((n > 128) ? 5 : ((n > 64) ? 4 : ((n > 32) ? 3 : ((n > 16) ? 2 : ((n > 8) ? 1 : 0)))))));
   129f8:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPCFG.reg = data;
   129fc:	f886 2100 	strb.w	r2, [r6, #256]	; 0x100
		bank[0].PCKSIZE.reg = USB_DEVICE_PCKSIZE_MULTI_PACKET_SIZE(ept->size)
   12a00:	ea03 3281 	and.w	r2, r3, r1, lsl #14
	        : ((n > 256) ? 6 : ((n > 128) ? 5 : ((n > 64) ? 4 : ((n > 32) ? 3 : ((n > 16) ? 2 : ((n > 8) ? 1 : 0)))))));
   12a04:	d97a      	bls.n	12afc <_usb_d_dev_ep_enable+0x174>
   12a06:	f04f 41e0 	mov.w	r1, #1879048192	; 0x70000000
	bank->STATUS_BK.reg     = 0;
   12a0a:	182b      	adds	r3, r5, r0
		                      | USB_DEVICE_PCKSIZE_SIZE(_usbd_ep_pcksize_size(ept->size));
   12a0c:	430a      	orrs	r2, r1
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSSET.reg = mask;
   12a0e:	2440      	movs	r4, #64	; 0x40
	bank->STATUS_BK.reg     = 0;
   12a10:	2100      	movs	r1, #0
		bank[0].PCKSIZE.reg = USB_DEVICE_PCKSIZE_MULTI_PACKET_SIZE(ept->size)
   12a12:	607a      	str	r2, [r7, #4]
   12a14:	f886 4105 	strb.w	r4, [r6, #261]	; 0x105
	bank->STATUS_BK.reg     = 0;
   12a18:	7299      	strb	r1, [r3, #10]
	return USB_OK;
   12a1a:	4608      	mov	r0, r1
   12a1c:	bdf0      	pop	{r4, r5, r6, r7, pc}
	return ((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPCFG.reg;
   12a1e:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
	return &dev_inst.ep[ep_index];
   12a22:	4968      	ldr	r1, [pc, #416]	; (12bc4 <_usb_d_dev_ep_enable+0x23c>)
   12a24:	f893 4100 	ldrb.w	r4, [r3, #256]	; 0x100
   12a28:	f1a1 0214 	sub.w	r2, r1, #20
   12a2c:	b2e4      	uxtb	r4, r4
   12a2e:	4603      	mov	r3, r0
   12a30:	e7c2      	b.n	129b8 <_usb_d_dev_ep_enable+0x30>
		if (epcfg & (USB_DEVICE_EPCFG_EPTYPE1_Msk | USB_DEVICE_EPCFG_EPTYPE0_Msk)) {
   12a32:	f014 0f77 	tst.w	r4, #119	; 0x77
   12a36:	d17c      	bne.n	12b32 <_usb_d_dev_ep_enable+0x1aa>
		bank[0].PCKSIZE.reg = USB_DEVICE_PCKSIZE_MULTI_PACKET_SIZE(ept->size)
   12a38:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
   12a3a:	4a61      	ldr	r2, [pc, #388]	; (12bc0 <_usb_d_dev_ep_enable+0x238>)
   12a3c:	f100 4682 	add.w	r6, r0, #1090519040	; 0x41000000
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPCFG.reg = data;
   12a40:	2411      	movs	r4, #17
	        : ((n > 256) ? 6 : ((n > 128) ? 5 : ((n > 64) ? 4 : ((n > 32) ? 3 : ((n > 16) ? 2 : ((n > 8) ? 1 : 0)))))));
   12a42:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
		bank[0].PCKSIZE.reg = USB_DEVICE_PCKSIZE_MULTI_PACKET_SIZE(ept->size)
   12a46:	ea02 3283 	and.w	r2, r2, r3, lsl #14
   12a4a:	f886 4100 	strb.w	r4, [r6, #256]	; 0x100
	        : ((n > 256) ? 6 : ((n > 128) ? 5 : ((n > 64) ? 4 : ((n > 32) ? 3 : ((n > 16) ? 2 : ((n > 8) ? 1 : 0)))))));
   12a4e:	d94c      	bls.n	12aea <_usb_d_dev_ep_enable+0x162>
   12a50:	f04f 44e0 	mov.w	r4, #1879048192	; 0x70000000
		    = USB_DEVICE_PCKSIZE_BYTE_COUNT(ept->size) | USB_DEVICE_PCKSIZE_SIZE(_usbd_ep_pcksize_size(ept->size));
   12a54:	f3c3 030d 	ubfx	r3, r3, #0, #14
   12a58:	4323      	orrs	r3, r4
		                      | USB_DEVICE_PCKSIZE_SIZE(_usbd_ep_pcksize_size(ept->size));
   12a5a:	4322      	orrs	r2, r4
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSCLR.reg = mask;
   12a5c:	f04f 0e80 	mov.w	lr, #128	; 0x80
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSSET.reg = mask;
   12a60:	2440      	movs	r4, #64	; 0x40
		bank[0].PCKSIZE.reg = USB_DEVICE_PCKSIZE_MULTI_PACKET_SIZE(ept->size)
   12a62:	607a      	str	r2, [r7, #4]
		    = USB_DEVICE_PCKSIZE_BYTE_COUNT(ept->size) | USB_DEVICE_PCKSIZE_SIZE(_usbd_ep_pcksize_size(ept->size));
   12a64:	617b      	str	r3, [r7, #20]
   12a66:	f886 4105 	strb.w	r4, [r6, #261]	; 0x105
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSCLR.reg = mask;
   12a6a:	f886 e104 	strb.w	lr, [r6, #260]	; 0x104
	uint8_t epn = USB_EP_GET_N(ept->ep);
   12a6e:	7c8a      	ldrb	r2, [r1, #18]
   12a70:	8a0f      	ldrh	r7, [r1, #16]
	_usbd_ep_set_buf(epn, 0, (uint32_t)ept->cache);
   12a72:	f8d1 e00c 	ldr.w	lr, [r1, #12]
	uint8_t epn = USB_EP_GET_N(ept->ep);
   12a76:	f002 020f 	and.w	r2, r2, #15
	bank->STATUS_BK.reg     = 0;
   12a7a:	182b      	adds	r3, r5, r0
	bank->ADDR.reg          = addr;
   12a7c:	0151      	lsls	r1, r2, #5
	bank->STATUS_BK.reg     = 0;
   12a7e:	2000      	movs	r0, #0
   12a80:	7298      	strb	r0, [r3, #10]
	bank->ADDR.reg          = addr;
   12a82:	186e      	adds	r6, r5, r1
	bank->STATUS_BK.reg     = 0;
   12a84:	7698      	strb	r0, [r3, #26]
	bank->ADDR.reg          = addr;
   12a86:	f845 e001 	str.w	lr, [r5, r1]
	bank->PCKSIZE.bit.MULTI_PACKET_SIZE = size;
   12a8a:	6873      	ldr	r3, [r6, #4]
   12a8c:	f367 339b 	bfi	r3, r7, #14, #14
   12a90:	6073      	str	r3, [r6, #4]
	bank->PCKSIZE.bit.BYTE_COUNT = count;
   12a92:	6872      	ldr	r2, [r6, #4]
   12a94:	f101 4382 	add.w	r3, r1, #1090519040	; 0x41000000
   12a98:	f360 020d 	bfi	r2, r0, #0, #14
   12a9c:	27b0      	movs	r7, #176	; 0xb0
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENSET.reg = mask;
   12a9e:	2510      	movs	r5, #16
   12aa0:	6072      	str	r2, [r6, #4]
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSCLR.reg = mask;
   12aa2:	f883 7104 	strb.w	r7, [r3, #260]	; 0x104
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSSET.reg = mask;
   12aa6:	f883 4105 	strb.w	r4, [r3, #261]	; 0x105
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENSET.reg = mask;
   12aaa:	f883 5109 	strb.w	r5, [r3, #265]	; 0x109
   12aae:	bdf0      	pop	{r4, r5, r6, r7, pc}
		if (epcfg & USB_DEVICE_EPCFG_EPTYPE1_Msk) {
   12ab0:	f014 0f70 	tst.w	r4, #112	; 0x70
   12ab4:	d13d      	bne.n	12b32 <_usb_d_dev_ep_enable+0x1aa>
		    = USB_DEVICE_PCKSIZE_BYTE_COUNT(ept->size) | USB_DEVICE_PCKSIZE_SIZE(_usbd_ep_pcksize_size(ept->size));
   12ab6:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
		epcfg |= USB_DEVICE_EPCFG_EPTYPE1(ept->flags.bits.eptype);
   12ab8:	0112      	lsls	r2, r2, #4
   12aba:	f002 0270 	and.w	r2, r2, #112	; 0x70
   12abe:	f100 4682 	add.w	r6, r0, #1090519040	; 0x41000000
   12ac2:	4322      	orrs	r2, r4
	        : ((n > 256) ? 6 : ((n > 128) ? 5 : ((n > 64) ? 4 : ((n > 32) ? 3 : ((n > 16) ? 2 : ((n > 8) ? 1 : 0)))))));
   12ac4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPCFG.reg = data;
   12ac8:	f886 2100 	strb.w	r2, [r6, #256]	; 0x100
		    = USB_DEVICE_PCKSIZE_BYTE_COUNT(ept->size) | USB_DEVICE_PCKSIZE_SIZE(_usbd_ep_pcksize_size(ept->size));
   12acc:	f3c3 010d 	ubfx	r1, r3, #0, #14
	        : ((n > 256) ? 6 : ((n > 128) ? 5 : ((n > 64) ? 4 : ((n > 32) ? 3 : ((n > 16) ? 2 : ((n > 8) ? 1 : 0)))))));
   12ad0:	d91a      	bls.n	12b08 <_usb_d_dev_ep_enable+0x180>
   12ad2:	f04f 42e0 	mov.w	r2, #1879048192	; 0x70000000
	bank->STATUS_BK.reg     = 0;
   12ad6:	182b      	adds	r3, r5, r0
		    = USB_DEVICE_PCKSIZE_BYTE_COUNT(ept->size) | USB_DEVICE_PCKSIZE_SIZE(_usbd_ep_pcksize_size(ept->size));
   12ad8:	430a      	orrs	r2, r1
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSCLR.reg = mask;
   12ada:	2480      	movs	r4, #128	; 0x80
	bank->STATUS_BK.reg     = 0;
   12adc:	2100      	movs	r1, #0
		    = USB_DEVICE_PCKSIZE_BYTE_COUNT(ept->size) | USB_DEVICE_PCKSIZE_SIZE(_usbd_ep_pcksize_size(ept->size));
   12ade:	617a      	str	r2, [r7, #20]
   12ae0:	f886 4104 	strb.w	r4, [r6, #260]	; 0x104
	bank->STATUS_BK.reg     = 0;
   12ae4:	7699      	strb	r1, [r3, #26]
	return USB_OK;
   12ae6:	4608      	mov	r0, r1
   12ae8:	bdf0      	pop	{r4, r5, r6, r7, pc}
	        : ((n > 256) ? 6 : ((n > 128) ? 5 : ((n > 64) ? 4 : ((n > 32) ? 3 : ((n > 16) ? 2 : ((n > 8) ? 1 : 0)))))));
   12aea:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
   12aee:	d923      	bls.n	12b38 <_usb_d_dev_ep_enable+0x1b0>
   12af0:	f04f 44c0 	mov.w	r4, #1610612736	; 0x60000000
   12af4:	e7ae      	b.n	12a54 <_usb_d_dev_ep_enable+0xcc>
		return -USB_ERR_PARAM;
   12af6:	f06f 0011 	mvn.w	r0, #17
   12afa:	bdf0      	pop	{r4, r5, r6, r7, pc}
	        : ((n > 256) ? 6 : ((n > 128) ? 5 : ((n > 64) ? 4 : ((n > 32) ? 3 : ((n > 16) ? 2 : ((n > 8) ? 1 : 0)))))));
   12afc:	f5b1 7f80 	cmp.w	r1, #256	; 0x100
   12b00:	d908      	bls.n	12b14 <_usb_d_dev_ep_enable+0x18c>
   12b02:	f04f 41c0 	mov.w	r1, #1610612736	; 0x60000000
   12b06:	e780      	b.n	12a0a <_usb_d_dev_ep_enable+0x82>
   12b08:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
   12b0c:	d907      	bls.n	12b1e <_usb_d_dev_ep_enable+0x196>
   12b0e:	f04f 42c0 	mov.w	r2, #1610612736	; 0x60000000
   12b12:	e7e0      	b.n	12ad6 <_usb_d_dev_ep_enable+0x14e>
   12b14:	2980      	cmp	r1, #128	; 0x80
   12b16:	d907      	bls.n	12b28 <_usb_d_dev_ep_enable+0x1a0>
   12b18:	f04f 41a0 	mov.w	r1, #1342177280	; 0x50000000
   12b1c:	e775      	b.n	12a0a <_usb_d_dev_ep_enable+0x82>
   12b1e:	2b80      	cmp	r3, #128	; 0x80
   12b20:	d914      	bls.n	12b4c <_usb_d_dev_ep_enable+0x1c4>
   12b22:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
   12b26:	e7d6      	b.n	12ad6 <_usb_d_dev_ep_enable+0x14e>
   12b28:	2940      	cmp	r1, #64	; 0x40
   12b2a:	d914      	bls.n	12b56 <_usb_d_dev_ep_enable+0x1ce>
   12b2c:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
   12b30:	e76b      	b.n	12a0a <_usb_d_dev_ep_enable+0x82>
			return -USB_ERR_REDO;
   12b32:	f06f 0013 	mvn.w	r0, #19
   12b36:	bdf0      	pop	{r4, r5, r6, r7, pc}
	        : ((n > 256) ? 6 : ((n > 128) ? 5 : ((n > 64) ? 4 : ((n > 32) ? 3 : ((n > 16) ? 2 : ((n > 8) ? 1 : 0)))))));
   12b38:	2b80      	cmp	r3, #128	; 0x80
   12b3a:	d902      	bls.n	12b42 <_usb_d_dev_ep_enable+0x1ba>
   12b3c:	f04f 44a0 	mov.w	r4, #1342177280	; 0x50000000
   12b40:	e788      	b.n	12a54 <_usb_d_dev_ep_enable+0xcc>
   12b42:	2b40      	cmp	r3, #64	; 0x40
   12b44:	d90c      	bls.n	12b60 <_usb_d_dev_ep_enable+0x1d8>
   12b46:	f04f 4480 	mov.w	r4, #1073741824	; 0x40000000
   12b4a:	e783      	b.n	12a54 <_usb_d_dev_ep_enable+0xcc>
   12b4c:	2b40      	cmp	r3, #64	; 0x40
   12b4e:	d90c      	bls.n	12b6a <_usb_d_dev_ep_enable+0x1e2>
   12b50:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
   12b54:	e7bf      	b.n	12ad6 <_usb_d_dev_ep_enable+0x14e>
   12b56:	2920      	cmp	r1, #32
   12b58:	d90c      	bls.n	12b74 <_usb_d_dev_ep_enable+0x1ec>
   12b5a:	f04f 5140 	mov.w	r1, #805306368	; 0x30000000
   12b5e:	e754      	b.n	12a0a <_usb_d_dev_ep_enable+0x82>
   12b60:	2b20      	cmp	r3, #32
   12b62:	d90c      	bls.n	12b7e <_usb_d_dev_ep_enable+0x1f6>
   12b64:	f04f 5440 	mov.w	r4, #805306368	; 0x30000000
   12b68:	e774      	b.n	12a54 <_usb_d_dev_ep_enable+0xcc>
   12b6a:	2b20      	cmp	r3, #32
   12b6c:	d90c      	bls.n	12b88 <_usb_d_dev_ep_enable+0x200>
   12b6e:	f04f 5240 	mov.w	r2, #805306368	; 0x30000000
   12b72:	e7b0      	b.n	12ad6 <_usb_d_dev_ep_enable+0x14e>
   12b74:	2910      	cmp	r1, #16
   12b76:	d90c      	bls.n	12b92 <_usb_d_dev_ep_enable+0x20a>
   12b78:	f04f 5100 	mov.w	r1, #536870912	; 0x20000000
   12b7c:	e745      	b.n	12a0a <_usb_d_dev_ep_enable+0x82>
   12b7e:	2b10      	cmp	r3, #16
   12b80:	d90d      	bls.n	12b9e <_usb_d_dev_ep_enable+0x216>
   12b82:	f04f 5400 	mov.w	r4, #536870912	; 0x20000000
   12b86:	e765      	b.n	12a54 <_usb_d_dev_ep_enable+0xcc>
   12b88:	2b10      	cmp	r3, #16
   12b8a:	d90e      	bls.n	12baa <_usb_d_dev_ep_enable+0x222>
   12b8c:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
   12b90:	e7a1      	b.n	12ad6 <_usb_d_dev_ep_enable+0x14e>
   12b92:	2908      	cmp	r1, #8
   12b94:	bf94      	ite	ls
   12b96:	2100      	movls	r1, #0
   12b98:	2101      	movhi	r1, #1
   12b9a:	0709      	lsls	r1, r1, #28
   12b9c:	e735      	b.n	12a0a <_usb_d_dev_ep_enable+0x82>
   12b9e:	2b08      	cmp	r3, #8
   12ba0:	bf94      	ite	ls
   12ba2:	2400      	movls	r4, #0
   12ba4:	2401      	movhi	r4, #1
   12ba6:	0724      	lsls	r4, r4, #28
   12ba8:	e754      	b.n	12a54 <_usb_d_dev_ep_enable+0xcc>
   12baa:	2b08      	cmp	r3, #8
   12bac:	bf94      	ite	ls
   12bae:	2300      	movls	r3, #0
   12bb0:	2301      	movhi	r3, #1
   12bb2:	071a      	lsls	r2, r3, #28
   12bb4:	e78f      	b.n	12ad6 <_usb_d_dev_ep_enable+0x14e>
   12bb6:	bf00      	nop
   12bb8:	20001fe0 	.word	0x20001fe0
   12bbc:	20002210 	.word	0x20002210
   12bc0:	0fffc000 	.word	0x0fffc000
   12bc4:	20001ff4 	.word	0x20001ff4

00012bc8 <_usb_d_dev_ep_stall>:
{
   12bc8:	b243      	sxtb	r3, r0
	uint8_t ep_index = (epn == 0) ? 0 : (dir ? (epn + CONF_USB_D_MAX_EP_N) : epn);
   12bca:	f010 000f 	ands.w	r0, r0, #15
{
   12bce:	b5f0      	push	{r4, r5, r6, r7, lr}
	bool                  dir = USB_EP_GET_DIR(ep);
   12bd0:	ea4f 75d3 	mov.w	r5, r3, lsr #31
	uint8_t ep_index = (epn == 0) ? 0 : (dir ? (epn + CONF_USB_D_MAX_EP_N) : epn);
   12bd4:	d01e      	beq.n	12c14 <_usb_d_dev_ep_stall+0x4c>
   12bd6:	2b00      	cmp	r3, #0
   12bd8:	bfb4      	ite	lt
   12bda:	1c83      	addlt	r3, r0, #2
   12bdc:	4603      	movge	r3, r0
	return &dev_inst.ep[ep_index];
   12bde:	1c5c      	adds	r4, r3, #1
   12be0:	4a40      	ldr	r2, [pc, #256]	; (12ce4 <_usb_d_dev_ep_stall+0x11c>)
   12be2:	eb04 0484 	add.w	r4, r4, r4, lsl #2
	if (epn > CONF_USB_D_MAX_EP_N) {
   12be6:	2802      	cmp	r0, #2
	return &dev_inst.ep[ep_index];
   12be8:	eb02 0284 	add.w	r2, r2, r4, lsl #2
	if (epn > CONF_USB_D_MAX_EP_N) {
   12bec:	d86d      	bhi.n	12cca <_usb_d_dev_ep_stall+0x102>
	if (USB_EP_STALL_SET == ctrl) {
   12bee:	2901      	cmp	r1, #1
   12bf0:	d014      	beq.n	12c1c <_usb_d_dev_ep_stall+0x54>
	} else if (USB_EP_STALL_CLR == ctrl) {
   12bf2:	b389      	cbz	r1, 12c58 <_usb_d_dev_ep_stall+0x90>
	uint8_t epn = USB_EP_GET_N(ept->ep);
   12bf4:	7c93      	ldrb	r3, [r2, #18]
	return ((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUS.reg;
   12bf6:	f003 030f 	and.w	r3, r3, #15
   12bfa:	015b      	lsls	r3, r3, #5
   12bfc:	f103 4382 	add.w	r3, r3, #1090519040	; 0x41000000
	return (hri_usbendpoint_read_EPSTATUS_reg(hw, epn) & (USB_DEVICE_EPSTATUS_STALLRQ0 << bank_n));
   12c00:	2210      	movs	r2, #16
   12c02:	f893 1106 	ldrb.w	r1, [r3, #262]	; 0x106
   12c06:	fa02 f305 	lsl.w	r3, r2, r5
   12c0a:	420b      	tst	r3, r1
   12c0c:	bf14      	ite	ne
   12c0e:	2001      	movne	r0, #1
   12c10:	2000      	moveq	r0, #0
   12c12:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (USB_EP_STALL_SET == ctrl) {
   12c14:	2901      	cmp	r1, #1
	return &dev_inst.ep[ep_index];
   12c16:	4a34      	ldr	r2, [pc, #208]	; (12ce8 <_usb_d_dev_ep_stall+0x120>)
   12c18:	4603      	mov	r3, r0
	if (USB_EP_STALL_SET == ctrl) {
   12c1a:	d1ea      	bne.n	12bf2 <_usb_d_dev_ep_stall+0x2a>
	uint8_t epn = USB_EP_GET_N(ept->ep);
   12c1c:	4931      	ldr	r1, [pc, #196]	; (12ce4 <_usb_d_dev_ep_stall+0x11c>)
   12c1e:	eb03 0383 	add.w	r3, r3, r3, lsl #2
   12c22:	eb01 0183 	add.w	r1, r1, r3, lsl #2
		hri_usbendpoint_set_EPSTATUS_reg(USB, epn, (USB_DEVICE_EPSTATUS_STALLRQ0 << bank_n));
   12c26:	2410      	movs	r4, #16
	uint8_t epn = USB_EP_GET_N(ept->ep);
   12c28:	f891 2026 	ldrb.w	r2, [r1, #38]	; 0x26
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSSET.reg = mask;
   12c2c:	f002 020f 	and.w	r2, r2, #15
   12c30:	0150      	lsls	r0, r2, #5
	_usbd_ep_int_en(epn, USB_DEVICE_EPINTFLAG_STALL0 << dir);
   12c32:	2320      	movs	r3, #32
   12c34:	f100 4082 	add.w	r0, r0, #1090519040	; 0x41000000
		hri_usbendpoint_set_EPSTATUS_reg(USB, epn, (USB_DEVICE_EPSTATUS_STALLRQ0 << bank_n));
   12c38:	40ac      	lsls	r4, r5
	_usbd_ep_int_en(epn, USB_DEVICE_EPINTFLAG_STALL0 << dir);
   12c3a:	40ab      	lsls	r3, r5
		hri_usbendpoint_set_EPSTATUS_reg(USB, epn, (USB_DEVICE_EPSTATUS_STALLRQ0 << bank_n));
   12c3c:	b2e4      	uxtb	r4, r4
	hri_usbendpoint_set_EPINTEN_reg(USB, epn, flags);
   12c3e:	b2db      	uxtb	r3, r3
   12c40:	f880 4105 	strb.w	r4, [r0, #261]	; 0x105
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENSET.reg = mask;
   12c44:	f880 3109 	strb.w	r3, [r0, #265]	; 0x109
	ept->flags.bits.is_stalled = 1;
   12c48:	f891 3027 	ldrb.w	r3, [r1, #39]	; 0x27
   12c4c:	f043 0308 	orr.w	r3, r3, #8
   12c50:	f881 3027 	strb.w	r3, [r1, #39]	; 0x27
		rc = _usb_d_dev_ep_stall_set(ept, dir);
   12c54:	2000      	movs	r0, #0
   12c56:	bdf0      	pop	{r4, r5, r6, r7, pc}
	uint8_t epn        = USB_EP_GET_N(ept->ep);
   12c58:	009e      	lsls	r6, r3, #2
   12c5a:	4c22      	ldr	r4, [pc, #136]	; (12ce4 <_usb_d_dev_ep_stall+0x11c>)
   12c5c:	18f2      	adds	r2, r6, r3
   12c5e:	eb04 0282 	add.w	r2, r4, r2, lsl #2
	return (hri_usbendpoint_read_EPSTATUS_reg(hw, epn) & (USB_DEVICE_EPSTATUS_STALLRQ0 << bank_n));
   12c62:	2010      	movs	r0, #16
	uint8_t epn        = USB_EP_GET_N(ept->ep);
   12c64:	f892 2026 	ldrb.w	r2, [r2, #38]	; 0x26
   12c68:	f002 020f 	and.w	r2, r2, #15
   12c6c:	0151      	lsls	r1, r2, #5
   12c6e:	f101 4182 	add.w	r1, r1, #1090519040	; 0x41000000
	return (hri_usbendpoint_read_EPSTATUS_reg(hw, epn) & (USB_DEVICE_EPSTATUS_STALLRQ0 << bank_n));
   12c72:	40a8      	lsls	r0, r5
	return ((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUS.reg;
   12c74:	f891 7106 	ldrb.w	r7, [r1, #262]	; 0x106
	if (!is_stalled) {
   12c78:	4207      	tst	r7, r0
   12c7a:	d01b      	beq.n	12cb4 <_usb_d_dev_ep_stall+0xec>
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENCLR.reg = mask;
   12c7c:	0152      	lsls	r2, r2, #5
	_usbd_ep_int_dis(epn, USB_DEVICE_EPINTFLAG_STALL0 << dir);
   12c7e:	2720      	movs	r7, #32
   12c80:	f102 4282 	add.w	r2, r2, #1090519040	; 0x41000000
   12c84:	40af      	lsls	r7, r5
		hri_usbendpoint_clear_EPSTATUS_reg(USB, epn, (USB_DEVICE_EPSTATUS_STALLRQ0 << bank_n));
   12c86:	b2c0      	uxtb	r0, r0
	hri_usbendpoint_clear_EPINTEN_reg(USB, epn, flags);
   12c88:	fa5f fe87 	uxtb.w	lr, r7
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSCLR.reg = mask;
   12c8c:	f881 0104 	strb.w	r0, [r1, #260]	; 0x104
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENCLR.reg = mask;
   12c90:	f882 e108 	strb.w	lr, [r2, #264]	; 0x108
	return ((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg;
   12c94:	f891 2107 	ldrb.w	r2, [r1, #263]	; 0x107
	if (_usbd_ep_is_stall_sent(epn, dir)) {
   12c98:	423a      	tst	r2, r7
   12c9a:	d10d      	bne.n	12cb8 <_usb_d_dev_ep_stall+0xf0>
	if (_usb_d_dev_ep_is_ctrl(ept)) {
   12c9c:	4433      	add	r3, r6
   12c9e:	eb04 0483 	add.w	r4, r4, r3, lsl #2
   12ca2:	3420      	adds	r4, #32
   12ca4:	79e3      	ldrb	r3, [r4, #7]
   12ca6:	f003 0207 	and.w	r2, r3, #7
   12caa:	2a01      	cmp	r2, #1
   12cac:	d010      	beq.n	12cd0 <_usb_d_dev_ep_stall+0x108>
		ept->flags.bits.is_stalled = 0;
   12cae:	f36f 03c3 	bfc	r3, #3, #1
   12cb2:	71e3      	strb	r3, [r4, #7]
		rc = _usb_d_dev_ep_stall_clr(ept, dir);
   12cb4:	2000      	movs	r0, #0
   12cb6:	bdf0      	pop	{r4, r5, r6, r7, pc}
		hri_usbendpoint_clear_EPSTATUS_reg(USB, epn, (USB_DEVICE_EPSTATUS_DTGLOUT << bank_n));
   12cb8:	2201      	movs	r2, #1
   12cba:	fa02 f505 	lsl.w	r5, r2, r5
   12cbe:	b2ed      	uxtb	r5, r5
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg = mask;
   12cc0:	f881 e107 	strb.w	lr, [r1, #263]	; 0x107
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSCLR.reg = mask;
   12cc4:	f881 5104 	strb.w	r5, [r1, #260]	; 0x104
   12cc8:	e7e8      	b.n	12c9c <_usb_d_dev_ep_stall+0xd4>
		return -USB_ERR_PARAM;
   12cca:	f06f 0011 	mvn.w	r0, #17
}
   12cce:	bdf0      	pop	{r4, r5, r6, r7, pc}
	return ((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUS.reg;
   12cd0:	f891 0106 	ldrb.w	r0, [r1, #262]	; 0x106
		if ((hri_usbendpoint_read_EPSTATUS_reg(USB, epn) & USB_DEVICE_EPSTATUS_STALLRQ_Msk) == 0) {
   12cd4:	f010 0030 	ands.w	r0, r0, #48	; 0x30
   12cd8:	d1ec      	bne.n	12cb4 <_usb_d_dev_ep_stall+0xec>
			ept->flags.bits.is_stalled = 0;
   12cda:	f360 03c3 	bfi	r3, r0, #3, #1
   12cde:	71e3      	strb	r3, [r4, #7]
   12ce0:	bdf0      	pop	{r4, r5, r6, r7, pc}
   12ce2:	bf00      	nop
   12ce4:	20001fe0 	.word	0x20001fe0
   12ce8:	20001ff4 	.word	0x20001ff4

00012cec <_usb_d_dev_ep_read_req>:
	_usbd_ep_int_dis(epn, intflags[dir]);
	_usb_d_dev_trans_done(ept, code);
}

int32_t _usb_d_dev_ep_read_req(const uint8_t ep, uint8_t *req_buf)
{
   12cec:	b470      	push	{r4, r5, r6}
	uint8_t            epn   = USB_EP_GET_N(ep);
   12cee:	f000 000f 	and.w	r0, r0, #15
	UsbDeviceDescBank *bank  = prvt_inst.desc_table[epn].DeviceDescBank;
   12cf2:	4a12      	ldr	r2, [pc, #72]	; (12d3c <_usb_d_dev_ep_read_req+0x50>)
   12cf4:	0143      	lsls	r3, r0, #5
   12cf6:	18d4      	adds	r4, r2, r3
	uint32_t           addr  = bank[0].ADDR.reg;
   12cf8:	58d5      	ldr	r5, [r2, r3]
	uint16_t           bytes = bank[0].PCKSIZE.bit.BYTE_COUNT;
   12cfa:	6864      	ldr	r4, [r4, #4]

	if (epn > CONF_USB_D_MAX_EP_N || !req_buf) {
   12cfc:	2802      	cmp	r0, #2
	uint16_t           bytes = bank[0].PCKSIZE.bit.BYTE_COUNT;
   12cfe:	f3c4 040d 	ubfx	r4, r4, #0, #14
	if (epn > CONF_USB_D_MAX_EP_N || !req_buf) {
   12d02:	d818      	bhi.n	12d36 <_usb_d_dev_ep_read_req+0x4a>
   12d04:	b1b9      	cbz	r1, 12d36 <_usb_d_dev_ep_read_req+0x4a>
   12d06:	f103 4382 	add.w	r3, r3, #1090519040	; 0x41000000
	return ((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPCFG.reg;
   12d0a:	f893 2100 	ldrb.w	r2, [r3, #256]	; 0x100
		return -USB_ERR_PARAM;
	}
	if (!_usbd_ep_is_ctrl(epn)) {
   12d0e:	2a11      	cmp	r2, #17
   12d10:	d10e      	bne.n	12d30 <_usb_d_dev_ep_read_req+0x44>
	tmp = ((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg;
   12d12:	f893 2107 	ldrb.w	r2, [r3, #263]	; 0x107
		return -USB_ERR_FUNC;
	}
	if (!_usbd_ep_is_setup(epn)) {
   12d16:	f012 0010 	ands.w	r0, r2, #16
   12d1a:	d007      	beq.n	12d2c <_usb_d_dev_ep_read_req+0x40>
		return ERR_NONE;
	}
	memcpy(req_buf, (void *)addr, 8);
   12d1c:	686a      	ldr	r2, [r5, #4]
   12d1e:	682e      	ldr	r6, [r5, #0]
   12d20:	604a      	str	r2, [r1, #4]
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg = mask;
   12d22:	2210      	movs	r2, #16
   12d24:	600e      	str	r6, [r1, #0]
	_usbd_ep_ack_setup(epn);

	return bytes;
   12d26:	4620      	mov	r0, r4
   12d28:	f883 2107 	strb.w	r2, [r3, #263]	; 0x107
}
   12d2c:	bc70      	pop	{r4, r5, r6}
   12d2e:	4770      	bx	lr
		return -USB_ERR_FUNC;
   12d30:	f06f 0012 	mvn.w	r0, #18
   12d34:	e7fa      	b.n	12d2c <_usb_d_dev_ep_read_req+0x40>
		return -USB_ERR_PARAM;
   12d36:	f06f 0011 	mvn.w	r0, #17
   12d3a:	e7f7      	b.n	12d2c <_usb_d_dev_ep_read_req+0x40>
   12d3c:	20002210 	.word	0x20002210

00012d40 <_usb_d_dev_ep_trans>:

int32_t _usb_d_dev_ep_trans(const struct usb_d_transfer *trans)
{
   12d40:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	uint8_t               epn = USB_EP_GET_N(trans->ep);
   12d44:	7a03      	ldrb	r3, [r0, #8]
   12d46:	fa4f f983 	sxtb.w	r9, r3
	uint8_t ep_index = (epn == 0) ? 0 : (dir ? (epn + CONF_USB_D_MAX_EP_N) : epn);
   12d4a:	f013 030f 	ands.w	r3, r3, #15
{
   12d4e:	b087      	sub	sp, #28
	uint8_t ep_index = (epn == 0) ? 0 : (dir ? (epn + CONF_USB_D_MAX_EP_N) : epn);
   12d50:	d03a      	beq.n	12dc8 <_usb_d_dev_ep_trans+0x88>
   12d52:	f1b9 0f00 	cmp.w	r9, #0
   12d56:	bfb4      	ite	lt
   12d58:	1c9d      	addlt	r5, r3, #2
   12d5a:	461d      	movge	r5, r3
	return &dev_inst.ep[ep_index];
   12d5c:	4e5d      	ldr	r6, [pc, #372]	; (12ed4 <_usb_d_dev_ep_trans+0x194>)
	bool                  dir = USB_EP_GET_DIR(trans->ep);
	struct _usb_d_dev_ep *ept = _usb_d_dev_ept(epn, dir);

	uint16_t size_mask      = (ept->size == 1023) ? 1023 : (ept->size - 1);
   12d5e:	eb05 0285 	add.w	r2, r5, r5, lsl #2
   12d62:	eb06 0282 	add.w	r2, r6, r2, lsl #2
	return &dev_inst.ep[ep_index];
   12d66:	f105 0801 	add.w	r8, r5, #1
	uint16_t size_mask      = (ept->size == 1023) ? 1023 : (ept->size - 1);
   12d6a:	8c92      	ldrh	r2, [r2, #36]	; 0x24
   12d6c:	f240 31ff 	movw	r1, #1023	; 0x3ff
	return &dev_inst.ep[ep_index];
   12d70:	eb08 0888 	add.w	r8, r8, r8, lsl #2
	uint16_t size_mask      = (ept->size == 1023) ? 1023 : (ept->size - 1);
   12d74:	428a      	cmp	r2, r1
	return &dev_inst.ep[ep_index];
   12d76:	eb06 0888 	add.w	r8, r6, r8, lsl #2
	uint16_t size_mask      = (ept->size == 1023) ? 1023 : (ept->size - 1);
   12d7a:	d050      	beq.n	12e1e <_usb_d_dev_ep_trans+0xde>
   12d7c:	1e57      	subs	r7, r2, #1
   12d7e:	b2bf      	uxth	r7, r7
	bool     size_n_aligned = (trans->size & size_mask);
   12d80:	6841      	ldr	r1, [r0, #4]

	bool use_cache = false;

	volatile hal_atomic_t flags;

	if (epn > CONF_USB_D_MAX_EP_N) {
   12d82:	2b02      	cmp	r3, #2
	bool     size_n_aligned = (trans->size & size_mask);
   12d84:	ea07 0701 	and.w	r7, r7, r1
	if (epn > CONF_USB_D_MAX_EP_N) {
   12d88:	f200 8091 	bhi.w	12eae <_usb_d_dev_ep_trans+0x16e>
	 * 1. Buffer not in RAM (cache all).
	 * 2. IN/OUT with unaligned buffer (cache all).
	 * 3. OUT with unaligned packet size (cache last packet).
	 * 4. OUT size < 8 (sub-case for 3).
	 */
	if (!_usb_is_addr4dma(trans->buf, trans->size) || (!_usb_is_aligned(trans->buf))
   12d8c:	6803      	ldr	r3, [r0, #0]
   12d8e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
   12d92:	d223      	bcs.n	12ddc <_usb_d_dev_ep_trans+0x9c>
	    || (!dir && (trans->size < ept->size))) {
		if (!ept->cache) {
   12d94:	ea4f 0b85 	mov.w	fp, r5, lsl #2
   12d98:	eb0b 0305 	add.w	r3, fp, r5
   12d9c:	eb06 0383 	add.w	r3, r6, r3, lsl #2
   12da0:	6a1b      	ldr	r3, [r3, #32]
   12da2:	2b00      	cmp	r3, #0
   12da4:	f000 8092 	beq.w	12ecc <_usb_d_dev_ep_trans+0x18c>
			return -USB_ERR_FUNC;
		}
		/* Use cache all the time. */
		use_cache = true;
   12da8:	f04f 0a01 	mov.w	sl, #1
		}
		/* Set 'use_cache' on last packet. */
	}

	/* Check halt */
	if (ept->flags.bits.is_stalled) {
   12dac:	eb0b 0405 	add.w	r4, fp, r5
   12db0:	eb06 0484 	add.w	r4, r6, r4, lsl #2
   12db4:	f104 0220 	add.w	r2, r4, #32
   12db8:	f894 3027 	ldrb.w	r3, [r4, #39]	; 0x27
   12dbc:	071b      	lsls	r3, r3, #28
   12dbe:	d530      	bpl.n	12e22 <_usb_d_dev_ep_trans+0xe2>
		return USB_HALTED;
   12dc0:	2002      	movs	r0, #2
	} else {
		_usb_d_dev_out_next(ept, false);
	}

	return ERR_NONE;
}
   12dc2:	b007      	add	sp, #28
   12dc4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	uint16_t size_mask      = (ept->size == 1023) ? 1023 : (ept->size - 1);
   12dc8:	4e42      	ldr	r6, [pc, #264]	; (12ed4 <_usb_d_dev_ep_trans+0x194>)
   12dca:	8cb2      	ldrh	r2, [r6, #36]	; 0x24
   12dcc:	f240 31ff 	movw	r1, #1023	; 0x3ff
   12dd0:	428a      	cmp	r2, r1
   12dd2:	d01d      	beq.n	12e10 <_usb_d_dev_ep_trans+0xd0>
	return &dev_inst.ep[ep_index];
   12dd4:	f106 0814 	add.w	r8, r6, #20
   12dd8:	461d      	mov	r5, r3
   12dda:	e7cf      	b.n	12d7c <_usb_d_dev_ep_trans+0x3c>
	if (!_usb_is_addr4dma(trans->buf, trans->size) || (!_usb_is_aligned(trans->buf))
   12ddc:	4c3e      	ldr	r4, [pc, #248]	; (12ed8 <_usb_d_dev_ep_trans+0x198>)
   12dde:	eb03 0e01 	add.w	lr, r3, r1
   12de2:	45a6      	cmp	lr, r4
   12de4:	d8d6      	bhi.n	12d94 <_usb_d_dev_ep_trans+0x54>
   12de6:	f013 0303 	ands.w	r3, r3, #3
   12dea:	d1d3      	bne.n	12d94 <_usb_d_dev_ep_trans+0x54>
	    || (!dir && (trans->size < ept->size))) {
   12dec:	f1b9 0f00 	cmp.w	r9, #0
   12df0:	db60      	blt.n	12eb4 <_usb_d_dev_ep_trans+0x174>
   12df2:	428a      	cmp	r2, r1
   12df4:	d8ce      	bhi.n	12d94 <_usb_d_dev_ep_trans+0x54>
	if (!dir && size_n_aligned) {
   12df6:	2f00      	cmp	r7, #0
   12df8:	d060      	beq.n	12ebc <_usb_d_dev_ep_trans+0x17c>
		if (!ept->cache) {
   12dfa:	ea4f 0b85 	mov.w	fp, r5, lsl #2
   12dfe:	eb0b 0205 	add.w	r2, fp, r5
   12e02:	eb06 0282 	add.w	r2, r6, r2, lsl #2
   12e06:	6a12      	ldr	r2, [r2, #32]
   12e08:	2a00      	cmp	r2, #0
   12e0a:	d050      	beq.n	12eae <_usb_d_dev_ep_trans+0x16e>
	bool use_cache = false;
   12e0c:	469a      	mov	sl, r3
   12e0e:	e7cd      	b.n	12dac <_usb_d_dev_ep_trans+0x6c>
	bool     size_n_aligned = (trans->size & size_mask);
   12e10:	6841      	ldr	r1, [r0, #4]
	return &dev_inst.ep[ep_index];
   12e12:	461d      	mov	r5, r3
	bool     size_n_aligned = (trans->size & size_mask);
   12e14:	f3c1 0709 	ubfx	r7, r1, #0, #10
	return &dev_inst.ep[ep_index];
   12e18:	f106 0814 	add.w	r8, r6, #20
   12e1c:	e7b6      	b.n	12d8c <_usb_d_dev_ep_trans+0x4c>
   12e1e:	4617      	mov	r7, r2
   12e20:	e7ae      	b.n	12d80 <_usb_d_dev_ep_trans+0x40>
   12e22:	9001      	str	r0, [sp, #4]
	atomic_enter_critical(&flags);
   12e24:	a805      	add	r0, sp, #20
   12e26:	9202      	str	r2, [sp, #8]
   12e28:	f000 f8e0 	bl	12fec <atomic_enter_critical>
	if (_usb_d_dev_ep_is_busy(ept)) {
   12e2c:	9a02      	ldr	r2, [sp, #8]
   12e2e:	9b01      	ldr	r3, [sp, #4]
   12e30:	79d0      	ldrb	r0, [r2, #7]
   12e32:	f010 0140 	ands.w	r1, r0, #64	; 0x40
   12e36:	d131      	bne.n	12e9c <_usb_d_dev_ep_trans+0x15c>
	ept->flags.bits.is_busy = 1;
   12e38:	f040 0e40 	orr.w	lr, r0, #64	; 0x40
   12e3c:	f882 e007 	strb.w	lr, [r2, #7]
	atomic_leave_critical(&flags);
   12e40:	a805      	add	r0, sp, #20
   12e42:	9303      	str	r3, [sp, #12]
   12e44:	9102      	str	r1, [sp, #8]
	ept->flags.bits.is_busy = 1;
   12e46:	9201      	str	r2, [sp, #4]
	atomic_leave_critical(&flags);
   12e48:	f000 f8d8 	bl	12ffc <atomic_leave_critical>
	ept->trans_buf   = trans->buf;
   12e4c:	9b03      	ldr	r3, [sp, #12]
	ept->flags.bits.dir       = dir;
   12e4e:	9a01      	ldr	r2, [sp, #4]
	ept->trans_buf   = trans->buf;
   12e50:	6818      	ldr	r0, [r3, #0]
	ept->flags.bits.dir       = dir;
   12e52:	f892 e007 	ldrb.w	lr, [r2, #7]
	ept->trans_buf   = trans->buf;
   12e56:	6160      	str	r0, [r4, #20]
	bool                  dir = USB_EP_GET_DIR(trans->ep);
   12e58:	ea4f 70d9 	mov.w	r0, r9, lsr #31
	ept->flags.bits.dir       = dir;
   12e5c:	f360 1ec7 	bfi	lr, r0, #7, #1
	ept->flags.bits.use_cache = use_cache;
   12e60:	f36a 1e45 	bfi	lr, sl, #5, #1
	ept->trans_size  = trans->size;
   12e64:	6858      	ldr	r0, [r3, #4]
	ept->trans_count = 0;
   12e66:	9902      	ldr	r1, [sp, #8]
	ept->trans_size  = trans->size;
   12e68:	61a0      	str	r0, [r4, #24]
	ept->flags.bits.use_cache = use_cache;
   12e6a:	f882 e007 	strb.w	lr, [r2, #7]
	ept->trans_count = 0;
   12e6e:	61e1      	str	r1, [r4, #28]
	ept->flags.bits.need_zlp  = (trans->zlp && (!size_n_aligned));
   12e70:	7a5b      	ldrb	r3, [r3, #9]
   12e72:	b9c3      	cbnz	r3, 12ea6 <_usb_d_dev_ep_trans+0x166>
   12e74:	461f      	mov	r7, r3
   12e76:	445d      	add	r5, fp
   12e78:	eb06 0685 	add.w	r6, r6, r5, lsl #2
	if (dir) {
   12e7c:	f1b9 0f00 	cmp.w	r9, #0
	ept->flags.bits.need_zlp  = (trans->zlp && (!size_n_aligned));
   12e80:	f896 3027 	ldrb.w	r3, [r6, #39]	; 0x27
   12e84:	f367 1304 	bfi	r3, r7, #4, #1
   12e88:	f886 3027 	strb.w	r3, [r6, #39]	; 0x27
		_usb_d_dev_in_next(ept, false);
   12e8c:	4640      	mov	r0, r8
   12e8e:	f04f 0100 	mov.w	r1, #0
	if (dir) {
   12e92:	db17      	blt.n	12ec4 <_usb_d_dev_ep_trans+0x184>
		_usb_d_dev_out_next(ept, false);
   12e94:	f7fe ff36 	bl	11d04 <_usb_d_dev_out_next>
	return ERR_NONE;
   12e98:	2000      	movs	r0, #0
   12e9a:	e792      	b.n	12dc2 <_usb_d_dev_ep_trans+0x82>
		atomic_leave_critical(&flags);
   12e9c:	a805      	add	r0, sp, #20
   12e9e:	f000 f8ad 	bl	12ffc <atomic_leave_critical>
		return USB_BUSY;
   12ea2:	2001      	movs	r0, #1
   12ea4:	e78d      	b.n	12dc2 <_usb_d_dev_ep_trans+0x82>
	ept->flags.bits.need_zlp  = (trans->zlp && (!size_n_aligned));
   12ea6:	fab7 f787 	clz	r7, r7
   12eaa:	097f      	lsrs	r7, r7, #5
   12eac:	e7e3      	b.n	12e76 <_usb_d_dev_ep_trans+0x136>
		return -USB_ERR_PARAM;
   12eae:	f06f 0011 	mvn.w	r0, #17
   12eb2:	e786      	b.n	12dc2 <_usb_d_dev_ep_trans+0x82>
	bool use_cache = false;
   12eb4:	469a      	mov	sl, r3
   12eb6:	ea4f 0b85 	mov.w	fp, r5, lsl #2
   12eba:	e777      	b.n	12dac <_usb_d_dev_ep_trans+0x6c>
   12ebc:	46ba      	mov	sl, r7
   12ebe:	ea4f 0b85 	mov.w	fp, r5, lsl #2
   12ec2:	e773      	b.n	12dac <_usb_d_dev_ep_trans+0x6c>
		_usb_d_dev_in_next(ept, false);
   12ec4:	f7fe fe64 	bl	11b90 <_usb_d_dev_in_next>
	return ERR_NONE;
   12ec8:	2000      	movs	r0, #0
   12eca:	e77a      	b.n	12dc2 <_usb_d_dev_ep_trans+0x82>
			return -USB_ERR_FUNC;
   12ecc:	f06f 0012 	mvn.w	r0, #18
   12ed0:	e777      	b.n	12dc2 <_usb_d_dev_ep_trans+0x82>
   12ed2:	bf00      	nop
   12ed4:	20001fe0 	.word	0x20001fe0
   12ed8:	20031fff 	.word	0x20031fff

00012edc <_usb_d_dev_ep_abort>:

void _usb_d_dev_ep_abort(const uint8_t ep)
{
   12edc:	b243      	sxtb	r3, r0
	uint8_t ep_index = (epn == 0) ? 0 : (dir ? (epn + CONF_USB_D_MAX_EP_N) : epn);
   12ede:	f010 000f 	ands.w	r0, r0, #15
   12ee2:	d117      	bne.n	12f14 <_usb_d_dev_ep_abort+0x38>
{
   12ee4:	b5f0      	push	{r4, r5, r6, r7, lr}
	uint8_t epn = USB_EP_GET_N(ept->ep);
   12ee6:	0081      	lsls	r1, r0, #2
   12ee8:	4d27      	ldr	r5, [pc, #156]	; (12f88 <_usb_d_dev_ep_abort+0xac>)
   12eea:	180a      	adds	r2, r1, r0
   12eec:	eb05 0282 	add.w	r2, r5, r2, lsl #2
{
   12ef0:	b083      	sub	sp, #12
	uint8_t epn = USB_EP_GET_N(ept->ep);
   12ef2:	f892 4026 	ldrb.w	r4, [r2, #38]	; 0x26
	const uint8_t intflags[2] = {USB_D_BANK0_INT_FLAGS, USB_D_BANK1_INT_FLAGS};
   12ef6:	2625      	movs	r6, #37	; 0x25
   12ef8:	f88d 6004 	strb.w	r6, [sp, #4]
	if (!(_usb_d_dev_ep_is_used(ept) && _usb_d_dev_ep_is_busy(ept))) {
   12efc:	2cff      	cmp	r4, #255	; 0xff
	const uint8_t intflags[2] = {USB_D_BANK0_INT_FLAGS, USB_D_BANK1_INT_FLAGS};
   12efe:	f04f 064a 	mov.w	r6, #74	; 0x4a
   12f02:	f88d 6005 	strb.w	r6, [sp, #5]
	if (!(_usb_d_dev_ep_is_used(ept) && _usb_d_dev_ep_is_busy(ept))) {
   12f06:	d003      	beq.n	12f10 <_usb_d_dev_ep_abort+0x34>
   12f08:	f892 2027 	ldrb.w	r2, [r2, #39]	; 0x27
   12f0c:	0652      	lsls	r2, r2, #25
   12f0e:	d408      	bmi.n	12f22 <_usb_d_dev_ep_abort+0x46>
	struct _usb_d_dev_ep *ept = _usb_d_dev_ept(epn, dir);
	if (epn > CONF_USB_D_MAX_EP_N) {
		return;
	}
	_usb_d_dev_trans_stop(ept, dir, USB_TRANS_ABORT);
}
   12f10:	b003      	add	sp, #12
   12f12:	bdf0      	pop	{r4, r5, r6, r7, pc}
	uint8_t ep_index = (epn == 0) ? 0 : (dir ? (epn + CONF_USB_D_MAX_EP_N) : epn);
   12f14:	2b00      	cmp	r3, #0
   12f16:	bfb4      	ite	lt
   12f18:	1c82      	addlt	r2, r0, #2
   12f1a:	4602      	movge	r2, r0
	if (epn > CONF_USB_D_MAX_EP_N) {
   12f1c:	2802      	cmp	r0, #2
   12f1e:	d931      	bls.n	12f84 <_usb_d_dev_ep_abort+0xa8>
   12f20:	4770      	bx	lr
	uint8_t epn = USB_EP_GET_N(ept->ep);
   12f22:	f004 020f 	and.w	r2, r4, #15
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSCLR.reg = mask;
   12f26:	f102 0608 	add.w	r6, r2, #8
   12f2a:	0177      	lsls	r7, r6, #5
	if (dir) {
   12f2c:	2b00      	cmp	r3, #0
   12f2e:	f107 4782 	add.w	r7, r7, #1090519040	; 0x41000000
   12f32:	bfb5      	itete	lt
   12f34:	f04f 0e80 	movlt.w	lr, #128	; 0x80
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSSET.reg = mask;
   12f38:	f04f 0e40 	movge.w	lr, #64	; 0x40
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSCLR.reg = mask;
   12f3c:	f887 e004 	strblt.w	lr, [r7, #4]
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSSET.reg = mask;
   12f40:	f887 e005 	strbge.w	lr, [r7, #5]
	_usbd_ep_int_ack(epn, intflags[dir]);
   12f44:	af02      	add	r7, sp, #8
   12f46:	eb07 73d3 	add.w	r3, r7, r3, lsr #31
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg = mask;
   12f4a:	0176      	lsls	r6, r6, #5
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENCLR.reg = mask;
   12f4c:	0152      	lsls	r2, r2, #5
	ept->flags.bits.is_busy = 0;
   12f4e:	4401      	add	r1, r0
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg = mask;
   12f50:	f106 4682 	add.w	r6, r6, #1090519040	; 0x41000000
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENCLR.reg = mask;
   12f54:	f102 4282 	add.w	r2, r2, #1090519040	; 0x41000000
   12f58:	eb05 0181 	add.w	r1, r5, r1, lsl #2
	_usbd_ep_int_ack(epn, intflags[dir]);
   12f5c:	f813 0c04 	ldrb.w	r0, [r3, #-4]
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg = mask;
   12f60:	71f0      	strb	r0, [r6, #7]
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENCLR.reg = mask;
   12f62:	f882 0108 	strb.w	r0, [r2, #264]	; 0x108
	ept->flags.bits.is_busy = 0;
   12f66:	f891 6027 	ldrb.w	r6, [r1, #39]	; 0x27
	dev_inst.ep_callbacks.done(ept->ep, code, ept->trans_count);
   12f6a:	692d      	ldr	r5, [r5, #16]
   12f6c:	69ca      	ldr	r2, [r1, #28]
	ept->flags.bits.is_busy = 0;
   12f6e:	f36f 1686 	bfc	r6, #6, #1
   12f72:	f881 6027 	strb.w	r6, [r1, #39]	; 0x27
	dev_inst.ep_callbacks.done(ept->ep, code, ept->trans_count);
   12f76:	4620      	mov	r0, r4
   12f78:	2102      	movs	r1, #2
   12f7a:	462b      	mov	r3, r5
}
   12f7c:	b003      	add	sp, #12
   12f7e:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
	dev_inst.ep_callbacks.done(ept->ep, code, ept->trans_count);
   12f82:	4718      	bx	r3
	return &dev_inst.ep[ep_index];
   12f84:	4610      	mov	r0, r2
   12f86:	e7ad      	b.n	12ee4 <_usb_d_dev_ep_abort+0x8>
   12f88:	20001fe0 	.word	0x20001fe0

00012f8c <_usb_d_dev_register_callback>:
	return USB_OK;
}

void _usb_d_dev_register_callback(const enum usb_d_cb_type type, const FUNC_PTR func)
{
	FUNC_PTR f = (func == NULL) ? (FUNC_PTR)_dummy_func_no_return : (FUNC_PTR)func;
   12f8c:	4b06      	ldr	r3, [pc, #24]	; (12fa8 <_usb_d_dev_register_callback+0x1c>)
   12f8e:	2900      	cmp	r1, #0
   12f90:	bf08      	it	eq
   12f92:	4619      	moveq	r1, r3
	if (type == USB_D_CB_EVENT) {
   12f94:	2801      	cmp	r0, #1
   12f96:	d003      	beq.n	12fa0 <_usb_d_dev_register_callback+0x14>
		dev_inst.callbacks.event = (_usb_d_dev_event_cb_t)f;
	} else if (type == USB_D_CB_SOF) {
   12f98:	b908      	cbnz	r0, 12f9e <_usb_d_dev_register_callback+0x12>
		dev_inst.callbacks.sof = (_usb_d_dev_sof_cb_t)f;
   12f9a:	4b04      	ldr	r3, [pc, #16]	; (12fac <_usb_d_dev_register_callback+0x20>)
   12f9c:	6019      	str	r1, [r3, #0]
   12f9e:	4770      	bx	lr
		dev_inst.callbacks.event = (_usb_d_dev_event_cb_t)f;
   12fa0:	4b02      	ldr	r3, [pc, #8]	; (12fac <_usb_d_dev_register_callback+0x20>)
   12fa2:	6059      	str	r1, [r3, #4]
   12fa4:	4770      	bx	lr
   12fa6:	bf00      	nop
   12fa8:	00011b8d 	.word	0x00011b8d
   12fac:	20001fe0 	.word	0x20001fe0

00012fb0 <_usb_d_dev_register_ep_callback>:
	}
}

void _usb_d_dev_register_ep_callback(const enum usb_d_dev_ep_cb_type type, const FUNC_PTR func)
{
	FUNC_PTR f = (func == NULL) ? (FUNC_PTR)_dummy_func_no_return : (FUNC_PTR)func;
   12fb0:	4b08      	ldr	r3, [pc, #32]	; (12fd4 <_usb_d_dev_register_ep_callback+0x24>)
   12fb2:	2900      	cmp	r1, #0
   12fb4:	bf08      	it	eq
   12fb6:	4619      	moveq	r1, r3
	if (type == USB_D_DEV_EP_CB_SETUP) {
   12fb8:	b130      	cbz	r0, 12fc8 <_usb_d_dev_register_ep_callback+0x18>
		dev_inst.ep_callbacks.setup = (_usb_d_dev_ep_cb_setup_t)f;
	} else if (type == USB_D_DEV_EP_CB_MORE) {
   12fba:	2801      	cmp	r0, #1
   12fbc:	d007      	beq.n	12fce <_usb_d_dev_register_ep_callback+0x1e>
		dev_inst.ep_callbacks.more = (_usb_d_dev_ep_cb_more_t)f;
	} else if (type == USB_D_DEV_EP_CB_DONE) {
   12fbe:	2802      	cmp	r0, #2
		dev_inst.ep_callbacks.done = (_usb_d_dev_ep_cb_done_t)f;
   12fc0:	bf04      	itt	eq
   12fc2:	4b05      	ldreq	r3, [pc, #20]	; (12fd8 <_usb_d_dev_register_ep_callback+0x28>)
   12fc4:	6119      	streq	r1, [r3, #16]
   12fc6:	4770      	bx	lr
		dev_inst.ep_callbacks.setup = (_usb_d_dev_ep_cb_setup_t)f;
   12fc8:	4b03      	ldr	r3, [pc, #12]	; (12fd8 <_usb_d_dev_register_ep_callback+0x28>)
   12fca:	6099      	str	r1, [r3, #8]
   12fcc:	4770      	bx	lr
		dev_inst.ep_callbacks.more = (_usb_d_dev_ep_cb_more_t)f;
   12fce:	4b02      	ldr	r3, [pc, #8]	; (12fd8 <_usb_d_dev_register_ep_callback+0x28>)
   12fd0:	60d9      	str	r1, [r3, #12]
   12fd2:	4770      	bx	lr
   12fd4:	00011b8d 	.word	0x00011b8d
   12fd8:	20001fe0 	.word	0x20001fe0

00012fdc <USB_0_Handler>:
   12fdc:	f7fe bf8e 	b.w	11efc <_usb_d_dev_handler>

00012fe0 <USB_1_Handler>:
   12fe0:	f7fe bf8c 	b.w	11efc <_usb_d_dev_handler>

00012fe4 <USB_2_Handler>:
   12fe4:	f7fe bf8a 	b.w	11efc <_usb_d_dev_handler>

00012fe8 <USB_3_Handler>:
 * \brief USB interrupt handler
 */
void USB_3_Handler(void)
{

	_usb_d_dev_handler();
   12fe8:	f7fe bf88 	b.w	11efc <_usb_d_dev_handler>

00012fec <atomic_enter_critical>:
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
   12fec:	f3ef 8310 	mrs	r3, PRIMASK
/**
 * \brief Disable interrupts, enter critical section
 */
void atomic_enter_critical(hal_atomic_t volatile *atomic)
{
	*atomic = __get_PRIMASK();
   12ff0:	6003      	str	r3, [r0, #0]
  __ASM volatile ("cpsid i" : : : "memory");
   12ff2:	b672      	cpsid	i
  __ASM volatile ("dmb 0xF":::"memory");
   12ff4:	f3bf 8f5f 	dmb	sy
   12ff8:	4770      	bx	lr
   12ffa:	bf00      	nop

00012ffc <atomic_leave_critical>:
   12ffc:	f3bf 8f5f 	dmb	sy
 * \brief Exit atomic section
 */
void atomic_leave_critical(hal_atomic_t volatile *atomic)
{
	__DMB();
	__set_PRIMASK(*atomic);
   13000:	6803      	ldr	r3, [r0, #0]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
   13002:	f383 8810 	msr	PRIMASK, r3
   13006:	4770      	bx	lr

00013008 <_ZN9ClearCore15BlinkCodeDriver6UpdateEv>:
#include "BlinkCodeDriver.h"

namespace ClearCore {

void BlinkCodeDriver::Update() {
    switch (m_blinkState) {
   13008:	7943      	ldrb	r3, [r0, #5]
void BlinkCodeDriver::Update() {
   1300a:	b430      	push	{r4, r5}
    switch (m_blinkState) {
   1300c:	2b08      	cmp	r3, #8
   1300e:	d810      	bhi.n	13032 <_ZN9ClearCore15BlinkCodeDriver6UpdateEv+0x2a>
   13010:	e8df f003 	tbb	[pc, r3]
   13014:	604d3b25 	.word	0x604d3b25
   13018:	05a18a74 	.word	0x05a18a74
   1301c:	11          	.byte	0x11
   1301d:	00          	.byte	0x00
            m_ledOn = true;
            m_blinkState = CODE_OUTPUT;
            break;

        case CODE_OUTPUT:
            if (--m_timer) {
   1301e:	8903      	ldrh	r3, [r0, #8]
   13020:	3b01      	subs	r3, #1
   13022:	b29b      	uxth	r3, r3
   13024:	8103      	strh	r3, [r0, #8]
   13026:	b923      	cbnz	r3, 13032 <_ZN9ClearCore15BlinkCodeDriver6UpdateEv+0x2a>
                // Code value is still active
                break;
            }
            m_timer = m_blinkTicks;
   13028:	8a42      	ldrh	r2, [r0, #18]
            m_ledOn = false;
   1302a:	7383      	strb	r3, [r0, #14]
            m_blinkState = CODE_DELAY;
   1302c:	2308      	movs	r3, #8
            m_timer = m_blinkTicks;
   1302e:	8102      	strh	r2, [r0, #8]
            m_blinkState = CODE_DELAY;
   13030:	7143      	strb	r3, [r0, #5]
                m_ledOn = false;
                m_blinkState = PRE_GROUP_DELAY;
            }
            break;
    }
}
   13032:	bc30      	pop	{r4, r5}
   13034:	4770      	bx	lr
            if (--m_timer) {
   13036:	8903      	ldrh	r3, [r0, #8]
   13038:	3b01      	subs	r3, #1
   1303a:	b29b      	uxth	r3, r3
   1303c:	8103      	strh	r3, [r0, #8]
   1303e:	2b00      	cmp	r3, #0
   13040:	d1f7      	bne.n	13032 <_ZN9ClearCore15BlinkCodeDriver6UpdateEv+0x2a>
            if (--m_blinkCnt) {
   13042:	8981      	ldrh	r1, [r0, #12]
   13044:	3901      	subs	r1, #1
   13046:	b289      	uxth	r1, r1
   13048:	8181      	strh	r1, [r0, #12]
   1304a:	2900      	cmp	r1, #0
   1304c:	f000 80b3 	beq.w	131b6 <_ZN9ClearCore15BlinkCodeDriver6UpdateEv+0x1ae>
                m_timer = m_blinkTicks;
   13050:	8a43      	ldrh	r3, [r0, #18]
   13052:	8103      	strh	r3, [r0, #8]
                m_ledOn = true;
   13054:	2201      	movs	r2, #1
                m_blinkState = CODE_OUTPUT;
   13056:	2307      	movs	r3, #7
                m_ledOn = true;
   13058:	7382      	strb	r2, [r0, #14]
                m_blinkState = CODE_OUTPUT;
   1305a:	7143      	strb	r3, [r0, #5]
                break;
   1305c:	e7e9      	b.n	13032 <_ZN9ClearCore15BlinkCodeDriver6UpdateEv+0x2a>
    }
    if (group >= BLINK_GROUP_MAX) {
        group = 0;
        m_patternWrap = true;
    }
    if (!(m_codes[group] >> code)) {
   1305e:	7801      	ldrb	r1, [r0, #0]
   13060:	2900      	cmp	r1, #0
   13062:	f040 8089 	bne.w	13178 <_ZN9ClearCore15BlinkCodeDriver6UpdateEv+0x170>
        // Search for the next group with an active code
        code = 0;
        uint8_t iGroup;
        // Search from the next index up to the maximum group index
        for (iGroup = group + 1; iGroup < BLINK_GROUP_MAX; iGroup++) {
            if (m_codes[iGroup]) {
   13066:	7841      	ldrb	r1, [r0, #1]
   13068:	2900      	cmp	r1, #0
   1306a:	f040 80cb 	bne.w	13204 <_ZN9ClearCore15BlinkCodeDriver6UpdateEv+0x1fc>
   1306e:	7883      	ldrb	r3, [r0, #2]
   13070:	2b00      	cmp	r3, #0
   13072:	f040 811a 	bne.w	132aa <_ZN9ClearCore15BlinkCodeDriver6UpdateEv+0x2a2>
   13076:	78c3      	ldrb	r3, [r0, #3]
   13078:	2b00      	cmp	r3, #0
   1307a:	f040 8118 	bne.w	132ae <_ZN9ClearCore15BlinkCodeDriver6UpdateEv+0x2a6>
   1307e:	7903      	ldrb	r3, [r0, #4]
        for (iGroup = group + 1; iGroup < BLINK_GROUP_MAX; iGroup++) {
   13080:	2504      	movs	r5, #4
            if (m_codes[iGroup]) {
   13082:	2b00      	cmp	r3, #0
   13084:	d0d5      	beq.n	13032 <_ZN9ClearCore15BlinkCodeDriver6UpdateEv+0x2a>
   13086:	5d41      	ldrb	r1, [r0, r5]
   13088:	e077      	b.n	1317a <_ZN9ClearCore15BlinkCodeDriver6UpdateEv+0x172>
            if (--m_timer) {
   1308a:	8903      	ldrh	r3, [r0, #8]
   1308c:	3b01      	subs	r3, #1
   1308e:	b29b      	uxth	r3, r3
   13090:	8103      	strh	r3, [r0, #8]
   13092:	2b00      	cmp	r3, #0
   13094:	d1cd      	bne.n	13032 <_ZN9ClearCore15BlinkCodeDriver6UpdateEv+0x2a>
            m_strobeCnt = m_startTicks / m_strobeOnOffTicks;
   13096:	8a02      	ldrh	r2, [r0, #16]
            m_patternWrap = false;
   13098:	73c3      	strb	r3, [r0, #15]
            m_ledOn = true;
   1309a:	2401      	movs	r4, #1
            m_blinkState = START_OUTPUT;
   1309c:	2102      	movs	r1, #2
            m_strobeCnt = m_startTicks / m_strobeOnOffTicks;
   1309e:	8ac3      	ldrh	r3, [r0, #22]
            m_timer = m_strobeOnOffTicks;
   130a0:	8102      	strh	r2, [r0, #8]
            m_strobeCnt = m_startTicks / m_strobeOnOffTicks;
   130a2:	fbb3 f3f2 	udiv	r3, r3, r2
            m_ledOn = true;
   130a6:	7384      	strb	r4, [r0, #14]
            m_blinkState = START_OUTPUT;
   130a8:	7141      	strb	r1, [r0, #5]
            m_strobeCnt = m_startTicks / m_strobeOnOffTicks;
   130aa:	8143      	strh	r3, [r0, #10]
            break;
   130ac:	e7c1      	b.n	13032 <_ZN9ClearCore15BlinkCodeDriver6UpdateEv+0x2a>
            if (--m_timer) {
   130ae:	8903      	ldrh	r3, [r0, #8]
   130b0:	3b01      	subs	r3, #1
   130b2:	b29b      	uxth	r3, r3
   130b4:	8103      	strh	r3, [r0, #8]
   130b6:	2b00      	cmp	r3, #0
   130b8:	d1bb      	bne.n	13032 <_ZN9ClearCore15BlinkCodeDriver6UpdateEv+0x2a>
            if (--m_strobeCnt) {
   130ba:	8943      	ldrh	r3, [r0, #10]
            m_ledOn = !m_ledOn;
   130bc:	7b82      	ldrb	r2, [r0, #14]
            if (--m_strobeCnt) {
   130be:	3b01      	subs	r3, #1
   130c0:	b29b      	uxth	r3, r3
            m_ledOn = !m_ledOn;
   130c2:	f082 0201 	eor.w	r2, r2, #1
            if (--m_strobeCnt) {
   130c6:	8143      	strh	r3, [r0, #10]
            m_ledOn = !m_ledOn;
   130c8:	7382      	strb	r2, [r0, #14]
            if (--m_strobeCnt) {
   130ca:	2b00      	cmp	r3, #0
   130cc:	d06d      	beq.n	131aa <_ZN9ClearCore15BlinkCodeDriver6UpdateEv+0x1a2>
                m_timer = m_strobeOnOffTicks;
   130ce:	8a03      	ldrh	r3, [r0, #16]
   130d0:	8103      	strh	r3, [r0, #8]
                break;
   130d2:	e7ae      	b.n	13032 <_ZN9ClearCore15BlinkCodeDriver6UpdateEv+0x2a>
            if (--m_timer) {
   130d4:	8903      	ldrh	r3, [r0, #8]
   130d6:	3b01      	subs	r3, #1
   130d8:	b29b      	uxth	r3, r3
   130da:	8103      	strh	r3, [r0, #8]
   130dc:	2b00      	cmp	r3, #0
   130de:	d1a8      	bne.n	13032 <_ZN9ClearCore15BlinkCodeDriver6UpdateEv+0x2a>
            m_blinkCnt = m_currentGroup + 1;
   130e0:	79c2      	ldrb	r2, [r0, #7]
            m_strobeCnt = m_blinkTicks / m_strobeOnOffTicks;
   130e2:	8a01      	ldrh	r1, [r0, #16]
   130e4:	8a43      	ldrh	r3, [r0, #18]
            m_timer = m_strobeOnOffTicks;
   130e6:	8101      	strh	r1, [r0, #8]
            m_blinkCnt = m_currentGroup + 1;
   130e8:	3201      	adds	r2, #1
            m_ledOn = true;
   130ea:	2501      	movs	r5, #1
            m_blinkState = GROUP_OUTPUT;
   130ec:	2404      	movs	r4, #4
            m_strobeCnt = m_blinkTicks / m_strobeOnOffTicks;
   130ee:	fbb3 f3f1 	udiv	r3, r3, r1
            m_blinkCnt = m_currentGroup + 1;
   130f2:	8182      	strh	r2, [r0, #12]
            m_ledOn = true;
   130f4:	7385      	strb	r5, [r0, #14]
            m_blinkState = GROUP_OUTPUT;
   130f6:	7144      	strb	r4, [r0, #5]
            m_strobeCnt = m_blinkTicks / m_strobeOnOffTicks;
   130f8:	8143      	strh	r3, [r0, #10]
            break;
   130fa:	e79a      	b.n	13032 <_ZN9ClearCore15BlinkCodeDriver6UpdateEv+0x2a>
            if (--m_timer) {
   130fc:	8903      	ldrh	r3, [r0, #8]
   130fe:	3b01      	subs	r3, #1
   13100:	b29b      	uxth	r3, r3
   13102:	8103      	strh	r3, [r0, #8]
   13104:	2b00      	cmp	r3, #0
   13106:	d194      	bne.n	13032 <_ZN9ClearCore15BlinkCodeDriver6UpdateEv+0x2a>
            if (--m_strobeCnt) {
   13108:	8943      	ldrh	r3, [r0, #10]
            m_ledOn = !m_ledOn;
   1310a:	7b82      	ldrb	r2, [r0, #14]
            if (--m_strobeCnt) {
   1310c:	3b01      	subs	r3, #1
   1310e:	b29b      	uxth	r3, r3
            m_ledOn = !m_ledOn;
   13110:	f082 0201 	eor.w	r2, r2, #1
            if (--m_strobeCnt) {
   13114:	8143      	strh	r3, [r0, #10]
            m_ledOn = !m_ledOn;
   13116:	7382      	strb	r2, [r0, #14]
            if (--m_strobeCnt) {
   13118:	2b00      	cmp	r3, #0
   1311a:	d1d8      	bne.n	130ce <_ZN9ClearCore15BlinkCodeDriver6UpdateEv+0xc6>
            m_timer = m_blinkTicks;
   1311c:	8a42      	ldrh	r2, [r0, #18]
            m_ledOn = false;
   1311e:	7383      	strb	r3, [r0, #14]
            m_blinkState = GROUP_DELAY;
   13120:	2305      	movs	r3, #5
            m_timer = m_blinkTicks;
   13122:	8102      	strh	r2, [r0, #8]
            m_blinkState = GROUP_DELAY;
   13124:	7143      	strb	r3, [r0, #5]
            break;
   13126:	e784      	b.n	13032 <_ZN9ClearCore15BlinkCodeDriver6UpdateEv+0x2a>
            if (--m_timer) {
   13128:	8903      	ldrh	r3, [r0, #8]
   1312a:	3b01      	subs	r3, #1
   1312c:	b29b      	uxth	r3, r3
   1312e:	8103      	strh	r3, [r0, #8]
   13130:	2b00      	cmp	r3, #0
   13132:	f47f af7e 	bne.w	13032 <_ZN9ClearCore15BlinkCodeDriver6UpdateEv+0x2a>
            if (--m_blinkCnt) {
   13136:	8983      	ldrh	r3, [r0, #12]
   13138:	3b01      	subs	r3, #1
   1313a:	b29b      	uxth	r3, r3
   1313c:	8183      	strh	r3, [r0, #12]
   1313e:	b373      	cbz	r3, 1319e <_ZN9ClearCore15BlinkCodeDriver6UpdateEv+0x196>
                m_strobeCnt = m_blinkTicks / m_strobeOnOffTicks;
   13140:	8a02      	ldrh	r2, [r0, #16]
   13142:	8a43      	ldrh	r3, [r0, #18]
                m_timer = m_strobeOnOffTicks;
   13144:	8102      	strh	r2, [r0, #8]
                m_ledOn = true;
   13146:	2401      	movs	r4, #1
                m_blinkState = GROUP_OUTPUT;
   13148:	2104      	movs	r1, #4
                m_strobeCnt = m_blinkTicks / m_strobeOnOffTicks;
   1314a:	fbb3 f3f2 	udiv	r3, r3, r2
                m_ledOn = true;
   1314e:	7384      	strb	r4, [r0, #14]
                m_blinkState = GROUP_OUTPUT;
   13150:	7141      	strb	r1, [r0, #5]
                m_strobeCnt = m_blinkTicks / m_strobeOnOffTicks;
   13152:	8143      	strh	r3, [r0, #10]
                break;
   13154:	e76d      	b.n	13032 <_ZN9ClearCore15BlinkCodeDriver6UpdateEv+0x2a>
            if (--m_timer) {
   13156:	8903      	ldrh	r3, [r0, #8]
   13158:	3b01      	subs	r3, #1
   1315a:	b29b      	uxth	r3, r3
   1315c:	8103      	strh	r3, [r0, #8]
   1315e:	2b00      	cmp	r3, #0
   13160:	f47f af67 	bne.w	13032 <_ZN9ClearCore15BlinkCodeDriver6UpdateEv+0x2a>
            m_blinkCnt = m_currentCode + 1;
   13164:	7983      	ldrb	r3, [r0, #6]
            m_timer = m_blinkTicks;
   13166:	8a42      	ldrh	r2, [r0, #18]
   13168:	8102      	strh	r2, [r0, #8]
            m_blinkCnt = m_currentCode + 1;
   1316a:	3301      	adds	r3, #1
            m_ledOn = true;
   1316c:	2101      	movs	r1, #1
            m_blinkState = CODE_OUTPUT;
   1316e:	2207      	movs	r2, #7
            m_blinkCnt = m_currentCode + 1;
   13170:	8183      	strh	r3, [r0, #12]
            m_ledOn = true;
   13172:	7381      	strb	r1, [r0, #14]
            m_blinkState = CODE_OUTPUT;
   13174:	7142      	strb	r2, [r0, #5]
            break;
   13176:	e75c      	b.n	13032 <_ZN9ClearCore15BlinkCodeDriver6UpdateEv+0x2a>
    if (!(m_codes[group] >> code)) {
   13178:	2500      	movs	r5, #0
        // Set the index of the next active group found
        group = iGroup;
    }
    // There is an active code within group, find out the code value
    // Set the first group/code pair to output
    for (; !(m_codes[group] & (1 << code)); code++) {
   1317a:	f011 0301 	ands.w	r3, r1, #1
   1317e:	d149      	bne.n	13214 <_ZN9ClearCore15BlinkCodeDriver6UpdateEv+0x20c>
   13180:	3301      	adds	r3, #1
   13182:	b2db      	uxtb	r3, r3
   13184:	fa41 f203 	asr.w	r2, r1, r3
   13188:	07d4      	lsls	r4, r2, #31
   1318a:	d5f9      	bpl.n	13180 <_ZN9ClearCore15BlinkCodeDriver6UpdateEv+0x178>
            m_timer = m_prestartTicks;
   1318c:	8a84      	ldrh	r4, [r0, #20]
        continue;
    }
    m_currentGroup = group;
   1318e:	71c5      	strb	r5, [r0, #7]
            m_ledOn = false;
   13190:	2100      	movs	r1, #0
            m_blinkState = PRE_START_DELAY;
   13192:	2201      	movs	r2, #1
    m_currentCode = code;
   13194:	7183      	strb	r3, [r0, #6]
            m_timer = m_prestartTicks;
   13196:	8104      	strh	r4, [r0, #8]
            m_ledOn = false;
   13198:	7381      	strb	r1, [r0, #14]
            m_blinkState = PRE_START_DELAY;
   1319a:	7142      	strb	r2, [r0, #5]
            break;
   1319c:	e749      	b.n	13032 <_ZN9ClearCore15BlinkCodeDriver6UpdateEv+0x2a>
            m_timer = m_precodeTicks;
   1319e:	8b42      	ldrh	r2, [r0, #26]
            m_ledOn = false;
   131a0:	7383      	strb	r3, [r0, #14]
            m_blinkState = PRE_CODE_DELAY;
   131a2:	2306      	movs	r3, #6
            m_timer = m_precodeTicks;
   131a4:	8102      	strh	r2, [r0, #8]
            m_blinkState = PRE_CODE_DELAY;
   131a6:	7143      	strb	r3, [r0, #5]
            break;
   131a8:	e743      	b.n	13032 <_ZN9ClearCore15BlinkCodeDriver6UpdateEv+0x2a>
            m_timer = m_pregroupTicks;
   131aa:	8b02      	ldrh	r2, [r0, #24]
            m_ledOn = false;
   131ac:	7383      	strb	r3, [r0, #14]
            m_blinkState = PRE_GROUP_DELAY;
   131ae:	2303      	movs	r3, #3
            m_timer = m_pregroupTicks;
   131b0:	8102      	strh	r2, [r0, #8]
            m_blinkState = PRE_GROUP_DELAY;
   131b2:	7143      	strb	r3, [r0, #5]
            break;
   131b4:	e73d      	b.n	13032 <_ZN9ClearCore15BlinkCodeDriver6UpdateEv+0x2a>
            if (!NextCode(m_currentGroup, m_currentCode + 1)) {
   131b6:	7983      	ldrb	r3, [r0, #6]
   131b8:	79c2      	ldrb	r2, [r0, #7]
   131ba:	3301      	adds	r3, #1
   131bc:	b2db      	uxtb	r3, r3
    if (code > 7) {
   131be:	2b07      	cmp	r3, #7
        group++;
   131c0:	bf85      	ittet	hi
   131c2:	3201      	addhi	r2, #1
   131c4:	b2d2      	uxtbhi	r2, r2
   131c6:	4619      	movls	r1, r3
        code = 0;
   131c8:	460b      	movhi	r3, r1
    if (group >= BLINK_GROUP_MAX) {
   131ca:	2a04      	cmp	r2, #4
   131cc:	4615      	mov	r5, r2
   131ce:	dd1b      	ble.n	13208 <_ZN9ClearCore15BlinkCodeDriver6UpdateEv+0x200>
    if (!(m_codes[group] >> code)) {
   131d0:	7804      	ldrb	r4, [r0, #0]
        m_patternWrap = true;
   131d2:	2201      	movs	r2, #1
    if (!(m_codes[group] >> code)) {
   131d4:	fa54 f501 	asrs.w	r5, r4, r1
        m_patternWrap = true;
   131d8:	73c2      	strb	r2, [r0, #15]
    if (!(m_codes[group] >> code)) {
   131da:	d01d      	beq.n	13218 <_ZN9ClearCore15BlinkCodeDriver6UpdateEv+0x210>
        group = 0;
   131dc:	2200      	movs	r2, #0
    for (; !(m_codes[group] & (1 << code)); code++) {
   131de:	07e9      	lsls	r1, r5, #31
   131e0:	d452      	bmi.n	13288 <_ZN9ClearCore15BlinkCodeDriver6UpdateEv+0x280>
   131e2:	2501      	movs	r5, #1
   131e4:	3301      	adds	r3, #1
   131e6:	b2db      	uxtb	r3, r3
   131e8:	fa44 f103 	asr.w	r1, r4, r3
   131ec:	07c9      	lsls	r1, r1, #31
   131ee:	d5f9      	bpl.n	131e4 <_ZN9ClearCore15BlinkCodeDriver6UpdateEv+0x1dc>
    m_currentGroup = group;
   131f0:	71c2      	strb	r2, [r0, #7]
    m_currentCode = code;
   131f2:	7183      	strb	r3, [r0, #6]
            else if (m_patternWrap) {
   131f4:	2d00      	cmp	r5, #0
   131f6:	d149      	bne.n	1328c <_ZN9ClearCore15BlinkCodeDriver6UpdateEv+0x284>
                m_timer = m_pregroupTicks;
   131f8:	8b02      	ldrh	r2, [r0, #24]
                m_ledOn = false;
   131fa:	7385      	strb	r5, [r0, #14]
                m_blinkState = PRE_GROUP_DELAY;
   131fc:	2303      	movs	r3, #3
                m_timer = m_pregroupTicks;
   131fe:	8102      	strh	r2, [r0, #8]
                m_blinkState = PRE_GROUP_DELAY;
   13200:	7143      	strb	r3, [r0, #5]
}
   13202:	e716      	b.n	13032 <_ZN9ClearCore15BlinkCodeDriver6UpdateEv+0x2a>
            if (m_codes[iGroup]) {
   13204:	2501      	movs	r5, #1
   13206:	e7b8      	b.n	1317a <_ZN9ClearCore15BlinkCodeDriver6UpdateEv+0x172>
    if (!(m_codes[group] >> code)) {
   13208:	5c84      	ldrb	r4, [r0, r2]
   1320a:	fa54 f101 	asrs.w	r1, r4, r1
   1320e:	d029      	beq.n	13264 <_ZN9ClearCore15BlinkCodeDriver6UpdateEv+0x25c>
   13210:	7bc5      	ldrb	r5, [r0, #15]
   13212:	e7eb      	b.n	131ec <_ZN9ClearCore15BlinkCodeDriver6UpdateEv+0x1e4>
    for (; !(m_codes[group] & (1 << code)); code++) {
   13214:	2300      	movs	r3, #0
   13216:	e7b9      	b.n	1318c <_ZN9ClearCore15BlinkCodeDriver6UpdateEv+0x184>
            if (m_codes[iGroup]) {
   13218:	7843      	ldrb	r3, [r0, #1]
   1321a:	bb83      	cbnz	r3, 1327e <_ZN9ClearCore15BlinkCodeDriver6UpdateEv+0x276>
        for (iGroup = group + 1; iGroup < BLINK_GROUP_MAX; iGroup++) {
   1321c:	2102      	movs	r1, #2
   1321e:	460b      	mov	r3, r1
            if (m_codes[iGroup]) {
   13220:	5cc3      	ldrb	r3, [r0, r3]
   13222:	2b00      	cmp	r3, #0
   13224:	d145      	bne.n	132b2 <_ZN9ClearCore15BlinkCodeDriver6UpdateEv+0x2aa>
        for (iGroup = group + 1; iGroup < BLINK_GROUP_MAX; iGroup++) {
   13226:	1c4a      	adds	r2, r1, #1
   13228:	b2d2      	uxtb	r2, r2
   1322a:	2a05      	cmp	r2, #5
   1322c:	d00d      	beq.n	1324a <_ZN9ClearCore15BlinkCodeDriver6UpdateEv+0x242>
            if (m_codes[iGroup]) {
   1322e:	5c83      	ldrb	r3, [r0, r2]
   13230:	bb2b      	cbnz	r3, 1327e <_ZN9ClearCore15BlinkCodeDriver6UpdateEv+0x276>
        for (iGroup = group + 1; iGroup < BLINK_GROUP_MAX; iGroup++) {
   13232:	1c8a      	adds	r2, r1, #2
   13234:	b2d2      	uxtb	r2, r2
   13236:	2a05      	cmp	r2, #5
   13238:	d007      	beq.n	1324a <_ZN9ClearCore15BlinkCodeDriver6UpdateEv+0x242>
            if (m_codes[iGroup]) {
   1323a:	5c83      	ldrb	r3, [r0, r2]
   1323c:	b9fb      	cbnz	r3, 1327e <_ZN9ClearCore15BlinkCodeDriver6UpdateEv+0x276>
        for (iGroup = group + 1; iGroup < BLINK_GROUP_MAX; iGroup++) {
   1323e:	1ccb      	adds	r3, r1, #3
   13240:	b2db      	uxtb	r3, r3
   13242:	2b05      	cmp	r3, #5
   13244:	d001      	beq.n	1324a <_ZN9ClearCore15BlinkCodeDriver6UpdateEv+0x242>
            if (m_codes[iGroup]) {
   13246:	5cc3      	ldrb	r3, [r0, r3]
   13248:	b9c3      	cbnz	r3, 1327c <_ZN9ClearCore15BlinkCodeDriver6UpdateEv+0x274>
                if (m_codes[iGroup]) {
   1324a:	7802      	ldrb	r2, [r0, #0]
   1324c:	b112      	cbz	r2, 13254 <_ZN9ClearCore15BlinkCodeDriver6UpdateEv+0x24c>
   1324e:	e024      	b.n	1329a <_ZN9ClearCore15BlinkCodeDriver6UpdateEv+0x292>
   13250:	5c83      	ldrb	r3, [r0, r2]
   13252:	bb23      	cbnz	r3, 1329e <_ZN9ClearCore15BlinkCodeDriver6UpdateEv+0x296>
            for (iGroup = 0; iGroup <= group; iGroup++) {
   13254:	3201      	adds	r2, #1
   13256:	b2d2      	uxtb	r2, r2
   13258:	42aa      	cmp	r2, r5
   1325a:	ddf9      	ble.n	13250 <_ZN9ClearCore15BlinkCodeDriver6UpdateEv+0x248>
                m_ledOn = false;
   1325c:	2300      	movs	r3, #0
   1325e:	7383      	strb	r3, [r0, #14]
                m_blinkState = IDLE;
   13260:	7143      	strb	r3, [r0, #5]
   13262:	e6e6      	b.n	13032 <_ZN9ClearCore15BlinkCodeDriver6UpdateEv+0x2a>
        for (iGroup = group + 1; iGroup < BLINK_GROUP_MAX; iGroup++) {
   13264:	3201      	adds	r2, #1
   13266:	b2d2      	uxtb	r2, r2
   13268:	2a04      	cmp	r2, #4
   1326a:	d8ee      	bhi.n	1324a <_ZN9ClearCore15BlinkCodeDriver6UpdateEv+0x242>
            if (m_codes[iGroup]) {
   1326c:	5c83      	ldrb	r3, [r0, r2]
   1326e:	b933      	cbnz	r3, 1327e <_ZN9ClearCore15BlinkCodeDriver6UpdateEv+0x276>
        for (iGroup = group + 1; iGroup < BLINK_GROUP_MAX; iGroup++) {
   13270:	1ca9      	adds	r1, r5, #2
   13272:	b2c9      	uxtb	r1, r1
   13274:	2905      	cmp	r1, #5
   13276:	460b      	mov	r3, r1
   13278:	d1d2      	bne.n	13220 <_ZN9ClearCore15BlinkCodeDriver6UpdateEv+0x218>
   1327a:	e7e6      	b.n	1324a <_ZN9ClearCore15BlinkCodeDriver6UpdateEv+0x242>
            if (m_codes[iGroup]) {
   1327c:	2204      	movs	r2, #4
   1327e:	4619      	mov	r1, r3
        for (iGroup = group + 1; iGroup < BLINK_GROUP_MAX; iGroup++) {
   13280:	461c      	mov	r4, r3
   13282:	7bc5      	ldrb	r5, [r0, #15]
        code = 0;
   13284:	2300      	movs	r3, #0
   13286:	e7b1      	b.n	131ec <_ZN9ClearCore15BlinkCodeDriver6UpdateEv+0x1e4>
    m_currentGroup = group;
   13288:	71c2      	strb	r2, [r0, #7]
    m_currentCode = code;
   1328a:	7183      	strb	r3, [r0, #6]
                m_timer = m_prestartTicks;
   1328c:	8a83      	ldrh	r3, [r0, #20]
   1328e:	8103      	strh	r3, [r0, #8]
                m_ledOn = false;
   13290:	2200      	movs	r2, #0
                m_blinkState = PRE_START_DELAY;
   13292:	2301      	movs	r3, #1
                m_ledOn = false;
   13294:	7382      	strb	r2, [r0, #14]
                m_blinkState = PRE_START_DELAY;
   13296:	7143      	strb	r3, [r0, #5]
   13298:	e6cb      	b.n	13032 <_ZN9ClearCore15BlinkCodeDriver6UpdateEv+0x2a>
                if (m_codes[iGroup]) {
   1329a:	4613      	mov	r3, r2
   1329c:	2200      	movs	r2, #0
   1329e:	461d      	mov	r5, r3
            m_patternWrap = true;
   132a0:	2301      	movs	r3, #1
   132a2:	73c3      	strb	r3, [r0, #15]
   132a4:	462c      	mov	r4, r5
        code = 0;
   132a6:	2300      	movs	r3, #0
   132a8:	e799      	b.n	131de <_ZN9ClearCore15BlinkCodeDriver6UpdateEv+0x1d6>
            if (m_codes[iGroup]) {
   132aa:	2502      	movs	r5, #2
   132ac:	e6eb      	b.n	13086 <_ZN9ClearCore15BlinkCodeDriver6UpdateEv+0x7e>
        for (iGroup = group + 1; iGroup < BLINK_GROUP_MAX; iGroup++) {
   132ae:	2503      	movs	r5, #3
   132b0:	e6e9      	b.n	13086 <_ZN9ClearCore15BlinkCodeDriver6UpdateEv+0x7e>
            if (m_codes[iGroup]) {
   132b2:	460a      	mov	r2, r1
   132b4:	e7e3      	b.n	1327e <_ZN9ClearCore15BlinkCodeDriver6UpdateEv+0x276>
   132b6:	bf00      	nop

000132b8 <arm_sin_q15>:
   132b8:	0982      	lsrs	r2, r0, #6
   132ba:	490c      	ldr	r1, [pc, #48]	; (132ec <arm_sin_q15+0x34>)
   132bc:	f000 003f 	and.w	r0, r0, #63	; 0x3f
   132c0:	0240      	lsls	r0, r0, #9
   132c2:	f931 3012 	ldrsh.w	r3, [r1, r2, lsl #1]
   132c6:	b410      	push	{r4}
   132c8:	3201      	adds	r2, #1
   132ca:	f5c0 4400 	rsb	r4, r0, #32768	; 0x8000
   132ce:	fb03 f304 	mul.w	r3, r3, r4
   132d2:	0c1b      	lsrs	r3, r3, #16
   132d4:	f831 2012 	ldrh.w	r2, [r1, r2, lsl #1]
   132d8:	f85d 4b04 	ldr.w	r4, [sp], #4
   132dc:	041b      	lsls	r3, r3, #16
   132de:	fb10 3002 	smlabb	r0, r0, r2, r3
   132e2:	f340 30cf 	sbfx	r0, r0, #15, #16
   132e6:	f020 0001 	bic.w	r0, r0, #1
   132ea:	4770      	bx	lr
   132ec:	000234dc 	.word	0x000234dc

000132f0 <_Znwj>:
   132f0:	b510      	push	{r4, lr}
   132f2:	2800      	cmp	r0, #0
   132f4:	bf14      	ite	ne
   132f6:	4604      	movne	r4, r0
   132f8:	2401      	moveq	r4, #1
   132fa:	4620      	mov	r0, r4
   132fc:	f00a fc26 	bl	1db4c <malloc>
   13300:	b100      	cbz	r0, 13304 <_Znwj+0x14>
   13302:	bd10      	pop	{r4, pc}
   13304:	f000 f9c8 	bl	13698 <_ZSt15get_new_handlerv>
   13308:	b108      	cbz	r0, 1330e <_Znwj+0x1e>
   1330a:	4780      	blx	r0
   1330c:	e7f5      	b.n	132fa <_Znwj+0xa>
   1330e:	2004      	movs	r0, #4
   13310:	f000 f8a2 	bl	13458 <__cxa_allocate_exception>
   13314:	4b02      	ldr	r3, [pc, #8]	; (13320 <_Znwj+0x30>)
   13316:	6003      	str	r3, [r0, #0]
   13318:	4a02      	ldr	r2, [pc, #8]	; (13324 <_Znwj+0x34>)
   1331a:	4903      	ldr	r1, [pc, #12]	; (13328 <_Znwj+0x38>)
   1331c:	f000 f946 	bl	135ac <__cxa_throw>
   13320:	00023930 	.word	0x00023930
   13324:	00013349 	.word	0x00013349
   13328:	0002390c 	.word	0x0002390c

0001332c <__cxa_pure_virtual>:
   1332c:	b508      	push	{r3, lr}
   1332e:	221b      	movs	r2, #27
   13330:	4902      	ldr	r1, [pc, #8]	; (1333c <__cxa_pure_virtual+0x10>)
   13332:	2002      	movs	r0, #2
   13334:	f00c ffae 	bl	20294 <write>
   13338:	f000 f8ee 	bl	13518 <_ZSt9terminatev>
   1333c:	000238e0 	.word	0x000238e0

00013340 <_ZNKSt9bad_alloc4whatEv>:
   13340:	4800      	ldr	r0, [pc, #0]	; (13344 <_ZNKSt9bad_alloc4whatEv+0x4>)
   13342:	4770      	bx	lr
   13344:	000238fc 	.word	0x000238fc

00013348 <_ZNSt9bad_allocD1Ev>:
   13348:	b510      	push	{r4, lr}
   1334a:	4b03      	ldr	r3, [pc, #12]	; (13358 <_ZNSt9bad_allocD1Ev+0x10>)
   1334c:	6003      	str	r3, [r0, #0]
   1334e:	4604      	mov	r4, r0
   13350:	f000 f8be 	bl	134d0 <_ZNSt9exceptionD1Ev>
   13354:	4620      	mov	r0, r4
   13356:	bd10      	pop	{r4, pc}
   13358:	00023930 	.word	0x00023930

0001335c <_ZNSt9bad_allocD0Ev>:
   1335c:	b510      	push	{r4, lr}
   1335e:	4b05      	ldr	r3, [pc, #20]	; (13374 <_ZNSt9bad_allocD0Ev+0x18>)
   13360:	6003      	str	r3, [r0, #0]
   13362:	4604      	mov	r4, r0
   13364:	f000 f8b4 	bl	134d0 <_ZNSt9exceptionD1Ev>
   13368:	4620      	mov	r0, r4
   1336a:	2104      	movs	r1, #4
   1336c:	f000 f804 	bl	13378 <_ZdlPvj>
   13370:	4620      	mov	r0, r4
   13372:	bd10      	pop	{r4, pc}
   13374:	00023930 	.word	0x00023930

00013378 <_ZdlPvj>:
   13378:	f000 bac0 	b.w	138fc <_ZdlPv>

0001337c <_ZN12_GLOBAL__N_14pool4freeEPv.constprop.4>:
   1337c:	b4f0      	push	{r4, r5, r6, r7}
   1337e:	4c1b      	ldr	r4, [pc, #108]	; (133ec <_ZN12_GLOBAL__N_14pool4freeEPv.constprop.4+0x70>)
   13380:	f850 7c08 	ldr.w	r7, [r0, #-8]
   13384:	6861      	ldr	r1, [r4, #4]
   13386:	f1a0 0608 	sub.w	r6, r0, #8
   1338a:	b1c9      	cbz	r1, 133c0 <_ZN12_GLOBAL__N_14pool4freeEPv.constprop.4+0x44>
   1338c:	19f5      	adds	r5, r6, r7
   1338e:	42a9      	cmp	r1, r5
   13390:	d01b      	beq.n	133ca <_ZN12_GLOBAL__N_14pool4freeEPv.constprop.4+0x4e>
   13392:	684a      	ldr	r2, [r1, #4]
   13394:	b32a      	cbz	r2, 133e2 <_ZN12_GLOBAL__N_14pool4freeEPv.constprop.4+0x66>
   13396:	4295      	cmp	r5, r2
   13398:	d303      	bcc.n	133a2 <_ZN12_GLOBAL__N_14pool4freeEPv.constprop.4+0x26>
   1339a:	e022      	b.n	133e2 <_ZN12_GLOBAL__N_14pool4freeEPv.constprop.4+0x66>
   1339c:	429d      	cmp	r5, r3
   1339e:	d205      	bcs.n	133ac <_ZN12_GLOBAL__N_14pool4freeEPv.constprop.4+0x30>
   133a0:	461a      	mov	r2, r3
   133a2:	6853      	ldr	r3, [r2, #4]
   133a4:	1d0c      	adds	r4, r1, #4
   133a6:	4611      	mov	r1, r2
   133a8:	2b00      	cmp	r3, #0
   133aa:	d1f7      	bne.n	1339c <_ZN12_GLOBAL__N_14pool4freeEPv.constprop.4+0x20>
   133ac:	6811      	ldr	r1, [r2, #0]
   133ae:	1855      	adds	r5, r2, r1
   133b0:	42ae      	cmp	r6, r5
   133b2:	d013      	beq.n	133dc <_ZN12_GLOBAL__N_14pool4freeEPv.constprop.4+0x60>
   133b4:	f840 3c04 	str.w	r3, [r0, #-4]
   133b8:	6823      	ldr	r3, [r4, #0]
   133ba:	605e      	str	r6, [r3, #4]
   133bc:	bcf0      	pop	{r4, r5, r6, r7}
   133be:	4770      	bx	lr
   133c0:	f840 1c04 	str.w	r1, [r0, #-4]
   133c4:	6066      	str	r6, [r4, #4]
   133c6:	bcf0      	pop	{r4, r5, r6, r7}
   133c8:	4770      	bx	lr
   133ca:	680b      	ldr	r3, [r1, #0]
   133cc:	684a      	ldr	r2, [r1, #4]
   133ce:	f840 2c04 	str.w	r2, [r0, #-4]
   133d2:	441f      	add	r7, r3
   133d4:	f840 7c08 	str.w	r7, [r0, #-8]
   133d8:	6066      	str	r6, [r4, #4]
   133da:	e7ef      	b.n	133bc <_ZN12_GLOBAL__N_14pool4freeEPv.constprop.4+0x40>
   133dc:	440f      	add	r7, r1
   133de:	6017      	str	r7, [r2, #0]
   133e0:	e7ec      	b.n	133bc <_ZN12_GLOBAL__N_14pool4freeEPv.constprop.4+0x40>
   133e2:	4613      	mov	r3, r2
   133e4:	3404      	adds	r4, #4
   133e6:	460a      	mov	r2, r1
   133e8:	e7e0      	b.n	133ac <_ZN12_GLOBAL__N_14pool4freeEPv.constprop.4+0x30>
   133ea:	bf00      	nop
   133ec:	20002270 	.word	0x20002270

000133f0 <_ZN12_GLOBAL__N_14pool8allocateEj.constprop.5>:
   133f0:	b430      	push	{r4, r5}
   133f2:	4c18      	ldr	r4, [pc, #96]	; (13454 <_ZN12_GLOBAL__N_14pool8allocateEj.constprop.5+0x64>)
   133f4:	f100 0108 	add.w	r1, r0, #8
   133f8:	6863      	ldr	r3, [r4, #4]
   133fa:	2908      	cmp	r1, #8
   133fc:	bf38      	it	cc
   133fe:	2108      	movcc	r1, #8
   13400:	b313      	cbz	r3, 13448 <_ZN12_GLOBAL__N_14pool8allocateEj.constprop.5+0x58>
   13402:	3107      	adds	r1, #7
   13404:	681a      	ldr	r2, [r3, #0]
   13406:	f021 0107 	bic.w	r1, r1, #7
   1340a:	4291      	cmp	r1, r2
   1340c:	d804      	bhi.n	13418 <_ZN12_GLOBAL__N_14pool8allocateEj.constprop.5+0x28>
   1340e:	e01d      	b.n	1344c <_ZN12_GLOBAL__N_14pool8allocateEj.constprop.5+0x5c>
   13410:	6802      	ldr	r2, [r0, #0]
   13412:	4291      	cmp	r1, r2
   13414:	d905      	bls.n	13422 <_ZN12_GLOBAL__N_14pool8allocateEj.constprop.5+0x32>
   13416:	4603      	mov	r3, r0
   13418:	6858      	ldr	r0, [r3, #4]
   1341a:	2800      	cmp	r0, #0
   1341c:	d1f8      	bne.n	13410 <_ZN12_GLOBAL__N_14pool8allocateEj.constprop.5+0x20>
   1341e:	bc30      	pop	{r4, r5}
   13420:	4770      	bx	lr
   13422:	3304      	adds	r3, #4
   13424:	1a52      	subs	r2, r2, r1
   13426:	2a07      	cmp	r2, #7
   13428:	d90a      	bls.n	13440 <_ZN12_GLOBAL__N_14pool8allocateEj.constprop.5+0x50>
   1342a:	1845      	adds	r5, r0, r1
   1342c:	6844      	ldr	r4, [r0, #4]
   1342e:	606c      	str	r4, [r5, #4]
   13430:	681c      	ldr	r4, [r3, #0]
   13432:	5042      	str	r2, [r0, r1]
   13434:	6021      	str	r1, [r4, #0]
   13436:	601d      	str	r5, [r3, #0]
   13438:	f104 0008 	add.w	r0, r4, #8
   1343c:	bc30      	pop	{r4, r5}
   1343e:	4770      	bx	lr
   13440:	6842      	ldr	r2, [r0, #4]
   13442:	601a      	str	r2, [r3, #0]
   13444:	4604      	mov	r4, r0
   13446:	e7f7      	b.n	13438 <_ZN12_GLOBAL__N_14pool8allocateEj.constprop.5+0x48>
   13448:	4618      	mov	r0, r3
   1344a:	e7e8      	b.n	1341e <_ZN12_GLOBAL__N_14pool8allocateEj.constprop.5+0x2e>
   1344c:	4618      	mov	r0, r3
   1344e:	1d23      	adds	r3, r4, #4
   13450:	e7e8      	b.n	13424 <_ZN12_GLOBAL__N_14pool8allocateEj.constprop.5+0x34>
   13452:	bf00      	nop
   13454:	20002270 	.word	0x20002270

00013458 <__cxa_allocate_exception>:
   13458:	b538      	push	{r3, r4, r5, lr}
   1345a:	f100 0580 	add.w	r5, r0, #128	; 0x80
   1345e:	4628      	mov	r0, r5
   13460:	f00a fb74 	bl	1db4c <malloc>
   13464:	4604      	mov	r4, r0
   13466:	b138      	cbz	r0, 13478 <__cxa_allocate_exception+0x20>
   13468:	2280      	movs	r2, #128	; 0x80
   1346a:	2100      	movs	r1, #0
   1346c:	4620      	mov	r0, r4
   1346e:	f00a ffc5 	bl	1e3fc <memset>
   13472:	f104 0080 	add.w	r0, r4, #128	; 0x80
   13476:	bd38      	pop	{r3, r4, r5, pc}
   13478:	4628      	mov	r0, r5
   1347a:	f7ff ffb9 	bl	133f0 <_ZN12_GLOBAL__N_14pool8allocateEj.constprop.5>
   1347e:	4604      	mov	r4, r0
   13480:	2800      	cmp	r0, #0
   13482:	d1f1      	bne.n	13468 <__cxa_allocate_exception+0x10>
   13484:	f000 f848 	bl	13518 <_ZSt9terminatev>

00013488 <__cxa_free_exception>:
   13488:	4a06      	ldr	r2, [pc, #24]	; (134a4 <__cxa_free_exception+0x1c>)
   1348a:	6893      	ldr	r3, [r2, #8]
   1348c:	3880      	subs	r0, #128	; 0x80
   1348e:	4298      	cmp	r0, r3
   13490:	d905      	bls.n	1349e <__cxa_free_exception+0x16>
   13492:	68d2      	ldr	r2, [r2, #12]
   13494:	4413      	add	r3, r2
   13496:	4298      	cmp	r0, r3
   13498:	d201      	bcs.n	1349e <__cxa_free_exception+0x16>
   1349a:	f7ff bf6f 	b.w	1337c <_ZN12_GLOBAL__N_14pool4freeEPv.constprop.4>
   1349e:	f00a bb5d 	b.w	1db5c <free>
   134a2:	bf00      	nop
   134a4:	20002270 	.word	0x20002270

000134a8 <_GLOBAL__sub_I__ZN9__gnu_cxx9__freeresEv>:
   134a8:	b538      	push	{r3, r4, r5, lr}
   134aa:	4c08      	ldr	r4, [pc, #32]	; (134cc <_GLOBAL__sub_I__ZN9__gnu_cxx9__freeresEv+0x24>)
   134ac:	f44f 651e 	mov.w	r5, #2528	; 0x9e0
   134b0:	4628      	mov	r0, r5
   134b2:	60e5      	str	r5, [r4, #12]
   134b4:	f00a fb4a 	bl	1db4c <malloc>
   134b8:	60a0      	str	r0, [r4, #8]
   134ba:	b120      	cbz	r0, 134c6 <_GLOBAL__sub_I__ZN9__gnu_cxx9__freeresEv+0x1e>
   134bc:	2300      	movs	r3, #0
   134be:	6060      	str	r0, [r4, #4]
   134c0:	6005      	str	r5, [r0, #0]
   134c2:	6043      	str	r3, [r0, #4]
   134c4:	bd38      	pop	{r3, r4, r5, pc}
   134c6:	60e0      	str	r0, [r4, #12]
   134c8:	6060      	str	r0, [r4, #4]
   134ca:	bd38      	pop	{r3, r4, r5, pc}
   134cc:	20002270 	.word	0x20002270

000134d0 <_ZNSt9exceptionD1Ev>:
   134d0:	4770      	bx	lr
   134d2:	bf00      	nop

000134d4 <_ZNSt13bad_exceptionD1Ev>:
   134d4:	4770      	bx	lr
   134d6:	bf00      	nop

000134d8 <_ZGTtNKSt13bad_exception4whatEv>:
   134d8:	4800      	ldr	r0, [pc, #0]	; (134dc <_ZGTtNKSt13bad_exception4whatEv+0x4>)
   134da:	4770      	bx	lr
   134dc:	0002393c 	.word	0x0002393c

000134e0 <_ZNSt13bad_exceptionD0Ev>:
   134e0:	b510      	push	{r4, lr}
   134e2:	2104      	movs	r1, #4
   134e4:	4604      	mov	r4, r0
   134e6:	f7ff ff47 	bl	13378 <_ZdlPvj>
   134ea:	4620      	mov	r0, r4
   134ec:	bd10      	pop	{r4, pc}
   134ee:	bf00      	nop

000134f0 <_ZN10__cxxabiv111__terminateEPFvvE>:
   134f0:	b508      	push	{r3, lr}
   134f2:	4780      	blx	r0
   134f4:	f00a f896 	bl	1d624 <abort>
   134f8:	f000 fb6c 	bl	13bd4 <__cxa_begin_catch>
   134fc:	f00a f892 	bl	1d624 <abort>
   13500:	460d      	mov	r5, r1
   13502:	4604      	mov	r4, r0
   13504:	f000 fba4 	bl	13c50 <__cxa_end_catch>
   13508:	3501      	adds	r5, #1
   1350a:	d001      	beq.n	13510 <_ZN10__cxxabiv111__terminateEPFvvE+0x20>
   1350c:	f000 f9f8 	bl	13900 <__cxa_end_cleanup>
   13510:	4620      	mov	r0, r4
   13512:	f000 faef 	bl	13af4 <__cxa_call_unexpected>
   13516:	bf00      	nop

00013518 <_ZSt9terminatev>:
   13518:	b508      	push	{r3, lr}
   1351a:	4b03      	ldr	r3, [pc, #12]	; (13528 <_ZSt9terminatev+0x10>)
   1351c:	6818      	ldr	r0, [r3, #0]
   1351e:	f3bf 8f5b 	dmb	ish
   13522:	f7ff ffe5 	bl	134f0 <_ZN10__cxxabiv111__terminateEPFvvE>
   13526:	bf00      	nop
   13528:	200000f0 	.word	0x200000f0

0001352c <_ZN10__cxxabiv112__unexpectedEPFvvE>:
   1352c:	b508      	push	{r3, lr}
   1352e:	4780      	blx	r0
   13530:	f7ff fff2 	bl	13518 <_ZSt9terminatev>

00013534 <_ZSt10unexpectedv>:
   13534:	b508      	push	{r3, lr}
   13536:	4b03      	ldr	r3, [pc, #12]	; (13544 <_ZSt10unexpectedv+0x10>)
   13538:	6818      	ldr	r0, [r3, #0]
   1353a:	f3bf 8f5b 	dmb	ish
   1353e:	f7ff fff5 	bl	1352c <_ZN10__cxxabiv112__unexpectedEPFvvE>
   13542:	bf00      	nop
   13544:	200000ec 	.word	0x200000ec

00013548 <_ZSt13get_terminatev>:
   13548:	4b02      	ldr	r3, [pc, #8]	; (13554 <_ZSt13get_terminatev+0xc>)
   1354a:	6818      	ldr	r0, [r3, #0]
   1354c:	f3bf 8f5b 	dmb	ish
   13550:	4770      	bx	lr
   13552:	bf00      	nop
   13554:	200000f0 	.word	0x200000f0

00013558 <_ZSt14get_unexpectedv>:
   13558:	4b02      	ldr	r3, [pc, #8]	; (13564 <_ZSt14get_unexpectedv+0xc>)
   1355a:	6818      	ldr	r0, [r3, #0]
   1355c:	f3bf 8f5b 	dmb	ish
   13560:	4770      	bx	lr
   13562:	bf00      	nop
   13564:	200000ec 	.word	0x200000ec

00013568 <_ZL23__gxx_exception_cleanup19_Unwind_Reason_CodeP21_Unwind_Control_Block>:
   13568:	2801      	cmp	r0, #1
   1356a:	b510      	push	{r4, lr}
   1356c:	d81a      	bhi.n	135a4 <_ZL23__gxx_exception_cleanup19_Unwind_Reason_CodeP21_Unwind_Control_Block+0x3c>
   1356e:	f3bf 8f5b 	dmb	ish
   13572:	f1a1 0328 	sub.w	r3, r1, #40	; 0x28
   13576:	e853 2f00 	ldrex	r2, [r3]
   1357a:	3a01      	subs	r2, #1
   1357c:	e843 2000 	strex	r0, r2, [r3]
   13580:	2800      	cmp	r0, #0
   13582:	d1f8      	bne.n	13576 <_ZL23__gxx_exception_cleanup19_Unwind_Reason_CodeP21_Unwind_Control_Block+0xe>
   13584:	f3bf 8f5b 	dmb	ish
   13588:	b95a      	cbnz	r2, 135a2 <_ZL23__gxx_exception_cleanup19_Unwind_Reason_CodeP21_Unwind_Control_Block+0x3a>
   1358a:	f851 3c1c 	ldr.w	r3, [r1, #-28]
   1358e:	f101 0458 	add.w	r4, r1, #88	; 0x58
   13592:	b10b      	cbz	r3, 13598 <_ZL23__gxx_exception_cleanup19_Unwind_Reason_CodeP21_Unwind_Control_Block+0x30>
   13594:	4620      	mov	r0, r4
   13596:	4798      	blx	r3
   13598:	4620      	mov	r0, r4
   1359a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   1359e:	f7ff bf73 	b.w	13488 <__cxa_free_exception>
   135a2:	bd10      	pop	{r4, pc}
   135a4:	f851 0c14 	ldr.w	r0, [r1, #-20]
   135a8:	f7ff ffa2 	bl	134f0 <_ZN10__cxxabiv111__terminateEPFvvE>

000135ac <__cxa_throw>:
   135ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   135ae:	4604      	mov	r4, r0
   135b0:	460f      	mov	r7, r1
   135b2:	4616      	mov	r6, r2
   135b4:	f000 fb96 	bl	13ce4 <__cxa_get_globals>
   135b8:	6843      	ldr	r3, [r0, #4]
   135ba:	2501      	movs	r5, #1
   135bc:	442b      	add	r3, r5
   135be:	6043      	str	r3, [r0, #4]
   135c0:	f844 7c78 	str.w	r7, [r4, #-120]
   135c4:	f844 6c74 	str.w	r6, [r4, #-116]
   135c8:	f844 5c80 	str.w	r5, [r4, #-128]
   135cc:	f7ff ffc4 	bl	13558 <_ZSt14get_unexpectedv>
   135d0:	f844 0c70 	str.w	r0, [r4, #-112]
   135d4:	f7ff ffb8 	bl	13548 <_ZSt13get_terminatev>
   135d8:	2347      	movs	r3, #71	; 0x47
   135da:	2243      	movs	r2, #67	; 0x43
   135dc:	f04f 0e4e 	mov.w	lr, #78	; 0x4e
   135e0:	4910      	ldr	r1, [pc, #64]	; (13624 <__cxa_throw+0x78>)
   135e2:	f804 3c58 	strb.w	r3, [r4, #-88]
   135e6:	f1a4 0558 	sub.w	r5, r4, #88	; 0x58
   135ea:	232b      	movs	r3, #43	; 0x2b
   135ec:	2755      	movs	r7, #85	; 0x55
   135ee:	2600      	movs	r6, #0
   135f0:	f844 0c6c 	str.w	r0, [r4, #-108]
   135f4:	f804 ec57 	strb.w	lr, [r4, #-87]
   135f8:	f844 1c50 	str.w	r1, [r4, #-80]
   135fc:	f804 2c55 	strb.w	r2, [r4, #-85]
   13600:	f804 2c54 	strb.w	r2, [r4, #-84]
   13604:	f804 3c53 	strb.w	r3, [r4, #-83]
   13608:	f804 3c52 	strb.w	r3, [r4, #-82]
   1360c:	f804 7c56 	strb.w	r7, [r4, #-86]
   13610:	f804 6c51 	strb.w	r6, [r4, #-81]
   13614:	4628      	mov	r0, r5
   13616:	f009 fde9 	bl	1d1ec <_Unwind_RaiseException>
   1361a:	4628      	mov	r0, r5
   1361c:	f000 fada 	bl	13bd4 <__cxa_begin_catch>
   13620:	f7ff ff7a 	bl	13518 <_ZSt9terminatev>
   13624:	00013569 	.word	0x00013569

00013628 <__cxa_rethrow>:
   13628:	b510      	push	{r4, lr}
   1362a:	f000 fb5b 	bl	13ce4 <__cxa_get_globals>
   1362e:	6842      	ldr	r2, [r0, #4]
   13630:	6804      	ldr	r4, [r0, #0]
   13632:	3201      	adds	r2, #1
   13634:	6042      	str	r2, [r0, #4]
   13636:	b164      	cbz	r4, 13652 <__cxa_rethrow+0x2a>
   13638:	f894 2020 	ldrb.w	r2, [r4, #32]
   1363c:	2a47      	cmp	r2, #71	; 0x47
   1363e:	d00a      	beq.n	13656 <__cxa_rethrow+0x2e>
   13640:	2200      	movs	r2, #0
   13642:	6002      	str	r2, [r0, #0]
   13644:	3420      	adds	r4, #32
   13646:	4620      	mov	r0, r4
   13648:	f009 fdf4 	bl	1d234 <_Unwind_Resume_or_Rethrow>
   1364c:	4620      	mov	r0, r4
   1364e:	f000 fac1 	bl	13bd4 <__cxa_begin_catch>
   13652:	f7ff ff61 	bl	13518 <_ZSt9terminatev>
   13656:	f894 2021 	ldrb.w	r2, [r4, #33]	; 0x21
   1365a:	2a4e      	cmp	r2, #78	; 0x4e
   1365c:	d1f0      	bne.n	13640 <__cxa_rethrow+0x18>
   1365e:	f894 2022 	ldrb.w	r2, [r4, #34]	; 0x22
   13662:	2a55      	cmp	r2, #85	; 0x55
   13664:	d1ec      	bne.n	13640 <__cxa_rethrow+0x18>
   13666:	f894 2023 	ldrb.w	r2, [r4, #35]	; 0x23
   1366a:	2a43      	cmp	r2, #67	; 0x43
   1366c:	d1e8      	bne.n	13640 <__cxa_rethrow+0x18>
   1366e:	f894 2024 	ldrb.w	r2, [r4, #36]	; 0x24
   13672:	2a43      	cmp	r2, #67	; 0x43
   13674:	d1e4      	bne.n	13640 <__cxa_rethrow+0x18>
   13676:	f894 2025 	ldrb.w	r2, [r4, #37]	; 0x25
   1367a:	2a2b      	cmp	r2, #43	; 0x2b
   1367c:	d1e0      	bne.n	13640 <__cxa_rethrow+0x18>
   1367e:	f894 2026 	ldrb.w	r2, [r4, #38]	; 0x26
   13682:	2a2b      	cmp	r2, #43	; 0x2b
   13684:	d1dc      	bne.n	13640 <__cxa_rethrow+0x18>
   13686:	f894 2027 	ldrb.w	r2, [r4, #39]	; 0x27
   1368a:	2a01      	cmp	r2, #1
   1368c:	d8d8      	bhi.n	13640 <__cxa_rethrow+0x18>
   1368e:	6962      	ldr	r2, [r4, #20]
   13690:	4252      	negs	r2, r2
   13692:	6162      	str	r2, [r4, #20]
   13694:	e7d6      	b.n	13644 <__cxa_rethrow+0x1c>
   13696:	bf00      	nop

00013698 <_ZSt15get_new_handlerv>:
   13698:	4b02      	ldr	r3, [pc, #8]	; (136a4 <_ZSt15get_new_handlerv+0xc>)
   1369a:	6818      	ldr	r0, [r3, #0]
   1369c:	f3bf 8f5b 	dmb	ish
   136a0:	4770      	bx	lr
   136a2:	bf00      	nop
   136a4:	20002280 	.word	0x20002280

000136a8 <_ZN10__cxxabiv120__si_class_type_infoD1Ev>:
   136a8:	b510      	push	{r4, lr}
   136aa:	4b03      	ldr	r3, [pc, #12]	; (136b8 <_ZN10__cxxabiv120__si_class_type_infoD1Ev+0x10>)
   136ac:	6003      	str	r3, [r0, #0]
   136ae:	4604      	mov	r4, r0
   136b0:	f000 f8ca 	bl	13848 <_ZN10__cxxabiv117__class_type_infoD1Ev>
   136b4:	4620      	mov	r0, r4
   136b6:	bd10      	pop	{r4, pc}
   136b8:	00023a2c 	.word	0x00023a2c

000136bc <_ZN10__cxxabiv120__si_class_type_infoD0Ev>:
   136bc:	b510      	push	{r4, lr}
   136be:	4b05      	ldr	r3, [pc, #20]	; (136d4 <_ZN10__cxxabiv120__si_class_type_infoD0Ev+0x18>)
   136c0:	6003      	str	r3, [r0, #0]
   136c2:	4604      	mov	r4, r0
   136c4:	f000 f8c0 	bl	13848 <_ZN10__cxxabiv117__class_type_infoD1Ev>
   136c8:	4620      	mov	r0, r4
   136ca:	210c      	movs	r1, #12
   136cc:	f7ff fe54 	bl	13378 <_ZdlPvj>
   136d0:	4620      	mov	r0, r4
   136d2:	bd10      	pop	{r4, pc}
   136d4:	00023a2c 	.word	0x00023a2c

000136d8 <_ZNK10__cxxabiv120__si_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_>:
   136d8:	b570      	push	{r4, r5, r6, lr}
   136da:	b082      	sub	sp, #8
   136dc:	460d      	mov	r5, r1
   136de:	9c06      	ldr	r4, [sp, #24]
   136e0:	4294      	cmp	r4, r2
   136e2:	4606      	mov	r6, r0
   136e4:	d009      	beq.n	136fa <_ZNK10__cxxabiv120__si_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_+0x22>
   136e6:	68b0      	ldr	r0, [r6, #8]
   136e8:	6806      	ldr	r6, [r0, #0]
   136ea:	9406      	str	r4, [sp, #24]
   136ec:	6a34      	ldr	r4, [r6, #32]
   136ee:	4629      	mov	r1, r5
   136f0:	46a4      	mov	ip, r4
   136f2:	b002      	add	sp, #8
   136f4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   136f8:	4760      	bx	ip
   136fa:	4619      	mov	r1, r3
   136fc:	9201      	str	r2, [sp, #4]
   136fe:	9300      	str	r3, [sp, #0]
   13700:	f000 f86a 	bl	137d8 <_ZNKSt9type_infoeqERKS_>
   13704:	9b00      	ldr	r3, [sp, #0]
   13706:	9a01      	ldr	r2, [sp, #4]
   13708:	2800      	cmp	r0, #0
   1370a:	d0ec      	beq.n	136e6 <_ZNK10__cxxabiv120__si_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_+0xe>
   1370c:	2006      	movs	r0, #6
   1370e:	b002      	add	sp, #8
   13710:	bd70      	pop	{r4, r5, r6, pc}
   13712:	bf00      	nop

00013714 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE>:
   13714:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   13718:	b081      	sub	sp, #4
   1371a:	460e      	mov	r6, r1
   1371c:	4619      	mov	r1, r3
   1371e:	461f      	mov	r7, r3
   13720:	4691      	mov	r9, r2
   13722:	4683      	mov	fp, r0
   13724:	9c0a      	ldr	r4, [sp, #40]	; 0x28
   13726:	f8dd a02c 	ldr.w	sl, [sp, #44]	; 0x2c
   1372a:	f8dd 8030 	ldr.w	r8, [sp, #48]	; 0x30
   1372e:	9d0d      	ldr	r5, [sp, #52]	; 0x34
   13730:	f000 f852 	bl	137d8 <_ZNKSt9type_infoeqERKS_>
   13734:	b170      	cbz	r0, 13754 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x40>
   13736:	2e00      	cmp	r6, #0
   13738:	602c      	str	r4, [r5, #0]
   1373a:	f885 9004 	strb.w	r9, [r5, #4]
   1373e:	db1f      	blt.n	13780 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x6c>
   13740:	4434      	add	r4, r6
   13742:	45a0      	cmp	r8, r4
   13744:	bf0c      	ite	eq
   13746:	2406      	moveq	r4, #6
   13748:	2401      	movne	r4, #1
   1374a:	71ac      	strb	r4, [r5, #6]
   1374c:	2000      	movs	r0, #0
   1374e:	b001      	add	sp, #4
   13750:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   13754:	4544      	cmp	r4, r8
   13756:	d018      	beq.n	1378a <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x76>
   13758:	f8db 0008 	ldr.w	r0, [fp, #8]
   1375c:	f8d0 e000 	ldr.w	lr, [r0]
   13760:	950d      	str	r5, [sp, #52]	; 0x34
   13762:	f8cd 8030 	str.w	r8, [sp, #48]	; 0x30
   13766:	f8cd a02c 	str.w	sl, [sp, #44]	; 0x2c
   1376a:	940a      	str	r4, [sp, #40]	; 0x28
   1376c:	f8de 401c 	ldr.w	r4, [lr, #28]
   13770:	463b      	mov	r3, r7
   13772:	464a      	mov	r2, r9
   13774:	4631      	mov	r1, r6
   13776:	46a4      	mov	ip, r4
   13778:	b001      	add	sp, #4
   1377a:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1377e:	4760      	bx	ip
   13780:	3602      	adds	r6, #2
   13782:	d1e3      	bne.n	1374c <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x38>
   13784:	2301      	movs	r3, #1
   13786:	71ab      	strb	r3, [r5, #6]
   13788:	e7e0      	b.n	1374c <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x38>
   1378a:	4651      	mov	r1, sl
   1378c:	4658      	mov	r0, fp
   1378e:	f000 f823 	bl	137d8 <_ZNKSt9type_infoeqERKS_>
   13792:	2800      	cmp	r0, #0
   13794:	d0e0      	beq.n	13758 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x44>
   13796:	2000      	movs	r0, #0
   13798:	f885 9005 	strb.w	r9, [r5, #5]
   1379c:	b001      	add	sp, #4
   1379e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   137a2:	bf00      	nop

000137a4 <_ZNK10__cxxabiv120__si_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE>:
   137a4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   137a8:	4607      	mov	r7, r0
   137aa:	460c      	mov	r4, r1
   137ac:	4615      	mov	r5, r2
   137ae:	461e      	mov	r6, r3
   137b0:	f000 f862 	bl	13878 <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PKvRNS0_15__upcast_resultE>
   137b4:	b108      	cbz	r0, 137ba <_ZNK10__cxxabiv120__si_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE+0x16>
   137b6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   137ba:	68b8      	ldr	r0, [r7, #8]
   137bc:	6807      	ldr	r7, [r0, #0]
   137be:	4621      	mov	r1, r4
   137c0:	69bc      	ldr	r4, [r7, #24]
   137c2:	4633      	mov	r3, r6
   137c4:	462a      	mov	r2, r5
   137c6:	46a4      	mov	ip, r4
   137c8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   137cc:	4760      	bx	ip
   137ce:	bf00      	nop

000137d0 <_ZNSt9type_infoD1Ev>:
   137d0:	4770      	bx	lr
   137d2:	bf00      	nop

000137d4 <_ZNKSt9type_info14__is_pointer_pEv>:
   137d4:	2000      	movs	r0, #0
   137d6:	4770      	bx	lr

000137d8 <_ZNKSt9type_infoeqERKS_>:
   137d8:	4281      	cmp	r1, r0
   137da:	d011      	beq.n	13800 <_ZNKSt9type_infoeqERKS_+0x28>
   137dc:	b508      	push	{r3, lr}
   137de:	6840      	ldr	r0, [r0, #4]
   137e0:	7803      	ldrb	r3, [r0, #0]
   137e2:	2b2a      	cmp	r3, #42	; 0x2a
   137e4:	d00a      	beq.n	137fc <_ZNKSt9type_infoeqERKS_+0x24>
   137e6:	6849      	ldr	r1, [r1, #4]
   137e8:	780b      	ldrb	r3, [r1, #0]
   137ea:	2b2a      	cmp	r3, #42	; 0x2a
   137ec:	bf08      	it	eq
   137ee:	3101      	addeq	r1, #1
   137f0:	f00b f8da 	bl	1e9a8 <strcmp>
   137f4:	fab0 f080 	clz	r0, r0
   137f8:	0940      	lsrs	r0, r0, #5
   137fa:	bd08      	pop	{r3, pc}
   137fc:	2000      	movs	r0, #0
   137fe:	bd08      	pop	{r3, pc}
   13800:	2001      	movs	r0, #1
   13802:	4770      	bx	lr

00013804 <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PPv>:
   13804:	b570      	push	{r4, r5, r6, lr}
   13806:	6803      	ldr	r3, [r0, #0]
   13808:	b084      	sub	sp, #16
   1380a:	2400      	movs	r4, #0
   1380c:	699e      	ldr	r6, [r3, #24]
   1380e:	9400      	str	r4, [sp, #0]
   13810:	2310      	movs	r3, #16
   13812:	4615      	mov	r5, r2
   13814:	9302      	str	r3, [sp, #8]
   13816:	6812      	ldr	r2, [r2, #0]
   13818:	f88d 4004 	strb.w	r4, [sp, #4]
   1381c:	466b      	mov	r3, sp
   1381e:	9403      	str	r4, [sp, #12]
   13820:	47b0      	blx	r6
   13822:	f89d 3004 	ldrb.w	r3, [sp, #4]
   13826:	f003 0306 	and.w	r3, r3, #6
   1382a:	2b06      	cmp	r3, #6
   1382c:	bf03      	ittte	eq
   1382e:	9b00      	ldreq	r3, [sp, #0]
   13830:	602b      	streq	r3, [r5, #0]
   13832:	2001      	moveq	r0, #1
   13834:	4620      	movne	r0, r4
   13836:	b004      	add	sp, #16
   13838:	bd70      	pop	{r4, r5, r6, pc}
   1383a:	bf00      	nop

0001383c <_ZNK10__cxxabiv117__class_type_info20__do_find_public_srcEiPKvPKS0_S2_>:
   1383c:	9800      	ldr	r0, [sp, #0]
   1383e:	4290      	cmp	r0, r2
   13840:	bf0c      	ite	eq
   13842:	2006      	moveq	r0, #6
   13844:	2001      	movne	r0, #1
   13846:	4770      	bx	lr

00013848 <_ZN10__cxxabiv117__class_type_infoD1Ev>:
   13848:	b510      	push	{r4, lr}
   1384a:	4b03      	ldr	r3, [pc, #12]	; (13858 <_ZN10__cxxabiv117__class_type_infoD1Ev+0x10>)
   1384c:	6003      	str	r3, [r0, #0]
   1384e:	4604      	mov	r4, r0
   13850:	f7ff ffbe 	bl	137d0 <_ZNSt9type_infoD1Ev>
   13854:	4620      	mov	r0, r4
   13856:	bd10      	pop	{r4, pc}
   13858:	00023aa0 	.word	0x00023aa0

0001385c <_ZN10__cxxabiv117__class_type_infoD0Ev>:
   1385c:	b510      	push	{r4, lr}
   1385e:	4b05      	ldr	r3, [pc, #20]	; (13874 <_ZN10__cxxabiv117__class_type_infoD0Ev+0x18>)
   13860:	6003      	str	r3, [r0, #0]
   13862:	4604      	mov	r4, r0
   13864:	f7ff ffb4 	bl	137d0 <_ZNSt9type_infoD1Ev>
   13868:	4620      	mov	r0, r4
   1386a:	2108      	movs	r1, #8
   1386c:	f7ff fd84 	bl	13378 <_ZdlPvj>
   13870:	4620      	mov	r0, r4
   13872:	bd10      	pop	{r4, pc}
   13874:	00023aa0 	.word	0x00023aa0

00013878 <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PKvRNS0_15__upcast_resultE>:
   13878:	b538      	push	{r3, r4, r5, lr}
   1387a:	4615      	mov	r5, r2
   1387c:	461c      	mov	r4, r3
   1387e:	f7ff ffab 	bl	137d8 <_ZNKSt9type_infoeqERKS_>
   13882:	b120      	cbz	r0, 1388e <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PKvRNS0_15__upcast_resultE+0x16>
   13884:	2208      	movs	r2, #8
   13886:	2306      	movs	r3, #6
   13888:	6025      	str	r5, [r4, #0]
   1388a:	60e2      	str	r2, [r4, #12]
   1388c:	7123      	strb	r3, [r4, #4]
   1388e:	bd38      	pop	{r3, r4, r5, pc}

00013890 <_ZNK10__cxxabiv117__class_type_info10__do_catchEPKSt9type_infoPPvj>:
   13890:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   13894:	4617      	mov	r7, r2
   13896:	461c      	mov	r4, r3
   13898:	4606      	mov	r6, r0
   1389a:	460d      	mov	r5, r1
   1389c:	f7ff ff9c 	bl	137d8 <_ZNKSt9type_infoeqERKS_>
   138a0:	b908      	cbnz	r0, 138a6 <_ZNK10__cxxabiv117__class_type_info10__do_catchEPKSt9type_infoPPvj+0x16>
   138a2:	2c03      	cmp	r4, #3
   138a4:	d901      	bls.n	138aa <_ZNK10__cxxabiv117__class_type_info10__do_catchEPKSt9type_infoPPvj+0x1a>
   138a6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   138aa:	682b      	ldr	r3, [r5, #0]
   138ac:	463a      	mov	r2, r7
   138ae:	4631      	mov	r1, r6
   138b0:	4628      	mov	r0, r5
   138b2:	695b      	ldr	r3, [r3, #20]
   138b4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   138b8:	4718      	bx	r3
   138ba:	bf00      	nop

000138bc <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE>:
   138bc:	b5f0      	push	{r4, r5, r6, r7, lr}
   138be:	b083      	sub	sp, #12
   138c0:	4617      	mov	r7, r2
   138c2:	9d08      	ldr	r5, [sp, #32]
   138c4:	990a      	ldr	r1, [sp, #40]	; 0x28
   138c6:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
   138c8:	428d      	cmp	r5, r1
   138ca:	4606      	mov	r6, r0
   138cc:	d00b      	beq.n	138e6 <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x2a>
   138ce:	4619      	mov	r1, r3
   138d0:	4630      	mov	r0, r6
   138d2:	f7ff ff81 	bl	137d8 <_ZNKSt9type_infoeqERKS_>
   138d6:	b118      	cbz	r0, 138e0 <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x24>
   138d8:	2301      	movs	r3, #1
   138da:	6025      	str	r5, [r4, #0]
   138dc:	7127      	strb	r7, [r4, #4]
   138de:	71a3      	strb	r3, [r4, #6]
   138e0:	2000      	movs	r0, #0
   138e2:	b003      	add	sp, #12
   138e4:	bdf0      	pop	{r4, r5, r6, r7, pc}
   138e6:	9909      	ldr	r1, [sp, #36]	; 0x24
   138e8:	9301      	str	r3, [sp, #4]
   138ea:	f7ff ff75 	bl	137d8 <_ZNKSt9type_infoeqERKS_>
   138ee:	b118      	cbz	r0, 138f8 <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x3c>
   138f0:	2000      	movs	r0, #0
   138f2:	7167      	strb	r7, [r4, #5]
   138f4:	b003      	add	sp, #12
   138f6:	bdf0      	pop	{r4, r5, r6, r7, pc}
   138f8:	9b01      	ldr	r3, [sp, #4]
   138fa:	e7e8      	b.n	138ce <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x12>

000138fc <_ZdlPv>:
   138fc:	f00a b92e 	b.w	1db5c <free>

00013900 <__cxa_end_cleanup>:
   13900:	b41e      	push	{r1, r2, r3, r4}
   13902:	f000 f891 	bl	13a28 <__gnu_end_cleanup>
   13906:	bc1e      	pop	{r1, r2, r3, r4}
   13908:	f009 fc82 	bl	1d210 <_Unwind_Resume>

0001390c <__cxa_type_match>:
   1390c:	b5f0      	push	{r4, r5, r6, r7, lr}
   1390e:	7802      	ldrb	r2, [r0, #0]
   13910:	2a47      	cmp	r2, #71	; 0x47
   13912:	b083      	sub	sp, #12
   13914:	460d      	mov	r5, r1
   13916:	461f      	mov	r7, r3
   13918:	d01e      	beq.n	13958 <__cxa_type_match+0x4c>
   1391a:	2300      	movs	r3, #0
   1391c:	4c27      	ldr	r4, [pc, #156]	; (139bc <__cxa_type_match+0xb0>)
   1391e:	9301      	str	r3, [sp, #4]
   13920:	6823      	ldr	r3, [r4, #0]
   13922:	4620      	mov	r0, r4
   13924:	689b      	ldr	r3, [r3, #8]
   13926:	4798      	blx	r3
   13928:	b180      	cbz	r0, 1394c <__cxa_type_match+0x40>
   1392a:	9b01      	ldr	r3, [sp, #4]
   1392c:	681b      	ldr	r3, [r3, #0]
   1392e:	9301      	str	r3, [sp, #4]
   13930:	2602      	movs	r6, #2
   13932:	682b      	ldr	r3, [r5, #0]
   13934:	4621      	mov	r1, r4
   13936:	4628      	mov	r0, r5
   13938:	691c      	ldr	r4, [r3, #16]
   1393a:	aa01      	add	r2, sp, #4
   1393c:	2301      	movs	r3, #1
   1393e:	47a0      	blx	r4
   13940:	b130      	cbz	r0, 13950 <__cxa_type_match+0x44>
   13942:	9b01      	ldr	r3, [sp, #4]
   13944:	603b      	str	r3, [r7, #0]
   13946:	4630      	mov	r0, r6
   13948:	b003      	add	sp, #12
   1394a:	bdf0      	pop	{r4, r5, r6, r7, pc}
   1394c:	2601      	movs	r6, #1
   1394e:	e7f0      	b.n	13932 <__cxa_type_match+0x26>
   13950:	4606      	mov	r6, r0
   13952:	4630      	mov	r0, r6
   13954:	b003      	add	sp, #12
   13956:	bdf0      	pop	{r4, r5, r6, r7, pc}
   13958:	7843      	ldrb	r3, [r0, #1]
   1395a:	2b4e      	cmp	r3, #78	; 0x4e
   1395c:	d1dd      	bne.n	1391a <__cxa_type_match+0xe>
   1395e:	7883      	ldrb	r3, [r0, #2]
   13960:	2b55      	cmp	r3, #85	; 0x55
   13962:	d1da      	bne.n	1391a <__cxa_type_match+0xe>
   13964:	78c3      	ldrb	r3, [r0, #3]
   13966:	2b43      	cmp	r3, #67	; 0x43
   13968:	d019      	beq.n	1399e <__cxa_type_match+0x92>
   1396a:	78c3      	ldrb	r3, [r0, #3]
   1396c:	2b43      	cmp	r3, #67	; 0x43
   1396e:	d1d4      	bne.n	1391a <__cxa_type_match+0xe>
   13970:	7903      	ldrb	r3, [r0, #4]
   13972:	2b43      	cmp	r3, #67	; 0x43
   13974:	d1d1      	bne.n	1391a <__cxa_type_match+0xe>
   13976:	7943      	ldrb	r3, [r0, #5]
   13978:	2b2b      	cmp	r3, #43	; 0x2b
   1397a:	d1ce      	bne.n	1391a <__cxa_type_match+0xe>
   1397c:	7983      	ldrb	r3, [r0, #6]
   1397e:	2b2b      	cmp	r3, #43	; 0x2b
   13980:	d1cb      	bne.n	1391a <__cxa_type_match+0xe>
   13982:	79c3      	ldrb	r3, [r0, #7]
   13984:	2b01      	cmp	r3, #1
   13986:	d8c8      	bhi.n	1391a <__cxa_type_match+0xe>
   13988:	d004      	beq.n	13994 <__cxa_type_match+0x88>
   1398a:	f850 4c20 	ldr.w	r4, [r0, #-32]
   1398e:	3058      	adds	r0, #88	; 0x58
   13990:	9001      	str	r0, [sp, #4]
   13992:	e7c5      	b.n	13920 <__cxa_type_match+0x14>
   13994:	f850 0c20 	ldr.w	r0, [r0, #-32]
   13998:	f850 4c78 	ldr.w	r4, [r0, #-120]
   1399c:	e7f8      	b.n	13990 <__cxa_type_match+0x84>
   1399e:	7903      	ldrb	r3, [r0, #4]
   139a0:	2b46      	cmp	r3, #70	; 0x46
   139a2:	d1e2      	bne.n	1396a <__cxa_type_match+0x5e>
   139a4:	7943      	ldrb	r3, [r0, #5]
   139a6:	2b4f      	cmp	r3, #79	; 0x4f
   139a8:	d1df      	bne.n	1396a <__cxa_type_match+0x5e>
   139aa:	7983      	ldrb	r3, [r0, #6]
   139ac:	2b52      	cmp	r3, #82	; 0x52
   139ae:	d1dc      	bne.n	1396a <__cxa_type_match+0x5e>
   139b0:	79c3      	ldrb	r3, [r0, #7]
   139b2:	2b00      	cmp	r3, #0
   139b4:	d1d9      	bne.n	1396a <__cxa_type_match+0x5e>
   139b6:	9301      	str	r3, [sp, #4]
   139b8:	4c01      	ldr	r4, [pc, #4]	; (139c0 <__cxa_type_match+0xb4>)
   139ba:	e7b1      	b.n	13920 <__cxa_type_match+0x14>
   139bc:	00023958 	.word	0x00023958
   139c0:	00023950 	.word	0x00023950

000139c4 <__cxa_begin_cleanup>:
   139c4:	b510      	push	{r4, lr}
   139c6:	4604      	mov	r4, r0
   139c8:	f000 f98c 	bl	13ce4 <__cxa_get_globals>
   139cc:	7823      	ldrb	r3, [r4, #0]
   139ce:	2b47      	cmp	r3, #71	; 0x47
   139d0:	f1a4 0220 	sub.w	r2, r4, #32
   139d4:	d004      	beq.n	139e0 <__cxa_begin_cleanup+0x1c>
   139d6:	6883      	ldr	r3, [r0, #8]
   139d8:	bb23      	cbnz	r3, 13a24 <__cxa_begin_cleanup+0x60>
   139da:	6082      	str	r2, [r0, #8]
   139dc:	2001      	movs	r0, #1
   139de:	bd10      	pop	{r4, pc}
   139e0:	7863      	ldrb	r3, [r4, #1]
   139e2:	2b4e      	cmp	r3, #78	; 0x4e
   139e4:	d1f7      	bne.n	139d6 <__cxa_begin_cleanup+0x12>
   139e6:	78a3      	ldrb	r3, [r4, #2]
   139e8:	2b55      	cmp	r3, #85	; 0x55
   139ea:	d1f4      	bne.n	139d6 <__cxa_begin_cleanup+0x12>
   139ec:	78e3      	ldrb	r3, [r4, #3]
   139ee:	2b43      	cmp	r3, #67	; 0x43
   139f0:	d1f1      	bne.n	139d6 <__cxa_begin_cleanup+0x12>
   139f2:	7923      	ldrb	r3, [r4, #4]
   139f4:	2b43      	cmp	r3, #67	; 0x43
   139f6:	d1ee      	bne.n	139d6 <__cxa_begin_cleanup+0x12>
   139f8:	7963      	ldrb	r3, [r4, #5]
   139fa:	2b2b      	cmp	r3, #43	; 0x2b
   139fc:	d1eb      	bne.n	139d6 <__cxa_begin_cleanup+0x12>
   139fe:	79a3      	ldrb	r3, [r4, #6]
   13a00:	2b2b      	cmp	r3, #43	; 0x2b
   13a02:	d1e8      	bne.n	139d6 <__cxa_begin_cleanup+0x12>
   13a04:	79e3      	ldrb	r3, [r4, #7]
   13a06:	2b01      	cmp	r3, #1
   13a08:	d8e5      	bhi.n	139d6 <__cxa_begin_cleanup+0x12>
   13a0a:	f854 3c04 	ldr.w	r3, [r4, #-4]
   13a0e:	3301      	adds	r3, #1
   13a10:	2b01      	cmp	r3, #1
   13a12:	f844 3c04 	str.w	r3, [r4, #-4]
   13a16:	d1e1      	bne.n	139dc <__cxa_begin_cleanup+0x18>
   13a18:	6883      	ldr	r3, [r0, #8]
   13a1a:	f844 3c08 	str.w	r3, [r4, #-8]
   13a1e:	6082      	str	r2, [r0, #8]
   13a20:	2001      	movs	r0, #1
   13a22:	bd10      	pop	{r4, pc}
   13a24:	f7ff fd78 	bl	13518 <_ZSt9terminatev>

00013a28 <__gnu_end_cleanup>:
   13a28:	b508      	push	{r3, lr}
   13a2a:	f000 f95b 	bl	13ce4 <__cxa_get_globals>
   13a2e:	6883      	ldr	r3, [r0, #8]
   13a30:	b383      	cbz	r3, 13a94 <__gnu_end_cleanup+0x6c>
   13a32:	f893 2020 	ldrb.w	r2, [r3, #32]
   13a36:	2a47      	cmp	r2, #71	; 0x47
   13a38:	d004      	beq.n	13a44 <__gnu_end_cleanup+0x1c>
   13a3a:	2200      	movs	r2, #0
   13a3c:	6082      	str	r2, [r0, #8]
   13a3e:	f103 0020 	add.w	r0, r3, #32
   13a42:	bd08      	pop	{r3, pc}
   13a44:	f893 2021 	ldrb.w	r2, [r3, #33]	; 0x21
   13a48:	2a4e      	cmp	r2, #78	; 0x4e
   13a4a:	d1f6      	bne.n	13a3a <__gnu_end_cleanup+0x12>
   13a4c:	f893 2022 	ldrb.w	r2, [r3, #34]	; 0x22
   13a50:	2a55      	cmp	r2, #85	; 0x55
   13a52:	d1f2      	bne.n	13a3a <__gnu_end_cleanup+0x12>
   13a54:	f893 2023 	ldrb.w	r2, [r3, #35]	; 0x23
   13a58:	2a43      	cmp	r2, #67	; 0x43
   13a5a:	d1ee      	bne.n	13a3a <__gnu_end_cleanup+0x12>
   13a5c:	f893 2024 	ldrb.w	r2, [r3, #36]	; 0x24
   13a60:	2a43      	cmp	r2, #67	; 0x43
   13a62:	d1ea      	bne.n	13a3a <__gnu_end_cleanup+0x12>
   13a64:	f893 2025 	ldrb.w	r2, [r3, #37]	; 0x25
   13a68:	2a2b      	cmp	r2, #43	; 0x2b
   13a6a:	d1e6      	bne.n	13a3a <__gnu_end_cleanup+0x12>
   13a6c:	f893 2026 	ldrb.w	r2, [r3, #38]	; 0x26
   13a70:	2a2b      	cmp	r2, #43	; 0x2b
   13a72:	d1e2      	bne.n	13a3a <__gnu_end_cleanup+0x12>
   13a74:	f893 2027 	ldrb.w	r2, [r3, #39]	; 0x27
   13a78:	2a01      	cmp	r2, #1
   13a7a:	d8de      	bhi.n	13a3a <__gnu_end_cleanup+0x12>
   13a7c:	69da      	ldr	r2, [r3, #28]
   13a7e:	3a01      	subs	r2, #1
   13a80:	61da      	str	r2, [r3, #28]
   13a82:	2a00      	cmp	r2, #0
   13a84:	d1db      	bne.n	13a3e <__gnu_end_cleanup+0x16>
   13a86:	699a      	ldr	r2, [r3, #24]
   13a88:	6082      	str	r2, [r0, #8]
   13a8a:	2200      	movs	r2, #0
   13a8c:	619a      	str	r2, [r3, #24]
   13a8e:	f103 0020 	add.w	r0, r3, #32
   13a92:	bd08      	pop	{r3, pc}
   13a94:	f7ff fd40 	bl	13518 <_ZSt9terminatev>

00013a98 <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc>:
   13a98:	7803      	ldrb	r3, [r0, #0]
   13a9a:	2b47      	cmp	r3, #71	; 0x47
   13a9c:	d001      	beq.n	13aa2 <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc+0xa>
   13a9e:	2000      	movs	r0, #0
   13aa0:	4770      	bx	lr
   13aa2:	7843      	ldrb	r3, [r0, #1]
   13aa4:	2b4e      	cmp	r3, #78	; 0x4e
   13aa6:	d1fa      	bne.n	13a9e <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc+0x6>
   13aa8:	7883      	ldrb	r3, [r0, #2]
   13aaa:	2b55      	cmp	r3, #85	; 0x55
   13aac:	d1f7      	bne.n	13a9e <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc+0x6>
   13aae:	78c3      	ldrb	r3, [r0, #3]
   13ab0:	2b43      	cmp	r3, #67	; 0x43
   13ab2:	d1f4      	bne.n	13a9e <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc+0x6>
   13ab4:	7903      	ldrb	r3, [r0, #4]
   13ab6:	2b43      	cmp	r3, #67	; 0x43
   13ab8:	d1f1      	bne.n	13a9e <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc+0x6>
   13aba:	7943      	ldrb	r3, [r0, #5]
   13abc:	2b2b      	cmp	r3, #43	; 0x2b
   13abe:	d1ee      	bne.n	13a9e <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc+0x6>
   13ac0:	7983      	ldrb	r3, [r0, #6]
   13ac2:	2b2b      	cmp	r3, #43	; 0x2b
   13ac4:	d1eb      	bne.n	13a9e <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc+0x6>
   13ac6:	79c0      	ldrb	r0, [r0, #7]
   13ac8:	2801      	cmp	r0, #1
   13aca:	bf8c      	ite	hi
   13acc:	2000      	movhi	r0, #0
   13ace:	2001      	movls	r0, #1
   13ad0:	4770      	bx	lr
   13ad2:	bf00      	nop

00013ad4 <__cxa_call_terminate>:
   13ad4:	b510      	push	{r4, lr}
   13ad6:	b130      	cbz	r0, 13ae6 <__cxa_call_terminate+0x12>
   13ad8:	4604      	mov	r4, r0
   13ada:	f000 f87b 	bl	13bd4 <__cxa_begin_catch>
   13ade:	4620      	mov	r0, r4
   13ae0:	f7ff ffda 	bl	13a98 <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc>
   13ae4:	b908      	cbnz	r0, 13aea <__cxa_call_terminate+0x16>
   13ae6:	f7ff fd17 	bl	13518 <_ZSt9terminatev>
   13aea:	f854 0c14 	ldr.w	r0, [r4, #-20]
   13aee:	f7ff fcff 	bl	134f0 <_ZN10__cxxabiv111__terminateEPFvvE>
   13af2:	bf00      	nop

00013af4 <__cxa_call_unexpected>:
   13af4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   13af8:	b085      	sub	sp, #20
   13afa:	4602      	mov	r2, r0
   13afc:	f7ff ffcc 	bl	13a98 <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc>
   13b00:	b160      	cbz	r0, 13b1c <__cxa_call_unexpected+0x28>
   13b02:	f852 8c18 	ldr.w	r8, [r2, #-24]
   13b06:	f852 5c14 	ldr.w	r5, [r2, #-20]
   13b0a:	6a96      	ldr	r6, [r2, #40]	; 0x28
   13b0c:	6b17      	ldr	r7, [r2, #48]	; 0x30
   13b0e:	6b54      	ldr	r4, [r2, #52]	; 0x34
   13b10:	4610      	mov	r0, r2
   13b12:	f000 f85f 	bl	13bd4 <__cxa_begin_catch>
   13b16:	4640      	mov	r0, r8
   13b18:	f7ff fd08 	bl	1352c <_ZN10__cxxabiv112__unexpectedEPFvvE>
   13b1c:	4610      	mov	r0, r2
   13b1e:	f000 f859 	bl	13bd4 <__cxa_begin_catch>
   13b22:	f7ff fd07 	bl	13534 <_ZSt10unexpectedv>
   13b26:	f000 f855 	bl	13bd4 <__cxa_begin_catch>
   13b2a:	f7ff fcf5 	bl	13518 <_ZSt9terminatev>
   13b2e:	f000 f851 	bl	13bd4 <__cxa_begin_catch>
   13b32:	f000 f8d3 	bl	13cdc <__cxa_get_globals_fast>
   13b36:	6803      	ldr	r3, [r0, #0]
   13b38:	f893 2027 	ldrb.w	r2, [r3, #39]	; 0x27
   13b3c:	2a01      	cmp	r2, #1
   13b3e:	d036      	beq.n	13bae <__cxa_call_unexpected+0xba>
   13b40:	f103 0278 	add.w	r2, r3, #120	; 0x78
   13b44:	f10d 0a10 	add.w	sl, sp, #16
   13b48:	f04f 0800 	mov.w	r8, #0
   13b4c:	3320      	adds	r3, #32
   13b4e:	f84a 2d08 	str.w	r2, [sl, #-8]!
   13b52:	f027 0b03 	bic.w	fp, r7, #3
   13b56:	9301      	str	r3, [sp, #4]
   13b58:	46c1      	mov	r9, r8
   13b5a:	45b1      	cmp	r9, r6
   13b5c:	da1b      	bge.n	13b96 <__cxa_call_unexpected+0xa2>
   13b5e:	6827      	ldr	r7, [r4, #0]
   13b60:	b107      	cbz	r7, 13b64 <__cxa_call_unexpected+0x70>
   13b62:	4427      	add	r7, r4
   13b64:	4653      	mov	r3, sl
   13b66:	2200      	movs	r2, #0
   13b68:	4639      	mov	r1, r7
   13b6a:	9801      	ldr	r0, [sp, #4]
   13b6c:	f7ff fece 	bl	1390c <__cxa_type_match>
   13b70:	bb10      	cbnz	r0, 13bb8 <__cxa_call_unexpected+0xc4>
   13b72:	683b      	ldr	r3, [r7, #0]
   13b74:	4914      	ldr	r1, [pc, #80]	; (13bc8 <__cxa_call_unexpected+0xd4>)
   13b76:	691b      	ldr	r3, [r3, #16]
   13b78:	9300      	str	r3, [sp, #0]
   13b7a:	aa04      	add	r2, sp, #16
   13b7c:	2301      	movs	r3, #1
   13b7e:	f842 0d04 	str.w	r0, [r2, #-4]!
   13b82:	4638      	mov	r0, r7
   13b84:	9f00      	ldr	r7, [sp, #0]
   13b86:	47b8      	blx	r7
   13b88:	2800      	cmp	r0, #0
   13b8a:	bf18      	it	ne
   13b8c:	4680      	movne	r8, r0
   13b8e:	f109 0901 	add.w	r9, r9, #1
   13b92:	445c      	add	r4, fp
   13b94:	e7e1      	b.n	13b5a <__cxa_call_unexpected+0x66>
   13b96:	f1b8 0f00 	cmp.w	r8, #0
   13b9a:	d00a      	beq.n	13bb2 <__cxa_call_unexpected+0xbe>
   13b9c:	2004      	movs	r0, #4
   13b9e:	f7ff fc5b 	bl	13458 <__cxa_allocate_exception>
   13ba2:	4b0a      	ldr	r3, [pc, #40]	; (13bcc <__cxa_call_unexpected+0xd8>)
   13ba4:	6003      	str	r3, [r0, #0]
   13ba6:	4a0a      	ldr	r2, [pc, #40]	; (13bd0 <__cxa_call_unexpected+0xdc>)
   13ba8:	4907      	ldr	r1, [pc, #28]	; (13bc8 <__cxa_call_unexpected+0xd4>)
   13baa:	f7ff fcff 	bl	135ac <__cxa_throw>
   13bae:	681a      	ldr	r2, [r3, #0]
   13bb0:	e7c8      	b.n	13b44 <__cxa_call_unexpected+0x50>
   13bb2:	4628      	mov	r0, r5
   13bb4:	f7ff fc9c 	bl	134f0 <_ZN10__cxxabiv111__terminateEPFvvE>
   13bb8:	f7ff fd36 	bl	13628 <__cxa_rethrow>
   13bbc:	f000 f848 	bl	13c50 <__cxa_end_catch>
   13bc0:	f000 f846 	bl	13c50 <__cxa_end_catch>
   13bc4:	f7ff fe9c 	bl	13900 <__cxa_end_cleanup>
   13bc8:	00023960 	.word	0x00023960
   13bcc:	000239e4 	.word	0x000239e4
   13bd0:	000134d5 	.word	0x000134d5

00013bd4 <__cxa_begin_catch>:
   13bd4:	b538      	push	{r3, r4, r5, lr}
   13bd6:	4604      	mov	r4, r0
   13bd8:	f000 f884 	bl	13ce4 <__cxa_get_globals>
   13bdc:	7822      	ldrb	r2, [r4, #0]
   13bde:	6803      	ldr	r3, [r0, #0]
   13be0:	2a47      	cmp	r2, #71	; 0x47
   13be2:	f1a4 0120 	sub.w	r1, r4, #32
   13be6:	d004      	beq.n	13bf2 <__cxa_begin_catch+0x1e>
   13be8:	bb83      	cbnz	r3, 13c4c <__cxa_begin_catch+0x78>
   13bea:	461c      	mov	r4, r3
   13bec:	6001      	str	r1, [r0, #0]
   13bee:	4620      	mov	r0, r4
   13bf0:	bd38      	pop	{r3, r4, r5, pc}
   13bf2:	7862      	ldrb	r2, [r4, #1]
   13bf4:	2a4e      	cmp	r2, #78	; 0x4e
   13bf6:	d1f7      	bne.n	13be8 <__cxa_begin_catch+0x14>
   13bf8:	78a2      	ldrb	r2, [r4, #2]
   13bfa:	2a55      	cmp	r2, #85	; 0x55
   13bfc:	d1f4      	bne.n	13be8 <__cxa_begin_catch+0x14>
   13bfe:	78e2      	ldrb	r2, [r4, #3]
   13c00:	2a43      	cmp	r2, #67	; 0x43
   13c02:	d1f1      	bne.n	13be8 <__cxa_begin_catch+0x14>
   13c04:	7922      	ldrb	r2, [r4, #4]
   13c06:	2a43      	cmp	r2, #67	; 0x43
   13c08:	d1ee      	bne.n	13be8 <__cxa_begin_catch+0x14>
   13c0a:	7962      	ldrb	r2, [r4, #5]
   13c0c:	2a2b      	cmp	r2, #43	; 0x2b
   13c0e:	d1eb      	bne.n	13be8 <__cxa_begin_catch+0x14>
   13c10:	79a2      	ldrb	r2, [r4, #6]
   13c12:	2a2b      	cmp	r2, #43	; 0x2b
   13c14:	d1e8      	bne.n	13be8 <__cxa_begin_catch+0x14>
   13c16:	79e2      	ldrb	r2, [r4, #7]
   13c18:	2a01      	cmp	r2, #1
   13c1a:	d8e5      	bhi.n	13be8 <__cxa_begin_catch+0x14>
   13c1c:	f854 2c0c 	ldr.w	r2, [r4, #-12]
   13c20:	2a00      	cmp	r2, #0
   13c22:	db10      	blt.n	13c46 <__cxa_begin_catch+0x72>
   13c24:	3201      	adds	r2, #1
   13c26:	6845      	ldr	r5, [r0, #4]
   13c28:	f844 2c0c 	str.w	r2, [r4, #-12]
   13c2c:	3d01      	subs	r5, #1
   13c2e:	6045      	str	r5, [r0, #4]
   13c30:	428b      	cmp	r3, r1
   13c32:	bf1c      	itt	ne
   13c34:	f844 3c10 	strne.w	r3, [r4, #-16]
   13c38:	6001      	strne	r1, [r0, #0]
   13c3a:	4620      	mov	r0, r4
   13c3c:	6a64      	ldr	r4, [r4, #36]	; 0x24
   13c3e:	f008 ff39 	bl	1cab4 <_Unwind_Complete>
   13c42:	4620      	mov	r0, r4
   13c44:	bd38      	pop	{r3, r4, r5, pc}
   13c46:	f1c2 0201 	rsb	r2, r2, #1
   13c4a:	e7ec      	b.n	13c26 <__cxa_begin_catch+0x52>
   13c4c:	f7ff fc64 	bl	13518 <_ZSt9terminatev>

00013c50 <__cxa_end_catch>:
   13c50:	b508      	push	{r3, lr}
   13c52:	f000 f843 	bl	13cdc <__cxa_get_globals_fast>
   13c56:	4602      	mov	r2, r0
   13c58:	6800      	ldr	r0, [r0, #0]
   13c5a:	2800      	cmp	r0, #0
   13c5c:	d03d      	beq.n	13cda <__cxa_end_catch+0x8a>
   13c5e:	f890 3020 	ldrb.w	r3, [r0, #32]
   13c62:	2b47      	cmp	r3, #71	; 0x47
   13c64:	d006      	beq.n	13c74 <__cxa_end_catch+0x24>
   13c66:	2300      	movs	r3, #0
   13c68:	6013      	str	r3, [r2, #0]
   13c6a:	3020      	adds	r0, #32
   13c6c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
   13c70:	f008 bf22 	b.w	1cab8 <_Unwind_DeleteException>
   13c74:	f890 3021 	ldrb.w	r3, [r0, #33]	; 0x21
   13c78:	2b4e      	cmp	r3, #78	; 0x4e
   13c7a:	d1f4      	bne.n	13c66 <__cxa_end_catch+0x16>
   13c7c:	f890 3022 	ldrb.w	r3, [r0, #34]	; 0x22
   13c80:	2b55      	cmp	r3, #85	; 0x55
   13c82:	d1f0      	bne.n	13c66 <__cxa_end_catch+0x16>
   13c84:	f890 3023 	ldrb.w	r3, [r0, #35]	; 0x23
   13c88:	2b43      	cmp	r3, #67	; 0x43
   13c8a:	d1ec      	bne.n	13c66 <__cxa_end_catch+0x16>
   13c8c:	f890 3024 	ldrb.w	r3, [r0, #36]	; 0x24
   13c90:	2b43      	cmp	r3, #67	; 0x43
   13c92:	d1e8      	bne.n	13c66 <__cxa_end_catch+0x16>
   13c94:	f890 3025 	ldrb.w	r3, [r0, #37]	; 0x25
   13c98:	2b2b      	cmp	r3, #43	; 0x2b
   13c9a:	d1e4      	bne.n	13c66 <__cxa_end_catch+0x16>
   13c9c:	f890 3026 	ldrb.w	r3, [r0, #38]	; 0x26
   13ca0:	2b2b      	cmp	r3, #43	; 0x2b
   13ca2:	d1e0      	bne.n	13c66 <__cxa_end_catch+0x16>
   13ca4:	f890 3027 	ldrb.w	r3, [r0, #39]	; 0x27
   13ca8:	2b01      	cmp	r3, #1
   13caa:	d8dc      	bhi.n	13c66 <__cxa_end_catch+0x16>
   13cac:	6943      	ldr	r3, [r0, #20]
   13cae:	2b00      	cmp	r3, #0
   13cb0:	db05      	blt.n	13cbe <__cxa_end_catch+0x6e>
   13cb2:	3b01      	subs	r3, #1
   13cb4:	d008      	beq.n	13cc8 <__cxa_end_catch+0x78>
   13cb6:	1c5a      	adds	r2, r3, #1
   13cb8:	d00d      	beq.n	13cd6 <__cxa_end_catch+0x86>
   13cba:	6143      	str	r3, [r0, #20]
   13cbc:	bd08      	pop	{r3, pc}
   13cbe:	3301      	adds	r3, #1
   13cc0:	d1fb      	bne.n	13cba <__cxa_end_catch+0x6a>
   13cc2:	6901      	ldr	r1, [r0, #16]
   13cc4:	6011      	str	r1, [r2, #0]
   13cc6:	e7f8      	b.n	13cba <__cxa_end_catch+0x6a>
   13cc8:	6903      	ldr	r3, [r0, #16]
   13cca:	6013      	str	r3, [r2, #0]
   13ccc:	3020      	adds	r0, #32
   13cce:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
   13cd2:	f008 bef1 	b.w	1cab8 <_Unwind_DeleteException>
   13cd6:	f7ff fc1f 	bl	13518 <_ZSt9terminatev>
   13cda:	bd08      	pop	{r3, pc}

00013cdc <__cxa_get_globals_fast>:
   13cdc:	4800      	ldr	r0, [pc, #0]	; (13ce0 <__cxa_get_globals_fast+0x4>)
   13cde:	4770      	bx	lr
   13ce0:	20002284 	.word	0x20002284

00013ce4 <__cxa_get_globals>:
   13ce4:	4800      	ldr	r0, [pc, #0]	; (13ce8 <__cxa_get_globals+0x4>)
   13ce6:	4770      	bx	lr
   13ce8:	20002284 	.word	0x20002284

00013cec <_ZL28read_encoded_value_with_basehjPKhPj>:
   13cec:	2850      	cmp	r0, #80	; 0x50
   13cee:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   13cf0:	d054      	beq.n	13d9c <_ZL28read_encoded_value_with_basehjPKhPj+0xb0>
   13cf2:	f000 040f 	and.w	r4, r0, #15
   13cf6:	2c0c      	cmp	r4, #12
   13cf8:	d84e      	bhi.n	13d98 <_ZL28read_encoded_value_with_basehjPKhPj+0xac>
   13cfa:	e8df f004 	tbb	[pc, r4]
   13cfe:	3907      	.short	0x3907
   13d00:	4d170749 	.word	0x4d170749
   13d04:	1f4d4d4d 	.word	0x1f4d4d4d
   13d08:	071b      	.short	0x071b
   13d0a:	17          	.byte	0x17
   13d0b:	00          	.byte	0x00
   13d0c:	4615      	mov	r5, r2
   13d0e:	f855 4b04 	ldr.w	r4, [r5], #4
   13d12:	b144      	cbz	r4, 13d26 <_ZL28read_encoded_value_with_basehjPKhPj+0x3a>
   13d14:	f000 0670 	and.w	r6, r0, #112	; 0x70
   13d18:	2e10      	cmp	r6, #16
   13d1a:	bf08      	it	eq
   13d1c:	4611      	moveq	r1, r2
   13d1e:	440c      	add	r4, r1
   13d20:	0602      	lsls	r2, r0, #24
   13d22:	bf48      	it	mi
   13d24:	6824      	ldrmi	r4, [r4, #0]
   13d26:	601c      	str	r4, [r3, #0]
   13d28:	4628      	mov	r0, r5
   13d2a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   13d2c:	4615      	mov	r5, r2
   13d2e:	f855 4b08 	ldr.w	r4, [r5], #8
   13d32:	e7ee      	b.n	13d12 <_ZL28read_encoded_value_with_basehjPKhPj+0x26>
   13d34:	4615      	mov	r5, r2
   13d36:	f935 4b02 	ldrsh.w	r4, [r5], #2
   13d3a:	e7ea      	b.n	13d12 <_ZL28read_encoded_value_with_basehjPKhPj+0x26>
   13d3c:	2400      	movs	r4, #0
   13d3e:	4627      	mov	r7, r4
   13d40:	4615      	mov	r5, r2
   13d42:	f815 eb01 	ldrb.w	lr, [r5], #1
   13d46:	f00e 067f 	and.w	r6, lr, #127	; 0x7f
   13d4a:	40be      	lsls	r6, r7
   13d4c:	f01e 0f80 	tst.w	lr, #128	; 0x80
   13d50:	ea44 0406 	orr.w	r4, r4, r6
   13d54:	f107 0707 	add.w	r7, r7, #7
   13d58:	d1f3      	bne.n	13d42 <_ZL28read_encoded_value_with_basehjPKhPj+0x56>
   13d5a:	2f1f      	cmp	r7, #31
   13d5c:	d8d9      	bhi.n	13d12 <_ZL28read_encoded_value_with_basehjPKhPj+0x26>
   13d5e:	f01e 0f40 	tst.w	lr, #64	; 0x40
   13d62:	d0d6      	beq.n	13d12 <_ZL28read_encoded_value_with_basehjPKhPj+0x26>
   13d64:	f04f 36ff 	mov.w	r6, #4294967295
   13d68:	fa06 f707 	lsl.w	r7, r6, r7
   13d6c:	433c      	orrs	r4, r7
   13d6e:	e7d1      	b.n	13d14 <_ZL28read_encoded_value_with_basehjPKhPj+0x28>
   13d70:	2400      	movs	r4, #0
   13d72:	4627      	mov	r7, r4
   13d74:	4615      	mov	r5, r2
   13d76:	f815 eb01 	ldrb.w	lr, [r5], #1
   13d7a:	f00e 067f 	and.w	r6, lr, #127	; 0x7f
   13d7e:	40be      	lsls	r6, r7
   13d80:	f01e 0f80 	tst.w	lr, #128	; 0x80
   13d84:	ea44 0406 	orr.w	r4, r4, r6
   13d88:	f107 0707 	add.w	r7, r7, #7
   13d8c:	d1f3      	bne.n	13d76 <_ZL28read_encoded_value_with_basehjPKhPj+0x8a>
   13d8e:	e7c0      	b.n	13d12 <_ZL28read_encoded_value_with_basehjPKhPj+0x26>
   13d90:	4615      	mov	r5, r2
   13d92:	f835 4b02 	ldrh.w	r4, [r5], #2
   13d96:	e7bc      	b.n	13d12 <_ZL28read_encoded_value_with_basehjPKhPj+0x26>
   13d98:	f009 fc44 	bl	1d624 <abort>
   13d9c:	3203      	adds	r2, #3
   13d9e:	f022 0503 	bic.w	r5, r2, #3
   13da2:	f855 4b04 	ldr.w	r4, [r5], #4
   13da6:	601c      	str	r4, [r3, #0]
   13da8:	4628      	mov	r0, r5
   13daa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

00013dac <_ZL21base_of_encoded_valuehP15_Unwind_Context>:
   13dac:	28ff      	cmp	r0, #255	; 0xff
   13dae:	d00d      	beq.n	13dcc <_ZL21base_of_encoded_valuehP15_Unwind_Context+0x20>
   13db0:	f000 0070 	and.w	r0, r0, #112	; 0x70
   13db4:	2820      	cmp	r0, #32
   13db6:	d015      	beq.n	13de4 <_ZL21base_of_encoded_valuehP15_Unwind_Context+0x38>
   13db8:	d90a      	bls.n	13dd0 <_ZL21base_of_encoded_valuehP15_Unwind_Context+0x24>
   13dba:	2840      	cmp	r0, #64	; 0x40
   13dbc:	d00f      	beq.n	13dde <_ZL21base_of_encoded_valuehP15_Unwind_Context+0x32>
   13dbe:	2850      	cmp	r0, #80	; 0x50
   13dc0:	d004      	beq.n	13dcc <_ZL21base_of_encoded_valuehP15_Unwind_Context+0x20>
   13dc2:	2830      	cmp	r0, #48	; 0x30
   13dc4:	d108      	bne.n	13dd8 <_ZL21base_of_encoded_valuehP15_Unwind_Context+0x2c>
   13dc6:	4608      	mov	r0, r1
   13dc8:	f009 bc26 	b.w	1d618 <_Unwind_GetDataRelBase>
   13dcc:	2000      	movs	r0, #0
   13dce:	4770      	bx	lr
   13dd0:	2800      	cmp	r0, #0
   13dd2:	d0fb      	beq.n	13dcc <_ZL21base_of_encoded_valuehP15_Unwind_Context+0x20>
   13dd4:	2810      	cmp	r0, #16
   13dd6:	d0f9      	beq.n	13dcc <_ZL21base_of_encoded_valuehP15_Unwind_Context+0x20>
   13dd8:	b508      	push	{r3, lr}
   13dda:	f009 fc23 	bl	1d624 <abort>
   13dde:	4608      	mov	r0, r1
   13de0:	f009 bc06 	b.w	1d5f0 <_Unwind_GetRegionStart>
   13de4:	4608      	mov	r0, r1
   13de6:	f009 bc13 	b.w	1d610 <_Unwind_GetTextRelBase>
   13dea:	bf00      	nop

00013dec <_ZL17parse_lsda_headerP15_Unwind_ContextPKhP16lsda_header_info>:
   13dec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   13dee:	460c      	mov	r4, r1
   13df0:	4615      	mov	r5, r2
   13df2:	4607      	mov	r7, r0
   13df4:	2800      	cmp	r0, #0
   13df6:	d044      	beq.n	13e82 <_ZL17parse_lsda_headerP15_Unwind_ContextPKhP16lsda_header_info+0x96>
   13df8:	f009 fbfa 	bl	1d5f0 <_Unwind_GetRegionStart>
   13dfc:	6028      	str	r0, [r5, #0]
   13dfe:	7826      	ldrb	r6, [r4, #0]
   13e00:	2eff      	cmp	r6, #255	; 0xff
   13e02:	f104 0401 	add.w	r4, r4, #1
   13e06:	d032      	beq.n	13e6e <_ZL17parse_lsda_headerP15_Unwind_ContextPKhP16lsda_header_info+0x82>
   13e08:	4639      	mov	r1, r7
   13e0a:	4630      	mov	r0, r6
   13e0c:	f7ff ffce 	bl	13dac <_ZL21base_of_encoded_valuehP15_Unwind_Context>
   13e10:	4622      	mov	r2, r4
   13e12:	4601      	mov	r1, r0
   13e14:	1d2b      	adds	r3, r5, #4
   13e16:	4630      	mov	r0, r6
   13e18:	f7ff ff68 	bl	13cec <_ZL28read_encoded_value_with_basehjPKhPj>
   13e1c:	4604      	mov	r4, r0
   13e1e:	1c60      	adds	r0, r4, #1
   13e20:	7823      	ldrb	r3, [r4, #0]
   13e22:	752b      	strb	r3, [r5, #20]
   13e24:	2bff      	cmp	r3, #255	; 0xff
   13e26:	d029      	beq.n	13e7c <_ZL17parse_lsda_headerP15_Unwind_ContextPKhP16lsda_header_info+0x90>
   13e28:	2310      	movs	r3, #16
   13e2a:	2400      	movs	r4, #0
   13e2c:	752b      	strb	r3, [r5, #20]
   13e2e:	4622      	mov	r2, r4
   13e30:	f810 1b01 	ldrb.w	r1, [r0], #1
   13e34:	f001 037f 	and.w	r3, r1, #127	; 0x7f
   13e38:	4093      	lsls	r3, r2
   13e3a:	0609      	lsls	r1, r1, #24
   13e3c:	ea44 0403 	orr.w	r4, r4, r3
   13e40:	f102 0207 	add.w	r2, r2, #7
   13e44:	d4f4      	bmi.n	13e30 <_ZL17parse_lsda_headerP15_Unwind_ContextPKhP16lsda_header_info+0x44>
   13e46:	4404      	add	r4, r0
   13e48:	60ec      	str	r4, [r5, #12]
   13e4a:	7803      	ldrb	r3, [r0, #0]
   13e4c:	756b      	strb	r3, [r5, #21]
   13e4e:	2400      	movs	r4, #0
   13e50:	3001      	adds	r0, #1
   13e52:	4622      	mov	r2, r4
   13e54:	f810 1b01 	ldrb.w	r1, [r0], #1
   13e58:	f001 037f 	and.w	r3, r1, #127	; 0x7f
   13e5c:	4093      	lsls	r3, r2
   13e5e:	431c      	orrs	r4, r3
   13e60:	060b      	lsls	r3, r1, #24
   13e62:	f102 0207 	add.w	r2, r2, #7
   13e66:	d4f5      	bmi.n	13e54 <_ZL17parse_lsda_headerP15_Unwind_ContextPKhP16lsda_header_info+0x68>
   13e68:	4404      	add	r4, r0
   13e6a:	612c      	str	r4, [r5, #16]
   13e6c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   13e6e:	6068      	str	r0, [r5, #4]
   13e70:	7823      	ldrb	r3, [r4, #0]
   13e72:	752b      	strb	r3, [r5, #20]
   13e74:	2bff      	cmp	r3, #255	; 0xff
   13e76:	f104 0001 	add.w	r0, r4, #1
   13e7a:	d1d5      	bne.n	13e28 <_ZL17parse_lsda_headerP15_Unwind_ContextPKhP16lsda_header_info+0x3c>
   13e7c:	2300      	movs	r3, #0
   13e7e:	60eb      	str	r3, [r5, #12]
   13e80:	e7e3      	b.n	13e4a <_ZL17parse_lsda_headerP15_Unwind_ContextPKhP16lsda_header_info+0x5e>
   13e82:	e7bb      	b.n	13dfc <_ZL17parse_lsda_headerP15_Unwind_ContextPKhP16lsda_header_info+0x10>

00013e84 <__gxx_personality_v0>:
   13e84:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   13e88:	f000 0403 	and.w	r4, r0, #3
   13e8c:	b097      	sub	sp, #92	; 0x5c
   13e8e:	2300      	movs	r3, #0
   13e90:	2c01      	cmp	r4, #1
   13e92:	4689      	mov	r9, r1
   13e94:	4617      	mov	r7, r2
   13e96:	930a      	str	r3, [sp, #40]	; 0x28
   13e98:	d01e      	beq.n	13ed8 <__gxx_personality_v0+0x54>
   13e9a:	d30e      	bcc.n	13eba <__gxx_personality_v0+0x36>
   13e9c:	2c02      	cmp	r4, #2
   13e9e:	d10a      	bne.n	13eb6 <__gxx_personality_v0+0x32>
   13ea0:	4639      	mov	r1, r7
   13ea2:	4648      	mov	r0, r9
   13ea4:	f009 fb90 	bl	1d5c8 <__gnu_unwind_frame>
   13ea8:	2800      	cmp	r0, #0
   13eaa:	f000 80a5 	beq.w	13ff8 <__gxx_personality_v0+0x174>
   13eae:	2009      	movs	r0, #9
   13eb0:	b017      	add	sp, #92	; 0x5c
   13eb2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   13eb6:	f009 fbb5 	bl	1d624 <abort>
   13eba:	0700      	lsls	r0, r0, #28
   13ebc:	d4f0      	bmi.n	13ea0 <__gxx_personality_v0+0x1c>
   13ebe:	2301      	movs	r3, #1
   13ec0:	9303      	str	r3, [sp, #12]
   13ec2:	aa16      	add	r2, sp, #88	; 0x58
   13ec4:	2300      	movs	r3, #0
   13ec6:	f842 9d2c 	str.w	r9, [r2, #-44]!
   13eca:	4619      	mov	r1, r3
   13ecc:	9200      	str	r2, [sp, #0]
   13ece:	4638      	mov	r0, r7
   13ed0:	220c      	movs	r2, #12
   13ed2:	f008 fe1d 	bl	1cb10 <_Unwind_VRS_Set>
   13ed6:	e00f      	b.n	13ef8 <__gxx_personality_v0+0x74>
   13ed8:	f010 0408 	ands.w	r4, r0, #8
   13edc:	f000 8090 	beq.w	14000 <__gxx_personality_v0+0x17c>
   13ee0:	aa16      	add	r2, sp, #88	; 0x58
   13ee2:	f044 0402 	orr.w	r4, r4, #2
   13ee6:	f842 1d2c 	str.w	r1, [r2, #-44]!
   13eea:	4638      	mov	r0, r7
   13eec:	9200      	str	r2, [sp, #0]
   13eee:	4619      	mov	r1, r3
   13ef0:	220c      	movs	r2, #12
   13ef2:	9403      	str	r4, [sp, #12]
   13ef4:	f008 fe0c 	bl	1cb10 <_Unwind_VRS_Set>
   13ef8:	4638      	mov	r0, r7
   13efa:	f009 fb7f 	bl	1d5fc <_Unwind_GetLanguageSpecificData>
   13efe:	9005      	str	r0, [sp, #20]
   13f00:	2800      	cmp	r0, #0
   13f02:	d0cd      	beq.n	13ea0 <__gxx_personality_v0+0x1c>
   13f04:	ab10      	add	r3, sp, #64	; 0x40
   13f06:	461a      	mov	r2, r3
   13f08:	9905      	ldr	r1, [sp, #20]
   13f0a:	9306      	str	r3, [sp, #24]
   13f0c:	4638      	mov	r0, r7
   13f0e:	f7ff ff6d 	bl	13dec <_ZL17parse_lsda_headerP15_Unwind_ContextPKhP16lsda_header_info>
   13f12:	4639      	mov	r1, r7
   13f14:	4604      	mov	r4, r0
   13f16:	f89d 0054 	ldrb.w	r0, [sp, #84]	; 0x54
   13f1a:	f7ff ff47 	bl	13dac <_ZL21base_of_encoded_valuehP15_Unwind_Context>
   13f1e:	f10d 0b3c 	add.w	fp, sp, #60	; 0x3c
   13f22:	2300      	movs	r3, #0
   13f24:	9012      	str	r0, [sp, #72]	; 0x48
   13f26:	4619      	mov	r1, r3
   13f28:	220f      	movs	r2, #15
   13f2a:	f8cd b000 	str.w	fp, [sp]
   13f2e:	4638      	mov	r0, r7
   13f30:	f008 fdc8 	bl	1cac4 <_Unwind_VRS_Get>
   13f34:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   13f36:	9a14      	ldr	r2, [sp, #80]	; 0x50
   13f38:	f023 0301 	bic.w	r3, r3, #1
   13f3c:	42a2      	cmp	r2, r4
   13f3e:	f103 36ff 	add.w	r6, r3, #4294967295
   13f42:	d975      	bls.n	14030 <__gxx_personality_v0+0x1ac>
   13f44:	f10d 0a34 	add.w	sl, sp, #52	; 0x34
   13f48:	f10d 0838 	add.w	r8, sp, #56	; 0x38
   13f4c:	f89d 5055 	ldrb.w	r5, [sp, #85]	; 0x55
   13f50:	2100      	movs	r1, #0
   13f52:	4628      	mov	r0, r5
   13f54:	f7ff ff2a 	bl	13dac <_ZL21base_of_encoded_valuehP15_Unwind_Context>
   13f58:	4622      	mov	r2, r4
   13f5a:	4653      	mov	r3, sl
   13f5c:	4601      	mov	r1, r0
   13f5e:	4628      	mov	r0, r5
   13f60:	f7ff fec4 	bl	13cec <_ZL28read_encoded_value_with_basehjPKhPj>
   13f64:	f89d 4055 	ldrb.w	r4, [sp, #85]	; 0x55
   13f68:	4605      	mov	r5, r0
   13f6a:	2100      	movs	r1, #0
   13f6c:	4620      	mov	r0, r4
   13f6e:	f7ff ff1d 	bl	13dac <_ZL21base_of_encoded_valuehP15_Unwind_Context>
   13f72:	462a      	mov	r2, r5
   13f74:	4643      	mov	r3, r8
   13f76:	4601      	mov	r1, r0
   13f78:	4620      	mov	r0, r4
   13f7a:	f7ff feb7 	bl	13cec <_ZL28read_encoded_value_with_basehjPKhPj>
   13f7e:	f89d 4055 	ldrb.w	r4, [sp, #85]	; 0x55
   13f82:	4605      	mov	r5, r0
   13f84:	2100      	movs	r1, #0
   13f86:	4620      	mov	r0, r4
   13f88:	f7ff ff10 	bl	13dac <_ZL21base_of_encoded_valuehP15_Unwind_Context>
   13f8c:	462a      	mov	r2, r5
   13f8e:	4601      	mov	r1, r0
   13f90:	465b      	mov	r3, fp
   13f92:	4620      	mov	r0, r4
   13f94:	f7ff feaa 	bl	13cec <_ZL28read_encoded_value_with_basehjPKhPj>
   13f98:	4604      	mov	r4, r0
   13f9a:	2000      	movs	r0, #0
   13f9c:	4602      	mov	r2, r0
   13f9e:	f814 1b01 	ldrb.w	r1, [r4], #1
   13fa2:	f001 037f 	and.w	r3, r1, #127	; 0x7f
   13fa6:	4093      	lsls	r3, r2
   13fa8:	0609      	lsls	r1, r1, #24
   13faa:	ea40 0003 	orr.w	r0, r0, r3
   13fae:	f102 0207 	add.w	r2, r2, #7
   13fb2:	d4f4      	bmi.n	13f9e <__gxx_personality_v0+0x11a>
   13fb4:	9b10      	ldr	r3, [sp, #64]	; 0x40
   13fb6:	9a0d      	ldr	r2, [sp, #52]	; 0x34
   13fb8:	4413      	add	r3, r2
   13fba:	429e      	cmp	r6, r3
   13fbc:	d231      	bcs.n	14022 <__gxx_personality_v0+0x19e>
   13fbe:	9b03      	ldr	r3, [sp, #12]
   13fc0:	07db      	lsls	r3, r3, #31
   13fc2:	d539      	bpl.n	14038 <__gxx_personality_v0+0x1b4>
   13fc4:	2500      	movs	r5, #0
   13fc6:	9504      	str	r5, [sp, #16]
   13fc8:	2300      	movs	r3, #0
   13fca:	4619      	mov	r1, r3
   13fcc:	220d      	movs	r2, #13
   13fce:	f8cd 8000 	str.w	r8, [sp]
   13fd2:	4638      	mov	r0, r7
   13fd4:	9c0a      	ldr	r4, [sp, #40]	; 0x28
   13fd6:	f008 fd75 	bl	1cac4 <_Unwind_VRS_Get>
   13fda:	9a05      	ldr	r2, [sp, #20]
   13fdc:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   13fde:	f8c9 202c 	str.w	r2, [r9, #44]	; 0x2c
   13fe2:	9a04      	ldr	r2, [sp, #16]
   13fe4:	f8c9 4024 	str.w	r4, [r9, #36]	; 0x24
   13fe8:	f8c9 5028 	str.w	r5, [r9, #40]	; 0x28
   13fec:	f8c9 2030 	str.w	r2, [r9, #48]	; 0x30
   13ff0:	f8c9 3020 	str.w	r3, [r9, #32]
   13ff4:	2006      	movs	r0, #6
   13ff6:	e75b      	b.n	13eb0 <__gxx_personality_v0+0x2c>
   13ff8:	2008      	movs	r0, #8
   13ffa:	b017      	add	sp, #92	; 0x5c
   13ffc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   14000:	ab10      	add	r3, sp, #64	; 0x40
   14002:	9300      	str	r3, [sp, #0]
   14004:	9306      	str	r3, [sp, #24]
   14006:	220d      	movs	r2, #13
   14008:	4623      	mov	r3, r4
   1400a:	4621      	mov	r1, r4
   1400c:	4638      	mov	r0, r7
   1400e:	f8d9 5020 	ldr.w	r5, [r9, #32]
   14012:	f008 fd57 	bl	1cac4 <_Unwind_VRS_Get>
   14016:	9b10      	ldr	r3, [sp, #64]	; 0x40
   14018:	429d      	cmp	r5, r3
   1401a:	d012      	beq.n	14042 <__gxx_personality_v0+0x1be>
   1401c:	2302      	movs	r3, #2
   1401e:	9303      	str	r3, [sp, #12]
   14020:	e74f      	b.n	13ec2 <__gxx_personality_v0+0x3e>
   14022:	9a0e      	ldr	r2, [sp, #56]	; 0x38
   14024:	4413      	add	r3, r2
   14026:	429e      	cmp	r6, r3
   14028:	d359      	bcc.n	140de <__gxx_personality_v0+0x25a>
   1402a:	9b14      	ldr	r3, [sp, #80]	; 0x50
   1402c:	42a3      	cmp	r3, r4
   1402e:	d88d      	bhi.n	13f4c <__gxx_personality_v0+0xc8>
   14030:	2500      	movs	r5, #0
   14032:	9504      	str	r5, [sp, #16]
   14034:	2401      	movs	r4, #1
   14036:	e105      	b.n	14244 <__gxx_personality_v0+0x3c0>
   14038:	9b03      	ldr	r3, [sp, #12]
   1403a:	071b      	lsls	r3, r3, #28
   1403c:	d54c      	bpl.n	140d8 <__gxx_personality_v0+0x254>
   1403e:	f7ff fa6b 	bl	13518 <_ZSt9terminatev>
   14042:	aa16      	add	r2, sp, #88	; 0x58
   14044:	4623      	mov	r3, r4
   14046:	f842 9d2c 	str.w	r9, [r2, #-44]!
   1404a:	4621      	mov	r1, r4
   1404c:	9200      	str	r2, [sp, #0]
   1404e:	4638      	mov	r0, r7
   14050:	220c      	movs	r2, #12
   14052:	f008 fd5d 	bl	1cb10 <_Unwind_VRS_Set>
   14056:	f8d9 3030 	ldr.w	r3, [r9, #48]	; 0x30
   1405a:	9304      	str	r3, [sp, #16]
   1405c:	2b00      	cmp	r3, #0
   1405e:	d03b      	beq.n	140d8 <__gxx_personality_v0+0x254>
   14060:	f8d9 5028 	ldr.w	r5, [r9, #40]	; 0x28
   14064:	f8d9 102c 	ldr.w	r1, [r9, #44]	; 0x2c
   14068:	2403      	movs	r4, #3
   1406a:	2d00      	cmp	r5, #0
   1406c:	f2c0 8106 	blt.w	1427c <__gxx_personality_v0+0x3f8>
   14070:	f10d 0a34 	add.w	sl, sp, #52	; 0x34
   14074:	f10d 0838 	add.w	r8, sp, #56	; 0x38
   14078:	a916      	add	r1, sp, #88	; 0x58
   1407a:	2300      	movs	r3, #0
   1407c:	f841 9d28 	str.w	r9, [r1, #-40]!
   14080:	461a      	mov	r2, r3
   14082:	9100      	str	r1, [sp, #0]
   14084:	4638      	mov	r0, r7
   14086:	4619      	mov	r1, r3
   14088:	f008 fd42 	bl	1cb10 <_Unwind_VRS_Set>
   1408c:	2300      	movs	r3, #0
   1408e:	4619      	mov	r1, r3
   14090:	2201      	movs	r2, #1
   14092:	f8cd a000 	str.w	sl, [sp]
   14096:	4638      	mov	r0, r7
   14098:	950d      	str	r5, [sp, #52]	; 0x34
   1409a:	f008 fd39 	bl	1cb10 <_Unwind_VRS_Set>
   1409e:	2300      	movs	r3, #0
   140a0:	4619      	mov	r1, r3
   140a2:	220f      	movs	r2, #15
   140a4:	f8cd 8000 	str.w	r8, [sp]
   140a8:	4638      	mov	r0, r7
   140aa:	f008 fd0b 	bl	1cac4 <_Unwind_VRS_Get>
   140ae:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   140b0:	9a04      	ldr	r2, [sp, #16]
   140b2:	f8cd 8000 	str.w	r8, [sp]
   140b6:	f003 0501 	and.w	r5, r3, #1
   140ba:	2300      	movs	r3, #0
   140bc:	4315      	orrs	r5, r2
   140be:	4638      	mov	r0, r7
   140c0:	4619      	mov	r1, r3
   140c2:	220f      	movs	r2, #15
   140c4:	950e      	str	r5, [sp, #56]	; 0x38
   140c6:	f008 fd23 	bl	1cb10 <_Unwind_VRS_Set>
   140ca:	2c02      	cmp	r4, #2
   140cc:	f000 8080 	beq.w	141d0 <__gxx_personality_v0+0x34c>
   140d0:	2007      	movs	r0, #7
   140d2:	b017      	add	sp, #92	; 0x5c
   140d4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   140d8:	4648      	mov	r0, r9
   140da:	f7ff fcfb 	bl	13ad4 <__cxa_call_terminate>
   140de:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   140e0:	9304      	str	r3, [sp, #16]
   140e2:	461a      	mov	r2, r3
   140e4:	2b00      	cmp	r3, #0
   140e6:	d178      	bne.n	141da <__gxx_personality_v0+0x356>
   140e8:	2800      	cmp	r0, #0
   140ea:	f43f aed9 	beq.w	13ea0 <__gxx_personality_v0+0x1c>
   140ee:	9b14      	ldr	r3, [sp, #80]	; 0x50
   140f0:	9a04      	ldr	r2, [sp, #16]
   140f2:	3801      	subs	r0, #1
   140f4:	4403      	add	r3, r0
   140f6:	2a00      	cmp	r2, #0
   140f8:	f43f aed2 	beq.w	13ea0 <__gxx_personality_v0+0x1c>
   140fc:	2b00      	cmp	r3, #0
   140fe:	d075      	beq.n	141ec <__gxx_personality_v0+0x368>
   14100:	9a03      	ldr	r2, [sp, #12]
   14102:	f012 0208 	ands.w	r2, r2, #8
   14106:	9209      	str	r2, [sp, #36]	; 0x24
   14108:	f000 80f6 	beq.w	142f8 <__gxx_personality_v0+0x474>
   1410c:	2147      	movs	r1, #71	; 0x47
   1410e:	224e      	movs	r2, #78	; 0x4e
   14110:	f889 1000 	strb.w	r1, [r9]
   14114:	f889 2001 	strb.w	r2, [r9, #1]
   14118:	2155      	movs	r1, #85	; 0x55
   1411a:	2243      	movs	r2, #67	; 0x43
   1411c:	f889 1002 	strb.w	r1, [r9, #2]
   14120:	f889 2003 	strb.w	r2, [r9, #3]
   14124:	2146      	movs	r1, #70	; 0x46
   14126:	224f      	movs	r2, #79	; 0x4f
   14128:	f889 1004 	strb.w	r1, [r9, #4]
   1412c:	f889 2005 	strb.w	r2, [r9, #5]
   14130:	2152      	movs	r1, #82	; 0x52
   14132:	2200      	movs	r2, #0
   14134:	f889 1006 	strb.w	r1, [r9, #6]
   14138:	f889 2007 	strb.w	r2, [r9, #7]
   1413c:	2200      	movs	r2, #0
   1413e:	9208      	str	r2, [sp, #32]
   14140:	9707      	str	r7, [sp, #28]
   14142:	2500      	movs	r5, #0
   14144:	4629      	mov	r1, r5
   14146:	e000      	b.n	1414a <__gxx_personality_v0+0x2c6>
   14148:	4623      	mov	r3, r4
   1414a:	461c      	mov	r4, r3
   1414c:	f814 0b01 	ldrb.w	r0, [r4], #1
   14150:	f000 027f 	and.w	r2, r0, #127	; 0x7f
   14154:	408a      	lsls	r2, r1
   14156:	0606      	lsls	r6, r0, #24
   14158:	ea45 0502 	orr.w	r5, r5, r2
   1415c:	f101 0107 	add.w	r1, r1, #7
   14160:	d4f2      	bmi.n	14148 <__gxx_personality_v0+0x2c4>
   14162:	291f      	cmp	r1, #31
   14164:	d805      	bhi.n	14172 <__gxx_personality_v0+0x2ee>
   14166:	0642      	lsls	r2, r0, #25
   14168:	d503      	bpl.n	14172 <__gxx_personality_v0+0x2ee>
   1416a:	2201      	movs	r2, #1
   1416c:	408a      	lsls	r2, r1
   1416e:	4252      	negs	r2, r2
   14170:	4315      	orrs	r5, r2
   14172:	2600      	movs	r6, #0
   14174:	4631      	mov	r1, r6
   14176:	f813 0f01 	ldrb.w	r0, [r3, #1]!
   1417a:	f000 027f 	and.w	r2, r0, #127	; 0x7f
   1417e:	408a      	lsls	r2, r1
   14180:	0607      	lsls	r7, r0, #24
   14182:	ea46 0602 	orr.w	r6, r6, r2
   14186:	f101 0107 	add.w	r1, r1, #7
   1418a:	d4f4      	bmi.n	14176 <__gxx_personality_v0+0x2f2>
   1418c:	291f      	cmp	r1, #31
   1418e:	d805      	bhi.n	1419c <__gxx_personality_v0+0x318>
   14190:	0640      	lsls	r0, r0, #25
   14192:	d503      	bpl.n	1419c <__gxx_personality_v0+0x318>
   14194:	2301      	movs	r3, #1
   14196:	408b      	lsls	r3, r1
   14198:	425b      	negs	r3, r3
   1419a:	431e      	orrs	r6, r3
   1419c:	2d00      	cmp	r5, #0
   1419e:	d05c      	beq.n	1425a <__gxx_personality_v0+0x3d6>
   141a0:	dd5e      	ble.n	14260 <__gxx_personality_v0+0x3dc>
   141a2:	f89d 0054 	ldrb.w	r0, [sp, #84]	; 0x54
   141a6:	28ff      	cmp	r0, #255	; 0xff
   141a8:	f000 80a4 	beq.w	142f4 <__gxx_personality_v0+0x470>
   141ac:	f000 0307 	and.w	r3, r0, #7
   141b0:	2b04      	cmp	r3, #4
   141b2:	f63f ae80 	bhi.w	13eb6 <__gxx_personality_v0+0x32>
   141b6:	a201      	add	r2, pc, #4	; (adr r2, 141bc <__gxx_personality_v0+0x338>)
   141b8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   141bc:	00014227 	.word	0x00014227
   141c0:	00013eb7 	.word	0x00013eb7
   141c4:	0001422d 	.word	0x0001422d
   141c8:	00014227 	.word	0x00014227
   141cc:	00014205 	.word	0x00014205
   141d0:	4648      	mov	r0, r9
   141d2:	f7ff fbf7 	bl	139c4 <__cxa_begin_cleanup>
   141d6:	2007      	movs	r0, #7
   141d8:	e66a      	b.n	13eb0 <__gxx_personality_v0+0x2c>
   141da:	9b11      	ldr	r3, [sp, #68]	; 0x44
   141dc:	441a      	add	r2, r3
   141de:	9204      	str	r2, [sp, #16]
   141e0:	2800      	cmp	r0, #0
   141e2:	d184      	bne.n	140ee <__gxx_personality_v0+0x26a>
   141e4:	9b04      	ldr	r3, [sp, #16]
   141e6:	2b00      	cmp	r3, #0
   141e8:	f43f ae5a 	beq.w	13ea0 <__gxx_personality_v0+0x1c>
   141ec:	9b03      	ldr	r3, [sp, #12]
   141ee:	f013 0301 	ands.w	r3, r3, #1
   141f2:	f47f ae55 	bne.w	13ea0 <__gxx_personality_v0+0x1c>
   141f6:	9a03      	ldr	r2, [sp, #12]
   141f8:	f012 0508 	ands.w	r5, r2, #8
   141fc:	f040 8097 	bne.w	1432e <__gxx_personality_v0+0x4aa>
   14200:	2402      	movs	r4, #2
   14202:	e739      	b.n	14078 <__gxx_personality_v0+0x1f4>
   14204:	00eb      	lsls	r3, r5, #3
   14206:	425b      	negs	r3, r3
   14208:	9a13      	ldr	r2, [sp, #76]	; 0x4c
   1420a:	9912      	ldr	r1, [sp, #72]	; 0x48
   1420c:	441a      	add	r2, r3
   1420e:	4643      	mov	r3, r8
   14210:	f7ff fd6c 	bl	13cec <_ZL28read_encoded_value_with_basehjPKhPj>
   14214:	990e      	ldr	r1, [sp, #56]	; 0x38
   14216:	b199      	cbz	r1, 14240 <__gxx_personality_v0+0x3bc>
   14218:	f1b9 0f00 	cmp.w	r9, #0
   1421c:	d109      	bne.n	14232 <__gxx_personality_v0+0x3ae>
   1421e:	2e00      	cmp	r6, #0
   14220:	d077      	beq.n	14312 <__gxx_personality_v0+0x48e>
   14222:	19a3      	adds	r3, r4, r6
   14224:	e78d      	b.n	14142 <__gxx_personality_v0+0x2be>
   14226:	00ab      	lsls	r3, r5, #2
   14228:	425b      	negs	r3, r3
   1422a:	e7ed      	b.n	14208 <__gxx_personality_v0+0x384>
   1422c:	006b      	lsls	r3, r5, #1
   1422e:	425b      	negs	r3, r3
   14230:	e7ea      	b.n	14208 <__gxx_personality_v0+0x384>
   14232:	ab0a      	add	r3, sp, #40	; 0x28
   14234:	2200      	movs	r2, #0
   14236:	4648      	mov	r0, r9
   14238:	f7ff fb68 	bl	1390c <__cxa_type_match>
   1423c:	2800      	cmp	r0, #0
   1423e:	d0ee      	beq.n	1421e <__gxx_personality_v0+0x39a>
   14240:	9f07      	ldr	r7, [sp, #28]
   14242:	2403      	movs	r4, #3
   14244:	9b03      	ldr	r3, [sp, #12]
   14246:	07da      	lsls	r2, r3, #31
   14248:	d460      	bmi.n	1430c <__gxx_personality_v0+0x488>
   1424a:	9b03      	ldr	r3, [sp, #12]
   1424c:	0719      	lsls	r1, r3, #28
   1424e:	d466      	bmi.n	1431e <__gxx_personality_v0+0x49a>
   14250:	2c01      	cmp	r4, #1
   14252:	f43f af41 	beq.w	140d8 <__gxx_personality_v0+0x254>
   14256:	9905      	ldr	r1, [sp, #20]
   14258:	e707      	b.n	1406a <__gxx_personality_v0+0x1e6>
   1425a:	2301      	movs	r3, #1
   1425c:	9308      	str	r3, [sp, #32]
   1425e:	e7de      	b.n	1421e <__gxx_personality_v0+0x39a>
   14260:	f1b9 0f00 	cmp.w	r9, #0
   14264:	d001      	beq.n	1426a <__gxx_personality_v0+0x3e6>
   14266:	9b09      	ldr	r3, [sp, #36]	; 0x24
   14268:	b35b      	cbz	r3, 142c2 <__gxx_personality_v0+0x43e>
   1426a:	1c6b      	adds	r3, r5, #1
   1426c:	ebc3 7383 	rsb	r3, r3, r3, lsl #30
   14270:	9a13      	ldr	r2, [sp, #76]	; 0x4c
   14272:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   14276:	2b00      	cmp	r3, #0
   14278:	d1d1      	bne.n	1421e <__gxx_personality_v0+0x39a>
   1427a:	e7e1      	b.n	14240 <__gxx_personality_v0+0x3bc>
   1427c:	9a06      	ldr	r2, [sp, #24]
   1427e:	4638      	mov	r0, r7
   14280:	f7ff fdb4 	bl	13dec <_ZL17parse_lsda_headerP15_Unwind_ContextPKhP16lsda_header_info>
   14284:	4639      	mov	r1, r7
   14286:	f89d 0054 	ldrb.w	r0, [sp, #84]	; 0x54
   1428a:	f7ff fd8f 	bl	13dac <_ZL21base_of_encoded_valuehP15_Unwind_Context>
   1428e:	00aa      	lsls	r2, r5, #2
   14290:	f082 0203 	eor.w	r2, r2, #3
   14294:	43d2      	mvns	r2, r2
   14296:	9e13      	ldr	r6, [sp, #76]	; 0x4c
   14298:	9012      	str	r0, [sp, #72]	; 0x48
   1429a:	58b3      	ldr	r3, [r6, r2]
   1429c:	4416      	add	r6, r2
   1429e:	b133      	cbz	r3, 142ae <__gxx_personality_v0+0x42a>
   142a0:	4632      	mov	r2, r6
   142a2:	2300      	movs	r3, #0
   142a4:	f852 1f04 	ldr.w	r1, [r2, #4]!
   142a8:	3301      	adds	r3, #1
   142aa:	2900      	cmp	r1, #0
   142ac:	d1fa      	bne.n	142a4 <__gxx_personality_v0+0x420>
   142ae:	2204      	movs	r2, #4
   142b0:	f8c9 3028 	str.w	r3, [r9, #40]	; 0x28
   142b4:	f8c9 002c 	str.w	r0, [r9, #44]	; 0x2c
   142b8:	f8c9 6034 	str.w	r6, [r9, #52]	; 0x34
   142bc:	f8c9 2030 	str.w	r2, [r9, #48]	; 0x30
   142c0:	e6d6      	b.n	14070 <__gxx_personality_v0+0x1ec>
   142c2:	1c6f      	adds	r7, r5, #1
   142c4:	ebc7 7387 	rsb	r3, r7, r7, lsl #30
   142c8:	9f13      	ldr	r7, [sp, #76]	; 0x4c
   142ca:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   142cc:	f857 1023 	ldr.w	r1, [r7, r3, lsl #2]
   142d0:	920f      	str	r2, [sp, #60]	; 0x3c
   142d2:	eb07 0783 	add.w	r7, r7, r3, lsl #2
   142d6:	b921      	cbnz	r1, 142e2 <__gxx_personality_v0+0x45e>
   142d8:	e7b2      	b.n	14240 <__gxx_personality_v0+0x3bc>
   142da:	f857 1f04 	ldr.w	r1, [r7, #4]!
   142de:	2900      	cmp	r1, #0
   142e0:	d0ae      	beq.n	14240 <__gxx_personality_v0+0x3bc>
   142e2:	4439      	add	r1, r7
   142e4:	465b      	mov	r3, fp
   142e6:	2200      	movs	r2, #0
   142e8:	4648      	mov	r0, r9
   142ea:	f7ff fb0f 	bl	1390c <__cxa_type_match>
   142ee:	2800      	cmp	r0, #0
   142f0:	d0f3      	beq.n	142da <__gxx_personality_v0+0x456>
   142f2:	e794      	b.n	1421e <__gxx_personality_v0+0x39a>
   142f4:	2300      	movs	r3, #0
   142f6:	e787      	b.n	14208 <__gxx_personality_v0+0x384>
   142f8:	f899 2007 	ldrb.w	r2, [r9, #7]
   142fc:	2a01      	cmp	r2, #1
   142fe:	bf0c      	ite	eq
   14300:	f859 2c20 	ldreq.w	r2, [r9, #-32]
   14304:	f109 0258 	addne.w	r2, r9, #88	; 0x58
   14308:	920a      	str	r2, [sp, #40]	; 0x28
   1430a:	e717      	b.n	1413c <__gxx_personality_v0+0x2b8>
   1430c:	f10d 0838 	add.w	r8, sp, #56	; 0x38
   14310:	e65a      	b.n	13fc8 <__gxx_personality_v0+0x144>
   14312:	9b08      	ldr	r3, [sp, #32]
   14314:	9f07      	ldr	r7, [sp, #28]
   14316:	2b00      	cmp	r3, #0
   14318:	f47f af68 	bne.w	141ec <__gxx_personality_v0+0x368>
   1431c:	e5c0      	b.n	13ea0 <__gxx_personality_v0+0x1c>
   1431e:	2c01      	cmp	r4, #1
   14320:	f43f ae8d 	beq.w	1403e <__gxx_personality_v0+0x1ba>
   14324:	2d00      	cmp	r5, #0
   14326:	f6bf aea3 	bge.w	14070 <__gxx_personality_v0+0x1ec>
   1432a:	f7ff f903 	bl	13534 <_ZSt10unexpectedv>
   1432e:	461d      	mov	r5, r3
   14330:	2402      	movs	r4, #2
   14332:	e6a1      	b.n	14078 <__gxx_personality_v0+0x1f4>
   14334:	f7ff fc4e 	bl	13bd4 <__cxa_begin_catch>
   14338:	e681      	b.n	1403e <__gxx_personality_v0+0x1ba>
   1433a:	bf00      	nop

0001433c <_ZN9__gnu_cxx27__verbose_terminate_handlerEv>:
   1433c:	b570      	push	{r4, r5, r6, lr}
   1433e:	4b3c      	ldr	r3, [pc, #240]	; (14430 <_ZN9__gnu_cxx27__verbose_terminate_handlerEv+0xf4>)
   14340:	781a      	ldrb	r2, [r3, #0]
   14342:	b082      	sub	sp, #8
   14344:	2a00      	cmp	r2, #0
   14346:	d135      	bne.n	143b4 <_ZN9__gnu_cxx27__verbose_terminate_handlerEv+0x78>
   14348:	2401      	movs	r4, #1
   1434a:	701c      	strb	r4, [r3, #0]
   1434c:	f006 fbd2 	bl	1aaf4 <__cxa_current_exception_type>
   14350:	2800      	cmp	r0, #0
   14352:	d05b      	beq.n	1440c <_ZN9__gnu_cxx27__verbose_terminate_handlerEv+0xd0>
   14354:	6844      	ldr	r4, [r0, #4]
   14356:	4d37      	ldr	r5, [pc, #220]	; (14434 <_ZN9__gnu_cxx27__verbose_terminate_handlerEv+0xf8>)
   14358:	7823      	ldrb	r3, [r4, #0]
   1435a:	2b2a      	cmp	r3, #42	; 0x2a
   1435c:	ab02      	add	r3, sp, #8
   1435e:	f04f 32ff 	mov.w	r2, #4294967295
   14362:	bf08      	it	eq
   14364:	3401      	addeq	r4, #1
   14366:	f843 2d04 	str.w	r2, [r3, #-4]!
   1436a:	2200      	movs	r2, #0
   1436c:	4611      	mov	r1, r2
   1436e:	4620      	mov	r0, r4
   14370:	f006 fb52 	bl	1aa18 <__cxa_demangle>
   14374:	682b      	ldr	r3, [r5, #0]
   14376:	4606      	mov	r6, r0
   14378:	68db      	ldr	r3, [r3, #12]
   1437a:	482f      	ldr	r0, [pc, #188]	; (14438 <_ZN9__gnu_cxx27__verbose_terminate_handlerEv+0xfc>)
   1437c:	2230      	movs	r2, #48	; 0x30
   1437e:	2101      	movs	r1, #1
   14380:	f009 fba4 	bl	1dacc <fwrite>
   14384:	9b01      	ldr	r3, [sp, #4]
   14386:	b17b      	cbz	r3, 143a8 <_ZN9__gnu_cxx27__verbose_terminate_handlerEv+0x6c>
   14388:	682b      	ldr	r3, [r5, #0]
   1438a:	4620      	mov	r0, r4
   1438c:	68d9      	ldr	r1, [r3, #12]
   1438e:	f009 f9c7 	bl	1d720 <fputs>
   14392:	682b      	ldr	r3, [r5, #0]
   14394:	4829      	ldr	r0, [pc, #164]	; (1443c <_ZN9__gnu_cxx27__verbose_terminate_handlerEv+0x100>)
   14396:	68db      	ldr	r3, [r3, #12]
   14398:	2202      	movs	r2, #2
   1439a:	2101      	movs	r1, #1
   1439c:	f009 fb96 	bl	1dacc <fwrite>
   143a0:	9b01      	ldr	r3, [sp, #4]
   143a2:	b18b      	cbz	r3, 143c8 <_ZN9__gnu_cxx27__verbose_terminate_handlerEv+0x8c>
   143a4:	f7ff f940 	bl	13628 <__cxa_rethrow>
   143a8:	682b      	ldr	r3, [r5, #0]
   143aa:	4630      	mov	r0, r6
   143ac:	68d9      	ldr	r1, [r3, #12]
   143ae:	f009 f9b7 	bl	1d720 <fputs>
   143b2:	e7ee      	b.n	14392 <_ZN9__gnu_cxx27__verbose_terminate_handlerEv+0x56>
   143b4:	4b1f      	ldr	r3, [pc, #124]	; (14434 <_ZN9__gnu_cxx27__verbose_terminate_handlerEv+0xf8>)
   143b6:	4822      	ldr	r0, [pc, #136]	; (14440 <_ZN9__gnu_cxx27__verbose_terminate_handlerEv+0x104>)
   143b8:	681b      	ldr	r3, [r3, #0]
   143ba:	221d      	movs	r2, #29
   143bc:	68db      	ldr	r3, [r3, #12]
   143be:	2101      	movs	r1, #1
   143c0:	f009 fb84 	bl	1dacc <fwrite>
   143c4:	f009 f92e 	bl	1d624 <abort>
   143c8:	4630      	mov	r0, r6
   143ca:	f009 fbc7 	bl	1db5c <free>
   143ce:	e7e9      	b.n	143a4 <_ZN9__gnu_cxx27__verbose_terminate_handlerEv+0x68>
   143d0:	2901      	cmp	r1, #1
   143d2:	460c      	mov	r4, r1
   143d4:	d127      	bne.n	14426 <_ZN9__gnu_cxx27__verbose_terminate_handlerEv+0xea>
   143d6:	f7ff fbfd 	bl	13bd4 <__cxa_begin_catch>
   143da:	6803      	ldr	r3, [r0, #0]
   143dc:	689b      	ldr	r3, [r3, #8]
   143de:	4798      	blx	r3
   143e0:	682b      	ldr	r3, [r5, #0]
   143e2:	4606      	mov	r6, r0
   143e4:	68db      	ldr	r3, [r3, #12]
   143e6:	4817      	ldr	r0, [pc, #92]	; (14444 <_ZN9__gnu_cxx27__verbose_terminate_handlerEv+0x108>)
   143e8:	4621      	mov	r1, r4
   143ea:	220b      	movs	r2, #11
   143ec:	f009 fb6e 	bl	1dacc <fwrite>
   143f0:	682b      	ldr	r3, [r5, #0]
   143f2:	4630      	mov	r0, r6
   143f4:	68d9      	ldr	r1, [r3, #12]
   143f6:	f009 f993 	bl	1d720 <fputs>
   143fa:	682b      	ldr	r3, [r5, #0]
   143fc:	200a      	movs	r0, #10
   143fe:	68d9      	ldr	r1, [r3, #12]
   14400:	f009 f91e 	bl	1d640 <fputc>
   14404:	f7ff fc24 	bl	13c50 <__cxa_end_catch>
   14408:	f009 f90c 	bl	1d624 <abort>
   1440c:	4b09      	ldr	r3, [pc, #36]	; (14434 <_ZN9__gnu_cxx27__verbose_terminate_handlerEv+0xf8>)
   1440e:	480e      	ldr	r0, [pc, #56]	; (14448 <_ZN9__gnu_cxx27__verbose_terminate_handlerEv+0x10c>)
   14410:	681b      	ldr	r3, [r3, #0]
   14412:	4621      	mov	r1, r4
   14414:	68db      	ldr	r3, [r3, #12]
   14416:	222d      	movs	r2, #45	; 0x2d
   14418:	f009 fb58 	bl	1dacc <fwrite>
   1441c:	e7f4      	b.n	14408 <_ZN9__gnu_cxx27__verbose_terminate_handlerEv+0xcc>
   1441e:	f7ff fc17 	bl	13c50 <__cxa_end_catch>
   14422:	f7ff fa6d 	bl	13900 <__cxa_end_cleanup>
   14426:	f7ff fbd5 	bl	13bd4 <__cxa_begin_catch>
   1442a:	f7ff fc11 	bl	13c50 <__cxa_end_catch>
   1442e:	e7eb      	b.n	14408 <_ZN9__gnu_cxx27__verbose_terminate_handlerEv+0xcc>
   14430:	20002290 	.word	0x20002290
   14434:	200000f8 	.word	0x200000f8
   14438:	00023ae4 	.word	0x00023ae4
   1443c:	00023b18 	.word	0x00023b18
   14440:	00023ac4 	.word	0x00023ac4
   14444:	00023b4c 	.word	0x00023b4c
   14448:	00023b1c 	.word	0x00023b1c

0001444c <d_make_comp>:
   1444c:	b470      	push	{r4, r5, r6}
   1444e:	1e4c      	subs	r4, r1, #1
   14450:	2c4c      	cmp	r4, #76	; 0x4c
   14452:	d82d      	bhi.n	144b0 <d_make_comp+0x64>
   14454:	e8df f004 	tbb	[pc, r4]
   14458:	3c3c3c3c 	.word	0x3c3c3c3c
   1445c:	2c2c2c2c 	.word	0x2c2c2c2c
   14460:	273c2727 	.word	0x273c2727
   14464:	27272727 	.word	0x27272727
   14468:	27272727 	.word	0x27272727
   1446c:	2c272727 	.word	0x2c272727
   14470:	28282828 	.word	0x28282828
   14474:	28282828 	.word	0x28282828
   14478:	2727273c 	.word	0x2727273c
   1447c:	272c2727 	.word	0x272c2727
   14480:	2c3c3e28 	.word	0x2c3c3e28
   14484:	3e28283c 	.word	0x3e28283c
   14488:	27272c2c 	.word	0x27272c2c
   1448c:	3c3c3c27 	.word	0x3c3c3c27
   14490:	3c273c3c 	.word	0x3c273c3c
   14494:	2c3c273c 	.word	0x2c3c273c
   14498:	2727272c 	.word	0x2727272c
   1449c:	272c2c2c 	.word	0x272c2c2c
   144a0:	283c2727 	.word	0x283c2727
   144a4:	3c          	.byte	0x3c
   144a5:	00          	.byte	0x00
   144a6:	b11a      	cbz	r2, 144b0 <d_make_comp+0x64>
   144a8:	6944      	ldr	r4, [r0, #20]
   144aa:	6985      	ldr	r5, [r0, #24]
   144ac:	42ac      	cmp	r4, r5
   144ae:	db02      	blt.n	144b6 <d_make_comp+0x6a>
   144b0:	2000      	movs	r0, #0
   144b2:	bc70      	pop	{r4, r5, r6}
   144b4:	4770      	bx	lr
   144b6:	eb04 0544 	add.w	r5, r4, r4, lsl #1
   144ba:	6906      	ldr	r6, [r0, #16]
   144bc:	00ad      	lsls	r5, r5, #2
   144be:	3401      	adds	r4, #1
   144c0:	6144      	str	r4, [r0, #20]
   144c2:	1970      	adds	r0, r6, r5
   144c4:	d0f5      	beq.n	144b2 <d_make_comp+0x66>
   144c6:	5571      	strb	r1, [r6, r5]
   144c8:	6042      	str	r2, [r0, #4]
   144ca:	6083      	str	r3, [r0, #8]
   144cc:	bc70      	pop	{r4, r5, r6}
   144ce:	4770      	bx	lr
   144d0:	2a00      	cmp	r2, #0
   144d2:	d0ed      	beq.n	144b0 <d_make_comp+0x64>
   144d4:	2b00      	cmp	r3, #0
   144d6:	d0eb      	beq.n	144b0 <d_make_comp+0x64>
   144d8:	6944      	ldr	r4, [r0, #20]
   144da:	6985      	ldr	r5, [r0, #24]
   144dc:	42ac      	cmp	r4, r5
   144de:	dae7      	bge.n	144b0 <d_make_comp+0x64>
   144e0:	e7e9      	b.n	144b6 <d_make_comp+0x6a>
   144e2:	bf00      	nop

000144e4 <d_cv_qualifiers>:
   144e4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   144e8:	68c3      	ldr	r3, [r0, #12]
   144ea:	f1b2 0a00 	subs.w	sl, r2, #0
   144ee:	4604      	mov	r4, r0
   144f0:	460e      	mov	r6, r1
   144f2:	781a      	ldrb	r2, [r3, #0]
   144f4:	bf15      	itete	ne
   144f6:	f04f 091e 	movne.w	r9, #30
   144fa:	f04f 091b 	moveq.w	r9, #27
   144fe:	f04f 081d 	movne.w	r8, #29
   14502:	f04f 081a 	moveq.w	r8, #26
   14506:	bf14      	ite	ne
   14508:	271c      	movne	r7, #28
   1450a:	2719      	moveq	r7, #25
   1450c:	460d      	mov	r5, r1
   1450e:	e018      	b.n	14542 <d_cv_qualifiers+0x5e>
   14510:	2a56      	cmp	r2, #86	; 0x56
   14512:	d01f      	beq.n	14554 <d_cv_qualifiers+0x70>
   14514:	2a4b      	cmp	r2, #75	; 0x4b
   14516:	d024      	beq.n	14562 <d_cv_qualifiers+0x7e>
   14518:	2a44      	cmp	r2, #68	; 0x44
   1451a:	d12d      	bne.n	14578 <d_cv_qualifiers+0x94>
   1451c:	785a      	ldrb	r2, [r3, #1]
   1451e:	2a78      	cmp	r2, #120	; 0x78
   14520:	d127      	bne.n	14572 <d_cv_qualifiers+0x8e>
   14522:	6b22      	ldr	r2, [r4, #48]	; 0x30
   14524:	3302      	adds	r3, #2
   14526:	3211      	adds	r2, #17
   14528:	60e3      	str	r3, [r4, #12]
   1452a:	6322      	str	r2, [r4, #48]	; 0x30
   1452c:	214c      	movs	r1, #76	; 0x4c
   1452e:	2300      	movs	r3, #0
   14530:	461a      	mov	r2, r3
   14532:	4620      	mov	r0, r4
   14534:	f7ff ff8a 	bl	1444c <d_make_comp>
   14538:	6028      	str	r0, [r5, #0]
   1453a:	b1c8      	cbz	r0, 14570 <d_cv_qualifiers+0x8c>
   1453c:	68e3      	ldr	r3, [r4, #12]
   1453e:	781a      	ldrb	r2, [r3, #0]
   14540:	1d05      	adds	r5, r0, #4
   14542:	2a72      	cmp	r2, #114	; 0x72
   14544:	d1e4      	bne.n	14510 <d_cv_qualifiers+0x2c>
   14546:	6b22      	ldr	r2, [r4, #48]	; 0x30
   14548:	3301      	adds	r3, #1
   1454a:	3209      	adds	r2, #9
   1454c:	60e3      	str	r3, [r4, #12]
   1454e:	6322      	str	r2, [r4, #48]	; 0x30
   14550:	4639      	mov	r1, r7
   14552:	e7ec      	b.n	1452e <d_cv_qualifiers+0x4a>
   14554:	6b22      	ldr	r2, [r4, #48]	; 0x30
   14556:	3301      	adds	r3, #1
   14558:	3209      	adds	r2, #9
   1455a:	60e3      	str	r3, [r4, #12]
   1455c:	6322      	str	r2, [r4, #48]	; 0x30
   1455e:	4641      	mov	r1, r8
   14560:	e7e5      	b.n	1452e <d_cv_qualifiers+0x4a>
   14562:	6b22      	ldr	r2, [r4, #48]	; 0x30
   14564:	3301      	adds	r3, #1
   14566:	3206      	adds	r2, #6
   14568:	60e3      	str	r3, [r4, #12]
   1456a:	6322      	str	r2, [r4, #48]	; 0x30
   1456c:	4649      	mov	r1, r9
   1456e:	e7de      	b.n	1452e <d_cv_qualifiers+0x4a>
   14570:	4605      	mov	r5, r0
   14572:	4628      	mov	r0, r5
   14574:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   14578:	f1ba 0f00 	cmp.w	sl, #0
   1457c:	d1f9      	bne.n	14572 <d_cv_qualifiers+0x8e>
   1457e:	2a46      	cmp	r2, #70	; 0x46
   14580:	d1f7      	bne.n	14572 <d_cv_qualifiers+0x8e>
   14582:	42b5      	cmp	r5, r6
   14584:	d0f5      	beq.n	14572 <d_cv_qualifiers+0x8e>
   14586:	201d      	movs	r0, #29
   14588:	211e      	movs	r1, #30
   1458a:	221c      	movs	r2, #28
   1458c:	e007      	b.n	1459e <d_cv_qualifiers+0xba>
   1458e:	2b1b      	cmp	r3, #27
   14590:	d00b      	beq.n	145aa <d_cv_qualifiers+0xc6>
   14592:	2b19      	cmp	r3, #25
   14594:	d100      	bne.n	14598 <d_cv_qualifiers+0xb4>
   14596:	7032      	strb	r2, [r6, #0]
   14598:	3604      	adds	r6, #4
   1459a:	42b5      	cmp	r5, r6
   1459c:	d0e9      	beq.n	14572 <d_cv_qualifiers+0x8e>
   1459e:	6836      	ldr	r6, [r6, #0]
   145a0:	7833      	ldrb	r3, [r6, #0]
   145a2:	2b1a      	cmp	r3, #26
   145a4:	d1f3      	bne.n	1458e <d_cv_qualifiers+0xaa>
   145a6:	7030      	strb	r0, [r6, #0]
   145a8:	e7f6      	b.n	14598 <d_cv_qualifiers+0xb4>
   145aa:	7031      	strb	r1, [r6, #0]
   145ac:	e7f4      	b.n	14598 <d_cv_qualifiers+0xb4>
   145ae:	bf00      	nop

000145b0 <d_ref_qualifier>:
   145b0:	b410      	push	{r4}
   145b2:	68c3      	ldr	r3, [r0, #12]
   145b4:	781c      	ldrb	r4, [r3, #0]
   145b6:	2c52      	cmp	r4, #82	; 0x52
   145b8:	460a      	mov	r2, r1
   145ba:	d00f      	beq.n	145dc <d_ref_qualifier+0x2c>
   145bc:	2c4f      	cmp	r4, #79	; 0x4f
   145be:	d003      	beq.n	145c8 <d_ref_qualifier+0x18>
   145c0:	4608      	mov	r0, r1
   145c2:	f85d 4b04 	ldr.w	r4, [sp], #4
   145c6:	4770      	bx	lr
   145c8:	6b01      	ldr	r1, [r0, #48]	; 0x30
   145ca:	3103      	adds	r1, #3
   145cc:	6301      	str	r1, [r0, #48]	; 0x30
   145ce:	2120      	movs	r1, #32
   145d0:	3301      	adds	r3, #1
   145d2:	60c3      	str	r3, [r0, #12]
   145d4:	f85d 4b04 	ldr.w	r4, [sp], #4
   145d8:	2300      	movs	r3, #0
   145da:	e737      	b.n	1444c <d_make_comp>
   145dc:	6b01      	ldr	r1, [r0, #48]	; 0x30
   145de:	3102      	adds	r1, #2
   145e0:	6301      	str	r1, [r0, #48]	; 0x30
   145e2:	211f      	movs	r1, #31
   145e4:	e7f4      	b.n	145d0 <d_ref_qualifier+0x20>
   145e6:	bf00      	nop

000145e8 <d_count_templates_scopes>:
   145e8:	2a00      	cmp	r2, #0
   145ea:	d04d      	beq.n	14688 <d_count_templates_scopes+0xa0>
   145ec:	b570      	push	{r4, r5, r6, lr}
   145ee:	4605      	mov	r5, r0
   145f0:	460e      	mov	r6, r1
   145f2:	4614      	mov	r4, r2
   145f4:	7823      	ldrb	r3, [r4, #0]
   145f6:	3b01      	subs	r3, #1
   145f8:	2b4c      	cmp	r3, #76	; 0x4c
   145fa:	d82b      	bhi.n	14654 <d_count_templates_scopes+0x6c>
   145fc:	e8df f003 	tbb	[pc, r3]
   14600:	3f363636 	.word	0x3f363636
   14604:	27272a2a 	.word	0x27272a2a
   14608:	36363636 	.word	0x36363636
   1460c:	36363636 	.word	0x36363636
   14610:	36363636 	.word	0x36363636
   14614:	2a363636 	.word	0x2a363636
   14618:	36363636 	.word	0x36363636
   1461c:	36363636 	.word	0x36363636
   14620:	2f2f3636 	.word	0x2f2f3636
   14624:	362a3636 	.word	0x362a3636
   14628:	2b363636 	.word	0x2b363636
   1462c:	36363636 	.word	0x36363636
   14630:	3636272a 	.word	0x3636272a
   14634:	36363636 	.word	0x36363636
   14638:	36363636 	.word	0x36363636
   1463c:	2a363636 	.word	0x2a363636
   14640:	2b2b362a 	.word	0x2b2b362a
   14644:	362a2b2b 	.word	0x362a2b2b
   14648:	36363636 	.word	0x36363636
   1464c:	36          	.byte	0x36
   1464d:	00          	.byte	0x00
   1464e:	68a4      	ldr	r4, [r4, #8]
   14650:	2c00      	cmp	r4, #0
   14652:	d1cf      	bne.n	145f4 <d_count_templates_scopes+0xc>
   14654:	bd70      	pop	{r4, r5, r6, pc}
   14656:	6864      	ldr	r4, [r4, #4]
   14658:	2c00      	cmp	r4, #0
   1465a:	d1cb      	bne.n	145f4 <d_count_templates_scopes+0xc>
   1465c:	e7fa      	b.n	14654 <d_count_templates_scopes+0x6c>
   1465e:	6862      	ldr	r2, [r4, #4]
   14660:	7813      	ldrb	r3, [r2, #0]
   14662:	2b05      	cmp	r3, #5
   14664:	d103      	bne.n	1466e <d_count_templates_scopes+0x86>
   14666:	6833      	ldr	r3, [r6, #0]
   14668:	3301      	adds	r3, #1
   1466a:	6033      	str	r3, [r6, #0]
   1466c:	6862      	ldr	r2, [r4, #4]
   1466e:	4631      	mov	r1, r6
   14670:	4628      	mov	r0, r5
   14672:	f7ff ffb9 	bl	145e8 <d_count_templates_scopes>
   14676:	68a4      	ldr	r4, [r4, #8]
   14678:	2c00      	cmp	r4, #0
   1467a:	d1bb      	bne.n	145f4 <d_count_templates_scopes+0xc>
   1467c:	e7ea      	b.n	14654 <d_count_templates_scopes+0x6c>
   1467e:	682b      	ldr	r3, [r5, #0]
   14680:	3301      	adds	r3, #1
   14682:	602b      	str	r3, [r5, #0]
   14684:	6862      	ldr	r2, [r4, #4]
   14686:	e7f2      	b.n	1466e <d_count_templates_scopes+0x86>
   14688:	4770      	bx	lr
   1468a:	bf00      	nop

0001468c <d_append_buffer>:
   1468c:	b37a      	cbz	r2, 146ee <d_append_buffer+0x62>
   1468e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   14692:	460d      	mov	r5, r1
   14694:	4604      	mov	r4, r0
   14696:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
   1469a:	18af      	adds	r7, r5, r2
   1469c:	f04f 0800 	mov.w	r8, #0
   146a0:	e009      	b.n	146b6 <d_append_buffer+0x2a>
   146a2:	460b      	mov	r3, r1
   146a4:	42bd      	cmp	r5, r7
   146a6:	f101 0101 	add.w	r1, r1, #1
   146aa:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
   146ae:	54e6      	strb	r6, [r4, r3]
   146b0:	f884 6104 	strb.w	r6, [r4, #260]	; 0x104
   146b4:	d019      	beq.n	146ea <d_append_buffer+0x5e>
   146b6:	29ff      	cmp	r1, #255	; 0xff
   146b8:	f815 6b01 	ldrb.w	r6, [r5], #1
   146bc:	d1f1      	bne.n	146a2 <d_append_buffer+0x16>
   146be:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   146c2:	f884 80ff 	strb.w	r8, [r4, #255]	; 0xff
   146c6:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
   146ca:	4620      	mov	r0, r4
   146cc:	4798      	blx	r3
   146ce:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   146d2:	3301      	adds	r3, #1
   146d4:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
   146d8:	2300      	movs	r3, #0
   146da:	2101      	movs	r1, #1
   146dc:	42bd      	cmp	r5, r7
   146de:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
   146e2:	54e6      	strb	r6, [r4, r3]
   146e4:	f884 6104 	strb.w	r6, [r4, #260]	; 0x104
   146e8:	d1e5      	bne.n	146b6 <d_append_buffer+0x2a>
   146ea:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   146ee:	4770      	bx	lr

000146f0 <d_number.isra.0>:
   146f0:	b470      	push	{r4, r5, r6}
   146f2:	6802      	ldr	r2, [r0, #0]
   146f4:	7811      	ldrb	r1, [r2, #0]
   146f6:	296e      	cmp	r1, #110	; 0x6e
   146f8:	d018      	beq.n	1472c <d_number.isra.0+0x3c>
   146fa:	f1a1 0330 	sub.w	r3, r1, #48	; 0x30
   146fe:	2b09      	cmp	r3, #9
   14700:	d81e      	bhi.n	14740 <d_number.isra.0+0x50>
   14702:	2600      	movs	r6, #0
   14704:	2300      	movs	r3, #0
   14706:	3201      	adds	r2, #1
   14708:	eb03 0383 	add.w	r3, r3, r3, lsl #2
   1470c:	6002      	str	r2, [r0, #0]
   1470e:	eb01 0443 	add.w	r4, r1, r3, lsl #1
   14712:	7811      	ldrb	r1, [r2, #0]
   14714:	f1a1 0530 	sub.w	r5, r1, #48	; 0x30
   14718:	2d09      	cmp	r5, #9
   1471a:	f1a4 0330 	sub.w	r3, r4, #48	; 0x30
   1471e:	d9f2      	bls.n	14706 <d_number.isra.0+0x16>
   14720:	b10e      	cbz	r6, 14726 <d_number.isra.0+0x36>
   14722:	f1c4 0330 	rsb	r3, r4, #48	; 0x30
   14726:	4618      	mov	r0, r3
   14728:	bc70      	pop	{r4, r5, r6}
   1472a:	4770      	bx	lr
   1472c:	1c53      	adds	r3, r2, #1
   1472e:	6003      	str	r3, [r0, #0]
   14730:	7851      	ldrb	r1, [r2, #1]
   14732:	f1a1 0230 	sub.w	r2, r1, #48	; 0x30
   14736:	2a09      	cmp	r2, #9
   14738:	d802      	bhi.n	14740 <d_number.isra.0+0x50>
   1473a:	461a      	mov	r2, r3
   1473c:	2601      	movs	r6, #1
   1473e:	e7e1      	b.n	14704 <d_number.isra.0+0x14>
   14740:	2300      	movs	r3, #0
   14742:	e7f0      	b.n	14726 <d_number.isra.0+0x36>

00014744 <d_number_component>:
   14744:	6943      	ldr	r3, [r0, #20]
   14746:	6982      	ldr	r2, [r0, #24]
   14748:	4293      	cmp	r3, r2
   1474a:	b510      	push	{r4, lr}
   1474c:	da0f      	bge.n	1476e <d_number_component+0x2a>
   1474e:	eb03 0243 	add.w	r2, r3, r3, lsl #1
   14752:	6901      	ldr	r1, [r0, #16]
   14754:	0092      	lsls	r2, r2, #2
   14756:	3301      	adds	r3, #1
   14758:	188c      	adds	r4, r1, r2
   1475a:	6143      	str	r3, [r0, #20]
   1475c:	d005      	beq.n	1476a <d_number_component+0x26>
   1475e:	2341      	movs	r3, #65	; 0x41
   14760:	300c      	adds	r0, #12
   14762:	548b      	strb	r3, [r1, r2]
   14764:	f7ff ffc4 	bl	146f0 <d_number.isra.0>
   14768:	6060      	str	r0, [r4, #4]
   1476a:	4620      	mov	r0, r4
   1476c:	bd10      	pop	{r4, pc}
   1476e:	2400      	movs	r4, #0
   14770:	4620      	mov	r0, r4
   14772:	bd10      	pop	{r4, pc}

00014774 <d_compact_number>:
   14774:	b510      	push	{r4, lr}
   14776:	68c3      	ldr	r3, [r0, #12]
   14778:	781a      	ldrb	r2, [r3, #0]
   1477a:	2a5f      	cmp	r2, #95	; 0x5f
   1477c:	4604      	mov	r4, r0
   1477e:	d00d      	beq.n	1479c <d_compact_number+0x28>
   14780:	2a6e      	cmp	r2, #110	; 0x6e
   14782:	d00f      	beq.n	147a4 <d_compact_number+0x30>
   14784:	300c      	adds	r0, #12
   14786:	f7ff ffb3 	bl	146f0 <d_number.isra.0>
   1478a:	3001      	adds	r0, #1
   1478c:	d40a      	bmi.n	147a4 <d_compact_number+0x30>
   1478e:	68e3      	ldr	r3, [r4, #12]
   14790:	781a      	ldrb	r2, [r3, #0]
   14792:	2a5f      	cmp	r2, #95	; 0x5f
   14794:	d106      	bne.n	147a4 <d_compact_number+0x30>
   14796:	3301      	adds	r3, #1
   14798:	60e3      	str	r3, [r4, #12]
   1479a:	bd10      	pop	{r4, pc}
   1479c:	3301      	adds	r3, #1
   1479e:	2000      	movs	r0, #0
   147a0:	60e3      	str	r3, [r4, #12]
   147a2:	bd10      	pop	{r4, pc}
   147a4:	f04f 30ff 	mov.w	r0, #4294967295
   147a8:	bd10      	pop	{r4, pc}
   147aa:	bf00      	nop

000147ac <d_template_param>:
   147ac:	b538      	push	{r3, r4, r5, lr}
   147ae:	68c3      	ldr	r3, [r0, #12]
   147b0:	781a      	ldrb	r2, [r3, #0]
   147b2:	2a54      	cmp	r2, #84	; 0x54
   147b4:	d001      	beq.n	147ba <d_template_param+0xe>
   147b6:	2000      	movs	r0, #0
   147b8:	bd38      	pop	{r3, r4, r5, pc}
   147ba:	3301      	adds	r3, #1
   147bc:	60c3      	str	r3, [r0, #12]
   147be:	4604      	mov	r4, r0
   147c0:	f7ff ffd8 	bl	14774 <d_compact_number>
   147c4:	1e05      	subs	r5, r0, #0
   147c6:	dbf6      	blt.n	147b6 <d_template_param+0xa>
   147c8:	6aa2      	ldr	r2, [r4, #40]	; 0x28
   147ca:	6963      	ldr	r3, [r4, #20]
   147cc:	69a1      	ldr	r1, [r4, #24]
   147ce:	3201      	adds	r2, #1
   147d0:	428b      	cmp	r3, r1
   147d2:	62a2      	str	r2, [r4, #40]	; 0x28
   147d4:	daef      	bge.n	147b6 <d_template_param+0xa>
   147d6:	eb03 0243 	add.w	r2, r3, r3, lsl #1
   147da:	6921      	ldr	r1, [r4, #16]
   147dc:	0092      	lsls	r2, r2, #2
   147de:	3301      	adds	r3, #1
   147e0:	1888      	adds	r0, r1, r2
   147e2:	6163      	str	r3, [r4, #20]
   147e4:	d002      	beq.n	147ec <d_template_param+0x40>
   147e6:	2305      	movs	r3, #5
   147e8:	548b      	strb	r3, [r1, r2]
   147ea:	6045      	str	r5, [r0, #4]
   147ec:	bd38      	pop	{r3, r4, r5, pc}
   147ee:	bf00      	nop

000147f0 <d_source_name>:
   147f0:	b570      	push	{r4, r5, r6, lr}
   147f2:	4604      	mov	r4, r0
   147f4:	300c      	adds	r0, #12
   147f6:	f7ff ff7b 	bl	146f0 <d_number.isra.0>
   147fa:	1e06      	subs	r6, r0, #0
   147fc:	dd4d      	ble.n	1489a <d_source_name+0xaa>
   147fe:	68e5      	ldr	r5, [r4, #12]
   14800:	6863      	ldr	r3, [r4, #4]
   14802:	1b5b      	subs	r3, r3, r5
   14804:	429e      	cmp	r6, r3
   14806:	dc2b      	bgt.n	14860 <d_source_name+0x70>
   14808:	68a2      	ldr	r2, [r4, #8]
   1480a:	19ab      	adds	r3, r5, r6
   1480c:	0752      	lsls	r2, r2, #29
   1480e:	60e3      	str	r3, [r4, #12]
   14810:	d504      	bpl.n	1481c <d_source_name+0x2c>
   14812:	5daa      	ldrb	r2, [r5, r6]
   14814:	2a24      	cmp	r2, #36	; 0x24
   14816:	bf04      	itt	eq
   14818:	3301      	addeq	r3, #1
   1481a:	60e3      	streq	r3, [r4, #12]
   1481c:	2e09      	cmp	r6, #9
   1481e:	dd0c      	ble.n	1483a <d_source_name+0x4a>
   14820:	2208      	movs	r2, #8
   14822:	491f      	ldr	r1, [pc, #124]	; (148a0 <d_source_name+0xb0>)
   14824:	4628      	mov	r0, r5
   14826:	f009 fcbb 	bl	1e1a0 <memcmp>
   1482a:	b930      	cbnz	r0, 1483a <d_source_name+0x4a>
   1482c:	7a2b      	ldrb	r3, [r5, #8]
   1482e:	2b2e      	cmp	r3, #46	; 0x2e
   14830:	d019      	beq.n	14866 <d_source_name+0x76>
   14832:	2b5f      	cmp	r3, #95	; 0x5f
   14834:	d017      	beq.n	14866 <d_source_name+0x76>
   14836:	2b24      	cmp	r3, #36	; 0x24
   14838:	d015      	beq.n	14866 <d_source_name+0x76>
   1483a:	6963      	ldr	r3, [r4, #20]
   1483c:	69a2      	ldr	r2, [r4, #24]
   1483e:	4293      	cmp	r3, r2
   14840:	da0e      	bge.n	14860 <d_source_name+0x70>
   14842:	eb03 0243 	add.w	r2, r3, r3, lsl #1
   14846:	6921      	ldr	r1, [r4, #16]
   14848:	0092      	lsls	r2, r2, #2
   1484a:	3301      	adds	r3, #1
   1484c:	1888      	adds	r0, r1, r2
   1484e:	6163      	str	r3, [r4, #20]
   14850:	d006      	beq.n	14860 <d_source_name+0x70>
   14852:	b12d      	cbz	r5, 14860 <d_source_name+0x70>
   14854:	2300      	movs	r3, #0
   14856:	548b      	strb	r3, [r1, r2]
   14858:	6045      	str	r5, [r0, #4]
   1485a:	6086      	str	r6, [r0, #8]
   1485c:	62e0      	str	r0, [r4, #44]	; 0x2c
   1485e:	bd70      	pop	{r4, r5, r6, pc}
   14860:	2000      	movs	r0, #0
   14862:	62e0      	str	r0, [r4, #44]	; 0x2c
   14864:	bd70      	pop	{r4, r5, r6, pc}
   14866:	7a6b      	ldrb	r3, [r5, #9]
   14868:	2b4e      	cmp	r3, #78	; 0x4e
   1486a:	d1e6      	bne.n	1483a <d_source_name+0x4a>
   1486c:	6b23      	ldr	r3, [r4, #48]	; 0x30
   1486e:	6962      	ldr	r2, [r4, #20]
   14870:	69a1      	ldr	r1, [r4, #24]
   14872:	3316      	adds	r3, #22
   14874:	1b9e      	subs	r6, r3, r6
   14876:	428a      	cmp	r2, r1
   14878:	6326      	str	r6, [r4, #48]	; 0x30
   1487a:	daf1      	bge.n	14860 <d_source_name+0x70>
   1487c:	eb02 0342 	add.w	r3, r2, r2, lsl #1
   14880:	6921      	ldr	r1, [r4, #16]
   14882:	009b      	lsls	r3, r3, #2
   14884:	3201      	adds	r2, #1
   14886:	18c8      	adds	r0, r1, r3
   14888:	6162      	str	r2, [r4, #20]
   1488a:	d0ea      	beq.n	14862 <d_source_name+0x72>
   1488c:	2500      	movs	r5, #0
   1488e:	54cd      	strb	r5, [r1, r3]
   14890:	4a04      	ldr	r2, [pc, #16]	; (148a4 <d_source_name+0xb4>)
   14892:	6042      	str	r2, [r0, #4]
   14894:	2315      	movs	r3, #21
   14896:	6083      	str	r3, [r0, #8]
   14898:	e7e3      	b.n	14862 <d_source_name+0x72>
   1489a:	2000      	movs	r0, #0
   1489c:	bd70      	pop	{r4, r5, r6, pc}
   1489e:	bf00      	nop
   148a0:	000242f0 	.word	0x000242f0
   148a4:	000242fc 	.word	0x000242fc

000148a8 <d_abi_tags>:
   148a8:	b570      	push	{r4, r5, r6, lr}
   148aa:	68c3      	ldr	r3, [r0, #12]
   148ac:	6ac6      	ldr	r6, [r0, #44]	; 0x2c
   148ae:	781a      	ldrb	r2, [r3, #0]
   148b0:	2a42      	cmp	r2, #66	; 0x42
   148b2:	4604      	mov	r4, r0
   148b4:	460d      	mov	r5, r1
   148b6:	d10f      	bne.n	148d8 <d_abi_tags+0x30>
   148b8:	3301      	adds	r3, #1
   148ba:	60e3      	str	r3, [r4, #12]
   148bc:	4620      	mov	r0, r4
   148be:	f7ff ff97 	bl	147f0 <d_source_name>
   148c2:	462a      	mov	r2, r5
   148c4:	4603      	mov	r3, r0
   148c6:	214b      	movs	r1, #75	; 0x4b
   148c8:	4620      	mov	r0, r4
   148ca:	f7ff fdbf 	bl	1444c <d_make_comp>
   148ce:	68e3      	ldr	r3, [r4, #12]
   148d0:	781a      	ldrb	r2, [r3, #0]
   148d2:	2a42      	cmp	r2, #66	; 0x42
   148d4:	4605      	mov	r5, r0
   148d6:	d0ef      	beq.n	148b8 <d_abi_tags+0x10>
   148d8:	62e6      	str	r6, [r4, #44]	; 0x2c
   148da:	4628      	mov	r0, r5
   148dc:	bd70      	pop	{r4, r5, r6, pc}
   148de:	bf00      	nop

000148e0 <d_substitution>:
   148e0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   148e4:	4605      	mov	r5, r0
   148e6:	68c0      	ldr	r0, [r0, #12]
   148e8:	7803      	ldrb	r3, [r0, #0]
   148ea:	2b53      	cmp	r3, #83	; 0x53
   148ec:	d002      	beq.n	148f4 <d_substitution+0x14>
   148ee:	2000      	movs	r0, #0
   148f0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   148f4:	1c43      	adds	r3, r0, #1
   148f6:	60eb      	str	r3, [r5, #12]
   148f8:	7842      	ldrb	r2, [r0, #1]
   148fa:	b1a2      	cbz	r2, 14926 <d_substitution+0x46>
   148fc:	1c83      	adds	r3, r0, #2
   148fe:	60eb      	str	r3, [r5, #12]
   14900:	7842      	ldrb	r2, [r0, #1]
   14902:	2a5f      	cmp	r2, #95	; 0x5f
   14904:	d15a      	bne.n	149bc <d_substitution+0xdc>
   14906:	2300      	movs	r3, #0
   14908:	6a2a      	ldr	r2, [r5, #32]
   1490a:	4293      	cmp	r3, r2
   1490c:	d2ef      	bcs.n	148ee <d_substitution+0xe>
   1490e:	6aaa      	ldr	r2, [r5, #40]	; 0x28
   14910:	69e9      	ldr	r1, [r5, #28]
   14912:	3201      	adds	r2, #1
   14914:	62aa      	str	r2, [r5, #40]	; 0x28
   14916:	f851 0023 	ldr.w	r0, [r1, r3, lsl #2]
   1491a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   1491e:	f1a2 0341 	sub.w	r3, r2, #65	; 0x41
   14922:	2b19      	cmp	r3, #25
   14924:	d94f      	bls.n	149c6 <d_substitution+0xe6>
   14926:	68ab      	ldr	r3, [r5, #8]
   14928:	f003 0308 	and.w	r3, r3, #8
   1492c:	2b00      	cmp	r3, #0
   1492e:	bf14      	ite	ne
   14930:	2401      	movne	r4, #1
   14932:	2400      	moveq	r4, #0
   14934:	d101      	bne.n	1493a <d_substitution+0x5a>
   14936:	2900      	cmp	r1, #0
   14938:	d169      	bne.n	14a0e <d_substitution+0x12e>
   1493a:	4b46      	ldr	r3, [pc, #280]	; (14a54 <d_substitution+0x174>)
   1493c:	2174      	movs	r1, #116	; 0x74
   1493e:	f103 00c4 	add.w	r0, r3, #196	; 0xc4
   14942:	e003      	b.n	1494c <d_substitution+0x6c>
   14944:	331c      	adds	r3, #28
   14946:	4283      	cmp	r3, r0
   14948:	d2d1      	bcs.n	148ee <d_substitution+0xe>
   1494a:	7819      	ldrb	r1, [r3, #0]
   1494c:	428a      	cmp	r2, r1
   1494e:	d1f9      	bne.n	14944 <d_substitution+0x64>
   14950:	695e      	ldr	r6, [r3, #20]
   14952:	2e00      	cmp	r6, #0
   14954:	d07b      	beq.n	14a4e <d_substitution+0x16e>
   14956:	696a      	ldr	r2, [r5, #20]
   14958:	69a9      	ldr	r1, [r5, #24]
   1495a:	428a      	cmp	r2, r1
   1495c:	da63      	bge.n	14a26 <d_substitution+0x146>
   1495e:	eb02 0742 	add.w	r7, r2, r2, lsl #1
   14962:	f8d5 e010 	ldr.w	lr, [r5, #16]
   14966:	f8d3 8018 	ldr.w	r8, [r3, #24]
   1496a:	00bf      	lsls	r7, r7, #2
   1496c:	3201      	adds	r2, #1
   1496e:	eb1e 0007 	adds.w	r0, lr, r7
   14972:	616a      	str	r2, [r5, #20]
   14974:	d006      	beq.n	14984 <d_substitution+0xa4>
   14976:	f04f 0c18 	mov.w	ip, #24
   1497a:	f80e c007 	strb.w	ip, [lr, r7]
   1497e:	6046      	str	r6, [r0, #4]
   14980:	f8c0 8008 	str.w	r8, [r0, #8]
   14984:	62e8      	str	r0, [r5, #44]	; 0x2c
   14986:	2c00      	cmp	r4, #0
   14988:	d04a      	beq.n	14a20 <d_substitution+0x140>
   1498a:	68de      	ldr	r6, [r3, #12]
   1498c:	691c      	ldr	r4, [r3, #16]
   1498e:	6b2b      	ldr	r3, [r5, #48]	; 0x30
   14990:	4291      	cmp	r1, r2
   14992:	4423      	add	r3, r4
   14994:	632b      	str	r3, [r5, #48]	; 0x30
   14996:	dd41      	ble.n	14a1c <d_substitution+0x13c>
   14998:	eb02 0342 	add.w	r3, r2, r2, lsl #1
   1499c:	6929      	ldr	r1, [r5, #16]
   1499e:	009b      	lsls	r3, r3, #2
   149a0:	3201      	adds	r2, #1
   149a2:	18c8      	adds	r0, r1, r3
   149a4:	616a      	str	r2, [r5, #20]
   149a6:	d003      	beq.n	149b0 <d_substitution+0xd0>
   149a8:	2218      	movs	r2, #24
   149aa:	54ca      	strb	r2, [r1, r3]
   149ac:	6046      	str	r6, [r0, #4]
   149ae:	6084      	str	r4, [r0, #8]
   149b0:	68eb      	ldr	r3, [r5, #12]
   149b2:	781b      	ldrb	r3, [r3, #0]
   149b4:	2b42      	cmp	r3, #66	; 0x42
   149b6:	d038      	beq.n	14a2a <d_substitution+0x14a>
   149b8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   149bc:	f1a2 0430 	sub.w	r4, r2, #48	; 0x30
   149c0:	b2e3      	uxtb	r3, r4
   149c2:	2b09      	cmp	r3, #9
   149c4:	d8ab      	bhi.n	1491e <d_substitution+0x3e>
   149c6:	2100      	movs	r1, #0
   149c8:	e00d      	b.n	149e6 <d_substitution+0x106>
   149ca:	3b30      	subs	r3, #48	; 0x30
   149cc:	4299      	cmp	r1, r3
   149ce:	d88e      	bhi.n	148ee <d_substitution+0xe>
   149d0:	68e9      	ldr	r1, [r5, #12]
   149d2:	780a      	ldrb	r2, [r1, #0]
   149d4:	1c48      	adds	r0, r1, #1
   149d6:	b11a      	cbz	r2, 149e0 <d_substitution+0x100>
   149d8:	60e8      	str	r0, [r5, #12]
   149da:	780a      	ldrb	r2, [r1, #0]
   149dc:	2a5f      	cmp	r2, #95	; 0x5f
   149de:	d014      	beq.n	14a0a <d_substitution+0x12a>
   149e0:	f1a2 0430 	sub.w	r4, r2, #48	; 0x30
   149e4:	4619      	mov	r1, r3
   149e6:	b2e4      	uxtb	r4, r4
   149e8:	eb01 03c1 	add.w	r3, r1, r1, lsl #3
   149ec:	2c09      	cmp	r4, #9
   149ee:	f1a2 0041 	sub.w	r0, r2, #65	; 0x41
   149f2:	eb02 0383 	add.w	r3, r2, r3, lsl #2
   149f6:	d9e8      	bls.n	149ca <d_substitution+0xea>
   149f8:	2819      	cmp	r0, #25
   149fa:	f63f af78 	bhi.w	148ee <d_substitution+0xe>
   149fe:	eb01 03c1 	add.w	r3, r1, r1, lsl #3
   14a02:	eb02 0383 	add.w	r3, r2, r3, lsl #2
   14a06:	3b37      	subs	r3, #55	; 0x37
   14a08:	e7e0      	b.n	149cc <d_substitution+0xec>
   14a0a:	3301      	adds	r3, #1
   14a0c:	e77c      	b.n	14908 <d_substitution+0x28>
   14a0e:	68eb      	ldr	r3, [r5, #12]
   14a10:	781b      	ldrb	r3, [r3, #0]
   14a12:	3b43      	subs	r3, #67	; 0x43
   14a14:	2b01      	cmp	r3, #1
   14a16:	bf98      	it	ls
   14a18:	2401      	movls	r4, #1
   14a1a:	e78e      	b.n	1493a <d_substitution+0x5a>
   14a1c:	2000      	movs	r0, #0
   14a1e:	e7c7      	b.n	149b0 <d_substitution+0xd0>
   14a20:	685e      	ldr	r6, [r3, #4]
   14a22:	689c      	ldr	r4, [r3, #8]
   14a24:	e7b3      	b.n	1498e <d_substitution+0xae>
   14a26:	2000      	movs	r0, #0
   14a28:	e7ac      	b.n	14984 <d_substitution+0xa4>
   14a2a:	4601      	mov	r1, r0
   14a2c:	4628      	mov	r0, r5
   14a2e:	f7ff ff3b 	bl	148a8 <d_abi_tags>
   14a32:	2800      	cmp	r0, #0
   14a34:	f43f af5b 	beq.w	148ee <d_substitution+0xe>
   14a38:	6a2b      	ldr	r3, [r5, #32]
   14a3a:	6a6a      	ldr	r2, [r5, #36]	; 0x24
   14a3c:	4293      	cmp	r3, r2
   14a3e:	dabb      	bge.n	149b8 <d_substitution+0xd8>
   14a40:	69e9      	ldr	r1, [r5, #28]
   14a42:	1c5a      	adds	r2, r3, #1
   14a44:	f841 0023 	str.w	r0, [r1, r3, lsl #2]
   14a48:	622a      	str	r2, [r5, #32]
   14a4a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   14a4e:	69a9      	ldr	r1, [r5, #24]
   14a50:	696a      	ldr	r2, [r5, #20]
   14a52:	e798      	b.n	14986 <d_substitution+0xa6>
   14a54:	00023b58 	.word	0x00023b58

00014a58 <d_call_offset>:
   14a58:	b538      	push	{r3, r4, r5, lr}
   14a5a:	4604      	mov	r4, r0
   14a5c:	b929      	cbnz	r1, 14a6a <d_call_offset+0x12>
   14a5e:	68c3      	ldr	r3, [r0, #12]
   14a60:	781a      	ldrb	r2, [r3, #0]
   14a62:	b132      	cbz	r2, 14a72 <d_call_offset+0x1a>
   14a64:	1c5a      	adds	r2, r3, #1
   14a66:	60c2      	str	r2, [r0, #12]
   14a68:	7819      	ldrb	r1, [r3, #0]
   14a6a:	2968      	cmp	r1, #104	; 0x68
   14a6c:	d019      	beq.n	14aa2 <d_call_offset+0x4a>
   14a6e:	2976      	cmp	r1, #118	; 0x76
   14a70:	d001      	beq.n	14a76 <d_call_offset+0x1e>
   14a72:	2000      	movs	r0, #0
   14a74:	bd38      	pop	{r3, r4, r5, pc}
   14a76:	f104 050c 	add.w	r5, r4, #12
   14a7a:	4628      	mov	r0, r5
   14a7c:	f7ff fe38 	bl	146f0 <d_number.isra.0>
   14a80:	68e3      	ldr	r3, [r4, #12]
   14a82:	781a      	ldrb	r2, [r3, #0]
   14a84:	2a5f      	cmp	r2, #95	; 0x5f
   14a86:	d1f4      	bne.n	14a72 <d_call_offset+0x1a>
   14a88:	3301      	adds	r3, #1
   14a8a:	60e3      	str	r3, [r4, #12]
   14a8c:	4628      	mov	r0, r5
   14a8e:	f7ff fe2f 	bl	146f0 <d_number.isra.0>
   14a92:	68e3      	ldr	r3, [r4, #12]
   14a94:	781a      	ldrb	r2, [r3, #0]
   14a96:	2a5f      	cmp	r2, #95	; 0x5f
   14a98:	d1eb      	bne.n	14a72 <d_call_offset+0x1a>
   14a9a:	3301      	adds	r3, #1
   14a9c:	60e3      	str	r3, [r4, #12]
   14a9e:	2001      	movs	r0, #1
   14aa0:	bd38      	pop	{r3, r4, r5, pc}
   14aa2:	f104 000c 	add.w	r0, r4, #12
   14aa6:	f7ff fe23 	bl	146f0 <d_number.isra.0>
   14aaa:	e7f2      	b.n	14a92 <d_call_offset+0x3a>

00014aac <d_lookup_template_argument.isra.6>:
   14aac:	f8d0 3110 	ldr.w	r3, [r0, #272]	; 0x110
   14ab0:	b19b      	cbz	r3, 14ada <d_lookup_template_argument.isra.6+0x2e>
   14ab2:	680a      	ldr	r2, [r1, #0]
   14ab4:	685b      	ldr	r3, [r3, #4]
   14ab6:	2a00      	cmp	r2, #0
   14ab8:	689b      	ldr	r3, [r3, #8]
   14aba:	db09      	blt.n	14ad0 <d_lookup_template_argument.isra.6+0x24>
   14abc:	b923      	cbnz	r3, 14ac8 <d_lookup_template_argument.isra.6+0x1c>
   14abe:	e007      	b.n	14ad0 <d_lookup_template_argument.isra.6+0x24>
   14ac0:	b142      	cbz	r2, 14ad4 <d_lookup_template_argument.isra.6+0x28>
   14ac2:	689b      	ldr	r3, [r3, #8]
   14ac4:	3a01      	subs	r2, #1
   14ac6:	b11b      	cbz	r3, 14ad0 <d_lookup_template_argument.isra.6+0x24>
   14ac8:	7819      	ldrb	r1, [r3, #0]
   14aca:	292f      	cmp	r1, #47	; 0x2f
   14acc:	d0f8      	beq.n	14ac0 <d_lookup_template_argument.isra.6+0x14>
   14ace:	2300      	movs	r3, #0
   14ad0:	4618      	mov	r0, r3
   14ad2:	4770      	bx	lr
   14ad4:	685b      	ldr	r3, [r3, #4]
   14ad6:	4618      	mov	r0, r3
   14ad8:	4770      	bx	lr
   14ada:	2201      	movs	r2, #1
   14adc:	f8c0 2118 	str.w	r2, [r0, #280]	; 0x118
   14ae0:	e7f6      	b.n	14ad0 <d_lookup_template_argument.isra.6+0x24>
   14ae2:	bf00      	nop

00014ae4 <d_find_pack>:
   14ae4:	2900      	cmp	r1, #0
   14ae6:	d041      	beq.n	14b6c <d_find_pack+0x88>
   14ae8:	b538      	push	{r3, r4, r5, lr}
   14aea:	4605      	mov	r5, r0
   14aec:	460c      	mov	r4, r1
   14aee:	7823      	ldrb	r3, [r4, #0]
   14af0:	2b4b      	cmp	r3, #75	; 0x4b
   14af2:	d827      	bhi.n	14b44 <d_find_pack+0x60>
   14af4:	e8df f003 	tbb	[pc, r3]
   14af8:	2626262e 	.word	0x2626262e
   14afc:	2b2e3026 	.word	0x2b2e3026
   14b00:	2626262b 	.word	0x2626262b
   14b04:	26262626 	.word	0x26262626
   14b08:	26262626 	.word	0x26262626
   14b0c:	26262626 	.word	0x26262626
   14b10:	2626262e 	.word	0x2626262e
   14b14:	26262626 	.word	0x26262626
   14b18:	26262626 	.word	0x26262626
   14b1c:	2e262626 	.word	0x2e262626
   14b20:	26262626 	.word	0x26262626
   14b24:	2626262e 	.word	0x2626262e
   14b28:	262b2e26 	.word	0x262b2e26
   14b2c:	26262626 	.word	0x26262626
   14b30:	26262626 	.word	0x26262626
   14b34:	26262626 	.word	0x26262626
   14b38:	26262e2e 	.word	0x26262e2e
   14b3c:	2e2e2e26 	.word	0x2e2e2e26
   14b40:	2e2e2626 	.word	0x2e2e2626
   14b44:	6861      	ldr	r1, [r4, #4]
   14b46:	4628      	mov	r0, r5
   14b48:	f7ff ffcc 	bl	14ae4 <d_find_pack>
   14b4c:	b918      	cbnz	r0, 14b56 <d_find_pack+0x72>
   14b4e:	68a4      	ldr	r4, [r4, #8]
   14b50:	2c00      	cmp	r4, #0
   14b52:	d1cc      	bne.n	14aee <d_find_pack+0xa>
   14b54:	2000      	movs	r0, #0
   14b56:	bd38      	pop	{r3, r4, r5, pc}
   14b58:	1d21      	adds	r1, r4, #4
   14b5a:	4628      	mov	r0, r5
   14b5c:	f7ff ffa6 	bl	14aac <d_lookup_template_argument.isra.6>
   14b60:	2800      	cmp	r0, #0
   14b62:	d0f7      	beq.n	14b54 <d_find_pack+0x70>
   14b64:	7803      	ldrb	r3, [r0, #0]
   14b66:	2b2f      	cmp	r3, #47	; 0x2f
   14b68:	d1f4      	bne.n	14b54 <d_find_pack+0x70>
   14b6a:	bd38      	pop	{r3, r4, r5, pc}
   14b6c:	2000      	movs	r0, #0
   14b6e:	4770      	bx	lr

00014b70 <d_growable_string_callback_adapter>:
   14b70:	b5f0      	push	{r4, r5, r6, r7, lr}
   14b72:	4615      	mov	r5, r2
   14b74:	6852      	ldr	r2, [r2, #4]
   14b76:	68ac      	ldr	r4, [r5, #8]
   14b78:	1c4b      	adds	r3, r1, #1
   14b7a:	4413      	add	r3, r2
   14b7c:	42a3      	cmp	r3, r4
   14b7e:	b083      	sub	sp, #12
   14b80:	460e      	mov	r6, r1
   14b82:	4607      	mov	r7, r0
   14b84:	d813      	bhi.n	14bae <d_growable_string_callback_adapter+0x3e>
   14b86:	68ec      	ldr	r4, [r5, #12]
   14b88:	b10c      	cbz	r4, 14b8e <d_growable_string_callback_adapter+0x1e>
   14b8a:	b003      	add	sp, #12
   14b8c:	bdf0      	pop	{r4, r5, r6, r7, pc}
   14b8e:	e895 0009 	ldmia.w	r5, {r0, r3}
   14b92:	4632      	mov	r2, r6
   14b94:	4639      	mov	r1, r7
   14b96:	4418      	add	r0, r3
   14b98:	f009 fb32 	bl	1e200 <memcpy>
   14b9c:	682b      	ldr	r3, [r5, #0]
   14b9e:	686a      	ldr	r2, [r5, #4]
   14ba0:	4433      	add	r3, r6
   14ba2:	549c      	strb	r4, [r3, r2]
   14ba4:	686b      	ldr	r3, [r5, #4]
   14ba6:	441e      	add	r6, r3
   14ba8:	606e      	str	r6, [r5, #4]
   14baa:	b003      	add	sp, #12
   14bac:	bdf0      	pop	{r4, r5, r6, r7, pc}
   14bae:	68ea      	ldr	r2, [r5, #12]
   14bb0:	2a00      	cmp	r2, #0
   14bb2:	d1ea      	bne.n	14b8a <d_growable_string_callback_adapter+0x1a>
   14bb4:	b91c      	cbnz	r4, 14bbe <d_growable_string_callback_adapter+0x4e>
   14bb6:	2b02      	cmp	r3, #2
   14bb8:	f04f 0402 	mov.w	r4, #2
   14bbc:	d902      	bls.n	14bc4 <d_growable_string_callback_adapter+0x54>
   14bbe:	0064      	lsls	r4, r4, #1
   14bc0:	42a3      	cmp	r3, r4
   14bc2:	d8fc      	bhi.n	14bbe <d_growable_string_callback_adapter+0x4e>
   14bc4:	4621      	mov	r1, r4
   14bc6:	6828      	ldr	r0, [r5, #0]
   14bc8:	f009 fcaa 	bl	1e520 <realloc>
   14bcc:	b110      	cbz	r0, 14bd4 <d_growable_string_callback_adapter+0x64>
   14bce:	6028      	str	r0, [r5, #0]
   14bd0:	60ac      	str	r4, [r5, #8]
   14bd2:	e7d8      	b.n	14b86 <d_growable_string_callback_adapter+0x16>
   14bd4:	9001      	str	r0, [sp, #4]
   14bd6:	6828      	ldr	r0, [r5, #0]
   14bd8:	f008 ffc0 	bl	1db5c <free>
   14bdc:	9b01      	ldr	r3, [sp, #4]
   14bde:	602b      	str	r3, [r5, #0]
   14be0:	2201      	movs	r2, #1
   14be2:	606b      	str	r3, [r5, #4]
   14be4:	60ab      	str	r3, [r5, #8]
   14be6:	60ea      	str	r2, [r5, #12]
   14be8:	e7cf      	b.n	14b8a <d_growable_string_callback_adapter+0x1a>
   14bea:	bf00      	nop

00014bec <d_append_num>:
   14bec:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   14bf0:	b088      	sub	sp, #32
   14bf2:	460a      	mov	r2, r1
   14bf4:	4604      	mov	r4, r0
   14bf6:	491b      	ldr	r1, [pc, #108]	; (14c64 <d_append_num+0x78>)
   14bf8:	a801      	add	r0, sp, #4
   14bfa:	f009 fe9f 	bl	1e93c <sprintf>
   14bfe:	a801      	add	r0, sp, #4
   14c00:	f00a f83e 	bl	1ec80 <strlen>
   14c04:	b350      	cbz	r0, 14c5c <d_append_num+0x70>
   14c06:	ad01      	add	r5, sp, #4
   14c08:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
   14c0c:	182f      	adds	r7, r5, r0
   14c0e:	f04f 0800 	mov.w	r8, #0
   14c12:	e009      	b.n	14c28 <d_append_num+0x3c>
   14c14:	460b      	mov	r3, r1
   14c16:	42bd      	cmp	r5, r7
   14c18:	f101 0101 	add.w	r1, r1, #1
   14c1c:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
   14c20:	54e6      	strb	r6, [r4, r3]
   14c22:	f884 6104 	strb.w	r6, [r4, #260]	; 0x104
   14c26:	d019      	beq.n	14c5c <d_append_num+0x70>
   14c28:	29ff      	cmp	r1, #255	; 0xff
   14c2a:	f815 6b01 	ldrb.w	r6, [r5], #1
   14c2e:	d1f1      	bne.n	14c14 <d_append_num+0x28>
   14c30:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   14c34:	f884 80ff 	strb.w	r8, [r4, #255]	; 0xff
   14c38:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
   14c3c:	4620      	mov	r0, r4
   14c3e:	4798      	blx	r3
   14c40:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   14c44:	3301      	adds	r3, #1
   14c46:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
   14c4a:	2300      	movs	r3, #0
   14c4c:	2101      	movs	r1, #1
   14c4e:	42bd      	cmp	r5, r7
   14c50:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
   14c54:	54e6      	strb	r6, [r4, r3]
   14c56:	f884 6104 	strb.w	r6, [r4, #260]	; 0x104
   14c5a:	d1e5      	bne.n	14c28 <d_append_num+0x3c>
   14c5c:	b008      	add	sp, #32
   14c5e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   14c62:	bf00      	nop
   14c64:	00024314 	.word	0x00024314

00014c68 <d_exprlist>:
   14c68:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   14c6c:	68c3      	ldr	r3, [r0, #12]
   14c6e:	781d      	ldrb	r5, [r3, #0]
   14c70:	b083      	sub	sp, #12
   14c72:	2200      	movs	r2, #0
   14c74:	428d      	cmp	r5, r1
   14c76:	4604      	mov	r4, r0
   14c78:	9201      	str	r2, [sp, #4]
   14c7a:	f000 81c6 	beq.w	1500a <d_exprlist+0x3a2>
   14c7e:	4688      	mov	r8, r1
   14c80:	f8df 949c 	ldr.w	r9, [pc, #1180]	; 15120 <d_exprlist+0x4b8>
   14c84:	ae01      	add	r6, sp, #4
   14c86:	e023      	b.n	14cd0 <d_exprlist+0x68>
   14c88:	2a66      	cmp	r2, #102	; 0x66
   14c8a:	d04c      	beq.n	14d26 <d_exprlist+0xbe>
   14c8c:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
   14c90:	2909      	cmp	r1, #9
   14c92:	f200 8217 	bhi.w	150c4 <d_exprlist+0x45c>
   14c96:	4620      	mov	r0, r4
   14c98:	f001 fb10 	bl	162bc <d_unqualified_name>
   14c9c:	4605      	mov	r5, r0
   14c9e:	2800      	cmp	r0, #0
   14ca0:	f000 8170 	beq.w	14f84 <d_exprlist+0x31c>
   14ca4:	68e3      	ldr	r3, [r4, #12]
   14ca6:	781b      	ldrb	r3, [r3, #0]
   14ca8:	2b49      	cmp	r3, #73	; 0x49
   14caa:	f000 8092 	beq.w	14dd2 <d_exprlist+0x16a>
   14cae:	6367      	str	r7, [r4, #52]	; 0x34
   14cb0:	462a      	mov	r2, r5
   14cb2:	2300      	movs	r3, #0
   14cb4:	212e      	movs	r1, #46	; 0x2e
   14cb6:	4620      	mov	r0, r4
   14cb8:	f7ff fbc8 	bl	1444c <d_make_comp>
   14cbc:	6030      	str	r0, [r6, #0]
   14cbe:	2800      	cmp	r0, #0
   14cc0:	d05b      	beq.n	14d7a <d_exprlist+0x112>
   14cc2:	68e3      	ldr	r3, [r4, #12]
   14cc4:	781a      	ldrb	r2, [r3, #0]
   14cc6:	4542      	cmp	r2, r8
   14cc8:	f100 0608 	add.w	r6, r0, #8
   14ccc:	f000 8107 	beq.w	14ede <d_exprlist+0x276>
   14cd0:	2501      	movs	r5, #1
   14cd2:	6b67      	ldr	r7, [r4, #52]	; 0x34
   14cd4:	6365      	str	r5, [r4, #52]	; 0x34
   14cd6:	781a      	ldrb	r2, [r3, #0]
   14cd8:	2a4c      	cmp	r2, #76	; 0x4c
   14cda:	d047      	beq.n	14d6c <d_exprlist+0x104>
   14cdc:	2a54      	cmp	r2, #84	; 0x54
   14cde:	d051      	beq.n	14d84 <d_exprlist+0x11c>
   14ce0:	2a73      	cmp	r2, #115	; 0x73
   14ce2:	d1d1      	bne.n	14c88 <d_exprlist+0x20>
   14ce4:	785a      	ldrb	r2, [r3, #1]
   14ce6:	2a72      	cmp	r2, #114	; 0x72
   14ce8:	f000 80e2 	beq.w	14eb0 <d_exprlist+0x248>
   14cec:	2a70      	cmp	r2, #112	; 0x70
   14cee:	f000 80fd 	beq.w	14eec <d_exprlist+0x284>
   14cf2:	4620      	mov	r0, r4
   14cf4:	f001 fa22 	bl	1613c <d_operator_name>
   14cf8:	4605      	mov	r5, r0
   14cfa:	2800      	cmp	r0, #0
   14cfc:	f000 8142 	beq.w	14f84 <d_exprlist+0x31c>
   14d00:	782b      	ldrb	r3, [r5, #0]
   14d02:	2b31      	cmp	r3, #49	; 0x31
   14d04:	d043      	beq.n	14d8e <d_exprlist+0x126>
   14d06:	2b32      	cmp	r3, #50	; 0x32
   14d08:	d05c      	beq.n	14dc4 <d_exprlist+0x15c>
   14d0a:	2b33      	cmp	r3, #51	; 0x33
   14d0c:	d17b      	bne.n	14e06 <d_exprlist+0x19e>
   14d0e:	68e3      	ldr	r3, [r4, #12]
   14d10:	781a      	ldrb	r2, [r3, #0]
   14d12:	2a5f      	cmp	r2, #95	; 0x5f
   14d14:	f040 80c1 	bne.w	14e9a <d_exprlist+0x232>
   14d18:	3301      	adds	r3, #1
   14d1a:	60e3      	str	r3, [r4, #12]
   14d1c:	2145      	movs	r1, #69	; 0x45
   14d1e:	4620      	mov	r0, r4
   14d20:	f7ff ffa2 	bl	14c68 <d_exprlist>
   14d24:	e0bc      	b.n	14ea0 <d_exprlist+0x238>
   14d26:	785a      	ldrb	r2, [r3, #1]
   14d28:	2a70      	cmp	r2, #112	; 0x70
   14d2a:	d1e2      	bne.n	14cf2 <d_exprlist+0x8a>
   14d2c:	1c9a      	adds	r2, r3, #2
   14d2e:	60e2      	str	r2, [r4, #12]
   14d30:	789a      	ldrb	r2, [r3, #2]
   14d32:	2a54      	cmp	r2, #84	; 0x54
   14d34:	d069      	beq.n	14e0a <d_exprlist+0x1a2>
   14d36:	4620      	mov	r0, r4
   14d38:	f7ff fd1c 	bl	14774 <d_compact_number>
   14d3c:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
   14d40:	4298      	cmp	r0, r3
   14d42:	d060      	beq.n	14e06 <d_exprlist+0x19e>
   14d44:	1c43      	adds	r3, r0, #1
   14d46:	d05e      	beq.n	14e06 <d_exprlist+0x19e>
   14d48:	3001      	adds	r0, #1
   14d4a:	6963      	ldr	r3, [r4, #20]
   14d4c:	69a2      	ldr	r2, [r4, #24]
   14d4e:	4293      	cmp	r3, r2
   14d50:	da59      	bge.n	14e06 <d_exprlist+0x19e>
   14d52:	6922      	ldr	r2, [r4, #16]
   14d54:	1c59      	adds	r1, r3, #1
   14d56:	eb03 0343 	add.w	r3, r3, r3, lsl #1
   14d5a:	eb12 0583 	adds.w	r5, r2, r3, lsl #2
   14d5e:	6161      	str	r1, [r4, #20]
   14d60:	d051      	beq.n	14e06 <d_exprlist+0x19e>
   14d62:	2106      	movs	r1, #6
   14d64:	f802 1023 	strb.w	r1, [r2, r3, lsl #2]
   14d68:	6068      	str	r0, [r5, #4]
   14d6a:	e7a0      	b.n	14cae <d_exprlist+0x46>
   14d6c:	4620      	mov	r0, r4
   14d6e:	f001 fef3 	bl	16b58 <d_expr_primary>
   14d72:	4605      	mov	r5, r0
   14d74:	6367      	str	r7, [r4, #52]	; 0x34
   14d76:	2d00      	cmp	r5, #0
   14d78:	d19a      	bne.n	14cb0 <d_exprlist+0x48>
   14d7a:	2500      	movs	r5, #0
   14d7c:	4628      	mov	r0, r5
   14d7e:	b003      	add	sp, #12
   14d80:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   14d84:	4620      	mov	r0, r4
   14d86:	f7ff fd11 	bl	147ac <d_template_param>
   14d8a:	4605      	mov	r5, r0
   14d8c:	e7f2      	b.n	14d74 <d_exprlist+0x10c>
   14d8e:	f8d5 b004 	ldr.w	fp, [r5, #4]
   14d92:	6b23      	ldr	r3, [r4, #48]	; 0x30
   14d94:	f8db 2008 	ldr.w	r2, [fp, #8]
   14d98:	f8db a000 	ldr.w	sl, [fp]
   14d9c:	3a02      	subs	r2, #2
   14d9e:	4413      	add	r3, r2
   14da0:	6323      	str	r3, [r4, #48]	; 0x30
   14da2:	4650      	mov	r0, sl
   14da4:	4649      	mov	r1, r9
   14da6:	f009 fdff 	bl	1e9a8 <strcmp>
   14daa:	2800      	cmp	r0, #0
   14dac:	f000 80e6 	beq.w	14f7c <d_exprlist+0x314>
   14db0:	f8db 300c 	ldr.w	r3, [fp, #12]
   14db4:	2b03      	cmp	r3, #3
   14db6:	d826      	bhi.n	14e06 <d_exprlist+0x19e>
   14db8:	e8df f013 	tbh	[pc, r3, lsl #1]
   14dbc:	0135002b 	.word	0x0135002b
   14dc0:	00a50033 	.word	0x00a50033
   14dc4:	686b      	ldr	r3, [r5, #4]
   14dc6:	2b03      	cmp	r3, #3
   14dc8:	d81d      	bhi.n	14e06 <d_exprlist+0x19e>
   14dca:	e8df f003 	tbb	[pc, r3]
   14dce:	6622      	.short	0x6622
   14dd0:	1c1c      	.short	0x1c1c
   14dd2:	4620      	mov	r0, r4
   14dd4:	f000 fc04 	bl	155e0 <d_template_args>
   14dd8:	462a      	mov	r2, r5
   14dda:	4603      	mov	r3, r0
   14ddc:	2104      	movs	r1, #4
   14dde:	4620      	mov	r0, r4
   14de0:	f7ff fb34 	bl	1444c <d_make_comp>
   14de4:	4605      	mov	r5, r0
   14de6:	e7c5      	b.n	14d74 <d_exprlist+0x10c>
   14de8:	2a74      	cmp	r2, #116	; 0x74
   14dea:	d182      	bne.n	14cf2 <d_exprlist+0x8a>
   14dec:	785b      	ldrb	r3, [r3, #1]
   14dee:	2b6c      	cmp	r3, #108	; 0x6c
   14df0:	f47f af7f 	bne.w	14cf2 <d_exprlist+0x8a>
   14df4:	4620      	mov	r0, r4
   14df6:	f000 fdb9 	bl	1596c <d_type>
   14dfa:	68e3      	ldr	r3, [r4, #12]
   14dfc:	785a      	ldrb	r2, [r3, #1]
   14dfe:	4605      	mov	r5, r0
   14e00:	2a00      	cmp	r2, #0
   14e02:	f040 8169 	bne.w	150d8 <d_exprlist+0x470>
   14e06:	6367      	str	r7, [r4, #52]	; 0x34
   14e08:	e7b7      	b.n	14d7a <d_exprlist+0x112>
   14e0a:	3303      	adds	r3, #3
   14e0c:	60e3      	str	r3, [r4, #12]
   14e0e:	2000      	movs	r0, #0
   14e10:	e79b      	b.n	14d4a <d_exprlist+0xe2>
   14e12:	462a      	mov	r2, r5
   14e14:	2300      	movs	r3, #0
   14e16:	2135      	movs	r1, #53	; 0x35
   14e18:	4620      	mov	r0, r4
   14e1a:	f7ff fb17 	bl	1444c <d_make_comp>
   14e1e:	4605      	mov	r5, r0
   14e20:	e7a8      	b.n	14d74 <d_exprlist+0x10c>
   14e22:	f1ba 0f00 	cmp.w	sl, #0
   14e26:	d0ee      	beq.n	14e06 <d_exprlist+0x19e>
   14e28:	686b      	ldr	r3, [r5, #4]
   14e2a:	681b      	ldr	r3, [r3, #0]
   14e2c:	785a      	ldrb	r2, [r3, #1]
   14e2e:	2a63      	cmp	r2, #99	; 0x63
   14e30:	f000 80d2 	beq.w	14fd8 <d_exprlist+0x370>
   14e34:	f89a 3000 	ldrb.w	r3, [sl]
   14e38:	2b66      	cmp	r3, #102	; 0x66
   14e3a:	f000 80ef 	beq.w	1501c <d_exprlist+0x3b4>
   14e3e:	4620      	mov	r0, r4
   14e40:	f000 f970 	bl	15124 <d_expression_1>
   14e44:	4683      	mov	fp, r0
   14e46:	49b1      	ldr	r1, [pc, #708]	; (1510c <d_exprlist+0x4a4>)
   14e48:	4650      	mov	r0, sl
   14e4a:	f009 fdad 	bl	1e9a8 <strcmp>
   14e4e:	2800      	cmp	r0, #0
   14e50:	f000 809d 	beq.w	14f8e <d_exprlist+0x326>
   14e54:	49ae      	ldr	r1, [pc, #696]	; (15110 <d_exprlist+0x4a8>)
   14e56:	4650      	mov	r0, sl
   14e58:	f009 fda6 	bl	1e9a8 <strcmp>
   14e5c:	b130      	cbz	r0, 14e6c <d_exprlist+0x204>
   14e5e:	4650      	mov	r0, sl
   14e60:	49ac      	ldr	r1, [pc, #688]	; (15114 <d_exprlist+0x4ac>)
   14e62:	f009 fda1 	bl	1e9a8 <strcmp>
   14e66:	2800      	cmp	r0, #0
   14e68:	f040 8083 	bne.w	14f72 <d_exprlist+0x30a>
   14e6c:	4620      	mov	r0, r4
   14e6e:	f001 fa25 	bl	162bc <d_unqualified_name>
   14e72:	68e3      	ldr	r3, [r4, #12]
   14e74:	781b      	ldrb	r3, [r3, #0]
   14e76:	2b49      	cmp	r3, #73	; 0x49
   14e78:	4682      	mov	sl, r0
   14e7a:	f000 80e9 	beq.w	15050 <d_exprlist+0x3e8>
   14e7e:	4653      	mov	r3, sl
   14e80:	465a      	mov	r2, fp
   14e82:	2138      	movs	r1, #56	; 0x38
   14e84:	4620      	mov	r0, r4
   14e86:	f7ff fae1 	bl	1444c <d_make_comp>
   14e8a:	462a      	mov	r2, r5
   14e8c:	4603      	mov	r3, r0
   14e8e:	2137      	movs	r1, #55	; 0x37
   14e90:	4620      	mov	r0, r4
   14e92:	f7ff fadb 	bl	1444c <d_make_comp>
   14e96:	4605      	mov	r5, r0
   14e98:	e76c      	b.n	14d74 <d_exprlist+0x10c>
   14e9a:	4620      	mov	r0, r4
   14e9c:	f000 f942 	bl	15124 <d_expression_1>
   14ea0:	4603      	mov	r3, r0
   14ea2:	462a      	mov	r2, r5
   14ea4:	2136      	movs	r1, #54	; 0x36
   14ea6:	4620      	mov	r0, r4
   14ea8:	f7ff fad0 	bl	1444c <d_make_comp>
   14eac:	4605      	mov	r5, r0
   14eae:	e761      	b.n	14d74 <d_exprlist+0x10c>
   14eb0:	3302      	adds	r3, #2
   14eb2:	60e3      	str	r3, [r4, #12]
   14eb4:	4620      	mov	r0, r4
   14eb6:	f000 fd59 	bl	1596c <d_type>
   14eba:	4682      	mov	sl, r0
   14ebc:	4620      	mov	r0, r4
   14ebe:	f001 f9fd 	bl	162bc <d_unqualified_name>
   14ec2:	68e3      	ldr	r3, [r4, #12]
   14ec4:	781b      	ldrb	r3, [r3, #0]
   14ec6:	2b49      	cmp	r3, #73	; 0x49
   14ec8:	4683      	mov	fp, r0
   14eca:	f000 8093 	beq.w	14ff4 <d_exprlist+0x38c>
   14ece:	4603      	mov	r3, r0
   14ed0:	4629      	mov	r1, r5
   14ed2:	4652      	mov	r2, sl
   14ed4:	4620      	mov	r0, r4
   14ed6:	f7ff fab9 	bl	1444c <d_make_comp>
   14eda:	4605      	mov	r5, r0
   14edc:	e74a      	b.n	14d74 <d_exprlist+0x10c>
   14ede:	9d01      	ldr	r5, [sp, #4]
   14ee0:	3301      	adds	r3, #1
   14ee2:	4628      	mov	r0, r5
   14ee4:	60e3      	str	r3, [r4, #12]
   14ee6:	b003      	add	sp, #12
   14ee8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   14eec:	3302      	adds	r3, #2
   14eee:	60e3      	str	r3, [r4, #12]
   14ef0:	4620      	mov	r0, r4
   14ef2:	f000 f917 	bl	15124 <d_expression_1>
   14ef6:	2300      	movs	r3, #0
   14ef8:	4602      	mov	r2, r0
   14efa:	214a      	movs	r1, #74	; 0x4a
   14efc:	4620      	mov	r0, r4
   14efe:	f7ff faa5 	bl	1444c <d_make_comp>
   14f02:	4605      	mov	r5, r0
   14f04:	e736      	b.n	14d74 <d_exprlist+0x10c>
   14f06:	f1ba 0f00 	cmp.w	sl, #0
   14f0a:	f43f af7c 	beq.w	14e06 <d_exprlist+0x19e>
   14f0e:	4982      	ldr	r1, [pc, #520]	; (15118 <d_exprlist+0x4b0>)
   14f10:	4650      	mov	r0, sl
   14f12:	f009 fd49 	bl	1e9a8 <strcmp>
   14f16:	2800      	cmp	r0, #0
   14f18:	d03f      	beq.n	14f9a <d_exprlist+0x332>
   14f1a:	f89a 3000 	ldrb.w	r3, [sl]
   14f1e:	2b66      	cmp	r3, #102	; 0x66
   14f20:	f000 80bd 	beq.w	1509e <d_exprlist+0x436>
   14f24:	2b6e      	cmp	r3, #110	; 0x6e
   14f26:	f47f af6e 	bne.w	14e06 <d_exprlist+0x19e>
   14f2a:	f89a 3001 	ldrb.w	r3, [sl, #1]
   14f2e:	2b77      	cmp	r3, #119	; 0x77
   14f30:	d002      	beq.n	14f38 <d_exprlist+0x2d0>
   14f32:	2b61      	cmp	r3, #97	; 0x61
   14f34:	f47f af67 	bne.w	14e06 <d_exprlist+0x19e>
   14f38:	215f      	movs	r1, #95	; 0x5f
   14f3a:	4620      	mov	r0, r4
   14f3c:	f7ff fe94 	bl	14c68 <d_exprlist>
   14f40:	4682      	mov	sl, r0
   14f42:	4620      	mov	r0, r4
   14f44:	f000 fd12 	bl	1596c <d_type>
   14f48:	68e3      	ldr	r3, [r4, #12]
   14f4a:	781a      	ldrb	r2, [r3, #0]
   14f4c:	2a45      	cmp	r2, #69	; 0x45
   14f4e:	4683      	mov	fp, r0
   14f50:	f000 80a1 	beq.w	15096 <d_exprlist+0x42e>
   14f54:	2a70      	cmp	r2, #112	; 0x70
   14f56:	f000 80a6 	beq.w	150a6 <d_exprlist+0x43e>
   14f5a:	2a69      	cmp	r2, #105	; 0x69
   14f5c:	f47f af53 	bne.w	14e06 <d_exprlist+0x19e>
   14f60:	785b      	ldrb	r3, [r3, #1]
   14f62:	2b6c      	cmp	r3, #108	; 0x6c
   14f64:	f47f af4f 	bne.w	14e06 <d_exprlist+0x19e>
   14f68:	4620      	mov	r0, r4
   14f6a:	f000 f8db 	bl	15124 <d_expression_1>
   14f6e:	4603      	mov	r3, r0
   14f70:	e01f      	b.n	14fb2 <d_exprlist+0x34a>
   14f72:	4620      	mov	r0, r4
   14f74:	f000 f8d6 	bl	15124 <d_expression_1>
   14f78:	4682      	mov	sl, r0
   14f7a:	e780      	b.n	14e7e <d_exprlist+0x216>
   14f7c:	4620      	mov	r0, r4
   14f7e:	f000 fcf5 	bl	1596c <d_type>
   14f82:	e78d      	b.n	14ea0 <d_exprlist+0x238>
   14f84:	4628      	mov	r0, r5
   14f86:	6367      	str	r7, [r4, #52]	; 0x34
   14f88:	b003      	add	sp, #12
   14f8a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   14f8e:	2145      	movs	r1, #69	; 0x45
   14f90:	4620      	mov	r0, r4
   14f92:	f7ff fe69 	bl	14c68 <d_exprlist>
   14f96:	4682      	mov	sl, r0
   14f98:	e771      	b.n	14e7e <d_exprlist+0x216>
   14f9a:	4620      	mov	r0, r4
   14f9c:	f000 f8c2 	bl	15124 <d_expression_1>
   14fa0:	4682      	mov	sl, r0
   14fa2:	4620      	mov	r0, r4
   14fa4:	f000 f8be 	bl	15124 <d_expression_1>
   14fa8:	4683      	mov	fp, r0
   14faa:	4620      	mov	r0, r4
   14fac:	f000 f8ba 	bl	15124 <d_expression_1>
   14fb0:	4603      	mov	r3, r0
   14fb2:	465a      	mov	r2, fp
   14fb4:	213b      	movs	r1, #59	; 0x3b
   14fb6:	4620      	mov	r0, r4
   14fb8:	f7ff fa48 	bl	1444c <d_make_comp>
   14fbc:	4652      	mov	r2, sl
   14fbe:	4603      	mov	r3, r0
   14fc0:	213a      	movs	r1, #58	; 0x3a
   14fc2:	4620      	mov	r0, r4
   14fc4:	f7ff fa42 	bl	1444c <d_make_comp>
   14fc8:	462a      	mov	r2, r5
   14fca:	4603      	mov	r3, r0
   14fcc:	2139      	movs	r1, #57	; 0x39
   14fce:	4620      	mov	r0, r4
   14fd0:	f7ff fa3c 	bl	1444c <d_make_comp>
   14fd4:	4605      	mov	r5, r0
   14fd6:	e6cd      	b.n	14d74 <d_exprlist+0x10c>
   14fd8:	781b      	ldrb	r3, [r3, #0]
   14fda:	f1a3 0263 	sub.w	r2, r3, #99	; 0x63
   14fde:	2a01      	cmp	r2, #1
   14fe0:	d903      	bls.n	14fea <d_exprlist+0x382>
   14fe2:	3b72      	subs	r3, #114	; 0x72
   14fe4:	2b01      	cmp	r3, #1
   14fe6:	f63f af25 	bhi.w	14e34 <d_exprlist+0x1cc>
   14fea:	4620      	mov	r0, r4
   14fec:	f000 fcbe 	bl	1596c <d_type>
   14ff0:	4683      	mov	fp, r0
   14ff2:	e728      	b.n	14e46 <d_exprlist+0x1de>
   14ff4:	4620      	mov	r0, r4
   14ff6:	f000 faf3 	bl	155e0 <d_template_args>
   14ffa:	465a      	mov	r2, fp
   14ffc:	4603      	mov	r3, r0
   14ffe:	2104      	movs	r1, #4
   15000:	4620      	mov	r0, r4
   15002:	f7ff fa23 	bl	1444c <d_make_comp>
   15006:	4603      	mov	r3, r0
   15008:	e762      	b.n	14ed0 <d_exprlist+0x268>
   1500a:	3301      	adds	r3, #1
   1500c:	60c3      	str	r3, [r0, #12]
   1500e:	212e      	movs	r1, #46	; 0x2e
   15010:	4613      	mov	r3, r2
   15012:	b003      	add	sp, #12
   15014:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   15018:	f7ff ba18 	b.w	1444c <d_make_comp>
   1501c:	4620      	mov	r0, r4
   1501e:	f001 f88d 	bl	1613c <d_operator_name>
   15022:	4683      	mov	fp, r0
   15024:	e70f      	b.n	14e46 <d_exprlist+0x1de>
   15026:	f1ba 0f00 	cmp.w	sl, #0
   1502a:	f43f af36 	beq.w	14e9a <d_exprlist+0x232>
   1502e:	f89a 3000 	ldrb.w	r3, [sl]
   15032:	2b70      	cmp	r3, #112	; 0x70
   15034:	d017      	beq.n	15066 <d_exprlist+0x3fe>
   15036:	2b6d      	cmp	r3, #109	; 0x6d
   15038:	d015      	beq.n	15066 <d_exprlist+0x3fe>
   1503a:	4650      	mov	r0, sl
   1503c:	4937      	ldr	r1, [pc, #220]	; (1511c <d_exprlist+0x4b4>)
   1503e:	f009 fcb3 	bl	1e9a8 <strcmp>
   15042:	2800      	cmp	r0, #0
   15044:	f47f af29 	bne.w	14e9a <d_exprlist+0x232>
   15048:	4620      	mov	r0, r4
   1504a:	f000 fa65 	bl	15518 <d_template_args_1>
   1504e:	e727      	b.n	14ea0 <d_exprlist+0x238>
   15050:	4620      	mov	r0, r4
   15052:	f000 fac5 	bl	155e0 <d_template_args>
   15056:	4652      	mov	r2, sl
   15058:	4603      	mov	r3, r0
   1505a:	2104      	movs	r1, #4
   1505c:	4620      	mov	r0, r4
   1505e:	f7ff f9f5 	bl	1444c <d_make_comp>
   15062:	4682      	mov	sl, r0
   15064:	e70b      	b.n	14e7e <d_exprlist+0x216>
   15066:	f89a 2001 	ldrb.w	r2, [sl, #1]
   1506a:	429a      	cmp	r2, r3
   1506c:	d1e5      	bne.n	1503a <d_exprlist+0x3d2>
   1506e:	68e3      	ldr	r3, [r4, #12]
   15070:	781a      	ldrb	r2, [r3, #0]
   15072:	2a5f      	cmp	r2, #95	; 0x5f
   15074:	d023      	beq.n	150be <d_exprlist+0x456>
   15076:	4650      	mov	r0, sl
   15078:	4928      	ldr	r1, [pc, #160]	; (1511c <d_exprlist+0x4b4>)
   1507a:	f009 fc95 	bl	1e9a8 <strcmp>
   1507e:	2800      	cmp	r0, #0
   15080:	d03f      	beq.n	15102 <d_exprlist+0x49a>
   15082:	4620      	mov	r0, r4
   15084:	f000 f84e 	bl	15124 <d_expression_1>
   15088:	4603      	mov	r3, r0
   1508a:	461a      	mov	r2, r3
   1508c:	2138      	movs	r1, #56	; 0x38
   1508e:	4620      	mov	r0, r4
   15090:	f7ff f9dc 	bl	1444c <d_make_comp>
   15094:	e704      	b.n	14ea0 <d_exprlist+0x238>
   15096:	3301      	adds	r3, #1
   15098:	60e3      	str	r3, [r4, #12]
   1509a:	2300      	movs	r3, #0
   1509c:	e789      	b.n	14fb2 <d_exprlist+0x34a>
   1509e:	4620      	mov	r0, r4
   150a0:	f001 f84c 	bl	1613c <d_operator_name>
   150a4:	e77c      	b.n	14fa0 <d_exprlist+0x338>
   150a6:	785a      	ldrb	r2, [r3, #1]
   150a8:	2a69      	cmp	r2, #105	; 0x69
   150aa:	f47f aeac 	bne.w	14e06 <d_exprlist+0x19e>
   150ae:	3302      	adds	r3, #2
   150b0:	60e3      	str	r3, [r4, #12]
   150b2:	2145      	movs	r1, #69	; 0x45
   150b4:	4620      	mov	r0, r4
   150b6:	f7ff fdd7 	bl	14c68 <d_exprlist>
   150ba:	4603      	mov	r3, r0
   150bc:	e779      	b.n	14fb2 <d_exprlist+0x34a>
   150be:	3301      	adds	r3, #1
   150c0:	60e3      	str	r3, [r4, #12]
   150c2:	e7ba      	b.n	1503a <d_exprlist+0x3d2>
   150c4:	2a6f      	cmp	r2, #111	; 0x6f
   150c6:	d015      	beq.n	150f4 <d_exprlist+0x48c>
   150c8:	2a69      	cmp	r2, #105	; 0x69
   150ca:	f47f ae8d 	bne.w	14de8 <d_exprlist+0x180>
   150ce:	785a      	ldrb	r2, [r3, #1]
   150d0:	2a6c      	cmp	r2, #108	; 0x6c
   150d2:	f47f ae0e 	bne.w	14cf2 <d_exprlist+0x8a>
   150d6:	2500      	movs	r5, #0
   150d8:	3302      	adds	r3, #2
   150da:	60e3      	str	r3, [r4, #12]
   150dc:	2145      	movs	r1, #69	; 0x45
   150de:	4620      	mov	r0, r4
   150e0:	f7ff fdc2 	bl	14c68 <d_exprlist>
   150e4:	462a      	mov	r2, r5
   150e6:	4603      	mov	r3, r0
   150e8:	2130      	movs	r1, #48	; 0x30
   150ea:	4620      	mov	r0, r4
   150ec:	f7ff f9ae 	bl	1444c <d_make_comp>
   150f0:	4605      	mov	r5, r0
   150f2:	e63f      	b.n	14d74 <d_exprlist+0x10c>
   150f4:	785a      	ldrb	r2, [r3, #1]
   150f6:	2a6e      	cmp	r2, #110	; 0x6e
   150f8:	f47f adfb 	bne.w	14cf2 <d_exprlist+0x8a>
   150fc:	3302      	adds	r3, #2
   150fe:	60e3      	str	r3, [r4, #12]
   15100:	e5c9      	b.n	14c96 <d_exprlist+0x2e>
   15102:	4620      	mov	r0, r4
   15104:	f000 fa08 	bl	15518 <d_template_args_1>
   15108:	4603      	mov	r3, r0
   1510a:	e7be      	b.n	1508a <d_exprlist+0x422>
   1510c:	0002431c 	.word	0x0002431c
   15110:	00024320 	.word	0x00024320
   15114:	00024324 	.word	0x00024324
   15118:	00024328 	.word	0x00024328
   1511c:	00024318 	.word	0x00024318
   15120:	0002481c 	.word	0x0002481c

00015124 <d_expression_1>:
   15124:	68c1      	ldr	r1, [r0, #12]
   15126:	780b      	ldrb	r3, [r1, #0]
   15128:	2b4c      	cmp	r3, #76	; 0x4c
   1512a:	f000 8087 	beq.w	1523c <d_expression_1+0x118>
   1512e:	2b54      	cmp	r3, #84	; 0x54
   15130:	f000 8086 	beq.w	15240 <d_expression_1+0x11c>
   15134:	2b73      	cmp	r3, #115	; 0x73
   15136:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1513a:	4604      	mov	r4, r0
   1513c:	d037      	beq.n	151ae <d_expression_1+0x8a>
   1513e:	2b66      	cmp	r3, #102	; 0x66
   15140:	d012      	beq.n	15168 <d_expression_1+0x44>
   15142:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
   15146:	2a09      	cmp	r2, #9
   15148:	f200 81b8 	bhi.w	154bc <d_expression_1+0x398>
   1514c:	4620      	mov	r0, r4
   1514e:	f001 f8b5 	bl	162bc <d_unqualified_name>
   15152:	4605      	mov	r5, r0
   15154:	2800      	cmp	r0, #0
   15156:	d06d      	beq.n	15234 <d_expression_1+0x110>
   15158:	68e3      	ldr	r3, [r4, #12]
   1515a:	781b      	ldrb	r3, [r3, #0]
   1515c:	2b49      	cmp	r3, #73	; 0x49
   1515e:	f000 8088 	beq.w	15272 <d_expression_1+0x14e>
   15162:	4628      	mov	r0, r5
   15164:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   15168:	784b      	ldrb	r3, [r1, #1]
   1516a:	2b70      	cmp	r3, #112	; 0x70
   1516c:	d039      	beq.n	151e2 <d_expression_1+0xbe>
   1516e:	4620      	mov	r0, r4
   15170:	f000 ffe4 	bl	1613c <d_operator_name>
   15174:	4605      	mov	r5, r0
   15176:	2800      	cmp	r0, #0
   15178:	d05c      	beq.n	15234 <d_expression_1+0x110>
   1517a:	7803      	ldrb	r3, [r0, #0]
   1517c:	2b31      	cmp	r3, #49	; 0x31
   1517e:	d061      	beq.n	15244 <d_expression_1+0x120>
   15180:	2b32      	cmp	r3, #50	; 0x32
   15182:	d025      	beq.n	151d0 <d_expression_1+0xac>
   15184:	2b33      	cmp	r3, #51	; 0x33
   15186:	d155      	bne.n	15234 <d_expression_1+0x110>
   15188:	68e3      	ldr	r3, [r4, #12]
   1518a:	781a      	ldrb	r2, [r3, #0]
   1518c:	2a5f      	cmp	r2, #95	; 0x5f
   1518e:	f040 81b4 	bne.w	154fa <d_expression_1+0x3d6>
   15192:	3301      	adds	r3, #1
   15194:	60e3      	str	r3, [r4, #12]
   15196:	2145      	movs	r1, #69	; 0x45
   15198:	4620      	mov	r0, r4
   1519a:	f7ff fd65 	bl	14c68 <d_exprlist>
   1519e:	4603      	mov	r3, r0
   151a0:	462a      	mov	r2, r5
   151a2:	4620      	mov	r0, r4
   151a4:	2136      	movs	r1, #54	; 0x36
   151a6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   151aa:	f7ff b94f 	b.w	1444c <d_make_comp>
   151ae:	784b      	ldrb	r3, [r1, #1]
   151b0:	2b72      	cmp	r3, #114	; 0x72
   151b2:	d069      	beq.n	15288 <d_expression_1+0x164>
   151b4:	2b70      	cmp	r3, #112	; 0x70
   151b6:	d1da      	bne.n	1516e <d_expression_1+0x4a>
   151b8:	3102      	adds	r1, #2
   151ba:	60c1      	str	r1, [r0, #12]
   151bc:	f7ff ffb2 	bl	15124 <d_expression_1>
   151c0:	2300      	movs	r3, #0
   151c2:	4602      	mov	r2, r0
   151c4:	214a      	movs	r1, #74	; 0x4a
   151c6:	4620      	mov	r0, r4
   151c8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   151cc:	f7ff b93e 	b.w	1444c <d_make_comp>
   151d0:	6843      	ldr	r3, [r0, #4]
   151d2:	2b03      	cmp	r3, #3
   151d4:	d82e      	bhi.n	15234 <d_expression_1+0x110>
   151d6:	e8df f013 	tbh	[pc, r3, lsl #1]
   151da:	0071      	.short	0x0071
   151dc:	002d0190 	.word	0x002d0190
   151e0:	002d      	.short	0x002d
   151e2:	1c8b      	adds	r3, r1, #2
   151e4:	60c3      	str	r3, [r0, #12]
   151e6:	788b      	ldrb	r3, [r1, #2]
   151e8:	2b54      	cmp	r3, #84	; 0x54
   151ea:	d063      	beq.n	152b4 <d_expression_1+0x190>
   151ec:	f7ff fac2 	bl	14774 <d_compact_number>
   151f0:	43c3      	mvns	r3, r0
   151f2:	f033 4300 	bics.w	r3, r3, #2147483648	; 0x80000000
   151f6:	d01d      	beq.n	15234 <d_expression_1+0x110>
   151f8:	3001      	adds	r0, #1
   151fa:	6963      	ldr	r3, [r4, #20]
   151fc:	69a2      	ldr	r2, [r4, #24]
   151fe:	4293      	cmp	r3, r2
   15200:	da18      	bge.n	15234 <d_expression_1+0x110>
   15202:	eb03 0243 	add.w	r2, r3, r3, lsl #1
   15206:	6921      	ldr	r1, [r4, #16]
   15208:	0092      	lsls	r2, r2, #2
   1520a:	3301      	adds	r3, #1
   1520c:	188d      	adds	r5, r1, r2
   1520e:	6163      	str	r3, [r4, #20]
   15210:	d0a7      	beq.n	15162 <d_expression_1+0x3e>
   15212:	2306      	movs	r3, #6
   15214:	548b      	strb	r3, [r1, r2]
   15216:	6068      	str	r0, [r5, #4]
   15218:	e7a3      	b.n	15162 <d_expression_1+0x3e>
   1521a:	2b74      	cmp	r3, #116	; 0x74
   1521c:	d1a7      	bne.n	1516e <d_expression_1+0x4a>
   1521e:	784b      	ldrb	r3, [r1, #1]
   15220:	2b6c      	cmp	r3, #108	; 0x6c
   15222:	d1a4      	bne.n	1516e <d_expression_1+0x4a>
   15224:	f000 fba2 	bl	1596c <d_type>
   15228:	68e1      	ldr	r1, [r4, #12]
   1522a:	784b      	ldrb	r3, [r1, #1]
   1522c:	4605      	mov	r5, r0
   1522e:	2b00      	cmp	r3, #0
   15230:	f040 814e 	bne.w	154d0 <d_expression_1+0x3ac>
   15234:	2500      	movs	r5, #0
   15236:	4628      	mov	r0, r5
   15238:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   1523c:	f001 bc8c 	b.w	16b58 <d_expr_primary>
   15240:	f7ff bab4 	b.w	147ac <d_template_param>
   15244:	6847      	ldr	r7, [r0, #4]
   15246:	6b23      	ldr	r3, [r4, #48]	; 0x30
   15248:	68ba      	ldr	r2, [r7, #8]
   1524a:	683e      	ldr	r6, [r7, #0]
   1524c:	49ac      	ldr	r1, [pc, #688]	; (15500 <d_expression_1+0x3dc>)
   1524e:	3a02      	subs	r2, #2
   15250:	4413      	add	r3, r2
   15252:	6323      	str	r3, [r4, #48]	; 0x30
   15254:	4630      	mov	r0, r6
   15256:	f009 fba7 	bl	1e9a8 <strcmp>
   1525a:	2800      	cmp	r0, #0
   1525c:	f000 80ab 	beq.w	153b6 <d_expression_1+0x292>
   15260:	68ff      	ldr	r7, [r7, #12]
   15262:	2f03      	cmp	r7, #3
   15264:	d8e6      	bhi.n	15234 <d_expression_1+0x110>
   15266:	e8df f017 	tbh	[pc, r7, lsl #1]
   1526a:	0029      	.short	0x0029
   1526c:	007100ff 	.word	0x007100ff
   15270:	0031      	.short	0x0031
   15272:	4620      	mov	r0, r4
   15274:	f000 f9b4 	bl	155e0 <d_template_args>
   15278:	462a      	mov	r2, r5
   1527a:	4603      	mov	r3, r0
   1527c:	2104      	movs	r1, #4
   1527e:	4620      	mov	r0, r4
   15280:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   15284:	f7ff b8e2 	b.w	1444c <d_make_comp>
   15288:	3102      	adds	r1, #2
   1528a:	60c1      	str	r1, [r0, #12]
   1528c:	f000 fb6e 	bl	1596c <d_type>
   15290:	4605      	mov	r5, r0
   15292:	4620      	mov	r0, r4
   15294:	f001 f812 	bl	162bc <d_unqualified_name>
   15298:	68e3      	ldr	r3, [r4, #12]
   1529a:	781b      	ldrb	r3, [r3, #0]
   1529c:	2b49      	cmp	r3, #73	; 0x49
   1529e:	4606      	mov	r6, r0
   152a0:	f000 80ae 	beq.w	15400 <d_expression_1+0x2dc>
   152a4:	4603      	mov	r3, r0
   152a6:	462a      	mov	r2, r5
   152a8:	4620      	mov	r0, r4
   152aa:	2101      	movs	r1, #1
   152ac:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   152b0:	f7ff b8cc 	b.w	1444c <d_make_comp>
   152b4:	3103      	adds	r1, #3
   152b6:	60c1      	str	r1, [r0, #12]
   152b8:	2000      	movs	r0, #0
   152ba:	e79e      	b.n	151fa <d_expression_1+0xd6>
   152bc:	462a      	mov	r2, r5
   152be:	4620      	mov	r0, r4
   152c0:	2300      	movs	r3, #0
   152c2:	2135      	movs	r1, #53	; 0x35
   152c4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   152c8:	f7ff b8c0 	b.w	1444c <d_make_comp>
   152cc:	2e00      	cmp	r6, #0
   152ce:	d0b1      	beq.n	15234 <d_expression_1+0x110>
   152d0:	498c      	ldr	r1, [pc, #560]	; (15504 <d_expression_1+0x3e0>)
   152d2:	4630      	mov	r0, r6
   152d4:	f009 fb68 	bl	1e9a8 <strcmp>
   152d8:	2800      	cmp	r0, #0
   152da:	d071      	beq.n	153c0 <d_expression_1+0x29c>
   152dc:	7833      	ldrb	r3, [r6, #0]
   152de:	2b66      	cmp	r3, #102	; 0x66
   152e0:	f000 80b2 	beq.w	15448 <d_expression_1+0x324>
   152e4:	2b6e      	cmp	r3, #110	; 0x6e
   152e6:	d1a5      	bne.n	15234 <d_expression_1+0x110>
   152e8:	7873      	ldrb	r3, [r6, #1]
   152ea:	2b77      	cmp	r3, #119	; 0x77
   152ec:	d001      	beq.n	152f2 <d_expression_1+0x1ce>
   152ee:	2b61      	cmp	r3, #97	; 0x61
   152f0:	d1a0      	bne.n	15234 <d_expression_1+0x110>
   152f2:	215f      	movs	r1, #95	; 0x5f
   152f4:	4620      	mov	r0, r4
   152f6:	f7ff fcb7 	bl	14c68 <d_exprlist>
   152fa:	4606      	mov	r6, r0
   152fc:	4620      	mov	r0, r4
   152fe:	f000 fb35 	bl	1596c <d_type>
   15302:	68e3      	ldr	r3, [r4, #12]
   15304:	781a      	ldrb	r2, [r3, #0]
   15306:	2a45      	cmp	r2, #69	; 0x45
   15308:	4607      	mov	r7, r0
   1530a:	f000 8099 	beq.w	15440 <d_expression_1+0x31c>
   1530e:	2a70      	cmp	r2, #112	; 0x70
   15310:	f000 809e 	beq.w	15450 <d_expression_1+0x32c>
   15314:	2a69      	cmp	r2, #105	; 0x69
   15316:	d18d      	bne.n	15234 <d_expression_1+0x110>
   15318:	785b      	ldrb	r3, [r3, #1]
   1531a:	2b6c      	cmp	r3, #108	; 0x6c
   1531c:	d18a      	bne.n	15234 <d_expression_1+0x110>
   1531e:	4620      	mov	r0, r4
   15320:	f7ff ff00 	bl	15124 <d_expression_1>
   15324:	4603      	mov	r3, r0
   15326:	463a      	mov	r2, r7
   15328:	213b      	movs	r1, #59	; 0x3b
   1532a:	4620      	mov	r0, r4
   1532c:	f7ff f88e 	bl	1444c <d_make_comp>
   15330:	4632      	mov	r2, r6
   15332:	4603      	mov	r3, r0
   15334:	213a      	movs	r1, #58	; 0x3a
   15336:	4620      	mov	r0, r4
   15338:	f7ff f888 	bl	1444c <d_make_comp>
   1533c:	462a      	mov	r2, r5
   1533e:	4603      	mov	r3, r0
   15340:	2139      	movs	r1, #57	; 0x39
   15342:	4620      	mov	r0, r4
   15344:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   15348:	f7ff b880 	b.w	1444c <d_make_comp>
   1534c:	2e00      	cmp	r6, #0
   1534e:	f43f af71 	beq.w	15234 <d_expression_1+0x110>
   15352:	686b      	ldr	r3, [r5, #4]
   15354:	681b      	ldr	r3, [r3, #0]
   15356:	785a      	ldrb	r2, [r3, #1]
   15358:	2a63      	cmp	r2, #99	; 0x63
   1535a:	d044      	beq.n	153e6 <d_expression_1+0x2c2>
   1535c:	7833      	ldrb	r3, [r6, #0]
   1535e:	2b66      	cmp	r3, #102	; 0x66
   15360:	d059      	beq.n	15416 <d_expression_1+0x2f2>
   15362:	4620      	mov	r0, r4
   15364:	f7ff fede 	bl	15124 <d_expression_1>
   15368:	4607      	mov	r7, r0
   1536a:	4967      	ldr	r1, [pc, #412]	; (15508 <d_expression_1+0x3e4>)
   1536c:	4630      	mov	r0, r6
   1536e:	f009 fb1b 	bl	1e9a8 <strcmp>
   15372:	b390      	cbz	r0, 153da <d_expression_1+0x2b6>
   15374:	4965      	ldr	r1, [pc, #404]	; (1550c <d_expression_1+0x3e8>)
   15376:	4630      	mov	r0, r6
   15378:	f009 fb16 	bl	1e9a8 <strcmp>
   1537c:	b128      	cbz	r0, 1538a <d_expression_1+0x266>
   1537e:	4630      	mov	r0, r6
   15380:	4963      	ldr	r1, [pc, #396]	; (15510 <d_expression_1+0x3ec>)
   15382:	f009 fb11 	bl	1e9a8 <strcmp>
   15386:	2800      	cmp	r0, #0
   15388:	d14a      	bne.n	15420 <d_expression_1+0x2fc>
   1538a:	4620      	mov	r0, r4
   1538c:	f000 ff96 	bl	162bc <d_unqualified_name>
   15390:	68e3      	ldr	r3, [r4, #12]
   15392:	781b      	ldrb	r3, [r3, #0]
   15394:	2b49      	cmp	r3, #73	; 0x49
   15396:	4606      	mov	r6, r0
   15398:	d047      	beq.n	1542a <d_expression_1+0x306>
   1539a:	4633      	mov	r3, r6
   1539c:	463a      	mov	r2, r7
   1539e:	2138      	movs	r1, #56	; 0x38
   153a0:	4620      	mov	r0, r4
   153a2:	f7ff f853 	bl	1444c <d_make_comp>
   153a6:	462a      	mov	r2, r5
   153a8:	4603      	mov	r3, r0
   153aa:	2137      	movs	r1, #55	; 0x37
   153ac:	4620      	mov	r0, r4
   153ae:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   153b2:	f7ff b84b 	b.w	1444c <d_make_comp>
   153b6:	4620      	mov	r0, r4
   153b8:	f000 fad8 	bl	1596c <d_type>
   153bc:	4603      	mov	r3, r0
   153be:	e6ef      	b.n	151a0 <d_expression_1+0x7c>
   153c0:	4620      	mov	r0, r4
   153c2:	f7ff feaf 	bl	15124 <d_expression_1>
   153c6:	4606      	mov	r6, r0
   153c8:	4620      	mov	r0, r4
   153ca:	f7ff feab 	bl	15124 <d_expression_1>
   153ce:	4607      	mov	r7, r0
   153d0:	4620      	mov	r0, r4
   153d2:	f7ff fea7 	bl	15124 <d_expression_1>
   153d6:	4603      	mov	r3, r0
   153d8:	e7a5      	b.n	15326 <d_expression_1+0x202>
   153da:	2145      	movs	r1, #69	; 0x45
   153dc:	4620      	mov	r0, r4
   153de:	f7ff fc43 	bl	14c68 <d_exprlist>
   153e2:	4606      	mov	r6, r0
   153e4:	e7d9      	b.n	1539a <d_expression_1+0x276>
   153e6:	781b      	ldrb	r3, [r3, #0]
   153e8:	f1a3 0263 	sub.w	r2, r3, #99	; 0x63
   153ec:	2a01      	cmp	r2, #1
   153ee:	d902      	bls.n	153f6 <d_expression_1+0x2d2>
   153f0:	3b72      	subs	r3, #114	; 0x72
   153f2:	2b01      	cmp	r3, #1
   153f4:	d8b2      	bhi.n	1535c <d_expression_1+0x238>
   153f6:	4620      	mov	r0, r4
   153f8:	f000 fab8 	bl	1596c <d_type>
   153fc:	4607      	mov	r7, r0
   153fe:	e7b4      	b.n	1536a <d_expression_1+0x246>
   15400:	4620      	mov	r0, r4
   15402:	f000 f8ed 	bl	155e0 <d_template_args>
   15406:	4632      	mov	r2, r6
   15408:	4603      	mov	r3, r0
   1540a:	2104      	movs	r1, #4
   1540c:	4620      	mov	r0, r4
   1540e:	f7ff f81d 	bl	1444c <d_make_comp>
   15412:	4603      	mov	r3, r0
   15414:	e747      	b.n	152a6 <d_expression_1+0x182>
   15416:	4620      	mov	r0, r4
   15418:	f000 fe90 	bl	1613c <d_operator_name>
   1541c:	4607      	mov	r7, r0
   1541e:	e7a4      	b.n	1536a <d_expression_1+0x246>
   15420:	4620      	mov	r0, r4
   15422:	f7ff fe7f 	bl	15124 <d_expression_1>
   15426:	4606      	mov	r6, r0
   15428:	e7b7      	b.n	1539a <d_expression_1+0x276>
   1542a:	4620      	mov	r0, r4
   1542c:	f000 f8d8 	bl	155e0 <d_template_args>
   15430:	4632      	mov	r2, r6
   15432:	4603      	mov	r3, r0
   15434:	2104      	movs	r1, #4
   15436:	4620      	mov	r0, r4
   15438:	f7ff f808 	bl	1444c <d_make_comp>
   1543c:	4606      	mov	r6, r0
   1543e:	e7ac      	b.n	1539a <d_expression_1+0x276>
   15440:	3301      	adds	r3, #1
   15442:	60e3      	str	r3, [r4, #12]
   15444:	2300      	movs	r3, #0
   15446:	e76e      	b.n	15326 <d_expression_1+0x202>
   15448:	4620      	mov	r0, r4
   1544a:	f000 fe77 	bl	1613c <d_operator_name>
   1544e:	e7ba      	b.n	153c6 <d_expression_1+0x2a2>
   15450:	785a      	ldrb	r2, [r3, #1]
   15452:	2a69      	cmp	r2, #105	; 0x69
   15454:	f47f aeee 	bne.w	15234 <d_expression_1+0x110>
   15458:	3302      	adds	r3, #2
   1545a:	60e3      	str	r3, [r4, #12]
   1545c:	2145      	movs	r1, #69	; 0x45
   1545e:	4620      	mov	r0, r4
   15460:	f7ff fc02 	bl	14c68 <d_exprlist>
   15464:	4603      	mov	r3, r0
   15466:	e75e      	b.n	15326 <d_expression_1+0x202>
   15468:	2e00      	cmp	r6, #0
   1546a:	d046      	beq.n	154fa <d_expression_1+0x3d6>
   1546c:	7833      	ldrb	r3, [r6, #0]
   1546e:	2b70      	cmp	r3, #112	; 0x70
   15470:	d015      	beq.n	1549e <d_expression_1+0x37a>
   15472:	2b6d      	cmp	r3, #109	; 0x6d
   15474:	d013      	beq.n	1549e <d_expression_1+0x37a>
   15476:	2700      	movs	r7, #0
   15478:	4630      	mov	r0, r6
   1547a:	4926      	ldr	r1, [pc, #152]	; (15514 <d_expression_1+0x3f0>)
   1547c:	f009 fa94 	bl	1e9a8 <strcmp>
   15480:	b1b8      	cbz	r0, 154b2 <d_expression_1+0x38e>
   15482:	4620      	mov	r0, r4
   15484:	f7ff fe4e 	bl	15124 <d_expression_1>
   15488:	4603      	mov	r3, r0
   1548a:	2f00      	cmp	r7, #0
   1548c:	f43f ae88 	beq.w	151a0 <d_expression_1+0x7c>
   15490:	461a      	mov	r2, r3
   15492:	2138      	movs	r1, #56	; 0x38
   15494:	4620      	mov	r0, r4
   15496:	f7fe ffd9 	bl	1444c <d_make_comp>
   1549a:	4603      	mov	r3, r0
   1549c:	e680      	b.n	151a0 <d_expression_1+0x7c>
   1549e:	7872      	ldrb	r2, [r6, #1]
   154a0:	429a      	cmp	r2, r3
   154a2:	d1e8      	bne.n	15476 <d_expression_1+0x352>
   154a4:	68e3      	ldr	r3, [r4, #12]
   154a6:	781a      	ldrb	r2, [r3, #0]
   154a8:	2a5f      	cmp	r2, #95	; 0x5f
   154aa:	d1e5      	bne.n	15478 <d_expression_1+0x354>
   154ac:	3301      	adds	r3, #1
   154ae:	60e3      	str	r3, [r4, #12]
   154b0:	e7e1      	b.n	15476 <d_expression_1+0x352>
   154b2:	4620      	mov	r0, r4
   154b4:	f000 f830 	bl	15518 <d_template_args_1>
   154b8:	4603      	mov	r3, r0
   154ba:	e7e6      	b.n	1548a <d_expression_1+0x366>
   154bc:	2b6f      	cmp	r3, #111	; 0x6f
   154be:	d015      	beq.n	154ec <d_expression_1+0x3c8>
   154c0:	2b69      	cmp	r3, #105	; 0x69
   154c2:	f47f aeaa 	bne.w	1521a <d_expression_1+0xf6>
   154c6:	784b      	ldrb	r3, [r1, #1]
   154c8:	2b6c      	cmp	r3, #108	; 0x6c
   154ca:	f47f ae50 	bne.w	1516e <d_expression_1+0x4a>
   154ce:	2500      	movs	r5, #0
   154d0:	3102      	adds	r1, #2
   154d2:	60e1      	str	r1, [r4, #12]
   154d4:	4620      	mov	r0, r4
   154d6:	2145      	movs	r1, #69	; 0x45
   154d8:	f7ff fbc6 	bl	14c68 <d_exprlist>
   154dc:	462a      	mov	r2, r5
   154de:	4603      	mov	r3, r0
   154e0:	2130      	movs	r1, #48	; 0x30
   154e2:	4620      	mov	r0, r4
   154e4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   154e8:	f7fe bfb0 	b.w	1444c <d_make_comp>
   154ec:	784b      	ldrb	r3, [r1, #1]
   154ee:	2b6e      	cmp	r3, #110	; 0x6e
   154f0:	f47f ae3d 	bne.w	1516e <d_expression_1+0x4a>
   154f4:	3102      	adds	r1, #2
   154f6:	60c1      	str	r1, [r0, #12]
   154f8:	e628      	b.n	1514c <d_expression_1+0x28>
   154fa:	2700      	movs	r7, #0
   154fc:	e7c1      	b.n	15482 <d_expression_1+0x35e>
   154fe:	bf00      	nop
   15500:	0002481c 	.word	0x0002481c
   15504:	00024328 	.word	0x00024328
   15508:	0002431c 	.word	0x0002431c
   1550c:	00024320 	.word	0x00024320
   15510:	00024324 	.word	0x00024324
   15514:	00024318 	.word	0x00024318

00015518 <d_template_args_1>:
   15518:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   1551c:	68c2      	ldr	r2, [r0, #12]
   1551e:	f8d0 802c 	ldr.w	r8, [r0, #44]	; 0x2c
   15522:	7813      	ldrb	r3, [r2, #0]
   15524:	2b45      	cmp	r3, #69	; 0x45
   15526:	b083      	sub	sp, #12
   15528:	4604      	mov	r4, r0
   1552a:	d04e      	beq.n	155ca <d_template_args_1+0xb2>
   1552c:	ae02      	add	r6, sp, #8
   1552e:	2100      	movs	r1, #0
   15530:	f846 1d04 	str.w	r1, [r6, #-4]!
   15534:	2701      	movs	r7, #1
   15536:	3b49      	subs	r3, #73	; 0x49
   15538:	2b0f      	cmp	r3, #15
   1553a:	d83e      	bhi.n	155ba <d_template_args_1+0xa2>
   1553c:	e8df f003 	tbb	[pc, r3]
   15540:	1b3d3838 	.word	0x1b3d3838
   15544:	3d3d3d3d 	.word	0x3d3d3d3d
   15548:	3d3d3d3d 	.word	0x3d3d3d3d
   1554c:	083d3d3d 	.word	0x083d3d3d
   15550:	3201      	adds	r2, #1
   15552:	f8d4 9034 	ldr.w	r9, [r4, #52]	; 0x34
   15556:	60e2      	str	r2, [r4, #12]
   15558:	6367      	str	r7, [r4, #52]	; 0x34
   1555a:	4620      	mov	r0, r4
   1555c:	f7ff fde2 	bl	15124 <d_expression_1>
   15560:	68e3      	ldr	r3, [r4, #12]
   15562:	f8c4 9034 	str.w	r9, [r4, #52]	; 0x34
   15566:	781a      	ldrb	r2, [r3, #0]
   15568:	2a45      	cmp	r2, #69	; 0x45
   1556a:	4605      	mov	r5, r0
   1556c:	d02a      	beq.n	155c4 <d_template_args_1+0xac>
   1556e:	2000      	movs	r0, #0
   15570:	b003      	add	sp, #12
   15572:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   15576:	4620      	mov	r0, r4
   15578:	f001 faee 	bl	16b58 <d_expr_primary>
   1557c:	4605      	mov	r5, r0
   1557e:	2300      	movs	r3, #0
   15580:	212f      	movs	r1, #47	; 0x2f
   15582:	462a      	mov	r2, r5
   15584:	4620      	mov	r0, r4
   15586:	2d00      	cmp	r5, #0
   15588:	d0f1      	beq.n	1556e <d_template_args_1+0x56>
   1558a:	f7fe ff5f 	bl	1444c <d_make_comp>
   1558e:	6030      	str	r0, [r6, #0]
   15590:	f100 0608 	add.w	r6, r0, #8
   15594:	2800      	cmp	r0, #0
   15596:	d0ea      	beq.n	1556e <d_template_args_1+0x56>
   15598:	68e2      	ldr	r2, [r4, #12]
   1559a:	7813      	ldrb	r3, [r2, #0]
   1559c:	2b45      	cmp	r3, #69	; 0x45
   1559e:	d1ca      	bne.n	15536 <d_template_args_1+0x1e>
   155a0:	9801      	ldr	r0, [sp, #4]
   155a2:	f8c4 802c 	str.w	r8, [r4, #44]	; 0x2c
   155a6:	3201      	adds	r2, #1
   155a8:	60e2      	str	r2, [r4, #12]
   155aa:	b003      	add	sp, #12
   155ac:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   155b0:	4620      	mov	r0, r4
   155b2:	f000 f815 	bl	155e0 <d_template_args>
   155b6:	4605      	mov	r5, r0
   155b8:	e7e1      	b.n	1557e <d_template_args_1+0x66>
   155ba:	4620      	mov	r0, r4
   155bc:	f000 f9d6 	bl	1596c <d_type>
   155c0:	4605      	mov	r5, r0
   155c2:	e7dc      	b.n	1557e <d_template_args_1+0x66>
   155c4:	3301      	adds	r3, #1
   155c6:	60e3      	str	r3, [r4, #12]
   155c8:	e7d9      	b.n	1557e <d_template_args_1+0x66>
   155ca:	3201      	adds	r2, #1
   155cc:	2300      	movs	r3, #0
   155ce:	60c2      	str	r2, [r0, #12]
   155d0:	212f      	movs	r1, #47	; 0x2f
   155d2:	461a      	mov	r2, r3
   155d4:	b003      	add	sp, #12
   155d6:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
   155da:	f7fe bf37 	b.w	1444c <d_make_comp>
   155de:	bf00      	nop

000155e0 <d_template_args>:
   155e0:	68c2      	ldr	r2, [r0, #12]
   155e2:	7813      	ldrb	r3, [r2, #0]
   155e4:	3b49      	subs	r3, #73	; 0x49
   155e6:	2b01      	cmp	r3, #1
   155e8:	d802      	bhi.n	155f0 <d_template_args+0x10>
   155ea:	3201      	adds	r2, #1
   155ec:	60c2      	str	r2, [r0, #12]
   155ee:	e793      	b.n	15518 <d_template_args_1>
   155f0:	2000      	movs	r0, #0
   155f2:	4770      	bx	lr

000155f4 <d_name>:
   155f4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   155f8:	68c2      	ldr	r2, [r0, #12]
   155fa:	7813      	ldrb	r3, [r2, #0]
   155fc:	3b4e      	subs	r3, #78	; 0x4e
   155fe:	b085      	sub	sp, #20
   15600:	4605      	mov	r5, r0
   15602:	2b0c      	cmp	r3, #12
   15604:	d870      	bhi.n	156e8 <d_name+0xf4>
   15606:	e8df f003 	tbb	[pc, r3]
   1560a:	6f1e      	.short	0x6f1e
   1560c:	5b6f6f6f 	.word	0x5b6f6f6f
   15610:	6f6f176f 	.word	0x6f6f176f
   15614:	6f6f      	.short	0x6f6f
   15616:	07          	.byte	0x07
   15617:	00          	.byte	0x00
   15618:	3201      	adds	r2, #1
   1561a:	2100      	movs	r1, #0
   1561c:	60c2      	str	r2, [r0, #12]
   1561e:	f000 ffbd 	bl	1659c <d_encoding>
   15622:	68eb      	ldr	r3, [r5, #12]
   15624:	7819      	ldrb	r1, [r3, #0]
   15626:	2945      	cmp	r1, #69	; 0x45
   15628:	4606      	mov	r6, r0
   1562a:	f000 8099 	beq.w	15760 <d_name+0x16c>
   1562e:	2200      	movs	r2, #0
   15630:	4610      	mov	r0, r2
   15632:	b005      	add	sp, #20
   15634:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   15638:	f000 fe40 	bl	162bc <d_unqualified_name>
   1563c:	4602      	mov	r2, r0
   1563e:	4610      	mov	r0, r2
   15640:	b005      	add	sp, #20
   15642:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   15646:	3201      	adds	r2, #1
   15648:	60c2      	str	r2, [r0, #12]
   1564a:	a903      	add	r1, sp, #12
   1564c:	2201      	movs	r2, #1
   1564e:	f7fe ff49 	bl	144e4 <d_cv_qualifiers>
   15652:	4681      	mov	r9, r0
   15654:	2800      	cmp	r0, #0
   15656:	d0ea      	beq.n	1562e <d_name+0x3a>
   15658:	2100      	movs	r1, #0
   1565a:	4628      	mov	r0, r5
   1565c:	f7fe ffa8 	bl	145b0 <d_ref_qualifier>
   15660:	68ea      	ldr	r2, [r5, #12]
   15662:	4eb4      	ldr	r6, [pc, #720]	; (15934 <d_name+0x340>)
   15664:	7814      	ldrb	r4, [r2, #0]
   15666:	4680      	mov	r8, r0
   15668:	2700      	movs	r7, #0
   1566a:	2c00      	cmp	r4, #0
   1566c:	f000 80e8 	beq.w	15840 <d_name+0x24c>
   15670:	2c44      	cmp	r4, #68	; 0x44
   15672:	f000 80d1 	beq.w	15818 <d_name+0x224>
   15676:	f1a4 0330 	sub.w	r3, r4, #48	; 0x30
   1567a:	b2db      	uxtb	r3, r3
   1567c:	2b1c      	cmp	r3, #28
   1567e:	f240 80a8 	bls.w	157d2 <d_name+0x1de>
   15682:	f1a4 0361 	sub.w	r3, r4, #97	; 0x61
   15686:	2b19      	cmp	r3, #25
   15688:	f240 80a8 	bls.w	157dc <d_name+0x1e8>
   1568c:	2c55      	cmp	r4, #85	; 0x55
   1568e:	f000 80de 	beq.w	1584e <d_name+0x25a>
   15692:	2c53      	cmp	r4, #83	; 0x53
   15694:	f000 80f1 	beq.w	1587a <d_name+0x286>
   15698:	2c49      	cmp	r4, #73	; 0x49
   1569a:	f000 80da 	beq.w	15852 <d_name+0x25e>
   1569e:	2c54      	cmp	r4, #84	; 0x54
   156a0:	f000 811f 	beq.w	158e2 <d_name+0x2ee>
   156a4:	2c45      	cmp	r4, #69	; 0x45
   156a6:	f000 814b 	beq.w	15940 <d_name+0x34c>
   156aa:	2c4d      	cmp	r4, #77	; 0x4d
   156ac:	f040 80c8 	bne.w	15840 <d_name+0x24c>
   156b0:	2f00      	cmp	r7, #0
   156b2:	f000 80c5 	beq.w	15840 <d_name+0x24c>
   156b6:	1c53      	adds	r3, r2, #1
   156b8:	60eb      	str	r3, [r5, #12]
   156ba:	7854      	ldrb	r4, [r2, #1]
   156bc:	461a      	mov	r2, r3
   156be:	e7d4      	b.n	1566a <d_name+0x76>
   156c0:	7853      	ldrb	r3, [r2, #1]
   156c2:	2b74      	cmp	r3, #116	; 0x74
   156c4:	d031      	beq.n	1572a <d_name+0x136>
   156c6:	2100      	movs	r1, #0
   156c8:	f7ff f90a 	bl	148e0 <d_substitution>
   156cc:	68eb      	ldr	r3, [r5, #12]
   156ce:	7819      	ldrb	r1, [r3, #0]
   156d0:	2949      	cmp	r1, #73	; 0x49
   156d2:	4602      	mov	r2, r0
   156d4:	d1b3      	bne.n	1563e <d_name+0x4a>
   156d6:	3301      	adds	r3, #1
   156d8:	60eb      	str	r3, [r5, #12]
   156da:	4628      	mov	r0, r5
   156dc:	9201      	str	r2, [sp, #4]
   156de:	f7ff ff1b 	bl	15518 <d_template_args_1>
   156e2:	9a01      	ldr	r2, [sp, #4]
   156e4:	4603      	mov	r3, r0
   156e6:	e017      	b.n	15718 <d_name+0x124>
   156e8:	f000 fde8 	bl	162bc <d_unqualified_name>
   156ec:	68eb      	ldr	r3, [r5, #12]
   156ee:	7819      	ldrb	r1, [r3, #0]
   156f0:	2949      	cmp	r1, #73	; 0x49
   156f2:	4602      	mov	r2, r0
   156f4:	d1a3      	bne.n	1563e <d_name+0x4a>
   156f6:	2a00      	cmp	r2, #0
   156f8:	d099      	beq.n	1562e <d_name+0x3a>
   156fa:	6a29      	ldr	r1, [r5, #32]
   156fc:	6a68      	ldr	r0, [r5, #36]	; 0x24
   156fe:	4281      	cmp	r1, r0
   15700:	da95      	bge.n	1562e <d_name+0x3a>
   15702:	69ec      	ldr	r4, [r5, #28]
   15704:	1c48      	adds	r0, r1, #1
   15706:	f844 2021 	str.w	r2, [r4, r1, lsl #2]
   1570a:	6228      	str	r0, [r5, #32]
   1570c:	7819      	ldrb	r1, [r3, #0]
   1570e:	3949      	subs	r1, #73	; 0x49
   15710:	2901      	cmp	r1, #1
   15712:	bf88      	it	hi
   15714:	2300      	movhi	r3, #0
   15716:	d9de      	bls.n	156d6 <d_name+0xe2>
   15718:	4628      	mov	r0, r5
   1571a:	2104      	movs	r1, #4
   1571c:	f7fe fe96 	bl	1444c <d_make_comp>
   15720:	4602      	mov	r2, r0
   15722:	4610      	mov	r0, r2
   15724:	b005      	add	sp, #20
   15726:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   1572a:	6943      	ldr	r3, [r0, #20]
   1572c:	6981      	ldr	r1, [r0, #24]
   1572e:	3202      	adds	r2, #2
   15730:	428b      	cmp	r3, r1
   15732:	60c2      	str	r2, [r0, #12]
   15734:	f2c0 80ab 	blt.w	1588e <d_name+0x29a>
   15738:	2400      	movs	r4, #0
   1573a:	4628      	mov	r0, r5
   1573c:	f000 fdbe 	bl	162bc <d_unqualified_name>
   15740:	4622      	mov	r2, r4
   15742:	4603      	mov	r3, r0
   15744:	2101      	movs	r1, #1
   15746:	4628      	mov	r0, r5
   15748:	f7fe fe80 	bl	1444c <d_make_comp>
   1574c:	6b29      	ldr	r1, [r5, #48]	; 0x30
   1574e:	68eb      	ldr	r3, [r5, #12]
   15750:	3103      	adds	r1, #3
   15752:	6329      	str	r1, [r5, #48]	; 0x30
   15754:	7819      	ldrb	r1, [r3, #0]
   15756:	2949      	cmp	r1, #73	; 0x49
   15758:	4602      	mov	r2, r0
   1575a:	f47f af70 	bne.w	1563e <d_name+0x4a>
   1575e:	e7ca      	b.n	156f6 <d_name+0x102>
   15760:	1c5a      	adds	r2, r3, #1
   15762:	60ea      	str	r2, [r5, #12]
   15764:	7859      	ldrb	r1, [r3, #1]
   15766:	2973      	cmp	r1, #115	; 0x73
   15768:	f000 80a3 	beq.w	158b2 <d_name+0x2be>
   1576c:	2964      	cmp	r1, #100	; 0x64
   1576e:	f000 80bc 	beq.w	158ea <d_name+0x2f6>
   15772:	4628      	mov	r0, r5
   15774:	f7ff ff3e 	bl	155f4 <d_name>
   15778:	4604      	mov	r4, r0
   1577a:	2800      	cmp	r0, #0
   1577c:	d072      	beq.n	15864 <d_name+0x270>
   1577e:	7803      	ldrb	r3, [r0, #0]
   15780:	2b45      	cmp	r3, #69	; 0x45
   15782:	f000 8094 	beq.w	158ae <d_name+0x2ba>
   15786:	2b47      	cmp	r3, #71	; 0x47
   15788:	f000 8091 	beq.w	158ae <d_name+0x2ba>
   1578c:	68eb      	ldr	r3, [r5, #12]
   1578e:	781a      	ldrb	r2, [r3, #0]
   15790:	2a5f      	cmp	r2, #95	; 0x5f
   15792:	f040 808c 	bne.w	158ae <d_name+0x2ba>
   15796:	f04f 37ff 	mov.w	r7, #4294967295
   1579a:	4628      	mov	r0, r5
   1579c:	3301      	adds	r3, #1
   1579e:	f840 3f0c 	str.w	r3, [r0, #12]!
   157a2:	f7fe ffa5 	bl	146f0 <d_number.isra.0>
   157a6:	2800      	cmp	r0, #0
   157a8:	f6ff af41 	blt.w	1562e <d_name+0x3a>
   157ac:	1c7b      	adds	r3, r7, #1
   157ae:	d07e      	beq.n	158ae <d_name+0x2ba>
   157b0:	696b      	ldr	r3, [r5, #20]
   157b2:	69aa      	ldr	r2, [r5, #24]
   157b4:	4293      	cmp	r3, r2
   157b6:	da55      	bge.n	15864 <d_name+0x270>
   157b8:	eb03 0243 	add.w	r2, r3, r3, lsl #1
   157bc:	6929      	ldr	r1, [r5, #16]
   157be:	3301      	adds	r3, #1
   157c0:	0092      	lsls	r2, r2, #2
   157c2:	616b      	str	r3, [r5, #20]
   157c4:	188b      	adds	r3, r1, r2
   157c6:	d04e      	beq.n	15866 <d_name+0x272>
   157c8:	2046      	movs	r0, #70	; 0x46
   157ca:	5488      	strb	r0, [r1, r2]
   157cc:	609f      	str	r7, [r3, #8]
   157ce:	605c      	str	r4, [r3, #4]
   157d0:	e049      	b.n	15866 <d_name+0x272>
   157d2:	fa26 f303 	lsr.w	r3, r6, r3
   157d6:	07d9      	lsls	r1, r3, #31
   157d8:	f57f af53 	bpl.w	15682 <d_name+0x8e>
   157dc:	4628      	mov	r0, r5
   157de:	f000 fd6d 	bl	162bc <d_unqualified_name>
   157e2:	b347      	cbz	r7, 15836 <d_name+0x242>
   157e4:	2101      	movs	r1, #1
   157e6:	4603      	mov	r3, r0
   157e8:	463a      	mov	r2, r7
   157ea:	4628      	mov	r0, r5
   157ec:	f7fe fe2e 	bl	1444c <d_make_comp>
   157f0:	4607      	mov	r7, r0
   157f2:	2c53      	cmp	r4, #83	; 0x53
   157f4:	d01c      	beq.n	15830 <d_name+0x23c>
   157f6:	68ea      	ldr	r2, [r5, #12]
   157f8:	7814      	ldrb	r4, [r2, #0]
   157fa:	2c45      	cmp	r4, #69	; 0x45
   157fc:	f43f af3b 	beq.w	15676 <d_name+0x82>
   15800:	b1f7      	cbz	r7, 15840 <d_name+0x24c>
   15802:	6a2b      	ldr	r3, [r5, #32]
   15804:	6a69      	ldr	r1, [r5, #36]	; 0x24
   15806:	428b      	cmp	r3, r1
   15808:	da1a      	bge.n	15840 <d_name+0x24c>
   1580a:	69e9      	ldr	r1, [r5, #28]
   1580c:	1c58      	adds	r0, r3, #1
   1580e:	f841 7023 	str.w	r7, [r1, r3, lsl #2]
   15812:	6228      	str	r0, [r5, #32]
   15814:	7814      	ldrb	r4, [r2, #0]
   15816:	e728      	b.n	1566a <d_name+0x76>
   15818:	7853      	ldrb	r3, [r2, #1]
   1581a:	f003 03df 	and.w	r3, r3, #223	; 0xdf
   1581e:	2b54      	cmp	r3, #84	; 0x54
   15820:	4628      	mov	r0, r5
   15822:	d00a      	beq.n	1583a <d_name+0x246>
   15824:	f000 fd4a 	bl	162bc <d_unqualified_name>
   15828:	2f00      	cmp	r7, #0
   1582a:	d1db      	bne.n	157e4 <d_name+0x1f0>
   1582c:	4607      	mov	r7, r0
   1582e:	e7e2      	b.n	157f6 <d_name+0x202>
   15830:	68ea      	ldr	r2, [r5, #12]
   15832:	7814      	ldrb	r4, [r2, #0]
   15834:	e719      	b.n	1566a <d_name+0x76>
   15836:	4607      	mov	r7, r0
   15838:	e7db      	b.n	157f2 <d_name+0x1fe>
   1583a:	f000 f897 	bl	1596c <d_type>
   1583e:	e7f3      	b.n	15828 <d_name+0x234>
   15840:	2200      	movs	r2, #0
   15842:	4610      	mov	r0, r2
   15844:	f8c9 2000 	str.w	r2, [r9]
   15848:	b005      	add	sp, #20
   1584a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   1584e:	4628      	mov	r0, r5
   15850:	e7e8      	b.n	15824 <d_name+0x230>
   15852:	2f00      	cmp	r7, #0
   15854:	d0f4      	beq.n	15840 <d_name+0x24c>
   15856:	3201      	adds	r2, #1
   15858:	60ea      	str	r2, [r5, #12]
   1585a:	4628      	mov	r0, r5
   1585c:	f7ff fe5c 	bl	15518 <d_template_args_1>
   15860:	2104      	movs	r1, #4
   15862:	e7c0      	b.n	157e6 <d_name+0x1f2>
   15864:	2300      	movs	r3, #0
   15866:	4632      	mov	r2, r6
   15868:	4628      	mov	r0, r5
   1586a:	2102      	movs	r1, #2
   1586c:	f7fe fdee 	bl	1444c <d_make_comp>
   15870:	4602      	mov	r2, r0
   15872:	4610      	mov	r0, r2
   15874:	b005      	add	sp, #20
   15876:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   1587a:	2101      	movs	r1, #1
   1587c:	4628      	mov	r0, r5
   1587e:	f7ff f82f 	bl	148e0 <d_substitution>
   15882:	2f00      	cmp	r7, #0
   15884:	d1ae      	bne.n	157e4 <d_name+0x1f0>
   15886:	68ea      	ldr	r2, [r5, #12]
   15888:	4607      	mov	r7, r0
   1588a:	7814      	ldrb	r4, [r2, #0]
   1588c:	e6ed      	b.n	1566a <d_name+0x76>
   1588e:	eb03 0243 	add.w	r2, r3, r3, lsl #1
   15892:	6901      	ldr	r1, [r0, #16]
   15894:	0092      	lsls	r2, r2, #2
   15896:	3301      	adds	r3, #1
   15898:	188c      	adds	r4, r1, r2
   1589a:	6143      	str	r3, [r0, #20]
   1589c:	f43f af4d 	beq.w	1573a <d_name+0x146>
   158a0:	2300      	movs	r3, #0
   158a2:	548b      	strb	r3, [r1, r2]
   158a4:	4824      	ldr	r0, [pc, #144]	; (15938 <d_name+0x344>)
   158a6:	6060      	str	r0, [r4, #4]
   158a8:	2303      	movs	r3, #3
   158aa:	60a3      	str	r3, [r4, #8]
   158ac:	e745      	b.n	1573a <d_name+0x146>
   158ae:	4623      	mov	r3, r4
   158b0:	e7d9      	b.n	15866 <d_name+0x272>
   158b2:	1c9a      	adds	r2, r3, #2
   158b4:	60ea      	str	r2, [r5, #12]
   158b6:	789a      	ldrb	r2, [r3, #2]
   158b8:	2a5f      	cmp	r2, #95	; 0x5f
   158ba:	d032      	beq.n	15922 <d_name+0x32e>
   158bc:	696b      	ldr	r3, [r5, #20]
   158be:	69aa      	ldr	r2, [r5, #24]
   158c0:	4293      	cmp	r3, r2
   158c2:	dacf      	bge.n	15864 <d_name+0x270>
   158c4:	eb03 0243 	add.w	r2, r3, r3, lsl #1
   158c8:	6929      	ldr	r1, [r5, #16]
   158ca:	3301      	adds	r3, #1
   158cc:	0092      	lsls	r2, r2, #2
   158ce:	616b      	str	r3, [r5, #20]
   158d0:	188b      	adds	r3, r1, r2
   158d2:	d0c8      	beq.n	15866 <d_name+0x272>
   158d4:	2400      	movs	r4, #0
   158d6:	548c      	strb	r4, [r1, r2]
   158d8:	4818      	ldr	r0, [pc, #96]	; (1593c <d_name+0x348>)
   158da:	6058      	str	r0, [r3, #4]
   158dc:	220e      	movs	r2, #14
   158de:	609a      	str	r2, [r3, #8]
   158e0:	e7c1      	b.n	15866 <d_name+0x272>
   158e2:	4628      	mov	r0, r5
   158e4:	f7fe ff62 	bl	147ac <d_template_param>
   158e8:	e79e      	b.n	15828 <d_name+0x234>
   158ea:	3302      	adds	r3, #2
   158ec:	60eb      	str	r3, [r5, #12]
   158ee:	4628      	mov	r0, r5
   158f0:	f7fe ff40 	bl	14774 <d_compact_number>
   158f4:	1e07      	subs	r7, r0, #0
   158f6:	f6ff ae9a 	blt.w	1562e <d_name+0x3a>
   158fa:	4628      	mov	r0, r5
   158fc:	f7ff fe7a 	bl	155f4 <d_name>
   15900:	4604      	mov	r4, r0
   15902:	2800      	cmp	r0, #0
   15904:	f43f af54 	beq.w	157b0 <d_name+0x1bc>
   15908:	7803      	ldrb	r3, [r0, #0]
   1590a:	2b45      	cmp	r3, #69	; 0x45
   1590c:	f43f af50 	beq.w	157b0 <d_name+0x1bc>
   15910:	2b47      	cmp	r3, #71	; 0x47
   15912:	f43f af4d 	beq.w	157b0 <d_name+0x1bc>
   15916:	68eb      	ldr	r3, [r5, #12]
   15918:	781a      	ldrb	r2, [r3, #0]
   1591a:	2a5f      	cmp	r2, #95	; 0x5f
   1591c:	f47f af48 	bne.w	157b0 <d_name+0x1bc>
   15920:	e73b      	b.n	1579a <d_name+0x1a6>
   15922:	4628      	mov	r0, r5
   15924:	3303      	adds	r3, #3
   15926:	f840 3f0c 	str.w	r3, [r0, #12]!
   1592a:	f7fe fee1 	bl	146f0 <d_number.isra.0>
   1592e:	2800      	cmp	r0, #0
   15930:	dac4      	bge.n	158bc <d_name+0x2c8>
   15932:	e67c      	b.n	1562e <d_name+0x3a>
   15934:	100803ff 	.word	0x100803ff
   15938:	0002433c 	.word	0x0002433c
   1593c:	0002432c 	.word	0x0002432c
   15940:	f8c9 7000 	str.w	r7, [r9]
   15944:	2f00      	cmp	r7, #0
   15946:	f43f ae72 	beq.w	1562e <d_name+0x3a>
   1594a:	f1b8 0f00 	cmp.w	r8, #0
   1594e:	d004      	beq.n	1595a <d_name+0x366>
   15950:	9b03      	ldr	r3, [sp, #12]
   15952:	f8c8 3004 	str.w	r3, [r8, #4]
   15956:	f8cd 800c 	str.w	r8, [sp, #12]
   1595a:	7813      	ldrb	r3, [r2, #0]
   1595c:	2b45      	cmp	r3, #69	; 0x45
   1595e:	f47f ae66 	bne.w	1562e <d_name+0x3a>
   15962:	3201      	adds	r2, #1
   15964:	60ea      	str	r2, [r5, #12]
   15966:	9a03      	ldr	r2, [sp, #12]
   15968:	e669      	b.n	1563e <d_name+0x4a>
   1596a:	bf00      	nop

0001596c <d_type>:
   1596c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   15970:	68c2      	ldr	r2, [r0, #12]
   15972:	7813      	ldrb	r3, [r2, #0]
   15974:	2b72      	cmp	r3, #114	; 0x72
   15976:	b083      	sub	sp, #12
   15978:	4604      	mov	r4, r0
   1597a:	d058      	beq.n	15a2e <d_type+0xc2>
   1597c:	2b56      	cmp	r3, #86	; 0x56
   1597e:	d056      	beq.n	15a2e <d_type+0xc2>
   15980:	2b4b      	cmp	r3, #75	; 0x4b
   15982:	d054      	beq.n	15a2e <d_type+0xc2>
   15984:	2b44      	cmp	r3, #68	; 0x44
   15986:	f000 809f 	beq.w	15ac8 <d_type+0x15c>
   1598a:	f1a3 0130 	sub.w	r1, r3, #48	; 0x30
   1598e:	294a      	cmp	r1, #74	; 0x4a
   15990:	f200 808a 	bhi.w	15aa8 <d_type+0x13c>
   15994:	e8df f011 	tbh	[pc, r1, lsl #1]
   15998:	012a012a 	.word	0x012a012a
   1599c:	012a012a 	.word	0x012a012a
   159a0:	012a012a 	.word	0x012a012a
   159a4:	012a012a 	.word	0x012a012a
   159a8:	012a012a 	.word	0x012a012a
   159ac:	00880088 	.word	0x00880088
   159b0:	00880088 	.word	0x00880088
   159b4:	00880088 	.word	0x00880088
   159b8:	020b0088 	.word	0x020b0088
   159bc:	01520088 	.word	0x01520088
   159c0:	00880088 	.word	0x00880088
   159c4:	0160014c 	.word	0x0160014c
   159c8:	00880088 	.word	0x00880088
   159cc:	00880088 	.word	0x00880088
   159d0:	016e0088 	.word	0x016e0088
   159d4:	0186012a 	.word	0x0186012a
   159d8:	008801c3 	.word	0x008801c3
   159dc:	01a20194 	.word	0x01a20194
   159e0:	01f301d1 	.word	0x01f301d1
   159e4:	00880088 	.word	0x00880088
   159e8:	00880088 	.word	0x00880088
   159ec:	0088012a 	.word	0x0088012a
   159f0:	00880088 	.word	0x00880088
   159f4:	00880088 	.word	0x00880088
   159f8:	010c0088 	.word	0x010c0088
   159fc:	010c010c 	.word	0x010c010c
   15a00:	010c010c 	.word	0x010c010c
   15a04:	010c010c 	.word	0x010c010c
   15a08:	010c010c 	.word	0x010c010c
   15a0c:	0088010c 	.word	0x0088010c
   15a10:	010c010c 	.word	0x010c010c
   15a14:	010c010c 	.word	0x010c010c
   15a18:	00880088 	.word	0x00880088
   15a1c:	010c0088 	.word	0x010c0088
   15a20:	013e010c 	.word	0x013e010c
   15a24:	010c010c 	.word	0x010c010c
   15a28:	010c010c 	.word	0x010c010c
   15a2c:	010c      	.short	0x010c
   15a2e:	2200      	movs	r2, #0
   15a30:	a901      	add	r1, sp, #4
   15a32:	4620      	mov	r0, r4
   15a34:	f7fe fd56 	bl	144e4 <d_cv_qualifiers>
   15a38:	4605      	mov	r5, r0
   15a3a:	2800      	cmp	r0, #0
   15a3c:	d034      	beq.n	15aa8 <d_type+0x13c>
   15a3e:	68e3      	ldr	r3, [r4, #12]
   15a40:	781b      	ldrb	r3, [r3, #0]
   15a42:	2b46      	cmp	r3, #70	; 0x46
   15a44:	4620      	mov	r0, r4
   15a46:	d034      	beq.n	15ab2 <d_type+0x146>
   15a48:	f7ff ff90 	bl	1596c <d_type>
   15a4c:	6028      	str	r0, [r5, #0]
   15a4e:	b358      	cbz	r0, 15aa8 <d_type+0x13c>
   15a50:	7803      	ldrb	r3, [r0, #0]
   15a52:	3b1f      	subs	r3, #31
   15a54:	2b01      	cmp	r3, #1
   15a56:	d930      	bls.n	15aba <d_type+0x14e>
   15a58:	9a01      	ldr	r2, [sp, #4]
   15a5a:	b32a      	cbz	r2, 15aa8 <d_type+0x13c>
   15a5c:	6a23      	ldr	r3, [r4, #32]
   15a5e:	6a61      	ldr	r1, [r4, #36]	; 0x24
   15a60:	428b      	cmp	r3, r1
   15a62:	da21      	bge.n	15aa8 <d_type+0x13c>
   15a64:	69e0      	ldr	r0, [r4, #28]
   15a66:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
   15a6a:	9d01      	ldr	r5, [sp, #4]
   15a6c:	1c59      	adds	r1, r3, #1
   15a6e:	4628      	mov	r0, r5
   15a70:	6221      	str	r1, [r4, #32]
   15a72:	b003      	add	sp, #12
   15a74:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   15a78:	2301      	movs	r3, #1
   15a7a:	6b45      	ldr	r5, [r0, #52]	; 0x34
   15a7c:	6343      	str	r3, [r0, #52]	; 0x34
   15a7e:	f7ff fb51 	bl	15124 <d_expression_1>
   15a82:	6365      	str	r5, [r4, #52]	; 0x34
   15a84:	4602      	mov	r2, r0
   15a86:	2300      	movs	r3, #0
   15a88:	2142      	movs	r1, #66	; 0x42
   15a8a:	4620      	mov	r0, r4
   15a8c:	f7fe fcde 	bl	1444c <d_make_comp>
   15a90:	4605      	mov	r5, r0
   15a92:	9001      	str	r0, [sp, #4]
   15a94:	b140      	cbz	r0, 15aa8 <d_type+0x13c>
   15a96:	68e3      	ldr	r3, [r4, #12]
   15a98:	781a      	ldrb	r2, [r3, #0]
   15a9a:	b12a      	cbz	r2, 15aa8 <d_type+0x13c>
   15a9c:	1c5a      	adds	r2, r3, #1
   15a9e:	60e2      	str	r2, [r4, #12]
   15aa0:	781b      	ldrb	r3, [r3, #0]
   15aa2:	2b45      	cmp	r3, #69	; 0x45
   15aa4:	f000 80aa 	beq.w	15bfc <d_type+0x290>
   15aa8:	2500      	movs	r5, #0
   15aaa:	4628      	mov	r0, r5
   15aac:	b003      	add	sp, #12
   15aae:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   15ab2:	f000 fd53 	bl	1655c <d_function_type>
   15ab6:	6028      	str	r0, [r5, #0]
   15ab8:	e7c9      	b.n	15a4e <d_type+0xe2>
   15aba:	9a01      	ldr	r2, [sp, #4]
   15abc:	6843      	ldr	r3, [r0, #4]
   15abe:	6042      	str	r2, [r0, #4]
   15ac0:	682a      	ldr	r2, [r5, #0]
   15ac2:	9201      	str	r2, [sp, #4]
   15ac4:	602b      	str	r3, [r5, #0]
   15ac6:	e7c7      	b.n	15a58 <d_type+0xec>
   15ac8:	7853      	ldrb	r3, [r2, #1]
   15aca:	2b78      	cmp	r3, #120	; 0x78
   15acc:	d0af      	beq.n	15a2e <d_type+0xc2>
   15ace:	1c53      	adds	r3, r2, #1
   15ad0:	60c3      	str	r3, [r0, #12]
   15ad2:	7853      	ldrb	r3, [r2, #1]
   15ad4:	2b00      	cmp	r3, #0
   15ad6:	d0e7      	beq.n	15aa8 <d_type+0x13c>
   15ad8:	1c93      	adds	r3, r2, #2
   15ada:	60c3      	str	r3, [r0, #12]
   15adc:	7853      	ldrb	r3, [r2, #1]
   15ade:	3b46      	subs	r3, #70	; 0x46
   15ae0:	2b30      	cmp	r3, #48	; 0x30
   15ae2:	d8e1      	bhi.n	15aa8 <d_type+0x13c>
   15ae4:	a101      	add	r1, pc, #4	; (adr r1, 15aec <d_type+0x180>)
   15ae6:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
   15aea:	bf00      	nop
   15aec:	00015fd7 	.word	0x00015fd7
   15af0:	00015aa9 	.word	0x00015aa9
   15af4:	00015aa9 	.word	0x00015aa9
   15af8:	00015aa9 	.word	0x00015aa9
   15afc:	00015aa9 	.word	0x00015aa9
   15b00:	00015aa9 	.word	0x00015aa9
   15b04:	00015aa9 	.word	0x00015aa9
   15b08:	00015aa9 	.word	0x00015aa9
   15b0c:	00015aa9 	.word	0x00015aa9
   15b10:	00015aa9 	.word	0x00015aa9
   15b14:	00015aa9 	.word	0x00015aa9
   15b18:	00015aa9 	.word	0x00015aa9
   15b1c:	00015aa9 	.word	0x00015aa9
   15b20:	00015aa9 	.word	0x00015aa9
   15b24:	00015a79 	.word	0x00015a79
   15b28:	00015aa9 	.word	0x00015aa9
   15b2c:	00015aa9 	.word	0x00015aa9
   15b30:	00015aa9 	.word	0x00015aa9
   15b34:	00015aa9 	.word	0x00015aa9
   15b38:	00015aa9 	.word	0x00015aa9
   15b3c:	00015aa9 	.word	0x00015aa9
   15b40:	00015aa9 	.word	0x00015aa9
   15b44:	00015aa9 	.word	0x00015aa9
   15b48:	00015aa9 	.word	0x00015aa9
   15b4c:	00015aa9 	.word	0x00015aa9
   15b50:	00015aa9 	.word	0x00015aa9
   15b54:	00015aa9 	.word	0x00015aa9
   15b58:	00015fab 	.word	0x00015fab
   15b5c:	00015aa9 	.word	0x00015aa9
   15b60:	00015f7f 	.word	0x00015f7f
   15b64:	00015f5f 	.word	0x00015f5f
   15b68:	00015f35 	.word	0x00015f35
   15b6c:	00015f07 	.word	0x00015f07
   15b70:	00015aa9 	.word	0x00015aa9
   15b74:	00015ed9 	.word	0x00015ed9
   15b78:	00015eb5 	.word	0x00015eb5
   15b7c:	00015aa9 	.word	0x00015aa9
   15b80:	00015aa9 	.word	0x00015aa9
   15b84:	00015aa9 	.word	0x00015aa9
   15b88:	00015aa9 	.word	0x00015aa9
   15b8c:	00015e7b 	.word	0x00015e7b
   15b90:	00015aa9 	.word	0x00015aa9
   15b94:	00015e65 	.word	0x00015e65
   15b98:	00015aa9 	.word	0x00015aa9
   15b9c:	00015aa9 	.word	0x00015aa9
   15ba0:	00015e37 	.word	0x00015e37
   15ba4:	00015a79 	.word	0x00015a79
   15ba8:	00015aa9 	.word	0x00015aa9
   15bac:	00015e01 	.word	0x00015e01
   15bb0:	6960      	ldr	r0, [r4, #20]
   15bb2:	69a5      	ldr	r5, [r4, #24]
   15bb4:	49bc      	ldr	r1, [pc, #752]	; (15ea8 <d_type+0x53c>)
   15bb6:	3b61      	subs	r3, #97	; 0x61
   15bb8:	eb03 0383 	add.w	r3, r3, r3, lsl #2
   15bbc:	42a8      	cmp	r0, r5
   15bbe:	eb01 0383 	add.w	r3, r1, r3, lsl #2
   15bc2:	f280 823a 	bge.w	1603a <d_type+0x6ce>
   15bc6:	eb00 0140 	add.w	r1, r0, r0, lsl #1
   15bca:	6926      	ldr	r6, [r4, #16]
   15bcc:	0089      	lsls	r1, r1, #2
   15bce:	3001      	adds	r0, #1
   15bd0:	1875      	adds	r5, r6, r1
   15bd2:	6160      	str	r0, [r4, #20]
   15bd4:	f000 8231 	beq.w	1603a <d_type+0x6ce>
   15bd8:	2027      	movs	r0, #39	; 0x27
   15bda:	5470      	strb	r0, [r6, r1]
   15bdc:	606b      	str	r3, [r5, #4]
   15bde:	6859      	ldr	r1, [r3, #4]
   15be0:	6b23      	ldr	r3, [r4, #48]	; 0x30
   15be2:	3201      	adds	r2, #1
   15be4:	440b      	add	r3, r1
   15be6:	60e2      	str	r2, [r4, #12]
   15be8:	6323      	str	r3, [r4, #48]	; 0x30
   15bea:	e75e      	b.n	15aaa <d_type+0x13e>
   15bec:	4620      	mov	r0, r4
   15bee:	f7ff fd01 	bl	155f4 <d_name>
   15bf2:	4605      	mov	r5, r0
   15bf4:	9001      	str	r0, [sp, #4]
   15bf6:	2d00      	cmp	r5, #0
   15bf8:	f43f af56 	beq.w	15aa8 <d_type+0x13c>
   15bfc:	6a23      	ldr	r3, [r4, #32]
   15bfe:	6a62      	ldr	r2, [r4, #36]	; 0x24
   15c00:	4293      	cmp	r3, r2
   15c02:	f6bf af51 	bge.w	15aa8 <d_type+0x13c>
   15c06:	69e1      	ldr	r1, [r4, #28]
   15c08:	1c5a      	adds	r2, r3, #1
   15c0a:	f841 5023 	str.w	r5, [r1, r3, lsl #2]
   15c0e:	9d01      	ldr	r5, [sp, #4]
   15c10:	6222      	str	r2, [r4, #32]
   15c12:	e74a      	b.n	15aaa <d_type+0x13e>
   15c14:	3201      	adds	r2, #1
   15c16:	60e2      	str	r2, [r4, #12]
   15c18:	4620      	mov	r0, r4
   15c1a:	f7fe fde9 	bl	147f0 <d_source_name>
   15c1e:	2300      	movs	r3, #0
   15c20:	4602      	mov	r2, r0
   15c22:	2128      	movs	r1, #40	; 0x28
   15c24:	4620      	mov	r0, r4
   15c26:	f7fe fc11 	bl	1444c <d_make_comp>
   15c2a:	4605      	mov	r5, r0
   15c2c:	9001      	str	r0, [sp, #4]
   15c2e:	e7e2      	b.n	15bf6 <d_type+0x28a>
   15c30:	4620      	mov	r0, r4
   15c32:	f000 fc93 	bl	1655c <d_function_type>
   15c36:	4605      	mov	r5, r0
   15c38:	9001      	str	r0, [sp, #4]
   15c3a:	e7dc      	b.n	15bf6 <d_type+0x28a>
   15c3c:	3201      	adds	r2, #1
   15c3e:	60e2      	str	r2, [r4, #12]
   15c40:	4620      	mov	r0, r4
   15c42:	f7ff fe93 	bl	1596c <d_type>
   15c46:	2300      	movs	r3, #0
   15c48:	4602      	mov	r2, r0
   15c4a:	2125      	movs	r1, #37	; 0x25
   15c4c:	4620      	mov	r0, r4
   15c4e:	f7fe fbfd 	bl	1444c <d_make_comp>
   15c52:	4605      	mov	r5, r0
   15c54:	9001      	str	r0, [sp, #4]
   15c56:	e7ce      	b.n	15bf6 <d_type+0x28a>
   15c58:	3201      	adds	r2, #1
   15c5a:	60e2      	str	r2, [r4, #12]
   15c5c:	4620      	mov	r0, r4
   15c5e:	f7ff fe85 	bl	1596c <d_type>
   15c62:	2300      	movs	r3, #0
   15c64:	4602      	mov	r2, r0
   15c66:	2126      	movs	r1, #38	; 0x26
   15c68:	4620      	mov	r0, r4
   15c6a:	f7fe fbef 	bl	1444c <d_make_comp>
   15c6e:	4605      	mov	r5, r0
   15c70:	9001      	str	r0, [sp, #4]
   15c72:	e7c0      	b.n	15bf6 <d_type+0x28a>
   15c74:	3201      	adds	r2, #1
   15c76:	60e2      	str	r2, [r4, #12]
   15c78:	4620      	mov	r0, r4
   15c7a:	f7ff fe77 	bl	1596c <d_type>
   15c7e:	4605      	mov	r5, r0
   15c80:	2800      	cmp	r0, #0
   15c82:	f000 80bb 	beq.w	15dfc <d_type+0x490>
   15c86:	4620      	mov	r0, r4
   15c88:	f7ff fe70 	bl	1596c <d_type>
   15c8c:	2800      	cmp	r0, #0
   15c8e:	f000 80b5 	beq.w	15dfc <d_type+0x490>
   15c92:	4603      	mov	r3, r0
   15c94:	462a      	mov	r2, r5
   15c96:	212b      	movs	r1, #43	; 0x2b
   15c98:	4620      	mov	r0, r4
   15c9a:	f7fe fbd7 	bl	1444c <d_make_comp>
   15c9e:	4605      	mov	r5, r0
   15ca0:	9501      	str	r5, [sp, #4]
   15ca2:	e7a8      	b.n	15bf6 <d_type+0x28a>
   15ca4:	3201      	adds	r2, #1
   15ca6:	60e2      	str	r2, [r4, #12]
   15ca8:	4620      	mov	r0, r4
   15caa:	f7ff fe5f 	bl	1596c <d_type>
   15cae:	2300      	movs	r3, #0
   15cb0:	4602      	mov	r2, r0
   15cb2:	2124      	movs	r1, #36	; 0x24
   15cb4:	4620      	mov	r0, r4
   15cb6:	f7fe fbc9 	bl	1444c <d_make_comp>
   15cba:	4605      	mov	r5, r0
   15cbc:	9001      	str	r0, [sp, #4]
   15cbe:	e79a      	b.n	15bf6 <d_type+0x28a>
   15cc0:	3201      	adds	r2, #1
   15cc2:	60e2      	str	r2, [r4, #12]
   15cc4:	4620      	mov	r0, r4
   15cc6:	f7ff fe51 	bl	1596c <d_type>
   15cca:	2300      	movs	r3, #0
   15ccc:	4602      	mov	r2, r0
   15cce:	2123      	movs	r1, #35	; 0x23
   15cd0:	4620      	mov	r0, r4
   15cd2:	f7fe fbbb 	bl	1444c <d_make_comp>
   15cd6:	4605      	mov	r5, r0
   15cd8:	9001      	str	r0, [sp, #4]
   15cda:	e78c      	b.n	15bf6 <d_type+0x28a>
   15cdc:	7853      	ldrb	r3, [r2, #1]
   15cde:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
   15ce2:	2a09      	cmp	r2, #9
   15ce4:	d905      	bls.n	15cf2 <d_type+0x386>
   15ce6:	2b5f      	cmp	r3, #95	; 0x5f
   15ce8:	d003      	beq.n	15cf2 <d_type+0x386>
   15cea:	3b41      	subs	r3, #65	; 0x41
   15cec:	2b19      	cmp	r3, #25
   15cee:	f200 81c3 	bhi.w	16078 <d_type+0x70c>
   15cf2:	2100      	movs	r1, #0
   15cf4:	4620      	mov	r0, r4
   15cf6:	f7fe fdf3 	bl	148e0 <d_substitution>
   15cfa:	68e3      	ldr	r3, [r4, #12]
   15cfc:	9001      	str	r0, [sp, #4]
   15cfe:	781b      	ldrb	r3, [r3, #0]
   15d00:	2b49      	cmp	r3, #73	; 0x49
   15d02:	4605      	mov	r5, r0
   15d04:	f47f aed1 	bne.w	15aaa <d_type+0x13e>
   15d08:	4620      	mov	r0, r4
   15d0a:	f7ff fc69 	bl	155e0 <d_template_args>
   15d0e:	462a      	mov	r2, r5
   15d10:	4603      	mov	r3, r0
   15d12:	2104      	movs	r1, #4
   15d14:	4620      	mov	r0, r4
   15d16:	f7fe fb99 	bl	1444c <d_make_comp>
   15d1a:	4605      	mov	r5, r0
   15d1c:	e7c0      	b.n	15ca0 <d_type+0x334>
   15d1e:	3201      	adds	r2, #1
   15d20:	60e2      	str	r2, [r4, #12]
   15d22:	4620      	mov	r0, r4
   15d24:	f7ff fe22 	bl	1596c <d_type>
   15d28:	2300      	movs	r3, #0
   15d2a:	4602      	mov	r2, r0
   15d2c:	2122      	movs	r1, #34	; 0x22
   15d2e:	4620      	mov	r0, r4
   15d30:	f7fe fb8c 	bl	1444c <d_make_comp>
   15d34:	4605      	mov	r5, r0
   15d36:	9001      	str	r0, [sp, #4]
   15d38:	e75d      	b.n	15bf6 <d_type+0x28a>
   15d3a:	4620      	mov	r0, r4
   15d3c:	f7fe fd36 	bl	147ac <d_template_param>
   15d40:	68e6      	ldr	r6, [r4, #12]
   15d42:	9001      	str	r0, [sp, #4]
   15d44:	7833      	ldrb	r3, [r6, #0]
   15d46:	2b49      	cmp	r3, #73	; 0x49
   15d48:	4605      	mov	r5, r0
   15d4a:	f47f af54 	bne.w	15bf6 <d_type+0x28a>
   15d4e:	6ba3      	ldr	r3, [r4, #56]	; 0x38
   15d50:	2b00      	cmp	r3, #0
   15d52:	f040 81a9 	bne.w	160a8 <d_type+0x73c>
   15d56:	2800      	cmp	r0, #0
   15d58:	f43f aea6 	beq.w	15aa8 <d_type+0x13c>
   15d5c:	6a23      	ldr	r3, [r4, #32]
   15d5e:	6a62      	ldr	r2, [r4, #36]	; 0x24
   15d60:	4293      	cmp	r3, r2
   15d62:	f6bf aea1 	bge.w	15aa8 <d_type+0x13c>
   15d66:	69e1      	ldr	r1, [r4, #28]
   15d68:	1c5a      	adds	r2, r3, #1
   15d6a:	f841 0023 	str.w	r0, [r1, r3, lsl #2]
   15d6e:	6222      	str	r2, [r4, #32]
   15d70:	4620      	mov	r0, r4
   15d72:	9d01      	ldr	r5, [sp, #4]
   15d74:	f7ff fc34 	bl	155e0 <d_template_args>
   15d78:	462a      	mov	r2, r5
   15d7a:	4603      	mov	r3, r0
   15d7c:	e7c9      	b.n	15d12 <d_type+0x3a6>
   15d7e:	3201      	adds	r2, #1
   15d80:	60e2      	str	r2, [r4, #12]
   15d82:	4620      	mov	r0, r4
   15d84:	f7fe fd34 	bl	147f0 <d_source_name>
   15d88:	68e3      	ldr	r3, [r4, #12]
   15d8a:	9001      	str	r0, [sp, #4]
   15d8c:	781b      	ldrb	r3, [r3, #0]
   15d8e:	2b49      	cmp	r3, #73	; 0x49
   15d90:	4605      	mov	r5, r0
   15d92:	f000 817e 	beq.w	16092 <d_type+0x726>
   15d96:	4620      	mov	r0, r4
   15d98:	f7ff fde8 	bl	1596c <d_type>
   15d9c:	9b01      	ldr	r3, [sp, #4]
   15d9e:	4602      	mov	r2, r0
   15da0:	2121      	movs	r1, #33	; 0x21
   15da2:	4620      	mov	r0, r4
   15da4:	f7fe fb52 	bl	1444c <d_make_comp>
   15da8:	4605      	mov	r5, r0
   15daa:	9001      	str	r0, [sp, #4]
   15dac:	e723      	b.n	15bf6 <d_type+0x28a>
   15dae:	1c51      	adds	r1, r2, #1
   15db0:	60e1      	str	r1, [r4, #12]
   15db2:	7853      	ldrb	r3, [r2, #1]
   15db4:	2b5f      	cmp	r3, #95	; 0x5f
   15db6:	f000 8144 	beq.w	16042 <d_type+0x6d6>
   15dba:	3b30      	subs	r3, #48	; 0x30
   15dbc:	2b09      	cmp	r3, #9
   15dbe:	f200 814e 	bhi.w	1605e <d_type+0x6f2>
   15dc2:	460b      	mov	r3, r1
   15dc4:	3301      	adds	r3, #1
   15dc6:	60e3      	str	r3, [r4, #12]
   15dc8:	781a      	ldrb	r2, [r3, #0]
   15dca:	3a30      	subs	r2, #48	; 0x30
   15dcc:	2a09      	cmp	r2, #9
   15dce:	d9f9      	bls.n	15dc4 <d_type+0x458>
   15dd0:	6962      	ldr	r2, [r4, #20]
   15dd2:	69a0      	ldr	r0, [r4, #24]
   15dd4:	4282      	cmp	r2, r0
   15dd6:	da11      	bge.n	15dfc <d_type+0x490>
   15dd8:	eb02 0042 	add.w	r0, r2, r2, lsl #1
   15ddc:	6926      	ldr	r6, [r4, #16]
   15dde:	0080      	lsls	r0, r0, #2
   15de0:	3201      	adds	r2, #1
   15de2:	1835      	adds	r5, r6, r0
   15de4:	6162      	str	r2, [r4, #20]
   15de6:	d009      	beq.n	15dfc <d_type+0x490>
   15de8:	1a5a      	subs	r2, r3, r1
   15dea:	d007      	beq.n	15dfc <d_type+0x490>
   15dec:	2700      	movs	r7, #0
   15dee:	5437      	strb	r7, [r6, r0]
   15df0:	6069      	str	r1, [r5, #4]
   15df2:	60aa      	str	r2, [r5, #8]
   15df4:	781a      	ldrb	r2, [r3, #0]
   15df6:	2a5f      	cmp	r2, #95	; 0x5f
   15df8:	f000 8190 	beq.w	1611c <d_type+0x7b0>
   15dfc:	2500      	movs	r5, #0
   15dfe:	e74f      	b.n	15ca0 <d_type+0x334>
   15e00:	7893      	ldrb	r3, [r2, #2]
   15e02:	2b5f      	cmp	r3, #95	; 0x5f
   15e04:	f000 8180 	beq.w	16108 <d_type+0x79c>
   15e08:	f7fe fc9c 	bl	14744 <d_number_component>
   15e0c:	4605      	mov	r5, r0
   15e0e:	2d00      	cmp	r5, #0
   15e10:	f43f af46 	beq.w	15ca0 <d_type+0x334>
   15e14:	68e3      	ldr	r3, [r4, #12]
   15e16:	781a      	ldrb	r2, [r3, #0]
   15e18:	2a5f      	cmp	r2, #95	; 0x5f
   15e1a:	d1ef      	bne.n	15dfc <d_type+0x490>
   15e1c:	3301      	adds	r3, #1
   15e1e:	60e3      	str	r3, [r4, #12]
   15e20:	4620      	mov	r0, r4
   15e22:	f7ff fda3 	bl	1596c <d_type>
   15e26:	462a      	mov	r2, r5
   15e28:	4603      	mov	r3, r0
   15e2a:	212d      	movs	r1, #45	; 0x2d
   15e2c:	4620      	mov	r0, r4
   15e2e:	f7fe fb0d 	bl	1444c <d_make_comp>
   15e32:	4605      	mov	r5, r0
   15e34:	e734      	b.n	15ca0 <d_type+0x334>
   15e36:	6942      	ldr	r2, [r0, #20]
   15e38:	6983      	ldr	r3, [r0, #24]
   15e3a:	429a      	cmp	r2, r3
   15e3c:	f280 80fd 	bge.w	1603a <d_type+0x6ce>
   15e40:	230c      	movs	r3, #12
   15e42:	6901      	ldr	r1, [r0, #16]
   15e44:	fb03 f302 	mul.w	r3, r3, r2
   15e48:	18cd      	adds	r5, r1, r3
   15e4a:	f102 0201 	add.w	r2, r2, #1
   15e4e:	6142      	str	r2, [r0, #20]
   15e50:	f000 80f3 	beq.w	1603a <d_type+0x6ce>
   15e54:	4a15      	ldr	r2, [pc, #84]	; (15eac <d_type+0x540>)
   15e56:	2027      	movs	r0, #39	; 0x27
   15e58:	54c8      	strb	r0, [r1, r3]
   15e5a:	606a      	str	r2, [r5, #4]
   15e5c:	6b23      	ldr	r3, [r4, #48]	; 0x30
   15e5e:	3308      	adds	r3, #8
   15e60:	6323      	str	r3, [r4, #48]	; 0x30
   15e62:	e622      	b.n	15aaa <d_type+0x13e>
   15e64:	f7ff fd82 	bl	1596c <d_type>
   15e68:	2300      	movs	r3, #0
   15e6a:	4602      	mov	r2, r0
   15e6c:	214a      	movs	r1, #74	; 0x4a
   15e6e:	4620      	mov	r0, r4
   15e70:	f7fe faec 	bl	1444c <d_make_comp>
   15e74:	4605      	mov	r5, r0
   15e76:	9001      	str	r0, [sp, #4]
   15e78:	e6bd      	b.n	15bf6 <d_type+0x28a>
   15e7a:	6942      	ldr	r2, [r0, #20]
   15e7c:	6983      	ldr	r3, [r0, #24]
   15e7e:	429a      	cmp	r2, r3
   15e80:	f280 80db 	bge.w	1603a <d_type+0x6ce>
   15e84:	230c      	movs	r3, #12
   15e86:	6901      	ldr	r1, [r0, #16]
   15e88:	fb03 f302 	mul.w	r3, r3, r2
   15e8c:	18cd      	adds	r5, r1, r3
   15e8e:	f102 0201 	add.w	r2, r2, #1
   15e92:	6142      	str	r2, [r0, #20]
   15e94:	f000 80d1 	beq.w	1603a <d_type+0x6ce>
   15e98:	2027      	movs	r0, #39	; 0x27
   15e9a:	4a05      	ldr	r2, [pc, #20]	; (15eb0 <d_type+0x544>)
   15e9c:	54c8      	strb	r0, [r1, r3]
   15e9e:	606a      	str	r2, [r5, #4]
   15ea0:	6b23      	ldr	r3, [r4, #48]	; 0x30
   15ea2:	3311      	adds	r3, #17
   15ea4:	6323      	str	r3, [r4, #48]	; 0x30
   15ea6:	e600      	b.n	15aaa <d_type+0x13e>
   15ea8:	00023c1c 	.word	0x00023c1c
   15eac:	00023e74 	.word	0x00023e74
   15eb0:	00023e9c 	.word	0x00023e9c
   15eb4:	6942      	ldr	r2, [r0, #20]
   15eb6:	6983      	ldr	r3, [r0, #24]
   15eb8:	429a      	cmp	r2, r3
   15eba:	f280 80be 	bge.w	1603a <d_type+0x6ce>
   15ebe:	230c      	movs	r3, #12
   15ec0:	6901      	ldr	r1, [r0, #16]
   15ec2:	fb03 f302 	mul.w	r3, r3, r2
   15ec6:	18cd      	adds	r5, r1, r3
   15ec8:	f102 0201 	add.w	r2, r2, #1
   15ecc:	6142      	str	r2, [r0, #20]
   15ece:	f000 80b4 	beq.w	1603a <d_type+0x6ce>
   15ed2:	2027      	movs	r0, #39	; 0x27
   15ed4:	4a92      	ldr	r2, [pc, #584]	; (16120 <d_type+0x7b4>)
   15ed6:	e7bf      	b.n	15e58 <d_type+0x4ec>
   15ed8:	6942      	ldr	r2, [r0, #20]
   15eda:	6983      	ldr	r3, [r0, #24]
   15edc:	429a      	cmp	r2, r3
   15ede:	f280 80ac 	bge.w	1603a <d_type+0x6ce>
   15ee2:	230c      	movs	r3, #12
   15ee4:	6901      	ldr	r1, [r0, #16]
   15ee6:	fb03 f302 	mul.w	r3, r3, r2
   15eea:	18cd      	adds	r5, r1, r3
   15eec:	f102 0201 	add.w	r2, r2, #1
   15ef0:	6142      	str	r2, [r0, #20]
   15ef2:	f000 80a2 	beq.w	1603a <d_type+0x6ce>
   15ef6:	2027      	movs	r0, #39	; 0x27
   15ef8:	4a8a      	ldr	r2, [pc, #552]	; (16124 <d_type+0x7b8>)
   15efa:	54c8      	strb	r0, [r1, r3]
   15efc:	606a      	str	r2, [r5, #4]
   15efe:	6b23      	ldr	r3, [r4, #48]	; 0x30
   15f00:	3304      	adds	r3, #4
   15f02:	6323      	str	r3, [r4, #48]	; 0x30
   15f04:	e5d1      	b.n	15aaa <d_type+0x13e>
   15f06:	6942      	ldr	r2, [r0, #20]
   15f08:	6983      	ldr	r3, [r0, #24]
   15f0a:	429a      	cmp	r2, r3
   15f0c:	f280 8095 	bge.w	1603a <d_type+0x6ce>
   15f10:	230c      	movs	r3, #12
   15f12:	6901      	ldr	r1, [r0, #16]
   15f14:	fb03 f302 	mul.w	r3, r3, r2
   15f18:	18cd      	adds	r5, r1, r3
   15f1a:	f102 0201 	add.w	r2, r2, #1
   15f1e:	6142      	str	r2, [r0, #20]
   15f20:	f000 808b 	beq.w	1603a <d_type+0x6ce>
   15f24:	4a80      	ldr	r2, [pc, #512]	; (16128 <d_type+0x7bc>)
   15f26:	2027      	movs	r0, #39	; 0x27
   15f28:	54c8      	strb	r0, [r1, r3]
   15f2a:	606a      	str	r2, [r5, #4]
   15f2c:	6b23      	ldr	r3, [r4, #48]	; 0x30
   15f2e:	3309      	adds	r3, #9
   15f30:	6323      	str	r3, [r4, #48]	; 0x30
   15f32:	e5ba      	b.n	15aaa <d_type+0x13e>
   15f34:	6942      	ldr	r2, [r0, #20]
   15f36:	6983      	ldr	r3, [r0, #24]
   15f38:	429a      	cmp	r2, r3
   15f3a:	da7e      	bge.n	1603a <d_type+0x6ce>
   15f3c:	230c      	movs	r3, #12
   15f3e:	6901      	ldr	r1, [r0, #16]
   15f40:	fb03 f302 	mul.w	r3, r3, r2
   15f44:	18cd      	adds	r5, r1, r3
   15f46:	f102 0201 	add.w	r2, r2, #1
   15f4a:	6142      	str	r2, [r0, #20]
   15f4c:	d075      	beq.n	1603a <d_type+0x6ce>
   15f4e:	2027      	movs	r0, #39	; 0x27
   15f50:	4a76      	ldr	r2, [pc, #472]	; (1612c <d_type+0x7c0>)
   15f52:	54c8      	strb	r0, [r1, r3]
   15f54:	606a      	str	r2, [r5, #4]
   15f56:	6b23      	ldr	r3, [r4, #48]	; 0x30
   15f58:	330a      	adds	r3, #10
   15f5a:	6323      	str	r3, [r4, #48]	; 0x30
   15f5c:	e5a5      	b.n	15aaa <d_type+0x13e>
   15f5e:	6942      	ldr	r2, [r0, #20]
   15f60:	6983      	ldr	r3, [r0, #24]
   15f62:	429a      	cmp	r2, r3
   15f64:	da69      	bge.n	1603a <d_type+0x6ce>
   15f66:	230c      	movs	r3, #12
   15f68:	6901      	ldr	r1, [r0, #16]
   15f6a:	fb03 f302 	mul.w	r3, r3, r2
   15f6e:	18cd      	adds	r5, r1, r3
   15f70:	f102 0201 	add.w	r2, r2, #1
   15f74:	6142      	str	r2, [r0, #20]
   15f76:	d060      	beq.n	1603a <d_type+0x6ce>
   15f78:	2027      	movs	r0, #39	; 0x27
   15f7a:	4a6d      	ldr	r2, [pc, #436]	; (16130 <d_type+0x7c4>)
   15f7c:	e7d4      	b.n	15f28 <d_type+0x5bc>
   15f7e:	6942      	ldr	r2, [r0, #20]
   15f80:	6983      	ldr	r3, [r0, #24]
   15f82:	429a      	cmp	r2, r3
   15f84:	f6bf ad90 	bge.w	15aa8 <d_type+0x13c>
   15f88:	230c      	movs	r3, #12
   15f8a:	6901      	ldr	r1, [r0, #16]
   15f8c:	fb03 f302 	mul.w	r3, r3, r2
   15f90:	18cd      	adds	r5, r1, r3
   15f92:	f102 0201 	add.w	r2, r2, #1
   15f96:	6142      	str	r2, [r0, #20]
   15f98:	f43f ad87 	beq.w	15aaa <d_type+0x13e>
   15f9c:	2000      	movs	r0, #0
   15f9e:	54c8      	strb	r0, [r1, r3]
   15fa0:	4a64      	ldr	r2, [pc, #400]	; (16134 <d_type+0x7c8>)
   15fa2:	606a      	str	r2, [r5, #4]
   15fa4:	230e      	movs	r3, #14
   15fa6:	60ab      	str	r3, [r5, #8]
   15fa8:	e57f      	b.n	15aaa <d_type+0x13e>
   15faa:	6942      	ldr	r2, [r0, #20]
   15fac:	6983      	ldr	r3, [r0, #24]
   15fae:	429a      	cmp	r2, r3
   15fb0:	f6bf ad7a 	bge.w	15aa8 <d_type+0x13c>
   15fb4:	230c      	movs	r3, #12
   15fb6:	6901      	ldr	r1, [r0, #16]
   15fb8:	fb03 f302 	mul.w	r3, r3, r2
   15fbc:	18cd      	adds	r5, r1, r3
   15fbe:	f102 0201 	add.w	r2, r2, #1
   15fc2:	6142      	str	r2, [r0, #20]
   15fc4:	f43f ad71 	beq.w	15aaa <d_type+0x13e>
   15fc8:	2000      	movs	r0, #0
   15fca:	54c8      	strb	r0, [r1, r3]
   15fcc:	4a5a      	ldr	r2, [pc, #360]	; (16138 <d_type+0x7cc>)
   15fce:	606a      	str	r2, [r5, #4]
   15fd0:	2304      	movs	r3, #4
   15fd2:	60ab      	str	r3, [r5, #8]
   15fd4:	e569      	b.n	15aaa <d_type+0x13e>
   15fd6:	6943      	ldr	r3, [r0, #20]
   15fd8:	6981      	ldr	r1, [r0, #24]
   15fda:	428b      	cmp	r3, r1
   15fdc:	da7a      	bge.n	160d4 <d_type+0x768>
   15fde:	6900      	ldr	r0, [r0, #16]
   15fe0:	eb03 0143 	add.w	r1, r3, r3, lsl #1
   15fe4:	0089      	lsls	r1, r1, #2
   15fe6:	3301      	adds	r3, #1
   15fe8:	1845      	adds	r5, r0, r1
   15fea:	262c      	movs	r6, #44	; 0x2c
   15fec:	6163      	str	r3, [r4, #20]
   15fee:	9501      	str	r5, [sp, #4]
   15ff0:	5446      	strb	r6, [r0, r1]
   15ff2:	7893      	ldrb	r3, [r2, #2]
   15ff4:	3b30      	subs	r3, #48	; 0x30
   15ff6:	b2db      	uxtb	r3, r3
   15ff8:	2b09      	cmp	r3, #9
   15ffa:	bf94      	ite	ls
   15ffc:	2301      	movls	r3, #1
   15ffe:	2300      	movhi	r3, #0
   16000:	812b      	strh	r3, [r5, #8]
   16002:	d97b      	bls.n	160fc <d_type+0x790>
   16004:	4620      	mov	r0, r4
   16006:	f7ff fcb1 	bl	1596c <d_type>
   1600a:	9b01      	ldr	r3, [sp, #4]
   1600c:	6068      	str	r0, [r5, #4]
   1600e:	685b      	ldr	r3, [r3, #4]
   16010:	2b00      	cmp	r3, #0
   16012:	f43f ad49 	beq.w	15aa8 <d_type+0x13c>
   16016:	f104 000c 	add.w	r0, r4, #12
   1601a:	f7fe fb69 	bl	146f0 <d_number.isra.0>
   1601e:	68e2      	ldr	r2, [r4, #12]
   16020:	7813      	ldrb	r3, [r2, #0]
   16022:	b113      	cbz	r3, 1602a <d_type+0x6be>
   16024:	1c53      	adds	r3, r2, #1
   16026:	60e3      	str	r3, [r4, #12]
   16028:	7813      	ldrb	r3, [r2, #0]
   1602a:	9d01      	ldr	r5, [sp, #4]
   1602c:	f1a3 0373 	sub.w	r3, r3, #115	; 0x73
   16030:	fab3 f383 	clz	r3, r3
   16034:	095b      	lsrs	r3, r3, #5
   16036:	816b      	strh	r3, [r5, #10]
   16038:	e537      	b.n	15aaa <d_type+0x13e>
   1603a:	2300      	movs	r3, #0
   1603c:	9301      	str	r3, [sp, #4]
   1603e:	685b      	ldr	r3, [r3, #4]
   16040:	deff      	udf	#255	; 0xff
   16042:	2500      	movs	r5, #0
   16044:	3101      	adds	r1, #1
   16046:	60e1      	str	r1, [r4, #12]
   16048:	4620      	mov	r0, r4
   1604a:	f7ff fc8f 	bl	1596c <d_type>
   1604e:	462a      	mov	r2, r5
   16050:	4603      	mov	r3, r0
   16052:	212a      	movs	r1, #42	; 0x2a
   16054:	4620      	mov	r0, r4
   16056:	f7fe f9f9 	bl	1444c <d_make_comp>
   1605a:	4605      	mov	r5, r0
   1605c:	e620      	b.n	15ca0 <d_type+0x334>
   1605e:	2301      	movs	r3, #1
   16060:	6b65      	ldr	r5, [r4, #52]	; 0x34
   16062:	6363      	str	r3, [r4, #52]	; 0x34
   16064:	4620      	mov	r0, r4
   16066:	f7ff f85d 	bl	15124 <d_expression_1>
   1606a:	6365      	str	r5, [r4, #52]	; 0x34
   1606c:	4605      	mov	r5, r0
   1606e:	2800      	cmp	r0, #0
   16070:	f43f aec4 	beq.w	15dfc <d_type+0x490>
   16074:	68e3      	ldr	r3, [r4, #12]
   16076:	e6bd      	b.n	15df4 <d_type+0x488>
   16078:	4620      	mov	r0, r4
   1607a:	f7ff fabb 	bl	155f4 <d_name>
   1607e:	4605      	mov	r5, r0
   16080:	9001      	str	r0, [sp, #4]
   16082:	2800      	cmp	r0, #0
   16084:	f43f ad10 	beq.w	15aa8 <d_type+0x13c>
   16088:	7803      	ldrb	r3, [r0, #0]
   1608a:	2b18      	cmp	r3, #24
   1608c:	f47f adb6 	bne.w	15bfc <d_type+0x290>
   16090:	e50b      	b.n	15aaa <d_type+0x13e>
   16092:	4620      	mov	r0, r4
   16094:	f7ff faa4 	bl	155e0 <d_template_args>
   16098:	462a      	mov	r2, r5
   1609a:	4603      	mov	r3, r0
   1609c:	2104      	movs	r1, #4
   1609e:	4620      	mov	r0, r4
   160a0:	f7fe f9d4 	bl	1444c <d_make_comp>
   160a4:	9001      	str	r0, [sp, #4]
   160a6:	e676      	b.n	15d96 <d_type+0x42a>
   160a8:	4620      	mov	r0, r4
   160aa:	f8d4 9014 	ldr.w	r9, [r4, #20]
   160ae:	f8d4 8020 	ldr.w	r8, [r4, #32]
   160b2:	6aa7      	ldr	r7, [r4, #40]	; 0x28
   160b4:	6b25      	ldr	r5, [r4, #48]	; 0x30
   160b6:	f7ff fa93 	bl	155e0 <d_template_args>
   160ba:	68e2      	ldr	r2, [r4, #12]
   160bc:	7812      	ldrb	r2, [r2, #0]
   160be:	2a49      	cmp	r2, #73	; 0x49
   160c0:	d00b      	beq.n	160da <d_type+0x76e>
   160c2:	6325      	str	r5, [r4, #48]	; 0x30
   160c4:	60e6      	str	r6, [r4, #12]
   160c6:	f8c4 9014 	str.w	r9, [r4, #20]
   160ca:	f8c4 8020 	str.w	r8, [r4, #32]
   160ce:	62a7      	str	r7, [r4, #40]	; 0x28
   160d0:	9d01      	ldr	r5, [sp, #4]
   160d2:	e590      	b.n	15bf6 <d_type+0x28a>
   160d4:	2300      	movs	r3, #0
   160d6:	701b      	strb	r3, [r3, #0]
   160d8:	deff      	udf	#255	; 0xff
   160da:	9b01      	ldr	r3, [sp, #4]
   160dc:	2b00      	cmp	r3, #0
   160de:	f43f ace3 	beq.w	15aa8 <d_type+0x13c>
   160e2:	6a22      	ldr	r2, [r4, #32]
   160e4:	6a61      	ldr	r1, [r4, #36]	; 0x24
   160e6:	428a      	cmp	r2, r1
   160e8:	f6bf acde 	bge.w	15aa8 <d_type+0x13c>
   160ec:	69e5      	ldr	r5, [r4, #28]
   160ee:	1c51      	adds	r1, r2, #1
   160f0:	f845 3022 	str.w	r3, [r5, r2, lsl #2]
   160f4:	9a01      	ldr	r2, [sp, #4]
   160f6:	6221      	str	r1, [r4, #32]
   160f8:	4603      	mov	r3, r0
   160fa:	e60a      	b.n	15d12 <d_type+0x3a6>
   160fc:	f104 000c 	add.w	r0, r4, #12
   16100:	f7fe faf6 	bl	146f0 <d_number.isra.0>
   16104:	9d01      	ldr	r5, [sp, #4]
   16106:	e77d      	b.n	16004 <d_type+0x698>
   16108:	3203      	adds	r2, #3
   1610a:	2301      	movs	r3, #1
   1610c:	6b46      	ldr	r6, [r0, #52]	; 0x34
   1610e:	60c2      	str	r2, [r0, #12]
   16110:	6343      	str	r3, [r0, #52]	; 0x34
   16112:	f7ff f807 	bl	15124 <d_expression_1>
   16116:	6366      	str	r6, [r4, #52]	; 0x34
   16118:	4605      	mov	r5, r0
   1611a:	e678      	b.n	15e0e <d_type+0x4a2>
   1611c:	4619      	mov	r1, r3
   1611e:	e791      	b.n	16044 <d_type+0x6d8>
   16120:	00023e88 	.word	0x00023e88
   16124:	00023e60 	.word	0x00023e60
   16128:	00023e24 	.word	0x00023e24
   1612c:	00023e4c 	.word	0x00023e4c
   16130:	00023e38 	.word	0x00023e38
   16134:	00024348 	.word	0x00024348
   16138:	00024340 	.word	0x00024340

0001613c <d_operator_name>:
   1613c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1613e:	68c3      	ldr	r3, [r0, #12]
   16140:	781e      	ldrb	r6, [r3, #0]
   16142:	4684      	mov	ip, r0
   16144:	b326      	cbz	r6, 16190 <d_operator_name+0x54>
   16146:	1c5a      	adds	r2, r3, #1
   16148:	60c2      	str	r2, [r0, #12]
   1614a:	785a      	ldrb	r2, [r3, #1]
   1614c:	781e      	ldrb	r6, [r3, #0]
   1614e:	2a00      	cmp	r2, #0
   16150:	d058      	beq.n	16204 <d_operator_name+0xc8>
   16152:	1c9a      	adds	r2, r3, #2
   16154:	60c2      	str	r2, [r0, #12]
   16156:	2e76      	cmp	r6, #118	; 0x76
   16158:	4604      	mov	r4, r0
   1615a:	f893 e001 	ldrb.w	lr, [r3, #1]
   1615e:	d043      	beq.n	161e8 <d_operator_name+0xac>
   16160:	2e63      	cmp	r6, #99	; 0x63
   16162:	d116      	bne.n	16192 <d_operator_name+0x56>
   16164:	f1be 0f76 	cmp.w	lr, #118	; 0x76
   16168:	d113      	bne.n	16192 <d_operator_name+0x56>
   1616a:	6b43      	ldr	r3, [r0, #52]	; 0x34
   1616c:	6b85      	ldr	r5, [r0, #56]	; 0x38
   1616e:	fab3 f383 	clz	r3, r3
   16172:	095b      	lsrs	r3, r3, #5
   16174:	6383      	str	r3, [r0, #56]	; 0x38
   16176:	f7ff fbf9 	bl	1596c <d_type>
   1617a:	6ba3      	ldr	r3, [r4, #56]	; 0x38
   1617c:	4602      	mov	r2, r0
   1617e:	2b00      	cmp	r3, #0
   16180:	d052      	beq.n	16228 <d_operator_name+0xec>
   16182:	2300      	movs	r3, #0
   16184:	2134      	movs	r1, #52	; 0x34
   16186:	4620      	mov	r0, r4
   16188:	f7fe f960 	bl	1444c <d_make_comp>
   1618c:	63a5      	str	r5, [r4, #56]	; 0x38
   1618e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   16190:	46b6      	mov	lr, r6
   16192:	4c28      	ldr	r4, [pc, #160]	; (16234 <d_operator_name+0xf8>)
   16194:	2043      	movs	r0, #67	; 0x43
   16196:	2200      	movs	r2, #0
   16198:	e004      	b.n	161a4 <d_operator_name+0x68>
   1619a:	bf94      	ite	ls
   1619c:	1c5a      	addls	r2, r3, #1
   1619e:	4618      	movhi	r0, r3
   161a0:	4282      	cmp	r2, r0
   161a2:	d02d      	beq.n	16200 <d_operator_name+0xc4>
   161a4:	1a83      	subs	r3, r0, r2
   161a6:	eb03 73d3 	add.w	r3, r3, r3, lsr #31
   161aa:	eb02 0363 	add.w	r3, r2, r3, asr #1
   161ae:	0119      	lsls	r1, r3, #4
   161b0:	1867      	adds	r7, r4, r1
   161b2:	5861      	ldr	r1, [r4, r1]
   161b4:	780d      	ldrb	r5, [r1, #0]
   161b6:	42b5      	cmp	r5, r6
   161b8:	d1ef      	bne.n	1619a <d_operator_name+0x5e>
   161ba:	7849      	ldrb	r1, [r1, #1]
   161bc:	4571      	cmp	r1, lr
   161be:	d1ec      	bne.n	1619a <d_operator_name+0x5e>
   161c0:	f8dc 3014 	ldr.w	r3, [ip, #20]
   161c4:	f8dc 2018 	ldr.w	r2, [ip, #24]
   161c8:	4293      	cmp	r3, r2
   161ca:	da19      	bge.n	16200 <d_operator_name+0xc4>
   161cc:	eb03 0243 	add.w	r2, r3, r3, lsl #1
   161d0:	f8dc 1010 	ldr.w	r1, [ip, #16]
   161d4:	0092      	lsls	r2, r2, #2
   161d6:	3301      	adds	r3, #1
   161d8:	1888      	adds	r0, r1, r2
   161da:	f8cc 3014 	str.w	r3, [ip, #20]
   161de:	d013      	beq.n	16208 <d_operator_name+0xcc>
   161e0:	2331      	movs	r3, #49	; 0x31
   161e2:	548b      	strb	r3, [r1, r2]
   161e4:	6047      	str	r7, [r0, #4]
   161e6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   161e8:	f1ae 0530 	sub.w	r5, lr, #48	; 0x30
   161ec:	b2eb      	uxtb	r3, r5
   161ee:	2b09      	cmp	r3, #9
   161f0:	d8cf      	bhi.n	16192 <d_operator_name+0x56>
   161f2:	f7fe fafd 	bl	147f0 <d_source_name>
   161f6:	6963      	ldr	r3, [r4, #20]
   161f8:	69a2      	ldr	r2, [r4, #24]
   161fa:	4293      	cmp	r3, r2
   161fc:	4601      	mov	r1, r0
   161fe:	db04      	blt.n	1620a <d_operator_name+0xce>
   16200:	2000      	movs	r0, #0
   16202:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   16204:	4696      	mov	lr, r2
   16206:	e7c4      	b.n	16192 <d_operator_name+0x56>
   16208:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   1620a:	eb03 0243 	add.w	r2, r3, r3, lsl #1
   1620e:	6926      	ldr	r6, [r4, #16]
   16210:	0092      	lsls	r2, r2, #2
   16212:	3301      	adds	r3, #1
   16214:	18b0      	adds	r0, r6, r2
   16216:	6163      	str	r3, [r4, #20]
   16218:	d0f2      	beq.n	16200 <d_operator_name+0xc4>
   1621a:	2900      	cmp	r1, #0
   1621c:	d0f0      	beq.n	16200 <d_operator_name+0xc4>
   1621e:	2332      	movs	r3, #50	; 0x32
   16220:	54b3      	strb	r3, [r6, r2]
   16222:	6045      	str	r5, [r0, #4]
   16224:	6081      	str	r1, [r0, #8]
   16226:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   16228:	2133      	movs	r1, #51	; 0x33
   1622a:	4620      	mov	r0, r4
   1622c:	f7fe f90e 	bl	1444c <d_make_comp>
   16230:	e7ac      	b.n	1618c <d_operator_name+0x50>
   16232:	bf00      	nop
   16234:	00023eb0 	.word	0x00023eb0

00016238 <d_parmlist>:
   16238:	b530      	push	{r4, r5, lr}
   1623a:	68c2      	ldr	r2, [r0, #12]
   1623c:	b083      	sub	sp, #12
   1623e:	2300      	movs	r3, #0
   16240:	9301      	str	r3, [sp, #4]
   16242:	7813      	ldrb	r3, [r2, #0]
   16244:	b343      	cbz	r3, 16298 <d_parmlist+0x60>
   16246:	2b45      	cmp	r3, #69	; 0x45
   16248:	d026      	beq.n	16298 <d_parmlist+0x60>
   1624a:	2b2e      	cmp	r3, #46	; 0x2e
   1624c:	d024      	beq.n	16298 <d_parmlist+0x60>
   1624e:	4604      	mov	r4, r0
   16250:	ad01      	add	r5, sp, #4
   16252:	e015      	b.n	16280 <d_parmlist+0x48>
   16254:	2b4f      	cmp	r3, #79	; 0x4f
   16256:	d016      	beq.n	16286 <d_parmlist+0x4e>
   16258:	f7ff fb88 	bl	1596c <d_type>
   1625c:	2300      	movs	r3, #0
   1625e:	4602      	mov	r2, r0
   16260:	212e      	movs	r1, #46	; 0x2e
   16262:	b1c8      	cbz	r0, 16298 <d_parmlist+0x60>
   16264:	4620      	mov	r0, r4
   16266:	f7fe f8f1 	bl	1444c <d_make_comp>
   1626a:	6028      	str	r0, [r5, #0]
   1626c:	b1a0      	cbz	r0, 16298 <d_parmlist+0x60>
   1626e:	68e2      	ldr	r2, [r4, #12]
   16270:	7813      	ldrb	r3, [r2, #0]
   16272:	f100 0508 	add.w	r5, r0, #8
   16276:	b14b      	cbz	r3, 1628c <d_parmlist+0x54>
   16278:	2b45      	cmp	r3, #69	; 0x45
   1627a:	d007      	beq.n	1628c <d_parmlist+0x54>
   1627c:	2b2e      	cmp	r3, #46	; 0x2e
   1627e:	d005      	beq.n	1628c <d_parmlist+0x54>
   16280:	2b52      	cmp	r3, #82	; 0x52
   16282:	4620      	mov	r0, r4
   16284:	d1e6      	bne.n	16254 <d_parmlist+0x1c>
   16286:	7853      	ldrb	r3, [r2, #1]
   16288:	2b45      	cmp	r3, #69	; 0x45
   1628a:	d1e5      	bne.n	16258 <d_parmlist+0x20>
   1628c:	9801      	ldr	r0, [sp, #4]
   1628e:	b118      	cbz	r0, 16298 <d_parmlist+0x60>
   16290:	6883      	ldr	r3, [r0, #8]
   16292:	b123      	cbz	r3, 1629e <d_parmlist+0x66>
   16294:	b003      	add	sp, #12
   16296:	bd30      	pop	{r4, r5, pc}
   16298:	2000      	movs	r0, #0
   1629a:	b003      	add	sp, #12
   1629c:	bd30      	pop	{r4, r5, pc}
   1629e:	6842      	ldr	r2, [r0, #4]
   162a0:	7811      	ldrb	r1, [r2, #0]
   162a2:	2927      	cmp	r1, #39	; 0x27
   162a4:	d1f6      	bne.n	16294 <d_parmlist+0x5c>
   162a6:	6852      	ldr	r2, [r2, #4]
   162a8:	7c11      	ldrb	r1, [r2, #16]
   162aa:	2909      	cmp	r1, #9
   162ac:	d1f2      	bne.n	16294 <d_parmlist+0x5c>
   162ae:	6851      	ldr	r1, [r2, #4]
   162b0:	6b22      	ldr	r2, [r4, #48]	; 0x30
   162b2:	1a52      	subs	r2, r2, r1
   162b4:	6322      	str	r2, [r4, #48]	; 0x30
   162b6:	6043      	str	r3, [r0, #4]
   162b8:	e7ec      	b.n	16294 <d_parmlist+0x5c>
   162ba:	bf00      	nop

000162bc <d_unqualified_name>:
   162bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   162be:	68c1      	ldr	r1, [r0, #12]
   162c0:	780b      	ldrb	r3, [r1, #0]
   162c2:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
   162c6:	2a09      	cmp	r2, #9
   162c8:	4604      	mov	r4, r0
   162ca:	d920      	bls.n	1630e <d_unqualified_name+0x52>
   162cc:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
   162d0:	2a19      	cmp	r2, #25
   162d2:	d925      	bls.n	16320 <d_unqualified_name+0x64>
   162d4:	f1a3 0243 	sub.w	r2, r3, #67	; 0x43
   162d8:	2a01      	cmp	r2, #1
   162da:	d92c      	bls.n	16336 <d_unqualified_name+0x7a>
   162dc:	2b4c      	cmp	r3, #76	; 0x4c
   162de:	f000 8088 	beq.w	163f2 <d_unqualified_name+0x136>
   162e2:	2b55      	cmp	r3, #85	; 0x55
   162e4:	d133      	bne.n	1634e <d_unqualified_name+0x92>
   162e6:	784b      	ldrb	r3, [r1, #1]
   162e8:	2b6c      	cmp	r3, #108	; 0x6c
   162ea:	d033      	beq.n	16354 <d_unqualified_name+0x98>
   162ec:	2b74      	cmp	r3, #116	; 0x74
   162ee:	d12e      	bne.n	1634e <d_unqualified_name+0x92>
   162f0:	1c4b      	adds	r3, r1, #1
   162f2:	60c3      	str	r3, [r0, #12]
   162f4:	784b      	ldrb	r3, [r1, #1]
   162f6:	2b74      	cmp	r3, #116	; 0x74
   162f8:	d05a      	beq.n	163b0 <d_unqualified_name+0xf4>
   162fa:	2b42      	cmp	r3, #66	; 0x42
   162fc:	f04f 0500 	mov.w	r5, #0
   16300:	d10c      	bne.n	1631c <d_unqualified_name+0x60>
   16302:	4629      	mov	r1, r5
   16304:	4620      	mov	r0, r4
   16306:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
   1630a:	f7fe bacd 	b.w	148a8 <d_abi_tags>
   1630e:	f7fe fa6f 	bl	147f0 <d_source_name>
   16312:	68e3      	ldr	r3, [r4, #12]
   16314:	781b      	ldrb	r3, [r3, #0]
   16316:	4605      	mov	r5, r0
   16318:	2b42      	cmp	r3, #66	; 0x42
   1631a:	d0f2      	beq.n	16302 <d_unqualified_name+0x46>
   1631c:	4628      	mov	r0, r5
   1631e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   16320:	f7ff ff0c 	bl	1613c <d_operator_name>
   16324:	4605      	mov	r5, r0
   16326:	b118      	cbz	r0, 16330 <d_unqualified_name+0x74>
   16328:	7803      	ldrb	r3, [r0, #0]
   1632a:	2b31      	cmp	r3, #49	; 0x31
   1632c:	f000 80b2 	beq.w	16494 <d_unqualified_name+0x1d8>
   16330:	68e3      	ldr	r3, [r4, #12]
   16332:	781b      	ldrb	r3, [r3, #0]
   16334:	e7f0      	b.n	16318 <d_unqualified_name+0x5c>
   16336:	6ac5      	ldr	r5, [r0, #44]	; 0x2c
   16338:	b125      	cbz	r5, 16344 <d_unqualified_name+0x88>
   1633a:	782a      	ldrb	r2, [r5, #0]
   1633c:	2a00      	cmp	r2, #0
   1633e:	d06c      	beq.n	1641a <d_unqualified_name+0x15e>
   16340:	2a18      	cmp	r2, #24
   16342:	d06a      	beq.n	1641a <d_unqualified_name+0x15e>
   16344:	2b43      	cmp	r3, #67	; 0x43
   16346:	f000 80bf 	beq.w	164c8 <d_unqualified_name+0x20c>
   1634a:	2b44      	cmp	r3, #68	; 0x44
   1634c:	d06f      	beq.n	1642e <d_unqualified_name+0x172>
   1634e:	2500      	movs	r5, #0
   16350:	4628      	mov	r0, r5
   16352:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   16354:	1c4b      	adds	r3, r1, #1
   16356:	60c3      	str	r3, [r0, #12]
   16358:	784b      	ldrb	r3, [r1, #1]
   1635a:	2b6c      	cmp	r3, #108	; 0x6c
   1635c:	d1cd      	bne.n	162fa <d_unqualified_name+0x3e>
   1635e:	3102      	adds	r1, #2
   16360:	60c1      	str	r1, [r0, #12]
   16362:	f7ff ff69 	bl	16238 <d_parmlist>
   16366:	4606      	mov	r6, r0
   16368:	b1f0      	cbz	r0, 163a8 <d_unqualified_name+0xec>
   1636a:	68e2      	ldr	r2, [r4, #12]
   1636c:	7813      	ldrb	r3, [r2, #0]
   1636e:	2b45      	cmp	r3, #69	; 0x45
   16370:	d1c3      	bne.n	162fa <d_unqualified_name+0x3e>
   16372:	3201      	adds	r2, #1
   16374:	60e2      	str	r2, [r4, #12]
   16376:	4620      	mov	r0, r4
   16378:	f7fe f9fc 	bl	14774 <d_compact_number>
   1637c:	2800      	cmp	r0, #0
   1637e:	db13      	blt.n	163a8 <d_unqualified_name+0xec>
   16380:	6963      	ldr	r3, [r4, #20]
   16382:	69a2      	ldr	r2, [r4, #24]
   16384:	4293      	cmp	r3, r2
   16386:	da0f      	bge.n	163a8 <d_unqualified_name+0xec>
   16388:	eb03 0243 	add.w	r2, r3, r3, lsl #1
   1638c:	6921      	ldr	r1, [r4, #16]
   1638e:	0092      	lsls	r2, r2, #2
   16390:	3301      	adds	r3, #1
   16392:	188d      	adds	r5, r1, r2
   16394:	6163      	str	r3, [r4, #20]
   16396:	d0cb      	beq.n	16330 <d_unqualified_name+0x74>
   16398:	2345      	movs	r3, #69	; 0x45
   1639a:	548b      	strb	r3, [r1, r2]
   1639c:	606e      	str	r6, [r5, #4]
   1639e:	60a8      	str	r0, [r5, #8]
   163a0:	6a23      	ldr	r3, [r4, #32]
   163a2:	6a62      	ldr	r2, [r4, #36]	; 0x24
   163a4:	4293      	cmp	r3, r2
   163a6:	db1c      	blt.n	163e2 <d_unqualified_name+0x126>
   163a8:	68e3      	ldr	r3, [r4, #12]
   163aa:	2500      	movs	r5, #0
   163ac:	781b      	ldrb	r3, [r3, #0]
   163ae:	e7b3      	b.n	16318 <d_unqualified_name+0x5c>
   163b0:	3102      	adds	r1, #2
   163b2:	60c1      	str	r1, [r0, #12]
   163b4:	f7fe f9de 	bl	14774 <d_compact_number>
   163b8:	2800      	cmp	r0, #0
   163ba:	dbf5      	blt.n	163a8 <d_unqualified_name+0xec>
   163bc:	6963      	ldr	r3, [r4, #20]
   163be:	69a2      	ldr	r2, [r4, #24]
   163c0:	4293      	cmp	r3, r2
   163c2:	daf1      	bge.n	163a8 <d_unqualified_name+0xec>
   163c4:	eb03 0243 	add.w	r2, r3, r3, lsl #1
   163c8:	6921      	ldr	r1, [r4, #16]
   163ca:	0092      	lsls	r2, r2, #2
   163cc:	3301      	adds	r3, #1
   163ce:	188d      	adds	r5, r1, r2
   163d0:	6163      	str	r3, [r4, #20]
   163d2:	d0ad      	beq.n	16330 <d_unqualified_name+0x74>
   163d4:	2347      	movs	r3, #71	; 0x47
   163d6:	548b      	strb	r3, [r1, r2]
   163d8:	6068      	str	r0, [r5, #4]
   163da:	6a23      	ldr	r3, [r4, #32]
   163dc:	6a62      	ldr	r2, [r4, #36]	; 0x24
   163de:	4293      	cmp	r3, r2
   163e0:	dae2      	bge.n	163a8 <d_unqualified_name+0xec>
   163e2:	69e1      	ldr	r1, [r4, #28]
   163e4:	68e2      	ldr	r2, [r4, #12]
   163e6:	f841 5023 	str.w	r5, [r1, r3, lsl #2]
   163ea:	3301      	adds	r3, #1
   163ec:	6223      	str	r3, [r4, #32]
   163ee:	7813      	ldrb	r3, [r2, #0]
   163f0:	e792      	b.n	16318 <d_unqualified_name+0x5c>
   163f2:	3101      	adds	r1, #1
   163f4:	60c1      	str	r1, [r0, #12]
   163f6:	f7fe f9fb 	bl	147f0 <d_source_name>
   163fa:	4605      	mov	r5, r0
   163fc:	2800      	cmp	r0, #0
   163fe:	d0a6      	beq.n	1634e <d_unqualified_name+0x92>
   16400:	68e2      	ldr	r2, [r4, #12]
   16402:	7813      	ldrb	r3, [r2, #0]
   16404:	2b5f      	cmp	r3, #95	; 0x5f
   16406:	d187      	bne.n	16318 <d_unqualified_name+0x5c>
   16408:	4620      	mov	r0, r4
   1640a:	3201      	adds	r2, #1
   1640c:	f840 2f0c 	str.w	r2, [r0, #12]!
   16410:	f7fe f96e 	bl	146f0 <d_number.isra.0>
   16414:	2800      	cmp	r0, #0
   16416:	da8b      	bge.n	16330 <d_unqualified_name+0x74>
   16418:	e799      	b.n	1634e <d_unqualified_name+0x92>
   1641a:	6b23      	ldr	r3, [r4, #48]	; 0x30
   1641c:	68aa      	ldr	r2, [r5, #8]
   1641e:	4413      	add	r3, r2
   16420:	6323      	str	r3, [r4, #48]	; 0x30
   16422:	780b      	ldrb	r3, [r1, #0]
   16424:	2b43      	cmp	r3, #67	; 0x43
   16426:	d04f      	beq.n	164c8 <d_unqualified_name+0x20c>
   16428:	2b44      	cmp	r3, #68	; 0x44
   1642a:	f47f af66 	bne.w	162fa <d_unqualified_name+0x3e>
   1642e:	784b      	ldrb	r3, [r1, #1]
   16430:	3b30      	subs	r3, #48	; 0x30
   16432:	2b05      	cmp	r3, #5
   16434:	d88b      	bhi.n	1634e <d_unqualified_name+0x92>
   16436:	a201      	add	r2, pc, #4	; (adr r2, 1643c <d_unqualified_name+0x180>)
   16438:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   1643c:	00016491 	.word	0x00016491
   16440:	00016455 	.word	0x00016455
   16444:	0001648d 	.word	0x0001648d
   16448:	0001634f 	.word	0x0001634f
   1644c:	00016489 	.word	0x00016489
   16450:	00016485 	.word	0x00016485
   16454:	2702      	movs	r7, #2
   16456:	6963      	ldr	r3, [r4, #20]
   16458:	69a2      	ldr	r2, [r4, #24]
   1645a:	1c88      	adds	r0, r1, #2
   1645c:	4293      	cmp	r3, r2
   1645e:	60e0      	str	r0, [r4, #12]
   16460:	da56      	bge.n	16510 <d_unqualified_name+0x254>
   16462:	eb03 0243 	add.w	r2, r3, r3, lsl #1
   16466:	6920      	ldr	r0, [r4, #16]
   16468:	0092      	lsls	r2, r2, #2
   1646a:	3301      	adds	r3, #1
   1646c:	1886      	adds	r6, r0, r2
   1646e:	6163      	str	r3, [r4, #20]
   16470:	d005      	beq.n	1647e <d_unqualified_name+0x1c2>
   16472:	2d00      	cmp	r5, #0
   16474:	d04f      	beq.n	16516 <d_unqualified_name+0x25a>
   16476:	2308      	movs	r3, #8
   16478:	5483      	strb	r3, [r0, r2]
   1647a:	7137      	strb	r7, [r6, #4]
   1647c:	60b5      	str	r5, [r6, #8]
   1647e:	788b      	ldrb	r3, [r1, #2]
   16480:	4635      	mov	r5, r6
   16482:	e749      	b.n	16318 <d_unqualified_name+0x5c>
   16484:	2705      	movs	r7, #5
   16486:	e7e6      	b.n	16456 <d_unqualified_name+0x19a>
   16488:	2704      	movs	r7, #4
   1648a:	e7e4      	b.n	16456 <d_unqualified_name+0x19a>
   1648c:	2703      	movs	r7, #3
   1648e:	e7e2      	b.n	16456 <d_unqualified_name+0x19a>
   16490:	2701      	movs	r7, #1
   16492:	e7e0      	b.n	16456 <d_unqualified_name+0x19a>
   16494:	6842      	ldr	r2, [r0, #4]
   16496:	6b23      	ldr	r3, [r4, #48]	; 0x30
   16498:	6896      	ldr	r6, [r2, #8]
   1649a:	6810      	ldr	r0, [r2, #0]
   1649c:	491f      	ldr	r1, [pc, #124]	; (1651c <d_unqualified_name+0x260>)
   1649e:	3307      	adds	r3, #7
   164a0:	4433      	add	r3, r6
   164a2:	6323      	str	r3, [r4, #48]	; 0x30
   164a4:	f008 fa80 	bl	1e9a8 <strcmp>
   164a8:	2800      	cmp	r0, #0
   164aa:	f47f af41 	bne.w	16330 <d_unqualified_name+0x74>
   164ae:	4620      	mov	r0, r4
   164b0:	f7fe f99e 	bl	147f0 <d_source_name>
   164b4:	462a      	mov	r2, r5
   164b6:	4603      	mov	r3, r0
   164b8:	2136      	movs	r1, #54	; 0x36
   164ba:	4620      	mov	r0, r4
   164bc:	f7fd ffc6 	bl	1444c <d_make_comp>
   164c0:	68e3      	ldr	r3, [r4, #12]
   164c2:	4605      	mov	r5, r0
   164c4:	781b      	ldrb	r3, [r3, #0]
   164c6:	e727      	b.n	16318 <d_unqualified_name+0x5c>
   164c8:	784b      	ldrb	r3, [r1, #1]
   164ca:	3b31      	subs	r3, #49	; 0x31
   164cc:	2b04      	cmp	r3, #4
   164ce:	f63f af3e 	bhi.w	1634e <d_unqualified_name+0x92>
   164d2:	e8df f003 	tbb	[pc, r3]
   164d6:	0315      	.short	0x0315
   164d8:	191b      	.short	0x191b
   164da:	17          	.byte	0x17
   164db:	00          	.byte	0x00
   164dc:	2702      	movs	r7, #2
   164de:	6963      	ldr	r3, [r4, #20]
   164e0:	69a2      	ldr	r2, [r4, #24]
   164e2:	1c88      	adds	r0, r1, #2
   164e4:	4293      	cmp	r3, r2
   164e6:	60e0      	str	r0, [r4, #12]
   164e8:	da12      	bge.n	16510 <d_unqualified_name+0x254>
   164ea:	eb03 0243 	add.w	r2, r3, r3, lsl #1
   164ee:	6920      	ldr	r0, [r4, #16]
   164f0:	0092      	lsls	r2, r2, #2
   164f2:	3301      	adds	r3, #1
   164f4:	1886      	adds	r6, r0, r2
   164f6:	6163      	str	r3, [r4, #20]
   164f8:	d0c1      	beq.n	1647e <d_unqualified_name+0x1c2>
   164fa:	b165      	cbz	r5, 16516 <d_unqualified_name+0x25a>
   164fc:	2307      	movs	r3, #7
   164fe:	e7bb      	b.n	16478 <d_unqualified_name+0x1bc>
   16500:	2701      	movs	r7, #1
   16502:	e7ec      	b.n	164de <d_unqualified_name+0x222>
   16504:	2705      	movs	r7, #5
   16506:	e7ea      	b.n	164de <d_unqualified_name+0x222>
   16508:	2704      	movs	r7, #4
   1650a:	e7e8      	b.n	164de <d_unqualified_name+0x222>
   1650c:	2703      	movs	r7, #3
   1650e:	e7e6      	b.n	164de <d_unqualified_name+0x222>
   16510:	788b      	ldrb	r3, [r1, #2]
   16512:	2500      	movs	r5, #0
   16514:	e700      	b.n	16318 <d_unqualified_name+0x5c>
   16516:	788b      	ldrb	r3, [r1, #2]
   16518:	e6fe      	b.n	16318 <d_unqualified_name+0x5c>
   1651a:	bf00      	nop
   1651c:	00024358 	.word	0x00024358

00016520 <d_bare_function_type>:
   16520:	b570      	push	{r4, r5, r6, lr}
   16522:	68c3      	ldr	r3, [r0, #12]
   16524:	781a      	ldrb	r2, [r3, #0]
   16526:	2a4a      	cmp	r2, #74	; 0x4a
   16528:	4604      	mov	r4, r0
   1652a:	d00d      	beq.n	16548 <d_bare_function_type+0x28>
   1652c:	b971      	cbnz	r1, 1654c <d_bare_function_type+0x2c>
   1652e:	460d      	mov	r5, r1
   16530:	4620      	mov	r0, r4
   16532:	f7ff fe81 	bl	16238 <d_parmlist>
   16536:	b178      	cbz	r0, 16558 <d_bare_function_type+0x38>
   16538:	4603      	mov	r3, r0
   1653a:	462a      	mov	r2, r5
   1653c:	4620      	mov	r0, r4
   1653e:	2129      	movs	r1, #41	; 0x29
   16540:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   16544:	f7fd bf82 	b.w	1444c <d_make_comp>
   16548:	3301      	adds	r3, #1
   1654a:	60c3      	str	r3, [r0, #12]
   1654c:	4620      	mov	r0, r4
   1654e:	f7ff fa0d 	bl	1596c <d_type>
   16552:	4605      	mov	r5, r0
   16554:	2800      	cmp	r0, #0
   16556:	d1eb      	bne.n	16530 <d_bare_function_type+0x10>
   16558:	2000      	movs	r0, #0
   1655a:	bd70      	pop	{r4, r5, r6, pc}

0001655c <d_function_type>:
   1655c:	68c3      	ldr	r3, [r0, #12]
   1655e:	781a      	ldrb	r2, [r3, #0]
   16560:	2a46      	cmp	r2, #70	; 0x46
   16562:	d001      	beq.n	16568 <d_function_type+0xc>
   16564:	2000      	movs	r0, #0
   16566:	4770      	bx	lr
   16568:	b510      	push	{r4, lr}
   1656a:	1c5a      	adds	r2, r3, #1
   1656c:	60c2      	str	r2, [r0, #12]
   1656e:	785a      	ldrb	r2, [r3, #1]
   16570:	2a59      	cmp	r2, #89	; 0x59
   16572:	bf04      	itt	eq
   16574:	3302      	addeq	r3, #2
   16576:	60c3      	streq	r3, [r0, #12]
   16578:	2101      	movs	r1, #1
   1657a:	4604      	mov	r4, r0
   1657c:	f7ff ffd0 	bl	16520 <d_bare_function_type>
   16580:	4601      	mov	r1, r0
   16582:	4620      	mov	r0, r4
   16584:	f7fe f814 	bl	145b0 <d_ref_qualifier>
   16588:	68e3      	ldr	r3, [r4, #12]
   1658a:	781a      	ldrb	r2, [r3, #0]
   1658c:	2a45      	cmp	r2, #69	; 0x45
   1658e:	d001      	beq.n	16594 <d_function_type+0x38>
   16590:	2000      	movs	r0, #0
   16592:	bd10      	pop	{r4, pc}
   16594:	3301      	adds	r3, #1
   16596:	60e3      	str	r3, [r4, #12]
   16598:	bd10      	pop	{r4, pc}
   1659a:	bf00      	nop

0001659c <d_encoding>:
   1659c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   165a0:	68c3      	ldr	r3, [r0, #12]
   165a2:	781a      	ldrb	r2, [r3, #0]
   165a4:	2a47      	cmp	r2, #71	; 0x47
   165a6:	4605      	mov	r5, r0
   165a8:	d01f      	beq.n	165ea <d_encoding+0x4e>
   165aa:	2a54      	cmp	r2, #84	; 0x54
   165ac:	d01d      	beq.n	165ea <d_encoding+0x4e>
   165ae:	460e      	mov	r6, r1
   165b0:	f7ff f820 	bl	155f4 <d_name>
   165b4:	4604      	mov	r4, r0
   165b6:	b310      	cbz	r0, 165fe <d_encoding+0x62>
   165b8:	b32e      	cbz	r6, 16606 <d_encoding+0x6a>
   165ba:	68ab      	ldr	r3, [r5, #8]
   165bc:	07db      	lsls	r3, r3, #31
   165be:	d422      	bmi.n	16606 <d_encoding+0x6a>
   165c0:	7823      	ldrb	r3, [r4, #0]
   165c2:	f1a3 021c 	sub.w	r2, r3, #28
   165c6:	2a04      	cmp	r2, #4
   165c8:	d940      	bls.n	1664c <d_encoding+0xb0>
   165ca:	2b4c      	cmp	r3, #76	; 0x4c
   165cc:	d03e      	beq.n	1664c <d_encoding+0xb0>
   165ce:	2b02      	cmp	r3, #2
   165d0:	d116      	bne.n	16600 <d_encoding+0x64>
   165d2:	68a3      	ldr	r3, [r4, #8]
   165d4:	781a      	ldrb	r2, [r3, #0]
   165d6:	f1a2 011c 	sub.w	r1, r2, #28
   165da:	2904      	cmp	r1, #4
   165dc:	f240 8283 	bls.w	16ae6 <d_encoding+0x54a>
   165e0:	2a4c      	cmp	r2, #76	; 0x4c
   165e2:	f000 8280 	beq.w	16ae6 <d_encoding+0x54a>
   165e6:	60a3      	str	r3, [r4, #8]
   165e8:	e00a      	b.n	16600 <d_encoding+0x64>
   165ea:	6b29      	ldr	r1, [r5, #48]	; 0x30
   165ec:	f101 0214 	add.w	r2, r1, #20
   165f0:	632a      	str	r2, [r5, #48]	; 0x30
   165f2:	781a      	ldrb	r2, [r3, #0]
   165f4:	2a54      	cmp	r2, #84	; 0x54
   165f6:	d02b      	beq.n	16650 <d_encoding+0xb4>
   165f8:	2a47      	cmp	r2, #71	; 0x47
   165fa:	f000 809f 	beq.w	1673c <d_encoding+0x1a0>
   165fe:	2400      	movs	r4, #0
   16600:	4620      	mov	r0, r4
   16602:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   16606:	68eb      	ldr	r3, [r5, #12]
   16608:	781b      	ldrb	r3, [r3, #0]
   1660a:	2b00      	cmp	r3, #0
   1660c:	d0f8      	beq.n	16600 <d_encoding+0x64>
   1660e:	2b45      	cmp	r3, #69	; 0x45
   16610:	d0f6      	beq.n	16600 <d_encoding+0x64>
   16612:	4621      	mov	r1, r4
   16614:	780a      	ldrb	r2, [r1, #0]
   16616:	2a20      	cmp	r2, #32
   16618:	f200 8113 	bhi.w	16842 <d_encoding+0x2a6>
   1661c:	2a1c      	cmp	r2, #28
   1661e:	f080 8112 	bcs.w	16846 <d_encoding+0x2aa>
   16622:	2a04      	cmp	r2, #4
   16624:	f040 8101 	bne.w	1682a <d_encoding+0x28e>
   16628:	684a      	ldr	r2, [r1, #4]
   1662a:	b16a      	cbz	r2, 16648 <d_encoding+0xac>
   1662c:	7813      	ldrb	r3, [r2, #0]
   1662e:	2b08      	cmp	r3, #8
   16630:	f103 31ff 	add.w	r1, r3, #4294967295
   16634:	f200 80f6 	bhi.w	16824 <d_encoding+0x288>
   16638:	2b07      	cmp	r3, #7
   1663a:	f080 80f6 	bcs.w	1682a <d_encoding+0x28e>
   1663e:	2901      	cmp	r1, #1
   16640:	d802      	bhi.n	16648 <d_encoding+0xac>
   16642:	6892      	ldr	r2, [r2, #8]
   16644:	2a00      	cmp	r2, #0
   16646:	d1f1      	bne.n	1662c <d_encoding+0x90>
   16648:	2101      	movs	r1, #1
   1664a:	e0ef      	b.n	1682c <d_encoding+0x290>
   1664c:	6864      	ldr	r4, [r4, #4]
   1664e:	e7b7      	b.n	165c0 <d_encoding+0x24>
   16650:	1c5a      	adds	r2, r3, #1
   16652:	60ea      	str	r2, [r5, #12]
   16654:	785a      	ldrb	r2, [r3, #1]
   16656:	2a00      	cmp	r2, #0
   16658:	d0d1      	beq.n	165fe <d_encoding+0x62>
   1665a:	1c9a      	adds	r2, r3, #2
   1665c:	60ea      	str	r2, [r5, #12]
   1665e:	785b      	ldrb	r3, [r3, #1]
   16660:	3b43      	subs	r3, #67	; 0x43
   16662:	2b33      	cmp	r3, #51	; 0x33
   16664:	d8cb      	bhi.n	165fe <d_encoding+0x62>
   16666:	a201      	add	r2, pc, #4	; (adr r2, 1666c <d_encoding+0xd0>)
   16668:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   1666c:	00016aa7 	.word	0x00016aa7
   16670:	000165ff 	.word	0x000165ff
   16674:	000165ff 	.word	0x000165ff
   16678:	00016a91 	.word	0x00016a91
   1667c:	000165ff 	.word	0x000165ff
   16680:	00016a7b 	.word	0x00016a7b
   16684:	00016a65 	.word	0x00016a65
   16688:	00016a4f 	.word	0x00016a4f
   1668c:	000165ff 	.word	0x000165ff
   16690:	000165ff 	.word	0x000165ff
   16694:	000165ff 	.word	0x000165ff
   16698:	000165ff 	.word	0x000165ff
   1669c:	000165ff 	.word	0x000165ff
   166a0:	000165ff 	.word	0x000165ff
   166a4:	000165ff 	.word	0x000165ff
   166a8:	000165ff 	.word	0x000165ff
   166ac:	00016a39 	.word	0x00016a39
   166b0:	00016a1f 	.word	0x00016a1f
   166b4:	000165ff 	.word	0x000165ff
   166b8:	00016a05 	.word	0x00016a05
   166bc:	000169ef 	.word	0x000169ef
   166c0:	000165ff 	.word	0x000165ff
   166c4:	000165ff 	.word	0x000165ff
   166c8:	000165ff 	.word	0x000165ff
   166cc:	000165ff 	.word	0x000165ff
   166d0:	000165ff 	.word	0x000165ff
   166d4:	000165ff 	.word	0x000165ff
   166d8:	000165ff 	.word	0x000165ff
   166dc:	000165ff 	.word	0x000165ff
   166e0:	000165ff 	.word	0x000165ff
   166e4:	000165ff 	.word	0x000165ff
   166e8:	000165ff 	.word	0x000165ff
   166ec:	000169bb 	.word	0x000169bb
   166f0:	000165ff 	.word	0x000165ff
   166f4:	000165ff 	.word	0x000165ff
   166f8:	000165ff 	.word	0x000165ff
   166fc:	000165ff 	.word	0x000165ff
   16700:	00016995 	.word	0x00016995
   16704:	000165ff 	.word	0x000165ff
   16708:	000165ff 	.word	0x000165ff
   1670c:	000165ff 	.word	0x000165ff
   16710:	000165ff 	.word	0x000165ff
   16714:	000165ff 	.word	0x000165ff
   16718:	000165ff 	.word	0x000165ff
   1671c:	000165ff 	.word	0x000165ff
   16720:	000165ff 	.word	0x000165ff
   16724:	000165ff 	.word	0x000165ff
   16728:	000165ff 	.word	0x000165ff
   1672c:	000165ff 	.word	0x000165ff
   16730:	000165ff 	.word	0x000165ff
   16734:	000165ff 	.word	0x000165ff
   16738:	0001696f 	.word	0x0001696f
   1673c:	1c5a      	adds	r2, r3, #1
   1673e:	60ea      	str	r2, [r5, #12]
   16740:	785a      	ldrb	r2, [r3, #1]
   16742:	2a00      	cmp	r2, #0
   16744:	f43f af5b 	beq.w	165fe <d_encoding+0x62>
   16748:	1c9a      	adds	r2, r3, #2
   1674a:	60ea      	str	r2, [r5, #12]
   1674c:	785a      	ldrb	r2, [r3, #1]
   1674e:	3a41      	subs	r2, #65	; 0x41
   16750:	2a31      	cmp	r2, #49	; 0x31
   16752:	f63f af54 	bhi.w	165fe <d_encoding+0x62>
   16756:	a101      	add	r1, pc, #4	; (adr r1, 1675c <d_encoding+0x1c0>)
   16758:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
   1675c:	00016851 	.word	0x00016851
   16760:	000165ff 	.word	0x000165ff
   16764:	000165ff 	.word	0x000165ff
   16768:	000165ff 	.word	0x000165ff
   1676c:	000165ff 	.word	0x000165ff
   16770:	000165ff 	.word	0x000165ff
   16774:	000165ff 	.word	0x000165ff
   16778:	000165ff 	.word	0x000165ff
   1677c:	000165ff 	.word	0x000165ff
   16780:	000165ff 	.word	0x000165ff
   16784:	000165ff 	.word	0x000165ff
   16788:	000165ff 	.word	0x000165ff
   1678c:	000165ff 	.word	0x000165ff
   16790:	000165ff 	.word	0x000165ff
   16794:	000165ff 	.word	0x000165ff
   16798:	000165ff 	.word	0x000165ff
   1679c:	000165ff 	.word	0x000165ff
   167a0:	00016951 	.word	0x00016951
   167a4:	000165ff 	.word	0x000165ff
   167a8:	00016925 	.word	0x00016925
   167ac:	000165ff 	.word	0x000165ff
   167b0:	0001690f 	.word	0x0001690f
   167b4:	000165ff 	.word	0x000165ff
   167b8:	000165ff 	.word	0x000165ff
   167bc:	000165ff 	.word	0x000165ff
   167c0:	000165ff 	.word	0x000165ff
   167c4:	000165ff 	.word	0x000165ff
   167c8:	000165ff 	.word	0x000165ff
   167cc:	000165ff 	.word	0x000165ff
   167d0:	000165ff 	.word	0x000165ff
   167d4:	000165ff 	.word	0x000165ff
   167d8:	000165ff 	.word	0x000165ff
   167dc:	000165ff 	.word	0x000165ff
   167e0:	000165ff 	.word	0x000165ff
   167e4:	000165ff 	.word	0x000165ff
   167e8:	000165ff 	.word	0x000165ff
   167ec:	000165ff 	.word	0x000165ff
   167f0:	000165ff 	.word	0x000165ff
   167f4:	000165ff 	.word	0x000165ff
   167f8:	000165ff 	.word	0x000165ff
   167fc:	000165ff 	.word	0x000165ff
   16800:	000165ff 	.word	0x000165ff
   16804:	000165ff 	.word	0x000165ff
   16808:	000165ff 	.word	0x000165ff
   1680c:	000165ff 	.word	0x000165ff
   16810:	000165ff 	.word	0x000165ff
   16814:	000165ff 	.word	0x000165ff
   16818:	000165ff 	.word	0x000165ff
   1681c:	000165ff 	.word	0x000165ff
   16820:	00016869 	.word	0x00016869
   16824:	2b34      	cmp	r3, #52	; 0x34
   16826:	f47f af0f 	bne.w	16648 <d_encoding+0xac>
   1682a:	2100      	movs	r1, #0
   1682c:	4628      	mov	r0, r5
   1682e:	f7ff fe77 	bl	16520 <d_bare_function_type>
   16832:	4622      	mov	r2, r4
   16834:	4603      	mov	r3, r0
   16836:	2103      	movs	r1, #3
   16838:	4628      	mov	r0, r5
   1683a:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   1683e:	f7fd be05 	b.w	1444c <d_make_comp>
   16842:	2a4c      	cmp	r2, #76	; 0x4c
   16844:	d1f1      	bne.n	1682a <d_encoding+0x28e>
   16846:	6849      	ldr	r1, [r1, #4]
   16848:	2900      	cmp	r1, #0
   1684a:	f47f aee3 	bne.w	16614 <d_encoding+0x78>
   1684e:	e7ed      	b.n	1682c <d_encoding+0x290>
   16850:	2100      	movs	r1, #0
   16852:	4628      	mov	r0, r5
   16854:	f7ff fea2 	bl	1659c <d_encoding>
   16858:	2300      	movs	r3, #0
   1685a:	4602      	mov	r2, r0
   1685c:	2117      	movs	r1, #23
   1685e:	4628      	mov	r0, r5
   16860:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   16864:	f7fd bdf2 	b.w	1444c <d_make_comp>
   16868:	f105 000c 	add.w	r0, r5, #12
   1686c:	f7fd ff40 	bl	146f0 <d_number.isra.0>
   16870:	2801      	cmp	r0, #1
   16872:	f77f aec4 	ble.w	165fe <d_encoding+0x62>
   16876:	68eb      	ldr	r3, [r5, #12]
   16878:	781a      	ldrb	r2, [r3, #0]
   1687a:	2a00      	cmp	r2, #0
   1687c:	f43f aebf 	beq.w	165fe <d_encoding+0x62>
   16880:	1c5f      	adds	r7, r3, #1
   16882:	60ef      	str	r7, [r5, #12]
   16884:	781b      	ldrb	r3, [r3, #0]
   16886:	2b5f      	cmp	r3, #95	; 0x5f
   16888:	f47f aeb9 	bne.w	165fe <d_encoding+0x62>
   1688c:	2200      	movs	r2, #0
   1688e:	1e46      	subs	r6, r0, #1
   16890:	4690      	mov	r8, r2
   16892:	f04f 0940 	mov.w	r9, #64	; 0x40
   16896:	783b      	ldrb	r3, [r7, #0]
   16898:	2b00      	cmp	r3, #0
   1689a:	f43f aeb0 	beq.w	165fe <d_encoding+0x62>
   1689e:	2b24      	cmp	r3, #36	; 0x24
   168a0:	f000 8128 	beq.w	16af4 <d_encoding+0x558>
   168a4:	463c      	mov	r4, r7
   168a6:	2100      	movs	r1, #0
   168a8:	e004      	b.n	168b4 <d_encoding+0x318>
   168aa:	f814 3f01 	ldrb.w	r3, [r4, #1]!
   168ae:	b123      	cbz	r3, 168ba <d_encoding+0x31e>
   168b0:	2b24      	cmp	r3, #36	; 0x24
   168b2:	d002      	beq.n	168ba <d_encoding+0x31e>
   168b4:	3101      	adds	r1, #1
   168b6:	42b1      	cmp	r1, r6
   168b8:	dbf7      	blt.n	168aa <d_encoding+0x30e>
   168ba:	696c      	ldr	r4, [r5, #20]
   168bc:	69a8      	ldr	r0, [r5, #24]
   168be:	4284      	cmp	r4, r0
   168c0:	f280 8113 	bge.w	16aea <d_encoding+0x54e>
   168c4:	6928      	ldr	r0, [r5, #16]
   168c6:	1c63      	adds	r3, r4, #1
   168c8:	eb04 0444 	add.w	r4, r4, r4, lsl #1
   168cc:	616b      	str	r3, [r5, #20]
   168ce:	eb10 0384 	adds.w	r3, r0, r4, lsl #2
   168d2:	f000 810a 	beq.w	16aea <d_encoding+0x54e>
   168d6:	f800 8024 	strb.w	r8, [r0, r4, lsl #2]
   168da:	605f      	str	r7, [r3, #4]
   168dc:	6099      	str	r1, [r3, #8]
   168de:	68ef      	ldr	r7, [r5, #12]
   168e0:	440f      	add	r7, r1
   168e2:	1a76      	subs	r6, r6, r1
   168e4:	60ef      	str	r7, [r5, #12]
   168e6:	2a00      	cmp	r2, #0
   168e8:	f000 8121 	beq.w	16b2e <d_encoding+0x592>
   168ec:	213f      	movs	r1, #63	; 0x3f
   168ee:	4628      	mov	r0, r5
   168f0:	f7fd fdac 	bl	1444c <d_make_comp>
   168f4:	4602      	mov	r2, r0
   168f6:	2800      	cmp	r0, #0
   168f8:	f43f ae81 	beq.w	165fe <d_encoding+0x62>
   168fc:	2e00      	cmp	r6, #0
   168fe:	dcca      	bgt.n	16896 <d_encoding+0x2fa>
   16900:	4628      	mov	r0, r5
   16902:	2300      	movs	r3, #0
   16904:	213e      	movs	r1, #62	; 0x3e
   16906:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   1690a:	f7fd bd9f 	b.w	1444c <d_make_comp>
   1690e:	4628      	mov	r0, r5
   16910:	f7fe fe70 	bl	155f4 <d_name>
   16914:	2300      	movs	r3, #0
   16916:	4602      	mov	r2, r0
   16918:	2113      	movs	r1, #19
   1691a:	4628      	mov	r0, r5
   1691c:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   16920:	f7fd bd94 	b.w	1444c <d_make_comp>
   16924:	789a      	ldrb	r2, [r3, #2]
   16926:	2100      	movs	r1, #0
   16928:	4628      	mov	r0, r5
   1692a:	2a00      	cmp	r2, #0
   1692c:	f000 8101 	beq.w	16b32 <d_encoding+0x596>
   16930:	1cda      	adds	r2, r3, #3
   16932:	60ea      	str	r2, [r5, #12]
   16934:	789b      	ldrb	r3, [r3, #2]
   16936:	2b6e      	cmp	r3, #110	; 0x6e
   16938:	f040 80fb 	bne.w	16b32 <d_encoding+0x596>
   1693c:	f7ff fe2e 	bl	1659c <d_encoding>
   16940:	2300      	movs	r3, #0
   16942:	4602      	mov	r2, r0
   16944:	2149      	movs	r1, #73	; 0x49
   16946:	4628      	mov	r0, r5
   16948:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   1694c:	f7fd bd7e 	b.w	1444c <d_make_comp>
   16950:	4628      	mov	r0, r5
   16952:	f7fe fe4f 	bl	155f4 <d_name>
   16956:	4604      	mov	r4, r0
   16958:	4628      	mov	r0, r5
   1695a:	f7fd fef3 	bl	14744 <d_number_component>
   1695e:	4622      	mov	r2, r4
   16960:	4603      	mov	r3, r0
   16962:	2116      	movs	r1, #22
   16964:	4628      	mov	r0, r5
   16966:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   1696a:	f7fd bd6f 	b.w	1444c <d_make_comp>
   1696e:	2176      	movs	r1, #118	; 0x76
   16970:	4628      	mov	r0, r5
   16972:	f7fe f871 	bl	14a58 <d_call_offset>
   16976:	2800      	cmp	r0, #0
   16978:	f43f ae41 	beq.w	165fe <d_encoding+0x62>
   1697c:	2100      	movs	r1, #0
   1697e:	4628      	mov	r0, r5
   16980:	f7ff fe0c 	bl	1659c <d_encoding>
   16984:	2300      	movs	r3, #0
   16986:	4602      	mov	r2, r0
   16988:	2110      	movs	r1, #16
   1698a:	4628      	mov	r0, r5
   1698c:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   16990:	f7fd bd5c 	b.w	1444c <d_make_comp>
   16994:	2168      	movs	r1, #104	; 0x68
   16996:	4628      	mov	r0, r5
   16998:	f7fe f85e 	bl	14a58 <d_call_offset>
   1699c:	2800      	cmp	r0, #0
   1699e:	f43f ae2e 	beq.w	165fe <d_encoding+0x62>
   169a2:	2100      	movs	r1, #0
   169a4:	4628      	mov	r0, r5
   169a6:	f7ff fdf9 	bl	1659c <d_encoding>
   169aa:	2300      	movs	r3, #0
   169ac:	4602      	mov	r2, r0
   169ae:	210f      	movs	r1, #15
   169b0:	4628      	mov	r0, r5
   169b2:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   169b6:	f7fd bd49 	b.w	1444c <d_make_comp>
   169ba:	2100      	movs	r1, #0
   169bc:	4628      	mov	r0, r5
   169be:	f7fe f84b 	bl	14a58 <d_call_offset>
   169c2:	2800      	cmp	r0, #0
   169c4:	f43f ae1b 	beq.w	165fe <d_encoding+0x62>
   169c8:	2100      	movs	r1, #0
   169ca:	4628      	mov	r0, r5
   169cc:	f7fe f844 	bl	14a58 <d_call_offset>
   169d0:	2800      	cmp	r0, #0
   169d2:	f43f ae14 	beq.w	165fe <d_encoding+0x62>
   169d6:	2100      	movs	r1, #0
   169d8:	4628      	mov	r0, r5
   169da:	f7ff fddf 	bl	1659c <d_encoding>
   169de:	2300      	movs	r3, #0
   169e0:	4602      	mov	r2, r0
   169e2:	2111      	movs	r1, #17
   169e4:	4628      	mov	r0, r5
   169e6:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   169ea:	f7fd bd2f 	b.w	1444c <d_make_comp>
   169ee:	4628      	mov	r0, r5
   169f0:	f7fe fe00 	bl	155f4 <d_name>
   169f4:	2300      	movs	r3, #0
   169f6:	4602      	mov	r2, r0
   169f8:	2115      	movs	r1, #21
   169fa:	4628      	mov	r0, r5
   169fc:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   16a00:	f7fd bd24 	b.w	1444c <d_make_comp>
   16a04:	310f      	adds	r1, #15
   16a06:	6329      	str	r1, [r5, #48]	; 0x30
   16a08:	4628      	mov	r0, r5
   16a0a:	f7fe ffaf 	bl	1596c <d_type>
   16a0e:	2300      	movs	r3, #0
   16a10:	4602      	mov	r2, r0
   16a12:	2109      	movs	r1, #9
   16a14:	4628      	mov	r0, r5
   16a16:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   16a1a:	f7fd bd17 	b.w	1444c <d_make_comp>
   16a1e:	310a      	adds	r1, #10
   16a20:	6329      	str	r1, [r5, #48]	; 0x30
   16a22:	4628      	mov	r0, r5
   16a24:	f7fe ffa2 	bl	1596c <d_type>
   16a28:	2300      	movs	r3, #0
   16a2a:	4602      	mov	r2, r0
   16a2c:	210a      	movs	r1, #10
   16a2e:	4628      	mov	r0, r5
   16a30:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   16a34:	f7fd bd0a 	b.w	1444c <d_make_comp>
   16a38:	4628      	mov	r0, r5
   16a3a:	f7fe ff97 	bl	1596c <d_type>
   16a3e:	2300      	movs	r3, #0
   16a40:	4602      	mov	r2, r0
   16a42:	210d      	movs	r1, #13
   16a44:	4628      	mov	r0, r5
   16a46:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   16a4a:	f7fd bcff 	b.w	1444c <d_make_comp>
   16a4e:	4628      	mov	r0, r5
   16a50:	f7fe ff8c 	bl	1596c <d_type>
   16a54:	2300      	movs	r3, #0
   16a56:	4602      	mov	r2, r0
   16a58:	2112      	movs	r1, #18
   16a5a:	4628      	mov	r0, r5
   16a5c:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   16a60:	f7fd bcf4 	b.w	1444c <d_make_comp>
   16a64:	4628      	mov	r0, r5
   16a66:	f7fe ff81 	bl	1596c <d_type>
   16a6a:	2300      	movs	r3, #0
   16a6c:	4602      	mov	r2, r0
   16a6e:	210c      	movs	r1, #12
   16a70:	4628      	mov	r0, r5
   16a72:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   16a76:	f7fd bce9 	b.w	1444c <d_make_comp>
   16a7a:	4628      	mov	r0, r5
   16a7c:	f7fe fdba 	bl	155f4 <d_name>
   16a80:	2300      	movs	r3, #0
   16a82:	4602      	mov	r2, r0
   16a84:	2114      	movs	r1, #20
   16a86:	4628      	mov	r0, r5
   16a88:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   16a8c:	f7fd bcde 	b.w	1444c <d_make_comp>
   16a90:	4628      	mov	r0, r5
   16a92:	f7fe ff6b 	bl	1596c <d_type>
   16a96:	2300      	movs	r3, #0
   16a98:	4602      	mov	r2, r0
   16a9a:	210e      	movs	r1, #14
   16a9c:	4628      	mov	r0, r5
   16a9e:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   16aa2:	f7fd bcd3 	b.w	1444c <d_make_comp>
   16aa6:	4628      	mov	r0, r5
   16aa8:	f7fe ff60 	bl	1596c <d_type>
   16aac:	4604      	mov	r4, r0
   16aae:	f105 000c 	add.w	r0, r5, #12
   16ab2:	f7fd fe1d 	bl	146f0 <d_number.isra.0>
   16ab6:	2800      	cmp	r0, #0
   16ab8:	f6ff ada1 	blt.w	165fe <d_encoding+0x62>
   16abc:	68eb      	ldr	r3, [r5, #12]
   16abe:	781a      	ldrb	r2, [r3, #0]
   16ac0:	2a5f      	cmp	r2, #95	; 0x5f
   16ac2:	f47f ad9c 	bne.w	165fe <d_encoding+0x62>
   16ac6:	3301      	adds	r3, #1
   16ac8:	60eb      	str	r3, [r5, #12]
   16aca:	4628      	mov	r0, r5
   16acc:	f7fe ff4e 	bl	1596c <d_type>
   16ad0:	6b2b      	ldr	r3, [r5, #48]	; 0x30
   16ad2:	1d59      	adds	r1, r3, #5
   16ad4:	6329      	str	r1, [r5, #48]	; 0x30
   16ad6:	4602      	mov	r2, r0
   16ad8:	4623      	mov	r3, r4
   16ada:	4628      	mov	r0, r5
   16adc:	210b      	movs	r1, #11
   16ade:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   16ae2:	f7fd bcb3 	b.w	1444c <d_make_comp>
   16ae6:	685b      	ldr	r3, [r3, #4]
   16ae8:	e574      	b.n	165d4 <d_encoding+0x38>
   16aea:	68eb      	ldr	r3, [r5, #12]
   16aec:	440b      	add	r3, r1
   16aee:	60eb      	str	r3, [r5, #12]
   16af0:	2400      	movs	r4, #0
   16af2:	e585      	b.n	16600 <d_encoding+0x64>
   16af4:	787b      	ldrb	r3, [r7, #1]
   16af6:	2b53      	cmp	r3, #83	; 0x53
   16af8:	d027      	beq.n	16b4a <d_encoding+0x5ae>
   16afa:	2b5f      	cmp	r3, #95	; 0x5f
   16afc:	d023      	beq.n	16b46 <d_encoding+0x5aa>
   16afe:	2b24      	cmp	r3, #36	; 0x24
   16b00:	f47f ad7d 	bne.w	165fe <d_encoding+0x62>
   16b04:	4618      	mov	r0, r3
   16b06:	6969      	ldr	r1, [r5, #20]
   16b08:	69ab      	ldr	r3, [r5, #24]
   16b0a:	4299      	cmp	r1, r3
   16b0c:	da1f      	bge.n	16b4e <d_encoding+0x5b2>
   16b0e:	692c      	ldr	r4, [r5, #16]
   16b10:	1c4f      	adds	r7, r1, #1
   16b12:	eb01 0141 	add.w	r1, r1, r1, lsl #1
   16b16:	eb14 0381 	adds.w	r3, r4, r1, lsl #2
   16b1a:	616f      	str	r7, [r5, #20]
   16b1c:	d017      	beq.n	16b4e <d_encoding+0x5b2>
   16b1e:	f804 9021 	strb.w	r9, [r4, r1, lsl #2]
   16b22:	6058      	str	r0, [r3, #4]
   16b24:	68ef      	ldr	r7, [r5, #12]
   16b26:	3702      	adds	r7, #2
   16b28:	3e02      	subs	r6, #2
   16b2a:	60ef      	str	r7, [r5, #12]
   16b2c:	e6db      	b.n	168e6 <d_encoding+0x34a>
   16b2e:	461a      	mov	r2, r3
   16b30:	e6e4      	b.n	168fc <d_encoding+0x360>
   16b32:	f7ff fd33 	bl	1659c <d_encoding>
   16b36:	2300      	movs	r3, #0
   16b38:	4602      	mov	r2, r0
   16b3a:	2148      	movs	r1, #72	; 0x48
   16b3c:	4628      	mov	r0, r5
   16b3e:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   16b42:	f7fd bc83 	b.w	1444c <d_make_comp>
   16b46:	202e      	movs	r0, #46	; 0x2e
   16b48:	e7dd      	b.n	16b06 <d_encoding+0x56a>
   16b4a:	202f      	movs	r0, #47	; 0x2f
   16b4c:	e7db      	b.n	16b06 <d_encoding+0x56a>
   16b4e:	68eb      	ldr	r3, [r5, #12]
   16b50:	3302      	adds	r3, #2
   16b52:	60eb      	str	r3, [r5, #12]
   16b54:	2400      	movs	r4, #0
   16b56:	e553      	b.n	16600 <d_encoding+0x64>

00016b58 <d_expr_primary>:
   16b58:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   16b5a:	68c2      	ldr	r2, [r0, #12]
   16b5c:	7813      	ldrb	r3, [r2, #0]
   16b5e:	2b4c      	cmp	r3, #76	; 0x4c
   16b60:	d001      	beq.n	16b66 <d_expr_primary+0xe>
   16b62:	2000      	movs	r0, #0
   16b64:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   16b66:	1c53      	adds	r3, r2, #1
   16b68:	60c3      	str	r3, [r0, #12]
   16b6a:	7851      	ldrb	r1, [r2, #1]
   16b6c:	295f      	cmp	r1, #95	; 0x5f
   16b6e:	4605      	mov	r5, r0
   16b70:	d03a      	beq.n	16be8 <d_expr_primary+0x90>
   16b72:	295a      	cmp	r1, #90	; 0x5a
   16b74:	d03f      	beq.n	16bf6 <d_expr_primary+0x9e>
   16b76:	f7fe fef9 	bl	1596c <d_type>
   16b7a:	2800      	cmp	r0, #0
   16b7c:	d0f1      	beq.n	16b62 <d_expr_primary+0xa>
   16b7e:	7803      	ldrb	r3, [r0, #0]
   16b80:	2b27      	cmp	r3, #39	; 0x27
   16b82:	d046      	beq.n	16c12 <d_expr_primary+0xba>
   16b84:	68ee      	ldr	r6, [r5, #12]
   16b86:	7833      	ldrb	r3, [r6, #0]
   16b88:	2b6e      	cmp	r3, #110	; 0x6e
   16b8a:	d04b      	beq.n	16c24 <d_expr_primary+0xcc>
   16b8c:	213c      	movs	r1, #60	; 0x3c
   16b8e:	2b45      	cmp	r3, #69	; 0x45
   16b90:	d04e      	beq.n	16c30 <d_expr_primary+0xd8>
   16b92:	2b00      	cmp	r3, #0
   16b94:	d0e5      	beq.n	16b62 <d_expr_primary+0xa>
   16b96:	4633      	mov	r3, r6
   16b98:	e001      	b.n	16b9e <d_expr_primary+0x46>
   16b9a:	2c00      	cmp	r4, #0
   16b9c:	d0e1      	beq.n	16b62 <d_expr_primary+0xa>
   16b9e:	3301      	adds	r3, #1
   16ba0:	60eb      	str	r3, [r5, #12]
   16ba2:	781c      	ldrb	r4, [r3, #0]
   16ba4:	2c45      	cmp	r4, #69	; 0x45
   16ba6:	d1f8      	bne.n	16b9a <d_expr_primary+0x42>
   16ba8:	1b9c      	subs	r4, r3, r6
   16baa:	696b      	ldr	r3, [r5, #20]
   16bac:	69aa      	ldr	r2, [r5, #24]
   16bae:	4293      	cmp	r3, r2
   16bb0:	da2d      	bge.n	16c0e <d_expr_primary+0xb6>
   16bb2:	eb03 0243 	add.w	r2, r3, r3, lsl #1
   16bb6:	692f      	ldr	r7, [r5, #16]
   16bb8:	3301      	adds	r3, #1
   16bba:	0092      	lsls	r2, r2, #2
   16bbc:	616b      	str	r3, [r5, #20]
   16bbe:	18bb      	adds	r3, r7, r2
   16bc0:	d025      	beq.n	16c0e <d_expr_primary+0xb6>
   16bc2:	b326      	cbz	r6, 16c0e <d_expr_primary+0xb6>
   16bc4:	b31c      	cbz	r4, 16c0e <d_expr_primary+0xb6>
   16bc6:	f04f 0e00 	mov.w	lr, #0
   16bca:	f807 e002 	strb.w	lr, [r7, r2]
   16bce:	605e      	str	r6, [r3, #4]
   16bd0:	609c      	str	r4, [r3, #8]
   16bd2:	4602      	mov	r2, r0
   16bd4:	4628      	mov	r0, r5
   16bd6:	f7fd fc39 	bl	1444c <d_make_comp>
   16bda:	68eb      	ldr	r3, [r5, #12]
   16bdc:	781a      	ldrb	r2, [r3, #0]
   16bde:	2a45      	cmp	r2, #69	; 0x45
   16be0:	d1bf      	bne.n	16b62 <d_expr_primary+0xa>
   16be2:	3301      	adds	r3, #1
   16be4:	60eb      	str	r3, [r5, #12]
   16be6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   16be8:	1c93      	adds	r3, r2, #2
   16bea:	60c3      	str	r3, [r0, #12]
   16bec:	7892      	ldrb	r2, [r2, #2]
   16bee:	2a5a      	cmp	r2, #90	; 0x5a
   16bf0:	bf18      	it	ne
   16bf2:	2000      	movne	r0, #0
   16bf4:	d107      	bne.n	16c06 <d_expr_primary+0xae>
   16bf6:	3301      	adds	r3, #1
   16bf8:	60eb      	str	r3, [r5, #12]
   16bfa:	2100      	movs	r1, #0
   16bfc:	4628      	mov	r0, r5
   16bfe:	f7ff fccd 	bl	1659c <d_encoding>
   16c02:	68eb      	ldr	r3, [r5, #12]
   16c04:	781a      	ldrb	r2, [r3, #0]
   16c06:	2a45      	cmp	r2, #69	; 0x45
   16c08:	d0eb      	beq.n	16be2 <d_expr_primary+0x8a>
   16c0a:	2000      	movs	r0, #0
   16c0c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   16c0e:	2300      	movs	r3, #0
   16c10:	e7df      	b.n	16bd2 <d_expr_primary+0x7a>
   16c12:	6843      	ldr	r3, [r0, #4]
   16c14:	7c1a      	ldrb	r2, [r3, #16]
   16c16:	2a00      	cmp	r2, #0
   16c18:	d0b4      	beq.n	16b84 <d_expr_primary+0x2c>
   16c1a:	685a      	ldr	r2, [r3, #4]
   16c1c:	6b2b      	ldr	r3, [r5, #48]	; 0x30
   16c1e:	1a9b      	subs	r3, r3, r2
   16c20:	632b      	str	r3, [r5, #48]	; 0x30
   16c22:	e7af      	b.n	16b84 <d_expr_primary+0x2c>
   16c24:	1c72      	adds	r2, r6, #1
   16c26:	60ea      	str	r2, [r5, #12]
   16c28:	7873      	ldrb	r3, [r6, #1]
   16c2a:	213d      	movs	r1, #61	; 0x3d
   16c2c:	4616      	mov	r6, r2
   16c2e:	e7ae      	b.n	16b8e <d_expr_primary+0x36>
   16c30:	2400      	movs	r4, #0
   16c32:	e7ba      	b.n	16baa <d_expr_primary+0x52>

00016c34 <d_print_comp_inner>:
   16c34:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   16c38:	4604      	mov	r4, r0
   16c3a:	b095      	sub	sp, #84	; 0x54
   16c3c:	2a00      	cmp	r2, #0
   16c3e:	f000 80db 	beq.w	16df8 <d_print_comp_inner+0x1c4>
   16c42:	f8d0 7118 	ldr.w	r7, [r0, #280]	; 0x118
   16c46:	2f00      	cmp	r7, #0
   16c48:	f040 80c2 	bne.w	16dd0 <d_print_comp_inner+0x19c>
   16c4c:	7813      	ldrb	r3, [r2, #0]
   16c4e:	4688      	mov	r8, r1
   16c50:	4615      	mov	r5, r2
   16c52:	2b4d      	cmp	r3, #77	; 0x4d
   16c54:	f201 81e6 	bhi.w	18024 <d_print_comp_inner+0x13f0>
   16c58:	e8df f013 	tbh	[pc, r3, lsl #1]
   16c5c:	043c045a 	.word	0x043c045a
   16c60:	03a4043c 	.word	0x03a4043c
   16c64:	048904a5 	.word	0x048904a5
   16c68:	038e04ea 	.word	0x038e04ea
   16c6c:	0330037c 	.word	0x0330037c
   16c70:	030a0356 	.word	0x030a0356
   16c74:	029802e4 	.word	0x029802e4
   16c78:	027202be 	.word	0x027202be
   16c7c:	01f0024c 	.word	0x01f0024c
   16c80:	01ca0226 	.word	0x01ca0226
   16c84:	015801a4 	.word	0x015801a4
   16c88:	0132017e 	.word	0x0132017e
   16c8c:	00f2010b 	.word	0x00f2010b
   16c90:	00f200f2 	.word	0x00f200f2
   16c94:	00d400d4 	.word	0x00d400d4
   16c98:	00d400d4 	.word	0x00d400d4
   16c9c:	00d400d4 	.word	0x00d400d4
   16ca0:	06d500d4 	.word	0x06d500d4
   16ca4:	00d406d5 	.word	0x00d406d5
   16ca8:	06a900d4 	.word	0x06a900d4
   16cac:	069306fc 	.word	0x069306fc
   16cb0:	0701071d 	.word	0x0701071d
   16cb4:	07010788 	.word	0x07010788
   16cb8:	057b057b 	.word	0x057b057b
   16cbc:	06060630 	.word	0x06060630
   16cc0:	09e405e0 	.word	0x09e405e0
   16cc4:	068e05ad 	.word	0x068e05ad
   16cc8:	004e0654 	.word	0x004e0654
   16ccc:	094c0485 	.word	0x094c0485
   16cd0:	08df08df 	.word	0x08df08df
   16cd4:	08ae08ae 	.word	0x08ae08ae
   16cd8:	05480888 	.word	0x05480888
   16cdc:	08e4053a 	.word	0x08e4053a
   16ce0:	09be0514 	.word	0x09be0514
   16ce4:	09980914 	.word	0x09980914
   16ce8:	07cb09e4 	.word	0x07cb09e4
   16cec:	07f10862 	.word	0x07f10862
   16cf0:	04130817 	.word	0x04130817
   16cf4:	055200d4 	.word	0x055200d4
   16cf8:	68ab      	ldr	r3, [r5, #8]
   16cfa:	781b      	ldrb	r3, [r3, #0]
   16cfc:	2b38      	cmp	r3, #56	; 0x38
   16cfe:	d17b      	bne.n	16df8 <d_print_comp_inner+0x1c4>
   16d00:	686a      	ldr	r2, [r5, #4]
   16d02:	6853      	ldr	r3, [r2, #4]
   16d04:	681b      	ldr	r3, [r3, #0]
   16d06:	7859      	ldrb	r1, [r3, #1]
   16d08:	2963      	cmp	r1, #99	; 0x63
   16d0a:	f002 814a 	beq.w	18fa2 <d_print_comp_inner+0x236e>
   16d0e:	f105 0308 	add.w	r3, r5, #8
   16d12:	4641      	mov	r1, r8
   16d14:	4620      	mov	r0, r4
   16d16:	f003 fbbb 	bl	1a490 <d_maybe_print_fold_expression.isra.15>
   16d1a:	4606      	mov	r6, r0
   16d1c:	2800      	cmp	r0, #0
   16d1e:	d157      	bne.n	16dd0 <d_print_comp_inner+0x19c>
   16d20:	686b      	ldr	r3, [r5, #4]
   16d22:	781a      	ldrb	r2, [r3, #0]
   16d24:	2a31      	cmp	r2, #49	; 0x31
   16d26:	f002 836b 	beq.w	19400 <d_print_comp_inner+0x27cc>
   16d2a:	685b      	ldr	r3, [r3, #4]
   16d2c:	49c7      	ldr	r1, [pc, #796]	; (1704c <d_print_comp_inner+0x418>)
   16d2e:	6818      	ldr	r0, [r3, #0]
   16d30:	f007 fe3a 	bl	1e9a8 <strcmp>
   16d34:	68ab      	ldr	r3, [r5, #8]
   16d36:	b920      	cbnz	r0, 16d42 <d_print_comp_inner+0x10e>
   16d38:	685a      	ldr	r2, [r3, #4]
   16d3a:	7811      	ldrb	r1, [r2, #0]
   16d3c:	2903      	cmp	r1, #3
   16d3e:	f002 83a5 	beq.w	1948c <d_print_comp_inner+0x2858>
   16d42:	685a      	ldr	r2, [r3, #4]
   16d44:	4641      	mov	r1, r8
   16d46:	4620      	mov	r0, r4
   16d48:	f003 fb3e 	bl	1a3c8 <d_print_subexpr>
   16d4c:	686f      	ldr	r7, [r5, #4]
   16d4e:	49c0      	ldr	r1, [pc, #768]	; (17050 <d_print_comp_inner+0x41c>)
   16d50:	687b      	ldr	r3, [r7, #4]
   16d52:	f8d3 9000 	ldr.w	r9, [r3]
   16d56:	4648      	mov	r0, r9
   16d58:	f007 fe26 	bl	1e9a8 <strcmp>
   16d5c:	4606      	mov	r6, r0
   16d5e:	2800      	cmp	r0, #0
   16d60:	f042 826f 	bne.w	19242 <d_print_comp_inner+0x260e>
   16d64:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
   16d68:	29ff      	cmp	r1, #255	; 0xff
   16d6a:	f002 844a 	beq.w	19602 <d_print_comp_inner+0x29ce>
   16d6e:	1c4a      	adds	r2, r1, #1
   16d70:	235b      	movs	r3, #91	; 0x5b
   16d72:	f8c4 2100 	str.w	r2, [r4, #256]	; 0x100
   16d76:	5463      	strb	r3, [r4, r1]
   16d78:	f884 3104 	strb.w	r3, [r4, #260]	; 0x104
   16d7c:	68ab      	ldr	r3, [r5, #8]
   16d7e:	4641      	mov	r1, r8
   16d80:	689a      	ldr	r2, [r3, #8]
   16d82:	4620      	mov	r0, r4
   16d84:	f002 fcfa 	bl	1977c <d_print_comp>
   16d88:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
   16d8c:	29ff      	cmp	r1, #255	; 0xff
   16d8e:	f002 8425 	beq.w	195dc <d_print_comp_inner+0x29a8>
   16d92:	235d      	movs	r3, #93	; 0x5d
   16d94:	1c4a      	adds	r2, r1, #1
   16d96:	f8c4 2100 	str.w	r2, [r4, #256]	; 0x100
   16d9a:	5463      	strb	r3, [r4, r1]
   16d9c:	f884 3104 	strb.w	r3, [r4, #260]	; 0x104
   16da0:	686b      	ldr	r3, [r5, #4]
   16da2:	781a      	ldrb	r2, [r3, #0]
   16da4:	2a31      	cmp	r2, #49	; 0x31
   16da6:	d113      	bne.n	16dd0 <d_print_comp_inner+0x19c>
   16da8:	685b      	ldr	r3, [r3, #4]
   16daa:	689a      	ldr	r2, [r3, #8]
   16dac:	2a01      	cmp	r2, #1
   16dae:	d10f      	bne.n	16dd0 <d_print_comp_inner+0x19c>
   16db0:	685b      	ldr	r3, [r3, #4]
   16db2:	781b      	ldrb	r3, [r3, #0]
   16db4:	2b3e      	cmp	r3, #62	; 0x3e
   16db6:	d10b      	bne.n	16dd0 <d_print_comp_inner+0x19c>
   16db8:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
   16dbc:	29ff      	cmp	r1, #255	; 0xff
   16dbe:	f002 8482 	beq.w	196c6 <d_print_comp_inner+0x2a92>
   16dc2:	2329      	movs	r3, #41	; 0x29
   16dc4:	1c4a      	adds	r2, r1, #1
   16dc6:	f8c4 2100 	str.w	r2, [r4, #256]	; 0x100
   16dca:	5463      	strb	r3, [r4, r1]
   16dcc:	f884 3104 	strb.w	r3, [r4, #260]	; 0x104
   16dd0:	b015      	add	sp, #84	; 0x54
   16dd2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   16dd6:	f8d4 3120 	ldr.w	r3, [r4, #288]	; 0x120
   16dda:	2b00      	cmp	r3, #0
   16ddc:	f2c1 84a4 	blt.w	18728 <d_print_comp_inner+0x1af4>
   16de0:	2b00      	cmp	r3, #0
   16de2:	f002 8432 	beq.w	1964a <d_print_comp_inner+0x2a16>
   16de6:	6880      	ldr	r0, [r0, #8]
   16de8:	3b01      	subs	r3, #1
   16dea:	b110      	cbz	r0, 16df2 <d_print_comp_inner+0x1be>
   16dec:	7802      	ldrb	r2, [r0, #0]
   16dee:	2a2f      	cmp	r2, #47	; 0x2f
   16df0:	d0f6      	beq.n	16de0 <d_print_comp_inner+0x1ac>
   16df2:	b10f      	cbz	r7, 16df8 <d_print_comp_inner+0x1c4>
   16df4:	f8c4 6110 	str.w	r6, [r4, #272]	; 0x110
   16df8:	2301      	movs	r3, #1
   16dfa:	f8c4 3118 	str.w	r3, [r4, #280]	; 0x118
   16dfe:	b015      	add	sp, #84	; 0x54
   16e00:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   16e04:	f8d4 c114 	ldr.w	ip, [r4, #276]	; 0x114
   16e08:	f8d4 2110 	ldr.w	r2, [r4, #272]	; 0x110
   16e0c:	9505      	str	r5, [sp, #20]
   16e0e:	ab14      	add	r3, sp, #80	; 0x50
   16e10:	2100      	movs	r1, #0
   16e12:	f843 cd40 	str.w	ip, [r3, #-64]!
   16e16:	9106      	str	r1, [sp, #24]
   16e18:	f8c4 3114 	str.w	r3, [r4, #276]	; 0x114
   16e1c:	9207      	str	r2, [sp, #28]
   16e1e:	686a      	ldr	r2, [r5, #4]
   16e20:	4641      	mov	r1, r8
   16e22:	4620      	mov	r0, r4
   16e24:	f002 fcaa 	bl	1977c <d_print_comp>
   16e28:	9b06      	ldr	r3, [sp, #24]
   16e2a:	2b00      	cmp	r3, #0
   16e2c:	f001 8389 	beq.w	18542 <d_print_comp_inner+0x190e>
   16e30:	9b04      	ldr	r3, [sp, #16]
   16e32:	f8c4 3114 	str.w	r3, [r4, #276]	; 0x114
   16e36:	2f00      	cmp	r7, #0
   16e38:	d0ca      	beq.n	16dd0 <d_print_comp_inner+0x19c>
   16e3a:	f8c4 6110 	str.w	r6, [r4, #272]	; 0x110
   16e3e:	e7c7      	b.n	16dd0 <d_print_comp_inner+0x19c>
   16e40:	f8d0 c114 	ldr.w	ip, [r0, #276]	; 0x114
   16e44:	f1bc 0f00 	cmp.w	ip, #0
   16e48:	d0de      	beq.n	16e08 <d_print_comp_inner+0x1d4>
   16e4a:	4662      	mov	r2, ip
   16e4c:	e005      	b.n	16e5a <d_print_comp_inner+0x226>
   16e4e:	428b      	cmp	r3, r1
   16e50:	f001 86b8 	beq.w	18bc4 <d_print_comp_inner+0x1f90>
   16e54:	6812      	ldr	r2, [r2, #0]
   16e56:	2a00      	cmp	r2, #0
   16e58:	d0d6      	beq.n	16e08 <d_print_comp_inner+0x1d4>
   16e5a:	6890      	ldr	r0, [r2, #8]
   16e5c:	2800      	cmp	r0, #0
   16e5e:	d1f9      	bne.n	16e54 <d_print_comp_inner+0x220>
   16e60:	6851      	ldr	r1, [r2, #4]
   16e62:	7809      	ldrb	r1, [r1, #0]
   16e64:	f1a1 0e19 	sub.w	lr, r1, #25
   16e68:	f1be 0f02 	cmp.w	lr, #2
   16e6c:	d9ef      	bls.n	16e4e <d_print_comp_inner+0x21a>
   16e6e:	4607      	mov	r7, r0
   16e70:	e7ca      	b.n	16e08 <d_print_comp_inner+0x1d4>
   16e72:	68af      	ldr	r7, [r5, #8]
   16e74:	686d      	ldr	r5, [r5, #4]
   16e76:	2f00      	cmp	r7, #0
   16e78:	d0aa      	beq.n	16dd0 <d_print_comp_inner+0x19c>
   16e7a:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
   16e7e:	442f      	add	r7, r5
   16e80:	f04f 0800 	mov.w	r8, #0
   16e84:	e008      	b.n	16e98 <d_print_comp_inner+0x264>
   16e86:	460b      	mov	r3, r1
   16e88:	3101      	adds	r1, #1
   16e8a:	42bd      	cmp	r5, r7
   16e8c:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
   16e90:	54e6      	strb	r6, [r4, r3]
   16e92:	f884 6104 	strb.w	r6, [r4, #260]	; 0x104
   16e96:	d09b      	beq.n	16dd0 <d_print_comp_inner+0x19c>
   16e98:	29ff      	cmp	r1, #255	; 0xff
   16e9a:	f815 6b01 	ldrb.w	r6, [r5], #1
   16e9e:	d1f2      	bne.n	16e86 <d_print_comp_inner+0x252>
   16ea0:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   16ea4:	f884 80ff 	strb.w	r8, [r4, #255]	; 0xff
   16ea8:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
   16eac:	4620      	mov	r0, r4
   16eae:	4798      	blx	r3
   16eb0:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   16eb4:	3301      	adds	r3, #1
   16eb6:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
   16eba:	2101      	movs	r1, #1
   16ebc:	2300      	movs	r3, #0
   16ebe:	e7e4      	b.n	16e8a <d_print_comp_inner+0x256>
   16ec0:	4e64      	ldr	r6, [pc, #400]	; (17054 <d_print_comp_inner+0x420>)
   16ec2:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
   16ec6:	f106 0a11 	add.w	sl, r6, #17
   16eca:	f04f 0900 	mov.w	r9, #0
   16ece:	e009      	b.n	16ee4 <d_print_comp_inner+0x2b0>
   16ed0:	460b      	mov	r3, r1
   16ed2:	3101      	adds	r1, #1
   16ed4:	4556      	cmp	r6, sl
   16ed6:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
   16eda:	54e7      	strb	r7, [r4, r3]
   16edc:	f884 7104 	strb.w	r7, [r4, #260]	; 0x104
   16ee0:	f001 8296 	beq.w	18410 <d_print_comp_inner+0x17dc>
   16ee4:	29ff      	cmp	r1, #255	; 0xff
   16ee6:	f816 7f01 	ldrb.w	r7, [r6, #1]!
   16eea:	d1f1      	bne.n	16ed0 <d_print_comp_inner+0x29c>
   16eec:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   16ef0:	f884 90ff 	strb.w	r9, [r4, #255]	; 0xff
   16ef4:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
   16ef8:	4620      	mov	r0, r4
   16efa:	4798      	blx	r3
   16efc:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   16f00:	3301      	adds	r3, #1
   16f02:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
   16f06:	2101      	movs	r1, #1
   16f08:	2300      	movs	r3, #0
   16f0a:	e7e3      	b.n	16ed4 <d_print_comp_inner+0x2a0>
   16f0c:	4e52      	ldr	r6, [pc, #328]	; (17058 <d_print_comp_inner+0x424>)
   16f0e:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
   16f12:	f106 0a19 	add.w	sl, r6, #25
   16f16:	f04f 0900 	mov.w	r9, #0
   16f1a:	e009      	b.n	16f30 <d_print_comp_inner+0x2fc>
   16f1c:	460b      	mov	r3, r1
   16f1e:	3101      	adds	r1, #1
   16f20:	4556      	cmp	r6, sl
   16f22:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
   16f26:	54e7      	strb	r7, [r4, r3]
   16f28:	f884 7104 	strb.w	r7, [r4, #260]	; 0x104
   16f2c:	f001 82a8 	beq.w	18480 <d_print_comp_inner+0x184c>
   16f30:	29ff      	cmp	r1, #255	; 0xff
   16f32:	f816 7f01 	ldrb.w	r7, [r6, #1]!
   16f36:	d1f1      	bne.n	16f1c <d_print_comp_inner+0x2e8>
   16f38:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   16f3c:	f884 90ff 	strb.w	r9, [r4, #255]	; 0xff
   16f40:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
   16f44:	4620      	mov	r0, r4
   16f46:	4798      	blx	r3
   16f48:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   16f4c:	3301      	adds	r3, #1
   16f4e:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
   16f52:	2101      	movs	r1, #1
   16f54:	2300      	movs	r3, #0
   16f56:	e7e3      	b.n	16f20 <d_print_comp_inner+0x2ec>
   16f58:	4e40      	ldr	r6, [pc, #256]	; (1705c <d_print_comp_inner+0x428>)
   16f5a:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
   16f5e:	f106 0a15 	add.w	sl, r6, #21
   16f62:	f04f 0900 	mov.w	r9, #0
   16f66:	e009      	b.n	16f7c <d_print_comp_inner+0x348>
   16f68:	460b      	mov	r3, r1
   16f6a:	3101      	adds	r1, #1
   16f6c:	4556      	cmp	r6, sl
   16f6e:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
   16f72:	54e7      	strb	r7, [r4, r3]
   16f74:	f884 7104 	strb.w	r7, [r4, #260]	; 0x104
   16f78:	f001 8251 	beq.w	1841e <d_print_comp_inner+0x17ea>
   16f7c:	29ff      	cmp	r1, #255	; 0xff
   16f7e:	f816 7f01 	ldrb.w	r7, [r6, #1]!
   16f82:	d1f1      	bne.n	16f68 <d_print_comp_inner+0x334>
   16f84:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   16f88:	f884 90ff 	strb.w	r9, [r4, #255]	; 0xff
   16f8c:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
   16f90:	4620      	mov	r0, r4
   16f92:	4798      	blx	r3
   16f94:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   16f98:	3301      	adds	r3, #1
   16f9a:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
   16f9e:	2101      	movs	r1, #1
   16fa0:	2300      	movs	r3, #0
   16fa2:	e7e3      	b.n	16f6c <d_print_comp_inner+0x338>
   16fa4:	4e2e      	ldr	r6, [pc, #184]	; (17060 <d_print_comp_inner+0x42c>)
   16fa6:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
   16faa:	f106 0a16 	add.w	sl, r6, #22
   16fae:	f04f 0900 	mov.w	r9, #0
   16fb2:	e009      	b.n	16fc8 <d_print_comp_inner+0x394>
   16fb4:	460b      	mov	r3, r1
   16fb6:	3101      	adds	r1, #1
   16fb8:	4556      	cmp	r6, sl
   16fba:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
   16fbe:	54e7      	strb	r7, [r4, r3]
   16fc0:	f884 7104 	strb.w	r7, [r4, #260]	; 0x104
   16fc4:	f001 8263 	beq.w	1848e <d_print_comp_inner+0x185a>
   16fc8:	29ff      	cmp	r1, #255	; 0xff
   16fca:	f816 7f01 	ldrb.w	r7, [r6, #1]!
   16fce:	d1f1      	bne.n	16fb4 <d_print_comp_inner+0x380>
   16fd0:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   16fd4:	f884 90ff 	strb.w	r9, [r4, #255]	; 0xff
   16fd8:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
   16fdc:	4620      	mov	r0, r4
   16fde:	4798      	blx	r3
   16fe0:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   16fe4:	3301      	adds	r3, #1
   16fe6:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
   16fea:	2101      	movs	r1, #1
   16fec:	2300      	movs	r3, #0
   16fee:	e7e3      	b.n	16fb8 <d_print_comp_inner+0x384>
   16ff0:	4e1c      	ldr	r6, [pc, #112]	; (17064 <d_print_comp_inner+0x430>)
   16ff2:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
   16ff6:	f106 0a13 	add.w	sl, r6, #19
   16ffa:	f04f 0900 	mov.w	r9, #0
   16ffe:	e009      	b.n	17014 <d_print_comp_inner+0x3e0>
   17000:	460b      	mov	r3, r1
   17002:	3101      	adds	r1, #1
   17004:	45b2      	cmp	sl, r6
   17006:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
   1700a:	54e7      	strb	r7, [r4, r3]
   1700c:	f884 7104 	strb.w	r7, [r4, #260]	; 0x104
   17010:	f001 8077 	beq.w	18102 <d_print_comp_inner+0x14ce>
   17014:	29ff      	cmp	r1, #255	; 0xff
   17016:	f816 7f01 	ldrb.w	r7, [r6, #1]!
   1701a:	d1f1      	bne.n	17000 <d_print_comp_inner+0x3cc>
   1701c:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   17020:	f884 90ff 	strb.w	r9, [r4, #255]	; 0xff
   17024:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
   17028:	4620      	mov	r0, r4
   1702a:	4798      	blx	r3
   1702c:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   17030:	3301      	adds	r3, #1
   17032:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
   17036:	2101      	movs	r1, #1
   17038:	2300      	movs	r3, #0
   1703a:	e7e3      	b.n	17004 <d_print_comp_inner+0x3d0>
   1703c:	4e0a      	ldr	r6, [pc, #40]	; (17068 <d_print_comp_inner+0x434>)
   1703e:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
   17042:	f106 0a1a 	add.w	sl, r6, #26
   17046:	f04f 0900 	mov.w	r9, #0
   1704a:	e019      	b.n	17080 <d_print_comp_inner+0x44c>
   1704c:	0002431c 	.word	0x0002431c
   17050:	00024518 	.word	0x00024518
   17054:	000244a7 	.word	0x000244a7
   17058:	00024473 	.word	0x00024473
   1705c:	0002448f 	.word	0x0002448f
   17060:	0002445b 	.word	0x0002445b
   17064:	00024447 	.word	0x00024447
   17068:	0002441b 	.word	0x0002441b
   1706c:	460b      	mov	r3, r1
   1706e:	3101      	adds	r1, #1
   17070:	4556      	cmp	r6, sl
   17072:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
   17076:	54e7      	strb	r7, [r4, r3]
   17078:	f884 7104 	strb.w	r7, [r4, #260]	; 0x104
   1707c:	f001 804f 	beq.w	1811e <d_print_comp_inner+0x14ea>
   17080:	29ff      	cmp	r1, #255	; 0xff
   17082:	f816 7f01 	ldrb.w	r7, [r6, #1]!
   17086:	d1f1      	bne.n	1706c <d_print_comp_inner+0x438>
   17088:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   1708c:	f884 90ff 	strb.w	r9, [r4, #255]	; 0xff
   17090:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
   17094:	4620      	mov	r0, r4
   17096:	4798      	blx	r3
   17098:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   1709c:	3301      	adds	r3, #1
   1709e:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
   170a2:	2101      	movs	r1, #1
   170a4:	2300      	movs	r3, #0
   170a6:	e7e3      	b.n	17070 <d_print_comp_inner+0x43c>
   170a8:	4eb5      	ldr	r6, [pc, #724]	; (17380 <d_print_comp_inner+0x74c>)
   170aa:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
   170ae:	f106 0a0f 	add.w	sl, r6, #15
   170b2:	f04f 0900 	mov.w	r9, #0
   170b6:	e009      	b.n	170cc <d_print_comp_inner+0x498>
   170b8:	460b      	mov	r3, r1
   170ba:	3101      	adds	r1, #1
   170bc:	4556      	cmp	r6, sl
   170be:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
   170c2:	54e7      	strb	r7, [r4, r3]
   170c4:	f884 7104 	strb.w	r7, [r4, #260]	; 0x104
   170c8:	f001 8022 	beq.w	18110 <d_print_comp_inner+0x14dc>
   170cc:	29ff      	cmp	r1, #255	; 0xff
   170ce:	f816 7f01 	ldrb.w	r7, [r6, #1]!
   170d2:	d1f1      	bne.n	170b8 <d_print_comp_inner+0x484>
   170d4:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   170d8:	f884 90ff 	strb.w	r9, [r4, #255]	; 0xff
   170dc:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
   170e0:	4620      	mov	r0, r4
   170e2:	4798      	blx	r3
   170e4:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   170e8:	3301      	adds	r3, #1
   170ea:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
   170ee:	2101      	movs	r1, #1
   170f0:	2300      	movs	r3, #0
   170f2:	e7e3      	b.n	170bc <d_print_comp_inner+0x488>
   170f4:	4ea3      	ldr	r6, [pc, #652]	; (17384 <d_print_comp_inner+0x750>)
   170f6:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
   170fa:	f106 0a11 	add.w	sl, r6, #17
   170fe:	f04f 0900 	mov.w	r9, #0
   17102:	e009      	b.n	17118 <d_print_comp_inner+0x4e4>
   17104:	460b      	mov	r3, r1
   17106:	3101      	adds	r1, #1
   17108:	4556      	cmp	r6, sl
   1710a:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
   1710e:	54e7      	strb	r7, [r4, r3]
   17110:	f884 7104 	strb.w	r7, [r4, #260]	; 0x104
   17114:	f001 800a 	beq.w	1812c <d_print_comp_inner+0x14f8>
   17118:	29ff      	cmp	r1, #255	; 0xff
   1711a:	f816 7f01 	ldrb.w	r7, [r6, #1]!
   1711e:	d1f1      	bne.n	17104 <d_print_comp_inner+0x4d0>
   17120:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   17124:	f884 90ff 	strb.w	r9, [r4, #255]	; 0xff
   17128:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
   1712c:	4620      	mov	r0, r4
   1712e:	4798      	blx	r3
   17130:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   17134:	3301      	adds	r3, #1
   17136:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
   1713a:	2101      	movs	r1, #1
   1713c:	2300      	movs	r3, #0
   1713e:	e7e3      	b.n	17108 <d_print_comp_inner+0x4d4>
   17140:	4e91      	ldr	r6, [pc, #580]	; (17388 <d_print_comp_inner+0x754>)
   17142:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
   17146:	f106 0a15 	add.w	sl, r6, #21
   1714a:	f04f 0900 	mov.w	r9, #0
   1714e:	e009      	b.n	17164 <d_print_comp_inner+0x530>
   17150:	460b      	mov	r3, r1
   17152:	3101      	adds	r1, #1
   17154:	4556      	cmp	r6, sl
   17156:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
   1715a:	54e7      	strb	r7, [r4, r3]
   1715c:	f884 7104 	strb.w	r7, [r4, #260]	; 0x104
   17160:	f000 87b3 	beq.w	180ca <d_print_comp_inner+0x1496>
   17164:	29ff      	cmp	r1, #255	; 0xff
   17166:	f816 7f01 	ldrb.w	r7, [r6, #1]!
   1716a:	d1f1      	bne.n	17150 <d_print_comp_inner+0x51c>
   1716c:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   17170:	f884 90ff 	strb.w	r9, [r4, #255]	; 0xff
   17174:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
   17178:	4620      	mov	r0, r4
   1717a:	4798      	blx	r3
   1717c:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   17180:	3301      	adds	r3, #1
   17182:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
   17186:	2101      	movs	r1, #1
   17188:	2300      	movs	r3, #0
   1718a:	e7e3      	b.n	17154 <d_print_comp_inner+0x520>
   1718c:	4e7f      	ldr	r6, [pc, #508]	; (1738c <d_print_comp_inner+0x758>)
   1718e:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
   17192:	f106 0a12 	add.w	sl, r6, #18
   17196:	f04f 0900 	mov.w	r9, #0
   1719a:	e009      	b.n	171b0 <d_print_comp_inner+0x57c>
   1719c:	460b      	mov	r3, r1
   1719e:	3101      	adds	r1, #1
   171a0:	45b2      	cmp	sl, r6
   171a2:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
   171a6:	54e7      	strb	r7, [r4, r3]
   171a8:	f884 7104 	strb.w	r7, [r4, #260]	; 0x104
   171ac:	f000 879b 	beq.w	180e6 <d_print_comp_inner+0x14b2>
   171b0:	29ff      	cmp	r1, #255	; 0xff
   171b2:	f816 7f01 	ldrb.w	r7, [r6, #1]!
   171b6:	d1f1      	bne.n	1719c <d_print_comp_inner+0x568>
   171b8:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   171bc:	f884 90ff 	strb.w	r9, [r4, #255]	; 0xff
   171c0:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
   171c4:	4620      	mov	r0, r4
   171c6:	4798      	blx	r3
   171c8:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   171cc:	3301      	adds	r3, #1
   171ce:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
   171d2:	2101      	movs	r1, #1
   171d4:	2300      	movs	r3, #0
   171d6:	e7e3      	b.n	171a0 <d_print_comp_inner+0x56c>
   171d8:	4e6d      	ldr	r6, [pc, #436]	; (17390 <d_print_comp_inner+0x75c>)
   171da:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
   171de:	f106 0a10 	add.w	sl, r6, #16
   171e2:	f04f 0900 	mov.w	r9, #0
   171e6:	e009      	b.n	171fc <d_print_comp_inner+0x5c8>
   171e8:	460b      	mov	r3, r1
   171ea:	3101      	adds	r1, #1
   171ec:	4556      	cmp	r6, sl
   171ee:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
   171f2:	54e7      	strb	r7, [r4, r3]
   171f4:	f884 7104 	strb.w	r7, [r4, #260]	; 0x104
   171f8:	f000 876e 	beq.w	180d8 <d_print_comp_inner+0x14a4>
   171fc:	29ff      	cmp	r1, #255	; 0xff
   171fe:	f816 7f01 	ldrb.w	r7, [r6, #1]!
   17202:	d1f1      	bne.n	171e8 <d_print_comp_inner+0x5b4>
   17204:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   17208:	f884 90ff 	strb.w	r9, [r4, #255]	; 0xff
   1720c:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
   17210:	4620      	mov	r0, r4
   17212:	4798      	blx	r3
   17214:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   17218:	3301      	adds	r3, #1
   1721a:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
   1721e:	2101      	movs	r1, #1
   17220:	2300      	movs	r3, #0
   17222:	e7e3      	b.n	171ec <d_print_comp_inner+0x5b8>
   17224:	4e5b      	ldr	r6, [pc, #364]	; (17394 <d_print_comp_inner+0x760>)
   17226:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
   1722a:	f106 0a0d 	add.w	sl, r6, #13
   1722e:	f04f 0900 	mov.w	r9, #0
   17232:	e009      	b.n	17248 <d_print_comp_inner+0x614>
   17234:	460b      	mov	r3, r1
   17236:	3101      	adds	r1, #1
   17238:	4556      	cmp	r6, sl
   1723a:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
   1723e:	54e7      	strb	r7, [r4, r3]
   17240:	f884 7104 	strb.w	r7, [r4, #260]	; 0x104
   17244:	f000 8756 	beq.w	180f4 <d_print_comp_inner+0x14c0>
   17248:	29ff      	cmp	r1, #255	; 0xff
   1724a:	f816 7b01 	ldrb.w	r7, [r6], #1
   1724e:	d1f1      	bne.n	17234 <d_print_comp_inner+0x600>
   17250:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   17254:	f884 90ff 	strb.w	r9, [r4, #255]	; 0xff
   17258:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
   1725c:	4620      	mov	r0, r4
   1725e:	4798      	blx	r3
   17260:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   17264:	3301      	adds	r3, #1
   17266:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
   1726a:	2101      	movs	r1, #1
   1726c:	2300      	movs	r3, #0
   1726e:	e7e3      	b.n	17238 <d_print_comp_inner+0x604>
   17270:	4e49      	ldr	r6, [pc, #292]	; (17398 <d_print_comp_inner+0x764>)
   17272:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
   17276:	f106 0a18 	add.w	sl, r6, #24
   1727a:	f04f 0900 	mov.w	r9, #0
   1727e:	e009      	b.n	17294 <d_print_comp_inner+0x660>
   17280:	460b      	mov	r3, r1
   17282:	3101      	adds	r1, #1
   17284:	45b2      	cmp	sl, r6
   17286:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
   1728a:	54e7      	strb	r7, [r4, r3]
   1728c:	f884 7104 	strb.w	r7, [r4, #260]	; 0x104
   17290:	f000 86e3 	beq.w	1805a <d_print_comp_inner+0x1426>
   17294:	29ff      	cmp	r1, #255	; 0xff
   17296:	f816 7f01 	ldrb.w	r7, [r6, #1]!
   1729a:	d1f1      	bne.n	17280 <d_print_comp_inner+0x64c>
   1729c:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   172a0:	f884 90ff 	strb.w	r9, [r4, #255]	; 0xff
   172a4:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
   172a8:	4620      	mov	r0, r4
   172aa:	4798      	blx	r3
   172ac:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   172b0:	3301      	adds	r3, #1
   172b2:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
   172b6:	2101      	movs	r1, #1
   172b8:	2300      	movs	r3, #0
   172ba:	e7e3      	b.n	17284 <d_print_comp_inner+0x650>
   172bc:	4e37      	ldr	r6, [pc, #220]	; (1739c <d_print_comp_inner+0x768>)
   172be:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
   172c2:	f106 0a0b 	add.w	sl, r6, #11
   172c6:	f04f 0900 	mov.w	r9, #0
   172ca:	e009      	b.n	172e0 <d_print_comp_inner+0x6ac>
   172cc:	460b      	mov	r3, r1
   172ce:	3101      	adds	r1, #1
   172d0:	45b2      	cmp	sl, r6
   172d2:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
   172d6:	54e7      	strb	r7, [r4, r3]
   172d8:	f884 7104 	strb.w	r7, [r4, #260]	; 0x104
   172dc:	f000 87ca 	beq.w	18274 <d_print_comp_inner+0x1640>
   172e0:	29ff      	cmp	r1, #255	; 0xff
   172e2:	f816 7b01 	ldrb.w	r7, [r6], #1
   172e6:	d1f1      	bne.n	172cc <d_print_comp_inner+0x698>
   172e8:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   172ec:	f884 90ff 	strb.w	r9, [r4, #255]	; 0xff
   172f0:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
   172f4:	4620      	mov	r0, r4
   172f6:	4798      	blx	r3
   172f8:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   172fc:	3301      	adds	r3, #1
   172fe:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
   17302:	2101      	movs	r1, #1
   17304:	2300      	movs	r3, #0
   17306:	e7e3      	b.n	172d0 <d_print_comp_inner+0x69c>
   17308:	4e25      	ldr	r6, [pc, #148]	; (173a0 <d_print_comp_inner+0x76c>)
   1730a:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
   1730e:	f106 0a08 	add.w	sl, r6, #8
   17312:	f04f 0900 	mov.w	r9, #0
   17316:	e009      	b.n	1732c <d_print_comp_inner+0x6f8>
   17318:	460b      	mov	r3, r1
   1731a:	3101      	adds	r1, #1
   1731c:	45b2      	cmp	sl, r6
   1731e:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
   17322:	54e7      	strb	r7, [r4, r3]
   17324:	f884 7104 	strb.w	r7, [r4, #260]	; 0x104
   17328:	f000 86c8 	beq.w	180bc <d_print_comp_inner+0x1488>
   1732c:	29ff      	cmp	r1, #255	; 0xff
   1732e:	f816 7f01 	ldrb.w	r7, [r6, #1]!
   17332:	d1f1      	bne.n	17318 <d_print_comp_inner+0x6e4>
   17334:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   17338:	f884 90ff 	strb.w	r9, [r4, #255]	; 0xff
   1733c:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
   17340:	4620      	mov	r0, r4
   17342:	4798      	blx	r3
   17344:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   17348:	3301      	adds	r3, #1
   1734a:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
   1734e:	2101      	movs	r1, #1
   17350:	2300      	movs	r3, #0
   17352:	e7e3      	b.n	1731c <d_print_comp_inner+0x6e8>
   17354:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
   17358:	29ff      	cmp	r1, #255	; 0xff
   1735a:	f001 847c 	beq.w	18c56 <d_print_comp_inner+0x2022>
   1735e:	1c4a      	adds	r2, r1, #1
   17360:	237e      	movs	r3, #126	; 0x7e
   17362:	f8c4 2100 	str.w	r2, [r4, #256]	; 0x100
   17366:	5463      	strb	r3, [r4, r1]
   17368:	f884 3104 	strb.w	r3, [r4, #260]	; 0x104
   1736c:	4641      	mov	r1, r8
   1736e:	68aa      	ldr	r2, [r5, #8]
   17370:	4620      	mov	r0, r4
   17372:	f002 fa03 	bl	1977c <d_print_comp>
   17376:	e52b      	b.n	16dd0 <d_print_comp_inner+0x19c>
   17378:	68aa      	ldr	r2, [r5, #8]
   1737a:	f002 f9ff 	bl	1977c <d_print_comp>
   1737e:	e527      	b.n	16dd0 <d_print_comp_inner+0x19c>
   17380:	00024437 	.word	0x00024437
   17384:	00024407 	.word	0x00024407
   17388:	00024403 	.word	0x00024403
   1738c:	000243db 	.word	0x000243db
   17390:	000243ef 	.word	0x000243ef
   17394:	000243cc 	.word	0x000243cc
   17398:	000243a7 	.word	0x000243a7
   1739c:	00024390 	.word	0x00024390
   173a0:	0002439b 	.word	0x0002439b
   173a4:	2200      	movs	r2, #0
   173a6:	f8d0 3114 	ldr.w	r3, [r0, #276]	; 0x114
   173aa:	f8c0 2114 	str.w	r2, [r0, #276]	; 0x114
   173ae:	686e      	ldr	r6, [r5, #4]
   173b0:	9300      	str	r3, [sp, #0]
   173b2:	2e00      	cmp	r6, #0
   173b4:	f000 864c 	beq.w	18050 <d_print_comp_inner+0x141c>
   173b8:	f10d 0910 	add.w	r9, sp, #16
   173bc:	f8d0 c110 	ldr.w	ip, [r0, #272]	; 0x110
   173c0:	4617      	mov	r7, r2
   173c2:	4696      	mov	lr, r2
   173c4:	464b      	mov	r3, r9
   173c6:	7831      	ldrb	r1, [r6, #0]
   173c8:	601a      	str	r2, [r3, #0]
   173ca:	f1a1 021c 	sub.w	r2, r1, #28
   173ce:	2a04      	cmp	r2, #4
   173d0:	605e      	str	r6, [r3, #4]
   173d2:	f8c3 e008 	str.w	lr, [r3, #8]
   173d6:	f8c3 c00c 	str.w	ip, [r3, #12]
   173da:	f107 0701 	add.w	r7, r7, #1
   173de:	4618      	mov	r0, r3
   173e0:	461a      	mov	r2, r3
   173e2:	f240 862a 	bls.w	1803a <d_print_comp_inner+0x1406>
   173e6:	294c      	cmp	r1, #76	; 0x4c
   173e8:	f000 8627 	beq.w	1803a <d_print_comp_inner+0x1406>
   173ec:	2904      	cmp	r1, #4
   173ee:	f8c4 3114 	str.w	r3, [r4, #276]	; 0x114
   173f2:	f001 87bb 	beq.w	1936c <d_print_comp_inner+0x2738>
   173f6:	2902      	cmp	r1, #2
   173f8:	d11a      	bne.n	17430 <d_print_comp_inner+0x7fc>
   173fa:	f8d6 b008 	ldr.w	fp, [r6, #8]
   173fe:	f89b 3000 	ldrb.w	r3, [fp]
   17402:	2b46      	cmp	r3, #70	; 0x46
   17404:	f002 8035 	beq.w	19472 <d_print_comp_inner+0x283e>
   17408:	462b      	mov	r3, r5
   1740a:	eb09 1e07 	add.w	lr, r9, r7, lsl #4
   1740e:	9601      	str	r6, [sp, #4]
   17410:	465d      	mov	r5, fp
   17412:	4676      	mov	r6, lr
   17414:	46a2      	mov	sl, r4
   17416:	469b      	mov	fp, r3
   17418:	782b      	ldrb	r3, [r5, #0]
   1741a:	f1a3 021c 	sub.w	r2, r3, #28
   1741e:	2a04      	cmp	r2, #4
   17420:	f241 805d 	bls.w	184de <d_print_comp_inner+0x18aa>
   17424:	2b4c      	cmp	r3, #76	; 0x4c
   17426:	f001 805a 	beq.w	184de <d_print_comp_inner+0x18aa>
   1742a:	9e01      	ldr	r6, [sp, #4]
   1742c:	4654      	mov	r4, sl
   1742e:	465d      	mov	r5, fp
   17430:	68aa      	ldr	r2, [r5, #8]
   17432:	4641      	mov	r1, r8
   17434:	4620      	mov	r0, r4
   17436:	f002 f9a1 	bl	1977c <d_print_comp>
   1743a:	7833      	ldrb	r3, [r6, #0]
   1743c:	2b04      	cmp	r3, #4
   1743e:	f002 8020 	beq.w	19482 <d_print_comp_inner+0x284e>
   17442:	eb09 1907 	add.w	r9, r9, r7, lsl #4
   17446:	2620      	movs	r6, #32
   17448:	f859 5c08 	ldr.w	r5, [r9, #-8]
   1744c:	3f01      	subs	r7, #1
   1744e:	b985      	cbnz	r5, 17472 <d_print_comp_inner+0x83e>
   17450:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
   17454:	29ff      	cmp	r1, #255	; 0xff
   17456:	f002 8043 	beq.w	194e0 <d_print_comp_inner+0x28ac>
   1745a:	1c4b      	adds	r3, r1, #1
   1745c:	f8c4 3100 	str.w	r3, [r4, #256]	; 0x100
   17460:	f859 2c0c 	ldr.w	r2, [r9, #-12]
   17464:	5466      	strb	r6, [r4, r1]
   17466:	4620      	mov	r0, r4
   17468:	4641      	mov	r1, r8
   1746a:	f884 6104 	strb.w	r6, [r4, #260]	; 0x104
   1746e:	f002 f995 	bl	1979c <d_print_mod>
   17472:	f1a9 0910 	sub.w	r9, r9, #16
   17476:	2f00      	cmp	r7, #0
   17478:	d1e6      	bne.n	17448 <d_print_comp_inner+0x814>
   1747a:	9b00      	ldr	r3, [sp, #0]
   1747c:	f8c4 3114 	str.w	r3, [r4, #276]	; 0x114
   17480:	e4a6      	b.n	16dd0 <d_print_comp_inner+0x19c>
   17482:	4ed1      	ldr	r6, [pc, #836]	; (177c8 <d_print_comp_inner+0xb94>)
   17484:	686a      	ldr	r2, [r5, #4]
   17486:	f002 f979 	bl	1977c <d_print_comp>
   1748a:	f106 0a05 	add.w	sl, r6, #5
   1748e:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
   17492:	f04f 0900 	mov.w	r9, #0
   17496:	e009      	b.n	174ac <d_print_comp_inner+0x878>
   17498:	460b      	mov	r3, r1
   1749a:	3101      	adds	r1, #1
   1749c:	45b2      	cmp	sl, r6
   1749e:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
   174a2:	54e7      	strb	r7, [r4, r3]
   174a4:	f884 7104 	strb.w	r7, [r4, #260]	; 0x104
   174a8:	f000 86d1 	beq.w	1824e <d_print_comp_inner+0x161a>
   174ac:	29ff      	cmp	r1, #255	; 0xff
   174ae:	f816 7b01 	ldrb.w	r7, [r6], #1
   174b2:	d1f1      	bne.n	17498 <d_print_comp_inner+0x864>
   174b4:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   174b8:	f884 90ff 	strb.w	r9, [r4, #255]	; 0xff
   174bc:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
   174c0:	4620      	mov	r0, r4
   174c2:	4798      	blx	r3
   174c4:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   174c8:	3301      	adds	r3, #1
   174ca:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
   174ce:	2101      	movs	r1, #1
   174d0:	2300      	movs	r3, #0
   174d2:	e7e3      	b.n	1749c <d_print_comp_inner+0x868>
   174d4:	686a      	ldr	r2, [r5, #4]
   174d6:	f002 f951 	bl	1977c <d_print_comp>
   174da:	f018 0904 	ands.w	r9, r8, #4
   174de:	f001 82aa 	beq.w	18a36 <d_print_comp_inner+0x1e02>
   174e2:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
   174e6:	29ff      	cmp	r1, #255	; 0xff
   174e8:	f001 859a 	beq.w	19020 <d_print_comp_inner+0x23ec>
   174ec:	1c4a      	adds	r2, r1, #1
   174ee:	232e      	movs	r3, #46	; 0x2e
   174f0:	f8c4 2100 	str.w	r2, [r4, #256]	; 0x100
   174f4:	5463      	strb	r3, [r4, r1]
   174f6:	f884 3104 	strb.w	r3, [r4, #260]	; 0x104
   174fa:	68ad      	ldr	r5, [r5, #8]
   174fc:	782b      	ldrb	r3, [r5, #0]
   174fe:	2b46      	cmp	r3, #70	; 0x46
   17500:	f001 83cc 	beq.w	18c9c <d_print_comp_inner+0x2068>
   17504:	462a      	mov	r2, r5
   17506:	4641      	mov	r1, r8
   17508:	4620      	mov	r0, r4
   1750a:	f002 f937 	bl	1977c <d_print_comp>
   1750e:	e45f      	b.n	16dd0 <d_print_comp_inner+0x19c>
   17510:	f011 0804 	ands.w	r8, r1, #4
   17514:	f041 808b 	bne.w	1862e <d_print_comp_inner+0x19fa>
   17518:	68af      	ldr	r7, [r5, #8]
   1751a:	686d      	ldr	r5, [r5, #4]
   1751c:	2f00      	cmp	r7, #0
   1751e:	f43f ac57 	beq.w	16dd0 <d_print_comp_inner+0x19c>
   17522:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
   17526:	442f      	add	r7, r5
   17528:	e009      	b.n	1753e <d_print_comp_inner+0x90a>
   1752a:	460b      	mov	r3, r1
   1752c:	3101      	adds	r1, #1
   1752e:	42bd      	cmp	r5, r7
   17530:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
   17534:	54e6      	strb	r6, [r4, r3]
   17536:	f884 6104 	strb.w	r6, [r4, #260]	; 0x104
   1753a:	f43f ac49 	beq.w	16dd0 <d_print_comp_inner+0x19c>
   1753e:	29ff      	cmp	r1, #255	; 0xff
   17540:	f815 6b01 	ldrb.w	r6, [r5], #1
   17544:	d1f1      	bne.n	1752a <d_print_comp_inner+0x8f6>
   17546:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   1754a:	f884 80ff 	strb.w	r8, [r4, #255]	; 0xff
   1754e:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
   17552:	4620      	mov	r0, r4
   17554:	4798      	blx	r3
   17556:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   1755a:	3301      	adds	r3, #1
   1755c:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
   17560:	2101      	movs	r1, #1
   17562:	2300      	movs	r3, #0
   17564:	e7e3      	b.n	1752e <d_print_comp_inner+0x8fa>
   17566:	2301      	movs	r3, #1
   17568:	f8c0 3118 	str.w	r3, [r0, #280]	; 0x118
   1756c:	e430      	b.n	16dd0 <d_print_comp_inner+0x19c>
   1756e:	f8d0 311c 	ldr.w	r3, [r0, #284]	; 0x11c
   17572:	2b00      	cmp	r3, #0
   17574:	f041 8106 	bne.w	18784 <d_print_comp_inner+0x1b50>
   17578:	1d29      	adds	r1, r5, #4
   1757a:	f7fd fa97 	bl	14aac <d_lookup_template_argument.isra.6>
   1757e:	2800      	cmp	r0, #0
   17580:	f43f ac3a 	beq.w	16df8 <d_print_comp_inner+0x1c4>
   17584:	7803      	ldrb	r3, [r0, #0]
   17586:	2b2f      	cmp	r3, #47	; 0x2f
   17588:	f001 83fc 	beq.w	18d84 <d_print_comp_inner+0x2150>
   1758c:	f8d4 5110 	ldr.w	r5, [r4, #272]	; 0x110
   17590:	682b      	ldr	r3, [r5, #0]
   17592:	f8c4 3110 	str.w	r3, [r4, #272]	; 0x110
   17596:	4602      	mov	r2, r0
   17598:	4641      	mov	r1, r8
   1759a:	4620      	mov	r0, r4
   1759c:	f002 f8ee 	bl	1977c <d_print_comp>
   175a0:	f8c4 5110 	str.w	r5, [r4, #272]	; 0x110
   175a4:	e414      	b.n	16dd0 <d_print_comp_inner+0x19c>
   175a6:	2300      	movs	r3, #0
   175a8:	f8d0 9114 	ldr.w	r9, [r0, #276]	; 0x114
   175ac:	f8d0 7144 	ldr.w	r7, [r0, #324]	; 0x144
   175b0:	f8c0 3114 	str.w	r3, [r0, #276]	; 0x114
   175b4:	f8c0 5144 	str.w	r5, [r0, #324]	; 0x144
   175b8:	f011 0f04 	tst.w	r1, #4
   175bc:	686e      	ldr	r6, [r5, #4]
   175be:	d005      	beq.n	175cc <d_print_comp_inner+0x998>
   175c0:	7833      	ldrb	r3, [r6, #0]
   175c2:	b91b      	cbnz	r3, 175cc <d_print_comp_inner+0x998>
   175c4:	68b2      	ldr	r2, [r6, #8]
   175c6:	2a06      	cmp	r2, #6
   175c8:	f001 853c 	beq.w	19044 <d_print_comp_inner+0x2410>
   175cc:	4632      	mov	r2, r6
   175ce:	4641      	mov	r1, r8
   175d0:	4620      	mov	r0, r4
   175d2:	f002 f8d3 	bl	1977c <d_print_comp>
   175d6:	f894 3104 	ldrb.w	r3, [r4, #260]	; 0x104
   175da:	2b3c      	cmp	r3, #60	; 0x3c
   175dc:	f001 8274 	beq.w	18ac8 <d_print_comp_inner+0x1e94>
   175e0:	f8d4 3100 	ldr.w	r3, [r4, #256]	; 0x100
   175e4:	2bff      	cmp	r3, #255	; 0xff
   175e6:	f001 8489 	beq.w	18efc <d_print_comp_inner+0x22c8>
   175ea:	1c59      	adds	r1, r3, #1
   175ec:	223c      	movs	r2, #60	; 0x3c
   175ee:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
   175f2:	54e2      	strb	r2, [r4, r3]
   175f4:	f884 2104 	strb.w	r2, [r4, #260]	; 0x104
   175f8:	4641      	mov	r1, r8
   175fa:	68aa      	ldr	r2, [r5, #8]
   175fc:	4620      	mov	r0, r4
   175fe:	f002 f8bd 	bl	1977c <d_print_comp>
   17602:	f894 3104 	ldrb.w	r3, [r4, #260]	; 0x104
   17606:	2b3e      	cmp	r3, #62	; 0x3e
   17608:	f001 8239 	beq.w	18a7e <d_print_comp_inner+0x1e4a>
   1760c:	f8d4 3100 	ldr.w	r3, [r4, #256]	; 0x100
   17610:	2bff      	cmp	r3, #255	; 0xff
   17612:	f001 8460 	beq.w	18ed6 <d_print_comp_inner+0x22a2>
   17616:	1c59      	adds	r1, r3, #1
   17618:	223e      	movs	r2, #62	; 0x3e
   1761a:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
   1761e:	54e2      	strb	r2, [r4, r3]
   17620:	f884 2104 	strb.w	r2, [r4, #260]	; 0x104
   17624:	f8c4 9114 	str.w	r9, [r4, #276]	; 0x114
   17628:	f8c4 7144 	str.w	r7, [r4, #324]	; 0x144
   1762c:	f7ff bbd0 	b.w	16dd0 <d_print_comp_inner+0x19c>
   17630:	686f      	ldr	r7, [r5, #4]
   17632:	2f00      	cmp	r7, #0
   17634:	f001 8082 	beq.w	1873c <d_print_comp_inner+0x1b08>
   17638:	4d64      	ldr	r5, [pc, #400]	; (177cc <d_print_comp_inner+0xb98>)
   1763a:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
   1763e:	f105 0906 	add.w	r9, r5, #6
   17642:	f04f 0800 	mov.w	r8, #0
   17646:	e009      	b.n	1765c <d_print_comp_inner+0xa28>
   17648:	460b      	mov	r3, r1
   1764a:	3101      	adds	r1, #1
   1764c:	45a9      	cmp	r9, r5
   1764e:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
   17652:	54e6      	strb	r6, [r4, r3]
   17654:	f884 6104 	strb.w	r6, [r4, #260]	; 0x104
   17658:	f000 8782 	beq.w	18560 <d_print_comp_inner+0x192c>
   1765c:	29ff      	cmp	r1, #255	; 0xff
   1765e:	f815 6b01 	ldrb.w	r6, [r5], #1
   17662:	d1f1      	bne.n	17648 <d_print_comp_inner+0xa14>
   17664:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   17668:	f884 80ff 	strb.w	r8, [r4, #255]	; 0xff
   1766c:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
   17670:	4620      	mov	r0, r4
   17672:	4798      	blx	r3
   17674:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   17678:	3301      	adds	r3, #1
   1767a:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
   1767e:	2101      	movs	r1, #1
   17680:	2300      	movs	r3, #0
   17682:	e7e3      	b.n	1764c <d_print_comp_inner+0xa18>
   17684:	4e52      	ldr	r6, [pc, #328]	; (177d0 <d_print_comp_inner+0xb9c>)
   17686:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
   1768a:	f106 0a0a 	add.w	sl, r6, #10
   1768e:	f04f 0900 	mov.w	r9, #0
   17692:	e009      	b.n	176a8 <d_print_comp_inner+0xa74>
   17694:	460b      	mov	r3, r1
   17696:	3101      	adds	r1, #1
   17698:	4556      	cmp	r6, sl
   1769a:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
   1769e:	54e7      	strb	r7, [r4, r3]
   176a0:	f884 7104 	strb.w	r7, [r4, #260]	; 0x104
   176a4:	f000 8701 	beq.w	184aa <d_print_comp_inner+0x1876>
   176a8:	29ff      	cmp	r1, #255	; 0xff
   176aa:	f816 7b01 	ldrb.w	r7, [r6], #1
   176ae:	d1f1      	bne.n	17694 <d_print_comp_inner+0xa60>
   176b0:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   176b4:	f884 90ff 	strb.w	r9, [r4, #255]	; 0xff
   176b8:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
   176bc:	4620      	mov	r0, r4
   176be:	4798      	blx	r3
   176c0:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   176c4:	3301      	adds	r3, #1
   176c6:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
   176ca:	2101      	movs	r1, #1
   176cc:	2300      	movs	r3, #0
   176ce:	e7e3      	b.n	17698 <d_print_comp_inner+0xa64>
   176d0:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
   176d4:	792d      	ldrb	r5, [r5, #4]
   176d6:	29ff      	cmp	r1, #255	; 0xff
   176d8:	f001 82ab 	beq.w	18c32 <d_print_comp_inner+0x1ffe>
   176dc:	1c4b      	adds	r3, r1, #1
   176de:	f8c4 3100 	str.w	r3, [r4, #256]	; 0x100
   176e2:	5465      	strb	r5, [r4, r1]
   176e4:	f884 5104 	strb.w	r5, [r4, #260]	; 0x104
   176e8:	f7ff bb72 	b.w	16dd0 <d_print_comp_inner+0x19c>
   176ec:	686a      	ldr	r2, [r5, #4]
   176ee:	f002 f845 	bl	1977c <d_print_comp>
   176f2:	68aa      	ldr	r2, [r5, #8]
   176f4:	4641      	mov	r1, r8
   176f6:	4620      	mov	r0, r4
   176f8:	f002 f840 	bl	1977c <d_print_comp>
   176fc:	f7ff bb68 	b.w	16dd0 <d_print_comp_inner+0x19c>
   17700:	4e34      	ldr	r6, [pc, #208]	; (177d4 <d_print_comp_inner+0xba0>)
   17702:	686a      	ldr	r2, [r5, #4]
   17704:	f002 f83a 	bl	1977c <d_print_comp>
   17708:	f106 0a08 	add.w	sl, r6, #8
   1770c:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
   17710:	f04f 0900 	mov.w	r9, #0
   17714:	e009      	b.n	1772a <d_print_comp_inner+0xaf6>
   17716:	460b      	mov	r3, r1
   17718:	3101      	adds	r1, #1
   1771a:	4556      	cmp	r6, sl
   1771c:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
   17720:	54e7      	strb	r7, [r4, r3]
   17722:	f884 7104 	strb.w	r7, [r4, #260]	; 0x104
   17726:	f000 8508 	beq.w	1813a <d_print_comp_inner+0x1506>
   1772a:	29ff      	cmp	r1, #255	; 0xff
   1772c:	f816 7f01 	ldrb.w	r7, [r6, #1]!
   17730:	d1f1      	bne.n	17716 <d_print_comp_inner+0xae2>
   17732:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   17736:	f884 90ff 	strb.w	r9, [r4, #255]	; 0xff
   1773a:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
   1773e:	4620      	mov	r0, r4
   17740:	4798      	blx	r3
   17742:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   17746:	3301      	adds	r3, #1
   17748:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
   1774c:	2101      	movs	r1, #1
   1774e:	2300      	movs	r3, #0
   17750:	e7e3      	b.n	1771a <d_print_comp_inner+0xae6>
   17752:	686a      	ldr	r2, [r5, #4]
   17754:	b10a      	cbz	r2, 1775a <d_print_comp_inner+0xb26>
   17756:	f002 f811 	bl	1977c <d_print_comp>
   1775a:	68ab      	ldr	r3, [r5, #8]
   1775c:	2b00      	cmp	r3, #0
   1775e:	f43f ab37 	beq.w	16dd0 <d_print_comp_inner+0x19c>
   17762:	f8d4 6100 	ldr.w	r6, [r4, #256]	; 0x100
   17766:	2efd      	cmp	r6, #253	; 0xfd
   17768:	f201 81bc 	bhi.w	18ae4 <d_print_comp_inner+0x1eb0>
   1776c:	4f1a      	ldr	r7, [pc, #104]	; (177d8 <d_print_comp_inner+0xba4>)
   1776e:	f04f 0a00 	mov.w	sl, #0
   17772:	f107 0b02 	add.w	fp, r7, #2
   17776:	4631      	mov	r1, r6
   17778:	e009      	b.n	1778e <d_print_comp_inner+0xb5a>
   1777a:	460b      	mov	r3, r1
   1777c:	3101      	adds	r1, #1
   1777e:	455f      	cmp	r7, fp
   17780:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
   17784:	54e6      	strb	r6, [r4, r3]
   17786:	f884 6104 	strb.w	r6, [r4, #260]	; 0x104
   1778a:	f000 86c1 	beq.w	18510 <d_print_comp_inner+0x18dc>
   1778e:	29ff      	cmp	r1, #255	; 0xff
   17790:	f817 6b01 	ldrb.w	r6, [r7], #1
   17794:	d1f1      	bne.n	1777a <d_print_comp_inner+0xb46>
   17796:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   1779a:	f884 a0ff 	strb.w	sl, [r4, #255]	; 0xff
   1779e:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
   177a2:	4620      	mov	r0, r4
   177a4:	4798      	blx	r3
   177a6:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   177aa:	3301      	adds	r3, #1
   177ac:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
   177b0:	2101      	movs	r1, #1
   177b2:	2300      	movs	r3, #0
   177b4:	e7e3      	b.n	1777e <d_print_comp_inner+0xb4a>
   177b6:	4e09      	ldr	r6, [pc, #36]	; (177dc <d_print_comp_inner+0xba8>)
   177b8:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
   177bc:	f106 0a09 	add.w	sl, r6, #9
   177c0:	f04f 0900 	mov.w	r9, #0
   177c4:	e016      	b.n	177f4 <d_print_comp_inner+0xbc0>
   177c6:	bf00      	nop
   177c8:	0002435c 	.word	0x0002435c
   177cc:	00024568 	.word	0x00024568
   177d0:	00024554 	.word	0x00024554
   177d4:	000245cf 	.word	0x000245cf
   177d8:	000244f0 	.word	0x000244f0
   177dc:	000244ff 	.word	0x000244ff
   177e0:	460b      	mov	r3, r1
   177e2:	3101      	adds	r1, #1
   177e4:	4556      	cmp	r6, sl
   177e6:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
   177ea:	54e7      	strb	r7, [r4, r3]
   177ec:	f884 7104 	strb.w	r7, [r4, #260]	; 0x104
   177f0:	f000 8594 	beq.w	1831c <d_print_comp_inner+0x16e8>
   177f4:	29ff      	cmp	r1, #255	; 0xff
   177f6:	f816 7f01 	ldrb.w	r7, [r6, #1]!
   177fa:	d1f1      	bne.n	177e0 <d_print_comp_inner+0xbac>
   177fc:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   17800:	f884 90ff 	strb.w	r9, [r4, #255]	; 0xff
   17804:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
   17808:	4620      	mov	r0, r4
   1780a:	4798      	blx	r3
   1780c:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   17810:	3301      	adds	r3, #1
   17812:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
   17816:	2101      	movs	r1, #1
   17818:	2300      	movs	r3, #0
   1781a:	e7e3      	b.n	177e4 <d_print_comp_inner+0xbb0>
   1781c:	4ed1      	ldr	r6, [pc, #836]	; (17b64 <d_print_comp_inner+0xf30>)
   1781e:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
   17822:	f106 0a09 	add.w	sl, r6, #9
   17826:	f04f 0900 	mov.w	r9, #0
   1782a:	e009      	b.n	17840 <d_print_comp_inner+0xc0c>
   1782c:	460b      	mov	r3, r1
   1782e:	3101      	adds	r1, #1
   17830:	4556      	cmp	r6, sl
   17832:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
   17836:	54e7      	strb	r7, [r4, r3]
   17838:	f884 7104 	strb.w	r7, [r4, #260]	; 0x104
   1783c:	f000 8597 	beq.w	1836e <d_print_comp_inner+0x173a>
   17840:	29ff      	cmp	r1, #255	; 0xff
   17842:	f816 7f01 	ldrb.w	r7, [r6, #1]!
   17846:	d1f1      	bne.n	1782c <d_print_comp_inner+0xbf8>
   17848:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   1784c:	f884 90ff 	strb.w	r9, [r4, #255]	; 0xff
   17850:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
   17854:	4620      	mov	r0, r4
   17856:	4798      	blx	r3
   17858:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   1785c:	3301      	adds	r3, #1
   1785e:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
   17862:	2101      	movs	r1, #1
   17864:	2300      	movs	r3, #0
   17866:	e7e3      	b.n	17830 <d_print_comp_inner+0xbfc>
   17868:	f8d5 a004 	ldr.w	sl, [r5, #4]
   1786c:	4dbe      	ldr	r5, [pc, #760]	; (17b68 <d_print_comp_inner+0xf34>)
   1786e:	f8da 7008 	ldr.w	r7, [sl, #8]
   17872:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
   17876:	f105 0808 	add.w	r8, r5, #8
   1787a:	f04f 0900 	mov.w	r9, #0
   1787e:	e009      	b.n	17894 <d_print_comp_inner+0xc60>
   17880:	460b      	mov	r3, r1
   17882:	3101      	adds	r1, #1
   17884:	45a8      	cmp	r8, r5
   17886:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
   1788a:	54e6      	strb	r6, [r4, r3]
   1788c:	f884 6104 	strb.w	r6, [r4, #260]	; 0x104
   17890:	f000 8506 	beq.w	182a0 <d_print_comp_inner+0x166c>
   17894:	29ff      	cmp	r1, #255	; 0xff
   17896:	f815 6f01 	ldrb.w	r6, [r5, #1]!
   1789a:	d1f1      	bne.n	17880 <d_print_comp_inner+0xc4c>
   1789c:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   178a0:	f884 90ff 	strb.w	r9, [r4, #255]	; 0xff
   178a4:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
   178a8:	4620      	mov	r0, r4
   178aa:	4798      	blx	r3
   178ac:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   178b0:	3301      	adds	r3, #1
   178b2:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
   178b6:	2101      	movs	r1, #1
   178b8:	2300      	movs	r3, #0
   178ba:	e7e3      	b.n	17884 <d_print_comp_inner+0xc50>
   178bc:	686a      	ldr	r2, [r5, #4]
   178be:	68ae      	ldr	r6, [r5, #8]
   178c0:	b10a      	cbz	r2, 178c6 <d_print_comp_inner+0xc92>
   178c2:	f001 ff5b 	bl	1977c <d_print_comp>
   178c6:	f8d4 3100 	ldr.w	r3, [r4, #256]	; 0x100
   178ca:	2bff      	cmp	r3, #255	; 0xff
   178cc:	f001 82b1 	beq.w	18e32 <d_print_comp_inner+0x21fe>
   178d0:	1c5a      	adds	r2, r3, #1
   178d2:	257b      	movs	r5, #123	; 0x7b
   178d4:	f8c4 2100 	str.w	r2, [r4, #256]	; 0x100
   178d8:	4641      	mov	r1, r8
   178da:	54e5      	strb	r5, [r4, r3]
   178dc:	4632      	mov	r2, r6
   178de:	4620      	mov	r0, r4
   178e0:	f884 5104 	strb.w	r5, [r4, #260]	; 0x104
   178e4:	f001 ff4a 	bl	1977c <d_print_comp>
   178e8:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
   178ec:	29ff      	cmp	r1, #255	; 0xff
   178ee:	f001 81e7 	beq.w	18cc0 <d_print_comp_inner+0x208c>
   178f2:	1c4a      	adds	r2, r1, #1
   178f4:	237d      	movs	r3, #125	; 0x7d
   178f6:	f8c4 2100 	str.w	r2, [r4, #256]	; 0x100
   178fa:	5463      	strb	r3, [r4, r1]
   178fc:	f884 3104 	strb.w	r3, [r4, #260]	; 0x104
   17900:	f7ff ba66 	b.w	16dd0 <d_print_comp_inner+0x19c>
   17904:	f8d5 9004 	ldr.w	r9, [r5, #4]
   17908:	68ae      	ldr	r6, [r5, #8]
   1790a:	f899 3000 	ldrb.w	r3, [r9]
   1790e:	2b31      	cmp	r3, #49	; 0x31
   17910:	f000 87cb 	beq.w	188aa <d_print_comp_inner+0x1c76>
   17914:	2b33      	cmp	r3, #51	; 0x33
   17916:	f041 86d3 	bne.w	196c0 <d_print_comp_inner+0x2a8c>
   1791a:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
   1791e:	29ff      	cmp	r1, #255	; 0xff
   17920:	f001 84c3 	beq.w	192aa <d_print_comp_inner+0x2676>
   17924:	1c4a      	adds	r2, r1, #1
   17926:	2328      	movs	r3, #40	; 0x28
   17928:	f8c4 2100 	str.w	r2, [r4, #256]	; 0x100
   1792c:	5463      	strb	r3, [r4, r1]
   1792e:	f884 3104 	strb.w	r3, [r4, #260]	; 0x104
   17932:	a904      	add	r1, sp, #16
   17934:	f8d9 2004 	ldr.w	r2, [r9, #4]
   17938:	f8d4 3128 	ldr.w	r3, [r4, #296]	; 0x128
   1793c:	f8c4 1128 	str.w	r1, [r4, #296]	; 0x128
   17940:	4620      	mov	r0, r4
   17942:	4641      	mov	r1, r8
   17944:	9305      	str	r3, [sp, #20]
   17946:	9204      	str	r2, [sp, #16]
   17948:	f7ff f974 	bl	16c34 <d_print_comp_inner>
   1794c:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
   17950:	9b05      	ldr	r3, [sp, #20]
   17952:	f8c4 3128 	str.w	r3, [r4, #296]	; 0x128
   17956:	29ff      	cmp	r1, #255	; 0xff
   17958:	f001 8496 	beq.w	19288 <d_print_comp_inner+0x2654>
   1795c:	2329      	movs	r3, #41	; 0x29
   1795e:	1c4a      	adds	r2, r1, #1
   17960:	f8c4 2100 	str.w	r2, [r4, #256]	; 0x100
   17964:	5463      	strb	r3, [r4, r1]
   17966:	f884 3104 	strb.w	r3, [r4, #260]	; 0x104
   1796a:	4632      	mov	r2, r6
   1796c:	4641      	mov	r1, r8
   1796e:	4620      	mov	r0, r4
   17970:	f002 fd2a 	bl	1a3c8 <d_print_subexpr>
   17974:	f7ff ba2c 	b.w	16dd0 <d_print_comp_inner+0x19c>
   17978:	686a      	ldr	r2, [r5, #4]
   1797a:	f002 fce7 	bl	1a34c <d_print_expr_op>
   1797e:	f7ff ba27 	b.w	16dd0 <d_print_comp_inner+0x19c>
   17982:	f011 0f20 	tst.w	r1, #32
   17986:	f040 8753 	bne.w	18830 <d_print_comp_inner+0x1bfc>
   1798a:	686a      	ldr	r2, [r5, #4]
   1798c:	b11a      	cbz	r2, 17996 <d_print_comp_inner+0xd62>
   1798e:	f018 0340 	ands.w	r3, r8, #64	; 0x40
   17992:	f001 81d0 	beq.w	18d36 <d_print_comp_inner+0x2102>
   17996:	f028 0860 	bic.w	r8, r8, #96	; 0x60
   1799a:	f105 0208 	add.w	r2, r5, #8
   1799e:	4641      	mov	r1, r8
   179a0:	f8d4 3114 	ldr.w	r3, [r4, #276]	; 0x114
   179a4:	4620      	mov	r0, r4
   179a6:	f002 fbdd 	bl	1a164 <d_print_function_type.isra.11>
   179aa:	f7ff ba11 	b.w	16dd0 <d_print_comp_inner+0x19c>
   179ae:	f011 0804 	ands.w	r8, r1, #4
   179b2:	686b      	ldr	r3, [r5, #4]
   179b4:	f040 8612 	bne.w	185dc <d_print_comp_inner+0x19a8>
   179b8:	e893 00a0 	ldmia.w	r3, {r5, r7}
   179bc:	2f00      	cmp	r7, #0
   179be:	f43f aa07 	beq.w	16dd0 <d_print_comp_inner+0x19c>
   179c2:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
   179c6:	442f      	add	r7, r5
   179c8:	e009      	b.n	179de <d_print_comp_inner+0xdaa>
   179ca:	460b      	mov	r3, r1
   179cc:	3101      	adds	r1, #1
   179ce:	42bd      	cmp	r5, r7
   179d0:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
   179d4:	54e6      	strb	r6, [r4, r3]
   179d6:	f884 6104 	strb.w	r6, [r4, #260]	; 0x104
   179da:	f43f a9f9 	beq.w	16dd0 <d_print_comp_inner+0x19c>
   179de:	29ff      	cmp	r1, #255	; 0xff
   179e0:	f815 6b01 	ldrb.w	r6, [r5], #1
   179e4:	d1f1      	bne.n	179ca <d_print_comp_inner+0xd96>
   179e6:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   179ea:	f884 80ff 	strb.w	r8, [r4, #255]	; 0xff
   179ee:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
   179f2:	4620      	mov	r0, r4
   179f4:	4798      	blx	r3
   179f6:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   179fa:	3301      	adds	r3, #1
   179fc:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
   17a00:	2101      	movs	r1, #1
   17a02:	2300      	movs	r3, #0
   17a04:	e7e3      	b.n	179ce <d_print_comp_inner+0xd9a>
   17a06:	6869      	ldr	r1, [r5, #4]
   17a08:	f8d0 711c 	ldr.w	r7, [r0, #284]	; 0x11c
   17a0c:	780b      	ldrb	r3, [r1, #0]
   17a0e:	2f00      	cmp	r7, #0
   17a10:	f040 85e1 	bne.w	185d6 <d_print_comp_inner+0x19a2>
   17a14:	2b05      	cmp	r3, #5
   17a16:	f001 81c7 	beq.w	18da8 <d_print_comp_inner+0x2174>
   17a1a:	2b23      	cmp	r3, #35	; 0x23
   17a1c:	f000 8689 	beq.w	18732 <d_print_comp_inner+0x1afe>
   17a20:	782a      	ldrb	r2, [r5, #0]
   17a22:	429a      	cmp	r2, r3
   17a24:	f000 8685 	beq.w	18732 <d_print_comp_inner+0x1afe>
   17a28:	2b24      	cmp	r3, #36	; 0x24
   17a2a:	f47f a9eb 	bne.w	16e04 <d_print_comp_inner+0x1d0>
   17a2e:	a814      	add	r0, sp, #80	; 0x50
   17a30:	f8d4 3114 	ldr.w	r3, [r4, #276]	; 0x114
   17a34:	684a      	ldr	r2, [r1, #4]
   17a36:	f840 3d40 	str.w	r3, [r0, #-64]!
   17a3a:	2100      	movs	r1, #0
   17a3c:	f8d4 3110 	ldr.w	r3, [r4, #272]	; 0x110
   17a40:	9505      	str	r5, [sp, #20]
   17a42:	f8c4 0114 	str.w	r0, [r4, #276]	; 0x114
   17a46:	9106      	str	r1, [sp, #24]
   17a48:	9307      	str	r3, [sp, #28]
   17a4a:	2a00      	cmp	r2, #0
   17a4c:	f47f a9e8 	bne.w	16e20 <d_print_comp_inner+0x1ec>
   17a50:	f7ff b9e5 	b.w	16e1e <d_print_comp_inner+0x1ea>
   17a54:	686a      	ldr	r2, [r5, #4]
   17a56:	f001 fe91 	bl	1977c <d_print_comp>
   17a5a:	f7ff b9b9 	b.w	16dd0 <d_print_comp_inner+0x19c>
   17a5e:	ab14      	add	r3, sp, #80	; 0x50
   17a60:	f8d0 2114 	ldr.w	r2, [r0, #276]	; 0x114
   17a64:	f843 2d40 	str.w	r2, [r3, #-64]!
   17a68:	f8c0 3114 	str.w	r3, [r0, #276]	; 0x114
   17a6c:	68aa      	ldr	r2, [r5, #8]
   17a6e:	f8d0 3110 	ldr.w	r3, [r0, #272]	; 0x110
   17a72:	9307      	str	r3, [sp, #28]
   17a74:	2600      	movs	r6, #0
   17a76:	9505      	str	r5, [sp, #20]
   17a78:	9606      	str	r6, [sp, #24]
   17a7a:	f001 fe7f 	bl	1977c <d_print_comp>
   17a7e:	9b06      	ldr	r3, [sp, #24]
   17a80:	b923      	cbnz	r3, 17a8c <d_print_comp_inner+0xe58>
   17a82:	462a      	mov	r2, r5
   17a84:	4641      	mov	r1, r8
   17a86:	4620      	mov	r0, r4
   17a88:	f001 fe88 	bl	1979c <d_print_mod>
   17a8c:	9b04      	ldr	r3, [sp, #16]
   17a8e:	f8c4 3114 	str.w	r3, [r4, #276]	; 0x114
   17a92:	f7ff b99d 	b.w	16dd0 <d_print_comp_inner+0x19c>
   17a96:	f10d 0950 	add.w	r9, sp, #80	; 0x50
   17a9a:	f8d0 b114 	ldr.w	fp, [r0, #276]	; 0x114
   17a9e:	f849 bd40 	str.w	fp, [r9, #-64]!
   17aa2:	2200      	movs	r2, #0
   17aa4:	f8d0 3110 	ldr.w	r3, [r0, #272]	; 0x110
   17aa8:	f8cd b000 	str.w	fp, [sp]
   17aac:	4659      	mov	r1, fp
   17aae:	f8c0 9114 	str.w	r9, [r0, #276]	; 0x114
   17ab2:	9505      	str	r5, [sp, #20]
   17ab4:	9206      	str	r2, [sp, #24]
   17ab6:	9307      	str	r3, [sp, #28]
   17ab8:	2900      	cmp	r1, #0
   17aba:	f001 83a0 	beq.w	191fe <d_print_comp_inner+0x25ca>
   17abe:	684b      	ldr	r3, [r1, #4]
   17ac0:	781b      	ldrb	r3, [r3, #0]
   17ac2:	3b19      	subs	r3, #25
   17ac4:	2b02      	cmp	r3, #2
   17ac6:	f201 839a 	bhi.w	191fe <d_print_comp_inner+0x25ca>
   17aca:	46ac      	mov	ip, r5
   17acc:	2701      	movs	r7, #1
   17ace:	460e      	mov	r6, r1
   17ad0:	464d      	mov	r5, r9
   17ad2:	e004      	b.n	17ade <d_print_comp_inner+0xeaa>
   17ad4:	6873      	ldr	r3, [r6, #4]
   17ad6:	781b      	ldrb	r3, [r3, #0]
   17ad8:	3b19      	subs	r3, #25
   17ada:	2b02      	cmp	r3, #2
   17adc:	d81b      	bhi.n	17b16 <d_print_comp_inner+0xee2>
   17ade:	68b3      	ldr	r3, [r6, #8]
   17ae0:	ea4f 1e07 	mov.w	lr, r7, lsl #4
   17ae4:	aa14      	add	r2, sp, #80	; 0x50
   17ae6:	eb02 0b0e 	add.w	fp, r2, lr
   17aea:	b98b      	cbnz	r3, 17b10 <d_print_comp_inner+0xedc>
   17aec:	2f03      	cmp	r7, #3
   17aee:	f201 80f9 	bhi.w	18ce4 <d_print_comp_inner+0x20b0>
   17af2:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
   17af6:	f1ab 0a40 	sub.w	sl, fp, #64	; 0x40
   17afa:	e88a 000f 	stmia.w	sl, {r0, r1, r2, r3}
   17afe:	f84b 5c40 	str.w	r5, [fp, #-64]
   17b02:	2301      	movs	r3, #1
   17b04:	eb09 050e 	add.w	r5, r9, lr
   17b08:	f8c4 5114 	str.w	r5, [r4, #276]	; 0x114
   17b0c:	3701      	adds	r7, #1
   17b0e:	60b3      	str	r3, [r6, #8]
   17b10:	6836      	ldr	r6, [r6, #0]
   17b12:	2e00      	cmp	r6, #0
   17b14:	d1de      	bne.n	17ad4 <d_print_comp_inner+0xea0>
   17b16:	f8dc 2008 	ldr.w	r2, [ip, #8]
   17b1a:	4641      	mov	r1, r8
   17b1c:	4620      	mov	r0, r4
   17b1e:	4665      	mov	r5, ip
   17b20:	f001 fe2c 	bl	1977c <d_print_comp>
   17b24:	9b06      	ldr	r3, [sp, #24]
   17b26:	9a00      	ldr	r2, [sp, #0]
   17b28:	f8c4 2114 	str.w	r2, [r4, #276]	; 0x114
   17b2c:	2b00      	cmp	r3, #0
   17b2e:	f47f a94f 	bne.w	16dd0 <d_print_comp_inner+0x19c>
   17b32:	2f01      	cmp	r7, #1
   17b34:	d00c      	beq.n	17b50 <d_print_comp_inner+0xf1c>
   17b36:	eb09 1907 	add.w	r9, r9, r7, lsl #4
   17b3a:	f859 2c0c 	ldr.w	r2, [r9, #-12]
   17b3e:	3f01      	subs	r7, #1
   17b40:	4641      	mov	r1, r8
   17b42:	4620      	mov	r0, r4
   17b44:	f001 fe2a 	bl	1979c <d_print_mod>
   17b48:	2f01      	cmp	r7, #1
   17b4a:	f1a9 0910 	sub.w	r9, r9, #16
   17b4e:	d1f4      	bne.n	17b3a <d_print_comp_inner+0xf06>
   17b50:	1d2a      	adds	r2, r5, #4
   17b52:	4641      	mov	r1, r8
   17b54:	f8d4 3114 	ldr.w	r3, [r4, #276]	; 0x114
   17b58:	4620      	mov	r0, r4
   17b5a:	f002 fa27 	bl	19fac <d_print_array_type.isra.10>
   17b5e:	f7ff b937 	b.w	16dd0 <d_print_comp_inner+0x19c>
   17b62:	bf00      	nop
   17b64:	000244ff 	.word	0x000244ff
   17b68:	000244f3 	.word	0x000244f3
   17b6c:	f9b5 300a 	ldrsh.w	r3, [r5, #10]
   17b70:	2b00      	cmp	r3, #0
   17b72:	f040 8674 	bne.w	1885e <d_print_comp_inner+0x1c2a>
   17b76:	686a      	ldr	r2, [r5, #4]
   17b78:	4bd5      	ldr	r3, [pc, #852]	; (17ed0 <d_print_comp_inner+0x129c>)
   17b7a:	6851      	ldr	r1, [r2, #4]
   17b7c:	4299      	cmp	r1, r3
   17b7e:	f000 866a 	beq.w	18856 <d_print_comp_inner+0x1c22>
   17b82:	4641      	mov	r1, r8
   17b84:	4620      	mov	r0, r4
   17b86:	f001 fdf9 	bl	1977c <d_print_comp>
   17b8a:	f8d4 3100 	ldr.w	r3, [r4, #256]	; 0x100
   17b8e:	2bff      	cmp	r3, #255	; 0xff
   17b90:	f001 82b2 	beq.w	190f8 <d_print_comp_inner+0x24c4>
   17b94:	1c59      	adds	r1, r3, #1
   17b96:	2220      	movs	r2, #32
   17b98:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
   17b9c:	54e2      	strb	r2, [r4, r3]
   17b9e:	f884 2104 	strb.w	r2, [r4, #260]	; 0x104
   17ba2:	f9b5 3008 	ldrsh.w	r3, [r5, #8]
   17ba6:	2b00      	cmp	r3, #0
   17ba8:	f000 8595 	beq.w	186d6 <d_print_comp_inner+0x1aa2>
   17bac:	4dc9      	ldr	r5, [pc, #804]	; (17ed4 <d_print_comp_inner+0x12a0>)
   17bae:	f04f 0800 	mov.w	r8, #0
   17bb2:	1daf      	adds	r7, r5, #6
   17bb4:	e009      	b.n	17bca <d_print_comp_inner+0xf96>
   17bb6:	460b      	mov	r3, r1
   17bb8:	3101      	adds	r1, #1
   17bba:	42bd      	cmp	r5, r7
   17bbc:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
   17bc0:	54e6      	strb	r6, [r4, r3]
   17bc2:	f884 6104 	strb.w	r6, [r4, #260]	; 0x104
   17bc6:	f43f a903 	beq.w	16dd0 <d_print_comp_inner+0x19c>
   17bca:	29ff      	cmp	r1, #255	; 0xff
   17bcc:	f815 6b01 	ldrb.w	r6, [r5], #1
   17bd0:	d1f1      	bne.n	17bb6 <d_print_comp_inner+0xf82>
   17bd2:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   17bd6:	f884 80ff 	strb.w	r8, [r4, #255]	; 0xff
   17bda:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
   17bde:	4620      	mov	r0, r4
   17be0:	4798      	blx	r3
   17be2:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   17be6:	3301      	adds	r3, #1
   17be8:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
   17bec:	2101      	movs	r1, #1
   17bee:	2300      	movs	r3, #0
   17bf0:	e7e3      	b.n	17bba <d_print_comp_inner+0xf86>
   17bf2:	4eb9      	ldr	r6, [pc, #740]	; (17ed8 <d_print_comp_inner+0x12a4>)
   17bf4:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
   17bf8:	f106 090e 	add.w	r9, r6, #14
   17bfc:	f04f 0800 	mov.w	r8, #0
   17c00:	e009      	b.n	17c16 <d_print_comp_inner+0xfe2>
   17c02:	460b      	mov	r3, r1
   17c04:	3101      	adds	r1, #1
   17c06:	45b1      	cmp	r9, r6
   17c08:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
   17c0c:	54e7      	strb	r7, [r4, r3]
   17c0e:	f884 7104 	strb.w	r7, [r4, #260]	; 0x104
   17c12:	f000 83b3 	beq.w	1837c <d_print_comp_inner+0x1748>
   17c16:	29ff      	cmp	r1, #255	; 0xff
   17c18:	f816 7f01 	ldrb.w	r7, [r6, #1]!
   17c1c:	d1f1      	bne.n	17c02 <d_print_comp_inner+0xfce>
   17c1e:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   17c22:	f884 80ff 	strb.w	r8, [r4, #255]	; 0xff
   17c26:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
   17c2a:	4620      	mov	r0, r4
   17c2c:	4798      	blx	r3
   17c2e:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   17c32:	3301      	adds	r3, #1
   17c34:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
   17c38:	2101      	movs	r1, #1
   17c3a:	2300      	movs	r3, #0
   17c3c:	e7e3      	b.n	17c06 <d_print_comp_inner+0xfd2>
   17c3e:	4ea7      	ldr	r6, [pc, #668]	; (17edc <d_print_comp_inner+0x12a8>)
   17c40:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
   17c44:	f106 0a1a 	add.w	sl, r6, #26
   17c48:	f04f 0900 	mov.w	r9, #0
   17c4c:	e009      	b.n	17c62 <d_print_comp_inner+0x102e>
   17c4e:	460b      	mov	r3, r1
   17c50:	3101      	adds	r1, #1
   17c52:	4556      	cmp	r6, sl
   17c54:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
   17c58:	54e7      	strb	r7, [r4, r3]
   17c5a:	f884 7104 	strb.w	r7, [r4, #260]	; 0x104
   17c5e:	f000 82ef 	beq.w	18240 <d_print_comp_inner+0x160c>
   17c62:	29ff      	cmp	r1, #255	; 0xff
   17c64:	f816 7f01 	ldrb.w	r7, [r6, #1]!
   17c68:	d1f1      	bne.n	17c4e <d_print_comp_inner+0x101a>
   17c6a:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   17c6e:	f884 90ff 	strb.w	r9, [r4, #255]	; 0xff
   17c72:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
   17c76:	4620      	mov	r0, r4
   17c78:	4798      	blx	r3
   17c7a:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   17c7e:	3301      	adds	r3, #1
   17c80:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
   17c84:	2101      	movs	r1, #1
   17c86:	2300      	movs	r3, #0
   17c88:	e7e3      	b.n	17c52 <d_print_comp_inner+0x101e>
   17c8a:	6869      	ldr	r1, [r5, #4]
   17c8c:	f7fc ff2a 	bl	14ae4 <d_find_pack>
   17c90:	f04f 0900 	mov.w	r9, #0
   17c94:	2800      	cmp	r0, #0
   17c96:	f001 835d 	beq.w	19354 <d_print_comp_inner+0x2720>
   17c9a:	7803      	ldrb	r3, [r0, #0]
   17c9c:	2b2f      	cmp	r3, #47	; 0x2f
   17c9e:	f040 8457 	bne.w	18550 <d_print_comp_inner+0x191c>
   17ca2:	6843      	ldr	r3, [r0, #4]
   17ca4:	2b00      	cmp	r3, #0
   17ca6:	f000 8453 	beq.w	18550 <d_print_comp_inner+0x191c>
   17caa:	6880      	ldr	r0, [r0, #8]
   17cac:	f109 0901 	add.w	r9, r9, #1
   17cb0:	2800      	cmp	r0, #0
   17cb2:	d1f2      	bne.n	17c9a <d_print_comp_inner+0x1066>
   17cb4:	686b      	ldr	r3, [r5, #4]
   17cb6:	9300      	str	r3, [sp, #0]
   17cb8:	f109 33ff 	add.w	r3, r9, #4294967295
   17cbc:	9301      	str	r3, [sp, #4]
   17cbe:	f04f 0a00 	mov.w	sl, #0
   17cc2:	f8c4 7120 	str.w	r7, [r4, #288]	; 0x120
   17cc6:	9a00      	ldr	r2, [sp, #0]
   17cc8:	4641      	mov	r1, r8
   17cca:	4620      	mov	r0, r4
   17ccc:	f001 fd56 	bl	1977c <d_print_comp>
   17cd0:	9b01      	ldr	r3, [sp, #4]
   17cd2:	42bb      	cmp	r3, r7
   17cd4:	f340 81ab 	ble.w	1802e <d_print_comp_inner+0x13fa>
   17cd8:	4d81      	ldr	r5, [pc, #516]	; (17ee0 <d_print_comp_inner+0x12ac>)
   17cda:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
   17cde:	f105 0b02 	add.w	fp, r5, #2
   17ce2:	e009      	b.n	17cf8 <d_print_comp_inner+0x10c4>
   17ce4:	460b      	mov	r3, r1
   17ce6:	3101      	adds	r1, #1
   17ce8:	45ab      	cmp	fp, r5
   17cea:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
   17cee:	54e6      	strb	r6, [r4, r3]
   17cf0:	f884 6104 	strb.w	r6, [r4, #260]	; 0x104
   17cf4:	f000 819b 	beq.w	1802e <d_print_comp_inner+0x13fa>
   17cf8:	29ff      	cmp	r1, #255	; 0xff
   17cfa:	f815 6b01 	ldrb.w	r6, [r5], #1
   17cfe:	d1f1      	bne.n	17ce4 <d_print_comp_inner+0x10b0>
   17d00:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   17d04:	f884 a0ff 	strb.w	sl, [r4, #255]	; 0xff
   17d08:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
   17d0c:	4620      	mov	r0, r4
   17d0e:	4798      	blx	r3
   17d10:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   17d14:	3301      	adds	r3, #1
   17d16:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
   17d1a:	2101      	movs	r1, #1
   17d1c:	2300      	movs	r3, #0
   17d1e:	e7e3      	b.n	17ce8 <d_print_comp_inner+0x10b4>
   17d20:	4e70      	ldr	r6, [pc, #448]	; (17ee4 <d_print_comp_inner+0x12b0>)
   17d22:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
   17d26:	f106 0a16 	add.w	sl, r6, #22
   17d2a:	f04f 0900 	mov.w	r9, #0
   17d2e:	e009      	b.n	17d44 <d_print_comp_inner+0x1110>
   17d30:	460b      	mov	r3, r1
   17d32:	3101      	adds	r1, #1
   17d34:	45b2      	cmp	sl, r6
   17d36:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
   17d3a:	54e7      	strb	r7, [r4, r3]
   17d3c:	f884 7104 	strb.w	r7, [r4, #260]	; 0x104
   17d40:	f000 835f 	beq.w	18402 <d_print_comp_inner+0x17ce>
   17d44:	29ff      	cmp	r1, #255	; 0xff
   17d46:	f816 7f01 	ldrb.w	r7, [r6, #1]!
   17d4a:	d1f1      	bne.n	17d30 <d_print_comp_inner+0x10fc>
   17d4c:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   17d50:	f884 90ff 	strb.w	r9, [r4, #255]	; 0xff
   17d54:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
   17d58:	4620      	mov	r0, r4
   17d5a:	4798      	blx	r3
   17d5c:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   17d60:	3301      	adds	r3, #1
   17d62:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
   17d66:	2101      	movs	r1, #1
   17d68:	2300      	movs	r3, #0
   17d6a:	e7e3      	b.n	17d34 <d_print_comp_inner+0x1100>
   17d6c:	4e5e      	ldr	r6, [pc, #376]	; (17ee8 <d_print_comp_inner+0x12b4>)
   17d6e:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
   17d72:	f106 0a0e 	add.w	sl, r6, #14
   17d76:	f04f 0900 	mov.w	r9, #0
   17d7a:	e009      	b.n	17d90 <d_print_comp_inner+0x115c>
   17d7c:	460b      	mov	r3, r1
   17d7e:	3101      	adds	r1, #1
   17d80:	4556      	cmp	r6, sl
   17d82:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
   17d86:	54e7      	strb	r7, [r4, r3]
   17d88:	f884 7104 	strb.w	r7, [r4, #260]	; 0x104
   17d8c:	f000 83a0 	beq.w	184d0 <d_print_comp_inner+0x189c>
   17d90:	29ff      	cmp	r1, #255	; 0xff
   17d92:	f816 7f01 	ldrb.w	r7, [r6, #1]!
   17d96:	d1f1      	bne.n	17d7c <d_print_comp_inner+0x1148>
   17d98:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   17d9c:	f884 90ff 	strb.w	r9, [r4, #255]	; 0xff
   17da0:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
   17da4:	4620      	mov	r0, r4
   17da6:	4798      	blx	r3
   17da8:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   17dac:	3301      	adds	r3, #1
   17dae:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
   17db2:	2101      	movs	r1, #1
   17db4:	2300      	movs	r3, #0
   17db6:	e7e3      	b.n	17d80 <d_print_comp_inner+0x114c>
   17db8:	686a      	ldr	r2, [r5, #4]
   17dba:	7811      	ldrb	r1, [r2, #0]
   17dbc:	2927      	cmp	r1, #39	; 0x27
   17dbe:	f000 8615 	beq.w	189ec <d_print_comp_inner+0x1db8>
   17dc2:	2600      	movs	r6, #0
   17dc4:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
   17dc8:	29ff      	cmp	r1, #255	; 0xff
   17dca:	f001 80c5 	beq.w	18f58 <d_print_comp_inner+0x2324>
   17dce:	2328      	movs	r3, #40	; 0x28
   17dd0:	1c4a      	adds	r2, r1, #1
   17dd2:	f8c4 2100 	str.w	r2, [r4, #256]	; 0x100
   17dd6:	5463      	strb	r3, [r4, r1]
   17dd8:	f884 3104 	strb.w	r3, [r4, #260]	; 0x104
   17ddc:	686a      	ldr	r2, [r5, #4]
   17dde:	4641      	mov	r1, r8
   17de0:	4620      	mov	r0, r4
   17de2:	f001 fccb 	bl	1977c <d_print_comp>
   17de6:	f8d4 3100 	ldr.w	r3, [r4, #256]	; 0x100
   17dea:	2bff      	cmp	r3, #255	; 0xff
   17dec:	f001 8099 	beq.w	18f22 <d_print_comp_inner+0x22ee>
   17df0:	1c59      	adds	r1, r3, #1
   17df2:	2229      	movs	r2, #41	; 0x29
   17df4:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
   17df8:	54e2      	strb	r2, [r4, r3]
   17dfa:	f884 2104 	strb.w	r2, [r4, #260]	; 0x104
   17dfe:	782b      	ldrb	r3, [r5, #0]
   17e00:	2b3d      	cmp	r3, #61	; 0x3d
   17e02:	f000 86e6 	beq.w	18bd2 <d_print_comp_inner+0x1f9e>
   17e06:	2e08      	cmp	r6, #8
   17e08:	f000 867f 	beq.w	18b0a <d_print_comp_inner+0x1ed6>
   17e0c:	68aa      	ldr	r2, [r5, #8]
   17e0e:	4641      	mov	r1, r8
   17e10:	4620      	mov	r0, r4
   17e12:	f001 fcb3 	bl	1977c <d_print_comp>
   17e16:	f7fe bfdb 	b.w	16dd0 <d_print_comp_inner+0x19c>
   17e1a:	2301      	movs	r3, #1
   17e1c:	f8c0 3118 	str.w	r3, [r0, #280]	; 0x118
   17e20:	f7fe bfd6 	b.w	16dd0 <d_print_comp_inner+0x19c>
   17e24:	686a      	ldr	r2, [r5, #4]
   17e26:	4931      	ldr	r1, [pc, #196]	; (17eec <d_print_comp_inner+0x12b8>)
   17e28:	a804      	add	r0, sp, #16
   17e2a:	f006 fd87 	bl	1e93c <sprintf>
   17e2e:	a804      	add	r0, sp, #16
   17e30:	f006 ff26 	bl	1ec80 <strlen>
   17e34:	2800      	cmp	r0, #0
   17e36:	f43e afcb 	beq.w	16dd0 <d_print_comp_inner+0x19c>
   17e3a:	ad04      	add	r5, sp, #16
   17e3c:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
   17e40:	182f      	adds	r7, r5, r0
   17e42:	f04f 0800 	mov.w	r8, #0
   17e46:	e009      	b.n	17e5c <d_print_comp_inner+0x1228>
   17e48:	460b      	mov	r3, r1
   17e4a:	3101      	adds	r1, #1
   17e4c:	42bd      	cmp	r5, r7
   17e4e:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
   17e52:	54e6      	strb	r6, [r4, r3]
   17e54:	f884 6104 	strb.w	r6, [r4, #260]	; 0x104
   17e58:	f43e afba 	beq.w	16dd0 <d_print_comp_inner+0x19c>
   17e5c:	29ff      	cmp	r1, #255	; 0xff
   17e5e:	f815 6b01 	ldrb.w	r6, [r5], #1
   17e62:	d1f1      	bne.n	17e48 <d_print_comp_inner+0x1214>
   17e64:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   17e68:	f884 80ff 	strb.w	r8, [r4, #255]	; 0xff
   17e6c:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
   17e70:	4620      	mov	r0, r4
   17e72:	4798      	blx	r3
   17e74:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   17e78:	3301      	adds	r3, #1
   17e7a:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
   17e7e:	2101      	movs	r1, #1
   17e80:	2300      	movs	r3, #0
   17e82:	e7e3      	b.n	17e4c <d_print_comp_inner+0x1218>
   17e84:	4e1a      	ldr	r6, [pc, #104]	; (17ef0 <d_print_comp_inner+0x12bc>)
   17e86:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
   17e8a:	f106 0a1c 	add.w	sl, r6, #28
   17e8e:	f04f 0900 	mov.w	r9, #0
   17e92:	e009      	b.n	17ea8 <d_print_comp_inner+0x1274>
   17e94:	460b      	mov	r3, r1
   17e96:	3101      	adds	r1, #1
   17e98:	4556      	cmp	r6, sl
   17e9a:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
   17e9e:	54e7      	strb	r7, [r4, r3]
   17ea0:	f884 7104 	strb.w	r7, [r4, #260]	; 0x104
   17ea4:	f000 82fa 	beq.w	1849c <d_print_comp_inner+0x1868>
   17ea8:	29ff      	cmp	r1, #255	; 0xff
   17eaa:	f816 7f01 	ldrb.w	r7, [r6, #1]!
   17eae:	d1f1      	bne.n	17e94 <d_print_comp_inner+0x1260>
   17eb0:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   17eb4:	f884 90ff 	strb.w	r9, [r4, #255]	; 0xff
   17eb8:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
   17ebc:	4620      	mov	r0, r4
   17ebe:	4798      	blx	r3
   17ec0:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   17ec4:	3301      	adds	r3, #1
   17ec6:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
   17eca:	2101      	movs	r1, #1
   17ecc:	2300      	movs	r3, #0
   17ece:	e7e3      	b.n	17e98 <d_print_comp_inner+0x1264>
   17ed0:	00023cbc 	.word	0x00023cbc
   17ed4:	000244e0 	.word	0x000244e0
   17ed8:	000245bf 	.word	0x000245bf
   17edc:	000244bb 	.word	0x000244bb
   17ee0:	000244f0 	.word	0x000244f0
   17ee4:	000244bf 	.word	0x000244bf
   17ee8:	00024543 	.word	0x00024543
   17eec:	00024314 	.word	0x00024314
   17ef0:	0002458f 	.word	0x0002458f
   17ef4:	68ab      	ldr	r3, [r5, #8]
   17ef6:	781a      	ldrb	r2, [r3, #0]
   17ef8:	2a3a      	cmp	r2, #58	; 0x3a
   17efa:	f47e af7d 	bne.w	16df8 <d_print_comp_inner+0x1c4>
   17efe:	689b      	ldr	r3, [r3, #8]
   17f00:	781b      	ldrb	r3, [r3, #0]
   17f02:	2b3b      	cmp	r3, #59	; 0x3b
   17f04:	f47e af78 	bne.w	16df8 <d_print_comp_inner+0x1c4>
   17f08:	f105 0308 	add.w	r3, r5, #8
   17f0c:	686a      	ldr	r2, [r5, #4]
   17f0e:	f002 fabf 	bl	1a490 <d_maybe_print_fold_expression.isra.15>
   17f12:	4606      	mov	r6, r0
   17f14:	2800      	cmp	r0, #0
   17f16:	f47e af5b 	bne.w	16dd0 <d_print_comp_inner+0x19c>
   17f1a:	f8d5 a004 	ldr.w	sl, [r5, #4]
   17f1e:	68aa      	ldr	r2, [r5, #8]
   17f20:	f8da 1004 	ldr.w	r1, [sl, #4]
   17f24:	6893      	ldr	r3, [r2, #8]
   17f26:	6808      	ldr	r0, [r1, #0]
   17f28:	49d6      	ldr	r1, [pc, #856]	; (18284 <d_print_comp_inner+0x1650>)
   17f2a:	f8d2 9004 	ldr.w	r9, [r2, #4]
   17f2e:	685f      	ldr	r7, [r3, #4]
   17f30:	689d      	ldr	r5, [r3, #8]
   17f32:	f006 fd39 	bl	1e9a8 <strcmp>
   17f36:	2800      	cmp	r0, #0
   17f38:	f001 82e2 	beq.w	19500 <d_print_comp_inner+0x28cc>
   17f3c:	2204      	movs	r2, #4
   17f3e:	49d2      	ldr	r1, [pc, #840]	; (18288 <d_print_comp_inner+0x1654>)
   17f40:	4620      	mov	r0, r4
   17f42:	f7fc fba3 	bl	1468c <d_append_buffer>
   17f46:	f8d9 3004 	ldr.w	r3, [r9, #4]
   17f4a:	b183      	cbz	r3, 17f6e <d_print_comp_inner+0x133a>
   17f4c:	4641      	mov	r1, r8
   17f4e:	464a      	mov	r2, r9
   17f50:	4620      	mov	r0, r4
   17f52:	f002 fa39 	bl	1a3c8 <d_print_subexpr>
   17f56:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
   17f5a:	29ff      	cmp	r1, #255	; 0xff
   17f5c:	f001 83ec 	beq.w	19738 <d_print_comp_inner+0x2b04>
   17f60:	2320      	movs	r3, #32
   17f62:	1c4a      	adds	r2, r1, #1
   17f64:	f8c4 2100 	str.w	r2, [r4, #256]	; 0x100
   17f68:	5463      	strb	r3, [r4, r1]
   17f6a:	f884 3104 	strb.w	r3, [r4, #260]	; 0x104
   17f6e:	463a      	mov	r2, r7
   17f70:	4641      	mov	r1, r8
   17f72:	4620      	mov	r0, r4
   17f74:	f001 fc02 	bl	1977c <d_print_comp>
   17f78:	2d00      	cmp	r5, #0
   17f7a:	f43e af29 	beq.w	16dd0 <d_print_comp_inner+0x19c>
   17f7e:	462a      	mov	r2, r5
   17f80:	4641      	mov	r1, r8
   17f82:	4620      	mov	r0, r4
   17f84:	f002 fa20 	bl	1a3c8 <d_print_subexpr>
   17f88:	f7fe bf22 	b.w	16dd0 <d_print_comp_inner+0x19c>
   17f8c:	4ebf      	ldr	r6, [pc, #764]	; (1828c <d_print_comp_inner+0x1658>)
   17f8e:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
   17f92:	f106 0a08 	add.w	sl, r6, #8
   17f96:	f04f 0900 	mov.w	r9, #0
   17f9a:	e009      	b.n	17fb0 <d_print_comp_inner+0x137c>
   17f9c:	460b      	mov	r3, r1
   17f9e:	3101      	adds	r1, #1
   17fa0:	4556      	cmp	r6, sl
   17fa2:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
   17fa6:	54e7      	strb	r7, [r4, r3]
   17fa8:	f884 7104 	strb.w	r7, [r4, #260]	; 0x104
   17fac:	f000 80d8 	beq.w	18160 <d_print_comp_inner+0x152c>
   17fb0:	29ff      	cmp	r1, #255	; 0xff
   17fb2:	f816 7f01 	ldrb.w	r7, [r6, #1]!
   17fb6:	d1f1      	bne.n	17f9c <d_print_comp_inner+0x1368>
   17fb8:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   17fbc:	f884 90ff 	strb.w	r9, [r4, #255]	; 0xff
   17fc0:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
   17fc4:	4620      	mov	r0, r4
   17fc6:	4798      	blx	r3
   17fc8:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   17fcc:	3301      	adds	r3, #1
   17fce:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
   17fd2:	2101      	movs	r1, #1
   17fd4:	2300      	movs	r3, #0
   17fd6:	e7e3      	b.n	17fa0 <d_print_comp_inner+0x136c>
   17fd8:	4ead      	ldr	r6, [pc, #692]	; (18290 <d_print_comp_inner+0x165c>)
   17fda:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
   17fde:	f106 0a1d 	add.w	sl, r6, #29
   17fe2:	f04f 0900 	mov.w	r9, #0
   17fe6:	e009      	b.n	17ffc <d_print_comp_inner+0x13c8>
   17fe8:	460b      	mov	r3, r1
   17fea:	3101      	adds	r1, #1
   17fec:	45b2      	cmp	sl, r6
   17fee:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
   17ff2:	54e7      	strb	r7, [r4, r3]
   17ff4:	f884 7104 	strb.w	r7, [r4, #260]	; 0x104
   17ff8:	f000 81fc 	beq.w	183f4 <d_print_comp_inner+0x17c0>
   17ffc:	29ff      	cmp	r1, #255	; 0xff
   17ffe:	f816 7f01 	ldrb.w	r7, [r6, #1]!
   18002:	d1f1      	bne.n	17fe8 <d_print_comp_inner+0x13b4>
   18004:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   18008:	f884 90ff 	strb.w	r9, [r4, #255]	; 0xff
   1800c:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
   18010:	4620      	mov	r0, r4
   18012:	4798      	blx	r3
   18014:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   18018:	3301      	adds	r3, #1
   1801a:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
   1801e:	2101      	movs	r1, #1
   18020:	2300      	movs	r3, #0
   18022:	e7e3      	b.n	17fec <d_print_comp_inner+0x13b8>
   18024:	2301      	movs	r3, #1
   18026:	f8c0 3118 	str.w	r3, [r0, #280]	; 0x118
   1802a:	f7fe bed1 	b.w	16dd0 <d_print_comp_inner+0x19c>
   1802e:	3701      	adds	r7, #1
   18030:	454f      	cmp	r7, r9
   18032:	f47f ae46 	bne.w	17cc2 <d_print_comp_inner+0x108e>
   18036:	f7fe becb 	b.w	16dd0 <d_print_comp_inner+0x19c>
   1803a:	6876      	ldr	r6, [r6, #4]
   1803c:	2e00      	cmp	r6, #0
   1803e:	f001 806e 	beq.w	1911e <d_print_comp_inner+0x24ea>
   18042:	2f04      	cmp	r7, #4
   18044:	f103 0310 	add.w	r3, r3, #16
   18048:	f47f a9bd 	bne.w	173c6 <d_print_comp_inner+0x792>
   1804c:	f8c4 0114 	str.w	r0, [r4, #276]	; 0x114
   18050:	2301      	movs	r3, #1
   18052:	f8c4 3118 	str.w	r3, [r4, #280]	; 0x118
   18056:	f7fe bebb 	b.w	16dd0 <d_print_comp_inner+0x19c>
   1805a:	4e8e      	ldr	r6, [pc, #568]	; (18294 <d_print_comp_inner+0x1660>)
   1805c:	686a      	ldr	r2, [r5, #4]
   1805e:	4641      	mov	r1, r8
   18060:	4620      	mov	r0, r4
   18062:	f001 fb8b 	bl	1977c <d_print_comp>
   18066:	f106 0a04 	add.w	sl, r6, #4
   1806a:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
   1806e:	f04f 0900 	mov.w	r9, #0
   18072:	e008      	b.n	18086 <d_print_comp_inner+0x1452>
   18074:	460b      	mov	r3, r1
   18076:	3101      	adds	r1, #1
   18078:	45b2      	cmp	sl, r6
   1807a:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
   1807e:	54e7      	strb	r7, [r4, r3]
   18080:	f884 7104 	strb.w	r7, [r4, #260]	; 0x104
   18084:	d013      	beq.n	180ae <d_print_comp_inner+0x147a>
   18086:	29ff      	cmp	r1, #255	; 0xff
   18088:	f816 7b01 	ldrb.w	r7, [r6], #1
   1808c:	d1f2      	bne.n	18074 <d_print_comp_inner+0x1440>
   1808e:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   18092:	f884 90ff 	strb.w	r9, [r4, #255]	; 0xff
   18096:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
   1809a:	4620      	mov	r0, r4
   1809c:	4798      	blx	r3
   1809e:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   180a2:	3301      	adds	r3, #1
   180a4:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
   180a8:	2101      	movs	r1, #1
   180aa:	2300      	movs	r3, #0
   180ac:	e7e4      	b.n	18078 <d_print_comp_inner+0x1444>
   180ae:	68aa      	ldr	r2, [r5, #8]
   180b0:	4641      	mov	r1, r8
   180b2:	4620      	mov	r0, r4
   180b4:	f001 fb62 	bl	1977c <d_print_comp>
   180b8:	f7fe be8a 	b.w	16dd0 <d_print_comp_inner+0x19c>
   180bc:	686a      	ldr	r2, [r5, #4]
   180be:	4641      	mov	r1, r8
   180c0:	4620      	mov	r0, r4
   180c2:	f001 fb5b 	bl	1977c <d_print_comp>
   180c6:	f7fe be83 	b.w	16dd0 <d_print_comp_inner+0x19c>
   180ca:	686a      	ldr	r2, [r5, #4]
   180cc:	4641      	mov	r1, r8
   180ce:	4620      	mov	r0, r4
   180d0:	f001 fb54 	bl	1977c <d_print_comp>
   180d4:	f7fe be7c 	b.w	16dd0 <d_print_comp_inner+0x19c>
   180d8:	686a      	ldr	r2, [r5, #4]
   180da:	4641      	mov	r1, r8
   180dc:	4620      	mov	r0, r4
   180de:	f001 fb4d 	bl	1977c <d_print_comp>
   180e2:	f7fe be75 	b.w	16dd0 <d_print_comp_inner+0x19c>
   180e6:	686a      	ldr	r2, [r5, #4]
   180e8:	4641      	mov	r1, r8
   180ea:	4620      	mov	r0, r4
   180ec:	f001 fb46 	bl	1977c <d_print_comp>
   180f0:	f7fe be6e 	b.w	16dd0 <d_print_comp_inner+0x19c>
   180f4:	686a      	ldr	r2, [r5, #4]
   180f6:	4641      	mov	r1, r8
   180f8:	4620      	mov	r0, r4
   180fa:	f001 fb3f 	bl	1977c <d_print_comp>
   180fe:	f7fe be67 	b.w	16dd0 <d_print_comp_inner+0x19c>
   18102:	686a      	ldr	r2, [r5, #4]
   18104:	4641      	mov	r1, r8
   18106:	4620      	mov	r0, r4
   18108:	f001 fb38 	bl	1977c <d_print_comp>
   1810c:	f7fe be60 	b.w	16dd0 <d_print_comp_inner+0x19c>
   18110:	686a      	ldr	r2, [r5, #4]
   18112:	4641      	mov	r1, r8
   18114:	4620      	mov	r0, r4
   18116:	f001 fb31 	bl	1977c <d_print_comp>
   1811a:	f7fe be59 	b.w	16dd0 <d_print_comp_inner+0x19c>
   1811e:	686a      	ldr	r2, [r5, #4]
   18120:	4641      	mov	r1, r8
   18122:	4620      	mov	r0, r4
   18124:	f001 fb2a 	bl	1977c <d_print_comp>
   18128:	f7fe be52 	b.w	16dd0 <d_print_comp_inner+0x19c>
   1812c:	686a      	ldr	r2, [r5, #4]
   1812e:	4641      	mov	r1, r8
   18130:	4620      	mov	r0, r4
   18132:	f001 fb23 	bl	1977c <d_print_comp>
   18136:	f7fe be4b 	b.w	16dd0 <d_print_comp_inner+0x19c>
   1813a:	4641      	mov	r1, r8
   1813c:	68aa      	ldr	r2, [r5, #8]
   1813e:	4620      	mov	r0, r4
   18140:	f001 fb1c 	bl	1977c <d_print_comp>
   18144:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
   18148:	29ff      	cmp	r1, #255	; 0xff
   1814a:	f000 8560 	beq.w	18c0e <d_print_comp_inner+0x1fda>
   1814e:	1c4a      	adds	r2, r1, #1
   18150:	235d      	movs	r3, #93	; 0x5d
   18152:	f8c4 2100 	str.w	r2, [r4, #256]	; 0x100
   18156:	5463      	strb	r3, [r4, r1]
   18158:	f884 3104 	strb.w	r3, [r4, #260]	; 0x104
   1815c:	f7fe be38 	b.w	16dd0 <d_print_comp_inner+0x19c>
   18160:	f8d4 311c 	ldr.w	r3, [r4, #284]	; 0x11c
   18164:	4e4c      	ldr	r6, [pc, #304]	; (18298 <d_print_comp_inner+0x1664>)
   18166:	3301      	adds	r3, #1
   18168:	f8c4 311c 	str.w	r3, [r4, #284]	; 0x11c
   1816c:	4641      	mov	r1, r8
   1816e:	686a      	ldr	r2, [r5, #4]
   18170:	4620      	mov	r0, r4
   18172:	f001 fb03 	bl	1977c <d_print_comp>
   18176:	f8d4 311c 	ldr.w	r3, [r4, #284]	; 0x11c
   1817a:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
   1817e:	3b01      	subs	r3, #1
   18180:	f8c4 311c 	str.w	r3, [r4, #284]	; 0x11c
   18184:	f106 0902 	add.w	r9, r6, #2
   18188:	f04f 0800 	mov.w	r8, #0
   1818c:	e008      	b.n	181a0 <d_print_comp_inner+0x156c>
   1818e:	460b      	mov	r3, r1
   18190:	3101      	adds	r1, #1
   18192:	454e      	cmp	r6, r9
   18194:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
   18198:	54e7      	strb	r7, [r4, r3]
   1819a:	f884 7104 	strb.w	r7, [r4, #260]	; 0x104
   1819e:	d013      	beq.n	181c8 <d_print_comp_inner+0x1594>
   181a0:	29ff      	cmp	r1, #255	; 0xff
   181a2:	f816 7b01 	ldrb.w	r7, [r6], #1
   181a6:	d1f2      	bne.n	1818e <d_print_comp_inner+0x155a>
   181a8:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   181ac:	f884 80ff 	strb.w	r8, [r4, #255]	; 0xff
   181b0:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
   181b4:	4620      	mov	r0, r4
   181b6:	4798      	blx	r3
   181b8:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   181bc:	3301      	adds	r3, #1
   181be:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
   181c2:	2101      	movs	r1, #1
   181c4:	2300      	movs	r3, #0
   181c6:	e7e4      	b.n	18192 <d_print_comp_inner+0x155e>
   181c8:	68aa      	ldr	r2, [r5, #8]
   181ca:	4934      	ldr	r1, [pc, #208]	; (1829c <d_print_comp_inner+0x1668>)
   181cc:	3201      	adds	r2, #1
   181ce:	a804      	add	r0, sp, #16
   181d0:	f006 fbb4 	bl	1e93c <sprintf>
   181d4:	a804      	add	r0, sp, #16
   181d6:	f006 fd53 	bl	1ec80 <strlen>
   181da:	b318      	cbz	r0, 18224 <d_print_comp_inner+0x15f0>
   181dc:	ad04      	add	r5, sp, #16
   181de:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
   181e2:	182f      	adds	r7, r5, r0
   181e4:	f04f 0800 	mov.w	r8, #0
   181e8:	e008      	b.n	181fc <d_print_comp_inner+0x15c8>
   181ea:	460b      	mov	r3, r1
   181ec:	3101      	adds	r1, #1
   181ee:	42af      	cmp	r7, r5
   181f0:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
   181f4:	54e6      	strb	r6, [r4, r3]
   181f6:	f884 6104 	strb.w	r6, [r4, #260]	; 0x104
   181fa:	d015      	beq.n	18228 <d_print_comp_inner+0x15f4>
   181fc:	29ff      	cmp	r1, #255	; 0xff
   181fe:	f815 6b01 	ldrb.w	r6, [r5], #1
   18202:	d1f2      	bne.n	181ea <d_print_comp_inner+0x15b6>
   18204:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   18208:	f884 80ff 	strb.w	r8, [r4, #255]	; 0xff
   1820c:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
   18210:	4620      	mov	r0, r4
   18212:	4798      	blx	r3
   18214:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   18218:	3301      	adds	r3, #1
   1821a:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
   1821e:	2101      	movs	r1, #1
   18220:	2300      	movs	r3, #0
   18222:	e7e4      	b.n	181ee <d_print_comp_inner+0x15ba>
   18224:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
   18228:	29ff      	cmp	r1, #255	; 0xff
   1822a:	f000 8560 	beq.w	18cee <d_print_comp_inner+0x20ba>
   1822e:	1c4a      	adds	r2, r1, #1
   18230:	237d      	movs	r3, #125	; 0x7d
   18232:	f8c4 2100 	str.w	r2, [r4, #256]	; 0x100
   18236:	5463      	strb	r3, [r4, r1]
   18238:	f884 3104 	strb.w	r3, [r4, #260]	; 0x104
   1823c:	f7fe bdc8 	b.w	16dd0 <d_print_comp_inner+0x19c>
   18240:	686a      	ldr	r2, [r5, #4]
   18242:	4641      	mov	r1, r8
   18244:	4620      	mov	r0, r4
   18246:	f001 fa99 	bl	1977c <d_print_comp>
   1824a:	f7fe bdc1 	b.w	16dd0 <d_print_comp_inner+0x19c>
   1824e:	4641      	mov	r1, r8
   18250:	68aa      	ldr	r2, [r5, #8]
   18252:	4620      	mov	r0, r4
   18254:	f001 fa92 	bl	1977c <d_print_comp>
   18258:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
   1825c:	29ff      	cmp	r1, #255	; 0xff
   1825e:	f000 850b 	beq.w	18c78 <d_print_comp_inner+0x2044>
   18262:	1c4a      	adds	r2, r1, #1
   18264:	235d      	movs	r3, #93	; 0x5d
   18266:	f8c4 2100 	str.w	r2, [r4, #256]	; 0x100
   1826a:	5463      	strb	r3, [r4, r1]
   1826c:	f884 3104 	strb.w	r3, [r4, #260]	; 0x104
   18270:	f7fe bdae 	b.w	16dd0 <d_print_comp_inner+0x19c>
   18274:	686a      	ldr	r2, [r5, #4]
   18276:	4641      	mov	r1, r8
   18278:	4620      	mov	r0, r4
   1827a:	f001 fa7f 	bl	1977c <d_print_comp>
   1827e:	f7fe bda7 	b.w	16dd0 <d_print_comp_inner+0x19c>
   18282:	bf00      	nop
   18284:	00024328 	.word	0x00024328
   18288:	00024520 	.word	0x00024520
   1828c:	000245af 	.word	0x000245af
   18290:	0002456f 	.word	0x0002456f
   18294:	000243c4 	.word	0x000243c4
   18298:	000245bc 	.word	0x000245bc
   1829c:	00024314 	.word	0x00024314
   182a0:	f8da 5004 	ldr.w	r5, [sl, #4]
   182a4:	782b      	ldrb	r3, [r5, #0]
   182a6:	3b61      	subs	r3, #97	; 0x61
   182a8:	2b19      	cmp	r3, #25
   182aa:	d809      	bhi.n	182c0 <d_print_comp_inner+0x168c>
   182ac:	29ff      	cmp	r1, #255	; 0xff
   182ae:	f000 8793 	beq.w	191d8 <d_print_comp_inner+0x25a4>
   182b2:	2320      	movs	r3, #32
   182b4:	1c4a      	adds	r2, r1, #1
   182b6:	f8c4 2100 	str.w	r2, [r4, #256]	; 0x100
   182ba:	5463      	strb	r3, [r4, r1]
   182bc:	f884 3104 	strb.w	r3, [r4, #260]	; 0x104
   182c0:	19eb      	adds	r3, r5, r7
   182c2:	f813 3c01 	ldrb.w	r3, [r3, #-1]
   182c6:	2b20      	cmp	r3, #32
   182c8:	bf08      	it	eq
   182ca:	f107 37ff 	addeq.w	r7, r7, #4294967295
   182ce:	2f00      	cmp	r7, #0
   182d0:	f43e ad7e 	beq.w	16dd0 <d_print_comp_inner+0x19c>
   182d4:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
   182d8:	442f      	add	r7, r5
   182da:	f04f 0800 	mov.w	r8, #0
   182de:	e009      	b.n	182f4 <d_print_comp_inner+0x16c0>
   182e0:	460b      	mov	r3, r1
   182e2:	3101      	adds	r1, #1
   182e4:	42af      	cmp	r7, r5
   182e6:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
   182ea:	54e6      	strb	r6, [r4, r3]
   182ec:	f884 6104 	strb.w	r6, [r4, #260]	; 0x104
   182f0:	f43e ad6e 	beq.w	16dd0 <d_print_comp_inner+0x19c>
   182f4:	29ff      	cmp	r1, #255	; 0xff
   182f6:	f815 6b01 	ldrb.w	r6, [r5], #1
   182fa:	d1f1      	bne.n	182e0 <d_print_comp_inner+0x16ac>
   182fc:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   18300:	f884 80ff 	strb.w	r8, [r4, #255]	; 0xff
   18304:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
   18308:	4620      	mov	r0, r4
   1830a:	4798      	blx	r3
   1830c:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   18310:	3301      	adds	r3, #1
   18312:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
   18316:	2101      	movs	r1, #1
   18318:	2300      	movs	r3, #0
   1831a:	e7e3      	b.n	182e4 <d_print_comp_inner+0x16b0>
   1831c:	f8d4 2144 	ldr.w	r2, [r4, #324]	; 0x144
   18320:	b13a      	cbz	r2, 18332 <d_print_comp_inner+0x16fe>
   18322:	ab14      	add	r3, sp, #80	; 0x50
   18324:	f8d4 1110 	ldr.w	r1, [r4, #272]	; 0x110
   18328:	f843 1d48 	str.w	r1, [r3, #-72]!
   1832c:	9203      	str	r2, [sp, #12]
   1832e:	f8c4 3110 	str.w	r3, [r4, #272]	; 0x110
   18332:	686b      	ldr	r3, [r5, #4]
   18334:	781a      	ldrb	r2, [r3, #0]
   18336:	2a04      	cmp	r2, #4
   18338:	f000 830e 	beq.w	18958 <d_print_comp_inner+0x1d24>
   1833c:	a804      	add	r0, sp, #16
   1833e:	461a      	mov	r2, r3
   18340:	f8d4 5128 	ldr.w	r5, [r4, #296]	; 0x128
   18344:	f8c4 0128 	str.w	r0, [r4, #296]	; 0x128
   18348:	4641      	mov	r1, r8
   1834a:	4620      	mov	r0, r4
   1834c:	9304      	str	r3, [sp, #16]
   1834e:	9505      	str	r5, [sp, #20]
   18350:	f7fe fc70 	bl	16c34 <d_print_comp_inner>
   18354:	f8d4 3144 	ldr.w	r3, [r4, #324]	; 0x144
   18358:	9a05      	ldr	r2, [sp, #20]
   1835a:	f8c4 2128 	str.w	r2, [r4, #296]	; 0x128
   1835e:	2b00      	cmp	r3, #0
   18360:	f43e ad36 	beq.w	16dd0 <d_print_comp_inner+0x19c>
   18364:	9b02      	ldr	r3, [sp, #8]
   18366:	f8c4 3110 	str.w	r3, [r4, #272]	; 0x110
   1836a:	f7fe bd31 	b.w	16dd0 <d_print_comp_inner+0x19c>
   1836e:	68aa      	ldr	r2, [r5, #8]
   18370:	4641      	mov	r1, r8
   18372:	4620      	mov	r0, r4
   18374:	f001 fa02 	bl	1977c <d_print_comp>
   18378:	f7fe bd2a 	b.w	16dd0 <d_print_comp_inner+0x19c>
   1837c:	686a      	ldr	r2, [r5, #4]
   1837e:	49d8      	ldr	r1, [pc, #864]	; (186e0 <d_print_comp_inner+0x1aac>)
   18380:	3201      	adds	r2, #1
   18382:	a804      	add	r0, sp, #16
   18384:	f006 fada 	bl	1e93c <sprintf>
   18388:	a804      	add	r0, sp, #16
   1838a:	f006 fc79 	bl	1ec80 <strlen>
   1838e:	b318      	cbz	r0, 183d8 <d_print_comp_inner+0x17a4>
   18390:	ad04      	add	r5, sp, #16
   18392:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
   18396:	182f      	adds	r7, r5, r0
   18398:	f04f 0800 	mov.w	r8, #0
   1839c:	e008      	b.n	183b0 <d_print_comp_inner+0x177c>
   1839e:	460b      	mov	r3, r1
   183a0:	3101      	adds	r1, #1
   183a2:	42bd      	cmp	r5, r7
   183a4:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
   183a8:	54e6      	strb	r6, [r4, r3]
   183aa:	f884 6104 	strb.w	r6, [r4, #260]	; 0x104
   183ae:	d015      	beq.n	183dc <d_print_comp_inner+0x17a8>
   183b0:	29ff      	cmp	r1, #255	; 0xff
   183b2:	f815 6b01 	ldrb.w	r6, [r5], #1
   183b6:	d1f2      	bne.n	1839e <d_print_comp_inner+0x176a>
   183b8:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   183bc:	f884 80ff 	strb.w	r8, [r4, #255]	; 0xff
   183c0:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
   183c4:	4620      	mov	r0, r4
   183c6:	4798      	blx	r3
   183c8:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   183cc:	3301      	adds	r3, #1
   183ce:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
   183d2:	2101      	movs	r1, #1
   183d4:	2300      	movs	r3, #0
   183d6:	e7e4      	b.n	183a2 <d_print_comp_inner+0x176e>
   183d8:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
   183dc:	29ff      	cmp	r1, #255	; 0xff
   183de:	f000 8404 	beq.w	18bea <d_print_comp_inner+0x1fb6>
   183e2:	1c4a      	adds	r2, r1, #1
   183e4:	237d      	movs	r3, #125	; 0x7d
   183e6:	f8c4 2100 	str.w	r2, [r4, #256]	; 0x100
   183ea:	5463      	strb	r3, [r4, r1]
   183ec:	f884 3104 	strb.w	r3, [r4, #260]	; 0x104
   183f0:	f7fe bcee 	b.w	16dd0 <d_print_comp_inner+0x19c>
   183f4:	686a      	ldr	r2, [r5, #4]
   183f6:	4641      	mov	r1, r8
   183f8:	4620      	mov	r0, r4
   183fa:	f001 f9bf 	bl	1977c <d_print_comp>
   183fe:	f7fe bce7 	b.w	16dd0 <d_print_comp_inner+0x19c>
   18402:	686a      	ldr	r2, [r5, #4]
   18404:	4641      	mov	r1, r8
   18406:	4620      	mov	r0, r4
   18408:	f001 f9b8 	bl	1977c <d_print_comp>
   1840c:	f7fe bce0 	b.w	16dd0 <d_print_comp_inner+0x19c>
   18410:	686a      	ldr	r2, [r5, #4]
   18412:	4641      	mov	r1, r8
   18414:	4620      	mov	r0, r4
   18416:	f001 f9b1 	bl	1977c <d_print_comp>
   1841a:	f7fe bcd9 	b.w	16dd0 <d_print_comp_inner+0x19c>
   1841e:	4eb1      	ldr	r6, [pc, #708]	; (186e4 <d_print_comp_inner+0x1ab0>)
   18420:	68aa      	ldr	r2, [r5, #8]
   18422:	4641      	mov	r1, r8
   18424:	4620      	mov	r0, r4
   18426:	f001 f9a9 	bl	1977c <d_print_comp>
   1842a:	f106 0a05 	add.w	sl, r6, #5
   1842e:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
   18432:	f04f 0900 	mov.w	r9, #0
   18436:	e008      	b.n	1844a <d_print_comp_inner+0x1816>
   18438:	460b      	mov	r3, r1
   1843a:	3101      	adds	r1, #1
   1843c:	4556      	cmp	r6, sl
   1843e:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
   18442:	54e7      	strb	r7, [r4, r3]
   18444:	f884 7104 	strb.w	r7, [r4, #260]	; 0x104
   18448:	d013      	beq.n	18472 <d_print_comp_inner+0x183e>
   1844a:	29ff      	cmp	r1, #255	; 0xff
   1844c:	f816 7b01 	ldrb.w	r7, [r6], #1
   18450:	d1f2      	bne.n	18438 <d_print_comp_inner+0x1804>
   18452:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   18456:	f884 90ff 	strb.w	r9, [r4, #255]	; 0xff
   1845a:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
   1845e:	4620      	mov	r0, r4
   18460:	4798      	blx	r3
   18462:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   18466:	3301      	adds	r3, #1
   18468:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
   1846c:	2101      	movs	r1, #1
   1846e:	2300      	movs	r3, #0
   18470:	e7e4      	b.n	1843c <d_print_comp_inner+0x1808>
   18472:	686a      	ldr	r2, [r5, #4]
   18474:	4641      	mov	r1, r8
   18476:	4620      	mov	r0, r4
   18478:	f001 f980 	bl	1977c <d_print_comp>
   1847c:	f7fe bca8 	b.w	16dd0 <d_print_comp_inner+0x19c>
   18480:	686a      	ldr	r2, [r5, #4]
   18482:	4641      	mov	r1, r8
   18484:	4620      	mov	r0, r4
   18486:	f001 f979 	bl	1977c <d_print_comp>
   1848a:	f7fe bca1 	b.w	16dd0 <d_print_comp_inner+0x19c>
   1848e:	686a      	ldr	r2, [r5, #4]
   18490:	4641      	mov	r1, r8
   18492:	4620      	mov	r0, r4
   18494:	f001 f972 	bl	1977c <d_print_comp>
   18498:	f7fe bc9a 	b.w	16dd0 <d_print_comp_inner+0x19c>
   1849c:	686a      	ldr	r2, [r5, #4]
   1849e:	4641      	mov	r1, r8
   184a0:	4620      	mov	r0, r4
   184a2:	f001 f96b 	bl	1977c <d_print_comp>
   184a6:	f7fe bc93 	b.w	16dd0 <d_print_comp_inner+0x19c>
   184aa:	4641      	mov	r1, r8
   184ac:	686a      	ldr	r2, [r5, #4]
   184ae:	4620      	mov	r0, r4
   184b0:	f001 f964 	bl	1977c <d_print_comp>
   184b4:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
   184b8:	29ff      	cmp	r1, #255	; 0xff
   184ba:	f000 842a 	beq.w	18d12 <d_print_comp_inner+0x20de>
   184be:	1c4a      	adds	r2, r1, #1
   184c0:	2329      	movs	r3, #41	; 0x29
   184c2:	f8c4 2100 	str.w	r2, [r4, #256]	; 0x100
   184c6:	5463      	strb	r3, [r4, r1]
   184c8:	f884 3104 	strb.w	r3, [r4, #260]	; 0x104
   184cc:	f7fe bc80 	b.w	16dd0 <d_print_comp_inner+0x19c>
   184d0:	686a      	ldr	r2, [r5, #4]
   184d2:	4641      	mov	r1, r8
   184d4:	4620      	mov	r0, r4
   184d6:	f001 f951 	bl	1977c <d_print_comp>
   184da:	f7fe bc79 	b.w	16dd0 <d_print_comp_inner+0x19c>
   184de:	2f04      	cmp	r7, #4
   184e0:	f1a6 0410 	sub.w	r4, r6, #16
   184e4:	f106 0e10 	add.w	lr, r6, #16
   184e8:	f000 8722 	beq.w	19330 <d_print_comp_inner+0x26fc>
   184ec:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
   184f0:	e886 000f 	stmia.w	r6, {r0, r1, r2, r3}
   184f4:	2300      	movs	r3, #0
   184f6:	f84e 4c10 	str.w	r4, [lr, #-16]
   184fa:	e906 1008 	stmdb	r6, {r3, ip}
   184fe:	f8ca 6114 	str.w	r6, [sl, #276]	; 0x114
   18502:	f846 5c0c 	str.w	r5, [r6, #-12]
   18506:	686d      	ldr	r5, [r5, #4]
   18508:	3701      	adds	r7, #1
   1850a:	4676      	mov	r6, lr
   1850c:	f7fe bf84 	b.w	17418 <d_print_comp_inner+0x7e4>
   18510:	68aa      	ldr	r2, [r5, #8]
   18512:	9300      	str	r3, [sp, #0]
   18514:	460e      	mov	r6, r1
   18516:	4620      	mov	r0, r4
   18518:	4641      	mov	r1, r8
   1851a:	f8d4 5124 	ldr.w	r5, [r4, #292]	; 0x124
   1851e:	f001 f92d 	bl	1977c <d_print_comp>
   18522:	f8d4 2124 	ldr.w	r2, [r4, #292]	; 0x124
   18526:	9b00      	ldr	r3, [sp, #0]
   18528:	4295      	cmp	r5, r2
   1852a:	f47e ac51 	bne.w	16dd0 <d_print_comp_inner+0x19c>
   1852e:	f8d4 2100 	ldr.w	r2, [r4, #256]	; 0x100
   18532:	42b2      	cmp	r2, r6
   18534:	f47e ac4c 	bne.w	16dd0 <d_print_comp_inner+0x19c>
   18538:	3b01      	subs	r3, #1
   1853a:	f8c4 3100 	str.w	r3, [r4, #256]	; 0x100
   1853e:	f7fe bc47 	b.w	16dd0 <d_print_comp_inner+0x19c>
   18542:	462a      	mov	r2, r5
   18544:	4641      	mov	r1, r8
   18546:	4620      	mov	r0, r4
   18548:	f001 f928 	bl	1979c <d_print_mod>
   1854c:	f7fe bc70 	b.w	16e30 <d_print_comp_inner+0x1fc>
   18550:	686b      	ldr	r3, [r5, #4]
   18552:	9300      	str	r3, [sp, #0]
   18554:	f1b9 0f00 	cmp.w	r9, #0
   18558:	f47f abae 	bne.w	17cb8 <d_print_comp_inner+0x1084>
   1855c:	f7fe bc38 	b.w	16dd0 <d_print_comp_inner+0x19c>
   18560:	463a      	mov	r2, r7
   18562:	a804      	add	r0, sp, #16
   18564:	495e      	ldr	r1, [pc, #376]	; (186e0 <d_print_comp_inner+0x1aac>)
   18566:	f006 f9e9 	bl	1e93c <sprintf>
   1856a:	a804      	add	r0, sp, #16
   1856c:	f006 fb88 	bl	1ec80 <strlen>
   18570:	b318      	cbz	r0, 185ba <d_print_comp_inner+0x1986>
   18572:	ad04      	add	r5, sp, #16
   18574:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
   18578:	182f      	adds	r7, r5, r0
   1857a:	f04f 0800 	mov.w	r8, #0
   1857e:	e008      	b.n	18592 <d_print_comp_inner+0x195e>
   18580:	460b      	mov	r3, r1
   18582:	3101      	adds	r1, #1
   18584:	42af      	cmp	r7, r5
   18586:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
   1858a:	54e6      	strb	r6, [r4, r3]
   1858c:	f884 6104 	strb.w	r6, [r4, #260]	; 0x104
   18590:	d015      	beq.n	185be <d_print_comp_inner+0x198a>
   18592:	29ff      	cmp	r1, #255	; 0xff
   18594:	f815 6b01 	ldrb.w	r6, [r5], #1
   18598:	d1f2      	bne.n	18580 <d_print_comp_inner+0x194c>
   1859a:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   1859e:	f884 80ff 	strb.w	r8, [r4, #255]	; 0xff
   185a2:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
   185a6:	4620      	mov	r0, r4
   185a8:	4798      	blx	r3
   185aa:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   185ae:	3301      	adds	r3, #1
   185b0:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
   185b4:	2101      	movs	r1, #1
   185b6:	2300      	movs	r3, #0
   185b8:	e7e4      	b.n	18584 <d_print_comp_inner+0x1950>
   185ba:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
   185be:	29ff      	cmp	r1, #255	; 0xff
   185c0:	f000 84dd 	beq.w	18f7e <d_print_comp_inner+0x234a>
   185c4:	1c4a      	adds	r2, r1, #1
   185c6:	237d      	movs	r3, #125	; 0x7d
   185c8:	f8c4 2100 	str.w	r2, [r4, #256]	; 0x100
   185cc:	5463      	strb	r3, [r4, r1]
   185ce:	f884 3104 	strb.w	r3, [r4, #260]	; 0x104
   185d2:	f7fe bbfd 	b.w	16dd0 <d_print_comp_inner+0x19c>
   185d6:	2700      	movs	r7, #0
   185d8:	f7ff ba1f 	b.w	17a1a <d_print_comp_inner+0xde6>
   185dc:	68df      	ldr	r7, [r3, #12]
   185de:	689d      	ldr	r5, [r3, #8]
   185e0:	2f00      	cmp	r7, #0
   185e2:	f43e abf5 	beq.w	16dd0 <d_print_comp_inner+0x19c>
   185e6:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
   185ea:	442f      	add	r7, r5
   185ec:	f04f 0800 	mov.w	r8, #0
   185f0:	e009      	b.n	18606 <d_print_comp_inner+0x19d2>
   185f2:	460b      	mov	r3, r1
   185f4:	3101      	adds	r1, #1
   185f6:	42bd      	cmp	r5, r7
   185f8:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
   185fc:	54e6      	strb	r6, [r4, r3]
   185fe:	f884 6104 	strb.w	r6, [r4, #260]	; 0x104
   18602:	f43e abe5 	beq.w	16dd0 <d_print_comp_inner+0x19c>
   18606:	29ff      	cmp	r1, #255	; 0xff
   18608:	f815 6b01 	ldrb.w	r6, [r5], #1
   1860c:	d1f1      	bne.n	185f2 <d_print_comp_inner+0x19be>
   1860e:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   18612:	f884 80ff 	strb.w	r8, [r4, #255]	; 0xff
   18616:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
   1861a:	4620      	mov	r0, r4
   1861c:	4798      	blx	r3
   1861e:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   18622:	3301      	adds	r3, #1
   18624:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
   18628:	2101      	movs	r1, #1
   1862a:	2300      	movs	r3, #0
   1862c:	e7e3      	b.n	185f6 <d_print_comp_inner+0x19c2>
   1862e:	686e      	ldr	r6, [r5, #4]
   18630:	68af      	ldr	r7, [r5, #8]
   18632:	4437      	add	r7, r6
   18634:	42be      	cmp	r6, r7
   18636:	f4be abcb 	bcs.w	16dd0 <d_print_comp_inner+0x19c>
   1863a:	f04f 0800 	mov.w	r8, #0
   1863e:	e00d      	b.n	1865c <d_print_comp_inner+0x1a28>
   18640:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
   18644:	29ff      	cmp	r1, #255	; 0xff
   18646:	d036      	beq.n	186b6 <d_print_comp_inner+0x1a82>
   18648:	1c4b      	adds	r3, r1, #1
   1864a:	f8c4 3100 	str.w	r3, [r4, #256]	; 0x100
   1864e:	5465      	strb	r5, [r4, r1]
   18650:	f884 5104 	strb.w	r5, [r4, #260]	; 0x104
   18654:	3601      	adds	r6, #1
   18656:	42b7      	cmp	r7, r6
   18658:	f67e abba 	bls.w	16dd0 <d_print_comp_inner+0x19c>
   1865c:	1bbb      	subs	r3, r7, r6
   1865e:	2b03      	cmp	r3, #3
   18660:	7835      	ldrb	r5, [r6, #0]
   18662:	dded      	ble.n	18640 <d_print_comp_inner+0x1a0c>
   18664:	2d5f      	cmp	r5, #95	; 0x5f
   18666:	d1eb      	bne.n	18640 <d_print_comp_inner+0x1a0c>
   18668:	7873      	ldrb	r3, [r6, #1]
   1866a:	2b5f      	cmp	r3, #95	; 0x5f
   1866c:	d1e8      	bne.n	18640 <d_print_comp_inner+0x1a0c>
   1866e:	78b3      	ldrb	r3, [r6, #2]
   18670:	2b55      	cmp	r3, #85	; 0x55
   18672:	d1e5      	bne.n	18640 <d_print_comp_inner+0x1a0c>
   18674:	1cf3      	adds	r3, r6, #3
   18676:	429f      	cmp	r7, r3
   18678:	d9e2      	bls.n	18640 <d_print_comp_inner+0x1a0c>
   1867a:	2000      	movs	r0, #0
   1867c:	e006      	b.n	1868c <d_print_comp_inner+0x1a58>
   1867e:	f1a5 0237 	sub.w	r2, r5, #55	; 0x37
   18682:	429f      	cmp	r7, r3
   18684:	eb02 1000 	add.w	r0, r2, r0, lsl #4
   18688:	f000 85c7 	beq.w	1921a <d_print_comp_inner+0x25e6>
   1868c:	4699      	mov	r9, r3
   1868e:	f813 5b01 	ldrb.w	r5, [r3], #1
   18692:	f1a5 0230 	sub.w	r2, r5, #48	; 0x30
   18696:	b2d1      	uxtb	r1, r2
   18698:	2909      	cmp	r1, #9
   1869a:	f1a5 0e41 	sub.w	lr, r5, #65	; 0x41
   1869e:	d9f0      	bls.n	18682 <d_print_comp_inner+0x1a4e>
   186a0:	f1be 0f05 	cmp.w	lr, #5
   186a4:	f1a5 0261 	sub.w	r2, r5, #97	; 0x61
   186a8:	d9e9      	bls.n	1867e <d_print_comp_inner+0x1a4a>
   186aa:	2a05      	cmp	r2, #5
   186ac:	f200 8743 	bhi.w	19536 <d_print_comp_inner+0x2902>
   186b0:	f1a5 0257 	sub.w	r2, r5, #87	; 0x57
   186b4:	e7e5      	b.n	18682 <d_print_comp_inner+0x1a4e>
   186b6:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   186ba:	f884 80ff 	strb.w	r8, [r4, #255]	; 0xff
   186be:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
   186c2:	4620      	mov	r0, r4
   186c4:	4798      	blx	r3
   186c6:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   186ca:	3301      	adds	r3, #1
   186cc:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
   186d0:	2100      	movs	r1, #0
   186d2:	2301      	movs	r3, #1
   186d4:	e7b9      	b.n	1864a <d_print_comp_inner+0x1a16>
   186d6:	4d04      	ldr	r5, [pc, #16]	; (186e8 <d_print_comp_inner+0x1ab4>)
   186d8:	4698      	mov	r8, r3
   186da:	1daf      	adds	r7, r5, #6
   186dc:	e010      	b.n	18700 <d_print_comp_inner+0x1acc>
   186de:	bf00      	nop
   186e0:	00024314 	.word	0x00024314
   186e4:	00024488 	.word	0x00024488
   186e8:	000244e8 	.word	0x000244e8
   186ec:	460b      	mov	r3, r1
   186ee:	3101      	adds	r1, #1
   186f0:	42bd      	cmp	r5, r7
   186f2:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
   186f6:	54e6      	strb	r6, [r4, r3]
   186f8:	f884 6104 	strb.w	r6, [r4, #260]	; 0x104
   186fc:	f43e ab68 	beq.w	16dd0 <d_print_comp_inner+0x19c>
   18700:	29ff      	cmp	r1, #255	; 0xff
   18702:	f815 6b01 	ldrb.w	r6, [r5], #1
   18706:	d1f1      	bne.n	186ec <d_print_comp_inner+0x1ab8>
   18708:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   1870c:	f884 80ff 	strb.w	r8, [r4, #255]	; 0xff
   18710:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
   18714:	4620      	mov	r0, r4
   18716:	4798      	blx	r3
   18718:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   1871c:	3301      	adds	r3, #1
   1871e:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
   18722:	2101      	movs	r1, #1
   18724:	2300      	movs	r3, #0
   18726:	e7e3      	b.n	186f0 <d_print_comp_inner+0x1abc>
   18728:	782b      	ldrb	r3, [r5, #0]
   1872a:	2b2f      	cmp	r3, #47	; 0x2f
   1872c:	f47e ab6a 	bne.w	16e04 <d_print_comp_inner+0x1d0>
   18730:	4601      	mov	r1, r0
   18732:	460d      	mov	r5, r1
   18734:	f8d4 c114 	ldr.w	ip, [r4, #276]	; 0x114
   18738:	f7fe bb66 	b.w	16e08 <d_print_comp_inner+0x1d4>
   1873c:	4dd7      	ldr	r5, [pc, #860]	; (18a9c <d_print_comp_inner+0x1e68>)
   1873e:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
   18742:	f105 0804 	add.w	r8, r5, #4
   18746:	e009      	b.n	1875c <d_print_comp_inner+0x1b28>
   18748:	460b      	mov	r3, r1
   1874a:	3101      	adds	r1, #1
   1874c:	45a8      	cmp	r8, r5
   1874e:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
   18752:	54e6      	strb	r6, [r4, r3]
   18754:	f884 6104 	strb.w	r6, [r4, #260]	; 0x104
   18758:	f43e ab3a 	beq.w	16dd0 <d_print_comp_inner+0x19c>
   1875c:	29ff      	cmp	r1, #255	; 0xff
   1875e:	f815 6b01 	ldrb.w	r6, [r5], #1
   18762:	d1f1      	bne.n	18748 <d_print_comp_inner+0x1b14>
   18764:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   18768:	f884 70ff 	strb.w	r7, [r4, #255]	; 0xff
   1876c:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
   18770:	4620      	mov	r0, r4
   18772:	4798      	blx	r3
   18774:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   18778:	3301      	adds	r3, #1
   1877a:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
   1877e:	2101      	movs	r1, #1
   18780:	2300      	movs	r3, #0
   18782:	e7e3      	b.n	1874c <d_print_comp_inner+0x1b18>
   18784:	4ec6      	ldr	r6, [pc, #792]	; (18aa0 <d_print_comp_inner+0x1e6c>)
   18786:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
   1878a:	f106 0905 	add.w	r9, r6, #5
   1878e:	f04f 0800 	mov.w	r8, #0
   18792:	e008      	b.n	187a6 <d_print_comp_inner+0x1b72>
   18794:	460b      	mov	r3, r1
   18796:	3101      	adds	r1, #1
   18798:	45b1      	cmp	r9, r6
   1879a:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
   1879e:	54e7      	strb	r7, [r4, r3]
   187a0:	f884 7104 	strb.w	r7, [r4, #260]	; 0x104
   187a4:	d013      	beq.n	187ce <d_print_comp_inner+0x1b9a>
   187a6:	29ff      	cmp	r1, #255	; 0xff
   187a8:	f816 7b01 	ldrb.w	r7, [r6], #1
   187ac:	d1f2      	bne.n	18794 <d_print_comp_inner+0x1b60>
   187ae:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   187b2:	f884 80ff 	strb.w	r8, [r4, #255]	; 0xff
   187b6:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
   187ba:	4620      	mov	r0, r4
   187bc:	4798      	blx	r3
   187be:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   187c2:	3301      	adds	r3, #1
   187c4:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
   187c8:	2101      	movs	r1, #1
   187ca:	2300      	movs	r3, #0
   187cc:	e7e4      	b.n	18798 <d_print_comp_inner+0x1b64>
   187ce:	686a      	ldr	r2, [r5, #4]
   187d0:	49b4      	ldr	r1, [pc, #720]	; (18aa4 <d_print_comp_inner+0x1e70>)
   187d2:	3201      	adds	r2, #1
   187d4:	a804      	add	r0, sp, #16
   187d6:	f006 f8b1 	bl	1e93c <sprintf>
   187da:	a804      	add	r0, sp, #16
   187dc:	f006 fa50 	bl	1ec80 <strlen>
   187e0:	2800      	cmp	r0, #0
   187e2:	f43e aaf5 	beq.w	16dd0 <d_print_comp_inner+0x19c>
   187e6:	ad04      	add	r5, sp, #16
   187e8:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
   187ec:	182f      	adds	r7, r5, r0
   187ee:	f04f 0800 	mov.w	r8, #0
   187f2:	e009      	b.n	18808 <d_print_comp_inner+0x1bd4>
   187f4:	460b      	mov	r3, r1
   187f6:	3101      	adds	r1, #1
   187f8:	42af      	cmp	r7, r5
   187fa:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
   187fe:	54e6      	strb	r6, [r4, r3]
   18800:	f884 6104 	strb.w	r6, [r4, #260]	; 0x104
   18804:	f43e aae4 	beq.w	16dd0 <d_print_comp_inner+0x19c>
   18808:	29ff      	cmp	r1, #255	; 0xff
   1880a:	f815 6b01 	ldrb.w	r6, [r5], #1
   1880e:	d1f1      	bne.n	187f4 <d_print_comp_inner+0x1bc0>
   18810:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   18814:	f884 80ff 	strb.w	r8, [r4, #255]	; 0xff
   18818:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
   1881c:	4620      	mov	r0, r4
   1881e:	4798      	blx	r3
   18820:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   18824:	3301      	adds	r3, #1
   18826:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
   1882a:	2101      	movs	r1, #1
   1882c:	2300      	movs	r3, #0
   1882e:	e7e3      	b.n	187f8 <d_print_comp_inner+0x1bc4>
   18830:	f021 0860 	bic.w	r8, r1, #96	; 0x60
   18834:	f105 0208 	add.w	r2, r5, #8
   18838:	4641      	mov	r1, r8
   1883a:	f8d0 3114 	ldr.w	r3, [r0, #276]	; 0x114
   1883e:	f001 fc91 	bl	1a164 <d_print_function_type.isra.11>
   18842:	686a      	ldr	r2, [r5, #4]
   18844:	2a00      	cmp	r2, #0
   18846:	f43e aac3 	beq.w	16dd0 <d_print_comp_inner+0x19c>
   1884a:	4641      	mov	r1, r8
   1884c:	4620      	mov	r0, r4
   1884e:	f000 ff95 	bl	1977c <d_print_comp>
   18852:	f7fe babd 	b.w	16dd0 <d_print_comp_inner+0x19c>
   18856:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
   1885a:	f7ff b9a2 	b.w	17ba2 <d_print_comp_inner+0xf6e>
   1885e:	4e92      	ldr	r6, [pc, #584]	; (18aa8 <d_print_comp_inner+0x1e74>)
   18860:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
   18864:	f106 0a05 	add.w	sl, r6, #5
   18868:	f04f 0900 	mov.w	r9, #0
   1886c:	e009      	b.n	18882 <d_print_comp_inner+0x1c4e>
   1886e:	460b      	mov	r3, r1
   18870:	3101      	adds	r1, #1
   18872:	45b2      	cmp	sl, r6
   18874:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
   18878:	54e7      	strb	r7, [r4, r3]
   1887a:	f884 7104 	strb.w	r7, [r4, #260]	; 0x104
   1887e:	f43f a97a 	beq.w	17b76 <d_print_comp_inner+0xf42>
   18882:	29ff      	cmp	r1, #255	; 0xff
   18884:	f816 7b01 	ldrb.w	r7, [r6], #1
   18888:	d1f1      	bne.n	1886e <d_print_comp_inner+0x1c3a>
   1888a:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   1888e:	f884 90ff 	strb.w	r9, [r4, #255]	; 0xff
   18892:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
   18896:	4620      	mov	r0, r4
   18898:	4798      	blx	r3
   1889a:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   1889e:	3301      	adds	r3, #1
   188a0:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
   188a4:	2101      	movs	r1, #1
   188a6:	2300      	movs	r3, #0
   188a8:	e7e3      	b.n	18872 <d_print_comp_inner+0x1c3e>
   188aa:	f8d9 3004 	ldr.w	r3, [r9, #4]
   188ae:	497f      	ldr	r1, [pc, #508]	; (18aac <d_print_comp_inner+0x1e78>)
   188b0:	681f      	ldr	r7, [r3, #0]
   188b2:	4638      	mov	r0, r7
   188b4:	f006 f878 	bl	1e9a8 <strcmp>
   188b8:	f896 a000 	ldrb.w	sl, [r6]
   188bc:	b918      	cbnz	r0, 188c6 <d_print_comp_inner+0x1c92>
   188be:	f1ba 0f03 	cmp.w	sl, #3
   188c2:	f000 851b 	beq.w	192fc <d_print_comp_inner+0x26c8>
   188c6:	f1ba 0f38 	cmp.w	sl, #56	; 0x38
   188ca:	f000 85fd 	beq.w	194c8 <d_print_comp_inner+0x2894>
   188ce:	4978      	ldr	r1, [pc, #480]	; (18ab0 <d_print_comp_inner+0x1e7c>)
   188d0:	4638      	mov	r0, r7
   188d2:	f006 f869 	bl	1e9a8 <strcmp>
   188d6:	4605      	mov	r5, r0
   188d8:	2800      	cmp	r0, #0
   188da:	f000 8135 	beq.w	18b48 <d_print_comp_inner+0x1f14>
   188de:	4975      	ldr	r1, [pc, #468]	; (18ab4 <d_print_comp_inner+0x1e80>)
   188e0:	4638      	mov	r0, r7
   188e2:	f006 f861 	bl	1e9a8 <strcmp>
   188e6:	2800      	cmp	r0, #0
   188e8:	f000 82b6 	beq.w	18e58 <d_print_comp_inner+0x2224>
   188ec:	464a      	mov	r2, r9
   188ee:	4641      	mov	r1, r8
   188f0:	4620      	mov	r0, r4
   188f2:	f001 fd2b 	bl	1a34c <d_print_expr_op>
   188f6:	2f00      	cmp	r7, #0
   188f8:	f43f a837 	beq.w	1796a <d_print_comp_inner+0xd36>
   188fc:	496e      	ldr	r1, [pc, #440]	; (18ab8 <d_print_comp_inner+0x1e84>)
   188fe:	4638      	mov	r0, r7
   18900:	f006 f852 	bl	1e9a8 <strcmp>
   18904:	2800      	cmp	r0, #0
   18906:	f000 8384 	beq.w	19012 <d_print_comp_inner+0x23de>
   1890a:	4638      	mov	r0, r7
   1890c:	496b      	ldr	r1, [pc, #428]	; (18abc <d_print_comp_inner+0x1e88>)
   1890e:	f006 f84b 	bl	1e9a8 <strcmp>
   18912:	4605      	mov	r5, r0
   18914:	2800      	cmp	r0, #0
   18916:	f47f a828 	bne.w	1796a <d_print_comp_inner+0xd36>
   1891a:	f8d4 3100 	ldr.w	r3, [r4, #256]	; 0x100
   1891e:	2bff      	cmp	r3, #255	; 0xff
   18920:	f000 84db 	beq.w	192da <d_print_comp_inner+0x26a6>
   18924:	1c58      	adds	r0, r3, #1
   18926:	2528      	movs	r5, #40	; 0x28
   18928:	f8c4 0100 	str.w	r0, [r4, #256]	; 0x100
   1892c:	4641      	mov	r1, r8
   1892e:	54e5      	strb	r5, [r4, r3]
   18930:	4632      	mov	r2, r6
   18932:	4620      	mov	r0, r4
   18934:	f884 5104 	strb.w	r5, [r4, #260]	; 0x104
   18938:	f000 ff20 	bl	1977c <d_print_comp>
   1893c:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
   18940:	29ff      	cmp	r1, #255	; 0xff
   18942:	f000 846d 	beq.w	19220 <d_print_comp_inner+0x25ec>
   18946:	2329      	movs	r3, #41	; 0x29
   18948:	1c4a      	adds	r2, r1, #1
   1894a:	f8c4 2100 	str.w	r2, [r4, #256]	; 0x100
   1894e:	5463      	strb	r3, [r4, r1]
   18950:	f884 3104 	strb.w	r3, [r4, #260]	; 0x104
   18954:	f7fe ba3c 	b.w	16dd0 <d_print_comp_inner+0x19c>
   18958:	f10d 0910 	add.w	r9, sp, #16
   1895c:	685a      	ldr	r2, [r3, #4]
   1895e:	f8d4 3128 	ldr.w	r3, [r4, #296]	; 0x128
   18962:	f8c4 9128 	str.w	r9, [r4, #296]	; 0x128
   18966:	4641      	mov	r1, r8
   18968:	4620      	mov	r0, r4
   1896a:	9204      	str	r2, [sp, #16]
   1896c:	9305      	str	r3, [sp, #20]
   1896e:	f7fe f961 	bl	16c34 <d_print_comp_inner>
   18972:	f8d4 3144 	ldr.w	r3, [r4, #324]	; 0x144
   18976:	9a05      	ldr	r2, [sp, #20]
   18978:	f8c4 2128 	str.w	r2, [r4, #296]	; 0x128
   1897c:	b113      	cbz	r3, 18984 <d_print_comp_inner+0x1d50>
   1897e:	9b02      	ldr	r3, [sp, #8]
   18980:	f8c4 3110 	str.w	r3, [r4, #272]	; 0x110
   18984:	f894 3104 	ldrb.w	r3, [r4, #260]	; 0x104
   18988:	2b3c      	cmp	r3, #60	; 0x3c
   1898a:	f000 83d9 	beq.w	19140 <d_print_comp_inner+0x250c>
   1898e:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
   18992:	29ff      	cmp	r1, #255	; 0xff
   18994:	f000 8467 	beq.w	19266 <d_print_comp_inner+0x2632>
   18998:	1c4a      	adds	r2, r1, #1
   1899a:	233c      	movs	r3, #60	; 0x3c
   1899c:	f8c4 2100 	str.w	r2, [r4, #256]	; 0x100
   189a0:	5463      	strb	r3, [r4, r1]
   189a2:	f884 3104 	strb.w	r3, [r4, #260]	; 0x104
   189a6:	686b      	ldr	r3, [r5, #4]
   189a8:	f8d4 5128 	ldr.w	r5, [r4, #296]	; 0x128
   189ac:	689b      	ldr	r3, [r3, #8]
   189ae:	f8c4 9128 	str.w	r9, [r4, #296]	; 0x128
   189b2:	461a      	mov	r2, r3
   189b4:	4641      	mov	r1, r8
   189b6:	4620      	mov	r0, r4
   189b8:	9304      	str	r3, [sp, #16]
   189ba:	9505      	str	r5, [sp, #20]
   189bc:	f7fe f93a 	bl	16c34 <d_print_comp_inner>
   189c0:	f894 3104 	ldrb.w	r3, [r4, #260]	; 0x104
   189c4:	9a05      	ldr	r2, [sp, #20]
   189c6:	f8c4 2128 	str.w	r2, [r4, #296]	; 0x128
   189ca:	2b3e      	cmp	r3, #62	; 0x3e
   189cc:	f000 83ab 	beq.w	19126 <d_print_comp_inner+0x24f2>
   189d0:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
   189d4:	29ff      	cmp	r1, #255	; 0xff
   189d6:	f000 849a 	beq.w	1930e <d_print_comp_inner+0x26da>
   189da:	233e      	movs	r3, #62	; 0x3e
   189dc:	1c4a      	adds	r2, r1, #1
   189de:	f8c4 2100 	str.w	r2, [r4, #256]	; 0x100
   189e2:	5463      	strb	r3, [r4, r1]
   189e4:	f884 3104 	strb.w	r3, [r4, #260]	; 0x104
   189e8:	f7fe b9f2 	b.w	16dd0 <d_print_comp_inner+0x19c>
   189ec:	6852      	ldr	r2, [r2, #4]
   189ee:	7c16      	ldrb	r6, [r2, #16]
   189f0:	2e00      	cmp	r6, #0
   189f2:	f43f a9e7 	beq.w	17dc4 <d_print_comp_inner+0x1190>
   189f6:	2e06      	cmp	r6, #6
   189f8:	f240 8337 	bls.w	1906a <d_print_comp_inner+0x2436>
   189fc:	2e07      	cmp	r6, #7
   189fe:	f47f a9e1 	bne.w	17dc4 <d_print_comp_inner+0x1190>
   18a02:	68aa      	ldr	r2, [r5, #8]
   18a04:	7811      	ldrb	r1, [r2, #0]
   18a06:	2900      	cmp	r1, #0
   18a08:	f47f a9dc 	bne.w	17dc4 <d_print_comp_inner+0x1190>
   18a0c:	6891      	ldr	r1, [r2, #8]
   18a0e:	2901      	cmp	r1, #1
   18a10:	f47f a9d8 	bne.w	17dc4 <d_print_comp_inner+0x1190>
   18a14:	2b3c      	cmp	r3, #60	; 0x3c
   18a16:	f47f a9d5 	bne.w	17dc4 <d_print_comp_inner+0x1190>
   18a1a:	6853      	ldr	r3, [r2, #4]
   18a1c:	781b      	ldrb	r3, [r3, #0]
   18a1e:	2b30      	cmp	r3, #48	; 0x30
   18a20:	f000 8626 	beq.w	19670 <d_print_comp_inner+0x2a3c>
   18a24:	2b31      	cmp	r3, #49	; 0x31
   18a26:	f47f a9cd 	bne.w	17dc4 <d_print_comp_inner+0x1190>
   18a2a:	2204      	movs	r2, #4
   18a2c:	4924      	ldr	r1, [pc, #144]	; (18ac0 <d_print_comp_inner+0x1e8c>)
   18a2e:	f7fb fe2d 	bl	1468c <d_append_buffer>
   18a32:	f7fe b9cd 	b.w	16dd0 <d_print_comp_inner+0x19c>
   18a36:	4e23      	ldr	r6, [pc, #140]	; (18ac4 <d_print_comp_inner+0x1e90>)
   18a38:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
   18a3c:	f106 0a02 	add.w	sl, r6, #2
   18a40:	e009      	b.n	18a56 <d_print_comp_inner+0x1e22>
   18a42:	460b      	mov	r3, r1
   18a44:	3101      	adds	r1, #1
   18a46:	45b2      	cmp	sl, r6
   18a48:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
   18a4c:	54e7      	strb	r7, [r4, r3]
   18a4e:	f884 7104 	strb.w	r7, [r4, #260]	; 0x104
   18a52:	f43e ad52 	beq.w	174fa <d_print_comp_inner+0x8c6>
   18a56:	29ff      	cmp	r1, #255	; 0xff
   18a58:	f816 7b01 	ldrb.w	r7, [r6], #1
   18a5c:	d1f1      	bne.n	18a42 <d_print_comp_inner+0x1e0e>
   18a5e:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   18a62:	f884 90ff 	strb.w	r9, [r4, #255]	; 0xff
   18a66:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
   18a6a:	4620      	mov	r0, r4
   18a6c:	4798      	blx	r3
   18a6e:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   18a72:	3301      	adds	r3, #1
   18a74:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
   18a78:	2101      	movs	r1, #1
   18a7a:	2300      	movs	r3, #0
   18a7c:	e7e3      	b.n	18a46 <d_print_comp_inner+0x1e12>
   18a7e:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
   18a82:	29ff      	cmp	r1, #255	; 0xff
   18a84:	f000 84e4 	beq.w	19450 <d_print_comp_inner+0x281c>
   18a88:	2220      	movs	r2, #32
   18a8a:	1c4b      	adds	r3, r1, #1
   18a8c:	f8c4 3100 	str.w	r3, [r4, #256]	; 0x100
   18a90:	5462      	strb	r2, [r4, r1]
   18a92:	f884 2104 	strb.w	r2, [r4, #260]	; 0x104
   18a96:	f7fe bdbb 	b.w	17610 <d_print_comp_inner+0x9dc>
   18a9a:	bf00      	nop
   18a9c:	00024560 	.word	0x00024560
   18aa0:	00024388 	.word	0x00024388
   18aa4:	00024314 	.word	0x00024314
   18aa8:	000244d8 	.word	0x000244d8
   18aac:	0002450c 	.word	0x0002450c
   18ab0:	000245dc 	.word	0x000245dc
   18ab4:	00024318 	.word	0x00024318
   18ab8:	00024510 	.word	0x00024510
   18abc:	0002481c 	.word	0x0002481c
   18ac0:	0002453c 	.word	0x0002453c
   18ac4:	00024364 	.word	0x00024364
   18ac8:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
   18acc:	29ff      	cmp	r1, #255	; 0xff
   18ace:	f000 8465 	beq.w	1939c <d_print_comp_inner+0x2768>
   18ad2:	2220      	movs	r2, #32
   18ad4:	1c4b      	adds	r3, r1, #1
   18ad6:	f8c4 3100 	str.w	r3, [r4, #256]	; 0x100
   18ada:	5462      	strb	r2, [r4, r1]
   18adc:	f884 2104 	strb.w	r2, [r4, #260]	; 0x104
   18ae0:	f7fe bd80 	b.w	175e4 <d_print_comp_inner+0x9b0>
   18ae4:	2700      	movs	r7, #0
   18ae6:	55a7      	strb	r7, [r4, r6]
   18ae8:	4631      	mov	r1, r6
   18aea:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   18aee:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
   18af2:	4620      	mov	r0, r4
   18af4:	4798      	blx	r3
   18af6:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   18afa:	f8c4 7100 	str.w	r7, [r4, #256]	; 0x100
   18afe:	3301      	adds	r3, #1
   18b00:	463e      	mov	r6, r7
   18b02:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
   18b06:	f7fe be31 	b.w	1776c <d_print_comp_inner+0xb38>
   18b0a:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
   18b0e:	29ff      	cmp	r1, #255	; 0xff
   18b10:	f000 8465 	beq.w	193de <d_print_comp_inner+0x27aa>
   18b14:	1c4a      	adds	r2, r1, #1
   18b16:	235b      	movs	r3, #91	; 0x5b
   18b18:	f8c4 2100 	str.w	r2, [r4, #256]	; 0x100
   18b1c:	5463      	strb	r3, [r4, r1]
   18b1e:	f884 3104 	strb.w	r3, [r4, #260]	; 0x104
   18b22:	4641      	mov	r1, r8
   18b24:	68aa      	ldr	r2, [r5, #8]
   18b26:	4620      	mov	r0, r4
   18b28:	f000 fe28 	bl	1977c <d_print_comp>
   18b2c:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
   18b30:	29ff      	cmp	r1, #255	; 0xff
   18b32:	f000 8312 	beq.w	1915a <d_print_comp_inner+0x2526>
   18b36:	235d      	movs	r3, #93	; 0x5d
   18b38:	1c4a      	adds	r2, r1, #1
   18b3a:	f8c4 2100 	str.w	r2, [r4, #256]	; 0x100
   18b3e:	5463      	strb	r3, [r4, r1]
   18b40:	f884 3104 	strb.w	r3, [r4, #260]	; 0x104
   18b44:	f7fe b944 	b.w	16dd0 <d_print_comp_inner+0x19c>
   18b48:	4631      	mov	r1, r6
   18b4a:	4620      	mov	r0, r4
   18b4c:	f7fb ffca 	bl	14ae4 <d_find_pack>
   18b50:	b928      	cbnz	r0, 18b5e <d_print_comp_inner+0x1f2a>
   18b52:	e007      	b.n	18b64 <d_print_comp_inner+0x1f30>
   18b54:	6843      	ldr	r3, [r0, #4]
   18b56:	b12b      	cbz	r3, 18b64 <d_print_comp_inner+0x1f30>
   18b58:	6880      	ldr	r0, [r0, #8]
   18b5a:	3501      	adds	r5, #1
   18b5c:	b110      	cbz	r0, 18b64 <d_print_comp_inner+0x1f30>
   18b5e:	7803      	ldrb	r3, [r0, #0]
   18b60:	2b2f      	cmp	r3, #47	; 0x2f
   18b62:	d0f7      	beq.n	18b54 <d_print_comp_inner+0x1f20>
   18b64:	462a      	mov	r2, r5
   18b66:	a804      	add	r0, sp, #16
   18b68:	49d4      	ldr	r1, [pc, #848]	; (18ebc <d_print_comp_inner+0x2288>)
   18b6a:	f005 fee7 	bl	1e93c <sprintf>
   18b6e:	a804      	add	r0, sp, #16
   18b70:	f006 f886 	bl	1ec80 <strlen>
   18b74:	2800      	cmp	r0, #0
   18b76:	f43e a92b 	beq.w	16dd0 <d_print_comp_inner+0x19c>
   18b7a:	ad04      	add	r5, sp, #16
   18b7c:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
   18b80:	182f      	adds	r7, r5, r0
   18b82:	f04f 0800 	mov.w	r8, #0
   18b86:	e009      	b.n	18b9c <d_print_comp_inner+0x1f68>
   18b88:	460b      	mov	r3, r1
   18b8a:	3101      	adds	r1, #1
   18b8c:	42bd      	cmp	r5, r7
   18b8e:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
   18b92:	54e6      	strb	r6, [r4, r3]
   18b94:	f884 6104 	strb.w	r6, [r4, #260]	; 0x104
   18b98:	f43e a91a 	beq.w	16dd0 <d_print_comp_inner+0x19c>
   18b9c:	29ff      	cmp	r1, #255	; 0xff
   18b9e:	f815 6b01 	ldrb.w	r6, [r5], #1
   18ba2:	d1f1      	bne.n	18b88 <d_print_comp_inner+0x1f54>
   18ba4:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   18ba8:	f884 80ff 	strb.w	r8, [r4, #255]	; 0xff
   18bac:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
   18bb0:	4620      	mov	r0, r4
   18bb2:	4798      	blx	r3
   18bb4:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   18bb8:	3301      	adds	r3, #1
   18bba:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
   18bbe:	2101      	movs	r1, #1
   18bc0:	2300      	movs	r3, #0
   18bc2:	e7e3      	b.n	18b8c <d_print_comp_inner+0x1f58>
   18bc4:	686a      	ldr	r2, [r5, #4]
   18bc6:	4641      	mov	r1, r8
   18bc8:	4620      	mov	r0, r4
   18bca:	f000 fdd7 	bl	1977c <d_print_comp>
   18bce:	f7fe b8ff 	b.w	16dd0 <d_print_comp_inner+0x19c>
   18bd2:	29ff      	cmp	r1, #255	; 0xff
   18bd4:	f000 83d2 	beq.w	1937c <d_print_comp_inner+0x2748>
   18bd8:	232d      	movs	r3, #45	; 0x2d
   18bda:	1c4a      	adds	r2, r1, #1
   18bdc:	f8c4 2100 	str.w	r2, [r4, #256]	; 0x100
   18be0:	5463      	strb	r3, [r4, r1]
   18be2:	f884 3104 	strb.w	r3, [r4, #260]	; 0x104
   18be6:	f7ff b90e 	b.w	17e06 <d_print_comp_inner+0x11d2>
   18bea:	2500      	movs	r5, #0
   18bec:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   18bf0:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
   18bf4:	f884 50ff 	strb.w	r5, [r4, #255]	; 0xff
   18bf8:	4620      	mov	r0, r4
   18bfa:	4798      	blx	r3
   18bfc:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   18c00:	3301      	adds	r3, #1
   18c02:	4629      	mov	r1, r5
   18c04:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
   18c08:	2201      	movs	r2, #1
   18c0a:	f7ff bbeb 	b.w	183e4 <d_print_comp_inner+0x17b0>
   18c0e:	2500      	movs	r5, #0
   18c10:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   18c14:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
   18c18:	f884 50ff 	strb.w	r5, [r4, #255]	; 0xff
   18c1c:	4620      	mov	r0, r4
   18c1e:	4798      	blx	r3
   18c20:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   18c24:	3301      	adds	r3, #1
   18c26:	4629      	mov	r1, r5
   18c28:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
   18c2c:	2201      	movs	r2, #1
   18c2e:	f7ff ba8f 	b.w	18150 <d_print_comp_inner+0x151c>
   18c32:	2600      	movs	r6, #0
   18c34:	f8d0 3108 	ldr.w	r3, [r0, #264]	; 0x108
   18c38:	f880 60ff 	strb.w	r6, [r0, #255]	; 0xff
   18c3c:	f8d0 210c 	ldr.w	r2, [r0, #268]	; 0x10c
   18c40:	4798      	blx	r3
   18c42:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   18c46:	f8c4 6100 	str.w	r6, [r4, #256]	; 0x100
   18c4a:	3301      	adds	r3, #1
   18c4c:	4631      	mov	r1, r6
   18c4e:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
   18c52:	f7fe bd43 	b.w	176dc <d_print_comp_inner+0xaa8>
   18c56:	2600      	movs	r6, #0
   18c58:	f8d0 3108 	ldr.w	r3, [r0, #264]	; 0x108
   18c5c:	f8d0 210c 	ldr.w	r2, [r0, #268]	; 0x10c
   18c60:	f880 60ff 	strb.w	r6, [r0, #255]	; 0xff
   18c64:	4798      	blx	r3
   18c66:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   18c6a:	3301      	adds	r3, #1
   18c6c:	4631      	mov	r1, r6
   18c6e:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
   18c72:	2201      	movs	r2, #1
   18c74:	f7fe bb74 	b.w	17360 <d_print_comp_inner+0x72c>
   18c78:	2500      	movs	r5, #0
   18c7a:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   18c7e:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
   18c82:	f884 50ff 	strb.w	r5, [r4, #255]	; 0xff
   18c86:	4620      	mov	r0, r4
   18c88:	4798      	blx	r3
   18c8a:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   18c8e:	3301      	adds	r3, #1
   18c90:	4629      	mov	r1, r5
   18c92:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
   18c96:	2201      	movs	r2, #1
   18c98:	f7ff bae4 	b.w	18264 <d_print_comp_inner+0x1630>
   18c9c:	220d      	movs	r2, #13
   18c9e:	4988      	ldr	r1, [pc, #544]	; (18ec0 <d_print_comp_inner+0x228c>)
   18ca0:	4620      	mov	r0, r4
   18ca2:	f7fb fcf3 	bl	1468c <d_append_buffer>
   18ca6:	68a9      	ldr	r1, [r5, #8]
   18ca8:	4620      	mov	r0, r4
   18caa:	3101      	adds	r1, #1
   18cac:	f7fb ff9e 	bl	14bec <d_append_num>
   18cb0:	2203      	movs	r2, #3
   18cb2:	4984      	ldr	r1, [pc, #528]	; (18ec4 <d_print_comp_inner+0x2290>)
   18cb4:	4620      	mov	r0, r4
   18cb6:	f7fb fce9 	bl	1468c <d_append_buffer>
   18cba:	686d      	ldr	r5, [r5, #4]
   18cbc:	f7fe bc22 	b.w	17504 <d_print_comp_inner+0x8d0>
   18cc0:	2500      	movs	r5, #0
   18cc2:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   18cc6:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
   18cca:	f884 50ff 	strb.w	r5, [r4, #255]	; 0xff
   18cce:	4620      	mov	r0, r4
   18cd0:	4798      	blx	r3
   18cd2:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   18cd6:	3301      	adds	r3, #1
   18cd8:	4629      	mov	r1, r5
   18cda:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
   18cde:	2201      	movs	r2, #1
   18ce0:	f7fe be08 	b.w	178f4 <d_print_comp_inner+0xcc0>
   18ce4:	2301      	movs	r3, #1
   18ce6:	f8c4 3118 	str.w	r3, [r4, #280]	; 0x118
   18cea:	f7fe b871 	b.w	16dd0 <d_print_comp_inner+0x19c>
   18cee:	2500      	movs	r5, #0
   18cf0:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   18cf4:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
   18cf8:	f884 50ff 	strb.w	r5, [r4, #255]	; 0xff
   18cfc:	4620      	mov	r0, r4
   18cfe:	4798      	blx	r3
   18d00:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   18d04:	3301      	adds	r3, #1
   18d06:	4629      	mov	r1, r5
   18d08:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
   18d0c:	2201      	movs	r2, #1
   18d0e:	f7ff ba8f 	b.w	18230 <d_print_comp_inner+0x15fc>
   18d12:	2500      	movs	r5, #0
   18d14:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   18d18:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
   18d1c:	f884 50ff 	strb.w	r5, [r4, #255]	; 0xff
   18d20:	4620      	mov	r0, r4
   18d22:	4798      	blx	r3
   18d24:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   18d28:	3301      	adds	r3, #1
   18d2a:	4629      	mov	r1, r5
   18d2c:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
   18d30:	2201      	movs	r2, #1
   18d32:	f7ff bbc5 	b.w	184c0 <d_print_comp_inner+0x188c>
   18d36:	a914      	add	r1, sp, #80	; 0x50
   18d38:	f8d4 0114 	ldr.w	r0, [r4, #276]	; 0x114
   18d3c:	f841 0d40 	str.w	r0, [r1, #-64]!
   18d40:	f028 0860 	bic.w	r8, r8, #96	; 0x60
   18d44:	f8d4 6110 	ldr.w	r6, [r4, #272]	; 0x110
   18d48:	f8c4 1114 	str.w	r1, [r4, #276]	; 0x114
   18d4c:	4620      	mov	r0, r4
   18d4e:	4641      	mov	r1, r8
   18d50:	9306      	str	r3, [sp, #24]
   18d52:	9607      	str	r6, [sp, #28]
   18d54:	9505      	str	r5, [sp, #20]
   18d56:	f000 fd11 	bl	1977c <d_print_comp>
   18d5a:	9e06      	ldr	r6, [sp, #24]
   18d5c:	9b04      	ldr	r3, [sp, #16]
   18d5e:	f8c4 3114 	str.w	r3, [r4, #276]	; 0x114
   18d62:	2e00      	cmp	r6, #0
   18d64:	f47e a834 	bne.w	16dd0 <d_print_comp_inner+0x19c>
   18d68:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
   18d6c:	29ff      	cmp	r1, #255	; 0xff
   18d6e:	f000 8409 	beq.w	19584 <d_print_comp_inner+0x2950>
   18d72:	2320      	movs	r3, #32
   18d74:	1c4a      	adds	r2, r1, #1
   18d76:	f8c4 2100 	str.w	r2, [r4, #256]	; 0x100
   18d7a:	5463      	strb	r3, [r4, r1]
   18d7c:	f884 3104 	strb.w	r3, [r4, #260]	; 0x104
   18d80:	f7fe be0b 	b.w	1799a <d_print_comp_inner+0xd66>
   18d84:	f8d4 3120 	ldr.w	r3, [r4, #288]	; 0x120
   18d88:	2b00      	cmp	r3, #0
   18d8a:	f6fe abff 	blt.w	1758c <d_print_comp_inner+0x958>
   18d8e:	2b00      	cmp	r3, #0
   18d90:	f000 829d 	beq.w	192ce <d_print_comp_inner+0x269a>
   18d94:	6880      	ldr	r0, [r0, #8]
   18d96:	3b01      	subs	r3, #1
   18d98:	2800      	cmp	r0, #0
   18d9a:	f43e a82d 	beq.w	16df8 <d_print_comp_inner+0x1c4>
   18d9e:	7802      	ldrb	r2, [r0, #0]
   18da0:	2a2f      	cmp	r2, #47	; 0x2f
   18da2:	d0f4      	beq.n	18d8e <d_print_comp_inner+0x215a>
   18da4:	f7fe b828 	b.w	16df8 <d_print_comp_inner+0x1c4>
   18da8:	f8d0 e130 	ldr.w	lr, [r0, #304]	; 0x130
   18dac:	f8d0 212c 	ldr.w	r2, [r0, #300]	; 0x12c
   18db0:	f1be 0f00 	cmp.w	lr, #0
   18db4:	dd14      	ble.n	18de0 <d_print_comp_inner+0x21ac>
   18db6:	6813      	ldr	r3, [r2, #0]
   18db8:	4299      	cmp	r1, r3
   18dba:	f000 83f5 	beq.w	195a8 <d_print_comp_inner+0x2974>
   18dbe:	f102 0008 	add.w	r0, r2, #8
   18dc2:	463b      	mov	r3, r7
   18dc4:	46a4      	mov	ip, r4
   18dc6:	e004      	b.n	18dd2 <d_print_comp_inner+0x219e>
   18dc8:	f852 4033 	ldr.w	r4, [r2, r3, lsl #3]
   18dcc:	42a1      	cmp	r1, r4
   18dce:	f000 81d4 	beq.w	1917a <d_print_comp_inner+0x2546>
   18dd2:	3301      	adds	r3, #1
   18dd4:	459e      	cmp	lr, r3
   18dd6:	4681      	mov	r9, r0
   18dd8:	f100 0008 	add.w	r0, r0, #8
   18ddc:	d1f4      	bne.n	18dc8 <d_print_comp_inner+0x2194>
   18dde:	4664      	mov	r4, ip
   18de0:	f8d4 3134 	ldr.w	r3, [r4, #308]	; 0x134
   18de4:	459e      	cmp	lr, r3
   18de6:	f280 84b9 	bge.w	1975c <d_print_comp_inner+0x2b28>
   18dea:	f10e 0301 	add.w	r3, lr, #1
   18dee:	eb02 00ce 	add.w	r0, r2, lr, lsl #3
   18df2:	f8c4 3130 	str.w	r3, [r4, #304]	; 0x130
   18df6:	f842 103e 	str.w	r1, [r2, lr, lsl #3]
   18dfa:	f8d4 2110 	ldr.w	r2, [r4, #272]	; 0x110
   18dfe:	3004      	adds	r0, #4
   18e00:	468e      	mov	lr, r1
   18e02:	2a00      	cmp	r2, #0
   18e04:	f000 848d 	beq.w	19722 <d_print_comp_inner+0x2aee>
   18e08:	f8d4 313c 	ldr.w	r3, [r4, #316]	; 0x13c
   18e0c:	f8d4 1140 	ldr.w	r1, [r4, #320]	; 0x140
   18e10:	428b      	cmp	r3, r1
   18e12:	f103 0c01 	add.w	ip, r3, #1
   18e16:	f280 84a1 	bge.w	1975c <d_print_comp_inner+0x2b28>
   18e1a:	f8d4 1138 	ldr.w	r1, [r4, #312]	; 0x138
   18e1e:	f8c4 c13c 	str.w	ip, [r4, #316]	; 0x13c
   18e22:	eb01 03c3 	add.w	r3, r1, r3, lsl #3
   18e26:	6851      	ldr	r1, [r2, #4]
   18e28:	6059      	str	r1, [r3, #4]
   18e2a:	6003      	str	r3, [r0, #0]
   18e2c:	6812      	ldr	r2, [r2, #0]
   18e2e:	4618      	mov	r0, r3
   18e30:	e7e7      	b.n	18e02 <d_print_comp_inner+0x21ce>
   18e32:	2500      	movs	r5, #0
   18e34:	4619      	mov	r1, r3
   18e36:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
   18e3a:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   18e3e:	f884 50ff 	strb.w	r5, [r4, #255]	; 0xff
   18e42:	4620      	mov	r0, r4
   18e44:	4798      	blx	r3
   18e46:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   18e4a:	1c5a      	adds	r2, r3, #1
   18e4c:	f8c4 2124 	str.w	r2, [r4, #292]	; 0x124
   18e50:	462b      	mov	r3, r5
   18e52:	2201      	movs	r2, #1
   18e54:	f7fe bd3d 	b.w	178d2 <d_print_comp_inner+0xc9e>
   18e58:	2e00      	cmp	r6, #0
   18e5a:	f000 844d 	beq.w	196f8 <d_print_comp_inner+0x2ac4>
   18e5e:	f1ba 0f2f 	cmp.w	sl, #47	; 0x2f
   18e62:	f040 8488 	bne.w	19776 <d_print_comp_inner+0x2b42>
   18e66:	6873      	ldr	r3, [r6, #4]
   18e68:	b373      	cbz	r3, 18ec8 <d_print_comp_inner+0x2294>
   18e6a:	4607      	mov	r7, r0
   18e6c:	e007      	b.n	18e7e <d_print_comp_inner+0x224a>
   18e6e:	3701      	adds	r7, #1
   18e70:	68b6      	ldr	r6, [r6, #8]
   18e72:	b356      	cbz	r6, 18eca <d_print_comp_inner+0x2296>
   18e74:	7833      	ldrb	r3, [r6, #0]
   18e76:	2b2f      	cmp	r3, #47	; 0x2f
   18e78:	d127      	bne.n	18eca <d_print_comp_inner+0x2296>
   18e7a:	6873      	ldr	r3, [r6, #4]
   18e7c:	b32b      	cbz	r3, 18eca <d_print_comp_inner+0x2296>
   18e7e:	781a      	ldrb	r2, [r3, #0]
   18e80:	2a4a      	cmp	r2, #74	; 0x4a
   18e82:	d1f4      	bne.n	18e6e <d_print_comp_inner+0x223a>
   18e84:	6859      	ldr	r1, [r3, #4]
   18e86:	4620      	mov	r0, r4
   18e88:	f7fb fe2c 	bl	14ae4 <d_find_pack>
   18e8c:	b198      	cbz	r0, 18eb6 <d_print_comp_inner+0x2282>
   18e8e:	7803      	ldrb	r3, [r0, #0]
   18e90:	2b2f      	cmp	r3, #47	; 0x2f
   18e92:	f040 846c 	bne.w	1976e <d_print_comp_inner+0x2b3a>
   18e96:	6843      	ldr	r3, [r0, #4]
   18e98:	2b00      	cmp	r3, #0
   18e9a:	f000 8464 	beq.w	19766 <d_print_comp_inner+0x2b32>
   18e9e:	4603      	mov	r3, r0
   18ea0:	2000      	movs	r0, #0
   18ea2:	e004      	b.n	18eae <d_print_comp_inner+0x227a>
   18ea4:	781a      	ldrb	r2, [r3, #0]
   18ea6:	2a2f      	cmp	r2, #47	; 0x2f
   18ea8:	d105      	bne.n	18eb6 <d_print_comp_inner+0x2282>
   18eaa:	685a      	ldr	r2, [r3, #4]
   18eac:	b11a      	cbz	r2, 18eb6 <d_print_comp_inner+0x2282>
   18eae:	689b      	ldr	r3, [r3, #8]
   18eb0:	3001      	adds	r0, #1
   18eb2:	2b00      	cmp	r3, #0
   18eb4:	d1f6      	bne.n	18ea4 <d_print_comp_inner+0x2270>
   18eb6:	4407      	add	r7, r0
   18eb8:	e7da      	b.n	18e70 <d_print_comp_inner+0x223c>
   18eba:	bf00      	nop
   18ebc:	00024314 	.word	0x00024314
   18ec0:	00024368 	.word	0x00024368
   18ec4:	00024378 	.word	0x00024378
   18ec8:	461f      	mov	r7, r3
   18eca:	4639      	mov	r1, r7
   18ecc:	4620      	mov	r0, r4
   18ece:	f7fb fe8d 	bl	14bec <d_append_num>
   18ed2:	f7fd bf7d 	b.w	16dd0 <d_print_comp_inner+0x19c>
   18ed6:	2500      	movs	r5, #0
   18ed8:	4619      	mov	r1, r3
   18eda:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
   18ede:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   18ee2:	f884 50ff 	strb.w	r5, [r4, #255]	; 0xff
   18ee6:	4620      	mov	r0, r4
   18ee8:	4798      	blx	r3
   18eea:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   18eee:	1c5a      	adds	r2, r3, #1
   18ef0:	f8c4 2124 	str.w	r2, [r4, #292]	; 0x124
   18ef4:	462b      	mov	r3, r5
   18ef6:	2101      	movs	r1, #1
   18ef8:	f7fe bb8e 	b.w	17618 <d_print_comp_inner+0x9e4>
   18efc:	2600      	movs	r6, #0
   18efe:	4619      	mov	r1, r3
   18f00:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
   18f04:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   18f08:	f884 60ff 	strb.w	r6, [r4, #255]	; 0xff
   18f0c:	4620      	mov	r0, r4
   18f0e:	4798      	blx	r3
   18f10:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   18f14:	1c5a      	adds	r2, r3, #1
   18f16:	f8c4 2124 	str.w	r2, [r4, #292]	; 0x124
   18f1a:	4633      	mov	r3, r6
   18f1c:	2101      	movs	r1, #1
   18f1e:	f7fe bb65 	b.w	175ec <d_print_comp_inner+0x9b8>
   18f22:	2200      	movs	r2, #0
   18f24:	4619      	mov	r1, r3
   18f26:	f884 20ff 	strb.w	r2, [r4, #255]	; 0xff
   18f2a:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   18f2e:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
   18f32:	4620      	mov	r0, r4
   18f34:	4798      	blx	r3
   18f36:	2329      	movs	r3, #41	; 0x29
   18f38:	7023      	strb	r3, [r4, #0]
   18f3a:	f884 3104 	strb.w	r3, [r4, #260]	; 0x104
   18f3e:	782a      	ldrb	r2, [r5, #0]
   18f40:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   18f44:	2101      	movs	r1, #1
   18f46:	3301      	adds	r3, #1
   18f48:	2a3d      	cmp	r2, #61	; 0x3d
   18f4a:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
   18f4e:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
   18f52:	f47e af58 	bne.w	17e06 <d_print_comp_inner+0x11d2>
   18f56:	e63f      	b.n	18bd8 <d_print_comp_inner+0x1fa4>
   18f58:	2700      	movs	r7, #0
   18f5a:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   18f5e:	f884 70ff 	strb.w	r7, [r4, #255]	; 0xff
   18f62:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
   18f66:	4620      	mov	r0, r4
   18f68:	4798      	blx	r3
   18f6a:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   18f6e:	f8c4 7100 	str.w	r7, [r4, #256]	; 0x100
   18f72:	3301      	adds	r3, #1
   18f74:	4639      	mov	r1, r7
   18f76:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
   18f7a:	f7fe bf28 	b.w	17dce <d_print_comp_inner+0x119a>
   18f7e:	2500      	movs	r5, #0
   18f80:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   18f84:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
   18f88:	f884 50ff 	strb.w	r5, [r4, #255]	; 0xff
   18f8c:	4620      	mov	r0, r4
   18f8e:	4798      	blx	r3
   18f90:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   18f94:	3301      	adds	r3, #1
   18f96:	4629      	mov	r1, r5
   18f98:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
   18f9c:	2201      	movs	r2, #1
   18f9e:	f7ff bb12 	b.w	185c6 <d_print_comp_inner+0x1992>
   18fa2:	781b      	ldrb	r3, [r3, #0]
   18fa4:	f1a3 0163 	sub.w	r1, r3, #99	; 0x63
   18fa8:	2901      	cmp	r1, #1
   18faa:	d903      	bls.n	18fb4 <d_print_comp_inner+0x2380>
   18fac:	3b72      	subs	r3, #114	; 0x72
   18fae:	2b01      	cmp	r3, #1
   18fb0:	f63d aead 	bhi.w	16d0e <d_print_comp_inner+0xda>
   18fb4:	4641      	mov	r1, r8
   18fb6:	4620      	mov	r0, r4
   18fb8:	f001 f9c8 	bl	1a34c <d_print_expr_op>
   18fbc:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
   18fc0:	29ff      	cmp	r1, #255	; 0xff
   18fc2:	f000 8271 	beq.w	194a8 <d_print_comp_inner+0x2874>
   18fc6:	1c4a      	adds	r2, r1, #1
   18fc8:	233c      	movs	r3, #60	; 0x3c
   18fca:	f8c4 2100 	str.w	r2, [r4, #256]	; 0x100
   18fce:	5463      	strb	r3, [r4, r1]
   18fd0:	f884 3104 	strb.w	r3, [r4, #260]	; 0x104
   18fd4:	68ab      	ldr	r3, [r5, #8]
   18fd6:	4641      	mov	r1, r8
   18fd8:	685a      	ldr	r2, [r3, #4]
   18fda:	4620      	mov	r0, r4
   18fdc:	f000 fbce 	bl	1977c <d_print_comp>
   18fe0:	2202      	movs	r2, #2
   18fe2:	49d5      	ldr	r1, [pc, #852]	; (19338 <d_print_comp_inner+0x2704>)
   18fe4:	4620      	mov	r0, r4
   18fe6:	f7fb fb51 	bl	1468c <d_append_buffer>
   18fea:	68ab      	ldr	r3, [r5, #8]
   18fec:	4641      	mov	r1, r8
   18fee:	689a      	ldr	r2, [r3, #8]
   18ff0:	4620      	mov	r0, r4
   18ff2:	f000 fbc3 	bl	1977c <d_print_comp>
   18ff6:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
   18ffa:	29ff      	cmp	r1, #255	; 0xff
   18ffc:	f000 81df 	beq.w	193be <d_print_comp_inner+0x278a>
   19000:	2329      	movs	r3, #41	; 0x29
   19002:	1c4a      	adds	r2, r1, #1
   19004:	f8c4 2100 	str.w	r2, [r4, #256]	; 0x100
   19008:	5463      	strb	r3, [r4, r1]
   1900a:	f884 3104 	strb.w	r3, [r4, #260]	; 0x104
   1900e:	f7fd bedf 	b.w	16dd0 <d_print_comp_inner+0x19c>
   19012:	4632      	mov	r2, r6
   19014:	4641      	mov	r1, r8
   19016:	4620      	mov	r0, r4
   19018:	f000 fbb0 	bl	1977c <d_print_comp>
   1901c:	f7fd bed8 	b.w	16dd0 <d_print_comp_inner+0x19c>
   19020:	2600      	movs	r6, #0
   19022:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   19026:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
   1902a:	f884 60ff 	strb.w	r6, [r4, #255]	; 0xff
   1902e:	4620      	mov	r0, r4
   19030:	4798      	blx	r3
   19032:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   19036:	3301      	adds	r3, #1
   19038:	4631      	mov	r1, r6
   1903a:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
   1903e:	2201      	movs	r2, #1
   19040:	f7fe ba55 	b.w	174ee <d_print_comp_inner+0x8ba>
   19044:	49bd      	ldr	r1, [pc, #756]	; (1933c <d_print_comp_inner+0x2708>)
   19046:	6870      	ldr	r0, [r6, #4]
   19048:	f005 fe88 	bl	1ed5c <strncmp>
   1904c:	2800      	cmp	r0, #0
   1904e:	f47e aabd 	bne.w	175cc <d_print_comp_inner+0x998>
   19052:	68aa      	ldr	r2, [r5, #8]
   19054:	4641      	mov	r1, r8
   19056:	4620      	mov	r0, r4
   19058:	f000 fb90 	bl	1977c <d_print_comp>
   1905c:	2202      	movs	r2, #2
   1905e:	49b8      	ldr	r1, [pc, #736]	; (19340 <d_print_comp_inner+0x270c>)
   19060:	4620      	mov	r0, r4
   19062:	f7fb fb13 	bl	1468c <d_append_buffer>
   19066:	f7fe badd 	b.w	17624 <d_print_comp_inner+0x9f0>
   1906a:	68aa      	ldr	r2, [r5, #8]
   1906c:	7817      	ldrb	r7, [r2, #0]
   1906e:	2f00      	cmp	r7, #0
   19070:	f47e aea8 	bne.w	17dc4 <d_print_comp_inner+0x1190>
   19074:	2b3d      	cmp	r3, #61	; 0x3d
   19076:	f000 82ef 	beq.w	19658 <d_print_comp_inner+0x2a24>
   1907a:	68aa      	ldr	r2, [r5, #8]
   1907c:	4641      	mov	r1, r8
   1907e:	4620      	mov	r0, r4
   19080:	3e02      	subs	r6, #2
   19082:	f000 fb7b 	bl	1977c <d_print_comp>
   19086:	2e04      	cmp	r6, #4
   19088:	f63d aea2 	bhi.w	16dd0 <d_print_comp_inner+0x19c>
   1908c:	e8df f006 	tbb	[pc, r6]
   19090:	0a111826 	.word	0x0a111826
   19094:	03          	.byte	0x03
   19095:	00          	.byte	0x00
   19096:	4620      	mov	r0, r4
   19098:	2203      	movs	r2, #3
   1909a:	49aa      	ldr	r1, [pc, #680]	; (19344 <d_print_comp_inner+0x2710>)
   1909c:	f7fb faf6 	bl	1468c <d_append_buffer>
   190a0:	f7fd be96 	b.w	16dd0 <d_print_comp_inner+0x19c>
   190a4:	4620      	mov	r0, r4
   190a6:	2202      	movs	r2, #2
   190a8:	49a7      	ldr	r1, [pc, #668]	; (19348 <d_print_comp_inner+0x2714>)
   190aa:	f7fb faef 	bl	1468c <d_append_buffer>
   190ae:	f7fd be8f 	b.w	16dd0 <d_print_comp_inner+0x19c>
   190b2:	4620      	mov	r0, r4
   190b4:	2202      	movs	r2, #2
   190b6:	49a5      	ldr	r1, [pc, #660]	; (1934c <d_print_comp_inner+0x2718>)
   190b8:	f7fb fae8 	bl	1468c <d_append_buffer>
   190bc:	f7fd be88 	b.w	16dd0 <d_print_comp_inner+0x19c>
   190c0:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
   190c4:	29ff      	cmp	r1, #255	; 0xff
   190c6:	f000 831a 	beq.w	196fe <d_print_comp_inner+0x2aca>
   190ca:	236c      	movs	r3, #108	; 0x6c
   190cc:	1c4a      	adds	r2, r1, #1
   190ce:	f8c4 2100 	str.w	r2, [r4, #256]	; 0x100
   190d2:	5463      	strb	r3, [r4, r1]
   190d4:	f884 3104 	strb.w	r3, [r4, #260]	; 0x104
   190d8:	f7fd be7a 	b.w	16dd0 <d_print_comp_inner+0x19c>
   190dc:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
   190e0:	29ff      	cmp	r1, #255	; 0xff
   190e2:	f000 82db 	beq.w	1969c <d_print_comp_inner+0x2a68>
   190e6:	2375      	movs	r3, #117	; 0x75
   190e8:	1c4a      	adds	r2, r1, #1
   190ea:	f8c4 2100 	str.w	r2, [r4, #256]	; 0x100
   190ee:	5463      	strb	r3, [r4, r1]
   190f0:	f884 3104 	strb.w	r3, [r4, #260]	; 0x104
   190f4:	f7fd be6c 	b.w	16dd0 <d_print_comp_inner+0x19c>
   190f8:	2600      	movs	r6, #0
   190fa:	4619      	mov	r1, r3
   190fc:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
   19100:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   19104:	f884 60ff 	strb.w	r6, [r4, #255]	; 0xff
   19108:	4620      	mov	r0, r4
   1910a:	4798      	blx	r3
   1910c:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   19110:	1c5a      	adds	r2, r3, #1
   19112:	f8c4 2124 	str.w	r2, [r4, #292]	; 0x124
   19116:	4633      	mov	r3, r6
   19118:	2101      	movs	r1, #1
   1911a:	f7fe bd3c 	b.w	17b96 <d_print_comp_inner+0xf62>
   1911e:	f8c4 3114 	str.w	r3, [r4, #276]	; 0x114
   19122:	f7fe bf95 	b.w	18050 <d_print_comp_inner+0x141c>
   19126:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
   1912a:	29ff      	cmp	r1, #255	; 0xff
   1912c:	f000 8244 	beq.w	195b8 <d_print_comp_inner+0x2984>
   19130:	2320      	movs	r3, #32
   19132:	1c4a      	adds	r2, r1, #1
   19134:	f8c4 2100 	str.w	r2, [r4, #256]	; 0x100
   19138:	5463      	strb	r3, [r4, r1]
   1913a:	f884 3104 	strb.w	r3, [r4, #260]	; 0x104
   1913e:	e447      	b.n	189d0 <d_print_comp_inner+0x1d9c>
   19140:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
   19144:	29ff      	cmp	r1, #255	; 0xff
   19146:	f000 826e 	beq.w	19626 <d_print_comp_inner+0x29f2>
   1914a:	2320      	movs	r3, #32
   1914c:	1c4a      	adds	r2, r1, #1
   1914e:	f8c4 2100 	str.w	r2, [r4, #256]	; 0x100
   19152:	5463      	strb	r3, [r4, r1]
   19154:	f884 3104 	strb.w	r3, [r4, #260]	; 0x104
   19158:	e419      	b.n	1898e <d_print_comp_inner+0x1d5a>
   1915a:	2500      	movs	r5, #0
   1915c:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   19160:	f884 50ff 	strb.w	r5, [r4, #255]	; 0xff
   19164:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
   19168:	4620      	mov	r0, r4
   1916a:	4798      	blx	r3
   1916c:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   19170:	3301      	adds	r3, #1
   19172:	4629      	mov	r1, r5
   19174:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
   19178:	e4dd      	b.n	18b36 <d_print_comp_inner+0x1f02>
   1917a:	4664      	mov	r4, ip
   1917c:	f8d4 0128 	ldr.w	r0, [r4, #296]	; 0x128
   19180:	b1d8      	cbz	r0, 191ba <d_print_comp_inner+0x2586>
   19182:	6802      	ldr	r2, [r0, #0]
   19184:	4291      	cmp	r1, r2
   19186:	d00a      	beq.n	1919e <d_print_comp_inner+0x256a>
   19188:	4603      	mov	r3, r0
   1918a:	e004      	b.n	19196 <d_print_comp_inner+0x2562>
   1918c:	685b      	ldr	r3, [r3, #4]
   1918e:	b1a3      	cbz	r3, 191ba <d_print_comp_inner+0x2586>
   19190:	681a      	ldr	r2, [r3, #0]
   19192:	4291      	cmp	r1, r2
   19194:	d003      	beq.n	1919e <d_print_comp_inner+0x256a>
   19196:	4295      	cmp	r5, r2
   19198:	d1f8      	bne.n	1918c <d_print_comp_inner+0x2558>
   1919a:	4298      	cmp	r0, r3
   1919c:	d0f6      	beq.n	1918c <d_print_comp_inner+0x2558>
   1919e:	3104      	adds	r1, #4
   191a0:	4620      	mov	r0, r4
   191a2:	f7fb fc83 	bl	14aac <d_lookup_template_argument.isra.6>
   191a6:	2800      	cmp	r0, #0
   191a8:	f43d ae26 	beq.w	16df8 <d_print_comp_inner+0x1c4>
   191ac:	7803      	ldrb	r3, [r0, #0]
   191ae:	2b2f      	cmp	r3, #47	; 0x2f
   191b0:	f43d ae11 	beq.w	16dd6 <d_print_comp_inner+0x1a2>
   191b4:	4601      	mov	r1, r0
   191b6:	f7fe bc30 	b.w	17a1a <d_print_comp_inner+0xde6>
   191ba:	f8d9 3004 	ldr.w	r3, [r9, #4]
   191be:	f8d4 6110 	ldr.w	r6, [r4, #272]	; 0x110
   191c2:	f8c4 3110 	str.w	r3, [r4, #272]	; 0x110
   191c6:	3104      	adds	r1, #4
   191c8:	4620      	mov	r0, r4
   191ca:	f7fb fc6f 	bl	14aac <d_lookup_template_argument.isra.6>
   191ce:	2800      	cmp	r0, #0
   191d0:	f43d ae10 	beq.w	16df4 <d_print_comp_inner+0x1c0>
   191d4:	2701      	movs	r7, #1
   191d6:	e7e9      	b.n	191ac <d_print_comp_inner+0x2578>
   191d8:	2600      	movs	r6, #0
   191da:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   191de:	f884 60ff 	strb.w	r6, [r4, #255]	; 0xff
   191e2:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
   191e6:	4620      	mov	r0, r4
   191e8:	4798      	blx	r3
   191ea:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   191ee:	f8da 5004 	ldr.w	r5, [sl, #4]
   191f2:	3301      	adds	r3, #1
   191f4:	4631      	mov	r1, r6
   191f6:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
   191fa:	f7ff b85a 	b.w	182b2 <d_print_comp_inner+0x167e>
   191fe:	68aa      	ldr	r2, [r5, #8]
   19200:	4641      	mov	r1, r8
   19202:	4620      	mov	r0, r4
   19204:	f000 faba 	bl	1977c <d_print_comp>
   19208:	9b06      	ldr	r3, [sp, #24]
   1920a:	9a00      	ldr	r2, [sp, #0]
   1920c:	f8c4 2114 	str.w	r2, [r4, #276]	; 0x114
   19210:	2b00      	cmp	r3, #0
   19212:	f43e ac9d 	beq.w	17b50 <d_print_comp_inner+0xf1c>
   19216:	f7fd bddb 	b.w	16dd0 <d_print_comp_inner+0x19c>
   1921a:	255f      	movs	r5, #95	; 0x5f
   1921c:	f7ff ba10 	b.w	18640 <d_print_comp_inner+0x1a0c>
   19220:	2500      	movs	r5, #0
   19222:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   19226:	f884 50ff 	strb.w	r5, [r4, #255]	; 0xff
   1922a:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
   1922e:	4620      	mov	r0, r4
   19230:	4798      	blx	r3
   19232:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   19236:	3301      	adds	r3, #1
   19238:	4629      	mov	r1, r5
   1923a:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
   1923e:	f7ff bb82 	b.w	18946 <d_print_comp_inner+0x1d12>
   19242:	4648      	mov	r0, r9
   19244:	4942      	ldr	r1, [pc, #264]	; (19350 <d_print_comp_inner+0x271c>)
   19246:	f005 fbaf 	bl	1e9a8 <strcmp>
   1924a:	b120      	cbz	r0, 19256 <d_print_comp_inner+0x2622>
   1924c:	463a      	mov	r2, r7
   1924e:	4641      	mov	r1, r8
   19250:	4620      	mov	r0, r4
   19252:	f001 f87b 	bl	1a34c <d_print_expr_op>
   19256:	68ab      	ldr	r3, [r5, #8]
   19258:	4641      	mov	r1, r8
   1925a:	689a      	ldr	r2, [r3, #8]
   1925c:	4620      	mov	r0, r4
   1925e:	f001 f8b3 	bl	1a3c8 <d_print_subexpr>
   19262:	f7fd bd9d 	b.w	16da0 <d_print_comp_inner+0x16c>
   19266:	2600      	movs	r6, #0
   19268:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   1926c:	f884 60ff 	strb.w	r6, [r4, #255]	; 0xff
   19270:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
   19274:	4620      	mov	r0, r4
   19276:	4798      	blx	r3
   19278:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   1927c:	3301      	adds	r3, #1
   1927e:	4631      	mov	r1, r6
   19280:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
   19284:	f7ff bb88 	b.w	18998 <d_print_comp_inner+0x1d64>
   19288:	2500      	movs	r5, #0
   1928a:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   1928e:	f884 50ff 	strb.w	r5, [r4, #255]	; 0xff
   19292:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
   19296:	4620      	mov	r0, r4
   19298:	4798      	blx	r3
   1929a:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   1929e:	3301      	adds	r3, #1
   192a0:	4629      	mov	r1, r5
   192a2:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
   192a6:	f7fe bb59 	b.w	1795c <d_print_comp_inner+0xd28>
   192aa:	2500      	movs	r5, #0
   192ac:	f8d0 3108 	ldr.w	r3, [r0, #264]	; 0x108
   192b0:	f880 50ff 	strb.w	r5, [r0, #255]	; 0xff
   192b4:	f8d0 210c 	ldr.w	r2, [r0, #268]	; 0x10c
   192b8:	4798      	blx	r3
   192ba:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   192be:	f8c4 5100 	str.w	r5, [r4, #256]	; 0x100
   192c2:	3301      	adds	r3, #1
   192c4:	4629      	mov	r1, r5
   192c6:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
   192ca:	f7fe bb2b 	b.w	17924 <d_print_comp_inner+0xcf0>
   192ce:	6840      	ldr	r0, [r0, #4]
   192d0:	2800      	cmp	r0, #0
   192d2:	f43d ad91 	beq.w	16df8 <d_print_comp_inner+0x1c4>
   192d6:	f7fe b959 	b.w	1758c <d_print_comp_inner+0x958>
   192da:	f884 00ff 	strb.w	r0, [r4, #255]	; 0xff
   192de:	4619      	mov	r1, r3
   192e0:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
   192e4:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   192e8:	4620      	mov	r0, r4
   192ea:	4798      	blx	r3
   192ec:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   192f0:	1c5a      	adds	r2, r3, #1
   192f2:	f8c4 2124 	str.w	r2, [r4, #292]	; 0x124
   192f6:	462b      	mov	r3, r5
   192f8:	f7ff bb14 	b.w	18924 <d_print_comp_inner+0x1cf0>
   192fc:	6873      	ldr	r3, [r6, #4]
   192fe:	781a      	ldrb	r2, [r3, #0]
   19300:	2a01      	cmp	r2, #1
   19302:	f000 8153 	beq.w	195ac <d_print_comp_inner+0x2978>
   19306:	f896 a000 	ldrb.w	sl, [r6]
   1930a:	f7ff bae0 	b.w	188ce <d_print_comp_inner+0x1c9a>
   1930e:	2500      	movs	r5, #0
   19310:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   19314:	f884 50ff 	strb.w	r5, [r4, #255]	; 0xff
   19318:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
   1931c:	4620      	mov	r0, r4
   1931e:	4798      	blx	r3
   19320:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   19324:	3301      	adds	r3, #1
   19326:	4629      	mov	r1, r5
   19328:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
   1932c:	f7ff bb55 	b.w	189da <d_print_comp_inner+0x1da6>
   19330:	4654      	mov	r4, sl
   19332:	f7fe be8d 	b.w	18050 <d_print_comp_inner+0x141c>
   19336:	bf00      	nop
   19338:	00024514 	.word	0x00024514
   1933c:	0002437c 	.word	0x0002437c
   19340:	00024384 	.word	0x00024384
   19344:	00024530 	.word	0x00024530
   19348:	0002452c 	.word	0x0002452c
   1934c:	00024528 	.word	0x00024528
   19350:	0002431c 	.word	0x0002431c
   19354:	686a      	ldr	r2, [r5, #4]
   19356:	4641      	mov	r1, r8
   19358:	4620      	mov	r0, r4
   1935a:	f001 f835 	bl	1a3c8 <d_print_subexpr>
   1935e:	4620      	mov	r0, r4
   19360:	2203      	movs	r2, #3
   19362:	49e2      	ldr	r1, [pc, #904]	; (196ec <d_print_comp_inner+0x2ab8>)
   19364:	f7fb f992 	bl	1468c <d_append_buffer>
   19368:	f7fd bd32 	b.w	16dd0 <d_print_comp_inner+0x19c>
   1936c:	ab14      	add	r3, sp, #80	; 0x50
   1936e:	9603      	str	r6, [sp, #12]
   19370:	f843 cd48 	str.w	ip, [r3, #-72]!
   19374:	f8c4 3110 	str.w	r3, [r4, #272]	; 0x110
   19378:	f7fe b85a 	b.w	17430 <d_print_comp_inner+0x7fc>
   1937c:	2700      	movs	r7, #0
   1937e:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   19382:	f884 70ff 	strb.w	r7, [r4, #255]	; 0xff
   19386:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
   1938a:	4620      	mov	r0, r4
   1938c:	4798      	blx	r3
   1938e:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   19392:	3301      	adds	r3, #1
   19394:	4639      	mov	r1, r7
   19396:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
   1939a:	e41d      	b.n	18bd8 <d_print_comp_inner+0x1fa4>
   1939c:	2600      	movs	r6, #0
   1939e:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   193a2:	f884 60ff 	strb.w	r6, [r4, #255]	; 0xff
   193a6:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
   193aa:	4620      	mov	r0, r4
   193ac:	4798      	blx	r3
   193ae:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   193b2:	3301      	adds	r3, #1
   193b4:	4631      	mov	r1, r6
   193b6:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
   193ba:	f7ff bb8a 	b.w	18ad2 <d_print_comp_inner+0x1e9e>
   193be:	2500      	movs	r5, #0
   193c0:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   193c4:	f884 50ff 	strb.w	r5, [r4, #255]	; 0xff
   193c8:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
   193cc:	4620      	mov	r0, r4
   193ce:	4798      	blx	r3
   193d0:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   193d4:	3301      	adds	r3, #1
   193d6:	4629      	mov	r1, r5
   193d8:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
   193dc:	e610      	b.n	19000 <d_print_comp_inner+0x23cc>
   193de:	2600      	movs	r6, #0
   193e0:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   193e4:	f884 60ff 	strb.w	r6, [r4, #255]	; 0xff
   193e8:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
   193ec:	4620      	mov	r0, r4
   193ee:	4798      	blx	r3
   193f0:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   193f4:	3301      	adds	r3, #1
   193f6:	4631      	mov	r1, r6
   193f8:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
   193fc:	f7ff bb8a 	b.w	18b14 <d_print_comp_inner+0x1ee0>
   19400:	685a      	ldr	r2, [r3, #4]
   19402:	6891      	ldr	r1, [r2, #8]
   19404:	2901      	cmp	r1, #1
   19406:	f47d ac90 	bne.w	16d2a <d_print_comp_inner+0xf6>
   1940a:	6852      	ldr	r2, [r2, #4]
   1940c:	7812      	ldrb	r2, [r2, #0]
   1940e:	2a3e      	cmp	r2, #62	; 0x3e
   19410:	f47d ac8b 	bne.w	16d2a <d_print_comp_inner+0xf6>
   19414:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
   19418:	29ff      	cmp	r1, #255	; 0xff
   1941a:	d10f      	bne.n	1943c <d_print_comp_inner+0x2808>
   1941c:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   19420:	f884 60ff 	strb.w	r6, [r4, #255]	; 0xff
   19424:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
   19428:	4620      	mov	r0, r4
   1942a:	4798      	blx	r3
   1942c:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   19430:	f8c4 6100 	str.w	r6, [r4, #256]	; 0x100
   19434:	3301      	adds	r3, #1
   19436:	4631      	mov	r1, r6
   19438:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
   1943c:	2328      	movs	r3, #40	; 0x28
   1943e:	1c4a      	adds	r2, r1, #1
   19440:	f8c4 2100 	str.w	r2, [r4, #256]	; 0x100
   19444:	5463      	strb	r3, [r4, r1]
   19446:	f884 3104 	strb.w	r3, [r4, #260]	; 0x104
   1944a:	686b      	ldr	r3, [r5, #4]
   1944c:	f7fd bc6d 	b.w	16d2a <d_print_comp_inner+0xf6>
   19450:	2500      	movs	r5, #0
   19452:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   19456:	f884 50ff 	strb.w	r5, [r4, #255]	; 0xff
   1945a:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
   1945e:	4620      	mov	r0, r4
   19460:	4798      	blx	r3
   19462:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   19466:	3301      	adds	r3, #1
   19468:	4629      	mov	r1, r5
   1946a:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
   1946e:	f7ff bb0b 	b.w	18a88 <d_print_comp_inner+0x1e54>
   19472:	f8db b004 	ldr.w	fp, [fp, #4]
   19476:	f1bb 0f00 	cmp.w	fp, #0
   1947a:	f43e ade9 	beq.w	18050 <d_print_comp_inner+0x141c>
   1947e:	f7fd bfc3 	b.w	17408 <d_print_comp_inner+0x7d4>
   19482:	9b02      	ldr	r3, [sp, #8]
   19484:	f8c4 3110 	str.w	r3, [r4, #272]	; 0x110
   19488:	f7fd bfdb 	b.w	17442 <d_print_comp_inner+0x80e>
   1948c:	6893      	ldr	r3, [r2, #8]
   1948e:	781b      	ldrb	r3, [r3, #0]
   19490:	2b29      	cmp	r3, #41	; 0x29
   19492:	bf1c      	itt	ne
   19494:	2301      	movne	r3, #1
   19496:	f8c4 3118 	strne.w	r3, [r4, #280]	; 0x118
   1949a:	6852      	ldr	r2, [r2, #4]
   1949c:	4641      	mov	r1, r8
   1949e:	4620      	mov	r0, r4
   194a0:	f000 ff92 	bl	1a3c8 <d_print_subexpr>
   194a4:	f7fd bc52 	b.w	16d4c <d_print_comp_inner+0x118>
   194a8:	2600      	movs	r6, #0
   194aa:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   194ae:	f884 60ff 	strb.w	r6, [r4, #255]	; 0xff
   194b2:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
   194b6:	4620      	mov	r0, r4
   194b8:	4798      	blx	r3
   194ba:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   194be:	3301      	adds	r3, #1
   194c0:	4631      	mov	r1, r6
   194c2:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
   194c6:	e57e      	b.n	18fc6 <d_print_comp_inner+0x2392>
   194c8:	6872      	ldr	r2, [r6, #4]
   194ca:	4641      	mov	r1, r8
   194cc:	4620      	mov	r0, r4
   194ce:	f000 ff7b 	bl	1a3c8 <d_print_subexpr>
   194d2:	464a      	mov	r2, r9
   194d4:	4641      	mov	r1, r8
   194d6:	4620      	mov	r0, r4
   194d8:	f000 ff38 	bl	1a34c <d_print_expr_op>
   194dc:	f7fd bc78 	b.w	16dd0 <d_print_comp_inner+0x19c>
   194e0:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   194e4:	f884 50ff 	strb.w	r5, [r4, #255]	; 0xff
   194e8:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
   194ec:	4620      	mov	r0, r4
   194ee:	4798      	blx	r3
   194f0:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   194f4:	3301      	adds	r3, #1
   194f6:	4629      	mov	r1, r5
   194f8:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
   194fc:	f7fd bfad 	b.w	1745a <d_print_comp_inner+0x826>
   19500:	464a      	mov	r2, r9
   19502:	4641      	mov	r1, r8
   19504:	4620      	mov	r0, r4
   19506:	f000 ff5f 	bl	1a3c8 <d_print_subexpr>
   1950a:	4652      	mov	r2, sl
   1950c:	4641      	mov	r1, r8
   1950e:	4620      	mov	r0, r4
   19510:	f000 ff1c 	bl	1a34c <d_print_expr_op>
   19514:	463a      	mov	r2, r7
   19516:	4641      	mov	r1, r8
   19518:	4620      	mov	r0, r4
   1951a:	f000 ff55 	bl	1a3c8 <d_print_subexpr>
   1951e:	4620      	mov	r0, r4
   19520:	2203      	movs	r2, #3
   19522:	4973      	ldr	r1, [pc, #460]	; (196f0 <d_print_comp_inner+0x2abc>)
   19524:	f7fb f8b2 	bl	1468c <d_append_buffer>
   19528:	462a      	mov	r2, r5
   1952a:	4641      	mov	r1, r8
   1952c:	4620      	mov	r0, r4
   1952e:	f000 ff4b 	bl	1a3c8 <d_print_subexpr>
   19532:	f7fd bc4d 	b.w	16dd0 <d_print_comp_inner+0x19c>
   19536:	454f      	cmp	r7, r9
   19538:	f67f ae6f 	bls.w	1921a <d_print_comp_inner+0x25e6>
   1953c:	2d5f      	cmp	r5, #95	; 0x5f
   1953e:	f47f ae6c 	bne.w	1921a <d_print_comp_inner+0x25e6>
   19542:	28ff      	cmp	r0, #255	; 0xff
   19544:	f63f a87c 	bhi.w	18640 <d_print_comp_inner+0x1a0c>
   19548:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
   1954c:	29ff      	cmp	r1, #255	; 0xff
   1954e:	b2c5      	uxtb	r5, r0
   19550:	d10f      	bne.n	19572 <d_print_comp_inner+0x293e>
   19552:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   19556:	f884 80ff 	strb.w	r8, [r4, #255]	; 0xff
   1955a:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
   1955e:	4620      	mov	r0, r4
   19560:	4798      	blx	r3
   19562:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   19566:	f8c4 8100 	str.w	r8, [r4, #256]	; 0x100
   1956a:	3301      	adds	r3, #1
   1956c:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
   19570:	2100      	movs	r1, #0
   19572:	1c4b      	adds	r3, r1, #1
   19574:	f8c4 3100 	str.w	r3, [r4, #256]	; 0x100
   19578:	464e      	mov	r6, r9
   1957a:	5465      	strb	r5, [r4, r1]
   1957c:	f884 5104 	strb.w	r5, [r4, #260]	; 0x104
   19580:	f7ff b868 	b.w	18654 <d_print_comp_inner+0x1a20>
   19584:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   19588:	f884 60ff 	strb.w	r6, [r4, #255]	; 0xff
   1958c:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
   19590:	4620      	mov	r0, r4
   19592:	4798      	blx	r3
   19594:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   19598:	f8c4 6100 	str.w	r6, [r4, #256]	; 0x100
   1959c:	3301      	adds	r3, #1
   1959e:	4631      	mov	r1, r6
   195a0:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
   195a4:	f7ff bbe5 	b.w	18d72 <d_print_comp_inner+0x213e>
   195a8:	4691      	mov	r9, r2
   195aa:	e5e7      	b.n	1917c <d_print_comp_inner+0x2548>
   195ac:	68b2      	ldr	r2, [r6, #8]
   195ae:	7812      	ldrb	r2, [r2, #0]
   195b0:	2a29      	cmp	r2, #41	; 0x29
   195b2:	bf08      	it	eq
   195b4:	461e      	moveq	r6, r3
   195b6:	e6a6      	b.n	19306 <d_print_comp_inner+0x26d2>
   195b8:	2500      	movs	r5, #0
   195ba:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   195be:	f884 50ff 	strb.w	r5, [r4, #255]	; 0xff
   195c2:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
   195c6:	4620      	mov	r0, r4
   195c8:	4798      	blx	r3
   195ca:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   195ce:	f8c4 5100 	str.w	r5, [r4, #256]	; 0x100
   195d2:	3301      	adds	r3, #1
   195d4:	4629      	mov	r1, r5
   195d6:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
   195da:	e5a9      	b.n	19130 <d_print_comp_inner+0x24fc>
   195dc:	2600      	movs	r6, #0
   195de:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   195e2:	f884 60ff 	strb.w	r6, [r4, #255]	; 0xff
   195e6:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
   195ea:	4620      	mov	r0, r4
   195ec:	4798      	blx	r3
   195ee:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   195f2:	f8c4 6100 	str.w	r6, [r4, #256]	; 0x100
   195f6:	3301      	adds	r3, #1
   195f8:	4631      	mov	r1, r6
   195fa:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
   195fe:	f7fd bbc8 	b.w	16d92 <d_print_comp_inner+0x15e>
   19602:	f884 00ff 	strb.w	r0, [r4, #255]	; 0xff
   19606:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   1960a:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
   1960e:	4620      	mov	r0, r4
   19610:	4798      	blx	r3
   19612:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   19616:	f8c4 6100 	str.w	r6, [r4, #256]	; 0x100
   1961a:	3301      	adds	r3, #1
   1961c:	4631      	mov	r1, r6
   1961e:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
   19622:	f7fd bba4 	b.w	16d6e <d_print_comp_inner+0x13a>
   19626:	2600      	movs	r6, #0
   19628:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   1962c:	f884 60ff 	strb.w	r6, [r4, #255]	; 0xff
   19630:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
   19634:	4620      	mov	r0, r4
   19636:	4798      	blx	r3
   19638:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   1963c:	f8c4 6100 	str.w	r6, [r4, #256]	; 0x100
   19640:	3301      	adds	r3, #1
   19642:	4631      	mov	r1, r6
   19644:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
   19648:	e57f      	b.n	1914a <d_print_comp_inner+0x2516>
   1964a:	6841      	ldr	r1, [r0, #4]
   1964c:	2900      	cmp	r1, #0
   1964e:	f43d abd0 	beq.w	16df2 <d_print_comp_inner+0x1be>
   19652:	780b      	ldrb	r3, [r1, #0]
   19654:	f7fe b9e1 	b.w	17a1a <d_print_comp_inner+0xde6>
   19658:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
   1965c:	29ff      	cmp	r1, #255	; 0xff
   1965e:	d00d      	beq.n	1967c <d_print_comp_inner+0x2a48>
   19660:	232d      	movs	r3, #45	; 0x2d
   19662:	1c4a      	adds	r2, r1, #1
   19664:	f8c4 2100 	str.w	r2, [r4, #256]	; 0x100
   19668:	5463      	strb	r3, [r4, r1]
   1966a:	f884 3104 	strb.w	r3, [r4, #260]	; 0x104
   1966e:	e504      	b.n	1907a <d_print_comp_inner+0x2446>
   19670:	2205      	movs	r2, #5
   19672:	4920      	ldr	r1, [pc, #128]	; (196f4 <d_print_comp_inner+0x2ac0>)
   19674:	f7fb f80a 	bl	1468c <d_append_buffer>
   19678:	f7fd bbaa 	b.w	16dd0 <d_print_comp_inner+0x19c>
   1967c:	f8d0 3108 	ldr.w	r3, [r0, #264]	; 0x108
   19680:	f880 70ff 	strb.w	r7, [r0, #255]	; 0xff
   19684:	f8d0 210c 	ldr.w	r2, [r0, #268]	; 0x10c
   19688:	4798      	blx	r3
   1968a:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   1968e:	f8c4 7100 	str.w	r7, [r4, #256]	; 0x100
   19692:	3301      	adds	r3, #1
   19694:	4639      	mov	r1, r7
   19696:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
   1969a:	e7e1      	b.n	19660 <d_print_comp_inner+0x2a2c>
   1969c:	2500      	movs	r5, #0
   1969e:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   196a2:	f884 50ff 	strb.w	r5, [r4, #255]	; 0xff
   196a6:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
   196aa:	4620      	mov	r0, r4
   196ac:	4798      	blx	r3
   196ae:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   196b2:	f8c4 5100 	str.w	r5, [r4, #256]	; 0x100
   196b6:	3301      	adds	r3, #1
   196b8:	4629      	mov	r1, r5
   196ba:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
   196be:	e512      	b.n	190e6 <d_print_comp_inner+0x24b2>
   196c0:	2700      	movs	r7, #0
   196c2:	f7ff b913 	b.w	188ec <d_print_comp_inner+0x1cb8>
   196c6:	2500      	movs	r5, #0
   196c8:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   196cc:	f884 50ff 	strb.w	r5, [r4, #255]	; 0xff
   196d0:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
   196d4:	4620      	mov	r0, r4
   196d6:	4798      	blx	r3
   196d8:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   196dc:	f8c4 5100 	str.w	r5, [r4, #256]	; 0x100
   196e0:	3301      	adds	r3, #1
   196e2:	4629      	mov	r1, r5
   196e4:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
   196e8:	f7fd bb6b 	b.w	16dc2 <d_print_comp_inner+0x18e>
   196ec:	00022a90 	.word	0x00022a90
   196f0:	0002451c 	.word	0x0002451c
   196f4:	00024534 	.word	0x00024534
   196f8:	4637      	mov	r7, r6
   196fa:	f7ff bbe6 	b.w	18eca <d_print_comp_inner+0x2296>
   196fe:	2500      	movs	r5, #0
   19700:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   19704:	f884 50ff 	strb.w	r5, [r4, #255]	; 0xff
   19708:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
   1970c:	4620      	mov	r0, r4
   1970e:	4798      	blx	r3
   19710:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   19714:	f8c4 5100 	str.w	r5, [r4, #256]	; 0x100
   19718:	3301      	adds	r3, #1
   1971a:	4629      	mov	r1, r5
   1971c:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
   19720:	e4d3      	b.n	190ca <d_print_comp_inner+0x2496>
   19722:	4671      	mov	r1, lr
   19724:	6002      	str	r2, [r0, #0]
   19726:	3104      	adds	r1, #4
   19728:	4620      	mov	r0, r4
   1972a:	f7fb f9bf 	bl	14aac <d_lookup_template_argument.isra.6>
   1972e:	2800      	cmp	r0, #0
   19730:	f47f ad3c 	bne.w	191ac <d_print_comp_inner+0x2578>
   19734:	f7fd bb60 	b.w	16df8 <d_print_comp_inner+0x1c4>
   19738:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   1973c:	f884 60ff 	strb.w	r6, [r4, #255]	; 0xff
   19740:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
   19744:	4620      	mov	r0, r4
   19746:	4798      	blx	r3
   19748:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   1974c:	f8c4 6100 	str.w	r6, [r4, #256]	; 0x100
   19750:	3301      	adds	r3, #1
   19752:	4631      	mov	r1, r6
   19754:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
   19758:	f7fe bc02 	b.w	17f60 <d_print_comp_inner+0x132c>
   1975c:	2301      	movs	r3, #1
   1975e:	f8c4 3118 	str.w	r3, [r4, #280]	; 0x118
   19762:	f7fd bb35 	b.w	16dd0 <d_print_comp_inner+0x19c>
   19766:	4618      	mov	r0, r3
   19768:	4407      	add	r7, r0
   1976a:	f7ff bb81 	b.w	18e70 <d_print_comp_inner+0x223c>
   1976e:	2000      	movs	r0, #0
   19770:	4407      	add	r7, r0
   19772:	f7ff bb7d 	b.w	18e70 <d_print_comp_inner+0x223c>
   19776:	4607      	mov	r7, r0
   19778:	f7ff bba7 	b.w	18eca <d_print_comp_inner+0x2296>

0001977c <d_print_comp>:
   1977c:	b510      	push	{r4, lr}
   1977e:	f8d0 3128 	ldr.w	r3, [r0, #296]	; 0x128
   19782:	b082      	sub	sp, #8
   19784:	f8c0 d128 	str.w	sp, [r0, #296]	; 0x128
   19788:	4604      	mov	r4, r0
   1978a:	e88d 000c 	stmia.w	sp, {r2, r3}
   1978e:	f7fd fa51 	bl	16c34 <d_print_comp_inner>
   19792:	9b01      	ldr	r3, [sp, #4]
   19794:	f8c4 3128 	str.w	r3, [r4, #296]	; 0x128
   19798:	b002      	add	sp, #8
   1979a:	bd10      	pop	{r4, pc}

0001979c <d_print_mod>:
   1979c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   197a0:	7813      	ldrb	r3, [r2, #0]
   197a2:	3b03      	subs	r3, #3
   197a4:	b082      	sub	sp, #8
   197a6:	4615      	mov	r5, r2
   197a8:	4604      	mov	r4, r0
   197aa:	4688      	mov	r8, r1
   197ac:	2b49      	cmp	r3, #73	; 0x49
   197ae:	f200 8223 	bhi.w	19bf8 <d_print_mod+0x45c>
   197b2:	e8df f013 	tbh	[pc, r3, lsl #1]
   197b6:	01e7      	.short	0x01e7
   197b8:	02210221 	.word	0x02210221
   197bc:	02210221 	.word	0x02210221
   197c0:	02210221 	.word	0x02210221
   197c4:	02210221 	.word	0x02210221
   197c8:	02210221 	.word	0x02210221
   197cc:	02210221 	.word	0x02210221
   197d0:	02210221 	.word	0x02210221
   197d4:	02210221 	.word	0x02210221
   197d8:	02210221 	.word	0x02210221
   197dc:	02210221 	.word	0x02210221
   197e0:	01e90221 	.word	0x01e90221
   197e4:	01a80182 	.word	0x01a80182
   197e8:	018201e9 	.word	0x018201e9
   197ec:	01cd01a8 	.word	0x01cd01a8
   197f0:	006f01da 	.word	0x006f01da
   197f4:	009c008c 	.word	0x009c008c
   197f8:	00cf00ab 	.word	0x00cf00ab
   197fc:	022100f4 	.word	0x022100f4
   19800:	02210221 	.word	0x02210221
   19804:	01190221 	.word	0x01190221
   19808:	015c0221 	.word	0x015c0221
   1980c:	02210221 	.word	0x02210221
   19810:	02210221 	.word	0x02210221
   19814:	02210221 	.word	0x02210221
   19818:	02210221 	.word	0x02210221
   1981c:	02210221 	.word	0x02210221
   19820:	02210221 	.word	0x02210221
   19824:	02210221 	.word	0x02210221
   19828:	02210221 	.word	0x02210221
   1982c:	02210221 	.word	0x02210221
   19830:	02210221 	.word	0x02210221
   19834:	02210221 	.word	0x02210221
   19838:	02210221 	.word	0x02210221
   1983c:	02210221 	.word	0x02210221
   19840:	02210221 	.word	0x02210221
   19844:	02210221 	.word	0x02210221
   19848:	004a      	.short	0x004a
   1984a:	4dd3      	ldr	r5, [pc, #844]	; (19b98 <d_print_mod+0x3fc>)
   1984c:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
   19850:	f105 0711 	add.w	r7, r5, #17
   19854:	f04f 0800 	mov.w	r8, #0
   19858:	e008      	b.n	1986c <d_print_mod+0xd0>
   1985a:	460b      	mov	r3, r1
   1985c:	3101      	adds	r1, #1
   1985e:	42bd      	cmp	r5, r7
   19860:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
   19864:	54e6      	strb	r6, [r4, r3]
   19866:	f884 6104 	strb.w	r6, [r4, #260]	; 0x104
   1986a:	d02d      	beq.n	198c8 <d_print_mod+0x12c>
   1986c:	29ff      	cmp	r1, #255	; 0xff
   1986e:	f815 6f01 	ldrb.w	r6, [r5, #1]!
   19872:	d1f2      	bne.n	1985a <d_print_mod+0xbe>
   19874:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   19878:	f884 80ff 	strb.w	r8, [r4, #255]	; 0xff
   1987c:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
   19880:	4620      	mov	r0, r4
   19882:	4798      	blx	r3
   19884:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   19888:	3301      	adds	r3, #1
   1988a:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
   1988e:	2101      	movs	r1, #1
   19890:	2300      	movs	r3, #0
   19892:	e7e4      	b.n	1985e <d_print_mod+0xc2>
   19894:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
   19898:	29ff      	cmp	r1, #255	; 0xff
   1989a:	f000 81f7 	beq.w	19c8c <d_print_mod+0x4f0>
   1989e:	1c4a      	adds	r2, r1, #1
   198a0:	2320      	movs	r3, #32
   198a2:	f8c4 2100 	str.w	r2, [r4, #256]	; 0x100
   198a6:	5463      	strb	r3, [r4, r1]
   198a8:	f884 3104 	strb.w	r3, [r4, #260]	; 0x104
   198ac:	68aa      	ldr	r2, [r5, #8]
   198ae:	f8d4 3128 	ldr.w	r3, [r4, #296]	; 0x128
   198b2:	9200      	str	r2, [sp, #0]
   198b4:	4641      	mov	r1, r8
   198b6:	f8c4 d128 	str.w	sp, [r4, #296]	; 0x128
   198ba:	4620      	mov	r0, r4
   198bc:	9301      	str	r3, [sp, #4]
   198be:	f7fd f9b9 	bl	16c34 <d_print_comp_inner>
   198c2:	9b01      	ldr	r3, [sp, #4]
   198c4:	f8c4 3128 	str.w	r3, [r4, #296]	; 0x128
   198c8:	b002      	add	sp, #8
   198ca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   198ce:	f011 0504 	ands.w	r5, r1, #4
   198d2:	d1f9      	bne.n	198c8 <d_print_mod+0x12c>
   198d4:	f8d0 3100 	ldr.w	r3, [r0, #256]	; 0x100
   198d8:	2bff      	cmp	r3, #255	; 0xff
   198da:	f000 821c 	beq.w	19d16 <d_print_mod+0x57a>
   198de:	222a      	movs	r2, #42	; 0x2a
   198e0:	1c59      	adds	r1, r3, #1
   198e2:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
   198e6:	54e2      	strb	r2, [r4, r3]
   198e8:	f884 2104 	strb.w	r2, [r4, #260]	; 0x104
   198ec:	e7ec      	b.n	198c8 <d_print_mod+0x12c>
   198ee:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
   198f2:	29ff      	cmp	r1, #255	; 0xff
   198f4:	f000 81b9 	beq.w	19c6a <d_print_mod+0x4ce>
   198f8:	1c4a      	adds	r2, r1, #1
   198fa:	2326      	movs	r3, #38	; 0x26
   198fc:	f8c4 2100 	str.w	r2, [r4, #256]	; 0x100
   19900:	5463      	strb	r3, [r4, r1]
   19902:	f884 3104 	strb.w	r3, [r4, #260]	; 0x104
   19906:	b002      	add	sp, #8
   19908:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   1990c:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
   19910:	4da2      	ldr	r5, [pc, #648]	; (19b9c <d_print_mod+0x400>)
   19912:	f04f 0800 	mov.w	r8, #0
   19916:	1caf      	adds	r7, r5, #2
   19918:	e008      	b.n	1992c <d_print_mod+0x190>
   1991a:	460b      	mov	r3, r1
   1991c:	3101      	adds	r1, #1
   1991e:	42bd      	cmp	r5, r7
   19920:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
   19924:	54e6      	strb	r6, [r4, r3]
   19926:	f884 6104 	strb.w	r6, [r4, #260]	; 0x104
   1992a:	d0cd      	beq.n	198c8 <d_print_mod+0x12c>
   1992c:	29ff      	cmp	r1, #255	; 0xff
   1992e:	f815 6b01 	ldrb.w	r6, [r5], #1
   19932:	d1f2      	bne.n	1991a <d_print_mod+0x17e>
   19934:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   19938:	f884 80ff 	strb.w	r8, [r4, #255]	; 0xff
   1993c:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
   19940:	4620      	mov	r0, r4
   19942:	4798      	blx	r3
   19944:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   19948:	3301      	adds	r3, #1
   1994a:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
   1994e:	2101      	movs	r1, #1
   19950:	2300      	movs	r3, #0
   19952:	e7e4      	b.n	1991e <d_print_mod+0x182>
   19954:	4d92      	ldr	r5, [pc, #584]	; (19ba0 <d_print_mod+0x404>)
   19956:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
   1995a:	f105 0708 	add.w	r7, r5, #8
   1995e:	f04f 0800 	mov.w	r8, #0
   19962:	e008      	b.n	19976 <d_print_mod+0x1da>
   19964:	460b      	mov	r3, r1
   19966:	3101      	adds	r1, #1
   19968:	42bd      	cmp	r5, r7
   1996a:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
   1996e:	54e6      	strb	r6, [r4, r3]
   19970:	f884 6104 	strb.w	r6, [r4, #260]	; 0x104
   19974:	d0a8      	beq.n	198c8 <d_print_mod+0x12c>
   19976:	29ff      	cmp	r1, #255	; 0xff
   19978:	f815 6f01 	ldrb.w	r6, [r5, #1]!
   1997c:	d1f2      	bne.n	19964 <d_print_mod+0x1c8>
   1997e:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   19982:	f884 80ff 	strb.w	r8, [r4, #255]	; 0xff
   19986:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
   1998a:	4620      	mov	r0, r4
   1998c:	4798      	blx	r3
   1998e:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   19992:	3301      	adds	r3, #1
   19994:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
   19998:	2101      	movs	r1, #1
   1999a:	2300      	movs	r3, #0
   1999c:	e7e4      	b.n	19968 <d_print_mod+0x1cc>
   1999e:	4d81      	ldr	r5, [pc, #516]	; (19ba4 <d_print_mod+0x408>)
   199a0:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
   199a4:	f105 070a 	add.w	r7, r5, #10
   199a8:	f04f 0800 	mov.w	r8, #0
   199ac:	e008      	b.n	199c0 <d_print_mod+0x224>
   199ae:	460b      	mov	r3, r1
   199b0:	3101      	adds	r1, #1
   199b2:	42bd      	cmp	r5, r7
   199b4:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
   199b8:	54e6      	strb	r6, [r4, r3]
   199ba:	f884 6104 	strb.w	r6, [r4, #260]	; 0x104
   199be:	d083      	beq.n	198c8 <d_print_mod+0x12c>
   199c0:	29ff      	cmp	r1, #255	; 0xff
   199c2:	f815 6b01 	ldrb.w	r6, [r5], #1
   199c6:	d1f2      	bne.n	199ae <d_print_mod+0x212>
   199c8:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   199cc:	f884 80ff 	strb.w	r8, [r4, #255]	; 0xff
   199d0:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
   199d4:	4620      	mov	r0, r4
   199d6:	4798      	blx	r3
   199d8:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   199dc:	3301      	adds	r3, #1
   199de:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
   199e2:	2101      	movs	r1, #1
   199e4:	2300      	movs	r3, #0
   199e6:	e7e4      	b.n	199b2 <d_print_mod+0x216>
   199e8:	f890 3104 	ldrb.w	r3, [r0, #260]	; 0x104
   199ec:	2b28      	cmp	r3, #40	; 0x28
   199ee:	d00b      	beq.n	19a08 <d_print_mod+0x26c>
   199f0:	f8d0 3100 	ldr.w	r3, [r0, #256]	; 0x100
   199f4:	2bff      	cmp	r3, #255	; 0xff
   199f6:	f000 8126 	beq.w	19c46 <d_print_mod+0x4aa>
   199fa:	2220      	movs	r2, #32
   199fc:	1c59      	adds	r1, r3, #1
   199fe:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
   19a02:	54e2      	strb	r2, [r4, r3]
   19a04:	f884 2104 	strb.w	r2, [r4, #260]	; 0x104
   19a08:	686a      	ldr	r2, [r5, #4]
   19a0a:	f8d4 3128 	ldr.w	r3, [r4, #296]	; 0x128
   19a0e:	4d66      	ldr	r5, [pc, #408]	; (19ba8 <d_print_mod+0x40c>)
   19a10:	f8c4 d128 	str.w	sp, [r4, #296]	; 0x128
   19a14:	4641      	mov	r1, r8
   19a16:	4620      	mov	r0, r4
   19a18:	9301      	str	r3, [sp, #4]
   19a1a:	9200      	str	r2, [sp, #0]
   19a1c:	f7fd f90a 	bl	16c34 <d_print_comp_inner>
   19a20:	9b01      	ldr	r3, [sp, #4]
   19a22:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
   19a26:	f8c4 3128 	str.w	r3, [r4, #296]	; 0x128
   19a2a:	1cef      	adds	r7, r5, #3
   19a2c:	f04f 0800 	mov.w	r8, #0
   19a30:	e009      	b.n	19a46 <d_print_mod+0x2aa>
   19a32:	460b      	mov	r3, r1
   19a34:	3101      	adds	r1, #1
   19a36:	42bd      	cmp	r5, r7
   19a38:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
   19a3c:	54e6      	strb	r6, [r4, r3]
   19a3e:	f884 6104 	strb.w	r6, [r4, #260]	; 0x104
   19a42:	f43f af41 	beq.w	198c8 <d_print_mod+0x12c>
   19a46:	29ff      	cmp	r1, #255	; 0xff
   19a48:	f815 6b01 	ldrb.w	r6, [r5], #1
   19a4c:	d1f1      	bne.n	19a32 <d_print_mod+0x296>
   19a4e:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   19a52:	f884 80ff 	strb.w	r8, [r4, #255]	; 0xff
   19a56:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
   19a5a:	4620      	mov	r0, r4
   19a5c:	4798      	blx	r3
   19a5e:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   19a62:	3301      	adds	r3, #1
   19a64:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
   19a68:	2101      	movs	r1, #1
   19a6a:	2300      	movs	r3, #0
   19a6c:	e7e3      	b.n	19a36 <d_print_mod+0x29a>
   19a6e:	4e4f      	ldr	r6, [pc, #316]	; (19bac <d_print_mod+0x410>)
   19a70:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
   19a74:	f106 0a0a 	add.w	sl, r6, #10
   19a78:	f04f 0900 	mov.w	r9, #0
   19a7c:	e009      	b.n	19a92 <d_print_mod+0x2f6>
   19a7e:	460b      	mov	r3, r1
   19a80:	3101      	adds	r1, #1
   19a82:	4556      	cmp	r6, sl
   19a84:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
   19a88:	54e7      	strb	r7, [r4, r3]
   19a8a:	f884 7104 	strb.w	r7, [r4, #260]	; 0x104
   19a8e:	f000 80c0 	beq.w	19c12 <d_print_mod+0x476>
   19a92:	29ff      	cmp	r1, #255	; 0xff
   19a94:	f816 7b01 	ldrb.w	r7, [r6], #1
   19a98:	d1f1      	bne.n	19a7e <d_print_mod+0x2e2>
   19a9a:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   19a9e:	f884 90ff 	strb.w	r9, [r4, #255]	; 0xff
   19aa2:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
   19aa6:	4620      	mov	r0, r4
   19aa8:	4798      	blx	r3
   19aaa:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   19aae:	3301      	adds	r3, #1
   19ab0:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
   19ab4:	2101      	movs	r1, #1
   19ab6:	2300      	movs	r3, #0
   19ab8:	e7e3      	b.n	19a82 <d_print_mod+0x2e6>
   19aba:	4d3d      	ldr	r5, [pc, #244]	; (19bb0 <d_print_mod+0x414>)
   19abc:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
   19ac0:	f105 0709 	add.w	r7, r5, #9
   19ac4:	f04f 0800 	mov.w	r8, #0
   19ac8:	e009      	b.n	19ade <d_print_mod+0x342>
   19aca:	460b      	mov	r3, r1
   19acc:	3101      	adds	r1, #1
   19ace:	42bd      	cmp	r5, r7
   19ad0:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
   19ad4:	54e6      	strb	r6, [r4, r3]
   19ad6:	f884 6104 	strb.w	r6, [r4, #260]	; 0x104
   19ada:	f43f aef5 	beq.w	198c8 <d_print_mod+0x12c>
   19ade:	29ff      	cmp	r1, #255	; 0xff
   19ae0:	f815 6f01 	ldrb.w	r6, [r5, #1]!
   19ae4:	d1f1      	bne.n	19aca <d_print_mod+0x32e>
   19ae6:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   19aea:	f884 80ff 	strb.w	r8, [r4, #255]	; 0xff
   19aee:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
   19af2:	4620      	mov	r0, r4
   19af4:	4798      	blx	r3
   19af6:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   19afa:	3301      	adds	r3, #1
   19afc:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
   19b00:	2101      	movs	r1, #1
   19b02:	2300      	movs	r3, #0
   19b04:	e7e3      	b.n	19ace <d_print_mod+0x332>
   19b06:	4d2b      	ldr	r5, [pc, #172]	; (19bb4 <d_print_mod+0x418>)
   19b08:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
   19b0c:	1daf      	adds	r7, r5, #6
   19b0e:	f04f 0800 	mov.w	r8, #0
   19b12:	e009      	b.n	19b28 <d_print_mod+0x38c>
   19b14:	460b      	mov	r3, r1
   19b16:	3101      	adds	r1, #1
   19b18:	42bd      	cmp	r5, r7
   19b1a:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
   19b1e:	54e6      	strb	r6, [r4, r3]
   19b20:	f884 6104 	strb.w	r6, [r4, #260]	; 0x104
   19b24:	f43f aed0 	beq.w	198c8 <d_print_mod+0x12c>
   19b28:	29ff      	cmp	r1, #255	; 0xff
   19b2a:	f815 6b01 	ldrb.w	r6, [r5], #1
   19b2e:	d1f1      	bne.n	19b14 <d_print_mod+0x378>
   19b30:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   19b34:	f884 80ff 	strb.w	r8, [r4, #255]	; 0xff
   19b38:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
   19b3c:	4620      	mov	r0, r4
   19b3e:	4798      	blx	r3
   19b40:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   19b44:	3301      	adds	r3, #1
   19b46:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
   19b4a:	2101      	movs	r1, #1
   19b4c:	2300      	movs	r3, #0
   19b4e:	e7e3      	b.n	19b18 <d_print_mod+0x37c>
   19b50:	f8d0 3100 	ldr.w	r3, [r0, #256]	; 0x100
   19b54:	2bff      	cmp	r3, #255	; 0xff
   19b56:	f000 80cc 	beq.w	19cf2 <d_print_mod+0x556>
   19b5a:	2220      	movs	r2, #32
   19b5c:	1c59      	adds	r1, r3, #1
   19b5e:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
   19b62:	54e2      	strb	r2, [r4, r3]
   19b64:	f884 2104 	strb.w	r2, [r4, #260]	; 0x104
   19b68:	e6c3      	b.n	198f2 <d_print_mod+0x156>
   19b6a:	f8d0 3100 	ldr.w	r3, [r0, #256]	; 0x100
   19b6e:	2bff      	cmp	r3, #255	; 0xff
   19b70:	f000 80ad 	beq.w	19cce <d_print_mod+0x532>
   19b74:	2220      	movs	r2, #32
   19b76:	1c59      	adds	r1, r3, #1
   19b78:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
   19b7c:	54e2      	strb	r2, [r4, r3]
   19b7e:	f884 2104 	strb.w	r2, [r4, #260]	; 0x104
   19b82:	e6c5      	b.n	19910 <d_print_mod+0x174>
   19b84:	686a      	ldr	r2, [r5, #4]
   19b86:	e692      	b.n	198ae <d_print_mod+0x112>
   19b88:	4d0b      	ldr	r5, [pc, #44]	; (19bb8 <d_print_mod+0x41c>)
   19b8a:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
   19b8e:	f105 0709 	add.w	r7, r5, #9
   19b92:	f04f 0800 	mov.w	r8, #0
   19b96:	e01b      	b.n	19bd0 <d_print_mod+0x434>
   19b98:	000245ff 	.word	0x000245ff
   19b9c:	00024614 	.word	0x00024614
   19ba0:	00024617 	.word	0x00024617
   19ba4:	00024624 	.word	0x00024624
   19ba8:	00024630 	.word	0x00024630
   19bac:	00024634 	.word	0x00024634
   19bb0:	000245eb 	.word	0x000245eb
   19bb4:	000245f8 	.word	0x000245f8
   19bb8:	000245df 	.word	0x000245df
   19bbc:	460b      	mov	r3, r1
   19bbe:	3101      	adds	r1, #1
   19bc0:	42af      	cmp	r7, r5
   19bc2:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
   19bc6:	54e6      	strb	r6, [r4, r3]
   19bc8:	f884 6104 	strb.w	r6, [r4, #260]	; 0x104
   19bcc:	f43f ae7c 	beq.w	198c8 <d_print_mod+0x12c>
   19bd0:	29ff      	cmp	r1, #255	; 0xff
   19bd2:	f815 6f01 	ldrb.w	r6, [r5, #1]!
   19bd6:	d1f1      	bne.n	19bbc <d_print_mod+0x420>
   19bd8:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   19bdc:	f884 80ff 	strb.w	r8, [r4, #255]	; 0xff
   19be0:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
   19be4:	4620      	mov	r0, r4
   19be6:	4798      	blx	r3
   19be8:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   19bec:	3301      	adds	r3, #1
   19bee:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
   19bf2:	2101      	movs	r1, #1
   19bf4:	2300      	movs	r3, #0
   19bf6:	e7e3      	b.n	19bc0 <d_print_mod+0x424>
   19bf8:	f8d0 3128 	ldr.w	r3, [r0, #296]	; 0x128
   19bfc:	f8c0 d128 	str.w	sp, [r0, #296]	; 0x128
   19c00:	462a      	mov	r2, r5
   19c02:	9301      	str	r3, [sp, #4]
   19c04:	9500      	str	r5, [sp, #0]
   19c06:	f7fd f815 	bl	16c34 <d_print_comp_inner>
   19c0a:	9b01      	ldr	r3, [sp, #4]
   19c0c:	f8c4 3128 	str.w	r3, [r4, #296]	; 0x128
   19c10:	e65a      	b.n	198c8 <d_print_mod+0x12c>
   19c12:	f8d4 3128 	ldr.w	r3, [r4, #296]	; 0x128
   19c16:	686a      	ldr	r2, [r5, #4]
   19c18:	f8c4 d128 	str.w	sp, [r4, #296]	; 0x128
   19c1c:	4641      	mov	r1, r8
   19c1e:	4620      	mov	r0, r4
   19c20:	9301      	str	r3, [sp, #4]
   19c22:	9200      	str	r2, [sp, #0]
   19c24:	f7fd f806 	bl	16c34 <d_print_comp_inner>
   19c28:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
   19c2c:	9b01      	ldr	r3, [sp, #4]
   19c2e:	f8c4 3128 	str.w	r3, [r4, #296]	; 0x128
   19c32:	29ff      	cmp	r1, #255	; 0xff
   19c34:	d03a      	beq.n	19cac <d_print_mod+0x510>
   19c36:	1c4a      	adds	r2, r1, #1
   19c38:	2329      	movs	r3, #41	; 0x29
   19c3a:	f8c4 2100 	str.w	r2, [r4, #256]	; 0x100
   19c3e:	5463      	strb	r3, [r4, r1]
   19c40:	f884 3104 	strb.w	r3, [r4, #260]	; 0x104
   19c44:	e640      	b.n	198c8 <d_print_mod+0x12c>
   19c46:	2600      	movs	r6, #0
   19c48:	4619      	mov	r1, r3
   19c4a:	f8d0 210c 	ldr.w	r2, [r0, #268]	; 0x10c
   19c4e:	f8d0 3108 	ldr.w	r3, [r0, #264]	; 0x108
   19c52:	f880 60ff 	strb.w	r6, [r0, #255]	; 0xff
   19c56:	4798      	blx	r3
   19c58:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   19c5c:	f8c4 6100 	str.w	r6, [r4, #256]	; 0x100
   19c60:	1c5a      	adds	r2, r3, #1
   19c62:	f8c4 2124 	str.w	r2, [r4, #292]	; 0x124
   19c66:	4633      	mov	r3, r6
   19c68:	e6c7      	b.n	199fa <d_print_mod+0x25e>
   19c6a:	2500      	movs	r5, #0
   19c6c:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   19c70:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
   19c74:	f884 50ff 	strb.w	r5, [r4, #255]	; 0xff
   19c78:	4620      	mov	r0, r4
   19c7a:	4798      	blx	r3
   19c7c:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   19c80:	3301      	adds	r3, #1
   19c82:	4629      	mov	r1, r5
   19c84:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
   19c88:	2201      	movs	r2, #1
   19c8a:	e636      	b.n	198fa <d_print_mod+0x15e>
   19c8c:	2600      	movs	r6, #0
   19c8e:	f8d0 3108 	ldr.w	r3, [r0, #264]	; 0x108
   19c92:	f8d0 210c 	ldr.w	r2, [r0, #268]	; 0x10c
   19c96:	f880 60ff 	strb.w	r6, [r0, #255]	; 0xff
   19c9a:	4798      	blx	r3
   19c9c:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   19ca0:	3301      	adds	r3, #1
   19ca2:	4631      	mov	r1, r6
   19ca4:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
   19ca8:	2201      	movs	r2, #1
   19caa:	e5f9      	b.n	198a0 <d_print_mod+0x104>
   19cac:	2500      	movs	r5, #0
   19cae:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   19cb2:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
   19cb6:	f884 50ff 	strb.w	r5, [r4, #255]	; 0xff
   19cba:	4620      	mov	r0, r4
   19cbc:	4798      	blx	r3
   19cbe:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   19cc2:	3301      	adds	r3, #1
   19cc4:	4629      	mov	r1, r5
   19cc6:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
   19cca:	2201      	movs	r2, #1
   19ccc:	e7b4      	b.n	19c38 <d_print_mod+0x49c>
   19cce:	2500      	movs	r5, #0
   19cd0:	4619      	mov	r1, r3
   19cd2:	f8d0 210c 	ldr.w	r2, [r0, #268]	; 0x10c
   19cd6:	f8d0 3108 	ldr.w	r3, [r0, #264]	; 0x108
   19cda:	f880 50ff 	strb.w	r5, [r0, #255]	; 0xff
   19cde:	4798      	blx	r3
   19ce0:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   19ce4:	f8c4 5100 	str.w	r5, [r4, #256]	; 0x100
   19ce8:	1c5a      	adds	r2, r3, #1
   19cea:	f8c4 2124 	str.w	r2, [r4, #292]	; 0x124
   19cee:	462b      	mov	r3, r5
   19cf0:	e740      	b.n	19b74 <d_print_mod+0x3d8>
   19cf2:	2500      	movs	r5, #0
   19cf4:	4619      	mov	r1, r3
   19cf6:	f8d0 210c 	ldr.w	r2, [r0, #268]	; 0x10c
   19cfa:	f8d0 3108 	ldr.w	r3, [r0, #264]	; 0x108
   19cfe:	f880 50ff 	strb.w	r5, [r0, #255]	; 0xff
   19d02:	4798      	blx	r3
   19d04:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   19d08:	f8c4 5100 	str.w	r5, [r4, #256]	; 0x100
   19d0c:	1c5a      	adds	r2, r3, #1
   19d0e:	f8c4 2124 	str.w	r2, [r4, #292]	; 0x124
   19d12:	462b      	mov	r3, r5
   19d14:	e721      	b.n	19b5a <d_print_mod+0x3be>
   19d16:	4619      	mov	r1, r3
   19d18:	f8d0 210c 	ldr.w	r2, [r0, #268]	; 0x10c
   19d1c:	f8d0 3108 	ldr.w	r3, [r0, #264]	; 0x108
   19d20:	f880 50ff 	strb.w	r5, [r0, #255]	; 0xff
   19d24:	4798      	blx	r3
   19d26:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   19d2a:	f8c4 5100 	str.w	r5, [r4, #256]	; 0x100
   19d2e:	1c5a      	adds	r2, r3, #1
   19d30:	f8c4 2124 	str.w	r2, [r4, #292]	; 0x124
   19d34:	462b      	mov	r3, r5
   19d36:	e5d2      	b.n	198de <d_print_mod+0x142>

00019d38 <d_print_mod_list>:
   19d38:	2a00      	cmp	r2, #0
   19d3a:	f000 80a1 	beq.w	19e80 <d_print_mod_list+0x148>
   19d3e:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   19d42:	461e      	mov	r6, r3
   19d44:	f8d0 3118 	ldr.w	r3, [r0, #280]	; 0x118
   19d48:	b089      	sub	sp, #36	; 0x24
   19d4a:	4605      	mov	r5, r0
   19d4c:	bb43      	cbnz	r3, 19da0 <d_print_mod_list+0x68>
   19d4e:	460f      	mov	r7, r1
   19d50:	4614      	mov	r4, r2
   19d52:	f04f 0801 	mov.w	r8, #1
   19d56:	e002      	b.n	19d5e <d_print_mod_list+0x26>
   19d58:	f8d5 3118 	ldr.w	r3, [r5, #280]	; 0x118
   19d5c:	bb03      	cbnz	r3, 19da0 <d_print_mod_list+0x68>
   19d5e:	68a3      	ldr	r3, [r4, #8]
   19d60:	b9db      	cbnz	r3, 19d9a <d_print_mod_list+0x62>
   19d62:	6862      	ldr	r2, [r4, #4]
   19d64:	7813      	ldrb	r3, [r2, #0]
   19d66:	b92e      	cbnz	r6, 19d74 <d_print_mod_list+0x3c>
   19d68:	f1a3 011c 	sub.w	r1, r3, #28
   19d6c:	2904      	cmp	r1, #4
   19d6e:	d914      	bls.n	19d9a <d_print_mod_list+0x62>
   19d70:	2b4c      	cmp	r3, #76	; 0x4c
   19d72:	d012      	beq.n	19d9a <d_print_mod_list+0x62>
   19d74:	68e1      	ldr	r1, [r4, #12]
   19d76:	f8c4 8008 	str.w	r8, [r4, #8]
   19d7a:	2b29      	cmp	r3, #41	; 0x29
   19d7c:	f8d5 9110 	ldr.w	r9, [r5, #272]	; 0x110
   19d80:	f8c5 1110 	str.w	r1, [r5, #272]	; 0x110
   19d84:	d00f      	beq.n	19da6 <d_print_mod_list+0x6e>
   19d86:	2b2a      	cmp	r3, #42	; 0x2a
   19d88:	d018      	beq.n	19dbc <d_print_mod_list+0x84>
   19d8a:	2b02      	cmp	r3, #2
   19d8c:	d021      	beq.n	19dd2 <d_print_mod_list+0x9a>
   19d8e:	4639      	mov	r1, r7
   19d90:	4628      	mov	r0, r5
   19d92:	f7ff fd03 	bl	1979c <d_print_mod>
   19d96:	f8c5 9110 	str.w	r9, [r5, #272]	; 0x110
   19d9a:	6824      	ldr	r4, [r4, #0]
   19d9c:	2c00      	cmp	r4, #0
   19d9e:	d1db      	bne.n	19d58 <d_print_mod_list+0x20>
   19da0:	b009      	add	sp, #36	; 0x24
   19da2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   19da6:	6823      	ldr	r3, [r4, #0]
   19da8:	3208      	adds	r2, #8
   19daa:	4639      	mov	r1, r7
   19dac:	4628      	mov	r0, r5
   19dae:	f000 f9d9 	bl	1a164 <d_print_function_type.isra.11>
   19db2:	f8c5 9110 	str.w	r9, [r5, #272]	; 0x110
   19db6:	b009      	add	sp, #36	; 0x24
   19db8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   19dbc:	6823      	ldr	r3, [r4, #0]
   19dbe:	3204      	adds	r2, #4
   19dc0:	4639      	mov	r1, r7
   19dc2:	4628      	mov	r0, r5
   19dc4:	f000 f8f2 	bl	19fac <d_print_array_type.isra.10>
   19dc8:	f8c5 9110 	str.w	r9, [r5, #272]	; 0x110
   19dcc:	b009      	add	sp, #36	; 0x24
   19dce:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   19dd2:	2600      	movs	r6, #0
   19dd4:	f8d5 8114 	ldr.w	r8, [r5, #276]	; 0x114
   19dd8:	f8c5 6114 	str.w	r6, [r5, #276]	; 0x114
   19ddc:	6852      	ldr	r2, [r2, #4]
   19dde:	4639      	mov	r1, r7
   19de0:	4628      	mov	r0, r5
   19de2:	f7ff fccb 	bl	1977c <d_print_comp>
   19de6:	f017 0a04 	ands.w	sl, r7, #4
   19dea:	f8c5 8114 	str.w	r8, [r5, #276]	; 0x114
   19dee:	d023      	beq.n	19e38 <d_print_mod_list+0x100>
   19df0:	f8d5 1100 	ldr.w	r1, [r5, #256]	; 0x100
   19df4:	29ff      	cmp	r1, #255	; 0xff
   19df6:	f000 80c1 	beq.w	19f7c <d_print_mod_list+0x244>
   19dfa:	1c4a      	adds	r2, r1, #1
   19dfc:	232e      	movs	r3, #46	; 0x2e
   19dfe:	f8c5 2100 	str.w	r2, [r5, #256]	; 0x100
   19e02:	546b      	strb	r3, [r5, r1]
   19e04:	f885 3104 	strb.w	r3, [r5, #260]	; 0x104
   19e08:	6863      	ldr	r3, [r4, #4]
   19e0a:	689c      	ldr	r4, [r3, #8]
   19e0c:	7823      	ldrb	r3, [r4, #0]
   19e0e:	2b46      	cmp	r3, #70	; 0x46
   19e10:	d037      	beq.n	19e82 <d_print_mod_list+0x14a>
   19e12:	f1a3 021c 	sub.w	r2, r3, #28
   19e16:	2a04      	cmp	r2, #4
   19e18:	d90b      	bls.n	19e32 <d_print_mod_list+0xfa>
   19e1a:	2b4c      	cmp	r3, #76	; 0x4c
   19e1c:	d009      	beq.n	19e32 <d_print_mod_list+0xfa>
   19e1e:	4622      	mov	r2, r4
   19e20:	4639      	mov	r1, r7
   19e22:	4628      	mov	r0, r5
   19e24:	f7ff fcaa 	bl	1977c <d_print_comp>
   19e28:	f8c5 9110 	str.w	r9, [r5, #272]	; 0x110
   19e2c:	b009      	add	sp, #36	; 0x24
   19e2e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   19e32:	6864      	ldr	r4, [r4, #4]
   19e34:	7823      	ldrb	r3, [r4, #0]
   19e36:	e7ec      	b.n	19e12 <d_print_mod_list+0xda>
   19e38:	4e58      	ldr	r6, [pc, #352]	; (19f9c <d_print_mod_list+0x264>)
   19e3a:	f8d5 1100 	ldr.w	r1, [r5, #256]	; 0x100
   19e3e:	f106 0b02 	add.w	fp, r6, #2
   19e42:	e009      	b.n	19e58 <d_print_mod_list+0x120>
   19e44:	460b      	mov	r3, r1
   19e46:	3101      	adds	r1, #1
   19e48:	455e      	cmp	r6, fp
   19e4a:	f8c5 1100 	str.w	r1, [r5, #256]	; 0x100
   19e4e:	f805 8003 	strb.w	r8, [r5, r3]
   19e52:	f885 8104 	strb.w	r8, [r5, #260]	; 0x104
   19e56:	d0d7      	beq.n	19e08 <d_print_mod_list+0xd0>
   19e58:	29ff      	cmp	r1, #255	; 0xff
   19e5a:	f816 8b01 	ldrb.w	r8, [r6], #1
   19e5e:	d1f1      	bne.n	19e44 <d_print_mod_list+0x10c>
   19e60:	f8d5 3108 	ldr.w	r3, [r5, #264]	; 0x108
   19e64:	f885 a0ff 	strb.w	sl, [r5, #255]	; 0xff
   19e68:	f8d5 210c 	ldr.w	r2, [r5, #268]	; 0x10c
   19e6c:	4628      	mov	r0, r5
   19e6e:	4798      	blx	r3
   19e70:	f8d5 3124 	ldr.w	r3, [r5, #292]	; 0x124
   19e74:	3301      	adds	r3, #1
   19e76:	f8c5 3124 	str.w	r3, [r5, #292]	; 0x124
   19e7a:	2101      	movs	r1, #1
   19e7c:	2300      	movs	r3, #0
   19e7e:	e7e3      	b.n	19e48 <d_print_mod_list+0x110>
   19e80:	4770      	bx	lr
   19e82:	4e47      	ldr	r6, [pc, #284]	; (19fa0 <d_print_mod_list+0x268>)
   19e84:	f8d5 1100 	ldr.w	r1, [r5, #256]	; 0x100
   19e88:	f106 0a0d 	add.w	sl, r6, #13
   19e8c:	f04f 0b00 	mov.w	fp, #0
   19e90:	e009      	b.n	19ea6 <d_print_mod_list+0x16e>
   19e92:	460b      	mov	r3, r1
   19e94:	3101      	adds	r1, #1
   19e96:	45b2      	cmp	sl, r6
   19e98:	f8c5 1100 	str.w	r1, [r5, #256]	; 0x100
   19e9c:	f805 8003 	strb.w	r8, [r5, r3]
   19ea0:	f885 8104 	strb.w	r8, [r5, #260]	; 0x104
   19ea4:	d013      	beq.n	19ece <d_print_mod_list+0x196>
   19ea6:	29ff      	cmp	r1, #255	; 0xff
   19ea8:	f816 8b01 	ldrb.w	r8, [r6], #1
   19eac:	d1f1      	bne.n	19e92 <d_print_mod_list+0x15a>
   19eae:	f8d5 3108 	ldr.w	r3, [r5, #264]	; 0x108
   19eb2:	f885 b0ff 	strb.w	fp, [r5, #255]	; 0xff
   19eb6:	f8d5 210c 	ldr.w	r2, [r5, #268]	; 0x10c
   19eba:	4628      	mov	r0, r5
   19ebc:	4798      	blx	r3
   19ebe:	f8d5 3124 	ldr.w	r3, [r5, #292]	; 0x124
   19ec2:	3301      	adds	r3, #1
   19ec4:	f8c5 3124 	str.w	r3, [r5, #292]	; 0x124
   19ec8:	2101      	movs	r1, #1
   19eca:	2300      	movs	r3, #0
   19ecc:	e7e3      	b.n	19e96 <d_print_mod_list+0x15e>
   19ece:	68a2      	ldr	r2, [r4, #8]
   19ed0:	4934      	ldr	r1, [pc, #208]	; (19fa4 <d_print_mod_list+0x26c>)
   19ed2:	3201      	adds	r2, #1
   19ed4:	a801      	add	r0, sp, #4
   19ed6:	f004 fd31 	bl	1e93c <sprintf>
   19eda:	a801      	add	r0, sp, #4
   19edc:	f004 fed0 	bl	1ec80 <strlen>
   19ee0:	b328      	cbz	r0, 19f2e <d_print_mod_list+0x1f6>
   19ee2:	ae01      	add	r6, sp, #4
   19ee4:	f8d5 1100 	ldr.w	r1, [r5, #256]	; 0x100
   19ee8:	eb06 0a00 	add.w	sl, r6, r0
   19eec:	f04f 0b00 	mov.w	fp, #0
   19ef0:	e009      	b.n	19f06 <d_print_mod_list+0x1ce>
   19ef2:	460b      	mov	r3, r1
   19ef4:	3101      	adds	r1, #1
   19ef6:	45b2      	cmp	sl, r6
   19ef8:	f8c5 1100 	str.w	r1, [r5, #256]	; 0x100
   19efc:	f805 8003 	strb.w	r8, [r5, r3]
   19f00:	f885 8104 	strb.w	r8, [r5, #260]	; 0x104
   19f04:	d015      	beq.n	19f32 <d_print_mod_list+0x1fa>
   19f06:	29ff      	cmp	r1, #255	; 0xff
   19f08:	f816 8b01 	ldrb.w	r8, [r6], #1
   19f0c:	d1f1      	bne.n	19ef2 <d_print_mod_list+0x1ba>
   19f0e:	f8d5 3108 	ldr.w	r3, [r5, #264]	; 0x108
   19f12:	f885 b0ff 	strb.w	fp, [r5, #255]	; 0xff
   19f16:	f8d5 210c 	ldr.w	r2, [r5, #268]	; 0x10c
   19f1a:	4628      	mov	r0, r5
   19f1c:	4798      	blx	r3
   19f1e:	f8d5 3124 	ldr.w	r3, [r5, #292]	; 0x124
   19f22:	3301      	adds	r3, #1
   19f24:	f8c5 3124 	str.w	r3, [r5, #292]	; 0x124
   19f28:	2101      	movs	r1, #1
   19f2a:	2300      	movs	r3, #0
   19f2c:	e7e3      	b.n	19ef6 <d_print_mod_list+0x1be>
   19f2e:	f8d5 1100 	ldr.w	r1, [r5, #256]	; 0x100
   19f32:	4e1d      	ldr	r6, [pc, #116]	; (19fa8 <d_print_mod_list+0x270>)
   19f34:	f04f 0b00 	mov.w	fp, #0
   19f38:	f106 0a03 	add.w	sl, r6, #3
   19f3c:	e00a      	b.n	19f54 <d_print_mod_list+0x21c>
   19f3e:	460b      	mov	r3, r1
   19f40:	3101      	adds	r1, #1
   19f42:	45b2      	cmp	sl, r6
   19f44:	f8c5 1100 	str.w	r1, [r5, #256]	; 0x100
   19f48:	f805 8003 	strb.w	r8, [r5, r3]
   19f4c:	f885 8104 	strb.w	r8, [r5, #260]	; 0x104
   19f50:	f43f af6f 	beq.w	19e32 <d_print_mod_list+0xfa>
   19f54:	29ff      	cmp	r1, #255	; 0xff
   19f56:	f816 8b01 	ldrb.w	r8, [r6], #1
   19f5a:	d1f0      	bne.n	19f3e <d_print_mod_list+0x206>
   19f5c:	f8d5 3108 	ldr.w	r3, [r5, #264]	; 0x108
   19f60:	f885 b0ff 	strb.w	fp, [r5, #255]	; 0xff
   19f64:	f8d5 210c 	ldr.w	r2, [r5, #268]	; 0x10c
   19f68:	4628      	mov	r0, r5
   19f6a:	4798      	blx	r3
   19f6c:	f8d5 3124 	ldr.w	r3, [r5, #292]	; 0x124
   19f70:	3301      	adds	r3, #1
   19f72:	f8c5 3124 	str.w	r3, [r5, #292]	; 0x124
   19f76:	2101      	movs	r1, #1
   19f78:	2300      	movs	r3, #0
   19f7a:	e7e2      	b.n	19f42 <d_print_mod_list+0x20a>
   19f7c:	f8d5 3108 	ldr.w	r3, [r5, #264]	; 0x108
   19f80:	f8d5 210c 	ldr.w	r2, [r5, #268]	; 0x10c
   19f84:	f885 60ff 	strb.w	r6, [r5, #255]	; 0xff
   19f88:	4628      	mov	r0, r5
   19f8a:	4798      	blx	r3
   19f8c:	f8d5 3124 	ldr.w	r3, [r5, #292]	; 0x124
   19f90:	3301      	adds	r3, #1
   19f92:	4631      	mov	r1, r6
   19f94:	f8c5 3124 	str.w	r3, [r5, #292]	; 0x124
   19f98:	2201      	movs	r2, #1
   19f9a:	e72f      	b.n	19dfc <d_print_mod_list+0xc4>
   19f9c:	00024364 	.word	0x00024364
   19fa0:	00024368 	.word	0x00024368
   19fa4:	00024314 	.word	0x00024314
   19fa8:	00024378 	.word	0x00024378

00019fac <d_print_array_type.isra.10>:
   19fac:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   19fb0:	4604      	mov	r4, r0
   19fb2:	460f      	mov	r7, r1
   19fb4:	4690      	mov	r8, r2
   19fb6:	b163      	cbz	r3, 19fd2 <d_print_array_type.isra.10+0x26>
   19fb8:	461e      	mov	r6, r3
   19fba:	461a      	mov	r2, r3
   19fbc:	6893      	ldr	r3, [r2, #8]
   19fbe:	b393      	cbz	r3, 1a026 <d_print_array_type.isra.10+0x7a>
   19fc0:	6812      	ldr	r2, [r2, #0]
   19fc2:	2a00      	cmp	r2, #0
   19fc4:	d1fa      	bne.n	19fbc <d_print_array_type.isra.10+0x10>
   19fc6:	4613      	mov	r3, r2
   19fc8:	4639      	mov	r1, r7
   19fca:	4632      	mov	r2, r6
   19fcc:	4620      	mov	r0, r4
   19fce:	f7ff feb3 	bl	19d38 <d_print_mod_list>
   19fd2:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
   19fd6:	29ff      	cmp	r1, #255	; 0xff
   19fd8:	f000 808d 	beq.w	1a0f6 <d_print_array_type.isra.10+0x14a>
   19fdc:	1c4b      	adds	r3, r1, #1
   19fde:	2220      	movs	r2, #32
   19fe0:	2bff      	cmp	r3, #255	; 0xff
   19fe2:	f8c4 3100 	str.w	r3, [r4, #256]	; 0x100
   19fe6:	5462      	strb	r2, [r4, r1]
   19fe8:	f884 2104 	strb.w	r2, [r4, #260]	; 0x104
   19fec:	d068      	beq.n	1a0c0 <d_print_array_type.isra.10+0x114>
   19fee:	225b      	movs	r2, #91	; 0x5b
   19ff0:	1c59      	adds	r1, r3, #1
   19ff2:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
   19ff6:	54e2      	strb	r2, [r4, r3]
   19ff8:	f884 2104 	strb.w	r2, [r4, #260]	; 0x104
   19ffc:	f8d8 2000 	ldr.w	r2, [r8]
   1a000:	b12a      	cbz	r2, 1a00e <d_print_array_type.isra.10+0x62>
   1a002:	4639      	mov	r1, r7
   1a004:	4620      	mov	r0, r4
   1a006:	f7ff fbb9 	bl	1977c <d_print_comp>
   1a00a:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
   1a00e:	29ff      	cmp	r1, #255	; 0xff
   1a010:	f000 8082 	beq.w	1a118 <d_print_array_type.isra.10+0x16c>
   1a014:	1c4a      	adds	r2, r1, #1
   1a016:	235d      	movs	r3, #93	; 0x5d
   1a018:	f8c4 2100 	str.w	r2, [r4, #256]	; 0x100
   1a01c:	5463      	strb	r3, [r4, r1]
   1a01e:	f884 3104 	strb.w	r3, [r4, #260]	; 0x104
   1a022:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1a026:	6852      	ldr	r2, [r2, #4]
   1a028:	7812      	ldrb	r2, [r2, #0]
   1a02a:	2a2a      	cmp	r2, #42	; 0x2a
   1a02c:	d03f      	beq.n	1a0ae <d_print_array_type.isra.10+0x102>
   1a02e:	f8df 9130 	ldr.w	r9, [pc, #304]	; 1a160 <d_print_array_type.isra.10+0x1b4>
   1a032:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
   1a036:	461d      	mov	r5, r3
   1a038:	f109 0b02 	add.w	fp, r9, #2
   1a03c:	e00a      	b.n	1a054 <d_print_array_type.isra.10+0xa8>
   1a03e:	460b      	mov	r3, r1
   1a040:	45cb      	cmp	fp, r9
   1a042:	f101 0101 	add.w	r1, r1, #1
   1a046:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
   1a04a:	f804 a003 	strb.w	sl, [r4, r3]
   1a04e:	f884 a104 	strb.w	sl, [r4, #260]	; 0x104
   1a052:	d01a      	beq.n	1a08a <d_print_array_type.isra.10+0xde>
   1a054:	29ff      	cmp	r1, #255	; 0xff
   1a056:	f819 ab01 	ldrb.w	sl, [r9], #1
   1a05a:	d1f0      	bne.n	1a03e <d_print_array_type.isra.10+0x92>
   1a05c:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   1a060:	f884 50ff 	strb.w	r5, [r4, #255]	; 0xff
   1a064:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
   1a068:	4620      	mov	r0, r4
   1a06a:	4798      	blx	r3
   1a06c:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   1a070:	3301      	adds	r3, #1
   1a072:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
   1a076:	2300      	movs	r3, #0
   1a078:	2101      	movs	r1, #1
   1a07a:	45cb      	cmp	fp, r9
   1a07c:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
   1a080:	f804 a003 	strb.w	sl, [r4, r3]
   1a084:	f884 a104 	strb.w	sl, [r4, #260]	; 0x104
   1a088:	d1e4      	bne.n	1a054 <d_print_array_type.isra.10+0xa8>
   1a08a:	2300      	movs	r3, #0
   1a08c:	4632      	mov	r2, r6
   1a08e:	4639      	mov	r1, r7
   1a090:	4620      	mov	r0, r4
   1a092:	f7ff fe51 	bl	19d38 <d_print_mod_list>
   1a096:	f8d4 3100 	ldr.w	r3, [r4, #256]	; 0x100
   1a09a:	2bff      	cmp	r3, #255	; 0xff
   1a09c:	d04d      	beq.n	1a13a <d_print_array_type.isra.10+0x18e>
   1a09e:	1c59      	adds	r1, r3, #1
   1a0a0:	2229      	movs	r2, #41	; 0x29
   1a0a2:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
   1a0a6:	54e2      	strb	r2, [r4, r3]
   1a0a8:	f884 2104 	strb.w	r2, [r4, #260]	; 0x104
   1a0ac:	e793      	b.n	19fd6 <d_print_array_type.isra.10+0x2a>
   1a0ae:	4632      	mov	r2, r6
   1a0b0:	4639      	mov	r1, r7
   1a0b2:	4620      	mov	r0, r4
   1a0b4:	f7ff fe40 	bl	19d38 <d_print_mod_list>
   1a0b8:	f8d4 3100 	ldr.w	r3, [r4, #256]	; 0x100
   1a0bc:	2bff      	cmp	r3, #255	; 0xff
   1a0be:	d196      	bne.n	19fee <d_print_array_type.isra.10+0x42>
   1a0c0:	2200      	movs	r2, #0
   1a0c2:	4619      	mov	r1, r3
   1a0c4:	f884 20ff 	strb.w	r2, [r4, #255]	; 0xff
   1a0c8:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   1a0cc:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
   1a0d0:	4620      	mov	r0, r4
   1a0d2:	4798      	blx	r3
   1a0d4:	235b      	movs	r3, #91	; 0x5b
   1a0d6:	7023      	strb	r3, [r4, #0]
   1a0d8:	f884 3104 	strb.w	r3, [r4, #260]	; 0x104
   1a0dc:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   1a0e0:	f8d8 2000 	ldr.w	r2, [r8]
   1a0e4:	3301      	adds	r3, #1
   1a0e6:	2101      	movs	r1, #1
   1a0e8:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
   1a0ec:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
   1a0f0:	2a00      	cmp	r2, #0
   1a0f2:	d186      	bne.n	1a002 <d_print_array_type.isra.10+0x56>
   1a0f4:	e78e      	b.n	1a014 <d_print_array_type.isra.10+0x68>
   1a0f6:	2500      	movs	r5, #0
   1a0f8:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   1a0fc:	f884 50ff 	strb.w	r5, [r4, #255]	; 0xff
   1a100:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
   1a104:	4620      	mov	r0, r4
   1a106:	4798      	blx	r3
   1a108:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   1a10c:	3301      	adds	r3, #1
   1a10e:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
   1a112:	4629      	mov	r1, r5
   1a114:	2301      	movs	r3, #1
   1a116:	e762      	b.n	19fde <d_print_array_type.isra.10+0x32>
   1a118:	2500      	movs	r5, #0
   1a11a:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   1a11e:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
   1a122:	f884 50ff 	strb.w	r5, [r4, #255]	; 0xff
   1a126:	4620      	mov	r0, r4
   1a128:	4798      	blx	r3
   1a12a:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   1a12e:	3301      	adds	r3, #1
   1a130:	4629      	mov	r1, r5
   1a132:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
   1a136:	2201      	movs	r2, #1
   1a138:	e76d      	b.n	1a016 <d_print_array_type.isra.10+0x6a>
   1a13a:	2500      	movs	r5, #0
   1a13c:	4619      	mov	r1, r3
   1a13e:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
   1a142:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   1a146:	f884 50ff 	strb.w	r5, [r4, #255]	; 0xff
   1a14a:	4620      	mov	r0, r4
   1a14c:	4798      	blx	r3
   1a14e:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   1a152:	1c5a      	adds	r2, r3, #1
   1a154:	f8c4 2124 	str.w	r2, [r4, #292]	; 0x124
   1a158:	462b      	mov	r3, r5
   1a15a:	2101      	movs	r1, #1
   1a15c:	e7a0      	b.n	1a0a0 <d_print_array_type.isra.10+0xf4>
   1a15e:	bf00      	nop
   1a160:	0002455c 	.word	0x0002455c

0001a164 <d_print_function_type.isra.11>:
   1a164:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   1a168:	4604      	mov	r4, r0
   1a16a:	b083      	sub	sp, #12
   1a16c:	460e      	mov	r6, r1
   1a16e:	4617      	mov	r7, r2
   1a170:	461d      	mov	r5, r3
   1a172:	b34b      	cbz	r3, 1a1c8 <d_print_function_type.isra.11+0x64>
   1a174:	689b      	ldr	r3, [r3, #8]
   1a176:	bb3b      	cbnz	r3, 1a1c8 <d_print_function_type.isra.11+0x64>
   1a178:	462a      	mov	r2, r5
   1a17a:	2001      	movs	r0, #1
   1a17c:	f8df e1c8 	ldr.w	lr, [pc, #456]	; 1a348 <d_print_function_type.isra.11+0x1e4>
   1a180:	e006      	b.n	1a190 <d_print_function_type.isra.11+0x2c>
   1a182:	f411 6f60 	tst.w	r1, #3584	; 0xe00
   1a186:	d15a      	bne.n	1a23e <d_print_function_type.isra.11+0xda>
   1a188:	6812      	ldr	r2, [r2, #0]
   1a18a:	b1ea      	cbz	r2, 1a1c8 <d_print_function_type.isra.11+0x64>
   1a18c:	6893      	ldr	r3, [r2, #8]
   1a18e:	b9db      	cbnz	r3, 1a1c8 <d_print_function_type.isra.11+0x64>
   1a190:	6853      	ldr	r3, [r2, #4]
   1a192:	781b      	ldrb	r3, [r3, #0]
   1a194:	3b19      	subs	r3, #25
   1a196:	b2db      	uxtb	r3, r3
   1a198:	2b12      	cmp	r3, #18
   1a19a:	fa00 f103 	lsl.w	r1, r0, r3
   1a19e:	d8f3      	bhi.n	1a188 <d_print_function_type.isra.11+0x24>
   1a1a0:	ea11 0f0e 	tst.w	r1, lr
   1a1a4:	d0ed      	beq.n	1a182 <d_print_function_type.isra.11+0x1e>
   1a1a6:	f894 3104 	ldrb.w	r3, [r4, #260]	; 0x104
   1a1aa:	2b20      	cmp	r3, #32
   1a1ac:	d04d      	beq.n	1a24a <d_print_function_type.isra.11+0xe6>
   1a1ae:	f8d4 3100 	ldr.w	r3, [r4, #256]	; 0x100
   1a1b2:	2bff      	cmp	r3, #255	; 0xff
   1a1b4:	f000 80b4 	beq.w	1a320 <d_print_function_type.isra.11+0x1bc>
   1a1b8:	1c59      	adds	r1, r3, #1
   1a1ba:	2220      	movs	r2, #32
   1a1bc:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
   1a1c0:	54e2      	strb	r2, [r4, r3]
   1a1c2:	f884 2104 	strb.w	r2, [r4, #260]	; 0x104
   1a1c6:	e042      	b.n	1a24e <d_print_function_type.isra.11+0xea>
   1a1c8:	2300      	movs	r3, #0
   1a1ca:	f8d4 8114 	ldr.w	r8, [r4, #276]	; 0x114
   1a1ce:	f8c4 3114 	str.w	r3, [r4, #276]	; 0x114
   1a1d2:	4631      	mov	r1, r6
   1a1d4:	462a      	mov	r2, r5
   1a1d6:	4620      	mov	r0, r4
   1a1d8:	f7ff fdae 	bl	19d38 <d_print_mod_list>
   1a1dc:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
   1a1e0:	29ff      	cmp	r1, #255	; 0xff
   1a1e2:	d056      	beq.n	1a292 <d_print_function_type.isra.11+0x12e>
   1a1e4:	1c4b      	adds	r3, r1, #1
   1a1e6:	2228      	movs	r2, #40	; 0x28
   1a1e8:	f8c4 3100 	str.w	r3, [r4, #256]	; 0x100
   1a1ec:	5462      	strb	r2, [r4, r1]
   1a1ee:	f884 2104 	strb.w	r2, [r4, #260]	; 0x104
   1a1f2:	6838      	ldr	r0, [r7, #0]
   1a1f4:	b178      	cbz	r0, 1a216 <d_print_function_type.isra.11+0xb2>
   1a1f6:	f8d4 3128 	ldr.w	r3, [r4, #296]	; 0x128
   1a1fa:	9000      	str	r0, [sp, #0]
   1a1fc:	4602      	mov	r2, r0
   1a1fe:	f8c4 d128 	str.w	sp, [r4, #296]	; 0x128
   1a202:	4631      	mov	r1, r6
   1a204:	4620      	mov	r0, r4
   1a206:	9301      	str	r3, [sp, #4]
   1a208:	f7fc fd14 	bl	16c34 <d_print_comp_inner>
   1a20c:	9a01      	ldr	r2, [sp, #4]
   1a20e:	f8d4 3100 	ldr.w	r3, [r4, #256]	; 0x100
   1a212:	f8c4 2128 	str.w	r2, [r4, #296]	; 0x128
   1a216:	2bff      	cmp	r3, #255	; 0xff
   1a218:	d04d      	beq.n	1a2b6 <d_print_function_type.isra.11+0x152>
   1a21a:	1c5a      	adds	r2, r3, #1
   1a21c:	2029      	movs	r0, #41	; 0x29
   1a21e:	f8c4 2100 	str.w	r2, [r4, #256]	; 0x100
   1a222:	4631      	mov	r1, r6
   1a224:	54e0      	strb	r0, [r4, r3]
   1a226:	462a      	mov	r2, r5
   1a228:	f884 0104 	strb.w	r0, [r4, #260]	; 0x104
   1a22c:	2301      	movs	r3, #1
   1a22e:	4620      	mov	r0, r4
   1a230:	f7ff fd82 	bl	19d38 <d_print_mod_list>
   1a234:	f8c4 8114 	str.w	r8, [r4, #276]	; 0x114
   1a238:	b003      	add	sp, #12
   1a23a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   1a23e:	f894 3104 	ldrb.w	r3, [r4, #260]	; 0x104
   1a242:	f003 02fd 	and.w	r2, r3, #253	; 0xfd
   1a246:	2a28      	cmp	r2, #40	; 0x28
   1a248:	d1af      	bne.n	1a1aa <d_print_function_type.isra.11+0x46>
   1a24a:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
   1a24e:	29ff      	cmp	r1, #255	; 0xff
   1a250:	d054      	beq.n	1a2fc <d_print_function_type.isra.11+0x198>
   1a252:	1c4a      	adds	r2, r1, #1
   1a254:	2328      	movs	r3, #40	; 0x28
   1a256:	f8c4 2100 	str.w	r2, [r4, #256]	; 0x100
   1a25a:	5463      	strb	r3, [r4, r1]
   1a25c:	f04f 0900 	mov.w	r9, #0
   1a260:	f884 3104 	strb.w	r3, [r4, #260]	; 0x104
   1a264:	f8d4 8114 	ldr.w	r8, [r4, #276]	; 0x114
   1a268:	f8c4 9114 	str.w	r9, [r4, #276]	; 0x114
   1a26c:	464b      	mov	r3, r9
   1a26e:	462a      	mov	r2, r5
   1a270:	4631      	mov	r1, r6
   1a272:	4620      	mov	r0, r4
   1a274:	f7ff fd60 	bl	19d38 <d_print_mod_list>
   1a278:	f8d4 3100 	ldr.w	r3, [r4, #256]	; 0x100
   1a27c:	2bff      	cmp	r3, #255	; 0xff
   1a27e:	d02c      	beq.n	1a2da <d_print_function_type.isra.11+0x176>
   1a280:	1c59      	adds	r1, r3, #1
   1a282:	2229      	movs	r2, #41	; 0x29
   1a284:	29ff      	cmp	r1, #255	; 0xff
   1a286:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
   1a28a:	54e2      	strb	r2, [r4, r3]
   1a28c:	f884 2104 	strb.w	r2, [r4, #260]	; 0x104
   1a290:	d1a8      	bne.n	1a1e4 <d_print_function_type.isra.11+0x80>
   1a292:	f04f 0900 	mov.w	r9, #0
   1a296:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   1a29a:	f884 90ff 	strb.w	r9, [r4, #255]	; 0xff
   1a29e:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
   1a2a2:	4620      	mov	r0, r4
   1a2a4:	4798      	blx	r3
   1a2a6:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   1a2aa:	3301      	adds	r3, #1
   1a2ac:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
   1a2b0:	4649      	mov	r1, r9
   1a2b2:	2301      	movs	r3, #1
   1a2b4:	e797      	b.n	1a1e6 <d_print_function_type.isra.11+0x82>
   1a2b6:	2700      	movs	r7, #0
   1a2b8:	4619      	mov	r1, r3
   1a2ba:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
   1a2be:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   1a2c2:	f884 70ff 	strb.w	r7, [r4, #255]	; 0xff
   1a2c6:	4620      	mov	r0, r4
   1a2c8:	4798      	blx	r3
   1a2ca:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   1a2ce:	1c5a      	adds	r2, r3, #1
   1a2d0:	f8c4 2124 	str.w	r2, [r4, #292]	; 0x124
   1a2d4:	463b      	mov	r3, r7
   1a2d6:	2201      	movs	r2, #1
   1a2d8:	e7a0      	b.n	1a21c <d_print_function_type.isra.11+0xb8>
   1a2da:	4619      	mov	r1, r3
   1a2dc:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
   1a2e0:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   1a2e4:	f884 90ff 	strb.w	r9, [r4, #255]	; 0xff
   1a2e8:	4620      	mov	r0, r4
   1a2ea:	4798      	blx	r3
   1a2ec:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   1a2f0:	1c5a      	adds	r2, r3, #1
   1a2f2:	f8c4 2124 	str.w	r2, [r4, #292]	; 0x124
   1a2f6:	464b      	mov	r3, r9
   1a2f8:	2101      	movs	r1, #1
   1a2fa:	e7c2      	b.n	1a282 <d_print_function_type.isra.11+0x11e>
   1a2fc:	f04f 0800 	mov.w	r8, #0
   1a300:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   1a304:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
   1a308:	f884 80ff 	strb.w	r8, [r4, #255]	; 0xff
   1a30c:	4620      	mov	r0, r4
   1a30e:	4798      	blx	r3
   1a310:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   1a314:	3301      	adds	r3, #1
   1a316:	4641      	mov	r1, r8
   1a318:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
   1a31c:	2201      	movs	r2, #1
   1a31e:	e799      	b.n	1a254 <d_print_function_type.isra.11+0xf0>
   1a320:	f04f 0800 	mov.w	r8, #0
   1a324:	4619      	mov	r1, r3
   1a326:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
   1a32a:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   1a32e:	f884 80ff 	strb.w	r8, [r4, #255]	; 0xff
   1a332:	4620      	mov	r0, r4
   1a334:	4798      	blx	r3
   1a336:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   1a33a:	1c5a      	adds	r2, r3, #1
   1a33c:	f8c4 2124 	str.w	r2, [r4, #292]	; 0x124
   1a340:	4643      	mov	r3, r8
   1a342:	2101      	movs	r1, #1
   1a344:	e739      	b.n	1a1ba <d_print_function_type.isra.11+0x56>
   1a346:	bf00      	nop
   1a348:	00043107 	.word	0x00043107

0001a34c <d_print_expr_op>:
   1a34c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1a350:	7815      	ldrb	r5, [r2, #0]
   1a352:	2d31      	cmp	r5, #49	; 0x31
   1a354:	b082      	sub	sp, #8
   1a356:	4613      	mov	r3, r2
   1a358:	4604      	mov	r4, r0
   1a35a:	d00d      	beq.n	1a378 <d_print_expr_op+0x2c>
   1a35c:	f8d0 5128 	ldr.w	r5, [r0, #296]	; 0x128
   1a360:	f8c0 d128 	str.w	sp, [r0, #296]	; 0x128
   1a364:	e88d 0028 	stmia.w	sp, {r3, r5}
   1a368:	f7fc fc64 	bl	16c34 <d_print_comp_inner>
   1a36c:	9b01      	ldr	r3, [sp, #4]
   1a36e:	f8c4 3128 	str.w	r3, [r4, #296]	; 0x128
   1a372:	b002      	add	sp, #8
   1a374:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   1a378:	6853      	ldr	r3, [r2, #4]
   1a37a:	689f      	ldr	r7, [r3, #8]
   1a37c:	685d      	ldr	r5, [r3, #4]
   1a37e:	2f00      	cmp	r7, #0
   1a380:	d0f7      	beq.n	1a372 <d_print_expr_op+0x26>
   1a382:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
   1a386:	442f      	add	r7, r5
   1a388:	f04f 0800 	mov.w	r8, #0
   1a38c:	e008      	b.n	1a3a0 <d_print_expr_op+0x54>
   1a38e:	460b      	mov	r3, r1
   1a390:	3101      	adds	r1, #1
   1a392:	42bd      	cmp	r5, r7
   1a394:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
   1a398:	54e6      	strb	r6, [r4, r3]
   1a39a:	f884 6104 	strb.w	r6, [r4, #260]	; 0x104
   1a39e:	d0e8      	beq.n	1a372 <d_print_expr_op+0x26>
   1a3a0:	29ff      	cmp	r1, #255	; 0xff
   1a3a2:	f815 6b01 	ldrb.w	r6, [r5], #1
   1a3a6:	d1f2      	bne.n	1a38e <d_print_expr_op+0x42>
   1a3a8:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   1a3ac:	f884 80ff 	strb.w	r8, [r4, #255]	; 0xff
   1a3b0:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
   1a3b4:	4620      	mov	r0, r4
   1a3b6:	4798      	blx	r3
   1a3b8:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   1a3bc:	3301      	adds	r3, #1
   1a3be:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
   1a3c2:	2101      	movs	r1, #1
   1a3c4:	2300      	movs	r3, #0
   1a3c6:	e7e4      	b.n	1a392 <d_print_expr_op+0x46>

0001a3c8 <d_print_subexpr>:
   1a3c8:	b5f0      	push	{r4, r5, r6, r7, lr}
   1a3ca:	7813      	ldrb	r3, [r2, #0]
   1a3cc:	2b01      	cmp	r3, #1
   1a3ce:	b083      	sub	sp, #12
   1a3d0:	4615      	mov	r5, r2
   1a3d2:	460e      	mov	r6, r1
   1a3d4:	4604      	mov	r4, r0
   1a3d6:	d929      	bls.n	1a42c <d_print_subexpr+0x64>
   1a3d8:	2b30      	cmp	r3, #48	; 0x30
   1a3da:	d027      	beq.n	1a42c <d_print_subexpr+0x64>
   1a3dc:	2b06      	cmp	r3, #6
   1a3de:	d025      	beq.n	1a42c <d_print_subexpr+0x64>
   1a3e0:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
   1a3e4:	29ff      	cmp	r1, #255	; 0xff
   1a3e6:	d031      	beq.n	1a44c <d_print_subexpr+0x84>
   1a3e8:	1c4a      	adds	r2, r1, #1
   1a3ea:	2328      	movs	r3, #40	; 0x28
   1a3ec:	f8c4 2100 	str.w	r2, [r4, #256]	; 0x100
   1a3f0:	5463      	strb	r3, [r4, r1]
   1a3f2:	462a      	mov	r2, r5
   1a3f4:	4631      	mov	r1, r6
   1a3f6:	f884 3104 	strb.w	r3, [r4, #260]	; 0x104
   1a3fa:	4620      	mov	r0, r4
   1a3fc:	f8d4 3128 	ldr.w	r3, [r4, #296]	; 0x128
   1a400:	f8c4 d128 	str.w	sp, [r4, #296]	; 0x128
   1a404:	9301      	str	r3, [sp, #4]
   1a406:	9500      	str	r5, [sp, #0]
   1a408:	f7fc fc14 	bl	16c34 <d_print_comp_inner>
   1a40c:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
   1a410:	9b01      	ldr	r3, [sp, #4]
   1a412:	f8c4 3128 	str.w	r3, [r4, #296]	; 0x128
   1a416:	29ff      	cmp	r1, #255	; 0xff
   1a418:	d028      	beq.n	1a46c <d_print_subexpr+0xa4>
   1a41a:	1c4a      	adds	r2, r1, #1
   1a41c:	2329      	movs	r3, #41	; 0x29
   1a41e:	f8c4 2100 	str.w	r2, [r4, #256]	; 0x100
   1a422:	5463      	strb	r3, [r4, r1]
   1a424:	f884 3104 	strb.w	r3, [r4, #260]	; 0x104
   1a428:	b003      	add	sp, #12
   1a42a:	bdf0      	pop	{r4, r5, r6, r7, pc}
   1a42c:	f8d4 3128 	ldr.w	r3, [r4, #296]	; 0x128
   1a430:	f8c4 d128 	str.w	sp, [r4, #296]	; 0x128
   1a434:	4631      	mov	r1, r6
   1a436:	462a      	mov	r2, r5
   1a438:	4620      	mov	r0, r4
   1a43a:	9301      	str	r3, [sp, #4]
   1a43c:	9500      	str	r5, [sp, #0]
   1a43e:	f7fc fbf9 	bl	16c34 <d_print_comp_inner>
   1a442:	9b01      	ldr	r3, [sp, #4]
   1a444:	f8c4 3128 	str.w	r3, [r4, #296]	; 0x128
   1a448:	b003      	add	sp, #12
   1a44a:	bdf0      	pop	{r4, r5, r6, r7, pc}
   1a44c:	2700      	movs	r7, #0
   1a44e:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   1a452:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
   1a456:	f884 70ff 	strb.w	r7, [r4, #255]	; 0xff
   1a45a:	4798      	blx	r3
   1a45c:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   1a460:	3301      	adds	r3, #1
   1a462:	4639      	mov	r1, r7
   1a464:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
   1a468:	2201      	movs	r2, #1
   1a46a:	e7be      	b.n	1a3ea <d_print_subexpr+0x22>
   1a46c:	2500      	movs	r5, #0
   1a46e:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   1a472:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
   1a476:	f884 50ff 	strb.w	r5, [r4, #255]	; 0xff
   1a47a:	4620      	mov	r0, r4
   1a47c:	4798      	blx	r3
   1a47e:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   1a482:	3301      	adds	r3, #1
   1a484:	4629      	mov	r1, r5
   1a486:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
   1a48a:	2201      	movs	r2, #1
   1a48c:	e7c6      	b.n	1a41c <d_print_subexpr+0x54>
   1a48e:	bf00      	nop

0001a490 <d_maybe_print_fold_expression.isra.15>:
   1a490:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1a494:	6852      	ldr	r2, [r2, #4]
   1a496:	6812      	ldr	r2, [r2, #0]
   1a498:	7815      	ldrb	r5, [r2, #0]
   1a49a:	2d66      	cmp	r5, #102	; 0x66
   1a49c:	d002      	beq.n	1a4a4 <d_maybe_print_fold_expression.isra.15+0x14>
   1a49e:	2000      	movs	r0, #0
   1a4a0:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1a4a4:	681b      	ldr	r3, [r3, #0]
   1a4a6:	f8d0 7120 	ldr.w	r7, [r0, #288]	; 0x120
   1a4aa:	f8d3 9008 	ldr.w	r9, [r3, #8]
   1a4ae:	f8d3 8004 	ldr.w	r8, [r3, #4]
   1a4b2:	f899 3000 	ldrb.w	r3, [r9]
   1a4b6:	2b3b      	cmp	r3, #59	; 0x3b
   1a4b8:	f04f 33ff 	mov.w	r3, #4294967295
   1a4bc:	bf04      	itt	eq
   1a4be:	f8d9 5008 	ldreq.w	r5, [r9, #8]
   1a4c2:	f8d9 9004 	ldreq.w	r9, [r9, #4]
   1a4c6:	f8c0 3120 	str.w	r3, [r0, #288]	; 0x120
   1a4ca:	7853      	ldrb	r3, [r2, #1]
   1a4cc:	f1a3 034c 	sub.w	r3, r3, #76	; 0x4c
   1a4d0:	bf18      	it	ne
   1a4d2:	2500      	movne	r5, #0
   1a4d4:	460e      	mov	r6, r1
   1a4d6:	4604      	mov	r4, r0
   1a4d8:	2b26      	cmp	r3, #38	; 0x26
   1a4da:	d82b      	bhi.n	1a534 <d_maybe_print_fold_expression.isra.15+0xa4>
   1a4dc:	e8df f003 	tbb	[pc, r3]
   1a4e0:	2a2a2a90 	.word	0x2a2a2a90
   1a4e4:	2a902a2a 	.word	0x2a902a2a
   1a4e8:	2a2a2a2a 	.word	0x2a2a2a2a
   1a4ec:	2a2a2a2a 	.word	0x2a2a2a2a
   1a4f0:	2a2a2a2a 	.word	0x2a2a2a2a
   1a4f4:	2a2a2a2a 	.word	0x2a2a2a2a
   1a4f8:	2a2a2a2a 	.word	0x2a2a2a2a
   1a4fc:	2a2a2a2a 	.word	0x2a2a2a2a
   1a500:	2a2a2a6a 	.word	0x2a2a2a6a
   1a504:	2a2a      	.short	0x2a2a
   1a506:	2f          	.byte	0x2f
   1a507:	00          	.byte	0x00
   1a508:	4642      	mov	r2, r8
   1a50a:	4631      	mov	r1, r6
   1a50c:	4620      	mov	r0, r4
   1a50e:	f7ff ff1d 	bl	1a34c <d_print_expr_op>
   1a512:	464a      	mov	r2, r9
   1a514:	4631      	mov	r1, r6
   1a516:	4620      	mov	r0, r4
   1a518:	f7ff ff56 	bl	1a3c8 <d_print_subexpr>
   1a51c:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
   1a520:	29ff      	cmp	r1, #255	; 0xff
   1a522:	f000 80b2 	beq.w	1a68a <d_maybe_print_fold_expression.isra.15+0x1fa>
   1a526:	1c4a      	adds	r2, r1, #1
   1a528:	2329      	movs	r3, #41	; 0x29
   1a52a:	f8c4 2100 	str.w	r2, [r4, #256]	; 0x100
   1a52e:	5463      	strb	r3, [r4, r1]
   1a530:	f884 3104 	strb.w	r3, [r4, #260]	; 0x104
   1a534:	f8c4 7120 	str.w	r7, [r4, #288]	; 0x120
   1a538:	2001      	movs	r0, #1
   1a53a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1a53e:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
   1a542:	29ff      	cmp	r1, #255	; 0xff
   1a544:	f000 80c5 	beq.w	1a6d2 <d_maybe_print_fold_expression.isra.15+0x242>
   1a548:	1c4a      	adds	r2, r1, #1
   1a54a:	2328      	movs	r3, #40	; 0x28
   1a54c:	f8c4 2100 	str.w	r2, [r4, #256]	; 0x100
   1a550:	4620      	mov	r0, r4
   1a552:	5463      	strb	r3, [r4, r1]
   1a554:	464a      	mov	r2, r9
   1a556:	4631      	mov	r1, r6
   1a558:	f884 3104 	strb.w	r3, [r4, #260]	; 0x104
   1a55c:	4d65      	ldr	r5, [pc, #404]	; (1a6f4 <d_maybe_print_fold_expression.isra.15+0x264>)
   1a55e:	f7ff ff33 	bl	1a3c8 <d_print_subexpr>
   1a562:	4642      	mov	r2, r8
   1a564:	4631      	mov	r1, r6
   1a566:	4620      	mov	r0, r4
   1a568:	f7ff fef0 	bl	1a34c <d_print_expr_op>
   1a56c:	f105 0904 	add.w	r9, r5, #4
   1a570:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
   1a574:	f04f 0800 	mov.w	r8, #0
   1a578:	e008      	b.n	1a58c <d_maybe_print_fold_expression.isra.15+0xfc>
   1a57a:	460b      	mov	r3, r1
   1a57c:	3101      	adds	r1, #1
   1a57e:	45a9      	cmp	r9, r5
   1a580:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
   1a584:	54e6      	strb	r6, [r4, r3]
   1a586:	f884 6104 	strb.w	r6, [r4, #260]	; 0x104
   1a58a:	d0d3      	beq.n	1a534 <d_maybe_print_fold_expression.isra.15+0xa4>
   1a58c:	29ff      	cmp	r1, #255	; 0xff
   1a58e:	f815 6b01 	ldrb.w	r6, [r5], #1
   1a592:	d1f2      	bne.n	1a57a <d_maybe_print_fold_expression.isra.15+0xea>
   1a594:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   1a598:	f884 80ff 	strb.w	r8, [r4, #255]	; 0xff
   1a59c:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
   1a5a0:	4620      	mov	r0, r4
   1a5a2:	4798      	blx	r3
   1a5a4:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   1a5a8:	3301      	adds	r3, #1
   1a5aa:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
   1a5ae:	2101      	movs	r1, #1
   1a5b0:	2300      	movs	r3, #0
   1a5b2:	e7e4      	b.n	1a57e <d_maybe_print_fold_expression.isra.15+0xee>
   1a5b4:	4d50      	ldr	r5, [pc, #320]	; (1a6f8 <d_maybe_print_fold_expression.isra.15+0x268>)
   1a5b6:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
   1a5ba:	f105 0b04 	add.w	fp, r5, #4
   1a5be:	e009      	b.n	1a5d4 <d_maybe_print_fold_expression.isra.15+0x144>
   1a5c0:	460b      	mov	r3, r1
   1a5c2:	3101      	adds	r1, #1
   1a5c4:	455d      	cmp	r5, fp
   1a5c6:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
   1a5ca:	f804 a003 	strb.w	sl, [r4, r3]
   1a5ce:	f884 a104 	strb.w	sl, [r4, #260]	; 0x104
   1a5d2:	d099      	beq.n	1a508 <d_maybe_print_fold_expression.isra.15+0x78>
   1a5d4:	29ff      	cmp	r1, #255	; 0xff
   1a5d6:	f815 ab01 	ldrb.w	sl, [r5], #1
   1a5da:	d1f1      	bne.n	1a5c0 <d_maybe_print_fold_expression.isra.15+0x130>
   1a5dc:	f04f 0300 	mov.w	r3, #0
   1a5e0:	f884 30ff 	strb.w	r3, [r4, #255]	; 0xff
   1a5e4:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
   1a5e8:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   1a5ec:	4620      	mov	r0, r4
   1a5ee:	4798      	blx	r3
   1a5f0:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   1a5f4:	3301      	adds	r3, #1
   1a5f6:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
   1a5fa:	2101      	movs	r1, #1
   1a5fc:	2300      	movs	r3, #0
   1a5fe:	e7e1      	b.n	1a5c4 <d_maybe_print_fold_expression.isra.15+0x134>
   1a600:	f8d0 3100 	ldr.w	r3, [r0, #256]	; 0x100
   1a604:	2bff      	cmp	r3, #255	; 0xff
   1a606:	d051      	beq.n	1a6ac <d_maybe_print_fold_expression.isra.15+0x21c>
   1a608:	1c59      	adds	r1, r3, #1
   1a60a:	f04f 0e28 	mov.w	lr, #40	; 0x28
   1a60e:	464a      	mov	r2, r9
   1a610:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
   1a614:	4620      	mov	r0, r4
   1a616:	f804 e003 	strb.w	lr, [r4, r3]
   1a61a:	4631      	mov	r1, r6
   1a61c:	f884 e104 	strb.w	lr, [r4, #260]	; 0x104
   1a620:	f8df 90d8 	ldr.w	r9, [pc, #216]	; 1a6fc <d_maybe_print_fold_expression.isra.15+0x26c>
   1a624:	f7ff fed0 	bl	1a3c8 <d_print_subexpr>
   1a628:	4631      	mov	r1, r6
   1a62a:	4642      	mov	r2, r8
   1a62c:	4620      	mov	r0, r4
   1a62e:	f7ff fe8d 	bl	1a34c <d_print_expr_op>
   1a632:	f109 0b03 	add.w	fp, r9, #3
   1a636:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
   1a63a:	e009      	b.n	1a650 <d_maybe_print_fold_expression.isra.15+0x1c0>
   1a63c:	460b      	mov	r3, r1
   1a63e:	3101      	adds	r1, #1
   1a640:	45cb      	cmp	fp, r9
   1a642:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
   1a646:	f804 a003 	strb.w	sl, [r4, r3]
   1a64a:	f884 a104 	strb.w	sl, [r4, #260]	; 0x104
   1a64e:	d015      	beq.n	1a67c <d_maybe_print_fold_expression.isra.15+0x1ec>
   1a650:	29ff      	cmp	r1, #255	; 0xff
   1a652:	f819 ab01 	ldrb.w	sl, [r9], #1
   1a656:	d1f1      	bne.n	1a63c <d_maybe_print_fold_expression.isra.15+0x1ac>
   1a658:	f04f 0300 	mov.w	r3, #0
   1a65c:	f884 30ff 	strb.w	r3, [r4, #255]	; 0xff
   1a660:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
   1a664:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   1a668:	4620      	mov	r0, r4
   1a66a:	4798      	blx	r3
   1a66c:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   1a670:	3301      	adds	r3, #1
   1a672:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
   1a676:	2101      	movs	r1, #1
   1a678:	2300      	movs	r3, #0
   1a67a:	e7e1      	b.n	1a640 <d_maybe_print_fold_expression.isra.15+0x1b0>
   1a67c:	4642      	mov	r2, r8
   1a67e:	4631      	mov	r1, r6
   1a680:	4620      	mov	r0, r4
   1a682:	f7ff fe63 	bl	1a34c <d_print_expr_op>
   1a686:	462a      	mov	r2, r5
   1a688:	e744      	b.n	1a514 <d_maybe_print_fold_expression.isra.15+0x84>
   1a68a:	2500      	movs	r5, #0
   1a68c:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   1a690:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
   1a694:	f884 50ff 	strb.w	r5, [r4, #255]	; 0xff
   1a698:	4620      	mov	r0, r4
   1a69a:	4798      	blx	r3
   1a69c:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   1a6a0:	3301      	adds	r3, #1
   1a6a2:	4629      	mov	r1, r5
   1a6a4:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
   1a6a8:	2201      	movs	r2, #1
   1a6aa:	e73d      	b.n	1a528 <d_maybe_print_fold_expression.isra.15+0x98>
   1a6ac:	f04f 0a00 	mov.w	sl, #0
   1a6b0:	4619      	mov	r1, r3
   1a6b2:	f8d0 210c 	ldr.w	r2, [r0, #268]	; 0x10c
   1a6b6:	f8d0 3108 	ldr.w	r3, [r0, #264]	; 0x108
   1a6ba:	f880 a0ff 	strb.w	sl, [r0, #255]	; 0xff
   1a6be:	4798      	blx	r3
   1a6c0:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   1a6c4:	f8c4 a100 	str.w	sl, [r4, #256]	; 0x100
   1a6c8:	1c5a      	adds	r2, r3, #1
   1a6ca:	f8c4 2124 	str.w	r2, [r4, #292]	; 0x124
   1a6ce:	4653      	mov	r3, sl
   1a6d0:	e79a      	b.n	1a608 <d_maybe_print_fold_expression.isra.15+0x178>
   1a6d2:	2500      	movs	r5, #0
   1a6d4:	f8d0 3108 	ldr.w	r3, [r0, #264]	; 0x108
   1a6d8:	f8d0 210c 	ldr.w	r2, [r0, #268]	; 0x10c
   1a6dc:	f880 50ff 	strb.w	r5, [r0, #255]	; 0xff
   1a6e0:	4798      	blx	r3
   1a6e2:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   1a6e6:	3301      	adds	r3, #1
   1a6e8:	4629      	mov	r1, r5
   1a6ea:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
   1a6ee:	2201      	movs	r2, #1
   1a6f0:	e72b      	b.n	1a54a <d_maybe_print_fold_expression.isra.15+0xba>
   1a6f2:	bf00      	nop
   1a6f4:	00024648 	.word	0x00024648
   1a6f8:	00024640 	.word	0x00024640
   1a6fc:	00022a90 	.word	0x00022a90

0001a700 <d_demangle_callback.constprop.17>:
   1a700:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1a704:	b0e7      	sub	sp, #412	; 0x19c
   1a706:	f890 9000 	ldrb.w	r9, [r0]
   1a70a:	f1b9 0f5f 	cmp.w	r9, #95	; 0x5f
   1a70e:	af00      	add	r7, sp, #0
   1a710:	4605      	mov	r5, r0
   1a712:	4688      	mov	r8, r1
   1a714:	4616      	mov	r6, r2
   1a716:	f000 80f1 	beq.w	1a8fc <d_demangle_callback.constprop.17+0x1fc>
   1a71a:	2208      	movs	r2, #8
   1a71c:	49bd      	ldr	r1, [pc, #756]	; (1aa14 <d_demangle_callback.constprop.17+0x314>)
   1a71e:	4628      	mov	r0, r5
   1a720:	f004 fb1c 	bl	1ed5c <strncmp>
   1a724:	b948      	cbnz	r0, 1a73a <d_demangle_callback.constprop.17+0x3a>
   1a726:	7a2b      	ldrb	r3, [r5, #8]
   1a728:	2b2e      	cmp	r3, #46	; 0x2e
   1a72a:	f000 80d6 	beq.w	1a8da <d_demangle_callback.constprop.17+0x1da>
   1a72e:	2b5f      	cmp	r3, #95	; 0x5f
   1a730:	f000 80d3 	beq.w	1a8da <d_demangle_callback.constprop.17+0x1da>
   1a734:	2b24      	cmp	r3, #36	; 0x24
   1a736:	f000 80d0 	beq.w	1a8da <d_demangle_callback.constprop.17+0x1da>
   1a73a:	f04f 0a00 	mov.w	sl, #0
   1a73e:	4628      	mov	r0, r5
   1a740:	f004 fa9e 	bl	1ec80 <strlen>
   1a744:	ea4f 0b40 	mov.w	fp, r0, lsl #1
   1a748:	0083      	lsls	r3, r0, #2
   1a74a:	eb03 020b 	add.w	r2, r3, fp
   1a74e:	0092      	lsls	r2, r2, #2
   1a750:	3208      	adds	r2, #8
   1a752:	330a      	adds	r3, #10
   1a754:	ebad 0d02 	sub.w	sp, sp, r2
   1a758:	f023 0307 	bic.w	r3, r3, #7
   1a75c:	2400      	movs	r4, #0
   1a75e:	466a      	mov	r2, sp
   1a760:	1829      	adds	r1, r5, r0
   1a762:	ebad 0d03 	sub.w	sp, sp, r3
   1a766:	f1ba 0f01 	cmp.w	sl, #1
   1a76a:	f04f 0311 	mov.w	r3, #17
   1a76e:	627a      	str	r2, [r7, #36]	; 0x24
   1a770:	f8c7 d030 	str.w	sp, [r7, #48]	; 0x30
   1a774:	f8c7 b02c 	str.w	fp, [r7, #44]	; 0x2c
   1a778:	617d      	str	r5, [r7, #20]
   1a77a:	623d      	str	r5, [r7, #32]
   1a77c:	63b8      	str	r0, [r7, #56]	; 0x38
   1a77e:	61b9      	str	r1, [r7, #24]
   1a780:	61fb      	str	r3, [r7, #28]
   1a782:	62bc      	str	r4, [r7, #40]	; 0x28
   1a784:	637c      	str	r4, [r7, #52]	; 0x34
   1a786:	63fc      	str	r4, [r7, #60]	; 0x3c
   1a788:	643c      	str	r4, [r7, #64]	; 0x40
   1a78a:	647c      	str	r4, [r7, #68]	; 0x44
   1a78c:	64bc      	str	r4, [r7, #72]	; 0x48
   1a78e:	64fc      	str	r4, [r7, #76]	; 0x4c
   1a790:	f000 80bb 	beq.w	1a90a <d_demangle_callback.constprop.17+0x20a>
   1a794:	f0c0 80cf 	bcc.w	1a936 <d_demangle_callback.constprop.17+0x236>
   1a798:	7aeb      	ldrb	r3, [r5, #11]
   1a79a:	f1ba 0f02 	cmp.w	sl, #2
   1a79e:	bf18      	it	ne
   1a7a0:	f04f 0944 	movne.w	r9, #68	; 0x44
   1a7a4:	f105 0a0b 	add.w	sl, r5, #11
   1a7a8:	bf08      	it	eq
   1a7aa:	f04f 0943 	moveq.w	r9, #67	; 0x43
   1a7ae:	2b5f      	cmp	r3, #95	; 0x5f
   1a7b0:	f8c7 a020 	str.w	sl, [r7, #32]
   1a7b4:	f000 80b2 	beq.w	1a91c <d_demangle_callback.constprop.17+0x21c>
   1a7b8:	4650      	mov	r0, sl
   1a7ba:	607a      	str	r2, [r7, #4]
   1a7bc:	f004 fa60 	bl	1ec80 <strlen>
   1a7c0:	f1bb 0f00 	cmp.w	fp, #0
   1a7c4:	687a      	ldr	r2, [r7, #4]
   1a7c6:	f340 80bf 	ble.w	1a948 <d_demangle_callback.constprop.17+0x248>
   1a7ca:	2301      	movs	r3, #1
   1a7cc:	62bb      	str	r3, [r7, #40]	; 0x28
   1a7ce:	2800      	cmp	r0, #0
   1a7d0:	f000 80ba 	beq.w	1a948 <d_demangle_callback.constprop.17+0x248>
   1a7d4:	2300      	movs	r3, #0
   1a7d6:	f8c2 a004 	str.w	sl, [r2, #4]
   1a7da:	6090      	str	r0, [r2, #8]
   1a7dc:	7013      	strb	r3, [r2, #0]
   1a7de:	4649      	mov	r1, r9
   1a7e0:	2300      	movs	r3, #0
   1a7e2:	f107 0014 	add.w	r0, r7, #20
   1a7e6:	f7f9 fe31 	bl	1444c <d_make_comp>
   1a7ea:	6a3c      	ldr	r4, [r7, #32]
   1a7ec:	4605      	mov	r5, r0
   1a7ee:	4620      	mov	r0, r4
   1a7f0:	f004 fa46 	bl	1ec80 <strlen>
   1a7f4:	1823      	adds	r3, r4, r0
   1a7f6:	623b      	str	r3, [r7, #32]
   1a7f8:	f814 9000 	ldrb.w	r9, [r4, r0]
   1a7fc:	f1b9 0f00 	cmp.w	r9, #0
   1a800:	f040 8086 	bne.w	1a910 <d_demangle_callback.constprop.17+0x210>
   1a804:	2d00      	cmp	r5, #0
   1a806:	f000 8083 	beq.w	1a910 <d_demangle_callback.constprop.17+0x210>
   1a80a:	f107 0450 	add.w	r4, r7, #80	; 0x50
   1a80e:	462a      	mov	r2, r5
   1a810:	f507 71c2 	add.w	r1, r7, #388	; 0x184
   1a814:	f507 70c8 	add.w	r0, r7, #400	; 0x190
   1a818:	f8c4 8108 	str.w	r8, [r4, #264]	; 0x108
   1a81c:	f8c4 610c 	str.w	r6, [r4, #268]	; 0x10c
   1a820:	f8c4 9100 	str.w	r9, [r4, #256]	; 0x100
   1a824:	f884 9104 	strb.w	r9, [r4, #260]	; 0x104
   1a828:	f8c4 9110 	str.w	r9, [r4, #272]	; 0x110
   1a82c:	f8c4 9114 	str.w	r9, [r4, #276]	; 0x114
   1a830:	f8c4 9120 	str.w	r9, [r4, #288]	; 0x120
   1a834:	f8c4 9124 	str.w	r9, [r4, #292]	; 0x124
   1a838:	f8c4 9118 	str.w	r9, [r4, #280]	; 0x118
   1a83c:	f8c4 911c 	str.w	r9, [r4, #284]	; 0x11c
   1a840:	f8c4 9128 	str.w	r9, [r4, #296]	; 0x128
   1a844:	f8c4 912c 	str.w	r9, [r4, #300]	; 0x12c
   1a848:	f8c4 9130 	str.w	r9, [r4, #304]	; 0x130
   1a84c:	f8c4 9134 	str.w	r9, [r4, #308]	; 0x134
   1a850:	f8c4 9138 	str.w	r9, [r4, #312]	; 0x138
   1a854:	f8c4 913c 	str.w	r9, [r4, #316]	; 0x13c
   1a858:	f8c4 9140 	str.w	r9, [r4, #320]	; 0x140
   1a85c:	f7f9 fec4 	bl	145e8 <d_count_templates_scopes>
   1a860:	f8d4 2134 	ldr.w	r2, [r4, #308]	; 0x134
   1a864:	f8d4 1140 	ldr.w	r1, [r4, #320]	; 0x140
   1a868:	f8d4 3128 	ldr.w	r3, [r4, #296]	; 0x128
   1a86c:	613b      	str	r3, [r7, #16]
   1a86e:	00d0      	lsls	r0, r2, #3
   1a870:	fb01 f102 	mul.w	r1, r1, r2
   1a874:	3008      	adds	r0, #8
   1a876:	46e8      	mov	r8, sp
   1a878:	00ca      	lsls	r2, r1, #3
   1a87a:	ebad 0d00 	sub.w	sp, sp, r0
   1a87e:	4668      	mov	r0, sp
   1a880:	3208      	adds	r2, #8
   1a882:	ebad 0d02 	sub.w	sp, sp, r2
   1a886:	f107 060c 	add.w	r6, r7, #12
   1a88a:	462a      	mov	r2, r5
   1a88c:	f8c4 012c 	str.w	r0, [r4, #300]	; 0x12c
   1a890:	f8c4 1140 	str.w	r1, [r4, #320]	; 0x140
   1a894:	4620      	mov	r0, r4
   1a896:	2111      	movs	r1, #17
   1a898:	f8c4 d138 	str.w	sp, [r4, #312]	; 0x138
   1a89c:	60fd      	str	r5, [r7, #12]
   1a89e:	f8c4 9144 	str.w	r9, [r4, #324]	; 0x144
   1a8a2:	f8c4 6128 	str.w	r6, [r4, #296]	; 0x128
   1a8a6:	f7fc f9c5 	bl	16c34 <d_print_comp_inner>
   1a8aa:	693b      	ldr	r3, [r7, #16]
   1a8ac:	f8c4 3128 	str.w	r3, [r4, #296]	; 0x128
   1a8b0:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
   1a8b4:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   1a8b8:	f804 9001 	strb.w	r9, [r4, r1]
   1a8bc:	4620      	mov	r0, r4
   1a8be:	46c5      	mov	sp, r8
   1a8c0:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
   1a8c4:	4798      	blx	r3
   1a8c6:	f8d4 0118 	ldr.w	r0, [r4, #280]	; 0x118
   1a8ca:	fab0 f080 	clz	r0, r0
   1a8ce:	0940      	lsrs	r0, r0, #5
   1a8d0:	f507 77ce 	add.w	r7, r7, #412	; 0x19c
   1a8d4:	46bd      	mov	sp, r7
   1a8d6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1a8da:	7a6b      	ldrb	r3, [r5, #9]
   1a8dc:	2b44      	cmp	r3, #68	; 0x44
   1a8de:	d002      	beq.n	1a8e6 <d_demangle_callback.constprop.17+0x1e6>
   1a8e0:	2b49      	cmp	r3, #73	; 0x49
   1a8e2:	f47f af2a 	bne.w	1a73a <d_demangle_callback.constprop.17+0x3a>
   1a8e6:	7aaa      	ldrb	r2, [r5, #10]
   1a8e8:	2a5f      	cmp	r2, #95	; 0x5f
   1a8ea:	f47f af26 	bne.w	1a73a <d_demangle_callback.constprop.17+0x3a>
   1a8ee:	2b49      	cmp	r3, #73	; 0x49
   1a8f0:	bf14      	ite	ne
   1a8f2:	f04f 0a03 	movne.w	sl, #3
   1a8f6:	f04f 0a02 	moveq.w	sl, #2
   1a8fa:	e720      	b.n	1a73e <d_demangle_callback.constprop.17+0x3e>
   1a8fc:	7843      	ldrb	r3, [r0, #1]
   1a8fe:	2b5a      	cmp	r3, #90	; 0x5a
   1a900:	f47f af0b 	bne.w	1a71a <d_demangle_callback.constprop.17+0x1a>
   1a904:	f04f 0a01 	mov.w	sl, #1
   1a908:	e719      	b.n	1a73e <d_demangle_callback.constprop.17+0x3e>
   1a90a:	f1b9 0f5f 	cmp.w	r9, #95	; 0x5f
   1a90e:	d01d      	beq.n	1a94c <d_demangle_callback.constprop.17+0x24c>
   1a910:	2000      	movs	r0, #0
   1a912:	f507 77ce 	add.w	r7, r7, #412	; 0x19c
   1a916:	46bd      	mov	sp, r7
   1a918:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1a91c:	7b2b      	ldrb	r3, [r5, #12]
   1a91e:	2b5a      	cmp	r3, #90	; 0x5a
   1a920:	f47f af4a 	bne.w	1a7b8 <d_demangle_callback.constprop.17+0xb8>
   1a924:	350d      	adds	r5, #13
   1a926:	4621      	mov	r1, r4
   1a928:	f107 0014 	add.w	r0, r7, #20
   1a92c:	623d      	str	r5, [r7, #32]
   1a92e:	f7fb fe35 	bl	1659c <d_encoding>
   1a932:	4602      	mov	r2, r0
   1a934:	e753      	b.n	1a7de <d_demangle_callback.constprop.17+0xde>
   1a936:	f107 0014 	add.w	r0, r7, #20
   1a93a:	f7fb f817 	bl	1596c <d_type>
   1a93e:	6a3b      	ldr	r3, [r7, #32]
   1a940:	4605      	mov	r5, r0
   1a942:	f893 9000 	ldrb.w	r9, [r3]
   1a946:	e759      	b.n	1a7fc <d_demangle_callback.constprop.17+0xfc>
   1a948:	2200      	movs	r2, #0
   1a94a:	e748      	b.n	1a7de <d_demangle_callback.constprop.17+0xde>
   1a94c:	786b      	ldrb	r3, [r5, #1]
   1a94e:	2b5a      	cmp	r3, #90	; 0x5a
   1a950:	d1de      	bne.n	1a910 <d_demangle_callback.constprop.17+0x210>
   1a952:	3502      	adds	r5, #2
   1a954:	4651      	mov	r1, sl
   1a956:	f107 0014 	add.w	r0, r7, #20
   1a95a:	623d      	str	r5, [r7, #32]
   1a95c:	f7fb fe1e 	bl	1659c <d_encoding>
   1a960:	69fb      	ldr	r3, [r7, #28]
   1a962:	07db      	lsls	r3, r3, #31
   1a964:	4605      	mov	r5, r0
   1a966:	d551      	bpl.n	1aa0c <d_demangle_callback.constprop.17+0x30c>
   1a968:	6a38      	ldr	r0, [r7, #32]
   1a96a:	f890 9000 	ldrb.w	r9, [r0]
   1a96e:	f1b9 0f2e 	cmp.w	r9, #46	; 0x2e
   1a972:	f47f af43 	bne.w	1a7fc <d_demangle_callback.constprop.17+0xfc>
   1a976:	7843      	ldrb	r3, [r0, #1]
   1a978:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
   1a97c:	2a19      	cmp	r2, #25
   1a97e:	d939      	bls.n	1a9f4 <d_demangle_callback.constprop.17+0x2f4>
   1a980:	2b5f      	cmp	r3, #95	; 0x5f
   1a982:	d037      	beq.n	1a9f4 <d_demangle_callback.constprop.17+0x2f4>
   1a984:	3b30      	subs	r3, #48	; 0x30
   1a986:	2b09      	cmp	r3, #9
   1a988:	d840      	bhi.n	1aa0c <d_demangle_callback.constprop.17+0x30c>
   1a98a:	7803      	ldrb	r3, [r0, #0]
   1a98c:	4602      	mov	r2, r0
   1a98e:	2b2e      	cmp	r3, #46	; 0x2e
   1a990:	d112      	bne.n	1a9b8 <d_demangle_callback.constprop.17+0x2b8>
   1a992:	7853      	ldrb	r3, [r2, #1]
   1a994:	3b30      	subs	r3, #48	; 0x30
   1a996:	2b09      	cmp	r3, #9
   1a998:	d80e      	bhi.n	1a9b8 <d_demangle_callback.constprop.17+0x2b8>
   1a99a:	7893      	ldrb	r3, [r2, #2]
   1a99c:	f1a3 0130 	sub.w	r1, r3, #48	; 0x30
   1a9a0:	2909      	cmp	r1, #9
   1a9a2:	f102 0202 	add.w	r2, r2, #2
   1a9a6:	d8f2      	bhi.n	1a98e <d_demangle_callback.constprop.17+0x28e>
   1a9a8:	f812 3f01 	ldrb.w	r3, [r2, #1]!
   1a9ac:	f1a3 0130 	sub.w	r1, r3, #48	; 0x30
   1a9b0:	2909      	cmp	r1, #9
   1a9b2:	d9f9      	bls.n	1a9a8 <d_demangle_callback.constprop.17+0x2a8>
   1a9b4:	2b2e      	cmp	r3, #46	; 0x2e
   1a9b6:	d0ec      	beq.n	1a992 <d_demangle_callback.constprop.17+0x292>
   1a9b8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
   1a9ba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   1a9bc:	623a      	str	r2, [r7, #32]
   1a9be:	4299      	cmp	r1, r3
   1a9c0:	da16      	bge.n	1a9f0 <d_demangle_callback.constprop.17+0x2f0>
   1a9c2:	f8d7 e024 	ldr.w	lr, [r7, #36]	; 0x24
   1a9c6:	1c4b      	adds	r3, r1, #1
   1a9c8:	eb01 0141 	add.w	r1, r1, r1, lsl #1
   1a9cc:	62bb      	str	r3, [r7, #40]	; 0x28
   1a9ce:	eb1e 0381 	adds.w	r3, lr, r1, lsl #2
   1a9d2:	d00d      	beq.n	1a9f0 <d_demangle_callback.constprop.17+0x2f0>
   1a9d4:	1a12      	subs	r2, r2, r0
   1a9d6:	d00b      	beq.n	1a9f0 <d_demangle_callback.constprop.17+0x2f0>
   1a9d8:	f80e 4021 	strb.w	r4, [lr, r1, lsl #2]
   1a9dc:	6058      	str	r0, [r3, #4]
   1a9de:	609a      	str	r2, [r3, #8]
   1a9e0:	462a      	mov	r2, r5
   1a9e2:	214d      	movs	r1, #77	; 0x4d
   1a9e4:	f107 0014 	add.w	r0, r7, #20
   1a9e8:	f7f9 fd30 	bl	1444c <d_make_comp>
   1a9ec:	4605      	mov	r5, r0
   1a9ee:	e7bb      	b.n	1a968 <d_demangle_callback.constprop.17+0x268>
   1a9f0:	2300      	movs	r3, #0
   1a9f2:	e7f5      	b.n	1a9e0 <d_demangle_callback.constprop.17+0x2e0>
   1a9f4:	1c81      	adds	r1, r0, #2
   1a9f6:	460a      	mov	r2, r1
   1a9f8:	f811 3b01 	ldrb.w	r3, [r1], #1
   1a9fc:	f1a3 0e61 	sub.w	lr, r3, #97	; 0x61
   1aa00:	f1be 0f19 	cmp.w	lr, #25
   1aa04:	d9f7      	bls.n	1a9f6 <d_demangle_callback.constprop.17+0x2f6>
   1aa06:	2b5f      	cmp	r3, #95	; 0x5f
   1aa08:	d0f5      	beq.n	1a9f6 <d_demangle_callback.constprop.17+0x2f6>
   1aa0a:	e7c0      	b.n	1a98e <d_demangle_callback.constprop.17+0x28e>
   1aa0c:	6a3b      	ldr	r3, [r7, #32]
   1aa0e:	f893 9000 	ldrb.w	r9, [r3]
   1aa12:	e6f3      	b.n	1a7fc <d_demangle_callback.constprop.17+0xfc>
   1aa14:	000242f0 	.word	0x000242f0

0001aa18 <__cxa_demangle>:
   1aa18:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1aa1c:	b084      	sub	sp, #16
   1aa1e:	b378      	cbz	r0, 1aa80 <__cxa_demangle+0x68>
   1aa20:	b101      	cbz	r1, 1aa24 <__cxa_demangle+0xc>
   1aa22:	b36a      	cbz	r2, 1aa80 <__cxa_demangle+0x68>
   1aa24:	2400      	movs	r4, #0
   1aa26:	4616      	mov	r6, r2
   1aa28:	460d      	mov	r5, r1
   1aa2a:	466a      	mov	r2, sp
   1aa2c:	4927      	ldr	r1, [pc, #156]	; (1aacc <__cxa_demangle+0xb4>)
   1aa2e:	9400      	str	r4, [sp, #0]
   1aa30:	461f      	mov	r7, r3
   1aa32:	9401      	str	r4, [sp, #4]
   1aa34:	9402      	str	r4, [sp, #8]
   1aa36:	9403      	str	r4, [sp, #12]
   1aa38:	f7ff fe62 	bl	1a700 <d_demangle_callback.constprop.17>
   1aa3c:	2800      	cmp	r0, #0
   1aa3e:	d03f      	beq.n	1aac0 <__cxa_demangle+0xa8>
   1aa40:	9b03      	ldr	r3, [sp, #12]
   1aa42:	b1d3      	cbz	r3, 1aa7a <__cxa_demangle+0x62>
   1aa44:	f04f 0801 	mov.w	r8, #1
   1aa48:	9c00      	ldr	r4, [sp, #0]
   1aa4a:	b35c      	cbz	r4, 1aaa4 <__cxa_demangle+0x8c>
   1aa4c:	b33d      	cbz	r5, 1aa9e <__cxa_demangle+0x86>
   1aa4e:	4620      	mov	r0, r4
   1aa50:	f004 f916 	bl	1ec80 <strlen>
   1aa54:	6833      	ldr	r3, [r6, #0]
   1aa56:	4298      	cmp	r0, r3
   1aa58:	d21b      	bcs.n	1aa92 <__cxa_demangle+0x7a>
   1aa5a:	1c42      	adds	r2, r0, #1
   1aa5c:	4621      	mov	r1, r4
   1aa5e:	4628      	mov	r0, r5
   1aa60:	f003 fbce 	bl	1e200 <memcpy>
   1aa64:	4620      	mov	r0, r4
   1aa66:	f003 f879 	bl	1db5c <free>
   1aa6a:	462c      	mov	r4, r5
   1aa6c:	b10f      	cbz	r7, 1aa72 <__cxa_demangle+0x5a>
   1aa6e:	2300      	movs	r3, #0
   1aa70:	603b      	str	r3, [r7, #0]
   1aa72:	4620      	mov	r0, r4
   1aa74:	b004      	add	sp, #16
   1aa76:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   1aa7a:	f8dd 8008 	ldr.w	r8, [sp, #8]
   1aa7e:	e7e3      	b.n	1aa48 <__cxa_demangle+0x30>
   1aa80:	b113      	cbz	r3, 1aa88 <__cxa_demangle+0x70>
   1aa82:	f06f 0202 	mvn.w	r2, #2
   1aa86:	601a      	str	r2, [r3, #0]
   1aa88:	2400      	movs	r4, #0
   1aa8a:	4620      	mov	r0, r4
   1aa8c:	b004      	add	sp, #16
   1aa8e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   1aa92:	4628      	mov	r0, r5
   1aa94:	f003 f862 	bl	1db5c <free>
   1aa98:	f8c6 8000 	str.w	r8, [r6]
   1aa9c:	e7e6      	b.n	1aa6c <__cxa_demangle+0x54>
   1aa9e:	2e00      	cmp	r6, #0
   1aaa0:	d1fa      	bne.n	1aa98 <__cxa_demangle+0x80>
   1aaa2:	e7e3      	b.n	1aa6c <__cxa_demangle+0x54>
   1aaa4:	2f00      	cmp	r7, #0
   1aaa6:	d0ef      	beq.n	1aa88 <__cxa_demangle+0x70>
   1aaa8:	f1b8 0f01 	cmp.w	r8, #1
   1aaac:	d004      	beq.n	1aab8 <__cxa_demangle+0xa0>
   1aaae:	f06f 0301 	mvn.w	r3, #1
   1aab2:	603b      	str	r3, [r7, #0]
   1aab4:	2400      	movs	r4, #0
   1aab6:	e7dc      	b.n	1aa72 <__cxa_demangle+0x5a>
   1aab8:	f04f 33ff 	mov.w	r3, #4294967295
   1aabc:	603b      	str	r3, [r7, #0]
   1aabe:	e7d8      	b.n	1aa72 <__cxa_demangle+0x5a>
   1aac0:	9800      	ldr	r0, [sp, #0]
   1aac2:	f003 f84b 	bl	1db5c <free>
   1aac6:	2f00      	cmp	r7, #0
   1aac8:	d1f1      	bne.n	1aaae <__cxa_demangle+0x96>
   1aaca:	e7dd      	b.n	1aa88 <__cxa_demangle+0x70>
   1aacc:	00014b71 	.word	0x00014b71

0001aad0 <__gcclibcxx_demangle_callback>:
   1aad0:	b160      	cbz	r0, 1aaec <__gcclibcxx_demangle_callback+0x1c>
   1aad2:	b508      	push	{r3, lr}
   1aad4:	b139      	cbz	r1, 1aae6 <__gcclibcxx_demangle_callback+0x16>
   1aad6:	f7ff fe13 	bl	1a700 <d_demangle_callback.constprop.17>
   1aada:	2800      	cmp	r0, #0
   1aadc:	bf0c      	ite	eq
   1aade:	f06f 0001 	mvneq.w	r0, #1
   1aae2:	2000      	movne	r0, #0
   1aae4:	bd08      	pop	{r3, pc}
   1aae6:	f06f 0002 	mvn.w	r0, #2
   1aaea:	bd08      	pop	{r3, pc}
   1aaec:	f06f 0002 	mvn.w	r0, #2
   1aaf0:	4770      	bx	lr
   1aaf2:	bf00      	nop

0001aaf4 <__cxa_current_exception_type>:
   1aaf4:	b508      	push	{r3, lr}
   1aaf6:	f7f9 f8f5 	bl	13ce4 <__cxa_get_globals>
   1aafa:	6800      	ldr	r0, [r0, #0]
   1aafc:	b130      	cbz	r0, 1ab0c <__cxa_current_exception_type+0x18>
   1aafe:	f890 3027 	ldrb.w	r3, [r0, #39]	; 0x27
   1ab02:	2b01      	cmp	r3, #1
   1ab04:	bf04      	itt	eq
   1ab06:	6800      	ldreq	r0, [r0, #0]
   1ab08:	3878      	subeq	r0, #120	; 0x78
   1ab0a:	6800      	ldr	r0, [r0, #0]
   1ab0c:	bd08      	pop	{r3, pc}
   1ab0e:	bf00      	nop

0001ab10 <powf>:
   1ab10:	b5f0      	push	{r4, r5, r6, r7, lr}
   1ab12:	ed2d 8b04 	vpush	{d8-d9}
   1ab16:	4db3      	ldr	r5, [pc, #716]	; (1ade4 <powf+0x2d4>)
   1ab18:	b08b      	sub	sp, #44	; 0x2c
   1ab1a:	eef0 8a40 	vmov.f32	s17, s0
   1ab1e:	eeb0 8a60 	vmov.f32	s16, s1
   1ab22:	f000 f9df 	bl	1aee4 <__ieee754_powf>
   1ab26:	f995 4000 	ldrsb.w	r4, [r5]
   1ab2a:	1c63      	adds	r3, r4, #1
   1ab2c:	eeb0 9a40 	vmov.f32	s18, s0
   1ab30:	d02e      	beq.n	1ab90 <powf+0x80>
   1ab32:	eeb4 8a48 	vcmp.f32	s16, s16
   1ab36:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   1ab3a:	d629      	bvs.n	1ab90 <powf+0x80>
   1ab3c:	eef4 8a68 	vcmp.f32	s17, s17
   1ab40:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   1ab44:	f180 80a2 	bvs.w	1ac8c <powf+0x17c>
   1ab48:	eef5 8a40 	vcmp.f32	s17, #0.0
   1ab4c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   1ab50:	d124      	bne.n	1ab9c <powf+0x8c>
   1ab52:	eeb5 8a40 	vcmp.f32	s16, #0.0
   1ab56:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   1ab5a:	d159      	bne.n	1ac10 <powf+0x100>
   1ab5c:	2301      	movs	r3, #1
   1ab5e:	4aa2      	ldr	r2, [pc, #648]	; (1ade8 <powf+0x2d8>)
   1ab60:	9300      	str	r3, [sp, #0]
   1ab62:	ee18 0a90 	vmov	r0, s17
   1ab66:	2300      	movs	r3, #0
   1ab68:	9201      	str	r2, [sp, #4]
   1ab6a:	9308      	str	r3, [sp, #32]
   1ab6c:	f000 ff3a 	bl	1b9e4 <__aeabi_f2d>
   1ab70:	e9cd 0102 	strd	r0, r1, [sp, #8]
   1ab74:	ee18 0a10 	vmov	r0, s16
   1ab78:	f000 ff34 	bl	1b9e4 <__aeabi_f2d>
   1ab7c:	2200      	movs	r2, #0
   1ab7e:	2300      	movs	r3, #0
   1ab80:	e9cd 0104 	strd	r0, r1, [sp, #16]
   1ab84:	e9cd 2306 	strd	r2, r3, [sp, #24]
   1ab88:	2c00      	cmp	r4, #0
   1ab8a:	d067      	beq.n	1ac5c <powf+0x14c>
   1ab8c:	eeb7 9a00 	vmov.f32	s18, #112	; 0x3f800000  1.0
   1ab90:	eeb0 0a49 	vmov.f32	s0, s18
   1ab94:	b00b      	add	sp, #44	; 0x2c
   1ab96:	ecbd 8b04 	vpop	{d8-d9}
   1ab9a:	bdf0      	pop	{r4, r5, r6, r7, pc}
   1ab9c:	f000 fd3a 	bl	1b614 <finitef>
   1aba0:	4604      	mov	r4, r0
   1aba2:	2800      	cmp	r0, #0
   1aba4:	f000 8091 	beq.w	1acca <powf+0x1ba>
   1aba8:	eeb5 9a40 	vcmp.f32	s18, #0.0
   1abac:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   1abb0:	d1ee      	bne.n	1ab90 <powf+0x80>
   1abb2:	eeb0 0a68 	vmov.f32	s0, s17
   1abb6:	f000 fd2d 	bl	1b614 <finitef>
   1abba:	2800      	cmp	r0, #0
   1abbc:	d0e8      	beq.n	1ab90 <powf+0x80>
   1abbe:	eeb0 0a48 	vmov.f32	s0, s16
   1abc2:	f000 fd27 	bl	1b614 <finitef>
   1abc6:	2800      	cmp	r0, #0
   1abc8:	d0e2      	beq.n	1ab90 <powf+0x80>
   1abca:	2304      	movs	r3, #4
   1abcc:	4a86      	ldr	r2, [pc, #536]	; (1ade8 <powf+0x2d8>)
   1abce:	9300      	str	r3, [sp, #0]
   1abd0:	ee18 0a90 	vmov	r0, s17
   1abd4:	2300      	movs	r3, #0
   1abd6:	9308      	str	r3, [sp, #32]
   1abd8:	9201      	str	r2, [sp, #4]
   1abda:	f000 ff03 	bl	1b9e4 <__aeabi_f2d>
   1abde:	e9cd 0102 	strd	r0, r1, [sp, #8]
   1abe2:	ee18 0a10 	vmov	r0, s16
   1abe6:	f000 fefd 	bl	1b9e4 <__aeabi_f2d>
   1abea:	2600      	movs	r6, #0
   1abec:	2700      	movs	r7, #0
   1abee:	e9cd 0104 	strd	r0, r1, [sp, #16]
   1abf2:	e9cd 6706 	strd	r6, r7, [sp, #24]
   1abf6:	f995 3000 	ldrsb.w	r3, [r5]
   1abfa:	2b02      	cmp	r3, #2
   1abfc:	d003      	beq.n	1ac06 <powf+0xf6>
   1abfe:	4668      	mov	r0, sp
   1ac00:	f000 fc6c 	bl	1b4dc <matherr>
   1ac04:	bb80      	cbnz	r0, 1ac68 <powf+0x158>
   1ac06:	f002 fd15 	bl	1d634 <__errno>
   1ac0a:	2322      	movs	r3, #34	; 0x22
   1ac0c:	6003      	str	r3, [r0, #0]
   1ac0e:	e02b      	b.n	1ac68 <powf+0x158>
   1ac10:	eeb0 0a48 	vmov.f32	s0, s16
   1ac14:	f000 fcfe 	bl	1b614 <finitef>
   1ac18:	2800      	cmp	r0, #0
   1ac1a:	d0b9      	beq.n	1ab90 <powf+0x80>
   1ac1c:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
   1ac20:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   1ac24:	d5b4      	bpl.n	1ab90 <powf+0x80>
   1ac26:	2301      	movs	r3, #1
   1ac28:	4a6f      	ldr	r2, [pc, #444]	; (1ade8 <powf+0x2d8>)
   1ac2a:	9300      	str	r3, [sp, #0]
   1ac2c:	ee18 0a90 	vmov	r0, s17
   1ac30:	2300      	movs	r3, #0
   1ac32:	9308      	str	r3, [sp, #32]
   1ac34:	9201      	str	r2, [sp, #4]
   1ac36:	f000 fed5 	bl	1b9e4 <__aeabi_f2d>
   1ac3a:	e9cd 0102 	strd	r0, r1, [sp, #8]
   1ac3e:	ee18 0a10 	vmov	r0, s16
   1ac42:	f000 fecf 	bl	1b9e4 <__aeabi_f2d>
   1ac46:	f995 3000 	ldrsb.w	r3, [r5]
   1ac4a:	e9cd 0104 	strd	r0, r1, [sp, #16]
   1ac4e:	2b00      	cmp	r3, #0
   1ac50:	f040 809b 	bne.w	1ad8a <powf+0x27a>
   1ac54:	2200      	movs	r2, #0
   1ac56:	2300      	movs	r3, #0
   1ac58:	e9cd 2306 	strd	r2, r3, [sp, #24]
   1ac5c:	4668      	mov	r0, sp
   1ac5e:	f000 fc3d 	bl	1b4dc <matherr>
   1ac62:	2800      	cmp	r0, #0
   1ac64:	f000 808c 	beq.w	1ad80 <powf+0x270>
   1ac68:	9b08      	ldr	r3, [sp, #32]
   1ac6a:	b11b      	cbz	r3, 1ac74 <powf+0x164>
   1ac6c:	f002 fce2 	bl	1d634 <__errno>
   1ac70:	9b08      	ldr	r3, [sp, #32]
   1ac72:	6003      	str	r3, [r0, #0]
   1ac74:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
   1ac78:	f001 f9ea 	bl	1c050 <__aeabi_d2f>
   1ac7c:	ee09 0a10 	vmov	s18, r0
   1ac80:	eeb0 0a49 	vmov.f32	s0, s18
   1ac84:	b00b      	add	sp, #44	; 0x2c
   1ac86:	ecbd 8b04 	vpop	{d8-d9}
   1ac8a:	bdf0      	pop	{r4, r5, r6, r7, pc}
   1ac8c:	eeb5 8a40 	vcmp.f32	s16, #0.0
   1ac90:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   1ac94:	f47f af7c 	bne.w	1ab90 <powf+0x80>
   1ac98:	2301      	movs	r3, #1
   1ac9a:	4a53      	ldr	r2, [pc, #332]	; (1ade8 <powf+0x2d8>)
   1ac9c:	9300      	str	r3, [sp, #0]
   1ac9e:	ee18 0a90 	vmov	r0, s17
   1aca2:	2300      	movs	r3, #0
   1aca4:	9201      	str	r2, [sp, #4]
   1aca6:	9308      	str	r3, [sp, #32]
   1aca8:	f000 fe9c 	bl	1b9e4 <__aeabi_f2d>
   1acac:	e9cd 0102 	strd	r0, r1, [sp, #8]
   1acb0:	ee18 0a10 	vmov	r0, s16
   1acb4:	f000 fe96 	bl	1b9e4 <__aeabi_f2d>
   1acb8:	4b4c      	ldr	r3, [pc, #304]	; (1adec <powf+0x2dc>)
   1acba:	2200      	movs	r2, #0
   1acbc:	2c02      	cmp	r4, #2
   1acbe:	e9cd 0104 	strd	r0, r1, [sp, #16]
   1acc2:	e9cd 2306 	strd	r2, r3, [sp, #24]
   1acc6:	d1c9      	bne.n	1ac5c <powf+0x14c>
   1acc8:	e760      	b.n	1ab8c <powf+0x7c>
   1acca:	eeb0 0a68 	vmov.f32	s0, s17
   1acce:	f000 fca1 	bl	1b614 <finitef>
   1acd2:	2800      	cmp	r0, #0
   1acd4:	f43f af68 	beq.w	1aba8 <powf+0x98>
   1acd8:	eeb0 0a48 	vmov.f32	s0, s16
   1acdc:	f000 fc9a 	bl	1b614 <finitef>
   1ace0:	2800      	cmp	r0, #0
   1ace2:	f43f af61 	beq.w	1aba8 <powf+0x98>
   1ace6:	eeb4 9a49 	vcmp.f32	s18, s18
   1acea:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   1acee:	f180 8087 	bvs.w	1ae00 <powf+0x2f0>
   1acf2:	4b3d      	ldr	r3, [pc, #244]	; (1ade8 <powf+0x2d8>)
   1acf4:	9408      	str	r4, [sp, #32]
   1acf6:	2203      	movs	r2, #3
   1acf8:	ee18 0a90 	vmov	r0, s17
   1acfc:	e88d 000c 	stmia.w	sp, {r2, r3}
   1ad00:	f000 fe70 	bl	1b9e4 <__aeabi_f2d>
   1ad04:	e9cd 0102 	strd	r0, r1, [sp, #8]
   1ad08:	ee18 0a10 	vmov	r0, s16
   1ad0c:	f000 fe6a 	bl	1b9e4 <__aeabi_f2d>
   1ad10:	f995 3000 	ldrsb.w	r3, [r5]
   1ad14:	e9cd 0104 	strd	r0, r1, [sp, #16]
   1ad18:	2b00      	cmp	r3, #0
   1ad1a:	d13d      	bne.n	1ad98 <powf+0x288>
   1ad1c:	4b34      	ldr	r3, [pc, #208]	; (1adf0 <powf+0x2e0>)
   1ad1e:	eef5 8ac0 	vcmpe.f32	s17, #0.0
   1ad22:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
   1ad26:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   1ad2a:	e9cd 2306 	strd	r2, r3, [sp, #24]
   1ad2e:	f57f af66 	bpl.w	1abfe <powf+0xee>
   1ad32:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
   1ad36:	ee68 7a27 	vmul.f32	s15, s16, s15
   1ad3a:	ee17 0a90 	vmov	r0, s15
   1ad3e:	f000 fe51 	bl	1b9e4 <__aeabi_f2d>
   1ad42:	4606      	mov	r6, r0
   1ad44:	460f      	mov	r7, r1
   1ad46:	ec47 6b10 	vmov	d0, r6, r7
   1ad4a:	f000 fbc9 	bl	1b4e0 <rint>
   1ad4e:	4630      	mov	r0, r6
   1ad50:	ec53 2b10 	vmov	r2, r3, d0
   1ad54:	4639      	mov	r1, r7
   1ad56:	f001 f901 	bl	1bf5c <__aeabi_dcmpeq>
   1ad5a:	2800      	cmp	r0, #0
   1ad5c:	d13f      	bne.n	1adde <powf+0x2ce>
   1ad5e:	4925      	ldr	r1, [pc, #148]	; (1adf4 <powf+0x2e4>)
   1ad60:	f995 3000 	ldrsb.w	r3, [r5]
   1ad64:	f04f 4060 	mov.w	r0, #3758096384	; 0xe0000000
   1ad68:	e9cd 0106 	strd	r0, r1, [sp, #24]
   1ad6c:	e745      	b.n	1abfa <powf+0xea>
   1ad6e:	4610      	mov	r0, r2
   1ad70:	4619      	mov	r1, r3
   1ad72:	f000 ffb5 	bl	1bce0 <__aeabi_ddiv>
   1ad76:	2c02      	cmp	r4, #2
   1ad78:	e9cd 0106 	strd	r0, r1, [sp, #24]
   1ad7c:	f47f af6e 	bne.w	1ac5c <powf+0x14c>
   1ad80:	f002 fc58 	bl	1d634 <__errno>
   1ad84:	2321      	movs	r3, #33	; 0x21
   1ad86:	6003      	str	r3, [r0, #0]
   1ad88:	e76e      	b.n	1ac68 <powf+0x158>
   1ad8a:	491b      	ldr	r1, [pc, #108]	; (1adf8 <powf+0x2e8>)
   1ad8c:	2000      	movs	r0, #0
   1ad8e:	2b02      	cmp	r3, #2
   1ad90:	e9cd 0106 	strd	r0, r1, [sp, #24]
   1ad94:	d0f4      	beq.n	1ad80 <powf+0x270>
   1ad96:	e761      	b.n	1ac5c <powf+0x14c>
   1ad98:	4918      	ldr	r1, [pc, #96]	; (1adfc <powf+0x2ec>)
   1ad9a:	eef5 8ac0 	vcmpe.f32	s17, #0.0
   1ad9e:	2000      	movs	r0, #0
   1ada0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   1ada4:	e9cd 0106 	strd	r0, r1, [sp, #24]
   1ada8:	f57f af27 	bpl.w	1abfa <powf+0xea>
   1adac:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
   1adb0:	ee68 7a27 	vmul.f32	s15, s16, s15
   1adb4:	ee17 0a90 	vmov	r0, s15
   1adb8:	f000 fe14 	bl	1b9e4 <__aeabi_f2d>
   1adbc:	4606      	mov	r6, r0
   1adbe:	460f      	mov	r7, r1
   1adc0:	ec47 6b10 	vmov	d0, r6, r7
   1adc4:	f000 fb8c 	bl	1b4e0 <rint>
   1adc8:	4630      	mov	r0, r6
   1adca:	ec53 2b10 	vmov	r2, r3, d0
   1adce:	4639      	mov	r1, r7
   1add0:	f001 f8c4 	bl	1bf5c <__aeabi_dcmpeq>
   1add4:	b918      	cbnz	r0, 1adde <powf+0x2ce>
   1add6:	4b08      	ldr	r3, [pc, #32]	; (1adf8 <powf+0x2e8>)
   1add8:	2200      	movs	r2, #0
   1adda:	e9cd 2306 	strd	r2, r3, [sp, #24]
   1adde:	f995 3000 	ldrsb.w	r3, [r5]
   1ade2:	e70a      	b.n	1abfa <powf+0xea>
   1ade4:	200000f4 	.word	0x200000f4
   1ade8:	00024b3c 	.word	0x00024b3c
   1adec:	3ff00000 	.word	0x3ff00000
   1adf0:	47efffff 	.word	0x47efffff
   1adf4:	c7efffff 	.word	0xc7efffff
   1adf8:	fff00000 	.word	0xfff00000
   1adfc:	7ff00000 	.word	0x7ff00000
   1ae00:	4b0c      	ldr	r3, [pc, #48]	; (1ae34 <powf+0x324>)
   1ae02:	9408      	str	r4, [sp, #32]
   1ae04:	2201      	movs	r2, #1
   1ae06:	ee18 0a90 	vmov	r0, s17
   1ae0a:	e88d 000c 	stmia.w	sp, {r2, r3}
   1ae0e:	f000 fde9 	bl	1b9e4 <__aeabi_f2d>
   1ae12:	e9cd 0102 	strd	r0, r1, [sp, #8]
   1ae16:	ee18 0a10 	vmov	r0, s16
   1ae1a:	f000 fde3 	bl	1b9e4 <__aeabi_f2d>
   1ae1e:	f995 4000 	ldrsb.w	r4, [r5]
   1ae22:	e9cd 0104 	strd	r0, r1, [sp, #16]
   1ae26:	2200      	movs	r2, #0
   1ae28:	2300      	movs	r3, #0
   1ae2a:	2c00      	cmp	r4, #0
   1ae2c:	d19f      	bne.n	1ad6e <powf+0x25e>
   1ae2e:	e9cd 2306 	strd	r2, r3, [sp, #24]
   1ae32:	e713      	b.n	1ac5c <powf+0x14c>
   1ae34:	00024b3c 	.word	0x00024b3c

0001ae38 <sqrtf>:
   1ae38:	b510      	push	{r4, lr}
   1ae3a:	ed2d 8b02 	vpush	{d8}
   1ae3e:	b08a      	sub	sp, #40	; 0x28
   1ae40:	eeb0 8a40 	vmov.f32	s16, s0
   1ae44:	f000 fb46 	bl	1b4d4 <__ieee754_sqrtf>
   1ae48:	4b24      	ldr	r3, [pc, #144]	; (1aedc <sqrtf+0xa4>)
   1ae4a:	f993 4000 	ldrsb.w	r4, [r3]
   1ae4e:	1c63      	adds	r3, r4, #1
   1ae50:	d009      	beq.n	1ae66 <sqrtf+0x2e>
   1ae52:	eeb4 8a48 	vcmp.f32	s16, s16
   1ae56:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   1ae5a:	d604      	bvs.n	1ae66 <sqrtf+0x2e>
   1ae5c:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
   1ae60:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   1ae64:	d403      	bmi.n	1ae6e <sqrtf+0x36>
   1ae66:	b00a      	add	sp, #40	; 0x28
   1ae68:	ecbd 8b02 	vpop	{d8}
   1ae6c:	bd10      	pop	{r4, pc}
   1ae6e:	2301      	movs	r3, #1
   1ae70:	4a1b      	ldr	r2, [pc, #108]	; (1aee0 <sqrtf+0xa8>)
   1ae72:	9300      	str	r3, [sp, #0]
   1ae74:	ee18 0a10 	vmov	r0, s16
   1ae78:	2300      	movs	r3, #0
   1ae7a:	9201      	str	r2, [sp, #4]
   1ae7c:	9308      	str	r3, [sp, #32]
   1ae7e:	f000 fdb1 	bl	1b9e4 <__aeabi_f2d>
   1ae82:	2200      	movs	r2, #0
   1ae84:	e9cd 0104 	strd	r0, r1, [sp, #16]
   1ae88:	e9cd 0102 	strd	r0, r1, [sp, #8]
   1ae8c:	2300      	movs	r3, #0
   1ae8e:	b1bc      	cbz	r4, 1aec0 <sqrtf+0x88>
   1ae90:	4610      	mov	r0, r2
   1ae92:	4619      	mov	r1, r3
   1ae94:	f000 ff24 	bl	1bce0 <__aeabi_ddiv>
   1ae98:	2c02      	cmp	r4, #2
   1ae9a:	e9cd 0106 	strd	r0, r1, [sp, #24]
   1ae9e:	d111      	bne.n	1aec4 <sqrtf+0x8c>
   1aea0:	f002 fbc8 	bl	1d634 <__errno>
   1aea4:	2321      	movs	r3, #33	; 0x21
   1aea6:	6003      	str	r3, [r0, #0]
   1aea8:	9b08      	ldr	r3, [sp, #32]
   1aeaa:	b98b      	cbnz	r3, 1aed0 <sqrtf+0x98>
   1aeac:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
   1aeb0:	f001 f8ce 	bl	1c050 <__aeabi_d2f>
   1aeb4:	ee00 0a10 	vmov	s0, r0
   1aeb8:	b00a      	add	sp, #40	; 0x28
   1aeba:	ecbd 8b02 	vpop	{d8}
   1aebe:	bd10      	pop	{r4, pc}
   1aec0:	e9cd 2306 	strd	r2, r3, [sp, #24]
   1aec4:	4668      	mov	r0, sp
   1aec6:	f000 fb09 	bl	1b4dc <matherr>
   1aeca:	2800      	cmp	r0, #0
   1aecc:	d1ec      	bne.n	1aea8 <sqrtf+0x70>
   1aece:	e7e7      	b.n	1aea0 <sqrtf+0x68>
   1aed0:	f002 fbb0 	bl	1d634 <__errno>
   1aed4:	9b08      	ldr	r3, [sp, #32]
   1aed6:	6003      	str	r3, [r0, #0]
   1aed8:	e7e8      	b.n	1aeac <sqrtf+0x74>
   1aeda:	bf00      	nop
   1aedc:	200000f4 	.word	0x200000f4
   1aee0:	00024b44 	.word	0x00024b44

0001aee4 <__ieee754_powf>:
   1aee4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   1aee8:	ed2d 8b02 	vpush	{d8}
   1aeec:	b082      	sub	sp, #8
   1aeee:	edcd 0a00 	vstr	s1, [sp]
   1aef2:	9c00      	ldr	r4, [sp, #0]
   1aef4:	ed8d 0a01 	vstr	s0, [sp, #4]
   1aef8:	f034 4600 	bics.w	r6, r4, #2147483648	; 0x80000000
   1aefc:	d014      	beq.n	1af28 <__ieee754_powf+0x44>
   1aefe:	f8dd 8004 	ldr.w	r8, [sp, #4]
   1af02:	f028 4700 	bic.w	r7, r8, #2147483648	; 0x80000000
   1af06:	f1b7 4fff 	cmp.w	r7, #2139095040	; 0x7f800000
   1af0a:	dd07      	ble.n	1af1c <__ieee754_powf+0x38>
   1af0c:	4858      	ldr	r0, [pc, #352]	; (1b070 <__ieee754_powf+0x18c>)
   1af0e:	b002      	add	sp, #8
   1af10:	ecbd 8b02 	vpop	{d8}
   1af14:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   1af18:	f000 bb86 	b.w	1b628 <nanf>
   1af1c:	f1b6 4fff 	cmp.w	r6, #2139095040	; 0x7f800000
   1af20:	dd09      	ble.n	1af36 <__ieee754_powf+0x52>
   1af22:	f1b7 5f7e 	cmp.w	r7, #1065353216	; 0x3f800000
   1af26:	d1f1      	bne.n	1af0c <__ieee754_powf+0x28>
   1af28:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
   1af2c:	b002      	add	sp, #8
   1af2e:	ecbd 8b02 	vpop	{d8}
   1af32:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   1af36:	f1b8 0f00 	cmp.w	r8, #0
   1af3a:	db4d      	blt.n	1afd8 <__ieee754_powf+0xf4>
   1af3c:	f04f 0a00 	mov.w	sl, #0
   1af40:	f1b6 4fff 	cmp.w	r6, #2139095040	; 0x7f800000
   1af44:	d03f      	beq.n	1afc6 <__ieee754_powf+0xe2>
   1af46:	f1b6 5f7e 	cmp.w	r6, #1065353216	; 0x3f800000
   1af4a:	d058      	beq.n	1affe <__ieee754_powf+0x11a>
   1af4c:	f1b4 4f80 	cmp.w	r4, #1073741824	; 0x40000000
   1af50:	d06e      	beq.n	1b030 <__ieee754_powf+0x14c>
   1af52:	9d01      	ldr	r5, [sp, #4]
   1af54:	f8dd 9000 	ldr.w	r9, [sp]
   1af58:	f1b4 5f7c 	cmp.w	r4, #1056964608	; 0x3f000000
   1af5c:	ee00 5a10 	vmov	s0, r5
   1af60:	d01c      	beq.n	1af9c <__ieee754_powf+0xb8>
   1af62:	f000 fb4f 	bl	1b604 <fabsf>
   1af66:	f1b7 4fff 	cmp.w	r7, #2139095040	; 0x7f800000
   1af6a:	d04d      	beq.n	1b008 <__ieee754_powf+0x124>
   1af6c:	2f00      	cmp	r7, #0
   1af6e:	d04b      	beq.n	1b008 <__ieee754_powf+0x124>
   1af70:	f1b7 5f7e 	cmp.w	r7, #1065353216	; 0x3f800000
   1af74:	d048      	beq.n	1b008 <__ieee754_powf+0x124>
   1af76:	ea4f 73d8 	mov.w	r3, r8, lsr #31
   1af7a:	3b01      	subs	r3, #1
   1af7c:	ea5a 0203 	orrs.w	r2, sl, r3
   1af80:	d06e      	beq.n	1b060 <__ieee754_powf+0x17c>
   1af82:	f1b6 4f9a 	cmp.w	r6, #1291845632	; 0x4d000000
   1af86:	dd7b      	ble.n	1b080 <__ieee754_powf+0x19c>
   1af88:	4a3a      	ldr	r2, [pc, #232]	; (1b074 <__ieee754_powf+0x190>)
   1af8a:	4297      	cmp	r7, r2
   1af8c:	f300 81c8 	bgt.w	1b320 <__ieee754_powf+0x43c>
   1af90:	2c00      	cmp	r4, #0
   1af92:	f2c0 81cb 	blt.w	1b32c <__ieee754_powf+0x448>
   1af96:	ed9f 0a38 	vldr	s0, [pc, #224]	; 1b078 <__ieee754_powf+0x194>
   1af9a:	e7c7      	b.n	1af2c <__ieee754_powf+0x48>
   1af9c:	f1b8 0f00 	cmp.w	r8, #0
   1afa0:	da4b      	bge.n	1b03a <__ieee754_powf+0x156>
   1afa2:	f000 fb2f 	bl	1b604 <fabsf>
   1afa6:	f1b7 4fff 	cmp.w	r7, #2139095040	; 0x7f800000
   1afaa:	d001      	beq.n	1afb0 <__ieee754_powf+0xcc>
   1afac:	2f00      	cmp	r7, #0
   1afae:	d1df      	bne.n	1af70 <__ieee754_powf+0x8c>
   1afb0:	f1a7 577e 	sub.w	r7, r7, #1065353216	; 0x3f800000
   1afb4:	ea57 030a 	orrs.w	r3, r7, sl
   1afb8:	d04d      	beq.n	1b056 <__ieee754_powf+0x172>
   1afba:	f1ba 0f01 	cmp.w	sl, #1
   1afbe:	d1b5      	bne.n	1af2c <__ieee754_powf+0x48>
   1afc0:	eeb1 0a40 	vneg.f32	s0, s0
   1afc4:	e7b2      	b.n	1af2c <__ieee754_powf+0x48>
   1afc6:	f1b7 5f7e 	cmp.w	r7, #1065353216	; 0x3f800000
   1afca:	d0ad      	beq.n	1af28 <__ieee754_powf+0x44>
   1afcc:	dd29      	ble.n	1b022 <__ieee754_powf+0x13e>
   1afce:	2c00      	cmp	r4, #0
   1afd0:	dbe1      	blt.n	1af96 <__ieee754_powf+0xb2>
   1afd2:	ed9d 0a00 	vldr	s0, [sp]
   1afd6:	e7a9      	b.n	1af2c <__ieee754_powf+0x48>
   1afd8:	f1b6 4f97 	cmp.w	r6, #1266679808	; 0x4b800000
   1afdc:	da1e      	bge.n	1b01c <__ieee754_powf+0x138>
   1afde:	f1b6 5f7e 	cmp.w	r6, #1065353216	; 0x3f800000
   1afe2:	db09      	blt.n	1aff8 <__ieee754_powf+0x114>
   1afe4:	15f3      	asrs	r3, r6, #23
   1afe6:	f1c3 0396 	rsb	r3, r3, #150	; 0x96
   1afea:	fa46 f203 	asr.w	r2, r6, r3
   1afee:	fa02 f303 	lsl.w	r3, r2, r3
   1aff2:	429e      	cmp	r6, r3
   1aff4:	f000 818f 	beq.w	1b316 <__ieee754_powf+0x432>
   1aff8:	f04f 0a00 	mov.w	sl, #0
   1affc:	e7a3      	b.n	1af46 <__ieee754_powf+0x62>
   1affe:	2c00      	cmp	r4, #0
   1b000:	db22      	blt.n	1b048 <__ieee754_powf+0x164>
   1b002:	ed9d 0a01 	vldr	s0, [sp, #4]
   1b006:	e791      	b.n	1af2c <__ieee754_powf+0x48>
   1b008:	2c00      	cmp	r4, #0
   1b00a:	bfbc      	itt	lt
   1b00c:	eef7 7a00 	vmovlt.f32	s15, #112	; 0x3f800000  1.0
   1b010:	ee87 0a80 	vdivlt.f32	s0, s15, s0
   1b014:	f1b8 0f00 	cmp.w	r8, #0
   1b018:	da88      	bge.n	1af2c <__ieee754_powf+0x48>
   1b01a:	e7c9      	b.n	1afb0 <__ieee754_powf+0xcc>
   1b01c:	f04f 0a02 	mov.w	sl, #2
   1b020:	e78e      	b.n	1af40 <__ieee754_powf+0x5c>
   1b022:	2c00      	cmp	r4, #0
   1b024:	dab7      	bge.n	1af96 <__ieee754_powf+0xb2>
   1b026:	eddd 7a00 	vldr	s15, [sp]
   1b02a:	eeb1 0a67 	vneg.f32	s0, s15
   1b02e:	e77d      	b.n	1af2c <__ieee754_powf+0x48>
   1b030:	eddd 7a01 	vldr	s15, [sp, #4]
   1b034:	ee27 0aa7 	vmul.f32	s0, s15, s15
   1b038:	e778      	b.n	1af2c <__ieee754_powf+0x48>
   1b03a:	b002      	add	sp, #8
   1b03c:	ecbd 8b02 	vpop	{d8}
   1b040:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   1b044:	f000 ba46 	b.w	1b4d4 <__ieee754_sqrtf>
   1b048:	ed9d 7a01 	vldr	s14, [sp, #4]
   1b04c:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
   1b050:	ee87 0a87 	vdiv.f32	s0, s15, s14
   1b054:	e76a      	b.n	1af2c <__ieee754_powf+0x48>
   1b056:	ee70 7a40 	vsub.f32	s15, s0, s0
   1b05a:	ee87 0aa7 	vdiv.f32	s0, s15, s15
   1b05e:	e765      	b.n	1af2c <__ieee754_powf+0x48>
   1b060:	ee07 5a90 	vmov	s15, r5
   1b064:	ee77 7ae7 	vsub.f32	s15, s15, s15
   1b068:	ee87 0aa7 	vdiv.f32	s0, s15, s15
   1b06c:	e75e      	b.n	1af2c <__ieee754_powf+0x48>
   1b06e:	bf00      	nop
   1b070:	00022a4c 	.word	0x00022a4c
   1b074:	3f7ffff7 	.word	0x3f7ffff7
   1b078:	00000000 	.word	0x00000000
   1b07c:	4b800000 	.word	0x4b800000
   1b080:	f5b7 0f00 	cmp.w	r7, #8388608	; 0x800000
   1b084:	f280 815f 	bge.w	1b346 <__ieee754_powf+0x462>
   1b088:	ed5f 7a04 	vldr	s15, [pc, #-16]	; 1b07c <__ieee754_powf+0x198>
   1b08c:	ee60 7a27 	vmul.f32	s15, s0, s15
   1b090:	f06f 0217 	mvn.w	r2, #23
   1b094:	ee17 7a90 	vmov	r7, s15
   1b098:	48ee      	ldr	r0, [pc, #952]	; (1b454 <__ieee754_powf+0x570>)
   1b09a:	15f9      	asrs	r1, r7, #23
   1b09c:	f3c7 0716 	ubfx	r7, r7, #0, #23
   1b0a0:	397f      	subs	r1, #127	; 0x7f
   1b0a2:	4287      	cmp	r7, r0
   1b0a4:	4411      	add	r1, r2
   1b0a6:	f047 527e 	orr.w	r2, r7, #1065353216	; 0x3f800000
   1b0aa:	f340 8144 	ble.w	1b336 <__ieee754_powf+0x452>
   1b0ae:	48ea      	ldr	r0, [pc, #936]	; (1b458 <__ieee754_powf+0x574>)
   1b0b0:	4287      	cmp	r7, r0
   1b0b2:	f340 8191 	ble.w	1b3d8 <__ieee754_powf+0x4f4>
   1b0b6:	eddf 4ae9 	vldr	s9, [pc, #932]	; 1b45c <__ieee754_powf+0x578>
   1b0ba:	3101      	adds	r1, #1
   1b0bc:	f5a2 0200 	sub.w	r2, r2, #8388608	; 0x800000
   1b0c0:	eef0 3a64 	vmov.f32	s7, s9
   1b0c4:	2500      	movs	r5, #0
   1b0c6:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
   1b0ca:	ee06 2a90 	vmov	s13, r2
   1b0ce:	ee76 7a86 	vadd.f32	s15, s13, s12
   1b0d2:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
   1b0d6:	ee87 8a27 	vdiv.f32	s16, s14, s15
   1b0da:	1052      	asrs	r2, r2, #1
   1b0dc:	f042 5200 	orr.w	r2, r2, #536870912	; 0x20000000
   1b0e0:	f502 2280 	add.w	r2, r2, #262144	; 0x40000
   1b0e4:	442a      	add	r2, r5
   1b0e6:	48de      	ldr	r0, [pc, #888]	; (1b460 <__ieee754_powf+0x57c>)
   1b0e8:	ee36 7ac6 	vsub.f32	s14, s13, s12
   1b0ec:	ee07 2a90 	vmov	s15, r2
   1b0f0:	ee27 4a08 	vmul.f32	s8, s14, s16
   1b0f4:	ee37 5ac6 	vsub.f32	s10, s15, s12
   1b0f8:	eddf 8ada 	vldr	s17, [pc, #872]	; 1b464 <__ieee754_powf+0x580>
   1b0fc:	ed9f 0ada 	vldr	s0, [pc, #872]	; 1b468 <__ieee754_powf+0x584>
   1b100:	eddf 1ada 	vldr	s3, [pc, #872]	; 1b46c <__ieee754_powf+0x588>
   1b104:	eddf 0ada 	vldr	s1, [pc, #872]	; 1b470 <__ieee754_powf+0x58c>
   1b108:	ed9f 1ada 	vldr	s2, [pc, #872]	; 1b474 <__ieee754_powf+0x590>
   1b10c:	ed9f 2ada 	vldr	s4, [pc, #872]	; 1b478 <__ieee754_powf+0x594>
   1b110:	eddf 2ada 	vldr	s5, [pc, #872]	; 1b47c <__ieee754_powf+0x598>
   1b114:	ed9f 3ada 	vldr	s6, [pc, #872]	; 1b480 <__ieee754_powf+0x59c>
   1b118:	ee24 6a04 	vmul.f32	s12, s8, s8
   1b11c:	ee14 2a10 	vmov	r2, s8
   1b120:	eea6 0a28 	vfma.f32	s0, s12, s17
   1b124:	4002      	ands	r2, r0
   1b126:	ee76 6ac5 	vsub.f32	s13, s13, s10
   1b12a:	eeb0 5a61 	vmov.f32	s10, s3
   1b12e:	ee05 2a90 	vmov	s11, r2
   1b132:	eea6 5a00 	vfma.f32	s10, s12, s0
   1b136:	eef1 1a65 	vneg.f32	s3, s11
   1b13a:	eea1 7aa7 	vfma.f32	s14, s3, s15
   1b13e:	eef0 7a60 	vmov.f32	s15, s1
   1b142:	eee6 7a05 	vfma.f32	s15, s12, s10
   1b146:	eea1 7aa6 	vfma.f32	s14, s3, s13
   1b14a:	eeb0 5a41 	vmov.f32	s10, s2
   1b14e:	eea6 5a27 	vfma.f32	s10, s12, s15
   1b152:	ee67 6a08 	vmul.f32	s13, s14, s16
   1b156:	eeb0 7a42 	vmov.f32	s14, s4
   1b15a:	eea6 7a05 	vfma.f32	s14, s12, s10
   1b15e:	ee75 7a84 	vadd.f32	s15, s11, s8
   1b162:	ee26 6a06 	vmul.f32	s12, s12, s12
   1b166:	ee67 7aa6 	vmul.f32	s15, s15, s13
   1b16a:	eeb0 5a08 	vmov.f32	s10, #8	; 0x40400000  3.0
   1b16e:	eee6 7a07 	vfma.f32	s15, s12, s14
   1b172:	eeb0 7a45 	vmov.f32	s14, s10
   1b176:	eea5 7aa5 	vfma.f32	s14, s11, s11
   1b17a:	ed9f 2ac2 	vldr	s4, [pc, #776]	; 1b484 <__ieee754_powf+0x5a0>
   1b17e:	ee37 6a27 	vadd.f32	s12, s14, s15
   1b182:	ee07 1a10 	vmov	s14, r1
   1b186:	ee16 2a10 	vmov	r2, s12
   1b18a:	4002      	ands	r2, r0
   1b18c:	ee06 2a10 	vmov	s12, r2
   1b190:	ee36 5a45 	vsub.f32	s10, s12, s10
   1b194:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
   1b198:	eea1 5aa5 	vfma.f32	s10, s3, s11
   1b19c:	ee77 7ac5 	vsub.f32	s15, s15, s10
   1b1a0:	ee67 7a84 	vmul.f32	s15, s15, s8
   1b1a4:	eee6 7a26 	vfma.f32	s15, s12, s13
   1b1a8:	eef0 6a67 	vmov.f32	s13, s15
   1b1ac:	eee5 6a86 	vfma.f32	s13, s11, s12
   1b1b0:	ee16 2a90 	vmov	r2, s13
   1b1b4:	4002      	ands	r2, r0
   1b1b6:	ee06 2a90 	vmov	s13, r2
   1b1ba:	eee1 6a86 	vfma.f32	s13, s3, s12
   1b1be:	ee05 2a90 	vmov	s11, r2
   1b1c2:	ee77 7ae6 	vsub.f32	s15, s15, s13
   1b1c6:	ee67 7aa2 	vmul.f32	s15, s15, s5
   1b1ca:	eee5 7a83 	vfma.f32	s15, s11, s6
   1b1ce:	ee77 7aa3 	vadd.f32	s15, s15, s7
   1b1d2:	eef0 6a67 	vmov.f32	s13, s15
   1b1d6:	eee5 6a82 	vfma.f32	s13, s11, s4
   1b1da:	ee76 6aa4 	vadd.f32	s13, s13, s9
   1b1de:	ee76 6a87 	vadd.f32	s13, s13, s14
   1b1e2:	ee16 2a90 	vmov	r2, s13
   1b1e6:	4002      	ands	r2, r0
   1b1e8:	ee06 2a90 	vmov	s13, r2
   1b1ec:	ee36 7ac7 	vsub.f32	s14, s13, s14
   1b1f0:	ee37 7a64 	vsub.f32	s14, s14, s9
   1b1f4:	eea5 7ac2 	vfms.f32	s14, s11, s4
   1b1f8:	ee77 7ac7 	vsub.f32	s15, s15, s14
   1b1fc:	f424 647f 	bic.w	r4, r4, #4080	; 0xff0
   1b200:	f024 040f 	bic.w	r4, r4, #15
   1b204:	ee07 9a10 	vmov	s14, r9
   1b208:	ee06 4a10 	vmov	s12, r4
   1b20c:	ee67 7a87 	vmul.f32	s15, s15, s14
   1b210:	ee37 6a46 	vsub.f32	s12, s14, s12
   1b214:	ee07 4a10 	vmov	s14, r4
   1b218:	eee6 7a86 	vfma.f32	s15, s13, s12
   1b21c:	f10a 3aff 	add.w	sl, sl, #4294967295
   1b220:	ea5a 0303 	orrs.w	r3, sl, r3
   1b224:	ee26 7a87 	vmul.f32	s14, s13, s14
   1b228:	eebf 0a00 	vmov.f32	s0, #240	; 0xbf800000 -1.0
   1b22c:	ee77 6a87 	vadd.f32	s13, s15, s14
   1b230:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
   1b234:	ee16 2a90 	vmov	r2, s13
   1b238:	bf14      	ite	ne
   1b23a:	eeb0 8a46 	vmovne.f32	s16, s12
   1b23e:	eeb0 8a40 	vmoveq.f32	s16, s0
   1b242:	2a00      	cmp	r2, #0
   1b244:	f022 4300 	bic.w	r3, r2, #2147483648	; 0x80000000
   1b248:	f340 80b3 	ble.w	1b3b2 <__ieee754_powf+0x4ce>
   1b24c:	f1b3 4f86 	cmp.w	r3, #1124073472	; 0x43000000
   1b250:	f300 8086 	bgt.w	1b360 <__ieee754_powf+0x47c>
   1b254:	d079      	beq.n	1b34a <__ieee754_powf+0x466>
   1b256:	f1b3 5f7c 	cmp.w	r3, #1056964608	; 0x3f000000
   1b25a:	f300 8088 	bgt.w	1b36e <__ieee754_powf+0x48a>
   1b25e:	2100      	movs	r1, #0
   1b260:	4608      	mov	r0, r1
   1b262:	f422 637f 	bic.w	r3, r2, #4080	; 0xff0
   1b266:	f023 030f 	bic.w	r3, r3, #15
   1b26a:	ee06 3a10 	vmov	s12, r3
   1b26e:	eddf 6a86 	vldr	s13, [pc, #536]	; 1b488 <__ieee754_powf+0x5a4>
   1b272:	eddf 5a86 	vldr	s11, [pc, #536]	; 1b48c <__ieee754_powf+0x5a8>
   1b276:	ed9f 3a86 	vldr	s6, [pc, #536]	; 1b490 <__ieee754_powf+0x5ac>
   1b27a:	eddf 3a86 	vldr	s7, [pc, #536]	; 1b494 <__ieee754_powf+0x5b0>
   1b27e:	ed9f 2a86 	vldr	s4, [pc, #536]	; 1b498 <__ieee754_powf+0x5b4>
   1b282:	ed9f 4a86 	vldr	s8, [pc, #536]	; 1b49c <__ieee754_powf+0x5b8>
   1b286:	eddf 4a86 	vldr	s9, [pc, #536]	; 1b4a0 <__ieee754_powf+0x5bc>
   1b28a:	ed9f 5a86 	vldr	s10, [pc, #536]	; 1b4a4 <__ieee754_powf+0x5c0>
   1b28e:	ee36 7a47 	vsub.f32	s14, s12, s14
   1b292:	eef0 2a00 	vmov.f32	s5, #0	; 0x40000000  2.0
   1b296:	ee77 7ac7 	vsub.f32	s15, s15, s14
   1b29a:	ee26 7a26 	vmul.f32	s14, s12, s13
   1b29e:	eea7 7aa5 	vfma.f32	s14, s15, s11
   1b2a2:	eef7 5a00 	vmov.f32	s11, #112	; 0x3f800000  1.0
   1b2a6:	eef0 7a47 	vmov.f32	s15, s14
   1b2aa:	eea6 7a03 	vfma.f32	s14, s12, s6
   1b2ae:	ee67 6a07 	vmul.f32	s13, s14, s14
   1b2b2:	eef0 1a47 	vmov.f32	s3, s14
   1b2b6:	eee6 1a43 	vfms.f32	s3, s12, s6
   1b2ba:	eeb0 6a63 	vmov.f32	s12, s7
   1b2be:	eea6 6a82 	vfma.f32	s12, s13, s4
   1b2c2:	ee77 7ae1 	vsub.f32	s15, s15, s3
   1b2c6:	eea6 4a86 	vfma.f32	s8, s13, s12
   1b2ca:	eee7 7a27 	vfma.f32	s15, s14, s15
   1b2ce:	eee6 4a84 	vfma.f32	s9, s13, s8
   1b2d2:	eea6 5aa4 	vfma.f32	s10, s13, s9
   1b2d6:	eeb0 6a45 	vmov.f32	s12, s10
   1b2da:	eeb0 5a47 	vmov.f32	s10, s14
   1b2de:	eea6 5ac6 	vfms.f32	s10, s13, s12
   1b2e2:	eef0 6a45 	vmov.f32	s13, s10
   1b2e6:	ee36 6ae2 	vsub.f32	s12, s13, s5
   1b2ea:	ee27 5a05 	vmul.f32	s10, s14, s10
   1b2ee:	eec5 6a06 	vdiv.f32	s13, s10, s12
   1b2f2:	ee76 7ae7 	vsub.f32	s15, s13, s15
   1b2f6:	ee37 7ac7 	vsub.f32	s14, s15, s14
   1b2fa:	ee35 0ac7 	vsub.f32	s0, s11, s14
   1b2fe:	ee10 3a10 	vmov	r3, s0
   1b302:	440b      	add	r3, r1
   1b304:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
   1b308:	f2c0 80a0 	blt.w	1b44c <__ieee754_powf+0x568>
   1b30c:	ee00 3a10 	vmov	s0, r3
   1b310:	ee20 0a08 	vmul.f32	s0, s0, s16
   1b314:	e60a      	b.n	1af2c <__ieee754_powf+0x48>
   1b316:	f002 0201 	and.w	r2, r2, #1
   1b31a:	f1c2 0a02 	rsb	sl, r2, #2
   1b31e:	e612      	b.n	1af46 <__ieee754_powf+0x62>
   1b320:	4a61      	ldr	r2, [pc, #388]	; (1b4a8 <__ieee754_powf+0x5c4>)
   1b322:	4297      	cmp	r7, r2
   1b324:	dd61      	ble.n	1b3ea <__ieee754_powf+0x506>
   1b326:	2c00      	cmp	r4, #0
   1b328:	f77f ae35 	ble.w	1af96 <__ieee754_powf+0xb2>
   1b32c:	ed9f 0a5f 	vldr	s0, [pc, #380]	; 1b4ac <__ieee754_powf+0x5c8>
   1b330:	ee20 0a00 	vmul.f32	s0, s0, s0
   1b334:	e5fa      	b.n	1af2c <__ieee754_powf+0x48>
   1b336:	eddf 4a49 	vldr	s9, [pc, #292]	; 1b45c <__ieee754_powf+0x578>
   1b33a:	2500      	movs	r5, #0
   1b33c:	eef0 3a64 	vmov.f32	s7, s9
   1b340:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
   1b344:	e6c1      	b.n	1b0ca <__ieee754_powf+0x1e6>
   1b346:	2200      	movs	r2, #0
   1b348:	e6a6      	b.n	1b098 <__ieee754_powf+0x1b4>
   1b34a:	ed9f 6a59 	vldr	s12, [pc, #356]	; 1b4b0 <__ieee754_powf+0x5cc>
   1b34e:	ee76 6ac7 	vsub.f32	s13, s13, s14
   1b352:	ee37 6a86 	vadd.f32	s12, s15, s12
   1b356:	eeb4 6ae6 	vcmpe.f32	s12, s13
   1b35a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   1b35e:	dd06      	ble.n	1b36e <__ieee754_powf+0x48a>
   1b360:	eddf 7a52 	vldr	s15, [pc, #328]	; 1b4ac <__ieee754_powf+0x5c8>
   1b364:	ee28 0a27 	vmul.f32	s0, s16, s15
   1b368:	ee20 0a27 	vmul.f32	s0, s0, s15
   1b36c:	e5de      	b.n	1af2c <__ieee754_powf+0x48>
   1b36e:	15db      	asrs	r3, r3, #23
   1b370:	f44f 0100 	mov.w	r1, #8388608	; 0x800000
   1b374:	3b7e      	subs	r3, #126	; 0x7e
   1b376:	fa41 f303 	asr.w	r3, r1, r3
   1b37a:	4413      	add	r3, r2
   1b37c:	f3c3 51c7 	ubfx	r1, r3, #23, #8
   1b380:	4c4c      	ldr	r4, [pc, #304]	; (1b4b4 <__ieee754_powf+0x5d0>)
   1b382:	397f      	subs	r1, #127	; 0x7f
   1b384:	410c      	asrs	r4, r1
   1b386:	f3c3 0016 	ubfx	r0, r3, #0, #23
   1b38a:	ea23 0304 	bic.w	r3, r3, r4
   1b38e:	ee06 3a90 	vmov	s13, r3
   1b392:	ee37 7a66 	vsub.f32	s14, s14, s13
   1b396:	f1c1 0117 	rsb	r1, r1, #23
   1b39a:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
   1b39e:	4108      	asrs	r0, r1
   1b3a0:	2a00      	cmp	r2, #0
   1b3a2:	ee77 6a87 	vadd.f32	s13, s15, s14
   1b3a6:	bfb8      	it	lt
   1b3a8:	4240      	neglt	r0, r0
   1b3aa:	05c1      	lsls	r1, r0, #23
   1b3ac:	ee16 2a90 	vmov	r2, s13
   1b3b0:	e757      	b.n	1b262 <__ieee754_powf+0x37e>
   1b3b2:	4941      	ldr	r1, [pc, #260]	; (1b4b8 <__ieee754_powf+0x5d4>)
   1b3b4:	428b      	cmp	r3, r1
   1b3b6:	dc08      	bgt.n	1b3ca <__ieee754_powf+0x4e6>
   1b3b8:	f47f af4d 	bne.w	1b256 <__ieee754_powf+0x372>
   1b3bc:	ee76 6ac7 	vsub.f32	s13, s13, s14
   1b3c0:	eef4 7ae6 	vcmpe.f32	s15, s13
   1b3c4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   1b3c8:	d8d1      	bhi.n	1b36e <__ieee754_powf+0x48a>
   1b3ca:	eddf 7a3c 	vldr	s15, [pc, #240]	; 1b4bc <__ieee754_powf+0x5d8>
   1b3ce:	ee28 0a27 	vmul.f32	s0, s16, s15
   1b3d2:	ee20 0a27 	vmul.f32	s0, s0, s15
   1b3d6:	e5a9      	b.n	1af2c <__ieee754_powf+0x48>
   1b3d8:	eddf 4a39 	vldr	s9, [pc, #228]	; 1b4c0 <__ieee754_powf+0x5dc>
   1b3dc:	eddf 3a39 	vldr	s7, [pc, #228]	; 1b4c4 <__ieee754_powf+0x5e0>
   1b3e0:	f44f 1500 	mov.w	r5, #2097152	; 0x200000
   1b3e4:	eeb7 6a08 	vmov.f32	s12, #120	; 0x3fc00000  1.5
   1b3e8:	e66f      	b.n	1b0ca <__ieee754_powf+0x1e6>
   1b3ea:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
   1b3ee:	ee30 0a67 	vsub.f32	s0, s0, s15
   1b3f2:	eddf 6a1f 	vldr	s13, [pc, #124]	; 1b470 <__ieee754_powf+0x58c>
   1b3f6:	eddf 7a34 	vldr	s15, [pc, #208]	; 1b4c8 <__ieee754_powf+0x5e4>
   1b3fa:	ed9f 5a34 	vldr	s10, [pc, #208]	; 1b4cc <__ieee754_powf+0x5e8>
   1b3fe:	eddf 5a34 	vldr	s11, [pc, #208]	; 1b4d0 <__ieee754_powf+0x5ec>
   1b402:	eeb1 6a40 	vneg.f32	s12, s0
   1b406:	eeb5 7a00 	vmov.f32	s14, #80	; 0x3e800000  0.250
   1b40a:	eee6 6a07 	vfma.f32	s13, s12, s14
   1b40e:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
   1b412:	eea6 7a26 	vfma.f32	s14, s12, s13
   1b416:	ee60 6a00 	vmul.f32	s13, s0, s0
   1b41a:	ee27 7a26 	vmul.f32	s14, s14, s13
   1b41e:	ee67 7ac7 	vnmul.f32	s15, s15, s14
   1b422:	eee0 7a05 	vfma.f32	s15, s0, s10
   1b426:	eef0 6a67 	vmov.f32	s13, s15
   1b42a:	eee0 6a25 	vfma.f32	s13, s0, s11
   1b42e:	ee16 2a90 	vmov	r2, s13
   1b432:	f422 627f 	bic.w	r2, r2, #4080	; 0xff0
   1b436:	f022 020f 	bic.w	r2, r2, #15
   1b43a:	ee07 2a10 	vmov	s14, r2
   1b43e:	eea6 7a25 	vfma.f32	s14, s12, s11
   1b442:	ee06 2a90 	vmov	s13, r2
   1b446:	ee77 7ac7 	vsub.f32	s15, s15, s14
   1b44a:	e6d7      	b.n	1b1fc <__ieee754_powf+0x318>
   1b44c:	f000 f8f2 	bl	1b634 <scalbnf>
   1b450:	e75e      	b.n	1b310 <__ieee754_powf+0x42c>
   1b452:	bf00      	nop
   1b454:	001cc471 	.word	0x001cc471
   1b458:	005db3d6 	.word	0x005db3d6
   1b45c:	00000000 	.word	0x00000000
   1b460:	fffff000 	.word	0xfffff000
   1b464:	3e53f142 	.word	0x3e53f142
   1b468:	3e6c3255 	.word	0x3e6c3255
   1b46c:	3e8ba305 	.word	0x3e8ba305
   1b470:	3eaaaaab 	.word	0x3eaaaaab
   1b474:	3edb6db7 	.word	0x3edb6db7
   1b478:	3f19999a 	.word	0x3f19999a
   1b47c:	3f76384f 	.word	0x3f76384f
   1b480:	369dc3a0 	.word	0x369dc3a0
   1b484:	3f763800 	.word	0x3f763800
   1b488:	35bfbe8c 	.word	0x35bfbe8c
   1b48c:	3f317218 	.word	0x3f317218
   1b490:	3f317200 	.word	0x3f317200
   1b494:	b5ddea0e 	.word	0xb5ddea0e
   1b498:	3331bb4c 	.word	0x3331bb4c
   1b49c:	388ab355 	.word	0x388ab355
   1b4a0:	bb360b61 	.word	0xbb360b61
   1b4a4:	3e2aaaab 	.word	0x3e2aaaab
   1b4a8:	3f800007 	.word	0x3f800007
   1b4ac:	7149f2ca 	.word	0x7149f2ca
   1b4b0:	3338aa3c 	.word	0x3338aa3c
   1b4b4:	007fffff 	.word	0x007fffff
   1b4b8:	43160000 	.word	0x43160000
   1b4bc:	0da24260 	.word	0x0da24260
   1b4c0:	3f15c000 	.word	0x3f15c000
   1b4c4:	35d1cfdc 	.word	0x35d1cfdc
   1b4c8:	3fb8aa3b 	.word	0x3fb8aa3b
   1b4cc:	36eca570 	.word	0x36eca570
   1b4d0:	3fb8aa00 	.word	0x3fb8aa00

0001b4d4 <__ieee754_sqrtf>:
   1b4d4:	eeb1 0ac0 	vsqrt.f32	s0, s0
   1b4d8:	4770      	bx	lr
   1b4da:	bf00      	nop

0001b4dc <matherr>:
   1b4dc:	2000      	movs	r0, #0
   1b4de:	4770      	bx	lr

0001b4e0 <rint>:
   1b4e0:	b5f0      	push	{r4, r5, r6, r7, lr}
   1b4e2:	ec53 2b10 	vmov	r2, r3, d0
   1b4e6:	f3c3 560a 	ubfx	r6, r3, #20, #11
   1b4ea:	f2a6 30ff 	subw	r0, r6, #1023	; 0x3ff
   1b4ee:	2813      	cmp	r0, #19
   1b4f0:	b083      	sub	sp, #12
   1b4f2:	4619      	mov	r1, r3
   1b4f4:	ea4f 74d3 	mov.w	r4, r3, lsr #31
   1b4f8:	ee10 5a10 	vmov	r5, s0
   1b4fc:	dc2f      	bgt.n	1b55e <rint+0x7e>
   1b4fe:	2800      	cmp	r0, #0
   1b500:	db49      	blt.n	1b596 <rint+0xb6>
   1b502:	4e3e      	ldr	r6, [pc, #248]	; (1b5fc <rint+0x11c>)
   1b504:	4106      	asrs	r6, r0
   1b506:	ea03 0706 	and.w	r7, r3, r6
   1b50a:	4317      	orrs	r7, r2
   1b50c:	d02c      	beq.n	1b568 <rint+0x88>
   1b50e:	0876      	lsrs	r6, r6, #1
   1b510:	4033      	ands	r3, r6
   1b512:	431d      	orrs	r5, r3
   1b514:	d00c      	beq.n	1b530 <rint+0x50>
   1b516:	f44f 2380 	mov.w	r3, #262144	; 0x40000
   1b51a:	2813      	cmp	r0, #19
   1b51c:	ea21 0606 	bic.w	r6, r1, r6
   1b520:	fa43 f100 	asr.w	r1, r3, r0
   1b524:	ea41 0106 	orr.w	r1, r1, r6
   1b528:	bf0c      	ite	eq
   1b52a:	f04f 4500 	moveq.w	r5, #2147483648	; 0x80000000
   1b52e:	2500      	movne	r5, #0
   1b530:	4833      	ldr	r0, [pc, #204]	; (1b600 <rint+0x120>)
   1b532:	eb00 04c4 	add.w	r4, r0, r4, lsl #3
   1b536:	462a      	mov	r2, r5
   1b538:	e9d4 4500 	ldrd	r4, r5, [r4]
   1b53c:	4610      	mov	r0, r2
   1b53e:	462b      	mov	r3, r5
   1b540:	4622      	mov	r2, r4
   1b542:	f000 f8f1 	bl	1b728 <__adddf3>
   1b546:	e9cd 0100 	strd	r0, r1, [sp]
   1b54a:	4622      	mov	r2, r4
   1b54c:	462b      	mov	r3, r5
   1b54e:	e9dd 0100 	ldrd	r0, r1, [sp]
   1b552:	f000 f8e7 	bl	1b724 <__aeabi_dsub>
   1b556:	ec41 0b10 	vmov	d0, r0, r1
   1b55a:	b003      	add	sp, #12
   1b55c:	bdf0      	pop	{r4, r5, r6, r7, pc}
   1b55e:	2833      	cmp	r0, #51	; 0x33
   1b560:	dd06      	ble.n	1b570 <rint+0x90>
   1b562:	f5b0 6f80 	cmp.w	r0, #1024	; 0x400
   1b566:	d040      	beq.n	1b5ea <rint+0x10a>
   1b568:	ec43 2b10 	vmov	d0, r2, r3
   1b56c:	b003      	add	sp, #12
   1b56e:	bdf0      	pop	{r4, r5, r6, r7, pc}
   1b570:	f2a6 4613 	subw	r6, r6, #1043	; 0x413
   1b574:	f04f 30ff 	mov.w	r0, #4294967295
   1b578:	40f0      	lsrs	r0, r6
   1b57a:	4202      	tst	r2, r0
   1b57c:	d0f4      	beq.n	1b568 <rint+0x88>
   1b57e:	0840      	lsrs	r0, r0, #1
   1b580:	4202      	tst	r2, r0
   1b582:	d0d5      	beq.n	1b530 <rint+0x50>
   1b584:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   1b588:	ea25 0000 	bic.w	r0, r5, r0
   1b58c:	fa43 f606 	asr.w	r6, r3, r6
   1b590:	ea46 0500 	orr.w	r5, r6, r0
   1b594:	e7cc      	b.n	1b530 <rint+0x50>
   1b596:	f023 4000 	bic.w	r0, r3, #2147483648	; 0x80000000
   1b59a:	4310      	orrs	r0, r2
   1b59c:	d0e4      	beq.n	1b568 <rint+0x88>
   1b59e:	f3c3 0013 	ubfx	r0, r3, #0, #20
   1b5a2:	4310      	orrs	r0, r2
   1b5a4:	4247      	negs	r7, r0
   1b5a6:	4307      	orrs	r7, r0
   1b5a8:	4d15      	ldr	r5, [pc, #84]	; (1b600 <rint+0x120>)
   1b5aa:	0c5e      	lsrs	r6, r3, #17
   1b5ac:	0b3f      	lsrs	r7, r7, #12
   1b5ae:	f407 2300 	and.w	r3, r7, #524288	; 0x80000
   1b5b2:	0476      	lsls	r6, r6, #17
   1b5b4:	eb05 02c4 	add.w	r2, r5, r4, lsl #3
   1b5b8:	ea43 0106 	orr.w	r1, r3, r6
   1b5bc:	e9d2 6700 	ldrd	r6, r7, [r2]
   1b5c0:	ee10 0a10 	vmov	r0, s0
   1b5c4:	4632      	mov	r2, r6
   1b5c6:	463b      	mov	r3, r7
   1b5c8:	f000 f8ae 	bl	1b728 <__adddf3>
   1b5cc:	e9cd 0100 	strd	r0, r1, [sp]
   1b5d0:	463b      	mov	r3, r7
   1b5d2:	4632      	mov	r2, r6
   1b5d4:	e9dd 0100 	ldrd	r0, r1, [sp]
   1b5d8:	f000 f8a4 	bl	1b724 <__aeabi_dsub>
   1b5dc:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
   1b5e0:	ea43 71c4 	orr.w	r1, r3, r4, lsl #31
   1b5e4:	ec41 0b10 	vmov	d0, r0, r1
   1b5e8:	e7c0      	b.n	1b56c <rint+0x8c>
   1b5ea:	ee10 0a10 	vmov	r0, s0
   1b5ee:	4619      	mov	r1, r3
   1b5f0:	f000 f89a 	bl	1b728 <__adddf3>
   1b5f4:	ec41 0b10 	vmov	d0, r0, r1
   1b5f8:	e7b8      	b.n	1b56c <rint+0x8c>
   1b5fa:	bf00      	nop
   1b5fc:	000fffff 	.word	0x000fffff
   1b600:	00024b50 	.word	0x00024b50

0001b604 <fabsf>:
   1b604:	ee10 3a10 	vmov	r3, s0
   1b608:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
   1b60c:	ee00 3a10 	vmov	s0, r3
   1b610:	4770      	bx	lr
   1b612:	bf00      	nop

0001b614 <finitef>:
   1b614:	ee10 3a10 	vmov	r3, s0
   1b618:	f023 4000 	bic.w	r0, r3, #2147483648	; 0x80000000
   1b61c:	f1b0 4fff 	cmp.w	r0, #2139095040	; 0x7f800000
   1b620:	bfac      	ite	ge
   1b622:	2000      	movge	r0, #0
   1b624:	2001      	movlt	r0, #1
   1b626:	4770      	bx	lr

0001b628 <nanf>:
   1b628:	ed9f 0a01 	vldr	s0, [pc, #4]	; 1b630 <nanf+0x8>
   1b62c:	4770      	bx	lr
   1b62e:	bf00      	nop
   1b630:	7fc00000 	.word	0x7fc00000

0001b634 <scalbnf>:
   1b634:	b508      	push	{r3, lr}
   1b636:	ee10 3a10 	vmov	r3, s0
   1b63a:	f033 4200 	bics.w	r2, r3, #2147483648	; 0x80000000
   1b63e:	ed2d 8b02 	vpush	{d8}
   1b642:	d011      	beq.n	1b668 <scalbnf+0x34>
   1b644:	f1b2 4fff 	cmp.w	r2, #2139095040	; 0x7f800000
   1b648:	d211      	bcs.n	1b66e <scalbnf+0x3a>
   1b64a:	f5b2 0f00 	cmp.w	r2, #8388608	; 0x800000
   1b64e:	d313      	bcc.n	1b678 <scalbnf+0x44>
   1b650:	0dd2      	lsrs	r2, r2, #23
   1b652:	4402      	add	r2, r0
   1b654:	2afe      	cmp	r2, #254	; 0xfe
   1b656:	dc2e      	bgt.n	1b6b6 <scalbnf+0x82>
   1b658:	2a00      	cmp	r2, #0
   1b65a:	dd1a      	ble.n	1b692 <scalbnf+0x5e>
   1b65c:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
   1b660:	ea43 53c2 	orr.w	r3, r3, r2, lsl #23
   1b664:	ee00 3a10 	vmov	s0, r3
   1b668:	ecbd 8b02 	vpop	{d8}
   1b66c:	bd08      	pop	{r3, pc}
   1b66e:	ecbd 8b02 	vpop	{d8}
   1b672:	ee30 0a00 	vadd.f32	s0, s0, s0
   1b676:	bd08      	pop	{r3, pc}
   1b678:	4b1d      	ldr	r3, [pc, #116]	; (1b6f0 <scalbnf+0xbc>)
   1b67a:	eddf 7a1e 	vldr	s15, [pc, #120]	; 1b6f4 <scalbnf+0xc0>
   1b67e:	4298      	cmp	r0, r3
   1b680:	ee20 0a27 	vmul.f32	s0, s0, s15
   1b684:	db22      	blt.n	1b6cc <scalbnf+0x98>
   1b686:	ee10 3a10 	vmov	r3, s0
   1b68a:	f3c3 52c7 	ubfx	r2, r3, #23, #8
   1b68e:	3a19      	subs	r2, #25
   1b690:	e7df      	b.n	1b652 <scalbnf+0x1e>
   1b692:	f112 0f16 	cmn.w	r2, #22
   1b696:	da1e      	bge.n	1b6d6 <scalbnf+0xa2>
   1b698:	f24c 3350 	movw	r3, #50000	; 0xc350
   1b69c:	4298      	cmp	r0, r3
   1b69e:	dc0a      	bgt.n	1b6b6 <scalbnf+0x82>
   1b6a0:	ed9f 8a15 	vldr	s16, [pc, #84]	; 1b6f8 <scalbnf+0xc4>
   1b6a4:	eef0 0a40 	vmov.f32	s1, s0
   1b6a8:	eeb0 0a48 	vmov.f32	s0, s16
   1b6ac:	f000 f82a 	bl	1b704 <copysignf>
   1b6b0:	ee20 0a08 	vmul.f32	s0, s0, s16
   1b6b4:	e7d8      	b.n	1b668 <scalbnf+0x34>
   1b6b6:	ed9f 8a11 	vldr	s16, [pc, #68]	; 1b6fc <scalbnf+0xc8>
   1b6ba:	eef0 0a40 	vmov.f32	s1, s0
   1b6be:	eeb0 0a48 	vmov.f32	s0, s16
   1b6c2:	f000 f81f 	bl	1b704 <copysignf>
   1b6c6:	ee20 0a08 	vmul.f32	s0, s0, s16
   1b6ca:	e7cd      	b.n	1b668 <scalbnf+0x34>
   1b6cc:	eddf 0a0a 	vldr	s1, [pc, #40]	; 1b6f8 <scalbnf+0xc4>
   1b6d0:	ee20 0a20 	vmul.f32	s0, s0, s1
   1b6d4:	e7c8      	b.n	1b668 <scalbnf+0x34>
   1b6d6:	3219      	adds	r2, #25
   1b6d8:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
   1b6dc:	ea43 53c2 	orr.w	r3, r3, r2, lsl #23
   1b6e0:	eddf 7a07 	vldr	s15, [pc, #28]	; 1b700 <scalbnf+0xcc>
   1b6e4:	ee00 3a10 	vmov	s0, r3
   1b6e8:	ee20 0a27 	vmul.f32	s0, s0, s15
   1b6ec:	e7bc      	b.n	1b668 <scalbnf+0x34>
   1b6ee:	bf00      	nop
   1b6f0:	ffff3cb0 	.word	0xffff3cb0
   1b6f4:	4c000000 	.word	0x4c000000
   1b6f8:	0da24260 	.word	0x0da24260
   1b6fc:	7149f2ca 	.word	0x7149f2ca
   1b700:	33000000 	.word	0x33000000

0001b704 <copysignf>:
   1b704:	ee10 3a10 	vmov	r3, s0
   1b708:	ee10 2a90 	vmov	r2, s1
   1b70c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
   1b710:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
   1b714:	4313      	orrs	r3, r2
   1b716:	ee00 3a10 	vmov	s0, r3
   1b71a:	4770      	bx	lr

0001b71c <__aeabi_drsub>:
   1b71c:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
   1b720:	e002      	b.n	1b728 <__adddf3>
   1b722:	bf00      	nop

0001b724 <__aeabi_dsub>:
   1b724:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0001b728 <__adddf3>:
   1b728:	b530      	push	{r4, r5, lr}
   1b72a:	ea4f 0441 	mov.w	r4, r1, lsl #1
   1b72e:	ea4f 0543 	mov.w	r5, r3, lsl #1
   1b732:	ea94 0f05 	teq	r4, r5
   1b736:	bf08      	it	eq
   1b738:	ea90 0f02 	teqeq	r0, r2
   1b73c:	bf1f      	itttt	ne
   1b73e:	ea54 0c00 	orrsne.w	ip, r4, r0
   1b742:	ea55 0c02 	orrsne.w	ip, r5, r2
   1b746:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
   1b74a:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   1b74e:	f000 80e2 	beq.w	1b916 <__adddf3+0x1ee>
   1b752:	ea4f 5454 	mov.w	r4, r4, lsr #21
   1b756:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
   1b75a:	bfb8      	it	lt
   1b75c:	426d      	neglt	r5, r5
   1b75e:	dd0c      	ble.n	1b77a <__adddf3+0x52>
   1b760:	442c      	add	r4, r5
   1b762:	ea80 0202 	eor.w	r2, r0, r2
   1b766:	ea81 0303 	eor.w	r3, r1, r3
   1b76a:	ea82 0000 	eor.w	r0, r2, r0
   1b76e:	ea83 0101 	eor.w	r1, r3, r1
   1b772:	ea80 0202 	eor.w	r2, r0, r2
   1b776:	ea81 0303 	eor.w	r3, r1, r3
   1b77a:	2d36      	cmp	r5, #54	; 0x36
   1b77c:	bf88      	it	hi
   1b77e:	bd30      	pophi	{r4, r5, pc}
   1b780:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
   1b784:	ea4f 3101 	mov.w	r1, r1, lsl #12
   1b788:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
   1b78c:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
   1b790:	d002      	beq.n	1b798 <__adddf3+0x70>
   1b792:	4240      	negs	r0, r0
   1b794:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   1b798:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
   1b79c:	ea4f 3303 	mov.w	r3, r3, lsl #12
   1b7a0:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
   1b7a4:	d002      	beq.n	1b7ac <__adddf3+0x84>
   1b7a6:	4252      	negs	r2, r2
   1b7a8:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
   1b7ac:	ea94 0f05 	teq	r4, r5
   1b7b0:	f000 80a7 	beq.w	1b902 <__adddf3+0x1da>
   1b7b4:	f1a4 0401 	sub.w	r4, r4, #1
   1b7b8:	f1d5 0e20 	rsbs	lr, r5, #32
   1b7bc:	db0d      	blt.n	1b7da <__adddf3+0xb2>
   1b7be:	fa02 fc0e 	lsl.w	ip, r2, lr
   1b7c2:	fa22 f205 	lsr.w	r2, r2, r5
   1b7c6:	1880      	adds	r0, r0, r2
   1b7c8:	f141 0100 	adc.w	r1, r1, #0
   1b7cc:	fa03 f20e 	lsl.w	r2, r3, lr
   1b7d0:	1880      	adds	r0, r0, r2
   1b7d2:	fa43 f305 	asr.w	r3, r3, r5
   1b7d6:	4159      	adcs	r1, r3
   1b7d8:	e00e      	b.n	1b7f8 <__adddf3+0xd0>
   1b7da:	f1a5 0520 	sub.w	r5, r5, #32
   1b7de:	f10e 0e20 	add.w	lr, lr, #32
   1b7e2:	2a01      	cmp	r2, #1
   1b7e4:	fa03 fc0e 	lsl.w	ip, r3, lr
   1b7e8:	bf28      	it	cs
   1b7ea:	f04c 0c02 	orrcs.w	ip, ip, #2
   1b7ee:	fa43 f305 	asr.w	r3, r3, r5
   1b7f2:	18c0      	adds	r0, r0, r3
   1b7f4:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
   1b7f8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   1b7fc:	d507      	bpl.n	1b80e <__adddf3+0xe6>
   1b7fe:	f04f 0e00 	mov.w	lr, #0
   1b802:	f1dc 0c00 	rsbs	ip, ip, #0
   1b806:	eb7e 0000 	sbcs.w	r0, lr, r0
   1b80a:	eb6e 0101 	sbc.w	r1, lr, r1
   1b80e:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
   1b812:	d31b      	bcc.n	1b84c <__adddf3+0x124>
   1b814:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
   1b818:	d30c      	bcc.n	1b834 <__adddf3+0x10c>
   1b81a:	0849      	lsrs	r1, r1, #1
   1b81c:	ea5f 0030 	movs.w	r0, r0, rrx
   1b820:	ea4f 0c3c 	mov.w	ip, ip, rrx
   1b824:	f104 0401 	add.w	r4, r4, #1
   1b828:	ea4f 5244 	mov.w	r2, r4, lsl #21
   1b82c:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
   1b830:	f080 809a 	bcs.w	1b968 <__adddf3+0x240>
   1b834:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
   1b838:	bf08      	it	eq
   1b83a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
   1b83e:	f150 0000 	adcs.w	r0, r0, #0
   1b842:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   1b846:	ea41 0105 	orr.w	r1, r1, r5
   1b84a:	bd30      	pop	{r4, r5, pc}
   1b84c:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
   1b850:	4140      	adcs	r0, r0
   1b852:	eb41 0101 	adc.w	r1, r1, r1
   1b856:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   1b85a:	f1a4 0401 	sub.w	r4, r4, #1
   1b85e:	d1e9      	bne.n	1b834 <__adddf3+0x10c>
   1b860:	f091 0f00 	teq	r1, #0
   1b864:	bf04      	itt	eq
   1b866:	4601      	moveq	r1, r0
   1b868:	2000      	moveq	r0, #0
   1b86a:	fab1 f381 	clz	r3, r1
   1b86e:	bf08      	it	eq
   1b870:	3320      	addeq	r3, #32
   1b872:	f1a3 030b 	sub.w	r3, r3, #11
   1b876:	f1b3 0220 	subs.w	r2, r3, #32
   1b87a:	da0c      	bge.n	1b896 <__adddf3+0x16e>
   1b87c:	320c      	adds	r2, #12
   1b87e:	dd08      	ble.n	1b892 <__adddf3+0x16a>
   1b880:	f102 0c14 	add.w	ip, r2, #20
   1b884:	f1c2 020c 	rsb	r2, r2, #12
   1b888:	fa01 f00c 	lsl.w	r0, r1, ip
   1b88c:	fa21 f102 	lsr.w	r1, r1, r2
   1b890:	e00c      	b.n	1b8ac <__adddf3+0x184>
   1b892:	f102 0214 	add.w	r2, r2, #20
   1b896:	bfd8      	it	le
   1b898:	f1c2 0c20 	rsble	ip, r2, #32
   1b89c:	fa01 f102 	lsl.w	r1, r1, r2
   1b8a0:	fa20 fc0c 	lsr.w	ip, r0, ip
   1b8a4:	bfdc      	itt	le
   1b8a6:	ea41 010c 	orrle.w	r1, r1, ip
   1b8aa:	4090      	lslle	r0, r2
   1b8ac:	1ae4      	subs	r4, r4, r3
   1b8ae:	bfa2      	ittt	ge
   1b8b0:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
   1b8b4:	4329      	orrge	r1, r5
   1b8b6:	bd30      	popge	{r4, r5, pc}
   1b8b8:	ea6f 0404 	mvn.w	r4, r4
   1b8bc:	3c1f      	subs	r4, #31
   1b8be:	da1c      	bge.n	1b8fa <__adddf3+0x1d2>
   1b8c0:	340c      	adds	r4, #12
   1b8c2:	dc0e      	bgt.n	1b8e2 <__adddf3+0x1ba>
   1b8c4:	f104 0414 	add.w	r4, r4, #20
   1b8c8:	f1c4 0220 	rsb	r2, r4, #32
   1b8cc:	fa20 f004 	lsr.w	r0, r0, r4
   1b8d0:	fa01 f302 	lsl.w	r3, r1, r2
   1b8d4:	ea40 0003 	orr.w	r0, r0, r3
   1b8d8:	fa21 f304 	lsr.w	r3, r1, r4
   1b8dc:	ea45 0103 	orr.w	r1, r5, r3
   1b8e0:	bd30      	pop	{r4, r5, pc}
   1b8e2:	f1c4 040c 	rsb	r4, r4, #12
   1b8e6:	f1c4 0220 	rsb	r2, r4, #32
   1b8ea:	fa20 f002 	lsr.w	r0, r0, r2
   1b8ee:	fa01 f304 	lsl.w	r3, r1, r4
   1b8f2:	ea40 0003 	orr.w	r0, r0, r3
   1b8f6:	4629      	mov	r1, r5
   1b8f8:	bd30      	pop	{r4, r5, pc}
   1b8fa:	fa21 f004 	lsr.w	r0, r1, r4
   1b8fe:	4629      	mov	r1, r5
   1b900:	bd30      	pop	{r4, r5, pc}
   1b902:	f094 0f00 	teq	r4, #0
   1b906:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
   1b90a:	bf06      	itte	eq
   1b90c:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
   1b910:	3401      	addeq	r4, #1
   1b912:	3d01      	subne	r5, #1
   1b914:	e74e      	b.n	1b7b4 <__adddf3+0x8c>
   1b916:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   1b91a:	bf18      	it	ne
   1b91c:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   1b920:	d029      	beq.n	1b976 <__adddf3+0x24e>
   1b922:	ea94 0f05 	teq	r4, r5
   1b926:	bf08      	it	eq
   1b928:	ea90 0f02 	teqeq	r0, r2
   1b92c:	d005      	beq.n	1b93a <__adddf3+0x212>
   1b92e:	ea54 0c00 	orrs.w	ip, r4, r0
   1b932:	bf04      	itt	eq
   1b934:	4619      	moveq	r1, r3
   1b936:	4610      	moveq	r0, r2
   1b938:	bd30      	pop	{r4, r5, pc}
   1b93a:	ea91 0f03 	teq	r1, r3
   1b93e:	bf1e      	ittt	ne
   1b940:	2100      	movne	r1, #0
   1b942:	2000      	movne	r0, #0
   1b944:	bd30      	popne	{r4, r5, pc}
   1b946:	ea5f 5c54 	movs.w	ip, r4, lsr #21
   1b94a:	d105      	bne.n	1b958 <__adddf3+0x230>
   1b94c:	0040      	lsls	r0, r0, #1
   1b94e:	4149      	adcs	r1, r1
   1b950:	bf28      	it	cs
   1b952:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
   1b956:	bd30      	pop	{r4, r5, pc}
   1b958:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
   1b95c:	bf3c      	itt	cc
   1b95e:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
   1b962:	bd30      	popcc	{r4, r5, pc}
   1b964:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   1b968:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
   1b96c:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   1b970:	f04f 0000 	mov.w	r0, #0
   1b974:	bd30      	pop	{r4, r5, pc}
   1b976:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   1b97a:	bf1a      	itte	ne
   1b97c:	4619      	movne	r1, r3
   1b97e:	4610      	movne	r0, r2
   1b980:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
   1b984:	bf1c      	itt	ne
   1b986:	460b      	movne	r3, r1
   1b988:	4602      	movne	r2, r0
   1b98a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
   1b98e:	bf06      	itte	eq
   1b990:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
   1b994:	ea91 0f03 	teqeq	r1, r3
   1b998:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
   1b99c:	bd30      	pop	{r4, r5, pc}
   1b99e:	bf00      	nop

0001b9a0 <__aeabi_ui2d>:
   1b9a0:	f090 0f00 	teq	r0, #0
   1b9a4:	bf04      	itt	eq
   1b9a6:	2100      	moveq	r1, #0
   1b9a8:	4770      	bxeq	lr
   1b9aa:	b530      	push	{r4, r5, lr}
   1b9ac:	f44f 6480 	mov.w	r4, #1024	; 0x400
   1b9b0:	f104 0432 	add.w	r4, r4, #50	; 0x32
   1b9b4:	f04f 0500 	mov.w	r5, #0
   1b9b8:	f04f 0100 	mov.w	r1, #0
   1b9bc:	e750      	b.n	1b860 <__adddf3+0x138>
   1b9be:	bf00      	nop

0001b9c0 <__aeabi_i2d>:
   1b9c0:	f090 0f00 	teq	r0, #0
   1b9c4:	bf04      	itt	eq
   1b9c6:	2100      	moveq	r1, #0
   1b9c8:	4770      	bxeq	lr
   1b9ca:	b530      	push	{r4, r5, lr}
   1b9cc:	f44f 6480 	mov.w	r4, #1024	; 0x400
   1b9d0:	f104 0432 	add.w	r4, r4, #50	; 0x32
   1b9d4:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
   1b9d8:	bf48      	it	mi
   1b9da:	4240      	negmi	r0, r0
   1b9dc:	f04f 0100 	mov.w	r1, #0
   1b9e0:	e73e      	b.n	1b860 <__adddf3+0x138>
   1b9e2:	bf00      	nop

0001b9e4 <__aeabi_f2d>:
   1b9e4:	0042      	lsls	r2, r0, #1
   1b9e6:	ea4f 01e2 	mov.w	r1, r2, asr #3
   1b9ea:	ea4f 0131 	mov.w	r1, r1, rrx
   1b9ee:	ea4f 7002 	mov.w	r0, r2, lsl #28
   1b9f2:	bf1f      	itttt	ne
   1b9f4:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
   1b9f8:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
   1b9fc:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
   1ba00:	4770      	bxne	lr
   1ba02:	f092 0f00 	teq	r2, #0
   1ba06:	bf14      	ite	ne
   1ba08:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
   1ba0c:	4770      	bxeq	lr
   1ba0e:	b530      	push	{r4, r5, lr}
   1ba10:	f44f 7460 	mov.w	r4, #896	; 0x380
   1ba14:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   1ba18:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   1ba1c:	e720      	b.n	1b860 <__adddf3+0x138>
   1ba1e:	bf00      	nop

0001ba20 <__aeabi_ul2d>:
   1ba20:	ea50 0201 	orrs.w	r2, r0, r1
   1ba24:	bf08      	it	eq
   1ba26:	4770      	bxeq	lr
   1ba28:	b530      	push	{r4, r5, lr}
   1ba2a:	f04f 0500 	mov.w	r5, #0
   1ba2e:	e00a      	b.n	1ba46 <__aeabi_l2d+0x16>

0001ba30 <__aeabi_l2d>:
   1ba30:	ea50 0201 	orrs.w	r2, r0, r1
   1ba34:	bf08      	it	eq
   1ba36:	4770      	bxeq	lr
   1ba38:	b530      	push	{r4, r5, lr}
   1ba3a:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
   1ba3e:	d502      	bpl.n	1ba46 <__aeabi_l2d+0x16>
   1ba40:	4240      	negs	r0, r0
   1ba42:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   1ba46:	f44f 6480 	mov.w	r4, #1024	; 0x400
   1ba4a:	f104 0432 	add.w	r4, r4, #50	; 0x32
   1ba4e:	ea5f 5c91 	movs.w	ip, r1, lsr #22
   1ba52:	f43f aedc 	beq.w	1b80e <__adddf3+0xe6>
   1ba56:	f04f 0203 	mov.w	r2, #3
   1ba5a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   1ba5e:	bf18      	it	ne
   1ba60:	3203      	addne	r2, #3
   1ba62:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   1ba66:	bf18      	it	ne
   1ba68:	3203      	addne	r2, #3
   1ba6a:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
   1ba6e:	f1c2 0320 	rsb	r3, r2, #32
   1ba72:	fa00 fc03 	lsl.w	ip, r0, r3
   1ba76:	fa20 f002 	lsr.w	r0, r0, r2
   1ba7a:	fa01 fe03 	lsl.w	lr, r1, r3
   1ba7e:	ea40 000e 	orr.w	r0, r0, lr
   1ba82:	fa21 f102 	lsr.w	r1, r1, r2
   1ba86:	4414      	add	r4, r2
   1ba88:	e6c1      	b.n	1b80e <__adddf3+0xe6>
   1ba8a:	bf00      	nop

0001ba8c <__aeabi_dmul>:
   1ba8c:	b570      	push	{r4, r5, r6, lr}
   1ba8e:	f04f 0cff 	mov.w	ip, #255	; 0xff
   1ba92:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
   1ba96:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
   1ba9a:	bf1d      	ittte	ne
   1ba9c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
   1baa0:	ea94 0f0c 	teqne	r4, ip
   1baa4:	ea95 0f0c 	teqne	r5, ip
   1baa8:	f000 f8de 	bleq	1bc68 <__aeabi_dmul+0x1dc>
   1baac:	442c      	add	r4, r5
   1baae:	ea81 0603 	eor.w	r6, r1, r3
   1bab2:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
   1bab6:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
   1baba:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
   1babe:	bf18      	it	ne
   1bac0:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
   1bac4:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   1bac8:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
   1bacc:	d038      	beq.n	1bb40 <__aeabi_dmul+0xb4>
   1bace:	fba0 ce02 	umull	ip, lr, r0, r2
   1bad2:	f04f 0500 	mov.w	r5, #0
   1bad6:	fbe1 e502 	umlal	lr, r5, r1, r2
   1bada:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
   1bade:	fbe0 e503 	umlal	lr, r5, r0, r3
   1bae2:	f04f 0600 	mov.w	r6, #0
   1bae6:	fbe1 5603 	umlal	r5, r6, r1, r3
   1baea:	f09c 0f00 	teq	ip, #0
   1baee:	bf18      	it	ne
   1baf0:	f04e 0e01 	orrne.w	lr, lr, #1
   1baf4:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
   1baf8:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
   1bafc:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
   1bb00:	d204      	bcs.n	1bb0c <__aeabi_dmul+0x80>
   1bb02:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
   1bb06:	416d      	adcs	r5, r5
   1bb08:	eb46 0606 	adc.w	r6, r6, r6
   1bb0c:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
   1bb10:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
   1bb14:	ea4f 20c5 	mov.w	r0, r5, lsl #11
   1bb18:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
   1bb1c:	ea4f 2ece 	mov.w	lr, lr, lsl #11
   1bb20:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
   1bb24:	bf88      	it	hi
   1bb26:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
   1bb2a:	d81e      	bhi.n	1bb6a <__aeabi_dmul+0xde>
   1bb2c:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
   1bb30:	bf08      	it	eq
   1bb32:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
   1bb36:	f150 0000 	adcs.w	r0, r0, #0
   1bb3a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   1bb3e:	bd70      	pop	{r4, r5, r6, pc}
   1bb40:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
   1bb44:	ea46 0101 	orr.w	r1, r6, r1
   1bb48:	ea40 0002 	orr.w	r0, r0, r2
   1bb4c:	ea81 0103 	eor.w	r1, r1, r3
   1bb50:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
   1bb54:	bfc2      	ittt	gt
   1bb56:	ebd4 050c 	rsbsgt	r5, r4, ip
   1bb5a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
   1bb5e:	bd70      	popgt	{r4, r5, r6, pc}
   1bb60:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   1bb64:	f04f 0e00 	mov.w	lr, #0
   1bb68:	3c01      	subs	r4, #1
   1bb6a:	f300 80ab 	bgt.w	1bcc4 <__aeabi_dmul+0x238>
   1bb6e:	f114 0f36 	cmn.w	r4, #54	; 0x36
   1bb72:	bfde      	ittt	le
   1bb74:	2000      	movle	r0, #0
   1bb76:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
   1bb7a:	bd70      	pople	{r4, r5, r6, pc}
   1bb7c:	f1c4 0400 	rsb	r4, r4, #0
   1bb80:	3c20      	subs	r4, #32
   1bb82:	da35      	bge.n	1bbf0 <__aeabi_dmul+0x164>
   1bb84:	340c      	adds	r4, #12
   1bb86:	dc1b      	bgt.n	1bbc0 <__aeabi_dmul+0x134>
   1bb88:	f104 0414 	add.w	r4, r4, #20
   1bb8c:	f1c4 0520 	rsb	r5, r4, #32
   1bb90:	fa00 f305 	lsl.w	r3, r0, r5
   1bb94:	fa20 f004 	lsr.w	r0, r0, r4
   1bb98:	fa01 f205 	lsl.w	r2, r1, r5
   1bb9c:	ea40 0002 	orr.w	r0, r0, r2
   1bba0:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
   1bba4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   1bba8:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
   1bbac:	fa21 f604 	lsr.w	r6, r1, r4
   1bbb0:	eb42 0106 	adc.w	r1, r2, r6
   1bbb4:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   1bbb8:	bf08      	it	eq
   1bbba:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   1bbbe:	bd70      	pop	{r4, r5, r6, pc}
   1bbc0:	f1c4 040c 	rsb	r4, r4, #12
   1bbc4:	f1c4 0520 	rsb	r5, r4, #32
   1bbc8:	fa00 f304 	lsl.w	r3, r0, r4
   1bbcc:	fa20 f005 	lsr.w	r0, r0, r5
   1bbd0:	fa01 f204 	lsl.w	r2, r1, r4
   1bbd4:	ea40 0002 	orr.w	r0, r0, r2
   1bbd8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   1bbdc:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
   1bbe0:	f141 0100 	adc.w	r1, r1, #0
   1bbe4:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   1bbe8:	bf08      	it	eq
   1bbea:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   1bbee:	bd70      	pop	{r4, r5, r6, pc}
   1bbf0:	f1c4 0520 	rsb	r5, r4, #32
   1bbf4:	fa00 f205 	lsl.w	r2, r0, r5
   1bbf8:	ea4e 0e02 	orr.w	lr, lr, r2
   1bbfc:	fa20 f304 	lsr.w	r3, r0, r4
   1bc00:	fa01 f205 	lsl.w	r2, r1, r5
   1bc04:	ea43 0302 	orr.w	r3, r3, r2
   1bc08:	fa21 f004 	lsr.w	r0, r1, r4
   1bc0c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   1bc10:	fa21 f204 	lsr.w	r2, r1, r4
   1bc14:	ea20 0002 	bic.w	r0, r0, r2
   1bc18:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
   1bc1c:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   1bc20:	bf08      	it	eq
   1bc22:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   1bc26:	bd70      	pop	{r4, r5, r6, pc}
   1bc28:	f094 0f00 	teq	r4, #0
   1bc2c:	d10f      	bne.n	1bc4e <__aeabi_dmul+0x1c2>
   1bc2e:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
   1bc32:	0040      	lsls	r0, r0, #1
   1bc34:	eb41 0101 	adc.w	r1, r1, r1
   1bc38:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   1bc3c:	bf08      	it	eq
   1bc3e:	3c01      	subeq	r4, #1
   1bc40:	d0f7      	beq.n	1bc32 <__aeabi_dmul+0x1a6>
   1bc42:	ea41 0106 	orr.w	r1, r1, r6
   1bc46:	f095 0f00 	teq	r5, #0
   1bc4a:	bf18      	it	ne
   1bc4c:	4770      	bxne	lr
   1bc4e:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
   1bc52:	0052      	lsls	r2, r2, #1
   1bc54:	eb43 0303 	adc.w	r3, r3, r3
   1bc58:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
   1bc5c:	bf08      	it	eq
   1bc5e:	3d01      	subeq	r5, #1
   1bc60:	d0f7      	beq.n	1bc52 <__aeabi_dmul+0x1c6>
   1bc62:	ea43 0306 	orr.w	r3, r3, r6
   1bc66:	4770      	bx	lr
   1bc68:	ea94 0f0c 	teq	r4, ip
   1bc6c:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
   1bc70:	bf18      	it	ne
   1bc72:	ea95 0f0c 	teqne	r5, ip
   1bc76:	d00c      	beq.n	1bc92 <__aeabi_dmul+0x206>
   1bc78:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   1bc7c:	bf18      	it	ne
   1bc7e:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   1bc82:	d1d1      	bne.n	1bc28 <__aeabi_dmul+0x19c>
   1bc84:	ea81 0103 	eor.w	r1, r1, r3
   1bc88:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   1bc8c:	f04f 0000 	mov.w	r0, #0
   1bc90:	bd70      	pop	{r4, r5, r6, pc}
   1bc92:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   1bc96:	bf06      	itte	eq
   1bc98:	4610      	moveq	r0, r2
   1bc9a:	4619      	moveq	r1, r3
   1bc9c:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   1bca0:	d019      	beq.n	1bcd6 <__aeabi_dmul+0x24a>
   1bca2:	ea94 0f0c 	teq	r4, ip
   1bca6:	d102      	bne.n	1bcae <__aeabi_dmul+0x222>
   1bca8:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
   1bcac:	d113      	bne.n	1bcd6 <__aeabi_dmul+0x24a>
   1bcae:	ea95 0f0c 	teq	r5, ip
   1bcb2:	d105      	bne.n	1bcc0 <__aeabi_dmul+0x234>
   1bcb4:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
   1bcb8:	bf1c      	itt	ne
   1bcba:	4610      	movne	r0, r2
   1bcbc:	4619      	movne	r1, r3
   1bcbe:	d10a      	bne.n	1bcd6 <__aeabi_dmul+0x24a>
   1bcc0:	ea81 0103 	eor.w	r1, r1, r3
   1bcc4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   1bcc8:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
   1bccc:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   1bcd0:	f04f 0000 	mov.w	r0, #0
   1bcd4:	bd70      	pop	{r4, r5, r6, pc}
   1bcd6:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
   1bcda:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
   1bcde:	bd70      	pop	{r4, r5, r6, pc}

0001bce0 <__aeabi_ddiv>:
   1bce0:	b570      	push	{r4, r5, r6, lr}
   1bce2:	f04f 0cff 	mov.w	ip, #255	; 0xff
   1bce6:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
   1bcea:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
   1bcee:	bf1d      	ittte	ne
   1bcf0:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
   1bcf4:	ea94 0f0c 	teqne	r4, ip
   1bcf8:	ea95 0f0c 	teqne	r5, ip
   1bcfc:	f000 f8a7 	bleq	1be4e <__aeabi_ddiv+0x16e>
   1bd00:	eba4 0405 	sub.w	r4, r4, r5
   1bd04:	ea81 0e03 	eor.w	lr, r1, r3
   1bd08:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
   1bd0c:	ea4f 3101 	mov.w	r1, r1, lsl #12
   1bd10:	f000 8088 	beq.w	1be24 <__aeabi_ddiv+0x144>
   1bd14:	ea4f 3303 	mov.w	r3, r3, lsl #12
   1bd18:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
   1bd1c:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
   1bd20:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
   1bd24:	ea4f 2202 	mov.w	r2, r2, lsl #8
   1bd28:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
   1bd2c:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
   1bd30:	ea4f 2600 	mov.w	r6, r0, lsl #8
   1bd34:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
   1bd38:	429d      	cmp	r5, r3
   1bd3a:	bf08      	it	eq
   1bd3c:	4296      	cmpeq	r6, r2
   1bd3e:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
   1bd42:	f504 7440 	add.w	r4, r4, #768	; 0x300
   1bd46:	d202      	bcs.n	1bd4e <__aeabi_ddiv+0x6e>
   1bd48:	085b      	lsrs	r3, r3, #1
   1bd4a:	ea4f 0232 	mov.w	r2, r2, rrx
   1bd4e:	1ab6      	subs	r6, r6, r2
   1bd50:	eb65 0503 	sbc.w	r5, r5, r3
   1bd54:	085b      	lsrs	r3, r3, #1
   1bd56:	ea4f 0232 	mov.w	r2, r2, rrx
   1bd5a:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
   1bd5e:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
   1bd62:	ebb6 0e02 	subs.w	lr, r6, r2
   1bd66:	eb75 0e03 	sbcs.w	lr, r5, r3
   1bd6a:	bf22      	ittt	cs
   1bd6c:	1ab6      	subcs	r6, r6, r2
   1bd6e:	4675      	movcs	r5, lr
   1bd70:	ea40 000c 	orrcs.w	r0, r0, ip
   1bd74:	085b      	lsrs	r3, r3, #1
   1bd76:	ea4f 0232 	mov.w	r2, r2, rrx
   1bd7a:	ebb6 0e02 	subs.w	lr, r6, r2
   1bd7e:	eb75 0e03 	sbcs.w	lr, r5, r3
   1bd82:	bf22      	ittt	cs
   1bd84:	1ab6      	subcs	r6, r6, r2
   1bd86:	4675      	movcs	r5, lr
   1bd88:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
   1bd8c:	085b      	lsrs	r3, r3, #1
   1bd8e:	ea4f 0232 	mov.w	r2, r2, rrx
   1bd92:	ebb6 0e02 	subs.w	lr, r6, r2
   1bd96:	eb75 0e03 	sbcs.w	lr, r5, r3
   1bd9a:	bf22      	ittt	cs
   1bd9c:	1ab6      	subcs	r6, r6, r2
   1bd9e:	4675      	movcs	r5, lr
   1bda0:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
   1bda4:	085b      	lsrs	r3, r3, #1
   1bda6:	ea4f 0232 	mov.w	r2, r2, rrx
   1bdaa:	ebb6 0e02 	subs.w	lr, r6, r2
   1bdae:	eb75 0e03 	sbcs.w	lr, r5, r3
   1bdb2:	bf22      	ittt	cs
   1bdb4:	1ab6      	subcs	r6, r6, r2
   1bdb6:	4675      	movcs	r5, lr
   1bdb8:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
   1bdbc:	ea55 0e06 	orrs.w	lr, r5, r6
   1bdc0:	d018      	beq.n	1bdf4 <__aeabi_ddiv+0x114>
   1bdc2:	ea4f 1505 	mov.w	r5, r5, lsl #4
   1bdc6:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
   1bdca:	ea4f 1606 	mov.w	r6, r6, lsl #4
   1bdce:	ea4f 03c3 	mov.w	r3, r3, lsl #3
   1bdd2:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
   1bdd6:	ea4f 02c2 	mov.w	r2, r2, lsl #3
   1bdda:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
   1bdde:	d1c0      	bne.n	1bd62 <__aeabi_ddiv+0x82>
   1bde0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   1bde4:	d10b      	bne.n	1bdfe <__aeabi_ddiv+0x11e>
   1bde6:	ea41 0100 	orr.w	r1, r1, r0
   1bdea:	f04f 0000 	mov.w	r0, #0
   1bdee:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
   1bdf2:	e7b6      	b.n	1bd62 <__aeabi_ddiv+0x82>
   1bdf4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   1bdf8:	bf04      	itt	eq
   1bdfa:	4301      	orreq	r1, r0
   1bdfc:	2000      	moveq	r0, #0
   1bdfe:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
   1be02:	bf88      	it	hi
   1be04:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
   1be08:	f63f aeaf 	bhi.w	1bb6a <__aeabi_dmul+0xde>
   1be0c:	ebb5 0c03 	subs.w	ip, r5, r3
   1be10:	bf04      	itt	eq
   1be12:	ebb6 0c02 	subseq.w	ip, r6, r2
   1be16:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
   1be1a:	f150 0000 	adcs.w	r0, r0, #0
   1be1e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   1be22:	bd70      	pop	{r4, r5, r6, pc}
   1be24:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
   1be28:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
   1be2c:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
   1be30:	bfc2      	ittt	gt
   1be32:	ebd4 050c 	rsbsgt	r5, r4, ip
   1be36:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
   1be3a:	bd70      	popgt	{r4, r5, r6, pc}
   1be3c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   1be40:	f04f 0e00 	mov.w	lr, #0
   1be44:	3c01      	subs	r4, #1
   1be46:	e690      	b.n	1bb6a <__aeabi_dmul+0xde>
   1be48:	ea45 0e06 	orr.w	lr, r5, r6
   1be4c:	e68d      	b.n	1bb6a <__aeabi_dmul+0xde>
   1be4e:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
   1be52:	ea94 0f0c 	teq	r4, ip
   1be56:	bf08      	it	eq
   1be58:	ea95 0f0c 	teqeq	r5, ip
   1be5c:	f43f af3b 	beq.w	1bcd6 <__aeabi_dmul+0x24a>
   1be60:	ea94 0f0c 	teq	r4, ip
   1be64:	d10a      	bne.n	1be7c <__aeabi_ddiv+0x19c>
   1be66:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
   1be6a:	f47f af34 	bne.w	1bcd6 <__aeabi_dmul+0x24a>
   1be6e:	ea95 0f0c 	teq	r5, ip
   1be72:	f47f af25 	bne.w	1bcc0 <__aeabi_dmul+0x234>
   1be76:	4610      	mov	r0, r2
   1be78:	4619      	mov	r1, r3
   1be7a:	e72c      	b.n	1bcd6 <__aeabi_dmul+0x24a>
   1be7c:	ea95 0f0c 	teq	r5, ip
   1be80:	d106      	bne.n	1be90 <__aeabi_ddiv+0x1b0>
   1be82:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
   1be86:	f43f aefd 	beq.w	1bc84 <__aeabi_dmul+0x1f8>
   1be8a:	4610      	mov	r0, r2
   1be8c:	4619      	mov	r1, r3
   1be8e:	e722      	b.n	1bcd6 <__aeabi_dmul+0x24a>
   1be90:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   1be94:	bf18      	it	ne
   1be96:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   1be9a:	f47f aec5 	bne.w	1bc28 <__aeabi_dmul+0x19c>
   1be9e:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
   1bea2:	f47f af0d 	bne.w	1bcc0 <__aeabi_dmul+0x234>
   1bea6:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
   1beaa:	f47f aeeb 	bne.w	1bc84 <__aeabi_dmul+0x1f8>
   1beae:	e712      	b.n	1bcd6 <__aeabi_dmul+0x24a>

0001beb0 <__gedf2>:
   1beb0:	f04f 3cff 	mov.w	ip, #4294967295
   1beb4:	e006      	b.n	1bec4 <__cmpdf2+0x4>
   1beb6:	bf00      	nop

0001beb8 <__ledf2>:
   1beb8:	f04f 0c01 	mov.w	ip, #1
   1bebc:	e002      	b.n	1bec4 <__cmpdf2+0x4>
   1bebe:	bf00      	nop

0001bec0 <__cmpdf2>:
   1bec0:	f04f 0c01 	mov.w	ip, #1
   1bec4:	f84d cd04 	str.w	ip, [sp, #-4]!
   1bec8:	ea4f 0c41 	mov.w	ip, r1, lsl #1
   1becc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   1bed0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
   1bed4:	bf18      	it	ne
   1bed6:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
   1beda:	d01b      	beq.n	1bf14 <__cmpdf2+0x54>
   1bedc:	b001      	add	sp, #4
   1bede:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
   1bee2:	bf0c      	ite	eq
   1bee4:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
   1bee8:	ea91 0f03 	teqne	r1, r3
   1beec:	bf02      	ittt	eq
   1beee:	ea90 0f02 	teqeq	r0, r2
   1bef2:	2000      	moveq	r0, #0
   1bef4:	4770      	bxeq	lr
   1bef6:	f110 0f00 	cmn.w	r0, #0
   1befa:	ea91 0f03 	teq	r1, r3
   1befe:	bf58      	it	pl
   1bf00:	4299      	cmppl	r1, r3
   1bf02:	bf08      	it	eq
   1bf04:	4290      	cmpeq	r0, r2
   1bf06:	bf2c      	ite	cs
   1bf08:	17d8      	asrcs	r0, r3, #31
   1bf0a:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
   1bf0e:	f040 0001 	orr.w	r0, r0, #1
   1bf12:	4770      	bx	lr
   1bf14:	ea4f 0c41 	mov.w	ip, r1, lsl #1
   1bf18:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   1bf1c:	d102      	bne.n	1bf24 <__cmpdf2+0x64>
   1bf1e:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
   1bf22:	d107      	bne.n	1bf34 <__cmpdf2+0x74>
   1bf24:	ea4f 0c43 	mov.w	ip, r3, lsl #1
   1bf28:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   1bf2c:	d1d6      	bne.n	1bedc <__cmpdf2+0x1c>
   1bf2e:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
   1bf32:	d0d3      	beq.n	1bedc <__cmpdf2+0x1c>
   1bf34:	f85d 0b04 	ldr.w	r0, [sp], #4
   1bf38:	4770      	bx	lr
   1bf3a:	bf00      	nop

0001bf3c <__aeabi_cdrcmple>:
   1bf3c:	4684      	mov	ip, r0
   1bf3e:	4610      	mov	r0, r2
   1bf40:	4662      	mov	r2, ip
   1bf42:	468c      	mov	ip, r1
   1bf44:	4619      	mov	r1, r3
   1bf46:	4663      	mov	r3, ip
   1bf48:	e000      	b.n	1bf4c <__aeabi_cdcmpeq>
   1bf4a:	bf00      	nop

0001bf4c <__aeabi_cdcmpeq>:
   1bf4c:	b501      	push	{r0, lr}
   1bf4e:	f7ff ffb7 	bl	1bec0 <__cmpdf2>
   1bf52:	2800      	cmp	r0, #0
   1bf54:	bf48      	it	mi
   1bf56:	f110 0f00 	cmnmi.w	r0, #0
   1bf5a:	bd01      	pop	{r0, pc}

0001bf5c <__aeabi_dcmpeq>:
   1bf5c:	f84d ed08 	str.w	lr, [sp, #-8]!
   1bf60:	f7ff fff4 	bl	1bf4c <__aeabi_cdcmpeq>
   1bf64:	bf0c      	ite	eq
   1bf66:	2001      	moveq	r0, #1
   1bf68:	2000      	movne	r0, #0
   1bf6a:	f85d fb08 	ldr.w	pc, [sp], #8
   1bf6e:	bf00      	nop

0001bf70 <__aeabi_dcmplt>:
   1bf70:	f84d ed08 	str.w	lr, [sp, #-8]!
   1bf74:	f7ff ffea 	bl	1bf4c <__aeabi_cdcmpeq>
   1bf78:	bf34      	ite	cc
   1bf7a:	2001      	movcc	r0, #1
   1bf7c:	2000      	movcs	r0, #0
   1bf7e:	f85d fb08 	ldr.w	pc, [sp], #8
   1bf82:	bf00      	nop

0001bf84 <__aeabi_dcmple>:
   1bf84:	f84d ed08 	str.w	lr, [sp, #-8]!
   1bf88:	f7ff ffe0 	bl	1bf4c <__aeabi_cdcmpeq>
   1bf8c:	bf94      	ite	ls
   1bf8e:	2001      	movls	r0, #1
   1bf90:	2000      	movhi	r0, #0
   1bf92:	f85d fb08 	ldr.w	pc, [sp], #8
   1bf96:	bf00      	nop

0001bf98 <__aeabi_dcmpge>:
   1bf98:	f84d ed08 	str.w	lr, [sp, #-8]!
   1bf9c:	f7ff ffce 	bl	1bf3c <__aeabi_cdrcmple>
   1bfa0:	bf94      	ite	ls
   1bfa2:	2001      	movls	r0, #1
   1bfa4:	2000      	movhi	r0, #0
   1bfa6:	f85d fb08 	ldr.w	pc, [sp], #8
   1bfaa:	bf00      	nop

0001bfac <__aeabi_dcmpgt>:
   1bfac:	f84d ed08 	str.w	lr, [sp, #-8]!
   1bfb0:	f7ff ffc4 	bl	1bf3c <__aeabi_cdrcmple>
   1bfb4:	bf34      	ite	cc
   1bfb6:	2001      	movcc	r0, #1
   1bfb8:	2000      	movcs	r0, #0
   1bfba:	f85d fb08 	ldr.w	pc, [sp], #8
   1bfbe:	bf00      	nop

0001bfc0 <__aeabi_d2iz>:
   1bfc0:	ea4f 0241 	mov.w	r2, r1, lsl #1
   1bfc4:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
   1bfc8:	d215      	bcs.n	1bff6 <__aeabi_d2iz+0x36>
   1bfca:	d511      	bpl.n	1bff0 <__aeabi_d2iz+0x30>
   1bfcc:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
   1bfd0:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
   1bfd4:	d912      	bls.n	1bffc <__aeabi_d2iz+0x3c>
   1bfd6:	ea4f 23c1 	mov.w	r3, r1, lsl #11
   1bfda:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
   1bfde:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
   1bfe2:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
   1bfe6:	fa23 f002 	lsr.w	r0, r3, r2
   1bfea:	bf18      	it	ne
   1bfec:	4240      	negne	r0, r0
   1bfee:	4770      	bx	lr
   1bff0:	f04f 0000 	mov.w	r0, #0
   1bff4:	4770      	bx	lr
   1bff6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
   1bffa:	d105      	bne.n	1c008 <__aeabi_d2iz+0x48>
   1bffc:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
   1c000:	bf08      	it	eq
   1c002:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
   1c006:	4770      	bx	lr
   1c008:	f04f 0000 	mov.w	r0, #0
   1c00c:	4770      	bx	lr
   1c00e:	bf00      	nop

0001c010 <__aeabi_d2uiz>:
   1c010:	004a      	lsls	r2, r1, #1
   1c012:	d211      	bcs.n	1c038 <__aeabi_d2uiz+0x28>
   1c014:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
   1c018:	d211      	bcs.n	1c03e <__aeabi_d2uiz+0x2e>
   1c01a:	d50d      	bpl.n	1c038 <__aeabi_d2uiz+0x28>
   1c01c:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
   1c020:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
   1c024:	d40e      	bmi.n	1c044 <__aeabi_d2uiz+0x34>
   1c026:	ea4f 23c1 	mov.w	r3, r1, lsl #11
   1c02a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
   1c02e:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
   1c032:	fa23 f002 	lsr.w	r0, r3, r2
   1c036:	4770      	bx	lr
   1c038:	f04f 0000 	mov.w	r0, #0
   1c03c:	4770      	bx	lr
   1c03e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
   1c042:	d102      	bne.n	1c04a <__aeabi_d2uiz+0x3a>
   1c044:	f04f 30ff 	mov.w	r0, #4294967295
   1c048:	4770      	bx	lr
   1c04a:	f04f 0000 	mov.w	r0, #0
   1c04e:	4770      	bx	lr

0001c050 <__aeabi_d2f>:
   1c050:	ea4f 0241 	mov.w	r2, r1, lsl #1
   1c054:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
   1c058:	bf24      	itt	cs
   1c05a:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
   1c05e:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
   1c062:	d90d      	bls.n	1c080 <__aeabi_d2f+0x30>
   1c064:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
   1c068:	ea4f 02c0 	mov.w	r2, r0, lsl #3
   1c06c:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
   1c070:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
   1c074:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
   1c078:	bf08      	it	eq
   1c07a:	f020 0001 	biceq.w	r0, r0, #1
   1c07e:	4770      	bx	lr
   1c080:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
   1c084:	d121      	bne.n	1c0ca <__aeabi_d2f+0x7a>
   1c086:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
   1c08a:	bfbc      	itt	lt
   1c08c:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
   1c090:	4770      	bxlt	lr
   1c092:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   1c096:	ea4f 5252 	mov.w	r2, r2, lsr #21
   1c09a:	f1c2 0218 	rsb	r2, r2, #24
   1c09e:	f1c2 0c20 	rsb	ip, r2, #32
   1c0a2:	fa10 f30c 	lsls.w	r3, r0, ip
   1c0a6:	fa20 f002 	lsr.w	r0, r0, r2
   1c0aa:	bf18      	it	ne
   1c0ac:	f040 0001 	orrne.w	r0, r0, #1
   1c0b0:	ea4f 23c1 	mov.w	r3, r1, lsl #11
   1c0b4:	ea4f 23d3 	mov.w	r3, r3, lsr #11
   1c0b8:	fa03 fc0c 	lsl.w	ip, r3, ip
   1c0bc:	ea40 000c 	orr.w	r0, r0, ip
   1c0c0:	fa23 f302 	lsr.w	r3, r3, r2
   1c0c4:	ea4f 0343 	mov.w	r3, r3, lsl #1
   1c0c8:	e7cc      	b.n	1c064 <__aeabi_d2f+0x14>
   1c0ca:	ea7f 5362 	mvns.w	r3, r2, asr #21
   1c0ce:	d107      	bne.n	1c0e0 <__aeabi_d2f+0x90>
   1c0d0:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
   1c0d4:	bf1e      	ittt	ne
   1c0d6:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
   1c0da:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
   1c0de:	4770      	bxne	lr
   1c0e0:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
   1c0e4:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
   1c0e8:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
   1c0ec:	4770      	bx	lr
   1c0ee:	bf00      	nop

0001c0f0 <__aeabi_frsub>:
   1c0f0:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
   1c0f4:	e002      	b.n	1c0fc <__addsf3>
   1c0f6:	bf00      	nop

0001c0f8 <__aeabi_fsub>:
   1c0f8:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

0001c0fc <__addsf3>:
   1c0fc:	0042      	lsls	r2, r0, #1
   1c0fe:	bf1f      	itttt	ne
   1c100:	ea5f 0341 	movsne.w	r3, r1, lsl #1
   1c104:	ea92 0f03 	teqne	r2, r3
   1c108:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
   1c10c:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
   1c110:	d06a      	beq.n	1c1e8 <__addsf3+0xec>
   1c112:	ea4f 6212 	mov.w	r2, r2, lsr #24
   1c116:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
   1c11a:	bfc1      	itttt	gt
   1c11c:	18d2      	addgt	r2, r2, r3
   1c11e:	4041      	eorgt	r1, r0
   1c120:	4048      	eorgt	r0, r1
   1c122:	4041      	eorgt	r1, r0
   1c124:	bfb8      	it	lt
   1c126:	425b      	neglt	r3, r3
   1c128:	2b19      	cmp	r3, #25
   1c12a:	bf88      	it	hi
   1c12c:	4770      	bxhi	lr
   1c12e:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
   1c132:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
   1c136:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
   1c13a:	bf18      	it	ne
   1c13c:	4240      	negne	r0, r0
   1c13e:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
   1c142:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
   1c146:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
   1c14a:	bf18      	it	ne
   1c14c:	4249      	negne	r1, r1
   1c14e:	ea92 0f03 	teq	r2, r3
   1c152:	d03f      	beq.n	1c1d4 <__addsf3+0xd8>
   1c154:	f1a2 0201 	sub.w	r2, r2, #1
   1c158:	fa41 fc03 	asr.w	ip, r1, r3
   1c15c:	eb10 000c 	adds.w	r0, r0, ip
   1c160:	f1c3 0320 	rsb	r3, r3, #32
   1c164:	fa01 f103 	lsl.w	r1, r1, r3
   1c168:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
   1c16c:	d502      	bpl.n	1c174 <__addsf3+0x78>
   1c16e:	4249      	negs	r1, r1
   1c170:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
   1c174:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
   1c178:	d313      	bcc.n	1c1a2 <__addsf3+0xa6>
   1c17a:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
   1c17e:	d306      	bcc.n	1c18e <__addsf3+0x92>
   1c180:	0840      	lsrs	r0, r0, #1
   1c182:	ea4f 0131 	mov.w	r1, r1, rrx
   1c186:	f102 0201 	add.w	r2, r2, #1
   1c18a:	2afe      	cmp	r2, #254	; 0xfe
   1c18c:	d251      	bcs.n	1c232 <__addsf3+0x136>
   1c18e:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
   1c192:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
   1c196:	bf08      	it	eq
   1c198:	f020 0001 	biceq.w	r0, r0, #1
   1c19c:	ea40 0003 	orr.w	r0, r0, r3
   1c1a0:	4770      	bx	lr
   1c1a2:	0049      	lsls	r1, r1, #1
   1c1a4:	eb40 0000 	adc.w	r0, r0, r0
   1c1a8:	f410 0f00 	tst.w	r0, #8388608	; 0x800000
   1c1ac:	f1a2 0201 	sub.w	r2, r2, #1
   1c1b0:	d1ed      	bne.n	1c18e <__addsf3+0x92>
   1c1b2:	fab0 fc80 	clz	ip, r0
   1c1b6:	f1ac 0c08 	sub.w	ip, ip, #8
   1c1ba:	ebb2 020c 	subs.w	r2, r2, ip
   1c1be:	fa00 f00c 	lsl.w	r0, r0, ip
   1c1c2:	bfaa      	itet	ge
   1c1c4:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
   1c1c8:	4252      	neglt	r2, r2
   1c1ca:	4318      	orrge	r0, r3
   1c1cc:	bfbc      	itt	lt
   1c1ce:	40d0      	lsrlt	r0, r2
   1c1d0:	4318      	orrlt	r0, r3
   1c1d2:	4770      	bx	lr
   1c1d4:	f092 0f00 	teq	r2, #0
   1c1d8:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
   1c1dc:	bf06      	itte	eq
   1c1de:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
   1c1e2:	3201      	addeq	r2, #1
   1c1e4:	3b01      	subne	r3, #1
   1c1e6:	e7b5      	b.n	1c154 <__addsf3+0x58>
   1c1e8:	ea4f 0341 	mov.w	r3, r1, lsl #1
   1c1ec:	ea7f 6c22 	mvns.w	ip, r2, asr #24
   1c1f0:	bf18      	it	ne
   1c1f2:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
   1c1f6:	d021      	beq.n	1c23c <__addsf3+0x140>
   1c1f8:	ea92 0f03 	teq	r2, r3
   1c1fc:	d004      	beq.n	1c208 <__addsf3+0x10c>
   1c1fe:	f092 0f00 	teq	r2, #0
   1c202:	bf08      	it	eq
   1c204:	4608      	moveq	r0, r1
   1c206:	4770      	bx	lr
   1c208:	ea90 0f01 	teq	r0, r1
   1c20c:	bf1c      	itt	ne
   1c20e:	2000      	movne	r0, #0
   1c210:	4770      	bxne	lr
   1c212:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
   1c216:	d104      	bne.n	1c222 <__addsf3+0x126>
   1c218:	0040      	lsls	r0, r0, #1
   1c21a:	bf28      	it	cs
   1c21c:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
   1c220:	4770      	bx	lr
   1c222:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
   1c226:	bf3c      	itt	cc
   1c228:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
   1c22c:	4770      	bxcc	lr
   1c22e:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
   1c232:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
   1c236:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
   1c23a:	4770      	bx	lr
   1c23c:	ea7f 6222 	mvns.w	r2, r2, asr #24
   1c240:	bf16      	itet	ne
   1c242:	4608      	movne	r0, r1
   1c244:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
   1c248:	4601      	movne	r1, r0
   1c24a:	0242      	lsls	r2, r0, #9
   1c24c:	bf06      	itte	eq
   1c24e:	ea5f 2341 	movseq.w	r3, r1, lsl #9
   1c252:	ea90 0f01 	teqeq	r0, r1
   1c256:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
   1c25a:	4770      	bx	lr

0001c25c <__aeabi_ui2f>:
   1c25c:	f04f 0300 	mov.w	r3, #0
   1c260:	e004      	b.n	1c26c <__aeabi_i2f+0x8>
   1c262:	bf00      	nop

0001c264 <__aeabi_i2f>:
   1c264:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
   1c268:	bf48      	it	mi
   1c26a:	4240      	negmi	r0, r0
   1c26c:	ea5f 0c00 	movs.w	ip, r0
   1c270:	bf08      	it	eq
   1c272:	4770      	bxeq	lr
   1c274:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
   1c278:	4601      	mov	r1, r0
   1c27a:	f04f 0000 	mov.w	r0, #0
   1c27e:	e01c      	b.n	1c2ba <__aeabi_l2f+0x2a>

0001c280 <__aeabi_ul2f>:
   1c280:	ea50 0201 	orrs.w	r2, r0, r1
   1c284:	bf08      	it	eq
   1c286:	4770      	bxeq	lr
   1c288:	f04f 0300 	mov.w	r3, #0
   1c28c:	e00a      	b.n	1c2a4 <__aeabi_l2f+0x14>
   1c28e:	bf00      	nop

0001c290 <__aeabi_l2f>:
   1c290:	ea50 0201 	orrs.w	r2, r0, r1
   1c294:	bf08      	it	eq
   1c296:	4770      	bxeq	lr
   1c298:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
   1c29c:	d502      	bpl.n	1c2a4 <__aeabi_l2f+0x14>
   1c29e:	4240      	negs	r0, r0
   1c2a0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   1c2a4:	ea5f 0c01 	movs.w	ip, r1
   1c2a8:	bf02      	ittt	eq
   1c2aa:	4684      	moveq	ip, r0
   1c2ac:	4601      	moveq	r1, r0
   1c2ae:	2000      	moveq	r0, #0
   1c2b0:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
   1c2b4:	bf08      	it	eq
   1c2b6:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
   1c2ba:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
   1c2be:	fabc f28c 	clz	r2, ip
   1c2c2:	3a08      	subs	r2, #8
   1c2c4:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
   1c2c8:	db10      	blt.n	1c2ec <__aeabi_l2f+0x5c>
   1c2ca:	fa01 fc02 	lsl.w	ip, r1, r2
   1c2ce:	4463      	add	r3, ip
   1c2d0:	fa00 fc02 	lsl.w	ip, r0, r2
   1c2d4:	f1c2 0220 	rsb	r2, r2, #32
   1c2d8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
   1c2dc:	fa20 f202 	lsr.w	r2, r0, r2
   1c2e0:	eb43 0002 	adc.w	r0, r3, r2
   1c2e4:	bf08      	it	eq
   1c2e6:	f020 0001 	biceq.w	r0, r0, #1
   1c2ea:	4770      	bx	lr
   1c2ec:	f102 0220 	add.w	r2, r2, #32
   1c2f0:	fa01 fc02 	lsl.w	ip, r1, r2
   1c2f4:	f1c2 0220 	rsb	r2, r2, #32
   1c2f8:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
   1c2fc:	fa21 f202 	lsr.w	r2, r1, r2
   1c300:	eb43 0002 	adc.w	r0, r3, r2
   1c304:	bf08      	it	eq
   1c306:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
   1c30a:	4770      	bx	lr

0001c30c <__aeabi_ldivmod>:
   1c30c:	b97b      	cbnz	r3, 1c32e <__aeabi_ldivmod+0x22>
   1c30e:	b972      	cbnz	r2, 1c32e <__aeabi_ldivmod+0x22>
   1c310:	2900      	cmp	r1, #0
   1c312:	bfbe      	ittt	lt
   1c314:	2000      	movlt	r0, #0
   1c316:	f04f 4100 	movlt.w	r1, #2147483648	; 0x80000000
   1c31a:	e006      	blt.n	1c32a <__aeabi_ldivmod+0x1e>
   1c31c:	bf08      	it	eq
   1c31e:	2800      	cmpeq	r0, #0
   1c320:	bf1c      	itt	ne
   1c322:	f06f 4100 	mvnne.w	r1, #2147483648	; 0x80000000
   1c326:	f04f 30ff 	movne.w	r0, #4294967295
   1c32a:	f001 b979 	b.w	1d620 <__aeabi_idiv0>
   1c32e:	f1ad 0c08 	sub.w	ip, sp, #8
   1c332:	e96d ce04 	strd	ip, lr, [sp, #-16]!
   1c336:	2900      	cmp	r1, #0
   1c338:	db09      	blt.n	1c34e <__aeabi_ldivmod+0x42>
   1c33a:	2b00      	cmp	r3, #0
   1c33c:	db1a      	blt.n	1c374 <__aeabi_ldivmod+0x68>
   1c33e:	f000 f885 	bl	1c44c <__udivmoddi4>
   1c342:	f8dd e004 	ldr.w	lr, [sp, #4]
   1c346:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
   1c34a:	b004      	add	sp, #16
   1c34c:	4770      	bx	lr
   1c34e:	4240      	negs	r0, r0
   1c350:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   1c354:	2b00      	cmp	r3, #0
   1c356:	db1b      	blt.n	1c390 <__aeabi_ldivmod+0x84>
   1c358:	f000 f878 	bl	1c44c <__udivmoddi4>
   1c35c:	f8dd e004 	ldr.w	lr, [sp, #4]
   1c360:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
   1c364:	b004      	add	sp, #16
   1c366:	4240      	negs	r0, r0
   1c368:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   1c36c:	4252      	negs	r2, r2
   1c36e:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
   1c372:	4770      	bx	lr
   1c374:	4252      	negs	r2, r2
   1c376:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
   1c37a:	f000 f867 	bl	1c44c <__udivmoddi4>
   1c37e:	f8dd e004 	ldr.w	lr, [sp, #4]
   1c382:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
   1c386:	b004      	add	sp, #16
   1c388:	4240      	negs	r0, r0
   1c38a:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   1c38e:	4770      	bx	lr
   1c390:	4252      	negs	r2, r2
   1c392:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
   1c396:	f000 f859 	bl	1c44c <__udivmoddi4>
   1c39a:	f8dd e004 	ldr.w	lr, [sp, #4]
   1c39e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
   1c3a2:	b004      	add	sp, #16
   1c3a4:	4252      	negs	r2, r2
   1c3a6:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
   1c3aa:	4770      	bx	lr

0001c3ac <__aeabi_uldivmod>:
   1c3ac:	b953      	cbnz	r3, 1c3c4 <__aeabi_uldivmod+0x18>
   1c3ae:	b94a      	cbnz	r2, 1c3c4 <__aeabi_uldivmod+0x18>
   1c3b0:	2900      	cmp	r1, #0
   1c3b2:	bf08      	it	eq
   1c3b4:	2800      	cmpeq	r0, #0
   1c3b6:	bf1c      	itt	ne
   1c3b8:	f04f 31ff 	movne.w	r1, #4294967295
   1c3bc:	f04f 30ff 	movne.w	r0, #4294967295
   1c3c0:	f001 b92e 	b.w	1d620 <__aeabi_idiv0>
   1c3c4:	f1ad 0c08 	sub.w	ip, sp, #8
   1c3c8:	e96d ce04 	strd	ip, lr, [sp, #-16]!
   1c3cc:	f000 f83e 	bl	1c44c <__udivmoddi4>
   1c3d0:	f8dd e004 	ldr.w	lr, [sp, #4]
   1c3d4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
   1c3d8:	b004      	add	sp, #16
   1c3da:	4770      	bx	lr

0001c3dc <__aeabi_f2lz>:
   1c3dc:	ee07 0a90 	vmov	s15, r0
   1c3e0:	eef5 7ac0 	vcmpe.f32	s15, #0.0
   1c3e4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   1c3e8:	d401      	bmi.n	1c3ee <__aeabi_f2lz+0x12>
   1c3ea:	f000 b809 	b.w	1c400 <__aeabi_f2ulz>
   1c3ee:	b508      	push	{r3, lr}
   1c3f0:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
   1c3f4:	f000 f804 	bl	1c400 <__aeabi_f2ulz>
   1c3f8:	4240      	negs	r0, r0
   1c3fa:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   1c3fe:	bd08      	pop	{r3, pc}

0001c400 <__aeabi_f2ulz>:
   1c400:	b5d0      	push	{r4, r6, r7, lr}
   1c402:	f7ff faef 	bl	1b9e4 <__aeabi_f2d>
   1c406:	2200      	movs	r2, #0
   1c408:	4b0e      	ldr	r3, [pc, #56]	; (1c444 <__aeabi_f2ulz+0x44>)
   1c40a:	4606      	mov	r6, r0
   1c40c:	460f      	mov	r7, r1
   1c40e:	f7ff fb3d 	bl	1ba8c <__aeabi_dmul>
   1c412:	f7ff fdfd 	bl	1c010 <__aeabi_d2uiz>
   1c416:	4604      	mov	r4, r0
   1c418:	f7ff fac2 	bl	1b9a0 <__aeabi_ui2d>
   1c41c:	2200      	movs	r2, #0
   1c41e:	4b0a      	ldr	r3, [pc, #40]	; (1c448 <__aeabi_f2ulz+0x48>)
   1c420:	f7ff fb34 	bl	1ba8c <__aeabi_dmul>
   1c424:	4602      	mov	r2, r0
   1c426:	460b      	mov	r3, r1
   1c428:	4630      	mov	r0, r6
   1c42a:	4639      	mov	r1, r7
   1c42c:	f7ff f97a 	bl	1b724 <__aeabi_dsub>
   1c430:	f7ff fdee 	bl	1c010 <__aeabi_d2uiz>
   1c434:	4623      	mov	r3, r4
   1c436:	2200      	movs	r2, #0
   1c438:	ea42 0200 	orr.w	r2, r2, r0
   1c43c:	4610      	mov	r0, r2
   1c43e:	4619      	mov	r1, r3
   1c440:	bdd0      	pop	{r4, r6, r7, pc}
   1c442:	bf00      	nop
   1c444:	3df00000 	.word	0x3df00000
   1c448:	41f00000 	.word	0x41f00000

0001c44c <__udivmoddi4>:
   1c44c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   1c450:	468c      	mov	ip, r1
   1c452:	460d      	mov	r5, r1
   1c454:	4604      	mov	r4, r0
   1c456:	9e08      	ldr	r6, [sp, #32]
   1c458:	2b00      	cmp	r3, #0
   1c45a:	d151      	bne.n	1c500 <__udivmoddi4+0xb4>
   1c45c:	428a      	cmp	r2, r1
   1c45e:	4617      	mov	r7, r2
   1c460:	d96d      	bls.n	1c53e <__udivmoddi4+0xf2>
   1c462:	fab2 fe82 	clz	lr, r2
   1c466:	f1be 0f00 	cmp.w	lr, #0
   1c46a:	d00b      	beq.n	1c484 <__udivmoddi4+0x38>
   1c46c:	f1ce 0c20 	rsb	ip, lr, #32
   1c470:	fa01 f50e 	lsl.w	r5, r1, lr
   1c474:	fa20 fc0c 	lsr.w	ip, r0, ip
   1c478:	fa02 f70e 	lsl.w	r7, r2, lr
   1c47c:	ea4c 0c05 	orr.w	ip, ip, r5
   1c480:	fa00 f40e 	lsl.w	r4, r0, lr
   1c484:	ea4f 4a17 	mov.w	sl, r7, lsr #16
   1c488:	0c25      	lsrs	r5, r4, #16
   1c48a:	fbbc f8fa 	udiv	r8, ip, sl
   1c48e:	fa1f f987 	uxth.w	r9, r7
   1c492:	fb0a cc18 	mls	ip, sl, r8, ip
   1c496:	ea45 450c 	orr.w	r5, r5, ip, lsl #16
   1c49a:	fb08 f309 	mul.w	r3, r8, r9
   1c49e:	42ab      	cmp	r3, r5
   1c4a0:	d90a      	bls.n	1c4b8 <__udivmoddi4+0x6c>
   1c4a2:	19ed      	adds	r5, r5, r7
   1c4a4:	f108 32ff 	add.w	r2, r8, #4294967295
   1c4a8:	f080 8123 	bcs.w	1c6f2 <__udivmoddi4+0x2a6>
   1c4ac:	42ab      	cmp	r3, r5
   1c4ae:	f240 8120 	bls.w	1c6f2 <__udivmoddi4+0x2a6>
   1c4b2:	f1a8 0802 	sub.w	r8, r8, #2
   1c4b6:	443d      	add	r5, r7
   1c4b8:	1aed      	subs	r5, r5, r3
   1c4ba:	b2a4      	uxth	r4, r4
   1c4bc:	fbb5 f0fa 	udiv	r0, r5, sl
   1c4c0:	fb0a 5510 	mls	r5, sl, r0, r5
   1c4c4:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
   1c4c8:	fb00 f909 	mul.w	r9, r0, r9
   1c4cc:	45a1      	cmp	r9, r4
   1c4ce:	d909      	bls.n	1c4e4 <__udivmoddi4+0x98>
   1c4d0:	19e4      	adds	r4, r4, r7
   1c4d2:	f100 33ff 	add.w	r3, r0, #4294967295
   1c4d6:	f080 810a 	bcs.w	1c6ee <__udivmoddi4+0x2a2>
   1c4da:	45a1      	cmp	r9, r4
   1c4dc:	f240 8107 	bls.w	1c6ee <__udivmoddi4+0x2a2>
   1c4e0:	3802      	subs	r0, #2
   1c4e2:	443c      	add	r4, r7
   1c4e4:	eba4 0409 	sub.w	r4, r4, r9
   1c4e8:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
   1c4ec:	2100      	movs	r1, #0
   1c4ee:	2e00      	cmp	r6, #0
   1c4f0:	d061      	beq.n	1c5b6 <__udivmoddi4+0x16a>
   1c4f2:	fa24 f40e 	lsr.w	r4, r4, lr
   1c4f6:	2300      	movs	r3, #0
   1c4f8:	6034      	str	r4, [r6, #0]
   1c4fa:	6073      	str	r3, [r6, #4]
   1c4fc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   1c500:	428b      	cmp	r3, r1
   1c502:	d907      	bls.n	1c514 <__udivmoddi4+0xc8>
   1c504:	2e00      	cmp	r6, #0
   1c506:	d054      	beq.n	1c5b2 <__udivmoddi4+0x166>
   1c508:	2100      	movs	r1, #0
   1c50a:	e886 0021 	stmia.w	r6, {r0, r5}
   1c50e:	4608      	mov	r0, r1
   1c510:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   1c514:	fab3 f183 	clz	r1, r3
   1c518:	2900      	cmp	r1, #0
   1c51a:	f040 808e 	bne.w	1c63a <__udivmoddi4+0x1ee>
   1c51e:	42ab      	cmp	r3, r5
   1c520:	d302      	bcc.n	1c528 <__udivmoddi4+0xdc>
   1c522:	4282      	cmp	r2, r0
   1c524:	f200 80fa 	bhi.w	1c71c <__udivmoddi4+0x2d0>
   1c528:	1a84      	subs	r4, r0, r2
   1c52a:	eb65 0503 	sbc.w	r5, r5, r3
   1c52e:	2001      	movs	r0, #1
   1c530:	46ac      	mov	ip, r5
   1c532:	2e00      	cmp	r6, #0
   1c534:	d03f      	beq.n	1c5b6 <__udivmoddi4+0x16a>
   1c536:	e886 1010 	stmia.w	r6, {r4, ip}
   1c53a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   1c53e:	b912      	cbnz	r2, 1c546 <__udivmoddi4+0xfa>
   1c540:	2701      	movs	r7, #1
   1c542:	fbb7 f7f2 	udiv	r7, r7, r2
   1c546:	fab7 fe87 	clz	lr, r7
   1c54a:	f1be 0f00 	cmp.w	lr, #0
   1c54e:	d134      	bne.n	1c5ba <__udivmoddi4+0x16e>
   1c550:	1beb      	subs	r3, r5, r7
   1c552:	0c3a      	lsrs	r2, r7, #16
   1c554:	fa1f fc87 	uxth.w	ip, r7
   1c558:	2101      	movs	r1, #1
   1c55a:	fbb3 f8f2 	udiv	r8, r3, r2
   1c55e:	0c25      	lsrs	r5, r4, #16
   1c560:	fb02 3318 	mls	r3, r2, r8, r3
   1c564:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
   1c568:	fb0c f308 	mul.w	r3, ip, r8
   1c56c:	42ab      	cmp	r3, r5
   1c56e:	d907      	bls.n	1c580 <__udivmoddi4+0x134>
   1c570:	19ed      	adds	r5, r5, r7
   1c572:	f108 30ff 	add.w	r0, r8, #4294967295
   1c576:	d202      	bcs.n	1c57e <__udivmoddi4+0x132>
   1c578:	42ab      	cmp	r3, r5
   1c57a:	f200 80d1 	bhi.w	1c720 <__udivmoddi4+0x2d4>
   1c57e:	4680      	mov	r8, r0
   1c580:	1aed      	subs	r5, r5, r3
   1c582:	b2a3      	uxth	r3, r4
   1c584:	fbb5 f0f2 	udiv	r0, r5, r2
   1c588:	fb02 5510 	mls	r5, r2, r0, r5
   1c58c:	ea43 4405 	orr.w	r4, r3, r5, lsl #16
   1c590:	fb0c fc00 	mul.w	ip, ip, r0
   1c594:	45a4      	cmp	ip, r4
   1c596:	d907      	bls.n	1c5a8 <__udivmoddi4+0x15c>
   1c598:	19e4      	adds	r4, r4, r7
   1c59a:	f100 33ff 	add.w	r3, r0, #4294967295
   1c59e:	d202      	bcs.n	1c5a6 <__udivmoddi4+0x15a>
   1c5a0:	45a4      	cmp	ip, r4
   1c5a2:	f200 80b8 	bhi.w	1c716 <__udivmoddi4+0x2ca>
   1c5a6:	4618      	mov	r0, r3
   1c5a8:	eba4 040c 	sub.w	r4, r4, ip
   1c5ac:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
   1c5b0:	e79d      	b.n	1c4ee <__udivmoddi4+0xa2>
   1c5b2:	4631      	mov	r1, r6
   1c5b4:	4630      	mov	r0, r6
   1c5b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   1c5ba:	f1ce 0420 	rsb	r4, lr, #32
   1c5be:	fa05 f30e 	lsl.w	r3, r5, lr
   1c5c2:	fa07 f70e 	lsl.w	r7, r7, lr
   1c5c6:	fa20 f804 	lsr.w	r8, r0, r4
   1c5ca:	0c3a      	lsrs	r2, r7, #16
   1c5cc:	fa25 f404 	lsr.w	r4, r5, r4
   1c5d0:	ea48 0803 	orr.w	r8, r8, r3
   1c5d4:	fbb4 f1f2 	udiv	r1, r4, r2
   1c5d8:	ea4f 4518 	mov.w	r5, r8, lsr #16
   1c5dc:	fb02 4411 	mls	r4, r2, r1, r4
   1c5e0:	fa1f fc87 	uxth.w	ip, r7
   1c5e4:	ea45 4504 	orr.w	r5, r5, r4, lsl #16
   1c5e8:	fb01 f30c 	mul.w	r3, r1, ip
   1c5ec:	42ab      	cmp	r3, r5
   1c5ee:	fa00 f40e 	lsl.w	r4, r0, lr
   1c5f2:	d909      	bls.n	1c608 <__udivmoddi4+0x1bc>
   1c5f4:	19ed      	adds	r5, r5, r7
   1c5f6:	f101 30ff 	add.w	r0, r1, #4294967295
   1c5fa:	f080 808a 	bcs.w	1c712 <__udivmoddi4+0x2c6>
   1c5fe:	42ab      	cmp	r3, r5
   1c600:	f240 8087 	bls.w	1c712 <__udivmoddi4+0x2c6>
   1c604:	3902      	subs	r1, #2
   1c606:	443d      	add	r5, r7
   1c608:	1aeb      	subs	r3, r5, r3
   1c60a:	fa1f f588 	uxth.w	r5, r8
   1c60e:	fbb3 f0f2 	udiv	r0, r3, r2
   1c612:	fb02 3310 	mls	r3, r2, r0, r3
   1c616:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
   1c61a:	fb00 f30c 	mul.w	r3, r0, ip
   1c61e:	42ab      	cmp	r3, r5
   1c620:	d907      	bls.n	1c632 <__udivmoddi4+0x1e6>
   1c622:	19ed      	adds	r5, r5, r7
   1c624:	f100 38ff 	add.w	r8, r0, #4294967295
   1c628:	d26f      	bcs.n	1c70a <__udivmoddi4+0x2be>
   1c62a:	42ab      	cmp	r3, r5
   1c62c:	d96d      	bls.n	1c70a <__udivmoddi4+0x2be>
   1c62e:	3802      	subs	r0, #2
   1c630:	443d      	add	r5, r7
   1c632:	1aeb      	subs	r3, r5, r3
   1c634:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
   1c638:	e78f      	b.n	1c55a <__udivmoddi4+0x10e>
   1c63a:	f1c1 0720 	rsb	r7, r1, #32
   1c63e:	fa22 f807 	lsr.w	r8, r2, r7
   1c642:	408b      	lsls	r3, r1
   1c644:	fa05 f401 	lsl.w	r4, r5, r1
   1c648:	ea48 0303 	orr.w	r3, r8, r3
   1c64c:	fa20 fe07 	lsr.w	lr, r0, r7
   1c650:	ea4f 4c13 	mov.w	ip, r3, lsr #16
   1c654:	40fd      	lsrs	r5, r7
   1c656:	ea4e 0e04 	orr.w	lr, lr, r4
   1c65a:	fbb5 f9fc 	udiv	r9, r5, ip
   1c65e:	ea4f 441e 	mov.w	r4, lr, lsr #16
   1c662:	fb0c 5519 	mls	r5, ip, r9, r5
   1c666:	fa1f f883 	uxth.w	r8, r3
   1c66a:	ea44 4505 	orr.w	r5, r4, r5, lsl #16
   1c66e:	fb09 f408 	mul.w	r4, r9, r8
   1c672:	42ac      	cmp	r4, r5
   1c674:	fa02 f201 	lsl.w	r2, r2, r1
   1c678:	fa00 fa01 	lsl.w	sl, r0, r1
   1c67c:	d908      	bls.n	1c690 <__udivmoddi4+0x244>
   1c67e:	18ed      	adds	r5, r5, r3
   1c680:	f109 30ff 	add.w	r0, r9, #4294967295
   1c684:	d243      	bcs.n	1c70e <__udivmoddi4+0x2c2>
   1c686:	42ac      	cmp	r4, r5
   1c688:	d941      	bls.n	1c70e <__udivmoddi4+0x2c2>
   1c68a:	f1a9 0902 	sub.w	r9, r9, #2
   1c68e:	441d      	add	r5, r3
   1c690:	1b2d      	subs	r5, r5, r4
   1c692:	fa1f fe8e 	uxth.w	lr, lr
   1c696:	fbb5 f0fc 	udiv	r0, r5, ip
   1c69a:	fb0c 5510 	mls	r5, ip, r0, r5
   1c69e:	ea4e 4405 	orr.w	r4, lr, r5, lsl #16
   1c6a2:	fb00 f808 	mul.w	r8, r0, r8
   1c6a6:	45a0      	cmp	r8, r4
   1c6a8:	d907      	bls.n	1c6ba <__udivmoddi4+0x26e>
   1c6aa:	18e4      	adds	r4, r4, r3
   1c6ac:	f100 35ff 	add.w	r5, r0, #4294967295
   1c6b0:	d229      	bcs.n	1c706 <__udivmoddi4+0x2ba>
   1c6b2:	45a0      	cmp	r8, r4
   1c6b4:	d927      	bls.n	1c706 <__udivmoddi4+0x2ba>
   1c6b6:	3802      	subs	r0, #2
   1c6b8:	441c      	add	r4, r3
   1c6ba:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
   1c6be:	eba4 0408 	sub.w	r4, r4, r8
   1c6c2:	fba0 8902 	umull	r8, r9, r0, r2
   1c6c6:	454c      	cmp	r4, r9
   1c6c8:	46c6      	mov	lr, r8
   1c6ca:	464d      	mov	r5, r9
   1c6cc:	d315      	bcc.n	1c6fa <__udivmoddi4+0x2ae>
   1c6ce:	d012      	beq.n	1c6f6 <__udivmoddi4+0x2aa>
   1c6d0:	b156      	cbz	r6, 1c6e8 <__udivmoddi4+0x29c>
   1c6d2:	ebba 030e 	subs.w	r3, sl, lr
   1c6d6:	eb64 0405 	sbc.w	r4, r4, r5
   1c6da:	fa04 f707 	lsl.w	r7, r4, r7
   1c6de:	40cb      	lsrs	r3, r1
   1c6e0:	431f      	orrs	r7, r3
   1c6e2:	40cc      	lsrs	r4, r1
   1c6e4:	6037      	str	r7, [r6, #0]
   1c6e6:	6074      	str	r4, [r6, #4]
   1c6e8:	2100      	movs	r1, #0
   1c6ea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   1c6ee:	4618      	mov	r0, r3
   1c6f0:	e6f8      	b.n	1c4e4 <__udivmoddi4+0x98>
   1c6f2:	4690      	mov	r8, r2
   1c6f4:	e6e0      	b.n	1c4b8 <__udivmoddi4+0x6c>
   1c6f6:	45c2      	cmp	sl, r8
   1c6f8:	d2ea      	bcs.n	1c6d0 <__udivmoddi4+0x284>
   1c6fa:	ebb8 0e02 	subs.w	lr, r8, r2
   1c6fe:	eb69 0503 	sbc.w	r5, r9, r3
   1c702:	3801      	subs	r0, #1
   1c704:	e7e4      	b.n	1c6d0 <__udivmoddi4+0x284>
   1c706:	4628      	mov	r0, r5
   1c708:	e7d7      	b.n	1c6ba <__udivmoddi4+0x26e>
   1c70a:	4640      	mov	r0, r8
   1c70c:	e791      	b.n	1c632 <__udivmoddi4+0x1e6>
   1c70e:	4681      	mov	r9, r0
   1c710:	e7be      	b.n	1c690 <__udivmoddi4+0x244>
   1c712:	4601      	mov	r1, r0
   1c714:	e778      	b.n	1c608 <__udivmoddi4+0x1bc>
   1c716:	3802      	subs	r0, #2
   1c718:	443c      	add	r4, r7
   1c71a:	e745      	b.n	1c5a8 <__udivmoddi4+0x15c>
   1c71c:	4608      	mov	r0, r1
   1c71e:	e708      	b.n	1c532 <__udivmoddi4+0xe6>
   1c720:	f1a8 0802 	sub.w	r8, r8, #2
   1c724:	443d      	add	r5, r7
   1c726:	e72b      	b.n	1c580 <__udivmoddi4+0x134>

0001c728 <selfrel_offset31>:
   1c728:	6803      	ldr	r3, [r0, #0]
   1c72a:	005a      	lsls	r2, r3, #1
   1c72c:	bf4c      	ite	mi
   1c72e:	f043 4300 	orrmi.w	r3, r3, #2147483648	; 0x80000000
   1c732:	f023 4300 	bicpl.w	r3, r3, #2147483648	; 0x80000000
   1c736:	4418      	add	r0, r3
   1c738:	4770      	bx	lr
   1c73a:	bf00      	nop

0001c73c <search_EIT_table>:
   1c73c:	b361      	cbz	r1, 1c798 <search_EIT_table+0x5c>
   1c73e:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1c742:	f101 3aff 	add.w	sl, r1, #4294967295
   1c746:	4690      	mov	r8, r2
   1c748:	4606      	mov	r6, r0
   1c74a:	46d1      	mov	r9, sl
   1c74c:	2700      	movs	r7, #0
   1c74e:	eb07 0409 	add.w	r4, r7, r9
   1c752:	eb04 74d4 	add.w	r4, r4, r4, lsr #31
   1c756:	1064      	asrs	r4, r4, #1
   1c758:	00e5      	lsls	r5, r4, #3
   1c75a:	1971      	adds	r1, r6, r5
   1c75c:	4608      	mov	r0, r1
   1c75e:	f7ff ffe3 	bl	1c728 <selfrel_offset31>
   1c762:	45a2      	cmp	sl, r4
   1c764:	4683      	mov	fp, r0
   1c766:	f105 0008 	add.w	r0, r5, #8
   1c76a:	4430      	add	r0, r6
   1c76c:	d009      	beq.n	1c782 <search_EIT_table+0x46>
   1c76e:	f7ff ffdb 	bl	1c728 <selfrel_offset31>
   1c772:	45c3      	cmp	fp, r8
   1c774:	f100 30ff 	add.w	r0, r0, #4294967295
   1c778:	d805      	bhi.n	1c786 <search_EIT_table+0x4a>
   1c77a:	4540      	cmp	r0, r8
   1c77c:	d209      	bcs.n	1c792 <search_EIT_table+0x56>
   1c77e:	1c67      	adds	r7, r4, #1
   1c780:	e7e5      	b.n	1c74e <search_EIT_table+0x12>
   1c782:	45c3      	cmp	fp, r8
   1c784:	d905      	bls.n	1c792 <search_EIT_table+0x56>
   1c786:	42a7      	cmp	r7, r4
   1c788:	d002      	beq.n	1c790 <search_EIT_table+0x54>
   1c78a:	f104 39ff 	add.w	r9, r4, #4294967295
   1c78e:	e7de      	b.n	1c74e <search_EIT_table+0x12>
   1c790:	2100      	movs	r1, #0
   1c792:	4608      	mov	r0, r1
   1c794:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1c798:	4608      	mov	r0, r1
   1c79a:	4770      	bx	lr

0001c79c <__gnu_unwind_get_pr_addr>:
   1c79c:	2801      	cmp	r0, #1
   1c79e:	d007      	beq.n	1c7b0 <__gnu_unwind_get_pr_addr+0x14>
   1c7a0:	2802      	cmp	r0, #2
   1c7a2:	d007      	beq.n	1c7b4 <__gnu_unwind_get_pr_addr+0x18>
   1c7a4:	4b04      	ldr	r3, [pc, #16]	; (1c7b8 <__gnu_unwind_get_pr_addr+0x1c>)
   1c7a6:	2800      	cmp	r0, #0
   1c7a8:	bf0c      	ite	eq
   1c7aa:	4618      	moveq	r0, r3
   1c7ac:	2000      	movne	r0, #0
   1c7ae:	4770      	bx	lr
   1c7b0:	4802      	ldr	r0, [pc, #8]	; (1c7bc <__gnu_unwind_get_pr_addr+0x20>)
   1c7b2:	4770      	bx	lr
   1c7b4:	4802      	ldr	r0, [pc, #8]	; (1c7c0 <__gnu_unwind_get_pr_addr+0x24>)
   1c7b6:	4770      	bx	lr
   1c7b8:	0001cea1 	.word	0x0001cea1
   1c7bc:	0001cea5 	.word	0x0001cea5
   1c7c0:	0001cea9 	.word	0x0001cea9

0001c7c4 <get_eit_entry>:
   1c7c4:	b530      	push	{r4, r5, lr}
   1c7c6:	4b24      	ldr	r3, [pc, #144]	; (1c858 <get_eit_entry+0x94>)
   1c7c8:	b083      	sub	sp, #12
   1c7ca:	4604      	mov	r4, r0
   1c7cc:	1e8d      	subs	r5, r1, #2
   1c7ce:	b37b      	cbz	r3, 1c830 <get_eit_entry+0x6c>
   1c7d0:	a901      	add	r1, sp, #4
   1c7d2:	4628      	mov	r0, r5
   1c7d4:	f3af 8000 	nop.w
   1c7d8:	b320      	cbz	r0, 1c824 <get_eit_entry+0x60>
   1c7da:	9901      	ldr	r1, [sp, #4]
   1c7dc:	462a      	mov	r2, r5
   1c7de:	f7ff ffad 	bl	1c73c <search_EIT_table>
   1c7e2:	4601      	mov	r1, r0
   1c7e4:	b1f0      	cbz	r0, 1c824 <get_eit_entry+0x60>
   1c7e6:	f7ff ff9f 	bl	1c728 <selfrel_offset31>
   1c7ea:	684b      	ldr	r3, [r1, #4]
   1c7ec:	64a0      	str	r0, [r4, #72]	; 0x48
   1c7ee:	2b01      	cmp	r3, #1
   1c7f0:	d012      	beq.n	1c818 <get_eit_entry+0x54>
   1c7f2:	2b00      	cmp	r3, #0
   1c7f4:	f101 0004 	add.w	r0, r1, #4
   1c7f8:	db20      	blt.n	1c83c <get_eit_entry+0x78>
   1c7fa:	f7ff ff95 	bl	1c728 <selfrel_offset31>
   1c7fe:	2300      	movs	r3, #0
   1c800:	64e0      	str	r0, [r4, #76]	; 0x4c
   1c802:	6523      	str	r3, [r4, #80]	; 0x50
   1c804:	6803      	ldr	r3, [r0, #0]
   1c806:	2b00      	cmp	r3, #0
   1c808:	db1c      	blt.n	1c844 <get_eit_entry+0x80>
   1c80a:	f7ff ff8d 	bl	1c728 <selfrel_offset31>
   1c80e:	2300      	movs	r3, #0
   1c810:	6120      	str	r0, [r4, #16]
   1c812:	4618      	mov	r0, r3
   1c814:	b003      	add	sp, #12
   1c816:	bd30      	pop	{r4, r5, pc}
   1c818:	2300      	movs	r3, #0
   1c81a:	6123      	str	r3, [r4, #16]
   1c81c:	2305      	movs	r3, #5
   1c81e:	4618      	mov	r0, r3
   1c820:	b003      	add	sp, #12
   1c822:	bd30      	pop	{r4, r5, pc}
   1c824:	2300      	movs	r3, #0
   1c826:	6123      	str	r3, [r4, #16]
   1c828:	2309      	movs	r3, #9
   1c82a:	4618      	mov	r0, r3
   1c82c:	b003      	add	sp, #12
   1c82e:	bd30      	pop	{r4, r5, pc}
   1c830:	490a      	ldr	r1, [pc, #40]	; (1c85c <get_eit_entry+0x98>)
   1c832:	480b      	ldr	r0, [pc, #44]	; (1c860 <get_eit_entry+0x9c>)
   1c834:	1a09      	subs	r1, r1, r0
   1c836:	10c9      	asrs	r1, r1, #3
   1c838:	9101      	str	r1, [sp, #4]
   1c83a:	e7cf      	b.n	1c7dc <get_eit_entry+0x18>
   1c83c:	2301      	movs	r3, #1
   1c83e:	64e0      	str	r0, [r4, #76]	; 0x4c
   1c840:	6523      	str	r3, [r4, #80]	; 0x50
   1c842:	e7df      	b.n	1c804 <get_eit_entry+0x40>
   1c844:	f3c3 6003 	ubfx	r0, r3, #24, #4
   1c848:	f7ff ffa8 	bl	1c79c <__gnu_unwind_get_pr_addr>
   1c84c:	2800      	cmp	r0, #0
   1c84e:	6120      	str	r0, [r4, #16]
   1c850:	bf14      	ite	ne
   1c852:	2300      	movne	r3, #0
   1c854:	2309      	moveq	r3, #9
   1c856:	e7dc      	b.n	1c812 <get_eit_entry+0x4e>
   1c858:	00000000 	.word	0x00000000
   1c85c:	00025094 	.word	0x00025094
   1c860:	00024f0c 	.word	0x00024f0c

0001c864 <restore_non_core_regs>:
   1c864:	6803      	ldr	r3, [r0, #0]
   1c866:	07da      	lsls	r2, r3, #31
   1c868:	b510      	push	{r4, lr}
   1c86a:	4604      	mov	r4, r0
   1c86c:	d406      	bmi.n	1c87c <restore_non_core_regs+0x18>
   1c86e:	079b      	lsls	r3, r3, #30
   1c870:	f100 0048 	add.w	r0, r0, #72	; 0x48
   1c874:	d509      	bpl.n	1c88a <restore_non_core_regs+0x26>
   1c876:	f000 fc51 	bl	1d11c <__gnu_Unwind_Restore_VFP_D>
   1c87a:	6823      	ldr	r3, [r4, #0]
   1c87c:	0759      	lsls	r1, r3, #29
   1c87e:	d509      	bpl.n	1c894 <restore_non_core_regs+0x30>
   1c880:	071a      	lsls	r2, r3, #28
   1c882:	d50e      	bpl.n	1c8a2 <restore_non_core_regs+0x3e>
   1c884:	06db      	lsls	r3, r3, #27
   1c886:	d513      	bpl.n	1c8b0 <restore_non_core_regs+0x4c>
   1c888:	bd10      	pop	{r4, pc}
   1c88a:	f000 fc3f 	bl	1d10c <__gnu_Unwind_Restore_VFP>
   1c88e:	6823      	ldr	r3, [r4, #0]
   1c890:	0759      	lsls	r1, r3, #29
   1c892:	d4f5      	bmi.n	1c880 <restore_non_core_regs+0x1c>
   1c894:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
   1c898:	f000 fc48 	bl	1d12c <__gnu_Unwind_Restore_VFP_D_16_to_31>
   1c89c:	6823      	ldr	r3, [r4, #0]
   1c89e:	071a      	lsls	r2, r3, #28
   1c8a0:	d4f0      	bmi.n	1c884 <restore_non_core_regs+0x20>
   1c8a2:	f504 70a8 	add.w	r0, r4, #336	; 0x150
   1c8a6:	f000 fc49 	bl	1d13c <__gnu_Unwind_Restore_WMMXD>
   1c8aa:	6823      	ldr	r3, [r4, #0]
   1c8ac:	06db      	lsls	r3, r3, #27
   1c8ae:	d4eb      	bmi.n	1c888 <restore_non_core_regs+0x24>
   1c8b0:	f504 70e8 	add.w	r0, r4, #464	; 0x1d0
   1c8b4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   1c8b8:	f000 bc84 	b.w	1d1c4 <__gnu_Unwind_Restore_WMMXC>

0001c8bc <_Unwind_decode_typeinfo_ptr.isra.0>:
   1c8bc:	6803      	ldr	r3, [r0, #0]
   1c8be:	b103      	cbz	r3, 1c8c2 <_Unwind_decode_typeinfo_ptr.isra.0+0x6>
   1c8c0:	4403      	add	r3, r0
   1c8c2:	4618      	mov	r0, r3
   1c8c4:	4770      	bx	lr
   1c8c6:	bf00      	nop

0001c8c8 <__gnu_unwind_24bit.isra.1>:
   1c8c8:	2009      	movs	r0, #9
   1c8ca:	4770      	bx	lr

0001c8cc <_Unwind_DebugHook>:
   1c8cc:	4770      	bx	lr
   1c8ce:	bf00      	nop

0001c8d0 <unwind_phase2>:
   1c8d0:	b570      	push	{r4, r5, r6, lr}
   1c8d2:	4604      	mov	r4, r0
   1c8d4:	460d      	mov	r5, r1
   1c8d6:	e008      	b.n	1c8ea <unwind_phase2+0x1a>
   1c8d8:	6c2b      	ldr	r3, [r5, #64]	; 0x40
   1c8da:	6163      	str	r3, [r4, #20]
   1c8dc:	462a      	mov	r2, r5
   1c8de:	6923      	ldr	r3, [r4, #16]
   1c8e0:	4621      	mov	r1, r4
   1c8e2:	2001      	movs	r0, #1
   1c8e4:	4798      	blx	r3
   1c8e6:	2808      	cmp	r0, #8
   1c8e8:	d108      	bne.n	1c8fc <unwind_phase2+0x2c>
   1c8ea:	6c29      	ldr	r1, [r5, #64]	; 0x40
   1c8ec:	4620      	mov	r0, r4
   1c8ee:	f7ff ff69 	bl	1c7c4 <get_eit_entry>
   1c8f2:	4606      	mov	r6, r0
   1c8f4:	2800      	cmp	r0, #0
   1c8f6:	d0ef      	beq.n	1c8d8 <unwind_phase2+0x8>
   1c8f8:	f000 fe94 	bl	1d624 <abort>
   1c8fc:	2807      	cmp	r0, #7
   1c8fe:	d1fb      	bne.n	1c8f8 <unwind_phase2+0x28>
   1c900:	4630      	mov	r0, r6
   1c902:	6c29      	ldr	r1, [r5, #64]	; 0x40
   1c904:	f7ff ffe2 	bl	1c8cc <_Unwind_DebugHook>
   1c908:	1d28      	adds	r0, r5, #4
   1c90a:	f000 fbf3 	bl	1d0f4 <__restore_core_regs>
   1c90e:	bf00      	nop

0001c910 <unwind_phase2_forced>:
   1c910:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   1c914:	1d0c      	adds	r4, r1, #4
   1c916:	4605      	mov	r5, r0
   1c918:	4692      	mov	sl, r2
   1c91a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
   1c91c:	f5ad 7d72 	sub.w	sp, sp, #968	; 0x3c8
   1c920:	ae03      	add	r6, sp, #12
   1c922:	c60f      	stmia	r6!, {r0, r1, r2, r3}
   1c924:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
   1c926:	c60f      	stmia	r6!, {r0, r1, r2, r3}
   1c928:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
   1c92a:	c60f      	stmia	r6!, {r0, r1, r2, r3}
   1c92c:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
   1c930:	ac02      	add	r4, sp, #8
   1c932:	f8d5 800c 	ldr.w	r8, [r5, #12]
   1c936:	f8d5 9018 	ldr.w	r9, [r5, #24]
   1c93a:	e886 000f 	stmia.w	r6, {r0, r1, r2, r3}
   1c93e:	2300      	movs	r3, #0
   1c940:	4628      	mov	r0, r5
   1c942:	6c21      	ldr	r1, [r4, #64]	; 0x40
   1c944:	6023      	str	r3, [r4, #0]
   1c946:	f7ff ff3d 	bl	1c7c4 <get_eit_entry>
   1c94a:	f1ba 0f00 	cmp.w	sl, #0
   1c94e:	4607      	mov	r7, r0
   1c950:	bf14      	ite	ne
   1c952:	260a      	movne	r6, #10
   1c954:	2609      	moveq	r6, #9
   1c956:	b17f      	cbz	r7, 1c978 <unwind_phase2_forced+0x68>
   1c958:	6ba3      	ldr	r3, [r4, #56]	; 0x38
   1c95a:	f046 0110 	orr.w	r1, r6, #16
   1c95e:	e88d 0210 	stmia.w	sp, {r4, r9}
   1c962:	462a      	mov	r2, r5
   1c964:	6463      	str	r3, [r4, #68]	; 0x44
   1c966:	2001      	movs	r0, #1
   1c968:	462b      	mov	r3, r5
   1c96a:	47c0      	blx	r8
   1c96c:	bb78      	cbnz	r0, 1c9ce <unwind_phase2_forced+0xbe>
   1c96e:	4638      	mov	r0, r7
   1c970:	f50d 7d72 	add.w	sp, sp, #968	; 0x3c8
   1c974:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   1c978:	6c23      	ldr	r3, [r4, #64]	; 0x40
   1c97a:	616b      	str	r3, [r5, #20]
   1c97c:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
   1c980:	4621      	mov	r1, r4
   1c982:	a87a      	add	r0, sp, #488	; 0x1e8
   1c984:	f001 fc3c 	bl	1e200 <memcpy>
   1c988:	692b      	ldr	r3, [r5, #16]
   1c98a:	aa7a      	add	r2, sp, #488	; 0x1e8
   1c98c:	4629      	mov	r1, r5
   1c98e:	4630      	mov	r0, r6
   1c990:	4798      	blx	r3
   1c992:	9b88      	ldr	r3, [sp, #544]	; 0x220
   1c994:	4682      	mov	sl, r0
   1c996:	e88d 0210 	stmia.w	sp, {r4, r9}
   1c99a:	4631      	mov	r1, r6
   1c99c:	6463      	str	r3, [r4, #68]	; 0x44
   1c99e:	462a      	mov	r2, r5
   1c9a0:	462b      	mov	r3, r5
   1c9a2:	2001      	movs	r0, #1
   1c9a4:	47c0      	blx	r8
   1c9a6:	b990      	cbnz	r0, 1c9ce <unwind_phase2_forced+0xbe>
   1c9a8:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
   1c9ac:	a97a      	add	r1, sp, #488	; 0x1e8
   1c9ae:	4620      	mov	r0, r4
   1c9b0:	f001 fc26 	bl	1e200 <memcpy>
   1c9b4:	f1ba 0f08 	cmp.w	sl, #8
   1c9b8:	d106      	bne.n	1c9c8 <unwind_phase2_forced+0xb8>
   1c9ba:	6c21      	ldr	r1, [r4, #64]	; 0x40
   1c9bc:	4628      	mov	r0, r5
   1c9be:	f7ff ff01 	bl	1c7c4 <get_eit_entry>
   1c9c2:	2609      	movs	r6, #9
   1c9c4:	4607      	mov	r7, r0
   1c9c6:	e7c6      	b.n	1c956 <unwind_phase2_forced+0x46>
   1c9c8:	f1ba 0f07 	cmp.w	sl, #7
   1c9cc:	d005      	beq.n	1c9da <unwind_phase2_forced+0xca>
   1c9ce:	2709      	movs	r7, #9
   1c9d0:	4638      	mov	r0, r7
   1c9d2:	f50d 7d72 	add.w	sp, sp, #968	; 0x3c8
   1c9d6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   1c9da:	4638      	mov	r0, r7
   1c9dc:	6c21      	ldr	r1, [r4, #64]	; 0x40
   1c9de:	f7ff ff75 	bl	1c8cc <_Unwind_DebugHook>
   1c9e2:	a803      	add	r0, sp, #12
   1c9e4:	f000 fb86 	bl	1d0f4 <__restore_core_regs>

0001c9e8 <_Unwind_GetCFA>:
   1c9e8:	6c40      	ldr	r0, [r0, #68]	; 0x44
   1c9ea:	4770      	bx	lr

0001c9ec <__gnu_Unwind_RaiseException>:
   1c9ec:	b5f0      	push	{r4, r5, r6, r7, lr}
   1c9ee:	6bcb      	ldr	r3, [r1, #60]	; 0x3c
   1c9f0:	640b      	str	r3, [r1, #64]	; 0x40
   1c9f2:	1d0e      	adds	r6, r1, #4
   1c9f4:	460f      	mov	r7, r1
   1c9f6:	4604      	mov	r4, r0
   1c9f8:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
   1c9fa:	b0f9      	sub	sp, #484	; 0x1e4
   1c9fc:	ad01      	add	r5, sp, #4
   1c9fe:	c50f      	stmia	r5!, {r0, r1, r2, r3}
   1ca00:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
   1ca02:	c50f      	stmia	r5!, {r0, r1, r2, r3}
   1ca04:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
   1ca06:	c50f      	stmia	r5!, {r0, r1, r2, r3}
   1ca08:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
   1ca0c:	f04f 36ff 	mov.w	r6, #4294967295
   1ca10:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
   1ca14:	9600      	str	r6, [sp, #0]
   1ca16:	e006      	b.n	1ca26 <__gnu_Unwind_RaiseException+0x3a>
   1ca18:	6923      	ldr	r3, [r4, #16]
   1ca1a:	466a      	mov	r2, sp
   1ca1c:	4621      	mov	r1, r4
   1ca1e:	4798      	blx	r3
   1ca20:	2808      	cmp	r0, #8
   1ca22:	4605      	mov	r5, r0
   1ca24:	d108      	bne.n	1ca38 <__gnu_Unwind_RaiseException+0x4c>
   1ca26:	9910      	ldr	r1, [sp, #64]	; 0x40
   1ca28:	4620      	mov	r0, r4
   1ca2a:	f7ff fecb 	bl	1c7c4 <get_eit_entry>
   1ca2e:	2800      	cmp	r0, #0
   1ca30:	d0f2      	beq.n	1ca18 <__gnu_Unwind_RaiseException+0x2c>
   1ca32:	2009      	movs	r0, #9
   1ca34:	b079      	add	sp, #484	; 0x1e4
   1ca36:	bdf0      	pop	{r4, r5, r6, r7, pc}
   1ca38:	4668      	mov	r0, sp
   1ca3a:	f7ff ff13 	bl	1c864 <restore_non_core_regs>
   1ca3e:	2d06      	cmp	r5, #6
   1ca40:	d1f7      	bne.n	1ca32 <__gnu_Unwind_RaiseException+0x46>
   1ca42:	4639      	mov	r1, r7
   1ca44:	4620      	mov	r0, r4
   1ca46:	f7ff ff43 	bl	1c8d0 <unwind_phase2>
   1ca4a:	bf00      	nop

0001ca4c <__gnu_Unwind_ForcedUnwind>:
   1ca4c:	b430      	push	{r4, r5}
   1ca4e:	6bdd      	ldr	r5, [r3, #60]	; 0x3c
   1ca50:	60c1      	str	r1, [r0, #12]
   1ca52:	6182      	str	r2, [r0, #24]
   1ca54:	4619      	mov	r1, r3
   1ca56:	641d      	str	r5, [r3, #64]	; 0x40
   1ca58:	2200      	movs	r2, #0
   1ca5a:	bc30      	pop	{r4, r5}
   1ca5c:	e758      	b.n	1c910 <unwind_phase2_forced>
   1ca5e:	bf00      	nop

0001ca60 <__gnu_Unwind_Resume>:
   1ca60:	b570      	push	{r4, r5, r6, lr}
   1ca62:	68c6      	ldr	r6, [r0, #12]
   1ca64:	6943      	ldr	r3, [r0, #20]
   1ca66:	640b      	str	r3, [r1, #64]	; 0x40
   1ca68:	b126      	cbz	r6, 1ca74 <__gnu_Unwind_Resume+0x14>
   1ca6a:	2201      	movs	r2, #1
   1ca6c:	f7ff ff50 	bl	1c910 <unwind_phase2_forced>
   1ca70:	f000 fdd8 	bl	1d624 <abort>
   1ca74:	6903      	ldr	r3, [r0, #16]
   1ca76:	460a      	mov	r2, r1
   1ca78:	4604      	mov	r4, r0
   1ca7a:	460d      	mov	r5, r1
   1ca7c:	4601      	mov	r1, r0
   1ca7e:	2002      	movs	r0, #2
   1ca80:	4798      	blx	r3
   1ca82:	2807      	cmp	r0, #7
   1ca84:	d007      	beq.n	1ca96 <__gnu_Unwind_Resume+0x36>
   1ca86:	2808      	cmp	r0, #8
   1ca88:	d103      	bne.n	1ca92 <__gnu_Unwind_Resume+0x32>
   1ca8a:	4629      	mov	r1, r5
   1ca8c:	4620      	mov	r0, r4
   1ca8e:	f7ff ff1f 	bl	1c8d0 <unwind_phase2>
   1ca92:	f000 fdc7 	bl	1d624 <abort>
   1ca96:	4630      	mov	r0, r6
   1ca98:	6c29      	ldr	r1, [r5, #64]	; 0x40
   1ca9a:	f7ff ff17 	bl	1c8cc <_Unwind_DebugHook>
   1ca9e:	1d28      	adds	r0, r5, #4
   1caa0:	f000 fb28 	bl	1d0f4 <__restore_core_regs>

0001caa4 <__gnu_Unwind_Resume_or_Rethrow>:
   1caa4:	68c2      	ldr	r2, [r0, #12]
   1caa6:	b11a      	cbz	r2, 1cab0 <__gnu_Unwind_Resume_or_Rethrow+0xc>
   1caa8:	6bca      	ldr	r2, [r1, #60]	; 0x3c
   1caaa:	640a      	str	r2, [r1, #64]	; 0x40
   1caac:	2200      	movs	r2, #0
   1caae:	e72f      	b.n	1c910 <unwind_phase2_forced>
   1cab0:	e79c      	b.n	1c9ec <__gnu_Unwind_RaiseException>
   1cab2:	bf00      	nop

0001cab4 <_Unwind_Complete>:
   1cab4:	4770      	bx	lr
   1cab6:	bf00      	nop

0001cab8 <_Unwind_DeleteException>:
   1cab8:	6883      	ldr	r3, [r0, #8]
   1caba:	b113      	cbz	r3, 1cac2 <_Unwind_DeleteException+0xa>
   1cabc:	4601      	mov	r1, r0
   1cabe:	2001      	movs	r0, #1
   1cac0:	4718      	bx	r3
   1cac2:	4770      	bx	lr

0001cac4 <_Unwind_VRS_Get>:
   1cac4:	b500      	push	{lr}
   1cac6:	2904      	cmp	r1, #4
   1cac8:	d807      	bhi.n	1cada <_Unwind_VRS_Get+0x16>
   1caca:	e8df f001 	tbb	[pc, r1]
   1cace:	0903      	.short	0x0903
   1cad0:	0906      	.short	0x0906
   1cad2:	09          	.byte	0x09
   1cad3:	00          	.byte	0x00
   1cad4:	b90b      	cbnz	r3, 1cada <_Unwind_VRS_Get+0x16>
   1cad6:	2a0f      	cmp	r2, #15
   1cad8:	d905      	bls.n	1cae6 <_Unwind_VRS_Get+0x22>
   1cada:	2002      	movs	r0, #2
   1cadc:	f85d fb04 	ldr.w	pc, [sp], #4
   1cae0:	2001      	movs	r0, #1
   1cae2:	f85d fb04 	ldr.w	pc, [sp], #4
   1cae6:	eb00 0282 	add.w	r2, r0, r2, lsl #2
   1caea:	4618      	mov	r0, r3
   1caec:	6853      	ldr	r3, [r2, #4]
   1caee:	9a01      	ldr	r2, [sp, #4]
   1caf0:	6013      	str	r3, [r2, #0]
   1caf2:	f85d fb04 	ldr.w	pc, [sp], #4
   1caf6:	bf00      	nop

0001caf8 <_Unwind_GetGR>:
   1caf8:	b510      	push	{r4, lr}
   1cafa:	b084      	sub	sp, #16
   1cafc:	2300      	movs	r3, #0
   1cafe:	ac03      	add	r4, sp, #12
   1cb00:	460a      	mov	r2, r1
   1cb02:	9400      	str	r4, [sp, #0]
   1cb04:	4619      	mov	r1, r3
   1cb06:	f7ff ffdd 	bl	1cac4 <_Unwind_VRS_Get>
   1cb0a:	9803      	ldr	r0, [sp, #12]
   1cb0c:	b004      	add	sp, #16
   1cb0e:	bd10      	pop	{r4, pc}

0001cb10 <_Unwind_VRS_Set>:
   1cb10:	b500      	push	{lr}
   1cb12:	2904      	cmp	r1, #4
   1cb14:	d807      	bhi.n	1cb26 <_Unwind_VRS_Set+0x16>
   1cb16:	e8df f001 	tbb	[pc, r1]
   1cb1a:	0903      	.short	0x0903
   1cb1c:	0906      	.short	0x0906
   1cb1e:	09          	.byte	0x09
   1cb1f:	00          	.byte	0x00
   1cb20:	b90b      	cbnz	r3, 1cb26 <_Unwind_VRS_Set+0x16>
   1cb22:	2a0f      	cmp	r2, #15
   1cb24:	d905      	bls.n	1cb32 <_Unwind_VRS_Set+0x22>
   1cb26:	2002      	movs	r0, #2
   1cb28:	f85d fb04 	ldr.w	pc, [sp], #4
   1cb2c:	2001      	movs	r0, #1
   1cb2e:	f85d fb04 	ldr.w	pc, [sp], #4
   1cb32:	9901      	ldr	r1, [sp, #4]
   1cb34:	eb00 0282 	add.w	r2, r0, r2, lsl #2
   1cb38:	6809      	ldr	r1, [r1, #0]
   1cb3a:	6051      	str	r1, [r2, #4]
   1cb3c:	4618      	mov	r0, r3
   1cb3e:	f85d fb04 	ldr.w	pc, [sp], #4
   1cb42:	bf00      	nop

0001cb44 <_Unwind_SetGR>:
   1cb44:	b510      	push	{r4, lr}
   1cb46:	b084      	sub	sp, #16
   1cb48:	ac04      	add	r4, sp, #16
   1cb4a:	2300      	movs	r3, #0
   1cb4c:	f844 2d04 	str.w	r2, [r4, #-4]!
   1cb50:	460a      	mov	r2, r1
   1cb52:	9400      	str	r4, [sp, #0]
   1cb54:	4619      	mov	r1, r3
   1cb56:	f7ff ffdb 	bl	1cb10 <_Unwind_VRS_Set>
   1cb5a:	b004      	add	sp, #16
   1cb5c:	bd10      	pop	{r4, pc}
   1cb5e:	bf00      	nop

0001cb60 <__gnu_Unwind_Backtrace>:
   1cb60:	b5f0      	push	{r4, r5, r6, r7, lr}
   1cb62:	6bd3      	ldr	r3, [r2, #60]	; 0x3c
   1cb64:	6413      	str	r3, [r2, #64]	; 0x40
   1cb66:	1d15      	adds	r5, r2, #4
   1cb68:	4607      	mov	r7, r0
   1cb6a:	460e      	mov	r6, r1
   1cb6c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   1cb6e:	f5ad 7d0f 	sub.w	sp, sp, #572	; 0x23c
   1cb72:	ac17      	add	r4, sp, #92	; 0x5c
   1cb74:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   1cb76:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   1cb78:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   1cb7a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   1cb7c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   1cb7e:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
   1cb82:	f04f 35ff 	mov.w	r5, #4294967295
   1cb86:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
   1cb8a:	9516      	str	r5, [sp, #88]	; 0x58
   1cb8c:	e010      	b.n	1cbb0 <__gnu_Unwind_Backtrace+0x50>
   1cb8e:	a816      	add	r0, sp, #88	; 0x58
   1cb90:	f7ff ffd8 	bl	1cb44 <_Unwind_SetGR>
   1cb94:	4631      	mov	r1, r6
   1cb96:	a816      	add	r0, sp, #88	; 0x58
   1cb98:	47b8      	blx	r7
   1cb9a:	aa16      	add	r2, sp, #88	; 0x58
   1cb9c:	4669      	mov	r1, sp
   1cb9e:	b978      	cbnz	r0, 1cbc0 <__gnu_Unwind_Backtrace+0x60>
   1cba0:	9b04      	ldr	r3, [sp, #16]
   1cba2:	2008      	movs	r0, #8
   1cba4:	4798      	blx	r3
   1cba6:	2805      	cmp	r0, #5
   1cba8:	4604      	mov	r4, r0
   1cbaa:	d00a      	beq.n	1cbc2 <__gnu_Unwind_Backtrace+0x62>
   1cbac:	2809      	cmp	r0, #9
   1cbae:	d007      	beq.n	1cbc0 <__gnu_Unwind_Backtrace+0x60>
   1cbb0:	9926      	ldr	r1, [sp, #152]	; 0x98
   1cbb2:	4668      	mov	r0, sp
   1cbb4:	f7ff fe06 	bl	1c7c4 <get_eit_entry>
   1cbb8:	466a      	mov	r2, sp
   1cbba:	210c      	movs	r1, #12
   1cbbc:	2800      	cmp	r0, #0
   1cbbe:	d0e6      	beq.n	1cb8e <__gnu_Unwind_Backtrace+0x2e>
   1cbc0:	2409      	movs	r4, #9
   1cbc2:	a816      	add	r0, sp, #88	; 0x58
   1cbc4:	f7ff fe4e 	bl	1c864 <restore_non_core_regs>
   1cbc8:	4620      	mov	r0, r4
   1cbca:	f50d 7d0f 	add.w	sp, sp, #572	; 0x23c
   1cbce:	bdf0      	pop	{r4, r5, r6, r7, pc}

0001cbd0 <__gnu_unwind_pr_common>:
   1cbd0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1cbd4:	460d      	mov	r5, r1
   1cbd6:	6cc9      	ldr	r1, [r1, #76]	; 0x4c
   1cbd8:	b08b      	sub	sp, #44	; 0x2c
   1cbda:	1d0c      	adds	r4, r1, #4
   1cbdc:	6809      	ldr	r1, [r1, #0]
   1cbde:	9107      	str	r1, [sp, #28]
   1cbe0:	4691      	mov	r9, r2
   1cbe2:	9408      	str	r4, [sp, #32]
   1cbe4:	f000 0b03 	and.w	fp, r0, #3
   1cbe8:	461e      	mov	r6, r3
   1cbea:	2b00      	cmp	r3, #0
   1cbec:	d160      	bne.n	1ccb0 <__gnu_unwind_pr_common+0xe0>
   1cbee:	0209      	lsls	r1, r1, #8
   1cbf0:	2303      	movs	r3, #3
   1cbf2:	9107      	str	r1, [sp, #28]
   1cbf4:	f88d 6025 	strb.w	r6, [sp, #37]	; 0x25
   1cbf8:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
   1cbfc:	6d2b      	ldr	r3, [r5, #80]	; 0x50
   1cbfe:	f1bb 0f02 	cmp.w	fp, #2
   1cc02:	bf08      	it	eq
   1cc04:	6bac      	ldreq	r4, [r5, #56]	; 0x38
   1cc06:	f013 0301 	ands.w	r3, r3, #1
   1cc0a:	d140      	bne.n	1cc8e <__gnu_unwind_pr_common+0xbe>
   1cc0c:	9301      	str	r3, [sp, #4]
   1cc0e:	f000 0308 	and.w	r3, r0, #8
   1cc12:	9303      	str	r3, [sp, #12]
   1cc14:	f8d4 8000 	ldr.w	r8, [r4]
   1cc18:	f1b8 0f00 	cmp.w	r8, #0
   1cc1c:	d039      	beq.n	1cc92 <__gnu_unwind_pr_common+0xc2>
   1cc1e:	2e02      	cmp	r6, #2
   1cc20:	d043      	beq.n	1ccaa <__gnu_unwind_pr_common+0xda>
   1cc22:	f8b4 8000 	ldrh.w	r8, [r4]
   1cc26:	8867      	ldrh	r7, [r4, #2]
   1cc28:	3404      	adds	r4, #4
   1cc2a:	6cab      	ldr	r3, [r5, #72]	; 0x48
   1cc2c:	f027 0a01 	bic.w	sl, r7, #1
   1cc30:	210f      	movs	r1, #15
   1cc32:	4648      	mov	r0, r9
   1cc34:	449a      	add	sl, r3
   1cc36:	f7ff ff5f 	bl	1caf8 <_Unwind_GetGR>
   1cc3a:	4582      	cmp	sl, r0
   1cc3c:	d833      	bhi.n	1cca6 <__gnu_unwind_pr_common+0xd6>
   1cc3e:	f028 0301 	bic.w	r3, r8, #1
   1cc42:	449a      	add	sl, r3
   1cc44:	4550      	cmp	r0, sl
   1cc46:	bf2c      	ite	cs
   1cc48:	2000      	movcs	r0, #0
   1cc4a:	2001      	movcc	r0, #1
   1cc4c:	007f      	lsls	r7, r7, #1
   1cc4e:	f007 0702 	and.w	r7, r7, #2
   1cc52:	f008 0801 	and.w	r8, r8, #1
   1cc56:	ea47 0708 	orr.w	r7, r7, r8
   1cc5a:	2f01      	cmp	r7, #1
   1cc5c:	d03e      	beq.n	1ccdc <__gnu_unwind_pr_common+0x10c>
   1cc5e:	d335      	bcc.n	1cccc <__gnu_unwind_pr_common+0xfc>
   1cc60:	2f02      	cmp	r7, #2
   1cc62:	d11c      	bne.n	1cc9e <__gnu_unwind_pr_common+0xce>
   1cc64:	6823      	ldr	r3, [r4, #0]
   1cc66:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
   1cc6a:	9202      	str	r2, [sp, #8]
   1cc6c:	f1bb 0f00 	cmp.w	fp, #0
   1cc70:	d176      	bne.n	1cd60 <__gnu_unwind_pr_common+0x190>
   1cc72:	b128      	cbz	r0, 1cc80 <__gnu_unwind_pr_common+0xb0>
   1cc74:	9903      	ldr	r1, [sp, #12]
   1cc76:	2900      	cmp	r1, #0
   1cc78:	d07e      	beq.n	1cd78 <__gnu_unwind_pr_common+0x1a8>
   1cc7a:	2a00      	cmp	r2, #0
   1cc7c:	f000 80a6 	beq.w	1cdcc <__gnu_unwind_pr_common+0x1fc>
   1cc80:	2b00      	cmp	r3, #0
   1cc82:	db77      	blt.n	1cd74 <__gnu_unwind_pr_common+0x1a4>
   1cc84:	9b02      	ldr	r3, [sp, #8]
   1cc86:	3301      	adds	r3, #1
   1cc88:	eb04 0483 	add.w	r4, r4, r3, lsl #2
   1cc8c:	e7c2      	b.n	1cc14 <__gnu_unwind_pr_common+0x44>
   1cc8e:	2300      	movs	r3, #0
   1cc90:	9301      	str	r3, [sp, #4]
   1cc92:	2e02      	cmp	r6, #2
   1cc94:	dd3e      	ble.n	1cd14 <__gnu_unwind_pr_common+0x144>
   1cc96:	f7ff fe17 	bl	1c8c8 <__gnu_unwind_24bit.isra.1>
   1cc9a:	2800      	cmp	r0, #0
   1cc9c:	d040      	beq.n	1cd20 <__gnu_unwind_pr_common+0x150>
   1cc9e:	2009      	movs	r0, #9
   1cca0:	b00b      	add	sp, #44	; 0x2c
   1cca2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1cca6:	2000      	movs	r0, #0
   1cca8:	e7d0      	b.n	1cc4c <__gnu_unwind_pr_common+0x7c>
   1ccaa:	6867      	ldr	r7, [r4, #4]
   1ccac:	3408      	adds	r4, #8
   1ccae:	e7bc      	b.n	1cc2a <__gnu_unwind_pr_common+0x5a>
   1ccb0:	2b02      	cmp	r3, #2
   1ccb2:	dca3      	bgt.n	1cbfc <__gnu_unwind_pr_common+0x2c>
   1ccb4:	0c0b      	lsrs	r3, r1, #16
   1ccb6:	b2da      	uxtb	r2, r3
   1ccb8:	0409      	lsls	r1, r1, #16
   1ccba:	f88d 3025 	strb.w	r3, [sp, #37]	; 0x25
   1ccbe:	2302      	movs	r3, #2
   1ccc0:	eb04 0482 	add.w	r4, r4, r2, lsl #2
   1ccc4:	9107      	str	r1, [sp, #28]
   1ccc6:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
   1ccca:	e797      	b.n	1cbfc <__gnu_unwind_pr_common+0x2c>
   1cccc:	f1bb 0f00 	cmp.w	fp, #0
   1ccd0:	d002      	beq.n	1ccd8 <__gnu_unwind_pr_common+0x108>
   1ccd2:	2800      	cmp	r0, #0
   1ccd4:	f040 80bd 	bne.w	1ce52 <__gnu_unwind_pr_common+0x282>
   1ccd8:	3404      	adds	r4, #4
   1ccda:	e79b      	b.n	1cc14 <__gnu_unwind_pr_common+0x44>
   1ccdc:	f1bb 0f00 	cmp.w	fp, #0
   1cce0:	d125      	bne.n	1cd2e <__gnu_unwind_pr_common+0x15e>
   1cce2:	b1a8      	cbz	r0, 1cd10 <__gnu_unwind_pr_common+0x140>
   1cce4:	e894 000c 	ldmia.w	r4, {r2, r3}
   1cce8:	1c99      	adds	r1, r3, #2
   1ccea:	ea4f 72d2 	mov.w	r2, r2, lsr #31
   1ccee:	d0d6      	beq.n	1cc9e <__gnu_unwind_pr_common+0xce>
   1ccf0:	f105 0158 	add.w	r1, r5, #88	; 0x58
   1ccf4:	3301      	adds	r3, #1
   1ccf6:	9106      	str	r1, [sp, #24]
   1ccf8:	f000 80a3 	beq.w	1ce42 <__gnu_unwind_pr_common+0x272>
   1ccfc:	1d20      	adds	r0, r4, #4
   1ccfe:	f7ff fddd 	bl	1c8bc <_Unwind_decode_typeinfo_ptr.isra.0>
   1cd02:	ab06      	add	r3, sp, #24
   1cd04:	4601      	mov	r1, r0
   1cd06:	4628      	mov	r0, r5
   1cd08:	f7f6 fe00 	bl	1390c <__cxa_type_match>
   1cd0c:	2800      	cmp	r0, #0
   1cd0e:	d177      	bne.n	1ce00 <__gnu_unwind_pr_common+0x230>
   1cd10:	3408      	adds	r4, #8
   1cd12:	e77f      	b.n	1cc14 <__gnu_unwind_pr_common+0x44>
   1cd14:	a907      	add	r1, sp, #28
   1cd16:	4648      	mov	r0, r9
   1cd18:	f000 faee 	bl	1d2f8 <__gnu_unwind_execute>
   1cd1c:	2800      	cmp	r0, #0
   1cd1e:	d1be      	bne.n	1cc9e <__gnu_unwind_pr_common+0xce>
   1cd20:	9b01      	ldr	r3, [sp, #4]
   1cd22:	2b00      	cmp	r3, #0
   1cd24:	d15c      	bne.n	1cde0 <__gnu_unwind_pr_common+0x210>
   1cd26:	2008      	movs	r0, #8
   1cd28:	b00b      	add	sp, #44	; 0x2c
   1cd2a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1cd2e:	210d      	movs	r1, #13
   1cd30:	4648      	mov	r0, r9
   1cd32:	6a2f      	ldr	r7, [r5, #32]
   1cd34:	f7ff fee0 	bl	1caf8 <_Unwind_GetGR>
   1cd38:	4287      	cmp	r7, r0
   1cd3a:	d1e9      	bne.n	1cd10 <__gnu_unwind_pr_common+0x140>
   1cd3c:	6aab      	ldr	r3, [r5, #40]	; 0x28
   1cd3e:	429c      	cmp	r4, r3
   1cd40:	d1e6      	bne.n	1cd10 <__gnu_unwind_pr_common+0x140>
   1cd42:	4620      	mov	r0, r4
   1cd44:	f7ff fcf0 	bl	1c728 <selfrel_offset31>
   1cd48:	210f      	movs	r1, #15
   1cd4a:	4602      	mov	r2, r0
   1cd4c:	4648      	mov	r0, r9
   1cd4e:	f7ff fef9 	bl	1cb44 <_Unwind_SetGR>
   1cd52:	4648      	mov	r0, r9
   1cd54:	462a      	mov	r2, r5
   1cd56:	2100      	movs	r1, #0
   1cd58:	f7ff fef4 	bl	1cb44 <_Unwind_SetGR>
   1cd5c:	2007      	movs	r0, #7
   1cd5e:	e79f      	b.n	1cca0 <__gnu_unwind_pr_common+0xd0>
   1cd60:	210d      	movs	r1, #13
   1cd62:	4648      	mov	r0, r9
   1cd64:	6a2f      	ldr	r7, [r5, #32]
   1cd66:	f7ff fec7 	bl	1caf8 <_Unwind_GetGR>
   1cd6a:	4287      	cmp	r7, r0
   1cd6c:	d058      	beq.n	1ce20 <__gnu_unwind_pr_common+0x250>
   1cd6e:	6823      	ldr	r3, [r4, #0]
   1cd70:	2b00      	cmp	r3, #0
   1cd72:	da87      	bge.n	1cc84 <__gnu_unwind_pr_common+0xb4>
   1cd74:	3404      	adds	r4, #4
   1cd76:	e785      	b.n	1cc84 <__gnu_unwind_pr_common+0xb4>
   1cd78:	9b02      	ldr	r3, [sp, #8]
   1cd7a:	b33b      	cbz	r3, 1cdcc <__gnu_unwind_pr_common+0x1fc>
   1cd7c:	f105 0358 	add.w	r3, r5, #88	; 0x58
   1cd80:	1d27      	adds	r7, r4, #4
   1cd82:	f8cd b010 	str.w	fp, [sp, #16]
   1cd86:	f8dd 800c 	ldr.w	r8, [sp, #12]
   1cd8a:	f8dd a008 	ldr.w	sl, [sp, #8]
   1cd8e:	9605      	str	r6, [sp, #20]
   1cd90:	46a3      	mov	fp, r4
   1cd92:	461c      	mov	r4, r3
   1cd94:	e002      	b.n	1cd9c <__gnu_unwind_pr_common+0x1cc>
   1cd96:	45b2      	cmp	sl, r6
   1cd98:	46b0      	mov	r8, r6
   1cd9a:	d016      	beq.n	1cdca <__gnu_unwind_pr_common+0x1fa>
   1cd9c:	4638      	mov	r0, r7
   1cd9e:	9406      	str	r4, [sp, #24]
   1cda0:	f7ff fd8c 	bl	1c8bc <_Unwind_decode_typeinfo_ptr.isra.0>
   1cda4:	ab06      	add	r3, sp, #24
   1cda6:	4601      	mov	r1, r0
   1cda8:	2200      	movs	r2, #0
   1cdaa:	4628      	mov	r0, r5
   1cdac:	f7f6 fdae 	bl	1390c <__cxa_type_match>
   1cdb0:	f108 0601 	add.w	r6, r8, #1
   1cdb4:	3704      	adds	r7, #4
   1cdb6:	2800      	cmp	r0, #0
   1cdb8:	d0ed      	beq.n	1cd96 <__gnu_unwind_pr_common+0x1c6>
   1cdba:	9b02      	ldr	r3, [sp, #8]
   1cdbc:	9e05      	ldr	r6, [sp, #20]
   1cdbe:	4543      	cmp	r3, r8
   1cdc0:	465c      	mov	r4, fp
   1cdc2:	f8dd b010 	ldr.w	fp, [sp, #16]
   1cdc6:	d1d2      	bne.n	1cd6e <__gnu_unwind_pr_common+0x19e>
   1cdc8:	e000      	b.n	1cdcc <__gnu_unwind_pr_common+0x1fc>
   1cdca:	465c      	mov	r4, fp
   1cdcc:	4648      	mov	r0, r9
   1cdce:	210d      	movs	r1, #13
   1cdd0:	f7ff fe92 	bl	1caf8 <_Unwind_GetGR>
   1cdd4:	9b06      	ldr	r3, [sp, #24]
   1cdd6:	6228      	str	r0, [r5, #32]
   1cdd8:	62ac      	str	r4, [r5, #40]	; 0x28
   1cdda:	626b      	str	r3, [r5, #36]	; 0x24
   1cddc:	2006      	movs	r0, #6
   1cdde:	e75f      	b.n	1cca0 <__gnu_unwind_pr_common+0xd0>
   1cde0:	210f      	movs	r1, #15
   1cde2:	4648      	mov	r0, r9
   1cde4:	f7ff fe88 	bl	1caf8 <_Unwind_GetGR>
   1cde8:	210e      	movs	r1, #14
   1cdea:	4602      	mov	r2, r0
   1cdec:	4648      	mov	r0, r9
   1cdee:	f7ff fea9 	bl	1cb44 <_Unwind_SetGR>
   1cdf2:	4648      	mov	r0, r9
   1cdf4:	4a29      	ldr	r2, [pc, #164]	; (1ce9c <__gnu_unwind_pr_common+0x2cc>)
   1cdf6:	210f      	movs	r1, #15
   1cdf8:	f7ff fea4 	bl	1cb44 <_Unwind_SetGR>
   1cdfc:	2007      	movs	r0, #7
   1cdfe:	e74f      	b.n	1cca0 <__gnu_unwind_pr_common+0xd0>
   1ce00:	4607      	mov	r7, r0
   1ce02:	210d      	movs	r1, #13
   1ce04:	4648      	mov	r0, r9
   1ce06:	f7ff fe77 	bl	1caf8 <_Unwind_GetGR>
   1ce0a:	2f02      	cmp	r7, #2
   1ce0c:	6228      	str	r0, [r5, #32]
   1ce0e:	d11d      	bne.n	1ce4c <__gnu_unwind_pr_common+0x27c>
   1ce10:	462b      	mov	r3, r5
   1ce12:	9a06      	ldr	r2, [sp, #24]
   1ce14:	f843 2f2c 	str.w	r2, [r3, #44]!
   1ce18:	626b      	str	r3, [r5, #36]	; 0x24
   1ce1a:	62ac      	str	r4, [r5, #40]	; 0x28
   1ce1c:	2006      	movs	r0, #6
   1ce1e:	e73f      	b.n	1cca0 <__gnu_unwind_pr_common+0xd0>
   1ce20:	6aab      	ldr	r3, [r5, #40]	; 0x28
   1ce22:	429c      	cmp	r4, r3
   1ce24:	d1a3      	bne.n	1cd6e <__gnu_unwind_pr_common+0x19e>
   1ce26:	2204      	movs	r2, #4
   1ce28:	2700      	movs	r7, #0
   1ce2a:	18a3      	adds	r3, r4, r2
   1ce2c:	9902      	ldr	r1, [sp, #8]
   1ce2e:	62a9      	str	r1, [r5, #40]	; 0x28
   1ce30:	62ef      	str	r7, [r5, #44]	; 0x2c
   1ce32:	632a      	str	r2, [r5, #48]	; 0x30
   1ce34:	636b      	str	r3, [r5, #52]	; 0x34
   1ce36:	6823      	ldr	r3, [r4, #0]
   1ce38:	42bb      	cmp	r3, r7
   1ce3a:	db1d      	blt.n	1ce78 <__gnu_unwind_pr_common+0x2a8>
   1ce3c:	2301      	movs	r3, #1
   1ce3e:	9301      	str	r3, [sp, #4]
   1ce40:	e720      	b.n	1cc84 <__gnu_unwind_pr_common+0xb4>
   1ce42:	4648      	mov	r0, r9
   1ce44:	210d      	movs	r1, #13
   1ce46:	f7ff fe57 	bl	1caf8 <_Unwind_GetGR>
   1ce4a:	6228      	str	r0, [r5, #32]
   1ce4c:	9b06      	ldr	r3, [sp, #24]
   1ce4e:	626b      	str	r3, [r5, #36]	; 0x24
   1ce50:	e7e3      	b.n	1ce1a <__gnu_unwind_pr_common+0x24a>
   1ce52:	4620      	mov	r0, r4
   1ce54:	f7ff fc68 	bl	1c728 <selfrel_offset31>
   1ce58:	3404      	adds	r4, #4
   1ce5a:	4606      	mov	r6, r0
   1ce5c:	63ac      	str	r4, [r5, #56]	; 0x38
   1ce5e:	4628      	mov	r0, r5
   1ce60:	f7f6 fdb0 	bl	139c4 <__cxa_begin_cleanup>
   1ce64:	2800      	cmp	r0, #0
   1ce66:	f43f af1a 	beq.w	1cc9e <__gnu_unwind_pr_common+0xce>
   1ce6a:	4648      	mov	r0, r9
   1ce6c:	4632      	mov	r2, r6
   1ce6e:	210f      	movs	r1, #15
   1ce70:	f7ff fe68 	bl	1cb44 <_Unwind_SetGR>
   1ce74:	2007      	movs	r0, #7
   1ce76:	e713      	b.n	1cca0 <__gnu_unwind_pr_common+0xd0>
   1ce78:	4608      	mov	r0, r1
   1ce7a:	3001      	adds	r0, #1
   1ce7c:	eb04 0080 	add.w	r0, r4, r0, lsl #2
   1ce80:	f7ff fc52 	bl	1c728 <selfrel_offset31>
   1ce84:	210f      	movs	r1, #15
   1ce86:	4602      	mov	r2, r0
   1ce88:	4648      	mov	r0, r9
   1ce8a:	f7ff fe5b 	bl	1cb44 <_Unwind_SetGR>
   1ce8e:	4648      	mov	r0, r9
   1ce90:	462a      	mov	r2, r5
   1ce92:	4639      	mov	r1, r7
   1ce94:	f7ff fe56 	bl	1cb44 <_Unwind_SetGR>
   1ce98:	2007      	movs	r0, #7
   1ce9a:	e701      	b.n	1cca0 <__gnu_unwind_pr_common+0xd0>
   1ce9c:	00013af5 	.word	0x00013af5

0001cea0 <__aeabi_unwind_cpp_pr0>:
   1cea0:	2300      	movs	r3, #0
   1cea2:	e695      	b.n	1cbd0 <__gnu_unwind_pr_common>

0001cea4 <__aeabi_unwind_cpp_pr1>:
   1cea4:	2301      	movs	r3, #1
   1cea6:	e693      	b.n	1cbd0 <__gnu_unwind_pr_common>

0001cea8 <__aeabi_unwind_cpp_pr2>:
   1cea8:	2302      	movs	r3, #2
   1ceaa:	e691      	b.n	1cbd0 <__gnu_unwind_pr_common>

0001ceac <_Unwind_VRS_Pop>:
   1ceac:	b5f0      	push	{r4, r5, r6, r7, lr}
   1ceae:	4604      	mov	r4, r0
   1ceb0:	b0c5      	sub	sp, #276	; 0x114
   1ceb2:	2904      	cmp	r1, #4
   1ceb4:	d80d      	bhi.n	1ced2 <_Unwind_VRS_Pop+0x26>
   1ceb6:	e8df f001 	tbb	[pc, r1]
   1ceba:	0353      	.short	0x0353
   1cebc:	310c      	.short	0x310c
   1cebe:	0f          	.byte	0x0f
   1cebf:	00          	.byte	0x00
   1cec0:	2b01      	cmp	r3, #1
   1cec2:	ea4f 4612 	mov.w	r6, r2, lsr #16
   1cec6:	b295      	uxth	r5, r2
   1cec8:	d162      	bne.n	1cf90 <_Unwind_VRS_Pop+0xe4>
   1ceca:	1972      	adds	r2, r6, r5
   1cecc:	2a10      	cmp	r2, #16
   1cece:	f240 809b 	bls.w	1d008 <_Unwind_VRS_Pop+0x15c>
   1ced2:	2002      	movs	r0, #2
   1ced4:	b045      	add	sp, #276	; 0x114
   1ced6:	bdf0      	pop	{r4, r5, r6, r7, pc}
   1ced8:	2b00      	cmp	r3, #0
   1ceda:	d1fa      	bne.n	1ced2 <_Unwind_VRS_Pop+0x26>
   1cedc:	2a10      	cmp	r2, #16
   1cede:	d8f8      	bhi.n	1ced2 <_Unwind_VRS_Pop+0x26>
   1cee0:	6823      	ldr	r3, [r4, #0]
   1cee2:	06d8      	lsls	r0, r3, #27
   1cee4:	f100 80c6 	bmi.w	1d074 <_Unwind_VRS_Pop+0x1c8>
   1cee8:	ae22      	add	r6, sp, #136	; 0x88
   1ceea:	4630      	mov	r0, r6
   1ceec:	9201      	str	r2, [sp, #4]
   1ceee:	f000 f973 	bl	1d1d8 <__gnu_Unwind_Save_WMMXC>
   1cef2:	6ba0      	ldr	r0, [r4, #56]	; 0x38
   1cef4:	9a01      	ldr	r2, [sp, #4]
   1cef6:	2300      	movs	r3, #0
   1cef8:	2501      	movs	r5, #1
   1cefa:	fa05 f103 	lsl.w	r1, r5, r3
   1cefe:	4211      	tst	r1, r2
   1cf00:	d003      	beq.n	1cf0a <_Unwind_VRS_Pop+0x5e>
   1cf02:	6801      	ldr	r1, [r0, #0]
   1cf04:	f846 1023 	str.w	r1, [r6, r3, lsl #2]
   1cf08:	3004      	adds	r0, #4
   1cf0a:	3301      	adds	r3, #1
   1cf0c:	2b04      	cmp	r3, #4
   1cf0e:	d1f4      	bne.n	1cefa <_Unwind_VRS_Pop+0x4e>
   1cf10:	63a0      	str	r0, [r4, #56]	; 0x38
   1cf12:	4630      	mov	r0, r6
   1cf14:	f000 f956 	bl	1d1c4 <__gnu_Unwind_Restore_WMMXC>
   1cf18:	2000      	movs	r0, #0
   1cf1a:	e7db      	b.n	1ced4 <_Unwind_VRS_Pop+0x28>
   1cf1c:	2b03      	cmp	r3, #3
   1cf1e:	d1d8      	bne.n	1ced2 <_Unwind_VRS_Pop+0x26>
   1cf20:	0c15      	lsrs	r5, r2, #16
   1cf22:	b297      	uxth	r7, r2
   1cf24:	19eb      	adds	r3, r5, r7
   1cf26:	2b10      	cmp	r3, #16
   1cf28:	d8d3      	bhi.n	1ced2 <_Unwind_VRS_Pop+0x26>
   1cf2a:	6823      	ldr	r3, [r4, #0]
   1cf2c:	071e      	lsls	r6, r3, #28
   1cf2e:	f100 80b5 	bmi.w	1d09c <_Unwind_VRS_Pop+0x1f0>
   1cf32:	ae22      	add	r6, sp, #136	; 0x88
   1cf34:	4630      	mov	r0, r6
   1cf36:	f000 f923 	bl	1d180 <__gnu_Unwind_Save_WMMXD>
   1cf3a:	00ed      	lsls	r5, r5, #3
   1cf3c:	6ba3      	ldr	r3, [r4, #56]	; 0x38
   1cf3e:	b14f      	cbz	r7, 1cf54 <_Unwind_VRS_Pop+0xa8>
   1cf40:	3d04      	subs	r5, #4
   1cf42:	1971      	adds	r1, r6, r5
   1cf44:	eb03 00c7 	add.w	r0, r3, r7, lsl #3
   1cf48:	f853 2b04 	ldr.w	r2, [r3], #4
   1cf4c:	f841 2f04 	str.w	r2, [r1, #4]!
   1cf50:	4283      	cmp	r3, r0
   1cf52:	d1f9      	bne.n	1cf48 <_Unwind_VRS_Pop+0x9c>
   1cf54:	4630      	mov	r0, r6
   1cf56:	63a3      	str	r3, [r4, #56]	; 0x38
   1cf58:	f000 f8f0 	bl	1d13c <__gnu_Unwind_Restore_WMMXD>
   1cf5c:	2000      	movs	r0, #0
   1cf5e:	e7b9      	b.n	1ced4 <_Unwind_VRS_Pop+0x28>
   1cf60:	2b00      	cmp	r3, #0
   1cf62:	d1b6      	bne.n	1ced2 <_Unwind_VRS_Pop+0x26>
   1cf64:	6ba5      	ldr	r5, [r4, #56]	; 0x38
   1cf66:	b297      	uxth	r7, r2
   1cf68:	1d20      	adds	r0, r4, #4
   1cf6a:	2601      	movs	r6, #1
   1cf6c:	fa06 f103 	lsl.w	r1, r6, r3
   1cf70:	4239      	tst	r1, r7
   1cf72:	f103 0301 	add.w	r3, r3, #1
   1cf76:	d002      	beq.n	1cf7e <_Unwind_VRS_Pop+0xd2>
   1cf78:	6829      	ldr	r1, [r5, #0]
   1cf7a:	6001      	str	r1, [r0, #0]
   1cf7c:	3504      	adds	r5, #4
   1cf7e:	2b10      	cmp	r3, #16
   1cf80:	f100 0004 	add.w	r0, r0, #4
   1cf84:	d1f2      	bne.n	1cf6c <_Unwind_VRS_Pop+0xc0>
   1cf86:	f412 5000 	ands.w	r0, r2, #8192	; 0x2000
   1cf8a:	d13b      	bne.n	1d004 <_Unwind_VRS_Pop+0x158>
   1cf8c:	63a5      	str	r5, [r4, #56]	; 0x38
   1cf8e:	e7a1      	b.n	1ced4 <_Unwind_VRS_Pop+0x28>
   1cf90:	2b05      	cmp	r3, #5
   1cf92:	d19e      	bne.n	1ced2 <_Unwind_VRS_Pop+0x26>
   1cf94:	1977      	adds	r7, r6, r5
   1cf96:	2f20      	cmp	r7, #32
   1cf98:	d89b      	bhi.n	1ced2 <_Unwind_VRS_Pop+0x26>
   1cf9a:	2e0f      	cmp	r6, #15
   1cf9c:	d966      	bls.n	1d06c <_Unwind_VRS_Pop+0x1c0>
   1cf9e:	462f      	mov	r7, r5
   1cfa0:	2d00      	cmp	r5, #0
   1cfa2:	d13a      	bne.n	1d01a <_Unwind_VRS_Pop+0x16e>
   1cfa4:	462a      	mov	r2, r5
   1cfa6:	2700      	movs	r7, #0
   1cfa8:	2a00      	cmp	r2, #0
   1cfaa:	6ba0      	ldr	r0, [r4, #56]	; 0x38
   1cfac:	dd72      	ble.n	1d094 <_Unwind_VRS_Pop+0x1e8>
   1cfae:	eb00 02c2 	add.w	r2, r0, r2, lsl #3
   1cfb2:	4601      	mov	r1, r0
   1cfb4:	a844      	add	r0, sp, #272	; 0x110
   1cfb6:	eb00 00c6 	add.w	r0, r0, r6, lsl #3
   1cfba:	388c      	subs	r0, #140	; 0x8c
   1cfbc:	f851 5b04 	ldr.w	r5, [r1], #4
   1cfc0:	f840 5f04 	str.w	r5, [r0, #4]!
   1cfc4:	4291      	cmp	r1, r2
   1cfc6:	d1f9      	bne.n	1cfbc <_Unwind_VRS_Pop+0x110>
   1cfc8:	4608      	mov	r0, r1
   1cfca:	b197      	cbz	r7, 1cff2 <_Unwind_VRS_Pop+0x146>
   1cfcc:	2e10      	cmp	r6, #16
   1cfce:	4632      	mov	r2, r6
   1cfd0:	a944      	add	r1, sp, #272	; 0x110
   1cfd2:	bf38      	it	cc
   1cfd4:	2210      	movcc	r2, #16
   1cfd6:	eb01 02c2 	add.w	r2, r1, r2, lsl #3
   1cfda:	f5a2 72c4 	sub.w	r2, r2, #392	; 0x188
   1cfde:	0079      	lsls	r1, r7, #1
   1cfe0:	3a04      	subs	r2, #4
   1cfe2:	eb00 0181 	add.w	r1, r0, r1, lsl #2
   1cfe6:	f850 5b04 	ldr.w	r5, [r0], #4
   1cfea:	f842 5f04 	str.w	r5, [r2, #4]!
   1cfee:	4288      	cmp	r0, r1
   1cff0:	d1f9      	bne.n	1cfe6 <_Unwind_VRS_Pop+0x13a>
   1cff2:	2b01      	cmp	r3, #1
   1cff4:	d048      	beq.n	1d088 <_Unwind_VRS_Pop+0x1dc>
   1cff6:	2e0f      	cmp	r6, #15
   1cff8:	63a1      	str	r1, [r4, #56]	; 0x38
   1cffa:	d933      	bls.n	1d064 <_Unwind_VRS_Pop+0x1b8>
   1cffc:	b117      	cbz	r7, 1d004 <_Unwind_VRS_Pop+0x158>
   1cffe:	a802      	add	r0, sp, #8
   1d000:	f000 f894 	bl	1d12c <__gnu_Unwind_Restore_VFP_D_16_to_31>
   1d004:	2000      	movs	r0, #0
   1d006:	e765      	b.n	1ced4 <_Unwind_VRS_Pop+0x28>
   1d008:	2e0f      	cmp	r6, #15
   1d00a:	f63f af62 	bhi.w	1ced2 <_Unwind_VRS_Pop+0x26>
   1d00e:	2700      	movs	r7, #0
   1d010:	6822      	ldr	r2, [r4, #0]
   1d012:	07d1      	lsls	r1, r2, #31
   1d014:	d417      	bmi.n	1d046 <_Unwind_VRS_Pop+0x19a>
   1d016:	2f00      	cmp	r7, #0
   1d018:	d060      	beq.n	1d0dc <_Unwind_VRS_Pop+0x230>
   1d01a:	6822      	ldr	r2, [r4, #0]
   1d01c:	0751      	lsls	r1, r2, #29
   1d01e:	d445      	bmi.n	1d0ac <_Unwind_VRS_Pop+0x200>
   1d020:	2b01      	cmp	r3, #1
   1d022:	d04d      	beq.n	1d0c0 <_Unwind_VRS_Pop+0x214>
   1d024:	2e0f      	cmp	r6, #15
   1d026:	d806      	bhi.n	1d036 <_Unwind_VRS_Pop+0x18a>
   1d028:	a822      	add	r0, sp, #136	; 0x88
   1d02a:	9301      	str	r3, [sp, #4]
   1d02c:	f000 f87a 	bl	1d124 <__gnu_Unwind_Save_VFP_D>
   1d030:	9b01      	ldr	r3, [sp, #4]
   1d032:	2f00      	cmp	r7, #0
   1d034:	d0b6      	beq.n	1cfa4 <_Unwind_VRS_Pop+0xf8>
   1d036:	a802      	add	r0, sp, #8
   1d038:	9301      	str	r3, [sp, #4]
   1d03a:	f000 f87b 	bl	1d134 <__gnu_Unwind_Save_VFP_D_16_to_31>
   1d03e:	9b01      	ldr	r3, [sp, #4]
   1d040:	f1c6 0210 	rsb	r2, r6, #16
   1d044:	e7b0      	b.n	1cfa8 <_Unwind_VRS_Pop+0xfc>
   1d046:	f022 0101 	bic.w	r1, r2, #1
   1d04a:	2b05      	cmp	r3, #5
   1d04c:	6021      	str	r1, [r4, #0]
   1d04e:	9301      	str	r3, [sp, #4]
   1d050:	4620      	mov	r0, r4
   1d052:	d03b      	beq.n	1d0cc <_Unwind_VRS_Pop+0x220>
   1d054:	f022 0203 	bic.w	r2, r2, #3
   1d058:	f840 2b48 	str.w	r2, [r0], #72
   1d05c:	f000 f85a 	bl	1d114 <__gnu_Unwind_Save_VFP>
   1d060:	9b01      	ldr	r3, [sp, #4]
   1d062:	e7d8      	b.n	1d016 <_Unwind_VRS_Pop+0x16a>
   1d064:	a822      	add	r0, sp, #136	; 0x88
   1d066:	f000 f859 	bl	1d11c <__gnu_Unwind_Restore_VFP_D>
   1d06a:	e7c7      	b.n	1cffc <_Unwind_VRS_Pop+0x150>
   1d06c:	2f10      	cmp	r7, #16
   1d06e:	d9ce      	bls.n	1d00e <_Unwind_VRS_Pop+0x162>
   1d070:	3f10      	subs	r7, #16
   1d072:	e7cd      	b.n	1d010 <_Unwind_VRS_Pop+0x164>
   1d074:	f023 0310 	bic.w	r3, r3, #16
   1d078:	6023      	str	r3, [r4, #0]
   1d07a:	f504 70e8 	add.w	r0, r4, #464	; 0x1d0
   1d07e:	9201      	str	r2, [sp, #4]
   1d080:	f000 f8aa 	bl	1d1d8 <__gnu_Unwind_Save_WMMXC>
   1d084:	9a01      	ldr	r2, [sp, #4]
   1d086:	e72f      	b.n	1cee8 <_Unwind_VRS_Pop+0x3c>
   1d088:	3104      	adds	r1, #4
   1d08a:	63a1      	str	r1, [r4, #56]	; 0x38
   1d08c:	a822      	add	r0, sp, #136	; 0x88
   1d08e:	f000 f83d 	bl	1d10c <__gnu_Unwind_Restore_VFP>
   1d092:	e7b7      	b.n	1d004 <_Unwind_VRS_Pop+0x158>
   1d094:	2f00      	cmp	r7, #0
   1d096:	d199      	bne.n	1cfcc <_Unwind_VRS_Pop+0x120>
   1d098:	4601      	mov	r1, r0
   1d09a:	e7aa      	b.n	1cff2 <_Unwind_VRS_Pop+0x146>
   1d09c:	f023 0308 	bic.w	r3, r3, #8
   1d0a0:	6023      	str	r3, [r4, #0]
   1d0a2:	f504 70a8 	add.w	r0, r4, #336	; 0x150
   1d0a6:	f000 f86b 	bl	1d180 <__gnu_Unwind_Save_WMMXD>
   1d0aa:	e742      	b.n	1cf32 <_Unwind_VRS_Pop+0x86>
   1d0ac:	4620      	mov	r0, r4
   1d0ae:	f022 0204 	bic.w	r2, r2, #4
   1d0b2:	f840 2bd0 	str.w	r2, [r0], #208
   1d0b6:	9301      	str	r3, [sp, #4]
   1d0b8:	f000 f83c 	bl	1d134 <__gnu_Unwind_Save_VFP_D_16_to_31>
   1d0bc:	9b01      	ldr	r3, [sp, #4]
   1d0be:	e7af      	b.n	1d020 <_Unwind_VRS_Pop+0x174>
   1d0c0:	a822      	add	r0, sp, #136	; 0x88
   1d0c2:	9301      	str	r3, [sp, #4]
   1d0c4:	f000 f826 	bl	1d114 <__gnu_Unwind_Save_VFP>
   1d0c8:	9b01      	ldr	r3, [sp, #4]
   1d0ca:	e7b9      	b.n	1d040 <_Unwind_VRS_Pop+0x194>
   1d0cc:	f041 0102 	orr.w	r1, r1, #2
   1d0d0:	f840 1b48 	str.w	r1, [r0], #72
   1d0d4:	f000 f826 	bl	1d124 <__gnu_Unwind_Save_VFP_D>
   1d0d8:	9b01      	ldr	r3, [sp, #4]
   1d0da:	e79c      	b.n	1d016 <_Unwind_VRS_Pop+0x16a>
   1d0dc:	2b01      	cmp	r3, #1
   1d0de:	d003      	beq.n	1d0e8 <_Unwind_VRS_Pop+0x23c>
   1d0e0:	2e0f      	cmp	r6, #15
   1d0e2:	f63f af5f 	bhi.w	1cfa4 <_Unwind_VRS_Pop+0xf8>
   1d0e6:	e79f      	b.n	1d028 <_Unwind_VRS_Pop+0x17c>
   1d0e8:	a822      	add	r0, sp, #136	; 0x88
   1d0ea:	9301      	str	r3, [sp, #4]
   1d0ec:	f000 f812 	bl	1d114 <__gnu_Unwind_Save_VFP>
   1d0f0:	9b01      	ldr	r3, [sp, #4]
   1d0f2:	e757      	b.n	1cfa4 <_Unwind_VRS_Pop+0xf8>

0001d0f4 <__restore_core_regs>:
   1d0f4:	f100 0134 	add.w	r1, r0, #52	; 0x34
   1d0f8:	e891 0038 	ldmia.w	r1, {r3, r4, r5}
   1d0fc:	469c      	mov	ip, r3
   1d0fe:	46a6      	mov	lr, r4
   1d100:	f84c 5d04 	str.w	r5, [ip, #-4]!
   1d104:	e890 0fff 	ldmia.w	r0, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp}
   1d108:	46e5      	mov	sp, ip
   1d10a:	bd00      	pop	{pc}

0001d10c <__gnu_Unwind_Restore_VFP>:
   1d10c:	ec90 0b21 	fldmiax	r0, {d0-d15}	;@ Deprecated
   1d110:	4770      	bx	lr
   1d112:	bf00      	nop

0001d114 <__gnu_Unwind_Save_VFP>:
   1d114:	ec80 0b21 	fstmiax	r0, {d0-d15}	;@ Deprecated
   1d118:	4770      	bx	lr
   1d11a:	bf00      	nop

0001d11c <__gnu_Unwind_Restore_VFP_D>:
   1d11c:	ec90 0b20 	vldmia	r0, {d0-d15}
   1d120:	4770      	bx	lr
   1d122:	bf00      	nop

0001d124 <__gnu_Unwind_Save_VFP_D>:
   1d124:	ec80 0b20 	vstmia	r0, {d0-d15}
   1d128:	4770      	bx	lr
   1d12a:	bf00      	nop

0001d12c <__gnu_Unwind_Restore_VFP_D_16_to_31>:
   1d12c:	ecd0 0b20 	vldmia	r0, {d16-d31}
   1d130:	4770      	bx	lr
   1d132:	bf00      	nop

0001d134 <__gnu_Unwind_Save_VFP_D_16_to_31>:
   1d134:	ecc0 0b20 	vstmia	r0, {d16-d31}
   1d138:	4770      	bx	lr
   1d13a:	bf00      	nop

0001d13c <__gnu_Unwind_Restore_WMMXD>:
   1d13c:	ecf0 0102 	ldfe	f0, [r0], #8
   1d140:	ecf0 1102 	ldfe	f1, [r0], #8
   1d144:	ecf0 2102 	ldfe	f2, [r0], #8
   1d148:	ecf0 3102 	ldfe	f3, [r0], #8
   1d14c:	ecf0 4102 	ldfe	f4, [r0], #8
   1d150:	ecf0 5102 	ldfe	f5, [r0], #8
   1d154:	ecf0 6102 	ldfe	f6, [r0], #8
   1d158:	ecf0 7102 	ldfe	f7, [r0], #8
   1d15c:	ecf0 8102 	ldfp	f0, [r0], #8
   1d160:	ecf0 9102 	ldfp	f1, [r0], #8
   1d164:	ecf0 a102 	ldfp	f2, [r0], #8
   1d168:	ecf0 b102 	ldfp	f3, [r0], #8
   1d16c:	ecf0 c102 	ldfp	f4, [r0], #8
   1d170:	ecf0 d102 	ldfp	f5, [r0], #8
   1d174:	ecf0 e102 	ldfp	f6, [r0], #8
   1d178:	ecf0 f102 	ldfp	f7, [r0], #8
   1d17c:	4770      	bx	lr
   1d17e:	bf00      	nop

0001d180 <__gnu_Unwind_Save_WMMXD>:
   1d180:	ece0 0102 	stfe	f0, [r0], #8
   1d184:	ece0 1102 	stfe	f1, [r0], #8
   1d188:	ece0 2102 	stfe	f2, [r0], #8
   1d18c:	ece0 3102 	stfe	f3, [r0], #8
   1d190:	ece0 4102 	stfe	f4, [r0], #8
   1d194:	ece0 5102 	stfe	f5, [r0], #8
   1d198:	ece0 6102 	stfe	f6, [r0], #8
   1d19c:	ece0 7102 	stfe	f7, [r0], #8
   1d1a0:	ece0 8102 	stfp	f0, [r0], #8
   1d1a4:	ece0 9102 	stfp	f1, [r0], #8
   1d1a8:	ece0 a102 	stfp	f2, [r0], #8
   1d1ac:	ece0 b102 	stfp	f3, [r0], #8
   1d1b0:	ece0 c102 	stfp	f4, [r0], #8
   1d1b4:	ece0 d102 	stfp	f5, [r0], #8
   1d1b8:	ece0 e102 	stfp	f6, [r0], #8
   1d1bc:	ece0 f102 	stfp	f7, [r0], #8
   1d1c0:	4770      	bx	lr
   1d1c2:	bf00      	nop

0001d1c4 <__gnu_Unwind_Restore_WMMXC>:
   1d1c4:	fcb0 8101 	ldc2	1, cr8, [r0], #4
   1d1c8:	fcb0 9101 	ldc2	1, cr9, [r0], #4
   1d1cc:	fcb0 a101 	ldc2	1, cr10, [r0], #4
   1d1d0:	fcb0 b101 	ldc2	1, cr11, [r0], #4
   1d1d4:	4770      	bx	lr
   1d1d6:	bf00      	nop

0001d1d8 <__gnu_Unwind_Save_WMMXC>:
   1d1d8:	fca0 8101 	stc2	1, cr8, [r0], #4
   1d1dc:	fca0 9101 	stc2	1, cr9, [r0], #4
   1d1e0:	fca0 a101 	stc2	1, cr10, [r0], #4
   1d1e4:	fca0 b101 	stc2	1, cr11, [r0], #4
   1d1e8:	4770      	bx	lr
   1d1ea:	bf00      	nop

0001d1ec <_Unwind_RaiseException>:
   1d1ec:	46ec      	mov	ip, sp
   1d1ee:	b500      	push	{lr}
   1d1f0:	e92d 5000 	stmdb	sp!, {ip, lr}
   1d1f4:	e92d 1fff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip}
   1d1f8:	f04f 0300 	mov.w	r3, #0
   1d1fc:	e92d 000c 	stmdb	sp!, {r2, r3}
   1d200:	a901      	add	r1, sp, #4
   1d202:	f7ff fbf3 	bl	1c9ec <__gnu_Unwind_RaiseException>
   1d206:	f8dd e040 	ldr.w	lr, [sp, #64]	; 0x40
   1d20a:	b012      	add	sp, #72	; 0x48
   1d20c:	4770      	bx	lr
   1d20e:	bf00      	nop

0001d210 <_Unwind_Resume>:
   1d210:	46ec      	mov	ip, sp
   1d212:	b500      	push	{lr}
   1d214:	e92d 5000 	stmdb	sp!, {ip, lr}
   1d218:	e92d 1fff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip}
   1d21c:	f04f 0300 	mov.w	r3, #0
   1d220:	e92d 000c 	stmdb	sp!, {r2, r3}
   1d224:	a901      	add	r1, sp, #4
   1d226:	f7ff fc1b 	bl	1ca60 <__gnu_Unwind_Resume>
   1d22a:	f8dd e040 	ldr.w	lr, [sp, #64]	; 0x40
   1d22e:	b012      	add	sp, #72	; 0x48
   1d230:	4770      	bx	lr
   1d232:	bf00      	nop

0001d234 <_Unwind_Resume_or_Rethrow>:
   1d234:	46ec      	mov	ip, sp
   1d236:	b500      	push	{lr}
   1d238:	e92d 5000 	stmdb	sp!, {ip, lr}
   1d23c:	e92d 1fff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip}
   1d240:	f04f 0300 	mov.w	r3, #0
   1d244:	e92d 000c 	stmdb	sp!, {r2, r3}
   1d248:	a901      	add	r1, sp, #4
   1d24a:	f7ff fc2b 	bl	1caa4 <__gnu_Unwind_Resume_or_Rethrow>
   1d24e:	f8dd e040 	ldr.w	lr, [sp, #64]	; 0x40
   1d252:	b012      	add	sp, #72	; 0x48
   1d254:	4770      	bx	lr
   1d256:	bf00      	nop

0001d258 <_Unwind_ForcedUnwind>:
   1d258:	46ec      	mov	ip, sp
   1d25a:	b500      	push	{lr}
   1d25c:	e92d 5000 	stmdb	sp!, {ip, lr}
   1d260:	e92d 1fff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip}
   1d264:	f04f 0300 	mov.w	r3, #0
   1d268:	e92d 000c 	stmdb	sp!, {r2, r3}
   1d26c:	ab01      	add	r3, sp, #4
   1d26e:	f7ff fbed 	bl	1ca4c <__gnu_Unwind_ForcedUnwind>
   1d272:	f8dd e040 	ldr.w	lr, [sp, #64]	; 0x40
   1d276:	b012      	add	sp, #72	; 0x48
   1d278:	4770      	bx	lr
   1d27a:	bf00      	nop

0001d27c <_Unwind_Backtrace>:
   1d27c:	46ec      	mov	ip, sp
   1d27e:	b500      	push	{lr}
   1d280:	e92d 5000 	stmdb	sp!, {ip, lr}
   1d284:	e92d 1fff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip}
   1d288:	f04f 0300 	mov.w	r3, #0
   1d28c:	e92d 000c 	stmdb	sp!, {r2, r3}
   1d290:	aa01      	add	r2, sp, #4
   1d292:	f7ff fc65 	bl	1cb60 <__gnu_Unwind_Backtrace>
   1d296:	f8dd e040 	ldr.w	lr, [sp, #64]	; 0x40
   1d29a:	b012      	add	sp, #72	; 0x48
   1d29c:	4770      	bx	lr
   1d29e:	bf00      	nop

0001d2a0 <next_unwind_byte>:
   1d2a0:	7a02      	ldrb	r2, [r0, #8]
   1d2a2:	b91a      	cbnz	r2, 1d2ac <next_unwind_byte+0xc>
   1d2a4:	7a43      	ldrb	r3, [r0, #9]
   1d2a6:	b943      	cbnz	r3, 1d2ba <next_unwind_byte+0x1a>
   1d2a8:	20b0      	movs	r0, #176	; 0xb0
   1d2aa:	4770      	bx	lr
   1d2ac:	6803      	ldr	r3, [r0, #0]
   1d2ae:	3a01      	subs	r2, #1
   1d2b0:	7202      	strb	r2, [r0, #8]
   1d2b2:	021a      	lsls	r2, r3, #8
   1d2b4:	6002      	str	r2, [r0, #0]
   1d2b6:	0e18      	lsrs	r0, r3, #24
   1d2b8:	4770      	bx	lr
   1d2ba:	6842      	ldr	r2, [r0, #4]
   1d2bc:	3b01      	subs	r3, #1
   1d2be:	b410      	push	{r4}
   1d2c0:	7243      	strb	r3, [r0, #9]
   1d2c2:	6813      	ldr	r3, [r2, #0]
   1d2c4:	2103      	movs	r1, #3
   1d2c6:	1d14      	adds	r4, r2, #4
   1d2c8:	7201      	strb	r1, [r0, #8]
   1d2ca:	021a      	lsls	r2, r3, #8
   1d2cc:	6044      	str	r4, [r0, #4]
   1d2ce:	6002      	str	r2, [r0, #0]
   1d2d0:	f85d 4b04 	ldr.w	r4, [sp], #4
   1d2d4:	0e18      	lsrs	r0, r3, #24
   1d2d6:	4770      	bx	lr

0001d2d8 <_Unwind_GetGR.constprop.0>:
   1d2d8:	b500      	push	{lr}
   1d2da:	b085      	sub	sp, #20
   1d2dc:	aa03      	add	r2, sp, #12
   1d2de:	2300      	movs	r3, #0
   1d2e0:	9200      	str	r2, [sp, #0]
   1d2e2:	4619      	mov	r1, r3
   1d2e4:	220c      	movs	r2, #12
   1d2e6:	f7ff fbed 	bl	1cac4 <_Unwind_VRS_Get>
   1d2ea:	9803      	ldr	r0, [sp, #12]
   1d2ec:	b005      	add	sp, #20
   1d2ee:	f85d fb04 	ldr.w	pc, [sp], #4
   1d2f2:	bf00      	nop

0001d2f4 <unwind_UCB_from_context>:
   1d2f4:	e7f0      	b.n	1d2d8 <_Unwind_GetGR.constprop.0>
   1d2f6:	bf00      	nop

0001d2f8 <__gnu_unwind_execute>:
   1d2f8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   1d2fc:	4606      	mov	r6, r0
   1d2fe:	b085      	sub	sp, #20
   1d300:	460f      	mov	r7, r1
   1d302:	f04f 0800 	mov.w	r8, #0
   1d306:	4638      	mov	r0, r7
   1d308:	f7ff ffca 	bl	1d2a0 <next_unwind_byte>
   1d30c:	28b0      	cmp	r0, #176	; 0xb0
   1d30e:	4604      	mov	r4, r0
   1d310:	d023      	beq.n	1d35a <__gnu_unwind_execute+0x62>
   1d312:	0605      	lsls	r5, r0, #24
   1d314:	d427      	bmi.n	1d366 <__gnu_unwind_execute+0x6e>
   1d316:	2300      	movs	r3, #0
   1d318:	f10d 090c 	add.w	r9, sp, #12
   1d31c:	4619      	mov	r1, r3
   1d31e:	0085      	lsls	r5, r0, #2
   1d320:	220d      	movs	r2, #13
   1d322:	f8cd 9000 	str.w	r9, [sp]
   1d326:	4630      	mov	r0, r6
   1d328:	f7ff fbcc 	bl	1cac4 <_Unwind_VRS_Get>
   1d32c:	b2ed      	uxtb	r5, r5
   1d32e:	9b03      	ldr	r3, [sp, #12]
   1d330:	f8cd 9000 	str.w	r9, [sp]
   1d334:	0660      	lsls	r0, r4, #25
   1d336:	f105 0504 	add.w	r5, r5, #4
   1d33a:	bf4c      	ite	mi
   1d33c:	1b5d      	submi	r5, r3, r5
   1d33e:	18ed      	addpl	r5, r5, r3
   1d340:	2300      	movs	r3, #0
   1d342:	4619      	mov	r1, r3
   1d344:	220d      	movs	r2, #13
   1d346:	4630      	mov	r0, r6
   1d348:	9503      	str	r5, [sp, #12]
   1d34a:	f7ff fbe1 	bl	1cb10 <_Unwind_VRS_Set>
   1d34e:	4638      	mov	r0, r7
   1d350:	f7ff ffa6 	bl	1d2a0 <next_unwind_byte>
   1d354:	28b0      	cmp	r0, #176	; 0xb0
   1d356:	4604      	mov	r4, r0
   1d358:	d1db      	bne.n	1d312 <__gnu_unwind_execute+0x1a>
   1d35a:	f1b8 0f00 	cmp.w	r8, #0
   1d35e:	f000 8095 	beq.w	1d48c <__gnu_unwind_execute+0x194>
   1d362:	2000      	movs	r0, #0
   1d364:	e01c      	b.n	1d3a0 <__gnu_unwind_execute+0xa8>
   1d366:	f000 03f0 	and.w	r3, r0, #240	; 0xf0
   1d36a:	2b80      	cmp	r3, #128	; 0x80
   1d36c:	d05d      	beq.n	1d42a <__gnu_unwind_execute+0x132>
   1d36e:	2b90      	cmp	r3, #144	; 0x90
   1d370:	d019      	beq.n	1d3a6 <__gnu_unwind_execute+0xae>
   1d372:	2ba0      	cmp	r3, #160	; 0xa0
   1d374:	d02c      	beq.n	1d3d0 <__gnu_unwind_execute+0xd8>
   1d376:	2bb0      	cmp	r3, #176	; 0xb0
   1d378:	d03f      	beq.n	1d3fa <__gnu_unwind_execute+0x102>
   1d37a:	2bc0      	cmp	r3, #192	; 0xc0
   1d37c:	d06c      	beq.n	1d458 <__gnu_unwind_execute+0x160>
   1d37e:	f000 03f8 	and.w	r3, r0, #248	; 0xf8
   1d382:	2bd0      	cmp	r3, #208	; 0xd0
   1d384:	d10b      	bne.n	1d39e <__gnu_unwind_execute+0xa6>
   1d386:	f000 0207 	and.w	r2, r0, #7
   1d38a:	3201      	adds	r2, #1
   1d38c:	f442 2200 	orr.w	r2, r2, #524288	; 0x80000
   1d390:	2305      	movs	r3, #5
   1d392:	2101      	movs	r1, #1
   1d394:	4630      	mov	r0, r6
   1d396:	f7ff fd89 	bl	1ceac <_Unwind_VRS_Pop>
   1d39a:	2800      	cmp	r0, #0
   1d39c:	d0b3      	beq.n	1d306 <__gnu_unwind_execute+0xe>
   1d39e:	2009      	movs	r0, #9
   1d3a0:	b005      	add	sp, #20
   1d3a2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   1d3a6:	f000 030d 	and.w	r3, r0, #13
   1d3aa:	2b0d      	cmp	r3, #13
   1d3ac:	d0f7      	beq.n	1d39e <__gnu_unwind_execute+0xa6>
   1d3ae:	ad03      	add	r5, sp, #12
   1d3b0:	2300      	movs	r3, #0
   1d3b2:	f000 020f 	and.w	r2, r0, #15
   1d3b6:	4619      	mov	r1, r3
   1d3b8:	9500      	str	r5, [sp, #0]
   1d3ba:	4630      	mov	r0, r6
   1d3bc:	f7ff fb82 	bl	1cac4 <_Unwind_VRS_Get>
   1d3c0:	2300      	movs	r3, #0
   1d3c2:	9500      	str	r5, [sp, #0]
   1d3c4:	4619      	mov	r1, r3
   1d3c6:	220d      	movs	r2, #13
   1d3c8:	4630      	mov	r0, r6
   1d3ca:	f7ff fba1 	bl	1cb10 <_Unwind_VRS_Set>
   1d3ce:	e79a      	b.n	1d306 <__gnu_unwind_execute+0xe>
   1d3d0:	43c2      	mvns	r2, r0
   1d3d2:	f002 0307 	and.w	r3, r2, #7
   1d3d6:	f44f 627f 	mov.w	r2, #4080	; 0xff0
   1d3da:	411a      	asrs	r2, r3
   1d3dc:	0701      	lsls	r1, r0, #28
   1d3de:	f402 627f 	and.w	r2, r2, #4080	; 0xff0
   1d3e2:	f04f 0300 	mov.w	r3, #0
   1d3e6:	bf48      	it	mi
   1d3e8:	f442 4280 	orrmi.w	r2, r2, #16384	; 0x4000
   1d3ec:	4619      	mov	r1, r3
   1d3ee:	4630      	mov	r0, r6
   1d3f0:	f7ff fd5c 	bl	1ceac <_Unwind_VRS_Pop>
   1d3f4:	2800      	cmp	r0, #0
   1d3f6:	d1d2      	bne.n	1d39e <__gnu_unwind_execute+0xa6>
   1d3f8:	e785      	b.n	1d306 <__gnu_unwind_execute+0xe>
   1d3fa:	28b1      	cmp	r0, #177	; 0xb1
   1d3fc:	d057      	beq.n	1d4ae <__gnu_unwind_execute+0x1b6>
   1d3fe:	28b2      	cmp	r0, #178	; 0xb2
   1d400:	d068      	beq.n	1d4d4 <__gnu_unwind_execute+0x1dc>
   1d402:	28b3      	cmp	r0, #179	; 0xb3
   1d404:	f000 8095 	beq.w	1d532 <__gnu_unwind_execute+0x23a>
   1d408:	f000 03fc 	and.w	r3, r0, #252	; 0xfc
   1d40c:	2bb4      	cmp	r3, #180	; 0xb4
   1d40e:	d0c6      	beq.n	1d39e <__gnu_unwind_execute+0xa6>
   1d410:	f000 0207 	and.w	r2, r0, #7
   1d414:	3201      	adds	r2, #1
   1d416:	2301      	movs	r3, #1
   1d418:	f442 2200 	orr.w	r2, r2, #524288	; 0x80000
   1d41c:	4619      	mov	r1, r3
   1d41e:	4630      	mov	r0, r6
   1d420:	f7ff fd44 	bl	1ceac <_Unwind_VRS_Pop>
   1d424:	2800      	cmp	r0, #0
   1d426:	d1ba      	bne.n	1d39e <__gnu_unwind_execute+0xa6>
   1d428:	e76d      	b.n	1d306 <__gnu_unwind_execute+0xe>
   1d42a:	4638      	mov	r0, r7
   1d42c:	f7ff ff38 	bl	1d2a0 <next_unwind_byte>
   1d430:	0224      	lsls	r4, r4, #8
   1d432:	4304      	orrs	r4, r0
   1d434:	f5b4 4f00 	cmp.w	r4, #32768	; 0x8000
   1d438:	d0b1      	beq.n	1d39e <__gnu_unwind_execute+0xa6>
   1d43a:	0124      	lsls	r4, r4, #4
   1d43c:	2300      	movs	r3, #0
   1d43e:	b2a2      	uxth	r2, r4
   1d440:	4619      	mov	r1, r3
   1d442:	4630      	mov	r0, r6
   1d444:	f7ff fd32 	bl	1ceac <_Unwind_VRS_Pop>
   1d448:	2800      	cmp	r0, #0
   1d44a:	d1a8      	bne.n	1d39e <__gnu_unwind_execute+0xa6>
   1d44c:	f414 4f00 	tst.w	r4, #32768	; 0x8000
   1d450:	bf18      	it	ne
   1d452:	f04f 0801 	movne.w	r8, #1
   1d456:	e756      	b.n	1d306 <__gnu_unwind_execute+0xe>
   1d458:	28c6      	cmp	r0, #198	; 0xc6
   1d45a:	d07d      	beq.n	1d558 <__gnu_unwind_execute+0x260>
   1d45c:	28c7      	cmp	r0, #199	; 0xc7
   1d45e:	f000 8086 	beq.w	1d56e <__gnu_unwind_execute+0x276>
   1d462:	f000 03f8 	and.w	r3, r0, #248	; 0xf8
   1d466:	2bc0      	cmp	r3, #192	; 0xc0
   1d468:	f000 8094 	beq.w	1d594 <__gnu_unwind_execute+0x29c>
   1d46c:	28c8      	cmp	r0, #200	; 0xc8
   1d46e:	f000 809f 	beq.w	1d5b0 <__gnu_unwind_execute+0x2b8>
   1d472:	28c9      	cmp	r0, #201	; 0xc9
   1d474:	d193      	bne.n	1d39e <__gnu_unwind_execute+0xa6>
   1d476:	4638      	mov	r0, r7
   1d478:	f7ff ff12 	bl	1d2a0 <next_unwind_byte>
   1d47c:	0302      	lsls	r2, r0, #12
   1d47e:	f000 000f 	and.w	r0, r0, #15
   1d482:	f402 2270 	and.w	r2, r2, #983040	; 0xf0000
   1d486:	3001      	adds	r0, #1
   1d488:	4302      	orrs	r2, r0
   1d48a:	e781      	b.n	1d390 <__gnu_unwind_execute+0x98>
   1d48c:	ac03      	add	r4, sp, #12
   1d48e:	4643      	mov	r3, r8
   1d490:	220e      	movs	r2, #14
   1d492:	4641      	mov	r1, r8
   1d494:	9400      	str	r4, [sp, #0]
   1d496:	4630      	mov	r0, r6
   1d498:	f7ff fb14 	bl	1cac4 <_Unwind_VRS_Get>
   1d49c:	9400      	str	r4, [sp, #0]
   1d49e:	4630      	mov	r0, r6
   1d4a0:	4643      	mov	r3, r8
   1d4a2:	220f      	movs	r2, #15
   1d4a4:	4641      	mov	r1, r8
   1d4a6:	f7ff fb33 	bl	1cb10 <_Unwind_VRS_Set>
   1d4aa:	4640      	mov	r0, r8
   1d4ac:	e778      	b.n	1d3a0 <__gnu_unwind_execute+0xa8>
   1d4ae:	4638      	mov	r0, r7
   1d4b0:	f7ff fef6 	bl	1d2a0 <next_unwind_byte>
   1d4b4:	2800      	cmp	r0, #0
   1d4b6:	f43f af72 	beq.w	1d39e <__gnu_unwind_execute+0xa6>
   1d4ba:	f010 03f0 	ands.w	r3, r0, #240	; 0xf0
   1d4be:	f47f af6e 	bne.w	1d39e <__gnu_unwind_execute+0xa6>
   1d4c2:	4602      	mov	r2, r0
   1d4c4:	4619      	mov	r1, r3
   1d4c6:	4630      	mov	r0, r6
   1d4c8:	f7ff fcf0 	bl	1ceac <_Unwind_VRS_Pop>
   1d4cc:	2800      	cmp	r0, #0
   1d4ce:	f47f af66 	bne.w	1d39e <__gnu_unwind_execute+0xa6>
   1d4d2:	e718      	b.n	1d306 <__gnu_unwind_execute+0xe>
   1d4d4:	2300      	movs	r3, #0
   1d4d6:	f10d 090c 	add.w	r9, sp, #12
   1d4da:	220d      	movs	r2, #13
   1d4dc:	4619      	mov	r1, r3
   1d4de:	f8cd 9000 	str.w	r9, [sp]
   1d4e2:	4630      	mov	r0, r6
   1d4e4:	f7ff faee 	bl	1cac4 <_Unwind_VRS_Get>
   1d4e8:	4638      	mov	r0, r7
   1d4ea:	f7ff fed9 	bl	1d2a0 <next_unwind_byte>
   1d4ee:	0602      	lsls	r2, r0, #24
   1d4f0:	f04f 0402 	mov.w	r4, #2
   1d4f4:	d50c      	bpl.n	1d510 <__gnu_unwind_execute+0x218>
   1d4f6:	9b03      	ldr	r3, [sp, #12]
   1d4f8:	f000 007f 	and.w	r0, r0, #127	; 0x7f
   1d4fc:	40a0      	lsls	r0, r4
   1d4fe:	4403      	add	r3, r0
   1d500:	4638      	mov	r0, r7
   1d502:	9303      	str	r3, [sp, #12]
   1d504:	f7ff fecc 	bl	1d2a0 <next_unwind_byte>
   1d508:	0603      	lsls	r3, r0, #24
   1d50a:	f104 0407 	add.w	r4, r4, #7
   1d50e:	d4f2      	bmi.n	1d4f6 <__gnu_unwind_execute+0x1fe>
   1d510:	9b03      	ldr	r3, [sp, #12]
   1d512:	f8cd 9000 	str.w	r9, [sp]
   1d516:	f000 027f 	and.w	r2, r0, #127	; 0x7f
   1d51a:	40a2      	lsls	r2, r4
   1d51c:	f503 7401 	add.w	r4, r3, #516	; 0x204
   1d520:	2300      	movs	r3, #0
   1d522:	4414      	add	r4, r2
   1d524:	4619      	mov	r1, r3
   1d526:	220d      	movs	r2, #13
   1d528:	4630      	mov	r0, r6
   1d52a:	9403      	str	r4, [sp, #12]
   1d52c:	f7ff faf0 	bl	1cb10 <_Unwind_VRS_Set>
   1d530:	e6e9      	b.n	1d306 <__gnu_unwind_execute+0xe>
   1d532:	4638      	mov	r0, r7
   1d534:	f7ff feb4 	bl	1d2a0 <next_unwind_byte>
   1d538:	0301      	lsls	r1, r0, #12
   1d53a:	f000 000f 	and.w	r0, r0, #15
   1d53e:	f401 2170 	and.w	r1, r1, #983040	; 0xf0000
   1d542:	1c42      	adds	r2, r0, #1
   1d544:	2301      	movs	r3, #1
   1d546:	430a      	orrs	r2, r1
   1d548:	4630      	mov	r0, r6
   1d54a:	4619      	mov	r1, r3
   1d54c:	f7ff fcae 	bl	1ceac <_Unwind_VRS_Pop>
   1d550:	2800      	cmp	r0, #0
   1d552:	f47f af24 	bne.w	1d39e <__gnu_unwind_execute+0xa6>
   1d556:	e6d6      	b.n	1d306 <__gnu_unwind_execute+0xe>
   1d558:	4638      	mov	r0, r7
   1d55a:	f7ff fea1 	bl	1d2a0 <next_unwind_byte>
   1d55e:	0301      	lsls	r1, r0, #12
   1d560:	f000 000f 	and.w	r0, r0, #15
   1d564:	f401 2170 	and.w	r1, r1, #983040	; 0xf0000
   1d568:	1c42      	adds	r2, r0, #1
   1d56a:	2303      	movs	r3, #3
   1d56c:	e7eb      	b.n	1d546 <__gnu_unwind_execute+0x24e>
   1d56e:	4638      	mov	r0, r7
   1d570:	f7ff fe96 	bl	1d2a0 <next_unwind_byte>
   1d574:	2800      	cmp	r0, #0
   1d576:	f43f af12 	beq.w	1d39e <__gnu_unwind_execute+0xa6>
   1d57a:	f010 03f0 	ands.w	r3, r0, #240	; 0xf0
   1d57e:	f47f af0e 	bne.w	1d39e <__gnu_unwind_execute+0xa6>
   1d582:	4602      	mov	r2, r0
   1d584:	2104      	movs	r1, #4
   1d586:	4630      	mov	r0, r6
   1d588:	f7ff fc90 	bl	1ceac <_Unwind_VRS_Pop>
   1d58c:	2800      	cmp	r0, #0
   1d58e:	f47f af06 	bne.w	1d39e <__gnu_unwind_execute+0xa6>
   1d592:	e6b8      	b.n	1d306 <__gnu_unwind_execute+0xe>
   1d594:	f000 020f 	and.w	r2, r0, #15
   1d598:	3201      	adds	r2, #1
   1d59a:	2303      	movs	r3, #3
   1d59c:	f442 2220 	orr.w	r2, r2, #655360	; 0xa0000
   1d5a0:	4619      	mov	r1, r3
   1d5a2:	4630      	mov	r0, r6
   1d5a4:	f7ff fc82 	bl	1ceac <_Unwind_VRS_Pop>
   1d5a8:	2800      	cmp	r0, #0
   1d5aa:	f47f aef8 	bne.w	1d39e <__gnu_unwind_execute+0xa6>
   1d5ae:	e6aa      	b.n	1d306 <__gnu_unwind_execute+0xe>
   1d5b0:	4638      	mov	r0, r7
   1d5b2:	f7ff fe75 	bl	1d2a0 <next_unwind_byte>
   1d5b6:	f000 02f0 	and.w	r2, r0, #240	; 0xf0
   1d5ba:	f000 030f 	and.w	r3, r0, #15
   1d5be:	3210      	adds	r2, #16
   1d5c0:	3301      	adds	r3, #1
   1d5c2:	ea43 3202 	orr.w	r2, r3, r2, lsl #12
   1d5c6:	e6e3      	b.n	1d390 <__gnu_unwind_execute+0x98>

0001d5c8 <__gnu_unwind_frame>:
   1d5c8:	b510      	push	{r4, lr}
   1d5ca:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
   1d5cc:	b084      	sub	sp, #16
   1d5ce:	685a      	ldr	r2, [r3, #4]
   1d5d0:	2003      	movs	r0, #3
   1d5d2:	f88d 000c 	strb.w	r0, [sp, #12]
   1d5d6:	79dc      	ldrb	r4, [r3, #7]
   1d5d8:	f88d 400d 	strb.w	r4, [sp, #13]
   1d5dc:	0212      	lsls	r2, r2, #8
   1d5de:	3308      	adds	r3, #8
   1d5e0:	4608      	mov	r0, r1
   1d5e2:	a901      	add	r1, sp, #4
   1d5e4:	9201      	str	r2, [sp, #4]
   1d5e6:	9302      	str	r3, [sp, #8]
   1d5e8:	f7ff fe86 	bl	1d2f8 <__gnu_unwind_execute>
   1d5ec:	b004      	add	sp, #16
   1d5ee:	bd10      	pop	{r4, pc}

0001d5f0 <_Unwind_GetRegionStart>:
   1d5f0:	b508      	push	{r3, lr}
   1d5f2:	f7ff fe7f 	bl	1d2f4 <unwind_UCB_from_context>
   1d5f6:	6c80      	ldr	r0, [r0, #72]	; 0x48
   1d5f8:	bd08      	pop	{r3, pc}
   1d5fa:	bf00      	nop

0001d5fc <_Unwind_GetLanguageSpecificData>:
   1d5fc:	b508      	push	{r3, lr}
   1d5fe:	f7ff fe79 	bl	1d2f4 <unwind_UCB_from_context>
   1d602:	6cc0      	ldr	r0, [r0, #76]	; 0x4c
   1d604:	79c3      	ldrb	r3, [r0, #7]
   1d606:	eb00 0083 	add.w	r0, r0, r3, lsl #2
   1d60a:	3008      	adds	r0, #8
   1d60c:	bd08      	pop	{r3, pc}
   1d60e:	bf00      	nop

0001d610 <_Unwind_GetTextRelBase>:
   1d610:	b508      	push	{r3, lr}
   1d612:	f000 f807 	bl	1d624 <abort>
   1d616:	bf00      	nop

0001d618 <_Unwind_GetDataRelBase>:
   1d618:	b508      	push	{r3, lr}
   1d61a:	f7ff fff9 	bl	1d610 <_Unwind_GetTextRelBase>
   1d61e:	bf00      	nop

0001d620 <__aeabi_idiv0>:
   1d620:	4770      	bx	lr
   1d622:	bf00      	nop

0001d624 <abort>:
   1d624:	b508      	push	{r3, lr}
   1d626:	2006      	movs	r0, #6
   1d628:	f001 f96a 	bl	1e900 <raise>
   1d62c:	2001      	movs	r0, #1
   1d62e:	f005 f907 	bl	22840 <_exit>
   1d632:	bf00      	nop

0001d634 <__errno>:
   1d634:	4b01      	ldr	r3, [pc, #4]	; (1d63c <__errno+0x8>)
   1d636:	6818      	ldr	r0, [r3, #0]
   1d638:	4770      	bx	lr
   1d63a:	bf00      	nop
   1d63c:	200000f8 	.word	0x200000f8

0001d640 <fputc>:
   1d640:	4b14      	ldr	r3, [pc, #80]	; (1d694 <fputc+0x54>)
   1d642:	b570      	push	{r4, r5, r6, lr}
   1d644:	681d      	ldr	r5, [r3, #0]
   1d646:	4606      	mov	r6, r0
   1d648:	460c      	mov	r4, r1
   1d64a:	b10d      	cbz	r5, 1d650 <fputc+0x10>
   1d64c:	6bab      	ldr	r3, [r5, #56]	; 0x38
   1d64e:	b1c3      	cbz	r3, 1d682 <fputc+0x42>
   1d650:	6e63      	ldr	r3, [r4, #100]	; 0x64
   1d652:	07d8      	lsls	r0, r3, #31
   1d654:	d402      	bmi.n	1d65c <fputc+0x1c>
   1d656:	89a3      	ldrh	r3, [r4, #12]
   1d658:	0599      	lsls	r1, r3, #22
   1d65a:	d516      	bpl.n	1d68a <fputc+0x4a>
   1d65c:	4628      	mov	r0, r5
   1d65e:	4622      	mov	r2, r4
   1d660:	4631      	mov	r1, r6
   1d662:	f000 ff25 	bl	1e4b0 <_putc_r>
   1d666:	6e63      	ldr	r3, [r4, #100]	; 0x64
   1d668:	07da      	lsls	r2, r3, #31
   1d66a:	4605      	mov	r5, r0
   1d66c:	d402      	bmi.n	1d674 <fputc+0x34>
   1d66e:	89a3      	ldrh	r3, [r4, #12]
   1d670:	059b      	lsls	r3, r3, #22
   1d672:	d501      	bpl.n	1d678 <fputc+0x38>
   1d674:	4628      	mov	r0, r5
   1d676:	bd70      	pop	{r4, r5, r6, pc}
   1d678:	6da0      	ldr	r0, [r4, #88]	; 0x58
   1d67a:	f000 fa65 	bl	1db48 <__retarget_lock_release_recursive>
   1d67e:	4628      	mov	r0, r5
   1d680:	bd70      	pop	{r4, r5, r6, pc}
   1d682:	4628      	mov	r0, r5
   1d684:	f003 fff6 	bl	21674 <__sinit>
   1d688:	e7e2      	b.n	1d650 <fputc+0x10>
   1d68a:	6da0      	ldr	r0, [r4, #88]	; 0x58
   1d68c:	f000 fa5a 	bl	1db44 <__retarget_lock_acquire_recursive>
   1d690:	e7e4      	b.n	1d65c <fputc+0x1c>
   1d692:	bf00      	nop
   1d694:	200000f8 	.word	0x200000f8

0001d698 <_fputs_r>:
   1d698:	b530      	push	{r4, r5, lr}
   1d69a:	b087      	sub	sp, #28
   1d69c:	4605      	mov	r5, r0
   1d69e:	4608      	mov	r0, r1
   1d6a0:	4614      	mov	r4, r2
   1d6a2:	9101      	str	r1, [sp, #4]
   1d6a4:	f001 faec 	bl	1ec80 <strlen>
   1d6a8:	aa01      	add	r2, sp, #4
   1d6aa:	2301      	movs	r3, #1
   1d6ac:	9005      	str	r0, [sp, #20]
   1d6ae:	9002      	str	r0, [sp, #8]
   1d6b0:	9203      	str	r2, [sp, #12]
   1d6b2:	9304      	str	r3, [sp, #16]
   1d6b4:	b10d      	cbz	r5, 1d6ba <_fputs_r+0x22>
   1d6b6:	6bab      	ldr	r3, [r5, #56]	; 0x38
   1d6b8:	b333      	cbz	r3, 1d708 <_fputs_r+0x70>
   1d6ba:	6e63      	ldr	r3, [r4, #100]	; 0x64
   1d6bc:	f013 0f01 	tst.w	r3, #1
   1d6c0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   1d6c4:	b29a      	uxth	r2, r3
   1d6c6:	d101      	bne.n	1d6cc <_fputs_r+0x34>
   1d6c8:	0590      	lsls	r0, r2, #22
   1d6ca:	d521      	bpl.n	1d710 <_fputs_r+0x78>
   1d6cc:	0491      	lsls	r1, r2, #18
   1d6ce:	d406      	bmi.n	1d6de <_fputs_r+0x46>
   1d6d0:	6e62      	ldr	r2, [r4, #100]	; 0x64
   1d6d2:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
   1d6d6:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
   1d6da:	81a3      	strh	r3, [r4, #12]
   1d6dc:	6662      	str	r2, [r4, #100]	; 0x64
   1d6de:	4628      	mov	r0, r5
   1d6e0:	aa03      	add	r2, sp, #12
   1d6e2:	4621      	mov	r1, r4
   1d6e4:	f000 f824 	bl	1d730 <__sfvwrite_r>
   1d6e8:	6e63      	ldr	r3, [r4, #100]	; 0x64
   1d6ea:	07da      	lsls	r2, r3, #31
   1d6ec:	4605      	mov	r5, r0
   1d6ee:	d402      	bmi.n	1d6f6 <_fputs_r+0x5e>
   1d6f0:	89a3      	ldrh	r3, [r4, #12]
   1d6f2:	059b      	lsls	r3, r3, #22
   1d6f4:	d502      	bpl.n	1d6fc <_fputs_r+0x64>
   1d6f6:	4628      	mov	r0, r5
   1d6f8:	b007      	add	sp, #28
   1d6fa:	bd30      	pop	{r4, r5, pc}
   1d6fc:	6da0      	ldr	r0, [r4, #88]	; 0x58
   1d6fe:	f000 fa23 	bl	1db48 <__retarget_lock_release_recursive>
   1d702:	4628      	mov	r0, r5
   1d704:	b007      	add	sp, #28
   1d706:	bd30      	pop	{r4, r5, pc}
   1d708:	4628      	mov	r0, r5
   1d70a:	f003 ffb3 	bl	21674 <__sinit>
   1d70e:	e7d4      	b.n	1d6ba <_fputs_r+0x22>
   1d710:	6da0      	ldr	r0, [r4, #88]	; 0x58
   1d712:	f000 fa17 	bl	1db44 <__retarget_lock_acquire_recursive>
   1d716:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   1d71a:	b29a      	uxth	r2, r3
   1d71c:	e7d6      	b.n	1d6cc <_fputs_r+0x34>
   1d71e:	bf00      	nop

0001d720 <fputs>:
   1d720:	4b02      	ldr	r3, [pc, #8]	; (1d72c <fputs+0xc>)
   1d722:	460a      	mov	r2, r1
   1d724:	4601      	mov	r1, r0
   1d726:	6818      	ldr	r0, [r3, #0]
   1d728:	f7ff bfb6 	b.w	1d698 <_fputs_r>
   1d72c:	200000f8 	.word	0x200000f8

0001d730 <__sfvwrite_r>:
   1d730:	6893      	ldr	r3, [r2, #8]
   1d732:	2b00      	cmp	r3, #0
   1d734:	d073      	beq.n	1d81e <__sfvwrite_r+0xee>
   1d736:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1d73a:	898b      	ldrh	r3, [r1, #12]
   1d73c:	b083      	sub	sp, #12
   1d73e:	460c      	mov	r4, r1
   1d740:	0719      	lsls	r1, r3, #28
   1d742:	9000      	str	r0, [sp, #0]
   1d744:	4616      	mov	r6, r2
   1d746:	d526      	bpl.n	1d796 <__sfvwrite_r+0x66>
   1d748:	6922      	ldr	r2, [r4, #16]
   1d74a:	b322      	cbz	r2, 1d796 <__sfvwrite_r+0x66>
   1d74c:	f013 0002 	ands.w	r0, r3, #2
   1d750:	6835      	ldr	r5, [r6, #0]
   1d752:	d02c      	beq.n	1d7ae <__sfvwrite_r+0x7e>
   1d754:	f04f 0900 	mov.w	r9, #0
   1d758:	4fb0      	ldr	r7, [pc, #704]	; (1da1c <__sfvwrite_r+0x2ec>)
   1d75a:	46c8      	mov	r8, r9
   1d75c:	46b2      	mov	sl, r6
   1d75e:	45b8      	cmp	r8, r7
   1d760:	4643      	mov	r3, r8
   1d762:	464a      	mov	r2, r9
   1d764:	bf28      	it	cs
   1d766:	463b      	movcs	r3, r7
   1d768:	9800      	ldr	r0, [sp, #0]
   1d76a:	f1b8 0f00 	cmp.w	r8, #0
   1d76e:	d050      	beq.n	1d812 <__sfvwrite_r+0xe2>
   1d770:	69e1      	ldr	r1, [r4, #28]
   1d772:	6a66      	ldr	r6, [r4, #36]	; 0x24
   1d774:	47b0      	blx	r6
   1d776:	2800      	cmp	r0, #0
   1d778:	dd58      	ble.n	1d82c <__sfvwrite_r+0xfc>
   1d77a:	f8da 3008 	ldr.w	r3, [sl, #8]
   1d77e:	1a1b      	subs	r3, r3, r0
   1d780:	4481      	add	r9, r0
   1d782:	eba8 0800 	sub.w	r8, r8, r0
   1d786:	f8ca 3008 	str.w	r3, [sl, #8]
   1d78a:	2b00      	cmp	r3, #0
   1d78c:	d1e7      	bne.n	1d75e <__sfvwrite_r+0x2e>
   1d78e:	2000      	movs	r0, #0
   1d790:	b003      	add	sp, #12
   1d792:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1d796:	4621      	mov	r1, r4
   1d798:	9800      	ldr	r0, [sp, #0]
   1d79a:	f002 fe45 	bl	20428 <__swsetup_r>
   1d79e:	2800      	cmp	r0, #0
   1d7a0:	f040 8133 	bne.w	1da0a <__sfvwrite_r+0x2da>
   1d7a4:	89a3      	ldrh	r3, [r4, #12]
   1d7a6:	6835      	ldr	r5, [r6, #0]
   1d7a8:	f013 0002 	ands.w	r0, r3, #2
   1d7ac:	d1d2      	bne.n	1d754 <__sfvwrite_r+0x24>
   1d7ae:	f013 0901 	ands.w	r9, r3, #1
   1d7b2:	d145      	bne.n	1d840 <__sfvwrite_r+0x110>
   1d7b4:	464f      	mov	r7, r9
   1d7b6:	9601      	str	r6, [sp, #4]
   1d7b8:	b337      	cbz	r7, 1d808 <__sfvwrite_r+0xd8>
   1d7ba:	059a      	lsls	r2, r3, #22
   1d7bc:	f8d4 8008 	ldr.w	r8, [r4, #8]
   1d7c0:	f140 8083 	bpl.w	1d8ca <__sfvwrite_r+0x19a>
   1d7c4:	4547      	cmp	r7, r8
   1d7c6:	46c3      	mov	fp, r8
   1d7c8:	f0c0 80ab 	bcc.w	1d922 <__sfvwrite_r+0x1f2>
   1d7cc:	f413 6f90 	tst.w	r3, #1152	; 0x480
   1d7d0:	f040 80ac 	bne.w	1d92c <__sfvwrite_r+0x1fc>
   1d7d4:	6820      	ldr	r0, [r4, #0]
   1d7d6:	46ba      	mov	sl, r7
   1d7d8:	465a      	mov	r2, fp
   1d7da:	4649      	mov	r1, r9
   1d7dc:	f000 fdaa 	bl	1e334 <memmove>
   1d7e0:	68a2      	ldr	r2, [r4, #8]
   1d7e2:	6823      	ldr	r3, [r4, #0]
   1d7e4:	eba2 0208 	sub.w	r2, r2, r8
   1d7e8:	445b      	add	r3, fp
   1d7ea:	60a2      	str	r2, [r4, #8]
   1d7ec:	6023      	str	r3, [r4, #0]
   1d7ee:	9a01      	ldr	r2, [sp, #4]
   1d7f0:	6893      	ldr	r3, [r2, #8]
   1d7f2:	eba3 030a 	sub.w	r3, r3, sl
   1d7f6:	44d1      	add	r9, sl
   1d7f8:	eba7 070a 	sub.w	r7, r7, sl
   1d7fc:	6093      	str	r3, [r2, #8]
   1d7fe:	2b00      	cmp	r3, #0
   1d800:	d0c5      	beq.n	1d78e <__sfvwrite_r+0x5e>
   1d802:	89a3      	ldrh	r3, [r4, #12]
   1d804:	2f00      	cmp	r7, #0
   1d806:	d1d8      	bne.n	1d7ba <__sfvwrite_r+0x8a>
   1d808:	f8d5 9000 	ldr.w	r9, [r5]
   1d80c:	686f      	ldr	r7, [r5, #4]
   1d80e:	3508      	adds	r5, #8
   1d810:	e7d2      	b.n	1d7b8 <__sfvwrite_r+0x88>
   1d812:	f8d5 9000 	ldr.w	r9, [r5]
   1d816:	f8d5 8004 	ldr.w	r8, [r5, #4]
   1d81a:	3508      	adds	r5, #8
   1d81c:	e79f      	b.n	1d75e <__sfvwrite_r+0x2e>
   1d81e:	2000      	movs	r0, #0
   1d820:	4770      	bx	lr
   1d822:	4621      	mov	r1, r4
   1d824:	9800      	ldr	r0, [sp, #0]
   1d826:	f003 fecd 	bl	215c4 <_fflush_r>
   1d82a:	b370      	cbz	r0, 1d88a <__sfvwrite_r+0x15a>
   1d82c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   1d830:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   1d834:	f04f 30ff 	mov.w	r0, #4294967295
   1d838:	81a3      	strh	r3, [r4, #12]
   1d83a:	b003      	add	sp, #12
   1d83c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1d840:	4681      	mov	r9, r0
   1d842:	4633      	mov	r3, r6
   1d844:	464e      	mov	r6, r9
   1d846:	46a8      	mov	r8, r5
   1d848:	469a      	mov	sl, r3
   1d84a:	464d      	mov	r5, r9
   1d84c:	b34e      	cbz	r6, 1d8a2 <__sfvwrite_r+0x172>
   1d84e:	b380      	cbz	r0, 1d8b2 <__sfvwrite_r+0x182>
   1d850:	6820      	ldr	r0, [r4, #0]
   1d852:	6923      	ldr	r3, [r4, #16]
   1d854:	6962      	ldr	r2, [r4, #20]
   1d856:	45b1      	cmp	r9, r6
   1d858:	46cb      	mov	fp, r9
   1d85a:	bf28      	it	cs
   1d85c:	46b3      	movcs	fp, r6
   1d85e:	4298      	cmp	r0, r3
   1d860:	465f      	mov	r7, fp
   1d862:	d904      	bls.n	1d86e <__sfvwrite_r+0x13e>
   1d864:	68a3      	ldr	r3, [r4, #8]
   1d866:	4413      	add	r3, r2
   1d868:	459b      	cmp	fp, r3
   1d86a:	f300 80a6 	bgt.w	1d9ba <__sfvwrite_r+0x28a>
   1d86e:	4593      	cmp	fp, r2
   1d870:	db4b      	blt.n	1d90a <__sfvwrite_r+0x1da>
   1d872:	4613      	mov	r3, r2
   1d874:	6a67      	ldr	r7, [r4, #36]	; 0x24
   1d876:	69e1      	ldr	r1, [r4, #28]
   1d878:	9800      	ldr	r0, [sp, #0]
   1d87a:	462a      	mov	r2, r5
   1d87c:	47b8      	blx	r7
   1d87e:	1e07      	subs	r7, r0, #0
   1d880:	ddd4      	ble.n	1d82c <__sfvwrite_r+0xfc>
   1d882:	ebb9 0907 	subs.w	r9, r9, r7
   1d886:	d0cc      	beq.n	1d822 <__sfvwrite_r+0xf2>
   1d888:	2001      	movs	r0, #1
   1d88a:	f8da 3008 	ldr.w	r3, [sl, #8]
   1d88e:	1bdb      	subs	r3, r3, r7
   1d890:	443d      	add	r5, r7
   1d892:	1bf6      	subs	r6, r6, r7
   1d894:	f8ca 3008 	str.w	r3, [sl, #8]
   1d898:	2b00      	cmp	r3, #0
   1d89a:	f43f af78 	beq.w	1d78e <__sfvwrite_r+0x5e>
   1d89e:	2e00      	cmp	r6, #0
   1d8a0:	d1d5      	bne.n	1d84e <__sfvwrite_r+0x11e>
   1d8a2:	f108 0308 	add.w	r3, r8, #8
   1d8a6:	e913 0060 	ldmdb	r3, {r5, r6}
   1d8aa:	4698      	mov	r8, r3
   1d8ac:	3308      	adds	r3, #8
   1d8ae:	2e00      	cmp	r6, #0
   1d8b0:	d0f9      	beq.n	1d8a6 <__sfvwrite_r+0x176>
   1d8b2:	4632      	mov	r2, r6
   1d8b4:	210a      	movs	r1, #10
   1d8b6:	4628      	mov	r0, r5
   1d8b8:	f000 fc22 	bl	1e100 <memchr>
   1d8bc:	2800      	cmp	r0, #0
   1d8be:	f000 80a1 	beq.w	1da04 <__sfvwrite_r+0x2d4>
   1d8c2:	3001      	adds	r0, #1
   1d8c4:	eba0 0905 	sub.w	r9, r0, r5
   1d8c8:	e7c2      	b.n	1d850 <__sfvwrite_r+0x120>
   1d8ca:	6820      	ldr	r0, [r4, #0]
   1d8cc:	6923      	ldr	r3, [r4, #16]
   1d8ce:	4298      	cmp	r0, r3
   1d8d0:	d802      	bhi.n	1d8d8 <__sfvwrite_r+0x1a8>
   1d8d2:	6963      	ldr	r3, [r4, #20]
   1d8d4:	429f      	cmp	r7, r3
   1d8d6:	d25d      	bcs.n	1d994 <__sfvwrite_r+0x264>
   1d8d8:	45b8      	cmp	r8, r7
   1d8da:	bf28      	it	cs
   1d8dc:	46b8      	movcs	r8, r7
   1d8de:	4642      	mov	r2, r8
   1d8e0:	4649      	mov	r1, r9
   1d8e2:	f000 fd27 	bl	1e334 <memmove>
   1d8e6:	68a3      	ldr	r3, [r4, #8]
   1d8e8:	6822      	ldr	r2, [r4, #0]
   1d8ea:	eba3 0308 	sub.w	r3, r3, r8
   1d8ee:	4442      	add	r2, r8
   1d8f0:	60a3      	str	r3, [r4, #8]
   1d8f2:	6022      	str	r2, [r4, #0]
   1d8f4:	b10b      	cbz	r3, 1d8fa <__sfvwrite_r+0x1ca>
   1d8f6:	46c2      	mov	sl, r8
   1d8f8:	e779      	b.n	1d7ee <__sfvwrite_r+0xbe>
   1d8fa:	4621      	mov	r1, r4
   1d8fc:	9800      	ldr	r0, [sp, #0]
   1d8fe:	f003 fe61 	bl	215c4 <_fflush_r>
   1d902:	2800      	cmp	r0, #0
   1d904:	d192      	bne.n	1d82c <__sfvwrite_r+0xfc>
   1d906:	46c2      	mov	sl, r8
   1d908:	e771      	b.n	1d7ee <__sfvwrite_r+0xbe>
   1d90a:	465a      	mov	r2, fp
   1d90c:	4629      	mov	r1, r5
   1d90e:	f000 fd11 	bl	1e334 <memmove>
   1d912:	68a2      	ldr	r2, [r4, #8]
   1d914:	6823      	ldr	r3, [r4, #0]
   1d916:	eba2 020b 	sub.w	r2, r2, fp
   1d91a:	445b      	add	r3, fp
   1d91c:	60a2      	str	r2, [r4, #8]
   1d91e:	6023      	str	r3, [r4, #0]
   1d920:	e7af      	b.n	1d882 <__sfvwrite_r+0x152>
   1d922:	6820      	ldr	r0, [r4, #0]
   1d924:	46b8      	mov	r8, r7
   1d926:	46ba      	mov	sl, r7
   1d928:	46bb      	mov	fp, r7
   1d92a:	e755      	b.n	1d7d8 <__sfvwrite_r+0xa8>
   1d92c:	6962      	ldr	r2, [r4, #20]
   1d92e:	6820      	ldr	r0, [r4, #0]
   1d930:	6921      	ldr	r1, [r4, #16]
   1d932:	eb02 0842 	add.w	r8, r2, r2, lsl #1
   1d936:	eba0 0a01 	sub.w	sl, r0, r1
   1d93a:	eb08 78d8 	add.w	r8, r8, r8, lsr #31
   1d93e:	f10a 0001 	add.w	r0, sl, #1
   1d942:	ea4f 0868 	mov.w	r8, r8, asr #1
   1d946:	4438      	add	r0, r7
   1d948:	4540      	cmp	r0, r8
   1d94a:	4642      	mov	r2, r8
   1d94c:	bf84      	itt	hi
   1d94e:	4680      	movhi	r8, r0
   1d950:	4642      	movhi	r2, r8
   1d952:	055b      	lsls	r3, r3, #21
   1d954:	d544      	bpl.n	1d9e0 <__sfvwrite_r+0x2b0>
   1d956:	4611      	mov	r1, r2
   1d958:	9800      	ldr	r0, [sp, #0]
   1d95a:	f000 f907 	bl	1db6c <_malloc_r>
   1d95e:	4683      	mov	fp, r0
   1d960:	2800      	cmp	r0, #0
   1d962:	d055      	beq.n	1da10 <__sfvwrite_r+0x2e0>
   1d964:	4652      	mov	r2, sl
   1d966:	6921      	ldr	r1, [r4, #16]
   1d968:	f000 fc4a 	bl	1e200 <memcpy>
   1d96c:	89a3      	ldrh	r3, [r4, #12]
   1d96e:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
   1d972:	f043 0380 	orr.w	r3, r3, #128	; 0x80
   1d976:	81a3      	strh	r3, [r4, #12]
   1d978:	eb0b 000a 	add.w	r0, fp, sl
   1d97c:	eba8 030a 	sub.w	r3, r8, sl
   1d980:	f8c4 b010 	str.w	fp, [r4, #16]
   1d984:	f8c4 8014 	str.w	r8, [r4, #20]
   1d988:	6020      	str	r0, [r4, #0]
   1d98a:	60a3      	str	r3, [r4, #8]
   1d98c:	46b8      	mov	r8, r7
   1d98e:	46ba      	mov	sl, r7
   1d990:	46bb      	mov	fp, r7
   1d992:	e721      	b.n	1d7d8 <__sfvwrite_r+0xa8>
   1d994:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
   1d998:	42b9      	cmp	r1, r7
   1d99a:	bf28      	it	cs
   1d99c:	4639      	movcs	r1, r7
   1d99e:	464a      	mov	r2, r9
   1d9a0:	fb91 f1f3 	sdiv	r1, r1, r3
   1d9a4:	9800      	ldr	r0, [sp, #0]
   1d9a6:	6a66      	ldr	r6, [r4, #36]	; 0x24
   1d9a8:	fb03 f301 	mul.w	r3, r3, r1
   1d9ac:	69e1      	ldr	r1, [r4, #28]
   1d9ae:	47b0      	blx	r6
   1d9b0:	f1b0 0a00 	subs.w	sl, r0, #0
   1d9b4:	f73f af1b 	bgt.w	1d7ee <__sfvwrite_r+0xbe>
   1d9b8:	e738      	b.n	1d82c <__sfvwrite_r+0xfc>
   1d9ba:	461a      	mov	r2, r3
   1d9bc:	4629      	mov	r1, r5
   1d9be:	9301      	str	r3, [sp, #4]
   1d9c0:	f000 fcb8 	bl	1e334 <memmove>
   1d9c4:	6822      	ldr	r2, [r4, #0]
   1d9c6:	9b01      	ldr	r3, [sp, #4]
   1d9c8:	9800      	ldr	r0, [sp, #0]
   1d9ca:	441a      	add	r2, r3
   1d9cc:	6022      	str	r2, [r4, #0]
   1d9ce:	4621      	mov	r1, r4
   1d9d0:	f003 fdf8 	bl	215c4 <_fflush_r>
   1d9d4:	9b01      	ldr	r3, [sp, #4]
   1d9d6:	2800      	cmp	r0, #0
   1d9d8:	f47f af28 	bne.w	1d82c <__sfvwrite_r+0xfc>
   1d9dc:	461f      	mov	r7, r3
   1d9de:	e750      	b.n	1d882 <__sfvwrite_r+0x152>
   1d9e0:	9800      	ldr	r0, [sp, #0]
   1d9e2:	f000 fda5 	bl	1e530 <_realloc_r>
   1d9e6:	4683      	mov	fp, r0
   1d9e8:	2800      	cmp	r0, #0
   1d9ea:	d1c5      	bne.n	1d978 <__sfvwrite_r+0x248>
   1d9ec:	9d00      	ldr	r5, [sp, #0]
   1d9ee:	6921      	ldr	r1, [r4, #16]
   1d9f0:	4628      	mov	r0, r5
   1d9f2:	f003 fee1 	bl	217b8 <_free_r>
   1d9f6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   1d9fa:	220c      	movs	r2, #12
   1d9fc:	f023 0380 	bic.w	r3, r3, #128	; 0x80
   1da00:	602a      	str	r2, [r5, #0]
   1da02:	e715      	b.n	1d830 <__sfvwrite_r+0x100>
   1da04:	f106 0901 	add.w	r9, r6, #1
   1da08:	e722      	b.n	1d850 <__sfvwrite_r+0x120>
   1da0a:	f04f 30ff 	mov.w	r0, #4294967295
   1da0e:	e6bf      	b.n	1d790 <__sfvwrite_r+0x60>
   1da10:	9a00      	ldr	r2, [sp, #0]
   1da12:	230c      	movs	r3, #12
   1da14:	6013      	str	r3, [r2, #0]
   1da16:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   1da1a:	e709      	b.n	1d830 <__sfvwrite_r+0x100>
   1da1c:	7ffffc00 	.word	0x7ffffc00

0001da20 <_fwrite_r>:
   1da20:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1da24:	b086      	sub	sp, #24
   1da26:	fb02 f503 	mul.w	r5, r2, r3
   1da2a:	4690      	mov	r8, r2
   1da2c:	461e      	mov	r6, r3
   1da2e:	aa01      	add	r2, sp, #4
   1da30:	2301      	movs	r3, #1
   1da32:	9101      	str	r1, [sp, #4]
   1da34:	9502      	str	r5, [sp, #8]
   1da36:	9505      	str	r5, [sp, #20]
   1da38:	9203      	str	r2, [sp, #12]
   1da3a:	9304      	str	r3, [sp, #16]
   1da3c:	9c0c      	ldr	r4, [sp, #48]	; 0x30
   1da3e:	4607      	mov	r7, r0
   1da40:	b110      	cbz	r0, 1da48 <_fwrite_r+0x28>
   1da42:	6b83      	ldr	r3, [r0, #56]	; 0x38
   1da44:	2b00      	cmp	r3, #0
   1da46:	d031      	beq.n	1daac <_fwrite_r+0x8c>
   1da48:	6e63      	ldr	r3, [r4, #100]	; 0x64
   1da4a:	f013 0f01 	tst.w	r3, #1
   1da4e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   1da52:	b29a      	uxth	r2, r3
   1da54:	d101      	bne.n	1da5a <_fwrite_r+0x3a>
   1da56:	0591      	lsls	r1, r2, #22
   1da58:	d52b      	bpl.n	1dab2 <_fwrite_r+0x92>
   1da5a:	0492      	lsls	r2, r2, #18
   1da5c:	d406      	bmi.n	1da6c <_fwrite_r+0x4c>
   1da5e:	6e62      	ldr	r2, [r4, #100]	; 0x64
   1da60:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
   1da64:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
   1da68:	81a3      	strh	r3, [r4, #12]
   1da6a:	6662      	str	r2, [r4, #100]	; 0x64
   1da6c:	4638      	mov	r0, r7
   1da6e:	aa03      	add	r2, sp, #12
   1da70:	4621      	mov	r1, r4
   1da72:	f7ff fe5d 	bl	1d730 <__sfvwrite_r>
   1da76:	6e63      	ldr	r3, [r4, #100]	; 0x64
   1da78:	b940      	cbnz	r0, 1da8c <_fwrite_r+0x6c>
   1da7a:	07d8      	lsls	r0, r3, #31
   1da7c:	d402      	bmi.n	1da84 <_fwrite_r+0x64>
   1da7e:	89a3      	ldrh	r3, [r4, #12]
   1da80:	0599      	lsls	r1, r3, #22
   1da82:	d51d      	bpl.n	1dac0 <_fwrite_r+0xa0>
   1da84:	4630      	mov	r0, r6
   1da86:	b006      	add	sp, #24
   1da88:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   1da8c:	07da      	lsls	r2, r3, #31
   1da8e:	d506      	bpl.n	1da9e <_fwrite_r+0x7e>
   1da90:	9805      	ldr	r0, [sp, #20]
   1da92:	1a2d      	subs	r5, r5, r0
   1da94:	fbb5 f0f8 	udiv	r0, r5, r8
   1da98:	b006      	add	sp, #24
   1da9a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   1da9e:	89a3      	ldrh	r3, [r4, #12]
   1daa0:	059b      	lsls	r3, r3, #22
   1daa2:	d4f5      	bmi.n	1da90 <_fwrite_r+0x70>
   1daa4:	6da0      	ldr	r0, [r4, #88]	; 0x58
   1daa6:	f000 f84f 	bl	1db48 <__retarget_lock_release_recursive>
   1daaa:	e7f1      	b.n	1da90 <_fwrite_r+0x70>
   1daac:	f003 fde2 	bl	21674 <__sinit>
   1dab0:	e7ca      	b.n	1da48 <_fwrite_r+0x28>
   1dab2:	6da0      	ldr	r0, [r4, #88]	; 0x58
   1dab4:	f000 f846 	bl	1db44 <__retarget_lock_acquire_recursive>
   1dab8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   1dabc:	b29a      	uxth	r2, r3
   1dabe:	e7cc      	b.n	1da5a <_fwrite_r+0x3a>
   1dac0:	6da0      	ldr	r0, [r4, #88]	; 0x58
   1dac2:	f000 f841 	bl	1db48 <__retarget_lock_release_recursive>
   1dac6:	4630      	mov	r0, r6
   1dac8:	e7e6      	b.n	1da98 <_fwrite_r+0x78>
   1daca:	bf00      	nop

0001dacc <fwrite>:
   1dacc:	b510      	push	{r4, lr}
   1dace:	b082      	sub	sp, #8
   1dad0:	4c05      	ldr	r4, [pc, #20]	; (1dae8 <fwrite+0x1c>)
   1dad2:	9300      	str	r3, [sp, #0]
   1dad4:	6824      	ldr	r4, [r4, #0]
   1dad6:	4613      	mov	r3, r2
   1dad8:	460a      	mov	r2, r1
   1dada:	4601      	mov	r1, r0
   1dadc:	4620      	mov	r0, r4
   1dade:	f7ff ff9f 	bl	1da20 <_fwrite_r>
   1dae2:	b002      	add	sp, #8
   1dae4:	bd10      	pop	{r4, pc}
   1dae6:	bf00      	nop
   1dae8:	200000f8 	.word	0x200000f8

0001daec <__libc_init_array>:
   1daec:	b570      	push	{r4, r5, r6, lr}
   1daee:	4e0f      	ldr	r6, [pc, #60]	; (1db2c <__libc_init_array+0x40>)
   1daf0:	4d0f      	ldr	r5, [pc, #60]	; (1db30 <__libc_init_array+0x44>)
   1daf2:	1b76      	subs	r6, r6, r5
   1daf4:	10b6      	asrs	r6, r6, #2
   1daf6:	bf18      	it	ne
   1daf8:	2400      	movne	r4, #0
   1dafa:	d005      	beq.n	1db08 <__libc_init_array+0x1c>
   1dafc:	3401      	adds	r4, #1
   1dafe:	f855 3b04 	ldr.w	r3, [r5], #4
   1db02:	4798      	blx	r3
   1db04:	42a6      	cmp	r6, r4
   1db06:	d1f9      	bne.n	1dafc <__libc_init_array+0x10>
   1db08:	4e0a      	ldr	r6, [pc, #40]	; (1db34 <__libc_init_array+0x48>)
   1db0a:	4d0b      	ldr	r5, [pc, #44]	; (1db38 <__libc_init_array+0x4c>)
   1db0c:	1b76      	subs	r6, r6, r5
   1db0e:	f004 feab 	bl	22868 <_init>
   1db12:	10b6      	asrs	r6, r6, #2
   1db14:	bf18      	it	ne
   1db16:	2400      	movne	r4, #0
   1db18:	d006      	beq.n	1db28 <__libc_init_array+0x3c>
   1db1a:	3401      	adds	r4, #1
   1db1c:	f855 3b04 	ldr.w	r3, [r5], #4
   1db20:	4798      	blx	r3
   1db22:	42a6      	cmp	r6, r4
   1db24:	d1f9      	bne.n	1db1a <__libc_init_array+0x2e>
   1db26:	bd70      	pop	{r4, r5, r6, pc}
   1db28:	bd70      	pop	{r4, r5, r6, pc}
   1db2a:	bf00      	nop
   1db2c:	00022880 	.word	0x00022880
   1db30:	00022880 	.word	0x00022880
   1db34:	000228b8 	.word	0x000228b8
   1db38:	00022880 	.word	0x00022880

0001db3c <__retarget_lock_init_recursive>:
   1db3c:	4770      	bx	lr
   1db3e:	bf00      	nop

0001db40 <__retarget_lock_close_recursive>:
   1db40:	4770      	bx	lr
   1db42:	bf00      	nop

0001db44 <__retarget_lock_acquire_recursive>:
   1db44:	4770      	bx	lr
   1db46:	bf00      	nop

0001db48 <__retarget_lock_release_recursive>:
   1db48:	4770      	bx	lr
   1db4a:	bf00      	nop

0001db4c <malloc>:
   1db4c:	4b02      	ldr	r3, [pc, #8]	; (1db58 <malloc+0xc>)
   1db4e:	4601      	mov	r1, r0
   1db50:	6818      	ldr	r0, [r3, #0]
   1db52:	f000 b80b 	b.w	1db6c <_malloc_r>
   1db56:	bf00      	nop
   1db58:	200000f8 	.word	0x200000f8

0001db5c <free>:
   1db5c:	4b02      	ldr	r3, [pc, #8]	; (1db68 <free+0xc>)
   1db5e:	4601      	mov	r1, r0
   1db60:	6818      	ldr	r0, [r3, #0]
   1db62:	f003 be29 	b.w	217b8 <_free_r>
   1db66:	bf00      	nop
   1db68:	200000f8 	.word	0x200000f8

0001db6c <_malloc_r>:
   1db6c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1db70:	f101 060b 	add.w	r6, r1, #11
   1db74:	2e16      	cmp	r6, #22
   1db76:	b083      	sub	sp, #12
   1db78:	4605      	mov	r5, r0
   1db7a:	f240 809e 	bls.w	1dcba <_malloc_r+0x14e>
   1db7e:	f036 0607 	bics.w	r6, r6, #7
   1db82:	f100 80bd 	bmi.w	1dd00 <_malloc_r+0x194>
   1db86:	42b1      	cmp	r1, r6
   1db88:	f200 80ba 	bhi.w	1dd00 <_malloc_r+0x194>
   1db8c:	f000 fc84 	bl	1e498 <__malloc_lock>
   1db90:	f5b6 7ffc 	cmp.w	r6, #504	; 0x1f8
   1db94:	f0c0 8293 	bcc.w	1e0be <_malloc_r+0x552>
   1db98:	0a73      	lsrs	r3, r6, #9
   1db9a:	f000 80b8 	beq.w	1dd0e <_malloc_r+0x1a2>
   1db9e:	2b04      	cmp	r3, #4
   1dba0:	f200 8179 	bhi.w	1de96 <_malloc_r+0x32a>
   1dba4:	09b3      	lsrs	r3, r6, #6
   1dba6:	f103 0039 	add.w	r0, r3, #57	; 0x39
   1dbaa:	f103 0e38 	add.w	lr, r3, #56	; 0x38
   1dbae:	00c3      	lsls	r3, r0, #3
   1dbb0:	4fbf      	ldr	r7, [pc, #764]	; (1deb0 <_malloc_r+0x344>)
   1dbb2:	443b      	add	r3, r7
   1dbb4:	f1a3 0108 	sub.w	r1, r3, #8
   1dbb8:	685c      	ldr	r4, [r3, #4]
   1dbba:	42a1      	cmp	r1, r4
   1dbbc:	d106      	bne.n	1dbcc <_malloc_r+0x60>
   1dbbe:	e00c      	b.n	1dbda <_malloc_r+0x6e>
   1dbc0:	2a00      	cmp	r2, #0
   1dbc2:	f280 80aa 	bge.w	1dd1a <_malloc_r+0x1ae>
   1dbc6:	68e4      	ldr	r4, [r4, #12]
   1dbc8:	42a1      	cmp	r1, r4
   1dbca:	d006      	beq.n	1dbda <_malloc_r+0x6e>
   1dbcc:	6863      	ldr	r3, [r4, #4]
   1dbce:	f023 0303 	bic.w	r3, r3, #3
   1dbd2:	1b9a      	subs	r2, r3, r6
   1dbd4:	2a0f      	cmp	r2, #15
   1dbd6:	ddf3      	ble.n	1dbc0 <_malloc_r+0x54>
   1dbd8:	4670      	mov	r0, lr
   1dbda:	693c      	ldr	r4, [r7, #16]
   1dbdc:	f8df e2e4 	ldr.w	lr, [pc, #740]	; 1dec4 <_malloc_r+0x358>
   1dbe0:	4574      	cmp	r4, lr
   1dbe2:	f000 81ab 	beq.w	1df3c <_malloc_r+0x3d0>
   1dbe6:	6863      	ldr	r3, [r4, #4]
   1dbe8:	f023 0303 	bic.w	r3, r3, #3
   1dbec:	1b9a      	subs	r2, r3, r6
   1dbee:	2a0f      	cmp	r2, #15
   1dbf0:	f300 8190 	bgt.w	1df14 <_malloc_r+0x3a8>
   1dbf4:	2a00      	cmp	r2, #0
   1dbf6:	f8c7 e014 	str.w	lr, [r7, #20]
   1dbfa:	f8c7 e010 	str.w	lr, [r7, #16]
   1dbfe:	f280 809d 	bge.w	1dd3c <_malloc_r+0x1d0>
   1dc02:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
   1dc06:	f080 8161 	bcs.w	1decc <_malloc_r+0x360>
   1dc0a:	08db      	lsrs	r3, r3, #3
   1dc0c:	f103 0c01 	add.w	ip, r3, #1
   1dc10:	1099      	asrs	r1, r3, #2
   1dc12:	687a      	ldr	r2, [r7, #4]
   1dc14:	f857 803c 	ldr.w	r8, [r7, ip, lsl #3]
   1dc18:	f8c4 8008 	str.w	r8, [r4, #8]
   1dc1c:	2301      	movs	r3, #1
   1dc1e:	408b      	lsls	r3, r1
   1dc20:	eb07 01cc 	add.w	r1, r7, ip, lsl #3
   1dc24:	4313      	orrs	r3, r2
   1dc26:	3908      	subs	r1, #8
   1dc28:	60e1      	str	r1, [r4, #12]
   1dc2a:	607b      	str	r3, [r7, #4]
   1dc2c:	f847 403c 	str.w	r4, [r7, ip, lsl #3]
   1dc30:	f8c8 400c 	str.w	r4, [r8, #12]
   1dc34:	1082      	asrs	r2, r0, #2
   1dc36:	2401      	movs	r4, #1
   1dc38:	4094      	lsls	r4, r2
   1dc3a:	429c      	cmp	r4, r3
   1dc3c:	f200 808b 	bhi.w	1dd56 <_malloc_r+0x1ea>
   1dc40:	421c      	tst	r4, r3
   1dc42:	d106      	bne.n	1dc52 <_malloc_r+0xe6>
   1dc44:	f020 0003 	bic.w	r0, r0, #3
   1dc48:	0064      	lsls	r4, r4, #1
   1dc4a:	421c      	tst	r4, r3
   1dc4c:	f100 0004 	add.w	r0, r0, #4
   1dc50:	d0fa      	beq.n	1dc48 <_malloc_r+0xdc>
   1dc52:	eb07 09c0 	add.w	r9, r7, r0, lsl #3
   1dc56:	46cc      	mov	ip, r9
   1dc58:	4680      	mov	r8, r0
   1dc5a:	f8dc 300c 	ldr.w	r3, [ip, #12]
   1dc5e:	459c      	cmp	ip, r3
   1dc60:	d107      	bne.n	1dc72 <_malloc_r+0x106>
   1dc62:	e16d      	b.n	1df40 <_malloc_r+0x3d4>
   1dc64:	2a00      	cmp	r2, #0
   1dc66:	f280 817b 	bge.w	1df60 <_malloc_r+0x3f4>
   1dc6a:	68db      	ldr	r3, [r3, #12]
   1dc6c:	459c      	cmp	ip, r3
   1dc6e:	f000 8167 	beq.w	1df40 <_malloc_r+0x3d4>
   1dc72:	6859      	ldr	r1, [r3, #4]
   1dc74:	f021 0103 	bic.w	r1, r1, #3
   1dc78:	1b8a      	subs	r2, r1, r6
   1dc7a:	2a0f      	cmp	r2, #15
   1dc7c:	ddf2      	ble.n	1dc64 <_malloc_r+0xf8>
   1dc7e:	f8d3 c00c 	ldr.w	ip, [r3, #12]
   1dc82:	f8d3 8008 	ldr.w	r8, [r3, #8]
   1dc86:	9300      	str	r3, [sp, #0]
   1dc88:	199c      	adds	r4, r3, r6
   1dc8a:	4628      	mov	r0, r5
   1dc8c:	f046 0601 	orr.w	r6, r6, #1
   1dc90:	f042 0501 	orr.w	r5, r2, #1
   1dc94:	605e      	str	r6, [r3, #4]
   1dc96:	f8c8 c00c 	str.w	ip, [r8, #12]
   1dc9a:	f8cc 8008 	str.w	r8, [ip, #8]
   1dc9e:	617c      	str	r4, [r7, #20]
   1dca0:	613c      	str	r4, [r7, #16]
   1dca2:	f8c4 e00c 	str.w	lr, [r4, #12]
   1dca6:	f8c4 e008 	str.w	lr, [r4, #8]
   1dcaa:	6065      	str	r5, [r4, #4]
   1dcac:	505a      	str	r2, [r3, r1]
   1dcae:	f000 fbf9 	bl	1e4a4 <__malloc_unlock>
   1dcb2:	9b00      	ldr	r3, [sp, #0]
   1dcb4:	f103 0408 	add.w	r4, r3, #8
   1dcb8:	e01e      	b.n	1dcf8 <_malloc_r+0x18c>
   1dcba:	2910      	cmp	r1, #16
   1dcbc:	d820      	bhi.n	1dd00 <_malloc_r+0x194>
   1dcbe:	f000 fbeb 	bl	1e498 <__malloc_lock>
   1dcc2:	2610      	movs	r6, #16
   1dcc4:	2318      	movs	r3, #24
   1dcc6:	2002      	movs	r0, #2
   1dcc8:	4f79      	ldr	r7, [pc, #484]	; (1deb0 <_malloc_r+0x344>)
   1dcca:	443b      	add	r3, r7
   1dccc:	f1a3 0208 	sub.w	r2, r3, #8
   1dcd0:	685c      	ldr	r4, [r3, #4]
   1dcd2:	4294      	cmp	r4, r2
   1dcd4:	f000 813d 	beq.w	1df52 <_malloc_r+0x3e6>
   1dcd8:	6863      	ldr	r3, [r4, #4]
   1dcda:	68e1      	ldr	r1, [r4, #12]
   1dcdc:	68a6      	ldr	r6, [r4, #8]
   1dcde:	f023 0303 	bic.w	r3, r3, #3
   1dce2:	4423      	add	r3, r4
   1dce4:	4628      	mov	r0, r5
   1dce6:	685a      	ldr	r2, [r3, #4]
   1dce8:	60f1      	str	r1, [r6, #12]
   1dcea:	f042 0201 	orr.w	r2, r2, #1
   1dcee:	608e      	str	r6, [r1, #8]
   1dcf0:	605a      	str	r2, [r3, #4]
   1dcf2:	f000 fbd7 	bl	1e4a4 <__malloc_unlock>
   1dcf6:	3408      	adds	r4, #8
   1dcf8:	4620      	mov	r0, r4
   1dcfa:	b003      	add	sp, #12
   1dcfc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1dd00:	2400      	movs	r4, #0
   1dd02:	230c      	movs	r3, #12
   1dd04:	4620      	mov	r0, r4
   1dd06:	602b      	str	r3, [r5, #0]
   1dd08:	b003      	add	sp, #12
   1dd0a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1dd0e:	2040      	movs	r0, #64	; 0x40
   1dd10:	f44f 7300 	mov.w	r3, #512	; 0x200
   1dd14:	f04f 0e3f 	mov.w	lr, #63	; 0x3f
   1dd18:	e74a      	b.n	1dbb0 <_malloc_r+0x44>
   1dd1a:	4423      	add	r3, r4
   1dd1c:	68e1      	ldr	r1, [r4, #12]
   1dd1e:	685a      	ldr	r2, [r3, #4]
   1dd20:	68a6      	ldr	r6, [r4, #8]
   1dd22:	f042 0201 	orr.w	r2, r2, #1
   1dd26:	60f1      	str	r1, [r6, #12]
   1dd28:	4628      	mov	r0, r5
   1dd2a:	608e      	str	r6, [r1, #8]
   1dd2c:	605a      	str	r2, [r3, #4]
   1dd2e:	f000 fbb9 	bl	1e4a4 <__malloc_unlock>
   1dd32:	3408      	adds	r4, #8
   1dd34:	4620      	mov	r0, r4
   1dd36:	b003      	add	sp, #12
   1dd38:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1dd3c:	4423      	add	r3, r4
   1dd3e:	4628      	mov	r0, r5
   1dd40:	685a      	ldr	r2, [r3, #4]
   1dd42:	f042 0201 	orr.w	r2, r2, #1
   1dd46:	605a      	str	r2, [r3, #4]
   1dd48:	f000 fbac 	bl	1e4a4 <__malloc_unlock>
   1dd4c:	3408      	adds	r4, #8
   1dd4e:	4620      	mov	r0, r4
   1dd50:	b003      	add	sp, #12
   1dd52:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1dd56:	68bc      	ldr	r4, [r7, #8]
   1dd58:	6863      	ldr	r3, [r4, #4]
   1dd5a:	f023 0803 	bic.w	r8, r3, #3
   1dd5e:	45b0      	cmp	r8, r6
   1dd60:	d304      	bcc.n	1dd6c <_malloc_r+0x200>
   1dd62:	eba8 0306 	sub.w	r3, r8, r6
   1dd66:	2b0f      	cmp	r3, #15
   1dd68:	f300 8085 	bgt.w	1de76 <_malloc_r+0x30a>
   1dd6c:	f8df 9158 	ldr.w	r9, [pc, #344]	; 1dec8 <_malloc_r+0x35c>
   1dd70:	4b50      	ldr	r3, [pc, #320]	; (1deb4 <_malloc_r+0x348>)
   1dd72:	f8d9 2000 	ldr.w	r2, [r9]
   1dd76:	681b      	ldr	r3, [r3, #0]
   1dd78:	3201      	adds	r2, #1
   1dd7a:	4433      	add	r3, r6
   1dd7c:	eb04 0a08 	add.w	sl, r4, r8
   1dd80:	f000 8155 	beq.w	1e02e <_malloc_r+0x4c2>
   1dd84:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
   1dd88:	330f      	adds	r3, #15
   1dd8a:	f423 6b7f 	bic.w	fp, r3, #4080	; 0xff0
   1dd8e:	f02b 0b0f 	bic.w	fp, fp, #15
   1dd92:	4659      	mov	r1, fp
   1dd94:	4628      	mov	r0, r5
   1dd96:	f000 fd71 	bl	1e87c <_sbrk_r>
   1dd9a:	1c41      	adds	r1, r0, #1
   1dd9c:	4602      	mov	r2, r0
   1dd9e:	f000 80fc 	beq.w	1df9a <_malloc_r+0x42e>
   1dda2:	4582      	cmp	sl, r0
   1dda4:	f200 80f7 	bhi.w	1df96 <_malloc_r+0x42a>
   1dda8:	4b43      	ldr	r3, [pc, #268]	; (1deb8 <_malloc_r+0x34c>)
   1ddaa:	6819      	ldr	r1, [r3, #0]
   1ddac:	4459      	add	r1, fp
   1ddae:	6019      	str	r1, [r3, #0]
   1ddb0:	f000 814d 	beq.w	1e04e <_malloc_r+0x4e2>
   1ddb4:	f8d9 0000 	ldr.w	r0, [r9]
   1ddb8:	3001      	adds	r0, #1
   1ddba:	bf1b      	ittet	ne
   1ddbc:	eba2 0a0a 	subne.w	sl, r2, sl
   1ddc0:	4451      	addne	r1, sl
   1ddc2:	f8c9 2000 	streq.w	r2, [r9]
   1ddc6:	6019      	strne	r1, [r3, #0]
   1ddc8:	f012 0107 	ands.w	r1, r2, #7
   1ddcc:	f000 8115 	beq.w	1dffa <_malloc_r+0x48e>
   1ddd0:	f1c1 0008 	rsb	r0, r1, #8
   1ddd4:	f5c1 5180 	rsb	r1, r1, #4096	; 0x1000
   1ddd8:	4402      	add	r2, r0
   1ddda:	3108      	adds	r1, #8
   1dddc:	eb02 090b 	add.w	r9, r2, fp
   1dde0:	f3c9 090b 	ubfx	r9, r9, #0, #12
   1dde4:	eba1 0909 	sub.w	r9, r1, r9
   1dde8:	4649      	mov	r1, r9
   1ddea:	4628      	mov	r0, r5
   1ddec:	9301      	str	r3, [sp, #4]
   1ddee:	9200      	str	r2, [sp, #0]
   1ddf0:	f000 fd44 	bl	1e87c <_sbrk_r>
   1ddf4:	1c43      	adds	r3, r0, #1
   1ddf6:	e89d 000c 	ldmia.w	sp, {r2, r3}
   1ddfa:	f000 8143 	beq.w	1e084 <_malloc_r+0x518>
   1ddfe:	1a80      	subs	r0, r0, r2
   1de00:	4448      	add	r0, r9
   1de02:	f040 0001 	orr.w	r0, r0, #1
   1de06:	6819      	ldr	r1, [r3, #0]
   1de08:	60ba      	str	r2, [r7, #8]
   1de0a:	4449      	add	r1, r9
   1de0c:	42bc      	cmp	r4, r7
   1de0e:	6050      	str	r0, [r2, #4]
   1de10:	6019      	str	r1, [r3, #0]
   1de12:	d017      	beq.n	1de44 <_malloc_r+0x2d8>
   1de14:	f1b8 0f0f 	cmp.w	r8, #15
   1de18:	f240 80fb 	bls.w	1e012 <_malloc_r+0x4a6>
   1de1c:	6860      	ldr	r0, [r4, #4]
   1de1e:	f1a8 020c 	sub.w	r2, r8, #12
   1de22:	f022 0207 	bic.w	r2, r2, #7
   1de26:	eb04 0e02 	add.w	lr, r4, r2
   1de2a:	f000 0001 	and.w	r0, r0, #1
   1de2e:	f04f 0c05 	mov.w	ip, #5
   1de32:	4310      	orrs	r0, r2
   1de34:	2a0f      	cmp	r2, #15
   1de36:	6060      	str	r0, [r4, #4]
   1de38:	f8ce c004 	str.w	ip, [lr, #4]
   1de3c:	f8ce c008 	str.w	ip, [lr, #8]
   1de40:	f200 8117 	bhi.w	1e072 <_malloc_r+0x506>
   1de44:	4b1d      	ldr	r3, [pc, #116]	; (1debc <_malloc_r+0x350>)
   1de46:	68bc      	ldr	r4, [r7, #8]
   1de48:	681a      	ldr	r2, [r3, #0]
   1de4a:	4291      	cmp	r1, r2
   1de4c:	bf88      	it	hi
   1de4e:	6019      	strhi	r1, [r3, #0]
   1de50:	4b1b      	ldr	r3, [pc, #108]	; (1dec0 <_malloc_r+0x354>)
   1de52:	681a      	ldr	r2, [r3, #0]
   1de54:	4291      	cmp	r1, r2
   1de56:	6862      	ldr	r2, [r4, #4]
   1de58:	bf88      	it	hi
   1de5a:	6019      	strhi	r1, [r3, #0]
   1de5c:	f022 0203 	bic.w	r2, r2, #3
   1de60:	4296      	cmp	r6, r2
   1de62:	eba2 0306 	sub.w	r3, r2, r6
   1de66:	d801      	bhi.n	1de6c <_malloc_r+0x300>
   1de68:	2b0f      	cmp	r3, #15
   1de6a:	dc04      	bgt.n	1de76 <_malloc_r+0x30a>
   1de6c:	4628      	mov	r0, r5
   1de6e:	f000 fb19 	bl	1e4a4 <__malloc_unlock>
   1de72:	2400      	movs	r4, #0
   1de74:	e740      	b.n	1dcf8 <_malloc_r+0x18c>
   1de76:	19a2      	adds	r2, r4, r6
   1de78:	f043 0301 	orr.w	r3, r3, #1
   1de7c:	f046 0601 	orr.w	r6, r6, #1
   1de80:	6066      	str	r6, [r4, #4]
   1de82:	4628      	mov	r0, r5
   1de84:	60ba      	str	r2, [r7, #8]
   1de86:	6053      	str	r3, [r2, #4]
   1de88:	f000 fb0c 	bl	1e4a4 <__malloc_unlock>
   1de8c:	3408      	adds	r4, #8
   1de8e:	4620      	mov	r0, r4
   1de90:	b003      	add	sp, #12
   1de92:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1de96:	2b14      	cmp	r3, #20
   1de98:	d971      	bls.n	1df7e <_malloc_r+0x412>
   1de9a:	2b54      	cmp	r3, #84	; 0x54
   1de9c:	f200 80a3 	bhi.w	1dfe6 <_malloc_r+0x47a>
   1dea0:	0b33      	lsrs	r3, r6, #12
   1dea2:	f103 006f 	add.w	r0, r3, #111	; 0x6f
   1dea6:	f103 0e6e 	add.w	lr, r3, #110	; 0x6e
   1deaa:	00c3      	lsls	r3, r0, #3
   1deac:	e680      	b.n	1dbb0 <_malloc_r+0x44>
   1deae:	bf00      	nop
   1deb0:	20000694 	.word	0x20000694
   1deb4:	200022c4 	.word	0x200022c4
   1deb8:	20002294 	.word	0x20002294
   1debc:	200022bc 	.word	0x200022bc
   1dec0:	200022c0 	.word	0x200022c0
   1dec4:	2000069c 	.word	0x2000069c
   1dec8:	20000a9c 	.word	0x20000a9c
   1decc:	0a5a      	lsrs	r2, r3, #9
   1dece:	2a04      	cmp	r2, #4
   1ded0:	d95b      	bls.n	1df8a <_malloc_r+0x41e>
   1ded2:	2a14      	cmp	r2, #20
   1ded4:	f200 80ae 	bhi.w	1e034 <_malloc_r+0x4c8>
   1ded8:	f102 015c 	add.w	r1, r2, #92	; 0x5c
   1dedc:	00c9      	lsls	r1, r1, #3
   1dede:	325b      	adds	r2, #91	; 0x5b
   1dee0:	eb07 0c01 	add.w	ip, r7, r1
   1dee4:	5879      	ldr	r1, [r7, r1]
   1dee6:	f1ac 0c08 	sub.w	ip, ip, #8
   1deea:	458c      	cmp	ip, r1
   1deec:	f000 8088 	beq.w	1e000 <_malloc_r+0x494>
   1def0:	684a      	ldr	r2, [r1, #4]
   1def2:	f022 0203 	bic.w	r2, r2, #3
   1def6:	4293      	cmp	r3, r2
   1def8:	d273      	bcs.n	1dfe2 <_malloc_r+0x476>
   1defa:	6889      	ldr	r1, [r1, #8]
   1defc:	458c      	cmp	ip, r1
   1defe:	d1f7      	bne.n	1def0 <_malloc_r+0x384>
   1df00:	f8dc 200c 	ldr.w	r2, [ip, #12]
   1df04:	687b      	ldr	r3, [r7, #4]
   1df06:	60e2      	str	r2, [r4, #12]
   1df08:	f8c4 c008 	str.w	ip, [r4, #8]
   1df0c:	6094      	str	r4, [r2, #8]
   1df0e:	f8cc 400c 	str.w	r4, [ip, #12]
   1df12:	e68f      	b.n	1dc34 <_malloc_r+0xc8>
   1df14:	19a1      	adds	r1, r4, r6
   1df16:	f046 0c01 	orr.w	ip, r6, #1
   1df1a:	f042 0601 	orr.w	r6, r2, #1
   1df1e:	f8c4 c004 	str.w	ip, [r4, #4]
   1df22:	4628      	mov	r0, r5
   1df24:	6179      	str	r1, [r7, #20]
   1df26:	6139      	str	r1, [r7, #16]
   1df28:	f8c1 e00c 	str.w	lr, [r1, #12]
   1df2c:	f8c1 e008 	str.w	lr, [r1, #8]
   1df30:	604e      	str	r6, [r1, #4]
   1df32:	50e2      	str	r2, [r4, r3]
   1df34:	f000 fab6 	bl	1e4a4 <__malloc_unlock>
   1df38:	3408      	adds	r4, #8
   1df3a:	e6dd      	b.n	1dcf8 <_malloc_r+0x18c>
   1df3c:	687b      	ldr	r3, [r7, #4]
   1df3e:	e679      	b.n	1dc34 <_malloc_r+0xc8>
   1df40:	f108 0801 	add.w	r8, r8, #1
   1df44:	f018 0f03 	tst.w	r8, #3
   1df48:	f10c 0c08 	add.w	ip, ip, #8
   1df4c:	f47f ae85 	bne.w	1dc5a <_malloc_r+0xee>
   1df50:	e02d      	b.n	1dfae <_malloc_r+0x442>
   1df52:	68dc      	ldr	r4, [r3, #12]
   1df54:	42a3      	cmp	r3, r4
   1df56:	bf08      	it	eq
   1df58:	3002      	addeq	r0, #2
   1df5a:	f43f ae3e 	beq.w	1dbda <_malloc_r+0x6e>
   1df5e:	e6bb      	b.n	1dcd8 <_malloc_r+0x16c>
   1df60:	4419      	add	r1, r3
   1df62:	461c      	mov	r4, r3
   1df64:	684a      	ldr	r2, [r1, #4]
   1df66:	68db      	ldr	r3, [r3, #12]
   1df68:	f854 6f08 	ldr.w	r6, [r4, #8]!
   1df6c:	f042 0201 	orr.w	r2, r2, #1
   1df70:	604a      	str	r2, [r1, #4]
   1df72:	4628      	mov	r0, r5
   1df74:	60f3      	str	r3, [r6, #12]
   1df76:	609e      	str	r6, [r3, #8]
   1df78:	f000 fa94 	bl	1e4a4 <__malloc_unlock>
   1df7c:	e6bc      	b.n	1dcf8 <_malloc_r+0x18c>
   1df7e:	f103 005c 	add.w	r0, r3, #92	; 0x5c
   1df82:	f103 0e5b 	add.w	lr, r3, #91	; 0x5b
   1df86:	00c3      	lsls	r3, r0, #3
   1df88:	e612      	b.n	1dbb0 <_malloc_r+0x44>
   1df8a:	099a      	lsrs	r2, r3, #6
   1df8c:	f102 0139 	add.w	r1, r2, #57	; 0x39
   1df90:	00c9      	lsls	r1, r1, #3
   1df92:	3238      	adds	r2, #56	; 0x38
   1df94:	e7a4      	b.n	1dee0 <_malloc_r+0x374>
   1df96:	42bc      	cmp	r4, r7
   1df98:	d054      	beq.n	1e044 <_malloc_r+0x4d8>
   1df9a:	68bc      	ldr	r4, [r7, #8]
   1df9c:	6862      	ldr	r2, [r4, #4]
   1df9e:	f022 0203 	bic.w	r2, r2, #3
   1dfa2:	e75d      	b.n	1de60 <_malloc_r+0x2f4>
   1dfa4:	f859 3908 	ldr.w	r3, [r9], #-8
   1dfa8:	4599      	cmp	r9, r3
   1dfaa:	f040 8086 	bne.w	1e0ba <_malloc_r+0x54e>
   1dfae:	f010 0f03 	tst.w	r0, #3
   1dfb2:	f100 30ff 	add.w	r0, r0, #4294967295
   1dfb6:	d1f5      	bne.n	1dfa4 <_malloc_r+0x438>
   1dfb8:	687b      	ldr	r3, [r7, #4]
   1dfba:	ea23 0304 	bic.w	r3, r3, r4
   1dfbe:	607b      	str	r3, [r7, #4]
   1dfc0:	0064      	lsls	r4, r4, #1
   1dfc2:	429c      	cmp	r4, r3
   1dfc4:	f63f aec7 	bhi.w	1dd56 <_malloc_r+0x1ea>
   1dfc8:	2c00      	cmp	r4, #0
   1dfca:	f43f aec4 	beq.w	1dd56 <_malloc_r+0x1ea>
   1dfce:	421c      	tst	r4, r3
   1dfd0:	4640      	mov	r0, r8
   1dfd2:	f47f ae3e 	bne.w	1dc52 <_malloc_r+0xe6>
   1dfd6:	0064      	lsls	r4, r4, #1
   1dfd8:	421c      	tst	r4, r3
   1dfda:	f100 0004 	add.w	r0, r0, #4
   1dfde:	d0fa      	beq.n	1dfd6 <_malloc_r+0x46a>
   1dfe0:	e637      	b.n	1dc52 <_malloc_r+0xe6>
   1dfe2:	468c      	mov	ip, r1
   1dfe4:	e78c      	b.n	1df00 <_malloc_r+0x394>
   1dfe6:	f5b3 7faa 	cmp.w	r3, #340	; 0x154
   1dfea:	d815      	bhi.n	1e018 <_malloc_r+0x4ac>
   1dfec:	0bf3      	lsrs	r3, r6, #15
   1dfee:	f103 0078 	add.w	r0, r3, #120	; 0x78
   1dff2:	f103 0e77 	add.w	lr, r3, #119	; 0x77
   1dff6:	00c3      	lsls	r3, r0, #3
   1dff8:	e5da      	b.n	1dbb0 <_malloc_r+0x44>
   1dffa:	f44f 5180 	mov.w	r1, #4096	; 0x1000
   1dffe:	e6ed      	b.n	1dddc <_malloc_r+0x270>
   1e000:	687b      	ldr	r3, [r7, #4]
   1e002:	1092      	asrs	r2, r2, #2
   1e004:	2101      	movs	r1, #1
   1e006:	fa01 f202 	lsl.w	r2, r1, r2
   1e00a:	4313      	orrs	r3, r2
   1e00c:	607b      	str	r3, [r7, #4]
   1e00e:	4662      	mov	r2, ip
   1e010:	e779      	b.n	1df06 <_malloc_r+0x39a>
   1e012:	2301      	movs	r3, #1
   1e014:	6053      	str	r3, [r2, #4]
   1e016:	e729      	b.n	1de6c <_malloc_r+0x300>
   1e018:	f240 5254 	movw	r2, #1364	; 0x554
   1e01c:	4293      	cmp	r3, r2
   1e01e:	d822      	bhi.n	1e066 <_malloc_r+0x4fa>
   1e020:	0cb3      	lsrs	r3, r6, #18
   1e022:	f103 007d 	add.w	r0, r3, #125	; 0x7d
   1e026:	f103 0e7c 	add.w	lr, r3, #124	; 0x7c
   1e02a:	00c3      	lsls	r3, r0, #3
   1e02c:	e5c0      	b.n	1dbb0 <_malloc_r+0x44>
   1e02e:	f103 0b10 	add.w	fp, r3, #16
   1e032:	e6ae      	b.n	1dd92 <_malloc_r+0x226>
   1e034:	2a54      	cmp	r2, #84	; 0x54
   1e036:	d829      	bhi.n	1e08c <_malloc_r+0x520>
   1e038:	0b1a      	lsrs	r2, r3, #12
   1e03a:	f102 016f 	add.w	r1, r2, #111	; 0x6f
   1e03e:	00c9      	lsls	r1, r1, #3
   1e040:	326e      	adds	r2, #110	; 0x6e
   1e042:	e74d      	b.n	1dee0 <_malloc_r+0x374>
   1e044:	4b20      	ldr	r3, [pc, #128]	; (1e0c8 <_malloc_r+0x55c>)
   1e046:	6819      	ldr	r1, [r3, #0]
   1e048:	4459      	add	r1, fp
   1e04a:	6019      	str	r1, [r3, #0]
   1e04c:	e6b2      	b.n	1ddb4 <_malloc_r+0x248>
   1e04e:	f3ca 000b 	ubfx	r0, sl, #0, #12
   1e052:	2800      	cmp	r0, #0
   1e054:	f47f aeae 	bne.w	1ddb4 <_malloc_r+0x248>
   1e058:	eb08 030b 	add.w	r3, r8, fp
   1e05c:	68ba      	ldr	r2, [r7, #8]
   1e05e:	f043 0301 	orr.w	r3, r3, #1
   1e062:	6053      	str	r3, [r2, #4]
   1e064:	e6ee      	b.n	1de44 <_malloc_r+0x2d8>
   1e066:	207f      	movs	r0, #127	; 0x7f
   1e068:	f44f 737e 	mov.w	r3, #1016	; 0x3f8
   1e06c:	f04f 0e7e 	mov.w	lr, #126	; 0x7e
   1e070:	e59e      	b.n	1dbb0 <_malloc_r+0x44>
   1e072:	f104 0108 	add.w	r1, r4, #8
   1e076:	4628      	mov	r0, r5
   1e078:	9300      	str	r3, [sp, #0]
   1e07a:	f003 fb9d 	bl	217b8 <_free_r>
   1e07e:	9b00      	ldr	r3, [sp, #0]
   1e080:	6819      	ldr	r1, [r3, #0]
   1e082:	e6df      	b.n	1de44 <_malloc_r+0x2d8>
   1e084:	2001      	movs	r0, #1
   1e086:	f04f 0900 	mov.w	r9, #0
   1e08a:	e6bc      	b.n	1de06 <_malloc_r+0x29a>
   1e08c:	f5b2 7faa 	cmp.w	r2, #340	; 0x154
   1e090:	d805      	bhi.n	1e09e <_malloc_r+0x532>
   1e092:	0bda      	lsrs	r2, r3, #15
   1e094:	f102 0178 	add.w	r1, r2, #120	; 0x78
   1e098:	00c9      	lsls	r1, r1, #3
   1e09a:	3277      	adds	r2, #119	; 0x77
   1e09c:	e720      	b.n	1dee0 <_malloc_r+0x374>
   1e09e:	f240 5154 	movw	r1, #1364	; 0x554
   1e0a2:	428a      	cmp	r2, r1
   1e0a4:	d805      	bhi.n	1e0b2 <_malloc_r+0x546>
   1e0a6:	0c9a      	lsrs	r2, r3, #18
   1e0a8:	f102 017d 	add.w	r1, r2, #125	; 0x7d
   1e0ac:	00c9      	lsls	r1, r1, #3
   1e0ae:	327c      	adds	r2, #124	; 0x7c
   1e0b0:	e716      	b.n	1dee0 <_malloc_r+0x374>
   1e0b2:	f44f 717e 	mov.w	r1, #1016	; 0x3f8
   1e0b6:	227e      	movs	r2, #126	; 0x7e
   1e0b8:	e712      	b.n	1dee0 <_malloc_r+0x374>
   1e0ba:	687b      	ldr	r3, [r7, #4]
   1e0bc:	e780      	b.n	1dfc0 <_malloc_r+0x454>
   1e0be:	08f0      	lsrs	r0, r6, #3
   1e0c0:	f106 0308 	add.w	r3, r6, #8
   1e0c4:	e600      	b.n	1dcc8 <_malloc_r+0x15c>
   1e0c6:	bf00      	nop
   1e0c8:	20002294 	.word	0x20002294

0001e0cc <__ascii_mbtowc>:
   1e0cc:	b082      	sub	sp, #8
   1e0ce:	b149      	cbz	r1, 1e0e4 <__ascii_mbtowc+0x18>
   1e0d0:	b15a      	cbz	r2, 1e0ea <__ascii_mbtowc+0x1e>
   1e0d2:	b16b      	cbz	r3, 1e0f0 <__ascii_mbtowc+0x24>
   1e0d4:	7813      	ldrb	r3, [r2, #0]
   1e0d6:	600b      	str	r3, [r1, #0]
   1e0d8:	7812      	ldrb	r2, [r2, #0]
   1e0da:	1c10      	adds	r0, r2, #0
   1e0dc:	bf18      	it	ne
   1e0de:	2001      	movne	r0, #1
   1e0e0:	b002      	add	sp, #8
   1e0e2:	4770      	bx	lr
   1e0e4:	a901      	add	r1, sp, #4
   1e0e6:	2a00      	cmp	r2, #0
   1e0e8:	d1f3      	bne.n	1e0d2 <__ascii_mbtowc+0x6>
   1e0ea:	4610      	mov	r0, r2
   1e0ec:	b002      	add	sp, #8
   1e0ee:	4770      	bx	lr
   1e0f0:	f06f 0001 	mvn.w	r0, #1
   1e0f4:	e7f4      	b.n	1e0e0 <__ascii_mbtowc+0x14>
   1e0f6:	bf00      	nop
	...

0001e100 <memchr>:
   1e100:	f001 01ff 	and.w	r1, r1, #255	; 0xff
   1e104:	2a10      	cmp	r2, #16
   1e106:	db2b      	blt.n	1e160 <memchr+0x60>
   1e108:	f010 0f07 	tst.w	r0, #7
   1e10c:	d008      	beq.n	1e120 <memchr+0x20>
   1e10e:	f810 3b01 	ldrb.w	r3, [r0], #1
   1e112:	3a01      	subs	r2, #1
   1e114:	428b      	cmp	r3, r1
   1e116:	d02d      	beq.n	1e174 <memchr+0x74>
   1e118:	f010 0f07 	tst.w	r0, #7
   1e11c:	b342      	cbz	r2, 1e170 <memchr+0x70>
   1e11e:	d1f6      	bne.n	1e10e <memchr+0xe>
   1e120:	b4f0      	push	{r4, r5, r6, r7}
   1e122:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
   1e126:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
   1e12a:	f022 0407 	bic.w	r4, r2, #7
   1e12e:	f07f 0700 	mvns.w	r7, #0
   1e132:	2300      	movs	r3, #0
   1e134:	e8f0 5602 	ldrd	r5, r6, [r0], #8
   1e138:	3c08      	subs	r4, #8
   1e13a:	ea85 0501 	eor.w	r5, r5, r1
   1e13e:	ea86 0601 	eor.w	r6, r6, r1
   1e142:	fa85 f547 	uadd8	r5, r5, r7
   1e146:	faa3 f587 	sel	r5, r3, r7
   1e14a:	fa86 f647 	uadd8	r6, r6, r7
   1e14e:	faa5 f687 	sel	r6, r5, r7
   1e152:	b98e      	cbnz	r6, 1e178 <memchr+0x78>
   1e154:	d1ee      	bne.n	1e134 <memchr+0x34>
   1e156:	bcf0      	pop	{r4, r5, r6, r7}
   1e158:	f001 01ff 	and.w	r1, r1, #255	; 0xff
   1e15c:	f002 0207 	and.w	r2, r2, #7
   1e160:	b132      	cbz	r2, 1e170 <memchr+0x70>
   1e162:	f810 3b01 	ldrb.w	r3, [r0], #1
   1e166:	3a01      	subs	r2, #1
   1e168:	ea83 0301 	eor.w	r3, r3, r1
   1e16c:	b113      	cbz	r3, 1e174 <memchr+0x74>
   1e16e:	d1f8      	bne.n	1e162 <memchr+0x62>
   1e170:	2000      	movs	r0, #0
   1e172:	4770      	bx	lr
   1e174:	3801      	subs	r0, #1
   1e176:	4770      	bx	lr
   1e178:	2d00      	cmp	r5, #0
   1e17a:	bf06      	itte	eq
   1e17c:	4635      	moveq	r5, r6
   1e17e:	3803      	subeq	r0, #3
   1e180:	3807      	subne	r0, #7
   1e182:	f015 0f01 	tst.w	r5, #1
   1e186:	d107      	bne.n	1e198 <memchr+0x98>
   1e188:	3001      	adds	r0, #1
   1e18a:	f415 7f80 	tst.w	r5, #256	; 0x100
   1e18e:	bf02      	ittt	eq
   1e190:	3001      	addeq	r0, #1
   1e192:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
   1e196:	3001      	addeq	r0, #1
   1e198:	bcf0      	pop	{r4, r5, r6, r7}
   1e19a:	3801      	subs	r0, #1
   1e19c:	4770      	bx	lr
   1e19e:	bf00      	nop

0001e1a0 <memcmp>:
   1e1a0:	2a03      	cmp	r2, #3
   1e1a2:	b470      	push	{r4, r5, r6}
   1e1a4:	d922      	bls.n	1e1ec <memcmp+0x4c>
   1e1a6:	ea40 0301 	orr.w	r3, r0, r1
   1e1aa:	079b      	lsls	r3, r3, #30
   1e1ac:	d011      	beq.n	1e1d2 <memcmp+0x32>
   1e1ae:	7803      	ldrb	r3, [r0, #0]
   1e1b0:	780c      	ldrb	r4, [r1, #0]
   1e1b2:	42a3      	cmp	r3, r4
   1e1b4:	d11d      	bne.n	1e1f2 <memcmp+0x52>
   1e1b6:	440a      	add	r2, r1
   1e1b8:	3101      	adds	r1, #1
   1e1ba:	e005      	b.n	1e1c8 <memcmp+0x28>
   1e1bc:	f810 3f01 	ldrb.w	r3, [r0, #1]!
   1e1c0:	f811 4b01 	ldrb.w	r4, [r1], #1
   1e1c4:	42a3      	cmp	r3, r4
   1e1c6:	d114      	bne.n	1e1f2 <memcmp+0x52>
   1e1c8:	4291      	cmp	r1, r2
   1e1ca:	d1f7      	bne.n	1e1bc <memcmp+0x1c>
   1e1cc:	2000      	movs	r0, #0
   1e1ce:	bc70      	pop	{r4, r5, r6}
   1e1d0:	4770      	bx	lr
   1e1d2:	680d      	ldr	r5, [r1, #0]
   1e1d4:	6806      	ldr	r6, [r0, #0]
   1e1d6:	42ae      	cmp	r6, r5
   1e1d8:	460c      	mov	r4, r1
   1e1da:	4603      	mov	r3, r0
   1e1dc:	f101 0104 	add.w	r1, r1, #4
   1e1e0:	f100 0004 	add.w	r0, r0, #4
   1e1e4:	d108      	bne.n	1e1f8 <memcmp+0x58>
   1e1e6:	3a04      	subs	r2, #4
   1e1e8:	2a03      	cmp	r2, #3
   1e1ea:	d8f2      	bhi.n	1e1d2 <memcmp+0x32>
   1e1ec:	2a00      	cmp	r2, #0
   1e1ee:	d1de      	bne.n	1e1ae <memcmp+0xe>
   1e1f0:	e7ec      	b.n	1e1cc <memcmp+0x2c>
   1e1f2:	1b18      	subs	r0, r3, r4
   1e1f4:	bc70      	pop	{r4, r5, r6}
   1e1f6:	4770      	bx	lr
   1e1f8:	4621      	mov	r1, r4
   1e1fa:	4618      	mov	r0, r3
   1e1fc:	e7d7      	b.n	1e1ae <memcmp+0xe>
   1e1fe:	bf00      	nop

0001e200 <memcpy>:
   1e200:	4684      	mov	ip, r0
   1e202:	ea41 0300 	orr.w	r3, r1, r0
   1e206:	f013 0303 	ands.w	r3, r3, #3
   1e20a:	d16d      	bne.n	1e2e8 <memcpy+0xe8>
   1e20c:	3a40      	subs	r2, #64	; 0x40
   1e20e:	d341      	bcc.n	1e294 <memcpy+0x94>
   1e210:	f851 3b04 	ldr.w	r3, [r1], #4
   1e214:	f840 3b04 	str.w	r3, [r0], #4
   1e218:	f851 3b04 	ldr.w	r3, [r1], #4
   1e21c:	f840 3b04 	str.w	r3, [r0], #4
   1e220:	f851 3b04 	ldr.w	r3, [r1], #4
   1e224:	f840 3b04 	str.w	r3, [r0], #4
   1e228:	f851 3b04 	ldr.w	r3, [r1], #4
   1e22c:	f840 3b04 	str.w	r3, [r0], #4
   1e230:	f851 3b04 	ldr.w	r3, [r1], #4
   1e234:	f840 3b04 	str.w	r3, [r0], #4
   1e238:	f851 3b04 	ldr.w	r3, [r1], #4
   1e23c:	f840 3b04 	str.w	r3, [r0], #4
   1e240:	f851 3b04 	ldr.w	r3, [r1], #4
   1e244:	f840 3b04 	str.w	r3, [r0], #4
   1e248:	f851 3b04 	ldr.w	r3, [r1], #4
   1e24c:	f840 3b04 	str.w	r3, [r0], #4
   1e250:	f851 3b04 	ldr.w	r3, [r1], #4
   1e254:	f840 3b04 	str.w	r3, [r0], #4
   1e258:	f851 3b04 	ldr.w	r3, [r1], #4
   1e25c:	f840 3b04 	str.w	r3, [r0], #4
   1e260:	f851 3b04 	ldr.w	r3, [r1], #4
   1e264:	f840 3b04 	str.w	r3, [r0], #4
   1e268:	f851 3b04 	ldr.w	r3, [r1], #4
   1e26c:	f840 3b04 	str.w	r3, [r0], #4
   1e270:	f851 3b04 	ldr.w	r3, [r1], #4
   1e274:	f840 3b04 	str.w	r3, [r0], #4
   1e278:	f851 3b04 	ldr.w	r3, [r1], #4
   1e27c:	f840 3b04 	str.w	r3, [r0], #4
   1e280:	f851 3b04 	ldr.w	r3, [r1], #4
   1e284:	f840 3b04 	str.w	r3, [r0], #4
   1e288:	f851 3b04 	ldr.w	r3, [r1], #4
   1e28c:	f840 3b04 	str.w	r3, [r0], #4
   1e290:	3a40      	subs	r2, #64	; 0x40
   1e292:	d2bd      	bcs.n	1e210 <memcpy+0x10>
   1e294:	3230      	adds	r2, #48	; 0x30
   1e296:	d311      	bcc.n	1e2bc <memcpy+0xbc>
   1e298:	f851 3b04 	ldr.w	r3, [r1], #4
   1e29c:	f840 3b04 	str.w	r3, [r0], #4
   1e2a0:	f851 3b04 	ldr.w	r3, [r1], #4
   1e2a4:	f840 3b04 	str.w	r3, [r0], #4
   1e2a8:	f851 3b04 	ldr.w	r3, [r1], #4
   1e2ac:	f840 3b04 	str.w	r3, [r0], #4
   1e2b0:	f851 3b04 	ldr.w	r3, [r1], #4
   1e2b4:	f840 3b04 	str.w	r3, [r0], #4
   1e2b8:	3a10      	subs	r2, #16
   1e2ba:	d2ed      	bcs.n	1e298 <memcpy+0x98>
   1e2bc:	320c      	adds	r2, #12
   1e2be:	d305      	bcc.n	1e2cc <memcpy+0xcc>
   1e2c0:	f851 3b04 	ldr.w	r3, [r1], #4
   1e2c4:	f840 3b04 	str.w	r3, [r0], #4
   1e2c8:	3a04      	subs	r2, #4
   1e2ca:	d2f9      	bcs.n	1e2c0 <memcpy+0xc0>
   1e2cc:	3204      	adds	r2, #4
   1e2ce:	d008      	beq.n	1e2e2 <memcpy+0xe2>
   1e2d0:	07d2      	lsls	r2, r2, #31
   1e2d2:	bf1c      	itt	ne
   1e2d4:	f811 3b01 	ldrbne.w	r3, [r1], #1
   1e2d8:	f800 3b01 	strbne.w	r3, [r0], #1
   1e2dc:	d301      	bcc.n	1e2e2 <memcpy+0xe2>
   1e2de:	880b      	ldrh	r3, [r1, #0]
   1e2e0:	8003      	strh	r3, [r0, #0]
   1e2e2:	4660      	mov	r0, ip
   1e2e4:	4770      	bx	lr
   1e2e6:	bf00      	nop
   1e2e8:	2a08      	cmp	r2, #8
   1e2ea:	d313      	bcc.n	1e314 <memcpy+0x114>
   1e2ec:	078b      	lsls	r3, r1, #30
   1e2ee:	d08d      	beq.n	1e20c <memcpy+0xc>
   1e2f0:	f010 0303 	ands.w	r3, r0, #3
   1e2f4:	d08a      	beq.n	1e20c <memcpy+0xc>
   1e2f6:	f1c3 0304 	rsb	r3, r3, #4
   1e2fa:	1ad2      	subs	r2, r2, r3
   1e2fc:	07db      	lsls	r3, r3, #31
   1e2fe:	bf1c      	itt	ne
   1e300:	f811 3b01 	ldrbne.w	r3, [r1], #1
   1e304:	f800 3b01 	strbne.w	r3, [r0], #1
   1e308:	d380      	bcc.n	1e20c <memcpy+0xc>
   1e30a:	f831 3b02 	ldrh.w	r3, [r1], #2
   1e30e:	f820 3b02 	strh.w	r3, [r0], #2
   1e312:	e77b      	b.n	1e20c <memcpy+0xc>
   1e314:	3a04      	subs	r2, #4
   1e316:	d3d9      	bcc.n	1e2cc <memcpy+0xcc>
   1e318:	3a01      	subs	r2, #1
   1e31a:	f811 3b01 	ldrb.w	r3, [r1], #1
   1e31e:	f800 3b01 	strb.w	r3, [r0], #1
   1e322:	d2f9      	bcs.n	1e318 <memcpy+0x118>
   1e324:	780b      	ldrb	r3, [r1, #0]
   1e326:	7003      	strb	r3, [r0, #0]
   1e328:	784b      	ldrb	r3, [r1, #1]
   1e32a:	7043      	strb	r3, [r0, #1]
   1e32c:	788b      	ldrb	r3, [r1, #2]
   1e32e:	7083      	strb	r3, [r0, #2]
   1e330:	4660      	mov	r0, ip
   1e332:	4770      	bx	lr

0001e334 <memmove>:
   1e334:	4288      	cmp	r0, r1
   1e336:	b5f0      	push	{r4, r5, r6, r7, lr}
   1e338:	d90d      	bls.n	1e356 <memmove+0x22>
   1e33a:	188b      	adds	r3, r1, r2
   1e33c:	4298      	cmp	r0, r3
   1e33e:	d20a      	bcs.n	1e356 <memmove+0x22>
   1e340:	1884      	adds	r4, r0, r2
   1e342:	2a00      	cmp	r2, #0
   1e344:	d051      	beq.n	1e3ea <memmove+0xb6>
   1e346:	4622      	mov	r2, r4
   1e348:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
   1e34c:	f802 4d01 	strb.w	r4, [r2, #-1]!
   1e350:	4299      	cmp	r1, r3
   1e352:	d1f9      	bne.n	1e348 <memmove+0x14>
   1e354:	bdf0      	pop	{r4, r5, r6, r7, pc}
   1e356:	2a0f      	cmp	r2, #15
   1e358:	d948      	bls.n	1e3ec <memmove+0xb8>
   1e35a:	ea41 0300 	orr.w	r3, r1, r0
   1e35e:	079b      	lsls	r3, r3, #30
   1e360:	d146      	bne.n	1e3f0 <memmove+0xbc>
   1e362:	f100 0410 	add.w	r4, r0, #16
   1e366:	f101 0310 	add.w	r3, r1, #16
   1e36a:	4615      	mov	r5, r2
   1e36c:	f853 6c10 	ldr.w	r6, [r3, #-16]
   1e370:	f844 6c10 	str.w	r6, [r4, #-16]
   1e374:	f853 6c0c 	ldr.w	r6, [r3, #-12]
   1e378:	f844 6c0c 	str.w	r6, [r4, #-12]
   1e37c:	f853 6c08 	ldr.w	r6, [r3, #-8]
   1e380:	f844 6c08 	str.w	r6, [r4, #-8]
   1e384:	3d10      	subs	r5, #16
   1e386:	f853 6c04 	ldr.w	r6, [r3, #-4]
   1e38a:	f844 6c04 	str.w	r6, [r4, #-4]
   1e38e:	2d0f      	cmp	r5, #15
   1e390:	f103 0310 	add.w	r3, r3, #16
   1e394:	f104 0410 	add.w	r4, r4, #16
   1e398:	d8e8      	bhi.n	1e36c <memmove+0x38>
   1e39a:	f1a2 0310 	sub.w	r3, r2, #16
   1e39e:	f023 030f 	bic.w	r3, r3, #15
   1e3a2:	f002 0e0f 	and.w	lr, r2, #15
   1e3a6:	3310      	adds	r3, #16
   1e3a8:	f1be 0f03 	cmp.w	lr, #3
   1e3ac:	4419      	add	r1, r3
   1e3ae:	4403      	add	r3, r0
   1e3b0:	d921      	bls.n	1e3f6 <memmove+0xc2>
   1e3b2:	1f1e      	subs	r6, r3, #4
   1e3b4:	460d      	mov	r5, r1
   1e3b6:	4674      	mov	r4, lr
   1e3b8:	3c04      	subs	r4, #4
   1e3ba:	f855 7b04 	ldr.w	r7, [r5], #4
   1e3be:	f846 7f04 	str.w	r7, [r6, #4]!
   1e3c2:	2c03      	cmp	r4, #3
   1e3c4:	d8f8      	bhi.n	1e3b8 <memmove+0x84>
   1e3c6:	f1ae 0404 	sub.w	r4, lr, #4
   1e3ca:	f024 0403 	bic.w	r4, r4, #3
   1e3ce:	3404      	adds	r4, #4
   1e3d0:	4421      	add	r1, r4
   1e3d2:	4423      	add	r3, r4
   1e3d4:	f002 0203 	and.w	r2, r2, #3
   1e3d8:	b162      	cbz	r2, 1e3f4 <memmove+0xc0>
   1e3da:	3b01      	subs	r3, #1
   1e3dc:	440a      	add	r2, r1
   1e3de:	f811 4b01 	ldrb.w	r4, [r1], #1
   1e3e2:	f803 4f01 	strb.w	r4, [r3, #1]!
   1e3e6:	428a      	cmp	r2, r1
   1e3e8:	d1f9      	bne.n	1e3de <memmove+0xaa>
   1e3ea:	bdf0      	pop	{r4, r5, r6, r7, pc}
   1e3ec:	4603      	mov	r3, r0
   1e3ee:	e7f3      	b.n	1e3d8 <memmove+0xa4>
   1e3f0:	4603      	mov	r3, r0
   1e3f2:	e7f2      	b.n	1e3da <memmove+0xa6>
   1e3f4:	bdf0      	pop	{r4, r5, r6, r7, pc}
   1e3f6:	4672      	mov	r2, lr
   1e3f8:	e7ee      	b.n	1e3d8 <memmove+0xa4>
   1e3fa:	bf00      	nop

0001e3fc <memset>:
   1e3fc:	b470      	push	{r4, r5, r6}
   1e3fe:	0786      	lsls	r6, r0, #30
   1e400:	d046      	beq.n	1e490 <memset+0x94>
   1e402:	1e54      	subs	r4, r2, #1
   1e404:	2a00      	cmp	r2, #0
   1e406:	d041      	beq.n	1e48c <memset+0x90>
   1e408:	b2ca      	uxtb	r2, r1
   1e40a:	4603      	mov	r3, r0
   1e40c:	e002      	b.n	1e414 <memset+0x18>
   1e40e:	f114 34ff 	adds.w	r4, r4, #4294967295
   1e412:	d33b      	bcc.n	1e48c <memset+0x90>
   1e414:	f803 2b01 	strb.w	r2, [r3], #1
   1e418:	079d      	lsls	r5, r3, #30
   1e41a:	d1f8      	bne.n	1e40e <memset+0x12>
   1e41c:	2c03      	cmp	r4, #3
   1e41e:	d92e      	bls.n	1e47e <memset+0x82>
   1e420:	b2cd      	uxtb	r5, r1
   1e422:	ea45 2505 	orr.w	r5, r5, r5, lsl #8
   1e426:	2c0f      	cmp	r4, #15
   1e428:	ea45 4505 	orr.w	r5, r5, r5, lsl #16
   1e42c:	d919      	bls.n	1e462 <memset+0x66>
   1e42e:	f103 0210 	add.w	r2, r3, #16
   1e432:	4626      	mov	r6, r4
   1e434:	3e10      	subs	r6, #16
   1e436:	2e0f      	cmp	r6, #15
   1e438:	f842 5c10 	str.w	r5, [r2, #-16]
   1e43c:	f842 5c0c 	str.w	r5, [r2, #-12]
   1e440:	f842 5c08 	str.w	r5, [r2, #-8]
   1e444:	f842 5c04 	str.w	r5, [r2, #-4]
   1e448:	f102 0210 	add.w	r2, r2, #16
   1e44c:	d8f2      	bhi.n	1e434 <memset+0x38>
   1e44e:	f1a4 0210 	sub.w	r2, r4, #16
   1e452:	f022 020f 	bic.w	r2, r2, #15
   1e456:	f004 040f 	and.w	r4, r4, #15
   1e45a:	3210      	adds	r2, #16
   1e45c:	2c03      	cmp	r4, #3
   1e45e:	4413      	add	r3, r2
   1e460:	d90d      	bls.n	1e47e <memset+0x82>
   1e462:	461e      	mov	r6, r3
   1e464:	4622      	mov	r2, r4
   1e466:	3a04      	subs	r2, #4
   1e468:	2a03      	cmp	r2, #3
   1e46a:	f846 5b04 	str.w	r5, [r6], #4
   1e46e:	d8fa      	bhi.n	1e466 <memset+0x6a>
   1e470:	1f22      	subs	r2, r4, #4
   1e472:	f022 0203 	bic.w	r2, r2, #3
   1e476:	3204      	adds	r2, #4
   1e478:	4413      	add	r3, r2
   1e47a:	f004 0403 	and.w	r4, r4, #3
   1e47e:	b12c      	cbz	r4, 1e48c <memset+0x90>
   1e480:	b2c9      	uxtb	r1, r1
   1e482:	441c      	add	r4, r3
   1e484:	f803 1b01 	strb.w	r1, [r3], #1
   1e488:	429c      	cmp	r4, r3
   1e48a:	d1fb      	bne.n	1e484 <memset+0x88>
   1e48c:	bc70      	pop	{r4, r5, r6}
   1e48e:	4770      	bx	lr
   1e490:	4614      	mov	r4, r2
   1e492:	4603      	mov	r3, r0
   1e494:	e7c2      	b.n	1e41c <memset+0x20>
   1e496:	bf00      	nop

0001e498 <__malloc_lock>:
   1e498:	4801      	ldr	r0, [pc, #4]	; (1e4a0 <__malloc_lock+0x8>)
   1e49a:	f7ff bb53 	b.w	1db44 <__retarget_lock_acquire_recursive>
   1e49e:	bf00      	nop
   1e4a0:	2000237c 	.word	0x2000237c

0001e4a4 <__malloc_unlock>:
   1e4a4:	4801      	ldr	r0, [pc, #4]	; (1e4ac <__malloc_unlock+0x8>)
   1e4a6:	f7ff bb4f 	b.w	1db48 <__retarget_lock_release_recursive>
   1e4aa:	bf00      	nop
   1e4ac:	2000237c 	.word	0x2000237c

0001e4b0 <_putc_r>:
   1e4b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1e4b2:	460e      	mov	r6, r1
   1e4b4:	4614      	mov	r4, r2
   1e4b6:	4607      	mov	r7, r0
   1e4b8:	b108      	cbz	r0, 1e4be <_putc_r+0xe>
   1e4ba:	6b83      	ldr	r3, [r0, #56]	; 0x38
   1e4bc:	b34b      	cbz	r3, 1e512 <_putc_r+0x62>
   1e4be:	6e63      	ldr	r3, [r4, #100]	; 0x64
   1e4c0:	07d8      	lsls	r0, r3, #31
   1e4c2:	d402      	bmi.n	1e4ca <_putc_r+0x1a>
   1e4c4:	89a3      	ldrh	r3, [r4, #12]
   1e4c6:	0599      	lsls	r1, r3, #22
   1e4c8:	d526      	bpl.n	1e518 <_putc_r+0x68>
   1e4ca:	68a3      	ldr	r3, [r4, #8]
   1e4cc:	3b01      	subs	r3, #1
   1e4ce:	2b00      	cmp	r3, #0
   1e4d0:	60a3      	str	r3, [r4, #8]
   1e4d2:	db11      	blt.n	1e4f8 <_putc_r+0x48>
   1e4d4:	b2f5      	uxtb	r5, r6
   1e4d6:	6823      	ldr	r3, [r4, #0]
   1e4d8:	1c5a      	adds	r2, r3, #1
   1e4da:	6022      	str	r2, [r4, #0]
   1e4dc:	701e      	strb	r6, [r3, #0]
   1e4de:	6e63      	ldr	r3, [r4, #100]	; 0x64
   1e4e0:	07da      	lsls	r2, r3, #31
   1e4e2:	d402      	bmi.n	1e4ea <_putc_r+0x3a>
   1e4e4:	89a3      	ldrh	r3, [r4, #12]
   1e4e6:	059b      	lsls	r3, r3, #22
   1e4e8:	d501      	bpl.n	1e4ee <_putc_r+0x3e>
   1e4ea:	4628      	mov	r0, r5
   1e4ec:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   1e4ee:	6da0      	ldr	r0, [r4, #88]	; 0x58
   1e4f0:	f7ff fb2a 	bl	1db48 <__retarget_lock_release_recursive>
   1e4f4:	4628      	mov	r0, r5
   1e4f6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   1e4f8:	69a2      	ldr	r2, [r4, #24]
   1e4fa:	4293      	cmp	r3, r2
   1e4fc:	db02      	blt.n	1e504 <_putc_r+0x54>
   1e4fe:	b2f5      	uxtb	r5, r6
   1e500:	2d0a      	cmp	r5, #10
   1e502:	d1e8      	bne.n	1e4d6 <_putc_r+0x26>
   1e504:	4631      	mov	r1, r6
   1e506:	4638      	mov	r0, r7
   1e508:	4622      	mov	r2, r4
   1e50a:	f001 ff11 	bl	20330 <__swbuf_r>
   1e50e:	4605      	mov	r5, r0
   1e510:	e7e5      	b.n	1e4de <_putc_r+0x2e>
   1e512:	f003 f8af 	bl	21674 <__sinit>
   1e516:	e7d2      	b.n	1e4be <_putc_r+0xe>
   1e518:	6da0      	ldr	r0, [r4, #88]	; 0x58
   1e51a:	f7ff fb13 	bl	1db44 <__retarget_lock_acquire_recursive>
   1e51e:	e7d4      	b.n	1e4ca <_putc_r+0x1a>

0001e520 <realloc>:
   1e520:	4b02      	ldr	r3, [pc, #8]	; (1e52c <realloc+0xc>)
   1e522:	460a      	mov	r2, r1
   1e524:	4601      	mov	r1, r0
   1e526:	6818      	ldr	r0, [r3, #0]
   1e528:	f000 b802 	b.w	1e530 <_realloc_r>
   1e52c:	200000f8 	.word	0x200000f8

0001e530 <_realloc_r>:
   1e530:	2900      	cmp	r1, #0
   1e532:	f000 8095 	beq.w	1e660 <_realloc_r+0x130>
   1e536:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1e53a:	460d      	mov	r5, r1
   1e53c:	4616      	mov	r6, r2
   1e53e:	b083      	sub	sp, #12
   1e540:	4680      	mov	r8, r0
   1e542:	f106 070b 	add.w	r7, r6, #11
   1e546:	f7ff ffa7 	bl	1e498 <__malloc_lock>
   1e54a:	f855 ec04 	ldr.w	lr, [r5, #-4]
   1e54e:	2f16      	cmp	r7, #22
   1e550:	f02e 0403 	bic.w	r4, lr, #3
   1e554:	f1a5 0908 	sub.w	r9, r5, #8
   1e558:	d83c      	bhi.n	1e5d4 <_realloc_r+0xa4>
   1e55a:	2210      	movs	r2, #16
   1e55c:	4617      	mov	r7, r2
   1e55e:	42be      	cmp	r6, r7
   1e560:	d83d      	bhi.n	1e5de <_realloc_r+0xae>
   1e562:	4294      	cmp	r4, r2
   1e564:	da43      	bge.n	1e5ee <_realloc_r+0xbe>
   1e566:	4bc4      	ldr	r3, [pc, #784]	; (1e878 <_realloc_r+0x348>)
   1e568:	6899      	ldr	r1, [r3, #8]
   1e56a:	eb09 0004 	add.w	r0, r9, r4
   1e56e:	4288      	cmp	r0, r1
   1e570:	f000 80b4 	beq.w	1e6dc <_realloc_r+0x1ac>
   1e574:	6843      	ldr	r3, [r0, #4]
   1e576:	f023 0101 	bic.w	r1, r3, #1
   1e57a:	4401      	add	r1, r0
   1e57c:	6849      	ldr	r1, [r1, #4]
   1e57e:	07c9      	lsls	r1, r1, #31
   1e580:	d54c      	bpl.n	1e61c <_realloc_r+0xec>
   1e582:	f01e 0f01 	tst.w	lr, #1
   1e586:	f000 809b 	beq.w	1e6c0 <_realloc_r+0x190>
   1e58a:	4631      	mov	r1, r6
   1e58c:	4640      	mov	r0, r8
   1e58e:	f7ff faed 	bl	1db6c <_malloc_r>
   1e592:	4606      	mov	r6, r0
   1e594:	2800      	cmp	r0, #0
   1e596:	d03a      	beq.n	1e60e <_realloc_r+0xde>
   1e598:	f855 3c04 	ldr.w	r3, [r5, #-4]
   1e59c:	f023 0301 	bic.w	r3, r3, #1
   1e5a0:	444b      	add	r3, r9
   1e5a2:	f1a0 0208 	sub.w	r2, r0, #8
   1e5a6:	429a      	cmp	r2, r3
   1e5a8:	f000 8121 	beq.w	1e7ee <_realloc_r+0x2be>
   1e5ac:	1f22      	subs	r2, r4, #4
   1e5ae:	2a24      	cmp	r2, #36	; 0x24
   1e5b0:	f200 8107 	bhi.w	1e7c2 <_realloc_r+0x292>
   1e5b4:	2a13      	cmp	r2, #19
   1e5b6:	f200 80db 	bhi.w	1e770 <_realloc_r+0x240>
   1e5ba:	4603      	mov	r3, r0
   1e5bc:	462a      	mov	r2, r5
   1e5be:	6811      	ldr	r1, [r2, #0]
   1e5c0:	6019      	str	r1, [r3, #0]
   1e5c2:	6851      	ldr	r1, [r2, #4]
   1e5c4:	6059      	str	r1, [r3, #4]
   1e5c6:	6892      	ldr	r2, [r2, #8]
   1e5c8:	609a      	str	r2, [r3, #8]
   1e5ca:	4629      	mov	r1, r5
   1e5cc:	4640      	mov	r0, r8
   1e5ce:	f003 f8f3 	bl	217b8 <_free_r>
   1e5d2:	e01c      	b.n	1e60e <_realloc_r+0xde>
   1e5d4:	f027 0707 	bic.w	r7, r7, #7
   1e5d8:	2f00      	cmp	r7, #0
   1e5da:	463a      	mov	r2, r7
   1e5dc:	dabf      	bge.n	1e55e <_realloc_r+0x2e>
   1e5de:	2600      	movs	r6, #0
   1e5e0:	230c      	movs	r3, #12
   1e5e2:	4630      	mov	r0, r6
   1e5e4:	f8c8 3000 	str.w	r3, [r8]
   1e5e8:	b003      	add	sp, #12
   1e5ea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1e5ee:	462e      	mov	r6, r5
   1e5f0:	1be3      	subs	r3, r4, r7
   1e5f2:	2b0f      	cmp	r3, #15
   1e5f4:	d81e      	bhi.n	1e634 <_realloc_r+0x104>
   1e5f6:	f8d9 3004 	ldr.w	r3, [r9, #4]
   1e5fa:	f003 0301 	and.w	r3, r3, #1
   1e5fe:	4323      	orrs	r3, r4
   1e600:	444c      	add	r4, r9
   1e602:	f8c9 3004 	str.w	r3, [r9, #4]
   1e606:	6863      	ldr	r3, [r4, #4]
   1e608:	f043 0301 	orr.w	r3, r3, #1
   1e60c:	6063      	str	r3, [r4, #4]
   1e60e:	4640      	mov	r0, r8
   1e610:	f7ff ff48 	bl	1e4a4 <__malloc_unlock>
   1e614:	4630      	mov	r0, r6
   1e616:	b003      	add	sp, #12
   1e618:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1e61c:	f023 0303 	bic.w	r3, r3, #3
   1e620:	18e1      	adds	r1, r4, r3
   1e622:	4291      	cmp	r1, r2
   1e624:	db1f      	blt.n	1e666 <_realloc_r+0x136>
   1e626:	68c3      	ldr	r3, [r0, #12]
   1e628:	6882      	ldr	r2, [r0, #8]
   1e62a:	462e      	mov	r6, r5
   1e62c:	60d3      	str	r3, [r2, #12]
   1e62e:	460c      	mov	r4, r1
   1e630:	609a      	str	r2, [r3, #8]
   1e632:	e7dd      	b.n	1e5f0 <_realloc_r+0xc0>
   1e634:	f8d9 2004 	ldr.w	r2, [r9, #4]
   1e638:	eb09 0107 	add.w	r1, r9, r7
   1e63c:	f002 0201 	and.w	r2, r2, #1
   1e640:	444c      	add	r4, r9
   1e642:	f043 0301 	orr.w	r3, r3, #1
   1e646:	4317      	orrs	r7, r2
   1e648:	f8c9 7004 	str.w	r7, [r9, #4]
   1e64c:	604b      	str	r3, [r1, #4]
   1e64e:	6863      	ldr	r3, [r4, #4]
   1e650:	f043 0301 	orr.w	r3, r3, #1
   1e654:	3108      	adds	r1, #8
   1e656:	6063      	str	r3, [r4, #4]
   1e658:	4640      	mov	r0, r8
   1e65a:	f003 f8ad 	bl	217b8 <_free_r>
   1e65e:	e7d6      	b.n	1e60e <_realloc_r+0xde>
   1e660:	4611      	mov	r1, r2
   1e662:	f7ff ba83 	b.w	1db6c <_malloc_r>
   1e666:	f01e 0f01 	tst.w	lr, #1
   1e66a:	d18e      	bne.n	1e58a <_realloc_r+0x5a>
   1e66c:	f855 1c08 	ldr.w	r1, [r5, #-8]
   1e670:	eba9 0a01 	sub.w	sl, r9, r1
   1e674:	f8da 1004 	ldr.w	r1, [sl, #4]
   1e678:	f021 0103 	bic.w	r1, r1, #3
   1e67c:	440b      	add	r3, r1
   1e67e:	4423      	add	r3, r4
   1e680:	4293      	cmp	r3, r2
   1e682:	db25      	blt.n	1e6d0 <_realloc_r+0x1a0>
   1e684:	68c2      	ldr	r2, [r0, #12]
   1e686:	6881      	ldr	r1, [r0, #8]
   1e688:	4656      	mov	r6, sl
   1e68a:	60ca      	str	r2, [r1, #12]
   1e68c:	6091      	str	r1, [r2, #8]
   1e68e:	f8da 100c 	ldr.w	r1, [sl, #12]
   1e692:	f856 0f08 	ldr.w	r0, [r6, #8]!
   1e696:	1f22      	subs	r2, r4, #4
   1e698:	2a24      	cmp	r2, #36	; 0x24
   1e69a:	60c1      	str	r1, [r0, #12]
   1e69c:	6088      	str	r0, [r1, #8]
   1e69e:	f200 8094 	bhi.w	1e7ca <_realloc_r+0x29a>
   1e6a2:	2a13      	cmp	r2, #19
   1e6a4:	d96f      	bls.n	1e786 <_realloc_r+0x256>
   1e6a6:	6829      	ldr	r1, [r5, #0]
   1e6a8:	f8ca 1008 	str.w	r1, [sl, #8]
   1e6ac:	6869      	ldr	r1, [r5, #4]
   1e6ae:	f8ca 100c 	str.w	r1, [sl, #12]
   1e6b2:	2a1b      	cmp	r2, #27
   1e6b4:	f200 80a2 	bhi.w	1e7fc <_realloc_r+0x2cc>
   1e6b8:	3508      	adds	r5, #8
   1e6ba:	f10a 0210 	add.w	r2, sl, #16
   1e6be:	e063      	b.n	1e788 <_realloc_r+0x258>
   1e6c0:	f855 3c08 	ldr.w	r3, [r5, #-8]
   1e6c4:	eba9 0a03 	sub.w	sl, r9, r3
   1e6c8:	f8da 1004 	ldr.w	r1, [sl, #4]
   1e6cc:	f021 0103 	bic.w	r1, r1, #3
   1e6d0:	1863      	adds	r3, r4, r1
   1e6d2:	4293      	cmp	r3, r2
   1e6d4:	f6ff af59 	blt.w	1e58a <_realloc_r+0x5a>
   1e6d8:	4656      	mov	r6, sl
   1e6da:	e7d8      	b.n	1e68e <_realloc_r+0x15e>
   1e6dc:	6841      	ldr	r1, [r0, #4]
   1e6de:	f021 0b03 	bic.w	fp, r1, #3
   1e6e2:	44a3      	add	fp, r4
   1e6e4:	f107 0010 	add.w	r0, r7, #16
   1e6e8:	4583      	cmp	fp, r0
   1e6ea:	da56      	bge.n	1e79a <_realloc_r+0x26a>
   1e6ec:	f01e 0f01 	tst.w	lr, #1
   1e6f0:	f47f af4b 	bne.w	1e58a <_realloc_r+0x5a>
   1e6f4:	f855 1c08 	ldr.w	r1, [r5, #-8]
   1e6f8:	eba9 0a01 	sub.w	sl, r9, r1
   1e6fc:	f8da 1004 	ldr.w	r1, [sl, #4]
   1e700:	f021 0103 	bic.w	r1, r1, #3
   1e704:	448b      	add	fp, r1
   1e706:	4558      	cmp	r0, fp
   1e708:	dce2      	bgt.n	1e6d0 <_realloc_r+0x1a0>
   1e70a:	4656      	mov	r6, sl
   1e70c:	f8da 100c 	ldr.w	r1, [sl, #12]
   1e710:	f856 0f08 	ldr.w	r0, [r6, #8]!
   1e714:	1f22      	subs	r2, r4, #4
   1e716:	2a24      	cmp	r2, #36	; 0x24
   1e718:	60c1      	str	r1, [r0, #12]
   1e71a:	6088      	str	r0, [r1, #8]
   1e71c:	f200 808f 	bhi.w	1e83e <_realloc_r+0x30e>
   1e720:	2a13      	cmp	r2, #19
   1e722:	f240 808a 	bls.w	1e83a <_realloc_r+0x30a>
   1e726:	6829      	ldr	r1, [r5, #0]
   1e728:	f8ca 1008 	str.w	r1, [sl, #8]
   1e72c:	6869      	ldr	r1, [r5, #4]
   1e72e:	f8ca 100c 	str.w	r1, [sl, #12]
   1e732:	2a1b      	cmp	r2, #27
   1e734:	f200 808a 	bhi.w	1e84c <_realloc_r+0x31c>
   1e738:	3508      	adds	r5, #8
   1e73a:	f10a 0210 	add.w	r2, sl, #16
   1e73e:	6829      	ldr	r1, [r5, #0]
   1e740:	6011      	str	r1, [r2, #0]
   1e742:	6869      	ldr	r1, [r5, #4]
   1e744:	6051      	str	r1, [r2, #4]
   1e746:	68a9      	ldr	r1, [r5, #8]
   1e748:	6091      	str	r1, [r2, #8]
   1e74a:	eb0a 0107 	add.w	r1, sl, r7
   1e74e:	ebab 0207 	sub.w	r2, fp, r7
   1e752:	f042 0201 	orr.w	r2, r2, #1
   1e756:	6099      	str	r1, [r3, #8]
   1e758:	604a      	str	r2, [r1, #4]
   1e75a:	f8da 3004 	ldr.w	r3, [sl, #4]
   1e75e:	f003 0301 	and.w	r3, r3, #1
   1e762:	431f      	orrs	r7, r3
   1e764:	4640      	mov	r0, r8
   1e766:	f8ca 7004 	str.w	r7, [sl, #4]
   1e76a:	f7ff fe9b 	bl	1e4a4 <__malloc_unlock>
   1e76e:	e751      	b.n	1e614 <_realloc_r+0xe4>
   1e770:	682b      	ldr	r3, [r5, #0]
   1e772:	6003      	str	r3, [r0, #0]
   1e774:	686b      	ldr	r3, [r5, #4]
   1e776:	6043      	str	r3, [r0, #4]
   1e778:	2a1b      	cmp	r2, #27
   1e77a:	d82d      	bhi.n	1e7d8 <_realloc_r+0x2a8>
   1e77c:	f100 0308 	add.w	r3, r0, #8
   1e780:	f105 0208 	add.w	r2, r5, #8
   1e784:	e71b      	b.n	1e5be <_realloc_r+0x8e>
   1e786:	4632      	mov	r2, r6
   1e788:	6829      	ldr	r1, [r5, #0]
   1e78a:	6011      	str	r1, [r2, #0]
   1e78c:	6869      	ldr	r1, [r5, #4]
   1e78e:	6051      	str	r1, [r2, #4]
   1e790:	68a9      	ldr	r1, [r5, #8]
   1e792:	6091      	str	r1, [r2, #8]
   1e794:	461c      	mov	r4, r3
   1e796:	46d1      	mov	r9, sl
   1e798:	e72a      	b.n	1e5f0 <_realloc_r+0xc0>
   1e79a:	eb09 0107 	add.w	r1, r9, r7
   1e79e:	ebab 0b07 	sub.w	fp, fp, r7
   1e7a2:	f04b 0201 	orr.w	r2, fp, #1
   1e7a6:	6099      	str	r1, [r3, #8]
   1e7a8:	604a      	str	r2, [r1, #4]
   1e7aa:	f855 3c04 	ldr.w	r3, [r5, #-4]
   1e7ae:	f003 0301 	and.w	r3, r3, #1
   1e7b2:	431f      	orrs	r7, r3
   1e7b4:	4640      	mov	r0, r8
   1e7b6:	f845 7c04 	str.w	r7, [r5, #-4]
   1e7ba:	f7ff fe73 	bl	1e4a4 <__malloc_unlock>
   1e7be:	462e      	mov	r6, r5
   1e7c0:	e728      	b.n	1e614 <_realloc_r+0xe4>
   1e7c2:	4629      	mov	r1, r5
   1e7c4:	f7ff fdb6 	bl	1e334 <memmove>
   1e7c8:	e6ff      	b.n	1e5ca <_realloc_r+0x9a>
   1e7ca:	4629      	mov	r1, r5
   1e7cc:	4630      	mov	r0, r6
   1e7ce:	461c      	mov	r4, r3
   1e7d0:	46d1      	mov	r9, sl
   1e7d2:	f7ff fdaf 	bl	1e334 <memmove>
   1e7d6:	e70b      	b.n	1e5f0 <_realloc_r+0xc0>
   1e7d8:	68ab      	ldr	r3, [r5, #8]
   1e7da:	6083      	str	r3, [r0, #8]
   1e7dc:	68eb      	ldr	r3, [r5, #12]
   1e7de:	60c3      	str	r3, [r0, #12]
   1e7e0:	2a24      	cmp	r2, #36	; 0x24
   1e7e2:	d017      	beq.n	1e814 <_realloc_r+0x2e4>
   1e7e4:	f100 0310 	add.w	r3, r0, #16
   1e7e8:	f105 0210 	add.w	r2, r5, #16
   1e7ec:	e6e7      	b.n	1e5be <_realloc_r+0x8e>
   1e7ee:	f850 3c04 	ldr.w	r3, [r0, #-4]
   1e7f2:	f023 0303 	bic.w	r3, r3, #3
   1e7f6:	441c      	add	r4, r3
   1e7f8:	462e      	mov	r6, r5
   1e7fa:	e6f9      	b.n	1e5f0 <_realloc_r+0xc0>
   1e7fc:	68a9      	ldr	r1, [r5, #8]
   1e7fe:	f8ca 1010 	str.w	r1, [sl, #16]
   1e802:	68e9      	ldr	r1, [r5, #12]
   1e804:	f8ca 1014 	str.w	r1, [sl, #20]
   1e808:	2a24      	cmp	r2, #36	; 0x24
   1e80a:	d00c      	beq.n	1e826 <_realloc_r+0x2f6>
   1e80c:	3510      	adds	r5, #16
   1e80e:	f10a 0218 	add.w	r2, sl, #24
   1e812:	e7b9      	b.n	1e788 <_realloc_r+0x258>
   1e814:	692b      	ldr	r3, [r5, #16]
   1e816:	6103      	str	r3, [r0, #16]
   1e818:	696b      	ldr	r3, [r5, #20]
   1e81a:	6143      	str	r3, [r0, #20]
   1e81c:	f105 0218 	add.w	r2, r5, #24
   1e820:	f100 0318 	add.w	r3, r0, #24
   1e824:	e6cb      	b.n	1e5be <_realloc_r+0x8e>
   1e826:	692a      	ldr	r2, [r5, #16]
   1e828:	f8ca 2018 	str.w	r2, [sl, #24]
   1e82c:	696a      	ldr	r2, [r5, #20]
   1e82e:	f8ca 201c 	str.w	r2, [sl, #28]
   1e832:	3518      	adds	r5, #24
   1e834:	f10a 0220 	add.w	r2, sl, #32
   1e838:	e7a6      	b.n	1e788 <_realloc_r+0x258>
   1e83a:	4632      	mov	r2, r6
   1e83c:	e77f      	b.n	1e73e <_realloc_r+0x20e>
   1e83e:	4629      	mov	r1, r5
   1e840:	4630      	mov	r0, r6
   1e842:	9301      	str	r3, [sp, #4]
   1e844:	f7ff fd76 	bl	1e334 <memmove>
   1e848:	9b01      	ldr	r3, [sp, #4]
   1e84a:	e77e      	b.n	1e74a <_realloc_r+0x21a>
   1e84c:	68a9      	ldr	r1, [r5, #8]
   1e84e:	f8ca 1010 	str.w	r1, [sl, #16]
   1e852:	68e9      	ldr	r1, [r5, #12]
   1e854:	f8ca 1014 	str.w	r1, [sl, #20]
   1e858:	2a24      	cmp	r2, #36	; 0x24
   1e85a:	d003      	beq.n	1e864 <_realloc_r+0x334>
   1e85c:	3510      	adds	r5, #16
   1e85e:	f10a 0218 	add.w	r2, sl, #24
   1e862:	e76c      	b.n	1e73e <_realloc_r+0x20e>
   1e864:	692a      	ldr	r2, [r5, #16]
   1e866:	f8ca 2018 	str.w	r2, [sl, #24]
   1e86a:	696a      	ldr	r2, [r5, #20]
   1e86c:	f8ca 201c 	str.w	r2, [sl, #28]
   1e870:	3518      	adds	r5, #24
   1e872:	f10a 0220 	add.w	r2, sl, #32
   1e876:	e762      	b.n	1e73e <_realloc_r+0x20e>
   1e878:	20000694 	.word	0x20000694

0001e87c <_sbrk_r>:
   1e87c:	b538      	push	{r3, r4, r5, lr}
   1e87e:	4c07      	ldr	r4, [pc, #28]	; (1e89c <_sbrk_r+0x20>)
   1e880:	2300      	movs	r3, #0
   1e882:	4605      	mov	r5, r0
   1e884:	4608      	mov	r0, r1
   1e886:	6023      	str	r3, [r4, #0]
   1e888:	f003 ff64 	bl	22754 <_sbrk>
   1e88c:	1c43      	adds	r3, r0, #1
   1e88e:	d000      	beq.n	1e892 <_sbrk_r+0x16>
   1e890:	bd38      	pop	{r3, r4, r5, pc}
   1e892:	6823      	ldr	r3, [r4, #0]
   1e894:	2b00      	cmp	r3, #0
   1e896:	d0fb      	beq.n	1e890 <_sbrk_r+0x14>
   1e898:	602b      	str	r3, [r5, #0]
   1e89a:	bd38      	pop	{r3, r4, r5, pc}
   1e89c:	20002390 	.word	0x20002390

0001e8a0 <_raise_r>:
   1e8a0:	291f      	cmp	r1, #31
   1e8a2:	d828      	bhi.n	1e8f6 <_raise_r+0x56>
   1e8a4:	b520      	push	{r5, lr}
   1e8a6:	f8d0 22dc 	ldr.w	r2, [r0, #732]	; 0x2dc
   1e8aa:	b082      	sub	sp, #8
   1e8ac:	4605      	mov	r5, r0
   1e8ae:	b1aa      	cbz	r2, 1e8dc <_raise_r+0x3c>
   1e8b0:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
   1e8b4:	b193      	cbz	r3, 1e8dc <_raise_r+0x3c>
   1e8b6:	2b01      	cmp	r3, #1
   1e8b8:	d00e      	beq.n	1e8d8 <_raise_r+0x38>
   1e8ba:	1c58      	adds	r0, r3, #1
   1e8bc:	d007      	beq.n	1e8ce <_raise_r+0x2e>
   1e8be:	2500      	movs	r5, #0
   1e8c0:	4608      	mov	r0, r1
   1e8c2:	f842 5021 	str.w	r5, [r2, r1, lsl #2]
   1e8c6:	4798      	blx	r3
   1e8c8:	4628      	mov	r0, r5
   1e8ca:	b002      	add	sp, #8
   1e8cc:	bd20      	pop	{r5, pc}
   1e8ce:	2316      	movs	r3, #22
   1e8d0:	2001      	movs	r0, #1
   1e8d2:	602b      	str	r3, [r5, #0]
   1e8d4:	b002      	add	sp, #8
   1e8d6:	bd20      	pop	{r5, pc}
   1e8d8:	2000      	movs	r0, #0
   1e8da:	e7f6      	b.n	1e8ca <_raise_r+0x2a>
   1e8dc:	4628      	mov	r0, r5
   1e8de:	9101      	str	r1, [sp, #4]
   1e8e0:	f000 f82a 	bl	1e938 <_getpid_r>
   1e8e4:	9901      	ldr	r1, [sp, #4]
   1e8e6:	460a      	mov	r2, r1
   1e8e8:	4601      	mov	r1, r0
   1e8ea:	4628      	mov	r0, r5
   1e8ec:	b002      	add	sp, #8
   1e8ee:	e8bd 4020 	ldmia.w	sp!, {r5, lr}
   1e8f2:	f000 b80d 	b.w	1e910 <_kill_r>
   1e8f6:	2316      	movs	r3, #22
   1e8f8:	6003      	str	r3, [r0, #0]
   1e8fa:	f04f 30ff 	mov.w	r0, #4294967295
   1e8fe:	4770      	bx	lr

0001e900 <raise>:
   1e900:	4b02      	ldr	r3, [pc, #8]	; (1e90c <raise+0xc>)
   1e902:	4601      	mov	r1, r0
   1e904:	6818      	ldr	r0, [r3, #0]
   1e906:	f7ff bfcb 	b.w	1e8a0 <_raise_r>
   1e90a:	bf00      	nop
   1e90c:	200000f8 	.word	0x200000f8

0001e910 <_kill_r>:
   1e910:	b538      	push	{r3, r4, r5, lr}
   1e912:	460b      	mov	r3, r1
   1e914:	4c07      	ldr	r4, [pc, #28]	; (1e934 <_kill_r+0x24>)
   1e916:	4605      	mov	r5, r0
   1e918:	4611      	mov	r1, r2
   1e91a:	4618      	mov	r0, r3
   1e91c:	2300      	movs	r3, #0
   1e91e:	6023      	str	r3, [r4, #0]
   1e920:	f003 ff92 	bl	22848 <_kill>
   1e924:	1c43      	adds	r3, r0, #1
   1e926:	d000      	beq.n	1e92a <_kill_r+0x1a>
   1e928:	bd38      	pop	{r3, r4, r5, pc}
   1e92a:	6823      	ldr	r3, [r4, #0]
   1e92c:	2b00      	cmp	r3, #0
   1e92e:	d0fb      	beq.n	1e928 <_kill_r+0x18>
   1e930:	602b      	str	r3, [r5, #0]
   1e932:	bd38      	pop	{r3, r4, r5, pc}
   1e934:	20002390 	.word	0x20002390

0001e938 <_getpid_r>:
   1e938:	f003 bf0a 	b.w	22750 <_getpid>

0001e93c <sprintf>:
   1e93c:	b40e      	push	{r1, r2, r3}
   1e93e:	b5f0      	push	{r4, r5, r6, r7, lr}
   1e940:	b09c      	sub	sp, #112	; 0x70
   1e942:	ab21      	add	r3, sp, #132	; 0x84
   1e944:	490f      	ldr	r1, [pc, #60]	; (1e984 <sprintf+0x48>)
   1e946:	f853 2b04 	ldr.w	r2, [r3], #4
   1e94a:	9301      	str	r3, [sp, #4]
   1e94c:	4605      	mov	r5, r0
   1e94e:	f06f 4400 	mvn.w	r4, #2147483648	; 0x80000000
   1e952:	6808      	ldr	r0, [r1, #0]
   1e954:	9502      	str	r5, [sp, #8]
   1e956:	f44f 7702 	mov.w	r7, #520	; 0x208
   1e95a:	f64f 76ff 	movw	r6, #65535	; 0xffff
   1e95e:	a902      	add	r1, sp, #8
   1e960:	9506      	str	r5, [sp, #24]
   1e962:	f8ad 7014 	strh.w	r7, [sp, #20]
   1e966:	9404      	str	r4, [sp, #16]
   1e968:	9407      	str	r4, [sp, #28]
   1e96a:	f8ad 6016 	strh.w	r6, [sp, #22]
   1e96e:	f000 fa47 	bl	1ee00 <_svfprintf_r>
   1e972:	9b02      	ldr	r3, [sp, #8]
   1e974:	2200      	movs	r2, #0
   1e976:	701a      	strb	r2, [r3, #0]
   1e978:	b01c      	add	sp, #112	; 0x70
   1e97a:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
   1e97e:	b003      	add	sp, #12
   1e980:	4770      	bx	lr
   1e982:	bf00      	nop
   1e984:	200000f8 	.word	0x200000f8
	...
   1e9a0:	eba2 0003 	sub.w	r0, r2, r3
   1e9a4:	4770      	bx	lr
   1e9a6:	bf00      	nop

0001e9a8 <strcmp>:
   1e9a8:	7802      	ldrb	r2, [r0, #0]
   1e9aa:	780b      	ldrb	r3, [r1, #0]
   1e9ac:	2a01      	cmp	r2, #1
   1e9ae:	bf28      	it	cs
   1e9b0:	429a      	cmpcs	r2, r3
   1e9b2:	d1f5      	bne.n	1e9a0 <sprintf+0x64>
   1e9b4:	e96d 4504 	strd	r4, r5, [sp, #-16]!
   1e9b8:	ea40 0401 	orr.w	r4, r0, r1
   1e9bc:	e9cd 6702 	strd	r6, r7, [sp, #8]
   1e9c0:	f06f 0c00 	mvn.w	ip, #0
   1e9c4:	ea4f 7244 	mov.w	r2, r4, lsl #29
   1e9c8:	b312      	cbz	r2, 1ea10 <strcmp+0x68>
   1e9ca:	ea80 0401 	eor.w	r4, r0, r1
   1e9ce:	f014 0f07 	tst.w	r4, #7
   1e9d2:	d16a      	bne.n	1eaaa <strcmp+0x102>
   1e9d4:	f000 0407 	and.w	r4, r0, #7
   1e9d8:	f020 0007 	bic.w	r0, r0, #7
   1e9dc:	f004 0503 	and.w	r5, r4, #3
   1e9e0:	f021 0107 	bic.w	r1, r1, #7
   1e9e4:	ea4f 05c5 	mov.w	r5, r5, lsl #3
   1e9e8:	e8f0 2304 	ldrd	r2, r3, [r0], #16
   1e9ec:	f014 0f04 	tst.w	r4, #4
   1e9f0:	e8f1 6704 	ldrd	r6, r7, [r1], #16
   1e9f4:	fa0c f405 	lsl.w	r4, ip, r5
   1e9f8:	ea62 0204 	orn	r2, r2, r4
   1e9fc:	ea66 0604 	orn	r6, r6, r4
   1ea00:	d00a      	beq.n	1ea18 <strcmp+0x70>
   1ea02:	ea63 0304 	orn	r3, r3, r4
   1ea06:	4662      	mov	r2, ip
   1ea08:	ea67 0704 	orn	r7, r7, r4
   1ea0c:	4666      	mov	r6, ip
   1ea0e:	e003      	b.n	1ea18 <strcmp+0x70>
   1ea10:	e8f0 2304 	ldrd	r2, r3, [r0], #16
   1ea14:	e8f1 6704 	ldrd	r6, r7, [r1], #16
   1ea18:	fa82 f54c 	uadd8	r5, r2, ip
   1ea1c:	ea82 0406 	eor.w	r4, r2, r6
   1ea20:	faa4 f48c 	sel	r4, r4, ip
   1ea24:	bb6c      	cbnz	r4, 1ea82 <strcmp+0xda>
   1ea26:	fa83 f54c 	uadd8	r5, r3, ip
   1ea2a:	ea83 0507 	eor.w	r5, r3, r7
   1ea2e:	faa5 f58c 	sel	r5, r5, ip
   1ea32:	b995      	cbnz	r5, 1ea5a <strcmp+0xb2>
   1ea34:	e950 2302 	ldrd	r2, r3, [r0, #-8]
   1ea38:	e951 6702 	ldrd	r6, r7, [r1, #-8]
   1ea3c:	fa82 f54c 	uadd8	r5, r2, ip
   1ea40:	ea82 0406 	eor.w	r4, r2, r6
   1ea44:	faa4 f48c 	sel	r4, r4, ip
   1ea48:	fa83 f54c 	uadd8	r5, r3, ip
   1ea4c:	ea83 0507 	eor.w	r5, r3, r7
   1ea50:	faa5 f58c 	sel	r5, r5, ip
   1ea54:	4325      	orrs	r5, r4
   1ea56:	d0db      	beq.n	1ea10 <strcmp+0x68>
   1ea58:	b99c      	cbnz	r4, 1ea82 <strcmp+0xda>
   1ea5a:	ba2d      	rev	r5, r5
   1ea5c:	fab5 f485 	clz	r4, r5
   1ea60:	f024 0407 	bic.w	r4, r4, #7
   1ea64:	fa27 f104 	lsr.w	r1, r7, r4
   1ea68:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
   1ea6c:	fa23 f304 	lsr.w	r3, r3, r4
   1ea70:	f003 00ff 	and.w	r0, r3, #255	; 0xff
   1ea74:	f001 01ff 	and.w	r1, r1, #255	; 0xff
   1ea78:	e8fd 4504 	ldrd	r4, r5, [sp], #16
   1ea7c:	eba0 0001 	sub.w	r0, r0, r1
   1ea80:	4770      	bx	lr
   1ea82:	ba24      	rev	r4, r4
   1ea84:	fab4 f484 	clz	r4, r4
   1ea88:	f024 0407 	bic.w	r4, r4, #7
   1ea8c:	fa26 f104 	lsr.w	r1, r6, r4
   1ea90:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
   1ea94:	fa22 f204 	lsr.w	r2, r2, r4
   1ea98:	f002 00ff 	and.w	r0, r2, #255	; 0xff
   1ea9c:	f001 01ff 	and.w	r1, r1, #255	; 0xff
   1eaa0:	e8fd 4504 	ldrd	r4, r5, [sp], #16
   1eaa4:	eba0 0001 	sub.w	r0, r0, r1
   1eaa8:	4770      	bx	lr
   1eaaa:	f014 0f03 	tst.w	r4, #3
   1eaae:	d13c      	bne.n	1eb2a <strcmp+0x182>
   1eab0:	f010 0403 	ands.w	r4, r0, #3
   1eab4:	d128      	bne.n	1eb08 <strcmp+0x160>
   1eab6:	f850 2b08 	ldr.w	r2, [r0], #8
   1eaba:	f851 3b08 	ldr.w	r3, [r1], #8
   1eabe:	fa82 f54c 	uadd8	r5, r2, ip
   1eac2:	ea82 0503 	eor.w	r5, r2, r3
   1eac6:	faa5 f58c 	sel	r5, r5, ip
   1eaca:	b95d      	cbnz	r5, 1eae4 <strcmp+0x13c>
   1eacc:	f850 2c04 	ldr.w	r2, [r0, #-4]
   1ead0:	f851 3c04 	ldr.w	r3, [r1, #-4]
   1ead4:	fa82 f54c 	uadd8	r5, r2, ip
   1ead8:	ea82 0503 	eor.w	r5, r2, r3
   1eadc:	faa5 f58c 	sel	r5, r5, ip
   1eae0:	2d00      	cmp	r5, #0
   1eae2:	d0e8      	beq.n	1eab6 <strcmp+0x10e>
   1eae4:	ba2d      	rev	r5, r5
   1eae6:	fab5 f485 	clz	r4, r5
   1eaea:	f024 0407 	bic.w	r4, r4, #7
   1eaee:	fa23 f104 	lsr.w	r1, r3, r4
   1eaf2:	fa22 f204 	lsr.w	r2, r2, r4
   1eaf6:	f002 00ff 	and.w	r0, r2, #255	; 0xff
   1eafa:	f001 01ff 	and.w	r1, r1, #255	; 0xff
   1eafe:	e8fd 4504 	ldrd	r4, r5, [sp], #16
   1eb02:	eba0 0001 	sub.w	r0, r0, r1
   1eb06:	4770      	bx	lr
   1eb08:	ea4f 04c4 	mov.w	r4, r4, lsl #3
   1eb0c:	f020 0003 	bic.w	r0, r0, #3
   1eb10:	f850 2b08 	ldr.w	r2, [r0], #8
   1eb14:	f021 0103 	bic.w	r1, r1, #3
   1eb18:	f851 3b08 	ldr.w	r3, [r1], #8
   1eb1c:	fa0c f404 	lsl.w	r4, ip, r4
   1eb20:	ea62 0204 	orn	r2, r2, r4
   1eb24:	ea63 0304 	orn	r3, r3, r4
   1eb28:	e7c9      	b.n	1eabe <strcmp+0x116>
   1eb2a:	f010 0403 	ands.w	r4, r0, #3
   1eb2e:	d01a      	beq.n	1eb66 <strcmp+0x1be>
   1eb30:	eba1 0104 	sub.w	r1, r1, r4
   1eb34:	f020 0003 	bic.w	r0, r0, #3
   1eb38:	07e4      	lsls	r4, r4, #31
   1eb3a:	f850 2b04 	ldr.w	r2, [r0], #4
   1eb3e:	d006      	beq.n	1eb4e <strcmp+0x1a6>
   1eb40:	d20f      	bcs.n	1eb62 <strcmp+0x1ba>
   1eb42:	788b      	ldrb	r3, [r1, #2]
   1eb44:	fa5f f4a2 	uxtb.w	r4, r2, ror #16
   1eb48:	1ae4      	subs	r4, r4, r3
   1eb4a:	d106      	bne.n	1eb5a <strcmp+0x1b2>
   1eb4c:	b12b      	cbz	r3, 1eb5a <strcmp+0x1b2>
   1eb4e:	78cb      	ldrb	r3, [r1, #3]
   1eb50:	fa5f f4b2 	uxtb.w	r4, r2, ror #24
   1eb54:	1ae4      	subs	r4, r4, r3
   1eb56:	d100      	bne.n	1eb5a <strcmp+0x1b2>
   1eb58:	b91b      	cbnz	r3, 1eb62 <strcmp+0x1ba>
   1eb5a:	4620      	mov	r0, r4
   1eb5c:	f85d 4b10 	ldr.w	r4, [sp], #16
   1eb60:	4770      	bx	lr
   1eb62:	f101 0104 	add.w	r1, r1, #4
   1eb66:	f850 2b04 	ldr.w	r2, [r0], #4
   1eb6a:	07cc      	lsls	r4, r1, #31
   1eb6c:	f021 0103 	bic.w	r1, r1, #3
   1eb70:	f851 3b04 	ldr.w	r3, [r1], #4
   1eb74:	d848      	bhi.n	1ec08 <strcmp+0x260>
   1eb76:	d224      	bcs.n	1ebc2 <strcmp+0x21a>
   1eb78:	f022 447f 	bic.w	r4, r2, #4278190080	; 0xff000000
   1eb7c:	fa82 f54c 	uadd8	r5, r2, ip
   1eb80:	ea94 2513 	eors.w	r5, r4, r3, lsr #8
   1eb84:	faa5 f58c 	sel	r5, r5, ip
   1eb88:	d10a      	bne.n	1eba0 <strcmp+0x1f8>
   1eb8a:	b965      	cbnz	r5, 1eba6 <strcmp+0x1fe>
   1eb8c:	f851 3b04 	ldr.w	r3, [r1], #4
   1eb90:	ea84 0402 	eor.w	r4, r4, r2
   1eb94:	ebb4 6f03 	cmp.w	r4, r3, lsl #24
   1eb98:	d10e      	bne.n	1ebb8 <strcmp+0x210>
   1eb9a:	f850 2b04 	ldr.w	r2, [r0], #4
   1eb9e:	e7eb      	b.n	1eb78 <strcmp+0x1d0>
   1eba0:	ea4f 2313 	mov.w	r3, r3, lsr #8
   1eba4:	e055      	b.n	1ec52 <strcmp+0x2aa>
   1eba6:	f035 457f 	bics.w	r5, r5, #4278190080	; 0xff000000
   1ebaa:	d14d      	bne.n	1ec48 <strcmp+0x2a0>
   1ebac:	7808      	ldrb	r0, [r1, #0]
   1ebae:	e8fd 4504 	ldrd	r4, r5, [sp], #16
   1ebb2:	f1c0 0000 	rsb	r0, r0, #0
   1ebb6:	4770      	bx	lr
   1ebb8:	ea4f 6212 	mov.w	r2, r2, lsr #24
   1ebbc:	f003 03ff 	and.w	r3, r3, #255	; 0xff
   1ebc0:	e047      	b.n	1ec52 <strcmp+0x2aa>
   1ebc2:	ea02 441c 	and.w	r4, r2, ip, lsr #16
   1ebc6:	fa82 f54c 	uadd8	r5, r2, ip
   1ebca:	ea94 4513 	eors.w	r5, r4, r3, lsr #16
   1ebce:	faa5 f58c 	sel	r5, r5, ip
   1ebd2:	d10a      	bne.n	1ebea <strcmp+0x242>
   1ebd4:	b965      	cbnz	r5, 1ebf0 <strcmp+0x248>
   1ebd6:	f851 3b04 	ldr.w	r3, [r1], #4
   1ebda:	ea84 0402 	eor.w	r4, r4, r2
   1ebde:	ebb4 4f03 	cmp.w	r4, r3, lsl #16
   1ebe2:	d10c      	bne.n	1ebfe <strcmp+0x256>
   1ebe4:	f850 2b04 	ldr.w	r2, [r0], #4
   1ebe8:	e7eb      	b.n	1ebc2 <strcmp+0x21a>
   1ebea:	ea4f 4313 	mov.w	r3, r3, lsr #16
   1ebee:	e030      	b.n	1ec52 <strcmp+0x2aa>
   1ebf0:	ea15 451c 	ands.w	r5, r5, ip, lsr #16
   1ebf4:	d128      	bne.n	1ec48 <strcmp+0x2a0>
   1ebf6:	880b      	ldrh	r3, [r1, #0]
   1ebf8:	ea4f 4212 	mov.w	r2, r2, lsr #16
   1ebfc:	e029      	b.n	1ec52 <strcmp+0x2aa>
   1ebfe:	ea4f 4212 	mov.w	r2, r2, lsr #16
   1ec02:	ea03 431c 	and.w	r3, r3, ip, lsr #16
   1ec06:	e024      	b.n	1ec52 <strcmp+0x2aa>
   1ec08:	f002 04ff 	and.w	r4, r2, #255	; 0xff
   1ec0c:	fa82 f54c 	uadd8	r5, r2, ip
   1ec10:	ea94 6513 	eors.w	r5, r4, r3, lsr #24
   1ec14:	faa5 f58c 	sel	r5, r5, ip
   1ec18:	d10a      	bne.n	1ec30 <strcmp+0x288>
   1ec1a:	b965      	cbnz	r5, 1ec36 <strcmp+0x28e>
   1ec1c:	f851 3b04 	ldr.w	r3, [r1], #4
   1ec20:	ea84 0402 	eor.w	r4, r4, r2
   1ec24:	ebb4 2f03 	cmp.w	r4, r3, lsl #8
   1ec28:	d109      	bne.n	1ec3e <strcmp+0x296>
   1ec2a:	f850 2b04 	ldr.w	r2, [r0], #4
   1ec2e:	e7eb      	b.n	1ec08 <strcmp+0x260>
   1ec30:	ea4f 6313 	mov.w	r3, r3, lsr #24
   1ec34:	e00d      	b.n	1ec52 <strcmp+0x2aa>
   1ec36:	f015 0fff 	tst.w	r5, #255	; 0xff
   1ec3a:	d105      	bne.n	1ec48 <strcmp+0x2a0>
   1ec3c:	680b      	ldr	r3, [r1, #0]
   1ec3e:	ea4f 2212 	mov.w	r2, r2, lsr #8
   1ec42:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
   1ec46:	e004      	b.n	1ec52 <strcmp+0x2aa>
   1ec48:	f04f 0000 	mov.w	r0, #0
   1ec4c:	e8fd 4504 	ldrd	r4, r5, [sp], #16
   1ec50:	4770      	bx	lr
   1ec52:	ba12      	rev	r2, r2
   1ec54:	ba1b      	rev	r3, r3
   1ec56:	fa82 f44c 	uadd8	r4, r2, ip
   1ec5a:	ea82 0403 	eor.w	r4, r2, r3
   1ec5e:	faa4 f58c 	sel	r5, r4, ip
   1ec62:	fab5 f485 	clz	r4, r5
   1ec66:	fa02 f204 	lsl.w	r2, r2, r4
   1ec6a:	fa03 f304 	lsl.w	r3, r3, r4
   1ec6e:	ea4f 6012 	mov.w	r0, r2, lsr #24
   1ec72:	e8fd 4504 	ldrd	r4, r5, [sp], #16
   1ec76:	eba0 6013 	sub.w	r0, r0, r3, lsr #24
   1ec7a:	4770      	bx	lr
   1ec7c:	0000      	movs	r0, r0
	...

0001ec80 <strlen>:
   1ec80:	f890 f000 	pld	[r0]
   1ec84:	e96d 4502 	strd	r4, r5, [sp, #-8]!
   1ec88:	f020 0107 	bic.w	r1, r0, #7
   1ec8c:	f06f 0c00 	mvn.w	ip, #0
   1ec90:	f010 0407 	ands.w	r4, r0, #7
   1ec94:	f891 f020 	pld	[r1, #32]
   1ec98:	f040 8049 	bne.w	1ed2e <strlen+0xae>
   1ec9c:	f04f 0400 	mov.w	r4, #0
   1eca0:	f06f 0007 	mvn.w	r0, #7
   1eca4:	e9d1 2300 	ldrd	r2, r3, [r1]
   1eca8:	f891 f040 	pld	[r1, #64]	; 0x40
   1ecac:	f100 0008 	add.w	r0, r0, #8
   1ecb0:	fa82 f24c 	uadd8	r2, r2, ip
   1ecb4:	faa4 f28c 	sel	r2, r4, ip
   1ecb8:	fa83 f34c 	uadd8	r3, r3, ip
   1ecbc:	faa2 f38c 	sel	r3, r2, ip
   1ecc0:	bb4b      	cbnz	r3, 1ed16 <strlen+0x96>
   1ecc2:	e9d1 2302 	ldrd	r2, r3, [r1, #8]
   1ecc6:	fa82 f24c 	uadd8	r2, r2, ip
   1ecca:	f100 0008 	add.w	r0, r0, #8
   1ecce:	faa4 f28c 	sel	r2, r4, ip
   1ecd2:	fa83 f34c 	uadd8	r3, r3, ip
   1ecd6:	faa2 f38c 	sel	r3, r2, ip
   1ecda:	b9e3      	cbnz	r3, 1ed16 <strlen+0x96>
   1ecdc:	e9d1 2304 	ldrd	r2, r3, [r1, #16]
   1ece0:	fa82 f24c 	uadd8	r2, r2, ip
   1ece4:	f100 0008 	add.w	r0, r0, #8
   1ece8:	faa4 f28c 	sel	r2, r4, ip
   1ecec:	fa83 f34c 	uadd8	r3, r3, ip
   1ecf0:	faa2 f38c 	sel	r3, r2, ip
   1ecf4:	b97b      	cbnz	r3, 1ed16 <strlen+0x96>
   1ecf6:	e9d1 2306 	ldrd	r2, r3, [r1, #24]
   1ecfa:	f101 0120 	add.w	r1, r1, #32
   1ecfe:	fa82 f24c 	uadd8	r2, r2, ip
   1ed02:	f100 0008 	add.w	r0, r0, #8
   1ed06:	faa4 f28c 	sel	r2, r4, ip
   1ed0a:	fa83 f34c 	uadd8	r3, r3, ip
   1ed0e:	faa2 f38c 	sel	r3, r2, ip
   1ed12:	2b00      	cmp	r3, #0
   1ed14:	d0c6      	beq.n	1eca4 <strlen+0x24>
   1ed16:	2a00      	cmp	r2, #0
   1ed18:	bf04      	itt	eq
   1ed1a:	3004      	addeq	r0, #4
   1ed1c:	461a      	moveq	r2, r3
   1ed1e:	ba12      	rev	r2, r2
   1ed20:	fab2 f282 	clz	r2, r2
   1ed24:	e8fd 4502 	ldrd	r4, r5, [sp], #8
   1ed28:	eb00 00d2 	add.w	r0, r0, r2, lsr #3
   1ed2c:	4770      	bx	lr
   1ed2e:	e9d1 2300 	ldrd	r2, r3, [r1]
   1ed32:	f004 0503 	and.w	r5, r4, #3
   1ed36:	f1c4 0000 	rsb	r0, r4, #0
   1ed3a:	ea4f 05c5 	mov.w	r5, r5, lsl #3
   1ed3e:	f014 0f04 	tst.w	r4, #4
   1ed42:	f891 f040 	pld	[r1, #64]	; 0x40
   1ed46:	fa0c f505 	lsl.w	r5, ip, r5
   1ed4a:	ea62 0205 	orn	r2, r2, r5
   1ed4e:	bf1c      	itt	ne
   1ed50:	ea63 0305 	ornne	r3, r3, r5
   1ed54:	4662      	movne	r2, ip
   1ed56:	f04f 0400 	mov.w	r4, #0
   1ed5a:	e7a9      	b.n	1ecb0 <strlen+0x30>

0001ed5c <strncmp>:
   1ed5c:	2a00      	cmp	r2, #0
   1ed5e:	d041      	beq.n	1ede4 <strncmp+0x88>
   1ed60:	ea40 0301 	orr.w	r3, r0, r1
   1ed64:	f013 0303 	ands.w	r3, r3, #3
   1ed68:	b4f0      	push	{r4, r5, r6, r7}
   1ed6a:	d125      	bne.n	1edb8 <strncmp+0x5c>
   1ed6c:	2a03      	cmp	r2, #3
   1ed6e:	d923      	bls.n	1edb8 <strncmp+0x5c>
   1ed70:	6804      	ldr	r4, [r0, #0]
   1ed72:	680d      	ldr	r5, [r1, #0]
   1ed74:	42ac      	cmp	r4, r5
   1ed76:	d11f      	bne.n	1edb8 <strncmp+0x5c>
   1ed78:	3a04      	subs	r2, #4
   1ed7a:	d038      	beq.n	1edee <strncmp+0x92>
   1ed7c:	f1a4 3501 	sub.w	r5, r4, #16843009	; 0x1010101
   1ed80:	ea25 0404 	bic.w	r4, r5, r4
   1ed84:	f014 3f80 	tst.w	r4, #2155905152	; 0x80808080
   1ed88:	d12e      	bne.n	1ede8 <strncmp+0x8c>
   1ed8a:	3004      	adds	r0, #4
   1ed8c:	3104      	adds	r1, #4
   1ed8e:	e00f      	b.n	1edb0 <strncmp+0x54>
   1ed90:	f850 3b04 	ldr.w	r3, [r0], #4
   1ed94:	680e      	ldr	r6, [r1, #0]
   1ed96:	f1a3 3401 	sub.w	r4, r3, #16843009	; 0x1010101
   1ed9a:	42b3      	cmp	r3, r6
   1ed9c:	ea24 0403 	bic.w	r4, r4, r3
   1eda0:	f101 0104 	add.w	r1, r1, #4
   1eda4:	d126      	bne.n	1edf4 <strncmp+0x98>
   1eda6:	3a04      	subs	r2, #4
   1eda8:	d021      	beq.n	1edee <strncmp+0x92>
   1edaa:	f014 3f80 	tst.w	r4, #2155905152	; 0x80808080
   1edae:	d11b      	bne.n	1ede8 <strncmp+0x8c>
   1edb0:	2a03      	cmp	r2, #3
   1edb2:	4607      	mov	r7, r0
   1edb4:	460d      	mov	r5, r1
   1edb6:	d8eb      	bhi.n	1ed90 <strncmp+0x34>
   1edb8:	7805      	ldrb	r5, [r0, #0]
   1edba:	780c      	ldrb	r4, [r1, #0]
   1edbc:	42ac      	cmp	r4, r5
   1edbe:	f102 33ff 	add.w	r3, r2, #4294967295
   1edc2:	d11a      	bne.n	1edfa <strncmp+0x9e>
   1edc4:	b183      	cbz	r3, 1ede8 <strncmp+0x8c>
   1edc6:	b914      	cbnz	r4, 1edce <strncmp+0x72>
   1edc8:	e00e      	b.n	1ede8 <strncmp+0x8c>
   1edca:	b16b      	cbz	r3, 1ede8 <strncmp+0x8c>
   1edcc:	b17a      	cbz	r2, 1edee <strncmp+0x92>
   1edce:	f810 2f01 	ldrb.w	r2, [r0, #1]!
   1edd2:	f811 4f01 	ldrb.w	r4, [r1, #1]!
   1edd6:	42a2      	cmp	r2, r4
   1edd8:	f103 33ff 	add.w	r3, r3, #4294967295
   1eddc:	d0f5      	beq.n	1edca <strncmp+0x6e>
   1edde:	1b10      	subs	r0, r2, r4
   1ede0:	bcf0      	pop	{r4, r5, r6, r7}
   1ede2:	4770      	bx	lr
   1ede4:	4610      	mov	r0, r2
   1ede6:	4770      	bx	lr
   1ede8:	2000      	movs	r0, #0
   1edea:	bcf0      	pop	{r4, r5, r6, r7}
   1edec:	4770      	bx	lr
   1edee:	4610      	mov	r0, r2
   1edf0:	bcf0      	pop	{r4, r5, r6, r7}
   1edf2:	4770      	bx	lr
   1edf4:	4629      	mov	r1, r5
   1edf6:	4638      	mov	r0, r7
   1edf8:	e7de      	b.n	1edb8 <strncmp+0x5c>
   1edfa:	462a      	mov	r2, r5
   1edfc:	e7ef      	b.n	1edde <strncmp+0x82>
   1edfe:	bf00      	nop

0001ee00 <_svfprintf_r>:
   1ee00:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1ee04:	b0c1      	sub	sp, #260	; 0x104
   1ee06:	460c      	mov	r4, r1
   1ee08:	9107      	str	r1, [sp, #28]
   1ee0a:	4692      	mov	sl, r2
   1ee0c:	930b      	str	r3, [sp, #44]	; 0x2c
   1ee0e:	9008      	str	r0, [sp, #32]
   1ee10:	f002 fde2 	bl	219d8 <_localeconv_r>
   1ee14:	6803      	ldr	r3, [r0, #0]
   1ee16:	9314      	str	r3, [sp, #80]	; 0x50
   1ee18:	4618      	mov	r0, r3
   1ee1a:	f7ff ff31 	bl	1ec80 <strlen>
   1ee1e:	89a3      	ldrh	r3, [r4, #12]
   1ee20:	9013      	str	r0, [sp, #76]	; 0x4c
   1ee22:	0619      	lsls	r1, r3, #24
   1ee24:	d503      	bpl.n	1ee2e <_svfprintf_r+0x2e>
   1ee26:	6923      	ldr	r3, [r4, #16]
   1ee28:	2b00      	cmp	r3, #0
   1ee2a:	f001 801b 	beq.w	1fe64 <_svfprintf_r+0x1064>
   1ee2e:	ed9f 7b94 	vldr	d7, [pc, #592]	; 1f080 <_svfprintf_r+0x280>
   1ee32:	ed8d 7b10 	vstr	d7, [sp, #64]	; 0x40
   1ee36:	2300      	movs	r3, #0
   1ee38:	f10d 09c0 	add.w	r9, sp, #192	; 0xc0
   1ee3c:	930f      	str	r3, [sp, #60]	; 0x3c
   1ee3e:	9325      	str	r3, [sp, #148]	; 0x94
   1ee40:	9324      	str	r3, [sp, #144]	; 0x90
   1ee42:	9312      	str	r3, [sp, #72]	; 0x48
   1ee44:	9315      	str	r3, [sp, #84]	; 0x54
   1ee46:	9305      	str	r3, [sp, #20]
   1ee48:	f8cd 908c 	str.w	r9, [sp, #140]	; 0x8c
   1ee4c:	46c8      	mov	r8, r9
   1ee4e:	f89a 3000 	ldrb.w	r3, [sl]
   1ee52:	4654      	mov	r4, sl
   1ee54:	b1e3      	cbz	r3, 1ee90 <_svfprintf_r+0x90>
   1ee56:	2b25      	cmp	r3, #37	; 0x25
   1ee58:	d102      	bne.n	1ee60 <_svfprintf_r+0x60>
   1ee5a:	e019      	b.n	1ee90 <_svfprintf_r+0x90>
   1ee5c:	2b25      	cmp	r3, #37	; 0x25
   1ee5e:	d003      	beq.n	1ee68 <_svfprintf_r+0x68>
   1ee60:	f814 3f01 	ldrb.w	r3, [r4, #1]!
   1ee64:	2b00      	cmp	r3, #0
   1ee66:	d1f9      	bne.n	1ee5c <_svfprintf_r+0x5c>
   1ee68:	eba4 050a 	sub.w	r5, r4, sl
   1ee6c:	b185      	cbz	r5, 1ee90 <_svfprintf_r+0x90>
   1ee6e:	9b24      	ldr	r3, [sp, #144]	; 0x90
   1ee70:	9a25      	ldr	r2, [sp, #148]	; 0x94
   1ee72:	f8c8 a000 	str.w	sl, [r8]
   1ee76:	3301      	adds	r3, #1
   1ee78:	442a      	add	r2, r5
   1ee7a:	2b07      	cmp	r3, #7
   1ee7c:	f8c8 5004 	str.w	r5, [r8, #4]
   1ee80:	9225      	str	r2, [sp, #148]	; 0x94
   1ee82:	9324      	str	r3, [sp, #144]	; 0x90
   1ee84:	dc7f      	bgt.n	1ef86 <_svfprintf_r+0x186>
   1ee86:	f108 0808 	add.w	r8, r8, #8
   1ee8a:	9b05      	ldr	r3, [sp, #20]
   1ee8c:	442b      	add	r3, r5
   1ee8e:	9305      	str	r3, [sp, #20]
   1ee90:	7823      	ldrb	r3, [r4, #0]
   1ee92:	2b00      	cmp	r3, #0
   1ee94:	d07f      	beq.n	1ef96 <_svfprintf_r+0x196>
   1ee96:	2300      	movs	r3, #0
   1ee98:	461a      	mov	r2, r3
   1ee9a:	f88d 306f 	strb.w	r3, [sp, #111]	; 0x6f
   1ee9e:	4619      	mov	r1, r3
   1eea0:	9309      	str	r3, [sp, #36]	; 0x24
   1eea2:	469b      	mov	fp, r3
   1eea4:	f04f 30ff 	mov.w	r0, #4294967295
   1eea8:	7863      	ldrb	r3, [r4, #1]
   1eeaa:	9006      	str	r0, [sp, #24]
   1eeac:	f104 0a01 	add.w	sl, r4, #1
   1eeb0:	f10a 0a01 	add.w	sl, sl, #1
   1eeb4:	f1a3 0020 	sub.w	r0, r3, #32
   1eeb8:	2858      	cmp	r0, #88	; 0x58
   1eeba:	f200 83d3 	bhi.w	1f664 <_svfprintf_r+0x864>
   1eebe:	e8df f010 	tbh	[pc, r0, lsl #1]
   1eec2:	023f      	.short	0x023f
   1eec4:	03d103d1 	.word	0x03d103d1
   1eec8:	03d10247 	.word	0x03d10247
   1eecc:	03d103d1 	.word	0x03d103d1
   1eed0:	03d103d1 	.word	0x03d103d1
   1eed4:	024c03d1 	.word	0x024c03d1
   1eed8:	03d1020a 	.word	0x03d1020a
   1eedc:	0273005d 	.word	0x0273005d
   1eee0:	028e03d1 	.word	0x028e03d1
   1eee4:	03c103c1 	.word	0x03c103c1
   1eee8:	03c103c1 	.word	0x03c103c1
   1eeec:	03c103c1 	.word	0x03c103c1
   1eef0:	03c103c1 	.word	0x03c103c1
   1eef4:	03d103c1 	.word	0x03d103c1
   1eef8:	03d103d1 	.word	0x03d103d1
   1eefc:	03d103d1 	.word	0x03d103d1
   1ef00:	03d103d1 	.word	0x03d103d1
   1ef04:	03d103d1 	.word	0x03d103d1
   1ef08:	033f03d1 	.word	0x033f03d1
   1ef0c:	03d1035f 	.word	0x03d1035f
   1ef10:	03d1035f 	.word	0x03d1035f
   1ef14:	03d103d1 	.word	0x03d103d1
   1ef18:	03aa03d1 	.word	0x03aa03d1
   1ef1c:	03d103d1 	.word	0x03d103d1
   1ef20:	03d103af 	.word	0x03d103af
   1ef24:	03d103d1 	.word	0x03d103d1
   1ef28:	03d103d1 	.word	0x03d103d1
   1ef2c:	03d10261 	.word	0x03d10261
   1ef30:	032603d1 	.word	0x032603d1
   1ef34:	03d103d1 	.word	0x03d103d1
   1ef38:	03d103d1 	.word	0x03d103d1
   1ef3c:	03d103d1 	.word	0x03d103d1
   1ef40:	03d103d1 	.word	0x03d103d1
   1ef44:	03d103d1 	.word	0x03d103d1
   1ef48:	02e302ce 	.word	0x02e302ce
   1ef4c:	035f035f 	.word	0x035f035f
   1ef50:	0293035f 	.word	0x0293035f
   1ef54:	03d102e3 	.word	0x03d102e3
   1ef58:	029803d1 	.word	0x029803d1
   1ef5c:	02a503d1 	.word	0x02a503d1
   1ef60:	02bc01d3 	.word	0x02bc01d3
   1ef64:	03d1020f 	.word	0x03d1020f
   1ef68:	03d101e8 	.word	0x03d101e8
   1ef6c:	03d1007e 	.word	0x03d1007e
   1ef70:	021403d1 	.word	0x021403d1
   1ef74:	9809      	ldr	r0, [sp, #36]	; 0x24
   1ef76:	930b      	str	r3, [sp, #44]	; 0x2c
   1ef78:	4240      	negs	r0, r0
   1ef7a:	9009      	str	r0, [sp, #36]	; 0x24
   1ef7c:	f04b 0b04 	orr.w	fp, fp, #4
   1ef80:	f89a 3000 	ldrb.w	r3, [sl]
   1ef84:	e794      	b.n	1eeb0 <_svfprintf_r+0xb0>
   1ef86:	aa23      	add	r2, sp, #140	; 0x8c
   1ef88:	9907      	ldr	r1, [sp, #28]
   1ef8a:	9808      	ldr	r0, [sp, #32]
   1ef8c:	f003 f8ea 	bl	22164 <__ssprint_r>
   1ef90:	b940      	cbnz	r0, 1efa4 <_svfprintf_r+0x1a4>
   1ef92:	46c8      	mov	r8, r9
   1ef94:	e779      	b.n	1ee8a <_svfprintf_r+0x8a>
   1ef96:	9b25      	ldr	r3, [sp, #148]	; 0x94
   1ef98:	b123      	cbz	r3, 1efa4 <_svfprintf_r+0x1a4>
   1ef9a:	9808      	ldr	r0, [sp, #32]
   1ef9c:	9907      	ldr	r1, [sp, #28]
   1ef9e:	aa23      	add	r2, sp, #140	; 0x8c
   1efa0:	f003 f8e0 	bl	22164 <__ssprint_r>
   1efa4:	9b07      	ldr	r3, [sp, #28]
   1efa6:	899b      	ldrh	r3, [r3, #12]
   1efa8:	f013 0f40 	tst.w	r3, #64	; 0x40
   1efac:	9b05      	ldr	r3, [sp, #20]
   1efae:	bf18      	it	ne
   1efb0:	f04f 33ff 	movne.w	r3, #4294967295
   1efb4:	9305      	str	r3, [sp, #20]
   1efb6:	9805      	ldr	r0, [sp, #20]
   1efb8:	b041      	add	sp, #260	; 0x104
   1efba:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1efbe:	f01b 0f20 	tst.w	fp, #32
   1efc2:	930d      	str	r3, [sp, #52]	; 0x34
   1efc4:	f040 81e5 	bne.w	1f392 <_svfprintf_r+0x592>
   1efc8:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
   1efca:	f01b 0f10 	tst.w	fp, #16
   1efce:	4613      	mov	r3, r2
   1efd0:	f040 8588 	bne.w	1fae4 <_svfprintf_r+0xce4>
   1efd4:	f01b 0f40 	tst.w	fp, #64	; 0x40
   1efd8:	f000 8584 	beq.w	1fae4 <_svfprintf_r+0xce4>
   1efdc:	8814      	ldrh	r4, [r2, #0]
   1efde:	3204      	adds	r2, #4
   1efe0:	2500      	movs	r5, #0
   1efe2:	2301      	movs	r3, #1
   1efe4:	920b      	str	r2, [sp, #44]	; 0x2c
   1efe6:	2700      	movs	r7, #0
   1efe8:	f88d 706f 	strb.w	r7, [sp, #111]	; 0x6f
   1efec:	9906      	ldr	r1, [sp, #24]
   1efee:	1c4a      	adds	r2, r1, #1
   1eff0:	f000 826d 	beq.w	1f4ce <_svfprintf_r+0x6ce>
   1eff4:	f02b 0280 	bic.w	r2, fp, #128	; 0x80
   1eff8:	9203      	str	r2, [sp, #12]
   1effa:	ea54 0205 	orrs.w	r2, r4, r5
   1effe:	f040 826c 	bne.w	1f4da <_svfprintf_r+0x6da>
   1f002:	2900      	cmp	r1, #0
   1f004:	f040 8451 	bne.w	1f8aa <_svfprintf_r+0xaaa>
   1f008:	2b00      	cmp	r3, #0
   1f00a:	f040 850b 	bne.w	1fa24 <_svfprintf_r+0xc24>
   1f00e:	f01b 0301 	ands.w	r3, fp, #1
   1f012:	930a      	str	r3, [sp, #40]	; 0x28
   1f014:	f000 861a 	beq.w	1fc4c <_svfprintf_r+0xe4c>
   1f018:	ae40      	add	r6, sp, #256	; 0x100
   1f01a:	2330      	movs	r3, #48	; 0x30
   1f01c:	f806 3d41 	strb.w	r3, [r6, #-65]!
   1f020:	9b06      	ldr	r3, [sp, #24]
   1f022:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   1f024:	4293      	cmp	r3, r2
   1f026:	bfb8      	it	lt
   1f028:	4613      	movlt	r3, r2
   1f02a:	9304      	str	r3, [sp, #16]
   1f02c:	2300      	movs	r3, #0
   1f02e:	930e      	str	r3, [sp, #56]	; 0x38
   1f030:	b117      	cbz	r7, 1f038 <_svfprintf_r+0x238>
   1f032:	9b04      	ldr	r3, [sp, #16]
   1f034:	3301      	adds	r3, #1
   1f036:	9304      	str	r3, [sp, #16]
   1f038:	9b03      	ldr	r3, [sp, #12]
   1f03a:	f013 0302 	ands.w	r3, r3, #2
   1f03e:	930c      	str	r3, [sp, #48]	; 0x30
   1f040:	d002      	beq.n	1f048 <_svfprintf_r+0x248>
   1f042:	9b04      	ldr	r3, [sp, #16]
   1f044:	3302      	adds	r3, #2
   1f046:	9304      	str	r3, [sp, #16]
   1f048:	9b03      	ldr	r3, [sp, #12]
   1f04a:	f013 0584 	ands.w	r5, r3, #132	; 0x84
   1f04e:	f040 8320 	bne.w	1f692 <_svfprintf_r+0x892>
   1f052:	9b09      	ldr	r3, [sp, #36]	; 0x24
   1f054:	9a04      	ldr	r2, [sp, #16]
   1f056:	eba3 0b02 	sub.w	fp, r3, r2
   1f05a:	f1bb 0f00 	cmp.w	fp, #0
   1f05e:	f340 8318 	ble.w	1f692 <_svfprintf_r+0x892>
   1f062:	f1bb 0f10 	cmp.w	fp, #16
   1f066:	9c25      	ldr	r4, [sp, #148]	; 0x94
   1f068:	9a24      	ldr	r2, [sp, #144]	; 0x90
   1f06a:	dd30      	ble.n	1f0ce <_svfprintf_r+0x2ce>
   1f06c:	4643      	mov	r3, r8
   1f06e:	4621      	mov	r1, r4
   1f070:	46a8      	mov	r8, r5
   1f072:	2710      	movs	r7, #16
   1f074:	9c08      	ldr	r4, [sp, #32]
   1f076:	9d07      	ldr	r5, [sp, #28]
   1f078:	e00d      	b.n	1f096 <_svfprintf_r+0x296>
   1f07a:	bf00      	nop
   1f07c:	f3af 8000 	nop.w
	...
   1f088:	f1ab 0b10 	sub.w	fp, fp, #16
   1f08c:	f1bb 0f10 	cmp.w	fp, #16
   1f090:	f103 0308 	add.w	r3, r3, #8
   1f094:	dd18      	ble.n	1f0c8 <_svfprintf_r+0x2c8>
   1f096:	3201      	adds	r2, #1
   1f098:	48b7      	ldr	r0, [pc, #732]	; (1f378 <_svfprintf_r+0x578>)
   1f09a:	9224      	str	r2, [sp, #144]	; 0x90
   1f09c:	3110      	adds	r1, #16
   1f09e:	2a07      	cmp	r2, #7
   1f0a0:	9125      	str	r1, [sp, #148]	; 0x94
   1f0a2:	e883 0081 	stmia.w	r3, {r0, r7}
   1f0a6:	ddef      	ble.n	1f088 <_svfprintf_r+0x288>
   1f0a8:	aa23      	add	r2, sp, #140	; 0x8c
   1f0aa:	4629      	mov	r1, r5
   1f0ac:	4620      	mov	r0, r4
   1f0ae:	f003 f859 	bl	22164 <__ssprint_r>
   1f0b2:	2800      	cmp	r0, #0
   1f0b4:	f47f af76 	bne.w	1efa4 <_svfprintf_r+0x1a4>
   1f0b8:	f1ab 0b10 	sub.w	fp, fp, #16
   1f0bc:	f1bb 0f10 	cmp.w	fp, #16
   1f0c0:	9925      	ldr	r1, [sp, #148]	; 0x94
   1f0c2:	9a24      	ldr	r2, [sp, #144]	; 0x90
   1f0c4:	464b      	mov	r3, r9
   1f0c6:	dce6      	bgt.n	1f096 <_svfprintf_r+0x296>
   1f0c8:	4645      	mov	r5, r8
   1f0ca:	460c      	mov	r4, r1
   1f0cc:	4698      	mov	r8, r3
   1f0ce:	3201      	adds	r2, #1
   1f0d0:	4ba9      	ldr	r3, [pc, #676]	; (1f378 <_svfprintf_r+0x578>)
   1f0d2:	9224      	str	r2, [sp, #144]	; 0x90
   1f0d4:	445c      	add	r4, fp
   1f0d6:	2a07      	cmp	r2, #7
   1f0d8:	9425      	str	r4, [sp, #148]	; 0x94
   1f0da:	e888 0808 	stmia.w	r8, {r3, fp}
   1f0de:	f300 84a6 	bgt.w	1fa2e <_svfprintf_r+0xc2e>
   1f0e2:	f89d 706f 	ldrb.w	r7, [sp, #111]	; 0x6f
   1f0e6:	f108 0808 	add.w	r8, r8, #8
   1f0ea:	b177      	cbz	r7, 1f10a <_svfprintf_r+0x30a>
   1f0ec:	9b24      	ldr	r3, [sp, #144]	; 0x90
   1f0ee:	3301      	adds	r3, #1
   1f0f0:	3401      	adds	r4, #1
   1f0f2:	f10d 016f 	add.w	r1, sp, #111	; 0x6f
   1f0f6:	2201      	movs	r2, #1
   1f0f8:	2b07      	cmp	r3, #7
   1f0fa:	9425      	str	r4, [sp, #148]	; 0x94
   1f0fc:	9324      	str	r3, [sp, #144]	; 0x90
   1f0fe:	e888 0006 	stmia.w	r8, {r1, r2}
   1f102:	f300 83f4 	bgt.w	1f8ee <_svfprintf_r+0xaee>
   1f106:	f108 0808 	add.w	r8, r8, #8
   1f10a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   1f10c:	b16b      	cbz	r3, 1f12a <_svfprintf_r+0x32a>
   1f10e:	9b24      	ldr	r3, [sp, #144]	; 0x90
   1f110:	3301      	adds	r3, #1
   1f112:	3402      	adds	r4, #2
   1f114:	a91c      	add	r1, sp, #112	; 0x70
   1f116:	2202      	movs	r2, #2
   1f118:	2b07      	cmp	r3, #7
   1f11a:	9425      	str	r4, [sp, #148]	; 0x94
   1f11c:	9324      	str	r3, [sp, #144]	; 0x90
   1f11e:	e888 0006 	stmia.w	r8, {r1, r2}
   1f122:	f300 83d9 	bgt.w	1f8d8 <_svfprintf_r+0xad8>
   1f126:	f108 0808 	add.w	r8, r8, #8
   1f12a:	2d80      	cmp	r5, #128	; 0x80
   1f12c:	f000 8322 	beq.w	1f774 <_svfprintf_r+0x974>
   1f130:	9b06      	ldr	r3, [sp, #24]
   1f132:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   1f134:	1a9f      	subs	r7, r3, r2
   1f136:	2f00      	cmp	r7, #0
   1f138:	dd36      	ble.n	1f1a8 <_svfprintf_r+0x3a8>
   1f13a:	2f10      	cmp	r7, #16
   1f13c:	9b24      	ldr	r3, [sp, #144]	; 0x90
   1f13e:	4d8f      	ldr	r5, [pc, #572]	; (1f37c <_svfprintf_r+0x57c>)
   1f140:	dd27      	ble.n	1f192 <_svfprintf_r+0x392>
   1f142:	4642      	mov	r2, r8
   1f144:	4621      	mov	r1, r4
   1f146:	46b0      	mov	r8, r6
   1f148:	f04f 0b10 	mov.w	fp, #16
   1f14c:	462e      	mov	r6, r5
   1f14e:	9c08      	ldr	r4, [sp, #32]
   1f150:	9d07      	ldr	r5, [sp, #28]
   1f152:	e004      	b.n	1f15e <_svfprintf_r+0x35e>
   1f154:	3f10      	subs	r7, #16
   1f156:	2f10      	cmp	r7, #16
   1f158:	f102 0208 	add.w	r2, r2, #8
   1f15c:	dd15      	ble.n	1f18a <_svfprintf_r+0x38a>
   1f15e:	3301      	adds	r3, #1
   1f160:	3110      	adds	r1, #16
   1f162:	2b07      	cmp	r3, #7
   1f164:	9125      	str	r1, [sp, #148]	; 0x94
   1f166:	9324      	str	r3, [sp, #144]	; 0x90
   1f168:	e882 0840 	stmia.w	r2, {r6, fp}
   1f16c:	ddf2      	ble.n	1f154 <_svfprintf_r+0x354>
   1f16e:	aa23      	add	r2, sp, #140	; 0x8c
   1f170:	4629      	mov	r1, r5
   1f172:	4620      	mov	r0, r4
   1f174:	f002 fff6 	bl	22164 <__ssprint_r>
   1f178:	2800      	cmp	r0, #0
   1f17a:	f47f af13 	bne.w	1efa4 <_svfprintf_r+0x1a4>
   1f17e:	3f10      	subs	r7, #16
   1f180:	2f10      	cmp	r7, #16
   1f182:	9925      	ldr	r1, [sp, #148]	; 0x94
   1f184:	9b24      	ldr	r3, [sp, #144]	; 0x90
   1f186:	464a      	mov	r2, r9
   1f188:	dce9      	bgt.n	1f15e <_svfprintf_r+0x35e>
   1f18a:	4635      	mov	r5, r6
   1f18c:	460c      	mov	r4, r1
   1f18e:	4646      	mov	r6, r8
   1f190:	4690      	mov	r8, r2
   1f192:	3301      	adds	r3, #1
   1f194:	443c      	add	r4, r7
   1f196:	2b07      	cmp	r3, #7
   1f198:	9425      	str	r4, [sp, #148]	; 0x94
   1f19a:	9324      	str	r3, [sp, #144]	; 0x90
   1f19c:	e888 00a0 	stmia.w	r8, {r5, r7}
   1f1a0:	f300 838f 	bgt.w	1f8c2 <_svfprintf_r+0xac2>
   1f1a4:	f108 0808 	add.w	r8, r8, #8
   1f1a8:	9b03      	ldr	r3, [sp, #12]
   1f1aa:	05df      	lsls	r7, r3, #23
   1f1ac:	f100 8273 	bmi.w	1f696 <_svfprintf_r+0x896>
   1f1b0:	9b24      	ldr	r3, [sp, #144]	; 0x90
   1f1b2:	990a      	ldr	r1, [sp, #40]	; 0x28
   1f1b4:	f8c8 6000 	str.w	r6, [r8]
   1f1b8:	3301      	adds	r3, #1
   1f1ba:	440c      	add	r4, r1
   1f1bc:	2b07      	cmp	r3, #7
   1f1be:	9425      	str	r4, [sp, #148]	; 0x94
   1f1c0:	f8c8 1004 	str.w	r1, [r8, #4]
   1f1c4:	9324      	str	r3, [sp, #144]	; 0x90
   1f1c6:	f300 835b 	bgt.w	1f880 <_svfprintf_r+0xa80>
   1f1ca:	f108 0808 	add.w	r8, r8, #8
   1f1ce:	9b03      	ldr	r3, [sp, #12]
   1f1d0:	075b      	lsls	r3, r3, #29
   1f1d2:	d53a      	bpl.n	1f24a <_svfprintf_r+0x44a>
   1f1d4:	9b09      	ldr	r3, [sp, #36]	; 0x24
   1f1d6:	9a04      	ldr	r2, [sp, #16]
   1f1d8:	1a9d      	subs	r5, r3, r2
   1f1da:	2d00      	cmp	r5, #0
   1f1dc:	dd35      	ble.n	1f24a <_svfprintf_r+0x44a>
   1f1de:	2d10      	cmp	r5, #16
   1f1e0:	9b24      	ldr	r3, [sp, #144]	; 0x90
   1f1e2:	dd20      	ble.n	1f226 <_svfprintf_r+0x426>
   1f1e4:	2610      	movs	r6, #16
   1f1e6:	9f08      	ldr	r7, [sp, #32]
   1f1e8:	f8dd b01c 	ldr.w	fp, [sp, #28]
   1f1ec:	e004      	b.n	1f1f8 <_svfprintf_r+0x3f8>
   1f1ee:	3d10      	subs	r5, #16
   1f1f0:	2d10      	cmp	r5, #16
   1f1f2:	f108 0808 	add.w	r8, r8, #8
   1f1f6:	dd16      	ble.n	1f226 <_svfprintf_r+0x426>
   1f1f8:	3301      	adds	r3, #1
   1f1fa:	4a5f      	ldr	r2, [pc, #380]	; (1f378 <_svfprintf_r+0x578>)
   1f1fc:	9324      	str	r3, [sp, #144]	; 0x90
   1f1fe:	3410      	adds	r4, #16
   1f200:	2b07      	cmp	r3, #7
   1f202:	9425      	str	r4, [sp, #148]	; 0x94
   1f204:	e888 0044 	stmia.w	r8, {r2, r6}
   1f208:	ddf1      	ble.n	1f1ee <_svfprintf_r+0x3ee>
   1f20a:	aa23      	add	r2, sp, #140	; 0x8c
   1f20c:	4659      	mov	r1, fp
   1f20e:	4638      	mov	r0, r7
   1f210:	f002 ffa8 	bl	22164 <__ssprint_r>
   1f214:	2800      	cmp	r0, #0
   1f216:	f47f aec5 	bne.w	1efa4 <_svfprintf_r+0x1a4>
   1f21a:	3d10      	subs	r5, #16
   1f21c:	2d10      	cmp	r5, #16
   1f21e:	9c25      	ldr	r4, [sp, #148]	; 0x94
   1f220:	9b24      	ldr	r3, [sp, #144]	; 0x90
   1f222:	46c8      	mov	r8, r9
   1f224:	dce8      	bgt.n	1f1f8 <_svfprintf_r+0x3f8>
   1f226:	3301      	adds	r3, #1
   1f228:	4a53      	ldr	r2, [pc, #332]	; (1f378 <_svfprintf_r+0x578>)
   1f22a:	9324      	str	r3, [sp, #144]	; 0x90
   1f22c:	442c      	add	r4, r5
   1f22e:	2b07      	cmp	r3, #7
   1f230:	9425      	str	r4, [sp, #148]	; 0x94
   1f232:	e888 0024 	stmia.w	r8, {r2, r5}
   1f236:	dd08      	ble.n	1f24a <_svfprintf_r+0x44a>
   1f238:	aa23      	add	r2, sp, #140	; 0x8c
   1f23a:	9907      	ldr	r1, [sp, #28]
   1f23c:	9808      	ldr	r0, [sp, #32]
   1f23e:	f002 ff91 	bl	22164 <__ssprint_r>
   1f242:	2800      	cmp	r0, #0
   1f244:	f47f aeae 	bne.w	1efa4 <_svfprintf_r+0x1a4>
   1f248:	9c25      	ldr	r4, [sp, #148]	; 0x94
   1f24a:	9b05      	ldr	r3, [sp, #20]
   1f24c:	9a09      	ldr	r2, [sp, #36]	; 0x24
   1f24e:	9904      	ldr	r1, [sp, #16]
   1f250:	428a      	cmp	r2, r1
   1f252:	bfac      	ite	ge
   1f254:	189b      	addge	r3, r3, r2
   1f256:	185b      	addlt	r3, r3, r1
   1f258:	9305      	str	r3, [sp, #20]
   1f25a:	2c00      	cmp	r4, #0
   1f25c:	f040 831b 	bne.w	1f896 <_svfprintf_r+0xa96>
   1f260:	2300      	movs	r3, #0
   1f262:	9324      	str	r3, [sp, #144]	; 0x90
   1f264:	46c8      	mov	r8, r9
   1f266:	e5f2      	b.n	1ee4e <_svfprintf_r+0x4e>
   1f268:	930d      	str	r3, [sp, #52]	; 0x34
   1f26a:	f01b 0320 	ands.w	r3, fp, #32
   1f26e:	f040 81de 	bne.w	1f62e <_svfprintf_r+0x82e>
   1f272:	f01b 0210 	ands.w	r2, fp, #16
   1f276:	f040 842d 	bne.w	1fad4 <_svfprintf_r+0xcd4>
   1f27a:	f01b 0340 	ands.w	r3, fp, #64	; 0x40
   1f27e:	f000 8429 	beq.w	1fad4 <_svfprintf_r+0xcd4>
   1f282:	990b      	ldr	r1, [sp, #44]	; 0x2c
   1f284:	4613      	mov	r3, r2
   1f286:	460a      	mov	r2, r1
   1f288:	3204      	adds	r2, #4
   1f28a:	880c      	ldrh	r4, [r1, #0]
   1f28c:	920b      	str	r2, [sp, #44]	; 0x2c
   1f28e:	2500      	movs	r5, #0
   1f290:	e6a9      	b.n	1efe6 <_svfprintf_r+0x1e6>
   1f292:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
   1f294:	930d      	str	r3, [sp, #52]	; 0x34
   1f296:	6816      	ldr	r6, [r2, #0]
   1f298:	2400      	movs	r4, #0
   1f29a:	f88d 406f 	strb.w	r4, [sp, #111]	; 0x6f
   1f29e:	1d15      	adds	r5, r2, #4
   1f2a0:	2e00      	cmp	r6, #0
   1f2a2:	f000 86b5 	beq.w	20010 <_svfprintf_r+0x1210>
   1f2a6:	9a06      	ldr	r2, [sp, #24]
   1f2a8:	1c53      	adds	r3, r2, #1
   1f2aa:	f000 8617 	beq.w	1fedc <_svfprintf_r+0x10dc>
   1f2ae:	4621      	mov	r1, r4
   1f2b0:	4630      	mov	r0, r6
   1f2b2:	f7fe ff25 	bl	1e100 <memchr>
   1f2b6:	2800      	cmp	r0, #0
   1f2b8:	f000 8708 	beq.w	200cc <_svfprintf_r+0x12cc>
   1f2bc:	1b83      	subs	r3, r0, r6
   1f2be:	930a      	str	r3, [sp, #40]	; 0x28
   1f2c0:	9406      	str	r4, [sp, #24]
   1f2c2:	950b      	str	r5, [sp, #44]	; 0x2c
   1f2c4:	f8cd b00c 	str.w	fp, [sp, #12]
   1f2c8:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
   1f2cc:	9304      	str	r3, [sp, #16]
   1f2ce:	940e      	str	r4, [sp, #56]	; 0x38
   1f2d0:	f89d 706f 	ldrb.w	r7, [sp, #111]	; 0x6f
   1f2d4:	e6ac      	b.n	1f030 <_svfprintf_r+0x230>
   1f2d6:	f89a 3000 	ldrb.w	r3, [sl]
   1f2da:	2201      	movs	r2, #1
   1f2dc:	212b      	movs	r1, #43	; 0x2b
   1f2de:	e5e7      	b.n	1eeb0 <_svfprintf_r+0xb0>
   1f2e0:	f04b 0b20 	orr.w	fp, fp, #32
   1f2e4:	f89a 3000 	ldrb.w	r3, [sl]
   1f2e8:	e5e2      	b.n	1eeb0 <_svfprintf_r+0xb0>
   1f2ea:	930d      	str	r3, [sp, #52]	; 0x34
   1f2ec:	2a00      	cmp	r2, #0
   1f2ee:	f040 87aa 	bne.w	20246 <_svfprintf_r+0x1446>
   1f2f2:	4b23      	ldr	r3, [pc, #140]	; (1f380 <_svfprintf_r+0x580>)
   1f2f4:	9312      	str	r3, [sp, #72]	; 0x48
   1f2f6:	f01b 0f20 	tst.w	fp, #32
   1f2fa:	f040 8112 	bne.w	1f522 <_svfprintf_r+0x722>
   1f2fe:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
   1f300:	f01b 0f10 	tst.w	fp, #16
   1f304:	4613      	mov	r3, r2
   1f306:	f040 83e0 	bne.w	1faca <_svfprintf_r+0xcca>
   1f30a:	f01b 0f40 	tst.w	fp, #64	; 0x40
   1f30e:	f000 83dc 	beq.w	1faca <_svfprintf_r+0xcca>
   1f312:	3304      	adds	r3, #4
   1f314:	8814      	ldrh	r4, [r2, #0]
   1f316:	930b      	str	r3, [sp, #44]	; 0x2c
   1f318:	2500      	movs	r5, #0
   1f31a:	f01b 0f01 	tst.w	fp, #1
   1f31e:	f000 810d 	beq.w	1f53c <_svfprintf_r+0x73c>
   1f322:	ea54 0305 	orrs.w	r3, r4, r5
   1f326:	f000 8109 	beq.w	1f53c <_svfprintf_r+0x73c>
   1f32a:	2330      	movs	r3, #48	; 0x30
   1f32c:	f89d 2034 	ldrb.w	r2, [sp, #52]	; 0x34
   1f330:	f88d 3070 	strb.w	r3, [sp, #112]	; 0x70
   1f334:	f88d 2071 	strb.w	r2, [sp, #113]	; 0x71
   1f338:	f04b 0b02 	orr.w	fp, fp, #2
   1f33c:	2302      	movs	r3, #2
   1f33e:	e652      	b.n	1efe6 <_svfprintf_r+0x1e6>
   1f340:	f89a 3000 	ldrb.w	r3, [sl]
   1f344:	2900      	cmp	r1, #0
   1f346:	f47f adb3 	bne.w	1eeb0 <_svfprintf_r+0xb0>
   1f34a:	2201      	movs	r2, #1
   1f34c:	2120      	movs	r1, #32
   1f34e:	e5af      	b.n	1eeb0 <_svfprintf_r+0xb0>
   1f350:	f04b 0b01 	orr.w	fp, fp, #1
   1f354:	f89a 3000 	ldrb.w	r3, [sl]
   1f358:	e5aa      	b.n	1eeb0 <_svfprintf_r+0xb0>
   1f35a:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
   1f35c:	6823      	ldr	r3, [r4, #0]
   1f35e:	9309      	str	r3, [sp, #36]	; 0x24
   1f360:	4618      	mov	r0, r3
   1f362:	2800      	cmp	r0, #0
   1f364:	4623      	mov	r3, r4
   1f366:	f103 0304 	add.w	r3, r3, #4
   1f36a:	f6ff ae03 	blt.w	1ef74 <_svfprintf_r+0x174>
   1f36e:	930b      	str	r3, [sp, #44]	; 0x2c
   1f370:	f89a 3000 	ldrb.w	r3, [sl]
   1f374:	e59c      	b.n	1eeb0 <_svfprintf_r+0xb0>
   1f376:	bf00      	nop
   1f378:	00024bb4 	.word	0x00024bb4
   1f37c:	00024bc4 	.word	0x00024bc4
   1f380:	00024b94 	.word	0x00024b94
   1f384:	f04b 0b10 	orr.w	fp, fp, #16
   1f388:	f01b 0f20 	tst.w	fp, #32
   1f38c:	930d      	str	r3, [sp, #52]	; 0x34
   1f38e:	f43f ae1b 	beq.w	1efc8 <_svfprintf_r+0x1c8>
   1f392:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
   1f394:	3507      	adds	r5, #7
   1f396:	f025 0307 	bic.w	r3, r5, #7
   1f39a:	f103 0208 	add.w	r2, r3, #8
   1f39e:	e9d3 4500 	ldrd	r4, r5, [r3]
   1f3a2:	920b      	str	r2, [sp, #44]	; 0x2c
   1f3a4:	2301      	movs	r3, #1
   1f3a6:	e61e      	b.n	1efe6 <_svfprintf_r+0x1e6>
   1f3a8:	f89a 3000 	ldrb.w	r3, [sl]
   1f3ac:	2b2a      	cmp	r3, #42	; 0x2a
   1f3ae:	f10a 0401 	add.w	r4, sl, #1
   1f3b2:	f000 873b 	beq.w	2022c <_svfprintf_r+0x142c>
   1f3b6:	f1a3 0030 	sub.w	r0, r3, #48	; 0x30
   1f3ba:	2809      	cmp	r0, #9
   1f3bc:	46a2      	mov	sl, r4
   1f3be:	f200 8691 	bhi.w	200e4 <_svfprintf_r+0x12e4>
   1f3c2:	2300      	movs	r3, #0
   1f3c4:	461c      	mov	r4, r3
   1f3c6:	f81a 3b01 	ldrb.w	r3, [sl], #1
   1f3ca:	eb04 0484 	add.w	r4, r4, r4, lsl #2
   1f3ce:	eb00 0444 	add.w	r4, r0, r4, lsl #1
   1f3d2:	f1a3 0030 	sub.w	r0, r3, #48	; 0x30
   1f3d6:	2809      	cmp	r0, #9
   1f3d8:	d9f5      	bls.n	1f3c6 <_svfprintf_r+0x5c6>
   1f3da:	9406      	str	r4, [sp, #24]
   1f3dc:	e56a      	b.n	1eeb4 <_svfprintf_r+0xb4>
   1f3de:	f04b 0b80 	orr.w	fp, fp, #128	; 0x80
   1f3e2:	f89a 3000 	ldrb.w	r3, [sl]
   1f3e6:	e563      	b.n	1eeb0 <_svfprintf_r+0xb0>
   1f3e8:	f04b 0b40 	orr.w	fp, fp, #64	; 0x40
   1f3ec:	f89a 3000 	ldrb.w	r3, [sl]
   1f3f0:	e55e      	b.n	1eeb0 <_svfprintf_r+0xb0>
   1f3f2:	f89a 3000 	ldrb.w	r3, [sl]
   1f3f6:	2b6c      	cmp	r3, #108	; 0x6c
   1f3f8:	bf03      	ittte	eq
   1f3fa:	f89a 3001 	ldrbeq.w	r3, [sl, #1]
   1f3fe:	f04b 0b20 	orreq.w	fp, fp, #32
   1f402:	f10a 0a01 	addeq.w	sl, sl, #1
   1f406:	f04b 0b10 	orrne.w	fp, fp, #16
   1f40a:	e551      	b.n	1eeb0 <_svfprintf_r+0xb0>
   1f40c:	2a00      	cmp	r2, #0
   1f40e:	f040 871e 	bne.w	2024e <_svfprintf_r+0x144e>
   1f412:	f01b 0f20 	tst.w	fp, #32
   1f416:	f040 8509 	bne.w	1fe2c <_svfprintf_r+0x102c>
   1f41a:	f01b 0f10 	tst.w	fp, #16
   1f41e:	f040 84bc 	bne.w	1fd9a <_svfprintf_r+0xf9a>
   1f422:	f01b 0f40 	tst.w	fp, #64	; 0x40
   1f426:	f000 84b8 	beq.w	1fd9a <_svfprintf_r+0xf9a>
   1f42a:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
   1f42c:	6813      	ldr	r3, [r2, #0]
   1f42e:	3204      	adds	r2, #4
   1f430:	920b      	str	r2, [sp, #44]	; 0x2c
   1f432:	f8bd 2014 	ldrh.w	r2, [sp, #20]
   1f436:	801a      	strh	r2, [r3, #0]
   1f438:	e509      	b.n	1ee4e <_svfprintf_r+0x4e>
   1f43a:	990b      	ldr	r1, [sp, #44]	; 0x2c
   1f43c:	4bb9      	ldr	r3, [pc, #740]	; (1f724 <_svfprintf_r+0x924>)
   1f43e:	680c      	ldr	r4, [r1, #0]
   1f440:	9312      	str	r3, [sp, #72]	; 0x48
   1f442:	2230      	movs	r2, #48	; 0x30
   1f444:	2378      	movs	r3, #120	; 0x78
   1f446:	3104      	adds	r1, #4
   1f448:	f88d 3071 	strb.w	r3, [sp, #113]	; 0x71
   1f44c:	930d      	str	r3, [sp, #52]	; 0x34
   1f44e:	f04b 0b02 	orr.w	fp, fp, #2
   1f452:	910b      	str	r1, [sp, #44]	; 0x2c
   1f454:	2500      	movs	r5, #0
   1f456:	f88d 2070 	strb.w	r2, [sp, #112]	; 0x70
   1f45a:	2302      	movs	r3, #2
   1f45c:	e5c3      	b.n	1efe6 <_svfprintf_r+0x1e6>
   1f45e:	990b      	ldr	r1, [sp, #44]	; 0x2c
   1f460:	930d      	str	r3, [sp, #52]	; 0x34
   1f462:	680a      	ldr	r2, [r1, #0]
   1f464:	f88d 2098 	strb.w	r2, [sp, #152]	; 0x98
   1f468:	2300      	movs	r3, #0
   1f46a:	460a      	mov	r2, r1
   1f46c:	461f      	mov	r7, r3
   1f46e:	f88d 306f 	strb.w	r3, [sp, #111]	; 0x6f
   1f472:	3204      	adds	r2, #4
   1f474:	2301      	movs	r3, #1
   1f476:	9304      	str	r3, [sp, #16]
   1f478:	f8cd b00c 	str.w	fp, [sp, #12]
   1f47c:	9706      	str	r7, [sp, #24]
   1f47e:	970e      	str	r7, [sp, #56]	; 0x38
   1f480:	920b      	str	r2, [sp, #44]	; 0x2c
   1f482:	930a      	str	r3, [sp, #40]	; 0x28
   1f484:	ae26      	add	r6, sp, #152	; 0x98
   1f486:	e5d7      	b.n	1f038 <_svfprintf_r+0x238>
   1f488:	930d      	str	r3, [sp, #52]	; 0x34
   1f48a:	2a00      	cmp	r2, #0
   1f48c:	f040 86fe 	bne.w	2028c <_svfprintf_r+0x148c>
   1f490:	f01b 0f20 	tst.w	fp, #32
   1f494:	d15d      	bne.n	1f552 <_svfprintf_r+0x752>
   1f496:	f01b 0f10 	tst.w	fp, #16
   1f49a:	f040 8335 	bne.w	1fb08 <_svfprintf_r+0xd08>
   1f49e:	f01b 0f40 	tst.w	fp, #64	; 0x40
   1f4a2:	f000 8331 	beq.w	1fb08 <_svfprintf_r+0xd08>
   1f4a6:	990b      	ldr	r1, [sp, #44]	; 0x2c
   1f4a8:	f9b1 4000 	ldrsh.w	r4, [r1]
   1f4ac:	3104      	adds	r1, #4
   1f4ae:	17e5      	asrs	r5, r4, #31
   1f4b0:	4622      	mov	r2, r4
   1f4b2:	462b      	mov	r3, r5
   1f4b4:	910b      	str	r1, [sp, #44]	; 0x2c
   1f4b6:	2a00      	cmp	r2, #0
   1f4b8:	f173 0300 	sbcs.w	r3, r3, #0
   1f4bc:	db58      	blt.n	1f570 <_svfprintf_r+0x770>
   1f4be:	9906      	ldr	r1, [sp, #24]
   1f4c0:	f89d 706f 	ldrb.w	r7, [sp, #111]	; 0x6f
   1f4c4:	1c4a      	adds	r2, r1, #1
   1f4c6:	f04f 0301 	mov.w	r3, #1
   1f4ca:	f47f ad93 	bne.w	1eff4 <_svfprintf_r+0x1f4>
   1f4ce:	ea54 0205 	orrs.w	r2, r4, r5
   1f4d2:	f000 81ec 	beq.w	1f8ae <_svfprintf_r+0xaae>
   1f4d6:	f8cd b00c 	str.w	fp, [sp, #12]
   1f4da:	2b01      	cmp	r3, #1
   1f4dc:	f000 8283 	beq.w	1f9e6 <_svfprintf_r+0xbe6>
   1f4e0:	2b02      	cmp	r3, #2
   1f4e2:	f040 8213 	bne.w	1f90c <_svfprintf_r+0xb0c>
   1f4e6:	9812      	ldr	r0, [sp, #72]	; 0x48
   1f4e8:	464e      	mov	r6, r9
   1f4ea:	0923      	lsrs	r3, r4, #4
   1f4ec:	f004 010f 	and.w	r1, r4, #15
   1f4f0:	ea43 7305 	orr.w	r3, r3, r5, lsl #28
   1f4f4:	092a      	lsrs	r2, r5, #4
   1f4f6:	461c      	mov	r4, r3
   1f4f8:	4615      	mov	r5, r2
   1f4fa:	5c43      	ldrb	r3, [r0, r1]
   1f4fc:	f806 3d01 	strb.w	r3, [r6, #-1]!
   1f500:	ea54 0305 	orrs.w	r3, r4, r5
   1f504:	d1f1      	bne.n	1f4ea <_svfprintf_r+0x6ea>
   1f506:	eba9 0306 	sub.w	r3, r9, r6
   1f50a:	930a      	str	r3, [sp, #40]	; 0x28
   1f50c:	e588      	b.n	1f020 <_svfprintf_r+0x220>
   1f50e:	930d      	str	r3, [sp, #52]	; 0x34
   1f510:	2a00      	cmp	r2, #0
   1f512:	f040 86b7 	bne.w	20284 <_svfprintf_r+0x1484>
   1f516:	4b84      	ldr	r3, [pc, #528]	; (1f728 <_svfprintf_r+0x928>)
   1f518:	9312      	str	r3, [sp, #72]	; 0x48
   1f51a:	f01b 0f20 	tst.w	fp, #32
   1f51e:	f43f aeee 	beq.w	1f2fe <_svfprintf_r+0x4fe>
   1f522:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
   1f524:	3507      	adds	r5, #7
   1f526:	f025 0307 	bic.w	r3, r5, #7
   1f52a:	f103 0208 	add.w	r2, r3, #8
   1f52e:	f01b 0f01 	tst.w	fp, #1
   1f532:	920b      	str	r2, [sp, #44]	; 0x2c
   1f534:	e9d3 4500 	ldrd	r4, r5, [r3]
   1f538:	f47f aef3 	bne.w	1f322 <_svfprintf_r+0x522>
   1f53c:	2302      	movs	r3, #2
   1f53e:	e552      	b.n	1efe6 <_svfprintf_r+0x1e6>
   1f540:	930d      	str	r3, [sp, #52]	; 0x34
   1f542:	2a00      	cmp	r2, #0
   1f544:	f040 869a 	bne.w	2027c <_svfprintf_r+0x147c>
   1f548:	f04b 0b10 	orr.w	fp, fp, #16
   1f54c:	f01b 0f20 	tst.w	fp, #32
   1f550:	d0a1      	beq.n	1f496 <_svfprintf_r+0x696>
   1f552:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
   1f554:	3507      	adds	r5, #7
   1f556:	f025 0507 	bic.w	r5, r5, #7
   1f55a:	e9d5 2300 	ldrd	r2, r3, [r5]
   1f55e:	2a00      	cmp	r2, #0
   1f560:	f105 0108 	add.w	r1, r5, #8
   1f564:	461d      	mov	r5, r3
   1f566:	f173 0300 	sbcs.w	r3, r3, #0
   1f56a:	910b      	str	r1, [sp, #44]	; 0x2c
   1f56c:	4614      	mov	r4, r2
   1f56e:	daa6      	bge.n	1f4be <_svfprintf_r+0x6be>
   1f570:	272d      	movs	r7, #45	; 0x2d
   1f572:	4264      	negs	r4, r4
   1f574:	eb65 0545 	sbc.w	r5, r5, r5, lsl #1
   1f578:	f88d 706f 	strb.w	r7, [sp, #111]	; 0x6f
   1f57c:	2301      	movs	r3, #1
   1f57e:	e535      	b.n	1efec <_svfprintf_r+0x1ec>
   1f580:	930d      	str	r3, [sp, #52]	; 0x34
   1f582:	2a00      	cmp	r2, #0
   1f584:	f040 8676 	bne.w	20274 <_svfprintf_r+0x1474>
   1f588:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
   1f58a:	f01b 0f08 	tst.w	fp, #8
   1f58e:	f105 0507 	add.w	r5, r5, #7
   1f592:	f000 83e8 	beq.w	1fd66 <_svfprintf_r+0xf66>
   1f596:	f025 0307 	bic.w	r3, r5, #7
   1f59a:	ed93 7b00 	vldr	d7, [r3]
   1f59e:	ed8d 7b10 	vstr	d7, [sp, #64]	; 0x40
   1f5a2:	f103 0208 	add.w	r2, r3, #8
   1f5a6:	920b      	str	r2, [sp, #44]	; 0x2c
   1f5a8:	e9dd 1210 	ldrd	r1, r2, [sp, #64]	; 0x40
   1f5ac:	f022 4300 	bic.w	r3, r2, #2147483648	; 0x80000000
   1f5b0:	9116      	str	r1, [sp, #88]	; 0x58
   1f5b2:	9317      	str	r3, [sp, #92]	; 0x5c
   1f5b4:	e9dd 4516 	ldrd	r4, r5, [sp, #88]	; 0x58
   1f5b8:	f04f 32ff 	mov.w	r2, #4294967295
   1f5bc:	4620      	mov	r0, r4
   1f5be:	4629      	mov	r1, r5
   1f5c0:	4b5a      	ldr	r3, [pc, #360]	; (1f72c <_svfprintf_r+0x92c>)
   1f5c2:	f002 ffa5 	bl	22510 <__aeabi_dcmpun>
   1f5c6:	2800      	cmp	r0, #0
   1f5c8:	f040 834f 	bne.w	1fc6a <_svfprintf_r+0xe6a>
   1f5cc:	f04f 32ff 	mov.w	r2, #4294967295
   1f5d0:	4b56      	ldr	r3, [pc, #344]	; (1f72c <_svfprintf_r+0x92c>)
   1f5d2:	4620      	mov	r0, r4
   1f5d4:	4629      	mov	r1, r5
   1f5d6:	f7fc fcd5 	bl	1bf84 <__aeabi_dcmple>
   1f5da:	2800      	cmp	r0, #0
   1f5dc:	f040 8345 	bne.w	1fc6a <_svfprintf_r+0xe6a>
   1f5e0:	2200      	movs	r2, #0
   1f5e2:	2300      	movs	r3, #0
   1f5e4:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
   1f5e8:	f7fc fcc2 	bl	1bf70 <__aeabi_dcmplt>
   1f5ec:	2800      	cmp	r0, #0
   1f5ee:	f040 8533 	bne.w	20058 <_svfprintf_r+0x1258>
   1f5f2:	f89d 706f 	ldrb.w	r7, [sp, #111]	; 0x6f
   1f5f6:	4e4e      	ldr	r6, [pc, #312]	; (1f730 <_svfprintf_r+0x930>)
   1f5f8:	4b4e      	ldr	r3, [pc, #312]	; (1f734 <_svfprintf_r+0x934>)
   1f5fa:	f02b 0080 	bic.w	r0, fp, #128	; 0x80
   1f5fe:	9003      	str	r0, [sp, #12]
   1f600:	980d      	ldr	r0, [sp, #52]	; 0x34
   1f602:	2203      	movs	r2, #3
   1f604:	2100      	movs	r1, #0
   1f606:	9204      	str	r2, [sp, #16]
   1f608:	9106      	str	r1, [sp, #24]
   1f60a:	2847      	cmp	r0, #71	; 0x47
   1f60c:	bfd8      	it	le
   1f60e:	461e      	movle	r6, r3
   1f610:	920a      	str	r2, [sp, #40]	; 0x28
   1f612:	910e      	str	r1, [sp, #56]	; 0x38
   1f614:	e50c      	b.n	1f030 <_svfprintf_r+0x230>
   1f616:	f04b 0b08 	orr.w	fp, fp, #8
   1f61a:	f89a 3000 	ldrb.w	r3, [sl]
   1f61e:	e447      	b.n	1eeb0 <_svfprintf_r+0xb0>
   1f620:	f04b 0b10 	orr.w	fp, fp, #16
   1f624:	930d      	str	r3, [sp, #52]	; 0x34
   1f626:	f01b 0320 	ands.w	r3, fp, #32
   1f62a:	f43f ae22 	beq.w	1f272 <_svfprintf_r+0x472>
   1f62e:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
   1f630:	3507      	adds	r5, #7
   1f632:	f025 0307 	bic.w	r3, r5, #7
   1f636:	f103 0208 	add.w	r2, r3, #8
   1f63a:	e9d3 4500 	ldrd	r4, r5, [r3]
   1f63e:	920b      	str	r2, [sp, #44]	; 0x2c
   1f640:	2300      	movs	r3, #0
   1f642:	e4d0      	b.n	1efe6 <_svfprintf_r+0x1e6>
   1f644:	f1a3 0030 	sub.w	r0, r3, #48	; 0x30
   1f648:	2300      	movs	r3, #0
   1f64a:	461c      	mov	r4, r3
   1f64c:	f81a 3b01 	ldrb.w	r3, [sl], #1
   1f650:	eb04 0484 	add.w	r4, r4, r4, lsl #2
   1f654:	eb00 0444 	add.w	r4, r0, r4, lsl #1
   1f658:	f1a3 0030 	sub.w	r0, r3, #48	; 0x30
   1f65c:	2809      	cmp	r0, #9
   1f65e:	d9f5      	bls.n	1f64c <_svfprintf_r+0x84c>
   1f660:	9409      	str	r4, [sp, #36]	; 0x24
   1f662:	e427      	b.n	1eeb4 <_svfprintf_r+0xb4>
   1f664:	930d      	str	r3, [sp, #52]	; 0x34
   1f666:	2a00      	cmp	r2, #0
   1f668:	f040 85f5 	bne.w	20256 <_svfprintf_r+0x1456>
   1f66c:	9a0d      	ldr	r2, [sp, #52]	; 0x34
   1f66e:	2a00      	cmp	r2, #0
   1f670:	f43f ac91 	beq.w	1ef96 <_svfprintf_r+0x196>
   1f674:	2300      	movs	r3, #0
   1f676:	2101      	movs	r1, #1
   1f678:	461f      	mov	r7, r3
   1f67a:	9104      	str	r1, [sp, #16]
   1f67c:	f88d 2098 	strb.w	r2, [sp, #152]	; 0x98
   1f680:	f8cd b00c 	str.w	fp, [sp, #12]
   1f684:	f88d 306f 	strb.w	r3, [sp, #111]	; 0x6f
   1f688:	9306      	str	r3, [sp, #24]
   1f68a:	930e      	str	r3, [sp, #56]	; 0x38
   1f68c:	910a      	str	r1, [sp, #40]	; 0x28
   1f68e:	ae26      	add	r6, sp, #152	; 0x98
   1f690:	e4d2      	b.n	1f038 <_svfprintf_r+0x238>
   1f692:	9c25      	ldr	r4, [sp, #148]	; 0x94
   1f694:	e529      	b.n	1f0ea <_svfprintf_r+0x2ea>
   1f696:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   1f698:	2b65      	cmp	r3, #101	; 0x65
   1f69a:	f340 80a9 	ble.w	1f7f0 <_svfprintf_r+0x9f0>
   1f69e:	2200      	movs	r2, #0
   1f6a0:	2300      	movs	r3, #0
   1f6a2:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
   1f6a6:	f7fc fc59 	bl	1bf5c <__aeabi_dcmpeq>
   1f6aa:	2800      	cmp	r0, #0
   1f6ac:	f000 8152 	beq.w	1f954 <_svfprintf_r+0xb54>
   1f6b0:	9b24      	ldr	r3, [sp, #144]	; 0x90
   1f6b2:	4a21      	ldr	r2, [pc, #132]	; (1f738 <_svfprintf_r+0x938>)
   1f6b4:	f8c8 2000 	str.w	r2, [r8]
   1f6b8:	3301      	adds	r3, #1
   1f6ba:	3401      	adds	r4, #1
   1f6bc:	2201      	movs	r2, #1
   1f6be:	2b07      	cmp	r3, #7
   1f6c0:	9425      	str	r4, [sp, #148]	; 0x94
   1f6c2:	9324      	str	r3, [sp, #144]	; 0x90
   1f6c4:	f8c8 2004 	str.w	r2, [r8, #4]
   1f6c8:	f300 836f 	bgt.w	1fdaa <_svfprintf_r+0xfaa>
   1f6cc:	f108 0808 	add.w	r8, r8, #8
   1f6d0:	9b1d      	ldr	r3, [sp, #116]	; 0x74
   1f6d2:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
   1f6d4:	9c25      	ldr	r4, [sp, #148]	; 0x94
   1f6d6:	4293      	cmp	r3, r2
   1f6d8:	db03      	blt.n	1f6e2 <_svfprintf_r+0x8e2>
   1f6da:	9b03      	ldr	r3, [sp, #12]
   1f6dc:	07dd      	lsls	r5, r3, #31
   1f6de:	f57f ad76 	bpl.w	1f1ce <_svfprintf_r+0x3ce>
   1f6e2:	9b24      	ldr	r3, [sp, #144]	; 0x90
   1f6e4:	9913      	ldr	r1, [sp, #76]	; 0x4c
   1f6e6:	9a14      	ldr	r2, [sp, #80]	; 0x50
   1f6e8:	f8c8 2000 	str.w	r2, [r8]
   1f6ec:	3301      	adds	r3, #1
   1f6ee:	440c      	add	r4, r1
   1f6f0:	2b07      	cmp	r3, #7
   1f6f2:	f8c8 1004 	str.w	r1, [r8, #4]
   1f6f6:	9425      	str	r4, [sp, #148]	; 0x94
   1f6f8:	9324      	str	r3, [sp, #144]	; 0x90
   1f6fa:	f300 83a3 	bgt.w	1fe44 <_svfprintf_r+0x1044>
   1f6fe:	f108 0808 	add.w	r8, r8, #8
   1f702:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   1f704:	1e5e      	subs	r6, r3, #1
   1f706:	2e00      	cmp	r6, #0
   1f708:	f77f ad61 	ble.w	1f1ce <_svfprintf_r+0x3ce>
   1f70c:	2e10      	cmp	r6, #16
   1f70e:	9b24      	ldr	r3, [sp, #144]	; 0x90
   1f710:	4d0a      	ldr	r5, [pc, #40]	; (1f73c <_svfprintf_r+0x93c>)
   1f712:	f340 81ef 	ble.w	1faf4 <_svfprintf_r+0xcf4>
   1f716:	4622      	mov	r2, r4
   1f718:	2710      	movs	r7, #16
   1f71a:	f8dd b020 	ldr.w	fp, [sp, #32]
   1f71e:	9c07      	ldr	r4, [sp, #28]
   1f720:	e014      	b.n	1f74c <_svfprintf_r+0x94c>
   1f722:	bf00      	nop
   1f724:	00024b94 	.word	0x00024b94
   1f728:	00024b80 	.word	0x00024b80
   1f72c:	7fefffff 	.word	0x7fefffff
   1f730:	00024b74 	.word	0x00024b74
   1f734:	00024b70 	.word	0x00024b70
   1f738:	00024bb0 	.word	0x00024bb0
   1f73c:	00024bc4 	.word	0x00024bc4
   1f740:	f108 0808 	add.w	r8, r8, #8
   1f744:	3e10      	subs	r6, #16
   1f746:	2e10      	cmp	r6, #16
   1f748:	f340 81d3 	ble.w	1faf2 <_svfprintf_r+0xcf2>
   1f74c:	3301      	adds	r3, #1
   1f74e:	3210      	adds	r2, #16
   1f750:	2b07      	cmp	r3, #7
   1f752:	9225      	str	r2, [sp, #148]	; 0x94
   1f754:	9324      	str	r3, [sp, #144]	; 0x90
   1f756:	e888 00a0 	stmia.w	r8, {r5, r7}
   1f75a:	ddf1      	ble.n	1f740 <_svfprintf_r+0x940>
   1f75c:	aa23      	add	r2, sp, #140	; 0x8c
   1f75e:	4621      	mov	r1, r4
   1f760:	4658      	mov	r0, fp
   1f762:	f002 fcff 	bl	22164 <__ssprint_r>
   1f766:	2800      	cmp	r0, #0
   1f768:	f47f ac1c 	bne.w	1efa4 <_svfprintf_r+0x1a4>
   1f76c:	9a25      	ldr	r2, [sp, #148]	; 0x94
   1f76e:	9b24      	ldr	r3, [sp, #144]	; 0x90
   1f770:	46c8      	mov	r8, r9
   1f772:	e7e7      	b.n	1f744 <_svfprintf_r+0x944>
   1f774:	9b09      	ldr	r3, [sp, #36]	; 0x24
   1f776:	9a04      	ldr	r2, [sp, #16]
   1f778:	1a9f      	subs	r7, r3, r2
   1f77a:	2f00      	cmp	r7, #0
   1f77c:	f77f acd8 	ble.w	1f130 <_svfprintf_r+0x330>
   1f780:	2f10      	cmp	r7, #16
   1f782:	9b24      	ldr	r3, [sp, #144]	; 0x90
   1f784:	4db7      	ldr	r5, [pc, #732]	; (1fa64 <_svfprintf_r+0xc64>)
   1f786:	dd27      	ble.n	1f7d8 <_svfprintf_r+0x9d8>
   1f788:	4642      	mov	r2, r8
   1f78a:	4621      	mov	r1, r4
   1f78c:	46b0      	mov	r8, r6
   1f78e:	f04f 0b10 	mov.w	fp, #16
   1f792:	462e      	mov	r6, r5
   1f794:	9c08      	ldr	r4, [sp, #32]
   1f796:	9d07      	ldr	r5, [sp, #28]
   1f798:	e004      	b.n	1f7a4 <_svfprintf_r+0x9a4>
   1f79a:	3f10      	subs	r7, #16
   1f79c:	2f10      	cmp	r7, #16
   1f79e:	f102 0208 	add.w	r2, r2, #8
   1f7a2:	dd15      	ble.n	1f7d0 <_svfprintf_r+0x9d0>
   1f7a4:	3301      	adds	r3, #1
   1f7a6:	3110      	adds	r1, #16
   1f7a8:	2b07      	cmp	r3, #7
   1f7aa:	9125      	str	r1, [sp, #148]	; 0x94
   1f7ac:	9324      	str	r3, [sp, #144]	; 0x90
   1f7ae:	e882 0840 	stmia.w	r2, {r6, fp}
   1f7b2:	ddf2      	ble.n	1f79a <_svfprintf_r+0x99a>
   1f7b4:	aa23      	add	r2, sp, #140	; 0x8c
   1f7b6:	4629      	mov	r1, r5
   1f7b8:	4620      	mov	r0, r4
   1f7ba:	f002 fcd3 	bl	22164 <__ssprint_r>
   1f7be:	2800      	cmp	r0, #0
   1f7c0:	f47f abf0 	bne.w	1efa4 <_svfprintf_r+0x1a4>
   1f7c4:	3f10      	subs	r7, #16
   1f7c6:	2f10      	cmp	r7, #16
   1f7c8:	9925      	ldr	r1, [sp, #148]	; 0x94
   1f7ca:	9b24      	ldr	r3, [sp, #144]	; 0x90
   1f7cc:	464a      	mov	r2, r9
   1f7ce:	dce9      	bgt.n	1f7a4 <_svfprintf_r+0x9a4>
   1f7d0:	4635      	mov	r5, r6
   1f7d2:	460c      	mov	r4, r1
   1f7d4:	4646      	mov	r6, r8
   1f7d6:	4690      	mov	r8, r2
   1f7d8:	3301      	adds	r3, #1
   1f7da:	443c      	add	r4, r7
   1f7dc:	2b07      	cmp	r3, #7
   1f7de:	9425      	str	r4, [sp, #148]	; 0x94
   1f7e0:	9324      	str	r3, [sp, #144]	; 0x90
   1f7e2:	e888 00a0 	stmia.w	r8, {r5, r7}
   1f7e6:	f300 8234 	bgt.w	1fc52 <_svfprintf_r+0xe52>
   1f7ea:	f108 0808 	add.w	r8, r8, #8
   1f7ee:	e49f      	b.n	1f130 <_svfprintf_r+0x330>
   1f7f0:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   1f7f2:	9f24      	ldr	r7, [sp, #144]	; 0x90
   1f7f4:	2b01      	cmp	r3, #1
   1f7f6:	f340 8200 	ble.w	1fbfa <_svfprintf_r+0xdfa>
   1f7fa:	3701      	adds	r7, #1
   1f7fc:	3401      	adds	r4, #1
   1f7fe:	2301      	movs	r3, #1
   1f800:	2f07      	cmp	r7, #7
   1f802:	9425      	str	r4, [sp, #148]	; 0x94
   1f804:	9724      	str	r7, [sp, #144]	; 0x90
   1f806:	f8c8 6000 	str.w	r6, [r8]
   1f80a:	f8c8 3004 	str.w	r3, [r8, #4]
   1f80e:	f300 8205 	bgt.w	1fc1c <_svfprintf_r+0xe1c>
   1f812:	f108 0808 	add.w	r8, r8, #8
   1f816:	9a13      	ldr	r2, [sp, #76]	; 0x4c
   1f818:	9b14      	ldr	r3, [sp, #80]	; 0x50
   1f81a:	f8c8 3000 	str.w	r3, [r8]
   1f81e:	3701      	adds	r7, #1
   1f820:	4414      	add	r4, r2
   1f822:	2f07      	cmp	r7, #7
   1f824:	9425      	str	r4, [sp, #148]	; 0x94
   1f826:	9724      	str	r7, [sp, #144]	; 0x90
   1f828:	f8c8 2004 	str.w	r2, [r8, #4]
   1f82c:	f300 8202 	bgt.w	1fc34 <_svfprintf_r+0xe34>
   1f830:	f108 0808 	add.w	r8, r8, #8
   1f834:	2300      	movs	r3, #0
   1f836:	2200      	movs	r2, #0
   1f838:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
   1f83c:	f7fc fb8e 	bl	1bf5c <__aeabi_dcmpeq>
   1f840:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   1f842:	2800      	cmp	r0, #0
   1f844:	f040 8101 	bne.w	1fa4a <_svfprintf_r+0xc4a>
   1f848:	3b01      	subs	r3, #1
   1f84a:	3701      	adds	r7, #1
   1f84c:	3601      	adds	r6, #1
   1f84e:	441c      	add	r4, r3
   1f850:	2f07      	cmp	r7, #7
   1f852:	9724      	str	r7, [sp, #144]	; 0x90
   1f854:	9425      	str	r4, [sp, #148]	; 0x94
   1f856:	f8c8 6000 	str.w	r6, [r8]
   1f85a:	f8c8 3004 	str.w	r3, [r8, #4]
   1f85e:	f300 8128 	bgt.w	1fab2 <_svfprintf_r+0xcb2>
   1f862:	f108 0808 	add.w	r8, r8, #8
   1f866:	9a15      	ldr	r2, [sp, #84]	; 0x54
   1f868:	f8c8 2004 	str.w	r2, [r8, #4]
   1f86c:	3701      	adds	r7, #1
   1f86e:	4414      	add	r4, r2
   1f870:	ab1f      	add	r3, sp, #124	; 0x7c
   1f872:	2f07      	cmp	r7, #7
   1f874:	9425      	str	r4, [sp, #148]	; 0x94
   1f876:	9724      	str	r7, [sp, #144]	; 0x90
   1f878:	f8c8 3000 	str.w	r3, [r8]
   1f87c:	f77f aca5 	ble.w	1f1ca <_svfprintf_r+0x3ca>
   1f880:	aa23      	add	r2, sp, #140	; 0x8c
   1f882:	9907      	ldr	r1, [sp, #28]
   1f884:	9808      	ldr	r0, [sp, #32]
   1f886:	f002 fc6d 	bl	22164 <__ssprint_r>
   1f88a:	2800      	cmp	r0, #0
   1f88c:	f47f ab8a 	bne.w	1efa4 <_svfprintf_r+0x1a4>
   1f890:	9c25      	ldr	r4, [sp, #148]	; 0x94
   1f892:	46c8      	mov	r8, r9
   1f894:	e49b      	b.n	1f1ce <_svfprintf_r+0x3ce>
   1f896:	aa23      	add	r2, sp, #140	; 0x8c
   1f898:	9907      	ldr	r1, [sp, #28]
   1f89a:	9808      	ldr	r0, [sp, #32]
   1f89c:	f002 fc62 	bl	22164 <__ssprint_r>
   1f8a0:	2800      	cmp	r0, #0
   1f8a2:	f43f acdd 	beq.w	1f260 <_svfprintf_r+0x460>
   1f8a6:	f7ff bb7d 	b.w	1efa4 <_svfprintf_r+0x1a4>
   1f8aa:	f8dd b00c 	ldr.w	fp, [sp, #12]
   1f8ae:	2b01      	cmp	r3, #1
   1f8b0:	f000 8135 	beq.w	1fb1e <_svfprintf_r+0xd1e>
   1f8b4:	2b02      	cmp	r3, #2
   1f8b6:	d125      	bne.n	1f904 <_svfprintf_r+0xb04>
   1f8b8:	f8cd b00c 	str.w	fp, [sp, #12]
   1f8bc:	2400      	movs	r4, #0
   1f8be:	2500      	movs	r5, #0
   1f8c0:	e611      	b.n	1f4e6 <_svfprintf_r+0x6e6>
   1f8c2:	aa23      	add	r2, sp, #140	; 0x8c
   1f8c4:	9907      	ldr	r1, [sp, #28]
   1f8c6:	9808      	ldr	r0, [sp, #32]
   1f8c8:	f002 fc4c 	bl	22164 <__ssprint_r>
   1f8cc:	2800      	cmp	r0, #0
   1f8ce:	f47f ab69 	bne.w	1efa4 <_svfprintf_r+0x1a4>
   1f8d2:	9c25      	ldr	r4, [sp, #148]	; 0x94
   1f8d4:	46c8      	mov	r8, r9
   1f8d6:	e467      	b.n	1f1a8 <_svfprintf_r+0x3a8>
   1f8d8:	aa23      	add	r2, sp, #140	; 0x8c
   1f8da:	9907      	ldr	r1, [sp, #28]
   1f8dc:	9808      	ldr	r0, [sp, #32]
   1f8de:	f002 fc41 	bl	22164 <__ssprint_r>
   1f8e2:	2800      	cmp	r0, #0
   1f8e4:	f47f ab5e 	bne.w	1efa4 <_svfprintf_r+0x1a4>
   1f8e8:	9c25      	ldr	r4, [sp, #148]	; 0x94
   1f8ea:	46c8      	mov	r8, r9
   1f8ec:	e41d      	b.n	1f12a <_svfprintf_r+0x32a>
   1f8ee:	aa23      	add	r2, sp, #140	; 0x8c
   1f8f0:	9907      	ldr	r1, [sp, #28]
   1f8f2:	9808      	ldr	r0, [sp, #32]
   1f8f4:	f002 fc36 	bl	22164 <__ssprint_r>
   1f8f8:	2800      	cmp	r0, #0
   1f8fa:	f47f ab53 	bne.w	1efa4 <_svfprintf_r+0x1a4>
   1f8fe:	9c25      	ldr	r4, [sp, #148]	; 0x94
   1f900:	46c8      	mov	r8, r9
   1f902:	e402      	b.n	1f10a <_svfprintf_r+0x30a>
   1f904:	f8cd b00c 	str.w	fp, [sp, #12]
   1f908:	2400      	movs	r4, #0
   1f90a:	2500      	movs	r5, #0
   1f90c:	4649      	mov	r1, r9
   1f90e:	e000      	b.n	1f912 <_svfprintf_r+0xb12>
   1f910:	4631      	mov	r1, r6
   1f912:	08e2      	lsrs	r2, r4, #3
   1f914:	ea42 7245 	orr.w	r2, r2, r5, lsl #29
   1f918:	08e8      	lsrs	r0, r5, #3
   1f91a:	f004 0307 	and.w	r3, r4, #7
   1f91e:	4605      	mov	r5, r0
   1f920:	4614      	mov	r4, r2
   1f922:	3330      	adds	r3, #48	; 0x30
   1f924:	ea54 0205 	orrs.w	r2, r4, r5
   1f928:	f801 3c01 	strb.w	r3, [r1, #-1]
   1f92c:	f101 36ff 	add.w	r6, r1, #4294967295
   1f930:	d1ee      	bne.n	1f910 <_svfprintf_r+0xb10>
   1f932:	9a03      	ldr	r2, [sp, #12]
   1f934:	07d2      	lsls	r2, r2, #31
   1f936:	f57f ade6 	bpl.w	1f506 <_svfprintf_r+0x706>
   1f93a:	2b30      	cmp	r3, #48	; 0x30
   1f93c:	f43f ade3 	beq.w	1f506 <_svfprintf_r+0x706>
   1f940:	3902      	subs	r1, #2
   1f942:	2330      	movs	r3, #48	; 0x30
   1f944:	f806 3c01 	strb.w	r3, [r6, #-1]
   1f948:	eba9 0301 	sub.w	r3, r9, r1
   1f94c:	930a      	str	r3, [sp, #40]	; 0x28
   1f94e:	460e      	mov	r6, r1
   1f950:	f7ff bb66 	b.w	1f020 <_svfprintf_r+0x220>
   1f954:	991d      	ldr	r1, [sp, #116]	; 0x74
   1f956:	2900      	cmp	r1, #0
   1f958:	f340 8231 	ble.w	1fdbe <_svfprintf_r+0xfbe>
   1f95c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   1f95e:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
   1f960:	4293      	cmp	r3, r2
   1f962:	bfa8      	it	ge
   1f964:	4613      	movge	r3, r2
   1f966:	2b00      	cmp	r3, #0
   1f968:	461f      	mov	r7, r3
   1f96a:	dd0d      	ble.n	1f988 <_svfprintf_r+0xb88>
   1f96c:	9b24      	ldr	r3, [sp, #144]	; 0x90
   1f96e:	f8c8 6000 	str.w	r6, [r8]
   1f972:	3301      	adds	r3, #1
   1f974:	443c      	add	r4, r7
   1f976:	2b07      	cmp	r3, #7
   1f978:	9425      	str	r4, [sp, #148]	; 0x94
   1f97a:	f8c8 7004 	str.w	r7, [r8, #4]
   1f97e:	9324      	str	r3, [sp, #144]	; 0x90
   1f980:	f300 8321 	bgt.w	1ffc6 <_svfprintf_r+0x11c6>
   1f984:	f108 0808 	add.w	r8, r8, #8
   1f988:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   1f98a:	2f00      	cmp	r7, #0
   1f98c:	bfa8      	it	ge
   1f98e:	1bdb      	subge	r3, r3, r7
   1f990:	2b00      	cmp	r3, #0
   1f992:	461f      	mov	r7, r3
   1f994:	f340 80d7 	ble.w	1fb46 <_svfprintf_r+0xd46>
   1f998:	2f10      	cmp	r7, #16
   1f99a:	9b24      	ldr	r3, [sp, #144]	; 0x90
   1f99c:	4d31      	ldr	r5, [pc, #196]	; (1fa64 <_svfprintf_r+0xc64>)
   1f99e:	f340 81f0 	ble.w	1fd82 <_svfprintf_r+0xf82>
   1f9a2:	4642      	mov	r2, r8
   1f9a4:	4621      	mov	r1, r4
   1f9a6:	46b0      	mov	r8, r6
   1f9a8:	f04f 0b10 	mov.w	fp, #16
   1f9ac:	462e      	mov	r6, r5
   1f9ae:	9c08      	ldr	r4, [sp, #32]
   1f9b0:	9d07      	ldr	r5, [sp, #28]
   1f9b2:	e004      	b.n	1f9be <_svfprintf_r+0xbbe>
   1f9b4:	3208      	adds	r2, #8
   1f9b6:	3f10      	subs	r7, #16
   1f9b8:	2f10      	cmp	r7, #16
   1f9ba:	f340 81de 	ble.w	1fd7a <_svfprintf_r+0xf7a>
   1f9be:	3301      	adds	r3, #1
   1f9c0:	3110      	adds	r1, #16
   1f9c2:	2b07      	cmp	r3, #7
   1f9c4:	9125      	str	r1, [sp, #148]	; 0x94
   1f9c6:	9324      	str	r3, [sp, #144]	; 0x90
   1f9c8:	e882 0840 	stmia.w	r2, {r6, fp}
   1f9cc:	ddf2      	ble.n	1f9b4 <_svfprintf_r+0xbb4>
   1f9ce:	aa23      	add	r2, sp, #140	; 0x8c
   1f9d0:	4629      	mov	r1, r5
   1f9d2:	4620      	mov	r0, r4
   1f9d4:	f002 fbc6 	bl	22164 <__ssprint_r>
   1f9d8:	2800      	cmp	r0, #0
   1f9da:	f47f aae3 	bne.w	1efa4 <_svfprintf_r+0x1a4>
   1f9de:	9925      	ldr	r1, [sp, #148]	; 0x94
   1f9e0:	9b24      	ldr	r3, [sp, #144]	; 0x90
   1f9e2:	464a      	mov	r2, r9
   1f9e4:	e7e7      	b.n	1f9b6 <_svfprintf_r+0xbb6>
   1f9e6:	2d00      	cmp	r5, #0
   1f9e8:	bf08      	it	eq
   1f9ea:	2c0a      	cmpeq	r4, #10
   1f9ec:	f0c0 8095 	bcc.w	1fb1a <_svfprintf_r+0xd1a>
   1f9f0:	464e      	mov	r6, r9
   1f9f2:	4620      	mov	r0, r4
   1f9f4:	4629      	mov	r1, r5
   1f9f6:	220a      	movs	r2, #10
   1f9f8:	2300      	movs	r3, #0
   1f9fa:	f7fc fcd7 	bl	1c3ac <__aeabi_uldivmod>
   1f9fe:	3230      	adds	r2, #48	; 0x30
   1fa00:	f806 2d01 	strb.w	r2, [r6, #-1]!
   1fa04:	4620      	mov	r0, r4
   1fa06:	4629      	mov	r1, r5
   1fa08:	2300      	movs	r3, #0
   1fa0a:	220a      	movs	r2, #10
   1fa0c:	f7fc fcce 	bl	1c3ac <__aeabi_uldivmod>
   1fa10:	4604      	mov	r4, r0
   1fa12:	460d      	mov	r5, r1
   1fa14:	ea54 0305 	orrs.w	r3, r4, r5
   1fa18:	d1eb      	bne.n	1f9f2 <_svfprintf_r+0xbf2>
   1fa1a:	eba9 0306 	sub.w	r3, r9, r6
   1fa1e:	930a      	str	r3, [sp, #40]	; 0x28
   1fa20:	f7ff bafe 	b.w	1f020 <_svfprintf_r+0x220>
   1fa24:	9b06      	ldr	r3, [sp, #24]
   1fa26:	930a      	str	r3, [sp, #40]	; 0x28
   1fa28:	464e      	mov	r6, r9
   1fa2a:	f7ff baf9 	b.w	1f020 <_svfprintf_r+0x220>
   1fa2e:	aa23      	add	r2, sp, #140	; 0x8c
   1fa30:	9907      	ldr	r1, [sp, #28]
   1fa32:	9808      	ldr	r0, [sp, #32]
   1fa34:	f002 fb96 	bl	22164 <__ssprint_r>
   1fa38:	2800      	cmp	r0, #0
   1fa3a:	f47f aab3 	bne.w	1efa4 <_svfprintf_r+0x1a4>
   1fa3e:	f89d 706f 	ldrb.w	r7, [sp, #111]	; 0x6f
   1fa42:	9c25      	ldr	r4, [sp, #148]	; 0x94
   1fa44:	46c8      	mov	r8, r9
   1fa46:	f7ff bb50 	b.w	1f0ea <_svfprintf_r+0x2ea>
   1fa4a:	1e5e      	subs	r6, r3, #1
   1fa4c:	2e00      	cmp	r6, #0
   1fa4e:	f77f af0a 	ble.w	1f866 <_svfprintf_r+0xa66>
   1fa52:	2e10      	cmp	r6, #16
   1fa54:	4d03      	ldr	r5, [pc, #12]	; (1fa64 <_svfprintf_r+0xc64>)
   1fa56:	dd23      	ble.n	1faa0 <_svfprintf_r+0xca0>
   1fa58:	4622      	mov	r2, r4
   1fa5a:	f04f 0b10 	mov.w	fp, #16
   1fa5e:	9c08      	ldr	r4, [sp, #32]
   1fa60:	e007      	b.n	1fa72 <_svfprintf_r+0xc72>
   1fa62:	bf00      	nop
   1fa64:	00024bc4 	.word	0x00024bc4
   1fa68:	3e10      	subs	r6, #16
   1fa6a:	2e10      	cmp	r6, #16
   1fa6c:	f108 0808 	add.w	r8, r8, #8
   1fa70:	dd15      	ble.n	1fa9e <_svfprintf_r+0xc9e>
   1fa72:	3701      	adds	r7, #1
   1fa74:	3210      	adds	r2, #16
   1fa76:	2f07      	cmp	r7, #7
   1fa78:	9225      	str	r2, [sp, #148]	; 0x94
   1fa7a:	9724      	str	r7, [sp, #144]	; 0x90
   1fa7c:	e888 0820 	stmia.w	r8, {r5, fp}
   1fa80:	ddf2      	ble.n	1fa68 <_svfprintf_r+0xc68>
   1fa82:	aa23      	add	r2, sp, #140	; 0x8c
   1fa84:	9907      	ldr	r1, [sp, #28]
   1fa86:	4620      	mov	r0, r4
   1fa88:	f002 fb6c 	bl	22164 <__ssprint_r>
   1fa8c:	2800      	cmp	r0, #0
   1fa8e:	f47f aa89 	bne.w	1efa4 <_svfprintf_r+0x1a4>
   1fa92:	3e10      	subs	r6, #16
   1fa94:	2e10      	cmp	r6, #16
   1fa96:	9a25      	ldr	r2, [sp, #148]	; 0x94
   1fa98:	9f24      	ldr	r7, [sp, #144]	; 0x90
   1fa9a:	46c8      	mov	r8, r9
   1fa9c:	dce9      	bgt.n	1fa72 <_svfprintf_r+0xc72>
   1fa9e:	4614      	mov	r4, r2
   1faa0:	3701      	adds	r7, #1
   1faa2:	4434      	add	r4, r6
   1faa4:	2f07      	cmp	r7, #7
   1faa6:	9425      	str	r4, [sp, #148]	; 0x94
   1faa8:	9724      	str	r7, [sp, #144]	; 0x90
   1faaa:	e888 0060 	stmia.w	r8, {r5, r6}
   1faae:	f77f aed8 	ble.w	1f862 <_svfprintf_r+0xa62>
   1fab2:	aa23      	add	r2, sp, #140	; 0x8c
   1fab4:	9907      	ldr	r1, [sp, #28]
   1fab6:	9808      	ldr	r0, [sp, #32]
   1fab8:	f002 fb54 	bl	22164 <__ssprint_r>
   1fabc:	2800      	cmp	r0, #0
   1fabe:	f47f aa71 	bne.w	1efa4 <_svfprintf_r+0x1a4>
   1fac2:	9c25      	ldr	r4, [sp, #148]	; 0x94
   1fac4:	9f24      	ldr	r7, [sp, #144]	; 0x90
   1fac6:	46c8      	mov	r8, r9
   1fac8:	e6cd      	b.n	1f866 <_svfprintf_r+0xa66>
   1faca:	681c      	ldr	r4, [r3, #0]
   1facc:	3304      	adds	r3, #4
   1face:	930b      	str	r3, [sp, #44]	; 0x2c
   1fad0:	2500      	movs	r5, #0
   1fad2:	e422      	b.n	1f31a <_svfprintf_r+0x51a>
   1fad4:	990b      	ldr	r1, [sp, #44]	; 0x2c
   1fad6:	460a      	mov	r2, r1
   1fad8:	3204      	adds	r2, #4
   1fada:	680c      	ldr	r4, [r1, #0]
   1fadc:	920b      	str	r2, [sp, #44]	; 0x2c
   1fade:	2500      	movs	r5, #0
   1fae0:	f7ff ba81 	b.w	1efe6 <_svfprintf_r+0x1e6>
   1fae4:	3204      	adds	r2, #4
   1fae6:	681c      	ldr	r4, [r3, #0]
   1fae8:	920b      	str	r2, [sp, #44]	; 0x2c
   1faea:	2301      	movs	r3, #1
   1faec:	2500      	movs	r5, #0
   1faee:	f7ff ba7a 	b.w	1efe6 <_svfprintf_r+0x1e6>
   1faf2:	4614      	mov	r4, r2
   1faf4:	3301      	adds	r3, #1
   1faf6:	4434      	add	r4, r6
   1faf8:	2b07      	cmp	r3, #7
   1fafa:	9425      	str	r4, [sp, #148]	; 0x94
   1fafc:	9324      	str	r3, [sp, #144]	; 0x90
   1fafe:	e888 0060 	stmia.w	r8, {r5, r6}
   1fb02:	f77f ab62 	ble.w	1f1ca <_svfprintf_r+0x3ca>
   1fb06:	e6bb      	b.n	1f880 <_svfprintf_r+0xa80>
   1fb08:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
   1fb0a:	6814      	ldr	r4, [r2, #0]
   1fb0c:	4613      	mov	r3, r2
   1fb0e:	3304      	adds	r3, #4
   1fb10:	17e5      	asrs	r5, r4, #31
   1fb12:	930b      	str	r3, [sp, #44]	; 0x2c
   1fb14:	4622      	mov	r2, r4
   1fb16:	462b      	mov	r3, r5
   1fb18:	e4cd      	b.n	1f4b6 <_svfprintf_r+0x6b6>
   1fb1a:	f8dd b00c 	ldr.w	fp, [sp, #12]
   1fb1e:	f8cd b00c 	str.w	fp, [sp, #12]
   1fb22:	ae40      	add	r6, sp, #256	; 0x100
   1fb24:	3430      	adds	r4, #48	; 0x30
   1fb26:	2301      	movs	r3, #1
   1fb28:	f806 4d41 	strb.w	r4, [r6, #-65]!
   1fb2c:	930a      	str	r3, [sp, #40]	; 0x28
   1fb2e:	f7ff ba77 	b.w	1f020 <_svfprintf_r+0x220>
   1fb32:	aa23      	add	r2, sp, #140	; 0x8c
   1fb34:	9907      	ldr	r1, [sp, #28]
   1fb36:	9808      	ldr	r0, [sp, #32]
   1fb38:	f002 fb14 	bl	22164 <__ssprint_r>
   1fb3c:	2800      	cmp	r0, #0
   1fb3e:	f47f aa31 	bne.w	1efa4 <_svfprintf_r+0x1a4>
   1fb42:	9c25      	ldr	r4, [sp, #148]	; 0x94
   1fb44:	46c8      	mov	r8, r9
   1fb46:	9a1d      	ldr	r2, [sp, #116]	; 0x74
   1fb48:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   1fb4a:	429a      	cmp	r2, r3
   1fb4c:	db44      	blt.n	1fbd8 <_svfprintf_r+0xdd8>
   1fb4e:	9b03      	ldr	r3, [sp, #12]
   1fb50:	07d9      	lsls	r1, r3, #31
   1fb52:	d441      	bmi.n	1fbd8 <_svfprintf_r+0xdd8>
   1fb54:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   1fb56:	980e      	ldr	r0, [sp, #56]	; 0x38
   1fb58:	1a9a      	subs	r2, r3, r2
   1fb5a:	1a1d      	subs	r5, r3, r0
   1fb5c:	4295      	cmp	r5, r2
   1fb5e:	bfa8      	it	ge
   1fb60:	4615      	movge	r5, r2
   1fb62:	2d00      	cmp	r5, #0
   1fb64:	dd0e      	ble.n	1fb84 <_svfprintf_r+0xd84>
   1fb66:	9924      	ldr	r1, [sp, #144]	; 0x90
   1fb68:	f8c8 5004 	str.w	r5, [r8, #4]
   1fb6c:	3101      	adds	r1, #1
   1fb6e:	4406      	add	r6, r0
   1fb70:	442c      	add	r4, r5
   1fb72:	2907      	cmp	r1, #7
   1fb74:	f8c8 6000 	str.w	r6, [r8]
   1fb78:	9425      	str	r4, [sp, #148]	; 0x94
   1fb7a:	9124      	str	r1, [sp, #144]	; 0x90
   1fb7c:	f300 823a 	bgt.w	1fff4 <_svfprintf_r+0x11f4>
   1fb80:	f108 0808 	add.w	r8, r8, #8
   1fb84:	2d00      	cmp	r5, #0
   1fb86:	bfac      	ite	ge
   1fb88:	1b56      	subge	r6, r2, r5
   1fb8a:	4616      	movlt	r6, r2
   1fb8c:	2e00      	cmp	r6, #0
   1fb8e:	f77f ab1e 	ble.w	1f1ce <_svfprintf_r+0x3ce>
   1fb92:	2e10      	cmp	r6, #16
   1fb94:	9b24      	ldr	r3, [sp, #144]	; 0x90
   1fb96:	4db1      	ldr	r5, [pc, #708]	; (1fe5c <_svfprintf_r+0x105c>)
   1fb98:	ddac      	ble.n	1faf4 <_svfprintf_r+0xcf4>
   1fb9a:	4622      	mov	r2, r4
   1fb9c:	2710      	movs	r7, #16
   1fb9e:	f8dd b020 	ldr.w	fp, [sp, #32]
   1fba2:	9c07      	ldr	r4, [sp, #28]
   1fba4:	e004      	b.n	1fbb0 <_svfprintf_r+0xdb0>
   1fba6:	f108 0808 	add.w	r8, r8, #8
   1fbaa:	3e10      	subs	r6, #16
   1fbac:	2e10      	cmp	r6, #16
   1fbae:	dda0      	ble.n	1faf2 <_svfprintf_r+0xcf2>
   1fbb0:	3301      	adds	r3, #1
   1fbb2:	3210      	adds	r2, #16
   1fbb4:	2b07      	cmp	r3, #7
   1fbb6:	9225      	str	r2, [sp, #148]	; 0x94
   1fbb8:	9324      	str	r3, [sp, #144]	; 0x90
   1fbba:	e888 00a0 	stmia.w	r8, {r5, r7}
   1fbbe:	ddf2      	ble.n	1fba6 <_svfprintf_r+0xda6>
   1fbc0:	aa23      	add	r2, sp, #140	; 0x8c
   1fbc2:	4621      	mov	r1, r4
   1fbc4:	4658      	mov	r0, fp
   1fbc6:	f002 facd 	bl	22164 <__ssprint_r>
   1fbca:	2800      	cmp	r0, #0
   1fbcc:	f47f a9ea 	bne.w	1efa4 <_svfprintf_r+0x1a4>
   1fbd0:	9a25      	ldr	r2, [sp, #148]	; 0x94
   1fbd2:	9b24      	ldr	r3, [sp, #144]	; 0x90
   1fbd4:	46c8      	mov	r8, r9
   1fbd6:	e7e8      	b.n	1fbaa <_svfprintf_r+0xdaa>
   1fbd8:	9b24      	ldr	r3, [sp, #144]	; 0x90
   1fbda:	9813      	ldr	r0, [sp, #76]	; 0x4c
   1fbdc:	9914      	ldr	r1, [sp, #80]	; 0x50
   1fbde:	f8c8 1000 	str.w	r1, [r8]
   1fbe2:	3301      	adds	r3, #1
   1fbe4:	4404      	add	r4, r0
   1fbe6:	2b07      	cmp	r3, #7
   1fbe8:	9425      	str	r4, [sp, #148]	; 0x94
   1fbea:	f8c8 0004 	str.w	r0, [r8, #4]
   1fbee:	9324      	str	r3, [sp, #144]	; 0x90
   1fbf0:	f300 81f4 	bgt.w	1ffdc <_svfprintf_r+0x11dc>
   1fbf4:	f108 0808 	add.w	r8, r8, #8
   1fbf8:	e7ac      	b.n	1fb54 <_svfprintf_r+0xd54>
   1fbfa:	9b03      	ldr	r3, [sp, #12]
   1fbfc:	07da      	lsls	r2, r3, #31
   1fbfe:	f53f adfc 	bmi.w	1f7fa <_svfprintf_r+0x9fa>
   1fc02:	3701      	adds	r7, #1
   1fc04:	3401      	adds	r4, #1
   1fc06:	2301      	movs	r3, #1
   1fc08:	2f07      	cmp	r7, #7
   1fc0a:	9425      	str	r4, [sp, #148]	; 0x94
   1fc0c:	9724      	str	r7, [sp, #144]	; 0x90
   1fc0e:	f8c8 6000 	str.w	r6, [r8]
   1fc12:	f8c8 3004 	str.w	r3, [r8, #4]
   1fc16:	f77f ae24 	ble.w	1f862 <_svfprintf_r+0xa62>
   1fc1a:	e74a      	b.n	1fab2 <_svfprintf_r+0xcb2>
   1fc1c:	aa23      	add	r2, sp, #140	; 0x8c
   1fc1e:	9907      	ldr	r1, [sp, #28]
   1fc20:	9808      	ldr	r0, [sp, #32]
   1fc22:	f002 fa9f 	bl	22164 <__ssprint_r>
   1fc26:	2800      	cmp	r0, #0
   1fc28:	f47f a9bc 	bne.w	1efa4 <_svfprintf_r+0x1a4>
   1fc2c:	9c25      	ldr	r4, [sp, #148]	; 0x94
   1fc2e:	9f24      	ldr	r7, [sp, #144]	; 0x90
   1fc30:	46c8      	mov	r8, r9
   1fc32:	e5f0      	b.n	1f816 <_svfprintf_r+0xa16>
   1fc34:	aa23      	add	r2, sp, #140	; 0x8c
   1fc36:	9907      	ldr	r1, [sp, #28]
   1fc38:	9808      	ldr	r0, [sp, #32]
   1fc3a:	f002 fa93 	bl	22164 <__ssprint_r>
   1fc3e:	2800      	cmp	r0, #0
   1fc40:	f47f a9b0 	bne.w	1efa4 <_svfprintf_r+0x1a4>
   1fc44:	9c25      	ldr	r4, [sp, #148]	; 0x94
   1fc46:	9f24      	ldr	r7, [sp, #144]	; 0x90
   1fc48:	46c8      	mov	r8, r9
   1fc4a:	e5f3      	b.n	1f834 <_svfprintf_r+0xa34>
   1fc4c:	464e      	mov	r6, r9
   1fc4e:	f7ff b9e7 	b.w	1f020 <_svfprintf_r+0x220>
   1fc52:	aa23      	add	r2, sp, #140	; 0x8c
   1fc54:	9907      	ldr	r1, [sp, #28]
   1fc56:	9808      	ldr	r0, [sp, #32]
   1fc58:	f002 fa84 	bl	22164 <__ssprint_r>
   1fc5c:	2800      	cmp	r0, #0
   1fc5e:	f47f a9a1 	bne.w	1efa4 <_svfprintf_r+0x1a4>
   1fc62:	9c25      	ldr	r4, [sp, #148]	; 0x94
   1fc64:	46c8      	mov	r8, r9
   1fc66:	f7ff ba63 	b.w	1f130 <_svfprintf_r+0x330>
   1fc6a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
   1fc6e:	4602      	mov	r2, r0
   1fc70:	460b      	mov	r3, r1
   1fc72:	f002 fc4d 	bl	22510 <__aeabi_dcmpun>
   1fc76:	2800      	cmp	r0, #0
   1fc78:	f040 8298 	bne.w	201ac <_svfprintf_r+0x13ac>
   1fc7c:	9b06      	ldr	r3, [sp, #24]
   1fc7e:	3301      	adds	r3, #1
   1fc80:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   1fc82:	f023 0720 	bic.w	r7, r3, #32
   1fc86:	f000 81d2 	beq.w	2002e <_svfprintf_r+0x122e>
   1fc8a:	2f47      	cmp	r7, #71	; 0x47
   1fc8c:	f000 8120 	beq.w	1fed0 <_svfprintf_r+0x10d0>
   1fc90:	9b11      	ldr	r3, [sp, #68]	; 0x44
   1fc92:	f44b 7280 	orr.w	r2, fp, #256	; 0x100
   1fc96:	2b00      	cmp	r3, #0
   1fc98:	9203      	str	r2, [sp, #12]
   1fc9a:	f2c0 81f0 	blt.w	2007e <_svfprintf_r+0x127e>
   1fc9e:	ed9d 7b10 	vldr	d7, [sp, #64]	; 0x40
   1fca2:	ed8d 7b18 	vstr	d7, [sp, #96]	; 0x60
   1fca6:	2300      	movs	r3, #0
   1fca8:	930c      	str	r3, [sp, #48]	; 0x30
   1fcaa:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   1fcac:	2b66      	cmp	r3, #102	; 0x66
   1fcae:	f000 81c1 	beq.w	20034 <_svfprintf_r+0x1234>
   1fcb2:	2b46      	cmp	r3, #70	; 0x46
   1fcb4:	f000 80f1 	beq.w	1fe9a <_svfprintf_r+0x109a>
   1fcb8:	2f45      	cmp	r7, #69	; 0x45
   1fcba:	bf0c      	ite	eq
   1fcbc:	9b06      	ldreq	r3, [sp, #24]
   1fcbe:	9d06      	ldrne	r5, [sp, #24]
   1fcc0:	9808      	ldr	r0, [sp, #32]
   1fcc2:	bf08      	it	eq
   1fcc4:	1c5d      	addeq	r5, r3, #1
   1fcc6:	aa21      	add	r2, sp, #132	; 0x84
   1fcc8:	ab1e      	add	r3, sp, #120	; 0x78
   1fcca:	9201      	str	r2, [sp, #4]
   1fccc:	9300      	str	r3, [sp, #0]
   1fcce:	462a      	mov	r2, r5
   1fcd0:	ab1d      	add	r3, sp, #116	; 0x74
   1fcd2:	2102      	movs	r1, #2
   1fcd4:	ed9d 0b18 	vldr	d0, [sp, #96]	; 0x60
   1fcd8:	f000 fcae 	bl	20638 <_dtoa_r>
   1fcdc:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   1fcde:	2b67      	cmp	r3, #103	; 0x67
   1fce0:	4606      	mov	r6, r0
   1fce2:	f040 81d5 	bne.w	20090 <_svfprintf_r+0x1290>
   1fce6:	f01b 0f01 	tst.w	fp, #1
   1fcea:	f000 824e 	beq.w	2018a <_svfprintf_r+0x138a>
   1fcee:	1974      	adds	r4, r6, r5
   1fcf0:	2200      	movs	r2, #0
   1fcf2:	2300      	movs	r3, #0
   1fcf4:	e9dd 0118 	ldrd	r0, r1, [sp, #96]	; 0x60
   1fcf8:	f7fc f930 	bl	1bf5c <__aeabi_dcmpeq>
   1fcfc:	2800      	cmp	r0, #0
   1fcfe:	f040 8160 	bne.w	1ffc2 <_svfprintf_r+0x11c2>
   1fd02:	9b21      	ldr	r3, [sp, #132]	; 0x84
   1fd04:	42a3      	cmp	r3, r4
   1fd06:	d206      	bcs.n	1fd16 <_svfprintf_r+0xf16>
   1fd08:	2130      	movs	r1, #48	; 0x30
   1fd0a:	1c5a      	adds	r2, r3, #1
   1fd0c:	9221      	str	r2, [sp, #132]	; 0x84
   1fd0e:	7019      	strb	r1, [r3, #0]
   1fd10:	9b21      	ldr	r3, [sp, #132]	; 0x84
   1fd12:	429c      	cmp	r4, r3
   1fd14:	d8f9      	bhi.n	1fd0a <_svfprintf_r+0xf0a>
   1fd16:	1b9b      	subs	r3, r3, r6
   1fd18:	2f47      	cmp	r7, #71	; 0x47
   1fd1a:	930f      	str	r3, [sp, #60]	; 0x3c
   1fd1c:	f000 80f0 	beq.w	1ff00 <_svfprintf_r+0x1100>
   1fd20:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   1fd22:	2b65      	cmp	r3, #101	; 0x65
   1fd24:	f340 81c3 	ble.w	200ae <_svfprintf_r+0x12ae>
   1fd28:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   1fd2a:	2b66      	cmp	r3, #102	; 0x66
   1fd2c:	9b1d      	ldr	r3, [sp, #116]	; 0x74
   1fd2e:	930e      	str	r3, [sp, #56]	; 0x38
   1fd30:	f000 81c0 	beq.w	200b4 <_svfprintf_r+0x12b4>
   1fd34:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   1fd36:	9a0e      	ldr	r2, [sp, #56]	; 0x38
   1fd38:	4619      	mov	r1, r3
   1fd3a:	4291      	cmp	r1, r2
   1fd3c:	f300 8191 	bgt.w	20062 <_svfprintf_r+0x1262>
   1fd40:	f01b 0f01 	tst.w	fp, #1
   1fd44:	f040 8223 	bne.w	2018e <_svfprintf_r+0x138e>
   1fd48:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
   1fd4c:	9304      	str	r3, [sp, #16]
   1fd4e:	2367      	movs	r3, #103	; 0x67
   1fd50:	920a      	str	r2, [sp, #40]	; 0x28
   1fd52:	930d      	str	r3, [sp, #52]	; 0x34
   1fd54:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   1fd56:	2b00      	cmp	r3, #0
   1fd58:	f040 80cb 	bne.w	1fef2 <_svfprintf_r+0x10f2>
   1fd5c:	9306      	str	r3, [sp, #24]
   1fd5e:	f89d 706f 	ldrb.w	r7, [sp, #111]	; 0x6f
   1fd62:	f7ff b965 	b.w	1f030 <_svfprintf_r+0x230>
   1fd66:	f025 0507 	bic.w	r5, r5, #7
   1fd6a:	ed95 7b00 	vldr	d7, [r5]
   1fd6e:	f105 0308 	add.w	r3, r5, #8
   1fd72:	ed8d 7b10 	vstr	d7, [sp, #64]	; 0x40
   1fd76:	930b      	str	r3, [sp, #44]	; 0x2c
   1fd78:	e416      	b.n	1f5a8 <_svfprintf_r+0x7a8>
   1fd7a:	4635      	mov	r5, r6
   1fd7c:	460c      	mov	r4, r1
   1fd7e:	4646      	mov	r6, r8
   1fd80:	4690      	mov	r8, r2
   1fd82:	3301      	adds	r3, #1
   1fd84:	443c      	add	r4, r7
   1fd86:	2b07      	cmp	r3, #7
   1fd88:	9425      	str	r4, [sp, #148]	; 0x94
   1fd8a:	9324      	str	r3, [sp, #144]	; 0x90
   1fd8c:	e888 00a0 	stmia.w	r8, {r5, r7}
   1fd90:	f73f aecf 	bgt.w	1fb32 <_svfprintf_r+0xd32>
   1fd94:	f108 0808 	add.w	r8, r8, #8
   1fd98:	e6d5      	b.n	1fb46 <_svfprintf_r+0xd46>
   1fd9a:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
   1fd9c:	6813      	ldr	r3, [r2, #0]
   1fd9e:	3204      	adds	r2, #4
   1fda0:	920b      	str	r2, [sp, #44]	; 0x2c
   1fda2:	9a05      	ldr	r2, [sp, #20]
   1fda4:	601a      	str	r2, [r3, #0]
   1fda6:	f7ff b852 	b.w	1ee4e <_svfprintf_r+0x4e>
   1fdaa:	aa23      	add	r2, sp, #140	; 0x8c
   1fdac:	9907      	ldr	r1, [sp, #28]
   1fdae:	9808      	ldr	r0, [sp, #32]
   1fdb0:	f002 f9d8 	bl	22164 <__ssprint_r>
   1fdb4:	2800      	cmp	r0, #0
   1fdb6:	f47f a8f5 	bne.w	1efa4 <_svfprintf_r+0x1a4>
   1fdba:	46c8      	mov	r8, r9
   1fdbc:	e488      	b.n	1f6d0 <_svfprintf_r+0x8d0>
   1fdbe:	9b24      	ldr	r3, [sp, #144]	; 0x90
   1fdc0:	4a27      	ldr	r2, [pc, #156]	; (1fe60 <_svfprintf_r+0x1060>)
   1fdc2:	f8c8 2000 	str.w	r2, [r8]
   1fdc6:	3301      	adds	r3, #1
   1fdc8:	3401      	adds	r4, #1
   1fdca:	2201      	movs	r2, #1
   1fdcc:	2b07      	cmp	r3, #7
   1fdce:	9425      	str	r4, [sp, #148]	; 0x94
   1fdd0:	9324      	str	r3, [sp, #144]	; 0x90
   1fdd2:	f8c8 2004 	str.w	r2, [r8, #4]
   1fdd6:	dc54      	bgt.n	1fe82 <_svfprintf_r+0x1082>
   1fdd8:	f108 0808 	add.w	r8, r8, #8
   1fddc:	b929      	cbnz	r1, 1fdea <_svfprintf_r+0xfea>
   1fdde:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   1fde0:	b91b      	cbnz	r3, 1fdea <_svfprintf_r+0xfea>
   1fde2:	9b03      	ldr	r3, [sp, #12]
   1fde4:	07d8      	lsls	r0, r3, #31
   1fde6:	f57f a9f2 	bpl.w	1f1ce <_svfprintf_r+0x3ce>
   1fdea:	9b24      	ldr	r3, [sp, #144]	; 0x90
   1fdec:	9813      	ldr	r0, [sp, #76]	; 0x4c
   1fdee:	9a14      	ldr	r2, [sp, #80]	; 0x50
   1fdf0:	f8c8 2000 	str.w	r2, [r8]
   1fdf4:	3301      	adds	r3, #1
   1fdf6:	4602      	mov	r2, r0
   1fdf8:	4422      	add	r2, r4
   1fdfa:	2b07      	cmp	r3, #7
   1fdfc:	9225      	str	r2, [sp, #148]	; 0x94
   1fdfe:	f8c8 0004 	str.w	r0, [r8, #4]
   1fe02:	9324      	str	r3, [sp, #144]	; 0x90
   1fe04:	f300 8195 	bgt.w	20132 <_svfprintf_r+0x1332>
   1fe08:	f108 0808 	add.w	r8, r8, #8
   1fe0c:	2900      	cmp	r1, #0
   1fe0e:	f2c0 816d 	blt.w	200ec <_svfprintf_r+0x12ec>
   1fe12:	990f      	ldr	r1, [sp, #60]	; 0x3c
   1fe14:	f8c8 6000 	str.w	r6, [r8]
   1fe18:	3301      	adds	r3, #1
   1fe1a:	188c      	adds	r4, r1, r2
   1fe1c:	2b07      	cmp	r3, #7
   1fe1e:	9425      	str	r4, [sp, #148]	; 0x94
   1fe20:	9324      	str	r3, [sp, #144]	; 0x90
   1fe22:	f8c8 1004 	str.w	r1, [r8, #4]
   1fe26:	f77f a9d0 	ble.w	1f1ca <_svfprintf_r+0x3ca>
   1fe2a:	e529      	b.n	1f880 <_svfprintf_r+0xa80>
   1fe2c:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
   1fe2e:	9905      	ldr	r1, [sp, #20]
   1fe30:	6813      	ldr	r3, [r2, #0]
   1fe32:	17cd      	asrs	r5, r1, #31
   1fe34:	4608      	mov	r0, r1
   1fe36:	3204      	adds	r2, #4
   1fe38:	4629      	mov	r1, r5
   1fe3a:	920b      	str	r2, [sp, #44]	; 0x2c
   1fe3c:	e9c3 0100 	strd	r0, r1, [r3]
   1fe40:	f7ff b805 	b.w	1ee4e <_svfprintf_r+0x4e>
   1fe44:	aa23      	add	r2, sp, #140	; 0x8c
   1fe46:	9907      	ldr	r1, [sp, #28]
   1fe48:	9808      	ldr	r0, [sp, #32]
   1fe4a:	f002 f98b 	bl	22164 <__ssprint_r>
   1fe4e:	2800      	cmp	r0, #0
   1fe50:	f47f a8a8 	bne.w	1efa4 <_svfprintf_r+0x1a4>
   1fe54:	9c25      	ldr	r4, [sp, #148]	; 0x94
   1fe56:	46c8      	mov	r8, r9
   1fe58:	e453      	b.n	1f702 <_svfprintf_r+0x902>
   1fe5a:	bf00      	nop
   1fe5c:	00024bc4 	.word	0x00024bc4
   1fe60:	00024bb0 	.word	0x00024bb0
   1fe64:	2140      	movs	r1, #64	; 0x40
   1fe66:	9808      	ldr	r0, [sp, #32]
   1fe68:	f7fd fe80 	bl	1db6c <_malloc_r>
   1fe6c:	9a07      	ldr	r2, [sp, #28]
   1fe6e:	6010      	str	r0, [r2, #0]
   1fe70:	6110      	str	r0, [r2, #16]
   1fe72:	2800      	cmp	r0, #0
   1fe74:	f000 81f6 	beq.w	20264 <_svfprintf_r+0x1464>
   1fe78:	9a07      	ldr	r2, [sp, #28]
   1fe7a:	2340      	movs	r3, #64	; 0x40
   1fe7c:	6153      	str	r3, [r2, #20]
   1fe7e:	f7fe bfd6 	b.w	1ee2e <_svfprintf_r+0x2e>
   1fe82:	aa23      	add	r2, sp, #140	; 0x8c
   1fe84:	9907      	ldr	r1, [sp, #28]
   1fe86:	9808      	ldr	r0, [sp, #32]
   1fe88:	f002 f96c 	bl	22164 <__ssprint_r>
   1fe8c:	2800      	cmp	r0, #0
   1fe8e:	f47f a889 	bne.w	1efa4 <_svfprintf_r+0x1a4>
   1fe92:	991d      	ldr	r1, [sp, #116]	; 0x74
   1fe94:	9c25      	ldr	r4, [sp, #148]	; 0x94
   1fe96:	46c8      	mov	r8, r9
   1fe98:	e7a0      	b.n	1fddc <_svfprintf_r+0xfdc>
   1fe9a:	9d06      	ldr	r5, [sp, #24]
   1fe9c:	9808      	ldr	r0, [sp, #32]
   1fe9e:	aa21      	add	r2, sp, #132	; 0x84
   1fea0:	ab1e      	add	r3, sp, #120	; 0x78
   1fea2:	9201      	str	r2, [sp, #4]
   1fea4:	9300      	str	r3, [sp, #0]
   1fea6:	462a      	mov	r2, r5
   1fea8:	ab1d      	add	r3, sp, #116	; 0x74
   1feaa:	2103      	movs	r1, #3
   1feac:	ed9d 0b18 	vldr	d0, [sp, #96]	; 0x60
   1feb0:	f000 fbc2 	bl	20638 <_dtoa_r>
   1feb4:	4606      	mov	r6, r0
   1feb6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   1feb8:	2b46      	cmp	r3, #70	; 0x46
   1feba:	eb06 0405 	add.w	r4, r6, r5
   1febe:	f47f af17 	bne.w	1fcf0 <_svfprintf_r+0xef0>
   1fec2:	7833      	ldrb	r3, [r6, #0]
   1fec4:	2b30      	cmp	r3, #48	; 0x30
   1fec6:	f000 817d 	beq.w	201c4 <_svfprintf_r+0x13c4>
   1feca:	9d1d      	ldr	r5, [sp, #116]	; 0x74
   1fecc:	442c      	add	r4, r5
   1fece:	e70f      	b.n	1fcf0 <_svfprintf_r+0xef0>
   1fed0:	9b06      	ldr	r3, [sp, #24]
   1fed2:	2b00      	cmp	r3, #0
   1fed4:	bf08      	it	eq
   1fed6:	2301      	moveq	r3, #1
   1fed8:	9306      	str	r3, [sp, #24]
   1feda:	e6d9      	b.n	1fc90 <_svfprintf_r+0xe90>
   1fedc:	4630      	mov	r0, r6
   1fede:	9406      	str	r4, [sp, #24]
   1fee0:	f7fe fece 	bl	1ec80 <strlen>
   1fee4:	950b      	str	r5, [sp, #44]	; 0x2c
   1fee6:	900a      	str	r0, [sp, #40]	; 0x28
   1fee8:	f8cd b00c 	str.w	fp, [sp, #12]
   1feec:	4603      	mov	r3, r0
   1feee:	f7ff b9eb 	b.w	1f2c8 <_svfprintf_r+0x4c8>
   1fef2:	272d      	movs	r7, #45	; 0x2d
   1fef4:	2300      	movs	r3, #0
   1fef6:	f88d 706f 	strb.w	r7, [sp, #111]	; 0x6f
   1fefa:	9306      	str	r3, [sp, #24]
   1fefc:	f7ff b899 	b.w	1f032 <_svfprintf_r+0x232>
   1ff00:	9b1d      	ldr	r3, [sp, #116]	; 0x74
   1ff02:	930e      	str	r3, [sp, #56]	; 0x38
   1ff04:	461a      	mov	r2, r3
   1ff06:	3303      	adds	r3, #3
   1ff08:	db04      	blt.n	1ff14 <_svfprintf_r+0x1114>
   1ff0a:	9b06      	ldr	r3, [sp, #24]
   1ff0c:	4619      	mov	r1, r3
   1ff0e:	4291      	cmp	r1, r2
   1ff10:	f6bf af10 	bge.w	1fd34 <_svfprintf_r+0xf34>
   1ff14:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   1ff16:	3b02      	subs	r3, #2
   1ff18:	930d      	str	r3, [sp, #52]	; 0x34
   1ff1a:	f89d 3034 	ldrb.w	r3, [sp, #52]	; 0x34
   1ff1e:	f88d 307c 	strb.w	r3, [sp, #124]	; 0x7c
   1ff22:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   1ff24:	3b01      	subs	r3, #1
   1ff26:	2b00      	cmp	r3, #0
   1ff28:	931d      	str	r3, [sp, #116]	; 0x74
   1ff2a:	bfbd      	ittte	lt
   1ff2c:	9b0e      	ldrlt	r3, [sp, #56]	; 0x38
   1ff2e:	f1c3 0301 	rsblt	r3, r3, #1
   1ff32:	222d      	movlt	r2, #45	; 0x2d
   1ff34:	222b      	movge	r2, #43	; 0x2b
   1ff36:	2b09      	cmp	r3, #9
   1ff38:	f88d 207d 	strb.w	r2, [sp, #125]	; 0x7d
   1ff3c:	f340 811d 	ble.w	2017a <_svfprintf_r+0x137a>
   1ff40:	f10d 048b 	add.w	r4, sp, #139	; 0x8b
   1ff44:	4620      	mov	r0, r4
   1ff46:	4daf      	ldr	r5, [pc, #700]	; (20204 <_svfprintf_r+0x1404>)
   1ff48:	e000      	b.n	1ff4c <_svfprintf_r+0x114c>
   1ff4a:	4610      	mov	r0, r2
   1ff4c:	fb85 1203 	smull	r1, r2, r5, r3
   1ff50:	17d9      	asrs	r1, r3, #31
   1ff52:	ebc1 01a2 	rsb	r1, r1, r2, asr #2
   1ff56:	eb01 0281 	add.w	r2, r1, r1, lsl #2
   1ff5a:	eba3 0242 	sub.w	r2, r3, r2, lsl #1
   1ff5e:	3230      	adds	r2, #48	; 0x30
   1ff60:	2909      	cmp	r1, #9
   1ff62:	f800 2c01 	strb.w	r2, [r0, #-1]
   1ff66:	460b      	mov	r3, r1
   1ff68:	f100 32ff 	add.w	r2, r0, #4294967295
   1ff6c:	dced      	bgt.n	1ff4a <_svfprintf_r+0x114a>
   1ff6e:	3330      	adds	r3, #48	; 0x30
   1ff70:	3802      	subs	r0, #2
   1ff72:	b2d9      	uxtb	r1, r3
   1ff74:	4284      	cmp	r4, r0
   1ff76:	f802 1c01 	strb.w	r1, [r2, #-1]
   1ff7a:	f240 8170 	bls.w	2025e <_svfprintf_r+0x145e>
   1ff7e:	f10d 007e 	add.w	r0, sp, #126	; 0x7e
   1ff82:	4613      	mov	r3, r2
   1ff84:	e001      	b.n	1ff8a <_svfprintf_r+0x118a>
   1ff86:	f813 1b01 	ldrb.w	r1, [r3], #1
   1ff8a:	f800 1b01 	strb.w	r1, [r0], #1
   1ff8e:	42a3      	cmp	r3, r4
   1ff90:	d1f9      	bne.n	1ff86 <_svfprintf_r+0x1186>
   1ff92:	3301      	adds	r3, #1
   1ff94:	1a9b      	subs	r3, r3, r2
   1ff96:	f10d 027e 	add.w	r2, sp, #126	; 0x7e
   1ff9a:	4413      	add	r3, r2
   1ff9c:	aa1f      	add	r2, sp, #124	; 0x7c
   1ff9e:	1a9b      	subs	r3, r3, r2
   1ffa0:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
   1ffa2:	9315      	str	r3, [sp, #84]	; 0x54
   1ffa4:	2a01      	cmp	r2, #1
   1ffa6:	4413      	add	r3, r2
   1ffa8:	930a      	str	r3, [sp, #40]	; 0x28
   1ffaa:	f340 8120 	ble.w	201ee <_svfprintf_r+0x13ee>
   1ffae:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   1ffb0:	9a13      	ldr	r2, [sp, #76]	; 0x4c
   1ffb2:	4413      	add	r3, r2
   1ffb4:	930a      	str	r3, [sp, #40]	; 0x28
   1ffb6:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
   1ffba:	9304      	str	r3, [sp, #16]
   1ffbc:	2300      	movs	r3, #0
   1ffbe:	930e      	str	r3, [sp, #56]	; 0x38
   1ffc0:	e6c8      	b.n	1fd54 <_svfprintf_r+0xf54>
   1ffc2:	4623      	mov	r3, r4
   1ffc4:	e6a7      	b.n	1fd16 <_svfprintf_r+0xf16>
   1ffc6:	aa23      	add	r2, sp, #140	; 0x8c
   1ffc8:	9907      	ldr	r1, [sp, #28]
   1ffca:	9808      	ldr	r0, [sp, #32]
   1ffcc:	f002 f8ca 	bl	22164 <__ssprint_r>
   1ffd0:	2800      	cmp	r0, #0
   1ffd2:	f47e afe7 	bne.w	1efa4 <_svfprintf_r+0x1a4>
   1ffd6:	9c25      	ldr	r4, [sp, #148]	; 0x94
   1ffd8:	46c8      	mov	r8, r9
   1ffda:	e4d5      	b.n	1f988 <_svfprintf_r+0xb88>
   1ffdc:	aa23      	add	r2, sp, #140	; 0x8c
   1ffde:	9907      	ldr	r1, [sp, #28]
   1ffe0:	9808      	ldr	r0, [sp, #32]
   1ffe2:	f002 f8bf 	bl	22164 <__ssprint_r>
   1ffe6:	2800      	cmp	r0, #0
   1ffe8:	f47e afdc 	bne.w	1efa4 <_svfprintf_r+0x1a4>
   1ffec:	9a1d      	ldr	r2, [sp, #116]	; 0x74
   1ffee:	9c25      	ldr	r4, [sp, #148]	; 0x94
   1fff0:	46c8      	mov	r8, r9
   1fff2:	e5af      	b.n	1fb54 <_svfprintf_r+0xd54>
   1fff4:	aa23      	add	r2, sp, #140	; 0x8c
   1fff6:	9907      	ldr	r1, [sp, #28]
   1fff8:	9808      	ldr	r0, [sp, #32]
   1fffa:	f002 f8b3 	bl	22164 <__ssprint_r>
   1fffe:	2800      	cmp	r0, #0
   20000:	f47e afd0 	bne.w	1efa4 <_svfprintf_r+0x1a4>
   20004:	9a1d      	ldr	r2, [sp, #116]	; 0x74
   20006:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   20008:	9c25      	ldr	r4, [sp, #148]	; 0x94
   2000a:	1a9a      	subs	r2, r3, r2
   2000c:	46c8      	mov	r8, r9
   2000e:	e5b9      	b.n	1fb84 <_svfprintf_r+0xd84>
   20010:	9b06      	ldr	r3, [sp, #24]
   20012:	960e      	str	r6, [sp, #56]	; 0x38
   20014:	2b06      	cmp	r3, #6
   20016:	bf28      	it	cs
   20018:	2306      	movcs	r3, #6
   2001a:	9606      	str	r6, [sp, #24]
   2001c:	4637      	mov	r7, r6
   2001e:	9304      	str	r3, [sp, #16]
   20020:	950b      	str	r5, [sp, #44]	; 0x2c
   20022:	f8cd b00c 	str.w	fp, [sp, #12]
   20026:	930a      	str	r3, [sp, #40]	; 0x28
   20028:	4e77      	ldr	r6, [pc, #476]	; (20208 <_svfprintf_r+0x1408>)
   2002a:	f7ff b801 	b.w	1f030 <_svfprintf_r+0x230>
   2002e:	2306      	movs	r3, #6
   20030:	9306      	str	r3, [sp, #24]
   20032:	e62d      	b.n	1fc90 <_svfprintf_r+0xe90>
   20034:	9c06      	ldr	r4, [sp, #24]
   20036:	9808      	ldr	r0, [sp, #32]
   20038:	aa21      	add	r2, sp, #132	; 0x84
   2003a:	ab1e      	add	r3, sp, #120	; 0x78
   2003c:	9201      	str	r2, [sp, #4]
   2003e:	9300      	str	r3, [sp, #0]
   20040:	4622      	mov	r2, r4
   20042:	ab1d      	add	r3, sp, #116	; 0x74
   20044:	2103      	movs	r1, #3
   20046:	ed9d 0b18 	vldr	d0, [sp, #96]	; 0x60
   2004a:	f000 faf5 	bl	20638 <_dtoa_r>
   2004e:	4623      	mov	r3, r4
   20050:	4606      	mov	r6, r0
   20052:	1904      	adds	r4, r0, r4
   20054:	461d      	mov	r5, r3
   20056:	e734      	b.n	1fec2 <_svfprintf_r+0x10c2>
   20058:	272d      	movs	r7, #45	; 0x2d
   2005a:	f88d 706f 	strb.w	r7, [sp, #111]	; 0x6f
   2005e:	f7ff baca 	b.w	1f5f6 <_svfprintf_r+0x7f6>
   20062:	9a13      	ldr	r2, [sp, #76]	; 0x4c
   20064:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   20066:	4413      	add	r3, r2
   20068:	9a0e      	ldr	r2, [sp, #56]	; 0x38
   2006a:	930a      	str	r3, [sp, #40]	; 0x28
   2006c:	2a00      	cmp	r2, #0
   2006e:	f340 80b7 	ble.w	201e0 <_svfprintf_r+0x13e0>
   20072:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
   20076:	9304      	str	r3, [sp, #16]
   20078:	2367      	movs	r3, #103	; 0x67
   2007a:	930d      	str	r3, [sp, #52]	; 0x34
   2007c:	e66a      	b.n	1fd54 <_svfprintf_r+0xf54>
   2007e:	e9dd 1210 	ldrd	r1, r2, [sp, #64]	; 0x40
   20082:	f102 4300 	add.w	r3, r2, #2147483648	; 0x80000000
   20086:	9319      	str	r3, [sp, #100]	; 0x64
   20088:	232d      	movs	r3, #45	; 0x2d
   2008a:	9118      	str	r1, [sp, #96]	; 0x60
   2008c:	930c      	str	r3, [sp, #48]	; 0x30
   2008e:	e60c      	b.n	1fcaa <_svfprintf_r+0xeaa>
   20090:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   20092:	2b47      	cmp	r3, #71	; 0x47
   20094:	f47f ae2b 	bne.w	1fcee <_svfprintf_r+0xeee>
   20098:	f01b 0f01 	tst.w	fp, #1
   2009c:	f47f af0b 	bne.w	1feb6 <_svfprintf_r+0x10b6>
   200a0:	9b21      	ldr	r3, [sp, #132]	; 0x84
   200a2:	2f47      	cmp	r7, #71	; 0x47
   200a4:	eba3 0306 	sub.w	r3, r3, r6
   200a8:	930f      	str	r3, [sp, #60]	; 0x3c
   200aa:	f43f af29 	beq.w	1ff00 <_svfprintf_r+0x1100>
   200ae:	9b1d      	ldr	r3, [sp, #116]	; 0x74
   200b0:	930e      	str	r3, [sp, #56]	; 0x38
   200b2:	e732      	b.n	1ff1a <_svfprintf_r+0x111a>
   200b4:	2b00      	cmp	r3, #0
   200b6:	f340 80af 	ble.w	20218 <_svfprintf_r+0x1418>
   200ba:	9a06      	ldr	r2, [sp, #24]
   200bc:	2a00      	cmp	r2, #0
   200be:	d16b      	bne.n	20198 <_svfprintf_r+0x1398>
   200c0:	f01b 0f01 	tst.w	fp, #1
   200c4:	d168      	bne.n	20198 <_svfprintf_r+0x1398>
   200c6:	9304      	str	r3, [sp, #16]
   200c8:	930a      	str	r3, [sp, #40]	; 0x28
   200ca:	e643      	b.n	1fd54 <_svfprintf_r+0xf54>
   200cc:	9b06      	ldr	r3, [sp, #24]
   200ce:	9304      	str	r3, [sp, #16]
   200d0:	930a      	str	r3, [sp, #40]	; 0x28
   200d2:	9006      	str	r0, [sp, #24]
   200d4:	950b      	str	r5, [sp, #44]	; 0x2c
   200d6:	f8cd b00c 	str.w	fp, [sp, #12]
   200da:	900e      	str	r0, [sp, #56]	; 0x38
   200dc:	f89d 706f 	ldrb.w	r7, [sp, #111]	; 0x6f
   200e0:	f7fe bfa6 	b.w	1f030 <_svfprintf_r+0x230>
   200e4:	2000      	movs	r0, #0
   200e6:	9006      	str	r0, [sp, #24]
   200e8:	f7fe bee4 	b.w	1eeb4 <_svfprintf_r+0xb4>
   200ec:	424f      	negs	r7, r1
   200ee:	3110      	adds	r1, #16
   200f0:	4d46      	ldr	r5, [pc, #280]	; (2020c <_svfprintf_r+0x140c>)
   200f2:	da2b      	bge.n	2014c <_svfprintf_r+0x134c>
   200f4:	2410      	movs	r4, #16
   200f6:	f8dd b020 	ldr.w	fp, [sp, #32]
   200fa:	e004      	b.n	20106 <_svfprintf_r+0x1306>
   200fc:	f108 0808 	add.w	r8, r8, #8
   20100:	3f10      	subs	r7, #16
   20102:	2f10      	cmp	r7, #16
   20104:	dd22      	ble.n	2014c <_svfprintf_r+0x134c>
   20106:	3301      	adds	r3, #1
   20108:	3210      	adds	r2, #16
   2010a:	2b07      	cmp	r3, #7
   2010c:	9225      	str	r2, [sp, #148]	; 0x94
   2010e:	9324      	str	r3, [sp, #144]	; 0x90
   20110:	f8c8 5000 	str.w	r5, [r8]
   20114:	f8c8 4004 	str.w	r4, [r8, #4]
   20118:	ddf0      	ble.n	200fc <_svfprintf_r+0x12fc>
   2011a:	aa23      	add	r2, sp, #140	; 0x8c
   2011c:	9907      	ldr	r1, [sp, #28]
   2011e:	4658      	mov	r0, fp
   20120:	f002 f820 	bl	22164 <__ssprint_r>
   20124:	2800      	cmp	r0, #0
   20126:	f47e af3d 	bne.w	1efa4 <_svfprintf_r+0x1a4>
   2012a:	9a25      	ldr	r2, [sp, #148]	; 0x94
   2012c:	9b24      	ldr	r3, [sp, #144]	; 0x90
   2012e:	46c8      	mov	r8, r9
   20130:	e7e6      	b.n	20100 <_svfprintf_r+0x1300>
   20132:	aa23      	add	r2, sp, #140	; 0x8c
   20134:	9907      	ldr	r1, [sp, #28]
   20136:	9808      	ldr	r0, [sp, #32]
   20138:	f002 f814 	bl	22164 <__ssprint_r>
   2013c:	2800      	cmp	r0, #0
   2013e:	f47e af31 	bne.w	1efa4 <_svfprintf_r+0x1a4>
   20142:	991d      	ldr	r1, [sp, #116]	; 0x74
   20144:	9a25      	ldr	r2, [sp, #148]	; 0x94
   20146:	9b24      	ldr	r3, [sp, #144]	; 0x90
   20148:	46c8      	mov	r8, r9
   2014a:	e65f      	b.n	1fe0c <_svfprintf_r+0x100c>
   2014c:	3301      	adds	r3, #1
   2014e:	443a      	add	r2, r7
   20150:	2b07      	cmp	r3, #7
   20152:	e888 00a0 	stmia.w	r8, {r5, r7}
   20156:	9225      	str	r2, [sp, #148]	; 0x94
   20158:	9324      	str	r3, [sp, #144]	; 0x90
   2015a:	f108 0808 	add.w	r8, r8, #8
   2015e:	f77f ae58 	ble.w	1fe12 <_svfprintf_r+0x1012>
   20162:	aa23      	add	r2, sp, #140	; 0x8c
   20164:	9907      	ldr	r1, [sp, #28]
   20166:	9808      	ldr	r0, [sp, #32]
   20168:	f001 fffc 	bl	22164 <__ssprint_r>
   2016c:	2800      	cmp	r0, #0
   2016e:	f47e af19 	bne.w	1efa4 <_svfprintf_r+0x1a4>
   20172:	9a25      	ldr	r2, [sp, #148]	; 0x94
   20174:	9b24      	ldr	r3, [sp, #144]	; 0x90
   20176:	46c8      	mov	r8, r9
   20178:	e64b      	b.n	1fe12 <_svfprintf_r+0x1012>
   2017a:	3330      	adds	r3, #48	; 0x30
   2017c:	2230      	movs	r2, #48	; 0x30
   2017e:	f88d 307f 	strb.w	r3, [sp, #127]	; 0x7f
   20182:	f88d 207e 	strb.w	r2, [sp, #126]	; 0x7e
   20186:	ab20      	add	r3, sp, #128	; 0x80
   20188:	e708      	b.n	1ff9c <_svfprintf_r+0x119c>
   2018a:	9b21      	ldr	r3, [sp, #132]	; 0x84
   2018c:	e5c3      	b.n	1fd16 <_svfprintf_r+0xf16>
   2018e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   20190:	9a13      	ldr	r2, [sp, #76]	; 0x4c
   20192:	4413      	add	r3, r2
   20194:	930a      	str	r3, [sp, #40]	; 0x28
   20196:	e76c      	b.n	20072 <_svfprintf_r+0x1272>
   20198:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   2019a:	9a13      	ldr	r2, [sp, #76]	; 0x4c
   2019c:	4413      	add	r3, r2
   2019e:	9a06      	ldr	r2, [sp, #24]
   201a0:	441a      	add	r2, r3
   201a2:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
   201a6:	920a      	str	r2, [sp, #40]	; 0x28
   201a8:	9304      	str	r3, [sp, #16]
   201aa:	e5d3      	b.n	1fd54 <_svfprintf_r+0xf54>
   201ac:	9b11      	ldr	r3, [sp, #68]	; 0x44
   201ae:	4e18      	ldr	r6, [pc, #96]	; (20210 <_svfprintf_r+0x1410>)
   201b0:	2b00      	cmp	r3, #0
   201b2:	bfb6      	itet	lt
   201b4:	272d      	movlt	r7, #45	; 0x2d
   201b6:	f89d 706f 	ldrbge.w	r7, [sp, #111]	; 0x6f
   201ba:	f88d 706f 	strblt.w	r7, [sp, #111]	; 0x6f
   201be:	4b15      	ldr	r3, [pc, #84]	; (20214 <_svfprintf_r+0x1414>)
   201c0:	f7ff ba1b 	b.w	1f5fa <_svfprintf_r+0x7fa>
   201c4:	2200      	movs	r2, #0
   201c6:	2300      	movs	r3, #0
   201c8:	e9dd 0118 	ldrd	r0, r1, [sp, #96]	; 0x60
   201cc:	f7fb fec6 	bl	1bf5c <__aeabi_dcmpeq>
   201d0:	2800      	cmp	r0, #0
   201d2:	f47f ae7a 	bne.w	1feca <_svfprintf_r+0x10ca>
   201d6:	f1c5 0501 	rsb	r5, r5, #1
   201da:	951d      	str	r5, [sp, #116]	; 0x74
   201dc:	442c      	add	r4, r5
   201de:	e587      	b.n	1fcf0 <_svfprintf_r+0xef0>
   201e0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   201e2:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   201e4:	f1c3 0301 	rsb	r3, r3, #1
   201e8:	441a      	add	r2, r3
   201ea:	4613      	mov	r3, r2
   201ec:	e7d2      	b.n	20194 <_svfprintf_r+0x1394>
   201ee:	f01b 0301 	ands.w	r3, fp, #1
   201f2:	930e      	str	r3, [sp, #56]	; 0x38
   201f4:	f47f aedb 	bne.w	1ffae <_svfprintf_r+0x11ae>
   201f8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   201fa:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
   201fe:	9304      	str	r3, [sp, #16]
   20200:	e5a8      	b.n	1fd54 <_svfprintf_r+0xf54>
   20202:	bf00      	nop
   20204:	66666667 	.word	0x66666667
   20208:	00024ba8 	.word	0x00024ba8
   2020c:	00024bc4 	.word	0x00024bc4
   20210:	00024b7c 	.word	0x00024b7c
   20214:	00024b78 	.word	0x00024b78
   20218:	9b06      	ldr	r3, [sp, #24]
   2021a:	b913      	cbnz	r3, 20222 <_svfprintf_r+0x1422>
   2021c:	f01b 0f01 	tst.w	fp, #1
   20220:	d002      	beq.n	20228 <_svfprintf_r+0x1428>
   20222:	9b13      	ldr	r3, [sp, #76]	; 0x4c
   20224:	3301      	adds	r3, #1
   20226:	e7ba      	b.n	2019e <_svfprintf_r+0x139e>
   20228:	2301      	movs	r3, #1
   2022a:	e74c      	b.n	200c6 <_svfprintf_r+0x12c6>
   2022c:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
   2022e:	f89a 3001 	ldrb.w	r3, [sl, #1]
   20232:	6828      	ldr	r0, [r5, #0]
   20234:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   20238:	9006      	str	r0, [sp, #24]
   2023a:	4628      	mov	r0, r5
   2023c:	3004      	adds	r0, #4
   2023e:	46a2      	mov	sl, r4
   20240:	900b      	str	r0, [sp, #44]	; 0x2c
   20242:	f7fe be35 	b.w	1eeb0 <_svfprintf_r+0xb0>
   20246:	f88d 106f 	strb.w	r1, [sp, #111]	; 0x6f
   2024a:	f7ff b852 	b.w	1f2f2 <_svfprintf_r+0x4f2>
   2024e:	f88d 106f 	strb.w	r1, [sp, #111]	; 0x6f
   20252:	f7ff b8de 	b.w	1f412 <_svfprintf_r+0x612>
   20256:	f88d 106f 	strb.w	r1, [sp, #111]	; 0x6f
   2025a:	f7ff ba07 	b.w	1f66c <_svfprintf_r+0x86c>
   2025e:	f10d 037e 	add.w	r3, sp, #126	; 0x7e
   20262:	e69b      	b.n	1ff9c <_svfprintf_r+0x119c>
   20264:	9a08      	ldr	r2, [sp, #32]
   20266:	230c      	movs	r3, #12
   20268:	6013      	str	r3, [r2, #0]
   2026a:	f04f 33ff 	mov.w	r3, #4294967295
   2026e:	9305      	str	r3, [sp, #20]
   20270:	f7fe bea1 	b.w	1efb6 <_svfprintf_r+0x1b6>
   20274:	f88d 106f 	strb.w	r1, [sp, #111]	; 0x6f
   20278:	f7ff b986 	b.w	1f588 <_svfprintf_r+0x788>
   2027c:	f88d 106f 	strb.w	r1, [sp, #111]	; 0x6f
   20280:	f7ff b962 	b.w	1f548 <_svfprintf_r+0x748>
   20284:	f88d 106f 	strb.w	r1, [sp, #111]	; 0x6f
   20288:	f7ff b945 	b.w	1f516 <_svfprintf_r+0x716>
   2028c:	f88d 106f 	strb.w	r1, [sp, #111]	; 0x6f
   20290:	f7ff b8fe 	b.w	1f490 <_svfprintf_r+0x690>

00020294 <write>:
   20294:	b410      	push	{r4}
   20296:	4c04      	ldr	r4, [pc, #16]	; (202a8 <write+0x14>)
   20298:	4613      	mov	r3, r2
   2029a:	460a      	mov	r2, r1
   2029c:	4601      	mov	r1, r0
   2029e:	6820      	ldr	r0, [r4, #0]
   202a0:	f85d 4b04 	ldr.w	r4, [sp], #4
   202a4:	f000 b8aa 	b.w	203fc <_write_r>
   202a8:	200000f8 	.word	0x200000f8

000202ac <__utoa>:
   202ac:	b5f0      	push	{r4, r5, r6, r7, lr}
   202ae:	f8df e078 	ldr.w	lr, [pc, #120]	; 20328 <__utoa+0x7c>
   202b2:	4616      	mov	r6, r2
   202b4:	4604      	mov	r4, r0
   202b6:	460f      	mov	r7, r1
   202b8:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
   202bc:	b08b      	sub	sp, #44	; 0x2c
   202be:	466d      	mov	r5, sp
   202c0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
   202c2:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
   202c6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
   202c8:	e89e 0003 	ldmia.w	lr, {r0, r1}
   202cc:	1eb3      	subs	r3, r6, #2
   202ce:	f845 0b04 	str.w	r0, [r5], #4
   202d2:	2b22      	cmp	r3, #34	; 0x22
   202d4:	7029      	strb	r1, [r5, #0]
   202d6:	d822      	bhi.n	2031e <__utoa+0x72>
   202d8:	1e7d      	subs	r5, r7, #1
   202da:	4628      	mov	r0, r5
   202dc:	2200      	movs	r2, #0
   202de:	e000      	b.n	202e2 <__utoa+0x36>
   202e0:	461a      	mov	r2, r3
   202e2:	fbb4 f1f6 	udiv	r1, r4, r6
   202e6:	ab0a      	add	r3, sp, #40	; 0x28
   202e8:	fb06 4411 	mls	r4, r6, r1, r4
   202ec:	4423      	add	r3, r4
   202ee:	460c      	mov	r4, r1
   202f0:	f813 3c28 	ldrb.w	r3, [r3, #-40]
   202f4:	f800 3f01 	strb.w	r3, [r0, #1]!
   202f8:	1c53      	adds	r3, r2, #1
   202fa:	2900      	cmp	r1, #0
   202fc:	d1f0      	bne.n	202e0 <__utoa+0x34>
   202fe:	54f9      	strb	r1, [r7, r3]
   20300:	18bb      	adds	r3, r7, r2
   20302:	b14a      	cbz	r2, 20318 <__utoa+0x6c>
   20304:	7819      	ldrb	r1, [r3, #0]
   20306:	7868      	ldrb	r0, [r5, #1]
   20308:	f805 1f01 	strb.w	r1, [r5, #1]!
   2030c:	3401      	adds	r4, #1
   2030e:	1b11      	subs	r1, r2, r4
   20310:	428c      	cmp	r4, r1
   20312:	f803 0901 	strb.w	r0, [r3], #-1
   20316:	dbf5      	blt.n	20304 <__utoa+0x58>
   20318:	4638      	mov	r0, r7
   2031a:	b00b      	add	sp, #44	; 0x2c
   2031c:	bdf0      	pop	{r4, r5, r6, r7, pc}
   2031e:	2000      	movs	r0, #0
   20320:	7038      	strb	r0, [r7, #0]
   20322:	b00b      	add	sp, #44	; 0x2c
   20324:	bdf0      	pop	{r4, r5, r6, r7, pc}
   20326:	bf00      	nop
   20328:	00024bd4 	.word	0x00024bd4

0002032c <utoa>:
   2032c:	f7ff bfbe 	b.w	202ac <__utoa>

00020330 <__swbuf_r>:
   20330:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   20332:	460d      	mov	r5, r1
   20334:	4614      	mov	r4, r2
   20336:	4606      	mov	r6, r0
   20338:	b110      	cbz	r0, 20340 <__swbuf_r+0x10>
   2033a:	6b83      	ldr	r3, [r0, #56]	; 0x38
   2033c:	2b00      	cmp	r3, #0
   2033e:	d04b      	beq.n	203d8 <__swbuf_r+0xa8>
   20340:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
   20344:	69a3      	ldr	r3, [r4, #24]
   20346:	60a3      	str	r3, [r4, #8]
   20348:	b291      	uxth	r1, r2
   2034a:	0708      	lsls	r0, r1, #28
   2034c:	d539      	bpl.n	203c2 <__swbuf_r+0x92>
   2034e:	6923      	ldr	r3, [r4, #16]
   20350:	2b00      	cmp	r3, #0
   20352:	d036      	beq.n	203c2 <__swbuf_r+0x92>
   20354:	b2ed      	uxtb	r5, r5
   20356:	0489      	lsls	r1, r1, #18
   20358:	462f      	mov	r7, r5
   2035a:	d515      	bpl.n	20388 <__swbuf_r+0x58>
   2035c:	6822      	ldr	r2, [r4, #0]
   2035e:	6961      	ldr	r1, [r4, #20]
   20360:	1ad3      	subs	r3, r2, r3
   20362:	428b      	cmp	r3, r1
   20364:	da1c      	bge.n	203a0 <__swbuf_r+0x70>
   20366:	3301      	adds	r3, #1
   20368:	68a1      	ldr	r1, [r4, #8]
   2036a:	1c50      	adds	r0, r2, #1
   2036c:	3901      	subs	r1, #1
   2036e:	60a1      	str	r1, [r4, #8]
   20370:	6020      	str	r0, [r4, #0]
   20372:	7015      	strb	r5, [r2, #0]
   20374:	6962      	ldr	r2, [r4, #20]
   20376:	429a      	cmp	r2, r3
   20378:	d01a      	beq.n	203b0 <__swbuf_r+0x80>
   2037a:	89a3      	ldrh	r3, [r4, #12]
   2037c:	07db      	lsls	r3, r3, #31
   2037e:	d501      	bpl.n	20384 <__swbuf_r+0x54>
   20380:	2d0a      	cmp	r5, #10
   20382:	d015      	beq.n	203b0 <__swbuf_r+0x80>
   20384:	4638      	mov	r0, r7
   20386:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   20388:	6e61      	ldr	r1, [r4, #100]	; 0x64
   2038a:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
   2038e:	f421 5100 	bic.w	r1, r1, #8192	; 0x2000
   20392:	81a2      	strh	r2, [r4, #12]
   20394:	6822      	ldr	r2, [r4, #0]
   20396:	6661      	str	r1, [r4, #100]	; 0x64
   20398:	6961      	ldr	r1, [r4, #20]
   2039a:	1ad3      	subs	r3, r2, r3
   2039c:	428b      	cmp	r3, r1
   2039e:	dbe2      	blt.n	20366 <__swbuf_r+0x36>
   203a0:	4621      	mov	r1, r4
   203a2:	4630      	mov	r0, r6
   203a4:	f001 f90e 	bl	215c4 <_fflush_r>
   203a8:	b940      	cbnz	r0, 203bc <__swbuf_r+0x8c>
   203aa:	6822      	ldr	r2, [r4, #0]
   203ac:	2301      	movs	r3, #1
   203ae:	e7db      	b.n	20368 <__swbuf_r+0x38>
   203b0:	4621      	mov	r1, r4
   203b2:	4630      	mov	r0, r6
   203b4:	f001 f906 	bl	215c4 <_fflush_r>
   203b8:	2800      	cmp	r0, #0
   203ba:	d0e3      	beq.n	20384 <__swbuf_r+0x54>
   203bc:	f04f 37ff 	mov.w	r7, #4294967295
   203c0:	e7e0      	b.n	20384 <__swbuf_r+0x54>
   203c2:	4621      	mov	r1, r4
   203c4:	4630      	mov	r0, r6
   203c6:	f000 f82f 	bl	20428 <__swsetup_r>
   203ca:	2800      	cmp	r0, #0
   203cc:	d1f6      	bne.n	203bc <__swbuf_r+0x8c>
   203ce:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
   203d2:	6923      	ldr	r3, [r4, #16]
   203d4:	b291      	uxth	r1, r2
   203d6:	e7bd      	b.n	20354 <__swbuf_r+0x24>
   203d8:	f001 f94c 	bl	21674 <__sinit>
   203dc:	e7b0      	b.n	20340 <__swbuf_r+0x10>
   203de:	bf00      	nop

000203e0 <__ascii_wctomb>:
   203e0:	b121      	cbz	r1, 203ec <__ascii_wctomb+0xc>
   203e2:	2aff      	cmp	r2, #255	; 0xff
   203e4:	d804      	bhi.n	203f0 <__ascii_wctomb+0x10>
   203e6:	700a      	strb	r2, [r1, #0]
   203e8:	2001      	movs	r0, #1
   203ea:	4770      	bx	lr
   203ec:	4608      	mov	r0, r1
   203ee:	4770      	bx	lr
   203f0:	238a      	movs	r3, #138	; 0x8a
   203f2:	6003      	str	r3, [r0, #0]
   203f4:	f04f 30ff 	mov.w	r0, #4294967295
   203f8:	4770      	bx	lr
   203fa:	bf00      	nop

000203fc <_write_r>:
   203fc:	b570      	push	{r4, r5, r6, lr}
   203fe:	460d      	mov	r5, r1
   20400:	4c08      	ldr	r4, [pc, #32]	; (20424 <_write_r+0x28>)
   20402:	4611      	mov	r1, r2
   20404:	4606      	mov	r6, r0
   20406:	461a      	mov	r2, r3
   20408:	4628      	mov	r0, r5
   2040a:	2300      	movs	r3, #0
   2040c:	6023      	str	r3, [r4, #0]
   2040e:	f002 f933 	bl	22678 <_write>
   20412:	1c43      	adds	r3, r0, #1
   20414:	d000      	beq.n	20418 <_write_r+0x1c>
   20416:	bd70      	pop	{r4, r5, r6, pc}
   20418:	6823      	ldr	r3, [r4, #0]
   2041a:	2b00      	cmp	r3, #0
   2041c:	d0fb      	beq.n	20416 <_write_r+0x1a>
   2041e:	6033      	str	r3, [r6, #0]
   20420:	bd70      	pop	{r4, r5, r6, pc}
   20422:	bf00      	nop
   20424:	20002390 	.word	0x20002390

00020428 <__swsetup_r>:
   20428:	b538      	push	{r3, r4, r5, lr}
   2042a:	4b30      	ldr	r3, [pc, #192]	; (204ec <__swsetup_r+0xc4>)
   2042c:	681b      	ldr	r3, [r3, #0]
   2042e:	4605      	mov	r5, r0
   20430:	460c      	mov	r4, r1
   20432:	b113      	cbz	r3, 2043a <__swsetup_r+0x12>
   20434:	6b9a      	ldr	r2, [r3, #56]	; 0x38
   20436:	2a00      	cmp	r2, #0
   20438:	d038      	beq.n	204ac <__swsetup_r+0x84>
   2043a:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
   2043e:	b293      	uxth	r3, r2
   20440:	0718      	lsls	r0, r3, #28
   20442:	d50c      	bpl.n	2045e <__swsetup_r+0x36>
   20444:	6920      	ldr	r0, [r4, #16]
   20446:	b1a8      	cbz	r0, 20474 <__swsetup_r+0x4c>
   20448:	f013 0201 	ands.w	r2, r3, #1
   2044c:	d01e      	beq.n	2048c <__swsetup_r+0x64>
   2044e:	6963      	ldr	r3, [r4, #20]
   20450:	2200      	movs	r2, #0
   20452:	425b      	negs	r3, r3
   20454:	61a3      	str	r3, [r4, #24]
   20456:	60a2      	str	r2, [r4, #8]
   20458:	b1f0      	cbz	r0, 20498 <__swsetup_r+0x70>
   2045a:	2000      	movs	r0, #0
   2045c:	bd38      	pop	{r3, r4, r5, pc}
   2045e:	06d9      	lsls	r1, r3, #27
   20460:	d53c      	bpl.n	204dc <__swsetup_r+0xb4>
   20462:	0758      	lsls	r0, r3, #29
   20464:	d426      	bmi.n	204b4 <__swsetup_r+0x8c>
   20466:	6920      	ldr	r0, [r4, #16]
   20468:	f042 0308 	orr.w	r3, r2, #8
   2046c:	81a3      	strh	r3, [r4, #12]
   2046e:	b29b      	uxth	r3, r3
   20470:	2800      	cmp	r0, #0
   20472:	d1e9      	bne.n	20448 <__swsetup_r+0x20>
   20474:	f403 7220 	and.w	r2, r3, #640	; 0x280
   20478:	f5b2 7f00 	cmp.w	r2, #512	; 0x200
   2047c:	d0e4      	beq.n	20448 <__swsetup_r+0x20>
   2047e:	4628      	mov	r0, r5
   20480:	4621      	mov	r1, r4
   20482:	f001 fae5 	bl	21a50 <__smakebuf_r>
   20486:	89a3      	ldrh	r3, [r4, #12]
   20488:	6920      	ldr	r0, [r4, #16]
   2048a:	e7dd      	b.n	20448 <__swsetup_r+0x20>
   2048c:	0799      	lsls	r1, r3, #30
   2048e:	bf58      	it	pl
   20490:	6962      	ldrpl	r2, [r4, #20]
   20492:	60a2      	str	r2, [r4, #8]
   20494:	2800      	cmp	r0, #0
   20496:	d1e0      	bne.n	2045a <__swsetup_r+0x32>
   20498:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   2049c:	061a      	lsls	r2, r3, #24
   2049e:	d5dd      	bpl.n	2045c <__swsetup_r+0x34>
   204a0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   204a4:	81a3      	strh	r3, [r4, #12]
   204a6:	f04f 30ff 	mov.w	r0, #4294967295
   204aa:	bd38      	pop	{r3, r4, r5, pc}
   204ac:	4618      	mov	r0, r3
   204ae:	f001 f8e1 	bl	21674 <__sinit>
   204b2:	e7c2      	b.n	2043a <__swsetup_r+0x12>
   204b4:	6b21      	ldr	r1, [r4, #48]	; 0x30
   204b6:	b151      	cbz	r1, 204ce <__swsetup_r+0xa6>
   204b8:	f104 0340 	add.w	r3, r4, #64	; 0x40
   204bc:	4299      	cmp	r1, r3
   204be:	d004      	beq.n	204ca <__swsetup_r+0xa2>
   204c0:	4628      	mov	r0, r5
   204c2:	f001 f979 	bl	217b8 <_free_r>
   204c6:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
   204ca:	2300      	movs	r3, #0
   204cc:	6323      	str	r3, [r4, #48]	; 0x30
   204ce:	2300      	movs	r3, #0
   204d0:	6920      	ldr	r0, [r4, #16]
   204d2:	6063      	str	r3, [r4, #4]
   204d4:	f022 0224 	bic.w	r2, r2, #36	; 0x24
   204d8:	6020      	str	r0, [r4, #0]
   204da:	e7c5      	b.n	20468 <__swsetup_r+0x40>
   204dc:	f042 0240 	orr.w	r2, r2, #64	; 0x40
   204e0:	2309      	movs	r3, #9
   204e2:	602b      	str	r3, [r5, #0]
   204e4:	f04f 30ff 	mov.w	r0, #4294967295
   204e8:	81a2      	strh	r2, [r4, #12]
   204ea:	bd38      	pop	{r3, r4, r5, pc}
   204ec:	200000f8 	.word	0x200000f8

000204f0 <register_fini>:
   204f0:	4b02      	ldr	r3, [pc, #8]	; (204fc <register_fini+0xc>)
   204f2:	b113      	cbz	r3, 204fa <register_fini+0xa>
   204f4:	4802      	ldr	r0, [pc, #8]	; (20500 <register_fini+0x10>)
   204f6:	f000 b805 	b.w	20504 <atexit>
   204fa:	4770      	bx	lr
   204fc:	00000000 	.word	0x00000000
   20500:	000216e5 	.word	0x000216e5

00020504 <atexit>:
   20504:	2300      	movs	r3, #0
   20506:	4601      	mov	r1, r0
   20508:	461a      	mov	r2, r3
   2050a:	4618      	mov	r0, r3
   2050c:	f001 bea8 	b.w	22260 <__register_exitproc>

00020510 <quorem>:
   20510:	6902      	ldr	r2, [r0, #16]
   20512:	690b      	ldr	r3, [r1, #16]
   20514:	4293      	cmp	r3, r2
   20516:	f300 808d 	bgt.w	20634 <quorem+0x124>
   2051a:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2051e:	f103 38ff 	add.w	r8, r3, #4294967295
   20522:	f101 0714 	add.w	r7, r1, #20
   20526:	f100 0b14 	add.w	fp, r0, #20
   2052a:	f857 2028 	ldr.w	r2, [r7, r8, lsl #2]
   2052e:	f85b 3028 	ldr.w	r3, [fp, r8, lsl #2]
   20532:	ea4f 0488 	mov.w	r4, r8, lsl #2
   20536:	b083      	sub	sp, #12
   20538:	3201      	adds	r2, #1
   2053a:	fbb3 f9f2 	udiv	r9, r3, r2
   2053e:	eb0b 0304 	add.w	r3, fp, r4
   20542:	9400      	str	r4, [sp, #0]
   20544:	eb07 0a04 	add.w	sl, r7, r4
   20548:	9301      	str	r3, [sp, #4]
   2054a:	f1b9 0f00 	cmp.w	r9, #0
   2054e:	d039      	beq.n	205c4 <quorem+0xb4>
   20550:	2500      	movs	r5, #0
   20552:	462e      	mov	r6, r5
   20554:	46bc      	mov	ip, r7
   20556:	46de      	mov	lr, fp
   20558:	f85c 4b04 	ldr.w	r4, [ip], #4
   2055c:	f8de 3000 	ldr.w	r3, [lr]
   20560:	b2a2      	uxth	r2, r4
   20562:	fb09 5502 	mla	r5, r9, r2, r5
   20566:	0c22      	lsrs	r2, r4, #16
   20568:	0c2c      	lsrs	r4, r5, #16
   2056a:	fb09 4202 	mla	r2, r9, r2, r4
   2056e:	b2ad      	uxth	r5, r5
   20570:	1b75      	subs	r5, r6, r5
   20572:	b296      	uxth	r6, r2
   20574:	ebc6 4613 	rsb	r6, r6, r3, lsr #16
   20578:	fa15 f383 	uxtah	r3, r5, r3
   2057c:	eb06 4623 	add.w	r6, r6, r3, asr #16
   20580:	b29b      	uxth	r3, r3
   20582:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
   20586:	45e2      	cmp	sl, ip
   20588:	ea4f 4512 	mov.w	r5, r2, lsr #16
   2058c:	f84e 3b04 	str.w	r3, [lr], #4
   20590:	ea4f 4626 	mov.w	r6, r6, asr #16
   20594:	d2e0      	bcs.n	20558 <quorem+0x48>
   20596:	9b00      	ldr	r3, [sp, #0]
   20598:	f85b 3003 	ldr.w	r3, [fp, r3]
   2059c:	b993      	cbnz	r3, 205c4 <quorem+0xb4>
   2059e:	9c01      	ldr	r4, [sp, #4]
   205a0:	1f23      	subs	r3, r4, #4
   205a2:	459b      	cmp	fp, r3
   205a4:	d20c      	bcs.n	205c0 <quorem+0xb0>
   205a6:	f854 3c04 	ldr.w	r3, [r4, #-4]
   205aa:	b94b      	cbnz	r3, 205c0 <quorem+0xb0>
   205ac:	f1a4 0308 	sub.w	r3, r4, #8
   205b0:	e002      	b.n	205b8 <quorem+0xa8>
   205b2:	681a      	ldr	r2, [r3, #0]
   205b4:	3b04      	subs	r3, #4
   205b6:	b91a      	cbnz	r2, 205c0 <quorem+0xb0>
   205b8:	459b      	cmp	fp, r3
   205ba:	f108 38ff 	add.w	r8, r8, #4294967295
   205be:	d3f8      	bcc.n	205b2 <quorem+0xa2>
   205c0:	f8c0 8010 	str.w	r8, [r0, #16]
   205c4:	4604      	mov	r4, r0
   205c6:	f001 fc8b 	bl	21ee0 <__mcmp>
   205ca:	2800      	cmp	r0, #0
   205cc:	db2e      	blt.n	2062c <quorem+0x11c>
   205ce:	f109 0901 	add.w	r9, r9, #1
   205d2:	465d      	mov	r5, fp
   205d4:	2300      	movs	r3, #0
   205d6:	f857 1b04 	ldr.w	r1, [r7], #4
   205da:	6828      	ldr	r0, [r5, #0]
   205dc:	b28a      	uxth	r2, r1
   205de:	1a9a      	subs	r2, r3, r2
   205e0:	0c0b      	lsrs	r3, r1, #16
   205e2:	fa12 f280 	uxtah	r2, r2, r0
   205e6:	ebc3 4310 	rsb	r3, r3, r0, lsr #16
   205ea:	eb03 4322 	add.w	r3, r3, r2, asr #16
   205ee:	b292      	uxth	r2, r2
   205f0:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
   205f4:	45ba      	cmp	sl, r7
   205f6:	f845 2b04 	str.w	r2, [r5], #4
   205fa:	ea4f 4323 	mov.w	r3, r3, asr #16
   205fe:	d2ea      	bcs.n	205d6 <quorem+0xc6>
   20600:	f85b 2028 	ldr.w	r2, [fp, r8, lsl #2]
   20604:	eb0b 0388 	add.w	r3, fp, r8, lsl #2
   20608:	b982      	cbnz	r2, 2062c <quorem+0x11c>
   2060a:	1f1a      	subs	r2, r3, #4
   2060c:	4593      	cmp	fp, r2
   2060e:	d20b      	bcs.n	20628 <quorem+0x118>
   20610:	f853 2c04 	ldr.w	r2, [r3, #-4]
   20614:	b942      	cbnz	r2, 20628 <quorem+0x118>
   20616:	3b08      	subs	r3, #8
   20618:	e002      	b.n	20620 <quorem+0x110>
   2061a:	681a      	ldr	r2, [r3, #0]
   2061c:	3b04      	subs	r3, #4
   2061e:	b91a      	cbnz	r2, 20628 <quorem+0x118>
   20620:	459b      	cmp	fp, r3
   20622:	f108 38ff 	add.w	r8, r8, #4294967295
   20626:	d3f8      	bcc.n	2061a <quorem+0x10a>
   20628:	f8c4 8010 	str.w	r8, [r4, #16]
   2062c:	4648      	mov	r0, r9
   2062e:	b003      	add	sp, #12
   20630:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   20634:	2000      	movs	r0, #0
   20636:	4770      	bx	lr

00020638 <_dtoa_r>:
   20638:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2063c:	ec57 6b10 	vmov	r6, r7, d0
   20640:	b097      	sub	sp, #92	; 0x5c
   20642:	6c05      	ldr	r5, [r0, #64]	; 0x40
   20644:	9102      	str	r1, [sp, #8]
   20646:	4604      	mov	r4, r0
   20648:	4693      	mov	fp, r2
   2064a:	9303      	str	r3, [sp, #12]
   2064c:	e9cd 6700 	strd	r6, r7, [sp]
   20650:	b14d      	cbz	r5, 20666 <_dtoa_r+0x2e>
   20652:	6c42      	ldr	r2, [r0, #68]	; 0x44
   20654:	606a      	str	r2, [r5, #4]
   20656:	2301      	movs	r3, #1
   20658:	4093      	lsls	r3, r2
   2065a:	60ab      	str	r3, [r5, #8]
   2065c:	4629      	mov	r1, r5
   2065e:	f001 fa67 	bl	21b30 <_Bfree>
   20662:	2300      	movs	r3, #0
   20664:	6423      	str	r3, [r4, #64]	; 0x40
   20666:	e9dd 2300 	ldrd	r2, r3, [sp]
   2066a:	2b00      	cmp	r3, #0
   2066c:	4699      	mov	r9, r3
   2066e:	db38      	blt.n	206e2 <_dtoa_r+0xaa>
   20670:	9a20      	ldr	r2, [sp, #128]	; 0x80
   20672:	2300      	movs	r3, #0
   20674:	6013      	str	r3, [r2, #0]
   20676:	4ba0      	ldr	r3, [pc, #640]	; (208f8 <_dtoa_r+0x2c0>)
   20678:	ea33 0309 	bics.w	r3, r3, r9
   2067c:	d017      	beq.n	206ae <_dtoa_r+0x76>
   2067e:	e9dd 6700 	ldrd	r6, r7, [sp]
   20682:	2200      	movs	r2, #0
   20684:	2300      	movs	r3, #0
   20686:	4630      	mov	r0, r6
   20688:	4639      	mov	r1, r7
   2068a:	f7fb fc67 	bl	1bf5c <__aeabi_dcmpeq>
   2068e:	4680      	mov	r8, r0
   20690:	2800      	cmp	r0, #0
   20692:	d02f      	beq.n	206f4 <_dtoa_r+0xbc>
   20694:	9a03      	ldr	r2, [sp, #12]
   20696:	2301      	movs	r3, #1
   20698:	6013      	str	r3, [r2, #0]
   2069a:	9b21      	ldr	r3, [sp, #132]	; 0x84
   2069c:	2b00      	cmp	r3, #0
   2069e:	f000 80c4 	beq.w	2082a <_dtoa_r+0x1f2>
   206a2:	4896      	ldr	r0, [pc, #600]	; (208fc <_dtoa_r+0x2c4>)
   206a4:	6018      	str	r0, [r3, #0]
   206a6:	3801      	subs	r0, #1
   206a8:	b017      	add	sp, #92	; 0x5c
   206aa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   206ae:	9a03      	ldr	r2, [sp, #12]
   206b0:	f242 730f 	movw	r3, #9999	; 0x270f
   206b4:	6013      	str	r3, [r2, #0]
   206b6:	9b00      	ldr	r3, [sp, #0]
   206b8:	b96b      	cbnz	r3, 206d6 <_dtoa_r+0x9e>
   206ba:	f3c9 0313 	ubfx	r3, r9, #0, #20
   206be:	b953      	cbnz	r3, 206d6 <_dtoa_r+0x9e>
   206c0:	9b21      	ldr	r3, [sp, #132]	; 0x84
   206c2:	488f      	ldr	r0, [pc, #572]	; (20900 <_dtoa_r+0x2c8>)
   206c4:	2b00      	cmp	r3, #0
   206c6:	d0ef      	beq.n	206a8 <_dtoa_r+0x70>
   206c8:	f100 0308 	add.w	r3, r0, #8
   206cc:	9a21      	ldr	r2, [sp, #132]	; 0x84
   206ce:	6013      	str	r3, [r2, #0]
   206d0:	b017      	add	sp, #92	; 0x5c
   206d2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   206d6:	9b21      	ldr	r3, [sp, #132]	; 0x84
   206d8:	488a      	ldr	r0, [pc, #552]	; (20904 <_dtoa_r+0x2cc>)
   206da:	2b00      	cmp	r3, #0
   206dc:	d0e4      	beq.n	206a8 <_dtoa_r+0x70>
   206de:	1cc3      	adds	r3, r0, #3
   206e0:	e7f4      	b.n	206cc <_dtoa_r+0x94>
   206e2:	9a01      	ldr	r2, [sp, #4]
   206e4:	f022 4900 	bic.w	r9, r2, #2147483648	; 0x80000000
   206e8:	9a20      	ldr	r2, [sp, #128]	; 0x80
   206ea:	f8cd 9004 	str.w	r9, [sp, #4]
   206ee:	2301      	movs	r3, #1
   206f0:	6013      	str	r3, [r2, #0]
   206f2:	e7c0      	b.n	20676 <_dtoa_r+0x3e>
   206f4:	aa14      	add	r2, sp, #80	; 0x50
   206f6:	a915      	add	r1, sp, #84	; 0x54
   206f8:	ec47 6b10 	vmov	d0, r6, r7
   206fc:	4620      	mov	r0, r4
   206fe:	f001 fc8f 	bl	22020 <__d2b>
   20702:	ea5f 5519 	movs.w	r5, r9, lsr #20
   20706:	4682      	mov	sl, r0
   20708:	d073      	beq.n	207f2 <_dtoa_r+0x1ba>
   2070a:	f3c7 0313 	ubfx	r3, r7, #0, #20
   2070e:	f043 517f 	orr.w	r1, r3, #1069547520	; 0x3fc00000
   20712:	f8cd 8040 	str.w	r8, [sp, #64]	; 0x40
   20716:	f8dd 8050 	ldr.w	r8, [sp, #80]	; 0x50
   2071a:	4630      	mov	r0, r6
   2071c:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
   20720:	f441 1140 	orr.w	r1, r1, #3145728	; 0x300000
   20724:	2200      	movs	r2, #0
   20726:	4b78      	ldr	r3, [pc, #480]	; (20908 <_dtoa_r+0x2d0>)
   20728:	f7fa fffc 	bl	1b724 <__aeabi_dsub>
   2072c:	a36c      	add	r3, pc, #432	; (adr r3, 208e0 <_dtoa_r+0x2a8>)
   2072e:	e9d3 2300 	ldrd	r2, r3, [r3]
   20732:	f7fb f9ab 	bl	1ba8c <__aeabi_dmul>
   20736:	a36c      	add	r3, pc, #432	; (adr r3, 208e8 <_dtoa_r+0x2b0>)
   20738:	e9d3 2300 	ldrd	r2, r3, [r3]
   2073c:	f7fa fff4 	bl	1b728 <__adddf3>
   20740:	4606      	mov	r6, r0
   20742:	4628      	mov	r0, r5
   20744:	460f      	mov	r7, r1
   20746:	f7fb f93b 	bl	1b9c0 <__aeabi_i2d>
   2074a:	a369      	add	r3, pc, #420	; (adr r3, 208f0 <_dtoa_r+0x2b8>)
   2074c:	e9d3 2300 	ldrd	r2, r3, [r3]
   20750:	f7fb f99c 	bl	1ba8c <__aeabi_dmul>
   20754:	4602      	mov	r2, r0
   20756:	460b      	mov	r3, r1
   20758:	4630      	mov	r0, r6
   2075a:	4639      	mov	r1, r7
   2075c:	f7fa ffe4 	bl	1b728 <__adddf3>
   20760:	4606      	mov	r6, r0
   20762:	460f      	mov	r7, r1
   20764:	f7fb fc2c 	bl	1bfc0 <__aeabi_d2iz>
   20768:	2200      	movs	r2, #0
   2076a:	9004      	str	r0, [sp, #16]
   2076c:	2300      	movs	r3, #0
   2076e:	4630      	mov	r0, r6
   20770:	4639      	mov	r1, r7
   20772:	f7fb fbfd 	bl	1bf70 <__aeabi_dcmplt>
   20776:	2800      	cmp	r0, #0
   20778:	f040 816f 	bne.w	20a5a <_dtoa_r+0x422>
   2077c:	9e04      	ldr	r6, [sp, #16]
   2077e:	2e16      	cmp	r6, #22
   20780:	f200 8159 	bhi.w	20a36 <_dtoa_r+0x3fe>
   20784:	4b61      	ldr	r3, [pc, #388]	; (2090c <_dtoa_r+0x2d4>)
   20786:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
   2078a:	e9d3 0100 	ldrd	r0, r1, [r3]
   2078e:	e9dd 2300 	ldrd	r2, r3, [sp]
   20792:	f7fb fc0b 	bl	1bfac <__aeabi_dcmpgt>
   20796:	2800      	cmp	r0, #0
   20798:	f000 81c4 	beq.w	20b24 <_dtoa_r+0x4ec>
   2079c:	1e73      	subs	r3, r6, #1
   2079e:	9304      	str	r3, [sp, #16]
   207a0:	2300      	movs	r3, #0
   207a2:	930c      	str	r3, [sp, #48]	; 0x30
   207a4:	eba8 0505 	sub.w	r5, r8, r5
   207a8:	1e6b      	subs	r3, r5, #1
   207aa:	9305      	str	r3, [sp, #20]
   207ac:	f100 814f 	bmi.w	20a4e <_dtoa_r+0x416>
   207b0:	2300      	movs	r3, #0
   207b2:	9306      	str	r3, [sp, #24]
   207b4:	9b04      	ldr	r3, [sp, #16]
   207b6:	2b00      	cmp	r3, #0
   207b8:	f2c0 8140 	blt.w	20a3c <_dtoa_r+0x404>
   207bc:	9a05      	ldr	r2, [sp, #20]
   207be:	930b      	str	r3, [sp, #44]	; 0x2c
   207c0:	4611      	mov	r1, r2
   207c2:	4419      	add	r1, r3
   207c4:	2300      	movs	r3, #0
   207c6:	9105      	str	r1, [sp, #20]
   207c8:	930a      	str	r3, [sp, #40]	; 0x28
   207ca:	9b02      	ldr	r3, [sp, #8]
   207cc:	2b09      	cmp	r3, #9
   207ce:	d82e      	bhi.n	2082e <_dtoa_r+0x1f6>
   207d0:	2b05      	cmp	r3, #5
   207d2:	f340 8651 	ble.w	21478 <_dtoa_r+0xe40>
   207d6:	3b04      	subs	r3, #4
   207d8:	9302      	str	r3, [sp, #8]
   207da:	2700      	movs	r7, #0
   207dc:	9b02      	ldr	r3, [sp, #8]
   207de:	3b02      	subs	r3, #2
   207e0:	2b03      	cmp	r3, #3
   207e2:	f200 8633 	bhi.w	2144c <_dtoa_r+0xe14>
   207e6:	e8df f013 	tbh	[pc, r3, lsl #1]
   207ea:	03d6      	.short	0x03d6
   207ec:	03e302cb 	.word	0x03e302cb
   207f0:	0464      	.short	0x0464
   207f2:	f8dd 8050 	ldr.w	r8, [sp, #80]	; 0x50
   207f6:	9d15      	ldr	r5, [sp, #84]	; 0x54
   207f8:	4445      	add	r5, r8
   207fa:	f205 4332 	addw	r3, r5, #1074	; 0x432
   207fe:	2b20      	cmp	r3, #32
   20800:	f340 818a 	ble.w	20b18 <_dtoa_r+0x4e0>
   20804:	f1c3 0340 	rsb	r3, r3, #64	; 0x40
   20808:	fa09 f903 	lsl.w	r9, r9, r3
   2080c:	9b00      	ldr	r3, [sp, #0]
   2080e:	f205 4012 	addw	r0, r5, #1042	; 0x412
   20812:	fa23 f000 	lsr.w	r0, r3, r0
   20816:	ea40 0009 	orr.w	r0, r0, r9
   2081a:	f7fb f8c1 	bl	1b9a0 <__aeabi_ui2d>
   2081e:	2301      	movs	r3, #1
   20820:	3d01      	subs	r5, #1
   20822:	f1a1 71f8 	sub.w	r1, r1, #32505856	; 0x1f00000
   20826:	9310      	str	r3, [sp, #64]	; 0x40
   20828:	e77c      	b.n	20724 <_dtoa_r+0xec>
   2082a:	4839      	ldr	r0, [pc, #228]	; (20910 <_dtoa_r+0x2d8>)
   2082c:	e73c      	b.n	206a8 <_dtoa_r+0x70>
   2082e:	2100      	movs	r1, #0
   20830:	6461      	str	r1, [r4, #68]	; 0x44
   20832:	4620      	mov	r0, r4
   20834:	468b      	mov	fp, r1
   20836:	f001 f955 	bl	21ae4 <_Balloc>
   2083a:	f04f 33ff 	mov.w	r3, #4294967295
   2083e:	9308      	str	r3, [sp, #32]
   20840:	930d      	str	r3, [sp, #52]	; 0x34
   20842:	2301      	movs	r3, #1
   20844:	9007      	str	r0, [sp, #28]
   20846:	6420      	str	r0, [r4, #64]	; 0x40
   20848:	f8cd b008 	str.w	fp, [sp, #8]
   2084c:	9309      	str	r3, [sp, #36]	; 0x24
   2084e:	9b15      	ldr	r3, [sp, #84]	; 0x54
   20850:	2b00      	cmp	r3, #0
   20852:	f2c0 80d0 	blt.w	209f6 <_dtoa_r+0x3be>
   20856:	9a04      	ldr	r2, [sp, #16]
   20858:	2a0e      	cmp	r2, #14
   2085a:	f300 80cc 	bgt.w	209f6 <_dtoa_r+0x3be>
   2085e:	4b2b      	ldr	r3, [pc, #172]	; (2090c <_dtoa_r+0x2d4>)
   20860:	f1bb 0f00 	cmp.w	fp, #0
   20864:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
   20868:	e9d3 8900 	ldrd	r8, r9, [r3]
   2086c:	f2c0 83be 	blt.w	20fec <_dtoa_r+0x9b4>
   20870:	e9dd 6700 	ldrd	r6, r7, [sp]
   20874:	4642      	mov	r2, r8
   20876:	464b      	mov	r3, r9
   20878:	4630      	mov	r0, r6
   2087a:	4639      	mov	r1, r7
   2087c:	f7fb fa30 	bl	1bce0 <__aeabi_ddiv>
   20880:	f7fb fb9e 	bl	1bfc0 <__aeabi_d2iz>
   20884:	4683      	mov	fp, r0
   20886:	f7fb f89b 	bl	1b9c0 <__aeabi_i2d>
   2088a:	4642      	mov	r2, r8
   2088c:	464b      	mov	r3, r9
   2088e:	f7fb f8fd 	bl	1ba8c <__aeabi_dmul>
   20892:	460b      	mov	r3, r1
   20894:	4602      	mov	r2, r0
   20896:	4639      	mov	r1, r7
   20898:	4630      	mov	r0, r6
   2089a:	f7fa ff43 	bl	1b724 <__aeabi_dsub>
   2089e:	9d07      	ldr	r5, [sp, #28]
   208a0:	f10b 0330 	add.w	r3, fp, #48	; 0x30
   208a4:	702b      	strb	r3, [r5, #0]
   208a6:	9b08      	ldr	r3, [sp, #32]
   208a8:	2b01      	cmp	r3, #1
   208aa:	4606      	mov	r6, r0
   208ac:	460f      	mov	r7, r1
   208ae:	f105 0501 	add.w	r5, r5, #1
   208b2:	d061      	beq.n	20978 <_dtoa_r+0x340>
   208b4:	2200      	movs	r2, #0
   208b6:	4b17      	ldr	r3, [pc, #92]	; (20914 <_dtoa_r+0x2dc>)
   208b8:	f7fb f8e8 	bl	1ba8c <__aeabi_dmul>
   208bc:	2200      	movs	r2, #0
   208be:	2300      	movs	r3, #0
   208c0:	4606      	mov	r6, r0
   208c2:	460f      	mov	r7, r1
   208c4:	f7fb fb4a 	bl	1bf5c <__aeabi_dcmpeq>
   208c8:	2800      	cmp	r0, #0
   208ca:	f040 8081 	bne.w	209d0 <_dtoa_r+0x398>
   208ce:	f8cd a000 	str.w	sl, [sp]
   208d2:	9402      	str	r4, [sp, #8]
   208d4:	f8dd a01c 	ldr.w	sl, [sp, #28]
   208d8:	9c08      	ldr	r4, [sp, #32]
   208da:	e028      	b.n	2092e <_dtoa_r+0x2f6>
   208dc:	f3af 8000 	nop.w
   208e0:	636f4361 	.word	0x636f4361
   208e4:	3fd287a7 	.word	0x3fd287a7
   208e8:	8b60c8b3 	.word	0x8b60c8b3
   208ec:	3fc68a28 	.word	0x3fc68a28
   208f0:	509f79fb 	.word	0x509f79fb
   208f4:	3fd34413 	.word	0x3fd34413
   208f8:	7ff00000 	.word	0x7ff00000
   208fc:	00024bb1 	.word	0x00024bb1
   20900:	00024d00 	.word	0x00024d00
   20904:	00024d0c 	.word	0x00024d0c
   20908:	3ff80000 	.word	0x3ff80000
   2090c:	00024d38 	.word	0x00024d38
   20910:	00024bb0 	.word	0x00024bb0
   20914:	40240000 	.word	0x40240000
   20918:	f7fb f8b8 	bl	1ba8c <__aeabi_dmul>
   2091c:	2200      	movs	r2, #0
   2091e:	2300      	movs	r3, #0
   20920:	4606      	mov	r6, r0
   20922:	460f      	mov	r7, r1
   20924:	f7fb fb1a 	bl	1bf5c <__aeabi_dcmpeq>
   20928:	2800      	cmp	r0, #0
   2092a:	f040 83c5 	bne.w	210b8 <_dtoa_r+0xa80>
   2092e:	4642      	mov	r2, r8
   20930:	464b      	mov	r3, r9
   20932:	4630      	mov	r0, r6
   20934:	4639      	mov	r1, r7
   20936:	f7fb f9d3 	bl	1bce0 <__aeabi_ddiv>
   2093a:	f7fb fb41 	bl	1bfc0 <__aeabi_d2iz>
   2093e:	4683      	mov	fp, r0
   20940:	f7fb f83e 	bl	1b9c0 <__aeabi_i2d>
   20944:	4642      	mov	r2, r8
   20946:	464b      	mov	r3, r9
   20948:	f7fb f8a0 	bl	1ba8c <__aeabi_dmul>
   2094c:	4602      	mov	r2, r0
   2094e:	460b      	mov	r3, r1
   20950:	4630      	mov	r0, r6
   20952:	4639      	mov	r1, r7
   20954:	f7fa fee6 	bl	1b724 <__aeabi_dsub>
   20958:	f10b 0e30 	add.w	lr, fp, #48	; 0x30
   2095c:	f805 eb01 	strb.w	lr, [r5], #1
   20960:	eba5 0e0a 	sub.w	lr, r5, sl
   20964:	45a6      	cmp	lr, r4
   20966:	4606      	mov	r6, r0
   20968:	460f      	mov	r7, r1
   2096a:	f04f 0200 	mov.w	r2, #0
   2096e:	4b6e      	ldr	r3, [pc, #440]	; (20b28 <_dtoa_r+0x4f0>)
   20970:	d1d2      	bne.n	20918 <_dtoa_r+0x2e0>
   20972:	f8dd a000 	ldr.w	sl, [sp]
   20976:	9c02      	ldr	r4, [sp, #8]
   20978:	4632      	mov	r2, r6
   2097a:	463b      	mov	r3, r7
   2097c:	4630      	mov	r0, r6
   2097e:	4639      	mov	r1, r7
   20980:	f7fa fed2 	bl	1b728 <__adddf3>
   20984:	4606      	mov	r6, r0
   20986:	460f      	mov	r7, r1
   20988:	4602      	mov	r2, r0
   2098a:	460b      	mov	r3, r1
   2098c:	4640      	mov	r0, r8
   2098e:	4649      	mov	r1, r9
   20990:	f7fb faee 	bl	1bf70 <__aeabi_dcmplt>
   20994:	b948      	cbnz	r0, 209aa <_dtoa_r+0x372>
   20996:	4632      	mov	r2, r6
   20998:	463b      	mov	r3, r7
   2099a:	4640      	mov	r0, r8
   2099c:	4649      	mov	r1, r9
   2099e:	f7fb fadd 	bl	1bf5c <__aeabi_dcmpeq>
   209a2:	b1a8      	cbz	r0, 209d0 <_dtoa_r+0x398>
   209a4:	f01b 0f01 	tst.w	fp, #1
   209a8:	d012      	beq.n	209d0 <_dtoa_r+0x398>
   209aa:	f815 8c01 	ldrb.w	r8, [r5, #-1]
   209ae:	9a07      	ldr	r2, [sp, #28]
   209b0:	1e6b      	subs	r3, r5, #1
   209b2:	e004      	b.n	209be <_dtoa_r+0x386>
   209b4:	429a      	cmp	r2, r3
   209b6:	f000 842d 	beq.w	21214 <_dtoa_r+0xbdc>
   209ba:	f813 8d01 	ldrb.w	r8, [r3, #-1]!
   209be:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
   209c2:	f103 0501 	add.w	r5, r3, #1
   209c6:	d0f5      	beq.n	209b4 <_dtoa_r+0x37c>
   209c8:	f108 0801 	add.w	r8, r8, #1
   209cc:	f883 8000 	strb.w	r8, [r3]
   209d0:	4651      	mov	r1, sl
   209d2:	4620      	mov	r0, r4
   209d4:	f001 f8ac 	bl	21b30 <_Bfree>
   209d8:	2200      	movs	r2, #0
   209da:	9b04      	ldr	r3, [sp, #16]
   209dc:	702a      	strb	r2, [r5, #0]
   209de:	9a03      	ldr	r2, [sp, #12]
   209e0:	3301      	adds	r3, #1
   209e2:	6013      	str	r3, [r2, #0]
   209e4:	9b21      	ldr	r3, [sp, #132]	; 0x84
   209e6:	2b00      	cmp	r3, #0
   209e8:	f000 83a3 	beq.w	21132 <_dtoa_r+0xafa>
   209ec:	9807      	ldr	r0, [sp, #28]
   209ee:	601d      	str	r5, [r3, #0]
   209f0:	b017      	add	sp, #92	; 0x5c
   209f2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   209f6:	9a09      	ldr	r2, [sp, #36]	; 0x24
   209f8:	2a00      	cmp	r2, #0
   209fa:	d040      	beq.n	20a7e <_dtoa_r+0x446>
   209fc:	9a02      	ldr	r2, [sp, #8]
   209fe:	2a01      	cmp	r2, #1
   20a00:	f340 831c 	ble.w	2103c <_dtoa_r+0xa04>
   20a04:	9b08      	ldr	r3, [sp, #32]
   20a06:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   20a08:	1e5f      	subs	r7, r3, #1
   20a0a:	42ba      	cmp	r2, r7
   20a0c:	f2c0 8394 	blt.w	21138 <_dtoa_r+0xb00>
   20a10:	1bd7      	subs	r7, r2, r7
   20a12:	9b08      	ldr	r3, [sp, #32]
   20a14:	2b00      	cmp	r3, #0
   20a16:	f2c0 847e 	blt.w	21316 <_dtoa_r+0xcde>
   20a1a:	9d06      	ldr	r5, [sp, #24]
   20a1c:	9b08      	ldr	r3, [sp, #32]
   20a1e:	9a06      	ldr	r2, [sp, #24]
   20a20:	441a      	add	r2, r3
   20a22:	9206      	str	r2, [sp, #24]
   20a24:	9a05      	ldr	r2, [sp, #20]
   20a26:	2101      	movs	r1, #1
   20a28:	441a      	add	r2, r3
   20a2a:	4620      	mov	r0, r4
   20a2c:	9205      	str	r2, [sp, #20]
   20a2e:	f001 f919 	bl	21c64 <__i2b>
   20a32:	4606      	mov	r6, r0
   20a34:	e026      	b.n	20a84 <_dtoa_r+0x44c>
   20a36:	2301      	movs	r3, #1
   20a38:	930c      	str	r3, [sp, #48]	; 0x30
   20a3a:	e6b3      	b.n	207a4 <_dtoa_r+0x16c>
   20a3c:	9a06      	ldr	r2, [sp, #24]
   20a3e:	9b04      	ldr	r3, [sp, #16]
   20a40:	1ad2      	subs	r2, r2, r3
   20a42:	425b      	negs	r3, r3
   20a44:	930a      	str	r3, [sp, #40]	; 0x28
   20a46:	2300      	movs	r3, #0
   20a48:	9206      	str	r2, [sp, #24]
   20a4a:	930b      	str	r3, [sp, #44]	; 0x2c
   20a4c:	e6bd      	b.n	207ca <_dtoa_r+0x192>
   20a4e:	f1c5 0301 	rsb	r3, r5, #1
   20a52:	9306      	str	r3, [sp, #24]
   20a54:	2300      	movs	r3, #0
   20a56:	9305      	str	r3, [sp, #20]
   20a58:	e6ac      	b.n	207b4 <_dtoa_r+0x17c>
   20a5a:	f8dd 9010 	ldr.w	r9, [sp, #16]
   20a5e:	4648      	mov	r0, r9
   20a60:	f7fa ffae 	bl	1b9c0 <__aeabi_i2d>
   20a64:	4602      	mov	r2, r0
   20a66:	460b      	mov	r3, r1
   20a68:	4630      	mov	r0, r6
   20a6a:	4639      	mov	r1, r7
   20a6c:	f7fb fa76 	bl	1bf5c <__aeabi_dcmpeq>
   20a70:	2800      	cmp	r0, #0
   20a72:	f47f ae83 	bne.w	2077c <_dtoa_r+0x144>
   20a76:	f109 33ff 	add.w	r3, r9, #4294967295
   20a7a:	9304      	str	r3, [sp, #16]
   20a7c:	e67e      	b.n	2077c <_dtoa_r+0x144>
   20a7e:	9f0a      	ldr	r7, [sp, #40]	; 0x28
   20a80:	9d06      	ldr	r5, [sp, #24]
   20a82:	9e09      	ldr	r6, [sp, #36]	; 0x24
   20a84:	2d00      	cmp	r5, #0
   20a86:	dd0c      	ble.n	20aa2 <_dtoa_r+0x46a>
   20a88:	9905      	ldr	r1, [sp, #20]
   20a8a:	2900      	cmp	r1, #0
   20a8c:	460b      	mov	r3, r1
   20a8e:	dd08      	ble.n	20aa2 <_dtoa_r+0x46a>
   20a90:	42a9      	cmp	r1, r5
   20a92:	9a06      	ldr	r2, [sp, #24]
   20a94:	bfa8      	it	ge
   20a96:	462b      	movge	r3, r5
   20a98:	1ad2      	subs	r2, r2, r3
   20a9a:	1aed      	subs	r5, r5, r3
   20a9c:	1acb      	subs	r3, r1, r3
   20a9e:	9206      	str	r2, [sp, #24]
   20aa0:	9305      	str	r3, [sp, #20]
   20aa2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   20aa4:	b1d3      	cbz	r3, 20adc <_dtoa_r+0x4a4>
   20aa6:	9b09      	ldr	r3, [sp, #36]	; 0x24
   20aa8:	2b00      	cmp	r3, #0
   20aaa:	f000 82c0 	beq.w	2102e <_dtoa_r+0x9f6>
   20aae:	2f00      	cmp	r7, #0
   20ab0:	dd10      	ble.n	20ad4 <_dtoa_r+0x49c>
   20ab2:	4631      	mov	r1, r6
   20ab4:	463a      	mov	r2, r7
   20ab6:	4620      	mov	r0, r4
   20ab8:	f001 f970 	bl	21d9c <__pow5mult>
   20abc:	4652      	mov	r2, sl
   20abe:	4601      	mov	r1, r0
   20ac0:	4606      	mov	r6, r0
   20ac2:	4620      	mov	r0, r4
   20ac4:	f001 f8d8 	bl	21c78 <__multiply>
   20ac8:	4651      	mov	r1, sl
   20aca:	4680      	mov	r8, r0
   20acc:	4620      	mov	r0, r4
   20ace:	f001 f82f 	bl	21b30 <_Bfree>
   20ad2:	46c2      	mov	sl, r8
   20ad4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   20ad6:	1bda      	subs	r2, r3, r7
   20ad8:	f040 82aa 	bne.w	21030 <_dtoa_r+0x9f8>
   20adc:	2101      	movs	r1, #1
   20ade:	4620      	mov	r0, r4
   20ae0:	f001 f8c0 	bl	21c64 <__i2b>
   20ae4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   20ae6:	2b00      	cmp	r3, #0
   20ae8:	4681      	mov	r9, r0
   20aea:	dd1f      	ble.n	20b2c <_dtoa_r+0x4f4>
   20aec:	4601      	mov	r1, r0
   20aee:	461a      	mov	r2, r3
   20af0:	4620      	mov	r0, r4
   20af2:	f001 f953 	bl	21d9c <__pow5mult>
   20af6:	9b02      	ldr	r3, [sp, #8]
   20af8:	2b01      	cmp	r3, #1
   20afa:	4681      	mov	r9, r0
   20afc:	f340 825b 	ble.w	20fb6 <_dtoa_r+0x97e>
   20b00:	f04f 0800 	mov.w	r8, #0
   20b04:	f8d9 3010 	ldr.w	r3, [r9, #16]
   20b08:	eb09 0383 	add.w	r3, r9, r3, lsl #2
   20b0c:	6918      	ldr	r0, [r3, #16]
   20b0e:	f001 f859 	bl	21bc4 <__hi0bits>
   20b12:	f1c0 0020 	rsb	r0, r0, #32
   20b16:	e013      	b.n	20b40 <_dtoa_r+0x508>
   20b18:	f1c3 0920 	rsb	r9, r3, #32
   20b1c:	9b00      	ldr	r3, [sp, #0]
   20b1e:	fa03 f009 	lsl.w	r0, r3, r9
   20b22:	e67a      	b.n	2081a <_dtoa_r+0x1e2>
   20b24:	900c      	str	r0, [sp, #48]	; 0x30
   20b26:	e63d      	b.n	207a4 <_dtoa_r+0x16c>
   20b28:	40240000 	.word	0x40240000
   20b2c:	9b02      	ldr	r3, [sp, #8]
   20b2e:	2b01      	cmp	r3, #1
   20b30:	f340 828d 	ble.w	2104e <_dtoa_r+0xa16>
   20b34:	f04f 0800 	mov.w	r8, #0
   20b38:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   20b3a:	2001      	movs	r0, #1
   20b3c:	2b00      	cmp	r3, #0
   20b3e:	d1e1      	bne.n	20b04 <_dtoa_r+0x4cc>
   20b40:	9a05      	ldr	r2, [sp, #20]
   20b42:	4410      	add	r0, r2
   20b44:	f010 001f 	ands.w	r0, r0, #31
   20b48:	f000 80a1 	beq.w	20c8e <_dtoa_r+0x656>
   20b4c:	f1c0 0320 	rsb	r3, r0, #32
   20b50:	2b04      	cmp	r3, #4
   20b52:	f340 848c 	ble.w	2146e <_dtoa_r+0xe36>
   20b56:	9b06      	ldr	r3, [sp, #24]
   20b58:	f1c0 001c 	rsb	r0, r0, #28
   20b5c:	4403      	add	r3, r0
   20b5e:	9306      	str	r3, [sp, #24]
   20b60:	4613      	mov	r3, r2
   20b62:	4403      	add	r3, r0
   20b64:	4405      	add	r5, r0
   20b66:	9305      	str	r3, [sp, #20]
   20b68:	9b06      	ldr	r3, [sp, #24]
   20b6a:	2b00      	cmp	r3, #0
   20b6c:	dd05      	ble.n	20b7a <_dtoa_r+0x542>
   20b6e:	4651      	mov	r1, sl
   20b70:	461a      	mov	r2, r3
   20b72:	4620      	mov	r0, r4
   20b74:	f001 f962 	bl	21e3c <__lshift>
   20b78:	4682      	mov	sl, r0
   20b7a:	9b05      	ldr	r3, [sp, #20]
   20b7c:	2b00      	cmp	r3, #0
   20b7e:	dd05      	ble.n	20b8c <_dtoa_r+0x554>
   20b80:	4649      	mov	r1, r9
   20b82:	461a      	mov	r2, r3
   20b84:	4620      	mov	r0, r4
   20b86:	f001 f959 	bl	21e3c <__lshift>
   20b8a:	4681      	mov	r9, r0
   20b8c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   20b8e:	2b00      	cmp	r3, #0
   20b90:	f040 8086 	bne.w	20ca0 <_dtoa_r+0x668>
   20b94:	9b08      	ldr	r3, [sp, #32]
   20b96:	2b00      	cmp	r3, #0
   20b98:	f340 8269 	ble.w	2106e <_dtoa_r+0xa36>
   20b9c:	9b09      	ldr	r3, [sp, #36]	; 0x24
   20b9e:	2b00      	cmp	r3, #0
   20ba0:	f000 8098 	beq.w	20cd4 <_dtoa_r+0x69c>
   20ba4:	2d00      	cmp	r5, #0
   20ba6:	dd05      	ble.n	20bb4 <_dtoa_r+0x57c>
   20ba8:	4631      	mov	r1, r6
   20baa:	462a      	mov	r2, r5
   20bac:	4620      	mov	r0, r4
   20bae:	f001 f945 	bl	21e3c <__lshift>
   20bb2:	4606      	mov	r6, r0
   20bb4:	f1b8 0f00 	cmp.w	r8, #0
   20bb8:	f040 8336 	bne.w	21228 <_dtoa_r+0xbf0>
   20bbc:	46b0      	mov	r8, r6
   20bbe:	9b08      	ldr	r3, [sp, #32]
   20bc0:	9a07      	ldr	r2, [sp, #28]
   20bc2:	3b01      	subs	r3, #1
   20bc4:	18d3      	adds	r3, r2, r3
   20bc6:	9308      	str	r3, [sp, #32]
   20bc8:	9b00      	ldr	r3, [sp, #0]
   20bca:	f003 0301 	and.w	r3, r3, #1
   20bce:	9309      	str	r3, [sp, #36]	; 0x24
   20bd0:	4617      	mov	r7, r2
   20bd2:	4649      	mov	r1, r9
   20bd4:	4650      	mov	r0, sl
   20bd6:	f7ff fc9b 	bl	20510 <quorem>
   20bda:	4631      	mov	r1, r6
   20bdc:	4605      	mov	r5, r0
   20bde:	4650      	mov	r0, sl
   20be0:	f001 f97e 	bl	21ee0 <__mcmp>
   20be4:	4642      	mov	r2, r8
   20be6:	4649      	mov	r1, r9
   20be8:	4683      	mov	fp, r0
   20bea:	4620      	mov	r0, r4
   20bec:	f001 f994 	bl	21f18 <__mdiff>
   20bf0:	f105 0230 	add.w	r2, r5, #48	; 0x30
   20bf4:	9200      	str	r2, [sp, #0]
   20bf6:	68c2      	ldr	r2, [r0, #12]
   20bf8:	4601      	mov	r1, r0
   20bfa:	2a00      	cmp	r2, #0
   20bfc:	f040 8232 	bne.w	21064 <_dtoa_r+0xa2c>
   20c00:	9006      	str	r0, [sp, #24]
   20c02:	4650      	mov	r0, sl
   20c04:	f001 f96c 	bl	21ee0 <__mcmp>
   20c08:	9b06      	ldr	r3, [sp, #24]
   20c0a:	9005      	str	r0, [sp, #20]
   20c0c:	4619      	mov	r1, r3
   20c0e:	4620      	mov	r0, r4
   20c10:	f000 ff8e 	bl	21b30 <_Bfree>
   20c14:	9a05      	ldr	r2, [sp, #20]
   20c16:	b932      	cbnz	r2, 20c26 <_dtoa_r+0x5ee>
   20c18:	9b02      	ldr	r3, [sp, #8]
   20c1a:	b923      	cbnz	r3, 20c26 <_dtoa_r+0x5ee>
   20c1c:	9b09      	ldr	r3, [sp, #36]	; 0x24
   20c1e:	2b00      	cmp	r3, #0
   20c20:	f000 83de 	beq.w	213e0 <_dtoa_r+0xda8>
   20c24:	9a02      	ldr	r2, [sp, #8]
   20c26:	f1bb 0f00 	cmp.w	fp, #0
   20c2a:	f2c0 82a2 	blt.w	21172 <_dtoa_r+0xb3a>
   20c2e:	d105      	bne.n	20c3c <_dtoa_r+0x604>
   20c30:	9b02      	ldr	r3, [sp, #8]
   20c32:	b91b      	cbnz	r3, 20c3c <_dtoa_r+0x604>
   20c34:	9b09      	ldr	r3, [sp, #36]	; 0x24
   20c36:	2b00      	cmp	r3, #0
   20c38:	f000 829b 	beq.w	21172 <_dtoa_r+0xb3a>
   20c3c:	2a00      	cmp	r2, #0
   20c3e:	f300 8307 	bgt.w	21250 <_dtoa_r+0xc18>
   20c42:	f89d 3000 	ldrb.w	r3, [sp]
   20c46:	703b      	strb	r3, [r7, #0]
   20c48:	9b08      	ldr	r3, [sp, #32]
   20c4a:	f107 0b01 	add.w	fp, r7, #1
   20c4e:	429f      	cmp	r7, r3
   20c50:	465d      	mov	r5, fp
   20c52:	f000 8308 	beq.w	21266 <_dtoa_r+0xc2e>
   20c56:	4651      	mov	r1, sl
   20c58:	2300      	movs	r3, #0
   20c5a:	220a      	movs	r2, #10
   20c5c:	4620      	mov	r0, r4
   20c5e:	f000 ff71 	bl	21b44 <__multadd>
   20c62:	4546      	cmp	r6, r8
   20c64:	4682      	mov	sl, r0
   20c66:	4631      	mov	r1, r6
   20c68:	f04f 0300 	mov.w	r3, #0
   20c6c:	f04f 020a 	mov.w	r2, #10
   20c70:	4620      	mov	r0, r4
   20c72:	f000 81f1 	beq.w	21058 <_dtoa_r+0xa20>
   20c76:	f000 ff65 	bl	21b44 <__multadd>
   20c7a:	4641      	mov	r1, r8
   20c7c:	4606      	mov	r6, r0
   20c7e:	2300      	movs	r3, #0
   20c80:	220a      	movs	r2, #10
   20c82:	4620      	mov	r0, r4
   20c84:	f000 ff5e 	bl	21b44 <__multadd>
   20c88:	465f      	mov	r7, fp
   20c8a:	4680      	mov	r8, r0
   20c8c:	e7a1      	b.n	20bd2 <_dtoa_r+0x59a>
   20c8e:	201c      	movs	r0, #28
   20c90:	9b06      	ldr	r3, [sp, #24]
   20c92:	4403      	add	r3, r0
   20c94:	9306      	str	r3, [sp, #24]
   20c96:	9b05      	ldr	r3, [sp, #20]
   20c98:	4403      	add	r3, r0
   20c9a:	4405      	add	r5, r0
   20c9c:	9305      	str	r3, [sp, #20]
   20c9e:	e763      	b.n	20b68 <_dtoa_r+0x530>
   20ca0:	4649      	mov	r1, r9
   20ca2:	4650      	mov	r0, sl
   20ca4:	f001 f91c 	bl	21ee0 <__mcmp>
   20ca8:	2800      	cmp	r0, #0
   20caa:	f6bf af73 	bge.w	20b94 <_dtoa_r+0x55c>
   20cae:	9f04      	ldr	r7, [sp, #16]
   20cb0:	4651      	mov	r1, sl
   20cb2:	2300      	movs	r3, #0
   20cb4:	220a      	movs	r2, #10
   20cb6:	4620      	mov	r0, r4
   20cb8:	3f01      	subs	r7, #1
   20cba:	9704      	str	r7, [sp, #16]
   20cbc:	f000 ff42 	bl	21b44 <__multadd>
   20cc0:	9b09      	ldr	r3, [sp, #36]	; 0x24
   20cc2:	4682      	mov	sl, r0
   20cc4:	2b00      	cmp	r3, #0
   20cc6:	f040 83a7 	bne.w	21418 <_dtoa_r+0xde0>
   20cca:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   20ccc:	2b00      	cmp	r3, #0
   20cce:	f340 83b0 	ble.w	21432 <_dtoa_r+0xdfa>
   20cd2:	9308      	str	r3, [sp, #32]
   20cd4:	f8dd b01c 	ldr.w	fp, [sp, #28]
   20cd8:	f8dd 8020 	ldr.w	r8, [sp, #32]
   20cdc:	465d      	mov	r5, fp
   20cde:	e002      	b.n	20ce6 <_dtoa_r+0x6ae>
   20ce0:	f000 ff30 	bl	21b44 <__multadd>
   20ce4:	4682      	mov	sl, r0
   20ce6:	4649      	mov	r1, r9
   20ce8:	4650      	mov	r0, sl
   20cea:	f7ff fc11 	bl	20510 <quorem>
   20cee:	f100 0730 	add.w	r7, r0, #48	; 0x30
   20cf2:	f805 7b01 	strb.w	r7, [r5], #1
   20cf6:	eba5 030b 	sub.w	r3, r5, fp
   20cfa:	4543      	cmp	r3, r8
   20cfc:	f04f 020a 	mov.w	r2, #10
   20d00:	f04f 0300 	mov.w	r3, #0
   20d04:	4651      	mov	r1, sl
   20d06:	4620      	mov	r0, r4
   20d08:	dbea      	blt.n	20ce0 <_dtoa_r+0x6a8>
   20d0a:	9b07      	ldr	r3, [sp, #28]
   20d0c:	9a08      	ldr	r2, [sp, #32]
   20d0e:	9700      	str	r7, [sp, #0]
   20d10:	2a01      	cmp	r2, #1
   20d12:	bfac      	ite	ge
   20d14:	189b      	addge	r3, r3, r2
   20d16:	3301      	addlt	r3, #1
   20d18:	461d      	mov	r5, r3
   20d1a:	f04f 0b00 	mov.w	fp, #0
   20d1e:	4651      	mov	r1, sl
   20d20:	2201      	movs	r2, #1
   20d22:	4620      	mov	r0, r4
   20d24:	f001 f88a 	bl	21e3c <__lshift>
   20d28:	4649      	mov	r1, r9
   20d2a:	4682      	mov	sl, r0
   20d2c:	f001 f8d8 	bl	21ee0 <__mcmp>
   20d30:	2800      	cmp	r0, #0
   20d32:	f340 823a 	ble.w	211aa <_dtoa_r+0xb72>
   20d36:	f815 2c01 	ldrb.w	r2, [r5, #-1]
   20d3a:	9907      	ldr	r1, [sp, #28]
   20d3c:	1e6b      	subs	r3, r5, #1
   20d3e:	e004      	b.n	20d4a <_dtoa_r+0x712>
   20d40:	428b      	cmp	r3, r1
   20d42:	f000 81af 	beq.w	210a4 <_dtoa_r+0xa6c>
   20d46:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
   20d4a:	2a39      	cmp	r2, #57	; 0x39
   20d4c:	f103 0501 	add.w	r5, r3, #1
   20d50:	d0f6      	beq.n	20d40 <_dtoa_r+0x708>
   20d52:	3201      	adds	r2, #1
   20d54:	701a      	strb	r2, [r3, #0]
   20d56:	4649      	mov	r1, r9
   20d58:	4620      	mov	r0, r4
   20d5a:	f000 fee9 	bl	21b30 <_Bfree>
   20d5e:	2e00      	cmp	r6, #0
   20d60:	f43f ae36 	beq.w	209d0 <_dtoa_r+0x398>
   20d64:	f1bb 0f00 	cmp.w	fp, #0
   20d68:	d005      	beq.n	20d76 <_dtoa_r+0x73e>
   20d6a:	45b3      	cmp	fp, r6
   20d6c:	d003      	beq.n	20d76 <_dtoa_r+0x73e>
   20d6e:	4659      	mov	r1, fp
   20d70:	4620      	mov	r0, r4
   20d72:	f000 fedd 	bl	21b30 <_Bfree>
   20d76:	4631      	mov	r1, r6
   20d78:	4620      	mov	r0, r4
   20d7a:	f000 fed9 	bl	21b30 <_Bfree>
   20d7e:	e627      	b.n	209d0 <_dtoa_r+0x398>
   20d80:	2300      	movs	r3, #0
   20d82:	9309      	str	r3, [sp, #36]	; 0x24
   20d84:	9b04      	ldr	r3, [sp, #16]
   20d86:	445b      	add	r3, fp
   20d88:	930d      	str	r3, [sp, #52]	; 0x34
   20d8a:	3301      	adds	r3, #1
   20d8c:	2b01      	cmp	r3, #1
   20d8e:	461e      	mov	r6, r3
   20d90:	461d      	mov	r5, r3
   20d92:	9308      	str	r3, [sp, #32]
   20d94:	bfb8      	it	lt
   20d96:	2601      	movlt	r6, #1
   20d98:	2100      	movs	r1, #0
   20d9a:	2e17      	cmp	r6, #23
   20d9c:	6461      	str	r1, [r4, #68]	; 0x44
   20d9e:	d90a      	bls.n	20db6 <_dtoa_r+0x77e>
   20da0:	2201      	movs	r2, #1
   20da2:	2304      	movs	r3, #4
   20da4:	005b      	lsls	r3, r3, #1
   20da6:	f103 0014 	add.w	r0, r3, #20
   20daa:	4286      	cmp	r6, r0
   20dac:	4611      	mov	r1, r2
   20dae:	f102 0201 	add.w	r2, r2, #1
   20db2:	d2f7      	bcs.n	20da4 <_dtoa_r+0x76c>
   20db4:	6461      	str	r1, [r4, #68]	; 0x44
   20db6:	4620      	mov	r0, r4
   20db8:	f000 fe94 	bl	21ae4 <_Balloc>
   20dbc:	2d0e      	cmp	r5, #14
   20dbe:	9007      	str	r0, [sp, #28]
   20dc0:	6420      	str	r0, [r4, #64]	; 0x40
   20dc2:	f63f ad44 	bhi.w	2084e <_dtoa_r+0x216>
   20dc6:	2f00      	cmp	r7, #0
   20dc8:	f43f ad41 	beq.w	2084e <_dtoa_r+0x216>
   20dcc:	9904      	ldr	r1, [sp, #16]
   20dce:	2900      	cmp	r1, #0
   20dd0:	ed9d 7b00 	vldr	d7, [sp]
   20dd4:	f340 81f6 	ble.w	211c4 <_dtoa_r+0xb8c>
   20dd8:	4bb9      	ldr	r3, [pc, #740]	; (210c0 <_dtoa_r+0xa88>)
   20dda:	f001 020f 	and.w	r2, r1, #15
   20dde:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
   20de2:	110d      	asrs	r5, r1, #4
   20de4:	e9d3 6700 	ldrd	r6, r7, [r3]
   20de8:	06eb      	lsls	r3, r5, #27
   20dea:	f140 81ad 	bpl.w	21148 <_dtoa_r+0xb10>
   20dee:	4bb5      	ldr	r3, [pc, #724]	; (210c4 <_dtoa_r+0xa8c>)
   20df0:	ec51 0b17 	vmov	r0, r1, d7
   20df4:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
   20df8:	f7fa ff72 	bl	1bce0 <__aeabi_ddiv>
   20dfc:	e9cd 010e 	strd	r0, r1, [sp, #56]	; 0x38
   20e00:	f005 050f 	and.w	r5, r5, #15
   20e04:	f04f 0903 	mov.w	r9, #3
   20e08:	b18d      	cbz	r5, 20e2e <_dtoa_r+0x7f6>
   20e0a:	f8df 82b8 	ldr.w	r8, [pc, #696]	; 210c4 <_dtoa_r+0xa8c>
   20e0e:	07e8      	lsls	r0, r5, #31
   20e10:	d509      	bpl.n	20e26 <_dtoa_r+0x7ee>
   20e12:	4630      	mov	r0, r6
   20e14:	4639      	mov	r1, r7
   20e16:	e9d8 2300 	ldrd	r2, r3, [r8]
   20e1a:	f7fa fe37 	bl	1ba8c <__aeabi_dmul>
   20e1e:	f109 0901 	add.w	r9, r9, #1
   20e22:	4606      	mov	r6, r0
   20e24:	460f      	mov	r7, r1
   20e26:	106d      	asrs	r5, r5, #1
   20e28:	f108 0808 	add.w	r8, r8, #8
   20e2c:	d1ef      	bne.n	20e0e <_dtoa_r+0x7d6>
   20e2e:	463b      	mov	r3, r7
   20e30:	4632      	mov	r2, r6
   20e32:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
   20e36:	f7fa ff53 	bl	1bce0 <__aeabi_ddiv>
   20e3a:	4607      	mov	r7, r0
   20e3c:	4688      	mov	r8, r1
   20e3e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   20e40:	b143      	cbz	r3, 20e54 <_dtoa_r+0x81c>
   20e42:	2200      	movs	r2, #0
   20e44:	4ba0      	ldr	r3, [pc, #640]	; (210c8 <_dtoa_r+0xa90>)
   20e46:	4638      	mov	r0, r7
   20e48:	4641      	mov	r1, r8
   20e4a:	f7fb f891 	bl	1bf70 <__aeabi_dcmplt>
   20e4e:	2800      	cmp	r0, #0
   20e50:	f040 8273 	bne.w	2133a <_dtoa_r+0xd02>
   20e54:	4648      	mov	r0, r9
   20e56:	f7fa fdb3 	bl	1b9c0 <__aeabi_i2d>
   20e5a:	463a      	mov	r2, r7
   20e5c:	4643      	mov	r3, r8
   20e5e:	f7fa fe15 	bl	1ba8c <__aeabi_dmul>
   20e62:	4b9a      	ldr	r3, [pc, #616]	; (210cc <_dtoa_r+0xa94>)
   20e64:	2200      	movs	r2, #0
   20e66:	f7fa fc5f 	bl	1b728 <__adddf3>
   20e6a:	9b08      	ldr	r3, [sp, #32]
   20e6c:	4605      	mov	r5, r0
   20e6e:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
   20e72:	2b00      	cmp	r3, #0
   20e74:	f000 8140 	beq.w	210f8 <_dtoa_r+0xac0>
   20e78:	9b04      	ldr	r3, [sp, #16]
   20e7a:	f8dd 9020 	ldr.w	r9, [sp, #32]
   20e7e:	9311      	str	r3, [sp, #68]	; 0x44
   20e80:	9b09      	ldr	r3, [sp, #36]	; 0x24
   20e82:	2b00      	cmp	r3, #0
   20e84:	f000 81f6 	beq.w	21274 <_dtoa_r+0xc3c>
   20e88:	4b8d      	ldr	r3, [pc, #564]	; (210c0 <_dtoa_r+0xa88>)
   20e8a:	4991      	ldr	r1, [pc, #580]	; (210d0 <_dtoa_r+0xa98>)
   20e8c:	eb03 03c9 	add.w	r3, r3, r9, lsl #3
   20e90:	e953 2302 	ldrd	r2, r3, [r3, #-8]
   20e94:	2000      	movs	r0, #0
   20e96:	f7fa ff23 	bl	1bce0 <__aeabi_ddiv>
   20e9a:	462a      	mov	r2, r5
   20e9c:	4633      	mov	r3, r6
   20e9e:	f7fa fc41 	bl	1b724 <__aeabi_dsub>
   20ea2:	e9cd 010e 	strd	r0, r1, [sp, #56]	; 0x38
   20ea6:	4641      	mov	r1, r8
   20ea8:	4638      	mov	r0, r7
   20eaa:	f7fb f889 	bl	1bfc0 <__aeabi_d2iz>
   20eae:	4605      	mov	r5, r0
   20eb0:	f7fa fd86 	bl	1b9c0 <__aeabi_i2d>
   20eb4:	4602      	mov	r2, r0
   20eb6:	460b      	mov	r3, r1
   20eb8:	4638      	mov	r0, r7
   20eba:	4641      	mov	r1, r8
   20ebc:	f7fa fc32 	bl	1b724 <__aeabi_dsub>
   20ec0:	3530      	adds	r5, #48	; 0x30
   20ec2:	fa5f f885 	uxtb.w	r8, r5
   20ec6:	9d07      	ldr	r5, [sp, #28]
   20ec8:	4606      	mov	r6, r0
   20eca:	460f      	mov	r7, r1
   20ecc:	f885 8000 	strb.w	r8, [r5]
   20ed0:	4602      	mov	r2, r0
   20ed2:	460b      	mov	r3, r1
   20ed4:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
   20ed8:	3501      	adds	r5, #1
   20eda:	f7fb f867 	bl	1bfac <__aeabi_dcmpgt>
   20ede:	2800      	cmp	r0, #0
   20ee0:	d156      	bne.n	20f90 <_dtoa_r+0x958>
   20ee2:	4632      	mov	r2, r6
   20ee4:	463b      	mov	r3, r7
   20ee6:	2000      	movs	r0, #0
   20ee8:	4977      	ldr	r1, [pc, #476]	; (210c8 <_dtoa_r+0xa90>)
   20eea:	f7fa fc1b 	bl	1b724 <__aeabi_dsub>
   20eee:	4602      	mov	r2, r0
   20ef0:	460b      	mov	r3, r1
   20ef2:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
   20ef6:	f7fb f859 	bl	1bfac <__aeabi_dcmpgt>
   20efa:	2800      	cmp	r0, #0
   20efc:	f040 8262 	bne.w	213c4 <_dtoa_r+0xd8c>
   20f00:	f1b9 0f01 	cmp.w	r9, #1
   20f04:	f43f aca3 	beq.w	2084e <_dtoa_r+0x216>
   20f08:	9b07      	ldr	r3, [sp, #28]
   20f0a:	f8cd a048 	str.w	sl, [sp, #72]	; 0x48
   20f0e:	f8cd b04c 	str.w	fp, [sp, #76]	; 0x4c
   20f12:	4499      	add	r9, r3
   20f14:	46a0      	mov	r8, r4
   20f16:	e9dd ab0e 	ldrd	sl, fp, [sp, #56]	; 0x38
   20f1a:	e00d      	b.n	20f38 <_dtoa_r+0x900>
   20f1c:	2000      	movs	r0, #0
   20f1e:	496a      	ldr	r1, [pc, #424]	; (210c8 <_dtoa_r+0xa90>)
   20f20:	f7fa fc00 	bl	1b724 <__aeabi_dsub>
   20f24:	4652      	mov	r2, sl
   20f26:	465b      	mov	r3, fp
   20f28:	f7fb f822 	bl	1bf70 <__aeabi_dcmplt>
   20f2c:	2800      	cmp	r0, #0
   20f2e:	f040 8244 	bne.w	213ba <_dtoa_r+0xd82>
   20f32:	454d      	cmp	r5, r9
   20f34:	f000 824a 	beq.w	213cc <_dtoa_r+0xd94>
   20f38:	4650      	mov	r0, sl
   20f3a:	4659      	mov	r1, fp
   20f3c:	2200      	movs	r2, #0
   20f3e:	4b65      	ldr	r3, [pc, #404]	; (210d4 <_dtoa_r+0xa9c>)
   20f40:	f7fa fda4 	bl	1ba8c <__aeabi_dmul>
   20f44:	2200      	movs	r2, #0
   20f46:	4b63      	ldr	r3, [pc, #396]	; (210d4 <_dtoa_r+0xa9c>)
   20f48:	4682      	mov	sl, r0
   20f4a:	468b      	mov	fp, r1
   20f4c:	4630      	mov	r0, r6
   20f4e:	4639      	mov	r1, r7
   20f50:	f7fa fd9c 	bl	1ba8c <__aeabi_dmul>
   20f54:	460f      	mov	r7, r1
   20f56:	4606      	mov	r6, r0
   20f58:	f7fb f832 	bl	1bfc0 <__aeabi_d2iz>
   20f5c:	4604      	mov	r4, r0
   20f5e:	f7fa fd2f 	bl	1b9c0 <__aeabi_i2d>
   20f62:	4602      	mov	r2, r0
   20f64:	460b      	mov	r3, r1
   20f66:	4630      	mov	r0, r6
   20f68:	4639      	mov	r1, r7
   20f6a:	f7fa fbdb 	bl	1b724 <__aeabi_dsub>
   20f6e:	3430      	adds	r4, #48	; 0x30
   20f70:	b2e4      	uxtb	r4, r4
   20f72:	4652      	mov	r2, sl
   20f74:	465b      	mov	r3, fp
   20f76:	f805 4b01 	strb.w	r4, [r5], #1
   20f7a:	4606      	mov	r6, r0
   20f7c:	460f      	mov	r7, r1
   20f7e:	f7fa fff7 	bl	1bf70 <__aeabi_dcmplt>
   20f82:	4632      	mov	r2, r6
   20f84:	463b      	mov	r3, r7
   20f86:	2800      	cmp	r0, #0
   20f88:	d0c8      	beq.n	20f1c <_dtoa_r+0x8e4>
   20f8a:	f8dd a048 	ldr.w	sl, [sp, #72]	; 0x48
   20f8e:	4644      	mov	r4, r8
   20f90:	9b11      	ldr	r3, [sp, #68]	; 0x44
   20f92:	9304      	str	r3, [sp, #16]
   20f94:	e51c      	b.n	209d0 <_dtoa_r+0x398>
   20f96:	2300      	movs	r3, #0
   20f98:	9309      	str	r3, [sp, #36]	; 0x24
   20f9a:	f1bb 0f00 	cmp.w	fp, #0
   20f9e:	f340 80da 	ble.w	21156 <_dtoa_r+0xb1e>
   20fa2:	465e      	mov	r6, fp
   20fa4:	465d      	mov	r5, fp
   20fa6:	f8cd b034 	str.w	fp, [sp, #52]	; 0x34
   20faa:	f8cd b020 	str.w	fp, [sp, #32]
   20fae:	e6f3      	b.n	20d98 <_dtoa_r+0x760>
   20fb0:	2301      	movs	r3, #1
   20fb2:	9309      	str	r3, [sp, #36]	; 0x24
   20fb4:	e7f1      	b.n	20f9a <_dtoa_r+0x962>
   20fb6:	9b00      	ldr	r3, [sp, #0]
   20fb8:	2b00      	cmp	r3, #0
   20fba:	f47f ada1 	bne.w	20b00 <_dtoa_r+0x4c8>
   20fbe:	e9dd 1200 	ldrd	r1, r2, [sp]
   20fc2:	f3c2 0313 	ubfx	r3, r2, #0, #20
   20fc6:	2b00      	cmp	r3, #0
   20fc8:	f47f adb4 	bne.w	20b34 <_dtoa_r+0x4fc>
   20fcc:	f022 4700 	bic.w	r7, r2, #2147483648	; 0x80000000
   20fd0:	0d3f      	lsrs	r7, r7, #20
   20fd2:	053f      	lsls	r7, r7, #20
   20fd4:	2f00      	cmp	r7, #0
   20fd6:	f000 8200 	beq.w	213da <_dtoa_r+0xda2>
   20fda:	9b06      	ldr	r3, [sp, #24]
   20fdc:	3301      	adds	r3, #1
   20fde:	9306      	str	r3, [sp, #24]
   20fe0:	9b05      	ldr	r3, [sp, #20]
   20fe2:	3301      	adds	r3, #1
   20fe4:	9305      	str	r3, [sp, #20]
   20fe6:	f04f 0801 	mov.w	r8, #1
   20fea:	e5a5      	b.n	20b38 <_dtoa_r+0x500>
   20fec:	9b08      	ldr	r3, [sp, #32]
   20fee:	2b00      	cmp	r3, #0
   20ff0:	f73f ac3e 	bgt.w	20870 <_dtoa_r+0x238>
   20ff4:	f040 8099 	bne.w	2112a <_dtoa_r+0xaf2>
   20ff8:	4649      	mov	r1, r9
   20ffa:	2200      	movs	r2, #0
   20ffc:	4b36      	ldr	r3, [pc, #216]	; (210d8 <_dtoa_r+0xaa0>)
   20ffe:	4640      	mov	r0, r8
   21000:	f7fa fd44 	bl	1ba8c <__aeabi_dmul>
   21004:	e9dd 2300 	ldrd	r2, r3, [sp]
   21008:	f7fa ffc6 	bl	1bf98 <__aeabi_dcmpge>
   2100c:	f8dd 9020 	ldr.w	r9, [sp, #32]
   21010:	464e      	mov	r6, r9
   21012:	2800      	cmp	r0, #0
   21014:	d03e      	beq.n	21094 <_dtoa_r+0xa5c>
   21016:	ea6f 030b 	mvn.w	r3, fp
   2101a:	9d07      	ldr	r5, [sp, #28]
   2101c:	9304      	str	r3, [sp, #16]
   2101e:	4649      	mov	r1, r9
   21020:	4620      	mov	r0, r4
   21022:	f000 fd85 	bl	21b30 <_Bfree>
   21026:	2e00      	cmp	r6, #0
   21028:	f43f acd2 	beq.w	209d0 <_dtoa_r+0x398>
   2102c:	e6a3      	b.n	20d76 <_dtoa_r+0x73e>
   2102e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   21030:	4651      	mov	r1, sl
   21032:	4620      	mov	r0, r4
   21034:	f000 feb2 	bl	21d9c <__pow5mult>
   21038:	4682      	mov	sl, r0
   2103a:	e54f      	b.n	20adc <_dtoa_r+0x4a4>
   2103c:	9a10      	ldr	r2, [sp, #64]	; 0x40
   2103e:	2a00      	cmp	r2, #0
   21040:	f000 816f 	beq.w	21322 <_dtoa_r+0xcea>
   21044:	f203 4333 	addw	r3, r3, #1075	; 0x433
   21048:	9f0a      	ldr	r7, [sp, #40]	; 0x28
   2104a:	9d06      	ldr	r5, [sp, #24]
   2104c:	e4e7      	b.n	20a1e <_dtoa_r+0x3e6>
   2104e:	9b00      	ldr	r3, [sp, #0]
   21050:	2b00      	cmp	r3, #0
   21052:	f47f ad6f 	bne.w	20b34 <_dtoa_r+0x4fc>
   21056:	e7b2      	b.n	20fbe <_dtoa_r+0x986>
   21058:	f000 fd74 	bl	21b44 <__multadd>
   2105c:	465f      	mov	r7, fp
   2105e:	4606      	mov	r6, r0
   21060:	4680      	mov	r8, r0
   21062:	e5b6      	b.n	20bd2 <_dtoa_r+0x59a>
   21064:	4620      	mov	r0, r4
   21066:	f000 fd63 	bl	21b30 <_Bfree>
   2106a:	2201      	movs	r2, #1
   2106c:	e5db      	b.n	20c26 <_dtoa_r+0x5ee>
   2106e:	9b02      	ldr	r3, [sp, #8]
   21070:	2b02      	cmp	r3, #2
   21072:	f77f ad93 	ble.w	20b9c <_dtoa_r+0x564>
   21076:	9b08      	ldr	r3, [sp, #32]
   21078:	2b00      	cmp	r3, #0
   2107a:	d1cc      	bne.n	21016 <_dtoa_r+0x9de>
   2107c:	4649      	mov	r1, r9
   2107e:	2205      	movs	r2, #5
   21080:	4620      	mov	r0, r4
   21082:	f000 fd5f 	bl	21b44 <__multadd>
   21086:	4601      	mov	r1, r0
   21088:	4681      	mov	r9, r0
   2108a:	4650      	mov	r0, sl
   2108c:	f000 ff28 	bl	21ee0 <__mcmp>
   21090:	2800      	cmp	r0, #0
   21092:	ddc0      	ble.n	21016 <_dtoa_r+0x9de>
   21094:	9a04      	ldr	r2, [sp, #16]
   21096:	9907      	ldr	r1, [sp, #28]
   21098:	2331      	movs	r3, #49	; 0x31
   2109a:	3201      	adds	r2, #1
   2109c:	9204      	str	r2, [sp, #16]
   2109e:	700b      	strb	r3, [r1, #0]
   210a0:	1c4d      	adds	r5, r1, #1
   210a2:	e7bc      	b.n	2101e <_dtoa_r+0x9e6>
   210a4:	9a04      	ldr	r2, [sp, #16]
   210a6:	3201      	adds	r2, #1
   210a8:	9204      	str	r2, [sp, #16]
   210aa:	9a07      	ldr	r2, [sp, #28]
   210ac:	2331      	movs	r3, #49	; 0x31
   210ae:	7013      	strb	r3, [r2, #0]
   210b0:	e651      	b.n	20d56 <_dtoa_r+0x71e>
   210b2:	2301      	movs	r3, #1
   210b4:	9309      	str	r3, [sp, #36]	; 0x24
   210b6:	e665      	b.n	20d84 <_dtoa_r+0x74c>
   210b8:	f8dd a000 	ldr.w	sl, [sp]
   210bc:	9c02      	ldr	r4, [sp, #8]
   210be:	e487      	b.n	209d0 <_dtoa_r+0x398>
   210c0:	00024d38 	.word	0x00024d38
   210c4:	00024d10 	.word	0x00024d10
   210c8:	3ff00000 	.word	0x3ff00000
   210cc:	401c0000 	.word	0x401c0000
   210d0:	3fe00000 	.word	0x3fe00000
   210d4:	40240000 	.word	0x40240000
   210d8:	40140000 	.word	0x40140000
   210dc:	4648      	mov	r0, r9
   210de:	f7fa fc6f 	bl	1b9c0 <__aeabi_i2d>
   210e2:	463a      	mov	r2, r7
   210e4:	4643      	mov	r3, r8
   210e6:	f7fa fcd1 	bl	1ba8c <__aeabi_dmul>
   210ea:	2200      	movs	r2, #0
   210ec:	4bc4      	ldr	r3, [pc, #784]	; (21400 <_dtoa_r+0xdc8>)
   210ee:	f7fa fb1b 	bl	1b728 <__adddf3>
   210f2:	4605      	mov	r5, r0
   210f4:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
   210f8:	4641      	mov	r1, r8
   210fa:	2200      	movs	r2, #0
   210fc:	4bc1      	ldr	r3, [pc, #772]	; (21404 <_dtoa_r+0xdcc>)
   210fe:	4638      	mov	r0, r7
   21100:	f7fa fb10 	bl	1b724 <__aeabi_dsub>
   21104:	462a      	mov	r2, r5
   21106:	4633      	mov	r3, r6
   21108:	4680      	mov	r8, r0
   2110a:	4689      	mov	r9, r1
   2110c:	f7fa ff4e 	bl	1bfac <__aeabi_dcmpgt>
   21110:	2800      	cmp	r0, #0
   21112:	f040 80ab 	bne.w	2126c <_dtoa_r+0xc34>
   21116:	462a      	mov	r2, r5
   21118:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
   2111c:	4640      	mov	r0, r8
   2111e:	4649      	mov	r1, r9
   21120:	f7fa ff26 	bl	1bf70 <__aeabi_dcmplt>
   21124:	2800      	cmp	r0, #0
   21126:	f43f ab92 	beq.w	2084e <_dtoa_r+0x216>
   2112a:	f04f 0900 	mov.w	r9, #0
   2112e:	464e      	mov	r6, r9
   21130:	e771      	b.n	21016 <_dtoa_r+0x9de>
   21132:	9807      	ldr	r0, [sp, #28]
   21134:	f7ff bab8 	b.w	206a8 <_dtoa_r+0x70>
   21138:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   2113a:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
   2113c:	970a      	str	r7, [sp, #40]	; 0x28
   2113e:	1afb      	subs	r3, r7, r3
   21140:	441a      	add	r2, r3
   21142:	920b      	str	r2, [sp, #44]	; 0x2c
   21144:	2700      	movs	r7, #0
   21146:	e464      	b.n	20a12 <_dtoa_r+0x3da>
   21148:	ed9d 7b00 	vldr	d7, [sp]
   2114c:	f04f 0902 	mov.w	r9, #2
   21150:	ed8d 7b0e 	vstr	d7, [sp, #56]	; 0x38
   21154:	e658      	b.n	20e08 <_dtoa_r+0x7d0>
   21156:	2100      	movs	r1, #0
   21158:	6461      	str	r1, [r4, #68]	; 0x44
   2115a:	4620      	mov	r0, r4
   2115c:	f000 fcc2 	bl	21ae4 <_Balloc>
   21160:	f04f 0b01 	mov.w	fp, #1
   21164:	9007      	str	r0, [sp, #28]
   21166:	6420      	str	r0, [r4, #64]	; 0x40
   21168:	f8cd b020 	str.w	fp, [sp, #32]
   2116c:	f8cd b034 	str.w	fp, [sp, #52]	; 0x34
   21170:	e629      	b.n	20dc6 <_dtoa_r+0x78e>
   21172:	2a00      	cmp	r2, #0
   21174:	dd12      	ble.n	2119c <_dtoa_r+0xb64>
   21176:	4651      	mov	r1, sl
   21178:	2201      	movs	r2, #1
   2117a:	4620      	mov	r0, r4
   2117c:	f000 fe5e 	bl	21e3c <__lshift>
   21180:	4649      	mov	r1, r9
   21182:	4682      	mov	sl, r0
   21184:	f000 feac 	bl	21ee0 <__mcmp>
   21188:	2800      	cmp	r0, #0
   2118a:	f340 8131 	ble.w	213f0 <_dtoa_r+0xdb8>
   2118e:	9b00      	ldr	r3, [sp, #0]
   21190:	2b39      	cmp	r3, #57	; 0x39
   21192:	f000 80f7 	beq.w	21384 <_dtoa_r+0xd4c>
   21196:	f105 0331 	add.w	r3, r5, #49	; 0x31
   2119a:	9300      	str	r3, [sp, #0]
   2119c:	f89d 3000 	ldrb.w	r3, [sp]
   211a0:	703b      	strb	r3, [r7, #0]
   211a2:	46b3      	mov	fp, r6
   211a4:	1c7d      	adds	r5, r7, #1
   211a6:	4646      	mov	r6, r8
   211a8:	e5d5      	b.n	20d56 <_dtoa_r+0x71e>
   211aa:	d104      	bne.n	211b6 <_dtoa_r+0xb7e>
   211ac:	9b00      	ldr	r3, [sp, #0]
   211ae:	07db      	lsls	r3, r3, #31
   211b0:	d501      	bpl.n	211b6 <_dtoa_r+0xb7e>
   211b2:	e5c0      	b.n	20d36 <_dtoa_r+0x6fe>
   211b4:	4615      	mov	r5, r2
   211b6:	f815 3c01 	ldrb.w	r3, [r5, #-1]
   211ba:	2b30      	cmp	r3, #48	; 0x30
   211bc:	f105 32ff 	add.w	r2, r5, #4294967295
   211c0:	d0f8      	beq.n	211b4 <_dtoa_r+0xb7c>
   211c2:	e5c8      	b.n	20d56 <_dtoa_r+0x71e>
   211c4:	f000 80b4 	beq.w	21330 <_dtoa_r+0xcf8>
   211c8:	9b04      	ldr	r3, [sp, #16]
   211ca:	425d      	negs	r5, r3
   211cc:	4b8e      	ldr	r3, [pc, #568]	; (21408 <_dtoa_r+0xdd0>)
   211ce:	f005 020f 	and.w	r2, r5, #15
   211d2:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
   211d6:	e9d3 2300 	ldrd	r2, r3, [r3]
   211da:	e9dd 0100 	ldrd	r0, r1, [sp]
   211de:	f7fa fc55 	bl	1ba8c <__aeabi_dmul>
   211e2:	112d      	asrs	r5, r5, #4
   211e4:	4607      	mov	r7, r0
   211e6:	4688      	mov	r8, r1
   211e8:	f000 8128 	beq.w	2143c <_dtoa_r+0xe04>
   211ec:	4e87      	ldr	r6, [pc, #540]	; (2140c <_dtoa_r+0xdd4>)
   211ee:	f04f 0902 	mov.w	r9, #2
   211f2:	07e9      	lsls	r1, r5, #31
   211f4:	d509      	bpl.n	2120a <_dtoa_r+0xbd2>
   211f6:	4638      	mov	r0, r7
   211f8:	4641      	mov	r1, r8
   211fa:	e9d6 2300 	ldrd	r2, r3, [r6]
   211fe:	f7fa fc45 	bl	1ba8c <__aeabi_dmul>
   21202:	f109 0901 	add.w	r9, r9, #1
   21206:	4607      	mov	r7, r0
   21208:	4688      	mov	r8, r1
   2120a:	106d      	asrs	r5, r5, #1
   2120c:	f106 0608 	add.w	r6, r6, #8
   21210:	d1ef      	bne.n	211f2 <_dtoa_r+0xbba>
   21212:	e614      	b.n	20e3e <_dtoa_r+0x806>
   21214:	9907      	ldr	r1, [sp, #28]
   21216:	2230      	movs	r2, #48	; 0x30
   21218:	700a      	strb	r2, [r1, #0]
   2121a:	9a04      	ldr	r2, [sp, #16]
   2121c:	f815 8c01 	ldrb.w	r8, [r5, #-1]
   21220:	3201      	adds	r2, #1
   21222:	9204      	str	r2, [sp, #16]
   21224:	f7ff bbd0 	b.w	209c8 <_dtoa_r+0x390>
   21228:	6871      	ldr	r1, [r6, #4]
   2122a:	4620      	mov	r0, r4
   2122c:	f000 fc5a 	bl	21ae4 <_Balloc>
   21230:	6933      	ldr	r3, [r6, #16]
   21232:	3302      	adds	r3, #2
   21234:	009a      	lsls	r2, r3, #2
   21236:	4605      	mov	r5, r0
   21238:	f106 010c 	add.w	r1, r6, #12
   2123c:	300c      	adds	r0, #12
   2123e:	f7fc ffdf 	bl	1e200 <memcpy>
   21242:	4629      	mov	r1, r5
   21244:	2201      	movs	r2, #1
   21246:	4620      	mov	r0, r4
   21248:	f000 fdf8 	bl	21e3c <__lshift>
   2124c:	4680      	mov	r8, r0
   2124e:	e4b6      	b.n	20bbe <_dtoa_r+0x586>
   21250:	9b00      	ldr	r3, [sp, #0]
   21252:	2b39      	cmp	r3, #57	; 0x39
   21254:	f000 8096 	beq.w	21384 <_dtoa_r+0xd4c>
   21258:	9b00      	ldr	r3, [sp, #0]
   2125a:	3301      	adds	r3, #1
   2125c:	46b3      	mov	fp, r6
   2125e:	703b      	strb	r3, [r7, #0]
   21260:	1c7d      	adds	r5, r7, #1
   21262:	4646      	mov	r6, r8
   21264:	e577      	b.n	20d56 <_dtoa_r+0x71e>
   21266:	46b3      	mov	fp, r6
   21268:	4646      	mov	r6, r8
   2126a:	e558      	b.n	20d1e <_dtoa_r+0x6e6>
   2126c:	f04f 0900 	mov.w	r9, #0
   21270:	464e      	mov	r6, r9
   21272:	e70f      	b.n	21094 <_dtoa_r+0xa5c>
   21274:	4964      	ldr	r1, [pc, #400]	; (21408 <_dtoa_r+0xdd0>)
   21276:	eb01 01c9 	add.w	r1, r1, r9, lsl #3
   2127a:	462a      	mov	r2, r5
   2127c:	4633      	mov	r3, r6
   2127e:	e951 0102 	ldrd	r0, r1, [r1, #-8]
   21282:	f7fa fc03 	bl	1ba8c <__aeabi_dmul>
   21286:	e9cd 010e 	strd	r0, r1, [sp, #56]	; 0x38
   2128a:	4638      	mov	r0, r7
   2128c:	4641      	mov	r1, r8
   2128e:	f7fa fe97 	bl	1bfc0 <__aeabi_d2iz>
   21292:	4605      	mov	r5, r0
   21294:	f7fa fb94 	bl	1b9c0 <__aeabi_i2d>
   21298:	4602      	mov	r2, r0
   2129a:	460b      	mov	r3, r1
   2129c:	4638      	mov	r0, r7
   2129e:	4641      	mov	r1, r8
   212a0:	f7fa fa40 	bl	1b724 <__aeabi_dsub>
   212a4:	9a07      	ldr	r2, [sp, #28]
   212a6:	3530      	adds	r5, #48	; 0x30
   212a8:	f1b9 0f01 	cmp.w	r9, #1
   212ac:	7015      	strb	r5, [r2, #0]
   212ae:	4606      	mov	r6, r0
   212b0:	460f      	mov	r7, r1
   212b2:	f102 0501 	add.w	r5, r2, #1
   212b6:	d01c      	beq.n	212f2 <_dtoa_r+0xcba>
   212b8:	9b07      	ldr	r3, [sp, #28]
   212ba:	4499      	add	r9, r3
   212bc:	2200      	movs	r2, #0
   212be:	4b54      	ldr	r3, [pc, #336]	; (21410 <_dtoa_r+0xdd8>)
   212c0:	4630      	mov	r0, r6
   212c2:	4639      	mov	r1, r7
   212c4:	f7fa fbe2 	bl	1ba8c <__aeabi_dmul>
   212c8:	460f      	mov	r7, r1
   212ca:	4606      	mov	r6, r0
   212cc:	f7fa fe78 	bl	1bfc0 <__aeabi_d2iz>
   212d0:	4680      	mov	r8, r0
   212d2:	f7fa fb75 	bl	1b9c0 <__aeabi_i2d>
   212d6:	f108 0830 	add.w	r8, r8, #48	; 0x30
   212da:	4602      	mov	r2, r0
   212dc:	460b      	mov	r3, r1
   212de:	4630      	mov	r0, r6
   212e0:	4639      	mov	r1, r7
   212e2:	f7fa fa1f 	bl	1b724 <__aeabi_dsub>
   212e6:	f805 8b01 	strb.w	r8, [r5], #1
   212ea:	454d      	cmp	r5, r9
   212ec:	4606      	mov	r6, r0
   212ee:	460f      	mov	r7, r1
   212f0:	d1e4      	bne.n	212bc <_dtoa_r+0xc84>
   212f2:	2200      	movs	r2, #0
   212f4:	4b47      	ldr	r3, [pc, #284]	; (21414 <_dtoa_r+0xddc>)
   212f6:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
   212fa:	f7fa fa15 	bl	1b728 <__adddf3>
   212fe:	4632      	mov	r2, r6
   21300:	463b      	mov	r3, r7
   21302:	f7fa fe35 	bl	1bf70 <__aeabi_dcmplt>
   21306:	2800      	cmp	r0, #0
   21308:	d042      	beq.n	21390 <_dtoa_r+0xd58>
   2130a:	9b11      	ldr	r3, [sp, #68]	; 0x44
   2130c:	9304      	str	r3, [sp, #16]
   2130e:	f815 8c01 	ldrb.w	r8, [r5, #-1]
   21312:	f7ff bb4c 	b.w	209ae <_dtoa_r+0x376>
   21316:	9b06      	ldr	r3, [sp, #24]
   21318:	9a08      	ldr	r2, [sp, #32]
   2131a:	1a9d      	subs	r5, r3, r2
   2131c:	2300      	movs	r3, #0
   2131e:	f7ff bb7e 	b.w	20a1e <_dtoa_r+0x3e6>
   21322:	9b14      	ldr	r3, [sp, #80]	; 0x50
   21324:	9f0a      	ldr	r7, [sp, #40]	; 0x28
   21326:	9d06      	ldr	r5, [sp, #24]
   21328:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
   2132c:	f7ff bb77 	b.w	20a1e <_dtoa_r+0x3e6>
   21330:	e9dd 7800 	ldrd	r7, r8, [sp]
   21334:	f04f 0902 	mov.w	r9, #2
   21338:	e581      	b.n	20e3e <_dtoa_r+0x806>
   2133a:	9b08      	ldr	r3, [sp, #32]
   2133c:	2b00      	cmp	r3, #0
   2133e:	f43f aecd 	beq.w	210dc <_dtoa_r+0xaa4>
   21342:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   21344:	2b00      	cmp	r3, #0
   21346:	f77f aa82 	ble.w	2084e <_dtoa_r+0x216>
   2134a:	2200      	movs	r2, #0
   2134c:	4b30      	ldr	r3, [pc, #192]	; (21410 <_dtoa_r+0xdd8>)
   2134e:	4638      	mov	r0, r7
   21350:	4641      	mov	r1, r8
   21352:	f7fa fb9b 	bl	1ba8c <__aeabi_dmul>
   21356:	4607      	mov	r7, r0
   21358:	4688      	mov	r8, r1
   2135a:	f109 0001 	add.w	r0, r9, #1
   2135e:	f7fa fb2f 	bl	1b9c0 <__aeabi_i2d>
   21362:	463a      	mov	r2, r7
   21364:	4643      	mov	r3, r8
   21366:	f7fa fb91 	bl	1ba8c <__aeabi_dmul>
   2136a:	2200      	movs	r2, #0
   2136c:	4b24      	ldr	r3, [pc, #144]	; (21400 <_dtoa_r+0xdc8>)
   2136e:	f7fa f9db 	bl	1b728 <__adddf3>
   21372:	9a04      	ldr	r2, [sp, #16]
   21374:	f8dd 9034 	ldr.w	r9, [sp, #52]	; 0x34
   21378:	3a01      	subs	r2, #1
   2137a:	4605      	mov	r5, r0
   2137c:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
   21380:	9211      	str	r2, [sp, #68]	; 0x44
   21382:	e57d      	b.n	20e80 <_dtoa_r+0x848>
   21384:	2239      	movs	r2, #57	; 0x39
   21386:	46b3      	mov	fp, r6
   21388:	703a      	strb	r2, [r7, #0]
   2138a:	4646      	mov	r6, r8
   2138c:	1c7d      	adds	r5, r7, #1
   2138e:	e4d4      	b.n	20d3a <_dtoa_r+0x702>
   21390:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
   21394:	2000      	movs	r0, #0
   21396:	491f      	ldr	r1, [pc, #124]	; (21414 <_dtoa_r+0xddc>)
   21398:	f7fa f9c4 	bl	1b724 <__aeabi_dsub>
   2139c:	4632      	mov	r2, r6
   2139e:	463b      	mov	r3, r7
   213a0:	f7fa fe04 	bl	1bfac <__aeabi_dcmpgt>
   213a4:	b910      	cbnz	r0, 213ac <_dtoa_r+0xd74>
   213a6:	f7ff ba52 	b.w	2084e <_dtoa_r+0x216>
   213aa:	4615      	mov	r5, r2
   213ac:	f815 3c01 	ldrb.w	r3, [r5, #-1]
   213b0:	2b30      	cmp	r3, #48	; 0x30
   213b2:	f105 32ff 	add.w	r2, r5, #4294967295
   213b6:	d0f8      	beq.n	213aa <_dtoa_r+0xd72>
   213b8:	e5ea      	b.n	20f90 <_dtoa_r+0x958>
   213ba:	4643      	mov	r3, r8
   213bc:	f8dd a048 	ldr.w	sl, [sp, #72]	; 0x48
   213c0:	46a0      	mov	r8, r4
   213c2:	461c      	mov	r4, r3
   213c4:	9b11      	ldr	r3, [sp, #68]	; 0x44
   213c6:	9304      	str	r3, [sp, #16]
   213c8:	f7ff baf1 	b.w	209ae <_dtoa_r+0x376>
   213cc:	f8dd a048 	ldr.w	sl, [sp, #72]	; 0x48
   213d0:	f8dd b04c 	ldr.w	fp, [sp, #76]	; 0x4c
   213d4:	4644      	mov	r4, r8
   213d6:	f7ff ba3a 	b.w	2084e <_dtoa_r+0x216>
   213da:	46b8      	mov	r8, r7
   213dc:	f7ff bbac 	b.w	20b38 <_dtoa_r+0x500>
   213e0:	9b00      	ldr	r3, [sp, #0]
   213e2:	2b39      	cmp	r3, #57	; 0x39
   213e4:	d0ce      	beq.n	21384 <_dtoa_r+0xd4c>
   213e6:	f1bb 0f00 	cmp.w	fp, #0
   213ea:	f73f aed4 	bgt.w	21196 <_dtoa_r+0xb5e>
   213ee:	e6d5      	b.n	2119c <_dtoa_r+0xb64>
   213f0:	f47f aed4 	bne.w	2119c <_dtoa_r+0xb64>
   213f4:	9b00      	ldr	r3, [sp, #0]
   213f6:	07da      	lsls	r2, r3, #31
   213f8:	f57f aed0 	bpl.w	2119c <_dtoa_r+0xb64>
   213fc:	e6c7      	b.n	2118e <_dtoa_r+0xb56>
   213fe:	bf00      	nop
   21400:	401c0000 	.word	0x401c0000
   21404:	40140000 	.word	0x40140000
   21408:	00024d38 	.word	0x00024d38
   2140c:	00024d10 	.word	0x00024d10
   21410:	40240000 	.word	0x40240000
   21414:	3fe00000 	.word	0x3fe00000
   21418:	4631      	mov	r1, r6
   2141a:	2300      	movs	r3, #0
   2141c:	220a      	movs	r2, #10
   2141e:	4620      	mov	r0, r4
   21420:	f000 fb90 	bl	21b44 <__multadd>
   21424:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   21426:	2b00      	cmp	r3, #0
   21428:	4606      	mov	r6, r0
   2142a:	dd0a      	ble.n	21442 <_dtoa_r+0xe0a>
   2142c:	9308      	str	r3, [sp, #32]
   2142e:	f7ff bbb9 	b.w	20ba4 <_dtoa_r+0x56c>
   21432:	9b02      	ldr	r3, [sp, #8]
   21434:	2b02      	cmp	r3, #2
   21436:	dc22      	bgt.n	2147e <_dtoa_r+0xe46>
   21438:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   2143a:	e44a      	b.n	20cd2 <_dtoa_r+0x69a>
   2143c:	f04f 0902 	mov.w	r9, #2
   21440:	e4fd      	b.n	20e3e <_dtoa_r+0x806>
   21442:	9b02      	ldr	r3, [sp, #8]
   21444:	2b02      	cmp	r3, #2
   21446:	dc1a      	bgt.n	2147e <_dtoa_r+0xe46>
   21448:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   2144a:	e7ef      	b.n	2142c <_dtoa_r+0xdf4>
   2144c:	2500      	movs	r5, #0
   2144e:	6465      	str	r5, [r4, #68]	; 0x44
   21450:	4629      	mov	r1, r5
   21452:	4620      	mov	r0, r4
   21454:	f000 fb46 	bl	21ae4 <_Balloc>
   21458:	f04f 33ff 	mov.w	r3, #4294967295
   2145c:	9308      	str	r3, [sp, #32]
   2145e:	930d      	str	r3, [sp, #52]	; 0x34
   21460:	2301      	movs	r3, #1
   21462:	9007      	str	r0, [sp, #28]
   21464:	46ab      	mov	fp, r5
   21466:	6420      	str	r0, [r4, #64]	; 0x40
   21468:	9309      	str	r3, [sp, #36]	; 0x24
   2146a:	f7ff b9f0 	b.w	2084e <_dtoa_r+0x216>
   2146e:	f43f ab7b 	beq.w	20b68 <_dtoa_r+0x530>
   21472:	f1c0 003c 	rsb	r0, r0, #60	; 0x3c
   21476:	e40b      	b.n	20c90 <_dtoa_r+0x658>
   21478:	2701      	movs	r7, #1
   2147a:	f7ff b9af 	b.w	207dc <_dtoa_r+0x1a4>
   2147e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   21480:	9308      	str	r3, [sp, #32]
   21482:	e5f8      	b.n	21076 <_dtoa_r+0xa3e>

00021484 <__sflush_r>:
   21484:	f9b1 300c 	ldrsh.w	r3, [r1, #12]
   21488:	b29a      	uxth	r2, r3
   2148a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   2148e:	460d      	mov	r5, r1
   21490:	0711      	lsls	r1, r2, #28
   21492:	4680      	mov	r8, r0
   21494:	d43a      	bmi.n	2150c <__sflush_r+0x88>
   21496:	686a      	ldr	r2, [r5, #4]
   21498:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
   2149c:	2a00      	cmp	r2, #0
   2149e:	81ab      	strh	r3, [r5, #12]
   214a0:	dd6f      	ble.n	21582 <__sflush_r+0xfe>
   214a2:	6aac      	ldr	r4, [r5, #40]	; 0x28
   214a4:	2c00      	cmp	r4, #0
   214a6:	d049      	beq.n	2153c <__sflush_r+0xb8>
   214a8:	2200      	movs	r2, #0
   214aa:	b29b      	uxth	r3, r3
   214ac:	f8d8 6000 	ldr.w	r6, [r8]
   214b0:	f8c8 2000 	str.w	r2, [r8]
   214b4:	f413 5280 	ands.w	r2, r3, #4096	; 0x1000
   214b8:	d067      	beq.n	2158a <__sflush_r+0x106>
   214ba:	6d2a      	ldr	r2, [r5, #80]	; 0x50
   214bc:	075f      	lsls	r7, r3, #29
   214be:	d505      	bpl.n	214cc <__sflush_r+0x48>
   214c0:	6869      	ldr	r1, [r5, #4]
   214c2:	6b2b      	ldr	r3, [r5, #48]	; 0x30
   214c4:	1a52      	subs	r2, r2, r1
   214c6:	b10b      	cbz	r3, 214cc <__sflush_r+0x48>
   214c8:	6beb      	ldr	r3, [r5, #60]	; 0x3c
   214ca:	1ad2      	subs	r2, r2, r3
   214cc:	2300      	movs	r3, #0
   214ce:	69e9      	ldr	r1, [r5, #28]
   214d0:	4640      	mov	r0, r8
   214d2:	47a0      	blx	r4
   214d4:	1c44      	adds	r4, r0, #1
   214d6:	d03c      	beq.n	21552 <__sflush_r+0xce>
   214d8:	f9b5 300c 	ldrsh.w	r3, [r5, #12]
   214dc:	692a      	ldr	r2, [r5, #16]
   214de:	602a      	str	r2, [r5, #0]
   214e0:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
   214e4:	2200      	movs	r2, #0
   214e6:	81ab      	strh	r3, [r5, #12]
   214e8:	04db      	lsls	r3, r3, #19
   214ea:	606a      	str	r2, [r5, #4]
   214ec:	d447      	bmi.n	2157e <__sflush_r+0xfa>
   214ee:	6b29      	ldr	r1, [r5, #48]	; 0x30
   214f0:	f8c8 6000 	str.w	r6, [r8]
   214f4:	b311      	cbz	r1, 2153c <__sflush_r+0xb8>
   214f6:	f105 0340 	add.w	r3, r5, #64	; 0x40
   214fa:	4299      	cmp	r1, r3
   214fc:	d002      	beq.n	21504 <__sflush_r+0x80>
   214fe:	4640      	mov	r0, r8
   21500:	f000 f95a 	bl	217b8 <_free_r>
   21504:	2000      	movs	r0, #0
   21506:	6328      	str	r0, [r5, #48]	; 0x30
   21508:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   2150c:	692e      	ldr	r6, [r5, #16]
   2150e:	b1ae      	cbz	r6, 2153c <__sflush_r+0xb8>
   21510:	682c      	ldr	r4, [r5, #0]
   21512:	602e      	str	r6, [r5, #0]
   21514:	0791      	lsls	r1, r2, #30
   21516:	bf0c      	ite	eq
   21518:	696b      	ldreq	r3, [r5, #20]
   2151a:	2300      	movne	r3, #0
   2151c:	1ba4      	subs	r4, r4, r6
   2151e:	60ab      	str	r3, [r5, #8]
   21520:	e00a      	b.n	21538 <__sflush_r+0xb4>
   21522:	4623      	mov	r3, r4
   21524:	4632      	mov	r2, r6
   21526:	6a6f      	ldr	r7, [r5, #36]	; 0x24
   21528:	69e9      	ldr	r1, [r5, #28]
   2152a:	4640      	mov	r0, r8
   2152c:	47b8      	blx	r7
   2152e:	2800      	cmp	r0, #0
   21530:	eba4 0400 	sub.w	r4, r4, r0
   21534:	4406      	add	r6, r0
   21536:	dd04      	ble.n	21542 <__sflush_r+0xbe>
   21538:	2c00      	cmp	r4, #0
   2153a:	dcf2      	bgt.n	21522 <__sflush_r+0x9e>
   2153c:	2000      	movs	r0, #0
   2153e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   21542:	89ab      	ldrh	r3, [r5, #12]
   21544:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   21548:	81ab      	strh	r3, [r5, #12]
   2154a:	f04f 30ff 	mov.w	r0, #4294967295
   2154e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   21552:	f8d8 4000 	ldr.w	r4, [r8]
   21556:	2c1d      	cmp	r4, #29
   21558:	d8f3      	bhi.n	21542 <__sflush_r+0xbe>
   2155a:	4b19      	ldr	r3, [pc, #100]	; (215c0 <__sflush_r+0x13c>)
   2155c:	40e3      	lsrs	r3, r4
   2155e:	43db      	mvns	r3, r3
   21560:	f013 0301 	ands.w	r3, r3, #1
   21564:	d1ed      	bne.n	21542 <__sflush_r+0xbe>
   21566:	f9b5 200c 	ldrsh.w	r2, [r5, #12]
   2156a:	606b      	str	r3, [r5, #4]
   2156c:	f422 6300 	bic.w	r3, r2, #2048	; 0x800
   21570:	6929      	ldr	r1, [r5, #16]
   21572:	81ab      	strh	r3, [r5, #12]
   21574:	04da      	lsls	r2, r3, #19
   21576:	6029      	str	r1, [r5, #0]
   21578:	d5b9      	bpl.n	214ee <__sflush_r+0x6a>
   2157a:	2c00      	cmp	r4, #0
   2157c:	d1b7      	bne.n	214ee <__sflush_r+0x6a>
   2157e:	6528      	str	r0, [r5, #80]	; 0x50
   21580:	e7b5      	b.n	214ee <__sflush_r+0x6a>
   21582:	6bea      	ldr	r2, [r5, #60]	; 0x3c
   21584:	2a00      	cmp	r2, #0
   21586:	dc8c      	bgt.n	214a2 <__sflush_r+0x1e>
   21588:	e7d8      	b.n	2153c <__sflush_r+0xb8>
   2158a:	2301      	movs	r3, #1
   2158c:	69e9      	ldr	r1, [r5, #28]
   2158e:	4640      	mov	r0, r8
   21590:	47a0      	blx	r4
   21592:	1c43      	adds	r3, r0, #1
   21594:	4602      	mov	r2, r0
   21596:	d002      	beq.n	2159e <__sflush_r+0x11a>
   21598:	89ab      	ldrh	r3, [r5, #12]
   2159a:	6aac      	ldr	r4, [r5, #40]	; 0x28
   2159c:	e78e      	b.n	214bc <__sflush_r+0x38>
   2159e:	f8d8 3000 	ldr.w	r3, [r8]
   215a2:	2b00      	cmp	r3, #0
   215a4:	d0f8      	beq.n	21598 <__sflush_r+0x114>
   215a6:	2b1d      	cmp	r3, #29
   215a8:	d001      	beq.n	215ae <__sflush_r+0x12a>
   215aa:	2b16      	cmp	r3, #22
   215ac:	d102      	bne.n	215b4 <__sflush_r+0x130>
   215ae:	f8c8 6000 	str.w	r6, [r8]
   215b2:	e7c3      	b.n	2153c <__sflush_r+0xb8>
   215b4:	89ab      	ldrh	r3, [r5, #12]
   215b6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   215ba:	81ab      	strh	r3, [r5, #12]
   215bc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   215c0:	20400001 	.word	0x20400001

000215c4 <_fflush_r>:
   215c4:	b538      	push	{r3, r4, r5, lr}
   215c6:	460d      	mov	r5, r1
   215c8:	4604      	mov	r4, r0
   215ca:	b108      	cbz	r0, 215d0 <_fflush_r+0xc>
   215cc:	6b83      	ldr	r3, [r0, #56]	; 0x38
   215ce:	b1bb      	cbz	r3, 21600 <_fflush_r+0x3c>
   215d0:	f9b5 000c 	ldrsh.w	r0, [r5, #12]
   215d4:	b188      	cbz	r0, 215fa <_fflush_r+0x36>
   215d6:	6e6b      	ldr	r3, [r5, #100]	; 0x64
   215d8:	07db      	lsls	r3, r3, #31
   215da:	d401      	bmi.n	215e0 <_fflush_r+0x1c>
   215dc:	0581      	lsls	r1, r0, #22
   215de:	d517      	bpl.n	21610 <_fflush_r+0x4c>
   215e0:	4620      	mov	r0, r4
   215e2:	4629      	mov	r1, r5
   215e4:	f7ff ff4e 	bl	21484 <__sflush_r>
   215e8:	6e6b      	ldr	r3, [r5, #100]	; 0x64
   215ea:	07da      	lsls	r2, r3, #31
   215ec:	4604      	mov	r4, r0
   215ee:	d402      	bmi.n	215f6 <_fflush_r+0x32>
   215f0:	89ab      	ldrh	r3, [r5, #12]
   215f2:	059b      	lsls	r3, r3, #22
   215f4:	d507      	bpl.n	21606 <_fflush_r+0x42>
   215f6:	4620      	mov	r0, r4
   215f8:	bd38      	pop	{r3, r4, r5, pc}
   215fa:	4604      	mov	r4, r0
   215fc:	4620      	mov	r0, r4
   215fe:	bd38      	pop	{r3, r4, r5, pc}
   21600:	f000 f838 	bl	21674 <__sinit>
   21604:	e7e4      	b.n	215d0 <_fflush_r+0xc>
   21606:	6da8      	ldr	r0, [r5, #88]	; 0x58
   21608:	f7fc fa9e 	bl	1db48 <__retarget_lock_release_recursive>
   2160c:	4620      	mov	r0, r4
   2160e:	bd38      	pop	{r3, r4, r5, pc}
   21610:	6da8      	ldr	r0, [r5, #88]	; 0x58
   21612:	f7fc fa97 	bl	1db44 <__retarget_lock_acquire_recursive>
   21616:	e7e3      	b.n	215e0 <_fflush_r+0x1c>

00021618 <_cleanup_r>:
   21618:	4901      	ldr	r1, [pc, #4]	; (21620 <_cleanup_r+0x8>)
   2161a:	f000 b9b3 	b.w	21984 <_fwalk_reent>
   2161e:	bf00      	nop
   21620:	000223a9 	.word	0x000223a9

00021624 <std.isra.0>:
   21624:	b510      	push	{r4, lr}
   21626:	2300      	movs	r3, #0
   21628:	4604      	mov	r4, r0
   2162a:	8181      	strh	r1, [r0, #12]
   2162c:	81c2      	strh	r2, [r0, #14]
   2162e:	6003      	str	r3, [r0, #0]
   21630:	6043      	str	r3, [r0, #4]
   21632:	6083      	str	r3, [r0, #8]
   21634:	6643      	str	r3, [r0, #100]	; 0x64
   21636:	6103      	str	r3, [r0, #16]
   21638:	6143      	str	r3, [r0, #20]
   2163a:	6183      	str	r3, [r0, #24]
   2163c:	4619      	mov	r1, r3
   2163e:	2208      	movs	r2, #8
   21640:	305c      	adds	r0, #92	; 0x5c
   21642:	f7fc fedb 	bl	1e3fc <memset>
   21646:	4807      	ldr	r0, [pc, #28]	; (21664 <std.isra.0+0x40>)
   21648:	4907      	ldr	r1, [pc, #28]	; (21668 <std.isra.0+0x44>)
   2164a:	4a08      	ldr	r2, [pc, #32]	; (2166c <std.isra.0+0x48>)
   2164c:	4b08      	ldr	r3, [pc, #32]	; (21670 <std.isra.0+0x4c>)
   2164e:	6220      	str	r0, [r4, #32]
   21650:	61e4      	str	r4, [r4, #28]
   21652:	6261      	str	r1, [r4, #36]	; 0x24
   21654:	62a2      	str	r2, [r4, #40]	; 0x28
   21656:	62e3      	str	r3, [r4, #44]	; 0x2c
   21658:	f104 0058 	add.w	r0, r4, #88	; 0x58
   2165c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   21660:	f7fc ba6c 	b.w	1db3c <__retarget_lock_init_recursive>
   21664:	000220dd 	.word	0x000220dd
   21668:	00022101 	.word	0x00022101
   2166c:	0002213d 	.word	0x0002213d
   21670:	0002215d 	.word	0x0002215d

00021674 <__sinit>:
   21674:	b510      	push	{r4, lr}
   21676:	4604      	mov	r4, r0
   21678:	4812      	ldr	r0, [pc, #72]	; (216c4 <__sinit+0x50>)
   2167a:	f7fc fa63 	bl	1db44 <__retarget_lock_acquire_recursive>
   2167e:	6ba2      	ldr	r2, [r4, #56]	; 0x38
   21680:	b9d2      	cbnz	r2, 216b8 <__sinit+0x44>
   21682:	f504 733b 	add.w	r3, r4, #748	; 0x2ec
   21686:	4810      	ldr	r0, [pc, #64]	; (216c8 <__sinit+0x54>)
   21688:	f8c4 32e8 	str.w	r3, [r4, #744]	; 0x2e8
   2168c:	2103      	movs	r1, #3
   2168e:	f8c4 22e0 	str.w	r2, [r4, #736]	; 0x2e0
   21692:	63e0      	str	r0, [r4, #60]	; 0x3c
   21694:	f8c4 12e4 	str.w	r1, [r4, #740]	; 0x2e4
   21698:	6860      	ldr	r0, [r4, #4]
   2169a:	2104      	movs	r1, #4
   2169c:	f7ff ffc2 	bl	21624 <std.isra.0>
   216a0:	2201      	movs	r2, #1
   216a2:	2109      	movs	r1, #9
   216a4:	68a0      	ldr	r0, [r4, #8]
   216a6:	f7ff ffbd 	bl	21624 <std.isra.0>
   216aa:	2202      	movs	r2, #2
   216ac:	2112      	movs	r1, #18
   216ae:	68e0      	ldr	r0, [r4, #12]
   216b0:	f7ff ffb8 	bl	21624 <std.isra.0>
   216b4:	2301      	movs	r3, #1
   216b6:	63a3      	str	r3, [r4, #56]	; 0x38
   216b8:	4802      	ldr	r0, [pc, #8]	; (216c4 <__sinit+0x50>)
   216ba:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   216be:	f7fc ba43 	b.w	1db48 <__retarget_lock_release_recursive>
   216c2:	bf00      	nop
   216c4:	20002378 	.word	0x20002378
   216c8:	00021619 	.word	0x00021619

000216cc <__sfp_lock_acquire>:
   216cc:	4801      	ldr	r0, [pc, #4]	; (216d4 <__sfp_lock_acquire+0x8>)
   216ce:	f7fc ba39 	b.w	1db44 <__retarget_lock_acquire_recursive>
   216d2:	bf00      	nop
   216d4:	2000238c 	.word	0x2000238c

000216d8 <__sfp_lock_release>:
   216d8:	4801      	ldr	r0, [pc, #4]	; (216e0 <__sfp_lock_release+0x8>)
   216da:	f7fc ba35 	b.w	1db48 <__retarget_lock_release_recursive>
   216de:	bf00      	nop
   216e0:	2000238c 	.word	0x2000238c

000216e4 <__libc_fini_array>:
   216e4:	b538      	push	{r3, r4, r5, lr}
   216e6:	4c0a      	ldr	r4, [pc, #40]	; (21710 <__libc_fini_array+0x2c>)
   216e8:	4d0a      	ldr	r5, [pc, #40]	; (21714 <__libc_fini_array+0x30>)
   216ea:	1b64      	subs	r4, r4, r5
   216ec:	10a4      	asrs	r4, r4, #2
   216ee:	d00a      	beq.n	21706 <__libc_fini_array+0x22>
   216f0:	f104 4380 	add.w	r3, r4, #1073741824	; 0x40000000
   216f4:	3b01      	subs	r3, #1
   216f6:	eb05 0583 	add.w	r5, r5, r3, lsl #2
   216fa:	3c01      	subs	r4, #1
   216fc:	f855 3904 	ldr.w	r3, [r5], #-4
   21700:	4798      	blx	r3
   21702:	2c00      	cmp	r4, #0
   21704:	d1f9      	bne.n	216fa <__libc_fini_array+0x16>
   21706:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   2170a:	f001 b8b3 	b.w	22874 <_fini>
   2170e:	bf00      	nop
   21710:	000228bc 	.word	0x000228bc
   21714:	000228b8 	.word	0x000228b8

00021718 <_malloc_trim_r>:
   21718:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   2171a:	4f24      	ldr	r7, [pc, #144]	; (217ac <_malloc_trim_r+0x94>)
   2171c:	460c      	mov	r4, r1
   2171e:	4606      	mov	r6, r0
   21720:	f7fc feba 	bl	1e498 <__malloc_lock>
   21724:	68bb      	ldr	r3, [r7, #8]
   21726:	685d      	ldr	r5, [r3, #4]
   21728:	f5c4 617e 	rsb	r1, r4, #4064	; 0xfe0
   2172c:	310f      	adds	r1, #15
   2172e:	f025 0503 	bic.w	r5, r5, #3
   21732:	4429      	add	r1, r5
   21734:	f421 617f 	bic.w	r1, r1, #4080	; 0xff0
   21738:	f021 010f 	bic.w	r1, r1, #15
   2173c:	f5a1 5480 	sub.w	r4, r1, #4096	; 0x1000
   21740:	f5b4 5f80 	cmp.w	r4, #4096	; 0x1000
   21744:	db07      	blt.n	21756 <_malloc_trim_r+0x3e>
   21746:	2100      	movs	r1, #0
   21748:	4630      	mov	r0, r6
   2174a:	f7fd f897 	bl	1e87c <_sbrk_r>
   2174e:	68bb      	ldr	r3, [r7, #8]
   21750:	442b      	add	r3, r5
   21752:	4298      	cmp	r0, r3
   21754:	d004      	beq.n	21760 <_malloc_trim_r+0x48>
   21756:	4630      	mov	r0, r6
   21758:	f7fc fea4 	bl	1e4a4 <__malloc_unlock>
   2175c:	2000      	movs	r0, #0
   2175e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   21760:	4261      	negs	r1, r4
   21762:	4630      	mov	r0, r6
   21764:	f7fd f88a 	bl	1e87c <_sbrk_r>
   21768:	3001      	adds	r0, #1
   2176a:	d00d      	beq.n	21788 <_malloc_trim_r+0x70>
   2176c:	4b10      	ldr	r3, [pc, #64]	; (217b0 <_malloc_trim_r+0x98>)
   2176e:	68ba      	ldr	r2, [r7, #8]
   21770:	6819      	ldr	r1, [r3, #0]
   21772:	1b2d      	subs	r5, r5, r4
   21774:	f045 0501 	orr.w	r5, r5, #1
   21778:	4630      	mov	r0, r6
   2177a:	1b09      	subs	r1, r1, r4
   2177c:	6055      	str	r5, [r2, #4]
   2177e:	6019      	str	r1, [r3, #0]
   21780:	f7fc fe90 	bl	1e4a4 <__malloc_unlock>
   21784:	2001      	movs	r0, #1
   21786:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   21788:	2100      	movs	r1, #0
   2178a:	4630      	mov	r0, r6
   2178c:	f7fd f876 	bl	1e87c <_sbrk_r>
   21790:	68ba      	ldr	r2, [r7, #8]
   21792:	1a83      	subs	r3, r0, r2
   21794:	2b0f      	cmp	r3, #15
   21796:	ddde      	ble.n	21756 <_malloc_trim_r+0x3e>
   21798:	4c06      	ldr	r4, [pc, #24]	; (217b4 <_malloc_trim_r+0x9c>)
   2179a:	4905      	ldr	r1, [pc, #20]	; (217b0 <_malloc_trim_r+0x98>)
   2179c:	6824      	ldr	r4, [r4, #0]
   2179e:	f043 0301 	orr.w	r3, r3, #1
   217a2:	1b00      	subs	r0, r0, r4
   217a4:	6053      	str	r3, [r2, #4]
   217a6:	6008      	str	r0, [r1, #0]
   217a8:	e7d5      	b.n	21756 <_malloc_trim_r+0x3e>
   217aa:	bf00      	nop
   217ac:	20000694 	.word	0x20000694
   217b0:	20002294 	.word	0x20002294
   217b4:	20000a9c 	.word	0x20000a9c

000217b8 <_free_r>:
   217b8:	2900      	cmp	r1, #0
   217ba:	d044      	beq.n	21846 <_free_r+0x8e>
   217bc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   217c0:	460d      	mov	r5, r1
   217c2:	4680      	mov	r8, r0
   217c4:	f7fc fe68 	bl	1e498 <__malloc_lock>
   217c8:	f855 7c04 	ldr.w	r7, [r5, #-4]
   217cc:	4969      	ldr	r1, [pc, #420]	; (21974 <_free_r+0x1bc>)
   217ce:	f027 0301 	bic.w	r3, r7, #1
   217d2:	f1a5 0408 	sub.w	r4, r5, #8
   217d6:	18e2      	adds	r2, r4, r3
   217d8:	688e      	ldr	r6, [r1, #8]
   217da:	6850      	ldr	r0, [r2, #4]
   217dc:	42b2      	cmp	r2, r6
   217de:	f020 0003 	bic.w	r0, r0, #3
   217e2:	d05e      	beq.n	218a2 <_free_r+0xea>
   217e4:	07fe      	lsls	r6, r7, #31
   217e6:	6050      	str	r0, [r2, #4]
   217e8:	d40b      	bmi.n	21802 <_free_r+0x4a>
   217ea:	f855 7c08 	ldr.w	r7, [r5, #-8]
   217ee:	1be4      	subs	r4, r4, r7
   217f0:	f101 0e08 	add.w	lr, r1, #8
   217f4:	68a5      	ldr	r5, [r4, #8]
   217f6:	4575      	cmp	r5, lr
   217f8:	443b      	add	r3, r7
   217fa:	d06d      	beq.n	218d8 <_free_r+0x120>
   217fc:	68e7      	ldr	r7, [r4, #12]
   217fe:	60ef      	str	r7, [r5, #12]
   21800:	60bd      	str	r5, [r7, #8]
   21802:	1815      	adds	r5, r2, r0
   21804:	686d      	ldr	r5, [r5, #4]
   21806:	07ed      	lsls	r5, r5, #31
   21808:	d53e      	bpl.n	21888 <_free_r+0xd0>
   2180a:	f043 0201 	orr.w	r2, r3, #1
   2180e:	6062      	str	r2, [r4, #4]
   21810:	50e3      	str	r3, [r4, r3]
   21812:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
   21816:	d217      	bcs.n	21848 <_free_r+0x90>
   21818:	08db      	lsrs	r3, r3, #3
   2181a:	1c58      	adds	r0, r3, #1
   2181c:	109a      	asrs	r2, r3, #2
   2181e:	684d      	ldr	r5, [r1, #4]
   21820:	f851 7030 	ldr.w	r7, [r1, r0, lsl #3]
   21824:	60a7      	str	r7, [r4, #8]
   21826:	2301      	movs	r3, #1
   21828:	4093      	lsls	r3, r2
   2182a:	eb01 02c0 	add.w	r2, r1, r0, lsl #3
   2182e:	432b      	orrs	r3, r5
   21830:	3a08      	subs	r2, #8
   21832:	60e2      	str	r2, [r4, #12]
   21834:	604b      	str	r3, [r1, #4]
   21836:	f841 4030 	str.w	r4, [r1, r0, lsl #3]
   2183a:	60fc      	str	r4, [r7, #12]
   2183c:	4640      	mov	r0, r8
   2183e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   21842:	f7fc be2f 	b.w	1e4a4 <__malloc_unlock>
   21846:	4770      	bx	lr
   21848:	0a5a      	lsrs	r2, r3, #9
   2184a:	2a04      	cmp	r2, #4
   2184c:	d852      	bhi.n	218f4 <_free_r+0x13c>
   2184e:	099a      	lsrs	r2, r3, #6
   21850:	f102 0739 	add.w	r7, r2, #57	; 0x39
   21854:	00ff      	lsls	r7, r7, #3
   21856:	f102 0538 	add.w	r5, r2, #56	; 0x38
   2185a:	19c8      	adds	r0, r1, r7
   2185c:	59ca      	ldr	r2, [r1, r7]
   2185e:	3808      	subs	r0, #8
   21860:	4290      	cmp	r0, r2
   21862:	d04f      	beq.n	21904 <_free_r+0x14c>
   21864:	6851      	ldr	r1, [r2, #4]
   21866:	f021 0103 	bic.w	r1, r1, #3
   2186a:	428b      	cmp	r3, r1
   2186c:	d232      	bcs.n	218d4 <_free_r+0x11c>
   2186e:	6892      	ldr	r2, [r2, #8]
   21870:	4290      	cmp	r0, r2
   21872:	d1f7      	bne.n	21864 <_free_r+0xac>
   21874:	68c3      	ldr	r3, [r0, #12]
   21876:	60a0      	str	r0, [r4, #8]
   21878:	60e3      	str	r3, [r4, #12]
   2187a:	609c      	str	r4, [r3, #8]
   2187c:	60c4      	str	r4, [r0, #12]
   2187e:	4640      	mov	r0, r8
   21880:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   21884:	f7fc be0e 	b.w	1e4a4 <__malloc_unlock>
   21888:	6895      	ldr	r5, [r2, #8]
   2188a:	4f3b      	ldr	r7, [pc, #236]	; (21978 <_free_r+0x1c0>)
   2188c:	42bd      	cmp	r5, r7
   2188e:	4403      	add	r3, r0
   21890:	d040      	beq.n	21914 <_free_r+0x15c>
   21892:	68d0      	ldr	r0, [r2, #12]
   21894:	60e8      	str	r0, [r5, #12]
   21896:	f043 0201 	orr.w	r2, r3, #1
   2189a:	6085      	str	r5, [r0, #8]
   2189c:	6062      	str	r2, [r4, #4]
   2189e:	50e3      	str	r3, [r4, r3]
   218a0:	e7b7      	b.n	21812 <_free_r+0x5a>
   218a2:	07ff      	lsls	r7, r7, #31
   218a4:	4403      	add	r3, r0
   218a6:	d407      	bmi.n	218b8 <_free_r+0x100>
   218a8:	f855 2c08 	ldr.w	r2, [r5, #-8]
   218ac:	1aa4      	subs	r4, r4, r2
   218ae:	4413      	add	r3, r2
   218b0:	68a0      	ldr	r0, [r4, #8]
   218b2:	68e2      	ldr	r2, [r4, #12]
   218b4:	60c2      	str	r2, [r0, #12]
   218b6:	6090      	str	r0, [r2, #8]
   218b8:	4a30      	ldr	r2, [pc, #192]	; (2197c <_free_r+0x1c4>)
   218ba:	6812      	ldr	r2, [r2, #0]
   218bc:	f043 0001 	orr.w	r0, r3, #1
   218c0:	4293      	cmp	r3, r2
   218c2:	6060      	str	r0, [r4, #4]
   218c4:	608c      	str	r4, [r1, #8]
   218c6:	d3b9      	bcc.n	2183c <_free_r+0x84>
   218c8:	4b2d      	ldr	r3, [pc, #180]	; (21980 <_free_r+0x1c8>)
   218ca:	4640      	mov	r0, r8
   218cc:	6819      	ldr	r1, [r3, #0]
   218ce:	f7ff ff23 	bl	21718 <_malloc_trim_r>
   218d2:	e7b3      	b.n	2183c <_free_r+0x84>
   218d4:	4610      	mov	r0, r2
   218d6:	e7cd      	b.n	21874 <_free_r+0xbc>
   218d8:	1811      	adds	r1, r2, r0
   218da:	6849      	ldr	r1, [r1, #4]
   218dc:	07c9      	lsls	r1, r1, #31
   218de:	d444      	bmi.n	2196a <_free_r+0x1b2>
   218e0:	6891      	ldr	r1, [r2, #8]
   218e2:	68d2      	ldr	r2, [r2, #12]
   218e4:	60ca      	str	r2, [r1, #12]
   218e6:	4403      	add	r3, r0
   218e8:	f043 0001 	orr.w	r0, r3, #1
   218ec:	6091      	str	r1, [r2, #8]
   218ee:	6060      	str	r0, [r4, #4]
   218f0:	50e3      	str	r3, [r4, r3]
   218f2:	e7a3      	b.n	2183c <_free_r+0x84>
   218f4:	2a14      	cmp	r2, #20
   218f6:	d816      	bhi.n	21926 <_free_r+0x16e>
   218f8:	f102 075c 	add.w	r7, r2, #92	; 0x5c
   218fc:	00ff      	lsls	r7, r7, #3
   218fe:	f102 055b 	add.w	r5, r2, #91	; 0x5b
   21902:	e7aa      	b.n	2185a <_free_r+0xa2>
   21904:	10aa      	asrs	r2, r5, #2
   21906:	2301      	movs	r3, #1
   21908:	684d      	ldr	r5, [r1, #4]
   2190a:	4093      	lsls	r3, r2
   2190c:	432b      	orrs	r3, r5
   2190e:	604b      	str	r3, [r1, #4]
   21910:	4603      	mov	r3, r0
   21912:	e7b0      	b.n	21876 <_free_r+0xbe>
   21914:	f043 0201 	orr.w	r2, r3, #1
   21918:	614c      	str	r4, [r1, #20]
   2191a:	610c      	str	r4, [r1, #16]
   2191c:	60e5      	str	r5, [r4, #12]
   2191e:	60a5      	str	r5, [r4, #8]
   21920:	6062      	str	r2, [r4, #4]
   21922:	50e3      	str	r3, [r4, r3]
   21924:	e78a      	b.n	2183c <_free_r+0x84>
   21926:	2a54      	cmp	r2, #84	; 0x54
   21928:	d806      	bhi.n	21938 <_free_r+0x180>
   2192a:	0b1a      	lsrs	r2, r3, #12
   2192c:	f102 076f 	add.w	r7, r2, #111	; 0x6f
   21930:	00ff      	lsls	r7, r7, #3
   21932:	f102 056e 	add.w	r5, r2, #110	; 0x6e
   21936:	e790      	b.n	2185a <_free_r+0xa2>
   21938:	f5b2 7faa 	cmp.w	r2, #340	; 0x154
   2193c:	d806      	bhi.n	2194c <_free_r+0x194>
   2193e:	0bda      	lsrs	r2, r3, #15
   21940:	f102 0778 	add.w	r7, r2, #120	; 0x78
   21944:	00ff      	lsls	r7, r7, #3
   21946:	f102 0577 	add.w	r5, r2, #119	; 0x77
   2194a:	e786      	b.n	2185a <_free_r+0xa2>
   2194c:	f240 5054 	movw	r0, #1364	; 0x554
   21950:	4282      	cmp	r2, r0
   21952:	d806      	bhi.n	21962 <_free_r+0x1aa>
   21954:	0c9a      	lsrs	r2, r3, #18
   21956:	f102 077d 	add.w	r7, r2, #125	; 0x7d
   2195a:	00ff      	lsls	r7, r7, #3
   2195c:	f102 057c 	add.w	r5, r2, #124	; 0x7c
   21960:	e77b      	b.n	2185a <_free_r+0xa2>
   21962:	f44f 777e 	mov.w	r7, #1016	; 0x3f8
   21966:	257e      	movs	r5, #126	; 0x7e
   21968:	e777      	b.n	2185a <_free_r+0xa2>
   2196a:	f043 0101 	orr.w	r1, r3, #1
   2196e:	6061      	str	r1, [r4, #4]
   21970:	6013      	str	r3, [r2, #0]
   21972:	e763      	b.n	2183c <_free_r+0x84>
   21974:	20000694 	.word	0x20000694
   21978:	2000069c 	.word	0x2000069c
   2197c:	20000aa0 	.word	0x20000aa0
   21980:	200022c4 	.word	0x200022c4

00021984 <_fwalk_reent>:
   21984:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   21988:	f510 7738 	adds.w	r7, r0, #736	; 0x2e0
   2198c:	d01f      	beq.n	219ce <_fwalk_reent+0x4a>
   2198e:	4688      	mov	r8, r1
   21990:	4606      	mov	r6, r0
   21992:	f04f 0900 	mov.w	r9, #0
   21996:	687d      	ldr	r5, [r7, #4]
   21998:	68bc      	ldr	r4, [r7, #8]
   2199a:	3d01      	subs	r5, #1
   2199c:	d411      	bmi.n	219c2 <_fwalk_reent+0x3e>
   2199e:	89a3      	ldrh	r3, [r4, #12]
   219a0:	2b01      	cmp	r3, #1
   219a2:	f105 35ff 	add.w	r5, r5, #4294967295
   219a6:	d908      	bls.n	219ba <_fwalk_reent+0x36>
   219a8:	f9b4 300e 	ldrsh.w	r3, [r4, #14]
   219ac:	3301      	adds	r3, #1
   219ae:	4621      	mov	r1, r4
   219b0:	4630      	mov	r0, r6
   219b2:	d002      	beq.n	219ba <_fwalk_reent+0x36>
   219b4:	47c0      	blx	r8
   219b6:	ea49 0900 	orr.w	r9, r9, r0
   219ba:	1c6b      	adds	r3, r5, #1
   219bc:	f104 0468 	add.w	r4, r4, #104	; 0x68
   219c0:	d1ed      	bne.n	2199e <_fwalk_reent+0x1a>
   219c2:	683f      	ldr	r7, [r7, #0]
   219c4:	2f00      	cmp	r7, #0
   219c6:	d1e6      	bne.n	21996 <_fwalk_reent+0x12>
   219c8:	4648      	mov	r0, r9
   219ca:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   219ce:	46b9      	mov	r9, r7
   219d0:	4648      	mov	r0, r9
   219d2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   219d6:	bf00      	nop

000219d8 <_localeconv_r>:
   219d8:	4a04      	ldr	r2, [pc, #16]	; (219ec <_localeconv_r+0x14>)
   219da:	4b05      	ldr	r3, [pc, #20]	; (219f0 <_localeconv_r+0x18>)
   219dc:	6812      	ldr	r2, [r2, #0]
   219de:	6b50      	ldr	r0, [r2, #52]	; 0x34
   219e0:	2800      	cmp	r0, #0
   219e2:	bf08      	it	eq
   219e4:	4618      	moveq	r0, r3
   219e6:	30f0      	adds	r0, #240	; 0xf0
   219e8:	4770      	bx	lr
   219ea:	bf00      	nop
   219ec:	200000f8 	.word	0x200000f8
   219f0:	20000528 	.word	0x20000528

000219f4 <__swhatbuf_r>:
   219f4:	b570      	push	{r4, r5, r6, lr}
   219f6:	460c      	mov	r4, r1
   219f8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
   219fc:	2900      	cmp	r1, #0
   219fe:	b090      	sub	sp, #64	; 0x40
   21a00:	4615      	mov	r5, r2
   21a02:	461e      	mov	r6, r3
   21a04:	db14      	blt.n	21a30 <__swhatbuf_r+0x3c>
   21a06:	aa01      	add	r2, sp, #4
   21a08:	f000 fd30 	bl	2246c <_fstat_r>
   21a0c:	2800      	cmp	r0, #0
   21a0e:	db0f      	blt.n	21a30 <__swhatbuf_r+0x3c>
   21a10:	9a02      	ldr	r2, [sp, #8]
   21a12:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
   21a16:	f5a2 5200 	sub.w	r2, r2, #8192	; 0x2000
   21a1a:	fab2 f282 	clz	r2, r2
   21a1e:	0952      	lsrs	r2, r2, #5
   21a20:	f44f 6380 	mov.w	r3, #1024	; 0x400
   21a24:	f44f 6000 	mov.w	r0, #2048	; 0x800
   21a28:	6032      	str	r2, [r6, #0]
   21a2a:	602b      	str	r3, [r5, #0]
   21a2c:	b010      	add	sp, #64	; 0x40
   21a2e:	bd70      	pop	{r4, r5, r6, pc}
   21a30:	89a2      	ldrh	r2, [r4, #12]
   21a32:	2300      	movs	r3, #0
   21a34:	f012 0080 	ands.w	r0, r2, #128	; 0x80
   21a38:	6033      	str	r3, [r6, #0]
   21a3a:	d004      	beq.n	21a46 <__swhatbuf_r+0x52>
   21a3c:	2240      	movs	r2, #64	; 0x40
   21a3e:	4618      	mov	r0, r3
   21a40:	602a      	str	r2, [r5, #0]
   21a42:	b010      	add	sp, #64	; 0x40
   21a44:	bd70      	pop	{r4, r5, r6, pc}
   21a46:	f44f 6380 	mov.w	r3, #1024	; 0x400
   21a4a:	602b      	str	r3, [r5, #0]
   21a4c:	b010      	add	sp, #64	; 0x40
   21a4e:	bd70      	pop	{r4, r5, r6, pc}

00021a50 <__smakebuf_r>:
   21a50:	898a      	ldrh	r2, [r1, #12]
   21a52:	0792      	lsls	r2, r2, #30
   21a54:	460b      	mov	r3, r1
   21a56:	d506      	bpl.n	21a66 <__smakebuf_r+0x16>
   21a58:	f101 0243 	add.w	r2, r1, #67	; 0x43
   21a5c:	2101      	movs	r1, #1
   21a5e:	601a      	str	r2, [r3, #0]
   21a60:	611a      	str	r2, [r3, #16]
   21a62:	6159      	str	r1, [r3, #20]
   21a64:	4770      	bx	lr
   21a66:	b5f0      	push	{r4, r5, r6, r7, lr}
   21a68:	b083      	sub	sp, #12
   21a6a:	ab01      	add	r3, sp, #4
   21a6c:	466a      	mov	r2, sp
   21a6e:	460c      	mov	r4, r1
   21a70:	4606      	mov	r6, r0
   21a72:	f7ff ffbf 	bl	219f4 <__swhatbuf_r>
   21a76:	9900      	ldr	r1, [sp, #0]
   21a78:	4605      	mov	r5, r0
   21a7a:	4630      	mov	r0, r6
   21a7c:	f7fc f876 	bl	1db6c <_malloc_r>
   21a80:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   21a84:	b1d8      	cbz	r0, 21abe <__smakebuf_r+0x6e>
   21a86:	9a01      	ldr	r2, [sp, #4]
   21a88:	4f15      	ldr	r7, [pc, #84]	; (21ae0 <__smakebuf_r+0x90>)
   21a8a:	9900      	ldr	r1, [sp, #0]
   21a8c:	63f7      	str	r7, [r6, #60]	; 0x3c
   21a8e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
   21a92:	81a3      	strh	r3, [r4, #12]
   21a94:	6020      	str	r0, [r4, #0]
   21a96:	6120      	str	r0, [r4, #16]
   21a98:	6161      	str	r1, [r4, #20]
   21a9a:	b91a      	cbnz	r2, 21aa4 <__smakebuf_r+0x54>
   21a9c:	432b      	orrs	r3, r5
   21a9e:	81a3      	strh	r3, [r4, #12]
   21aa0:	b003      	add	sp, #12
   21aa2:	bdf0      	pop	{r4, r5, r6, r7, pc}
   21aa4:	4630      	mov	r0, r6
   21aa6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
   21aaa:	f000 fcf3 	bl	22494 <_isatty_r>
   21aae:	b1a0      	cbz	r0, 21ada <__smakebuf_r+0x8a>
   21ab0:	89a3      	ldrh	r3, [r4, #12]
   21ab2:	f023 0303 	bic.w	r3, r3, #3
   21ab6:	f043 0301 	orr.w	r3, r3, #1
   21aba:	b21b      	sxth	r3, r3
   21abc:	e7ee      	b.n	21a9c <__smakebuf_r+0x4c>
   21abe:	059a      	lsls	r2, r3, #22
   21ac0:	d4ee      	bmi.n	21aa0 <__smakebuf_r+0x50>
   21ac2:	f023 0303 	bic.w	r3, r3, #3
   21ac6:	f104 0243 	add.w	r2, r4, #67	; 0x43
   21aca:	f043 0302 	orr.w	r3, r3, #2
   21ace:	2101      	movs	r1, #1
   21ad0:	81a3      	strh	r3, [r4, #12]
   21ad2:	6022      	str	r2, [r4, #0]
   21ad4:	6122      	str	r2, [r4, #16]
   21ad6:	6161      	str	r1, [r4, #20]
   21ad8:	e7e2      	b.n	21aa0 <__smakebuf_r+0x50>
   21ada:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   21ade:	e7dd      	b.n	21a9c <__smakebuf_r+0x4c>
   21ae0:	00021619 	.word	0x00021619

00021ae4 <_Balloc>:
   21ae4:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
   21ae6:	b570      	push	{r4, r5, r6, lr}
   21ae8:	4605      	mov	r5, r0
   21aea:	460c      	mov	r4, r1
   21aec:	b14b      	cbz	r3, 21b02 <_Balloc+0x1e>
   21aee:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
   21af2:	b180      	cbz	r0, 21b16 <_Balloc+0x32>
   21af4:	6802      	ldr	r2, [r0, #0]
   21af6:	f843 2024 	str.w	r2, [r3, r4, lsl #2]
   21afa:	2300      	movs	r3, #0
   21afc:	6103      	str	r3, [r0, #16]
   21afe:	60c3      	str	r3, [r0, #12]
   21b00:	bd70      	pop	{r4, r5, r6, pc}
   21b02:	2221      	movs	r2, #33	; 0x21
   21b04:	2104      	movs	r1, #4
   21b06:	f000 fc0d 	bl	22324 <_calloc_r>
   21b0a:	64e8      	str	r0, [r5, #76]	; 0x4c
   21b0c:	4603      	mov	r3, r0
   21b0e:	2800      	cmp	r0, #0
   21b10:	d1ed      	bne.n	21aee <_Balloc+0xa>
   21b12:	2000      	movs	r0, #0
   21b14:	bd70      	pop	{r4, r5, r6, pc}
   21b16:	2101      	movs	r1, #1
   21b18:	fa01 f604 	lsl.w	r6, r1, r4
   21b1c:	1d72      	adds	r2, r6, #5
   21b1e:	4628      	mov	r0, r5
   21b20:	0092      	lsls	r2, r2, #2
   21b22:	f000 fbff 	bl	22324 <_calloc_r>
   21b26:	2800      	cmp	r0, #0
   21b28:	d0f3      	beq.n	21b12 <_Balloc+0x2e>
   21b2a:	6044      	str	r4, [r0, #4]
   21b2c:	6086      	str	r6, [r0, #8]
   21b2e:	e7e4      	b.n	21afa <_Balloc+0x16>

00021b30 <_Bfree>:
   21b30:	b131      	cbz	r1, 21b40 <_Bfree+0x10>
   21b32:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
   21b34:	684a      	ldr	r2, [r1, #4]
   21b36:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
   21b3a:	6008      	str	r0, [r1, #0]
   21b3c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
   21b40:	4770      	bx	lr
   21b42:	bf00      	nop

00021b44 <__multadd>:
   21b44:	b5f0      	push	{r4, r5, r6, r7, lr}
   21b46:	690c      	ldr	r4, [r1, #16]
   21b48:	b083      	sub	sp, #12
   21b4a:	460d      	mov	r5, r1
   21b4c:	4606      	mov	r6, r0
   21b4e:	f101 0e14 	add.w	lr, r1, #20
   21b52:	2700      	movs	r7, #0
   21b54:	f8de 0000 	ldr.w	r0, [lr]
   21b58:	b281      	uxth	r1, r0
   21b5a:	fb02 3301 	mla	r3, r2, r1, r3
   21b5e:	0c01      	lsrs	r1, r0, #16
   21b60:	0c18      	lsrs	r0, r3, #16
   21b62:	fb02 0101 	mla	r1, r2, r1, r0
   21b66:	b29b      	uxth	r3, r3
   21b68:	3701      	adds	r7, #1
   21b6a:	eb03 4301 	add.w	r3, r3, r1, lsl #16
   21b6e:	42bc      	cmp	r4, r7
   21b70:	f84e 3b04 	str.w	r3, [lr], #4
   21b74:	ea4f 4311 	mov.w	r3, r1, lsr #16
   21b78:	dcec      	bgt.n	21b54 <__multadd+0x10>
   21b7a:	b13b      	cbz	r3, 21b8c <__multadd+0x48>
   21b7c:	68aa      	ldr	r2, [r5, #8]
   21b7e:	4294      	cmp	r4, r2
   21b80:	da07      	bge.n	21b92 <__multadd+0x4e>
   21b82:	eb05 0284 	add.w	r2, r5, r4, lsl #2
   21b86:	3401      	adds	r4, #1
   21b88:	6153      	str	r3, [r2, #20]
   21b8a:	612c      	str	r4, [r5, #16]
   21b8c:	4628      	mov	r0, r5
   21b8e:	b003      	add	sp, #12
   21b90:	bdf0      	pop	{r4, r5, r6, r7, pc}
   21b92:	6869      	ldr	r1, [r5, #4]
   21b94:	9301      	str	r3, [sp, #4]
   21b96:	3101      	adds	r1, #1
   21b98:	4630      	mov	r0, r6
   21b9a:	f7ff ffa3 	bl	21ae4 <_Balloc>
   21b9e:	692a      	ldr	r2, [r5, #16]
   21ba0:	3202      	adds	r2, #2
   21ba2:	f105 010c 	add.w	r1, r5, #12
   21ba6:	4607      	mov	r7, r0
   21ba8:	0092      	lsls	r2, r2, #2
   21baa:	300c      	adds	r0, #12
   21bac:	f7fc fb28 	bl	1e200 <memcpy>
   21bb0:	6cf2      	ldr	r2, [r6, #76]	; 0x4c
   21bb2:	6869      	ldr	r1, [r5, #4]
   21bb4:	9b01      	ldr	r3, [sp, #4]
   21bb6:	f852 0021 	ldr.w	r0, [r2, r1, lsl #2]
   21bba:	6028      	str	r0, [r5, #0]
   21bbc:	f842 5021 	str.w	r5, [r2, r1, lsl #2]
   21bc0:	463d      	mov	r5, r7
   21bc2:	e7de      	b.n	21b82 <__multadd+0x3e>

00021bc4 <__hi0bits>:
   21bc4:	0c02      	lsrs	r2, r0, #16
   21bc6:	0412      	lsls	r2, r2, #16
   21bc8:	4603      	mov	r3, r0
   21bca:	b9b2      	cbnz	r2, 21bfa <__hi0bits+0x36>
   21bcc:	0403      	lsls	r3, r0, #16
   21bce:	2010      	movs	r0, #16
   21bd0:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
   21bd4:	bf04      	itt	eq
   21bd6:	021b      	lsleq	r3, r3, #8
   21bd8:	3008      	addeq	r0, #8
   21bda:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
   21bde:	bf04      	itt	eq
   21be0:	011b      	lsleq	r3, r3, #4
   21be2:	3004      	addeq	r0, #4
   21be4:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
   21be8:	bf04      	itt	eq
   21bea:	009b      	lsleq	r3, r3, #2
   21bec:	3002      	addeq	r0, #2
   21bee:	2b00      	cmp	r3, #0
   21bf0:	db02      	blt.n	21bf8 <__hi0bits+0x34>
   21bf2:	005b      	lsls	r3, r3, #1
   21bf4:	d403      	bmi.n	21bfe <__hi0bits+0x3a>
   21bf6:	2020      	movs	r0, #32
   21bf8:	4770      	bx	lr
   21bfa:	2000      	movs	r0, #0
   21bfc:	e7e8      	b.n	21bd0 <__hi0bits+0xc>
   21bfe:	3001      	adds	r0, #1
   21c00:	4770      	bx	lr
   21c02:	bf00      	nop

00021c04 <__lo0bits>:
   21c04:	6803      	ldr	r3, [r0, #0]
   21c06:	f013 0207 	ands.w	r2, r3, #7
   21c0a:	4601      	mov	r1, r0
   21c0c:	d007      	beq.n	21c1e <__lo0bits+0x1a>
   21c0e:	07da      	lsls	r2, r3, #31
   21c10:	d421      	bmi.n	21c56 <__lo0bits+0x52>
   21c12:	0798      	lsls	r0, r3, #30
   21c14:	d421      	bmi.n	21c5a <__lo0bits+0x56>
   21c16:	089b      	lsrs	r3, r3, #2
   21c18:	600b      	str	r3, [r1, #0]
   21c1a:	2002      	movs	r0, #2
   21c1c:	4770      	bx	lr
   21c1e:	b298      	uxth	r0, r3
   21c20:	b198      	cbz	r0, 21c4a <__lo0bits+0x46>
   21c22:	4610      	mov	r0, r2
   21c24:	f013 0fff 	tst.w	r3, #255	; 0xff
   21c28:	bf04      	itt	eq
   21c2a:	0a1b      	lsreq	r3, r3, #8
   21c2c:	3008      	addeq	r0, #8
   21c2e:	071a      	lsls	r2, r3, #28
   21c30:	bf04      	itt	eq
   21c32:	091b      	lsreq	r3, r3, #4
   21c34:	3004      	addeq	r0, #4
   21c36:	079a      	lsls	r2, r3, #30
   21c38:	bf04      	itt	eq
   21c3a:	089b      	lsreq	r3, r3, #2
   21c3c:	3002      	addeq	r0, #2
   21c3e:	07da      	lsls	r2, r3, #31
   21c40:	d407      	bmi.n	21c52 <__lo0bits+0x4e>
   21c42:	085b      	lsrs	r3, r3, #1
   21c44:	d104      	bne.n	21c50 <__lo0bits+0x4c>
   21c46:	2020      	movs	r0, #32
   21c48:	4770      	bx	lr
   21c4a:	0c1b      	lsrs	r3, r3, #16
   21c4c:	2010      	movs	r0, #16
   21c4e:	e7e9      	b.n	21c24 <__lo0bits+0x20>
   21c50:	3001      	adds	r0, #1
   21c52:	600b      	str	r3, [r1, #0]
   21c54:	4770      	bx	lr
   21c56:	2000      	movs	r0, #0
   21c58:	4770      	bx	lr
   21c5a:	085b      	lsrs	r3, r3, #1
   21c5c:	600b      	str	r3, [r1, #0]
   21c5e:	2001      	movs	r0, #1
   21c60:	4770      	bx	lr
   21c62:	bf00      	nop

00021c64 <__i2b>:
   21c64:	b510      	push	{r4, lr}
   21c66:	460c      	mov	r4, r1
   21c68:	2101      	movs	r1, #1
   21c6a:	f7ff ff3b 	bl	21ae4 <_Balloc>
   21c6e:	2201      	movs	r2, #1
   21c70:	6144      	str	r4, [r0, #20]
   21c72:	6102      	str	r2, [r0, #16]
   21c74:	bd10      	pop	{r4, pc}
   21c76:	bf00      	nop

00021c78 <__multiply>:
   21c78:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   21c7c:	690c      	ldr	r4, [r1, #16]
   21c7e:	6915      	ldr	r5, [r2, #16]
   21c80:	42ac      	cmp	r4, r5
   21c82:	b083      	sub	sp, #12
   21c84:	468b      	mov	fp, r1
   21c86:	4616      	mov	r6, r2
   21c88:	da04      	bge.n	21c94 <__multiply+0x1c>
   21c8a:	4622      	mov	r2, r4
   21c8c:	46b3      	mov	fp, r6
   21c8e:	462c      	mov	r4, r5
   21c90:	460e      	mov	r6, r1
   21c92:	4615      	mov	r5, r2
   21c94:	f8db 3008 	ldr.w	r3, [fp, #8]
   21c98:	f8db 1004 	ldr.w	r1, [fp, #4]
   21c9c:	eb04 0805 	add.w	r8, r4, r5
   21ca0:	4598      	cmp	r8, r3
   21ca2:	bfc8      	it	gt
   21ca4:	3101      	addgt	r1, #1
   21ca6:	f7ff ff1d 	bl	21ae4 <_Balloc>
   21caa:	f100 0914 	add.w	r9, r0, #20
   21cae:	eb09 0a88 	add.w	sl, r9, r8, lsl #2
   21cb2:	45d1      	cmp	r9, sl
   21cb4:	9000      	str	r0, [sp, #0]
   21cb6:	d205      	bcs.n	21cc4 <__multiply+0x4c>
   21cb8:	464b      	mov	r3, r9
   21cba:	2100      	movs	r1, #0
   21cbc:	f843 1b04 	str.w	r1, [r3], #4
   21cc0:	459a      	cmp	sl, r3
   21cc2:	d8fb      	bhi.n	21cbc <__multiply+0x44>
   21cc4:	f106 0c14 	add.w	ip, r6, #20
   21cc8:	eb0c 0385 	add.w	r3, ip, r5, lsl #2
   21ccc:	f10b 0b14 	add.w	fp, fp, #20
   21cd0:	459c      	cmp	ip, r3
   21cd2:	eb0b 0e84 	add.w	lr, fp, r4, lsl #2
   21cd6:	d24c      	bcs.n	21d72 <__multiply+0xfa>
   21cd8:	f8cd a004 	str.w	sl, [sp, #4]
   21cdc:	469a      	mov	sl, r3
   21cde:	f8dc 5000 	ldr.w	r5, [ip]
   21ce2:	b2af      	uxth	r7, r5
   21ce4:	b1ef      	cbz	r7, 21d22 <__multiply+0xaa>
   21ce6:	2100      	movs	r1, #0
   21ce8:	464d      	mov	r5, r9
   21cea:	465e      	mov	r6, fp
   21cec:	460c      	mov	r4, r1
   21cee:	f856 2b04 	ldr.w	r2, [r6], #4
   21cf2:	6828      	ldr	r0, [r5, #0]
   21cf4:	b293      	uxth	r3, r2
   21cf6:	b281      	uxth	r1, r0
   21cf8:	fb07 1303 	mla	r3, r7, r3, r1
   21cfc:	0c12      	lsrs	r2, r2, #16
   21cfe:	0c01      	lsrs	r1, r0, #16
   21d00:	4423      	add	r3, r4
   21d02:	fb07 1102 	mla	r1, r7, r2, r1
   21d06:	eb01 4113 	add.w	r1, r1, r3, lsr #16
   21d0a:	b29b      	uxth	r3, r3
   21d0c:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
   21d10:	45b6      	cmp	lr, r6
   21d12:	f845 3b04 	str.w	r3, [r5], #4
   21d16:	ea4f 4411 	mov.w	r4, r1, lsr #16
   21d1a:	d8e8      	bhi.n	21cee <__multiply+0x76>
   21d1c:	602c      	str	r4, [r5, #0]
   21d1e:	f8dc 5000 	ldr.w	r5, [ip]
   21d22:	0c2d      	lsrs	r5, r5, #16
   21d24:	d01d      	beq.n	21d62 <__multiply+0xea>
   21d26:	f8d9 3000 	ldr.w	r3, [r9]
   21d2a:	4648      	mov	r0, r9
   21d2c:	461c      	mov	r4, r3
   21d2e:	4659      	mov	r1, fp
   21d30:	2200      	movs	r2, #0
   21d32:	880e      	ldrh	r6, [r1, #0]
   21d34:	0c24      	lsrs	r4, r4, #16
   21d36:	fb05 4406 	mla	r4, r5, r6, r4
   21d3a:	4422      	add	r2, r4
   21d3c:	b29b      	uxth	r3, r3
   21d3e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
   21d42:	f840 3b04 	str.w	r3, [r0], #4
   21d46:	f851 3b04 	ldr.w	r3, [r1], #4
   21d4a:	6804      	ldr	r4, [r0, #0]
   21d4c:	0c1b      	lsrs	r3, r3, #16
   21d4e:	b2a6      	uxth	r6, r4
   21d50:	fb05 6303 	mla	r3, r5, r3, r6
   21d54:	eb03 4312 	add.w	r3, r3, r2, lsr #16
   21d58:	458e      	cmp	lr, r1
   21d5a:	ea4f 4213 	mov.w	r2, r3, lsr #16
   21d5e:	d8e8      	bhi.n	21d32 <__multiply+0xba>
   21d60:	6003      	str	r3, [r0, #0]
   21d62:	f10c 0c04 	add.w	ip, ip, #4
   21d66:	45e2      	cmp	sl, ip
   21d68:	f109 0904 	add.w	r9, r9, #4
   21d6c:	d8b7      	bhi.n	21cde <__multiply+0x66>
   21d6e:	f8dd a004 	ldr.w	sl, [sp, #4]
   21d72:	f1b8 0f00 	cmp.w	r8, #0
   21d76:	dd0b      	ble.n	21d90 <__multiply+0x118>
   21d78:	f85a 3c04 	ldr.w	r3, [sl, #-4]
   21d7c:	f1aa 0a04 	sub.w	sl, sl, #4
   21d80:	b11b      	cbz	r3, 21d8a <__multiply+0x112>
   21d82:	e005      	b.n	21d90 <__multiply+0x118>
   21d84:	f85a 3d04 	ldr.w	r3, [sl, #-4]!
   21d88:	b913      	cbnz	r3, 21d90 <__multiply+0x118>
   21d8a:	f1b8 0801 	subs.w	r8, r8, #1
   21d8e:	d1f9      	bne.n	21d84 <__multiply+0x10c>
   21d90:	9800      	ldr	r0, [sp, #0]
   21d92:	f8c0 8010 	str.w	r8, [r0, #16]
   21d96:	b003      	add	sp, #12
   21d98:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

00021d9c <__pow5mult>:
   21d9c:	f012 0303 	ands.w	r3, r2, #3
   21da0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   21da4:	4614      	mov	r4, r2
   21da6:	4607      	mov	r7, r0
   21da8:	d12e      	bne.n	21e08 <__pow5mult+0x6c>
   21daa:	460d      	mov	r5, r1
   21dac:	10a4      	asrs	r4, r4, #2
   21dae:	d01c      	beq.n	21dea <__pow5mult+0x4e>
   21db0:	6cbe      	ldr	r6, [r7, #72]	; 0x48
   21db2:	b396      	cbz	r6, 21e1a <__pow5mult+0x7e>
   21db4:	07e3      	lsls	r3, r4, #31
   21db6:	f04f 0800 	mov.w	r8, #0
   21dba:	d406      	bmi.n	21dca <__pow5mult+0x2e>
   21dbc:	1064      	asrs	r4, r4, #1
   21dbe:	d014      	beq.n	21dea <__pow5mult+0x4e>
   21dc0:	6830      	ldr	r0, [r6, #0]
   21dc2:	b1a8      	cbz	r0, 21df0 <__pow5mult+0x54>
   21dc4:	4606      	mov	r6, r0
   21dc6:	07e3      	lsls	r3, r4, #31
   21dc8:	d5f8      	bpl.n	21dbc <__pow5mult+0x20>
   21dca:	4632      	mov	r2, r6
   21dcc:	4629      	mov	r1, r5
   21dce:	4638      	mov	r0, r7
   21dd0:	f7ff ff52 	bl	21c78 <__multiply>
   21dd4:	b1b5      	cbz	r5, 21e04 <__pow5mult+0x68>
   21dd6:	686a      	ldr	r2, [r5, #4]
   21dd8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
   21dda:	1064      	asrs	r4, r4, #1
   21ddc:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
   21de0:	6029      	str	r1, [r5, #0]
   21de2:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
   21de6:	4605      	mov	r5, r0
   21de8:	d1ea      	bne.n	21dc0 <__pow5mult+0x24>
   21dea:	4628      	mov	r0, r5
   21dec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   21df0:	4632      	mov	r2, r6
   21df2:	4631      	mov	r1, r6
   21df4:	4638      	mov	r0, r7
   21df6:	f7ff ff3f 	bl	21c78 <__multiply>
   21dfa:	6030      	str	r0, [r6, #0]
   21dfc:	f8c0 8000 	str.w	r8, [r0]
   21e00:	4606      	mov	r6, r0
   21e02:	e7e0      	b.n	21dc6 <__pow5mult+0x2a>
   21e04:	4605      	mov	r5, r0
   21e06:	e7d9      	b.n	21dbc <__pow5mult+0x20>
   21e08:	1e5a      	subs	r2, r3, #1
   21e0a:	4d0b      	ldr	r5, [pc, #44]	; (21e38 <__pow5mult+0x9c>)
   21e0c:	2300      	movs	r3, #0
   21e0e:	f855 2022 	ldr.w	r2, [r5, r2, lsl #2]
   21e12:	f7ff fe97 	bl	21b44 <__multadd>
   21e16:	4605      	mov	r5, r0
   21e18:	e7c8      	b.n	21dac <__pow5mult+0x10>
   21e1a:	2101      	movs	r1, #1
   21e1c:	4638      	mov	r0, r7
   21e1e:	f7ff fe61 	bl	21ae4 <_Balloc>
   21e22:	f240 2171 	movw	r1, #625	; 0x271
   21e26:	2201      	movs	r2, #1
   21e28:	2300      	movs	r3, #0
   21e2a:	6141      	str	r1, [r0, #20]
   21e2c:	6102      	str	r2, [r0, #16]
   21e2e:	4606      	mov	r6, r0
   21e30:	64b8      	str	r0, [r7, #72]	; 0x48
   21e32:	6003      	str	r3, [r0, #0]
   21e34:	e7be      	b.n	21db4 <__pow5mult+0x18>
   21e36:	bf00      	nop
   21e38:	00024e00 	.word	0x00024e00

00021e3c <__lshift>:
   21e3c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   21e40:	4691      	mov	r9, r2
   21e42:	690a      	ldr	r2, [r1, #16]
   21e44:	688b      	ldr	r3, [r1, #8]
   21e46:	ea4f 1469 	mov.w	r4, r9, asr #5
   21e4a:	eb04 0802 	add.w	r8, r4, r2
   21e4e:	f108 0501 	add.w	r5, r8, #1
   21e52:	429d      	cmp	r5, r3
   21e54:	460e      	mov	r6, r1
   21e56:	4607      	mov	r7, r0
   21e58:	6849      	ldr	r1, [r1, #4]
   21e5a:	dd04      	ble.n	21e66 <__lshift+0x2a>
   21e5c:	005b      	lsls	r3, r3, #1
   21e5e:	429d      	cmp	r5, r3
   21e60:	f101 0101 	add.w	r1, r1, #1
   21e64:	dcfa      	bgt.n	21e5c <__lshift+0x20>
   21e66:	4638      	mov	r0, r7
   21e68:	f7ff fe3c 	bl	21ae4 <_Balloc>
   21e6c:	2c00      	cmp	r4, #0
   21e6e:	f100 0314 	add.w	r3, r0, #20
   21e72:	dd06      	ble.n	21e82 <__lshift+0x46>
   21e74:	eb03 0284 	add.w	r2, r3, r4, lsl #2
   21e78:	2100      	movs	r1, #0
   21e7a:	f843 1b04 	str.w	r1, [r3], #4
   21e7e:	429a      	cmp	r2, r3
   21e80:	d1fb      	bne.n	21e7a <__lshift+0x3e>
   21e82:	6934      	ldr	r4, [r6, #16]
   21e84:	f106 0114 	add.w	r1, r6, #20
   21e88:	f019 091f 	ands.w	r9, r9, #31
   21e8c:	eb01 0e84 	add.w	lr, r1, r4, lsl #2
   21e90:	d01d      	beq.n	21ece <__lshift+0x92>
   21e92:	f1c9 0c20 	rsb	ip, r9, #32
   21e96:	2200      	movs	r2, #0
   21e98:	680c      	ldr	r4, [r1, #0]
   21e9a:	fa04 f409 	lsl.w	r4, r4, r9
   21e9e:	4314      	orrs	r4, r2
   21ea0:	f843 4b04 	str.w	r4, [r3], #4
   21ea4:	f851 2b04 	ldr.w	r2, [r1], #4
   21ea8:	458e      	cmp	lr, r1
   21eaa:	fa22 f20c 	lsr.w	r2, r2, ip
   21eae:	d8f3      	bhi.n	21e98 <__lshift+0x5c>
   21eb0:	601a      	str	r2, [r3, #0]
   21eb2:	b10a      	cbz	r2, 21eb8 <__lshift+0x7c>
   21eb4:	f108 0502 	add.w	r5, r8, #2
   21eb8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
   21eba:	6872      	ldr	r2, [r6, #4]
   21ebc:	3d01      	subs	r5, #1
   21ebe:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
   21ec2:	6105      	str	r5, [r0, #16]
   21ec4:	6031      	str	r1, [r6, #0]
   21ec6:	f843 6022 	str.w	r6, [r3, r2, lsl #2]
   21eca:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   21ece:	3b04      	subs	r3, #4
   21ed0:	f851 2b04 	ldr.w	r2, [r1], #4
   21ed4:	f843 2f04 	str.w	r2, [r3, #4]!
   21ed8:	458e      	cmp	lr, r1
   21eda:	d8f9      	bhi.n	21ed0 <__lshift+0x94>
   21edc:	e7ec      	b.n	21eb8 <__lshift+0x7c>
   21ede:	bf00      	nop

00021ee0 <__mcmp>:
   21ee0:	b430      	push	{r4, r5}
   21ee2:	690b      	ldr	r3, [r1, #16]
   21ee4:	4605      	mov	r5, r0
   21ee6:	6900      	ldr	r0, [r0, #16]
   21ee8:	1ac0      	subs	r0, r0, r3
   21eea:	d10f      	bne.n	21f0c <__mcmp+0x2c>
   21eec:	009b      	lsls	r3, r3, #2
   21eee:	3514      	adds	r5, #20
   21ef0:	3114      	adds	r1, #20
   21ef2:	4419      	add	r1, r3
   21ef4:	442b      	add	r3, r5
   21ef6:	e001      	b.n	21efc <__mcmp+0x1c>
   21ef8:	429d      	cmp	r5, r3
   21efa:	d207      	bcs.n	21f0c <__mcmp+0x2c>
   21efc:	f853 4d04 	ldr.w	r4, [r3, #-4]!
   21f00:	f851 2d04 	ldr.w	r2, [r1, #-4]!
   21f04:	4294      	cmp	r4, r2
   21f06:	d0f7      	beq.n	21ef8 <__mcmp+0x18>
   21f08:	d302      	bcc.n	21f10 <__mcmp+0x30>
   21f0a:	2001      	movs	r0, #1
   21f0c:	bc30      	pop	{r4, r5}
   21f0e:	4770      	bx	lr
   21f10:	f04f 30ff 	mov.w	r0, #4294967295
   21f14:	e7fa      	b.n	21f0c <__mcmp+0x2c>
   21f16:	bf00      	nop

00021f18 <__mdiff>:
   21f18:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   21f1c:	690f      	ldr	r7, [r1, #16]
   21f1e:	460e      	mov	r6, r1
   21f20:	6911      	ldr	r1, [r2, #16]
   21f22:	1a7f      	subs	r7, r7, r1
   21f24:	2f00      	cmp	r7, #0
   21f26:	4690      	mov	r8, r2
   21f28:	d117      	bne.n	21f5a <__mdiff+0x42>
   21f2a:	0089      	lsls	r1, r1, #2
   21f2c:	f106 0514 	add.w	r5, r6, #20
   21f30:	f102 0e14 	add.w	lr, r2, #20
   21f34:	186b      	adds	r3, r5, r1
   21f36:	4471      	add	r1, lr
   21f38:	e001      	b.n	21f3e <__mdiff+0x26>
   21f3a:	429d      	cmp	r5, r3
   21f3c:	d25c      	bcs.n	21ff8 <__mdiff+0xe0>
   21f3e:	f853 2d04 	ldr.w	r2, [r3, #-4]!
   21f42:	f851 4d04 	ldr.w	r4, [r1, #-4]!
   21f46:	42a2      	cmp	r2, r4
   21f48:	d0f7      	beq.n	21f3a <__mdiff+0x22>
   21f4a:	d25e      	bcs.n	2200a <__mdiff+0xf2>
   21f4c:	4633      	mov	r3, r6
   21f4e:	462c      	mov	r4, r5
   21f50:	4646      	mov	r6, r8
   21f52:	4675      	mov	r5, lr
   21f54:	4698      	mov	r8, r3
   21f56:	2701      	movs	r7, #1
   21f58:	e005      	b.n	21f66 <__mdiff+0x4e>
   21f5a:	db58      	blt.n	2200e <__mdiff+0xf6>
   21f5c:	f106 0514 	add.w	r5, r6, #20
   21f60:	f108 0414 	add.w	r4, r8, #20
   21f64:	2700      	movs	r7, #0
   21f66:	6871      	ldr	r1, [r6, #4]
   21f68:	f7ff fdbc 	bl	21ae4 <_Balloc>
   21f6c:	f8d8 3010 	ldr.w	r3, [r8, #16]
   21f70:	6936      	ldr	r6, [r6, #16]
   21f72:	60c7      	str	r7, [r0, #12]
   21f74:	eb04 0c83 	add.w	ip, r4, r3, lsl #2
   21f78:	46a6      	mov	lr, r4
   21f7a:	eb05 0786 	add.w	r7, r5, r6, lsl #2
   21f7e:	f100 0414 	add.w	r4, r0, #20
   21f82:	2300      	movs	r3, #0
   21f84:	f85e 1b04 	ldr.w	r1, [lr], #4
   21f88:	f855 8b04 	ldr.w	r8, [r5], #4
   21f8c:	b28a      	uxth	r2, r1
   21f8e:	fa13 f388 	uxtah	r3, r3, r8
   21f92:	0c09      	lsrs	r1, r1, #16
   21f94:	1a9a      	subs	r2, r3, r2
   21f96:	ebc1 4318 	rsb	r3, r1, r8, lsr #16
   21f9a:	eb03 4322 	add.w	r3, r3, r2, asr #16
   21f9e:	b292      	uxth	r2, r2
   21fa0:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
   21fa4:	45f4      	cmp	ip, lr
   21fa6:	f844 2b04 	str.w	r2, [r4], #4
   21faa:	ea4f 4323 	mov.w	r3, r3, asr #16
   21fae:	d8e9      	bhi.n	21f84 <__mdiff+0x6c>
   21fb0:	42af      	cmp	r7, r5
   21fb2:	d917      	bls.n	21fe4 <__mdiff+0xcc>
   21fb4:	46a4      	mov	ip, r4
   21fb6:	46ae      	mov	lr, r5
   21fb8:	f85e 2b04 	ldr.w	r2, [lr], #4
   21fbc:	fa13 f382 	uxtah	r3, r3, r2
   21fc0:	1419      	asrs	r1, r3, #16
   21fc2:	eb01 4112 	add.w	r1, r1, r2, lsr #16
   21fc6:	b29b      	uxth	r3, r3
   21fc8:	ea43 4201 	orr.w	r2, r3, r1, lsl #16
   21fcc:	4577      	cmp	r7, lr
   21fce:	f84c 2b04 	str.w	r2, [ip], #4
   21fd2:	ea4f 4321 	mov.w	r3, r1, asr #16
   21fd6:	d8ef      	bhi.n	21fb8 <__mdiff+0xa0>
   21fd8:	43ed      	mvns	r5, r5
   21fda:	442f      	add	r7, r5
   21fdc:	f027 0703 	bic.w	r7, r7, #3
   21fe0:	3704      	adds	r7, #4
   21fe2:	443c      	add	r4, r7
   21fe4:	3c04      	subs	r4, #4
   21fe6:	b922      	cbnz	r2, 21ff2 <__mdiff+0xda>
   21fe8:	f854 3d04 	ldr.w	r3, [r4, #-4]!
   21fec:	3e01      	subs	r6, #1
   21fee:	2b00      	cmp	r3, #0
   21ff0:	d0fa      	beq.n	21fe8 <__mdiff+0xd0>
   21ff2:	6106      	str	r6, [r0, #16]
   21ff4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   21ff8:	2100      	movs	r1, #0
   21ffa:	f7ff fd73 	bl	21ae4 <_Balloc>
   21ffe:	2201      	movs	r2, #1
   22000:	2300      	movs	r3, #0
   22002:	6102      	str	r2, [r0, #16]
   22004:	6143      	str	r3, [r0, #20]
   22006:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   2200a:	4674      	mov	r4, lr
   2200c:	e7ab      	b.n	21f66 <__mdiff+0x4e>
   2200e:	4633      	mov	r3, r6
   22010:	f106 0414 	add.w	r4, r6, #20
   22014:	f102 0514 	add.w	r5, r2, #20
   22018:	4616      	mov	r6, r2
   2201a:	2701      	movs	r7, #1
   2201c:	4698      	mov	r8, r3
   2201e:	e7a2      	b.n	21f66 <__mdiff+0x4e>

00022020 <__d2b>:
   22020:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   22024:	ec57 6b10 	vmov	r6, r7, d0
   22028:	b083      	sub	sp, #12
   2202a:	4688      	mov	r8, r1
   2202c:	2101      	movs	r1, #1
   2202e:	463c      	mov	r4, r7
   22030:	f3c7 550a 	ubfx	r5, r7, #20, #11
   22034:	4617      	mov	r7, r2
   22036:	f7ff fd55 	bl	21ae4 <_Balloc>
   2203a:	f3c4 0413 	ubfx	r4, r4, #0, #20
   2203e:	4681      	mov	r9, r0
   22040:	b10d      	cbz	r5, 22046 <__d2b+0x26>
   22042:	f444 1480 	orr.w	r4, r4, #1048576	; 0x100000
   22046:	9401      	str	r4, [sp, #4]
   22048:	b31e      	cbz	r6, 22092 <__d2b+0x72>
   2204a:	a802      	add	r0, sp, #8
   2204c:	f840 6d08 	str.w	r6, [r0, #-8]!
   22050:	f7ff fdd8 	bl	21c04 <__lo0bits>
   22054:	2800      	cmp	r0, #0
   22056:	d134      	bne.n	220c2 <__d2b+0xa2>
   22058:	e89d 000c 	ldmia.w	sp, {r2, r3}
   2205c:	f8c9 2014 	str.w	r2, [r9, #20]
   22060:	2b00      	cmp	r3, #0
   22062:	bf0c      	ite	eq
   22064:	2101      	moveq	r1, #1
   22066:	2102      	movne	r1, #2
   22068:	f8c9 3018 	str.w	r3, [r9, #24]
   2206c:	f8c9 1010 	str.w	r1, [r9, #16]
   22070:	b9dd      	cbnz	r5, 220aa <__d2b+0x8a>
   22072:	eb09 0381 	add.w	r3, r9, r1, lsl #2
   22076:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
   2207a:	f8c8 0000 	str.w	r0, [r8]
   2207e:	6918      	ldr	r0, [r3, #16]
   22080:	f7ff fda0 	bl	21bc4 <__hi0bits>
   22084:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
   22088:	6038      	str	r0, [r7, #0]
   2208a:	4648      	mov	r0, r9
   2208c:	b003      	add	sp, #12
   2208e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   22092:	a801      	add	r0, sp, #4
   22094:	f7ff fdb6 	bl	21c04 <__lo0bits>
   22098:	9b01      	ldr	r3, [sp, #4]
   2209a:	f8c9 3014 	str.w	r3, [r9, #20]
   2209e:	2101      	movs	r1, #1
   220a0:	3020      	adds	r0, #32
   220a2:	f8c9 1010 	str.w	r1, [r9, #16]
   220a6:	2d00      	cmp	r5, #0
   220a8:	d0e3      	beq.n	22072 <__d2b+0x52>
   220aa:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
   220ae:	4405      	add	r5, r0
   220b0:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
   220b4:	f8c8 5000 	str.w	r5, [r8]
   220b8:	6038      	str	r0, [r7, #0]
   220ba:	4648      	mov	r0, r9
   220bc:	b003      	add	sp, #12
   220be:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   220c2:	e89d 000a 	ldmia.w	sp, {r1, r3}
   220c6:	f1c0 0220 	rsb	r2, r0, #32
   220ca:	fa03 f202 	lsl.w	r2, r3, r2
   220ce:	430a      	orrs	r2, r1
   220d0:	40c3      	lsrs	r3, r0
   220d2:	9301      	str	r3, [sp, #4]
   220d4:	f8c9 2014 	str.w	r2, [r9, #20]
   220d8:	e7c2      	b.n	22060 <__d2b+0x40>
   220da:	bf00      	nop

000220dc <__sread>:
   220dc:	b510      	push	{r4, lr}
   220de:	460c      	mov	r4, r1
   220e0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
   220e4:	f000 f9fe 	bl	224e4 <_read_r>
   220e8:	2800      	cmp	r0, #0
   220ea:	db03      	blt.n	220f4 <__sread+0x18>
   220ec:	6d23      	ldr	r3, [r4, #80]	; 0x50
   220ee:	4403      	add	r3, r0
   220f0:	6523      	str	r3, [r4, #80]	; 0x50
   220f2:	bd10      	pop	{r4, pc}
   220f4:	89a3      	ldrh	r3, [r4, #12]
   220f6:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
   220fa:	81a3      	strh	r3, [r4, #12]
   220fc:	bd10      	pop	{r4, pc}
   220fe:	bf00      	nop

00022100 <__swrite>:
   22100:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   22104:	4616      	mov	r6, r2
   22106:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
   2210a:	461f      	mov	r7, r3
   2210c:	05d3      	lsls	r3, r2, #23
   2210e:	460c      	mov	r4, r1
   22110:	4605      	mov	r5, r0
   22112:	d507      	bpl.n	22124 <__swrite+0x24>
   22114:	2200      	movs	r2, #0
   22116:	2302      	movs	r3, #2
   22118:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
   2211c:	f000 f9cc 	bl	224b8 <_lseek_r>
   22120:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
   22124:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
   22128:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
   2212c:	81a2      	strh	r2, [r4, #12]
   2212e:	463b      	mov	r3, r7
   22130:	4632      	mov	r2, r6
   22132:	4628      	mov	r0, r5
   22134:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   22138:	f7fe b960 	b.w	203fc <_write_r>

0002213c <__sseek>:
   2213c:	b510      	push	{r4, lr}
   2213e:	460c      	mov	r4, r1
   22140:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
   22144:	f000 f9b8 	bl	224b8 <_lseek_r>
   22148:	89a3      	ldrh	r3, [r4, #12]
   2214a:	1c42      	adds	r2, r0, #1
   2214c:	bf0e      	itee	eq
   2214e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
   22152:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
   22156:	6520      	strne	r0, [r4, #80]	; 0x50
   22158:	81a3      	strh	r3, [r4, #12]
   2215a:	bd10      	pop	{r4, pc}

0002215c <__sclose>:
   2215c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
   22160:	f000 b910 	b.w	22384 <_close_r>

00022164 <__ssprint_r>:
   22164:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   22168:	6893      	ldr	r3, [r2, #8]
   2216a:	b083      	sub	sp, #12
   2216c:	4690      	mov	r8, r2
   2216e:	2b00      	cmp	r3, #0
   22170:	d070      	beq.n	22254 <__ssprint_r+0xf0>
   22172:	4682      	mov	sl, r0
   22174:	460c      	mov	r4, r1
   22176:	6817      	ldr	r7, [r2, #0]
   22178:	688d      	ldr	r5, [r1, #8]
   2217a:	6808      	ldr	r0, [r1, #0]
   2217c:	e042      	b.n	22204 <__ssprint_r+0xa0>
   2217e:	89a3      	ldrh	r3, [r4, #12]
   22180:	f413 6f90 	tst.w	r3, #1152	; 0x480
   22184:	d02e      	beq.n	221e4 <__ssprint_r+0x80>
   22186:	6965      	ldr	r5, [r4, #20]
   22188:	6921      	ldr	r1, [r4, #16]
   2218a:	eb05 0545 	add.w	r5, r5, r5, lsl #1
   2218e:	eba0 0b01 	sub.w	fp, r0, r1
   22192:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
   22196:	f10b 0001 	add.w	r0, fp, #1
   2219a:	106d      	asrs	r5, r5, #1
   2219c:	4430      	add	r0, r6
   2219e:	42a8      	cmp	r0, r5
   221a0:	462a      	mov	r2, r5
   221a2:	bf84      	itt	hi
   221a4:	4605      	movhi	r5, r0
   221a6:	462a      	movhi	r2, r5
   221a8:	055b      	lsls	r3, r3, #21
   221aa:	d538      	bpl.n	2221e <__ssprint_r+0xba>
   221ac:	4611      	mov	r1, r2
   221ae:	4650      	mov	r0, sl
   221b0:	f7fb fcdc 	bl	1db6c <_malloc_r>
   221b4:	2800      	cmp	r0, #0
   221b6:	d03c      	beq.n	22232 <__ssprint_r+0xce>
   221b8:	465a      	mov	r2, fp
   221ba:	6921      	ldr	r1, [r4, #16]
   221bc:	9001      	str	r0, [sp, #4]
   221be:	f7fc f81f 	bl	1e200 <memcpy>
   221c2:	89a2      	ldrh	r2, [r4, #12]
   221c4:	9b01      	ldr	r3, [sp, #4]
   221c6:	f422 6290 	bic.w	r2, r2, #1152	; 0x480
   221ca:	f042 0280 	orr.w	r2, r2, #128	; 0x80
   221ce:	81a2      	strh	r2, [r4, #12]
   221d0:	eba5 020b 	sub.w	r2, r5, fp
   221d4:	eb03 000b 	add.w	r0, r3, fp
   221d8:	6165      	str	r5, [r4, #20]
   221da:	6123      	str	r3, [r4, #16]
   221dc:	6020      	str	r0, [r4, #0]
   221de:	60a2      	str	r2, [r4, #8]
   221e0:	4635      	mov	r5, r6
   221e2:	46b3      	mov	fp, r6
   221e4:	465a      	mov	r2, fp
   221e6:	4649      	mov	r1, r9
   221e8:	f7fc f8a4 	bl	1e334 <memmove>
   221ec:	f8d8 3008 	ldr.w	r3, [r8, #8]
   221f0:	68a2      	ldr	r2, [r4, #8]
   221f2:	6820      	ldr	r0, [r4, #0]
   221f4:	1b55      	subs	r5, r2, r5
   221f6:	4458      	add	r0, fp
   221f8:	1b9e      	subs	r6, r3, r6
   221fa:	60a5      	str	r5, [r4, #8]
   221fc:	6020      	str	r0, [r4, #0]
   221fe:	f8c8 6008 	str.w	r6, [r8, #8]
   22202:	b33e      	cbz	r6, 22254 <__ssprint_r+0xf0>
   22204:	687e      	ldr	r6, [r7, #4]
   22206:	463b      	mov	r3, r7
   22208:	3708      	adds	r7, #8
   2220a:	2e00      	cmp	r6, #0
   2220c:	d0fa      	beq.n	22204 <__ssprint_r+0xa0>
   2220e:	42ae      	cmp	r6, r5
   22210:	f8d3 9000 	ldr.w	r9, [r3]
   22214:	46ab      	mov	fp, r5
   22216:	d2b2      	bcs.n	2217e <__ssprint_r+0x1a>
   22218:	4635      	mov	r5, r6
   2221a:	46b3      	mov	fp, r6
   2221c:	e7e2      	b.n	221e4 <__ssprint_r+0x80>
   2221e:	4650      	mov	r0, sl
   22220:	f7fc f986 	bl	1e530 <_realloc_r>
   22224:	4603      	mov	r3, r0
   22226:	2800      	cmp	r0, #0
   22228:	d1d2      	bne.n	221d0 <__ssprint_r+0x6c>
   2222a:	6921      	ldr	r1, [r4, #16]
   2222c:	4650      	mov	r0, sl
   2222e:	f7ff fac3 	bl	217b8 <_free_r>
   22232:	230c      	movs	r3, #12
   22234:	f8ca 3000 	str.w	r3, [sl]
   22238:	89a3      	ldrh	r3, [r4, #12]
   2223a:	2200      	movs	r2, #0
   2223c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   22240:	f04f 30ff 	mov.w	r0, #4294967295
   22244:	81a3      	strh	r3, [r4, #12]
   22246:	f8c8 2008 	str.w	r2, [r8, #8]
   2224a:	f8c8 2004 	str.w	r2, [r8, #4]
   2224e:	b003      	add	sp, #12
   22250:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   22254:	2000      	movs	r0, #0
   22256:	f8c8 0004 	str.w	r0, [r8, #4]
   2225a:	b003      	add	sp, #12
   2225c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

00022260 <__register_exitproc>:
   22260:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   22264:	4d2c      	ldr	r5, [pc, #176]	; (22318 <__register_exitproc+0xb8>)
   22266:	4606      	mov	r6, r0
   22268:	6828      	ldr	r0, [r5, #0]
   2226a:	4698      	mov	r8, r3
   2226c:	460f      	mov	r7, r1
   2226e:	4691      	mov	r9, r2
   22270:	f7fb fc68 	bl	1db44 <__retarget_lock_acquire_recursive>
   22274:	4b29      	ldr	r3, [pc, #164]	; (2231c <__register_exitproc+0xbc>)
   22276:	681c      	ldr	r4, [r3, #0]
   22278:	f8d4 3148 	ldr.w	r3, [r4, #328]	; 0x148
   2227c:	2b00      	cmp	r3, #0
   2227e:	d03e      	beq.n	222fe <__register_exitproc+0x9e>
   22280:	685a      	ldr	r2, [r3, #4]
   22282:	2a1f      	cmp	r2, #31
   22284:	dc1c      	bgt.n	222c0 <__register_exitproc+0x60>
   22286:	f102 0e01 	add.w	lr, r2, #1
   2228a:	b176      	cbz	r6, 222aa <__register_exitproc+0x4a>
   2228c:	eb03 0182 	add.w	r1, r3, r2, lsl #2
   22290:	2401      	movs	r4, #1
   22292:	f8c1 9088 	str.w	r9, [r1, #136]	; 0x88
   22296:	f8d3 0188 	ldr.w	r0, [r3, #392]	; 0x188
   2229a:	4094      	lsls	r4, r2
   2229c:	4320      	orrs	r0, r4
   2229e:	2e02      	cmp	r6, #2
   222a0:	f8c3 0188 	str.w	r0, [r3, #392]	; 0x188
   222a4:	f8c1 8108 	str.w	r8, [r1, #264]	; 0x108
   222a8:	d023      	beq.n	222f2 <__register_exitproc+0x92>
   222aa:	3202      	adds	r2, #2
   222ac:	f8c3 e004 	str.w	lr, [r3, #4]
   222b0:	6828      	ldr	r0, [r5, #0]
   222b2:	f843 7022 	str.w	r7, [r3, r2, lsl #2]
   222b6:	f7fb fc47 	bl	1db48 <__retarget_lock_release_recursive>
   222ba:	2000      	movs	r0, #0
   222bc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   222c0:	4b17      	ldr	r3, [pc, #92]	; (22320 <__register_exitproc+0xc0>)
   222c2:	b30b      	cbz	r3, 22308 <__register_exitproc+0xa8>
   222c4:	f44f 70c8 	mov.w	r0, #400	; 0x190
   222c8:	f7fb fc40 	bl	1db4c <malloc>
   222cc:	4603      	mov	r3, r0
   222ce:	b1d8      	cbz	r0, 22308 <__register_exitproc+0xa8>
   222d0:	f8d4 2148 	ldr.w	r2, [r4, #328]	; 0x148
   222d4:	6002      	str	r2, [r0, #0]
   222d6:	2100      	movs	r1, #0
   222d8:	6041      	str	r1, [r0, #4]
   222da:	460a      	mov	r2, r1
   222dc:	f8c4 0148 	str.w	r0, [r4, #328]	; 0x148
   222e0:	f04f 0e01 	mov.w	lr, #1
   222e4:	f8c0 1188 	str.w	r1, [r0, #392]	; 0x188
   222e8:	f8c0 118c 	str.w	r1, [r0, #396]	; 0x18c
   222ec:	2e00      	cmp	r6, #0
   222ee:	d0dc      	beq.n	222aa <__register_exitproc+0x4a>
   222f0:	e7cc      	b.n	2228c <__register_exitproc+0x2c>
   222f2:	f8d3 118c 	ldr.w	r1, [r3, #396]	; 0x18c
   222f6:	430c      	orrs	r4, r1
   222f8:	f8c3 418c 	str.w	r4, [r3, #396]	; 0x18c
   222fc:	e7d5      	b.n	222aa <__register_exitproc+0x4a>
   222fe:	f504 73a6 	add.w	r3, r4, #332	; 0x14c
   22302:	f8c4 3148 	str.w	r3, [r4, #328]	; 0x148
   22306:	e7bb      	b.n	22280 <__register_exitproc+0x20>
   22308:	6828      	ldr	r0, [r5, #0]
   2230a:	f7fb fc1d 	bl	1db48 <__retarget_lock_release_recursive>
   2230e:	f04f 30ff 	mov.w	r0, #4294967295
   22312:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   22316:	bf00      	nop
   22318:	20000aa4 	.word	0x20000aa4
   2231c:	00024b60 	.word	0x00024b60
   22320:	0001db4d 	.word	0x0001db4d

00022324 <_calloc_r>:
   22324:	b510      	push	{r4, lr}
   22326:	fb02 f101 	mul.w	r1, r2, r1
   2232a:	f7fb fc1f 	bl	1db6c <_malloc_r>
   2232e:	4604      	mov	r4, r0
   22330:	b1d8      	cbz	r0, 2236a <_calloc_r+0x46>
   22332:	f850 2c04 	ldr.w	r2, [r0, #-4]
   22336:	f022 0203 	bic.w	r2, r2, #3
   2233a:	3a04      	subs	r2, #4
   2233c:	2a24      	cmp	r2, #36	; 0x24
   2233e:	d818      	bhi.n	22372 <_calloc_r+0x4e>
   22340:	2a13      	cmp	r2, #19
   22342:	d914      	bls.n	2236e <_calloc_r+0x4a>
   22344:	2300      	movs	r3, #0
   22346:	2a1b      	cmp	r2, #27
   22348:	6003      	str	r3, [r0, #0]
   2234a:	6043      	str	r3, [r0, #4]
   2234c:	d916      	bls.n	2237c <_calloc_r+0x58>
   2234e:	2a24      	cmp	r2, #36	; 0x24
   22350:	6083      	str	r3, [r0, #8]
   22352:	60c3      	str	r3, [r0, #12]
   22354:	bf11      	iteee	ne
   22356:	f100 0210 	addne.w	r2, r0, #16
   2235a:	6103      	streq	r3, [r0, #16]
   2235c:	6143      	streq	r3, [r0, #20]
   2235e:	f100 0218 	addeq.w	r2, r0, #24
   22362:	2300      	movs	r3, #0
   22364:	6013      	str	r3, [r2, #0]
   22366:	6053      	str	r3, [r2, #4]
   22368:	6093      	str	r3, [r2, #8]
   2236a:	4620      	mov	r0, r4
   2236c:	bd10      	pop	{r4, pc}
   2236e:	4602      	mov	r2, r0
   22370:	e7f7      	b.n	22362 <_calloc_r+0x3e>
   22372:	2100      	movs	r1, #0
   22374:	f7fc f842 	bl	1e3fc <memset>
   22378:	4620      	mov	r0, r4
   2237a:	bd10      	pop	{r4, pc}
   2237c:	f100 0208 	add.w	r2, r0, #8
   22380:	e7ef      	b.n	22362 <_calloc_r+0x3e>
   22382:	bf00      	nop

00022384 <_close_r>:
   22384:	b538      	push	{r3, r4, r5, lr}
   22386:	4c07      	ldr	r4, [pc, #28]	; (223a4 <_close_r+0x20>)
   22388:	2300      	movs	r3, #0
   2238a:	4605      	mov	r5, r0
   2238c:	4608      	mov	r0, r1
   2238e:	6023      	str	r3, [r4, #0]
   22390:	f000 f9ac 	bl	226ec <_close>
   22394:	1c43      	adds	r3, r0, #1
   22396:	d000      	beq.n	2239a <_close_r+0x16>
   22398:	bd38      	pop	{r3, r4, r5, pc}
   2239a:	6823      	ldr	r3, [r4, #0]
   2239c:	2b00      	cmp	r3, #0
   2239e:	d0fb      	beq.n	22398 <_close_r+0x14>
   223a0:	602b      	str	r3, [r5, #0]
   223a2:	bd38      	pop	{r3, r4, r5, pc}
   223a4:	20002390 	.word	0x20002390

000223a8 <_fclose_r>:
   223a8:	b570      	push	{r4, r5, r6, lr}
   223aa:	b159      	cbz	r1, 223c4 <_fclose_r+0x1c>
   223ac:	4605      	mov	r5, r0
   223ae:	460c      	mov	r4, r1
   223b0:	b110      	cbz	r0, 223b8 <_fclose_r+0x10>
   223b2:	6b83      	ldr	r3, [r0, #56]	; 0x38
   223b4:	2b00      	cmp	r3, #0
   223b6:	d03c      	beq.n	22432 <_fclose_r+0x8a>
   223b8:	6e63      	ldr	r3, [r4, #100]	; 0x64
   223ba:	07d8      	lsls	r0, r3, #31
   223bc:	d505      	bpl.n	223ca <_fclose_r+0x22>
   223be:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   223c2:	b92b      	cbnz	r3, 223d0 <_fclose_r+0x28>
   223c4:	2600      	movs	r6, #0
   223c6:	4630      	mov	r0, r6
   223c8:	bd70      	pop	{r4, r5, r6, pc}
   223ca:	89a3      	ldrh	r3, [r4, #12]
   223cc:	0599      	lsls	r1, r3, #22
   223ce:	d53c      	bpl.n	2244a <_fclose_r+0xa2>
   223d0:	4621      	mov	r1, r4
   223d2:	4628      	mov	r0, r5
   223d4:	f7ff f856 	bl	21484 <__sflush_r>
   223d8:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
   223da:	4606      	mov	r6, r0
   223dc:	b133      	cbz	r3, 223ec <_fclose_r+0x44>
   223de:	69e1      	ldr	r1, [r4, #28]
   223e0:	4628      	mov	r0, r5
   223e2:	4798      	blx	r3
   223e4:	2800      	cmp	r0, #0
   223e6:	bfb8      	it	lt
   223e8:	f04f 36ff 	movlt.w	r6, #4294967295
   223ec:	89a3      	ldrh	r3, [r4, #12]
   223ee:	061a      	lsls	r2, r3, #24
   223f0:	d422      	bmi.n	22438 <_fclose_r+0x90>
   223f2:	6b21      	ldr	r1, [r4, #48]	; 0x30
   223f4:	b141      	cbz	r1, 22408 <_fclose_r+0x60>
   223f6:	f104 0340 	add.w	r3, r4, #64	; 0x40
   223fa:	4299      	cmp	r1, r3
   223fc:	d002      	beq.n	22404 <_fclose_r+0x5c>
   223fe:	4628      	mov	r0, r5
   22400:	f7ff f9da 	bl	217b8 <_free_r>
   22404:	2300      	movs	r3, #0
   22406:	6323      	str	r3, [r4, #48]	; 0x30
   22408:	6c61      	ldr	r1, [r4, #68]	; 0x44
   2240a:	b121      	cbz	r1, 22416 <_fclose_r+0x6e>
   2240c:	4628      	mov	r0, r5
   2240e:	f7ff f9d3 	bl	217b8 <_free_r>
   22412:	2300      	movs	r3, #0
   22414:	6463      	str	r3, [r4, #68]	; 0x44
   22416:	f7ff f959 	bl	216cc <__sfp_lock_acquire>
   2241a:	6e63      	ldr	r3, [r4, #100]	; 0x64
   2241c:	2200      	movs	r2, #0
   2241e:	07db      	lsls	r3, r3, #31
   22420:	81a2      	strh	r2, [r4, #12]
   22422:	d50e      	bpl.n	22442 <_fclose_r+0x9a>
   22424:	6da0      	ldr	r0, [r4, #88]	; 0x58
   22426:	f7fb fb8b 	bl	1db40 <__retarget_lock_close_recursive>
   2242a:	f7ff f955 	bl	216d8 <__sfp_lock_release>
   2242e:	4630      	mov	r0, r6
   22430:	bd70      	pop	{r4, r5, r6, pc}
   22432:	f7ff f91f 	bl	21674 <__sinit>
   22436:	e7bf      	b.n	223b8 <_fclose_r+0x10>
   22438:	6921      	ldr	r1, [r4, #16]
   2243a:	4628      	mov	r0, r5
   2243c:	f7ff f9bc 	bl	217b8 <_free_r>
   22440:	e7d7      	b.n	223f2 <_fclose_r+0x4a>
   22442:	6da0      	ldr	r0, [r4, #88]	; 0x58
   22444:	f7fb fb80 	bl	1db48 <__retarget_lock_release_recursive>
   22448:	e7ec      	b.n	22424 <_fclose_r+0x7c>
   2244a:	6da0      	ldr	r0, [r4, #88]	; 0x58
   2244c:	f7fb fb7a 	bl	1db44 <__retarget_lock_acquire_recursive>
   22450:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   22454:	2b00      	cmp	r3, #0
   22456:	d1bb      	bne.n	223d0 <_fclose_r+0x28>
   22458:	6e66      	ldr	r6, [r4, #100]	; 0x64
   2245a:	f016 0601 	ands.w	r6, r6, #1
   2245e:	d1b1      	bne.n	223c4 <_fclose_r+0x1c>
   22460:	6da0      	ldr	r0, [r4, #88]	; 0x58
   22462:	f7fb fb71 	bl	1db48 <__retarget_lock_release_recursive>
   22466:	4630      	mov	r0, r6
   22468:	bd70      	pop	{r4, r5, r6, pc}
   2246a:	bf00      	nop

0002246c <_fstat_r>:
   2246c:	b538      	push	{r3, r4, r5, lr}
   2246e:	460b      	mov	r3, r1
   22470:	4c07      	ldr	r4, [pc, #28]	; (22490 <_fstat_r+0x24>)
   22472:	4605      	mov	r5, r0
   22474:	4611      	mov	r1, r2
   22476:	4618      	mov	r0, r3
   22478:	2300      	movs	r3, #0
   2247a:	6023      	str	r3, [r4, #0]
   2247c:	f000 f9b4 	bl	227e8 <_fstat>
   22480:	1c43      	adds	r3, r0, #1
   22482:	d000      	beq.n	22486 <_fstat_r+0x1a>
   22484:	bd38      	pop	{r3, r4, r5, pc}
   22486:	6823      	ldr	r3, [r4, #0]
   22488:	2b00      	cmp	r3, #0
   2248a:	d0fb      	beq.n	22484 <_fstat_r+0x18>
   2248c:	602b      	str	r3, [r5, #0]
   2248e:	bd38      	pop	{r3, r4, r5, pc}
   22490:	20002390 	.word	0x20002390

00022494 <_isatty_r>:
   22494:	b538      	push	{r3, r4, r5, lr}
   22496:	4c07      	ldr	r4, [pc, #28]	; (224b4 <_isatty_r+0x20>)
   22498:	2300      	movs	r3, #0
   2249a:	4605      	mov	r5, r0
   2249c:	4608      	mov	r0, r1
   2249e:	6023      	str	r3, [r4, #0]
   224a0:	f000 f9b0 	bl	22804 <_isatty>
   224a4:	1c43      	adds	r3, r0, #1
   224a6:	d000      	beq.n	224aa <_isatty_r+0x16>
   224a8:	bd38      	pop	{r3, r4, r5, pc}
   224aa:	6823      	ldr	r3, [r4, #0]
   224ac:	2b00      	cmp	r3, #0
   224ae:	d0fb      	beq.n	224a8 <_isatty_r+0x14>
   224b0:	602b      	str	r3, [r5, #0]
   224b2:	bd38      	pop	{r3, r4, r5, pc}
   224b4:	20002390 	.word	0x20002390

000224b8 <_lseek_r>:
   224b8:	b570      	push	{r4, r5, r6, lr}
   224ba:	460d      	mov	r5, r1
   224bc:	4c08      	ldr	r4, [pc, #32]	; (224e0 <_lseek_r+0x28>)
   224be:	4611      	mov	r1, r2
   224c0:	4606      	mov	r6, r0
   224c2:	461a      	mov	r2, r3
   224c4:	4628      	mov	r0, r5
   224c6:	2300      	movs	r3, #0
   224c8:	6023      	str	r3, [r4, #0]
   224ca:	f000 f8d3 	bl	22674 <_lseek>
   224ce:	1c43      	adds	r3, r0, #1
   224d0:	d000      	beq.n	224d4 <_lseek_r+0x1c>
   224d2:	bd70      	pop	{r4, r5, r6, pc}
   224d4:	6823      	ldr	r3, [r4, #0]
   224d6:	2b00      	cmp	r3, #0
   224d8:	d0fb      	beq.n	224d2 <_lseek_r+0x1a>
   224da:	6033      	str	r3, [r6, #0]
   224dc:	bd70      	pop	{r4, r5, r6, pc}
   224de:	bf00      	nop
   224e0:	20002390 	.word	0x20002390

000224e4 <_read_r>:
   224e4:	b570      	push	{r4, r5, r6, lr}
   224e6:	460d      	mov	r5, r1
   224e8:	4c08      	ldr	r4, [pc, #32]	; (2250c <_read_r+0x28>)
   224ea:	4611      	mov	r1, r2
   224ec:	4606      	mov	r6, r0
   224ee:	461a      	mov	r2, r3
   224f0:	4628      	mov	r0, r5
   224f2:	2300      	movs	r3, #0
   224f4:	6023      	str	r3, [r4, #0]
   224f6:	f000 f84b 	bl	22590 <_read>
   224fa:	1c43      	adds	r3, r0, #1
   224fc:	d000      	beq.n	22500 <_read_r+0x1c>
   224fe:	bd70      	pop	{r4, r5, r6, pc}
   22500:	6823      	ldr	r3, [r4, #0]
   22502:	2b00      	cmp	r3, #0
   22504:	d0fb      	beq.n	224fe <_read_r+0x1a>
   22506:	6033      	str	r3, [r6, #0]
   22508:	bd70      	pop	{r4, r5, r6, pc}
   2250a:	bf00      	nop
   2250c:	20002390 	.word	0x20002390

00022510 <__aeabi_dcmpun>:
   22510:	ea4f 0c41 	mov.w	ip, r1, lsl #1
   22514:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   22518:	d102      	bne.n	22520 <__aeabi_dcmpun+0x10>
   2251a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
   2251e:	d10a      	bne.n	22536 <__aeabi_dcmpun+0x26>
   22520:	ea4f 0c43 	mov.w	ip, r3, lsl #1
   22524:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   22528:	d102      	bne.n	22530 <__aeabi_dcmpun+0x20>
   2252a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
   2252e:	d102      	bne.n	22536 <__aeabi_dcmpun+0x26>
   22530:	f04f 0000 	mov.w	r0, #0
   22534:	4770      	bx	lr
   22536:	f04f 0001 	mov.w	r0, #1
   2253a:	4770      	bx	lr

0002253c <findslot>:
   2253c:	4b0b      	ldr	r3, [pc, #44]	; (2256c <findslot+0x30>)
   2253e:	681b      	ldr	r3, [r3, #0]
   22540:	b510      	push	{r4, lr}
   22542:	4604      	mov	r4, r0
   22544:	b10b      	cbz	r3, 2254a <findslot+0xe>
   22546:	6b9a      	ldr	r2, [r3, #56]	; 0x38
   22548:	b14a      	cbz	r2, 2255e <findslot+0x22>
   2254a:	2c13      	cmp	r4, #19
   2254c:	d80c      	bhi.n	22568 <findslot+0x2c>
   2254e:	4808      	ldr	r0, [pc, #32]	; (22570 <findslot+0x34>)
   22550:	f850 3034 	ldr.w	r3, [r0, r4, lsl #3]
   22554:	3301      	adds	r3, #1
   22556:	d007      	beq.n	22568 <findslot+0x2c>
   22558:	eb00 00c4 	add.w	r0, r0, r4, lsl #3
   2255c:	bd10      	pop	{r4, pc}
   2255e:	4618      	mov	r0, r3
   22560:	f7ff f888 	bl	21674 <__sinit>
   22564:	2c13      	cmp	r4, #19
   22566:	d9f2      	bls.n	2254e <findslot+0x12>
   22568:	2000      	movs	r0, #0
   2256a:	bd10      	pop	{r4, pc}
   2256c:	200000f8 	.word	0x200000f8
   22570:	200022cc 	.word	0x200022cc

00022574 <checkerror.part.0>:
   22574:	b570      	push	{r4, r5, r6, lr}
   22576:	f7fb f85d 	bl	1d634 <__errno>
   2257a:	2413      	movs	r4, #19
   2257c:	4605      	mov	r5, r0
   2257e:	2600      	movs	r6, #0
   22580:	4620      	mov	r0, r4
   22582:	4631      	mov	r1, r6
   22584:	beab      	bkpt	0x00ab
   22586:	4604      	mov	r4, r0
   22588:	f04f 30ff 	mov.w	r0, #4294967295
   2258c:	602c      	str	r4, [r5, #0]
   2258e:	bd70      	pop	{r4, r5, r6, pc}

00022590 <_read>:
   22590:	b5f0      	push	{r4, r5, r6, r7, lr}
   22592:	b085      	sub	sp, #20
   22594:	460c      	mov	r4, r1
   22596:	4616      	mov	r6, r2
   22598:	f7ff ffd0 	bl	2253c <findslot>
   2259c:	b1c8      	cbz	r0, 225d2 <_read+0x42>
   2259e:	6803      	ldr	r3, [r0, #0]
   225a0:	9301      	str	r3, [sp, #4]
   225a2:	9402      	str	r4, [sp, #8]
   225a4:	4605      	mov	r5, r0
   225a6:	9603      	str	r6, [sp, #12]
   225a8:	2406      	movs	r4, #6
   225aa:	af01      	add	r7, sp, #4
   225ac:	4620      	mov	r0, r4
   225ae:	4639      	mov	r1, r7
   225b0:	beab      	bkpt	0x00ab
   225b2:	4604      	mov	r4, r0
   225b4:	1c62      	adds	r2, r4, #1
   225b6:	4620      	mov	r0, r4
   225b8:	d005      	beq.n	225c6 <_read+0x36>
   225ba:	686b      	ldr	r3, [r5, #4]
   225bc:	1a30      	subs	r0, r6, r0
   225be:	4403      	add	r3, r0
   225c0:	606b      	str	r3, [r5, #4]
   225c2:	b005      	add	sp, #20
   225c4:	bdf0      	pop	{r4, r5, r6, r7, pc}
   225c6:	f7ff ffd5 	bl	22574 <checkerror.part.0>
   225ca:	1c43      	adds	r3, r0, #1
   225cc:	d1f5      	bne.n	225ba <_read+0x2a>
   225ce:	b005      	add	sp, #20
   225d0:	bdf0      	pop	{r4, r5, r6, r7, pc}
   225d2:	f7fb f82f 	bl	1d634 <__errno>
   225d6:	2309      	movs	r3, #9
   225d8:	6003      	str	r3, [r0, #0]
   225da:	f04f 30ff 	mov.w	r0, #4294967295
   225de:	e7f0      	b.n	225c2 <_read+0x32>

000225e0 <_swilseek>:
   225e0:	b5f0      	push	{r4, r5, r6, r7, lr}
   225e2:	b083      	sub	sp, #12
   225e4:	460d      	mov	r5, r1
   225e6:	4614      	mov	r4, r2
   225e8:	f7ff ffa8 	bl	2253c <findslot>
   225ec:	2800      	cmp	r0, #0
   225ee:	d03a      	beq.n	22666 <_swilseek+0x86>
   225f0:	2c02      	cmp	r4, #2
   225f2:	d825      	bhi.n	22640 <_swilseek+0x60>
   225f4:	2c01      	cmp	r4, #1
   225f6:	4606      	mov	r6, r0
   225f8:	d01f      	beq.n	2263a <_swilseek+0x5a>
   225fa:	2c02      	cmp	r4, #2
   225fc:	d010      	beq.n	22620 <_swilseek+0x40>
   225fe:	466f      	mov	r7, sp
   22600:	6833      	ldr	r3, [r6, #0]
   22602:	240a      	movs	r4, #10
   22604:	e88d 0028 	stmia.w	sp, {r3, r5}
   22608:	4620      	mov	r0, r4
   2260a:	4639      	mov	r1, r7
   2260c:	beab      	bkpt	0x00ab
   2260e:	4604      	mov	r4, r0
   22610:	1c63      	adds	r3, r4, #1
   22612:	d01c      	beq.n	2264e <_swilseek+0x6e>
   22614:	2c00      	cmp	r4, #0
   22616:	db23      	blt.n	22660 <_swilseek+0x80>
   22618:	6075      	str	r5, [r6, #4]
   2261a:	4628      	mov	r0, r5
   2261c:	b003      	add	sp, #12
   2261e:	bdf0      	pop	{r4, r5, r6, r7, pc}
   22620:	af02      	add	r7, sp, #8
   22622:	6803      	ldr	r3, [r0, #0]
   22624:	f847 3d08 	str.w	r3, [r7, #-8]!
   22628:	240c      	movs	r4, #12
   2262a:	4620      	mov	r0, r4
   2262c:	4639      	mov	r1, r7
   2262e:	beab      	bkpt	0x00ab
   22630:	4604      	mov	r4, r0
   22632:	1c61      	adds	r1, r4, #1
   22634:	d00f      	beq.n	22656 <_swilseek+0x76>
   22636:	4425      	add	r5, r4
   22638:	e7e2      	b.n	22600 <_swilseek+0x20>
   2263a:	6840      	ldr	r0, [r0, #4]
   2263c:	182d      	adds	r5, r5, r0
   2263e:	d5de      	bpl.n	225fe <_swilseek+0x1e>
   22640:	f7fa fff8 	bl	1d634 <__errno>
   22644:	2316      	movs	r3, #22
   22646:	6003      	str	r3, [r0, #0]
   22648:	f04f 35ff 	mov.w	r5, #4294967295
   2264c:	e7e5      	b.n	2261a <_swilseek+0x3a>
   2264e:	f7ff ff91 	bl	22574 <checkerror.part.0>
   22652:	4604      	mov	r4, r0
   22654:	e7de      	b.n	22614 <_swilseek+0x34>
   22656:	f7ff ff8d 	bl	22574 <checkerror.part.0>
   2265a:	1c42      	adds	r2, r0, #1
   2265c:	4604      	mov	r4, r0
   2265e:	d1ea      	bne.n	22636 <_swilseek+0x56>
   22660:	f04f 35ff 	mov.w	r5, #4294967295
   22664:	e7d9      	b.n	2261a <_swilseek+0x3a>
   22666:	f7fa ffe5 	bl	1d634 <__errno>
   2266a:	2309      	movs	r3, #9
   2266c:	6003      	str	r3, [r0, #0]
   2266e:	f04f 35ff 	mov.w	r5, #4294967295
   22672:	e7d2      	b.n	2261a <_swilseek+0x3a>

00022674 <_lseek>:
   22674:	f7ff bfb4 	b.w	225e0 <_swilseek>

00022678 <_write>:
   22678:	b5f0      	push	{r4, r5, r6, r7, lr}
   2267a:	b085      	sub	sp, #20
   2267c:	460c      	mov	r4, r1
   2267e:	4616      	mov	r6, r2
   22680:	f7ff ff5c 	bl	2253c <findslot>
   22684:	b350      	cbz	r0, 226dc <_write+0x64>
   22686:	6803      	ldr	r3, [r0, #0]
   22688:	9301      	str	r3, [sp, #4]
   2268a:	9402      	str	r4, [sp, #8]
   2268c:	4605      	mov	r5, r0
   2268e:	9603      	str	r6, [sp, #12]
   22690:	2405      	movs	r4, #5
   22692:	af01      	add	r7, sp, #4
   22694:	4620      	mov	r0, r4
   22696:	4639      	mov	r1, r7
   22698:	beab      	bkpt	0x00ab
   2269a:	4604      	mov	r4, r0
   2269c:	1c63      	adds	r3, r4, #1
   2269e:	d016      	beq.n	226ce <_write+0x56>
   226a0:	2c00      	cmp	r4, #0
   226a2:	db18      	blt.n	226d6 <_write+0x5e>
   226a4:	686a      	ldr	r2, [r5, #4]
   226a6:	1b30      	subs	r0, r6, r4
   226a8:	4402      	add	r2, r0
   226aa:	42a6      	cmp	r6, r4
   226ac:	606a      	str	r2, [r5, #4]
   226ae:	d001      	beq.n	226b4 <_write+0x3c>
   226b0:	b005      	add	sp, #20
   226b2:	bdf0      	pop	{r4, r5, r6, r7, pc}
   226b4:	f7fa ffbe 	bl	1d634 <__errno>
   226b8:	2513      	movs	r5, #19
   226ba:	4606      	mov	r6, r0
   226bc:	2400      	movs	r4, #0
   226be:	4628      	mov	r0, r5
   226c0:	4621      	mov	r1, r4
   226c2:	beab      	bkpt	0x00ab
   226c4:	4605      	mov	r5, r0
   226c6:	4620      	mov	r0, r4
   226c8:	6035      	str	r5, [r6, #0]
   226ca:	b005      	add	sp, #20
   226cc:	bdf0      	pop	{r4, r5, r6, r7, pc}
   226ce:	f7ff ff51 	bl	22574 <checkerror.part.0>
   226d2:	4604      	mov	r4, r0
   226d4:	e7e4      	b.n	226a0 <_write+0x28>
   226d6:	f04f 30ff 	mov.w	r0, #4294967295
   226da:	e7e9      	b.n	226b0 <_write+0x38>
   226dc:	f7fa ffaa 	bl	1d634 <__errno>
   226e0:	2309      	movs	r3, #9
   226e2:	6003      	str	r3, [r0, #0]
   226e4:	f04f 30ff 	mov.w	r0, #4294967295
   226e8:	e7e2      	b.n	226b0 <_write+0x38>
   226ea:	bf00      	nop

000226ec <_close>:
   226ec:	b570      	push	{r4, r5, r6, lr}
   226ee:	b082      	sub	sp, #8
   226f0:	4604      	mov	r4, r0
   226f2:	f7ff ff23 	bl	2253c <findslot>
   226f6:	b310      	cbz	r0, 2273e <_close+0x52>
   226f8:	3c01      	subs	r4, #1
   226fa:	2c01      	cmp	r4, #1
   226fc:	4606      	mov	r6, r0
   226fe:	d911      	bls.n	22724 <_close+0x38>
   22700:	ad02      	add	r5, sp, #8
   22702:	6833      	ldr	r3, [r6, #0]
   22704:	f845 3d04 	str.w	r3, [r5, #-4]!
   22708:	2402      	movs	r4, #2
   2270a:	4620      	mov	r0, r4
   2270c:	4629      	mov	r1, r5
   2270e:	beab      	bkpt	0x00ab
   22710:	4604      	mov	r4, r0
   22712:	1c63      	adds	r3, r4, #1
   22714:	4620      	mov	r0, r4
   22716:	d00f      	beq.n	22738 <_close+0x4c>
   22718:	b910      	cbnz	r0, 22720 <_close+0x34>
   2271a:	f04f 33ff 	mov.w	r3, #4294967295
   2271e:	6033      	str	r3, [r6, #0]
   22720:	b002      	add	sp, #8
   22722:	bd70      	pop	{r4, r5, r6, pc}
   22724:	4b09      	ldr	r3, [pc, #36]	; (2274c <_close+0x60>)
   22726:	689a      	ldr	r2, [r3, #8]
   22728:	691b      	ldr	r3, [r3, #16]
   2272a:	429a      	cmp	r2, r3
   2272c:	d1e8      	bne.n	22700 <_close+0x14>
   2272e:	f04f 33ff 	mov.w	r3, #4294967295
   22732:	6003      	str	r3, [r0, #0]
   22734:	2000      	movs	r0, #0
   22736:	e7f3      	b.n	22720 <_close+0x34>
   22738:	f7ff ff1c 	bl	22574 <checkerror.part.0>
   2273c:	e7ec      	b.n	22718 <_close+0x2c>
   2273e:	f7fa ff79 	bl	1d634 <__errno>
   22742:	2309      	movs	r3, #9
   22744:	6003      	str	r3, [r0, #0]
   22746:	f04f 30ff 	mov.w	r0, #4294967295
   2274a:	e7e9      	b.n	22720 <_close+0x34>
   2274c:	200022cc 	.word	0x200022cc

00022750 <_getpid>:
   22750:	2001      	movs	r0, #1
   22752:	4770      	bx	lr

00022754 <_sbrk>:
   22754:	4a0e      	ldr	r2, [pc, #56]	; (22790 <_sbrk+0x3c>)
   22756:	6813      	ldr	r3, [r2, #0]
   22758:	b510      	push	{r4, lr}
   2275a:	b1ab      	cbz	r3, 22788 <_sbrk+0x34>
   2275c:	4418      	add	r0, r3
   2275e:	4669      	mov	r1, sp
   22760:	4288      	cmp	r0, r1
   22762:	d809      	bhi.n	22778 <_sbrk+0x24>
   22764:	490b      	ldr	r1, [pc, #44]	; (22794 <_sbrk+0x40>)
   22766:	4c0c      	ldr	r4, [pc, #48]	; (22798 <_sbrk+0x44>)
   22768:	6809      	ldr	r1, [r1, #0]
   2276a:	42a1      	cmp	r1, r4
   2276c:	d001      	beq.n	22772 <_sbrk+0x1e>
   2276e:	4288      	cmp	r0, r1
   22770:	d802      	bhi.n	22778 <_sbrk+0x24>
   22772:	6010      	str	r0, [r2, #0]
   22774:	4618      	mov	r0, r3
   22776:	bd10      	pop	{r4, pc}
   22778:	f7fa ff5c 	bl	1d634 <__errno>
   2277c:	230c      	movs	r3, #12
   2277e:	6003      	str	r3, [r0, #0]
   22780:	f04f 33ff 	mov.w	r3, #4294967295
   22784:	4618      	mov	r0, r3
   22786:	bd10      	pop	{r4, pc}
   22788:	4b04      	ldr	r3, [pc, #16]	; (2279c <_sbrk+0x48>)
   2278a:	6013      	str	r3, [r2, #0]
   2278c:	e7e6      	b.n	2275c <_sbrk+0x8>
   2278e:	bf00      	nop
   22790:	200022c8 	.word	0x200022c8
   22794:	20000aa8 	.word	0x20000aa8
   22798:	cafedead 	.word	0xcafedead
   2279c:	20002394 	.word	0x20002394

000227a0 <_swistat>:
   227a0:	b570      	push	{r4, r5, r6, lr}
   227a2:	460d      	mov	r5, r1
   227a4:	f7ff feca 	bl	2253c <findslot>
   227a8:	b1b8      	cbz	r0, 227da <_swistat+0x3a>
   227aa:	686b      	ldr	r3, [r5, #4]
   227ac:	f44f 6280 	mov.w	r2, #1024	; 0x400
   227b0:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
   227b4:	4606      	mov	r6, r0
   227b6:	606b      	str	r3, [r5, #4]
   227b8:	62ea      	str	r2, [r5, #44]	; 0x2c
   227ba:	240c      	movs	r4, #12
   227bc:	4620      	mov	r0, r4
   227be:	4631      	mov	r1, r6
   227c0:	beab      	bkpt	0x00ab
   227c2:	4604      	mov	r4, r0
   227c4:	1c62      	adds	r2, r4, #1
   227c6:	4620      	mov	r0, r4
   227c8:	d002      	beq.n	227d0 <_swistat+0x30>
   227ca:	6128      	str	r0, [r5, #16]
   227cc:	2000      	movs	r0, #0
   227ce:	bd70      	pop	{r4, r5, r6, pc}
   227d0:	f7ff fed0 	bl	22574 <checkerror.part.0>
   227d4:	1c43      	adds	r3, r0, #1
   227d6:	d1f8      	bne.n	227ca <_swistat+0x2a>
   227d8:	e7f9      	b.n	227ce <_swistat+0x2e>
   227da:	f7fa ff2b 	bl	1d634 <__errno>
   227de:	2309      	movs	r3, #9
   227e0:	6003      	str	r3, [r0, #0]
   227e2:	f04f 30ff 	mov.w	r0, #4294967295
   227e6:	bd70      	pop	{r4, r5, r6, pc}

000227e8 <_fstat>:
   227e8:	b538      	push	{r3, r4, r5, lr}
   227ea:	223c      	movs	r2, #60	; 0x3c
   227ec:	460c      	mov	r4, r1
   227ee:	4605      	mov	r5, r0
   227f0:	4608      	mov	r0, r1
   227f2:	2100      	movs	r1, #0
   227f4:	f7fb fe02 	bl	1e3fc <memset>
   227f8:	4621      	mov	r1, r4
   227fa:	4628      	mov	r0, r5
   227fc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   22800:	f7ff bfce 	b.w	227a0 <_swistat>

00022804 <_isatty>:
   22804:	b570      	push	{r4, r5, r6, lr}
   22806:	f7ff fe99 	bl	2253c <findslot>
   2280a:	4605      	mov	r5, r0
   2280c:	b190      	cbz	r0, 22834 <_isatty+0x30>
   2280e:	2409      	movs	r4, #9
   22810:	4620      	mov	r0, r4
   22812:	4629      	mov	r1, r5
   22814:	beab      	bkpt	0x00ab
   22816:	4604      	mov	r4, r0
   22818:	2c01      	cmp	r4, #1
   2281a:	d009      	beq.n	22830 <_isatty+0x2c>
   2281c:	f7fa ff0a 	bl	1d634 <__errno>
   22820:	2513      	movs	r5, #19
   22822:	4606      	mov	r6, r0
   22824:	2400      	movs	r4, #0
   22826:	4628      	mov	r0, r5
   22828:	4621      	mov	r1, r4
   2282a:	beab      	bkpt	0x00ab
   2282c:	4605      	mov	r5, r0
   2282e:	6035      	str	r5, [r6, #0]
   22830:	4620      	mov	r0, r4
   22832:	bd70      	pop	{r4, r5, r6, pc}
   22834:	f7fa fefe 	bl	1d634 <__errno>
   22838:	2209      	movs	r2, #9
   2283a:	462c      	mov	r4, r5
   2283c:	6002      	str	r2, [r0, #0]
   2283e:	e7f7      	b.n	22830 <_isatty+0x2c>

00022840 <_exit>:
   22840:	f04f 31ff 	mov.w	r1, #4294967295
   22844:	f000 b800 	b.w	22848 <_kill>

00022848 <_kill>:
   22848:	2906      	cmp	r1, #6
   2284a:	b530      	push	{r4, r5, lr}
   2284c:	bf0c      	ite	eq
   2284e:	4d04      	ldreq	r5, [pc, #16]	; (22860 <_kill+0x18>)
   22850:	4d04      	ldrne	r5, [pc, #16]	; (22864 <_kill+0x1c>)
   22852:	2418      	movs	r4, #24
   22854:	4620      	mov	r0, r4
   22856:	4629      	mov	r1, r5
   22858:	beab      	bkpt	0x00ab
   2285a:	4604      	mov	r4, r0
   2285c:	4620      	mov	r0, r4
   2285e:	bd30      	pop	{r4, r5, pc}
   22860:	00020023 	.word	0x00020023
   22864:	00020026 	.word	0x00020026

00022868 <_init>:
   22868:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   2286a:	bf00      	nop
   2286c:	bcf8      	pop	{r3, r4, r5, r6, r7}
   2286e:	bc08      	pop	{r3}
   22870:	469e      	mov	lr, r3
   22872:	4770      	bx	lr

00022874 <_fini>:
   22874:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   22876:	bf00      	nop
   22878:	bcf8      	pop	{r3, r4, r5, r6, r7}
   2287a:	bc08      	pop	{r3}
   2287c:	469e      	mov	lr, r3
   2287e:	4770      	bx	lr

00022880 <__init_array_start>:
   22880:	000204f1 	.word	0x000204f1

00022884 <__frame_dummy_init_array_entry>:
   22884:	00004289 00004ded 00007949 00009a4d     .B...M..Iy..M...
   22894:	00009dfd 0000a929 0000b4b9 0000d969     ....).......i...
   228a4:	0000edfd 0000fb25 00011a99 00011b7d     ....%.......}...
   228b4:	000134a9                                .4..

000228b8 <__do_global_dtors_aux_fini_array_entry>:
   228b8:	00004265                                eB..

000228bc <__fini_array_end>:
   228bc:	646e6148 	.word	0x646e6148
   228c0:	676e696c 	.word	0x676e696c
   228c4:	75616620 	.word	0x75616620
   228c8:	203a746c 	.word	0x203a746c
   228cc:	61656c63 	.word	0x61656c63
   228d0:	676e6972 	.word	0x676e6972
   228d4:	75616620 	.word	0x75616620
   228d8:	2073746c 	.word	0x2073746c
   228dc:	63207962 	.word	0x63207962
   228e0:	696c6379 	.word	0x696c6379
   228e4:	6520676e 	.word	0x6520676e
   228e8:	6c62616e 	.word	0x6c62616e
   228ec:	69732065 	.word	0x69732065
   228f0:	6c616e67 	.word	0x6c616e67
   228f4:	206f7420 	.word	0x206f7420
   228f8:	6f746f6d 	.word	0x6f746f6d
   228fc:	00002e72 	.word	0x00002e72
   22900:	69766f4d 	.word	0x69766f4d
   22904:	2e2e676e 	.word	0x2e2e676e
   22908:	69615720 	.word	0x69615720
   2290c:	676e6974 	.word	0x676e6974
   22910:	726f6620 	.word	0x726f6620
   22914:	464c4820 	.word	0x464c4820
   22918:	00000042 	.word	0x00000042
   2291c:	6f746f4d 	.word	0x6f746f4d
   22920:	61662072 	.word	0x61662072
   22924:	20746c75 	.word	0x20746c75
   22928:	65746564 	.word	0x65746564
   2292c:	64657463 	.word	0x64657463
   22930:	0000002e 	.word	0x0000002e
   22934:	62616e45 	.word	0x62616e45
   22938:	6120656c 	.word	0x6120656c
   2293c:	6d6f7475 	.word	0x6d6f7475
   22940:	63697461 	.word	0x63697461
   22944:	75616620 	.word	0x75616620
   22948:	6820746c 	.word	0x6820746c
   2294c:	6c646e61 	.word	0x6c646e61
   22950:	20676e69 	.word	0x20676e69
   22954:	73207962 	.word	0x73207962
   22958:	69747465 	.word	0x69747465
   2295c:	4820676e 	.word	0x4820676e
   22960:	4c444e41 	.word	0x4c444e41
   22964:	4f4d5f45 	.word	0x4f4d5f45
   22968:	5f524f54 	.word	0x5f524f54
   2296c:	4c554146 	.word	0x4c554146
   22970:	74205354 	.word	0x74205354
   22974:	2e31206f 	.word	0x2e31206f
   22978:	00000000 	.word	0x00000000
   2297c:	69746f4d 	.word	0x69746f4d
   22980:	6d206e6f 	.word	0x6d206e6f
   22984:	6e207961 	.word	0x6e207961
   22988:	6820746f 	.word	0x6820746f
   2298c:	20657661 	.word	0x20657661
   22990:	706d6f63 	.word	0x706d6f63
   22994:	6574656c 	.word	0x6574656c
   22998:	73612064 	.word	0x73612064
   2299c:	70786520 	.word	0x70786520
   229a0:	65746365 	.word	0x65746365
   229a4:	50202e64 	.word	0x50202e64
   229a8:	65636f72 	.word	0x65636f72
   229ac:	77206465 	.word	0x77206465
   229b0:	20687469 	.word	0x20687469
   229b4:	74756163 	.word	0x74756163
   229b8:	2e6e6f69 	.word	0x2e6e6f69
   229bc:	00000000 	.word	0x00000000
   229c0:	65766f4d 	.word	0x65766f4d
   229c4:	6e6f4420 	.word	0x6e6f4420
   229c8:	00000065 	.word	0x00000065
   229cc:	6f746f4d 	.word	0x6f746f4d
   229d0:	61662072 	.word	0x61662072
   229d4:	20746c75 	.word	0x20746c75
   229d8:	65746564 	.word	0x65746564
   229dc:	64657463 	.word	0x64657463
   229e0:	6f4d202e 	.word	0x6f4d202e
   229e4:	63206576 	.word	0x63206576
   229e8:	65636e61 	.word	0x65636e61
   229ec:	2e64656c 	.word	0x2e64656c
   229f0:	616e4520 	.word	0x616e4520
   229f4:	20656c62 	.word	0x20656c62
   229f8:	6f747561 	.word	0x6f747561
   229fc:	6974616d 	.word	0x6974616d
   22a00:	61662063 	.word	0x61662063
   22a04:	20746c75 	.word	0x20746c75
   22a08:	646e6168 	.word	0x646e6168
   22a0c:	676e696c 	.word	0x676e696c
   22a10:	20796220 	.word	0x20796220
   22a14:	74746573 	.word	0x74746573
   22a18:	20676e69 	.word	0x20676e69
   22a1c:	444e4148 	.word	0x444e4148
   22a20:	4d5f454c 	.word	0x4d5f454c
   22a24:	524f544f 	.word	0x524f544f
   22a28:	5541465f 	.word	0x5541465f
   22a2c:	2053544c 	.word	0x2053544c
   22a30:	31206f74 	.word	0x31206f74
   22a34:	0000002e 	.word	0x0000002e
   22a38:	69766f4d 	.word	0x69766f4d
   22a3c:	7420676e 	.word	0x7420676e
   22a40:	6f70206f 	.word	0x6f70206f
   22a44:	69746973 	.word	0x69746973
   22a48:	203a6e6f 	.word	0x203a6e6f
   22a4c:	00000000 	.word	0x00000000
   22a50:	6e492820 	.word	0x6e492820
   22a54:	20747570 	.word	0x20747570
   22a58:	664f2041 	.word	0x664f2041
   22a5c:	00002966 	.word	0x00002966
   22a60:	6e492820 	.word	0x6e492820
   22a64:	20747570 	.word	0x20747570
   22a68:	6e4f2041 	.word	0x6e4f2041
   22a6c:	00000029 	.word	0x00000029
   22a70:	6f746f4d 	.word	0x6f746f4d
   22a74:	6e452072 	.word	0x6e452072
   22a78:	656c6261 	.word	0x656c6261
   22a7c:	00000064 	.word	0x00000064
   22a80:	74696157 	.word	0x74696157
   22a84:	20676e69 	.word	0x20676e69
   22a88:	20726f66 	.word	0x20726f66
   22a8c:	42464c48 	.word	0x42464c48
   22a90:	002e2e2e 	.word	0x002e2e2e
   22a94:	62616e45 	.word	0x62616e45
   22a98:	676e696c 	.word	0x676e696c
   22a9c:	79616d20 	.word	0x79616d20
   22aa0:	746f6e20 	.word	0x746f6e20
   22aa4:	76616820 	.word	0x76616820
   22aa8:	6f632065 	.word	0x6f632065
   22aac:	656c706d 	.word	0x656c706d
   22ab0:	20646574 	.word	0x20646574
   22ab4:	65207361 	.word	0x65207361
   22ab8:	63657078 	.word	0x63657078
   22abc:	2e646574 	.word	0x2e646574
   22ac0:	6f725020 	.word	0x6f725020
   22ac4:	64656563 	.word	0x64656563
   22ac8:	74697720 	.word	0x74697720
   22acc:	61632068 	.word	0x61632068
   22ad0:	6f697475 	.word	0x6f697475
   22ad4:	00002e6e 	.word	0x00002e6e
   22ad8:	6f746f4d 	.word	0x6f746f4d
   22adc:	65522072 	.word	0x65522072
   22ae0:	00796461 	.word	0x00796461

00022ae4 <_ZTVN9ClearCore9ConnectorE>:
	...
   22aec:	00004769 0001332d 0001332d 0001332d     iG..-3..-3..-3..
   22afc:	0001332d 0001332d 0001332d 0000476d     -3..-3..-3..mG..
   22b0c:	0001332d 0001332d                       -3..-3..

00022b14 <_ZTVN9ClearCore9DigitalInE>:
	...
   22b1c:	00004775 00004779 00004785 00004789     uG..yG...G...G..
   22b2c:	0000479d 0000478d 00004791 00004795     .G...G...G...G..
   22b3c:	00004891 000047c5                       .H...G..

00022b44 <CSWTCH.21>:
   22b44:	00000004 00000005 00000003 00000001     ................
   22b54:	00000002                                ....

00022b58 <CSWTCH.95>:
   22b58:	02030406 00000002                       ........

00022b60 <_ZN9ClearCoreL11tcc_modulesE>:
   22b60:	41016000 41018000 42000c00 42001000     .`.A...A...B...B
   22b70:	43001000                                ...C

00022b74 <_ZTVN9ClearCore11MotorDriverE>:
	...
   22b7c:	00004e0d 00004e11 00004dfd 00004e01     .N...N...M...N..
   22b8c:	0000479d 0000478d 00004e05 00004795     .G...G...N...G..
   22b9c:	000054e1 00005d15 00005b3d 00005c35     .T...]..=[..5\..
   22bac:	00004f75 ffffffd0 00000000 00005c2d     uO..........-\..
   22bbc:	00005d0d 00004fc5                       .]...O..

00022bc4 <_ZZN9ClearCore11MotorDriver10InitializeE13ClearCorePinsE10tc_modules>:
   22bc4:	40003800 40003c00 4101a000 4101c000     .8.@.<.@...A...A
   22bd4:	42001400 42001800 43001400 43001800     ...B...B...C...C

00022be4 <_ZTVN9ClearCore7ISerialE>:
	...
   22bec:	0001332d 0001332d 0001332d 0001332d     -3..-3..-3..-3..
   22bfc:	0001332d 0001332d 0001332d 0001332d     -3..-3..-3..-3..
   22c0c:	0001332d 0001332d 0001332d 0001332d     -3..-3..-3..-3..
   22c1c:	0001332d 0001332d 0001332d 0001332d     -3..-3..-3..-3..
   22c2c:	0001332d 0001332d                       -3..-3..

00022c34 <_ZTVN9ClearCore9SerialUsbE>:
	...
   22c3c:	000060b1 000060a5 000060c9 000060d5     .`...`...`...`..
   22c4c:	000060e1 000060ed 000060f9 00006105     .`...`...`...a..
   22c5c:	00006111 0000611d 00006129 000060b1     .a...a..)a...`..
   22c6c:	000060bd 000060bd 00006029 00006035     .`...`..)`..5`..
   22c7c:	00006039 00006045 00006051 0000605d     9`..E`..Q`..]`..
   22c8c:	00006071 00006135 00006159 00006189     q`..5a..Ya...a..
   22c9c:	0000607d 00006089 00006099 fffffffc     }`...`...`......
   22cac:	00000000 00006055 00006069 00006075     ....U`..i`..u`..
   22cbc:	00006151 00006181 000061c9 00006081     Qa...a...a...`..
   22ccc:	0000476d 0000609d 00006091 008061fc     mG...`...`...a..
   22cdc:	00806010 00806014 00806018              .`...`...`..

00022ce8 <_ZTVN9ClearCore12SdCardDriverE>:
	...
   22cf0:	0000fd21 0000fd31 00010c4d 0000ffa9     !...1...M.......
   22d00:	0000fe55 00007959 0000fd45 0000fd7d     U...Yy..E...}...
   22d10:	0000fdbd 0000fd99 0000fda9 0000fdfd     ................
   22d20:	0000fd19 00007961 000100c1 0000795d     ....ay......]y..
   22d30:	00010295 000101b1                       ........

00022d38 <_ZTVN9ClearCore10XBeeDriverE>:
	...
   22d40:	0000fd21 0000fd31 00010c4d 0000ffa9     !...1...M.......
   22d50:	0000fe55 00007959 0000fd45 0000fd7d     U...Yy..E...}...
   22d60:	0000fdbd 0000fd99 0000fda9 0000fdfd     ................
   22d70:	0000fd19 00007961 000100c1 0000795d     ....ay......]y..
   22d80:	00010295 000101b1 40003c00 4101a000     .........<.@...A
   22d90:	43001400                                ...C

00022d94 <_ZN9ClearCore10hBridgeConE>:
   22d94:	20001374 200013f8                       t.. ... 

00022d9c <_ZN9ClearCore15MotorConnectorsE>:
   22d9c:	20000b68 20000cb0 20000df8 20000f40     h.. ... ... @.. 

00022dac <_ZN9ClearCoreL10ConnectorsE>:
   22dac:	200011e8 20001254 200012b4 20001314     ... T.. ... ... 
   22dbc:	20001374 200013f8 20001158 20001188     t.. ... X.. ... 
   22dcc:	200011b8 20000b24 2000108c 200010d0     ... $.. ... ... 
   22ddc:	20001114 2000147c 20000b68 20000cb0     ... |.. h.. ... 
   22dec:	20000df8 20000f40 200015dc 20001734     ... @.. ... 4.. 
   22dfc:	2000148c                                ... 

00022e00 <_ZN9ClearCoreL10MicroSD_SSE>:
   22e00:	0504003d ffffff00 ffffffff 00ff0500     =...............

00022e10 <_ZN9ClearCoreL10XBee_Rx_INE>:
   22e10:	08180150 ffffff00 ffff0102 00ffffff     P...............

00022e20 <_ZN9ClearCoreL11Com0_RTS_SSE>:
   22e20:	02120142 ffffff00 ffff0207 00040001     B...............

00022e30 <_ZN9ClearCoreL11Com0_RX_SCKE>:
   22e30:	04140144 ffffff00 ffff0107 00060201     D...............

00022e40 <_ZN9ClearCoreL11Com1_RTS_SSE>:
   22e40:	0a0a001c ffffff00 00010200 00040200     ................

00022e50 <_ZN9ClearCoreL11Com1_RX_SCKE>:
   22e50:	0909001b ff03ff00 01000100 00ff0100     ................

00022e60 <_ZN9ClearCoreL11IN06n_QuadAE>:
   22e60:	00100238 ffffff01 ffff0006 00ff0000     8...............

00022e70 <_ZN9ClearCoreL11IN07n_QuadBE>:
   22e70:	01110239 ffffff01 ffff0106 00ff0100     9...............

00022e80 <_ZN9ClearCoreL11IN08n_QuadIE>:
   22e80:	0212023a ffffff01 ffff0206 00ff0200     :...............

00022e90 <_ZN9ClearCoreL11IN09n_AIN09E>:
   22e90:	0707010e ff09ff01 ffffffff 00ffffff     ................

00022ea0 <_ZN9ClearCoreL11IN10n_AIN10E>:
   22ea0:	0606010d ff08ff01 ffffffff 00ffffff     ................

00022eb0 <_ZN9ClearCoreL11IN11n_AIN11E>:
   22eb0:	0505010a ff07ff01 ffffffff 00ffffff     ................

00022ec0 <_ZN9ClearCoreL11IN12n_AIN12E>:
   22ec0:	03030206 ff05ff01 ffffffff 00ffffff     ................

00022ed0 <_ZN9ClearCoreL11MicroSD_SCKE>:
   22ed0:	09090110 ff01ff00 01040104 00ffffff     ................

00022ee0 <_ZN9ClearCoreL11XBee_CTS_INE>:
   22ee0:	09190253 ffffff00 ffff0302 00ffffff     S...............

00022ef0 <_ZN9ClearCoreL11XBee_Tx_OUTE>:
   22ef0:	09190151 ffffff00 ffff0002 00ffffff     Q...............

00022f00 <_ZN9ClearCoreL12Com0_TX_MOSIE>:
   22f00:	05150145 ffffff00 ffff0007 00070301     E...............

00022f10 <_ZN9ClearCoreL12Com1_TX_MOSIE>:
   22f10:	ff08001a ff02ff00 00000000 00ff0000     ................

00022f20 <_ZN9ClearCoreL12MicroSD_MISOE>:
   22f20:	0a0a0120 ffffff00 00050204 00040400      ...............

00022f30 <_ZN9ClearCoreL12MicroSD_MOSIE>:
   22f30:	0808010f ff00ff00 00040004 00ffffff     ................

00022f40 <_ZN9ClearCoreL12Mtr0_An_SCTxE>:
   22f40:	07170049 ffffff00 01040005 00ff0701     I...............

00022f50 <_ZN9ClearCoreL12XBee_RTS_OUTE>:
   22f50:	08180252 ffffff00 ffff0202 00ffffff     R...............

00022f60 <_ZN9ClearCoreL13Com0_CTS_MISOE>:
   22f60:	03130143 ffffff00 ffff0307 00050101     C...............

00022f70 <_ZN9ClearCoreL13Com1_CTS_MISOE>:
   22f70:	0b0b001d ffffff00 01010300 00050300     ................

00022f80 <_ZN9ClearCoreL13IN00n_Aout00nE>:
   22f80:	05050012 01ffff00 0100ffff 00ffffff     ................

00022f90 <_ZN9ClearCoreL14Mtr0_HLFB_SCRxE>:
   22f90:	04140046 ffffff01 00070205 00ff0401     F...............

00022fa0 <_ZN9ClearCoreL14OUT04_ENABLE04E>:
   22fa0:	00100140 ffffff00 00060005 00020003     @...............

00022fb0 <_ZN9ClearCoreL14OUT05_ENABLE05E>:
   22fb0:	03030164 ffffff00 0106ffff 00ffffff     d...............

00022fc0 <_ZN9ClearCoreL17Polarity04_PWM04AE>:
   22fc0:	0e0e0124 ffffff00 00050204 00000004     $...............

00022fd0 <_ZN9ClearCoreL17Polarity05_PWM05AE>:
   22fd0:	0c0c0122 ffffff00 00040004 00060003     "...............

00022fe0 <_ZN9ClearCoreL18Mtr2_B_Sdrvr2_PWMBE>:
   22fe0:	0d0d022b ffffff00 ffff0107 00ff0300     +...............

00022ff0 <_ZN9ClearCoreL18Mtr3_B_Sdrvr3_PWMBE>:
   22ff0:	0a0a0228 ffffff00 ffff0206 00ff0000     (...............

00023000 <_ZN9ClearCoreL18Polarity04S_PWM04BE>:
   23000:	0f0f0125 ffffff00 01050304 00010104     %...............

00023010 <_ZN9ClearCoreL18Polarity05S_PWM05BE>:
   23010:	0d0d0123 ffffff00 01040104 00070103     #...............

00023020 <_ZN9ClearCoreL19Mtr2_An_Sdrvr2_PWMAE>:
   23020:	06160048 ffffff00 00040003 00ff0601     H...............

00023030 <_ZN9ClearCoreL19Mtr3_An_Sdrvr3_PWMAE>:
   23030:	00100034 ffffff00 00020001 00020001     4...............

00023040 <_ZN9ClearCoreL21Mtr2_HLFB_Sdrvr2_TrigE>:
   23040:	0a1a0254 ffffff01 ffffffff 00ffffff     T...............

00023050 <_ZN9ClearCoreL21Mtr3_HLFB_Sdrvr3_TrigE>:
   23050:	0f1f0160 ffffff01 0100ffff 00ff0104     `...............

00023060 <_ZN9ClearCoreL5IN01nE>:
   23060:	02110107 00ffff00 ffffffff 00ffffff     ................

00023070 <_ZN9ClearCoreL5IN02nE>:
   23070:	03030008 ffffff00 ffffffff 00ffffff     ................

00023080 <_ZN9ClearCoreL5IN03nE>:
   23080:	04150211 ffffff00 0000ffff 00ffffff     ................

00023090 <_ZN9ClearCoreL5IN04nE>:
   23090:	0b1b0255 ffffff00 ffff0001 00ffffff     U...............

000230a0 <_ZN9ClearCoreL5IN05nE>:
   230a0:	0313023b ffffff00 ffff0306 00ff0300     ;...............

000230b0 <_ZN9ClearCoreL5OUT00E>:
   230b0:	00000001 ffffff00 0002ffff 00ffffff     ................

000230c0 <_ZN9ClearCoreL5OUT01E>:
   230c0:	01010002 ffffff00 0102ffff 00ffffff     ................

000230d0 <_ZN9ClearCoreL5OUT02E>:
   230d0:	06060013 ffffff00 0001ffff 00ffffff     ................

000230e0 <_ZN9ClearCoreL5OUT03E>:
   230e0:	07070014 ffffff00 0101ffff 00ffffff     ................

000230f0 <_ZN9ClearCoreL6Aout00E>:
   230f0:	02020007 01ffff00 0100ffff 00ffffff     ................

00023100 <_ZN9ClearCoreL6Mtr0_BE>:
   23100:	0e0e022c ffffff00 ffff0207 00ff0400     ,...............

00023110 <_ZN9ClearCoreL6Mtr1_BE>:
   23110:	0f0f022d ffffff00 ffff0307 00ff0500     -...............

00023120 <_ZN9ClearCoreL7Mtr1_AnE>:
   23120:	05150047 ffffff00 01070305 00ff0501     G...............

00023130 <_ZN9ClearCoreL9Mtr1_HLFBE>:
   23130:	0b0b0121 ffffff01 0105ffff 00050500     !...............
   23140:	00000080 00000040 00000020 00000010     ....@... .......
   23150:	00000008 00000004 01000000 02000000     ................
   23160:	04000000 08000000 00800000 00400000     ..............@.
   23170:	00200000 00004000 00008000 00040000     .. ..@..........
   23180:	00080000                                ....

00023184 <_ZTVN9ClearCore13StepGeneratorE>:
	...
   2318c:	0000b4c9 0000b53d 0001332d              ....=...-3..

00023198 <_ZN9ClearCoreL11IN06n_QuadAE>:
   23198:	00100238 ffffff01 ffff0006 00ff0000     8...............

000231a8 <_ZN9ClearCoreL11IN07n_QuadBE>:
   231a8:	01110239 ffffff01 ffff0106 00ff0100     9...............

000231b8 <_ZN9ClearCoreL11IN08n_QuadIE>:
   231b8:	0212023a ffffff01 ffff0206 00ff0200     :...............
   231c8:	752f2e2e 642f6273 63697665 73752f65     ../usb/device/us
   231d8:	2e636462 00000063 682f2e2e 752f6c61     bdc.c...../hal/u
   231e8:	736c6974 6372732f 6974752f 6c5f736c     tils/src/utils_l
   231f8:	2e747369 00000063 00023240 00023230     ist.c...@2..02..
   23208:	00023210 00023220                       .2.. 2..

00023210 <_ZN9ClearCoreL11Sdrvr2_iMonE>:
   23210:	01010204 ff0bff00 ffffffff 00ffffff     ................

00023220 <_ZN9ClearCoreL11Sdrvr3_iMonE>:
   23220:	00000203 ff0aff00 ffffffff 00ffffff     ................

00023230 <_ZN9ClearCoreL24Vsupply_MON_IO_4and5_RSTE>:
   23230:	02020205 ff04ff00 ffffffff 00ffffff     ................

00023240 <_ZN9ClearCoreL9_5VOB_MONE>:
   23240:	04040109 ff06ff00 ffffffff 00ffffff     ................

00023250 <_ZTVN9ClearCore21DigitalInOutAnalogOutE>:
	...
   23258:	0000d9bd 0000dbed 0000d9c1 0000d9c5     ................
   23268:	0000dce5 0000dd01 0000d9b5 00004795     .............G..
   23278:	0000dbd5 0000dd9d                       ........

00023280 <_ZTVN9ClearCore17DigitalInAnalogInE>:
	...
   23288:	0000de3d 0000de4d 0000de41 0000de45     =...M...A...E...
   23298:	0000e0a1 0000de49 00004791 00004795     ....I....G...G..
   232a8:	0000df75 0000dfed                       u.......

000232b0 <_ZTVN9ClearCore12DigitalInOutE>:
	...
   232b8:	0000e0e9 0000e1bd 0000e0ed 0000e0f1     ................
   232c8:	0000e659 0000e105 0000d9b5 00004795     Y............G..
   232d8:	0000e44d 0000e699                       M.......

000232e0 <_ZZN9ClearCore12DigitalInOutC4ENS_13ShiftRegister5MasksEPK15PeripheralRouteS5_bE10tc_modules>:
   232e0:	40003800 40003c00 4101a000 4101c000     .8.@.<.@...A...A
   232f0:	42001400 42001800 43001400 43001800     ...B...B...C...C

00023300 <_ZTVN9ClearCore19DigitalInOutHBridgeE>:
	...
   23308:	0000e70d 0000eba5 0000e711 0000e715     ................
   23318:	0000e7d9 0000e815 0000d9b5 00004795     .............G..
   23328:	0000e9c9 0000eadd                       ........

00023330 <_ZZN9ClearCore19DigitalInOutHBridgeC4ENS_13ShiftRegister5MasksEPK15PeripheralRouteS5_S5_S5_4IRQnbE11tcc_modules>:
   23330:	41016000 41018000 42000c00 42001000     .`.A...A...B...B
   23340:	43001000                                ...C

00023344 <_ZTVN9ClearCore7CcioPinE>:
	...
   2334c:	0000fb35 0000fb91 0000fb39 0000fb3d     5.......9...=...
   2335c:	0000fc01 0000fc5d 0000fc3d 0000476d     ....]...=...mG..
   2336c:	0000fb4d 0000fb51                       M...Q...

00023374 <_ZTVN9ClearCore10SerialBaseE>:
	...
   2337c:	0000fd21 0000fd31 00010c4d 0000ffa9     !...1...M.......
   2338c:	0000fe55 00007959 0000fd45 0000fd7d     U...Yy..E...}...
   2339c:	0000fdbd 0000fd99 0000fda9 0000fdfd     ................
   233ac:	0000fd19 00007961 000100c1 0000795d     ....ay......]y..
   233bc:	00010295 000101b1                       ........

000233c4 <_ZZN9ClearCore10SerialBaseC4EPK15PeripheralRouteS3_S3_S3_hE16sercom_instances>:
   233c4:	40003000 40003400 41012000 41014000     .0.@.4.@. .A.@.A
   233d4:	43000000 43000400 43000800 43000c00     ...C...C...C...C

000233e4 <_ZTVN9ClearCore12SerialDriverE>:
	...
   233ec:	0000fd21 0000fd31 0001131d 00011371     !...1.......q...
   233fc:	000111ad 00007959 0000fd45 0000fd7d     ....Yy..E...}...
   2340c:	0000fdbd 0000fd99 0000fda9 0000fdfd     ................
   2341c:	0000fd19 00007961 000100c1 0000795d     ....ay......]y..
   2342c:	00010295 000101b1 00011101 000111c9     ................
   2343c:	00011111 0001111d 0001112d 000114b5     ........-.......
   2344c:	00011141 000113bd 0001114d fffffebc     A.......M.......
   2345c:	00000000 00011109 00011315 00011115     ................
   2346c:	00011125 00011139 00011569 00011145     %...9...i...E...
   2347c:	0000476d 00011151 000114ad              mG..Q.......

00023488 <_ZTVN9ClearCore9LedDriverE>:
	...
   23490:	00011571 00011575 00011581 00011585     q...u...........
   234a0:	00011599 000115b1 00011589 0000476d     ............mG..
   234b0:	0001158d 00011591                       ........

000234b8 <_usb_ep_cfgs>:
   234b8:	20001f20 00000000 00000040 20001f60      .. ....@...`.. 
   234c8:	00000000 00000040 20001fa0 00000000     ....@...... ....
   234d8:	00000040                                @...

000234dc <sinTable_q15>:
   234dc:	01920000 04b60324 07d90648 0afb096b     ....$...H...k...
   234ec:	0e1c0c8c 113a0fab 145512c8 176e15e2     ......:...U...n.
   234fc:	1a8318f9 1d931c0c 209f1f1a 23a72224     ........... $".#
   2350c:	26a82528 29a42827 2c992b1f 2f872e11     (%.&'(.).+.,.../
   2351c:	326e30fc 354e33df 382536ba 3af3398d     .0n2.3N5.6%8.9.:
   2352c:	3db83c57 40743f17 432641ce 45cd447b     W<.=.?t@.A&C{D.E
   2353c:	486a471d 4afb49b4 4d814c40 4ffb4ec0     .GjH.I.J@L.M.N.O
   2354c:	52695134 54ca539b 571e55f6 59645843     4QiR.S.T.U.WCXdY
   2355c:	5b9d5a82 5dc85cb4 5fe45ed7 61f160ec     .Z.[.\.].^._.`.a
   2356c:	63ef62f2 65de64e9 67bd66d0 698c68a7     .b.c.d.e.f.g.h.i
   2357c:	6b4b6a6e 6cf96c24 6e976dca 70236f5f     njKk$l.l.m.n_o#p
   2358c:	719e70e3 73087255 746073b6 75a67505     .p.qUr.s.s`t.u.u
   2359c:	76d97642 77fb776c 790a7885 7a06798a     Bv.vlw.w.x.y.y.z
   235ac:	7aef7a7d 7bc67b5d 7c897c2a 7d3a7ce4     }z.z]{.{*|.|.|:}
   235bc:	7dd67d8a 7e607e1e 7ed67e9d 7f387f0a     .}.}.~`~.~.~..8.
   235cc:	7f877f62 7fc27fa7 7fea7fd9 7ffe7ff6     b...............
   235dc:	7ffe7fff 7fea7ff6 7fc27fd9 7f877fa7     ................
   235ec:	7f387f62 7ed67f0a 7e607e9d 7dd67e1e     b.8....~.~`~.~.}
   235fc:	7d3a7d8a 7c897ce4 7bc67c2a 7aef7b5d     .}:}.|.|*|.{]{.z
   2360c:	7a067a7d 790a798a 77fb7885 76d9776c     }z.z.y.y.x.wlw.v
   2361c:	75a67642 74607505 730873b6 719e7255     Bv.u.u`t.s.sUr.q
   2362c:	702370e3 6e976f5f 6cf96dca 6b4b6c24     .p#p_o.n.m.l$lKk
   2363c:	698c6a6e 67bd68a7 65de66d0 63ef64e9     nj.i.h.g.f.e.d.c
   2364c:	61f162f2 5fe460ec 5dc85ed7 5b9d5cb4     .b.a.`._.^.].\.[
   2365c:	59645a82 571e5843 54ca55f6 5269539b     .ZdYCX.W.U.T.SiR
   2366c:	4ffb5134 4d814ec0 4afb4c40 486a49b4     4Q.O.N.M@L.J.IjH
   2367c:	45cd471d 4326447b 407441ce 3db83f17     .G.E{D&C.At@.?.=
   2368c:	3af33c57 3825398d 354e36ba 326e33df     W<.:.9%8.6N5.3n2
   2369c:	2f8730fc 2c992e11 29a42b1f 26a82827     .0./...,.+.)'(.&
   236ac:	23a72528 209f2224 1d931f1a 1a831c0c     (%.#$". ........
   236bc:	176e18f9 145515e2 113a12c8 0e1c0fab     ..n...U...:.....
   236cc:	0afb0c8c 07d9096b 04b60648 01920324     ....k...H...$...
   236dc:	fe6e0000 fb4afcdc f827f9b8 f505f695     ..n...J...'.....
   236ec:	f1e4f374 eec6f055 ebabed38 e892ea1e     t...U...8.......
   236fc:	e57de707 e26de3f4 df61e0e6 dc59dddc     ..}...m...a...Y.
   2370c:	d958dad8 d65cd7d9 d367d4e1 d079d1ef     ..X...\...g...y.
   2371c:	cd92cf04 cab2cc21 c7dbc946 c50dc673     ....!...F...s...
   2372c:	c248c3a9 bf8cc0e9 bcdabe32 ba33bb85     ..H.....2.....3.
   2373c:	b796b8e3 b505b64c b27fb3c0 b005b140     ....L.......@...
   2374c:	ad97aecc ab36ac65 a8e2aa0a a69ca7bd     ....e.6.........
   2375c:	a463a57e a238a34c a01ca129 9e0f9f14     ~.c.L.8.).......
   2376c:	9c119d0e 9a229b17 98439930 96749759     ......".0.C.Y.t.
   2377c:	94b59592 930793dc 91699236 8fdd90a1     ........6.i.....
   2378c:	8e628f1d 8cf88dab 8ba08c4a 8a5a8afb     ..b.....J.....Z.
   2379c:	892789be 88058894 86f6877b 85fa8676     ..'.....{...v...
   237ac:	85118583 843a84a3 837783d6 82c6831c     ......:...w.....
   237bc:	822a8276 81a081e2 812a8163 80c880f6     v.*.....c.*.....
   237cc:	8079809e 803e8059 80168027 8002800a     ..y.Y.>.'.......
   237dc:	80028000 8016800a 803e8027 80798059     ........'.>.Y.y.
   237ec:	80c8809e 812a80f6 81a08163 822a81e2     ......*.c.....*.
   237fc:	82c68276 8377831c 843a83d6 851184a3     v.....w...:.....
   2380c:	85fa8583 86f68676 8805877b 89278894     ....v...{.....'.
   2381c:	8a5a89be 8ba08afb 8cf88c4a 8e628dab     ..Z.....J.....b.
   2382c:	8fdd8f1d 916990a1 93079236 94b593dc     ......i.6.......
   2383c:	96749592 98439759 9a229930 9c119b17     ..t.Y.C.0.".....
   2384c:	9e0f9d0e a01c9f14 a238a129 a463a34c     ........).8.L.c.
   2385c:	a69ca57e a8e2a7bd ab36aa0a ad97ac65     ~.........6.e...
   2386c:	b005aecc b27fb140 b505b3c0 b796b64c     ....@.......L...
   2387c:	ba33b8e3 bcdabb85 bf8cbe32 c248c0e9     ..3.....2.....H.
   2388c:	c50dc3a9 c7dbc673 cab2c946 cd92cc21     ....s...F...!...
   2389c:	d079cf04 d367d1ef d65cd4e1 d958d7d9     ..y...g...\...X.
   238ac:	dc59dad8 df61dddc e26de0e6 e57de3f4     ..Y...a...m...}.
   238bc:	e892e707 ebabea1e eec6ed38 f1e4f055     ........8...U...
   238cc:	f505f374 f827f695 fb4af9b8 fe6efcdc     t.....'...J...n.
   238dc:	00000000 65727570 72697620 6c617574     ....pure virtual
   238ec:	74656d20 20646f68 6c6c6163 000a6465      method called..
   238fc:	3a647473 6461623a 6c6c615f 0000636f     std::bad_alloc..

0002390c <_ZTISt9bad_alloc>:
   2390c:	00023a2c 00023918 0002396c              ,:...9..l9..

00023918 <_ZTSSt9bad_alloc>:
   23918:	62397453 615f6461 636f6c6c 00000000     St9bad_alloc....

00023928 <_ZTVSt9bad_alloc>:
   23928:	00000000 0002390c 00013349 0001335d     .....9..I3..]3..
   23938:	00013341 3a647473 6461623a 6378655f     A3..std::bad_exc
   23948:	69747065 00006e6f                       eption..

00023950 <_ZTIN10__cxxabiv115__forced_unwindE>:
   23950:	00023aa0 00023974                       .:..t9..

00023958 <_ZTIN10__cxxabiv119__foreign_exceptionE>:
   23958:	00023aa0 00023994                       .:...9..

00023960 <_ZTISt13bad_exception>:
   23960:	00023a2c 000239b8 0002396c              ,:...9..l9..

0002396c <_ZTISt9exception>:
   2396c:	00023aa0 000239cc                       .:...9..

00023974 <_ZTSN10__cxxabiv115__forced_unwindE>:
   23974:	5f30314e 7878635f 76696261 5f353131     N10__cxxabiv115_
   23984:	726f665f 5f646563 69776e75 0045646e     _forced_unwindE.

00023994 <_ZTSN10__cxxabiv119__foreign_exceptionE>:
   23994:	5f30314e 7878635f 76696261 5f393131     N10__cxxabiv119_
   239a4:	726f665f 6e676965 6378655f 69747065     _foreign_excepti
   239b4:	00456e6f                                onE.

000239b8 <_ZTSSt13bad_exception>:
   239b8:	33317453 5f646162 65637865 6f697470     St13bad_exceptio
   239c8:	0000006e                                n...

000239cc <_ZTSSt9exception>:
   239cc:	65397453 70656378 6e6f6974 00000000     St9exception....

000239dc <_ZTVSt13bad_exception>:
   239dc:	00000000 00023960 000134d5 000134e1     ....`9...4...4..
   239ec:	000134d9                                .4..

000239f0 <_ZTIN10__cxxabiv120__si_class_type_infoE>:
   239f0:	00023a2c 000239fc 00023a68              ,:...9..h:..

000239fc <_ZTSN10__cxxabiv120__si_class_type_infoE>:
   239fc:	5f30314e 7878635f 76696261 5f303231     N10__cxxabiv120_
   23a0c:	5f69735f 73616c63 79745f73 695f6570     _si_class_type_i
   23a1c:	456f666e 00000000                       nfoE....

00023a24 <_ZTVN10__cxxabiv120__si_class_type_infoE>:
   23a24:	00000000 000239f0 000136a9 000136bd     .....9...6...6..
   23a34:	000137d5 000137d5 00013891 00013805     .7...7...8...8..
   23a44:	000137a5 00013715 000136d9              .7...7...6..

00023a50 <_ZTISt9type_info>:
   23a50:	00023aa0 00023a58                       .:..X:..

00023a58 <_ZTSSt9type_info>:
   23a58:	74397453 5f657079 6f666e69 00000000     St9type_info....

00023a68 <_ZTIN10__cxxabiv117__class_type_infoE>:
   23a68:	00023a2c 00023a74 00023a50              ,:..t:..P:..

00023a74 <_ZTSN10__cxxabiv117__class_type_infoE>:
   23a74:	5f30314e 7878635f 76696261 5f373131     N10__cxxabiv117_
   23a84:	616c635f 745f7373 5f657079 6f666e69     _class_type_info
   23a94:	00000045                                E...

00023a98 <_ZTVN10__cxxabiv117__class_type_infoE>:
   23a98:	00000000 00023a68 00013849 0001385d     ....h:..I8..]8..
   23aa8:	000137d5 000137d5 00013891 00013805     .7...7...8...8..
   23ab8:	00013879 000138bd 0001383d 6d726574     y8...8..=8..term
   23ac8:	74616e69 61632065 64656c6c 63657220     inate called rec
   23ad8:	69737275 796c6576 0000000a 6d726574     ursively....term
   23ae8:	74616e69 61632065 64656c6c 74666120     inate called aft
   23af8:	74207265 776f7268 20676e69 69206e61     er throwing an i
   23b08:	6174736e 2065636e 2720666f 00000000     nstance of '....
   23b18:	00000a27 6d726574 74616e69 61632065     '...terminate ca
   23b28:	64656c6c 74697720 74756f68 206e6120     lled without an 
   23b38:	69746361 65206576 70656378 6e6f6974     active exception
   23b48:	0000000a 68772020 29287461 0020203a     ....  what():  .

00023b58 <standard_subs>:
   23b58:	00000074 0002433c 00000003 0002433c     t...<C......<C..
   23b68:	00000003 00000000 00000000 00000061     ............a...
   23b78:	00024650 0000000e 00024650 0000000e     PF......PF......
   23b88:	00024660 00000009 00000062 0002466c     `F......b...lF..
   23b98:	00000011 0002466c 00000011 00024680     ....lF.......F..
   23ba8:	0000000c 00000073 00024690 0000000b     ....s....F......
   23bb8:	0002469c 00000046 00024680 0000000c     .F..F....F......
   23bc8:	00000069 000246e4 0000000c 000246f4     i....F.......F..
   23bd8:	00000031 00024728 0000000d 0000006f     1...(G......o...
   23be8:	00024738 0000000c 00024748 00000031     8G......HG..1...
   23bf8:	0002477c 0000000d 00000064 0002478c     |G......d....G..
   23c08:	0000000d 0002479c 00000032 000247d0     .....G..2....G..
   23c18:	0000000e                                ....

00023c1c <cplus_demangle_builtin_types>:
   23c1c:	000249e0 0000000b 000249e0 0000000b     .I.......I......
   23c2c:	00000000 000249ec 00000004 000249f4     .....I.......I..
   23c3c:	00000007 00000007 000249fc 00000004     .........I......
   23c4c:	00024a04 00000004 00000000 00024a0c     .J...........J..
   23c5c:	00000006 00024a0c 00000006 00000008     .....J..........
   23c6c:	00024a14 0000000b 00024a14 0000000b     .J.......J......
   23c7c:	00000008 00024a20 00000005 00024a20     .... J...... J..
   23c8c:	00000005 00000008 00024a28 0000000a     ........(J......
   23c9c:	00024a28 0000000a 00000008 00024a34     (J..........4J..
   23cac:	0000000d 00024a34 0000000d 00000000     ....4J..........
   23cbc:	00024a44 00000003 00024a44 00000003     DJ......DJ......
   23ccc:	00000001 00024a48 0000000c 00024a58     ....HJ......XJ..
   23cdc:	00000008 00000002 00000000 00000000     ................
	...
   23cf8:	00024a64 00000004 00024a64 00000004     dJ......dJ......
   23d08:	00000003 00024a6c 0000000d 00024a6c     ....lJ......lJ..
   23d18:	0000000d 00000004 00024a7c 00000008     ........|J......
   23d28:	00024a7c 00000008 00000000 00024a88     |J...........J..
   23d38:	00000011 00024a88 00000011 00000000     .....J..........
	...
   23d84:	00024a9c 00000005 00024a9c 00000005     .J.......J......
   23d94:	00000000 00024aa4 0000000e 00024aa4     .....J.......J..
   23da4:	0000000e 00000000 00000000 00000000     ................
	...
   23dc0:	00024ab4 00000004 00024ab4 00000004     .J.......J......
   23dd0:	00000009 00024abc 00000007 000249fc     .....J.......I..
   23de0:	00000004 00000000 00024ac4 00000009     .........J......
   23df0:	00024a64 00000004 00000005 00024ad0     dJ...........J..
   23e00:	00000012 00024ad0 00000012 00000006     .....J..........
   23e10:	00022a90 00000003 00022a90 00000003     .*.......*......
   23e20:	00000000 00024ae4 00000009 00024ae4     .....J.......J..
   23e30:	00000009 00000000 00024af0 00000009     .........J......
   23e40:	00024af0 00000009 00000000 00024afc     .J...........J..
   23e50:	0000000a 00024afc 0000000a 00000000     .....J..........
   23e60:	00024b08 00000004 00024b08 00000004     .K.......K......
   23e70:	00000008 00024b10 00000008 00024b10     .....K.......K..
   23e80:	00000008 00000000 00024b1c 00000008     .........K......
   23e90:	00024b1c 00000008 00000000 00024b28     .K..........(K..
   23ea0:	00000011 00024b28 00000011 00000000     ....(K..........

00023eb0 <cplus_demangle_operators>:
   23eb0:	000247e0 000247e4 00000002 00000002     .G...G..........
   23ec0:	000247e8 000247ec 00000001 00000002     .G...G..........
   23ed0:	000247f0 00024614 00000002 00000002     .G...F..........
   23ee0:	0002450c 000247f4 00000001 00000001     .E...G..........
   23ef0:	000247f8 000247f4 00000001 00000002     .G...G..........
   23f00:	000247fc 00024800 00000008 00000001     .G...H..........
   23f10:	0002480c 00024800 00000008 00000001     .H...H..........
   23f20:	00024810 00024814 0000000a 00000002     .H...H..........
   23f30:	0002431c 00024820 00000002 00000002     .C.. H..........
   23f40:	00024824 00024828 00000001 00000002     $H..(H..........
   23f50:	0002482c 00024830 00000001 00000001     ,H..0H..........
   23f60:	00024834 00024838 00000002 00000002     4H..8H..........
   23f70:	0002483c 00024840 00000009 00000001     <H..@H..........
   23f80:	0002484c 00024850 0000000c 00000002     LH..PH..........
   23f90:	00024860 00024864 00000001 00000001     `H..dH..........
   23fa0:	00024868 0002486c 00000007 00000001     hH..lH..........
   23fb0:	00024874 00024878 00000002 00000002     tH..xH..........
   23fc0:	00024320 000249a8 00000001 00000002      C...I..........
   23fd0:	0002487c 00024880 00000001 00000002     |H...H..........
   23fe0:	00024884 00024888 00000002 00000002     .H...H..........
   23ff0:	0002488c 00024890 00000001 00000002     .H...H..........
   24000:	00024894 00024898 00000002 00000002     .H...H..........
   24010:	0002489c 00022a90 00000003 00000003     .H...*..........
   24020:	000248a0 00022a90 00000003 00000003     .H...*..........
   24030:	000248a4 00022a90 00000003 00000002     .H...*..........
   24040:	000248a8 00022a90 00000003 00000002     .H...*..........
   24050:	000248ac 000248b0 00000002 00000002     .H...H..........
   24060:	00024510 00024364 00000002 00000001     .E..dC..........
   24070:	000248b4 00024724 00000001 00000002     .H..$G..........
   24080:	00024518 00024384 00000002 00000002     .E...C..........
   24090:	000248b8 000248bc 00000003 00000002     .H...H..........
   240a0:	00024a10 000248c0 00000002 00000002     .J...H..........
   240b0:	00024358 000248c4 0000000b 00000001     XC...H..........
   240c0:	000248d0 000248d4 00000002 00000002     .H...H..........
   240d0:	000248d8 000248dc 00000001 00000002     .H...H..........
   240e0:	000248e0 000248e4 00000002 00000002     .H...H..........
   240f0:	000248e8 000248ec 00000002 00000002     .H...H..........
   24100:	000248f0 000248f4 00000001 00000002     .H...H..........
   24110:	000248f8 00024864 00000001 00000002     .H..dH..........
   24120:	000248fc 00024900 00000002 00000001     .H...I..........
   24130:	00024904 00024908 00000005 00000003     .I...I..........
   24140:	00024910 00024914 00000002 00000002     .I...I..........
   24150:	00024ae0 000248f4 00000001 00000001     .J...H..........
   24160:	00024918 0002491c 00000001 00000001     .I...I..........
   24170:	00024920 00024924 00000003 00000003      I..$I..........
   24180:	00024928 0002492c 00000002 00000002     (I..,I..........
   24190:	00024930 00024934 00000002 00000002     0I..4I..........
   241a0:	0002465c 00024938 00000001 00000002     \F..8I..........
   241b0:	0002493c 00024940 00000002 00000002     <I..@I..........
   241c0:	00024944 00024948 00000001 00000002     DI..HI..........
   241d0:	0002494c 00024950 00000003 00000002     LI..PI..........
   241e0:	00024954 00024958 00000002 00000001     TI..XI..........
   241f0:	0002495c 00024948 00000001 00000001     \I..HI..........
   24200:	00024324 00024960 00000002 00000002     $C..`I..........
   24210:	00024328 00024964 00000001 00000003     (C..dI..........
   24220:	00024968 0002496c 00000002 00000002     hI..lI..........
   24230:	00024970 00024974 00000003 00000002     pI..tI..........
   24240:	00024978 0002497c 00000010 00000002     xI..|I..........
   24250:	00024990 00024994 00000001 00000002     .I...I..........
   24260:	00024998 0002499c 00000002 00000002     .I...I..........
   24270:	00024318 000249a0 00000009 00000001     .C...I..........
   24280:	000245dc 000249a0 00000009 00000001     .E...I..........
   24290:	000249ac 000249b0 0000000b 00000002     .I...I..........
   242a0:	0002481c 000249bc 00000007 00000001     .H...I..........
   242b0:	000249c4 000249bc 00000007 00000001     .I...I..........
   242c0:	000249c8 000249cc 00000005 00000000     .I...I..........
   242d0:	000249d4 000249d8 00000006 00000001     .I...I..........
	...
   242f0:	4f4c475f 5f4c4142 00000000 6f6e6128     _GLOBAL_....(ano
   24300:	6f6d796e 6e207375 73656d61 65636170     nymous namespace
   24310:	00000029 00006425 00005073 00006c63     )...%d..sP..cl..
   24320:	00007464 00007470 00007571 69727473     dt..pt..qu..stri
   24330:	6c20676e 72657469 00006c61 00647473     ng literal..std.
   24340:	6f747561 00000000 6c636564 65707974     auto....decltype
   24350:	74756128 0000296f 0000696c 6962615b     (auto)..li..[abi
   24360:	0000003a 00003a3a 6665647b 746c7561     :...::..{default
   24370:	67726120 00000023 003a3a7d 7272414a      arg#...}::.JArr
   24380:	00007961 00005d5b 6f747561 0000003a     ay..[]..auto:...
   24390:	62617476 6620656c 0020726f 20545456     vtable for .VTT 
   243a0:	20726f66 00000000 736e6f63 63757274     for ....construc
   243b0:	6e6f6974 61747620 20656c62 20726f66     tion vtable for 
   243c0:	00000000 2d6e692d 00000000 65707974     ....-in-....type
   243d0:	6f666e69 726f6620 00000020 65707974     info for ...type
   243e0:	6f666e69 6d616e20 6f662065 00002072     info name for ..
   243f0:	65707974 6f666e69 206e6620 20726f66     typeinfo fn for 
   24400:	00000000 2d6e6f6e 74726976 206c6175     ....non-virtual 
   24410:	6e756874 6f74206b 00000020 61766f63     thunk to ...cova
   24420:	6e616972 65722074 6e727574 75687420     riant return thu
   24430:	74206b6e 0000206f 6176616a 616c4320     nk to ..java Cla
   24440:	66207373 0020726f 72617567 61762064     ss for .guard va
   24450:	62616972 6620656c 0020726f 20534c54     riable for .TLS 
   24460:	74696e69 6e756620 6f697463 6f66206e     init function fo
   24470:	00002072 20534c54 70617277 20726570     r ..TLS wrapper 
   24480:	636e7566 6e6f6974 726f6620 00000020     function for ...
   24490:	65666572 636e6572 65742065 726f706d     reference tempor
   244a0:	20797261 00000023 64646968 61206e65     ary #...hidden a
   244b0:	7361696c 726f6620 00000020 2d6e6f6e     lias for ...non-
   244c0:	6e617274 74636173 206e6f69 6e6f6c63     transaction clon
   244d0:	6f662065 00002072 7461535f 00000020     e for .._Sat ...
   244e0:	6363415f 00006d75 6172465f 00007463     _Accum.._Fract..
   244f0:	0000202c 7265706f 726f7461 00000000     , ..operator....
   24500:	7265706f 726f7461 00000020 00006461     operator ...ad..
   24510:	00007367 0000283e 00007869 00203a20     gs..>(..ix.. : .
   24520:	2077656e 00000000 00006c75 00006c6c     new ....ul..ll..
   24530:	006c6c75 736c6166 00000065 65757274     ull.false...true
   24540:	00000000 6176616a 73657220 6372756f     ....java resourc
   24550:	00002065 6c636564 65707974 00002820     e ..decltype (..
   24560:	73696874 00000000 7261707b 0000236d     this....{parm#..
   24570:	626f6c67 63206c61 74736e6f 74637572     global construct
   24580:	2073726f 6579656b 6f742064 00000020     ors keyed to ...
   24590:	626f6c67 64206c61 72747365 6f746375     global destructo
   245a0:	6b207372 64657965 206f7420 00000000     rs keyed to ....
   245b0:	6d616c7b 28616462 00000000 00002329     {lambda(....)#..
   245c0:	6e6e757b 64656d61 70797420 00002365     {unnamed type#..
   245d0:	6c635b20 20656e6f 00000000 00005a73      [clone ....sZ..
   245e0:	73657220 63697274 00000074 6c6f7620      restrict... vol
   245f0:	6c697461 00000065 6e6f6320 00007473     atile... const..
   24600:	61727420 6361736e 6e6f6974 6661735f      transaction_saf
   24610:	00000065 00002626 706d6f63 2078656c     e...&&..complex 
   24620:	00000000 67616d69 72616e69 00002079     ....imaginary ..
   24630:	002a3a3a 765f5f20 6f746365 00002872     ::*. __vector(..
   24640:	2e2e2e28 00000000 292e2e2e 00000000     (..........)....
   24650:	3a647473 6c6c613a 7461636f 0000726f     std::allocator..
   24660:	6f6c6c61 6f746163 00000072 3a647473     allocator...std:
   24670:	7361623a 735f6369 6e697274 00000067     :basic_string...
   24680:	69736162 74735f63 676e6972 00000000     basic_string....
   24690:	3a647473 7274733a 00676e69 3a647473     std::string.std:
   246a0:	7361623a 735f6369 6e697274 68633c67     :basic_string<ch
   246b0:	202c7261 3a647473 6168633a 72745f72     ar, std::char_tr
   246c0:	73746961 6168633c 202c3e72 3a647473     aits<char>, std:
   246d0:	6c6c613a 7461636f 633c726f 3e726168     :allocator<char>
   246e0:	00003e20 3a647473 7473693a 6d616572      >..std::istream
   246f0:	00000000 3a647473 7361623a 695f6369     ....std::basic_i
   24700:	65727473 633c6d61 2c726168 64747320     stream<char, std
   24710:	68633a3a 745f7261 74696172 68633c73     ::char_traits<ch
   24720:	203e7261 0000003e 69736162 73695f63     ar> >...basic_is
   24730:	61657274 0000006d 3a647473 74736f3a     tream...std::ost
   24740:	6d616572 00000000 3a647473 7361623a     ream....std::bas
   24750:	6f5f6369 65727473 633c6d61 2c726168     ic_ostream<char,
   24760:	64747320 68633a3a 745f7261 74696172      std::char_trait
   24770:	68633c73 203e7261 0000003e 69736162     s<char> >...basi
   24780:	736f5f63 61657274 0000006d 3a647473     c_ostream...std:
   24790:	736f693a 61657274 0000006d 3a647473     :iostream...std:
   247a0:	7361623a 695f6369 7274736f 3c6d6165     :basic_iostream<
   247b0:	72616863 7473202c 633a3a64 5f726168     char, std::char_
   247c0:	69617274 633c7374 3e726168 00003e20     traits<char> >..
   247d0:	69736162 6f695f63 65727473 00006d61     basic_iostream..
   247e0:	00004e61 00003d26 00005361 0000003d     aN..&=..aS..=...
   247f0:	00006161 00000026 00006e61 00007461     aa..&...an..at..
   24800:	67696c61 20666f6e 00000000 00007a61     alignof ....az..
   24810:	00006363 736e6f63 61635f74 00007473     cc..const_cast..
   24820:	00002928 00006d63 0000002c 00006f63     ()..cm..,...co..
   24830:	0000007e 00005664 00003d2f 00006164     ~...dV../=..da..
   24840:	656c6564 5d5b6574 00000020 00006364     delete[] ...dc..
   24850:	616e7964 5f63696d 74736163 00000000     dynamic_cast....
   24860:	00006564 0000002a 00006c64 656c6564     de..*...dl..dele
   24870:	00206574 00007364 00002a2e 00007664     te .ds...*..dv..
   24880:	0000002f 00004f65 00003d5e 00006f65     /...eO..^=..eo..
   24890:	0000005e 00007165 00003d3d 00004c66     ^...eq..==..fL..
   248a0:	00005266 00006c66 00007266 00006567     fR..fl..fr..ge..
   248b0:	00003d3e 00007467 0000536c 003d3c3c     >=..gt..lS..<<=.
   248c0:	00003d3c 7265706f 726f7461 00202222     <=..operator"" .
   248d0:	0000736c 00003c3c 0000746c 0000003c     ls..<<..lt..<...
   248e0:	0000496d 00003d2d 00004c6d 00003d2a     mI..-=..mL..*=..
   248f0:	0000696d 0000002d 00006c6d 00006d6d     mi..-...ml..mm..
   24900:	00002d2d 0000616e 5b77656e 0000005d     --..na..new[]...
   24910:	0000656e 00003d21 0000746e 00000021     ne..!=..nt..!...
   24920:	0000776e 0077656e 0000526f 00003d7c     nw..new.oR..|=..
   24930:	00006f6f 00007c7c 0000007c 00004c70     oo..||..|...pL..
   24940:	00003d2b 00006c70 0000002b 00006d70     +=..pl..+...pm..
   24950:	002a3e2d 00007070 00002b2b 00007370     ->*.pp..++..ps..
   24960:	00003e2d 0000003f 00004d72 00003d25     ->..?...rM..%=..
   24970:	00005372 003d3e3e 00006372 6e696572     rS..>>=.rc..rein
   24980:	70726574 5f746572 74736163 00000000     terpret_cast....
   24990:	00006d72 00000025 00007372 00003e3e     rm..%...rs..>>..
   249a0:	657a6973 2e2e666f 0000002e 00006373     sizeof......sc..
   249b0:	74617473 635f6369 00747361 657a6973     static_cast.size
   249c0:	0020666f 00007a73 00007274 6f726874     of .sz..tr..thro
   249d0:	00000077 00007774 6f726874 00002077     w...tw..throw ..
   249e0:	6e676973 63206465 00726168 6c6f6f62     signed char.bool
   249f0:	00000000 6c6f6f62 006e6165 72616863     ....boolean.char
   24a00:	00000000 65747962 00000000 62756f64     ....byte....doub
   24a10:	0000656c 676e6f6c 756f6420 00656c62     le..long double.
   24a20:	616f6c66 00000074 6c665f5f 3174616f     float...__float1
   24a30:	00003832 69736e75 64656e67 61686320     28..unsigned cha
   24a40:	00000072 00746e69 69736e75 64656e67     r...int.unsigned
   24a50:	746e6920 00000000 69736e75 64656e67      int....unsigned
   24a60:	00000000 676e6f6c 00000000 69736e75     ....long....unsi
   24a70:	64656e67 6e6f6c20 00000067 6e695f5f     gned long...__in
   24a80:	38323174 00000000 69736e75 64656e67     t128....unsigned
   24a90:	695f5f20 3231746e 00000038 726f6873      __int128...shor
   24aa0:	00000074 69736e75 64656e67 6f687320     t...unsigned sho
   24ab0:	00007472 64696f76 00000000 61686377     rt..void....wcha
   24ac0:	00745f72 676e6f6c 6e6f6c20 00000067     r_t.long long...
   24ad0:	69736e75 64656e67 6e6f6c20 6f6c2067     unsigned long lo
   24ae0:	0000676e 69636564 336c616d 00000032     ng..decimal32...
   24af0:	69636564 366c616d 00000034 69636564     decimal64...deci
   24b00:	316c616d 00003832 666c6168 00000000     mal128..half....
   24b10:	72616863 745f3631 00000000 72616863     char16_t....char
   24b20:	745f3233 00000000 6c636564 65707974     32_t....decltype
   24b30:	6c756e28 7274706c 00000029 66776f70     (nullptr)...powf
   24b40:	00000000 74727173 00000066 00000000     ....sqrtf.......

00024b50 <TWO52>:
   24b50:	00000000 43300000 00000000 c3300000     ......0C......0.

00024b60 <_global_impure_ptr>:
   24b60:	20000100 00000043 49534f50 00000058     ... C...POSIX...
   24b70:	00464e49 00666e69 004e414e 006e616e     INF.inf.NAN.nan.
   24b80:	33323130 37363534 42413938 46454443     0123456789ABCDEF
   24b90:	00000000 33323130 37363534 62613938     ....0123456789ab
   24ba0:	66656463 00000000 6c756e28 0000296c     cdef....(null)..
   24bb0:	00000030                                0...

00024bb4 <blanks.8346>:
   24bb4:	20202020 20202020 20202020 20202020                     

00024bc4 <zeroes.8347>:
   24bc4:	30303030 30303030 30303030 30303030     0000000000000000
   24bd4:	33323130 37363534 62613938 66656463     0123456789abcdef
   24be4:	6a696867 6e6d6c6b 7271706f 76757473     ghijklmnopqrstuv
   24bf4:	7a797877 00000000                       wxyz....

00024bfc <_ctype_>:
   24bfc:	20202000 20202020 28282020 20282828     .         ((((( 
   24c0c:	20202020 20202020 20202020 20202020                     
   24c1c:	10108820 10101010 10101010 10101010      ...............
   24c2c:	04040410 04040404 10040404 10101010     ................
   24c3c:	41411010 41414141 01010101 01010101     ..AAAAAA........
   24c4c:	01010101 01010101 01010101 10101010     ................
   24c5c:	42421010 42424242 02020202 02020202     ..BBBBBB........
   24c6c:	02020202 02020202 02020202 10101010     ................
   24c7c:	00000020 00000000 00000000 00000000      ...............
	...
   24d00:	69666e49 7974696e 00000000 004e614e     Infinity....NaN.

00024d10 <__mprec_bigtens>:
   24d10:	37e08000 4341c379 b5056e17 4693b8b5     ...7y.AC.n.....F
   24d20:	e93ff9f5 4d384f03 f9301d32 5a827748     ..?..O8M2.0.Hw.Z
   24d30:	7f73bf3c 75154fdd                       <.s..O.u

00024d38 <__mprec_tens>:
   24d38:	00000000 3ff00000 00000000 40240000     .......?......$@
   24d48:	00000000 40590000 00000000 408f4000     ......Y@.....@.@
   24d58:	00000000 40c38800 00000000 40f86a00     .......@.....j.@
   24d68:	00000000 412e8480 00000000 416312d0     .......A......cA
   24d78:	00000000 4197d784 00000000 41cdcd65     .......A....e..A
   24d88:	20000000 4202a05f e8000000 42374876     ... _..B....vH7B
   24d98:	a2000000 426d1a94 e5400000 42a2309c     ......mB..@..0.B
   24da8:	1e900000 42d6bcc4 26340000 430c6bf5     .......B..4&.k.C
   24db8:	37e08000 4341c379 85d8a000 43763457     ...7y.AC....W4vC
   24dc8:	674ec800 43abc16d 60913d00 43e158e4     ..Ngm..C.=.`.X.C
   24dd8:	78b58c40 4415af1d d6e2ef50 444b1ae4     @..x...DP.....KD
   24de8:	064dd592 4480f0cf c7e14af6 44b52d02     ..M....D.J...-.D
   24df8:	79d99db4 44ea7843                       ...yCx.D

00024e00 <p05.7178>:
   24e00:	00000005 00000019 0000007d              ........}...

00024e0c <__EH_FRAME_BEGIN__>:
   24e0c:	00000000                                ....
