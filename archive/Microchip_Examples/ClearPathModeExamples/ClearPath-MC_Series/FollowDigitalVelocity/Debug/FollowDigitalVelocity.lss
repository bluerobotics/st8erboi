
FollowDigitalVelocity.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00020a40  00004000  00004000  00004000  2**6
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .ARM.extab    000000fc  00024a40  00024a40  00024a40  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .ARM.exidx    00000188  00024b3c  00024b3c  00024b3c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .data         00000ac0  20000000  00024cc4  00030000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  4 .bss          000018e8  20000ac0  00025790  00030ac0  2**4
                  ALLOC
  5 .ARM.attributes 00000030  00000000  00000000  00030ac0  2**0
                  CONTENTS, READONLY
  6 .comment      000000c9  00000000  00000000  00030af0  2**0
                  CONTENTS, READONLY
  7 .debug_info   000a7df9  00000000  00000000  00030bb9  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 0000fd15  00000000  00000000  000d89b2  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_aranges 000017d8  00000000  00000000  000e86c7  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 00007a78  00000000  00000000  000e9e9f  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_macro  00021b7c  00000000  00000000  000f1917  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_line   00014109  00000000  00000000  00113493  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    000f192f  00000000  00000000  0012759c  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_frame  00007488  00000000  00000000  00218ecc  2**2
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_loc    000230fb  00000000  00000000  00220354  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00004000 <exception_table>:
    4000:	00 00 03 20 f5 a5 00 00 d1 42 00 00 d1 42 00 00     ... .....B...B..
    4010:	d1 42 00 00 d1 42 00 00 d1 42 00 00 00 00 00 00     .B...B...B......
	...
    402c:	d1 42 00 00 d1 42 00 00 00 00 00 00 d1 42 00 00     .B...B.......B..
    403c:	91 a4 00 00 d1 42 00 00 d1 42 00 00 d1 42 00 00     .....B...B...B..
    404c:	d1 42 00 00 d1 42 00 00 d1 42 00 00 d1 42 00 00     .B...B...B...B..
    405c:	d1 42 00 00 d1 42 00 00 d1 42 00 00 d1 42 00 00     .B...B...B...B..
    406c:	d1 42 00 00 65 a3 00 00 75 a3 00 00 85 a3 00 00     .B..e...u.......
    407c:	95 a3 00 00 a5 a3 00 00 b5 a3 00 00 c5 a3 00 00     ................
    408c:	d5 a3 00 00 e5 a3 00 00 f5 a3 00 00 05 a4 00 00     ................
    409c:	15 a4 00 00 25 a4 00 00 31 a4 00 00 41 a4 00 00     ....%...1...A...
    40ac:	51 a4 00 00 d1 42 00 00 d1 42 00 00 d1 42 00 00     Q....B...B...B..
    40bc:	d1 42 00 00 d1 42 00 00 d1 42 00 00 d1 42 00 00     .B...B...B...B..
    40cc:	d1 42 00 00 d1 42 00 00 d1 42 00 00 d1 42 00 00     .B...B...B...B..
    40dc:	d1 42 00 00 d1 42 00 00 d1 42 00 00 00 00 00 00     .B...B...B......
	...
    40f4:	d1 42 00 00 f9 a2 00 00 d1 42 00 00 05 a3 00 00     .B.......B......
    4104:	11 a3 00 00 d1 42 00 00 d1 42 00 00 d1 42 00 00     .....B...B...B..
    4114:	d1 42 00 00 1d a3 00 00 d1 42 00 00 29 a3 00 00     .B.......B..)...
    4124:	35 a3 00 00 d1 42 00 00 d1 42 00 00 d1 42 00 00     5....B...B...B..
    4134:	d1 42 00 00 d1 42 00 00 d1 42 00 00 d1 42 00 00     .B...B...B...B..
    4144:	d1 42 00 00 d1 42 00 00 d1 42 00 00 d1 42 00 00     .B...B...B...B..
    4154:	d1 42 00 00 d1 42 00 00 d1 42 00 00 d1 42 00 00     .B...B...B...B..
    4164:	d1 42 00 00 41 a3 00 00 d1 42 00 00 4d a3 00 00     .B..A....B..M...
    4174:	59 a3 00 00 00 00 00 00 00 00 00 00 65 2f 01 00     Y...........e/..
    4184:	69 2f 01 00 6d 2f 01 00 71 2f 01 00 ed a2 00 00     i/..m/..q/......
    4194:	e5 a4 00 00 d1 42 00 00 d1 42 00 00 d1 42 00 00     .....B...B...B..
    41a4:	d1 42 00 00 d1 42 00 00 d1 42 00 00 d1 42 00 00     .B...B...B...B..
    41b4:	d1 42 00 00 d1 42 00 00 d1 42 00 00 d1 42 00 00     .B...B...B...B..
    41c4:	d1 42 00 00 d1 42 00 00 d1 42 00 00 d1 42 00 00     .B...B...B...B..
    41d4:	61 a4 00 00 d1 42 00 00 d1 42 00 00 79 a4 00 00     a....B...B..y...
    41e4:	d1 42 00 00 d1 42 00 00 d1 42 00 00 d1 42 00 00     .B...B...B...B..
    41f4:	d1 42 00 00 d1 42 00 00 d1 42 00 00 d1 42 00 00     .B...B...B...B..
    4204:	d1 42 00 00 d1 42 00 00 d1 42 00 00 d1 42 00 00     .B...B...B...B..
    4214:	d1 42 00 00 d1 42 00 00 d1 42 00 00 d1 42 00 00     .B...B...B...B..
    4224:	d1 42 00 00 d1 42 00 00 d1 42 00 00 d1 42 00 00     .B...B...B...B..
    4234:	d1 42 00 00 d1 42 00 00 d1 42 00 00 d1 42 00 00     .B...B...B...B..
    4244:	d1 42 00 00 d1 42 00 00 d1 42 00 00 d1 42 00 00     .B...B...B...B..
    4254:	d1 42 00 00 d1 42 00 00 d1 42 00 00 d1 42 00 00     .B...B...B...B..

00004264 <__do_global_dtors_aux>:
    4264:	b510      	push	{r4, lr}
    4266:	4c05      	ldr	r4, [pc, #20]	; (427c <__do_global_dtors_aux+0x18>)
    4268:	7823      	ldrb	r3, [r4, #0]
    426a:	b933      	cbnz	r3, 427a <__do_global_dtors_aux+0x16>
    426c:	4b04      	ldr	r3, [pc, #16]	; (4280 <__do_global_dtors_aux+0x1c>)
    426e:	b113      	cbz	r3, 4276 <__do_global_dtors_aux+0x12>
    4270:	4804      	ldr	r0, [pc, #16]	; (4284 <__do_global_dtors_aux+0x20>)
    4272:	f3af 8000 	nop.w
    4276:	2301      	movs	r3, #1
    4278:	7023      	strb	r3, [r4, #0]
    427a:	bd10      	pop	{r4, pc}
    427c:	20000ac0 	.word	0x20000ac0
    4280:	00000000 	.word	0x00000000
    4284:	00024a3c 	.word	0x00024a3c

00004288 <frame_dummy>:
    4288:	4b0c      	ldr	r3, [pc, #48]	; (42bc <frame_dummy+0x34>)
    428a:	b143      	cbz	r3, 429e <frame_dummy+0x16>
    428c:	480c      	ldr	r0, [pc, #48]	; (42c0 <frame_dummy+0x38>)
    428e:	490d      	ldr	r1, [pc, #52]	; (42c4 <frame_dummy+0x3c>)
    4290:	b510      	push	{r4, lr}
    4292:	f3af 8000 	nop.w
    4296:	480c      	ldr	r0, [pc, #48]	; (42c8 <frame_dummy+0x40>)
    4298:	6803      	ldr	r3, [r0, #0]
    429a:	b923      	cbnz	r3, 42a6 <frame_dummy+0x1e>
    429c:	bd10      	pop	{r4, pc}
    429e:	480a      	ldr	r0, [pc, #40]	; (42c8 <frame_dummy+0x40>)
    42a0:	6803      	ldr	r3, [r0, #0]
    42a2:	b933      	cbnz	r3, 42b2 <frame_dummy+0x2a>
    42a4:	4770      	bx	lr
    42a6:	4b09      	ldr	r3, [pc, #36]	; (42cc <frame_dummy+0x44>)
    42a8:	2b00      	cmp	r3, #0
    42aa:	d0f7      	beq.n	429c <frame_dummy+0x14>
    42ac:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    42b0:	4718      	bx	r3
    42b2:	4b06      	ldr	r3, [pc, #24]	; (42cc <frame_dummy+0x44>)
    42b4:	2b00      	cmp	r3, #0
    42b6:	d0f5      	beq.n	42a4 <frame_dummy+0x1c>
    42b8:	4718      	bx	r3
    42ba:	bf00      	nop
    42bc:	00000000 	.word	0x00000000
    42c0:	00024a3c 	.word	0x00024a3c
    42c4:	20000ac4 	.word	0x20000ac4
    42c8:	20000ab4 	.word	0x20000ab4
    42cc:	00000000 	.word	0x00000000

000042d0 <Dummy_Handler>:

/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
    42d0:	e7fe      	b.n	42d0 <Dummy_Handler>
    42d2:	bf00      	nop
    42d4:	0000      	movs	r0, r0
	...

000042d8 <_Z15CommandVelocityl>:
 *    int commandedVelocity  - The velocity to command
 *
 * Returns: True/False depending on whether the velocity was successfully
 *    commanded.
 */
bool CommandVelocity(int32_t commandedVelocity) {
    42d8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    42dc:	4682      	mov	sl, r0
    if (abs(commandedVelocity) >= abs(maxSpeed)) {
    42de:	f8df 9148 	ldr.w	r9, [pc, #328]	; 4428 <_Z15CommandVelocityl+0x150>
    42e2:	ea80 70e0 	eor.w	r0, r0, r0, asr #31
bool CommandVelocity(int32_t commandedVelocity) {
    42e6:	b08a      	sub	sp, #40	; 0x28
    if (abs(commandedVelocity) >= abs(maxSpeed)) {
    42e8:	eba0 70ea 	sub.w	r0, r0, sl, asr #31
    42ec:	f017 fa2c 	bl	1b748 <__aeabi_i2d>
_GLIBCXX_BEGIN_NAMESPACE_VERSION

#ifndef __CORRECT_ISO_CPP_MATH_H_PROTO
  inline _GLIBCXX_CONSTEXPR double
  abs(double __x)
  { return __builtin_fabs(__x); }
    42f0:	e899 0014 	ldmia.w	r9, {r2, r4}
    42f4:	f024 4300 	bic.w	r3, r4, #2147483648	; 0x80000000
    42f8:	4606      	mov	r6, r0
    42fa:	460f      	mov	r7, r1
    42fc:	f017 fd10 	bl	1bd20 <__aeabi_dcmpge>
    4300:	2800      	cmp	r0, #0
    4302:	d163      	bne.n	43cc <_Z15CommandVelocityl+0xf4>
        SerialPort.SendLine("Move rejected, requested velocity at or over the limit.");
        return false;
    }

    // Check if an alert is currently preventing motion
    if (motor.StatusReg().bit.AlertsPresent) {
    4304:	4b42      	ldr	r3, [pc, #264]	; (4410 <_Z15CommandVelocityl+0x138>)
    4306:	f8d3 3118 	ldr.w	r3, [r3, #280]	; 0x118
    430a:	059b      	lsls	r3, r3, #22
    430c:	d449      	bmi.n	43a2 <_Z15CommandVelocityl+0xca>
    430e:	4c41      	ldr	r4, [pc, #260]	; (4414 <_Z15CommandVelocityl+0x13c>)
        \param[in] bufferSize The number of characters to be sent
        \return success
    **/
    bool Send(const char *buffer, size_t bufferSize) {
        for (size_t iChar = 0; iChar < bufferSize; iChar++) {
            if (!SendChar(buffer[iChar])) {
    4310:	4d41      	ldr	r5, [pc, #260]	; (4418 <_Z15CommandVelocityl+0x140>)
    4312:	f104 0815 	add.w	r8, r4, #21
    4316:	f814 1b01 	ldrb.w	r1, [r4], #1
    431a:	4628      	mov	r0, r5
    431c:	f002 fab0 	bl	6880 <_ZN9ClearCore9SerialUsb8SendCharEh>
    4320:	b108      	cbz	r0, 4326 <_Z15CommandVelocityl+0x4e>
        for (size_t iChar = 0; iChar < bufferSize; iChar++) {
    4322:	4544      	cmp	r4, r8
    4324:	d1f7      	bne.n	4316 <_Z15CommandVelocityl+0x3e>
        if (radix < 2 || radix > 16) {
            // Only support bases 2 through 16.
            return false;
        }
        char strRep[2 + 8 * sizeof(number)];
        itoa(number, strRep, radix);
    4326:	a901      	add	r1, sp, #4
    4328:	220a      	movs	r2, #10
    432a:	4650      	mov	r0, sl
    432c:	f019 fae2 	bl	1d8f4 <itoa>
        return Send(nullTermStr, strlen(nullTermStr));
    4330:	a801      	add	r0, sp, #4
    4332:	f01a fb85 	bl	1ea40 <strlen>
        for (size_t iChar = 0; iChar < bufferSize; iChar++) {
    4336:	b168      	cbz	r0, 4354 <_Z15CommandVelocityl+0x7c>
    4338:	ac01      	add	r4, sp, #4
            if (!SendChar(buffer[iChar])) {
    433a:	f8df 80dc 	ldr.w	r8, [pc, #220]	; 4418 <_Z15CommandVelocityl+0x140>
    433e:	1825      	adds	r5, r4, r0
    4340:	e001      	b.n	4346 <_Z15CommandVelocityl+0x6e>
        for (size_t iChar = 0; iChar < bufferSize; iChar++) {
    4342:	42a5      	cmp	r5, r4
    4344:	d006      	beq.n	4354 <_Z15CommandVelocityl+0x7c>
            if (!SendChar(buffer[iChar])) {
    4346:	f814 1b01 	ldrb.w	r1, [r4], #1
    434a:	4640      	mov	r0, r8
    434c:	f002 fa98 	bl	6880 <_ZN9ClearCore9SerialUsb8SendCharEh>
    4350:	2800      	cmp	r0, #0
    4352:	d1f6      	bne.n	4342 <_Z15CommandVelocityl+0x6a>
        return SendChar('\r') && SendChar('\n');
    4354:	210d      	movs	r1, #13
    4356:	4830      	ldr	r0, [pc, #192]	; (4418 <_Z15CommandVelocityl+0x140>)
    4358:	f002 fa92 	bl	6880 <_ZN9ClearCore9SerialUsb8SendCharEh>
    435c:	2800      	cmp	r0, #0
    435e:	d14d      	bne.n	43fc <_Z15CommandVelocityl+0x124>

    // Change ClearPath's Input A state to change direction.
    // Note: this section of code was included so this commandVelocity function 
    // could be used to command negative (opposite direction) velocity. However the 
    // analog signal used by this example only commands positive velocities.
    if (commandedVelocity >= 0) {
    4360:	f1ba 0f00 	cmp.w	sl, #0
        motor.MotorInAState(false);
    4364:	bfac      	ite	ge
    4366:	2100      	movge	r1, #0
    }
    else {
        motor.MotorInAState(true);
    4368:	2101      	movlt	r1, #1
    436a:	4829      	ldr	r0, [pc, #164]	; (4410 <_Z15CommandVelocityl+0x138>)
    436c:	f001 faaa 	bl	58c4 <_ZN9ClearCore11MotorDriver13MotorInAStateEb>
    \brief Blocks operations for ms milliseconds

    \param[in] ms Time in milliseconds to delay
**/
inline void Delay_ms(uint32_t ms)  {
    return Delay_cycles(static_cast<uint64_t>(ms) * CYCLES_PER_MILLISECOND);
    4370:	482a      	ldr	r0, [pc, #168]	; (441c <_Z15CommandVelocityl+0x144>)
    4372:	2100      	movs	r1, #0
    4374:	f006 fb88 	bl	aa88 <Delay_cycles>
    // Delays to send the correct filtered direction.
    Delay_ms(20 + INPUT_A_FILTER);

    // Find the scaling factor of our velocity range mapped to the PWM duty
    // cycle range (255 is the max duty cycle).
    double scaleFactor = 255 / maxSpeed;
    4378:	e9d9 2300 	ldrd	r2, r3, [r9]
    437c:	a122      	add	r1, pc, #136	; (adr r1, 4408 <_Z15CommandVelocityl+0x130>)
    437e:	e9d1 0100 	ldrd	r0, r1, [r1]
    4382:	f017 fb71 	bl	1ba68 <__aeabi_ddiv>

    // Scale the velocity command to our duty cycle range.
    uint8_t dutyRequest = abs(commandedVelocity) * scaleFactor;
    4386:	4632      	mov	r2, r6
    4388:	463b      	mov	r3, r7
    438a:	f017 fa43 	bl	1b814 <__aeabi_dmul>
    438e:	f017 fd03 	bl	1bd98 <__aeabi_d2uiz>

    // Command the move.
    motor.MotorInBDuty(dutyRequest);
    4392:	b2c1      	uxtb	r1, r0
    4394:	481e      	ldr	r0, [pc, #120]	; (4410 <_Z15CommandVelocityl+0x138>)
    4396:	f001 faaf 	bl	58f8 <_ZN9ClearCore11MotorDriver12MotorInBDutyEh>

    return true;
    439a:	2001      	movs	r0, #1
}
    439c:	b00a      	add	sp, #40	; 0x28
    439e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    43a2:	4c1f      	ldr	r4, [pc, #124]	; (4420 <_Z15CommandVelocityl+0x148>)
            if (!SendChar(buffer[iChar])) {
    43a4:	4d1c      	ldr	r5, [pc, #112]	; (4418 <_Z15CommandVelocityl+0x140>)
    43a6:	f104 0628 	add.w	r6, r4, #40	; 0x28
    43aa:	f814 1b01 	ldrb.w	r1, [r4], #1
    43ae:	4628      	mov	r0, r5
    43b0:	f002 fa66 	bl	6880 <_ZN9ClearCore9SerialUsb8SendCharEh>
    43b4:	b130      	cbz	r0, 43c4 <_Z15CommandVelocityl+0xec>
        for (size_t iChar = 0; iChar < bufferSize; iChar++) {
    43b6:	42b4      	cmp	r4, r6
    43b8:	d1f7      	bne.n	43aa <_Z15CommandVelocityl+0xd2>
        return SendChar('\r') && SendChar('\n');
    43ba:	210d      	movs	r1, #13
    43bc:	4816      	ldr	r0, [pc, #88]	; (4418 <_Z15CommandVelocityl+0x140>)
    43be:	f002 fa5f 	bl	6880 <_ZN9ClearCore9SerialUsb8SendCharEh>
    43c2:	b9b0      	cbnz	r0, 43f2 <_Z15CommandVelocityl+0x11a>
        return false;
    43c4:	2000      	movs	r0, #0
}
    43c6:	b00a      	add	sp, #40	; 0x28
    43c8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    43cc:	4c15      	ldr	r4, [pc, #84]	; (4424 <_Z15CommandVelocityl+0x14c>)
            if (!SendChar(buffer[iChar])) {
    43ce:	4d12      	ldr	r5, [pc, #72]	; (4418 <_Z15CommandVelocityl+0x140>)
    43d0:	f104 0637 	add.w	r6, r4, #55	; 0x37
    43d4:	f814 1b01 	ldrb.w	r1, [r4], #1
    43d8:	4628      	mov	r0, r5
    43da:	f002 fa51 	bl	6880 <_ZN9ClearCore9SerialUsb8SendCharEh>
    43de:	2800      	cmp	r0, #0
    43e0:	d0f0      	beq.n	43c4 <_Z15CommandVelocityl+0xec>
        for (size_t iChar = 0; iChar < bufferSize; iChar++) {
    43e2:	42b4      	cmp	r4, r6
    43e4:	d1f6      	bne.n	43d4 <_Z15CommandVelocityl+0xfc>
        return SendChar('\r') && SendChar('\n');
    43e6:	210d      	movs	r1, #13
    43e8:	480b      	ldr	r0, [pc, #44]	; (4418 <_Z15CommandVelocityl+0x140>)
    43ea:	f002 fa49 	bl	6880 <_ZN9ClearCore9SerialUsb8SendCharEh>
    43ee:	2800      	cmp	r0, #0
    43f0:	d0e8      	beq.n	43c4 <_Z15CommandVelocityl+0xec>
    43f2:	210a      	movs	r1, #10
    43f4:	4808      	ldr	r0, [pc, #32]	; (4418 <_Z15CommandVelocityl+0x140>)
    43f6:	f002 fa43 	bl	6880 <_ZN9ClearCore9SerialUsb8SendCharEh>
    43fa:	e7e3      	b.n	43c4 <_Z15CommandVelocityl+0xec>
    43fc:	210a      	movs	r1, #10
    43fe:	4806      	ldr	r0, [pc, #24]	; (4418 <_Z15CommandVelocityl+0x140>)
    4400:	f002 fa3e 	bl	6880 <_ZN9ClearCore9SerialUsb8SendCharEh>
    4404:	e7ac      	b.n	4360 <_Z15CommandVelocityl+0x88>
    4406:	bf00      	nop
    4408:	00000000 	.word	0x00000000
    440c:	406fe000 	.word	0x406fe000
    4410:	20000c90 	.word	0x20000c90
    4414:	000226e0 	.word	0x000226e0
    4418:	200015b0 	.word	0x200015b0
    441c:	00493e00 	.word	0x00493e00
    4420:	000226b4 	.word	0x000226b4
    4424:	0002267c 	.word	0x0002267c
    4428:	20000000 	.word	0x20000000

0000442c <main>:
int main() {
    442c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    AnalogSensor.Mode(Connector::INPUT_ANALOG);
    4430:	2101      	movs	r1, #1
int main() {
    4432:	ed2d 8b02 	vpush	{d8}
    AnalogSensor.Mode(Connector::INPUT_ANALOG);
    4436:	4841      	ldr	r0, [pc, #260]	; (453c <main+0x110>)
    while (!SerialPort && Milliseconds() - startTime < timeout) {
    4438:	4e41      	ldr	r6, [pc, #260]	; (4540 <main+0x114>)
    AnalogSensor.Mode(Connector::INPUT_ANALOG);
    443a:	f000 fc2f 	bl	4c9c <_ZN9ClearCore17DigitalInAnalogIn4ModeENS_9Connector14ConnectorModesE>
    MotorMgr.MotorModeSet(MotorManager::MOTOR_ALL,
    443e:	4b41      	ldr	r3, [pc, #260]	; (4544 <main+0x118>)
                          Connector::CPM_MODE_A_DIRECT_B_PWM);
    4440:	220b      	movs	r2, #11
    4442:	6818      	ldr	r0, [r3, #0]
    4444:	2102      	movs	r1, #2
    4446:	f007 fd9f 	bl	bf88 <_ZN9ClearCore12MotorManager12MotorModeSetENS0_9MotorPairENS_9Connector14ConnectorModesE>
    SerialPort.Speed(baudRate);
    444a:	f44f 5116 	mov.w	r1, #9600	; 0x2580
    444e:	4630      	mov	r0, r6
    4450:	f002 f9fe 	bl	6850 <_ZN9ClearCore9SerialUsb5SpeedEm>
    uint32_t startTime = Milliseconds();
    4454:	f006 faee 	bl	aa34 <Milliseconds>
    4458:	4605      	mov	r5, r0
    SerialPort.PortOpen();
    445a:	4630      	mov	r0, r6
    445c:	f002 f9ec 	bl	6838 <_ZN9ClearCore9SerialUsb8PortOpenEv>
    while (!SerialPort && Milliseconds() - startTime < timeout) {
    4460:	f241 3487 	movw	r4, #4999	; 0x1387
    4464:	4630      	mov	r0, r6
    4466:	f002 f9e1 	bl	682c <_ZN9ClearCore9SerialUsb10PortIsOpenEv>
    446a:	b190      	cbz	r0, 4492 <main+0x66>
    446c:	4c36      	ldr	r4, [pc, #216]	; (4548 <main+0x11c>)
    motor.EnableRequest(true);
    446e:	4837      	ldr	r0, [pc, #220]	; (454c <main+0x120>)
            if (!SendChar(buffer[iChar])) {
    4470:	4e33      	ldr	r6, [pc, #204]	; (4540 <main+0x114>)
    4472:	2101      	movs	r1, #1
    4474:	f104 050d 	add.w	r5, r4, #13
    4478:	f001 fa66 	bl	5948 <_ZN9ClearCore11MotorDriver13EnableRequestEb>
    447c:	e001      	b.n	4482 <main+0x56>
        for (size_t iChar = 0; iChar < bufferSize; iChar++) {
    447e:	42a5      	cmp	r5, r4
    4480:	d00d      	beq.n	449e <main+0x72>
            if (!SendChar(buffer[iChar])) {
    4482:	f814 1b01 	ldrb.w	r1, [r4], #1
    4486:	4630      	mov	r0, r6
    4488:	f002 f9fa 	bl	6880 <_ZN9ClearCore9SerialUsb8SendCharEh>
    448c:	2800      	cmp	r0, #0
    448e:	d1f6      	bne.n	447e <main+0x52>
    4490:	e00e      	b.n	44b0 <main+0x84>
    while (!SerialPort && Milliseconds() - startTime < timeout) {
    4492:	f006 facf 	bl	aa34 <Milliseconds>
    4496:	1b40      	subs	r0, r0, r5
    4498:	42a0      	cmp	r0, r4
    449a:	d9e3      	bls.n	4464 <main+0x38>
    449c:	e7e6      	b.n	446c <main+0x40>
        return SendChar('\r') && SendChar('\n');
    449e:	210d      	movs	r1, #13
    44a0:	4827      	ldr	r0, [pc, #156]	; (4540 <main+0x114>)
    44a2:	f002 f9ed 	bl	6880 <_ZN9ClearCore9SerialUsb8SendCharEh>
    44a6:	b118      	cbz	r0, 44b0 <main+0x84>
    44a8:	210a      	movs	r1, #10
    44aa:	4825      	ldr	r0, [pc, #148]	; (4540 <main+0x114>)
    44ac:	f002 f9e8 	bl	6880 <_ZN9ClearCore9SerialUsb8SendCharEh>

        \return The filtered analog input voltage in volts
    **/
    float AnalogVoltage() {
        // If there is not a valid reading available, return zero.
        if (!m_analogValid) {
    44b0:	2600      	movs	r6, #0
    44b2:	2700      	movs	r7, #0
    44b4:	4c21      	ldr	r4, [pc, #132]	; (453c <main+0x110>)
    44b6:	f8df 909c 	ldr.w	r9, [pc, #156]	; 4554 <main+0x128>
    44ba:	4d25      	ldr	r5, [pc, #148]	; (4550 <main+0x124>)
        \return Voltage on the given ADC channel.

        \note For performance reasons, does not perform any bounds checking.
    **/
    float AnalogVoltage(AdcChannels adcChannel) {
        uint16_t maxReading = INT16_MAX & ~(INT16_MAX >> m_AdcResolution);
    44bc:	f647 78ff 	movw	r8, #32767	; 0x7fff
    44c0:	eeb2 8a04 	vmov.f32	s16, #36	; 0x41200000  10.0
    44c4:	e00f      	b.n	44e6 <main+0xba>
    44c6:	4630      	mov	r0, r6
    44c8:	4639      	mov	r1, r7
            static_cast<int32_t>(round(analogVoltage / 10 * maxSpeed));
    44ca:	e9d5 2300 	ldrd	r2, r3, [r5]
    44ce:	f017 f9a1 	bl	1b814 <__aeabi_dmul>
    44d2:	ec41 0b10 	vmov	d0, r0, r1
    44d6:	f016 f987 	bl	1a7e8 <round>
    44da:	ec51 0b10 	vmov	r0, r1, d0
    44de:	f017 fc33 	bl	1bd48 <__aeabi_d2iz>
        CommandVelocity(commandedVelocity);    // See below for the detailed function definition.
    44e2:	f7ff fef9 	bl	42d8 <_Z15CommandVelocityl>
    44e6:	f894 3040 	ldrb.w	r3, [r4, #64]	; 0x40
    44ea:	2b00      	cmp	r3, #0
    44ec:	d0eb      	beq.n	44c6 <main+0x9a>
            return 0;
        }
        return AdcManager::Instance().AnalogVoltage(m_adcChannel);
    44ee:	f000 f833 	bl	4558 <_ZN9ClearCore10AdcManager8InstanceEv>
        float voltage = ADC_CHANNEL_MAX_FLOAT[adcChannel] *
    44f2:	f894 1034 	ldrb.w	r1, [r4, #52]	; 0x34
        uint16_t maxReading = INT16_MAX & ~(INT16_MAX >> m_AdcResolution);
    44f6:	f890 306c 	ldrb.w	r3, [r0, #108]	; 0x6c
                        m_AdcResultsConvertedFiltered[adcChannel] / maxReading;
    44fa:	f101 0208 	add.w	r2, r1, #8
        uint16_t maxReading = INT16_MAX & ~(INT16_MAX >> m_AdcResolution);
    44fe:	fa48 f303 	asr.w	r3, r8, r3
                        m_AdcResultsConvertedFiltered[adcChannel] / maxReading;
    4502:	f830 2012 	ldrh.w	r2, [r0, r2, lsl #1]
    4506:	b292      	uxth	r2, r2
        float voltage = ADC_CHANNEL_MAX_FLOAT[adcChannel] *
    4508:	ee07 2a90 	vmov	s15, r2
        uint16_t maxReading = INT16_MAX & ~(INT16_MAX >> m_AdcResolution);
    450c:	43db      	mvns	r3, r3
        float voltage = ADC_CHANNEL_MAX_FLOAT[adcChannel] *
    450e:	eb09 0181 	add.w	r1, r9, r1, lsl #2
                        m_AdcResultsConvertedFiltered[adcChannel] / maxReading;
    4512:	f3c3 030e 	ubfx	r3, r3, #0, #15
        float voltage = ADC_CHANNEL_MAX_FLOAT[adcChannel] *
    4516:	edd1 6a00 	vldr	s13, [r1]
    451a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
                        m_AdcResultsConvertedFiltered[adcChannel] / maxReading;
    451e:	ee07 3a90 	vmov	s15, r3
        float voltage = ADC_CHANNEL_MAX_FLOAT[adcChannel] *
    4522:	ee27 7a26 	vmul.f32	s14, s14, s13
                        m_AdcResultsConvertedFiltered[adcChannel] / maxReading;
    4526:	eef8 7ae7 	vcvt.f32.s32	s15, s15
    452a:	eec7 6a27 	vdiv.f32	s13, s14, s15
    452e:	eec6 7a88 	vdiv.f32	s15, s13, s16
    4532:	ee17 0a90 	vmov	r0, s15
    4536:	f017 f919 	bl	1b76c <__aeabi_f2d>
    453a:	e7c6      	b.n	44ca <main+0x9e>
    453c:	20000c4c 	.word	0x20000c4c
    4540:	200015b0 	.word	0x200015b0
    4544:	20001d38 	.word	0x20001d38
    4548:	000226f8 	.word	0x000226f8
    454c:	20000c90 	.word	0x20000c90
    4550:	20000000 	.word	0x20000000
    4554:	00022718 	.word	0x00022718

00004558 <_ZN9ClearCore10AdcManager8InstanceEv>:
    while (ADC1->STATUS.bit.ADCBUSY) {
        continue;
    }
}

AdcManager &AdcManager::Instance() {
    4558:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    static AdcManager *instance = new AdcManager();
    455a:	4d1f      	ldr	r5, [pc, #124]	; (45d8 <_ZN9ClearCore10AdcManager8InstanceEv+0x80>)
    455c:	682c      	ldr	r4, [r5, #0]
    455e:	f014 0401 	ands.w	r4, r4, #1
    4562:	d002      	beq.n	456a <_ZN9ClearCore10AdcManager8InstanceEv+0x12>
    4564:	4b1d      	ldr	r3, [pc, #116]	; (45dc <_ZN9ClearCore10AdcManager8InstanceEv+0x84>)
    4566:	6818      	ldr	r0, [r3, #0]
    4568:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    456a:	2074      	movs	r0, #116	; 0x74
    456c:	f00e fd2c 	bl	12fc8 <_Znwj>
    4570:	4e1a      	ldr	r6, [pc, #104]	; (45dc <_ZN9ClearCore10AdcManager8InstanceEv+0x84>)
      m_shiftRegSnapshot(UINT32_MAX),
      m_shiftRegPending(UINT32_MAX),
      m_AdcResolution(ADC_RESOLUTION_DEFAULT),
      m_AdcResPending(ADC_RESOLUTION_DEFAULT),
      m_AdcTimeoutLimit(ADC_TIMEOUT_DEFAULT),
      m_AdcBusyCount(0) {}
    4572:	6004      	str	r4, [r0, #0]
    static AdcManager *instance = new AdcManager();
    4574:	4603      	mov	r3, r0
      m_AdcBusyCount(0) {}
    4576:	210c      	movs	r1, #12
    4578:	f04f 30ff 	mov.w	r0, #4294967295
    457c:	2703      	movs	r7, #3
    static AdcManager *instance = new AdcManager();
    457e:	2201      	movs	r2, #1
      m_AdcBusyCount(0) {}
    4580:	605c      	str	r4, [r3, #4]
    4582:	6658      	str	r0, [r3, #100]	; 0x64
    4584:	609c      	str	r4, [r3, #8]
    4586:	6698      	str	r0, [r3, #104]	; 0x68
    4588:	60dc      	str	r4, [r3, #12]
///     The DSP efficient form is:
///            = input - K*input + K*output
//
class Iir16 {
public:
    Iir16(void) : m_tc(0), m_z(0) {};
    458a:	841c      	strh	r4, [r3, #32]
    458c:	611c      	str	r4, [r3, #16]
    458e:	625c      	str	r4, [r3, #36]	; 0x24
    4590:	615c      	str	r4, [r3, #20]
    4592:	851c      	strh	r4, [r3, #40]	; 0x28
    4594:	619c      	str	r4, [r3, #24]
    4596:	62dc      	str	r4, [r3, #44]	; 0x2c
    4598:	61dc      	str	r4, [r3, #28]
    459a:	861c      	strh	r4, [r3, #48]	; 0x30
    459c:	635c      	str	r4, [r3, #52]	; 0x34
    459e:	871c      	strh	r4, [r3, #56]	; 0x38
    45a0:	63dc      	str	r4, [r3, #60]	; 0x3c
    45a2:	f8a3 4040 	strh.w	r4, [r3, #64]	; 0x40
    45a6:	645c      	str	r4, [r3, #68]	; 0x44
    45a8:	f8a3 4048 	strh.w	r4, [r3, #72]	; 0x48
    45ac:	64dc      	str	r4, [r3, #76]	; 0x4c
    45ae:	f8a3 4050 	strh.w	r4, [r3, #80]	; 0x50
    45b2:	655c      	str	r4, [r3, #84]	; 0x54
    45b4:	f8a3 4058 	strh.w	r4, [r3, #88]	; 0x58
    45b8:	65dc      	str	r4, [r3, #92]	; 0x5c
    45ba:	f883 4060 	strb.w	r4, [r3, #96]	; 0x60
    45be:	f883 4061 	strb.w	r4, [r3, #97]	; 0x61
    45c2:	671c      	str	r4, [r3, #112]	; 0x70
    45c4:	f883 706e 	strb.w	r7, [r3, #110]	; 0x6e
    45c8:	f883 106c 	strb.w	r1, [r3, #108]	; 0x6c
    45cc:	f883 106d 	strb.w	r1, [r3, #109]	; 0x6d
    45d0:	4618      	mov	r0, r3
    static AdcManager *instance = new AdcManager();
    45d2:	6033      	str	r3, [r6, #0]
    45d4:	602a      	str	r2, [r5, #0]
}
    45d6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    45d8:	20000adc 	.word	0x20000adc
    45dc:	20000b14 	.word	0x20000b14

000045e0 <_ZN9ClearCore10AdcManager10InitializeEv>:

/**
    Initialize the ADC to power-up state.
**/
void AdcManager::Initialize() {
    45e0:	b5f0      	push	{r4, r5, r6, r7, lr}
    // Configure internal analog inputs: Sdrvr2, Sdrvr3, VBus, 5V Ob monitor
    const uint8_t INTERNAL_ADC_INPUTS = 4;
    const PeripheralRoute *adcsToSetup[INTERNAL_ADC_INPUTS] = {
        &_5VOB_MON, &Vsupply_MON_IO_4and5_RST,
        &Sdrvr2_iMon, &Sdrvr3_iMon
    };
    45e2:	4bbd      	ldr	r3, [pc, #756]	; (48d8 <_ZN9ClearCore10AdcManager10InitializeEv+0x2f8>)
void AdcManager::Initialize() {
    45e4:	4605      	mov	r5, r0
    };
    45e6:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
void AdcManager::Initialize() {
    45e8:	b085      	sub	sp, #20
    };
    45ea:	ac04      	add	r4, sp, #16
    45ec:	e904 000f 	stmdb	r4, {r0, r1, r2, r3}
    m_AdcResolution = ADC_RESOLUTION_DEFAULT;
    45f0:	210c      	movs	r1, #12

    for (uint8_t i = 0; i < INTERNAL_ADC_INPUTS; i++) {
        const PeripheralRoute *prPtr = adcsToSetup[i];
    45f2:	9800      	ldr	r0, [sp, #0]
    m_AdcResolution = ADC_RESOLUTION_DEFAULT;
    45f4:	f885 106c 	strb.w	r1, [r5, #108]	; 0x6c
    m_AdcTimeoutLimit = ADC_TIMEOUT_DEFAULT;
    45f8:	2303      	movs	r3, #3
    45fa:	f885 306e 	strb.w	r3, [r5, #110]	; 0x6e
    m_AdcResPending = ADC_RESOLUTION_DEFAULT;
    45fe:	f885 106d 	strb.w	r1, [r5, #109]	; 0x6d
        return m_tc;
    };

    void TcSamples(uint16_t riseSamples99pct) {
        float tcTemp = powf(.01, 1. / riseSamples99pct) * 32768 + 0.5;
        m_tc = (tcTemp < INT16_MAX) ? tcTemp : INT16_MAX;
    4602:	f245 03c3 	movw	r3, #20675	; 0x50c3
    4606:	842b      	strh	r3, [r5, #32]
    4608:	852b      	strh	r3, [r5, #40]	; 0x28
    460a:	862b      	strh	r3, [r5, #48]	; 0x30
    460c:	872b      	strh	r3, [r5, #56]	; 0x38
    460e:	f8a5 3040 	strh.w	r3, [r5, #64]	; 0x40
    4612:	f8a5 3048 	strh.w	r3, [r5, #72]	; 0x48
    4616:	f8a5 3050 	strh.w	r3, [r5, #80]	; 0x50
    461a:	f8a5 3058 	strh.w	r3, [r5, #88]	; 0x58

        ClearCorePorts adcGpioPort = prPtr->gpioPort;
    461e:	f990 3001 	ldrsb.w	r3, [r0, #1]
    m_initialized = false;
    4622:	2200      	movs	r2, #0
    m_shiftRegSnapshot = UINT32_MAX;
    4624:	f04f 34ff 	mov.w	r4, #4294967295
    m_initialized = false;
    4628:	f885 2060 	strb.w	r2, [r5, #96]	; 0x60
    m_AdcTimeout = false;
    462c:	f885 2061 	strb.w	r2, [r5, #97]	; 0x61
    m_AdcBusyCount = 0;
    4630:	672a      	str	r2, [r5, #112]	; 0x70
    m_shiftRegSnapshot = UINT32_MAX;
    4632:	666c      	str	r4, [r5, #100]	; 0x64
    m_shiftRegPending = UINT32_MAX;
    4634:	66ac      	str	r4, [r5, #104]	; 0x68
        uint8_t adcGpioPin = prPtr->gpioPin;

        PMUX_SELECTION(adcGpioPort, adcGpioPin, PER_ANALOG);
    4636:	01db      	lsls	r3, r3, #7
        uint8_t adcGpioPin = prPtr->gpioPin;
    4638:	7881      	ldrb	r1, [r0, #2]
        PMUX_SELECTION(adcGpioPort, adcGpioPin, PER_ANALOG);
    463a:	f103 4282 	add.w	r2, r3, #1090519040	; 0x41000000
    463e:	f502 4200 	add.w	r2, r2, #32768	; 0x8000
    4642:	eb02 0251 	add.w	r2, r2, r1, lsr #1
    4646:	07cf      	lsls	r7, r1, #31
    4648:	f892 0030 	ldrb.w	r0, [r2, #48]	; 0x30
    464c:	f04f 0401 	mov.w	r4, #1
    4650:	bf54      	ite	pl
    4652:	f364 0003 	bfipl	r0, r4, #0, #4
    4656:	f364 1007 	bfimi	r0, r4, #4, #4
    465a:	f882 0030 	strb.w	r0, [r2, #48]	; 0x30
        PMUX_ENABLE(adcGpioPort, adcGpioPin);
    465e:	4a9f      	ldr	r2, [pc, #636]	; (48dc <_ZN9ClearCore10AdcManager10InitializeEv+0x2fc>)
    4660:	4413      	add	r3, r2
    4662:	440b      	add	r3, r1
        PMUX_SELECTION(adcGpioPort, adcGpioPin, PER_ANALOG);
    4664:	2401      	movs	r4, #1
        PMUX_ENABLE(adcGpioPort, adcGpioPin);
    4666:	f893 1040 	ldrb.w	r1, [r3, #64]	; 0x40
    466a:	f041 0101 	orr.w	r1, r1, #1
    466e:	f883 1040 	strb.w	r1, [r3, #64]	; 0x40
        const PeripheralRoute *prPtr = adcsToSetup[i];
    4672:	9b01      	ldr	r3, [sp, #4]
        uint8_t adcGpioPin = prPtr->gpioPin;
    4674:	7899      	ldrb	r1, [r3, #2]
        ClearCorePorts adcGpioPort = prPtr->gpioPort;
    4676:	f993 3001 	ldrsb.w	r3, [r3, #1]
        PMUX_SELECTION(adcGpioPort, adcGpioPin, PER_ANALOG);
    467a:	01db      	lsls	r3, r3, #7
    467c:	441a      	add	r2, r3
    467e:	eb02 0251 	add.w	r2, r2, r1, lsr #1
    4682:	07ce      	lsls	r6, r1, #31
    4684:	f892 0030 	ldrb.w	r0, [r2, #48]	; 0x30
    4688:	bf54      	ite	pl
    468a:	f364 0003 	bfipl	r0, r4, #0, #4
    468e:	f364 1007 	bfimi	r0, r4, #4, #4
    4692:	f882 0030 	strb.w	r0, [r2, #48]	; 0x30
        PMUX_ENABLE(adcGpioPort, adcGpioPin);
    4696:	4a91      	ldr	r2, [pc, #580]	; (48dc <_ZN9ClearCore10AdcManager10InitializeEv+0x2fc>)
    4698:	4413      	add	r3, r2
    469a:	440b      	add	r3, r1
        PMUX_SELECTION(adcGpioPort, adcGpioPin, PER_ANALOG);
    469c:	2401      	movs	r4, #1
        PMUX_ENABLE(adcGpioPort, adcGpioPin);
    469e:	f893 1040 	ldrb.w	r1, [r3, #64]	; 0x40
    46a2:	f041 0101 	orr.w	r1, r1, #1
    46a6:	f883 1040 	strb.w	r1, [r3, #64]	; 0x40
        const PeripheralRoute *prPtr = adcsToSetup[i];
    46aa:	9b02      	ldr	r3, [sp, #8]
        uint8_t adcGpioPin = prPtr->gpioPin;
    46ac:	7899      	ldrb	r1, [r3, #2]
        ClearCorePorts adcGpioPort = prPtr->gpioPort;
    46ae:	f993 3001 	ldrsb.w	r3, [r3, #1]
        PMUX_SELECTION(adcGpioPort, adcGpioPin, PER_ANALOG);
    46b2:	01db      	lsls	r3, r3, #7
    46b4:	441a      	add	r2, r3
    46b6:	eb02 0251 	add.w	r2, r2, r1, lsr #1
    46ba:	07cf      	lsls	r7, r1, #31
    46bc:	f892 0030 	ldrb.w	r0, [r2, #48]	; 0x30
    46c0:	bf54      	ite	pl
    46c2:	f364 0003 	bfipl	r0, r4, #0, #4
    46c6:	f364 1007 	bfimi	r0, r4, #4, #4
    46ca:	f882 0030 	strb.w	r0, [r2, #48]	; 0x30
        PMUX_ENABLE(adcGpioPort, adcGpioPin);
    46ce:	4a83      	ldr	r2, [pc, #524]	; (48dc <_ZN9ClearCore10AdcManager10InitializeEv+0x2fc>)
    46d0:	4413      	add	r3, r2
    46d2:	440b      	add	r3, r1
        PMUX_SELECTION(adcGpioPort, adcGpioPin, PER_ANALOG);
    46d4:	2401      	movs	r4, #1
        PMUX_ENABLE(adcGpioPort, adcGpioPin);
    46d6:	f893 1040 	ldrb.w	r1, [r3, #64]	; 0x40
    46da:	f041 0101 	orr.w	r1, r1, #1
    46de:	f883 1040 	strb.w	r1, [r3, #64]	; 0x40
        const PeripheralRoute *prPtr = adcsToSetup[i];
    46e2:	9b03      	ldr	r3, [sp, #12]
        uint8_t adcGpioPin = prPtr->gpioPin;
    46e4:	7899      	ldrb	r1, [r3, #2]
        ClearCorePorts adcGpioPort = prPtr->gpioPort;
    46e6:	f993 3001 	ldrsb.w	r3, [r3, #1]
        PMUX_SELECTION(adcGpioPort, adcGpioPin, PER_ANALOG);
    46ea:	01db      	lsls	r3, r3, #7
    46ec:	441a      	add	r2, r3
    46ee:	eb02 0251 	add.w	r2, r2, r1, lsr #1
        PMUX_ENABLE(adcGpioPort, adcGpioPin);
    46f2:	f103 4382 	add.w	r3, r3, #1090519040	; 0x41000000
        PMUX_SELECTION(adcGpioPort, adcGpioPin, PER_ANALOG);
    46f6:	f892 0030 	ldrb.w	r0, [r2, #48]	; 0x30
    46fa:	07ce      	lsls	r6, r1, #31
        PMUX_ENABLE(adcGpioPort, adcGpioPin);
    46fc:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
    4700:	440b      	add	r3, r1
        PMUX_SELECTION(adcGpioPort, adcGpioPin, PER_ANALOG);
    4702:	bf4c      	ite	mi
    4704:	f364 1007 	bfimi	r0, r4, #4, #4
    4708:	f364 0003 	bfipl	r0, r4, #0, #4
    470c:	f882 0030 	strb.w	r0, [r2, #48]	; 0x30
        PMUX_ENABLE(adcGpioPort, adcGpioPin);
    4710:	f893 1040 	ldrb.w	r1, [r3, #64]	; 0x40

    // Set up ADC

    // Set the clock source for ADC1 to GCLK4 (48 MHz) and enable
    // the peripheral channel
    SET_CLOCK_SOURCE(ADC1_GCLK_ID, 4);
    4714:	4a72      	ldr	r2, [pc, #456]	; (48e0 <_ZN9ClearCore10AdcManager10InitializeEv+0x300>)
        PMUX_ENABLE(adcGpioPort, adcGpioPin);
    4716:	f041 0101 	orr.w	r1, r1, #1
    471a:	f883 1040 	strb.w	r1, [r3, #64]	; 0x40
    SET_CLOCK_SOURCE(ADC1_GCLK_ID, 4);
    471e:	f8d2 3124 	ldr.w	r3, [r2, #292]	; 0x124
    4722:	f36f 1386 	bfc	r3, #6, #1
    4726:	f8c2 3124 	str.w	r3, [r2, #292]	; 0x124
    472a:	f8d2 3124 	ldr.w	r3, [r2, #292]	; 0x124
    472e:	065f      	lsls	r7, r3, #25
    4730:	d4fb      	bmi.n	472a <_ZN9ClearCore10AdcManager10InitializeEv+0x14a>
    4732:	f8d2 3124 	ldr.w	r3, [r2, #292]	; 0x124
    4736:	496a      	ldr	r1, [pc, #424]	; (48e0 <_ZN9ClearCore10AdcManager10InitializeEv+0x300>)
    4738:	2004      	movs	r0, #4
    473a:	f360 0303 	bfi	r3, r0, #0, #4
    473e:	f8c2 3124 	str.w	r3, [r2, #292]	; 0x124
    4742:	f8d2 3124 	ldr.w	r3, [r2, #292]	; 0x124
    4746:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    474a:	f8c2 3124 	str.w	r3, [r2, #292]	; 0x124
    474e:	684b      	ldr	r3, [r1, #4]
    4750:	06de      	lsls	r6, r3, #27
    4752:	d4fc      	bmi.n	474e <_ZN9ClearCore10AdcManager10InitializeEv+0x16e>

    // Enables the peripheral clock to ADC1
    CLOCK_ENABLE(APBDMASK, ADC1_);
    4754:	4963      	ldr	r1, [pc, #396]	; (48e4 <_ZN9ClearCore10AdcManager10InitializeEv+0x304>)

    // Reset the ADC1 module
    ADC1->CTRLA.bit.SWRST = 1;
    4756:	4a64      	ldr	r2, [pc, #400]	; (48e8 <_ZN9ClearCore10AdcManager10InitializeEv+0x308>)
    CLOCK_ENABLE(APBDMASK, ADC1_);
    4758:	6a0b      	ldr	r3, [r1, #32]
    475a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
    475e:	620b      	str	r3, [r1, #32]
    ADC1->CTRLA.bit.SWRST = 1;
    4760:	8813      	ldrh	r3, [r2, #0]
    4762:	f043 0301 	orr.w	r3, r3, #1
    4766:	8013      	strh	r3, [r2, #0]
    SYNCBUSY_WAIT(ADC1, ADC_SYNCBUSY_SWRST);
    4768:	6b13      	ldr	r3, [r2, #48]	; 0x30
    476a:	f013 0301 	ands.w	r3, r3, #1
    476e:	d1fb      	bne.n	4768 <_ZN9ClearCore10AdcManager10InitializeEv+0x188>
    }
    return true;
}

bool AdcManager::AdcResChange() {
    switch (m_AdcResPending) {
    4770:	f895 106d 	ldrb.w	r1, [r5, #109]	; 0x6d
    4774:	290a      	cmp	r1, #10
    4776:	f000 80e7 	beq.w	4948 <_ZN9ClearCore10AdcManager10InitializeEv+0x368>
    477a:	290c      	cmp	r1, #12
    477c:	f000 80df 	beq.w	493e <_ZN9ClearCore10AdcManager10InitializeEv+0x35e>
    4780:	2908      	cmp	r1, #8
    4782:	f000 80d5 	beq.w	4930 <_ZN9ClearCore10AdcManager10InitializeEv+0x350>
    ADC1->CTRLA.bit.PRESCALER = ADC_CTRLA_PRESCALER_DIV4_Val;
    4786:	4b58      	ldr	r3, [pc, #352]	; (48e8 <_ZN9ClearCore10AdcManager10InitializeEv+0x308>)
    4788:	881a      	ldrh	r2, [r3, #0]
    478a:	2101      	movs	r1, #1
    478c:	f361 220a 	bfi	r2, r1, #8, #3
    4790:	801a      	strh	r2, [r3, #0]
    ADC1->INPUTCTRL.reg |= ADC_INPUTCTRL_MUXPOS_AIN4 | ADC_INPUTCTRL_DSEQSTOP;
    4792:	889a      	ldrh	r2, [r3, #4]
    4794:	b292      	uxth	r2, r2
    4796:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
    479a:	f042 0204 	orr.w	r2, r2, #4
    479e:	809a      	strh	r2, [r3, #4]
    SYNCBUSY_WAIT(ADC1, ADC_SYNCBUSY_INPUTCTRL);
    47a0:	6b1c      	ldr	r4, [r3, #48]	; 0x30
    47a2:	f014 0404 	ands.w	r4, r4, #4
    47a6:	d1fb      	bne.n	47a0 <_ZN9ClearCore10AdcManager10InitializeEv+0x1c0>
    channel = DmaManager::Channel(DMA_ADC_RESULTS);
    47a8:	4620      	mov	r0, r4
    47aa:	f000 fdc9 	bl	5340 <_ZN9ClearCore10DmaManager7ChannelENS_11DmaChannelsE>
    47ae:	4606      	mov	r6, r0
    baseDesc = DmaManager::BaseDescriptor(DMA_ADC_RESULTS);
    47b0:	4620      	mov	r0, r4
    47b2:	f000 fdcf 	bl	5354 <_ZN9ClearCore10DmaManager14BaseDescriptorENS_11DmaChannelsE>
    channel->CHCTRLA.reg &= ~DMAC_CHCTRLA_ENABLE;
    47b6:	6833      	ldr	r3, [r6, #0]
    channel->CHCTRLA.reg = DMAC_CHCTRLA_SWRST;
    47b8:	2101      	movs	r1, #1
    channel->CHCTRLA.reg &= ~DMAC_CHCTRLA_ENABLE;
    47ba:	f023 0302 	bic.w	r3, r3, #2
    47be:	6033      	str	r3, [r6, #0]
    baseDesc = DmaManager::BaseDescriptor(DMA_ADC_RESULTS);
    47c0:	4602      	mov	r2, r0
    channel->CHCTRLA.reg = DMAC_CHCTRLA_SWRST;
    47c2:	6031      	str	r1, [r6, #0]
    while (channel->CHCTRLA.reg == DMAC_CHCTRLA_SWRST) {
    47c4:	6833      	ldr	r3, [r6, #0]
    47c6:	2b01      	cmp	r3, #1
    47c8:	d0fc      	beq.n	47c4 <_ZN9ClearCore10AdcManager10InitializeEv+0x1e4>
    channel->CHCTRLA.reg = DMAC_CHCTRLA_TRIGSRC(ADC1_DMAC_ID_RESRDY) |
    47ca:	4b48      	ldr	r3, [pc, #288]	; (48ec <_ZN9ClearCore10AdcManager10InitializeEv+0x30c>)
    47cc:	6033      	str	r3, [r6, #0]
    baseDesc->DSTADDR.reg = (uint32_t)(AdcResultsRaw + ADC_CHANNEL_COUNT);
    47ce:	4948      	ldr	r1, [pc, #288]	; (48f0 <_ZN9ClearCore10AdcManager10InitializeEv+0x310>)
    baseDesc->SRCADDR.reg = (uint32_t)&ADC1->RESULT.reg;
    47d0:	4f48      	ldr	r7, [pc, #288]	; (48f4 <_ZN9ClearCore10AdcManager10InitializeEv+0x314>)
    baseDesc->BTCTRL.reg =
    47d2:	f640 1301 	movw	r3, #2305	; 0x901
    baseDesc->DESCADDR.reg = static_cast<uint32_t>(0);
    47d6:	2000      	movs	r0, #0
    baseDesc->BTCNT.reg = ADC_CHANNEL_COUNT;
    47d8:	2408      	movs	r4, #8
    baseDesc->DESCADDR.reg = static_cast<uint32_t>(0);
    47da:	60d0      	str	r0, [r2, #12]
    baseDesc->SRCADDR.reg = (uint32_t)&ADC1->RESULT.reg;
    47dc:	6057      	str	r7, [r2, #4]
    channel = DmaManager::Channel(DMA_ADC_SEQUENCE);
    47de:	2001      	movs	r0, #1
    baseDesc->BTCNT.reg = ADC_CHANNEL_COUNT;
    47e0:	8054      	strh	r4, [r2, #2]
    baseDesc->DSTADDR.reg = (uint32_t)(AdcResultsRaw + ADC_CHANNEL_COUNT);
    47e2:	6091      	str	r1, [r2, #8]
    baseDesc->BTCTRL.reg =
    47e4:	8013      	strh	r3, [r2, #0]
    channel = DmaManager::Channel(DMA_ADC_SEQUENCE);
    47e6:	f000 fdab 	bl	5340 <_ZN9ClearCore10DmaManager7ChannelENS_11DmaChannelsE>
    channel->CHCTRLA.reg &= ~DMAC_CHCTRLA_ENABLE;
    47ea:	6803      	ldr	r3, [r0, #0]
    channel->CHCTRLA.reg = DMAC_CHCTRLA_SWRST;
    47ec:	2201      	movs	r2, #1
    channel->CHCTRLA.reg &= ~DMAC_CHCTRLA_ENABLE;
    47ee:	f023 0302 	bic.w	r3, r3, #2
    47f2:	6003      	str	r3, [r0, #0]
    channel->CHCTRLA.reg = DMAC_CHCTRLA_SWRST;
    47f4:	6002      	str	r2, [r0, #0]
    while (channel->CHCTRLA.reg == DMAC_CHCTRLA_SWRST) {
    47f6:	6803      	ldr	r3, [r0, #0]
    47f8:	2b01      	cmp	r3, #1
    47fa:	d0fc      	beq.n	47f6 <_ZN9ClearCore10AdcManager10InitializeEv+0x216>
    channel->CHCTRLA.reg = DMAC_CHCTRLA_TRIGSRC(ADC1_DMAC_ID_SEQ) |
    47fc:	4b3e      	ldr	r3, [pc, #248]	; (48f8 <_ZN9ClearCore10AdcManager10InitializeEv+0x318>)
    47fe:	6003      	str	r3, [r0, #0]
    baseDesc = DmaManager::BaseDescriptor(DMA_ADC_SEQUENCE);
    4800:	2001      	movs	r0, #1
    4802:	f000 fda7 	bl	5354 <_ZN9ClearCore10DmaManager14BaseDescriptorENS_11DmaChannelsE>
    baseDesc->DESCADDR.reg = static_cast<uint32_t>(0);
    4806:	2300      	movs	r3, #0
    4808:	60c3      	str	r3, [r0, #12]
    ADC1->DSEQCTRL.bit.INPUTCTRL = 1;
    480a:	4a37      	ldr	r2, [pc, #220]	; (48e8 <_ZN9ClearCore10AdcManager10InitializeEv+0x308>)
        (reinterpret_cast<uint32_t>(&adcSequence)) + sizeof(adcSequence);
    480c:	4e3b      	ldr	r6, [pc, #236]	; (48fc <_ZN9ClearCore10AdcManager10InitializeEv+0x31c>)
    baseDesc->DSTADDR.reg =
    480e:	493c      	ldr	r1, [pc, #240]	; (4900 <_ZN9ClearCore10AdcManager10InitializeEv+0x320>)
    baseDesc->SRCADDR.reg =
    4810:	6046      	str	r6, [r0, #4]
    baseDesc->BTCTRL.reg = DMAC_BTCTRL_BEATSIZE_WORD | DMAC_BTCTRL_STEPSEL_SRC |
    4812:	f241 6301 	movw	r3, #5633	; 0x1601
    baseDesc->BTCNT.reg = ADC_CHANNEL_COUNT;
    4816:	2408      	movs	r4, #8
    4818:	8044      	strh	r4, [r0, #2]
    baseDesc->DSTADDR.reg =
    481a:	6081      	str	r1, [r0, #8]
    baseDesc->BTCTRL.reg = DMAC_BTCTRL_BEATSIZE_WORD | DMAC_BTCTRL_STEPSEL_SRC |
    481c:	8003      	strh	r3, [r0, #0]
    ADC1->DSEQCTRL.bit.INPUTCTRL = 1;
    481e:	6b93      	ldr	r3, [r2, #56]	; 0x38
    4820:	f043 0301 	orr.w	r3, r3, #1
    4824:	6393      	str	r3, [r2, #56]	; 0x38
    SYNCBUSY_WAIT(ADC1, ADC_SYNCBUSY_INPUTCTRL);
    4826:	6b13      	ldr	r3, [r2, #48]	; 0x30
    4828:	075c      	lsls	r4, r3, #29
    482a:	d4fc      	bmi.n	4826 <_ZN9ClearCore10AdcManager10InitializeEv+0x246>
    ADC1->DSEQCTRL.bit.AUTOSTART = 1;
    482c:	6b93      	ldr	r3, [r2, #56]	; 0x38
    SYNCBUSY_WAIT(ADC1, ADC_SYNCBUSY_REFCTRL);
    482e:	492e      	ldr	r1, [pc, #184]	; (48e8 <_ZN9ClearCore10AdcManager10InitializeEv+0x308>)
    ADC1->DSEQCTRL.bit.AUTOSTART = 1;
    4830:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
    4834:	6393      	str	r3, [r2, #56]	; 0x38
    ADC1->REFCTRL.reg |= ADC_REFCTRL_REFCOMP | ADC_REFCTRL_REFSEL_INTVCC1;
    4836:	7a13      	ldrb	r3, [r2, #8]
    4838:	f043 0383 	orr.w	r3, r3, #131	; 0x83
    483c:	7213      	strb	r3, [r2, #8]
    SYNCBUSY_WAIT(ADC1, ADC_SYNCBUSY_REFCTRL);
    483e:	6b0b      	ldr	r3, [r1, #48]	; 0x30
    4840:	06d8      	lsls	r0, r3, #27
    4842:	d4fc      	bmi.n	483e <_ZN9ClearCore10AdcManager10InitializeEv+0x25e>
    ADC1->SAMPCTRL.reg = ADC_SAMPCTRL_SAMPLEN(31);
    4844:	231f      	movs	r3, #31
    SYNCBUSY_WAIT(ADC1, ADC_SYNCBUSY_SAMPCTRL);
    4846:	4c28      	ldr	r4, [pc, #160]	; (48e8 <_ZN9ClearCore10AdcManager10InitializeEv+0x308>)
    ADC1->SAMPCTRL.reg = ADC_SAMPCTRL_SAMPLEN(31);
    4848:	72cb      	strb	r3, [r1, #11]
    SYNCBUSY_WAIT(ADC1, ADC_SYNCBUSY_SAMPCTRL);
    484a:	6b20      	ldr	r0, [r4, #48]	; 0x30
    484c:	f010 0040 	ands.w	r0, r0, #64	; 0x40
    4850:	d1fb      	bne.n	484a <_ZN9ClearCore10AdcManager10InitializeEv+0x26a>
    ADC1->DBGCTRL.bit.DBGRUN = 1;
    4852:	78e3      	ldrb	r3, [r4, #3]
    4854:	f043 0301 	orr.w	r3, r3, #1
    4858:	70e3      	strb	r3, [r4, #3]
    DmaManager::Channel(DMA_ADC_RESULTS)->CHCTRLA.reg |= DMAC_CHCTRLA_ENABLE;
    485a:	f000 fd71 	bl	5340 <_ZN9ClearCore10DmaManager7ChannelENS_11DmaChannelsE>
    485e:	4602      	mov	r2, r0
    DmaManager::Channel(DMA_ADC_SEQUENCE)->CHCTRLA.reg |= DMAC_CHCTRLA_ENABLE;
    4860:	2001      	movs	r0, #1
    DmaManager::Channel(DMA_ADC_RESULTS)->CHCTRLA.reg |= DMAC_CHCTRLA_ENABLE;
    4862:	6813      	ldr	r3, [r2, #0]
    4864:	f043 0302 	orr.w	r3, r3, #2
    4868:	6013      	str	r3, [r2, #0]
    DmaManager::Channel(DMA_ADC_SEQUENCE)->CHCTRLA.reg |= DMAC_CHCTRLA_ENABLE;
    486a:	f000 fd69 	bl	5340 <_ZN9ClearCore10DmaManager7ChannelENS_11DmaChannelsE>
    486e:	6803      	ldr	r3, [r0, #0]
    SYNCBUSY_WAIT(ADC1, ADC_SYNCBUSY_ENABLE);
    4870:	4a1d      	ldr	r2, [pc, #116]	; (48e8 <_ZN9ClearCore10AdcManager10InitializeEv+0x308>)
    DmaManager::Channel(DMA_ADC_SEQUENCE)->CHCTRLA.reg |= DMAC_CHCTRLA_ENABLE;
    4872:	f043 0302 	orr.w	r3, r3, #2
    4876:	6003      	str	r3, [r0, #0]
    ADC1->INPUTCTRL.reg &= ~ADC_INPUTCTRL_DSEQSTOP;
    4878:	88a3      	ldrh	r3, [r4, #4]
    487a:	f3c3 030e 	ubfx	r3, r3, #0, #15
    487e:	80a3      	strh	r3, [r4, #4]
    ADC1->CTRLA.bit.ENABLE = 0x01;
    4880:	8823      	ldrh	r3, [r4, #0]
    4882:	f043 0302 	orr.w	r3, r3, #2
    4886:	8023      	strh	r3, [r4, #0]
    SYNCBUSY_WAIT(ADC1, ADC_SYNCBUSY_ENABLE);
    4888:	6b13      	ldr	r3, [r2, #48]	; 0x30
    488a:	0799      	lsls	r1, r3, #30
    488c:	d4fc      	bmi.n	4888 <_ZN9ClearCore10AdcManager10InitializeEv+0x2a8>
    while (DmaManager::Channel(DMA_ADC_RESULTS)->CHCTRLA.bit.ENABLE) {
    488e:	2000      	movs	r0, #0
    4890:	f000 fd56 	bl	5340 <_ZN9ClearCore10DmaManager7ChannelENS_11DmaChannelsE>
    4894:	6803      	ldr	r3, [r0, #0]
    4896:	079a      	lsls	r2, r3, #30
    4898:	d4f9      	bmi.n	488e <_ZN9ClearCore10AdcManager10InitializeEv+0x2ae>
    while (DmaManager::Channel(DMA_ADC_SEQUENCE)->CHCTRLA.bit.ENABLE) {
    489a:	2001      	movs	r0, #1
    489c:	f000 fd50 	bl	5340 <_ZN9ClearCore10DmaManager7ChannelENS_11DmaChannelsE>
    48a0:	6803      	ldr	r3, [r0, #0]
    48a2:	079b      	lsls	r3, r3, #30
    48a4:	d4f9      	bmi.n	489a <_ZN9ClearCore10AdcManager10InitializeEv+0x2ba>
    while (ADC1->STATUS.bit.ADCBUSY) {
    48a6:	4a10      	ldr	r2, [pc, #64]	; (48e8 <_ZN9ClearCore10AdcManager10InitializeEv+0x308>)
    48a8:	f892 302f 	ldrb.w	r3, [r2, #47]	; 0x2f
    48ac:	f013 0301 	ands.w	r3, r3, #1
    48b0:	d1fa      	bne.n	48a8 <_ZN9ClearCore10AdcManager10InitializeEv+0x2c8>
        TcSamples(riseMs99pct * MS_TO_SAMPLES);
    }

    // Reset the filter to this level
    void Reset(uint16_t newSetting) {
        m_z = (newSetting << 16);
    48b2:	4e14      	ldr	r6, [pc, #80]	; (4904 <_ZN9ClearCore10AdcManager10InitializeEv+0x324>)
    48b4:	4c14      	ldr	r4, [pc, #80]	; (4908 <_ZN9ClearCore10AdcManager10InitializeEv+0x328>)
    48b6:	62eb      	str	r3, [r5, #44]	; 0x2c
        m_AdcResultsConverted[i] = val;
    48b8:	f242 51ff 	movw	r1, #9727	; 0x25ff
    48bc:	f246 02f8 	movw	r2, #24824	; 0x60f8
    m_initialized = true;
    48c0:	2001      	movs	r0, #1
        m_AdcResultsConverted[i] = val;
    48c2:	8029      	strh	r1, [r5, #0]
    48c4:	63eb      	str	r3, [r5, #60]	; 0x3c
        m_AdcResultsConvertedFiltered[i] = val;
    48c6:	8229      	strh	r1, [r5, #16]
    48c8:	646b      	str	r3, [r5, #68]	; 0x44
        m_AdcResultsConverted[i] = val;
    48ca:	806b      	strh	r3, [r5, #2]
    48cc:	64eb      	str	r3, [r5, #76]	; 0x4c
        m_AdcResultsConvertedFiltered[i] = val;
    48ce:	826b      	strh	r3, [r5, #18]
    48d0:	656b      	str	r3, [r5, #84]	; 0x54
        m_AdcResultsConverted[i] = val;
    48d2:	80aa      	strh	r2, [r5, #4]
    48d4:	e01a      	b.n	490c <_ZN9ClearCore10AdcManager10InitializeEv+0x32c>
    48d6:	bf00      	nop
    48d8:	00022708 	.word	0x00022708
    48dc:	41008000 	.word	0x41008000
    48e0:	40001c00 	.word	0x40001c00
    48e4:	40000800 	.word	0x40000800
    48e8:	43002000 	.word	0x43002000
    48ec:	00204600 	.word	0x00204600
    48f0:	20000af0 	.word	0x20000af0
    48f4:	43002040 	.word	0x43002040
    48f8:	00204700 	.word	0x00204700
    48fc:	20000b14 	.word	0x20000b14
    4900:	43002034 	.word	0x43002034
    4904:	25ff0000 	.word	0x25ff0000
    4908:	60f80000 	.word	0x60f80000
    490c:	65eb      	str	r3, [r5, #92]	; 0x5c
        m_AdcResultsConvertedFiltered[i] = val;
    490e:	82aa      	strh	r2, [r5, #20]
    4910:	626e      	str	r6, [r5, #36]	; 0x24
        m_AdcResultsConverted[i] = val;
    4912:	80eb      	strh	r3, [r5, #6]
    4914:	636c      	str	r4, [r5, #52]	; 0x34
        m_AdcResultsConvertedFiltered[i] = val;
    4916:	82eb      	strh	r3, [r5, #22]
    m_initialized = true;
    4918:	f885 0060 	strb.w	r0, [r5, #96]	; 0x60
        m_AdcResultsConverted[i] = val;
    491c:	812b      	strh	r3, [r5, #8]
        m_AdcResultsConvertedFiltered[i] = val;
    491e:	832b      	strh	r3, [r5, #24]
        m_AdcResultsConverted[i] = val;
    4920:	816b      	strh	r3, [r5, #10]
        m_AdcResultsConvertedFiltered[i] = val;
    4922:	836b      	strh	r3, [r5, #26]
        m_AdcResultsConverted[i] = val;
    4924:	81ab      	strh	r3, [r5, #12]
        m_AdcResultsConvertedFiltered[i] = val;
    4926:	83ab      	strh	r3, [r5, #28]
        m_AdcResultsConverted[i] = val;
    4928:	81eb      	strh	r3, [r5, #14]
        m_AdcResultsConvertedFiltered[i] = val;
    492a:	83eb      	strh	r3, [r5, #30]
}
    492c:	b005      	add	sp, #20
    492e:	bdf0      	pop	{r4, r5, r6, r7, pc}
        case 8:
            ADC1->CTRLB.bit.RESSEL = ADC_CTRLB_RESSEL_8BIT_Val;
    4930:	88d3      	ldrh	r3, [r2, #6]
    4932:	f043 0318 	orr.w	r3, r3, #24
    4936:	80d3      	strh	r3, [r2, #6]
        default:
            // Invalid value
            return false;
    }

    m_AdcResolution = m_AdcResPending;
    4938:	f885 106c 	strb.w	r1, [r5, #108]	; 0x6c
    493c:	e723      	b.n	4786 <_ZN9ClearCore10AdcManager10InitializeEv+0x1a6>
            ADC1->CTRLB.bit.RESSEL = ADC_CTRLB_RESSEL_12BIT_Val;
    493e:	88d0      	ldrh	r0, [r2, #6]
    4940:	f363 00c4 	bfi	r0, r3, #3, #2
    4944:	80d0      	strh	r0, [r2, #6]
    4946:	e7f7      	b.n	4938 <_ZN9ClearCore10AdcManager10InitializeEv+0x358>
            ADC1->CTRLB.bit.RESSEL = ADC_CTRLB_RESSEL_10BIT_Val;
    4948:	88d3      	ldrh	r3, [r2, #6]
    494a:	2002      	movs	r0, #2
    494c:	f360 03c4 	bfi	r3, r0, #3, #2
    4950:	80d3      	strh	r3, [r2, #6]
    4952:	e7f1      	b.n	4938 <_ZN9ClearCore10AdcManager10InitializeEv+0x358>

00004954 <_ZN9ClearCore10AdcManager6UpdateEv>:
void AdcManager::Update() {
    4954:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    if (!m_initialized) {
    4958:	f890 3060 	ldrb.w	r3, [r0, #96]	; 0x60
    495c:	2b00      	cmp	r3, #0
    495e:	f000 80ab 	beq.w	4ab8 <_ZN9ClearCore10AdcManager6UpdateEv+0x164>
    if (ADC1->STATUS.bit.ADCBUSY ||
    4962:	4b89      	ldr	r3, [pc, #548]	; (4b88 <_ZN9ClearCore10AdcManager6UpdateEv+0x234>)
    4964:	4604      	mov	r4, r0
    4966:	f893 002f 	ldrb.w	r0, [r3, #47]	; 0x2f
    496a:	f010 0001 	ands.w	r0, r0, #1
    496e:	f000 80a5 	beq.w	4abc <_ZN9ClearCore10AdcManager6UpdateEv+0x168>
        if (++m_AdcBusyCount >= m_AdcTimeoutLimit) {
    4972:	6f23      	ldr	r3, [r4, #112]	; 0x70
    4974:	f894 206e 	ldrb.w	r2, [r4, #110]	; 0x6e
    4978:	3301      	adds	r3, #1
    497a:	4293      	cmp	r3, r2
    497c:	6723      	str	r3, [r4, #112]	; 0x70
    497e:	d302      	bcc.n	4986 <_ZN9ClearCore10AdcManager6UpdateEv+0x32>
            m_AdcTimeout = true;
    4980:	2301      	movs	r3, #1
    4982:	f884 3061 	strb.w	r3, [r4, #97]	; 0x61
    4986:	8c23      	ldrh	r3, [r4, #32]
        m_z = ((static_cast<int64_t>(m_z) * m_tc) >> 15) -
    4988:	6a66      	ldr	r6, [r4, #36]	; 0x24
        m_analogFilter[i].Update(m_AdcResultsConverted[i]);
    498a:	8821      	ldrh	r1, [r4, #0]
    498c:	6ae5      	ldr	r5, [r4, #44]	; 0x2c
    498e:	8d20      	ldrh	r0, [r4, #40]	; 0x28
    4990:	fb83 6706 	smull	r6, r7, r3, r6
    4994:	0bf2      	lsrs	r2, r6, #15
    4996:	ea42 4247 	orr.w	r2, r2, r7, lsl #17
    499a:	b289      	uxth	r1, r1
              ((static_cast<int32_t>(input) * m_tc) << 1) +
    499c:	eb02 4201 	add.w	r2, r2, r1, lsl #16
    49a0:	fb01 f103 	mul.w	r1, r1, r3
    49a4:	eba2 0241 	sub.w	r2, r2, r1, lsl #1
        return (m_z >> 16);
    49a8:	0c13      	lsrs	r3, r2, #16
        m_AdcResultsConvertedFiltered[i] = m_analogFilter[i].LastOutput();
    49aa:	8223      	strh	r3, [r4, #16]
        m_analogFilter[i].Update(m_AdcResultsConverted[i]);
    49ac:	8866      	ldrh	r6, [r4, #2]
        m_z = ((static_cast<int64_t>(m_z) * m_tc) >> 15) -
    49ae:	6262      	str	r2, [r4, #36]	; 0x24
    49b0:	fb80 8905 	smull	r8, r9, r0, r5
    49b4:	ea4f 33d8 	mov.w	r3, r8, lsr #15
    49b8:	b2b2      	uxth	r2, r6
    49ba:	ea43 4349 	orr.w	r3, r3, r9, lsl #17
              ((static_cast<int32_t>(input) * m_tc) << 1) +
    49be:	fb02 f000 	mul.w	r0, r2, r0
    49c2:	eb03 4302 	add.w	r3, r3, r2, lsl #16
    49c6:	eba3 0340 	sub.w	r3, r3, r0, lsl #1
    49ca:	8e21      	ldrh	r1, [r4, #48]	; 0x30
        m_z = ((static_cast<int64_t>(m_z) * m_tc) >> 15) -
    49cc:	6b62      	ldr	r2, [r4, #52]	; 0x34
    49ce:	62e3      	str	r3, [r4, #44]	; 0x2c
        return (m_z >> 16);
    49d0:	0c18      	lsrs	r0, r3, #16
        m_AdcResultsConvertedFiltered[i] = m_analogFilter[i].LastOutput();
    49d2:	8260      	strh	r0, [r4, #18]
        m_analogFilter[i].Update(m_AdcResultsConverted[i]);
    49d4:	88a0      	ldrh	r0, [r4, #4]
    49d6:	8f26      	ldrh	r6, [r4, #56]	; 0x38
    49d8:	f8b4 5040 	ldrh.w	r5, [r4, #64]	; 0x40
        m_z = ((static_cast<int64_t>(m_z) * m_tc) >> 15) -
    49dc:	fb81 2302 	smull	r2, r3, r1, r2
    49e0:	0bd2      	lsrs	r2, r2, #15
    49e2:	b280      	uxth	r0, r0
    49e4:	ea42 4243 	orr.w	r2, r2, r3, lsl #17
              ((static_cast<int32_t>(input) * m_tc) << 1) +
    49e8:	fb00 f101 	mul.w	r1, r0, r1
    49ec:	eb02 4200 	add.w	r2, r2, r0, lsl #16
    49f0:	eba2 0041 	sub.w	r0, r2, r1, lsl #1
        m_z = ((static_cast<int64_t>(m_z) * m_tc) >> 15) -
    49f4:	6be3      	ldr	r3, [r4, #60]	; 0x3c
    49f6:	6360      	str	r0, [r4, #52]	; 0x34
        return (m_z >> 16);
    49f8:	0c02      	lsrs	r2, r0, #16
        m_AdcResultsConvertedFiltered[i] = m_analogFilter[i].LastOutput();
    49fa:	82a2      	strh	r2, [r4, #20]
        m_analogFilter[i].Update(m_AdcResultsConverted[i]);
    49fc:	88e1      	ldrh	r1, [r4, #6]
    49fe:	f8b4 0048 	ldrh.w	r0, [r4, #72]	; 0x48
        m_z = ((static_cast<int64_t>(m_z) * m_tc) >> 15) -
    4a02:	fb86 8903 	smull	r8, r9, r6, r3
    4a06:	ea4f 33d8 	mov.w	r3, r8, lsr #15
    4a0a:	b289      	uxth	r1, r1
    4a0c:	ea43 4349 	orr.w	r3, r3, r9, lsl #17
              ((static_cast<int32_t>(input) * m_tc) << 1) +
    4a10:	fb01 f606 	mul.w	r6, r1, r6
    4a14:	eb03 4301 	add.w	r3, r3, r1, lsl #16
    4a18:	eba3 0146 	sub.w	r1, r3, r6, lsl #1
        return (m_z >> 16);
    4a1c:	0c0b      	lsrs	r3, r1, #16
        m_z = ((static_cast<int64_t>(m_z) * m_tc) >> 15) -
    4a1e:	6c66      	ldr	r6, [r4, #68]	; 0x44
        m_AdcResultsConvertedFiltered[i] = m_analogFilter[i].LastOutput();
    4a20:	82e3      	strh	r3, [r4, #22]
        m_analogFilter[i].Update(m_AdcResultsConverted[i]);
    4a22:	8923      	ldrh	r3, [r4, #8]
    4a24:	63e1      	str	r1, [r4, #60]	; 0x3c
    4a26:	fb85 6706 	smull	r6, r7, r5, r6
    4a2a:	0bf2      	lsrs	r2, r6, #15
    4a2c:	b29b      	uxth	r3, r3
    4a2e:	ea42 4247 	orr.w	r2, r2, r7, lsl #17
              ((static_cast<int32_t>(input) * m_tc) << 1) +
    4a32:	fb03 f505 	mul.w	r5, r3, r5
    4a36:	eb02 4203 	add.w	r2, r2, r3, lsl #16
    4a3a:	eba2 0245 	sub.w	r2, r2, r5, lsl #1
        return (m_z >> 16);
    4a3e:	0c13      	lsrs	r3, r2, #16
        m_z = ((static_cast<int64_t>(m_z) * m_tc) >> 15) -
    4a40:	6ce6      	ldr	r6, [r4, #76]	; 0x4c
        m_AdcResultsConvertedFiltered[i] = m_analogFilter[i].LastOutput();
    4a42:	8323      	strh	r3, [r4, #24]
        m_analogFilter[i].Update(m_AdcResultsConverted[i]);
    4a44:	8961      	ldrh	r1, [r4, #10]
    4a46:	6462      	str	r2, [r4, #68]	; 0x44
    4a48:	fb80 6706 	smull	r6, r7, r0, r6
    4a4c:	0bf3      	lsrs	r3, r6, #15
    4a4e:	b28a      	uxth	r2, r1
    4a50:	ea43 4347 	orr.w	r3, r3, r7, lsl #17
              ((static_cast<int32_t>(input) * m_tc) << 1) +
    4a54:	fb02 f000 	mul.w	r0, r2, r0
    4a58:	eb03 4302 	add.w	r3, r3, r2, lsl #16
    4a5c:	eba3 0340 	sub.w	r3, r3, r0, lsl #1
        return (m_z >> 16);
    4a60:	0c1a      	lsrs	r2, r3, #16
        m_AdcResultsConvertedFiltered[i] = m_analogFilter[i].LastOutput();
    4a62:	8362      	strh	r2, [r4, #26]
        m_z = ((static_cast<int64_t>(m_z) * m_tc) >> 15) -
    4a64:	64e3      	str	r3, [r4, #76]	; 0x4c
        m_analogFilter[i].Update(m_AdcResultsConverted[i]);
    4a66:	89a0      	ldrh	r0, [r4, #12]
    4a68:	f8b4 3050 	ldrh.w	r3, [r4, #80]	; 0x50
    4a6c:	6d62      	ldr	r2, [r4, #84]	; 0x54
    4a6e:	f8b4 1058 	ldrh.w	r1, [r4, #88]	; 0x58
    4a72:	6de6      	ldr	r6, [r4, #92]	; 0x5c
    4a74:	fb83 8902 	smull	r8, r9, r3, r2
    4a78:	ea4f 32d8 	mov.w	r2, r8, lsr #15
    4a7c:	b280      	uxth	r0, r0
    4a7e:	ea42 4249 	orr.w	r2, r2, r9, lsl #17
              ((static_cast<int32_t>(input) * m_tc) << 1) +
    4a82:	fb00 f303 	mul.w	r3, r0, r3
    4a86:	eb02 4200 	add.w	r2, r2, r0, lsl #16
    4a8a:	eba2 0243 	sub.w	r2, r2, r3, lsl #1
        return (m_z >> 16);
    4a8e:	0c13      	lsrs	r3, r2, #16
        m_AdcResultsConvertedFiltered[i] = m_analogFilter[i].LastOutput();
    4a90:	83a3      	strh	r3, [r4, #28]
        m_z = ((static_cast<int64_t>(m_z) * m_tc) >> 15) -
    4a92:	fb81 6706 	smull	r6, r7, r1, r6
        m_analogFilter[i].Update(m_AdcResultsConverted[i]);
    4a96:	89e0      	ldrh	r0, [r4, #14]
    4a98:	6562      	str	r2, [r4, #84]	; 0x54
    4a9a:	0bf3      	lsrs	r3, r6, #15
    4a9c:	b282      	uxth	r2, r0
    4a9e:	ea43 4347 	orr.w	r3, r3, r7, lsl #17
              ((static_cast<int32_t>(input) * m_tc) << 1) +
    4aa2:	fb02 f101 	mul.w	r1, r2, r1
    4aa6:	eb03 4302 	add.w	r3, r3, r2, lsl #16
    4aaa:	eba3 0341 	sub.w	r3, r3, r1, lsl #1
        return (m_z >> 16);
    4aae:	0c1a      	lsrs	r2, r3, #16
        m_z = ((static_cast<int64_t>(m_z) * m_tc) >> 15) -
    4ab0:	65e3      	str	r3, [r4, #92]	; 0x5c
        m_AdcResultsConvertedFiltered[i] = m_analogFilter[i].LastOutput();
    4ab2:	83e2      	strh	r2, [r4, #30]
    4ab4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    4ab8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
            DmaManager::Channel(DMA_ADC_RESULTS)->CHCTRLA.bit.ENABLE) {
    4abc:	f000 fc40 	bl	5340 <_ZN9ClearCore10DmaManager7ChannelENS_11DmaChannelsE>
    4ac0:	6803      	ldr	r3, [r0, #0]
    4ac2:	f3c3 0340 	ubfx	r3, r3, #1, #1
    4ac6:	b2de      	uxtb	r6, r3
    if (ADC1->STATUS.bit.ADCBUSY ||
    4ac8:	2e00      	cmp	r6, #0
    4aca:	f47f af52 	bne.w	4972 <_ZN9ClearCore10AdcManager6UpdateEv+0x1e>
        m_AdcBusyCount = 0;
    4ace:	6726      	str	r6, [r4, #112]	; 0x70
        m_AdcTimeout = false;
    4ad0:	f884 3061 	strb.w	r3, [r4, #97]	; 0x61
    4ad4:	2501      	movs	r5, #1
    4ad6:	f8df 80bc 	ldr.w	r8, [pc, #188]	; 4b94 <_ZN9ClearCore10AdcManager6UpdateEv+0x240>
            if (i == ADC_VSUPPLY_MON && StatusMgr.StatusRT().bit.HBridgeReset) {
    4ada:	4f2c      	ldr	r7, [pc, #176]	; (4b8c <_ZN9ClearCore10AdcManager6UpdateEv+0x238>)
    4adc:	e00f      	b.n	4afe <_ZN9ClearCore10AdcManager6UpdateEv+0x1aa>
                AdcResultsRaw[i] << (15 - m_AdcResolution);
    4ade:	f838 3016 	ldrh.w	r3, [r8, r6, lsl #1]
    4ae2:	f894 206c 	ldrb.w	r2, [r4, #108]	; 0x6c
    4ae6:	b29b      	uxth	r3, r3
    4ae8:	f1c2 010f 	rsb	r1, r2, #15
    4aec:	408b      	lsls	r3, r1
    4aee:	b29b      	uxth	r3, r3
        for (uint8_t i = 0; i < ADC_CHANNEL_COUNT; i++) {
    4af0:	2d07      	cmp	r5, #7
            m_AdcResultsConverted[i] =
    4af2:	f824 3016 	strh.w	r3, [r4, r6, lsl #1]
        for (uint8_t i = 0; i < ADC_CHANNEL_COUNT; i++) {
    4af6:	462e      	mov	r6, r5
    4af8:	dc0c      	bgt.n	4b14 <_ZN9ClearCore10AdcManager6UpdateEv+0x1c0>
    4afa:	3501      	adds	r5, #1
    4afc:	b2ed      	uxtb	r5, r5
            if (i == ADC_VSUPPLY_MON && StatusMgr.StatusRT().bit.HBridgeReset) {
    4afe:	2d01      	cmp	r5, #1
    4b00:	d1ed      	bne.n	4ade <_ZN9ClearCore10AdcManager6UpdateEv+0x18a>
    4b02:	f04f 31ff 	mov.w	r1, #4294967295
    4b06:	6838      	ldr	r0, [r7, #0]
    4b08:	f001 ff5a 	bl	69c0 <_ZN9ClearCore13StatusManager8StatusRTENS0_14StatusRegisterE>
    4b0c:	0703      	lsls	r3, r0, #28
    4b0e:	d5e6      	bpl.n	4ade <_ZN9ClearCore10AdcManager6UpdateEv+0x18a>
        for (uint8_t i = 0; i < ADC_CHANNEL_COUNT; i++) {
    4b10:	462e      	mov	r6, r5
    4b12:	e7f2      	b.n	4afa <_ZN9ClearCore10AdcManager6UpdateEv+0x1a6>
        if (m_AdcResolution != m_AdcResPending) {
    4b14:	f894 306d 	ldrb.w	r3, [r4, #109]	; 0x6d
    4b18:	429a      	cmp	r2, r3
    4b1a:	d005      	beq.n	4b28 <_ZN9ClearCore10AdcManager6UpdateEv+0x1d4>
    switch (m_AdcResPending) {
    4b1c:	2b0a      	cmp	r3, #10
    4b1e:	d02c      	beq.n	4b7a <_ZN9ClearCore10AdcManager6UpdateEv+0x226>
    4b20:	2b0c      	cmp	r3, #12
    4b22:	d024      	beq.n	4b6e <_ZN9ClearCore10AdcManager6UpdateEv+0x21a>
    4b24:	2b08      	cmp	r3, #8
    4b26:	d01a      	beq.n	4b5e <_ZN9ClearCore10AdcManager6UpdateEv+0x20a>
        m_shiftRegSnapshot = m_shiftRegPending;
    4b28:	6ea2      	ldr	r2, [r4, #104]	; 0x68
        m_shiftRegPending = ShiftReg.LastOutput();
    4b2a:	4b19      	ldr	r3, [pc, #100]	; (4b90 <_ZN9ClearCore10AdcManager6UpdateEv+0x23c>)
        m_shiftRegSnapshot = m_shiftRegPending;
    4b2c:	6662      	str	r2, [r4, #100]	; 0x64
        m_shiftRegPending = ShiftReg.LastOutput();
    4b2e:	f8d3 3110 	ldr.w	r3, [r3, #272]	; 0x110
    4b32:	66a3      	str	r3, [r4, #104]	; 0x68
    DmaManager::Channel(DMA_ADC_RESULTS)->CHCTRLA.reg |= DMAC_CHCTRLA_ENABLE;
    4b34:	2000      	movs	r0, #0
    4b36:	f000 fc03 	bl	5340 <_ZN9ClearCore10DmaManager7ChannelENS_11DmaChannelsE>
    4b3a:	4602      	mov	r2, r0
    DmaManager::Channel(DMA_ADC_SEQUENCE)->CHCTRLA.reg |= DMAC_CHCTRLA_ENABLE;
    4b3c:	2001      	movs	r0, #1
    DmaManager::Channel(DMA_ADC_RESULTS)->CHCTRLA.reg |= DMAC_CHCTRLA_ENABLE;
    4b3e:	6813      	ldr	r3, [r2, #0]
    4b40:	f043 0302 	orr.w	r3, r3, #2
    4b44:	6013      	str	r3, [r2, #0]
    DmaManager::Channel(DMA_ADC_SEQUENCE)->CHCTRLA.reg |= DMAC_CHCTRLA_ENABLE;
    4b46:	f000 fbfb 	bl	5340 <_ZN9ClearCore10DmaManager7ChannelENS_11DmaChannelsE>
    4b4a:	6803      	ldr	r3, [r0, #0]
    ADC1->INPUTCTRL.reg &= ~ADC_INPUTCTRL_DSEQSTOP;
    4b4c:	4a0e      	ldr	r2, [pc, #56]	; (4b88 <_ZN9ClearCore10AdcManager6UpdateEv+0x234>)
    DmaManager::Channel(DMA_ADC_SEQUENCE)->CHCTRLA.reg |= DMAC_CHCTRLA_ENABLE;
    4b4e:	f043 0302 	orr.w	r3, r3, #2
    4b52:	6003      	str	r3, [r0, #0]
    ADC1->INPUTCTRL.reg &= ~ADC_INPUTCTRL_DSEQSTOP;
    4b54:	8893      	ldrh	r3, [r2, #4]
    4b56:	f3c3 030e 	ubfx	r3, r3, #0, #15
    4b5a:	8093      	strh	r3, [r2, #4]
    4b5c:	e713      	b.n	4986 <_ZN9ClearCore10AdcManager6UpdateEv+0x32>
            ADC1->CTRLB.bit.RESSEL = ADC_CTRLB_RESSEL_8BIT_Val;
    4b5e:	490a      	ldr	r1, [pc, #40]	; (4b88 <_ZN9ClearCore10AdcManager6UpdateEv+0x234>)
    4b60:	88ca      	ldrh	r2, [r1, #6]
    4b62:	f042 0218 	orr.w	r2, r2, #24
    4b66:	80ca      	strh	r2, [r1, #6]
    m_AdcResolution = m_AdcResPending;
    4b68:	f884 306c 	strb.w	r3, [r4, #108]	; 0x6c
    4b6c:	e7dc      	b.n	4b28 <_ZN9ClearCore10AdcManager6UpdateEv+0x1d4>
            ADC1->CTRLB.bit.RESSEL = ADC_CTRLB_RESSEL_12BIT_Val;
    4b6e:	4a06      	ldr	r2, [pc, #24]	; (4b88 <_ZN9ClearCore10AdcManager6UpdateEv+0x234>)
    4b70:	88d1      	ldrh	r1, [r2, #6]
    4b72:	f36f 01c4 	bfc	r1, #3, #2
    4b76:	80d1      	strh	r1, [r2, #6]
    4b78:	e7f6      	b.n	4b68 <_ZN9ClearCore10AdcManager6UpdateEv+0x214>
            ADC1->CTRLB.bit.RESSEL = ADC_CTRLB_RESSEL_10BIT_Val;
    4b7a:	4a03      	ldr	r2, [pc, #12]	; (4b88 <_ZN9ClearCore10AdcManager6UpdateEv+0x234>)
    4b7c:	88d1      	ldrh	r1, [r2, #6]
    4b7e:	2002      	movs	r0, #2
    4b80:	f360 01c4 	bfi	r1, r0, #3, #2
    4b84:	80d1      	strh	r1, [r2, #6]
    4b86:	e7ef      	b.n	4b68 <_ZN9ClearCore10AdcManager6UpdateEv+0x214>
    4b88:	43002000 	.word	0x43002000
    4b8c:	20000bf8 	.word	0x20000bf8
    4b90:	20001b00 	.word	0x20001b00
    4b94:	20000ae0 	.word	0x20000ae0

00004b98 <_ZN9ClearCore10AdcManager8FilterTcENS0_11AdcChannelsEtNS0_11FilterUnitsE>:
}

bool AdcManager::FilterTc(AdcChannels adcChannel,
                          uint16_t tc,
                          FilterUnits theUnits) {
    if (adcChannel >= ADC_CHANNEL_COUNT) {
    4b98:	2907      	cmp	r1, #7
    4b9a:	dc33      	bgt.n	4c04 <_ZN9ClearCore10AdcManager8FilterTcENS0_11AdcChannelsEtNS0_11FilterUnitsE+0x6c>
                          FilterUnits theUnits) {
    4b9c:	b530      	push	{r4, r5, lr}
        return false;
    }

    switch (theUnits) {
    4b9e:	2b01      	cmp	r3, #1
                          FilterUnits theUnits) {
    4ba0:	b083      	sub	sp, #12
    4ba2:	4605      	mov	r5, r0
    switch (theUnits) {
    4ba4:	d033      	beq.n	4c0e <_ZN9ClearCore10AdcManager8FilterTcENS0_11AdcChannelsEtNS0_11FilterUnitsE+0x76>
    4ba6:	d336      	bcc.n	4c16 <_ZN9ClearCore10AdcManager8FilterTcENS0_11AdcChannelsEtNS0_11FilterUnitsE+0x7e>
    4ba8:	2b02      	cmp	r3, #2
    4baa:	d12d      	bne.n	4c08 <_ZN9ClearCore10AdcManager8FilterTcENS0_11AdcChannelsEtNS0_11FilterUnitsE+0x70>
        float tcTemp = powf(.01, 1. / riseSamples99pct) * 32768 + 0.5;
    4bac:	4610      	mov	r0, r2
            return true;
        case AdcManager::FilterUnits::FILTER_UNIT_MS:
            m_analogFilter[adcChannel].Tc_ms(tc);
            return true;
        case AdcManager::FilterUnits::FILTER_UNIT_SAMPLES:
            m_analogFilter[adcChannel].TcSamples(tc);
    4bae:	1d0c      	adds	r4, r1, #4
    4bb0:	f016 fdca 	bl	1b748 <__aeabi_i2d>
    4bb4:	460b      	mov	r3, r1
    4bb6:	4602      	mov	r2, r0
    4bb8:	491a      	ldr	r1, [pc, #104]	; (4c24 <_ZN9ClearCore10AdcManager8FilterTcENS0_11AdcChannelsEtNS0_11FilterUnitsE+0x8c>)
    4bba:	2000      	movs	r0, #0
    4bbc:	f016 ff54 	bl	1ba68 <__aeabi_ddiv>
    4bc0:	f017 f90a 	bl	1bdd8 <__aeabi_d2f>
    4bc4:	ed9f 0a18 	vldr	s0, [pc, #96]	; 4c28 <_ZN9ClearCore10AdcManager8FilterTcENS0_11AdcChannelsEtNS0_11FilterUnitsE+0x90>
    4bc8:	ee00 0a90 	vmov	s1, r0
    4bcc:	f015 fe64 	bl	1a898 <powf>
    4bd0:	eddf 6a16 	vldr	s13, [pc, #88]	; 4c2c <_ZN9ClearCore10AdcManager8FilterTcENS0_11AdcChannelsEtNS0_11FilterUnitsE+0x94>
        m_tc = (tcTemp < INT16_MAX) ? tcTemp : INT16_MAX;
    4bd4:	ed9f 7a16 	vldr	s14, [pc, #88]	; 4c30 <_ZN9ClearCore10AdcManager8FilterTcENS0_11AdcChannelsEtNS0_11FilterUnitsE+0x98>
        float tcTemp = powf(.01, 1. / riseSamples99pct) * 32768 + 0.5;
    4bd8:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
    4bdc:	eee0 7a26 	vfma.f32	s15, s0, s13
            return true;
    4be0:	2001      	movs	r0, #1
        m_tc = (tcTemp < INT16_MAX) ? tcTemp : INT16_MAX;
    4be2:	eef4 7ac7 	vcmpe.f32	s15, s14
    4be6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    4bea:	bf49      	itett	mi
    4bec:	eefc 7ae7 	vcvtmi.u32.f32	s15, s15
    4bf0:	f647 73ff 	movwpl	r3, #32767	; 0x7fff
    4bf4:	edcd 7a01 	vstrmi	s15, [sp, #4]
    4bf8:	f8bd 3004 	ldrhmi.w	r3, [sp, #4]
    4bfc:	f825 3034 	strh.w	r3, [r5, r4, lsl #3]
        default:
            // Error
            return false;
    }
}
    4c00:	b003      	add	sp, #12
    4c02:	bd30      	pop	{r4, r5, pc}
        return false;
    4c04:	2000      	movs	r0, #0
    4c06:	4770      	bx	lr
            return false;
    4c08:	2000      	movs	r0, #0
}
    4c0a:	b003      	add	sp, #12
    4c0c:	bd30      	pop	{r4, r5, pc}
        TcSamples(riseMs99pct * MS_TO_SAMPLES);
    4c0e:	eb02 0282 	add.w	r2, r2, r2, lsl #2
        float tcTemp = powf(.01, 1. / riseSamples99pct) * 32768 + 0.5;
    4c12:	b290      	uxth	r0, r2
    4c14:	e7cb      	b.n	4bae <_ZN9ClearCore10AdcManager8FilterTcENS0_11AdcChannelsEtNS0_11FilterUnitsE+0x16>
            m_analogFilter[adcChannel].Tc(tc);
    4c16:	3104      	adds	r1, #4
            return true;
    4c18:	2001      	movs	r0, #1
        m_tc = newTc;
    4c1a:	f825 2031 	strh.w	r2, [r5, r1, lsl #3]
}
    4c1e:	b003      	add	sp, #12
    4c20:	bd30      	pop	{r4, r5, pc}
    4c22:	bf00      	nop
    4c24:	3ff00000 	.word	0x3ff00000
    4c28:	3c23d70a 	.word	0x3c23d70a
    4c2c:	47000000 	.word	0x47000000
    4c30:	46fffe00 	.word	0x46fffe00

00004c34 <_GLOBAL__sub_I__ZN9ClearCore6AdcMgrE>:
    DmaManager::Channel(DMA_ADC_RESULTS)->CHINTFLAG.reg =
        DMAC_CHINTENCLR_TCMPL; // clear interrupt
}
#endif

    4c34:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
AdcManager &AdcMgr = AdcManager::Instance();
    4c36:	f7ff fc8f 	bl	4558 <_ZN9ClearCore10AdcManager8InstanceEv>
    4c3a:	4a0f      	ldr	r2, [pc, #60]	; (4c78 <_GLOBAL__sub_I__ZN9ClearCore6AdcMgrE+0x44>)
        bit.INPUTCTRL.reg = inputCtrl;
    4c3c:	4b0f      	ldr	r3, [pc, #60]	; (4c7c <_GLOBAL__sub_I__ZN9ClearCore6AdcMgrE+0x48>)
AdcManager &AdcMgr = AdcManager::Instance();
    4c3e:	6010      	str	r0, [r2, #0]
        bit.INPUTCTRL.reg = inputCtrl;
    4c40:	2104      	movs	r1, #4
    4c42:	2205      	movs	r2, #5
    4c44:	2706      	movs	r7, #6
    4c46:	2607      	movs	r6, #7
    4c48:	2508      	movs	r5, #8
    4c4a:	2409      	movs	r4, #9
    4c4c:	200a      	movs	r0, #10
    4c4e:	8019      	strh	r1, [r3, #0]
    4c50:	809a      	strh	r2, [r3, #4]
    4c52:	f248 010b 	movw	r1, #32779	; 0x800b
        bit.CTRLB.reg = ctrlb;
    4c56:	2200      	movs	r2, #0
        bit.INPUTCTRL.reg = inputCtrl;
    4c58:	811f      	strh	r7, [r3, #8]
    4c5a:	819e      	strh	r6, [r3, #12]
    4c5c:	821d      	strh	r5, [r3, #16]
    4c5e:	829c      	strh	r4, [r3, #20]
    4c60:	8318      	strh	r0, [r3, #24]
    4c62:	8399      	strh	r1, [r3, #28]
        bit.CTRLB.reg = ctrlb;
    4c64:	805a      	strh	r2, [r3, #2]
    4c66:	80da      	strh	r2, [r3, #6]
    4c68:	815a      	strh	r2, [r3, #10]
    4c6a:	81da      	strh	r2, [r3, #14]
    4c6c:	825a      	strh	r2, [r3, #18]
    4c6e:	82da      	strh	r2, [r3, #22]
    4c70:	835a      	strh	r2, [r3, #26]
    4c72:	83da      	strh	r2, [r3, #30]
    4c74:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    4c76:	bf00      	nop
    4c78:	20000af0 	.word	0x20000af0
    4c7c:	20000af4 	.word	0x20000af4

00004c80 <_ZN9ClearCore9DigitalIn11IsInHwFaultEv>:
        a fault state is not possible and so this function will always
        return false.
    **/
    bool IsInHwFault() override {
        return false;
    }
    4c80:	2000      	movs	r0, #0
    4c82:	4770      	bx	lr

00004c84 <_ZN9ClearCore9DigitalIn17ExternalInterruptEv>:
        \note A value of -1 denotes that the connector has no external
        interrupt available.
    **/
    int8_t ExternalInterrupt() override {
        return m_extInt;
    }
    4c84:	f990 0018 	ldrsb.w	r0, [r0, #24]
    4c88:	4770      	bx	lr
    4c8a:	bf00      	nop

00004c8c <_ZN9ClearCore17DigitalInAnalogIn4ModeEv>:

        \return The connector's current operational mode.
    **/
    virtual ConnectorModes Mode() override {
        return Connector::Mode();
    }
    4c8c:	7980      	ldrb	r0, [r0, #6]
    4c8e:	4770      	bx	lr

00004c90 <_ZN9ClearCore17DigitalInAnalogIn4TypeEv>:

        \return The type of this connector (Analog Input)
    **/
    Connector::ConnectorTypes Type() override {
        return Connector::ANALOG_IN_DIGITAL_IN_TYPE;
    }
    4c90:	2003      	movs	r0, #3
    4c92:	4770      	bx	lr

00004c94 <_ZN9ClearCore17DigitalInAnalogIn10IsWritableEv>:

        \return False since this is a read-only connector.
    **/
    bool IsWritable() override {
        return false;
    }
    4c94:	2000      	movs	r0, #0
    4c96:	4770      	bx	lr

00004c98 <_ZN9ClearCore17DigitalInAnalogIn5StateEs>:
    **/
    bool State(int16_t newState) override {
        // ignore attempts to write state
        (void)newState;
        return false;
    }
    4c98:	2000      	movs	r0, #0
    4c9a:	4770      	bx	lr

00004c9c <_ZN9ClearCore17DigitalInAnalogIn4ModeENS_9Connector14ConnectorModesE>:
bool DigitalInAnalogIn::FilterTc(uint16_t tc,
                                 AdcManager::FilterUnits theUnits) {
    return AdcMgr.FilterTc(m_adcChannel, tc, theUnits);
}

bool DigitalInAnalogIn::Mode(ConnectorModes newMode) {
    4c9c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    // Bail out if we are already in the requested mode
    if (newMode == m_mode) {
    4c9e:	7983      	ldrb	r3, [r0, #6]
    4ca0:	428b      	cmp	r3, r1
    4ca2:	d072      	beq.n	4d8a <_ZN9ClearCore17DigitalInAnalogIn4ModeENS_9Connector14ConnectorModesE+0xee>
        return true;
    }

    switch (newMode) {
    4ca4:	2901      	cmp	r1, #1
    4ca6:	460c      	mov	r4, r1
    4ca8:	4605      	mov	r5, r0
    4caa:	d03c      	beq.n	4d26 <_ZN9ClearCore17DigitalInAnalogIn4ModeENS_9Connector14ConnectorModesE+0x8a>
    4cac:	2902      	cmp	r1, #2
    4cae:	d135      	bne.n	4d1c <_ZN9ClearCore17DigitalInAnalogIn4ModeENS_9Connector14ConnectorModesE+0x80>
        \brief Atomic set of shift register state fields.

        \param[in] bitsToSet LED bit in the shift register to be set.
    **/
    void ShifterStateSet(Masks bitsToSet) {
        atomic_or_fetch(&m_patternOutputs[LED_BLINK_IO_SET], bitsToSet);
    4cb0:	4e37      	ldr	r6, [pc, #220]	; (4d90 <_ZN9ClearCore17DigitalInAnalogIn4ModeENS_9Connector14ConnectorModesE+0xf4>)
    4cb2:	6b03      	ldr	r3, [r0, #48]	; 0x30
    4cb4:	f3bf 8f5b 	dmb	ish
    4cb8:	e856 2f00 	ldrex	r2, [r6]
    4cbc:	431a      	orrs	r2, r3
    4cbe:	e846 2100 	strex	r1, r2, [r6]
    4cc2:	2900      	cmp	r1, #0
    4cc4:	d1f8      	bne.n	4cb8 <_ZN9ClearCore17DigitalInAnalogIn4ModeENS_9Connector14ConnectorModesE+0x1c>
    4cc6:	f3bf 8f5b 	dmb	ish
        case INPUT_DIGITAL:
            ShiftReg.ShifterState(true, m_modeControlBitMask);
            // If the system has already been initialized, wait until the
            // digital reading is valid then reset the filtered state
            if (ShiftReg.Ready()) {
    4cca:	3ef4      	subs	r6, #244	; 0xf4
    4ccc:	f896 3108 	ldrb.w	r3, [r6, #264]	; 0x108
    4cd0:	b143      	cbz	r3, 4ce4 <_ZN9ClearCore17DigitalInAnalogIn4ModeENS_9Connector14ConnectorModesE+0x48>
    4cd2:	4b30      	ldr	r3, [pc, #192]	; (4d94 <_ZN9ClearCore17DigitalInAnalogIn4ModeENS_9Connector14ConnectorModesE+0xf8>)
    4cd4:	6b29      	ldr	r1, [r5, #48]	; 0x30
    4cd6:	681a      	ldr	r2, [r3, #0]
                while (!(AdcMgr.ShiftRegSnapshot() & m_modeControlBitMask)) {
    4cd8:	6e53      	ldr	r3, [r2, #100]	; 0x64
    4cda:	420b      	tst	r3, r1
    4cdc:	d0fc      	beq.n	4cd8 <_ZN9ClearCore17DigitalInAnalogIn4ModeENS_9Connector14ConnectorModesE+0x3c>
                    continue;
                }
                UpdateFilterState();
    4cde:	4628      	mov	r0, r5
    4ce0:	f000 fa9a 	bl	5218 <_ZN9ClearCore9DigitalIn17UpdateFilterStateEv>
        index &= 0xf;   // guard against index out of bounds
    4ce4:	792b      	ldrb	r3, [r5, #4]
                                              : m_fadeCounter.m_activeMask &= ~(1 << index);
    4ce6:	f8b6 1074 	ldrh.w	r1, [r6, #116]	; 0x74
            }
            ShiftReg.LedInPwm(m_ledMask, false, m_clearCorePin);
    4cea:	68af      	ldr	r7, [r5, #8]
                                           : m_patternMasks[pattern] &= ~ledMask;
    4cec:	f8d6 20e8 	ldr.w	r2, [r6, #232]	; 0xe8
        m_fadeCounter.m_analogMasks[index] = ledMask;
    4cf0:	f003 030f 	and.w	r3, r3, #15
                                              : m_fadeCounter.m_activeMask &= ~(1 << index);
    4cf4:	2001      	movs	r0, #1
    4cf6:	4098      	lsls	r0, r3
    4cf8:	ea21 0100 	bic.w	r1, r1, r0
        m_fadeCounter.m_analogMasks[index] = ledMask;
    4cfc:	eb06 0383 	add.w	r3, r6, r3, lsl #2
                                              : m_fadeCounter.m_activeMask &= ~(1 << index);
    4d00:	f8a6 1074 	strh.w	r1, [r6, #116]	; 0x74
            m_mode = newMode;
    4d04:	2002      	movs	r0, #2
                                           : m_patternMasks[pattern] &= ~ledMask;
    4d06:	ea22 0207 	bic.w	r2, r2, r7
            m_analogValid = false;
    4d0a:	2100      	movs	r1, #0
        m_fadeCounter.m_analogMasks[index] = ledMask;
    4d0c:	f8c3 70a0 	str.w	r7, [r3, #160]	; 0xa0
                                           : m_patternMasks[pattern] &= ~ledMask;
    4d10:	f8c6 20e8 	str.w	r2, [r6, #232]	; 0xe8
            break;
    4d14:	4603      	mov	r3, r0
            m_mode = newMode;
    4d16:	71a8      	strb	r0, [r5, #6]
            m_analogValid = false;
    4d18:	f885 1040 	strb.w	r1, [r5, #64]	; 0x40
            break;
        default:
            break;
    }

    return (m_mode == newMode);
    4d1c:	1ae0      	subs	r0, r4, r3
    4d1e:	fab0 f080 	clz	r0, r0
    4d22:	0940      	lsrs	r0, r0, #5
    4d24:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        \brief Atomic clear of shift register state fields.

        \param[in] bitsToClr LED bit in the shift register to be cleared.
    **/
    void ShifterStateClear(Masks bitsToClr) {
        atomic_and_fetch(&m_patternOutputs[LED_BLINK_IO_SET], ~bitsToClr);
    4d26:	6b03      	ldr	r3, [r0, #48]	; 0x30
    4d28:	4e19      	ldr	r6, [pc, #100]	; (4d90 <_ZN9ClearCore17DigitalInAnalogIn4ModeENS_9Connector14ConnectorModesE+0xf4>)
    4d2a:	f3bf 8f5b 	dmb	ish
    4d2e:	43db      	mvns	r3, r3
    4d30:	e856 2f00 	ldrex	r2, [r6]
    4d34:	401a      	ands	r2, r3
    4d36:	e846 2100 	strex	r1, r2, [r6]
    4d3a:	2900      	cmp	r1, #0
    4d3c:	d1f8      	bne.n	4d30 <_ZN9ClearCore17DigitalInAnalogIn4ModeENS_9Connector14ConnectorModesE+0x94>
    4d3e:	f3bf 8f5b 	dmb	ish
            if (ShiftReg.Ready()) {
    4d42:	3ef4      	subs	r6, #244	; 0xf4
    4d44:	f896 3108 	ldrb.w	r3, [r6, #264]	; 0x108
            m_mode = newMode;
    4d48:	71ac      	strb	r4, [r5, #6]
            if (ShiftReg.Ready()) {
    4d4a:	b11b      	cbz	r3, 4d54 <_ZN9ClearCore17DigitalInAnalogIn4ModeENS_9Connector14ConnectorModesE+0xb8>
                while (!m_analogValid) {
    4d4c:	f895 3040 	ldrb.w	r3, [r5, #64]	; 0x40
    4d50:	2b00      	cmp	r3, #0
    4d52:	d0fb      	beq.n	4d4c <_ZN9ClearCore17DigitalInAnalogIn4ModeENS_9Connector14ConnectorModesE+0xb0>
        index &= 0xf;   // guard against index out of bounds
    4d54:	792b      	ldrb	r3, [r5, #4]
        state ? m_fadeCounter.m_activeMask |= 1 << index
    4d56:	f8b6 2074 	ldrh.w	r2, [r6, #116]	; 0x74
            ShiftReg.LedInPwm(m_ledMask, true, m_clearCorePin);
    4d5a:	68ad      	ldr	r5, [r5, #8]
        state ? m_patternMasks[pattern] |= ledMask
    4d5c:	f8d6 10e8 	ldr.w	r1, [r6, #232]	; 0xe8
        state ? m_fadeCounter.m_activeMask |= 1 << index
    4d60:	2001      	movs	r0, #1
        m_fadeCounter.m_analogMasks[index] = ledMask;
    4d62:	f003 030f 	and.w	r3, r3, #15
    4d66:	eb06 0783 	add.w	r7, r6, r3, lsl #2
        state ? m_fadeCounter.m_activeMask |= 1 << index
    4d6a:	fa00 f303 	lsl.w	r3, r0, r3
    4d6e:	431a      	orrs	r2, r3
        state ? m_patternMasks[pattern] |= ledMask
    4d70:	4603      	mov	r3, r0
    return (m_mode == newMode);
    4d72:	1ae0      	subs	r0, r4, r3
    4d74:	4329      	orrs	r1, r5
    4d76:	fab0 f080 	clz	r0, r0
        m_fadeCounter.m_analogMasks[index] = ledMask;
    4d7a:	f8c7 50a0 	str.w	r5, [r7, #160]	; 0xa0
        state ? m_patternMasks[pattern] |= ledMask
    4d7e:	f8c6 10e8 	str.w	r1, [r6, #232]	; 0xe8
        state ? m_fadeCounter.m_activeMask |= 1 << index
    4d82:	f8a6 2074 	strh.w	r2, [r6, #116]	; 0x74
    4d86:	0940      	lsrs	r0, r0, #5
    4d88:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        return true;
    4d8a:	2001      	movs	r0, #1
}
    4d8c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    4d8e:	bf00      	nop
    4d90:	20001bf4 	.word	0x20001bf4
    4d94:	20000af0 	.word	0x20000af0

00004d98 <_ZN9ClearCore17DigitalInAnalogInC1ENS_13ShiftRegister5MasksES2_PK15PeripheralRouteNS_10AdcManager11AdcChannelsE>:
DigitalInAnalogIn::DigitalInAnalogIn(ShiftRegister::Masks ledMask,
    4d98:	b570      	push	{r4, r5, r6, lr}
    4d9a:	4604      	mov	r4, r0
    4d9c:	4616      	mov	r6, r2
      m_analogValid(false) {}
    4d9e:	461a      	mov	r2, r3
DigitalInAnalogIn::DigitalInAnalogIn(ShiftRegister::Masks ledMask,
    4da0:	f89d 5010 	ldrb.w	r5, [sp, #16]
      m_analogValid(false) {}
    4da4:	f000 fa06 	bl	51b4 <_ZN9ClearCore9DigitalInC1ENS_13ShiftRegister5MasksEPK15PeripheralRoute>
    4da8:	2300      	movs	r3, #0
    4daa:	4a05      	ldr	r2, [pc, #20]	; (4dc0 <_ZN9ClearCore17DigitalInAnalogInC1ENS_13ShiftRegister5MasksES2_PK15PeripheralRouteNS_10AdcManager11AdcChannelsE+0x28>)
    4dac:	6326      	str	r6, [r4, #48]	; 0x30
    4dae:	f884 5034 	strb.w	r5, [r4, #52]	; 0x34
    4db2:	6022      	str	r2, [r4, #0]
    4db4:	63a3      	str	r3, [r4, #56]	; 0x38
    4db6:	63e3      	str	r3, [r4, #60]	; 0x3c
    4db8:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
    4dbc:	4620      	mov	r0, r4
    4dbe:	bd70      	pop	{r4, r5, r6, pc}
    4dc0:	00022780 	.word	0x00022780

00004dc4 <_ZN9ClearCore17DigitalInAnalogIn7RefreshEv>:
    switch (m_mode) {
    4dc4:	7982      	ldrb	r2, [r0, #6]
    4dc6:	2a01      	cmp	r2, #1
    4dc8:	d004      	beq.n	4dd4 <_ZN9ClearCore17DigitalInAnalogIn7RefreshEv+0x10>
    4dca:	2a02      	cmp	r2, #2
    4dcc:	d101      	bne.n	4dd2 <_ZN9ClearCore17DigitalInAnalogIn7RefreshEv+0xe>
            DigitalIn::Refresh();
    4dce:	f000 b941 	b.w	5054 <_ZN9ClearCore9DigitalIn7RefreshEv>
    4dd2:	4770      	bx	lr
            if (!(AdcMgr.ShiftRegSnapshot() & m_modeControlBitMask)) {
    4dd4:	4a17      	ldr	r2, [pc, #92]	; (4e34 <_ZN9ClearCore17DigitalInAnalogIn7RefreshEv+0x70>)
    4dd6:	6b01      	ldr	r1, [r0, #48]	; 0x30
    4dd8:	6812      	ldr	r2, [r2, #0]
    4dda:	4603      	mov	r3, r0
    4ddc:	6e50      	ldr	r0, [r2, #100]	; 0x64
    4dde:	4208      	tst	r0, r1
    4de0:	d126      	bne.n	4e30 <_ZN9ClearCore17DigitalInAnalogIn7RefreshEv+0x6c>
                if (!m_analogValid) {
    4de2:	f893 1040 	ldrb.w	r1, [r3, #64]	; 0x40
void DigitalInAnalogIn::Refresh() {
    4de6:	b470      	push	{r4, r5, r6}
                if (!m_analogValid) {
    4de8:	b991      	cbnz	r1, 4e10 <_ZN9ClearCore17DigitalInAnalogIn7RefreshEv+0x4c>
                    AdcMgr.FilterReset(m_adcChannel, *m_adcResultConvertedPtr);
    4dea:	6b99      	ldr	r1, [r3, #56]	; 0x38
    4dec:	f893 4034 	ldrb.w	r4, [r3, #52]	; 0x34
    4df0:	8808      	ldrh	r0, [r1, #0]
        \param[in] adcChannel ADC Channel filter to reset.
        \param[in] newSetting The initial filter value.
        \return Success.
    **/
    bool FilterReset(AdcChannels adcChannel, uint16_t newSetting) {
        if (adcChannel >= ADC_CHANNEL_COUNT) {
    4df2:	2c07      	cmp	r4, #7
    4df4:	b280      	uxth	r0, r0
    4df6:	dc07      	bgt.n	4e08 <_ZN9ClearCore17DigitalInAnalogIn7RefreshEv+0x44>
        m_z = (newSetting << 16);
    4df8:	0400      	lsls	r0, r0, #16
    4dfa:	eb02 06c4 	add.w	r6, r2, r4, lsl #3
            return false;
        }
        m_analogFilter[adcChannel].Reset(newSetting);
        m_AdcResultsConvertedFiltered[adcChannel] =
    4dfe:	3408      	adds	r4, #8
        return (m_z >> 16);
    4e00:	0c05      	lsrs	r5, r0, #16
        m_z = (newSetting << 16);
    4e02:	6270      	str	r0, [r6, #36]	; 0x24
    4e04:	f822 5014 	strh.w	r5, [r2, r4, lsl #1]
                    m_analogValid = true;
    4e08:	2201      	movs	r2, #1
    4e0a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    4e0e:	e000      	b.n	4e12 <_ZN9ClearCore17DigitalInAnalogIn7RefreshEv+0x4e>
    4e10:	6b99      	ldr	r1, [r3, #56]	; 0x38
                uint8_t value = (*m_adcResultConvertedPtr) >> 7;
    4e12:	880a      	ldrh	r2, [r1, #0]
        index &= 0xf;   // guard against index out of bounds
    4e14:	7918      	ldrb	r0, [r3, #4]
        m_fadeCounter.m_valuesBuf[index] = value;
    4e16:	4908      	ldr	r1, [pc, #32]	; (4e38 <_ZN9ClearCore17DigitalInAnalogIn7RefreshEv+0x74>)
    4e18:	f3c2 13c8 	ubfx	r3, r2, #7, #9
    4e1c:	f000 020f 	and.w	r2, r0, #15
                if (value < 0x03) {
    4e20:	b2d8      	uxtb	r0, r3
    4e22:	440a      	add	r2, r1
    4e24:	2802      	cmp	r0, #2
    4e26:	bfd8      	it	le
    4e28:	2300      	movle	r3, #0
    4e2a:	f882 308d 	strb.w	r3, [r2, #141]	; 0x8d
}
    4e2e:	bc70      	pop	{r4, r5, r6}
    4e30:	4770      	bx	lr
    4e32:	bf00      	nop
    4e34:	20000af0 	.word	0x20000af0
    4e38:	20001b00 	.word	0x20001b00

00004e3c <_ZN9ClearCore17DigitalInAnalogIn10InitializeE13ClearCorePins>:
    AdcMgr.FilterTc(m_adcChannel,
    4e3c:	4b29      	ldr	r3, [pc, #164]	; (4ee4 <_ZN9ClearCore17DigitalInAnalogIn10InitializeE13ClearCorePins+0xa8>)
void DigitalInAnalogIn::Initialize(ClearCorePins clearCorePin) {
    4e3e:	b570      	push	{r4, r5, r6, lr}
    4e40:	4604      	mov	r4, r0
    AdcMgr.FilterTc(m_adcChannel,
    4e42:	681d      	ldr	r5, [r3, #0]
void DigitalInAnalogIn::Initialize(ClearCorePins clearCorePin) {
    4e44:	460e      	mov	r6, r1
                    AdcManager::FILTER_UNIT_MS);
    4e46:	4628      	mov	r0, r5
    4e48:	f894 1034 	ldrb.w	r1, [r4, #52]	; 0x34
    4e4c:	2301      	movs	r3, #1
    4e4e:	2202      	movs	r2, #2
    4e50:	f7ff fea2 	bl	4b98 <_ZN9ClearCore10AdcManager8FilterTcENS0_11AdcChannelsEtNS0_11FilterUnitsE>
    4e54:	f894 3034 	ldrb.w	r3, [r4, #52]	; 0x34
    4e58:	005b      	lsls	r3, r3, #1
        return m_AdcResultsConvertedFiltered[adcChannel];
    4e5a:	f103 0210 	add.w	r2, r3, #16
        return m_AdcResultsConverted[adcChannel];
    4e5e:	442b      	add	r3, r5
        return m_AdcResultsConvertedFiltered[adcChannel];
    4e60:	4415      	add	r5, r2
    m_adcResultConvertedPtr = &AdcMgr.ConvertedResult(m_adcChannel);
    4e62:	63a3      	str	r3, [r4, #56]	; 0x38
    DigitalIn::Initialize(clearCorePin);
    4e64:	4631      	mov	r1, r6
    m_adcResultConvertedFilteredPtr = &AdcMgr.FilteredResult(m_adcChannel);
    4e66:	63e5      	str	r5, [r4, #60]	; 0x3c
    DigitalIn::Initialize(clearCorePin);
    4e68:	4620      	mov	r0, r4
    4e6a:	f000 f88d 	bl	4f88 <_ZN9ClearCore9DigitalIn10InitializeE13ClearCorePins>
    Mode(INPUT_ANALOG);
    4e6e:	6823      	ldr	r3, [r4, #0]
    4e70:	4a1d      	ldr	r2, [pc, #116]	; (4ee8 <_ZN9ClearCore17DigitalInAnalogIn10InitializeE13ClearCorePins+0xac>)
    4e72:	685b      	ldr	r3, [r3, #4]
    4e74:	4293      	cmp	r3, r2
    4e76:	d130      	bne.n	4eda <_ZN9ClearCore17DigitalInAnalogIn10InitializeE13ClearCorePins+0x9e>
    if (newMode == m_mode) {
    4e78:	79a3      	ldrb	r3, [r4, #6]
    4e7a:	2b01      	cmp	r3, #1
    4e7c:	d02c      	beq.n	4ed8 <_ZN9ClearCore17DigitalInAnalogIn10InitializeE13ClearCorePins+0x9c>
        atomic_and_fetch(&m_patternOutputs[LED_BLINK_IO_SET], ~bitsToClr);
    4e7e:	6b23      	ldr	r3, [r4, #48]	; 0x30
    4e80:	4a1a      	ldr	r2, [pc, #104]	; (4eec <_ZN9ClearCore17DigitalInAnalogIn10InitializeE13ClearCorePins+0xb0>)
    4e82:	f3bf 8f5b 	dmb	ish
    4e86:	43db      	mvns	r3, r3
    4e88:	e852 1f00 	ldrex	r1, [r2]
    4e8c:	4019      	ands	r1, r3
    4e8e:	e842 1000 	strex	r0, r1, [r2]
    4e92:	2800      	cmp	r0, #0
    4e94:	d1f8      	bne.n	4e88 <_ZN9ClearCore17DigitalInAnalogIn10InitializeE13ClearCorePins+0x4c>
    4e96:	f3bf 8f5b 	dmb	ish
            if (ShiftReg.Ready()) {
    4e9a:	3af4      	subs	r2, #244	; 0xf4
    4e9c:	f892 3108 	ldrb.w	r3, [r2, #264]	; 0x108
            m_mode = newMode;
    4ea0:	2101      	movs	r1, #1
    4ea2:	71a1      	strb	r1, [r4, #6]
            if (ShiftReg.Ready()) {
    4ea4:	b11b      	cbz	r3, 4eae <_ZN9ClearCore17DigitalInAnalogIn10InitializeE13ClearCorePins+0x72>
                while (!m_analogValid) {
    4ea6:	f894 3040 	ldrb.w	r3, [r4, #64]	; 0x40
    4eaa:	2b00      	cmp	r3, #0
    4eac:	d0fb      	beq.n	4ea6 <_ZN9ClearCore17DigitalInAnalogIn10InitializeE13ClearCorePins+0x6a>
        index &= 0xf;   // guard against index out of bounds
    4eae:	7923      	ldrb	r3, [r4, #4]
        state ? m_fadeCounter.m_activeMask |= 1 << index
    4eb0:	f8b2 6074 	ldrh.w	r6, [r2, #116]	; 0x74
            ShiftReg.LedInPwm(m_ledMask, true, m_clearCorePin);
    4eb4:	68a4      	ldr	r4, [r4, #8]
        state ? m_patternMasks[pattern] |= ledMask
    4eb6:	f8d2 00e8 	ldr.w	r0, [r2, #232]	; 0xe8
        m_fadeCounter.m_analogMasks[index] = ledMask;
    4eba:	f003 010f 	and.w	r1, r3, #15
        state ? m_fadeCounter.m_activeMask |= 1 << index
    4ebe:	2301      	movs	r3, #1
        m_fadeCounter.m_analogMasks[index] = ledMask;
    4ec0:	eb02 0581 	add.w	r5, r2, r1, lsl #2
        state ? m_fadeCounter.m_activeMask |= 1 << index
    4ec4:	408b      	lsls	r3, r1
    4ec6:	4333      	orrs	r3, r6
        state ? m_patternMasks[pattern] |= ledMask
    4ec8:	4320      	orrs	r0, r4
        m_fadeCounter.m_analogMasks[index] = ledMask;
    4eca:	f8c5 40a0 	str.w	r4, [r5, #160]	; 0xa0
        state ? m_fadeCounter.m_activeMask |= 1 << index
    4ece:	f8a2 3074 	strh.w	r3, [r2, #116]	; 0x74
        state ? m_patternMasks[pattern] |= ledMask
    4ed2:	f8c2 00e8 	str.w	r0, [r2, #232]	; 0xe8
    4ed6:	bd70      	pop	{r4, r5, r6, pc}
    4ed8:	bd70      	pop	{r4, r5, r6, pc}
    Mode(INPUT_ANALOG);
    4eda:	4620      	mov	r0, r4
    4edc:	2101      	movs	r1, #1
}
    4ede:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    Mode(INPUT_ANALOG);
    4ee2:	4718      	bx	r3
    4ee4:	20000af0 	.word	0x20000af0
    4ee8:	00004c9d 	.word	0x00004c9d
    4eec:	20001bf4 	.word	0x20001bf4

00004ef0 <_ZN9ClearCore17DigitalInAnalogIn5StateEv>:
    switch (m_mode) {
    4ef0:	7982      	ldrb	r2, [r0, #6]
    4ef2:	2a01      	cmp	r2, #1
    4ef4:	d005      	beq.n	4f02 <_ZN9ClearCore17DigitalInAnalogIn5StateEv+0x12>
    4ef6:	2a02      	cmp	r2, #2
    4ef8:	d101      	bne.n	4efe <_ZN9ClearCore17DigitalInAnalogIn5StateEv+0xe>
            state = DigitalIn::State();
    4efa:	f000 b831 	b.w	4f60 <_ZN9ClearCore9DigitalIn5StateEv>
            state = 0;
    4efe:	2000      	movs	r0, #0
    4f00:	4770      	bx	lr
            if (StatusMgr.AdcIsInTimeout()) {
    4f02:	4b0b      	ldr	r3, [pc, #44]	; (4f30 <_ZN9ClearCore17DigitalInAnalogIn5StateEv+0x40>)
int16_t DigitalInAnalogIn::State() {
    4f04:	b510      	push	{r4, lr}
    4f06:	4604      	mov	r4, r0
            if (StatusMgr.AdcIsInTimeout()) {
    4f08:	6818      	ldr	r0, [r3, #0]
    4f0a:	f001 fd5f 	bl	69cc <_ZN9ClearCore13StatusManager14AdcIsInTimeoutEv>
    4f0e:	b958      	cbnz	r0, 4f28 <_ZN9ClearCore17DigitalInAnalogIn5StateEv+0x38>
                        (15 - AdcMgr.AdcResolution());
    4f10:	4b08      	ldr	r3, [pc, #32]	; (4f34 <_ZN9ClearCore17DigitalInAnalogIn5StateEv+0x44>)
                state = *m_adcResultConvertedFilteredPtr >>
    4f12:	6be2      	ldr	r2, [r4, #60]	; 0x3c
                        (15 - AdcMgr.AdcResolution());
    4f14:	681b      	ldr	r3, [r3, #0]
                state = *m_adcResultConvertedFilteredPtr >>
    4f16:	8810      	ldrh	r0, [r2, #0]
                        (15 - AdcMgr.AdcResolution());
    4f18:	f893 306c 	ldrb.w	r3, [r3, #108]	; 0x6c
                state = *m_adcResultConvertedFilteredPtr >>
    4f1c:	b280      	uxth	r0, r0
                        (15 - AdcMgr.AdcResolution());
    4f1e:	f1c3 030f 	rsb	r3, r3, #15
                state = *m_adcResultConvertedFilteredPtr >>
    4f22:	4118      	asrs	r0, r3
    4f24:	b200      	sxth	r0, r0
    4f26:	bd10      	pop	{r4, pc}
                state = -1;
    4f28:	f04f 30ff 	mov.w	r0, #4294967295
}
    4f2c:	bd10      	pop	{r4, pc}
    4f2e:	bf00      	nop
    4f30:	20000bf8 	.word	0x20000bf8
    4f34:	20000af0 	.word	0x20000af0

00004f38 <_ZN9ClearCore9Connector4ModeEv>:

        \return The connector's current operational mode.
    **/
    virtual ConnectorModes Mode() {
        return m_mode;
    }
    4f38:	7980      	ldrb	r0, [r0, #6]
    4f3a:	4770      	bx	lr

00004f3c <_ZN9ClearCore9Connector17ExternalInterruptEv>:
        \note A value of -1 denotes that the connector has no external
        interrupt available.
    **/
    virtual int8_t ExternalInterrupt() {
        return -1;
    }
    4f3c:	f04f 30ff 	mov.w	r0, #4294967295
    4f40:	4770      	bx	lr
    4f42:	bf00      	nop

00004f44 <_ZN9ClearCore9DigitalIn4ModeEv>:
    }
    4f44:	7980      	ldrb	r0, [r0, #6]
    4f46:	4770      	bx	lr

00004f48 <_ZN9ClearCore9DigitalIn4ModeENS_9Connector14ConnectorModesE>:
        if (newMode == ConnectorModes::INPUT_DIGITAL) {
    4f48:	2902      	cmp	r1, #2
            m_mode = newMode;
    4f4a:	bf06      	itte	eq
    4f4c:	7181      	strbeq	r1, [r0, #6]
            return true;
    4f4e:	2001      	moveq	r0, #1
            return false;
    4f50:	2000      	movne	r0, #0
    }
    4f52:	4770      	bx	lr

00004f54 <_ZN9ClearCore9DigitalIn4TypeEv>:
    }
    4f54:	2000      	movs	r0, #0
    4f56:	4770      	bx	lr

00004f58 <_ZN9ClearCore9DigitalIn10IsWritableEv>:
    }
    4f58:	2000      	movs	r0, #0
    4f5a:	4770      	bx	lr

00004f5c <_ZN9ClearCore9DigitalIn5StateEs>:
    }
    4f5c:	2000      	movs	r0, #0
    4f5e:	4770      	bx	lr

00004f60 <_ZN9ClearCore9DigitalIn5StateEv>:
    m_clearCorePin = clearCorePin;
    Mode(INPUT_DIGITAL);
}

int16_t DigitalIn::State() {
    if (m_filterLength == 0) {
    4f60:	8d43      	ldrh	r3, [r0, #42]	; 0x2a
    4f62:	b113      	cbz	r3, 4f6a <_ZN9ClearCore9DigitalIn5StateEv+0xa>
        // Pull an unfiltered, real time input value.
        return StateRT();
    }
    return m_stateFiltered;
    4f64:	f890 0028 	ldrb.w	r0, [r0, #40]	; 0x28
}
    4f68:	4770      	bx	lr

int16_t DigitalIn::StateRT() {
    // Pull an unfiltered, real time input value.
    return !(*InputMgr.m_inputPtrs[m_inputPort] & m_inputDataMask);
    4f6a:	4b06      	ldr	r3, [pc, #24]	; (4f84 <_ZN9ClearCore9DigitalIn5StateEv+0x24>)
    4f6c:	68c1      	ldr	r1, [r0, #12]
    4f6e:	681a      	ldr	r2, [r3, #0]
    4f70:	6943      	ldr	r3, [r0, #20]
    4f72:	f852 2021 	ldr.w	r2, [r2, r1, lsl #2]
    4f76:	6812      	ldr	r2, [r2, #0]
    4f78:	421a      	tst	r2, r3
    4f7a:	bf0c      	ite	eq
    4f7c:	2001      	moveq	r0, #1
    4f7e:	2000      	movne	r0, #0
    4f80:	4770      	bx	lr
    4f82:	bf00      	nop
    4f84:	20000bec 	.word	0x20000bec

00004f88 <_ZN9ClearCore9DigitalIn10InitializeE13ClearCorePins>:
    m_filterLength = 3;
    4f88:	4b2e      	ldr	r3, [pc, #184]	; (5044 <_ZN9ClearCore9DigitalIn10InitializeE13ClearCorePins+0xbc>)
void DigitalIn::Initialize(ClearCorePins clearCorePin) {
    4f8a:	b4f0      	push	{r4, r5, r6, r7}
    m_filterLength = 3;
    4f8c:	f8c0 302a 	str.w	r3, [r0, #42]	; 0x2a
    PMUX_SELECTION(m_inputPort, m_inputDataBit, PER_EXTINT);
    4f90:	68c3      	ldr	r3, [r0, #12]
    4f92:	6904      	ldr	r4, [r0, #16]
    4f94:	01da      	lsls	r2, r3, #7
    4f96:	f102 4582 	add.w	r5, r2, #1090519040	; 0x41000000
    m_mode = INVALID_NONE;
    4f9a:	2600      	movs	r6, #0
    PMUX_SELECTION(m_inputPort, m_inputDataBit, PER_EXTINT);
    4f9c:	f505 4500 	add.w	r5, r5, #32768	; 0x8000
    4fa0:	f014 0701 	ands.w	r7, r4, #1
    m_mode = INVALID_NONE;
    4fa4:	7186      	strb	r6, [r0, #6]
    m_stateFiltered = false;
    4fa6:	f880 6028 	strb.w	r6, [r0, #40]	; 0x28
    PMUX_SELECTION(m_inputPort, m_inputDataBit, PER_EXTINT);
    4faa:	eb05 0554 	add.w	r5, r5, r4, lsr #1
    4fae:	d034      	beq.n	501a <_ZN9ClearCore9DigitalIn10InitializeE13ClearCorePins+0x92>
    4fb0:	f895 7030 	ldrb.w	r7, [r5, #48]	; 0x30
    4fb4:	f366 1707 	bfi	r7, r6, #4, #4
    4fb8:	f885 7030 	strb.w	r7, [r5, #48]	; 0x30
        PIN_CONFIGURATION(m_inputPort, m_inputDataBit,
    4fbc:	f102 4282 	add.w	r2, r2, #1090519040	; 0x41000000
    if (m_interruptAvail) {
    4fc0:	7e45      	ldrb	r5, [r0, #25]
        PIN_CONFIGURATION(m_inputPort, m_inputDataBit,
    4fc2:	f502 4200 	add.w	r2, r2, #32768	; 0x8000
    4fc6:	4422      	add	r2, r4
    if (m_interruptAvail) {
    4fc8:	2d00      	cmp	r5, #0
    4fca:	d134      	bne.n	5036 <_ZN9ClearCore9DigitalIn10InitializeE13ClearCorePins+0xae>
        PIN_CONFIGURATION(m_inputPort, m_inputDataBit, PORT_PINCFG_INEN);
    4fcc:	2402      	movs	r4, #2
    4fce:	f882 4040 	strb.w	r4, [r2, #64]	; 0x40
    m_changeRegPtr = &InputMgr.m_inputsUnfilteredChanges[m_inputPort];
    4fd2:	4a1d      	ldr	r2, [pc, #116]	; (5048 <_ZN9ClearCore9DigitalIn10InitializeE13ClearCorePins+0xc0>)
        atomic_and_fetch(&m_patternOutputs[LED_BLINK_IO_SET], ~bitsToClr);
    4fd4:	6884      	ldr	r4, [r0, #8]
    4fd6:	6812      	ldr	r2, [r2, #0]
    4fd8:	4e1c      	ldr	r6, [pc, #112]	; (504c <_ZN9ClearCore9DigitalIn10InitializeE13ClearCorePins+0xc4>)
    4fda:	3306      	adds	r3, #6
    4fdc:	009b      	lsls	r3, r3, #2
    m_inRegPtr = &InputMgr.m_inputsUnfiltered[m_inputPort];
    4fde:	f1a3 050c 	sub.w	r5, r3, #12
    4fe2:	4415      	add	r5, r2
    m_changeRegPtr = &InputMgr.m_inputsUnfilteredChanges[m_inputPort];
    4fe4:	4413      	add	r3, r2
    m_inputRegRTPtr = &InputMgr.m_inputRegRT.reg;
    4fe6:	3224      	adds	r2, #36	; 0x24
    m_inRegPtr = &InputMgr.m_inputsUnfiltered[m_inputPort];
    4fe8:	6205      	str	r5, [r0, #32]
    m_changeRegPtr = &InputMgr.m_inputsUnfilteredChanges[m_inputPort];
    4fea:	61c3      	str	r3, [r0, #28]
    m_inputRegRTPtr = &InputMgr.m_inputRegRT.reg;
    4fec:	6242      	str	r2, [r0, #36]	; 0x24
    4fee:	43e4      	mvns	r4, r4
    4ff0:	f3bf 8f5b 	dmb	ish
    4ff4:	e856 3f00 	ldrex	r3, [r6]
    4ff8:	4023      	ands	r3, r4
    4ffa:	e846 3200 	strex	r2, r3, [r6]
    4ffe:	2a00      	cmp	r2, #0
    5000:	d1f8      	bne.n	4ff4 <_ZN9ClearCore9DigitalIn10InitializeE13ClearCorePins+0x6c>
    5002:	f3bf 8f5b 	dmb	ish
    Mode(INPUT_DIGITAL);
    5006:	6803      	ldr	r3, [r0, #0]
    5008:	4a11      	ldr	r2, [pc, #68]	; (5050 <_ZN9ClearCore9DigitalIn10InitializeE13ClearCorePins+0xc8>)
    500a:	685b      	ldr	r3, [r3, #4]
    m_clearCorePin = clearCorePin;
    500c:	8081      	strh	r1, [r0, #4]
    500e:	4293      	cmp	r3, r2
    5010:	d115      	bne.n	503e <_ZN9ClearCore9DigitalIn10InitializeE13ClearCorePins+0xb6>
            m_mode = newMode;
    5012:	2302      	movs	r3, #2
    5014:	7183      	strb	r3, [r0, #6]
}
    5016:	bcf0      	pop	{r4, r5, r6, r7}
    5018:	4770      	bx	lr
    PMUX_SELECTION(m_inputPort, m_inputDataBit, PER_EXTINT);
    501a:	f895 6030 	ldrb.w	r6, [r5, #48]	; 0x30
    501e:	f367 0603 	bfi	r6, r7, #0, #4
    5022:	f885 6030 	strb.w	r6, [r5, #48]	; 0x30
        PIN_CONFIGURATION(m_inputPort, m_inputDataBit,
    5026:	f102 4282 	add.w	r2, r2, #1090519040	; 0x41000000
    if (m_interruptAvail) {
    502a:	7e45      	ldrb	r5, [r0, #25]
        PIN_CONFIGURATION(m_inputPort, m_inputDataBit,
    502c:	f502 4200 	add.w	r2, r2, #32768	; 0x8000
    5030:	4422      	add	r2, r4
    if (m_interruptAvail) {
    5032:	2d00      	cmp	r5, #0
    5034:	d0ca      	beq.n	4fcc <_ZN9ClearCore9DigitalIn10InitializeE13ClearCorePins+0x44>
        PIN_CONFIGURATION(m_inputPort, m_inputDataBit,
    5036:	2403      	movs	r4, #3
    5038:	f882 4040 	strb.w	r4, [r2, #64]	; 0x40
    503c:	e7c9      	b.n	4fd2 <_ZN9ClearCore9DigitalIn10InitializeE13ClearCorePins+0x4a>
    Mode(INPUT_DIGITAL);
    503e:	2102      	movs	r1, #2
}
    5040:	bcf0      	pop	{r4, r5, r6, r7}
    Mode(INPUT_DIGITAL);
    5042:	4718      	bx	r3
    5044:	00010003 	.word	0x00010003
    5048:	20000bec 	.word	0x20000bec
    504c:	20001bf4 	.word	0x20001bf4
    5050:	00004f49 	.word	0x00004f49

00005054 <_ZN9ClearCore9DigitalIn7RefreshEv>:
    if (*m_changeRegPtr & m_inputDataMask) {
    5054:	69c2      	ldr	r2, [r0, #28]
    5056:	6943      	ldr	r3, [r0, #20]
    5058:	6812      	ldr	r2, [r2, #0]
    505a:	4213      	tst	r3, r2
void DigitalIn::Refresh() {
    505c:	b500      	push	{lr}
    if (*m_changeRegPtr & m_inputDataMask) {
    505e:	d005      	beq.n	506c <_ZN9ClearCore9DigitalIn7RefreshEv+0x18>
        m_filterTicksLeft = m_filterLength;
    5060:	8d42      	ldrh	r2, [r0, #42]	; 0x2a
    5062:	8582      	strh	r2, [r0, #44]	; 0x2c
        if (!m_filterLength) {
    5064:	2a00      	cmp	r2, #0
    5066:	d039      	beq.n	50dc <_ZN9ClearCore9DigitalIn7RefreshEv+0x88>
    5068:	f85d fb04 	ldr.w	pc, [sp], #4
    else if (m_filterTicksLeft && !--m_filterTicksLeft) {
    506c:	8d82      	ldrh	r2, [r0, #44]	; 0x2c
    506e:	2a00      	cmp	r2, #0
    5070:	d0fa      	beq.n	5068 <_ZN9ClearCore9DigitalIn7RefreshEv+0x14>
    5072:	3a01      	subs	r2, #1
    5074:	b292      	uxth	r2, r2
    5076:	8582      	strh	r2, [r0, #44]	; 0x2c
    5078:	2a00      	cmp	r2, #0
    507a:	d1f5      	bne.n	5068 <_ZN9ClearCore9DigitalIn7RefreshEv+0x14>
    InputMgr.InterruptEnable(m_extInt, enable);
}

// Write the current filtered pin status back to the member variables
void DigitalIn::UpdateFilterState() {
    m_stateFiltered = !(*m_inRegPtr & m_inputDataMask);
    507c:	6a01      	ldr	r1, [r0, #32]
    ShiftReg.ShifterState(m_stateFiltered, m_ledMask);
    507e:	6882      	ldr	r2, [r0, #8]
    m_stateFiltered = !(*m_inRegPtr & m_inputDataMask);
    5080:	6809      	ldr	r1, [r1, #0]
    5082:	400b      	ands	r3, r1
    5084:	2b00      	cmp	r3, #0
    5086:	bf0c      	ite	eq
    5088:	2301      	moveq	r3, #1
    508a:	2300      	movne	r3, #0
    508c:	f880 3028 	strb.w	r3, [r0, #40]	; 0x28
        : ShifterStateClear(bitsToChange);
    5090:	d053      	beq.n	513a <_ZN9ClearCore9DigitalIn7RefreshEv+0xe6>
        atomic_and_fetch(&m_patternOutputs[LED_BLINK_IO_SET], ~bitsToClr);
    5092:	f3bf 8f5b 	dmb	ish
    5096:	4b41      	ldr	r3, [pc, #260]	; (519c <_ZN9ClearCore9DigitalIn7RefreshEv+0x148>)
    5098:	43d2      	mvns	r2, r2
    509a:	e853 1f00 	ldrex	r1, [r3]
    509e:	4011      	ands	r1, r2
    50a0:	e843 1e00 	strex	lr, r1, [r3]
    50a4:	f1be 0f00 	cmp.w	lr, #0
    50a8:	d1f7      	bne.n	509a <_ZN9ClearCore9DigitalIn7RefreshEv+0x46>
    50aa:	f3bf 8f5b 	dmb	ish

    // Update the SysManager Register
    if (m_stateFiltered) {
    50ae:	f890 3028 	ldrb.w	r3, [r0, #40]	; 0x28
        atomic_or_fetch(m_inputRegRTPtr, 1UL << m_clearCorePin);
    50b2:	f9b0 1004 	ldrsh.w	r1, [r0, #4]
    50b6:	6a42      	ldr	r2, [r0, #36]	; 0x24
    if (m_stateFiltered) {
    50b8:	2b00      	cmp	r3, #0
    50ba:	d14a      	bne.n	5152 <_ZN9ClearCore9DigitalIn7RefreshEv+0xfe>
    }
    else {
        atomic_and_fetch(m_inputRegRTPtr, ~(1UL << m_clearCorePin));
    50bc:	f3bf 8f5b 	dmb	ish
    50c0:	2301      	movs	r3, #1
    50c2:	408b      	lsls	r3, r1
    50c4:	43db      	mvns	r3, r3
    50c6:	e852 1f00 	ldrex	r1, [r2]
    50ca:	4019      	ands	r1, r3
    50cc:	e842 1000 	strex	r0, r1, [r2]
    50d0:	2800      	cmp	r0, #0
    50d2:	d1f8      	bne.n	50c6 <_ZN9ClearCore9DigitalIn7RefreshEv+0x72>
    50d4:	f3bf 8f5b 	dmb	ish
}
    50d8:	f85d fb04 	ldr.w	pc, [sp], #4
    m_stateFiltered = !(*m_inRegPtr & m_inputDataMask);
    50dc:	6a01      	ldr	r1, [r0, #32]
    ShiftReg.ShifterState(m_stateFiltered, m_ledMask);
    50de:	6882      	ldr	r2, [r0, #8]
    m_stateFiltered = !(*m_inRegPtr & m_inputDataMask);
    50e0:	6809      	ldr	r1, [r1, #0]
    50e2:	400b      	ands	r3, r1
    50e4:	2b00      	cmp	r3, #0
    50e6:	bf0c      	ite	eq
    50e8:	2301      	moveq	r3, #1
    50ea:	2300      	movne	r3, #0
    50ec:	f880 3028 	strb.w	r3, [r0, #40]	; 0x28
        : ShifterStateClear(bitsToChange);
    50f0:	d047      	beq.n	5182 <_ZN9ClearCore9DigitalIn7RefreshEv+0x12e>
        atomic_and_fetch(&m_patternOutputs[LED_BLINK_IO_SET], ~bitsToClr);
    50f2:	f3bf 8f5b 	dmb	ish
    50f6:	4b29      	ldr	r3, [pc, #164]	; (519c <_ZN9ClearCore9DigitalIn7RefreshEv+0x148>)
    50f8:	43d2      	mvns	r2, r2
    50fa:	e853 1f00 	ldrex	r1, [r3]
    50fe:	4011      	ands	r1, r2
    5100:	e843 1e00 	strex	lr, r1, [r3]
    5104:	f1be 0f00 	cmp.w	lr, #0
    5108:	d1f7      	bne.n	50fa <_ZN9ClearCore9DigitalIn7RefreshEv+0xa6>
    510a:	f3bf 8f5b 	dmb	ish
    if (m_stateFiltered) {
    510e:	f890 3028 	ldrb.w	r3, [r0, #40]	; 0x28
        atomic_or_fetch(m_inputRegRTPtr, 1UL << m_clearCorePin);
    5112:	f9b0 1004 	ldrsh.w	r1, [r0, #4]
    5116:	6a42      	ldr	r2, [r0, #36]	; 0x24
    if (m_stateFiltered) {
    5118:	bb3b      	cbnz	r3, 516a <_ZN9ClearCore9DigitalIn7RefreshEv+0x116>
        atomic_and_fetch(m_inputRegRTPtr, ~(1UL << m_clearCorePin));
    511a:	f3bf 8f5b 	dmb	ish
    511e:	2301      	movs	r3, #1
    5120:	408b      	lsls	r3, r1
    5122:	43db      	mvns	r3, r3
    5124:	e852 1f00 	ldrex	r1, [r2]
    5128:	4019      	ands	r1, r3
    512a:	e842 1000 	strex	r0, r1, [r2]
    512e:	2800      	cmp	r0, #0
    5130:	d1f8      	bne.n	5124 <_ZN9ClearCore9DigitalIn7RefreshEv+0xd0>
    5132:	f3bf 8f5b 	dmb	ish
}
    5136:	f85d fb04 	ldr.w	pc, [sp], #4
        atomic_or_fetch(&m_patternOutputs[LED_BLINK_IO_SET], bitsToSet);
    513a:	4b18      	ldr	r3, [pc, #96]	; (519c <_ZN9ClearCore9DigitalIn7RefreshEv+0x148>)
    513c:	f3bf 8f5b 	dmb	ish
    5140:	e853 1f00 	ldrex	r1, [r3]
    5144:	4311      	orrs	r1, r2
    5146:	e843 1e00 	strex	lr, r1, [r3]
    514a:	f1be 0f00 	cmp.w	lr, #0
    514e:	d0ac      	beq.n	50aa <_ZN9ClearCore9DigitalIn7RefreshEv+0x56>
    5150:	e7f6      	b.n	5140 <_ZN9ClearCore9DigitalIn7RefreshEv+0xec>
        atomic_or_fetch(m_inputRegRTPtr, 1UL << m_clearCorePin);
    5152:	2301      	movs	r3, #1
    5154:	408b      	lsls	r3, r1
    5156:	f3bf 8f5b 	dmb	ish
    515a:	e852 1f00 	ldrex	r1, [r2]
    515e:	4319      	orrs	r1, r3
    5160:	e842 1000 	strex	r0, r1, [r2]
    5164:	2800      	cmp	r0, #0
    5166:	d0e4      	beq.n	5132 <_ZN9ClearCore9DigitalIn7RefreshEv+0xde>
    5168:	e7f7      	b.n	515a <_ZN9ClearCore9DigitalIn7RefreshEv+0x106>
    516a:	2301      	movs	r3, #1
    516c:	408b      	lsls	r3, r1
    516e:	f3bf 8f5b 	dmb	ish
    5172:	e852 1f00 	ldrex	r1, [r2]
    5176:	4319      	orrs	r1, r3
    5178:	e842 1000 	strex	r0, r1, [r2]
    517c:	2800      	cmp	r0, #0
    517e:	d0d8      	beq.n	5132 <_ZN9ClearCore9DigitalIn7RefreshEv+0xde>
    5180:	e7f7      	b.n	5172 <_ZN9ClearCore9DigitalIn7RefreshEv+0x11e>
    5182:	4b06      	ldr	r3, [pc, #24]	; (519c <_ZN9ClearCore9DigitalIn7RefreshEv+0x148>)
    5184:	f3bf 8f5b 	dmb	ish
    5188:	e853 1f00 	ldrex	r1, [r3]
    518c:	4311      	orrs	r1, r2
    518e:	e843 1e00 	strex	lr, r1, [r3]
    5192:	f1be 0f00 	cmp.w	lr, #0
    5196:	d0b8      	beq.n	510a <_ZN9ClearCore9DigitalIn7RefreshEv+0xb6>
    5198:	e7f6      	b.n	5188 <_ZN9ClearCore9DigitalIn7RefreshEv+0x134>
    519a:	bf00      	nop
    519c:	20001bf4 	.word	0x20001bf4

000051a0 <_ZN9ClearCore9ConnectorC1Ev>:
      m_mode(INVALID_NONE) {}
    51a0:	4a03      	ldr	r2, [pc, #12]	; (51b0 <_ZN9ClearCore9ConnectorC1Ev+0x10>)
    51a2:	6002      	str	r2, [r0, #0]
    51a4:	f64f 71ff 	movw	r1, #65535	; 0xffff
    51a8:	2200      	movs	r2, #0
    51aa:	8081      	strh	r1, [r0, #4]
    51ac:	7182      	strb	r2, [r0, #6]
    51ae:	4770      	bx	lr
    51b0:	000227b0 	.word	0x000227b0

000051b4 <_ZN9ClearCore9DigitalInC1ENS_13ShiftRegister5MasksEPK15PeripheralRoute>:
DigitalIn::DigitalIn(
    51b4:	b470      	push	{r4, r5, r6}
      m_inputPort(inputInfo->gpioPort),
    51b6:	f992 4001 	ldrsb.w	r4, [r2, #1]
    51ba:	60c4      	str	r4, [r0, #12]
      m_filterTicksLeft(1) {}
    51bc:	4d0d      	ldr	r5, [pc, #52]	; (51f4 <_ZN9ClearCore9DigitalInC1ENS_13ShiftRegister5MasksEPK15PeripheralRoute+0x40>)
    51be:	6081      	str	r1, [r0, #8]
      m_mode(INVALID_NONE) {}
    51c0:	2400      	movs	r4, #0
    51c2:	f64f 76ff 	movw	r6, #65535	; 0xffff
    51c6:	8086      	strh	r6, [r0, #4]
    51c8:	7184      	strb	r4, [r0, #6]
      m_filterTicksLeft(1) {}
    51ca:	6005      	str	r5, [r0, #0]
      m_inputDataBit(inputInfo->gpioPin),
    51cc:	7895      	ldrb	r5, [r2, #2]
    51ce:	6105      	str	r5, [r0, #16]
      m_inputDataMask(1UL << inputInfo->gpioPin),
    51d0:	2101      	movs	r1, #1
    51d2:	40a9      	lsls	r1, r5
      m_filterTicksLeft(1) {}
    51d4:	6141      	str	r1, [r0, #20]
    51d6:	78d1      	ldrb	r1, [r2, #3]
    51d8:	7601      	strb	r1, [r0, #24]
    51da:	7911      	ldrb	r1, [r2, #4]
    51dc:	4a06      	ldr	r2, [pc, #24]	; (51f8 <_ZN9ClearCore9DigitalInC1ENS_13ShiftRegister5MasksEPK15PeripheralRoute+0x44>)
    51de:	61c4      	str	r4, [r0, #28]
    51e0:	6204      	str	r4, [r0, #32]
    51e2:	6244      	str	r4, [r0, #36]	; 0x24
    51e4:	f880 4028 	strb.w	r4, [r0, #40]	; 0x28
    51e8:	7641      	strb	r1, [r0, #25]
    51ea:	f8c0 202a 	str.w	r2, [r0, #42]	; 0x2a
    51ee:	bc70      	pop	{r4, r5, r6}
    51f0:	4770      	bx	lr
    51f2:	bf00      	nop
    51f4:	000227e0 	.word	0x000227e0
    51f8:	00010003 	.word	0x00010003

000051fc <_ZN9ClearCore9DigitalIn7StateRTEv>:
    return !(*InputMgr.m_inputPtrs[m_inputPort] & m_inputDataMask);
    51fc:	4b05      	ldr	r3, [pc, #20]	; (5214 <_ZN9ClearCore9DigitalIn7StateRTEv+0x18>)
    51fe:	68c1      	ldr	r1, [r0, #12]
    5200:	681a      	ldr	r2, [r3, #0]
    5202:	6943      	ldr	r3, [r0, #20]
    5204:	f852 2021 	ldr.w	r2, [r2, r1, lsl #2]
    5208:	6812      	ldr	r2, [r2, #0]
    520a:	421a      	tst	r2, r3
}
    520c:	bf0c      	ite	eq
    520e:	2001      	moveq	r0, #1
    5210:	2000      	movne	r0, #0
    5212:	4770      	bx	lr
    5214:	20000bec 	.word	0x20000bec

00005218 <_ZN9ClearCore9DigitalIn17UpdateFilterStateEv>:
    m_stateFiltered = !(*m_inRegPtr & m_inputDataMask);
    5218:	6a03      	ldr	r3, [r0, #32]
    521a:	6941      	ldr	r1, [r0, #20]
    521c:	681b      	ldr	r3, [r3, #0]
    ShiftReg.ShifterState(m_stateFiltered, m_ledMask);
    521e:	6882      	ldr	r2, [r0, #8]
    m_stateFiltered = !(*m_inRegPtr & m_inputDataMask);
    5220:	400b      	ands	r3, r1
    5222:	2b00      	cmp	r3, #0
    5224:	bf0c      	ite	eq
    5226:	2301      	moveq	r3, #1
    5228:	2300      	movne	r3, #0
void DigitalIn::UpdateFilterState() {
    522a:	b500      	push	{lr}
    m_stateFiltered = !(*m_inRegPtr & m_inputDataMask);
    522c:	f880 3028 	strb.w	r3, [r0, #40]	; 0x28
        : ShifterStateClear(bitsToChange);
    5230:	d023      	beq.n	527a <_ZN9ClearCore9DigitalIn17UpdateFilterStateEv+0x62>
        atomic_and_fetch(&m_patternOutputs[LED_BLINK_IO_SET], ~bitsToClr);
    5232:	f3bf 8f5b 	dmb	ish
    5236:	4b1e      	ldr	r3, [pc, #120]	; (52b0 <_ZN9ClearCore9DigitalIn17UpdateFilterStateEv+0x98>)
    5238:	43d2      	mvns	r2, r2
    523a:	e853 1f00 	ldrex	r1, [r3]
    523e:	4011      	ands	r1, r2
    5240:	e843 1e00 	strex	lr, r1, [r3]
    5244:	f1be 0f00 	cmp.w	lr, #0
    5248:	d1f7      	bne.n	523a <_ZN9ClearCore9DigitalIn17UpdateFilterStateEv+0x22>
    524a:	f3bf 8f5b 	dmb	ish
    if (m_stateFiltered) {
    524e:	f890 3028 	ldrb.w	r3, [r0, #40]	; 0x28
        atomic_or_fetch(m_inputRegRTPtr, 1UL << m_clearCorePin);
    5252:	f9b0 1004 	ldrsh.w	r1, [r0, #4]
    5256:	6a42      	ldr	r2, [r0, #36]	; 0x24
    if (m_stateFiltered) {
    5258:	b9db      	cbnz	r3, 5292 <_ZN9ClearCore9DigitalIn17UpdateFilterStateEv+0x7a>
        atomic_and_fetch(m_inputRegRTPtr, ~(1UL << m_clearCorePin));
    525a:	f3bf 8f5b 	dmb	ish
    525e:	2301      	movs	r3, #1
    5260:	408b      	lsls	r3, r1
    5262:	43db      	mvns	r3, r3
    5264:	e852 1f00 	ldrex	r1, [r2]
    5268:	4019      	ands	r1, r3
    526a:	e842 1000 	strex	r0, r1, [r2]
    526e:	2800      	cmp	r0, #0
    5270:	d1f8      	bne.n	5264 <_ZN9ClearCore9DigitalIn17UpdateFilterStateEv+0x4c>
    5272:	f3bf 8f5b 	dmb	ish
    5276:	f85d fb04 	ldr.w	pc, [sp], #4
        atomic_or_fetch(&m_patternOutputs[LED_BLINK_IO_SET], bitsToSet);
    527a:	4b0d      	ldr	r3, [pc, #52]	; (52b0 <_ZN9ClearCore9DigitalIn17UpdateFilterStateEv+0x98>)
    527c:	f3bf 8f5b 	dmb	ish
    5280:	e853 1f00 	ldrex	r1, [r3]
    5284:	4311      	orrs	r1, r2
    5286:	e843 1e00 	strex	lr, r1, [r3]
    528a:	f1be 0f00 	cmp.w	lr, #0
    528e:	d0dc      	beq.n	524a <_ZN9ClearCore9DigitalIn17UpdateFilterStateEv+0x32>
    5290:	e7f6      	b.n	5280 <_ZN9ClearCore9DigitalIn17UpdateFilterStateEv+0x68>
        atomic_or_fetch(m_inputRegRTPtr, 1UL << m_clearCorePin);
    5292:	2301      	movs	r3, #1
    5294:	408b      	lsls	r3, r1
    5296:	f3bf 8f5b 	dmb	ish
    529a:	e852 1f00 	ldrex	r1, [r2]
    529e:	4319      	orrs	r1, r3
    52a0:	e842 1000 	strex	r0, r1, [r2]
    52a4:	2800      	cmp	r0, #0
    52a6:	d1f8      	bne.n	529a <_ZN9ClearCore9DigitalIn17UpdateFilterStateEv+0x82>
        atomic_and_fetch(m_inputRegRTPtr, ~(1UL << m_clearCorePin));
    52a8:	f3bf 8f5b 	dmb	ish
    52ac:	f85d fb04 	ldr.w	pc, [sp], #4
    52b0:	20001bf4 	.word	0x20001bf4

000052b4 <_ZN9ClearCore10DmaManager8InstanceEv>:
            aligned(16)));
#endif

DmaManager &DmaMgr = DmaManager::Instance();

DmaManager &DmaManager::Instance() {
    52b4:	b510      	push	{r4, lr}
    static DmaManager *instance = new DmaManager();
    52b6:	4c07      	ldr	r4, [pc, #28]	; (52d4 <_ZN9ClearCore10DmaManager8InstanceEv+0x20>)
    52b8:	6823      	ldr	r3, [r4, #0]
    52ba:	07db      	lsls	r3, r3, #31
    52bc:	d502      	bpl.n	52c4 <_ZN9ClearCore10DmaManager8InstanceEv+0x10>
    52be:	4b06      	ldr	r3, [pc, #24]	; (52d8 <_ZN9ClearCore10DmaManager8InstanceEv+0x24>)
    52c0:	6818      	ldr	r0, [r3, #0]
    52c2:	bd10      	pop	{r4, pc}
    52c4:	2001      	movs	r0, #1
    52c6:	f00d fe7f 	bl	12fc8 <_Znwj>
    52ca:	4a03      	ldr	r2, [pc, #12]	; (52d8 <_ZN9ClearCore10DmaManager8InstanceEv+0x24>)
    52cc:	2301      	movs	r3, #1
    52ce:	6010      	str	r0, [r2, #0]
    52d0:	6023      	str	r3, [r4, #0]
    return *instance;
}
    52d2:	bd10      	pop	{r4, pc}
    52d4:	20000b18 	.word	0x20000b18
    52d8:	20000be4 	.word	0x20000be4

000052dc <_ZN9ClearCore10DmaManager10InitializeEv>:

void DmaManager::Initialize() {
    52dc:	b470      	push	{r4, r5, r6}
    /***********************************************************
     * DMA peripheral initialization
     ***********************************************************/
    // Enables the peripheral clock to the DMAC
    CLOCK_ENABLE(AHBMASK, DMAC_);
    52de:	4a13      	ldr	r2, [pc, #76]	; (532c <_ZN9ClearCore10DmaManager10InitializeEv+0x50>)

    // Reset the DMAC to start fresh
    DMAC->CTRL.reg = DMAC_CTRL_SWRST;
    52e0:	4913      	ldr	r1, [pc, #76]	; (5330 <_ZN9ClearCore10DmaManager10InitializeEv+0x54>)
    CLOCK_ENABLE(AHBMASK, DMAC_);
    52e2:	6913      	ldr	r3, [r2, #16]
    DMAC->CTRL.reg = DMAC_CTRL_SWRST;
    52e4:	2001      	movs	r0, #1
    CLOCK_ENABLE(AHBMASK, DMAC_);
    52e6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
    52ea:	6113      	str	r3, [r2, #16]
    // Wait for the reset to finish
    while (DMAC->CTRL.reg == DMAC_CHCTRLA_SWRST) {
    52ec:	460a      	mov	r2, r1
    DMAC->CTRL.reg = DMAC_CTRL_SWRST;
    52ee:	8008      	strh	r0, [r1, #0]
    while (DMAC->CTRL.reg == DMAC_CHCTRLA_SWRST) {
    52f0:	8813      	ldrh	r3, [r2, #0]
    52f2:	b29b      	uxth	r3, r3
    52f4:	2b01      	cmp	r3, #1
    52f6:	d0fb      	beq.n	52f0 <_ZN9ClearCore10DmaManager10InitializeEv+0x14>
  \details Disables a device-specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_DisableIRQ(IRQn_Type IRQn)
{
  NVIC->ICER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
    52f8:	4b0e      	ldr	r3, [pc, #56]	; (5334 <_ZN9ClearCore10DmaManager10InitializeEv+0x58>)
    NVIC_DisableIRQ(DMAC_0_IRQn);
    /* Initialize DMA interrupt priority  */
    NVIC_SetPriority(DMAC_0_IRQn, DMA_COMPLETE_PRIORITY);

    // Tell the DMAC where the descriptors are (must be located in SRAM)
    DMAC->BASEADDR.reg = (uint32_t)descriptorBase;
    52fa:	4d0f      	ldr	r5, [pc, #60]	; (5338 <_ZN9ClearCore10DmaManager10InitializeEv+0x5c>)
    DMAC->WRBADDR.reg = (uint32_t)writeBackDescriptor;
    52fc:	4c0f      	ldr	r4, [pc, #60]	; (533c <_ZN9ClearCore10DmaManager10InitializeEv+0x60>)
    52fe:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
  {
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
  else
  {
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    5302:	2640      	movs	r6, #64	; 0x40

    // Enable the DMAC and set the priority
    DMAC->CTRL.reg = DMAC_CTRL_DMAENABLE | DMAC_CTRL_LVLEN(0xf);
    5304:	f640 7102 	movw	r1, #3842	; 0xf02
  NVIC->ICER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
    5308:	f8c3 0080 	str.w	r0, [r3, #128]	; 0x80
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    530c:	f883 631f 	strb.w	r6, [r3, #799]	; 0x31f
    DMAC->BASEADDR.reg = (uint32_t)descriptorBase;
    5310:	6355      	str	r5, [r2, #52]	; 0x34
    DMAC->WRBADDR.reg = (uint32_t)writeBackDescriptor;
    5312:	6394      	str	r4, [r2, #56]	; 0x38
    DMAC->CTRL.reg = DMAC_CTRL_DMAENABLE | DMAC_CTRL_LVLEN(0xf);
    5314:	8011      	strh	r1, [r2, #0]

    DMAC->DBGCTRL.bit.DBGRUN = 1;
    5316:	7b51      	ldrb	r1, [r2, #13]
    5318:	f041 0101 	orr.w	r1, r1, #1
    531c:	7351      	strb	r1, [r2, #13]
  NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
    531e:	6018      	str	r0, [r3, #0]
     * DMA channels that will be automatically triggered
     ***************************************************************/
    DMAC->SWTRIGCTRL.reg &=
        ~((1UL << DMA_ADC_SEQUENCE) | (1UL << DMA_ADC_RESULTS) |
          (1UL << DMA_SERCOM0_SPI_TX) | (1UL << DMA_SERCOM0_SPI_RX) |
          (1UL << DMA_SERCOM7_SPI_TX) | (1UL << DMA_SERCOM7_SPI_RX));
    5320:	6913      	ldr	r3, [r2, #16]
    5322:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
    DMAC->SWTRIGCTRL.reg &=
    5326:	6113      	str	r3, [r2, #16]
}
    5328:	bc70      	pop	{r4, r5, r6}
    532a:	4770      	bx	lr
    532c:	40000800 	.word	0x40000800
    5330:	4100a000 	.word	0x4100a000
    5334:	e000e100 	.word	0xe000e100
    5338:	20000b20 	.word	0x20000b20
    533c:	20000b80 	.word	0x20000b80

00005340 <_ZN9ClearCore10DmaManager7ChannelENS_11DmaChannelsE>:

DmacChannel *DmaManager::Channel(DmaChannels index) {
    if (index >= DMA_CHANNEL_COUNT) {
    5340:	2805      	cmp	r0, #5
        return NULL;
    }
    return &DMAC->Channel[index];
    5342:	bfda      	itte	le
    5344:	4b02      	ldrle	r3, [pc, #8]	; (5350 <_ZN9ClearCore10DmaManager7ChannelENS_11DmaChannelsE+0x10>)
    5346:	eb03 1000 	addle.w	r0, r3, r0, lsl #4
        return NULL;
    534a:	2000      	movgt	r0, #0
}
    534c:	4770      	bx	lr
    534e:	bf00      	nop
    5350:	4100a040 	.word	0x4100a040

00005354 <_ZN9ClearCore10DmaManager14BaseDescriptorENS_11DmaChannelsE>:

DmacDescriptor *DmaManager::BaseDescriptor(DmaChannels index) {
    if (index >= DMA_CHANNEL_COUNT) {
    5354:	2805      	cmp	r0, #5
        return NULL;
    }
    return &descriptorBase[index];
    5356:	bfda      	itte	le
    5358:	4b02      	ldrle	r3, [pc, #8]	; (5364 <_ZN9ClearCore10DmaManager14BaseDescriptorENS_11DmaChannelsE+0x10>)
    535a:	eb03 1000 	addle.w	r0, r3, r0, lsl #4
        return NULL;
    535e:	2000      	movgt	r0, #0
}
    5360:	4770      	bx	lr
    5362:	bf00      	nop
    5364:	20000b20 	.word	0x20000b20

00005368 <_GLOBAL__sub_I__ZN9ClearCore10DmaManager19writeBackDescriptorE>:

    5368:	b508      	push	{r3, lr}
DmaManager &DmaMgr = DmaManager::Instance();
    536a:	f7ff ffa3 	bl	52b4 <_ZN9ClearCore10DmaManager8InstanceEv>
    536e:	4b01      	ldr	r3, [pc, #4]	; (5374 <_GLOBAL__sub_I__ZN9ClearCore10DmaManager19writeBackDescriptorE+0xc>)
    5370:	6018      	str	r0, [r3, #0]
    5372:	bd08      	pop	{r3, pc}
    5374:	20000be0 	.word	0x20000be0

00005378 <_ZN9ClearCore12InputManager8InstanceEv>:

namespace ClearCore {

InputManager &InputMgr = InputManager::Instance();

InputManager &InputManager::Instance() {
    5378:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    static InputManager *instance = new InputManager();
    537a:	4e14      	ldr	r6, [pc, #80]	; (53cc <_ZN9ClearCore12InputManager8InstanceEv+0x54>)
    537c:	6834      	ldr	r4, [r6, #0]
    537e:	f014 0401 	ands.w	r4, r4, #1
    5382:	d002      	beq.n	538a <_ZN9ClearCore12InputManager8InstanceEv+0x12>
    5384:	4b12      	ldr	r3, [pc, #72]	; (53d0 <_ZN9ClearCore12InputManager8InstanceEv+0x58>)
    5386:	6818      	ldr	r0, [r3, #0]
    5388:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    538a:	2080      	movs	r0, #128	; 0x80
    538c:	f00d fe1c 	bl	12fc8 <_Znwj>
    5390:	4605      	mov	r5, r0
      m_inputRegRisen(0),
      m_inputRegFallen(0),
      m_interruptsMask(0),
      m_interruptsEnabled(true),
      m_interruptServiceRoutines(),
      m_oneTimeFlags(0) {}
    5392:	2701      	movs	r7, #1
    5394:	2240      	movs	r2, #64	; 0x40
    5396:	602c      	str	r4, [r5, #0]
    5398:	606c      	str	r4, [r5, #4]
    539a:	60ac      	str	r4, [r5, #8]
    539c:	60ec      	str	r4, [r5, #12]
    539e:	612c      	str	r4, [r5, #16]
    53a0:	616c      	str	r4, [r5, #20]
    53a2:	4621      	mov	r1, r4
    53a4:	61ac      	str	r4, [r5, #24]
    53a6:	61ec      	str	r4, [r5, #28]
    53a8:	622c      	str	r4, [r5, #32]
**/
union SysConnectorState {
    /**
        Constructor to allow initialization lists.
    **/
    SysConnectorState(uint32_t initialBits) : reg(initialBits) {}
    53aa:	626c      	str	r4, [r5, #36]	; 0x24
    /**
        Default Constructor
    **/
    SysConnectorState() : reg(0) {}
    53ac:	62ac      	str	r4, [r5, #40]	; 0x28
    SysConnectorState(uint32_t initialBits) : reg(initialBits) {}
    53ae:	62ec      	str	r4, [r5, #44]	; 0x2c
    53b0:	632c      	str	r4, [r5, #48]	; 0x30
    53b2:	636c      	str	r4, [r5, #52]	; 0x34
    53b4:	f885 7038 	strb.w	r7, [r5, #56]	; 0x38
    53b8:	303c      	adds	r0, #60	; 0x3c
    53ba:	f018 feff 	bl	1e1bc <memset>
    static InputManager *instance = new InputManager();
    53be:	4b04      	ldr	r3, [pc, #16]	; (53d0 <_ZN9ClearCore12InputManager8InstanceEv+0x58>)
      m_oneTimeFlags(0) {}
    53c0:	f8a5 407c 	strh.w	r4, [r5, #124]	; 0x7c
    static InputManager *instance = new InputManager();
    53c4:	6037      	str	r7, [r6, #0]
    53c6:	601d      	str	r5, [r3, #0]
    53c8:	4628      	mov	r0, r5
}
    53ca:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    53cc:	20000be8 	.word	0x20000be8
    53d0:	20000bf0 	.word	0x20000bf0

000053d4 <_ZN9ClearCore12InputManager10InitializeEv>:

void InputManager::SetInputRegisters(volatile uint32_t *a, volatile uint32_t *b,
                                     volatile uint32_t *c) {
    m_inputPtrs[PORTA] = a ? a : &PORT->Group[PORTA].IN.reg;
    m_inputPtrs[PORTB] = b ? b : &PORT->Group[PORTB].IN.reg;
    m_inputPtrs[PORTC] = c ? c : &PORT->Group[PORTC].IN.reg;
    53d4:	4902      	ldr	r1, [pc, #8]	; (53e0 <_ZN9ClearCore12InputManager10InitializeEv+0xc>)
    53d6:	4a03      	ldr	r2, [pc, #12]	; (53e4 <_ZN9ClearCore12InputManager10InitializeEv+0x10>)
    53d8:	4b03      	ldr	r3, [pc, #12]	; (53e8 <_ZN9ClearCore12InputManager10InitializeEv+0x14>)
    53da:	e880 000e 	stmia.w	r0, {r1, r2, r3}
    53de:	4770      	bx	lr
    53e0:	41008020 	.word	0x41008020
    53e4:	410080a0 	.word	0x410080a0
    53e8:	41008120 	.word	0x41008120

000053ec <_ZN9ClearCore12InputManager15InterruptEnableEabb>:

    return true;
}

void InputManager::InterruptEnable(int8_t extInt, bool enable,
                                   bool clearPending) {
    53ec:	b510      	push	{r4, lr}
    if (extInt < 0 || extInt >= EIC_NUMBER_OF_INTERRUPTS) {
    53ee:	b2cc      	uxtb	r4, r1
    53f0:	2c0f      	cmp	r4, #15
    53f2:	d82e      	bhi.n	5452 <_ZN9ClearCore12InputManager15InterruptEnableEabb+0x66>
        return; // Invalid external interrupt number
    }

    if (enable) {
    53f4:	b1b2      	cbz	r2, 5424 <_ZN9ClearCore12InputManager15InterruptEnableEabb+0x38>
        if (clearPending) {
    53f6:	bb6b      	cbnz	r3, 5454 <_ZN9ClearCore12InputManager15InterruptEnableEabb+0x68>
    53f8:	2301      	movs	r3, #1
    53fa:	fa03 f101 	lsl.w	r1, r3, r1
            // Clear any existing interrupt flag
            EIC->INTFLAG.reg = (1UL << extInt);
        }
        atomic_or_fetch(&m_interruptsMask, (1UL << extInt));
    53fe:	f100 0334 	add.w	r3, r0, #52	; 0x34
    5402:	f3bf 8f5b 	dmb	ish
    5406:	e853 2f00 	ldrex	r2, [r3]
    540a:	430a      	orrs	r2, r1
    540c:	e843 2400 	strex	r4, r2, [r3]
    5410:	2c00      	cmp	r4, #0
    5412:	d1f8      	bne.n	5406 <_ZN9ClearCore12InputManager15InterruptEnableEabb+0x1a>
    5414:	f3bf 8f5b 	dmb	ish
        if (m_interruptsEnabled) {
    5418:	f890 3038 	ldrb.w	r3, [r0, #56]	; 0x38
    541c:	b1cb      	cbz	r3, 5452 <_ZN9ClearCore12InputManager15InterruptEnableEabb+0x66>
            EIC->INTENSET.reg = (1UL << extInt);
    541e:	4b10      	ldr	r3, [pc, #64]	; (5460 <_ZN9ClearCore12InputManager15InterruptEnableEabb+0x74>)
    5420:	6119      	str	r1, [r3, #16]
    5422:	bd10      	pop	{r4, pc}
        }
    }
    else {
        atomic_and_fetch(&m_interruptsMask, ~(1UL << extInt));
    5424:	2301      	movs	r3, #1
    5426:	fa03 f101 	lsl.w	r1, r3, r1
    542a:	43ca      	mvns	r2, r1
    542c:	f100 0334 	add.w	r3, r0, #52	; 0x34
    5430:	f3bf 8f5b 	dmb	ish
    5434:	e853 4f00 	ldrex	r4, [r3]
    5438:	4014      	ands	r4, r2
    543a:	e843 4e00 	strex	lr, r4, [r3]
    543e:	f1be 0f00 	cmp.w	lr, #0
    5442:	d1f7      	bne.n	5434 <_ZN9ClearCore12InputManager15InterruptEnableEabb+0x48>
    5444:	f3bf 8f5b 	dmb	ish
        if (m_interruptsEnabled) {
    5448:	f890 3038 	ldrb.w	r3, [r0, #56]	; 0x38
    544c:	b10b      	cbz	r3, 5452 <_ZN9ClearCore12InputManager15InterruptEnableEabb+0x66>
            EIC->INTENCLR.reg = (1UL << extInt);
    544e:	4b04      	ldr	r3, [pc, #16]	; (5460 <_ZN9ClearCore12InputManager15InterruptEnableEabb+0x74>)
    5450:	60d9      	str	r1, [r3, #12]
    5452:	bd10      	pop	{r4, pc}
            EIC->INTFLAG.reg = (1UL << extInt);
    5454:	2201      	movs	r2, #1
    5456:	4b02      	ldr	r3, [pc, #8]	; (5460 <_ZN9ClearCore12InputManager15InterruptEnableEabb+0x74>)
    5458:	fa02 f101 	lsl.w	r1, r2, r1
    545c:	6159      	str	r1, [r3, #20]
    545e:	e7ce      	b.n	53fe <_ZN9ClearCore12InputManager15InterruptEnableEabb+0x12>
    5460:	40002800 	.word	0x40002800

00005464 <_ZN9ClearCore12InputManager11EIC_HandlerEh>:
        EIC->INTENCLR.reg = atomic_load_n(&m_interruptsMask);
    }
}

void InputManager::EIC_Handler(uint8_t index) {
    if (index < EIC_NUMBER_OF_INTERRUPTS) {
    5464:	290f      	cmp	r1, #15
    5466:	dc14      	bgt.n	5492 <_ZN9ClearCore12InputManager11EIC_HandlerEh+0x2e>
        // If this is a one time interrupt, disable the interrupt.
        if (m_oneTimeFlags & (1UL << index)) {
    5468:	f8b0 307c 	ldrh.w	r3, [r0, #124]	; 0x7c
    546c:	40cb      	lsrs	r3, r1
    546e:	f013 0f01 	tst.w	r3, #1
            atomic_and_fetch(&m_interruptsMask, ~(1UL << index));
    5472:	f04f 0301 	mov.w	r3, #1
void InputManager::EIC_Handler(uint8_t index) {
    5476:	b510      	push	{r4, lr}
            atomic_and_fetch(&m_interruptsMask, ~(1UL << index));
    5478:	fa03 f301 	lsl.w	r3, r3, r1
        if (m_oneTimeFlags & (1UL << index)) {
    547c:	d10a      	bne.n	5494 <_ZN9ClearCore12InputManager11EIC_HandlerEh+0x30>
            EIC->INTENCLR.reg = (1UL << index);
        }
        // Ack the interrupt early so that we don't miss subsequent events
        EIC->INTFLAG.reg = 1UL << index;
    547e:	4a0f      	ldr	r2, [pc, #60]	; (54bc <_ZN9ClearCore12InputManager11EIC_HandlerEh+0x58>)
        voidFuncPtr callback = m_interruptServiceRoutines[index];
    5480:	eb00 0181 	add.w	r1, r0, r1, lsl #2
        EIC->INTFLAG.reg = 1UL << index;
    5484:	6153      	str	r3, [r2, #20]
        voidFuncPtr callback = m_interruptServiceRoutines[index];
    5486:	6bcb      	ldr	r3, [r1, #60]	; 0x3c
        if (callback != nullptr) {
    5488:	b113      	cbz	r3, 5490 <_ZN9ClearCore12InputManager11EIC_HandlerEh+0x2c>
            callback();
        }
    }
}
    548a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
            callback();
    548e:	4718      	bx	r3
    5490:	bd10      	pop	{r4, pc}
    5492:	4770      	bx	lr
            atomic_and_fetch(&m_interruptsMask, ~(1UL << index));
    5494:	43dc      	mvns	r4, r3
    5496:	f100 0234 	add.w	r2, r0, #52	; 0x34
    549a:	f3bf 8f5b 	dmb	ish
    549e:	e852 ef00 	ldrex	lr, [r2]
    54a2:	ea0e 0e04 	and.w	lr, lr, r4
    54a6:	e842 ec00 	strex	ip, lr, [r2]
    54aa:	f1bc 0f00 	cmp.w	ip, #0
    54ae:	d1f6      	bne.n	549e <_ZN9ClearCore12InputManager11EIC_HandlerEh+0x3a>
    54b0:	f3bf 8f5b 	dmb	ish
            EIC->INTENCLR.reg = (1UL << index);
    54b4:	4a01      	ldr	r2, [pc, #4]	; (54bc <_ZN9ClearCore12InputManager11EIC_HandlerEh+0x58>)
    54b6:	60d3      	str	r3, [r2, #12]
    54b8:	e7e1      	b.n	547e <_ZN9ClearCore12InputManager11EIC_HandlerEh+0x1a>
    54ba:	bf00      	nop
    54bc:	40002800 	.word	0x40002800

000054c0 <_ZN9ClearCore12InputManager11UpdateBeginEv>:

void InputManager::UpdateBegin() {
    for (int8_t iPort = 0; iPort < CLEARCORE_PORT_MAX; iPort++) {
        uint32_t last = m_inputsUnfiltered[iPort];
        m_inputsUnfiltered[iPort] = *m_inputPtrs[iPort];
    54c0:	6803      	ldr	r3, [r0, #0]
        uint32_t last = m_inputsUnfiltered[iPort];
    54c2:	68c1      	ldr	r1, [r0, #12]
        m_inputsUnfiltered[iPort] = *m_inputPtrs[iPort];
    54c4:	681b      	ldr	r3, [r3, #0]
    54c6:	60c3      	str	r3, [r0, #12]
    54c8:	6842      	ldr	r2, [r0, #4]
        m_inputsUnfilteredChanges[iPort] = m_inputsUnfiltered[iPort] ^ last;
    54ca:	404b      	eors	r3, r1
    54cc:	6183      	str	r3, [r0, #24]
        m_inputsUnfiltered[iPort] = *m_inputPtrs[iPort];
    54ce:	6812      	ldr	r2, [r2, #0]
        uint32_t last = m_inputsUnfiltered[iPort];
    54d0:	6903      	ldr	r3, [r0, #16]
        m_inputsUnfiltered[iPort] = *m_inputPtrs[iPort];
    54d2:	6881      	ldr	r1, [r0, #8]
    54d4:	6102      	str	r2, [r0, #16]
        m_inputsUnfilteredChanges[iPort] = m_inputsUnfiltered[iPort] ^ last;
    54d6:	4053      	eors	r3, r2
    54d8:	61c3      	str	r3, [r0, #28]
        m_inputsUnfiltered[iPort] = *m_inputPtrs[iPort];
    54da:	680a      	ldr	r2, [r1, #0]
        uint32_t last = m_inputsUnfiltered[iPort];
    54dc:	6943      	ldr	r3, [r0, #20]
        m_inputsUnfiltered[iPort] = *m_inputPtrs[iPort];
    54de:	6142      	str	r2, [r0, #20]
        m_inputsUnfilteredChanges[iPort] = m_inputsUnfiltered[iPort] ^ last;
    54e0:	4053      	eors	r3, r2
    54e2:	6203      	str	r3, [r0, #32]
    54e4:	4770      	bx	lr
    54e6:	bf00      	nop

000054e8 <_ZN9ClearCore12InputManager9UpdateEndEv>:
    }
}

void InputManager::UpdateEnd() {
    54e8:	b500      	push	{lr}
    atomic_fetch_or(&m_inputRegRisen.reg,
    54ea:	6a81      	ldr	r1, [r0, #40]	; 0x28
    54ec:	6a43      	ldr	r3, [r0, #36]	; 0x24
                    m_inputRegRT.reg & (~m_inputRegLast.reg));
    54ee:	f3bf 8f5b 	dmb	ish
    54f2:	f100 022c 	add.w	r2, r0, #44	; 0x2c
    atomic_fetch_or(&m_inputRegRisen.reg,
    54f6:	ea23 0301 	bic.w	r3, r3, r1
                    m_inputRegRT.reg & (~m_inputRegLast.reg));
    54fa:	e852 1f00 	ldrex	r1, [r2]
    54fe:	4319      	orrs	r1, r3
    5500:	e842 1e00 	strex	lr, r1, [r2]
    5504:	f1be 0f00 	cmp.w	lr, #0
    5508:	d1f7      	bne.n	54fa <_ZN9ClearCore12InputManager9UpdateEndEv+0x12>
    550a:	f3bf 8f5b 	dmb	ish
    atomic_fetch_or(&m_inputRegFallen.reg,
    550e:	6a41      	ldr	r1, [r0, #36]	; 0x24
    5510:	6a83      	ldr	r3, [r0, #40]	; 0x28
                    (~m_inputRegRT.reg) & m_inputRegLast.reg);
    5512:	f3bf 8f5b 	dmb	ish
    5516:	f100 0230 	add.w	r2, r0, #48	; 0x30
    atomic_fetch_or(&m_inputRegFallen.reg,
    551a:	ea23 0301 	bic.w	r3, r3, r1
                    (~m_inputRegRT.reg) & m_inputRegLast.reg);
    551e:	e852 1f00 	ldrex	r1, [r2]
    5522:	4319      	orrs	r1, r3
    5524:	e842 1e00 	strex	lr, r1, [r2]
    5528:	f1be 0f00 	cmp.w	lr, #0
    552c:	d1f7      	bne.n	551e <_ZN9ClearCore12InputManager9UpdateEndEv+0x36>
    552e:	f3bf 8f5b 	dmb	ish
    m_inputRegLast.reg = m_inputRegRT.reg;
    5532:	6a43      	ldr	r3, [r0, #36]	; 0x24
    5534:	6283      	str	r3, [r0, #40]	; 0x28
    5536:	f85d fb04 	ldr.w	pc, [sp], #4
    553a:	bf00      	nop

0000553c <_GLOBAL__sub_I__ZN9ClearCore8InputMgrE>:
    SysConnectorState retVal;
    retVal.reg = atomic_load_n(&m_inputRegRT.reg) & mask.reg;
    return retVal;
}

} // ClearCore namespace
    553c:	b508      	push	{r3, lr}
InputManager &InputMgr = InputManager::Instance();
    553e:	f7ff ff1b 	bl	5378 <_ZN9ClearCore12InputManager8InstanceEv>
    5542:	4b01      	ldr	r3, [pc, #4]	; (5548 <_GLOBAL__sub_I__ZN9ClearCore8InputMgrE+0xc>)
    5544:	6018      	str	r0, [r3, #0]
    5546:	bd08      	pop	{r3, pc}
    5548:	20000bec 	.word	0x20000bec

0000554c <_ZN9ClearCore11MotorDriver4TypeEv>:

        \return The type of the current connector.
    **/
    Connector::ConnectorTypes Type() override {
        return Connector::CPM_TYPE;
    }
    554c:	2006      	movs	r0, #6
    554e:	4770      	bx	lr

00005550 <_ZN9ClearCore11MotorDriver10IsWritableEv>:

        \return True because the connector is always writable
    **/
    bool IsWritable() override {
        return true;
    }
    5550:	2001      	movs	r0, #1
    5552:	4770      	bx	lr

00005554 <_ZN9ClearCore11MotorDriver11IsInHwFaultEv>:
        \endcode

        \return Connector is in fault
    **/
    bool IsInHwFault() override {
        return (volatile bool &)m_inFault;
    5554:	f890 0114 	ldrb.w	r0, [r0, #276]	; 0x114
    }
    5558:	4770      	bx	lr
    555a:	bf00      	nop

0000555c <_ZN9ClearCore11MotorDriver4ModeEv>:

        \return The connector's current operational mode.
    **/
    virtual ConnectorModes Mode() override {
        return Connector::Mode();
    }
    555c:	7980      	ldrb	r0, [r0, #6]
    555e:	4770      	bx	lr

00005560 <_ZN9ClearCore11MotorDriver4ModeENS_9Connector14ConnectorModesE>:
    m_statusRegMotorFallen.reg = 0;

    m_initialized = true;
}

bool MotorDriver::Mode(ConnectorModes newMode) {
    5560:	b538      	push	{r3, r4, r5, lr}
    // Bail out if we are already in the requested mode
    if (newMode == m_mode) {
    5562:	7983      	ldrb	r3, [r0, #6]
    5564:	428b      	cmp	r3, r1
    5566:	f000 80a7 	beq.w	56b8 <_ZN9ClearCore11MotorDriver4ModeENS_9Connector14ConnectorModesE+0x158>
        return true;
    }

    switch (newMode) {
    556a:	f1a1 0309 	sub.w	r3, r1, #9
    556e:	460d      	mov	r5, r1
    5570:	4604      	mov	r4, r0
    5572:	2b03      	cmp	r3, #3
    5574:	f200 80a2 	bhi.w	56bc <_ZN9ClearCore11MotorDriver4ModeENS_9Connector14ConnectorModesE+0x15c>
    5578:	e8df f003 	tbb	[pc, r3]
    557c:	0246467a 	.word	0x0246467a
        case CPM_MODE_A_PWM_B_PWM:
            // Stop any active S&D command
            MoveStopAbrupt();
    5580:	3030      	adds	r0, #48	; 0x30
    5582:	f007 f931 	bl	c7e8 <_ZN9ClearCore13StepGenerator14MoveStopAbruptEv>
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
    5586:	b672      	cpsid	i

    return true;
}

void MotorDriver::UpdateADuty() {
    if (*m_aTccBuffer == m_aDutyCnt) {
    5588:	f8d4 00b4 	ldr.w	r0, [r4, #180]	; 0xb4
    558c:	6803      	ldr	r3, [r0, #0]
            m_aDutyCnt = 0;
    558e:	2200      	movs	r2, #0
    5590:	f8a4 2110 	strh.w	r2, [r4, #272]	; 0x110
    if (*m_aTccBuffer == m_aDutyCnt) {
    5594:	b13b      	cbz	r3, 55a6 <_ZN9ClearCore11MotorDriver4ModeENS_9Connector14ConnectorModesE+0x46>
    5596:	f8d4 10c4 	ldr.w	r1, [r4, #196]	; 0xc4
    559a:	f8d4 20c0 	ldr.w	r2, [r4, #192]	; 0xc0
        return;
    }
    while (*m_aTccSyncReg & m_aTccSyncMask) {
    559e:	680b      	ldr	r3, [r1, #0]
    55a0:	4013      	ands	r3, r2
    55a2:	d1fc      	bne.n	559e <_ZN9ClearCore11MotorDriver4ModeENS_9Connector14ConnectorModesE+0x3e>
        continue;
    }
    *m_aTccBuffer = m_aDutyCnt;
    55a4:	6003      	str	r3, [r0, #0]
}

void MotorDriver::UpdateBDuty() {
    if (*m_bTccBuffer == m_bDutyCnt) {
    55a6:	f8d4 00bc 	ldr.w	r0, [r4, #188]	; 0xbc
    55aa:	6803      	ldr	r3, [r0, #0]
            m_bDutyCnt = 0;
    55ac:	2200      	movs	r2, #0
    55ae:	f8a4 2112 	strh.w	r2, [r4, #274]	; 0x112
    if (*m_bTccBuffer == m_bDutyCnt) {
    55b2:	b13b      	cbz	r3, 55c4 <_ZN9ClearCore11MotorDriver4ModeENS_9Connector14ConnectorModesE+0x64>
    55b4:	f8d4 10cc 	ldr.w	r1, [r4, #204]	; 0xcc
    55b8:	f8d4 20c8 	ldr.w	r2, [r4, #200]	; 0xc8
        return;
    }
    while (*m_bTccSyncReg & m_bTccSyncMask) {
    55bc:	680b      	ldr	r3, [r1, #0]
    55be:	4013      	ands	r3, r2
    55c0:	d1fc      	bne.n	55bc <_ZN9ClearCore11MotorDriver4ModeENS_9Connector14ConnectorModesE+0x5c>
        continue;
    }
    *m_bTccBuffer = m_bDutyCnt;
    55c2:	6003      	str	r3, [r0, #0]
            PMUX_ENABLE(m_aInfo->gpioPort, m_aInfo->gpioPin);
    55c4:	f8d4 10a4 	ldr.w	r1, [r4, #164]	; 0xa4
    55c8:	4a3d      	ldr	r2, [pc, #244]	; (56c0 <_ZN9ClearCore11MotorDriver4ModeENS_9Connector14ConnectorModesE+0x160>)
    55ca:	f991 3001 	ldrsb.w	r3, [r1, #1]
    55ce:	7889      	ldrb	r1, [r1, #2]
    55d0:	eb02 13c3 	add.w	r3, r2, r3, lsl #7
    55d4:	440b      	add	r3, r1
            m_mode = newMode;
    55d6:	200c      	movs	r0, #12
            PMUX_ENABLE(m_aInfo->gpioPort, m_aInfo->gpioPin);
    55d8:	f893 1040 	ldrb.w	r1, [r3, #64]	; 0x40
    55dc:	f041 0101 	orr.w	r1, r1, #1
    55e0:	f883 1040 	strb.w	r1, [r3, #64]	; 0x40
            PMUX_ENABLE(m_bInfo->gpioPort, m_bInfo->gpioPin);
    55e4:	f8d4 10a8 	ldr.w	r1, [r4, #168]	; 0xa8
    55e8:	f991 3001 	ldrsb.w	r3, [r1, #1]
    55ec:	7889      	ldrb	r1, [r1, #2]
    55ee:	eb02 13c3 	add.w	r3, r2, r3, lsl #7
    55f2:	440b      	add	r3, r1
    55f4:	f893 2040 	ldrb.w	r2, [r3, #64]	; 0x40
    55f8:	f042 0201 	orr.w	r2, r2, #1
    55fc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
            m_mode = newMode;
    5600:	71a0      	strb	r0, [r4, #6]
  __ASM volatile ("cpsie i" : : : "memory");
    5602:	b662      	cpsie	i
    return true;
    5604:	2001      	movs	r0, #1
    5606:	bd38      	pop	{r3, r4, r5, pc}
            MoveStopAbrupt();
    5608:	3030      	adds	r0, #48	; 0x30
    560a:	f007 f8ed 	bl	c7e8 <_ZN9ClearCore13StepGenerator14MoveStopAbruptEv>
  __ASM volatile ("cpsid i" : : : "memory");
    560e:	b672      	cpsid	i
    if (*m_bTccBuffer == m_bDutyCnt) {
    5610:	f8d4 00bc 	ldr.w	r0, [r4, #188]	; 0xbc
    5614:	6803      	ldr	r3, [r0, #0]
            m_bDutyCnt = 0;
    5616:	2200      	movs	r2, #0
    5618:	f8a4 2112 	strh.w	r2, [r4, #274]	; 0x112
    if (*m_bTccBuffer == m_bDutyCnt) {
    561c:	b13b      	cbz	r3, 562e <_ZN9ClearCore11MotorDriver4ModeENS_9Connector14ConnectorModesE+0xce>
    561e:	f8d4 10cc 	ldr.w	r1, [r4, #204]	; 0xcc
    5622:	f8d4 20c8 	ldr.w	r2, [r4, #200]	; 0xc8
    while (*m_bTccSyncReg & m_bTccSyncMask) {
    5626:	680b      	ldr	r3, [r1, #0]
    5628:	4013      	ands	r3, r2
    562a:	d1fc      	bne.n	5626 <_ZN9ClearCore11MotorDriver4ModeENS_9Connector14ConnectorModesE+0xc6>
    *m_bTccBuffer = m_bDutyCnt;
    562c:	6003      	str	r3, [r0, #0]
            PMUX_DISABLE(m_aInfo->gpioPort, m_aInfo->gpioPin);
    562e:	f8d4 10a4 	ldr.w	r1, [r4, #164]	; 0xa4
    5632:	4a23      	ldr	r2, [pc, #140]	; (56c0 <_ZN9ClearCore11MotorDriver4ModeENS_9Connector14ConnectorModesE+0x160>)
    5634:	f991 3001 	ldrsb.w	r3, [r1, #1]
    5638:	7889      	ldrb	r1, [r1, #2]
    563a:	eb02 13c3 	add.w	r3, r2, r3, lsl #7
    563e:	440b      	add	r3, r1
    5640:	f893 1040 	ldrb.w	r1, [r3, #64]	; 0x40
    5644:	f36f 0100 	bfc	r1, #0, #1
    5648:	f883 1040 	strb.w	r1, [r3, #64]	; 0x40
            PMUX_ENABLE(m_bInfo->gpioPort, m_bInfo->gpioPin);
    564c:	f8d4 10a8 	ldr.w	r1, [r4, #168]	; 0xa8
    5650:	f991 3001 	ldrsb.w	r3, [r1, #1]
    5654:	7889      	ldrb	r1, [r1, #2]
    5656:	eb02 13c3 	add.w	r3, r2, r3, lsl #7
    565a:	440b      	add	r3, r1
    565c:	f893 2040 	ldrb.w	r2, [r3, #64]	; 0x40
    5660:	f042 0201 	orr.w	r2, r2, #1
    5664:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
            m_mode = newMode;
    5668:	71a5      	strb	r5, [r4, #6]
  __ASM volatile ("cpsie i" : : : "memory");
    566a:	b662      	cpsie	i
    return true;
    566c:	2001      	movs	r0, #1
    566e:	bd38      	pop	{r3, r4, r5, pc}
            MoveStopAbrupt();
    5670:	3030      	adds	r0, #48	; 0x30
    5672:	f007 f8b9 	bl	c7e8 <_ZN9ClearCore13StepGenerator14MoveStopAbruptEv>
            PMUX_DISABLE(m_aInfo->gpioPort, m_aInfo->gpioPin);
    5676:	f8d4 10a4 	ldr.w	r1, [r4, #164]	; 0xa4
    567a:	4a11      	ldr	r2, [pc, #68]	; (56c0 <_ZN9ClearCore11MotorDriver4ModeENS_9Connector14ConnectorModesE+0x160>)
    567c:	f991 3001 	ldrsb.w	r3, [r1, #1]
    5680:	7889      	ldrb	r1, [r1, #2]
    5682:	eb02 13c3 	add.w	r3, r2, r3, lsl #7
    5686:	440b      	add	r3, r1
            m_mode = CPM_MODE_A_DIRECT_B_DIRECT;
    5688:	2509      	movs	r5, #9
            PMUX_DISABLE(m_aInfo->gpioPort, m_aInfo->gpioPin);
    568a:	f893 1040 	ldrb.w	r1, [r3, #64]	; 0x40
    568e:	f36f 0100 	bfc	r1, #0, #1
    5692:	f883 1040 	strb.w	r1, [r3, #64]	; 0x40
            PMUX_DISABLE(m_bInfo->gpioPort, m_bInfo->gpioPin);
    5696:	f8d4 10a8 	ldr.w	r1, [r4, #168]	; 0xa8
    569a:	f991 3001 	ldrsb.w	r3, [r1, #1]
    569e:	7889      	ldrb	r1, [r1, #2]
    56a0:	eb02 13c3 	add.w	r3, r2, r3, lsl #7
    56a4:	440b      	add	r3, r1
    return true;
    56a6:	2001      	movs	r0, #1
            PMUX_DISABLE(m_bInfo->gpioPort, m_bInfo->gpioPin);
    56a8:	f893 2040 	ldrb.w	r2, [r3, #64]	; 0x40
    56ac:	f36f 0200 	bfc	r2, #0, #1
    56b0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
            m_mode = CPM_MODE_A_DIRECT_B_DIRECT;
    56b4:	71a5      	strb	r5, [r4, #6]
            break;
    56b6:	bd38      	pop	{r3, r4, r5, pc}
        return true;
    56b8:	2001      	movs	r0, #1
    56ba:	bd38      	pop	{r3, r4, r5, pc}
            return false;
    56bc:	2000      	movs	r0, #0
}
    56be:	bd38      	pop	{r3, r4, r5, pc}
    56c0:	41008000 	.word	0x41008000

000056c4 <_ZN9ClearCore11MotorDriver15OutputDirectionEv>:
    }

#ifndef HIDE_FROM_DOXYGEN

    virtual void OutputDirection() override {
        if (m_mode == Connector::CPM_MODE_STEP_AND_DIR &&
    56c4:	7983      	ldrb	r3, [r0, #6]
    56c6:	2b0a      	cmp	r3, #10
    56c8:	d00f      	beq.n	56ea <_ZN9ClearCore11MotorDriver15OutputDirectionEv+0x26>
                m_polarityInversions.bit.directionInverted) {
            DATA_OUTPUT_STATE(m_aInfo->gpioPort, m_aDataMask, Direction());
        }
        else {
            DATA_OUTPUT_STATE(m_aInfo->gpioPort, m_aDataMask, !Direction());
    56ca:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
    56ce:	b1a3      	cbz	r3, 56fa <_ZN9ClearCore11MotorDriver15OutputDirectionEv+0x36>
    56d0:	f8d0 30a4 	ldr.w	r3, [r0, #164]	; 0xa4
    56d4:	f8d0 20b0 	ldr.w	r2, [r0, #176]	; 0xb0
    56d8:	f993 3001 	ldrsb.w	r3, [r3, #1]
    56dc:	01db      	lsls	r3, r3, #7
    56de:	f103 4382 	add.w	r3, r3, #1090519040	; 0x41000000
    56e2:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
    56e6:	615a      	str	r2, [r3, #20]
    56e8:	4770      	bx	lr
                m_polarityInversions.bit.directionInverted) {
    56ea:	f890 30fc 	ldrb.w	r3, [r0, #252]	; 0xfc
        if (m_mode == Connector::CPM_MODE_STEP_AND_DIR &&
    56ee:	079b      	lsls	r3, r3, #30
    56f0:	d5eb      	bpl.n	56ca <_ZN9ClearCore11MotorDriver15OutputDirectionEv+0x6>
            DATA_OUTPUT_STATE(m_aInfo->gpioPort, m_aDataMask, Direction());
    56f2:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
    56f6:	2b00      	cmp	r3, #0
    56f8:	d0ea      	beq.n	56d0 <_ZN9ClearCore11MotorDriver15OutputDirectionEv+0xc>
            DATA_OUTPUT_STATE(m_aInfo->gpioPort, m_aDataMask, !Direction());
    56fa:	f8d0 30a4 	ldr.w	r3, [r0, #164]	; 0xa4
    56fe:	f8d0 20b0 	ldr.w	r2, [r0, #176]	; 0xb0
    5702:	f993 3001 	ldrsb.w	r3, [r3, #1]
    5706:	01db      	lsls	r3, r3, #7
    5708:	f103 4382 	add.w	r3, r3, #1090519040	; 0x41000000
    570c:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
    5710:	619a      	str	r2, [r3, #24]
    5712:	4770      	bx	lr

00005714 <_ZThn48_N9ClearCore11MotorDriver15OutputDirectionEv>:
    virtual void OutputDirection() override {
    5714:	f1a0 0030 	sub.w	r0, r0, #48	; 0x30
    5718:	e7d4      	b.n	56c4 <_ZN9ClearCore11MotorDriver15OutputDirectionEv>
    571a:	bf00      	nop

0000571c <_ZN9ClearCore11MotorDriverC1ENS_13ShiftRegister5MasksEPK15PeripheralRouteS5_S5_tt>:
MotorDriver::MotorDriver(ShiftRegister::Masks enableMask,
    571c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    5720:	9f08      	ldr	r7, [sp, #32]
    5722:	f8bd 9024 	ldrh.w	r9, [sp, #36]	; 0x24
    5726:	f8bd 8028 	ldrh.w	r8, [sp, #40]	; 0x28
    572a:	4604      	mov	r4, r0
    572c:	4616      	mov	r6, r2
    572e:	468a      	mov	sl, r1
      m_clearFaultHlfbTimer(0) {
    5730:	463a      	mov	r2, r7
    5732:	2100      	movs	r1, #0
MotorDriver::MotorDriver(ShiftRegister::Masks enableMask,
    5734:	461d      	mov	r5, r3
      m_clearFaultHlfbTimer(0) {
    5736:	f7ff fd3d 	bl	51b4 <_ZN9ClearCore9DigitalInC1ENS_13ShiftRegister5MasksEPK15PeripheralRoute>
    573a:	f104 0030 	add.w	r0, r4, #48	; 0x30
    573e:	f007 f821 	bl	c784 <_ZN9ClearCore13StepGeneratorC1Ev>
    5742:	4b5c      	ldr	r3, [pc, #368]	; (58b4 <_ZN9ClearCore11MotorDriverC1ENS_13ShiftRegister5MasksEPK15PeripheralRouteS5_S5_tt+0x198>)
    5744:	f8c4 a0a0 	str.w	sl, [r4, #160]	; 0xa0
    5748:	f103 023c 	add.w	r2, r3, #60	; 0x3c
    574c:	f8c4 60a4 	str.w	r6, [r4, #164]	; 0xa4
    5750:	f8c4 70ac 	str.w	r7, [r4, #172]	; 0xac
    5754:	6322      	str	r2, [r4, #48]	; 0x30
    5756:	f8c4 50a8 	str.w	r5, [r4, #168]	; 0xa8
    575a:	6023      	str	r3, [r4, #0]
      m_aDataMask(1UL << aInfo->gpioPin),
    575c:	78b3      	ldrb	r3, [r6, #2]
      m_clearFaultHlfbTimer(0) {
    575e:	f8df a160 	ldr.w	sl, [pc, #352]	; 58c0 <_ZN9ClearCore11MotorDriverC1ENS_13ShiftRegister5MasksEPK15PeripheralRouteS5_S5_tt+0x1a4>
    Tcc *theTcc = (tcc_modules[m_aInfo->tccNum]);
    5762:	4f55      	ldr	r7, [pc, #340]	; (58b8 <_ZN9ClearCore11MotorDriverC1ENS_13ShiftRegister5MasksEPK15PeripheralRouteS5_S5_tt+0x19c>)
      m_aDataMask(1UL << aInfo->gpioPin),
    5764:	2101      	movs	r1, #1
    5766:	fa01 f303 	lsl.w	r3, r1, r3
      m_clearFaultHlfbTimer(0) {
    576a:	f8c4 30b0 	str.w	r3, [r4, #176]	; 0xb0
      m_bDataMask(1UL << bInfo->gpioPin),
    576e:	78ab      	ldrb	r3, [r5, #2]
      m_clearFaultHlfbTimer(0) {
    5770:	f884 90d6 	strb.w	r9, [r4, #214]	; 0xd6
      m_bDataMask(1UL << bInfo->gpioPin),
    5774:	fa01 f303 	lsl.w	r3, r1, r3
      m_clearFaultHlfbTimer(0) {
    5778:	f04f 0e02 	mov.w	lr, #2
    577c:	2200      	movs	r2, #0
    577e:	f64f 70ff 	movw	r0, #65535	; 0xffff
    5782:	f8c4 30b8 	str.w	r3, [r4, #184]	; 0xb8
    5786:	f8a4 e0e2 	strh.w	lr, [r4, #226]	; 0xe2
    578a:	f04f 33ff 	mov.w	r3, #4294967295
    578e:	f04f 0e19 	mov.w	lr, #25
    5792:	f04f 0903 	mov.w	r9, #3
    5796:	f04f 0c7d 	mov.w	ip, #125	; 0x7d
    579a:	f884 20d8 	strb.w	r2, [r4, #216]	; 0xd8
    579e:	f8a4 20da 	strh.w	r2, [r4, #218]	; 0xda
    57a2:	f8a4 20dc 	strh.w	r2, [r4, #220]	; 0xdc
    57a6:	f8a4 20de 	strh.w	r2, [r4, #222]	; 0xde
    57aa:	f8a4 20e0 	strh.w	r2, [r4, #224]	; 0xe0
    57ae:	f884 20e4 	strb.w	r2, [r4, #228]	; 0xe4
    57b2:	f884 20f5 	strb.w	r2, [r4, #245]	; 0xf5
    57b6:	f884 20f6 	strb.w	r2, [r4, #246]	; 0xf6
            reg = val;
    57ba:	f8a4 20fc 	strh.w	r2, [r4, #252]	; 0xfc
    57be:	f884 2100 	strb.w	r2, [r4, #256]	; 0x100
    57c2:	f884 2101 	strb.w	r2, [r4, #257]	; 0x101
    57c6:	f8a4 00d0 	strh.w	r0, [r4, #208]	; 0xd0
    57ca:	f8a4 00d2 	strh.w	r0, [r4, #210]	; 0xd2
    57ce:	f8a4 00d4 	strh.w	r0, [r4, #212]	; 0xd4
    57d2:	f8c4 30ec 	str.w	r3, [r4, #236]	; 0xec
    57d6:	f884 80d7 	strb.w	r8, [r4, #215]	; 0xd7
    57da:	f8c4 a0f0 	str.w	sl, [r4, #240]	; 0xf0
    57de:	f884 90f4 	strb.w	r9, [r4, #244]	; 0xf4
    57e2:	f8a4 c0f8 	strh.w	ip, [r4, #248]	; 0xf8
    57e6:	f8c4 e0e8 	str.w	lr, [r4, #232]	; 0xe8
    57ea:	f8c4 2104 	str.w	r2, [r4, #260]	; 0x104
    57ee:	f8c4 2108 	str.w	r2, [r4, #264]	; 0x108
    57f2:	f8c4 2110 	str.w	r2, [r4, #272]	; 0x110
    57f6:	f884 2114 	strb.w	r2, [r4, #276]	; 0x114
            reg = val;
    57fa:	f8c4 2118 	str.w	r2, [r4, #280]	; 0x118
    57fe:	f8c4 211c 	str.w	r2, [r4, #284]	; 0x11c
    5802:	f8c4 2120 	str.w	r2, [r4, #288]	; 0x120
    5806:	f8c4 2124 	str.w	r2, [r4, #292]	; 0x124
            reg = val;
    580a:	f8c4 2128 	str.w	r2, [r4, #296]	; 0x128
    580e:	f8c4 212c 	str.w	r2, [r4, #300]	; 0x12c
    5812:	f8c4 2130 	str.w	r2, [r4, #304]	; 0x130
    5816:	f884 213c 	strb.w	r2, [r4, #316]	; 0x13c
    581a:	f884 213d 	strb.w	r2, [r4, #317]	; 0x13d
    581e:	f884 213e 	strb.w	r2, [r4, #318]	; 0x13e
    5822:	f8c4 2140 	str.w	r2, [r4, #320]	; 0x140
    m_interruptAvail = true;
    5826:	7661      	strb	r1, [r4, #25]
      m_clearFaultHlfbTimer(0) {
    5828:	f8c4 e10c 	str.w	lr, [r4, #268]	; 0x10c
    582c:	f8c4 3134 	str.w	r3, [r4, #308]	; 0x134
    5830:	f8c4 3138 	str.w	r3, [r4, #312]	; 0x138
    Tcc *theTcc = (tcc_modules[m_aInfo->tccNum]);
    5834:	7b33      	ldrb	r3, [r6, #12]
    uint8_t ccIndex = m_aInfo->tccPadNum % TccCcNum(m_aInfo->tccNum);
    5836:	7b76      	ldrb	r6, [r6, #13]
    Tcc *theTcc = (tcc_modules[m_aInfo->tccNum]);
    5838:	f857 0023 	ldr.w	r0, [r7, r3, lsl #2]
    583c:	2b04      	cmp	r3, #4
    583e:	bf9c      	itt	ls
    5840:	4a1e      	ldrls	r2, [pc, #120]	; (58bc <_ZN9ClearCore11MotorDriverC1ENS_13ShiftRegister5MasksEPK15PeripheralRouteS5_S5_tt+0x1a0>)
    5842:	5cd2      	ldrbls	r2, [r2, r3]
    uint8_t ccIndex = m_aInfo->tccPadNum % TccCcNum(m_aInfo->tccNum);
    5844:	fbb6 f1f2 	udiv	r1, r6, r2
    5848:	fb02 6211 	mls	r2, r2, r1, r6
    m_aTccSyncMask = TCC_SYNCBUSY_CC(1UL << ccIndex);
    584c:	f44f 7380 	mov.w	r3, #256	; 0x100
    uint8_t ccIndex = m_aInfo->tccPadNum % TccCcNum(m_aInfo->tccNum);
    5850:	b2d2      	uxtb	r2, r2
    m_aTccBuffer = &theTcc->CCBUF[ccIndex].reg;
    5852:	f102 011c 	add.w	r1, r2, #28
    m_aTccSyncMask = TCC_SYNCBUSY_CC(1UL << ccIndex);
    5856:	fa03 f202 	lsl.w	r2, r3, r2
    m_aTccBuffer = &theTcc->CCBUF[ccIndex].reg;
    585a:	eb00 0181 	add.w	r1, r0, r1, lsl #2
    m_aTccSyncMask = TCC_SYNCBUSY_CC(1UL << ccIndex);
    585e:	f402 527c 	and.w	r2, r2, #16128	; 0x3f00
    m_aTccSyncReg = &theTcc->SYNCBUSY.reg;
    5862:	3008      	adds	r0, #8
    m_aTccBuffer = &theTcc->CCBUF[ccIndex].reg;
    5864:	f8c4 10b4 	str.w	r1, [r4, #180]	; 0xb4
    m_aTccSyncReg = &theTcc->SYNCBUSY.reg;
    5868:	f8c4 00c4 	str.w	r0, [r4, #196]	; 0xc4
    m_aTccSyncMask = TCC_SYNCBUSY_CC(1UL << ccIndex);
    586c:	f8c4 20c0 	str.w	r2, [r4, #192]	; 0xc0
    theTcc = (tcc_modules[m_bInfo->tccNum]);
    5870:	7b2a      	ldrb	r2, [r5, #12]
    ccIndex = m_bInfo->tccPadNum % TccCcNum(m_bInfo->tccNum);
    5872:	7b68      	ldrb	r0, [r5, #13]
    theTcc = (tcc_modules[m_bInfo->tccNum]);
    5874:	f857 1022 	ldr.w	r1, [r7, r2, lsl #2]
    5878:	2a04      	cmp	r2, #4
    587a:	bf9a      	itte	ls
    587c:	4b0f      	ldrls	r3, [pc, #60]	; (58bc <_ZN9ClearCore11MotorDriverC1ENS_13ShiftRegister5MasksEPK15PeripheralRouteS5_S5_tt+0x1a0>)
    587e:	5c9a      	ldrbls	r2, [r3, r2]
    ccIndex = m_bInfo->tccPadNum % TccCcNum(m_bInfo->tccNum);
    5880:	2200      	movhi	r2, #0
    5882:	fbb0 f3f2 	udiv	r3, r0, r2
    5886:	fb02 0313 	mls	r3, r2, r3, r0
    588a:	b2db      	uxtb	r3, r3
    m_bTccSyncMask = TCC_SYNCBUSY_CC(1UL << ccIndex);
    588c:	f44f 7280 	mov.w	r2, #256	; 0x100
    m_bTccBuffer = &theTcc->CCBUF[ccIndex].reg;
    5890:	f103 001c 	add.w	r0, r3, #28
    m_bTccSyncMask = TCC_SYNCBUSY_CC(1UL << ccIndex);
    5894:	fa02 f303 	lsl.w	r3, r2, r3
    m_bTccBuffer = &theTcc->CCBUF[ccIndex].reg;
    5898:	eb01 0080 	add.w	r0, r1, r0, lsl #2
    m_bTccSyncMask = TCC_SYNCBUSY_CC(1UL << ccIndex);
    589c:	f403 537c 	and.w	r3, r3, #16128	; 0x3f00
    m_bTccSyncReg = &theTcc->SYNCBUSY.reg;
    58a0:	3108      	adds	r1, #8
    m_bTccBuffer = &theTcc->CCBUF[ccIndex].reg;
    58a2:	f8c4 00bc 	str.w	r0, [r4, #188]	; 0xbc
    m_bTccSyncReg = &theTcc->SYNCBUSY.reg;
    58a6:	f8c4 10cc 	str.w	r1, [r4, #204]	; 0xcc
    m_bTccSyncMask = TCC_SYNCBUSY_CC(1UL << ccIndex);
    58aa:	f8c4 30c8 	str.w	r3, [r4, #200]	; 0xc8
}
    58ae:	4620      	mov	r0, r4
    58b0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    58b4:	0002282c 	.word	0x0002282c
    58b8:	00022810 	.word	0x00022810
    58bc:	00022808 	.word	0x00022808
    58c0:	c61c3c00 	.word	0xc61c3c00

000058c4 <_ZN9ClearCore11MotorDriver13MotorInAStateEb>:
    switch (m_mode) {
    58c4:	7983      	ldrb	r3, [r0, #6]
    58c6:	2b09      	cmp	r3, #9
    58c8:	d003      	beq.n	58d2 <_ZN9ClearCore11MotorDriver13MotorInAStateEb+0xe>
    58ca:	2b0b      	cmp	r3, #11
    58cc:	d001      	beq.n	58d2 <_ZN9ClearCore11MotorDriver13MotorInAStateEb+0xe>
            return false;
    58ce:	2000      	movs	r0, #0
}
    58d0:	4770      	bx	lr
            DATA_OUTPUT_STATE(m_aInfo->gpioPort, m_aDataMask, !value);
    58d2:	f8d0 30a4 	ldr.w	r3, [r0, #164]	; 0xa4
    58d6:	f8d0 20b0 	ldr.w	r2, [r0, #176]	; 0xb0
    58da:	f993 3001 	ldrsb.w	r3, [r3, #1]
    58de:	01db      	lsls	r3, r3, #7
    58e0:	f103 4382 	add.w	r3, r3, #1090519040	; 0x41000000
    58e4:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
    58e8:	b111      	cbz	r1, 58f0 <_ZN9ClearCore11MotorDriver13MotorInAStateEb+0x2c>
            return true;
    58ea:	4608      	mov	r0, r1
            DATA_OUTPUT_STATE(m_aInfo->gpioPort, m_aDataMask, !value);
    58ec:	615a      	str	r2, [r3, #20]
    58ee:	4770      	bx	lr
    58f0:	2001      	movs	r0, #1
    58f2:	619a      	str	r2, [r3, #24]
    58f4:	4770      	bx	lr
    58f6:	bf00      	nop

000058f8 <_ZN9ClearCore11MotorDriver12MotorInBDutyEh>:
bool MotorDriver::MotorInBDuty(uint8_t duty) {
    58f8:	b430      	push	{r4, r5}
    if (Connector::m_mode == Connector::CPM_MODE_A_DIRECT_B_PWM ||
    58fa:	7984      	ldrb	r4, [r0, #6]
    58fc:	3c0b      	subs	r4, #11
    58fe:	2c01      	cmp	r4, #1
    5900:	d902      	bls.n	5908 <_ZN9ClearCore11MotorDriver12MotorInBDutyEh+0x10>
    return false;
    5902:	2000      	movs	r0, #0
}
    5904:	bc30      	pop	{r4, r5}
    5906:	4770      	bx	lr
        m_bDutyCnt = (static_cast<uint32_t>(duty) * m_stepsPerSampleMax +
    5908:	6b82      	ldr	r2, [r0, #56]	; 0x38
                      (UINT8_MAX / 2)) / UINT8_MAX;
    590a:	4c0e      	ldr	r4, [pc, #56]	; (5944 <_ZN9ClearCore11MotorDriver12MotorInBDutyEh+0x4c>)
    if (*m_bTccBuffer == m_bDutyCnt) {
    590c:	f8d0 50bc 	ldr.w	r5, [r0, #188]	; 0xbc
        m_bDutyCnt = (static_cast<uint32_t>(duty) * m_stepsPerSampleMax +
    5910:	fb02 f301 	mul.w	r3, r2, r1
    5914:	337f      	adds	r3, #127	; 0x7f
                      (UINT8_MAX / 2)) / UINT8_MAX;
    5916:	fba4 2303 	umull	r2, r3, r4, r3
    591a:	09db      	lsrs	r3, r3, #7
    if (*m_bTccBuffer == m_bDutyCnt) {
    591c:	6829      	ldr	r1, [r5, #0]
                      (UINT8_MAX / 2)) / UINT8_MAX;
    591e:	f8a0 3112 	strh.w	r3, [r0, #274]	; 0x112
    5922:	b29a      	uxth	r2, r3
    if (*m_bTccBuffer == m_bDutyCnt) {
    5924:	4291      	cmp	r1, r2
    5926:	d00a      	beq.n	593e <_ZN9ClearCore11MotorDriver12MotorInBDutyEh+0x46>
    5928:	f8d0 40cc 	ldr.w	r4, [r0, #204]	; 0xcc
    592c:	f8d0 10c8 	ldr.w	r1, [r0, #200]	; 0xc8
    while (*m_bTccSyncReg & m_bTccSyncMask) {
    5930:	6823      	ldr	r3, [r4, #0]
    5932:	4219      	tst	r1, r3
    5934:	d1fc      	bne.n	5930 <_ZN9ClearCore11MotorDriver12MotorInBDutyEh+0x38>
    *m_bTccBuffer = m_bDutyCnt;
    5936:	602a      	str	r2, [r5, #0]
        return true;
    5938:	2001      	movs	r0, #1
}
    593a:	bc30      	pop	{r4, r5}
    593c:	4770      	bx	lr
        return true;
    593e:	2001      	movs	r0, #1
    5940:	e7e0      	b.n	5904 <_ZN9ClearCore11MotorDriver12MotorInBDutyEh+0xc>
    5942:	bf00      	nop
    5944:	80808081 	.word	0x80808081

00005948 <_ZN9ClearCore11MotorDriver13EnableRequestEb>:
void MotorDriver::EnableRequest(bool value) {
    5948:	b530      	push	{r4, r5, lr}
    bool wasDisabled = !(m_isEnabled || m_isEnabling);
    594a:	f890 312e 	ldrb.w	r3, [r0, #302]	; 0x12e
void MotorDriver::EnableRequest(bool value) {
    594e:	b083      	sub	sp, #12
    5950:	4604      	mov	r4, r0
    bool wasDisabled = !(m_isEnabled || m_isEnabling);
    5952:	2b00      	cmp	r3, #0
    5954:	d171      	bne.n	5a3a <_ZN9ClearCore11MotorDriver13EnableRequestEb+0xf2>
    5956:	f890 312d 	ldrb.w	r3, [r0, #301]	; 0x12d
    595a:	f083 0301 	eor.w	r3, r3, #1
    if (value != m_enableRequestedState || m_inFault) {
    595e:	f894 2100 	ldrb.w	r2, [r4, #256]	; 0x100
    bool wasPulsing = m_enableTriggerActive;
    5962:	f894 5101 	ldrb.w	r5, [r4, #257]	; 0x101
    if (value != m_enableRequestedState || m_inFault) {
    5966:	428a      	cmp	r2, r1
    5968:	d031      	beq.n	59ce <_ZN9ClearCore11MotorDriver13EnableRequestEb+0x86>
    596a:	f894 0114 	ldrb.w	r0, [r4, #276]	; 0x114
    m_enableRequestedState = value;
    596e:	f884 1100 	strb.w	r1, [r4, #256]	; 0x100
        m_enableTriggerActive = false;
    5972:	2200      	movs	r2, #0
    5974:	f884 2101 	strb.w	r2, [r4, #257]	; 0x101
        m_enableTriggerPulseCount = 0;
    5978:	f8c4 2108 	str.w	r2, [r4, #264]	; 0x108
    value = !m_inFault && value;
    597c:	b358      	cbz	r0, 59d6 <_ZN9ClearCore11MotorDriver13EnableRequestEb+0x8e>
    597e:	2100      	movs	r1, #0
  __ASM volatile ("cpsid i" : : : "memory");
    5980:	b672      	cpsid	i
    if (wasDisabled && value) {
    5982:	b36b      	cbz	r3, 59e0 <_ZN9ClearCore11MotorDriver13EnableRequestEb+0x98>
    5984:	b371      	cbz	r1, 59e4 <_ZN9ClearCore11MotorDriver13EnableRequestEb+0x9c>
        m_enableCounter = CPM_ENABLE_DELAY;
    5986:	f240 42e2 	movw	r2, #1250	; 0x4e2
        m_isEnabling = true;
    598a:	2301      	movs	r3, #1
        m_enableCounter = CPM_ENABLE_DELAY;
    598c:	f8c4 2130 	str.w	r2, [r4, #304]	; 0x130
        m_isEnabling = true;
    5990:	f884 312d 	strb.w	r3, [r4, #301]	; 0x12d
  __ASM volatile ("cpsie i" : : : "memory");
    5994:	b662      	cpsie	i
    if (m_mode == Connector::CPM_MODE_STEP_AND_DIR) {
    5996:	79a3      	ldrb	r3, [r4, #6]
    5998:	2b0a      	cmp	r3, #10
    599a:	d02a      	beq.n	59f2 <_ZN9ClearCore11MotorDriver13EnableRequestEb+0xaa>
    if (value != m_shiftRegEnableReq || (wasPulsing && !m_enableTriggerActive)) {
    599c:	f894 313d 	ldrb.w	r3, [r4, #317]	; 0x13d
    59a0:	428b      	cmp	r3, r1
    59a2:	d035      	beq.n	5a10 <_ZN9ClearCore11MotorDriver13EnableRequestEb+0xc8>
        ShiftReg.ShifterState(value, m_enableMask);
    59a4:	f8d4 30a0 	ldr.w	r3, [r4, #160]	; 0xa0
        : ShifterStateClear(bitsToChange);
    59a8:	2900      	cmp	r1, #0
    59aa:	d13b      	bne.n	5a24 <_ZN9ClearCore11MotorDriver13EnableRequestEb+0xdc>
        atomic_and_fetch(&m_patternOutputs[LED_BLINK_IO_SET], ~bitsToClr);
    59ac:	f3bf 8f5b 	dmb	ish
    59b0:	4a2d      	ldr	r2, [pc, #180]	; (5a68 <_ZN9ClearCore11MotorDriver13EnableRequestEb+0x120>)
    59b2:	43db      	mvns	r3, r3
    59b4:	e852 0f00 	ldrex	r0, [r2]
    59b8:	4018      	ands	r0, r3
    59ba:	e842 0500 	strex	r5, r0, [r2]
    59be:	2d00      	cmp	r5, #0
    59c0:	d1f8      	bne.n	59b4 <_ZN9ClearCore11MotorDriver13EnableRequestEb+0x6c>
    59c2:	f3bf 8f5b 	dmb	ish
     m_shiftRegEnableReq = value;
    59c6:	f884 113d 	strb.w	r1, [r4, #317]	; 0x13d
}
    59ca:	b003      	add	sp, #12
    59cc:	bd30      	pop	{r4, r5, pc}
    if (value != m_enableRequestedState || m_inFault) {
    59ce:	f894 2114 	ldrb.w	r2, [r4, #276]	; 0x114
    59d2:	2a00      	cmp	r2, #0
    59d4:	d133      	bne.n	5a3e <_ZN9ClearCore11MotorDriver13EnableRequestEb+0xf6>
    value = !m_inFault && value;
    59d6:	2900      	cmp	r1, #0
    59d8:	d0d1      	beq.n	597e <_ZN9ClearCore11MotorDriver13EnableRequestEb+0x36>
  __ASM volatile ("cpsid i" : : : "memory");
    59da:	b672      	cpsid	i
    if (wasDisabled && value) {
    59dc:	2b00      	cmp	r3, #0
    59de:	d1d1      	bne.n	5984 <_ZN9ClearCore11MotorDriver13EnableRequestEb+0x3c>
    else if (!value) {
    59e0:	2900      	cmp	r1, #0
    59e2:	d1d7      	bne.n	5994 <_ZN9ClearCore11MotorDriver13EnableRequestEb+0x4c>
        m_isEnabled = false;
    59e4:	2300      	movs	r3, #0
    59e6:	f884 312e 	strb.w	r3, [r4, #302]	; 0x12e
  __ASM volatile ("cpsie i" : : : "memory");
    59ea:	b662      	cpsie	i
    if (m_mode == Connector::CPM_MODE_STEP_AND_DIR) {
    59ec:	79a3      	ldrb	r3, [r4, #6]
    59ee:	2b0a      	cmp	r3, #10
    59f0:	d1d4      	bne.n	599c <_ZN9ClearCore11MotorDriver13EnableRequestEb+0x54>
        if (!value && m_statusRegMotor.bit.StepsActive) {
    59f2:	b919      	cbnz	r1, 59fc <_ZN9ClearCore11MotorDriver13EnableRequestEb+0xb4>
    59f4:	f894 3118 	ldrb.w	r3, [r4, #280]	; 0x118
    59f8:	079a      	lsls	r2, r3, #30
    59fa:	d428      	bmi.n	5a4e <_ZN9ClearCore11MotorDriver13EnableRequestEb+0x106>
        if (m_polarityInversions.bit.enableInverted) {
    59fc:	f894 30fc 	ldrb.w	r3, [r4, #252]	; 0xfc
    5a00:	07db      	lsls	r3, r3, #31
    if (value != m_shiftRegEnableReq || (wasPulsing && !m_enableTriggerActive)) {
    5a02:	f894 313d 	ldrb.w	r3, [r4, #317]	; 0x13d
        if (!value && m_statusRegMotor.bit.StepsActive) {
    5a06:	bf48      	it	mi
    5a08:	f081 0101 	eormi.w	r1, r1, #1
    if (value != m_shiftRegEnableReq || (wasPulsing && !m_enableTriggerActive)) {
    5a0c:	428b      	cmp	r3, r1
    5a0e:	d1c9      	bne.n	59a4 <_ZN9ClearCore11MotorDriver13EnableRequestEb+0x5c>
    5a10:	2d00      	cmp	r5, #0
    5a12:	d0d8      	beq.n	59c6 <_ZN9ClearCore11MotorDriver13EnableRequestEb+0x7e>
    5a14:	f894 3101 	ldrb.w	r3, [r4, #257]	; 0x101
    5a18:	2b00      	cmp	r3, #0
    5a1a:	d1d4      	bne.n	59c6 <_ZN9ClearCore11MotorDriver13EnableRequestEb+0x7e>
        ShiftReg.ShifterState(value, m_enableMask);
    5a1c:	f8d4 30a0 	ldr.w	r3, [r4, #160]	; 0xa0
        : ShifterStateClear(bitsToChange);
    5a20:	2900      	cmp	r1, #0
    5a22:	d0c3      	beq.n	59ac <_ZN9ClearCore11MotorDriver13EnableRequestEb+0x64>
        atomic_or_fetch(&m_patternOutputs[LED_BLINK_IO_SET], bitsToSet);
    5a24:	f3bf 8f5b 	dmb	ish
    5a28:	4a0f      	ldr	r2, [pc, #60]	; (5a68 <_ZN9ClearCore11MotorDriver13EnableRequestEb+0x120>)
    5a2a:	e852 0f00 	ldrex	r0, [r2]
    5a2e:	4318      	orrs	r0, r3
    5a30:	e842 0500 	strex	r5, r0, [r2]
    5a34:	2d00      	cmp	r5, #0
    5a36:	d0c4      	beq.n	59c2 <_ZN9ClearCore11MotorDriver13EnableRequestEb+0x7a>
    5a38:	e7f7      	b.n	5a2a <_ZN9ClearCore11MotorDriver13EnableRequestEb+0xe2>
    bool wasDisabled = !(m_isEnabled || m_isEnabling);
    5a3a:	2300      	movs	r3, #0
    5a3c:	e78f      	b.n	595e <_ZN9ClearCore11MotorDriver13EnableRequestEb+0x16>
        m_enableTriggerActive = false;
    5a3e:	2200      	movs	r2, #0
    m_enableRequestedState = value;
    5a40:	f884 1100 	strb.w	r1, [r4, #256]	; 0x100
        m_enableTriggerActive = false;
    5a44:	f884 2101 	strb.w	r2, [r4, #257]	; 0x101
        m_enableTriggerPulseCount = 0;
    5a48:	f8c4 2108 	str.w	r2, [r4, #264]	; 0x108
    5a4c:	e797      	b.n	597e <_ZN9ClearCore11MotorDriver13EnableRequestEb+0x36>
            m_alertRegMotor.bit.MotionCanceledMotorDisabled = 1;
    5a4e:	f894 3128 	ldrb.w	r3, [r4, #296]	; 0x128
    5a52:	9101      	str	r1, [sp, #4]
    5a54:	f043 0310 	orr.w	r3, r3, #16
    5a58:	f884 3128 	strb.w	r3, [r4, #296]	; 0x128
            MoveStopAbrupt();
    5a5c:	f104 0030 	add.w	r0, r4, #48	; 0x30
    5a60:	f006 fec2 	bl	c7e8 <_ZN9ClearCore13StepGenerator14MoveStopAbruptEv>
    5a64:	9901      	ldr	r1, [sp, #4]
    5a66:	e7c9      	b.n	59fc <_ZN9ClearCore11MotorDriver13EnableRequestEb+0xb4>
    5a68:	20001bf4 	.word	0x20001bf4

00005a6c <_ZN9ClearCore11MotorDriver11RefreshSlowEv>:
}

void MotorDriver::RefreshSlow() {
    if (!m_initialized) {
    5a6c:	f890 312c 	ldrb.w	r3, [r0, #300]	; 0x12c
    5a70:	2b00      	cmp	r3, #0
    5a72:	d04a      	beq.n	5b0a <_ZN9ClearCore11MotorDriver11RefreshSlowEv+0x9e>
        return;
    }

    uint32_t currentTimeMs = TimingMgr.Milliseconds();
    5a74:	4a35      	ldr	r2, [pc, #212]	; (5b4c <_ZN9ClearCore11MotorDriver11RefreshSlowEv+0xe0>)
    if (m_enableTriggerActive &&
    5a76:	f890 3101 	ldrb.w	r3, [r0, #257]	; 0x101
    uint32_t currentTimeMs = TimingMgr.Milliseconds();
    5a7a:	6812      	ldr	r2, [r2, #0]
void MotorDriver::RefreshSlow() {
    5a7c:	b500      	push	{lr}
    uint32_t currentTimeMs = TimingMgr.Milliseconds();
    5a7e:	6912      	ldr	r2, [r2, #16]
    if (m_enableTriggerActive &&
    5a80:	b98b      	cbnz	r3, 5aa6 <_ZN9ClearCore11MotorDriver11RefreshSlowEv+0x3a>
        else {
            ToggleEnable();
        }
    }

    switch (m_clearFaultState) {
    5a82:	f890 313e 	ldrb.w	r3, [r0, #318]	; 0x13e
    5a86:	2b01      	cmp	r3, #1
    5a88:	d022      	beq.n	5ad0 <_ZN9ClearCore11MotorDriver11RefreshSlowEv+0x64>
    5a8a:	2b02      	cmp	r3, #2
    5a8c:	d13b      	bne.n	5b06 <_ZN9ClearCore11MotorDriver11RefreshSlowEv+0x9a>
                break;
            }
            m_clearFaultState = CLEAR_FAULT_WAIT_FOR_HLFB;
            // Fall through
        case CLEAR_FAULT_WAIT_FOR_HLFB:
            if (m_hlfbState != HLFB_DEASSERTED) {
    5a8e:	f890 30f4 	ldrb.w	r3, [r0, #244]	; 0xf4
    5a92:	2b00      	cmp	r3, #0
    5a94:	d145      	bne.n	5b22 <_ZN9ClearCore11MotorDriver11RefreshSlowEv+0xb6>
                AlertRegMotor mask;
                mask.bit.MotorFaulted = 1;
                ClearAlerts(mask.reg);
                m_clearFaultState = CLEAR_FAULT_IDLE;
            }
            else if (!(m_clearFaultHlfbTimer && m_clearFaultHlfbTimer--)) {
    5a96:	f8d0 3140 	ldr.w	r3, [r0, #320]	; 0x140
    5a9a:	2b00      	cmp	r3, #0
    5a9c:	d13c      	bne.n	5b18 <_ZN9ClearCore11MotorDriver11RefreshSlowEv+0xac>
                m_clearFaultState = CLEAR_FAULT_IDLE;
    5a9e:	f880 313e 	strb.w	r3, [r0, #318]	; 0x13e
    5aa2:	f85d fb04 	ldr.w	pc, [sp], #4
            (currentTimeMs - m_enableTriggerPulseStartMs >=
    5aa6:	f8d0 3104 	ldr.w	r3, [r0, #260]	; 0x104
    if (m_enableTriggerActive &&
    5aaa:	f8d0 110c 	ldr.w	r1, [r0, #268]	; 0x10c
            (currentTimeMs - m_enableTriggerPulseStartMs >=
    5aae:	1ad3      	subs	r3, r2, r3
    if (m_enableTriggerActive &&
    5ab0:	428b      	cmp	r3, r1
    5ab2:	d32b      	bcc.n	5b0c <_ZN9ClearCore11MotorDriver11RefreshSlowEv+0xa0>
        if (!--m_enableTriggerPulseCount) {
    5ab4:	f8d0 3108 	ldr.w	r3, [r0, #264]	; 0x108
        m_enableTriggerPulseStartMs = currentTimeMs;
    5ab8:	f8c0 2104 	str.w	r2, [r0, #260]	; 0x104
        if (!--m_enableTriggerPulseCount) {
    5abc:	3b01      	subs	r3, #1
    5abe:	f8c0 3108 	str.w	r3, [r0, #264]	; 0x108
    5ac2:	b94b      	cbnz	r3, 5ad8 <_ZN9ClearCore11MotorDriver11RefreshSlowEv+0x6c>
            m_enableTriggerActive = false;
    5ac4:	f880 3101 	strb.w	r3, [r0, #257]	; 0x101
    switch (m_clearFaultState) {
    5ac8:	f890 313e 	ldrb.w	r3, [r0, #318]	; 0x13e
    5acc:	2b01      	cmp	r3, #1
    5ace:	d1dc      	bne.n	5a8a <_ZN9ClearCore11MotorDriver11RefreshSlowEv+0x1e>
            m_clearFaultState = CLEAR_FAULT_WAIT_FOR_HLFB;
    5ad0:	2302      	movs	r3, #2
    5ad2:	f880 313e 	strb.w	r3, [r0, #318]	; 0x13e
    5ad6:	e7da      	b.n	5a8e <_ZN9ClearCore11MotorDriver11RefreshSlowEv+0x22>
        atomic_xor_fetch(&m_patternOutputs[LED_BLINK_IO_SET], fldsToToggle.reg);
    5ad8:	4b1d      	ldr	r3, [pc, #116]	; (5b50 <_ZN9ClearCore11MotorDriver11RefreshSlowEv+0xe4>)
    5ada:	f8d0 20a0 	ldr.w	r2, [r0, #160]	; 0xa0
    5ade:	f3bf 8f5b 	dmb	ish
    5ae2:	e853 1f00 	ldrex	r1, [r3]
    5ae6:	4051      	eors	r1, r2
    5ae8:	e843 1e00 	strex	lr, r1, [r3]
    5aec:	f1be 0f00 	cmp.w	lr, #0
    5af0:	d1f7      	bne.n	5ae2 <_ZN9ClearCore11MotorDriver11RefreshSlowEv+0x76>
    5af2:	f3bf 8f5b 	dmb	ish
    switch (m_clearFaultState) {
    5af6:	f890 313e 	ldrb.w	r3, [r0, #318]	; 0x13e
    5afa:	2b01      	cmp	r3, #1
    5afc:	d1c5      	bne.n	5a8a <_ZN9ClearCore11MotorDriver11RefreshSlowEv+0x1e>
            if (m_enableTriggerActive) {
    5afe:	f890 3101 	ldrb.w	r3, [r0, #257]	; 0x101
    5b02:	2b00      	cmp	r3, #0
    5b04:	d0e4      	beq.n	5ad0 <_ZN9ClearCore11MotorDriver11RefreshSlowEv+0x64>
    5b06:	f85d fb04 	ldr.w	pc, [sp], #4
    5b0a:	4770      	bx	lr
    switch (m_clearFaultState) {
    5b0c:	f890 313e 	ldrb.w	r3, [r0, #318]	; 0x13e
    5b10:	2b02      	cmp	r3, #2
    5b12:	d0bc      	beq.n	5a8e <_ZN9ClearCore11MotorDriver11RefreshSlowEv+0x22>
    5b14:	f85d fb04 	ldr.w	pc, [sp], #4
            else if (!(m_clearFaultHlfbTimer && m_clearFaultHlfbTimer--)) {
    5b18:	3b01      	subs	r3, #1
    5b1a:	f8c0 3140 	str.w	r3, [r0, #320]	; 0x140
    5b1e:	f85d fb04 	ldr.w	pc, [sp], #4
            reg = 0;
    5b22:	2200      	movs	r2, #0
        atomic_and_fetch(&m_alertRegMotor.reg, ~mask);
    5b24:	f500 7394 	add.w	r3, r0, #296	; 0x128
    5b28:	f3bf 8f5b 	dmb	ish
    5b2c:	e853 1f00 	ldrex	r1, [r3]
    5b30:	f021 0120 	bic.w	r1, r1, #32
    5b34:	e843 1e00 	strex	lr, r1, [r3]
    5b38:	f1be 0f00 	cmp.w	lr, #0
    5b3c:	d1f6      	bne.n	5b2c <_ZN9ClearCore11MotorDriver11RefreshSlowEv+0xc0>
    5b3e:	f3bf 8f5b 	dmb	ish
                m_clearFaultState = CLEAR_FAULT_IDLE;
    5b42:	f880 213e 	strb.w	r2, [r0, #318]	; 0x13e
    5b46:	f85d fb04 	ldr.w	pc, [sp], #4
    5b4a:	bf00      	nop
    5b4c:	20001d20 	.word	0x20001d20
    5b50:	20001bf4 	.word	0x20001bf4

00005b54 <_ZN9ClearCore11MotorDriver10FaultStateEb>:
    bool wasDisabled = !(m_isEnabled || m_isEnabling);
    5b54:	f890 312e 	ldrb.w	r3, [r0, #302]	; 0x12e
        default:
            break;
    }
}

void MotorDriver::FaultState(bool isFaulted) {
    5b58:	b570      	push	{r4, r5, r6, lr}
    5b5a:	4604      	mov	r4, r0
    m_inFault = isFaulted;
    5b5c:	f880 1114 	strb.w	r1, [r0, #276]	; 0x114
    bool wasDisabled = !(m_isEnabled || m_isEnabling);
    5b60:	2b00      	cmp	r3, #0
    5b62:	d163      	bne.n	5c2c <_ZN9ClearCore11MotorDriver10FaultStateEb+0xd8>
    5b64:	f890 312d 	ldrb.w	r3, [r0, #301]	; 0x12d
    5b68:	f083 0301 	eor.w	r3, r3, #1
    bool wasPulsing = m_enableTriggerActive;
    5b6c:	f894 6101 	ldrb.w	r6, [r4, #257]	; 0x101
    if (value != m_enableRequestedState || m_inFault) {
    5b70:	bb39      	cbnz	r1, 5bc2 <_ZN9ClearCore11MotorDriver10FaultStateEb+0x6e>
    // Let EnableRequest handle the fault condition logic
    EnableRequest(m_enableRequestedState);
    5b72:	f894 5100 	ldrb.w	r5, [r4, #256]	; 0x100
  __ASM volatile ("cpsid i" : : : "memory");
    5b76:	b672      	cpsid	i
    if (wasDisabled && value) {
    5b78:	b35b      	cbz	r3, 5bd2 <_ZN9ClearCore11MotorDriver10FaultStateEb+0x7e>
    5b7a:	b365      	cbz	r5, 5bd6 <_ZN9ClearCore11MotorDriver10FaultStateEb+0x82>
        m_enableCounter = CPM_ENABLE_DELAY;
    5b7c:	f240 42e2 	movw	r2, #1250	; 0x4e2
        m_isEnabling = true;
    5b80:	2301      	movs	r3, #1
        m_enableCounter = CPM_ENABLE_DELAY;
    5b82:	f8c4 2130 	str.w	r2, [r4, #304]	; 0x130
        m_isEnabling = true;
    5b86:	f884 312d 	strb.w	r3, [r4, #301]	; 0x12d
  __ASM volatile ("cpsie i" : : : "memory");
    5b8a:	b662      	cpsie	i
    if (m_mode == Connector::CPM_MODE_STEP_AND_DIR) {
    5b8c:	79a3      	ldrb	r3, [r4, #6]
    5b8e:	2b0a      	cmp	r3, #10
    5b90:	d028      	beq.n	5be4 <_ZN9ClearCore11MotorDriver10FaultStateEb+0x90>
    if (value != m_shiftRegEnableReq || (wasPulsing && !m_enableTriggerActive)) {
    5b92:	f894 313d 	ldrb.w	r3, [r4, #317]	; 0x13d
    5b96:	42ab      	cmp	r3, r5
    5b98:	d033      	beq.n	5c02 <_ZN9ClearCore11MotorDriver10FaultStateEb+0xae>
        ShiftReg.ShifterState(value, m_enableMask);
    5b9a:	f8d4 30a0 	ldr.w	r3, [r4, #160]	; 0xa0
        : ShifterStateClear(bitsToChange);
    5b9e:	2d00      	cmp	r5, #0
    5ba0:	d139      	bne.n	5c16 <_ZN9ClearCore11MotorDriver10FaultStateEb+0xc2>
        atomic_and_fetch(&m_patternOutputs[LED_BLINK_IO_SET], ~bitsToClr);
    5ba2:	f3bf 8f5b 	dmb	ish
    5ba6:	4a28      	ldr	r2, [pc, #160]	; (5c48 <_ZN9ClearCore11MotorDriver10FaultStateEb+0xf4>)
    5ba8:	43db      	mvns	r3, r3
    5baa:	e852 1f00 	ldrex	r1, [r2]
    5bae:	4019      	ands	r1, r3
    5bb0:	e842 1000 	strex	r0, r1, [r2]
    5bb4:	2800      	cmp	r0, #0
    5bb6:	d1f8      	bne.n	5baa <_ZN9ClearCore11MotorDriver10FaultStateEb+0x56>
    5bb8:	f3bf 8f5b 	dmb	ish
     m_shiftRegEnableReq = value;
    5bbc:	f884 513d 	strb.w	r5, [r4, #317]	; 0x13d
    5bc0:	bd70      	pop	{r4, r5, r6, pc}
        m_enableTriggerActive = false;
    5bc2:	2500      	movs	r5, #0
    5bc4:	f884 5101 	strb.w	r5, [r4, #257]	; 0x101
        m_enableTriggerPulseCount = 0;
    5bc8:	f8c4 5108 	str.w	r5, [r4, #264]	; 0x108
  __ASM volatile ("cpsid i" : : : "memory");
    5bcc:	b672      	cpsid	i
    if (wasDisabled && value) {
    5bce:	2b00      	cmp	r3, #0
    5bd0:	d1d3      	bne.n	5b7a <_ZN9ClearCore11MotorDriver10FaultStateEb+0x26>
    else if (!value) {
    5bd2:	2d00      	cmp	r5, #0
    5bd4:	d1d9      	bne.n	5b8a <_ZN9ClearCore11MotorDriver10FaultStateEb+0x36>
        m_isEnabled = false;
    5bd6:	2300      	movs	r3, #0
    5bd8:	f884 312e 	strb.w	r3, [r4, #302]	; 0x12e
  __ASM volatile ("cpsie i" : : : "memory");
    5bdc:	b662      	cpsie	i
    if (m_mode == Connector::CPM_MODE_STEP_AND_DIR) {
    5bde:	79a3      	ldrb	r3, [r4, #6]
    5be0:	2b0a      	cmp	r3, #10
    5be2:	d1d6      	bne.n	5b92 <_ZN9ClearCore11MotorDriver10FaultStateEb+0x3e>
        if (!value && m_statusRegMotor.bit.StepsActive) {
    5be4:	b91d      	cbnz	r5, 5bee <_ZN9ClearCore11MotorDriver10FaultStateEb+0x9a>
    5be6:	f894 3118 	ldrb.w	r3, [r4, #280]	; 0x118
    5bea:	079a      	lsls	r2, r3, #30
    5bec:	d420      	bmi.n	5c30 <_ZN9ClearCore11MotorDriver10FaultStateEb+0xdc>
        if (m_polarityInversions.bit.enableInverted) {
    5bee:	f894 30fc 	ldrb.w	r3, [r4, #252]	; 0xfc
    5bf2:	07db      	lsls	r3, r3, #31
    if (value != m_shiftRegEnableReq || (wasPulsing && !m_enableTriggerActive)) {
    5bf4:	f894 313d 	ldrb.w	r3, [r4, #317]	; 0x13d
        if (!value && m_statusRegMotor.bit.StepsActive) {
    5bf8:	bf48      	it	mi
    5bfa:	f085 0501 	eormi.w	r5, r5, #1
    if (value != m_shiftRegEnableReq || (wasPulsing && !m_enableTriggerActive)) {
    5bfe:	42ab      	cmp	r3, r5
    5c00:	d1cb      	bne.n	5b9a <_ZN9ClearCore11MotorDriver10FaultStateEb+0x46>
    5c02:	2e00      	cmp	r6, #0
    5c04:	d0da      	beq.n	5bbc <_ZN9ClearCore11MotorDriver10FaultStateEb+0x68>
    5c06:	f894 3101 	ldrb.w	r3, [r4, #257]	; 0x101
    5c0a:	2b00      	cmp	r3, #0
    5c0c:	d1d6      	bne.n	5bbc <_ZN9ClearCore11MotorDriver10FaultStateEb+0x68>
        ShiftReg.ShifterState(value, m_enableMask);
    5c0e:	f8d4 30a0 	ldr.w	r3, [r4, #160]	; 0xa0
        : ShifterStateClear(bitsToChange);
    5c12:	2d00      	cmp	r5, #0
    5c14:	d0c5      	beq.n	5ba2 <_ZN9ClearCore11MotorDriver10FaultStateEb+0x4e>
        atomic_or_fetch(&m_patternOutputs[LED_BLINK_IO_SET], bitsToSet);
    5c16:	f3bf 8f5b 	dmb	ish
    5c1a:	4a0b      	ldr	r2, [pc, #44]	; (5c48 <_ZN9ClearCore11MotorDriver10FaultStateEb+0xf4>)
    5c1c:	e852 1f00 	ldrex	r1, [r2]
    5c20:	4319      	orrs	r1, r3
    5c22:	e842 1000 	strex	r0, r1, [r2]
    5c26:	2800      	cmp	r0, #0
    5c28:	d0c6      	beq.n	5bb8 <_ZN9ClearCore11MotorDriver10FaultStateEb+0x64>
    5c2a:	e7f7      	b.n	5c1c <_ZN9ClearCore11MotorDriver10FaultStateEb+0xc8>
    bool wasDisabled = !(m_isEnabled || m_isEnabling);
    5c2c:	2300      	movs	r3, #0
    5c2e:	e79d      	b.n	5b6c <_ZN9ClearCore11MotorDriver10FaultStateEb+0x18>
            m_alertRegMotor.bit.MotionCanceledMotorDisabled = 1;
    5c30:	f894 3128 	ldrb.w	r3, [r4, #296]	; 0x128
    5c34:	f043 0310 	orr.w	r3, r3, #16
    5c38:	f884 3128 	strb.w	r3, [r4, #296]	; 0x128
            MoveStopAbrupt();
    5c3c:	f104 0030 	add.w	r0, r4, #48	; 0x30
    5c40:	f006 fdd2 	bl	c7e8 <_ZN9ClearCore13StepGenerator14MoveStopAbruptEv>
    5c44:	e7d3      	b.n	5bee <_ZN9ClearCore11MotorDriver10FaultStateEb+0x9a>
    5c46:	bf00      	nop
    5c48:	20001bf4 	.word	0x20001bf4
    5c4c:	00000000 	.word	0x00000000

00005c50 <_ZN9ClearCore11MotorDriver7RefreshEv>:
void MotorDriver::Refresh() {
    5c50:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    if (!m_initialized) {
    5c52:	f890 312c 	ldrb.w	r3, [r0, #300]	; 0x12c
    5c56:	b903      	cbnz	r3, 5c5a <_ZN9ClearCore11MotorDriver7RefreshEv+0xa>
    5c58:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    5c5a:	4604      	mov	r4, r0
    DigitalIn::Refresh();
    5c5c:	f7ff f9fa 	bl	5054 <_ZN9ClearCore9DigitalIn7RefreshEv>
    bool invert = (m_mode == CPM_MODE_STEP_AND_DIR) &&
    5c60:	79a3      	ldrb	r3, [r4, #6]
    TcCount16 *tcCount = &tc_modules[m_hlfbTcNum]->COUNT16;
    5c62:	4a98      	ldr	r2, [pc, #608]	; (5ec4 <_ZN9ClearCore11MotorDriver7RefreshEv+0x274>)
    5c64:	f894 10d6 	ldrb.w	r1, [r4, #214]	; 0xd6
    bool invert = (m_mode == CPM_MODE_STEP_AND_DIR) &&
    5c68:	2b0a      	cmp	r3, #10
    5c6a:	bf08      	it	eq
    5c6c:	f894 30fc 	ldrbeq.w	r3, [r4, #252]	; 0xfc
    TcCount16 *tcCount = &tc_modules[m_hlfbTcNum]->COUNT16;
    5c70:	f852 7021 	ldr.w	r7, [r2, r1, lsl #2]
    bool invert = (m_mode == CPM_MODE_STEP_AND_DIR) &&
    5c74:	bf08      	it	eq
    5c76:	f3c3 0680 	ubfxeq	r6, r3, #2, #1
    switch (m_hlfbMode) {
    5c7a:	f894 30d8 	ldrb.w	r3, [r4, #216]	; 0xd8
    uint8_t intFlagReg = tcCount->INTFLAG.reg;
    5c7e:	7abd      	ldrb	r5, [r7, #10]
    switch (m_hlfbMode) {
    5c80:	f103 33ff 	add.w	r3, r3, #4294967295
    bool invert = (m_mode == CPM_MODE_STEP_AND_DIR) &&
    5c84:	bf18      	it	ne
    5c86:	2600      	movne	r6, #0
    switch (m_hlfbMode) {
    5c88:	2b01      	cmp	r3, #1
    uint8_t intFlagReg = tcCount->INTFLAG.reg;
    5c8a:	b2ed      	uxtb	r5, r5
    switch (m_hlfbMode) {
    5c8c:	f240 80df 	bls.w	5e4e <_ZN9ClearCore11MotorDriver7RefreshEv+0x1fe>
    5c90:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
    5c94:	4073      	eors	r3, r6
            m_hlfbDuty = HLFB_DUTY_UNKNOWN;
    5c96:	4a8c      	ldr	r2, [pc, #560]	; (5ec8 <_ZN9ClearCore11MotorDriver7RefreshEv+0x278>)
            m_hlfbState = (DigitalIn::m_stateFiltered ^ invert) ?
    5c98:	f884 30f4 	strb.w	r3, [r4, #244]	; 0xf4
            m_hlfbDuty = HLFB_DUTY_UNKNOWN;
    5c9c:	f8c4 20f0 	str.w	r2, [r4, #240]	; 0xf0
    if (m_enableConnector != CLEARCORE_PIN_INVALID) {
    5ca0:	f9b4 10d0 	ldrsh.w	r1, [r4, #208]	; 0xd0
    5ca4:	1c48      	adds	r0, r1, #1
    5ca6:	d012      	beq.n	5cce <_ZN9ClearCore11MotorDriver7RefreshEv+0x7e>
        Connector *input= SysMgr.ConnectorByIndex(m_enableConnector);
    5ca8:	4888      	ldr	r0, [pc, #544]	; (5ecc <_ZN9ClearCore11MotorDriver7RefreshEv+0x27c>)
    5caa:	f004 f847 	bl	9d3c <_ZN9ClearCore10SysManager16ConnectorByIndexE13ClearCorePins>
        if (input->Type() == ClearCore::Connector::CCIO_DIGITAL_IN_OUT_TYPE) {
    5cae:	6803      	ldr	r3, [r0, #0]
    5cb0:	689b      	ldr	r3, [r3, #8]
        Connector *input= SysMgr.ConnectorByIndex(m_enableConnector);
    5cb2:	4605      	mov	r5, r0
        if (input->Type() == ClearCore::Connector::CCIO_DIGITAL_IN_OUT_TYPE) {
    5cb4:	4798      	blx	r3
    5cb6:	2809      	cmp	r0, #9
    5cb8:	f000 8248 	beq.w	614c <_ZN9ClearCore11MotorDriver7RefreshEv+0x4fc>
            EnableRequest(enableIn->DigitalIn::State());
    5cbc:	4628      	mov	r0, r5
    5cbe:	f7ff f94f 	bl	4f60 <_ZN9ClearCore9DigitalIn5StateEv>
    5cc2:	1c01      	adds	r1, r0, #0
    5cc4:	bf18      	it	ne
    5cc6:	2101      	movne	r1, #1
    5cc8:	4620      	mov	r0, r4
    5cca:	f7ff fe3d 	bl	5948 <_ZN9ClearCore11MotorDriver13EnableRequestEb>
    if (m_inputAConnector != CLEARCORE_PIN_INVALID && m_mode != CPM_MODE_STEP_AND_DIR) {
    5cce:	f9b4 10d2 	ldrsh.w	r1, [r4, #210]	; 0xd2
    5cd2:	1c4a      	adds	r2, r1, #1
    5cd4:	d016      	beq.n	5d04 <_ZN9ClearCore11MotorDriver7RefreshEv+0xb4>
    5cd6:	79a3      	ldrb	r3, [r4, #6]
    5cd8:	2b0a      	cmp	r3, #10
    5cda:	d039      	beq.n	5d50 <_ZN9ClearCore11MotorDriver7RefreshEv+0x100>
        Connector *input= SysMgr.ConnectorByIndex(m_inputAConnector);
    5cdc:	487b      	ldr	r0, [pc, #492]	; (5ecc <_ZN9ClearCore11MotorDriver7RefreshEv+0x27c>)
    5cde:	f004 f82d 	bl	9d3c <_ZN9ClearCore10SysManager16ConnectorByIndexE13ClearCorePins>
        if (input->Type() == ClearCore::Connector::CCIO_DIGITAL_IN_OUT_TYPE) {
    5ce2:	6803      	ldr	r3, [r0, #0]
    5ce4:	689b      	ldr	r3, [r3, #8]
        Connector *input= SysMgr.ConnectorByIndex(m_inputAConnector);
    5ce6:	4605      	mov	r5, r0
        if (input->Type() == ClearCore::Connector::CCIO_DIGITAL_IN_OUT_TYPE) {
    5ce8:	4798      	blx	r3
    5cea:	2809      	cmp	r0, #9
    5cec:	f000 80d0 	beq.w	5e90 <_ZN9ClearCore11MotorDriver7RefreshEv+0x240>
            MotorInAState(inputA->DigitalIn::State());
    5cf0:	4628      	mov	r0, r5
    5cf2:	f7ff f935 	bl	4f60 <_ZN9ClearCore9DigitalIn5StateEv>
    switch (m_mode) {
    5cf6:	79a3      	ldrb	r3, [r4, #6]
    5cf8:	2b09      	cmp	r3, #9
    5cfa:	f000 80d3 	beq.w	5ea4 <_ZN9ClearCore11MotorDriver7RefreshEv+0x254>
    5cfe:	2b0b      	cmp	r3, #11
    5d00:	f000 80d0 	beq.w	5ea4 <_ZN9ClearCore11MotorDriver7RefreshEv+0x254>
    if (m_inputBConnector != CLEARCORE_PIN_INVALID && m_mode != CPM_MODE_STEP_AND_DIR) {
    5d04:	f9b4 10d4 	ldrsh.w	r1, [r4, #212]	; 0xd4
    5d08:	1c4b      	adds	r3, r1, #1
    5d0a:	d021      	beq.n	5d50 <_ZN9ClearCore11MotorDriver7RefreshEv+0x100>
    5d0c:	79a3      	ldrb	r3, [r4, #6]
    5d0e:	2b0a      	cmp	r3, #10
    5d10:	d01e      	beq.n	5d50 <_ZN9ClearCore11MotorDriver7RefreshEv+0x100>
        Connector *input= SysMgr.ConnectorByIndex(m_inputBConnector);
    5d12:	486e      	ldr	r0, [pc, #440]	; (5ecc <_ZN9ClearCore11MotorDriver7RefreshEv+0x27c>)
    5d14:	f004 f812 	bl	9d3c <_ZN9ClearCore10SysManager16ConnectorByIndexE13ClearCorePins>
        if (input->Type() == ClearCore::Connector::CCIO_DIGITAL_IN_OUT_TYPE) {
    5d18:	6803      	ldr	r3, [r0, #0]
    5d1a:	689b      	ldr	r3, [r3, #8]
        Connector *input= SysMgr.ConnectorByIndex(m_inputBConnector);
    5d1c:	4605      	mov	r5, r0
        if (input->Type() == ClearCore::Connector::CCIO_DIGITAL_IN_OUT_TYPE) {
    5d1e:	4798      	blx	r3
    5d20:	2809      	cmp	r0, #9
    5d22:	f000 8239 	beq.w	6198 <_ZN9ClearCore11MotorDriver7RefreshEv+0x548>
            MotorInBState(inputB->DigitalIn::State());
    5d26:	4628      	mov	r0, r5
    5d28:	f7ff f91a 	bl	4f60 <_ZN9ClearCore9DigitalIn5StateEv>
    switch (m_mode) {
    5d2c:	79a3      	ldrb	r3, [r4, #6]
    5d2e:	2b09      	cmp	r3, #9
    5d30:	d10e      	bne.n	5d50 <_ZN9ClearCore11MotorDriver7RefreshEv+0x100>
            DATA_OUTPUT_STATE(m_bInfo->gpioPort, m_bDataMask, !value);
    5d32:	f8d4 30a8 	ldr.w	r3, [r4, #168]	; 0xa8
    5d36:	f8d4 20b8 	ldr.w	r2, [r4, #184]	; 0xb8
    5d3a:	f993 3001 	ldrsb.w	r3, [r3, #1]
    5d3e:	01db      	lsls	r3, r3, #7
    5d40:	f103 4382 	add.w	r3, r3, #1090519040	; 0x41000000
    5d44:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
    5d48:	2800      	cmp	r0, #0
    5d4a:	f000 81d4 	beq.w	60f6 <_ZN9ClearCore11MotorDriver7RefreshEv+0x4a6>
    5d4e:	615a      	str	r2, [r3, #20]
    if (m_brakeOutputPin != CLEARCORE_PIN_INVALID) {
    5d50:	f9b4 1134 	ldrsh.w	r1, [r4, #308]	; 0x134
    5d54:	1c4f      	adds	r7, r1, #1
    5d56:	d010      	beq.n	5d7a <_ZN9ClearCore11MotorDriver7RefreshEv+0x12a>
        Connector *brakeOutput = SysMgr.ConnectorByIndex(m_brakeOutputPin);
    5d58:	485c      	ldr	r0, [pc, #368]	; (5ecc <_ZN9ClearCore11MotorDriver7RefreshEv+0x27c>)
    5d5a:	f003 ffef 	bl	9d3c <_ZN9ClearCore10SysManager16ConnectorByIndexE13ClearCorePins>
        if (brakeOutput->Type() == CCIO_DIGITAL_IN_OUT_TYPE ||
    5d5e:	6803      	ldr	r3, [r0, #0]
    5d60:	689b      	ldr	r3, [r3, #8]
        Connector *brakeOutput = SysMgr.ConnectorByIndex(m_brakeOutputPin);
    5d62:	4605      	mov	r5, r0
        if (brakeOutput->Type() == CCIO_DIGITAL_IN_OUT_TYPE ||
    5d64:	4798      	blx	r3
    5d66:	2809      	cmp	r0, #9
    5d68:	f000 817d 	beq.w	6066 <_ZN9ClearCore11MotorDriver7RefreshEv+0x416>
        brakeOutput->Mode() == ConnectorModes::OUTPUT_DIGITAL) {
    5d6c:	682b      	ldr	r3, [r5, #0]
    5d6e:	4628      	mov	r0, r5
    5d70:	681b      	ldr	r3, [r3, #0]
    5d72:	4798      	blx	r3
        if (brakeOutput->Type() == CCIO_DIGITAL_IN_OUT_TYPE ||
    5d74:	2804      	cmp	r0, #4
    5d76:	f000 8176 	beq.w	6066 <_ZN9ClearCore11MotorDriver7RefreshEv+0x416>
    if (m_limitSwitchPos != CLEARCORE_PIN_INVALID) {
    5d7a:	f9b4 1138 	ldrsh.w	r1, [r4, #312]	; 0x138
    5d7e:	1c4e      	adds	r6, r1, #1
    5d80:	d015      	beq.n	5dae <_ZN9ClearCore11MotorDriver7RefreshEv+0x15e>
        Connector *input = SysMgr.ConnectorByIndex(m_limitSwitchPos);
    5d82:	4852      	ldr	r0, [pc, #328]	; (5ecc <_ZN9ClearCore11MotorDriver7RefreshEv+0x27c>)
    5d84:	f003 ffda 	bl	9d3c <_ZN9ClearCore10SysManager16ConnectorByIndexE13ClearCorePins>
        if (input->Type() == CCIO_DIGITAL_IN_OUT_TYPE) {
    5d88:	6803      	ldr	r3, [r0, #0]
    5d8a:	689b      	ldr	r3, [r3, #8]
        Connector *input = SysMgr.ConnectorByIndex(m_limitSwitchPos);
    5d8c:	4605      	mov	r5, r0
        if (input->Type() == CCIO_DIGITAL_IN_OUT_TYPE) {
    5d8e:	4798      	blx	r3
    5d90:	2809      	cmp	r0, #9
    5d92:	f000 81e6 	beq.w	6162 <_ZN9ClearCore11MotorDriver7RefreshEv+0x512>
            PosLimitActive(!inputB->DigitalIn::State());
    5d96:	4628      	mov	r0, r5
    5d98:	f7ff f8e2 	bl	4f60 <_ZN9ClearCore9DigitalIn5StateEv>

        bool CheckTravelLimits();

        void PosLimitActive(bool isActive)
        {
            m_limitInfo.InPosHWLimit = isActive;
    5d9c:	f894 3040 	ldrb.w	r3, [r4, #64]	; 0x40
    5da0:	fab0 f080 	clz	r0, r0
    5da4:	0940      	lsrs	r0, r0, #5
    5da6:	f360 03c3 	bfi	r3, r0, #3, #1
    5daa:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
    if (m_limitSwitchNeg != CLEARCORE_PIN_INVALID) {
    5dae:	f9b4 1136 	ldrsh.w	r1, [r4, #310]	; 0x136
    5db2:	1c4d      	adds	r5, r1, #1
    5db4:	d015      	beq.n	5de2 <_ZN9ClearCore11MotorDriver7RefreshEv+0x192>
        Connector *input = SysMgr.ConnectorByIndex(m_limitSwitchNeg);
    5db6:	4845      	ldr	r0, [pc, #276]	; (5ecc <_ZN9ClearCore11MotorDriver7RefreshEv+0x27c>)
    5db8:	f003 ffc0 	bl	9d3c <_ZN9ClearCore10SysManager16ConnectorByIndexE13ClearCorePins>
        if (input->Type() == CCIO_DIGITAL_IN_OUT_TYPE) {
    5dbc:	6803      	ldr	r3, [r0, #0]
    5dbe:	689b      	ldr	r3, [r3, #8]
        Connector *input = SysMgr.ConnectorByIndex(m_limitSwitchNeg);
    5dc0:	4605      	mov	r5, r0
        if (input->Type() == CCIO_DIGITAL_IN_OUT_TYPE) {
    5dc2:	4798      	blx	r3
    5dc4:	2809      	cmp	r0, #9
    5dc6:	f000 81d1 	beq.w	616c <_ZN9ClearCore11MotorDriver7RefreshEv+0x51c>
            NegLimitActive(!inputB->DigitalIn::State());
    5dca:	4628      	mov	r0, r5
    5dcc:	f7ff f8c8 	bl	4f60 <_ZN9ClearCore9DigitalIn5StateEv>
        }

        void NegLimitActive(bool isActive)
        {
            m_limitInfo.InNegHWLimit = isActive;
    5dd0:	f894 3040 	ldrb.w	r3, [r4, #64]	; 0x40
    5dd4:	fab0 f080 	clz	r0, r0
    5dd8:	0940      	lsrs	r0, r0, #5
    5dda:	f360 1304 	bfi	r3, r0, #4, #1
    5dde:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
           (pin >= CLEARCORE_PIN_CCIOA0 && pin <= CLEARCORE_PIN_CCIOH7);
}

bool MotorDriver::CheckEStopSensor() {
    bool eStop = false;
    if (m_eStopConnector != CLEARCORE_PIN_INVALID) {
    5de2:	f9b4 113a 	ldrsh.w	r1, [r4, #314]	; 0x13a
    StatusRegMotor statusRegPending = m_statusRegMotor;
    5de6:	f8d4 5118 	ldr.w	r5, [r4, #280]	; 0x118
    AlertRegMotor alertRegPending = m_alertRegMotor;
    5dea:	f8d4 6128 	ldr.w	r6, [r4, #296]	; 0x128
    if (m_eStopConnector != CLEARCORE_PIN_INVALID) {
    5dee:	1c48      	adds	r0, r1, #1
    5df0:	f000 8132 	beq.w	6058 <_ZN9ClearCore11MotorDriver7RefreshEv+0x408>
        Connector *input = SysMgr.ConnectorByIndex(m_eStopConnector);
    5df4:	4835      	ldr	r0, [pc, #212]	; (5ecc <_ZN9ClearCore11MotorDriver7RefreshEv+0x27c>)
    5df6:	f003 ffa1 	bl	9d3c <_ZN9ClearCore10SysManager16ConnectorByIndexE13ClearCorePins>
        if (input->Type() == ClearCore::Connector::CCIO_DIGITAL_IN_OUT_TYPE) {
    5dfa:	6803      	ldr	r3, [r0, #0]
    5dfc:	689b      	ldr	r3, [r3, #8]
        Connector *input = SysMgr.ConnectorByIndex(m_eStopConnector);
    5dfe:	4607      	mov	r7, r0
        if (input->Type() == ClearCore::Connector::CCIO_DIGITAL_IN_OUT_TYPE) {
    5e00:	4798      	blx	r3
    5e02:	2809      	cmp	r0, #9
    5e04:	f000 81c0 	beq.w	6188 <_ZN9ClearCore11MotorDriver7RefreshEv+0x538>
            eStop = !(input->State());
        }
        else {
            DigitalIn *inputB = static_cast<DigitalIn *>(input);
            eStop = !(inputB->DigitalIn::State());
    5e08:	4638      	mov	r0, r7
    5e0a:	f7ff f8a9 	bl	4f60 <_ZN9ClearCore9DigitalIn5StateEv>
    5e0e:	fab0 f780 	clz	r7, r0
    5e12:	097f      	lsrs	r7, r7, #5
    if (m_moveState == MS_IDLE) {
    5e14:	f894 303c 	ldrb.w	r3, [r4, #60]	; 0x3c
    5e18:	2b00      	cmp	r3, #0
    5e1a:	f040 8131 	bne.w	6080 <_ZN9ClearCore11MotorDriver7RefreshEv+0x430>
        m_motionCancellingEStop = false;
    5e1e:	f884 313c 	strb.w	r3, [r4, #316]	; 0x13c
    if (!m_lastMoveWasPositional && m_statusRegMotor.bit.StepsActive) {
    5e22:	f894 103e 	ldrb.w	r1, [r4, #62]	; 0x3e
    statusRegPending.bit.InEStopSensor = (eStopInput || m_motionCancellingEStop);
    5e26:	f367 4510 	bfi	r5, r7, #16, #1
    if (!m_lastMoveWasPositional && m_statusRegMotor.bit.StepsActive) {
    5e2a:	2900      	cmp	r1, #0
    5e2c:	d152      	bne.n	5ed4 <_ZN9ClearCore11MotorDriver7RefreshEv+0x284>
    5e2e:	f894 2118 	ldrb.w	r2, [r4, #280]	; 0x118
    5e32:	0792      	lsls	r2, r2, #30
    5e34:	d54e      	bpl.n	5ed4 <_ZN9ClearCore11MotorDriver7RefreshEv+0x284>
        if (m_direction && m_limitInfo.InNegHWLimit) {
    5e36:	f894 003d 	ldrb.w	r0, [r4, #61]	; 0x3d
    5e3a:	f894 2040 	ldrb.w	r2, [r4, #64]	; 0x40
    5e3e:	2800      	cmp	r0, #0
    5e40:	f000 8152 	beq.w	60e8 <_ZN9ClearCore11MotorDriver7RefreshEv+0x498>
    5e44:	06d7      	lsls	r7, r2, #27
    5e46:	d549      	bpl.n	5edc <_ZN9ClearCore11MotorDriver7RefreshEv+0x28c>
            alertRegPending.bit.MotionCanceledNegativeLimit = 1;
    5e48:	f046 0604 	orr.w	r6, r6, #4
    5e4c:	e046      	b.n	5edc <_ZN9ClearCore11MotorDriver7RefreshEv+0x28c>
            if ((intFlagReg & (TC_INTFLAG_OVF | TC_INTFLAG_ERR)) ||
    5e4e:	07aa      	lsls	r2, r5, #30
    5e50:	f000 8161 	beq.w	6116 <_ZN9ClearCore11MotorDriver7RefreshEv+0x4c6>
                tcCount->INTFLAG.reg = TC_INTFLAG_OVF | TC_INTFLAG_MC0 |
    5e54:	2333      	movs	r3, #51	; 0x33
    5e56:	72bb      	strb	r3, [r7, #10]
                m_hlfbNoPwmSampleCount = __QADD16(m_hlfbNoPwmSampleCount, 1U);
    5e58:	f8b4 30e2 	ldrh.w	r3, [r4, #226]	; 0xe2

__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __QADD16(uint32_t op1, uint32_t op2)
{
  uint32_t result;

  __ASM volatile ("qadd16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
    5e5c:	2201      	movs	r2, #1
    5e5e:	fa93 f312 	qadd16	r3, r3, r2
                    m_hlfbNoPwmSampleCount > HLFB_CARRIER_LOSS_ERROR_LIMIT;
    5e62:	b29a      	uxth	r2, r3
    5e64:	3200      	adds	r2, #0
    5e66:	bf18      	it	ne
    5e68:	2201      	movne	r2, #1
                m_hlfbNoPwmSampleCount = __QADD16(m_hlfbNoPwmSampleCount, 1U);
    5e6a:	f8a4 30e2 	strh.w	r3, [r4, #226]	; 0xe2
                    m_hlfbNoPwmSampleCount > HLFB_CARRIER_LOSS_ERROR_LIMIT;
    5e6e:	f884 212f 	strb.w	r2, [r4, #303]	; 0x12f
            if (intFlagReg & TC_INTFLAG_MC0) {
    5e72:	06eb      	lsls	r3, r5, #27
    5e74:	f100 8158 	bmi.w	6128 <_ZN9ClearCore11MotorDriver7RefreshEv+0x4d8>
    5e78:	f894 312f 	ldrb.w	r3, [r4, #303]	; 0x12f
            if (!m_hlfbCarrierLost) {
    5e7c:	2b00      	cmp	r3, #0
    5e7e:	f040 810f 	bne.w	60a0 <_ZN9ClearCore11MotorDriver7RefreshEv+0x450>
                m_hlfbStateChangeCounter = (MS_TO_SAMPLES * m_hlfbCarrierLossStateChange_ms);
    5e82:	f8d4 30e8 	ldr.w	r3, [r4, #232]	; 0xe8
    5e86:	eb03 0383 	add.w	r3, r3, r3, lsl #2
    5e8a:	f8a4 30f8 	strh.w	r3, [r4, #248]	; 0xf8
    5e8e:	e707      	b.n	5ca0 <_ZN9ClearCore11MotorDriver7RefreshEv+0x50>
            MotorInAState(CcioMgr.PinState(m_inputAConnector));
    5e90:	4b0f      	ldr	r3, [pc, #60]	; (5ed0 <_ZN9ClearCore11MotorDriver7RefreshEv+0x280>)
    5e92:	f9b4 10d2 	ldrsh.w	r1, [r4, #210]	; 0xd2
    5e96:	6818      	ldr	r0, [r3, #0]
    5e98:	f009 fd52 	bl	f940 <_ZN9ClearCore16CcioBoardManager8PinStateE13ClearCorePins>
    switch (m_mode) {
    5e9c:	79a3      	ldrb	r3, [r4, #6]
    5e9e:	2b09      	cmp	r3, #9
    5ea0:	f47f af2d 	bne.w	5cfe <_ZN9ClearCore11MotorDriver7RefreshEv+0xae>
            DATA_OUTPUT_STATE(m_aInfo->gpioPort, m_aDataMask, !value);
    5ea4:	f8d4 30a4 	ldr.w	r3, [r4, #164]	; 0xa4
    5ea8:	f8d4 20b0 	ldr.w	r2, [r4, #176]	; 0xb0
    5eac:	f993 3001 	ldrsb.w	r3, [r3, #1]
    5eb0:	01db      	lsls	r3, r3, #7
    5eb2:	f103 4382 	add.w	r3, r3, #1090519040	; 0x41000000
    5eb6:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
    5eba:	2800      	cmp	r0, #0
    5ebc:	f000 8119 	beq.w	60f2 <_ZN9ClearCore11MotorDriver7RefreshEv+0x4a2>
    5ec0:	615a      	str	r2, [r3, #20]
    5ec2:	e71f      	b.n	5d04 <_ZN9ClearCore11MotorDriver7RefreshEv+0xb4>
    5ec4:	00022874 	.word	0x00022874
    5ec8:	c61c3c00 	.word	0xc61c3c00
    5ecc:	20001afc 	.word	0x20001afc
    5ed0:	20001f28 	.word	0x20001f28
    5ed4:	f894 003d 	ldrb.w	r0, [r4, #61]	; 0x3d
    5ed8:	f894 2040 	ldrb.w	r2, [r4, #64]	; 0x40
    statusRegPending.bit.InPositiveLimit = m_limitInfo.InPosHWLimit;
    5edc:	f3c2 07c0 	ubfx	r7, r2, #3, #1
    5ee0:	f367 358e 	bfi	r5, r7, #14, #1
    statusRegPending.bit.InNegativeLimit = m_limitInfo.InNegHWLimit;
    5ee4:	f3c2 1200 	ubfx	r2, r2, #4, #1
    statusRegPending.bit.Triggering = m_enableTriggerActive;
    5ee8:	f894 7101 	ldrb.w	r7, [r4, #257]	; 0x101
    statusRegPending.bit.InNegativeLimit = m_limitInfo.InNegHWLimit;
    5eec:	f362 35cf 	bfi	r5, r2, #15, #1
    statusRegPending.bit.Triggering = m_enableTriggerActive;
    5ef0:	f367 354d 	bfi	r5, r7, #13, #1
    statusRegPending.bit.MoveDirection = StepGenerator::m_direction;
    5ef4:	f360 05c3 	bfi	r5, r0, #3, #1
        (StepGenerator::m_moveState != StepGenerator::MoveStates::MS_IDLE &&
    5ef8:	2b00      	cmp	r3, #0
    5efa:	f000 80ab 	beq.w	6054 <_ZN9ClearCore11MotorDriver7RefreshEv+0x404>
    5efe:	1f98      	subs	r0, r3, #6
    5f00:	bf18      	it	ne
    5f02:	2001      	movne	r0, #1
    statusRegPending.bit.AtTargetPosition = m_isEnabled && 
    5f04:	f894 212e 	ldrb.w	r2, [r4, #302]	; 0x12e
    statusRegPending.bit.StepsActive =
    5f08:	f360 0541 	bfi	r5, r0, #1, #1
        m_lastMoveWasPositional && !statusRegPending.bit.StepsActive &&
    5f0c:	2a00      	cmp	r2, #0
    5f0e:	f000 809b 	beq.w	6048 <_ZN9ClearCore11MotorDriver7RefreshEv+0x3f8>
        m_hlfbState == HLFB_ASSERTED;
    5f12:	f894 00f4 	ldrb.w	r0, [r4, #244]	; 0xf4
    statusRegPending.bit.AtTargetPosition = m_isEnabled && 
    5f16:	b111      	cbz	r1, 5f1e <_ZN9ClearCore11MotorDriver7RefreshEv+0x2ce>
        m_lastMoveWasPositional && !statusRegPending.bit.StepsActive &&
    5f18:	07af      	lsls	r7, r5, #30
    5f1a:	f140 80df 	bpl.w	60dc <_ZN9ClearCore11MotorDriver7RefreshEv+0x48c>
    statusRegPending.bit.AtTargetPosition = m_isEnabled && 
    5f1e:	f36f 0500 	bfc	r5, #0, #1
    statusRegPending.bit.AtTargetVelocity = m_isEnabled &&
    5f22:	2b03      	cmp	r3, #3
    5f24:	d071      	beq.n	600a <_ZN9ClearCore11MotorDriver7RefreshEv+0x3ba>
        (StepGenerator::m_moveState == StepGenerator::MoveStates::MS_CRUISE ||
    5f26:	f015 0302 	ands.w	r3, r5, #2
    5f2a:	f040 80ce 	bne.w	60ca <_ZN9ClearCore11MotorDriver7RefreshEv+0x47a>
        (!statusRegPending.bit.StepsActive && !m_lastMoveWasPositional)) &&
    5f2e:	2900      	cmp	r1, #0
    5f30:	d06b      	beq.n	600a <_ZN9ClearCore11MotorDriver7RefreshEv+0x3ba>
    statusRegPending.bit.AtTargetVelocity = m_isEnabled &&
    5f32:	f363 0582 	bfi	r5, r3, #2, #1
    if (m_isEnabling) {
    5f36:	f894 312d 	ldrb.w	r3, [r4, #301]	; 0x12d
    statusRegPending.bit.PositionalMove = m_lastMoveWasPositional;
    5f3a:	f361 1586 	bfi	r5, r1, #6, #1
    statusRegPending.bit.HlfbState = m_hlfbState;
    5f3e:	f360 15c8 	bfi	r5, r0, #7, #2
    if (m_isEnabling) {
    5f42:	2b00      	cmp	r3, #0
    5f44:	d065      	beq.n	6012 <_ZN9ClearCore11MotorDriver7RefreshEv+0x3c2>
        if (m_enableCounter > 0) {
    5f46:	f8d4 3130 	ldr.w	r3, [r4, #304]	; 0x130
    5f4a:	2b00      	cmp	r3, #0
    5f4c:	f340 8113 	ble.w	6176 <_ZN9ClearCore11MotorDriver7RefreshEv+0x526>
    statusRegPending.bit.Enabled = m_isEnabled;
    5f50:	f362 1545 	bfi	r5, r2, #5, #1
        statusRegPending.bit.ReadyState = MotorReadyStates::MOTOR_ENABLING;
    5f54:	2201      	movs	r2, #1
            m_enableCounter--;
    5f56:	3b01      	subs	r3, #1
        statusRegPending.bit.ReadyState = MotorReadyStates::MOTOR_ENABLING;
    5f58:	f362 258c 	bfi	r5, r2, #10, #3
            m_enableCounter--;
    5f5c:	f8c4 3130 	str.w	r3, [r4, #304]	; 0x130
    5f60:	f005 0302 	and.w	r3, r5, #2
    if (statusRegPending.bit.StepsActive) {
    5f64:	b11b      	cbz	r3, 5f6e <_ZN9ClearCore11MotorDriver7RefreshEv+0x31e>
        if (alertRegPending.bit.MotorFaulted) {
    5f66:	06b3      	lsls	r3, r6, #26
            alertRegPending.bit.MotionCanceledInAlert = 1;
    5f68:	bf48      	it	mi
    5f6a:	f046 0601 	orrmi.w	r6, r6, #1
    statusRegPending.bit.AlertsPresent = (bool)alertRegPending.reg;
    5f6e:	1c32      	adds	r2, r6, #0
    5f70:	bf18      	it	ne
    5f72:	2201      	movne	r2, #1
    atomic_or_fetch(&m_statusRegMotorRisen.reg,
    5f74:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
    m_alertRegMotor = alertRegPending;
    5f78:	f8c4 6128 	str.w	r6, [r4, #296]	; 0x128
    statusRegPending.bit.AlertsPresent = (bool)alertRegPending.reg;
    5f7c:	f362 2549 	bfi	r5, r2, #9, #1
    m_statusRegMotor = statusRegPending;
    5f80:	f8c4 5118 	str.w	r5, [r4, #280]	; 0x118
    atomic_or_fetch(&m_statusRegMotorRisen.reg,
    5f84:	ea25 0303 	bic.w	r3, r5, r3
                    ~m_statusRegMotorLast.reg & statusRegPending.reg);
    5f88:	f504 728e 	add.w	r2, r4, #284	; 0x11c
    5f8c:	f3bf 8f5b 	dmb	ish
    5f90:	e852 1f00 	ldrex	r1, [r2]
    5f94:	4319      	orrs	r1, r3
    5f96:	e842 1000 	strex	r0, r1, [r2]
    5f9a:	2800      	cmp	r0, #0
    5f9c:	d1f8      	bne.n	5f90 <_ZN9ClearCore11MotorDriver7RefreshEv+0x340>
    5f9e:	f3bf 8f5b 	dmb	ish
    atomic_or_fetch(&m_statusRegMotorFallen.reg,
    5fa2:	f8d4 2124 	ldr.w	r2, [r4, #292]	; 0x124
                    m_statusRegMotorLast.reg & ~statusRegPending.reg);
    5fa6:	f3bf 8f5b 	dmb	ish
    5faa:	f504 7390 	add.w	r3, r4, #288	; 0x120
    atomic_or_fetch(&m_statusRegMotorFallen.reg,
    5fae:	ea22 0505 	bic.w	r5, r2, r5
                    m_statusRegMotorLast.reg & ~statusRegPending.reg);
    5fb2:	e853 2f00 	ldrex	r2, [r3]
    5fb6:	432a      	orrs	r2, r5
    5fb8:	e843 2100 	strex	r1, r2, [r3]
    5fbc:	2900      	cmp	r1, #0
    5fbe:	d1f8      	bne.n	5fb2 <_ZN9ClearCore11MotorDriver7RefreshEv+0x362>
    5fc0:	f3bf 8f5b 	dmb	ish
    if (Connector::m_mode == Connector::CPM_MODE_STEP_AND_DIR) {
    5fc4:	79a3      	ldrb	r3, [r4, #6]
    m_statusRegMotorLast.reg = m_statusRegMotor.reg;
    5fc6:	f8d4 2118 	ldr.w	r2, [r4, #280]	; 0x118
    5fca:	f8c4 2124 	str.w	r2, [r4, #292]	; 0x124
    if (Connector::m_mode == Connector::CPM_MODE_STEP_AND_DIR) {
    5fce:	2b0a      	cmp	r3, #10
    5fd0:	f47f ae42 	bne.w	5c58 <_ZN9ClearCore11MotorDriver7RefreshEv+0x8>
        StepGenerator::StepsCalculated();
    5fd4:	f104 0530 	add.w	r5, r4, #48	; 0x30
    5fd8:	4628      	mov	r0, r5
    5fda:	f006 f95d 	bl	c298 <_ZN9ClearCore13StepGenerator15StepsCalculatedEv>
        StepGenerator::CheckTravelLimits();
    5fde:	4628      	mov	r0, r5
    5fe0:	f006 fc7e 	bl	c8e0 <_ZN9ClearCore13StepGenerator17CheckTravelLimitsEv>
    if (*m_bTccBuffer == m_bDutyCnt) {
    5fe4:	f8d4 50bc 	ldr.w	r5, [r4, #188]	; 0xbc
        m_bDutyCnt = StepGenerator::m_stepsPrevious;
    5fe8:	6b60      	ldr	r0, [r4, #52]	; 0x34
    if (*m_bTccBuffer == m_bDutyCnt) {
    5fea:	682a      	ldr	r2, [r5, #0]
        m_bDutyCnt = StepGenerator::m_stepsPrevious;
    5fec:	f8a4 0112 	strh.w	r0, [r4, #274]	; 0x112
    5ff0:	b280      	uxth	r0, r0
    if (*m_bTccBuffer == m_bDutyCnt) {
    5ff2:	4282      	cmp	r2, r0
    5ff4:	f43f ae30 	beq.w	5c58 <_ZN9ClearCore11MotorDriver7RefreshEv+0x8>
    5ff8:	f8d4 10cc 	ldr.w	r1, [r4, #204]	; 0xcc
    5ffc:	f8d4 20c8 	ldr.w	r2, [r4, #200]	; 0xc8
    while (*m_bTccSyncReg & m_bTccSyncMask) {
    6000:	680b      	ldr	r3, [r1, #0]
    6002:	4213      	tst	r3, r2
    6004:	d1fc      	bne.n	6000 <_ZN9ClearCore11MotorDriver7RefreshEv+0x3b0>
    *m_bTccBuffer = m_bDutyCnt;
    6006:	6028      	str	r0, [r5, #0]
    6008:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        (!statusRegPending.bit.StepsActive && !m_lastMoveWasPositional)) &&
    600a:	1c03      	adds	r3, r0, #0
    600c:	bf18      	it	ne
    600e:	2301      	movne	r3, #1
    6010:	e78f      	b.n	5f32 <_ZN9ClearCore11MotorDriver7RefreshEv+0x2e2>
    statusRegPending.bit.Enabled = m_isEnabled;
    6012:	f362 1545 	bfi	r5, r2, #5, #1
    if (!(m_isEnabled || m_isEnabling)) {
    6016:	2a00      	cmp	r2, #0
    6018:	d03a      	beq.n	6090 <_ZN9ClearCore11MotorDriver7RefreshEv+0x440>
        if (m_hlfbMode != HLFB_MODE_STATIC &&
    601a:	f894 30d8 	ldrb.w	r3, [r4, #216]	; 0xd8
    601e:	b933      	cbnz	r3, 602e <_ZN9ClearCore11MotorDriver7RefreshEv+0x3de>
        else if ((m_hlfbMode == HLFB_MODE_STATIC &&
    6020:	b938      	cbnz	r0, 6032 <_ZN9ClearCore11MotorDriver7RefreshEv+0x3e2>
    6022:	f005 0302 	and.w	r3, r5, #2
            statusRegPending.bit.ReadyState = MotorReadyStates::MOTOR_MOVING;
    6026:	2204      	movs	r2, #4
    6028:	f362 258c 	bfi	r5, r2, #10, #3
    602c:	e79a      	b.n	5f64 <_ZN9ClearCore11MotorDriver7RefreshEv+0x314>
        if (m_hlfbMode != HLFB_MODE_STATIC &&
    602e:	2800      	cmp	r0, #0
    6030:	d063      	beq.n	60fa <_ZN9ClearCore11MotorDriver7RefreshEv+0x4aa>
                  m_hlfbState == MotorDriver::HlfbStates::HLFB_DEASSERTED) ||
    6032:	f015 0302 	ands.w	r3, r5, #2
    6036:	d1f6      	bne.n	6026 <_ZN9ClearCore11MotorDriver7RefreshEv+0x3d6>
            statusRegPending.bit.ReadyState = MotorReadyStates::MOTOR_READY;
    6038:	2203      	movs	r2, #3
    603a:	f362 258c 	bfi	r5, r2, #10, #3
            statusRegPending.bit.MotorInFault = 0;
    603e:	f363 1504 	bfi	r5, r3, #4, #1
    6042:	f005 0302 	and.w	r3, r5, #2
    6046:	e78d      	b.n	5f64 <_ZN9ClearCore11MotorDriver7RefreshEv+0x314>
    statusRegPending.bit.AtTargetPosition = m_isEnabled && 
    6048:	f362 0500 	bfi	r5, r2, #0, #1
    604c:	f894 00f4 	ldrb.w	r0, [r4, #244]	; 0xf4
        (!statusRegPending.bit.StepsActive && !m_lastMoveWasPositional)) &&
    6050:	4613      	mov	r3, r2
    6052:	e76e      	b.n	5f32 <_ZN9ClearCore11MotorDriver7RefreshEv+0x2e2>
        (StepGenerator::m_moveState != StepGenerator::MoveStates::MS_IDLE &&
    6054:	4618      	mov	r0, r3
    6056:	e755      	b.n	5f04 <_ZN9ClearCore11MotorDriver7RefreshEv+0x2b4>
    if (m_moveState == MS_IDLE) {
    6058:	f894 303c 	ldrb.w	r3, [r4, #60]	; 0x3c
    605c:	bb93      	cbnz	r3, 60c4 <_ZN9ClearCore11MotorDriver7RefreshEv+0x474>
        m_motionCancellingEStop = false;
    605e:	f884 313c 	strb.w	r3, [r4, #316]	; 0x13c
    6062:	461f      	mov	r7, r3
    6064:	e6dd      	b.n	5e22 <_ZN9ClearCore11MotorDriver7RefreshEv+0x1d2>
            if (m_hlfbMode == HLFB_MODE_STATIC) {
    6066:	f894 10d8 	ldrb.w	r1, [r4, #216]	; 0xd8
    606a:	b381      	cbz	r1, 60ce <_ZN9ClearCore11MotorDriver7RefreshEv+0x47e>
                brakeOutput->State(static_cast<int16_t>(m_hlfbState != HLFB_DEASSERTED && m_isEnabled));
    606c:	682b      	ldr	r3, [r5, #0]
    606e:	f894 10f4 	ldrb.w	r1, [r4, #244]	; 0xf4
    6072:	695b      	ldr	r3, [r3, #20]
    6074:	b109      	cbz	r1, 607a <_ZN9ClearCore11MotorDriver7RefreshEv+0x42a>
    6076:	f894 112e 	ldrb.w	r1, [r4, #302]	; 0x12e
    607a:	4628      	mov	r0, r5
    607c:	4798      	blx	r3
    607e:	e67c      	b.n	5d7a <_ZN9ClearCore11MotorDriver7RefreshEv+0x12a>
    else if (eStopInput && !m_motionCancellingEStop) {
    6080:	b307      	cbz	r7, 60c4 <_ZN9ClearCore11MotorDriver7RefreshEv+0x474>
    6082:	f894 113c 	ldrb.w	r1, [r4, #316]	; 0x13c
    6086:	2900      	cmp	r1, #0
    6088:	f000 80ab 	beq.w	61e2 <_ZN9ClearCore11MotorDriver7RefreshEv+0x592>
    statusRegPending.bit.InEStopSensor = (eStopInput || m_motionCancellingEStop);
    608c:	460f      	mov	r7, r1
    608e:	e6c8      	b.n	5e22 <_ZN9ClearCore11MotorDriver7RefreshEv+0x1d2>
        statusRegPending.bit.ReadyState = MotorReadyStates::MOTOR_DISABLED;
    6090:	f362 258c 	bfi	r5, r2, #10, #3
        if (statusRegPending.bit.StepsActive) {
    6094:	07aa      	lsls	r2, r5, #30
    6096:	f57f af6a 	bpl.w	5f6e <_ZN9ClearCore11MotorDriver7RefreshEv+0x31e>
            alertRegPending.bit.MotionCanceledMotorDisabled = 1;
    609a:	f046 0610 	orr.w	r6, r6, #16
    609e:	e762      	b.n	5f66 <_ZN9ClearCore11MotorDriver7RefreshEv+0x316>
                bool readHlfbState = (DigitalIn::m_stateFiltered ^ invert);
    60a0:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
                if (readHlfbState != m_lastHlfbInputValue) {
    60a4:	f894 10f5 	ldrb.w	r1, [r4, #245]	; 0xf5
                bool readHlfbState = (DigitalIn::m_stateFiltered ^ invert);
    60a8:	4073      	eors	r3, r6
    60aa:	b2da      	uxtb	r2, r3
                if (readHlfbState != m_lastHlfbInputValue) {
    60ac:	4291      	cmp	r1, r2
    60ae:	f000 80a4 	beq.w	61fa <_ZN9ClearCore11MotorDriver7RefreshEv+0x5aa>
                    m_hlfbStateChangeCounter = (MS_TO_SAMPLES * m_hlfbCarrierLossStateChange_ms);
    60b2:	f8d4 30e8 	ldr.w	r3, [r4, #232]	; 0xe8
                    m_lastHlfbInputValue = readHlfbState;
    60b6:	f884 20f5 	strb.w	r2, [r4, #245]	; 0xf5
                    m_hlfbStateChangeCounter = (MS_TO_SAMPLES * m_hlfbCarrierLossStateChange_ms);
    60ba:	eb03 0383 	add.w	r3, r3, r3, lsl #2
    60be:	f8a4 30f8 	strh.w	r3, [r4, #248]	; 0xf8
    60c2:	e5ed      	b.n	5ca0 <_ZN9ClearCore11MotorDriver7RefreshEv+0x50>
    60c4:	f894 713c 	ldrb.w	r7, [r4, #316]	; 0x13c
    60c8:	e6ab      	b.n	5e22 <_ZN9ClearCore11MotorDriver7RefreshEv+0x1d2>
        (!statusRegPending.bit.StepsActive && !m_lastMoveWasPositional)) &&
    60ca:	2300      	movs	r3, #0
    60cc:	e731      	b.n	5f32 <_ZN9ClearCore11MotorDriver7RefreshEv+0x2e2>
                brakeOutput->State(static_cast<int16_t>(m_hlfbState == HLFB_ASSERTED && m_isEnabled));
    60ce:	f894 20f4 	ldrb.w	r2, [r4, #244]	; 0xf4
    60d2:	682b      	ldr	r3, [r5, #0]
    60d4:	2a01      	cmp	r2, #1
    60d6:	695b      	ldr	r3, [r3, #20]
    60d8:	d1cf      	bne.n	607a <_ZN9ClearCore11MotorDriver7RefreshEv+0x42a>
    60da:	e7cc      	b.n	6076 <_ZN9ClearCore11MotorDriver7RefreshEv+0x426>
        m_lastMoveWasPositional && !statusRegPending.bit.StepsActive &&
    60dc:	2801      	cmp	r0, #1
    60de:	f47f af1e 	bne.w	5f1e <_ZN9ClearCore11MotorDriver7RefreshEv+0x2ce>
    statusRegPending.bit.AtTargetPosition = m_isEnabled && 
    60e2:	f045 0501 	orr.w	r5, r5, #1
    60e6:	e71c      	b.n	5f22 <_ZN9ClearCore11MotorDriver7RefreshEv+0x2d2>
        else if (!m_direction && m_limitInfo.InPosHWLimit) {
    60e8:	0717      	lsls	r7, r2, #28
            alertRegPending.bit.MotionCanceledPositiveLimit = 1;
    60ea:	bf48      	it	mi
    60ec:	f046 0602 	orrmi.w	r6, r6, #2
    60f0:	e6f4      	b.n	5edc <_ZN9ClearCore11MotorDriver7RefreshEv+0x28c>
            DATA_OUTPUT_STATE(m_aInfo->gpioPort, m_aDataMask, !value);
    60f2:	619a      	str	r2, [r3, #24]
    60f4:	e606      	b.n	5d04 <_ZN9ClearCore11MotorDriver7RefreshEv+0xb4>
            DATA_OUTPUT_STATE(m_bInfo->gpioPort, m_bDataMask, !value);
    60f6:	619a      	str	r2, [r3, #24]
    60f8:	e62a      	b.n	5d50 <_ZN9ClearCore11MotorDriver7RefreshEv+0x100>
            statusRegPending.bit.ReadyState = MotorReadyStates::MOTOR_FAULTED;
    60fa:	2302      	movs	r3, #2
    60fc:	f363 258c 	bfi	r5, r3, #10, #3
            statusRegPending.bit.MotorInFault = 1;
    6100:	f045 0510 	orr.w	r5, r5, #16
            MoveStopAbrupt();
    6104:	f104 0030 	add.w	r0, r4, #48	; 0x30
    6108:	f006 fb6e 	bl	c7e8 <_ZN9ClearCore13StepGenerator14MoveStopAbruptEv>
            alertRegPending.bit.MotorFaulted = 1;
    610c:	f046 0620 	orr.w	r6, r6, #32
    6110:	f005 0302 	and.w	r3, r5, #2
    6114:	e726      	b.n	5f64 <_ZN9ClearCore11MotorDriver7RefreshEv+0x314>
                (Milliseconds() - m_hlfbLastCarrierDetectTime
    6116:	f004 fc8d 	bl	aa34 <Milliseconds>
    611a:	f8d4 30ec 	ldr.w	r3, [r4, #236]	; 0xec
    611e:	1ac0      	subs	r0, r0, r3
            if ((intFlagReg & (TC_INTFLAG_OVF | TC_INTFLAG_ERR)) ||
    6120:	2803      	cmp	r0, #3
    6122:	f63f ae97 	bhi.w	5e54 <_ZN9ClearCore11MotorDriver7RefreshEv+0x204>
    6126:	e6a4      	b.n	5e72 <_ZN9ClearCore11MotorDriver7RefreshEv+0x222>
                m_hlfbLastCarrierDetectTime = Milliseconds();
    6128:	f004 fc84 	bl	aa34 <Milliseconds>
                if (m_hlfbNoPwmSampleCount) {
    612c:	f8b4 30e2 	ldrh.w	r3, [r4, #226]	; 0xe2
                m_hlfbLastCarrierDetectTime = Milliseconds();
    6130:	f8c4 00ec 	str.w	r0, [r4, #236]	; 0xec
                if (m_hlfbNoPwmSampleCount) {
    6134:	2b00      	cmp	r3, #0
    6136:	d03a      	beq.n	61ae <_ZN9ClearCore11MotorDriver7RefreshEv+0x55e>
                    tcCount->INTFLAG.reg = TC_INTFLAG_MC0 | TC_INTFLAG_MC1;
    6138:	2330      	movs	r3, #48	; 0x30
    613a:	72bb      	strb	r3, [r7, #10]
                    m_hlfbPwmReadingPending = false;
    613c:	2200      	movs	r2, #0
    613e:	f894 312f 	ldrb.w	r3, [r4, #303]	; 0x12f
    6142:	f884 20f6 	strb.w	r2, [r4, #246]	; 0xf6
                    m_hlfbNoPwmSampleCount = 0;
    6146:	f8a4 20e2 	strh.w	r2, [r4, #226]	; 0xe2
    614a:	e697      	b.n	5e7c <_ZN9ClearCore11MotorDriver7RefreshEv+0x22c>
            EnableRequest(CcioMgr.PinState(m_enableConnector));
    614c:	4b54      	ldr	r3, [pc, #336]	; (62a0 <_ZN9ClearCore11MotorDriver7RefreshEv+0x650>)
    614e:	f9b4 10d0 	ldrsh.w	r1, [r4, #208]	; 0xd0
    6152:	6818      	ldr	r0, [r3, #0]
    6154:	f009 fbf4 	bl	f940 <_ZN9ClearCore16CcioBoardManager8PinStateE13ClearCorePins>
    6158:	4601      	mov	r1, r0
    615a:	4620      	mov	r0, r4
    615c:	f7ff fbf4 	bl	5948 <_ZN9ClearCore11MotorDriver13EnableRequestEb>
    6160:	e5b5      	b.n	5cce <_ZN9ClearCore11MotorDriver7RefreshEv+0x7e>
            PosLimitActive(!input->State());
    6162:	682b      	ldr	r3, [r5, #0]
    6164:	4628      	mov	r0, r5
    6166:	691b      	ldr	r3, [r3, #16]
    6168:	4798      	blx	r3
    616a:	e617      	b.n	5d9c <_ZN9ClearCore11MotorDriver7RefreshEv+0x14c>
            NegLimitActive(!input->State());
    616c:	682b      	ldr	r3, [r5, #0]
    616e:	4628      	mov	r0, r5
    6170:	691b      	ldr	r3, [r3, #16]
    6172:	4798      	blx	r3
    6174:	e62c      	b.n	5dd0 <_ZN9ClearCore11MotorDriver7RefreshEv+0x180>
            m_isEnabled = true;
    6176:	2201      	movs	r2, #1
            m_isEnabling = false;
    6178:	2300      	movs	r3, #0
    statusRegPending.bit.Enabled = m_isEnabled;
    617a:	f045 0520 	orr.w	r5, r5, #32
            m_isEnabled = true;
    617e:	f884 212e 	strb.w	r2, [r4, #302]	; 0x12e
            m_isEnabling = false;
    6182:	f884 312d 	strb.w	r3, [r4, #301]	; 0x12d
    6186:	e748      	b.n	601a <_ZN9ClearCore11MotorDriver7RefreshEv+0x3ca>
            eStop = !(input->State());
    6188:	683b      	ldr	r3, [r7, #0]
    618a:	4638      	mov	r0, r7
    618c:	691b      	ldr	r3, [r3, #16]
    618e:	4798      	blx	r3
    6190:	fab0 f780 	clz	r7, r0
    6194:	097f      	lsrs	r7, r7, #5
    6196:	e63d      	b.n	5e14 <_ZN9ClearCore11MotorDriver7RefreshEv+0x1c4>
            MotorInBState(CcioMgr.PinState(m_inputBConnector));
    6198:	4b41      	ldr	r3, [pc, #260]	; (62a0 <_ZN9ClearCore11MotorDriver7RefreshEv+0x650>)
    619a:	f9b4 10d4 	ldrsh.w	r1, [r4, #212]	; 0xd4
    619e:	6818      	ldr	r0, [r3, #0]
    61a0:	f009 fbce 	bl	f940 <_ZN9ClearCore16CcioBoardManager8PinStateE13ClearCorePins>
    switch (m_mode) {
    61a4:	79a3      	ldrb	r3, [r4, #6]
    61a6:	2b09      	cmp	r3, #9
    61a8:	f43f adc3 	beq.w	5d32 <_ZN9ClearCore11MotorDriver7RefreshEv+0xe2>
    61ac:	e5d0      	b.n	5d50 <_ZN9ClearCore11MotorDriver7RefreshEv+0x100>
                else if (intFlagReg & TC_INTFLAG_MC1) {
    61ae:	06ad      	lsls	r5, r5, #26
    61b0:	f57f ae62 	bpl.w	5e78 <_ZN9ClearCore11MotorDriver7RefreshEv+0x228>
                    m_hlfbWidth[0] = m_hlfbWidth[CPM_HLFB_CAP_HISTORY - 1];
    61b4:	f8b4 10dc 	ldrh.w	r1, [r4, #220]	; 0xdc
                    m_hlfbPeriod[0] = m_hlfbPeriod[CPM_HLFB_CAP_HISTORY - 1];
    61b8:	f8b4 20e0 	ldrh.w	r2, [r4, #224]	; 0xe0
                    m_hlfbWidth[0] = m_hlfbWidth[CPM_HLFB_CAP_HISTORY - 1];
    61bc:	f8a4 10da 	strh.w	r1, [r4, #218]	; 0xda
                    m_hlfbPeriod[0] = m_hlfbPeriod[CPM_HLFB_CAP_HISTORY - 1];
    61c0:	f8a4 20de 	strh.w	r2, [r4, #222]	; 0xde
                    m_hlfbWidth[CPM_HLFB_CAP_HISTORY - 1] = tcCount->CC[1].reg;
    61c4:	8bf8      	ldrh	r0, [r7, #30]
    61c6:	f8a4 00dc 	strh.w	r0, [r4, #220]	; 0xdc
                    if (m_hlfbPwmReadingPending) {
    61ca:	f894 00f6 	ldrb.w	r0, [r4, #246]	; 0xf6
                    m_hlfbPeriod[CPM_HLFB_CAP_HISTORY - 1] = tcCount->CC[0].reg;
    61ce:	8bbd      	ldrh	r5, [r7, #28]
    61d0:	f8a4 50e0 	strh.w	r5, [r4, #224]	; 0xe0
                    if (m_hlfbPwmReadingPending) {
    61d4:	b9d0      	cbnz	r0, 620c <_ZN9ClearCore11MotorDriver7RefreshEv+0x5bc>
    61d6:	f894 312f 	ldrb.w	r3, [r4, #303]	; 0x12f
                    m_hlfbPwmReadingPending = true;
    61da:	2201      	movs	r2, #1
    61dc:	f884 20f6 	strb.w	r2, [r4, #246]	; 0xf6
    61e0:	e64c      	b.n	5e7c <_ZN9ClearCore11MotorDriver7RefreshEv+0x22c>
        MoveStopDecel();
    61e2:	f104 0030 	add.w	r0, r4, #48	; 0x30
    61e6:	f006 fb1b 	bl	c820 <_ZN9ClearCore13StepGenerator13MoveStopDecelEm>
        m_motionCancellingEStop = true;
    61ea:	2301      	movs	r3, #1
    61ec:	f884 313c 	strb.w	r3, [r4, #316]	; 0x13c
        alertRegPending.bit.MotionCanceledSensorEStop = 1;
    61f0:	f046 0608 	orr.w	r6, r6, #8
    61f4:	f894 303c 	ldrb.w	r3, [r4, #60]	; 0x3c
    61f8:	e613      	b.n	5e22 <_ZN9ClearCore11MotorDriver7RefreshEv+0x1d2>
                else if (m_hlfbStateChangeCounter && m_hlfbStateChangeCounter--) {
    61fa:	f8b4 20f8 	ldrh.w	r2, [r4, #248]	; 0xf8
    61fe:	2a00      	cmp	r2, #0
    6200:	f43f ad49 	beq.w	5c96 <_ZN9ClearCore11MotorDriver7RefreshEv+0x46>
    6204:	3a01      	subs	r2, #1
    6206:	f8a4 20f8 	strh.w	r2, [r4, #248]	; 0xf8
    620a:	e549      	b.n	5ca0 <_ZN9ClearCore11MotorDriver7RefreshEv+0x50>
                        float dutyCycle = static_cast<float>(m_hlfbWidth[0]) /
    620c:	ee07 1a90 	vmov	s15, r1
    6210:	eeb8 7a67 	vcvt.f32.u32	s14, s15
                                          static_cast<float>(m_hlfbPeriod[0]);
    6214:	ee07 2a90 	vmov	s15, r2
    6218:	eef8 7a67 	vcvt.f32.u32	s15, s15
                        m_hlfbCarrierLost = false;
    621c:	f884 312f 	strb.w	r3, [r4, #303]	; 0x12f
                        m_hlfbDuty = (dutyCycle - 0.05) * (10000. / 90.);
    6220:	eec7 6a27 	vdiv.f32	s13, s14, s15
    6224:	ee16 0a90 	vmov	r0, s13
    6228:	f015 faa0 	bl	1b76c <__aeabi_f2d>
    622c:	a318      	add	r3, pc, #96	; (adr r3, 6290 <_ZN9ClearCore11MotorDriver7RefreshEv+0x640>)
    622e:	e9d3 2300 	ldrd	r2, r3, [r3]
    6232:	f015 f93b 	bl	1b4ac <__aeabi_dsub>
    6236:	a318      	add	r3, pc, #96	; (adr r3, 6298 <_ZN9ClearCore11MotorDriver7RefreshEv+0x648>)
    6238:	e9d3 2300 	ldrd	r2, r3, [r3]
    623c:	f015 faea 	bl	1b814 <__aeabi_dmul>
    6240:	f015 fdca 	bl	1bdd8 <__aeabi_d2f>
    6244:	ee07 0a90 	vmov	s15, r0
                        if (invert) {
    6248:	b11e      	cbz	r6, 6252 <_ZN9ClearCore11MotorDriver7RefreshEv+0x602>
                            m_hlfbDuty = 100 - m_hlfbDuty;
    624a:	ed9f 7a16 	vldr	s14, [pc, #88]	; 62a4 <_ZN9ClearCore11MotorDriver7RefreshEv+0x654>
    624e:	ee77 7a67 	vsub.f32	s15, s14, s15
                        if (m_hlfbMode == HLFB_MODE_HAS_BIPOLAR_PWM) {
    6252:	f894 30d8 	ldrb.w	r3, [r4, #216]	; 0xd8
                            m_hlfbDuty = 100 - m_hlfbDuty;
    6256:	edc4 7a3c 	vstr	s15, [r4, #240]	; 0xf0
                        if (m_hlfbMode == HLFB_MODE_HAS_BIPOLAR_PWM) {
    625a:	2b02      	cmp	r3, #2
    625c:	d004      	beq.n	6268 <_ZN9ClearCore11MotorDriver7RefreshEv+0x618>
                        m_hlfbState = HLFB_HAS_MEASUREMENT;
    625e:	2302      	movs	r3, #2
    6260:	f884 30f4 	strb.w	r3, [r4, #244]	; 0xf4
    6264:	2300      	movs	r3, #0
    6266:	e7b8      	b.n	61da <_ZN9ClearCore11MotorDriver7RefreshEv+0x58a>
                            m_hlfbDuty = 2.0 * (m_hlfbDuty - 50.);
    6268:	ee17 0a90 	vmov	r0, s15
    626c:	f015 fa7e 	bl	1b76c <__aeabi_f2d>
    6270:	2200      	movs	r2, #0
    6272:	4b0d      	ldr	r3, [pc, #52]	; (62a8 <_ZN9ClearCore11MotorDriver7RefreshEv+0x658>)
    6274:	f015 f91a 	bl	1b4ac <__aeabi_dsub>
    6278:	4602      	mov	r2, r0
    627a:	460b      	mov	r3, r1
    627c:	f015 f918 	bl	1b4b0 <__adddf3>
    6280:	f015 fdaa 	bl	1bdd8 <__aeabi_d2f>
    6284:	f8c4 00f0 	str.w	r0, [r4, #240]	; 0xf0
    6288:	e7e9      	b.n	625e <_ZN9ClearCore11MotorDriver7RefreshEv+0x60e>
    628a:	bf00      	nop
    628c:	f3af 8000 	nop.w
    6290:	9999999a 	.word	0x9999999a
    6294:	3fa99999 	.word	0x3fa99999
    6298:	71c71c72 	.word	0x71c71c72
    629c:	405bc71c 	.word	0x405bc71c
    62a0:	20001f28 	.word	0x20001f28
    62a4:	42c80000 	.word	0x42c80000
    62a8:	40490000 	.word	0x40490000

000062ac <_ZN9ClearCore11MotorDriver4MoveElNS_13StepGenerator10MoveTargetE>:
bool MotorDriver::Move(int32_t dist, MoveTarget moveTarget) {
    62ac:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    62b0:	4604      	mov	r4, r0
    62b2:	460f      	mov	r7, r1
    if (moveTarget == MOVE_TARGET_ABSOLUTE) {
    62b4:	4690      	mov	r8, r2
    62b6:	2a00      	cmp	r2, #0
    62b8:	d154      	bne.n	6364 <_ZN9ClearCore11MotorDriver4MoveElNS_13StepGenerator10MoveTargetE+0xb8>
        negDir = dist - m_posnAbsolute < 0;
    62ba:	6c45      	ldr	r5, [r0, #68]	; 0x44
    62bc:	1b4d      	subs	r5, r1, r5
    62be:	0fed      	lsrs	r5, r5, #31
    if (m_alertRegMotor.reg) {
    62c0:	f8d4 3128 	ldr.w	r3, [r4, #296]	; 0x128
    62c4:	2b00      	cmp	r3, #0
    62c6:	d04b      	beq.n	6360 <_ZN9ClearCore11MotorDriver4MoveElNS_13StepGenerator10MoveTargetE+0xb4>
        m_alertRegMotor.bit.MotionCanceledInAlert = 1;
    62c8:	f894 3128 	ldrb.w	r3, [r4, #296]	; 0x128
    62cc:	f043 0301 	orr.w	r3, r3, #1
    62d0:	f884 3128 	strb.w	r3, [r4, #296]	; 0x128
        valid = false;
    62d4:	2600      	movs	r6, #0
    62d6:	f894 3100 	ldrb.w	r3, [r4, #256]	; 0x100
    if (!EnableRequest()) {
    62da:	b933      	cbnz	r3, 62ea <_ZN9ClearCore11MotorDriver4MoveElNS_13StepGenerator10MoveTargetE+0x3e>
        m_alertRegMotor.bit.MotionCanceledMotorDisabled = 1;
    62dc:	f894 2128 	ldrb.w	r2, [r4, #296]	; 0x128
    62e0:	f042 0210 	orr.w	r2, r2, #16
        valid = false;
    62e4:	461e      	mov	r6, r3
        m_alertRegMotor.bit.MotionCanceledMotorDisabled = 1;
    62e6:	f884 2128 	strb.w	r2, [r4, #296]	; 0x128
    if (m_eStopConnector != CLEARCORE_PIN_INVALID) {
    62ea:	f9b4 113a 	ldrsh.w	r1, [r4, #314]	; 0x13a
    62ee:	1c48      	adds	r0, r1, #1
    62f0:	d016      	beq.n	6320 <_ZN9ClearCore11MotorDriver4MoveElNS_13StepGenerator10MoveTargetE+0x74>
        Connector *input = SysMgr.ConnectorByIndex(m_eStopConnector);
    62f2:	4829      	ldr	r0, [pc, #164]	; (6398 <_ZN9ClearCore11MotorDriver4MoveElNS_13StepGenerator10MoveTargetE+0xec>)
    62f4:	f003 fd22 	bl	9d3c <_ZN9ClearCore10SysManager16ConnectorByIndexE13ClearCorePins>
        if (input->Type() == ClearCore::Connector::CCIO_DIGITAL_IN_OUT_TYPE) {
    62f8:	6803      	ldr	r3, [r0, #0]
    62fa:	689b      	ldr	r3, [r3, #8]
        Connector *input = SysMgr.ConnectorByIndex(m_eStopConnector);
    62fc:	4681      	mov	r9, r0
        if (input->Type() == ClearCore::Connector::CCIO_DIGITAL_IN_OUT_TYPE) {
    62fe:	4798      	blx	r3
    6300:	2809      	cmp	r0, #9
    6302:	d040      	beq.n	6386 <_ZN9ClearCore11MotorDriver4MoveElNS_13StepGenerator10MoveTargetE+0xda>
            eStop = !(inputB->DigitalIn::State());
    6304:	4648      	mov	r0, r9
    6306:	f7fe fe2b 	bl	4f60 <_ZN9ClearCore9DigitalIn5StateEv>
    630a:	fab0 f080 	clz	r0, r0
    630e:	0940      	lsrs	r0, r0, #5
    if (CheckEStopSensor()) {
    6310:	b130      	cbz	r0, 6320 <_ZN9ClearCore11MotorDriver4MoveElNS_13StepGenerator10MoveTargetE+0x74>
        m_alertRegMotor.bit.MotionCanceledSensorEStop = 1;
    6312:	f894 3128 	ldrb.w	r3, [r4, #296]	; 0x128
    6316:	f043 0308 	orr.w	r3, r3, #8
    631a:	f884 3128 	strb.w	r3, [r4, #296]	; 0x128
        valid = false;
    631e:	2600      	movs	r6, #0
    if (negDirection && m_limitInfo.InNegHWLimit) {
    6320:	f894 3040 	ldrb.w	r3, [r4, #64]	; 0x40
    6324:	b16d      	cbz	r5, 6342 <_ZN9ClearCore11MotorDriver4MoveElNS_13StepGenerator10MoveTargetE+0x96>
    6326:	06d9      	lsls	r1, r3, #27
    6328:	d426      	bmi.n	6378 <_ZN9ClearCore11MotorDriver4MoveElNS_13StepGenerator10MoveTargetE+0xcc>
    if (!ValidateMove(negDir)) {
    632a:	b196      	cbz	r6, 6352 <_ZN9ClearCore11MotorDriver4MoveElNS_13StepGenerator10MoveTargetE+0xa6>
    m_lastMoveWasPositional = true;
    632c:	2301      	movs	r3, #1
    return StepGenerator::Move(dist, moveTarget);
    632e:	4642      	mov	r2, r8
    6330:	4639      	mov	r1, r7
    m_lastMoveWasPositional = true;
    6332:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
    return StepGenerator::Move(dist, moveTarget);
    6336:	f104 0030 	add.w	r0, r4, #48	; 0x30
}
    633a:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    return StepGenerator::Move(dist, moveTarget);
    633e:	f005 bf27 	b.w	c190 <_ZN9ClearCore13StepGenerator4MoveElNS0_10MoveTargetE>
    else if (!negDirection && m_limitInfo.InPosHWLimit) {
    6342:	071a      	lsls	r2, r3, #28
    6344:	d5f1      	bpl.n	632a <_ZN9ClearCore11MotorDriver4MoveElNS_13StepGenerator10MoveTargetE+0x7e>
        m_alertRegMotor.bit.MotionCanceledPositiveLimit = 1;
    6346:	f894 3128 	ldrb.w	r3, [r4, #296]	; 0x128
    634a:	f043 0302 	orr.w	r3, r3, #2
    634e:	f884 3128 	strb.w	r3, [r4, #296]	; 0x128
        if (m_statusRegMotor.bit.StepsActive ) {
    6352:	f894 3118 	ldrb.w	r3, [r4, #280]	; 0x118
    6356:	079b      	lsls	r3, r3, #30
    6358:	d406      	bmi.n	6368 <_ZN9ClearCore11MotorDriver4MoveElNS_13StepGenerator10MoveTargetE+0xbc>
}
    635a:	2000      	movs	r0, #0
    635c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    bool valid = true;
    6360:	2601      	movs	r6, #1
    6362:	e7b8      	b.n	62d6 <_ZN9ClearCore11MotorDriver4MoveElNS_13StepGenerator10MoveTargetE+0x2a>
        negDir = dist < 0;
    6364:	0fcd      	lsrs	r5, r1, #31
    6366:	e7ab      	b.n	62c0 <_ZN9ClearCore11MotorDriver4MoveElNS_13StepGenerator10MoveTargetE+0x14>
            MoveStopDecel();
    6368:	f104 0030 	add.w	r0, r4, #48	; 0x30
    636c:	2100      	movs	r1, #0
    636e:	f006 fa57 	bl	c820 <_ZN9ClearCore13StepGenerator13MoveStopDecelEm>
}
    6372:	2000      	movs	r0, #0
    6374:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
        m_alertRegMotor.bit.MotionCanceledNegativeLimit = 1;
    6378:	f894 3128 	ldrb.w	r3, [r4, #296]	; 0x128
    637c:	f043 0304 	orr.w	r3, r3, #4
    6380:	f884 3128 	strb.w	r3, [r4, #296]	; 0x128
    6384:	e7e5      	b.n	6352 <_ZN9ClearCore11MotorDriver4MoveElNS_13StepGenerator10MoveTargetE+0xa6>
            eStop = !(input->State());
    6386:	f8d9 3000 	ldr.w	r3, [r9]
    638a:	4648      	mov	r0, r9
    638c:	691b      	ldr	r3, [r3, #16]
    638e:	4798      	blx	r3
    6390:	fab0 f080 	clz	r0, r0
    6394:	0940      	lsrs	r0, r0, #5
    6396:	e7bb      	b.n	6310 <_ZN9ClearCore11MotorDriver4MoveElNS_13StepGenerator10MoveTargetE+0x64>
    6398:	20001afc 	.word	0x20001afc

0000639c <_ZThn48_N9ClearCore11MotorDriver4MoveElNS_13StepGenerator10MoveTargetE>:
    virtual bool Move(int32_t dist,
    639c:	f1a0 0030 	sub.w	r0, r0, #48	; 0x30
    63a0:	f7ff bf84 	b.w	62ac <_ZN9ClearCore11MotorDriver4MoveElNS_13StepGenerator10MoveTargetE>

000063a4 <_ZN9ClearCore11MotorDriver12MoveVelocityEl>:
bool MotorDriver::MoveVelocity(int32_t velocity) {
    63a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    if (m_alertRegMotor.reg) {
    63a6:	f8d0 3128 	ldr.w	r3, [r0, #296]	; 0x128
bool MotorDriver::MoveVelocity(int32_t velocity) {
    63aa:	4604      	mov	r4, r0
    63ac:	460e      	mov	r6, r1
    if (m_alertRegMotor.reg) {
    63ae:	2b00      	cmp	r3, #0
    63b0:	d04a      	beq.n	6448 <_ZN9ClearCore11MotorDriver12MoveVelocityEl+0xa4>
        m_alertRegMotor.bit.MotionCanceledInAlert = 1;
    63b2:	f890 3128 	ldrb.w	r3, [r0, #296]	; 0x128
    63b6:	f043 0301 	orr.w	r3, r3, #1
    63ba:	f880 3128 	strb.w	r3, [r0, #296]	; 0x128
        valid = false;
    63be:	2500      	movs	r5, #0
    63c0:	f894 3100 	ldrb.w	r3, [r4, #256]	; 0x100
    if (!EnableRequest()) {
    63c4:	b933      	cbnz	r3, 63d4 <_ZN9ClearCore11MotorDriver12MoveVelocityEl+0x30>
        m_alertRegMotor.bit.MotionCanceledMotorDisabled = 1;
    63c6:	f894 2128 	ldrb.w	r2, [r4, #296]	; 0x128
    63ca:	f042 0210 	orr.w	r2, r2, #16
        valid = false;
    63ce:	461d      	mov	r5, r3
        m_alertRegMotor.bit.MotionCanceledMotorDisabled = 1;
    63d0:	f884 2128 	strb.w	r2, [r4, #296]	; 0x128
    if (m_eStopConnector != CLEARCORE_PIN_INVALID) {
    63d4:	f9b4 113a 	ldrsh.w	r1, [r4, #314]	; 0x13a
    63d8:	1c48      	adds	r0, r1, #1
    63da:	d016      	beq.n	640a <_ZN9ClearCore11MotorDriver12MoveVelocityEl+0x66>
        Connector *input = SysMgr.ConnectorByIndex(m_eStopConnector);
    63dc:	4826      	ldr	r0, [pc, #152]	; (6478 <_ZN9ClearCore11MotorDriver12MoveVelocityEl+0xd4>)
    63de:	f003 fcad 	bl	9d3c <_ZN9ClearCore10SysManager16ConnectorByIndexE13ClearCorePins>
        if (input->Type() == ClearCore::Connector::CCIO_DIGITAL_IN_OUT_TYPE) {
    63e2:	6803      	ldr	r3, [r0, #0]
    63e4:	689b      	ldr	r3, [r3, #8]
        Connector *input = SysMgr.ConnectorByIndex(m_eStopConnector);
    63e6:	4607      	mov	r7, r0
        if (input->Type() == ClearCore::Connector::CCIO_DIGITAL_IN_OUT_TYPE) {
    63e8:	4798      	blx	r3
    63ea:	2809      	cmp	r0, #9
    63ec:	d03c      	beq.n	6468 <_ZN9ClearCore11MotorDriver12MoveVelocityEl+0xc4>
            eStop = !(inputB->DigitalIn::State());
    63ee:	4638      	mov	r0, r7
    63f0:	f7fe fdb6 	bl	4f60 <_ZN9ClearCore9DigitalIn5StateEv>
    63f4:	fab0 f080 	clz	r0, r0
    63f8:	0940      	lsrs	r0, r0, #5
    if (CheckEStopSensor()) {
    63fa:	b130      	cbz	r0, 640a <_ZN9ClearCore11MotorDriver12MoveVelocityEl+0x66>
        m_alertRegMotor.bit.MotionCanceledSensorEStop = 1;
    63fc:	f894 3128 	ldrb.w	r3, [r4, #296]	; 0x128
    6400:	f043 0308 	orr.w	r3, r3, #8
    6404:	f884 3128 	strb.w	r3, [r4, #296]	; 0x128
        valid = false;
    6408:	2500      	movs	r5, #0
    if (negDirection && m_limitInfo.InNegHWLimit) {
    640a:	2e00      	cmp	r6, #0
    640c:	f894 3040 	ldrb.w	r3, [r4, #64]	; 0x40
    6410:	da0c      	bge.n	642c <_ZN9ClearCore11MotorDriver12MoveVelocityEl+0x88>
    6412:	06d9      	lsls	r1, r3, #27
    6414:	d421      	bmi.n	645a <_ZN9ClearCore11MotorDriver12MoveVelocityEl+0xb6>
    if (!ValidateMove(velocity < 0)) {
    6416:	b18d      	cbz	r5, 643c <_ZN9ClearCore11MotorDriver12MoveVelocityEl+0x98>
    m_lastMoveWasPositional = false;
    6418:	2300      	movs	r3, #0
    return StepGenerator::MoveVelocity(velocity);
    641a:	4631      	mov	r1, r6
    m_lastMoveWasPositional = false;
    641c:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
    return StepGenerator::MoveVelocity(velocity);
    6420:	f104 0030 	add.w	r0, r4, #48	; 0x30
}
    6424:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    return StepGenerator::MoveVelocity(velocity);
    6428:	f005 beec 	b.w	c204 <_ZN9ClearCore13StepGenerator12MoveVelocityEl>
    else if (!negDirection && m_limitInfo.InPosHWLimit) {
    642c:	071a      	lsls	r2, r3, #28
    642e:	d5f2      	bpl.n	6416 <_ZN9ClearCore11MotorDriver12MoveVelocityEl+0x72>
        m_alertRegMotor.bit.MotionCanceledPositiveLimit = 1;
    6430:	f894 3128 	ldrb.w	r3, [r4, #296]	; 0x128
    6434:	f043 0302 	orr.w	r3, r3, #2
    6438:	f884 3128 	strb.w	r3, [r4, #296]	; 0x128
        if (m_statusRegMotor.bit.StepsActive ) {
    643c:	f894 3118 	ldrb.w	r3, [r4, #280]	; 0x118
    6440:	079b      	lsls	r3, r3, #30
    6442:	d403      	bmi.n	644c <_ZN9ClearCore11MotorDriver12MoveVelocityEl+0xa8>
}
    6444:	2000      	movs	r0, #0
    6446:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    bool valid = true;
    6448:	2501      	movs	r5, #1
    644a:	e7b9      	b.n	63c0 <_ZN9ClearCore11MotorDriver12MoveVelocityEl+0x1c>
            MoveStopDecel();
    644c:	f104 0030 	add.w	r0, r4, #48	; 0x30
    6450:	2100      	movs	r1, #0
    6452:	f006 f9e5 	bl	c820 <_ZN9ClearCore13StepGenerator13MoveStopDecelEm>
}
    6456:	2000      	movs	r0, #0
    6458:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        m_alertRegMotor.bit.MotionCanceledNegativeLimit = 1;
    645a:	f894 3128 	ldrb.w	r3, [r4, #296]	; 0x128
    645e:	f043 0304 	orr.w	r3, r3, #4
    6462:	f884 3128 	strb.w	r3, [r4, #296]	; 0x128
    6466:	e7e9      	b.n	643c <_ZN9ClearCore11MotorDriver12MoveVelocityEl+0x98>
            eStop = !(input->State());
    6468:	683b      	ldr	r3, [r7, #0]
    646a:	4638      	mov	r0, r7
    646c:	691b      	ldr	r3, [r3, #16]
    646e:	4798      	blx	r3
    6470:	fab0 f080 	clz	r0, r0
    6474:	0940      	lsrs	r0, r0, #5
    6476:	e7c0      	b.n	63fa <_ZN9ClearCore11MotorDriver12MoveVelocityEl+0x56>
    6478:	20001afc 	.word	0x20001afc

0000647c <_ZThn48_N9ClearCore11MotorDriver12MoveVelocityEl>:
    virtual bool MoveVelocity(int32_t velocity) override;
    647c:	f1a0 0030 	sub.w	r0, r0, #48	; 0x30
    6480:	f7ff bf90 	b.w	63a4 <_ZN9ClearCore11MotorDriver12MoveVelocityEl>

00006484 <_ZN9ClearCore11MotorDriver10InitializeE13ClearCorePins>:
void MotorDriver::Initialize(ClearCorePins clearCorePin) {
    6484:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    DATA_OUTPUT_STATE(m_aInfo->gpioPort, m_aDataMask, true);
    6486:	f8d0 30a4 	ldr.w	r3, [r0, #164]	; 0xa4
    648a:	4dbc      	ldr	r5, [pc, #752]	; (677c <_ZN9ClearCore11MotorDriver10InitializeE13ClearCorePins+0x2f8>)
    648c:	f993 3001 	ldrsb.w	r3, [r3, #1]
    6490:	f8d0 20b0 	ldr.w	r2, [r0, #176]	; 0xb0
    6494:	eb05 13c3 	add.w	r3, r5, r3, lsl #7
void MotorDriver::Initialize(ClearCorePins clearCorePin) {
    6498:	4604      	mov	r4, r0
    DATA_OUTPUT_STATE(m_aInfo->gpioPort, m_aDataMask, true);
    649a:	619a      	str	r2, [r3, #24]
    DATA_OUTPUT_STATE(m_bInfo->gpioPort, m_bDataMask, true);
    649c:	f8d0 30a8 	ldr.w	r3, [r0, #168]	; 0xa8
    64a0:	f8d0 20b8 	ldr.w	r2, [r0, #184]	; 0xb8
    64a4:	f993 3001 	ldrsb.w	r3, [r3, #1]
    64a8:	eb05 13c3 	add.w	r3, r5, r3, lsl #7
void MotorDriver::Initialize(ClearCorePins clearCorePin) {
    64ac:	460e      	mov	r6, r1
    DATA_OUTPUT_STATE(m_bInfo->gpioPort, m_bDataMask, true);
    64ae:	619a      	str	r2, [r3, #24]
    EnableRequest(false);
    64b0:	2100      	movs	r1, #0
    64b2:	f7ff fa49 	bl	5948 <_ZN9ClearCore11MotorDriver13EnableRequestEb>
    DigitalIn::Initialize(clearCorePin);
    64b6:	4631      	mov	r1, r6
    64b8:	4620      	mov	r0, r4
    64ba:	f7fe fd65 	bl	4f88 <_ZN9ClearCore9DigitalIn10InitializeE13ClearCorePins>
    PIN_CONFIGURATION(m_aInfo->gpioPort, m_aInfo->gpioPin,  0);
    64be:	f8d4 30a4 	ldr.w	r3, [r4, #164]	; 0xa4
    64c2:	f993 2001 	ldrsb.w	r2, [r3, #1]
    64c6:	7898      	ldrb	r0, [r3, #2]
    64c8:	eb05 12c2 	add.w	r2, r5, r2, lsl #7
    64cc:	1813      	adds	r3, r2, r0
    64ce:	2700      	movs	r7, #0
    64d0:	f883 7040 	strb.w	r7, [r3, #64]	; 0x40
    PIN_CONFIGURATION(m_bInfo->gpioPort, m_bInfo->gpioPin,  0);
    64d4:	f8d4 10a8 	ldr.w	r1, [r4, #168]	; 0xa8
    64d8:	f991 3001 	ldrsb.w	r3, [r1, #1]
    64dc:	788e      	ldrb	r6, [r1, #2]
    64de:	01db      	lsls	r3, r3, #7
    64e0:	18e9      	adds	r1, r5, r3
    64e2:	198d      	adds	r5, r1, r6
    PMUX_SELECTION(m_bInfo->gpioPort, m_bInfo->gpioPin, PER_TIMER_ALT);
    64e4:	f103 4382 	add.w	r3, r3, #1090519040	; 0x41000000
    PIN_CONFIGURATION(m_bInfo->gpioPort, m_bInfo->gpioPin,  0);
    64e8:	f885 7040 	strb.w	r7, [r5, #64]	; 0x40
    DATA_DIRECTION_OUTPUT(m_aInfo->gpioPort, m_aDataMask);
    64ec:	f8d4 50b0 	ldr.w	r5, [r4, #176]	; 0xb0
    64f0:	6095      	str	r5, [r2, #8]
    DATA_DIRECTION_OUTPUT(m_bInfo->gpioPort, m_bDataMask);
    64f2:	f8d4 50b8 	ldr.w	r5, [r4, #184]	; 0xb8
    64f6:	608d      	str	r5, [r1, #8]
    PMUX_SELECTION(m_aInfo->gpioPort, m_aInfo->gpioPin, PER_TIMER_ALT);
    64f8:	eb02 0250 	add.w	r2, r2, r0, lsr #1
    64fc:	f010 0f01 	tst.w	r0, #1
    6500:	f892 1030 	ldrb.w	r1, [r2, #48]	; 0x30
    6504:	f04f 0005 	mov.w	r0, #5
    PMUX_SELECTION(m_bInfo->gpioPort, m_bInfo->gpioPin, PER_TIMER_ALT);
    6508:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
    PMUX_SELECTION(m_aInfo->gpioPort, m_aInfo->gpioPin, PER_TIMER_ALT);
    650c:	bf14      	ite	ne
    650e:	f360 1107 	bfine	r1, r0, #4, #4
    6512:	f360 0103 	bfieq	r1, r0, #0, #4
    PMUX_SELECTION(m_bInfo->gpioPort, m_bInfo->gpioPin, PER_TIMER_ALT);
    6516:	eb03 0356 	add.w	r3, r3, r6, lsr #1
    PMUX_SELECTION(m_aInfo->gpioPort, m_aInfo->gpioPin, PER_TIMER_ALT);
    651a:	f882 1030 	strb.w	r1, [r2, #48]	; 0x30
    PMUX_SELECTION(m_bInfo->gpioPort, m_bInfo->gpioPin, PER_TIMER_ALT);
    651e:	f893 2030 	ldrb.w	r2, [r3, #48]	; 0x30
    6522:	07f0      	lsls	r0, r6, #31
    6524:	f04f 0105 	mov.w	r1, #5
    6528:	bf4c      	ite	mi
    652a:	f361 1207 	bfimi	r2, r1, #4, #4
    652e:	f361 0203 	bfipl	r2, r1, #0, #4
    6532:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
    Mode(CPM_MODE_A_DIRECT_B_DIRECT);
    6536:	6823      	ldr	r3, [r4, #0]
    6538:	4a91      	ldr	r2, [pc, #580]	; (6780 <_ZN9ClearCore11MotorDriver10InitializeE13ClearCorePins+0x2fc>)
    653a:	685b      	ldr	r3, [r3, #4]
    653c:	4293      	cmp	r3, r2
    653e:	f040 8119 	bne.w	6774 <_ZN9ClearCore11MotorDriver10InitializeE13ClearCorePins+0x2f0>
    if (newMode == m_mode) {
    6542:	79a3      	ldrb	r3, [r4, #6]
    6544:	2b09      	cmp	r3, #9
    6546:	d022      	beq.n	658e <_ZN9ClearCore11MotorDriver10InitializeE13ClearCorePins+0x10a>
            MoveStopAbrupt();
    6548:	f104 0030 	add.w	r0, r4, #48	; 0x30
    654c:	f006 f94c 	bl	c7e8 <_ZN9ClearCore13StepGenerator14MoveStopAbruptEv>
            PMUX_DISABLE(m_aInfo->gpioPort, m_aInfo->gpioPin);
    6550:	f8d4 10a4 	ldr.w	r1, [r4, #164]	; 0xa4
    6554:	4b89      	ldr	r3, [pc, #548]	; (677c <_ZN9ClearCore11MotorDriver10InitializeE13ClearCorePins+0x2f8>)
    6556:	f991 2001 	ldrsb.w	r2, [r1, #1]
    655a:	7889      	ldrb	r1, [r1, #2]
    655c:	eb03 12c2 	add.w	r2, r3, r2, lsl #7
    6560:	440a      	add	r2, r1
            m_mode = CPM_MODE_A_DIRECT_B_DIRECT;
    6562:	2009      	movs	r0, #9
            PMUX_DISABLE(m_aInfo->gpioPort, m_aInfo->gpioPin);
    6564:	f892 1040 	ldrb.w	r1, [r2, #64]	; 0x40
    6568:	f36f 0100 	bfc	r1, #0, #1
    656c:	f882 1040 	strb.w	r1, [r2, #64]	; 0x40
            PMUX_DISABLE(m_bInfo->gpioPort, m_bInfo->gpioPin);
    6570:	f8d4 20a8 	ldr.w	r2, [r4, #168]	; 0xa8
    6574:	f992 1001 	ldrsb.w	r1, [r2, #1]
    6578:	7892      	ldrb	r2, [r2, #2]
    657a:	eb03 13c1 	add.w	r3, r3, r1, lsl #7
    657e:	4413      	add	r3, r2
    6580:	f893 2040 	ldrb.w	r2, [r3, #64]	; 0x40
    6584:	f36f 0200 	bfc	r2, #0, #1
    6588:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
            m_mode = CPM_MODE_A_DIRECT_B_DIRECT;
    658c:	71a0      	strb	r0, [r4, #6]
    PMUX_SELECTION(m_inputPort, m_inputDataBit, PER_EXTINT);
    658e:	68e3      	ldr	r3, [r4, #12]
    6590:	6922      	ldr	r2, [r4, #16]
    6592:	01db      	lsls	r3, r3, #7
    6594:	f103 4182 	add.w	r1, r3, #1090519040	; 0x41000000
    6598:	f501 4100 	add.w	r1, r1, #32768	; 0x8000
    659c:	eb01 0152 	add.w	r1, r1, r2, lsr #1
    PMUX_ENABLE(m_inputPort, m_inputDataBit);
    65a0:	f103 4382 	add.w	r3, r3, #1090519040	; 0x41000000
    PMUX_SELECTION(m_inputPort, m_inputDataBit, PER_EXTINT);
    65a4:	f891 0030 	ldrb.w	r0, [r1, #48]	; 0x30
    65a8:	f012 0501 	ands.w	r5, r2, #1
    PMUX_ENABLE(m_inputPort, m_inputDataBit);
    65ac:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
    65b0:	4413      	add	r3, r2
    PMUX_SELECTION(m_inputPort, m_inputDataBit, PER_EXTINT);
    65b2:	bf14      	ite	ne
    65b4:	f36f 1007 	bfcne	r0, #4, #4
    65b8:	f365 0003 	bfieq	r0, r5, #0, #4
    65bc:	f881 0030 	strb.w	r0, [r1, #48]	; 0x30
    PMUX_ENABLE(m_inputPort, m_inputDataBit);
    65c0:	f893 2040 	ldrb.w	r2, [r3, #64]	; 0x40
    TcCount16 *tcCount = &tc_modules[m_hlfbTcNum]->COUNT16;
    65c4:	496f      	ldr	r1, [pc, #444]	; (6784 <_ZN9ClearCore11MotorDriver10InitializeE13ClearCorePins+0x300>)
    PMUX_ENABLE(m_inputPort, m_inputDataBit);
    65c6:	f042 0201 	orr.w	r2, r2, #1
    65ca:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    TcCount16 *tcCount = &tc_modules[m_hlfbTcNum]->COUNT16;
    65ce:	f894 00d6 	ldrb.w	r0, [r4, #214]	; 0xd6
    65d2:	f851 3020 	ldr.w	r3, [r1, r0, lsl #2]
    tcCount->CTRLA.bit.ENABLE = 0;
    65d6:	681a      	ldr	r2, [r3, #0]
    65d8:	f36f 0241 	bfc	r2, #1, #1
    65dc:	601a      	str	r2, [r3, #0]
    SYNCBUSY_WAIT(tcCount, TC_SYNCBUSY_ENABLE);
    65de:	691a      	ldr	r2, [r3, #16]
    65e0:	0792      	lsls	r2, r2, #30
    65e2:	d4fc      	bmi.n	65de <_ZN9ClearCore11MotorDriver10InitializeE13ClearCorePins+0x15a>
    tcCount->CTRLA.bit.SWRST = 1;
    65e4:	681a      	ldr	r2, [r3, #0]
    65e6:	f042 0201 	orr.w	r2, r2, #1
    65ea:	601a      	str	r2, [r3, #0]
    SYNCBUSY_WAIT(tcCount, TC_SYNCBUSY_SWRST);
    65ec:	691a      	ldr	r2, [r3, #16]
    65ee:	f012 0201 	ands.w	r2, r2, #1
    65f2:	d1fb      	bne.n	65ec <_ZN9ClearCore11MotorDriver10InitializeE13ClearCorePins+0x168>
    tcCount->CTRLA.bit.PRESCSYNC = TC_CTRLA_PRESCSYNC_GCLK_Val;
    65f4:	681d      	ldr	r5, [r3, #0]
    EIC->CTRLA.bit.ENABLE = 0;
    65f6:	4964      	ldr	r1, [pc, #400]	; (6788 <_ZN9ClearCore11MotorDriver10InitializeE13ClearCorePins+0x304>)
    tcCount->CTRLA.bit.PRESCSYNC = TC_CTRLA_PRESCSYNC_GCLK_Val;
    65f8:	f362 1505 	bfi	r5, r2, #4, #2
    65fc:	601d      	str	r5, [r3, #0]
    tcCount->CTRLA.bit.COPEN0 = 0;
    65fe:	681d      	ldr	r5, [r3, #0]
    6600:	f362 5514 	bfi	r5, r2, #20, #1
    6604:	601d      	str	r5, [r3, #0]
    tcCount->CTRLA.bit.COPEN1 = 0;
    6606:	681d      	ldr	r5, [r3, #0]
    6608:	f362 5555 	bfi	r5, r2, #21, #1
    660c:	601d      	str	r5, [r3, #0]
    tcCount->CTRLA.bit.CAPTEN0 = 1;
    660e:	681d      	ldr	r5, [r3, #0]
    6610:	f445 3580 	orr.w	r5, r5, #65536	; 0x10000
    6614:	601d      	str	r5, [r3, #0]
    tcCount->CTRLA.bit.CAPTEN1 = 1;
    6616:	681d      	ldr	r5, [r3, #0]
    6618:	f445 3500 	orr.w	r5, r5, #131072	; 0x20000
    661c:	601d      	str	r5, [r3, #0]
    tcCount->CTRLA.bit.ALOCK = 0;
    661e:	681d      	ldr	r5, [r3, #0]
    6620:	f362 25cb 	bfi	r5, r2, #11, #1
    6624:	601d      	str	r5, [r3, #0]
    tcCount->CTRLA.bit.PRESCALER = TC_CTRLA_PRESCALER_DIV1_Val;
    6626:	681d      	ldr	r5, [r3, #0]
    6628:	f362 250a 	bfi	r5, r2, #8, #3
    662c:	601d      	str	r5, [r3, #0]
    tcCount->CTRLA.bit.ONDEMAND = 1;
    662e:	681d      	ldr	r5, [r3, #0]
    6630:	f045 0580 	orr.w	r5, r5, #128	; 0x80
    6634:	601d      	str	r5, [r3, #0]
    tcCount->CTRLA.bit.RUNSTDBY = 1;
    6636:	681d      	ldr	r5, [r3, #0]
    6638:	f045 0540 	orr.w	r5, r5, #64	; 0x40
    663c:	601d      	str	r5, [r3, #0]
    tcCount->CTRLA.bit.MODE = TC_CTRLA_MODE_COUNT16_Val;
    663e:	681d      	ldr	r5, [r3, #0]
    6640:	f362 0583 	bfi	r5, r2, #2, #2
    6644:	601d      	str	r5, [r3, #0]
    tcCount->EVCTRL.bit.EVACT = TC_EVCTRL_EVACT_PPW_Val;
    6646:	88dd      	ldrh	r5, [r3, #6]
    6648:	2605      	movs	r6, #5
    664a:	f366 0502 	bfi	r5, r6, #0, #3
    664e:	80dd      	strh	r5, [r3, #6]
    tcCount->EVCTRL.bit.TCEI = 1;
    6650:	88dd      	ldrh	r5, [r3, #6]
    6652:	f045 0520 	orr.w	r5, r5, #32
    6656:	80dd      	strh	r5, [r3, #6]
    tcCount->EVCTRL.bit.MCEO0 = 0;
    6658:	88dd      	ldrh	r5, [r3, #6]
    665a:	f362 350c 	bfi	r5, r2, #12, #1
    665e:	80dd      	strh	r5, [r3, #6]
    tcCount->EVCTRL.bit.MCEO1 = 0;
    6660:	88dd      	ldrh	r5, [r3, #6]
    6662:	f362 354d 	bfi	r5, r2, #13, #1
    6666:	80dd      	strh	r5, [r3, #6]
    tcCount->EVCTRL.bit.OVFEO = 0;
    6668:	88dd      	ldrh	r5, [r3, #6]
    666a:	f362 2508 	bfi	r5, r2, #8, #1
    666e:	80dd      	strh	r5, [r3, #6]
    tcCount->EVCTRL.bit.TCINV = 1;
    6670:	88dd      	ldrh	r5, [r3, #6]
    6672:	f045 0510 	orr.w	r5, r5, #16
    6676:	80dd      	strh	r5, [r3, #6]
    EIC->CTRLA.bit.ENABLE = 0;
    6678:	780d      	ldrb	r5, [r1, #0]
    667a:	f362 0541 	bfi	r5, r2, #1, #1
    667e:	700d      	strb	r5, [r1, #0]
    EIC->EVCTRL.reg |= 1 << m_hlfbInfo->extInt;
    6680:	f8d4 20ac 	ldr.w	r2, [r4, #172]	; 0xac
    6684:	688e      	ldr	r6, [r1, #8]
    6686:	78d5      	ldrb	r5, [r2, #3]
    6688:	2201      	movs	r2, #1
    668a:	40aa      	lsls	r2, r5
    668c:	4316      	orrs	r6, r2
    668e:	608e      	str	r6, [r1, #8]
    6690:	08ef      	lsrs	r7, r5, #3
    EIC->ASYNCH.reg |= 1 << m_hlfbInfo->extInt;
    6692:	698e      	ldr	r6, [r1, #24]
    6694:	00bf      	lsls	r7, r7, #2
    6696:	f107 4e80 	add.w	lr, r7, #1073741824	; 0x40000000
    669a:	4316      	orrs	r6, r2
    669c:	f50e 5e20 	add.w	lr, lr, #10240	; 0x2800
    66a0:	618e      	str	r6, [r1, #24]
        (EIC_CONFIG_SENSE0_HIGH_Val << ((m_hlfbInfo->extInt & 7) * 4));
    66a2:	f005 0607 	and.w	r6, r5, #7
    66a6:	f8de c01c 	ldr.w	ip, [lr, #28]
    66aa:	00b7      	lsls	r7, r6, #2
    66ac:	2604      	movs	r6, #4
    66ae:	40be      	lsls	r6, r7
    66b0:	ea46 060c 	orr.w	r6, r6, ip
    EIC->CONFIG[m_hlfbInfo->extInt / 8].reg |=
    66b4:	f8ce 601c 	str.w	r6, [lr, #28]
    EIC->INTENCLR.bit.EXTINT = 1 << m_hlfbInfo->extInt;
    66b8:	68ce      	ldr	r6, [r1, #12]
    66ba:	b292      	uxth	r2, r2
    66bc:	f362 060f 	bfi	r6, r2, #0, #16
    66c0:	60ce      	str	r6, [r1, #12]
    EIC->CTRLA.bit.ENABLE = 1;
    66c2:	780a      	ldrb	r2, [r1, #0]
    66c4:	f042 0202 	orr.w	r2, r2, #2
    66c8:	700a      	strb	r2, [r1, #0]
    SYNCBUSY_WAIT(EIC, EIC_SYNCBUSY_ENABLE);
    66ca:	684a      	ldr	r2, [r1, #4]
    66cc:	f012 0202 	ands.w	r2, r2, #2
    66d0:	d1fb      	bne.n	66ca <_ZN9ClearCore11MotorDriver10InitializeE13ClearCorePins+0x246>
    SET_CLOCK_SOURCE(EVSYS_GCLK_ID_0 + m_hlfbEvt, 6);
    66d2:	f894 e0d7 	ldrb.w	lr, [r4, #215]	; 0xd7
    66d6:	492d      	ldr	r1, [pc, #180]	; (678c <_ZN9ClearCore11MotorDriver10InitializeE13ClearCorePins+0x308>)
    66d8:	f10e 072b 	add.w	r7, lr, #43	; 0x2b
    66dc:	463e      	mov	r6, r7
    66de:	f851 c027 	ldr.w	ip, [r1, r7, lsl #2]
    66e2:	f362 1c86 	bfi	ip, r2, #6, #1
    66e6:	f841 c027 	str.w	ip, [r1, r7, lsl #2]
    66ea:	f851 2026 	ldr.w	r2, [r1, r6, lsl #2]
    66ee:	0657      	lsls	r7, r2, #25
    66f0:	d4fb      	bmi.n	66ea <_ZN9ClearCore11MotorDriver10InitializeE13ClearCorePins+0x266>
    66f2:	f851 2026 	ldr.w	r2, [r1, r6, lsl #2]
    66f6:	4f25      	ldr	r7, [pc, #148]	; (678c <_ZN9ClearCore11MotorDriver10InitializeE13ClearCorePins+0x308>)
    66f8:	f04f 0c06 	mov.w	ip, #6
    66fc:	f36c 0203 	bfi	r2, ip, #0, #4
    6700:	f841 2026 	str.w	r2, [r1, r6, lsl #2]
    6704:	f851 2026 	ldr.w	r2, [r1, r6, lsl #2]
    6708:	f042 0240 	orr.w	r2, r2, #64	; 0x40
    670c:	f841 2026 	str.w	r2, [r1, r6, lsl #2]
    6710:	687a      	ldr	r2, [r7, #4]
    6712:	f012 0f18 	tst.w	r2, #24
    6716:	d1fb      	bne.n	6710 <_ZN9ClearCore11MotorDriver10InitializeE13ClearCorePins+0x28c>
    EVSYS->USER[EVSYS_ID_USER_TC0_EVU + m_hlfbTcNum].reg = m_hlfbEvt + 1;
    6718:	4a1d      	ldr	r2, [pc, #116]	; (6790 <_ZN9ClearCore11MotorDriver10InitializeE13ClearCorePins+0x30c>)
    EvsysChannel *theEvCh = &EVSYS->Channel[m_hlfbEvt];
    671a:	4e1e      	ldr	r6, [pc, #120]	; (6794 <_ZN9ClearCore11MotorDriver10InitializeE13ClearCorePins+0x310>)
    EVSYS->USER[EVSYS_ID_USER_TC0_EVU + m_hlfbTcNum].reg = m_hlfbEvt + 1;
    671c:	3074      	adds	r0, #116	; 0x74
    671e:	f10e 0101 	add.w	r1, lr, #1
    EvsysChannel *theEvCh = &EVSYS->Channel[m_hlfbEvt];
    6722:	fa0f fe8e 	sxth.w	lr, lr
    EVSYS->USER[EVSYS_ID_USER_TC0_EVU + m_hlfbTcNum].reg = m_hlfbEvt + 1;
    6726:	f842 1020 	str.w	r1, [r2, r0, lsl #2]
    EvsysChannel *theEvCh = &EVSYS->Channel[m_hlfbEvt];
    672a:	eb06 02ce 	add.w	r2, r6, lr, lsl #3
    theEvCh->CHINTFLAG.bit.EVD = 1;
    672e:	7991      	ldrb	r1, [r2, #6]
    6730:	f041 0102 	orr.w	r1, r1, #2
    6734:	7191      	strb	r1, [r2, #6]
    while (theEvCh->CHSTATUS.reg & EVSYS_CHSTATUS_RDYUSR) {
    6736:	79d1      	ldrb	r1, [r2, #7]
    6738:	07c8      	lsls	r0, r1, #31
    673a:	d4fc      	bmi.n	6736 <_ZN9ClearCore11MotorDriver10InitializeE13ClearCorePins+0x2b2>
        EVSYS_CHANNEL_EVGEN(EVSYS_ID_GEN_EIC_EXTINT_0 + m_hlfbInfo->extInt) |
    673c:	3512      	adds	r5, #18
    673e:	f005 057f 	and.w	r5, r5, #127	; 0x7f
    6742:	f445 7500 	orr.w	r5, r5, #512	; 0x200
    theEvCh->CHANNEL.reg =
    6746:	f846 503e 	str.w	r5, [r6, lr, lsl #3]
    while (theEvCh->CHSTATUS.reg & EVSYS_CHSTATUS_BUSYCH) {
    674a:	79d1      	ldrb	r1, [r2, #7]
    674c:	0789      	lsls	r1, r1, #30
    674e:	d4fc      	bmi.n	674a <_ZN9ClearCore11MotorDriver10InitializeE13ClearCorePins+0x2c6>
    tcCount->CTRLA.bit.ENABLE = 1;
    6750:	681a      	ldr	r2, [r3, #0]
    6752:	f042 0202 	orr.w	r2, r2, #2
    6756:	601a      	str	r2, [r3, #0]
    SYNCBUSY_WAIT(tcCount, TC_SYNCBUSY_ENABLE);
    6758:	691a      	ldr	r2, [r3, #16]
    675a:	f012 0202 	ands.w	r2, r2, #2
    675e:	d1fb      	bne.n	6758 <_ZN9ClearCore11MotorDriver10InitializeE13ClearCorePins+0x2d4>
    m_initialized = true;
    6760:	2301      	movs	r3, #1
    m_statusRegMotor.reg = 0;
    6762:	f8c4 2118 	str.w	r2, [r4, #280]	; 0x118
    m_statusRegMotorRisen.reg = 0;
    6766:	f8c4 211c 	str.w	r2, [r4, #284]	; 0x11c
    m_statusRegMotorFallen.reg = 0;
    676a:	f8c4 2120 	str.w	r2, [r4, #288]	; 0x120
    m_initialized = true;
    676e:	f884 312c 	strb.w	r3, [r4, #300]	; 0x12c
    6772:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    Mode(CPM_MODE_A_DIRECT_B_DIRECT);
    6774:	2109      	movs	r1, #9
    6776:	4620      	mov	r0, r4
    6778:	4798      	blx	r3
    677a:	e708      	b.n	658e <_ZN9ClearCore11MotorDriver10InitializeE13ClearCorePins+0x10a>
    677c:	41008000 	.word	0x41008000
    6780:	00005561 	.word	0x00005561
    6784:	00022874 	.word	0x00022874
    6788:	40002800 	.word	0x40002800
    678c:	40001c00 	.word	0x40001c00
    6790:	4100e000 	.word	0x4100e000
    6794:	4100e020 	.word	0x4100e020

00006798 <_ZN9ClearCore9SerialUsb6ParityENS_7ISerial9_ParitiesE>:

        \return Returns true if port accepted the format change request.
    **/
    bool Parity(Parities newParity) override {
        return newParity == Parities::PARITY_N;
    }
    6798:	f1a1 0002 	sub.w	r0, r1, #2
    679c:	fab0 f080 	clz	r0, r0
    67a0:	0940      	lsrs	r0, r0, #5
    67a2:	4770      	bx	lr

000067a4 <_ZN9ClearCore9SerialUsb6ParityEv>:

        \return Returns transmission parity enumeration.
    **/
    Parities Parity() override {
        return Parities::PARITY_N;
    }
    67a4:	2002      	movs	r0, #2
    67a6:	4770      	bx	lr

000067a8 <_ZN9ClearCore9SerialUsb8StopBitsEh>:

        For USB Serial ports, only 1 stop bit is supported.
    **/
    bool StopBits(uint8_t bits) override {
        return bits == 1;
    }
    67a8:	f1a1 0001 	sub.w	r0, r1, #1
    67ac:	fab0 f080 	clz	r0, r0
    67b0:	0940      	lsrs	r0, r0, #5
    67b2:	4770      	bx	lr

000067b4 <_ZN9ClearCore9SerialUsb8CharSizeEh>:

        For USB Serial ports, only 8-bit characters are supported.
    **/
    bool CharSize(uint8_t size) override {
        return size == 8;
    }
    67b4:	f1a1 0008 	sub.w	r0, r1, #8
    67b8:	fab0 f080 	clz	r0, r0
    67bc:	0940      	lsrs	r0, r0, #5
    67be:	4770      	bx	lr

000067c0 <_ZN9ClearCore9SerialUsb4ModeEv>:

        \return The connector's current operational mode.
    **/
    virtual ConnectorModes Mode() override {
        return Connector::Mode();
    }
    67c0:	7a80      	ldrb	r0, [r0, #10]
    67c2:	4770      	bx	lr

000067c4 <_ZThn4_N9ClearCore9SerialUsb4ModeEv>:
    virtual ConnectorModes Mode() override {
    67c4:	f1a0 0004 	sub.w	r0, r0, #4
    67c8:	e7fa      	b.n	67c0 <_ZN9ClearCore9SerialUsb4ModeEv>
    67ca:	bf00      	nop

000067cc <_ZN9ClearCore9SerialUsb4ModeENS_9Connector14ConnectorModesE>:
        \param[in] newMode The new mode to be set.
        The only valid mode is #USB_CDC.
        \return Returns false if the mode is invalid or setup fails.
    **/
    bool Mode(ConnectorModes newMode) override {
        return (m_mode == newMode);
    67cc:	7a80      	ldrb	r0, [r0, #10]
    }
    67ce:	1a40      	subs	r0, r0, r1
    67d0:	fab0 f080 	clz	r0, r0
    67d4:	0940      	lsrs	r0, r0, #5
    67d6:	4770      	bx	lr

000067d8 <_ZThn4_N9ClearCore9SerialUsb4ModeENS_9Connector14ConnectorModesE>:
    bool Mode(ConnectorModes newMode) override {
    67d8:	f1a0 0004 	sub.w	r0, r0, #4
    67dc:	e7f6      	b.n	67cc <_ZN9ClearCore9SerialUsb4ModeENS_9Connector14ConnectorModesE>
    67de:	bf00      	nop

000067e0 <_ZN9ClearCore9SerialUsb4TypeEv>:

        \return The type of the current connector.
    **/
    Connector::ConnectorTypes Type() override {
        return Connector::SERIAL_USB_TYPE;
    }
    67e0:	2008      	movs	r0, #8
    67e2:	4770      	bx	lr

000067e4 <_ZThn4_N9ClearCore9SerialUsb4TypeEv>:
    Connector::ConnectorTypes Type() override {
    67e4:	f1a0 0004 	sub.w	r0, r0, #4
    67e8:	e7fa      	b.n	67e0 <_ZN9ClearCore9SerialUsb4TypeEv>
    67ea:	bf00      	nop

000067ec <_ZN9ClearCore9SerialUsb11IsInHwFaultEv>:
        return true;
    }

    bool IsInHwFault() override {
        return false;
    }
    67ec:	2000      	movs	r0, #0
    67ee:	4770      	bx	lr

000067f0 <_ZThn4_N9ClearCore9SerialUsb11IsInHwFaultEv>:
    bool IsInHwFault() override {
    67f0:	f1a0 0004 	sub.w	r0, r0, #4
    67f4:	e7fa      	b.n	67ec <_ZN9ClearCore9SerialUsb11IsInHwFaultEv>
    67f6:	bf00      	nop

000067f8 <_ZN9ClearCore9SerialUsb10InitializeE13ClearCorePins>:
    /**
        Initialize hardware and/or internal state.
    **/
    void Initialize(ClearCorePins clearCorePin) override {
        m_index = clearCorePin;
        m_mode = USB_CDC;
    67f8:	2311      	movs	r3, #17
        m_index = clearCorePin;
    67fa:	8181      	strh	r1, [r0, #12]
        m_mode = USB_CDC;
    67fc:	7283      	strb	r3, [r0, #10]
    67fe:	4770      	bx	lr

00006800 <_ZThn4_N9ClearCore9SerialUsb10InitializeE13ClearCorePins>:
    void Initialize(ClearCorePins clearCorePin) override {
    6800:	f1a0 0004 	sub.w	r0, r0, #4
    6804:	e7f8      	b.n	67f8 <_ZN9ClearCore9SerialUsb10InitializeE13ClearCorePins>
    6806:	bf00      	nop

00006808 <_ZN9ClearCore9SerialUsb7RefreshEv>:
    /**
        \brief Update connector's state.

        \return Update the internal state.
    **/
    void Refresh() override {};
    6808:	4770      	bx	lr
    680a:	bf00      	nop

0000680c <_ZThn4_N9ClearCore9SerialUsb7RefreshEv>:
    680c:	f1a0 0004 	sub.w	r0, r0, #4
    6810:	e7fa      	b.n	6808 <_ZN9ClearCore9SerialUsb7RefreshEv>
    6812:	bf00      	nop

00006814 <_ZN9ClearCore9SerialUsb10FlushInputEv>:

SerialUsb::SerialUsb(uint16_t index) :
    m_index(index) {}

void SerialUsb::FlushInput() {
    UsbMgr.FlushInput();
    6814:	4b01      	ldr	r3, [pc, #4]	; (681c <_ZN9ClearCore9SerialUsb10FlushInputEv+0x8>)
    6816:	6818      	ldr	r0, [r3, #0]
    6818:	f001 b8ae 	b.w	7978 <_ZN9ClearCore10UsbManager10FlushInputEv>
    681c:	20000c04 	.word	0x20000c04

00006820 <_ZN9ClearCore9SerialUsb19WaitForTransmitIdleEv>:
int32_t SerialUsb::AvailableForWrite() {
    return UsbMgr.AvailableForWrite();
}

void SerialUsb::WaitForTransmitIdle() {
    UsbMgr.WaitForWriteFinish();
    6820:	4b01      	ldr	r3, [pc, #4]	; (6828 <_ZN9ClearCore9SerialUsb19WaitForTransmitIdleEv+0x8>)
    6822:	6818      	ldr	r0, [r3, #0]
    6824:	f001 b8b6 	b.w	7994 <_ZN9ClearCore10UsbManager18WaitForWriteFinishEv>
    6828:	20000c04 	.word	0x20000c04

0000682c <_ZN9ClearCore9SerialUsb10PortIsOpenEv>:
}

SerialUsb::operator bool() {
    return static_cast<bool>(UsbMgr);
    682c:	4b01      	ldr	r3, [pc, #4]	; (6834 <_ZN9ClearCore9SerialUsb10PortIsOpenEv+0x8>)
    682e:	6818      	ldr	r0, [r3, #0]
    6830:	f001 b8ca 	b.w	79c8 <_ZN9ClearCore10UsbManagercvbEv>
    6834:	20000c04 	.word	0x20000c04

00006838 <_ZN9ClearCore9SerialUsb8PortOpenEv>:
    UsbMgr.PortOpen();
    6838:	4b01      	ldr	r3, [pc, #4]	; (6840 <_ZN9ClearCore9SerialUsb8PortOpenEv+0x8>)
    683a:	6818      	ldr	r0, [r3, #0]
    683c:	f001 b880 	b.w	7940 <_ZN9ClearCore10UsbManager8PortOpenEv>
    6840:	20000c04 	.word	0x20000c04

00006844 <_ZN9ClearCore9SerialUsb9PortCloseEv>:
    UsbMgr.PortClose();
    6844:	4b01      	ldr	r3, [pc, #4]	; (684c <_ZN9ClearCore9SerialUsb9PortCloseEv+0x8>)
    6846:	6818      	ldr	r0, [r3, #0]
    6848:	f001 bc54 	b.w	80f4 <_ZN9ClearCore10UsbManager9PortCloseEv>
    684c:	20000c04 	.word	0x20000c04

00006850 <_ZN9ClearCore9SerialUsb5SpeedEm>:
    return UsbMgr.Speed(bitsPerSecond);
    6850:	4b01      	ldr	r3, [pc, #4]	; (6858 <_ZN9ClearCore9SerialUsb5SpeedEm+0x8>)
    6852:	6818      	ldr	r0, [r3, #0]
    6854:	f001 b86c 	b.w	7930 <_ZN9ClearCore10UsbManager5SpeedEm>
    6858:	20000c04 	.word	0x20000c04

0000685c <_ZN9ClearCore9SerialUsb5SpeedEv>:
    return UsbMgr.Speed();
    685c:	4b01      	ldr	r3, [pc, #4]	; (6864 <_ZN9ClearCore9SerialUsb5SpeedEv+0x8>)
    685e:	6818      	ldr	r0, [r3, #0]
    6860:	f001 b868 	b.w	7934 <_ZN9ClearCore10UsbManager5SpeedEv>
    6864:	20000c04 	.word	0x20000c04

00006868 <_ZN9ClearCore9SerialUsb7CharGetEv>:
    return UsbMgr.CharGet();
    6868:	4b01      	ldr	r3, [pc, #4]	; (6870 <_ZN9ClearCore9SerialUsb7CharGetEv+0x8>)
    686a:	6818      	ldr	r0, [r3, #0]
    686c:	f001 b8ca 	b.w	7a04 <_ZN9ClearCore10UsbManager7CharGetEv>
    6870:	20000c04 	.word	0x20000c04

00006874 <_ZN9ClearCore9SerialUsb8CharPeekEv>:
    return UsbMgr.CharPeek();
    6874:	4b01      	ldr	r3, [pc, #4]	; (687c <_ZN9ClearCore9SerialUsb8CharPeekEv+0x8>)
    6876:	6818      	ldr	r0, [r3, #0]
    6878:	f001 b9f0 	b.w	7c5c <_ZN9ClearCore10UsbManager8CharPeekEv>
    687c:	20000c04 	.word	0x20000c04

00006880 <_ZN9ClearCore9SerialUsb8SendCharEh>:
    return UsbMgr.SendChar(charToSend);
    6880:	4b01      	ldr	r3, [pc, #4]	; (6888 <_ZN9ClearCore9SerialUsb8SendCharEh+0x8>)
    6882:	6818      	ldr	r0, [r3, #0]
    6884:	f001 b9f6 	b.w	7c74 <_ZN9ClearCore10UsbManager8SendCharEh>
    6888:	20000c04 	.word	0x20000c04

0000688c <_ZN9ClearCore9SerialUsb16AvailableForReadEv>:
    return UsbMgr.AvailableForRead();
    688c:	4b01      	ldr	r3, [pc, #4]	; (6894 <_ZN9ClearCore9SerialUsb16AvailableForReadEv+0x8>)
    688e:	6818      	ldr	r0, [r3, #0]
    6890:	f001 ba24 	b.w	7cdc <_ZN9ClearCore10UsbManager16AvailableForReadEv>
    6894:	20000c04 	.word	0x20000c04

00006898 <_ZN9ClearCore9SerialUsb17AvailableForWriteEv>:
    return UsbMgr.AvailableForWrite();
    6898:	4b01      	ldr	r3, [pc, #4]	; (68a0 <_ZN9ClearCore9SerialUsb17AvailableForWriteEv+0x8>)
    689a:	6818      	ldr	r0, [r3, #0]
    689c:	f001 ba26 	b.w	7cec <_ZN9ClearCore10UsbManager17AvailableForWriteEv>
    68a0:	20000c04 	.word	0x20000c04

000068a4 <_ZN9ClearCore9SerialUsb10IsWritableEv>:
        return PortIsOpen();
    68a4:	6803      	ldr	r3, [r0, #0]
    68a6:	4a04      	ldr	r2, [pc, #16]	; (68b8 <_ZN9ClearCore9SerialUsb10IsWritableEv+0x14>)
    68a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    68aa:	4293      	cmp	r3, r2
    68ac:	d103      	bne.n	68b6 <_ZN9ClearCore9SerialUsb10IsWritableEv+0x12>
    return static_cast<bool>(UsbMgr);
    68ae:	4b03      	ldr	r3, [pc, #12]	; (68bc <_ZN9ClearCore9SerialUsb10IsWritableEv+0x18>)
    68b0:	6818      	ldr	r0, [r3, #0]
    68b2:	f001 b889 	b.w	79c8 <_ZN9ClearCore10UsbManagercvbEv>
    68b6:	4718      	bx	r3
    68b8:	0000682d 	.word	0x0000682d
    68bc:	20000c04 	.word	0x20000c04

000068c0 <_ZThn4_N9ClearCore9SerialUsb10IsWritableEv>:
    bool IsWritable() override {
    68c0:	f1a0 0004 	sub.w	r0, r0, #4
    68c4:	e7ee      	b.n	68a4 <_ZN9ClearCore9SerialUsb10IsWritableEv>
    68c6:	bf00      	nop

000068c8 <_ZN9ClearCore9SerialUsb5StateEv>:
    int16_t State() override {
    68c8:	b508      	push	{r3, lr}
        return PortIsOpen();
    68ca:	6803      	ldr	r3, [r0, #0]
    68cc:	4a06      	ldr	r2, [pc, #24]	; (68e8 <_ZN9ClearCore9SerialUsb5StateEv+0x20>)
    68ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    68d0:	4293      	cmp	r3, r2
    68d2:	d105      	bne.n	68e0 <_ZN9ClearCore9SerialUsb5StateEv+0x18>
    68d4:	4b05      	ldr	r3, [pc, #20]	; (68ec <_ZN9ClearCore9SerialUsb5StateEv+0x24>)
    68d6:	6818      	ldr	r0, [r3, #0]
    68d8:	f001 f876 	bl	79c8 <_ZN9ClearCore10UsbManagercvbEv>
    }
    68dc:	b200      	sxth	r0, r0
    68de:	bd08      	pop	{r3, pc}
        return PortIsOpen();
    68e0:	4798      	blx	r3
    }
    68e2:	b200      	sxth	r0, r0
    68e4:	bd08      	pop	{r3, pc}
    68e6:	bf00      	nop
    68e8:	0000682d 	.word	0x0000682d
    68ec:	20000c04 	.word	0x20000c04

000068f0 <_ZThn4_N9ClearCore9SerialUsb5StateEv>:
    int16_t State() override {
    68f0:	f1a0 0004 	sub.w	r0, r0, #4
    68f4:	e7e8      	b.n	68c8 <_ZN9ClearCore9SerialUsb5StateEv>
    68f6:	bf00      	nop

000068f8 <_ZN9ClearCore9SerialUsb5StateEs>:
    bool State(int16_t newState) override {
    68f8:	b508      	push	{r3, lr}
            PortOpen();
    68fa:	6803      	ldr	r3, [r0, #0]
        if (newState) {
    68fc:	b961      	cbnz	r1, 6918 <_ZN9ClearCore9SerialUsb5StateEs+0x20>
    68fe:	4a0b      	ldr	r2, [pc, #44]	; (692c <_ZN9ClearCore9SerialUsb5StateEs+0x34>)
            PortClose();
    6900:	68db      	ldr	r3, [r3, #12]
    6902:	4293      	cmp	r3, r2
    6904:	d105      	bne.n	6912 <_ZN9ClearCore9SerialUsb5StateEs+0x1a>
    UsbMgr.PortClose();
    6906:	4b0a      	ldr	r3, [pc, #40]	; (6930 <_ZN9ClearCore9SerialUsb5StateEs+0x38>)
    6908:	6818      	ldr	r0, [r3, #0]
    690a:	f001 fbf3 	bl	80f4 <_ZN9ClearCore10UsbManager9PortCloseEv>
    }
    690e:	2001      	movs	r0, #1
    6910:	bd08      	pop	{r3, pc}
            PortClose();
    6912:	4798      	blx	r3
    }
    6914:	2001      	movs	r0, #1
    6916:	bd08      	pop	{r3, pc}
    6918:	4a06      	ldr	r2, [pc, #24]	; (6934 <_ZN9ClearCore9SerialUsb5StateEs+0x3c>)
            PortOpen();
    691a:	689b      	ldr	r3, [r3, #8]
    691c:	4293      	cmp	r3, r2
    691e:	d1f8      	bne.n	6912 <_ZN9ClearCore9SerialUsb5StateEs+0x1a>
    UsbMgr.PortOpen();
    6920:	4b03      	ldr	r3, [pc, #12]	; (6930 <_ZN9ClearCore9SerialUsb5StateEs+0x38>)
    6922:	6818      	ldr	r0, [r3, #0]
    6924:	f001 f80c 	bl	7940 <_ZN9ClearCore10UsbManager8PortOpenEv>
    }
    6928:	2001      	movs	r0, #1
    692a:	bd08      	pop	{r3, pc}
    692c:	00006845 	.word	0x00006845
    6930:	20000c04 	.word	0x20000c04
    6934:	00006839 	.word	0x00006839

00006938 <_ZThn4_N9ClearCore9SerialUsb5StateEs>:
    bool State(int16_t newState) override {
    6938:	f1a0 0004 	sub.w	r0, r0, #4
    693c:	e7dc      	b.n	68f8 <_ZN9ClearCore9SerialUsb5StateEs>
    693e:	bf00      	nop

00006940 <_ZN9ClearCore19DigitalInOutHBridge4ModeEv>:

        \return The connector's current operational mode.
    **/
    virtual ConnectorModes Mode() override {
        return Connector::Mode();
    }
    6940:	7980      	ldrb	r0, [r0, #6]
    6942:	4770      	bx	lr

00006944 <_ZN9ClearCore13StatusManager8InstanceEv>:
#define UNDER_VOLTAGE_EXIT_CNT ((uint16_t)(UNDER_VOLTAGE_EXIT_V * (1 << 15) / \
   AdcManager::ADC_CHANNEL_MAX_FLOAT[AdcManager::ADC_VSUPPLY_MON]))


// Ensures that only one instance of StatusManager is ever created.
StatusManager &StatusManager::Instance() {
    6944:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    static StatusManager *instance = new StatusManager;
    6946:	4d19      	ldr	r5, [pc, #100]	; (69ac <_ZN9ClearCore13StatusManager8InstanceEv+0x68>)
    6948:	682c      	ldr	r4, [r5, #0]
    694a:	f014 0401 	ands.w	r4, r4, #1
    694e:	d002      	beq.n	6956 <_ZN9ClearCore13StatusManager8InstanceEv+0x12>
    6950:	4b17      	ldr	r3, [pc, #92]	; (69b0 <_ZN9ClearCore13StatusManager8InstanceEv+0x6c>)
    6952:	6818      	ldr	r0, [r3, #0]
    6954:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    6956:	2044      	movs	r0, #68	; 0x44
    6958:	f00c fb36 	bl	12fc8 <_Znwj>
    695c:	4a14      	ldr	r2, [pc, #80]	; (69b0 <_ZN9ClearCore13StatusManager8InstanceEv+0x6c>)
          m_strobeOnOffTicks(250),
          m_blinkTicks(2500),
          m_prestartTicks(5000),
          m_startTicks(11500),
          m_pregroupTicks(5000),
          m_precodeTicks(2500) {}
    695e:	4f15      	ldr	r7, [pc, #84]	; (69b4 <_ZN9ClearCore13StatusManager8InstanceEv+0x70>)
    6960:	4e15      	ldr	r6, [pc, #84]	; (69b8 <_ZN9ClearCore13StatusManager8InstanceEv+0x74>)
    6962:	4916      	ldr	r1, [pc, #88]	; (69bc <_ZN9ClearCore13StatusManager8InstanceEv+0x78>)

        /**
            Status Register default constructor
        **/
        StatusRegister() {
            reg = 0;
    6964:	6004      	str	r4, [r0, #0]
    6966:	2301      	movs	r3, #1
    6968:	6044      	str	r4, [r0, #4]
    696a:	6084      	str	r4, [r0, #8]
    696c:	60c4      	str	r4, [r0, #12]
    696e:	6104      	str	r4, [r0, #16]
    SysConnectorState() : reg(0) {}
    6970:	6144      	str	r4, [r0, #20]
    6972:	6184      	str	r4, [r0, #24]
    6974:	61c4      	str	r4, [r0, #28]
    6976:	6244      	str	r4, [r0, #36]	; 0x24
    6978:	f880 4028 	strb.w	r4, [r0, #40]	; 0x28
    697c:	f880 402a 	strb.w	r4, [r0, #42]	; 0x2a
    6980:	f880 402b 	strb.w	r4, [r0, #43]	; 0x2b
          m_statusRegAccum(),
          m_statusRegRisen(),
          m_statusRegFallen(),
          m_faultLed(ShiftRegister::SR_NO_FEEDBACK_MASK),
          m_disableMotors(false),
          m_hbridgeResetting(false) {}
    6984:	6204      	str	r4, [r0, #32]
    6986:	f880 4029 	strb.w	r4, [r0, #41]	; 0x29
    698a:	8584      	strh	r4, [r0, #44]	; 0x2c
    698c:	85c4      	strh	r4, [r0, #46]	; 0x2e
    698e:	8604      	strh	r4, [r0, #48]	; 0x30
    6990:	f880 4032 	strb.w	r4, [r0, #50]	; 0x32
    6994:	f880 4033 	strb.w	r4, [r0, #51]	; 0x33
    6998:	f880 4040 	strb.w	r4, [r0, #64]	; 0x40
    699c:	f880 4041 	strb.w	r4, [r0, #65]	; 0x41
    69a0:	6347      	str	r7, [r0, #52]	; 0x34
    69a2:	6386      	str	r6, [r0, #56]	; 0x38
    69a4:	63c1      	str	r1, [r0, #60]	; 0x3c
    69a6:	6010      	str	r0, [r2, #0]
    69a8:	602b      	str	r3, [r5, #0]
    return *instance;
}
    69aa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    69ac:	20000bf4 	.word	0x20000bf4
    69b0:	20000bfc 	.word	0x20000bfc
    69b4:	09c400fa 	.word	0x09c400fa
    69b8:	2cec1388 	.word	0x2cec1388
    69bc:	09c41388 	.word	0x09c41388

000069c0 <_ZN9ClearCore13StatusManager8StatusRTENS0_14StatusRegisterE>:

StatusManager::StatusRegister StatusManager::StatusRT(StatusRegister mask) {
    StatusRegister statusReg;
    statusReg.reg = atomic_load_n(&m_statusRegRT.reg) & mask.reg;
    69c0:	6840      	ldr	r0, [r0, #4]
    69c2:	f3bf 8f5b 	dmb	ish
    return statusReg;
}
    69c6:	4008      	ands	r0, r1
    69c8:	4770      	bx	lr
    69ca:	bf00      	nop

000069cc <_ZN9ClearCore13StatusManager14AdcIsInTimeoutEv>:
    statusReg.reg = atomic_load_n(&m_statusRegRT.reg) & mask.reg;
    69cc:	6840      	ldr	r0, [r0, #4]
    69ce:	f3bf 8f5b 	dmb	ish
}

bool StatusManager::AdcIsInTimeout() {
    StatusRegister statusReg = StatusRT();
    return statusReg.bit.AdcTimeout;
}
    69d2:	f3c0 2000 	ubfx	r0, r0, #8, #1
    69d6:	4770      	bx	lr

000069d8 <_ZN9ClearCore13StatusManager10InitializeENS_13ShiftRegister5MasksE>:
inline bool HBridgeFaultCheck() {
    return (!static_cast<bool>(PORT->Group[OutFault_04or05.gpioPort].IN.reg &
                               (1UL << OutFault_04or05.gpioPin)));
}

bool StatusManager::Initialize(ShiftRegister::Masks faultLed) {
    69d8:	b508      	push	{r3, lr}
    m_faultLed = faultLed;
    m_disableMotors = false;
    69da:	2300      	movs	r3, #0
    m_faultLed = faultLed;
    69dc:	6201      	str	r1, [r0, #32]
    m_disableMotors = false;
    69de:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40
    m_statusRegSinceStartup = 0;
    69e2:	6003      	str	r3, [r0, #0]
    ShiftReg.DiagnosticLedSweep();
    69e4:	4802      	ldr	r0, [pc, #8]	; (69f0 <_ZN9ClearCore13StatusManager10InitializeENS_13ShiftRegister5MasksE+0x18>)
    69e6:	f005 f979 	bl	bcdc <_ZN9ClearCore13ShiftRegister18DiagnosticLedSweepEv>

    return true;
}
    69ea:	2001      	movs	r0, #1
    69ec:	bd08      	pop	{r3, pc}
    69ee:	bf00      	nop
    69f0:	20001b00 	.word	0x20001b00

000069f4 <_ZN9ClearCore13StatusManager12HBridgeStateEb>:
void StatusManager::HBridgeState(bool reset) {
    ClearCorePorts port = Vsupply_MON_IO_4and5_RST.gpioPort;
    uint32_t pin = Vsupply_MON_IO_4and5_RST.gpioPin;
    StatusRegister resetBit;
    resetBit.bit.HBridgeReset = 1;
    m_hbridgeResetting = reset;
    69f4:	f880 1041 	strb.w	r1, [r0, #65]	; 0x41

    if (reset) {
    69f8:	b951      	cbnz	r1, 6a10 <_ZN9ClearCore13StatusManager12HBridgeStateEb+0x1c>
        // Set the pin as an output
        DATA_DIRECTION_OUTPUT(port, 1UL << pin);
    }
    else {
        // Set the pin as an input
        DATA_DIRECTION_INPUT(port, 1UL << pin);
    69fa:	4b17      	ldr	r3, [pc, #92]	; (6a58 <_ZN9ClearCore13StatusManager12HBridgeStateEb+0x64>)
    69fc:	2204      	movs	r2, #4
    69fe:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
        // Enable the Peripheral Multiplexer
        PMUX_ENABLE(port, pin);
    6a02:	f893 2142 	ldrb.w	r2, [r3, #322]	; 0x142
    6a06:	f042 0201 	orr.w	r2, r2, #1
    6a0a:	f883 2142 	strb.w	r2, [r3, #322]	; 0x142
    6a0e:	4770      	bx	lr
        atomic_or_fetch(&m_statusRegRT.reg, resetBit.reg);
    6a10:	1d03      	adds	r3, r0, #4
    6a12:	f3bf 8f5b 	dmb	ish
    6a16:	e853 2f00 	ldrex	r2, [r3]
    6a1a:	f042 0208 	orr.w	r2, r2, #8
    6a1e:	e843 2100 	strex	r1, r2, [r3]
    6a22:	2900      	cmp	r1, #0
    6a24:	d1f7      	bne.n	6a16 <_ZN9ClearCore13StatusManager12HBridgeStateEb+0x22>
    6a26:	f3bf 8f5b 	dmb	ish
        atomic_or_fetch(&m_statusRegRisen.reg, resetBit.reg);
    6a2a:	f3bf 8f5b 	dmb	ish
    6a2e:	300c      	adds	r0, #12
    6a30:	e850 3f00 	ldrex	r3, [r0]
    6a34:	f043 0308 	orr.w	r3, r3, #8
    6a38:	e840 3200 	strex	r2, r3, [r0]
    6a3c:	2a00      	cmp	r2, #0
    6a3e:	d1f7      	bne.n	6a30 <_ZN9ClearCore13StatusManager12HBridgeStateEb+0x3c>
    6a40:	f3bf 8f5b 	dmb	ish
        PIN_CONFIGURATION(port, pin, PORT_PINCFG_INEN);
    6a44:	4b04      	ldr	r3, [pc, #16]	; (6a58 <_ZN9ClearCore13StatusManager12HBridgeStateEb+0x64>)
        DATA_OUTPUT_STATE(port, 1UL << pin, true);
    6a46:	2204      	movs	r2, #4
        PIN_CONFIGURATION(port, pin, PORT_PINCFG_INEN);
    6a48:	2102      	movs	r1, #2
    6a4a:	f883 1142 	strb.w	r1, [r3, #322]	; 0x142
        DATA_OUTPUT_STATE(port, 1UL << pin, true);
    6a4e:	f8c3 2118 	str.w	r2, [r3, #280]	; 0x118
        DATA_DIRECTION_OUTPUT(port, 1UL << pin);
    6a52:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108
    6a56:	4770      	bx	lr
    6a58:	41008000 	.word	0x41008000

00006a5c <_ZN9ClearCore13StatusManager9BlinkCodeENS_15BlinkCodeDriver15BlinkCodeGroupsEh>:

    /**
        Activate the given blink code.
    **/
    void CodeGroupAdd(uint8_t group, uint8_t codes) {
        m_codes[group] |= codes;
    6a5c:	4401      	add	r1, r0
    6a5e:	f891 3024 	ldrb.w	r3, [r1, #36]	; 0x24
    6a62:	431a      	orrs	r2, r3
    6a64:	f881 2024 	strb.w	r2, [r1, #36]	; 0x24
    6a68:	4770      	bx	lr
    6a6a:	bf00      	nop

00006a6c <_ZN9ClearCore13StatusManager16UpdateBlinkCodesENS0_14StatusRegisterE>:
                              uint8_t mask) {
    m_blinkMgr.CodeGroupAdd(group, mask);
}

void StatusManager::UpdateBlinkCodes(StatusRegister status) {
    if (status.bit.VSupplyOverVoltage) {
    6a6c:	b2cb      	uxtb	r3, r1
    6a6e:	07da      	lsls	r2, r3, #31
void StatusManager::UpdateBlinkCodes(StatusRegister status) {
    6a70:	b510      	push	{r4, lr}
    6a72:	4604      	mov	r4, r0
    if (status.bit.VSupplyOverVoltage) {
    6a74:	d505      	bpl.n	6a82 <_ZN9ClearCore13StatusManager16UpdateBlinkCodesENS0_14StatusRegisterE+0x16>
    6a76:	f890 2025 	ldrb.w	r2, [r0, #37]	; 0x25
    6a7a:	f042 0202 	orr.w	r2, r2, #2
    6a7e:	f880 2025 	strb.w	r2, [r0, #37]	; 0x25
        m_blinkMgr.CodeGroupAdd(
            BlinkCodeDriver::BLINK_GROUP_SUPPLY_ERROR,
            BlinkCodeDriver::SUPPLY_ERROR_VSUPPLY_HIGH);
    }
    if (status.bit.VSupplyUnderVoltage) {
    6a82:	0798      	lsls	r0, r3, #30
    6a84:	d505      	bpl.n	6a92 <_ZN9ClearCore13StatusManager16UpdateBlinkCodesENS0_14StatusRegisterE+0x26>
    6a86:	f894 2025 	ldrb.w	r2, [r4, #37]	; 0x25
    6a8a:	f042 0201 	orr.w	r2, r2, #1
    6a8e:	f884 2025 	strb.w	r2, [r4, #37]	; 0x25
        m_blinkMgr.CodeGroupAdd(
            BlinkCodeDriver::BLINK_GROUP_SUPPLY_ERROR,
            BlinkCodeDriver::SUPPLY_ERROR_VSUPPLY_LOW);
    }
    if (status.bit.HBridgeOverloaded) {
    6a92:	075a      	lsls	r2, r3, #29
    6a94:	d505      	bpl.n	6aa2 <_ZN9ClearCore13StatusManager16UpdateBlinkCodesENS0_14StatusRegisterE+0x36>
    6a96:	f894 2026 	ldrb.w	r2, [r4, #38]	; 0x26
    6a9a:	f042 0201 	orr.w	r2, r2, #1
    6a9e:	f884 2026 	strb.w	r2, [r4, #38]	; 0x26
        m_blinkMgr.CodeGroupAdd(
            BlinkCodeDriver::BLINK_GROUP_DEVICE_ERROR,
            BlinkCodeDriver::DEVICE_ERROR_HBRIDGE);
    }
    if (status.bit.Overloaded5V) {
    6aa2:	06d8      	lsls	r0, r3, #27
    6aa4:	d505      	bpl.n	6ab2 <_ZN9ClearCore13StatusManager16UpdateBlinkCodesENS0_14StatusRegisterE+0x46>
    6aa6:	f894 2025 	ldrb.w	r2, [r4, #37]	; 0x25
    6aaa:	f042 0204 	orr.w	r2, r2, #4
    6aae:	f884 2025 	strb.w	r2, [r4, #37]	; 0x25
        m_blinkMgr.CodeGroupAdd(
            BlinkCodeDriver::BLINK_GROUP_SUPPLY_ERROR,
            BlinkCodeDriver::SUPPLY_ERROR_5VOB_OVERLOAD);
    }
    if (status.bit.SdCardError) {
    6ab2:	f3c1 2107 	ubfx	r1, r1, #8, #8
    6ab6:	06ca      	lsls	r2, r1, #27
    6ab8:	d505      	bpl.n	6ac6 <_ZN9ClearCore13StatusManager16UpdateBlinkCodesENS0_14StatusRegisterE+0x5a>
    6aba:	f894 2026 	ldrb.w	r2, [r4, #38]	; 0x26
    6abe:	f042 0202 	orr.w	r2, r2, #2
    6ac2:	f884 2026 	strb.w	r2, [r4, #38]	; 0x26
            BlinkCodeDriver::BLINK_GROUP_DEVICE_ERROR,
            BlinkCodeDriver::DEVICE_ERROR_SD_CARD);
    }
    // Only report Ethernet problems if we called EthernetManager::Setup()
    // and expect Ethernet to be functional.
    if (EthernetMgr.EthernetActive() &&
    6ac6:	4a14      	ldr	r2, [pc, #80]	; (6b18 <_ZN9ClearCore13StatusManager16UpdateBlinkCodesENS0_14StatusRegisterE+0xac>)
    6ac8:	6812      	ldr	r2, [r2, #0]
    6aca:	f892 2061 	ldrb.w	r2, [r2, #97]	; 0x61
    6ace:	b112      	cbz	r2, 6ad6 <_ZN9ClearCore13StatusManager16UpdateBlinkCodesENS0_14StatusRegisterE+0x6a>
    6ad0:	f011 0f0c 	tst.w	r1, #12
    6ad4:	d118      	bne.n	6b08 <_ZN9ClearCore13StatusManager16UpdateBlinkCodesENS0_14StatusRegisterE+0x9c>
             status.bit.EthernetPhyInitFailed)) {
        m_blinkMgr.CodeGroupAdd(
            BlinkCodeDriver::BLINK_GROUP_DEVICE_ERROR,
            BlinkCodeDriver::DEVICE_ERROR_ETHERNET);
    }
    if (status.bit.CcioLinkBroken) {
    6ad6:	061b      	lsls	r3, r3, #24
    6ad8:	d505      	bpl.n	6ae6 <_ZN9ClearCore13StatusManager16UpdateBlinkCodesENS0_14StatusRegisterE+0x7a>
    6ada:	f894 3026 	ldrb.w	r3, [r4, #38]	; 0x26
    6ade:	f043 0308 	orr.w	r3, r3, #8
    6ae2:	f884 3026 	strb.w	r3, [r4, #38]	; 0x26
        m_blinkMgr.CodeGroupAdd(
            BlinkCodeDriver::BLINK_GROUP_DEVICE_ERROR,
            BlinkCodeDriver::DEVICE_ERROR_CCIO);
    }

    m_blinkMgr.Update();
    6ae6:	f104 0024 	add.w	r0, r4, #36	; 0x24
    6aea:	f007 fc77 	bl	e3dc <_ZN9ClearCore15BlinkCodeDriver6UpdateEv>
        return m_blinkState != IDLE;
    6aee:	f894 3029 	ldrb.w	r3, [r4, #41]	; 0x29
        underglow.
    **/
    void DiagnosticLedSweep();

    void BlinkCode(bool blinkCodeActive, bool blinkCodeState) {
        m_blinkCodeActive = blinkCodeActive;
    6af2:	4a0a      	ldr	r2, [pc, #40]	; (6b1c <_ZN9ClearCore13StatusManager16UpdateBlinkCodesENS0_14StatusRegisterE+0xb0>)
    ShiftReg.BlinkCode(m_blinkMgr.CodePresent(), m_blinkMgr.LedState());
    6af4:	f894 1032 	ldrb.w	r1, [r4, #50]	; 0x32
        m_blinkCodeState = blinkCodeState;
    6af8:	f882 110a 	strb.w	r1, [r2, #266]	; 0x10a
    6afc:	3300      	adds	r3, #0
    6afe:	bf18      	it	ne
    6b00:	2301      	movne	r3, #1
    6b02:	f882 3109 	strb.w	r3, [r2, #265]	; 0x109
}
    6b06:	bd10      	pop	{r4, pc}
        m_codes[group] |= codes;
    6b08:	f894 2026 	ldrb.w	r2, [r4, #38]	; 0x26
    6b0c:	f042 0204 	orr.w	r2, r2, #4
    6b10:	f884 2026 	strb.w	r2, [r4, #38]	; 0x26
    6b14:	e7df      	b.n	6ad6 <_ZN9ClearCore13StatusManager16UpdateBlinkCodesENS0_14StatusRegisterE+0x6a>
    6b16:	bf00      	nop
    6b18:	20001d2c 	.word	0x20001d2c
    6b1c:	20001b00 	.word	0x20001b00

00006b20 <_ZN9ClearCore13StatusManager7RefreshEv>:
void StatusManager::Refresh() {
    6b20:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    6b24:	b082      	sub	sp, #8
            reg = 0;
    6b26:	2300      	movs	r3, #0
    6b28:	9301      	str	r3, [sp, #4]
            AdcMgr.FilteredResult(AdcManager::ADC_VSUPPLY_MON) >=
    6b2a:	4b98      	ldr	r3, [pc, #608]	; (6d8c <_ZN9ClearCore13StatusManager7RefreshEv+0x26c>)
    atomic_load(&m_statusRegRT.reg, &statusPrev.reg);
    6b2c:	6844      	ldr	r4, [r0, #4]
    6b2e:	f3bf 8f5b 	dmb	ish
            AdcMgr.FilteredResult(AdcManager::ADC_VSUPPLY_MON) >=
    6b32:	681a      	ldr	r2, [r3, #0]
    return (!static_cast<bool>(PORT->Group[OutFault_04or05.gpioPort].IN.reg &
    6b34:	4f96      	ldr	r7, [pc, #600]	; (6d90 <_ZN9ClearCore13StatusManager7RefreshEv+0x270>)
            AdcMgr.FilteredResult(AdcManager::ADC_VSUPPLY_MON) >=
    6b36:	8a13      	ldrh	r3, [r2, #16]
    6b38:	f8df 8274 	ldr.w	r8, [pc, #628]	; 6db0 <_ZN9ClearCore13StatusManager7RefreshEv+0x290>
        VSupplyOverVoltageCheck(statusPrev.bit.VSupplyOverVoltage);
    6b3c:	b2e1      	uxtb	r1, r4
            OVER_VOLTAGE_EXIT_CNT) || (!currentStatus &&
    6b3e:	07ce      	lsls	r6, r1, #31
void StatusManager::Refresh() {
    6b40:	4605      	mov	r5, r0
                                       AdcMgr.FilteredResult(AdcManager::ADC_VSUPPLY_MON) >=
    6b42:	b29b      	uxth	r3, r3
    return (currentStatus &&
    6b44:	bf4c      	ite	mi
    6b46:	f642 4053 	movwmi	r0, #11347	; 0x2c53
            OVER_VOLTAGE_EXIT_CNT) || (!currentStatus &&
    6b4a:	f243 20a8 	movwpl	r0, #12968	; 0x32a8
    6b4e:	4283      	cmp	r3, r0
    statusPending.bit.VSupplyOverVoltage =
    6b50:	f89d 0004 	ldrb.w	r0, [sp, #4]
    statusPending.bit.EthernetDisconnect = !EthernetMgr.PhyLinkActive();
    6b54:	4e8f      	ldr	r6, [pc, #572]	; (6d94 <_ZN9ClearCore13StatusManager7RefreshEv+0x274>)
            OVER_VOLTAGE_EXIT_CNT) || (!currentStatus &&
    6b56:	bfd4      	ite	le
    6b58:	2300      	movle	r3, #0
    6b5a:	2301      	movgt	r3, #1
    statusPending.bit.VSupplyOverVoltage =
    6b5c:	f363 0000 	bfi	r0, r3, #0, #1
    6b60:	f88d 0004 	strb.w	r0, [sp, #4]
            AdcMgr.FilteredResult(AdcManager::ADC_VSUPPLY_MON) <
    6b64:	8a13      	ldrh	r3, [r2, #16]
    statusPending.bit.EthernetDisconnect = !EthernetMgr.PhyLinkActive();
    6b66:	6836      	ldr	r6, [r6, #0]
            UNDER_VOLTAGE_EXIT_CNT) || (!currentStatus &&
    6b68:	0788      	lsls	r0, r1, #30
                                        AdcMgr.FilteredResult(AdcManager::ADC_VSUPPLY_MON) <
    6b6a:	b29b      	uxth	r3, r3
    return (currentStatus &&
    6b6c:	bf4c      	ite	mi
    6b6e:	f241 1069 	movwmi	r0, #4457	; 0x1169
            UNDER_VOLTAGE_EXIT_CNT) || (!currentStatus &&
    6b72:	f640 70d3 	movwpl	r0, #4051	; 0xfd3
    6b76:	4283      	cmp	r3, r0
    statusPending.bit.VSupplyUnderVoltage =
    6b78:	f89d 0004 	ldrb.w	r0, [sp, #4]
            UNDER_VOLTAGE_EXIT_CNT) || (!currentStatus &&
    6b7c:	bfcc      	ite	gt
    6b7e:	2300      	movgt	r3, #0
    6b80:	2301      	movle	r3, #1
    statusPending.bit.VSupplyUnderVoltage =
    6b82:	f363 0041 	bfi	r0, r3, #1, #1
    6b86:	f88d 0004 	strb.w	r0, [sp, #4]
            AdcMgr.FilteredResult(AdcManager::ADC_5VOB_MON) <
    6b8a:	8a93      	ldrh	r3, [r2, #20]
    statusPending.bit.Overloaded5V =
    6b8c:	f89d 0004 	ldrb.w	r0, [sp, #4]
            OFFBOARD_5V_EXIT_CNT) || (!currentStatus &&
    6b90:	06c9      	lsls	r1, r1, #27
                                      AdcMgr.FilteredResult(AdcManager::ADC_5VOB_MON) <
    6b92:	b29b      	uxth	r3, r3
    return (currentStatus &&
    6b94:	bf4c      	ite	mi
    6b96:	f245 7144 	movwmi	r1, #22340	; 0x5744
            OFFBOARD_5V_EXIT_CNT) || (!currentStatus &&
    6b9a:	f644 5192 	movwpl	r1, #19858	; 0x4d92
    6b9e:	428b      	cmp	r3, r1
    6ba0:	bfcc      	ite	gt
    6ba2:	2300      	movgt	r3, #0
    6ba4:	2301      	movle	r3, #1
    statusPending.bit.Overloaded5V =
    6ba6:	f363 1004 	bfi	r0, r3, #4, #1
    6baa:	f88d 0004 	strb.w	r0, [sp, #4]
    return (!static_cast<bool>(PORT->Group[OutFault_04or05.gpioPort].IN.reg &
    6bae:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
    statusPending.bit.HBridgeReset = m_hbridgeResetting;
    6bb2:	f895 c041 	ldrb.w	ip, [r5, #65]	; 0x41
    statusPending.bit.AdcTimeout = AdcMgr.AdcTimeout();
    6bb6:	f892 e061 	ldrb.w	lr, [r2, #97]	; 0x61
    6bba:	f89d 2005 	ldrb.w	r2, [sp, #5]
    statusPending.bit.CcioLinkBroken = CcioMgr.LinkBroken();
    6bbe:	4976      	ldr	r1, [pc, #472]	; (6d98 <_ZN9ClearCore13StatusManager7RefreshEv+0x278>)
        static_cast<bool>(ShiftReg.OverloadActive());
    6bc0:	4f76      	ldr	r7, [pc, #472]	; (6d9c <_ZN9ClearCore13StatusManager7RefreshEv+0x27c>)
    statusPending.bit.CcioLinkBroken = CcioMgr.LinkBroken();
    6bc2:	6809      	ldr	r1, [r1, #0]
    statusPending.bit.HBridgeOverloaded = HBridgeFaultCheck();
    6bc4:	43db      	mvns	r3, r3
    6bc6:	b2c0      	uxtb	r0, r0
    6bc8:	f363 0082 	bfi	r0, r3, #2, #1
    statusPending.bit.AdcTimeout = AdcMgr.AdcTimeout();
    6bcc:	f36e 0200 	bfi	r2, lr, #0, #1
    statusPending.bit.HBridgeReset = m_hbridgeResetting;
    6bd0:	b2c3      	uxtb	r3, r0
    statusPending.bit.AdcTimeout = AdcMgr.AdcTimeout();
    6bd2:	f88d 2005 	strb.w	r2, [sp, #5]
    statusPending.bit.HBridgeReset = m_hbridgeResetting;
    6bd6:	f36c 03c3 	bfi	r3, ip, #3, #1
        static_cast<bool>(ShiftReg.OverloadActive());
    6bda:	f8d7 20f0 	ldr.w	r2, [r7, #240]	; 0xf0
    statusPending.bit.HBridgeOverloaded = HBridgeFaultCheck();
    6bde:	f88d 0004 	strb.w	r0, [sp, #4]
    statusPending.bit.HBridgeReset = m_hbridgeResetting;
    6be2:	f88d 3004 	strb.w	r3, [sp, #4]
    statusPending.bit.CcioLinkBroken = CcioMgr.LinkBroken();
    6be6:	f891 e092 	ldrb.w	lr, [r1, #146]	; 0x92
        static_cast<bool>(ShiftReg.OverloadActive());
    6bea:	3200      	adds	r2, #0
    statusPending.bit.CcioOverloaded = CcioMgr.IoOverloadRT();
    6bec:	e9d1 0126 	ldrd	r0, r1, [r1, #152]	; 0x98
    statusPending.bit.OutputOverloaded =
    6bf0:	f89d 1004 	ldrb.w	r1, [sp, #4]
    statusPending.bit.EthernetDisconnect = !EthernetMgr.PhyLinkActive();
    6bf4:	f896 305c 	ldrb.w	r3, [r6, #92]	; 0x5c
        static_cast<bool>(ShiftReg.OverloadActive());
    6bf8:	bf18      	it	ne
    6bfa:	2201      	movne	r2, #1
    statusPending.bit.OutputOverloaded =
    6bfc:	f362 1145 	bfi	r1, r2, #5, #1
    statusPending.bit.EthernetDisconnect = !EthernetMgr.PhyLinkActive();
    6c00:	f89d 2005 	ldrb.w	r2, [sp, #5]
    statusPending.bit.OutputOverloaded =
    6c04:	f88d 1004 	strb.w	r1, [sp, #4]
    statusPending.bit.EthernetDisconnect = !EthernetMgr.PhyLinkActive();
    6c08:	f083 0301 	eor.w	r3, r3, #1
    6c0c:	f363 0241 	bfi	r2, r3, #1, #1
    6c10:	f88d 2005 	strb.w	r2, [sp, #5]
    statusPending.bit.CcioLinkBroken = CcioMgr.LinkBroken();
    6c14:	b2cb      	uxtb	r3, r1
    statusPending.bit.EthernetRemoteFault = EthernetMgr.PhyRemoteFault();
    6c16:	f896 105d 	ldrb.w	r1, [r6, #93]	; 0x5d
    statusPending.bit.EthernetPhyInitFailed = EthernetMgr.PhyInitFailed();
    6c1a:	f896 605e 	ldrb.w	r6, [r6, #94]	; 0x5e
    statusPending.bit.EthernetRemoteFault = EthernetMgr.PhyRemoteFault();
    6c1e:	b2d2      	uxtb	r2, r2
    6c20:	f361 0282 	bfi	r2, r1, #2, #1
    6c24:	f88d 2005 	strb.w	r2, [sp, #5]
    statusPending.bit.CcioLinkBroken = CcioMgr.LinkBroken();
    6c28:	f36e 13c7 	bfi	r3, lr, #7, #1
        \brief Check if the SD card is in a fault state

        \return True if an error code is present
    **/
    bool IsInFault() {
        return (m_errorCode != 0);
    6c2c:	4a5c      	ldr	r2, [pc, #368]	; (6da0 <_ZN9ClearCore13StatusManager7RefreshEv+0x280>)
    6c2e:	f88d 3004 	strb.w	r3, [sp, #4]
    statusPending.bit.CcioOverloaded = CcioMgr.IoOverloadRT();
    6c32:	f89d 1004 	ldrb.w	r1, [sp, #4]
    6c36:	f892 2144 	ldrb.w	r2, [r2, #324]	; 0x144
    statusPending.bit.EthernetPhyInitFailed = EthernetMgr.PhyInitFailed();
    6c3a:	f89d 3005 	ldrb.w	r3, [sp, #5]
    6c3e:	3200      	adds	r2, #0
    statusPending.bit.CcioOverloaded = CcioMgr.IoOverloadRT();
    6c40:	f360 1186 	bfi	r1, r0, #6, #1
    statusPending.bit.NvmDesync = !NvmMgr.Synchonized();
    6c44:	4857      	ldr	r0, [pc, #348]	; (6da4 <_ZN9ClearCore13StatusManager7RefreshEv+0x284>)
    statusPending.bit.CcioOverloaded = CcioMgr.IoOverloadRT();
    6c46:	f88d 1004 	strb.w	r1, [sp, #4]
    6c4a:	bf18      	it	ne
    6c4c:	2201      	movne	r2, #1
    statusPending.bit.EthernetPhyInitFailed = EthernetMgr.PhyInitFailed();
    6c4e:	f366 03c3 	bfi	r3, r6, #3, #1
    statusPending.bit.SdCardError = SdCard.IsInFault();
    6c52:	f362 1304 	bfi	r3, r2, #4, #1
    statusPending.bit.NvmDesync = !NvmMgr.Synchonized();
    6c56:	6802      	ldr	r2, [r0, #0]
    if (hBridgeCon[0]->Mode() != Connector::OUTPUT_DIGITAL) {
    6c58:	4e53      	ldr	r6, [pc, #332]	; (6da8 <_ZN9ClearCore13StatusManager7RefreshEv+0x288>)
    statusPending.bit.NvmDesync = !NvmMgr.Synchonized();
    6c5a:	f892 2206 	ldrb.w	r2, [r2, #518]	; 0x206
    6c5e:	f362 1345 	bfi	r3, r2, #5, #1
    6c62:	f88d 3005 	strb.w	r3, [sp, #5]
    UpdateBlinkCodes(statusPending);
    6c66:	4628      	mov	r0, r5
    6c68:	9901      	ldr	r1, [sp, #4]
    6c6a:	f7ff feff 	bl	6a6c <_ZN9ClearCore13StatusManager16UpdateBlinkCodesENS0_14StatusRegisterE>
    if (hBridgeCon[0]->Mode() != Connector::OUTPUT_DIGITAL) {
    6c6e:	6830      	ldr	r0, [r6, #0]
    6c70:	6803      	ldr	r3, [r0, #0]
    6c72:	681b      	ldr	r3, [r3, #0]
    6c74:	4543      	cmp	r3, r8
    6c76:	f040 8084 	bne.w	6d82 <_ZN9ClearCore13StatusManager7RefreshEv+0x262>
        return m_mode;
    6c7a:	7980      	ldrb	r0, [r0, #6]
    6c7c:	2804      	cmp	r0, #4
    6c7e:	d00c      	beq.n	6c9a <_ZN9ClearCore13StatusManager7RefreshEv+0x17a>
        ShiftReg.LedInFault(ShiftRegister::SR_LED_IO_4_MASK,
    6c80:	f89d 3004 	ldrb.w	r3, [sp, #4]
        if (state) {
    6c84:	f013 0f04 	tst.w	r3, #4
            m_patternMasks[LED_BLINK_OVERLOAD] |= ledMask;
    6c88:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
    6c8c:	bf14      	ite	ne
    6c8e:	f043 0308 	orrne.w	r3, r3, #8
            m_patternMasks[LED_BLINK_OVERLOAD] &= ~ledMask;
    6c92:	f023 0308 	biceq.w	r3, r3, #8
    6c96:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
    if (hBridgeCon[1]->Mode() != Connector::OUTPUT_DIGITAL) {
    6c9a:	6870      	ldr	r0, [r6, #4]
    6c9c:	6803      	ldr	r3, [r0, #0]
    6c9e:	681b      	ldr	r3, [r3, #0]
    6ca0:	4543      	cmp	r3, r8
    6ca2:	d170      	bne.n	6d86 <_ZN9ClearCore13StatusManager7RefreshEv+0x266>
    6ca4:	7980      	ldrb	r0, [r0, #6]
    6ca6:	2804      	cmp	r0, #4
    6ca8:	d00c      	beq.n	6cc4 <_ZN9ClearCore13StatusManager7RefreshEv+0x1a4>
        ShiftReg.LedInFault(ShiftRegister::SR_LED_IO_5_MASK,
    6caa:	f89d 3004 	ldrb.w	r3, [sp, #4]
        if (state) {
    6cae:	f013 0f04 	tst.w	r3, #4
            m_patternMasks[LED_BLINK_OVERLOAD] |= ledMask;
    6cb2:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
    6cb6:	bf14      	ite	ne
    6cb8:	f043 0304 	orrne.w	r3, r3, #4
            m_patternMasks[LED_BLINK_OVERLOAD] &= ~ledMask;
    6cbc:	f023 0304 	biceq.w	r3, r3, #4
    6cc0:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
    atomic_load(&statusPending.reg, &m_statusRegRT.reg);
    6cc4:	9a01      	ldr	r2, [sp, #4]
    6cc6:	f3bf 8f5b 	dmb	ish
    atomic_or_fetch(&m_statusRegFallen.reg,
    6cca:	9b01      	ldr	r3, [sp, #4]
    atomic_load(&statusPending.reg, &m_statusRegRT.reg);
    6ccc:	606a      	str	r2, [r5, #4]
    atomic_or_fetch(&m_statusRegFallen.reg,
    6cce:	ea24 0303 	bic.w	r3, r4, r3
                    statusPrev.reg & ~statusPending.reg);
    6cd2:	f105 0210 	add.w	r2, r5, #16
    6cd6:	f3bf 8f5b 	dmb	ish
    6cda:	e852 1f00 	ldrex	r1, [r2]
    6cde:	4319      	orrs	r1, r3
    6ce0:	e842 1000 	strex	r0, r1, [r2]
    6ce4:	2800      	cmp	r0, #0
    6ce6:	d1f8      	bne.n	6cda <_ZN9ClearCore13StatusManager7RefreshEv+0x1ba>
    6ce8:	f3bf 8f5b 	dmb	ish
    atomic_or_fetch(&m_statusRegRisen.reg,
    6cec:	9a01      	ldr	r2, [sp, #4]
                    ~statusPrev.reg & statusPending.reg);
    6cee:	f3bf 8f5b 	dmb	ish
    6cf2:	f105 030c 	add.w	r3, r5, #12
    atomic_or_fetch(&m_statusRegRisen.reg,
    6cf6:	ea22 0404 	bic.w	r4, r2, r4
                    ~statusPrev.reg & statusPending.reg);
    6cfa:	e853 2f00 	ldrex	r2, [r3]
    6cfe:	4322      	orrs	r2, r4
    6d00:	e843 2100 	strex	r1, r2, [r3]
    6d04:	2900      	cmp	r1, #0
    6d06:	d1f8      	bne.n	6cfa <_ZN9ClearCore13StatusManager7RefreshEv+0x1da>
    6d08:	f3bf 8f5b 	dmb	ish
    atomic_or_fetch(&m_statusRegAccum.reg, statusPending.reg);
    6d0c:	f105 0308 	add.w	r3, r5, #8
    6d10:	9a01      	ldr	r2, [sp, #4]
    6d12:	f3bf 8f5b 	dmb	ish
    6d16:	e853 1f00 	ldrex	r1, [r3]
    6d1a:	4311      	orrs	r1, r2
    6d1c:	e843 1000 	strex	r0, r1, [r3]
    6d20:	2800      	cmp	r0, #0
    6d22:	d1f8      	bne.n	6d16 <_ZN9ClearCore13StatusManager7RefreshEv+0x1f6>
    6d24:	f3bf 8f5b 	dmb	ish
    atomic_or_fetch(&m_statusRegSinceStartup.reg, statusPending.reg);
    6d28:	9b01      	ldr	r3, [sp, #4]
    6d2a:	f3bf 8f5b 	dmb	ish
    6d2e:	e855 2f00 	ldrex	r2, [r5]
    6d32:	431a      	orrs	r2, r3
    6d34:	e845 2100 	strex	r1, r2, [r5]
    6d38:	2900      	cmp	r1, #0
    6d3a:	d1f8      	bne.n	6d2e <_ZN9ClearCore13StatusManager7RefreshEv+0x20e>
    6d3c:	f3bf 8f5b 	dmb	ish
    m_disableMotors = m_statusRegRT.bit.VSupplyOverVoltage |
    6d40:	7929      	ldrb	r1, [r5, #4]
    bool disableMotorsPrev = m_disableMotors;
    6d42:	f895 3040 	ldrb.w	r3, [r5, #64]	; 0x40
                      m_statusRegRT.bit.HBridgeReset;
    6d46:	ea41 01d1 	orr.w	r1, r1, r1, lsr #3
    m_disableMotors = m_statusRegRT.bit.VSupplyOverVoltage |
    6d4a:	f001 0101 	and.w	r1, r1, #1
    if (disableMotorsPrev != m_disableMotors) {
    6d4e:	428b      	cmp	r3, r1
    m_disableMotors = m_statusRegRT.bit.VSupplyOverVoltage |
    6d50:	f885 1040 	strb.w	r1, [r5, #64]	; 0x40
    if (disableMotorsPrev != m_disableMotors) {
    6d54:	d012      	beq.n	6d7c <_ZN9ClearCore13StatusManager7RefreshEv+0x25c>
    6d56:	4c15      	ldr	r4, [pc, #84]	; (6dac <_ZN9ClearCore13StatusManager7RefreshEv+0x28c>)
    6d58:	f104 0710 	add.w	r7, r4, #16
            MotorConnectors[i]->FaultState(m_disableMotors);
    6d5c:	f854 0b04 	ldr.w	r0, [r4], #4
    6d60:	f7fe fef8 	bl	5b54 <_ZN9ClearCore11MotorDriver10FaultStateEb>
        for (uint8_t i = 0; i < MOTOR_CON_CNT; i++) {
    6d64:	42bc      	cmp	r4, r7
            hBridgeCon[i]->FaultState(m_disableMotors);
    6d66:	f895 1040 	ldrb.w	r1, [r5, #64]	; 0x40
        for (uint8_t i = 0; i < MOTOR_CON_CNT; i++) {
    6d6a:	d1f7      	bne.n	6d5c <_ZN9ClearCore13StatusManager7RefreshEv+0x23c>
            hBridgeCon[i]->FaultState(m_disableMotors);
    6d6c:	6830      	ldr	r0, [r6, #0]
    6d6e:	f007 ffd9 	bl	ed24 <_ZN9ClearCore19DigitalInOutHBridge10FaultStateEb>
    6d72:	f895 1040 	ldrb.w	r1, [r5, #64]	; 0x40
    6d76:	6870      	ldr	r0, [r6, #4]
    6d78:	f007 ffd4 	bl	ed24 <_ZN9ClearCore19DigitalInOutHBridge10FaultStateEb>
}
    6d7c:	b002      	add	sp, #8
    6d7e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if (hBridgeCon[0]->Mode() != Connector::OUTPUT_DIGITAL) {
    6d82:	4798      	blx	r3
    6d84:	e77a      	b.n	6c7c <_ZN9ClearCore13StatusManager7RefreshEv+0x15c>
    if (hBridgeCon[1]->Mode() != Connector::OUTPUT_DIGITAL) {
    6d86:	4798      	blx	r3
    6d88:	e78d      	b.n	6ca6 <_ZN9ClearCore13StatusManager7RefreshEv+0x186>
    6d8a:	bf00      	nop
    6d8c:	20000af0 	.word	0x20000af0
    6d90:	41008000 	.word	0x41008000
    6d94:	20001d2c 	.word	0x20001d2c
    6d98:	20001f28 	.word	0x20001f28
    6d9c:	20001b00 	.word	0x20001b00
    6da0:	200019b4 	.word	0x200019b4
    6da4:	20001d10 	.word	0x20001d10
    6da8:	00022a44 	.word	0x00022a44
    6dac:	00022a4c 	.word	0x00022a4c
    6db0:	00006941 	.word	0x00006941

00006db4 <_ZN9ClearCore13StatusManager14OverloadUpdateEmb>:

void StatusManager::OverloadUpdate(uint32_t mask, bool inFault) {
    if (inFault) {
        m_overloadRT.reg |= mask;
    6db4:	69c3      	ldr	r3, [r0, #28]
    if (inFault) {
    6db6:	b94a      	cbnz	r2, 6dcc <_ZN9ClearCore13StatusManager14OverloadUpdateEmb+0x18>
    }
    else {
        m_overloadRT.reg &= ~mask;
    6db8:	ea23 0101 	bic.w	r1, r3, r1
    }
    m_overloadSinceStartup.reg |= m_overloadRT.reg;
    6dbc:	6942      	ldr	r2, [r0, #20]
    m_overloadAccum.reg |= m_overloadRT.reg;
    6dbe:	6983      	ldr	r3, [r0, #24]
    6dc0:	61c1      	str	r1, [r0, #28]
    m_overloadSinceStartup.reg |= m_overloadRT.reg;
    6dc2:	430a      	orrs	r2, r1
    m_overloadAccum.reg |= m_overloadRT.reg;
    6dc4:	4319      	orrs	r1, r3
    m_overloadSinceStartup.reg |= m_overloadRT.reg;
    6dc6:	6142      	str	r2, [r0, #20]
    m_overloadAccum.reg |= m_overloadRT.reg;
    6dc8:	6181      	str	r1, [r0, #24]
    6dca:	4770      	bx	lr
        m_overloadRT.reg |= mask;
    6dcc:	4319      	orrs	r1, r3
    6dce:	e7f5      	b.n	6dbc <_ZN9ClearCore13StatusManager14OverloadUpdateEmb+0x8>

00006dd0 <_GLOBAL__sub_I__ZN9ClearCore9StatusMgrE>:
}

    6dd0:	b508      	push	{r3, lr}
StatusManager &StatusMgr = StatusManager::Instance();
    6dd2:	f7ff fdb7 	bl	6944 <_ZN9ClearCore13StatusManager8InstanceEv>
    6dd6:	4b01      	ldr	r3, [pc, #4]	; (6ddc <_GLOBAL__sub_I__ZN9ClearCore9StatusMgrE+0xc>)
    6dd8:	6018      	str	r0, [r3, #0]
    6dda:	bd08      	pop	{r3, pc}
    6ddc:	20000bf8 	.word	0x20000bf8

00006de0 <_ZN9ClearCore10UsbManager18CBLineStateChangedE22usb_cdc_control_signal>:
**/

/**
    Callback invoked when Line State Change
**/
bool UsbManager::CBLineStateChanged(usb_cdc_control_signal_t state) {
    6de0:	b530      	push	{r4, r5, lr}
    6de2:	b083      	sub	sp, #12
    UsbMgr.m_lineState = state;
    6de4:	4d1a      	ldr	r5, [pc, #104]	; (6e50 <_ZN9ClearCore10UsbManager18CBLineStateChangedE22usb_cdc_control_signal+0x70>)
bool UsbManager::CBLineStateChanged(usb_cdc_control_signal_t state) {
    6de6:	f8ad 0004 	strh.w	r0, [sp, #4]
    if (state.rs232.DTR) {
    6dea:	f89d 1004 	ldrb.w	r1, [sp, #4]
    UsbMgr.m_lineState = state;
    6dee:	682b      	ldr	r3, [r5, #0]
    if (state.rs232.DTR) {
    6df0:	f011 0401 	ands.w	r4, r1, #1
    UsbMgr.m_lineState = state;
    6df4:	f8a3 0112 	strh.w	r0, [r3, #274]	; 0x112
    if (state.rs232.DTR) {
    6df8:	d112      	bne.n	6e20 <_ZN9ClearCore10UsbManager18CBLineStateChangedE22usb_cdc_control_signal+0x40>
        // Start Rx
        cdcdf_acm_read(UsbMgr.m_usbReadBuf, sizeof(UsbMgr.m_usbReadBuf));
    }
    else {
        // Callbacks must be registered after endpoint allocation
        cdcdf_acm_register_callback(CDCDF_ACM_CB_READ, (FUNC_PTR)NULL);
    6dfa:	4621      	mov	r1, r4
    6dfc:	4620      	mov	r0, r4
    6dfe:	f006 f939 	bl	d074 <cdcdf_acm_register_callback>
        cdcdf_acm_register_callback(CDCDF_ACM_CB_WRITE, (FUNC_PTR)NULL);
    6e02:	4621      	mov	r1, r4
    6e04:	2001      	movs	r0, #1
    6e06:	f006 f935 	bl	d074 <cdcdf_acm_register_callback>
        // Stop Rx/Tx
        cdcdf_acm_stop_xfer();
    6e0a:	f006 f927 	bl	d05c <cdcdf_acm_stop_xfer>
        if (cdcdf_acm_get_line_coding()->dwDTERate == 1200) {
    6e0e:	f006 f95f 	bl	d0d0 <cdcdf_acm_get_line_coding>
    6e12:	6803      	ldr	r3, [r0, #0]
    6e14:	f5b3 6f96 	cmp.w	r3, #1200	; 0x4b0
    6e18:	d012      	beq.n	6e40 <_ZN9ClearCore10UsbManager18CBLineStateChangedE22usb_cdc_control_signal+0x60>
        }
    }

    // No error
    return false;
}
    6e1a:	2000      	movs	r0, #0
    6e1c:	b003      	add	sp, #12
    6e1e:	bd30      	pop	{r4, r5, pc}
        cdcdf_acm_register_callback(CDCDF_ACM_CB_READ, (FUNC_PTR)RxComplete);
    6e20:	490c      	ldr	r1, [pc, #48]	; (6e54 <_ZN9ClearCore10UsbManager18CBLineStateChangedE22usb_cdc_control_signal+0x74>)
    6e22:	2000      	movs	r0, #0
    6e24:	f006 f926 	bl	d074 <cdcdf_acm_register_callback>
        cdcdf_acm_register_callback(CDCDF_ACM_CB_WRITE, (FUNC_PTR)TxComplete);
    6e28:	490b      	ldr	r1, [pc, #44]	; (6e58 <_ZN9ClearCore10UsbManager18CBLineStateChangedE22usb_cdc_control_signal+0x78>)
    6e2a:	2001      	movs	r0, #1
    6e2c:	f006 f922 	bl	d074 <cdcdf_acm_register_callback>
        cdcdf_acm_read(UsbMgr.m_usbReadBuf, sizeof(UsbMgr.m_usbReadBuf));
    6e30:	6828      	ldr	r0, [r5, #0]
    6e32:	2140      	movs	r1, #64	; 0x40
    6e34:	3080      	adds	r0, #128	; 0x80
    6e36:	f006 f8e9 	bl	d00c <cdcdf_acm_read>
}
    6e3a:	2000      	movs	r0, #0
    6e3c:	b003      	add	sp, #12
    6e3e:	bd30      	pop	{r4, r5, pc}
            SysMgr.ResetBoard(SysManager::RESET_TO_BOOTLOADER);
    6e40:	2101      	movs	r1, #1
    6e42:	4806      	ldr	r0, [pc, #24]	; (6e5c <_ZN9ClearCore10UsbManager18CBLineStateChangedE22usb_cdc_control_signal+0x7c>)
    6e44:	f003 fa36 	bl	a2b4 <_ZN9ClearCore10SysManager10ResetBoardENS0_10ResetModesE>
}
    6e48:	2000      	movs	r0, #0
    6e4a:	b003      	add	sp, #12
    6e4c:	bd30      	pop	{r4, r5, pc}
    6e4e:	bf00      	nop
    6e50:	20000c04 	.word	0x20000c04
    6e54:	00006e61 	.word	0x00006e61
    6e58:	00007099 	.word	0x00007099
    6e5c:	20001afc 	.word	0x20001afc

00006e60 <_ZN9ClearCore10UsbManager10RxCompleteEh13usb_xfer_codem>:
    return true;
}

bool UsbManager::RxComplete(const uint8_t ep,
                            const enum usb_xfer_code rc,
                            const uint32_t count) {
    6e60:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    6e64:	b083      	sub	sp, #12
  __ASM volatile ("cpsid i" : : : "memory");
    6e66:	b672      	cpsid	i
    UNUSED(ep);
    UNUSED(rc);

    __disable_irq();
    // Make the Rx data available to be copied into the Rx ring buffer
    UsbMgr.m_readBufAvail = count;
    6e68:	498a      	ldr	r1, [pc, #552]	; (7094 <_ZN9ClearCore10UsbManager10RxCompleteEh13usb_xfer_codem+0x234>)
    6e6a:	680b      	ldr	r3, [r1, #0]
    UsbMgr.m_readBufPtr = UsbMgr.m_usbReadBuf;
    6e6c:	f103 0080 	add.w	r0, r3, #128	; 0x80
    UsbMgr.m_readBufAvail = count;
    6e70:	f8c3 2118 	str.w	r2, [r3, #280]	; 0x118
    UsbMgr.m_readBufPtr = UsbMgr.m_usbReadBuf;
    6e74:	f8c3 0114 	str.w	r0, [r3, #276]	; 0x114
  __ASM volatile ("cpsie i" : : : "memory");
    6e78:	b662      	cpsie	i
    __enable_irq();
    UsbMgr.RxCopyToRingBuf();
    6e7a:	6808      	ldr	r0, [r1, #0]
  __ASM volatile ("cpsid i" : : : "memory");
    6e7c:	b672      	cpsid	i
    int32_t difference = m_inTail - m_inHead;
    6e7e:	f8d0 3104 	ldr.w	r3, [r0, #260]	; 0x104
    6e82:	f8d0 2100 	ldr.w	r2, [r0, #256]	; 0x100
}

void UsbManager::RxCopyToRingBuf() {
    __disable_irq();
    uint32_t space = sizeof(m_bufferIn) - 1 - AvailableForRead();
    if (m_readBufAvail && space) {
    6e86:	f8d0 4118 	ldr.w	r4, [r0, #280]	; 0x118
    if (difference < 0) {
    6e8a:	1a9b      	subs	r3, r3, r2
        return sizeof(m_bufferIn) + difference;
    6e8c:	bf48      	it	mi
    6e8e:	3340      	addmi	r3, #64	; 0x40
    if (m_readBufAvail && space) {
    6e90:	2c00      	cmp	r4, #0
    6e92:	f000 80d6 	beq.w	7042 <_ZN9ClearCore10UsbManager10RxCompleteEh13usb_xfer_codem+0x1e2>
    6e96:	f1d3 033f 	rsbs	r3, r3, #63	; 0x3f
    6e9a:	f000 80d2 	beq.w	7042 <_ZN9ClearCore10UsbManager10RxCompleteEh13usb_xfer_codem+0x1e2>

        uint32_t count = min(space, m_readBufAvail);
        uint32_t tail = m_inTail;
    6e9e:	f8d0 5104 	ldr.w	r5, [r0, #260]	; 0x104
        uint8_t *inPtr = m_readBufPtr;
    6ea2:	f8d0 2114 	ldr.w	r2, [r0, #276]	; 0x114
    6ea6:	42a3      	cmp	r3, r4
    6ea8:	bf28      	it	cs
    6eaa:	4623      	movcs	r3, r4
        uint8_t *outPtr = &m_bufferIn[tail];
        uint32_t countTilWrap = sizeof(m_bufferIn) - tail;
    6eac:	f1c5 0140 	rsb	r1, r5, #64	; 0x40
    6eb0:	4299      	cmp	r1, r3
    6eb2:	bf28      	it	cs
    6eb4:	4619      	movcs	r1, r3
        uint8_t *outPtr = &m_bufferIn[tail];
    6eb6:	1946      	adds	r6, r0, r5
        countTilWrap = min(countTilWrap, count);

        // Copy the available data until we get to the
        // end of input data or the ring buffer wrap point
        for (uint32_t i = 0; i < countTilWrap; i++) {
    6eb8:	2900      	cmp	r1, #0
    6eba:	f000 80e8 	beq.w	708e <_ZN9ClearCore10UsbManager10RxCompleteEh13usb_xfer_codem+0x22e>
    6ebe:	1d2c      	adds	r4, r5, #4
    6ec0:	4404      	add	r4, r0
    6ec2:	1d17      	adds	r7, r2, #4
    6ec4:	42be      	cmp	r6, r7
    6ec6:	bf38      	it	cc
    6ec8:	42a2      	cmpcc	r2, r4
    6eca:	f0c0 80ce 	bcc.w	706a <_ZN9ClearCore10UsbManager10RxCompleteEh13usb_xfer_codem+0x20a>
    6ece:	290b      	cmp	r1, #11
    6ed0:	f240 80cb 	bls.w	706a <_ZN9ClearCore10UsbManager10RxCompleteEh13usb_xfer_codem+0x20a>
    6ed4:	4254      	negs	r4, r2
    6ed6:	f014 0403 	ands.w	r4, r4, #3
    6eda:	f000 80b7 	beq.w	704c <_ZN9ClearCore10UsbManager10RxCompleteEh13usb_xfer_codem+0x1ec>
            *outPtr++ = *inPtr++;
    6ede:	7817      	ldrb	r7, [r2, #0]
    6ee0:	5547      	strb	r7, [r0, r5]
    6ee2:	2c01      	cmp	r4, #1
    6ee4:	f106 0c01 	add.w	ip, r6, #1
    6ee8:	f102 0801 	add.w	r8, r2, #1
    6eec:	f000 80b0 	beq.w	7050 <_ZN9ClearCore10UsbManager10RxCompleteEh13usb_xfer_codem+0x1f0>
    6ef0:	7857      	ldrb	r7, [r2, #1]
    6ef2:	7077      	strb	r7, [r6, #1]
    6ef4:	2c02      	cmp	r4, #2
    6ef6:	f106 0c02 	add.w	ip, r6, #2
    6efa:	f102 0802 	add.w	r8, r2, #2
    6efe:	f000 80a7 	beq.w	7050 <_ZN9ClearCore10UsbManager10RxCompleteEh13usb_xfer_codem+0x1f0>
    6f02:	7897      	ldrb	r7, [r2, #2]
    6f04:	70b7      	strb	r7, [r6, #2]
    6f06:	f106 0c03 	add.w	ip, r6, #3
        for (uint32_t i = 0; i < countTilWrap; i++) {
    6f0a:	2603      	movs	r6, #3
            *outPtr++ = *inPtr++;
    6f0c:	f102 0803 	add.w	r8, r2, #3
        for (uint32_t i = 0; i < countTilWrap; i++) {
    6f10:	9601      	str	r6, [sp, #4]
    6f12:	eba1 0b04 	sub.w	fp, r1, r4
    6f16:	f1ab 0604 	sub.w	r6, fp, #4
    6f1a:	08b6      	lsrs	r6, r6, #2
    6f1c:	192f      	adds	r7, r5, r4
    6f1e:	3601      	adds	r6, #1
    6f20:	ea4f 0986 	mov.w	r9, r6, lsl #2
    6f24:	4407      	add	r7, r0
    6f26:	4414      	add	r4, r2
    6f28:	f04f 0e00 	mov.w	lr, #0
    6f2c:	f10e 0e01 	add.w	lr, lr, #1
            *outPtr++ = *inPtr++;
    6f30:	f854 ab04 	ldr.w	sl, [r4], #4
    6f34:	f847 ab04 	str.w	sl, [r7], #4
    6f38:	4576      	cmp	r6, lr
    6f3a:	d8f7      	bhi.n	6f2c <_ZN9ClearCore10UsbManager10RxCompleteEh13usb_xfer_codem+0xcc>
    6f3c:	9c01      	ldr	r4, [sp, #4]
    6f3e:	45cb      	cmp	fp, r9
    6f40:	444c      	add	r4, r9
    6f42:	eb0c 0709 	add.w	r7, ip, r9
    6f46:	eb08 0e09 	add.w	lr, r8, r9
    6f4a:	f000 8089 	beq.w	7060 <_ZN9ClearCore10UsbManager10RxCompleteEh13usb_xfer_codem+0x200>
    6f4e:	f818 8026 	ldrb.w	r8, [r8, r6, lsl #2]
    6f52:	f80c 8026 	strb.w	r8, [ip, r6, lsl #2]
        for (uint32_t i = 0; i < countTilWrap; i++) {
    6f56:	1c66      	adds	r6, r4, #1
    6f58:	42b1      	cmp	r1, r6
    6f5a:	f240 8081 	bls.w	7060 <_ZN9ClearCore10UsbManager10RxCompleteEh13usb_xfer_codem+0x200>
    6f5e:	3402      	adds	r4, #2
            *outPtr++ = *inPtr++;
    6f60:	f89e 6001 	ldrb.w	r6, [lr, #1]
    6f64:	707e      	strb	r6, [r7, #1]
        for (uint32_t i = 0; i < countTilWrap; i++) {
    6f66:	42a1      	cmp	r1, r4
    6f68:	d97a      	bls.n	7060 <_ZN9ClearCore10UsbManager10RxCompleteEh13usb_xfer_codem+0x200>
            *outPtr++ = *inPtr++;
    6f6a:	f89e 4002 	ldrb.w	r4, [lr, #2]
    6f6e:	70bc      	strb	r4, [r7, #2]
    6f70:	1856      	adds	r6, r2, r1
    6f72:	f8d0 2114 	ldr.w	r2, [r0, #276]	; 0x114
    6f76:	f8d0 4118 	ldr.w	r4, [r0, #280]	; 0x118
        }
        count -= countTilWrap;
        m_readBufPtr += countTilWrap;
    6f7a:	440a      	add	r2, r1
        m_readBufAvail -= countTilWrap;
    6f7c:	1a64      	subs	r4, r4, r1
        if (count) {
    6f7e:	1a5b      	subs	r3, r3, r1
        m_readBufPtr += countTilWrap;
    6f80:	f8c0 2114 	str.w	r2, [r0, #276]	; 0x114
        m_readBufAvail -= countTilWrap;
    6f84:	f8c0 4118 	str.w	r4, [r0, #280]	; 0x118
        if (count) {
    6f88:	d064      	beq.n	7054 <_ZN9ClearCore10UsbManager10RxCompleteEh13usb_xfer_codem+0x1f4>
    6f8a:	1d31      	adds	r1, r6, #4
    6f8c:	1d02      	adds	r2, r0, #4
    6f8e:	4296      	cmp	r6, r2
    6f90:	bf38      	it	cc
    6f92:	4288      	cmpcc	r0, r1
            // Account for the ring buffer wrap point
            // and copy the remaining available data
            outPtr = m_bufferIn;
    6f94:	4604      	mov	r4, r0
    6f96:	d371      	bcc.n	707c <_ZN9ClearCore10UsbManager10RxCompleteEh13usb_xfer_codem+0x21c>
    6f98:	2b0b      	cmp	r3, #11
    6f9a:	d96f      	bls.n	707c <_ZN9ClearCore10UsbManager10RxCompleteEh13usb_xfer_codem+0x21c>
    6f9c:	4272      	negs	r2, r6
    6f9e:	f012 0203 	ands.w	r2, r2, #3
    6fa2:	d05f      	beq.n	7064 <_ZN9ClearCore10UsbManager10RxCompleteEh13usb_xfer_codem+0x204>
            for (uint32_t i = 0; i < count; i++) {
                *outPtr++ = *inPtr++;
    6fa4:	7831      	ldrb	r1, [r6, #0]
    6fa6:	7001      	strb	r1, [r0, #0]
    6fa8:	2a01      	cmp	r2, #1
    6faa:	f100 0401 	add.w	r4, r0, #1
    6fae:	f106 0e01 	add.w	lr, r6, #1
    6fb2:	d058      	beq.n	7066 <_ZN9ClearCore10UsbManager10RxCompleteEh13usb_xfer_codem+0x206>
    6fb4:	7871      	ldrb	r1, [r6, #1]
    6fb6:	7041      	strb	r1, [r0, #1]
    6fb8:	2a02      	cmp	r2, #2
    6fba:	f100 0402 	add.w	r4, r0, #2
    6fbe:	f106 0e02 	add.w	lr, r6, #2
    6fc2:	d050      	beq.n	7066 <_ZN9ClearCore10UsbManager10RxCompleteEh13usb_xfer_codem+0x206>
    6fc4:	78b1      	ldrb	r1, [r6, #2]
    6fc6:	7081      	strb	r1, [r0, #2]
    6fc8:	1cc4      	adds	r4, r0, #3
    6fca:	f106 0e03 	add.w	lr, r6, #3
            for (uint32_t i = 0; i < count; i++) {
    6fce:	2703      	movs	r7, #3
    6fd0:	eba3 0c02 	sub.w	ip, r3, r2
    6fd4:	f1ac 0104 	sub.w	r1, ip, #4
    6fd8:	0889      	lsrs	r1, r1, #2
    6fda:	1c4d      	adds	r5, r1, #1
    6fdc:	4416      	add	r6, r2
    6fde:	ea4f 0885 	mov.w	r8, r5, lsl #2
    6fe2:	4402      	add	r2, r0
    6fe4:	2100      	movs	r1, #0
    6fe6:	3101      	adds	r1, #1
                *outPtr++ = *inPtr++;
    6fe8:	f856 9b04 	ldr.w	r9, [r6], #4
    6fec:	f842 9b04 	str.w	r9, [r2], #4
    6ff0:	428d      	cmp	r5, r1
    6ff2:	d8f8      	bhi.n	6fe6 <_ZN9ClearCore10UsbManager10RxCompleteEh13usb_xfer_codem+0x186>
    6ff4:	45c4      	cmp	ip, r8
    6ff6:	eb07 0208 	add.w	r2, r7, r8
    6ffa:	eb04 0108 	add.w	r1, r4, r8
    6ffe:	eb0e 0608 	add.w	r6, lr, r8
    7002:	d00d      	beq.n	7020 <_ZN9ClearCore10UsbManager10RxCompleteEh13usb_xfer_codem+0x1c0>
    7004:	f81e 7025 	ldrb.w	r7, [lr, r5, lsl #2]
    7008:	f804 7025 	strb.w	r7, [r4, r5, lsl #2]
            for (uint32_t i = 0; i < count; i++) {
    700c:	1c54      	adds	r4, r2, #1
    700e:	42a3      	cmp	r3, r4
    7010:	d906      	bls.n	7020 <_ZN9ClearCore10UsbManager10RxCompleteEh13usb_xfer_codem+0x1c0>
    7012:	3202      	adds	r2, #2
                *outPtr++ = *inPtr++;
    7014:	7874      	ldrb	r4, [r6, #1]
    7016:	704c      	strb	r4, [r1, #1]
            for (uint32_t i = 0; i < count; i++) {
    7018:	4293      	cmp	r3, r2
    701a:	d901      	bls.n	7020 <_ZN9ClearCore10UsbManager10RxCompleteEh13usb_xfer_codem+0x1c0>
                *outPtr++ = *inPtr++;
    701c:	78b2      	ldrb	r2, [r6, #2]
    701e:	708a      	strb	r2, [r1, #2]
            }
            m_inTail = count;
            m_readBufPtr += count;
    7020:	f8d0 2114 	ldr.w	r2, [r0, #276]	; 0x114
            m_readBufAvail -= count;
    7024:	f8d0 4118 	ldr.w	r4, [r0, #280]	; 0x118
            m_inTail = count;
    7028:	f8c0 3104 	str.w	r3, [r0, #260]	; 0x104
            m_readBufPtr += count;
    702c:	441a      	add	r2, r3
            m_readBufAvail -= count;
    702e:	1ae4      	subs	r4, r4, r3
            m_readBufPtr += count;
    7030:	f8c0 2114 	str.w	r2, [r0, #276]	; 0x114
            m_readBufAvail -= count;
    7034:	f8c0 4118 	str.w	r4, [r0, #280]	; 0x118
            m_inTail = (tail + countTilWrap) & (sizeof(m_bufferIn) - 1);
        }

        // If all of the available input data has been copied into the
        // ring buffer, read more input data from the USB device
        if (!m_readBufAvail) {
    7038:	b91c      	cbnz	r4, 7042 <_ZN9ClearCore10UsbManager10RxCompleteEh13usb_xfer_codem+0x1e2>
            cdcdf_acm_read(m_usbReadBuf, sizeof(m_usbReadBuf));
    703a:	3080      	adds	r0, #128	; 0x80
    703c:	2140      	movs	r1, #64	; 0x40
    703e:	f005 ffe5 	bl	d00c <cdcdf_acm_read>
  __ASM volatile ("cpsie i" : : : "memory");
    7042:	b662      	cpsie	i
}
    7044:	2001      	movs	r0, #1
    7046:	b003      	add	sp, #12
    7048:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        uint8_t *outPtr = &m_bufferIn[tail];
    704c:	46b4      	mov	ip, r6
        uint8_t *inPtr = m_readBufPtr;
    704e:	4690      	mov	r8, r2
        for (uint32_t i = 0; i < countTilWrap; i++) {
    7050:	9401      	str	r4, [sp, #4]
    7052:	e75e      	b.n	6f12 <_ZN9ClearCore10UsbManager10RxCompleteEh13usb_xfer_codem+0xb2>
            m_inTail = (tail + countTilWrap) & (sizeof(m_bufferIn) - 1);
    7054:	4429      	add	r1, r5
    7056:	f001 013f 	and.w	r1, r1, #63	; 0x3f
    705a:	f8c0 1104 	str.w	r1, [r0, #260]	; 0x104
    705e:	e7eb      	b.n	7038 <_ZN9ClearCore10UsbManager10RxCompleteEh13usb_xfer_codem+0x1d8>
    7060:	1856      	adds	r6, r2, r1
    7062:	e786      	b.n	6f72 <_ZN9ClearCore10UsbManager10RxCompleteEh13usb_xfer_codem+0x112>
            outPtr = m_bufferIn;
    7064:	46b6      	mov	lr, r6
            for (uint32_t i = 0; i < count; i++) {
    7066:	4617      	mov	r7, r2
    7068:	e7b2      	b.n	6fd0 <_ZN9ClearCore10UsbManager10RxCompleteEh13usb_xfer_codem+0x170>
    706a:	1e74      	subs	r4, r6, #1
    706c:	1856      	adds	r6, r2, r1
            *outPtr++ = *inPtr++;
    706e:	f812 7b01 	ldrb.w	r7, [r2], #1
    7072:	f804 7f01 	strb.w	r7, [r4, #1]!
        for (uint32_t i = 0; i < countTilWrap; i++) {
    7076:	42b2      	cmp	r2, r6
    7078:	d1f9      	bne.n	706e <_ZN9ClearCore10UsbManager10RxCompleteEh13usb_xfer_codem+0x20e>
    707a:	e77a      	b.n	6f72 <_ZN9ClearCore10UsbManager10RxCompleteEh13usb_xfer_codem+0x112>
    707c:	1e42      	subs	r2, r0, #1
    707e:	18f4      	adds	r4, r6, r3
                *outPtr++ = *inPtr++;
    7080:	f816 1b01 	ldrb.w	r1, [r6], #1
    7084:	f802 1f01 	strb.w	r1, [r2, #1]!
            for (uint32_t i = 0; i < count; i++) {
    7088:	42b4      	cmp	r4, r6
    708a:	d1f9      	bne.n	7080 <_ZN9ClearCore10UsbManager10RxCompleteEh13usb_xfer_codem+0x220>
    708c:	e7c8      	b.n	7020 <_ZN9ClearCore10UsbManager10RxCompleteEh13usb_xfer_codem+0x1c0>
        uint8_t *inPtr = m_readBufPtr;
    708e:	4616      	mov	r6, r2
    7090:	e773      	b.n	6f7a <_ZN9ClearCore10UsbManager10RxCompleteEh13usb_xfer_codem+0x11a>
    7092:	bf00      	nop
    7094:	20000c04 	.word	0x20000c04

00007098 <_ZN9ClearCore10UsbManager10TxCompleteEh13usb_xfer_codem>:
                            const uint32_t count) {
    7098:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
        UsbMgr.m_outHead =
    709c:	48d8      	ldr	r0, [pc, #864]	; (7400 <_ZN9ClearCore10UsbManager10TxCompleteEh13usb_xfer_codem+0x368>)
                            const uint32_t count) {
    709e:	b083      	sub	sp, #12
    if (rc == USB_XFER_DONE) {
    70a0:	2900      	cmp	r1, #0
    70a2:	f040 81ab 	bne.w	73fc <_ZN9ClearCore10UsbManager10TxCompleteEh13usb_xfer_codem+0x364>
        UsbMgr.m_outHead =
    70a6:	6801      	ldr	r1, [r0, #0]
            (UsbMgr.m_outHead + count) & (sizeof(m_bufferOut) - 1);
    70a8:	f8d1 3108 	ldr.w	r3, [r1, #264]	; 0x108
    70ac:	441a      	add	r2, r3
    70ae:	f002 023f 	and.w	r2, r2, #63	; 0x3f
        UsbMgr.m_outHead =
    70b2:	f8c1 2108 	str.w	r2, [r1, #264]	; 0x108
    atomic_clear_seqcst(&UsbMgr.m_sendActive);
    70b6:	2300      	movs	r3, #0
    70b8:	f3bf 8f5b 	dmb	ish
    70bc:	f881 3110 	strb.w	r3, [r1, #272]	; 0x110
    70c0:	f3bf 8f5b 	dmb	ish
    UsbMgr.TxPump();
    70c4:	6804      	ldr	r4, [r0, #0]
    if (atomic_test_and_set_acqrel(&m_sendActive)) {
    70c6:	f3bf 8f5b 	dmb	ish
    70ca:	f04f 0101 	mov.w	r1, #1
    70ce:	f504 7388 	add.w	r3, r4, #272	; 0x110
    70d2:	e8d3 2f4f 	ldrexb	r2, [r3]
    70d6:	e8c3 1f40 	strexb	r0, r1, [r3]
    70da:	2800      	cmp	r0, #0
    70dc:	d1f9      	bne.n	70d2 <_ZN9ClearCore10UsbManager10TxCompleteEh13usb_xfer_codem+0x3a>
    70de:	f3bf 8f5b 	dmb	ish
    70e2:	f012 0fff 	tst.w	r2, #255	; 0xff
    70e6:	f040 80dc 	bne.w	72a2 <_ZN9ClearCore10UsbManager10TxCompleteEh13usb_xfer_codem+0x20a>
    uint32_t head = m_outHead;
    70ea:	f8d4 6108 	ldr.w	r6, [r4, #264]	; 0x108
    uint32_t tail = m_outTail;
    70ee:	f8d4 110c 	ldr.w	r1, [r4, #268]	; 0x10c
    if (head == tail) {
    70f2:	428e      	cmp	r6, r1
    70f4:	f000 8191 	beq.w	741a <_ZN9ClearCore10UsbManager10TxCompleteEh13usb_xfer_codem+0x382>
    uint8_t *inPtr = m_bufferOut + head, *outPtr = m_usbWriteBuf;
    70f8:	f104 0240 	add.w	r2, r4, #64	; 0x40
    70fc:	eb02 0706 	add.w	r7, r2, r6
    7100:	f104 0ec0 	add.w	lr, r4, #192	; 0xc0
    if (head < tail) {
    7104:	f0c0 80d1 	bcc.w	72aa <_ZN9ClearCore10UsbManager10TxCompleteEh13usb_xfer_codem+0x212>
        uint32_t countTilWrap = sizeof(m_bufferOut) - head;
    7108:	f1c6 0340 	rsb	r3, r6, #64	; 0x40
        count = min(count, countTilWrap + tail);
    710c:	4419      	add	r1, r3
    710e:	2940      	cmp	r1, #64	; 0x40
    7110:	bf28      	it	cs
    7112:	2140      	movcs	r1, #64	; 0x40
    7114:	428b      	cmp	r3, r1
    7116:	bf28      	it	cs
    7118:	460b      	movcs	r3, r1
        for (uint32_t iChar = 0; iChar < loopEnd; iChar++) {
    711a:	2b00      	cmp	r3, #0
    711c:	f000 81a1 	beq.w	7462 <_ZN9ClearCore10UsbManager10TxCompleteEh13usb_xfer_codem+0x3ca>
    7120:	f106 0540 	add.w	r5, r6, #64	; 0x40
    7124:	f106 0c44 	add.w	ip, r6, #68	; 0x44
    7128:	1960      	adds	r0, r4, r5
    712a:	44a4      	add	ip, r4
    712c:	f104 08c4 	add.w	r8, r4, #196	; 0xc4
    7130:	4540      	cmp	r0, r8
    7132:	bf38      	it	cc
    7134:	45e6      	cmpcc	lr, ip
    7136:	f0c0 818a 	bcc.w	744e <_ZN9ClearCore10UsbManager10TxCompleteEh13usb_xfer_codem+0x3b6>
    713a:	2b0b      	cmp	r3, #11
    713c:	f240 8187 	bls.w	744e <_ZN9ClearCore10UsbManager10TxCompleteEh13usb_xfer_codem+0x3b6>
    7140:	4240      	negs	r0, r0
    7142:	f010 0003 	ands.w	r0, r0, #3
    7146:	f000 8161 	beq.w	740c <_ZN9ClearCore10UsbManager10TxCompleteEh13usb_xfer_codem+0x374>
            *outPtr++ = *inPtr++;
    714a:	5d96      	ldrb	r6, [r2, r6]
    714c:	f884 60c0 	strb.w	r6, [r4, #192]	; 0xc0
    7150:	2801      	cmp	r0, #1
    7152:	f104 0cc1 	add.w	ip, r4, #193	; 0xc1
    7156:	f107 0801 	add.w	r8, r7, #1
    715a:	f000 8159 	beq.w	7410 <_ZN9ClearCore10UsbManager10TxCompleteEh13usb_xfer_codem+0x378>
    715e:	787e      	ldrb	r6, [r7, #1]
    7160:	f884 60c1 	strb.w	r6, [r4, #193]	; 0xc1
    7164:	2802      	cmp	r0, #2
    7166:	f104 0cc2 	add.w	ip, r4, #194	; 0xc2
    716a:	f107 0802 	add.w	r8, r7, #2
    716e:	f000 814f 	beq.w	7410 <_ZN9ClearCore10UsbManager10TxCompleteEh13usb_xfer_codem+0x378>
    7172:	78be      	ldrb	r6, [r7, #2]
    7174:	f884 60c2 	strb.w	r6, [r4, #194]	; 0xc2
        for (uint32_t iChar = 0; iChar < loopEnd; iChar++) {
    7178:	2603      	movs	r6, #3
            *outPtr++ = *inPtr++;
    717a:	f107 0803 	add.w	r8, r7, #3
    717e:	f104 0cc3 	add.w	ip, r4, #195	; 0xc3
        for (uint32_t iChar = 0; iChar < loopEnd; iChar++) {
    7182:	9601      	str	r6, [sp, #4]
    7184:	eba3 0b00 	sub.w	fp, r3, r0
    7188:	f1ab 0604 	sub.w	r6, fp, #4
    718c:	08b6      	lsrs	r6, r6, #2
    718e:	4405      	add	r5, r0
    7190:	3601      	adds	r6, #1
    7192:	30c0      	adds	r0, #192	; 0xc0
    7194:	4425      	add	r5, r4
    7196:	4420      	add	r0, r4
    7198:	ea4f 0986 	mov.w	r9, r6, lsl #2
    719c:	2700      	movs	r7, #0
    719e:	3701      	adds	r7, #1
            *outPtr++ = *inPtr++;
    71a0:	f855 ab04 	ldr.w	sl, [r5], #4
    71a4:	f840 ab04 	str.w	sl, [r0], #4
    71a8:	42b7      	cmp	r7, r6
    71aa:	d3f8      	bcc.n	719e <_ZN9ClearCore10UsbManager10TxCompleteEh13usb_xfer_codem+0x106>
    71ac:	9801      	ldr	r0, [sp, #4]
    71ae:	45cb      	cmp	fp, r9
    71b0:	4448      	add	r0, r9
    71b2:	eb0c 0509 	add.w	r5, ip, r9
    71b6:	eb08 0709 	add.w	r7, r8, r9
    71ba:	d00d      	beq.n	71d8 <_ZN9ClearCore10UsbManager10TxCompleteEh13usb_xfer_codem+0x140>
    71bc:	f818 8026 	ldrb.w	r8, [r8, r6, lsl #2]
    71c0:	f80c 8026 	strb.w	r8, [ip, r6, lsl #2]
        for (uint32_t iChar = 0; iChar < loopEnd; iChar++) {
    71c4:	1c46      	adds	r6, r0, #1
    71c6:	42b3      	cmp	r3, r6
    71c8:	d906      	bls.n	71d8 <_ZN9ClearCore10UsbManager10TxCompleteEh13usb_xfer_codem+0x140>
    71ca:	3002      	adds	r0, #2
            *outPtr++ = *inPtr++;
    71cc:	787e      	ldrb	r6, [r7, #1]
    71ce:	706e      	strb	r6, [r5, #1]
        for (uint32_t iChar = 0; iChar < loopEnd; iChar++) {
    71d0:	4283      	cmp	r3, r0
    71d2:	d901      	bls.n	71d8 <_ZN9ClearCore10UsbManager10TxCompleteEh13usb_xfer_codem+0x140>
            *outPtr++ = *inPtr++;
    71d4:	78b8      	ldrb	r0, [r7, #2]
    71d6:	70a8      	strb	r0, [r5, #2]
    71d8:	eb0e 0003 	add.w	r0, lr, r3
        for (uint32_t iChar = 0; iChar < loopEnd; iChar++) {
    71dc:	1acb      	subs	r3, r1, r3
    71de:	f000 80fc 	beq.w	73da <_ZN9ClearCore10UsbManager10TxCompleteEh13usb_xfer_codem+0x342>
    71e2:	f104 0544 	add.w	r5, r4, #68	; 0x44
    71e6:	1d06      	adds	r6, r0, #4
    71e8:	42b2      	cmp	r2, r6
    71ea:	bf38      	it	cc
    71ec:	42a8      	cmpcc	r0, r5
    71ee:	f0c0 8125 	bcc.w	743c <_ZN9ClearCore10UsbManager10TxCompleteEh13usb_xfer_codem+0x3a4>
    71f2:	2b0b      	cmp	r3, #11
    71f4:	f240 8122 	bls.w	743c <_ZN9ClearCore10UsbManager10TxCompleteEh13usb_xfer_codem+0x3a4>
    71f8:	4255      	negs	r5, r2
    71fa:	f015 0503 	ands.w	r5, r5, #3
    71fe:	f000 8109 	beq.w	7414 <_ZN9ClearCore10UsbManager10TxCompleteEh13usb_xfer_codem+0x37c>
            *outPtr++ = *inPtr++;
    7202:	f894 2040 	ldrb.w	r2, [r4, #64]	; 0x40
    7206:	7002      	strb	r2, [r0, #0]
    7208:	2d01      	cmp	r5, #1
    720a:	f100 0801 	add.w	r8, r0, #1
    720e:	f104 0241 	add.w	r2, r4, #65	; 0x41
    7212:	f000 8100 	beq.w	7416 <_ZN9ClearCore10UsbManager10TxCompleteEh13usb_xfer_codem+0x37e>
    7216:	f894 2041 	ldrb.w	r2, [r4, #65]	; 0x41
    721a:	7042      	strb	r2, [r0, #1]
    721c:	2d02      	cmp	r5, #2
    721e:	f100 0802 	add.w	r8, r0, #2
    7222:	f104 0242 	add.w	r2, r4, #66	; 0x42
    7226:	f000 80f6 	beq.w	7416 <_ZN9ClearCore10UsbManager10TxCompleteEh13usb_xfer_codem+0x37e>
    722a:	f894 2042 	ldrb.w	r2, [r4, #66]	; 0x42
    722e:	7082      	strb	r2, [r0, #2]
    7230:	f100 0803 	add.w	r8, r0, #3
    7234:	f104 0243 	add.w	r2, r4, #67	; 0x43
        for (uint32_t iChar = 0; iChar < loopEnd; iChar++) {
    7238:	2703      	movs	r7, #3
    723a:	eba3 0905 	sub.w	r9, r3, r5
    723e:	f1a9 0604 	sub.w	r6, r9, #4
    7242:	08b6      	lsrs	r6, r6, #2
    7244:	f105 0c40 	add.w	ip, r5, #64	; 0x40
    7248:	3601      	adds	r6, #1
    724a:	4428      	add	r0, r5
    724c:	44a4      	add	ip, r4
    724e:	ea4f 0b86 	mov.w	fp, r6, lsl #2
    7252:	f04f 0a00 	mov.w	sl, #0
    7256:	f10a 0a01 	add.w	sl, sl, #1
            *outPtr++ = *inPtr++;
    725a:	f85c 5b04 	ldr.w	r5, [ip], #4
    725e:	f840 5b04 	str.w	r5, [r0], #4
    7262:	4556      	cmp	r6, sl
    7264:	d8f7      	bhi.n	7256 <_ZN9ClearCore10UsbManager10TxCompleteEh13usb_xfer_codem+0x1be>
    7266:	45d9      	cmp	r9, fp
    7268:	445f      	add	r7, fp
    726a:	eb08 000b 	add.w	r0, r8, fp
    726e:	eb02 050b 	add.w	r5, r2, fp
    7272:	f000 80b2 	beq.w	73da <_ZN9ClearCore10UsbManager10TxCompleteEh13usb_xfer_codem+0x342>
    7276:	f812 2026 	ldrb.w	r2, [r2, r6, lsl #2]
    727a:	f808 2026 	strb.w	r2, [r8, r6, lsl #2]
        for (uint32_t iChar = 0; iChar < loopEnd; iChar++) {
    727e:	1c7a      	adds	r2, r7, #1
    7280:	4293      	cmp	r3, r2
    7282:	f240 80aa 	bls.w	73da <_ZN9ClearCore10UsbManager10TxCompleteEh13usb_xfer_codem+0x342>
    7286:	3702      	adds	r7, #2
            *outPtr++ = *inPtr++;
    7288:	786a      	ldrb	r2, [r5, #1]
    728a:	7042      	strb	r2, [r0, #1]
        for (uint32_t iChar = 0; iChar < loopEnd; iChar++) {
    728c:	42bb      	cmp	r3, r7
    728e:	f240 80a4 	bls.w	73da <_ZN9ClearCore10UsbManager10TxCompleteEh13usb_xfer_codem+0x342>
            *outPtr++ = *inPtr++;
    7292:	78ab      	ldrb	r3, [r5, #2]
    7294:	7083      	strb	r3, [r0, #2]
    if (cdcdf_acm_write(m_usbWriteBuf, count)) {
    7296:	4670      	mov	r0, lr
    7298:	f005 fecc 	bl	d034 <cdcdf_acm_write>
    729c:	2800      	cmp	r0, #0
    729e:	f040 80a2 	bne.w	73e6 <_ZN9ClearCore10UsbManager10TxCompleteEh13usb_xfer_codem+0x34e>
}
    72a2:	2001      	movs	r0, #1
    72a4:	b003      	add	sp, #12
    72a6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        count = min(count, tail - head);
    72aa:	1b89      	subs	r1, r1, r6
    72ac:	f106 0340 	add.w	r3, r6, #64	; 0x40
    72b0:	f106 0044 	add.w	r0, r6, #68	; 0x44
    72b4:	2940      	cmp	r1, #64	; 0x40
    72b6:	eb04 0803 	add.w	r8, r4, r3
    72ba:	4420      	add	r0, r4
    72bc:	f104 05c4 	add.w	r5, r4, #196	; 0xc4
    72c0:	bf28      	it	cs
    72c2:	2140      	movcs	r1, #64	; 0x40
    72c4:	45a8      	cmp	r8, r5
    72c6:	bf38      	it	cc
    72c8:	4586      	cmpcc	lr, r0
    72ca:	f0c0 80ad 	bcc.w	7428 <_ZN9ClearCore10UsbManager10TxCompleteEh13usb_xfer_codem+0x390>
    72ce:	290b      	cmp	r1, #11
    72d0:	f240 80aa 	bls.w	7428 <_ZN9ClearCore10UsbManager10TxCompleteEh13usb_xfer_codem+0x390>
    72d4:	f1c8 0800 	rsb	r8, r8, #0
    72d8:	f018 0803 	ands.w	r8, r8, #3
    72dc:	f000 8092 	beq.w	7404 <_ZN9ClearCore10UsbManager10TxCompleteEh13usb_xfer_codem+0x36c>
            *outPtr++ = *inPtr++;
    72e0:	5d92      	ldrb	r2, [r2, r6]
    72e2:	f884 20c0 	strb.w	r2, [r4, #192]	; 0xc0
    72e6:	f1b8 0f01 	cmp.w	r8, #1
    72ea:	f104 05c1 	add.w	r5, r4, #193	; 0xc1
    72ee:	f107 0601 	add.w	r6, r7, #1
    72f2:	f000 8089 	beq.w	7408 <_ZN9ClearCore10UsbManager10TxCompleteEh13usb_xfer_codem+0x370>
    72f6:	787a      	ldrb	r2, [r7, #1]
    72f8:	f884 20c1 	strb.w	r2, [r4, #193]	; 0xc1
    72fc:	f1b8 0f02 	cmp.w	r8, #2
    7300:	f104 05c2 	add.w	r5, r4, #194	; 0xc2
    7304:	f107 0602 	add.w	r6, r7, #2
    7308:	d07e      	beq.n	7408 <_ZN9ClearCore10UsbManager10TxCompleteEh13usb_xfer_codem+0x370>
    730a:	78ba      	ldrb	r2, [r7, #2]
    730c:	f884 20c2 	strb.w	r2, [r4, #194]	; 0xc2
    7310:	1cfe      	adds	r6, r7, #3
    7312:	f104 05c3 	add.w	r5, r4, #195	; 0xc3
        for (uint32_t iChar = 0; iChar < count; iChar++) {
    7316:	f04f 0903 	mov.w	r9, #3
    731a:	4443      	add	r3, r8
    731c:	f108 00c0 	add.w	r0, r8, #192	; 0xc0
            *outPtr++ = *inPtr++;
    7320:	58e2      	ldr	r2, [r4, r3]
    7322:	5022      	str	r2, [r4, r0]
    7324:	eba1 0808 	sub.w	r8, r1, r8
    7328:	f1a8 0204 	sub.w	r2, r8, #4
    732c:	4423      	add	r3, r4
    732e:	0892      	lsrs	r2, r2, #2
    7330:	3201      	adds	r2, #1
    7332:	4420      	add	r0, r4
    7334:	685f      	ldr	r7, [r3, #4]
    7336:	6047      	str	r7, [r0, #4]
    7338:	2a02      	cmp	r2, #2
    733a:	ea4f 0c82 	mov.w	ip, r2, lsl #2
    733e:	d035      	beq.n	73ac <_ZN9ClearCore10UsbManager10TxCompleteEh13usb_xfer_codem+0x314>
    7340:	689f      	ldr	r7, [r3, #8]
    7342:	6087      	str	r7, [r0, #8]
    7344:	2a03      	cmp	r2, #3
    7346:	d031      	beq.n	73ac <_ZN9ClearCore10UsbManager10TxCompleteEh13usb_xfer_codem+0x314>
    7348:	68df      	ldr	r7, [r3, #12]
    734a:	60c7      	str	r7, [r0, #12]
    734c:	2a04      	cmp	r2, #4
    734e:	d02d      	beq.n	73ac <_ZN9ClearCore10UsbManager10TxCompleteEh13usb_xfer_codem+0x314>
    7350:	691f      	ldr	r7, [r3, #16]
    7352:	6107      	str	r7, [r0, #16]
    7354:	2a05      	cmp	r2, #5
    7356:	d029      	beq.n	73ac <_ZN9ClearCore10UsbManager10TxCompleteEh13usb_xfer_codem+0x314>
    7358:	695f      	ldr	r7, [r3, #20]
    735a:	6147      	str	r7, [r0, #20]
    735c:	2a06      	cmp	r2, #6
    735e:	d025      	beq.n	73ac <_ZN9ClearCore10UsbManager10TxCompleteEh13usb_xfer_codem+0x314>
    7360:	699f      	ldr	r7, [r3, #24]
    7362:	6187      	str	r7, [r0, #24]
    7364:	2a07      	cmp	r2, #7
    7366:	d021      	beq.n	73ac <_ZN9ClearCore10UsbManager10TxCompleteEh13usb_xfer_codem+0x314>
    7368:	69df      	ldr	r7, [r3, #28]
    736a:	61c7      	str	r7, [r0, #28]
    736c:	2a08      	cmp	r2, #8
    736e:	d01d      	beq.n	73ac <_ZN9ClearCore10UsbManager10TxCompleteEh13usb_xfer_codem+0x314>
    7370:	6a1f      	ldr	r7, [r3, #32]
    7372:	6207      	str	r7, [r0, #32]
    7374:	2a09      	cmp	r2, #9
    7376:	d019      	beq.n	73ac <_ZN9ClearCore10UsbManager10TxCompleteEh13usb_xfer_codem+0x314>
    7378:	6a5f      	ldr	r7, [r3, #36]	; 0x24
    737a:	6247      	str	r7, [r0, #36]	; 0x24
    737c:	2a0a      	cmp	r2, #10
    737e:	d015      	beq.n	73ac <_ZN9ClearCore10UsbManager10TxCompleteEh13usb_xfer_codem+0x314>
    7380:	6a9f      	ldr	r7, [r3, #40]	; 0x28
    7382:	6287      	str	r7, [r0, #40]	; 0x28
    7384:	2a0b      	cmp	r2, #11
    7386:	d011      	beq.n	73ac <_ZN9ClearCore10UsbManager10TxCompleteEh13usb_xfer_codem+0x314>
    7388:	6adf      	ldr	r7, [r3, #44]	; 0x2c
    738a:	62c7      	str	r7, [r0, #44]	; 0x2c
    738c:	2a0c      	cmp	r2, #12
    738e:	d00d      	beq.n	73ac <_ZN9ClearCore10UsbManager10TxCompleteEh13usb_xfer_codem+0x314>
    7390:	6b1f      	ldr	r7, [r3, #48]	; 0x30
    7392:	6307      	str	r7, [r0, #48]	; 0x30
    7394:	2a0d      	cmp	r2, #13
    7396:	d009      	beq.n	73ac <_ZN9ClearCore10UsbManager10TxCompleteEh13usb_xfer_codem+0x314>
    7398:	6b5f      	ldr	r7, [r3, #52]	; 0x34
    739a:	6347      	str	r7, [r0, #52]	; 0x34
    739c:	2a0e      	cmp	r2, #14
    739e:	d005      	beq.n	73ac <_ZN9ClearCore10UsbManager10TxCompleteEh13usb_xfer_codem+0x314>
    73a0:	6b9f      	ldr	r7, [r3, #56]	; 0x38
    73a2:	6387      	str	r7, [r0, #56]	; 0x38
    73a4:	2a0f      	cmp	r2, #15
    73a6:	d001      	beq.n	73ac <_ZN9ClearCore10UsbManager10TxCompleteEh13usb_xfer_codem+0x314>
    73a8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
    73aa:	63c3      	str	r3, [r0, #60]	; 0x3c
    73ac:	45e0      	cmp	r8, ip
    73ae:	44e1      	add	r9, ip
    73b0:	eb05 030c 	add.w	r3, r5, ip
    73b4:	eb06 000c 	add.w	r0, r6, ip
    73b8:	d00f      	beq.n	73da <_ZN9ClearCore10UsbManager10TxCompleteEh13usb_xfer_codem+0x342>
    73ba:	f816 6022 	ldrb.w	r6, [r6, r2, lsl #2]
    73be:	f805 6022 	strb.w	r6, [r5, r2, lsl #2]
        for (uint32_t iChar = 0; iChar < count; iChar++) {
    73c2:	f109 0201 	add.w	r2, r9, #1
    73c6:	4291      	cmp	r1, r2
    73c8:	d907      	bls.n	73da <_ZN9ClearCore10UsbManager10TxCompleteEh13usb_xfer_codem+0x342>
    73ca:	f109 0902 	add.w	r9, r9, #2
            *outPtr++ = *inPtr++;
    73ce:	7842      	ldrb	r2, [r0, #1]
    73d0:	705a      	strb	r2, [r3, #1]
        for (uint32_t iChar = 0; iChar < count; iChar++) {
    73d2:	4549      	cmp	r1, r9
    73d4:	d901      	bls.n	73da <_ZN9ClearCore10UsbManager10TxCompleteEh13usb_xfer_codem+0x342>
            *outPtr++ = *inPtr++;
    73d6:	7882      	ldrb	r2, [r0, #2]
    73d8:	709a      	strb	r2, [r3, #2]
    if (cdcdf_acm_write(m_usbWriteBuf, count)) {
    73da:	4670      	mov	r0, lr
    73dc:	f005 fe2a 	bl	d034 <cdcdf_acm_write>
    73e0:	2800      	cmp	r0, #0
    73e2:	f43f af5e 	beq.w	72a2 <_ZN9ClearCore10UsbManager10TxCompleteEh13usb_xfer_codem+0x20a>
        atomic_clear_seqcst(&m_sendActive);
    73e6:	f3bf 8f5b 	dmb	ish
    73ea:	2300      	movs	r3, #0
    73ec:	f884 3110 	strb.w	r3, [r4, #272]	; 0x110
}
    73f0:	2001      	movs	r0, #1
        atomic_clear_seqcst(&m_sendActive);
    73f2:	f3bf 8f5b 	dmb	ish
}
    73f6:	b003      	add	sp, #12
    73f8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    73fc:	6801      	ldr	r1, [r0, #0]
    73fe:	e65a      	b.n	70b6 <_ZN9ClearCore10UsbManager10TxCompleteEh13usb_xfer_codem+0x1e>
    7400:	20000c04 	.word	0x20000c04
    uint8_t *inPtr = m_bufferOut + head, *outPtr = m_usbWriteBuf;
    7404:	463e      	mov	r6, r7
    7406:	4675      	mov	r5, lr
        for (uint32_t iChar = 0; iChar < count; iChar++) {
    7408:	46c1      	mov	r9, r8
    740a:	e786      	b.n	731a <_ZN9ClearCore10UsbManager10TxCompleteEh13usb_xfer_codem+0x282>
    uint8_t *inPtr = m_bufferOut + head, *outPtr = m_usbWriteBuf;
    740c:	46b8      	mov	r8, r7
    740e:	46f4      	mov	ip, lr
        for (uint32_t iChar = 0; iChar < loopEnd; iChar++) {
    7410:	9001      	str	r0, [sp, #4]
    7412:	e6b7      	b.n	7184 <_ZN9ClearCore10UsbManager10TxCompleteEh13usb_xfer_codem+0xec>
        for (uint32_t iChar = 0; iChar < loopEnd; iChar++) {
    7414:	4680      	mov	r8, r0
    7416:	462f      	mov	r7, r5
    7418:	e70f      	b.n	723a <_ZN9ClearCore10UsbManager10TxCompleteEh13usb_xfer_codem+0x1a2>
        atomic_clear_seqcst(&m_sendActive);
    741a:	f3bf 8f5b 	dmb	ish
    741e:	f884 2110 	strb.w	r2, [r4, #272]	; 0x110
    7422:	f3bf 8f5b 	dmb	ish
    7426:	e73c      	b.n	72a2 <_ZN9ClearCore10UsbManager10TxCompleteEh13usb_xfer_codem+0x20a>
    7428:	f104 03bf 	add.w	r3, r4, #191	; 0xbf
    742c:	1878      	adds	r0, r7, r1
            *outPtr++ = *inPtr++;
    742e:	f817 2b01 	ldrb.w	r2, [r7], #1
    7432:	f803 2f01 	strb.w	r2, [r3, #1]!
        for (uint32_t iChar = 0; iChar < count; iChar++) {
    7436:	4287      	cmp	r7, r0
    7438:	d1f9      	bne.n	742e <_ZN9ClearCore10UsbManager10TxCompleteEh13usb_xfer_codem+0x396>
    743a:	e7ce      	b.n	73da <_ZN9ClearCore10UsbManager10TxCompleteEh13usb_xfer_codem+0x342>
    743c:	3801      	subs	r0, #1
    743e:	4413      	add	r3, r2
            *outPtr++ = *inPtr++;
    7440:	f812 5b01 	ldrb.w	r5, [r2], #1
    7444:	f800 5f01 	strb.w	r5, [r0, #1]!
        for (uint32_t iChar = 0; iChar < loopEnd; iChar++) {
    7448:	429a      	cmp	r2, r3
    744a:	d1f9      	bne.n	7440 <_ZN9ClearCore10UsbManager10TxCompleteEh13usb_xfer_codem+0x3a8>
    744c:	e7c5      	b.n	73da <_ZN9ClearCore10UsbManager10TxCompleteEh13usb_xfer_codem+0x342>
    744e:	f104 00bf 	add.w	r0, r4, #191	; 0xbf
    7452:	18fe      	adds	r6, r7, r3
            *outPtr++ = *inPtr++;
    7454:	f817 5b01 	ldrb.w	r5, [r7], #1
    7458:	f800 5f01 	strb.w	r5, [r0, #1]!
        for (uint32_t iChar = 0; iChar < loopEnd; iChar++) {
    745c:	42be      	cmp	r6, r7
    745e:	d1f9      	bne.n	7454 <_ZN9ClearCore10UsbManager10TxCompleteEh13usb_xfer_codem+0x3bc>
    7460:	e6ba      	b.n	71d8 <_ZN9ClearCore10UsbManager10TxCompleteEh13usb_xfer_codem+0x140>
    uint8_t *inPtr = m_bufferOut + head, *outPtr = m_usbWriteBuf;
    7462:	4670      	mov	r0, lr
    7464:	e6ba      	b.n	71dc <_ZN9ClearCore10UsbManager10TxCompleteEh13usb_xfer_codem+0x144>
    7466:	bf00      	nop

00007468 <_ZN9ClearCore10UsbManager8InstanceEv>:
UsbManager &UsbManager::Instance() {
    7468:	b570      	push	{r4, r5, r6, lr}
    static UsbManager *instance = new UsbManager();
    746a:	4e16      	ldr	r6, [pc, #88]	; (74c4 <_ZN9ClearCore10UsbManager8InstanceEv+0x5c>)
    746c:	6834      	ldr	r4, [r6, #0]
    746e:	f014 0401 	ands.w	r4, r4, #1
    7472:	d002      	beq.n	747a <_ZN9ClearCore10UsbManager8InstanceEv+0x12>
    7474:	4b14      	ldr	r3, [pc, #80]	; (74c8 <_ZN9ClearCore10UsbManager8InstanceEv+0x60>)
    7476:	6818      	ldr	r0, [r3, #0]
    7478:	bd70      	pop	{r4, r5, r6, pc}
    747a:	f44f 7090 	mov.w	r0, #288	; 0x120
    747e:	f00b fda3 	bl	12fc8 <_Znwj>
    7482:	4605      	mov	r5, r0
    m_portOpen(false) {
    7484:	f100 0380 	add.w	r3, r0, #128	; 0x80
    7488:	f8c0 4100 	str.w	r4, [r0, #256]	; 0x100
                                (FUNC_PTR)CBLineStateChanged);
    748c:	490f      	ldr	r1, [pc, #60]	; (74cc <_ZN9ClearCore10UsbManager8InstanceEv+0x64>)
    m_portOpen(false) {
    748e:	f8c5 4104 	str.w	r4, [r5, #260]	; 0x104
    7492:	f8c5 3114 	str.w	r3, [r5, #276]	; 0x114
    7496:	f8c5 4108 	str.w	r4, [r5, #264]	; 0x108
    749a:	f8c5 4118 	str.w	r4, [r5, #280]	; 0x118
    749e:	f8c5 410c 	str.w	r4, [r5, #268]	; 0x10c
    74a2:	f885 411c 	strb.w	r4, [r5, #284]	; 0x11c
    74a6:	f885 4110 	strb.w	r4, [r5, #272]	; 0x110
    m_lineState.value = 0;
    74aa:	f8a5 4112 	strh.w	r4, [r5, #274]	; 0x112
    m_portOpen(false) {
    74ae:	f885 4111 	strb.w	r4, [r5, #273]	; 0x111
                                (FUNC_PTR)CBLineStateChanged);
    74b2:	2003      	movs	r0, #3
    74b4:	f005 fdde 	bl	d074 <cdcdf_acm_register_callback>
    static UsbManager *instance = new UsbManager();
    74b8:	4a03      	ldr	r2, [pc, #12]	; (74c8 <_ZN9ClearCore10UsbManager8InstanceEv+0x60>)
    74ba:	2301      	movs	r3, #1
    74bc:	6015      	str	r5, [r2, #0]
    74be:	4628      	mov	r0, r5
    74c0:	6033      	str	r3, [r6, #0]
}
    74c2:	bd70      	pop	{r4, r5, r6, pc}
    74c4:	20000c00 	.word	0x20000c00
    74c8:	20000c48 	.word	0x20000c48
    74cc:	00006de1 	.word	0x00006de1

000074d0 <_ZN9ClearCore10UsbManager10InitializeEv>:
bool UsbManager::Initialize() {
    74d0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    SET_CLOCK_SOURCE(USB_GCLK_ID, 4);
    74d4:	4ac7      	ldr	r2, [pc, #796]	; (77f4 <_ZN9ClearCore10UsbManager10InitializeEv+0x324>)
    74d6:	f8d2 30a8 	ldr.w	r3, [r2, #168]	; 0xa8
    74da:	f36f 1386 	bfc	r3, #6, #1
bool UsbManager::Initialize() {
    74de:	b08c      	sub	sp, #48	; 0x30
    SET_CLOCK_SOURCE(USB_GCLK_ID, 4);
    74e0:	f8c2 30a8 	str.w	r3, [r2, #168]	; 0xa8
    74e4:	f8d2 30a8 	ldr.w	r3, [r2, #168]	; 0xa8
    74e8:	0659      	lsls	r1, r3, #25
    74ea:	d4fb      	bmi.n	74e4 <_ZN9ClearCore10UsbManager10InitializeEv+0x14>
    74ec:	f8d2 30a8 	ldr.w	r3, [r2, #168]	; 0xa8
    74f0:	49c0      	ldr	r1, [pc, #768]	; (77f4 <_ZN9ClearCore10UsbManager10InitializeEv+0x324>)
    74f2:	2004      	movs	r0, #4
    74f4:	f360 0303 	bfi	r3, r0, #0, #4
    74f8:	f8c2 30a8 	str.w	r3, [r2, #168]	; 0xa8
    74fc:	f8d2 30a8 	ldr.w	r3, [r2, #168]	; 0xa8
    7500:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    7504:	f8c2 30a8 	str.w	r3, [r2, #168]	; 0xa8
    7508:	684b      	ldr	r3, [r1, #4]
    750a:	06db      	lsls	r3, r3, #27
    750c:	d4fc      	bmi.n	7508 <_ZN9ClearCore10UsbManager10InitializeEv+0x38>
    CLOCK_ENABLE(AHBMASK, USB_);
    750e:	4bba      	ldr	r3, [pc, #744]	; (77f8 <_ZN9ClearCore10UsbManager10InitializeEv+0x328>)
                              CONF_USB_CDCD_ACM_ISERIALNUM);
    7510:	49ba      	ldr	r1, [pc, #744]	; (77fc <_ZN9ClearCore10UsbManager10InitializeEv+0x32c>)
    CLOCK_ENABLE(AHBMASK, USB_);
    7512:	691a      	ldr	r2, [r3, #16]
    7514:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
    7518:	611a      	str	r2, [r3, #16]
    CLOCK_ENABLE(APBBMASK, USB_);
    751a:	699a      	ldr	r2, [r3, #24]
    751c:	f042 0201 	orr.w	r2, r2, #1
    7520:	619a      	str	r2, [r3, #24]
                              CONF_USB_CDCD_ACM_ISERIALNUM);
    7522:	f1a1 00d7 	sub.w	r0, r1, #215	; 0xd7
    7526:	2203      	movs	r2, #3
    7528:	f006 f950 	bl	d7cc <usb_find_str_desc>
    if (!serNumDescPtr) {
    752c:	4604      	mov	r4, r0
    752e:	2800      	cmp	r0, #0
    7530:	f000 819c 	beq.w	786c <_ZN9ClearCore10UsbManager10InitializeEv+0x39c>
                             };
    7534:	4bb2      	ldr	r3, [pc, #712]	; (7800 <_ZN9ClearCore10UsbManager10InitializeEv+0x330>)
    7536:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
    7538:	e88d 000f 	stmia.w	sp, {r0, r1, r2, r3}
        serial_number_idx += writeNum(&(serial_number[serial_number_idx]),
    753c:	6803      	ldr	r3, [r0, #0]
        int d = (n >> sh) & 0xf;
    753e:	0f1d      	lsrs	r5, r3, #28
            buf[i++] = d > 9 ? 'A' + d - 10 : '0' + d;
    7540:	b2e8      	uxtb	r0, r5
        int d = (n >> sh) & 0xf;
    7542:	f3c3 6803 	ubfx	r8, r3, #24, #4
            buf[i++] = d > 9 ? 'A' + d - 10 : '0' + d;
    7546:	f100 0730 	add.w	r7, r0, #48	; 0x30
    754a:	3037      	adds	r0, #55	; 0x37
    754c:	2d09      	cmp	r5, #9
    754e:	bf88      	it	hi
    7550:	4607      	movhi	r7, r0
    7552:	fa5f f088 	uxtb.w	r0, r8
        int d = (n >> sh) & 0xf;
    7556:	f3c3 5603 	ubfx	r6, r3, #20, #4
            buf[i++] = d > 9 ? 'A' + d - 10 : '0' + d;
    755a:	f100 0c30 	add.w	ip, r0, #48	; 0x30
    755e:	3037      	adds	r0, #55	; 0x37
    7560:	f1b8 0f09 	cmp.w	r8, #9
    7564:	bfc8      	it	gt
    7566:	4684      	movgt	ip, r0
    7568:	b2f0      	uxtb	r0, r6
        int d = (n >> sh) & 0xf;
    756a:	f3c3 4503 	ubfx	r5, r3, #16, #4
            buf[i++] = d > 9 ? 'A' + d - 10 : '0' + d;
    756e:	f88d c011 	strb.w	ip, [sp, #17]
    7572:	f100 0c30 	add.w	ip, r0, #48	; 0x30
    7576:	3037      	adds	r0, #55	; 0x37
    7578:	2e09      	cmp	r6, #9
    757a:	bfc8      	it	gt
    757c:	4684      	movgt	ip, r0
    757e:	b2e8      	uxtb	r0, r5
        int d = (n >> sh) & 0xf;
    7580:	f3c3 3e03 	ubfx	lr, r3, #12, #4
            buf[i++] = d > 9 ? 'A' + d - 10 : '0' + d;
    7584:	f88d c012 	strb.w	ip, [sp, #18]
    7588:	f100 0c30 	add.w	ip, r0, #48	; 0x30
    758c:	3037      	adds	r0, #55	; 0x37
    758e:	2d09      	cmp	r5, #9
    7590:	bfc8      	it	gt
    7592:	4684      	movgt	ip, r0
    7594:	fa5f f08e 	uxtb.w	r0, lr
    7598:	f88d 7010 	strb.w	r7, [sp, #16]
    759c:	f88d c013 	strb.w	ip, [sp, #19]
        int d = (n >> sh) & 0xf;
    75a0:	f3c3 2703 	ubfx	r7, r3, #8, #4
            buf[i++] = d > 9 ? 'A' + d - 10 : '0' + d;
    75a4:	f100 0c30 	add.w	ip, r0, #48	; 0x30
    75a8:	3037      	adds	r0, #55	; 0x37
    75aa:	f1be 0f09 	cmp.w	lr, #9
    75ae:	bfd4      	ite	le
    75b0:	46e6      	movle	lr, ip
    75b2:	4686      	movgt	lr, r0
    75b4:	b2f8      	uxtb	r0, r7
        int d = (n >> sh) & 0xf;
    75b6:	f3c3 1603 	ubfx	r6, r3, #4, #4
        serial_number_idx += writeNum(&(serial_number[serial_number_idx]),
    75ba:	460a      	mov	r2, r1
            buf[i++] = d > 9 ? 'A' + d - 10 : '0' + d;
    75bc:	f88d e014 	strb.w	lr, [sp, #20]
    75c0:	f100 0e37 	add.w	lr, r0, #55	; 0x37
    75c4:	3030      	adds	r0, #48	; 0x30
    75c6:	2f09      	cmp	r7, #9
    75c8:	bfcc      	ite	gt
    75ca:	4677      	movgt	r7, lr
    75cc:	4607      	movle	r7, r0
    75ce:	b2f0      	uxtb	r0, r6
        serial_number_idx += writeNum(&(serial_number[serial_number_idx]),
    75d0:	6812      	ldr	r2, [r2, #0]
            buf[i++] = d > 9 ? 'A' + d - 10 : '0' + d;
    75d2:	f88d 7015 	strb.w	r7, [sp, #21]
        int d = (n >> sh) & 0xf;
    75d6:	f003 030f 	and.w	r3, r3, #15
            buf[i++] = d > 9 ? 'A' + d - 10 : '0' + d;
    75da:	f100 0737 	add.w	r7, r0, #55	; 0x37
    75de:	3030      	adds	r0, #48	; 0x30
    75e0:	2e09      	cmp	r6, #9
    75e2:	bfcc      	ite	gt
    75e4:	463e      	movgt	r6, r7
    75e6:	4606      	movle	r6, r0
    75e8:	b2d8      	uxtb	r0, r3
        int d = (n >> sh) & 0xf;
    75ea:	0f15      	lsrs	r5, r2, #28
            buf[i++] = d > 9 ? 'A' + d - 10 : '0' + d;
    75ec:	f88d 6016 	strb.w	r6, [sp, #22]
    75f0:	f100 0637 	add.w	r6, r0, #55	; 0x37
    75f4:	3030      	adds	r0, #48	; 0x30
    75f6:	2b09      	cmp	r3, #9
    75f8:	bfcc      	ite	gt
    75fa:	4633      	movgt	r3, r6
    75fc:	4603      	movle	r3, r0
    75fe:	b2e8      	uxtb	r0, r5
        int d = (n >> sh) & 0xf;
    7600:	f3c2 6c03 	ubfx	ip, r2, #24, #4
            buf[i++] = d > 9 ? 'A' + d - 10 : '0' + d;
    7604:	f88d 3017 	strb.w	r3, [sp, #23]
    7608:	f100 0337 	add.w	r3, r0, #55	; 0x37
    760c:	3030      	adds	r0, #48	; 0x30
    760e:	2d09      	cmp	r5, #9
    7610:	bf88      	it	hi
    7612:	4618      	movhi	r0, r3
    7614:	fa5f f38c 	uxtb.w	r3, ip
        int d = (n >> sh) & 0xf;
    7618:	f3c2 5e03 	ubfx	lr, r2, #20, #4
            buf[i++] = d > 9 ? 'A' + d - 10 : '0' + d;
    761c:	f88d 0018 	strb.w	r0, [sp, #24]
    7620:	f103 0037 	add.w	r0, r3, #55	; 0x37
    7624:	3330      	adds	r3, #48	; 0x30
    7626:	f1bc 0f09 	cmp.w	ip, #9
    762a:	bfcc      	ite	gt
    762c:	4684      	movgt	ip, r0
    762e:	469c      	movle	ip, r3
    7630:	fa5f f38e 	uxtb.w	r3, lr
        int d = (n >> sh) & 0xf;
    7634:	f3c2 4703 	ubfx	r7, r2, #16, #4
            buf[i++] = d > 9 ? 'A' + d - 10 : '0' + d;
    7638:	f88d c019 	strb.w	ip, [sp, #25]
    763c:	f103 0c37 	add.w	ip, r3, #55	; 0x37
    7640:	3330      	adds	r3, #48	; 0x30
    7642:	f1be 0f09 	cmp.w	lr, #9
    7646:	bfd8      	it	le
    7648:	469c      	movle	ip, r3
    764a:	b2fb      	uxtb	r3, r7
        int d = (n >> sh) & 0xf;
    764c:	f3c2 3603 	ubfx	r6, r2, #12, #4
            buf[i++] = d > 9 ? 'A' + d - 10 : '0' + d;
    7650:	f88d c01a 	strb.w	ip, [sp, #26]
    7654:	f103 0c37 	add.w	ip, r3, #55	; 0x37
    7658:	3330      	adds	r3, #48	; 0x30
    765a:	2f09      	cmp	r7, #9
    765c:	bfd8      	it	le
    765e:	469c      	movle	ip, r3
    7660:	b2f3      	uxtb	r3, r6
        int d = (n >> sh) & 0xf;
    7662:	f3c2 2503 	ubfx	r5, r2, #8, #4
            buf[i++] = d > 9 ? 'A' + d - 10 : '0' + d;
    7666:	f88d c01b 	strb.w	ip, [sp, #27]
    766a:	f103 0c37 	add.w	ip, r3, #55	; 0x37
    766e:	3330      	adds	r3, #48	; 0x30
    7670:	2e09      	cmp	r6, #9
    7672:	bfd8      	it	le
    7674:	469c      	movle	ip, r3
    7676:	b2eb      	uxtb	r3, r5
        int d = (n >> sh) & 0xf;
    7678:	f3c2 1003 	ubfx	r0, r2, #4, #4
        serial_number_idx += writeNum(&(serial_number[serial_number_idx]),
    767c:	9902      	ldr	r1, [sp, #8]
            buf[i++] = d > 9 ? 'A' + d - 10 : '0' + d;
    767e:	f88d c01c 	strb.w	ip, [sp, #28]
    7682:	f103 0c37 	add.w	ip, r3, #55	; 0x37
    7686:	3330      	adds	r3, #48	; 0x30
    7688:	2d09      	cmp	r5, #9
    768a:	bfcc      	ite	gt
    768c:	4665      	movgt	r5, ip
    768e:	461d      	movle	r5, r3
    7690:	b2c3      	uxtb	r3, r0
        serial_number_idx += writeNum(&(serial_number[serial_number_idx]),
    7692:	6809      	ldr	r1, [r1, #0]
            buf[i++] = d > 9 ? 'A' + d - 10 : '0' + d;
    7694:	f88d 501d 	strb.w	r5, [sp, #29]
        int d = (n >> sh) & 0xf;
    7698:	f002 020f 	and.w	r2, r2, #15
            buf[i++] = d > 9 ? 'A' + d - 10 : '0' + d;
    769c:	f103 0537 	add.w	r5, r3, #55	; 0x37
    76a0:	3330      	adds	r3, #48	; 0x30
    76a2:	2809      	cmp	r0, #9
    76a4:	bfcc      	ite	gt
    76a6:	4628      	movgt	r0, r5
    76a8:	4618      	movle	r0, r3
    76aa:	b2d3      	uxtb	r3, r2
        int d = (n >> sh) & 0xf;
    76ac:	ea4f 7e11 	mov.w	lr, r1, lsr #28
            buf[i++] = d > 9 ? 'A' + d - 10 : '0' + d;
    76b0:	f88d 001e 	strb.w	r0, [sp, #30]
    76b4:	f103 0037 	add.w	r0, r3, #55	; 0x37
    76b8:	3330      	adds	r3, #48	; 0x30
        int d = (n >> sh) & 0xf;
    76ba:	f3c1 6703 	ubfx	r7, r1, #24, #4
            buf[i++] = d > 9 ? 'A' + d - 10 : '0' + d;
    76be:	2a09      	cmp	r2, #9
    76c0:	bfcc      	ite	gt
    76c2:	4602      	movgt	r2, r0
    76c4:	461a      	movle	r2, r3
    76c6:	fa5f f58e 	uxtb.w	r5, lr
    76ca:	b2f8      	uxtb	r0, r7
    76cc:	f88d 201f 	strb.w	r2, [sp, #31]
    76d0:	f105 0237 	add.w	r2, r5, #55	; 0x37
    76d4:	3530      	adds	r5, #48	; 0x30
        int d = (n >> sh) & 0xf;
    76d6:	f3c1 5603 	ubfx	r6, r1, #20, #4
            buf[i++] = d > 9 ? 'A' + d - 10 : '0' + d;
    76da:	f1be 0f09 	cmp.w	lr, #9
    76de:	bf88      	it	hi
    76e0:	4615      	movhi	r5, r2
    76e2:	f100 0237 	add.w	r2, r0, #55	; 0x37
    76e6:	3030      	adds	r0, #48	; 0x30
    76e8:	2f09      	cmp	r7, #9
    76ea:	bfc8      	it	gt
    76ec:	4610      	movgt	r0, r2
    76ee:	b2f3      	uxtb	r3, r6
    76f0:	f103 0237 	add.w	r2, r3, #55	; 0x37
    76f4:	f88d 0021 	strb.w	r0, [sp, #33]	; 0x21
    76f8:	3330      	adds	r3, #48	; 0x30
        int d = (n >> sh) & 0xf;
    76fa:	f3c1 4003 	ubfx	r0, r1, #16, #4
            buf[i++] = d > 9 ? 'A' + d - 10 : '0' + d;
    76fe:	2e09      	cmp	r6, #9
    7700:	bfc8      	it	gt
    7702:	4613      	movgt	r3, r2
    7704:	b2c2      	uxtb	r2, r0
        int d = (n >> sh) & 0xf;
    7706:	f3c1 3e03 	ubfx	lr, r1, #12, #4
            buf[i++] = d > 9 ? 'A' + d - 10 : '0' + d;
    770a:	f102 0837 	add.w	r8, r2, #55	; 0x37
    770e:	3230      	adds	r2, #48	; 0x30
    7710:	2809      	cmp	r0, #9
    7712:	bfd8      	it	le
    7714:	4690      	movle	r8, r2
    7716:	fa5f f28e 	uxtb.w	r2, lr
        int d = (n >> sh) & 0xf;
    771a:	f3c1 2703 	ubfx	r7, r1, #8, #4
            buf[i++] = d > 9 ? 'A' + d - 10 : '0' + d;
    771e:	f88d 3022 	strb.w	r3, [sp, #34]	; 0x22
    7722:	4620      	mov	r0, r4
        serial_number_idx += writeNum(&(serial_number[serial_number_idx]),
    7724:	9b03      	ldr	r3, [sp, #12]
            buf[i++] = d > 9 ? 'A' + d - 10 : '0' + d;
    7726:	f88d 5020 	strb.w	r5, [sp, #32]
    772a:	f102 0437 	add.w	r4, r2, #55	; 0x37
    772e:	3230      	adds	r2, #48	; 0x30
    7730:	f1be 0f09 	cmp.w	lr, #9
    7734:	bfd8      	it	le
    7736:	4614      	movle	r4, r2
    7738:	b2fa      	uxtb	r2, r7
        serial_number_idx += writeNum(&(serial_number[serial_number_idx]),
    773a:	681b      	ldr	r3, [r3, #0]
            buf[i++] = d > 9 ? 'A' + d - 10 : '0' + d;
    773c:	f88d 4024 	strb.w	r4, [sp, #36]	; 0x24
        int d = (n >> sh) & 0xf;
    7740:	f3c1 1603 	ubfx	r6, r1, #4, #4
            buf[i++] = d > 9 ? 'A' + d - 10 : '0' + d;
    7744:	f102 0437 	add.w	r4, r2, #55	; 0x37
    7748:	3230      	adds	r2, #48	; 0x30
    774a:	2f09      	cmp	r7, #9
    774c:	bfcc      	ite	gt
    774e:	4627      	movgt	r7, r4
    7750:	4617      	movle	r7, r2
    7752:	b2f2      	uxtb	r2, r6
        int d = (n >> sh) & 0xf;
    7754:	f001 010f 	and.w	r1, r1, #15
            buf[i++] = d > 9 ? 'A' + d - 10 : '0' + d;
    7758:	f88d 7025 	strb.w	r7, [sp, #37]	; 0x25
    775c:	f102 0737 	add.w	r7, r2, #55	; 0x37
    7760:	3230      	adds	r2, #48	; 0x30
    7762:	2e09      	cmp	r6, #9
    7764:	bfcc      	ite	gt
    7766:	463e      	movgt	r6, r7
    7768:	4616      	movle	r6, r2
    776a:	b2ca      	uxtb	r2, r1
        int d = (n >> sh) & 0xf;
    776c:	0f1d      	lsrs	r5, r3, #28
            buf[i++] = d > 9 ? 'A' + d - 10 : '0' + d;
    776e:	f88d 6026 	strb.w	r6, [sp, #38]	; 0x26
    7772:	f102 0637 	add.w	r6, r2, #55	; 0x37
    7776:	3230      	adds	r2, #48	; 0x30
    7778:	2909      	cmp	r1, #9
    777a:	bfcc      	ite	gt
    777c:	4631      	movgt	r1, r6
    777e:	4611      	movle	r1, r2
    7780:	b2ea      	uxtb	r2, r5
        int d = (n >> sh) & 0xf;
    7782:	f3c3 6c03 	ubfx	ip, r3, #24, #4
            buf[i++] = d > 9 ? 'A' + d - 10 : '0' + d;
    7786:	f88d 1027 	strb.w	r1, [sp, #39]	; 0x27
    778a:	f102 0130 	add.w	r1, r2, #48	; 0x30
    778e:	3237      	adds	r2, #55	; 0x37
    7790:	2d09      	cmp	r5, #9
    7792:	bf88      	it	hi
    7794:	4611      	movhi	r1, r2
    7796:	fa5f f28c 	uxtb.w	r2, ip
        int d = (n >> sh) & 0xf;
    779a:	f3c3 5e03 	ubfx	lr, r3, #20, #4
            buf[i++] = d > 9 ? 'A' + d - 10 : '0' + d;
    779e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
    77a2:	f102 0130 	add.w	r1, r2, #48	; 0x30
    77a6:	3237      	adds	r2, #55	; 0x37
    77a8:	f1bc 0f09 	cmp.w	ip, #9
    77ac:	bfd4      	ite	le
    77ae:	468c      	movle	ip, r1
    77b0:	4694      	movgt	ip, r2
    77b2:	fa5f f28e 	uxtb.w	r2, lr
        int d = (n >> sh) & 0xf;
    77b6:	f3c3 4403 	ubfx	r4, r3, #16, #4
            buf[i++] = d > 9 ? 'A' + d - 10 : '0' + d;
    77ba:	f102 0137 	add.w	r1, r2, #55	; 0x37
    77be:	3230      	adds	r2, #48	; 0x30
    77c0:	f1be 0f09 	cmp.w	lr, #9
    77c4:	bfcc      	ite	gt
    77c6:	468e      	movgt	lr, r1
    77c8:	4696      	movle	lr, r2
    77ca:	b2e1      	uxtb	r1, r4
        int d = (n >> sh) & 0xf;
    77cc:	f3c3 3703 	ubfx	r7, r3, #12, #4
            buf[i++] = d > 9 ? 'A' + d - 10 : '0' + d;
    77d0:	f88d e02a 	strb.w	lr, [sp, #42]	; 0x2a
    77d4:	f101 0e37 	add.w	lr, r1, #55	; 0x37
    77d8:	3130      	adds	r1, #48	; 0x30
    77da:	2c09      	cmp	r4, #9
    77dc:	bfd8      	it	le
    77de:	468e      	movle	lr, r1
    77e0:	b2fa      	uxtb	r2, r7
        int d = (n >> sh) & 0xf;
    77e2:	f3c3 2603 	ubfx	r6, r3, #8, #4
            buf[i++] = d > 9 ? 'A' + d - 10 : '0' + d;
    77e6:	f88d e02b 	strb.w	lr, [sp, #43]	; 0x2b
    77ea:	f102 0e30 	add.w	lr, r2, #48	; 0x30
    77ee:	3237      	adds	r2, #55	; 0x37
    77f0:	e008      	b.n	7804 <_ZN9ClearCore10UsbManager10InitializeEv+0x334>
    77f2:	bf00      	nop
    77f4:	40001c00 	.word	0x40001c00
    77f8:	40000800 	.word	0x40000800
    77fc:	200000e7 	.word	0x200000e7
    7800:	00022988 	.word	0x00022988
    7804:	2f09      	cmp	r7, #9
    7806:	bfd4      	ite	le
    7808:	4677      	movle	r7, lr
    780a:	4617      	movgt	r7, r2
        int d = (n >> sh) & 0xf;
    780c:	f3c3 1503 	ubfx	r5, r3, #4, #4
            buf[i++] = d > 9 ? 'A' + d - 10 : '0' + d;
    7810:	b2f4      	uxtb	r4, r6
        int d = (n >> sh) & 0xf;
    7812:	f003 030f 	and.w	r3, r3, #15
            buf[i++] = d > 9 ? 'A' + d - 10 : '0' + d;
    7816:	b2da      	uxtb	r2, r3
    7818:	b2e9      	uxtb	r1, r5
    781a:	f88d 702c 	strb.w	r7, [sp, #44]	; 0x2c
    781e:	f104 0730 	add.w	r7, r4, #48	; 0x30
    7822:	3437      	adds	r4, #55	; 0x37
    7824:	2e09      	cmp	r6, #9
    7826:	bfd8      	it	le
    7828:	463c      	movle	r4, r7
    782a:	f101 0e30 	add.w	lr, r1, #48	; 0x30
    782e:	f102 0730 	add.w	r7, r2, #48	; 0x30
    7832:	3137      	adds	r1, #55	; 0x37
    7834:	3237      	adds	r2, #55	; 0x37
    7836:	2d09      	cmp	r5, #9
    7838:	bfd8      	it	le
    783a:	4671      	movle	r1, lr
    783c:	2b09      	cmp	r3, #9
    783e:	bfd4      	ite	le
    7840:	463b      	movle	r3, r7
    7842:	4613      	movgt	r3, r2
    7844:	f88d 102e 	strb.w	r1, [sp, #46]	; 0x2e
    7848:	f88d 302f 	strb.w	r3, [sp, #47]	; 0x2f
    784c:	f88d 8023 	strb.w	r8, [sp, #35]	; 0x23
    7850:	f88d c029 	strb.w	ip, [sp, #41]	; 0x29
    7854:	f88d 402d 	strb.w	r4, [sp, #45]	; 0x2d
    7858:	f10d 030f 	add.w	r3, sp, #15
    785c:	f10d 012f 	add.w	r1, sp, #47	; 0x2f
        *serNumDescPtr++ = serial_number[i];
    7860:	f813 2f01 	ldrb.w	r2, [r3, #1]!
    7864:	f820 2f02 	strh.w	r2, [r0, #2]!
    for (int i = 0; i < SERIAL_NUMBER_LENGTH; i++) {
    7868:	428b      	cmp	r3, r1
    786a:	d1f9      	bne.n	7860 <_ZN9ClearCore10UsbManager10InitializeEv+0x390>
	((Port *)hw)->Group[submodule_index].DIRTGL.reg = PORT_DIR_DIR(mask);
}

static inline void hri_port_set_DIR_reg(const void *const hw, uint8_t submodule_index, hri_port_dir_reg_t mask)
{
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
    786c:	4b2a      	ldr	r3, [pc, #168]	; (7918 <_ZN9ClearCore10UsbManager10InitializeEv+0x448>)
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    786e:	4a2b      	ldr	r2, [pc, #172]	; (791c <_ZN9ClearCore10UsbManager10InitializeEv+0x44c>)

static inline void hri_port_write_WRCONFIG_reg(const void *const hw, uint8_t submodule_index,
                                               hri_port_wrconfig_reg_t data)
{
	PORT_CRITICAL_SECTION_ENTER();
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
    7870:	4f2b      	ldr	r7, [pc, #172]	; (7920 <_ZN9ClearCore10UsbManager10InitializeEv+0x450>)
    7872:	4d2c      	ldr	r5, [pc, #176]	; (7924 <_ZN9ClearCore10UsbManager10InitializeEv+0x454>)
    usbdc_init(ctrl_buffer);
    7874:	482c      	ldr	r0, [pc, #176]	; (7928 <_ZN9ClearCore10UsbManager10InitializeEv+0x458>)
    7876:	2180      	movs	r1, #128	; 0x80
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
    7878:	f04f 7680 	mov.w	r6, #16777216	; 0x1000000
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
    787c:	f04f 4480 	mov.w	r4, #1073741824	; 0x40000000
    7880:	f882 1350 	strb.w	r1, [r2, #848]	; 0x350
    7884:	f882 1351 	strb.w	r1, [r2, #849]	; 0x351
    7888:	f882 1352 	strb.w	r1, [r2, #850]	; 0x352
    788c:	f882 1353 	strb.w	r1, [r2, #851]	; 0x353
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
    7890:	609e      	str	r6, [r3, #8]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
    7892:	629c      	str	r4, [r3, #40]	; 0x28
    7894:	629f      	str	r7, [r3, #40]	; 0x28
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
    7896:	615e      	str	r6, [r3, #20]
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg &= ~PORT_PINCFG_PULLEN;
    7898:	f893 2058 	ldrb.w	r2, [r3, #88]	; 0x58
    789c:	f002 02fb 	and.w	r2, r2, #251	; 0xfb
    78a0:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
    78a4:	f893 2058 	ldrb.w	r2, [r3, #88]	; 0x58
	tmp &= ~PORT_PINCFG_PMUXEN;
    78a8:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
    78ac:	f042 0201 	orr.w	r2, r2, #1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
    78b0:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
    78b4:	f893 203c 	ldrb.w	r2, [r3, #60]	; 0x3c
	tmp &= ~PORT_PMUX_PMUXE_Msk;
    78b8:	f002 02f0 	and.w	r2, r2, #240	; 0xf0
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
    78bc:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
	tmp |= PORT_PMUX_PMUXE(data);
    78c0:	f042 0207 	orr.w	r2, r2, #7
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
    78c4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
    78c8:	6099      	str	r1, [r3, #8]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
    78ca:	629c      	str	r4, [r3, #40]	; 0x28
    78cc:	629d      	str	r5, [r3, #40]	; 0x28
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
    78ce:	6159      	str	r1, [r3, #20]
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg &= ~PORT_PINCFG_PULLEN;
    78d0:	f893 2059 	ldrb.w	r2, [r3, #89]	; 0x59
    78d4:	f002 02fb 	and.w	r2, r2, #251	; 0xfb
    78d8:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
    78dc:	f893 2059 	ldrb.w	r2, [r3, #89]	; 0x59
	tmp &= ~PORT_PINCFG_PMUXEN;
    78e0:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
    78e4:	f042 0201 	orr.w	r2, r2, #1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
    78e8:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
    78ec:	f893 203c 	ldrb.w	r2, [r3, #60]	; 0x3c
	tmp &= ~PORT_PMUX_PMUXO_Msk;
    78f0:	f002 020f 	and.w	r2, r2, #15
	tmp |= PORT_PMUX_PMUXO(data);
    78f4:	f042 0270 	orr.w	r2, r2, #112	; 0x70
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
    78f8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    78fc:	f005 feae 	bl	d65c <usbdc_init>
    cdcdf_acm_init();
    7900:	f005 fb66 	bl	cfd0 <cdcdf_acm_init>
    usbdc_start(single_desc);
    7904:	4809      	ldr	r0, [pc, #36]	; (792c <_ZN9ClearCore10UsbManager10InitializeEv+0x45c>)
    7906:	f005 fed7 	bl	d6b8 <usbdc_start>
    usbdc_attach();
    790a:	f005 feed 	bl	d6e8 <usbdc_attach>
}
    790e:	2001      	movs	r0, #1
    7910:	b00c      	add	sp, #48	; 0x30
    7912:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    7916:	bf00      	nop
    7918:	41008000 	.word	0x41008000
    791c:	e000e100 	.word	0xe000e100
    7920:	c0000100 	.word	0xc0000100
    7924:	c0000200 	.word	0xc0000200
    7928:	20000c08 	.word	0x20000c08
    792c:	20000008 	.word	0x20000008

00007930 <_ZN9ClearCore10UsbManager5SpeedEm>:
}
    7930:	2001      	movs	r0, #1
    7932:	4770      	bx	lr

00007934 <_ZN9ClearCore10UsbManager5SpeedEv>:
uint32_t UsbManager::Speed() {
    7934:	b508      	push	{r3, lr}
    return cdcdf_acm_get_line_coding()->dwDTERate;
    7936:	f005 fbcb 	bl	d0d0 <cdcdf_acm_get_line_coding>
}
    793a:	6800      	ldr	r0, [r0, #0]
    793c:	bd08      	pop	{r3, pc}
    793e:	bf00      	nop

00007940 <_ZN9ClearCore10UsbManager8PortOpenEv>:
void UsbManager::PortOpen() {
    7940:	b538      	push	{r3, r4, r5, lr}
    if (m_portOpen) {
    7942:	f890 311c 	ldrb.w	r3, [r0, #284]	; 0x11c
    7946:	b103      	cbz	r3, 794a <_ZN9ClearCore10UsbManager8PortOpenEv+0xa>
    7948:	bd38      	pop	{r3, r4, r5, pc}
    794a:	4604      	mov	r4, r0
    m_portOpen = true;
    794c:	2501      	movs	r5, #1
    cdcdf_acm_register_callback(CDCDF_ACM_CB_READ, (FUNC_PTR)RxComplete);
    794e:	4618      	mov	r0, r3
    m_portOpen = true;
    7950:	f884 511c 	strb.w	r5, [r4, #284]	; 0x11c
    cdcdf_acm_register_callback(CDCDF_ACM_CB_READ, (FUNC_PTR)RxComplete);
    7954:	4906      	ldr	r1, [pc, #24]	; (7970 <_ZN9ClearCore10UsbManager8PortOpenEv+0x30>)
    7956:	f005 fb8d 	bl	d074 <cdcdf_acm_register_callback>
    cdcdf_acm_register_callback(CDCDF_ACM_CB_WRITE, (FUNC_PTR)TxComplete);
    795a:	4628      	mov	r0, r5
    795c:	4905      	ldr	r1, [pc, #20]	; (7974 <_ZN9ClearCore10UsbManager8PortOpenEv+0x34>)
    795e:	f005 fb89 	bl	d074 <cdcdf_acm_register_callback>
    cdcdf_acm_read(m_usbReadBuf, sizeof(m_usbReadBuf));
    7962:	f104 0080 	add.w	r0, r4, #128	; 0x80
    7966:	2140      	movs	r1, #64	; 0x40
}
    7968:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    cdcdf_acm_read(m_usbReadBuf, sizeof(m_usbReadBuf));
    796c:	f005 bb4e 	b.w	d00c <cdcdf_acm_read>
    7970:	00006e61 	.word	0x00006e61
    7974:	00007099 	.word	0x00007099

00007978 <_ZN9ClearCore10UsbManager10FlushInputEv>:
void UsbManager::FlushInput() {
    7978:	4603      	mov	r3, r0
    m_inHead = 0;
    797a:	2200      	movs	r2, #0
    797c:	f8c0 2100 	str.w	r2, [r0, #256]	; 0x100
    m_readBufAvail = 0;
    7980:	f8c0 2118 	str.w	r2, [r0, #280]	; 0x118
    m_inTail = 0;
    7984:	f8c0 2104 	str.w	r2, [r0, #260]	; 0x104
    cdcdf_acm_read(m_usbReadBuf, sizeof(m_usbReadBuf));
    7988:	2140      	movs	r1, #64	; 0x40
    798a:	3080      	adds	r0, #128	; 0x80
    m_readActive = false;
    798c:	f883 2111 	strb.w	r2, [r3, #273]	; 0x111
    cdcdf_acm_read(m_usbReadBuf, sizeof(m_usbReadBuf));
    7990:	f005 bb3c 	b.w	d00c <cdcdf_acm_read>

00007994 <_ZN9ClearCore10UsbManager18WaitForWriteFinishEv>:
void UsbManager::WaitForWriteFinish() {
    7994:	b538      	push	{r3, r4, r5, lr}
    7996:	4604      	mov	r4, r0
           USB->DEVICE.FSMSTATUS.bit.FSMSTATE == USB_FSMSTATUS_FSMSTATE_ON;
    7998:	f04f 4582 	mov.w	r5, #1090519040	; 0x41000000
    while (m_outHead != m_outTail && Connected()) {
    799c:	f8d4 2108 	ldr.w	r2, [r4, #264]	; 0x108
    79a0:	f8d4 310c 	ldr.w	r3, [r4, #268]	; 0x10c
    79a4:	429a      	cmp	r2, r3
    79a6:	d100      	bne.n	79aa <_ZN9ClearCore10UsbManager18WaitForWriteFinishEv+0x16>
    79a8:	bd38      	pop	{r3, r4, r5, pc}
    return cdcdf_acm_is_enabled() && LineState().rs232.DTR &&
    79aa:	f005 fb8b 	bl	d0c4 <cdcdf_acm_is_enabled>
    79ae:	2800      	cmp	r0, #0
    79b0:	d0fa      	beq.n	79a8 <_ZN9ClearCore10UsbManager18WaitForWriteFinishEv+0x14>
    79b2:	f894 3112 	ldrb.w	r3, [r4, #274]	; 0x112
    79b6:	07db      	lsls	r3, r3, #31
    79b8:	d5f6      	bpl.n	79a8 <_ZN9ClearCore10UsbManager18WaitForWriteFinishEv+0x14>
           USB->DEVICE.FSMSTATUS.bit.FSMSTATE == USB_FSMSTATUS_FSMSTATE_ON;
    79ba:	7b6b      	ldrb	r3, [r5, #13]
    79bc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
    return cdcdf_acm_is_enabled() && LineState().rs232.DTR &&
    79c0:	2b02      	cmp	r3, #2
    79c2:	d0eb      	beq.n	799c <_ZN9ClearCore10UsbManager18WaitForWriteFinishEv+0x8>
    79c4:	bd38      	pop	{r3, r4, r5, pc}
    79c6:	bf00      	nop

000079c8 <_ZN9ClearCore10UsbManagercvbEv>:
UsbManager::operator bool() {
    79c8:	b538      	push	{r3, r4, r5, lr}
    79ca:	4605      	mov	r5, r0
    return cdcdf_acm_is_enabled() && LineState().rs232.DTR &&
    79cc:	f005 fb7a 	bl	d0c4 <cdcdf_acm_is_enabled>
    79d0:	4604      	mov	r4, r0
    79d2:	b170      	cbz	r0, 79f2 <_ZN9ClearCore10UsbManagercvbEv+0x2a>
    79d4:	f895 4112 	ldrb.w	r4, [r5, #274]	; 0x112
    79d8:	f014 0401 	ands.w	r4, r4, #1
    79dc:	d009      	beq.n	79f2 <_ZN9ClearCore10UsbManagercvbEv+0x2a>
           USB->DEVICE.FSMSTATUS.bit.FSMSTATE == USB_FSMSTATUS_FSMSTATE_ON;
    79de:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
    79e2:	7b5c      	ldrb	r4, [r3, #13]
    79e4:	f004 047f 	and.w	r4, r4, #127	; 0x7f
    return cdcdf_acm_is_enabled() && LineState().rs232.DTR &&
    79e8:	f1a4 0402 	sub.w	r4, r4, #2
    79ec:	fab4 f484 	clz	r4, r4
    79f0:	0964      	lsrs	r4, r4, #5
    \brief Blocks operations for ms milliseconds

    \param[in] ms Time in milliseconds to delay
**/
inline void Delay_ms(uint32_t ms)  {
    return Delay_cycles(static_cast<uint64_t>(ms) * CYCLES_PER_MILLISECOND);
    79f2:	4803      	ldr	r0, [pc, #12]	; (7a00 <_ZN9ClearCore10UsbManagercvbEv+0x38>)
    79f4:	2100      	movs	r1, #0
    79f6:	f003 f847 	bl	aa88 <Delay_cycles>
}
    79fa:	4620      	mov	r0, r4
    79fc:	bd38      	pop	{r3, r4, r5, pc}
    79fe:	bf00      	nop
    7a00:	00124f80 	.word	0x00124f80

00007a04 <_ZN9ClearCore10UsbManager7CharGetEv>:
    uint32_t head = m_inHead;
    7a04:	f8d0 3100 	ldr.w	r3, [r0, #256]	; 0x100
    if (m_inTail == head) {
    7a08:	f8d0 2104 	ldr.w	r2, [r0, #260]	; 0x104
    7a0c:	4293      	cmp	r3, r2
    7a0e:	f000 8116 	beq.w	7c3e <_ZN9ClearCore10UsbManager7CharGetEv+0x23a>
int16_t UsbManager::CharGet() {
    7a12:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    m_inHead = (head + 1) & (sizeof(m_bufferIn) - 1);
    7a16:	1c5a      	adds	r2, r3, #1
    7a18:	f002 023f 	and.w	r2, r2, #63	; 0x3f
    uint8_t retVal = m_bufferIn[head];
    7a1c:	5cc4      	ldrb	r4, [r0, r3]
    m_inHead = (head + 1) & (sizeof(m_bufferIn) - 1);
    7a1e:	f8c0 2100 	str.w	r2, [r0, #256]	; 0x100
int16_t UsbManager::CharGet() {
    7a22:	b083      	sub	sp, #12
  __ASM volatile ("cpsid i" : : : "memory");
    7a24:	b672      	cpsid	i
    int32_t difference = m_inTail - m_inHead;
    7a26:	f8d0 3104 	ldr.w	r3, [r0, #260]	; 0x104
    7a2a:	f8d0 2100 	ldr.w	r2, [r0, #256]	; 0x100
    if (m_readBufAvail && space) {
    7a2e:	f8d0 5118 	ldr.w	r5, [r0, #280]	; 0x118
    if (difference < 0) {
    7a32:	1a9b      	subs	r3, r3, r2
        return sizeof(m_bufferIn) + difference;
    7a34:	bf48      	it	mi
    7a36:	3340      	addmi	r3, #64	; 0x40
    if (m_readBufAvail && space) {
    7a38:	2d00      	cmp	r5, #0
    7a3a:	f000 80e3 	beq.w	7c04 <_ZN9ClearCore10UsbManager7CharGetEv+0x200>
    7a3e:	f1d3 033f 	rsbs	r3, r3, #63	; 0x3f
    7a42:	f000 80df 	beq.w	7c04 <_ZN9ClearCore10UsbManager7CharGetEv+0x200>
        uint32_t tail = m_inTail;
    7a46:	f8d0 6104 	ldr.w	r6, [r0, #260]	; 0x104
        uint8_t *inPtr = m_readBufPtr;
    7a4a:	f8d0 2114 	ldr.w	r2, [r0, #276]	; 0x114
    7a4e:	42ab      	cmp	r3, r5
    7a50:	bf28      	it	cs
    7a52:	462b      	movcs	r3, r5
        uint32_t countTilWrap = sizeof(m_bufferIn) - tail;
    7a54:	f1c6 0140 	rsb	r1, r6, #64	; 0x40
    7a58:	4299      	cmp	r1, r3
    7a5a:	bf28      	it	cs
    7a5c:	4619      	movcs	r1, r3
        uint8_t *outPtr = &m_bufferIn[tail];
    7a5e:	1987      	adds	r7, r0, r6
        for (uint32_t i = 0; i < countTilWrap; i++) {
    7a60:	2900      	cmp	r1, #0
    7a62:	f000 80f8 	beq.w	7c56 <_ZN9ClearCore10UsbManager7CharGetEv+0x252>
    7a66:	1d35      	adds	r5, r6, #4
    7a68:	4405      	add	r5, r0
    7a6a:	f102 0e04 	add.w	lr, r2, #4
    7a6e:	4577      	cmp	r7, lr
    7a70:	bf38      	it	cc
    7a72:	42aa      	cmpcc	r2, r5
    7a74:	f0c0 80da 	bcc.w	7c2c <_ZN9ClearCore10UsbManager7CharGetEv+0x228>
    7a78:	290b      	cmp	r1, #11
    7a7a:	f240 80d7 	bls.w	7c2c <_ZN9ClearCore10UsbManager7CharGetEv+0x228>
    7a7e:	4255      	negs	r5, r2
    7a80:	f015 0503 	ands.w	r5, r5, #3
    7a84:	f000 80c3 	beq.w	7c0e <_ZN9ClearCore10UsbManager7CharGetEv+0x20a>
            *outPtr++ = *inPtr++;
    7a88:	f892 e000 	ldrb.w	lr, [r2]
    7a8c:	f800 e006 	strb.w	lr, [r0, r6]
    7a90:	2d01      	cmp	r5, #1
    7a92:	f107 0801 	add.w	r8, r7, #1
    7a96:	f102 0901 	add.w	r9, r2, #1
    7a9a:	f000 80ba 	beq.w	7c12 <_ZN9ClearCore10UsbManager7CharGetEv+0x20e>
    7a9e:	f892 e001 	ldrb.w	lr, [r2, #1]
    7aa2:	f887 e001 	strb.w	lr, [r7, #1]
    7aa6:	2d02      	cmp	r5, #2
    7aa8:	f107 0802 	add.w	r8, r7, #2
    7aac:	f102 0902 	add.w	r9, r2, #2
    7ab0:	f000 80af 	beq.w	7c12 <_ZN9ClearCore10UsbManager7CharGetEv+0x20e>
    7ab4:	f892 e002 	ldrb.w	lr, [r2, #2]
    7ab8:	f887 e002 	strb.w	lr, [r7, #2]
    7abc:	f107 0803 	add.w	r8, r7, #3
        for (uint32_t i = 0; i < countTilWrap; i++) {
    7ac0:	2703      	movs	r7, #3
            *outPtr++ = *inPtr++;
    7ac2:	f102 0903 	add.w	r9, r2, #3
        for (uint32_t i = 0; i < countTilWrap; i++) {
    7ac6:	9700      	str	r7, [sp, #0]
    7ac8:	eba1 0b05 	sub.w	fp, r1, r5
    7acc:	f1ab 0704 	sub.w	r7, fp, #4
    7ad0:	08bf      	lsrs	r7, r7, #2
    7ad2:	eb06 0e05 	add.w	lr, r6, r5
    7ad6:	3701      	adds	r7, #1
    7ad8:	ea4f 0a87 	mov.w	sl, r7, lsl #2
    7adc:	4486      	add	lr, r0
    7ade:	4415      	add	r5, r2
    7ae0:	f04f 0c00 	mov.w	ip, #0
    7ae4:	9401      	str	r4, [sp, #4]
    7ae6:	f10c 0c01 	add.w	ip, ip, #1
            *outPtr++ = *inPtr++;
    7aea:	f855 4b04 	ldr.w	r4, [r5], #4
    7aee:	f84e 4b04 	str.w	r4, [lr], #4
    7af2:	4567      	cmp	r7, ip
    7af4:	d8f7      	bhi.n	7ae6 <_ZN9ClearCore10UsbManager7CharGetEv+0xe2>
    7af6:	9d00      	ldr	r5, [sp, #0]
    7af8:	9c01      	ldr	r4, [sp, #4]
    7afa:	45d3      	cmp	fp, sl
    7afc:	4455      	add	r5, sl
    7afe:	eb08 0e0a 	add.w	lr, r8, sl
    7b02:	eb09 0c0a 	add.w	ip, r9, sl
    7b06:	f000 808c 	beq.w	7c22 <_ZN9ClearCore10UsbManager7CharGetEv+0x21e>
    7b0a:	f819 9027 	ldrb.w	r9, [r9, r7, lsl #2]
    7b0e:	f808 9027 	strb.w	r9, [r8, r7, lsl #2]
        for (uint32_t i = 0; i < countTilWrap; i++) {
    7b12:	1c6f      	adds	r7, r5, #1
    7b14:	42b9      	cmp	r1, r7
    7b16:	f240 8084 	bls.w	7c22 <_ZN9ClearCore10UsbManager7CharGetEv+0x21e>
    7b1a:	3502      	adds	r5, #2
            *outPtr++ = *inPtr++;
    7b1c:	f89c 7001 	ldrb.w	r7, [ip, #1]
    7b20:	f88e 7001 	strb.w	r7, [lr, #1]
        for (uint32_t i = 0; i < countTilWrap; i++) {
    7b24:	42a9      	cmp	r1, r5
    7b26:	d97c      	bls.n	7c22 <_ZN9ClearCore10UsbManager7CharGetEv+0x21e>
            *outPtr++ = *inPtr++;
    7b28:	f89c 5002 	ldrb.w	r5, [ip, #2]
    7b2c:	f88e 5002 	strb.w	r5, [lr, #2]
    7b30:	1857      	adds	r7, r2, r1
    7b32:	f8d0 2114 	ldr.w	r2, [r0, #276]	; 0x114
    7b36:	f8d0 5118 	ldr.w	r5, [r0, #280]	; 0x118
        m_readBufPtr += countTilWrap;
    7b3a:	440a      	add	r2, r1
        m_readBufAvail -= countTilWrap;
    7b3c:	1a6d      	subs	r5, r5, r1
        if (count) {
    7b3e:	1a5b      	subs	r3, r3, r1
        m_readBufPtr += countTilWrap;
    7b40:	f8c0 2114 	str.w	r2, [r0, #276]	; 0x114
        m_readBufAvail -= countTilWrap;
    7b44:	f8c0 5118 	str.w	r5, [r0, #280]	; 0x118
        if (count) {
    7b48:	d065      	beq.n	7c16 <_ZN9ClearCore10UsbManager7CharGetEv+0x212>
    7b4a:	1d01      	adds	r1, r0, #4
    7b4c:	1d3a      	adds	r2, r7, #4
    7b4e:	4290      	cmp	r0, r2
    7b50:	bf38      	it	cc
    7b52:	428f      	cmpcc	r7, r1
            outPtr = m_bufferIn;
    7b54:	4605      	mov	r5, r0
    7b56:	d375      	bcc.n	7c44 <_ZN9ClearCore10UsbManager7CharGetEv+0x240>
    7b58:	2b0b      	cmp	r3, #11
    7b5a:	d973      	bls.n	7c44 <_ZN9ClearCore10UsbManager7CharGetEv+0x240>
    7b5c:	4242      	negs	r2, r0
    7b5e:	f012 0203 	ands.w	r2, r2, #3
    7b62:	d060      	beq.n	7c26 <_ZN9ClearCore10UsbManager7CharGetEv+0x222>
                *outPtr++ = *inPtr++;
    7b64:	7839      	ldrb	r1, [r7, #0]
    7b66:	7001      	strb	r1, [r0, #0]
    7b68:	2a01      	cmp	r2, #1
    7b6a:	f100 0501 	add.w	r5, r0, #1
    7b6e:	f107 0e01 	add.w	lr, r7, #1
    7b72:	d059      	beq.n	7c28 <_ZN9ClearCore10UsbManager7CharGetEv+0x224>
    7b74:	7879      	ldrb	r1, [r7, #1]
    7b76:	7041      	strb	r1, [r0, #1]
    7b78:	2a02      	cmp	r2, #2
    7b7a:	f100 0502 	add.w	r5, r0, #2
    7b7e:	f107 0e02 	add.w	lr, r7, #2
    7b82:	d051      	beq.n	7c28 <_ZN9ClearCore10UsbManager7CharGetEv+0x224>
    7b84:	78b9      	ldrb	r1, [r7, #2]
    7b86:	7081      	strb	r1, [r0, #2]
    7b88:	1cc5      	adds	r5, r0, #3
    7b8a:	f107 0e03 	add.w	lr, r7, #3
            for (uint32_t i = 0; i < count; i++) {
    7b8e:	f04f 0803 	mov.w	r8, #3
    7b92:	eba3 0c02 	sub.w	ip, r3, r2
    7b96:	f1ac 0104 	sub.w	r1, ip, #4
    7b9a:	0889      	lsrs	r1, r1, #2
    7b9c:	1c4e      	adds	r6, r1, #1
    7b9e:	4417      	add	r7, r2
    7ba0:	ea4f 0986 	mov.w	r9, r6, lsl #2
    7ba4:	4402      	add	r2, r0
    7ba6:	2100      	movs	r1, #0
    7ba8:	3101      	adds	r1, #1
                *outPtr++ = *inPtr++;
    7baa:	f857 ab04 	ldr.w	sl, [r7], #4
    7bae:	f842 ab04 	str.w	sl, [r2], #4
    7bb2:	428e      	cmp	r6, r1
    7bb4:	d8f8      	bhi.n	7ba8 <_ZN9ClearCore10UsbManager7CharGetEv+0x1a4>
    7bb6:	45cc      	cmp	ip, r9
    7bb8:	eb08 0209 	add.w	r2, r8, r9
    7bbc:	eb05 0109 	add.w	r1, r5, r9
    7bc0:	eb0e 0709 	add.w	r7, lr, r9
    7bc4:	d00d      	beq.n	7be2 <_ZN9ClearCore10UsbManager7CharGetEv+0x1de>
    7bc6:	f81e e026 	ldrb.w	lr, [lr, r6, lsl #2]
    7bca:	f805 e026 	strb.w	lr, [r5, r6, lsl #2]
            for (uint32_t i = 0; i < count; i++) {
    7bce:	1c55      	adds	r5, r2, #1
    7bd0:	42ab      	cmp	r3, r5
    7bd2:	d906      	bls.n	7be2 <_ZN9ClearCore10UsbManager7CharGetEv+0x1de>
    7bd4:	3202      	adds	r2, #2
                *outPtr++ = *inPtr++;
    7bd6:	787d      	ldrb	r5, [r7, #1]
    7bd8:	704d      	strb	r5, [r1, #1]
            for (uint32_t i = 0; i < count; i++) {
    7bda:	4293      	cmp	r3, r2
    7bdc:	d901      	bls.n	7be2 <_ZN9ClearCore10UsbManager7CharGetEv+0x1de>
                *outPtr++ = *inPtr++;
    7bde:	78ba      	ldrb	r2, [r7, #2]
    7be0:	708a      	strb	r2, [r1, #2]
            m_readBufPtr += count;
    7be2:	f8d0 2114 	ldr.w	r2, [r0, #276]	; 0x114
            m_readBufAvail -= count;
    7be6:	f8d0 5118 	ldr.w	r5, [r0, #280]	; 0x118
            m_inTail = count;
    7bea:	f8c0 3104 	str.w	r3, [r0, #260]	; 0x104
            m_readBufPtr += count;
    7bee:	441a      	add	r2, r3
            m_readBufAvail -= count;
    7bf0:	1aed      	subs	r5, r5, r3
            m_readBufPtr += count;
    7bf2:	f8c0 2114 	str.w	r2, [r0, #276]	; 0x114
            m_readBufAvail -= count;
    7bf6:	f8c0 5118 	str.w	r5, [r0, #280]	; 0x118
        if (!m_readBufAvail) {
    7bfa:	b91d      	cbnz	r5, 7c04 <_ZN9ClearCore10UsbManager7CharGetEv+0x200>
            cdcdf_acm_read(m_usbReadBuf, sizeof(m_usbReadBuf));
    7bfc:	3080      	adds	r0, #128	; 0x80
    7bfe:	2140      	movs	r1, #64	; 0x40
    7c00:	f005 fa04 	bl	d00c <cdcdf_acm_read>
  __ASM volatile ("cpsie i" : : : "memory");
    7c04:	b662      	cpsie	i
    return retVal;
    7c06:	b220      	sxth	r0, r4
}
    7c08:	b003      	add	sp, #12
    7c0a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        uint8_t *outPtr = &m_bufferIn[tail];
    7c0e:	46b8      	mov	r8, r7
        uint8_t *inPtr = m_readBufPtr;
    7c10:	4691      	mov	r9, r2
        for (uint32_t i = 0; i < countTilWrap; i++) {
    7c12:	9500      	str	r5, [sp, #0]
    7c14:	e758      	b.n	7ac8 <_ZN9ClearCore10UsbManager7CharGetEv+0xc4>
            m_inTail = (tail + countTilWrap) & (sizeof(m_bufferIn) - 1);
    7c16:	4431      	add	r1, r6
    7c18:	f001 013f 	and.w	r1, r1, #63	; 0x3f
    7c1c:	f8c0 1104 	str.w	r1, [r0, #260]	; 0x104
    7c20:	e7eb      	b.n	7bfa <_ZN9ClearCore10UsbManager7CharGetEv+0x1f6>
    7c22:	1857      	adds	r7, r2, r1
    7c24:	e785      	b.n	7b32 <_ZN9ClearCore10UsbManager7CharGetEv+0x12e>
            outPtr = m_bufferIn;
    7c26:	46be      	mov	lr, r7
            for (uint32_t i = 0; i < count; i++) {
    7c28:	4690      	mov	r8, r2
    7c2a:	e7b2      	b.n	7b92 <_ZN9ClearCore10UsbManager7CharGetEv+0x18e>
    7c2c:	1e7d      	subs	r5, r7, #1
    7c2e:	1857      	adds	r7, r2, r1
            *outPtr++ = *inPtr++;
    7c30:	f812 eb01 	ldrb.w	lr, [r2], #1
    7c34:	f805 ef01 	strb.w	lr, [r5, #1]!
        for (uint32_t i = 0; i < countTilWrap; i++) {
    7c38:	42ba      	cmp	r2, r7
    7c3a:	d1f9      	bne.n	7c30 <_ZN9ClearCore10UsbManager7CharGetEv+0x22c>
    7c3c:	e779      	b.n	7b32 <_ZN9ClearCore10UsbManager7CharGetEv+0x12e>
        return -1;
    7c3e:	f04f 30ff 	mov.w	r0, #4294967295
    7c42:	4770      	bx	lr
    7c44:	1e42      	subs	r2, r0, #1
    7c46:	18fd      	adds	r5, r7, r3
                *outPtr++ = *inPtr++;
    7c48:	f817 1b01 	ldrb.w	r1, [r7], #1
    7c4c:	f802 1f01 	strb.w	r1, [r2, #1]!
            for (uint32_t i = 0; i < count; i++) {
    7c50:	42bd      	cmp	r5, r7
    7c52:	d1f9      	bne.n	7c48 <_ZN9ClearCore10UsbManager7CharGetEv+0x244>
    7c54:	e7c5      	b.n	7be2 <_ZN9ClearCore10UsbManager7CharGetEv+0x1de>
        uint8_t *inPtr = m_readBufPtr;
    7c56:	4617      	mov	r7, r2
    7c58:	e76f      	b.n	7b3a <_ZN9ClearCore10UsbManager7CharGetEv+0x136>
    7c5a:	bf00      	nop

00007c5c <_ZN9ClearCore10UsbManager8CharPeekEv>:
    if (m_inTail == m_inHead) {
    7c5c:	f8d0 2104 	ldr.w	r2, [r0, #260]	; 0x104
    7c60:	f8d0 3100 	ldr.w	r3, [r0, #256]	; 0x100
    7c64:	429a      	cmp	r2, r3
    return m_bufferIn[m_inHead];
    7c66:	bf1a      	itte	ne
    7c68:	f8d0 3100 	ldrne.w	r3, [r0, #256]	; 0x100
    7c6c:	5cc0      	ldrbne	r0, [r0, r3]
        return -1;
    7c6e:	f04f 30ff 	moveq.w	r0, #4294967295
}
    7c72:	4770      	bx	lr

00007c74 <_ZN9ClearCore10UsbManager8SendCharEh>:
bool UsbManager::SendChar(uint8_t charToSend) {
    7c74:	b570      	push	{r4, r5, r6, lr}
    7c76:	4604      	mov	r4, r0
    7c78:	460e      	mov	r6, r1
           USB->DEVICE.FSMSTATUS.bit.FSMSTATE == USB_FSMSTATUS_FSMSTATE_ON;
    7c7a:	f04f 4582 	mov.w	r5, #1090519040	; 0x41000000
    return cdcdf_acm_is_enabled() && LineState().rs232.DTR &&
    7c7e:	f005 fa21 	bl	d0c4 <cdcdf_acm_is_enabled>
    7c82:	b350      	cbz	r0, 7cda <_ZN9ClearCore10UsbManager8SendCharEh+0x66>
    7c84:	f894 0112 	ldrb.w	r0, [r4, #274]	; 0x112
    7c88:	f010 0001 	ands.w	r0, r0, #1
    7c8c:	d025      	beq.n	7cda <_ZN9ClearCore10UsbManager8SendCharEh+0x66>
           USB->DEVICE.FSMSTATUS.bit.FSMSTATE == USB_FSMSTATUS_FSMSTATE_ON;
    7c8e:	7b6b      	ldrb	r3, [r5, #13]
    7c90:	f003 037f 	and.w	r3, r3, #127	; 0x7f
    return cdcdf_acm_is_enabled() && LineState().rs232.DTR &&
    7c94:	2b02      	cmp	r3, #2
    7c96:	d001      	beq.n	7c9c <_ZN9ClearCore10UsbManager8SendCharEh+0x28>
    return false;
    7c98:	2000      	movs	r0, #0
    7c9a:	bd70      	pop	{r4, r5, r6, pc}
    while (Connected() && m_portOpen) {
    7c9c:	f894 011c 	ldrb.w	r0, [r4, #284]	; 0x11c
    7ca0:	b900      	cbnz	r0, 7ca4 <_ZN9ClearCore10UsbManager8SendCharEh+0x30>
    7ca2:	bd70      	pop	{r4, r5, r6, pc}
    int32_t difference = m_outHead - m_outTail - 1;
    7ca4:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
    7ca8:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
    7cac:	1a9b      	subs	r3, r3, r2
    if (difference < 0) {
    7cae:	1e5a      	subs	r2, r3, #1
    7cb0:	d40e      	bmi.n	7cd0 <_ZN9ClearCore10UsbManager8SendCharEh+0x5c>
        if (AvailableForWrite()) {
    7cb2:	2a00      	cmp	r2, #0
    7cb4:	d0e3      	beq.n	7c7e <_ZN9ClearCore10UsbManager8SendCharEh+0xa>
            m_bufferOut[m_outTail] = charToSend;
    7cb6:	f8d4 310c 	ldr.w	r3, [r4, #268]	; 0x10c
    7cba:	4423      	add	r3, r4
    7cbc:	f883 6040 	strb.w	r6, [r3, #64]	; 0x40
            m_outTail = (m_outTail + 1) & (sizeof(m_bufferOut) - 1);
    7cc0:	f8d4 310c 	ldr.w	r3, [r4, #268]	; 0x10c
    7cc4:	3301      	adds	r3, #1
    7cc6:	f003 033f 	and.w	r3, r3, #63	; 0x3f
    7cca:	f8c4 310c 	str.w	r3, [r4, #268]	; 0x10c
            return true;
    7cce:	bd70      	pop	{r4, r5, r6, pc}
        difference += sizeof(m_bufferOut);
    7cd0:	f103 023f 	add.w	r2, r3, #63	; 0x3f
        if (AvailableForWrite()) {
    7cd4:	2a00      	cmp	r2, #0
    7cd6:	d0d2      	beq.n	7c7e <_ZN9ClearCore10UsbManager8SendCharEh+0xa>
    7cd8:	e7ed      	b.n	7cb6 <_ZN9ClearCore10UsbManager8SendCharEh+0x42>
}
    7cda:	bd70      	pop	{r4, r5, r6, pc}

00007cdc <_ZN9ClearCore10UsbManager16AvailableForReadEv>:
    int32_t difference = m_inTail - m_inHead;
    7cdc:	f8d0 3104 	ldr.w	r3, [r0, #260]	; 0x104
    7ce0:	f8d0 0100 	ldr.w	r0, [r0, #256]	; 0x100
    if (difference < 0) {
    7ce4:	1a18      	subs	r0, r3, r0
        return sizeof(m_bufferIn) + difference;
    7ce6:	bf48      	it	mi
    7ce8:	3040      	addmi	r0, #64	; 0x40
}
    7cea:	4770      	bx	lr

00007cec <_ZN9ClearCore10UsbManager17AvailableForWriteEv>:
    int32_t difference = m_outHead - m_outTail - 1;
    7cec:	f8d0 3108 	ldr.w	r3, [r0, #264]	; 0x108
    7cf0:	f8d0 210c 	ldr.w	r2, [r0, #268]	; 0x10c
    7cf4:	1a9b      	subs	r3, r3, r2
    if (difference < 0) {
    7cf6:	1e58      	subs	r0, r3, #1
        difference += sizeof(m_bufferOut);
    7cf8:	bf48      	it	mi
    7cfa:	f103 003f 	addmi.w	r0, r3, #63	; 0x3f
}
    7cfe:	4770      	bx	lr

00007d00 <_ZN9ClearCore10UsbManager6TxPumpEv>:
void UsbManager::TxPump() {
    7d00:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    if (atomic_test_and_set_acqrel(&m_sendActive)) {
    7d04:	f500 7388 	add.w	r3, r0, #272	; 0x110
void UsbManager::TxPump() {
    7d08:	b083      	sub	sp, #12
    if (atomic_test_and_set_acqrel(&m_sendActive)) {
    7d0a:	f04f 0101 	mov.w	r1, #1
    7d0e:	f3bf 8f5b 	dmb	ish
    7d12:	e8d3 2f4f 	ldrexb	r2, [r3]
    7d16:	e8c3 1f44 	strexb	r4, r1, [r3]
    7d1a:	2c00      	cmp	r4, #0
    7d1c:	d1f9      	bne.n	7d12 <_ZN9ClearCore10UsbManager6TxPumpEv+0x12>
    7d1e:	f3bf 8f5b 	dmb	ish
    7d22:	f012 0fff 	tst.w	r2, #255	; 0xff
    7d26:	f040 80e4 	bne.w	7ef2 <_ZN9ClearCore10UsbManager6TxPumpEv+0x1f2>
    uint32_t head = m_outHead;
    7d2a:	f8d0 6108 	ldr.w	r6, [r0, #264]	; 0x108
    uint32_t tail = m_outTail;
    7d2e:	f8d0 110c 	ldr.w	r1, [r0, #268]	; 0x10c
    if (head == tail) {
    7d32:	428e      	cmp	r6, r1
    7d34:	f000 81b6 	beq.w	80a4 <_ZN9ClearCore10UsbManager6TxPumpEv+0x3a4>
    uint8_t *inPtr = m_bufferOut + head, *outPtr = m_usbWriteBuf;
    7d38:	f100 0340 	add.w	r3, r0, #64	; 0x40
    7d3c:	eb03 0706 	add.w	r7, r3, r6
    7d40:	f100 05c0 	add.w	r5, r0, #192	; 0xc0
    if (head < tail) {
    7d44:	f0c0 80d8 	bcc.w	7ef8 <_ZN9ClearCore10UsbManager6TxPumpEv+0x1f8>
        uint32_t countTilWrap = sizeof(m_bufferOut) - head;
    7d48:	f1c6 0240 	rsb	r2, r6, #64	; 0x40
        count = min(count, countTilWrap + tail);
    7d4c:	4411      	add	r1, r2
    7d4e:	2940      	cmp	r1, #64	; 0x40
    7d50:	bf28      	it	cs
    7d52:	2140      	movcs	r1, #64	; 0x40
    7d54:	428a      	cmp	r2, r1
    7d56:	bf28      	it	cs
    7d58:	460a      	movcs	r2, r1
        for (uint32_t iChar = 0; iChar < loopEnd; iChar++) {
    7d5a:	2a00      	cmp	r2, #0
    7d5c:	f000 81c7 	beq.w	80ee <_ZN9ClearCore10UsbManager6TxPumpEv+0x3ee>
    7d60:	f106 0e40 	add.w	lr, r6, #64	; 0x40
    7d64:	f106 0444 	add.w	r4, r6, #68	; 0x44
    7d68:	eb00 080e 	add.w	r8, r0, lr
    7d6c:	4404      	add	r4, r0
    7d6e:	f100 0cc4 	add.w	ip, r0, #196	; 0xc4
    7d72:	45e0      	cmp	r8, ip
    7d74:	bf38      	it	cc
    7d76:	42a5      	cmpcc	r5, r4
    7d78:	f0c0 81ae 	bcc.w	80d8 <_ZN9ClearCore10UsbManager6TxPumpEv+0x3d8>
    7d7c:	2a0b      	cmp	r2, #11
    7d7e:	f240 81ab 	bls.w	80d8 <_ZN9ClearCore10UsbManager6TxPumpEv+0x3d8>
    7d82:	426c      	negs	r4, r5
    7d84:	f014 0403 	ands.w	r4, r4, #3
    7d88:	f000 817f 	beq.w	808a <_ZN9ClearCore10UsbManager6TxPumpEv+0x38a>
            *outPtr++ = *inPtr++;
    7d8c:	5d9e      	ldrb	r6, [r3, r6]
    7d8e:	f880 60c0 	strb.w	r6, [r0, #192]	; 0xc0
    7d92:	2c01      	cmp	r4, #1
    7d94:	f100 0cc1 	add.w	ip, r0, #193	; 0xc1
    7d98:	f107 0801 	add.w	r8, r7, #1
    7d9c:	f000 817b 	beq.w	8096 <_ZN9ClearCore10UsbManager6TxPumpEv+0x396>
    7da0:	787e      	ldrb	r6, [r7, #1]
    7da2:	f880 60c1 	strb.w	r6, [r0, #193]	; 0xc1
    7da6:	2c02      	cmp	r4, #2
    7da8:	f100 0cc2 	add.w	ip, r0, #194	; 0xc2
    7dac:	f107 0802 	add.w	r8, r7, #2
    7db0:	f000 8171 	beq.w	8096 <_ZN9ClearCore10UsbManager6TxPumpEv+0x396>
    7db4:	78be      	ldrb	r6, [r7, #2]
    7db6:	f880 60c2 	strb.w	r6, [r0, #194]	; 0xc2
        for (uint32_t iChar = 0; iChar < loopEnd; iChar++) {
    7dba:	2603      	movs	r6, #3
            *outPtr++ = *inPtr++;
    7dbc:	f107 0803 	add.w	r8, r7, #3
    7dc0:	f100 0cc3 	add.w	ip, r0, #195	; 0xc3
        for (uint32_t iChar = 0; iChar < loopEnd; iChar++) {
    7dc4:	9601      	str	r6, [sp, #4]
    7dc6:	eba2 0b04 	sub.w	fp, r2, r4
    7dca:	f1ab 0704 	sub.w	r7, fp, #4
    7dce:	08bf      	lsrs	r7, r7, #2
    7dd0:	eb0e 0604 	add.w	r6, lr, r4
    7dd4:	3701      	adds	r7, #1
    7dd6:	34c0      	adds	r4, #192	; 0xc0
    7dd8:	4406      	add	r6, r0
    7dda:	4404      	add	r4, r0
    7ddc:	ea4f 0987 	mov.w	r9, r7, lsl #2
    uint8_t *inPtr = m_bufferOut + head, *outPtr = m_usbWriteBuf;
    7de0:	f04f 0e00 	mov.w	lr, #0
    7de4:	f10e 0e01 	add.w	lr, lr, #1
            *outPtr++ = *inPtr++;
    7de8:	f856 ab04 	ldr.w	sl, [r6], #4
    7dec:	f844 ab04 	str.w	sl, [r4], #4
    7df0:	45be      	cmp	lr, r7
    7df2:	d3f7      	bcc.n	7de4 <_ZN9ClearCore10UsbManager6TxPumpEv+0xe4>
    7df4:	9c01      	ldr	r4, [sp, #4]
    7df6:	45cb      	cmp	fp, r9
    7df8:	444c      	add	r4, r9
    7dfa:	eb08 0e09 	add.w	lr, r8, r9
    7dfe:	eb0c 0609 	add.w	r6, ip, r9
    7e02:	d00f      	beq.n	7e24 <_ZN9ClearCore10UsbManager6TxPumpEv+0x124>
    7e04:	f818 8027 	ldrb.w	r8, [r8, r7, lsl #2]
    7e08:	f80c 8027 	strb.w	r8, [ip, r7, lsl #2]
        for (uint32_t iChar = 0; iChar < loopEnd; iChar++) {
    7e0c:	1c67      	adds	r7, r4, #1
    7e0e:	42ba      	cmp	r2, r7
    7e10:	d908      	bls.n	7e24 <_ZN9ClearCore10UsbManager6TxPumpEv+0x124>
    7e12:	3402      	adds	r4, #2
            *outPtr++ = *inPtr++;
    7e14:	f89e 7001 	ldrb.w	r7, [lr, #1]
    7e18:	7077      	strb	r7, [r6, #1]
        for (uint32_t iChar = 0; iChar < loopEnd; iChar++) {
    7e1a:	42a2      	cmp	r2, r4
    7e1c:	d902      	bls.n	7e24 <_ZN9ClearCore10UsbManager6TxPumpEv+0x124>
            *outPtr++ = *inPtr++;
    7e1e:	f89e 4002 	ldrb.w	r4, [lr, #2]
    7e22:	70b4      	strb	r4, [r6, #2]
    7e24:	18ac      	adds	r4, r5, r2
        for (uint32_t iChar = 0; iChar < loopEnd; iChar++) {
    7e26:	1a8a      	subs	r2, r1, r2
    7e28:	f000 811a 	beq.w	8060 <_ZN9ClearCore10UsbManager6TxPumpEv+0x360>
    7e2c:	1d26      	adds	r6, r4, #4
    7e2e:	f100 0744 	add.w	r7, r0, #68	; 0x44
    7e32:	42bc      	cmp	r4, r7
    7e34:	bf38      	it	cc
    7e36:	42b3      	cmpcc	r3, r6
    7e38:	f0c0 8145 	bcc.w	80c6 <_ZN9ClearCore10UsbManager6TxPumpEv+0x3c6>
    7e3c:	2a0b      	cmp	r2, #11
    7e3e:	f240 8142 	bls.w	80c6 <_ZN9ClearCore10UsbManager6TxPumpEv+0x3c6>
    7e42:	425f      	negs	r7, r3
    7e44:	f017 0703 	ands.w	r7, r7, #3
    7e48:	f000 8129 	beq.w	809e <_ZN9ClearCore10UsbManager6TxPumpEv+0x39e>
            *outPtr++ = *inPtr++;
    7e4c:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
    7e50:	7023      	strb	r3, [r4, #0]
    7e52:	2f01      	cmp	r7, #1
    7e54:	f104 0c01 	add.w	ip, r4, #1
    7e58:	f100 0341 	add.w	r3, r0, #65	; 0x41
    7e5c:	f000 811d 	beq.w	809a <_ZN9ClearCore10UsbManager6TxPumpEv+0x39a>
    7e60:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
    7e64:	7063      	strb	r3, [r4, #1]
    7e66:	2f02      	cmp	r7, #2
    7e68:	f104 0c02 	add.w	ip, r4, #2
    7e6c:	f100 0342 	add.w	r3, r0, #66	; 0x42
    7e70:	f000 8113 	beq.w	809a <_ZN9ClearCore10UsbManager6TxPumpEv+0x39a>
    7e74:	f890 3042 	ldrb.w	r3, [r0, #66]	; 0x42
    7e78:	70a3      	strb	r3, [r4, #2]
    7e7a:	f104 0c03 	add.w	ip, r4, #3
    7e7e:	f100 0343 	add.w	r3, r0, #67	; 0x43
        for (uint32_t iChar = 0; iChar < loopEnd; iChar++) {
    7e82:	f04f 0903 	mov.w	r9, #3
    7e86:	eba2 0807 	sub.w	r8, r2, r7
    7e8a:	f1a8 0e04 	sub.w	lr, r8, #4
    7e8e:	ea4f 0e9e 	mov.w	lr, lr, lsr #2
    7e92:	f107 0640 	add.w	r6, r7, #64	; 0x40
    7e96:	f10e 0e01 	add.w	lr, lr, #1
    7e9a:	443c      	add	r4, r7
    7e9c:	4406      	add	r6, r0
    7e9e:	ea4f 0a8e 	mov.w	sl, lr, lsl #2
    uint8_t *inPtr = m_bufferOut + head, *outPtr = m_usbWriteBuf;
    7ea2:	2700      	movs	r7, #0
    7ea4:	3701      	adds	r7, #1
            *outPtr++ = *inPtr++;
    7ea6:	f856 bb04 	ldr.w	fp, [r6], #4
    7eaa:	f844 bb04 	str.w	fp, [r4], #4
    7eae:	45be      	cmp	lr, r7
    7eb0:	d8f8      	bhi.n	7ea4 <_ZN9ClearCore10UsbManager6TxPumpEv+0x1a4>
    7eb2:	45d0      	cmp	r8, sl
    7eb4:	eb09 040a 	add.w	r4, r9, sl
    7eb8:	eb03 070a 	add.w	r7, r3, sl
    7ebc:	eb0c 060a 	add.w	r6, ip, sl
    7ec0:	f000 80ce 	beq.w	8060 <_ZN9ClearCore10UsbManager6TxPumpEv+0x360>
    7ec4:	f813 302e 	ldrb.w	r3, [r3, lr, lsl #2]
    7ec8:	f80c 302e 	strb.w	r3, [ip, lr, lsl #2]
        for (uint32_t iChar = 0; iChar < loopEnd; iChar++) {
    7ecc:	1c63      	adds	r3, r4, #1
    7ece:	429a      	cmp	r2, r3
    7ed0:	f240 80c6 	bls.w	8060 <_ZN9ClearCore10UsbManager6TxPumpEv+0x360>
    7ed4:	3402      	adds	r4, #2
            *outPtr++ = *inPtr++;
    7ed6:	787b      	ldrb	r3, [r7, #1]
    7ed8:	7073      	strb	r3, [r6, #1]
        for (uint32_t iChar = 0; iChar < loopEnd; iChar++) {
    7eda:	42a2      	cmp	r2, r4
    7edc:	f240 80c0 	bls.w	8060 <_ZN9ClearCore10UsbManager6TxPumpEv+0x360>
            *outPtr++ = *inPtr++;
    7ee0:	78bb      	ldrb	r3, [r7, #2]
    7ee2:	70b3      	strb	r3, [r6, #2]
    7ee4:	4604      	mov	r4, r0
    if (cdcdf_acm_write(m_usbWriteBuf, count)) {
    7ee6:	4628      	mov	r0, r5
    7ee8:	f005 f8a4 	bl	d034 <cdcdf_acm_write>
    7eec:	2800      	cmp	r0, #0
    7eee:	f040 80be 	bne.w	806e <_ZN9ClearCore10UsbManager6TxPumpEv+0x36e>
}
    7ef2:	b003      	add	sp, #12
    7ef4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        count = min(count, tail - head);
    7ef8:	1b89      	subs	r1, r1, r6
    7efa:	f106 0240 	add.w	r2, r6, #64	; 0x40
    7efe:	f106 0444 	add.w	r4, r6, #68	; 0x44
    7f02:	2940      	cmp	r1, #64	; 0x40
    7f04:	eb00 0c02 	add.w	ip, r0, r2
    7f08:	4404      	add	r4, r0
    7f0a:	f100 0ec4 	add.w	lr, r0, #196	; 0xc4
    7f0e:	bf28      	it	cs
    7f10:	2140      	movcs	r1, #64	; 0x40
    7f12:	45f4      	cmp	ip, lr
    7f14:	bf38      	it	cc
    7f16:	42a5      	cmpcc	r5, r4
    7f18:	f0c0 80cb 	bcc.w	80b2 <_ZN9ClearCore10UsbManager6TxPumpEv+0x3b2>
    7f1c:	290b      	cmp	r1, #11
    7f1e:	f240 80c8 	bls.w	80b2 <_ZN9ClearCore10UsbManager6TxPumpEv+0x3b2>
    7f22:	426c      	negs	r4, r5
    7f24:	f014 0403 	ands.w	r4, r4, #3
    7f28:	f000 80ab 	beq.w	8082 <_ZN9ClearCore10UsbManager6TxPumpEv+0x382>
            *outPtr++ = *inPtr++;
    7f2c:	5d9b      	ldrb	r3, [r3, r6]
    7f2e:	f880 30c0 	strb.w	r3, [r0, #192]	; 0xc0
    7f32:	2c01      	cmp	r4, #1
    7f34:	f100 06c1 	add.w	r6, r0, #193	; 0xc1
    7f38:	f107 0e01 	add.w	lr, r7, #1
    7f3c:	f000 80a9 	beq.w	8092 <_ZN9ClearCore10UsbManager6TxPumpEv+0x392>
    7f40:	787b      	ldrb	r3, [r7, #1]
    7f42:	f880 30c1 	strb.w	r3, [r0, #193]	; 0xc1
    7f46:	2c02      	cmp	r4, #2
    7f48:	f100 06c2 	add.w	r6, r0, #194	; 0xc2
    7f4c:	f107 0e02 	add.w	lr, r7, #2
    7f50:	f000 809f 	beq.w	8092 <_ZN9ClearCore10UsbManager6TxPumpEv+0x392>
    7f54:	78bb      	ldrb	r3, [r7, #2]
    7f56:	f880 30c2 	strb.w	r3, [r0, #194]	; 0xc2
    7f5a:	f107 0e03 	add.w	lr, r7, #3
    7f5e:	f100 06c3 	add.w	r6, r0, #195	; 0xc3
        for (uint32_t iChar = 0; iChar < count; iChar++) {
    7f62:	f04f 0c03 	mov.w	ip, #3
    7f66:	1913      	adds	r3, r2, r4
    7f68:	4403      	add	r3, r0
    7f6a:	f104 08c0 	add.w	r8, r4, #192	; 0xc0
            *outPtr++ = *inPtr++;
    7f6e:	681a      	ldr	r2, [r3, #0]
    7f70:	f840 2008 	str.w	r2, [r0, r8]
    7f74:	1b0f      	subs	r7, r1, r4
    7f76:	1f3a      	subs	r2, r7, #4
    7f78:	0892      	lsrs	r2, r2, #2
    7f7a:	eb00 0408 	add.w	r4, r0, r8
    7f7e:	3201      	adds	r2, #1
    7f80:	f8d3 8004 	ldr.w	r8, [r3, #4]
    7f84:	f8c4 8004 	str.w	r8, [r4, #4]
    7f88:	2a02      	cmp	r2, #2
    7f8a:	ea4f 0882 	mov.w	r8, r2, lsl #2
    7f8e:	d04f      	beq.n	8030 <_ZN9ClearCore10UsbManager6TxPumpEv+0x330>
    7f90:	f8d3 9008 	ldr.w	r9, [r3, #8]
    7f94:	f8c4 9008 	str.w	r9, [r4, #8]
    7f98:	2a03      	cmp	r2, #3
    7f9a:	d049      	beq.n	8030 <_ZN9ClearCore10UsbManager6TxPumpEv+0x330>
    7f9c:	f8d3 900c 	ldr.w	r9, [r3, #12]
    7fa0:	f8c4 900c 	str.w	r9, [r4, #12]
    7fa4:	2a04      	cmp	r2, #4
    7fa6:	d043      	beq.n	8030 <_ZN9ClearCore10UsbManager6TxPumpEv+0x330>
    7fa8:	f8d3 9010 	ldr.w	r9, [r3, #16]
    7fac:	f8c4 9010 	str.w	r9, [r4, #16]
    7fb0:	2a05      	cmp	r2, #5
    7fb2:	d03d      	beq.n	8030 <_ZN9ClearCore10UsbManager6TxPumpEv+0x330>
    7fb4:	f8d3 9014 	ldr.w	r9, [r3, #20]
    7fb8:	f8c4 9014 	str.w	r9, [r4, #20]
    7fbc:	2a06      	cmp	r2, #6
    7fbe:	d037      	beq.n	8030 <_ZN9ClearCore10UsbManager6TxPumpEv+0x330>
    7fc0:	f8d3 9018 	ldr.w	r9, [r3, #24]
    7fc4:	f8c4 9018 	str.w	r9, [r4, #24]
    7fc8:	2a07      	cmp	r2, #7
    7fca:	d031      	beq.n	8030 <_ZN9ClearCore10UsbManager6TxPumpEv+0x330>
    7fcc:	f8d3 901c 	ldr.w	r9, [r3, #28]
    7fd0:	f8c4 901c 	str.w	r9, [r4, #28]
    7fd4:	2a08      	cmp	r2, #8
    7fd6:	d02b      	beq.n	8030 <_ZN9ClearCore10UsbManager6TxPumpEv+0x330>
    7fd8:	f8d3 9020 	ldr.w	r9, [r3, #32]
    7fdc:	f8c4 9020 	str.w	r9, [r4, #32]
    7fe0:	2a09      	cmp	r2, #9
    7fe2:	d025      	beq.n	8030 <_ZN9ClearCore10UsbManager6TxPumpEv+0x330>
    7fe4:	f8d3 9024 	ldr.w	r9, [r3, #36]	; 0x24
    7fe8:	f8c4 9024 	str.w	r9, [r4, #36]	; 0x24
    7fec:	2a0a      	cmp	r2, #10
    7fee:	d01f      	beq.n	8030 <_ZN9ClearCore10UsbManager6TxPumpEv+0x330>
    7ff0:	f8d3 9028 	ldr.w	r9, [r3, #40]	; 0x28
    7ff4:	f8c4 9028 	str.w	r9, [r4, #40]	; 0x28
    7ff8:	2a0b      	cmp	r2, #11
    7ffa:	d019      	beq.n	8030 <_ZN9ClearCore10UsbManager6TxPumpEv+0x330>
    7ffc:	f8d3 902c 	ldr.w	r9, [r3, #44]	; 0x2c
    8000:	f8c4 902c 	str.w	r9, [r4, #44]	; 0x2c
    8004:	2a0c      	cmp	r2, #12
    8006:	d013      	beq.n	8030 <_ZN9ClearCore10UsbManager6TxPumpEv+0x330>
    8008:	f8d3 9030 	ldr.w	r9, [r3, #48]	; 0x30
    800c:	f8c4 9030 	str.w	r9, [r4, #48]	; 0x30
    8010:	2a0d      	cmp	r2, #13
    8012:	d00d      	beq.n	8030 <_ZN9ClearCore10UsbManager6TxPumpEv+0x330>
    8014:	f8d3 9034 	ldr.w	r9, [r3, #52]	; 0x34
    8018:	f8c4 9034 	str.w	r9, [r4, #52]	; 0x34
    801c:	2a0e      	cmp	r2, #14
    801e:	d007      	beq.n	8030 <_ZN9ClearCore10UsbManager6TxPumpEv+0x330>
    8020:	f8d3 9038 	ldr.w	r9, [r3, #56]	; 0x38
    8024:	f8c4 9038 	str.w	r9, [r4, #56]	; 0x38
    8028:	2a0f      	cmp	r2, #15
    802a:	d001      	beq.n	8030 <_ZN9ClearCore10UsbManager6TxPumpEv+0x330>
    802c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
    802e:	63e3      	str	r3, [r4, #60]	; 0x3c
    8030:	4547      	cmp	r7, r8
    8032:	eb0c 0308 	add.w	r3, ip, r8
    8036:	eb06 0408 	add.w	r4, r6, r8
    803a:	eb0e 0c08 	add.w	ip, lr, r8
    803e:	d00f      	beq.n	8060 <_ZN9ClearCore10UsbManager6TxPumpEv+0x360>
    8040:	f81e 7022 	ldrb.w	r7, [lr, r2, lsl #2]
    8044:	f806 7022 	strb.w	r7, [r6, r2, lsl #2]
        for (uint32_t iChar = 0; iChar < count; iChar++) {
    8048:	1c5a      	adds	r2, r3, #1
    804a:	4291      	cmp	r1, r2
    804c:	d908      	bls.n	8060 <_ZN9ClearCore10UsbManager6TxPumpEv+0x360>
    804e:	3302      	adds	r3, #2
            *outPtr++ = *inPtr++;
    8050:	f89c 2001 	ldrb.w	r2, [ip, #1]
    8054:	7062      	strb	r2, [r4, #1]
        for (uint32_t iChar = 0; iChar < count; iChar++) {
    8056:	4299      	cmp	r1, r3
    8058:	d902      	bls.n	8060 <_ZN9ClearCore10UsbManager6TxPumpEv+0x360>
            *outPtr++ = *inPtr++;
    805a:	f89c 3002 	ldrb.w	r3, [ip, #2]
    805e:	70a3      	strb	r3, [r4, #2]
    8060:	4604      	mov	r4, r0
    if (cdcdf_acm_write(m_usbWriteBuf, count)) {
    8062:	4628      	mov	r0, r5
    8064:	f004 ffe6 	bl	d034 <cdcdf_acm_write>
    8068:	2800      	cmp	r0, #0
    806a:	f43f af42 	beq.w	7ef2 <_ZN9ClearCore10UsbManager6TxPumpEv+0x1f2>
        atomic_clear_seqcst(&m_sendActive);
    806e:	f3bf 8f5b 	dmb	ish
    8072:	2300      	movs	r3, #0
    8074:	f884 3110 	strb.w	r3, [r4, #272]	; 0x110
    8078:	f3bf 8f5b 	dmb	ish
}
    807c:	b003      	add	sp, #12
    807e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    uint8_t *inPtr = m_bufferOut + head, *outPtr = m_usbWriteBuf;
    8082:	46be      	mov	lr, r7
        for (uint32_t iChar = 0; iChar < count; iChar++) {
    8084:	46a4      	mov	ip, r4
    uint8_t *inPtr = m_bufferOut + head, *outPtr = m_usbWriteBuf;
    8086:	462e      	mov	r6, r5
    8088:	e76d      	b.n	7f66 <_ZN9ClearCore10UsbManager6TxPumpEv+0x266>
    808a:	46b8      	mov	r8, r7
        for (uint32_t iChar = 0; iChar < loopEnd; iChar++) {
    808c:	9401      	str	r4, [sp, #4]
    uint8_t *inPtr = m_bufferOut + head, *outPtr = m_usbWriteBuf;
    808e:	46ac      	mov	ip, r5
    8090:	e699      	b.n	7dc6 <_ZN9ClearCore10UsbManager6TxPumpEv+0xc6>
        for (uint32_t iChar = 0; iChar < count; iChar++) {
    8092:	46a4      	mov	ip, r4
    8094:	e767      	b.n	7f66 <_ZN9ClearCore10UsbManager6TxPumpEv+0x266>
        for (uint32_t iChar = 0; iChar < loopEnd; iChar++) {
    8096:	9401      	str	r4, [sp, #4]
    8098:	e695      	b.n	7dc6 <_ZN9ClearCore10UsbManager6TxPumpEv+0xc6>
        for (uint32_t iChar = 0; iChar < loopEnd; iChar++) {
    809a:	46b9      	mov	r9, r7
    809c:	e6f3      	b.n	7e86 <_ZN9ClearCore10UsbManager6TxPumpEv+0x186>
    809e:	46b9      	mov	r9, r7
    80a0:	46a4      	mov	ip, r4
    80a2:	e6f0      	b.n	7e86 <_ZN9ClearCore10UsbManager6TxPumpEv+0x186>
        atomic_clear_seqcst(&m_sendActive);
    80a4:	f3bf 8f5b 	dmb	ish
    80a8:	f880 2110 	strb.w	r2, [r0, #272]	; 0x110
    80ac:	f3bf 8f5b 	dmb	ish
        return;
    80b0:	e71f      	b.n	7ef2 <_ZN9ClearCore10UsbManager6TxPumpEv+0x1f2>
    80b2:	f100 03bf 	add.w	r3, r0, #191	; 0xbf
    80b6:	187c      	adds	r4, r7, r1
            *outPtr++ = *inPtr++;
    80b8:	f817 2b01 	ldrb.w	r2, [r7], #1
    80bc:	f803 2f01 	strb.w	r2, [r3, #1]!
        for (uint32_t iChar = 0; iChar < count; iChar++) {
    80c0:	42a7      	cmp	r7, r4
    80c2:	d1f9      	bne.n	80b8 <_ZN9ClearCore10UsbManager6TxPumpEv+0x3b8>
    80c4:	e7cc      	b.n	8060 <_ZN9ClearCore10UsbManager6TxPumpEv+0x360>
    80c6:	3c01      	subs	r4, #1
    80c8:	441a      	add	r2, r3
            *outPtr++ = *inPtr++;
    80ca:	f813 6b01 	ldrb.w	r6, [r3], #1
    80ce:	f804 6f01 	strb.w	r6, [r4, #1]!
        for (uint32_t iChar = 0; iChar < loopEnd; iChar++) {
    80d2:	4293      	cmp	r3, r2
    80d4:	d1f9      	bne.n	80ca <_ZN9ClearCore10UsbManager6TxPumpEv+0x3ca>
    80d6:	e7c3      	b.n	8060 <_ZN9ClearCore10UsbManager6TxPumpEv+0x360>
    80d8:	f100 04bf 	add.w	r4, r0, #191	; 0xbf
    80dc:	eb07 0e02 	add.w	lr, r7, r2
            *outPtr++ = *inPtr++;
    80e0:	f817 6b01 	ldrb.w	r6, [r7], #1
    80e4:	f804 6f01 	strb.w	r6, [r4, #1]!
        for (uint32_t iChar = 0; iChar < loopEnd; iChar++) {
    80e8:	45be      	cmp	lr, r7
    80ea:	d1f9      	bne.n	80e0 <_ZN9ClearCore10UsbManager6TxPumpEv+0x3e0>
    80ec:	e69a      	b.n	7e24 <_ZN9ClearCore10UsbManager6TxPumpEv+0x124>
    uint8_t *inPtr = m_bufferOut + head, *outPtr = m_usbWriteBuf;
    80ee:	462c      	mov	r4, r5
    80f0:	e699      	b.n	7e26 <_ZN9ClearCore10UsbManager6TxPumpEv+0x126>
    80f2:	bf00      	nop

000080f4 <_ZN9ClearCore10UsbManager9PortCloseEv>:
void UsbManager::PortClose() {
    80f4:	b538      	push	{r3, r4, r5, lr}
    if (!m_portOpen) {
    80f6:	f890 311c 	ldrb.w	r3, [r0, #284]	; 0x11c
    80fa:	b903      	cbnz	r3, 80fe <_ZN9ClearCore10UsbManager9PortCloseEv+0xa>
    80fc:	bd38      	pop	{r3, r4, r5, pc}
    80fe:	4605      	mov	r5, r0
    TxPump();
    8100:	f7ff fdfe 	bl	7d00 <_ZN9ClearCore10UsbManager6TxPumpEv>
           USB->DEVICE.FSMSTATUS.bit.FSMSTATE == USB_FSMSTATUS_FSMSTATE_ON;
    8104:	f04f 4482 	mov.w	r4, #1090519040	; 0x41000000
    while (m_outHead != m_outTail && Connected()) {
    8108:	f8d5 2108 	ldr.w	r2, [r5, #264]	; 0x108
    810c:	f8d5 310c 	ldr.w	r3, [r5, #268]	; 0x10c
    8110:	429a      	cmp	r2, r3
    8112:	d00b      	beq.n	812c <_ZN9ClearCore10UsbManager9PortCloseEv+0x38>
    return cdcdf_acm_is_enabled() && LineState().rs232.DTR &&
    8114:	f004 ffd6 	bl	d0c4 <cdcdf_acm_is_enabled>
    8118:	b140      	cbz	r0, 812c <_ZN9ClearCore10UsbManager9PortCloseEv+0x38>
    811a:	f895 3112 	ldrb.w	r3, [r5, #274]	; 0x112
    811e:	07db      	lsls	r3, r3, #31
    8120:	d504      	bpl.n	812c <_ZN9ClearCore10UsbManager9PortCloseEv+0x38>
           USB->DEVICE.FSMSTATUS.bit.FSMSTATE == USB_FSMSTATUS_FSMSTATE_ON;
    8122:	7b63      	ldrb	r3, [r4, #13]
    8124:	f003 037f 	and.w	r3, r3, #127	; 0x7f
    return cdcdf_acm_is_enabled() && LineState().rs232.DTR &&
    8128:	2b02      	cmp	r3, #2
    812a:	d0ed      	beq.n	8108 <_ZN9ClearCore10UsbManager9PortCloseEv+0x14>
    m_portOpen = false;
    812c:	2400      	movs	r4, #0
    cdcdf_acm_register_callback(CDCDF_ACM_CB_READ, (FUNC_PTR)NULL);
    812e:	4621      	mov	r1, r4
    m_portOpen = false;
    8130:	f885 411c 	strb.w	r4, [r5, #284]	; 0x11c
    cdcdf_acm_register_callback(CDCDF_ACM_CB_READ, (FUNC_PTR)NULL);
    8134:	4620      	mov	r0, r4
    8136:	f004 ff9d 	bl	d074 <cdcdf_acm_register_callback>
    cdcdf_acm_register_callback(CDCDF_ACM_CB_WRITE, (FUNC_PTR)NULL);
    813a:	4621      	mov	r1, r4
    813c:	2001      	movs	r0, #1
    813e:	f004 ff99 	bl	d074 <cdcdf_acm_register_callback>
    cdcdf_acm_stop_xfer();
    8142:	f004 ff8b 	bl	d05c <cdcdf_acm_stop_xfer>
    m_inHead = 0;
    8146:	f8c5 4100 	str.w	r4, [r5, #256]	; 0x100
    m_readBufAvail = 0;
    814a:	f8c5 4118 	str.w	r4, [r5, #280]	; 0x118
    m_inTail = 0;
    814e:	f8c5 4104 	str.w	r4, [r5, #260]	; 0x104
    m_outHead = 0;
    8152:	f8c5 4108 	str.w	r4, [r5, #264]	; 0x108
    m_outTail = 0;
    8156:	f8c5 410c 	str.w	r4, [r5, #268]	; 0x10c
    m_sendActive = false;
    815a:	f885 4110 	strb.w	r4, [r5, #272]	; 0x110
    m_readActive = false;
    815e:	f885 4111 	strb.w	r4, [r5, #273]	; 0x111
    8162:	bd38      	pop	{r3, r4, r5, pc}

00008164 <_ZN9ClearCore10UsbManager7RefreshEv>:
    if (!m_sendActive && m_outHead != m_outTail) {
    8164:	f890 3110 	ldrb.w	r3, [r0, #272]	; 0x110
    8168:	b103      	cbz	r3, 816c <_ZN9ClearCore10UsbManager7RefreshEv+0x8>
    816a:	4770      	bx	lr
    816c:	f8d0 2108 	ldr.w	r2, [r0, #264]	; 0x108
    8170:	f8d0 310c 	ldr.w	r3, [r0, #268]	; 0x10c
    8174:	429a      	cmp	r2, r3
    8176:	f000 80fd 	beq.w	8374 <_ZN9ClearCore10UsbManager7RefreshEv+0x210>
void UsbManager::Refresh(void) {
    817a:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    if (atomic_test_and_set_acqrel(&m_sendActive)) {
    817e:	f500 7388 	add.w	r3, r0, #272	; 0x110
void UsbManager::Refresh(void) {
    8182:	b083      	sub	sp, #12
    if (atomic_test_and_set_acqrel(&m_sendActive)) {
    8184:	f04f 0101 	mov.w	r1, #1
    8188:	f3bf 8f5b 	dmb	ish
    818c:	e8d3 2f4f 	ldrexb	r2, [r3]
    8190:	e8c3 1f44 	strexb	r4, r1, [r3]
    8194:	2c00      	cmp	r4, #0
    8196:	d1f9      	bne.n	818c <_ZN9ClearCore10UsbManager7RefreshEv+0x28>
    8198:	f3bf 8f5b 	dmb	ish
    819c:	f012 0fff 	tst.w	r2, #255	; 0xff
    81a0:	f040 80e5 	bne.w	836e <_ZN9ClearCore10UsbManager7RefreshEv+0x20a>
    uint32_t head = m_outHead;
    81a4:	f8d0 6108 	ldr.w	r6, [r0, #264]	; 0x108
    uint32_t tail = m_outTail;
    81a8:	f8d0 110c 	ldr.w	r1, [r0, #268]	; 0x10c
    if (head == tail) {
    81ac:	428e      	cmp	r6, r1
    81ae:	f000 81ab 	beq.w	8508 <_ZN9ClearCore10UsbManager7RefreshEv+0x3a4>
    uint8_t *inPtr = m_bufferOut + head, *outPtr = m_usbWriteBuf;
    81b2:	f100 0340 	add.w	r3, r0, #64	; 0x40
    81b6:	eb03 0706 	add.w	r7, r3, r6
    81ba:	f100 05c0 	add.w	r5, r0, #192	; 0xc0
    if (head < tail) {
    81be:	f0c0 80da 	bcc.w	8376 <_ZN9ClearCore10UsbManager7RefreshEv+0x212>
        uint32_t countTilWrap = sizeof(m_bufferOut) - head;
    81c2:	f1c6 0240 	rsb	r2, r6, #64	; 0x40
        count = min(count, countTilWrap + tail);
    81c6:	4411      	add	r1, r2
    81c8:	2940      	cmp	r1, #64	; 0x40
    81ca:	bf28      	it	cs
    81cc:	2140      	movcs	r1, #64	; 0x40
    81ce:	428a      	cmp	r2, r1
    81d0:	bf28      	it	cs
    81d2:	460a      	movcs	r2, r1
        for (uint32_t iChar = 0; iChar < loopEnd; iChar++) {
    81d4:	2a00      	cmp	r2, #0
    81d6:	f000 81bc 	beq.w	8552 <_ZN9ClearCore10UsbManager7RefreshEv+0x3ee>
    81da:	f106 0e40 	add.w	lr, r6, #64	; 0x40
    81de:	f106 0444 	add.w	r4, r6, #68	; 0x44
    81e2:	eb00 080e 	add.w	r8, r0, lr
    81e6:	4404      	add	r4, r0
    81e8:	f100 0cc4 	add.w	ip, r0, #196	; 0xc4
    81ec:	45e0      	cmp	r8, ip
    81ee:	bf38      	it	cc
    81f0:	42a5      	cmpcc	r5, r4
    81f2:	f0c0 81a3 	bcc.w	853c <_ZN9ClearCore10UsbManager7RefreshEv+0x3d8>
    81f6:	2a0b      	cmp	r2, #11
    81f8:	f240 81a0 	bls.w	853c <_ZN9ClearCore10UsbManager7RefreshEv+0x3d8>
    81fc:	426c      	negs	r4, r5
    81fe:	f014 0403 	ands.w	r4, r4, #3
    8202:	f000 8177 	beq.w	84f4 <_ZN9ClearCore10UsbManager7RefreshEv+0x390>
            *outPtr++ = *inPtr++;
    8206:	5d9e      	ldrb	r6, [r3, r6]
    8208:	f880 60c0 	strb.w	r6, [r0, #192]	; 0xc0
    820c:	2c01      	cmp	r4, #1
    820e:	f100 0cc1 	add.w	ip, r0, #193	; 0xc1
    8212:	f107 0801 	add.w	r8, r7, #1
    8216:	f000 8171 	beq.w	84fc <_ZN9ClearCore10UsbManager7RefreshEv+0x398>
    821a:	787e      	ldrb	r6, [r7, #1]
    821c:	f880 60c1 	strb.w	r6, [r0, #193]	; 0xc1
    8220:	2c02      	cmp	r4, #2
    8222:	f100 0cc2 	add.w	ip, r0, #194	; 0xc2
    8226:	f107 0802 	add.w	r8, r7, #2
    822a:	f000 8165 	beq.w	84f8 <_ZN9ClearCore10UsbManager7RefreshEv+0x394>
    822e:	78be      	ldrb	r6, [r7, #2]
    8230:	f880 60c2 	strb.w	r6, [r0, #194]	; 0xc2
        for (uint32_t iChar = 0; iChar < loopEnd; iChar++) {
    8234:	2603      	movs	r6, #3
            *outPtr++ = *inPtr++;
    8236:	f107 0803 	add.w	r8, r7, #3
    823a:	f100 0cc3 	add.w	ip, r0, #195	; 0xc3
        for (uint32_t iChar = 0; iChar < loopEnd; iChar++) {
    823e:	9601      	str	r6, [sp, #4]
    8240:	eba2 0b04 	sub.w	fp, r2, r4
    8244:	f1ab 0704 	sub.w	r7, fp, #4
    8248:	08bf      	lsrs	r7, r7, #2
    824a:	eb0e 0604 	add.w	r6, lr, r4
    824e:	3701      	adds	r7, #1
    8250:	34c0      	adds	r4, #192	; 0xc0
    8252:	4406      	add	r6, r0
    8254:	4404      	add	r4, r0
    8256:	ea4f 0987 	mov.w	r9, r7, lsl #2
    825a:	f04f 0e00 	mov.w	lr, #0
    825e:	f10e 0e01 	add.w	lr, lr, #1
            *outPtr++ = *inPtr++;
    8262:	f856 ab04 	ldr.w	sl, [r6], #4
    8266:	f844 ab04 	str.w	sl, [r4], #4
    826a:	45be      	cmp	lr, r7
    826c:	d3f7      	bcc.n	825e <_ZN9ClearCore10UsbManager7RefreshEv+0xfa>
    826e:	9c01      	ldr	r4, [sp, #4]
    8270:	45cb      	cmp	fp, r9
    8272:	444c      	add	r4, r9
    8274:	eb0c 0609 	add.w	r6, ip, r9
    8278:	eb08 0e09 	add.w	lr, r8, r9
    827c:	d00f      	beq.n	829e <_ZN9ClearCore10UsbManager7RefreshEv+0x13a>
    827e:	f818 8027 	ldrb.w	r8, [r8, r7, lsl #2]
    8282:	f80c 8027 	strb.w	r8, [ip, r7, lsl #2]
        for (uint32_t iChar = 0; iChar < loopEnd; iChar++) {
    8286:	1c67      	adds	r7, r4, #1
    8288:	42ba      	cmp	r2, r7
    828a:	d908      	bls.n	829e <_ZN9ClearCore10UsbManager7RefreshEv+0x13a>
    828c:	3402      	adds	r4, #2
            *outPtr++ = *inPtr++;
    828e:	f89e 7001 	ldrb.w	r7, [lr, #1]
    8292:	7077      	strb	r7, [r6, #1]
        for (uint32_t iChar = 0; iChar < loopEnd; iChar++) {
    8294:	42a2      	cmp	r2, r4
    8296:	d902      	bls.n	829e <_ZN9ClearCore10UsbManager7RefreshEv+0x13a>
            *outPtr++ = *inPtr++;
    8298:	f89e 4002 	ldrb.w	r4, [lr, #2]
    829c:	70b4      	strb	r4, [r6, #2]
    829e:	18ac      	adds	r4, r5, r2
        for (uint32_t iChar = 0; iChar < loopEnd; iChar++) {
    82a0:	1a8a      	subs	r2, r1, r2
    82a2:	d058      	beq.n	8356 <_ZN9ClearCore10UsbManager7RefreshEv+0x1f2>
    82a4:	1d26      	adds	r6, r4, #4
    82a6:	f100 0744 	add.w	r7, r0, #68	; 0x44
    82aa:	42bc      	cmp	r4, r7
    82ac:	bf38      	it	cc
    82ae:	42b3      	cmpcc	r3, r6
    82b0:	f0c0 813b 	bcc.w	852a <_ZN9ClearCore10UsbManager7RefreshEv+0x3c6>
    82b4:	2a0b      	cmp	r2, #11
    82b6:	f240 8138 	bls.w	852a <_ZN9ClearCore10UsbManager7RefreshEv+0x3c6>
    82ba:	425f      	negs	r7, r3
    82bc:	f017 0703 	ands.w	r7, r7, #3
    82c0:	f000 811f 	beq.w	8502 <_ZN9ClearCore10UsbManager7RefreshEv+0x39e>
            *outPtr++ = *inPtr++;
    82c4:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
    82c8:	7023      	strb	r3, [r4, #0]
    82ca:	2f01      	cmp	r7, #1
    82cc:	f104 0c01 	add.w	ip, r4, #1
    82d0:	f100 0341 	add.w	r3, r0, #65	; 0x41
    82d4:	f000 8116 	beq.w	8504 <_ZN9ClearCore10UsbManager7RefreshEv+0x3a0>
    82d8:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
    82dc:	7063      	strb	r3, [r4, #1]
    82de:	2f02      	cmp	r7, #2
    82e0:	f104 0c02 	add.w	ip, r4, #2
    82e4:	f100 0342 	add.w	r3, r0, #66	; 0x42
    82e8:	f000 810c 	beq.w	8504 <_ZN9ClearCore10UsbManager7RefreshEv+0x3a0>
    82ec:	f890 3042 	ldrb.w	r3, [r0, #66]	; 0x42
    82f0:	70a3      	strb	r3, [r4, #2]
    82f2:	f104 0c03 	add.w	ip, r4, #3
    82f6:	f100 0343 	add.w	r3, r0, #67	; 0x43
        for (uint32_t iChar = 0; iChar < loopEnd; iChar++) {
    82fa:	f04f 0903 	mov.w	r9, #3
    82fe:	eba2 0807 	sub.w	r8, r2, r7
    8302:	f1a8 0e04 	sub.w	lr, r8, #4
    8306:	ea4f 0e9e 	mov.w	lr, lr, lsr #2
    830a:	f107 0640 	add.w	r6, r7, #64	; 0x40
    830e:	f10e 0e01 	add.w	lr, lr, #1
    8312:	443c      	add	r4, r7
    8314:	4406      	add	r6, r0
    8316:	ea4f 0a8e 	mov.w	sl, lr, lsl #2
    831a:	2700      	movs	r7, #0
    831c:	3701      	adds	r7, #1
            *outPtr++ = *inPtr++;
    831e:	f856 bb04 	ldr.w	fp, [r6], #4
    8322:	f844 bb04 	str.w	fp, [r4], #4
    8326:	45be      	cmp	lr, r7
    8328:	d8f8      	bhi.n	831c <_ZN9ClearCore10UsbManager7RefreshEv+0x1b8>
    832a:	45d0      	cmp	r8, sl
    832c:	eb09 040a 	add.w	r4, r9, sl
    8330:	eb0c 060a 	add.w	r6, ip, sl
    8334:	eb03 070a 	add.w	r7, r3, sl
    8338:	d00d      	beq.n	8356 <_ZN9ClearCore10UsbManager7RefreshEv+0x1f2>
    833a:	f813 302e 	ldrb.w	r3, [r3, lr, lsl #2]
    833e:	f80c 302e 	strb.w	r3, [ip, lr, lsl #2]
        for (uint32_t iChar = 0; iChar < loopEnd; iChar++) {
    8342:	1c63      	adds	r3, r4, #1
    8344:	429a      	cmp	r2, r3
    8346:	d906      	bls.n	8356 <_ZN9ClearCore10UsbManager7RefreshEv+0x1f2>
    8348:	3402      	adds	r4, #2
            *outPtr++ = *inPtr++;
    834a:	787b      	ldrb	r3, [r7, #1]
    834c:	7073      	strb	r3, [r6, #1]
        for (uint32_t iChar = 0; iChar < loopEnd; iChar++) {
    834e:	42a2      	cmp	r2, r4
    8350:	d901      	bls.n	8356 <_ZN9ClearCore10UsbManager7RefreshEv+0x1f2>
            *outPtr++ = *inPtr++;
    8352:	78bb      	ldrb	r3, [r7, #2]
    8354:	70b3      	strb	r3, [r6, #2]
    8356:	4604      	mov	r4, r0
    if (cdcdf_acm_write(m_usbWriteBuf, count)) {
    8358:	4628      	mov	r0, r5
    835a:	f004 fe6b 	bl	d034 <cdcdf_acm_write>
    835e:	b130      	cbz	r0, 836e <_ZN9ClearCore10UsbManager7RefreshEv+0x20a>
        atomic_clear_seqcst(&m_sendActive);
    8360:	f3bf 8f5b 	dmb	ish
    8364:	2300      	movs	r3, #0
    8366:	f884 3110 	strb.w	r3, [r4, #272]	; 0x110
    836a:	f3bf 8f5b 	dmb	ish
}
    836e:	b003      	add	sp, #12
    8370:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    8374:	4770      	bx	lr
        count = min(count, tail - head);
    8376:	1b89      	subs	r1, r1, r6
    8378:	f106 0240 	add.w	r2, r6, #64	; 0x40
    837c:	f106 0444 	add.w	r4, r6, #68	; 0x44
    8380:	2940      	cmp	r1, #64	; 0x40
    8382:	eb00 0c02 	add.w	ip, r0, r2
    8386:	4404      	add	r4, r0
    8388:	f100 0ec4 	add.w	lr, r0, #196	; 0xc4
    838c:	bf28      	it	cs
    838e:	2140      	movcs	r1, #64	; 0x40
    8390:	45f4      	cmp	ip, lr
    8392:	bf38      	it	cc
    8394:	42a5      	cmpcc	r5, r4
    8396:	f0c0 80be 	bcc.w	8516 <_ZN9ClearCore10UsbManager7RefreshEv+0x3b2>
    839a:	290b      	cmp	r1, #11
    839c:	f240 80bb 	bls.w	8516 <_ZN9ClearCore10UsbManager7RefreshEv+0x3b2>
    83a0:	426c      	negs	r4, r5
    83a2:	f014 0403 	ands.w	r4, r4, #3
    83a6:	f000 809e 	beq.w	84e6 <_ZN9ClearCore10UsbManager7RefreshEv+0x382>
            *outPtr++ = *inPtr++;
    83aa:	5d9b      	ldrb	r3, [r3, r6]
    83ac:	f880 30c0 	strb.w	r3, [r0, #192]	; 0xc0
    83b0:	2c01      	cmp	r4, #1
    83b2:	f100 06c1 	add.w	r6, r0, #193	; 0xc1
    83b6:	f107 0e01 	add.w	lr, r7, #1
    83ba:	f000 8096 	beq.w	84ea <_ZN9ClearCore10UsbManager7RefreshEv+0x386>
    83be:	787b      	ldrb	r3, [r7, #1]
    83c0:	f880 30c1 	strb.w	r3, [r0, #193]	; 0xc1
    83c4:	2c02      	cmp	r4, #2
    83c6:	f100 06c2 	add.w	r6, r0, #194	; 0xc2
    83ca:	f107 0e02 	add.w	lr, r7, #2
    83ce:	f000 808e 	beq.w	84ee <_ZN9ClearCore10UsbManager7RefreshEv+0x38a>
    83d2:	78bb      	ldrb	r3, [r7, #2]
    83d4:	f880 30c2 	strb.w	r3, [r0, #194]	; 0xc2
    83d8:	f107 0e03 	add.w	lr, r7, #3
    83dc:	f100 06c3 	add.w	r6, r0, #195	; 0xc3
        for (uint32_t iChar = 0; iChar < count; iChar++) {
    83e0:	f04f 0c03 	mov.w	ip, #3
    83e4:	1913      	adds	r3, r2, r4
    83e6:	4403      	add	r3, r0
    83e8:	f104 08c0 	add.w	r8, r4, #192	; 0xc0
            *outPtr++ = *inPtr++;
    83ec:	681a      	ldr	r2, [r3, #0]
    83ee:	f840 2008 	str.w	r2, [r0, r8]
    83f2:	1b0f      	subs	r7, r1, r4
    83f4:	1f3a      	subs	r2, r7, #4
    83f6:	0892      	lsrs	r2, r2, #2
    83f8:	eb00 0408 	add.w	r4, r0, r8
    83fc:	3201      	adds	r2, #1
    83fe:	f8d3 8004 	ldr.w	r8, [r3, #4]
    8402:	f8c4 8004 	str.w	r8, [r4, #4]
    8406:	2a02      	cmp	r2, #2
    8408:	ea4f 0882 	mov.w	r8, r2, lsl #2
    840c:	d04f      	beq.n	84ae <_ZN9ClearCore10UsbManager7RefreshEv+0x34a>
    840e:	f8d3 9008 	ldr.w	r9, [r3, #8]
    8412:	f8c4 9008 	str.w	r9, [r4, #8]
    8416:	2a03      	cmp	r2, #3
    8418:	d049      	beq.n	84ae <_ZN9ClearCore10UsbManager7RefreshEv+0x34a>
    841a:	f8d3 900c 	ldr.w	r9, [r3, #12]
    841e:	f8c4 900c 	str.w	r9, [r4, #12]
    8422:	2a04      	cmp	r2, #4
    8424:	d043      	beq.n	84ae <_ZN9ClearCore10UsbManager7RefreshEv+0x34a>
    8426:	f8d3 9010 	ldr.w	r9, [r3, #16]
    842a:	f8c4 9010 	str.w	r9, [r4, #16]
    842e:	2a05      	cmp	r2, #5
    8430:	d03d      	beq.n	84ae <_ZN9ClearCore10UsbManager7RefreshEv+0x34a>
    8432:	f8d3 9014 	ldr.w	r9, [r3, #20]
    8436:	f8c4 9014 	str.w	r9, [r4, #20]
    843a:	2a06      	cmp	r2, #6
    843c:	d037      	beq.n	84ae <_ZN9ClearCore10UsbManager7RefreshEv+0x34a>
    843e:	f8d3 9018 	ldr.w	r9, [r3, #24]
    8442:	f8c4 9018 	str.w	r9, [r4, #24]
    8446:	2a07      	cmp	r2, #7
    8448:	d031      	beq.n	84ae <_ZN9ClearCore10UsbManager7RefreshEv+0x34a>
    844a:	f8d3 901c 	ldr.w	r9, [r3, #28]
    844e:	f8c4 901c 	str.w	r9, [r4, #28]
    8452:	2a08      	cmp	r2, #8
    8454:	d02b      	beq.n	84ae <_ZN9ClearCore10UsbManager7RefreshEv+0x34a>
    8456:	f8d3 9020 	ldr.w	r9, [r3, #32]
    845a:	f8c4 9020 	str.w	r9, [r4, #32]
    845e:	2a09      	cmp	r2, #9
    8460:	d025      	beq.n	84ae <_ZN9ClearCore10UsbManager7RefreshEv+0x34a>
    8462:	f8d3 9024 	ldr.w	r9, [r3, #36]	; 0x24
    8466:	f8c4 9024 	str.w	r9, [r4, #36]	; 0x24
    846a:	2a0a      	cmp	r2, #10
    846c:	d01f      	beq.n	84ae <_ZN9ClearCore10UsbManager7RefreshEv+0x34a>
    846e:	f8d3 9028 	ldr.w	r9, [r3, #40]	; 0x28
    8472:	f8c4 9028 	str.w	r9, [r4, #40]	; 0x28
    8476:	2a0b      	cmp	r2, #11
    8478:	d019      	beq.n	84ae <_ZN9ClearCore10UsbManager7RefreshEv+0x34a>
    847a:	f8d3 902c 	ldr.w	r9, [r3, #44]	; 0x2c
    847e:	f8c4 902c 	str.w	r9, [r4, #44]	; 0x2c
    8482:	2a0c      	cmp	r2, #12
    8484:	d013      	beq.n	84ae <_ZN9ClearCore10UsbManager7RefreshEv+0x34a>
    8486:	f8d3 9030 	ldr.w	r9, [r3, #48]	; 0x30
    848a:	f8c4 9030 	str.w	r9, [r4, #48]	; 0x30
    848e:	2a0d      	cmp	r2, #13
    8490:	d00d      	beq.n	84ae <_ZN9ClearCore10UsbManager7RefreshEv+0x34a>
    8492:	f8d3 9034 	ldr.w	r9, [r3, #52]	; 0x34
    8496:	f8c4 9034 	str.w	r9, [r4, #52]	; 0x34
    849a:	2a0e      	cmp	r2, #14
    849c:	d007      	beq.n	84ae <_ZN9ClearCore10UsbManager7RefreshEv+0x34a>
    849e:	f8d3 9038 	ldr.w	r9, [r3, #56]	; 0x38
    84a2:	f8c4 9038 	str.w	r9, [r4, #56]	; 0x38
    84a6:	2a0f      	cmp	r2, #15
    84a8:	d001      	beq.n	84ae <_ZN9ClearCore10UsbManager7RefreshEv+0x34a>
    84aa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
    84ac:	63e3      	str	r3, [r4, #60]	; 0x3c
    84ae:	4547      	cmp	r7, r8
    84b0:	eb0c 0308 	add.w	r3, ip, r8
    84b4:	eb06 0408 	add.w	r4, r6, r8
    84b8:	eb0e 0c08 	add.w	ip, lr, r8
    84bc:	f43f af4b 	beq.w	8356 <_ZN9ClearCore10UsbManager7RefreshEv+0x1f2>
    84c0:	f81e 7022 	ldrb.w	r7, [lr, r2, lsl #2]
    84c4:	f806 7022 	strb.w	r7, [r6, r2, lsl #2]
        for (uint32_t iChar = 0; iChar < count; iChar++) {
    84c8:	1c5a      	adds	r2, r3, #1
    84ca:	4291      	cmp	r1, r2
    84cc:	f67f af43 	bls.w	8356 <_ZN9ClearCore10UsbManager7RefreshEv+0x1f2>
    84d0:	3302      	adds	r3, #2
            *outPtr++ = *inPtr++;
    84d2:	f89c 2001 	ldrb.w	r2, [ip, #1]
    84d6:	7062      	strb	r2, [r4, #1]
        for (uint32_t iChar = 0; iChar < count; iChar++) {
    84d8:	4299      	cmp	r1, r3
    84da:	f67f af3c 	bls.w	8356 <_ZN9ClearCore10UsbManager7RefreshEv+0x1f2>
            *outPtr++ = *inPtr++;
    84de:	f89c 3002 	ldrb.w	r3, [ip, #2]
    84e2:	70a3      	strb	r3, [r4, #2]
    84e4:	e737      	b.n	8356 <_ZN9ClearCore10UsbManager7RefreshEv+0x1f2>
    uint8_t *inPtr = m_bufferOut + head, *outPtr = m_usbWriteBuf;
    84e6:	46be      	mov	lr, r7
    84e8:	462e      	mov	r6, r5
        for (uint32_t iChar = 0; iChar < count; iChar++) {
    84ea:	46a4      	mov	ip, r4
    84ec:	e77a      	b.n	83e4 <_ZN9ClearCore10UsbManager7RefreshEv+0x280>
    84ee:	f04f 0c02 	mov.w	ip, #2
    84f2:	e777      	b.n	83e4 <_ZN9ClearCore10UsbManager7RefreshEv+0x280>
    uint8_t *inPtr = m_bufferOut + head, *outPtr = m_usbWriteBuf;
    84f4:	46b8      	mov	r8, r7
    84f6:	46ac      	mov	ip, r5
        for (uint32_t iChar = 0; iChar < loopEnd; iChar++) {
    84f8:	9401      	str	r4, [sp, #4]
    84fa:	e6a1      	b.n	8240 <_ZN9ClearCore10UsbManager7RefreshEv+0xdc>
    84fc:	2601      	movs	r6, #1
    84fe:	9601      	str	r6, [sp, #4]
    8500:	e69e      	b.n	8240 <_ZN9ClearCore10UsbManager7RefreshEv+0xdc>
        for (uint32_t iChar = 0; iChar < loopEnd; iChar++) {
    8502:	46a4      	mov	ip, r4
    8504:	46b9      	mov	r9, r7
    8506:	e6fa      	b.n	82fe <_ZN9ClearCore10UsbManager7RefreshEv+0x19a>
        atomic_clear_seqcst(&m_sendActive);
    8508:	f3bf 8f5b 	dmb	ish
    850c:	f880 2110 	strb.w	r2, [r0, #272]	; 0x110
    8510:	f3bf 8f5b 	dmb	ish
    8514:	e72b      	b.n	836e <_ZN9ClearCore10UsbManager7RefreshEv+0x20a>
    8516:	f100 03bf 	add.w	r3, r0, #191	; 0xbf
    851a:	187c      	adds	r4, r7, r1
            *outPtr++ = *inPtr++;
    851c:	f817 2b01 	ldrb.w	r2, [r7], #1
    8520:	f803 2f01 	strb.w	r2, [r3, #1]!
        for (uint32_t iChar = 0; iChar < count; iChar++) {
    8524:	42a7      	cmp	r7, r4
    8526:	d1f9      	bne.n	851c <_ZN9ClearCore10UsbManager7RefreshEv+0x3b8>
    8528:	e715      	b.n	8356 <_ZN9ClearCore10UsbManager7RefreshEv+0x1f2>
    852a:	3c01      	subs	r4, #1
    852c:	441a      	add	r2, r3
            *outPtr++ = *inPtr++;
    852e:	f813 6b01 	ldrb.w	r6, [r3], #1
    8532:	f804 6f01 	strb.w	r6, [r4, #1]!
        for (uint32_t iChar = 0; iChar < loopEnd; iChar++) {
    8536:	4293      	cmp	r3, r2
    8538:	d1f9      	bne.n	852e <_ZN9ClearCore10UsbManager7RefreshEv+0x3ca>
    853a:	e70c      	b.n	8356 <_ZN9ClearCore10UsbManager7RefreshEv+0x1f2>
    853c:	f100 04bf 	add.w	r4, r0, #191	; 0xbf
    8540:	eb07 0e02 	add.w	lr, r7, r2
            *outPtr++ = *inPtr++;
    8544:	f817 6b01 	ldrb.w	r6, [r7], #1
    8548:	f804 6f01 	strb.w	r6, [r4, #1]!
        for (uint32_t iChar = 0; iChar < loopEnd; iChar++) {
    854c:	45be      	cmp	lr, r7
    854e:	d1f9      	bne.n	8544 <_ZN9ClearCore10UsbManager7RefreshEv+0x3e0>
    8550:	e6a5      	b.n	829e <_ZN9ClearCore10UsbManager7RefreshEv+0x13a>
    uint8_t *inPtr = m_bufferOut + head, *outPtr = m_usbWriteBuf;
    8552:	462c      	mov	r4, r5
    8554:	e6a4      	b.n	82a0 <_ZN9ClearCore10UsbManager7RefreshEv+0x13c>
    8556:	bf00      	nop

00008558 <_GLOBAL__sub_I__ZN9ClearCore6UsbMgrE>:
        }
    }
    __enable_irq();
}

} // ClearCore namespace
    8558:	b508      	push	{r3, lr}
UsbManager &UsbMgr = UsbManager::Instance();
    855a:	f7fe ff85 	bl	7468 <_ZN9ClearCore10UsbManager8InstanceEv>
    855e:	4b01      	ldr	r3, [pc, #4]	; (8564 <_GLOBAL__sub_I__ZN9ClearCore6UsbMgrE+0xc>)
    8560:	6018      	str	r0, [r3, #0]
    8562:	bd08      	pop	{r3, pc}
    8564:	20000c04 	.word	0x20000c04

00008568 <_ZN9ClearCore10SerialBase5SpeedEv>:
    /**
        \copydoc ISerial::Speed()
    **/
    virtual uint32_t Speed() override {
        return m_baudRate;
    }
    8568:	6a40      	ldr	r0, [r0, #36]	; 0x24
    856a:	4770      	bx	lr

0000856c <_ZN9ClearCore10SerialBase6ParityEv>:

        \return Returns transmission format enumeration.
    **/
    Parities Parity() override {
        return m_parity;
    }
    856c:	7900      	ldrb	r0, [r0, #4]
    856e:	4770      	bx	lr

00008570 <_ZN9ClearCore10SerialBasecvbEv>:
    /**
        bool operator for compatibility with ISerial
    **/
    operator bool() override {
        return true;
    }
    8570:	2001      	movs	r0, #1
    8572:	4770      	bx	lr

00008574 <_ZN9ClearCore11MotorDriverC1Ev>:

    /**
        \brief Default constructor so this connector can be a global and
        constructed by SysManager.
    **/
    MotorDriver() {};
    8574:	b510      	push	{r4, lr}
    8576:	4604      	mov	r4, r0
    DigitalIn() {};
    8578:	f7fc fe12 	bl	51a0 <_ZN9ClearCore9ConnectorC1Ev>
    857c:	4620      	mov	r0, r4
    857e:	4b0c      	ldr	r3, [pc, #48]	; (85b0 <_ZN9ClearCore11MotorDriverC1Ev+0x3c>)
    8580:	f840 3b30 	str.w	r3, [r0], #48
    8584:	f004 f8fe 	bl	c784 <_ZN9ClearCore13StepGeneratorC1Ev>
    8588:	4a0a      	ldr	r2, [pc, #40]	; (85b4 <_ZN9ClearCore11MotorDriverC1Ev+0x40>)
    858a:	6022      	str	r2, [r4, #0]
            reg = 0;
    858c:	2300      	movs	r3, #0
    MotorDriver() {};
    858e:	323c      	adds	r2, #60	; 0x3c
            reg = 0;
    8590:	f8a4 30fc 	strh.w	r3, [r4, #252]	; 0xfc
            reg = 0;
    8594:	f8c4 3118 	str.w	r3, [r4, #280]	; 0x118
    8598:	f8c4 311c 	str.w	r3, [r4, #284]	; 0x11c
    859c:	f8c4 3120 	str.w	r3, [r4, #288]	; 0x120
    85a0:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
            reg = 0;
    85a4:	f8c4 3128 	str.w	r3, [r4, #296]	; 0x128
    MotorDriver() {};
    85a8:	6322      	str	r2, [r4, #48]	; 0x30
    85aa:	4620      	mov	r0, r4
    85ac:	bd10      	pop	{r4, pc}
    85ae:	bf00      	nop
    85b0:	000227e0 	.word	0x000227e0
    85b4:	0002282c 	.word	0x0002282c

000085b8 <_ZN9ClearCore10SysManagerC1Ev>:
};

/**
    Constructor
**/
SysManager::SysManager() : m_readyForOperations(false) {
    85b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    XBee = XBeeDriver(&XBee_CTS_IN, &XBee_RTS_OUT, &XBee_Rx_IN, &XBee_Tx_OUT,
    85bc:	4bbf      	ldr	r3, [pc, #764]	; (88bc <_ZN9ClearCore10SysManagerC1Ev+0x304>)
class SerialBase : public ISerial {
    85be:	f8df a340 	ldr.w	sl, [pc, #832]	; 8900 <_ZN9ClearCore10SysManagerC1Ev+0x348>
    85c2:	4abf      	ldr	r2, [pc, #764]	; (88c0 <_ZN9ClearCore10SysManagerC1Ev+0x308>)
    85c4:	49bf      	ldr	r1, [pc, #764]	; (88c4 <_ZN9ClearCore10SysManagerC1Ev+0x30c>)
    85c6:	4dc0      	ldr	r5, [pc, #768]	; (88c8 <_ZN9ClearCore10SysManagerC1Ev+0x310>)
SysManager::SysManager() : m_readyForOperations(false) {
    85c8:	b0df      	sub	sp, #380	; 0x17c
    XBee = XBeeDriver(&XBee_CTS_IN, &XBee_RTS_OUT, &XBee_Rx_IN, &XBee_Tx_OUT,
    85ca:	ac08      	add	r4, sp, #32
SysManager::SysManager() : m_readyForOperations(false) {
    85cc:	2700      	movs	r7, #0
    XBee = XBeeDriver(&XBee_CTS_IN, &XBee_RTS_OUT, &XBee_Rx_IN, &XBee_Tx_OUT,
    85ce:	f04f 0803 	mov.w	r8, #3
SysManager::SysManager() : m_readyForOperations(false) {
    85d2:	7007      	strb	r7, [r0, #0]
    85d4:	4681      	mov	r9, r0
    XBee = XBeeDriver(&XBee_CTS_IN, &XBee_RTS_OUT, &XBee_Rx_IN, &XBee_Tx_OUT,
    85d6:	e88d 0108 	stmia.w	sp, {r3, r8}
    85da:	4620      	mov	r0, r4
    85dc:	4bbb      	ldr	r3, [pc, #748]	; (88cc <_ZN9ClearCore10SysManagerC1Ev+0x314>)
    85de:	f009 fa83 	bl	11ae8 <_ZN9ClearCore10XBeeDriverC1EPK15PeripheralRouteS3_S3_S3_h>
    85e2:	68a1      	ldr	r1, [r4, #8]
    85e4:	6862      	ldr	r2, [r4, #4]
    85e6:	7b23      	ldrb	r3, [r4, #12]
    85e8:	f8ca 1008 	str.w	r1, [sl, #8]
    85ec:	f8ca 2004 	str.w	r2, [sl, #4]
    85f0:	6921      	ldr	r1, [r4, #16]
    85f2:	6962      	ldr	r2, [r4, #20]
    85f4:	f88a 300c 	strb.w	r3, [sl, #12]
    85f8:	69a3      	ldr	r3, [r4, #24]
    85fa:	f8ca 1010 	str.w	r1, [sl, #16]
    85fe:	f8ca 2014 	str.w	r2, [sl, #20]
    8602:	69e1      	ldr	r1, [r4, #28]
    8604:	6a22      	ldr	r2, [r4, #32]
    8606:	f8ca 3018 	str.w	r3, [sl, #24]
    860a:	6a63      	ldr	r3, [r4, #36]	; 0x24
    860c:	f8ca 101c 	str.w	r1, [sl, #28]
    8610:	f8ca 2020 	str.w	r2, [sl, #32]
    8614:	f894 1028 	ldrb.w	r1, [r4, #40]	; 0x28
    8618:	f894 2029 	ldrb.w	r2, [r4, #41]	; 0x29
    861c:	f8ca 3024 	str.w	r3, [sl, #36]	; 0x24
    8620:	f894 302a 	ldrb.w	r3, [r4, #42]	; 0x2a
    8624:	f88a 1028 	strb.w	r1, [sl, #40]	; 0x28
    8628:	2680      	movs	r6, #128	; 0x80
    862a:	8da1      	ldrh	r1, [r4, #44]	; 0x2c
    862c:	f88a 2029 	strb.w	r2, [sl, #41]	; 0x29
    8630:	f88a 302a 	strb.w	r3, [sl, #42]	; 0x2a
    8634:	f894 202e 	ldrb.w	r2, [r4, #46]	; 0x2e
    8638:	f894 302f 	ldrb.w	r3, [r4, #47]	; 0x2f
    863c:	f88a 302f 	strb.w	r3, [sl, #47]	; 0x2f
    8640:	f8aa 102c 	strh.w	r1, [sl, #44]	; 0x2c
    8644:	f88a 202e 	strb.w	r2, [sl, #46]	; 0x2e
    8648:	a914      	add	r1, sp, #80	; 0x50
    864a:	4632      	mov	r2, r6
    864c:	f10a 0030 	add.w	r0, sl, #48	; 0x30
    8650:	f015 fcb6 	bl	1dfc0 <memcpy>
    8654:	4632      	mov	r2, r6
    8656:	a934      	add	r1, sp, #208	; 0xd0
    8658:	f10a 00b0 	add.w	r0, sl, #176	; 0xb0
    865c:	f015 fcb0 	bl	1dfc0 <memcpy>
                      PER_SERCOM_ALT);
    SdCard = SdCardDriver(&MicroSD_MISO, &MicroSD_SS, &MicroSD_SCK,
    8660:	f8cd 8004 	str.w	r8, [sp, #4]
    8664:	499a      	ldr	r1, [pc, #616]	; (88d0 <_ZN9ClearCore10SysManagerC1Ev+0x318>)
    8666:	f8d4 3130 	ldr.w	r3, [r4, #304]	; 0x130
    866a:	f8d4 2134 	ldr.w	r2, [r4, #308]	; 0x134
    866e:	9100      	str	r1, [sp, #0]
    8670:	f8d4 1138 	ldr.w	r1, [r4, #312]	; 0x138
    8674:	f8ca 3130 	str.w	r3, [sl, #304]	; 0x130
    8678:	f8ca 2134 	str.w	r2, [sl, #308]	; 0x134
    867c:	f8d4 313c 	ldr.w	r3, [r4, #316]	; 0x13c
    8680:	f8d4 2140 	ldr.w	r2, [r4, #320]	; 0x140
    8684:	f8ca 1138 	str.w	r1, [sl, #312]	; 0x138
    8688:	f8ca 2140 	str.w	r2, [sl, #320]	; 0x140
    868c:	f8ca 313c 	str.w	r3, [sl, #316]	; 0x13c
    8690:	4620      	mov	r0, r4
    8692:	4b90      	ldr	r3, [pc, #576]	; (88d4 <_ZN9ClearCore10SysManagerC1Ev+0x31c>)
    8694:	4a90      	ldr	r2, [pc, #576]	; (88d8 <_ZN9ClearCore10SysManagerC1Ev+0x320>)
    8696:	4991      	ldr	r1, [pc, #580]	; (88dc <_ZN9ClearCore10SysManagerC1Ev+0x324>)
    8698:	f007 fd8c 	bl	101b4 <_ZN9ClearCore12SdCardDriverC1EPK15PeripheralRouteS3_S3_S3_h>
    869c:	6863      	ldr	r3, [r4, #4]
    869e:	606b      	str	r3, [r5, #4]
    86a0:	69a3      	ldr	r3, [r4, #24]
    86a2:	68a2      	ldr	r2, [r4, #8]
    86a4:	f894 e00c 	ldrb.w	lr, [r4, #12]
    86a8:	6920      	ldr	r0, [r4, #16]
    86aa:	61ab      	str	r3, [r5, #24]
    86ac:	69e3      	ldr	r3, [r4, #28]
    86ae:	60aa      	str	r2, [r5, #8]
    86b0:	f885 e00c 	strb.w	lr, [r5, #12]
    86b4:	6962      	ldr	r2, [r4, #20]
    86b6:	f894 e028 	ldrb.w	lr, [r4, #40]	; 0x28
    86ba:	6128      	str	r0, [r5, #16]
    86bc:	61eb      	str	r3, [r5, #28]
    86be:	6a20      	ldr	r0, [r4, #32]
    86c0:	f894 3029 	ldrb.w	r3, [r4, #41]	; 0x29
    86c4:	f894 c02a 	ldrb.w	ip, [r4, #42]	; 0x2a
    86c8:	616a      	str	r2, [r5, #20]
    86ca:	6228      	str	r0, [r5, #32]
    86cc:	6a62      	ldr	r2, [r4, #36]	; 0x24
    86ce:	8da0      	ldrh	r0, [r4, #44]	; 0x2c
    86d0:	f885 e028 	strb.w	lr, [r5, #40]	; 0x28
    86d4:	f885 3029 	strb.w	r3, [r5, #41]	; 0x29
    86d8:	f894 e02e 	ldrb.w	lr, [r4, #46]	; 0x2e
    86dc:	f894 302f 	ldrb.w	r3, [r4, #47]	; 0x2f
    86e0:	f885 c02a 	strb.w	ip, [r5, #42]	; 0x2a
    86e4:	f885 e02e 	strb.w	lr, [r5, #46]	; 0x2e
    86e8:	f885 302f 	strb.w	r3, [r5, #47]	; 0x2f
    86ec:	a914      	add	r1, sp, #80	; 0x50
    86ee:	626a      	str	r2, [r5, #36]	; 0x24
    86f0:	85a8      	strh	r0, [r5, #44]	; 0x2c
    86f2:	4632      	mov	r2, r6
    86f4:	f105 0030 	add.w	r0, r5, #48	; 0x30
    86f8:	f015 fc62 	bl	1dfc0 <memcpy>
    86fc:	4632      	mov	r2, r6
    86fe:	a934      	add	r1, sp, #208	; 0xd0
    8700:	f105 00b0 	add.w	r0, r5, #176	; 0xb0
    8704:	f015 fc5c 	bl	1dfc0 <memcpy>
    8708:	f504 7098 	add.w	r0, r4, #304	; 0x130
    870c:	c807      	ldmia	r0, {r0, r1, r2}
    870e:	f8d4 3140 	ldr.w	r3, [r4, #320]	; 0x140
    8712:	f8c5 3140 	str.w	r3, [r5, #320]	; 0x140
    8716:	f8d4 313c 	ldr.w	r3, [r4, #316]	; 0x13c
    871a:	f8c5 0130 	str.w	r0, [r5, #304]	; 0x130
class SdCardDriver : public SerialBase {
    871e:	f894 e144 	ldrb.w	lr, [r4, #324]	; 0x144
    8722:	f8c5 1134 	str.w	r1, [r5, #308]	; 0x134
                          &MicroSD_MOSI, PER_SERCOM_ALT);
    ConnectorLed = LedDriver(ShiftRegister::SR_LED_USB_MASK);
    8726:	4620      	mov	r0, r4
    8728:	f8c5 2138 	str.w	r2, [r5, #312]	; 0x138
    872c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
    8730:	f8c5 313c 	str.w	r3, [r5, #316]	; 0x13c

    ConnectorIO0 = DigitalInOutAnalogOut(ShiftRegister::SR_LED_IO_0_MASK,
    8734:	f04f 0a01 	mov.w	sl, #1
    8738:	f885 e144 	strb.w	lr, [r5, #324]	; 0x144
    ConnectorLed = LedDriver(ShiftRegister::SR_LED_USB_MASK);
    873c:	f009 f9c8 	bl	11ad0 <_ZN9ClearCore9LedDriverC1ENS_13ShiftRegister5MasksE>
    ConnectorIO0 = DigitalInOutAnalogOut(ShiftRegister::SR_LED_IO_0_MASK,
    8740:	4b67      	ldr	r3, [pc, #412]	; (88e0 <_ZN9ClearCore10SysManagerC1Ev+0x328>)
    8742:	79a2      	ldrb	r2, [r4, #6]
class Connector {
    8744:	f8b4 c004 	ldrh.w	ip, [r4, #4]
    8748:	4d66      	ldr	r5, [pc, #408]	; (88e4 <_ZN9ClearCore10SysManagerC1Ev+0x32c>)
    874a:	f8cd a004 	str.w	sl, [sp, #4]
    874e:	9300      	str	r3, [sp, #0]
    8750:	4631      	mov	r1, r6
    \brief ClearCore LED control class

    This class manages access to the LED shift register so LEDs may be
    controlled at the connector level.
**/
class LedDriver : public Connector {
    8752:	68a6      	ldr	r6, [r4, #8]
    8754:	71aa      	strb	r2, [r5, #6]
    8756:	f8a5 c004 	strh.w	ip, [r5, #4]
    875a:	60ae      	str	r6, [r5, #8]
    875c:	4620      	mov	r0, r4
    875e:	4b62      	ldr	r3, [pc, #392]	; (88e8 <_ZN9ClearCore10SysManagerC1Ev+0x330>)
    8760:	4a62      	ldr	r2, [pc, #392]	; (88ec <_ZN9ClearCore10SysManagerC1Ev+0x334>)
    8762:	4d63      	ldr	r5, [pc, #396]	; (88f0 <_ZN9ClearCore10SysManagerC1Ev+0x338>)
    8764:	f005 fc08 	bl	df78 <_ZN9ClearCore21DigitalInOutAnalogOutC1ENS_13ShiftRegister5MasksEPK15PeripheralRouteS5_S5_b>
class DigitalIn : public Connector {
    8768:	f104 000c 	add.w	r0, r4, #12
    876c:	c807      	ldmia	r0, {r0, r1, r2}
    876e:	f894 e006 	ldrb.w	lr, [r4, #6]
    8772:	68a3      	ldr	r3, [r4, #8]
    8774:	88a6      	ldrh	r6, [r4, #4]
    8776:	f885 e006 	strb.w	lr, [r5, #6]
    877a:	60ab      	str	r3, [r5, #8]
    877c:	f894 e018 	ldrb.w	lr, [r4, #24]
    8780:	69e3      	ldr	r3, [r4, #28]
    8782:	60e8      	str	r0, [r5, #12]
    8784:	6a20      	ldr	r0, [r4, #32]
    8786:	f894 c028 	ldrb.w	ip, [r4, #40]	; 0x28
    878a:	80ae      	strh	r6, [r5, #4]
    878c:	6129      	str	r1, [r5, #16]
    878e:	7e66      	ldrb	r6, [r4, #25]
    8790:	6a61      	ldr	r1, [r4, #36]	; 0x24
    8792:	616a      	str	r2, [r5, #20]
    8794:	f885 e018 	strb.w	lr, [r5, #24]
    - #ConnectorIO5

    For more detailed information on the ClearCore Connector interface, check
    out the \ref ConnectorMain informational page.
**/
class DigitalInOut : public DigitalIn {
    8798:	6b22      	ldr	r2, [r4, #48]	; 0x30
    879a:	f8d4 e02a 	ldr.w	lr, [r4, #42]	; 0x2a
    879e:	61eb      	str	r3, [r5, #28]
    87a0:	6228      	str	r0, [r5, #32]
    87a2:	6b63      	ldr	r3, [r4, #52]	; 0x34
    87a4:	6ba0      	ldr	r0, [r4, #56]	; 0x38
    87a6:	766e      	strb	r6, [r5, #25]
    87a8:	6269      	str	r1, [r5, #36]	; 0x24
    87aa:	f885 c028 	strb.w	ip, [r5, #40]	; 0x28
    87ae:	f8c5 e02a 	str.w	lr, [r5, #42]	; 0x2a
    87b2:	632a      	str	r2, [r5, #48]	; 0x30
    87b4:	63a8      	str	r0, [r5, #56]	; 0x38
    87b6:	636b      	str	r3, [r5, #52]	; 0x34
    87b8:	f894 303c 	ldrb.w	r3, [r4, #60]	; 0x3c
    87bc:	f894 003d 	ldrb.w	r0, [r4, #61]	; 0x3d
    87c0:	6c21      	ldr	r1, [r4, #64]	; 0x40
    87c2:	f894 e044 	ldrb.w	lr, [r4, #68]	; 0x44
    87c6:	f894 6045 	ldrb.w	r6, [r4, #69]	; 0x45
    87ca:	6ca2      	ldr	r2, [r4, #72]	; 0x48
    87cc:	f885 303c 	strb.w	r3, [r5, #60]	; 0x3c
    87d0:	f885 003d 	strb.w	r0, [r5, #61]	; 0x3d
    87d4:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
    87d6:	6d20      	ldr	r0, [r4, #80]	; 0x50
    87d8:	f894 c058 	ldrb.w	ip, [r4, #88]	; 0x58
    87dc:	f894 b05b 	ldrb.w	fp, [r4, #91]	; 0x5b
    87e0:	6429      	str	r1, [r5, #64]	; 0x40
    87e2:	f885 e044 	strb.w	lr, [r5, #68]	; 0x44
    87e6:	6d61      	ldr	r1, [r4, #84]	; 0x54
    87e8:	f894 e059 	ldrb.w	lr, [r4, #89]	; 0x59
    87ec:	f885 6045 	strb.w	r6, [r5, #69]	; 0x45
    87f0:	64aa      	str	r2, [r5, #72]	; 0x48
    87f2:	f894 605a 	ldrb.w	r6, [r4, #90]	; 0x5a
    - #ConnectorIO0

    For more detailed information on the ClearCore Connector interface, check
    out the \ref ConnectorMain informational page.
**/
class DigitalInOutAnalogOut : public DigitalInOut {
    87f6:	6e22      	ldr	r2, [r4, #96]	; 0x60
    87f8:	64eb      	str	r3, [r5, #76]	; 0x4c
    87fa:	6528      	str	r0, [r5, #80]	; 0x50
    87fc:	6e63      	ldr	r3, [r4, #100]	; 0x64
    87fe:	f8b4 005c 	ldrh.w	r0, [r4, #92]	; 0x5c
    8802:	f885 c058 	strb.w	ip, [r5, #88]	; 0x58
    8806:	f885 e059 	strb.w	lr, [r5, #89]	; 0x59
    880a:	f885 605a 	strb.w	r6, [r5, #90]	; 0x5a
    880e:	f885 b05b 	strb.w	fp, [r5, #91]	; 0x5b
    8812:	f8a5 005c 	strh.w	r0, [r5, #92]	; 0x5c
    8816:	662a      	str	r2, [r5, #96]	; 0x60
    8818:	666b      	str	r3, [r5, #100]	; 0x64
    881a:	6569      	str	r1, [r5, #84]	; 0x54
    881c:	6ea1      	ldr	r1, [r4, #104]	; 0x68
                                         &IN00n_Aout00n, &OUT00, &Aout00, true);
    ConnectorIO1 = DigitalInOut(ShiftRegister::SR_LED_IO_1_MASK, &IN01n,
    881e:	4b35      	ldr	r3, [pc, #212]	; (88f4 <_ZN9ClearCore10SysManagerC1Ev+0x33c>)
    8820:	f8cd a000 	str.w	sl, [sp]
    8824:	4620      	mov	r0, r4
    8826:	66a9      	str	r1, [r5, #104]	; 0x68
    8828:	4a33      	ldr	r2, [pc, #204]	; (88f8 <_ZN9ClearCore10SysManagerC1Ev+0x340>)
    882a:	4d34      	ldr	r5, [pc, #208]	; (88fc <_ZN9ClearCore10SysManagerC1Ev+0x344>)
    882c:	2140      	movs	r1, #64	; 0x40
    882e:	f006 f8a9 	bl	e984 <_ZN9ClearCore12DigitalInOutC1ENS_13ShiftRegister5MasksEPK15PeripheralRouteS5_b>
    8832:	f894 e006 	ldrb.w	lr, [r4, #6]
    8836:	68a2      	ldr	r2, [r4, #8]
    8838:	68e3      	ldr	r3, [r4, #12]
    883a:	88a6      	ldrh	r6, [r4, #4]
    883c:	6920      	ldr	r0, [r4, #16]
    883e:	6961      	ldr	r1, [r4, #20]
    8840:	f885 e006 	strb.w	lr, [r5, #6]
    8844:	60aa      	str	r2, [r5, #8]
    8846:	f894 e018 	ldrb.w	lr, [r4, #24]
    884a:	69e2      	ldr	r2, [r4, #28]
    884c:	60eb      	str	r3, [r5, #12]
    884e:	6a23      	ldr	r3, [r4, #32]
    8850:	f894 c028 	ldrb.w	ip, [r4, #40]	; 0x28
    8854:	80ae      	strh	r6, [r5, #4]
    8856:	6128      	str	r0, [r5, #16]
    8858:	7e66      	ldrb	r6, [r4, #25]
    885a:	6a60      	ldr	r0, [r4, #36]	; 0x24
    885c:	6169      	str	r1, [r5, #20]
    885e:	f885 e018 	strb.w	lr, [r5, #24]
    8862:	6b21      	ldr	r1, [r4, #48]	; 0x30
    8864:	f8d4 e02a 	ldr.w	lr, [r4, #42]	; 0x2a
    8868:	61ea      	str	r2, [r5, #28]
    886a:	622b      	str	r3, [r5, #32]
    886c:	6b62      	ldr	r2, [r4, #52]	; 0x34
    886e:	6ba3      	ldr	r3, [r4, #56]	; 0x38
    8870:	f885 c028 	strb.w	ip, [r5, #40]	; 0x28
    8874:	766e      	strb	r6, [r5, #25]
    8876:	6268      	str	r0, [r5, #36]	; 0x24
    8878:	6329      	str	r1, [r5, #48]	; 0x30
    887a:	636a      	str	r2, [r5, #52]	; 0x34
    887c:	63ab      	str	r3, [r5, #56]	; 0x38
    887e:	f8c5 e02a 	str.w	lr, [r5, #42]	; 0x2a
    8882:	f894 e03c 	ldrb.w	lr, [r4, #60]	; 0x3c
                                &OUT01, true);
    ConnectorIO2 = DigitalInOut(ShiftRegister::SR_LED_IO_2_MASK, &IN02n,
    8886:	f8cd a000 	str.w	sl, [sp]
    888a:	f894 6044 	ldrb.w	r6, [r4, #68]	; 0x44
    888e:	f894 103d 	ldrb.w	r1, [r4, #61]	; 0x3d
    8892:	6c22      	ldr	r2, [r4, #64]	; 0x40
    8894:	f885 e03c 	strb.w	lr, [r5, #60]	; 0x3c
    8898:	f885 6044 	strb.w	r6, [r5, #68]	; 0x44
    889c:	f894 e045 	ldrb.w	lr, [r4, #69]	; 0x45
    88a0:	6d26      	ldr	r6, [r4, #80]	; 0x50
    88a2:	f885 103d 	strb.w	r1, [r5, #61]	; 0x3d
    88a6:	642a      	str	r2, [r5, #64]	; 0x40
    88a8:	6ca1      	ldr	r1, [r4, #72]	; 0x48
    88aa:	6ce2      	ldr	r2, [r4, #76]	; 0x4c
    88ac:	f885 e045 	strb.w	lr, [r5, #69]	; 0x45
    88b0:	652e      	str	r6, [r5, #80]	; 0x50
    88b2:	f894 e058 	ldrb.w	lr, [r4, #88]	; 0x58
    88b6:	6d66      	ldr	r6, [r4, #84]	; 0x54
    88b8:	64a9      	str	r1, [r5, #72]	; 0x48
    88ba:	e023      	b.n	8904 <_ZN9ClearCore10SysManagerC1Ev+0x34c>
    88bc:	00022ba0 	.word	0x00022ba0
    88c0:	00022c00 	.word	0x00022c00
    88c4:	00022b90 	.word	0x00022b90
    88c8:	200019b4 	.word	0x200019b4
    88cc:	00022ac0 	.word	0x00022ac0
    88d0:	00022be0 	.word	0x00022be0
    88d4:	00022b80 	.word	0x00022b80
    88d8:	00022ab0 	.word	0x00022ab0
    88dc:	00022bd0 	.word	0x00022bd0
    88e0:	00022da0 	.word	0x00022da0
    88e4:	200015a4 	.word	0x200015a4
    88e8:	00022d60 	.word	0x00022d60
    88ec:	00022c30 	.word	0x00022c30
    88f0:	20001310 	.word	0x20001310
    88f4:	00022d70 	.word	0x00022d70
    88f8:	00022d10 	.word	0x00022d10
    88fc:	2000137c 	.word	0x2000137c
    8900:	20001870 	.word	0x20001870
    8904:	64ea      	str	r2, [r5, #76]	; 0x4c
    8906:	f894 105a 	ldrb.w	r1, [r4, #90]	; 0x5a
    890a:	f894 2059 	ldrb.w	r2, [r4, #89]	; 0x59
    890e:	656e      	str	r6, [r5, #84]	; 0x54
    8910:	f885 e058 	strb.w	lr, [r5, #88]	; 0x58
    8914:	f894 605b 	ldrb.w	r6, [r4, #91]	; 0x5b
    8918:	f8b4 e05c 	ldrh.w	lr, [r4, #92]	; 0x5c
    891c:	f885 2059 	strb.w	r2, [r5, #89]	; 0x59
    8920:	f885 105a 	strb.w	r1, [r5, #90]	; 0x5a
    8924:	f885 605b 	strb.w	r6, [r5, #91]	; 0x5b
    8928:	f8a5 e05c 	strh.w	lr, [r5, #92]	; 0x5c
    892c:	4620      	mov	r0, r4
    892e:	4db9      	ldr	r5, [pc, #740]	; (8c14 <_ZN9ClearCore10SysManagerC1Ev+0x65c>)
    8930:	4bb9      	ldr	r3, [pc, #740]	; (8c18 <_ZN9ClearCore10SysManagerC1Ev+0x660>)
    8932:	4aba      	ldr	r2, [pc, #744]	; (8c1c <_ZN9ClearCore10SysManagerC1Ev+0x664>)
    8934:	2120      	movs	r1, #32
    8936:	f006 f825 	bl	e984 <_ZN9ClearCore12DigitalInOutC1ENS_13ShiftRegister5MasksEPK15PeripheralRouteS5_b>
    893a:	f894 e006 	ldrb.w	lr, [r4, #6]
    893e:	68a2      	ldr	r2, [r4, #8]
    8940:	68e3      	ldr	r3, [r4, #12]
    8942:	88a6      	ldrh	r6, [r4, #4]
    8944:	6920      	ldr	r0, [r4, #16]
    8946:	6961      	ldr	r1, [r4, #20]
    8948:	f885 e006 	strb.w	lr, [r5, #6]
    894c:	60aa      	str	r2, [r5, #8]
    894e:	f894 e018 	ldrb.w	lr, [r4, #24]
    8952:	69e2      	ldr	r2, [r4, #28]
    8954:	60eb      	str	r3, [r5, #12]
    8956:	6a23      	ldr	r3, [r4, #32]
    8958:	f894 c028 	ldrb.w	ip, [r4, #40]	; 0x28
    895c:	80ae      	strh	r6, [r5, #4]
    895e:	6128      	str	r0, [r5, #16]
    8960:	7e66      	ldrb	r6, [r4, #25]
    8962:	6a60      	ldr	r0, [r4, #36]	; 0x24
    8964:	6169      	str	r1, [r5, #20]
    8966:	f885 e018 	strb.w	lr, [r5, #24]
    896a:	6b21      	ldr	r1, [r4, #48]	; 0x30
    896c:	f8d4 e02a 	ldr.w	lr, [r4, #42]	; 0x2a
    8970:	61ea      	str	r2, [r5, #28]
    8972:	622b      	str	r3, [r5, #32]
    8974:	6b62      	ldr	r2, [r4, #52]	; 0x34
    8976:	6ba3      	ldr	r3, [r4, #56]	; 0x38
    8978:	f885 c028 	strb.w	ip, [r5, #40]	; 0x28
    897c:	766e      	strb	r6, [r5, #25]
    897e:	6268      	str	r0, [r5, #36]	; 0x24
    8980:	6329      	str	r1, [r5, #48]	; 0x30
    8982:	636a      	str	r2, [r5, #52]	; 0x34
    8984:	63ab      	str	r3, [r5, #56]	; 0x38
    8986:	f8c5 e02a 	str.w	lr, [r5, #42]	; 0x2a
    898a:	f894 e03c 	ldrb.w	lr, [r4, #60]	; 0x3c
                                &OUT02, true);
    ConnectorIO3 = DigitalInOut(ShiftRegister::SR_LED_IO_3_MASK, &IN03n,
    898e:	f8cd a000 	str.w	sl, [sp]
    8992:	f894 6044 	ldrb.w	r6, [r4, #68]	; 0x44
    8996:	f894 103d 	ldrb.w	r1, [r4, #61]	; 0x3d
    899a:	6c22      	ldr	r2, [r4, #64]	; 0x40
    899c:	f885 e03c 	strb.w	lr, [r5, #60]	; 0x3c
    89a0:	f885 6044 	strb.w	r6, [r5, #68]	; 0x44
    89a4:	f894 e045 	ldrb.w	lr, [r4, #69]	; 0x45
    89a8:	6d26      	ldr	r6, [r4, #80]	; 0x50
    89aa:	f885 103d 	strb.w	r1, [r5, #61]	; 0x3d
    89ae:	642a      	str	r2, [r5, #64]	; 0x40
    89b0:	6ca1      	ldr	r1, [r4, #72]	; 0x48
    89b2:	6ce2      	ldr	r2, [r4, #76]	; 0x4c
    89b4:	f885 e045 	strb.w	lr, [r5, #69]	; 0x45
    89b8:	652e      	str	r6, [r5, #80]	; 0x50
    89ba:	f894 e058 	ldrb.w	lr, [r4, #88]	; 0x58
    89be:	6d66      	ldr	r6, [r4, #84]	; 0x54
    89c0:	64a9      	str	r1, [r5, #72]	; 0x48
    89c2:	64ea      	str	r2, [r5, #76]	; 0x4c
    89c4:	f894 105a 	ldrb.w	r1, [r4, #90]	; 0x5a
    89c8:	f894 2059 	ldrb.w	r2, [r4, #89]	; 0x59
    89cc:	656e      	str	r6, [r5, #84]	; 0x54
    89ce:	f885 e058 	strb.w	lr, [r5, #88]	; 0x58
    89d2:	f894 605b 	ldrb.w	r6, [r4, #91]	; 0x5b
    89d6:	f8b4 e05c 	ldrh.w	lr, [r4, #92]	; 0x5c
    89da:	f885 2059 	strb.w	r2, [r5, #89]	; 0x59
    89de:	f885 105a 	strb.w	r1, [r5, #90]	; 0x5a
    89e2:	f885 605b 	strb.w	r6, [r5, #91]	; 0x5b
    89e6:	f8a5 e05c 	strh.w	lr, [r5, #92]	; 0x5c
    89ea:	4620      	mov	r0, r4
    89ec:	4d8c      	ldr	r5, [pc, #560]	; (8c20 <_ZN9ClearCore10SysManagerC1Ev+0x668>)
    89ee:	4b8d      	ldr	r3, [pc, #564]	; (8c24 <_ZN9ClearCore10SysManagerC1Ev+0x66c>)
    89f0:	4a8d      	ldr	r2, [pc, #564]	; (8c28 <_ZN9ClearCore10SysManagerC1Ev+0x670>)
    89f2:	2110      	movs	r1, #16
    89f4:	f005 ffc6 	bl	e984 <_ZN9ClearCore12DigitalInOutC1ENS_13ShiftRegister5MasksEPK15PeripheralRouteS5_b>
    89f8:	f8b4 e004 	ldrh.w	lr, [r4, #4]
    89fc:	68a2      	ldr	r2, [r4, #8]
    89fe:	68e3      	ldr	r3, [r4, #12]
    8a00:	79a6      	ldrb	r6, [r4, #6]
    8a02:	6920      	ldr	r0, [r4, #16]
    8a04:	6961      	ldr	r1, [r4, #20]
    8a06:	f8a5 e004 	strh.w	lr, [r5, #4]
    8a0a:	60aa      	str	r2, [r5, #8]
    8a0c:	f894 e018 	ldrb.w	lr, [r4, #24]
    8a10:	69e2      	ldr	r2, [r4, #28]
    8a12:	60eb      	str	r3, [r5, #12]
    8a14:	6a23      	ldr	r3, [r4, #32]
    8a16:	f894 c028 	ldrb.w	ip, [r4, #40]	; 0x28
    8a1a:	71ae      	strb	r6, [r5, #6]
    8a1c:	6128      	str	r0, [r5, #16]
    8a1e:	7e66      	ldrb	r6, [r4, #25]
    8a20:	6a60      	ldr	r0, [r4, #36]	; 0x24
    8a22:	6169      	str	r1, [r5, #20]
    8a24:	f885 e018 	strb.w	lr, [r5, #24]
    8a28:	6b21      	ldr	r1, [r4, #48]	; 0x30
    8a2a:	f8d4 e02a 	ldr.w	lr, [r4, #42]	; 0x2a
    8a2e:	61ea      	str	r2, [r5, #28]
    8a30:	622b      	str	r3, [r5, #32]
    8a32:	6b62      	ldr	r2, [r4, #52]	; 0x34
    8a34:	6ba3      	ldr	r3, [r4, #56]	; 0x38
    8a36:	766e      	strb	r6, [r5, #25]
    8a38:	6268      	str	r0, [r5, #36]	; 0x24
    8a3a:	f885 c028 	strb.w	ip, [r5, #40]	; 0x28
    8a3e:	f8c5 e02a 	str.w	lr, [r5, #42]	; 0x2a
    8a42:	636a      	str	r2, [r5, #52]	; 0x34
    8a44:	63ab      	str	r3, [r5, #56]	; 0x38
    8a46:	6329      	str	r1, [r5, #48]	; 0x30
    8a48:	f894 103c 	ldrb.w	r1, [r4, #60]	; 0x3c
    8a4c:	f885 103c 	strb.w	r1, [r5, #60]	; 0x3c
    8a50:	f894 203d 	ldrb.w	r2, [r4, #61]	; 0x3d
    8a54:	6c23      	ldr	r3, [r4, #64]	; 0x40
    8a56:	f894 c044 	ldrb.w	ip, [r4, #68]	; 0x44
    8a5a:	f894 0045 	ldrb.w	r0, [r4, #69]	; 0x45
                                &OUT03, true);

    ConnectorIO4 = DigitalInOutHBridge(ShiftRegister::SR_LED_IO_4_MASK, &IN04n,
    8a5e:	9703      	str	r7, [sp, #12]
    8a60:	6ca1      	ldr	r1, [r4, #72]	; 0x48
    8a62:	f885 203d 	strb.w	r2, [r5, #61]	; 0x3d
    8a66:	642b      	str	r3, [r5, #64]	; 0x40
    8a68:	6ce2      	ldr	r2, [r4, #76]	; 0x4c
    8a6a:	6d23      	ldr	r3, [r4, #80]	; 0x50
    8a6c:	64a9      	str	r1, [r5, #72]	; 0x48
    8a6e:	f894 1058 	ldrb.w	r1, [r4, #88]	; 0x58
    8a72:	f885 c044 	strb.w	ip, [r5, #68]	; 0x44
    8a76:	f885 0045 	strb.w	r0, [r5, #69]	; 0x45
    8a7a:	f894 c059 	ldrb.w	ip, [r4, #89]	; 0x59
    8a7e:	6d60      	ldr	r0, [r4, #84]	; 0x54
    8a80:	64ea      	str	r2, [r5, #76]	; 0x4c
    8a82:	652b      	str	r3, [r5, #80]	; 0x50
    8a84:	f894 205b 	ldrb.w	r2, [r4, #91]	; 0x5b
    8a88:	f894 305a 	ldrb.w	r3, [r4, #90]	; 0x5a
    8a8c:	f885 1058 	strb.w	r1, [r5, #88]	; 0x58
    8a90:	f8b4 105c 	ldrh.w	r1, [r4, #92]	; 0x5c
    8a94:	6568      	str	r0, [r5, #84]	; 0x54
    8a96:	f885 c059 	strb.w	ip, [r5, #89]	; 0x59
    8a9a:	f885 305a 	strb.w	r3, [r5, #90]	; 0x5a
    8a9e:	f885 205b 	strb.w	r2, [r5, #91]	; 0x5b
    8aa2:	f8a5 105c 	strh.w	r1, [r5, #92]	; 0x5c
    8aa6:	f04f 0e68 	mov.w	lr, #104	; 0x68
    8aaa:	4d60      	ldr	r5, [pc, #384]	; (8c2c <_ZN9ClearCore10SysManagerC1Ev+0x674>)
    8aac:	f8df c19c 	ldr.w	ip, [pc, #412]	; 8c4c <_ZN9ClearCore10SysManagerC1Ev+0x694>
    8ab0:	4e5f      	ldr	r6, [pc, #380]	; (8c30 <_ZN9ClearCore10SysManagerC1Ev+0x678>)
    8ab2:	4b60      	ldr	r3, [pc, #384]	; (8c34 <_ZN9ClearCore10SysManagerC1Ev+0x67c>)
    8ab4:	4a60      	ldr	r2, [pc, #384]	; (8c38 <_ZN9ClearCore10SysManagerC1Ev+0x680>)
    8ab6:	f8cd e008 	str.w	lr, [sp, #8]
    8aba:	4620      	mov	r0, r4
    8abc:	2108      	movs	r1, #8
    8abe:	9601      	str	r6, [sp, #4]
    8ac0:	f8cd c000 	str.w	ip, [sp]
    8ac4:	f006 f8fe 	bl	ecc4 <_ZN9ClearCore19DigitalInOutHBridgeC1ENS_13ShiftRegister5MasksEPK15PeripheralRouteS5_S5_S5_4IRQnb>
    8ac8:	f8b4 e004 	ldrh.w	lr, [r4, #4]
    8acc:	68a2      	ldr	r2, [r4, #8]
    8ace:	68e3      	ldr	r3, [r4, #12]
    8ad0:	79a6      	ldrb	r6, [r4, #6]
    8ad2:	6920      	ldr	r0, [r4, #16]
    8ad4:	6961      	ldr	r1, [r4, #20]
    8ad6:	f8a5 e004 	strh.w	lr, [r5, #4]
    8ada:	60aa      	str	r2, [r5, #8]
    8adc:	f894 e018 	ldrb.w	lr, [r4, #24]
    8ae0:	69e2      	ldr	r2, [r4, #28]
    8ae2:	60eb      	str	r3, [r5, #12]
    8ae4:	6a23      	ldr	r3, [r4, #32]
    8ae6:	f894 c028 	ldrb.w	ip, [r4, #40]	; 0x28
    8aea:	71ae      	strb	r6, [r5, #6]
    8aec:	6128      	str	r0, [r5, #16]
    8aee:	7e66      	ldrb	r6, [r4, #25]
    8af0:	6a60      	ldr	r0, [r4, #36]	; 0x24
    8af2:	6169      	str	r1, [r5, #20]
    8af4:	f885 e018 	strb.w	lr, [r5, #24]
    8af8:	6b21      	ldr	r1, [r4, #48]	; 0x30
    8afa:	f8d4 e02a 	ldr.w	lr, [r4, #42]	; 0x2a
    8afe:	61ea      	str	r2, [r5, #28]
    8b00:	622b      	str	r3, [r5, #32]
    8b02:	6b62      	ldr	r2, [r4, #52]	; 0x34
    8b04:	6ba3      	ldr	r3, [r4, #56]	; 0x38
    8b06:	766e      	strb	r6, [r5, #25]
    8b08:	f885 c028 	strb.w	ip, [r5, #40]	; 0x28
    8b0c:	f8c5 e02a 	str.w	lr, [r5, #42]	; 0x2a
    8b10:	6329      	str	r1, [r5, #48]	; 0x30
    8b12:	636a      	str	r2, [r5, #52]	; 0x34
    8b14:	63ab      	str	r3, [r5, #56]	; 0x38
    8b16:	6268      	str	r0, [r5, #36]	; 0x24
    8b18:	f894 003c 	ldrb.w	r0, [r4, #60]	; 0x3c
    8b1c:	f894 2044 	ldrb.w	r2, [r4, #68]	; 0x44
    8b20:	f894 103d 	ldrb.w	r1, [r4, #61]	; 0x3d
    8b24:	6c23      	ldr	r3, [r4, #64]	; 0x40
    8b26:	f885 003c 	strb.w	r0, [r5, #60]	; 0x3c
    8b2a:	f885 2044 	strb.w	r2, [r5, #68]	; 0x44
    8b2e:	6ca0      	ldr	r0, [r4, #72]	; 0x48
    8b30:	6d22      	ldr	r2, [r4, #80]	; 0x50
    8b32:	f894 6045 	ldrb.w	r6, [r4, #69]	; 0x45
    8b36:	f885 103d 	strb.w	r1, [r5, #61]	; 0x3d
    8b3a:	642b      	str	r3, [r5, #64]	; 0x40
    8b3c:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
    8b3e:	6d63      	ldr	r3, [r4, #84]	; 0x54
    8b40:	64a8      	str	r0, [r5, #72]	; 0x48
    8b42:	652a      	str	r2, [r5, #80]	; 0x50
    8b44:	f894 0059 	ldrb.w	r0, [r4, #89]	; 0x59
    8b48:	f894 205a 	ldrb.w	r2, [r4, #90]	; 0x5a
    8b4c:	f885 6045 	strb.w	r6, [r5, #69]	; 0x45
    8b50:	64e9      	str	r1, [r5, #76]	; 0x4c
    8b52:	f894 6058 	ldrb.w	r6, [r4, #88]	; 0x58
    8b56:	f8b4 105c 	ldrh.w	r1, [r4, #92]	; 0x5c
    8b5a:	656b      	str	r3, [r5, #84]	; 0x54
    8b5c:	f885 0059 	strb.w	r0, [r5, #89]	; 0x59
    8b60:	f894 305b 	ldrb.w	r3, [r4, #91]	; 0x5b
class DigitalInOutHBridge : public DigitalInOut {
    8b64:	f8b4 005e 	ldrh.w	r0, [r4, #94]	; 0x5e
    8b68:	f885 205a 	strb.w	r2, [r5, #90]	; 0x5a
                                       &OUT04_ENABLE04, &Polarity04_PWM04A,
                                       &Polarity04S_PWM04B, TCC4_0_IRQn, false);
    ConnectorIO5 = DigitalInOutHBridge(ShiftRegister::SR_LED_IO_5_MASK, &IN05n,
    8b6c:	f04f 0c65 	mov.w	ip, #101	; 0x65
    8b70:	f8b4 2060 	ldrh.w	r2, [r4, #96]	; 0x60
    8b74:	f885 305b 	strb.w	r3, [r5, #91]	; 0x5b
    8b78:	f8a5 105c 	strh.w	r1, [r5, #92]	; 0x5c
    8b7c:	f8a5 005e 	strh.w	r0, [r5, #94]	; 0x5e
    8b80:	f8a5 2060 	strh.w	r2, [r5, #96]	; 0x60
    8b84:	f8df e0c8 	ldr.w	lr, [pc, #200]	; 8c50 <_ZN9ClearCore10SysManagerC1Ev+0x698>
    8b88:	f885 6058 	strb.w	r6, [r5, #88]	; 0x58
    8b8c:	f8b4 6062 	ldrh.w	r6, [r4, #98]	; 0x62
    8b90:	9703      	str	r7, [sp, #12]
    8b92:	f8cd c008 	str.w	ip, [sp, #8]
    8b96:	6e61      	ldr	r1, [r4, #100]	; 0x64
    8b98:	4b28      	ldr	r3, [pc, #160]	; (8c3c <_ZN9ClearCore10SysManagerC1Ev+0x684>)
    8b9a:	f8cd e004 	str.w	lr, [sp, #4]
    8b9e:	6ea2      	ldr	r2, [r4, #104]	; 0x68
    8ba0:	9300      	str	r3, [sp, #0]
    8ba2:	f894 e070 	ldrb.w	lr, [r4, #112]	; 0x70
    8ba6:	f8a5 6062 	strh.w	r6, [r5, #98]	; 0x62
    8baa:	6f66      	ldr	r6, [r4, #116]	; 0x74
    8bac:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
    8bae:	f8b4 c080 	ldrh.w	ip, [r4, #128]	; 0x80
    8bb2:	6669      	str	r1, [r5, #100]	; 0x64
    8bb4:	66aa      	str	r2, [r5, #104]	; 0x68
    8bb6:	6fa1      	ldr	r1, [r4, #120]	; 0x78
    8bb8:	6fe2      	ldr	r2, [r4, #124]	; 0x7c
    8bba:	f885 e070 	strb.w	lr, [r5, #112]	; 0x70
    8bbe:	676e      	str	r6, [r5, #116]	; 0x74
    8bc0:	f894 e082 	ldrb.w	lr, [r4, #130]	; 0x82
    8bc4:	f894 6083 	ldrb.w	r6, [r4, #131]	; 0x83
    8bc8:	66eb      	str	r3, [r5, #108]	; 0x6c
    8bca:	67a9      	str	r1, [r5, #120]	; 0x78
    8bcc:	67ea      	str	r2, [r5, #124]	; 0x7c
    8bce:	f8a5 c080 	strh.w	ip, [r5, #128]	; 0x80
    8bd2:	f885 e082 	strb.w	lr, [r5, #130]	; 0x82
    8bd6:	f885 6083 	strb.w	r6, [r5, #131]	; 0x83
    8bda:	4620      	mov	r0, r4
    8bdc:	4b18      	ldr	r3, [pc, #96]	; (8c40 <_ZN9ClearCore10SysManagerC1Ev+0x688>)
    8bde:	4a19      	ldr	r2, [pc, #100]	; (8c44 <_ZN9ClearCore10SysManagerC1Ev+0x68c>)
    8be0:	4d19      	ldr	r5, [pc, #100]	; (8c48 <_ZN9ClearCore10SysManagerC1Ev+0x690>)
    8be2:	2104      	movs	r1, #4
    8be4:	f006 f86e 	bl	ecc4 <_ZN9ClearCore19DigitalInOutHBridgeC1ENS_13ShiftRegister5MasksEPK15PeripheralRouteS5_S5_S5_4IRQnb>
    8be8:	f104 000c 	add.w	r0, r4, #12
    8bec:	c807      	ldmia	r0, {r0, r1, r2}
    8bee:	f8b4 e004 	ldrh.w	lr, [r4, #4]
    8bf2:	68a3      	ldr	r3, [r4, #8]
    8bf4:	79a6      	ldrb	r6, [r4, #6]
    8bf6:	f8a5 e004 	strh.w	lr, [r5, #4]
    8bfa:	60ab      	str	r3, [r5, #8]
    8bfc:	f894 e018 	ldrb.w	lr, [r4, #24]
    8c00:	69e3      	ldr	r3, [r4, #28]
    8c02:	60e8      	str	r0, [r5, #12]
    8c04:	6a20      	ldr	r0, [r4, #32]
    8c06:	f894 c028 	ldrb.w	ip, [r4, #40]	; 0x28
    8c0a:	71ae      	strb	r6, [r5, #6]
    8c0c:	6129      	str	r1, [r5, #16]
    8c0e:	7e66      	ldrb	r6, [r4, #25]
    8c10:	6a61      	ldr	r1, [r4, #36]	; 0x24
    8c12:	e01f      	b.n	8c54 <_ZN9ClearCore10SysManagerC1Ev+0x69c>
    8c14:	200013dc 	.word	0x200013dc
    8c18:	00022d80 	.word	0x00022d80
    8c1c:	00022d20 	.word	0x00022d20
    8c20:	2000143c 	.word	0x2000143c
    8c24:	00022d90 	.word	0x00022d90
    8c28:	00022d30 	.word	0x00022d30
    8c2c:	2000149c 	.word	0x2000149c
    8c30:	00022cb0 	.word	0x00022cb0
    8c34:	00022c50 	.word	0x00022c50
    8c38:	00022d40 	.word	0x00022d40
    8c3c:	00022c80 	.word	0x00022c80
    8c40:	00022c60 	.word	0x00022c60
    8c44:	00022d50 	.word	0x00022d50
    8c48:	20001520 	.word	0x20001520
    8c4c:	00022c70 	.word	0x00022c70
    8c50:	00022cc0 	.word	0x00022cc0
    8c54:	616a      	str	r2, [r5, #20]
    8c56:	f885 e018 	strb.w	lr, [r5, #24]
    8c5a:	6b22      	ldr	r2, [r4, #48]	; 0x30
    8c5c:	f8d4 e02a 	ldr.w	lr, [r4, #42]	; 0x2a
    8c60:	61eb      	str	r3, [r5, #28]
    8c62:	6228      	str	r0, [r5, #32]
    8c64:	6b63      	ldr	r3, [r4, #52]	; 0x34
    8c66:	6ba0      	ldr	r0, [r4, #56]	; 0x38
    8c68:	766e      	strb	r6, [r5, #25]
    8c6a:	6269      	str	r1, [r5, #36]	; 0x24
    8c6c:	f885 c028 	strb.w	ip, [r5, #40]	; 0x28
    8c70:	f8c5 e02a 	str.w	lr, [r5, #42]	; 0x2a
    8c74:	632a      	str	r2, [r5, #48]	; 0x30
    8c76:	63a8      	str	r0, [r5, #56]	; 0x38
    8c78:	636b      	str	r3, [r5, #52]	; 0x34
    8c7a:	f894 303c 	ldrb.w	r3, [r4, #60]	; 0x3c
    8c7e:	f894 003d 	ldrb.w	r0, [r4, #61]	; 0x3d
    8c82:	6c21      	ldr	r1, [r4, #64]	; 0x40
    8c84:	f894 e044 	ldrb.w	lr, [r4, #68]	; 0x44
    8c88:	f894 6045 	ldrb.w	r6, [r4, #69]	; 0x45
    8c8c:	6ca2      	ldr	r2, [r4, #72]	; 0x48
    8c8e:	f885 303c 	strb.w	r3, [r5, #60]	; 0x3c
    8c92:	f885 003d 	strb.w	r0, [r5, #61]	; 0x3d
    8c96:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
    8c98:	6d20      	ldr	r0, [r4, #80]	; 0x50
    8c9a:	f894 c058 	ldrb.w	ip, [r4, #88]	; 0x58
    8c9e:	f894 b05b 	ldrb.w	fp, [r4, #91]	; 0x5b
    8ca2:	6429      	str	r1, [r5, #64]	; 0x40
    8ca4:	f885 e044 	strb.w	lr, [r5, #68]	; 0x44
    8ca8:	6d61      	ldr	r1, [r4, #84]	; 0x54
    8caa:	f894 e059 	ldrb.w	lr, [r4, #89]	; 0x59
    8cae:	f885 6045 	strb.w	r6, [r5, #69]	; 0x45
    8cb2:	64aa      	str	r2, [r5, #72]	; 0x48
    8cb4:	f894 605a 	ldrb.w	r6, [r4, #90]	; 0x5a
    8cb8:	f8b4 205e 	ldrh.w	r2, [r4, #94]	; 0x5e
    8cbc:	64eb      	str	r3, [r5, #76]	; 0x4c
    8cbe:	6528      	str	r0, [r5, #80]	; 0x50
    8cc0:	f8b4 3060 	ldrh.w	r3, [r4, #96]	; 0x60
    8cc4:	f8b4 005c 	ldrh.w	r0, [r4, #92]	; 0x5c
    8cc8:	6569      	str	r1, [r5, #84]	; 0x54
    8cca:	f885 c058 	strb.w	ip, [r5, #88]	; 0x58
    8cce:	f885 e059 	strb.w	lr, [r5, #89]	; 0x59
    8cd2:	f885 b05b 	strb.w	fp, [r5, #91]	; 0x5b
    8cd6:	f8a5 005c 	strh.w	r0, [r5, #92]	; 0x5c
    8cda:	f8a5 205e 	strh.w	r2, [r5, #94]	; 0x5e
    8cde:	f8a5 3060 	strh.w	r3, [r5, #96]	; 0x60
    8ce2:	f885 605a 	strb.w	r6, [r5, #90]	; 0x5a
    8ce6:	f8b4 6062 	ldrh.w	r6, [r4, #98]	; 0x62
    8cea:	6e61      	ldr	r1, [r4, #100]	; 0x64
    8cec:	6ea3      	ldr	r3, [r4, #104]	; 0x68
    8cee:	6ee0      	ldr	r0, [r4, #108]	; 0x6c
    8cf0:	f894 e070 	ldrb.w	lr, [r4, #112]	; 0x70
    8cf4:	f8a5 6062 	strh.w	r6, [r5, #98]	; 0x62
    8cf8:	6669      	str	r1, [r5, #100]	; 0x64
    8cfa:	6f66      	ldr	r6, [r4, #116]	; 0x74
    8cfc:	6fa1      	ldr	r1, [r4, #120]	; 0x78
    8cfe:	f8b4 c080 	ldrh.w	ip, [r4, #128]	; 0x80
    8d02:	66ab      	str	r3, [r5, #104]	; 0x68
    8d04:	66e8      	str	r0, [r5, #108]	; 0x6c
    8d06:	6fe3      	ldr	r3, [r4, #124]	; 0x7c
    8d08:	f885 e070 	strb.w	lr, [r5, #112]	; 0x70
    8d0c:	676e      	str	r6, [r5, #116]	; 0x74
    8d0e:	f894 e082 	ldrb.w	lr, [r4, #130]	; 0x82
    8d12:	f894 6083 	ldrb.w	r6, [r4, #131]	; 0x83
    8d16:	67a9      	str	r1, [r5, #120]	; 0x78
                                       &OUT05_ENABLE05, &Polarity05_PWM05A,
                                       &Polarity05S_PWM05B, TCC3_0_IRQn, false);

    ConnectorDI6 = DigitalIn(ShiftRegister::SR_LED_DI_6_MASK, &IN06n_QuadA);
    8d18:	4abe      	ldr	r2, [pc, #760]	; (9014 <_ZN9ClearCore10SysManagerC1Ev+0xa5c>)
    8d1a:	67eb      	str	r3, [r5, #124]	; 0x7c
    8d1c:	4620      	mov	r0, r4
    8d1e:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
    8d22:	f8a5 c080 	strh.w	ip, [r5, #128]	; 0x80
    8d26:	f885 e082 	strb.w	lr, [r5, #130]	; 0x82
    8d2a:	f885 6083 	strb.w	r6, [r5, #131]	; 0x83
    8d2e:	f7fc fa41 	bl	51b4 <_ZN9ClearCore9DigitalInC1ENS_13ShiftRegister5MasksEPK15PeripheralRoute>
    8d32:	f104 000c 	add.w	r0, r4, #12
    8d36:	c807      	ldmia	r0, {r0, r1, r2}
    8d38:	4db7      	ldr	r5, [pc, #732]	; (9018 <_ZN9ClearCore10SysManagerC1Ev+0xa60>)
    8d3a:	68a3      	ldr	r3, [r4, #8]
    8d3c:	f894 c018 	ldrb.w	ip, [r4, #24]
    8d40:	f8b4 e004 	ldrh.w	lr, [r4, #4]
    8d44:	79a6      	ldrb	r6, [r4, #6]
    8d46:	60ab      	str	r3, [r5, #8]
    8d48:	f885 c018 	strb.w	ip, [r5, #24]
    8d4c:	69e3      	ldr	r3, [r4, #28]
    8d4e:	f8d4 c02a 	ldr.w	ip, [r4, #42]	; 0x2a
    8d52:	f894 b028 	ldrb.w	fp, [r4, #40]	; 0x28
    8d56:	f8a5 e004 	strh.w	lr, [r5, #4]
    8d5a:	71ae      	strb	r6, [r5, #6]
    8d5c:	f894 e019 	ldrb.w	lr, [r4, #25]
    8d60:	6a26      	ldr	r6, [r4, #32]
    8d62:	60e8      	str	r0, [r5, #12]
    8d64:	6129      	str	r1, [r5, #16]
    8d66:	616a      	str	r2, [r5, #20]
    8d68:	61eb      	str	r3, [r5, #28]
    8d6a:	f8c5 c02a 	str.w	ip, [r5, #42]	; 0x2a
    8d6e:	6a63      	ldr	r3, [r4, #36]	; 0x24
    ConnectorDI7 = DigitalIn(ShiftRegister::SR_LED_DI_7_MASK, &IN07n_QuadB);
    8d70:	4aaa      	ldr	r2, [pc, #680]	; (901c <_ZN9ClearCore10SysManagerC1Ev+0xa64>)
    8d72:	f885 e019 	strb.w	lr, [r5, #25]
    8d76:	4620      	mov	r0, r4
    8d78:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
    8d7c:	622e      	str	r6, [r5, #32]
    8d7e:	626b      	str	r3, [r5, #36]	; 0x24
    8d80:	f885 b028 	strb.w	fp, [r5, #40]	; 0x28
    8d84:	f7fc fa16 	bl	51b4 <_ZN9ClearCore9DigitalInC1ENS_13ShiftRegister5MasksEPK15PeripheralRoute>
    8d88:	f104 000c 	add.w	r0, r4, #12
    8d8c:	c807      	ldmia	r0, {r0, r1, r2}
    8d8e:	4da4      	ldr	r5, [pc, #656]	; (9020 <_ZN9ClearCore10SysManagerC1Ev+0xa68>)
    8d90:	68a3      	ldr	r3, [r4, #8]
    8d92:	f894 c018 	ldrb.w	ip, [r4, #24]
    8d96:	f8b4 e004 	ldrh.w	lr, [r4, #4]
    8d9a:	79a6      	ldrb	r6, [r4, #6]
    8d9c:	60ab      	str	r3, [r5, #8]
    8d9e:	f885 c018 	strb.w	ip, [r5, #24]
    8da2:	69e3      	ldr	r3, [r4, #28]
    8da4:	f8d4 c02a 	ldr.w	ip, [r4, #42]	; 0x2a
    8da8:	f894 b028 	ldrb.w	fp, [r4, #40]	; 0x28
    8dac:	f8a5 e004 	strh.w	lr, [r5, #4]
    8db0:	71ae      	strb	r6, [r5, #6]
    8db2:	f894 e019 	ldrb.w	lr, [r4, #25]
    8db6:	6a26      	ldr	r6, [r4, #32]
    8db8:	60e8      	str	r0, [r5, #12]
    8dba:	6129      	str	r1, [r5, #16]
    8dbc:	616a      	str	r2, [r5, #20]
    8dbe:	61eb      	str	r3, [r5, #28]
    8dc0:	f8c5 c02a 	str.w	ip, [r5, #42]	; 0x2a
    8dc4:	6a63      	ldr	r3, [r4, #36]	; 0x24
    ConnectorDI8 = DigitalIn(ShiftRegister::SR_LED_DI_8_MASK, &IN08n_QuadI);
    8dc6:	4a97      	ldr	r2, [pc, #604]	; (9024 <_ZN9ClearCore10SysManagerC1Ev+0xa6c>)
    8dc8:	f885 e019 	strb.w	lr, [r5, #25]
    8dcc:	4620      	mov	r0, r4
    8dce:	f44f 0100 	mov.w	r1, #8388608	; 0x800000
    8dd2:	622e      	str	r6, [r5, #32]
    8dd4:	626b      	str	r3, [r5, #36]	; 0x24
    8dd6:	f885 b028 	strb.w	fp, [r5, #40]	; 0x28
    8dda:	f7fc f9eb 	bl	51b4 <_ZN9ClearCore9DigitalInC1ENS_13ShiftRegister5MasksEPK15PeripheralRoute>
    8dde:	4d92      	ldr	r5, [pc, #584]	; (9028 <_ZN9ClearCore10SysManagerC1Ev+0xa70>)
    8de0:	88a6      	ldrh	r6, [r4, #4]
    8de2:	80ae      	strh	r6, [r5, #4]
    8de4:	f104 000c 	add.w	r0, r4, #12
    8de8:	c807      	ldmia	r0, {r0, r1, r2}

    ConnectorA9 = DigitalInAnalogIn(ShiftRegister::SR_LED_ADI_09_MASK,
    8dea:	2605      	movs	r6, #5
    8dec:	f894 e006 	ldrb.w	lr, [r4, #6]
    8df0:	68a3      	ldr	r3, [r4, #8]
    8df2:	9600      	str	r6, [sp, #0]
    8df4:	7e26      	ldrb	r6, [r4, #24]
    8df6:	f894 c019 	ldrb.w	ip, [r4, #25]
    8dfa:	f885 e006 	strb.w	lr, [r5, #6]
    8dfe:	60ab      	str	r3, [r5, #8]
    8e00:	f894 e028 	ldrb.w	lr, [r4, #40]	; 0x28
    8e04:	69e3      	ldr	r3, [r4, #28]
    8e06:	6129      	str	r1, [r5, #16]
    8e08:	616a      	str	r2, [r5, #20]
    8e0a:	6a61      	ldr	r1, [r4, #36]	; 0x24
    8e0c:	6a22      	ldr	r2, [r4, #32]
    8e0e:	762e      	strb	r6, [r5, #24]
    8e10:	f8d4 602a 	ldr.w	r6, [r4, #42]	; 0x2a
    8e14:	60e8      	str	r0, [r5, #12]
    8e16:	f885 c019 	strb.w	ip, [r5, #25]
    8e1a:	61eb      	str	r3, [r5, #28]
    8e1c:	622a      	str	r2, [r5, #32]
    8e1e:	6269      	str	r1, [r5, #36]	; 0x24
    8e20:	f885 e028 	strb.w	lr, [r5, #40]	; 0x28
    8e24:	f8c5 602a 	str.w	r6, [r5, #42]	; 0x2a
    8e28:	4620      	mov	r0, r4
    8e2a:	4d80      	ldr	r5, [pc, #512]	; (902c <_ZN9ClearCore10SysManagerC1Ev+0xa74>)
    8e2c:	4b80      	ldr	r3, [pc, #512]	; (9030 <_ZN9ClearCore10SysManagerC1Ev+0xa78>)
    8e2e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
    8e32:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
    8e36:	f7fb ffaf 	bl	4d98 <_ZN9ClearCore17DigitalInAnalogInC1ENS_13ShiftRegister5MasksES2_PK15PeripheralRouteNS_10AdcManager11AdcChannelsE>
    8e3a:	f8b4 e004 	ldrh.w	lr, [r4, #4]
    8e3e:	68a2      	ldr	r2, [r4, #8]
    8e40:	68e3      	ldr	r3, [r4, #12]
    8e42:	79a6      	ldrb	r6, [r4, #6]
    8e44:	6920      	ldr	r0, [r4, #16]
    8e46:	6961      	ldr	r1, [r4, #20]
    8e48:	f8a5 e004 	strh.w	lr, [r5, #4]
    8e4c:	60aa      	str	r2, [r5, #8]
    8e4e:	f894 e018 	ldrb.w	lr, [r4, #24]
    8e52:	69e2      	ldr	r2, [r4, #28]
    8e54:	60eb      	str	r3, [r5, #12]
    8e56:	6a23      	ldr	r3, [r4, #32]
    8e58:	f894 c028 	ldrb.w	ip, [r4, #40]	; 0x28
    8e5c:	71ae      	strb	r6, [r5, #6]
    8e5e:	6128      	str	r0, [r5, #16]
    8e60:	7e66      	ldrb	r6, [r4, #25]
    8e62:	6a60      	ldr	r0, [r4, #36]	; 0x24
    8e64:	6169      	str	r1, [r5, #20]
    8e66:	f885 e018 	strb.w	lr, [r5, #24]
class DigitalInAnalogIn : public DigitalIn {
    8e6a:	6b21      	ldr	r1, [r4, #48]	; 0x30
    8e6c:	f8d4 e02a 	ldr.w	lr, [r4, #42]	; 0x2a
    8e70:	61ea      	str	r2, [r5, #28]
    8e72:	622b      	str	r3, [r5, #32]
    8e74:	f894 2034 	ldrb.w	r2, [r4, #52]	; 0x34
    8e78:	6ba3      	ldr	r3, [r4, #56]	; 0x38
    8e7a:	f885 c028 	strb.w	ip, [r5, #40]	; 0x28
    8e7e:	766e      	strb	r6, [r5, #25]
    8e80:	6268      	str	r0, [r5, #36]	; 0x24
                                    ShiftRegister::SR_ANAIN_DIGITAL_09_MASK,
                                    &IN09n_AIN09, AdcManager::ADC_AIN09);
    ConnectorA10 = DigitalInAnalogIn(ShiftRegister::SR_LED_ADI_10_MASK,
    8e82:	2604      	movs	r6, #4
    8e84:	f8c5 e02a 	str.w	lr, [r5, #42]	; 0x2a
    8e88:	f885 2034 	strb.w	r2, [r5, #52]	; 0x34
    8e8c:	63ab      	str	r3, [r5, #56]	; 0x38
    8e8e:	6329      	str	r1, [r5, #48]	; 0x30
    8e90:	6be1      	ldr	r1, [r4, #60]	; 0x3c
    8e92:	f894 e040 	ldrb.w	lr, [r4, #64]	; 0x40
    8e96:	4b67      	ldr	r3, [pc, #412]	; (9034 <_ZN9ClearCore10SysManagerC1Ev+0xa7c>)
    8e98:	9600      	str	r6, [sp, #0]
    8e9a:	4620      	mov	r0, r4
    8e9c:	63e9      	str	r1, [r5, #60]	; 0x3c
    8e9e:	f885 e040 	strb.w	lr, [r5, #64]	; 0x40
    8ea2:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
    8ea6:	f04f 6180 	mov.w	r1, #67108864	; 0x4000000
    8eaa:	f7fb ff75 	bl	4d98 <_ZN9ClearCore17DigitalInAnalogInC1ENS_13ShiftRegister5MasksES2_PK15PeripheralRouteNS_10AdcManager11AdcChannelsE>
    8eae:	f104 0008 	add.w	r0, r4, #8
    8eb2:	c80d      	ldmia	r0, {r0, r2, r3}
    8eb4:	4d60      	ldr	r5, [pc, #384]	; (9038 <_ZN9ClearCore10SysManagerC1Ev+0xa80>)
    8eb6:	88a1      	ldrh	r1, [r4, #4]
    8eb8:	f894 e006 	ldrb.w	lr, [r4, #6]
    8ebc:	80a9      	strh	r1, [r5, #4]
    8ebe:	f885 e006 	strb.w	lr, [r5, #6]
    8ec2:	6961      	ldr	r1, [r4, #20]
    8ec4:	f894 e018 	ldrb.w	lr, [r4, #24]
    8ec8:	60a8      	str	r0, [r5, #8]
    8eca:	60ea      	str	r2, [r5, #12]
    8ecc:	7e60      	ldrb	r0, [r4, #25]
    8ece:	69e2      	ldr	r2, [r4, #28]
    8ed0:	612b      	str	r3, [r5, #16]
    8ed2:	6a23      	ldr	r3, [r4, #32]
    8ed4:	f894 c034 	ldrb.w	ip, [r4, #52]	; 0x34
    8ed8:	6169      	str	r1, [r5, #20]
    8eda:	f885 e018 	strb.w	lr, [r5, #24]
    8ede:	6a61      	ldr	r1, [r4, #36]	; 0x24
    8ee0:	f894 e028 	ldrb.w	lr, [r4, #40]	; 0x28
    8ee4:	7668      	strb	r0, [r5, #25]
    8ee6:	61ea      	str	r2, [r5, #28]
    8ee8:	f8d4 002a 	ldr.w	r0, [r4, #42]	; 0x2a
    8eec:	6b22      	ldr	r2, [r4, #48]	; 0x30
    8eee:	622b      	str	r3, [r5, #32]
    8ef0:	6ba3      	ldr	r3, [r4, #56]	; 0x38
    8ef2:	f885 c034 	strb.w	ip, [r5, #52]	; 0x34
    8ef6:	6269      	str	r1, [r5, #36]	; 0x24
    8ef8:	f885 e028 	strb.w	lr, [r5, #40]	; 0x28
    8efc:	f8c5 002a 	str.w	r0, [r5, #42]	; 0x2a
    8f00:	63ab      	str	r3, [r5, #56]	; 0x38
    8f02:	632a      	str	r2, [r5, #48]	; 0x30
    8f04:	6be2      	ldr	r2, [r4, #60]	; 0x3c
                                     ShiftRegister::SR_ANAIN_DIGITAL_10_MASK,
                                     &IN10n_AIN10, AdcManager::ADC_AIN10);
    ConnectorA11 = DigitalInAnalogIn(ShiftRegister::SR_LED_ADI_11_MASK,
    8f06:	f8cd 8000 	str.w	r8, [sp]
    8f0a:	f894 e040 	ldrb.w	lr, [r4, #64]	; 0x40
    8f0e:	63ea      	str	r2, [r5, #60]	; 0x3c
    8f10:	f885 e040 	strb.w	lr, [r5, #64]	; 0x40
    8f14:	4620      	mov	r0, r4
    8f16:	4d49      	ldr	r5, [pc, #292]	; (903c <_ZN9ClearCore10SysManagerC1Ev+0xa84>)
    8f18:	4b49      	ldr	r3, [pc, #292]	; (9040 <_ZN9ClearCore10SysManagerC1Ev+0xa88>)
    8f1a:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
    8f1e:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
    8f22:	f7fb ff39 	bl	4d98 <_ZN9ClearCore17DigitalInAnalogInC1ENS_13ShiftRegister5MasksES2_PK15PeripheralRouteNS_10AdcManager11AdcChannelsE>
    8f26:	f894 c006 	ldrb.w	ip, [r4, #6]
    8f2a:	68a2      	ldr	r2, [r4, #8]
    8f2c:	68e3      	ldr	r3, [r4, #12]
    8f2e:	f8b4 e004 	ldrh.w	lr, [r4, #4]
    8f32:	6920      	ldr	r0, [r4, #16]
    8f34:	6961      	ldr	r1, [r4, #20]
    8f36:	f885 c006 	strb.w	ip, [r5, #6]
    8f3a:	60aa      	str	r2, [r5, #8]
    8f3c:	f894 c018 	ldrb.w	ip, [r4, #24]
    8f40:	69e2      	ldr	r2, [r4, #28]
    8f42:	60eb      	str	r3, [r5, #12]
    8f44:	6a23      	ldr	r3, [r4, #32]
    8f46:	f894 8028 	ldrb.w	r8, [r4, #40]	; 0x28
    8f4a:	f8a5 e004 	strh.w	lr, [r5, #4]
    8f4e:	6128      	str	r0, [r5, #16]
    8f50:	f894 e019 	ldrb.w	lr, [r4, #25]
    8f54:	6a60      	ldr	r0, [r4, #36]	; 0x24
    8f56:	6169      	str	r1, [r5, #20]
    8f58:	f885 c018 	strb.w	ip, [r5, #24]
    8f5c:	6b21      	ldr	r1, [r4, #48]	; 0x30
    8f5e:	f8d4 c02a 	ldr.w	ip, [r4, #42]	; 0x2a
    8f62:	61ea      	str	r2, [r5, #28]
    8f64:	622b      	str	r3, [r5, #32]
    8f66:	f894 2034 	ldrb.w	r2, [r4, #52]	; 0x34
    8f6a:	6ba3      	ldr	r3, [r4, #56]	; 0x38
    8f6c:	f8c5 c02a 	str.w	ip, [r5, #42]	; 0x2a
    8f70:	f885 e019 	strb.w	lr, [r5, #25]
    8f74:	6268      	str	r0, [r5, #36]	; 0x24
    8f76:	f885 8028 	strb.w	r8, [r5, #40]	; 0x28
    8f7a:	6329      	str	r1, [r5, #48]	; 0x30
    8f7c:	63ab      	str	r3, [r5, #56]	; 0x38
    8f7e:	f885 2034 	strb.w	r2, [r5, #52]	; 0x34
    8f82:	6be2      	ldr	r2, [r4, #60]	; 0x3c
                                     ShiftRegister::SR_ANAIN_DIGITAL_11_MASK,
                                     &IN11n_AIN11, AdcManager::ADC_AIN11);
    ConnectorA12 = DigitalInAnalogIn(ShiftRegister::SR_LED_ADI_12_MASK,
    8f84:	f8cd a000 	str.w	sl, [sp]
    8f88:	f894 e040 	ldrb.w	lr, [r4, #64]	; 0x40
    8f8c:	63ea      	str	r2, [r5, #60]	; 0x3c
    8f8e:	f885 e040 	strb.w	lr, [r5, #64]	; 0x40
    8f92:	4620      	mov	r0, r4
    8f94:	4b2b      	ldr	r3, [pc, #172]	; (9044 <_ZN9ClearCore10SysManagerC1Ev+0xa8c>)
    8f96:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
    8f9a:	f04f 7180 	mov.w	r1, #16777216	; 0x1000000
    8f9e:	f7fb fefb 	bl	4d98 <_ZN9ClearCore17DigitalInAnalogInC1ENS_13ShiftRegister5MasksES2_PK15PeripheralRouteNS_10AdcManager11AdcChannelsE>
    8fa2:	f104 0008 	add.w	r0, r4, #8
    8fa6:	c80f      	ldmia	r0, {r0, r1, r2, r3}
    8fa8:	f8df e09c 	ldr.w	lr, [pc, #156]	; 9048 <_ZN9ClearCore10SysManagerC1Ev+0xa90>
    8fac:	f894 c006 	ldrb.w	ip, [r4, #6]
    8fb0:	88a5      	ldrh	r5, [r4, #4]
    8fb2:	f88e c006 	strb.w	ip, [lr, #6]
    8fb6:	f894 c019 	ldrb.w	ip, [r4, #25]
    8fba:	f894 8018 	ldrb.w	r8, [r4, #24]
    8fbe:	f8ae 5004 	strh.w	r5, [lr, #4]
    8fc2:	f8ce 0008 	str.w	r0, [lr, #8]
    8fc6:	69e5      	ldr	r5, [r4, #28]
    8fc8:	6a20      	ldr	r0, [r4, #32]
    8fca:	f8ce 100c 	str.w	r1, [lr, #12]
    8fce:	f8ce 2010 	str.w	r2, [lr, #16]
    8fd2:	f894 a028 	ldrb.w	sl, [r4, #40]	; 0x28
    8fd6:	f8ce 3014 	str.w	r3, [lr, #20]
    8fda:	f8d4 b02a 	ldr.w	fp, [r4, #42]	; 0x2a
    8fde:	6b23      	ldr	r3, [r4, #48]	; 0x30
    8fe0:	f88e c019 	strb.w	ip, [lr, #25]
    8fe4:	6ba2      	ldr	r2, [r4, #56]	; 0x38
    8fe6:	f894 c034 	ldrb.w	ip, [r4, #52]	; 0x34
    8fea:	6a61      	ldr	r1, [r4, #36]	; 0x24
    8fec:	f88e 8018 	strb.w	r8, [lr, #24]
    8ff0:	f8ce 501c 	str.w	r5, [lr, #28]
    8ff4:	f8ce 0020 	str.w	r0, [lr, #32]
    8ff8:	f88e a028 	strb.w	sl, [lr, #40]	; 0x28
    8ffc:	f8ce b02a 	str.w	fp, [lr, #42]	; 0x2a
    9000:	f8ce 3030 	str.w	r3, [lr, #48]	; 0x30
    9004:	f88e c034 	strb.w	ip, [lr, #52]	; 0x34
    9008:	f8ce 2038 	str.w	r2, [lr, #56]	; 0x38
    900c:	f8ce 1024 	str.w	r1, [lr, #36]	; 0x24
    9010:	e01c      	b.n	904c <_ZN9ClearCore10SysManagerC1Ev+0xa94>
    9012:	bf00      	nop
    9014:	00022b10 	.word	0x00022b10
    9018:	20001280 	.word	0x20001280
    901c:	00022b20 	.word	0x00022b20
    9020:	200012b0 	.word	0x200012b0
    9024:	00022b30 	.word	0x00022b30
    9028:	200012e0 	.word	0x200012e0
    902c:	20000c4c 	.word	0x20000c4c
    9030:	00022b40 	.word	0x00022b40
    9034:	00022b50 	.word	0x00022b50
    9038:	200011b4 	.word	0x200011b4
    903c:	200011f8 	.word	0x200011f8
    9040:	00022b60 	.word	0x00022b60
    9044:	00022b70 	.word	0x00022b70
    9048:	2000123c 	.word	0x2000123c
    904c:	6be1      	ldr	r1, [r4, #60]	; 0x3c
                                     ShiftRegister::SR_ANAIN_DIGITAL_12_MASK,
                                     &IN12n_AIN12, AdcManager::ADC_AIN12);

    ConnectorM0 = MotorDriver(ShiftRegister::SR_EN_OUT_0_MASK, &Mtr0_An_SCTx,
    904e:	9702      	str	r7, [sp, #8]
    9050:	9601      	str	r6, [sp, #4]
    9052:	f894 6040 	ldrb.w	r6, [r4, #64]	; 0x40
    9056:	4dcc      	ldr	r5, [pc, #816]	; (9388 <_ZN9ClearCore10SysManagerC1Ev+0xdd0>)
    9058:	9500      	str	r5, [sp, #0]
    905a:	4620      	mov	r0, r4
    905c:	f8ce 103c 	str.w	r1, [lr, #60]	; 0x3c
    9060:	f88e 6040 	strb.w	r6, [lr, #64]	; 0x40
    9064:	4bc9      	ldr	r3, [pc, #804]	; (938c <_ZN9ClearCore10SysManagerC1Ev+0xdd4>)
    9066:	4aca      	ldr	r2, [pc, #808]	; (9390 <_ZN9ClearCore10SysManagerC1Ev+0xdd8>)
    9068:	f44f 6100 	mov.w	r1, #2048	; 0x800
    906c:	f7fc fb56 	bl	571c <_ZN9ClearCore11MotorDriverC1ENS_13ShiftRegister5MasksEPK15PeripheralRouteS5_S5_tt>
    9070:	4bc8      	ldr	r3, [pc, #800]	; (9394 <_ZN9ClearCore10SysManagerC1Ev+0xddc>)
    9072:	79a7      	ldrb	r7, [r4, #6]
    9074:	68a6      	ldr	r6, [r4, #8]
    9076:	68e5      	ldr	r5, [r4, #12]
    9078:	6920      	ldr	r0, [r4, #16]
    907a:	6961      	ldr	r1, [r4, #20]
    907c:	f894 8018 	ldrb.w	r8, [r4, #24]
    9080:	69e2      	ldr	r2, [r4, #28]
    9082:	f8b4 e004 	ldrh.w	lr, [r4, #4]
    9086:	f894 c019 	ldrb.w	ip, [r4, #25]
    908a:	719f      	strb	r7, [r3, #6]
    908c:	609e      	str	r6, [r3, #8]
    908e:	6a67      	ldr	r7, [r4, #36]	; 0x24
    9090:	f894 6028 	ldrb.w	r6, [r4, #40]	; 0x28
    9094:	60dd      	str	r5, [r3, #12]
    9096:	6118      	str	r0, [r3, #16]
    9098:	f8d4 502a 	ldr.w	r5, [r4, #42]	; 0x2a
    class StepGenerator
    909c:	6b60      	ldr	r0, [r4, #52]	; 0x34
    909e:	6159      	str	r1, [r3, #20]
    90a0:	f883 8018 	strb.w	r8, [r3, #24]
    90a4:	6ba1      	ldr	r1, [r4, #56]	; 0x38
    90a6:	f894 803c 	ldrb.w	r8, [r4, #60]	; 0x3c
    90aa:	61da      	str	r2, [r3, #28]
    90ac:	6a22      	ldr	r2, [r4, #32]
    90ae:	f8a3 e004 	strh.w	lr, [r3, #4]
    90b2:	f883 c019 	strb.w	ip, [r3, #25]
    90b6:	621a      	str	r2, [r3, #32]
    90b8:	625f      	str	r7, [r3, #36]	; 0x24
    90ba:	f883 6028 	strb.w	r6, [r3, #40]	; 0x28
    90be:	f8c3 502a 	str.w	r5, [r3, #42]	; 0x2a
    90c2:	6358      	str	r0, [r3, #52]	; 0x34
    90c4:	6399      	str	r1, [r3, #56]	; 0x38
    90c6:	f883 803c 	strb.w	r8, [r3, #60]	; 0x3c
    90ca:	f894 803d 	ldrb.w	r8, [r4, #61]	; 0x3d
    90ce:	6ca2      	ldr	r2, [r4, #72]	; 0x48
    90d0:	649a      	str	r2, [r3, #72]	; 0x48
    90d2:	6de2      	ldr	r2, [r4, #92]	; 0x5c
    90d4:	9207      	str	r2, [sp, #28]
    90d6:	e9d4 ab1a 	ldrd	sl, fp, [r4, #104]	; 0x68
    90da:	6ce2      	ldr	r2, [r4, #76]	; 0x4c
    90dc:	f894 0040 	ldrb.w	r0, [r4, #64]	; 0x40
    90e0:	6c61      	ldr	r1, [r4, #68]	; 0x44
    90e2:	f894 7050 	ldrb.w	r7, [r4, #80]	; 0x50
    90e6:	64da      	str	r2, [r3, #76]	; 0x4c
    90e8:	9a07      	ldr	r2, [sp, #28]
    90ea:	f894 c03e 	ldrb.w	ip, [r4, #62]	; 0x3e
    90ee:	f894 6051 	ldrb.w	r6, [r4, #81]	; 0x51
    90f2:	f894 5052 	ldrb.w	r5, [r4, #82]	; 0x52
    90f6:	f883 0040 	strb.w	r0, [r3, #64]	; 0x40
    90fa:	6459      	str	r1, [r3, #68]	; 0x44
    90fc:	6d60      	ldr	r0, [r4, #84]	; 0x54
    90fe:	6da1      	ldr	r1, [r4, #88]	; 0x58
    9100:	f883 7050 	strb.w	r7, [r3, #80]	; 0x50
    9104:	65da      	str	r2, [r3, #92]	; 0x5c
    9106:	6f27      	ldr	r7, [r4, #112]	; 0x70
    9108:	6e22      	ldr	r2, [r4, #96]	; 0x60
    910a:	f883 803d 	strb.w	r8, [r3, #61]	; 0x3d
    910e:	f883 c03e 	strb.w	ip, [r3, #62]	; 0x3e
    9112:	f883 6051 	strb.w	r6, [r3, #81]	; 0x51
    9116:	f883 5052 	strb.w	r5, [r3, #82]	; 0x52
    911a:	6f66      	ldr	r6, [r4, #116]	; 0x74
    911c:	6558      	str	r0, [r3, #84]	; 0x54
    911e:	6599      	str	r1, [r3, #88]	; 0x58
    9120:	661a      	str	r2, [r3, #96]	; 0x60
    9122:	e9c3 ab1a 	strd	sl, fp, [r3, #104]	; 0x68
    9126:	671f      	str	r7, [r3, #112]	; 0x70
    9128:	f8d4 0080 	ldr.w	r0, [r4, #128]	; 0x80
    912c:	f8d4 5090 	ldr.w	r5, [r4, #144]	; 0x90
    9130:	f8c3 0080 	str.w	r0, [r3, #128]	; 0x80
    9134:	e9d4 121e 	ldrd	r1, r2, [r4, #120]	; 0x78
    9138:	f8d4 0094 	ldr.w	r0, [r4, #148]	; 0x94
    913c:	f8c3 5090 	str.w	r5, [r3, #144]	; 0x90
    9140:	f8d4 5098 	ldr.w	r5, [r4, #152]	; 0x98
    9144:	675e      	str	r6, [r3, #116]	; 0x74
    9146:	e9d4 ab22 	ldrd	sl, fp, [r4, #136]	; 0x88
class MotorDriver : public DigitalIn, public StepGenerator {
    914a:	f8d4 60a0 	ldr.w	r6, [r4, #160]	; 0xa0
    914e:	f8c3 0094 	str.w	r0, [r3, #148]	; 0x94
    9152:	f8c3 5098 	str.w	r5, [r3, #152]	; 0x98
    9156:	f8d4 009c 	ldr.w	r0, [r4, #156]	; 0x9c
    915a:	f8d4 50a4 	ldr.w	r5, [r4, #164]	; 0xa4
    915e:	f8c3 009c 	str.w	r0, [r3, #156]	; 0x9c
    9162:	f8c3 60a0 	str.w	r6, [r3, #160]	; 0xa0
    9166:	f8d4 00a8 	ldr.w	r0, [r4, #168]	; 0xa8
    916a:	f8d4 60ac 	ldr.w	r6, [r4, #172]	; 0xac
    916e:	f8c3 50a4 	str.w	r5, [r3, #164]	; 0xa4
    9172:	f8d4 50b0 	ldr.w	r5, [r4, #176]	; 0xb0
    9176:	f8c3 00a8 	str.w	r0, [r3, #168]	; 0xa8
    917a:	e9c3 121e 	strd	r1, r2, [r3, #120]	; 0x78
    917e:	f8d4 00b4 	ldr.w	r0, [r4, #180]	; 0xb4
    9182:	f8c3 60ac 	str.w	r6, [r3, #172]	; 0xac
    9186:	4619      	mov	r1, r3
    9188:	f8d4 60b8 	ldr.w	r6, [r4, #184]	; 0xb8
    918c:	f8c3 50b0 	str.w	r5, [r3, #176]	; 0xb0
    9190:	f8d4 40bc 	ldr.w	r4, [r4, #188]	; 0xbc
    9194:	9d38      	ldr	r5, [sp, #224]	; 0xe0
    9196:	f8c3 00b4 	str.w	r0, [r3, #180]	; 0xb4
    919a:	e9c3 ab22 	strd	sl, fp, [r3, #136]	; 0x88
    919e:	f8c3 60b8 	str.w	r6, [r3, #184]	; 0xb8
    91a2:	f8c3 40bc 	str.w	r4, [r3, #188]	; 0xbc
    91a6:	f8c3 50c0 	str.w	r5, [r3, #192]	; 0xc0
    91aa:	9c39      	ldr	r4, [sp, #228]	; 0xe4
    91ac:	983a      	ldr	r0, [sp, #232]	; 0xe8
    91ae:	9a3b      	ldr	r2, [sp, #236]	; 0xec
    91b0:	f89d 30f6 	ldrb.w	r3, [sp, #246]	; 0xf6
    91b4:	f8bd b0f0 	ldrh.w	fp, [sp, #240]	; 0xf0
    91b8:	f8bd a0f2 	ldrh.w	sl, [sp, #242]	; 0xf2
    91bc:	f8bd 80f4 	ldrh.w	r8, [sp, #244]	; 0xf4
    91c0:	f89d c0f7 	ldrb.w	ip, [sp, #247]	; 0xf7
    91c4:	f89d e0f8 	ldrb.w	lr, [sp, #248]	; 0xf8
    91c8:	f8bd 70fa 	ldrh.w	r7, [sp, #250]	; 0xfa
    91cc:	f8bd 60fc 	ldrh.w	r6, [sp, #252]	; 0xfc
    91d0:	f8bd 50fe 	ldrh.w	r5, [sp, #254]	; 0xfe
    91d4:	f8c1 40c4 	str.w	r4, [r1, #196]	; 0xc4
    91d8:	f8c1 00c8 	str.w	r0, [r1, #200]	; 0xc8
    91dc:	f8c1 20cc 	str.w	r2, [r1, #204]	; 0xcc
    91e0:	f8bd 0102 	ldrh.w	r0, [sp, #258]	; 0x102
    91e4:	f89d 2104 	ldrb.w	r2, [sp, #260]	; 0x104
    91e8:	f8bd 4100 	ldrh.w	r4, [sp, #256]	; 0x100
    91ec:	f881 30d6 	strb.w	r3, [r1, #214]	; 0xd6
    91f0:	9b42      	ldr	r3, [sp, #264]	; 0x108
    91f2:	f8a1 b0d0 	strh.w	fp, [r1, #208]	; 0xd0
    91f6:	f8a1 a0d2 	strh.w	sl, [r1, #210]	; 0xd2
    91fa:	f8a1 80d4 	strh.w	r8, [r1, #212]	; 0xd4
    91fe:	f881 c0d7 	strb.w	ip, [r1, #215]	; 0xd7
    9202:	f881 e0d8 	strb.w	lr, [r1, #216]	; 0xd8
    9206:	f8a1 70da 	strh.w	r7, [r1, #218]	; 0xda
    920a:	f8a1 60dc 	strh.w	r6, [r1, #220]	; 0xdc
    920e:	f8a1 50de 	strh.w	r5, [r1, #222]	; 0xde
    9212:	f8a1 00e2 	strh.w	r0, [r1, #226]	; 0xe2
    9216:	f881 20e4 	strb.w	r2, [r1, #228]	; 0xe4
    921a:	f8c1 30e8 	str.w	r3, [r1, #232]	; 0xe8
    921e:	f8a1 40e0 	strh.w	r4, [r1, #224]	; 0xe0
    9222:	9c43      	ldr	r4, [sp, #268]	; 0x10c
    9224:	9d44      	ldr	r5, [sp, #272]	; 0x110
    9226:	f89d 7115 	ldrb.w	r7, [sp, #277]	; 0x115
    922a:	f89d 0116 	ldrb.w	r0, [sp, #278]	; 0x116
    922e:	f8bd 2118 	ldrh.w	r2, [sp, #280]	; 0x118
    9232:	9b47      	ldr	r3, [sp, #284]	; 0x11c
    9234:	f89d 8114 	ldrb.w	r8, [sp, #276]	; 0x114
    9238:	f89d c120 	ldrb.w	ip, [sp, #288]	; 0x120
    923c:	f89d e121 	ldrb.w	lr, [sp, #289]	; 0x121
    9240:	f8c1 40ec 	str.w	r4, [r1, #236]	; 0xec
    9244:	9e49      	ldr	r6, [sp, #292]	; 0x124
    9246:	9c4b      	ldr	r4, [sp, #300]	; 0x12c
    9248:	f8c1 50f0 	str.w	r5, [r1, #240]	; 0xf0
    924c:	f881 70f5 	strb.w	r7, [r1, #245]	; 0xf5
    9250:	9d4a      	ldr	r5, [sp, #296]	; 0x128
    9252:	f8bd 7130 	ldrh.w	r7, [sp, #304]	; 0x130
    9256:	f881 00f6 	strb.w	r0, [r1, #246]	; 0xf6
    925a:	f8a1 20f8 	strh.w	r2, [r1, #248]	; 0xf8
    925e:	f8bd 0132 	ldrh.w	r0, [sp, #306]	; 0x132
    9262:	f89d 2134 	ldrb.w	r2, [sp, #308]	; 0x134
    9266:	f8c1 30fc 	str.w	r3, [r1, #252]	; 0xfc
    926a:	9b4e      	ldr	r3, [sp, #312]	; 0x138
    926c:	f881 80f4 	strb.w	r8, [r1, #244]	; 0xf4
    9270:	f881 c100 	strb.w	ip, [r1, #256]	; 0x100
    9274:	f881 e101 	strb.w	lr, [r1, #257]	; 0x101
    9278:	f8c1 5108 	str.w	r5, [r1, #264]	; 0x108
    927c:	f8c1 410c 	str.w	r4, [r1, #268]	; 0x10c
    9280:	f8a1 7110 	strh.w	r7, [r1, #272]	; 0x110
    9284:	f8a1 0112 	strh.w	r0, [r1, #274]	; 0x112
    9288:	f881 2114 	strb.w	r2, [r1, #276]	; 0x114
    928c:	f8c1 3118 	str.w	r3, [r1, #280]	; 0x118
    9290:	f8c1 6104 	str.w	r6, [r1, #260]	; 0x104
    9294:	9e4f      	ldr	r6, [sp, #316]	; 0x13c
    9296:	9b50      	ldr	r3, [sp, #320]	; 0x140
    9298:	9d51      	ldr	r5, [sp, #324]	; 0x144
    929a:	9852      	ldr	r0, [sp, #328]	; 0x148
    929c:	f89d c14c 	ldrb.w	ip, [sp, #332]	; 0x14c
    92a0:	f89d e14d 	ldrb.w	lr, [sp, #333]	; 0x14d
    92a4:	f89d 714e 	ldrb.w	r7, [sp, #334]	; 0x14e
    92a8:	f8c1 3120 	str.w	r3, [r1, #288]	; 0x120
    92ac:	9b54      	ldr	r3, [sp, #336]	; 0x150
    92ae:	f89d 814f 	ldrb.w	r8, [sp, #335]	; 0x14f
    92b2:	f8c1 611c 	str.w	r6, [r1, #284]	; 0x11c
    92b6:	f8c1 5124 	str.w	r5, [r1, #292]	; 0x124
    92ba:	f8bd 6154 	ldrh.w	r6, [sp, #340]	; 0x154
    92be:	f8c1 0128 	str.w	r0, [r1, #296]	; 0x128
    92c2:	f8bd 5156 	ldrh.w	r5, [sp, #342]	; 0x156
    92c6:	f89d 015d 	ldrb.w	r0, [sp, #349]	; 0x15d
    92ca:	f881 c12c 	strb.w	ip, [r1, #300]	; 0x12c
    92ce:	f881 e12d 	strb.w	lr, [r1, #301]	; 0x12d
    92d2:	f8bd c158 	ldrh.w	ip, [sp, #344]	; 0x158
    92d6:	f8bd e15a 	ldrh.w	lr, [sp, #346]	; 0x15a
    92da:	f881 712e 	strb.w	r7, [r1, #302]	; 0x12e
    92de:	f8c1 3130 	str.w	r3, [r1, #304]	; 0x130
    92e2:	f89d 715c 	ldrb.w	r7, [sp, #348]	; 0x15c
    92e6:	f89d 315e 	ldrb.w	r3, [sp, #350]	; 0x15e
                              &Mtr0_B, &Mtr0_HLFB_SCRx, 4, EVSYS_M0);
    ConnectorM1 = MotorDriver(ShiftRegister::SR_EN_OUT_1_MASK, &Mtr1_An,
    92ea:	4a2b      	ldr	r2, [pc, #172]	; (9398 <_ZN9ClearCore10SysManagerC1Ev+0xde0>)
    92ec:	f8a1 c138 	strh.w	ip, [r1, #312]	; 0x138
    92f0:	f8a1 e13a 	strh.w	lr, [r1, #314]	; 0x13a
    92f4:	2401      	movs	r4, #1
    92f6:	f881 812f 	strb.w	r8, [r1, #303]	; 0x12f
    92fa:	f8a1 6134 	strh.w	r6, [r1, #308]	; 0x134
    92fe:	f881 713c 	strb.w	r7, [r1, #316]	; 0x13c
    9302:	f881 013d 	strb.w	r0, [r1, #317]	; 0x13d
    9306:	f881 313e 	strb.w	r3, [r1, #318]	; 0x13e
    930a:	2605      	movs	r6, #5
    930c:	f8a1 5136 	strh.w	r5, [r1, #310]	; 0x136
    9310:	9d58      	ldr	r5, [sp, #352]	; 0x160
    9312:	4f22      	ldr	r7, [pc, #136]	; (939c <_ZN9ClearCore10SysManagerC1Ev+0xde4>)
    9314:	9402      	str	r4, [sp, #8]
    9316:	e88d 0044 	stmia.w	sp, {r2, r6}
    931a:	a808      	add	r0, sp, #32
    931c:	f8c1 5140 	str.w	r5, [r1, #320]	; 0x140
    9320:	4b1f      	ldr	r3, [pc, #124]	; (93a0 <_ZN9ClearCore10SysManagerC1Ev+0xde8>)
    9322:	4a20      	ldr	r2, [pc, #128]	; (93a4 <_ZN9ClearCore10SysManagerC1Ev+0xdec>)
    9324:	f44f 6180 	mov.w	r1, #1024	; 0x400
    9328:	f7fc f9f8 	bl	571c <_ZN9ClearCore11MotorDriverC1ENS_13ShiftRegister5MasksEPK15PeripheralRouteS5_S5_tt>
    932c:	f89d 1026 	ldrb.w	r1, [sp, #38]	; 0x26
    9330:	f8bd 2024 	ldrh.w	r2, [sp, #36]	; 0x24
    9334:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    9336:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
    9338:	9d0c      	ldr	r5, [sp, #48]	; 0x30
    933a:	980d      	ldr	r0, [sp, #52]	; 0x34
    933c:	71b9      	strb	r1, [r7, #6]
    933e:	990f      	ldr	r1, [sp, #60]	; 0x3c
    9340:	f89d 8038 	ldrb.w	r8, [sp, #56]	; 0x38
    9344:	f89d e048 	ldrb.w	lr, [sp, #72]	; 0x48
    9348:	f8dd a04a 	ldr.w	sl, [sp, #74]	; 0x4a
    934c:	f89d c039 	ldrb.w	ip, [sp, #57]	; 0x39
    9350:	80ba      	strh	r2, [r7, #4]
    9352:	60bb      	str	r3, [r7, #8]
    9354:	9a10      	ldr	r2, [sp, #64]	; 0x40
    9356:	9b11      	ldr	r3, [sp, #68]	; 0x44
    9358:	60fe      	str	r6, [r7, #12]
    935a:	613d      	str	r5, [r7, #16]
    935c:	f89d 605c 	ldrb.w	r6, [sp, #92]	; 0x5c
    9360:	9d15      	ldr	r5, [sp, #84]	; 0x54
    9362:	6178      	str	r0, [r7, #20]
    9364:	61f9      	str	r1, [r7, #28]
    9366:	9816      	ldr	r0, [sp, #88]	; 0x58
    9368:	f887 8018 	strb.w	r8, [r7, #24]
    936c:	a919      	add	r1, sp, #100	; 0x64
    936e:	623a      	str	r2, [r7, #32]
    9370:	627b      	str	r3, [r7, #36]	; 0x24
    9372:	f887 e028 	strb.w	lr, [r7, #40]	; 0x28
    9376:	f8c7 a02a 	str.w	sl, [r7, #42]	; 0x2a
    937a:	637d      	str	r5, [r7, #52]	; 0x34
    937c:	63b8      	str	r0, [r7, #56]	; 0x38
    937e:	f887 603c 	strb.w	r6, [r7, #60]	; 0x3c
    9382:	f887 c019 	strb.w	ip, [r7, #25]
    9386:	e00f      	b.n	93a8 <_ZN9ClearCore10SysManagerC1Ev+0xdf0>
    9388:	00022c40 	.word	0x00022c40
    938c:	00022db0 	.word	0x00022db0
    9390:	00022bf0 	.word	0x00022bf0
    9394:	20000c90 	.word	0x20000c90
    9398:	00022de0 	.word	0x00022de0
    939c:	20000dd8 	.word	0x20000dd8
    93a0:	00022dc0 	.word	0x00022dc0
    93a4:	00022dd0 	.word	0x00022dd0
    93a8:	f89d c05d 	ldrb.w	ip, [sp, #93]	; 0x5d
    93ac:	f89d 605e 	ldrb.w	r6, [sp, #94]	; 0x5e
    93b0:	f89d 0060 	ldrb.w	r0, [sp, #96]	; 0x60
    93b4:	f89d 5071 	ldrb.w	r5, [sp, #113]	; 0x71
    93b8:	f887 603e 	strb.w	r6, [r7, #62]	; 0x3e
    93bc:	c90e      	ldmia	r1, {r1, r2, r3}
    93be:	e9dd ab22 	ldrd	sl, fp, [sp, #136]	; 0x88
    93c2:	f89d 6072 	ldrb.w	r6, [sp, #114]	; 0x72
    93c6:	f89d e070 	ldrb.w	lr, [sp, #112]	; 0x70
    93ca:	f887 0040 	strb.w	r0, [r7, #64]	; 0x40
    93ce:	6479      	str	r1, [r7, #68]	; 0x44
    93d0:	981d      	ldr	r0, [sp, #116]	; 0x74
    93d2:	991e      	ldr	r1, [sp, #120]	; 0x78
    93d4:	64ba      	str	r2, [r7, #72]	; 0x48
    93d6:	64fb      	str	r3, [r7, #76]	; 0x4c
    93d8:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
    93da:	9b20      	ldr	r3, [sp, #128]	; 0x80
    93dc:	f887 5051 	strb.w	r5, [r7, #81]	; 0x51
    93e0:	f887 6052 	strb.w	r6, [r7, #82]	; 0x52
    93e4:	9d24      	ldr	r5, [sp, #144]	; 0x90
    93e6:	9e25      	ldr	r6, [sp, #148]	; 0x94
    93e8:	f887 c03d 	strb.w	ip, [r7, #61]	; 0x3d
    93ec:	f887 e050 	strb.w	lr, [r7, #80]	; 0x50
    93f0:	6578      	str	r0, [r7, #84]	; 0x54
    93f2:	65b9      	str	r1, [r7, #88]	; 0x58
    93f4:	65fa      	str	r2, [r7, #92]	; 0x5c
    93f6:	663b      	str	r3, [r7, #96]	; 0x60
    93f8:	673d      	str	r5, [r7, #112]	; 0x70
    93fa:	677e      	str	r6, [r7, #116]	; 0x74
    93fc:	e9c7 ab1a 	strd	sl, fp, [r7, #104]	; 0x68
    9400:	e9dd ab26 	ldrd	sl, fp, [sp, #152]	; 0x98
    9404:	e9dd 232a 	ldrd	r2, r3, [sp, #168]	; 0xa8
    9408:	9928      	ldr	r1, [sp, #160]	; 0xa0
    940a:	982e      	ldr	r0, [sp, #184]	; 0xb8
    940c:	f8c7 1080 	str.w	r1, [r7, #128]	; 0x80
    9410:	4615      	mov	r5, r2
    9412:	9a2c      	ldr	r2, [sp, #176]	; 0xb0
    9414:	992f      	ldr	r1, [sp, #188]	; 0xbc
    9416:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
    941a:	461e      	mov	r6, r3
    941c:	9a30      	ldr	r2, [sp, #192]	; 0xc0
    941e:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
    9420:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    9424:	f8c7 0098 	str.w	r0, [r7, #152]	; 0x98
    9428:	9b31      	ldr	r3, [sp, #196]	; 0xc4
    942a:	9832      	ldr	r0, [sp, #200]	; 0xc8
    942c:	f8c7 109c 	str.w	r1, [r7, #156]	; 0x9c
    9430:	f8c7 20a0 	str.w	r2, [r7, #160]	; 0xa0
    9434:	9933      	ldr	r1, [sp, #204]	; 0xcc
    9436:	9a34      	ldr	r2, [sp, #208]	; 0xd0
    9438:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    943c:	f8c7 00a8 	str.w	r0, [r7, #168]	; 0xa8
    9440:	9b35      	ldr	r3, [sp, #212]	; 0xd4
    9442:	9836      	ldr	r0, [sp, #216]	; 0xd8
    9444:	f8c7 10ac 	str.w	r1, [r7, #172]	; 0xac
    9448:	f8c7 20b0 	str.w	r2, [r7, #176]	; 0xb0
    944c:	9937      	ldr	r1, [sp, #220]	; 0xdc
    944e:	9a38      	ldr	r2, [sp, #224]	; 0xe0
    9450:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    9454:	e9c7 ab1e 	strd	sl, fp, [r7, #120]	; 0x78
    9458:	e9c7 5622 	strd	r5, r6, [r7, #136]	; 0x88
    945c:	f8c7 00b8 	str.w	r0, [r7, #184]	; 0xb8
    9460:	f8c7 10bc 	str.w	r1, [r7, #188]	; 0xbc
    9464:	f8c7 20c0 	str.w	r2, [r7, #192]	; 0xc0
    9468:	9d39      	ldr	r5, [sp, #228]	; 0xe4
    946a:	983a      	ldr	r0, [sp, #232]	; 0xe8
    946c:	993b      	ldr	r1, [sp, #236]	; 0xec
    946e:	f89d 20f6 	ldrb.w	r2, [sp, #246]	; 0xf6
    9472:	f89d 30f7 	ldrb.w	r3, [sp, #247]	; 0xf7
    9476:	f8bd b0f0 	ldrh.w	fp, [sp, #240]	; 0xf0
    947a:	f8bd a0f2 	ldrh.w	sl, [sp, #242]	; 0xf2
    947e:	f8bd 80f4 	ldrh.w	r8, [sp, #244]	; 0xf4
    9482:	f89d c0f8 	ldrb.w	ip, [sp, #248]	; 0xf8
    9486:	f8bd e0fa 	ldrh.w	lr, [sp, #250]	; 0xfa
    948a:	f8bd 60fc 	ldrh.w	r6, [sp, #252]	; 0xfc
    948e:	f8c7 50c4 	str.w	r5, [r7, #196]	; 0xc4
    9492:	f8c7 00c8 	str.w	r0, [r7, #200]	; 0xc8
    9496:	f8bd 50fe 	ldrh.w	r5, [sp, #254]	; 0xfe
    949a:	f8bd 0100 	ldrh.w	r0, [sp, #256]	; 0x100
    949e:	f8c7 10cc 	str.w	r1, [r7, #204]	; 0xcc
    94a2:	f887 20d6 	strb.w	r2, [r7, #214]	; 0xd6
    94a6:	f8bd 1102 	ldrh.w	r1, [sp, #258]	; 0x102
    94aa:	f89d 2104 	ldrb.w	r2, [sp, #260]	; 0x104
    94ae:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
    94b2:	9b42      	ldr	r3, [sp, #264]	; 0x108
    94b4:	f8a7 b0d0 	strh.w	fp, [r7, #208]	; 0xd0
    94b8:	f8a7 a0d2 	strh.w	sl, [r7, #210]	; 0xd2
    94bc:	f8a7 80d4 	strh.w	r8, [r7, #212]	; 0xd4
    94c0:	f887 c0d8 	strb.w	ip, [r7, #216]	; 0xd8
    94c4:	f8a7 e0da 	strh.w	lr, [r7, #218]	; 0xda
    94c8:	f8a7 60dc 	strh.w	r6, [r7, #220]	; 0xdc
    94cc:	f8a7 50de 	strh.w	r5, [r7, #222]	; 0xde
    94d0:	f8a7 00e0 	strh.w	r0, [r7, #224]	; 0xe0
    94d4:	f887 20e4 	strb.w	r2, [r7, #228]	; 0xe4
    94d8:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    94dc:	f8a7 10e2 	strh.w	r1, [r7, #226]	; 0xe2
    94e0:	9943      	ldr	r1, [sp, #268]	; 0x10c
    94e2:	9d44      	ldr	r5, [sp, #272]	; 0x110
    94e4:	f89d 0114 	ldrb.w	r0, [sp, #276]	; 0x114
    94e8:	f89d e115 	ldrb.w	lr, [sp, #277]	; 0x115
    94ec:	f89d 6116 	ldrb.w	r6, [sp, #278]	; 0x116
    94f0:	f8bd 2118 	ldrh.w	r2, [sp, #280]	; 0x118
    94f4:	9b47      	ldr	r3, [sp, #284]	; 0x11c
    94f6:	f89d 8120 	ldrb.w	r8, [sp, #288]	; 0x120
    94fa:	f89d c121 	ldrb.w	ip, [sp, #289]	; 0x121
    94fe:	f8c7 10ec 	str.w	r1, [r7, #236]	; 0xec
    9502:	f8c7 50f0 	str.w	r5, [r7, #240]	; 0xf0
    9506:	994b      	ldr	r1, [sp, #300]	; 0x12c
    9508:	9d49      	ldr	r5, [sp, #292]	; 0x124
    950a:	f887 00f4 	strb.w	r0, [r7, #244]	; 0xf4
    950e:	f887 e0f5 	strb.w	lr, [r7, #245]	; 0xf5
    9512:	984a      	ldr	r0, [sp, #296]	; 0x128
    9514:	f8bd e130 	ldrh.w	lr, [sp, #304]	; 0x130
    9518:	f887 60f6 	strb.w	r6, [r7, #246]	; 0xf6
    951c:	f8a7 20f8 	strh.w	r2, [r7, #248]	; 0xf8
    9520:	f8bd 6132 	ldrh.w	r6, [sp, #306]	; 0x132
    9524:	f89d 2134 	ldrb.w	r2, [sp, #308]	; 0x134
    9528:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
    952c:	9b4e      	ldr	r3, [sp, #312]	; 0x138
    952e:	f887 8100 	strb.w	r8, [r7, #256]	; 0x100
    9532:	f887 c101 	strb.w	ip, [r7, #257]	; 0x101
    9536:	f8c7 0108 	str.w	r0, [r7, #264]	; 0x108
    953a:	f8c7 110c 	str.w	r1, [r7, #268]	; 0x10c
    953e:	f8a7 e110 	strh.w	lr, [r7, #272]	; 0x110
    9542:	f8a7 6112 	strh.w	r6, [r7, #274]	; 0x112
    9546:	f887 2114 	strb.w	r2, [r7, #276]	; 0x114
    954a:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
    954e:	f8c7 5104 	str.w	r5, [r7, #260]	; 0x104
    9552:	9d4f      	ldr	r5, [sp, #316]	; 0x13c
    9554:	9b50      	ldr	r3, [sp, #320]	; 0x140
    9556:	9851      	ldr	r0, [sp, #324]	; 0x144
    9558:	9952      	ldr	r1, [sp, #328]	; 0x148
    955a:	f89d c14c 	ldrb.w	ip, [sp, #332]	; 0x14c
    955e:	f89d e14d 	ldrb.w	lr, [sp, #333]	; 0x14d
    9562:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
    9566:	9b54      	ldr	r3, [sp, #336]	; 0x150
    9568:	f89d 614e 	ldrb.w	r6, [sp, #334]	; 0x14e
    956c:	f8bd 8154 	ldrh.w	r8, [sp, #340]	; 0x154
    9570:	f89d a15d 	ldrb.w	sl, [sp, #349]	; 0x15d
    9574:	f8c7 511c 	str.w	r5, [r7, #284]	; 0x11c
    9578:	f8c7 0124 	str.w	r0, [r7, #292]	; 0x124
    957c:	f89d 514f 	ldrb.w	r5, [sp, #335]	; 0x14f
    9580:	f8bd 0156 	ldrh.w	r0, [sp, #342]	; 0x156
    9584:	f8c7 1128 	str.w	r1, [r7, #296]	; 0x128
    9588:	f887 c12c 	strb.w	ip, [r7, #300]	; 0x12c
    958c:	f8bd 1158 	ldrh.w	r1, [sp, #344]	; 0x158
    9590:	f89d c15c 	ldrb.w	ip, [sp, #348]	; 0x15c
    9594:	f887 e12d 	strb.w	lr, [r7, #301]	; 0x12d
    9598:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
    959c:	f8bd e15a 	ldrh.w	lr, [sp, #346]	; 0x15a
    95a0:	f89d 315e 	ldrb.w	r3, [sp, #350]	; 0x15e
                              &Mtr1_B, &Mtr1_HLFB, 5, EVSYS_M1);
    ConnectorM2 = MotorDriver(ShiftRegister::SR_EN_OUT_2_MASK,
    95a4:	4aca      	ldr	r2, [pc, #808]	; (98d0 <_ZN9ClearCore10SysManagerC1Ev+0x1318>)
    95a6:	f8a7 e13a 	strh.w	lr, [r7, #314]	; 0x13a
    95aa:	f887 c13c 	strb.w	ip, [r7, #316]	; 0x13c
    95ae:	f887 612e 	strb.w	r6, [r7, #302]	; 0x12e
    95b2:	f887 512f 	strb.w	r5, [r7, #303]	; 0x12f
    95b6:	f8a7 8134 	strh.w	r8, [r7, #308]	; 0x134
    95ba:	2503      	movs	r5, #3
    95bc:	2602      	movs	r6, #2
    95be:	f8a7 0136 	strh.w	r0, [r7, #310]	; 0x136
    95c2:	f887 a13d 	strb.w	sl, [r7, #317]	; 0x13d
    95c6:	f887 313e 	strb.w	r3, [r7, #318]	; 0x13e
    95ca:	f8a7 1138 	strh.w	r1, [r7, #312]	; 0x138
    95ce:	9958      	ldr	r1, [sp, #352]	; 0x160
    95d0:	4bc0      	ldr	r3, [pc, #768]	; (98d4 <_ZN9ClearCore10SysManagerC1Ev+0x131c>)
    95d2:	e88d 0064 	stmia.w	sp, {r2, r5, r6}
    95d6:	a808      	add	r0, sp, #32
    95d8:	f8c7 1140 	str.w	r1, [r7, #320]	; 0x140
    95dc:	4abe      	ldr	r2, [pc, #760]	; (98d8 <_ZN9ClearCore10SysManagerC1Ev+0x1320>)
    95de:	4fbf      	ldr	r7, [pc, #764]	; (98dc <_ZN9ClearCore10SysManagerC1Ev+0x1324>)
    95e0:	f44f 7100 	mov.w	r1, #512	; 0x200
    95e4:	f7fc f89a 	bl	571c <_ZN9ClearCore11MotorDriverC1ENS_13ShiftRegister5MasksEPK15PeripheralRouteS5_S5_tt>
    95e8:	f8bd c024 	ldrh.w	ip, [sp, #36]	; 0x24
    95ec:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    95ee:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    95f0:	990d      	ldr	r1, [sp, #52]	; 0x34
    95f2:	f89d e026 	ldrb.w	lr, [sp, #38]	; 0x26
    95f6:	980c      	ldr	r0, [sp, #48]	; 0x30
    95f8:	f8a7 c004 	strh.w	ip, [r7, #4]
    95fc:	60ba      	str	r2, [r7, #8]
    95fe:	f89d c038 	ldrb.w	ip, [sp, #56]	; 0x38
    9602:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
    9604:	60fb      	str	r3, [r7, #12]
    9606:	6179      	str	r1, [r7, #20]
    9608:	9b10      	ldr	r3, [sp, #64]	; 0x40
    960a:	9915      	ldr	r1, [sp, #84]	; 0x54
    960c:	f89d 8048 	ldrb.w	r8, [sp, #72]	; 0x48
    9610:	f887 e006 	strb.w	lr, [r7, #6]
    9614:	6138      	str	r0, [r7, #16]
    9616:	f89d e039 	ldrb.w	lr, [sp, #57]	; 0x39
    961a:	9811      	ldr	r0, [sp, #68]	; 0x44
    961c:	f887 c018 	strb.w	ip, [r7, #24]
    9620:	61fa      	str	r2, [r7, #28]
    9622:	f8dd c04a 	ldr.w	ip, [sp, #74]	; 0x4a
    9626:	9a16      	ldr	r2, [sp, #88]	; 0x58
    9628:	623b      	str	r3, [r7, #32]
    962a:	6379      	str	r1, [r7, #52]	; 0x34
    962c:	f89d 305c 	ldrb.w	r3, [sp, #92]	; 0x5c
    9630:	f887 e019 	strb.w	lr, [r7, #25]
    9634:	a919      	add	r1, sp, #100	; 0x64
    9636:	6278      	str	r0, [r7, #36]	; 0x24
    9638:	f887 8028 	strb.w	r8, [r7, #40]	; 0x28
    963c:	63ba      	str	r2, [r7, #56]	; 0x38
    963e:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
    9642:	f8c7 c02a 	str.w	ip, [r7, #42]	; 0x2a
    9646:	f89d c05d 	ldrb.w	ip, [sp, #93]	; 0x5d
    964a:	f89d 0060 	ldrb.w	r0, [sp, #96]	; 0x60
    964e:	f89d e05e 	ldrb.w	lr, [sp, #94]	; 0x5e
    9652:	f887 0040 	strb.w	r0, [r7, #64]	; 0x40
    9656:	c90e      	ldmia	r1, {r1, r2, r3}
    9658:	e9dd ab22 	ldrd	sl, fp, [sp, #136]	; 0x88
    965c:	f89d 0072 	ldrb.w	r0, [sp, #114]	; 0x72
    9660:	6479      	str	r1, [r7, #68]	; 0x44
    9662:	64ba      	str	r2, [r7, #72]	; 0x48
    9664:	991d      	ldr	r1, [sp, #116]	; 0x74
    9666:	9a1e      	ldr	r2, [sp, #120]	; 0x78
    9668:	f887 c03d 	strb.w	ip, [r7, #61]	; 0x3d
    966c:	f887 e03e 	strb.w	lr, [r7, #62]	; 0x3e
    9670:	f89d c070 	ldrb.w	ip, [sp, #112]	; 0x70
    9674:	f89d e071 	ldrb.w	lr, [sp, #113]	; 0x71
    9678:	64fb      	str	r3, [r7, #76]	; 0x4c
    967a:	f887 0052 	strb.w	r0, [r7, #82]	; 0x52
    967e:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
    9680:	9820      	ldr	r0, [sp, #128]	; 0x80
    9682:	6579      	str	r1, [r7, #84]	; 0x54
    9684:	65ba      	str	r2, [r7, #88]	; 0x58
    9686:	9924      	ldr	r1, [sp, #144]	; 0x90
    9688:	9a25      	ldr	r2, [sp, #148]	; 0x94
    968a:	f887 c050 	strb.w	ip, [r7, #80]	; 0x50
    968e:	f887 e051 	strb.w	lr, [r7, #81]	; 0x51
    9692:	65fb      	str	r3, [r7, #92]	; 0x5c
    9694:	e9c7 ab1a 	strd	sl, fp, [r7, #104]	; 0x68
    9698:	677a      	str	r2, [r7, #116]	; 0x74
    969a:	6638      	str	r0, [r7, #96]	; 0x60
    969c:	6739      	str	r1, [r7, #112]	; 0x70
    969e:	e9dd 0126 	ldrd	r0, r1, [sp, #152]	; 0x98
    96a2:	9b28      	ldr	r3, [sp, #160]	; 0xa0
    96a4:	9a2c      	ldr	r2, [sp, #176]	; 0xb0
    96a6:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    96aa:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
    96ae:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
    96b0:	9a2e      	ldr	r2, [sp, #184]	; 0xb8
    96b2:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    96b6:	f8c7 2098 	str.w	r2, [r7, #152]	; 0x98
    96ba:	9b2f      	ldr	r3, [sp, #188]	; 0xbc
    96bc:	9a30      	ldr	r2, [sp, #192]	; 0xc0
    96be:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    96c2:	f8c7 20a0 	str.w	r2, [r7, #160]	; 0xa0
    96c6:	9b31      	ldr	r3, [sp, #196]	; 0xc4
    96c8:	9a32      	ldr	r2, [sp, #200]	; 0xc8
    96ca:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    96ce:	e9dd ab2a 	ldrd	sl, fp, [sp, #168]	; 0xa8
    96d2:	9b33      	ldr	r3, [sp, #204]	; 0xcc
    96d4:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
    96d8:	9a34      	ldr	r2, [sp, #208]	; 0xd0
    96da:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    96de:	f8c7 20b0 	str.w	r2, [r7, #176]	; 0xb0
    96e2:	9b35      	ldr	r3, [sp, #212]	; 0xd4
    96e4:	9a36      	ldr	r2, [sp, #216]	; 0xd8
    96e6:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    96ea:	e9c7 011e 	strd	r0, r1, [r7, #120]	; 0x78
    96ee:	9b37      	ldr	r3, [sp, #220]	; 0xdc
    96f0:	f8c7 20b8 	str.w	r2, [r7, #184]	; 0xb8
    96f4:	a939      	add	r1, sp, #228	; 0xe4
    96f6:	9a38      	ldr	r2, [sp, #224]	; 0xe0
    96f8:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    96fc:	e9c7 ab22 	strd	sl, fp, [r7, #136]	; 0x88
    9700:	f8c7 20c0 	str.w	r2, [r7, #192]	; 0xc0
    9704:	c90e      	ldmia	r1, {r1, r2, r3}
    9706:	f8bd c0f2 	ldrh.w	ip, [sp, #242]	; 0xf2
    970a:	f8bd e0f4 	ldrh.w	lr, [sp, #244]	; 0xf4
    970e:	f89d 00f6 	ldrb.w	r0, [sp, #246]	; 0xf6
    9712:	f8c7 10c4 	str.w	r1, [r7, #196]	; 0xc4
    9716:	f8c7 20c8 	str.w	r2, [r7, #200]	; 0xc8
    971a:	f89d 10f7 	ldrb.w	r1, [sp, #247]	; 0xf7
    971e:	f89d 20f8 	ldrb.w	r2, [sp, #248]	; 0xf8
    9722:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    9726:	f8bd 30fa 	ldrh.w	r3, [sp, #250]	; 0xfa
    972a:	f8bd 80f0 	ldrh.w	r8, [sp, #240]	; 0xf0
    972e:	f8a7 c0d2 	strh.w	ip, [r7, #210]	; 0xd2
    9732:	f8a7 e0d4 	strh.w	lr, [r7, #212]	; 0xd4
    9736:	f8bd c0fc 	ldrh.w	ip, [sp, #252]	; 0xfc
    973a:	f8bd e0fe 	ldrh.w	lr, [sp, #254]	; 0xfe
    973e:	f887 00d6 	strb.w	r0, [r7, #214]	; 0xd6
    9742:	f887 10d7 	strb.w	r1, [r7, #215]	; 0xd7
    9746:	f8bd 0100 	ldrh.w	r0, [sp, #256]	; 0x100
    974a:	f8bd 1102 	ldrh.w	r1, [sp, #258]	; 0x102
    974e:	f887 20d8 	strb.w	r2, [r7, #216]	; 0xd8
    9752:	f8a7 30da 	strh.w	r3, [r7, #218]	; 0xda
    9756:	f89d 2104 	ldrb.w	r2, [sp, #260]	; 0x104
    975a:	9b42      	ldr	r3, [sp, #264]	; 0x108
    975c:	f8a7 80d0 	strh.w	r8, [r7, #208]	; 0xd0
    9760:	f8a7 c0dc 	strh.w	ip, [r7, #220]	; 0xdc
    9764:	f8a7 e0de 	strh.w	lr, [r7, #222]	; 0xde
    9768:	f8a7 00e0 	strh.w	r0, [r7, #224]	; 0xe0
    976c:	f8a7 10e2 	strh.w	r1, [r7, #226]	; 0xe2
    9770:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    9774:	f887 20e4 	strb.w	r2, [r7, #228]	; 0xe4
    9778:	9a43      	ldr	r2, [sp, #268]	; 0x10c
    977a:	f8dd e110 	ldr.w	lr, [sp, #272]	; 0x110
    977e:	f89d 8114 	ldrb.w	r8, [sp, #276]	; 0x114
    9782:	f89d c115 	ldrb.w	ip, [sp, #277]	; 0x115
    9786:	f89d 3116 	ldrb.w	r3, [sp, #278]	; 0x116
    978a:	f8bd 0118 	ldrh.w	r0, [sp, #280]	; 0x118
    978e:	9947      	ldr	r1, [sp, #284]	; 0x11c
    9790:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
    9794:	f8c7 e0f0 	str.w	lr, [r7, #240]	; 0xf0
    9798:	9a49      	ldr	r2, [sp, #292]	; 0x124
    979a:	f89d e120 	ldrb.w	lr, [sp, #288]	; 0x120
    979e:	f887 80f4 	strb.w	r8, [r7, #244]	; 0xf4
    97a2:	f887 c0f5 	strb.w	ip, [r7, #245]	; 0xf5
    97a6:	f89d 8121 	ldrb.w	r8, [sp, #289]	; 0x121
    97aa:	f8bd c130 	ldrh.w	ip, [sp, #304]	; 0x130
    97ae:	f887 30f6 	strb.w	r3, [r7, #246]	; 0xf6
    97b2:	f8a7 00f8 	strh.w	r0, [r7, #248]	; 0xf8
    97b6:	9b4a      	ldr	r3, [sp, #296]	; 0x128
    97b8:	984b      	ldr	r0, [sp, #300]	; 0x12c
    97ba:	f8c7 10fc 	str.w	r1, [r7, #252]	; 0xfc
    97be:	f887 e100 	strb.w	lr, [r7, #256]	; 0x100
    97c2:	f89d 1134 	ldrb.w	r1, [sp, #308]	; 0x134
    97c6:	f8bd e132 	ldrh.w	lr, [sp, #306]	; 0x132
    97ca:	f8c7 2104 	str.w	r2, [r7, #260]	; 0x104
    97ce:	9a4e      	ldr	r2, [sp, #312]	; 0x138
    97d0:	f887 8101 	strb.w	r8, [r7, #257]	; 0x101
    97d4:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
    97d8:	f8c7 010c 	str.w	r0, [r7, #268]	; 0x10c
    97dc:	f8a7 c110 	strh.w	ip, [r7, #272]	; 0x110
    97e0:	f8a7 e112 	strh.w	lr, [r7, #274]	; 0x112
    97e4:	f8c7 2118 	str.w	r2, [r7, #280]	; 0x118
    97e8:	f887 1114 	strb.w	r1, [r7, #276]	; 0x114
    97ec:	994f      	ldr	r1, [sp, #316]	; 0x13c
    97ee:	9b51      	ldr	r3, [sp, #324]	; 0x144
    97f0:	9a50      	ldr	r2, [sp, #320]	; 0x140
    97f2:	f8c7 111c 	str.w	r1, [r7, #284]	; 0x11c
    97f6:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
    97fa:	f89d 114d 	ldrb.w	r1, [sp, #333]	; 0x14d
    97fe:	f89d 314f 	ldrb.w	r3, [sp, #335]	; 0x14f
    9802:	9852      	ldr	r0, [sp, #328]	; 0x148
    9804:	f89d c14e 	ldrb.w	ip, [sp, #334]	; 0x14e
    9808:	f8c7 2120 	str.w	r2, [r7, #288]	; 0x120
    980c:	f887 112d 	strb.w	r1, [r7, #301]	; 0x12d
    9810:	9a54      	ldr	r2, [sp, #336]	; 0x150
    9812:	f8bd 1154 	ldrh.w	r1, [sp, #340]	; 0x154
    9816:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
    981a:	f8bd 3158 	ldrh.w	r3, [sp, #344]	; 0x158
    981e:	f89d a14c 	ldrb.w	sl, [sp, #332]	; 0x14c
    9822:	f8c7 0128 	str.w	r0, [r7, #296]	; 0x128
    9826:	f887 c12e 	strb.w	ip, [r7, #302]	; 0x12e
    982a:	f8bd 015a 	ldrh.w	r0, [sp, #346]	; 0x15a
    982e:	f8bd c156 	ldrh.w	ip, [sp, #342]	; 0x156
    9832:	f8c7 2130 	str.w	r2, [r7, #304]	; 0x130
    9836:	f8a7 1134 	strh.w	r1, [r7, #308]	; 0x134
    983a:	f89d 215d 	ldrb.w	r2, [sp, #349]	; 0x15d
    983e:	f89d 115c 	ldrb.w	r1, [sp, #348]	; 0x15c
    9842:	f8a7 3138 	strh.w	r3, [r7, #312]	; 0x138
    9846:	f89d 315e 	ldrb.w	r3, [sp, #350]	; 0x15e
    984a:	f8a7 c136 	strh.w	ip, [r7, #310]	; 0x136
                              &Mtr2_An_Sdrvr2_PWMA, &Mtr2_B_Sdrvr2_PWMB,
                              &Mtr2_HLFB_Sdrvr2_Trig, 3, EVSYS_M2);
    ConnectorM3 = MotorDriver(ShiftRegister::SR_EN_OUT_3_MASK,
    984e:	f04f 0800 	mov.w	r8, #0
    9852:	f8df e098 	ldr.w	lr, [pc, #152]	; 98ec <_ZN9ClearCore10SysManagerC1Ev+0x1334>
    9856:	f887 a12c 	strb.w	sl, [r7, #300]	; 0x12c
    985a:	f8a7 013a 	strh.w	r0, [r7, #314]	; 0x13a
    985e:	f887 213d 	strb.w	r2, [r7, #317]	; 0x13d
    9862:	f887 313e 	strb.w	r3, [r7, #318]	; 0x13e
    9866:	f887 113c 	strb.w	r1, [r7, #316]	; 0x13c
    986a:	9958      	ldr	r1, [sp, #352]	; 0x160
    986c:	4b1c      	ldr	r3, [pc, #112]	; (98e0 <_ZN9ClearCore10SysManagerC1Ev+0x1328>)
    986e:	9502      	str	r5, [sp, #8]
    9870:	f8cd 8004 	str.w	r8, [sp, #4]
    9874:	f8cd e000 	str.w	lr, [sp]
    9878:	a808      	add	r0, sp, #32
    987a:	f8c7 1140 	str.w	r1, [r7, #320]	; 0x140
    987e:	4a19      	ldr	r2, [pc, #100]	; (98e4 <_ZN9ClearCore10SysManagerC1Ev+0x132c>)
    9880:	4f19      	ldr	r7, [pc, #100]	; (98e8 <_ZN9ClearCore10SysManagerC1Ev+0x1330>)
    9882:	f44f 7180 	mov.w	r1, #256	; 0x100
    9886:	f7fb ff49 	bl	571c <_ZN9ClearCore11MotorDriverC1ENS_13ShiftRegister5MasksEPK15PeripheralRouteS5_S5_tt>
    988a:	a80a      	add	r0, sp, #40	; 0x28
    988c:	c807      	ldmia	r0, {r0, r1, r2}
    988e:	f8bd 3024 	ldrh.w	r3, [sp, #36]	; 0x24
    9892:	f89d e026 	ldrb.w	lr, [sp, #38]	; 0x26
    9896:	80bb      	strh	r3, [r7, #4]
    9898:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    989a:	f887 e006 	strb.w	lr, [r7, #6]
    989e:	60b8      	str	r0, [r7, #8]
    98a0:	f89d e038 	ldrb.w	lr, [sp, #56]	; 0x38
    98a4:	f89d 0039 	ldrb.w	r0, [sp, #57]	; 0x39
    98a8:	60f9      	str	r1, [r7, #12]
    98aa:	613a      	str	r2, [r7, #16]
    98ac:	990f      	ldr	r1, [sp, #60]	; 0x3c
    98ae:	9a10      	ldr	r2, [sp, #64]	; 0x40
    98b0:	617b      	str	r3, [r7, #20]
    98b2:	9b11      	ldr	r3, [sp, #68]	; 0x44
    98b4:	f887 e018 	strb.w	lr, [r7, #24]
    98b8:	7678      	strb	r0, [r7, #25]
    98ba:	f89d e048 	ldrb.w	lr, [sp, #72]	; 0x48
    98be:	f8dd 004a 	ldr.w	r0, [sp, #74]	; 0x4a
    98c2:	61f9      	str	r1, [r7, #28]
    98c4:	623a      	str	r2, [r7, #32]
    98c6:	9915      	ldr	r1, [sp, #84]	; 0x54
    98c8:	9a16      	ldr	r2, [sp, #88]	; 0x58
    98ca:	627b      	str	r3, [r7, #36]	; 0x24
    98cc:	e010      	b.n	98f0 <_ZN9ClearCore10SysManagerC1Ev+0x1338>
    98ce:	bf00      	nop
    98d0:	00022cf0 	.word	0x00022cf0
    98d4:	00022c90 	.word	0x00022c90
    98d8:	00022cd0 	.word	0x00022cd0
    98dc:	20000f20 	.word	0x20000f20
    98e0:	00022ca0 	.word	0x00022ca0
    98e4:	00022ce0 	.word	0x00022ce0
    98e8:	20001068 	.word	0x20001068
    98ec:	00022d00 	.word	0x00022d00
    98f0:	f89d 305c 	ldrb.w	r3, [sp, #92]	; 0x5c
    98f4:	f8c7 002a 	str.w	r0, [r7, #42]	; 0x2a
    98f8:	6379      	str	r1, [r7, #52]	; 0x34
    98fa:	63ba      	str	r2, [r7, #56]	; 0x38
    98fc:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
    9900:	f887 e028 	strb.w	lr, [r7, #40]	; 0x28
    9904:	f89d e05d 	ldrb.w	lr, [sp, #93]	; 0x5d
    9908:	f89d 3060 	ldrb.w	r3, [sp, #96]	; 0x60
    990c:	9919      	ldr	r1, [sp, #100]	; 0x64
    990e:	9a1a      	ldr	r2, [sp, #104]	; 0x68
    9910:	f887 3040 	strb.w	r3, [r7, #64]	; 0x40
    9914:	e9dd ab22 	ldrd	sl, fp, [sp, #136]	; 0x88
    9918:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
    991a:	6479      	str	r1, [r7, #68]	; 0x44
    991c:	64ba      	str	r2, [r7, #72]	; 0x48
    991e:	f89d 1071 	ldrb.w	r1, [sp, #113]	; 0x71
    9922:	f89d 2072 	ldrb.w	r2, [sp, #114]	; 0x72
    9926:	f89d 005e 	ldrb.w	r0, [sp, #94]	; 0x5e
    992a:	64fb      	str	r3, [r7, #76]	; 0x4c
    992c:	f887 1051 	strb.w	r1, [r7, #81]	; 0x51
    9930:	9b1d      	ldr	r3, [sp, #116]	; 0x74
    9932:	991e      	ldr	r1, [sp, #120]	; 0x78
    9934:	f887 2052 	strb.w	r2, [r7, #82]	; 0x52
    9938:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
    993a:	f887 003e 	strb.w	r0, [r7, #62]	; 0x3e
    993e:	657b      	str	r3, [r7, #84]	; 0x54
    9940:	f89d 0070 	ldrb.w	r0, [sp, #112]	; 0x70
    9944:	9b20      	ldr	r3, [sp, #128]	; 0x80
    9946:	65b9      	str	r1, [r7, #88]	; 0x58
    9948:	65fa      	str	r2, [r7, #92]	; 0x5c
    994a:	9924      	ldr	r1, [sp, #144]	; 0x90
    994c:	9a25      	ldr	r2, [sp, #148]	; 0x94
    994e:	f887 e03d 	strb.w	lr, [r7, #61]	; 0x3d
    9952:	f887 0050 	strb.w	r0, [r7, #80]	; 0x50
    9956:	e9c7 ab1a 	strd	sl, fp, [r7, #104]	; 0x68
    995a:	6739      	str	r1, [r7, #112]	; 0x70
    995c:	663b      	str	r3, [r7, #96]	; 0x60
    995e:	677a      	str	r2, [r7, #116]	; 0x74
    9960:	e9dd 2326 	ldrd	r2, r3, [sp, #152]	; 0x98
    9964:	9928      	ldr	r1, [sp, #160]	; 0xa0
    9966:	f8c7 1080 	str.w	r1, [r7, #128]	; 0x80
    996a:	992c      	ldr	r1, [sp, #176]	; 0xb0
    996c:	f8c7 1090 	str.w	r1, [r7, #144]	; 0x90
    9970:	992d      	ldr	r1, [sp, #180]	; 0xb4
    9972:	f8c7 1094 	str.w	r1, [r7, #148]	; 0x94
    9976:	992e      	ldr	r1, [sp, #184]	; 0xb8
    9978:	f8c7 1098 	str.w	r1, [r7, #152]	; 0x98
    997c:	992f      	ldr	r1, [sp, #188]	; 0xbc
    997e:	f8c7 109c 	str.w	r1, [r7, #156]	; 0x9c
    9982:	9930      	ldr	r1, [sp, #192]	; 0xc0
    9984:	f8c7 10a0 	str.w	r1, [r7, #160]	; 0xa0
    9988:	9931      	ldr	r1, [sp, #196]	; 0xc4
    998a:	f8c7 10a4 	str.w	r1, [r7, #164]	; 0xa4
    998e:	9932      	ldr	r1, [sp, #200]	; 0xc8
    9990:	f8c7 10a8 	str.w	r1, [r7, #168]	; 0xa8
    9994:	9933      	ldr	r1, [sp, #204]	; 0xcc
    9996:	f8c7 10ac 	str.w	r1, [r7, #172]	; 0xac
    999a:	9934      	ldr	r1, [sp, #208]	; 0xd0
    999c:	f8c7 10b0 	str.w	r1, [r7, #176]	; 0xb0
    99a0:	9935      	ldr	r1, [sp, #212]	; 0xd4
    99a2:	f8c7 10b4 	str.w	r1, [r7, #180]	; 0xb4
    99a6:	e9dd ab2a 	ldrd	sl, fp, [sp, #168]	; 0xa8
    99aa:	9936      	ldr	r1, [sp, #216]	; 0xd8
    99ac:	f8c7 10b8 	str.w	r1, [r7, #184]	; 0xb8
    99b0:	9937      	ldr	r1, [sp, #220]	; 0xdc
    99b2:	f8c7 10bc 	str.w	r1, [r7, #188]	; 0xbc
    99b6:	9938      	ldr	r1, [sp, #224]	; 0xe0
    99b8:	f8c7 10c0 	str.w	r1, [r7, #192]	; 0xc0
    99bc:	e9c7 ab22 	strd	sl, fp, [r7, #136]	; 0x88
    99c0:	e9c7 231e 	strd	r2, r3, [r7, #120]	; 0x78
    99c4:	9b39      	ldr	r3, [sp, #228]	; 0xe4
    99c6:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
    99ca:	983a      	ldr	r0, [sp, #232]	; 0xe8
    99cc:	993b      	ldr	r1, [sp, #236]	; 0xec
    99ce:	f8bd 20f2 	ldrh.w	r2, [sp, #242]	; 0xf2
    99d2:	f8bd 30f4 	ldrh.w	r3, [sp, #244]	; 0xf4
    99d6:	f89d e0f6 	ldrb.w	lr, [sp, #246]	; 0xf6
    99da:	f8c7 00c8 	str.w	r0, [r7, #200]	; 0xc8
    99de:	f8c7 10cc 	str.w	r1, [r7, #204]	; 0xcc
    99e2:	f89d 00f7 	ldrb.w	r0, [sp, #247]	; 0xf7
    99e6:	f89d 10f8 	ldrb.w	r1, [sp, #248]	; 0xf8
    99ea:	f8a7 20d2 	strh.w	r2, [r7, #210]	; 0xd2
    99ee:	f8a7 30d4 	strh.w	r3, [r7, #212]	; 0xd4
    99f2:	f8bd 20fa 	ldrh.w	r2, [sp, #250]	; 0xfa
    99f6:	f8bd 30fc 	ldrh.w	r3, [sp, #252]	; 0xfc
    99fa:	f8bd c0f0 	ldrh.w	ip, [sp, #240]	; 0xf0
    99fe:	f887 e0d6 	strb.w	lr, [r7, #214]	; 0xd6
    9a02:	f887 00d7 	strb.w	r0, [r7, #215]	; 0xd7
    9a06:	f8bd e0fe 	ldrh.w	lr, [sp, #254]	; 0xfe
    9a0a:	f8bd 0100 	ldrh.w	r0, [sp, #256]	; 0x100
    9a0e:	f887 10d8 	strb.w	r1, [r7, #216]	; 0xd8
    9a12:	f8a7 20da 	strh.w	r2, [r7, #218]	; 0xda
    9a16:	f8bd 1102 	ldrh.w	r1, [sp, #258]	; 0x102
    9a1a:	f89d 2104 	ldrb.w	r2, [sp, #260]	; 0x104
    9a1e:	f8a7 30dc 	strh.w	r3, [r7, #220]	; 0xdc
    9a22:	9b42      	ldr	r3, [sp, #264]	; 0x108
    9a24:	f8a7 c0d0 	strh.w	ip, [r7, #208]	; 0xd0
    9a28:	f8a7 e0de 	strh.w	lr, [r7, #222]	; 0xde
    9a2c:	f8a7 00e0 	strh.w	r0, [r7, #224]	; 0xe0
    9a30:	f8a7 10e2 	strh.w	r1, [r7, #226]	; 0xe2
    9a34:	f887 20e4 	strb.w	r2, [r7, #228]	; 0xe4
    9a38:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    9a3c:	9b43      	ldr	r3, [sp, #268]	; 0x10c
    9a3e:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    9a42:	9844      	ldr	r0, [sp, #272]	; 0x110
    9a44:	f89d e114 	ldrb.w	lr, [sp, #276]	; 0x114
    9a48:	f89d 1115 	ldrb.w	r1, [sp, #277]	; 0x115
    9a4c:	f89d 2116 	ldrb.w	r2, [sp, #278]	; 0x116
    9a50:	f8bd 3118 	ldrh.w	r3, [sp, #280]	; 0x118
    9a54:	f8c7 00f0 	str.w	r0, [r7, #240]	; 0xf0
    9a58:	f887 e0f4 	strb.w	lr, [r7, #244]	; 0xf4
    9a5c:	9847      	ldr	r0, [sp, #284]	; 0x11c
    9a5e:	f89d e120 	ldrb.w	lr, [sp, #288]	; 0x120
    9a62:	f887 10f5 	strb.w	r1, [r7, #245]	; 0xf5
    9a66:	f887 20f6 	strb.w	r2, [r7, #246]	; 0xf6
    9a6a:	f89d 1121 	ldrb.w	r1, [sp, #289]	; 0x121
    9a6e:	9a49      	ldr	r2, [sp, #292]	; 0x124
    9a70:	f8a7 30f8 	strh.w	r3, [r7, #248]	; 0xf8
    9a74:	9b4a      	ldr	r3, [sp, #296]	; 0x128
    9a76:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    9a7a:	f887 e100 	strb.w	lr, [r7, #256]	; 0x100
    9a7e:	984b      	ldr	r0, [sp, #300]	; 0x12c
    9a80:	f8bd e130 	ldrh.w	lr, [sp, #304]	; 0x130
    9a84:	f887 1101 	strb.w	r1, [r7, #257]	; 0x101
    9a88:	f8c7 2104 	str.w	r2, [r7, #260]	; 0x104
    9a8c:	f8bd 1132 	ldrh.w	r1, [sp, #306]	; 0x132
    9a90:	f89d 2134 	ldrb.w	r2, [sp, #308]	; 0x134
    9a94:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
    9a98:	9b4e      	ldr	r3, [sp, #312]	; 0x138
    9a9a:	f8c7 010c 	str.w	r0, [r7, #268]	; 0x10c
    9a9e:	f8a7 e110 	strh.w	lr, [r7, #272]	; 0x110
    9aa2:	f8a7 1112 	strh.w	r1, [r7, #274]	; 0x112
    9aa6:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
    9aaa:	f887 2114 	strb.w	r2, [r7, #276]	; 0x114
    9aae:	9a4f      	ldr	r2, [sp, #316]	; 0x13c
    9ab0:	f8c7 211c 	str.w	r2, [r7, #284]	; 0x11c
    9ab4:	9850      	ldr	r0, [sp, #320]	; 0x140
    9ab6:	9951      	ldr	r1, [sp, #324]	; 0x144
    9ab8:	9a52      	ldr	r2, [sp, #328]	; 0x148
    9aba:	f8c7 0120 	str.w	r0, [r7, #288]	; 0x120
    9abe:	f8c7 1124 	str.w	r1, [r7, #292]	; 0x124
    9ac2:	f89d 014e 	ldrb.w	r0, [sp, #334]	; 0x14e
    9ac6:	f89d 114f 	ldrb.w	r1, [sp, #335]	; 0x14f
    9aca:	f8c7 2128 	str.w	r2, [r7, #296]	; 0x128
    9ace:	9a54      	ldr	r2, [sp, #336]	; 0x150
    9ad0:	f89d c14d 	ldrb.w	ip, [sp, #333]	; 0x14d
    9ad4:	f887 012e 	strb.w	r0, [r7, #302]	; 0x12e
    9ad8:	f887 112f 	strb.w	r1, [r7, #303]	; 0x12f
    9adc:	f8bd 0156 	ldrh.w	r0, [sp, #342]	; 0x156
    9ae0:	f8bd 1158 	ldrh.w	r1, [sp, #344]	; 0x158
    9ae4:	f8c7 2130 	str.w	r2, [r7, #304]	; 0x130
    9ae8:	f8bd 215a 	ldrh.w	r2, [sp, #346]	; 0x15a
    9aec:	f89d a14c 	ldrb.w	sl, [sp, #332]	; 0x14c
    9af0:	f887 c12d 	strb.w	ip, [r7, #301]	; 0x12d
    9af4:	f8a7 0136 	strh.w	r0, [r7, #310]	; 0x136
    9af8:	f8bd c154 	ldrh.w	ip, [sp, #340]	; 0x154
    9afc:	f89d 015c 	ldrb.w	r0, [sp, #348]	; 0x15c
    9b00:	f8a7 1138 	strh.w	r1, [r7, #312]	; 0x138
    9b04:	f8a7 213a 	strh.w	r2, [r7, #314]	; 0x13a
    9b08:	f89d 115d 	ldrb.w	r1, [sp, #349]	; 0x15d
    9b0c:	f89d 215e 	ldrb.w	r2, [sp, #350]	; 0x15e
    9b10:	f887 a12c 	strb.w	sl, [r7, #300]	; 0x12c
    9b14:	f8a7 c134 	strh.w	ip, [r7, #308]	; 0x134
    9b18:	f887 013c 	strb.w	r0, [r7, #316]	; 0x13c
    9b1c:	f887 113d 	strb.w	r1, [r7, #317]	; 0x13d
    9b20:	f887 213e 	strb.w	r2, [r7, #318]	; 0x13e
    9b24:	9a58      	ldr	r2, [sp, #352]	; 0x160
                              &Mtr3_An_Sdrvr3_PWMA, &Mtr3_B_Sdrvr3_PWMB,
                              &Mtr3_HLFB_Sdrvr3_Trig, 0, EVSYS_M3);

    ConnectorCOM0 = SerialDriver(0, ShiftRegister::SR_LED_COM_0_MASK,
    9b26:	f8df c208 	ldr.w	ip, [pc, #520]	; 9d30 <_ZN9ClearCore10SysManagerC1Ev+0x1778>
    9b2a:	9207      	str	r2, [sp, #28]
    9b2c:	f8df e204 	ldr.w	lr, [pc, #516]	; 9d34 <_ZN9ClearCore10SysManagerC1Ev+0x177c>
    9b30:	9505      	str	r5, [sp, #20]
    9b32:	4b78      	ldr	r3, [pc, #480]	; (9d14 <_ZN9ClearCore10SysManagerC1Ev+0x175c>)
    9b34:	9d07      	ldr	r5, [sp, #28]
    9b36:	4878      	ldr	r0, [pc, #480]	; (9d18 <_ZN9ClearCore10SysManagerC1Ev+0x1760>)
    9b38:	f8cd e010 	str.w	lr, [sp, #16]
    9b3c:	f44f 5200 	mov.w	r2, #8192	; 0x2000
    9b40:	e88d 1004 	stmia.w	sp, {r2, ip}
    9b44:	9303      	str	r3, [sp, #12]
    9b46:	9002      	str	r0, [sp, #8]
    9b48:	4641      	mov	r1, r8
    9b4a:	f8c7 5140 	str.w	r5, [r7, #320]	; 0x140
    9b4e:	f8df 81e8 	ldr.w	r8, [pc, #488]	; 9d38 <_ZN9ClearCore10SysManagerC1Ev+0x1780>
    9b52:	4d72      	ldr	r5, [pc, #456]	; (9d1c <_ZN9ClearCore10SysManagerC1Ev+0x1764>)
    9b54:	a808      	add	r0, sp, #32
    9b56:	f44f 3300 	mov.w	r3, #131072	; 0x20000
    9b5a:	f44f 2280 	mov.w	r2, #262144	; 0x40000
    9b5e:	f007 fd69 	bl	11634 <_ZN9ClearCore12SerialDriverC1EtNS_13ShiftRegister5MasksES2_S2_PK15PeripheralRouteS5_S5_S5_h>
    9b62:	990a      	ldr	r1, [sp, #40]	; 0x28
    9b64:	9a09      	ldr	r2, [sp, #36]	; 0x24
    9b66:	f89d 302c 	ldrb.w	r3, [sp, #44]	; 0x2c
    9b6a:	980c      	ldr	r0, [sp, #48]	; 0x30
    9b6c:	f8c8 1008 	str.w	r1, [r8, #8]
    9b70:	f8c8 2004 	str.w	r2, [r8, #4]
    9b74:	990d      	ldr	r1, [sp, #52]	; 0x34
    9b76:	9a0e      	ldr	r2, [sp, #56]	; 0x38
    9b78:	f888 300c 	strb.w	r3, [r8, #12]
    9b7c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    9b7e:	f8c8 0010 	str.w	r0, [r8, #16]
    9b82:	f8c8 1014 	str.w	r1, [r8, #20]
    9b86:	9810      	ldr	r0, [sp, #64]	; 0x40
    9b88:	9911      	ldr	r1, [sp, #68]	; 0x44
    9b8a:	f8c8 2018 	str.w	r2, [r8, #24]
    9b8e:	f8c8 301c 	str.w	r3, [r8, #28]
    9b92:	f89d 2048 	ldrb.w	r2, [sp, #72]	; 0x48
    9b96:	f89d 3049 	ldrb.w	r3, [sp, #73]	; 0x49
    9b9a:	f8c8 0020 	str.w	r0, [r8, #32]
    9b9e:	2780      	movs	r7, #128	; 0x80
    9ba0:	f89d 004a 	ldrb.w	r0, [sp, #74]	; 0x4a
    9ba4:	f8c8 1024 	str.w	r1, [r8, #36]	; 0x24
    9ba8:	f888 2028 	strb.w	r2, [r8, #40]	; 0x28
    9bac:	f8bd 104c 	ldrh.w	r1, [sp, #76]	; 0x4c
    9bb0:	f89d 204e 	ldrb.w	r2, [sp, #78]	; 0x4e
    9bb4:	f888 3029 	strb.w	r3, [r8, #41]	; 0x29
    9bb8:	f89d 304f 	ldrb.w	r3, [sp, #79]	; 0x4f
    9bbc:	f888 302f 	strb.w	r3, [r8, #47]	; 0x2f
    9bc0:	f888 002a 	strb.w	r0, [r8, #42]	; 0x2a
    9bc4:	f8a8 102c 	strh.w	r1, [r8, #44]	; 0x2c
    9bc8:	f888 202e 	strb.w	r2, [r8, #46]	; 0x2e
    9bcc:	a914      	add	r1, sp, #80	; 0x50
    9bce:	463a      	mov	r2, r7
    9bd0:	f108 0030 	add.w	r0, r8, #48	; 0x30
    9bd4:	f014 f9f4 	bl	1dfc0 <memcpy>
    9bd8:	463a      	mov	r2, r7
    9bda:	a934      	add	r1, sp, #208	; 0xd0
    9bdc:	f108 00b0 	add.w	r0, r8, #176	; 0xb0
    9be0:	f014 f9ee 	bl	1dfc0 <memcpy>
                                 ShiftRegister::SR_UART_SPI_SEL_0_MASK,
                                 ShiftRegister::SR_UART_TTL_0_MASK,
                                 &Com0_CTS_MISO, &Com0_RTS_SS, &Com0_RX_SCK,
                                 &Com0_TX_MOSI, PER_SERCOM_ALT);
    ConnectorCOM1 = SerialDriver(1, ShiftRegister::SR_LED_COM_1_MASK,
    9be4:	4b4e      	ldr	r3, [pc, #312]	; (9d20 <_ZN9ClearCore10SysManagerC1Ev+0x1768>)
    9be6:	9303      	str	r3, [sp, #12]
    9be8:	484e      	ldr	r0, [pc, #312]	; (9d24 <_ZN9ClearCore10SysManagerC1Ev+0x176c>)
    9bea:	4a4f      	ldr	r2, [pc, #316]	; (9d28 <_ZN9ClearCore10SysManagerC1Ev+0x1770>)
    9bec:	9002      	str	r0, [sp, #8]
    9bee:	f44f 5380 	mov.w	r3, #4096	; 0x1000
    9bf2:	9201      	str	r2, [sp, #4]
    9bf4:	9300      	str	r3, [sp, #0]
    9bf6:	9854      	ldr	r0, [sp, #336]	; 0x150
    9bf8:	9a55      	ldr	r2, [sp, #340]	; 0x154
    9bfa:	9b56      	ldr	r3, [sp, #344]	; 0x158
    9bfc:	9605      	str	r6, [sp, #20]
    9bfe:	4621      	mov	r1, r4
    9c00:	9c57      	ldr	r4, [sp, #348]	; 0x15c
    9c02:	f8c8 0130 	str.w	r0, [r8, #304]	; 0x130
    9c06:	f8bd c168 	ldrh.w	ip, [sp, #360]	; 0x168
    9c0a:	f8c8 2134 	str.w	r2, [r8, #308]	; 0x134
    9c0e:	9858      	ldr	r0, [sp, #352]	; 0x160
    9c10:	f8c8 3138 	str.w	r3, [r8, #312]	; 0x138
    9c14:	f89d e16a 	ldrb.w	lr, [sp, #362]	; 0x16a
    9c18:	f8c8 413c 	str.w	r4, [r8, #316]	; 0x13c
    \ref SerialDriverMain informational page.

    For more detailed information on the ClearCore Connector interface in
    general, check out the \ref ConnectorMain informational page.
**/
class SerialDriver : public SerialBase, public Connector {
    9c1c:	f89d 616b 	ldrb.w	r6, [sp, #363]	; 0x16b
    9c20:	9a5b      	ldr	r2, [sp, #364]	; 0x16c
    9c22:	9b5c      	ldr	r3, [sp, #368]	; 0x170
    9c24:	9c5d      	ldr	r4, [sp, #372]	; 0x174
    9c26:	f8c8 0140 	str.w	r0, [r8, #320]	; 0x140
    9c2a:	f8a8 c148 	strh.w	ip, [r8, #328]	; 0x148
    9c2e:	f888 e14a 	strb.w	lr, [r8, #330]	; 0x14a
    9c32:	f888 614b 	strb.w	r6, [r8, #331]	; 0x14b
    9c36:	f8c8 214c 	str.w	r2, [r8, #332]	; 0x14c
    9c3a:	f8c8 3150 	str.w	r3, [r8, #336]	; 0x150
    9c3e:	f8c8 4154 	str.w	r4, [r8, #340]	; 0x154
    9c42:	a808      	add	r0, sp, #32
    9c44:	4e39      	ldr	r6, [pc, #228]	; (9d2c <_ZN9ClearCore10SysManagerC1Ev+0x1774>)
    9c46:	9604      	str	r6, [sp, #16]
    9c48:	f44f 3380 	mov.w	r3, #65536	; 0x10000
    9c4c:	f44f 2200 	mov.w	r2, #524288	; 0x80000
    9c50:	f007 fcf0 	bl	11634 <_ZN9ClearCore12SerialDriverC1EtNS_13ShiftRegister5MasksES2_S2_PK15PeripheralRouteS5_S5_S5_h>
    9c54:	9c0a      	ldr	r4, [sp, #40]	; 0x28
    9c56:	9809      	ldr	r0, [sp, #36]	; 0x24
    9c58:	f89d e02c 	ldrb.w	lr, [sp, #44]	; 0x2c
    9c5c:	9a0c      	ldr	r2, [sp, #48]	; 0x30
    9c5e:	9e0e      	ldr	r6, [sp, #56]	; 0x38
    9c60:	9b11      	ldr	r3, [sp, #68]	; 0x44
    9c62:	60ac      	str	r4, [r5, #8]
    9c64:	6068      	str	r0, [r5, #4]
    9c66:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
    9c68:	980d      	ldr	r0, [sp, #52]	; 0x34
    9c6a:	f8bd c04c 	ldrh.w	ip, [sp, #76]	; 0x4c
    9c6e:	f885 e00c 	strb.w	lr, [r5, #12]
    9c72:	612a      	str	r2, [r5, #16]
    9c74:	f89d e049 	ldrb.w	lr, [sp, #73]	; 0x49
    9c78:	f89d 2048 	ldrb.w	r2, [sp, #72]	; 0x48
    9c7c:	6168      	str	r0, [r5, #20]
    9c7e:	61ae      	str	r6, [r5, #24]
    9c80:	9810      	ldr	r0, [sp, #64]	; 0x40
    9c82:	f89d 604a 	ldrb.w	r6, [sp, #74]	; 0x4a
    9c86:	61ec      	str	r4, [r5, #28]
    9c88:	626b      	str	r3, [r5, #36]	; 0x24
    9c8a:	f89d 404e 	ldrb.w	r4, [sp, #78]	; 0x4e
    9c8e:	f89d 304f 	ldrb.w	r3, [sp, #79]	; 0x4f
    9c92:	f885 e029 	strb.w	lr, [r5, #41]	; 0x29
    9c96:	f8a5 c02c 	strh.w	ip, [r5, #44]	; 0x2c
    9c9a:	f885 302f 	strb.w	r3, [r5, #47]	; 0x2f
    9c9e:	a914      	add	r1, sp, #80	; 0x50
    9ca0:	6228      	str	r0, [r5, #32]
    9ca2:	f885 2028 	strb.w	r2, [r5, #40]	; 0x28
    9ca6:	f885 602a 	strb.w	r6, [r5, #42]	; 0x2a
    9caa:	463a      	mov	r2, r7
    9cac:	f885 402e 	strb.w	r4, [r5, #46]	; 0x2e
    9cb0:	f105 0030 	add.w	r0, r5, #48	; 0x30
    9cb4:	f014 f984 	bl	1dfc0 <memcpy>
    9cb8:	463a      	mov	r2, r7
    9cba:	a934      	add	r1, sp, #208	; 0xd0
    9cbc:	f105 00b0 	add.w	r0, r5, #176	; 0xb0
    9cc0:	f014 f97e 	bl	1dfc0 <memcpy>
    9cc4:	a855      	add	r0, sp, #340	; 0x154
    9cc6:	e890 1005 	ldmia.w	r0, {r0, r2, ip}
    9cca:	9b54      	ldr	r3, [sp, #336]	; 0x150
    9ccc:	f8c5 3130 	str.w	r3, [r5, #304]	; 0x130
    9cd0:	9b5c      	ldr	r3, [sp, #368]	; 0x170
    9cd2:	9e58      	ldr	r6, [sp, #352]	; 0x160
    9cd4:	f8bd e168 	ldrh.w	lr, [sp, #360]	; 0x168
    9cd8:	f89d 716a 	ldrb.w	r7, [sp, #362]	; 0x16a
    9cdc:	f89d 416b 	ldrb.w	r4, [sp, #363]	; 0x16b
    9ce0:	995b      	ldr	r1, [sp, #364]	; 0x16c
    9ce2:	f8c5 3150 	str.w	r3, [r5, #336]	; 0x150
    9ce6:	9b5d      	ldr	r3, [sp, #372]	; 0x174
    9ce8:	f8c5 0134 	str.w	r0, [r5, #308]	; 0x134
                                 ShiftRegister::SR_UART_SPI_SEL_1_MASK,
                                 ShiftRegister::SR_UART_TTL_1_MASK,
                                 &Com1_CTS_MISO, &Com1_RTS_SS, &Com1_RX_SCK,
                                 &Com1_TX_MOSI, PER_SERCOM);
}
    9cec:	4648      	mov	r0, r9
    9cee:	f8c5 2138 	str.w	r2, [r5, #312]	; 0x138
    9cf2:	f8c5 3154 	str.w	r3, [r5, #340]	; 0x154
    9cf6:	f8c5 6140 	str.w	r6, [r5, #320]	; 0x140
    9cfa:	f8c5 c13c 	str.w	ip, [r5, #316]	; 0x13c
    9cfe:	f8a5 e148 	strh.w	lr, [r5, #328]	; 0x148
    9d02:	f885 714a 	strb.w	r7, [r5, #330]	; 0x14a
    9d06:	f885 414b 	strb.w	r4, [r5, #331]	; 0x14b
    9d0a:	f8c5 114c 	str.w	r1, [r5, #332]	; 0x14c
    9d0e:	b05f      	add	sp, #380	; 0x17c
    9d10:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    9d14:	00022ae0 	.word	0x00022ae0
    9d18:	00022ad0 	.word	0x00022ad0
    9d1c:	20001718 	.word	0x20001718
    9d20:	00022b00 	.word	0x00022b00
    9d24:	00022af0 	.word	0x00022af0
    9d28:	00022c20 	.word	0x00022c20
    9d2c:	00022bc0 	.word	0x00022bc0
    9d30:	00022c10 	.word	0x00022c10
    9d34:	00022bb0 	.word	0x00022bb0
    9d38:	200015c0 	.word	0x200015c0

00009d3c <_ZN9ClearCore10SysManager16ConnectorByIndexE13ClearCorePins>:
        MotorConnectors[iMotor]->RefreshSlow();
    }
}

Connector *SysManager::ConnectorByIndex(ClearCorePins theConnector) {
    if (theConnector < CLEARCORE_PIN_MAX) {
    9d3c:	2914      	cmp	r1, #20
    9d3e:	dc03      	bgt.n	9d48 <_ZN9ClearCore10SysManager16ConnectorByIndexE13ClearCorePins+0xc>
        return Connectors[theConnector];
    9d40:	4a03      	ldr	r2, [pc, #12]	; (9d50 <_ZN9ClearCore10SysManager16ConnectorByIndexE13ClearCorePins+0x14>)
    9d42:	f852 0021 	ldr.w	r0, [r2, r1, lsl #2]
    }
    else {
        return CcioMgr.PinByIndex(theConnector);
    }
}
    9d46:	4770      	bx	lr
        return CcioMgr.PinByIndex(theConnector);
    9d48:	4b02      	ldr	r3, [pc, #8]	; (9d54 <_ZN9ClearCore10SysManager16ConnectorByIndexE13ClearCorePins+0x18>)
    9d4a:	6818      	ldr	r0, [r3, #0]
    9d4c:	f006 b94c 	b.w	ffe8 <_ZN9ClearCore16CcioBoardManager10PinByIndexE13ClearCorePins>
    9d50:	00022a5c 	.word	0x00022a5c
    9d54:	20001f28 	.word	0x20001f28

00009d58 <_ZN9ClearCore10SysManager10InitClocksEv>:

void SysManager::InitClocks() {
    9d58:	b5f0      	push	{r4, r5, r6, r7, lr}
    // Set up TCC0 which will be used to generate the sample time interrupt
    // and by the motors in S&D/PWM mode to send bursts of steps or PWM duty.
    SET_CLOCK_SOURCE(TCC0_GCLK_ID, 1);
    9d5a:	4ab1      	ldr	r2, [pc, #708]	; (a020 <_ZN9ClearCore10SysManager10InitClocksEv+0x2c8>)
    9d5c:	f8d2 30e4 	ldr.w	r3, [r2, #228]	; 0xe4
    9d60:	f36f 1386 	bfc	r3, #6, #1
void SysManager::InitClocks() {
    9d64:	b085      	sub	sp, #20
    SET_CLOCK_SOURCE(TCC0_GCLK_ID, 1);
    9d66:	f8c2 30e4 	str.w	r3, [r2, #228]	; 0xe4
    9d6a:	f8d2 30e4 	ldr.w	r3, [r2, #228]	; 0xe4
    9d6e:	065e      	lsls	r6, r3, #25
    9d70:	d4fb      	bmi.n	9d6a <_ZN9ClearCore10SysManager10InitClocksEv+0x12>
    9d72:	f8d2 30e4 	ldr.w	r3, [r2, #228]	; 0xe4
    9d76:	49aa      	ldr	r1, [pc, #680]	; (a020 <_ZN9ClearCore10SysManager10InitClocksEv+0x2c8>)
    9d78:	2001      	movs	r0, #1
    9d7a:	f360 0303 	bfi	r3, r0, #0, #4
    9d7e:	f8c2 30e4 	str.w	r3, [r2, #228]	; 0xe4
    9d82:	f8d2 30e4 	ldr.w	r3, [r2, #228]	; 0xe4
    9d86:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    9d8a:	f8c2 30e4 	str.w	r3, [r2, #228]	; 0xe4
    9d8e:	684b      	ldr	r3, [r1, #4]
    9d90:	f013 0304 	ands.w	r3, r3, #4
    9d94:	d1fb      	bne.n	9d8e <_ZN9ClearCore10SysManager10InitClocksEv+0x36>
    CLOCK_ENABLE(APBBMASK, TCC0_);
    9d96:	48a3      	ldr	r0, [pc, #652]	; (a024 <_ZN9ClearCore10SysManager10InitClocksEv+0x2cc>)

    // Disable TCC0
    TCC0->CTRLA.bit.ENABLE = 0;
    9d98:	4aa3      	ldr	r2, [pc, #652]	; (a028 <_ZN9ClearCore10SysManager10InitClocksEv+0x2d0>)
    CLOCK_ENABLE(APBBMASK, TCC0_);
    9d9a:	6981      	ldr	r1, [r0, #24]
    9d9c:	f441 6100 	orr.w	r1, r1, #2048	; 0x800
    9da0:	6181      	str	r1, [r0, #24]
    TCC0->CTRLA.bit.ENABLE = 0;
    9da2:	6811      	ldr	r1, [r2, #0]
    9da4:	f363 0141 	bfi	r1, r3, #1, #1
    9da8:	6011      	str	r1, [r2, #0]
    SYNCBUSY_WAIT(TCC0, TCC_SYNCBUSY_ENABLE);
    9daa:	6893      	ldr	r3, [r2, #8]
    9dac:	f013 0302 	ands.w	r3, r3, #2
    9db0:	d1fb      	bne.n	9daa <_ZN9ClearCore10SysManager10InitClocksEv+0x52>

    // Initialize counter value to zero
    TCC0->COUNT.reg = 0;
    9db2:	6353      	str	r3, [r2, #52]	; 0x34

    // Use double buffering
    TCC0->CTRLBCLR.bit.LUPD = 1;
    9db4:	7910      	ldrb	r0, [r2, #4]
    }
    // Interrupt every period
    TCC0->INTENSET.bit.OVF = 1;

    // Setup TCC1 which will be used by motors using PWM input on InA
    SET_CLOCK_SOURCE(TCC1_GCLK_ID, 1);
    9db6:	499a      	ldr	r1, [pc, #616]	; (a020 <_ZN9ClearCore10SysManager10InitClocksEv+0x2c8>)
    TCC0->CTRLBCLR.bit.LUPD = 1;
    9db8:	f040 0002 	orr.w	r0, r0, #2
    9dbc:	7110      	strb	r0, [r2, #4]
    TCC0->WAVE.reg |= TCC_WAVE_WAVEGEN_NPWM | TCC_WAVE_POL_Msk;
    9dbe:	6bd0      	ldr	r0, [r2, #60]	; 0x3c
    9dc0:	f440 107c 	orr.w	r0, r0, #4128768	; 0x3f0000
    9dc4:	f040 0002 	orr.w	r0, r0, #2
    9dc8:	63d0      	str	r0, [r2, #60]	; 0x3c
        TCC0->CC[iChannel].reg = 0;
    9dca:	6453      	str	r3, [r2, #68]	; 0x44
    9dcc:	6493      	str	r3, [r2, #72]	; 0x48
    9dce:	64d3      	str	r3, [r2, #76]	; 0x4c
    9dd0:	6513      	str	r3, [r2, #80]	; 0x50
    9dd2:	6553      	str	r3, [r2, #84]	; 0x54
    9dd4:	6593      	str	r3, [r2, #88]	; 0x58
    TCC0->INTENSET.bit.OVF = 1;
    9dd6:	6a90      	ldr	r0, [r2, #40]	; 0x28
    9dd8:	f040 0001 	orr.w	r0, r0, #1
    9ddc:	6290      	str	r0, [r2, #40]	; 0x28
    SET_CLOCK_SOURCE(TCC1_GCLK_ID, 1);
    9dde:	f8d1 20e4 	ldr.w	r2, [r1, #228]	; 0xe4
    9de2:	f363 1286 	bfi	r2, r3, #6, #1
    9de6:	f8c1 20e4 	str.w	r2, [r1, #228]	; 0xe4
    9dea:	460a      	mov	r2, r1
    9dec:	f8d2 30e4 	ldr.w	r3, [r2, #228]	; 0xe4
    9df0:	065d      	lsls	r5, r3, #25
    9df2:	d4fb      	bmi.n	9dec <_ZN9ClearCore10SysManager10InitClocksEv+0x94>
    9df4:	f8d2 30e4 	ldr.w	r3, [r2, #228]	; 0xe4
    9df8:	4989      	ldr	r1, [pc, #548]	; (a020 <_ZN9ClearCore10SysManager10InitClocksEv+0x2c8>)
    9dfa:	2001      	movs	r0, #1
    9dfc:	f360 0303 	bfi	r3, r0, #0, #4
    9e00:	f8c2 30e4 	str.w	r3, [r2, #228]	; 0xe4
    9e04:	f8d2 30e4 	ldr.w	r3, [r2, #228]	; 0xe4
    9e08:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    9e0c:	f8c2 30e4 	str.w	r3, [r2, #228]	; 0xe4
    9e10:	684b      	ldr	r3, [r1, #4]
    9e12:	f013 0304 	ands.w	r3, r3, #4
    9e16:	d1fb      	bne.n	9e10 <_ZN9ClearCore10SysManager10InitClocksEv+0xb8>
    CLOCK_ENABLE(APBBMASK, TCC1_);
    9e18:	4882      	ldr	r0, [pc, #520]	; (a024 <_ZN9ClearCore10SysManager10InitClocksEv+0x2cc>)

    // Disable TCC1
    TCC1->CTRLA.bit.ENABLE = 0;
    9e1a:	4a84      	ldr	r2, [pc, #528]	; (a02c <_ZN9ClearCore10SysManager10InitClocksEv+0x2d4>)
    CLOCK_ENABLE(APBBMASK, TCC1_);
    9e1c:	6981      	ldr	r1, [r0, #24]
    9e1e:	f441 5180 	orr.w	r1, r1, #4096	; 0x1000
    9e22:	6181      	str	r1, [r0, #24]
    TCC1->CTRLA.bit.ENABLE = 0;
    9e24:	6811      	ldr	r1, [r2, #0]
    9e26:	f363 0141 	bfi	r1, r3, #1, #1
    9e2a:	6011      	str	r1, [r2, #0]
    SYNCBUSY_WAIT(TCC1, TCC_SYNCBUSY_ENABLE);
    9e2c:	6893      	ldr	r3, [r2, #8]
    9e2e:	f013 0302 	ands.w	r3, r3, #2
    9e32:	d1fb      	bne.n	9e2c <_ZN9ClearCore10SysManager10InitClocksEv+0xd4>

    // Initialize counter value to zero
    TCC1->COUNT.reg = 0;
    9e34:	6353      	str	r3, [r2, #52]	; 0x34

    // Use double buffering
    TCC1->CTRLBCLR.bit.LUPD = 1;
    9e36:	7910      	ldrb	r0, [r2, #4]
    for (int8_t iChannel = 0; iChannel < 6; iChannel++) {
        TCC1->CC[iChannel].reg = 0;
    }

    // Initialize Timer/Counters
    SET_CLOCK_SOURCE(TC1_GCLK_ID, 6);
    9e38:	4979      	ldr	r1, [pc, #484]	; (a020 <_ZN9ClearCore10SysManager10InitClocksEv+0x2c8>)
    TCC1->CTRLBCLR.bit.LUPD = 1;
    9e3a:	f040 0002 	orr.w	r0, r0, #2
    9e3e:	7110      	strb	r0, [r2, #4]
    TCC1->WAVE.reg |= TCC_WAVE_WAVEGEN_NPWM | TCC_WAVE_POL_Msk;
    9e40:	6bd0      	ldr	r0, [r2, #60]	; 0x3c
    9e42:	f440 107c 	orr.w	r0, r0, #4128768	; 0x3f0000
    9e46:	f040 0002 	orr.w	r0, r0, #2
    9e4a:	63d0      	str	r0, [r2, #60]	; 0x3c
        TCC1->CC[iChannel].reg = 0;
    9e4c:	6453      	str	r3, [r2, #68]	; 0x44
    9e4e:	6493      	str	r3, [r2, #72]	; 0x48
    9e50:	64d3      	str	r3, [r2, #76]	; 0x4c
    9e52:	6513      	str	r3, [r2, #80]	; 0x50
    9e54:	6553      	str	r3, [r2, #84]	; 0x54
    9e56:	6593      	str	r3, [r2, #88]	; 0x58
    SET_CLOCK_SOURCE(TC1_GCLK_ID, 6);
    9e58:	f8d1 20a4 	ldr.w	r2, [r1, #164]	; 0xa4
    9e5c:	f363 1286 	bfi	r2, r3, #6, #1
    9e60:	f8c1 20a4 	str.w	r2, [r1, #164]	; 0xa4
    9e64:	460a      	mov	r2, r1
    9e66:	f8d2 30a4 	ldr.w	r3, [r2, #164]	; 0xa4
    9e6a:	065c      	lsls	r4, r3, #25
    9e6c:	d4fb      	bmi.n	9e66 <_ZN9ClearCore10SysManager10InitClocksEv+0x10e>
    9e6e:	f8d2 30a4 	ldr.w	r3, [r2, #164]	; 0xa4
    9e72:	496b      	ldr	r1, [pc, #428]	; (a020 <_ZN9ClearCore10SysManager10InitClocksEv+0x2c8>)
    9e74:	2006      	movs	r0, #6
    9e76:	f360 0303 	bfi	r3, r0, #0, #4
    9e7a:	f8c2 30a4 	str.w	r3, [r2, #164]	; 0xa4
    9e7e:	f8d2 30a4 	ldr.w	r3, [r2, #164]	; 0xa4
    9e82:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    9e86:	f8c2 30a4 	str.w	r3, [r2, #164]	; 0xa4
    9e8a:	684b      	ldr	r3, [r1, #4]
    9e8c:	f013 0318 	ands.w	r3, r3, #24
    9e90:	d1fb      	bne.n	9e8a <_ZN9ClearCore10SysManager10InitClocksEv+0x132>
    CLOCK_ENABLE(APBAMASK, TC1_); // Enable TC1 bus clock
    9e92:	4c64      	ldr	r4, [pc, #400]	; (a024 <_ZN9ClearCore10SysManager10InitClocksEv+0x2cc>)

    SET_CLOCK_SOURCE(TC2_GCLK_ID, 6);
    9e94:	4a62      	ldr	r2, [pc, #392]	; (a020 <_ZN9ClearCore10SysManager10InitClocksEv+0x2c8>)
    CLOCK_ENABLE(APBAMASK, TC1_); // Enable TC1 bus clock
    9e96:	6960      	ldr	r0, [r4, #20]
    9e98:	f440 4000 	orr.w	r0, r0, #32768	; 0x8000
    9e9c:	6160      	str	r0, [r4, #20]
    SET_CLOCK_SOURCE(TC2_GCLK_ID, 6);
    9e9e:	f8d1 00e8 	ldr.w	r0, [r1, #232]	; 0xe8
    9ea2:	f363 1086 	bfi	r0, r3, #6, #1
    9ea6:	f8c1 00e8 	str.w	r0, [r1, #232]	; 0xe8
    9eaa:	f8d2 30e8 	ldr.w	r3, [r2, #232]	; 0xe8
    9eae:	0658      	lsls	r0, r3, #25
    9eb0:	d4fb      	bmi.n	9eaa <_ZN9ClearCore10SysManager10InitClocksEv+0x152>
    9eb2:	f8d2 30e8 	ldr.w	r3, [r2, #232]	; 0xe8
    9eb6:	495a      	ldr	r1, [pc, #360]	; (a020 <_ZN9ClearCore10SysManager10InitClocksEv+0x2c8>)
    9eb8:	2006      	movs	r0, #6
    9eba:	f360 0303 	bfi	r3, r0, #0, #4
    9ebe:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
    9ec2:	f8d2 30e8 	ldr.w	r3, [r2, #232]	; 0xe8
    9ec6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    9eca:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
    9ece:	684b      	ldr	r3, [r1, #4]
    9ed0:	f013 0318 	ands.w	r3, r3, #24
    9ed4:	d1fb      	bne.n	9ece <_ZN9ClearCore10SysManager10InitClocksEv+0x176>
    CLOCK_ENABLE(APBBMASK, TC2_); // Enable TC2 bus clock
    9ed6:	4c53      	ldr	r4, [pc, #332]	; (a024 <_ZN9ClearCore10SysManager10InitClocksEv+0x2cc>)

    SET_CLOCK_SOURCE(TC5_GCLK_ID, 6);
    9ed8:	4a51      	ldr	r2, [pc, #324]	; (a020 <_ZN9ClearCore10SysManager10InitClocksEv+0x2c8>)
    CLOCK_ENABLE(APBBMASK, TC2_); // Enable TC2 bus clock
    9eda:	69a0      	ldr	r0, [r4, #24]
    9edc:	f440 5000 	orr.w	r0, r0, #8192	; 0x2000
    9ee0:	61a0      	str	r0, [r4, #24]
    SET_CLOCK_SOURCE(TC5_GCLK_ID, 6);
    9ee2:	f8d1 00f8 	ldr.w	r0, [r1, #248]	; 0xf8
    9ee6:	f363 1086 	bfi	r0, r3, #6, #1
    9eea:	f8c1 00f8 	str.w	r0, [r1, #248]	; 0xf8
    9eee:	f8d2 30f8 	ldr.w	r3, [r2, #248]	; 0xf8
    9ef2:	0659      	lsls	r1, r3, #25
    9ef4:	d4fb      	bmi.n	9eee <_ZN9ClearCore10SysManager10InitClocksEv+0x196>
    9ef6:	f8d2 30f8 	ldr.w	r3, [r2, #248]	; 0xf8
    9efa:	4949      	ldr	r1, [pc, #292]	; (a020 <_ZN9ClearCore10SysManager10InitClocksEv+0x2c8>)
    9efc:	2006      	movs	r0, #6
    9efe:	f360 0303 	bfi	r3, r0, #0, #4
    9f02:	f8c2 30f8 	str.w	r3, [r2, #248]	; 0xf8
    9f06:	f8d2 30f8 	ldr.w	r3, [r2, #248]	; 0xf8
    9f0a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    9f0e:	f8c2 30f8 	str.w	r3, [r2, #248]	; 0xf8
    9f12:	684b      	ldr	r3, [r1, #4]
    9f14:	f013 0318 	ands.w	r3, r3, #24
    9f18:	d1fb      	bne.n	9f12 <_ZN9ClearCore10SysManager10InitClocksEv+0x1ba>
    CLOCK_ENABLE(APBCMASK, TC5_); // Enable TC5 bus clock
    9f1a:	4842      	ldr	r0, [pc, #264]	; (a024 <_ZN9ClearCore10SysManager10InitClocksEv+0x2cc>)
    GCLK->PCHCTRL[TC6_GCLK_ID].reg =
        GCLK_PCHCTRL_GEN_GCLK6 | GCLK_PCHCTRL_CHEN;
    CLOCK_ENABLE(APBDMASK, TC6_); // Enable TC6 bus clock

    // TCC3 used by IO5 for H-bridge PWM generation
    SET_CLOCK_SOURCE(TCC3_GCLK_ID, 0);
    9f1c:	4a40      	ldr	r2, [pc, #256]	; (a020 <_ZN9ClearCore10SysManager10InitClocksEv+0x2c8>)
    CLOCK_ENABLE(APBCMASK, TC5_); // Enable TC5 bus clock
    9f1e:	69c4      	ldr	r4, [r0, #28]
    GCLK->PCHCTRL[TC6_GCLK_ID].reg =
    9f20:	2546      	movs	r5, #70	; 0x46
    CLOCK_ENABLE(APBCMASK, TC5_); // Enable TC5 bus clock
    9f22:	f044 0440 	orr.w	r4, r4, #64	; 0x40
    9f26:	61c4      	str	r4, [r0, #28]
    GCLK->PCHCTRL[TC6_GCLK_ID].reg =
    9f28:	f8c1 511c 	str.w	r5, [r1, #284]	; 0x11c
    CLOCK_ENABLE(APBDMASK, TC6_); // Enable TC6 bus clock
    9f2c:	6a04      	ldr	r4, [r0, #32]
    9f2e:	f044 0420 	orr.w	r4, r4, #32
    9f32:	6204      	str	r4, [r0, #32]
    SET_CLOCK_SOURCE(TCC3_GCLK_ID, 0);
    9f34:	f8d1 00f4 	ldr.w	r0, [r1, #244]	; 0xf4
    9f38:	f363 1086 	bfi	r0, r3, #6, #1
    9f3c:	f8c1 00f4 	str.w	r0, [r1, #244]	; 0xf4
    9f40:	f8d2 30f4 	ldr.w	r3, [r2, #244]	; 0xf4
    9f44:	f3c3 1380 	ubfx	r3, r3, #6, #1
    9f48:	2b00      	cmp	r3, #0
    9f4a:	d1f9      	bne.n	9f40 <_ZN9ClearCore10SysManager10InitClocksEv+0x1e8>
    9f4c:	f8d2 10f4 	ldr.w	r1, [r2, #244]	; 0xf4
    CLOCK_ENABLE(APBCMASK, TCC3_);
    9f50:	4834      	ldr	r0, [pc, #208]	; (a024 <_ZN9ClearCore10SysManager10InitClocksEv+0x2cc>)

    // TCC4 used by IO4 for H-bridge PWM generation
    SET_CLOCK_SOURCE(TCC4_GCLK_ID, 0);
    9f52:	4c33      	ldr	r4, [pc, #204]	; (a020 <_ZN9ClearCore10SysManager10InitClocksEv+0x2c8>)
    SET_CLOCK_SOURCE(TCC3_GCLK_ID, 0);
    9f54:	f363 0103 	bfi	r1, r3, #0, #4
    9f58:	f8c2 10f4 	str.w	r1, [r2, #244]	; 0xf4
    9f5c:	f8d2 10f4 	ldr.w	r1, [r2, #244]	; 0xf4
    9f60:	f041 0140 	orr.w	r1, r1, #64	; 0x40
    9f64:	f8c2 10f4 	str.w	r1, [r2, #244]	; 0xf4
    9f68:	6851      	ldr	r1, [r2, #4]
    CLOCK_ENABLE(APBCMASK, TCC3_);
    9f6a:	69c1      	ldr	r1, [r0, #28]
    9f6c:	f041 0110 	orr.w	r1, r1, #16
    9f70:	61c1      	str	r1, [r0, #28]
    SET_CLOCK_SOURCE(TCC4_GCLK_ID, 0);
    9f72:	f8d2 1118 	ldr.w	r1, [r2, #280]	; 0x118
    9f76:	f363 1186 	bfi	r1, r3, #6, #1
    9f7a:	f8c2 1118 	str.w	r1, [r2, #280]	; 0x118
    9f7e:	f8d4 3118 	ldr.w	r3, [r4, #280]	; 0x118
    9f82:	f3c3 1380 	ubfx	r3, r3, #6, #1
    9f86:	2b00      	cmp	r3, #0
    9f88:	d1f9      	bne.n	9f7e <_ZN9ClearCore10SysManager10InitClocksEv+0x226>
    9f8a:	f8d4 1118 	ldr.w	r1, [r4, #280]	; 0x118
    CLOCK_ENABLE(APBDMASK, TCC4_);

    Tc *TCs[] = {TC1, TC2, TC6};
    9f8e:	4a28      	ldr	r2, [pc, #160]	; (a030 <_ZN9ClearCore10SysManager10InitClocksEv+0x2d8>)
    CLOCK_ENABLE(APBDMASK, TCC4_);
    9f90:	4d24      	ldr	r5, [pc, #144]	; (a024 <_ZN9ClearCore10SysManager10InitClocksEv+0x2cc>)
    SET_CLOCK_SOURCE(TCC4_GCLK_ID, 0);
    9f92:	f363 0103 	bfi	r1, r3, #0, #4
    9f96:	f8c4 1118 	str.w	r1, [r4, #280]	; 0x118
    9f9a:	f8d4 3118 	ldr.w	r3, [r4, #280]	; 0x118
    9f9e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    9fa2:	f8c4 3118 	str.w	r3, [r4, #280]	; 0x118
    Tc *TCs[] = {TC1, TC2, TC6};
    9fa6:	ca07      	ldmia	r2, {r0, r1, r2}
    SET_CLOCK_SOURCE(TCC4_GCLK_ID, 0);
    9fa8:	6863      	ldr	r3, [r4, #4]
    CLOCK_ENABLE(APBDMASK, TCC4_);
    9faa:	6a2c      	ldr	r4, [r5, #32]
    Tc *TCs[] = {TC1, TC2, TC6};
    9fac:	ab01      	add	r3, sp, #4
    CLOCK_ENABLE(APBDMASK, TCC4_);
    9fae:	f044 0410 	orr.w	r4, r4, #16
    9fb2:	622c      	str	r4, [r5, #32]
    9fb4:	f10d 0c10 	add.w	ip, sp, #16
    Tc *TCs[] = {TC1, TC2, TC6};
    9fb8:	e883 0007 	stmia.w	r3, {r0, r1, r2}
        // Disable TCx
        tcCount->CTRLA.bit.ENABLE = 0;
        SYNCBUSY_WAIT(tcCount, TC_SYNCBUSY_ENABLE);

        tcCount->CTRLBCLR.bit.LUPD = 1; // Double buffering
        tcCount->CTRLA.bit.MODE = TC_CTRLA_MODE_COUNT8_Val;
    9fbc:	f04f 0e01 	mov.w	lr, #1
    9fc0:	4619      	mov	r1, r3
        // Make 500Hz carrier from GCLK
        tcCount->CTRLA.bit.PRESCALER = TC_CTRLA_PRESCALER_DIV16_Val;
    9fc2:	2704      	movs	r7, #4
        tcCount->WAVE.reg = TC_WAVE_WAVEGEN_NPWM;
    9fc4:	2602      	movs	r6, #2
        tcCount->DRVCTRL.reg = TC_DRVCTRL_INVEN_Msk;
    9fc6:	2503      	movs	r5, #3

        tcCount->PERBUF.reg = 254;
    9fc8:	24fe      	movs	r4, #254	; 0xfe
        Tc *tc = TCs[tcIndex];
    9fca:	f851 2b04 	ldr.w	r2, [r1], #4
        tcCount->CTRLA.bit.ENABLE = 0;
    9fce:	6813      	ldr	r3, [r2, #0]
    9fd0:	f36f 0341 	bfc	r3, #1, #1
    9fd4:	6013      	str	r3, [r2, #0]
        SYNCBUSY_WAIT(tcCount, TC_SYNCBUSY_ENABLE);
    9fd6:	6913      	ldr	r3, [r2, #16]
    9fd8:	f013 0302 	ands.w	r3, r3, #2
    9fdc:	d1fb      	bne.n	9fd6 <_ZN9ClearCore10SysManager10InitClocksEv+0x27e>
        tcCount->CTRLBCLR.bit.LUPD = 1; // Double buffering
    9fde:	7910      	ldrb	r0, [r2, #4]
    9fe0:	f040 0002 	orr.w	r0, r0, #2
    9fe4:	7110      	strb	r0, [r2, #4]
        tcCount->CTRLA.bit.MODE = TC_CTRLA_MODE_COUNT8_Val;
    9fe6:	6810      	ldr	r0, [r2, #0]
    9fe8:	f36e 0083 	bfi	r0, lr, #2, #2
    9fec:	6010      	str	r0, [r2, #0]
        tcCount->CTRLA.bit.PRESCALER = TC_CTRLA_PRESCALER_DIV16_Val;
    9fee:	6810      	ldr	r0, [r2, #0]
    9ff0:	f367 200a 	bfi	r0, r7, #8, #3
    9ff4:	6010      	str	r0, [r2, #0]
        tcCount->WAVE.reg = TC_WAVE_WAVEGEN_NPWM;
    9ff6:	7316      	strb	r6, [r2, #12]
        tcCount->DRVCTRL.reg = TC_DRVCTRL_INVEN_Msk;
    9ff8:	7355      	strb	r5, [r2, #13]
        tcCount->PERBUF.reg = 254;
    9ffa:	f882 402f 	strb.w	r4, [r2, #47]	; 0x2f
        tcCount->CCBUF[0].reg = 0;
    9ffe:	f882 3030 	strb.w	r3, [r2, #48]	; 0x30
        tcCount->CCBUF[1].reg = 0;
    a002:	f882 3031 	strb.w	r3, [r2, #49]	; 0x31

        tcCount->COUNT.reg = 0;
    a006:	7513      	strb	r3, [r2, #20]

        // Enable TCx
        tcCount->CTRLA.bit.ENABLE = 1;
    a008:	6813      	ldr	r3, [r2, #0]
    a00a:	f043 0302 	orr.w	r3, r3, #2
    a00e:	6013      	str	r3, [r2, #0]
        SYNCBUSY_WAIT(tcCount, TC_SYNCBUSY_ENABLE);
    a010:	6913      	ldr	r3, [r2, #16]
    a012:	079b      	lsls	r3, r3, #30
    a014:	d4fc      	bmi.n	a010 <_ZN9ClearCore10SysManager10InitClocksEv+0x2b8>
    for (int8_t tcIndex = 0; tcIndex < 3; tcIndex++) {
    a016:	4561      	cmp	r1, ip
    a018:	d1d7      	bne.n	9fca <_ZN9ClearCore10SysManager10InitClocksEv+0x272>
    }
}
    a01a:	b005      	add	sp, #20
    a01c:	bdf0      	pop	{r4, r5, r6, r7, pc}
    a01e:	bf00      	nop
    a020:	40001c00 	.word	0x40001c00
    a024:	40000800 	.word	0x40000800
    a028:	41016000 	.word	0x41016000
    a02c:	41018000 	.word	0x41018000
    a030:	00022a38 	.word	0x00022a38

0000a034 <_ZN9ClearCore10SysManager10InitializeEv>:
    CoreDebug->DEMCR |= CoreDebug_DEMCR_TRCENA_Msk;
    a034:	498b      	ldr	r1, [pc, #556]	; (a264 <_ZN9ClearCore10SysManager10InitializeEv+0x230>)
    DWT->CYCCNT = 0;
    a036:	4a8c      	ldr	r2, [pc, #560]	; (a268 <_ZN9ClearCore10SysManager10InitializeEv+0x234>)
    CoreDebug->DEMCR |= CoreDebug_DEMCR_TRCENA_Msk;
    a038:	68cb      	ldr	r3, [r1, #12]
void SysManager::Initialize() {
    a03a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    CoreDebug->DEMCR |= CoreDebug_DEMCR_TRCENA_Msk;
    a03e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
    DWT->CTRL = DWT_CTRL_CYCCNTENA_Msk;
    a042:	f04f 0801 	mov.w	r8, #1
    DWT->CYCCNT = 0;
    a046:	2400      	movs	r4, #0
    CoreDebug->DEMCR |= CoreDebug_DEMCR_TRCENA_Msk;
    a048:	60cb      	str	r3, [r1, #12]
    DWT->CYCCNT = 0;
    a04a:	6054      	str	r4, [r2, #4]
    DWT->CTRL = DWT_CTRL_CYCCNTENA_Msk;
    a04c:	f8c2 8000 	str.w	r8, [r2]
void SysManager::Initialize() {
    a050:	4606      	mov	r6, r0
    InitClocks();
    a052:	f7ff fe81 	bl	9d58 <_ZN9ClearCore10SysManager10InitClocksEv>
    SUPC->BOD33.bit.ENABLE = 0;
    a056:	4b85      	ldr	r3, [pc, #532]	; (a26c <_ZN9ClearCore10SysManager10InitializeEv+0x238>)
    StatusMgr.HBridgeState(true);
    a058:	4985      	ldr	r1, [pc, #532]	; (a270 <_ZN9ClearCore10SysManager10InitializeEv+0x23c>)
    SUPC->BOD33.bit.ENABLE = 0;
    a05a:	691a      	ldr	r2, [r3, #16]
    StatusMgr.HBridgeState(true);
    a05c:	680d      	ldr	r5, [r1, #0]
    a05e:	4f85      	ldr	r7, [pc, #532]	; (a274 <_ZN9ClearCore10SysManager10InitializeEv+0x240>)
    SUPC->BOD33.bit.ENABLE = 0;
    a060:	f364 0241 	bfi	r2, r4, #1, #1
    a064:	611a      	str	r2, [r3, #16]
    SUPC->BOD33.bit.LEVEL = 167;  // Brown out voltage = 1.5V + LEVEL * 6mV.
    a066:	691a      	ldr	r2, [r3, #16]
    a068:	21a7      	movs	r1, #167	; 0xa7
    a06a:	f361 4217 	bfi	r2, r1, #16, #8
    a06e:	611a      	str	r2, [r3, #16]
    SUPC->BOD33.bit.ACTION = SUPC_BOD33_ACTION_RESET_Val;//SUPC_BOD33_ACTION_NONE_Val;
    a070:	691a      	ldr	r2, [r3, #16]
    a072:	f368 0283 	bfi	r2, r8, #2, #2
    a076:	611a      	str	r2, [r3, #16]
    SUPC->BOD33.bit.HYST = 0x7;
    a078:	691a      	ldr	r2, [r3, #16]
    a07a:	2107      	movs	r1, #7
    a07c:	f361 220b 	bfi	r2, r1, #8, #4
    a080:	611a      	str	r2, [r3, #16]
    SUPC->BOD33.bit.ENABLE = 1; // enable brown-out detection
    a082:	691a      	ldr	r2, [r3, #16]
    a084:	f042 0202 	orr.w	r2, r2, #2
    a088:	611a      	str	r2, [r3, #16]
    StatusMgr.HBridgeState(true);
    a08a:	4628      	mov	r0, r5
    a08c:	4641      	mov	r1, r8
    a08e:	f7fc fcb1 	bl	69f4 <_ZN9ClearCore13StatusManager12HBridgeStateEb>
    a092:	4879      	ldr	r0, [pc, #484]	; (a278 <_ZN9ClearCore10SysManager10InitializeEv+0x244>)
    a094:	2100      	movs	r1, #0
    a096:	f000 fcf7 	bl	aa88 <Delay_cycles>
    StatusMgr.HBridgeState(false);
    a09a:	4621      	mov	r1, r4
    a09c:	4628      	mov	r0, r5
    a09e:	f7fc fca9 	bl	69f4 <_ZN9ClearCore13StatusManager12HBridgeStateEb>
    DATA_DIRECTION_INPUT(OutFault_04or05.gpioPort,
    a0a2:	4b76      	ldr	r3, [pc, #472]	; (a27c <_ZN9ClearCore10SysManager10InitializeEv+0x248>)
    InputMgr.Initialize();
    a0a4:	4a76      	ldr	r2, [pc, #472]	; (a280 <_ZN9ClearCore10SysManager10InitializeEv+0x24c>)
    DATA_DIRECTION_INPUT(OutFault_04or05.gpioPort,
    a0a6:	f8c3 8084 	str.w	r8, [r3, #132]	; 0x84
    PIN_CONFIGURATION(OutFault_04or05.gpioPort, OutFault_04or05.gpioPin,
    a0aa:	2102      	movs	r1, #2
    a0ac:	f883 10c0 	strb.w	r1, [r3, #192]	; 0xc0
    InputMgr.Initialize();
    a0b0:	6810      	ldr	r0, [r2, #0]
    a0b2:	f7fb f98f 	bl	53d4 <_ZN9ClearCore12InputManager10InitializeEv>
        Connectors[i]->Initialize(static_cast<ClearCorePins>(i));
    a0b6:	f857 0f04 	ldr.w	r0, [r7, #4]!
    a0ba:	6803      	ldr	r3, [r0, #0]
    a0bc:	b221      	sxth	r1, r4
    a0be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    for (int32_t i = 0; i < CLEARCORE_PIN_MAX; i++) {
    a0c0:	3401      	adds	r4, #1
        Connectors[i]->Initialize(static_cast<ClearCorePins>(i));
    a0c2:	4798      	blx	r3
    for (int32_t i = 0; i < CLEARCORE_PIN_MAX; i++) {
    a0c4:	2c15      	cmp	r4, #21
    a0c6:	d1f6      	bne.n	a0b6 <_ZN9ClearCore10SysManager10InitializeEv+0x82>
    DmaMgr.Initialize();
    a0c8:	f7fb f908 	bl	52dc <_ZN9ClearCore10DmaManager10InitializeEv>
    MotorMgr.Initialize();
    a0cc:	4b6d      	ldr	r3, [pc, #436]	; (a284 <_ZN9ClearCore10SysManager10InitializeEv+0x250>)
    a0ce:	6818      	ldr	r0, [r3, #0]
    a0d0:	f001 ffd0 	bl	c074 <_ZN9ClearCore12MotorManager10InitializeEv>
    ShiftReg.Initialize();
    a0d4:	486c      	ldr	r0, [pc, #432]	; (a288 <_ZN9ClearCore10SysManager10InitializeEv+0x254>)
    a0d6:	f001 fb25 	bl	b724 <_ZN9ClearCore13ShiftRegister10InitializeEv>
    AdcMgr.Initialize();
    a0da:	4b6c      	ldr	r3, [pc, #432]	; (a28c <_ZN9ClearCore10SysManager10InitializeEv+0x258>)
    a0dc:	6818      	ldr	r0, [r3, #0]
    a0de:	f7fa fa7f 	bl	45e0 <_ZN9ClearCore10AdcManager10InitializeEv>
    CcioMgr.Initialize();
    a0e2:	4b6b      	ldr	r3, [pc, #428]	; (a290 <_ZN9ClearCore10SysManager10InitializeEv+0x25c>)
    a0e4:	6818      	ldr	r0, [r3, #0]
    a0e6:	f005 fbcf 	bl	f888 <_ZN9ClearCore16CcioBoardManager10InitializeEv>
    UsbMgr.Initialize();
    a0ea:	4b6a      	ldr	r3, [pc, #424]	; (a294 <_ZN9ClearCore10SysManager10InitializeEv+0x260>)
    a0ec:	6818      	ldr	r0, [r3, #0]
    a0ee:	f7fd f9ef 	bl	74d0 <_ZN9ClearCore10UsbManager10InitializeEv>
    EncoderIn.Initialize();
    a0f2:	4869      	ldr	r0, [pc, #420]	; (a298 <_ZN9ClearCore10SysManager10InitializeEv+0x264>)
    a0f4:	f002 fdd8 	bl	cca8 <_ZN9ClearCore12EncoderInput10InitializeEv>
    SET_CLOCK_SOURCE(EIC_GCLK_ID, 0);
    a0f8:	4a68      	ldr	r2, [pc, #416]	; (a29c <_ZN9ClearCore10SysManager10InitializeEv+0x268>)
    a0fa:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
    a0fe:	f36f 1386 	bfc	r3, #6, #1
    a102:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
    a106:	f8d2 1090 	ldr.w	r1, [r2, #144]	; 0x90
    a10a:	f3c1 1180 	ubfx	r1, r1, #6, #1
    a10e:	2900      	cmp	r1, #0
    a110:	d1f9      	bne.n	a106 <_ZN9ClearCore10SysManager10InitializeEv+0xd2>
    a112:	f8d2 0090 	ldr.w	r0, [r2, #144]	; 0x90
    CLOCK_ENABLE(APBAMASK, EIC_);
    a116:	4c62      	ldr	r4, [pc, #392]	; (a2a0 <_ZN9ClearCore10SysManager10InitializeEv+0x26c>)
        state ? m_patternMasks[pattern] |= ledMask
    a118:	4f5b      	ldr	r7, [pc, #364]	; (a288 <_ZN9ClearCore10SysManager10InitializeEv+0x254>)
  NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
    a11a:	4b62      	ldr	r3, [pc, #392]	; (a2a4 <_ZN9ClearCore10SysManager10InitializeEv+0x270>)
    if (TimingMgr.SysTickPeriodMicroSec(1000)) {
    a11c:	f8df c190 	ldr.w	ip, [pc, #400]	; a2b0 <_ZN9ClearCore10SysManager10InitializeEv+0x27c>
    SET_CLOCK_SOURCE(EIC_GCLK_ID, 0);
    a120:	f361 0003 	bfi	r0, r1, #0, #4
    a124:	f8c2 0090 	str.w	r0, [r2, #144]	; 0x90
    a128:	f8d2 1090 	ldr.w	r1, [r2, #144]	; 0x90
    a12c:	f041 0140 	orr.w	r1, r1, #64	; 0x40
    a130:	f8c2 1090 	str.w	r1, [r2, #144]	; 0x90
    a134:	6852      	ldr	r2, [r2, #4]
    CLOCK_ENABLE(APBAMASK, EIC_);
    a136:	6961      	ldr	r1, [r4, #20]
    a138:	f8d7 00ec 	ldr.w	r0, [r7, #236]	; 0xec
    a13c:	f441 6180 	orr.w	r1, r1, #1024	; 0x400
    a140:	f44f 5e80 	mov.w	lr, #4096	; 0x1000
    a144:	6161      	str	r1, [r4, #20]
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    a146:	22e0      	movs	r2, #224	; 0xe0
  NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
    a148:	f8c3 e000 	str.w	lr, [r3]
    a14c:	f440 4080 	orr.w	r0, r0, #16384	; 0x4000
    a150:	f44f 3880 	mov.w	r8, #65536	; 0x10000
    a154:	f44f 3e00 	mov.w	lr, #131072	; 0x20000
    a158:	f44f 2180 	mov.w	r1, #262144	; 0x40000
    a15c:	f44f 5900 	mov.w	r9, #8192	; 0x2000
    a160:	f44f 4480 	mov.w	r4, #16384	; 0x4000
    a164:	f44f 4a00 	mov.w	sl, #32768	; 0x8000
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    a168:	f883 230c 	strb.w	r2, [r3, #780]	; 0x30c
    a16c:	f8c7 00ec 	str.w	r0, [r7, #236]	; 0xec
  NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
    a170:	f8c3 9000 	str.w	r9, [r3]
    a174:	f44f 2000 	mov.w	r0, #524288	; 0x80000
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    a178:	f883 230d 	strb.w	r2, [r3, #781]	; 0x30d
  NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
    a17c:	f44f 1780 	mov.w	r7, #1048576	; 0x100000
    a180:	601c      	str	r4, [r3, #0]
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    a182:	f883 230e 	strb.w	r2, [r3, #782]	; 0x30e
  NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
    a186:	f8c3 a000 	str.w	sl, [r3]
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    a18a:	f883 230f 	strb.w	r2, [r3, #783]	; 0x30f
  NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
    a18e:	f8c3 8000 	str.w	r8, [r3]
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    a192:	f883 2310 	strb.w	r2, [r3, #784]	; 0x310
  NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
    a196:	f8c3 e000 	str.w	lr, [r3]
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    a19a:	f883 2311 	strb.w	r2, [r3, #785]	; 0x311
  NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
    a19e:	f44f 1e00 	mov.w	lr, #2097152	; 0x200000
    a1a2:	6019      	str	r1, [r3, #0]
    a1a4:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    a1a8:	f883 2312 	strb.w	r2, [r3, #786]	; 0x312
  NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
    a1ac:	6018      	str	r0, [r3, #0]
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    a1ae:	f883 2313 	strb.w	r2, [r3, #787]	; 0x313
  NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
    a1b2:	f44f 0000 	mov.w	r0, #8388608	; 0x800000
    a1b6:	601f      	str	r7, [r3, #0]
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    a1b8:	f883 2314 	strb.w	r2, [r3, #788]	; 0x314
  NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
    a1bc:	f8c3 e000 	str.w	lr, [r3]
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    a1c0:	f883 2315 	strb.w	r2, [r3, #789]	; 0x315
  NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
    a1c4:	6019      	str	r1, [r3, #0]
    a1c6:	f04f 7180 	mov.w	r1, #16777216	; 0x1000000
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    a1ca:	f883 2316 	strb.w	r2, [r3, #790]	; 0x316
  NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
    a1ce:	f04f 7800 	mov.w	r8, #33554432	; 0x2000000
    a1d2:	6018      	str	r0, [r3, #0]
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    a1d4:	f883 2317 	strb.w	r2, [r3, #791]	; 0x317
  NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
    a1d8:	6019      	str	r1, [r3, #0]
    if (TimingMgr.SysTickPeriodMicroSec(1000)) {
    a1da:	f8dc 0000 	ldr.w	r0, [ip]
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    a1de:	f883 2318 	strb.w	r2, [r3, #792]	; 0x318
  NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
    a1e2:	f04f 6180 	mov.w	r1, #67108864	; 0x4000000
    a1e6:	f04f 6c00 	mov.w	ip, #134217728	; 0x8000000
    a1ea:	f8c3 8000 	str.w	r8, [r3]
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    a1ee:	f883 2319 	strb.w	r2, [r3, #793]	; 0x319
  NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
    a1f2:	f44f 7880 	mov.w	r8, #256	; 0x100
    a1f6:	6019      	str	r1, [r3, #0]
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    a1f8:	f883 231a 	strb.w	r2, [r3, #794]	; 0x31a
    a1fc:	2160      	movs	r1, #96	; 0x60
  NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
    a1fe:	f8c3 c000 	str.w	ip, [r3]
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    a202:	f883 231b 	strb.w	r2, [r3, #795]	; 0x31b
  NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
    a206:	f04f 0c20 	mov.w	ip, #32
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    a20a:	2240      	movs	r2, #64	; 0x40
  NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
    a20c:	f8c3 e008 	str.w	lr, [r3, #8]
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    a210:	f883 1355 	strb.w	r1, [r3, #853]	; 0x355
  NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
    a214:	609f      	str	r7, [r3, #8]
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    a216:	f883 1354 	strb.w	r1, [r3, #852]	; 0x354
  NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
    a21a:	f8c3 800c 	str.w	r8, [r3, #12]
    a21e:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
    a222:	f8c3 c00c 	str.w	ip, [r3, #12]
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    a226:	f883 2368 	strb.w	r2, [r3, #872]	; 0x368
    a22a:	f883 2365 	strb.w	r2, [r3, #869]	; 0x365
    a22e:	f000 fbdb 	bl	a9e8 <_ZN9ClearCore9SysTiming21SysTickPeriodMicroSecEm>
    a232:	b100      	cbz	r0, a236 <_ZN9ClearCore10SysManager10InitializeEv+0x202>
    a234:	e7fe      	b.n	a234 <_ZN9ClearCore10SysManager10InitializeEv+0x200>
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    a236:	4b1c      	ldr	r3, [pc, #112]	; (a2a8 <_ZN9ClearCore10SysManager10InitializeEv+0x274>)
    a238:	22c0      	movs	r2, #192	; 0xc0
    StatusMgr.Initialize(ShiftRegister::SR_UNDERGLOW_MASK);
    a23a:	4621      	mov	r1, r4
    a23c:	4628      	mov	r0, r5
    a23e:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23
    a242:	f7fc fbc9 	bl	69d8 <_ZN9ClearCore13StatusManager10InitializeENS_13ShiftRegister5MasksE>
    while (Microseconds() < 10300) {
    a246:	f642 043b 	movw	r4, #10299	; 0x283b
    a24a:	f000 fbf9 	bl	aa40 <Microseconds>
    a24e:	42a0      	cmp	r0, r4
    a250:	d9fb      	bls.n	a24a <_ZN9ClearCore10SysManager10InitializeEv+0x216>
    EthernetMgr.Initialize();
    a252:	4b16      	ldr	r3, [pc, #88]	; (a2ac <_ZN9ClearCore10SysManager10InitializeEv+0x278>)
    a254:	6818      	ldr	r0, [r3, #0]
    a256:	f000 fd39 	bl	accc <_ZN9ClearCore15EthernetManager10InitializeEv>
    m_readyForOperations = true;
    a25a:	2301      	movs	r3, #1
    a25c:	7033      	strb	r3, [r6, #0]
    a25e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    a262:	bf00      	nop
    a264:	e000edf0 	.word	0xe000edf0
    a268:	e0001000 	.word	0xe0001000
    a26c:	40001800 	.word	0x40001800
    a270:	20000bf8 	.word	0x20000bf8
    a274:	00022a58 	.word	0x00022a58
    a278:	0001d4c0 	.word	0x0001d4c0
    a27c:	41008000 	.word	0x41008000
    a280:	20000bec 	.word	0x20000bec
    a284:	20001d38 	.word	0x20001d38
    a288:	20001b00 	.word	0x20001b00
    a28c:	20000af0 	.word	0x20000af0
    a290:	20001f28 	.word	0x20001f28
    a294:	20000c04 	.word	0x20000c04
    a298:	20001c18 	.word	0x20001c18
    a29c:	40001c00 	.word	0x40001c00
    a2a0:	40000800 	.word	0x40000800
    a2a4:	e000e100 	.word	0xe000e100
    a2a8:	e000ed00 	.word	0xe000ed00
    a2ac:	20001d2c 	.word	0x20001d2c
    a2b0:	20001d20 	.word	0x20001d20

0000a2b4 <_ZN9ClearCore10SysManager10ResetBoardENS0_10ResetModesE>:
  __ASM volatile ("cpsid i" : : : "memory");
    a2b4:	b672      	cpsid	i
    a2b6:	4a09      	ldr	r2, [pc, #36]	; (a2dc <_ZN9ClearCore10SysManager10ResetBoardENS0_10ResetModesE+0x28>)
    uint32_t *addr = (uint32_t *)BOOT_DOUBLE_TAP_ADDRESS;
    if (mode == RESET_TO_BOOTLOADER) {
        *addr = DOUBLE_TAP_MAGIC;
    }
    else {
        *addr = 0;
    a2b8:	4b09      	ldr	r3, [pc, #36]	; (a2e0 <_ZN9ClearCore10SysManager10ResetBoardENS0_10ResetModesE+0x2c>)
    a2ba:	2901      	cmp	r1, #1
    a2bc:	bf18      	it	ne
    a2be:	2300      	movne	r3, #0
    a2c0:	6013      	str	r3, [r2, #0]
  __ASM volatile ("dsb 0xF":::"memory");
    a2c2:	f3bf 8f4f 	dsb	sy
__STATIC_INLINE void NVIC_SystemReset(void)
{
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
    a2c6:	4907      	ldr	r1, [pc, #28]	; (a2e4 <_ZN9ClearCore10SysManager10ResetBoardENS0_10ResetModesE+0x30>)
    a2c8:	4b07      	ldr	r3, [pc, #28]	; (a2e8 <_ZN9ClearCore10SysManager10ResetBoardENS0_10ResetModesE+0x34>)
    a2ca:	68ca      	ldr	r2, [r1, #12]
    a2cc:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
    a2d0:	4313      	orrs	r3, r2
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
    a2d2:	60cb      	str	r3, [r1, #12]
    a2d4:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("nop");
    a2d8:	bf00      	nop
    a2da:	e7fd      	b.n	a2d8 <_ZN9ClearCore10SysManager10ResetBoardENS0_10ResetModesE+0x24>
    a2dc:	2002fffc 	.word	0x2002fffc
    a2e0:	f01669ef 	.word	0xf01669ef
    a2e4:	e000ed00 	.word	0xe000ed00
    a2e8:	05fa0004 	.word	0x05fa0004

0000a2ec <GMAC_Handler>:
// =============================================================================
// =========================== Connector ISR Handlers ==========================
// =============================================================================

extern "C" void GMAC_Handler(void) {
    ClearCore::EthernetMgr.IrqHandlerGmac();
    a2ec:	4b01      	ldr	r3, [pc, #4]	; (a2f4 <GMAC_Handler+0x8>)
    a2ee:	6818      	ldr	r0, [r3, #0]
    a2f0:	f001 b964 	b.w	b5bc <_ZN9ClearCore15EthernetManager14IrqHandlerGmacEv>
    a2f4:	20001d2c 	.word	0x20001d2c

0000a2f8 <SERCOM0_0_Handler>:
}

extern "C" void SERCOM0_0_Handler(void) {
    ClearCore::ConnectorCOM1.IrqHandlerTx();
    a2f8:	4801      	ldr	r0, [pc, #4]	; (a300 <SERCOM0_0_Handler+0x8>)
    a2fa:	f007 b8d5 	b.w	114a8 <_ZN9ClearCore10SerialBase12IrqHandlerTxEv>
    a2fe:	bf00      	nop
    a300:	20001718 	.word	0x20001718

0000a304 <SERCOM0_2_Handler>:
}
extern "C" void SERCOM0_2_Handler(void) {
    ClearCore::ConnectorCOM1.IrqHandlerRx();
    a304:	4801      	ldr	r0, [pc, #4]	; (a30c <SERCOM0_2_Handler+0x8>)
    a306:	f007 b8f7 	b.w	114f8 <_ZN9ClearCore10SerialBase12IrqHandlerRxEv>
    a30a:	bf00      	nop
    a30c:	20001718 	.word	0x20001718

0000a310 <SERCOM0_3_Handler>:
}
extern "C" void SERCOM0_3_Handler(void) {
    ClearCore::ConnectorCOM1.IrqHandlerException();
    a310:	4801      	ldr	r0, [pc, #4]	; (a318 <SERCOM0_3_Handler+0x8>)
    a312:	f007 b92d 	b.w	11570 <_ZN9ClearCore10SerialBase19IrqHandlerExceptionEv>
    a316:	bf00      	nop
    a318:	20001718 	.word	0x20001718

0000a31c <SERCOM2_0_Handler>:
}

extern "C" void SERCOM2_0_Handler(void) {
    ClearCore::XBee.IrqHandlerTx();
    a31c:	4801      	ldr	r0, [pc, #4]	; (a324 <SERCOM2_0_Handler+0x8>)
    a31e:	f007 b8c3 	b.w	114a8 <_ZN9ClearCore10SerialBase12IrqHandlerTxEv>
    a322:	bf00      	nop
    a324:	20001870 	.word	0x20001870

0000a328 <SERCOM2_2_Handler>:
}
extern "C" void SERCOM2_2_Handler(void) {
    ClearCore::XBee.IrqHandlerRx();
    a328:	4801      	ldr	r0, [pc, #4]	; (a330 <SERCOM2_2_Handler+0x8>)
    a32a:	f007 b8e5 	b.w	114f8 <_ZN9ClearCore10SerialBase12IrqHandlerRxEv>
    a32e:	bf00      	nop
    a330:	20001870 	.word	0x20001870

0000a334 <SERCOM2_3_Handler>:
}
extern "C" void SERCOM2_3_Handler(void) {
    ClearCore::XBee.IrqHandlerException();
    a334:	4801      	ldr	r0, [pc, #4]	; (a33c <SERCOM2_3_Handler+0x8>)
    a336:	f007 b91b 	b.w	11570 <_ZN9ClearCore10SerialBase19IrqHandlerExceptionEv>
    a33a:	bf00      	nop
    a33c:	20001870 	.word	0x20001870

0000a340 <SERCOM7_0_Handler>:
}

extern "C" void SERCOM7_0_Handler(void) {
    ClearCore::ConnectorCOM0.IrqHandlerTx();
    a340:	4801      	ldr	r0, [pc, #4]	; (a348 <SERCOM7_0_Handler+0x8>)
    a342:	f007 b8b1 	b.w	114a8 <_ZN9ClearCore10SerialBase12IrqHandlerTxEv>
    a346:	bf00      	nop
    a348:	200015c0 	.word	0x200015c0

0000a34c <SERCOM7_2_Handler>:
}
extern "C" void SERCOM7_2_Handler(void) {
    ClearCore::ConnectorCOM0.IrqHandlerRx();
    a34c:	4801      	ldr	r0, [pc, #4]	; (a354 <SERCOM7_2_Handler+0x8>)
    a34e:	f007 b8d3 	b.w	114f8 <_ZN9ClearCore10SerialBase12IrqHandlerRxEv>
    a352:	bf00      	nop
    a354:	200015c0 	.word	0x200015c0

0000a358 <SERCOM7_3_Handler>:
}
extern "C" void SERCOM7_3_Handler(void) {
    ClearCore::ConnectorCOM0.IrqHandlerException();
    a358:	4801      	ldr	r0, [pc, #4]	; (a360 <SERCOM7_3_Handler+0x8>)
    a35a:	f007 b909 	b.w	11570 <_ZN9ClearCore10SerialBase19IrqHandlerExceptionEv>
    a35e:	bf00      	nop
    a360:	200015c0 	.word	0x200015c0

0000a364 <EIC_0_Handler>:
}

extern "C" void EIC_0_Handler(void) {
    ClearCore::InputMgr.EIC_Handler(0);
    a364:	4b02      	ldr	r3, [pc, #8]	; (a370 <EIC_0_Handler+0xc>)
    a366:	2100      	movs	r1, #0
    a368:	6818      	ldr	r0, [r3, #0]
    a36a:	f7fb b87b 	b.w	5464 <_ZN9ClearCore12InputManager11EIC_HandlerEh>
    a36e:	bf00      	nop
    a370:	20000bec 	.word	0x20000bec

0000a374 <EIC_1_Handler>:
}

extern "C" void EIC_1_Handler(void) {
    ClearCore::InputMgr.EIC_Handler(1);
    a374:	4b02      	ldr	r3, [pc, #8]	; (a380 <EIC_1_Handler+0xc>)
    a376:	2101      	movs	r1, #1
    a378:	6818      	ldr	r0, [r3, #0]
    a37a:	f7fb b873 	b.w	5464 <_ZN9ClearCore12InputManager11EIC_HandlerEh>
    a37e:	bf00      	nop
    a380:	20000bec 	.word	0x20000bec

0000a384 <EIC_2_Handler>:
}

extern "C" void EIC_2_Handler(void) {
    ClearCore::InputMgr.EIC_Handler(2);
    a384:	4b02      	ldr	r3, [pc, #8]	; (a390 <EIC_2_Handler+0xc>)
    a386:	2102      	movs	r1, #2
    a388:	6818      	ldr	r0, [r3, #0]
    a38a:	f7fb b86b 	b.w	5464 <_ZN9ClearCore12InputManager11EIC_HandlerEh>
    a38e:	bf00      	nop
    a390:	20000bec 	.word	0x20000bec

0000a394 <EIC_3_Handler>:
}

extern "C" void EIC_3_Handler(void) {
    ClearCore::InputMgr.EIC_Handler(3);
    a394:	4b02      	ldr	r3, [pc, #8]	; (a3a0 <EIC_3_Handler+0xc>)
    a396:	2103      	movs	r1, #3
    a398:	6818      	ldr	r0, [r3, #0]
    a39a:	f7fb b863 	b.w	5464 <_ZN9ClearCore12InputManager11EIC_HandlerEh>
    a39e:	bf00      	nop
    a3a0:	20000bec 	.word	0x20000bec

0000a3a4 <EIC_4_Handler>:
}

extern "C" void EIC_4_Handler(void) {
    ClearCore::InputMgr.EIC_Handler(4);
    a3a4:	4b02      	ldr	r3, [pc, #8]	; (a3b0 <EIC_4_Handler+0xc>)
    a3a6:	2104      	movs	r1, #4
    a3a8:	6818      	ldr	r0, [r3, #0]
    a3aa:	f7fb b85b 	b.w	5464 <_ZN9ClearCore12InputManager11EIC_HandlerEh>
    a3ae:	bf00      	nop
    a3b0:	20000bec 	.word	0x20000bec

0000a3b4 <EIC_5_Handler>:
}

extern "C" void EIC_5_Handler(void) {
    ClearCore::InputMgr.EIC_Handler(5);
    a3b4:	4b02      	ldr	r3, [pc, #8]	; (a3c0 <EIC_5_Handler+0xc>)
    a3b6:	2105      	movs	r1, #5
    a3b8:	6818      	ldr	r0, [r3, #0]
    a3ba:	f7fb b853 	b.w	5464 <_ZN9ClearCore12InputManager11EIC_HandlerEh>
    a3be:	bf00      	nop
    a3c0:	20000bec 	.word	0x20000bec

0000a3c4 <EIC_6_Handler>:
}

extern "C" void EIC_6_Handler(void) {
    ClearCore::InputMgr.EIC_Handler(6);
    a3c4:	4b02      	ldr	r3, [pc, #8]	; (a3d0 <EIC_6_Handler+0xc>)
    a3c6:	2106      	movs	r1, #6
    a3c8:	6818      	ldr	r0, [r3, #0]
    a3ca:	f7fb b84b 	b.w	5464 <_ZN9ClearCore12InputManager11EIC_HandlerEh>
    a3ce:	bf00      	nop
    a3d0:	20000bec 	.word	0x20000bec

0000a3d4 <EIC_7_Handler>:
}

extern "C" void EIC_7_Handler(void) {
    ClearCore::InputMgr.EIC_Handler(7);
    a3d4:	4b02      	ldr	r3, [pc, #8]	; (a3e0 <EIC_7_Handler+0xc>)
    a3d6:	2107      	movs	r1, #7
    a3d8:	6818      	ldr	r0, [r3, #0]
    a3da:	f7fb b843 	b.w	5464 <_ZN9ClearCore12InputManager11EIC_HandlerEh>
    a3de:	bf00      	nop
    a3e0:	20000bec 	.word	0x20000bec

0000a3e4 <EIC_8_Handler>:
}

extern "C" void EIC_8_Handler(void) {
    ClearCore::InputMgr.EIC_Handler(8);
    a3e4:	4b02      	ldr	r3, [pc, #8]	; (a3f0 <EIC_8_Handler+0xc>)
    a3e6:	2108      	movs	r1, #8
    a3e8:	6818      	ldr	r0, [r3, #0]
    a3ea:	f7fb b83b 	b.w	5464 <_ZN9ClearCore12InputManager11EIC_HandlerEh>
    a3ee:	bf00      	nop
    a3f0:	20000bec 	.word	0x20000bec

0000a3f4 <EIC_9_Handler>:
}

extern "C" void EIC_9_Handler(void) {
    ClearCore::InputMgr.EIC_Handler(9);
    a3f4:	4b02      	ldr	r3, [pc, #8]	; (a400 <EIC_9_Handler+0xc>)
    a3f6:	2109      	movs	r1, #9
    a3f8:	6818      	ldr	r0, [r3, #0]
    a3fa:	f7fb b833 	b.w	5464 <_ZN9ClearCore12InputManager11EIC_HandlerEh>
    a3fe:	bf00      	nop
    a400:	20000bec 	.word	0x20000bec

0000a404 <EIC_10_Handler>:
}

extern "C" void EIC_10_Handler(void) {
    ClearCore::InputMgr.EIC_Handler(10);
    a404:	4b02      	ldr	r3, [pc, #8]	; (a410 <EIC_10_Handler+0xc>)
    a406:	210a      	movs	r1, #10
    a408:	6818      	ldr	r0, [r3, #0]
    a40a:	f7fb b82b 	b.w	5464 <_ZN9ClearCore12InputManager11EIC_HandlerEh>
    a40e:	bf00      	nop
    a410:	20000bec 	.word	0x20000bec

0000a414 <EIC_11_Handler>:
}

extern "C" void EIC_11_Handler(void) {
    ClearCore::InputMgr.EIC_Handler(11);
    a414:	4b02      	ldr	r3, [pc, #8]	; (a420 <EIC_11_Handler+0xc>)
    a416:	210b      	movs	r1, #11
    a418:	6818      	ldr	r0, [r3, #0]
    a41a:	f7fb b823 	b.w	5464 <_ZN9ClearCore12InputManager11EIC_HandlerEh>
    a41e:	bf00      	nop
    a420:	20000bec 	.word	0x20000bec

0000a424 <EIC_12_Handler>:
}

extern "C" void EIC_12_Handler(void) {
    ClearCore::EthernetMgr.IrqHandlerPhy();
    a424:	4b01      	ldr	r3, [pc, #4]	; (a42c <EIC_12_Handler+0x8>)
    a426:	6818      	ldr	r0, [r3, #0]
    a428:	f000 bf0c 	b.w	b244 <_ZN9ClearCore15EthernetManager13IrqHandlerPhyEv>
    a42c:	20001d2c 	.word	0x20001d2c

0000a430 <EIC_13_Handler>:
}

extern "C" void EIC_13_Handler(void) {
    ClearCore::InputMgr.EIC_Handler(13);
    a430:	4b02      	ldr	r3, [pc, #8]	; (a43c <EIC_13_Handler+0xc>)
    a432:	210d      	movs	r1, #13
    a434:	6818      	ldr	r0, [r3, #0]
    a436:	f7fb b815 	b.w	5464 <_ZN9ClearCore12InputManager11EIC_HandlerEh>
    a43a:	bf00      	nop
    a43c:	20000bec 	.word	0x20000bec

0000a440 <EIC_14_Handler>:
}

extern "C" void EIC_14_Handler(void) {
    ClearCore::InputMgr.EIC_Handler(14);
    a440:	4b02      	ldr	r3, [pc, #8]	; (a44c <EIC_14_Handler+0xc>)
    a442:	210e      	movs	r1, #14
    a444:	6818      	ldr	r0, [r3, #0]
    a446:	f7fb b80d 	b.w	5464 <_ZN9ClearCore12InputManager11EIC_HandlerEh>
    a44a:	bf00      	nop
    a44c:	20000bec 	.word	0x20000bec

0000a450 <EIC_15_Handler>:
}

extern "C" void EIC_15_Handler(void) {
    ClearCore::InputMgr.EIC_Handler(15);
    a450:	4b02      	ldr	r3, [pc, #8]	; (a45c <EIC_15_Handler+0xc>)
    a452:	210f      	movs	r1, #15
    a454:	6818      	ldr	r0, [r3, #0]
    a456:	f7fb b805 	b.w	5464 <_ZN9ClearCore12InputManager11EIC_HandlerEh>
    a45a:	bf00      	nop
    a45c:	20000bec 	.word	0x20000bec

0000a460 <TCC3_0_Handler>:
}

extern "C" void TCC3_0_Handler(void) {
    TCC3->INTFLAG.reg = TCC_INTFLAG_MASK;
    a460:	4b02      	ldr	r3, [pc, #8]	; (a46c <TCC3_0_Handler+0xc>)
    a462:	4a03      	ldr	r2, [pc, #12]	; (a470 <TCC3_0_Handler+0x10>)
    a464:	62da      	str	r2, [r3, #44]	; 0x2c
    ClearCore::ConnectorIO5.ToneUpdate();
    a466:	4803      	ldr	r0, [pc, #12]	; (a474 <TCC3_0_Handler+0x14>)
    a468:	f004 bcdc 	b.w	ee24 <_ZN9ClearCore19DigitalInOutHBridge10ToneUpdateEv>
    a46c:	42001000 	.word	0x42001000
    a470:	003ffc0f 	.word	0x003ffc0f
    a474:	20001520 	.word	0x20001520

0000a478 <TCC4_0_Handler>:
}
extern "C" void TCC4_0_Handler(void) {
    TCC4->INTFLAG.reg = TCC_INTFLAG_MASK;
    a478:	4b02      	ldr	r3, [pc, #8]	; (a484 <TCC4_0_Handler+0xc>)
    a47a:	4a03      	ldr	r2, [pc, #12]	; (a488 <TCC4_0_Handler+0x10>)
    a47c:	62da      	str	r2, [r3, #44]	; 0x2c
    ClearCore::ConnectorIO4.ToneUpdate();
    a47e:	4803      	ldr	r0, [pc, #12]	; (a48c <TCC4_0_Handler+0x14>)
    a480:	f004 bcd0 	b.w	ee24 <_ZN9ClearCore19DigitalInOutHBridge10ToneUpdateEv>
    a484:	43001000 	.word	0x43001000
    a488:	003ffc0f 	.word	0x003ffc0f
    a48c:	2000149c 	.word	0x2000149c

0000a490 <SysTick_Handler>:
}

extern "C" void SysTick_Handler(void) {
    a490:	b508      	push	{r3, lr}
    if (!FastSysTick) {
    a492:	4b0d      	ldr	r3, [pc, #52]	; (a4c8 <SysTick_Handler+0x38>)
    a494:	781b      	ldrb	r3, [r3, #0]
    a496:	b103      	cbz	r3, a49a <SysTick_Handler+0xa>
    a498:	bd08      	pop	{r3, pc}
    if (!m_readyForOperations) {
    a49a:	4b0c      	ldr	r3, [pc, #48]	; (a4cc <SysTick_Handler+0x3c>)
    a49c:	781b      	ldrb	r3, [r3, #0]
    a49e:	2b00      	cmp	r3, #0
    a4a0:	d0fa      	beq.n	a498 <SysTick_Handler+0x8>
    CcioMgr.RefreshSlow();
    a4a2:	4b0b      	ldr	r3, [pc, #44]	; (a4d0 <SysTick_Handler+0x40>)
    a4a4:	6818      	ldr	r0, [r3, #0]
    a4a6:	f005 fd45 	bl	ff34 <_ZN9ClearCore16CcioBoardManager11RefreshSlowEv>
        MotorConnectors[iMotor]->RefreshSlow();
    a4aa:	480a      	ldr	r0, [pc, #40]	; (a4d4 <SysTick_Handler+0x44>)
    a4ac:	f7fb fade 	bl	5a6c <_ZN9ClearCore11MotorDriver11RefreshSlowEv>
    a4b0:	4809      	ldr	r0, [pc, #36]	; (a4d8 <SysTick_Handler+0x48>)
    a4b2:	f7fb fadb 	bl	5a6c <_ZN9ClearCore11MotorDriver11RefreshSlowEv>
    a4b6:	4809      	ldr	r0, [pc, #36]	; (a4dc <SysTick_Handler+0x4c>)
    a4b8:	f7fb fad8 	bl	5a6c <_ZN9ClearCore11MotorDriver11RefreshSlowEv>
    a4bc:	4808      	ldr	r0, [pc, #32]	; (a4e0 <SysTick_Handler+0x50>)
    ClearCore::SysMgr.SysTickUpdate();
}
    a4be:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
        MotorConnectors[iMotor]->RefreshSlow();
    a4c2:	f7fb bad3 	b.w	5a6c <_ZN9ClearCore11MotorDriver11RefreshSlowEv>
    a4c6:	bf00      	nop
    a4c8:	200011b0 	.word	0x200011b0
    a4cc:	20001afc 	.word	0x20001afc
    a4d0:	20001f28 	.word	0x20001f28
    a4d4:	20000c90 	.word	0x20000c90
    a4d8:	20000dd8 	.word	0x20000dd8
    a4dc:	20000f20 	.word	0x20000f20
    a4e0:	20001068 	.word	0x20001068

0000a4e4 <TCC0_0_Handler>:
    TimingMgr.IsrStart();
    a4e4:	4a30      	ldr	r2, [pc, #192]	; (a5a8 <TCC0_0_Handler+0xc4>)
/**
    Interrupt to handle ClearCore background tasks
**/
extern "C" void TCC0_0_Handler(void) {
    a4e6:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    ACK_FAST_UPDATE_INT;
    a4ea:	4b30      	ldr	r3, [pc, #192]	; (a5ac <TCC0_0_Handler+0xc8>)
    TimingMgr.IsrStart();
    a4ec:	6816      	ldr	r6, [r2, #0]
    ACK_FAST_UPDATE_INT;
    a4ee:	4a30      	ldr	r2, [pc, #192]	; (a5b0 <TCC0_0_Handler+0xcc>)
    a4f0:	62da      	str	r2, [r3, #44]	; 0x2c
    TimingMgr.IsrStart();
    a4f2:	4630      	mov	r0, r6
    a4f4:	f000 fa26 	bl	a944 <_ZN9ClearCore9SysTiming8IsrStartEv>
    CcioMgr.Refresh();
    a4f8:	4b2e      	ldr	r3, [pc, #184]	; (a5b4 <TCC0_0_Handler+0xd0>)

        \return True if the board is initialized and ready for
        operations.
    **/
    bool Ready() {
        return m_readyForOperations;
    a4fa:	f8df 80f4 	ldr.w	r8, [pc, #244]	; a5f0 <TCC0_0_Handler+0x10c>
    a4fe:	f8d3 9000 	ldr.w	r9, [r3]
    a502:	4648      	mov	r0, r9
    a504:	f005 fa34 	bl	f970 <_ZN9ClearCore16CcioBoardManager7RefreshEv>
    AdcMgr.Update();
    a508:	4b2b      	ldr	r3, [pc, #172]	; (a5b8 <TCC0_0_Handler+0xd4>)
    a50a:	6818      	ldr	r0, [r3, #0]
    a50c:	f7fa fa22 	bl	4954 <_ZN9ClearCore10AdcManager6UpdateEv>
    StatusMgr.Refresh();
    a510:	4b2a      	ldr	r3, [pc, #168]	; (a5bc <TCC0_0_Handler+0xd8>)
    a512:	6818      	ldr	r0, [r3, #0]
    a514:	f7fc fb04 	bl	6b20 <_ZN9ClearCore13StatusManager7RefreshEv>
    UsbMgr.Refresh();
    a518:	4b29      	ldr	r3, [pc, #164]	; (a5c0 <TCC0_0_Handler+0xdc>)
    a51a:	6818      	ldr	r0, [r3, #0]
    a51c:	f7fd fe22 	bl	8164 <_ZN9ClearCore10UsbManager7RefreshEv>
    InputMgr.UpdateBegin();
    a520:	4b28      	ldr	r3, [pc, #160]	; (a5c4 <TCC0_0_Handler+0xe0>)
    a522:	681f      	ldr	r7, [r3, #0]
    a524:	4638      	mov	r0, r7
    a526:	f7fa ffcb 	bl	54c0 <_ZN9ClearCore12InputManager11UpdateBeginEv>
    if (SysMgr.Ready()) {
    a52a:	f898 3000 	ldrb.w	r3, [r8]
    a52e:	b15b      	cbz	r3, a548 <TCC0_0_Handler+0x64>
    a530:	4c25      	ldr	r4, [pc, #148]	; (a5c8 <TCC0_0_Handler+0xe4>)
    a532:	4826      	ldr	r0, [pc, #152]	; (a5cc <TCC0_0_Handler+0xe8>)
    a534:	f104 0550 	add.w	r5, r4, #80	; 0x50
    a538:	e001      	b.n	a53e <TCC0_0_Handler+0x5a>
    a53a:	f854 0f04 	ldr.w	r0, [r4, #4]!
            Connectors[i]->Refresh();
    a53e:	6803      	ldr	r3, [r0, #0]
    a540:	6a1b      	ldr	r3, [r3, #32]
    a542:	4798      	blx	r3
        for (uint8_t i = 0; i < CLEARCORE_PIN_MAX; i++) {
    a544:	42ac      	cmp	r4, r5
    a546:	d1f8      	bne.n	a53a <TCC0_0_Handler+0x56>
    InputMgr.UpdateEnd();
    a548:	4638      	mov	r0, r7
    a54a:	f7fa ffcd 	bl	54e8 <_ZN9ClearCore12InputManager9UpdateEndEv>
    EncoderIn.Update();
    a54e:	4820      	ldr	r0, [pc, #128]	; (a5d0 <TCC0_0_Handler+0xec>)
    a550:	f002 fbd8 	bl	cd04 <_ZN9ClearCore12EncoderInput6UpdateEv>
    ShiftReg.Update();
    a554:	481f      	ldr	r0, [pc, #124]	; (a5d4 <TCC0_0_Handler+0xf0>)
    a556:	f001 f9b7 	bl	b8c8 <_ZN9ClearCore13ShiftRegister6UpdateEv>
    TimingMgr.Update();
    a55a:	4630      	mov	r0, r6
    a55c:	f000 fa08 	bl	a970 <_ZN9ClearCore9SysTiming6UpdateEv>
    tickCnt++;
    a560:	4a1d      	ldr	r2, [pc, #116]	; (a5d8 <TCC0_0_Handler+0xf4>)
    if (FastSysTick) {
    a562:	491e      	ldr	r1, [pc, #120]	; (a5dc <TCC0_0_Handler+0xf8>)
    tickCnt++;
    a564:	6813      	ldr	r3, [r2, #0]
    if (FastSysTick) {
    a566:	7809      	ldrb	r1, [r1, #0]
    tickCnt++;
    a568:	3301      	adds	r3, #1
    a56a:	6013      	str	r3, [r2, #0]
    if (FastSysTick) {
    a56c:	b111      	cbz	r1, a574 <TCC0_0_Handler+0x90>
    if (!m_readyForOperations) {
    a56e:	f898 3000 	ldrb.w	r3, [r8]
    a572:	b923      	cbnz	r3, a57e <TCC0_0_Handler+0x9a>
    TimingMgr.IsrEnd();
    a574:	4630      	mov	r0, r6
    ClearCore::SysMgr.FastUpdate();
}
    a576:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    TimingMgr.IsrEnd();
    a57a:	f000 b9e9 	b.w	a950 <_ZN9ClearCore9SysTiming6IsrEndEv>
    CcioMgr.RefreshSlow();
    a57e:	4648      	mov	r0, r9
    a580:	f005 fcd8 	bl	ff34 <_ZN9ClearCore16CcioBoardManager11RefreshSlowEv>
        MotorConnectors[iMotor]->RefreshSlow();
    a584:	4816      	ldr	r0, [pc, #88]	; (a5e0 <TCC0_0_Handler+0xfc>)
    a586:	f7fb fa71 	bl	5a6c <_ZN9ClearCore11MotorDriver11RefreshSlowEv>
    a58a:	4816      	ldr	r0, [pc, #88]	; (a5e4 <TCC0_0_Handler+0x100>)
    a58c:	f7fb fa6e 	bl	5a6c <_ZN9ClearCore11MotorDriver11RefreshSlowEv>
    a590:	4815      	ldr	r0, [pc, #84]	; (a5e8 <TCC0_0_Handler+0x104>)
    a592:	f7fb fa6b 	bl	5a6c <_ZN9ClearCore11MotorDriver11RefreshSlowEv>
    a596:	4815      	ldr	r0, [pc, #84]	; (a5ec <TCC0_0_Handler+0x108>)
    a598:	f7fb fa68 	bl	5a6c <_ZN9ClearCore11MotorDriver11RefreshSlowEv>
    TimingMgr.IsrEnd();
    a59c:	4630      	mov	r0, r6
}
    a59e:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    TimingMgr.IsrEnd();
    a5a2:	f000 b9d5 	b.w	a950 <_ZN9ClearCore9SysTiming6IsrEndEv>
    a5a6:	bf00      	nop
    a5a8:	20001d20 	.word	0x20001d20
    a5ac:	41016000 	.word	0x41016000
    a5b0:	003ffc0f 	.word	0x003ffc0f
    a5b4:	20001f28 	.word	0x20001f28
    a5b8:	20000af0 	.word	0x20000af0
    a5bc:	20000bf8 	.word	0x20000bf8
    a5c0:	20000c04 	.word	0x20000c04
    a5c4:	20000bec 	.word	0x20000bec
    a5c8:	00022a5c 	.word	0x00022a5c
    a5cc:	20001310 	.word	0x20001310
    a5d0:	20001c18 	.word	0x20001c18
    a5d4:	20001b00 	.word	0x20001b00
    a5d8:	20001d1c 	.word	0x20001d1c
    a5dc:	200011b0 	.word	0x200011b0
    a5e0:	20000c90 	.word	0x20000c90
    a5e4:	20000dd8 	.word	0x20000dd8
    a5e8:	20000f20 	.word	0x20000f20
    a5ec:	20001068 	.word	0x20001068
    a5f0:	20001afc 	.word	0x20001afc

0000a5f4 <Reset_Handler>:
extern int main(void);

/**
    This is called on processor reset to initialize the device and call main().
*/
void Reset_Handler(void) {
    a5f4:	b508      	push	{r3, lr}

    // Initialize the initialized data section
    pSrc = &__etext;
    pDest = &__data_start__;

    if ((&__data_start__ != &__data_end__) && (pSrc != pDest)) {
    a5f6:	4813      	ldr	r0, [pc, #76]	; (a644 <Reset_Handler+0x50>)
    a5f8:	4b13      	ldr	r3, [pc, #76]	; (a648 <Reset_Handler+0x54>)
    a5fa:	4298      	cmp	r0, r3
    a5fc:	d00b      	beq.n	a616 <Reset_Handler+0x22>
    a5fe:	4913      	ldr	r1, [pc, #76]	; (a64c <Reset_Handler+0x58>)
    a600:	4281      	cmp	r1, r0
    a602:	d008      	beq.n	a616 <Reset_Handler+0x22>
        for (; pDest < &__data_end__; pDest++, pSrc++) {
    a604:	4298      	cmp	r0, r3
    a606:	d206      	bcs.n	a616 <Reset_Handler+0x22>
            *pDest = *pSrc;
    a608:	43c2      	mvns	r2, r0
    a60a:	441a      	add	r2, r3
    a60c:	f022 0203 	bic.w	r2, r2, #3
    a610:	3204      	adds	r2, #4
    a612:	f013 fcd5 	bl	1dfc0 <memcpy>
        }
    }

    // Clear the zero section
    if (&__bss_start__ != &__bss_end__) {
    a616:	480e      	ldr	r0, [pc, #56]	; (a650 <Reset_Handler+0x5c>)
    a618:	4b0e      	ldr	r3, [pc, #56]	; (a654 <Reset_Handler+0x60>)
    a61a:	4298      	cmp	r0, r3
    a61c:	d008      	beq.n	a630 <Reset_Handler+0x3c>
        for (pDest = &__bss_start__; pDest < &__bss_end__; pDest++) {
    a61e:	d207      	bcs.n	a630 <Reset_Handler+0x3c>
            *pDest = 0ul;
    a620:	43c2      	mvns	r2, r0
    a622:	441a      	add	r2, r3
    a624:	f022 0203 	bic.w	r2, r2, #3
    a628:	3204      	adds	r2, #4
    a62a:	2100      	movs	r1, #0
    a62c:	f013 fdc6 	bl	1e1bc <memset>
        }
    }

    SystemInit();
    a630:	f002 f996 	bl	c960 <SystemInit>

    /* Initialize the C library */
    __libc_init_array();
    a634:	f013 f91e 	bl	1d874 <__libc_init_array>

    ClearCore::SysMgr.Initialize();
    a638:	4807      	ldr	r0, [pc, #28]	; (a658 <Reset_Handler+0x64>)
    a63a:	f7ff fcfb 	bl	a034 <_ZN9ClearCore10SysManager10InitializeEv>

#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wpedantic"
    // ISO C++ forbids hijacking main(), but we can't avoid it
    // in this application.
    main();
    a63e:	f7f9 fef5 	bl	442c <main>
    a642:	e7fe      	b.n	a642 <Reset_Handler+0x4e>
    a644:	20000000 	.word	0x20000000
    a648:	20000ac0 	.word	0x20000ac0
    a64c:	00024cc4 	.word	0x00024cc4
    a650:	20000ac0 	.word	0x20000ac0
    a654:	200023a8 	.word	0x200023a8
    a658:	20001afc 	.word	0x20001afc

0000a65c <_GLOBAL__sub_I__ZN9ClearCore11FastSysTickE>:
#pragma GCC diagnostic pop

    while (1) {
        continue;
    }
}
    a65c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
EncoderInput EncoderIn;
    a660:	4852      	ldr	r0, [pc, #328]	; (a7ac <_GLOBAL__sub_I__ZN9ClearCore11FastSysTickE+0x150>)
        \brief Default constructor so this connector can be a global and
        constructed by SysManager.

        \note Should not be called by anything other than SysManager.
    **/
    LedDriver() {};
    a662:	4d53      	ldr	r5, [pc, #332]	; (a7b0 <_GLOBAL__sub_I__ZN9ClearCore11FastSysTickE+0x154>)
    DigitalIn() {};
    a664:	4c53      	ldr	r4, [pc, #332]	; (a7b4 <_GLOBAL__sub_I__ZN9ClearCore11FastSysTickE+0x158>)
    a666:	f8df 91bc 	ldr.w	r9, [pc, #444]	; a824 <_GLOBAL__sub_I__ZN9ClearCore11FastSysTickE+0x1c8>
    a66a:	f8df 81bc 	ldr.w	r8, [pc, #444]	; a828 <_GLOBAL__sub_I__ZN9ClearCore11FastSysTickE+0x1cc>
    a66e:	4f52      	ldr	r7, [pc, #328]	; (a7b8 <_GLOBAL__sub_I__ZN9ClearCore11FastSysTickE+0x15c>)
    a670:	f002 faf0 	bl	cc54 <_ZN9ClearCore12EncoderInputC1Ev>
            reg = 0;
    a674:	4b51      	ldr	r3, [pc, #324]	; (a7bc <_GLOBAL__sub_I__ZN9ClearCore11FastSysTickE+0x160>)
    SdCardDriver() {};
    a676:	4a52      	ldr	r2, [pc, #328]	; (a7c0 <_GLOBAL__sub_I__ZN9ClearCore11FastSysTickE+0x164>)
ShiftRegister ShiftReg;
    a678:	4852      	ldr	r0, [pc, #328]	; (a7c4 <_GLOBAL__sub_I__ZN9ClearCore11FastSysTickE+0x168>)
    a67a:	601a      	str	r2, [r3, #0]
    a67c:	2600      	movs	r6, #0
    a67e:	f8c3 6140 	str.w	r6, [r3, #320]	; 0x140
    a682:	f000 ffbd 	bl	b600 <_ZN9ClearCore13ShiftRegisterC1Ev>
    a686:	4b50      	ldr	r3, [pc, #320]	; (a7c8 <_GLOBAL__sub_I__ZN9ClearCore11FastSysTickE+0x16c>)
#ifndef HIDE_FROM_DOXYGEN
    /**
        Default constructor so this connector can be a global and constructed
        by SysManager.
    **/
    XBeeDriver() {};
    a688:	4a50      	ldr	r2, [pc, #320]	; (a7cc <_GLOBAL__sub_I__ZN9ClearCore11FastSysTickE+0x170>)
    a68a:	f8c3 6140 	str.w	r6, [r3, #320]	; 0x140
    a68e:	4628      	mov	r0, r5
    a690:	601a      	str	r2, [r3, #0]
    a692:	f7fa fd85 	bl	51a0 <_ZN9ClearCore9ConnectorC1Ev>
    a696:	4b4e      	ldr	r3, [pc, #312]	; (a7d0 <_GLOBAL__sub_I__ZN9ClearCore11FastSysTickE+0x174>)
    a698:	602b      	str	r3, [r5, #0]
    a69a:	4620      	mov	r0, r4
    a69c:	f7fa fd80 	bl	51a0 <_ZN9ClearCore9ConnectorC1Ev>
        \brief Default constructor so this connector can be a global and
        constructed by SysManager

        \note Should not be called by anything other than SysManager
    **/
    DigitalInOutAnalogOut() {};
    a6a0:	4b4c      	ldr	r3, [pc, #304]	; (a7d4 <_GLOBAL__sub_I__ZN9ClearCore11FastSysTickE+0x178>)
    a6a2:	6023      	str	r3, [r4, #0]
    a6a4:	4648      	mov	r0, r9
    a6a6:	f7fa fd7b 	bl	51a0 <_ZN9ClearCore9ConnectorC1Ev>
        Default constructor so this connector can be a global and constructed
        by SysManager

        \note Should not be called by anything other than SysManager
    **/
    DigitalInOut() {};
    a6aa:	4c4b      	ldr	r4, [pc, #300]	; (a7d8 <_GLOBAL__sub_I__ZN9ClearCore11FastSysTickE+0x17c>)
    a6ac:	4d4b      	ldr	r5, [pc, #300]	; (a7dc <_GLOBAL__sub_I__ZN9ClearCore11FastSysTickE+0x180>)
    a6ae:	f8c9 4000 	str.w	r4, [r9]
    a6b2:	4640      	mov	r0, r8
    a6b4:	f7fa fd74 	bl	51a0 <_ZN9ClearCore9ConnectorC1Ev>
    a6b8:	f8df 9170 	ldr.w	r9, [pc, #368]	; a82c <_GLOBAL__sub_I__ZN9ClearCore11FastSysTickE+0x1d0>
    a6bc:	f8c8 4000 	str.w	r4, [r8]
    a6c0:	4638      	mov	r0, r7
    a6c2:	f7fa fd6d 	bl	51a0 <_ZN9ClearCore9ConnectorC1Ev>
    a6c6:	f8df 8168 	ldr.w	r8, [pc, #360]	; a830 <_GLOBAL__sub_I__ZN9ClearCore11FastSysTickE+0x1d4>
    a6ca:	603c      	str	r4, [r7, #0]
    a6cc:	4628      	mov	r0, r5
    a6ce:	f7fa fd67 	bl	51a0 <_ZN9ClearCore9ConnectorC1Ev>
    DigitalInOutHBridge() {};
    a6d2:	4c43      	ldr	r4, [pc, #268]	; (a7e0 <_GLOBAL__sub_I__ZN9ClearCore11FastSysTickE+0x184>)
    a6d4:	4f43      	ldr	r7, [pc, #268]	; (a7e4 <_GLOBAL__sub_I__ZN9ClearCore11FastSysTickE+0x188>)
    a6d6:	602c      	str	r4, [r5, #0]
    a6d8:	4648      	mov	r0, r9
    a6da:	f7fa fd61 	bl	51a0 <_ZN9ClearCore9ConnectorC1Ev>
    a6de:	4d42      	ldr	r5, [pc, #264]	; (a7e8 <_GLOBAL__sub_I__ZN9ClearCore11FastSysTickE+0x18c>)
    a6e0:	f8c9 4000 	str.w	r4, [r9]
    a6e4:	4640      	mov	r0, r8
    a6e6:	f7fa fd5b 	bl	51a0 <_ZN9ClearCore9ConnectorC1Ev>
    a6ea:	4c40      	ldr	r4, [pc, #256]	; (a7ec <_GLOBAL__sub_I__ZN9ClearCore11FastSysTickE+0x190>)
    a6ec:	f8df 9144 	ldr.w	r9, [pc, #324]	; a834 <_GLOBAL__sub_I__ZN9ClearCore11FastSysTickE+0x1d8>
    a6f0:	f8c8 4000 	str.w	r4, [r8]
    a6f4:	4638      	mov	r0, r7
    a6f6:	f7fa fd53 	bl	51a0 <_ZN9ClearCore9ConnectorC1Ev>
    a6fa:	f8df 813c 	ldr.w	r8, [pc, #316]	; a838 <_GLOBAL__sub_I__ZN9ClearCore11FastSysTickE+0x1dc>
    a6fe:	603c      	str	r4, [r7, #0]
    a700:	4628      	mov	r0, r5
    a702:	f7fa fd4d 	bl	51a0 <_ZN9ClearCore9ConnectorC1Ev>
    a706:	4f3a      	ldr	r7, [pc, #232]	; (a7f0 <_GLOBAL__sub_I__ZN9ClearCore11FastSysTickE+0x194>)
    a708:	602c      	str	r4, [r5, #0]
    a70a:	4648      	mov	r0, r9
    a70c:	f7fa fd48 	bl	51a0 <_ZN9ClearCore9ConnectorC1Ev>
    DigitalInAnalogIn() {};
    a710:	4c38      	ldr	r4, [pc, #224]	; (a7f4 <_GLOBAL__sub_I__ZN9ClearCore11FastSysTickE+0x198>)
    a712:	4d39      	ldr	r5, [pc, #228]	; (a7f8 <_GLOBAL__sub_I__ZN9ClearCore11FastSysTickE+0x19c>)
    a714:	f8c9 4000 	str.w	r4, [r9]
    a718:	4640      	mov	r0, r8
    a71a:	f7fa fd41 	bl	51a0 <_ZN9ClearCore9ConnectorC1Ev>
    a71e:	4638      	mov	r0, r7
    a720:	f8c8 4000 	str.w	r4, [r8]
    a724:	f7fa fd3c 	bl	51a0 <_ZN9ClearCore9ConnectorC1Ev>
    a728:	4628      	mov	r0, r5
    a72a:	603c      	str	r4, [r7, #0]
    a72c:	f7fa fd38 	bl	51a0 <_ZN9ClearCore9ConnectorC1Ev>
MotorDriver ConnectorM0;
    a730:	4832      	ldr	r0, [pc, #200]	; (a7fc <_GLOBAL__sub_I__ZN9ClearCore11FastSysTickE+0x1a0>)
    a732:	602c      	str	r4, [r5, #0]
    a734:	f7fd ff1e 	bl	8574 <_ZN9ClearCore11MotorDriverC1Ev>
MotorDriver ConnectorM1;
    a738:	4831      	ldr	r0, [pc, #196]	; (a800 <_GLOBAL__sub_I__ZN9ClearCore11FastSysTickE+0x1a4>)

    It provides a generic interface that all serial objects have. This includes
    - Port Opening/Closing
    - Communication configuration
**/
class ISerial {
    a73a:	f8df 8100 	ldr.w	r8, [pc, #256]	; a83c <_GLOBAL__sub_I__ZN9ClearCore11FastSysTickE+0x1e0>

    /**
        Default constructor so this connector can be a global and constructed
        by SysManager
    **/
    SerialBase() {};
    a73e:	4d31      	ldr	r5, [pc, #196]	; (a804 <_GLOBAL__sub_I__ZN9ClearCore11FastSysTickE+0x1a8>)
    a740:	4c31      	ldr	r4, [pc, #196]	; (a808 <_GLOBAL__sub_I__ZN9ClearCore11FastSysTickE+0x1ac>)
#ifndef HIDE_FROM_DOXYGEN
    /**
        \brief Default constructor so this connector can be a global and
        constructed by SysManager.
    **/
    SerialDriver() {};
    a742:	4f32      	ldr	r7, [pc, #200]	; (a80c <_GLOBAL__sub_I__ZN9ClearCore11FastSysTickE+0x1b0>)
    a744:	f8df 90f8 	ldr.w	r9, [pc, #248]	; a840 <_GLOBAL__sub_I__ZN9ClearCore11FastSysTickE+0x1e4>
    a748:	f7fd ff14 	bl	8574 <_ZN9ClearCore11MotorDriverC1Ev>
MotorDriver ConnectorM2;
    a74c:	4830      	ldr	r0, [pc, #192]	; (a810 <_GLOBAL__sub_I__ZN9ClearCore11FastSysTickE+0x1b4>)
    a74e:	f7fd ff11 	bl	8574 <_ZN9ClearCore11MotorDriverC1Ev>
MotorDriver ConnectorM3;
    a752:	4830      	ldr	r0, [pc, #192]	; (a814 <_GLOBAL__sub_I__ZN9ClearCore11FastSysTickE+0x1b8>)
    a754:	f7fd ff0e 	bl	8574 <_ZN9ClearCore11MotorDriverC1Ev>
    a758:	4640      	mov	r0, r8
    a75a:	4b2f      	ldr	r3, [pc, #188]	; (a818 <_GLOBAL__sub_I__ZN9ClearCore11FastSysTickE+0x1bc>)
    a75c:	f840 3b04 	str.w	r3, [r0], #4
    SerialUsb() {};
    a760:	f7fa fd1e 	bl	51a0 <_ZN9ClearCore9ConnectorC1Ev>
    a764:	4b2d      	ldr	r3, [pc, #180]	; (a81c <_GLOBAL__sub_I__ZN9ClearCore11FastSysTickE+0x1c0>)
    a766:	f8c8 3000 	str.w	r3, [r8]
    a76a:	f505 70a2 	add.w	r0, r5, #324	; 0x144
    a76e:	3374      	adds	r3, #116	; 0x74
            reg = 0;
    a770:	f8c5 6140 	str.w	r6, [r5, #320]	; 0x140
    SerialBase() {};
    a774:	f8c5 9000 	str.w	r9, [r5]
    a778:	f8c8 3004 	str.w	r3, [r8, #4]
    a77c:	f7fa fd10 	bl	51a0 <_ZN9ClearCore9ConnectorC1Ev>
    a780:	f107 0874 	add.w	r8, r7, #116	; 0x74
    a784:	f504 70a2 	add.w	r0, r4, #324	; 0x144
            reg = 0;
    a788:	f8c4 6140 	str.w	r6, [r4, #320]	; 0x140
    SerialBase() {};
    a78c:	f8c4 9000 	str.w	r9, [r4]
    a790:	602f      	str	r7, [r5, #0]
    a792:	f8c5 8144 	str.w	r8, [r5, #324]	; 0x144
    a796:	f7fa fd03 	bl	51a0 <_ZN9ClearCore9ConnectorC1Ev>
    a79a:	f8c4 8144 	str.w	r8, [r4, #324]	; 0x144
    a79e:	6027      	str	r7, [r4, #0]
SysManager SysMgr;
    a7a0:	481f      	ldr	r0, [pc, #124]	; (a820 <_GLOBAL__sub_I__ZN9ClearCore11FastSysTickE+0x1c4>)
}
    a7a2:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
SysManager SysMgr;
    a7a6:	f7fd bf07 	b.w	85b8 <_ZN9ClearCore10SysManagerC1Ev>
    a7aa:	bf00      	nop
    a7ac:	20001c18 	.word	0x20001c18
    a7b0:	200015a4 	.word	0x200015a4
    a7b4:	20001310 	.word	0x20001310
    a7b8:	2000143c 	.word	0x2000143c
    a7bc:	200019b4 	.word	0x200019b4
    a7c0:	000229a0 	.word	0x000229a0
    a7c4:	20001b00 	.word	0x20001b00
    a7c8:	20001870 	.word	0x20001870
    a7cc:	000229f0 	.word	0x000229f0
    a7d0:	000230c0 	.word	0x000230c0
    a7d4:	00022eb8 	.word	0x00022eb8
    a7d8:	00022ee8 	.word	0x00022ee8
    a7dc:	2000149c 	.word	0x2000149c
    a7e0:	00022f38 	.word	0x00022f38
    a7e4:	200012b0 	.word	0x200012b0
    a7e8:	200012e0 	.word	0x200012e0
    a7ec:	000227e0 	.word	0x000227e0
    a7f0:	200011f8 	.word	0x200011f8
    a7f4:	00022780 	.word	0x00022780
    a7f8:	2000123c 	.word	0x2000123c
    a7fc:	20000c90 	.word	0x20000c90
    a800:	20000dd8 	.word	0x20000dd8
    a804:	200015c0 	.word	0x200015c0
    a808:	20001718 	.word	0x20001718
    a80c:	0002301c 	.word	0x0002301c
    a810:	20000f20 	.word	0x20000f20
    a814:	20001068 	.word	0x20001068
    a818:	0002289c 	.word	0x0002289c
    a81c:	000228ec 	.word	0x000228ec
    a820:	20001afc 	.word	0x20001afc
    a824:	2000137c 	.word	0x2000137c
    a828:	200013dc 	.word	0x200013dc
    a82c:	20001520 	.word	0x20001520
    a830:	20001280 	.word	0x20001280
    a834:	20000c4c 	.word	0x20000c4c
    a838:	200011b4 	.word	0x200011b4
    a83c:	200015b0 	.word	0x200015b0
    a840:	00022fac 	.word	0x00022fac

0000a844 <_ZN9ClearCore10NvmManager8InstanceEv>:
#define DEFAULT_MAC_ADDRESS 0x241510b00000

NvmManager &NvmMgr = NvmManager::Instance();
uint32_t NvmMgrUnlock;

NvmManager &NvmManager::Instance() {
    a844:	b538      	push	{r3, r4, r5, lr}
    static NvmManager *instance = new NvmManager();
    a846:	4d0f      	ldr	r5, [pc, #60]	; (a884 <_ZN9ClearCore10NvmManager8InstanceEv+0x40>)
    a848:	682b      	ldr	r3, [r5, #0]
    a84a:	f013 0401 	ands.w	r4, r3, #1
    a84e:	d002      	beq.n	a856 <_ZN9ClearCore10NvmManager8InstanceEv+0x12>
    a850:	4b0d      	ldr	r3, [pc, #52]	; (a888 <_ZN9ClearCore10NvmManager8InstanceEv+0x44>)
    a852:	6818      	ldr	r0, [r3, #0]
    a854:	bd38      	pop	{r3, r4, r5, pc}
    a856:	f44f 7002 	mov.w	r0, #520	; 0x208
    a85a:	f008 fbb5 	bl	12fc8 <_Znwj>
    a85e:	4603      	mov	r3, r0
    // if the cache is disabled. 
    //NVMCTRL->CTRLA.bit.CACHEDIS0 = 1;
    //NVMCTRL->CTRLA.bit.CACHEDIS1 = 1;
    // Copy the contents of memory into a buffer
    memcpy(m_nvmPageCache, reinterpret_cast<const void *>(NVMCTRL_USER),
           NVMCTRL_PAGE_SIZE);
    a860:	f44f 7200 	mov.w	r2, #512	; 0x200
      m_pageModified(false) {
    a864:	f8c3 0200 	str.w	r0, [r3, #512]	; 0x200
           NVMCTRL_PAGE_SIZE);
    a868:	4908      	ldr	r1, [pc, #32]	; (a88c <_ZN9ClearCore10NvmManager8InstanceEv+0x48>)
      m_pageModified(false) {
    a86a:	f880 4204 	strb.w	r4, [r0, #516]	; 0x204
    a86e:	f880 4205 	strb.w	r4, [r0, #517]	; 0x205
    a872:	f880 4206 	strb.w	r4, [r0, #518]	; 0x206
           NVMCTRL_PAGE_SIZE);
    a876:	f013 fba3 	bl	1dfc0 <memcpy>
    static NvmManager *instance = new NvmManager();
    a87a:	4903      	ldr	r1, [pc, #12]	; (a888 <_ZN9ClearCore10NvmManager8InstanceEv+0x44>)
    a87c:	2201      	movs	r2, #1
    a87e:	6008      	str	r0, [r1, #0]
    a880:	602a      	str	r2, [r5, #0]
}
    a882:	bd38      	pop	{r3, r4, r5, pc}
    a884:	20001d0c 	.word	0x20001d0c
    a888:	20001d14 	.word	0x20001d14
    a88c:	00804000 	.word	0x00804000

0000a890 <_ZN9ClearCore10NvmManager5Int16ENS0_12NvmLocationsE>:
    if (nvmLocation >=
    a890:	f5b1 7fef 	cmp.w	r1, #478	; 0x1de
    returnValue = address[0];
    a894:	bf9a      	itte	ls
    a896:	1840      	addls	r0, r0, r1
    a898:	f9b0 0020 	ldrshls.w	r0, [r0, #32]
        return -1;
    a89c:	f04f 30ff 	movhi.w	r0, #4294967295
}
    a8a0:	4770      	bx	lr
    a8a2:	bf00      	nop

0000a8a4 <_ZN9ClearCore10NvmManager10MacAddressEPh>:
}

void NvmManager::MacAddress(uint8_t *macAddress) {
    a8a4:	b4f0      	push	{r4, r5, r6, r7}
    returnValue = (returnValue << 32) | val2;
    a8a6:	f8d0 51f4 	ldr.w	r5, [r0, #500]	; 0x1f4
    a8aa:	f8d0 01f8 	ldr.w	r0, [r0, #504]	; 0x1f8
    a8ae:	2400      	movs	r4, #0
    a8b0:	ea44 0200 	orr.w	r2, r4, r0
    uint64_t macNvm = Int64(NVM_LOC_MAC_FIRST);
    // If an invalid MAC address is detected, revert to 
    // the default MAC address to be able to come online.
    if (macNvm == UINT64_MAX || (macNvm >> 48)) {
    a8b4:	1c6b      	adds	r3, r5, #1
    a8b6:	bf08      	it	eq
    a8b8:	f1b2 3fff 	cmpeq.w	r2, #4294967295
    a8bc:	d005      	beq.n	a8ca <_ZN9ClearCore10NvmManager10MacAddressEPh+0x26>
    a8be:	0c2e      	lsrs	r6, r5, #16
    a8c0:	4627      	mov	r7, r4
    a8c2:	ea56 0007 	orrs.w	r0, r6, r7
    a8c6:	462b      	mov	r3, r5
    a8c8:	d002      	beq.n	a8d0 <_ZN9ClearCore10NvmManager10MacAddressEPh+0x2c>
        macNvm = DEFAULT_MAC_ADDRESS;
    a8ca:	4a07      	ldr	r2, [pc, #28]	; (a8e8 <_ZN9ClearCore10NvmManager10MacAddressEPh+0x44>)
    a8cc:	f242 4315 	movw	r3, #9237	; 0x2415
    }
    for (int8_t shift = 5; shift >= 0; shift--) {
        macAddress[5 - shift] = (macNvm >> shift * 8) & 0xFF;
    a8d0:	0a1e      	lsrs	r6, r3, #8
    a8d2:	0e15      	lsrs	r5, r2, #24
    a8d4:	0c14      	lsrs	r4, r2, #16
    a8d6:	0a10      	lsrs	r0, r2, #8
    a8d8:	700e      	strb	r6, [r1, #0]
    a8da:	708d      	strb	r5, [r1, #2]
    a8dc:	70cc      	strb	r4, [r1, #3]
    a8de:	704b      	strb	r3, [r1, #1]
    a8e0:	714a      	strb	r2, [r1, #5]
    a8e2:	7108      	strb	r0, [r1, #4]
    }
}
    a8e4:	bcf0      	pop	{r4, r5, r6, r7}
    a8e6:	4770      	bx	lr
    a8e8:	10b00000 	.word	0x10b00000

0000a8ec <_GLOBAL__sub_I__ZN9ClearCore6NvmMgrE>:
    //return StatusManager::Instance().StatusRT().bit.VSupplyUnderVoltage;
    return AdcManager::Instance().ConvertedResult(AdcManager::ADC_VSUPPLY_MON) 
           < UNDER_VOLTAGE_TRIP_CNT;
}

} // ClearCore namespace
    a8ec:	b508      	push	{r3, lr}
NvmManager &NvmMgr = NvmManager::Instance();
    a8ee:	f7ff ffa9 	bl	a844 <_ZN9ClearCore10NvmManager8InstanceEv>
    a8f2:	4b01      	ldr	r3, [pc, #4]	; (a8f8 <_GLOBAL__sub_I__ZN9ClearCore6NvmMgrE+0xc>)
    a8f4:	6018      	str	r0, [r3, #0]
    a8f6:	bd08      	pop	{r3, pc}
    a8f8:	20001d10 	.word	0x20001d10

0000a8fc <_ZN9ClearCore9SysTiming8InstanceEv>:
    m_microAdjLow(0),
    m_microAdjHighRemainder(0),
    m_microAdjLowRemainder(0) {}


SysTiming &SysTiming::Instance() {
    a8fc:	b570      	push	{r4, r5, r6, lr}
    static SysTiming *instance = new SysTiming();
    a8fe:	4d0f      	ldr	r5, [pc, #60]	; (a93c <_ZN9ClearCore9SysTiming8InstanceEv+0x40>)
    a900:	682c      	ldr	r4, [r5, #0]
    a902:	f014 0401 	ands.w	r4, r4, #1
    a906:	d002      	beq.n	a90e <_ZN9ClearCore9SysTiming8InstanceEv+0x12>
    a908:	4b0d      	ldr	r3, [pc, #52]	; (a940 <_ZN9ClearCore9SysTiming8InstanceEv+0x44>)
    a90a:	6818      	ldr	r0, [r3, #0]
    a90c:	bd70      	pop	{r4, r5, r6, pc}
    a90e:	2030      	movs	r0, #48	; 0x30
    a910:	f008 fb5a 	bl	12fc8 <_Znwj>
    a914:	4a0a      	ldr	r2, [pc, #40]	; (a940 <_ZN9ClearCore9SysTiming8InstanceEv+0x44>)
    m_microAdjLowRemainder(0) {}
    a916:	6004      	str	r4, [r0, #0]
    a918:	2105      	movs	r1, #5
    a91a:	f04f 36ff 	mov.w	r6, #4294967295
    static SysTiming *instance = new SysTiming();
    a91e:	2301      	movs	r3, #1
    m_microAdjLowRemainder(0) {}
    a920:	7501      	strb	r1, [r0, #20]
    a922:	6084      	str	r4, [r0, #8]
    a924:	60c4      	str	r4, [r0, #12]
    a926:	6104      	str	r4, [r0, #16]
    a928:	6184      	str	r4, [r0, #24]
    a92a:	61c4      	str	r4, [r0, #28]
    a92c:	6204      	str	r4, [r0, #32]
    a92e:	6244      	str	r4, [r0, #36]	; 0x24
    a930:	6284      	str	r4, [r0, #40]	; 0x28
    a932:	62c4      	str	r4, [r0, #44]	; 0x2c
    a934:	6046      	str	r6, [r0, #4]
    static SysTiming *instance = new SysTiming();
    a936:	6010      	str	r0, [r2, #0]
    a938:	602b      	str	r3, [r5, #0]
    return *instance;
}
    a93a:	bd70      	pop	{r4, r5, r6, pc}
    a93c:	20001d18 	.word	0x20001d18
    a940:	20001d24 	.word	0x20001d24

0000a944 <_ZN9ClearCore9SysTiming8IsrStartEv>:

void SysTiming::IsrStart() {
    m_isrStartCycle = DWT->CYCCNT;
    a944:	4b01      	ldr	r3, [pc, #4]	; (a94c <_ZN9ClearCore9SysTiming8IsrStartEv+0x8>)
    a946:	685b      	ldr	r3, [r3, #4]
    a948:	6003      	str	r3, [r0, #0]
    a94a:	4770      	bx	lr
    a94c:	e0001000 	.word	0xe0001000

0000a950 <_ZN9ClearCore9SysTiming6IsrEndEv>:
}

void SysTiming::IsrEnd() {
    m_isrLastCycles = DWT->CYCCNT - m_isrStartCycle;
    a950:	4b06      	ldr	r3, [pc, #24]	; (a96c <_ZN9ClearCore9SysTiming6IsrEndEv+0x1c>)
    a952:	6801      	ldr	r1, [r0, #0]
    a954:	685b      	ldr	r3, [r3, #4]
    if (m_isrMinCycles > m_isrLastCycles) {
    a956:	6842      	ldr	r2, [r0, #4]
    m_isrLastCycles = DWT->CYCCNT - m_isrStartCycle;
    a958:	1a5b      	subs	r3, r3, r1
    if (m_isrMinCycles > m_isrLastCycles) {
    a95a:	4293      	cmp	r3, r2
        m_isrMinCycles = m_isrLastCycles;
    }
    if (m_isrMaxCycles < m_isrLastCycles) {
    a95c:	6882      	ldr	r2, [r0, #8]
        m_isrMinCycles = m_isrLastCycles;
    a95e:	bf38      	it	cc
    a960:	6043      	strcc	r3, [r0, #4]
    if (m_isrMaxCycles < m_isrLastCycles) {
    a962:	4293      	cmp	r3, r2
    m_isrLastCycles = DWT->CYCCNT - m_isrStartCycle;
    a964:	60c3      	str	r3, [r0, #12]
        m_isrMaxCycles = m_isrLastCycles;
    a966:	bf88      	it	hi
    a968:	6083      	strhi	r3, [r0, #8]
    a96a:	4770      	bx	lr
    a96c:	e0001000 	.word	0xe0001000

0000a970 <_ZN9ClearCore9SysTiming6UpdateEv>:
}

void SysTiming::Update() {
    // Detaching a debugger can clear CoreDebug_DEMCR_TRCENA_Msk
    // so make sure it stays set to keep the cycle counter enabled
    CoreDebug->DEMCR |= CoreDebug_DEMCR_TRCENA_Msk;
    a970:	4a1c      	ldr	r2, [pc, #112]	; (a9e4 <_ZN9ClearCore9SysTiming6UpdateEv+0x74>)
void SysTiming::Update() {
    a972:	b538      	push	{r3, r4, r5, lr}
    CoreDebug->DEMCR |= CoreDebug_DEMCR_TRCENA_Msk;
    a974:	68d3      	ldr	r3, [r2, #12]
    a976:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
    a97a:	60d3      	str	r3, [r2, #12]

    // Update the millisecond tick counter
    if (!--m_fractMsTick) {
    a97c:	7d03      	ldrb	r3, [r0, #20]
    a97e:	3b01      	subs	r3, #1
    a980:	b2db      	uxtb	r3, r3
void SysTiming::Update() {
    a982:	4604      	mov	r4, r0
    if (!--m_fractMsTick) {
    a984:	7503      	strb	r3, [r0, #20]
    a986:	b923      	cbnz	r3, a992 <_ZN9ClearCore9SysTiming6UpdateEv+0x22>
        m_msTickCnt++;
    a988:	6903      	ldr	r3, [r0, #16]
        m_fractMsTick = MS_TO_SAMPLES;
    a98a:	2205      	movs	r2, #5
        m_msTickCnt++;
    a98c:	3301      	adds	r3, #1
    a98e:	6103      	str	r3, [r0, #16]
        m_fractMsTick = MS_TO_SAMPLES;
    a990:	7502      	strb	r2, [r0, #20]
    // the wrap point to effectively extend the number of bits in the
    // cycleCounter and control the wrap point properly.
    // Precalculate adjustment values at UINT32_MAX/4 and UINT32_MAX*3/4
    // by timing when the adjustments are calculated and used, we can safely
    // modify the values when they are not in use (~9 sec margin).
    if (((m_isrStartCycle ^ m_lastIsrStartCnt) & 0xc0000000) == 0x40000000) {
    a992:	6825      	ldr	r5, [r4, #0]
    a994:	69a3      	ldr	r3, [r4, #24]
    a996:	406b      	eors	r3, r5
    a998:	f003 4340 	and.w	r3, r3, #3221225472	; 0xc0000000
    a99c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
    a9a0:	d001      	beq.n	a9a6 <_ZN9ClearCore9SysTiming6UpdateEv+0x36>
            m_microAdjHigh = m_microAdjLow + 1;
            m_microAdjHighRemainder =
                CYCLES_PER_MICROSECOND - m_microAdjLowRemainder;
        }
    }
    m_lastIsrStartCnt = m_isrStartCycle;
    a9a2:	61a5      	str	r5, [r4, #24]
    a9a4:	bd38      	pop	{r3, r4, r5, pc}
        if (m_isrStartCycle & 0x80000000) {
    a9a6:	2d00      	cmp	r5, #0
    a9a8:	db08      	blt.n	a9bc <_ZN9ClearCore9SysTiming6UpdateEv+0x4c>
            m_microAdjHigh = m_microAdjLow + 1;
    a9aa:	6a62      	ldr	r2, [r4, #36]	; 0x24
                CYCLES_PER_MICROSECOND - m_microAdjLowRemainder;
    a9ac:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
    m_lastIsrStartCnt = m_isrStartCycle;
    a9ae:	61a5      	str	r5, [r4, #24]
            m_microAdjHigh = m_microAdjLow + 1;
    a9b0:	3201      	adds	r2, #1
                CYCLES_PER_MICROSECOND - m_microAdjLowRemainder;
    a9b2:	f1c3 0378 	rsb	r3, r3, #120	; 0x78
            m_microAdjHigh = m_microAdjLow + 1;
    a9b6:	6222      	str	r2, [r4, #32]
            m_microAdjHighRemainder =
    a9b8:	62a3      	str	r3, [r4, #40]	; 0x28
    m_lastIsrStartCnt = m_isrStartCycle;
    a9ba:	bd38      	pop	{r3, r4, r5, pc}
            uint64_t cycCnt64 = (uint64_t)(++m_microAdj) << 32;
    a9bc:	69e1      	ldr	r1, [r4, #28]
    a9be:	3101      	adds	r1, #1
    a9c0:	61e1      	str	r1, [r4, #28]
            m_microAdjLow = cycCnt64 / CYCLES_PER_MICROSECOND;
    a9c2:	2278      	movs	r2, #120	; 0x78
    a9c4:	2300      	movs	r3, #0
    a9c6:	2000      	movs	r0, #0
    a9c8:	f011 fbb4 	bl	1c134 <__aeabi_uldivmod>
    a9cc:	6260      	str	r0, [r4, #36]	; 0x24
            if (m_microAdjLow) {
    a9ce:	b128      	cbz	r0, a9dc <_ZN9ClearCore9SysTiming6UpdateEv+0x6c>
                    cycCnt64 - (m_microAdjLow * CYCLES_PER_MICROSECOND);
    a9d0:	ebc0 1000 	rsb	r0, r0, r0, lsl #4
    a9d4:	00c3      	lsls	r3, r0, #3
    a9d6:	425b      	negs	r3, r3
                m_microAdjLowRemainder =
    a9d8:	62e3      	str	r3, [r4, #44]	; 0x2c
    a9da:	e7e2      	b.n	a9a2 <_ZN9ClearCore9SysTiming6UpdateEv+0x32>
                m_microAdj = 0;
    a9dc:	61e0      	str	r0, [r4, #28]
                m_microAdjLowRemainder = 0;
    a9de:	62e0      	str	r0, [r4, #44]	; 0x2c
    a9e0:	e7df      	b.n	a9a2 <_ZN9ClearCore9SysTiming6UpdateEv+0x32>
    a9e2:	bf00      	nop
    a9e4:	e000edf0 	.word	0xe000edf0

0000a9e8 <_ZN9ClearCore9SysTiming21SysTickPeriodMicroSecEm>:

bool SysTiming::SysTickPeriodMicroSec(uint32_t microSeconds) {
    // If the SysTick is faster than the sample rate set a
    // flag to do the "slow update" within the sample interrupt
    FastSysTick = microSeconds < SAMPLE_PERIOD_MICROSECONDS;
    return SysTick_Config(microSeconds * CYCLES_PER_MICROSECOND);
    a9e8:	ebc1 1301 	rsb	r3, r1, r1, lsl #4
    a9ec:	00db      	lsls	r3, r3, #3
    FastSysTick = microSeconds < SAMPLE_PERIOD_MICROSECONDS;
    a9ee:	29c7      	cmp	r1, #199	; 0xc7
    a9f0:	4a0d      	ldr	r2, [pc, #52]	; (aa28 <_ZN9ClearCore9SysTiming21SysTickPeriodMicroSecEm+0x40>)
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
    a9f2:	f103 33ff 	add.w	r3, r3, #4294967295
    a9f6:	bf8c      	ite	hi
    a9f8:	2100      	movhi	r1, #0
    a9fa:	2101      	movls	r1, #1
    a9fc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
    aa00:	7011      	strb	r1, [r2, #0]
    aa02:	d20e      	bcs.n	aa22 <_ZN9ClearCore9SysTiming21SysTickPeriodMicroSecEm+0x3a>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
    aa04:	4a09      	ldr	r2, [pc, #36]	; (aa2c <_ZN9ClearCore9SysTiming21SysTickPeriodMicroSecEm+0x44>)
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    aa06:	480a      	ldr	r0, [pc, #40]	; (aa30 <_ZN9ClearCore9SysTiming21SysTickPeriodMicroSecEm+0x48>)
bool SysTiming::SysTickPeriodMicroSec(uint32_t microSeconds) {
    aa08:	b410      	push	{r4}
    aa0a:	24e0      	movs	r4, #224	; 0xe0
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
    aa0c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
    aa0e:	2107      	movs	r1, #7
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    aa10:	f880 4023 	strb.w	r4, [r0, #35]	; 0x23
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
    aa14:	2300      	movs	r3, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
    aa16:	4618      	mov	r0, r3
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
    aa18:	6093      	str	r3, [r2, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
    aa1a:	6011      	str	r1, [r2, #0]
}
    aa1c:	f85d 4b04 	ldr.w	r4, [sp], #4
    aa20:	4770      	bx	lr
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
    aa22:	2001      	movs	r0, #1
    aa24:	4770      	bx	lr
    aa26:	bf00      	nop
    aa28:	200011b0 	.word	0x200011b0
    aa2c:	e000e010 	.word	0xe000e010
    aa30:	e000ed00 	.word	0xe000ed00

0000aa34 <Milliseconds>:
#ifdef __cplusplus
extern "C" {
#endif

uint32_t Milliseconds(void) {
    return ClearCore::TimingMgr.Milliseconds();
    aa34:	4b01      	ldr	r3, [pc, #4]	; (aa3c <Milliseconds+0x8>)
    aa36:	681b      	ldr	r3, [r3, #0]
    aa38:	6918      	ldr	r0, [r3, #16]
}
    aa3a:	4770      	bx	lr
    aa3c:	20001d20 	.word	0x20001d20

0000aa40 <Microseconds>:
    uint32_t cycleCounter = DWT->CYCCNT;
    aa40:	4b0e      	ldr	r3, [pc, #56]	; (aa7c <Microseconds+0x3c>)


uint32_t Microseconds(void) {
    return ClearCore::TimingMgr.Microseconds();
    aa42:	4a0f      	ldr	r2, [pc, #60]	; (aa80 <Microseconds+0x40>)
    uint32_t cycleCounter = DWT->CYCCNT;
    aa44:	685b      	ldr	r3, [r3, #4]
    return ClearCore::TimingMgr.Microseconds();
    aa46:	6812      	ldr	r2, [r2, #0]
    if (cycleCounter > UINT32_MAX / 2) {
    aa48:	2b00      	cmp	r3, #0
uint32_t Microseconds(void) {
    aa4a:	b410      	push	{r4}
    if (cycleCounter > UINT32_MAX / 2) {
    aa4c:	db0a      	blt.n	aa64 <Microseconds+0x24>
        return ((cycleCounter + m_microAdjLowRemainder) /
    aa4e:	6ad4      	ldr	r4, [r2, #44]	; 0x2c
    aa50:	490c      	ldr	r1, [pc, #48]	; (aa84 <Microseconds+0x44>)
                CYCLES_PER_MICROSECOND) + m_microAdjLow;
    aa52:	6a50      	ldr	r0, [r2, #36]	; 0x24
        return ((cycleCounter + m_microAdjLowRemainder) /
    aa54:	4423      	add	r3, r4
    aa56:	fba1 2303 	umull	r2, r3, r1, r3
                CYCLES_PER_MICROSECOND) + m_microAdjLow;
    aa5a:	eb00 1093 	add.w	r0, r0, r3, lsr #6
}
    aa5e:	f85d 4b04 	ldr.w	r4, [sp], #4
    aa62:	4770      	bx	lr
        return ((cycleCounter - m_microAdjHighRemainder) /
    aa64:	6a94      	ldr	r4, [r2, #40]	; 0x28
    aa66:	4907      	ldr	r1, [pc, #28]	; (aa84 <Microseconds+0x44>)
                CYCLES_PER_MICROSECOND) + m_microAdjHigh;
    aa68:	6a10      	ldr	r0, [r2, #32]
        return ((cycleCounter - m_microAdjHighRemainder) /
    aa6a:	1b1b      	subs	r3, r3, r4
    aa6c:	fba1 2303 	umull	r2, r3, r1, r3
                CYCLES_PER_MICROSECOND) + m_microAdjHigh;
    aa70:	eb00 1093 	add.w	r0, r0, r3, lsr #6
}
    aa74:	f85d 4b04 	ldr.w	r4, [sp], #4
    aa78:	4770      	bx	lr
    aa7a:	bf00      	nop
    aa7c:	e0001000 	.word	0xe0001000
    aa80:	20001d20 	.word	0x20001d20
    aa84:	88888889 	.word	0x88888889

0000aa88 <Delay_cycles>:

void Delay_cycles(uint64_t cycles) {
    aa88:	b470      	push	{r4, r5, r6}
    // Get a snapshot of the cycle counter as we enter the delay function
    uint32_t cyclesLast = DWT->CYCCNT;
    aa8a:	4e0d      	ldr	r6, [pc, #52]	; (aac0 <Delay_cycles+0x38>)

    // If we do not need to delay, bail out
    if (cycles == 0) {
    aa8c:	ea50 0301 	orrs.w	r3, r0, r1
    uint32_t cyclesLast = DWT->CYCCNT;
    aa90:	6874      	ldr	r4, [r6, #4]
    if (cycles == 0) {
    aa92:	d013      	beq.n	aabc <Delay_cycles+0x34>
        return;
    }

    uint64_t cyclesRemaining = cycles;
    uint32_t cyclesNow = DWT->CYCCNT;
    aa94:	6873      	ldr	r3, [r6, #4]

    while (cyclesRemaining > cyclesNow - cyclesLast) {
    aa96:	2500      	movs	r5, #0
    aa98:	1b1c      	subs	r4, r3, r4
    aa9a:	428d      	cmp	r5, r1
    aa9c:	bf08      	it	eq
    aa9e:	4284      	cmpeq	r4, r0
    aaa0:	d20c      	bcs.n	aabc <Delay_cycles+0x34>
        cyclesRemaining -= (cyclesNow - cyclesLast);
        cyclesLast = cyclesNow;
        cyclesNow = DWT->CYCCNT;
    aaa2:	6872      	ldr	r2, [r6, #4]
        cyclesRemaining -= (cyclesNow - cyclesLast);
    aaa4:	1b00      	subs	r0, r0, r4
    while (cyclesRemaining > cyclesNow - cyclesLast) {
    aaa6:	eba2 0303 	sub.w	r3, r2, r3
        cyclesRemaining -= (cyclesNow - cyclesLast);
    aaaa:	eb61 0105 	sbc.w	r1, r1, r5
    while (cyclesRemaining > cyclesNow - cyclesLast) {
    aaae:	2500      	movs	r5, #0
    aab0:	461c      	mov	r4, r3
    aab2:	428d      	cmp	r5, r1
    aab4:	bf08      	it	eq
    aab6:	4284      	cmpeq	r4, r0
        cyclesNow = DWT->CYCCNT;
    aab8:	4613      	mov	r3, r2
    while (cyclesRemaining > cyclesNow - cyclesLast) {
    aaba:	d3f2      	bcc.n	aaa2 <Delay_cycles+0x1a>
    }
}
    aabc:	bc70      	pop	{r4, r5, r6}
    aabe:	4770      	bx	lr
    aac0:	e0001000 	.word	0xe0001000

0000aac4 <_GLOBAL__sub_I__ZN9ClearCore7tickCntE>:

#ifdef __cplusplus
}
    aac4:	b508      	push	{r3, lr}
SysTiming &TimingMgr = SysTiming::Instance();
    aac6:	f7ff ff19 	bl	a8fc <_ZN9ClearCore9SysTiming8InstanceEv>
    aaca:	4b01      	ldr	r3, [pc, #4]	; (aad0 <_GLOBAL__sub_I__ZN9ClearCore7tickCntE+0xc>)
    aacc:	6018      	str	r0, [r3, #0]
    aace:	bd08      	pop	{r3, pc}
    aad0:	20001d20 	.word	0x20001d20

0000aad4 <_ZN9ClearCore15EthernetManager8InstanceEv>:

extern NvmManager &NvmMgr;

EthernetManager &EthernetMgr = EthernetManager::Instance();

EthernetManager &EthernetManager::Instance() {
    aad4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    static EthernetManager *instance = new EthernetManager();
    aad6:	4e37      	ldr	r6, [pc, #220]	; (abb4 <_ZN9ClearCore15EthernetManager8InstanceEv+0xe0>)
    aad8:	6835      	ldr	r5, [r6, #0]
    aada:	f015 0501 	ands.w	r5, r5, #1
    aade:	d002      	beq.n	aae6 <_ZN9ClearCore15EthernetManager8InstanceEv+0x12>
    aae0:	4b35      	ldr	r3, [pc, #212]	; (abb8 <_ZN9ClearCore15EthernetManager8InstanceEv+0xe4>)
    aae2:	6818      	ldr	r0, [r3, #0]
    aae4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    aae6:	f641 10c4 	movw	r0, #6596	; 0x19c4
    aaea:	f008 fa6d 	bl	12fc8 <_Znwj>
    aaee:	4604      	mov	r4, r0
      m_portPhyInt(PHY_INT.gpioPort), m_pinPhyInt(PHY_INT.gpioPin),
      m_phyExtInt(PHY_INT.extInt), m_phyLinkUp(false), m_phyRemoteFault(false),
      m_phyInitFailed(false), m_recv(false), m_dhcp(false), m_ethernetActive(false),
      m_rxBuffIndex(0), m_txBuffIndex(0), m_rxBuffer{0}, m_txBuffer{0},
      m_retransmissionTimeout(200), m_retransmissionCount(8),
      m_ethernetInterface({}), m_macInterface({}), m_dhcpData(nullptr) { }
    aaf0:	2711      	movs	r7, #17
    aaf2:	2312      	movs	r3, #18
    aaf4:	6067      	str	r7, [r4, #4]
    aaf6:	60e3      	str	r3, [r4, #12]
    aaf8:	2213      	movs	r2, #19
    aafa:	210d      	movs	r1, #13
    aafc:	2714      	movs	r7, #20
    aafe:	230b      	movs	r3, #11
    ab00:	6162      	str	r2, [r4, #20]
    ab02:	61e1      	str	r1, [r4, #28]
    ab04:	6367      	str	r7, [r4, #52]	; 0x34
    ab06:	6463      	str	r3, [r4, #68]	; 0x44
    ab08:	270c      	movs	r7, #12
    ab0a:	2302      	movs	r3, #2
    ab0c:	200f      	movs	r0, #15
    ab0e:	220e      	movs	r2, #14
    ab10:	211c      	movs	r1, #28
    ab12:	6323      	str	r3, [r4, #48]	; 0x30
    ab14:	63a3      	str	r3, [r4, #56]	; 0x38
    ab16:	6423      	str	r3, [r4, #64]	; 0x40
    ab18:	6523      	str	r3, [r4, #80]	; 0x50
    ab1a:	62e0      	str	r0, [r4, #44]	; 0x2c
    ab1c:	64e2      	str	r2, [r4, #76]	; 0x4c
    ab1e:	6561      	str	r1, [r4, #84]	; 0x54
    ab20:	6267      	str	r7, [r4, #36]	; 0x24
    ab22:	4629      	mov	r1, r5
    ab24:	63e7      	str	r7, [r4, #60]	; 0x3c
    ab26:	65a7      	str	r7, [r4, #88]	; 0x58
    ab28:	6025      	str	r5, [r4, #0]
    ab2a:	60a5      	str	r5, [r4, #8]
    ab2c:	6125      	str	r5, [r4, #16]
    ab2e:	61a5      	str	r5, [r4, #24]
    ab30:	6225      	str	r5, [r4, #32]
    ab32:	62a5      	str	r5, [r4, #40]	; 0x28
    ab34:	64a5      	str	r5, [r4, #72]	; 0x48
    ab36:	f884 505c 	strb.w	r5, [r4, #92]	; 0x5c
    ab3a:	f884 505d 	strb.w	r5, [r4, #93]	; 0x5d
    ab3e:	f884 505e 	strb.w	r5, [r4, #94]	; 0x5e
    ab42:	f884 505f 	strb.w	r5, [r4, #95]	; 0x5f
    ab46:	f884 5060 	strb.w	r5, [r4, #96]	; 0x60
    ab4a:	f884 5061 	strb.w	r5, [r4, #97]	; 0x61
    ab4e:	f884 5062 	strb.w	r5, [r4, #98]	; 0x62
    ab52:	f8a4 5064 	strh.w	r5, [r4, #100]	; 0x64
    ab56:	f504 7094 	add.w	r0, r4, #296	; 0x128
    ab5a:	f44f 6200 	mov.w	r2, #2048	; 0x800
    ab5e:	f013 fb2d 	bl	1e1bc <memset>
    ab62:	4629      	mov	r1, r5
    ab64:	f604 1028 	addw	r0, r4, #2344	; 0x928
    ab68:	f44f 5282 	mov.w	r2, #4160	; 0x1040
    ab6c:	f013 fb26 	bl	1e1bc <memset>
    ab70:	f641 176c 	movw	r7, #6508	; 0x196c
    ab74:	f641 1168 	movw	r1, #6504	; 0x1968
    ab78:	19e3      	adds	r3, r4, r7
    ab7a:	f641 126a 	movw	r2, #6506	; 0x196a
    ab7e:	20c8      	movs	r0, #200	; 0xc8
    ab80:	5260      	strh	r0, [r4, r1]
    ab82:	f504 50cc 	add.w	r0, r4, #6528	; 0x1980
    ab86:	2108      	movs	r1, #8
    ab88:	54a1      	strb	r1, [r4, r2]
    ab8a:	3004      	adds	r0, #4
    ab8c:	51e5      	str	r5, [r4, r7]
    ab8e:	4629      	mov	r1, r5
    ab90:	605d      	str	r5, [r3, #4]
    ab92:	609d      	str	r5, [r3, #8]
    ab94:	60dd      	str	r5, [r3, #12]
    ab96:	611d      	str	r5, [r3, #16]
    ab98:	615d      	str	r5, [r3, #20]
    ab9a:	223c      	movs	r2, #60	; 0x3c
    ab9c:	f013 fb0e 	bl	1e1bc <memset>
    static EthernetManager *instance = new EthernetManager();
    aba0:	4905      	ldr	r1, [pc, #20]	; (abb8 <_ZN9ClearCore15EthernetManager8InstanceEv+0xe4>)
      m_ethernetInterface({}), m_macInterface({}), m_dhcpData(nullptr) { }
    aba2:	f504 52ce 	add.w	r2, r4, #6592	; 0x19c0
    static EthernetManager *instance = new EthernetManager();
    aba6:	2301      	movs	r3, #1
    aba8:	600c      	str	r4, [r1, #0]
      m_ethernetInterface({}), m_macInterface({}), m_dhcpData(nullptr) { }
    abaa:	6015      	str	r5, [r2, #0]
    abac:	4620      	mov	r0, r4
    static EthernetManager *instance = new EthernetManager();
    abae:	6033      	str	r3, [r6, #0]
}
    abb0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    abb2:	bf00      	nop
    abb4:	20001d28 	.word	0x20001d28
    abb8:	20001d30 	.word	0x20001d30

0000abbc <_ZN9ClearCore15EthernetManager13PhyInitializeEv>:
    NvmMgr.MacAddress(m_ethernetInterface.mac);
}

void EthernetManager::PhyInitialize() {
    // Reset PHY status values.
    m_phyLinkUp = false;
    abbc:	2200      	movs	r2, #0

uint32_t EthernetManager::PhyShift(uint32_t phyOp, uint32_t phyReg,
                                   uint32_t contents) {
    // Enable the GMAC management port and initiate a shift operation to the
    // PHY. The PHY's status register is returned into the GMAC's MAN register.
    GMAC->NCR.bit.MPE = 1;
    abbe:	4b3e      	ldr	r3, [pc, #248]	; (acb8 <_ZN9ClearCore15EthernetManager13PhyInitializeEv+0xfc>)
    m_phyLinkUp = false;
    abc0:	f880 205c 	strb.w	r2, [r0, #92]	; 0x5c
    m_phyInitFailed = false;
    abc4:	f880 205e 	strb.w	r2, [r0, #94]	; 0x5e
    m_phyRemoteFault = false;
    abc8:	f880 205d 	strb.w	r2, [r0, #93]	; 0x5d
    GMAC->NCR.bit.MPE = 1;
    abcc:	681a      	ldr	r2, [r3, #0]
    GMAC->MAN.reg = GMAC_MAN_CLTTO |   // Clause 22 or 45 operation (1 is 22)
    abce:	493b      	ldr	r1, [pc, #236]	; (acbc <_ZN9ClearCore15EthernetManager13PhyInitializeEv+0x100>)
    GMAC->NCR.bit.MPE = 1;
    abd0:	f042 0210 	orr.w	r2, r2, #16
    abd4:	601a      	str	r2, [r3, #0]
                    GMAC_MAN_PHYA(0) |          // PHY address (default is 0)
                    GMAC_MAN_REGA(phyReg) |     // Register in the PHY to access
                    GMAC_MAN_WTN(0x2) |         // Must be written to '1' '0'
                    GMAC_MAN_DATA(contents);

    while (!((GMAC->NSR.reg & GMAC_NSR_IDLE) >> GMAC_NSR_IDLE_Pos)) {
    abd6:	461a      	mov	r2, r3
    GMAC->MAN.reg = GMAC_MAN_CLTTO |   // Clause 22 or 45 operation (1 is 22)
    abd8:	6359      	str	r1, [r3, #52]	; 0x34
    while (!((GMAC->NSR.reg & GMAC_NSR_IDLE) >> GMAC_NSR_IDLE_Pos)) {
    abda:	6893      	ldr	r3, [r2, #8]
    abdc:	0759      	lsls	r1, r3, #29
    abde:	d5fc      	bpl.n	abda <_ZN9ClearCore15EthernetManager13PhyInitializeEv+0x1e>
        // Wait for the PHY write to finish
        continue;
    }
    GMAC->NCR.bit.MPE = 0;
    abe0:	6813      	ldr	r3, [r2, #0]
    abe2:	f36f 1304 	bfc	r3, #4, #1
    abe6:	6013      	str	r3, [r2, #0]

    return GMAC_MAN_DATA(GMAC->MAN.reg);
    abe8:	6b53      	ldr	r3, [r2, #52]	; 0x34
    abea:	f64f 71ff 	movw	r1, #65535	; 0xffff
    abee:	b29b      	uxth	r3, r3
    if (PhyRead(PHY_B_CTRL) == 0xFFFF) {
    abf0:	428b      	cmp	r3, r1
    abf2:	d05d      	beq.n	acb0 <_ZN9ClearCore15EthernetManager13PhyInitializeEv+0xf4>
void EthernetManager::PhyInitialize() {
    abf4:	b410      	push	{r4}
    GMAC->NCR.bit.MPE = 1;
    abf6:	6813      	ldr	r3, [r2, #0]
    GMAC->MAN.reg = GMAC_MAN_CLTTO |   // Clause 22 or 45 operation (1 is 22)
    abf8:	4c31      	ldr	r4, [pc, #196]	; (acc0 <_ZN9ClearCore15EthernetManager13PhyInitializeEv+0x104>)
    while (!((GMAC->NSR.reg & GMAC_NSR_IDLE) >> GMAC_NSR_IDLE_Pos)) {
    abfa:	492f      	ldr	r1, [pc, #188]	; (acb8 <_ZN9ClearCore15EthernetManager13PhyInitializeEv+0xfc>)
    GMAC->NCR.bit.MPE = 1;
    abfc:	f043 0310 	orr.w	r3, r3, #16
    ac00:	6013      	str	r3, [r2, #0]
    GMAC->MAN.reg = GMAC_MAN_CLTTO |   // Clause 22 or 45 operation (1 is 22)
    ac02:	6354      	str	r4, [r2, #52]	; 0x34
    while (!((GMAC->NSR.reg & GMAC_NSR_IDLE) >> GMAC_NSR_IDLE_Pos)) {
    ac04:	688b      	ldr	r3, [r1, #8]
    ac06:	075a      	lsls	r2, r3, #29
    ac08:	d5fc      	bpl.n	ac04 <_ZN9ClearCore15EthernetManager13PhyInitializeEv+0x48>
    GMAC->NCR.bit.MPE = 0;
    ac0a:	680b      	ldr	r3, [r1, #0]
    GMAC->MAN.reg = GMAC_MAN_CLTTO |   // Clause 22 or 45 operation (1 is 22)
    ac0c:	4c2b      	ldr	r4, [pc, #172]	; (acbc <_ZN9ClearCore15EthernetManager13PhyInitializeEv+0x100>)
    while (!((GMAC->NSR.reg & GMAC_NSR_IDLE) >> GMAC_NSR_IDLE_Pos)) {
    ac0e:	4a2a      	ldr	r2, [pc, #168]	; (acb8 <_ZN9ClearCore15EthernetManager13PhyInitializeEv+0xfc>)
    GMAC->NCR.bit.MPE = 0;
    ac10:	f36f 1304 	bfc	r3, #4, #1
    ac14:	600b      	str	r3, [r1, #0]
    return GMAC_MAN_DATA(GMAC->MAN.reg);
    ac16:	6b4b      	ldr	r3, [r1, #52]	; 0x34
    GMAC->NCR.bit.MPE = 1;
    ac18:	680b      	ldr	r3, [r1, #0]
    ac1a:	f043 0310 	orr.w	r3, r3, #16
    ac1e:	600b      	str	r3, [r1, #0]
    GMAC->MAN.reg = GMAC_MAN_CLTTO |   // Clause 22 or 45 operation (1 is 22)
    ac20:	634c      	str	r4, [r1, #52]	; 0x34
    while (!((GMAC->NSR.reg & GMAC_NSR_IDLE) >> GMAC_NSR_IDLE_Pos)) {
    ac22:	6893      	ldr	r3, [r2, #8]
    ac24:	075b      	lsls	r3, r3, #29
    ac26:	d5fc      	bpl.n	ac22 <_ZN9ClearCore15EthernetManager13PhyInitializeEv+0x66>
    GMAC->NCR.bit.MPE = 0;
    ac28:	6813      	ldr	r3, [r2, #0]
    GMAC->MAN.reg = GMAC_MAN_CLTTO |   // Clause 22 or 45 operation (1 is 22)
    ac2a:	4c26      	ldr	r4, [pc, #152]	; (acc4 <_ZN9ClearCore15EthernetManager13PhyInitializeEv+0x108>)
    while (!((GMAC->NSR.reg & GMAC_NSR_IDLE) >> GMAC_NSR_IDLE_Pos)) {
    ac2c:	4922      	ldr	r1, [pc, #136]	; (acb8 <_ZN9ClearCore15EthernetManager13PhyInitializeEv+0xfc>)
    GMAC->NCR.bit.MPE = 0;
    ac2e:	f36f 1304 	bfc	r3, #4, #1
    ac32:	6013      	str	r3, [r2, #0]
    return GMAC_MAN_DATA(GMAC->MAN.reg);
    ac34:	6b53      	ldr	r3, [r2, #52]	; 0x34
    GMAC->NCR.bit.MPE = 1;
    ac36:	6813      	ldr	r3, [r2, #0]
    ac38:	f043 0310 	orr.w	r3, r3, #16
    ac3c:	6013      	str	r3, [r2, #0]
    GMAC->MAN.reg = GMAC_MAN_CLTTO |   // Clause 22 or 45 operation (1 is 22)
    ac3e:	6354      	str	r4, [r2, #52]	; 0x34
    while (!((GMAC->NSR.reg & GMAC_NSR_IDLE) >> GMAC_NSR_IDLE_Pos)) {
    ac40:	688b      	ldr	r3, [r1, #8]
    ac42:	075c      	lsls	r4, r3, #29
    ac44:	d5fc      	bpl.n	ac40 <_ZN9ClearCore15EthernetManager13PhyInitializeEv+0x84>
    GMAC->NCR.bit.MPE = 0;
    ac46:	680b      	ldr	r3, [r1, #0]
    ac48:	f36f 1304 	bfc	r3, #4, #1
    ac4c:	600b      	str	r3, [r1, #0]
    return GMAC_MAN_DATA(GMAC->MAN.reg);
    ac4e:	6b4b      	ldr	r3, [r1, #52]	; 0x34
    ac50:	b29b      	uxth	r3, r3
    if (PhyRead(PHY_ICS) != 0) {
    ac52:	b12b      	cbz	r3, ac60 <_ZN9ClearCore15EthernetManager13PhyInitializeEv+0xa4>
        m_phyInitFailed = true;
    ac54:	2301      	movs	r3, #1
    ac56:	f880 305e 	strb.w	r3, [r0, #94]	; 0x5e
}
    ac5a:	f85d 4b04 	ldr.w	r4, [sp], #4
    ac5e:	4770      	bx	lr
    GMAC->NCR.bit.MPE = 1;
    ac60:	680b      	ldr	r3, [r1, #0]
    GMAC->MAN.reg = GMAC_MAN_CLTTO |   // Clause 22 or 45 operation (1 is 22)
    ac62:	4c19      	ldr	r4, [pc, #100]	; (acc8 <_ZN9ClearCore15EthernetManager13PhyInitializeEv+0x10c>)
    while (!((GMAC->NSR.reg & GMAC_NSR_IDLE) >> GMAC_NSR_IDLE_Pos)) {
    ac64:	4a14      	ldr	r2, [pc, #80]	; (acb8 <_ZN9ClearCore15EthernetManager13PhyInitializeEv+0xfc>)
    GMAC->NCR.bit.MPE = 1;
    ac66:	f043 0310 	orr.w	r3, r3, #16
    ac6a:	600b      	str	r3, [r1, #0]
    GMAC->MAN.reg = GMAC_MAN_CLTTO |   // Clause 22 or 45 operation (1 is 22)
    ac6c:	634c      	str	r4, [r1, #52]	; 0x34
    while (!((GMAC->NSR.reg & GMAC_NSR_IDLE) >> GMAC_NSR_IDLE_Pos)) {
    ac6e:	6893      	ldr	r3, [r2, #8]
    ac70:	0759      	lsls	r1, r3, #29
    ac72:	d5fc      	bpl.n	ac6e <_ZN9ClearCore15EthernetManager13PhyInitializeEv+0xb2>
    GMAC->NCR.bit.MPE = 0;
    ac74:	6813      	ldr	r3, [r2, #0]
    GMAC->MAN.reg = GMAC_MAN_CLTTO |   // Clause 22 or 45 operation (1 is 22)
    ac76:	4c13      	ldr	r4, [pc, #76]	; (acc4 <_ZN9ClearCore15EthernetManager13PhyInitializeEv+0x108>)
    while (!((GMAC->NSR.reg & GMAC_NSR_IDLE) >> GMAC_NSR_IDLE_Pos)) {
    ac78:	490f      	ldr	r1, [pc, #60]	; (acb8 <_ZN9ClearCore15EthernetManager13PhyInitializeEv+0xfc>)
    GMAC->NCR.bit.MPE = 0;
    ac7a:	f36f 1304 	bfc	r3, #4, #1
    ac7e:	6013      	str	r3, [r2, #0]
    return GMAC_MAN_DATA(GMAC->MAN.reg);
    ac80:	6b53      	ldr	r3, [r2, #52]	; 0x34
    GMAC->NCR.bit.MPE = 1;
    ac82:	6813      	ldr	r3, [r2, #0]
    ac84:	f043 0310 	orr.w	r3, r3, #16
    ac88:	6013      	str	r3, [r2, #0]
    GMAC->MAN.reg = GMAC_MAN_CLTTO |   // Clause 22 or 45 operation (1 is 22)
    ac8a:	6354      	str	r4, [r2, #52]	; 0x34
    while (!((GMAC->NSR.reg & GMAC_NSR_IDLE) >> GMAC_NSR_IDLE_Pos)) {
    ac8c:	688b      	ldr	r3, [r1, #8]
    ac8e:	075b      	lsls	r3, r3, #29
    ac90:	d5fc      	bpl.n	ac8c <_ZN9ClearCore15EthernetManager13PhyInitializeEv+0xd0>
    GMAC->NCR.bit.MPE = 0;
    ac92:	680b      	ldr	r3, [r1, #0]
    ac94:	f36f 1304 	bfc	r3, #4, #1
    ac98:	600b      	str	r3, [r1, #0]
    return GMAC_MAN_DATA(GMAC->MAN.reg);
    ac9a:	6b4b      	ldr	r3, [r1, #52]	; 0x34
    if ((phyIntMask >> 8) != (phyIntValue >> 8)) {
    ac9c:	f3c3 2307 	ubfx	r3, r3, #8, #8
    aca0:	2b07      	cmp	r3, #7
    aca2:	d1d7      	bne.n	ac54 <_ZN9ClearCore15EthernetManager13PhyInitializeEv+0x98>
    m_phyInitFailed = false;
    aca4:	2300      	movs	r3, #0
    aca6:	f880 305e 	strb.w	r3, [r0, #94]	; 0x5e
}
    acaa:	f85d 4b04 	ldr.w	r4, [sp], #4
    acae:	4770      	bx	lr
        m_phyInitFailed = true;
    acb0:	2301      	movs	r3, #1
    acb2:	f880 305e 	strb.w	r3, [r0, #94]	; 0x5e
    acb6:	4770      	bx	lr
    acb8:	42000800 	.word	0x42000800
    acbc:	60020000 	.word	0x60020000
    acc0:	50028000 	.word	0x50028000
    acc4:	606e0000 	.word	0x606e0000
    acc8:	506e0700 	.word	0x506e0700

0000accc <_ZN9ClearCore15EthernetManager10InitializeEv>:
void EthernetManager::Initialize() {
    accc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}

/**
    Enable transmit and receive of frames.
**/
void EthernetManager::Enable(bool enable) {
    bool enabled = (GMAC->NCR.bit.TXEN && GMAC->NCR.bit.RXEN);
    acd0:	4be2      	ldr	r3, [pc, #904]	; (b05c <_ZN9ClearCore15EthernetManager10InitializeEv+0x390>)
    acd2:	681a      	ldr	r2, [r3, #0]
    acd4:	0715      	lsls	r5, r2, #28
void EthernetManager::Initialize() {
    acd6:	4604      	mov	r4, r0
    bool enabled = (GMAC->NCR.bit.TXEN && GMAC->NCR.bit.RXEN);
    acd8:	d503      	bpl.n	ace2 <_ZN9ClearCore15EthernetManager10InitializeEv+0x16>
    acda:	681a      	ldr	r2, [r3, #0]
    acdc:	0750      	lsls	r0, r2, #29
    acde:	f100 82a2 	bmi.w	b226 <_ZN9ClearCore15EthernetManager10InitializeEv+0x55a>
    GMAC->NCR.bit.MPE = 1;          // Management port enabled
    ace2:	4ade      	ldr	r2, [pc, #888]	; (b05c <_ZN9ClearCore15EthernetManager10InitializeEv+0x390>)
  NVIC->ICER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
    ace4:	48de      	ldr	r0, [pc, #888]	; (b060 <_ZN9ClearCore15EthernetManager10InitializeEv+0x394>)
    ace6:	6813      	ldr	r3, [r2, #0]
    ace8:	f043 0310 	orr.w	r3, r3, #16
    acec:	6013      	str	r3, [r2, #0]
    GMAC->NCFGR.bit.SPD = 1;        // 100 Mbps
    acee:	6853      	ldr	r3, [r2, #4]
    acf0:	f043 0301 	orr.w	r3, r3, #1
    acf4:	6053      	str	r3, [r2, #4]
    GMAC->NCFGR.bit.FD = 1;         // Full duplex mode
    acf6:	6853      	ldr	r3, [r2, #4]
    acf8:	f043 0302 	orr.w	r3, r3, #2
    acfc:	6053      	str	r3, [r2, #4]
    GMAC->NCFGR.bit.MAXFS = 1;      // Increase max frame size
    acfe:	6853      	ldr	r3, [r2, #4]
    ad00:	f443 7380 	orr.w	r3, r3, #256	; 0x100
    ad04:	6053      	str	r3, [r2, #4]
    GMAC->NCFGR.bit.CLK = 0x04;     // MCK divided by 64
    ad06:	6853      	ldr	r3, [r2, #4]
    ad08:	2104      	movs	r1, #4
    ad0a:	f361 4394 	bfi	r3, r1, #18, #3
    ad0e:	6053      	str	r3, [r2, #4]
    GMAC->UR.bit.MII = 0;           // RMII mode
    ad10:	68d3      	ldr	r3, [r2, #12]
    ad12:	f36f 0300 	bfc	r3, #0, #1
    ad16:	60d3      	str	r3, [r2, #12]
    GMAC->DCFGR.bit.FBLDO = 0x04;   // Use INCR4 AHB bursts
    ad18:	6913      	ldr	r3, [r2, #16]
    ad1a:	f361 0304 	bfi	r3, r1, #0, #5
    ad1e:	6113      	str	r3, [r2, #16]
    GMAC->DCFGR.bit.RXBMS = 0x03;   // 4 Kbytes receiver packet buffer mem size
    ad20:	6913      	ldr	r3, [r2, #16]
    ad22:	f443 7340 	orr.w	r3, r3, #768	; 0x300
    ad26:	6113      	str	r3, [r2, #16]
    GMAC->DCFGR.bit.TXPBMS = 0x01;  // 4 Kb transmitter packet buffer mem size
    ad28:	6913      	ldr	r3, [r2, #16]
    ad2a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
    ad2e:	6113      	str	r3, [r2, #16]
    GMAC->DCFGR.bit.DRBS = 0x02;    // 128 bytes receiver buffer in AHB
    ad30:	6915      	ldr	r5, [r2, #16]
    ad32:	2302      	movs	r3, #2
    ad34:	f363 4517 	bfi	r5, r3, #16, #8
    GMAC->IPGS.reg = GMAC_IPGS_FL((0x1 << 8) | 0x1);
    ad38:	f240 1c01 	movw	ip, #257	; 0x101
    GMAC->WOL.reg = 0;
    ad3c:	2300      	movs	r3, #0
    GMAC->DCFGR.bit.DRBS = 0x02;    // 128 bytes receiver buffer in AHB
    ad3e:	6115      	str	r5, [r2, #16]
    GMAC->WOL.reg = 0;
    ad40:	f8c2 30b8 	str.w	r3, [r2, #184]	; 0xb8
    GMAC->IPGS.reg = GMAC_IPGS_FL((0x1 << 8) | 0x1);
    ad44:	f8c2 c0bc 	str.w	ip, [r2, #188]	; 0xbc
        m_rxDesc[buff].reg[0] = (uint32_t) &m_rxBuffer[buff][0];
    ad48:	f504 7c94 	add.w	ip, r4, #296	; 0x128
    ad4c:	f8c4 c068 	str.w	ip, [r4, #104]	; 0x68
    ad50:	f504 7cd4 	add.w	ip, r4, #424	; 0x1a8
    ad54:	f8c4 c070 	str.w	ip, [r4, #112]	; 0x70
    ad58:	f504 7c0a 	add.w	ip, r4, #552	; 0x228
    ad5c:	f604 01a8 	addw	r1, r4, #2216	; 0x8a8
    ad60:	f8c4 c078 	str.w	ip, [r4, #120]	; 0x78
    ad64:	f504 7c2a 	add.w	ip, r4, #680	; 0x2a8
    m_rxDesc[RX_BUFF_CNT - 1].bit.WRAP = 1;
    ad68:	fa5f fe81 	uxtb.w	lr, r1
        m_rxDesc[buff].reg[0] = (uint32_t) &m_rxBuffer[buff][0];
    ad6c:	f8c4 c080 	str.w	ip, [r4, #128]	; 0x80
    ad70:	f504 7c4a 	add.w	ip, r4, #808	; 0x328
    m_rxDesc[RX_BUFF_CNT - 1].bit.WRAP = 1;
    ad74:	f04e 0e02 	orr.w	lr, lr, #2
        m_rxDesc[buff].reg[0] = (uint32_t) &m_rxBuffer[buff][0];
    ad78:	f8c4 c088 	str.w	ip, [r4, #136]	; 0x88
    ad7c:	f504 7c6a 	add.w	ip, r4, #936	; 0x3a8
        m_rxDesc[buff].reg[1] = 0;
    ad80:	66e3      	str	r3, [r4, #108]	; 0x6c
    ad82:	6763      	str	r3, [r4, #116]	; 0x74
    ad84:	67e3      	str	r3, [r4, #124]	; 0x7c
    ad86:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
    ad8a:	f8c4 308c 	str.w	r3, [r4, #140]	; 0x8c
        m_rxDesc[buff].reg[0] = (uint32_t) &m_rxBuffer[buff][0];
    ad8e:	f8c4 c090 	str.w	ip, [r4, #144]	; 0x90
    ad92:	f8c4 10e0 	str.w	r1, [r4, #224]	; 0xe0
    m_rxDesc[RX_BUFF_CNT - 1].bit.WRAP = 1;
    ad96:	f884 e0e0 	strb.w	lr, [r4, #224]	; 0xe0
        m_rxDesc[buff].reg[0] = (uint32_t) &m_rxBuffer[buff][0];
    ad9a:	f504 6195 	add.w	r1, r4, #1192	; 0x4a8
    ad9e:	f504 6ea5 	add.w	lr, r4, #1320	; 0x528
    ada2:	f8c4 10a0 	str.w	r1, [r4, #160]	; 0xa0
    ada6:	f8c4 e0a8 	str.w	lr, [r4, #168]	; 0xa8
    adaa:	f504 61b5 	add.w	r1, r4, #1448	; 0x5a8
    adae:	f504 6ec5 	add.w	lr, r4, #1576	; 0x628
    adb2:	f8c4 10b0 	str.w	r1, [r4, #176]	; 0xb0
    adb6:	f8c4 e0b8 	str.w	lr, [r4, #184]	; 0xb8
    adba:	f504 61d5 	add.w	r1, r4, #1704	; 0x6a8
    adbe:	f504 6ee5 	add.w	lr, r4, #1832	; 0x728
    adc2:	f8c4 10c0 	str.w	r1, [r4, #192]	; 0xc0
    adc6:	f8c4 e0c8 	str.w	lr, [r4, #200]	; 0xc8
    adca:	f504 61f5 	add.w	r1, r4, #1960	; 0x7a8
    adce:	f604 0e28 	addw	lr, r4, #2088	; 0x828
    add2:	f8c4 10d0 	str.w	r1, [r4, #208]	; 0xd0
    add6:	f8c4 e0d8 	str.w	lr, [r4, #216]	; 0xd8
        m_txDesc[buff].reg[0] = (uint32_t) &m_txBuffer[buff][0];
    adda:	f604 1128 	addw	r1, r4, #2344	; 0x928
        m_txDesc[buff].bit.OWN = 1;
    adde:	f04f 0e80 	mov.w	lr, #128	; 0x80
        m_txDesc[buff].reg[1] = 0;
    ade2:	f8c4 30ec 	str.w	r3, [r4, #236]	; 0xec
        m_txDesc[buff].reg[0] = (uint32_t) &m_txBuffer[buff][0];
    ade6:	f8c4 10e8 	str.w	r1, [r4, #232]	; 0xe8
        m_txDesc[buff].bit.OWN = 1;
    adea:	f884 e0ef 	strb.w	lr, [r4, #239]	; 0xef
        m_txDesc[buff].bit.LB = 1;
    adee:	4671      	mov	r1, lr
        m_txDesc[buff].reg[0] = (uint32_t) &m_txBuffer[buff][0];
    adf0:	f504 569a 	add.w	r6, r4, #4928	; 0x1340
    adf4:	f504 6e33 	add.w	lr, r4, #2864	; 0xb30
    adf8:	f504 55aa 	add.w	r5, r4, #5440	; 0x1540
        m_txDesc[buff].reg[1] = 0;
    adfc:	f8c4 30f4 	str.w	r3, [r4, #244]	; 0xf4
        m_txDesc[buff].reg[0] = (uint32_t) &m_txBuffer[buff][0];
    ae00:	3610      	adds	r6, #16
    ae02:	3518      	adds	r5, #24
        m_txDesc[buff].bit.LB = 1;
    ae04:	f884 10ed 	strb.w	r1, [r4, #237]	; 0xed
        m_txDesc[buff].reg[0] = (uint32_t) &m_txBuffer[buff][0];
    ae08:	f8c4 e0f0 	str.w	lr, [r4, #240]	; 0xf0
        m_txDesc[buff].bit.OWN = 1;
    ae0c:	f884 10f7 	strb.w	r1, [r4, #247]	; 0xf7
        m_txDesc[buff].bit.LB = 1;
    ae10:	468e      	mov	lr, r1
        m_txDesc[buff].reg[0] = (uint32_t) &m_txBuffer[buff][0];
    ae12:	f504 578a 	add.w	r7, r4, #4416	; 0x1140
    ae16:	f604 5138 	addw	r1, r4, #3384	; 0xd38
        m_rxDesc[buff].reg[0] = (uint32_t) &m_rxBuffer[buff][0];
    ae1a:	f504 6c85 	add.w	ip, r4, #1064	; 0x428
        m_txDesc[buff].bit.OWN = 1;
    ae1e:	46f1      	mov	r9, lr
        m_txDesc[buff].reg[0] = (uint32_t) &m_txBuffer[buff][0];
    ae20:	3708      	adds	r7, #8
        m_rxDesc[buff].reg[1] = 0;
    ae22:	f8c4 3094 	str.w	r3, [r4, #148]	; 0x94
    ae26:	f8c4 309c 	str.w	r3, [r4, #156]	; 0x9c
    ae2a:	f8c4 30a4 	str.w	r3, [r4, #164]	; 0xa4
    ae2e:	f8c4 30ac 	str.w	r3, [r4, #172]	; 0xac
    ae32:	f8c4 30b4 	str.w	r3, [r4, #180]	; 0xb4
    ae36:	f8c4 30bc 	str.w	r3, [r4, #188]	; 0xbc
    ae3a:	f8c4 30c4 	str.w	r3, [r4, #196]	; 0xc4
    ae3e:	f8c4 30cc 	str.w	r3, [r4, #204]	; 0xcc
    ae42:	f8c4 30d4 	str.w	r3, [r4, #212]	; 0xd4
    ae46:	f8c4 30dc 	str.w	r3, [r4, #220]	; 0xdc
    ae4a:	f8c4 30e4 	str.w	r3, [r4, #228]	; 0xe4
    m_rxBuffIndex = 0;
    ae4e:	f884 3062 	strb.w	r3, [r4, #98]	; 0x62
        m_txDesc[buff].bit.LB = 1;
    ae52:	f884 e0f5 	strb.w	lr, [r4, #245]	; 0xf5
        m_txDesc[buff].reg[0] = (uint32_t) &m_txBuffer[buff][0];
    ae56:	f8c4 10f8 	str.w	r1, [r4, #248]	; 0xf8
        m_rxDesc[buff].reg[0] = (uint32_t) &m_rxBuffer[buff][0];
    ae5a:	f8c4 c098 	str.w	ip, [r4, #152]	; 0x98
    m_txDesc[TX_BUFF_CNT - 1].bit.WRAP = 1;
    ae5e:	21c0      	movs	r1, #192	; 0xc0
        m_txDesc[buff].reg[1] = 0;
    ae60:	f8c4 30fc 	str.w	r3, [r4, #252]	; 0xfc
        m_txDesc[buff].reg[0] = (uint32_t) &m_txBuffer[buff][0];
    ae64:	f504 6874 	add.w	r8, r4, #3904	; 0xf40
        m_txDesc[buff].reg[1] = 0;
    ae68:	f8c4 3104 	str.w	r3, [r4, #260]	; 0x104
    ae6c:	f8c4 310c 	str.w	r3, [r4, #268]	; 0x10c
    ae70:	f8c4 3114 	str.w	r3, [r4, #276]	; 0x114
    ae74:	f8c4 311c 	str.w	r3, [r4, #284]	; 0x11c
    ae78:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
    m_txBuffIndex = 0;
    ae7c:	f8a4 3064 	strh.w	r3, [r4, #100]	; 0x64
        m_txDesc[buff].reg[0] = (uint32_t) &m_txBuffer[buff][0];
    ae80:	f8c4 6110 	str.w	r6, [r4, #272]	; 0x110
    ae84:	f8c4 5118 	str.w	r5, [r4, #280]	; 0x118
        m_txDesc[buff].bit.OWN = 1;
    ae88:	f884 e0ff 	strb.w	lr, [r4, #255]	; 0xff
        m_txDesc[buff].bit.LB = 1;
    ae8c:	f884 e0fd 	strb.w	lr, [r4, #253]	; 0xfd
        m_txDesc[buff].bit.OWN = 1;
    ae90:	f884 e107 	strb.w	lr, [r4, #263]	; 0x107
        m_txDesc[buff].bit.LB = 1;
    ae94:	f884 e105 	strb.w	lr, [r4, #261]	; 0x105
        m_txDesc[buff].bit.OWN = 1;
    ae98:	f884 e10f 	strb.w	lr, [r4, #271]	; 0x10f
    ae9c:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
        m_txDesc[buff].reg[0] = (uint32_t) &m_txBuffer[buff][0];
    aea0:	f504 5ebb 	add.w	lr, r4, #5984	; 0x1760
    GMAC->TBQB.reg = (uint32_t) &m_txDesc;
    aea4:	f104 05e8 	add.w	r5, r4, #232	; 0xe8
    GMAC->RBQB.reg = (uint32_t) &m_rxDesc;
    aea8:	f104 0668 	add.w	r6, r4, #104	; 0x68
        m_txDesc[buff].reg[0] = (uint32_t) &m_txBuffer[buff][0];
    aeac:	f8c4 7108 	str.w	r7, [r4, #264]	; 0x108
    m_txDesc[TX_BUFF_CNT - 1].bit.WRAP = 1;
    aeb0:	f884 1127 	strb.w	r1, [r4, #295]	; 0x127
        m_txDesc[buff].reg[0] = (uint32_t) &m_txBuffer[buff][0];
    aeb4:	f8c4 8100 	str.w	r8, [r4, #256]	; 0x100
        m_txDesc[buff].bit.LB = 1;
    aeb8:	f884 910d 	strb.w	r9, [r4, #269]	; 0x10d
        m_txDesc[buff].bit.OWN = 1;
    aebc:	f884 9117 	strb.w	r9, [r4, #279]	; 0x117
        m_txDesc[buff].bit.LB = 1;
    aec0:	f884 9115 	strb.w	r9, [r4, #277]	; 0x115
        m_txDesc[buff].bit.OWN = 1;
    aec4:	f884 911f 	strb.w	r9, [r4, #287]	; 0x11f
        m_txDesc[buff].bit.LB = 1;
    aec8:	f884 911d 	strb.w	r9, [r4, #285]	; 0x11d
        m_txDesc[buff].reg[0] = (uint32_t) &m_txBuffer[buff][0];
    aecc:	f8c4 e120 	str.w	lr, [r4, #288]	; 0x120
        m_txDesc[buff].bit.LB = 1;
    aed0:	f884 9125 	strb.w	r9, [r4, #293]	; 0x125
    GMAC->TBQB.reg = (uint32_t) &m_txDesc;
    aed4:	61d5      	str	r5, [r2, #28]
    GMAC->RBQB.reg = (uint32_t) &m_rxDesc;
    aed6:	6196      	str	r6, [r2, #24]
    aed8:	f8c0 3088 	str.w	r3, [r0, #136]	; 0x88
  NVIC->ICPR[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
    aedc:	f8c0 3188 	str.w	r3, [r0, #392]	; 0x188
  NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
    aee0:	6083      	str	r3, [r0, #8]
    ConfigureGpioPerGmac(m_portPhyTxen, m_pinPhyTxen);
    aee2:	6823      	ldr	r3, [r4, #0]
    aee4:	6861      	ldr	r1, [r4, #4]

/**
    Setup a single GMAC GPIO.
**/
void EthernetManager::ConfigureGpioPerGmac(uint32_t port, uint32_t pin) {
    PMUX_ENABLE(port, pin);
    aee6:	01db      	lsls	r3, r3, #7
    aee8:	f103 4382 	add.w	r3, r3, #1090519040	; 0x41000000
    aeec:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
    aef0:	1858      	adds	r0, r3, r1
    PMUX_SELECTION(port, pin, PER_GMAC);
    aef2:	eb03 0351 	add.w	r3, r3, r1, lsr #1
    PMUX_ENABLE(port, pin);
    aef6:	f890 2040 	ldrb.w	r2, [r0, #64]	; 0x40
    aefa:	f042 0201 	orr.w	r2, r2, #1
    aefe:	f880 2040 	strb.w	r2, [r0, #64]	; 0x40
    PMUX_SELECTION(port, pin, PER_GMAC);
    af02:	f893 2030 	ldrb.w	r2, [r3, #48]	; 0x30
    af06:	f011 0f01 	tst.w	r1, #1
    af0a:	f04f 010b 	mov.w	r1, #11
    af0e:	bf14      	ite	ne
    af10:	f361 1207 	bfine	r2, r1, #4, #4
    af14:	f361 0203 	bfieq	r2, r1, #0, #4
    af18:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
    ConfigureGpioPerGmac(m_portPhyTxd0, m_pinPhyTxd0);
    af1c:	68a3      	ldr	r3, [r4, #8]
    af1e:	68e2      	ldr	r2, [r4, #12]
    PMUX_ENABLE(port, pin);
    af20:	01db      	lsls	r3, r3, #7
    af22:	f103 4382 	add.w	r3, r3, #1090519040	; 0x41000000
    af26:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
    af2a:	1898      	adds	r0, r3, r2
    PMUX_SELECTION(port, pin, PER_GMAC);
    af2c:	eb03 0352 	add.w	r3, r3, r2, lsr #1
    PMUX_ENABLE(port, pin);
    af30:	f890 1040 	ldrb.w	r1, [r0, #64]	; 0x40
    af34:	f041 0101 	orr.w	r1, r1, #1
    af38:	f880 1040 	strb.w	r1, [r0, #64]	; 0x40
    PMUX_SELECTION(port, pin, PER_GMAC);
    af3c:	f012 0f01 	tst.w	r2, #1
    af40:	f893 2030 	ldrb.w	r2, [r3, #48]	; 0x30
    af44:	f04f 010b 	mov.w	r1, #11
    af48:	bf14      	ite	ne
    af4a:	f361 1207 	bfine	r2, r1, #4, #4
    af4e:	f361 0203 	bfieq	r2, r1, #0, #4
    af52:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
    ConfigureGpioPerGmac(m_portPhyTxd1, m_pinPhyTxd1);
    af56:	6923      	ldr	r3, [r4, #16]
    af58:	6962      	ldr	r2, [r4, #20]
    PMUX_ENABLE(port, pin);
    af5a:	01db      	lsls	r3, r3, #7
    af5c:	f103 4382 	add.w	r3, r3, #1090519040	; 0x41000000
    af60:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
    af64:	1898      	adds	r0, r3, r2
    PMUX_SELECTION(port, pin, PER_GMAC);
    af66:	eb03 0352 	add.w	r3, r3, r2, lsr #1
    PMUX_ENABLE(port, pin);
    af6a:	f890 1040 	ldrb.w	r1, [r0, #64]	; 0x40
    af6e:	f041 0101 	orr.w	r1, r1, #1
    af72:	f880 1040 	strb.w	r1, [r0, #64]	; 0x40
    PMUX_SELECTION(port, pin, PER_GMAC);
    af76:	f012 0f01 	tst.w	r2, #1
    af7a:	f893 2030 	ldrb.w	r2, [r3, #48]	; 0x30
    af7e:	f04f 010b 	mov.w	r1, #11
    af82:	bf14      	ite	ne
    af84:	f361 1207 	bfine	r2, r1, #4, #4
    af88:	f361 0203 	bfieq	r2, r1, #0, #4
    af8c:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
    ConfigureGpioPerGmac(m_portPhyRxd0, m_pinPhyRxd0);
    af90:	69a3      	ldr	r3, [r4, #24]
    af92:	69e2      	ldr	r2, [r4, #28]
    PMUX_ENABLE(port, pin);
    af94:	01db      	lsls	r3, r3, #7
    af96:	f103 4382 	add.w	r3, r3, #1090519040	; 0x41000000
    af9a:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
    af9e:	1898      	adds	r0, r3, r2
    PMUX_SELECTION(port, pin, PER_GMAC);
    afa0:	eb03 0352 	add.w	r3, r3, r2, lsr #1
    PMUX_ENABLE(port, pin);
    afa4:	f890 1040 	ldrb.w	r1, [r0, #64]	; 0x40
    afa8:	f041 0101 	orr.w	r1, r1, #1
    afac:	f880 1040 	strb.w	r1, [r0, #64]	; 0x40
    PMUX_SELECTION(port, pin, PER_GMAC);
    afb0:	f012 0f01 	tst.w	r2, #1
    afb4:	f893 2030 	ldrb.w	r2, [r3, #48]	; 0x30
    afb8:	f04f 010b 	mov.w	r1, #11
    afbc:	bf14      	ite	ne
    afbe:	f361 1207 	bfine	r2, r1, #4, #4
    afc2:	f361 0203 	bfieq	r2, r1, #0, #4
    afc6:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
    ConfigureGpioPerGmac(m_portPhyRxd1, m_pinPhyRxd1);
    afca:	6a23      	ldr	r3, [r4, #32]
    afcc:	6a62      	ldr	r2, [r4, #36]	; 0x24
    PMUX_ENABLE(port, pin);
    afce:	01db      	lsls	r3, r3, #7
    afd0:	f103 4382 	add.w	r3, r3, #1090519040	; 0x41000000
    afd4:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
    afd8:	1898      	adds	r0, r3, r2
    PMUX_SELECTION(port, pin, PER_GMAC);
    afda:	eb03 0352 	add.w	r3, r3, r2, lsr #1
    PMUX_ENABLE(port, pin);
    afde:	f890 1040 	ldrb.w	r1, [r0, #64]	; 0x40
    afe2:	f041 0101 	orr.w	r1, r1, #1
    afe6:	f880 1040 	strb.w	r1, [r0, #64]	; 0x40
    PMUX_SELECTION(port, pin, PER_GMAC);
    afea:	f012 0f01 	tst.w	r2, #1
    afee:	f893 2030 	ldrb.w	r2, [r3, #48]	; 0x30
    aff2:	f04f 010b 	mov.w	r1, #11
    aff6:	bf14      	ite	ne
    aff8:	f361 1207 	bfine	r2, r1, #4, #4
    affc:	f361 0203 	bfieq	r2, r1, #0, #4
    b000:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
    ConfigureGpioPerGmac(m_portPhyRxer, m_pinPhyRxer);
    b004:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    b006:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
    PMUX_ENABLE(port, pin);
    b008:	01db      	lsls	r3, r3, #7
    b00a:	f103 4382 	add.w	r3, r3, #1090519040	; 0x41000000
    b00e:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
    b012:	1898      	adds	r0, r3, r2
    PMUX_SELECTION(port, pin, PER_GMAC);
    b014:	eb03 0352 	add.w	r3, r3, r2, lsr #1
    PMUX_ENABLE(port, pin);
    b018:	f890 1040 	ldrb.w	r1, [r0, #64]	; 0x40
    b01c:	f041 0101 	orr.w	r1, r1, #1
    b020:	f880 1040 	strb.w	r1, [r0, #64]	; 0x40
    PMUX_SELECTION(port, pin, PER_GMAC);
    b024:	f012 0f01 	tst.w	r2, #1
    b028:	f893 2030 	ldrb.w	r2, [r3, #48]	; 0x30
    b02c:	f04f 010b 	mov.w	r1, #11
    b030:	bf14      	ite	ne
    b032:	f361 1207 	bfine	r2, r1, #4, #4
    b036:	f361 0203 	bfieq	r2, r1, #0, #4
    b03a:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
    ConfigureGpioPerGmac(m_portPhyRxdv, m_pinPhyRxdv);
    b03e:	6b23      	ldr	r3, [r4, #48]	; 0x30
    b040:	6b62      	ldr	r2, [r4, #52]	; 0x34
    PMUX_ENABLE(port, pin);
    b042:	01db      	lsls	r3, r3, #7
    b044:	f103 4382 	add.w	r3, r3, #1090519040	; 0x41000000
    b048:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
    b04c:	1898      	adds	r0, r3, r2
    PMUX_SELECTION(port, pin, PER_GMAC);
    b04e:	eb03 0352 	add.w	r3, r3, r2, lsr #1
    PMUX_ENABLE(port, pin);
    b052:	f890 1040 	ldrb.w	r1, [r0, #64]	; 0x40
    b056:	f041 0101 	orr.w	r1, r1, #1
    b05a:	e003      	b.n	b064 <_ZN9ClearCore15EthernetManager10InitializeEv+0x398>
    b05c:	42000800 	.word	0x42000800
    b060:	e000e100 	.word	0xe000e100
    b064:	f880 1040 	strb.w	r1, [r0, #64]	; 0x40
    PMUX_SELECTION(port, pin, PER_GMAC);
    b068:	f012 0f01 	tst.w	r2, #1
    b06c:	f893 2030 	ldrb.w	r2, [r3, #48]	; 0x30
    b070:	f04f 010b 	mov.w	r1, #11
    b074:	bf14      	ite	ne
    b076:	f361 1207 	bfine	r2, r1, #4, #4
    b07a:	f361 0203 	bfieq	r2, r1, #0, #4
    b07e:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
    ConfigureGpioPerGmac(m_portPhyMdio, m_pinPhyMdio);
    b082:	6ba3      	ldr	r3, [r4, #56]	; 0x38
    b084:	6be2      	ldr	r2, [r4, #60]	; 0x3c
    PMUX_ENABLE(port, pin);
    b086:	01db      	lsls	r3, r3, #7
    b088:	f103 4382 	add.w	r3, r3, #1090519040	; 0x41000000
    b08c:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
    b090:	1898      	adds	r0, r3, r2
    PMUX_SELECTION(port, pin, PER_GMAC);
    b092:	eb03 0352 	add.w	r3, r3, r2, lsr #1
    PMUX_ENABLE(port, pin);
    b096:	f890 1040 	ldrb.w	r1, [r0, #64]	; 0x40
    b09a:	f041 0101 	orr.w	r1, r1, #1
    b09e:	f880 1040 	strb.w	r1, [r0, #64]	; 0x40
    PMUX_SELECTION(port, pin, PER_GMAC);
    b0a2:	f012 0f01 	tst.w	r2, #1
    b0a6:	f893 2030 	ldrb.w	r2, [r3, #48]	; 0x30
    b0aa:	f04f 010b 	mov.w	r1, #11
    b0ae:	bf14      	ite	ne
    b0b0:	f361 1207 	bfine	r2, r1, #4, #4
    b0b4:	f361 0203 	bfieq	r2, r1, #0, #4
    b0b8:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
    ConfigureGpioPerGmac(m_portPhyMdc, m_pinPhyMdc);
    b0bc:	6c23      	ldr	r3, [r4, #64]	; 0x40
    b0be:	6c62      	ldr	r2, [r4, #68]	; 0x44
    PMUX_ENABLE(port, pin);
    b0c0:	01db      	lsls	r3, r3, #7
    b0c2:	f103 4382 	add.w	r3, r3, #1090519040	; 0x41000000
    b0c6:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
    b0ca:	1898      	adds	r0, r3, r2
    PMUX_SELECTION(port, pin, PER_GMAC);
    b0cc:	eb03 0352 	add.w	r3, r3, r2, lsr #1
    PMUX_ENABLE(port, pin);
    b0d0:	f890 1040 	ldrb.w	r1, [r0, #64]	; 0x40
    b0d4:	f041 0101 	orr.w	r1, r1, #1
    b0d8:	f880 1040 	strb.w	r1, [r0, #64]	; 0x40
    PMUX_SELECTION(port, pin, PER_GMAC);
    b0dc:	f012 0f01 	tst.w	r2, #1
    b0e0:	f893 2030 	ldrb.w	r2, [r3, #48]	; 0x30
    b0e4:	f04f 010b 	mov.w	r1, #11
    b0e8:	bf14      	ite	ne
    b0ea:	f361 1207 	bfine	r2, r1, #4, #4
    b0ee:	f361 0203 	bfieq	r2, r1, #0, #4
    b0f2:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
    ConfigureGpioPerGmac(m_portPhyTxclk, m_pinPhyTxclk);
    b0f6:	6ca3      	ldr	r3, [r4, #72]	; 0x48
    b0f8:	6ce2      	ldr	r2, [r4, #76]	; 0x4c
    PMUX_ENABLE(port, pin);
    b0fa:	01db      	lsls	r3, r3, #7
    b0fc:	f103 4382 	add.w	r3, r3, #1090519040	; 0x41000000
    b100:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
    b104:	1898      	adds	r0, r3, r2
    PMUX_SELECTION(port, pin, PER_GMAC);
    b106:	eb03 0352 	add.w	r3, r3, r2, lsr #1
    PMUX_ENABLE(port, pin);
    b10a:	f890 1040 	ldrb.w	r1, [r0, #64]	; 0x40
    b10e:	f041 0101 	orr.w	r1, r1, #1
    b112:	f880 1040 	strb.w	r1, [r0, #64]	; 0x40
    PMUX_SELECTION(port, pin, PER_GMAC);
    b116:	f012 0f01 	tst.w	r2, #1
    b11a:	f893 2030 	ldrb.w	r2, [r3, #48]	; 0x30
    b11e:	f04f 010b 	mov.w	r1, #11
    b122:	bf14      	ite	ne
    b124:	f361 1207 	bfine	r2, r1, #4, #4
    b128:	f361 0203 	bfieq	r2, r1, #0, #4
    b12c:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
    PIN_CONFIGURATION(m_portPhyInt, m_pinPhyInt, PORT_PINCFG_INEN);
    b130:	6d23      	ldr	r3, [r4, #80]	; 0x50
    b132:	6d61      	ldr	r1, [r4, #84]	; 0x54
    b134:	01db      	lsls	r3, r3, #7
    b136:	f103 4282 	add.w	r2, r3, #1090519040	; 0x41000000
    b13a:	f502 4200 	add.w	r2, r2, #32768	; 0x8000
    b13e:	1850      	adds	r0, r2, r1
    b140:	2702      	movs	r7, #2
    PMUX_SELECTION(m_portPhyInt, m_pinPhyInt, PER_EXTINT);
    b142:	eb02 0251 	add.w	r2, r2, r1, lsr #1
    PIN_CONFIGURATION(m_portPhyInt, m_pinPhyInt, PORT_PINCFG_INEN);
    b146:	f880 7040 	strb.w	r7, [r0, #64]	; 0x40
    PMUX_SELECTION(m_portPhyInt, m_pinPhyInt, PER_EXTINT);
    b14a:	f892 0030 	ldrb.w	r0, [r2, #48]	; 0x30
    PMUX_ENABLE(m_portPhyInt, m_pinPhyInt);
    b14e:	f103 4382 	add.w	r3, r3, #1090519040	; 0x41000000
    PMUX_SELECTION(m_portPhyInt, m_pinPhyInt, PER_EXTINT);
    b152:	f011 0701 	ands.w	r7, r1, #1
    PMUX_ENABLE(m_portPhyInt, m_pinPhyInt);
    b156:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
    b15a:	440b      	add	r3, r1
    PMUX_SELECTION(m_portPhyInt, m_pinPhyInt, PER_EXTINT);
    b15c:	bf14      	ite	ne
    b15e:	f36f 1007 	bfcne	r0, #4, #4
    b162:	f367 0003 	bfieq	r0, r7, #0, #4
    b166:	f882 0030 	strb.w	r0, [r2, #48]	; 0x30
    PMUX_ENABLE(m_portPhyInt, m_pinPhyInt);
    b16a:	f893 0040 	ldrb.w	r0, [r3, #64]	; 0x40
    GMAC->IER.bit.TCOMP = 1;    // Transmit complete
    b16e:	4932      	ldr	r1, [pc, #200]	; (b238 <_ZN9ClearCore15EthernetManager10InitializeEv+0x56c>)
    EIC->CTRLA.bit.ENABLE = 0;
    b170:	4a32      	ldr	r2, [pc, #200]	; (b23c <_ZN9ClearCore15EthernetManager10InitializeEv+0x570>)
    PMUX_ENABLE(m_portPhyInt, m_pinPhyInt);
    b172:	f040 0001 	orr.w	r0, r0, #1
    b176:	f883 0040 	strb.w	r0, [r3, #64]	; 0x40
    PORT->Group[m_portPhyInt].PINCFG[m_pinPhyInt].bit.INEN = 1;
    b17a:	f893 0040 	ldrb.w	r0, [r3, #64]	; 0x40
    b17e:	f040 0002 	orr.w	r0, r0, #2
    b182:	f883 0040 	strb.w	r0, [r3, #64]	; 0x40
    GMAC->IER.bit.TCOMP = 1;    // Transmit complete
    b186:	6a8b      	ldr	r3, [r1, #40]	; 0x28
    b188:	f043 0380 	orr.w	r3, r3, #128	; 0x80
    b18c:	628b      	str	r3, [r1, #40]	; 0x28
    GMAC->IER.bit.RCOMP = 1;    // Receive complete
    b18e:	6a8b      	ldr	r3, [r1, #40]	; 0x28
    b190:	f043 0302 	orr.w	r3, r3, #2
    b194:	628b      	str	r3, [r1, #40]	; 0x28
    EIC->CTRLA.bit.ENABLE = 0;
    b196:	7813      	ldrb	r3, [r2, #0]
    b198:	f36f 0341 	bfc	r3, #1, #1
    b19c:	7013      	strb	r3, [r2, #0]
    SYNCBUSY_WAIT(EIC, EIC_SYNCBUSY_ENABLE);
    b19e:	6853      	ldr	r3, [r2, #4]
    b1a0:	0799      	lsls	r1, r3, #30
    b1a2:	d4fc      	bmi.n	b19e <_ZN9ClearCore15EthernetManager10InitializeEv+0x4d2>
    uint32_t shiftAmt = 4 * (m_phyExtInt % 8);
    b1a4:	6da0      	ldr	r0, [r4, #88]	; 0x58
    SYNCBUSY_WAIT(EIC, EIC_SYNCBUSY_ENABLE);
    b1a6:	4925      	ldr	r1, [pc, #148]	; (b23c <_ZN9ClearCore15EthernetManager10InitializeEv+0x570>)
    EIC->CONFIG[m_phyExtInt / 8].reg &= (uint32_t) ~(0xf << shiftAmt);
    b1a8:	08c3      	lsrs	r3, r0, #3
    b1aa:	009b      	lsls	r3, r3, #2
    b1ac:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
    EIC->INTENSET.reg = (1UL << m_phyExtInt);
    b1b0:	2701      	movs	r7, #1
    b1b2:	f503 5320 	add.w	r3, r3, #10240	; 0x2800
    b1b6:	4087      	lsls	r7, r0
    b1b8:	6117      	str	r7, [r2, #16]
    uint32_t shiftAmt = 4 * (m_phyExtInt % 8);
    b1ba:	f000 0007 	and.w	r0, r0, #7
    EIC->CONFIG[m_phyExtInt / 8].reg &= (uint32_t) ~(0xf << shiftAmt);
    b1be:	69df      	ldr	r7, [r3, #28]
    uint32_t shiftAmt = 4 * (m_phyExtInt % 8);
    b1c0:	0080      	lsls	r0, r0, #2
    EIC->CONFIG[m_phyExtInt / 8].reg &= (uint32_t) ~(0xf << shiftAmt);
    b1c2:	f04f 0e0f 	mov.w	lr, #15
    b1c6:	fa0e fe00 	lsl.w	lr, lr, r0
    b1ca:	ea27 070e 	bic.w	r7, r7, lr
    b1ce:	61df      	str	r7, [r3, #28]
        (EIC_CONFIG_SENSE0_LOW_Val << shiftAmt);
    b1d0:	f8d3 e01c 	ldr.w	lr, [r3, #28]
    b1d4:	2705      	movs	r7, #5
    b1d6:	fa07 f000 	lsl.w	r0, r7, r0
    b1da:	ea40 000e 	orr.w	r0, r0, lr
    EIC->CONFIG[m_phyExtInt / 8].reg |=
    b1de:	61d8      	str	r0, [r3, #28]
    EIC->CTRLA.bit.ENABLE = 1;
    b1e0:	7813      	ldrb	r3, [r2, #0]
    b1e2:	f043 0302 	orr.w	r3, r3, #2
    b1e6:	7013      	strb	r3, [r2, #0]
    SYNCBUSY_WAIT(EIC, EIC_SYNCBUSY_ENABLE);
    b1e8:	684b      	ldr	r3, [r1, #4]
    b1ea:	079b      	lsls	r3, r3, #30
    b1ec:	d4fc      	bmi.n	b1e8 <_ZN9ClearCore15EthernetManager10InitializeEv+0x51c>
    PhyInitialize();
    b1ee:	4620      	mov	r0, r4
    b1f0:	f7ff fce4 	bl	abbc <_ZN9ClearCore15EthernetManager13PhyInitializeEv>
    m_ethernetInterface.rxDesc = &m_rxDesc[0];
    b1f4:	f641 106c 	movw	r0, #6508	; 0x196c
    m_ethernetInterface.txDesc = &m_txDesc[0];
    b1f8:	f641 1170 	movw	r1, #6512	; 0x1970
    m_ethernetInterface.rxBuffIndex = &m_rxBuffIndex;
    b1fc:	f641 1774 	movw	r7, #6516	; 0x1974
    NvmMgr.MacAddress(m_ethernetInterface.mac);
    b200:	4b0f      	ldr	r3, [pc, #60]	; (b240 <_ZN9ClearCore15EthernetManager10InitializeEv+0x574>)
    m_ethernetInterface.rxDesc = &m_rxDesc[0];
    b202:	5026      	str	r6, [r4, r0]
    m_ethernetInterface.txBuffIndex = &m_txBuffIndex;
    b204:	f641 1278 	movw	r2, #6520	; 0x1978
    m_ethernetInterface.txDesc = &m_txDesc[0];
    b208:	5065      	str	r5, [r4, r1]
    m_ethernetInterface.txBuffIndex = &m_txBuffIndex;
    b20a:	f104 0064 	add.w	r0, r4, #100	; 0x64
    m_ethernetInterface.rxBuffIndex = &m_rxBuffIndex;
    b20e:	f104 0662 	add.w	r6, r4, #98	; 0x62
    NvmMgr.MacAddress(m_ethernetInterface.mac);
    b212:	f504 51cb 	add.w	r1, r4, #6496	; 0x1960
    m_ethernetInterface.rxBuffIndex = &m_rxBuffIndex;
    b216:	51e6      	str	r6, [r4, r7]
    NvmMgr.MacAddress(m_ethernetInterface.mac);
    b218:	311c      	adds	r1, #28
    m_ethernetInterface.txBuffIndex = &m_txBuffIndex;
    b21a:	50a0      	str	r0, [r4, r2]
    NvmMgr.MacAddress(m_ethernetInterface.mac);
    b21c:	6818      	ldr	r0, [r3, #0]
}
    b21e:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    NvmMgr.MacAddress(m_ethernetInterface.mac);
    b222:	f7ff bb3f 	b.w	a8a4 <_ZN9ClearCore10NvmManager10MacAddressEPh>
    GMAC->NCR.bit.TXEN = enable ? 1 : 0;
    b226:	681a      	ldr	r2, [r3, #0]
    b228:	f36f 02c3 	bfc	r2, #3, #1
    b22c:	601a      	str	r2, [r3, #0]
    GMAC->NCR.bit.RXEN = enable ? 1 : 0;
    b22e:	681a      	ldr	r2, [r3, #0]
    b230:	f36f 0282 	bfc	r2, #2, #1
    b234:	601a      	str	r2, [r3, #0]
    b236:	e554      	b.n	ace2 <_ZN9ClearCore15EthernetManager10InitializeEv+0x16>
    b238:	42000800 	.word	0x42000800
    b23c:	40002800 	.word	0x40002800
    b240:	20001d10 	.word	0x20001d10

0000b244 <_ZN9ClearCore15EthernetManager13IrqHandlerPhyEv>:
void EthernetManager::IrqHandlerPhy() {
    b244:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    EIC->INTFLAG.reg = 1UL << m_phyExtInt;
    b248:	6d85      	ldr	r5, [r0, #88]	; 0x58
    b24a:	4ca1      	ldr	r4, [pc, #644]	; (b4d0 <_ZN9ClearCore15EthernetManager13IrqHandlerPhyEv+0x28c>)
    GMAC->NCR.bit.MPE = 1;
    b24c:	4ba1      	ldr	r3, [pc, #644]	; (b4d4 <_ZN9ClearCore15EthernetManager13IrqHandlerPhyEv+0x290>)
    GMAC->MAN.reg = GMAC_MAN_CLTTO |   // Clause 22 or 45 operation (1 is 22)
    b24e:	49a2      	ldr	r1, [pc, #648]	; (b4d8 <_ZN9ClearCore15EthernetManager13IrqHandlerPhyEv+0x294>)
    EIC->INTFLAG.reg = 1UL << m_phyExtInt;
    b250:	2201      	movs	r2, #1
    b252:	40aa      	lsls	r2, r5
    b254:	6162      	str	r2, [r4, #20]
    GMAC->NCR.bit.MPE = 1;
    b256:	681a      	ldr	r2, [r3, #0]
    b258:	f042 0210 	orr.w	r2, r2, #16
    b25c:	601a      	str	r2, [r3, #0]
    while (!((GMAC->NSR.reg & GMAC_NSR_IDLE) >> GMAC_NSR_IDLE_Pos)) {
    b25e:	461a      	mov	r2, r3
    GMAC->MAN.reg = GMAC_MAN_CLTTO |   // Clause 22 or 45 operation (1 is 22)
    b260:	6359      	str	r1, [r3, #52]	; 0x34
    while (!((GMAC->NSR.reg & GMAC_NSR_IDLE) >> GMAC_NSR_IDLE_Pos)) {
    b262:	6893      	ldr	r3, [r2, #8]
    b264:	075d      	lsls	r5, r3, #29
    b266:	d5fc      	bpl.n	b262 <_ZN9ClearCore15EthernetManager13IrqHandlerPhyEv+0x1e>
    GMAC->NCR.bit.MPE = 0;
    b268:	6813      	ldr	r3, [r2, #0]
    b26a:	f36f 1304 	bfc	r3, #4, #1
    b26e:	6013      	str	r3, [r2, #0]
    return GMAC_MAN_DATA(GMAC->MAN.reg);
    b270:	6b51      	ldr	r1, [r2, #52]	; 0x34
    if (phyRegData & PHY_ICS_LU) {
    b272:	07cc      	lsls	r4, r1, #31
    b274:	d415      	bmi.n	b2a2 <_ZN9ClearCore15EthernetManager13IrqHandlerPhyEv+0x5e>
    if (phyRegData & PHY_ICS_LD) {
    b276:	074d      	lsls	r5, r1, #29
        m_phyLinkUp = false;
    b278:	bf44      	itt	mi
    b27a:	2300      	movmi	r3, #0
    b27c:	f880 305c 	strbmi.w	r3, [r0, #92]	; 0x5c
    if (phyRegData & PHY_ICS_RF) {
    b280:	078c      	lsls	r4, r1, #30
    b282:	d401      	bmi.n	b288 <_ZN9ClearCore15EthernetManager13IrqHandlerPhyEv+0x44>
    b284:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    bool enabled = (GMAC->NCR.bit.TXEN && GMAC->NCR.bit.RXEN);
    b288:	4b92      	ldr	r3, [pc, #584]	; (b4d4 <_ZN9ClearCore15EthernetManager13IrqHandlerPhyEv+0x290>)
    b28a:	681a      	ldr	r2, [r3, #0]
        m_phyRemoteFault = true;
    b28c:	2101      	movs	r1, #1
    b28e:	f880 105d 	strb.w	r1, [r0, #93]	; 0x5d
    bool enabled = (GMAC->NCR.bit.TXEN && GMAC->NCR.bit.RXEN);
    b292:	0711      	lsls	r1, r2, #28
    b294:	d5f6      	bpl.n	b284 <_ZN9ClearCore15EthernetManager13IrqHandlerPhyEv+0x40>
    b296:	681a      	ldr	r2, [r3, #0]
    b298:	0752      	lsls	r2, r2, #29
    b29a:	f100 8121 	bmi.w	b4e0 <_ZN9ClearCore15EthernetManager13IrqHandlerPhyEv+0x29c>
    b29e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        bool enabled = (GMAC->NCR.bit.TXEN == 1);
    b2a2:	6814      	ldr	r4, [r2, #0]
    bool enabled = (GMAC->NCR.bit.TXEN && GMAC->NCR.bit.RXEN);
    b2a4:	6813      	ldr	r3, [r2, #0]
        m_phyLinkUp = true;
    b2a6:	2501      	movs	r5, #1
    bool enabled = (GMAC->NCR.bit.TXEN && GMAC->NCR.bit.RXEN);
    b2a8:	071b      	lsls	r3, r3, #28
        bool enabled = (GMAC->NCR.bit.TXEN == 1);
    b2aa:	f3c4 04c0 	ubfx	r4, r4, #3, #1
        m_phyLinkUp = true;
    b2ae:	f880 505c 	strb.w	r5, [r0, #92]	; 0x5c
    bool enabled = (GMAC->NCR.bit.TXEN && GMAC->NCR.bit.RXEN);
    b2b2:	d56d      	bpl.n	b390 <_ZN9ClearCore15EthernetManager13IrqHandlerPhyEv+0x14c>
    b2b4:	6813      	ldr	r3, [r2, #0]
    b2b6:	075f      	lsls	r7, r3, #29
    b2b8:	d56a      	bpl.n	b390 <_ZN9ClearCore15EthernetManager13IrqHandlerPhyEv+0x14c>
    GMAC->NCR.bit.TXEN = enable ? 1 : 0;
    b2ba:	6813      	ldr	r3, [r2, #0]
    b2bc:	f36f 03c3 	bfc	r3, #3, #1
    b2c0:	6013      	str	r3, [r2, #0]
    GMAC->NCR.bit.RXEN = enable ? 1 : 0;
    b2c2:	6813      	ldr	r3, [r2, #0]
    b2c4:	f36f 0382 	bfc	r3, #2, #1
    b2c8:	6013      	str	r3, [r2, #0]
            m_txDesc[i].bit.OWN = 1;
    b2ca:	f890 e0f7 	ldrb.w	lr, [r0, #247]	; 0xf7
            m_txDesc[i].bit.LB = 1;
    b2ce:	f890 70f5 	ldrb.w	r7, [r0, #245]	; 0xf5
            m_txDesc[i].bit.OWN = 1;
    b2d2:	f890 60ff 	ldrb.w	r6, [r0, #255]	; 0xff
            m_txDesc[i].bit.LB = 1;
    b2d6:	f890 50fd 	ldrb.w	r5, [r0, #253]	; 0xfd
            m_txDesc[i].bit.OWN = 1;
    b2da:	f890 2107 	ldrb.w	r2, [r0, #263]	; 0x107
            m_txDesc[i].bit.LB = 1;
    b2de:	f890 3105 	ldrb.w	r3, [r0, #261]	; 0x105
            m_txDesc[i].bit.OWN = 1;
    b2e2:	f890 80ef 	ldrb.w	r8, [r0, #239]	; 0xef
            m_txDesc[i].bit.LB = 1;
    b2e6:	f890 c0ed 	ldrb.w	ip, [r0, #237]	; 0xed
            m_txDesc[i].bit.OWN = 1;
    b2ea:	f04e 0e80 	orr.w	lr, lr, #128	; 0x80
            m_txDesc[i].bit.LB = 1;
    b2ee:	f047 0780 	orr.w	r7, r7, #128	; 0x80
            m_txDesc[i].bit.OWN = 1;
    b2f2:	f046 0680 	orr.w	r6, r6, #128	; 0x80
            m_txDesc[i].bit.LB = 1;
    b2f6:	f045 0580 	orr.w	r5, r5, #128	; 0x80
            m_txDesc[i].bit.OWN = 1;
    b2fa:	f042 0280 	orr.w	r2, r2, #128	; 0x80
            m_txDesc[i].bit.LB = 1;
    b2fe:	f043 0380 	orr.w	r3, r3, #128	; 0x80
            m_txDesc[i].bit.OWN = 1;
    b302:	f880 e0f7 	strb.w	lr, [r0, #247]	; 0xf7
            m_txDesc[i].bit.LB = 1;
    b306:	f880 70f5 	strb.w	r7, [r0, #245]	; 0xf5
            m_txDesc[i].bit.OWN = 1;
    b30a:	f890 e10f 	ldrb.w	lr, [r0, #271]	; 0x10f
            m_txDesc[i].bit.LB = 1;
    b30e:	f890 710d 	ldrb.w	r7, [r0, #269]	; 0x10d
            m_txDesc[i].bit.OWN = 1;
    b312:	f880 60ff 	strb.w	r6, [r0, #255]	; 0xff
            m_txDesc[i].bit.LB = 1;
    b316:	f880 50fd 	strb.w	r5, [r0, #253]	; 0xfd
            m_txDesc[i].bit.OWN = 1;
    b31a:	f890 6117 	ldrb.w	r6, [r0, #279]	; 0x117
            m_txDesc[i].bit.LB = 1;
    b31e:	f890 5115 	ldrb.w	r5, [r0, #277]	; 0x115
            m_txDesc[i].bit.OWN = 1;
    b322:	f880 2107 	strb.w	r2, [r0, #263]	; 0x107
            m_txDesc[i].bit.LB = 1;
    b326:	f880 3105 	strb.w	r3, [r0, #261]	; 0x105
            m_txDesc[i].bit.OWN = 1;
    b32a:	f890 211f 	ldrb.w	r2, [r0, #287]	; 0x11f
            m_txDesc[i].bit.LB = 1;
    b32e:	f890 311d 	ldrb.w	r3, [r0, #285]	; 0x11d
    b332:	f045 0580 	orr.w	r5, r5, #128	; 0x80
            m_txDesc[i].bit.OWN = 1;
    b336:	f042 0280 	orr.w	r2, r2, #128	; 0x80
            m_txDesc[i].bit.LB = 1;
    b33a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
            m_txDesc[i].bit.OWN = 1;
    b33e:	f048 0880 	orr.w	r8, r8, #128	; 0x80
            m_txDesc[i].bit.LB = 1;
    b342:	f04c 0c80 	orr.w	ip, ip, #128	; 0x80
            m_txDesc[i].bit.OWN = 1;
    b346:	f04e 0e80 	orr.w	lr, lr, #128	; 0x80
            m_txDesc[i].bit.LB = 1;
    b34a:	f047 0780 	orr.w	r7, r7, #128	; 0x80
            m_txDesc[i].bit.OWN = 1;
    b34e:	f046 0680 	orr.w	r6, r6, #128	; 0x80
            m_txDesc[i].bit.LB = 1;
    b352:	f880 5115 	strb.w	r5, [r0, #277]	; 0x115
    b356:	f880 311d 	strb.w	r3, [r0, #285]	; 0x11d
            m_txDesc[i].bit.OWN = 1;
    b35a:	f880 80ef 	strb.w	r8, [r0, #239]	; 0xef
            m_txDesc[i].bit.LB = 1;
    b35e:	f880 c0ed 	strb.w	ip, [r0, #237]	; 0xed
            m_txDesc[i].bit.OWN = 1;
    b362:	f880 e10f 	strb.w	lr, [r0, #271]	; 0x10f
            m_txDesc[i].bit.LB = 1;
    b366:	f880 710d 	strb.w	r7, [r0, #269]	; 0x10d
            m_txDesc[i].bit.OWN = 1;
    b36a:	f880 6117 	strb.w	r6, [r0, #279]	; 0x117
    b36e:	f880 211f 	strb.w	r2, [r0, #287]	; 0x11f
    b372:	f890 2127 	ldrb.w	r2, [r0, #295]	; 0x127
            m_txDesc[i].bit.LB = 1;
    b376:	f890 3125 	ldrb.w	r3, [r0, #293]	; 0x125
            m_txDesc[i].bit.OWN = 1;
    b37a:	f042 0280 	orr.w	r2, r2, #128	; 0x80
            m_txDesc[i].bit.LB = 1;
    b37e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
        m_txBuffIndex = 0;
    b382:	2500      	movs	r5, #0
            m_txDesc[i].bit.OWN = 1;
    b384:	f880 2127 	strb.w	r2, [r0, #295]	; 0x127
            m_txDesc[i].bit.LB = 1;
    b388:	f880 3125 	strb.w	r3, [r0, #293]	; 0x125
        m_txBuffIndex = 0;
    b38c:	f8a0 5064 	strh.w	r5, [r0, #100]	; 0x64
    GMAC->NCR.bit.MPE = 1;
    b390:	4b50      	ldr	r3, [pc, #320]	; (b4d4 <_ZN9ClearCore15EthernetManager13IrqHandlerPhyEv+0x290>)
    GMAC->MAN.reg = GMAC_MAN_CLTTO |   // Clause 22 or 45 operation (1 is 22)
    b392:	4d52      	ldr	r5, [pc, #328]	; (b4dc <_ZN9ClearCore15EthernetManager13IrqHandlerPhyEv+0x298>)
    GMAC->NCR.bit.MPE = 1;
    b394:	681a      	ldr	r2, [r3, #0]
    b396:	f042 0210 	orr.w	r2, r2, #16
    b39a:	601a      	str	r2, [r3, #0]
    while (!((GMAC->NSR.reg & GMAC_NSR_IDLE) >> GMAC_NSR_IDLE_Pos)) {
    b39c:	461a      	mov	r2, r3
    GMAC->MAN.reg = GMAC_MAN_CLTTO |   // Clause 22 or 45 operation (1 is 22)
    b39e:	635d      	str	r5, [r3, #52]	; 0x34
    while (!((GMAC->NSR.reg & GMAC_NSR_IDLE) >> GMAC_NSR_IDLE_Pos)) {
    b3a0:	6893      	ldr	r3, [r2, #8]
    b3a2:	075e      	lsls	r6, r3, #29
    b3a4:	d5fc      	bpl.n	b3a0 <_ZN9ClearCore15EthernetManager13IrqHandlerPhyEv+0x15c>
    GMAC->NCR.bit.MPE = 0;
    b3a6:	6813      	ldr	r3, [r2, #0]
    b3a8:	f36f 1304 	bfc	r3, #4, #1
    b3ac:	6013      	str	r3, [r2, #0]
    return GMAC_MAN_DATA(GMAC->MAN.reg);
    b3ae:	6b53      	ldr	r3, [r2, #52]	; 0x34
        GMAC->NCFGR.bit.SPD = (phyMode & PHY_CTRL_AN_SPD_MSK) ? 1 : 0;
    b3b0:	6855      	ldr	r5, [r2, #4]
        uint16_t phyMode = PhyRead(PHY_CTRL_1) & PHY_CTRL_AN_MSK;
    b3b2:	b29b      	uxth	r3, r3
        GMAC->NCFGR.bit.SPD = (phyMode & PHY_CTRL_AN_SPD_MSK) ? 1 : 0;
    b3b4:	f3c3 0640 	ubfx	r6, r3, #1, #1
    b3b8:	f366 0500 	bfi	r5, r6, #0, #1
    b3bc:	6055      	str	r5, [r2, #4]
        GMAC->NCFGR.bit.FD = (phyMode & PHY_CTRL_AN_FD_MSK) ? 1 : 0;
    b3be:	6855      	ldr	r5, [r2, #4]
    b3c0:	f3c3 0380 	ubfx	r3, r3, #2, #1
    b3c4:	f363 0541 	bfi	r5, r3, #1, #1
    b3c8:	6055      	str	r5, [r2, #4]
    bool enabled = (GMAC->NCR.bit.TXEN && GMAC->NCR.bit.RXEN);
    b3ca:	6813      	ldr	r3, [r2, #0]
    b3cc:	f3c3 03c0 	ubfx	r3, r3, #3, #1
    b3d0:	b96b      	cbnz	r3, b3ee <_ZN9ClearCore15EthernetManager13IrqHandlerPhyEv+0x1aa>
    if (enable == enabled) {
    b3d2:	429c      	cmp	r4, r3
    b3d4:	f43f af4f 	beq.w	b276 <_ZN9ClearCore15EthernetManager13IrqHandlerPhyEv+0x32>
    GMAC->NCR.bit.TXEN = enable ? 1 : 0;
    b3d8:	b16c      	cbz	r4, b3f6 <_ZN9ClearCore15EthernetManager13IrqHandlerPhyEv+0x1b2>
    b3da:	4b3e      	ldr	r3, [pc, #248]	; (b4d4 <_ZN9ClearCore15EthernetManager13IrqHandlerPhyEv+0x290>)
    b3dc:	681a      	ldr	r2, [r3, #0]
    b3de:	f042 0208 	orr.w	r2, r2, #8
    b3e2:	601a      	str	r2, [r3, #0]
    GMAC->NCR.bit.RXEN = enable ? 1 : 0;
    b3e4:	681a      	ldr	r2, [r3, #0]
    b3e6:	f042 0204 	orr.w	r2, r2, #4
    b3ea:	601a      	str	r2, [r3, #0]
    b3ec:	e743      	b.n	b276 <_ZN9ClearCore15EthernetManager13IrqHandlerPhyEv+0x32>
    bool enabled = (GMAC->NCR.bit.TXEN && GMAC->NCR.bit.RXEN);
    b3ee:	6813      	ldr	r3, [r2, #0]
    b3f0:	f3c3 0380 	ubfx	r3, r3, #2, #1
    b3f4:	e7ed      	b.n	b3d2 <_ZN9ClearCore15EthernetManager13IrqHandlerPhyEv+0x18e>
    GMAC->NCR.bit.TXEN = enable ? 1 : 0;
    b3f6:	4b37      	ldr	r3, [pc, #220]	; (b4d4 <_ZN9ClearCore15EthernetManager13IrqHandlerPhyEv+0x290>)
    b3f8:	681a      	ldr	r2, [r3, #0]
    b3fa:	f364 02c3 	bfi	r2, r4, #3, #1
    b3fe:	601a      	str	r2, [r3, #0]
    GMAC->NCR.bit.RXEN = enable ? 1 : 0;
    b400:	681a      	ldr	r2, [r3, #0]
    b402:	f364 0282 	bfi	r2, r4, #2, #1
    b406:	601a      	str	r2, [r3, #0]
            m_txDesc[i].bit.OWN = 1;
    b408:	f890 e0f7 	ldrb.w	lr, [r0, #247]	; 0xf7
            m_txDesc[i].bit.LB = 1;
    b40c:	f890 70f5 	ldrb.w	r7, [r0, #245]	; 0xf5
            m_txDesc[i].bit.OWN = 1;
    b410:	f890 60ff 	ldrb.w	r6, [r0, #255]	; 0xff
            m_txDesc[i].bit.LB = 1;
    b414:	f890 50fd 	ldrb.w	r5, [r0, #253]	; 0xfd
            m_txDesc[i].bit.OWN = 1;
    b418:	f890 2107 	ldrb.w	r2, [r0, #263]	; 0x107
            m_txDesc[i].bit.LB = 1;
    b41c:	f890 3105 	ldrb.w	r3, [r0, #261]	; 0x105
            m_txDesc[i].bit.OWN = 1;
    b420:	f890 80ef 	ldrb.w	r8, [r0, #239]	; 0xef
            m_txDesc[i].bit.LB = 1;
    b424:	f890 c0ed 	ldrb.w	ip, [r0, #237]	; 0xed
            m_txDesc[i].bit.OWN = 1;
    b428:	f04e 0e80 	orr.w	lr, lr, #128	; 0x80
            m_txDesc[i].bit.LB = 1;
    b42c:	f047 0780 	orr.w	r7, r7, #128	; 0x80
            m_txDesc[i].bit.OWN = 1;
    b430:	f046 0680 	orr.w	r6, r6, #128	; 0x80
            m_txDesc[i].bit.LB = 1;
    b434:	f045 0580 	orr.w	r5, r5, #128	; 0x80
            m_txDesc[i].bit.OWN = 1;
    b438:	f042 0280 	orr.w	r2, r2, #128	; 0x80
            m_txDesc[i].bit.LB = 1;
    b43c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
            m_txDesc[i].bit.OWN = 1;
    b440:	f880 e0f7 	strb.w	lr, [r0, #247]	; 0xf7
            m_txDesc[i].bit.LB = 1;
    b444:	f880 70f5 	strb.w	r7, [r0, #245]	; 0xf5
            m_txDesc[i].bit.OWN = 1;
    b448:	f890 e10f 	ldrb.w	lr, [r0, #271]	; 0x10f
            m_txDesc[i].bit.LB = 1;
    b44c:	f890 710d 	ldrb.w	r7, [r0, #269]	; 0x10d
            m_txDesc[i].bit.OWN = 1;
    b450:	f880 60ff 	strb.w	r6, [r0, #255]	; 0xff
            m_txDesc[i].bit.LB = 1;
    b454:	f880 50fd 	strb.w	r5, [r0, #253]	; 0xfd
            m_txDesc[i].bit.OWN = 1;
    b458:	f890 6117 	ldrb.w	r6, [r0, #279]	; 0x117
            m_txDesc[i].bit.LB = 1;
    b45c:	f890 5115 	ldrb.w	r5, [r0, #277]	; 0x115
            m_txDesc[i].bit.OWN = 1;
    b460:	f880 2107 	strb.w	r2, [r0, #263]	; 0x107
            m_txDesc[i].bit.LB = 1;
    b464:	f880 3105 	strb.w	r3, [r0, #261]	; 0x105
            m_txDesc[i].bit.OWN = 1;
    b468:	f890 211f 	ldrb.w	r2, [r0, #287]	; 0x11f
            m_txDesc[i].bit.LB = 1;
    b46c:	f890 311d 	ldrb.w	r3, [r0, #285]	; 0x11d
            m_txDesc[i].bit.OWN = 1;
    b470:	f042 0280 	orr.w	r2, r2, #128	; 0x80
            m_txDesc[i].bit.LB = 1;
    b474:	f043 0380 	orr.w	r3, r3, #128	; 0x80
            m_txDesc[i].bit.OWN = 1;
    b478:	f048 0880 	orr.w	r8, r8, #128	; 0x80
            m_txDesc[i].bit.LB = 1;
    b47c:	f04c 0c80 	orr.w	ip, ip, #128	; 0x80
            m_txDesc[i].bit.OWN = 1;
    b480:	f04e 0e80 	orr.w	lr, lr, #128	; 0x80
            m_txDesc[i].bit.LB = 1;
    b484:	f047 0780 	orr.w	r7, r7, #128	; 0x80
            m_txDesc[i].bit.OWN = 1;
    b488:	f046 0680 	orr.w	r6, r6, #128	; 0x80
            m_txDesc[i].bit.LB = 1;
    b48c:	f045 0580 	orr.w	r5, r5, #128	; 0x80
    b490:	f880 311d 	strb.w	r3, [r0, #285]	; 0x11d
            m_txDesc[i].bit.OWN = 1;
    b494:	f880 80ef 	strb.w	r8, [r0, #239]	; 0xef
            m_txDesc[i].bit.LB = 1;
    b498:	f880 c0ed 	strb.w	ip, [r0, #237]	; 0xed
            m_txDesc[i].bit.OWN = 1;
    b49c:	f880 e10f 	strb.w	lr, [r0, #271]	; 0x10f
            m_txDesc[i].bit.LB = 1;
    b4a0:	f880 710d 	strb.w	r7, [r0, #269]	; 0x10d
            m_txDesc[i].bit.OWN = 1;
    b4a4:	f880 6117 	strb.w	r6, [r0, #279]	; 0x117
            m_txDesc[i].bit.LB = 1;
    b4a8:	f880 5115 	strb.w	r5, [r0, #277]	; 0x115
            m_txDesc[i].bit.OWN = 1;
    b4ac:	f880 211f 	strb.w	r2, [r0, #287]	; 0x11f
    b4b0:	f890 2127 	ldrb.w	r2, [r0, #295]	; 0x127
            m_txDesc[i].bit.LB = 1;
    b4b4:	f890 3125 	ldrb.w	r3, [r0, #293]	; 0x125
        m_txBuffIndex = 0;
    b4b8:	f8a0 4064 	strh.w	r4, [r0, #100]	; 0x64
            m_txDesc[i].bit.OWN = 1;
    b4bc:	f042 0280 	orr.w	r2, r2, #128	; 0x80
            m_txDesc[i].bit.LB = 1;
    b4c0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
            m_txDesc[i].bit.OWN = 1;
    b4c4:	f880 2127 	strb.w	r2, [r0, #295]	; 0x127
            m_txDesc[i].bit.LB = 1;
    b4c8:	f880 3125 	strb.w	r3, [r0, #293]	; 0x125
    b4cc:	e6d3      	b.n	b276 <_ZN9ClearCore15EthernetManager13IrqHandlerPhyEv+0x32>
    b4ce:	bf00      	nop
    b4d0:	40002800 	.word	0x40002800
    b4d4:	42000800 	.word	0x42000800
    b4d8:	606e0000 	.word	0x606e0000
    b4dc:	607a0000 	.word	0x607a0000
    GMAC->NCR.bit.TXEN = enable ? 1 : 0;
    b4e0:	681a      	ldr	r2, [r3, #0]
    b4e2:	f36f 02c3 	bfc	r2, #3, #1
    b4e6:	601a      	str	r2, [r3, #0]
    GMAC->NCR.bit.RXEN = enable ? 1 : 0;
    b4e8:	681a      	ldr	r2, [r3, #0]
    b4ea:	f36f 0282 	bfc	r2, #2, #1
    b4ee:	601a      	str	r2, [r3, #0]
            m_txDesc[i].bit.OWN = 1;
    b4f0:	f890 40f7 	ldrb.w	r4, [r0, #247]	; 0xf7
            m_txDesc[i].bit.LB = 1;
    b4f4:	f890 10f5 	ldrb.w	r1, [r0, #245]	; 0xf5
            m_txDesc[i].bit.OWN = 1;
    b4f8:	f890 20ff 	ldrb.w	r2, [r0, #255]	; 0xff
            m_txDesc[i].bit.LB = 1;
    b4fc:	f890 30fd 	ldrb.w	r3, [r0, #253]	; 0xfd
            m_txDesc[i].bit.OWN = 1;
    b500:	f890 80ef 	ldrb.w	r8, [r0, #239]	; 0xef
            m_txDesc[i].bit.LB = 1;
    b504:	f890 c0ed 	ldrb.w	ip, [r0, #237]	; 0xed
            m_txDesc[i].bit.OWN = 1;
    b508:	f890 e107 	ldrb.w	lr, [r0, #263]	; 0x107
            m_txDesc[i].bit.LB = 1;
    b50c:	f890 7105 	ldrb.w	r7, [r0, #261]	; 0x105
            m_txDesc[i].bit.OWN = 1;
    b510:	f890 610f 	ldrb.w	r6, [r0, #271]	; 0x10f
            m_txDesc[i].bit.LB = 1;
    b514:	f890 510d 	ldrb.w	r5, [r0, #269]	; 0x10d
            m_txDesc[i].bit.OWN = 1;
    b518:	f044 0480 	orr.w	r4, r4, #128	; 0x80
            m_txDesc[i].bit.LB = 1;
    b51c:	f041 0180 	orr.w	r1, r1, #128	; 0x80
            m_txDesc[i].bit.OWN = 1;
    b520:	f042 0280 	orr.w	r2, r2, #128	; 0x80
            m_txDesc[i].bit.LB = 1;
    b524:	f043 0380 	orr.w	r3, r3, #128	; 0x80
            m_txDesc[i].bit.OWN = 1;
    b528:	f880 40f7 	strb.w	r4, [r0, #247]	; 0xf7
            m_txDesc[i].bit.LB = 1;
    b52c:	f880 10f5 	strb.w	r1, [r0, #245]	; 0xf5
            m_txDesc[i].bit.OWN = 1;
    b530:	f890 4117 	ldrb.w	r4, [r0, #279]	; 0x117
            m_txDesc[i].bit.LB = 1;
    b534:	f890 1115 	ldrb.w	r1, [r0, #277]	; 0x115
            m_txDesc[i].bit.OWN = 1;
    b538:	f880 20ff 	strb.w	r2, [r0, #255]	; 0xff
            m_txDesc[i].bit.LB = 1;
    b53c:	f880 30fd 	strb.w	r3, [r0, #253]	; 0xfd
            m_txDesc[i].bit.OWN = 1;
    b540:	f890 211f 	ldrb.w	r2, [r0, #287]	; 0x11f
            m_txDesc[i].bit.LB = 1;
    b544:	f890 311d 	ldrb.w	r3, [r0, #285]	; 0x11d
    b548:	f041 0180 	orr.w	r1, r1, #128	; 0x80
            m_txDesc[i].bit.OWN = 1;
    b54c:	f042 0280 	orr.w	r2, r2, #128	; 0x80
            m_txDesc[i].bit.LB = 1;
    b550:	f043 0380 	orr.w	r3, r3, #128	; 0x80
            m_txDesc[i].bit.OWN = 1;
    b554:	f048 0880 	orr.w	r8, r8, #128	; 0x80
            m_txDesc[i].bit.LB = 1;
    b558:	f04c 0c80 	orr.w	ip, ip, #128	; 0x80
            m_txDesc[i].bit.OWN = 1;
    b55c:	f04e 0e80 	orr.w	lr, lr, #128	; 0x80
            m_txDesc[i].bit.LB = 1;
    b560:	f047 0780 	orr.w	r7, r7, #128	; 0x80
            m_txDesc[i].bit.OWN = 1;
    b564:	f046 0680 	orr.w	r6, r6, #128	; 0x80
            m_txDesc[i].bit.LB = 1;
    b568:	f045 0580 	orr.w	r5, r5, #128	; 0x80
            m_txDesc[i].bit.OWN = 1;
    b56c:	f044 0480 	orr.w	r4, r4, #128	; 0x80
            m_txDesc[i].bit.LB = 1;
    b570:	f880 1115 	strb.w	r1, [r0, #277]	; 0x115
    b574:	f880 311d 	strb.w	r3, [r0, #285]	; 0x11d
            m_txDesc[i].bit.OWN = 1;
    b578:	f880 80ef 	strb.w	r8, [r0, #239]	; 0xef
            m_txDesc[i].bit.LB = 1;
    b57c:	f880 c0ed 	strb.w	ip, [r0, #237]	; 0xed
            m_txDesc[i].bit.OWN = 1;
    b580:	f880 e107 	strb.w	lr, [r0, #263]	; 0x107
            m_txDesc[i].bit.LB = 1;
    b584:	f880 7105 	strb.w	r7, [r0, #261]	; 0x105
            m_txDesc[i].bit.OWN = 1;
    b588:	f880 610f 	strb.w	r6, [r0, #271]	; 0x10f
            m_txDesc[i].bit.LB = 1;
    b58c:	f880 510d 	strb.w	r5, [r0, #269]	; 0x10d
            m_txDesc[i].bit.OWN = 1;
    b590:	f880 4117 	strb.w	r4, [r0, #279]	; 0x117
    b594:	f880 211f 	strb.w	r2, [r0, #287]	; 0x11f
    b598:	f890 2127 	ldrb.w	r2, [r0, #295]	; 0x127
            m_txDesc[i].bit.LB = 1;
    b59c:	f890 3125 	ldrb.w	r3, [r0, #293]	; 0x125
            m_txDesc[i].bit.OWN = 1;
    b5a0:	f042 0280 	orr.w	r2, r2, #128	; 0x80
            m_txDesc[i].bit.LB = 1;
    b5a4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
        m_txBuffIndex = 0;
    b5a8:	2100      	movs	r1, #0
            m_txDesc[i].bit.OWN = 1;
    b5aa:	f880 2127 	strb.w	r2, [r0, #295]	; 0x127
            m_txDesc[i].bit.LB = 1;
    b5ae:	f880 3125 	strb.w	r3, [r0, #293]	; 0x125
        m_txBuffIndex = 0;
    b5b2:	f8a0 1064 	strh.w	r1, [r0, #100]	; 0x64
    b5b6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    b5ba:	bf00      	nop

0000b5bc <_ZN9ClearCore15EthernetManager14IrqHandlerGmacEv>:
    tsr = GMAC->TSR.reg;    // Transmit status register
    b5bc:	4b0b      	ldr	r3, [pc, #44]	; (b5ec <_ZN9ClearCore15EthernetManager14IrqHandlerGmacEv+0x30>)
void EthernetManager::IrqHandlerGmac() {
    b5be:	b082      	sub	sp, #8
    tsr = GMAC->TSR.reg;    // Transmit status register
    b5c0:	695a      	ldr	r2, [r3, #20]
    b5c2:	9200      	str	r2, [sp, #0]
    rsr = GMAC->RSR.reg;    // Receive  status register
    b5c4:	6a1a      	ldr	r2, [r3, #32]
    b5c6:	9201      	str	r2, [sp, #4]
    GMAC->ISR.reg;
    b5c8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
    if (tsr & GMAC_TSR_TXCOMP) {
    b5ca:	9a00      	ldr	r2, [sp, #0]
    b5cc:	0692      	lsls	r2, r2, #26
        GMAC->TSR.reg = tsr;
    b5ce:	bf44      	itt	mi
    b5d0:	9a00      	ldrmi	r2, [sp, #0]
    b5d2:	615a      	strmi	r2, [r3, #20]
    if (rsr & GMAC_RSR_REC) {
    b5d4:	9b01      	ldr	r3, [sp, #4]
    GMAC->RSR.reg = rsr;
    b5d6:	9a01      	ldr	r2, [sp, #4]
    if (rsr & GMAC_RSR_REC) {
    b5d8:	079b      	lsls	r3, r3, #30
        m_recv = true;
    b5da:	bf44      	itt	mi
    b5dc:	2301      	movmi	r3, #1
    b5de:	f880 305f 	strbmi.w	r3, [r0, #95]	; 0x5f
    GMAC->RSR.reg = rsr;
    b5e2:	4b02      	ldr	r3, [pc, #8]	; (b5ec <_ZN9ClearCore15EthernetManager14IrqHandlerGmacEv+0x30>)
    b5e4:	621a      	str	r2, [r3, #32]
}
    b5e6:	b002      	add	sp, #8
    b5e8:	4770      	bx	lr
    b5ea:	bf00      	nop
    b5ec:	42000800 	.word	0x42000800

0000b5f0 <_GLOBAL__sub_I__Z12PacketLengthP6ethInt>:
        ethernetif_input(&m_macInterface, packet);
    }
    sys_check_timeouts();
}

    b5f0:	b508      	push	{r3, lr}
EthernetManager &EthernetMgr = EthernetManager::Instance();
    b5f2:	f7ff fa6f 	bl	aad4 <_ZN9ClearCore15EthernetManager8InstanceEv>
    b5f6:	4b01      	ldr	r3, [pc, #4]	; (b5fc <_GLOBAL__sub_I__Z12PacketLengthP6ethInt+0xc>)
    b5f8:	6018      	str	r0, [r3, #0]
    b5fa:	bd08      	pop	{r3, pc}
    b5fc:	20001d2c 	.word	0x20001d2c

0000b600 <_ZN9ClearCore13ShiftRegisterC1Ev>:
namespace ClearCore {

/**
    Constructs and adjusts inversions for hardware constraints
**/
ShiftRegister::ShiftRegister() :
    b600:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    m_initialized(false),
    m_blinkCodeActive(false),
    m_blinkCodeState(false),
    m_useAltOutput(false),
    m_pendingOutput(0),
    m_lastOutput(0) {
    b602:	4f46      	ldr	r7, [pc, #280]	; (b71c <_ZN9ClearCore13ShiftRegisterC1Ev+0x11c>)
    b604:	f8df e118 	ldr.w	lr, [pc, #280]	; b720 <_ZN9ClearCore13ShiftRegisterC1Ev+0x120>
    b608:	463e      	mov	r6, r7
ShiftRegister::ShiftRegister() :
    b60a:	4604      	mov	r4, r0
    m_lastOutput(0) {
    b60c:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
    b60e:	4625      	mov	r5, r4
    b610:	c50f      	stmia	r5!, {r0, r1, r2, r3}
    b612:	e896 0003 	ldmia.w	r6, {r0, r1}
    b616:	f107 0618 	add.w	r6, r7, #24
    b61a:	e885 0003 	stmia.w	r5, {r0, r1}
    b61e:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
    b620:	f104 0518 	add.w	r5, r4, #24
    b624:	c50f      	stmia	r5!, {r0, r1, r2, r3}
    b626:	e896 0007 	ldmia.w	r6, {r0, r1, r2}
    b62a:	f107 0334 	add.w	r3, r7, #52	; 0x34
    b62e:	e885 0007 	stmia.w	r5, {r0, r1, r2}
    b632:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
    b634:	f104 0534 	add.w	r5, r4, #52	; 0x34
    b638:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
              fadingIn(true) {}
    b63c:	2608      	movs	r6, #8
    b63e:	257f      	movs	r5, #127	; 0x7f
    b640:	23c8      	movs	r3, #200	; 0xc8
    b642:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
    b646:	f884 5064 	strb.w	r5, [r4, #100]	; 0x64
    b64a:	f884 6065 	strb.w	r6, [r4, #101]	; 0x65
              count(0) {}
    b64e:	2500      	movs	r5, #0
    b650:	f04f 36ff 	mov.w	r6, #4294967295
              fadingIn(true) {}
    b654:	2001      	movs	r0, #1
              m_analogMasks{SR_NO_FEEDBACK_MASK} {}
    b656:	21fe      	movs	r1, #254	; 0xfe
    b658:	f8c4 e044 	str.w	lr, [r4, #68]	; 0x44
              fadingIn(true) {}
    b65c:	f884 0068 	strb.w	r0, [r4, #104]	; 0x68
              m_analogMasks{SR_NO_FEEDBACK_MASK} {}
    b660:	f884 107c 	strb.w	r1, [r4, #124]	; 0x7c
    b664:	64a2      	str	r2, [r4, #72]	; 0x48
              count(0) {}
    b666:	6522      	str	r2, [r4, #80]	; 0x50
              m_analogMasks{SR_NO_FEEDBACK_MASK} {}
    b668:	4629      	mov	r1, r5
    b66a:	64e3      	str	r3, [r4, #76]	; 0x4c
              count(0) {}
    b66c:	6563      	str	r3, [r4, #84]	; 0x54
    b66e:	65a5      	str	r5, [r4, #88]	; 0x58
    b670:	65e5      	str	r5, [r4, #92]	; 0x5c
              fadingIn(true) {}
    b672:	f884 5066 	strb.w	r5, [r4, #102]	; 0x66
    b676:	f884 5067 	strb.w	r5, [r4, #103]	; 0x67
    b67a:	66e5      	str	r5, [r4, #108]	; 0x6c
              m_analogMasks{SR_NO_FEEDBACK_MASK} {}
    b67c:	f8a4 5074 	strh.w	r5, [r4, #116]	; 0x74
    b680:	67a5      	str	r5, [r4, #120]	; 0x78
    b682:	f8c4 507d 	str.w	r5, [r4, #125]	; 0x7d
              count(0) {}
    b686:	6626      	str	r6, [r4, #96]	; 0x60
              fadingIn(true) {}
    b688:	6726      	str	r6, [r4, #112]	; 0x70
              m_analogMasks{SR_NO_FEEDBACK_MASK} {}
    b68a:	f8c4 5081 	str.w	r5, [r4, #129]	; 0x81
    b68e:	f8c4 5085 	str.w	r5, [r4, #133]	; 0x85
    b692:	f8c4 5089 	str.w	r5, [r4, #137]	; 0x89
    b696:	f104 00a0 	add.w	r0, r4, #160	; 0xa0
    b69a:	f8c4 508d 	str.w	r5, [r4, #141]	; 0x8d
    b69e:	2240      	movs	r2, #64	; 0x40
    b6a0:	f8c4 5091 	str.w	r5, [r4, #145]	; 0x91
    b6a4:	f8c4 5095 	str.w	r5, [r4, #149]	; 0x95
    b6a8:	f8c4 5099 	str.w	r5, [r4, #153]	; 0x99
    b6ac:	f012 fd86 	bl	1e1bc <memset>
    m_shiftInversions.reg = 0xffffffff;
    m_shiftInversions.bit.LED_USB = 0;
    m_shiftInversions.bit.LED_IO_4 = 0;
    m_shiftInversions.bit.LED_IO_5 = 0;
    m_shiftInversions.bit.LED_COM_0 = 0;
    m_shiftInversions.bit.LED_COM_1 = 0;
    b6b0:	f06f 0704 	mvn.w	r7, #4
    m_shiftInversions.bit.LED_IO_5 = 0;
    b6b4:	f006 0ef7 	and.w	lr, r6, #247	; 0xf7
    m_shiftInversions.bit.EN_OUT_0 = 0;
    m_shiftInversions.bit.EN_OUT_1 = 0;
    m_shiftInversions.bit.EN_OUT_2 = 0;
    m_shiftInversions.bit.EN_OUT_3 = 0;
    m_shiftInversions.bit.UART_TTL_0 = 0;
    m_shiftInversions.bit.UART_TTL_1 = 0;
    b6b8:	f04f 0110 	mov.w	r1, #16
    m_shiftInversions.bit.LED_IO_5 = 0;
    b6bc:	f365 0e82 	bfi	lr, r5, #2, #1
    m_shiftInversions.bit.LED_COM_1 = 0;
    b6c0:	f365 07c3 	bfi	r7, r5, #3, #1
    m_shiftInversions.bit.UART_TTL_1 = 0;
    b6c4:	f365 1104 	bfi	r1, r5, #4, #1
    m_shiftInversions.reg = 0xffffffff;
    b6c8:	f8c4 60e0 	str.w	r6, [r4, #224]	; 0xe0
    m_lastOutput(0) {
    b6cc:	f44f 4c80 	mov.w	ip, #16384	; 0x4000
    m_shiftInversions.bit.LED_IO_5 = 0;
    b6d0:	f884 e0e0 	strb.w	lr, [r4, #224]	; 0xe0
    m_shiftInversions.bit.LED_COM_1 = 0;
    b6d4:	f884 70e2 	strb.w	r7, [r4, #226]	; 0xe2
    m_shiftInversions.bit.UART_TTL_1 = 0;
    b6d8:	f884 10e1 	strb.w	r1, [r4, #225]	; 0xe1
    m_lastOutput(0) {
    b6dc:	f8c4 50e8 	str.w	r5, [r4, #232]	; 0xe8
    b6e0:	f8c4 50ec 	str.w	r5, [r4, #236]	; 0xec
    b6e4:	f8c4 50f0 	str.w	r5, [r4, #240]	; 0xf0
    b6e8:	f8c4 60e4 	str.w	r6, [r4, #228]	; 0xe4
    b6ec:	f8c4 50f8 	str.w	r5, [r4, #248]	; 0xf8
    b6f0:	f8c4 50fc 	str.w	r5, [r4, #252]	; 0xfc
    b6f4:	f8c4 5100 	str.w	r5, [r4, #256]	; 0x100
}
    b6f8:	4620      	mov	r0, r4
    m_lastOutput(0) {
    b6fa:	f8c4 5104 	str.w	r5, [r4, #260]	; 0x104
    b6fe:	f884 5108 	strb.w	r5, [r4, #264]	; 0x108
    b702:	f884 5109 	strb.w	r5, [r4, #265]	; 0x109
    b706:	f884 510a 	strb.w	r5, [r4, #266]	; 0x10a
    b70a:	f884 510b 	strb.w	r5, [r4, #267]	; 0x10b
    b70e:	f8c4 510c 	str.w	r5, [r4, #268]	; 0x10c
    b712:	f8c4 5110 	str.w	r5, [r4, #272]	; 0x110
    b716:	f8c4 c0f4 	str.w	ip, [r4, #244]	; 0xf4
}
    b71a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    b71c:	00022df0 	.word	0x00022df0
    b720:	0fe080fc 	.word	0x0fe080fc

0000b724 <_ZN9ClearCore13ShiftRegister10InitializeEv>:

/**
    Turn on the shifter and setup the mode for SPI
**/
void ShiftRegister::Initialize() {
    b724:	b4f0      	push	{r4, r5, r6, r7}
    SET_CLOCK_SOURCE(SERCOM6_GCLK_ID_CORE, 5);
    b726:	4a64      	ldr	r2, [pc, #400]	; (b8b8 <_ZN9ClearCore13ShiftRegister10InitializeEv+0x194>)
    b728:	f8d2 3110 	ldr.w	r3, [r2, #272]	; 0x110
    b72c:	f36f 1386 	bfc	r3, #6, #1
    b730:	f8c2 3110 	str.w	r3, [r2, #272]	; 0x110
    b734:	f8d2 3110 	ldr.w	r3, [r2, #272]	; 0x110
    b738:	065d      	lsls	r5, r3, #25
    b73a:	d4fb      	bmi.n	b734 <_ZN9ClearCore13ShiftRegister10InitializeEv+0x10>
    b73c:	f8d2 3110 	ldr.w	r3, [r2, #272]	; 0x110
    b740:	495d      	ldr	r1, [pc, #372]	; (b8b8 <_ZN9ClearCore13ShiftRegister10InitializeEv+0x194>)
    b742:	2405      	movs	r4, #5
    b744:	f364 0303 	bfi	r3, r4, #0, #4
    b748:	f8c2 3110 	str.w	r3, [r2, #272]	; 0x110
    b74c:	f8d2 3110 	ldr.w	r3, [r2, #272]	; 0x110
    b750:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    b754:	f8c2 3110 	str.w	r3, [r2, #272]	; 0x110
    b758:	684b      	ldr	r3, [r1, #4]
    b75a:	f013 0314 	ands.w	r3, r3, #20
    b75e:	d1fb      	bne.n	b758 <_ZN9ClearCore13ShiftRegister10InitializeEv+0x34>
    CLOCK_ENABLE(APBDMASK, SERCOM6_);
    b760:	4d56      	ldr	r5, [pc, #344]	; (b8bc <_ZN9ClearCore13ShiftRegister10InitializeEv+0x198>)

    // Set up pins for SERCOM6 in SPI master mode and enable it to control them
    PMUX_SELECTION(SR_CLK.gpioPort, SR_CLK.gpioPin, PER_SERCOM);
    b762:	4957      	ldr	r1, [pc, #348]	; (b8c0 <_ZN9ClearCore13ShiftRegister10InitializeEv+0x19c>)
    CLOCK_ENABLE(APBDMASK, SERCOM6_);
    b764:	6a2c      	ldr	r4, [r5, #32]

    // A pointer to the SPI register to make things easier.
    SercomSpi *sercomSpi = &SERCOM6->SPI;

    // Disable SERCOM6 to switch its role
    sercomSpi->CTRLA.bit.ENABLE = 0;
    b766:	4a57      	ldr	r2, [pc, #348]	; (b8c4 <_ZN9ClearCore13ShiftRegister10InitializeEv+0x1a0>)
    CLOCK_ENABLE(APBDMASK, SERCOM6_);
    b768:	f044 0404 	orr.w	r4, r4, #4
    b76c:	622c      	str	r4, [r5, #32]
    PMUX_SELECTION(SR_CLK.gpioPort, SR_CLK.gpioPin, PER_SERCOM);
    b76e:	f891 5132 	ldrb.w	r5, [r1, #306]	; 0x132
    b772:	2402      	movs	r4, #2
    b774:	f364 1507 	bfi	r5, r4, #4, #4
    b778:	f881 5132 	strb.w	r5, [r1, #306]	; 0x132
    PMUX_ENABLE(SR_CLK.gpioPort, SR_CLK.gpioPin);
    b77c:	f891 5145 	ldrb.w	r5, [r1, #325]	; 0x145
    b780:	f045 0501 	orr.w	r5, r5, #1
    b784:	f881 5145 	strb.w	r5, [r1, #325]	; 0x145
    PMUX_SELECTION(SR_DATA.gpioPort, SR_DATA.gpioPin, PER_SERCOM);
    b788:	f891 5133 	ldrb.w	r5, [r1, #307]	; 0x133
    b78c:	f364 1507 	bfi	r5, r4, #4, #4
    b790:	f881 5133 	strb.w	r5, [r1, #307]	; 0x133
    PMUX_ENABLE(SR_DATA.gpioPort, SR_DATA.gpioPin);
    b794:	f891 5147 	ldrb.w	r5, [r1, #327]	; 0x147
    b798:	f045 0501 	orr.w	r5, r5, #1
    b79c:	f881 5147 	strb.w	r5, [r1, #327]	; 0x147
    PMUX_SELECTION(SR_DATA_RET.gpioPort, SR_DATA_RET.gpioPin, PER_SERCOM);
    b7a0:	f891 5133 	ldrb.w	r5, [r1, #307]	; 0x133
    b7a4:	f364 0503 	bfi	r5, r4, #0, #4
    b7a8:	f881 5133 	strb.w	r5, [r1, #307]	; 0x133
    PMUX_ENABLE(SR_DATA_RET.gpioPort, SR_DATA_RET.gpioPin);
    b7ac:	f891 5146 	ldrb.w	r5, [r1, #326]	; 0x146
    DATA_OUTPUT_STATE(SR_LOAD.gpioPort, 1UL << SR_LOAD.gpioPin, false);
    b7b0:	2604      	movs	r6, #4
    PMUX_ENABLE(SR_DATA_RET.gpioPort, SR_DATA_RET.gpioPin);
    b7b2:	f045 0501 	orr.w	r5, r5, #1
    b7b6:	f881 5146 	strb.w	r5, [r1, #326]	; 0x146
    DATA_OUTPUT_STATE(SR_ENn.gpioPort, 1UL << SR_ENn.gpioPin, true);
    b7ba:	f8c1 4098 	str.w	r4, [r1, #152]	; 0x98
    DATA_OUTPUT_STATE(SR_LOAD.gpioPort, 1UL << SR_LOAD.gpioPin, false);
    b7be:	f8c1 6094 	str.w	r6, [r1, #148]	; 0x94
    DATA_DIRECTION_OUTPUT(SR_ENn.gpioPort, (1UL << SR_ENn.gpioPin));
    b7c2:	f8c1 4088 	str.w	r4, [r1, #136]	; 0x88
    DATA_DIRECTION_OUTPUT(SR_LOAD.gpioPort, (1UL << SR_LOAD.gpioPin));
    b7c6:	f8c1 6088 	str.w	r6, [r1, #136]	; 0x88
    sercomSpi->CTRLA.bit.ENABLE = 0;
    b7ca:	6811      	ldr	r1, [r2, #0]
    b7cc:	f363 0141 	bfi	r1, r3, #1, #1
    b7d0:	6011      	str	r1, [r2, #0]
    SYNCBUSY_WAIT(sercomSpi, SERCOM_SPI_SYNCBUSY_ENABLE);
    b7d2:	69d3      	ldr	r3, [r2, #28]
    b7d4:	f013 0302 	ands.w	r3, r3, #2
    b7d8:	d1fb      	bne.n	b7d2 <_ZN9ClearCore13ShiftRegister10InitializeEv+0xae>

    // Sets SERCOM6 to SPI Master mode
    sercomSpi->CTRLA.reg |= SERCOM_SPI_CTRLA_MODE(0x3);
    b7da:	6814      	ldr	r4, [r2, #0]
    // Sets the baud rate to GCLK1 frequency
    sercomSpi->BAUD.reg = 0;

    // Enables SERCOM6 and wait for core sync
    sercomSpi->CTRLA.bit.ENABLE = 1;
    SYNCBUSY_WAIT(sercomSpi, SERCOM_SPI_SYNCBUSY_ENABLE);
    b7dc:	4939      	ldr	r1, [pc, #228]	; (b8c4 <_ZN9ClearCore13ShiftRegister10InitializeEv+0x1a0>)
    sercomSpi->CTRLA.reg |= SERCOM_SPI_CTRLA_MODE(0x3);
    b7de:	f044 040c 	orr.w	r4, r4, #12
    b7e2:	6014      	str	r4, [r2, #0]
                            SERCOM_SPI_CTRLA_DORD;
    b7e4:	6814      	ldr	r4, [r2, #0]
    b7e6:	f044 4480 	orr.w	r4, r4, #1073741824	; 0x40000000
    b7ea:	f444 1408 	orr.w	r4, r4, #2228224	; 0x220000
    sercomSpi->CTRLA.reg |= SERCOM_SPI_CTRLA_DOPO(0x2) |
    b7ee:	6014      	str	r4, [r2, #0]
    sercomSpi->CTRLB.bit.RXEN = 1;
    b7f0:	6854      	ldr	r4, [r2, #4]
    b7f2:	f444 3400 	orr.w	r4, r4, #131072	; 0x20000
    b7f6:	6054      	str	r4, [r2, #4]
    sercomSpi->CTRLC.reg |= SERCOM_SPI_CTRLC_DATA32B;
    b7f8:	6894      	ldr	r4, [r2, #8]
    b7fa:	f044 7480 	orr.w	r4, r4, #16777216	; 0x1000000
    b7fe:	6094      	str	r4, [r2, #8]
    sercomSpi->BAUD.reg = 0;
    b800:	7313      	strb	r3, [r2, #12]
    sercomSpi->CTRLA.bit.ENABLE = 1;
    b802:	6813      	ldr	r3, [r2, #0]
    b804:	f043 0302 	orr.w	r3, r3, #2
    b808:	6013      	str	r3, [r2, #0]
    SYNCBUSY_WAIT(sercomSpi, SERCOM_SPI_SYNCBUSY_ENABLE);
    b80a:	69cb      	ldr	r3, [r1, #28]
    b80c:	079c      	lsls	r4, r3, #30
    b80e:	d4fc      	bmi.n	b80a <_ZN9ClearCore13ShiftRegister10InitializeEv+0xe6>

    // Send the initial values to the chain
    sercomSpi->DATA.reg = atomic_load_n(&m_patternOutputs[LED_BLINK_IO_SET])
    b810:	f8d0 30f4 	ldr.w	r3, [r0, #244]	; 0xf4
    b814:	f3bf 8f5b 	dmb	ish
                          ^ m_shiftInversions.reg;
    b818:	f8d0 40e0 	ldr.w	r4, [r0, #224]	; 0xe0
    Send();
}

void ShiftRegister::Send() {
    // Wait for TX-complete interrupt flag in case we get here too quickly
    while (!(SERCOM6->SPI.INTFLAG.bit.TXC)) {
    b81c:	4a29      	ldr	r2, [pc, #164]	; (b8c4 <_ZN9ClearCore13ShiftRegister10InitializeEv+0x1a0>)
                          ^ m_shiftInversions.reg;
    b81e:	4063      	eors	r3, r4
    sercomSpi->DATA.reg = atomic_load_n(&m_patternOutputs[LED_BLINK_IO_SET])
    b820:	628b      	str	r3, [r1, #40]	; 0x28
    while (!(SERCOM6->SPI.INTFLAG.bit.TXC)) {
    b822:	7e13      	ldrb	r3, [r2, #24]
    b824:	0799      	lsls	r1, r3, #30
    b826:	d5fc      	bpl.n	b822 <_ZN9ClearCore13ShiftRegister10InitializeEv+0xfe>
        continue;
    }
    uint32_t output;

    // Strobe the output with minimum pulse width to display last transfer
    DATA_OUTPUT_STATE(SR_LOAD.gpioPort, 1UL << SR_LOAD.gpioPin, true);
    b828:	4b25      	ldr	r3, [pc, #148]	; (b8c0 <_ZN9ClearCore13ShiftRegister10InitializeEv+0x19c>)
    DATA_OUTPUT_STATE(SR_LOAD.gpioPort, 1UL << SR_LOAD.gpioPin, false);
    while (!(SERCOM6->SPI.INTFLAG.bit.RXC)) {
    b82a:	4a26      	ldr	r2, [pc, #152]	; (b8c4 <_ZN9ClearCore13ShiftRegister10InitializeEv+0x1a0>)
    DATA_OUTPUT_STATE(SR_LOAD.gpioPort, 1UL << SR_LOAD.gpioPin, true);
    b82c:	2104      	movs	r1, #4
    b82e:	f8c3 1098 	str.w	r1, [r3, #152]	; 0x98
    DATA_OUTPUT_STATE(SR_LOAD.gpioPort, 1UL << SR_LOAD.gpioPin, false);
    b832:	f8c3 1094 	str.w	r1, [r3, #148]	; 0x94
    while (!(SERCOM6->SPI.INTFLAG.bit.RXC)) {
    b836:	7e13      	ldrb	r3, [r2, #24]
    b838:	075b      	lsls	r3, r3, #29
    b83a:	d5fc      	bpl.n	b836 <_ZN9ClearCore13ShiftRegister10InitializeEv+0x112>
        continue;
    }
    m_latchedOutput = SERCOM6->SPI.DATA.reg ^ m_shiftInversions.reg;
    b83c:	6a93      	ldr	r3, [r2, #40]	; 0x28
    m_lastOutput = m_pendingOutput;

    if (m_useAltOutput) {
    b83e:	f890 210b 	ldrb.w	r2, [r0, #267]	; 0x10b
    m_lastOutput = m_pendingOutput;
    b842:	f8d0 110c 	ldr.w	r1, [r0, #268]	; 0x10c
    b846:	f8c0 1110 	str.w	r1, [r0, #272]	; 0x110
    m_latchedOutput = SERCOM6->SPI.DATA.reg ^ m_shiftInversions.reg;
    b84a:	4063      	eors	r3, r4
    b84c:	f8c0 3114 	str.w	r3, [r0, #276]	; 0x114
    if (m_useAltOutput) {
    b850:	bb7a      	cbnz	r2, b8b2 <_ZN9ClearCore13ShiftRegister10InitializeEv+0x18e>
        output = m_altOutput;
    }
    else {
        // Start the output with the low priority mask
        output = m_patternOutputs[LED_BLINK_IO_SET];
    b852:	f8d0 30f4 	ldr.w	r3, [r0, #244]	; 0xf4
    b856:	f8d0 10f8 	ldr.w	r1, [r0, #248]	; 0xf8
    b85a:	f8d0 70e8 	ldr.w	r7, [r0, #232]	; 0xe8
    b85e:	f8d0 50fc 	ldr.w	r5, [r0, #252]	; 0xfc
    b862:	f8d0 60ec 	ldr.w	r6, [r0, #236]	; 0xec
    b866:	f8d0 2100 	ldr.w	r2, [r0, #256]	; 0x100
    b86a:	4059      	eors	r1, r3
    b86c:	4039      	ands	r1, r7
        for (uint32_t i = LED_BLINK_IO_SET + 1; i < LED_BLINK_CODE_MAX; i++) {
            // AND in the inverse of the mask to clear out the lower priority
            // patterns.
            output &= ~m_patternMasks[i];
            // Set the output bits to the output of the pattern output.
            output |= m_patternOutputs[i] & m_patternMasks[i];
    b86e:	404b      	eors	r3, r1
    b870:	ea83 0105 	eor.w	r1, r3, r5
    b874:	4031      	ands	r1, r6
    b876:	4059      	eors	r1, r3
    b878:	f8d0 30f0 	ldr.w	r3, [r0, #240]	; 0xf0
        }

        if (m_blinkCodeActive) {
    b87c:	f890 5109 	ldrb.w	r5, [r0, #265]	; 0x109
    b880:	404a      	eors	r2, r1
    b882:	4013      	ands	r3, r2
            output |= m_patternOutputs[i] & m_patternMasks[i];
    b884:	404b      	eors	r3, r1
        if (m_blinkCodeActive) {
    b886:	b135      	cbz	r5, b896 <_ZN9ClearCore13ShiftRegister10InitializeEv+0x172>
            output &= ~SR_UNDERGLOW_MASK;
            if (m_blinkCodeState) {
    b888:	f890 210a 	ldrb.w	r2, [r0, #266]	; 0x10a
            output &= ~SR_UNDERGLOW_MASK;
    b88c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
            if (m_blinkCodeState) {
    b890:	b10a      	cbz	r2, b896 <_ZN9ClearCore13ShiftRegister10InitializeEv+0x172>
                output |= SR_UNDERGLOW_MASK;
    b892:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
    m_pendingOutput = output;

    // Apply inversion
    output ^= m_shiftInversions.reg;

    SERCOM6->SPI.DATA.reg = output;
    b896:	4d0b      	ldr	r5, [pc, #44]	; (b8c4 <_ZN9ClearCore13ShiftRegister10InitializeEv+0x1a0>)
    DATA_OUTPUT_STATE(SR_ENn.gpioPort, 1UL << SR_ENn.gpioPin, false);
    b898:	4909      	ldr	r1, [pc, #36]	; (b8c0 <_ZN9ClearCore13ShiftRegister10InitializeEv+0x19c>)
    m_pendingOutput = output;
    b89a:	f8c0 310c 	str.w	r3, [r0, #268]	; 0x10c
    output ^= m_shiftInversions.reg;
    b89e:	4063      	eors	r3, r4
    DATA_OUTPUT_STATE(SR_ENn.gpioPort, 1UL << SR_ENn.gpioPin, false);
    b8a0:	2402      	movs	r4, #2
    SERCOM6->SPI.DATA.reg = output;
    b8a2:	62ab      	str	r3, [r5, #40]	; 0x28
    m_initialized = true;
    b8a4:	2201      	movs	r2, #1
    DATA_OUTPUT_STATE(SR_ENn.gpioPort, 1UL << SR_ENn.gpioPin, false);
    b8a6:	f8c1 4094 	str.w	r4, [r1, #148]	; 0x94
}
    b8aa:	bcf0      	pop	{r4, r5, r6, r7}
    m_initialized = true;
    b8ac:	f880 2108 	strb.w	r2, [r0, #264]	; 0x108
}
    b8b0:	4770      	bx	lr
        output = m_altOutput;
    b8b2:	f8d0 3104 	ldr.w	r3, [r0, #260]	; 0x104
    b8b6:	e7ee      	b.n	b896 <_ZN9ClearCore13ShiftRegister10InitializeEv+0x172>
    b8b8:	40001c00 	.word	0x40001c00
    b8bc:	40000800 	.word	0x40000800
    b8c0:	41008000 	.word	0x41008000
    b8c4:	43000800 	.word	0x43000800

0000b8c8 <_ZN9ClearCore13ShiftRegister6UpdateEv>:
    if (!m_initialized) {
    b8c8:	f890 3108 	ldrb.w	r3, [r0, #264]	; 0x108
    b8cc:	2b00      	cmp	r3, #0
    b8ce:	d078      	beq.n	b9c2 <_ZN9ClearCore13ShiftRegister6UpdateEv+0xfa>
            if (!count--) {
    b8d0:	6d83      	ldr	r3, [r0, #88]	; 0x58
    b8d2:	1e5a      	subs	r2, r3, #1
void ShiftRegister::Update() {
    b8d4:	b4f0      	push	{r4, r5, r6, r7}
    b8d6:	6582      	str	r2, [r0, #88]	; 0x58
    b8d8:	b90b      	cbnz	r3, b8de <_ZN9ClearCore13ShiftRegister6UpdateEv+0x16>
                count = period;
    b8da:	6d02      	ldr	r2, [r0, #80]	; 0x50
    b8dc:	6582      	str	r2, [r0, #88]	; 0x58
            return returnTable[count < cc];
    b8de:	6d41      	ldr	r1, [r0, #84]	; 0x54
            if (++m_count >= UINT8_MAX >> 2) {
    b8e0:	f890 3066 	ldrb.w	r3, [r0, #102]	; 0x66
            return returnTable[count < cc];
    b8e4:	428a      	cmp	r2, r1
    b8e6:	bf34      	ite	cc
    b8e8:	220c      	movcc	r2, #12
    b8ea:	2208      	movcs	r2, #8
    b8ec:	4402      	add	r2, r0
            if (++m_count >= UINT8_MAX >> 2) {
    b8ee:	3301      	adds	r3, #1
    b8f0:	b2db      	uxtb	r3, r3
            return returnTable[count < cc];
    b8f2:	6d52      	ldr	r2, [r2, #84]	; 0x54
    m_patternOutputs[LED_BLINK_FAST_STROBE]  = m_fastCounter.Update();
    b8f4:	f8c0 2100 	str.w	r2, [r0, #256]	; 0x100
            if (++m_count >= UINT8_MAX >> 2) {
    b8f8:	2b3e      	cmp	r3, #62	; 0x3e
    b8fa:	f880 3066 	strb.w	r3, [r0, #102]	; 0x66
    b8fe:	d961      	bls.n	b9c4 <_ZN9ClearCore13ShiftRegister6UpdateEv+0xfc>
                if (fadingIn) {
    b900:	f890 3068 	ldrb.w	r3, [r0, #104]	; 0x68
                    if (++m_compare >= m_maxValue) {
    b904:	f890 1067 	ldrb.w	r1, [r0, #103]	; 0x67
                m_count = 0;
    b908:	2400      	movs	r4, #0
    b90a:	f880 4066 	strb.w	r4, [r0, #102]	; 0x66
                if (fadingIn) {
    b90e:	2b00      	cmp	r3, #0
    b910:	f000 817a 	beq.w	bc08 <_ZN9ClearCore13ShiftRegister6UpdateEv+0x340>
                    if (++m_compare >= m_maxValue) {
    b914:	f890 3064 	ldrb.w	r3, [r0, #100]	; 0x64
    b918:	3101      	adds	r1, #1
    b91a:	b2c9      	uxtb	r1, r1
    b91c:	4299      	cmp	r1, r3
    b91e:	460a      	mov	r2, r1
    b920:	f880 1067 	strb.w	r1, [r0, #103]	; 0x67
    b924:	f2c0 817e 	blt.w	bc24 <_ZN9ClearCore13ShiftRegister6UpdateEv+0x35c>
                        fadingIn = false;
    b928:	f880 4068 	strb.w	r4, [r0, #104]	; 0x68
    b92c:	4623      	mov	r3, r4
    b92e:	e04c      	b.n	b9ca <_ZN9ClearCore13ShiftRegister6UpdateEv+0x102>
                m_count = UINT8_MAX - 1;
    b930:	23fe      	movs	r3, #254	; 0xfe
                return 0;
    b932:	460a      	mov	r2, r1
                m_count = UINT8_MAX - 1;
    b934:	f880 307c 	strb.w	r3, [r0, #124]	; 0x7c
    while (!(SERCOM6->SPI.INTFLAG.bit.TXC)) {
    b938:	49b1      	ldr	r1, [pc, #708]	; (bc00 <_ZN9ClearCore13ShiftRegister6UpdateEv+0x338>)
    m_patternOutputs[LED_BLINK_FADE]         = m_fadeCounter.Update();
    b93a:	f8c0 20f8 	str.w	r2, [r0, #248]	; 0xf8
    while (!(SERCOM6->SPI.INTFLAG.bit.TXC)) {
    b93e:	7e0b      	ldrb	r3, [r1, #24]
    b940:	079c      	lsls	r4, r3, #30
    b942:	d5fc      	bpl.n	b93e <_ZN9ClearCore13ShiftRegister6UpdateEv+0x76>
    DATA_OUTPUT_STATE(SR_LOAD.gpioPort, 1UL << SR_LOAD.gpioPin, true);
    b944:	4baf      	ldr	r3, [pc, #700]	; (bc04 <_ZN9ClearCore13ShiftRegister6UpdateEv+0x33c>)
    while (!(SERCOM6->SPI.INTFLAG.bit.RXC)) {
    b946:	49ae      	ldr	r1, [pc, #696]	; (bc00 <_ZN9ClearCore13ShiftRegister6UpdateEv+0x338>)
    DATA_OUTPUT_STATE(SR_LOAD.gpioPort, 1UL << SR_LOAD.gpioPin, true);
    b948:	2404      	movs	r4, #4
    b94a:	f8c3 4098 	str.w	r4, [r3, #152]	; 0x98
    DATA_OUTPUT_STATE(SR_LOAD.gpioPort, 1UL << SR_LOAD.gpioPin, false);
    b94e:	f8c3 4094 	str.w	r4, [r3, #148]	; 0x94
    while (!(SERCOM6->SPI.INTFLAG.bit.RXC)) {
    b952:	7e0b      	ldrb	r3, [r1, #24]
    b954:	075b      	lsls	r3, r3, #29
    b956:	d5fc      	bpl.n	b952 <_ZN9ClearCore13ShiftRegister6UpdateEv+0x8a>
    m_latchedOutput = SERCOM6->SPI.DATA.reg ^ m_shiftInversions.reg;
    b958:	6a8b      	ldr	r3, [r1, #40]	; 0x28
    b95a:	f8d0 60e0 	ldr.w	r6, [r0, #224]	; 0xe0
    if (m_useAltOutput) {
    b95e:	f890 110b 	ldrb.w	r1, [r0, #267]	; 0x10b
    m_lastOutput = m_pendingOutput;
    b962:	f8d0 410c 	ldr.w	r4, [r0, #268]	; 0x10c
    b966:	f8c0 4110 	str.w	r4, [r0, #272]	; 0x110
    m_latchedOutput = SERCOM6->SPI.DATA.reg ^ m_shiftInversions.reg;
    b96a:	4073      	eors	r3, r6
    b96c:	f8c0 3114 	str.w	r3, [r0, #276]	; 0x114
    if (m_useAltOutput) {
    b970:	2900      	cmp	r1, #0
    b972:	f040 80d4 	bne.w	bb1e <_ZN9ClearCore13ShiftRegister6UpdateEv+0x256>
        output = m_patternOutputs[LED_BLINK_IO_SET];
    b976:	f8d0 30f4 	ldr.w	r3, [r0, #244]	; 0xf4
    b97a:	f8d0 70e8 	ldr.w	r7, [r0, #232]	; 0xe8
    b97e:	f8d0 40fc 	ldr.w	r4, [r0, #252]	; 0xfc
    b982:	f8d0 50ec 	ldr.w	r5, [r0, #236]	; 0xec
    b986:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
    b98a:	405a      	eors	r2, r3
    b98c:	403a      	ands	r2, r7
            output |= m_patternOutputs[i] & m_patternMasks[i];
    b98e:	4053      	eors	r3, r2
    b990:	ea83 0204 	eor.w	r2, r3, r4
    b994:	402a      	ands	r2, r5
    b996:	405a      	eors	r2, r3
    b998:	f8d0 30f0 	ldr.w	r3, [r0, #240]	; 0xf0
        if (m_blinkCodeActive) {
    b99c:	f890 4109 	ldrb.w	r4, [r0, #265]	; 0x109
    b9a0:	4051      	eors	r1, r2
    b9a2:	400b      	ands	r3, r1
            output |= m_patternOutputs[i] & m_patternMasks[i];
    b9a4:	4053      	eors	r3, r2
        if (m_blinkCodeActive) {
    b9a6:	b134      	cbz	r4, b9b6 <_ZN9ClearCore13ShiftRegister6UpdateEv+0xee>
            if (m_blinkCodeState) {
    b9a8:	f890 210a 	ldrb.w	r2, [r0, #266]	; 0x10a
            output &= ~SR_UNDERGLOW_MASK;
    b9ac:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
            if (m_blinkCodeState) {
    b9b0:	b10a      	cbz	r2, b9b6 <_ZN9ClearCore13ShiftRegister6UpdateEv+0xee>
                output |= SR_UNDERGLOW_MASK;
    b9b2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
    SERCOM6->SPI.DATA.reg = output;
    b9b6:	4a92      	ldr	r2, [pc, #584]	; (bc00 <_ZN9ClearCore13ShiftRegister6UpdateEv+0x338>)
    m_pendingOutput = output;
    b9b8:	f8c0 310c 	str.w	r3, [r0, #268]	; 0x10c
    output ^= m_shiftInversions.reg;
    b9bc:	4073      	eors	r3, r6
    SERCOM6->SPI.DATA.reg = output;
    b9be:	6293      	str	r3, [r2, #40]	; 0x28
}
    b9c0:	bcf0      	pop	{r4, r5, r6, r7}
    b9c2:	4770      	bx	lr
    b9c4:	f890 2067 	ldrb.w	r2, [r0, #103]	; 0x67
    b9c8:	009b      	lsls	r3, r3, #2
            return returnTable[m_count << 2 < m_compare];
    b9ca:	4293      	cmp	r3, r2
    b9cc:	bfb4      	ite	lt
    b9ce:	230c      	movlt	r3, #12
    b9d0:	2308      	movge	r3, #8
    b9d2:	4403      	add	r3, r0
            if (!m_activeMask) {
    b9d4:	f8b0 1074 	ldrh.w	r1, [r0, #116]	; 0x74
            return returnTable[m_count << 2 < m_compare];
    b9d8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
    m_patternOutputs[LED_BLINK_BREATHING]    = m_breathingCounter.Update();
    b9da:	f8c0 30fc 	str.w	r3, [r0, #252]	; 0xfc
            if (!m_activeMask) {
    b9de:	2900      	cmp	r1, #0
    b9e0:	d0a6      	beq.n	b930 <_ZN9ClearCore13ShiftRegister6UpdateEv+0x68>
            if (++m_count > UINT8_MAX >> 2) {
    b9e2:	f890 307c 	ldrb.w	r3, [r0, #124]	; 0x7c
            uint32_t retVal = m_lastOutput;
    b9e6:	6f82      	ldr	r2, [r0, #120]	; 0x78
            if (++m_count > UINT8_MAX >> 2) {
    b9e8:	3301      	adds	r3, #1
    b9ea:	b2db      	uxtb	r3, r3
    b9ec:	2b3f      	cmp	r3, #63	; 0x3f
    b9ee:	f880 307c 	strb.w	r3, [r0, #124]	; 0x7c
    b9f2:	f200 8097 	bhi.w	bb24 <_ZN9ClearCore13ShiftRegister6UpdateEv+0x25c>
                    if ((retVal & m_analogMasks[i]) &&
    b9f6:	f8d0 10a0 	ldr.w	r1, [r0, #160]	; 0xa0
                uint8_t compare = m_count << 2;
    b9fa:	009b      	lsls	r3, r3, #2
                    if ((retVal & m_analogMasks[i]) &&
    b9fc:	420a      	tst	r2, r1
                uint8_t compare = m_count << 2;
    b9fe:	b2db      	uxtb	r3, r3
                    if ((retVal & m_analogMasks[i]) &&
    ba00:	d004      	beq.n	ba0c <_ZN9ClearCore13ShiftRegister6UpdateEv+0x144>
                            (m_values[i] < compare)) {
    ba02:	f890 407d 	ldrb.w	r4, [r0, #125]	; 0x7d
                    if ((retVal & m_analogMasks[i]) &&
    ba06:	429c      	cmp	r4, r3
                        retVal &= ~m_analogMasks[i];
    ba08:	bfb8      	it	lt
    ba0a:	438a      	biclt	r2, r1
                    if ((retVal & m_analogMasks[i]) &&
    ba0c:	f8d0 10a4 	ldr.w	r1, [r0, #164]	; 0xa4
    ba10:	420a      	tst	r2, r1
    ba12:	d004      	beq.n	ba1e <_ZN9ClearCore13ShiftRegister6UpdateEv+0x156>
                            (m_values[i] < compare)) {
    ba14:	f890 407e 	ldrb.w	r4, [r0, #126]	; 0x7e
                    if ((retVal & m_analogMasks[i]) &&
    ba18:	429c      	cmp	r4, r3
                        retVal &= ~m_analogMasks[i];
    ba1a:	bfb8      	it	lt
    ba1c:	438a      	biclt	r2, r1
                    if ((retVal & m_analogMasks[i]) &&
    ba1e:	f8d0 10a8 	ldr.w	r1, [r0, #168]	; 0xa8
    ba22:	420a      	tst	r2, r1
    ba24:	d004      	beq.n	ba30 <_ZN9ClearCore13ShiftRegister6UpdateEv+0x168>
                            (m_values[i] < compare)) {
    ba26:	f890 407f 	ldrb.w	r4, [r0, #127]	; 0x7f
                    if ((retVal & m_analogMasks[i]) &&
    ba2a:	429c      	cmp	r4, r3
                        retVal &= ~m_analogMasks[i];
    ba2c:	bfb8      	it	lt
    ba2e:	438a      	biclt	r2, r1
                    if ((retVal & m_analogMasks[i]) &&
    ba30:	f8d0 10ac 	ldr.w	r1, [r0, #172]	; 0xac
    ba34:	420a      	tst	r2, r1
    ba36:	d004      	beq.n	ba42 <_ZN9ClearCore13ShiftRegister6UpdateEv+0x17a>
                            (m_values[i] < compare)) {
    ba38:	f890 4080 	ldrb.w	r4, [r0, #128]	; 0x80
                    if ((retVal & m_analogMasks[i]) &&
    ba3c:	429c      	cmp	r4, r3
                        retVal &= ~m_analogMasks[i];
    ba3e:	bfb8      	it	lt
    ba40:	438a      	biclt	r2, r1
                    if ((retVal & m_analogMasks[i]) &&
    ba42:	f8d0 10b0 	ldr.w	r1, [r0, #176]	; 0xb0
    ba46:	420a      	tst	r2, r1
    ba48:	d004      	beq.n	ba54 <_ZN9ClearCore13ShiftRegister6UpdateEv+0x18c>
                            (m_values[i] < compare)) {
    ba4a:	f890 4081 	ldrb.w	r4, [r0, #129]	; 0x81
                    if ((retVal & m_analogMasks[i]) &&
    ba4e:	429c      	cmp	r4, r3
                        retVal &= ~m_analogMasks[i];
    ba50:	bfb8      	it	lt
    ba52:	438a      	biclt	r2, r1
                    if ((retVal & m_analogMasks[i]) &&
    ba54:	f8d0 10b4 	ldr.w	r1, [r0, #180]	; 0xb4
    ba58:	420a      	tst	r2, r1
    ba5a:	d004      	beq.n	ba66 <_ZN9ClearCore13ShiftRegister6UpdateEv+0x19e>
                            (m_values[i] < compare)) {
    ba5c:	f890 4082 	ldrb.w	r4, [r0, #130]	; 0x82
                    if ((retVal & m_analogMasks[i]) &&
    ba60:	429c      	cmp	r4, r3
                        retVal &= ~m_analogMasks[i];
    ba62:	bfb8      	it	lt
    ba64:	438a      	biclt	r2, r1
                    if ((retVal & m_analogMasks[i]) &&
    ba66:	f8d0 10b8 	ldr.w	r1, [r0, #184]	; 0xb8
    ba6a:	420a      	tst	r2, r1
    ba6c:	d004      	beq.n	ba78 <_ZN9ClearCore13ShiftRegister6UpdateEv+0x1b0>
                            (m_values[i] < compare)) {
    ba6e:	f890 4083 	ldrb.w	r4, [r0, #131]	; 0x83
                    if ((retVal & m_analogMasks[i]) &&
    ba72:	429c      	cmp	r4, r3
                        retVal &= ~m_analogMasks[i];
    ba74:	bfb8      	it	lt
    ba76:	438a      	biclt	r2, r1
                    if ((retVal & m_analogMasks[i]) &&
    ba78:	f8d0 10bc 	ldr.w	r1, [r0, #188]	; 0xbc
    ba7c:	420a      	tst	r2, r1
    ba7e:	d004      	beq.n	ba8a <_ZN9ClearCore13ShiftRegister6UpdateEv+0x1c2>
                            (m_values[i] < compare)) {
    ba80:	f890 4084 	ldrb.w	r4, [r0, #132]	; 0x84
                    if ((retVal & m_analogMasks[i]) &&
    ba84:	429c      	cmp	r4, r3
                        retVal &= ~m_analogMasks[i];
    ba86:	bfb8      	it	lt
    ba88:	438a      	biclt	r2, r1
                    if ((retVal & m_analogMasks[i]) &&
    ba8a:	f8d0 10c0 	ldr.w	r1, [r0, #192]	; 0xc0
    ba8e:	420a      	tst	r2, r1
    ba90:	d004      	beq.n	ba9c <_ZN9ClearCore13ShiftRegister6UpdateEv+0x1d4>
                            (m_values[i] < compare)) {
    ba92:	f890 4085 	ldrb.w	r4, [r0, #133]	; 0x85
                    if ((retVal & m_analogMasks[i]) &&
    ba96:	429c      	cmp	r4, r3
                        retVal &= ~m_analogMasks[i];
    ba98:	bfb8      	it	lt
    ba9a:	438a      	biclt	r2, r1
                    if ((retVal & m_analogMasks[i]) &&
    ba9c:	f8d0 10c4 	ldr.w	r1, [r0, #196]	; 0xc4
    baa0:	420a      	tst	r2, r1
    baa2:	d004      	beq.n	baae <_ZN9ClearCore13ShiftRegister6UpdateEv+0x1e6>
                            (m_values[i] < compare)) {
    baa4:	f890 4086 	ldrb.w	r4, [r0, #134]	; 0x86
                    if ((retVal & m_analogMasks[i]) &&
    baa8:	429c      	cmp	r4, r3
                        retVal &= ~m_analogMasks[i];
    baaa:	bfb8      	it	lt
    baac:	438a      	biclt	r2, r1
                    if ((retVal & m_analogMasks[i]) &&
    baae:	f8d0 10c8 	ldr.w	r1, [r0, #200]	; 0xc8
    bab2:	420a      	tst	r2, r1
    bab4:	d004      	beq.n	bac0 <_ZN9ClearCore13ShiftRegister6UpdateEv+0x1f8>
                            (m_values[i] < compare)) {
    bab6:	f890 4087 	ldrb.w	r4, [r0, #135]	; 0x87
                    if ((retVal & m_analogMasks[i]) &&
    baba:	429c      	cmp	r4, r3
                        retVal &= ~m_analogMasks[i];
    babc:	bfb8      	it	lt
    babe:	438a      	biclt	r2, r1
                    if ((retVal & m_analogMasks[i]) &&
    bac0:	f8d0 10cc 	ldr.w	r1, [r0, #204]	; 0xcc
    bac4:	420a      	tst	r2, r1
    bac6:	d004      	beq.n	bad2 <_ZN9ClearCore13ShiftRegister6UpdateEv+0x20a>
                            (m_values[i] < compare)) {
    bac8:	f890 4088 	ldrb.w	r4, [r0, #136]	; 0x88
                    if ((retVal & m_analogMasks[i]) &&
    bacc:	429c      	cmp	r4, r3
                        retVal &= ~m_analogMasks[i];
    bace:	bfb8      	it	lt
    bad0:	438a      	biclt	r2, r1
                    if ((retVal & m_analogMasks[i]) &&
    bad2:	f8d0 10d0 	ldr.w	r1, [r0, #208]	; 0xd0
    bad6:	420a      	tst	r2, r1
    bad8:	d004      	beq.n	bae4 <_ZN9ClearCore13ShiftRegister6UpdateEv+0x21c>
                            (m_values[i] < compare)) {
    bada:	f890 4089 	ldrb.w	r4, [r0, #137]	; 0x89
                    if ((retVal & m_analogMasks[i]) &&
    bade:	429c      	cmp	r4, r3
                        retVal &= ~m_analogMasks[i];
    bae0:	bfb8      	it	lt
    bae2:	438a      	biclt	r2, r1
                    if ((retVal & m_analogMasks[i]) &&
    bae4:	f8d0 10d4 	ldr.w	r1, [r0, #212]	; 0xd4
    bae8:	420a      	tst	r2, r1
    baea:	d004      	beq.n	baf6 <_ZN9ClearCore13ShiftRegister6UpdateEv+0x22e>
                            (m_values[i] < compare)) {
    baec:	f890 408a 	ldrb.w	r4, [r0, #138]	; 0x8a
                    if ((retVal & m_analogMasks[i]) &&
    baf0:	429c      	cmp	r4, r3
                        retVal &= ~m_analogMasks[i];
    baf2:	bfb8      	it	lt
    baf4:	438a      	biclt	r2, r1
                    if ((retVal & m_analogMasks[i]) &&
    baf6:	f8d0 10d8 	ldr.w	r1, [r0, #216]	; 0xd8
    bafa:	420a      	tst	r2, r1
    bafc:	d004      	beq.n	bb08 <_ZN9ClearCore13ShiftRegister6UpdateEv+0x240>
                            (m_values[i] < compare)) {
    bafe:	f890 408b 	ldrb.w	r4, [r0, #139]	; 0x8b
                    if ((retVal & m_analogMasks[i]) &&
    bb02:	429c      	cmp	r4, r3
                        retVal &= ~m_analogMasks[i];
    bb04:	bfb8      	it	lt
    bb06:	438a      	biclt	r2, r1
                    if ((retVal & m_analogMasks[i]) &&
    bb08:	f8d0 10dc 	ldr.w	r1, [r0, #220]	; 0xdc
    bb0c:	4211      	tst	r1, r2
    bb0e:	d004      	beq.n	bb1a <_ZN9ClearCore13ShiftRegister6UpdateEv+0x252>
                            (m_values[i] < compare)) {
    bb10:	f890 408c 	ldrb.w	r4, [r0, #140]	; 0x8c
                    if ((retVal & m_analogMasks[i]) &&
    bb14:	429c      	cmp	r4, r3
                        retVal &= ~m_analogMasks[i];
    bb16:	bfb8      	it	lt
    bb18:	438a      	biclt	r2, r1
            return m_lastOutput = retVal;
    bb1a:	6782      	str	r2, [r0, #120]	; 0x78
    bb1c:	e70c      	b.n	b938 <_ZN9ClearCore13ShiftRegister6UpdateEv+0x70>
        output = m_altOutput;
    bb1e:	f8d0 3104 	ldr.w	r3, [r0, #260]	; 0x104
    bb22:	e748      	b.n	b9b6 <_ZN9ClearCore13ShiftRegister6UpdateEv+0xee>
                m_count = 0;
    bb24:	2300      	movs	r3, #0
                    if (m_activeMask & (1 << i) && m_valuesBuf[i]) {
    bb26:	f011 0201 	ands.w	r2, r1, #1
                m_count = 0;
    bb2a:	f880 307c 	strb.w	r3, [r0, #124]	; 0x7c
                    if (m_activeMask & (1 << i) && m_valuesBuf[i]) {
    bb2e:	d004      	beq.n	bb3a <_ZN9ClearCore13ShiftRegister6UpdateEv+0x272>
    bb30:	f890 208d 	ldrb.w	r2, [r0, #141]	; 0x8d
    bb34:	2a00      	cmp	r2, #0
    bb36:	f040 80cb 	bne.w	bcd0 <_ZN9ClearCore13ShiftRegister6UpdateEv+0x408>
    bb3a:	078b      	lsls	r3, r1, #30
    bb3c:	d504      	bpl.n	bb48 <_ZN9ClearCore13ShiftRegister6UpdateEv+0x280>
    bb3e:	f890 308e 	ldrb.w	r3, [r0, #142]	; 0x8e
    bb42:	2b00      	cmp	r3, #0
    bb44:	f040 80be 	bne.w	bcc4 <_ZN9ClearCore13ShiftRegister6UpdateEv+0x3fc>
    bb48:	074f      	lsls	r7, r1, #29
    bb4a:	d504      	bpl.n	bb56 <_ZN9ClearCore13ShiftRegister6UpdateEv+0x28e>
    bb4c:	f890 308f 	ldrb.w	r3, [r0, #143]	; 0x8f
    bb50:	2b00      	cmp	r3, #0
    bb52:	f040 80b1 	bne.w	bcb8 <_ZN9ClearCore13ShiftRegister6UpdateEv+0x3f0>
    bb56:	070e      	lsls	r6, r1, #28
    bb58:	d504      	bpl.n	bb64 <_ZN9ClearCore13ShiftRegister6UpdateEv+0x29c>
    bb5a:	f890 3090 	ldrb.w	r3, [r0, #144]	; 0x90
    bb5e:	2b00      	cmp	r3, #0
    bb60:	f040 80a4 	bne.w	bcac <_ZN9ClearCore13ShiftRegister6UpdateEv+0x3e4>
    bb64:	06cd      	lsls	r5, r1, #27
    bb66:	d504      	bpl.n	bb72 <_ZN9ClearCore13ShiftRegister6UpdateEv+0x2aa>
    bb68:	f890 3091 	ldrb.w	r3, [r0, #145]	; 0x91
    bb6c:	2b00      	cmp	r3, #0
    bb6e:	f040 8097 	bne.w	bca0 <_ZN9ClearCore13ShiftRegister6UpdateEv+0x3d8>
    bb72:	068c      	lsls	r4, r1, #26
    bb74:	d504      	bpl.n	bb80 <_ZN9ClearCore13ShiftRegister6UpdateEv+0x2b8>
    bb76:	f890 3092 	ldrb.w	r3, [r0, #146]	; 0x92
    bb7a:	2b00      	cmp	r3, #0
    bb7c:	f040 808a 	bne.w	bc94 <_ZN9ClearCore13ShiftRegister6UpdateEv+0x3cc>
    bb80:	064b      	lsls	r3, r1, #25
    bb82:	d503      	bpl.n	bb8c <_ZN9ClearCore13ShiftRegister6UpdateEv+0x2c4>
    bb84:	f890 3093 	ldrb.w	r3, [r0, #147]	; 0x93
    bb88:	2b00      	cmp	r3, #0
    bb8a:	d17d      	bne.n	bc88 <_ZN9ClearCore13ShiftRegister6UpdateEv+0x3c0>
    bb8c:	060f      	lsls	r7, r1, #24
    bb8e:	d503      	bpl.n	bb98 <_ZN9ClearCore13ShiftRegister6UpdateEv+0x2d0>
    bb90:	f890 3094 	ldrb.w	r3, [r0, #148]	; 0x94
    bb94:	2b00      	cmp	r3, #0
    bb96:	d171      	bne.n	bc7c <_ZN9ClearCore13ShiftRegister6UpdateEv+0x3b4>
    bb98:	05ce      	lsls	r6, r1, #23
    bb9a:	d503      	bpl.n	bba4 <_ZN9ClearCore13ShiftRegister6UpdateEv+0x2dc>
    bb9c:	f890 3095 	ldrb.w	r3, [r0, #149]	; 0x95
    bba0:	2b00      	cmp	r3, #0
    bba2:	d165      	bne.n	bc70 <_ZN9ClearCore13ShiftRegister6UpdateEv+0x3a8>
    bba4:	058d      	lsls	r5, r1, #22
    bba6:	d503      	bpl.n	bbb0 <_ZN9ClearCore13ShiftRegister6UpdateEv+0x2e8>
    bba8:	f890 3096 	ldrb.w	r3, [r0, #150]	; 0x96
    bbac:	2b00      	cmp	r3, #0
    bbae:	d159      	bne.n	bc64 <_ZN9ClearCore13ShiftRegister6UpdateEv+0x39c>
    bbb0:	054c      	lsls	r4, r1, #21
    bbb2:	d503      	bpl.n	bbbc <_ZN9ClearCore13ShiftRegister6UpdateEv+0x2f4>
    bbb4:	f890 3097 	ldrb.w	r3, [r0, #151]	; 0x97
    bbb8:	2b00      	cmp	r3, #0
    bbba:	d14d      	bne.n	bc58 <_ZN9ClearCore13ShiftRegister6UpdateEv+0x390>
    bbbc:	050b      	lsls	r3, r1, #20
    bbbe:	d503      	bpl.n	bbc8 <_ZN9ClearCore13ShiftRegister6UpdateEv+0x300>
    bbc0:	f890 3098 	ldrb.w	r3, [r0, #152]	; 0x98
    bbc4:	2b00      	cmp	r3, #0
    bbc6:	d141      	bne.n	bc4c <_ZN9ClearCore13ShiftRegister6UpdateEv+0x384>
    bbc8:	04cf      	lsls	r7, r1, #19
    bbca:	d503      	bpl.n	bbd4 <_ZN9ClearCore13ShiftRegister6UpdateEv+0x30c>
    bbcc:	f890 3099 	ldrb.w	r3, [r0, #153]	; 0x99
    bbd0:	2b00      	cmp	r3, #0
    bbd2:	d135      	bne.n	bc40 <_ZN9ClearCore13ShiftRegister6UpdateEv+0x378>
    bbd4:	048e      	lsls	r6, r1, #18
    bbd6:	d502      	bpl.n	bbde <_ZN9ClearCore13ShiftRegister6UpdateEv+0x316>
    bbd8:	f890 309a 	ldrb.w	r3, [r0, #154]	; 0x9a
    bbdc:	bb53      	cbnz	r3, bc34 <_ZN9ClearCore13ShiftRegister6UpdateEv+0x36c>
    bbde:	044d      	lsls	r5, r1, #17
    bbe0:	d502      	bpl.n	bbe8 <_ZN9ClearCore13ShiftRegister6UpdateEv+0x320>
    bbe2:	f890 309b 	ldrb.w	r3, [r0, #155]	; 0x9b
    bbe6:	b9fb      	cbnz	r3, bc28 <_ZN9ClearCore13ShiftRegister6UpdateEv+0x360>
    bbe8:	0bcb      	lsrs	r3, r1, #15
    bbea:	d096      	beq.n	bb1a <_ZN9ClearCore13ShiftRegister6UpdateEv+0x252>
    bbec:	f890 309c 	ldrb.w	r3, [r0, #156]	; 0x9c
    bbf0:	2b00      	cmp	r3, #0
    bbf2:	d092      	beq.n	bb1a <_ZN9ClearCore13ShiftRegister6UpdateEv+0x252>
                        retVal |= m_analogMasks[i];
    bbf4:	f8d0 10dc 	ldr.w	r1, [r0, #220]	; 0xdc
                        m_values[i] = m_valuesBuf[i];
    bbf8:	f880 308c 	strb.w	r3, [r0, #140]	; 0x8c
                        retVal |= m_analogMasks[i];
    bbfc:	430a      	orrs	r2, r1
    bbfe:	e78c      	b.n	bb1a <_ZN9ClearCore13ShiftRegister6UpdateEv+0x252>
    bc00:	43000800 	.word	0x43000800
    bc04:	41008000 	.word	0x41008000
                    if (--m_compare <= m_minValue) {
    bc08:	f890 4065 	ldrb.w	r4, [r0, #101]	; 0x65
    bc0c:	3901      	subs	r1, #1
    bc0e:	b2c9      	uxtb	r1, r1
    bc10:	42a1      	cmp	r1, r4
    bc12:	460a      	mov	r2, r1
    bc14:	f880 1067 	strb.w	r1, [r0, #103]	; 0x67
    bc18:	f73f aed7 	bgt.w	b9ca <_ZN9ClearCore13ShiftRegister6UpdateEv+0x102>
                        fadingIn = true;
    bc1c:	2101      	movs	r1, #1
    bc1e:	f880 1068 	strb.w	r1, [r0, #104]	; 0x68
    bc22:	e6d2      	b.n	b9ca <_ZN9ClearCore13ShiftRegister6UpdateEv+0x102>
                    if (++m_compare >= m_maxValue) {
    bc24:	4623      	mov	r3, r4
    bc26:	e6d0      	b.n	b9ca <_ZN9ClearCore13ShiftRegister6UpdateEv+0x102>
                        retVal |= m_analogMasks[i];
    bc28:	f8d0 40d8 	ldr.w	r4, [r0, #216]	; 0xd8
                        m_values[i] = m_valuesBuf[i];
    bc2c:	f880 308b 	strb.w	r3, [r0, #139]	; 0x8b
                        retVal |= m_analogMasks[i];
    bc30:	4322      	orrs	r2, r4
    bc32:	e7d9      	b.n	bbe8 <_ZN9ClearCore13ShiftRegister6UpdateEv+0x320>
    bc34:	f8d0 40d4 	ldr.w	r4, [r0, #212]	; 0xd4
                        m_values[i] = m_valuesBuf[i];
    bc38:	f880 308a 	strb.w	r3, [r0, #138]	; 0x8a
                        retVal |= m_analogMasks[i];
    bc3c:	4322      	orrs	r2, r4
    bc3e:	e7ce      	b.n	bbde <_ZN9ClearCore13ShiftRegister6UpdateEv+0x316>
    bc40:	f8d0 40d0 	ldr.w	r4, [r0, #208]	; 0xd0
                        m_values[i] = m_valuesBuf[i];
    bc44:	f880 3089 	strb.w	r3, [r0, #137]	; 0x89
                        retVal |= m_analogMasks[i];
    bc48:	4322      	orrs	r2, r4
    bc4a:	e7c3      	b.n	bbd4 <_ZN9ClearCore13ShiftRegister6UpdateEv+0x30c>
    bc4c:	f8d0 40cc 	ldr.w	r4, [r0, #204]	; 0xcc
                        m_values[i] = m_valuesBuf[i];
    bc50:	f880 3088 	strb.w	r3, [r0, #136]	; 0x88
                        retVal |= m_analogMasks[i];
    bc54:	4322      	orrs	r2, r4
    bc56:	e7b7      	b.n	bbc8 <_ZN9ClearCore13ShiftRegister6UpdateEv+0x300>
    bc58:	f8d0 40c8 	ldr.w	r4, [r0, #200]	; 0xc8
                        m_values[i] = m_valuesBuf[i];
    bc5c:	f880 3087 	strb.w	r3, [r0, #135]	; 0x87
                        retVal |= m_analogMasks[i];
    bc60:	4322      	orrs	r2, r4
    bc62:	e7ab      	b.n	bbbc <_ZN9ClearCore13ShiftRegister6UpdateEv+0x2f4>
    bc64:	f8d0 40c4 	ldr.w	r4, [r0, #196]	; 0xc4
                        m_values[i] = m_valuesBuf[i];
    bc68:	f880 3086 	strb.w	r3, [r0, #134]	; 0x86
                        retVal |= m_analogMasks[i];
    bc6c:	4322      	orrs	r2, r4
    bc6e:	e79f      	b.n	bbb0 <_ZN9ClearCore13ShiftRegister6UpdateEv+0x2e8>
    bc70:	f8d0 40c0 	ldr.w	r4, [r0, #192]	; 0xc0
                        m_values[i] = m_valuesBuf[i];
    bc74:	f880 3085 	strb.w	r3, [r0, #133]	; 0x85
                        retVal |= m_analogMasks[i];
    bc78:	4322      	orrs	r2, r4
    bc7a:	e793      	b.n	bba4 <_ZN9ClearCore13ShiftRegister6UpdateEv+0x2dc>
    bc7c:	f8d0 40bc 	ldr.w	r4, [r0, #188]	; 0xbc
                        m_values[i] = m_valuesBuf[i];
    bc80:	f880 3084 	strb.w	r3, [r0, #132]	; 0x84
                        retVal |= m_analogMasks[i];
    bc84:	4322      	orrs	r2, r4
    bc86:	e787      	b.n	bb98 <_ZN9ClearCore13ShiftRegister6UpdateEv+0x2d0>
    bc88:	f8d0 40b8 	ldr.w	r4, [r0, #184]	; 0xb8
                        m_values[i] = m_valuesBuf[i];
    bc8c:	f880 3083 	strb.w	r3, [r0, #131]	; 0x83
                        retVal |= m_analogMasks[i];
    bc90:	4322      	orrs	r2, r4
    bc92:	e77b      	b.n	bb8c <_ZN9ClearCore13ShiftRegister6UpdateEv+0x2c4>
    bc94:	f8d0 40b4 	ldr.w	r4, [r0, #180]	; 0xb4
                        m_values[i] = m_valuesBuf[i];
    bc98:	f880 3082 	strb.w	r3, [r0, #130]	; 0x82
                        retVal |= m_analogMasks[i];
    bc9c:	4322      	orrs	r2, r4
    bc9e:	e76f      	b.n	bb80 <_ZN9ClearCore13ShiftRegister6UpdateEv+0x2b8>
    bca0:	f8d0 40b0 	ldr.w	r4, [r0, #176]	; 0xb0
                        m_values[i] = m_valuesBuf[i];
    bca4:	f880 3081 	strb.w	r3, [r0, #129]	; 0x81
                        retVal |= m_analogMasks[i];
    bca8:	4322      	orrs	r2, r4
    bcaa:	e762      	b.n	bb72 <_ZN9ClearCore13ShiftRegister6UpdateEv+0x2aa>
    bcac:	f8d0 40ac 	ldr.w	r4, [r0, #172]	; 0xac
                        m_values[i] = m_valuesBuf[i];
    bcb0:	f880 3080 	strb.w	r3, [r0, #128]	; 0x80
                        retVal |= m_analogMasks[i];
    bcb4:	4322      	orrs	r2, r4
    bcb6:	e755      	b.n	bb64 <_ZN9ClearCore13ShiftRegister6UpdateEv+0x29c>
    bcb8:	f8d0 40a8 	ldr.w	r4, [r0, #168]	; 0xa8
                        m_values[i] = m_valuesBuf[i];
    bcbc:	f880 307f 	strb.w	r3, [r0, #127]	; 0x7f
                        retVal |= m_analogMasks[i];
    bcc0:	4322      	orrs	r2, r4
    bcc2:	e748      	b.n	bb56 <_ZN9ClearCore13ShiftRegister6UpdateEv+0x28e>
    bcc4:	f8d0 40a4 	ldr.w	r4, [r0, #164]	; 0xa4
                        m_values[i] = m_valuesBuf[i];
    bcc8:	f880 307e 	strb.w	r3, [r0, #126]	; 0x7e
                        retVal |= m_analogMasks[i];
    bccc:	4322      	orrs	r2, r4
    bcce:	e73b      	b.n	bb48 <_ZN9ClearCore13ShiftRegister6UpdateEv+0x280>
                        m_values[i] = m_valuesBuf[i];
    bcd0:	f880 207d 	strb.w	r2, [r0, #125]	; 0x7d
                        retVal |= m_analogMasks[i];
    bcd4:	f8d0 20a0 	ldr.w	r2, [r0, #160]	; 0xa0
    bcd8:	e72f      	b.n	bb3a <_ZN9ClearCore13ShiftRegister6UpdateEv+0x272>
    bcda:	bf00      	nop

0000bcdc <_ZN9ClearCore13ShiftRegister18DiagnosticLedSweepEv>:
}

/**
    Turn all of the LEDs on briefly so the user can see that they all work.
**/
void ShiftRegister::DiagnosticLedSweep() {
    bcdc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    m_altOutput = 0;
    m_useAltOutput = true;
    bce0:	2301      	movs	r3, #1
    bce2:	f100 0834 	add.w	r8, r0, #52	; 0x34
    bce6:	4e4d      	ldr	r6, [pc, #308]	; (be1c <_ZN9ClearCore13ShiftRegister18DiagnosticLedSweepEv+0x140>)
    bce8:	f880 310b 	strb.w	r3, [r0, #267]	; 0x10b
void ShiftRegister::DiagnosticLedSweep() {
    bcec:	b083      	sub	sp, #12
    bcee:	4681      	mov	r9, r0
    m_useAltOutput = true;
    bcf0:	4645      	mov	r5, r8
    bcf2:	f100 0444 	add.w	r4, r0, #68	; 0x44
    bcf6:	2200      	movs	r2, #0
    bcf8:	2700      	movs	r7, #0
    // Illuminate bank 2
    for (uint8_t i = 0; i < LED_BANK_2_LEN; i++) {
        m_altOutput |= LED_BANK_2[i];
    bcfa:	f855 3b04 	ldr.w	r3, [r5], #4
    bcfe:	4313      	orrs	r3, r2
    bd00:	f8c9 3104 	str.w	r3, [r9, #260]	; 0x104
    bd04:	4630      	mov	r0, r6
    bd06:	4639      	mov	r1, r7
    bd08:	f7fe febe 	bl	aa88 <Delay_cycles>
    for (uint8_t i = 0; i < LED_BANK_2_LEN; i++) {
    bd0c:	42a5      	cmp	r5, r4
    bd0e:	d002      	beq.n	bd16 <_ZN9ClearCore13ShiftRegister18DiagnosticLedSweepEv+0x3a>
    bd10:	f8d9 2104 	ldr.w	r2, [r9, #260]	; 0x104
    bd14:	e7f1      	b.n	bcfa <_ZN9ClearCore13ShiftRegister18DiagnosticLedSweepEv+0x1e>
    bd16:	f109 0318 	add.w	r3, r9, #24
    bd1a:	4e40      	ldr	r6, [pc, #256]	; (be1c <_ZN9ClearCore13ShiftRegister18DiagnosticLedSweepEv+0x140>)
    bd1c:	9301      	str	r3, [sp, #4]
    bd1e:	469b      	mov	fp, r3
    bd20:	f04f 0a00 	mov.w	sl, #0
    bd24:	2700      	movs	r7, #0

    // Illuminate bank 0 and 1 simultaneously
    uint8_t largerBankLen = (LED_BANK_1_LEN > LED_BANK_0_LEN) ? LED_BANK_1_LEN
                            : LED_BANK_0_LEN;
    for (uint8_t i = 0; i < largerBankLen; i++) {
        if (i < LED_BANK_0_LEN) {
    bd26:	f1ba 0f06 	cmp.w	sl, #6
    bd2a:	4630      	mov	r0, r6
    bd2c:	4639      	mov	r1, r7
    bd2e:	f10a 0a01 	add.w	sl, sl, #1
    bd32:	d148      	bne.n	bdc6 <_ZN9ClearCore13ShiftRegister18DiagnosticLedSweepEv+0xea>
            m_altOutput |= LED_BANK_0[i];
        }
        if (i < LED_BANK_1_LEN) {
            m_altOutput |= LED_BANK_1[i];
    bd34:	f8db 2000 	ldr.w	r2, [fp]
    bd38:	f8d9 3104 	ldr.w	r3, [r9, #260]	; 0x104
    bd3c:	4837      	ldr	r0, [pc, #220]	; (be1c <_ZN9ClearCore13ShiftRegister18DiagnosticLedSweepEv+0x140>)
    bd3e:	4313      	orrs	r3, r2
    bd40:	f8c9 3104 	str.w	r3, [r9, #260]	; 0x104
    bd44:	2100      	movs	r1, #0
    bd46:	f7fe fe9f 	bl	aa88 <Delay_cycles>
    bd4a:	4835      	ldr	r0, [pc, #212]	; (be20 <_ZN9ClearCore13ShiftRegister18DiagnosticLedSweepEv+0x144>)
    bd4c:	4e33      	ldr	r6, [pc, #204]	; (be1c <_ZN9ClearCore13ShiftRegister18DiagnosticLedSweepEv+0x140>)
    bd4e:	2100      	movs	r1, #0
    bd50:	f7fe fe9a 	bl	aa88 <Delay_cycles>
    bd54:	2700      	movs	r7, #0

    Delay_ms(50);

    // Turn them off the same way they were turned on
    for (uint8_t i = 0; i < LED_BANK_2_LEN; i++) {
        m_altOutput &= ~LED_BANK_2[i];
    bd56:	f858 2b04 	ldr.w	r2, [r8], #4
    bd5a:	f8d9 3104 	ldr.w	r3, [r9, #260]	; 0x104
    bd5e:	ea23 0302 	bic.w	r3, r3, r2
    bd62:	f8c9 3104 	str.w	r3, [r9, #260]	; 0x104
    bd66:	4630      	mov	r0, r6
    bd68:	4639      	mov	r1, r7
    bd6a:	f7fe fe8d 	bl	aa88 <Delay_cycles>
    for (uint8_t i = 0; i < LED_BANK_2_LEN; i++) {
    bd6e:	4545      	cmp	r5, r8
    bd70:	d1f1      	bne.n	bd56 <_ZN9ClearCore13ShiftRegister18DiagnosticLedSweepEv+0x7a>
        atomic_or_fetch(&m_patternOutputs[LED_BLINK_IO_SET], bitsToSet);
    bd72:	f3bf 8f5b 	dmb	ish
    bd76:	f109 03f4 	add.w	r3, r9, #244	; 0xf4
    bd7a:	e853 2f00 	ldrex	r2, [r3]
    bd7e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
    bd82:	e843 2100 	strex	r1, r2, [r3]
    bd86:	2900      	cmp	r1, #0
    bd88:	d1f7      	bne.n	bd7a <_ZN9ClearCore13ShiftRegister18DiagnosticLedSweepEv+0x9e>
    bd8a:	f3bf 8f5b 	dmb	ish
    bd8e:	4e23      	ldr	r6, [pc, #140]	; (be1c <_ZN9ClearCore13ShiftRegister18DiagnosticLedSweepEv+0x140>)
    bd90:	2500      	movs	r5, #0
    bd92:	2700      	movs	r7, #0
    bd94:	9b01      	ldr	r3, [sp, #4]
    }

    ShifterStateSet(SR_UNDERGLOW_MASK);

    for (uint8_t i = 0; i < largerBankLen; i++) {
        if (i < LED_BANK_0_LEN) {
    bd96:	2d06      	cmp	r5, #6
    bd98:	461a      	mov	r2, r3
    bd9a:	4630      	mov	r0, r6
    bd9c:	4639      	mov	r1, r7
    bd9e:	f105 0501 	add.w	r5, r5, #1
    bda2:	d122      	bne.n	bdea <_ZN9ClearCore13ShiftRegister18DiagnosticLedSweepEv+0x10e>
            m_altOutput &= ~LED_BANK_0[i];
        }
        if (i < LED_BANK_1_LEN) {
            m_altOutput &= ~LED_BANK_1[i];
    bda4:	681a      	ldr	r2, [r3, #0]
    bda6:	f8d9 3104 	ldr.w	r3, [r9, #260]	; 0x104
    bdaa:	481c      	ldr	r0, [pc, #112]	; (be1c <_ZN9ClearCore13ShiftRegister18DiagnosticLedSweepEv+0x140>)
    bdac:	ea23 0302 	bic.w	r3, r3, r2
    bdb0:	f8c9 3104 	str.w	r3, [r9, #260]	; 0x104
    bdb4:	2100      	movs	r1, #0
    bdb6:	f7fe fe67 	bl	aa88 <Delay_cycles>
        }

        Delay_ms(DELAY_TIME);
    }
    m_useAltOutput = false;
    bdba:	2300      	movs	r3, #0
    bdbc:	f889 310b 	strb.w	r3, [r9, #267]	; 0x10b
}
    bdc0:	b003      	add	sp, #12
    bdc2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
            m_altOutput |= LED_BANK_0[i];
    bdc6:	f85b 3c18 	ldr.w	r3, [fp, #-24]
    bdca:	f8d9 4104 	ldr.w	r4, [r9, #260]	; 0x104
            m_altOutput |= LED_BANK_1[i];
    bdce:	f8db 2000 	ldr.w	r2, [fp]
            m_altOutput |= LED_BANK_0[i];
    bdd2:	4323      	orrs	r3, r4
            m_altOutput |= LED_BANK_1[i];
    bdd4:	4313      	orrs	r3, r2
    bdd6:	f8c9 3104 	str.w	r3, [r9, #260]	; 0x104
    bdda:	f7fe fe55 	bl	aa88 <Delay_cycles>
    for (uint8_t i = 0; i < largerBankLen; i++) {
    bdde:	f1ba 0f07 	cmp.w	sl, #7
    bde2:	f10b 0b04 	add.w	fp, fp, #4
    bde6:	d19e      	bne.n	bd26 <_ZN9ClearCore13ShiftRegister18DiagnosticLedSweepEv+0x4a>
    bde8:	e7af      	b.n	bd4a <_ZN9ClearCore13ShiftRegister18DiagnosticLedSweepEv+0x6e>
            m_altOutput &= ~LED_BANK_0[i];
    bdea:	f853 3c18 	ldr.w	r3, [r3, #-24]
    bdee:	f8d9 4104 	ldr.w	r4, [r9, #260]	; 0x104
            m_altOutput &= ~LED_BANK_1[i];
    bdf2:	6812      	ldr	r2, [r2, #0]
            m_altOutput &= ~LED_BANK_0[i];
    bdf4:	ea24 0303 	bic.w	r3, r4, r3
            m_altOutput &= ~LED_BANK_1[i];
    bdf8:	ea23 0302 	bic.w	r3, r3, r2
    bdfc:	f8c9 3104 	str.w	r3, [r9, #260]	; 0x104
    be00:	9b01      	ldr	r3, [sp, #4]
    be02:	3304      	adds	r3, #4
    be04:	9301      	str	r3, [sp, #4]
    be06:	f7fe fe3f 	bl	aa88 <Delay_cycles>
    for (uint8_t i = 0; i < largerBankLen; i++) {
    be0a:	2d07      	cmp	r5, #7
    be0c:	d1c2      	bne.n	bd94 <_ZN9ClearCore13ShiftRegister18DiagnosticLedSweepEv+0xb8>
    m_useAltOutput = false;
    be0e:	2300      	movs	r3, #0
    be10:	f889 310b 	strb.w	r3, [r9, #267]	; 0x10b
}
    be14:	b003      	add	sp, #12
    be16:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    be1a:	bf00      	nop
    be1c:	002dc6c0 	.word	0x002dc6c0
    be20:	005b8d80 	.word	0x005b8d80

0000be24 <_ZN9ClearCore12MotorManager8InstanceEv>:
extern MotorDriver *const MotorConnectors[MOTOR_CON_CNT];
extern ShiftRegister ShiftReg;

MotorManager &MotorMgr = MotorManager::Instance();

MotorManager &MotorManager::Instance() {
    be24:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    static MotorManager *instance = new MotorManager();
    be26:	4d0e      	ldr	r5, [pc, #56]	; (be60 <_ZN9ClearCore12MotorManager8InstanceEv+0x3c>)
    be28:	682b      	ldr	r3, [r5, #0]
    be2a:	f013 0401 	ands.w	r4, r3, #1
    be2e:	d002      	beq.n	be36 <_ZN9ClearCore12MotorManager8InstanceEv+0x12>
    be30:	4b0c      	ldr	r3, [pc, #48]	; (be64 <_ZN9ClearCore12MotorManager8InstanceEv+0x40>)
    be32:	6818      	ldr	r0, [r3, #0]
    be34:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    be36:	2010      	movs	r0, #16
    be38:	f007 f8c6 	bl	12fc8 <_Znwj>
    Construct and wire in our output pins
**/
MotorManager::MotorManager()
    : m_gclkIndex(MAIN_INTERRUPT_GCLK_ID),
      m_clockRate(CLOCK_RATE_NORMAL),
      m_initialized(false) {
    be3c:	2301      	movs	r3, #1
    static MotorManager *instance = new MotorManager();
    be3e:	4909      	ldr	r1, [pc, #36]	; (be64 <_ZN9ClearCore12MotorManager8InstanceEv+0x40>)
      m_initialized(false) {
    be40:	7003      	strb	r3, [r0, #0]
    m_stepPorts[MOTOR_M0M1] =  Mtr_CLK_01.gpioPort;
    m_stepPorts[MOTOR_M2M3] = Mtr_CLK_23.gpioPort;
    m_stepDataBits[MOTOR_M0M1] = Mtr_CLK_01.gpioPin;
    m_stepDataBits[MOTOR_M2M3] = Mtr_CLK_23.gpioPin;
    m_motorModes[MOTOR_M0M1] = Connector::CPM_MODE_A_DIRECT_B_DIRECT;
    be42:	2209      	movs	r2, #9
    m_stepDataBits[MOTOR_M0M1] = Mtr_CLK_01.gpioPin;
    be44:	271b      	movs	r7, #27
    m_stepDataBits[MOTOR_M2M3] = Mtr_CLK_23.gpioPin;
    be46:	2617      	movs	r6, #23
      m_initialized(false) {
    be48:	7384      	strb	r4, [r0, #14]
    m_stepPorts[MOTOR_M0M1] =  Mtr_CLK_01.gpioPort;
    be4a:	7084      	strb	r4, [r0, #2]
    m_stepDataBits[MOTOR_M0M1] = Mtr_CLK_01.gpioPin;
    be4c:	6047      	str	r7, [r0, #4]
    m_stepDataBits[MOTOR_M2M3] = Mtr_CLK_23.gpioPin;
    be4e:	6086      	str	r6, [r0, #8]
    static MotorManager *instance = new MotorManager();
    be50:	6008      	str	r0, [r1, #0]
      m_initialized(false) {
    be52:	7043      	strb	r3, [r0, #1]
    m_stepPorts[MOTOR_M2M3] = Mtr_CLK_23.gpioPort;
    be54:	70c3      	strb	r3, [r0, #3]
    static MotorManager *instance = new MotorManager();
    be56:	602b      	str	r3, [r5, #0]
    m_motorModes[MOTOR_M0M1] = Connector::CPM_MODE_A_DIRECT_B_DIRECT;
    be58:	7302      	strb	r2, [r0, #12]
    m_motorModes[MOTOR_M2M3] = Connector::CPM_MODE_A_DIRECT_B_DIRECT;
    be5a:	7342      	strb	r2, [r0, #13]
}
    be5c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    be5e:	bf00      	nop
    be60:	20001d34 	.word	0x20001d34
    be64:	20001d3c 	.word	0x20001d3c

0000be68 <_ZN9ClearCore12MotorManager18MotorInputClockingENS0_15MotorClockRatesE>:
    Set the motor pulse rate.

    Returns true if successfully set.
**/
bool MotorManager::MotorInputClocking(MotorClockRates newRate) {
    if (m_clockRate == newRate && m_initialized) {
    be68:	7843      	ldrb	r3, [r0, #1]
    be6a:	428b      	cmp	r3, r1
    be6c:	d06d      	beq.n	bf4a <_ZN9ClearCore12MotorManager18MotorInputClockingENS0_15MotorClockRatesE+0xe2>
    }

    uint32_t clkReq;
    bool modeValid = true;

    switch (newRate) {
    be6e:	2901      	cmp	r1, #1
bool MotorManager::MotorInputClocking(MotorClockRates newRate) {
    be70:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    switch (newRate) {
    be74:	d071      	beq.n	bf5a <_ZN9ClearCore12MotorManager18MotorInputClockingENS0_15MotorClockRatesE+0xf2>
    be76:	d363      	bcc.n	bf40 <_ZN9ClearCore12MotorManager18MotorInputClockingENS0_15MotorClockRatesE+0xd8>
    be78:	2902      	cmp	r1, #2
    be7a:	d16b      	bne.n	bf54 <_ZN9ClearCore12MotorManager18MotorInputClockingENS0_15MotorClockRatesE+0xec>
            break;
        case CLOCK_RATE_NORMAL:
            clkReq = CPM_CLOCK_RATE_NORMAL_HZ;
            break;
        case CLOCK_RATE_HIGH:
            clkReq = CPM_CLOCK_RATE_HIGH_HZ;
    be7c:	4e39      	ldr	r6, [pc, #228]	; (bf64 <_ZN9ClearCore12MotorManager18MotorInputClockingENS0_15MotorClockRatesE+0xfc>)
    switch (newRate) {
    be7e:	f240 188f 	movw	r8, #399	; 0x18f
    be82:	f44f 77c8 	mov.w	r7, #400	; 0x190

    // Mode change successful; update the step rate.
    m_clockRate = newRate;

    // Configure TCC0 for the step step carrier signal
    TCC0->CTRLA.bit.ENABLE = 0; // Disable TCC0
    be86:	4a38      	ldr	r2, [pc, #224]	; (bf68 <_ZN9ClearCore12MotorManager18MotorInputClockingENS0_15MotorClockRatesE+0x100>)
    m_clockRate = newRate;
    be88:	7041      	strb	r1, [r0, #1]
    TCC0->CTRLA.bit.ENABLE = 0; // Disable TCC0
    be8a:	6814      	ldr	r4, [r2, #0]
    TCC1->CTRLA.bit.ENABLE = 0; // Disable TCC1
    be8c:	4b37      	ldr	r3, [pc, #220]	; (bf6c <_ZN9ClearCore12MotorManager18MotorInputClockingENS0_15MotorClockRatesE+0x104>)
    TCC0->CTRLA.bit.ENABLE = 0; // Disable TCC0
    be8e:	f36f 0441 	bfc	r4, #1, #1
    be92:	6014      	str	r4, [r2, #0]
    TCC1->CTRLA.bit.ENABLE = 0; // Disable TCC1
    be94:	681c      	ldr	r4, [r3, #0]
    be96:	f36f 0441 	bfc	r4, #1, #1
    be9a:	601c      	str	r4, [r3, #0]

    SYNCBUSY_WAIT(TCC0, TCC_SYNCBUSY_ENABLE);
    be9c:	6893      	ldr	r3, [r2, #8]
    be9e:	079c      	lsls	r4, r3, #30
    bea0:	d4fc      	bmi.n	be9c <_ZN9ClearCore12MotorManager18MotorInputClockingENS0_15MotorClockRatesE+0x34>
    SYNCBUSY_WAIT(TCC1, TCC_SYNCBUSY_ENABLE);
    bea2:	4d32      	ldr	r5, [pc, #200]	; (bf6c <_ZN9ClearCore12MotorManager18MotorInputClockingENS0_15MotorClockRatesE+0x104>)
    bea4:	68ac      	ldr	r4, [r5, #8]
    bea6:	f014 0402 	ands.w	r4, r4, #2
    beaa:	d1fb      	bne.n	bea4 <_ZN9ClearCore12MotorManager18MotorInputClockingENS0_15MotorClockRatesE+0x3c>

    GClkFreqUpdate(m_gclkIndex, clkReq);
    beac:	4631      	mov	r1, r6
    beae:	7800      	ldrb	r0, [r0, #0]
    beb0:	4e2f      	ldr	r6, [pc, #188]	; (bf70 <_ZN9ClearCore12MotorManager18MotorInputClockingENS0_15MotorClockRatesE+0x108>)
    beb2:	f000 fead 	bl	cc10 <GClkFreqUpdate>
    TCC0->COUNT.reg = 0;
    TCC1->COUNT.reg = 0;

    // Clear out any pending command
    for (int8_t iChannel = 0; iChannel < TCC0_CC_NUM; iChannel++) {
        TCC0->CC[iChannel].reg = 0;
    beb6:	492f      	ldr	r1, [pc, #188]	; (bf74 <_ZN9ClearCore12MotorManager18MotorInputClockingENS0_15MotorClockRatesE+0x10c>)
    beb8:	4a2f      	ldr	r2, [pc, #188]	; (bf78 <_ZN9ClearCore12MotorManager18MotorInputClockingENS0_15MotorClockRatesE+0x110>)
    TCC0->COUNT.reg = 0;
    beba:	4b2b      	ldr	r3, [pc, #172]	; (bf68 <_ZN9ClearCore12MotorManager18MotorInputClockingENS0_15MotorClockRatesE+0x100>)
        TCC0->CC[iChannel].reg = 0;
    bebc:	482f      	ldr	r0, [pc, #188]	; (bf7c <_ZN9ClearCore12MotorManager18MotorInputClockingENS0_15MotorClockRatesE+0x114>)
    TCC0->COUNT.reg = 0;
    bebe:	635c      	str	r4, [r3, #52]	; 0x34
    TCC1->COUNT.reg = 0;
    bec0:	636c      	str	r4, [r5, #52]	; 0x34
        TCC0->CC[iChannel].reg = 0;
    bec2:	645c      	str	r4, [r3, #68]	; 0x44
        TCC0->CCBUF[iChannel].reg = 0;
    bec4:	671c      	str	r4, [r3, #112]	; 0x70
        TCC0->CC[iChannel].reg = 0;
    bec6:	644c      	str	r4, [r1, #68]	; 0x44
        TCC0->CCBUF[iChannel].reg = 0;
    bec8:	670c      	str	r4, [r1, #112]	; 0x70
        TCC0->CC[iChannel].reg = 0;
    beca:	6454      	str	r4, [r2, #68]	; 0x44
        TCC0->CCBUF[iChannel].reg = 0;
    becc:	6714      	str	r4, [r2, #112]	; 0x70
        TCC0->CC[iChannel].reg = 0;
    bece:	6444      	str	r4, [r0, #68]	; 0x44
        TCC0->CCBUF[iChannel].reg = 0;
    bed0:	6704      	str	r4, [r0, #112]	; 0x70
        TCC0->CC[iChannel].reg = 0;
    bed2:	650c      	str	r4, [r1, #80]	; 0x50
    }

    for (int8_t iChannel = 0; iChannel < TCC1_CC_NUM; iChannel++) {
        TCC1->CC[iChannel].reg = 0;
    bed4:	f500 50ff 	add.w	r0, r0, #8160	; 0x1fe0
        TCC0->CCBUF[iChannel].reg = 0;
    bed8:	67cc      	str	r4, [r1, #124]	; 0x7c
        TCC0->CC[iChannel].reg = 0;
    beda:	6514      	str	r4, [r2, #80]	; 0x50
        TCC1->CC[iChannel].reg = 0;
    bedc:	f501 5100 	add.w	r1, r1, #8192	; 0x2000
        TCC0->CCBUF[iChannel].reg = 0;
    bee0:	67d4      	str	r4, [r2, #124]	; 0x7c
        TCC1->CC[iChannel].reg = 0;
    bee2:	f502 5200 	add.w	r2, r2, #8192	; 0x2000
    bee6:	3018      	adds	r0, #24
    bee8:	3104      	adds	r1, #4
    beea:	3204      	adds	r2, #4
    beec:	646c      	str	r4, [r5, #68]	; 0x44
        TCC1->CCBUF[iChannel].reg = 0;
    beee:	672c      	str	r4, [r5, #112]	; 0x70
        TCC1->CC[iChannel].reg = 0;
    bef0:	6444      	str	r4, [r0, #68]	; 0x44
        TCC1->CCBUF[iChannel].reg = 0;
    bef2:	6704      	str	r4, [r0, #112]	; 0x70
        TCC1->CC[iChannel].reg = 0;
    bef4:	644c      	str	r4, [r1, #68]	; 0x44
        TCC1->CCBUF[iChannel].reg = 0;
    bef6:	670c      	str	r4, [r1, #112]	; 0x70
        TCC1->CC[iChannel].reg = 0;
    bef8:	6454      	str	r4, [r2, #68]	; 0x44
        TCC1->CCBUF[iChannel].reg = 0;
    befa:	6714      	str	r4, [r2, #112]	; 0x70
    }

    TCC0->PER.reg = newPeriod - 1;
    befc:	f8c3 8040 	str.w	r8, [r3, #64]	; 0x40
    bf00:	f106 0410 	add.w	r4, r6, #16
    TCC1->PER.reg = newPeriod - 1;
    bf04:	f8c5 8040 	str.w	r8, [r5, #64]	; 0x40

    // Notify the StepGenerators of the new maximum rate
    for (uint8_t iMotor = 0; iMotor < MOTOR_CON_CNT; iMotor++) {
        MotorConnectors[iMotor]->StepsPerSampleMaxSet(newPeriod);
    bf08:	f856 0b04 	ldr.w	r0, [r6], #4
    bf0c:	4639      	mov	r1, r7
    bf0e:	3030      	adds	r0, #48	; 0x30
    bf10:	f000 fcb2 	bl	c878 <_ZN9ClearCore13StepGenerator20StepsPerSampleMaxSetEm>
    for (uint8_t iMotor = 0; iMotor < MOTOR_CON_CNT; iMotor++) {
    bf14:	42b4      	cmp	r4, r6
    bf16:	d1f7      	bne.n	bf08 <_ZN9ClearCore12MotorManager18MotorInputClockingENS0_15MotorClockRatesE+0xa0>
    }

    TCC0->CTRLA.bit.ENABLE = 1; // Enable TCC0
    bf18:	4a13      	ldr	r2, [pc, #76]	; (bf68 <_ZN9ClearCore12MotorManager18MotorInputClockingENS0_15MotorClockRatesE+0x100>)
    TCC1->CTRLA.bit.ENABLE = 1; // Enable TCC1
    bf1a:	4914      	ldr	r1, [pc, #80]	; (bf6c <_ZN9ClearCore12MotorManager18MotorInputClockingENS0_15MotorClockRatesE+0x104>)
    TCC0->CTRLA.bit.ENABLE = 1; // Enable TCC0
    bf1c:	6813      	ldr	r3, [r2, #0]
    bf1e:	f043 0302 	orr.w	r3, r3, #2
    bf22:	6013      	str	r3, [r2, #0]
    TCC1->CTRLA.bit.ENABLE = 1; // Enable TCC1
    bf24:	680b      	ldr	r3, [r1, #0]
    bf26:	f043 0302 	orr.w	r3, r3, #2
    bf2a:	600b      	str	r3, [r1, #0]

    SYNCBUSY_WAIT(TCC0, TCC_SYNCBUSY_ENABLE);
    bf2c:	6893      	ldr	r3, [r2, #8]
    bf2e:	0799      	lsls	r1, r3, #30
    bf30:	d4fc      	bmi.n	bf2c <_ZN9ClearCore12MotorManager18MotorInputClockingENS0_15MotorClockRatesE+0xc4>
    SYNCBUSY_WAIT(TCC1, TCC_SYNCBUSY_ENABLE);
    bf32:	4a0e      	ldr	r2, [pc, #56]	; (bf6c <_ZN9ClearCore12MotorManager18MotorInputClockingENS0_15MotorClockRatesE+0x104>)
    bf34:	6893      	ldr	r3, [r2, #8]
    bf36:	079b      	lsls	r3, r3, #30
    bf38:	d4fc      	bmi.n	bf34 <_ZN9ClearCore12MotorManager18MotorInputClockingENS0_15MotorClockRatesE+0xcc>

    return true;
    bf3a:	2001      	movs	r0, #1
    bf3c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    switch (newRate) {
    bf40:	f04f 0813 	mov.w	r8, #19
    bf44:	2714      	movs	r7, #20
            clkReq = CPM_CLOCK_RATE_LOW_HZ;
    bf46:	4e0e      	ldr	r6, [pc, #56]	; (bf80 <_ZN9ClearCore12MotorManager18MotorInputClockingENS0_15MotorClockRatesE+0x118>)
    bf48:	e79d      	b.n	be86 <_ZN9ClearCore12MotorManager18MotorInputClockingENS0_15MotorClockRatesE+0x1e>
    if (m_clockRate == newRate && m_initialized) {
    bf4a:	7b83      	ldrb	r3, [r0, #14]
    bf4c:	2b00      	cmp	r3, #0
    bf4e:	d08e      	beq.n	be6e <_ZN9ClearCore12MotorManager18MotorInputClockingENS0_15MotorClockRatesE+0x6>
        return false;
    bf50:	2000      	movs	r0, #0
    bf52:	4770      	bx	lr
        return false;
    bf54:	2000      	movs	r0, #0
    bf56:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    switch (newRate) {
    bf5a:	f04f 0863 	mov.w	r8, #99	; 0x63
    bf5e:	2764      	movs	r7, #100	; 0x64
            clkReq = CPM_CLOCK_RATE_NORMAL_HZ;
    bf60:	4e08      	ldr	r6, [pc, #32]	; (bf84 <_ZN9ClearCore12MotorManager18MotorInputClockingENS0_15MotorClockRatesE+0x11c>)
    bf62:	e790      	b.n	be86 <_ZN9ClearCore12MotorManager18MotorInputClockingENS0_15MotorClockRatesE+0x1e>
    bf64:	001e8480 	.word	0x001e8480
    bf68:	41016000 	.word	0x41016000
    bf6c:	41018000 	.word	0x41018000
    bf70:	00022a4c 	.word	0x00022a4c
    bf74:	41016004 	.word	0x41016004
    bf78:	41016008 	.word	0x41016008
    bf7c:	4101600c 	.word	0x4101600c
    bf80:	000186a0 	.word	0x000186a0
    bf84:	0007a120 	.word	0x0007a120

0000bf88 <_ZN9ClearCore12MotorManager12MotorModeSetENS0_9MotorPairENS_9Connector14ConnectorModesE>:
}

bool MotorManager::MotorModeSet(MotorPair motorPair,
                                Connector::ConnectorModes newMode) {
    if (motorPair == MOTOR_ALL) {
    bf88:	2902      	cmp	r1, #2
                                Connector::ConnectorModes newMode) {
    bf8a:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    bf8e:	4606      	mov	r6, r0
    bf90:	4615      	mov	r5, r2
    if (motorPair == MOTOR_ALL) {
    bf92:	d036      	beq.n	c002 <_ZN9ClearCore12MotorManager12MotorModeSetENS0_9MotorPairENS_9Connector14ConnectorModesE+0x7a>
    bf94:	460c      	mov	r4, r1
    bf96:	f1a2 0709 	sub.w	r7, r2, #9
        return MotorModeSet(MOTOR_M0M1, newMode) &&
               MotorModeSet(MOTOR_M2M3, newMode);
    }

    switch (newMode) {
    bf9a:	2f03      	cmp	r7, #3
    bf9c:	d907      	bls.n	bfae <_ZN9ClearCore12MotorManager12MotorModeSetENS0_9MotorPairENS_9Connector14ConnectorModesE+0x26>
    bf9e:	1937      	adds	r7, r6, r4
            }
            break;
        default:
            break;
    }
    return (m_motorModes[motorPair] == newMode);
    bfa0:	7b38      	ldrb	r0, [r7, #12]
    bfa2:	1b40      	subs	r0, r0, r5
    bfa4:	fab0 f080 	clz	r0, r0
    bfa8:	0940      	lsrs	r0, r0, #5
    bfaa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    bfae:	f8df 90c0 	ldr.w	r9, [pc, #192]	; c070 <_ZN9ClearCore12MotorManager12MotorModeSetENS0_9MotorPairENS_9Connector14ConnectorModesE+0xe8>
            MotorConnectors[motorPair * 2]->Mode(newMode);
    bfb2:	ea4f 0844 	mov.w	r8, r4, lsl #1
            m_motorModes[motorPair] = newMode;
    bfb6:	1937      	adds	r7, r6, r4
            MotorConnectors[motorPair * 2]->Mode(newMode);
    bfb8:	f859 0028 	ldr.w	r0, [r9, r8, lsl #2]
            m_motorModes[motorPair] = newMode;
    bfbc:	733d      	strb	r5, [r7, #12]
            MotorConnectors[motorPair * 2]->Mode(newMode);
    bfbe:	6803      	ldr	r3, [r0, #0]
            MotorConnectors[motorPair * 2 + 1]->Mode(newMode);
    bfc0:	f108 0801 	add.w	r8, r8, #1
            MotorConnectors[motorPair * 2]->Mode(newMode);
    bfc4:	685b      	ldr	r3, [r3, #4]
    bfc6:	4629      	mov	r1, r5
    bfc8:	4798      	blx	r3
            MotorConnectors[motorPair * 2 + 1]->Mode(newMode);
    bfca:	f859 0028 	ldr.w	r0, [r9, r8, lsl #2]
    bfce:	6803      	ldr	r3, [r0, #0]
    bfd0:	4629      	mov	r1, r5
    bfd2:	685b      	ldr	r3, [r3, #4]
    bfd4:	4798      	blx	r3
                PMUX_ENABLE(m_stepPorts[motorPair],
    bfd6:	eb06 0184 	add.w	r1, r6, r4, lsl #2
    bfda:	f997 2002 	ldrsb.w	r2, [r7, #2]
    bfde:	684b      	ldr	r3, [r1, #4]
    bfe0:	eb03 13c2 	add.w	r3, r3, r2, lsl #7
    bfe4:	f103 4382 	add.w	r3, r3, #1090519040	; 0x41000000
    bfe8:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
            if (newMode == Connector::CPM_MODE_STEP_AND_DIR) {
    bfec:	2d0a      	cmp	r5, #10
                PMUX_ENABLE(m_stepPorts[motorPair],
    bfee:	f893 2040 	ldrb.w	r2, [r3, #64]	; 0x40
    bff2:	bf0c      	ite	eq
    bff4:	f042 0201 	orreq.w	r2, r2, #1
                PMUX_DISABLE(m_stepPorts[motorPair],
    bff8:	f36f 0200 	bfcne	r2, #0, #1
    bffc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    c000:	e7ce      	b.n	bfa0 <_ZN9ClearCore12MotorManager12MotorModeSetENS0_9MotorPairENS_9Connector14ConnectorModesE+0x18>
    switch (newMode) {
    c002:	f1a2 0709 	sub.w	r7, r2, #9
    c006:	2f03      	cmp	r7, #3
    c008:	d907      	bls.n	c01a <_ZN9ClearCore12MotorManager12MotorModeSetENS0_9MotorPairENS_9Connector14ConnectorModesE+0x92>
        return MotorModeSet(MOTOR_M0M1, newMode) &&
    c00a:	7b33      	ldrb	r3, [r6, #12]
    c00c:	42ab      	cmp	r3, r5
    c00e:	d002      	beq.n	c016 <_ZN9ClearCore12MotorManager12MotorModeSetENS0_9MotorPairENS_9Connector14ConnectorModesE+0x8e>
    c010:	2000      	movs	r0, #0
}
    c012:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    c016:	2401      	movs	r4, #1
    c018:	e7bf      	b.n	bf9a <_ZN9ClearCore12MotorManager12MotorModeSetENS0_9MotorPairENS_9Connector14ConnectorModesE+0x12>
            MotorConnectors[motorPair * 2]->Mode(newMode);
    c01a:	f8df 9054 	ldr.w	r9, [pc, #84]	; c070 <_ZN9ClearCore12MotorManager12MotorModeSetENS0_9MotorPairENS_9Connector14ConnectorModesE+0xe8>
            m_motorModes[motorPair] = newMode;
    c01e:	7332      	strb	r2, [r6, #12]
            MotorConnectors[motorPair * 2]->Mode(newMode);
    c020:	f8d9 0000 	ldr.w	r0, [r9]
    c024:	6803      	ldr	r3, [r0, #0]
    c026:	4611      	mov	r1, r2
    c028:	685b      	ldr	r3, [r3, #4]
    c02a:	4798      	blx	r3
            MotorConnectors[motorPair * 2 + 1]->Mode(newMode);
    c02c:	f8d9 0004 	ldr.w	r0, [r9, #4]
    c030:	6803      	ldr	r3, [r0, #0]
    c032:	4629      	mov	r1, r5
    c034:	685b      	ldr	r3, [r3, #4]
    c036:	4798      	blx	r3
                PMUX_ENABLE(m_stepPorts[motorPair],
    c038:	f996 2002 	ldrsb.w	r2, [r6, #2]
    c03c:	6873      	ldr	r3, [r6, #4]
    c03e:	eb03 13c2 	add.w	r3, r3, r2, lsl #7
    c042:	f103 4382 	add.w	r3, r3, #1090519040	; 0x41000000
    c046:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
            if (newMode == Connector::CPM_MODE_STEP_AND_DIR) {
    c04a:	2d0a      	cmp	r5, #10
                PMUX_ENABLE(m_stepPorts[motorPair],
    c04c:	f893 2040 	ldrb.w	r2, [r3, #64]	; 0x40
            if (newMode == Connector::CPM_MODE_STEP_AND_DIR) {
    c050:	d004      	beq.n	c05c <_ZN9ClearCore12MotorManager12MotorModeSetENS0_9MotorPairENS_9Connector14ConnectorModesE+0xd4>
                PMUX_DISABLE(m_stepPorts[motorPair],
    c052:	f36f 0200 	bfc	r2, #0, #1
    c056:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    c05a:	e7d6      	b.n	c00a <_ZN9ClearCore12MotorManager12MotorModeSetENS0_9MotorPairENS_9Connector14ConnectorModesE+0x82>
                PMUX_ENABLE(m_stepPorts[motorPair],
    c05c:	f042 0201 	orr.w	r2, r2, #1
    c060:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return MotorModeSet(MOTOR_M0M1, newMode) &&
    c064:	7b33      	ldrb	r3, [r6, #12]
    c066:	2b0a      	cmp	r3, #10
    c068:	d1d2      	bne.n	c010 <_ZN9ClearCore12MotorManager12MotorModeSetENS0_9MotorPairENS_9Connector14ConnectorModesE+0x88>
    c06a:	2401      	movs	r4, #1
    c06c:	e7a1      	b.n	bfb2 <_ZN9ClearCore12MotorManager12MotorModeSetENS0_9MotorPairENS_9Connector14ConnectorModesE+0x2a>
    c06e:	bf00      	nop
    c070:	00022a4c 	.word	0x00022a4c

0000c074 <_ZN9ClearCore12MotorManager10InitializeEv>:

void MotorManager::Initialize() {
    c074:	b570      	push	{r4, r5, r6, lr}
    m_motorModes[MOTOR_M0M1] = Connector::CPM_MODE_A_DIRECT_B_DIRECT;
    c076:	2309      	movs	r3, #9
void MotorManager::Initialize() {
    c078:	4605      	mov	r5, r0
    m_motorModes[MOTOR_M0M1] = Connector::CPM_MODE_A_DIRECT_B_DIRECT;
    c07a:	7303      	strb	r3, [r0, #12]
    m_motorModes[MOTOR_M2M3] = Connector::CPM_MODE_A_DIRECT_B_DIRECT;
    c07c:	7343      	strb	r3, [r0, #13]
    MotorInputClocking(CLOCK_RATE_NORMAL); // This will set m_clockRate
    c07e:	2101      	movs	r1, #1
    c080:	f7ff fef2 	bl	be68 <_ZN9ClearCore12MotorManager18MotorInputClockingENS0_15MotorClockRatesE>

    for (uint8_t i = 0; i < NUM_MOTOR_PAIRS; i++) {
        // Configure the GClk output pin that will be used as the CPM step
        // output carrier signal
        PIN_CONFIGURATION(m_stepPorts[i], m_stepDataBits[i],  0);
    c084:	f995 2002 	ldrsb.w	r2, [r5, #2]
    c088:	6868      	ldr	r0, [r5, #4]
    c08a:	01d2      	lsls	r2, r2, #7
    c08c:	f102 4382 	add.w	r3, r2, #1090519040	; 0x41000000
    c090:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
    c094:	181c      	adds	r4, r3, r0
        DATA_OUTPUT_STATE(m_stepPorts[i], 1UL << m_stepDataBits[i], false);
    c096:	2101      	movs	r1, #1
    c098:	4081      	lsls	r1, r0
        PIN_CONFIGURATION(m_stepPorts[i], m_stepDataBits[i],  0);
    c09a:	2600      	movs	r6, #0
    c09c:	f884 6040 	strb.w	r6, [r4, #64]	; 0x40
        DATA_OUTPUT_STATE(m_stepPorts[i], 1UL << m_stepDataBits[i], false);
    c0a0:	6159      	str	r1, [r3, #20]
        PMUX_SELECTION(m_stepPorts[i], m_stepDataBits[i], PER_GCLK_AC);
    c0a2:	eb03 0350 	add.w	r3, r3, r0, lsr #1
    c0a6:	f010 0f01 	tst.w	r0, #1
    c0aa:	f893 0030 	ldrb.w	r0, [r3, #48]	; 0x30
    c0ae:	f04f 040c 	mov.w	r4, #12
    c0b2:	bf0c      	ite	eq
    c0b4:	f364 0003 	bfieq	r0, r4, #0, #4
    c0b8:	f364 1007 	bfine	r0, r4, #4, #4
    c0bc:	f883 0030 	strb.w	r0, [r3, #48]	; 0x30
        DATA_DIRECTION_OUTPUT(m_stepPorts[i], 1UL << m_stepDataBits[i]);
    c0c0:	4b2d      	ldr	r3, [pc, #180]	; (c178 <_ZN9ClearCore12MotorManager10InitializeEv+0x104>)
    c0c2:	441a      	add	r2, r3
        DATA_OUTPUT_STATE(m_stepPorts[i], 1UL << m_stepDataBits[i], false);
    c0c4:	2001      	movs	r0, #1
        DATA_DIRECTION_OUTPUT(m_stepPorts[i], 1UL << m_stepDataBits[i]);
    c0c6:	6091      	str	r1, [r2, #8]
        PIN_CONFIGURATION(m_stepPorts[i], m_stepDataBits[i],  0);
    c0c8:	f995 2003 	ldrsb.w	r2, [r5, #3]
    c0cc:	68a9      	ldr	r1, [r5, #8]
    c0ce:	01d2      	lsls	r2, r2, #7
    c0d0:	4413      	add	r3, r2
    c0d2:	185c      	adds	r4, r3, r1
        DATA_OUTPUT_STATE(m_stepPorts[i], 1UL << m_stepDataBits[i], false);
    c0d4:	4088      	lsls	r0, r1
        PIN_CONFIGURATION(m_stepPorts[i], m_stepDataBits[i],  0);
    c0d6:	2600      	movs	r6, #0
    c0d8:	f884 6040 	strb.w	r6, [r4, #64]	; 0x40
        DATA_OUTPUT_STATE(m_stepPorts[i], 1UL << m_stepDataBits[i], false);
    c0dc:	6158      	str	r0, [r3, #20]
        PMUX_SELECTION(m_stepPorts[i], m_stepDataBits[i], PER_GCLK_AC);
    c0de:	eb03 0351 	add.w	r3, r3, r1, lsr #1
    c0e2:	f011 0f01 	tst.w	r1, #1
    c0e6:	f893 1030 	ldrb.w	r1, [r3, #48]	; 0x30
    c0ea:	4e24      	ldr	r6, [pc, #144]	; (c17c <_ZN9ClearCore12MotorManager10InitializeEv+0x108>)
    c0ec:	f04f 040c 	mov.w	r4, #12
    c0f0:	bf14      	ite	ne
    c0f2:	f364 1107 	bfine	r1, r4, #4, #4
    c0f6:	f364 0103 	bfieq	r1, r4, #0, #4
    c0fa:	f883 1030 	strb.w	r1, [r3, #48]	; 0x30
        DATA_DIRECTION_OUTPUT(m_stepPorts[i], 1UL << m_stepDataBits[i]);
    c0fe:	f102 4382 	add.w	r3, r2, #1090519040	; 0x41000000
    c102:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
    c106:	2400      	movs	r4, #0
    c108:	6098      	str	r0, [r3, #8]
    Helper function to control if the step rate signal is active
**/
void MotorManager::PinMuxSet() {
    // Configure the motor connectors to be in the specified mode
    for (uint8_t iMotor = 0; iMotor < MOTOR_CON_CNT; iMotor++) {
        MotorConnectors[iMotor]->Mode(m_motorModes[iMotor / 2]);
    c10a:	f856 0b04 	ldr.w	r0, [r6], #4
    c10e:	f3c4 0346 	ubfx	r3, r4, #1, #7
    c112:	6802      	ldr	r2, [r0, #0]
    c114:	442b      	add	r3, r5
    c116:	6852      	ldr	r2, [r2, #4]
    c118:	7b19      	ldrb	r1, [r3, #12]
    c11a:	3401      	adds	r4, #1
    c11c:	4790      	blx	r2
    for (uint8_t iMotor = 0; iMotor < MOTOR_CON_CNT; iMotor++) {
    c11e:	2c04      	cmp	r4, #4
    c120:	d1f3      	bne.n	c10a <_ZN9ClearCore12MotorManager10InitializeEv+0x96>
    }

    // Turn on the carrier signals for S&D if needed
    for (uint8_t iMotorPair = 0; iMotorPair < NUM_MOTOR_PAIRS; iMotorPair++) {
        if (m_motorModes[iMotorPair] == Connector::CPM_MODE_STEP_AND_DIR) {
    c122:	7b2b      	ldrb	r3, [r5, #12]
            PMUX_ENABLE(m_stepPorts[iMotorPair], m_stepDataBits[iMotorPair]);
    c124:	f995 2002 	ldrsb.w	r2, [r5, #2]
        if (m_motorModes[iMotorPair] == Connector::CPM_MODE_STEP_AND_DIR) {
    c128:	2b0a      	cmp	r3, #10
            PMUX_ENABLE(m_stepPorts[iMotorPair], m_stepDataBits[iMotorPair]);
    c12a:	686b      	ldr	r3, [r5, #4]
    c12c:	eb03 13c2 	add.w	r3, r3, r2, lsl #7
    c130:	f103 4382 	add.w	r3, r3, #1090519040	; 0x41000000
    c134:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
    c138:	f893 2040 	ldrb.w	r2, [r3, #64]	; 0x40
        }
        else {
            PMUX_DISABLE(m_stepPorts[iMotorPair], m_stepDataBits[iMotorPair]);
    c13c:	bf14      	ite	ne
    c13e:	f36f 0200 	bfcne	r2, #0, #1
            PMUX_ENABLE(m_stepPorts[iMotorPair], m_stepDataBits[iMotorPair]);
    c142:	f042 0201 	orreq.w	r2, r2, #1
    c146:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        if (m_motorModes[iMotorPair] == Connector::CPM_MODE_STEP_AND_DIR) {
    c14a:	7b6b      	ldrb	r3, [r5, #13]
            PMUX_ENABLE(m_stepPorts[iMotorPair], m_stepDataBits[iMotorPair]);
    c14c:	f995 2003 	ldrsb.w	r2, [r5, #3]
        if (m_motorModes[iMotorPair] == Connector::CPM_MODE_STEP_AND_DIR) {
    c150:	2b0a      	cmp	r3, #10
            PMUX_ENABLE(m_stepPorts[iMotorPair], m_stepDataBits[iMotorPair]);
    c152:	68ab      	ldr	r3, [r5, #8]
    c154:	eb03 13c2 	add.w	r3, r3, r2, lsl #7
    c158:	f103 4382 	add.w	r3, r3, #1090519040	; 0x41000000
    c15c:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
    c160:	f893 2040 	ldrb.w	r2, [r3, #64]	; 0x40
    c164:	bf0c      	ite	eq
    c166:	f042 0201 	orreq.w	r2, r2, #1
            PMUX_DISABLE(m_stepPorts[iMotorPair], m_stepDataBits[iMotorPair]);
    c16a:	f36f 0200 	bfcne	r2, #0, #1
    c16e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    m_initialized = true;
    c172:	2301      	movs	r3, #1
    c174:	73ab      	strb	r3, [r5, #14]
    c176:	bd70      	pop	{r4, r5, r6, pc}
    c178:	41008000 	.word	0x41008000
    c17c:	00022a4c 	.word	0x00022a4c

0000c180 <_GLOBAL__sub_I__ZN9ClearCore8MotorMgrE>:
        }
    }
}

    c180:	b508      	push	{r3, lr}
MotorManager &MotorMgr = MotorManager::Instance();
    c182:	f7ff fe4f 	bl	be24 <_ZN9ClearCore12MotorManager8InstanceEv>
    c186:	4b01      	ldr	r3, [pc, #4]	; (c18c <_GLOBAL__sub_I__ZN9ClearCore8MotorMgrE+0xc>)
    c188:	6018      	str	r0, [r3, #0]
    c18a:	bd08      	pop	{r3, pc}
    c18c:	20001d38 	.word	0x20001d38

0000c190 <_ZN9ClearCore13StepGenerator4MoveElNS0_10MoveTargetE>:
/*
    This function commands a directional move.

    The function will return true if the move was accepted.
*/
bool StepGenerator::Move(int32_t dist, MoveTarget moveTarget) {
    c190:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    c192:	4604      	mov	r4, r0
  __ASM volatile ("cpsid i" : : : "memory");
    c194:	b672      	cpsid	i

    // Block the interrupt while changing the command
    __disable_irq();
    // Make relative moves be based off of current position during a velocity
    // move
    if (m_velocityMove) {
    c196:	f890 3020 	ldrb.w	r3, [r0, #32]
    c19a:	b113      	cbz	r3, c1a2 <_ZN9ClearCore13StepGenerator4MoveElNS0_10MoveTargetE+0x12>
        m_stepsCommanded = 0;
    c19c:	2300      	movs	r3, #0
    c19e:	6183      	str	r3, [r0, #24]
        m_stepsSent = 0;
    c1a0:	61c3      	str	r3, [r0, #28]
    }
    switch (moveTarget) {
    c1a2:	b362      	cbz	r2, c1fe <_ZN9ClearCore13StepGenerator4MoveElNS0_10MoveTargetE+0x6e>
            // overflow, the scale shifts by the number of steps taken
            // So account for this, the current steps should be taken off of the
            // previous commanded amount, then the new command should be added
            // The steps send are in the direction of the commanded steps, subtract
            // that first. Steps taken is always less than commanded, result (+)
            m_stepsCommanded -= m_stepsSent;
    c1a4:	69a0      	ldr	r0, [r4, #24]
    c1a6:	69e2      	ldr	r2, [r4, #28]
            // Convert magnitude + direction format to signed int
            m_stepsCommanded = m_direction ? -m_stepsCommanded : m_stepsCommanded ;
    c1a8:	7b63      	ldrb	r3, [r4, #13]
            m_stepsCommanded -= m_stepsSent;
    c1aa:	1a80      	subs	r0, r0, r2
            m_stepsCommanded = m_direction ? -m_stepsCommanded : m_stepsCommanded ;
    c1ac:	bb2b      	cbnz	r3, c1fa <_ZN9ClearCore13StepGenerator4MoveElNS0_10MoveTargetE+0x6a>
            // Now stepsCommanded and distance are signed and in the global
            // direction. Add them
            m_stepsCommanded += dist;
    c1ae:	4408      	add	r0, r1
    // reduce chance of overflow
    m_stepsSent = 0;

    // Zero the integer portion of the current position. We want to keep
    // partial steps so movement is smooth.
    m_posnCurrentQx = m_posnCurrentQx & ~(UINT64_MAX << FRACT_BITS);
    c1b0:	e9d4 230e 	ldrd	r2, r3, [r4, #56]	; 0x38
    c1b4:	f647 76ff 	movw	r6, #32767	; 0x7fff
    c1b8:	2700      	movs	r7, #0
    c1ba:	4032      	ands	r2, r6
    c1bc:	403b      	ands	r3, r7
    m_stepsSent = 0;
    c1be:	2500      	movs	r5, #0

    // Determine the direction of the movements.
    m_dirCommanded = m_stepsCommanded < 0;
    c1c0:	0fc1      	lsrs	r1, r0, #31
    m_posnCurrentQx = m_posnCurrentQx & ~(UINT64_MAX << FRACT_BITS);
    c1c2:	e9c4 230e 	strd	r2, r3, [r4, #56]	; 0x38
    m_stepsSent = 0;
    c1c6:	61e5      	str	r5, [r4, #28]
    m_dirCommanded = m_stepsCommanded < 0;
    c1c8:	f884 1022 	strb.w	r1, [r4, #34]	; 0x22
  template<typename _Tp>
    inline _GLIBCXX_CONSTEXPR
    typename __gnu_cxx::__enable_if<__is_integer<_Tp>::__value,
                                    double>::__type
    abs(_Tp __x)
    { return __builtin_fabs(__x); }
    c1cc:	f00f fabc 	bl	1b748 <__aeabi_i2d>
    c1d0:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000

    // Steps commanded now needs to be a positive value.
    m_stepsCommanded = abs(m_stepsCommanded);
    c1d4:	4619      	mov	r1, r3
    c1d6:	f00f fdb7 	bl	1bd48 <__aeabi_d2iz>
            Used to latch limits so a move followed immediate by a limit change
            is not used until the next move
        **/
        void UpdatePendingMoveLimits()
        {
            m_velLimitQx = m_velLimitPendingQx;
    c1da:	6e27      	ldr	r7, [r4, #96]	; 0x60
            m_altVelLimitQx = m_altVelLimitPendingQx;
    c1dc:	6e66      	ldr	r6, [r4, #100]	; 0x64
            m_accelLimitQx = m_accelLimitPendingQx;
    c1de:	6ea1      	ldr	r1, [r4, #104]	; 0x68
            m_altDecelLimitQx = m_altDecelLimitPendingQx;
    c1e0:	6ee2      	ldr	r2, [r4, #108]	; 0x6c

    m_velocityMove = false;
    c1e2:	f884 5020 	strb.w	r5, [r4, #32]
    UpdatePendingMoveLimits();
    m_moveState = MS_START;
    c1e6:	2301      	movs	r3, #1
    m_stepsCommanded = abs(m_stepsCommanded);
    c1e8:	61a0      	str	r0, [r4, #24]
            m_velLimitQx = m_velLimitPendingQx;
    c1ea:	6267      	str	r7, [r4, #36]	; 0x24
            m_altVelLimitQx = m_altVelLimitPendingQx;
    c1ec:	62a6      	str	r6, [r4, #40]	; 0x28
            m_accelLimitQx = m_accelLimitPendingQx;
    c1ee:	62e1      	str	r1, [r4, #44]	; 0x2c
            m_altDecelLimitQx = m_altDecelLimitPendingQx;
    c1f0:	6322      	str	r2, [r4, #48]	; 0x30
    m_moveState = MS_START;
    c1f2:	7323      	strb	r3, [r4, #12]
  __ASM volatile ("cpsie i" : : : "memory");
    c1f4:	b662      	cpsie	i

    __enable_irq();
    return true;
}
    c1f6:	4618      	mov	r0, r3
    c1f8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
            m_stepsCommanded = m_direction ? -m_stepsCommanded : m_stepsCommanded ;
    c1fa:	4240      	negs	r0, r0
    c1fc:	e7d7      	b.n	c1ae <_ZN9ClearCore13StepGenerator4MoveElNS0_10MoveTargetE+0x1e>
            m_stepsCommanded = dist - m_posnAbsolute;
    c1fe:	6960      	ldr	r0, [r4, #20]
    c200:	1a08      	subs	r0, r1, r0
            break;
    c202:	e7d5      	b.n	c1b0 <_ZN9ClearCore13StepGenerator4MoveElNS0_10MoveTargetE+0x20>

0000c204 <_ZN9ClearCore13StepGenerator12MoveVelocityEl>:

/*
    This function commands a velocity move.
    If there is a current move, it will be overwritten.
*/
bool StepGenerator::MoveVelocity(int32_t velocity) {
    c204:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    c206:	4604      	mov	r4, r0
  __ASM volatile ("cpsid i" : : : "memory");
    c208:	b672      	cpsid	i
    // Block the interrupt while changing the command
    __disable_irq();
    m_dirCommanded = (velocity < 0);

    m_velocityMove = true;
    c20a:	2301      	movs	r3, #1
    m_dirCommanded = (velocity < 0);
    c20c:	0fca      	lsrs	r2, r1, #31
    c20e:	f880 2022 	strb.w	r2, [r0, #34]	; 0x22
    m_velocityMove = true;
    c212:	f884 3020 	strb.w	r3, [r4, #32]
    c216:	4608      	mov	r0, r1
    c218:	f00f fa96 	bl	1b748 <__aeabi_i2d>
    c21c:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000

    int32_t velAbsolute = abs(velocity);
    c220:	4619      	mov	r1, r3
    c222:	f00f fd91 	bl	1bd48 <__aeabi_d2iz>
    and sets AltVelLimitQx in step pulses/sample time.
*/
void StepGenerator::AltVelMax(int32_t velMax) {
    // Convert from step pulses/sec to step pulses/sample
    int64_t velLim64 =
        (static_cast<int64_t>(velMax) << FRACT_BITS) / SampleRateHz;
    c226:	17c3      	asrs	r3, r0, #31
    c228:	03d9      	lsls	r1, r3, #15
    c22a:	ea41 4150 	orr.w	r1, r1, r0, lsr #17
    c22e:	f241 3288 	movw	r2, #5000	; 0x1388
    c232:	2300      	movs	r3, #0
    c234:	03c0      	lsls	r0, r0, #15
    c236:	f00f ff2d 	bl	1c094 <__aeabi_ldivmod>
    // Enforce the max steps per sample time
    velLim64 =
        min(velLim64, static_cast<int64_t>(m_stepsPerSampleMax) << FRACT_BITS);
    c23a:	68a3      	ldr	r3, [r4, #8]
    // Ensure we didn't overflow 32-bit int
    m_altVelLimitPendingQx = min(velLim64, INT32_MAX);
    c23c:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
        min(velLim64, static_cast<int64_t>(m_stepsPerSampleMax) << FRACT_BITS);
    c240:	03de      	lsls	r6, r3, #15
    c242:	0c5f      	lsrs	r7, r3, #17
    m_altVelLimitPendingQx = min(velLim64, INT32_MAX);
    c244:	42b2      	cmp	r2, r6
    c246:	f04f 0300 	mov.w	r3, #0
    c24a:	eb73 0507 	sbcs.w	r5, r3, r7
    c24e:	bfbc      	itt	lt
    c250:	4616      	movlt	r6, r2
    c252:	461f      	movlt	r7, r3
    c254:	4286      	cmp	r6, r0
    c256:	460b      	mov	r3, r1
    c258:	4602      	mov	r2, r0
    c25a:	eb77 0103 	sbcs.w	r1, r7, r3
    m_posnCurrentQx &= ~(UINT64_MAX << FRACT_BITS);
    c25e:	e9d4 010e 	ldrd	r0, r1, [r4, #56]	; 0x38
    m_altVelLimitPendingQx = min(velLim64, INT32_MAX);
    c262:	bfb8      	it	lt
    c264:	4632      	movlt	r2, r6
    m_posnCurrentQx &= ~(UINT64_MAX << FRACT_BITS);
    c266:	2700      	movs	r7, #0
    c268:	f647 76ff 	movw	r6, #32767	; 0x7fff
    c26c:	4030      	ands	r0, r6
    c26e:	4039      	ands	r1, r7
            m_velLimitQx = m_velLimitPendingQx;
    c270:	6e26      	ldr	r6, [r4, #96]	; 0x60
            m_accelLimitQx = m_accelLimitPendingQx;
    c272:	6ea5      	ldr	r5, [r4, #104]	; 0x68
            m_altDecelLimitQx = m_altDecelLimitPendingQx;
    c274:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
    m_altVelLimitPendingQx = min(velLim64, INT32_MAX);
    c276:	6662      	str	r2, [r4, #100]	; 0x64
            m_altVelLimitQx = m_altVelLimitPendingQx;
    c278:	62a2      	str	r2, [r4, #40]	; 0x28
    m_stepsCommanded = INT32_MAX;
    c27a:	f06f 4700 	mvn.w	r7, #2147483648	; 0x80000000
    m_stepsSent = 0;
    c27e:	2200      	movs	r2, #0
    m_posnCurrentQx &= ~(UINT64_MAX << FRACT_BITS);
    c280:	e9c4 010e 	strd	r0, r1, [r4, #56]	; 0x38
    m_moveState = MS_START;
    c284:	2001      	movs	r0, #1
            m_velLimitQx = m_velLimitPendingQx;
    c286:	6266      	str	r6, [r4, #36]	; 0x24
            m_accelLimitQx = m_accelLimitPendingQx;
    c288:	62e5      	str	r5, [r4, #44]	; 0x2c
            m_altDecelLimitQx = m_altDecelLimitPendingQx;
    c28a:	6323      	str	r3, [r4, #48]	; 0x30
    m_stepsCommanded = INT32_MAX;
    c28c:	61a7      	str	r7, [r4, #24]
    m_stepsSent = 0;
    c28e:	61e2      	str	r2, [r4, #28]
    m_moveState = MS_START;
    c290:	7320      	strb	r0, [r4, #12]
  __ASM volatile ("cpsie i" : : : "memory");
    c292:	b662      	cpsie	i
}
    c294:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    c296:	bf00      	nop

0000c298 <_ZN9ClearCore13StepGenerator15StepsCalculatedEv>:
void StepGenerator::StepsCalculated() {
    c298:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    if (m_moveState == MS_START) {
    c29c:	7b03      	ldrb	r3, [r0, #12]
void StepGenerator::StepsCalculated() {
    c29e:	ed2d 8b02 	vpush	{d8}
    if (m_moveState == MS_START) {
    c2a2:	2b01      	cmp	r3, #1
void StepGenerator::StepsCalculated() {
    c2a4:	b085      	sub	sp, #20
    c2a6:	4604      	mov	r4, r0
    if (m_moveState == MS_START) {
    c2a8:	d038      	beq.n	c31c <_ZN9ClearCore13StepGenerator15StepsCalculatedEv+0x84>
    switch (m_moveState) {
    c2aa:	2b07      	cmp	r3, #7
    c2ac:	f200 80da 	bhi.w	c464 <_ZN9ClearCore13StepGenerator15StepsCalculatedEv+0x1cc>
    c2b0:	e8df f013 	tbh	[pc, r3, lsl #1]
    c2b4:	00d8002f 	.word	0x00d8002f
    c2b8:	00be01d7 	.word	0x00be01d7
    c2bc:	025f0086 	.word	0x025f0086
    c2c0:	000800d8 	.word	0x000800d8
            if (m_direction == m_dirCommanded) {
    c2c4:	7b41      	ldrb	r1, [r0, #13]
    c2c6:	f890 3022 	ldrb.w	r3, [r0, #34]	; 0x22
    c2ca:	428b      	cmp	r3, r1
    c2cc:	f000 822d 	beq.w	c72a <_ZN9ClearCore13StepGenerator15StepsCalculatedEv+0x492>
                m_stepsCommanded += m_stepsSent;
    c2d0:	6980      	ldr	r0, [r0, #24]
    c2d2:	69e3      	ldr	r3, [r4, #28]
    c2d4:	4418      	add	r0, r3
            m_posnCurrentQx = m_posnCurrentQx & ~(UINT64_MAX << FRACT_BITS);
    c2d6:	e9d4 670e 	ldrd	r6, r7, [r4, #56]	; 0x38
    c2da:	f647 72ff 	movw	r2, #32767	; 0x7fff
    c2de:	2300      	movs	r3, #0
    c2e0:	4016      	ands	r6, r2
    c2e2:	401f      	ands	r7, r3
    c2e4:	e9c4 670e 	strd	r6, r7, [r4, #56]	; 0x38
            m_dirCommanded = !m_direction;
    c2e8:	f081 0201 	eor.w	r2, r1, #1
            m_moveState = MS_START;
    c2ec:	2501      	movs	r5, #1
            m_moveDirChange = false;
    c2ee:	2300      	movs	r3, #0
    c2f0:	61a0      	str	r0, [r4, #24]
            m_dirCommanded = !m_direction;
    c2f2:	f884 2022 	strb.w	r2, [r4, #34]	; 0x22
            m_moveState = MS_START;
    c2f6:	7325      	strb	r5, [r4, #12]
            m_moveDirChange = false;
    c2f8:	f884 3021 	strb.w	r3, [r4, #33]	; 0x21
    m_stepsPrevious = (m_posnCurrentQx >> FRACT_BITS) - m_stepsSent;
    c2fc:	0bf2      	lsrs	r2, r6, #15
    c2fe:	ea42 4247 	orr.w	r2, r2, r7, lsl #17
    c302:	1ad3      	subs	r3, r2, r3
    m_stepsSent += m_stepsPrevious;
    c304:	61e2      	str	r2, [r4, #28]
    m_stepsPrevious = (m_posnCurrentQx >> FRACT_BITS) - m_stepsSent;
    c306:	6063      	str	r3, [r4, #4]
    m_posnAbsolute += m_direction ? -m_stepsPrevious : m_stepsPrevious;
    c308:	6962      	ldr	r2, [r4, #20]
    c30a:	b101      	cbz	r1, c30e <_ZN9ClearCore13StepGenerator15StepsCalculatedEv+0x76>
    c30c:	425b      	negs	r3, r3
    c30e:	4413      	add	r3, r2
    c310:	6163      	str	r3, [r4, #20]
}
    c312:	b005      	add	sp, #20
    c314:	ecbd 8b02 	vpop	{d8}
    c318:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        m_posnTargetQx = static_cast<int64_t>(m_stepsCommanded)
    c31c:	6982      	ldr	r2, [r0, #24]
        if (m_velocityMove) {
    c31e:	f890 1020 	ldrb.w	r1, [r0, #32]
        m_accelCurrentQx = m_accelLimitQx;
    c322:	f8d0 902c 	ldr.w	r9, [r0, #44]	; 0x2c
    c326:	f8c0 9044 	str.w	r9, [r0, #68]	; 0x44
                         << FRACT_BITS;
    c32a:	1457      	asrs	r7, r2, #17
    c32c:	03d6      	lsls	r6, r2, #15
        m_posnTargetQx = static_cast<int64_t>(m_stepsCommanded)
    c32e:	e9c0 6712 	strd	r6, r7, [r0, #72]	; 0x48
        if (m_velocityMove) {
    c332:	2900      	cmp	r1, #0
    c334:	d163      	bne.n	c3fe <_ZN9ClearCore13StepGenerator15StepsCalculatedEv+0x166>
            if (m_velCurrentQx) {
    c336:	6c05      	ldr	r5, [r0, #64]	; 0x40
    c338:	2d00      	cmp	r5, #0
    c33a:	f000 8117 	beq.w	c56c <_ZN9ClearCore13StepGenerator15StepsCalculatedEv+0x2d4>
                if (m_direction == m_dirCommanded) {
    c33e:	7b41      	ldrb	r1, [r0, #13]
    c340:	f890 2022 	ldrb.w	r2, [r0, #34]	; 0x22
    c344:	9100      	str	r1, [sp, #0]
    c346:	4291      	cmp	r1, r2
    c348:	f000 81f8 	beq.w	c73c <_ZN9ClearCore13StepGenerator15StepsCalculatedEv+0x4a4>
                    m_moveDirChange = true;
    c34c:	f880 3021 	strb.w	r3, [r0, #33]	; 0x21
                m_velTargetQx = 0;
    c350:	2000      	movs	r0, #0
                m_moveState = MS_DECEL_VEL;
    c352:	2305      	movs	r3, #5
    c354:	7323      	strb	r3, [r4, #12]
                m_velTargetQx = 0;
    c356:	6520      	str	r0, [r4, #80]	; 0x50
    c358:	4682      	mov	sl, r0
            m_posnCurrentQx += m_velCurrentQx - (m_accelCurrentQx >> 1);
    c35a:	e9d4 670e 	ldrd	r6, r7, [r4, #56]	; 0x38
    c35e:	eba5 0369 	sub.w	r3, r5, r9, asr #1
    c362:	18f6      	adds	r6, r6, r3
            m_velCurrentQx -= m_accelCurrentQx;
    c364:	eba5 0509 	sub.w	r5, r5, r9
            m_posnCurrentQx += m_velCurrentQx - (m_accelCurrentQx >> 1);
    c368:	eb47 77e3 	adc.w	r7, r7, r3, asr #31
            if (m_velCurrentQx <= m_velTargetQx) {
    c36c:	4555      	cmp	r5, sl
            m_posnCurrentQx += m_velCurrentQx - (m_accelCurrentQx >> 1);
    c36e:	e9c4 670e 	strd	r6, r7, [r4, #56]	; 0x38
            m_velCurrentQx -= m_accelCurrentQx;
    c372:	6425      	str	r5, [r4, #64]	; 0x40
            if (m_velCurrentQx <= m_velTargetQx) {
    c374:	f300 80ab 	bgt.w	c4ce <_ZN9ClearCore13StepGenerator15StepsCalculatedEv+0x236>
                    m_accelCurrentQx;
    c378:	464a      	mov	r2, r9
                uint32_t overshootQx = m_velTargetQx - m_velCurrentQx;
    c37a:	ebaa 0505 	sub.w	r5, sl, r5
                    ((static_cast<uint64_t>(overshootQx)) << 32) /
    c37e:	f04f 0900 	mov.w	r9, #0
                    m_accelCurrentQx;
    c382:	17d3      	asrs	r3, r2, #31
                m_velCurrentQx = m_velTargetQx;
    c384:	f8c4 a040 	str.w	sl, [r4, #64]	; 0x40
                    ((static_cast<uint64_t>(overshootQx)) << 32) /
    c388:	4629      	mov	r1, r5
    c38a:	4648      	mov	r0, r9
                    m_accelCurrentQx;
    c38c:	e9cd 2302 	strd	r2, r3, [sp, #8]
                    ((static_cast<uint64_t>(overshootQx)) << 32) /
    c390:	f00f fed0 	bl	1c134 <__aeabi_uldivmod>
    c394:	17eb      	asrs	r3, r5, #31
                    (static_cast<uint64_t>(pctSampleOverQ32) * overshootQx) >>
    c396:	fba0 bc05 	umull	fp, ip, r0, r5
    c39a:	fb00 cc03 	mla	ip, r0, r3, ip
    c39e:	ea4f 025c 	mov.w	r2, ip, lsr #1
                m_posnCurrentQx += posnAdjQx;
    c3a2:	18b6      	adds	r6, r6, r2
                if (m_moveDirChange) {
    c3a4:	f894 1021 	ldrb.w	r1, [r4, #33]	; 0x21
                m_posnCurrentQx += posnAdjQx;
    c3a8:	eb47 0709 	adc.w	r7, r7, r9
    c3ac:	e9c4 670e 	strd	r6, r7, [r4, #56]	; 0x38
                if (m_moveDirChange) {
    c3b0:	2900      	cmp	r1, #0
    c3b2:	f000 816e 	beq.w	c692 <_ZN9ClearCore13StepGenerator15StepsCalculatedEv+0x3fa>
                    m_moveState = MS_CHANGE_DIR;
    c3b6:	2307      	movs	r3, #7
    c3b8:	7323      	strb	r3, [r4, #12]
    c3ba:	9900      	ldr	r1, [sp, #0]
    c3bc:	69e3      	ldr	r3, [r4, #28]
    c3be:	e79d      	b.n	c2fc <_ZN9ClearCore13StepGenerator15StepsCalculatedEv+0x64>
            m_posnCurrentQx += m_velCurrentQx - (m_accelCurrentQx >> 1);
    c3c0:	6c01      	ldr	r1, [r0, #64]	; 0x40
    c3c2:	6c40      	ldr	r0, [r0, #68]	; 0x44
    c3c4:	e9d4 230e 	ldrd	r2, r3, [r4, #56]	; 0x38
            if ((m_posnCurrentQx >= m_posnTargetQx) || (m_velCurrentQx <= 0) ||
    c3c8:	e9d4 6712 	ldrd	r6, r7, [r4, #72]	; 0x48
            m_posnCurrentQx += m_velCurrentQx - (m_accelCurrentQx >> 1);
    c3cc:	eba1 0560 	sub.w	r5, r1, r0, asr #1
    c3d0:	1952      	adds	r2, r2, r5
    c3d2:	eb43 73e5 	adc.w	r3, r3, r5, asr #31
            if ((m_posnCurrentQx >= m_posnTargetQx) || (m_velCurrentQx <= 0) ||
    c3d6:	42b2      	cmp	r2, r6
            m_velCurrentQx -= m_accelCurrentQx;
    c3d8:	eba1 0100 	sub.w	r1, r1, r0
            if ((m_posnCurrentQx >= m_posnTargetQx) || (m_velCurrentQx <= 0) ||
    c3dc:	eb73 0007 	sbcs.w	r0, r3, r7
            m_velCurrentQx -= m_accelCurrentQx;
    c3e0:	6421      	str	r1, [r4, #64]	; 0x40
            m_posnCurrentQx += m_velCurrentQx - (m_accelCurrentQx >> 1);
    c3e2:	e9c4 230e 	strd	r2, r3, [r4, #56]	; 0x38
            if ((m_posnCurrentQx >= m_posnTargetQx) || (m_velCurrentQx <= 0) ||
    c3e6:	da54      	bge.n	c492 <_ZN9ClearCore13StepGenerator15StepsCalculatedEv+0x1fa>
    c3e8:	2900      	cmp	r1, #0
    c3ea:	dd52      	ble.n	c492 <_ZN9ClearCore13StepGenerator15StepsCalculatedEv+0x1fa>
    c3ec:	2a01      	cmp	r2, #1
    c3ee:	f173 0100 	sbcs.w	r1, r3, #0
    c3f2:	db4e      	blt.n	c492 <_ZN9ClearCore13StepGenerator15StepsCalculatedEv+0x1fa>
    c3f4:	461f      	mov	r7, r3
    c3f6:	4616      	mov	r6, r2
    c3f8:	69e3      	ldr	r3, [r4, #28]
    c3fa:	7b61      	ldrb	r1, [r4, #13]
    c3fc:	e77e      	b.n	c2fc <_ZN9ClearCore13StepGenerator15StepsCalculatedEv+0x64>
            if (m_altVelLimitQx && m_velCurrentQx && m_direction != m_dirCommanded) {
    c3fe:	6a83      	ldr	r3, [r0, #40]	; 0x28
    c400:	6c05      	ldr	r5, [r0, #64]	; 0x40
    c402:	2b00      	cmp	r3, #0
    c404:	f000 80a1 	beq.w	c54a <_ZN9ClearCore13StepGenerator15StepsCalculatedEv+0x2b2>
    c408:	2d00      	cmp	r5, #0
    c40a:	f040 8130 	bne.w	c66e <_ZN9ClearCore13StepGenerator15StepsCalculatedEv+0x3d6>
    c40e:	f890 2022 	ldrb.w	r2, [r0, #34]	; 0x22
                OutputDirection();
    c412:	6820      	ldr	r0, [r4, #0]
    c414:	6523      	str	r3, [r4, #80]	; 0x50
    c416:	2100      	movs	r1, #0
    c418:	6883      	ldr	r3, [r0, #8]
                m_direction = m_dirCommanded;
    c41a:	7362      	strb	r2, [r4, #13]
    c41c:	f884 1021 	strb.w	r1, [r4, #33]	; 0x21
                OutputDirection();
    c420:	4620      	mov	r0, r4
    c422:	4798      	blx	r3
    c424:	7b63      	ldrb	r3, [r4, #13]
    c426:	f8d4 a050 	ldr.w	sl, [r4, #80]	; 0x50
    c42a:	6c25      	ldr	r5, [r4, #64]	; 0x40
    c42c:	9300      	str	r3, [sp, #0]
    c42e:	e094      	b.n	c55a <_ZN9ClearCore13StepGenerator15StepsCalculatedEv+0x2c2>
    c430:	e9d0 670e 	ldrd	r6, r7, [r0, #56]	; 0x38
    c434:	7b43      	ldrb	r3, [r0, #13]
    c436:	f8d0 a040 	ldr.w	sl, [r0, #64]	; 0x40
    c43a:	9300      	str	r3, [sp, #0]
            m_posnCurrentQx += m_velCurrentQx;
    c43c:	4652      	mov	r2, sl
    c43e:	eb16 060a 	adds.w	r6, r6, sl
    c442:	ea4f 73e2 	mov.w	r3, r2, asr #31
            if (m_velocityMove) {
    c446:	f894 1020 	ldrb.w	r1, [r4, #32]
            m_posnCurrentQx += m_velCurrentQx;
    c44a:	415f      	adcs	r7, r3
    c44c:	e9c4 670e 	strd	r6, r7, [r4, #56]	; 0x38
            if (m_velocityMove) {
    c450:	2900      	cmp	r1, #0
    c452:	d03f      	beq.n	c4d4 <_ZN9ClearCore13StepGenerator15StepsCalculatedEv+0x23c>
                if (!m_velCurrentQx) {
    c454:	f1ba 0f00 	cmp.w	sl, #0
    c458:	d139      	bne.n	c4ce <_ZN9ClearCore13StepGenerator15StepsCalculatedEv+0x236>
                    m_moveState = MS_END;
    c45a:	2306      	movs	r3, #6
    c45c:	7323      	strb	r3, [r4, #12]
    c45e:	9900      	ldr	r1, [sp, #0]
    c460:	69e3      	ldr	r3, [r4, #28]
    c462:	e74b      	b.n	c2fc <_ZN9ClearCore13StepGenerator15StepsCalculatedEv+0x64>
            m_limitInfo.LimitRampPos = false;
    c464:	7c02      	ldrb	r2, [r0, #16]
            m_velCurrentQx = 0;
    c466:	2300      	movs	r3, #0
            m_limitInfo.LimitRampNeg = false;
    c468:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
    c46c:	f363 0241 	bfi	r2, r3, #1, #1
            m_posnCurrentQx = 0;
    c470:	2000      	movs	r0, #0
    c472:	2100      	movs	r1, #0
            m_limitInfo.LimitRampNeg = false;
    c474:	7422      	strb	r2, [r4, #16]
            m_velCurrentQx = 0;
    c476:	6423      	str	r3, [r4, #64]	; 0x40
            m_stepsSent = 0;
    c478:	61e3      	str	r3, [r4, #28]
            m_stepsPrevious = 0;
    c47a:	6063      	str	r3, [r4, #4]
            m_stepsCommanded = 0;
    c47c:	61a3      	str	r3, [r4, #24]
            m_moveState = MS_IDLE;
    c47e:	7323      	strb	r3, [r4, #12]
            m_velocityMove = false;
    c480:	f884 3020 	strb.w	r3, [r4, #32]
            m_posnCurrentQx = 0;
    c484:	e9c4 010e 	strd	r0, r1, [r4, #56]	; 0x38
}
    c488:	b005      	add	sp, #20
    c48a:	ecbd 8b02 	vpop	{d8}
    c48e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
                m_accelCurrentQx = 0;
    c492:	2300      	movs	r3, #0
                m_moveState = MS_END;
    c494:	2206      	movs	r2, #6
                m_accelCurrentQx = 0;
    c496:	6463      	str	r3, [r4, #68]	; 0x44
                m_velCurrentQx = 0;
    c498:	6423      	str	r3, [r4, #64]	; 0x40
                m_posnCurrentQx = m_posnTargetQx;
    c49a:	e9c4 670e 	strd	r6, r7, [r4, #56]	; 0x38
                m_moveState = MS_END;
    c49e:	7322      	strb	r2, [r4, #12]
    c4a0:	69e3      	ldr	r3, [r4, #28]
    c4a2:	7b61      	ldrb	r1, [r4, #13]
    c4a4:	e72a      	b.n	c2fc <_ZN9ClearCore13StepGenerator15StepsCalculatedEv+0x64>
                m_moveState = MS_ACCEL;
    c4a6:	2302      	movs	r3, #2
    c4a8:	7323      	strb	r3, [r4, #12]
            m_posnCurrentQx += m_velCurrentQx + (m_accelCurrentQx >> 1);
    c4aa:	e9d4 670e 	ldrd	r6, r7, [r4, #56]	; 0x38
    c4ae:	6c63      	ldr	r3, [r4, #68]	; 0x44
    c4b0:	eb05 0263 	add.w	r2, r5, r3, asr #1
    c4b4:	18b6      	adds	r6, r6, r2
            m_velCurrentQx += m_accelCurrentQx;
    c4b6:	441d      	add	r5, r3
            m_posnCurrentQx += m_velCurrentQx + (m_accelCurrentQx >> 1);
    c4b8:	eb47 77e2 	adc.w	r7, r7, r2, asr #31
            if (m_velCurrentQx >= m_velTargetQx || m_velCurrentQx <= 0) {
    c4bc:	4555      	cmp	r5, sl
            m_velCurrentQx += m_accelCurrentQx;
    c4be:	6425      	str	r5, [r4, #64]	; 0x40
            m_posnCurrentQx += m_velCurrentQx + (m_accelCurrentQx >> 1);
    c4c0:	e9c4 670e 	strd	r6, r7, [r4, #56]	; 0x38
            if (m_velCurrentQx >= m_velTargetQx || m_velCurrentQx <= 0) {
    c4c4:	f280 80a2 	bge.w	c60c <_ZN9ClearCore13StepGenerator15StepsCalculatedEv+0x374>
    c4c8:	2d00      	cmp	r5, #0
    c4ca:	f340 809f 	ble.w	c60c <_ZN9ClearCore13StepGenerator15StepsCalculatedEv+0x374>
    c4ce:	9900      	ldr	r1, [sp, #0]
    c4d0:	69e3      	ldr	r3, [r4, #28]
    c4d2:	e713      	b.n	c2fc <_ZN9ClearCore13StepGenerator15StepsCalculatedEv+0x64>
            if (m_posnCurrentQx >= m_posnDecelQx || m_posnCurrentQx <= 0) {
    c4d4:	e9d4 0116 	ldrd	r0, r1, [r4, #88]	; 0x58
    c4d8:	4286      	cmp	r6, r0
    c4da:	eb77 0501 	sbcs.w	r5, r7, r1
    c4de:	da03      	bge.n	c4e8 <_ZN9ClearCore13StepGenerator15StepsCalculatedEv+0x250>
    c4e0:	2e01      	cmp	r6, #1
    c4e2:	f177 0500 	sbcs.w	r5, r7, #0
    c4e6:	daf2      	bge.n	c4ce <_ZN9ClearCore13StepGenerator15StepsCalculatedEv+0x236>
                    (overshootQx << 32) / m_velCurrentQx;
    c4e8:	2500      	movs	r5, #0
    c4ea:	1a31      	subs	r1, r6, r0
    c4ec:	4628      	mov	r0, r5
    c4ee:	f00f fe21 	bl	1c134 <__aeabi_uldivmod>
                                     m_accelCurrentQx) >> 32;
    c4f2:	6c62      	ldr	r2, [r4, #68]	; 0x44
                uint32_t velAdjQx = (static_cast<uint64_t>(pctSampleOverQ32) *
    c4f4:	fba2 8900 	umull	r8, r9, r2, r0
                                     m_accelCurrentQx) >> 32;
    c4f8:	17d3      	asrs	r3, r2, #31
                uint32_t velAdjQx = (static_cast<uint64_t>(pctSampleOverQ32) *
    c4fa:	fb00 9e03 	mla	lr, r0, r3, r9
    c4fe:	4683      	mov	fp, r0
                    (static_cast<uint64_t>(pctSampleOverQ32) * velAdjQx) >> 33;
    c500:	fbae 230b 	umull	r2, r3, lr, fp
                uint32_t velAdjQx = (static_cast<uint64_t>(pctSampleOverQ32) *
    c504:	f04f 0c00 	mov.w	ip, #0
                    (static_cast<uint64_t>(pctSampleOverQ32) * velAdjQx) >> 33;
    c508:	fb0e 330c 	mla	r3, lr, ip, r3
    c50c:	0858      	lsrs	r0, r3, #1
                m_posnCurrentQx -= posnAdjQx;
    c50e:	1a32      	subs	r2, r6, r0
    c510:	eb67 0305 	sbc.w	r3, r7, r5
                if ((m_posnCurrentQx >= m_posnTargetQx) ||
    c514:	e9d4 6712 	ldrd	r6, r7, [r4, #72]	; 0x48
    c518:	42b2      	cmp	r2, r6
                m_velCurrentQx -= velAdjQx;
    c51a:	ebaa 000e 	sub.w	r0, sl, lr
                if ((m_posnCurrentQx >= m_posnTargetQx) ||
    c51e:	eb73 0107 	sbcs.w	r1, r3, r7
                m_velCurrentQx -= velAdjQx;
    c522:	6420      	str	r0, [r4, #64]	; 0x40
                m_posnCurrentQx -= posnAdjQx;
    c524:	e9c4 230e 	strd	r2, r3, [r4, #56]	; 0x38
                if ((m_posnCurrentQx >= m_posnTargetQx) ||
    c528:	f280 80a9 	bge.w	c67e <_ZN9ClearCore13StepGenerator15StepsCalculatedEv+0x3e6>
    c52c:	42a8      	cmp	r0, r5
    c52e:	f340 80a6 	ble.w	c67e <_ZN9ClearCore13StepGenerator15StepsCalculatedEv+0x3e6>
                        (m_velCurrentQx <= 0) || (m_posnCurrentQx <= 0)) {
    c532:	2a01      	cmp	r2, #1
    c534:	f173 0100 	sbcs.w	r1, r3, #0
    c538:	f2c0 80a1 	blt.w	c67e <_ZN9ClearCore13StepGenerator15StepsCalculatedEv+0x3e6>
                    m_moveState = MS_DECEL;
    c53c:	2004      	movs	r0, #4
    c53e:	461f      	mov	r7, r3
    c540:	9900      	ldr	r1, [sp, #0]
    c542:	7320      	strb	r0, [r4, #12]
    c544:	4616      	mov	r6, r2
    c546:	69e3      	ldr	r3, [r4, #28]
    c548:	e6d8      	b.n	c2fc <_ZN9ClearCore13StepGenerator15StepsCalculatedEv+0x64>
    c54a:	7b42      	ldrb	r2, [r0, #13]
    c54c:	9200      	str	r2, [sp, #0]
                m_moveDirChange = false;
    c54e:	4619      	mov	r1, r3
    c550:	2000      	movs	r0, #0
    c552:	f884 1021 	strb.w	r1, [r4, #33]	; 0x21
    c556:	6520      	str	r0, [r4, #80]	; 0x50
void StepGenerator::StepsCalculated() {
    c558:	4682      	mov	sl, r0
            if (m_velCurrentQx == m_velTargetQx) {
    c55a:	4555      	cmp	r5, sl
    c55c:	f000 80db 	beq.w	c716 <_ZN9ClearCore13StepGenerator15StepsCalculatedEv+0x47e>
            else if (m_velCurrentQx > m_velTargetQx) {
    c560:	dda1      	ble.n	c4a6 <_ZN9ClearCore13StepGenerator15StepsCalculatedEv+0x20e>
                m_moveState = MS_DECEL_VEL;
    c562:	2305      	movs	r3, #5
    c564:	7323      	strb	r3, [r4, #12]
    c566:	f8d4 9044 	ldr.w	r9, [r4, #68]	; 0x44
    c56a:	e6f6      	b.n	c35a <_ZN9ClearCore13StepGenerator15StepsCalculatedEv+0xc2>
                if (m_posnTargetQx != m_posnCurrentQx) {
    c56c:	e9d0 230e 	ldrd	r2, r3, [r0, #56]	; 0x38
    c570:	4611      	mov	r1, r2
    c572:	461a      	mov	r2, r3
                m_direction = m_dirCommanded;
    c574:	f890 3022 	ldrb.w	r3, [r0, #34]	; 0x22
    c578:	7343      	strb	r3, [r0, #13]
                if (m_posnTargetQx != m_posnCurrentQx) {
    c57a:	4613      	mov	r3, r2
    c57c:	429f      	cmp	r7, r3
    c57e:	bf08      	it	eq
    c580:	428e      	cmpeq	r6, r1
    c582:	e9cd 1200 	strd	r1, r2, [sp]
                m_moveDirChange = false;
    c586:	f880 5021 	strb.w	r5, [r0, #33]	; 0x21
                if (m_posnTargetQx != m_posnCurrentQx) {
    c58a:	d00e      	beq.n	c5aa <_ZN9ClearCore13StepGenerator15StepsCalculatedEv+0x312>
                    OutputDirection();
    c58c:	6803      	ldr	r3, [r0, #0]
    c58e:	689b      	ldr	r3, [r3, #8]
    c590:	4798      	blx	r3
    c592:	f894 3021 	ldrb.w	r3, [r4, #33]	; 0x21
    c596:	6c25      	ldr	r5, [r4, #64]	; 0x40
            if (m_moveDirChange) {
    c598:	2b00      	cmp	r3, #0
    c59a:	f040 80ca 	bne.w	c732 <_ZN9ClearCore13StepGenerator15StepsCalculatedEv+0x49a>
    c59e:	e9d4 2312 	ldrd	r2, r3, [r4, #72]	; 0x48
    c5a2:	e9cd 2300 	strd	r2, r3, [sp]
    c5a6:	f8d4 902c 	ldr.w	r9, [r4, #44]	; 0x2c
                int64_t accelStepsQx = (static_cast<int64_t>(m_velCurrentQx) *
    c5aa:	fb85 0105 	smull	r0, r1, r5, r5
                                        m_velCurrentQx / 2) / m_accelLimitQx;
    c5ae:	0fcb      	lsrs	r3, r1, #31
    c5b0:	18c0      	adds	r0, r0, r3
    c5b2:	464e      	mov	r6, r9
    c5b4:	f141 0100 	adc.w	r1, r1, #0
    c5b8:	17f7      	asrs	r7, r6, #31
    c5ba:	1049      	asrs	r1, r1, #1
    c5bc:	ea4f 0030 	mov.w	r0, r0, rrx
    c5c0:	464a      	mov	r2, r9
    c5c2:	463b      	mov	r3, r7
    c5c4:	f00f fd66 	bl	1c094 <__aeabi_ldivmod>
                if (static_cast<int64_t>(m_velLimitQx) * m_velLimitQx /
    c5c8:	f8d4 a024 	ldr.w	sl, [r4, #36]	; 0x24
                                        m_velCurrentQx / 2) / m_accelLimitQx;
    c5cc:	e9cd 0102 	strd	r0, r1, [sp, #8]
                if (static_cast<int64_t>(m_velLimitQx) * m_velLimitQx /
    c5d0:	464a      	mov	r2, r9
    c5d2:	463b      	mov	r3, r7
    c5d4:	fb8a 010a 	smull	r0, r1, sl, sl
    c5d8:	f00f fd5c 	bl	1c094 <__aeabi_ldivmod>
                        m_accelLimitQx - accelStepsQx > m_posnTargetQx) {
    c5dc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
    c5e0:	1a82      	subs	r2, r0, r2
    c5e2:	eb61 0303 	sbc.w	r3, r1, r3
    c5e6:	4610      	mov	r0, r2
    c5e8:	4619      	mov	r1, r3
                if (static_cast<int64_t>(m_velLimitQx) * m_velLimitQx /
    c5ea:	e9dd 2300 	ldrd	r2, r3, [sp]
    c5ee:	4282      	cmp	r2, r0
    c5f0:	418b      	sbcs	r3, r1
    c5f2:	db63      	blt.n	c6bc <_ZN9ClearCore13StepGenerator15StepsCalculatedEv+0x424>
                    m_velTargetQx = m_velLimitQx;
    c5f4:	f8c4 a050 	str.w	sl, [r4, #80]	; 0x50
                if (m_velCurrentQx > m_velTargetQx) {
    c5f8:	4555      	cmp	r5, sl
    c5fa:	f340 8091 	ble.w	c720 <_ZN9ClearCore13StepGenerator15StepsCalculatedEv+0x488>
                    m_moveState = MS_DECEL_VEL;
    c5fe:	2305      	movs	r3, #5
    c600:	7323      	strb	r3, [r4, #12]
    c602:	7b63      	ldrb	r3, [r4, #13]
    c604:	f8d4 9044 	ldr.w	r9, [r4, #68]	; 0x44
    c608:	9300      	str	r3, [sp, #0]
    c60a:	e6a6      	b.n	c35a <_ZN9ClearCore13StepGenerator15StepsCalculatedEv+0xc2>
                    m_accelCurrentQx;
    c60c:	17da      	asrs	r2, r3, #31
                uint32_t overshootQx = m_velCurrentQx - m_velTargetQx;
    c60e:	eba5 050a 	sub.w	r5, r5, sl
                    m_accelCurrentQx;
    c612:	4691      	mov	r9, r2
    c614:	4698      	mov	r8, r3
                    ((static_cast<uint64_t>(overshootQx)) << 32) /
    c616:	461a      	mov	r2, r3
    c618:	4629      	mov	r1, r5
    c61a:	464b      	mov	r3, r9
                m_velCurrentQx = m_velTargetQx;
    c61c:	f8c4 a040 	str.w	sl, [r4, #64]	; 0x40
                    ((static_cast<uint64_t>(overshootQx)) << 32) /
    c620:	2000      	movs	r0, #0
    c622:	f00f fd87 	bl	1c134 <__aeabi_uldivmod>
                    (static_cast<uint64_t>(pctSampleOverQ32) * overshootQx) >>
    c626:	4602      	mov	r2, r0
    c628:	fba2 0105 	umull	r0, r1, r2, r5
    c62c:	2300      	movs	r3, #0
    c62e:	fb05 1103 	mla	r1, r5, r3, r1
                m_posnCurrentQx -= (posnAdjQx + m_velCurrentQx);
    c632:	eb0a 0551 	add.w	r5, sl, r1, lsr #1
    c636:	1b76      	subs	r6, r6, r5
                                        m_velCurrentQx / m_accelCurrentQx) >> 1;
    c638:	4642      	mov	r2, r8
    c63a:	464b      	mov	r3, r9
    c63c:	fb8a 010a 	smull	r0, r1, sl, sl
                m_posnCurrentQx -= (posnAdjQx + m_velCurrentQx);
    c640:	f167 0700 	sbc.w	r7, r7, #0
                                        m_velCurrentQx / m_accelCurrentQx) >> 1;
    c644:	f00f fd76 	bl	1c134 <__aeabi_uldivmod>
                m_posnDecelQx = m_posnTargetQx - decelDistQx;
    c648:	e9d4 2312 	ldrd	r2, r3, [r4, #72]	; 0x48
                                        m_velCurrentQx / m_accelCurrentQx) >> 1;
    c64c:	0849      	lsrs	r1, r1, #1
    c64e:	ea4f 0030 	mov.w	r0, r0, rrx
                m_posnDecelQx = m_posnTargetQx - decelDistQx;
    c652:	1a12      	subs	r2, r2, r0
    c654:	eb63 0301 	sbc.w	r3, r3, r1
    c658:	e9c4 2316 	strd	r2, r3, [r4, #88]	; 0x58
                m_moveState = MS_CRUISE;
    c65c:	2303      	movs	r3, #3
    c65e:	7323      	strb	r3, [r4, #12]
    c660:	e6ec      	b.n	c43c <_ZN9ClearCore13StepGenerator15StepsCalculatedEv+0x1a4>
    c662:	7b43      	ldrb	r3, [r0, #13]
    c664:	6c05      	ldr	r5, [r0, #64]	; 0x40
    c666:	f8d0 a050 	ldr.w	sl, [r0, #80]	; 0x50
    c66a:	9300      	str	r3, [sp, #0]
    c66c:	e71d      	b.n	c4aa <_ZN9ClearCore13StepGenerator15StepsCalculatedEv+0x212>
            if (m_altVelLimitQx && m_velCurrentQx && m_direction != m_dirCommanded) {
    c66e:	7b40      	ldrb	r0, [r0, #13]
    c670:	f894 2022 	ldrb.w	r2, [r4, #34]	; 0x22
    c674:	9000      	str	r0, [sp, #0]
    c676:	4290      	cmp	r0, r2
    c678:	f47f af6a 	bne.w	c550 <_ZN9ClearCore13StepGenerator15StepsCalculatedEv+0x2b8>
    c67c:	e6c9      	b.n	c412 <_ZN9ClearCore13StepGenerator15StepsCalculatedEv+0x17a>
                    m_accelCurrentQx = 0;
    c67e:	2300      	movs	r3, #0
                    m_moveState = MS_END;
    c680:	2206      	movs	r2, #6
                    m_accelCurrentQx = 0;
    c682:	6463      	str	r3, [r4, #68]	; 0x44
                    m_velCurrentQx = 0;
    c684:	6423      	str	r3, [r4, #64]	; 0x40
                    m_posnCurrentQx = m_posnTargetQx;
    c686:	e9c4 670e 	strd	r6, r7, [r4, #56]	; 0x38
    c68a:	9900      	ldr	r1, [sp, #0]
                    m_moveState = MS_END;
    c68c:	7322      	strb	r2, [r4, #12]
    c68e:	69e3      	ldr	r3, [r4, #28]
    c690:	e634      	b.n	c2fc <_ZN9ClearCore13StepGenerator15StepsCalculatedEv+0x64>
                                            m_velCurrentQx / m_accelCurrentQx) >> 1;
    c692:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
    c696:	fb8a 010a 	smull	r0, r1, sl, sl
    c69a:	f00f fd4b 	bl	1c134 <__aeabi_uldivmod>
                    m_posnDecelQx = m_posnTargetQx - decelDistQx;
    c69e:	e9d4 2312 	ldrd	r2, r3, [r4, #72]	; 0x48
                                            m_velCurrentQx / m_accelCurrentQx) >> 1;
    c6a2:	0849      	lsrs	r1, r1, #1
    c6a4:	ea4f 0030 	mov.w	r0, r0, rrx
                    m_posnDecelQx = m_posnTargetQx - decelDistQx;
    c6a8:	1a12      	subs	r2, r2, r0
    c6aa:	eb63 0301 	sbc.w	r3, r3, r1
                    m_moveState = MS_CRUISE;
    c6ae:	2003      	movs	r0, #3
                    m_posnDecelQx = m_posnTargetQx - decelDistQx;
    c6b0:	e9c4 2316 	strd	r2, r3, [r4, #88]	; 0x58
    c6b4:	9900      	ldr	r1, [sp, #0]
                    m_moveState = MS_CRUISE;
    c6b6:	7320      	strb	r0, [r4, #12]
    c6b8:	69e3      	ldr	r3, [r4, #28]
    c6ba:	e61f      	b.n	c2fc <_ZN9ClearCore13StepGenerator15StepsCalculatedEv+0x64>
                                                       ((static_cast<int64_t>(m_stepsCommanded) << FRACT_BITS)
    c6bc:	69a6      	ldr	r6, [r4, #24]
    c6be:	17f1      	asrs	r1, r6, #31
    c6c0:	03cb      	lsls	r3, r1, #15
                                                        + accelStepsQx) * m_accelLimitQx)));
    c6c2:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
                                                       ((static_cast<int64_t>(m_stepsCommanded) << FRACT_BITS)
    c6c6:	03f2      	lsls	r2, r6, #15
                                                        + accelStepsQx) * m_accelLimitQx)));
    c6c8:	1880      	adds	r0, r0, r2
                                                       ((static_cast<int64_t>(m_stepsCommanded) << FRACT_BITS)
    c6ca:	ea43 4356 	orr.w	r3, r3, r6, lsr #17
                                                        + accelStepsQx) * m_accelLimitQx)));
    c6ce:	4159      	adcs	r1, r3
    c6d0:	460b      	mov	r3, r1
    c6d2:	fb00 f107 	mul.w	r1, r0, r7
    c6d6:	fb09 1303 	mla	r3, r9, r3, r1
    c6da:	fba0 0109 	umull	r0, r1, r0, r9
    c6de:	4419      	add	r1, r3
                        static_cast<int64_t>(sqrtf((float)(
    c6e0:	f00f fc9a 	bl	1c018 <__aeabi_l2f>
    c6e4:	ee00 0a10 	vmov	s0, r0
    c6e8:	eeb5 0a40 	vcmp.f32	s0, #0.0
    c6ec:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    c6f0:	eeb1 8ac0 	vsqrt.f32	s16, s0
    c6f4:	d439      	bmi.n	c76a <_ZN9ClearCore13StepGenerator15StepsCalculatedEv+0x4d2>
                                                        + accelStepsQx) * m_accelLimitQx)));
    c6f6:	ee18 0a10 	vmov	r0, s16
    c6fa:	f00f fd33 	bl	1c164 <__aeabi_f2lz>
                    m_velTargetQx = static_cast<int32_t>(min(vel64, INT32_MAX));
    c6fe:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
    c702:	4282      	cmp	r2, r0
    c704:	f04f 0300 	mov.w	r3, #0
    c708:	eb73 0601 	sbcs.w	r6, r3, r1
    c70c:	bfb8      	it	lt
    c70e:	4610      	movlt	r0, r2
    c710:	6520      	str	r0, [r4, #80]	; 0x50
    c712:	4682      	mov	sl, r0
    c714:	e770      	b.n	c5f8 <_ZN9ClearCore13StepGenerator15StepsCalculatedEv+0x360>
                m_moveState = MS_CRUISE;
    c716:	2303      	movs	r3, #3
    c718:	7323      	strb	r3, [r4, #12]
    c71a:	e9d4 670e 	ldrd	r6, r7, [r4, #56]	; 0x38
    c71e:	e68d      	b.n	c43c <_ZN9ClearCore13StepGenerator15StepsCalculatedEv+0x1a4>
                    m_moveState = MS_ACCEL;
    c720:	2302      	movs	r3, #2
    c722:	7323      	strb	r3, [r4, #12]
    c724:	7b63      	ldrb	r3, [r4, #13]
    c726:	9300      	str	r3, [sp, #0]
    c728:	e6bf      	b.n	c4aa <_ZN9ClearCore13StepGenerator15StepsCalculatedEv+0x212>
                m_stepsCommanded = m_stepsSent - m_stepsCommanded;
    c72a:	69c0      	ldr	r0, [r0, #28]
    c72c:	69a3      	ldr	r3, [r4, #24]
    c72e:	1ac0      	subs	r0, r0, r3
    c730:	e5d1      	b.n	c2d6 <_ZN9ClearCore13StepGenerator15StepsCalculatedEv+0x3e>
    c732:	7b63      	ldrb	r3, [r4, #13]
    c734:	f8d4 9044 	ldr.w	r9, [r4, #68]	; 0x44
    c738:	9300      	str	r3, [sp, #0]
    c73a:	e609      	b.n	c350 <_ZN9ClearCore13StepGenerator15StepsCalculatedEv+0xb8>
                    int64_t distToStopQx = (static_cast<int64_t>(m_velCurrentQx) * m_velCurrentQx /
    c73c:	464a      	mov	r2, r9
    c73e:	17d3      	asrs	r3, r2, #31
    c740:	fb85 0105 	smull	r0, r1, r5, r5
    c744:	f00f fca6 	bl	1c094 <__aeabi_ldivmod>
                    m_moveDirChange = m_posnTargetQx - m_posnCurrentQx < distToStopQx;
    c748:	e9d4 230e 	ldrd	r2, r3, [r4, #56]	; 0x38
                                          m_accelCurrentQx) >> 1;
    c74c:	1049      	asrs	r1, r1, #1
    c74e:	ea4f 0030 	mov.w	r0, r0, rrx
                    m_moveDirChange = m_posnTargetQx - m_posnCurrentQx < distToStopQx;
    c752:	1ab6      	subs	r6, r6, r2
    c754:	eb67 0703 	sbc.w	r7, r7, r3
    c758:	4286      	cmp	r6, r0
    c75a:	eb77 0301 	sbcs.w	r3, r7, r1
    c75e:	bfb4      	ite	lt
    c760:	2301      	movlt	r3, #1
    c762:	2300      	movge	r3, #0
    c764:	f884 3021 	strb.w	r3, [r4, #33]	; 0x21
    c768:	e716      	b.n	c598 <_ZN9ClearCore13StepGenerator15StepsCalculatedEv+0x300>
                        static_cast<int64_t>(sqrtf((float)(
    c76a:	f00e fa29 	bl	1abc0 <sqrtf>
    c76e:	6c25      	ldr	r5, [r4, #64]	; 0x40
    c770:	e7c1      	b.n	c6f6 <_ZN9ClearCore13StepGenerator15StepsCalculatedEv+0x45e>
    c772:	7b43      	ldrb	r3, [r0, #13]
    c774:	6c05      	ldr	r5, [r0, #64]	; 0x40
    c776:	f8d0 a050 	ldr.w	sl, [r0, #80]	; 0x50
    c77a:	f8d0 9044 	ldr.w	r9, [r0, #68]	; 0x44
    c77e:	9300      	str	r3, [sp, #0]
    c780:	e5eb      	b.n	c35a <_ZN9ClearCore13StepGenerator15StepsCalculatedEv+0xc2>
    c782:	bf00      	nop

0000c784 <_ZN9ClearCore13StepGeneratorC1Ev>:
StepGenerator::StepGenerator()
    c784:	b4f0      	push	{r4, r5, r6, r7}
                  InNegHWLimitLast(0) {}
    c786:	7c04      	ldrb	r4, [r0, #16]
      m_altDecelLimitPendingQx(2) {}
    c788:	4916      	ldr	r1, [pc, #88]	; (c7e4 <_ZN9ClearCore13StepGeneratorC1Ev+0x60>)
    c78a:	6001      	str	r1, [r0, #0]
    c78c:	2200      	movs	r2, #0
    c78e:	f004 04c0 	and.w	r4, r4, #192	; 0xc0
    c792:	2501      	movs	r5, #1
    c794:	2102      	movs	r1, #2
    c796:	2600      	movs	r6, #0
    c798:	2700      	movs	r7, #0
    c79a:	f362 1486 	bfi	r4, r2, #6, #1
    c79e:	7404      	strb	r4, [r0, #16]
    c7a0:	6042      	str	r2, [r0, #4]
    c7a2:	6082      	str	r2, [r0, #8]
    c7a4:	7302      	strb	r2, [r0, #12]
    c7a6:	7342      	strb	r2, [r0, #13]
    c7a8:	6142      	str	r2, [r0, #20]
    c7aa:	6182      	str	r2, [r0, #24]
    c7ac:	61c2      	str	r2, [r0, #28]
    c7ae:	f880 2020 	strb.w	r2, [r0, #32]
    c7b2:	f880 2021 	strb.w	r2, [r0, #33]	; 0x21
    c7b6:	f880 2022 	strb.w	r2, [r0, #34]	; 0x22
    c7ba:	6282      	str	r2, [r0, #40]	; 0x28
    c7bc:	6402      	str	r2, [r0, #64]	; 0x40
    c7be:	6442      	str	r2, [r0, #68]	; 0x44
    c7c0:	6502      	str	r2, [r0, #80]	; 0x50
    c7c2:	6642      	str	r2, [r0, #100]	; 0x64
    c7c4:	7385      	strb	r5, [r0, #14]
    c7c6:	6245      	str	r5, [r0, #36]	; 0x24
    c7c8:	6605      	str	r5, [r0, #96]	; 0x60
    c7ca:	62c1      	str	r1, [r0, #44]	; 0x2c
    c7cc:	6301      	str	r1, [r0, #48]	; 0x30
    c7ce:	6681      	str	r1, [r0, #104]	; 0x68
    c7d0:	66c1      	str	r1, [r0, #108]	; 0x6c
    c7d2:	e9c0 670e 	strd	r6, r7, [r0, #56]	; 0x38
    c7d6:	e9c0 6712 	strd	r6, r7, [r0, #72]	; 0x48
    c7da:	e9c0 6716 	strd	r6, r7, [r0, #88]	; 0x58
    c7de:	bcf0      	pop	{r4, r5, r6, r7}
    c7e0:	4770      	bx	lr
    c7e2:	bf00      	nop
    c7e4:	00022e3c 	.word	0x00022e3c

0000c7e8 <_ZN9ClearCore13StepGenerator14MoveStopAbruptEv>:
void StepGenerator::MoveStopAbrupt() {
    c7e8:	b4d0      	push	{r4, r6, r7}
  __ASM volatile ("cpsid i" : : : "memory");
    c7ea:	b672      	cpsid	i
            m_velLimitQx = m_velLimitPendingQx;
    c7ec:	6e03      	ldr	r3, [r0, #96]	; 0x60
            m_altVelLimitQx = m_altVelLimitPendingQx;
    c7ee:	6e44      	ldr	r4, [r0, #100]	; 0x64
            m_accelLimitQx = m_accelLimitPendingQx;
    c7f0:	6e81      	ldr	r1, [r0, #104]	; 0x68
            m_altDecelLimitQx = m_altDecelLimitPendingQx;
    c7f2:	6ec2      	ldr	r2, [r0, #108]	; 0x6c
            m_velLimitQx = m_velLimitPendingQx;
    c7f4:	6243      	str	r3, [r0, #36]	; 0x24
    m_posnCurrentQx = 0;
    c7f6:	2600      	movs	r6, #0
    m_velCurrentQx = 0;
    c7f8:	2300      	movs	r3, #0
    m_posnCurrentQx = 0;
    c7fa:	2700      	movs	r7, #0
    c7fc:	e9c0 670e 	strd	r6, r7, [r0, #56]	; 0x38
            m_altVelLimitQx = m_altVelLimitPendingQx;
    c800:	6284      	str	r4, [r0, #40]	; 0x28
            m_accelLimitQx = m_accelLimitPendingQx;
    c802:	62c1      	str	r1, [r0, #44]	; 0x2c
            m_altDecelLimitQx = m_altDecelLimitPendingQx;
    c804:	6302      	str	r2, [r0, #48]	; 0x30
    m_velCurrentQx = 0;
    c806:	6403      	str	r3, [r0, #64]	; 0x40
    m_stepsSent = 0;
    c808:	61c3      	str	r3, [r0, #28]
    m_moveState = MS_IDLE;
    c80a:	7303      	strb	r3, [r0, #12]
    m_velocityMove = false;
    c80c:	f880 3020 	strb.w	r3, [r0, #32]
    m_stepsCommanded = 0;
    c810:	6183      	str	r3, [r0, #24]
    m_stepsPrevious = 0;
    c812:	6043      	str	r3, [r0, #4]
  __ASM volatile ("cpsie i" : : : "memory");
    c814:	b662      	cpsie	i
}
    c816:	bcd0      	pop	{r4, r6, r7}
    c818:	4770      	bx	lr
    c81a:	bf00      	nop
    c81c:	0000      	movs	r0, r0
	...

0000c820 <_ZN9ClearCore13StepGenerator13MoveStopDecelEm>:
void StepGenerator::MoveStopDecel(uint32_t decelMax) {
    c820:	b510      	push	{r4, lr}
    c822:	4604      	mov	r4, r0
    if (decelMax != 0) {
    c824:	b191      	cbz	r1, c84c <_ZN9ClearCore13StepGenerator13MoveStopDecelEm+0x2c>
}

static int32_t ConvertAccel(uint32_t pulsesPerSecSq) {
    // Convert from step pulses/sec/sec to step pulses/sample/sample
    int64_t accelLim64 = ((static_cast<int64_t>(pulsesPerSecSq) << FRACT_BITS) /
                          (SampleRateHz * SampleRateHz));
    c826:	a312      	add	r3, pc, #72	; (adr r3, c870 <_ZN9ClearCore13StepGenerator13MoveStopDecelEm+0x50>)
    c828:	e9d3 2300 	ldrd	r2, r3, [r3]
    c82c:	03c8      	lsls	r0, r1, #15
    c82e:	0c49      	lsrs	r1, r1, #17
    c830:	f00f fc30 	bl	1c094 <__aeabi_ldivmod>
    c834:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
    c836:	2b02      	cmp	r3, #2
    // Ensure we didn't overflow 32-bit int
    int32_t accelLim32 = min(accelLim64, INT32_MAX);
    // Since accel has to be divided by 2 when calculating position increments,
    // make sure it is even
    accelLim32 &= ~1L;
    c838:	f020 0201 	bic.w	r2, r0, #1
    c83c:	bfb8      	it	lt
    c83e:	2302      	movlt	r3, #2
    c840:	4293      	cmp	r3, r2
    c842:	4618      	mov	r0, r3
    c844:	bfb8      	it	lt
    c846:	4610      	movlt	r0, r2
    value of the current move's accel limit or the decelMax given.
*/
void StepGenerator::EStopDecelMax(uint32_t decelMax) {
    // Convert from step pulses/sec/sec to step pulses/sample/sample
    int32_t decelQx = ConvertAccel(decelMax);
    m_altDecelLimitPendingQx = max(decelQx, m_accelLimitQx);
    c848:	66e0      	str	r0, [r4, #108]	; 0x6c
        m_altDecelLimitQx = m_altDecelLimitPendingQx;
    c84a:	6320      	str	r0, [r4, #48]	; 0x30
  __ASM volatile ("cpsid i" : : : "memory");
    c84c:	b672      	cpsid	i
    m_accelLimitQx = max(m_altDecelLimitQx, m_accelLimitQx);
    c84e:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
    c850:	6b22      	ldr	r2, [r4, #48]	; 0x30
    c852:	4293      	cmp	r3, r2
    c854:	bfb8      	it	lt
    c856:	4613      	movlt	r3, r2
    m_altVelLimitQx = 0;
    c858:	2100      	movs	r1, #0
    m_velocityMove = true;
    c85a:	2201      	movs	r2, #1
    m_accelLimitQx = max(m_altDecelLimitQx, m_accelLimitQx);
    c85c:	62e3      	str	r3, [r4, #44]	; 0x2c
    m_altVelLimitQx = 0;
    c85e:	62a1      	str	r1, [r4, #40]	; 0x28
    m_velocityMove = true;
    c860:	f884 2020 	strb.w	r2, [r4, #32]
    m_moveState = MS_START;
    c864:	7322      	strb	r2, [r4, #12]
  __ASM volatile ("cpsie i" : : : "memory");
    c866:	b662      	cpsie	i
    c868:	bd10      	pop	{r4, pc}
    c86a:	bf00      	nop
    c86c:	f3af 8000 	nop.w
    c870:	017d7840 	.word	0x017d7840
    c874:	00000000 	.word	0x00000000

0000c878 <_ZN9ClearCore13StepGenerator20StepsPerSampleMaxSetEm>:

/*
    This function limits the velocity to the maximum that the step output
    can provide.
*/
void StepGenerator::StepsPerSampleMaxSet(uint32_t maxSteps) {
    c878:	b4f0      	push	{r4, r5, r6, r7}
  __ASM volatile ("cpsid i" : : : "memory");
    c87a:	b672      	cpsid	i
            m_velLimitQx = m_velLimitPendingQx;
    c87c:	6e03      	ldr	r3, [r0, #96]	; 0x60
            m_altVelLimitQx = m_altVelLimitPendingQx;
    c87e:	6e45      	ldr	r5, [r0, #100]	; 0x64
            m_accelLimitQx = m_accelLimitPendingQx;
    c880:	6e84      	ldr	r4, [r0, #104]	; 0x68
            m_altDecelLimitQx = m_altDecelLimitPendingQx;
    c882:	6ec2      	ldr	r2, [r0, #108]	; 0x6c
            m_velLimitQx = m_velLimitPendingQx;
    c884:	6243      	str	r3, [r0, #36]	; 0x24
    m_posnCurrentQx = 0;
    c886:	2600      	movs	r6, #0
    m_velCurrentQx = 0;
    c888:	2300      	movs	r3, #0
    m_posnCurrentQx = 0;
    c88a:	2700      	movs	r7, #0
    c88c:	e9c0 670e 	strd	r6, r7, [r0, #56]	; 0x38
            m_altVelLimitQx = m_altVelLimitPendingQx;
    c890:	6285      	str	r5, [r0, #40]	; 0x28
            m_accelLimitQx = m_accelLimitPendingQx;
    c892:	62c4      	str	r4, [r0, #44]	; 0x2c
            m_altDecelLimitQx = m_altDecelLimitPendingQx;
    c894:	6302      	str	r2, [r0, #48]	; 0x30
    m_velCurrentQx = 0;
    c896:	6403      	str	r3, [r0, #64]	; 0x40
    m_stepsSent = 0;
    c898:	61c3      	str	r3, [r0, #28]
    m_moveState = MS_IDLE;
    c89a:	7303      	strb	r3, [r0, #12]
    m_velocityMove = false;
    c89c:	f880 3020 	strb.w	r3, [r0, #32]
    m_stepsCommanded = 0;
    c8a0:	6183      	str	r3, [r0, #24]
    m_stepsPrevious = 0;
    c8a2:	6043      	str	r3, [r0, #4]
  __ASM volatile ("cpsie i" : : : "memory");
    c8a4:	b662      	cpsie	i
    MoveStopAbrupt();
    m_stepsPerSampleMax = maxSteps;
    // Recalculate maximum velocity limit
    int64_t velLim64 = static_cast<int64_t>(m_stepsPerSampleMax) << FRACT_BITS;
    // Ensure we didn't overflow 32-bit int
    velLim64 = min(velLim64, INT32_MAX);
    c8a6:	f06f 4400 	mvn.w	r4, #2147483648	; 0x80000000
    c8aa:	03ca      	lsls	r2, r1, #15
    c8ac:	0c4b      	lsrs	r3, r1, #17
    c8ae:	4294      	cmp	r4, r2
    c8b0:	f04f 0500 	mov.w	r5, #0
    m_stepsPerSampleMax = maxSteps;
    c8b4:	6081      	str	r1, [r0, #8]
    velLim64 = min(velLim64, INT32_MAX);
    c8b6:	eb75 0103 	sbcs.w	r1, r5, r3
    c8ba:	bfbc      	itt	lt
    c8bc:	4622      	movlt	r2, r4
    c8be:	462b      	movlt	r3, r5
    // Enforce minimum velocity of 1 step pulse/sample
    velLim64 = max(velLim64, 1);
    c8c0:	2a01      	cmp	r2, #1
    c8c2:	f173 0100 	sbcs.w	r1, r3, #0
    // Clip velocity limit if higher than max velocity limit
    m_velLimitPendingQx = min(velLim64, m_velLimitQx);
    c8c6:	6a44      	ldr	r4, [r0, #36]	; 0x24
    velLim64 = max(velLim64, 1);
    c8c8:	bfbc      	itt	lt
    c8ca:	2201      	movlt	r2, #1
    c8cc:	2300      	movlt	r3, #0
    m_velLimitPendingQx = min(velLim64, m_velLimitQx);
    c8ce:	17e5      	asrs	r5, r4, #31
    c8d0:	4294      	cmp	r4, r2
    c8d2:	eb75 0103 	sbcs.w	r1, r5, r3
    c8d6:	bfb8      	it	lt
    c8d8:	4622      	movlt	r2, r4
    c8da:	6602      	str	r2, [r0, #96]	; 0x60
}
    c8dc:	bcf0      	pop	{r4, r5, r6, r7}
    c8de:	4770      	bx	lr

0000c8e0 <_ZN9ClearCore13StepGenerator17CheckTravelLimitsEv>:

 bool StepGenerator::CheckTravelLimits() {
    if (m_stepsPrevious == 0) {
    c8e0:	6843      	ldr	r3, [r0, #4]
    c8e2:	b363      	cbz	r3, c93e <_ZN9ClearCore13StepGenerator17CheckTravelLimitsEv+0x5e>
        return false;
    }

    // Determine if we are physically in the hardware limits
    m_limitInfo.EnterHWLimit = (m_limitInfo.InPosHWLimit || m_limitInfo.InNegHWLimit)
    c8e4:	7c03      	ldrb	r3, [r0, #16]
                            && ((m_limitInfo.InPosHWLimit != m_limitInfo.InPosHWLimitLast)
    c8e6:	f013 0218 	ands.w	r2, r3, #24
    c8ea:	d12a      	bne.n	c942 <_ZN9ClearCore13StepGenerator17CheckTravelLimitsEv+0x62>
    c8ec:	4613      	mov	r3, r2
    m_limitInfo.EnterHWLimit = (m_limitInfo.InPosHWLimit || m_limitInfo.InNegHWLimit)
    c8ee:	7c02      	ldrb	r2, [r0, #16]
    c8f0:	f363 0282 	bfi	r2, r3, #2, #1
                            ||  (m_limitInfo.InNegHWLimit != m_limitInfo.InNegHWLimitLast));
    m_limitInfo.InPosHWLimitLast = m_limitInfo.InPosHWLimit;
    c8f4:	b2d2      	uxtb	r2, r2
    c8f6:	4613      	mov	r3, r2
    c8f8:	f3c2 02c0 	ubfx	r2, r2, #3, #1
    c8fc:	f362 1345 	bfi	r3, r2, #5, #1
    m_limitInfo.InNegHWLimitLast = m_limitInfo.InNegHWLimit;
    c900:	b2db      	uxtb	r3, r3
    c902:	461a      	mov	r2, r3
    c904:	f3c3 1300 	ubfx	r3, r3, #4, #1
    c908:	f363 1286 	bfi	r2, r3, #6, #1

    if (m_limitInfo.EnterHWLimit) {
    c90c:	b2d3      	uxtb	r3, r2
    m_limitInfo.InNegHWLimitLast = m_limitInfo.InNegHWLimit;
    c90e:	7402      	strb	r2, [r0, #16]
    if (m_limitInfo.EnterHWLimit) {
    c910:	075a      	lsls	r2, r3, #29
    c912:	d514      	bpl.n	c93e <_ZN9ClearCore13StepGenerator17CheckTravelLimitsEv+0x5e>

        if ((!m_direction && m_limitInfo.InPosHWLimit) ||
    c914:	7b42      	ldrb	r2, [r0, #13]
    c916:	b9e2      	cbnz	r2, c952 <_ZN9ClearCore13StepGenerator17CheckTravelLimitsEv+0x72>
    c918:	0719      	lsls	r1, r3, #28
    c91a:	d510      	bpl.n	c93e <_ZN9ClearCore13StepGenerator17CheckTravelLimitsEv+0x5e>
            (m_direction && m_limitInfo.InNegHWLimit)) {
            // Ramp to a stop
            if (!m_direction) {
                m_limitInfo.LimitRampPos = true;
    c91c:	f043 0301 	orr.w	r3, r3, #1
    c920:	7403      	strb	r3, [r0, #16]
  __ASM volatile ("cpsid i" : : : "memory");
    c922:	b672      	cpsid	i
    m_accelLimitQx = max(m_altDecelLimitQx, m_accelLimitQx);
    c924:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
    c926:	6b02      	ldr	r2, [r0, #48]	; 0x30
    c928:	4293      	cmp	r3, r2
    c92a:	bfb8      	it	lt
    c92c:	4613      	movlt	r3, r2
    m_altVelLimitQx = 0;
    c92e:	2100      	movs	r1, #0
    m_velocityMove = true;
    c930:	2201      	movs	r2, #1
    m_accelLimitQx = max(m_altDecelLimitQx, m_accelLimitQx);
    c932:	62c3      	str	r3, [r0, #44]	; 0x2c
    m_altVelLimitQx = 0;
    c934:	6281      	str	r1, [r0, #40]	; 0x28
    m_velocityMove = true;
    c936:	f880 2020 	strb.w	r2, [r0, #32]
    m_moveState = MS_START;
    c93a:	7302      	strb	r2, [r0, #12]
  __ASM volatile ("cpsie i" : : : "memory");
    c93c:	b662      	cpsie	i
            }
            MoveStopDecel();
        }
    }
    return false;
}
    c93e:	2000      	movs	r0, #0
    c940:	4770      	bx	lr
                            && ((m_limitInfo.InPosHWLimit != m_limitInfo.InPosHWLimitLast)
    c942:	f3c3 02c1 	ubfx	r2, r3, #3, #2
    c946:	f3c3 1341 	ubfx	r3, r3, #5, #2
    c94a:	1ad3      	subs	r3, r2, r3
    c94c:	bf18      	it	ne
    c94e:	2301      	movne	r3, #1
    c950:	e7cd      	b.n	c8ee <_ZN9ClearCore13StepGenerator17CheckTravelLimitsEv+0xe>
            (m_direction && m_limitInfo.InNegHWLimit)) {
    c952:	06da      	lsls	r2, r3, #27
    c954:	d5f3      	bpl.n	c93e <_ZN9ClearCore13StepGenerator17CheckTravelLimitsEv+0x5e>
                m_limitInfo.LimitRampNeg = true;
    c956:	f043 0302 	orr.w	r3, r3, #2
    c95a:	7403      	strb	r3, [r0, #16]
    c95c:	e7e1      	b.n	c922 <_ZN9ClearCore13StepGenerator17CheckTravelLimitsEv+0x42>
    c95e:	bf00      	nop

0000c960 <SystemInit>:
    // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
    // Start and setup the various oscillators
    // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

    // Start the external 10MHz MEMS oscillator
    OSCCTRL->XOSCCTRL[1].reg =
    c960:	4ba1      	ldr	r3, [pc, #644]	; (cbe8 <SystemInit+0x288>)
    c962:	f242 6202 	movw	r2, #9730	; 0x2602
void SystemInit(void) {
    c966:	b4f0      	push	{r4, r5, r6, r7}
    OSCCTRL->XOSCCTRL[1].reg =
    c968:	619a      	str	r2, [r3, #24]
        OSCCTRL_XOSCCTRL_IMULT(4) |
        OSCCTRL_XOSCCTRL_IPTAT(3) |
        OSCCTRL_XOSCCTRL_ENABLE;
    // Wait for clock to run
    while (!OSCCTRL->STATUS.bit.XOSCRDY1) {
    c96a:	691a      	ldr	r2, [r3, #16]
    c96c:	0792      	lsls	r2, r2, #30
    c96e:	d5fc      	bpl.n	c96a <SystemInit+0xa>
        continue;
    }
    // Create 1MHz clock on GCLK5 to act as source for DPLL0/1 and SERCOM6
    GCLK->GENCTRL[5].reg = GCLK_GENCTRL_SRC(GCLK_GENCTRL_SRC_XOSC1_Val) |
    c970:	4a9e      	ldr	r2, [pc, #632]	; (cbec <SystemInit+0x28c>)
    c972:	4b9f      	ldr	r3, [pc, #636]	; (cbf0 <SystemInit+0x290>)
    c974:	6353      	str	r3, [r2, #52]	; 0x34
                           GCLK_GENCTRL_GENEN |
                           GCLK_GENCTRL_DIV(__CLEARCORE_OSC_HZ /
                                            __CLEARCORE_GCLK5_HZ) |
                           GCLK_GENCTRL_IDC;
    SYNCBUSY_WAIT(GCLK, GCLK_SYNCBUSY_GENCTRL5);
    c976:	6853      	ldr	r3, [r2, #4]
    c978:	f013 0380 	ands.w	r3, r3, #128	; 0x80
    c97c:	d1fb      	bne.n	c976 <SystemInit+0x16>

    // Make good 120MHz CPU clock using DPLL1 multiplying GCLK5 up
    SET_CLOCK_SOURCE(OSCCTRL_GCLK_ID_FDPLL1, 5);
    c97e:	f8d2 0088 	ldr.w	r0, [r2, #136]	; 0x88
    c982:	499a      	ldr	r1, [pc, #616]	; (cbec <SystemInit+0x28c>)
    c984:	f363 1086 	bfi	r0, r3, #6, #1
    c988:	f8c2 0088 	str.w	r0, [r2, #136]	; 0x88
    c98c:	f8d1 3088 	ldr.w	r3, [r1, #136]	; 0x88
    c990:	065b      	lsls	r3, r3, #25
    c992:	d4fb      	bmi.n	c98c <SystemInit+0x2c>
    c994:	f8d1 3088 	ldr.w	r3, [r1, #136]	; 0x88
    c998:	4a94      	ldr	r2, [pc, #592]	; (cbec <SystemInit+0x28c>)
    c99a:	2005      	movs	r0, #5
    c99c:	f360 0303 	bfi	r3, r0, #0, #4
    c9a0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    c9a4:	f8d1 3088 	ldr.w	r3, [r1, #136]	; 0x88
    c9a8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    c9ac:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    c9b0:	6853      	ldr	r3, [r2, #4]
    c9b2:	f013 0f14 	tst.w	r3, #20
    c9b6:	d1fb      	bne.n	c9b0 <SystemInit+0x50>
    // Set the integer part of the frequency multiplier (loop divider ratio)
    OSCCTRL->Dpll[1].DPLLRATIO.reg =
    c9b8:	4b8b      	ldr	r3, [pc, #556]	; (cbe8 <SystemInit+0x288>)
    c9ba:	2277      	movs	r2, #119	; 0x77
    OSCCTRL_DPLLRATIO_LDR(__CLEARCORE_DPLL1_HZ / __CLEARCORE_GCLK5_HZ - 1);  
    // Set GCLK as the DPLL clock reference, and set Wake Up Fast
    OSCCTRL->Dpll[1].DPLLCTRLB.reg = OSCCTRL_DPLLCTRLB_REFCLK_GCLK |
    c9bc:	2010      	movs	r0, #16
                                     OSCCTRL_DPLLCTRLB_WUF;
        
    // Set the DPLL (digital phase-locked loop) to run in standby and sleep mode
    // If ONDEMAND is not set, the signal will be generated constantly
    // Finally, enable the DPLL
    OSCCTRL->Dpll[1].DPLLCTRLA.reg = OSCCTRL_DPLLCTRLA_RUNSTDBY |
    c9be:	2142      	movs	r1, #66	; 0x42
    OSCCTRL->Dpll[1].DPLLRATIO.reg =
    c9c0:	649a      	str	r2, [r3, #72]	; 0x48
    OSCCTRL->Dpll[1].DPLLCTRLB.reg = OSCCTRL_DPLLCTRLB_REFCLK_GCLK |
    c9c2:	64d8      	str	r0, [r3, #76]	; 0x4c
                                     OSCCTRL_DPLLCTRLA_ENABLE;

    while (OSCCTRL->STATUS.bit.DPLL1LCKR) {
    c9c4:	461a      	mov	r2, r3
    OSCCTRL->Dpll[1].DPLLCTRLA.reg = OSCCTRL_DPLLCTRLA_RUNSTDBY |
    c9c6:	f883 1044 	strb.w	r1, [r3, #68]	; 0x44
    while (OSCCTRL->STATUS.bit.DPLL1LCKR) {
    c9ca:	6913      	ldr	r3, [r2, #16]
    c9cc:	01df      	lsls	r7, r3, #7
    c9ce:	d4fc      	bmi.n	c9ca <SystemInit+0x6a>
        continue;
    }
    // Route DPLL1 @ 120MHz to CPU Clock before killing off 48MHz clock we
    // started with.
    GCLK->GENCTRL[0].reg = GCLK_GENCTRL_SRC(GCLK_GENCTRL_SRC_DPLL1_Val) |
    c9d0:	4a86      	ldr	r2, [pc, #536]	; (cbec <SystemInit+0x28c>)
    c9d2:	f44f 7384 	mov.w	r3, #264	; 0x108
    c9d6:	6213      	str	r3, [r2, #32]
                           GCLK_GENCTRL_GENEN |
                           GCLK_GENCTRL_DIV(0);
    SYNCBUSY_WAIT(GCLK, GCLK_SYNCBUSY_GENCTRL0);
    c9d8:	6853      	ldr	r3, [r2, #4]
    c9da:	f013 0304 	ands.w	r3, r3, #4
    c9de:	d1fb      	bne.n	c9d8 <SystemInit+0x78>
    // Clocks running and locked, switch core clock to 120MHz
    MCLK->CPUDIV.reg = MCLK_CPUDIV_DIV_DIV1;
    c9e0:	4884      	ldr	r0, [pc, #528]	; (cbf4 <SystemInit+0x294>)

    // Use 96MHz clock for USB with / 2 on GCLK4 for 48MHz
    // using GCLK5 as reference.
    SET_CLOCK_SOURCE(OSCCTRL_GCLK_ID_FDPLL0, 5);
    c9e2:	4982      	ldr	r1, [pc, #520]	; (cbec <SystemInit+0x28c>)
    MCLK->CPUDIV.reg = MCLK_CPUDIV_DIV_DIV1;
    c9e4:	2401      	movs	r4, #1
    c9e6:	7144      	strb	r4, [r0, #5]
    SET_CLOCK_SOURCE(OSCCTRL_GCLK_ID_FDPLL0, 5);
    c9e8:	f8d2 0084 	ldr.w	r0, [r2, #132]	; 0x84
    c9ec:	f363 1086 	bfi	r0, r3, #6, #1
    c9f0:	f8c2 0084 	str.w	r0, [r2, #132]	; 0x84
    c9f4:	f8d1 3084 	ldr.w	r3, [r1, #132]	; 0x84
    c9f8:	065e      	lsls	r6, r3, #25
    c9fa:	d4fb      	bmi.n	c9f4 <SystemInit+0x94>
    c9fc:	f8d1 3084 	ldr.w	r3, [r1, #132]	; 0x84
    ca00:	4a7a      	ldr	r2, [pc, #488]	; (cbec <SystemInit+0x28c>)
    ca02:	2005      	movs	r0, #5
    ca04:	f360 0303 	bfi	r3, r0, #0, #4
    ca08:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    ca0c:	f8d1 3084 	ldr.w	r3, [r1, #132]	; 0x84
    ca10:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    ca14:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    ca18:	6853      	ldr	r3, [r2, #4]
    ca1a:	f013 0314 	ands.w	r3, r3, #20
    ca1e:	d1fb      	bne.n	ca18 <SystemInit+0xb8>
    // set the integer part of the frequency multiplier (loop divider ratio)
    OSCCTRL->Dpll[0].DPLLRATIO.reg =
    ca20:	4871      	ldr	r0, [pc, #452]	; (cbe8 <SystemInit+0x288>)
    // enable the DPLL
    OSCCTRL->Dpll[0].DPLLCTRLA.reg = OSCCTRL_DPLLCTRLA_ENABLE;

    // Disable DFLL48M since we are going to use DPLL to generate 48MHz.
    GCLK->PCHCTRL[OSCCTRL_GCLK_ID_DFLL48].bit.CHEN = 0;
    while (GCLK->PCHCTRL[OSCCTRL_GCLK_ID_DFLL48].bit.CHEN) {
    ca22:	4972      	ldr	r1, [pc, #456]	; (cbec <SystemInit+0x28c>)
    OSCCTRL->Dpll[0].DPLLRATIO.reg =
    ca24:	265f      	movs	r6, #95	; 0x5f
    OSCCTRL->Dpll[0].DPLLCTRLB.reg = OSCCTRL_DPLLCTRLB_LTIME_DEFAULT |
    ca26:	2510      	movs	r5, #16
    OSCCTRL->Dpll[0].DPLLCTRLA.reg = OSCCTRL_DPLLCTRLA_ENABLE;
    ca28:	2402      	movs	r4, #2
    OSCCTRL->Dpll[0].DPLLRATIO.reg =
    ca2a:	6346      	str	r6, [r0, #52]	; 0x34
    OSCCTRL->Dpll[0].DPLLCTRLB.reg = OSCCTRL_DPLLCTRLB_LTIME_DEFAULT |
    ca2c:	6385      	str	r5, [r0, #56]	; 0x38
    OSCCTRL->Dpll[0].DPLLCTRLA.reg = OSCCTRL_DPLLCTRLA_ENABLE;
    ca2e:	f880 4030 	strb.w	r4, [r0, #48]	; 0x30
    GCLK->PCHCTRL[OSCCTRL_GCLK_ID_DFLL48].bit.CHEN = 0;
    ca32:	f8d2 0080 	ldr.w	r0, [r2, #128]	; 0x80
    ca36:	f363 1086 	bfi	r0, r3, #6, #1
    ca3a:	f8c2 0080 	str.w	r0, [r2, #128]	; 0x80
    while (GCLK->PCHCTRL[OSCCTRL_GCLK_ID_DFLL48].bit.CHEN) {
    ca3e:	f8d1 3080 	ldr.w	r3, [r1, #128]	; 0x80
    ca42:	f3c3 1380 	ubfx	r3, r3, #6, #1
    ca46:	2b00      	cmp	r3, #0
    ca48:	d1f9      	bne.n	ca3e <SystemInit+0xde>
        continue;
    }

    OSCCTRL->DFLLCTRLA.reg = 0;
    ca4a:	4c67      	ldr	r4, [pc, #412]	; (cbe8 <SystemInit+0x288>)
    // Setup GCLK4 to output 48 MHz for USB
    GCLK->GENCTRL[4].reg = GCLK_GENCTRL_GENEN |
    ca4c:	486a      	ldr	r0, [pc, #424]	; (cbf8 <SystemInit+0x298>)
                           GCLK_GENCTRL_DIV(__CLEARCORE_DPLL0_HZ /
                                            __CLEARCORE_GCLK4_HZ) |
                           GCLK_GENCTRL_SRC_DPLL0;
    // Wait for clock domain sync
    SYNCBUSY_WAIT(GCLK, GCLK_SYNCBUSY_GENCTRL4);
    ca4e:	4a67      	ldr	r2, [pc, #412]	; (cbec <SystemInit+0x28c>)
    OSCCTRL->DFLLCTRLA.reg = 0;
    ca50:	7723      	strb	r3, [r4, #28]
    GCLK->GENCTRL[4].reg = GCLK_GENCTRL_GENEN |
    ca52:	6308      	str	r0, [r1, #48]	; 0x30
    SYNCBUSY_WAIT(GCLK, GCLK_SYNCBUSY_GENCTRL4);
    ca54:	6853      	ldr	r3, [r2, #4]
    ca56:	065d      	lsls	r5, r3, #25
    ca58:	d4fc      	bmi.n	ca54 <SystemInit+0xf4>
                           GCLK_GENCTRL_OE;

    // Make sure PORT module is powered up and clocked
    // Should be on already: CLOCK_ENABLE(APBBMASK, PORT_);
    // Make sure SERCOMS are powered up and clocked
    CLOCK_ENABLE(APBAMASK, SERCOM0_);
    ca5a:	4b66      	ldr	r3, [pc, #408]	; (cbf4 <SystemInit+0x294>)
    GCLK->GENCTRL[1].reg = GCLK_GENCTRL_SRC(GCLK_GENCTRL_SRC_XOSC1_Val) |
    ca5c:	4967      	ldr	r1, [pc, #412]	; (cbfc <SystemInit+0x29c>)
    ca5e:	6251      	str	r1, [r2, #36]	; 0x24
    CLOCK_ENABLE(APBAMASK, SERCOM0_);
    ca60:	6958      	ldr	r0, [r3, #20]
    CLOCK_ENABLE(APBAMASK, TC0_); // HLFB(3)

    CLOCK_ENABLE(APBDMASK, TC6_); // HBridge PWM output

    // Enable the cache controller
    CMCC->CTRL.reg = CMCC_CTRL_CEN;
    ca62:	4e67      	ldr	r6, [pc, #412]	; (cc00 <SystemInit+0x2a0>)
    // Enable the FPU
    SCB->CPACR = 0xFU << 20;
    ca64:	4d67      	ldr	r5, [pc, #412]	; (cc04 <SystemInit+0x2a4>)

    // set up GCLK6 for OUT TCx and HLFB TCx
    GCLK->GENCTRL[6].reg = GCLK_GENCTRL_GENEN |
    ca66:	4c68      	ldr	r4, [pc, #416]	; (cc08 <SystemInit+0x2a8>)
                           GCLK_GENCTRL_SRC(GCLK_GENCTRL_SRC_DPLL1_Val) |
                           GCLK_GENCTRL_DIV(__CLEARCORE_DPLL1_HZ /
                                            __CLEARCORE_GCLK6_HZ);
    SYNCBUSY_WAIT(GCLK, GCLK_SYNCBUSY_GENCTRL6);
    ca68:	4960      	ldr	r1, [pc, #384]	; (cbec <SystemInit+0x28c>)
    CLOCK_ENABLE(APBAMASK, SERCOM0_);
    ca6a:	f440 5080 	orr.w	r0, r0, #4096	; 0x1000
    ca6e:	6158      	str	r0, [r3, #20]
    CLOCK_ENABLE(APBBMASK, TC3_); // HLFB(2)
    ca70:	6998      	ldr	r0, [r3, #24]
    ca72:	f440 4080 	orr.w	r0, r0, #16384	; 0x4000
    ca76:	6198      	str	r0, [r3, #24]
    CLOCK_ENABLE(APBAMASK, EIC_);
    ca78:	6958      	ldr	r0, [r3, #20]
    ca7a:	f440 6080 	orr.w	r0, r0, #1024	; 0x400
    ca7e:	6158      	str	r0, [r3, #20]
    CLOCK_ENABLE(APBBMASK, EVSYS_);
    ca80:	6998      	ldr	r0, [r3, #24]
    ca82:	f040 0080 	orr.w	r0, r0, #128	; 0x80
    ca86:	6198      	str	r0, [r3, #24]
    CLOCK_ENABLE(APBBMASK, SERCOM2_);          // XBee
    ca88:	6998      	ldr	r0, [r3, #24]
    ca8a:	f440 7000 	orr.w	r0, r0, #512	; 0x200
    ca8e:	6198      	str	r0, [r3, #24]
    CLOCK_ENABLE(APBCMASK, TC4_); // HLFB(0)
    ca90:	69d8      	ldr	r0, [r3, #28]
    ca92:	f040 0020 	orr.w	r0, r0, #32
    ca96:	61d8      	str	r0, [r3, #28]
    CLOCK_ENABLE(AHBMASK, GMAC_);
    ca98:	6918      	ldr	r0, [r3, #16]
    ca9a:	f440 4080 	orr.w	r0, r0, #16384	; 0x4000
    ca9e:	6118      	str	r0, [r3, #16]
    CLOCK_ENABLE(APBCMASK, GMAC_); // Ethernet
    caa0:	69d8      	ldr	r0, [r3, #28]
    caa2:	f040 0004 	orr.w	r0, r0, #4
    caa6:	61d8      	str	r0, [r3, #28]
    CLOCK_ENABLE(APBDMASK, SERCOM4_);          // SD
    caa8:	6a18      	ldr	r0, [r3, #32]
    caaa:	f040 0001 	orr.w	r0, r0, #1
    caae:	6218      	str	r0, [r3, #32]
    CLOCK_ENABLE(APBDMASK, SERCOM7_);
    cab0:	6a18      	ldr	r0, [r3, #32]
    cab2:	f040 0008 	orr.w	r0, r0, #8
    cab6:	6218      	str	r0, [r3, #32]
    CLOCK_ENABLE(APBDMASK, ADC1_);
    cab8:	6a18      	ldr	r0, [r3, #32]
    caba:	f440 7080 	orr.w	r0, r0, #256	; 0x100
    cabe:	6218      	str	r0, [r3, #32]
    CLOCK_ENABLE(APBCMASK, TC5_); // HLFB(1)
    cac0:	69d8      	ldr	r0, [r3, #28]
    cac2:	f040 0040 	orr.w	r0, r0, #64	; 0x40
    cac6:	61d8      	str	r0, [r3, #28]
    CLOCK_ENABLE(APBAMASK, TC0_); // HLFB(3)
    cac8:	6958      	ldr	r0, [r3, #20]
    caca:	f440 4080 	orr.w	r0, r0, #16384	; 0x4000
    cace:	6158      	str	r0, [r3, #20]
    CLOCK_ENABLE(APBDMASK, TC6_); // HBridge PWM output
    cad0:	6a18      	ldr	r0, [r3, #32]
    cad2:	f040 0020 	orr.w	r0, r0, #32
    cad6:	6218      	str	r0, [r3, #32]
    CMCC->CTRL.reg = CMCC_CTRL_CEN;
    cad8:	2701      	movs	r7, #1
    SCB->CPACR = 0xFU << 20;
    cada:	f44f 0370 	mov.w	r3, #15728640	; 0xf00000
    CMCC->CTRL.reg = CMCC_CTRL_CEN;
    cade:	60b7      	str	r7, [r6, #8]
    SCB->CPACR = 0xFU << 20;
    cae0:	f8c5 3088 	str.w	r3, [r5, #136]	; 0x88
    GCLK->GENCTRL[6].reg = GCLK_GENCTRL_GENEN |
    cae4:	6394      	str	r4, [r2, #56]	; 0x38
    SYNCBUSY_WAIT(GCLK, GCLK_SYNCBUSY_GENCTRL6);
    cae6:	684b      	ldr	r3, [r1, #4]
    cae8:	f413 7380 	ands.w	r3, r3, #256	; 0x100
    caec:	d1fb      	bne.n	cae6 <SystemInit+0x186>

    // set up GCLK7 for SPI sercom clocking
    GCLK->GENCTRL[7].reg = GCLK_GENCTRL_GENEN |
    caee:	4a47      	ldr	r2, [pc, #284]	; (cc0c <SystemInit+0x2ac>)
    caf0:	63ca      	str	r2, [r1, #60]	; 0x3c
                           GCLK_GENCTRL_SRC(GCLK_GENCTRL_SRC_DPLL1_Val) |
                           GCLK_GENCTRL_DIV(__CLEARCORE_DPLL1_HZ /
                                            __CLEARCORE_GCLK7_HZ);

    // CPU Clock @ 120MHz on GCLK(0), GCLK(6)=2.048MHz
    SET_CLOCK_SOURCE(EIC_GCLK_ID, 6);
    caf2:	f8d1 0090 	ldr.w	r0, [r1, #144]	; 0x90
    caf6:	4a3d      	ldr	r2, [pc, #244]	; (cbec <SystemInit+0x28c>)
    caf8:	f363 1086 	bfi	r0, r3, #6, #1
    cafc:	f8c1 0090 	str.w	r0, [r1, #144]	; 0x90
    cb00:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
    cb04:	065c      	lsls	r4, r3, #25
    cb06:	d4fb      	bmi.n	cb00 <SystemInit+0x1a0>
    cb08:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
    cb0c:	4937      	ldr	r1, [pc, #220]	; (cbec <SystemInit+0x28c>)
    cb0e:	2006      	movs	r0, #6
    cb10:	f360 0303 	bfi	r3, r0, #0, #4
    cb14:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
    cb18:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
    cb1c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    cb20:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
    cb24:	684b      	ldr	r3, [r1, #4]
    cb26:	f013 0318 	ands.w	r3, r3, #24
    cb2a:	d1fb      	bne.n	cb24 <SystemInit+0x1c4>
    // HLFB timers
    SET_CLOCK_SOURCE(TC0_GCLK_ID, 6);
    cb2c:	f8d1 00a4 	ldr.w	r0, [r1, #164]	; 0xa4
    cb30:	4a2e      	ldr	r2, [pc, #184]	; (cbec <SystemInit+0x28c>)
    cb32:	f363 1086 	bfi	r0, r3, #6, #1
    cb36:	f8c1 00a4 	str.w	r0, [r1, #164]	; 0xa4
    cb3a:	f8d2 30a4 	ldr.w	r3, [r2, #164]	; 0xa4
    cb3e:	0658      	lsls	r0, r3, #25
    cb40:	d4fb      	bmi.n	cb3a <SystemInit+0x1da>
    cb42:	f8d2 30a4 	ldr.w	r3, [r2, #164]	; 0xa4
    cb46:	4929      	ldr	r1, [pc, #164]	; (cbec <SystemInit+0x28c>)
    cb48:	2006      	movs	r0, #6
    cb4a:	f360 0303 	bfi	r3, r0, #0, #4
    cb4e:	f8c2 30a4 	str.w	r3, [r2, #164]	; 0xa4
    cb52:	f8d2 30a4 	ldr.w	r3, [r2, #164]	; 0xa4
    cb56:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    cb5a:	f8c2 30a4 	str.w	r3, [r2, #164]	; 0xa4
    cb5e:	684b      	ldr	r3, [r1, #4]
    cb60:	f013 0318 	ands.w	r3, r3, #24
    cb64:	d1fb      	bne.n	cb5e <SystemInit+0x1fe>
    SET_CLOCK_SOURCE(TC4_GCLK_ID, 6);
    cb66:	f8d1 00f8 	ldr.w	r0, [r1, #248]	; 0xf8
    cb6a:	4a20      	ldr	r2, [pc, #128]	; (cbec <SystemInit+0x28c>)
    cb6c:	f363 1086 	bfi	r0, r3, #6, #1
    cb70:	f8c1 00f8 	str.w	r0, [r1, #248]	; 0xf8
    cb74:	f8d2 30f8 	ldr.w	r3, [r2, #248]	; 0xf8
    cb78:	0659      	lsls	r1, r3, #25
    cb7a:	d4fb      	bmi.n	cb74 <SystemInit+0x214>
    cb7c:	f8d2 30f8 	ldr.w	r3, [r2, #248]	; 0xf8
    cb80:	491a      	ldr	r1, [pc, #104]	; (cbec <SystemInit+0x28c>)
    cb82:	2006      	movs	r0, #6
    cb84:	f360 0303 	bfi	r3, r0, #0, #4
    cb88:	f8c2 30f8 	str.w	r3, [r2, #248]	; 0xf8
    cb8c:	f8d2 30f8 	ldr.w	r3, [r2, #248]	; 0xf8
    cb90:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    cb94:	f8c2 30f8 	str.w	r3, [r2, #248]	; 0xf8
    cb98:	684b      	ldr	r3, [r1, #4]
    cb9a:	f013 0318 	ands.w	r3, r3, #24
    cb9e:	d1fb      	bne.n	cb98 <SystemInit+0x238>
    SET_CLOCK_SOURCE(TC6_GCLK_ID, 6);
    cba0:	f8d1 011c 	ldr.w	r0, [r1, #284]	; 0x11c
    cba4:	4a11      	ldr	r2, [pc, #68]	; (cbec <SystemInit+0x28c>)
    cba6:	f363 1086 	bfi	r0, r3, #6, #1
    cbaa:	f8c1 011c 	str.w	r0, [r1, #284]	; 0x11c
    cbae:	f8d2 311c 	ldr.w	r3, [r2, #284]	; 0x11c
    cbb2:	065b      	lsls	r3, r3, #25
    cbb4:	d4fb      	bmi.n	cbae <SystemInit+0x24e>
    cbb6:	f8d2 311c 	ldr.w	r3, [r2, #284]	; 0x11c
    cbba:	490c      	ldr	r1, [pc, #48]	; (cbec <SystemInit+0x28c>)
    cbbc:	2006      	movs	r0, #6
    cbbe:	f360 0303 	bfi	r3, r0, #0, #4
    cbc2:	f8c2 311c 	str.w	r3, [r2, #284]	; 0x11c
    cbc6:	f8d2 311c 	ldr.w	r3, [r2, #284]	; 0x11c
    cbca:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    cbce:	f8c2 311c 	str.w	r3, [r2, #284]	; 0x11c
    cbd2:	684b      	ldr	r3, [r1, #4]
    cbd4:	f013 0f18 	tst.w	r3, #24
    cbd8:	d1fb      	bne.n	cbd2 <SystemInit+0x272>
    
    // NOTE: TC7 and TC6 share same clock source
    // SET_CLOCK_SOURCE(TC7_GCLK_ID, 6);

    // ZL: Is this still needed?
    while (GCLK->SYNCBUSY.reg) {
    cbda:	4a04      	ldr	r2, [pc, #16]	; (cbec <SystemInit+0x28c>)
    cbdc:	6853      	ldr	r3, [r2, #4]
    cbde:	2b00      	cmp	r3, #0
    cbe0:	d1fc      	bne.n	cbdc <SystemInit+0x27c>
        continue;
    }
    return;
}
    cbe2:	bcf0      	pop	{r4, r5, r6, r7}
    cbe4:	4770      	bx	lr
    cbe6:	bf00      	nop
    cbe8:	40001000 	.word	0x40001000
    cbec:	40001c00 	.word	0x40001c00
    cbf0:	00190301 	.word	0x00190301
    cbf4:	40000800 	.word	0x40000800
    cbf8:	00020107 	.word	0x00020107
    cbfc:	00320b01 	.word	0x00320b01
    cc00:	41006000 	.word	0x41006000
    cc04:	e000ed00 	.word	0xe000ed00
    cc08:	003a0108 	.word	0x003a0108
    cc0c:	000c0108 	.word	0x000c0108

0000cc10 <GClkFreqUpdate>:
 * Update GClk frequency
 *
 * @brief  Updates the divisor on the specified GClk to
 *         generate the requested frequency
 */
void GClkFreqUpdate(uint8_t gclkIndex, uint32_t freqReq) {
    cc10:	b470      	push	{r4, r5, r6}
    // This adjustment is only supported for GClks that use XOSC1 as the src
    if (GCLK->GENCTRL[gclkIndex].bit.SRC != GCLK_GENCTRL_SRC_XOSC1_Val) {
    cc12:	4a0e      	ldr	r2, [pc, #56]	; (cc4c <GClkFreqUpdate+0x3c>)
    cc14:	f100 0408 	add.w	r4, r0, #8
    cc18:	f852 3024 	ldr.w	r3, [r2, r4, lsl #2]
    cc1c:	f003 030f 	and.w	r3, r3, #15
    cc20:	2b01      	cmp	r3, #1
    cc22:	d001      	beq.n	cc28 <GClkFreqUpdate+0x18>
    // Configure the clock divisor for the requested frequency
    GCLK->GENCTRL[gclkIndex].bit.DIV = __CLEARCORE_OSC_HZ / freqReq;
    while (GCLK->SYNCBUSY.vec.GENCTRL & (1 << gclkIndex)) {
        continue;
    }
}
    cc24:	bc70      	pop	{r4, r5, r6}
    cc26:	4770      	bx	lr
    GCLK->GENCTRL[gclkIndex].bit.DIV = __CLEARCORE_OSC_HZ / freqReq;
    cc28:	f852 6024 	ldr.w	r6, [r2, r4, lsl #2]
    cc2c:	4d08      	ldr	r5, [pc, #32]	; (cc50 <GClkFreqUpdate+0x40>)
    cc2e:	fbb5 f1f1 	udiv	r1, r5, r1
    cc32:	b289      	uxth	r1, r1
    cc34:	f361 461f 	bfi	r6, r1, #16, #16
    cc38:	f842 6024 	str.w	r6, [r2, r4, lsl #2]
    cc3c:	4083      	lsls	r3, r0
    while (GCLK->SYNCBUSY.vec.GENCTRL & (1 << gclkIndex)) {
    cc3e:	6851      	ldr	r1, [r2, #4]
    cc40:	f3c1 018b 	ubfx	r1, r1, #2, #12
    cc44:	4219      	tst	r1, r3
    cc46:	d1fa      	bne.n	cc3e <GClkFreqUpdate+0x2e>
}
    cc48:	bc70      	pop	{r4, r5, r6}
    cc4a:	4770      	bx	lr
    cc4c:	40001c00 	.word	0x40001c00
    cc50:	017d7840 	.word	0x017d7840

0000cc54 <_ZN9ClearCore12EncoderInputC1Ev>:
}

/*
    Construct and wire in our IO pins
*/
EncoderInput::EncoderInput()
    cc54:	b538      	push	{r3, r4, r5, lr}
      m_processIndex(false),
      m_hwIndex(0),
      m_indexPosn(0),
      m_indexDetected(false),
      m_indexInverted(false),
      m_stepsLast(0) {
    cc56:	4911      	ldr	r1, [pc, #68]	; (cc9c <_ZN9ClearCore12EncoderInputC1Ev+0x48>)
    cc58:	4b11      	ldr	r3, [pc, #68]	; (cca0 <_ZN9ClearCore12EncoderInputC1Ev+0x4c>)
    cc5a:	4a12      	ldr	r2, [pc, #72]	; (cca4 <_ZN9ClearCore12EncoderInputC1Ev+0x50>)
    cc5c:	6001      	str	r1, [r0, #0]
    cc5e:	2500      	movs	r5, #0
EncoderInput::EncoderInput()
    cc60:	4604      	mov	r4, r0
      m_stepsLast(0) {
    cc62:	6042      	str	r2, [r0, #4]
    cc64:	6083      	str	r3, [r0, #8]
    cc66:	60c5      	str	r5, [r0, #12]
    cc68:	6105      	str	r5, [r0, #16]
    cc6a:	6145      	str	r5, [r0, #20]
    cc6c:	8305      	strh	r5, [r0, #24]
    cc6e:	4629      	mov	r1, r5
    cc70:	22c8      	movs	r2, #200	; 0xc8
    cc72:	301c      	adds	r0, #28
    cc74:	f011 faa2 	bl	1e1bc <memset>
    cc78:	f884 50e4 	strb.w	r5, [r4, #228]	; 0xe4
    cc7c:	f884 50e5 	strb.w	r5, [r4, #229]	; 0xe5
    cc80:	f884 50e6 	strb.w	r5, [r4, #230]	; 0xe6
    cc84:	f8a4 50e8 	strh.w	r5, [r4, #232]	; 0xe8
    cc88:	f8c4 50ec 	str.w	r5, [r4, #236]	; 0xec
    cc8c:	f884 50f0 	strb.w	r5, [r4, #240]	; 0xf0
    cc90:	f884 50f1 	strb.w	r5, [r4, #241]	; 0xf1
    cc94:	f8a4 50f2 	strh.w	r5, [r4, #242]	; 0xf2
}
    cc98:	4620      	mov	r0, r4
    cc9a:	bd38      	pop	{r3, r4, r5, pc}
    cc9c:	00022e48 	.word	0x00022e48
    cca0:	00022e68 	.word	0x00022e68
    cca4:	00022e58 	.word	0x00022e58

0000cca8 <_ZN9ClearCore12EncoderInput10InitializeEv>:


void EncoderInput::Initialize() {
    cca8:	b430      	push	{r4, r5}

    // Set up PDEC

    // Set the clock source for PDEC to GCLK0 (120 MHz) and enable
    // the peripheral channel
    SET_CLOCK_SOURCE(PDEC_GCLK_ID, 0);
    ccaa:	4a12      	ldr	r2, [pc, #72]	; (ccf4 <_ZN9ClearCore12EncoderInput10InitializeEv+0x4c>)
    ccac:	f8d2 30fc 	ldr.w	r3, [r2, #252]	; 0xfc
    ccb0:	f36f 1386 	bfc	r3, #6, #1
    ccb4:	f8c2 30fc 	str.w	r3, [r2, #252]	; 0xfc
    ccb8:	f8d2 30fc 	ldr.w	r3, [r2, #252]	; 0xfc
    ccbc:	f3c3 1380 	ubfx	r3, r3, #6, #1
    ccc0:	2b00      	cmp	r3, #0
    ccc2:	d1f9      	bne.n	ccb8 <_ZN9ClearCore12EncoderInput10InitializeEv+0x10>
    ccc4:	f8d2 00fc 	ldr.w	r0, [r2, #252]	; 0xfc

    // Enables the peripheral clock to PDEC
    CLOCK_ENABLE(APBCMASK, PDEC_);
    ccc8:	490b      	ldr	r1, [pc, #44]	; (ccf8 <_ZN9ClearCore12EncoderInput10InitializeEv+0x50>)

    PDEC->CTRLA.reg = PDEC_CTRLA_MODE_QDEC | PDEC_CTRLA_CONF_X4 |
    ccca:	4c0c      	ldr	r4, [pc, #48]	; (ccfc <_ZN9ClearCore12EncoderInput10InitializeEv+0x54>)
    cccc:	4d0c      	ldr	r5, [pc, #48]	; (cd00 <_ZN9ClearCore12EncoderInput10InitializeEv+0x58>)
    SET_CLOCK_SOURCE(PDEC_GCLK_ID, 0);
    ccce:	f363 0003 	bfi	r0, r3, #0, #4
    ccd2:	f8c2 00fc 	str.w	r0, [r2, #252]	; 0xfc
    ccd6:	f8d2 30fc 	ldr.w	r3, [r2, #252]	; 0xfc
    ccda:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    ccde:	f8c2 30fc 	str.w	r3, [r2, #252]	; 0xfc
    cce2:	6853      	ldr	r3, [r2, #4]
    CLOCK_ENABLE(APBCMASK, PDEC_);
    cce4:	69cb      	ldr	r3, [r1, #28]
    cce6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
    ccea:	61cb      	str	r3, [r1, #28]
    PDEC->CTRLA.reg = PDEC_CTRLA_MODE_QDEC | PDEC_CTRLA_CONF_X4 |
    ccec:	6025      	str	r5, [r4, #0]
                      PDEC_CTRLA_PINEN0 | PDEC_CTRLA_PINEN1 |
                      PDEC_CTRLA_ANGULAR_Msk;

}
    ccee:	bc30      	pop	{r4, r5}
    ccf0:	4770      	bx	lr
    ccf2:	bf00      	nop
    ccf4:	40001c00 	.word	0x40001c00
    ccf8:	40000800 	.word	0x40000800
    ccfc:	42001c00 	.word	0x42001c00
    cd00:	07030000 	.word	0x07030000

0000cd04 <_ZN9ClearCore12EncoderInput6UpdateEv>:

void EncoderInput::Update() {
    cd04:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    //If the encoder is disabled, just return
    if (!m_enabled) {
    cd06:	f890 30e5 	ldrb.w	r3, [r0, #229]	; 0xe5
    cd0a:	2b00      	cmp	r3, #0
    cd0c:	d038      	beq.n	cd80 <_ZN9ClearCore12EncoderInput6UpdateEv+0x7c>
        return;
    }
    // Refresh the COUNT reading
    PDEC->CTRLBSET.reg = PDEC_CTRLBSET_CMD_READSYNC;
    cd0e:	4a29      	ldr	r2, [pc, #164]	; (cdb4 <_ZN9ClearCore12EncoderInput6UpdateEv+0xb0>)
    cd10:	2360      	movs	r3, #96	; 0x60
    cd12:	7153      	strb	r3, [r2, #5]
    SYNCBUSY_WAIT(PDEC, PDEC_SYNCBUSY_COUNT);
    cd14:	6913      	ldr	r3, [r2, #16]
    cd16:	f013 0340 	ands.w	r3, r3, #64	; 0x40
    cd1a:	d1fb      	bne.n	cd14 <_ZN9ClearCore12EncoderInput6UpdateEv+0x10>
    int16_t currentHwPosn = PDEC->COUNT.reg;
    cd1c:	69d5      	ldr	r5, [r2, #28]
    m_stepsLast = currentHwPosn - m_hwPosn;
    cd1e:	8b02      	ldrh	r2, [r0, #24]
    
    m_indexDetected = m_processIndex;
    cd20:	f890 10e6 	ldrb.w	r1, [r0, #230]	; 0xe6
    cd24:	f880 10f0 	strb.w	r1, [r0, #240]	; 0xf0
    m_stepsLast = currentHwPosn - m_hwPosn;
    cd28:	1aaa      	subs	r2, r5, r2
    cd2a:	b212      	sxth	r2, r2
    cd2c:	4604      	mov	r4, r0
    cd2e:	f8a0 20f2 	strh.w	r2, [r0, #242]	; 0xf2
    int16_t currentHwPosn = PDEC->COUNT.reg;
    cd32:	b22d      	sxth	r5, r5
    if (m_processIndex) {
    cd34:	bb29      	cbnz	r1, cd82 <_ZN9ClearCore12EncoderInput6UpdateEv+0x7e>
        m_indexPosn = atomic_load_n(&m_curPosn) + m_hwIndex - m_hwPosn;
        m_processIndex = false;
        // Re-enable the index capture interrupt
        InputMgr.InterruptEnable(m_indexInfo->extInt, true, false);
    }
    m_hwPosn = currentHwPosn;
    cd36:	8325      	strh	r5, [r4, #24]
        m_indexPosn = atomic_load_n(&m_curPosn) + m_hwIndex - m_hwPosn;
    cd38:	f104 030c 	add.w	r3, r4, #12
    // Adjust the measured position
    int32_t posnNow = atomic_add_fetch(&m_curPosn, (int32_t)m_stepsLast);
    cd3c:	f3bf 8f5b 	dmb	ish
    cd40:	e853 6f00 	ldrex	r6, [r3]
    cd44:	4416      	add	r6, r2
    cd46:	e843 6100 	strex	r1, r6, [r3]
    cd4a:	2900      	cmp	r1, #0
    cd4c:	d1f8      	bne.n	cd40 <_ZN9ClearCore12EncoderInput6UpdateEv+0x3c>
    cd4e:	f3bf 8f5b 	dmb	ish
    // Calculate the velocity based on the position change in the 
    // last VEL_EST_SAMPLES sample times and convert to cnts/sec
    int32_t posnDelta = posnNow - m_posnHistory[m_posnHistoryIndex];
    cd52:	f894 30e4 	ldrb.w	r3, [r4, #228]	; 0xe4
    m_velocity = posnDelta * (_CLEARCORE_SAMPLE_RATE_HZ / VEL_EST_SAMPLES);
    m_posnHistory[m_posnHistoryIndex] = posnNow;
    m_posnHistoryIndex = (m_posnHistoryIndex + 1) % VEL_EST_SAMPLES;
    cd56:	4d18      	ldr	r5, [pc, #96]	; (cdb8 <_ZN9ClearCore12EncoderInput6UpdateEv+0xb4>)
    cd58:	eb04 0783 	add.w	r7, r4, r3, lsl #2
    cd5c:	3301      	adds	r3, #1
    int32_t posnDelta = posnNow - m_posnHistory[m_posnHistoryIndex];
    cd5e:	69f9      	ldr	r1, [r7, #28]
    m_posnHistoryIndex = (m_posnHistoryIndex + 1) % VEL_EST_SAMPLES;
    cd60:	fb85 2503 	smull	r2, r5, r5, r3
    cd64:	17da      	asrs	r2, r3, #31
    int32_t posnDelta = posnNow - m_posnHistory[m_posnHistoryIndex];
    cd66:	1a70      	subs	r0, r6, r1
    m_posnHistoryIndex = (m_posnHistoryIndex + 1) % VEL_EST_SAMPLES;
    cd68:	ebc2 1225 	rsb	r2, r2, r5, asr #4
    m_velocity = posnDelta * (_CLEARCORE_SAMPLE_RATE_HZ / VEL_EST_SAMPLES);
    cd6c:	2164      	movs	r1, #100	; 0x64
    m_posnHistoryIndex = (m_posnHistoryIndex + 1) % VEL_EST_SAMPLES;
    cd6e:	2532      	movs	r5, #50	; 0x32
    m_velocity = posnDelta * (_CLEARCORE_SAMPLE_RATE_HZ / VEL_EST_SAMPLES);
    cd70:	fb01 f100 	mul.w	r1, r1, r0
    m_posnHistoryIndex = (m_posnHistoryIndex + 1) % VEL_EST_SAMPLES;
    cd74:	fb05 3312 	mls	r3, r5, r2, r3
    m_velocity = posnDelta * (_CLEARCORE_SAMPLE_RATE_HZ / VEL_EST_SAMPLES);
    cd78:	6161      	str	r1, [r4, #20]
    m_posnHistory[m_posnHistoryIndex] = posnNow;
    cd7a:	61fe      	str	r6, [r7, #28]
    m_posnHistoryIndex = (m_posnHistoryIndex + 1) % VEL_EST_SAMPLES;
    cd7c:	f884 30e4 	strb.w	r3, [r4, #228]	; 0xe4
    cd80:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        m_indexPosn = atomic_load_n(&m_curPosn) + m_hwIndex - m_hwPosn;
    cd82:	68c6      	ldr	r6, [r0, #12]
    cd84:	f3bf 8f5b 	dmb	ish
    cd88:	f9b0 20e8 	ldrsh.w	r2, [r0, #232]	; 0xe8
    cd8c:	f9b0 0018 	ldrsh.w	r0, [r0, #24]
        InputMgr.InterruptEnable(m_indexInfo->extInt, true, false);
    cd90:	68a1      	ldr	r1, [r4, #8]
        m_processIndex = false;
    cd92:	f884 30e6 	strb.w	r3, [r4, #230]	; 0xe6
        m_indexPosn = atomic_load_n(&m_curPosn) + m_hwIndex - m_hwPosn;
    cd96:	4432      	add	r2, r6
    cd98:	1a12      	subs	r2, r2, r0
        InputMgr.InterruptEnable(m_indexInfo->extInt, true, false);
    cd9a:	4808      	ldr	r0, [pc, #32]	; (cdbc <_ZN9ClearCore12EncoderInput6UpdateEv+0xb8>)
        m_indexPosn = atomic_load_n(&m_curPosn) + m_hwIndex - m_hwPosn;
    cd9c:	f8c4 20ec 	str.w	r2, [r4, #236]	; 0xec
        InputMgr.InterruptEnable(m_indexInfo->extInt, true, false);
    cda0:	f991 1003 	ldrsb.w	r1, [r1, #3]
    cda4:	6800      	ldr	r0, [r0, #0]
    cda6:	2201      	movs	r2, #1
    cda8:	f7f8 fb20 	bl	53ec <_ZN9ClearCore12InputManager15InterruptEnableEabb>
    cdac:	f9b4 20f2 	ldrsh.w	r2, [r4, #242]	; 0xf2
    cdb0:	e7c1      	b.n	cd36 <_ZN9ClearCore12EncoderInput6UpdateEv+0x32>
    cdb2:	bf00      	nop
    cdb4:	42001c00 	.word	0x42001c00
    cdb8:	51eb851f 	.word	0x51eb851f
    cdbc:	20000bec 	.word	0x20000bec

0000cdc0 <cdcdf_acm_req>:
 * \param[in] ep Endpoint address.
 * \param[in] req Pointer to the request.
 * \return Operation status.
 */
static int32_t cdcdf_acm_req(uint8_t ep, struct usb_req *req, enum usb_ctrl_stage stage)
{
    cdc0:	b5f0      	push	{r4, r5, r6, r7, lr}
	if (0x01 != ((req->bmRequestType >> 5) & 0x03)) { // class request
    cdc2:	780d      	ldrb	r5, [r1, #0]
    cdc4:	f3c5 1441 	ubfx	r4, r5, #5, #2
    cdc8:	2c01      	cmp	r4, #1
{
    cdca:	b083      	sub	sp, #12
	if (0x01 != ((req->bmRequestType >> 5) & 0x03)) { // class request
    cdcc:	d152      	bne.n	ce74 <cdcdf_acm_req+0xb4>
		return ERR_NOT_FOUND;
	}
	if ((req->wIndex == _cdcdf_acm_funcd.func_iface[0]) || (req->wIndex == _cdcdf_acm_funcd.func_iface[1])) {
    cdce:	4e30      	ldr	r6, [pc, #192]	; (ce90 <cdcdf_acm_req+0xd0>)
    cdd0:	888c      	ldrh	r4, [r1, #4]
    cdd2:	7833      	ldrb	r3, [r6, #0]
    cdd4:	42a3      	cmp	r3, r4
    cdd6:	d002      	beq.n	cdde <cdcdf_acm_req+0x1e>
    cdd8:	7873      	ldrb	r3, [r6, #1]
    cdda:	42a3      	cmp	r3, r4
    cddc:	d14a      	bne.n	ce74 <cdcdf_acm_req+0xb4>
		if (req->bmRequestType & USB_EP_DIR_IN) {
    cdde:	062b      	lsls	r3, r5, #24
    cde0:	4617      	mov	r7, r2
    cde2:	4606      	mov	r6, r0
    cde4:	460c      	mov	r4, r1
    cde6:	d438      	bmi.n	ce5a <cdcdf_acm_req+0x9a>
	uint16_t                   len      = req->wLength;
    cde8:	88cd      	ldrh	r5, [r1, #6]
	uint8_t *                  ctrl_buf = usbdc_get_ctrl_buffer();
    cdea:	f000 fc7f 	bl	d6ec <usbdc_get_ctrl_buffer>
	switch (req->bRequest) {
    cdee:	7863      	ldrb	r3, [r4, #1]
    cdf0:	2b20      	cmp	r3, #32
	uint8_t *                  ctrl_buf = usbdc_get_ctrl_buffer();
    cdf2:	4601      	mov	r1, r0
	switch (req->bRequest) {
    cdf4:	d00f      	beq.n	ce16 <cdcdf_acm_req+0x56>
    cdf6:	2b22      	cmp	r3, #34	; 0x22
    cdf8:	d128      	bne.n	ce4c <cdcdf_acm_req+0x8c>
		usbdc_xfer(0, NULL, 0, 0);
    cdfa:	2300      	movs	r3, #0
    cdfc:	461a      	mov	r2, r3
    cdfe:	4619      	mov	r1, r3
    ce00:	4618      	mov	r0, r3
    ce02:	f000 fc07 	bl	d614 <usbdc_xfer>
		if (NULL != cdcdf_acm_notify_state) {
    ce06:	4b23      	ldr	r3, [pc, #140]	; (ce94 <cdcdf_acm_req+0xd4>)
    ce08:	681b      	ldr	r3, [r3, #0]
    ce0a:	b31b      	cbz	r3, ce54 <cdcdf_acm_req+0x94>
			cdcdf_acm_notify_state(req->wValue);
    ce0c:	8860      	ldrh	r0, [r4, #2]
    ce0e:	4798      	blx	r3
		return ERR_NONE;
    ce10:	2000      	movs	r0, #0
			return cdcdf_acm_set_req(ep, req, stage);
		}
	} else {
		return ERR_NOT_FOUND;
	}
}
    ce12:	b003      	add	sp, #12
    ce14:	bdf0      	pop	{r4, r5, r6, r7, pc}
		if (sizeof(struct usb_cdc_line_coding) != len) {
    ce16:	2d07      	cmp	r5, #7
    ce18:	d136      	bne.n	ce88 <cdcdf_acm_req+0xc8>
		if (USB_SETUP_STAGE == stage) {
    ce1a:	b37f      	cbz	r7, ce7c <cdcdf_acm_req+0xbc>
			if ((NULL == cdcdf_acm_set_line_coding) || (true == cdcdf_acm_set_line_coding(&line_coding_tmp))) {
    ce1c:	4b1e      	ldr	r3, [pc, #120]	; (ce98 <cdcdf_acm_req+0xd8>)
			memcpy(&line_coding_tmp, ctrl_buf, sizeof(struct usb_cdc_line_coding));
    ce1e:	6800      	ldr	r0, [r0, #0]
    ce20:	9000      	str	r0, [sp, #0]
			if ((NULL == cdcdf_acm_set_line_coding) || (true == cdcdf_acm_set_line_coding(&line_coding_tmp))) {
    ce22:	681b      	ldr	r3, [r3, #0]
			memcpy(&line_coding_tmp, ctrl_buf, sizeof(struct usb_cdc_line_coding));
    ce24:	888a      	ldrh	r2, [r1, #4]
    ce26:	7989      	ldrb	r1, [r1, #6]
    ce28:	f88d 1006 	strb.w	r1, [sp, #6]
    ce2c:	466c      	mov	r4, sp
    ce2e:	f8ad 2004 	strh.w	r2, [sp, #4]
			if ((NULL == cdcdf_acm_set_line_coding) || (true == cdcdf_acm_set_line_coding(&line_coding_tmp))) {
    ce32:	b113      	cbz	r3, ce3a <cdcdf_acm_req+0x7a>
    ce34:	4668      	mov	r0, sp
    ce36:	4798      	blx	r3
    ce38:	b160      	cbz	r0, ce54 <cdcdf_acm_req+0x94>
				usbd_cdc_line_coding = line_coding_tmp;
    ce3a:	e894 0003 	ldmia.w	r4, {r0, r1}
    ce3e:	4b17      	ldr	r3, [pc, #92]	; (ce9c <cdcdf_acm_req+0xdc>)
    ce40:	0c0a      	lsrs	r2, r1, #16
    ce42:	6018      	str	r0, [r3, #0]
    ce44:	8099      	strh	r1, [r3, #4]
    ce46:	719a      	strb	r2, [r3, #6]
			return ERR_NONE;
    ce48:	2000      	movs	r0, #0
    ce4a:	e001      	b.n	ce50 <cdcdf_acm_req+0x90>
		return ERR_INVALID_ARG;
    ce4c:	f06f 000c 	mvn.w	r0, #12
}
    ce50:	b003      	add	sp, #12
    ce52:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return ERR_NONE;
    ce54:	2000      	movs	r0, #0
}
    ce56:	b003      	add	sp, #12
    ce58:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (USB_DATA_STAGE == stage) {
    ce5a:	2a01      	cmp	r2, #1
    ce5c:	d0fa      	beq.n	ce54 <cdcdf_acm_req+0x94>
	switch (req->bRequest) {
    ce5e:	784b      	ldrb	r3, [r1, #1]
    ce60:	2b21      	cmp	r3, #33	; 0x21
    ce62:	d1f3      	bne.n	ce4c <cdcdf_acm_req+0x8c>
		if (sizeof(struct usb_cdc_line_coding) != len) {
    ce64:	88ca      	ldrh	r2, [r1, #6]
    ce66:	2a07      	cmp	r2, #7
    ce68:	d10e      	bne.n	ce88 <cdcdf_acm_req+0xc8>
		return usbdc_xfer(ep, (uint8_t *)&usbd_cdc_line_coding, len, false);
    ce6a:	2300      	movs	r3, #0
    ce6c:	490b      	ldr	r1, [pc, #44]	; (ce9c <cdcdf_acm_req+0xdc>)
    ce6e:	f000 fbd1 	bl	d614 <usbdc_xfer>
    ce72:	e7ed      	b.n	ce50 <cdcdf_acm_req+0x90>
		return ERR_NOT_FOUND;
    ce74:	f06f 0009 	mvn.w	r0, #9
}
    ce78:	b003      	add	sp, #12
    ce7a:	bdf0      	pop	{r4, r5, r6, r7, pc}
			return usbdc_xfer(ep, ctrl_buf, len, false);
    ce7c:	463b      	mov	r3, r7
    ce7e:	462a      	mov	r2, r5
    ce80:	4630      	mov	r0, r6
    ce82:	f000 fbc7 	bl	d614 <usbdc_xfer>
    ce86:	e7e3      	b.n	ce50 <cdcdf_acm_req+0x90>
			return ERR_INVALID_DATA;
    ce88:	f04f 30ff 	mov.w	r0, #4294967295
    ce8c:	e7e0      	b.n	ce50 <cdcdf_acm_req+0x90>
    ce8e:	bf00      	nop
    ce90:	20001d4c 	.word	0x20001d4c
    ce94:	20001d54 	.word	0x20001d54
    ce98:	20001d58 	.word	0x20001d58
    ce9c:	20001d5c 	.word	0x20001d5c

0000cea0 <cdcdf_acm_ctrl>:
	switch (ctrl) {
    cea0:	2901      	cmp	r1, #1
{
    cea2:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    cea6:	4616      	mov	r6, r2
	switch (ctrl) {
    cea8:	d008      	beq.n	cebc <cdcdf_acm_ctrl+0x1c>
    ceaa:	d314      	bcc.n	ced6 <cdcdf_acm_ctrl+0x36>
		return ERR_INVALID_ARG;
    ceac:	2902      	cmp	r1, #2
    ceae:	bf0c      	ite	eq
    ceb0:	f06f 001a 	mvneq.w	r0, #26
    ceb4:	f06f 000c 	mvnne.w	r0, #12
    ceb8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    cebc:	6884      	ldr	r4, [r0, #8]
	if (desc) {
    cebe:	2a00      	cmp	r2, #0
    cec0:	d047      	beq.n	cf52 <cdcdf_acm_ctrl+0xb2>
		ifc_desc.bInterfaceClass = desc->sod[5];
    cec2:	6813      	ldr	r3, [r2, #0]
		if ((ifc_desc.bInterfaceClass != CDC_CLASS_COMM) && (ifc_desc.bInterfaceClass != CDC_CLASS_DATA)) {
    cec4:	795b      	ldrb	r3, [r3, #5]
    cec6:	f003 03f7 	and.w	r3, r3, #247	; 0xf7
    ceca:	2b02      	cmp	r3, #2
    cecc:	d041      	beq.n	cf52 <cdcdf_acm_ctrl+0xb2>
			return ERR_NOT_FOUND;
    cece:	f06f 0009 	mvn.w	r0, #9
    ced2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	ifc = desc->sod;
    ced6:	6813      	ldr	r3, [r2, #0]
    ced8:	6887      	ldr	r7, [r0, #8]
		if (NULL == ifc) {
    ceda:	2b00      	cmp	r3, #0
    cedc:	d0f7      	beq.n	cece <cdcdf_acm_ctrl+0x2e>
    cede:	f107 38ff 	add.w	r8, r7, #4294967295
    cee2:	f107 0901 	add.w	r9, r7, #1
		if ((CDC_CLASS_COMM == ifc_desc.bInterfaceClass) || (CDC_CLASS_DATA == ifc_desc.bInterfaceClass)) {
    cee6:	795a      	ldrb	r2, [r3, #5]
		ifc_desc.bInterfaceNumber = ifc[2];
    cee8:	7899      	ldrb	r1, [r3, #2]
		if ((CDC_CLASS_COMM == ifc_desc.bInterfaceClass) || (CDC_CLASS_DATA == ifc_desc.bInterfaceClass)) {
    ceea:	f002 02f7 	and.w	r2, r2, #247	; 0xf7
    ceee:	2a02      	cmp	r2, #2
    cef0:	d1ed      	bne.n	cece <cdcdf_acm_ctrl+0x2e>
			if (func_data->func_iface[i] == ifc_desc.bInterfaceNumber) { // Initialized
    cef2:	f818 2f01 	ldrb.w	r2, [r8, #1]!
    cef6:	4291      	cmp	r1, r2
    cef8:	d061      	beq.n	cfbe <cdcdf_acm_ctrl+0x11e>
			} else if (func_data->func_iface[i] != 0xFF) { // Occupied
    cefa:	2aff      	cmp	r2, #255	; 0xff
    cefc:	d15b      	bne.n	cfb6 <cdcdf_acm_ctrl+0x116>
				func_data->func_iface[i] = ifc_desc.bInterfaceNumber;
    cefe:	f888 1000 	strb.w	r1, [r8]
		ep = usb_find_desc(ifc, desc->eod, USB_DT_ENDPOINT);
    cf02:	4618      	mov	r0, r3
    cf04:	6871      	ldr	r1, [r6, #4]
    cf06:	2205      	movs	r2, #5
    cf08:	f000 fc00 	bl	d70c <usb_find_desc>
		while (NULL != ep) {
    cf0c:	4604      	mov	r4, r0
    cf0e:	b980      	cbnz	r0, cf32 <cdcdf_acm_ctrl+0x92>
    cf10:	e041      	b.n	cf96 <cdcdf_acm_ctrl+0xf6>
			if (ep_desc.bEndpointAddress & USB_EP_DIR_IN) {
    cf12:	062b      	lsls	r3, r5, #24
				func_data->func_ep_in[i] = ep_desc.bEndpointAddress;
    cf14:	bf4c      	ite	mi
    cf16:	f888 5002 	strbmi.w	r5, [r8, #2]
				func_data->func_ep_out = ep_desc.bEndpointAddress;
    cf1a:	713d      	strbpl	r5, [r7, #4]
				usb_d_ep_enable(func_data->func_ep_out);
    cf1c:	4628      	mov	r0, r5
    cf1e:	f000 feaf 	bl	dc80 <usb_d_ep_enable>
			desc->sod = ep;
    cf22:	6034      	str	r4, [r6, #0]
 *  \param[in] desc Byte pointer to the descriptor start address
 *  \return Byte pointer to the next descriptor
 */
static inline uint8_t *usb_desc_next(uint8_t *desc)
{
	return (desc + usb_desc_len(desc));
    cf24:	7820      	ldrb	r0, [r4, #0]
			ep        = usb_find_ep_desc(usb_desc_next(desc->sod), desc->eod);
    cf26:	6871      	ldr	r1, [r6, #4]
    cf28:	4420      	add	r0, r4
    cf2a:	f000 fc09 	bl	d740 <usb_find_ep_desc>
		while (NULL != ep) {
    cf2e:	4604      	mov	r4, r0
    cf30:	b388      	cbz	r0, cf96 <cdcdf_acm_ctrl+0xf6>
	return (ptr[0] + (ptr[1] << 8));
    cf32:	7963      	ldrb	r3, [r4, #5]
    cf34:	7922      	ldrb	r2, [r4, #4]
			ep_desc.bEndpointAddress = ep[2];
    cf36:	78a5      	ldrb	r5, [r4, #2]
			if (usb_d_ep_init(ep_desc.bEndpointAddress, ep_desc.bmAttributes, ep_desc.wMaxPacketSize)) {
    cf38:	78e1      	ldrb	r1, [r4, #3]
    cf3a:	eb02 2203 	add.w	r2, r2, r3, lsl #8
    cf3e:	b292      	uxth	r2, r2
    cf40:	4628      	mov	r0, r5
    cf42:	f000 fe4b 	bl	dbdc <usb_d_ep_init>
    cf46:	2800      	cmp	r0, #0
    cf48:	d0e3      	beq.n	cf12 <cdcdf_acm_ctrl+0x72>
				return ERR_NOT_INITIALIZED;
    cf4a:	f06f 0013 	mvn.w	r0, #19
}
    cf4e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		if (func_data->func_iface[i] == 0xFF) {
    cf52:	7823      	ldrb	r3, [r4, #0]
    cf54:	2bff      	cmp	r3, #255	; 0xff
    cf56:	d007      	beq.n	cf68 <cdcdf_acm_ctrl+0xc8>
			if (func_data->func_ep_in[i] != 0xFF) {
    cf58:	78a0      	ldrb	r0, [r4, #2]
			func_data->func_iface[i] = 0xFF;
    cf5a:	25ff      	movs	r5, #255	; 0xff
			if (func_data->func_ep_in[i] != 0xFF) {
    cf5c:	42a8      	cmp	r0, r5
			func_data->func_iface[i] = 0xFF;
    cf5e:	7025      	strb	r5, [r4, #0]
			if (func_data->func_ep_in[i] != 0xFF) {
    cf60:	d002      	beq.n	cf68 <cdcdf_acm_ctrl+0xc8>
				usb_d_ep_deinit(func_data->func_ep_in[i]);
    cf62:	f000 fe71 	bl	dc48 <usb_d_ep_deinit>
				func_data->func_ep_in[i] = 0xFF;
    cf66:	70a5      	strb	r5, [r4, #2]
		if (func_data->func_iface[i] == 0xFF) {
    cf68:	7863      	ldrb	r3, [r4, #1]
    cf6a:	2bff      	cmp	r3, #255	; 0xff
    cf6c:	d007      	beq.n	cf7e <cdcdf_acm_ctrl+0xde>
			if (func_data->func_ep_in[i] != 0xFF) {
    cf6e:	78e0      	ldrb	r0, [r4, #3]
			func_data->func_iface[i] = 0xFF;
    cf70:	25ff      	movs	r5, #255	; 0xff
			if (func_data->func_ep_in[i] != 0xFF) {
    cf72:	42a8      	cmp	r0, r5
			func_data->func_iface[i] = 0xFF;
    cf74:	7065      	strb	r5, [r4, #1]
			if (func_data->func_ep_in[i] != 0xFF) {
    cf76:	d002      	beq.n	cf7e <cdcdf_acm_ctrl+0xde>
				usb_d_ep_deinit(func_data->func_ep_in[i]);
    cf78:	f000 fe66 	bl	dc48 <usb_d_ep_deinit>
				func_data->func_ep_in[i] = 0xFF;
    cf7c:	70e5      	strb	r5, [r4, #3]
	if (func_data->func_ep_out != 0xFF) {
    cf7e:	7920      	ldrb	r0, [r4, #4]
    cf80:	28ff      	cmp	r0, #255	; 0xff
    cf82:	d003      	beq.n	cf8c <cdcdf_acm_ctrl+0xec>
		usb_d_ep_deinit(func_data->func_ep_out);
    cf84:	f000 fe60 	bl	dc48 <usb_d_ep_deinit>
		func_data->func_ep_out = 0xFF;
    cf88:	23ff      	movs	r3, #255	; 0xff
    cf8a:	7123      	strb	r3, [r4, #4]
	_cdcdf_acm_funcd.enabled = false;
    cf8c:	4b0f      	ldr	r3, [pc, #60]	; (cfcc <cdcdf_acm_ctrl+0x12c>)
    cf8e:	2000      	movs	r0, #0
    cf90:	7158      	strb	r0, [r3, #5]
    cf92:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		ifc = usb_find_desc(usb_desc_next(desc->sod), desc->eod, USB_DT_INTERFACE);
    cf96:	6833      	ldr	r3, [r6, #0]
    cf98:	6871      	ldr	r1, [r6, #4]
	return (desc + usb_desc_len(desc));
    cf9a:	7818      	ldrb	r0, [r3, #0]
    cf9c:	2204      	movs	r2, #4
    cf9e:	4418      	add	r0, r3
    cfa0:	f000 fbb4 	bl	d70c <usb_find_desc>
	for (i = 0; i < 2; i++) {
    cfa4:	45c1      	cmp	r9, r8
		ifc = usb_find_desc(usb_desc_next(desc->sod), desc->eod, USB_DT_INTERFACE);
    cfa6:	4603      	mov	r3, r0
	for (i = 0; i < 2; i++) {
    cfa8:	d10d      	bne.n	cfc6 <cdcdf_acm_ctrl+0x126>
	_cdcdf_acm_funcd.enabled = true;
    cfaa:	4b08      	ldr	r3, [pc, #32]	; (cfcc <cdcdf_acm_ctrl+0x12c>)
    cfac:	2201      	movs	r2, #1
    cfae:	715a      	strb	r2, [r3, #5]
	return ERR_NONE;
    cfb0:	2000      	movs	r0, #0
    cfb2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
				return ERR_NO_RESOURCE;
    cfb6:	f06f 001b 	mvn.w	r0, #27
    cfba:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
				return ERR_ALREADY_INITIALIZED;
    cfbe:	f06f 0011 	mvn.w	r0, #17
    cfc2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		if (NULL == ifc) {
    cfc6:	2b00      	cmp	r3, #0
    cfc8:	d18d      	bne.n	cee6 <cdcdf_acm_ctrl+0x46>
    cfca:	e780      	b.n	cece <cdcdf_acm_ctrl+0x2e>
    cfcc:	20001d4c 	.word	0x20001d4c

0000cfd0 <cdcdf_acm_init>:

/**
 * \brief Initialize the USB CDC ACM Function Driver
 */
int32_t cdcdf_acm_init(void)
{
    cfd0:	b508      	push	{r3, lr}
	if (usbdc_get_state() > USBD_S_POWER) {
    cfd2:	f000 fb91 	bl	d6f8 <usbdc_get_state>
    cfd6:	2801      	cmp	r0, #1
    cfd8:	d80d      	bhi.n	cff6 <cdcdf_acm_init+0x26>
		return ERR_DENIED;
	}

	_cdcdf_acm.ctrl      = cdcdf_acm_ctrl;
    cfda:	4b08      	ldr	r3, [pc, #32]	; (cffc <cdcdf_acm_init+0x2c>)
	_cdcdf_acm.func_data = &_cdcdf_acm_funcd;
    cfdc:	4a08      	ldr	r2, [pc, #32]	; (d000 <cdcdf_acm_init+0x30>)
	_cdcdf_acm.ctrl      = cdcdf_acm_ctrl;
    cfde:	4909      	ldr	r1, [pc, #36]	; (d004 <cdcdf_acm_init+0x34>)
    cfe0:	6059      	str	r1, [r3, #4]

	usbdc_register_function(&_cdcdf_acm);
    cfe2:	4618      	mov	r0, r3
	_cdcdf_acm.func_data = &_cdcdf_acm_funcd;
    cfe4:	609a      	str	r2, [r3, #8]
	usbdc_register_function(&_cdcdf_acm);
    cfe6:	f000 fb61 	bl	d6ac <usbdc_register_function>
	usbdc_register_handler(USBDC_HDL_REQ, &cdcdf_acm_req_h);
    cfea:	4907      	ldr	r1, [pc, #28]	; (d008 <cdcdf_acm_init+0x38>)
    cfec:	2001      	movs	r0, #1
    cfee:	f000 fb1f 	bl	d630 <usbdc_register_handler>
	return ERR_NONE;
    cff2:	2000      	movs	r0, #0
    cff4:	bd08      	pop	{r3, pc}
		return ERR_DENIED;
    cff6:	f06f 0010 	mvn.w	r0, #16
}
    cffa:	bd08      	pop	{r3, pc}
    cffc:	20001d40 	.word	0x20001d40
    d000:	20001d4c 	.word	0x20001d4c
    d004:	0000cea1 	.word	0x0000cea1
    d008:	200000ec 	.word	0x200000ec

0000d00c <cdcdf_acm_read>:
/**
 * \brief Check whether CDC ACM Function is enabled
 */
bool cdcdf_acm_is_enabled(void)
{
	return _cdcdf_acm_funcd.enabled;
    d00c:	4b08      	ldr	r3, [pc, #32]	; (d030 <cdcdf_acm_read+0x24>)
{
    d00e:	b410      	push	{r4}
	if (!cdcdf_acm_is_enabled()) {
    d010:	795c      	ldrb	r4, [r3, #5]
    d012:	b13c      	cbz	r4, d024 <cdcdf_acm_read+0x18>
	return usbdc_xfer(_cdcdf_acm_funcd.func_ep_out, buf, size, false);
    d014:	460a      	mov	r2, r1
}
    d016:	f85d 4b04 	ldr.w	r4, [sp], #4
	return usbdc_xfer(_cdcdf_acm_funcd.func_ep_out, buf, size, false);
    d01a:	4601      	mov	r1, r0
    d01c:	7918      	ldrb	r0, [r3, #4]
    d01e:	2300      	movs	r3, #0
    d020:	f000 baf8 	b.w	d614 <usbdc_xfer>
}
    d024:	f06f 0010 	mvn.w	r0, #16
    d028:	f85d 4b04 	ldr.w	r4, [sp], #4
    d02c:	4770      	bx	lr
    d02e:	bf00      	nop
    d030:	20001d4c 	.word	0x20001d4c

0000d034 <cdcdf_acm_write>:
	return _cdcdf_acm_funcd.enabled;
    d034:	4b08      	ldr	r3, [pc, #32]	; (d058 <cdcdf_acm_write+0x24>)
{
    d036:	b410      	push	{r4}
	if (!cdcdf_acm_is_enabled()) {
    d038:	795c      	ldrb	r4, [r3, #5]
    d03a:	b13c      	cbz	r4, d04c <cdcdf_acm_write+0x18>
	return usbdc_xfer(_cdcdf_acm_funcd.func_ep_in[CDCDF_ACM_DATA_EP_INDEX], buf, size, true);
    d03c:	460a      	mov	r2, r1
}
    d03e:	f85d 4b04 	ldr.w	r4, [sp], #4
	return usbdc_xfer(_cdcdf_acm_funcd.func_ep_in[CDCDF_ACM_DATA_EP_INDEX], buf, size, true);
    d042:	4601      	mov	r1, r0
    d044:	78d8      	ldrb	r0, [r3, #3]
    d046:	2301      	movs	r3, #1
    d048:	f000 bae4 	b.w	d614 <usbdc_xfer>
}
    d04c:	f06f 0010 	mvn.w	r0, #16
    d050:	f85d 4b04 	ldr.w	r4, [sp], #4
    d054:	4770      	bx	lr
    d056:	bf00      	nop
    d058:	20001d4c 	.word	0x20001d4c

0000d05c <cdcdf_acm_stop_xfer>:
{
    d05c:	b510      	push	{r4, lr}
	usb_d_ep_abort(_cdcdf_acm_funcd.func_ep_in[CDCDF_ACM_DATA_EP_INDEX]);
    d05e:	4c04      	ldr	r4, [pc, #16]	; (d070 <cdcdf_acm_stop_xfer+0x14>)
    d060:	78e0      	ldrb	r0, [r4, #3]
    d062:	f000 fecb 	bl	ddfc <usb_d_ep_abort>
	usb_d_ep_abort(_cdcdf_acm_funcd.func_ep_out);
    d066:	7920      	ldrb	r0, [r4, #4]
}
    d068:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	usb_d_ep_abort(_cdcdf_acm_funcd.func_ep_out);
    d06c:	f000 bec6 	b.w	ddfc <usb_d_ep_abort>
    d070:	20001d4c 	.word	0x20001d4c

0000d074 <cdcdf_acm_register_callback>:
{
    d074:	b508      	push	{r3, lr}
	switch (cb_type) {
    d076:	2803      	cmp	r0, #3
    d078:	d81b      	bhi.n	d0b2 <cdcdf_acm_register_callback+0x3e>
    d07a:	e8df f000 	tbb	[pc, r0]
    d07e:	0a12      	.short	0x0a12
    d080:	0206      	.short	0x0206
		cdcdf_acm_notify_state = (cdcdf_acm_notify_state_t)func;
    d082:	4b0d      	ldr	r3, [pc, #52]	; (d0b8 <cdcdf_acm_register_callback+0x44>)
    d084:	6019      	str	r1, [r3, #0]
	return ERR_NONE;
    d086:	2000      	movs	r0, #0
		break;
    d088:	bd08      	pop	{r3, pc}
		cdcdf_acm_set_line_coding = (cdcdf_acm_set_line_coding_t)func;
    d08a:	4b0c      	ldr	r3, [pc, #48]	; (d0bc <cdcdf_acm_register_callback+0x48>)
    d08c:	6019      	str	r1, [r3, #0]
	return ERR_NONE;
    d08e:	2000      	movs	r0, #0
		break;
    d090:	bd08      	pop	{r3, pc}
		usb_d_ep_register_callback(_cdcdf_acm_funcd.func_ep_in[CDCDF_ACM_DATA_EP_INDEX], USB_D_EP_CB_XFER, func);
    d092:	4b0b      	ldr	r3, [pc, #44]	; (d0c0 <cdcdf_acm_register_callback+0x4c>)
    d094:	460a      	mov	r2, r1
    d096:	78d8      	ldrb	r0, [r3, #3]
    d098:	2102      	movs	r1, #2
    d09a:	f000 ff05 	bl	dea8 <usb_d_ep_register_callback>
	return ERR_NONE;
    d09e:	2000      	movs	r0, #0
		break;
    d0a0:	bd08      	pop	{r3, pc}
		usb_d_ep_register_callback(_cdcdf_acm_funcd.func_ep_out, USB_D_EP_CB_XFER, func);
    d0a2:	4b07      	ldr	r3, [pc, #28]	; (d0c0 <cdcdf_acm_register_callback+0x4c>)
    d0a4:	460a      	mov	r2, r1
    d0a6:	7918      	ldrb	r0, [r3, #4]
    d0a8:	2102      	movs	r1, #2
    d0aa:	f000 fefd 	bl	dea8 <usb_d_ep_register_callback>
	return ERR_NONE;
    d0ae:	2000      	movs	r0, #0
		break;
    d0b0:	bd08      	pop	{r3, pc}
		return ERR_INVALID_ARG;
    d0b2:	f06f 000c 	mvn.w	r0, #12
}
    d0b6:	bd08      	pop	{r3, pc}
    d0b8:	20001d54 	.word	0x20001d54
    d0bc:	20001d58 	.word	0x20001d58
    d0c0:	20001d4c 	.word	0x20001d4c

0000d0c4 <cdcdf_acm_is_enabled>:
	return _cdcdf_acm_funcd.enabled;
    d0c4:	4b01      	ldr	r3, [pc, #4]	; (d0cc <cdcdf_acm_is_enabled+0x8>)
}
    d0c6:	7958      	ldrb	r0, [r3, #5]
    d0c8:	4770      	bx	lr
    d0ca:	bf00      	nop
    d0cc:	20001d4c 	.word	0x20001d4c

0000d0d0 <cdcdf_acm_get_line_coding>:
 * \brief Return the CDC ACM line coding structure start address
 */
const struct usb_cdc_line_coding *cdcdf_acm_get_line_coding(void)
{
	return (const struct usb_cdc_line_coding *)&usbd_cdc_line_coding;
}
    d0d0:	4800      	ldr	r0, [pc, #0]	; (d0d4 <cdcdf_acm_get_line_coding+0x4>)
    d0d2:	4770      	bx	lr
    d0d4:	20001d5c 	.word	0x20001d5c

0000d0d8 <usbd_sof_cb>:
}

/** Invoke all registered SOF callbacks. */
static void usbdc_sof_notify(void)
{
	struct usbdc_sof_handler *sof = (struct usbdc_sof_handler *)usbdc.handlers.sof_list.head;
    d0d8:	4b05      	ldr	r3, [pc, #20]	; (d0f0 <usbd_sof_cb+0x18>)

/**
 * \brief Callback invoked on USB device SOF
 */
static void usbd_sof_cb(void)
{
    d0da:	b510      	push	{r4, lr}
	struct usbdc_sof_handler *sof = (struct usbdc_sof_handler *)usbdc.handlers.sof_list.head;
    d0dc:	685c      	ldr	r4, [r3, #4]
	while (sof != NULL) {
    d0de:	b12c      	cbz	r4, d0ec <usbd_sof_cb+0x14>
		if (NULL != sof->cb) {
    d0e0:	6863      	ldr	r3, [r4, #4]
    d0e2:	b103      	cbz	r3, d0e6 <usbd_sof_cb+0xe>
			sof->cb();
    d0e4:	4798      	blx	r3
		sof = sof->next;
    d0e6:	6824      	ldr	r4, [r4, #0]
	while (sof != NULL) {
    d0e8:	2c00      	cmp	r4, #0
    d0ea:	d1f9      	bne.n	d0e0 <usbd_sof_cb+0x8>
    d0ec:	bd10      	pop	{r4, pc}
    d0ee:	bf00      	nop
    d0f0:	20001d64 	.word	0x20001d64

0000d0f4 <usbdc_cb_ctl_done>:
 * \return Data has error or not.
 * \retval true There is data error, protocol error.
 * \retval false There is no data error.
 */
static bool usbdc_cb_ctl_done(const uint8_t ep, const enum usb_xfer_code code, struct usb_req *req)
{
    d0f4:	b538      	push	{r3, r4, r5, lr}
    d0f6:	4615      	mov	r5, r2
	(void)ep;

	switch (code) {
    d0f8:	b189      	cbz	r1, d11e <usbdc_cb_ctl_done+0x2a>
    d0fa:	2901      	cmp	r1, #1
    d0fc:	d10d      	bne.n	d11a <usbdc_cb_ctl_done+0x26>
	struct usbdc_req_handler *h = (struct usbdc_req_handler *)usbdc.handlers.req_list.head;
    d0fe:	4b23      	ldr	r3, [pc, #140]	; (d18c <usbdc_cb_ctl_done+0x98>)
    d100:	689c      	ldr	r4, [r3, #8]
	while (h != NULL) {
    d102:	b154      	cbz	r4, d11a <usbdc_cb_ctl_done+0x26>
		if (NULL != h->cb) {
    d104:	6863      	ldr	r3, [r4, #4]
			rc = h->cb(ep, req, stage);
    d106:	2201      	movs	r2, #1
    d108:	4629      	mov	r1, r5
    d10a:	2000      	movs	r0, #0
		if (NULL != h->cb) {
    d10c:	b113      	cbz	r3, d114 <usbdc_cb_ctl_done+0x20>
			rc = h->cb(ep, req, stage);
    d10e:	4798      	blx	r3
			} else if (ERR_NOT_FOUND != rc) {
    d110:	300a      	adds	r0, #10
    d112:	d102      	bne.n	d11a <usbdc_cb_ctl_done+0x26>
		h = h->next;
    d114:	6824      	ldr	r4, [r4, #0]
	while (h != NULL) {
    d116:	2c00      	cmp	r4, #0
    d118:	d1f4      	bne.n	d104 <usbdc_cb_ctl_done+0x10>
		return usbdc_ctrl_data_end(req);
	default:
		break;
	}
	return false;
}
    d11a:	2000      	movs	r0, #0
    d11c:	bd38      	pop	{r3, r4, r5, pc}
	if (req->bmRequestType != USB_REQT_TYPE_STANDARD) {
    d11e:	7813      	ldrb	r3, [r2, #0]
    d120:	2b00      	cmp	r3, #0
    d122:	d1fa      	bne.n	d11a <usbdc_cb_ctl_done+0x26>
	switch (req->bRequest) {
    d124:	7853      	ldrb	r3, [r2, #1]
    d126:	2b05      	cmp	r3, #5
    d128:	d014      	beq.n	d154 <usbdc_cb_ctl_done+0x60>
    d12a:	2b09      	cmp	r3, #9
    d12c:	d1f5      	bne.n	d11a <usbdc_cb_ctl_done+0x26>
		usbdc.cfg_value = req->wValue;
    d12e:	8852      	ldrh	r2, [r2, #2]
    d130:	4b16      	ldr	r3, [pc, #88]	; (d18c <usbdc_cb_ctl_done+0x98>)
    d132:	76da      	strb	r2, [r3, #27]
		usbdc.state     = req->wValue ? USBD_S_CONFIG : USBD_S_ADDRESS;
    d134:	bb3a      	cbnz	r2, d186 <usbdc_cb_ctl_done+0x92>
    d136:	2503      	movs	r5, #3
    d138:	462a      	mov	r2, r5
	struct usbdc_change_handler *cg = (struct usbdc_change_handler *)usbdc.handlers.change_list.head;
    d13a:	68dc      	ldr	r4, [r3, #12]
		usbdc.state     = req->wValue ? USBD_S_CONFIG : USBD_S_ADDRESS;
    d13c:	769a      	strb	r2, [r3, #26]
	while (cg != NULL) {
    d13e:	2c00      	cmp	r4, #0
    d140:	d0eb      	beq.n	d11a <usbdc_cb_ctl_done+0x26>
		if (NULL != cg->cb) {
    d142:	6863      	ldr	r3, [r4, #4]
			cg->cb(change, value);
    d144:	4629      	mov	r1, r5
    d146:	2001      	movs	r0, #1
		if (NULL != cg->cb) {
    d148:	b103      	cbz	r3, d14c <usbdc_cb_ctl_done+0x58>
			cg->cb(change, value);
    d14a:	4798      	blx	r3
		cg = cg->next;
    d14c:	6824      	ldr	r4, [r4, #0]
	while (cg != NULL) {
    d14e:	2c00      	cmp	r4, #0
    d150:	d1f7      	bne.n	d142 <usbdc_cb_ctl_done+0x4e>
    d152:	e7e2      	b.n	d11a <usbdc_cb_ctl_done+0x26>
		usbdc_set_address(req->wValue);
    d154:	8850      	ldrh	r0, [r2, #2]
	usb_d_set_address(addr);
    d156:	b2c0      	uxtb	r0, r0
    d158:	f000 fcf0 	bl	db3c <usb_d_set_address>
		usbdc.state = req->wValue ? USBD_S_ADDRESS : USBD_S_DEFAULT;
    d15c:	886b      	ldrh	r3, [r5, #2]
    d15e:	b97b      	cbnz	r3, d180 <usbdc_cb_ctl_done+0x8c>
    d160:	2502      	movs	r5, #2
    d162:	462a      	mov	r2, r5
    d164:	4b09      	ldr	r3, [pc, #36]	; (d18c <usbdc_cb_ctl_done+0x98>)
	struct usbdc_change_handler *cg = (struct usbdc_change_handler *)usbdc.handlers.change_list.head;
    d166:	68dc      	ldr	r4, [r3, #12]
		usbdc.state = req->wValue ? USBD_S_ADDRESS : USBD_S_DEFAULT;
    d168:	769a      	strb	r2, [r3, #26]
	while (cg != NULL) {
    d16a:	2c00      	cmp	r4, #0
    d16c:	d0d5      	beq.n	d11a <usbdc_cb_ctl_done+0x26>
		if (NULL != cg->cb) {
    d16e:	6863      	ldr	r3, [r4, #4]
			cg->cb(change, value);
    d170:	4629      	mov	r1, r5
    d172:	2001      	movs	r0, #1
		if (NULL != cg->cb) {
    d174:	b103      	cbz	r3, d178 <usbdc_cb_ctl_done+0x84>
			cg->cb(change, value);
    d176:	4798      	blx	r3
		cg = cg->next;
    d178:	6824      	ldr	r4, [r4, #0]
	while (cg != NULL) {
    d17a:	2c00      	cmp	r4, #0
    d17c:	d1f7      	bne.n	d16e <usbdc_cb_ctl_done+0x7a>
    d17e:	e7cc      	b.n	d11a <usbdc_cb_ctl_done+0x26>
		usbdc.state = req->wValue ? USBD_S_ADDRESS : USBD_S_DEFAULT;
    d180:	2503      	movs	r5, #3
    d182:	462a      	mov	r2, r5
    d184:	e7ee      	b.n	d164 <usbdc_cb_ctl_done+0x70>
		usbdc.state     = req->wValue ? USBD_S_CONFIG : USBD_S_ADDRESS;
    d186:	2504      	movs	r5, #4
    d188:	462a      	mov	r2, r5
    d18a:	e7d6      	b.n	d13a <usbdc_cb_ctl_done+0x46>
    d18c:	20001d64 	.word	0x20001d64

0000d190 <usbdc_cb_ctl_req>:
{
    d190:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	struct usbdc_req_handler *h = (struct usbdc_req_handler *)usbdc.handlers.req_list.head;
    d194:	4fb6      	ldr	r7, [pc, #728]	; (d470 <usbdc_cb_ctl_req+0x2e0>)
    d196:	68bc      	ldr	r4, [r7, #8]
{
    d198:	b086      	sub	sp, #24
    d19a:	4606      	mov	r6, r0
    d19c:	460d      	mov	r5, r1
	while (h != NULL) {
    d19e:	b15c      	cbz	r4, d1b8 <usbdc_cb_ctl_req+0x28>
		if (NULL != h->cb) {
    d1a0:	6863      	ldr	r3, [r4, #4]
			rc = h->cb(ep, req, stage);
    d1a2:	2200      	movs	r2, #0
    d1a4:	4629      	mov	r1, r5
    d1a6:	4630      	mov	r0, r6
		if (NULL != h->cb) {
    d1a8:	b11b      	cbz	r3, d1b2 <usbdc_cb_ctl_req+0x22>
			rc = h->cb(ep, req, stage);
    d1aa:	4798      	blx	r3
			if (0 == rc) {
    d1ac:	b170      	cbz	r0, d1cc <usbdc_cb_ctl_req+0x3c>
			} else if (ERR_NOT_FOUND != rc) {
    d1ae:	300a      	adds	r0, #10
    d1b0:	d108      	bne.n	d1c4 <usbdc_cb_ctl_req+0x34>
		h = h->next;
    d1b2:	6824      	ldr	r4, [r4, #0]
	while (h != NULL) {
    d1b4:	2c00      	cmp	r4, #0
    d1b6:	d1f3      	bne.n	d1a0 <usbdc_cb_ctl_req+0x10>
	switch (req->bmRequestType & (USB_REQT_TYPE_MASK | USB_REQT_DIR_IN)) {
    d1b8:	782b      	ldrb	r3, [r5, #0]
    d1ba:	f013 02e0 	ands.w	r2, r3, #224	; 0xe0
    d1be:	d025      	beq.n	d20c <usbdc_cb_ctl_req+0x7c>
    d1c0:	2a80      	cmp	r2, #128	; 0x80
    d1c2:	d007      	beq.n	d1d4 <usbdc_cb_ctl_req+0x44>
		return false;
    d1c4:	2000      	movs	r0, #0
}
    d1c6:	b006      	add	sp, #24
    d1c8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return true;
    d1cc:	2001      	movs	r0, #1
}
    d1ce:	b006      	add	sp, #24
    d1d0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	switch (req->bRequest) {
    d1d4:	786a      	ldrb	r2, [r5, #1]
    d1d6:	2a0a      	cmp	r2, #10
    d1d8:	d8f4      	bhi.n	d1c4 <usbdc_cb_ctl_req+0x34>
    d1da:	a101      	add	r1, pc, #4	; (adr r1, d1e0 <usbdc_cb_ctl_req+0x50>)
    d1dc:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
    d1e0:	0000d2ff 	.word	0x0000d2ff
    d1e4:	0000d1c5 	.word	0x0000d1c5
    d1e8:	0000d1c5 	.word	0x0000d1c5
    d1ec:	0000d1c5 	.word	0x0000d1c5
    d1f0:	0000d1c5 	.word	0x0000d1c5
    d1f4:	0000d1c5 	.word	0x0000d1c5
    d1f8:	0000d2b3 	.word	0x0000d2b3
    d1fc:	0000d1c5 	.word	0x0000d1c5
    d200:	0000d291 	.word	0x0000d291
    d204:	0000d1c5 	.word	0x0000d1c5
    d208:	0000d249 	.word	0x0000d249
	switch (req->bRequest) {
    d20c:	786a      	ldrb	r2, [r5, #1]
    d20e:	3a01      	subs	r2, #1
    d210:	2a0a      	cmp	r2, #10
    d212:	d8d7      	bhi.n	d1c4 <usbdc_cb_ctl_req+0x34>
    d214:	a101      	add	r1, pc, #4	; (adr r1, d21c <usbdc_cb_ctl_req+0x8c>)
    d216:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
    d21a:	bf00      	nop
    d21c:	0000d417 	.word	0x0000d417
    d220:	0000d1c5 	.word	0x0000d1c5
    d224:	0000d3e7 	.word	0x0000d3e7
    d228:	0000d1c5 	.word	0x0000d1c5
    d22c:	0000d3c9 	.word	0x0000d3c9
    d230:	0000d1c5 	.word	0x0000d1c5
    d234:	0000d1c5 	.word	0x0000d1c5
    d238:	0000d1c5 	.word	0x0000d1c5
    d23c:	0000d3a3 	.word	0x0000d3a3
    d240:	0000d1c5 	.word	0x0000d1c5
    d244:	0000d347 	.word	0x0000d347
	if (!(usbdc.ifc_alt_map & (1 << req->wIndex))) {
    d248:	7f7b      	ldrb	r3, [r7, #29]
    d24a:	88aa      	ldrh	r2, [r5, #4]
    d24c:	4113      	asrs	r3, r2
    d24e:	f013 0301 	ands.w	r3, r3, #1
    d252:	f000 818e 	beq.w	d572 <usbdc_cb_ctl_req+0x3e2>
	struct usbdf_driver *func = (struct usbdf_driver *)usbdc.func_list.head;
    d256:	693c      	ldr	r4, [r7, #16]
	while (NULL != func) {
    d258:	b91c      	cbnz	r4, d262 <usbdc_cb_ctl_req+0xd2>
    d25a:	e7b3      	b.n	d1c4 <usbdc_cb_ctl_req+0x34>
			func = func->next;
    d25c:	6824      	ldr	r4, [r4, #0]
	while (NULL != func) {
    d25e:	2c00      	cmp	r4, #0
    d260:	d0b0      	beq.n	d1c4 <usbdc_cb_ctl_req+0x34>
		if (0 > (rc = func->ctrl(func, USBDF_GET_IFACE, req))) {
    d262:	6863      	ldr	r3, [r4, #4]
    d264:	462a      	mov	r2, r5
    d266:	2102      	movs	r1, #2
    d268:	4620      	mov	r0, r4
    d26a:	4798      	blx	r3
    d26c:	2800      	cmp	r0, #0
    d26e:	dbf5      	blt.n	d25c <usbdc_cb_ctl_req+0xcc>
			usbdc.ctrl_buf[0] = (uint8_t)rc;
    d270:	697b      	ldr	r3, [r7, #20]
    d272:	7018      	strb	r0, [r3, #0]
/**
 * \brief Issue USB device transfer
 */
int32_t usbdc_xfer(uint8_t ep, uint8_t *buf, uint32_t size, bool zlp)
{
	struct usb_d_transfer xfer = {(uint8_t *)buf, size, ep, zlp};
    d274:	697b      	ldr	r3, [r7, #20]
    d276:	9303      	str	r3, [sp, #12]
    d278:	2401      	movs	r4, #1
    d27a:	2300      	movs	r3, #0
	return usb_d_ep_transfer(&xfer);
    d27c:	a803      	add	r0, sp, #12
	struct usb_d_transfer xfer = {(uint8_t *)buf, size, ep, zlp};
    d27e:	9404      	str	r4, [sp, #16]
    d280:	f88d 3014 	strb.w	r3, [sp, #20]
    d284:	f88d 3015 	strb.w	r3, [sp, #21]
	return usb_d_ep_transfer(&xfer);
    d288:	f000 fd24 	bl	dcd4 <usb_d_ep_transfer>
			return true;
    d28c:	4620      	mov	r0, r4
    d28e:	e79a      	b.n	d1c6 <usbdc_cb_ctl_req+0x36>
		*(uint8_t *)usbdc.ctrl_buf = usbdc.cfg_value;
    d290:	697b      	ldr	r3, [r7, #20]
    d292:	7efa      	ldrb	r2, [r7, #27]
    d294:	701a      	strb	r2, [r3, #0]
	struct usb_d_transfer xfer = {(uint8_t *)buf, size, ep, zlp};
    d296:	697b      	ldr	r3, [r7, #20]
    d298:	9303      	str	r3, [sp, #12]
    d29a:	2401      	movs	r4, #1
    d29c:	2300      	movs	r3, #0
	return usb_d_ep_transfer(&xfer);
    d29e:	a803      	add	r0, sp, #12
	struct usb_d_transfer xfer = {(uint8_t *)buf, size, ep, zlp};
    d2a0:	f88d 6014 	strb.w	r6, [sp, #20]
    d2a4:	9404      	str	r4, [sp, #16]
    d2a6:	f88d 3015 	strb.w	r3, [sp, #21]
	return usb_d_ep_transfer(&xfer);
    d2aa:	f000 fd13 	bl	dcd4 <usb_d_ep_transfer>
		return true;
    d2ae:	4620      	mov	r0, r4
    d2b0:	e789      	b.n	d1c6 <usbdc_cb_ctl_req+0x36>
	uint8_t type = (uint8_t)(req->wValue >> 8);
    d2b2:	886b      	ldrh	r3, [r5, #2]
	switch (type) {
    d2b4:	0a1a      	lsrs	r2, r3, #8
    d2b6:	2a02      	cmp	r2, #2
    d2b8:	f000 810a 	beq.w	d4d0 <usbdc_cb_ctl_req+0x340>
    d2bc:	2a03      	cmp	r2, #3
    d2be:	f000 80f0 	beq.w	d4a2 <usbdc_cb_ctl_req+0x312>
    d2c2:	2a01      	cmp	r2, #1
    d2c4:	f47f af7e 	bne.w	d1c4 <usbdc_cb_ctl_req+0x34>
		dev_desc = usb_find_desc(usbdc.desces.ls_fs->sod, usbdc.desces.ls_fs->eod, USB_DT_DEVICE);
    d2c8:	683b      	ldr	r3, [r7, #0]
	uint16_t length   = req->wLength;
    d2ca:	88ec      	ldrh	r4, [r5, #6]
		dev_desc = usb_find_desc(usbdc.desces.ls_fs->sod, usbdc.desces.ls_fs->eod, USB_DT_DEVICE);
    d2cc:	e893 0003 	ldmia.w	r3, {r0, r1}
    d2d0:	2c12      	cmp	r4, #18
    d2d2:	bf28      	it	cs
    d2d4:	2412      	movcs	r4, #18
    d2d6:	f000 fa19 	bl	d70c <usb_find_desc>
	if (!dev_desc) {
    d2da:	4603      	mov	r3, r0
    d2dc:	2800      	cmp	r0, #0
    d2de:	f43f af71 	beq.w	d1c4 <usbdc_cb_ctl_req+0x34>
	if (length <= str_desc[0]) {
    d2e2:	2200      	movs	r2, #0
	return usb_d_ep_transfer(&xfer);
    d2e4:	a803      	add	r0, sp, #12
	struct usb_d_transfer xfer = {(uint8_t *)buf, size, ep, zlp};
    d2e6:	9303      	str	r3, [sp, #12]
	if (ERR_NONE != usbdc_xfer(ep, str_desc, length, need_zlp)) {
    d2e8:	9404      	str	r4, [sp, #16]
	struct usb_d_transfer xfer = {(uint8_t *)buf, size, ep, zlp};
    d2ea:	f88d 6014 	strb.w	r6, [sp, #20]
    d2ee:	f88d 2015 	strb.w	r2, [sp, #21]
	return usb_d_ep_transfer(&xfer);
    d2f2:	f000 fcef 	bl	dcd4 <usb_d_ep_transfer>
	if (ERR_NONE != usbdc_xfer(ep, str_desc, length, need_zlp)) {
    d2f6:	fab0 f080 	clz	r0, r0
    d2fa:	0940      	lsrs	r0, r0, #5
    d2fc:	e763      	b.n	d1c6 <usbdc_cb_ctl_req+0x36>
	switch (req->bmRequestType & USB_REQT_RECIP_MASK) {
    d2fe:	f003 011f 	and.w	r1, r3, #31
    d302:	2901      	cmp	r1, #1
    d304:	f240 8091 	bls.w	d42a <usbdc_cb_ctl_req+0x29a>
    d308:	2902      	cmp	r1, #2
    d30a:	f47f af5b 	bne.w	d1c4 <usbdc_cb_ctl_req+0x34>
		st = usb_d_ep_halt(req->wIndex & 0xFF, USB_EP_HALT_GET);
    d30e:	88a8      	ldrh	r0, [r5, #4]
    d310:	b2c0      	uxtb	r0, r0
    d312:	f000 fd91 	bl	de38 <usb_d_ep_halt>
		if (st < 0) {
    d316:	1e03      	subs	r3, r0, #0
    d318:	f6ff af54 	blt.w	d1c4 <usbdc_cb_ctl_req+0x34>
		st = st & 0x1;
    d31c:	f003 0301 	and.w	r3, r3, #1
    d320:	9301      	str	r3, [sp, #4]
	memcpy(usbdc.ctrl_buf, &st, 2);
    d322:	697b      	ldr	r3, [r7, #20]
    d324:	f8bd 2004 	ldrh.w	r2, [sp, #4]
    d328:	801a      	strh	r2, [r3, #0]
	struct usb_d_transfer xfer = {(uint8_t *)buf, size, ep, zlp};
    d32a:	697b      	ldr	r3, [r7, #20]
    d32c:	9303      	str	r3, [sp, #12]
    d32e:	2202      	movs	r2, #2
    d330:	2300      	movs	r3, #0
	return usb_d_ep_transfer(&xfer);
    d332:	a803      	add	r0, sp, #12
	struct usb_d_transfer xfer = {(uint8_t *)buf, size, ep, zlp};
    d334:	f88d 6014 	strb.w	r6, [sp, #20]
    d338:	9204      	str	r2, [sp, #16]
    d33a:	f88d 3015 	strb.w	r3, [sp, #21]
	return usb_d_ep_transfer(&xfer);
    d33e:	f000 fcc9 	bl	dcd4 <usb_d_ep_transfer>
	return true;
    d342:	2001      	movs	r0, #1
    d344:	e73f      	b.n	d1c6 <usbdc_cb_ctl_req+0x36>
		ifc = usb_find_cfg_desc(usbdc.desces.ls_fs->sod, usbdc.desces.ls_fs->eod, usbdc.cfg_value);
    d346:	683b      	ldr	r3, [r7, #0]
    d348:	7efa      	ldrb	r2, [r7, #27]
		return usbdc_set_interface(req->wValue, req->wIndex);
    d34a:	886c      	ldrh	r4, [r5, #2]
    d34c:	88ad      	ldrh	r5, [r5, #4]
		ifc = usb_find_cfg_desc(usbdc.desces.ls_fs->sod, usbdc.desces.ls_fs->eod, usbdc.cfg_value);
    d34e:	e893 0003 	ldmia.w	r3, {r0, r1}
    d352:	f000 fa0f 	bl	d774 <usb_find_cfg_desc>
	if (NULL == ifc) {
    d356:	2800      	cmp	r0, #0
    d358:	f43f af34 	beq.w	d1c4 <usbdc_cb_ctl_req+0x34>
	desc.sod = ifc;
    d35c:	9001      	str	r0, [sp, #4]
	return (ptr[0] + (ptr[1] << 8));
    d35e:	78c1      	ldrb	r1, [r0, #3]
    d360:	7883      	ldrb	r3, [r0, #2]
    d362:	eb03 2301 	add.w	r3, r3, r1, lsl #8
	desc.eod = ifc + usb_cfg_desc_total_len(ifc);
    d366:	fa10 f383 	uxtah	r3, r0, r3
	if (NULL == (ifc = usb_find_desc(desc.sod, desc.eod, USB_DT_INTERFACE))) {
    d36a:	4619      	mov	r1, r3
    d36c:	2204      	movs	r2, #4
	desc.eod = ifc + usb_cfg_desc_total_len(ifc);
    d36e:	9302      	str	r3, [sp, #8]
	if (NULL == (ifc = usb_find_desc(desc.sod, desc.eod, USB_DT_INTERFACE))) {
    d370:	f000 f9cc 	bl	d70c <usb_find_desc>
    d374:	2800      	cmp	r0, #0
    d376:	f43f af25 	beq.w	d1c4 <usbdc_cb_ctl_req+0x34>
	while (ifc[2] != ifc_id || ifc[3] != alt_set) {
    d37a:	7883      	ldrb	r3, [r0, #2]
    d37c:	42ab      	cmp	r3, r5
		ifc      = usb_find_desc(desc.sod, desc.eod, USB_DT_INTERFACE);
    d37e:	f04f 0204 	mov.w	r2, #4
	while (ifc[2] != ifc_id || ifc[3] != alt_set) {
    d382:	d103      	bne.n	d38c <usbdc_cb_ctl_req+0x1fc>
    d384:	78c3      	ldrb	r3, [r0, #3]
    d386:	42a3      	cmp	r3, r4
    d388:	f000 80c9 	beq.w	d51e <usbdc_cb_ctl_req+0x38e>
		desc.sod = usb_desc_next(desc.sod);
    d38c:	9b01      	ldr	r3, [sp, #4]
		ifc      = usb_find_desc(desc.sod, desc.eod, USB_DT_INTERFACE);
    d38e:	9902      	ldr	r1, [sp, #8]
	return (desc + usb_desc_len(desc));
    d390:	7818      	ldrb	r0, [r3, #0]
    d392:	4403      	add	r3, r0
    d394:	4618      	mov	r0, r3
		desc.sod = usb_desc_next(desc.sod);
    d396:	9301      	str	r3, [sp, #4]
		ifc      = usb_find_desc(desc.sod, desc.eod, USB_DT_INTERFACE);
    d398:	f000 f9b8 	bl	d70c <usb_find_desc>
		if (NULL == ifc) {
    d39c:	2800      	cmp	r0, #0
    d39e:	d1ec      	bne.n	d37a <usbdc_cb_ctl_req+0x1ea>
    d3a0:	e710      	b.n	d1c4 <usbdc_cb_ctl_req+0x34>
		if (!usbdc_set_config(req->wValue)) {
    d3a2:	886a      	ldrh	r2, [r5, #2]
    d3a4:	b2d2      	uxtb	r2, r2
	if (cfg_value == 0) {
    d3a6:	2a00      	cmp	r2, #0
    d3a8:	d142      	bne.n	d430 <usbdc_cb_ctl_req+0x2a0>
	struct usbdf_driver *func = (struct usbdf_driver *)usbdc.func_list.head;
    d3aa:	693c      	ldr	r4, [r7, #16]
	while (NULL != func) {
    d3ac:	b13c      	cbz	r4, d3be <usbdc_cb_ctl_req+0x22e>
		func->ctrl(func, USBDF_DISABLE, NULL);
    d3ae:	6863      	ldr	r3, [r4, #4]
    d3b0:	4620      	mov	r0, r4
    d3b2:	2200      	movs	r2, #0
    d3b4:	2101      	movs	r1, #1
    d3b6:	4798      	blx	r3
		func = func->next;
    d3b8:	6824      	ldr	r4, [r4, #0]
	while (NULL != func) {
    d3ba:	2c00      	cmp	r4, #0
    d3bc:	d1f7      	bne.n	d3ae <usbdc_cb_ctl_req+0x21e>
    d3be:	ad03      	add	r5, sp, #12
	return usb_d_ep_transfer(&xfer);
    d3c0:	4628      	mov	r0, r5
	struct usb_d_transfer xfer = {(uint8_t *)buf, size, ep, zlp};
    d3c2:	2300      	movs	r3, #0
    d3c4:	2201      	movs	r2, #1
    d3c6:	e002      	b.n	d3ce <usbdc_cb_ctl_req+0x23e>
    d3c8:	2300      	movs	r3, #0
    d3ca:	2201      	movs	r2, #1
	return usb_d_ep_transfer(&xfer);
    d3cc:	a803      	add	r0, sp, #12
	struct usb_d_transfer xfer = {(uint8_t *)buf, size, ep, zlp};
    d3ce:	f88d 6014 	strb.w	r6, [sp, #20]
    d3d2:	9303      	str	r3, [sp, #12]
    d3d4:	9304      	str	r3, [sp, #16]
    d3d6:	f88d 2015 	strb.w	r2, [sp, #21]
	return usb_d_ep_transfer(&xfer);
    d3da:	f000 fc7b 	bl	dcd4 <usb_d_ep_transfer>
		return (ERR_NONE == usbdc_xfer(ep, NULL, 0, true));
    d3de:	fab0 f080 	clz	r0, r0
    d3e2:	0940      	lsrs	r0, r0, #5
    d3e4:	e6ef      	b.n	d1c6 <usbdc_cb_ctl_req+0x36>
	switch (req->bmRequestType & USB_REQT_RECIP_MASK) {
    d3e6:	2b02      	cmp	r3, #2
    d3e8:	f47f aeec 	bne.w	d1c4 <usbdc_cb_ctl_req+0x34>
		if (req->wLength != 0) {
    d3ec:	88ef      	ldrh	r7, [r5, #6]
    d3ee:	2f00      	cmp	r7, #0
    d3f0:	f47f aee8 	bne.w	d1c4 <usbdc_cb_ctl_req+0x34>
		usb_d_ep_halt(req->wIndex & 0xFF, USB_EP_HALT_SET);
    d3f4:	88a8      	ldrh	r0, [r5, #4]
    d3f6:	2101      	movs	r1, #1
    d3f8:	b2c0      	uxtb	r0, r0
    d3fa:	f000 fd1d 	bl	de38 <usb_d_ep_halt>
	struct usb_d_transfer xfer = {(uint8_t *)buf, size, ep, zlp};
    d3fe:	2401      	movs	r4, #1
	return usb_d_ep_transfer(&xfer);
    d400:	a803      	add	r0, sp, #12
	struct usb_d_transfer xfer = {(uint8_t *)buf, size, ep, zlp};
    d402:	9703      	str	r7, [sp, #12]
    d404:	9704      	str	r7, [sp, #16]
    d406:	f88d 6014 	strb.w	r6, [sp, #20]
    d40a:	f88d 4015 	strb.w	r4, [sp, #21]
	return usb_d_ep_transfer(&xfer);
    d40e:	f000 fc61 	bl	dcd4 <usb_d_ep_transfer>
		return true;
    d412:	4620      	mov	r0, r4
    d414:	e6d7      	b.n	d1c6 <usbdc_cb_ctl_req+0x36>
	switch (req->bmRequestType & USB_REQT_RECIP_MASK) {
    d416:	2b02      	cmp	r3, #2
    d418:	f47f aed4 	bne.w	d1c4 <usbdc_cb_ctl_req+0x34>
		if (req->wLength != 0) {
    d41c:	88ef      	ldrh	r7, [r5, #6]
    d41e:	2f00      	cmp	r7, #0
    d420:	f47f aed0 	bne.w	d1c4 <usbdc_cb_ctl_req+0x34>
		usb_d_ep_halt(req->wIndex & 0xFF, USB_EP_HALT_CLR);
    d424:	88a8      	ldrh	r0, [r5, #4]
    d426:	4639      	mov	r1, r7
    d428:	e7e6      	b.n	d3f8 <usbdc_cb_ctl_req+0x268>
		st = 0;
    d42a:	2300      	movs	r3, #0
    d42c:	9301      	str	r3, [sp, #4]
    d42e:	e778      	b.n	d322 <usbdc_cb_ctl_req+0x192>
		cfg_desc = usb_find_cfg_desc(usbdc.desces.ls_fs->sod, usbdc.desces.ls_fs->eod, cfg_value);
    d430:	683b      	ldr	r3, [r7, #0]
    d432:	e893 0003 	ldmia.w	r3, {r0, r1}
    d436:	f000 f99d 	bl	d774 <usb_find_cfg_desc>
	if (NULL == cfg_desc) {
    d43a:	2800      	cmp	r0, #0
    d43c:	f43f aec2 	beq.w	d1c4 <usbdc_cb_ctl_req+0x34>
	return (ptr[0] + (ptr[1] << 8));
    d440:	78c1      	ldrb	r1, [r0, #3]
    d442:	7882      	ldrb	r2, [r0, #2]
    d444:	eb02 2201 	add.w	r2, r2, r1, lsl #8
	desc.eod  = cfg_desc + total_len;
    d448:	fa10 f382 	uxtah	r3, r0, r2
	desc.sod  = usb_find_desc(cfg_desc, desc.eod, USB_DT_INTERFACE);
    d44c:	4619      	mov	r1, r3
    d44e:	2204      	movs	r2, #4
	desc.eod  = cfg_desc + total_len;
    d450:	9304      	str	r3, [sp, #16]
	desc.sod  = usb_find_desc(cfg_desc, desc.eod, USB_DT_INTERFACE);
    d452:	f000 f95b 	bl	d70c <usb_find_desc>
    d456:	9003      	str	r0, [sp, #12]
	while (NULL != desc.sod) {
    d458:	2800      	cmp	r0, #0
    d45a:	d0b0      	beq.n	d3be <usbdc_cb_ctl_req+0x22e>
    d45c:	24ff      	movs	r4, #255	; 0xff
    d45e:	ad03      	add	r5, sp, #12
		if (last_iface != desc.sod[2] /* bInterfaceNumber */) {
    d460:	f890 8002 	ldrb.w	r8, [r0, #2]
    d464:	45a0      	cmp	r8, r4
    d466:	d010      	beq.n	d48a <usbdc_cb_ctl_req+0x2fa>
			func       = (struct usbdf_driver *)usbdc.func_list.head;
    d468:	693c      	ldr	r4, [r7, #16]
			while (NULL != func) {
    d46a:	b92c      	cbnz	r4, d478 <usbdc_cb_ctl_req+0x2e8>
    d46c:	e092      	b.n	d594 <usbdc_cb_ctl_req+0x404>
    d46e:	bf00      	nop
    d470:	20001d64 	.word	0x20001d64
					func = func->next;
    d474:	6824      	ldr	r4, [r4, #0]
			while (NULL != func) {
    d476:	b134      	cbz	r4, d486 <usbdc_cb_ctl_req+0x2f6>
				if (func->ctrl(func, USBDF_ENABLE, &desc)) {
    d478:	6863      	ldr	r3, [r4, #4]
    d47a:	462a      	mov	r2, r5
    d47c:	2100      	movs	r1, #0
    d47e:	4620      	mov	r0, r4
    d480:	4798      	blx	r3
    d482:	2800      	cmp	r0, #0
    d484:	d1f6      	bne.n	d474 <usbdc_cb_ctl_req+0x2e4>
    d486:	9803      	ldr	r0, [sp, #12]
			while (NULL != func) {
    d488:	4644      	mov	r4, r8
	return (desc + usb_desc_len(desc));
    d48a:	7803      	ldrb	r3, [r0, #0]
		desc.sod = usb_find_desc(desc.sod, desc.eod, USB_DT_INTERFACE);
    d48c:	9904      	ldr	r1, [sp, #16]
    d48e:	4403      	add	r3, r0
    d490:	4618      	mov	r0, r3
    d492:	2204      	movs	r2, #4
		desc.sod = usb_desc_next(desc.sod);
    d494:	9303      	str	r3, [sp, #12]
		desc.sod = usb_find_desc(desc.sod, desc.eod, USB_DT_INTERFACE);
    d496:	f000 f939 	bl	d70c <usb_find_desc>
    d49a:	9003      	str	r0, [sp, #12]
	while (NULL != desc.sod) {
    d49c:	2800      	cmp	r0, #0
    d49e:	d1df      	bne.n	d460 <usbdc_cb_ctl_req+0x2d0>
    d4a0:	e78e      	b.n	d3c0 <usbdc_cb_ctl_req+0x230>
	str_desc = usb_find_str_desc(usbdc.desces.ls_fs->sod, usbdc.desces.ls_fs->eod, index);
    d4a2:	683a      	ldr	r2, [r7, #0]
	uint16_t length   = req->wLength;
    d4a4:	88ec      	ldrh	r4, [r5, #6]
	bool     need_zlp = !(length & (usbdc.ctrl_size - 1));
    d4a6:	7f3d      	ldrb	r5, [r7, #28]
	str_desc = usb_find_str_desc(usbdc.desces.ls_fs->sod, usbdc.desces.ls_fs->eod, index);
    d4a8:	e892 0003 	ldmia.w	r2, {r0, r1}
    d4ac:	b2da      	uxtb	r2, r3
    d4ae:	f000 f98d 	bl	d7cc <usb_find_str_desc>
	if (NULL == str_desc) {
    d4b2:	4603      	mov	r3, r0
    d4b4:	2800      	cmp	r0, #0
    d4b6:	f43f ae85 	beq.w	d1c4 <usbdc_cb_ctl_req+0x34>
	if (length <= str_desc[0]) {
    d4ba:	7801      	ldrb	r1, [r0, #0]
    d4bc:	428c      	cmp	r4, r1
    d4be:	f67f af10 	bls.w	d2e2 <usbdc_cb_ctl_req+0x152>
	bool     need_zlp = !(length & (usbdc.ctrl_size - 1));
    d4c2:	3d01      	subs	r5, #1
    d4c4:	4225      	tst	r5, r4
    d4c6:	bf0c      	ite	eq
    d4c8:	2201      	moveq	r2, #1
    d4ca:	2200      	movne	r2, #0
    d4cc:	460c      	mov	r4, r1
    d4ce:	e709      	b.n	d2e4 <usbdc_cb_ctl_req+0x154>
		cfg_desc = usb_find_cfg_desc(usbdc.desces.ls_fs->sod, usbdc.desces.ls_fs->eod, index + 1);
    d4d0:	683a      	ldr	r2, [r7, #0]
	uint16_t length   = req->wLength;
    d4d2:	88ec      	ldrh	r4, [r5, #6]
	bool     need_zlp = !(length & (usbdc.ctrl_size - 1));
    d4d4:	7f3d      	ldrb	r5, [r7, #28]
		cfg_desc = usb_find_cfg_desc(usbdc.desces.ls_fs->sod, usbdc.desces.ls_fs->eod, index + 1);
    d4d6:	3301      	adds	r3, #1
    d4d8:	e892 0003 	ldmia.w	r2, {r0, r1}
    d4dc:	b2da      	uxtb	r2, r3
    d4de:	f000 f949 	bl	d774 <usb_find_cfg_desc>
	if (NULL == cfg_desc) {
    d4e2:	4602      	mov	r2, r0
    d4e4:	2800      	cmp	r0, #0
    d4e6:	f43f ae6d 	beq.w	d1c4 <usbdc_cb_ctl_req+0x34>
	return (ptr[0] + (ptr[1] << 8));
    d4ea:	78c1      	ldrb	r1, [r0, #3]
    d4ec:	7883      	ldrb	r3, [r0, #2]
    d4ee:	eb03 2301 	add.w	r3, r3, r1, lsl #8
    d4f2:	b29b      	uxth	r3, r3
	if (length <= total_len) {
    d4f4:	429c      	cmp	r4, r3
    d4f6:	d94b      	bls.n	d590 <usbdc_cb_ctl_req+0x400>
	bool     need_zlp = !(length & (usbdc.ctrl_size - 1));
    d4f8:	3d01      	subs	r5, #1
    d4fa:	4225      	tst	r5, r4
    d4fc:	bf0c      	ite	eq
    d4fe:	2101      	moveq	r1, #1
    d500:	2100      	movne	r1, #0
    d502:	461c      	mov	r4, r3
	return usb_d_ep_transfer(&xfer);
    d504:	a803      	add	r0, sp, #12
	struct usb_d_transfer xfer = {(uint8_t *)buf, size, ep, zlp};
    d506:	9203      	str	r2, [sp, #12]
	if (ERR_NONE != usbdc_xfer(ep, cfg_desc, length, need_zlp)) {
    d508:	9404      	str	r4, [sp, #16]
	struct usb_d_transfer xfer = {(uint8_t *)buf, size, ep, zlp};
    d50a:	f88d 6014 	strb.w	r6, [sp, #20]
    d50e:	f88d 1015 	strb.w	r1, [sp, #21]
	return usb_d_ep_transfer(&xfer);
    d512:	f000 fbdf 	bl	dcd4 <usb_d_ep_transfer>
	if (ERR_NONE != usbdc_xfer(ep, cfg_desc, length, need_zlp)) {
    d516:	fab0 f080 	clz	r0, r0
    d51a:	0940      	lsrs	r0, r0, #5
    d51c:	e653      	b.n	d1c6 <usbdc_cb_ctl_req+0x36>
	func     = (struct usbdf_driver *)usbdc.func_list.head;
    d51e:	693e      	ldr	r6, [r7, #16]
	desc.sod = ifc;
    d520:	9001      	str	r0, [sp, #4]
	while (NULL != func) {
    d522:	b926      	cbnz	r6, d52e <usbdc_cb_ctl_req+0x39e>
    d524:	e64e      	b.n	d1c4 <usbdc_cb_ctl_req+0x34>
			func = func->next;
    d526:	6836      	ldr	r6, [r6, #0]
	while (NULL != func) {
    d528:	2e00      	cmp	r6, #0
    d52a:	f43f ae4b 	beq.w	d1c4 <usbdc_cb_ctl_req+0x34>
		if (func->ctrl(func, USBDF_DISABLE, &desc)) {
    d52e:	6873      	ldr	r3, [r6, #4]
    d530:	aa01      	add	r2, sp, #4
    d532:	2101      	movs	r1, #1
    d534:	4630      	mov	r0, r6
    d536:	4798      	blx	r3
    d538:	2800      	cmp	r0, #0
    d53a:	d1f4      	bne.n	d526 <usbdc_cb_ctl_req+0x396>
		} else if (ERR_NONE == func->ctrl(func, USBDF_ENABLE, &desc)) {
    d53c:	4601      	mov	r1, r0
    d53e:	aa01      	add	r2, sp, #4
    d540:	6873      	ldr	r3, [r6, #4]
    d542:	4630      	mov	r0, r6
    d544:	4798      	blx	r3
    d546:	2800      	cmp	r0, #0
    d548:	f47f ae3c 	bne.w	d1c4 <usbdc_cb_ctl_req+0x34>
			if (alt_set) {
    d54c:	b12c      	cbz	r4, d55a <usbdc_cb_ctl_req+0x3ca>
				usbdc.ifc_alt_map |= 1 << ifc_id;
    d54e:	7f7b      	ldrb	r3, [r7, #29]
    d550:	2201      	movs	r2, #1
    d552:	fa02 f505 	lsl.w	r5, r2, r5
    d556:	432b      	orrs	r3, r5
    d558:	777b      	strb	r3, [r7, #29]
	struct usb_d_transfer xfer = {(uint8_t *)buf, size, ep, zlp};
    d55a:	2300      	movs	r3, #0
	return usb_d_ep_transfer(&xfer);
    d55c:	a803      	add	r0, sp, #12
	struct usb_d_transfer xfer = {(uint8_t *)buf, size, ep, zlp};
    d55e:	9303      	str	r3, [sp, #12]
    d560:	9304      	str	r3, [sp, #16]
    d562:	f88d 3014 	strb.w	r3, [sp, #20]
    d566:	f88d 3015 	strb.w	r3, [sp, #21]
	return usb_d_ep_transfer(&xfer);
    d56a:	f000 fbb3 	bl	dcd4 <usb_d_ep_transfer>
			return true;
    d56e:	2001      	movs	r0, #1
    d570:	e629      	b.n	d1c6 <usbdc_cb_ctl_req+0x36>
		usbdc.ctrl_buf[0] = 0;
    d572:	697a      	ldr	r2, [r7, #20]
    d574:	7013      	strb	r3, [r2, #0]
	struct usb_d_transfer xfer = {(uint8_t *)buf, size, ep, zlp};
    d576:	697a      	ldr	r2, [r7, #20]
    d578:	9203      	str	r2, [sp, #12]
    d57a:	2401      	movs	r4, #1
	return usb_d_ep_transfer(&xfer);
    d57c:	a803      	add	r0, sp, #12
	struct usb_d_transfer xfer = {(uint8_t *)buf, size, ep, zlp};
    d57e:	f88d 3014 	strb.w	r3, [sp, #20]
    d582:	f88d 3015 	strb.w	r3, [sp, #21]
    d586:	9404      	str	r4, [sp, #16]
	return usb_d_ep_transfer(&xfer);
    d588:	f000 fba4 	bl	dcd4 <usb_d_ep_transfer>
		return true;
    d58c:	4620      	mov	r0, r4
    d58e:	e61a      	b.n	d1c6 <usbdc_cb_ctl_req+0x36>
	if (length <= total_len) {
    d590:	2100      	movs	r1, #0
    d592:	e7b7      	b.n	d504 <usbdc_cb_ctl_req+0x374>
			while (NULL != func) {
    d594:	4644      	mov	r4, r8
    d596:	e778      	b.n	d48a <usbdc_cb_ctl_req+0x2fa>

0000d598 <usbd_event_cb>:
{
    d598:	b570      	push	{r4, r5, r6, lr}
	switch (ev) {
    d59a:	b338      	cbz	r0, d5ec <usbd_event_cb+0x54>
    d59c:	2801      	cmp	r0, #1
    d59e:	d124      	bne.n	d5ea <usbd_event_cb+0x52>
	struct usbdf_driver *func = (struct usbdf_driver *)usbdc.func_list.head;
    d5a0:	4d19      	ldr	r5, [pc, #100]	; (d608 <usbd_event_cb+0x70>)
    d5a2:	692c      	ldr	r4, [r5, #16]
	while (NULL != func) {
    d5a4:	b13c      	cbz	r4, d5b6 <usbd_event_cb+0x1e>
		func->ctrl(func, USBDF_DISABLE, NULL);
    d5a6:	6863      	ldr	r3, [r4, #4]
    d5a8:	4620      	mov	r0, r4
    d5aa:	2200      	movs	r2, #0
    d5ac:	2101      	movs	r1, #1
    d5ae:	4798      	blx	r3
		func = func->next;
    d5b0:	6824      	ldr	r4, [r4, #0]
	while (NULL != func) {
    d5b2:	2c00      	cmp	r4, #0
    d5b4:	d1f7      	bne.n	d5a6 <usbd_event_cb+0xe>
	usbdc.cfg_value   = 0;
    d5b6:	2400      	movs	r4, #0
	usb_d_ep_deinit(0);
    d5b8:	4620      	mov	r0, r4
	usbdc.state       = USBD_S_DEFAULT;
    d5ba:	2602      	movs	r6, #2
	usbdc.cfg_value   = 0;
    d5bc:	76ec      	strb	r4, [r5, #27]
	usbdc.ifc_alt_map = 0;
    d5be:	776c      	strb	r4, [r5, #29]
	usbdc.state       = USBD_S_DEFAULT;
    d5c0:	76ae      	strb	r6, [r5, #26]
	usb_d_ep_deinit(0);
    d5c2:	f000 fb41 	bl	dc48 <usb_d_ep_deinit>
	usb_d_ep0_init(usbdc.ctrl_size);
    d5c6:	7f28      	ldrb	r0, [r5, #28]
    d5c8:	f000 faba 	bl	db40 <usb_d_ep0_init>
	usb_d_ep_register_callback(0, USB_D_EP_CB_SETUP, (FUNC_PTR)usbdc_cb_ctl_req);
    d5cc:	4621      	mov	r1, r4
    d5ce:	4620      	mov	r0, r4
    d5d0:	4a0e      	ldr	r2, [pc, #56]	; (d60c <usbd_event_cb+0x74>)
    d5d2:	f000 fc69 	bl	dea8 <usb_d_ep_register_callback>
	usb_d_ep_register_callback(0, USB_D_EP_CB_XFER, (FUNC_PTR)usbdc_cb_ctl_done);
    d5d6:	4620      	mov	r0, r4
    d5d8:	4631      	mov	r1, r6
    d5da:	4a0d      	ldr	r2, [pc, #52]	; (d610 <usbd_event_cb+0x78>)
    d5dc:	f000 fc64 	bl	dea8 <usb_d_ep_register_callback>
	usb_d_ep_enable(0);
    d5e0:	4620      	mov	r0, r4
}
    d5e2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	usb_d_ep_enable(0);
    d5e6:	f000 bb4b 	b.w	dc80 <usb_d_ep_enable>
    d5ea:	bd70      	pop	{r4, r5, r6, pc}
	struct usbdc_change_handler *cg = (struct usbdc_change_handler *)usbdc.handlers.change_list.head;
    d5ec:	4b06      	ldr	r3, [pc, #24]	; (d608 <usbd_event_cb+0x70>)
    d5ee:	68dc      	ldr	r4, [r3, #12]
    d5f0:	460d      	mov	r5, r1
	while (cg != NULL) {
    d5f2:	b144      	cbz	r4, d606 <usbd_event_cb+0x6e>
		if (NULL != cg->cb) {
    d5f4:	6863      	ldr	r3, [r4, #4]
			cg->cb(change, value);
    d5f6:	4629      	mov	r1, r5
    d5f8:	2000      	movs	r0, #0
		if (NULL != cg->cb) {
    d5fa:	b103      	cbz	r3, d5fe <usbd_event_cb+0x66>
			cg->cb(change, value);
    d5fc:	4798      	blx	r3
		cg = cg->next;
    d5fe:	6824      	ldr	r4, [r4, #0]
	while (cg != NULL) {
    d600:	2c00      	cmp	r4, #0
    d602:	d1f7      	bne.n	d5f4 <usbd_event_cb+0x5c>
    d604:	bd70      	pop	{r4, r5, r6, pc}
    d606:	bd70      	pop	{r4, r5, r6, pc}
    d608:	20001d64 	.word	0x20001d64
    d60c:	0000d191 	.word	0x0000d191
    d610:	0000d0f5 	.word	0x0000d0f5

0000d614 <usbdc_xfer>:
{
    d614:	b500      	push	{lr}
    d616:	b085      	sub	sp, #20
	struct usb_d_transfer xfer = {(uint8_t *)buf, size, ep, zlp};
    d618:	f88d 000c 	strb.w	r0, [sp, #12]
	return usb_d_ep_transfer(&xfer);
    d61c:	a801      	add	r0, sp, #4
	struct usb_d_transfer xfer = {(uint8_t *)buf, size, ep, zlp};
    d61e:	9101      	str	r1, [sp, #4]
    d620:	9202      	str	r2, [sp, #8]
    d622:	f88d 300d 	strb.w	r3, [sp, #13]
	return usb_d_ep_transfer(&xfer);
    d626:	f000 fb55 	bl	dcd4 <usb_d_ep_transfer>
}
    d62a:	b005      	add	sp, #20
    d62c:	f85d fb04 	ldr.w	pc, [sp], #4

0000d630 <usbdc_register_handler>:
/**
 * \brief Register the handler
 */
void usbdc_register_handler(enum usbdc_handler_type type, const struct usbdc_handler *h)
{
	switch (type) {
    d630:	2801      	cmp	r0, #1
    d632:	d009      	beq.n	d648 <usbdc_register_handler+0x18>
    d634:	d305      	bcc.n	d642 <usbdc_register_handler+0x12>
    d636:	2802      	cmp	r0, #2
    d638:	d102      	bne.n	d640 <usbdc_register_handler+0x10>
		break;
	case USBDC_HDL_REQ:
		list_insert_at_end(&usbdc.handlers.req_list, (void *)h);
		break;
	case USBDC_HDL_CHANGE:
		list_insert_at_end(&usbdc.handlers.change_list, (void *)h);
    d63a:	4805      	ldr	r0, [pc, #20]	; (d650 <usbdc_register_handler+0x20>)
    d63c:	f000 bc66 	b.w	df0c <list_insert_at_end>
    d640:	4770      	bx	lr
		list_insert_at_end(&usbdc.handlers.sof_list, (void *)h);
    d642:	4804      	ldr	r0, [pc, #16]	; (d654 <usbdc_register_handler+0x24>)
    d644:	f000 bc62 	b.w	df0c <list_insert_at_end>
		list_insert_at_end(&usbdc.handlers.req_list, (void *)h);
    d648:	4803      	ldr	r0, [pc, #12]	; (d658 <usbdc_register_handler+0x28>)
    d64a:	f000 bc5f 	b.w	df0c <list_insert_at_end>
    d64e:	bf00      	nop
    d650:	20001d70 	.word	0x20001d70
    d654:	20001d68 	.word	0x20001d68
    d658:	20001d6c 	.word	0x20001d6c

0000d65c <usbdc_init>:

/**
 * \brief Initialize the USB device core driver
 */
int32_t usbdc_init(uint8_t *ctrl_buf)
{
    d65c:	b538      	push	{r3, r4, r5, lr}
	ASSERT(ctrl_buf);
    d65e:	4605      	mov	r5, r0
    d660:	3000      	adds	r0, #0
    d662:	bf18      	it	ne
    d664:	2001      	movne	r0, #1
    d666:	f240 3255 	movw	r2, #853	; 0x355
    d66a:	490c      	ldr	r1, [pc, #48]	; (d69c <usbdc_init+0x40>)
    d66c:	f000 fc4a 	bl	df04 <assert>

	int32_t rc;

	rc = usb_d_init();
    d670:	f000 f9dc 	bl	da2c <usb_d_init>
	if (rc < 0) {
    d674:	2800      	cmp	r0, #0
    d676:	db0f      	blt.n	d698 <usbdc_init+0x3c>
		return rc;
	}

	memset(&usbdc, 0, sizeof(usbdc));
    d678:	4c09      	ldr	r4, [pc, #36]	; (d6a0 <usbdc_init+0x44>)
    d67a:	2220      	movs	r2, #32
    d67c:	2100      	movs	r1, #0
    d67e:	4620      	mov	r0, r4
    d680:	f010 fd9c 	bl	1e1bc <memset>
	usbdc.ctrl_buf = ctrl_buf;
	usb_d_register_callback(USB_D_CB_SOF, (FUNC_PTR)usbd_sof_cb);
    d684:	4907      	ldr	r1, [pc, #28]	; (d6a4 <usbdc_init+0x48>)
	usbdc.ctrl_buf = ctrl_buf;
    d686:	6165      	str	r5, [r4, #20]
	usb_d_register_callback(USB_D_CB_SOF, (FUNC_PTR)usbd_sof_cb);
    d688:	2000      	movs	r0, #0
    d68a:	f000 fa51 	bl	db30 <usb_d_register_callback>
	usb_d_register_callback(USB_D_CB_EVENT, (FUNC_PTR)usbd_event_cb);
    d68e:	2001      	movs	r0, #1
    d690:	4905      	ldr	r1, [pc, #20]	; (d6a8 <usbdc_init+0x4c>)
    d692:	f000 fa4d 	bl	db30 <usb_d_register_callback>

	return 0;
    d696:	2000      	movs	r0, #0
}
    d698:	bd38      	pop	{r3, r4, r5, pc}
    d69a:	bf00      	nop
    d69c:	00022e78 	.word	0x00022e78
    d6a0:	20001d64 	.word	0x20001d64
    d6a4:	0000d0d9 	.word	0x0000d0d9
    d6a8:	0000d599 	.word	0x0000d599

0000d6ac <usbdc_register_function>:
 *
 * Must be invoked when USB device is stopped.
 */
void usbdc_register_function(struct usbdf_driver *func)
{
	list_insert_at_end(&usbdc.func_list, func);
    d6ac:	4601      	mov	r1, r0
    d6ae:	4801      	ldr	r0, [pc, #4]	; (d6b4 <usbdc_register_function+0x8>)
    d6b0:	f000 bc2c 	b.w	df0c <list_insert_at_end>
    d6b4:	20001d74 	.word	0x20001d74

0000d6b8 <usbdc_start>:

/**
 * \brief Start the USB device driver with specific descriptors set
 */
int32_t usbdc_start(struct usbd_descriptors *desces)
{
    d6b8:	b510      	push	{r4, lr}
	if (usbdc.state >= USBD_S_POWER) {
    d6ba:	4b0a      	ldr	r3, [pc, #40]	; (d6e4 <usbdc_start+0x2c>)
    d6bc:	7e9c      	ldrb	r4, [r3, #26]
    d6be:	b954      	cbnz	r4, d6d6 <usbdc_start+0x1e>
		return ERR_BUSY;
	}

	if (desces) {
    d6c0:	b160      	cbz	r0, d6dc <usbdc_start+0x24>
#endif
	} else {
		return ERR_BAD_DATA;
	}

	usbdc.ctrl_size = desces->sod[7];
    d6c2:	6802      	ldr	r2, [r0, #0]
		usbdc.desces.ls_fs = desces;
    d6c4:	6018      	str	r0, [r3, #0]
	usbdc.ctrl_size = desces->sod[7];
    d6c6:	79d2      	ldrb	r2, [r2, #7]
    d6c8:	771a      	strb	r2, [r3, #28]
	usbdc.state     = USBD_S_POWER;
    d6ca:	2201      	movs	r2, #1
    d6cc:	769a      	strb	r2, [r3, #26]
	usb_d_enable();
    d6ce:	f000 fa31 	bl	db34 <usb_d_enable>
	return ERR_NONE;
    d6d2:	4620      	mov	r0, r4
    d6d4:	bd10      	pop	{r4, pc}
		return ERR_BUSY;
    d6d6:	f06f 0003 	mvn.w	r0, #3
    d6da:	bd10      	pop	{r4, pc}
		return ERR_BAD_DATA;
    d6dc:	f06f 0008 	mvn.w	r0, #8
}
    d6e0:	bd10      	pop	{r4, pc}
    d6e2:	bf00      	nop
    d6e4:	20001d64 	.word	0x20001d64

0000d6e8 <usbdc_attach>:
/**
 * \brief Attach the USB device to host
 */
void usbdc_attach(void)
{
	usb_d_attach();
    d6e8:	f000 ba26 	b.w	db38 <usb_d_attach>

0000d6ec <usbdc_get_ctrl_buffer>:
/**
 * \brief Return USB Device endpoint0 buffer
 */
uint8_t *usbdc_get_ctrl_buffer(void)
{
	return usbdc.ctrl_buf;
    d6ec:	4b01      	ldr	r3, [pc, #4]	; (d6f4 <usbdc_get_ctrl_buffer+0x8>)
}
    d6ee:	6958      	ldr	r0, [r3, #20]
    d6f0:	4770      	bx	lr
    d6f2:	bf00      	nop
    d6f4:	20001d64 	.word	0x20001d64

0000d6f8 <usbdc_get_state>:
/**
 * \brief Return current USB state
 */
uint8_t usbdc_get_state(void)
{
	if (usbdc.state & USBD_S_SUSPEND) {
    d6f8:	4b03      	ldr	r3, [pc, #12]	; (d708 <usbdc_get_state+0x10>)
    d6fa:	7e98      	ldrb	r0, [r3, #26]
    d6fc:	f010 0f10 	tst.w	r0, #16
		return USBD_S_SUSPEND;
	}
	return usbdc.state;
}
    d700:	bf18      	it	ne
    d702:	2010      	movne	r0, #16
    d704:	4770      	bx	lr
    d706:	bf00      	nop
    d708:	20001d64 	.word	0x20001d64

0000d70c <usb_find_desc>:

uint8_t *usb_find_desc(uint8_t *desc, uint8_t *eof, uint8_t type)
{
	_param_error_check(desc && eof && (desc < eof));

	while (desc < eof) {
    d70c:	4288      	cmp	r0, r1
    d70e:	d214      	bcs.n	d73a <usb_find_desc+0x2e>
    d710:	7803      	ldrb	r3, [r0, #0]
		_desc_len_check();
    d712:	2b01      	cmp	r3, #1
    d714:	d911      	bls.n	d73a <usb_find_desc+0x2e>
{
    d716:	b410      	push	{r4}
		if (type == usb_desc_type(desc)) {
    d718:	7844      	ldrb	r4, [r0, #1]
    d71a:	4294      	cmp	r4, r2
    d71c:	d106      	bne.n	d72c <usb_find_desc+0x20>
    d71e:	e009      	b.n	d734 <usb_find_desc+0x28>
    d720:	7803      	ldrb	r3, [r0, #0]
		_desc_len_check();
    d722:	2b01      	cmp	r3, #1
    d724:	d905      	bls.n	d732 <usb_find_desc+0x26>
	return desc[1];
    d726:	7844      	ldrb	r4, [r0, #1]
		if (type == usb_desc_type(desc)) {
    d728:	4294      	cmp	r4, r2
    d72a:	d003      	beq.n	d734 <usb_find_desc+0x28>
	return (desc + usb_desc_len(desc));
    d72c:	4418      	add	r0, r3
	while (desc < eof) {
    d72e:	4281      	cmp	r1, r0
    d730:	d8f6      	bhi.n	d720 <usb_find_desc+0x14>
			return desc;
		}
		desc = usb_desc_next(desc);
	}
	return NULL;
    d732:	2000      	movs	r0, #0
}
    d734:	f85d 4b04 	ldr.w	r4, [sp], #4
    d738:	4770      	bx	lr
	return NULL;
    d73a:	2000      	movs	r0, #0
    d73c:	4770      	bx	lr
    d73e:	bf00      	nop

0000d740 <usb_find_ep_desc>:

uint8_t *usb_find_ep_desc(uint8_t *desc, uint8_t *eof)
{
	_param_error_check(desc && eof && (desc < eof));

	while (desc < eof) {
    d740:	4288      	cmp	r0, r1
    d742:	d213      	bcs.n	d76c <usb_find_ep_desc+0x2c>
    d744:	7803      	ldrb	r3, [r0, #0]
		_desc_len_check();
    d746:	2b01      	cmp	r3, #1
    d748:	d910      	bls.n	d76c <usb_find_ep_desc+0x2c>
	return desc[1];
    d74a:	7842      	ldrb	r2, [r0, #1]
		if (USB_DT_INTERFACE == usb_desc_type(desc)) {
    d74c:	2a04      	cmp	r2, #4
    d74e:	d00d      	beq.n	d76c <usb_find_ep_desc+0x2c>
			break;
		}
		if (USB_DT_ENDPOINT == usb_desc_type(desc)) {
    d750:	2a05      	cmp	r2, #5
    d752:	d108      	bne.n	d766 <usb_find_ep_desc+0x26>
    d754:	e00c      	b.n	d770 <usb_find_ep_desc+0x30>
    d756:	7803      	ldrb	r3, [r0, #0]
		_desc_len_check();
    d758:	2b01      	cmp	r3, #1
    d75a:	d907      	bls.n	d76c <usb_find_ep_desc+0x2c>
    d75c:	7842      	ldrb	r2, [r0, #1]
		if (USB_DT_INTERFACE == usb_desc_type(desc)) {
    d75e:	2a04      	cmp	r2, #4
    d760:	d004      	beq.n	d76c <usb_find_ep_desc+0x2c>
		if (USB_DT_ENDPOINT == usb_desc_type(desc)) {
    d762:	2a05      	cmp	r2, #5
    d764:	d003      	beq.n	d76e <usb_find_ep_desc+0x2e>
	return (desc + usb_desc_len(desc));
    d766:	4418      	add	r0, r3
	while (desc < eof) {
    d768:	4281      	cmp	r1, r0
    d76a:	d8f4      	bhi.n	d756 <usb_find_ep_desc+0x16>
			return desc;
		}
		desc = usb_desc_next(desc);
	}
	return NULL;
    d76c:	2000      	movs	r0, #0
}
    d76e:	4770      	bx	lr
    d770:	4770      	bx	lr
    d772:	bf00      	nop

0000d774 <usb_find_cfg_desc>:
	while (desc < eof) {
    d774:	4288      	cmp	r0, r1
    d776:	d226      	bcs.n	d7c6 <usb_find_cfg_desc+0x52>
    d778:	7803      	ldrb	r3, [r0, #0]
		_desc_len_check();
    d77a:	2b01      	cmp	r3, #1
    d77c:	d923      	bls.n	d7c6 <usb_find_cfg_desc+0x52>

uint8_t *usb_find_cfg_desc(uint8_t *desc, uint8_t *eof, uint8_t cfg_value)
{
    d77e:	b410      	push	{r4}
		if (type == usb_desc_type(desc)) {
    d780:	7844      	ldrb	r4, [r0, #1]
    d782:	2c02      	cmp	r4, #2
    d784:	d106      	bne.n	d794 <usb_find_cfg_desc+0x20>
    d786:	e012      	b.n	d7ae <usb_find_cfg_desc+0x3a>
    d788:	7803      	ldrb	r3, [r0, #0]
		_desc_len_check();
    d78a:	2b01      	cmp	r3, #1
    d78c:	d905      	bls.n	d79a <usb_find_cfg_desc+0x26>
	return desc[1];
    d78e:	7844      	ldrb	r4, [r0, #1]
		if (type == usb_desc_type(desc)) {
    d790:	2c02      	cmp	r4, #2
    d792:	d00c      	beq.n	d7ae <usb_find_cfg_desc+0x3a>
	return (desc + usb_desc_len(desc));
    d794:	4418      	add	r0, r3
	while (desc < eof) {
    d796:	4281      	cmp	r1, r0
    d798:	d8f6      	bhi.n	d788 <usb_find_cfg_desc+0x14>
	_param_error_check(desc && eof && (desc < eof));

	desc = usb_find_desc(desc, eof, USB_DT_CONFIG);
	if (!desc) {
		return NULL;
    d79a:	2000      	movs	r0, #0
			return desc;
		}
		desc = usb_cfg_desc_next(desc);
	}
	return NULL;
}
    d79c:	f85d 4b04 	ldr.w	r4, [sp], #4
    d7a0:	4770      	bx	lr
		_desc_len_check();
    d7a2:	7803      	ldrb	r3, [r0, #0]
    d7a4:	2b01      	cmp	r3, #1
    d7a6:	d9f8      	bls.n	d79a <usb_find_cfg_desc+0x26>
		if (desc[1] != USB_DT_CONFIG) {
    d7a8:	7843      	ldrb	r3, [r0, #1]
    d7aa:	2b02      	cmp	r3, #2
    d7ac:	d1f5      	bne.n	d79a <usb_find_cfg_desc+0x26>
		if (desc[5] == cfg_value) {
    d7ae:	7943      	ldrb	r3, [r0, #5]
    d7b0:	4293      	cmp	r3, r2
    d7b2:	d0f3      	beq.n	d79c <usb_find_cfg_desc+0x28>
	return (ptr[0] + (ptr[1] << 8));
    d7b4:	78c4      	ldrb	r4, [r0, #3]
    d7b6:	7883      	ldrb	r3, [r0, #2]
    d7b8:	eb03 2304 	add.w	r3, r3, r4, lsl #8
 *  \param[in] cfg_desc Byte pointer to the descriptor start address
 *  \return Byte pointer to descriptor after configuration end
 */
static inline uint8_t *usb_cfg_desc_next(uint8_t *cfg_desc)
{
	return (cfg_desc + usb_cfg_desc_total_len(cfg_desc));
    d7bc:	fa10 f083 	uxtah	r0, r0, r3
	while (desc < eof) {
    d7c0:	4281      	cmp	r1, r0
    d7c2:	d8ee      	bhi.n	d7a2 <usb_find_cfg_desc+0x2e>
    d7c4:	e7e9      	b.n	d79a <usb_find_cfg_desc+0x26>
		return NULL;
    d7c6:	2000      	movs	r0, #0
    d7c8:	4770      	bx	lr
    d7ca:	bf00      	nop

0000d7cc <usb_find_str_desc>:
{
	uint8_t i;

	_param_error_check(desc && eof && (desc < eof));

	for (i = 0; desc < eof;) {
    d7cc:	4288      	cmp	r0, r1
    d7ce:	d216      	bcs.n	d7fe <usb_find_str_desc+0x32>
{
    d7d0:	b430      	push	{r4, r5}
	for (i = 0; desc < eof;) {
    d7d2:	2500      	movs	r5, #0
    d7d4:	e005      	b.n	d7e2 <usb_find_str_desc+0x16>
	return desc[1];
    d7d6:	7844      	ldrb	r4, [r0, #1]
		if (type == usb_desc_type(desc)) {
    d7d8:	2c03      	cmp	r4, #3
    d7da:	d008      	beq.n	d7ee <usb_find_str_desc+0x22>
	return (desc + usb_desc_len(desc));
    d7dc:	4418      	add	r0, r3
	while (desc < eof) {
    d7de:	4281      	cmp	r1, r0
    d7e0:	d902      	bls.n	d7e8 <usb_find_str_desc+0x1c>
    d7e2:	7803      	ldrb	r3, [r0, #0]
		_desc_len_check();
    d7e4:	2b01      	cmp	r3, #1
    d7e6:	d8f6      	bhi.n	d7d6 <usb_find_str_desc+0xa>
			desc = usb_desc_next(desc);
		} else {
			return NULL;
		}
	}
	return NULL;
    d7e8:	2000      	movs	r0, #0
}
    d7ea:	bc30      	pop	{r4, r5}
    d7ec:	4770      	bx	lr
			if (i == str_index) {
    d7ee:	4295      	cmp	r5, r2
    d7f0:	d0fb      	beq.n	d7ea <usb_find_str_desc+0x1e>
    d7f2:	4418      	add	r0, r3
	for (i = 0; desc < eof;) {
    d7f4:	4281      	cmp	r1, r0
    d7f6:	f105 0501 	add.w	r5, r5, #1
    d7fa:	d8f2      	bhi.n	d7e2 <usb_find_str_desc+0x16>
    d7fc:	e7f4      	b.n	d7e8 <usb_find_str_desc+0x1c>
	return NULL;
    d7fe:	2000      	movs	r0, #0
    d800:	4770      	bx	lr
    d802:	bf00      	nop

0000d804 <usb_d_dummy_cb_false>:
{
	(void)unused0;
	(void)unused1;
	(void)unused2;
	return false;
}
    d804:	2000      	movs	r0, #0
    d806:	4770      	bx	lr

0000d808 <usb_d_cb_trans_more>:
 * \brief Callback invoked when request more data
 * \param[in] ep Endpoint number with transfer direction on bit 8.
 * \param[in] transfered Number of bytes transfered.
 */
static bool usb_d_cb_trans_more(const uint8_t ep, const uint32_t transfered)
{
    d808:	b5f0      	push	{r4, r5, r6, r7, lr}
    d80a:	4f0f      	ldr	r7, [pc, #60]	; (d848 <usb_d_cb_trans_more+0x40>)
		    && (ep & USB_EP_N_MASK) == usb_d_inst.ep[i].xfer.hdr.ep) {
    d80c:	f000 0e0f 	and.w	lr, r0, #15
    d810:	463a      	mov	r2, r7
{
    d812:	2300      	movs	r3, #0
		if (usb_d_inst.ep[i].xfer.hdr.ep == ep) {
    d814:	7854      	ldrb	r4, [r2, #1]
    d816:	42a0      	cmp	r0, r4
    d818:	461e      	mov	r6, r3
    d81a:	f103 0301 	add.w	r3, r3, #1
    d81e:	d008      	beq.n	d832 <usb_d_cb_trans_more+0x2a>
		if (usb_d_inst.ep[i].xfer.hdr.type == USB_EP_XTYPE_CTRL
    d820:	7815      	ldrb	r5, [r2, #0]
    d822:	3220      	adds	r2, #32
    d824:	b90d      	cbnz	r5, d82a <usb_d_cb_trans_more+0x22>
		    && (ep & USB_EP_N_MASK) == usb_d_inst.ep[i].xfer.hdr.ep) {
    d826:	4574      	cmp	r4, lr
    d828:	d003      	beq.n	d832 <usb_d_cb_trans_more+0x2a>
	for (i = 0; i < CONF_USB_D_NUM_EP_SP; i++) {
    d82a:	2b0d      	cmp	r3, #13
    d82c:	d1f2      	bne.n	d814 <usb_d_cb_trans_more+0xc>
    d82e:	f04f 36ff 	mov.w	r6, #4294967295
	int8_t           ep_index = _usb_d_find_ep(ep);
	struct usb_d_ep *ept      = &usb_d_inst.ep[ep_index];
	if (ept->xfer.hdr.state == USB_EP_S_X_DATA) {
    d832:	eb07 1646 	add.w	r6, r7, r6, lsl #5
    d836:	78b3      	ldrb	r3, [r6, #2]
    d838:	2b03      	cmp	r3, #3
    d83a:	d001      	beq.n	d840 <usb_d_cb_trans_more+0x38>
		return ept->callbacks.more(ep, transfered);
	}
	return false;
}
    d83c:	2000      	movs	r0, #0
    d83e:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return ept->callbacks.more(ep, transfered);
    d840:	69b3      	ldr	r3, [r6, #24]
}
    d842:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
		return ept->callbacks.more(ep, transfered);
    d846:	4718      	bx	r3
    d848:	20001d84 	.word	0x20001d84

0000d84c <_usb_d_cb_trans_done>:

/**
 * Callback when USB transactions are finished.
 */
static void _usb_d_cb_trans_done(const uint8_t ep, const int32_t code, const uint32_t transferred)
{
    d84c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    d850:	f8df 9130 	ldr.w	r9, [pc, #304]	; d984 <_usb_d_cb_trans_done+0x138>
    d854:	4607      	mov	r7, r0
    d856:	4688      	mov	r8, r1
    d858:	b087      	sub	sp, #28
		    && (ep & USB_EP_N_MASK) == usb_d_inst.ep[i].xfer.hdr.ep) {
    d85a:	f000 010f 	and.w	r1, r0, #15
{
    d85e:	2300      	movs	r3, #0
    d860:	4648      	mov	r0, r9
		if (usb_d_inst.ep[i].xfer.hdr.ep == ep) {
    d862:	7844      	ldrb	r4, [r0, #1]
    d864:	42a7      	cmp	r7, r4
    d866:	461e      	mov	r6, r3
    d868:	f103 0301 	add.w	r3, r3, #1
    d86c:	d008      	beq.n	d880 <_usb_d_cb_trans_done+0x34>
		if (usb_d_inst.ep[i].xfer.hdr.type == USB_EP_XTYPE_CTRL
    d86e:	7805      	ldrb	r5, [r0, #0]
    d870:	3020      	adds	r0, #32
    d872:	b90d      	cbnz	r5, d878 <_usb_d_cb_trans_done+0x2c>
		    && (ep & USB_EP_N_MASK) == usb_d_inst.ep[i].xfer.hdr.ep) {
    d874:	428c      	cmp	r4, r1
    d876:	d003      	beq.n	d880 <_usb_d_cb_trans_done+0x34>
	for (i = 0; i < CONF_USB_D_NUM_EP_SP; i++) {
    d878:	2b0d      	cmp	r3, #13
    d87a:	d1f2      	bne.n	d862 <_usb_d_cb_trans_done+0x16>
    d87c:	f04f 36ff 	mov.w	r6, #4294967295
	int8_t           ep_index = _usb_d_find_ep(ep);
	struct usb_d_ep *ept      = &usb_d_inst.ep[ep_index];

	if (code == USB_TRANS_DONE) {
		ept->xfer.hdr.status = USB_XFER_DONE;
    d880:	0176      	lsls	r6, r6, #5
	if (code == USB_TRANS_DONE) {
    d882:	f1b8 0f00 	cmp.w	r8, #0
    d886:	d110      	bne.n	d8aa <_usb_d_cb_trans_done+0x5e>
		ept->xfer.hdr.status = USB_XFER_DONE;
    d888:	eb09 0406 	add.w	r4, r9, r6
		if (ept->xfer.hdr.type == USB_EP_XTYPE_CTRL) {
    d88c:	f819 3006 	ldrb.w	r3, [r9, r6]
		ept->xfer.hdr.status = USB_XFER_DONE;
    d890:	f884 8003 	strb.w	r8, [r4, #3]
		if (ept->xfer.hdr.type == USB_EP_XTYPE_CTRL) {
    d894:	b32b      	cbz	r3, d8e2 <_usb_d_cb_trans_done+0x96>
			usb_d_ctrl_trans_done(ept);
			return;
		}
		ept->xfer.hdr.state = USB_EP_S_IDLE;
    d896:	2301      	movs	r3, #1
    d898:	4641      	mov	r1, r8
    d89a:	70a3      	strb	r3, [r4, #2]
	} else {
		ept->xfer.hdr.state  = USB_EP_S_ERROR;
		ept->xfer.hdr.status = USB_XFER_ERROR;
	}

	ept->callbacks.xfer(ep, (enum usb_xfer_code)ept->xfer.hdr.status, (void *)transferred);
    d89c:	444e      	add	r6, r9
    d89e:	4638      	mov	r0, r7
    d8a0:	69f3      	ldr	r3, [r6, #28]
    d8a2:	4798      	blx	r3
}
    d8a4:	b007      	add	sp, #28
    d8a6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	} else if (code == USB_TRANS_STALL) {
    d8aa:	f1b8 0f01 	cmp.w	r8, #1
    d8ae:	d00b      	beq.n	d8c8 <_usb_d_cb_trans_done+0x7c>
	} else if (code == USB_TRANS_ABORT) {
    d8b0:	f1b8 0f02 	cmp.w	r8, #2
		ept->xfer.hdr.status = USB_XFER_ABORT;
    d8b4:	eb09 0306 	add.w	r3, r9, r6
	} else if (code == USB_TRANS_ABORT) {
    d8b8:	d025      	beq.n	d906 <_usb_d_cb_trans_done+0xba>
	} else if (code == USB_TRANS_RESET) {
    d8ba:	f1b8 0f03 	cmp.w	r8, #3
    d8be:	d01d      	beq.n	d8fc <_usb_d_cb_trans_done+0xb0>
		ept->xfer.hdr.state  = USB_EP_S_ERROR;
    d8c0:	2106      	movs	r1, #6
    d8c2:	7099      	strb	r1, [r3, #2]
		ept->xfer.hdr.status = USB_XFER_ERROR;
    d8c4:	70d9      	strb	r1, [r3, #3]
    d8c6:	e7e9      	b.n	d89c <_usb_d_cb_trans_done+0x50>
		ept->xfer.hdr.status = USB_XFER_HALT;
    d8c8:	eb09 0406 	add.w	r4, r9, r6
		if (ept->xfer.hdr.type == USB_EP_XTYPE_CTRL) {
    d8cc:	f819 1006 	ldrb.w	r1, [r9, r6]
		ept->xfer.hdr.status = USB_XFER_HALT;
    d8d0:	f04f 0802 	mov.w	r8, #2
    d8d4:	f884 8003 	strb.w	r8, [r4, #3]
		if (ept->xfer.hdr.type == USB_EP_XTYPE_CTRL) {
    d8d8:	b1e9      	cbz	r1, d916 <_usb_d_cb_trans_done+0xca>
			ept->xfer.hdr.state = USB_EP_S_HALTED;
    d8da:	2305      	movs	r3, #5
    d8dc:	4641      	mov	r1, r8
    d8de:	70a3      	strb	r3, [r4, #2]
    d8e0:	e7dc      	b.n	d89c <_usb_d_cb_trans_done+0x50>
	if (state == USB_EP_S_X_DATA) {
    d8e2:	78a3      	ldrb	r3, [r4, #2]
		bool err = ept->callbacks.xfer(ept->xfer.hdr.ep, USB_XFER_DATA, ept->xfer.req);
    d8e4:	360c      	adds	r6, #12
	if (state == USB_EP_S_X_DATA) {
    d8e6:	2b03      	cmp	r3, #3
		bool err = ept->callbacks.xfer(ept->xfer.hdr.ep, USB_XFER_DATA, ept->xfer.req);
    d8e8:	eb09 0206 	add.w	r2, r9, r6
	if (state == USB_EP_S_X_DATA) {
    d8ec:	d01f      	beq.n	d92e <_usb_d_cb_trans_done+0xe2>
		ept->callbacks.xfer(ept->xfer.hdr.ep, USB_XFER_DONE, ept->xfer.req);
    d8ee:	69e3      	ldr	r3, [r4, #28]
    d8f0:	7860      	ldrb	r0, [r4, #1]
    d8f2:	4641      	mov	r1, r8
    d8f4:	4798      	blx	r3
		ept->xfer.hdr.state = USB_EP_S_X_SETUP;
    d8f6:	2302      	movs	r3, #2
    d8f8:	70a3      	strb	r3, [r4, #2]
    d8fa:	e7d3      	b.n	d8a4 <_usb_d_cb_trans_done+0x58>
		ept->xfer.hdr.state  = USB_EP_S_DISABLED;
    d8fc:	2000      	movs	r0, #0
		ept->xfer.hdr.status = USB_XFER_RESET;
    d8fe:	2105      	movs	r1, #5
		ept->xfer.hdr.state  = USB_EP_S_DISABLED;
    d900:	7098      	strb	r0, [r3, #2]
		ept->xfer.hdr.status = USB_XFER_RESET;
    d902:	70d9      	strb	r1, [r3, #3]
    d904:	e7ca      	b.n	d89c <_usb_d_cb_trans_done+0x50>
		if (ept->xfer.hdr.type == USB_EP_XTYPE_CTRL) {
    d906:	f819 0006 	ldrb.w	r0, [r9, r6]
		ept->xfer.hdr.status = USB_XFER_ABORT;
    d90a:	2104      	movs	r1, #4
    d90c:	70d9      	strb	r1, [r3, #3]
		if (ept->xfer.hdr.type == USB_EP_XTYPE_CTRL) {
    d90e:	b158      	cbz	r0, d928 <_usb_d_cb_trans_done+0xdc>
		ept->xfer.hdr.state = USB_EP_S_IDLE;
    d910:	2001      	movs	r0, #1
    d912:	7098      	strb	r0, [r3, #2]
    d914:	e7c2      	b.n	d89c <_usb_d_cb_trans_done+0x50>
			_usb_d_dev_ep_stall(ep, USB_EP_STALL_CLR);
    d916:	4638      	mov	r0, r7
			ept->xfer.hdr.state = USB_EP_S_X_SETUP;
    d918:	f884 8002 	strb.w	r8, [r4, #2]
    d91c:	9201      	str	r2, [sp, #4]
			_usb_d_dev_ep_stall(ep, USB_EP_STALL_CLR);
    d91e:	f005 f917 	bl	12b50 <_usb_d_dev_ep_stall>
    d922:	78e1      	ldrb	r1, [r4, #3]
    d924:	9a01      	ldr	r2, [sp, #4]
    d926:	e7b9      	b.n	d89c <_usb_d_cb_trans_done+0x50>
			ept->xfer.hdr.state = USB_EP_S_X_SETUP;
    d928:	f883 8002 	strb.w	r8, [r3, #2]
			return;
    d92c:	e7ba      	b.n	d8a4 <_usb_d_cb_trans_done+0x58>
		bool err = ept->callbacks.xfer(ept->xfer.hdr.ep, USB_XFER_DATA, ept->xfer.req);
    d92e:	69e3      	ldr	r3, [r4, #28]
    d930:	7860      	ldrb	r0, [r4, #1]
    d932:	f994 500c 	ldrsb.w	r5, [r4, #12]
    d936:	2101      	movs	r1, #1
    d938:	4798      	blx	r3
		if (err) {
    d93a:	b160      	cbz	r0, d956 <_usb_d_cb_trans_done+0x10a>
			_usb_d_dev_ep_stall(req_dir ? ept->xfer.hdr.ep : (ept->xfer.hdr.ep | USB_EP_DIR), USB_EP_STALL_SET);
    d93c:	7860      	ldrb	r0, [r4, #1]
			ept->xfer.hdr.state  = USB_EP_S_HALTED;
    d93e:	2205      	movs	r2, #5
			ept->xfer.hdr.status = USB_XFER_HALT;
    d940:	2302      	movs	r3, #2
			_usb_d_dev_ep_stall(req_dir ? ept->xfer.hdr.ep : (ept->xfer.hdr.ep | USB_EP_DIR), USB_EP_STALL_SET);
    d942:	2d00      	cmp	r5, #0
			ept->xfer.hdr.state  = USB_EP_S_HALTED;
    d944:	70a2      	strb	r2, [r4, #2]
			ept->xfer.hdr.status = USB_XFER_HALT;
    d946:	70e3      	strb	r3, [r4, #3]
			_usb_d_dev_ep_stall(req_dir ? ept->xfer.hdr.ep : (ept->xfer.hdr.ep | USB_EP_DIR), USB_EP_STALL_SET);
    d948:	bfa8      	it	ge
    d94a:	f040 0080 	orrge.w	r0, r0, #128	; 0x80
    d94e:	2101      	movs	r1, #1
    d950:	f005 f8fe 	bl	12b50 <_usb_d_dev_ep_stall>
    d954:	e7a6      	b.n	d8a4 <_usb_d_cb_trans_done+0x58>
			ept->xfer.hdr.state = USB_EP_S_X_STATUS;
    d956:	2304      	movs	r3, #4
    d958:	70a3      	strb	r3, [r4, #2]
			_usb_d_trans(ept->xfer.hdr.ep, !req_dir, NULL, 0, 1);
    d95a:	7863      	ldrb	r3, [r4, #1]
	struct usb_d_transfer trans
    d95c:	f8cd 800c 	str.w	r8, [sp, #12]
    d960:	2d00      	cmp	r5, #0
    d962:	bfac      	ite	ge
    d964:	f043 0380 	orrge.w	r3, r3, #128	; 0x80
    d968:	f003 030f 	andlt.w	r3, r3, #15
    d96c:	2201      	movs	r2, #1
	return _usb_d_dev_ep_trans(&trans);
    d96e:	a803      	add	r0, sp, #12
	struct usb_d_transfer trans
    d970:	f8cd 8010 	str.w	r8, [sp, #16]
    d974:	f88d 3014 	strb.w	r3, [sp, #20]
    d978:	f88d 2015 	strb.w	r2, [sp, #21]
	return _usb_d_dev_ep_trans(&trans);
    d97c:	f005 f9a4 	bl	12cc8 <_usb_d_dev_ep_trans>
    d980:	e790      	b.n	d8a4 <_usb_d_cb_trans_done+0x58>
    d982:	bf00      	nop
    d984:	20001d84 	.word	0x20001d84

0000d988 <usb_d_cb_trans_setup>:
{
    d988:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    d98c:	4f26      	ldr	r7, [pc, #152]	; (da28 <usb_d_cb_trans_setup+0xa0>)
    d98e:	4604      	mov	r4, r0
		    && (ep & USB_EP_N_MASK) == usb_d_inst.ep[i].xfer.hdr.ep) {
    d990:	f000 060f 	and.w	r6, r0, #15
    d994:	463a      	mov	r2, r7
{
    d996:	2300      	movs	r3, #0
		if (usb_d_inst.ep[i].xfer.hdr.ep == ep) {
    d998:	7851      	ldrb	r1, [r2, #1]
    d99a:	428c      	cmp	r4, r1
    d99c:	461d      	mov	r5, r3
    d99e:	f103 0301 	add.w	r3, r3, #1
    d9a2:	d032      	beq.n	da0a <usb_d_cb_trans_setup+0x82>
		if (usb_d_inst.ep[i].xfer.hdr.type == USB_EP_XTYPE_CTRL
    d9a4:	7810      	ldrb	r0, [r2, #0]
    d9a6:	3220      	adds	r2, #32
    d9a8:	b908      	cbnz	r0, d9ae <usb_d_cb_trans_setup+0x26>
		    && (ep & USB_EP_N_MASK) == usb_d_inst.ep[i].xfer.hdr.ep) {
    d9aa:	42b1      	cmp	r1, r6
    d9ac:	d02d      	beq.n	da0a <usb_d_cb_trans_setup+0x82>
	for (i = 0; i < CONF_USB_D_NUM_EP_SP; i++) {
    d9ae:	2b0d      	cmp	r3, #13
    d9b0:	d1f2      	bne.n	d998 <usb_d_cb_trans_setup+0x10>
    d9b2:	f06f 0613 	mvn.w	r6, #19
    d9b6:	f04f 35ff 	mov.w	r5, #4294967295
	uint8_t *        req      = ept->xfer.req;
    d9ba:	443e      	add	r6, r7
	uint8_t n = _usb_d_dev_ep_read_req(ep, req);
    d9bc:	4631      	mov	r1, r6
    d9be:	4620      	mov	r0, r4
    d9c0:	f005 f958 	bl	12c74 <_usb_d_dev_ep_read_req>
	if (n != 8) {
    d9c4:	b2c0      	uxtb	r0, r0
    d9c6:	2808      	cmp	r0, #8
    d9c8:	d00a      	beq.n	d9e0 <usb_d_cb_trans_setup+0x58>
		_usb_d_dev_ep_stall(ep, USB_EP_STALL_SET);
    d9ca:	2101      	movs	r1, #1
    d9cc:	4620      	mov	r0, r4
    d9ce:	f005 f8bf 	bl	12b50 <_usb_d_dev_ep_stall>
		_usb_d_dev_ep_stall(ep | USB_EP_DIR, USB_EP_STALL_SET);
    d9d2:	f044 0080 	orr.w	r0, r4, #128	; 0x80
    d9d6:	2101      	movs	r1, #1
}
    d9d8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		_usb_d_dev_ep_stall(ep | USB_EP_DIR, USB_EP_STALL_SET);
    d9dc:	f005 b8b8 	b.w	12b50 <_usb_d_dev_ep_stall>
	ept->xfer.hdr.state = USB_EP_S_IDLE;
    d9e0:	eb07 1545 	add.w	r5, r7, r5, lsl #5
	_usb_d_dev_ep_stall(ep, USB_EP_STALL_CLR);
    d9e4:	2100      	movs	r1, #0
    d9e6:	4620      	mov	r0, r4
	_usb_d_dev_ep_stall(ep | USB_EP_DIR, USB_EP_STALL_CLR);
    d9e8:	f044 0880 	orr.w	r8, r4, #128	; 0x80
	_usb_d_dev_ep_stall(ep, USB_EP_STALL_CLR);
    d9ec:	f005 f8b0 	bl	12b50 <_usb_d_dev_ep_stall>
	ept->xfer.hdr.state = USB_EP_S_IDLE;
    d9f0:	2701      	movs	r7, #1
	_usb_d_dev_ep_stall(ep | USB_EP_DIR, USB_EP_STALL_CLR);
    d9f2:	2100      	movs	r1, #0
    d9f4:	4640      	mov	r0, r8
    d9f6:	f005 f8ab 	bl	12b50 <_usb_d_dev_ep_stall>
	if (!ept->callbacks.req(ep, req)) {
    d9fa:	4631      	mov	r1, r6
	ept->xfer.hdr.state = USB_EP_S_IDLE;
    d9fc:	70af      	strb	r7, [r5, #2]
	if (!ept->callbacks.req(ep, req)) {
    d9fe:	696b      	ldr	r3, [r5, #20]
    da00:	4620      	mov	r0, r4
    da02:	4798      	blx	r3
    da04:	b120      	cbz	r0, da10 <usb_d_cb_trans_setup+0x88>
    da06:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    da0a:	016e      	lsls	r6, r5, #5
    da0c:	360c      	adds	r6, #12
    da0e:	e7d4      	b.n	d9ba <usb_d_cb_trans_setup+0x32>
		ept->xfer.hdr.state = USB_EP_S_HALTED;
    da10:	2305      	movs	r3, #5
		_usb_d_dev_ep_stall(ep, USB_EP_STALL_SET);
    da12:	4639      	mov	r1, r7
    da14:	4620      	mov	r0, r4
		ept->xfer.hdr.state = USB_EP_S_HALTED;
    da16:	70ab      	strb	r3, [r5, #2]
		_usb_d_dev_ep_stall(ep, USB_EP_STALL_SET);
    da18:	f005 f89a 	bl	12b50 <_usb_d_dev_ep_stall>
		_usb_d_dev_ep_stall(ep | USB_EP_DIR, USB_EP_STALL_SET);
    da1c:	4639      	mov	r1, r7
    da1e:	4640      	mov	r0, r8
}
    da20:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		_usb_d_dev_ep_stall(ep | USB_EP_DIR, USB_EP_STALL_SET);
    da24:	f005 b894 	b.w	12b50 <_usb_d_dev_ep_stall>
    da28:	20001d84 	.word	0x20001d84

0000da2c <usb_d_init>:

int32_t usb_d_init(void)
{
    da2c:	b510      	push	{r4, lr}
	int32_t rc = _usb_d_dev_init();
    da2e:	f004 fd8b 	bl	12548 <_usb_d_dev_init>
	uint8_t i;
	if (rc < 0) {
    da32:	2800      	cmp	r0, #0
    da34:	db70      	blt.n	db18 <usb_d_init+0xec>
		return rc;
	}
	memset(usb_d_inst.ep, 0x00, sizeof(struct usb_d_ep) * CONF_USB_D_NUM_EP_SP);
    da36:	4c39      	ldr	r4, [pc, #228]	; (db1c <usb_d_init+0xf0>)
    da38:	f44f 72d0 	mov.w	r2, #416	; 0x1a0
    da3c:	2100      	movs	r1, #0
    da3e:	4620      	mov	r0, r4
    da40:	f010 fbbc 	bl	1e1bc <memset>
	for (i = 0; i < CONF_USB_D_NUM_EP_SP; i++) {
		usb_d_inst.ep[i].xfer.hdr.ep    = 0xFF;
		usb_d_inst.ep[i].callbacks.req  = (usb_d_ep_cb_setup_t)usb_d_dummy_cb_false;
    da44:	4b36      	ldr	r3, [pc, #216]	; (db20 <usb_d_init+0xf4>)
		usb_d_inst.ep[i].callbacks.more = (usb_d_ep_cb_more_t)usb_d_dummy_cb_false;
		usb_d_inst.ep[i].callbacks.xfer = (usb_d_ep_cb_xfer_t)usb_d_dummy_cb_false;
	}
	/* Handles device driver endpoint callbacks to build transfer. */
	_usb_d_dev_register_ep_callback(USB_D_DEV_EP_CB_SETUP, (FUNC_PTR)usb_d_cb_trans_setup);
    da46:	4937      	ldr	r1, [pc, #220]	; (db24 <usb_d_init+0xf8>)
		usb_d_inst.ep[i].callbacks.req  = (usb_d_ep_cb_setup_t)usb_d_dummy_cb_false;
    da48:	6163      	str	r3, [r4, #20]
		usb_d_inst.ep[i].xfer.hdr.ep    = 0xFF;
    da4a:	22ff      	movs	r2, #255	; 0xff
    da4c:	7062      	strb	r2, [r4, #1]
    da4e:	f884 2021 	strb.w	r2, [r4, #33]	; 0x21
    da52:	f884 2041 	strb.w	r2, [r4, #65]	; 0x41
    da56:	f884 2061 	strb.w	r2, [r4, #97]	; 0x61
    da5a:	f884 2081 	strb.w	r2, [r4, #129]	; 0x81
    da5e:	f884 20a1 	strb.w	r2, [r4, #161]	; 0xa1
    da62:	f884 20c1 	strb.w	r2, [r4, #193]	; 0xc1
    da66:	f884 20e1 	strb.w	r2, [r4, #225]	; 0xe1
	_usb_d_dev_register_ep_callback(USB_D_DEV_EP_CB_SETUP, (FUNC_PTR)usb_d_cb_trans_setup);
    da6a:	2000      	movs	r0, #0
		usb_d_inst.ep[i].callbacks.more = (usb_d_ep_cb_more_t)usb_d_dummy_cb_false;
    da6c:	61a3      	str	r3, [r4, #24]
		usb_d_inst.ep[i].callbacks.xfer = (usb_d_ep_cb_xfer_t)usb_d_dummy_cb_false;
    da6e:	61e3      	str	r3, [r4, #28]
		usb_d_inst.ep[i].callbacks.req  = (usb_d_ep_cb_setup_t)usb_d_dummy_cb_false;
    da70:	6363      	str	r3, [r4, #52]	; 0x34
		usb_d_inst.ep[i].callbacks.more = (usb_d_ep_cb_more_t)usb_d_dummy_cb_false;
    da72:	63a3      	str	r3, [r4, #56]	; 0x38
		usb_d_inst.ep[i].callbacks.xfer = (usb_d_ep_cb_xfer_t)usb_d_dummy_cb_false;
    da74:	63e3      	str	r3, [r4, #60]	; 0x3c
		usb_d_inst.ep[i].callbacks.req  = (usb_d_ep_cb_setup_t)usb_d_dummy_cb_false;
    da76:	6563      	str	r3, [r4, #84]	; 0x54
		usb_d_inst.ep[i].callbacks.more = (usb_d_ep_cb_more_t)usb_d_dummy_cb_false;
    da78:	65a3      	str	r3, [r4, #88]	; 0x58
		usb_d_inst.ep[i].callbacks.xfer = (usb_d_ep_cb_xfer_t)usb_d_dummy_cb_false;
    da7a:	65e3      	str	r3, [r4, #92]	; 0x5c
		usb_d_inst.ep[i].callbacks.req  = (usb_d_ep_cb_setup_t)usb_d_dummy_cb_false;
    da7c:	6763      	str	r3, [r4, #116]	; 0x74
		usb_d_inst.ep[i].callbacks.more = (usb_d_ep_cb_more_t)usb_d_dummy_cb_false;
    da7e:	67a3      	str	r3, [r4, #120]	; 0x78
		usb_d_inst.ep[i].callbacks.xfer = (usb_d_ep_cb_xfer_t)usb_d_dummy_cb_false;
    da80:	67e3      	str	r3, [r4, #124]	; 0x7c
		usb_d_inst.ep[i].callbacks.req  = (usb_d_ep_cb_setup_t)usb_d_dummy_cb_false;
    da82:	f8c4 3094 	str.w	r3, [r4, #148]	; 0x94
		usb_d_inst.ep[i].callbacks.more = (usb_d_ep_cb_more_t)usb_d_dummy_cb_false;
    da86:	f8c4 3098 	str.w	r3, [r4, #152]	; 0x98
		usb_d_inst.ep[i].callbacks.xfer = (usb_d_ep_cb_xfer_t)usb_d_dummy_cb_false;
    da8a:	f8c4 309c 	str.w	r3, [r4, #156]	; 0x9c
		usb_d_inst.ep[i].callbacks.req  = (usb_d_ep_cb_setup_t)usb_d_dummy_cb_false;
    da8e:	f8c4 30b4 	str.w	r3, [r4, #180]	; 0xb4
		usb_d_inst.ep[i].callbacks.more = (usb_d_ep_cb_more_t)usb_d_dummy_cb_false;
    da92:	f8c4 30b8 	str.w	r3, [r4, #184]	; 0xb8
		usb_d_inst.ep[i].callbacks.xfer = (usb_d_ep_cb_xfer_t)usb_d_dummy_cb_false;
    da96:	f8c4 30bc 	str.w	r3, [r4, #188]	; 0xbc
		usb_d_inst.ep[i].callbacks.req  = (usb_d_ep_cb_setup_t)usb_d_dummy_cb_false;
    da9a:	f8c4 30d4 	str.w	r3, [r4, #212]	; 0xd4
		usb_d_inst.ep[i].callbacks.more = (usb_d_ep_cb_more_t)usb_d_dummy_cb_false;
    da9e:	f8c4 30d8 	str.w	r3, [r4, #216]	; 0xd8
		usb_d_inst.ep[i].callbacks.xfer = (usb_d_ep_cb_xfer_t)usb_d_dummy_cb_false;
    daa2:	f8c4 30dc 	str.w	r3, [r4, #220]	; 0xdc
		usb_d_inst.ep[i].callbacks.req  = (usb_d_ep_cb_setup_t)usb_d_dummy_cb_false;
    daa6:	f8c4 30f4 	str.w	r3, [r4, #244]	; 0xf4
		usb_d_inst.ep[i].callbacks.more = (usb_d_ep_cb_more_t)usb_d_dummy_cb_false;
    daaa:	f8c4 30f8 	str.w	r3, [r4, #248]	; 0xf8
		usb_d_inst.ep[i].callbacks.xfer = (usb_d_ep_cb_xfer_t)usb_d_dummy_cb_false;
    daae:	f8c4 30fc 	str.w	r3, [r4, #252]	; 0xfc
		usb_d_inst.ep[i].xfer.hdr.ep    = 0xFF;
    dab2:	f884 2101 	strb.w	r2, [r4, #257]	; 0x101
    dab6:	f884 2121 	strb.w	r2, [r4, #289]	; 0x121
    daba:	f884 2141 	strb.w	r2, [r4, #321]	; 0x141
    dabe:	f884 2161 	strb.w	r2, [r4, #353]	; 0x161
    dac2:	f884 2181 	strb.w	r2, [r4, #385]	; 0x181
		usb_d_inst.ep[i].callbacks.req  = (usb_d_ep_cb_setup_t)usb_d_dummy_cb_false;
    dac6:	f8c4 3114 	str.w	r3, [r4, #276]	; 0x114
		usb_d_inst.ep[i].callbacks.more = (usb_d_ep_cb_more_t)usb_d_dummy_cb_false;
    daca:	f8c4 3118 	str.w	r3, [r4, #280]	; 0x118
		usb_d_inst.ep[i].callbacks.xfer = (usb_d_ep_cb_xfer_t)usb_d_dummy_cb_false;
    dace:	f8c4 311c 	str.w	r3, [r4, #284]	; 0x11c
		usb_d_inst.ep[i].callbacks.req  = (usb_d_ep_cb_setup_t)usb_d_dummy_cb_false;
    dad2:	f8c4 3134 	str.w	r3, [r4, #308]	; 0x134
		usb_d_inst.ep[i].callbacks.more = (usb_d_ep_cb_more_t)usb_d_dummy_cb_false;
    dad6:	f8c4 3138 	str.w	r3, [r4, #312]	; 0x138
		usb_d_inst.ep[i].callbacks.xfer = (usb_d_ep_cb_xfer_t)usb_d_dummy_cb_false;
    dada:	f8c4 313c 	str.w	r3, [r4, #316]	; 0x13c
		usb_d_inst.ep[i].callbacks.req  = (usb_d_ep_cb_setup_t)usb_d_dummy_cb_false;
    dade:	f8c4 3154 	str.w	r3, [r4, #340]	; 0x154
		usb_d_inst.ep[i].callbacks.more = (usb_d_ep_cb_more_t)usb_d_dummy_cb_false;
    dae2:	f8c4 3158 	str.w	r3, [r4, #344]	; 0x158
		usb_d_inst.ep[i].callbacks.xfer = (usb_d_ep_cb_xfer_t)usb_d_dummy_cb_false;
    dae6:	f8c4 315c 	str.w	r3, [r4, #348]	; 0x15c
		usb_d_inst.ep[i].callbacks.req  = (usb_d_ep_cb_setup_t)usb_d_dummy_cb_false;
    daea:	f8c4 3174 	str.w	r3, [r4, #372]	; 0x174
		usb_d_inst.ep[i].callbacks.more = (usb_d_ep_cb_more_t)usb_d_dummy_cb_false;
    daee:	f8c4 3178 	str.w	r3, [r4, #376]	; 0x178
		usb_d_inst.ep[i].callbacks.xfer = (usb_d_ep_cb_xfer_t)usb_d_dummy_cb_false;
    daf2:	f8c4 317c 	str.w	r3, [r4, #380]	; 0x17c
		usb_d_inst.ep[i].callbacks.req  = (usb_d_ep_cb_setup_t)usb_d_dummy_cb_false;
    daf6:	f8c4 3194 	str.w	r3, [r4, #404]	; 0x194
		usb_d_inst.ep[i].callbacks.more = (usb_d_ep_cb_more_t)usb_d_dummy_cb_false;
    dafa:	f8c4 3198 	str.w	r3, [r4, #408]	; 0x198
		usb_d_inst.ep[i].callbacks.xfer = (usb_d_ep_cb_xfer_t)usb_d_dummy_cb_false;
    dafe:	f8c4 319c 	str.w	r3, [r4, #412]	; 0x19c
	_usb_d_dev_register_ep_callback(USB_D_DEV_EP_CB_SETUP, (FUNC_PTR)usb_d_cb_trans_setup);
    db02:	f005 fa19 	bl	12f38 <_usb_d_dev_register_ep_callback>
	_usb_d_dev_register_ep_callback(USB_D_DEV_EP_CB_MORE, (FUNC_PTR)usb_d_cb_trans_more);
    db06:	4908      	ldr	r1, [pc, #32]	; (db28 <usb_d_init+0xfc>)
    db08:	2001      	movs	r0, #1
    db0a:	f005 fa15 	bl	12f38 <_usb_d_dev_register_ep_callback>
	_usb_d_dev_register_ep_callback(USB_D_DEV_EP_CB_DONE, (FUNC_PTR)_usb_d_cb_trans_done);
    db0e:	2002      	movs	r0, #2
    db10:	4906      	ldr	r1, [pc, #24]	; (db2c <usb_d_init+0x100>)
    db12:	f005 fa11 	bl	12f38 <_usb_d_dev_register_ep_callback>
	return ERR_NONE;
    db16:	2000      	movs	r0, #0
}
    db18:	bd10      	pop	{r4, pc}
    db1a:	bf00      	nop
    db1c:	20001d84 	.word	0x20001d84
    db20:	0000d805 	.word	0x0000d805
    db24:	0000d989 	.word	0x0000d989
    db28:	0000d809 	.word	0x0000d809
    db2c:	0000d84d 	.word	0x0000d84d

0000db30 <usb_d_register_callback>:
}

void usb_d_register_callback(const enum usb_d_cb_type type, const FUNC_PTR func)
{
	/* Directly uses device driver callback. */
	_usb_d_dev_register_callback(type, func);
    db30:	f005 b9f0 	b.w	12f14 <_usb_d_dev_register_callback>

0000db34 <usb_d_enable>:
}

int32_t usb_d_enable(void)
{
	return _usb_d_dev_enable();
    db34:	f004 bda8 	b.w	12688 <_usb_d_dev_enable>

0000db38 <usb_d_attach>:
	_usb_d_dev_disable();
}

void usb_d_attach(void)
{
	_usb_d_dev_attach();
    db38:	f004 bdd6 	b.w	126e8 <_usb_d_dev_attach>

0000db3c <usb_d_set_address>:
	return _usb_d_dev_get_uframe_n();
}

void usb_d_set_address(const uint8_t addr)
{
	_usb_d_dev_set_address(addr);
    db3c:	f004 bdde 	b.w	126fc <_usb_d_dev_set_address>

0000db40 <usb_d_ep0_init>:
{
	_usb_d_dev_send_remotewakeup();
}

int32_t usb_d_ep0_init(const uint8_t max_pkt_size)
{
    db40:	b570      	push	{r4, r5, r6, lr}
		if (usb_d_inst.ep[i].xfer.hdr.ep == ep) {
    db42:	4e25      	ldr	r6, [pc, #148]	; (dbd8 <usb_d_ep0_init+0x98>)
    db44:	7873      	ldrb	r3, [r6, #1]
    db46:	2b00      	cmp	r3, #0
    db48:	d043      	beq.n	dbd2 <usb_d_ep0_init+0x92>
    db4a:	f896 3021 	ldrb.w	r3, [r6, #33]	; 0x21
    db4e:	2b00      	cmp	r3, #0
    db50:	d03f      	beq.n	dbd2 <usb_d_ep0_init+0x92>
    db52:	f896 3041 	ldrb.w	r3, [r6, #65]	; 0x41
    db56:	2b00      	cmp	r3, #0
    db58:	d03b      	beq.n	dbd2 <usb_d_ep0_init+0x92>
    db5a:	f896 3061 	ldrb.w	r3, [r6, #97]	; 0x61
    db5e:	b3c3      	cbz	r3, dbd2 <usb_d_ep0_init+0x92>
    db60:	f896 3081 	ldrb.w	r3, [r6, #129]	; 0x81
    db64:	b3ab      	cbz	r3, dbd2 <usb_d_ep0_init+0x92>
    db66:	f896 30a1 	ldrb.w	r3, [r6, #161]	; 0xa1
    db6a:	b393      	cbz	r3, dbd2 <usb_d_ep0_init+0x92>
    db6c:	f896 30c1 	ldrb.w	r3, [r6, #193]	; 0xc1
    db70:	b37b      	cbz	r3, dbd2 <usb_d_ep0_init+0x92>
    db72:	f896 30e1 	ldrb.w	r3, [r6, #225]	; 0xe1
    db76:	b363      	cbz	r3, dbd2 <usb_d_ep0_init+0x92>
    db78:	f896 3101 	ldrb.w	r3, [r6, #257]	; 0x101
    db7c:	b34b      	cbz	r3, dbd2 <usb_d_ep0_init+0x92>
    db7e:	f896 3121 	ldrb.w	r3, [r6, #289]	; 0x121
    db82:	b333      	cbz	r3, dbd2 <usb_d_ep0_init+0x92>
    db84:	f896 3141 	ldrb.w	r3, [r6, #321]	; 0x141
    db88:	b31b      	cbz	r3, dbd2 <usb_d_ep0_init+0x92>
    db8a:	f896 3161 	ldrb.w	r3, [r6, #353]	; 0x161
    db8e:	b303      	cbz	r3, dbd2 <usb_d_ep0_init+0x92>
    db90:	f896 3181 	ldrb.w	r3, [r6, #385]	; 0x181
    db94:	b1eb      	cbz	r3, dbd2 <usb_d_ep0_init+0x92>
    db96:	4633      	mov	r3, r6
    db98:	2400      	movs	r4, #0
    db9a:	7859      	ldrb	r1, [r3, #1]
    db9c:	29ff      	cmp	r1, #255	; 0xff
    db9e:	d00a      	beq.n	dbb6 <usb_d_ep0_init+0x76>
		if (usb_d_inst.ep[i].xfer.hdr.type == USB_EP_XTYPE_CTRL
    dba0:	781d      	ldrb	r5, [r3, #0]
    dba2:	3320      	adds	r3, #32
    dba4:	b90d      	cbnz	r5, dbaa <usb_d_ep0_init+0x6a>
		    && (ep & USB_EP_N_MASK) == usb_d_inst.ep[i].xfer.hdr.ep) {
    dba6:	290f      	cmp	r1, #15
    dba8:	d005      	beq.n	dbb6 <usb_d_ep0_init+0x76>
    dbaa:	3401      	adds	r4, #1
	for (i = 0; i < CONF_USB_D_NUM_EP_SP; i++) {
    dbac:	2c0d      	cmp	r4, #13
    dbae:	d1f4      	bne.n	db9a <usb_d_ep0_init+0x5a>
	if (ep_index >= 0) {
		return -USB_ERR_REDO;
	} else {
		ep_index = _usb_d_find_ep(0xFF);
		if (ep_index < 0) {
			return -USB_ERR_ALLOC_FAIL;
    dbb0:	f06f 0014 	mvn.w	r0, #20
    dbb4:	bd70      	pop	{r4, r5, r6, pc}
		}
		ept = &usb_d_inst.ep[ep_index];
	}
	rc = _usb_d_dev_ep_init(ep, attr, max_pkt_size);
    dbb6:	2100      	movs	r1, #0
    dbb8:	4602      	mov	r2, r0
    dbba:	4608      	mov	r0, r1
    dbbc:	f004 fda4 	bl	12708 <_usb_d_dev_ep_init>
	if (rc < 0) {
    dbc0:	2800      	cmp	r0, #0
    dbc2:	db05      	blt.n	dbd0 <usb_d_ep0_init+0x90>
		return rc;
	}
	ept->xfer.hdr.ep   = ep;
    dbc4:	0164      	lsls	r4, r4, #5
    dbc6:	1933      	adds	r3, r6, r4
    dbc8:	2000      	movs	r0, #0
    dbca:	7058      	strb	r0, [r3, #1]
	ept->xfer.hdr.type = attr & USB_EP_XTYPE_MASK;
    dbcc:	5530      	strb	r0, [r6, r4]
    dbce:	bd70      	pop	{r4, r5, r6, pc}
}
    dbd0:	bd70      	pop	{r4, r5, r6, pc}
		return -USB_ERR_REDO;
    dbd2:	f06f 0013 	mvn.w	r0, #19
	return usb_d_ep_init(0, USB_EP_XTYPE_CTRL, max_pkt_size);
    dbd6:	bd70      	pop	{r4, r5, r6, pc}
    dbd8:	20001d84 	.word	0x20001d84

0000dbdc <usb_d_ep_init>:
{
    dbdc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    dbde:	4c19      	ldr	r4, [pc, #100]	; (dc44 <usb_d_ep_init+0x68>)
		    && (ep & USB_EP_N_MASK) == usb_d_inst.ep[i].xfer.hdr.ep) {
    dbe0:	f000 0c0f 	and.w	ip, r0, #15
    dbe4:	f504 7ed0 	add.w	lr, r4, #416	; 0x1a0
{
    dbe8:	4627      	mov	r7, r4
    dbea:	4623      	mov	r3, r4
		if (usb_d_inst.ep[i].xfer.hdr.ep == ep) {
    dbec:	785d      	ldrb	r5, [r3, #1]
    dbee:	42a8      	cmp	r0, r5
    dbf0:	d024      	beq.n	dc3c <usb_d_ep_init+0x60>
		if (usb_d_inst.ep[i].xfer.hdr.type == USB_EP_XTYPE_CTRL
    dbf2:	781e      	ldrb	r6, [r3, #0]
    dbf4:	3320      	adds	r3, #32
    dbf6:	b90e      	cbnz	r6, dbfc <usb_d_ep_init+0x20>
		    && (ep & USB_EP_N_MASK) == usb_d_inst.ep[i].xfer.hdr.ep) {
    dbf8:	4565      	cmp	r5, ip
    dbfa:	d01f      	beq.n	dc3c <usb_d_ep_init+0x60>
	for (i = 0; i < CONF_USB_D_NUM_EP_SP; i++) {
    dbfc:	459e      	cmp	lr, r3
    dbfe:	d1f5      	bne.n	dbec <usb_d_ep_init+0x10>
    dc00:	2500      	movs	r5, #0
		if (usb_d_inst.ep[i].xfer.hdr.ep == ep) {
    dc02:	7863      	ldrb	r3, [r4, #1]
    dc04:	2bff      	cmp	r3, #255	; 0xff
    dc06:	d00a      	beq.n	dc1e <usb_d_ep_init+0x42>
		if (usb_d_inst.ep[i].xfer.hdr.type == USB_EP_XTYPE_CTRL
    dc08:	7826      	ldrb	r6, [r4, #0]
    dc0a:	3420      	adds	r4, #32
    dc0c:	b90e      	cbnz	r6, dc12 <usb_d_ep_init+0x36>
		    && (ep & USB_EP_N_MASK) == usb_d_inst.ep[i].xfer.hdr.ep) {
    dc0e:	2b0f      	cmp	r3, #15
    dc10:	d005      	beq.n	dc1e <usb_d_ep_init+0x42>
    dc12:	3501      	adds	r5, #1
	for (i = 0; i < CONF_USB_D_NUM_EP_SP; i++) {
    dc14:	2d0d      	cmp	r5, #13
    dc16:	d1f4      	bne.n	dc02 <usb_d_ep_init+0x26>
			return -USB_ERR_ALLOC_FAIL;
    dc18:	f06f 0014 	mvn.w	r0, #20
    dc1c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    dc1e:	460e      	mov	r6, r1
    dc20:	4604      	mov	r4, r0
	rc = _usb_d_dev_ep_init(ep, attr, max_pkt_size);
    dc22:	f004 fd71 	bl	12708 <_usb_d_dev_ep_init>
	if (rc < 0) {
    dc26:	2800      	cmp	r0, #0
    dc28:	db07      	blt.n	dc3a <usb_d_ep_init+0x5e>
	ept->xfer.hdr.ep   = ep;
    dc2a:	016d      	lsls	r5, r5, #5
    dc2c:	197b      	adds	r3, r7, r5
	ept->xfer.hdr.type = attr & USB_EP_XTYPE_MASK;
    dc2e:	f006 0603 	and.w	r6, r6, #3
    dc32:	557e      	strb	r6, [r7, r5]
	ept->xfer.hdr.ep   = ep;
    dc34:	705c      	strb	r4, [r3, #1]
	return ERR_NONE;
    dc36:	2000      	movs	r0, #0
    dc38:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
}
    dc3a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		return -USB_ERR_REDO;
    dc3c:	f06f 0013 	mvn.w	r0, #19
    dc40:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    dc42:	bf00      	nop
    dc44:	20001d84 	.word	0x20001d84

0000dc48 <usb_d_ep_deinit>:

void usb_d_ep_deinit(const uint8_t ep)
{
    dc48:	b570      	push	{r4, r5, r6, lr}
    dc4a:	4e0c      	ldr	r6, [pc, #48]	; (dc7c <usb_d_ep_deinit+0x34>)
		    && (ep & USB_EP_N_MASK) == usb_d_inst.ep[i].xfer.hdr.ep) {
    dc4c:	f000 050f 	and.w	r5, r0, #15
    dc50:	4633      	mov	r3, r6
{
    dc52:	2400      	movs	r4, #0
		if (usb_d_inst.ep[i].xfer.hdr.ep == ep) {
    dc54:	785a      	ldrb	r2, [r3, #1]
    dc56:	4290      	cmp	r0, r2
    dc58:	d008      	beq.n	dc6c <usb_d_ep_deinit+0x24>
		if (usb_d_inst.ep[i].xfer.hdr.type == USB_EP_XTYPE_CTRL
    dc5a:	7819      	ldrb	r1, [r3, #0]
    dc5c:	3320      	adds	r3, #32
    dc5e:	b909      	cbnz	r1, dc64 <usb_d_ep_deinit+0x1c>
		    && (ep & USB_EP_N_MASK) == usb_d_inst.ep[i].xfer.hdr.ep) {
    dc60:	42aa      	cmp	r2, r5
    dc62:	d003      	beq.n	dc6c <usb_d_ep_deinit+0x24>
    dc64:	3401      	adds	r4, #1
	for (i = 0; i < CONF_USB_D_NUM_EP_SP; i++) {
    dc66:	2c0d      	cmp	r4, #13
    dc68:	d1f4      	bne.n	dc54 <usb_d_ep_deinit+0xc>
    dc6a:	bd70      	pop	{r4, r5, r6, pc}
	struct usb_d_ep *ept      = &usb_d_inst.ep[ep_index];
	if (ep_index < 0) {
		return;
	}
	_usb_d_dev_ep_deinit(ep);
	ept->xfer.hdr.ep = 0xFF;
    dc6c:	eb06 1444 	add.w	r4, r6, r4, lsl #5
	_usb_d_dev_ep_deinit(ep);
    dc70:	f004 fdbc 	bl	127ec <_usb_d_dev_ep_deinit>
	ept->xfer.hdr.ep = 0xFF;
    dc74:	23ff      	movs	r3, #255	; 0xff
    dc76:	7063      	strb	r3, [r4, #1]
    dc78:	bd70      	pop	{r4, r5, r6, pc}
    dc7a:	bf00      	nop
    dc7c:	20001d84 	.word	0x20001d84

0000dc80 <usb_d_ep_enable>:
}

int32_t usb_d_ep_enable(const uint8_t ep)
{
    dc80:	b570      	push	{r4, r5, r6, lr}
    dc82:	4d13      	ldr	r5, [pc, #76]	; (dcd0 <usb_d_ep_enable+0x50>)
		    && (ep & USB_EP_N_MASK) == usb_d_inst.ep[i].xfer.hdr.ep) {
    dc84:	f000 060f 	and.w	r6, r0, #15
    dc88:	462b      	mov	r3, r5
{
    dc8a:	2200      	movs	r2, #0
		if (usb_d_inst.ep[i].xfer.hdr.ep == ep) {
    dc8c:	7859      	ldrb	r1, [r3, #1]
    dc8e:	4288      	cmp	r0, r1
    dc90:	d00a      	beq.n	dca8 <usb_d_ep_enable+0x28>
		if (usb_d_inst.ep[i].xfer.hdr.type == USB_EP_XTYPE_CTRL
    dc92:	781c      	ldrb	r4, [r3, #0]
    dc94:	3320      	adds	r3, #32
    dc96:	b90c      	cbnz	r4, dc9c <usb_d_ep_enable+0x1c>
		    && (ep & USB_EP_N_MASK) == usb_d_inst.ep[i].xfer.hdr.ep) {
    dc98:	42b1      	cmp	r1, r6
    dc9a:	d015      	beq.n	dcc8 <usb_d_ep_enable+0x48>
    dc9c:	3201      	adds	r2, #1
	for (i = 0; i < CONF_USB_D_NUM_EP_SP; i++) {
    dc9e:	2a0d      	cmp	r2, #13
    dca0:	d1f4      	bne.n	dc8c <usb_d_ep_enable+0xc>
	int8_t           ep_index = _usb_d_find_ep(ep);
	struct usb_d_ep *ept      = &usb_d_inst.ep[ep_index];
	int32_t          rc;
	if (ep_index < 0) {
		return -USB_ERR_PARAM;
    dca2:	f06f 0011 	mvn.w	r0, #17
    dca6:	bd70      	pop	{r4, r5, r6, pc}
	}
	ept->xfer.hdr.state = (ept->xfer.hdr.type == USB_EP_XTYPE_CTRL) ? USB_EP_S_X_SETUP : USB_EP_S_IDLE;
    dca8:	0152      	lsls	r2, r2, #5
    dcaa:	5cab      	ldrb	r3, [r5, r2]
    dcac:	2b00      	cmp	r3, #0
    dcae:	bf14      	ite	ne
    dcb0:	2301      	movne	r3, #1
    dcb2:	2302      	moveq	r3, #2
    dcb4:	4415      	add	r5, r2
    dcb6:	70ab      	strb	r3, [r5, #2]
	rc                  = _usb_d_dev_ep_enable(ep);
    dcb8:	f004 fe2a 	bl	12910 <_usb_d_dev_ep_enable>
	if (rc < 0) {
    dcbc:	2800      	cmp	r0, #0
    dcbe:	db00      	blt.n	dcc2 <usb_d_ep_enable+0x42>
		ept->xfer.hdr.state = USB_EP_S_DISABLED;
	}
	return rc;
}
    dcc0:	bd70      	pop	{r4, r5, r6, pc}
		ept->xfer.hdr.state = USB_EP_S_DISABLED;
    dcc2:	2300      	movs	r3, #0
    dcc4:	70ab      	strb	r3, [r5, #2]
    dcc6:	bd70      	pop	{r4, r5, r6, pc}
    dcc8:	0152      	lsls	r2, r2, #5
	ept->xfer.hdr.state = (ept->xfer.hdr.type == USB_EP_XTYPE_CTRL) ? USB_EP_S_X_SETUP : USB_EP_S_IDLE;
    dcca:	2302      	movs	r3, #2
    dccc:	e7f2      	b.n	dcb4 <usb_d_ep_enable+0x34>
    dcce:	bf00      	nop
    dcd0:	20001d84 	.word	0x20001d84

0000dcd4 <usb_d_ep_transfer>:
	}
	return usb_d_inst.ep[ep_index].xfer.req;
}

int32_t usb_d_ep_transfer(const struct usb_d_transfer *xfer)
{
    dcd4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    dcd8:	f8df 811c 	ldr.w	r8, [pc, #284]	; ddf8 <usb_d_ep_transfer+0x124>
	int8_t                ep_index = _usb_d_find_ep(xfer->ep);
    dcdc:	7a05      	ldrb	r5, [r0, #8]
{
    dcde:	b087      	sub	sp, #28
    dce0:	4643      	mov	r3, r8
		    && (ep & USB_EP_N_MASK) == usb_d_inst.ep[i].xfer.hdr.ep) {
    dce2:	f005 070f 	and.w	r7, r5, #15
	int8_t                ep_index = _usb_d_find_ep(xfer->ep);
    dce6:	2200      	movs	r2, #0
		if (usb_d_inst.ep[i].xfer.hdr.ep == ep) {
    dce8:	7859      	ldrb	r1, [r3, #1]
    dcea:	428d      	cmp	r5, r1
    dcec:	d00c      	beq.n	dd08 <usb_d_ep_transfer+0x34>
		if (usb_d_inst.ep[i].xfer.hdr.type == USB_EP_XTYPE_CTRL
    dcee:	781c      	ldrb	r4, [r3, #0]
    dcf0:	3320      	adds	r3, #32
    dcf2:	b90c      	cbnz	r4, dcf8 <usb_d_ep_transfer+0x24>
		    && (ep & USB_EP_N_MASK) == usb_d_inst.ep[i].xfer.hdr.ep) {
    dcf4:	42b9      	cmp	r1, r7
    dcf6:	d007      	beq.n	dd08 <usb_d_ep_transfer+0x34>
    dcf8:	3201      	adds	r2, #1
	for (i = 0; i < CONF_USB_D_NUM_EP_SP; i++) {
    dcfa:	2a0d      	cmp	r2, #13
    dcfc:	d1f4      	bne.n	dce8 <usb_d_ep_transfer+0x14>
	int32_t               rc;
	volatile uint8_t      state;
	volatile hal_atomic_t flags;

	if (ep_index < 0) {
		return -USB_ERR_PARAM;
    dcfe:	f06f 0011 	mvn.w	r0, #17
		}
	}

	rc = _usb_d_trans(xfer->ep, dir, xfer->buf, len, zlp);
	return rc;
}
    dd02:	b007      	add	sp, #28
    dd04:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	state = ept->xfer.hdr.state;
    dd08:	0154      	lsls	r4, r2, #5
    dd0a:	4606      	mov	r6, r0
    dd0c:	eb08 0b04 	add.w	fp, r8, r4
	atomic_enter_critical(&flags);
    dd10:	a802      	add	r0, sp, #8
	bool                  dir = USB_EP_GET_DIR(xfer->ep), zlp = xfer->zlp;
    dd12:	f896 a009 	ldrb.w	sl, [r6, #9]
	uint32_t              len = xfer->size;
    dd16:	f8d6 9004 	ldr.w	r9, [r6, #4]
	atomic_enter_critical(&flags);
    dd1a:	f005 f92b 	bl	12f74 <atomic_enter_critical>
	state = ept->xfer.hdr.state;
    dd1e:	f89b 3002 	ldrb.w	r3, [fp, #2]
    dd22:	f88d 3007 	strb.w	r3, [sp, #7]
	if (state == USB_EP_S_IDLE) {
    dd26:	f89d 7007 	ldrb.w	r7, [sp, #7]
    dd2a:	b2ff      	uxtb	r7, r7
    dd2c:	2f01      	cmp	r7, #1
    dd2e:	d011      	beq.n	dd54 <usb_d_ep_transfer+0x80>
		atomic_leave_critical(&flags);
    dd30:	a802      	add	r0, sp, #8
    dd32:	f005 f927 	bl	12f84 <atomic_leave_critical>
		switch (state) {
    dd36:	f89d 3007 	ldrb.w	r3, [sp, #7]
    dd3a:	b2db      	uxtb	r3, r3
    dd3c:	2b05      	cmp	r3, #5
    dd3e:	d040      	beq.n	ddc2 <usb_d_ep_transfer+0xee>
    dd40:	2b06      	cmp	r3, #6
    dd42:	d022      	beq.n	dd8a <usb_d_ep_transfer+0xb6>
			return USB_BUSY;
    dd44:	2b00      	cmp	r3, #0
    dd46:	bf0c      	ite	eq
    dd48:	f06f 0012 	mvneq.w	r0, #18
    dd4c:	2001      	movne	r0, #1
}
    dd4e:	b007      	add	sp, #28
    dd50:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		ept->xfer.hdr.state = USB_EP_S_X_DATA;
    dd54:	2303      	movs	r3, #3
		atomic_leave_critical(&flags);
    dd56:	a802      	add	r0, sp, #8
		ept->xfer.hdr.state = USB_EP_S_X_DATA;
    dd58:	f88b 3002 	strb.w	r3, [fp, #2]
		atomic_leave_critical(&flags);
    dd5c:	f005 f912 	bl	12f84 <atomic_leave_critical>
	if (ept->xfer.hdr.type == USB_EP_XTYPE_CTRL) {
    dd60:	f818 2004 	ldrb.w	r2, [r8, r4]
    dd64:	b9b2      	cbnz	r2, dd94 <usb_d_ep_transfer+0xc0>
		uint16_t req_len = USB_GET_wLength(ept->xfer.req);
    dd66:	f89b 1013 	ldrb.w	r1, [fp, #19]
    dd6a:	f89b 3012 	ldrb.w	r3, [fp, #18]
    dd6e:	eb03 2301 	add.w	r3, r3, r1, lsl #8
    dd72:	b29b      	uxth	r3, r3
		if (req_len == 0) {
    dd74:	bb4b      	cbnz	r3, ddca <usb_d_ep_transfer+0xf6>
			ept->xfer.hdr.state = USB_EP_S_X_STATUS;
    dd76:	2204      	movs	r2, #4
    dd78:	f88b 2002 	strb.w	r2, [fp, #2]
	struct usb_d_transfer trans
    dd7c:	9304      	str	r3, [sp, #16]
    dd7e:	6832      	ldr	r2, [r6, #0]
	rc = _usb_d_trans(xfer->ep, dir, xfer->buf, len, zlp);
    dd80:	7a33      	ldrb	r3, [r6, #8]
	struct usb_d_transfer trans
    dd82:	9203      	str	r2, [sp, #12]
    dd84:	f043 0380 	orr.w	r3, r3, #128	; 0x80
    dd88:	e011      	b.n	ddae <usb_d_ep_transfer+0xda>
			return -USB_ERROR;
    dd8a:	f06f 000f 	mvn.w	r0, #15
}
    dd8e:	b007      	add	sp, #28
    dd90:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	rc = _usb_d_trans(xfer->ep, dir, xfer->buf, len, zlp);
    dd94:	f11a 0700 	adds.w	r7, sl, #0
	struct usb_d_transfer trans
    dd98:	6833      	ldr	r3, [r6, #0]
    dd9a:	9303      	str	r3, [sp, #12]
	rc = _usb_d_trans(xfer->ep, dir, xfer->buf, len, zlp);
    dd9c:	bf18      	it	ne
    dd9e:	2701      	movne	r7, #1
	struct usb_d_transfer trans
    dda0:	062a      	lsls	r2, r5, #24
    dda2:	f8cd 9010 	str.w	r9, [sp, #16]
	rc = _usb_d_trans(xfer->ep, dir, xfer->buf, len, zlp);
    dda6:	7a33      	ldrb	r3, [r6, #8]
	struct usb_d_transfer trans
    dda8:	d4ec      	bmi.n	dd84 <usb_d_ep_transfer+0xb0>
    ddaa:	f003 030f 	and.w	r3, r3, #15
	return _usb_d_dev_ep_trans(&trans);
    ddae:	a803      	add	r0, sp, #12
	struct usb_d_transfer trans
    ddb0:	f88d 3014 	strb.w	r3, [sp, #20]
    ddb4:	f88d 7015 	strb.w	r7, [sp, #21]
	return _usb_d_dev_ep_trans(&trans);
    ddb8:	f004 ff86 	bl	12cc8 <_usb_d_dev_ep_trans>
}
    ddbc:	b007      	add	sp, #28
    ddbe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			return USB_HALTED;
    ddc2:	2002      	movs	r0, #2
}
    ddc4:	b007      	add	sp, #28
    ddc6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			if (dir) {
    ddca:	f99b 100c 	ldrsb.w	r1, [fp, #12]
    ddce:	4599      	cmp	r9, r3
    ddd0:	464f      	mov	r7, r9
    ddd2:	bf28      	it	cs
    ddd4:	461f      	movcs	r7, r3
    ddd6:	2900      	cmp	r1, #0
    ddd8:	db05      	blt.n	dde6 <usb_d_ep_transfer+0x112>
	struct usb_d_transfer trans
    ddda:	6833      	ldr	r3, [r6, #0]
    dddc:	9704      	str	r7, [sp, #16]
    ddde:	9303      	str	r3, [sp, #12]
	rc = _usb_d_trans(xfer->ep, dir, xfer->buf, len, zlp);
    dde0:	4617      	mov	r7, r2
    dde2:	7a33      	ldrb	r3, [r6, #8]
    dde4:	e7e1      	b.n	ddaa <usb_d_ep_transfer+0xd6>
    dde6:	42bb      	cmp	r3, r7
	struct usb_d_transfer trans
    dde8:	6832      	ldr	r2, [r6, #0]
    ddea:	9704      	str	r7, [sp, #16]
    ddec:	9203      	str	r2, [sp, #12]
	rc = _usb_d_trans(xfer->ep, dir, xfer->buf, len, zlp);
    ddee:	bf94      	ite	ls
    ddf0:	2700      	movls	r7, #0
    ddf2:	2701      	movhi	r7, #1
    ddf4:	7a33      	ldrb	r3, [r6, #8]
    ddf6:	e7c5      	b.n	dd84 <usb_d_ep_transfer+0xb0>
    ddf8:	20001d84 	.word	0x20001d84

0000ddfc <usb_d_ep_abort>:

void usb_d_ep_abort(const uint8_t ep)
{
    ddfc:	b570      	push	{r4, r5, r6, lr}
    ddfe:	4e0d      	ldr	r6, [pc, #52]	; (de34 <usb_d_ep_abort+0x38>)
		    && (ep & USB_EP_N_MASK) == usb_d_inst.ep[i].xfer.hdr.ep) {
    de00:	f000 050f 	and.w	r5, r0, #15
    de04:	4633      	mov	r3, r6
{
    de06:	2400      	movs	r4, #0
		if (usb_d_inst.ep[i].xfer.hdr.ep == ep) {
    de08:	785a      	ldrb	r2, [r3, #1]
    de0a:	4290      	cmp	r0, r2
    de0c:	d008      	beq.n	de20 <usb_d_ep_abort+0x24>
		if (usb_d_inst.ep[i].xfer.hdr.type == USB_EP_XTYPE_CTRL
    de0e:	7819      	ldrb	r1, [r3, #0]
    de10:	3320      	adds	r3, #32
    de12:	b909      	cbnz	r1, de18 <usb_d_ep_abort+0x1c>
		    && (ep & USB_EP_N_MASK) == usb_d_inst.ep[i].xfer.hdr.ep) {
    de14:	42aa      	cmp	r2, r5
    de16:	d003      	beq.n	de20 <usb_d_ep_abort+0x24>
    de18:	3401      	adds	r4, #1
	for (i = 0; i < CONF_USB_D_NUM_EP_SP; i++) {
    de1a:	2c0d      	cmp	r4, #13
    de1c:	d1f4      	bne.n	de08 <usb_d_ep_abort+0xc>
    de1e:	bd70      	pop	{r4, r5, r6, pc}
	struct usb_d_ep *ept      = &usb_d_inst.ep[ep_index];
	if (ep_index < 0) {
		return;
	}
	_usb_d_dev_ep_abort(ep);
	ept->xfer.hdr.state  = USB_EP_S_IDLE;
    de20:	eb06 1444 	add.w	r4, r6, r4, lsl #5
	_usb_d_dev_ep_abort(ep);
    de24:	f005 f81e 	bl	12e64 <_usb_d_dev_ep_abort>
	ept->xfer.hdr.state  = USB_EP_S_IDLE;
    de28:	2201      	movs	r2, #1
	ept->xfer.hdr.status = USB_XFER_ABORT;
    de2a:	2304      	movs	r3, #4
	ept->xfer.hdr.state  = USB_EP_S_IDLE;
    de2c:	70a2      	strb	r2, [r4, #2]
	ept->xfer.hdr.status = USB_XFER_ABORT;
    de2e:	70e3      	strb	r3, [r4, #3]
    de30:	bd70      	pop	{r4, r5, r6, pc}
    de32:	bf00      	nop
    de34:	20001d84 	.word	0x20001d84

0000de38 <usb_d_ep_halt>:
	}
	return ERR_NONE;
}

int32_t usb_d_ep_halt(const uint8_t ep, const enum usb_ep_halt_ctrl ctrl)
{
    de38:	b570      	push	{r4, r5, r6, lr}
	if (ctrl == USB_EP_HALT_CLR) {
    de3a:	460c      	mov	r4, r1
    de3c:	b131      	cbz	r1, de4c <usb_d_ep_halt+0x14>
		return _usb_d_ep_halt_clr(ep);
	} else if (ctrl == USB_EP_HALT_SET) {
    de3e:	2901      	cmp	r1, #1
		return _usb_d_dev_ep_stall(ep, USB_EP_STALL_SET);
	} else {
		return _usb_d_dev_ep_stall(ep, USB_EP_STALL_GET);
    de40:	bf18      	it	ne
    de42:	2102      	movne	r1, #2
	}
}
    de44:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		return _usb_d_dev_ep_stall(ep, USB_EP_STALL_GET);
    de48:	f004 be82 	b.w	12b50 <_usb_d_dev_ep_stall>
    de4c:	4e15      	ldr	r6, [pc, #84]	; (dea4 <usb_d_ep_halt+0x6c>)
    de4e:	4605      	mov	r5, r0
    de50:	4633      	mov	r3, r6
		    && (ep & USB_EP_N_MASK) == usb_d_inst.ep[i].xfer.hdr.ep) {
    de52:	f000 000f 	and.w	r0, r0, #15
		if (usb_d_inst.ep[i].xfer.hdr.ep == ep) {
    de56:	785a      	ldrb	r2, [r3, #1]
    de58:	4295      	cmp	r5, r2
    de5a:	d00a      	beq.n	de72 <usb_d_ep_halt+0x3a>
		if (usb_d_inst.ep[i].xfer.hdr.type == USB_EP_XTYPE_CTRL
    de5c:	7819      	ldrb	r1, [r3, #0]
    de5e:	3320      	adds	r3, #32
    de60:	b909      	cbnz	r1, de66 <usb_d_ep_halt+0x2e>
		    && (ep & USB_EP_N_MASK) == usb_d_inst.ep[i].xfer.hdr.ep) {
    de62:	4282      	cmp	r2, r0
    de64:	d005      	beq.n	de72 <usb_d_ep_halt+0x3a>
    de66:	3401      	adds	r4, #1
	for (i = 0; i < CONF_USB_D_NUM_EP_SP; i++) {
    de68:	2c0d      	cmp	r4, #13
    de6a:	d1f4      	bne.n	de56 <usb_d_ep_halt+0x1e>
		return -USB_ERR_PARAM;
    de6c:	f06f 0011 	mvn.w	r0, #17
    de70:	bd70      	pop	{r4, r5, r6, pc}
	if (_usb_d_dev_ep_stall(ep, USB_EP_STALL_GET)) {
    de72:	2102      	movs	r1, #2
    de74:	4628      	mov	r0, r5
    de76:	f004 fe6b 	bl	12b50 <_usb_d_dev_ep_stall>
    de7a:	b900      	cbnz	r0, de7e <usb_d_ep_halt+0x46>
}
    de7c:	bd70      	pop	{r4, r5, r6, pc}
		rc = _usb_d_dev_ep_stall(ep, USB_EP_STALL_CLR);
    de7e:	2100      	movs	r1, #0
    de80:	4628      	mov	r0, r5
    de82:	f004 fe65 	bl	12b50 <_usb_d_dev_ep_stall>
		if (rc < 0) {
    de86:	2800      	cmp	r0, #0
    de88:	dbf8      	blt.n	de7c <usb_d_ep_halt+0x44>
		ept->xfer.hdr.state  = USB_EP_S_IDLE;
    de8a:	eb06 1444 	add.w	r4, r6, r4, lsl #5
		ept->xfer.hdr.status = USB_XFER_UNHALT;
    de8e:	2103      	movs	r1, #3
		ept->xfer.hdr.state  = USB_EP_S_IDLE;
    de90:	2301      	movs	r3, #1
    de92:	70a3      	strb	r3, [r4, #2]
		ept->callbacks.xfer(ep, USB_XFER_UNHALT, NULL);
    de94:	4628      	mov	r0, r5
		ept->xfer.hdr.status = USB_XFER_UNHALT;
    de96:	70e1      	strb	r1, [r4, #3]
		ept->callbacks.xfer(ep, USB_XFER_UNHALT, NULL);
    de98:	69e3      	ldr	r3, [r4, #28]
    de9a:	2200      	movs	r2, #0
    de9c:	4798      	blx	r3
	return ERR_NONE;
    de9e:	2000      	movs	r0, #0
    dea0:	bd70      	pop	{r4, r5, r6, pc}
    dea2:	bf00      	nop
    dea4:	20001d84 	.word	0x20001d84

0000dea8 <usb_d_ep_register_callback>:

void usb_d_ep_register_callback(const uint8_t ep, const enum usb_d_ep_cb_type type, const FUNC_PTR func)
{
    dea8:	b5f0      	push	{r4, r5, r6, r7, lr}
    deaa:	f8df e054 	ldr.w	lr, [pc, #84]	; df00 <usb_d_ep_register_callback+0x58>
		    && (ep & USB_EP_N_MASK) == usb_d_inst.ep[i].xfer.hdr.ep) {
    deae:	f000 070f 	and.w	r7, r0, #15
    deb2:	4673      	mov	r3, lr
{
    deb4:	2400      	movs	r4, #0
		if (usb_d_inst.ep[i].xfer.hdr.ep == ep) {
    deb6:	785d      	ldrb	r5, [r3, #1]
    deb8:	42a8      	cmp	r0, r5
    deba:	d008      	beq.n	dece <usb_d_ep_register_callback+0x26>
		if (usb_d_inst.ep[i].xfer.hdr.type == USB_EP_XTYPE_CTRL
    debc:	781e      	ldrb	r6, [r3, #0]
    debe:	3320      	adds	r3, #32
    dec0:	b90e      	cbnz	r6, dec6 <usb_d_ep_register_callback+0x1e>
		    && (ep & USB_EP_N_MASK) == usb_d_inst.ep[i].xfer.hdr.ep) {
    dec2:	42bd      	cmp	r5, r7
    dec4:	d003      	beq.n	dece <usb_d_ep_register_callback+0x26>
    dec6:	3401      	adds	r4, #1
	for (i = 0; i < CONF_USB_D_NUM_EP_SP; i++) {
    dec8:	2c0d      	cmp	r4, #13
    deca:	d1f4      	bne.n	deb6 <usb_d_ep_register_callback+0xe>
    decc:	bdf0      	pop	{r4, r5, r6, r7, pc}
	int8_t           ep_index = _usb_d_find_ep(ep);
	struct usb_d_ep *ept      = &usb_d_inst.ep[ep_index];
	FUNC_PTR         f        = func ? (FUNC_PTR)func : (FUNC_PTR)usb_d_dummy_cb_false;
    dece:	4b0b      	ldr	r3, [pc, #44]	; (defc <usb_d_ep_register_callback+0x54>)
    ded0:	2a00      	cmp	r2, #0
    ded2:	bf08      	it	eq
    ded4:	461a      	moveq	r2, r3
	if (ep_index < 0) {
		return;
	}
	switch (type) {
    ded6:	2901      	cmp	r1, #1
    ded8:	d003      	beq.n	dee2 <usb_d_ep_register_callback+0x3a>
    deda:	d30a      	bcc.n	def2 <usb_d_ep_register_callback+0x4a>
    dedc:	2902      	cmp	r1, #2
    dede:	d004      	beq.n	deea <usb_d_ep_register_callback+0x42>
    dee0:	bdf0      	pop	{r4, r5, r6, r7, pc}
	case USB_D_EP_CB_SETUP:
		ept->callbacks.req = (usb_d_ep_cb_setup_t)f;
		break;
	case USB_D_EP_CB_MORE:
		ept->callbacks.more = (usb_d_ep_cb_more_t)f;
    dee2:	eb0e 1444 	add.w	r4, lr, r4, lsl #5
    dee6:	61a2      	str	r2, [r4, #24]
		break;
    dee8:	bdf0      	pop	{r4, r5, r6, r7, pc}
	case USB_D_EP_CB_XFER:
		ept->callbacks.xfer = (usb_d_ep_cb_xfer_t)f;
    deea:	eb0e 1444 	add.w	r4, lr, r4, lsl #5
    deee:	61e2      	str	r2, [r4, #28]
    def0:	bdf0      	pop	{r4, r5, r6, r7, pc}
		ept->callbacks.req = (usb_d_ep_cb_setup_t)f;
    def2:	eb0e 1444 	add.w	r4, lr, r4, lsl #5
    def6:	6162      	str	r2, [r4, #20]
		break;
    def8:	bdf0      	pop	{r4, r5, r6, r7, pc}
    defa:	bf00      	nop
    defc:	0000d805 	.word	0x0000d805
    df00:	20001d84 	.word	0x20001d84

0000df04 <assert>:
/**
 * \brief Assert function
 */
void assert(const bool condition, const char *const file, const int line)
{
	if (!(condition)) {
    df04:	b900      	cbnz	r0, df08 <assert+0x4>
		__asm("BKPT #0");
    df06:	be00      	bkpt	0x0000
    df08:	4770      	bx	lr
    df0a:	bf00      	nop

0000df0c <list_insert_at_end>:

/**
 * \brief Insert an element at list end
 */
void list_insert_at_end(struct list_descriptor *const list, void *const element)
{
    df0c:	b570      	push	{r4, r5, r6, lr}
	struct list_element *it = list->head;
    df0e:	6804      	ldr	r4, [r0, #0]
{
    df10:	4606      	mov	r6, r0
    df12:	460d      	mov	r5, r1
	for (it = list->head; it; it = it->next) {
    df14:	b144      	cbz	r4, df28 <list_insert_at_end+0x1c>
		if (it == element) {
    df16:	428c      	cmp	r4, r1
    df18:	d015      	beq.n	df46 <list_insert_at_end+0x3a>
    df1a:	4623      	mov	r3, r4
    df1c:	e001      	b.n	df22 <list_insert_at_end+0x16>
    df1e:	429d      	cmp	r5, r3
    df20:	d011      	beq.n	df46 <list_insert_at_end+0x3a>
	for (it = list->head; it; it = it->next) {
    df22:	681b      	ldr	r3, [r3, #0]
    df24:	2b00      	cmp	r3, #0
    df26:	d1fa      	bne.n	df1e <list_insert_at_end+0x12>
    df28:	2001      	movs	r0, #1

	ASSERT(!is_list_element(list, element));
    df2a:	224f      	movs	r2, #79	; 0x4f
    df2c:	4908      	ldr	r1, [pc, #32]	; (df50 <list_insert_at_end+0x44>)
    df2e:	f7ff ffe9 	bl	df04 <assert>

	if (!list->head) {
    df32:	6833      	ldr	r3, [r6, #0]
    df34:	b90b      	cbnz	r3, df3a <list_insert_at_end+0x2e>
    df36:	e008      	b.n	df4a <list_insert_at_end+0x3e>
    df38:	461c      	mov	r4, r3
		list->head                             = (struct list_element *)element;
		((struct list_element *)element)->next = NULL;
		return;
	}

	while (it->next) {
    df3a:	6823      	ldr	r3, [r4, #0]
    df3c:	2b00      	cmp	r3, #0
    df3e:	d1fb      	bne.n	df38 <list_insert_at_end+0x2c>
		it = it->next;
	}
	it->next                               = (struct list_element *)element;
    df40:	6025      	str	r5, [r4, #0]
	((struct list_element *)element)->next = NULL;
    df42:	602b      	str	r3, [r5, #0]
    df44:	bd70      	pop	{r4, r5, r6, pc}
		if (it == element) {
    df46:	2000      	movs	r0, #0
    df48:	e7ef      	b.n	df2a <list_insert_at_end+0x1e>
		list->head                             = (struct list_element *)element;
    df4a:	6035      	str	r5, [r6, #0]
		((struct list_element *)element)->next = NULL;
    df4c:	602b      	str	r3, [r5, #0]
		return;
    df4e:	bd70      	pop	{r4, r5, r6, pc}
    df50:	00022e90 	.word	0x00022e90

0000df54 <_ZN9ClearCore12DigitalInOut11IsInHwFaultEv>:

    /**
        \copydoc Connector::IsInHwFault()
    **/
    bool IsInHwFault() override {
        return (volatile bool &)m_isInFault;
    df54:	f890 003d 	ldrb.w	r0, [r0, #61]	; 0x3d
    }
    df58:	4770      	bx	lr
    df5a:	bf00      	nop

0000df5c <_ZN9ClearCore21DigitalInOutAnalogOut4ModeEv>:
    /**
        \copydoc Connector::Mode
    **/
    virtual ConnectorModes Mode() override {
        return Connector::Mode();
    }
    df5c:	7980      	ldrb	r0, [r0, #6]
    df5e:	4770      	bx	lr

0000df60 <_ZN9ClearCore21DigitalInOutAnalogOut4TypeEv>:

        \return The type of the current connector.
    **/
    Connector::ConnectorTypes Type() override {
        return Connector::ANALOG_OUT_DIGITAL_IN_OUT_TYPE;
    }
    df60:	2004      	movs	r0, #4
    df62:	4770      	bx	lr

0000df64 <_ZN9ClearCore21DigitalInOutAnalogOut10IsWritableEv>:

    return (m_mode == newMode);
}

bool DigitalInOutAnalogOut::IsWritable() {
    return m_mode == OUTPUT_DIGITAL || m_mode == OUTPUT_ANALOG ||
    df64:	7980      	ldrb	r0, [r0, #6]
    df66:	1ec3      	subs	r3, r0, #3
    df68:	2b01      	cmp	r3, #1
    df6a:	bf83      	ittte	hi
    df6c:	3806      	subhi	r0, #6
    df6e:	fab0 f080 	clzhi	r0, r0
    df72:	0940      	lsrhi	r0, r0, #5
    df74:	2001      	movls	r0, #1
           m_mode == OUTPUT_PWM;
}
    df76:	4770      	bx	lr

0000df78 <_ZN9ClearCore21DigitalInOutAnalogOutC1ENS_13ShiftRegister5MasksEPK15PeripheralRouteS5_S5_b>:
DigitalInOutAnalogOut::DigitalInOutAnalogOut(
    df78:	b530      	push	{r4, r5, lr}
    df7a:	b083      	sub	sp, #12
    df7c:	f89d 401c 	ldrb.w	r4, [sp, #28]
    df80:	9d06      	ldr	r5, [sp, #24]
      m_dacSpan(DAC_DEFAULT_SPAN) {}
    df82:	9400      	str	r4, [sp, #0]
DigitalInOutAnalogOut::DigitalInOutAnalogOut(
    df84:	4604      	mov	r4, r0
      m_dacSpan(DAC_DEFAULT_SPAN) {}
    df86:	f000 fcfd 	bl	e984 <_ZN9ClearCore12DigitalInOutC1ENS_13ShiftRegister5MasksEPK15PeripheralRouteS5_b>
      m_analogPort(outputAnalogInfo->gpioPort),
    df8a:	f995 3001 	ldrsb.w	r3, [r5, #1]
      m_dacSpan(DAC_DEFAULT_SPAN) {}
    df8e:	4a05      	ldr	r2, [pc, #20]	; (dfa4 <_ZN9ClearCore21DigitalInOutAnalogOutC1ENS_13ShiftRegister5MasksEPK15PeripheralRouteS5_S5_b+0x2c>)
      m_analogPort(outputAnalogInfo->gpioPort),
    df90:	6623      	str	r3, [r4, #96]	; 0x60
      m_dacSpan(DAC_DEFAULT_SPAN) {}
    df92:	6022      	str	r2, [r4, #0]
      m_analogDataBit(outputAnalogInfo->gpioPin),
    df94:	78aa      	ldrb	r2, [r5, #2]
      m_dacSpan(DAC_DEFAULT_SPAN) {}
    df96:	4b04      	ldr	r3, [pc, #16]	; (dfa8 <_ZN9ClearCore21DigitalInOutAnalogOutC1ENS_13ShiftRegister5MasksEPK15PeripheralRouteS5_S5_b+0x30>)
      m_analogDataBit(outputAnalogInfo->gpioPin),
    df98:	6662      	str	r2, [r4, #100]	; 0x64
      m_dacSpan(DAC_DEFAULT_SPAN) {}
    df9a:	4620      	mov	r0, r4
    df9c:	66a3      	str	r3, [r4, #104]	; 0x68
    df9e:	b003      	add	sp, #12
    dfa0:	bd30      	pop	{r4, r5, pc}
    dfa2:	bf00      	nop
    dfa4:	00022eb8 	.word	0x00022eb8
    dfa8:	06a40000 	.word	0x06a40000

0000dfac <_ZN9ClearCore21DigitalInOutAnalogOut13DacInitializeEv>:
}

/**
    One-time DAC Configuration
**/
void DigitalInOutAnalogOut::DacInitialize() {
    dfac:	b538      	push	{r3, r4, r5, lr}
    // Give the DAC a clock
    // The DAC will misbehave if clocked at more than 100 MHz
    SET_CLOCK_SOURCE(DAC_GCLK_ID, 4);
    dfae:	4a3a      	ldr	r2, [pc, #232]	; (e098 <_ZN9ClearCore21DigitalInOutAnalogOut13DacInitializeEv+0xec>)
    dfb0:	f8d2 3128 	ldr.w	r3, [r2, #296]	; 0x128
    dfb4:	f36f 1386 	bfc	r3, #6, #1
void DigitalInOutAnalogOut::DacInitialize() {
    dfb8:	4604      	mov	r4, r0
    SET_CLOCK_SOURCE(DAC_GCLK_ID, 4);
    dfba:	f8c2 3128 	str.w	r3, [r2, #296]	; 0x128
    dfbe:	f8d2 3128 	ldr.w	r3, [r2, #296]	; 0x128
    dfc2:	065d      	lsls	r5, r3, #25
    dfc4:	d4fb      	bmi.n	dfbe <_ZN9ClearCore21DigitalInOutAnalogOut13DacInitializeEv+0x12>
    dfc6:	f8d2 3128 	ldr.w	r3, [r2, #296]	; 0x128
    dfca:	4933      	ldr	r1, [pc, #204]	; (e098 <_ZN9ClearCore21DigitalInOutAnalogOut13DacInitializeEv+0xec>)
    dfcc:	2004      	movs	r0, #4
    dfce:	f360 0303 	bfi	r3, r0, #0, #4
    dfd2:	f8c2 3128 	str.w	r3, [r2, #296]	; 0x128
    dfd6:	f8d2 3128 	ldr.w	r3, [r2, #296]	; 0x128
    dfda:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    dfde:	f8c2 3128 	str.w	r3, [r2, #296]	; 0x128
    dfe2:	684b      	ldr	r3, [r1, #4]
    dfe4:	06d8      	lsls	r0, r3, #27
    dfe6:	d4fc      	bmi.n	dfe2 <_ZN9ClearCore21DigitalInOutAnalogOut13DacInitializeEv+0x36>

    // Set the supply controller's internal bandgap reference
    SUPC->VREF.bit.SEL = SUPC_VREF_SEL_2V5_Val;
    dfe8:	4a2c      	ldr	r2, [pc, #176]	; (e09c <_ZN9ClearCore21DigitalInOutAnalogOut13DacInitializeEv+0xf0>)

    // Enables the peripheral clock to the DAC
    CLOCK_ENABLE(APBDMASK, DAC_);
    dfea:	492d      	ldr	r1, [pc, #180]	; (e0a0 <_ZN9ClearCore21DigitalInOutAnalogOut13DacInitializeEv+0xf4>)
    SUPC->VREF.bit.SEL = SUPC_VREF_SEL_2V5_Val;
    dfec:	69d0      	ldr	r0, [r2, #28]

    // Reset the DAC module
    DAC->CTRLA.bit.SWRST = 1;
    dfee:	4b2d      	ldr	r3, [pc, #180]	; (e0a4 <_ZN9ClearCore21DigitalInOutAnalogOut13DacInitializeEv+0xf8>)
    SUPC->VREF.bit.SEL = SUPC_VREF_SEL_2V5_Val;
    dff0:	2507      	movs	r5, #7
    dff2:	f365 4013 	bfi	r0, r5, #16, #4
    dff6:	61d0      	str	r0, [r2, #28]
    CLOCK_ENABLE(APBDMASK, DAC_);
    dff8:	6a0a      	ldr	r2, [r1, #32]
    dffa:	f442 7200 	orr.w	r2, r2, #512	; 0x200
    dffe:	620a      	str	r2, [r1, #32]
    DAC->CTRLA.bit.SWRST = 1;
    e000:	781a      	ldrb	r2, [r3, #0]
    e002:	f042 0201 	orr.w	r2, r2, #1
    e006:	701a      	strb	r2, [r3, #0]
    SYNCBUSY_WAIT(DAC, DAC_SYNCBUSY_SWRST);
    e008:	689a      	ldr	r2, [r3, #8]
    e00a:	07d2      	lsls	r2, r2, #31
    e00c:	d4fc      	bmi.n	e008 <_ZN9ClearCore21DigitalInOutAnalogOut13DacInitializeEv+0x5c>

    // Use differential mode
    DAC->CTRLB.bit.DIFF = 1;
    e00e:	785a      	ldrb	r2, [r3, #1]
    e010:	f042 0201 	orr.w	r2, r2, #1
    e014:	705a      	strb	r2, [r3, #1]

    // Set to internal bandgap reference
    DAC->CTRLB.bit.REFSEL = DAC_CTRLB_REFSEL_INTREF_Val;
    e016:	785a      	ldrb	r2, [r3, #1]
    e018:	f042 0206 	orr.w	r2, r2, #6
    e01c:	705a      	strb	r2, [r3, #1]

    // Enable the DAC
    DAC->DACCTRL[0].bit.ENABLE = 1;
    e01e:	899a      	ldrh	r2, [r3, #12]
    e020:	f042 0202 	orr.w	r2, r2, #2
    e024:	819a      	strh	r2, [r3, #12]
    // Set refresh rate to (5 x 30) = 150 us
    DAC->DACCTRL[0].bit.REFRESH = 0x5;
    e026:	899a      	ldrh	r2, [r3, #12]
    e028:	2105      	movs	r1, #5
    e02a:	f361 220b 	bfi	r2, r1, #8, #4
    e02e:	819a      	strh	r2, [r3, #12]
    // Current control: CC12M (6 MHz < GCLK_DAC <= 12 MHz)
    DAC->DACCTRL[0].bit.CCTRL = DAC_DACCTRL_CCTRL_CC12M_Val;
    e030:	899a      	ldrh	r2, [r3, #12]
    e032:	2102      	movs	r1, #2
    e034:	f361 0283 	bfi	r2, r1, #2, #2
    e038:	819a      	strh	r2, [r3, #12]

/**
    Write a value to the DAC DATA register.
**/
void DigitalInOutAnalogOut::DacRegisterWrite(uint16_t value) {
    if (DAC->DATA[0].reg != value) {
    e03a:	8a1b      	ldrh	r3, [r3, #16]
    e03c:	b29b      	uxth	r3, r3
    e03e:	bb23      	cbnz	r3, e08a <_ZN9ClearCore21DigitalInOutAnalogOut13DacInitializeEv+0xde>
    m_dacZero = NvmMgr.Int16(NvmManager::NVM_LOC_DAC_ZERO);
    e040:	4b19      	ldr	r3, [pc, #100]	; (e0a8 <_ZN9ClearCore21DigitalInOutAnalogOut13DacInitializeEv+0xfc>)
    e042:	681d      	ldr	r5, [r3, #0]
    e044:	f44f 71ee 	mov.w	r1, #476	; 0x1dc
    e048:	4628      	mov	r0, r5
    e04a:	f7fc fc21 	bl	a890 <_ZN9ClearCore10NvmManager5Int16ENS0_12NvmLocationsE>
    m_dacSpan = NvmMgr.Int16(NvmManager::NVM_LOC_DAC_SPAN);
    e04e:	f44f 71ef 	mov.w	r1, #478	; 0x1de
    m_dacZero = NvmMgr.Int16(NvmManager::NVM_LOC_DAC_ZERO);
    e052:	f8a4 0068 	strh.w	r0, [r4, #104]	; 0x68
    m_dacSpan = NvmMgr.Int16(NvmManager::NVM_LOC_DAC_SPAN);
    e056:	4628      	mov	r0, r5
    e058:	f7fc fc1a 	bl	a890 <_ZN9ClearCore10NvmManager5Int16ENS0_12NvmLocationsE>
    if (m_dacZero > DAC_MAX_VALUE) {
    e05c:	f8b4 3068 	ldrh.w	r3, [r4, #104]	; 0x68
    m_dacSpan = NvmMgr.Int16(NvmManager::NVM_LOC_DAC_SPAN);
    e060:	b280      	uxth	r0, r0
    if (m_dacZero > DAC_MAX_VALUE) {
    e062:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
    m_dacSpan = NvmMgr.Int16(NvmManager::NVM_LOC_DAC_SPAN);
    e066:	f8a4 006a 	strh.w	r0, [r4, #106]	; 0x6a
    if (m_dacZero > DAC_MAX_VALUE) {
    e06a:	461a      	mov	r2, r3
    e06c:	db03      	blt.n	e076 <_ZN9ClearCore21DigitalInOutAnalogOut13DacInitializeEv+0xca>
        m_dacZero = 0;
    e06e:	2300      	movs	r3, #0
    e070:	461a      	mov	r2, r3
    e072:	f8a4 3068 	strh.w	r3, [r4, #104]	; 0x68
    if (m_dacZero + m_dacSpan > DAC_MAX_VALUE) {
    e076:	4410      	add	r0, r2
    e078:	f5b0 6f00 	cmp.w	r0, #2048	; 0x800
    e07c:	db04      	blt.n	e088 <_ZN9ClearCore21DigitalInOutAnalogOut13DacInitializeEv+0xdc>
        m_dacSpan = DAC_DEFAULT_SPAN - m_dacZero;
    e07e:	f5c3 63d4 	rsb	r3, r3, #1696	; 0x6a0
    e082:	3304      	adds	r3, #4
    e084:	f8a4 306a 	strh.w	r3, [r4, #106]	; 0x6a
    e088:	bd38      	pop	{r3, r4, r5, pc}
        SYNCBUSY_WAIT(DAC, DAC_SYNCBUSY_DATA0);
    e08a:	4a06      	ldr	r2, [pc, #24]	; (e0a4 <_ZN9ClearCore21DigitalInOutAnalogOut13DacInitializeEv+0xf8>)
    e08c:	6893      	ldr	r3, [r2, #8]
    e08e:	f013 0304 	ands.w	r3, r3, #4
    e092:	d1fb      	bne.n	e08c <_ZN9ClearCore21DigitalInOutAnalogOut13DacInitializeEv+0xe0>
        DAC->DATA[0].reg = value;
    e094:	8213      	strh	r3, [r2, #16]
    e096:	e7d3      	b.n	e040 <_ZN9ClearCore21DigitalInOutAnalogOut13DacInitializeEv+0x94>
    e098:	40001c00 	.word	0x40001c00
    e09c:	40001800 	.word	0x40001800
    e0a0:	40000800 	.word	0x40000800
    e0a4:	43002400 	.word	0x43002400
    e0a8:	20001d10 	.word	0x20001d10

0000e0ac <_ZN9ClearCore21DigitalInOutAnalogOut9DacEnableEv>:
void DigitalInOutAnalogOut::DacEnable() {
    e0ac:	b470      	push	{r4, r5, r6}
    if (DAC->DATA[0].reg != value) {
    e0ae:	4a2e      	ldr	r2, [pc, #184]	; (e168 <_ZN9ClearCore21DigitalInOutAnalogOut9DacEnableEv+0xbc>)
    DacRegisterWrite(m_dacZero);
    e0b0:	f8b0 1068 	ldrh.w	r1, [r0, #104]	; 0x68
    if (DAC->DATA[0].reg != value) {
    e0b4:	8a13      	ldrh	r3, [r2, #16]
    e0b6:	b29b      	uxth	r3, r3
    e0b8:	4299      	cmp	r1, r3
    e0ba:	d003      	beq.n	e0c4 <_ZN9ClearCore21DigitalInOutAnalogOut9DacEnableEv+0x18>
        SYNCBUSY_WAIT(DAC, DAC_SYNCBUSY_DATA0);
    e0bc:	6893      	ldr	r3, [r2, #8]
    e0be:	075d      	lsls	r5, r3, #29
    e0c0:	d4fc      	bmi.n	e0bc <_ZN9ClearCore21DigitalInOutAnalogOut9DacEnableEv+0x10>
        DAC->DATA[0].reg = value;
    e0c2:	8211      	strh	r1, [r2, #16]
    PMUX_ENABLE(m_inputPort, m_inputDataBit);   // (-) DAC output
    e0c4:	68c3      	ldr	r3, [r0, #12]
    e0c6:	4929      	ldr	r1, [pc, #164]	; (e16c <_ZN9ClearCore21DigitalInOutAnalogOut9DacEnableEv+0xc0>)
    e0c8:	6904      	ldr	r4, [r0, #16]
    SYNCBUSY_WAIT(DAC, DAC_SYNCBUSY_ENABLE);
    e0ca:	4a27      	ldr	r2, [pc, #156]	; (e168 <_ZN9ClearCore21DigitalInOutAnalogOut9DacEnableEv+0xbc>)
    PMUX_ENABLE(m_inputPort, m_inputDataBit);   // (-) DAC output
    e0cc:	eb01 13c3 	add.w	r3, r1, r3, lsl #7
    e0d0:	4423      	add	r3, r4
    e0d2:	f893 4040 	ldrb.w	r4, [r3, #64]	; 0x40
    e0d6:	f044 0401 	orr.w	r4, r4, #1
    e0da:	f883 4040 	strb.w	r4, [r3, #64]	; 0x40
    PMUX_ENABLE(m_analogPort, m_analogDataBit); // (+) DAC output
    e0de:	6e03      	ldr	r3, [r0, #96]	; 0x60
    e0e0:	6e44      	ldr	r4, [r0, #100]	; 0x64
    e0e2:	eb01 13c3 	add.w	r3, r1, r3, lsl #7
    e0e6:	4423      	add	r3, r4
    e0e8:	f893 1040 	ldrb.w	r1, [r3, #64]	; 0x40
    e0ec:	f041 0101 	orr.w	r1, r1, #1
    e0f0:	f883 1040 	strb.w	r1, [r3, #64]	; 0x40
    SYNCBUSY_WAIT(DAC, DAC_SYNCBUSY_ENABLE);
    e0f4:	6893      	ldr	r3, [r2, #8]
    e0f6:	079c      	lsls	r4, r3, #30
    e0f8:	d4fc      	bmi.n	e0f4 <_ZN9ClearCore21DigitalInOutAnalogOut9DacEnableEv+0x48>
    if (!DAC->CTRLA.bit.ENABLE) {
    e0fa:	7813      	ldrb	r3, [r2, #0]
    e0fc:	0799      	lsls	r1, r3, #30
    e0fe:	d407      	bmi.n	e110 <_ZN9ClearCore21DigitalInOutAnalogOut9DacEnableEv+0x64>
        DAC->CTRLA.bit.ENABLE = 1;
    e100:	7813      	ldrb	r3, [r2, #0]
        SYNCBUSY_WAIT(DAC, DAC_SYNCBUSY_ENABLE);
    e102:	4919      	ldr	r1, [pc, #100]	; (e168 <_ZN9ClearCore21DigitalInOutAnalogOut9DacEnableEv+0xbc>)
        DAC->CTRLA.bit.ENABLE = 1;
    e104:	f043 0302 	orr.w	r3, r3, #2
    e108:	7013      	strb	r3, [r2, #0]
        SYNCBUSY_WAIT(DAC, DAC_SYNCBUSY_ENABLE);
    e10a:	688b      	ldr	r3, [r1, #8]
    e10c:	079a      	lsls	r2, r3, #30
    e10e:	d4fc      	bmi.n	e10a <_ZN9ClearCore21DigitalInOutAnalogOut9DacEnableEv+0x5e>
    while (!DAC->STATUS.vec.READY) {
    e110:	4a15      	ldr	r2, [pc, #84]	; (e168 <_ZN9ClearCore21DigitalInOutAnalogOut9DacEnableEv+0xbc>)
    e112:	79d3      	ldrb	r3, [r2, #7]
    e114:	079b      	lsls	r3, r3, #30
    e116:	d0fc      	beq.n	e112 <_ZN9ClearCore21DigitalInOutAnalogOut9DacEnableEv+0x66>
        index &= 0xf;   // guard against index out of bounds
    e118:	7902      	ldrb	r2, [r0, #4]
        m_fadeCounter.m_valuesBuf[index] = value;
    e11a:	4b15      	ldr	r3, [pc, #84]	; (e170 <_ZN9ClearCore21DigitalInOutAnalogOut9DacEnableEv+0xc4>)
    e11c:	f002 010f 	and.w	r1, r2, #15
    e120:	185a      	adds	r2, r3, r1
    e122:	2400      	movs	r4, #0
    e124:	f882 408d 	strb.w	r4, [r2, #141]	; 0x8d
    ShiftReg.LedInPwm(m_ledMask, true, m_clearCorePin);
    e128:	6884      	ldr	r4, [r0, #8]
        state ? m_fadeCounter.m_activeMask |= 1 << index
    e12a:	f8b3 6074 	ldrh.w	r6, [r3, #116]	; 0x74
        state ? m_patternMasks[pattern] |= ledMask
    e12e:	f8d3 00e8 	ldr.w	r0, [r3, #232]	; 0xe8
        state ? m_fadeCounter.m_activeMask |= 1 << index
    e132:	2201      	movs	r2, #1
        m_fadeCounter.m_analogMasks[index] = ledMask;
    e134:	eb03 0581 	add.w	r5, r3, r1, lsl #2
        state ? m_fadeCounter.m_activeMask |= 1 << index
    e138:	408a      	lsls	r2, r1
        state ? m_patternMasks[pattern] |= ledMask
    e13a:	4320      	orrs	r0, r4
        state ? m_fadeCounter.m_activeMask |= 1 << index
    e13c:	4332      	orrs	r2, r6
        state ? m_patternMasks[pattern] |= ledMask
    e13e:	f8c3 00e8 	str.w	r0, [r3, #232]	; 0xe8
        state ? m_fadeCounter.m_activeMask |= 1 << index
    e142:	f8a3 2074 	strh.w	r2, [r3, #116]	; 0x74
        m_fadeCounter.m_analogMasks[index] = ledMask;
    e146:	f8c5 40a0 	str.w	r4, [r5, #160]	; 0xa0
        atomic_or_fetch(&m_patternOutputs[LED_BLINK_IO_SET], bitsToSet);
    e14a:	33f4      	adds	r3, #244	; 0xf4
    e14c:	f3bf 8f5b 	dmb	ish
    e150:	e853 2f00 	ldrex	r2, [r3]
    e154:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
    e158:	e843 2100 	strex	r1, r2, [r3]
    e15c:	2900      	cmp	r1, #0
    e15e:	d1f7      	bne.n	e150 <_ZN9ClearCore21DigitalInOutAnalogOut9DacEnableEv+0xa4>
    e160:	f3bf 8f5b 	dmb	ish
}
    e164:	bc70      	pop	{r4, r5, r6}
    e166:	4770      	bx	lr
    e168:	43002400 	.word	0x43002400
    e16c:	41008000 	.word	0x41008000
    e170:	20001b00 	.word	0x20001b00

0000e174 <_ZN9ClearCore21DigitalInOutAnalogOut7RefreshEv>:
    switch (m_mode) {
    e174:	7983      	ldrb	r3, [r0, #6]
    e176:	2b06      	cmp	r3, #6
    e178:	d805      	bhi.n	e186 <_ZN9ClearCore21DigitalInOutAnalogOut7RefreshEv+0x12>
    e17a:	2201      	movs	r2, #1
    e17c:	fa02 f303 	lsl.w	r3, r2, r3
    e180:	f013 0f54 	tst.w	r3, #84	; 0x54
    e184:	d100      	bne.n	e188 <_ZN9ClearCore21DigitalInOutAnalogOut7RefreshEv+0x14>
    e186:	4770      	bx	lr
            DigitalInOut::Refresh();
    e188:	f000 bc32 	b.w	e9f0 <_ZN9ClearCore12DigitalInOut7RefreshEv>

0000e18c <_ZN9ClearCore21DigitalInOutAnalogOut4ModeENS_9Connector14ConnectorModesE>:
bool DigitalInOutAnalogOut::Mode(ConnectorModes newMode) {
    e18c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    if (m_mode == newMode) {
    e18e:	7983      	ldrb	r3, [r0, #6]
    e190:	428b      	cmp	r3, r1
    e192:	d06e      	beq.n	e272 <_ZN9ClearCore21DigitalInOutAnalogOut4ModeENS_9Connector14ConnectorModesE+0xe6>
    switch (newMode) {
    e194:	1e8a      	subs	r2, r1, #2
    e196:	460c      	mov	r4, r1
    e198:	4605      	mov	r5, r0
    e19a:	2a04      	cmp	r2, #4
    e19c:	d80d      	bhi.n	e1ba <_ZN9ClearCore21DigitalInOutAnalogOut4ModeENS_9Connector14ConnectorModesE+0x2e>
    e19e:	e8df f002 	tbb	[pc, r2]
    e1a2:	0311      	.short	0x0311
    e1a4:	0c11      	.short	0x0c11
    e1a6:	11          	.byte	0x11
    e1a7:	00          	.byte	0x00
            DigitalInOut::Mode(INPUT_DIGITAL);
    e1a8:	2102      	movs	r1, #2
    e1aa:	f000 fad9 	bl	e760 <_ZN9ClearCore12DigitalInOut4ModeENS_9Connector14ConnectorModesE>
            DacEnable();
    e1ae:	4628      	mov	r0, r5
    e1b0:	f7ff ff7c 	bl	e0ac <_ZN9ClearCore21DigitalInOutAnalogOut9DacEnableEv>
            m_mode = newMode;
    e1b4:	2303      	movs	r3, #3
    e1b6:	71ab      	strb	r3, [r5, #6]
            break;
    e1b8:	4623      	mov	r3, r4
    return (m_mode == newMode);
    e1ba:	1ae0      	subs	r0, r4, r3
    e1bc:	fab0 f080 	clz	r0, r0
    e1c0:	0940      	lsrs	r0, r0, #5
    e1c2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        atomic_and_fetch(&m_patternOutputs[LED_BLINK_IO_SET], ~bitsToClr);
    e1c4:	4b2c      	ldr	r3, [pc, #176]	; (e278 <_ZN9ClearCore21DigitalInOutAnalogOut4ModeENS_9Connector14ConnectorModesE+0xec>)
    e1c6:	f3bf 8f5b 	dmb	ish
    e1ca:	e853 2f00 	ldrex	r2, [r3]
    e1ce:	f422 1280 	bic.w	r2, r2, #1048576	; 0x100000
    e1d2:	e843 2100 	strex	r1, r2, [r3]
    e1d6:	2900      	cmp	r1, #0
    e1d8:	d1f7      	bne.n	e1ca <_ZN9ClearCore21DigitalInOutAnalogOut4ModeENS_9Connector14ConnectorModesE+0x3e>
    e1da:	f3bf 8f5b 	dmb	ish
        index &= 0xf;   // guard against index out of bounds
    e1de:	792a      	ldrb	r2, [r5, #4]
                                              : m_fadeCounter.m_activeMask &= ~(1 << index);
    e1e0:	f833 7c80 	ldrh.w	r7, [r3, #-128]
    PMUX_DISABLE(m_inputPort, m_inputDataBit);   // (-) DAC output
    e1e4:	68e8      	ldr	r0, [r5, #12]
    ShiftReg.LedInPwm(m_ledMask, false, m_clearCorePin);
    e1e6:	68ae      	ldr	r6, [r5, #8]
    PMUX_DISABLE(m_inputPort, m_inputDataBit);   // (-) DAC output
    e1e8:	4924      	ldr	r1, [pc, #144]	; (e27c <_ZN9ClearCore21DigitalInOutAnalogOut4ModeENS_9Connector14ConnectorModesE+0xf0>)
        m_fadeCounter.m_analogMasks[index] = ledMask;
    e1ea:	3bf4      	subs	r3, #244	; 0xf4
    e1ec:	f002 020f 	and.w	r2, r2, #15
                                              : m_fadeCounter.m_activeMask &= ~(1 << index);
    e1f0:	f04f 0e01 	mov.w	lr, #1
    e1f4:	fa0e fe02 	lsl.w	lr, lr, r2
        m_fadeCounter.m_analogMasks[index] = ledMask;
    e1f8:	eb03 0282 	add.w	r2, r3, r2, lsl #2
                                              : m_fadeCounter.m_activeMask &= ~(1 << index);
    e1fc:	ea27 070e 	bic.w	r7, r7, lr
    e200:	f8a3 7074 	strh.w	r7, [r3, #116]	; 0x74
    e204:	692f      	ldr	r7, [r5, #16]
        m_fadeCounter.m_analogMasks[index] = ledMask;
    e206:	f8c2 60a0 	str.w	r6, [r2, #160]	; 0xa0
                                           : m_patternMasks[pattern] &= ~ledMask;
    e20a:	f8d3 20e8 	ldr.w	r2, [r3, #232]	; 0xe8
    e20e:	eb01 10c0 	add.w	r0, r1, r0, lsl #7
    e212:	4438      	add	r0, r7
    e214:	ea22 0606 	bic.w	r6, r2, r6
    e218:	f8c3 60e8 	str.w	r6, [r3, #232]	; 0xe8
    e21c:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
    SYNCBUSY_WAIT(DAC, DAC_SYNCBUSY_ENABLE);
    e220:	4a17      	ldr	r2, [pc, #92]	; (e280 <_ZN9ClearCore21DigitalInOutAnalogOut4ModeENS_9Connector14ConnectorModesE+0xf4>)
    PMUX_DISABLE(m_inputPort, m_inputDataBit);   // (-) DAC output
    e222:	f36f 0300 	bfc	r3, #0, #1
    e226:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40
    PMUX_DISABLE(m_analogPort, m_analogDataBit); // (+) DAC output
    e22a:	6e2b      	ldr	r3, [r5, #96]	; 0x60
    e22c:	6e68      	ldr	r0, [r5, #100]	; 0x64
    e22e:	eb01 13c3 	add.w	r3, r1, r3, lsl #7
    e232:	4403      	add	r3, r0
    e234:	f893 1040 	ldrb.w	r1, [r3, #64]	; 0x40
    e238:	f36f 0100 	bfc	r1, #0, #1
    e23c:	f883 1040 	strb.w	r1, [r3, #64]	; 0x40
    SYNCBUSY_WAIT(DAC, DAC_SYNCBUSY_ENABLE);
    e240:	6893      	ldr	r3, [r2, #8]
    e242:	f013 0302 	ands.w	r3, r3, #2
    e246:	d1fb      	bne.n	e240 <_ZN9ClearCore21DigitalInOutAnalogOut4ModeENS_9Connector14ConnectorModesE+0xb4>
    if (DAC->CTRLA.bit.ENABLE) {
    e248:	7811      	ldrb	r1, [r2, #0]
    e24a:	0789      	lsls	r1, r1, #30
    e24c:	d507      	bpl.n	e25e <_ZN9ClearCore21DigitalInOutAnalogOut4ModeENS_9Connector14ConnectorModesE+0xd2>
        DAC->CTRLA.bit.ENABLE = 0;
    e24e:	7810      	ldrb	r0, [r2, #0]
        SYNCBUSY_WAIT(DAC, DAC_SYNCBUSY_ENABLE);
    e250:	490b      	ldr	r1, [pc, #44]	; (e280 <_ZN9ClearCore21DigitalInOutAnalogOut4ModeENS_9Connector14ConnectorModesE+0xf4>)
        DAC->CTRLA.bit.ENABLE = 0;
    e252:	f363 0041 	bfi	r0, r3, #1, #1
    e256:	7010      	strb	r0, [r2, #0]
        SYNCBUSY_WAIT(DAC, DAC_SYNCBUSY_ENABLE);
    e258:	688b      	ldr	r3, [r1, #8]
    e25a:	079b      	lsls	r3, r3, #30
    e25c:	d4fc      	bmi.n	e258 <_ZN9ClearCore21DigitalInOutAnalogOut4ModeENS_9Connector14ConnectorModesE+0xcc>
            DigitalInOut::Mode(newMode);
    e25e:	4621      	mov	r1, r4
    e260:	4628      	mov	r0, r5
    e262:	f000 fa7d 	bl	e760 <_ZN9ClearCore12DigitalInOut4ModeENS_9Connector14ConnectorModesE>
    e266:	79ab      	ldrb	r3, [r5, #6]
    return (m_mode == newMode);
    e268:	1ae0      	subs	r0, r4, r3
    e26a:	fab0 f080 	clz	r0, r0
    e26e:	0940      	lsrs	r0, r0, #5
    e270:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        return true;
    e272:	2001      	movs	r0, #1
}
    e274:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    e276:	bf00      	nop
    e278:	20001bf4 	.word	0x20001bf4
    e27c:	41008000 	.word	0x41008000
    e280:	43002400 	.word	0x43002400

0000e284 <_ZN9ClearCore21DigitalInOutAnalogOut5StateEv>:
    switch (m_mode) {
    e284:	7983      	ldrb	r3, [r0, #6]
    e286:	2b06      	cmp	r3, #6
    e288:	d805      	bhi.n	e296 <_ZN9ClearCore21DigitalInOutAnalogOut5StateEv+0x12>
    e28a:	2201      	movs	r2, #1
    e28c:	fa02 f303 	lsl.w	r3, r2, r3
    e290:	f013 0f54 	tst.w	r3, #84	; 0x54
    e294:	d101      	bne.n	e29a <_ZN9ClearCore21DigitalInOutAnalogOut5StateEv+0x16>
}
    e296:	2000      	movs	r0, #0
    e298:	4770      	bx	lr
            state = DigitalInOut::State();
    e29a:	f000 bcaf 	b.w	ebfc <_ZN9ClearCore12DigitalInOut5StateEv>
    e29e:	bf00      	nop

0000e2a0 <_ZN9ClearCore21DigitalInOutAnalogOut5StateEs>:
    switch (m_mode) {
    e2a0:	7983      	ldrb	r3, [r0, #6]
    e2a2:	3b02      	subs	r3, #2
    e2a4:	2b04      	cmp	r3, #4
    e2a6:	d83c      	bhi.n	e322 <_ZN9ClearCore21DigitalInOutAnalogOut5StateEs+0x82>
    e2a8:	e8df f003 	tbb	[pc, r3]
    e2ac:	3b390339 	.word	0x3b390339
    e2b0:	39          	.byte	0x39
    e2b1:	00          	.byte	0x00
            newState = max(newState, 0);
    e2b2:	ea21 71e1 	bic.w	r1, r1, r1, asr #31
bool DigitalInOutAnalogOut::State(int16_t newState) {
    e2b6:	b5f0      	push	{r4, r5, r6, r7, lr}
    value = min(value, DAC_MAX_VALUE);
    e2b8:	b289      	uxth	r1, r1
    e2ba:	f240 74ff 	movw	r4, #2047	; 0x7ff
    e2be:	42a1      	cmp	r1, r4
    e2c0:	bf28      	it	cs
    e2c2:	4621      	movcs	r1, r4
        index &= 0xf;   // guard against index out of bounds
    e2c4:	7907      	ldrb	r7, [r0, #4]
    ShiftReg.LedPwmValue(m_clearCorePin, value * UINT8_MAX / DAC_MAX_VALUE);
    e2c6:	4d19      	ldr	r5, [pc, #100]	; (e32c <_ZN9ClearCore21DigitalInOutAnalogOut5StateEs+0x8c>)
        m_fadeCounter.m_valuesBuf[index] = value;
    e2c8:	4e19      	ldr	r6, [pc, #100]	; (e330 <_ZN9ClearCore21DigitalInOutAnalogOut5StateEs+0x90>)
                        / DAC_MAX_VALUE) + m_dacZero;
    e2ca:	4a1a      	ldr	r2, [pc, #104]	; (e334 <_ZN9ClearCore21DigitalInOutAnalogOut5StateEs+0x94>)
    ShiftReg.LedPwmValue(m_clearCorePin, value * UINT8_MAX / DAC_MAX_VALUE);
    e2cc:	ebc1 2301 	rsb	r3, r1, r1, lsl #8
    e2d0:	fb85 e503 	smull	lr, r5, r5, r3
    e2d4:	f007 070f 	and.w	r7, r7, #15
    e2d8:	441d      	add	r5, r3
    e2da:	443e      	add	r6, r7
    e2dc:	17db      	asrs	r3, r3, #31
    e2de:	ebc3 23a5 	rsb	r3, r3, r5, asr #10
    e2e2:	f886 308d 	strb.w	r3, [r6, #141]	; 0x8d
    uint16_t command = ((static_cast<uint32_t>(value) * m_dacSpan)
    e2e6:	f8b0 506a 	ldrh.w	r5, [r0, #106]	; 0x6a
                        / DAC_MAX_VALUE) + m_dacZero;
    e2ea:	f8b0 3068 	ldrh.w	r3, [r0, #104]	; 0x68
    if (DAC->DATA[0].reg != value) {
    e2ee:	4812      	ldr	r0, [pc, #72]	; (e338 <_ZN9ClearCore21DigitalInOutAnalogOut5StateEs+0x98>)
    uint16_t command = ((static_cast<uint32_t>(value) * m_dacSpan)
    e2f0:	fb01 f105 	mul.w	r1, r1, r5
                        / DAC_MAX_VALUE) + m_dacZero;
    e2f4:	fba2 5201 	umull	r5, r2, r2, r1
    e2f8:	1a89      	subs	r1, r1, r2
    e2fa:	eb02 0151 	add.w	r1, r2, r1, lsr #1
    e2fe:	eb03 2191 	add.w	r1, r3, r1, lsr #10
    e302:	b289      	uxth	r1, r1
    if (DAC->DATA[0].reg != value) {
    e304:	8a03      	ldrh	r3, [r0, #16]
    command = min(command, DAC_MAX_VALUE);
    e306:	42a1      	cmp	r1, r4
    e308:	bf28      	it	cs
    e30a:	4621      	movcs	r1, r4
    if (DAC->DATA[0].reg != value) {
    e30c:	b29b      	uxth	r3, r3
    e30e:	4299      	cmp	r1, r3
    e310:	d009      	beq.n	e326 <_ZN9ClearCore21DigitalInOutAnalogOut5StateEs+0x86>
        SYNCBUSY_WAIT(DAC, DAC_SYNCBUSY_DATA0);
    e312:	6883      	ldr	r3, [r0, #8]
    e314:	075b      	lsls	r3, r3, #29
    e316:	d4fc      	bmi.n	e312 <_ZN9ClearCore21DigitalInOutAnalogOut5StateEs+0x72>
        DAC->DATA[0].reg = value;
    e318:	8201      	strh	r1, [r0, #16]
            success = true;
    e31a:	2001      	movs	r0, #1
    e31c:	bdf0      	pop	{r4, r5, r6, r7, pc}
            success = DigitalInOut::State(newState);
    e31e:	f000 b9c3 	b.w	e6a8 <_ZN9ClearCore12DigitalInOut5StateEs>
    bool success = false;
    e322:	2000      	movs	r0, #0
    e324:	4770      	bx	lr
            success = true;
    e326:	2001      	movs	r0, #1
}
    e328:	bdf0      	pop	{r4, r5, r6, r7, pc}
    e32a:	bf00      	nop
    e32c:	80100201 	.word	0x80100201
    e330:	20001b00 	.word	0x20001b00
    e334:	00200401 	.word	0x00200401
    e338:	43002400 	.word	0x43002400

0000e33c <_ZN9ClearCore21DigitalInOutAnalogOut10InitializeE13ClearCorePins>:
void DigitalInOutAnalogOut::Initialize(ClearCorePins clearCorePin) {
    e33c:	b538      	push	{r3, r4, r5, lr}
    e33e:	4604      	mov	r4, r0
    e340:	460d      	mov	r5, r1
    DacInitialize();
    e342:	f7ff fe33 	bl	dfac <_ZN9ClearCore21DigitalInOutAnalogOut13DacInitializeEv>
    DigitalInOut::Initialize(clearCorePin);
    e346:	4620      	mov	r0, r4
    e348:	4629      	mov	r1, r5
    e34a:	f000 fc77 	bl	ec3c <_ZN9ClearCore12DigitalInOut10InitializeE13ClearCorePins>
    PMUX_SELECTION(m_inputPort, m_inputDataBit, PER_ANALOG);   // (-) DAC output
    e34e:	6920      	ldr	r0, [r4, #16]
    e350:	07c2      	lsls	r2, r0, #31
    e352:	d521      	bpl.n	e398 <_ZN9ClearCore21DigitalInOutAnalogOut10InitializeE13ClearCorePins+0x5c>
    e354:	68e1      	ldr	r1, [r4, #12]
    e356:	01c9      	lsls	r1, r1, #7
    e358:	f101 4282 	add.w	r2, r1, #1090519040	; 0x41000000
    e35c:	f502 4200 	add.w	r2, r2, #32768	; 0x8000
    e360:	eb02 0250 	add.w	r2, r2, r0, lsr #1
    e364:	2101      	movs	r1, #1
    e366:	f892 3030 	ldrb.w	r3, [r2, #48]	; 0x30
    e36a:	f361 1307 	bfi	r3, r1, #4, #4
    e36e:	f882 3030 	strb.w	r3, [r2, #48]	; 0x30
    PMUX_SELECTION(m_analogPort, m_analogDataBit, PER_ANALOG); // (+) DAC output
    e372:	6e61      	ldr	r1, [r4, #100]	; 0x64
    e374:	07cb      	lsls	r3, r1, #31
    e376:	d421      	bmi.n	e3bc <_ZN9ClearCore21DigitalInOutAnalogOut10InitializeE13ClearCorePins+0x80>
    e378:	6e23      	ldr	r3, [r4, #96]	; 0x60
    e37a:	01db      	lsls	r3, r3, #7
    e37c:	f103 4382 	add.w	r3, r3, #1090519040	; 0x41000000
    e380:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
    e384:	eb03 0351 	add.w	r3, r3, r1, lsr #1
    e388:	2101      	movs	r1, #1
    e38a:	f893 2030 	ldrb.w	r2, [r3, #48]	; 0x30
    e38e:	f361 0203 	bfi	r2, r1, #0, #4
    e392:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
    e396:	bd38      	pop	{r3, r4, r5, pc}
    PMUX_SELECTION(m_inputPort, m_inputDataBit, PER_ANALOG);   // (-) DAC output
    e398:	68e2      	ldr	r2, [r4, #12]
    e39a:	01d2      	lsls	r2, r2, #7
    e39c:	f102 4382 	add.w	r3, r2, #1090519040	; 0x41000000
    e3a0:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
    e3a4:	eb03 0350 	add.w	r3, r3, r0, lsr #1
    e3a8:	2101      	movs	r1, #1
    e3aa:	f893 2030 	ldrb.w	r2, [r3, #48]	; 0x30
    e3ae:	f361 0203 	bfi	r2, r1, #0, #4
    e3b2:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
    PMUX_SELECTION(m_analogPort, m_analogDataBit, PER_ANALOG); // (+) DAC output
    e3b6:	6e61      	ldr	r1, [r4, #100]	; 0x64
    e3b8:	07cb      	lsls	r3, r1, #31
    e3ba:	d5dd      	bpl.n	e378 <_ZN9ClearCore21DigitalInOutAnalogOut10InitializeE13ClearCorePins+0x3c>
    e3bc:	6e22      	ldr	r2, [r4, #96]	; 0x60
    e3be:	01d2      	lsls	r2, r2, #7
    e3c0:	f102 4282 	add.w	r2, r2, #1090519040	; 0x41000000
    e3c4:	f502 4200 	add.w	r2, r2, #32768	; 0x8000
    e3c8:	eb02 0251 	add.w	r2, r2, r1, lsr #1
    e3cc:	2101      	movs	r1, #1
    e3ce:	f892 3030 	ldrb.w	r3, [r2, #48]	; 0x30
    e3d2:	f361 1307 	bfi	r3, r1, #4, #4
    e3d6:	f882 3030 	strb.w	r3, [r2, #48]	; 0x30
    e3da:	bd38      	pop	{r3, r4, r5, pc}

0000e3dc <_ZN9ClearCore15BlinkCodeDriver6UpdateEv>:
#include "BlinkCodeDriver.h"

namespace ClearCore {

void BlinkCodeDriver::Update() {
    switch (m_blinkState) {
    e3dc:	7943      	ldrb	r3, [r0, #5]
void BlinkCodeDriver::Update() {
    e3de:	b430      	push	{r4, r5}
    switch (m_blinkState) {
    e3e0:	2b08      	cmp	r3, #8
    e3e2:	d810      	bhi.n	e406 <_ZN9ClearCore15BlinkCodeDriver6UpdateEv+0x2a>
    e3e4:	e8df f003 	tbb	[pc, r3]
    e3e8:	604d3b25 	.word	0x604d3b25
    e3ec:	05a18a74 	.word	0x05a18a74
    e3f0:	11          	.byte	0x11
    e3f1:	00          	.byte	0x00
            m_ledOn = true;
            m_blinkState = CODE_OUTPUT;
            break;

        case CODE_OUTPUT:
            if (--m_timer) {
    e3f2:	8903      	ldrh	r3, [r0, #8]
    e3f4:	3b01      	subs	r3, #1
    e3f6:	b29b      	uxth	r3, r3
    e3f8:	8103      	strh	r3, [r0, #8]
    e3fa:	b923      	cbnz	r3, e406 <_ZN9ClearCore15BlinkCodeDriver6UpdateEv+0x2a>
                // Code value is still active
                break;
            }
            m_timer = m_blinkTicks;
    e3fc:	8a42      	ldrh	r2, [r0, #18]
            m_ledOn = false;
    e3fe:	7383      	strb	r3, [r0, #14]
            m_blinkState = CODE_DELAY;
    e400:	2308      	movs	r3, #8
            m_timer = m_blinkTicks;
    e402:	8102      	strh	r2, [r0, #8]
            m_blinkState = CODE_DELAY;
    e404:	7143      	strb	r3, [r0, #5]
                m_ledOn = false;
                m_blinkState = PRE_GROUP_DELAY;
            }
            break;
    }
}
    e406:	bc30      	pop	{r4, r5}
    e408:	4770      	bx	lr
            if (--m_timer) {
    e40a:	8903      	ldrh	r3, [r0, #8]
    e40c:	3b01      	subs	r3, #1
    e40e:	b29b      	uxth	r3, r3
    e410:	8103      	strh	r3, [r0, #8]
    e412:	2b00      	cmp	r3, #0
    e414:	d1f7      	bne.n	e406 <_ZN9ClearCore15BlinkCodeDriver6UpdateEv+0x2a>
            if (--m_blinkCnt) {
    e416:	8981      	ldrh	r1, [r0, #12]
    e418:	3901      	subs	r1, #1
    e41a:	b289      	uxth	r1, r1
    e41c:	8181      	strh	r1, [r0, #12]
    e41e:	2900      	cmp	r1, #0
    e420:	f000 80b3 	beq.w	e58a <_ZN9ClearCore15BlinkCodeDriver6UpdateEv+0x1ae>
                m_timer = m_blinkTicks;
    e424:	8a43      	ldrh	r3, [r0, #18]
    e426:	8103      	strh	r3, [r0, #8]
                m_ledOn = true;
    e428:	2201      	movs	r2, #1
                m_blinkState = CODE_OUTPUT;
    e42a:	2307      	movs	r3, #7
                m_ledOn = true;
    e42c:	7382      	strb	r2, [r0, #14]
                m_blinkState = CODE_OUTPUT;
    e42e:	7143      	strb	r3, [r0, #5]
                break;
    e430:	e7e9      	b.n	e406 <_ZN9ClearCore15BlinkCodeDriver6UpdateEv+0x2a>
    }
    if (group >= BLINK_GROUP_MAX) {
        group = 0;
        m_patternWrap = true;
    }
    if (!(m_codes[group] >> code)) {
    e432:	7801      	ldrb	r1, [r0, #0]
    e434:	2900      	cmp	r1, #0
    e436:	f040 8089 	bne.w	e54c <_ZN9ClearCore15BlinkCodeDriver6UpdateEv+0x170>
        // Search for the next group with an active code
        code = 0;
        uint8_t iGroup;
        // Search from the next index up to the maximum group index
        for (iGroup = group + 1; iGroup < BLINK_GROUP_MAX; iGroup++) {
            if (m_codes[iGroup]) {
    e43a:	7841      	ldrb	r1, [r0, #1]
    e43c:	2900      	cmp	r1, #0
    e43e:	f040 80cb 	bne.w	e5d8 <_ZN9ClearCore15BlinkCodeDriver6UpdateEv+0x1fc>
    e442:	7883      	ldrb	r3, [r0, #2]
    e444:	2b00      	cmp	r3, #0
    e446:	f040 811a 	bne.w	e67e <_ZN9ClearCore15BlinkCodeDriver6UpdateEv+0x2a2>
    e44a:	78c3      	ldrb	r3, [r0, #3]
    e44c:	2b00      	cmp	r3, #0
    e44e:	f040 8118 	bne.w	e682 <_ZN9ClearCore15BlinkCodeDriver6UpdateEv+0x2a6>
    e452:	7903      	ldrb	r3, [r0, #4]
        for (iGroup = group + 1; iGroup < BLINK_GROUP_MAX; iGroup++) {
    e454:	2504      	movs	r5, #4
            if (m_codes[iGroup]) {
    e456:	2b00      	cmp	r3, #0
    e458:	d0d5      	beq.n	e406 <_ZN9ClearCore15BlinkCodeDriver6UpdateEv+0x2a>
    e45a:	5d41      	ldrb	r1, [r0, r5]
    e45c:	e077      	b.n	e54e <_ZN9ClearCore15BlinkCodeDriver6UpdateEv+0x172>
            if (--m_timer) {
    e45e:	8903      	ldrh	r3, [r0, #8]
    e460:	3b01      	subs	r3, #1
    e462:	b29b      	uxth	r3, r3
    e464:	8103      	strh	r3, [r0, #8]
    e466:	2b00      	cmp	r3, #0
    e468:	d1cd      	bne.n	e406 <_ZN9ClearCore15BlinkCodeDriver6UpdateEv+0x2a>
            m_strobeCnt = m_startTicks / m_strobeOnOffTicks;
    e46a:	8a02      	ldrh	r2, [r0, #16]
            m_patternWrap = false;
    e46c:	73c3      	strb	r3, [r0, #15]
            m_ledOn = true;
    e46e:	2401      	movs	r4, #1
            m_blinkState = START_OUTPUT;
    e470:	2102      	movs	r1, #2
            m_strobeCnt = m_startTicks / m_strobeOnOffTicks;
    e472:	8ac3      	ldrh	r3, [r0, #22]
            m_timer = m_strobeOnOffTicks;
    e474:	8102      	strh	r2, [r0, #8]
            m_strobeCnt = m_startTicks / m_strobeOnOffTicks;
    e476:	fbb3 f3f2 	udiv	r3, r3, r2
            m_ledOn = true;
    e47a:	7384      	strb	r4, [r0, #14]
            m_blinkState = START_OUTPUT;
    e47c:	7141      	strb	r1, [r0, #5]
            m_strobeCnt = m_startTicks / m_strobeOnOffTicks;
    e47e:	8143      	strh	r3, [r0, #10]
            break;
    e480:	e7c1      	b.n	e406 <_ZN9ClearCore15BlinkCodeDriver6UpdateEv+0x2a>
            if (--m_timer) {
    e482:	8903      	ldrh	r3, [r0, #8]
    e484:	3b01      	subs	r3, #1
    e486:	b29b      	uxth	r3, r3
    e488:	8103      	strh	r3, [r0, #8]
    e48a:	2b00      	cmp	r3, #0
    e48c:	d1bb      	bne.n	e406 <_ZN9ClearCore15BlinkCodeDriver6UpdateEv+0x2a>
            if (--m_strobeCnt) {
    e48e:	8943      	ldrh	r3, [r0, #10]
            m_ledOn = !m_ledOn;
    e490:	7b82      	ldrb	r2, [r0, #14]
            if (--m_strobeCnt) {
    e492:	3b01      	subs	r3, #1
    e494:	b29b      	uxth	r3, r3
            m_ledOn = !m_ledOn;
    e496:	f082 0201 	eor.w	r2, r2, #1
            if (--m_strobeCnt) {
    e49a:	8143      	strh	r3, [r0, #10]
            m_ledOn = !m_ledOn;
    e49c:	7382      	strb	r2, [r0, #14]
            if (--m_strobeCnt) {
    e49e:	2b00      	cmp	r3, #0
    e4a0:	d06d      	beq.n	e57e <_ZN9ClearCore15BlinkCodeDriver6UpdateEv+0x1a2>
                m_timer = m_strobeOnOffTicks;
    e4a2:	8a03      	ldrh	r3, [r0, #16]
    e4a4:	8103      	strh	r3, [r0, #8]
                break;
    e4a6:	e7ae      	b.n	e406 <_ZN9ClearCore15BlinkCodeDriver6UpdateEv+0x2a>
            if (--m_timer) {
    e4a8:	8903      	ldrh	r3, [r0, #8]
    e4aa:	3b01      	subs	r3, #1
    e4ac:	b29b      	uxth	r3, r3
    e4ae:	8103      	strh	r3, [r0, #8]
    e4b0:	2b00      	cmp	r3, #0
    e4b2:	d1a8      	bne.n	e406 <_ZN9ClearCore15BlinkCodeDriver6UpdateEv+0x2a>
            m_blinkCnt = m_currentGroup + 1;
    e4b4:	79c2      	ldrb	r2, [r0, #7]
            m_strobeCnt = m_blinkTicks / m_strobeOnOffTicks;
    e4b6:	8a01      	ldrh	r1, [r0, #16]
    e4b8:	8a43      	ldrh	r3, [r0, #18]
            m_timer = m_strobeOnOffTicks;
    e4ba:	8101      	strh	r1, [r0, #8]
            m_blinkCnt = m_currentGroup + 1;
    e4bc:	3201      	adds	r2, #1
            m_ledOn = true;
    e4be:	2501      	movs	r5, #1
            m_blinkState = GROUP_OUTPUT;
    e4c0:	2404      	movs	r4, #4
            m_strobeCnt = m_blinkTicks / m_strobeOnOffTicks;
    e4c2:	fbb3 f3f1 	udiv	r3, r3, r1
            m_blinkCnt = m_currentGroup + 1;
    e4c6:	8182      	strh	r2, [r0, #12]
            m_ledOn = true;
    e4c8:	7385      	strb	r5, [r0, #14]
            m_blinkState = GROUP_OUTPUT;
    e4ca:	7144      	strb	r4, [r0, #5]
            m_strobeCnt = m_blinkTicks / m_strobeOnOffTicks;
    e4cc:	8143      	strh	r3, [r0, #10]
            break;
    e4ce:	e79a      	b.n	e406 <_ZN9ClearCore15BlinkCodeDriver6UpdateEv+0x2a>
            if (--m_timer) {
    e4d0:	8903      	ldrh	r3, [r0, #8]
    e4d2:	3b01      	subs	r3, #1
    e4d4:	b29b      	uxth	r3, r3
    e4d6:	8103      	strh	r3, [r0, #8]
    e4d8:	2b00      	cmp	r3, #0
    e4da:	d194      	bne.n	e406 <_ZN9ClearCore15BlinkCodeDriver6UpdateEv+0x2a>
            if (--m_strobeCnt) {
    e4dc:	8943      	ldrh	r3, [r0, #10]
            m_ledOn = !m_ledOn;
    e4de:	7b82      	ldrb	r2, [r0, #14]
            if (--m_strobeCnt) {
    e4e0:	3b01      	subs	r3, #1
    e4e2:	b29b      	uxth	r3, r3
            m_ledOn = !m_ledOn;
    e4e4:	f082 0201 	eor.w	r2, r2, #1
            if (--m_strobeCnt) {
    e4e8:	8143      	strh	r3, [r0, #10]
            m_ledOn = !m_ledOn;
    e4ea:	7382      	strb	r2, [r0, #14]
            if (--m_strobeCnt) {
    e4ec:	2b00      	cmp	r3, #0
    e4ee:	d1d8      	bne.n	e4a2 <_ZN9ClearCore15BlinkCodeDriver6UpdateEv+0xc6>
            m_timer = m_blinkTicks;
    e4f0:	8a42      	ldrh	r2, [r0, #18]
            m_ledOn = false;
    e4f2:	7383      	strb	r3, [r0, #14]
            m_blinkState = GROUP_DELAY;
    e4f4:	2305      	movs	r3, #5
            m_timer = m_blinkTicks;
    e4f6:	8102      	strh	r2, [r0, #8]
            m_blinkState = GROUP_DELAY;
    e4f8:	7143      	strb	r3, [r0, #5]
            break;
    e4fa:	e784      	b.n	e406 <_ZN9ClearCore15BlinkCodeDriver6UpdateEv+0x2a>
            if (--m_timer) {
    e4fc:	8903      	ldrh	r3, [r0, #8]
    e4fe:	3b01      	subs	r3, #1
    e500:	b29b      	uxth	r3, r3
    e502:	8103      	strh	r3, [r0, #8]
    e504:	2b00      	cmp	r3, #0
    e506:	f47f af7e 	bne.w	e406 <_ZN9ClearCore15BlinkCodeDriver6UpdateEv+0x2a>
            if (--m_blinkCnt) {
    e50a:	8983      	ldrh	r3, [r0, #12]
    e50c:	3b01      	subs	r3, #1
    e50e:	b29b      	uxth	r3, r3
    e510:	8183      	strh	r3, [r0, #12]
    e512:	b373      	cbz	r3, e572 <_ZN9ClearCore15BlinkCodeDriver6UpdateEv+0x196>
                m_strobeCnt = m_blinkTicks / m_strobeOnOffTicks;
    e514:	8a02      	ldrh	r2, [r0, #16]
    e516:	8a43      	ldrh	r3, [r0, #18]
                m_timer = m_strobeOnOffTicks;
    e518:	8102      	strh	r2, [r0, #8]
                m_ledOn = true;
    e51a:	2401      	movs	r4, #1
                m_blinkState = GROUP_OUTPUT;
    e51c:	2104      	movs	r1, #4
                m_strobeCnt = m_blinkTicks / m_strobeOnOffTicks;
    e51e:	fbb3 f3f2 	udiv	r3, r3, r2
                m_ledOn = true;
    e522:	7384      	strb	r4, [r0, #14]
                m_blinkState = GROUP_OUTPUT;
    e524:	7141      	strb	r1, [r0, #5]
                m_strobeCnt = m_blinkTicks / m_strobeOnOffTicks;
    e526:	8143      	strh	r3, [r0, #10]
                break;
    e528:	e76d      	b.n	e406 <_ZN9ClearCore15BlinkCodeDriver6UpdateEv+0x2a>
            if (--m_timer) {
    e52a:	8903      	ldrh	r3, [r0, #8]
    e52c:	3b01      	subs	r3, #1
    e52e:	b29b      	uxth	r3, r3
    e530:	8103      	strh	r3, [r0, #8]
    e532:	2b00      	cmp	r3, #0
    e534:	f47f af67 	bne.w	e406 <_ZN9ClearCore15BlinkCodeDriver6UpdateEv+0x2a>
            m_blinkCnt = m_currentCode + 1;
    e538:	7983      	ldrb	r3, [r0, #6]
            m_timer = m_blinkTicks;
    e53a:	8a42      	ldrh	r2, [r0, #18]
    e53c:	8102      	strh	r2, [r0, #8]
            m_blinkCnt = m_currentCode + 1;
    e53e:	3301      	adds	r3, #1
            m_ledOn = true;
    e540:	2101      	movs	r1, #1
            m_blinkState = CODE_OUTPUT;
    e542:	2207      	movs	r2, #7
            m_blinkCnt = m_currentCode + 1;
    e544:	8183      	strh	r3, [r0, #12]
            m_ledOn = true;
    e546:	7381      	strb	r1, [r0, #14]
            m_blinkState = CODE_OUTPUT;
    e548:	7142      	strb	r2, [r0, #5]
            break;
    e54a:	e75c      	b.n	e406 <_ZN9ClearCore15BlinkCodeDriver6UpdateEv+0x2a>
    if (!(m_codes[group] >> code)) {
    e54c:	2500      	movs	r5, #0
        // Set the index of the next active group found
        group = iGroup;
    }
    // There is an active code within group, find out the code value
    // Set the first group/code pair to output
    for (; !(m_codes[group] & (1 << code)); code++) {
    e54e:	f011 0301 	ands.w	r3, r1, #1
    e552:	d149      	bne.n	e5e8 <_ZN9ClearCore15BlinkCodeDriver6UpdateEv+0x20c>
    e554:	3301      	adds	r3, #1
    e556:	b2db      	uxtb	r3, r3
    e558:	fa41 f203 	asr.w	r2, r1, r3
    e55c:	07d4      	lsls	r4, r2, #31
    e55e:	d5f9      	bpl.n	e554 <_ZN9ClearCore15BlinkCodeDriver6UpdateEv+0x178>
            m_timer = m_prestartTicks;
    e560:	8a84      	ldrh	r4, [r0, #20]
        continue;
    }
    m_currentGroup = group;
    e562:	71c5      	strb	r5, [r0, #7]
            m_ledOn = false;
    e564:	2100      	movs	r1, #0
            m_blinkState = PRE_START_DELAY;
    e566:	2201      	movs	r2, #1
    m_currentCode = code;
    e568:	7183      	strb	r3, [r0, #6]
            m_timer = m_prestartTicks;
    e56a:	8104      	strh	r4, [r0, #8]
            m_ledOn = false;
    e56c:	7381      	strb	r1, [r0, #14]
            m_blinkState = PRE_START_DELAY;
    e56e:	7142      	strb	r2, [r0, #5]
            break;
    e570:	e749      	b.n	e406 <_ZN9ClearCore15BlinkCodeDriver6UpdateEv+0x2a>
            m_timer = m_precodeTicks;
    e572:	8b42      	ldrh	r2, [r0, #26]
            m_ledOn = false;
    e574:	7383      	strb	r3, [r0, #14]
            m_blinkState = PRE_CODE_DELAY;
    e576:	2306      	movs	r3, #6
            m_timer = m_precodeTicks;
    e578:	8102      	strh	r2, [r0, #8]
            m_blinkState = PRE_CODE_DELAY;
    e57a:	7143      	strb	r3, [r0, #5]
            break;
    e57c:	e743      	b.n	e406 <_ZN9ClearCore15BlinkCodeDriver6UpdateEv+0x2a>
            m_timer = m_pregroupTicks;
    e57e:	8b02      	ldrh	r2, [r0, #24]
            m_ledOn = false;
    e580:	7383      	strb	r3, [r0, #14]
            m_blinkState = PRE_GROUP_DELAY;
    e582:	2303      	movs	r3, #3
            m_timer = m_pregroupTicks;
    e584:	8102      	strh	r2, [r0, #8]
            m_blinkState = PRE_GROUP_DELAY;
    e586:	7143      	strb	r3, [r0, #5]
            break;
    e588:	e73d      	b.n	e406 <_ZN9ClearCore15BlinkCodeDriver6UpdateEv+0x2a>
            if (!NextCode(m_currentGroup, m_currentCode + 1)) {
    e58a:	7983      	ldrb	r3, [r0, #6]
    e58c:	79c2      	ldrb	r2, [r0, #7]
    e58e:	3301      	adds	r3, #1
    e590:	b2db      	uxtb	r3, r3
    if (code > 7) {
    e592:	2b07      	cmp	r3, #7
        group++;
    e594:	bf85      	ittet	hi
    e596:	3201      	addhi	r2, #1
    e598:	b2d2      	uxtbhi	r2, r2
    e59a:	4619      	movls	r1, r3
        code = 0;
    e59c:	460b      	movhi	r3, r1
    if (group >= BLINK_GROUP_MAX) {
    e59e:	2a04      	cmp	r2, #4
    e5a0:	4615      	mov	r5, r2
    e5a2:	dd1b      	ble.n	e5dc <_ZN9ClearCore15BlinkCodeDriver6UpdateEv+0x200>
    if (!(m_codes[group] >> code)) {
    e5a4:	7804      	ldrb	r4, [r0, #0]
        m_patternWrap = true;
    e5a6:	2201      	movs	r2, #1
    if (!(m_codes[group] >> code)) {
    e5a8:	fa54 f501 	asrs.w	r5, r4, r1
        m_patternWrap = true;
    e5ac:	73c2      	strb	r2, [r0, #15]
    if (!(m_codes[group] >> code)) {
    e5ae:	d01d      	beq.n	e5ec <_ZN9ClearCore15BlinkCodeDriver6UpdateEv+0x210>
        group = 0;
    e5b0:	2200      	movs	r2, #0
    for (; !(m_codes[group] & (1 << code)); code++) {
    e5b2:	07e9      	lsls	r1, r5, #31
    e5b4:	d452      	bmi.n	e65c <_ZN9ClearCore15BlinkCodeDriver6UpdateEv+0x280>
    e5b6:	2501      	movs	r5, #1
    e5b8:	3301      	adds	r3, #1
    e5ba:	b2db      	uxtb	r3, r3
    e5bc:	fa44 f103 	asr.w	r1, r4, r3
    e5c0:	07c9      	lsls	r1, r1, #31
    e5c2:	d5f9      	bpl.n	e5b8 <_ZN9ClearCore15BlinkCodeDriver6UpdateEv+0x1dc>
    m_currentGroup = group;
    e5c4:	71c2      	strb	r2, [r0, #7]
    m_currentCode = code;
    e5c6:	7183      	strb	r3, [r0, #6]
            else if (m_patternWrap) {
    e5c8:	2d00      	cmp	r5, #0
    e5ca:	d149      	bne.n	e660 <_ZN9ClearCore15BlinkCodeDriver6UpdateEv+0x284>
                m_timer = m_pregroupTicks;
    e5cc:	8b02      	ldrh	r2, [r0, #24]
                m_ledOn = false;
    e5ce:	7385      	strb	r5, [r0, #14]
                m_blinkState = PRE_GROUP_DELAY;
    e5d0:	2303      	movs	r3, #3
                m_timer = m_pregroupTicks;
    e5d2:	8102      	strh	r2, [r0, #8]
                m_blinkState = PRE_GROUP_DELAY;
    e5d4:	7143      	strb	r3, [r0, #5]
}
    e5d6:	e716      	b.n	e406 <_ZN9ClearCore15BlinkCodeDriver6UpdateEv+0x2a>
            if (m_codes[iGroup]) {
    e5d8:	2501      	movs	r5, #1
    e5da:	e7b8      	b.n	e54e <_ZN9ClearCore15BlinkCodeDriver6UpdateEv+0x172>
    if (!(m_codes[group] >> code)) {
    e5dc:	5c84      	ldrb	r4, [r0, r2]
    e5de:	fa54 f101 	asrs.w	r1, r4, r1
    e5e2:	d029      	beq.n	e638 <_ZN9ClearCore15BlinkCodeDriver6UpdateEv+0x25c>
    e5e4:	7bc5      	ldrb	r5, [r0, #15]
    e5e6:	e7eb      	b.n	e5c0 <_ZN9ClearCore15BlinkCodeDriver6UpdateEv+0x1e4>
    for (; !(m_codes[group] & (1 << code)); code++) {
    e5e8:	2300      	movs	r3, #0
    e5ea:	e7b9      	b.n	e560 <_ZN9ClearCore15BlinkCodeDriver6UpdateEv+0x184>
            if (m_codes[iGroup]) {
    e5ec:	7843      	ldrb	r3, [r0, #1]
    e5ee:	bb83      	cbnz	r3, e652 <_ZN9ClearCore15BlinkCodeDriver6UpdateEv+0x276>
        for (iGroup = group + 1; iGroup < BLINK_GROUP_MAX; iGroup++) {
    e5f0:	2102      	movs	r1, #2
    e5f2:	460b      	mov	r3, r1
            if (m_codes[iGroup]) {
    e5f4:	5cc3      	ldrb	r3, [r0, r3]
    e5f6:	2b00      	cmp	r3, #0
    e5f8:	d145      	bne.n	e686 <_ZN9ClearCore15BlinkCodeDriver6UpdateEv+0x2aa>
        for (iGroup = group + 1; iGroup < BLINK_GROUP_MAX; iGroup++) {
    e5fa:	1c4a      	adds	r2, r1, #1
    e5fc:	b2d2      	uxtb	r2, r2
    e5fe:	2a05      	cmp	r2, #5
    e600:	d00d      	beq.n	e61e <_ZN9ClearCore15BlinkCodeDriver6UpdateEv+0x242>
            if (m_codes[iGroup]) {
    e602:	5c83      	ldrb	r3, [r0, r2]
    e604:	bb2b      	cbnz	r3, e652 <_ZN9ClearCore15BlinkCodeDriver6UpdateEv+0x276>
        for (iGroup = group + 1; iGroup < BLINK_GROUP_MAX; iGroup++) {
    e606:	1c8a      	adds	r2, r1, #2
    e608:	b2d2      	uxtb	r2, r2
    e60a:	2a05      	cmp	r2, #5
    e60c:	d007      	beq.n	e61e <_ZN9ClearCore15BlinkCodeDriver6UpdateEv+0x242>
            if (m_codes[iGroup]) {
    e60e:	5c83      	ldrb	r3, [r0, r2]
    e610:	b9fb      	cbnz	r3, e652 <_ZN9ClearCore15BlinkCodeDriver6UpdateEv+0x276>
        for (iGroup = group + 1; iGroup < BLINK_GROUP_MAX; iGroup++) {
    e612:	1ccb      	adds	r3, r1, #3
    e614:	b2db      	uxtb	r3, r3
    e616:	2b05      	cmp	r3, #5
    e618:	d001      	beq.n	e61e <_ZN9ClearCore15BlinkCodeDriver6UpdateEv+0x242>
            if (m_codes[iGroup]) {
    e61a:	5cc3      	ldrb	r3, [r0, r3]
    e61c:	b9c3      	cbnz	r3, e650 <_ZN9ClearCore15BlinkCodeDriver6UpdateEv+0x274>
                if (m_codes[iGroup]) {
    e61e:	7802      	ldrb	r2, [r0, #0]
    e620:	b112      	cbz	r2, e628 <_ZN9ClearCore15BlinkCodeDriver6UpdateEv+0x24c>
    e622:	e024      	b.n	e66e <_ZN9ClearCore15BlinkCodeDriver6UpdateEv+0x292>
    e624:	5c83      	ldrb	r3, [r0, r2]
    e626:	bb23      	cbnz	r3, e672 <_ZN9ClearCore15BlinkCodeDriver6UpdateEv+0x296>
            for (iGroup = 0; iGroup <= group; iGroup++) {
    e628:	3201      	adds	r2, #1
    e62a:	b2d2      	uxtb	r2, r2
    e62c:	42aa      	cmp	r2, r5
    e62e:	ddf9      	ble.n	e624 <_ZN9ClearCore15BlinkCodeDriver6UpdateEv+0x248>
                m_ledOn = false;
    e630:	2300      	movs	r3, #0
    e632:	7383      	strb	r3, [r0, #14]
                m_blinkState = IDLE;
    e634:	7143      	strb	r3, [r0, #5]
    e636:	e6e6      	b.n	e406 <_ZN9ClearCore15BlinkCodeDriver6UpdateEv+0x2a>
        for (iGroup = group + 1; iGroup < BLINK_GROUP_MAX; iGroup++) {
    e638:	3201      	adds	r2, #1
    e63a:	b2d2      	uxtb	r2, r2
    e63c:	2a04      	cmp	r2, #4
    e63e:	d8ee      	bhi.n	e61e <_ZN9ClearCore15BlinkCodeDriver6UpdateEv+0x242>
            if (m_codes[iGroup]) {
    e640:	5c83      	ldrb	r3, [r0, r2]
    e642:	b933      	cbnz	r3, e652 <_ZN9ClearCore15BlinkCodeDriver6UpdateEv+0x276>
        for (iGroup = group + 1; iGroup < BLINK_GROUP_MAX; iGroup++) {
    e644:	1ca9      	adds	r1, r5, #2
    e646:	b2c9      	uxtb	r1, r1
    e648:	2905      	cmp	r1, #5
    e64a:	460b      	mov	r3, r1
    e64c:	d1d2      	bne.n	e5f4 <_ZN9ClearCore15BlinkCodeDriver6UpdateEv+0x218>
    e64e:	e7e6      	b.n	e61e <_ZN9ClearCore15BlinkCodeDriver6UpdateEv+0x242>
            if (m_codes[iGroup]) {
    e650:	2204      	movs	r2, #4
    e652:	4619      	mov	r1, r3
        for (iGroup = group + 1; iGroup < BLINK_GROUP_MAX; iGroup++) {
    e654:	461c      	mov	r4, r3
    e656:	7bc5      	ldrb	r5, [r0, #15]
        code = 0;
    e658:	2300      	movs	r3, #0
    e65a:	e7b1      	b.n	e5c0 <_ZN9ClearCore15BlinkCodeDriver6UpdateEv+0x1e4>
    m_currentGroup = group;
    e65c:	71c2      	strb	r2, [r0, #7]
    m_currentCode = code;
    e65e:	7183      	strb	r3, [r0, #6]
                m_timer = m_prestartTicks;
    e660:	8a83      	ldrh	r3, [r0, #20]
    e662:	8103      	strh	r3, [r0, #8]
                m_ledOn = false;
    e664:	2200      	movs	r2, #0
                m_blinkState = PRE_START_DELAY;
    e666:	2301      	movs	r3, #1
                m_ledOn = false;
    e668:	7382      	strb	r2, [r0, #14]
                m_blinkState = PRE_START_DELAY;
    e66a:	7143      	strb	r3, [r0, #5]
    e66c:	e6cb      	b.n	e406 <_ZN9ClearCore15BlinkCodeDriver6UpdateEv+0x2a>
                if (m_codes[iGroup]) {
    e66e:	4613      	mov	r3, r2
    e670:	2200      	movs	r2, #0
    e672:	461d      	mov	r5, r3
            m_patternWrap = true;
    e674:	2301      	movs	r3, #1
    e676:	73c3      	strb	r3, [r0, #15]
    e678:	462c      	mov	r4, r5
        code = 0;
    e67a:	2300      	movs	r3, #0
    e67c:	e799      	b.n	e5b2 <_ZN9ClearCore15BlinkCodeDriver6UpdateEv+0x1d6>
            if (m_codes[iGroup]) {
    e67e:	2502      	movs	r5, #2
    e680:	e6eb      	b.n	e45a <_ZN9ClearCore15BlinkCodeDriver6UpdateEv+0x7e>
        for (iGroup = group + 1; iGroup < BLINK_GROUP_MAX; iGroup++) {
    e682:	2503      	movs	r5, #3
    e684:	e6e9      	b.n	e45a <_ZN9ClearCore15BlinkCodeDriver6UpdateEv+0x7e>
            if (m_codes[iGroup]) {
    e686:	460a      	mov	r2, r1
    e688:	e7e3      	b.n	e652 <_ZN9ClearCore15BlinkCodeDriver6UpdateEv+0x276>
    e68a:	bf00      	nop

0000e68c <_ZN9ClearCore12DigitalInOut4ModeEv>:
    }
    e68c:	7980      	ldrb	r0, [r0, #6]
    e68e:	4770      	bx	lr

0000e690 <_ZN9ClearCore12DigitalInOut4TypeEv>:
    }
    e690:	2001      	movs	r0, #1
    e692:	4770      	bx	lr

0000e694 <_ZN9ClearCore12DigitalInOut10IsWritableEv>:
        return m_mode == OUTPUT_DIGITAL || m_mode == OUTPUT_PWM;
    e694:	7980      	ldrb	r0, [r0, #6]
    e696:	2804      	cmp	r0, #4
    e698:	bf1d      	ittte	ne
    e69a:	3806      	subne	r0, #6
    e69c:	fab0 f080 	clzne	r0, r0
    e6a0:	0940      	lsrne	r0, r0, #5
    e6a2:	2001      	moveq	r0, #1
    }
    e6a4:	4770      	bx	lr
    e6a6:	bf00      	nop

0000e6a8 <_ZN9ClearCore12DigitalInOut5StateEs>:
bool DigitalInOut::State(int16_t newState) {
    bool success = false;
    m_pulseActive = false;
    m_pulseStopPending = false;

    switch (m_mode) {
    e6a8:	7982      	ldrb	r2, [r0, #6]
    m_pulseActive = false;
    e6aa:	2300      	movs	r3, #0
    switch (m_mode) {
    e6ac:	2a04      	cmp	r2, #4
    m_pulseActive = false;
    e6ae:	f880 3059 	strb.w	r3, [r0, #89]	; 0x59
    m_pulseStopPending = false;
    e6b2:	f880 305b 	strb.w	r3, [r0, #91]	; 0x5b
    switch (m_mode) {
    e6b6:	d02a      	beq.n	e70e <_ZN9ClearCore12DigitalInOut5StateEs+0x66>
    e6b8:	2a06      	cmp	r2, #6
    e6ba:	d126      	bne.n	e70a <_ZN9ClearCore12DigitalInOut5StateEs+0x62>
            // Not writable in input mode
            success = false;
            break;
        case OUTPUT_PWM:
            // Cap the input at max PWM (255)
            if (static_cast<uint16_t>(newState) > UINT8_MAX) {
    e6bc:	b28b      	uxth	r3, r1
    e6be:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
    if (m_mode != OUTPUT_PWM) {
        return false;
    }

    // Wait for the TC CC value to be ready to be written
    uint8_t ccBufVal = (m_logicInversion) ? newDuty : 255 - newDuty;
    e6c2:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
            if (static_cast<uint16_t>(newState) > UINT8_MAX) {
    e6c6:	bf28      	it	cs
    e6c8:	21ff      	movcs	r1, #255	; 0xff
bool DigitalInOut::State(int16_t newState) {
    e6ca:	b470      	push	{r4, r5, r6}
    e6cc:	b2c9      	uxtb	r1, r1
    uint8_t ccBufVal = (m_logicInversion) ? newDuty : 255 - newDuty;
    e6ce:	2b00      	cmp	r3, #0
    e6d0:	d040      	beq.n	e754 <_ZN9ClearCore12DigitalInOut5StateEs+0xac>
    e6d2:	460d      	mov	r5, r1
    if (m_tc->COUNT8.CCBUF[m_tcPadNum].reg != ccBufVal) {
    e6d4:	6c02      	ldr	r2, [r0, #64]	; 0x40
    e6d6:	f890 3044 	ldrb.w	r3, [r0, #68]	; 0x44
    e6da:	18d6      	adds	r6, r2, r3
    e6dc:	f896 4030 	ldrb.w	r4, [r6, #48]	; 0x30
    e6e0:	42ac      	cmp	r4, r5
    e6e2:	d008      	beq.n	e6f6 <_ZN9ClearCore12DigitalInOut5StateEs+0x4e>
        uint32_t syncMask = m_tcPadNum ? TC_SYNCBUSY_CC1 : TC_SYNCBUSY_CC0;
    e6e4:	2b00      	cmp	r3, #0
    e6e6:	bf0c      	ite	eq
    e6e8:	2440      	moveq	r4, #64	; 0x40
    e6ea:	2480      	movne	r4, #128	; 0x80
        SYNCBUSY_WAIT(&m_tc->COUNT8, syncMask);
    e6ec:	6913      	ldr	r3, [r2, #16]
    e6ee:	4223      	tst	r3, r4
    e6f0:	d1fc      	bne.n	e6ec <_ZN9ClearCore12DigitalInOut5StateEs+0x44>
        m_tc->COUNT8.CCBUF[m_tcPadNum].reg = ccBufVal;
    e6f2:	f886 5030 	strb.w	r5, [r6, #48]	; 0x30
        index &= 0xf;   // guard against index out of bounds
    e6f6:	7902      	ldrb	r2, [r0, #4]
        m_fadeCounter.m_valuesBuf[index] = value;
    e6f8:	4b18      	ldr	r3, [pc, #96]	; (e75c <_ZN9ClearCore12DigitalInOut5StateEs+0xb4>)
    e6fa:	f002 020f 	and.w	r2, r2, #15
    e6fe:	4413      	add	r3, r2
    e700:	2001      	movs	r0, #1
    e702:	f883 108d 	strb.w	r1, [r3, #141]	; 0x8d
}
    e706:	bc70      	pop	{r4, r5, r6}
    e708:	4770      	bx	lr
    bool success = false;
    e70a:	4618      	mov	r0, r3
    e70c:	4770      	bx	lr
            if (m_outState != static_cast<bool>(newState)) {
    e70e:	1c0b      	adds	r3, r1, #0
    e710:	f890 2045 	ldrb.w	r2, [r0, #69]	; 0x45
    e714:	bf18      	it	ne
    e716:	2301      	movne	r3, #1
    e718:	429a      	cmp	r2, r3
    e71a:	d004      	beq.n	e726 <_ZN9ClearCore12DigitalInOut5StateEs+0x7e>
                m_overloadTripCnt = OVERLOAD_TRIP_TICKS;
    e71c:	220c      	movs	r2, #12
                m_outState = static_cast<bool>(newState);
    e71e:	f880 3045 	strb.w	r3, [r0, #69]	; 0x45
                m_overloadTripCnt = OVERLOAD_TRIP_TICKS;
    e722:	f880 2058 	strb.w	r2, [r0, #88]	; 0x58
            OutputPin(newState && !m_overloadFoldbackCnt);
    e726:	b121      	cbz	r1, e732 <_ZN9ClearCore12DigitalInOut5StateEs+0x8a>
    e728:	f8b0 105c 	ldrh.w	r1, [r0, #92]	; 0x5c
    e72c:	fab1 f181 	clz	r1, r1
    e730:	0949      	lsrs	r1, r1, #5
    bool m_pulseValue;
    bool m_pulseStopPending;
    uint16_t m_overloadFoldbackCnt;

    void OutputPin(bool val) {
        DATA_OUTPUT_STATE(m_outputPort, m_outputDataMask,
    e732:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
    e736:	6b82      	ldr	r2, [r0, #56]	; 0x38
    e738:	428b      	cmp	r3, r1
    e73a:	6b03      	ldr	r3, [r0, #48]	; 0x30
    e73c:	ea4f 13c3 	mov.w	r3, r3, lsl #7
    e740:	f103 4382 	add.w	r3, r3, #1090519040	; 0x41000000
    e744:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
    e748:	f04f 0001 	mov.w	r0, #1
    e74c:	bf14      	ite	ne
    e74e:	619a      	strne	r2, [r3, #24]
    e750:	615a      	streq	r2, [r3, #20]
    e752:	4770      	bx	lr
    uint8_t ccBufVal = (m_logicInversion) ? newDuty : 255 - newDuty;
    e754:	43cd      	mvns	r5, r1
    e756:	b2ed      	uxtb	r5, r5
    e758:	e7bc      	b.n	e6d4 <_ZN9ClearCore12DigitalInOut5StateEs+0x2c>
    e75a:	bf00      	nop
    e75c:	20001b00 	.word	0x20001b00

0000e760 <_ZN9ClearCore12DigitalInOut4ModeENS_9Connector14ConnectorModesE>:
    if (newMode == m_mode) {
    e760:	7983      	ldrb	r3, [r0, #6]
    e762:	428b      	cmp	r3, r1
    e764:	f000 80cb 	beq.w	e8fe <_ZN9ClearCore12DigitalInOut4ModeENS_9Connector14ConnectorModesE+0x19e>
bool DigitalInOut::Mode(ConnectorModes newMode) {
    e768:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    switch (newMode) {
    e76c:	2904      	cmp	r1, #4
bool DigitalInOut::Mode(ConnectorModes newMode) {
    e76e:	b082      	sub	sp, #8
    e770:	4604      	mov	r4, r0
    e772:	460d      	mov	r5, r1
    switch (newMode) {
    e774:	f000 8087 	beq.w	e886 <_ZN9ClearCore12DigitalInOut4ModeENS_9Connector14ConnectorModesE+0x126>
    e778:	2906      	cmp	r1, #6
    e77a:	d008      	beq.n	e78e <_ZN9ClearCore12DigitalInOut4ModeENS_9Connector14ConnectorModesE+0x2e>
    e77c:	2902      	cmp	r1, #2
    e77e:	d033      	beq.n	e7e8 <_ZN9ClearCore12DigitalInOut4ModeENS_9Connector14ConnectorModesE+0x88>
    return (m_mode == newMode);
    e780:	1ae8      	subs	r0, r5, r3
    e782:	fab0 f080 	clz	r0, r0
    e786:	0940      	lsrs	r0, r0, #5
}
    e788:	b002      	add	sp, #8
    e78a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
            State(0);
    e78e:	6803      	ldr	r3, [r0, #0]
    e790:	4a79      	ldr	r2, [pc, #484]	; (e978 <_ZN9ClearCore12DigitalInOut4ModeENS_9Connector14ConnectorModesE+0x218>)
    e792:	695b      	ldr	r3, [r3, #20]
            m_mode = newMode;
    e794:	71a1      	strb	r1, [r4, #6]
    e796:	4293      	cmp	r3, r2
    e798:	f040 80b3 	bne.w	e902 <_ZN9ClearCore12DigitalInOut4ModeENS_9Connector14ConnectorModesE+0x1a2>
    if (m_tc->COUNT8.CCBUF[m_tcPadNum].reg != ccBufVal) {
    e79c:	6c01      	ldr	r1, [r0, #64]	; 0x40
    e79e:	f890 6044 	ldrb.w	r6, [r0, #68]	; 0x44
    uint8_t ccBufVal = (m_logicInversion) ? newDuty : 255 - newDuty;
    e7a2:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
    m_pulseActive = false;
    e7a6:	2200      	movs	r2, #0
    if (m_tc->COUNT8.CCBUF[m_tcPadNum].reg != ccBufVal) {
    e7a8:	1988      	adds	r0, r1, r6
    uint8_t ccBufVal = (m_logicInversion) ? newDuty : 255 - newDuty;
    e7aa:	f083 0301 	eor.w	r3, r3, #1
    m_pulseActive = false;
    e7ae:	f884 2059 	strb.w	r2, [r4, #89]	; 0x59
    m_pulseStopPending = false;
    e7b2:	f884 205b 	strb.w	r2, [r4, #91]	; 0x5b
    uint8_t ccBufVal = (m_logicInversion) ? newDuty : 255 - newDuty;
    e7b6:	425b      	negs	r3, r3
    if (m_tc->COUNT8.CCBUF[m_tcPadNum].reg != ccBufVal) {
    e7b8:	f890 2030 	ldrb.w	r2, [r0, #48]	; 0x30
    uint8_t ccBufVal = (m_logicInversion) ? newDuty : 255 - newDuty;
    e7bc:	b2db      	uxtb	r3, r3
    if (m_tc->COUNT8.CCBUF[m_tcPadNum].reg != ccBufVal) {
    e7be:	429a      	cmp	r2, r3
    e7c0:	d008      	beq.n	e7d4 <_ZN9ClearCore12DigitalInOut4ModeENS_9Connector14ConnectorModesE+0x74>
        uint32_t syncMask = m_tcPadNum ? TC_SYNCBUSY_CC1 : TC_SYNCBUSY_CC0;
    e7c2:	2e00      	cmp	r6, #0
    e7c4:	bf0c      	ite	eq
    e7c6:	2640      	moveq	r6, #64	; 0x40
    e7c8:	2680      	movne	r6, #128	; 0x80
        SYNCBUSY_WAIT(&m_tc->COUNT8, syncMask);
    e7ca:	690a      	ldr	r2, [r1, #16]
    e7cc:	4232      	tst	r2, r6
    e7ce:	d1fc      	bne.n	e7ca <_ZN9ClearCore12DigitalInOut4ModeENS_9Connector14ConnectorModesE+0x6a>
        m_tc->COUNT8.CCBUF[m_tcPadNum].reg = ccBufVal;
    e7d0:	f880 3030 	strb.w	r3, [r0, #48]	; 0x30
    }
    ShiftReg.LedPwmValue(m_clearCorePin, newDuty);
    e7d4:	f9b4 1004 	ldrsh.w	r1, [r4, #4]
    e7d8:	4e68      	ldr	r6, [pc, #416]	; (e97c <_ZN9ClearCore12DigitalInOut4ModeENS_9Connector14ConnectorModesE+0x21c>)
    e7da:	f001 020f 	and.w	r2, r1, #15
    e7de:	18b3      	adds	r3, r6, r2
    e7e0:	2000      	movs	r0, #0
    e7e2:	f883 008d 	strb.w	r0, [r3, #141]	; 0x8d
    e7e6:	e093      	b.n	e910 <_ZN9ClearCore12DigitalInOut4ModeENS_9Connector14ConnectorModesE+0x1b0>
            m_pulseActive = false;
    e7e8:	2300      	movs	r3, #0
    e7ea:	f890 203c 	ldrb.w	r2, [r0, #60]	; 0x3c
            m_mode = newMode;
    e7ee:	71a1      	strb	r1, [r4, #6]
            m_pulseActive = false;
    e7f0:	f880 3059 	strb.w	r3, [r0, #89]	; 0x59
            m_pulseStopPending = false;
    e7f4:	f880 305b 	strb.w	r3, [r0, #91]	; 0x5b
    e7f8:	6b03      	ldr	r3, [r0, #48]	; 0x30
    e7fa:	6b81      	ldr	r1, [r0, #56]	; 0x38
    e7fc:	01db      	lsls	r3, r3, #7
    e7fe:	2a00      	cmp	r2, #0
    e800:	d177      	bne.n	e8f2 <_ZN9ClearCore12DigitalInOut4ModeENS_9Connector14ConnectorModesE+0x192>
    e802:	f103 4282 	add.w	r2, r3, #1090519040	; 0x41000000
    e806:	f502 4200 	add.w	r2, r2, #32768	; 0x8000
    e80a:	6151      	str	r1, [r2, #20]
            ShiftReg.LedInPwm(m_ledMask, false, m_clearCorePin);
    e80c:	f9b4 1004 	ldrsh.w	r1, [r4, #4]
        m_fadeCounter.m_analogMasks[index] = ledMask;
    e810:	4e5a      	ldr	r6, [pc, #360]	; (e97c <_ZN9ClearCore12DigitalInOut4ModeENS_9Connector14ConnectorModesE+0x21c>)
            PMUX_DISABLE(m_outputPort, m_outputDataBit);
    e812:	6b67      	ldr	r7, [r4, #52]	; 0x34
                                              : m_fadeCounter.m_activeMask &= ~(1 << index);
    e814:	f8b6 8074 	ldrh.w	r8, [r6, #116]	; 0x74
            ShiftReg.LedInPwm(m_ledMask, false, m_clearCorePin);
    e818:	f8d4 c008 	ldr.w	ip, [r4, #8]
                                           : m_patternMasks[pattern] &= ~ledMask;
    e81c:	f8d6 00e8 	ldr.w	r0, [r6, #232]	; 0xe8
            PMUX_DISABLE(m_outputPort, m_outputDataBit);
    e820:	f103 4382 	add.w	r3, r3, #1090519040	; 0x41000000
        m_fadeCounter.m_analogMasks[index] = ledMask;
    e824:	f001 020f 	and.w	r2, r1, #15
                                              : m_fadeCounter.m_activeMask &= ~(1 << index);
    e828:	f04f 0e01 	mov.w	lr, #1
    e82c:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
    e830:	443b      	add	r3, r7
    e832:	fa0e f702 	lsl.w	r7, lr, r2
    e836:	ea28 0707 	bic.w	r7, r8, r7
    e83a:	f8a6 7074 	strh.w	r7, [r6, #116]	; 0x74
        m_fadeCounter.m_analogMasks[index] = ledMask;
    e83e:	eb06 0282 	add.w	r2, r6, r2, lsl #2
                                           : m_patternMasks[pattern] &= ~ledMask;
    e842:	ea6f 070c 	mvn.w	r7, ip
    e846:	4038      	ands	r0, r7
        m_fadeCounter.m_analogMasks[index] = ledMask;
    e848:	f8c2 c0a0 	str.w	ip, [r2, #160]	; 0xa0
                                           : m_patternMasks[pattern] &= ~ledMask;
    e84c:	f8c6 00e8 	str.w	r0, [r6, #232]	; 0xe8
    e850:	f893 2040 	ldrb.w	r2, [r3, #64]	; 0x40
    e854:	f36f 0200 	bfc	r2, #0, #1
    e858:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    return true;
}

void DigitalInOut::IsInHwFault(bool inFault) {
    if (inFault != m_isInFault) {
    e85c:	f894 303d 	ldrb.w	r3, [r4, #61]	; 0x3d
    e860:	2b00      	cmp	r3, #0
    e862:	f000 8086 	beq.w	e972 <_ZN9ClearCore12DigitalInOut4ModeENS_9Connector14ConnectorModesE+0x212>
            m_patternMasks[LED_BLINK_OVERLOAD] &= ~ledMask;
    e866:	f8d6 30f0 	ldr.w	r3, [r6, #240]	; 0xf0
        m_isInFault = inFault;
        ShiftReg.LedInFault(m_ledMask, m_isInFault);
        StatusMgr.OverloadUpdate(1UL << m_clearCorePin, m_isInFault);
    e86a:	4845      	ldr	r0, [pc, #276]	; (e980 <_ZN9ClearCore12DigitalInOut4ModeENS_9Connector14ConnectorModesE+0x220>)
    e86c:	fa0e f101 	lsl.w	r1, lr, r1
        m_isInFault = inFault;
    e870:	2200      	movs	r2, #0
    e872:	401f      	ands	r7, r3
    e874:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
        StatusMgr.OverloadUpdate(1UL << m_clearCorePin, m_isInFault);
    e878:	6800      	ldr	r0, [r0, #0]
    e87a:	f8c6 70f0 	str.w	r7, [r6, #240]	; 0xf0
    e87e:	f7f8 fa99 	bl	6db4 <_ZN9ClearCore13StatusManager14OverloadUpdateEmb>
    e882:	79a3      	ldrb	r3, [r4, #6]
    e884:	e77c      	b.n	e780 <_ZN9ClearCore12DigitalInOut4ModeENS_9Connector14ConnectorModesE+0x20>
            m_overloadTripCnt = OVERLOAD_TRIP_TICKS;
    e886:	220c      	movs	r2, #12
            State(m_outState);
    e888:	6803      	ldr	r3, [r0, #0]
            m_overloadTripCnt = OVERLOAD_TRIP_TICKS;
    e88a:	f880 2058 	strb.w	r2, [r0, #88]	; 0x58
            m_overloadFoldbackCnt = 0;
    e88e:	2600      	movs	r6, #0
            m_mode = newMode;
    e890:	71a1      	strb	r1, [r4, #6]
            State(m_outState);
    e892:	695b      	ldr	r3, [r3, #20]
    e894:	f890 1045 	ldrb.w	r1, [r0, #69]	; 0x45
            m_overloadFoldbackCnt = 0;
    e898:	f8a0 605c 	strh.w	r6, [r0, #92]	; 0x5c
            State(m_outState);
    e89c:	4798      	blx	r3
        index &= 0xf;   // guard against index out of bounds
    e89e:	7922      	ldrb	r2, [r4, #4]
        m_fadeCounter.m_analogMasks[index] = ledMask;
    e8a0:	4936      	ldr	r1, [pc, #216]	; (e97c <_ZN9ClearCore12DigitalInOut4ModeENS_9Connector14ConnectorModesE+0x21c>)
            PMUX_DISABLE(m_outputPort, m_outputDataBit);
    e8a2:	6b20      	ldr	r0, [r4, #48]	; 0x30
    e8a4:	6b63      	ldr	r3, [r4, #52]	; 0x34
                                              : m_fadeCounter.m_activeMask &= ~(1 << index);
    e8a6:	f8b1 7074 	ldrh.w	r7, [r1, #116]	; 0x74
        m_fadeCounter.m_analogMasks[index] = ledMask;
    e8aa:	f002 020f 	and.w	r2, r2, #15
                                              : m_fadeCounter.m_activeMask &= ~(1 << index);
    e8ae:	f04f 0e01 	mov.w	lr, #1
    e8b2:	eb03 13c0 	add.w	r3, r3, r0, lsl #7
    e8b6:	fa0e f002 	lsl.w	r0, lr, r2
    e8ba:	ea27 0700 	bic.w	r7, r7, r0
            ShiftReg.LedInPwm(m_ledMask, false, m_clearCorePin);
    e8be:	f8d4 e008 	ldr.w	lr, [r4, #8]
                                           : m_patternMasks[pattern] &= ~ledMask;
    e8c2:	f8d1 00e8 	ldr.w	r0, [r1, #232]	; 0xe8
                                              : m_fadeCounter.m_activeMask &= ~(1 << index);
    e8c6:	f8a1 7074 	strh.w	r7, [r1, #116]	; 0x74
        m_fadeCounter.m_analogMasks[index] = ledMask;
    e8ca:	eb01 0282 	add.w	r2, r1, r2, lsl #2
            PMUX_DISABLE(m_outputPort, m_outputDataBit);
    e8ce:	f103 4382 	add.w	r3, r3, #1090519040	; 0x41000000
    e8d2:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
                                           : m_patternMasks[pattern] &= ~ledMask;
    e8d6:	ea20 000e 	bic.w	r0, r0, lr
        m_fadeCounter.m_analogMasks[index] = ledMask;
    e8da:	f8c2 e0a0 	str.w	lr, [r2, #160]	; 0xa0
                                           : m_patternMasks[pattern] &= ~ledMask;
    e8de:	f8c1 00e8 	str.w	r0, [r1, #232]	; 0xe8
    e8e2:	f893 2040 	ldrb.w	r2, [r3, #64]	; 0x40
    e8e6:	f366 0200 	bfi	r2, r6, #0, #1
    e8ea:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    e8ee:	79a3      	ldrb	r3, [r4, #6]
            break;
    e8f0:	e746      	b.n	e780 <_ZN9ClearCore12DigitalInOut4ModeENS_9Connector14ConnectorModesE+0x20>
    e8f2:	f103 4282 	add.w	r2, r3, #1090519040	; 0x41000000
    e8f6:	f502 4200 	add.w	r2, r2, #32768	; 0x8000
    e8fa:	6191      	str	r1, [r2, #24]
    e8fc:	e786      	b.n	e80c <_ZN9ClearCore12DigitalInOut4ModeENS_9Connector14ConnectorModesE+0xac>
        return true;
    e8fe:	2001      	movs	r0, #1
    e900:	4770      	bx	lr
            State(0);
    e902:	2100      	movs	r1, #0
    e904:	4798      	blx	r3
    e906:	f9b4 1004 	ldrsh.w	r1, [r4, #4]
    e90a:	4e1c      	ldr	r6, [pc, #112]	; (e97c <_ZN9ClearCore12DigitalInOut4ModeENS_9Connector14ConnectorModesE+0x21c>)
    e90c:	f001 020f 	and.w	r2, r1, #15
        state ? m_patternMasks[pattern] |= ledMask
    e910:	f8d6 30e8 	ldr.w	r3, [r6, #232]	; 0xe8
            PMUX_ENABLE(m_outputPort, m_outputDataBit);
    e914:	6b60      	ldr	r0, [r4, #52]	; 0x34
    e916:	9301      	str	r3, [sp, #4]
    e918:	6b23      	ldr	r3, [r4, #48]	; 0x30
            ShiftReg.LedInPwm(m_ledMask, true, m_clearCorePin);
    e91a:	68a7      	ldr	r7, [r4, #8]
        state ? m_fadeCounter.m_activeMask |= 1 << index
    e91c:	f8b6 8074 	ldrh.w	r8, [r6, #116]	; 0x74
            PMUX_ENABLE(m_outputPort, m_outputDataBit);
    e920:	eb00 13c3 	add.w	r3, r0, r3, lsl #7
    e924:	f04f 0c01 	mov.w	ip, #1
        state ? m_patternMasks[pattern] |= ledMask
    e928:	9801      	ldr	r0, [sp, #4]
        state ? m_fadeCounter.m_activeMask |= 1 << index
    e92a:	fa0c fe02 	lsl.w	lr, ip, r2
    e92e:	f103 4382 	add.w	r3, r3, #1090519040	; 0x41000000
        m_fadeCounter.m_analogMasks[index] = ledMask;
    e932:	eb06 0282 	add.w	r2, r6, r2, lsl #2
    e936:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
        state ? m_fadeCounter.m_activeMask |= 1 << index
    e93a:	ea4e 0e08 	orr.w	lr, lr, r8
        state ? m_patternMasks[pattern] |= ledMask
    e93e:	4338      	orrs	r0, r7
        state ? m_fadeCounter.m_activeMask |= 1 << index
    e940:	f8a6 e074 	strh.w	lr, [r6, #116]	; 0x74
        m_fadeCounter.m_analogMasks[index] = ledMask;
    e944:	f8c2 70a0 	str.w	r7, [r2, #160]	; 0xa0
        state ? m_patternMasks[pattern] |= ledMask
    e948:	f8c6 00e8 	str.w	r0, [r6, #232]	; 0xe8
    e94c:	f893 2040 	ldrb.w	r2, [r3, #64]	; 0x40
    e950:	ea42 020c 	orr.w	r2, r2, ip
    e954:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    if (inFault != m_isInFault) {
    e958:	f894 303d 	ldrb.w	r3, [r4, #61]	; 0x3d
    e95c:	2b00      	cmp	r3, #0
    e95e:	d090      	beq.n	e882 <_ZN9ClearCore12DigitalInOut4ModeENS_9Connector14ConnectorModesE+0x122>
            m_patternMasks[LED_BLINK_OVERLOAD] &= ~ledMask;
    e960:	f8d6 30f0 	ldr.w	r3, [r6, #240]	; 0xf0
        StatusMgr.OverloadUpdate(1UL << m_clearCorePin, m_isInFault);
    e964:	4806      	ldr	r0, [pc, #24]	; (e980 <_ZN9ClearCore12DigitalInOut4ModeENS_9Connector14ConnectorModesE+0x220>)
    e966:	fa0c f101 	lsl.w	r1, ip, r1
        m_isInFault = inFault;
    e96a:	2200      	movs	r2, #0
    e96c:	ea23 0707 	bic.w	r7, r3, r7
    e970:	e780      	b.n	e874 <_ZN9ClearCore12DigitalInOut4ModeENS_9Connector14ConnectorModesE+0x114>
    if (inFault != m_isInFault) {
    e972:	2302      	movs	r3, #2
    e974:	e704      	b.n	e780 <_ZN9ClearCore12DigitalInOut4ModeENS_9Connector14ConnectorModesE+0x20>
    e976:	bf00      	nop
    e978:	0000e6a9 	.word	0x0000e6a9
    e97c:	20001b00 	.word	0x20001b00
    e980:	20000bf8 	.word	0x20000bf8

0000e984 <_ZN9ClearCore12DigitalInOutC1ENS_13ShiftRegister5MasksEPK15PeripheralRouteS5_b>:
DigitalInOut::DigitalInOut(ShiftRegister::Masks ledMask,
    e984:	b570      	push	{r4, r5, r6, lr}
    e986:	461d      	mov	r5, r3
    e988:	4604      	mov	r4, r0
    e98a:	f89d 6010 	ldrb.w	r6, [sp, #16]
      m_overloadFoldbackCnt(0) {
    e98e:	f7f6 fc11 	bl	51b4 <_ZN9ClearCore9DigitalInC1ENS_13ShiftRegister5MasksEPK15PeripheralRoute>
      m_outputPort(outputInfo->gpioPort),
    e992:	f995 3001 	ldrsb.w	r3, [r5, #1]
      m_overloadFoldbackCnt(0) {
    e996:	4a14      	ldr	r2, [pc, #80]	; (e9e8 <_ZN9ClearCore12DigitalInOutC1ENS_13ShiftRegister5MasksEPK15PeripheralRouteS5_b+0x64>)
      m_outputPort(outputInfo->gpioPort),
    e998:	6323      	str	r3, [r4, #48]	; 0x30
      m_overloadFoldbackCnt(0) {
    e99a:	6022      	str	r2, [r4, #0]
      m_outputDataBit(outputInfo->gpioPin),
    e99c:	78aa      	ldrb	r2, [r5, #2]
    e99e:	6362      	str	r2, [r4, #52]	; 0x34
      m_outputDataMask(1UL << outputInfo->gpioPin),
    e9a0:	2301      	movs	r3, #1
    e9a2:	4093      	lsls	r3, r2
      m_overloadFoldbackCnt(0) {
    e9a4:	2200      	movs	r2, #0
    e9a6:	f884 603c 	strb.w	r6, [r4, #60]	; 0x3c
    e9aa:	63a3      	str	r3, [r4, #56]	; 0x38
    e9ac:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
    e9b0:	7aeb      	ldrb	r3, [r5, #11]
    e9b2:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
    e9b6:	230c      	movs	r3, #12
    e9b8:	f884 3058 	strb.w	r3, [r4, #88]	; 0x58
    e9bc:	f884 2045 	strb.w	r2, [r4, #69]	; 0x45
    e9c0:	64a2      	str	r2, [r4, #72]	; 0x48
    e9c2:	64e2      	str	r2, [r4, #76]	; 0x4c
    e9c4:	6522      	str	r2, [r4, #80]	; 0x50
    e9c6:	6562      	str	r2, [r4, #84]	; 0x54
    e9c8:	f884 2059 	strb.w	r2, [r4, #89]	; 0x59
    e9cc:	f884 205a 	strb.w	r2, [r4, #90]	; 0x5a
    e9d0:	f884 205b 	strb.w	r2, [r4, #91]	; 0x5b
    e9d4:	f8a4 205c 	strh.w	r2, [r4, #92]	; 0x5c
    m_tc = tc_modules[outputInfo->tcNum];
    e9d8:	7aaa      	ldrb	r2, [r5, #10]
    e9da:	4b04      	ldr	r3, [pc, #16]	; (e9ec <_ZN9ClearCore12DigitalInOutC1ENS_13ShiftRegister5MasksEPK15PeripheralRouteS5_b+0x68>)
    e9dc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    e9e0:	6423      	str	r3, [r4, #64]	; 0x40
}
    e9e2:	4620      	mov	r0, r4
    e9e4:	bd70      	pop	{r4, r5, r6, pc}
    e9e6:	bf00      	nop
    e9e8:	00022ee8 	.word	0x00022ee8
    e9ec:	00022f10 	.word	0x00022f10

0000e9f0 <_ZN9ClearCore12DigitalInOut7RefreshEv>:
void DigitalInOut::Refresh() {
    e9f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    e9f2:	4604      	mov	r4, r0
    DigitalIn::Refresh();
    e9f4:	f7f6 fb2e 	bl	5054 <_ZN9ClearCore9DigitalIn7RefreshEv>
    switch (m_mode) {
    e9f8:	79a3      	ldrb	r3, [r4, #6]
    e9fa:	2b04      	cmp	r3, #4
    e9fc:	d12d      	bne.n	ea5a <_ZN9ClearCore12DigitalInOut7RefreshEv+0x6a>
            if (m_overloadFoldbackCnt) {
    e9fe:	f8b4 305c 	ldrh.w	r3, [r4, #92]	; 0x5c
    ea02:	bb5b      	cbnz	r3, ea5c <_ZN9ClearCore12DigitalInOut7RefreshEv+0x6c>
            else if (m_outState && !StateRT()) {
    ea04:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
    ea08:	2b00      	cmp	r3, #0
    ea0a:	f040 809d 	bne.w	eb48 <_ZN9ClearCore12DigitalInOut7RefreshEv+0x158>
    if (inFault != m_isInFault) {
    ea0e:	f894 303d 	ldrb.w	r3, [r4, #61]	; 0x3d
                m_overloadTripCnt = OVERLOAD_TRIP_TICKS;
    ea12:	220c      	movs	r2, #12
    ea14:	f884 2058 	strb.w	r2, [r4, #88]	; 0x58
    if (inFault != m_isInFault) {
    ea18:	b19b      	cbz	r3, ea42 <_ZN9ClearCore12DigitalInOut7RefreshEv+0x52>
    ea1a:	4d75      	ldr	r5, [pc, #468]	; (ebf0 <_ZN9ClearCore12DigitalInOut7RefreshEv+0x200>)
    ea1c:	68a7      	ldr	r7, [r4, #8]
    ea1e:	f8d5 30f0 	ldr.w	r3, [r5, #240]	; 0xf0
        StatusMgr.OverloadUpdate(1UL << m_clearCorePin, m_isInFault);
    ea22:	f9b4 1004 	ldrsh.w	r1, [r4, #4]
    ea26:	4873      	ldr	r0, [pc, #460]	; (ebf4 <_ZN9ClearCore12DigitalInOut7RefreshEv+0x204>)
        m_isInFault = inFault;
    ea28:	2200      	movs	r2, #0
        StatusMgr.OverloadUpdate(1UL << m_clearCorePin, m_isInFault);
    ea2a:	2601      	movs	r6, #1
    ea2c:	ea23 0307 	bic.w	r3, r3, r7
        m_isInFault = inFault;
    ea30:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
        StatusMgr.OverloadUpdate(1UL << m_clearCorePin, m_isInFault);
    ea34:	fa06 f101 	lsl.w	r1, r6, r1
    ea38:	6800      	ldr	r0, [r0, #0]
    ea3a:	f8c5 30f0 	str.w	r3, [r5, #240]	; 0xf0
    ea3e:	f7f8 f9b9 	bl	6db4 <_ZN9ClearCore13StatusManager14OverloadUpdateEmb>
            if (!m_pulseActive) {
    ea42:	f894 3059 	ldrb.w	r3, [r4, #89]	; 0x59
    ea46:	b143      	cbz	r3, ea5a <_ZN9ClearCore12DigitalInOut7RefreshEv+0x6a>
            if (m_pulseStopCount == 0 || m_pulseCounter < m_pulseStopCount) {
    ea48:	f8b4 3054 	ldrh.w	r3, [r4, #84]	; 0x54
    ea4c:	b303      	cbz	r3, ea90 <_ZN9ClearCore12DigitalInOut7RefreshEv+0xa0>
    ea4e:	f8b4 2056 	ldrh.w	r2, [r4, #86]	; 0x56
    ea52:	429a      	cmp	r2, r3
    ea54:	db1c      	blt.n	ea90 <_ZN9ClearCore12DigitalInOut7RefreshEv+0xa0>
            else if (m_pulseCounter == m_pulseStopCount) {
    ea56:	4293      	cmp	r3, r2
    ea58:	d070      	beq.n	eb3c <_ZN9ClearCore12DigitalInOut7RefreshEv+0x14c>
    ea5a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
                if (!(--m_overloadFoldbackCnt)) {
    ea5c:	3b01      	subs	r3, #1
    ea5e:	b29b      	uxth	r3, r3
    ea60:	f8a4 305c 	strh.w	r3, [r4, #92]	; 0x5c
    ea64:	2b00      	cmp	r3, #0
    ea66:	d1ec      	bne.n	ea42 <_ZN9ClearCore12DigitalInOut7RefreshEv+0x52>
    ea68:	f894 2045 	ldrb.w	r2, [r4, #69]	; 0x45
    ea6c:	f894 303c 	ldrb.w	r3, [r4, #60]	; 0x3c
    ea70:	429a      	cmp	r2, r3
    ea72:	6b23      	ldr	r3, [r4, #48]	; 0x30
    ea74:	6ba2      	ldr	r2, [r4, #56]	; 0x38
    ea76:	ea4f 13c3 	mov.w	r3, r3, lsl #7
    ea7a:	f103 4382 	add.w	r3, r3, #1090519040	; 0x41000000
    ea7e:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
    ea82:	bf14      	ite	ne
    ea84:	619a      	strne	r2, [r3, #24]
    ea86:	615a      	streq	r2, [r3, #20]
                    m_overloadTripCnt = OVERLOAD_TRIP_TICKS;
    ea88:	230c      	movs	r3, #12
    ea8a:	f884 3058 	strb.w	r3, [r4, #88]	; 0x58
    ea8e:	e7d8      	b.n	ea42 <_ZN9ClearCore12DigitalInOut7RefreshEv+0x52>
                if (m_pulseValue) {
    ea90:	f894 305a 	ldrb.w	r3, [r4, #90]	; 0x5a
    ea94:	bb5b      	cbnz	r3, eaee <_ZN9ClearCore12DigitalInOut7RefreshEv+0xfe>
                    if (m_pulseStopPending) {
    ea96:	f894 305b 	ldrb.w	r3, [r4, #91]	; 0x5b
    ea9a:	2b00      	cmp	r3, #0
    ea9c:	d14e      	bne.n	eb3c <_ZN9ClearCore12DigitalInOut7RefreshEv+0x14c>
                    else if (tickCnt - m_pulseStart >= m_pulseOffTicks) {
    ea9e:	4a56      	ldr	r2, [pc, #344]	; (ebf8 <_ZN9ClearCore12DigitalInOut7RefreshEv+0x208>)
    eaa0:	6d20      	ldr	r0, [r4, #80]	; 0x50
    eaa2:	6813      	ldr	r3, [r2, #0]
    eaa4:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
    eaa6:	1a1b      	subs	r3, r3, r0
    eaa8:	428b      	cmp	r3, r1
    eaaa:	d3d6      	bcc.n	ea5a <_ZN9ClearCore12DigitalInOut7RefreshEv+0x6a>
                        OutputPin(!m_overloadFoldbackCnt);
    eaac:	f8b4 305c 	ldrh.w	r3, [r4, #92]	; 0x5c
    eab0:	f894 103c 	ldrb.w	r1, [r4, #60]	; 0x3c
                        m_pulseStart = tickCnt;
    eab4:	6812      	ldr	r2, [r2, #0]
    eab6:	6522      	str	r2, [r4, #80]	; 0x50
    eab8:	fab3 f383 	clz	r3, r3
    eabc:	095b      	lsrs	r3, r3, #5
    eabe:	428b      	cmp	r3, r1
    eac0:	6b23      	ldr	r3, [r4, #48]	; 0x30
    eac2:	ea4f 13c3 	mov.w	r3, r3, lsl #7
    eac6:	f103 4382 	add.w	r3, r3, #1090519040	; 0x41000000
    eaca:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
                        m_overloadTripCnt = OVERLOAD_TRIP_TICKS;
    eace:	f04f 020c 	mov.w	r2, #12
    ead2:	f884 2058 	strb.w	r2, [r4, #88]	; 0x58
                        m_pulseValue = true;
    ead6:	f04f 0001 	mov.w	r0, #1
    eada:	6ba2      	ldr	r2, [r4, #56]	; 0x38
    eadc:	f884 005a 	strb.w	r0, [r4, #90]	; 0x5a
    eae0:	bf14      	ite	ne
    eae2:	619a      	strne	r2, [r3, #24]
    eae4:	615a      	streq	r2, [r3, #20]
                        m_outState = true;
    eae6:	2301      	movs	r3, #1
    eae8:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
    eaec:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
                    if (tickCnt - m_pulseStart >= m_pulseOnTicks) {
    eaee:	4a42      	ldr	r2, [pc, #264]	; (ebf8 <_ZN9ClearCore12DigitalInOut7RefreshEv+0x208>)
    eaf0:	6d20      	ldr	r0, [r4, #80]	; 0x50
    eaf2:	6813      	ldr	r3, [r2, #0]
    eaf4:	6ca1      	ldr	r1, [r4, #72]	; 0x48
    eaf6:	1a1b      	subs	r3, r3, r0
    eaf8:	428b      	cmp	r3, r1
    eafa:	d3ae      	bcc.n	ea5a <_ZN9ClearCore12DigitalInOut7RefreshEv+0x6a>
                        m_pulseStart = tickCnt;
    eafc:	6812      	ldr	r2, [r2, #0]
    eafe:	f894 303c 	ldrb.w	r3, [r4, #60]	; 0x3c
    eb02:	6522      	str	r2, [r4, #80]	; 0x50
                        m_pulseValue = false;
    eb04:	2100      	movs	r1, #0
                        m_overloadTripCnt = OVERLOAD_TRIP_TICKS;
    eb06:	220c      	movs	r2, #12
                        m_pulseValue = false;
    eb08:	f884 105a 	strb.w	r1, [r4, #90]	; 0x5a
                        m_overloadTripCnt = OVERLOAD_TRIP_TICKS;
    eb0c:	f884 2058 	strb.w	r2, [r4, #88]	; 0x58
    eb10:	2b00      	cmp	r3, #0
    eb12:	d15b      	bne.n	ebcc <_ZN9ClearCore12DigitalInOut7RefreshEv+0x1dc>
    eb14:	6b23      	ldr	r3, [r4, #48]	; 0x30
    eb16:	6ba2      	ldr	r2, [r4, #56]	; 0x38
    eb18:	01db      	lsls	r3, r3, #7
    eb1a:	f103 4382 	add.w	r3, r3, #1090519040	; 0x41000000
    eb1e:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
    eb22:	615a      	str	r2, [r3, #20]
                        ++m_pulseCounter;
    eb24:	f8b4 3056 	ldrh.w	r3, [r4, #86]	; 0x56
                        if (m_pulseStopPending) {
    eb28:	f894 205b 	ldrb.w	r2, [r4, #91]	; 0x5b
                        ++m_pulseCounter;
    eb2c:	3301      	adds	r3, #1
                        m_outState = false;
    eb2e:	2100      	movs	r1, #0
                        ++m_pulseCounter;
    eb30:	f8a4 3056 	strh.w	r3, [r4, #86]	; 0x56
                        m_outState = false;
    eb34:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
                        if (m_pulseStopPending) {
    eb38:	2a00      	cmp	r2, #0
    eb3a:	d08e      	beq.n	ea5a <_ZN9ClearCore12DigitalInOut7RefreshEv+0x6a>
                            m_pulseActive = false;
    eb3c:	2300      	movs	r3, #0
    eb3e:	f884 3059 	strb.w	r3, [r4, #89]	; 0x59
                            m_pulseStopPending = false;
    eb42:	f884 305b 	strb.w	r3, [r4, #91]	; 0x5b
    eb46:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
            else if (m_outState && !StateRT()) {
    eb48:	4620      	mov	r0, r4
    eb4a:	f7f6 fb57 	bl	51fc <_ZN9ClearCore9DigitalIn7StateRTEv>
    eb4e:	2800      	cmp	r0, #0
    eb50:	f47f af5d 	bne.w	ea0e <_ZN9ClearCore12DigitalInOut7RefreshEv+0x1e>
                if (m_overloadTripCnt && !--m_overloadTripCnt) {
    eb54:	f894 3058 	ldrb.w	r3, [r4, #88]	; 0x58
    eb58:	2b00      	cmp	r3, #0
    eb5a:	f43f af72 	beq.w	ea42 <_ZN9ClearCore12DigitalInOut7RefreshEv+0x52>
    eb5e:	3b01      	subs	r3, #1
    eb60:	b2db      	uxtb	r3, r3
    eb62:	f884 3058 	strb.w	r3, [r4, #88]	; 0x58
    eb66:	2b00      	cmp	r3, #0
    eb68:	f47f af6b 	bne.w	ea42 <_ZN9ClearCore12DigitalInOut7RefreshEv+0x52>
    if (inFault != m_isInFault) {
    eb6c:	f894 603d 	ldrb.w	r6, [r4, #61]	; 0x3d
    eb70:	b9e6      	cbnz	r6, ebac <_ZN9ClearCore12DigitalInOut7RefreshEv+0x1bc>
            m_patternMasks[LED_BLINK_OVERLOAD] |= ledMask;
    eb72:	4a1f      	ldr	r2, [pc, #124]	; (ebf0 <_ZN9ClearCore12DigitalInOut7RefreshEv+0x200>)
        StatusMgr.OverloadUpdate(1UL << m_clearCorePin, m_isInFault);
    eb74:	491f      	ldr	r1, [pc, #124]	; (ebf4 <_ZN9ClearCore12DigitalInOut7RefreshEv+0x204>)
    eb76:	f8d2 00f0 	ldr.w	r0, [r2, #240]	; 0xf0
    eb7a:	68a3      	ldr	r3, [r4, #8]
    eb7c:	680f      	ldr	r7, [r1, #0]
    eb7e:	f9b4 1004 	ldrsh.w	r1, [r4, #4]
        m_isInFault = inFault;
    eb82:	2501      	movs	r5, #1
    eb84:	4303      	orrs	r3, r0
    eb86:	f884 503d 	strb.w	r5, [r4, #61]	; 0x3d
        StatusMgr.OverloadUpdate(1UL << m_clearCorePin, m_isInFault);
    eb8a:	fa05 f101 	lsl.w	r1, r5, r1
    eb8e:	4638      	mov	r0, r7
    eb90:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
    eb94:	462a      	mov	r2, r5
    eb96:	f7f8 f90d 	bl	6db4 <_ZN9ClearCore13StatusManager14OverloadUpdateEmb>
        if (inFault) {
            StatusMgr.BlinkCode(
                BlinkCodeDriver::BLINK_GROUP_IO_OVERLOAD,
                1UL << m_clearCorePin);
    eb9a:	f9b4 2004 	ldrsh.w	r2, [r4, #4]
    eb9e:	fa05 f202 	lsl.w	r2, r5, r2
    eba2:	4638      	mov	r0, r7
    eba4:	4631      	mov	r1, r6
    eba6:	b2d2      	uxtb	r2, r2
    eba8:	f7f7 ff58 	bl	6a5c <_ZN9ClearCore13StatusManager9BlinkCodeENS_15BlinkCodeDriver15BlinkCodeGroupsEh>
    ebac:	f894 303c 	ldrb.w	r3, [r4, #60]	; 0x3c
    ebb0:	b9ab      	cbnz	r3, ebde <_ZN9ClearCore12DigitalInOut7RefreshEv+0x1ee>
    ebb2:	6b23      	ldr	r3, [r4, #48]	; 0x30
    ebb4:	6ba2      	ldr	r2, [r4, #56]	; 0x38
    ebb6:	01db      	lsls	r3, r3, #7
    ebb8:	f103 4382 	add.w	r3, r3, #1090519040	; 0x41000000
    ebbc:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
    ebc0:	615a      	str	r2, [r3, #20]
                    m_overloadFoldbackCnt = OVERLOAD_FOLDBACK_TICKS;
    ebc2:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
    ebc6:	f8a4 305c 	strh.w	r3, [r4, #92]	; 0x5c
    ebca:	e73a      	b.n	ea42 <_ZN9ClearCore12DigitalInOut7RefreshEv+0x52>
    ebcc:	6b23      	ldr	r3, [r4, #48]	; 0x30
    ebce:	6ba2      	ldr	r2, [r4, #56]	; 0x38
    ebd0:	01db      	lsls	r3, r3, #7
    ebd2:	f103 4382 	add.w	r3, r3, #1090519040	; 0x41000000
    ebd6:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
    ebda:	619a      	str	r2, [r3, #24]
    ebdc:	e7a2      	b.n	eb24 <_ZN9ClearCore12DigitalInOut7RefreshEv+0x134>
    ebde:	6b23      	ldr	r3, [r4, #48]	; 0x30
    ebe0:	6ba2      	ldr	r2, [r4, #56]	; 0x38
    ebe2:	01db      	lsls	r3, r3, #7
    ebe4:	f103 4382 	add.w	r3, r3, #1090519040	; 0x41000000
    ebe8:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
    ebec:	619a      	str	r2, [r3, #24]
    ebee:	e7e8      	b.n	ebc2 <_ZN9ClearCore12DigitalInOut7RefreshEv+0x1d2>
    ebf0:	20001b00 	.word	0x20001b00
    ebf4:	20000bf8 	.word	0x20000bf8
    ebf8:	20001d1c 	.word	0x20001d1c

0000ebfc <_ZN9ClearCore12DigitalInOut5StateEv>:
    switch (m_mode) {
    ebfc:	7983      	ldrb	r3, [r0, #6]
    ebfe:	2b04      	cmp	r3, #4
    ec00:	d014      	beq.n	ec2c <_ZN9ClearCore12DigitalInOut5StateEv+0x30>
    ec02:	2b06      	cmp	r3, #6
    ec04:	d005      	beq.n	ec12 <_ZN9ClearCore12DigitalInOut5StateEv+0x16>
    ec06:	2b02      	cmp	r3, #2
    ec08:	d001      	beq.n	ec0e <_ZN9ClearCore12DigitalInOut5StateEv+0x12>
            state = 0;
    ec0a:	2000      	movs	r0, #0
    ec0c:	4770      	bx	lr
            state = DigitalIn::State();
    ec0e:	f7f6 b9a7 	b.w	4f60 <_ZN9ClearCore9DigitalIn5StateEv>
            if (!m_tc) {
    ec12:	6c03      	ldr	r3, [r0, #64]	; 0x40
    ec14:	b173      	cbz	r3, ec34 <_ZN9ClearCore12DigitalInOut5StateEv+0x38>
                state = m_tc->COUNT8.CCBUF[m_tcPadNum].reg;
    ec16:	f890 2044 	ldrb.w	r2, [r0, #68]	; 0x44
            if (m_logicInversion) {
    ec1a:	f890 103c 	ldrb.w	r1, [r0, #60]	; 0x3c
                state = m_tc->COUNT8.CCBUF[m_tcPadNum].reg;
    ec1e:	4413      	add	r3, r2
    ec20:	f893 0030 	ldrb.w	r0, [r3, #48]	; 0x30
            if (m_logicInversion) {
    ec24:	b929      	cbnz	r1, ec32 <_ZN9ClearCore12DigitalInOut5StateEv+0x36>
                state = 255 - m_tc->COUNT8.CCBUF[m_tcPadNum].reg;
    ec26:	f1c0 00ff 	rsb	r0, r0, #255	; 0xff
    ec2a:	4770      	bx	lr
            state = m_outState;
    ec2c:	f890 0045 	ldrb.w	r0, [r0, #69]	; 0x45
            break;
    ec30:	4770      	bx	lr
    ec32:	4770      	bx	lr
    int16_t state = -1;
    ec34:	f04f 30ff 	mov.w	r0, #4294967295
}
    ec38:	4770      	bx	lr
    ec3a:	bf00      	nop

0000ec3c <_ZN9ClearCore12DigitalInOut10InitializeE13ClearCorePins>:
void DigitalInOut::Initialize(ClearCorePins clearCorePin) {
    ec3c:	b538      	push	{r3, r4, r5, lr}
    PMUX_SELECTION(m_outputPort, m_outputDataBit, PER_TIMER);
    ec3e:	6b45      	ldr	r5, [r0, #52]	; 0x34
    m_outState = false;
    ec40:	2200      	movs	r2, #0
    PMUX_SELECTION(m_outputPort, m_outputDataBit, PER_TIMER);
    ec42:	07eb      	lsls	r3, r5, #31
void DigitalInOut::Initialize(ClearCorePins clearCorePin) {
    ec44:	4604      	mov	r4, r0
    m_outState = false;
    ec46:	f880 2045 	strb.w	r2, [r0, #69]	; 0x45
    m_isInFault = false;
    ec4a:	f880 203d 	strb.w	r2, [r0, #61]	; 0x3d
    m_pulseActive = false;
    ec4e:	f880 2059 	strb.w	r2, [r0, #89]	; 0x59
    m_pulseStopPending = false;
    ec52:	f880 205b 	strb.w	r2, [r0, #91]	; 0x5b
    PMUX_SELECTION(m_outputPort, m_outputDataBit, PER_TIMER);
    ec56:	d41a      	bmi.n	ec8e <_ZN9ClearCore12DigitalInOut10InitializeE13ClearCorePins+0x52>
    ec58:	6b02      	ldr	r2, [r0, #48]	; 0x30
    ec5a:	01d2      	lsls	r2, r2, #7
    ec5c:	f102 4382 	add.w	r3, r2, #1090519040	; 0x41000000
    ec60:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
    ec64:	eb03 0355 	add.w	r3, r3, r5, lsr #1
    ec68:	2004      	movs	r0, #4
    ec6a:	f893 2030 	ldrb.w	r2, [r3, #48]	; 0x30
    ec6e:	f360 0203 	bfi	r2, r0, #0, #4
    ec72:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
    DigitalIn::Initialize(clearCorePin);
    ec76:	4620      	mov	r0, r4
    ec78:	f7f6 f986 	bl	4f88 <_ZN9ClearCore9DigitalIn10InitializeE13ClearCorePins>
    DATA_DIRECTION_OUTPUT(m_outputPort, m_outputDataMask);
    ec7c:	6b23      	ldr	r3, [r4, #48]	; 0x30
    ec7e:	6ba2      	ldr	r2, [r4, #56]	; 0x38
    ec80:	01db      	lsls	r3, r3, #7
    ec82:	f103 4382 	add.w	r3, r3, #1090519040	; 0x41000000
    ec86:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
    ec8a:	609a      	str	r2, [r3, #8]
    ec8c:	bd38      	pop	{r3, r4, r5, pc}
    PMUX_SELECTION(m_outputPort, m_outputDataBit, PER_TIMER);
    ec8e:	6b00      	ldr	r0, [r0, #48]	; 0x30
    ec90:	01c0      	lsls	r0, r0, #7
    ec92:	f100 4282 	add.w	r2, r0, #1090519040	; 0x41000000
    ec96:	f502 4200 	add.w	r2, r2, #32768	; 0x8000
    ec9a:	eb02 0255 	add.w	r2, r2, r5, lsr #1
    ec9e:	2004      	movs	r0, #4
    eca0:	f892 3030 	ldrb.w	r3, [r2, #48]	; 0x30
    eca4:	f360 1307 	bfi	r3, r0, #4, #4
    eca8:	f882 3030 	strb.w	r3, [r2, #48]	; 0x30
    ecac:	e7e3      	b.n	ec76 <_ZN9ClearCore12DigitalInOut10InitializeE13ClearCorePins+0x3a>
    ecae:	bf00      	nop

0000ecb0 <_ZN9ClearCore19DigitalInOutHBridge4TypeEv>:

        \return The type of the current connector.
    **/
    Connector::ConnectorTypes Type() override {
        return Connector::H_BRIDGE_TYPE;
    }
    ecb0:	2005      	movs	r0, #5
    ecb2:	4770      	bx	lr

0000ecb4 <_ZN9ClearCore19DigitalInOutHBridge10IsWritableEv>:
}

bool DigitalInOutHBridge::IsWritable() {
    bool isWritable;

    switch (m_mode) {
    ecb4:	7980      	ldrb	r0, [r0, #6]
    ecb6:	3804      	subs	r0, #4
        default:
            isWritable = false;
            break;
    }
    return isWritable;
}
    ecb8:	2804      	cmp	r0, #4
    ecba:	bf8c      	ite	hi
    ecbc:	2000      	movhi	r0, #0
    ecbe:	2001      	movls	r0, #1
    ecc0:	4770      	bx	lr
    ecc2:	bf00      	nop

0000ecc4 <_ZN9ClearCore19DigitalInOutHBridgeC1ENS_13ShiftRegister5MasksEPK15PeripheralRouteS5_S5_S5_4IRQnb>:
DigitalInOutHBridge::DigitalInOutHBridge(ShiftRegister::Masks ledMask,
    ecc4:	b5f0      	push	{r4, r5, r6, r7, lr}
    ecc6:	b083      	sub	sp, #12
    ecc8:	f89d 402c 	ldrb.w	r4, [sp, #44]	; 0x2c
      m_forceToneDuration(false) {
    eccc:	9400      	str	r4, [sp, #0]
DigitalInOutHBridge::DigitalInOutHBridge(ShiftRegister::Masks ledMask,
    ecce:	4604      	mov	r4, r0
    ecd0:	9d08      	ldr	r5, [sp, #32]
    ecd2:	9e09      	ldr	r6, [sp, #36]	; 0x24
    ecd4:	f9bd 7028 	ldrsh.w	r7, [sp, #40]	; 0x28
      m_forceToneDuration(false) {
    ecd8:	f7ff fe54 	bl	e984 <_ZN9ClearCore12DigitalInOutC1ENS_13ShiftRegister5MasksEPK15PeripheralRouteS5_b>
    ecdc:	2300      	movs	r3, #0
    ecde:	490f      	ldr	r1, [pc, #60]	; (ed1c <_ZN9ClearCore19DigitalInOutHBridgeC1ENS_13ShiftRegister5MasksEPK15PeripheralRouteS5_S5_S5_4IRQnb+0x58>)
    ece0:	f8a4 3060 	strh.w	r3, [r4, #96]	; 0x60
    ece4:	f640 42cc 	movw	r2, #3276	; 0xccc
    ece8:	f8a4 3062 	strh.w	r3, [r4, #98]	; 0x62
    ecec:	6663      	str	r3, [r4, #100]	; 0x64
    ecee:	66a3      	str	r3, [r4, #104]	; 0x68
    ecf0:	66e3      	str	r3, [r4, #108]	; 0x6c
    ecf2:	f884 3070 	strb.w	r3, [r4, #112]	; 0x70
    ecf6:	f884 3082 	strb.w	r3, [r4, #130]	; 0x82
    ecfa:	f884 3083 	strb.w	r3, [r4, #131]	; 0x83
    ecfe:	6765      	str	r5, [r4, #116]	; 0x74
    ed00:	67a6      	str	r6, [r4, #120]	; 0x78
    ed02:	f8a4 7080 	strh.w	r7, [r4, #128]	; 0x80
    ed06:	6021      	str	r1, [r4, #0]
    ed08:	f8a4 205e 	strh.w	r2, [r4, #94]	; 0x5e
    m_tcc = tcc_modules[pwmAInfo->tccNum];
    ed0c:	7b2a      	ldrb	r2, [r5, #12]
    ed0e:	4b04      	ldr	r3, [pc, #16]	; (ed20 <_ZN9ClearCore19DigitalInOutHBridgeC1ENS_13ShiftRegister5MasksEPK15PeripheralRouteS5_S5_S5_4IRQnb+0x5c>)
    ed10:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    ed14:	67e3      	str	r3, [r4, #124]	; 0x7c
}
    ed16:	4620      	mov	r0, r4
    ed18:	b003      	add	sp, #12
    ed1a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    ed1c:	00022f38 	.word	0x00022f38
    ed20:	00022f60 	.word	0x00022f60

0000ed24 <_ZN9ClearCore19DigitalInOutHBridge10FaultStateEb>:
    m_mode = newMode;

    return modeChangeSuccess;
}

void DigitalInOutHBridge::FaultState(bool isFaulted) {
    ed24:	b510      	push	{r4, lr}
    m_inFault = isFaulted;
    // Disable H-bridge driver when in an overload state
    switch (Mode()) {
    ed26:	6803      	ldr	r3, [r0, #0]
    ed28:	4a12      	ldr	r2, [pc, #72]	; (ed74 <_ZN9ClearCore19DigitalInOutHBridge10FaultStateEb+0x50>)
    ed2a:	681b      	ldr	r3, [r3, #0]
    m_inFault = isFaulted;
    ed2c:	f880 1082 	strb.w	r1, [r0, #130]	; 0x82
    ed30:	4293      	cmp	r3, r2
void DigitalInOutHBridge::FaultState(bool isFaulted) {
    ed32:	b082      	sub	sp, #8
    ed34:	4604      	mov	r4, r0
    ed36:	d115      	bne.n	ed64 <_ZN9ClearCore19DigitalInOutHBridge10FaultStateEb+0x40>
        return m_mode;
    ed38:	7980      	ldrb	r0, [r0, #6]
    ed3a:	2808      	cmp	r0, #8
    ed3c:	d805      	bhi.n	ed4a <_ZN9ClearCore19DigitalInOutHBridge10FaultStateEb+0x26>
    ed3e:	2301      	movs	r3, #1
    ed40:	fa03 f000 	lsl.w	r0, r3, r0
    ed44:	f410 7fd0 	tst.w	r0, #416	; 0x1a0
    ed48:	d101      	bne.n	ed4e <_ZN9ClearCore19DigitalInOutHBridge10FaultStateEb+0x2a>
            DATA_OUTPUT_STATE(m_outputPort, m_outputDataMask, !isFaulted);
            break;
        default:
            break;
    }
}
    ed4a:	b002      	add	sp, #8
    ed4c:	bd10      	pop	{r4, pc}
            DATA_OUTPUT_STATE(m_outputPort, m_outputDataMask, !isFaulted);
    ed4e:	6b23      	ldr	r3, [r4, #48]	; 0x30
    ed50:	6ba2      	ldr	r2, [r4, #56]	; 0x38
    ed52:	01db      	lsls	r3, r3, #7
    ed54:	f103 4382 	add.w	r3, r3, #1090519040	; 0x41000000
    ed58:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
    ed5c:	b131      	cbz	r1, ed6c <_ZN9ClearCore19DigitalInOutHBridge10FaultStateEb+0x48>
    ed5e:	615a      	str	r2, [r3, #20]
}
    ed60:	b002      	add	sp, #8
    ed62:	bd10      	pop	{r4, pc}
    ed64:	9101      	str	r1, [sp, #4]
    switch (Mode()) {
    ed66:	4798      	blx	r3
    ed68:	9901      	ldr	r1, [sp, #4]
    ed6a:	e7e6      	b.n	ed3a <_ZN9ClearCore19DigitalInOutHBridge10FaultStateEb+0x16>
            DATA_OUTPUT_STATE(m_outputPort, m_outputDataMask, !isFaulted);
    ed6c:	619a      	str	r2, [r3, #24]
}
    ed6e:	b002      	add	sp, #8
    ed70:	bd10      	pop	{r4, pc}
    ed72:	bf00      	nop
    ed74:	00006941 	.word	0x00006941

0000ed78 <_ZN9ClearCore19DigitalInOutHBridge5StateEv>:
    switch (m_mode) {
    ed78:	7982      	ldrb	r2, [r0, #6]
    ed7a:	2a07      	cmp	r2, #7
int16_t DigitalInOutHBridge::State() {
    ed7c:	4601      	mov	r1, r0
    ed7e:	d808      	bhi.n	ed92 <_ZN9ClearCore19DigitalInOutHBridge5StateEv+0x1a>
    ed80:	2301      	movs	r3, #1
    ed82:	4093      	lsls	r3, r2
    ed84:	f013 0f54 	tst.w	r3, #84	; 0x54
    ed88:	d112      	bne.n	edb0 <_ZN9ClearCore19DigitalInOutHBridge5StateEv+0x38>
    ed8a:	f013 00a0 	ands.w	r0, r3, #160	; 0xa0
    ed8e:	d102      	bne.n	ed96 <_ZN9ClearCore19DigitalInOutHBridge5StateEv+0x1e>
    ed90:	4770      	bx	lr
            state = 0;
    ed92:	2000      	movs	r0, #0
}
    ed94:	4770      	bx	lr
                static_cast<int16_t>((static_cast<int32_t>(m_tcc->CC[0].reg) -
    ed96:	6fcb      	ldr	r3, [r1, #124]	; 0x7c
    ed98:	6c58      	ldr	r0, [r3, #68]	; 0x44
                                      (m_tcc->PER.reg >> 1)) * INT16_MAX / m_tcc->PER.reg >> 1);
    ed9a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
    ed9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
                static_cast<int16_t>((static_cast<int32_t>(m_tcc->CC[0].reg) -
    ed9e:	eba0 0052 	sub.w	r0, r0, r2, lsr #1
                                      (m_tcc->PER.reg >> 1)) * INT16_MAX / m_tcc->PER.reg >> 1);
    eda2:	ebc0 30c0 	rsb	r0, r0, r0, lsl #15
    eda6:	fbb0 f0f3 	udiv	r0, r0, r3
            state =
    edaa:	f340 004f 	sbfx	r0, r0, #1, #16
    edae:	4770      	bx	lr
            state = DigitalInOut::State();
    edb0:	f7ff bf24 	b.w	ebfc <_ZN9ClearCore12DigitalInOut5StateEv>

0000edb4 <_ZN9ClearCore19DigitalInOutHBridge5StateEs>:
bool DigitalInOutHBridge::State(int16_t newState) {
    edb4:	b510      	push	{r4, lr}
    switch (m_mode) {
    edb6:	7983      	ldrb	r3, [r0, #6]
    uint16_t halfDuty = m_tcc->PER.reg >> 1; // 50% duty cycle
    edb8:	6fc4      	ldr	r4, [r0, #124]	; 0x7c
    switch (m_mode) {
    edba:	3b02      	subs	r3, #2
    uint16_t halfDuty = m_tcc->PER.reg >> 1; // 50% duty cycle
    edbc:	6c22      	ldr	r2, [r4, #64]	; 0x40
    switch (m_mode) {
    edbe:	2b05      	cmp	r3, #5
    edc0:	d82a      	bhi.n	ee18 <_ZN9ClearCore19DigitalInOutHBridge5StateEs+0x64>
    edc2:	e8df f003 	tbb	[pc, r3]
    edc6:	2925      	.short	0x2925
    edc8:	13250325 	.word	0x13250325
        index &= 0xf;   // guard against index out of bounds
    edcc:	7900      	ldrb	r0, [r0, #4]
        m_fadeCounter.m_valuesBuf[index] = value;
    edce:	4b13      	ldr	r3, [pc, #76]	; (ee1c <_ZN9ClearCore19DigitalInOutHBridge5StateEs+0x68>)
    edd0:	f000 000f 	and.w	r0, r0, #15
            if (newState == INT16_MIN) {
    edd4:	f511 4f00 	cmn.w	r1, #32768	; 0x8000
    edd8:	4403      	add	r3, r0
                ShiftReg.LedPwmValue(m_clearCorePin, labs(newState) >> 7);
    edda:	bf1b      	ittet	ne
    eddc:	ea81 70e1 	eorne.w	r0, r1, r1, asr #31
    ede0:	eba0 70e1 	subne.w	r0, r0, r1, asr #31
    ede4:	20ff      	moveq	r0, #255	; 0xff
    ede6:	11c0      	asrne	r0, r0, #7
    ede8:	f883 008d 	strb.w	r0, [r3, #141]	; 0x8d
            m_tcc->CCBUF[0].reg = halfDuty + halfDuty * newState / INT16_MAX;
    edec:	f3c2 024f 	ubfx	r2, r2, #1, #16
    edf0:	4b0b      	ldr	r3, [pc, #44]	; (ee20 <_ZN9ClearCore19DigitalInOutHBridge5StateEs+0x6c>)
    edf2:	fb01 f102 	mul.w	r1, r1, r2
    edf6:	fb83 0301 	smull	r0, r3, r3, r1
    edfa:	440b      	add	r3, r1
    edfc:	139b      	asrs	r3, r3, #14
    edfe:	17c9      	asrs	r1, r1, #31
    ee00:	1a58      	subs	r0, r3, r1
            m_tcc->CCBUF[1].reg = halfDuty - halfDuty * newState / INT16_MAX;
    ee02:	1ac9      	subs	r1, r1, r3
            m_tcc->CCBUF[0].reg = halfDuty + halfDuty * newState / INT16_MAX;
    ee04:	4410      	add	r0, r2
            m_tcc->CCBUF[1].reg = halfDuty - halfDuty * newState / INT16_MAX;
    ee06:	4411      	add	r1, r2
            m_tcc->CCBUF[0].reg = halfDuty + halfDuty * newState / INT16_MAX;
    ee08:	6720      	str	r0, [r4, #112]	; 0x70
            m_tcc->CCBUF[1].reg = halfDuty - halfDuty * newState / INT16_MAX;
    ee0a:	6761      	str	r1, [r4, #116]	; 0x74
            success = true;
    ee0c:	2001      	movs	r0, #1
            break;
    ee0e:	bd10      	pop	{r4, pc}
}
    ee10:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
            success = DigitalInOut::State(newState);
    ee14:	f7ff bc48 	b.w	e6a8 <_ZN9ClearCore12DigitalInOut5StateEs>
    bool success = false;
    ee18:	2000      	movs	r0, #0
}
    ee1a:	bd10      	pop	{r4, pc}
    ee1c:	20001b00 	.word	0x20001b00
    ee20:	80010003 	.word	0x80010003

0000ee24 <_ZN9ClearCore19DigitalInOutHBridge10ToneUpdateEv>:
    int32_t nextAngle = static_cast<int32_t>(m_angle) + m_sinStep;
    ee24:	f9b0 3062 	ldrsh.w	r3, [r0, #98]	; 0x62
    ee28:	f9b0 1060 	ldrsh.w	r1, [r0, #96]	; 0x60
    if ((ToneActiveState() && (ToneActiveState() != TONE_PERIODIC_OFF)) ||
    ee2c:	f890 2070 	ldrb.w	r2, [r0, #112]	; 0x70
void DigitalInOutHBridge::ToneUpdate() {
    ee30:	b570      	push	{r4, r5, r6, lr}
    int32_t nextAngle = static_cast<int32_t>(m_angle) + m_sinStep;
    ee32:	440b      	add	r3, r1
    if ((ToneActiveState() && (ToneActiveState() != TONE_PERIODIC_OFF)) ||
    ee34:	b302      	cbz	r2, ee78 <_ZN9ClearCore19DigitalInOutHBridge10ToneUpdateEv+0x54>
    ee36:	f890 2070 	ldrb.w	r2, [r0, #112]	; 0x70
    ee3a:	2a04      	cmp	r2, #4
    ee3c:	d01c      	beq.n	ee78 <_ZN9ClearCore19DigitalInOutHBridge10ToneUpdateEv+0x54>
    ee3e:	4604      	mov	r4, r0
        m_angle = nextAngle & INT16_MAX;
    ee40:	f3c3 000e 	ubfx	r0, r3, #0, #15
                                    m_amplitude) >> 15));
    ee44:	6823      	ldr	r3, [r4, #0]
        m_angle = nextAngle & INT16_MAX;
    ee46:	f8a4 0062 	strh.w	r0, [r4, #98]	; 0x62
                                    m_amplitude) >> 15));
    ee4a:	695d      	ldr	r5, [r3, #20]
        State(static_cast<int16_t>((static_cast<int32_t>(arm_sin_q15(m_angle)) *
    ee4c:	f004 f8a0 	bl	12f90 <arm_sin_q15>
    ee50:	f8b4 105e 	ldrh.w	r1, [r4, #94]	; 0x5e
    ee54:	4b41      	ldr	r3, [pc, #260]	; (ef5c <_ZN9ClearCore19DigitalInOutHBridge10ToneUpdateEv+0x138>)
    ee56:	fb11 f100 	smulbb	r1, r1, r0
    ee5a:	429d      	cmp	r5, r3
    ee5c:	f341 31cf 	sbfx	r1, r1, #15, #16
    ee60:	d177      	bne.n	ef52 <_ZN9ClearCore19DigitalInOutHBridge10ToneUpdateEv+0x12e>
    switch (m_mode) {
    ee62:	79a3      	ldrb	r3, [r4, #6]
    uint16_t halfDuty = m_tcc->PER.reg >> 1; // 50% duty cycle
    ee64:	6fe0      	ldr	r0, [r4, #124]	; 0x7c
    switch (m_mode) {
    ee66:	3b02      	subs	r3, #2
    uint16_t halfDuty = m_tcc->PER.reg >> 1; // 50% duty cycle
    ee68:	6c02      	ldr	r2, [r0, #64]	; 0x40
    switch (m_mode) {
    ee6a:	2b05      	cmp	r3, #5
    ee6c:	d81e      	bhi.n	eeac <_ZN9ClearCore19DigitalInOutHBridge10ToneUpdateEv+0x88>
    ee6e:	e8df f003 	tbb	[pc, r3]
    ee72:	1d6b      	.short	0x1d6b
    ee74:	5a6b4a6b 	.word	0x5a6b4a6b
            (m_mode == OUTPUT_TONE && nextAngle < INT16_MAX)) {
    ee78:	7982      	ldrb	r2, [r0, #6]
    if ((ToneActiveState() && (ToneActiveState() != TONE_PERIODIC_OFF)) ||
    ee7a:	2a07      	cmp	r2, #7
    ee7c:	d017      	beq.n	eeae <_ZN9ClearCore19DigitalInOutHBridge10ToneUpdateEv+0x8a>
        m_tcc->INTENCLR.bit.OVF = 1;
    ee7e:	6fc1      	ldr	r1, [r0, #124]	; 0x7c
    ee80:	4c36      	ldr	r4, [pc, #216]	; (ef5c <_ZN9ClearCore19DigitalInOutHBridge10ToneUpdateEv+0x138>)
    ee82:	6a4b      	ldr	r3, [r1, #36]	; 0x24
    ee84:	f043 0301 	orr.w	r3, r3, #1
    ee88:	624b      	str	r3, [r1, #36]	; 0x24
        State(0);
    ee8a:	6803      	ldr	r3, [r0, #0]
    ee8c:	695b      	ldr	r3, [r3, #20]
        m_angle = 0;
    ee8e:	2500      	movs	r5, #0
    ee90:	42a3      	cmp	r3, r4
    ee92:	f8a0 5062 	strh.w	r5, [r0, #98]	; 0x62
    ee96:	d132      	bne.n	eefe <_ZN9ClearCore19DigitalInOutHBridge10ToneUpdateEv+0xda>
    uint16_t halfDuty = m_tcc->PER.reg >> 1; // 50% duty cycle
    ee98:	6c0b      	ldr	r3, [r1, #64]	; 0x40
    switch (m_mode) {
    ee9a:	3a02      	subs	r2, #2
    uint16_t halfDuty = m_tcc->PER.reg >> 1; // 50% duty cycle
    ee9c:	085b      	lsrs	r3, r3, #1
    switch (m_mode) {
    ee9e:	2a04      	cmp	r2, #4
    eea0:	d804      	bhi.n	eeac <_ZN9ClearCore19DigitalInOutHBridge10ToneUpdateEv+0x88>
    eea2:	e8df f002 	tbb	[pc, r2]
    eea6:	0327      	.short	0x0327
    eea8:	1b27      	.short	0x1b27
    eeaa:	27          	.byte	0x27
    eeab:	00          	.byte	0x00
    eeac:	bd70      	pop	{r4, r5, r6, pc}
            (m_mode == OUTPUT_TONE && nextAngle < INT16_MAX)) {
    eeae:	f647 72fe 	movw	r2, #32766	; 0x7ffe
    eeb2:	4293      	cmp	r3, r2
    eeb4:	ddc3      	ble.n	ee3e <_ZN9ClearCore19DigitalInOutHBridge10ToneUpdateEv+0x1a>
        m_tcc->INTENCLR.bit.OVF = 1;
    eeb6:	6fc1      	ldr	r1, [r0, #124]	; 0x7c
    eeb8:	4a28      	ldr	r2, [pc, #160]	; (ef5c <_ZN9ClearCore19DigitalInOutHBridge10ToneUpdateEv+0x138>)
    eeba:	6a4b      	ldr	r3, [r1, #36]	; 0x24
    eebc:	f043 0301 	orr.w	r3, r3, #1
    eec0:	624b      	str	r3, [r1, #36]	; 0x24
        State(0);
    eec2:	6803      	ldr	r3, [r0, #0]
    eec4:	695b      	ldr	r3, [r3, #20]
        m_angle = 0;
    eec6:	2400      	movs	r4, #0
    eec8:	4293      	cmp	r3, r2
    eeca:	f8a0 4062 	strh.w	r4, [r0, #98]	; 0x62
    eece:	d116      	bne.n	eefe <_ZN9ClearCore19DigitalInOutHBridge10ToneUpdateEv+0xda>
    uint16_t halfDuty = m_tcc->PER.reg >> 1; // 50% duty cycle
    eed0:	6c0b      	ldr	r3, [r1, #64]	; 0x40
    eed2:	085b      	lsrs	r3, r3, #1
    eed4:	b29b      	uxth	r3, r3
            m_tcc->CCBUF[0].reg = halfDuty + halfDuty * newState / INT16_MAX;
    eed6:	670b      	str	r3, [r1, #112]	; 0x70
            m_tcc->CCBUF[1].reg = halfDuty - halfDuty * newState / INT16_MAX;
    eed8:	674b      	str	r3, [r1, #116]	; 0x74
    eeda:	bd70      	pop	{r4, r5, r6, pc}
        index &= 0xf;   // guard against index out of bounds
    eedc:	7900      	ldrb	r0, [r0, #4]
        m_fadeCounter.m_valuesBuf[index] = value;
    eede:	4a20      	ldr	r2, [pc, #128]	; (ef60 <_ZN9ClearCore19DigitalInOutHBridge10ToneUpdateEv+0x13c>)
    eee0:	f000 000f 	and.w	r0, r0, #15
    eee4:	4402      	add	r2, r0
    eee6:	b29b      	uxth	r3, r3
    eee8:	2000      	movs	r0, #0
    eeea:	f882 008d 	strb.w	r0, [r2, #141]	; 0x8d
            m_tcc->CCBUF[0].reg = halfDuty + halfDuty * newState / INT16_MAX;
    eeee:	670b      	str	r3, [r1, #112]	; 0x70
            m_tcc->CCBUF[1].reg = halfDuty - halfDuty * newState / INT16_MAX;
    eef0:	674b      	str	r3, [r1, #116]	; 0x74
    eef2:	bd70      	pop	{r4, r5, r6, pc}
            success = DigitalInOut::State(newState);
    eef4:	2100      	movs	r1, #0
}
    eef6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
            success = DigitalInOut::State(newState);
    eefa:	f7ff bbd5 	b.w	e6a8 <_ZN9ClearCore12DigitalInOut5StateEs>
        State(0);
    eefe:	2100      	movs	r1, #0
}
    ef00:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
        State(0);
    ef04:	4718      	bx	r3
        index &= 0xf;   // guard against index out of bounds
    ef06:	7924      	ldrb	r4, [r4, #4]
        m_fadeCounter.m_valuesBuf[index] = value;
    ef08:	4b15      	ldr	r3, [pc, #84]	; (ef60 <_ZN9ClearCore19DigitalInOutHBridge10ToneUpdateEv+0x13c>)
    ef0a:	f004 040f 	and.w	r4, r4, #15
            if (newState == INT16_MIN) {
    ef0e:	f511 4f00 	cmn.w	r1, #32768	; 0x8000
    ef12:	4423      	add	r3, r4
                ShiftReg.LedPwmValue(m_clearCorePin, labs(newState) >> 7);
    ef14:	bf1b      	ittet	ne
    ef16:	ea81 74e1 	eorne.w	r4, r1, r1, asr #31
    ef1a:	eba4 74e1 	subne.w	r4, r4, r1, asr #31
    ef1e:	24ff      	moveq	r4, #255	; 0xff
    ef20:	11e4      	asrne	r4, r4, #7
    ef22:	f883 408d 	strb.w	r4, [r3, #141]	; 0x8d
            m_tcc->CCBUF[0].reg = halfDuty + halfDuty * newState / INT16_MAX;
    ef26:	f3c2 024f 	ubfx	r2, r2, #1, #16
    ef2a:	4b0e      	ldr	r3, [pc, #56]	; (ef64 <_ZN9ClearCore19DigitalInOutHBridge10ToneUpdateEv+0x140>)
    ef2c:	fb01 f102 	mul.w	r1, r1, r2
    ef30:	fb83 4301 	smull	r4, r3, r3, r1
    ef34:	440b      	add	r3, r1
    ef36:	139b      	asrs	r3, r3, #14
    ef38:	17c9      	asrs	r1, r1, #31
    ef3a:	1a5c      	subs	r4, r3, r1
            m_tcc->CCBUF[1].reg = halfDuty - halfDuty * newState / INT16_MAX;
    ef3c:	1ac9      	subs	r1, r1, r3
            m_tcc->CCBUF[0].reg = halfDuty + halfDuty * newState / INT16_MAX;
    ef3e:	4414      	add	r4, r2
            m_tcc->CCBUF[1].reg = halfDuty - halfDuty * newState / INT16_MAX;
    ef40:	4411      	add	r1, r2
            m_tcc->CCBUF[0].reg = halfDuty + halfDuty * newState / INT16_MAX;
    ef42:	6704      	str	r4, [r0, #112]	; 0x70
            m_tcc->CCBUF[1].reg = halfDuty - halfDuty * newState / INT16_MAX;
    ef44:	6741      	str	r1, [r0, #116]	; 0x74
    ef46:	bd70      	pop	{r4, r5, r6, pc}
            success = DigitalInOut::State(newState);
    ef48:	4620      	mov	r0, r4
}
    ef4a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
            success = DigitalInOut::State(newState);
    ef4e:	f7ff bbab 	b.w	e6a8 <_ZN9ClearCore12DigitalInOut5StateEs>
                                    m_amplitude) >> 15));
    ef52:	4620      	mov	r0, r4
    ef54:	462b      	mov	r3, r5
}
    ef56:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
                                    m_amplitude) >> 15));
    ef5a:	4718      	bx	r3
    ef5c:	0000edb5 	.word	0x0000edb5
    ef60:	20001b00 	.word	0x20001b00
    ef64:	80010003 	.word	0x80010003

0000ef68 <_ZN9ClearCore19DigitalInOutHBridge7RefreshEv>:
    switch (m_mode) {
    ef68:	7983      	ldrb	r3, [r0, #6]
    ef6a:	3b02      	subs	r3, #2
    ef6c:	2b05      	cmp	r3, #5
    ef6e:	d804      	bhi.n	ef7a <_ZN9ClearCore19DigitalInOutHBridge7RefreshEv+0x12>
    ef70:	e8df f003 	tbb	[pc, r3]
    ef74:	03040304 	.word	0x03040304
    ef78:	0604      	.short	0x0604
    ef7a:	4770      	bx	lr
            DigitalInOut::Refresh();
    ef7c:	f7ff bd38 	b.w	e9f0 <_ZN9ClearCore12DigitalInOut7RefreshEv>
            switch (m_toneState) {
    ef80:	f890 3070 	ldrb.w	r3, [r0, #112]	; 0x70
    ef84:	2b03      	cmp	r3, #3
void DigitalInOutHBridge::Refresh() {
    ef86:	b4f0      	push	{r4, r5, r6, r7}
            switch (m_toneState) {
    ef88:	d02c      	beq.n	efe4 <_ZN9ClearCore19DigitalInOutHBridge7RefreshEv+0x7c>
    ef8a:	2b04      	cmp	r3, #4
    ef8c:	d003      	beq.n	ef96 <_ZN9ClearCore19DigitalInOutHBridge7RefreshEv+0x2e>
    ef8e:	2b02      	cmp	r3, #2
    ef90:	d04c      	beq.n	f02c <_ZN9ClearCore19DigitalInOutHBridge7RefreshEv+0xc4>
}
    ef92:	bcf0      	pop	{r4, r5, r6, r7}
    ef94:	4770      	bx	lr
                    if (tickCnt - m_toneStartTick > m_toneOffTicks) {
    ef96:	4937      	ldr	r1, [pc, #220]	; (f074 <_ZN9ClearCore19DigitalInOutHBridge7RefreshEv+0x10c>)
    ef98:	6e44      	ldr	r4, [r0, #100]	; 0x64
    ef9a:	680b      	ldr	r3, [r1, #0]
    ef9c:	6ec2      	ldr	r2, [r0, #108]	; 0x6c
    ef9e:	1b1b      	subs	r3, r3, r4
    efa0:	4293      	cmp	r3, r2
    efa2:	d9f6      	bls.n	ef92 <_ZN9ClearCore19DigitalInOutHBridge7RefreshEv+0x2a>
                        m_tcc->INTENSET.bit.OVF = 1;
    efa4:	6fc4      	ldr	r4, [r0, #124]	; 0x7c
                        m_toneState = TONE_PERIODIC_ON;
    efa6:	2303      	movs	r3, #3
    efa8:	f880 3070 	strb.w	r3, [r0, #112]	; 0x70
                        m_tcc->INTENSET.bit.OVF = 1;
    efac:	6aa2      	ldr	r2, [r4, #40]	; 0x28
        m_fadeCounter.m_analogMasks[index] = ledMask;
    efae:	4b32      	ldr	r3, [pc, #200]	; (f078 <_ZN9ClearCore19DigitalInOutHBridge7RefreshEv+0x110>)
    efb0:	f042 0201 	orr.w	r2, r2, #1
    efb4:	62a2      	str	r2, [r4, #40]	; 0x28
        index &= 0xf;   // guard against index out of bounds
    efb6:	7902      	ldrb	r2, [r0, #4]
                        m_toneStartTick = tickCnt;
    efb8:	6809      	ldr	r1, [r1, #0]
                        ShiftReg.LedInPwm(m_ledMask, true, m_clearCorePin);
    efba:	6885      	ldr	r5, [r0, #8]
        state ? m_fadeCounter.m_activeMask |= 1 << index
    efbc:	f8b3 6074 	ldrh.w	r6, [r3, #116]	; 0x74
        state ? m_patternMasks[pattern] |= ledMask
    efc0:	f8d3 40e8 	ldr.w	r4, [r3, #232]	; 0xe8
                        m_toneStartTick = tickCnt;
    efc4:	6641      	str	r1, [r0, #100]	; 0x64
        m_fadeCounter.m_analogMasks[index] = ledMask;
    efc6:	f002 010f 	and.w	r1, r2, #15
        state ? m_fadeCounter.m_activeMask |= 1 << index
    efca:	2201      	movs	r2, #1
        m_fadeCounter.m_analogMasks[index] = ledMask;
    efcc:	eb03 0081 	add.w	r0, r3, r1, lsl #2
        state ? m_fadeCounter.m_activeMask |= 1 << index
    efd0:	408a      	lsls	r2, r1
    efd2:	4332      	orrs	r2, r6
        state ? m_patternMasks[pattern] |= ledMask
    efd4:	432c      	orrs	r4, r5
        m_fadeCounter.m_analogMasks[index] = ledMask;
    efd6:	f8c0 50a0 	str.w	r5, [r0, #160]	; 0xa0
        state ? m_fadeCounter.m_activeMask |= 1 << index
    efda:	f8a3 2074 	strh.w	r2, [r3, #116]	; 0x74
        state ? m_patternMasks[pattern] |= ledMask
    efde:	f8c3 40e8 	str.w	r4, [r3, #232]	; 0xe8
}
    efe2:	e7d6      	b.n	ef92 <_ZN9ClearCore19DigitalInOutHBridge7RefreshEv+0x2a>
                    if (tickCnt - m_toneStartTick > m_toneOnTicks) {
    efe4:	4923      	ldr	r1, [pc, #140]	; (f074 <_ZN9ClearCore19DigitalInOutHBridge7RefreshEv+0x10c>)
    efe6:	6e44      	ldr	r4, [r0, #100]	; 0x64
    efe8:	680b      	ldr	r3, [r1, #0]
    efea:	6e82      	ldr	r2, [r0, #104]	; 0x68
    efec:	1b1b      	subs	r3, r3, r4
    efee:	4293      	cmp	r3, r2
    eff0:	d9cf      	bls.n	ef92 <_ZN9ClearCore19DigitalInOutHBridge7RefreshEv+0x2a>
        m_fadeCounter.m_analogMasks[index] = ledMask;
    eff2:	4a21      	ldr	r2, [pc, #132]	; (f078 <_ZN9ClearCore19DigitalInOutHBridge7RefreshEv+0x110>)
        index &= 0xf;   // guard against index out of bounds
    eff4:	7903      	ldrb	r3, [r0, #4]
                        m_toneStartTick = tickCnt;
    eff6:	6809      	ldr	r1, [r1, #0]
                        ShiftReg.LedInPwm(m_ledMask, false, m_clearCorePin);
    eff8:	6886      	ldr	r6, [r0, #8]
                                              : m_fadeCounter.m_activeMask &= ~(1 << index);
    effa:	f8b2 5074 	ldrh.w	r5, [r2, #116]	; 0x74
                                           : m_patternMasks[pattern] &= ~ledMask;
    effe:	f8d2 40e8 	ldr.w	r4, [r2, #232]	; 0xe8
                        m_toneStartTick = tickCnt;
    f002:	6641      	str	r1, [r0, #100]	; 0x64
        m_fadeCounter.m_analogMasks[index] = ledMask;
    f004:	f003 030f 	and.w	r3, r3, #15
                                              : m_fadeCounter.m_activeMask &= ~(1 << index);
    f008:	2101      	movs	r1, #1
    f00a:	4099      	lsls	r1, r3
        m_fadeCounter.m_analogMasks[index] = ledMask;
    f00c:	eb02 0383 	add.w	r3, r2, r3, lsl #2
                                              : m_fadeCounter.m_activeMask &= ~(1 << index);
    f010:	ea25 0501 	bic.w	r5, r5, r1
                        m_toneState = TONE_PERIODIC_OFF;
    f014:	2704      	movs	r7, #4
                                           : m_patternMasks[pattern] &= ~ledMask;
    f016:	ea24 0406 	bic.w	r4, r4, r6
    f01a:	f880 7070 	strb.w	r7, [r0, #112]	; 0x70
                                              : m_fadeCounter.m_activeMask &= ~(1 << index);
    f01e:	f8a2 5074 	strh.w	r5, [r2, #116]	; 0x74
        m_fadeCounter.m_analogMasks[index] = ledMask;
    f022:	f8c3 60a0 	str.w	r6, [r3, #160]	; 0xa0
                                           : m_patternMasks[pattern] &= ~ledMask;
    f026:	f8c2 40e8 	str.w	r4, [r2, #232]	; 0xe8
    f02a:	e7b2      	b.n	ef92 <_ZN9ClearCore19DigitalInOutHBridge7RefreshEv+0x2a>
                    if (tickCnt - m_toneStartTick > m_toneOnTicks) {
    f02c:	4b11      	ldr	r3, [pc, #68]	; (f074 <_ZN9ClearCore19DigitalInOutHBridge7RefreshEv+0x10c>)
    f02e:	6e41      	ldr	r1, [r0, #100]	; 0x64
    f030:	681b      	ldr	r3, [r3, #0]
    f032:	6e82      	ldr	r2, [r0, #104]	; 0x68
    f034:	1a5b      	subs	r3, r3, r1
    f036:	4293      	cmp	r3, r2
    f038:	d9ab      	bls.n	ef92 <_ZN9ClearCore19DigitalInOutHBridge7RefreshEv+0x2a>
        m_fadeCounter.m_analogMasks[index] = ledMask;
    f03a:	4a0f      	ldr	r2, [pc, #60]	; (f078 <_ZN9ClearCore19DigitalInOutHBridge7RefreshEv+0x110>)
        index &= 0xf;   // guard against index out of bounds
    f03c:	7903      	ldrb	r3, [r0, #4]
                        ShiftReg.LedInPwm(m_ledMask, false, m_clearCorePin);
    f03e:	6886      	ldr	r6, [r0, #8]
                                           : m_patternMasks[pattern] &= ~ledMask;
    f040:	f8d2 10e8 	ldr.w	r1, [r2, #232]	; 0xe8
                                              : m_fadeCounter.m_activeMask &= ~(1 << index);
    f044:	f8b2 4074 	ldrh.w	r4, [r2, #116]	; 0x74
        m_fadeCounter.m_analogMasks[index] = ledMask;
    f048:	f003 030f 	and.w	r3, r3, #15
                                              : m_fadeCounter.m_activeMask &= ~(1 << index);
    f04c:	2501      	movs	r5, #1
    f04e:	409d      	lsls	r5, r3
        m_fadeCounter.m_analogMasks[index] = ledMask;
    f050:	eb02 0383 	add.w	r3, r2, r3, lsl #2
                                              : m_fadeCounter.m_activeMask &= ~(1 << index);
    f054:	ea24 0405 	bic.w	r4, r4, r5
                                           : m_patternMasks[pattern] &= ~ledMask;
    f058:	ea21 0106 	bic.w	r1, r1, r6
                        m_toneState = TONE_OFF;
    f05c:	2500      	movs	r5, #0
    f05e:	f880 5070 	strb.w	r5, [r0, #112]	; 0x70
                        m_forceToneDuration = false;
    f062:	f880 5083 	strb.w	r5, [r0, #131]	; 0x83
                                              : m_fadeCounter.m_activeMask &= ~(1 << index);
    f066:	f8a2 4074 	strh.w	r4, [r2, #116]	; 0x74
        m_fadeCounter.m_analogMasks[index] = ledMask;
    f06a:	f8c3 60a0 	str.w	r6, [r3, #160]	; 0xa0
                                           : m_patternMasks[pattern] &= ~ledMask;
    f06e:	f8c2 10e8 	str.w	r1, [r2, #232]	; 0xe8
    f072:	e78e      	b.n	ef92 <_ZN9ClearCore19DigitalInOutHBridge7RefreshEv+0x2a>
    f074:	20001d1c 	.word	0x20001d1c
    f078:	20001b00 	.word	0x20001b00

0000f07c <_ZN9ClearCore19DigitalInOutHBridge10InitializeE13ClearCorePins>:
void DigitalInOutHBridge::Initialize(ClearCorePins clearCorePin) {
    f07c:	b570      	push	{r4, r5, r6, lr}
    f07e:	4604      	mov	r4, r0
    DigitalInOut::Initialize(clearCorePin);
    f080:	f7ff fddc 	bl	ec3c <_ZN9ClearCore12DigitalInOut10InitializeE13ClearCorePins>
    m_inFault = false;
    f084:	2300      	movs	r3, #0
    m_tcc->CTRLA.bit.SWRST = 1;
    f086:	6fe2      	ldr	r2, [r4, #124]	; 0x7c
    m_inFault = false;
    f088:	f884 3082 	strb.w	r3, [r4, #130]	; 0x82
    m_tcc->CTRLA.bit.SWRST = 1;
    f08c:	6813      	ldr	r3, [r2, #0]
    f08e:	f043 0301 	orr.w	r3, r3, #1
    f092:	6013      	str	r3, [r2, #0]
    SYNCBUSY_WAIT(m_tcc, TCC_SYNCBUSY_SWRST);
    f094:	6893      	ldr	r3, [r2, #8]
    f096:	f013 0301 	ands.w	r3, r3, #1
    f09a:	d1fb      	bne.n	f094 <_ZN9ClearCore19DigitalInOutHBridge10InitializeE13ClearCorePins+0x18>
    m_tcc->DBGCTRL.reg = TCC_DBGCTRL_DBGRUN;
    f09c:	2101      	movs	r1, #1
    m_tcc->COUNT.reg = 0;
    f09e:	6353      	str	r3, [r2, #52]	; 0x34
    m_tcc->DBGCTRL.reg = TCC_DBGCTRL_DBGRUN;
    f0a0:	7791      	strb	r1, [r2, #30]
    m_tcc->CTRLBCLR.bit.LUPD = 1;
    f0a2:	7915      	ldrb	r5, [r2, #4]
    m_tcc->PER.reg = SystemCoreClock / (TONE_RATE_HZ << 1) - 1;
    f0a4:	4b24      	ldr	r3, [pc, #144]	; (f138 <_ZN9ClearCore19DigitalInOutHBridge10InitializeE13ClearCorePins+0xbc>)
    f0a6:	4e25      	ldr	r6, [pc, #148]	; (f13c <_ZN9ClearCore19DigitalInOutHBridge10InitializeE13ClearCorePins+0xc0>)
    DATA_OUTPUT_STATE(m_pwmAInfo->gpioPort, 1UL << m_pwmAInfo->gpioPin, false);
    f0a8:	4825      	ldr	r0, [pc, #148]	; (f140 <_ZN9ClearCore19DigitalInOutHBridge10InitializeE13ClearCorePins+0xc4>)
    m_tcc->CTRLBCLR.bit.LUPD = 1;
    f0aa:	f045 0502 	orr.w	r5, r5, #2
    f0ae:	7115      	strb	r5, [r2, #4]
    m_tcc->WAVE.reg |= TCC_WAVE_WAVEGEN_DSBOTTOM;
    f0b0:	6bd5      	ldr	r5, [r2, #60]	; 0x3c
    f0b2:	f045 0505 	orr.w	r5, r5, #5
    f0b6:	63d5      	str	r5, [r2, #60]	; 0x3c
    m_tcc->INTENCLR.bit.OVF = 1;
    f0b8:	6a55      	ldr	r5, [r2, #36]	; 0x24
    f0ba:	430d      	orrs	r5, r1
    f0bc:	6255      	str	r5, [r2, #36]	; 0x24
    m_tcc->PER.reg = SystemCoreClock / (TONE_RATE_HZ << 1) - 1;
    f0be:	681b      	ldr	r3, [r3, #0]
    f0c0:	fba6 5303 	umull	r5, r3, r6, r3
    f0c4:	0bdb      	lsrs	r3, r3, #15
    f0c6:	3b01      	subs	r3, #1
    f0c8:	6413      	str	r3, [r2, #64]	; 0x40
        m_tcc->CC[iChannel].reg = m_tcc->PER.reg;
    f0ca:	6c13      	ldr	r3, [r2, #64]	; 0x40
    f0cc:	6453      	str	r3, [r2, #68]	; 0x44
    f0ce:	6c13      	ldr	r3, [r2, #64]	; 0x40
    f0d0:	6493      	str	r3, [r2, #72]	; 0x48
    DATA_OUTPUT_STATE(m_pwmAInfo->gpioPort, 1UL << m_pwmAInfo->gpioPin, false);
    f0d2:	6f63      	ldr	r3, [r4, #116]	; 0x74
    f0d4:	f993 2001 	ldrsb.w	r2, [r3, #1]
    f0d8:	789d      	ldrb	r5, [r3, #2]
    f0da:	eb00 12c2 	add.w	r2, r0, r2, lsl #7
    f0de:	fa01 f605 	lsl.w	r6, r1, r5
    f0e2:	6156      	str	r6, [r2, #20]
    DATA_OUTPUT_STATE(m_pwmBInfo->gpioPort, 1UL << m_pwmBInfo->gpioPin, true);
    f0e4:	6fa4      	ldr	r4, [r4, #120]	; 0x78
    f0e6:	f994 3001 	ldrsb.w	r3, [r4, #1]
    f0ea:	78a4      	ldrb	r4, [r4, #2]
    f0ec:	01db      	lsls	r3, r3, #7
    f0ee:	4418      	add	r0, r3
    f0f0:	40a1      	lsls	r1, r4
    f0f2:	6181      	str	r1, [r0, #24]
    DATA_DIRECTION_OUTPUT(m_pwmAInfo->gpioPort, 1UL << m_pwmAInfo->gpioPin);
    f0f4:	6096      	str	r6, [r2, #8]
    PMUX_SELECTION(m_pwmAInfo->gpioPort, m_pwmAInfo->gpioPin, PER_TIMER_ALT);
    f0f6:	eb02 0255 	add.w	r2, r2, r5, lsr #1
    DATA_DIRECTION_OUTPUT(m_pwmBInfo->gpioPort, 1UL << m_pwmBInfo->gpioPin);
    f0fa:	6081      	str	r1, [r0, #8]
    PMUX_SELECTION(m_pwmAInfo->gpioPort, m_pwmAInfo->gpioPin, PER_TIMER_ALT);
    f0fc:	f892 1030 	ldrb.w	r1, [r2, #48]	; 0x30
    PMUX_SELECTION(m_pwmBInfo->gpioPort, m_pwmBInfo->gpioPin, PER_TIMER_ALT);
    f100:	f103 4382 	add.w	r3, r3, #1090519040	; 0x41000000
    PMUX_SELECTION(m_pwmAInfo->gpioPort, m_pwmAInfo->gpioPin, PER_TIMER_ALT);
    f104:	2005      	movs	r0, #5
    f106:	07ed      	lsls	r5, r5, #31
    PMUX_SELECTION(m_pwmBInfo->gpioPort, m_pwmBInfo->gpioPin, PER_TIMER_ALT);
    f108:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
    PMUX_SELECTION(m_pwmAInfo->gpioPort, m_pwmAInfo->gpioPin, PER_TIMER_ALT);
    f10c:	bf4c      	ite	mi
    f10e:	f360 1107 	bfimi	r1, r0, #4, #4
    f112:	f360 0103 	bfipl	r1, r0, #0, #4
    PMUX_SELECTION(m_pwmBInfo->gpioPort, m_pwmBInfo->gpioPin, PER_TIMER_ALT);
    f116:	eb03 0354 	add.w	r3, r3, r4, lsr #1
    PMUX_SELECTION(m_pwmAInfo->gpioPort, m_pwmAInfo->gpioPin, PER_TIMER_ALT);
    f11a:	f882 1030 	strb.w	r1, [r2, #48]	; 0x30
    PMUX_SELECTION(m_pwmBInfo->gpioPort, m_pwmBInfo->gpioPin, PER_TIMER_ALT);
    f11e:	f893 2030 	ldrb.w	r2, [r3, #48]	; 0x30
    f122:	2105      	movs	r1, #5
    f124:	07e0      	lsls	r0, r4, #31
    f126:	bf4c      	ite	mi
    f128:	f361 1207 	bfimi	r2, r1, #4, #4
    f12c:	f361 0203 	bfipl	r2, r1, #0, #4
    f130:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
    f134:	bd70      	pop	{r4, r5, r6, pc}
    f136:	bf00      	nop
    f138:	200000e8 	.word	0x200000e8
    f13c:	be37c63b 	.word	0xbe37c63b
    f140:	41008000 	.word	0x41008000

0000f144 <_ZN9ClearCore19DigitalInOutHBridge4ModeENS_9Connector14ConnectorModesE>:
    if (m_mode == newMode) {
    f144:	7982      	ldrb	r2, [r0, #6]
    f146:	428a      	cmp	r2, r1
    f148:	d07a      	beq.n	f240 <_ZN9ClearCore19DigitalInOutHBridge4ModeENS_9Connector14ConnectorModesE+0xfc>
    f14a:	2908      	cmp	r1, #8
bool DigitalInOutHBridge::Mode(ConnectorModes newMode) {
    f14c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    f14e:	460d      	mov	r5, r1
    f150:	d867      	bhi.n	f222 <_ZN9ClearCore19DigitalInOutHBridge4ModeENS_9Connector14ConnectorModesE+0xde>
    f152:	2201      	movs	r2, #1
    f154:	fa02 f301 	lsl.w	r3, r2, r1
    f158:	f013 0f54 	tst.w	r3, #84	; 0x54
    f15c:	4604      	mov	r4, r0
    f15e:	d171      	bne.n	f244 <_ZN9ClearCore19DigitalInOutHBridge4ModeENS_9Connector14ConnectorModesE+0x100>
    f160:	f413 7f90 	tst.w	r3, #288	; 0x120
    f164:	d05f      	beq.n	f226 <_ZN9ClearCore19DigitalInOutHBridge4ModeENS_9Connector14ConnectorModesE+0xe2>
    f166:	7901      	ldrb	r1, [r0, #4]
    f168:	4a5d      	ldr	r2, [pc, #372]	; (f2e0 <_ZN9ClearCore19DigitalInOutHBridge4ModeENS_9Connector14ConnectorModesE+0x19c>)
    f16a:	f001 010f 	and.w	r1, r1, #15
            DATA_OUTPUT_STATE(m_outputPort, m_outputDataMask, !m_inFault);
    f16e:	f894 3082 	ldrb.w	r3, [r4, #130]	; 0x82
    f172:	2b00      	cmp	r3, #0
    f174:	f040 809e 	bne.w	f2b4 <_ZN9ClearCore19DigitalInOutHBridge4ModeENS_9Connector14ConnectorModesE+0x170>
    f178:	6b23      	ldr	r3, [r4, #48]	; 0x30
    f17a:	6ba6      	ldr	r6, [r4, #56]	; 0x38
    f17c:	01db      	lsls	r3, r3, #7
    f17e:	f103 4082 	add.w	r0, r3, #1090519040	; 0x41000000
    f182:	f500 4000 	add.w	r0, r0, #32768	; 0x8000
    f186:	6186      	str	r6, [r0, #24]
            PMUX_DISABLE(m_outputPort, m_outputDataBit);
    f188:	6b60      	ldr	r0, [r4, #52]	; 0x34
    f18a:	f103 4382 	add.w	r3, r3, #1090519040	; 0x41000000
    f18e:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
    f192:	4403      	add	r3, r0
        m_fadeCounter.m_analogMasks[index] = ledMask;
    f194:	eb02 0681 	add.w	r6, r2, r1, lsl #2
    f198:	f893 0040 	ldrb.w	r0, [r3, #64]	; 0x40
    f19c:	f36f 0000 	bfc	r0, #0, #1
    f1a0:	f883 0040 	strb.w	r0, [r3, #64]	; 0x40
            ShiftReg.LedInPwm(m_ledMask,
    f1a4:	68a3      	ldr	r3, [r4, #8]
    f1a6:	f8c6 30a0 	str.w	r3, [r6, #160]	; 0xa0
                                              : m_fadeCounter.m_activeMask &= ~(1 << index);
    f1aa:	2d05      	cmp	r5, #5
    f1ac:	f000 808b 	beq.w	f2c6 <_ZN9ClearCore19DigitalInOutHBridge4ModeENS_9Connector14ConnectorModesE+0x182>
    f1b0:	f8b2 0074 	ldrh.w	r0, [r2, #116]	; 0x74
                                           : m_patternMasks[pattern] &= ~ledMask;
    f1b4:	f8d2 60e8 	ldr.w	r6, [r2, #232]	; 0xe8
                                              : m_fadeCounter.m_activeMask &= ~(1 << index);
    f1b8:	2701      	movs	r7, #1
    f1ba:	fa07 f101 	lsl.w	r1, r7, r1
    f1be:	ea20 0101 	bic.w	r1, r0, r1
    f1c2:	f8a2 1074 	strh.w	r1, [r2, #116]	; 0x74
                                           : m_patternMasks[pattern] &= ~ledMask;
    f1c6:	ea26 0303 	bic.w	r3, r6, r3
        PMUX_ENABLE(m_pwmAInfo->gpioPort, m_pwmAInfo->gpioPin);
    f1ca:	6f61      	ldr	r1, [r4, #116]	; 0x74
    f1cc:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
    f1d0:	f991 3001 	ldrsb.w	r3, [r1, #1]
    f1d4:	4a43      	ldr	r2, [pc, #268]	; (f2e4 <_ZN9ClearCore19DigitalInOutHBridge4ModeENS_9Connector14ConnectorModesE+0x1a0>)
    f1d6:	7889      	ldrb	r1, [r1, #2]
    f1d8:	eb02 13c3 	add.w	r3, r2, r3, lsl #7
    f1dc:	440b      	add	r3, r1
    f1de:	2101      	movs	r1, #1
    f1e0:	f893 0040 	ldrb.w	r0, [r3, #64]	; 0x40
    f1e4:	4308      	orrs	r0, r1
    f1e6:	f883 0040 	strb.w	r0, [r3, #64]	; 0x40
        PMUX_ENABLE(m_pwmBInfo->gpioPort, m_pwmBInfo->gpioPin);
    f1ea:	6fa0      	ldr	r0, [r4, #120]	; 0x78
    f1ec:	f990 3001 	ldrsb.w	r3, [r0, #1]
    f1f0:	7880      	ldrb	r0, [r0, #2]
    f1f2:	eb02 13c3 	add.w	r3, r2, r3, lsl #7
    f1f6:	4403      	add	r3, r0
    f1f8:	f893 2040 	ldrb.w	r2, [r3, #64]	; 0x40
    f1fc:	430a      	orrs	r2, r1
    f1fe:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    if (m_tcc->CTRLA.bit.ENABLE != tccControlPwm) {
    f202:	6fe2      	ldr	r2, [r4, #124]	; 0x7c
    f204:	6813      	ldr	r3, [r2, #0]
    f206:	f3c3 0340 	ubfx	r3, r3, #1, #1
    f20a:	428b      	cmp	r3, r1
    f20c:	d006      	beq.n	f21c <_ZN9ClearCore19DigitalInOutHBridge4ModeENS_9Connector14ConnectorModesE+0xd8>
        m_tcc->CTRLA.bit.ENABLE = tccControlPwm;
    f20e:	6813      	ldr	r3, [r2, #0]
    f210:	f361 0341 	bfi	r3, r1, #1, #1
    f214:	6013      	str	r3, [r2, #0]
        SYNCBUSY_WAIT(m_tcc, TCC_SYNCBUSY_ENABLE);
    f216:	6893      	ldr	r3, [r2, #8]
    f218:	079b      	lsls	r3, r3, #30
    f21a:	d4fc      	bmi.n	f216 <_ZN9ClearCore19DigitalInOutHBridge4ModeENS_9Connector14ConnectorModesE+0xd2>
    m_mode = newMode;
    f21c:	71a5      	strb	r5, [r4, #6]
    return modeChangeSuccess;
    f21e:	2001      	movs	r0, #1
    f220:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        return false;
    f222:	2000      	movs	r0, #0
    f224:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    f226:	061a      	lsls	r2, r3, #24
    f228:	d5fb      	bpl.n	f222 <_ZN9ClearCore19DigitalInOutHBridge4ModeENS_9Connector14ConnectorModesE+0xde>
        index &= 0xf;   // guard against index out of bounds
    f22a:	7901      	ldrb	r1, [r0, #4]
        m_fadeCounter.m_valuesBuf[index] = value;
    f22c:	4a2c      	ldr	r2, [pc, #176]	; (f2e0 <_ZN9ClearCore19DigitalInOutHBridge4ModeENS_9Connector14ConnectorModesE+0x19c>)
            ShiftReg.LedPwmValue(m_clearCorePin, m_amplitude >> 7);
    f22e:	f9b0 305e 	ldrsh.w	r3, [r0, #94]	; 0x5e
    f232:	f001 010f 	and.w	r1, r1, #15
    f236:	1850      	adds	r0, r2, r1
    f238:	11db      	asrs	r3, r3, #7
    f23a:	f880 308d 	strb.w	r3, [r0, #141]	; 0x8d
    f23e:	e796      	b.n	f16e <_ZN9ClearCore19DigitalInOutHBridge4ModeENS_9Connector14ConnectorModesE+0x2a>
        return true;
    f240:	2001      	movs	r0, #1
    f242:	4770      	bx	lr
        m_fadeCounter.m_analogMasks[index] = ledMask;
    f244:	4f26      	ldr	r7, [pc, #152]	; (f2e0 <_ZN9ClearCore19DigitalInOutHBridge4ModeENS_9Connector14ConnectorModesE+0x19c>)
        index &= 0xf;   // guard against index out of bounds
    f246:	7903      	ldrb	r3, [r0, #4]
            ShiftReg.LedInPwm(m_ledMask, false, m_clearCorePin);
    f248:	f8d0 e008 	ldr.w	lr, [r0, #8]
                                              : m_fadeCounter.m_activeMask &= ~(1 << index);
    f24c:	f8b7 c074 	ldrh.w	ip, [r7, #116]	; 0x74
                                           : m_patternMasks[pattern] &= ~ledMask;
    f250:	f8d7 60e8 	ldr.w	r6, [r7, #232]	; 0xe8
        m_fadeCounter.m_analogMasks[index] = ledMask;
    f254:	f003 030f 	and.w	r3, r3, #15
                                              : m_fadeCounter.m_activeMask &= ~(1 << index);
    f258:	409a      	lsls	r2, r3
        m_fadeCounter.m_analogMasks[index] = ledMask;
    f25a:	eb07 0383 	add.w	r3, r7, r3, lsl #2
                                              : m_fadeCounter.m_activeMask &= ~(1 << index);
    f25e:	ea2c 0202 	bic.w	r2, ip, r2
                                           : m_patternMasks[pattern] &= ~ledMask;
    f262:	ea26 060e 	bic.w	r6, r6, lr
                                              : m_fadeCounter.m_activeMask &= ~(1 << index);
    f266:	f8a7 2074 	strh.w	r2, [r7, #116]	; 0x74
        m_fadeCounter.m_analogMasks[index] = ledMask;
    f26a:	f8c3 e0a0 	str.w	lr, [r3, #160]	; 0xa0
                                           : m_patternMasks[pattern] &= ~ledMask;
    f26e:	f8c7 60e8 	str.w	r6, [r7, #232]	; 0xe8
            modeChangeSuccess = DigitalInOut::Mode(newMode);
    f272:	f7ff fa75 	bl	e760 <_ZN9ClearCore12DigitalInOut4ModeENS_9Connector14ConnectorModesE>
    if (!modeChangeSuccess) {
    f276:	2800      	cmp	r0, #0
    f278:	d0d3      	beq.n	f222 <_ZN9ClearCore19DigitalInOutHBridge4ModeENS_9Connector14ConnectorModesE+0xde>
        PMUX_DISABLE(m_pwmAInfo->gpioPort, m_pwmAInfo->gpioPin);
    f27a:	6f61      	ldr	r1, [r4, #116]	; 0x74
    f27c:	4b19      	ldr	r3, [pc, #100]	; (f2e4 <_ZN9ClearCore19DigitalInOutHBridge4ModeENS_9Connector14ConnectorModesE+0x1a0>)
    f27e:	f991 2001 	ldrsb.w	r2, [r1, #1]
    f282:	7889      	ldrb	r1, [r1, #2]
    f284:	eb03 12c2 	add.w	r2, r3, r2, lsl #7
    f288:	440a      	add	r2, r1
        PMUX_DISABLE(m_pwmBInfo->gpioPort, m_pwmBInfo->gpioPin);
    f28a:	2100      	movs	r1, #0
        PMUX_DISABLE(m_pwmAInfo->gpioPort, m_pwmAInfo->gpioPin);
    f28c:	f892 0040 	ldrb.w	r0, [r2, #64]	; 0x40
    f290:	f36f 0000 	bfc	r0, #0, #1
    f294:	f882 0040 	strb.w	r0, [r2, #64]	; 0x40
        PMUX_DISABLE(m_pwmBInfo->gpioPort, m_pwmBInfo->gpioPin);
    f298:	6fa2      	ldr	r2, [r4, #120]	; 0x78
    f29a:	f992 0001 	ldrsb.w	r0, [r2, #1]
    f29e:	7892      	ldrb	r2, [r2, #2]
    f2a0:	eb03 13c0 	add.w	r3, r3, r0, lsl #7
    f2a4:	4413      	add	r3, r2
    f2a6:	f893 2040 	ldrb.w	r2, [r3, #64]	; 0x40
    f2aa:	f36f 0200 	bfc	r2, #0, #1
    f2ae:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    f2b2:	e7a6      	b.n	f202 <_ZN9ClearCore19DigitalInOutHBridge4ModeENS_9Connector14ConnectorModesE+0xbe>
            DATA_OUTPUT_STATE(m_outputPort, m_outputDataMask, !m_inFault);
    f2b4:	6b23      	ldr	r3, [r4, #48]	; 0x30
    f2b6:	6ba6      	ldr	r6, [r4, #56]	; 0x38
    f2b8:	01db      	lsls	r3, r3, #7
    f2ba:	f103 4082 	add.w	r0, r3, #1090519040	; 0x41000000
    f2be:	f500 4000 	add.w	r0, r0, #32768	; 0x8000
    f2c2:	6146      	str	r6, [r0, #20]
    f2c4:	e760      	b.n	f188 <_ZN9ClearCore19DigitalInOutHBridge4ModeENS_9Connector14ConnectorModesE+0x44>
        state ? m_fadeCounter.m_activeMask |= 1 << index
    f2c6:	f8b2 7074 	ldrh.w	r7, [r2, #116]	; 0x74
        state ? m_patternMasks[pattern] |= ledMask
    f2ca:	f8d2 00e8 	ldr.w	r0, [r2, #232]	; 0xe8
        state ? m_fadeCounter.m_activeMask |= 1 << index
    f2ce:	2601      	movs	r6, #1
    f2d0:	fa06 f101 	lsl.w	r1, r6, r1
    f2d4:	4339      	orrs	r1, r7
    f2d6:	f8a2 1074 	strh.w	r1, [r2, #116]	; 0x74
        state ? m_patternMasks[pattern] |= ledMask
    f2da:	4303      	orrs	r3, r0
    f2dc:	e775      	b.n	f1ca <_ZN9ClearCore19DigitalInOutHBridge4ModeENS_9Connector14ConnectorModesE+0x86>
    f2de:	bf00      	nop
    f2e0:	20001b00 	.word	0x20001b00
    f2e4:	41008000 	.word	0x41008000

0000f2e8 <_ZN9ClearCore16CcioBoardManager12CcioDiscoverEPNS_12SerialDriverE.part.1>:
    else {
        m_pulseStopPending |= pinMask;
    }
}

uint8_t CcioBoardManager::CcioDiscover(SerialDriver *comInstance) {
    f2e8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    f2ec:	4604      	mov	r4, r0
    f2ee:	4267      	negs	r7, r4
    f2f0:	f007 0703 	and.w	r7, r7, #3
        m_faultLed = ShiftRegister::Masks::SR_NO_FEEDBACK_MASK;
        m_lastDiscoverTime = tickCnt;
        return 0;
    }

    m_faultLed = m_serPort->m_ledMask;
    f2f4:	f8d1 314c 	ldr.w	r3, [r1, #332]	; 0x14c
    f2f8:	f8c0 30c0 	str.w	r3, [r0, #192]	; 0xc0
    f2fc:	f1c7 090d 	rsb	r9, r7, #13

    m_serPort->SpiSsMode(SerialBase::CtrlLineModes::LINE_ON);
    f300:	4608      	mov	r0, r1
    f302:	ea4f 0999 	mov.w	r9, r9, lsr #2
    f306:	2101      	movs	r1, #1
    f308:	f001 ff84 	bl	11214 <_ZN9ClearCore10SerialBase9SpiSsModeENS0_13CtrlLineModesE>
    f30c:	f109 0901 	add.w	r9, r9, #1
    bool flush0Success = false;
    f310:	2600      	movs	r6, #0
    bool sendData = true;
    f312:	2201      	movs	r2, #1
    f314:	f894 3024 	ldrb.w	r3, [r4, #36]	; 0x24
    f318:	ea4f 0a89 	mov.w	sl, r9, lsl #2
    f31c:	f1c7 0b11 	rsb	fp, r7, #17
    uint8_t flushCnt = 0;
    f320:	4635      	mov	r5, r6
                }
                else {
                    // Check if any 1's got through, otherwise resend 1s
                    if (!AllEntriesEqual(m_readBuf.buf8,
                                         2 * MAX_CCIO_DEVICES, 0)) {
                        m_discoverState = CCIO_TEST;
    f322:	4690      	mov	r8, r2
    f324:	2b02      	cmp	r3, #2
    f326:	f000 821b 	beq.w	f760 <_ZN9ClearCore16CcioBoardManager12CcioDiscoverEPNS_12SerialDriverE.part.1+0x478>
    f32a:	2d03      	cmp	r5, #3
    f32c:	f300 8159 	bgt.w	f5e2 <_ZN9ClearCore16CcioBoardManager12CcioDiscoverEPNS_12SerialDriverE.part.1+0x2fa>
        switch (m_discoverState) {
    f330:	b1a3      	cbz	r3, f35c <_ZN9ClearCore16CcioBoardManager12CcioDiscoverEPNS_12SerialDriverE.part.1+0x74>
    f332:	2b01      	cmp	r3, #1
    f334:	d1fc      	bne.n	f330 <_ZN9ClearCore16CcioBoardManager12CcioDiscoverEPNS_12SerialDriverE.part.1+0x48>
                    flushCnt++;
                    sendData = true;
                }
                break;
            case CCIO_TEST:
                if (sendData) {
    f336:	b1da      	cbz	r2, f370 <_ZN9ClearCore16CcioBoardManager12CcioDiscoverEPNS_12SerialDriverE.part.1+0x88>
                    if (!flush0Success) {
    f338:	2e00      	cmp	r6, #0
    f33a:	f040 808d 	bne.w	f458 <_ZN9ClearCore16CcioBoardManager12CcioDiscoverEPNS_12SerialDriverE.part.1+0x170>
        Fill a buffer with len bytes of the given val
    */
    static void FillBuffer(uint8_t *buf, uint8_t len, uint8_t val) {
        uint8_t i;
        for (i = 0; i < len; i++) {
            *buf++ = val;
    f33e:	6026      	str	r6, [r4, #0]
    f340:	6066      	str	r6, [r4, #4]
    f342:	60a6      	str	r6, [r4, #8]
    f344:	60e6      	str	r6, [r4, #12]
                        // Attempt to flush with 0's
                        FillBuffer(m_writeBuf.buf8, 2 * MAX_CCIO_DEVICES, 0);
                        m_serPort->SpiTransferData(m_writeBuf.buf8,
                                                   m_readBuf.buf8,
                                                   2 * MAX_CCIO_DEVICES);
    f346:	2310      	movs	r3, #16
                        // CCIOs
                        FillBuffer(m_writeBuf.buf8,
                                   2 * MAX_CCIO_DEVICES + 1, 0xaa);
                        m_serPort->SpiTransferData(m_writeBuf.buf8,
                                                   m_readBuf.buf8,
                                                   2 * MAX_CCIO_DEVICES + 1);
    f348:	f104 0212 	add.w	r2, r4, #18
    f34c:	4621      	mov	r1, r4
    f34e:	6aa0      	ldr	r0, [r4, #40]	; 0x28
    f350:	f002 f80a 	bl	11368 <_ZN9ClearCore10SerialBase15SpiTransferDataEPKhPhl>
    f354:	f894 3024 	ldrb.w	r3, [r4, #36]	; 0x24
    f358:	2200      	movs	r2, #0
    f35a:	e7e3      	b.n	f324 <_ZN9ClearCore16CcioBoardManager12CcioDiscoverEPNS_12SerialDriverE.part.1+0x3c>
                if (sendData) {
    f35c:	2a00      	cmp	r2, #0
    f35e:	d053      	beq.n	f408 <_ZN9ClearCore16CcioBoardManager12CcioDiscoverEPNS_12SerialDriverE.part.1+0x120>
    f360:	f04f 33ff 	mov.w	r3, #4294967295
    f364:	6023      	str	r3, [r4, #0]
    f366:	6063      	str	r3, [r4, #4]
    f368:	60a3      	str	r3, [r4, #8]
    f36a:	60e3      	str	r3, [r4, #12]
                                               2 * MAX_CCIO_DEVICES);
    f36c:	2310      	movs	r3, #16
    f36e:	e7eb      	b.n	f348 <_ZN9ClearCore16CcioBoardManager12CcioDiscoverEPNS_12SerialDriverE.part.1+0x60>
                    }
                    sendData = false;
                }
                else {
                    if (!flush0Success) {
    f370:	2e00      	cmp	r6, #0
    f372:	f040 80a2 	bne.w	f4ba <_ZN9ClearCore16CcioBoardManager12CcioDiscoverEPNS_12SerialDriverE.part.1+0x1d2>
        Return true if all entries are equal to val
    */
    static bool AllEntriesEqual(const uint8_t *buf, uint8_t len, uint8_t val) {
        uint8_t i;
        for (i = 0; i < len; i++) {
            if (buf[i] != val) {
    f376:	7ca2      	ldrb	r2, [r4, #18]
    f378:	2aff      	cmp	r2, #255	; 0xff
    f37a:	f040 8128 	bne.w	f5ce <_ZN9ClearCore16CcioBoardManager12CcioDiscoverEPNS_12SerialDriverE.part.1+0x2e6>
    f37e:	7ce2      	ldrb	r2, [r4, #19]
    f380:	2aff      	cmp	r2, #255	; 0xff
    f382:	f040 8124 	bne.w	f5ce <_ZN9ClearCore16CcioBoardManager12CcioDiscoverEPNS_12SerialDriverE.part.1+0x2e6>
    f386:	7d22      	ldrb	r2, [r4, #20]
    f388:	2aff      	cmp	r2, #255	; 0xff
    f38a:	f040 8120 	bne.w	f5ce <_ZN9ClearCore16CcioBoardManager12CcioDiscoverEPNS_12SerialDriverE.part.1+0x2e6>
    f38e:	7d62      	ldrb	r2, [r4, #21]
    f390:	2aff      	cmp	r2, #255	; 0xff
    f392:	f040 811c 	bne.w	f5ce <_ZN9ClearCore16CcioBoardManager12CcioDiscoverEPNS_12SerialDriverE.part.1+0x2e6>
    f396:	7da2      	ldrb	r2, [r4, #22]
    f398:	2aff      	cmp	r2, #255	; 0xff
    f39a:	f040 8118 	bne.w	f5ce <_ZN9ClearCore16CcioBoardManager12CcioDiscoverEPNS_12SerialDriverE.part.1+0x2e6>
    f39e:	7de2      	ldrb	r2, [r4, #23]
    f3a0:	2aff      	cmp	r2, #255	; 0xff
    f3a2:	f040 8114 	bne.w	f5ce <_ZN9ClearCore16CcioBoardManager12CcioDiscoverEPNS_12SerialDriverE.part.1+0x2e6>
    f3a6:	7e22      	ldrb	r2, [r4, #24]
    f3a8:	2aff      	cmp	r2, #255	; 0xff
    f3aa:	f040 8110 	bne.w	f5ce <_ZN9ClearCore16CcioBoardManager12CcioDiscoverEPNS_12SerialDriverE.part.1+0x2e6>
    f3ae:	7e62      	ldrb	r2, [r4, #25]
    f3b0:	2aff      	cmp	r2, #255	; 0xff
    f3b2:	f040 810c 	bne.w	f5ce <_ZN9ClearCore16CcioBoardManager12CcioDiscoverEPNS_12SerialDriverE.part.1+0x2e6>
    f3b6:	7ea2      	ldrb	r2, [r4, #26]
    f3b8:	2aff      	cmp	r2, #255	; 0xff
    f3ba:	f040 8108 	bne.w	f5ce <_ZN9ClearCore16CcioBoardManager12CcioDiscoverEPNS_12SerialDriverE.part.1+0x2e6>
    f3be:	7ee2      	ldrb	r2, [r4, #27]
    f3c0:	2aff      	cmp	r2, #255	; 0xff
    f3c2:	f040 8104 	bne.w	f5ce <_ZN9ClearCore16CcioBoardManager12CcioDiscoverEPNS_12SerialDriverE.part.1+0x2e6>
    f3c6:	7f22      	ldrb	r2, [r4, #28]
    f3c8:	2aff      	cmp	r2, #255	; 0xff
    f3ca:	f040 8100 	bne.w	f5ce <_ZN9ClearCore16CcioBoardManager12CcioDiscoverEPNS_12SerialDriverE.part.1+0x2e6>
    f3ce:	7f62      	ldrb	r2, [r4, #29]
    f3d0:	2aff      	cmp	r2, #255	; 0xff
    f3d2:	f040 80fc 	bne.w	f5ce <_ZN9ClearCore16CcioBoardManager12CcioDiscoverEPNS_12SerialDriverE.part.1+0x2e6>
    f3d6:	7fa2      	ldrb	r2, [r4, #30]
    f3d8:	2aff      	cmp	r2, #255	; 0xff
    f3da:	f040 80f8 	bne.w	f5ce <_ZN9ClearCore16CcioBoardManager12CcioDiscoverEPNS_12SerialDriverE.part.1+0x2e6>
    f3de:	7fe2      	ldrb	r2, [r4, #31]
    f3e0:	2aff      	cmp	r2, #255	; 0xff
    f3e2:	f040 80f4 	bne.w	f5ce <_ZN9ClearCore16CcioBoardManager12CcioDiscoverEPNS_12SerialDriverE.part.1+0x2e6>
    f3e6:	f894 2020 	ldrb.w	r2, [r4, #32]
    f3ea:	2aff      	cmp	r2, #255	; 0xff
    f3ec:	f040 80ef 	bne.w	f5ce <_ZN9ClearCore16CcioBoardManager12CcioDiscoverEPNS_12SerialDriverE.part.1+0x2e6>
    f3f0:	f894 6021 	ldrb.w	r6, [r4, #33]	; 0x21
    f3f4:	3eff      	subs	r6, #255	; 0xff
    f3f6:	bf18      	it	ne
    f3f8:	2601      	movne	r6, #1
                        // resend 0's.
                        if (!AllEntriesEqual(m_readBuf.buf8,
                                             2 * MAX_CCIO_DEVICES, 0xff)) {
                            flush0Success = true;
                        }
                        flushCnt++;
    f3fa:	3501      	adds	r5, #1
    f3fc:	b2ed      	uxtb	r5, r5
    f3fe:	2d03      	cmp	r5, #3
    f400:	f04f 0201 	mov.w	r2, #1
    f404:	dd94      	ble.n	f330 <_ZN9ClearCore16CcioBoardManager12CcioDiscoverEPNS_12SerialDriverE.part.1+0x48>
    f406:	e0ec      	b.n	f5e2 <_ZN9ClearCore16CcioBoardManager12CcioDiscoverEPNS_12SerialDriverE.part.1+0x2fa>
    f408:	7ca2      	ldrb	r2, [r4, #18]
    f40a:	bb02      	cbnz	r2, f44e <_ZN9ClearCore16CcioBoardManager12CcioDiscoverEPNS_12SerialDriverE.part.1+0x166>
    f40c:	7ce2      	ldrb	r2, [r4, #19]
    f40e:	b9f2      	cbnz	r2, f44e <_ZN9ClearCore16CcioBoardManager12CcioDiscoverEPNS_12SerialDriverE.part.1+0x166>
    f410:	7d22      	ldrb	r2, [r4, #20]
    f412:	b9e2      	cbnz	r2, f44e <_ZN9ClearCore16CcioBoardManager12CcioDiscoverEPNS_12SerialDriverE.part.1+0x166>
    f414:	7d62      	ldrb	r2, [r4, #21]
    f416:	b9d2      	cbnz	r2, f44e <_ZN9ClearCore16CcioBoardManager12CcioDiscoverEPNS_12SerialDriverE.part.1+0x166>
    f418:	7da2      	ldrb	r2, [r4, #22]
    f41a:	b9c2      	cbnz	r2, f44e <_ZN9ClearCore16CcioBoardManager12CcioDiscoverEPNS_12SerialDriverE.part.1+0x166>
    f41c:	7de2      	ldrb	r2, [r4, #23]
    f41e:	b9b2      	cbnz	r2, f44e <_ZN9ClearCore16CcioBoardManager12CcioDiscoverEPNS_12SerialDriverE.part.1+0x166>
    f420:	7e22      	ldrb	r2, [r4, #24]
    f422:	b9a2      	cbnz	r2, f44e <_ZN9ClearCore16CcioBoardManager12CcioDiscoverEPNS_12SerialDriverE.part.1+0x166>
    f424:	7e62      	ldrb	r2, [r4, #25]
    f426:	b992      	cbnz	r2, f44e <_ZN9ClearCore16CcioBoardManager12CcioDiscoverEPNS_12SerialDriverE.part.1+0x166>
    f428:	7ea2      	ldrb	r2, [r4, #26]
    f42a:	b982      	cbnz	r2, f44e <_ZN9ClearCore16CcioBoardManager12CcioDiscoverEPNS_12SerialDriverE.part.1+0x166>
    f42c:	7ee2      	ldrb	r2, [r4, #27]
    f42e:	b972      	cbnz	r2, f44e <_ZN9ClearCore16CcioBoardManager12CcioDiscoverEPNS_12SerialDriverE.part.1+0x166>
    f430:	7f22      	ldrb	r2, [r4, #28]
    f432:	b962      	cbnz	r2, f44e <_ZN9ClearCore16CcioBoardManager12CcioDiscoverEPNS_12SerialDriverE.part.1+0x166>
    f434:	7f62      	ldrb	r2, [r4, #29]
    f436:	b952      	cbnz	r2, f44e <_ZN9ClearCore16CcioBoardManager12CcioDiscoverEPNS_12SerialDriverE.part.1+0x166>
    f438:	7fa2      	ldrb	r2, [r4, #30]
    f43a:	b942      	cbnz	r2, f44e <_ZN9ClearCore16CcioBoardManager12CcioDiscoverEPNS_12SerialDriverE.part.1+0x166>
    f43c:	7fe2      	ldrb	r2, [r4, #31]
    f43e:	b932      	cbnz	r2, f44e <_ZN9ClearCore16CcioBoardManager12CcioDiscoverEPNS_12SerialDriverE.part.1+0x166>
    f440:	f894 2020 	ldrb.w	r2, [r4, #32]
    f444:	b91a      	cbnz	r2, f44e <_ZN9ClearCore16CcioBoardManager12CcioDiscoverEPNS_12SerialDriverE.part.1+0x166>
    f446:	f894 2021 	ldrb.w	r2, [r4, #33]	; 0x21
    f44a:	2a00      	cmp	r2, #0
    f44c:	d0d5      	beq.n	f3fa <_ZN9ClearCore16CcioBoardManager12CcioDiscoverEPNS_12SerialDriverE.part.1+0x112>
                        m_discoverState = CCIO_TEST;
    f44e:	f884 8024 	strb.w	r8, [r4, #36]	; 0x24
    f452:	2501      	movs	r5, #1
                        flush0Success = false;
    f454:	2600      	movs	r6, #0
    f456:	e772      	b.n	f33e <_ZN9ClearCore16CcioBoardManager12CcioDiscoverEPNS_12SerialDriverE.part.1+0x56>
    f458:	2f00      	cmp	r7, #0
    f45a:	f000 80ba 	beq.w	f5d2 <_ZN9ClearCore16CcioBoardManager12CcioDiscoverEPNS_12SerialDriverE.part.1+0x2ea>
            *buf++ = val;
    f45e:	23aa      	movs	r3, #170	; 0xaa
    f460:	2f01      	cmp	r7, #1
    f462:	7023      	strb	r3, [r4, #0]
    f464:	f104 0101 	add.w	r1, r4, #1
    f468:	f000 80db 	beq.w	f622 <_ZN9ClearCore16CcioBoardManager12CcioDiscoverEPNS_12SerialDriverE.part.1+0x33a>
    f46c:	2f02      	cmp	r7, #2
    f46e:	7063      	strb	r3, [r4, #1]
    f470:	f104 0102 	add.w	r1, r4, #2
    f474:	f000 80d3 	beq.w	f61e <_ZN9ClearCore16CcioBoardManager12CcioDiscoverEPNS_12SerialDriverE.part.1+0x336>
    f478:	70a3      	strb	r3, [r4, #2]
    f47a:	1ce1      	adds	r1, r4, #3
    f47c:	220e      	movs	r2, #14
    f47e:	f04f 33aa 	mov.w	r3, #2863311530	; 0xaaaaaaaa
    f482:	51e3      	str	r3, [r4, r7]
    f484:	19e3      	adds	r3, r4, r7
    f486:	3304      	adds	r3, #4
    f488:	f04f 30aa 	mov.w	r0, #2863311530	; 0xaaaaaaaa
    f48c:	f1b9 0f03 	cmp.w	r9, #3
    f490:	6018      	str	r0, [r3, #0]
    f492:	6058      	str	r0, [r3, #4]
    f494:	d000      	beq.n	f498 <_ZN9ClearCore16CcioBoardManager12CcioDiscoverEPNS_12SerialDriverE.part.1+0x1b0>
    f496:	6098      	str	r0, [r3, #8]
    f498:	45d3      	cmp	fp, sl
    f49a:	eba2 020a 	sub.w	r2, r2, sl
    f49e:	eb01 000a 	add.w	r0, r1, sl
    f4a2:	d008      	beq.n	f4b6 <_ZN9ClearCore16CcioBoardManager12CcioDiscoverEPNS_12SerialDriverE.part.1+0x1ce>
    f4a4:	23aa      	movs	r3, #170	; 0xaa
        for (i = 0; i < len; i++) {
    f4a6:	2a01      	cmp	r2, #1
            *buf++ = val;
    f4a8:	f801 300a 	strb.w	r3, [r1, sl]
        for (i = 0; i < len; i++) {
    f4ac:	d003      	beq.n	f4b6 <_ZN9ClearCore16CcioBoardManager12CcioDiscoverEPNS_12SerialDriverE.part.1+0x1ce>
    f4ae:	2a02      	cmp	r2, #2
            *buf++ = val;
    f4b0:	7043      	strb	r3, [r0, #1]
        for (i = 0; i < len; i++) {
    f4b2:	d000      	beq.n	f4b6 <_ZN9ClearCore16CcioBoardManager12CcioDiscoverEPNS_12SerialDriverE.part.1+0x1ce>
            *buf++ = val;
    f4b4:	7083      	strb	r3, [r0, #2]
                                                   2 * MAX_CCIO_DEVICES + 1);
    f4b6:	2311      	movs	r3, #17
    f4b8:	e746      	b.n	f348 <_ZN9ClearCore16CcioBoardManager12CcioDiscoverEPNS_12SerialDriverE.part.1+0x60>
                    else {
                        uint8_t i;
                        bool foundAA = false;
                        // Count until we see a's
                        for (i = 0; i < 2 * MAX_CCIO_DEVICES && !foundAA; i++) {
                            if (m_readBuf.buf8[i] == 0xaa) {
    f4ba:	7ca1      	ldrb	r1, [r4, #18]
    f4bc:	29aa      	cmp	r1, #170	; 0xaa
    f4be:	f000 80aa 	beq.w	f616 <_ZN9ClearCore16CcioBoardManager12CcioDiscoverEPNS_12SerialDriverE.part.1+0x32e>
    f4c2:	7ce2      	ldrb	r2, [r4, #19]
    f4c4:	2aaa      	cmp	r2, #170	; 0xaa
    f4c6:	d040      	beq.n	f54a <_ZN9ClearCore16CcioBoardManager12CcioDiscoverEPNS_12SerialDriverE.part.1+0x262>
    f4c8:	7d23      	ldrb	r3, [r4, #20]
    f4ca:	2baa      	cmp	r3, #170	; 0xaa
    f4cc:	f000 80a5 	beq.w	f61a <_ZN9ClearCore16CcioBoardManager12CcioDiscoverEPNS_12SerialDriverE.part.1+0x332>
    f4d0:	7d63      	ldrb	r3, [r4, #21]
    f4d2:	2baa      	cmp	r3, #170	; 0xaa
    f4d4:	f000 80a7 	beq.w	f626 <_ZN9ClearCore16CcioBoardManager12CcioDiscoverEPNS_12SerialDriverE.part.1+0x33e>
    f4d8:	7da3      	ldrb	r3, [r4, #22]
    f4da:	2baa      	cmp	r3, #170	; 0xaa
    f4dc:	f000 8118 	beq.w	f710 <_ZN9ClearCore16CcioBoardManager12CcioDiscoverEPNS_12SerialDriverE.part.1+0x428>
    f4e0:	7de3      	ldrb	r3, [r4, #23]
    f4e2:	2baa      	cmp	r3, #170	; 0xaa
    f4e4:	f000 80a1 	beq.w	f62a <_ZN9ClearCore16CcioBoardManager12CcioDiscoverEPNS_12SerialDriverE.part.1+0x342>
    f4e8:	7e23      	ldrb	r3, [r4, #24]
    f4ea:	2baa      	cmp	r3, #170	; 0xaa
    f4ec:	f000 8112 	beq.w	f714 <_ZN9ClearCore16CcioBoardManager12CcioDiscoverEPNS_12SerialDriverE.part.1+0x42c>
    f4f0:	7e63      	ldrb	r3, [r4, #25]
    f4f2:	2baa      	cmp	r3, #170	; 0xaa
    f4f4:	f000 8110 	beq.w	f718 <_ZN9ClearCore16CcioBoardManager12CcioDiscoverEPNS_12SerialDriverE.part.1+0x430>
    f4f8:	7ea3      	ldrb	r3, [r4, #26]
    f4fa:	2baa      	cmp	r3, #170	; 0xaa
    f4fc:	f000 810e 	beq.w	f71c <_ZN9ClearCore16CcioBoardManager12CcioDiscoverEPNS_12SerialDriverE.part.1+0x434>
    f500:	7ee3      	ldrb	r3, [r4, #27]
    f502:	2baa      	cmp	r3, #170	; 0xaa
    f504:	f000 8102 	beq.w	f70c <_ZN9ClearCore16CcioBoardManager12CcioDiscoverEPNS_12SerialDriverE.part.1+0x424>
    f508:	7f23      	ldrb	r3, [r4, #28]
    f50a:	2baa      	cmp	r3, #170	; 0xaa
    f50c:	f000 8108 	beq.w	f720 <_ZN9ClearCore16CcioBoardManager12CcioDiscoverEPNS_12SerialDriverE.part.1+0x438>
    f510:	7f63      	ldrb	r3, [r4, #29]
    f512:	2baa      	cmp	r3, #170	; 0xaa
    f514:	f000 811c 	beq.w	f750 <_ZN9ClearCore16CcioBoardManager12CcioDiscoverEPNS_12SerialDriverE.part.1+0x468>
    f518:	7fa3      	ldrb	r3, [r4, #30]
    f51a:	2baa      	cmp	r3, #170	; 0xaa
    f51c:	f000 811a 	beq.w	f754 <_ZN9ClearCore16CcioBoardManager12CcioDiscoverEPNS_12SerialDriverE.part.1+0x46c>
    f520:	7fe3      	ldrb	r3, [r4, #31]
    f522:	2baa      	cmp	r3, #170	; 0xaa
    f524:	f000 8118 	beq.w	f758 <_ZN9ClearCore16CcioBoardManager12CcioDiscoverEPNS_12SerialDriverE.part.1+0x470>
    f528:	f894 3020 	ldrb.w	r3, [r4, #32]
    f52c:	2baa      	cmp	r3, #170	; 0xaa
    f52e:	f000 8115 	beq.w	f75c <_ZN9ClearCore16CcioBoardManager12CcioDiscoverEPNS_12SerialDriverE.part.1+0x474>
    f532:	f894 3021 	ldrb.w	r3, [r4, #33]	; 0x21
    f536:	2baa      	cmp	r3, #170	; 0xaa
    f538:	f000 8108 	beq.w	f74c <_ZN9ClearCore16CcioBoardManager12CcioDiscoverEPNS_12SerialDriverE.part.1+0x464>
                            }
                            else {
                                numFound++;
                            }
                        }
                        if (!foundAA &&
    f53c:	f894 3022 	ldrb.w	r3, [r4, #34]	; 0x22
    f540:	2baa      	cmp	r3, #170	; 0xaa
                                numFound++;
    f542:	bf08      	it	eq
    f544:	2310      	moveq	r3, #16
                        if (!foundAA &&
    f546:	f040 80ed 	bne.w	f724 <_ZN9ClearCore16CcioBoardManager12CcioDiscoverEPNS_12SerialDriverE.part.1+0x43c>
            buf64.writeMarker = 0;
    f54a:	2200      	movs	r2, #0
                                                false);
                            m_lastDiscoverTime = tickCnt;
                            return 0;
                        }
                        // Break from loop
                        m_discoverState = CCIO_FOUND;
    f54c:	2502      	movs	r5, #2
    f54e:	f884 5024 	strb.w	r5, [r4, #36]	; 0x24
    f552:	74a2      	strb	r2, [r4, #18]
            buf64.inputs = 0;
    f554:	74e2      	strb	r2, [r4, #19]
    f556:	7522      	strb	r2, [r4, #20]
    f558:	7562      	strb	r2, [r4, #21]
    f55a:	75a2      	strb	r2, [r4, #22]
    f55c:	75e2      	strb	r2, [r4, #23]
    f55e:	7622      	strb	r2, [r4, #24]
    f560:	7662      	strb	r2, [r4, #25]
    f562:	76a2      	strb	r2, [r4, #26]
            buf64.outputsSwapped = 0;
    f564:	76e2      	strb	r2, [r4, #27]
    f566:	7722      	strb	r2, [r4, #28]
    f568:	7762      	strb	r2, [r4, #29]
    f56a:	77a2      	strb	r2, [r4, #30]
    f56c:	77e2      	strb	r2, [r4, #31]
    f56e:	f884 2020 	strb.w	r2, [r4, #32]
    f572:	f884 2021 	strb.w	r2, [r4, #33]	; 0x21
    f576:	f884 2022 	strb.w	r2, [r4, #34]	; 0x22
            buf64.readMarker = 0;
    f57a:	f884 2023 	strb.w	r2, [r4, #35]	; 0x23
        }
    }

    // numFound is the number of input and output regs found
    // so divide by 2 to get CCIO-8 count
    numFound >>= 1;
    f57e:	105b      	asrs	r3, r3, #1
    f580:	b2dd      	uxtb	r5, r3
    m_ccioCnt = numFound;
    m_ccioMask = (1 << (m_ccioCnt * CCIO_PINS_PER_BOARD)) - 1;
    f582:	2701      	movs	r7, #1
    f584:	00da      	lsls	r2, r3, #3
    m_ccioCnt = numFound;
    f586:	f884 502c 	strb.w	r5, [r4, #44]	; 0x2c
    m_ccioMask = (1 << (m_ccioCnt * CCIO_PINS_PER_BOARD)) - 1;
    f58a:	fa07 f202 	lsl.w	r2, r7, r2
        uint8_t cnt = CcioCount();
    f58e:	f894 602c 	ldrb.w	r6, [r4, #44]	; 0x2c
    f592:	3a01      	subs	r2, #1
    f594:	4610      	mov	r0, r2
    f596:	17d1      	asrs	r1, r2, #31
    f598:	b2f2      	uxtb	r2, r6
        return (cnt > 1) ? (cnt >> 1) : 1;
    f59a:	42ba      	cmp	r2, r7
    f59c:	bfc8      	it	gt
    f59e:	fa42 f707 	asrgt.w	r7, r2, r7
    f5a2:	e9c4 011c 	strd	r0, r1, [r4, #112]	; 0x70
    m_ccioRefreshRate = RefreshRate();
    f5a6:	f884 702d 	strb.w	r7, [r4, #45]	; 0x2d

    if (numFound != 0) {
    f5aa:	2b00      	cmp	r3, #0
    f5ac:	d13f      	bne.n	f62e <_ZN9ClearCore16CcioBoardManager12CcioDiscoverEPNS_12SerialDriverE.part.1+0x346>
    f5ae:	4b6d      	ldr	r3, [pc, #436]	; (f764 <_ZN9ClearCore16CcioBoardManager12CcioDiscoverEPNS_12SerialDriverE.part.1+0x47c>)
        m_ccioOverloaded = 0;
        m_ccioLinkBroken = false;
        ShiftReg.LedInFault(m_faultLed, m_ccioOverloaded);
    }

    ShiftReg.LedPattern(m_faultLed,
    f5b0:	f8d4 10c0 	ldr.w	r1, [r4, #192]	; 0xc0
                                           : m_patternMasks[pattern] &= ~ledMask;
    f5b4:	f8d3 20ec 	ldr.w	r2, [r3, #236]	; 0xec
    f5b8:	43c9      	mvns	r1, r1
    f5ba:	4011      	ands	r1, r2
                        ShiftRegister::LED_BLINK_CCIO_ONLINE,
                        !m_ccioLinkBroken && !m_ccioOverloaded &&
                        (numFound > 0));

    m_lastDiscoverTime = tickCnt;
    f5bc:	4a6a      	ldr	r2, [pc, #424]	; (f768 <_ZN9ClearCore16CcioBoardManager12CcioDiscoverEPNS_12SerialDriverE.part.1+0x480>)
    f5be:	f8c3 10ec 	str.w	r1, [r3, #236]	; 0xec
    f5c2:	6813      	ldr	r3, [r2, #0]
    f5c4:	f8c4 30c8 	str.w	r3, [r4, #200]	; 0xc8
    return numFound;
}
    f5c8:	4628      	mov	r0, r5
    f5ca:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
                            flush0Success = true;
    f5ce:	2601      	movs	r6, #1
    f5d0:	e713      	b.n	f3fa <_ZN9ClearCore16CcioBoardManager12CcioDiscoverEPNS_12SerialDriverE.part.1+0x112>
            *buf++ = val;
    f5d2:	4623      	mov	r3, r4
    f5d4:	f04f 32aa 	mov.w	r2, #2863311530	; 0xaaaaaaaa
    f5d8:	f843 2b04 	str.w	r2, [r3], #4
                        FillBuffer(m_writeBuf.buf8,
    f5dc:	4621      	mov	r1, r4
    f5de:	2211      	movs	r2, #17
    f5e0:	e752      	b.n	f488 <_ZN9ClearCore16CcioBoardManager12CcioDiscoverEPNS_12SerialDriverE.part.1+0x1a0>
            StatusMgr.BlinkCode(
    f5e2:	4a62      	ldr	r2, [pc, #392]	; (f76c <_ZN9ClearCore16CcioBoardManager12CcioDiscoverEPNS_12SerialDriverE.part.1+0x484>)
                                BlinkCodeDriver::DEVICE_ERROR_CCIO);
    f5e4:	6810      	ldr	r0, [r2, #0]
                            m_ccioLinkBroken = true;
    f5e6:	2301      	movs	r3, #1
    f5e8:	f884 3092 	strb.w	r3, [r4, #146]	; 0x92
                                BlinkCodeDriver::DEVICE_ERROR_CCIO);
    f5ec:	2208      	movs	r2, #8
    f5ee:	2102      	movs	r1, #2
    f5f0:	f7f7 fa34 	bl	6a5c <_ZN9ClearCore13StatusManager9BlinkCodeENS_15BlinkCodeDriver15BlinkCodeGroupsEh>
    f5f4:	4a5b      	ldr	r2, [pc, #364]	; (f764 <_ZN9ClearCore16CcioBoardManager12CcioDiscoverEPNS_12SerialDriverE.part.1+0x47c>)
    f5f6:	f8d4 00c0 	ldr.w	r0, [r4, #192]	; 0xc0
    f5fa:	f8d2 30ec 	ldr.w	r3, [r2, #236]	; 0xec
                            m_lastDiscoverTime = tickCnt;
    f5fe:	495a      	ldr	r1, [pc, #360]	; (f768 <_ZN9ClearCore16CcioBoardManager12CcioDiscoverEPNS_12SerialDriverE.part.1+0x480>)
    f600:	ea23 0300 	bic.w	r3, r3, r0
    f604:	6809      	ldr	r1, [r1, #0]
    f606:	f8c2 30ec 	str.w	r3, [r2, #236]	; 0xec
                            return 0;
    f60a:	2500      	movs	r5, #0
                            m_lastDiscoverTime = tickCnt;
    f60c:	f8c4 10c8 	str.w	r1, [r4, #200]	; 0xc8
}
    f610:	4628      	mov	r0, r5
    f612:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
                            if (m_readBuf.buf8[i] == 0xaa) {
    f616:	4613      	mov	r3, r2
    f618:	e797      	b.n	f54a <_ZN9ClearCore16CcioBoardManager12CcioDiscoverEPNS_12SerialDriverE.part.1+0x262>
                                numFound++;
    f61a:	2302      	movs	r3, #2
    f61c:	e795      	b.n	f54a <_ZN9ClearCore16CcioBoardManager12CcioDiscoverEPNS_12SerialDriverE.part.1+0x262>
    f61e:	220f      	movs	r2, #15
    f620:	e72d      	b.n	f47e <_ZN9ClearCore16CcioBoardManager12CcioDiscoverEPNS_12SerialDriverE.part.1+0x196>
    f622:	2210      	movs	r2, #16
    f624:	e72b      	b.n	f47e <_ZN9ClearCore16CcioBoardManager12CcioDiscoverEPNS_12SerialDriverE.part.1+0x196>
    f626:	2303      	movs	r3, #3
    f628:	e78f      	b.n	f54a <_ZN9ClearCore16CcioBoardManager12CcioDiscoverEPNS_12SerialDriverE.part.1+0x262>
    f62a:	2305      	movs	r3, #5
    f62c:	e78d      	b.n	f54a <_ZN9ClearCore16CcioBoardManager12CcioDiscoverEPNS_12SerialDriverE.part.1+0x262>
            UINT64_MAX >> ((MAX_CCIO_DEVICES - m_ccioCnt) *
    f62e:	f1c3 0108 	rsb	r1, r3, #8
    f632:	00ce      	lsls	r6, r1, #3
    f634:	f04f 30ff 	mov.w	r0, #4294967295
    f638:	f1c6 0220 	rsb	r2, r6, #32
    f63c:	fa00 f202 	lsl.w	r2, r0, r2
    f640:	fa20 fe06 	lsr.w	lr, r0, r6
    f644:	f1a6 0720 	sub.w	r7, r6, #32
    f648:	fa20 f707 	lsr.w	r7, r0, r7
    f64c:	ea4e 0e02 	orr.w	lr, lr, r2
            buf64.writeMarker = 0;
    f650:	4622      	mov	r2, r4
    f652:	ea4e 0e07 	orr.w	lr, lr, r7
    f656:	40f0      	lsrs	r0, r6
    f658:	2600      	movs	r6, #0
        m_lastOutputsSwapped =
    f65a:	f8c4 e058 	str.w	lr, [r4, #88]	; 0x58
    f65e:	65e0      	str	r0, [r4, #92]	; 0x5c
    f660:	f802 6b01 	strb.w	r6, [r2], #1
        m_writeBuf.buf8[MAX_CCIO_DEVICES] = MARKER_BYTE;
    f664:	27cc      	movs	r7, #204	; 0xcc
            buf64.inputs = 0;
    f666:	7066      	strb	r6, [r4, #1]
        m_serPort->SpiTransferData(m_writeBuf.buf8 +
    f668:	f104 0812 	add.w	r8, r4, #18
    f66c:	7056      	strb	r6, [r2, #1]
    f66e:	7096      	strb	r6, [r2, #2]
    f670:	70d6      	strb	r6, [r2, #3]
    f672:	7116      	strb	r6, [r2, #4]
    f674:	7156      	strb	r6, [r2, #5]
    f676:	7196      	strb	r6, [r2, #6]
                                   (MAX_CCIO_DEVICES - m_ccioCnt) + 1,
    f678:	f1c3 0209 	rsb	r2, r3, #9
                                   2 * m_ccioCnt + 1);
    f67c:	005b      	lsls	r3, r3, #1
        m_writeBuf.buf64.outputsSwapped =
    f67e:	f8c4 e009 	str.w	lr, [r4, #9]
                                   2 * m_ccioCnt + 1);
    f682:	4442      	add	r2, r8
    f684:	3301      	adds	r3, #1
    f686:	4421      	add	r1, r4
        m_writeBuf.buf64.outputsSwapped =
    f688:	f8c4 000d 	str.w	r0, [r4, #13]
        m_writeBuf.buf8[MAX_CCIO_DEVICES] = MARKER_BYTE;
    f68c:	7227      	strb	r7, [r4, #8]
            buf64.readMarker = 0;
    f68e:	7466      	strb	r6, [r4, #17]
                                   2 * m_ccioCnt + 1);
    f690:	6aa0      	ldr	r0, [r4, #40]	; 0x28
    f692:	f001 fe69 	bl	11368 <_ZN9ClearCore10SerialBase15SpiTransferDataEPKhPhl>
        m_serPort->SpiSsMode(SerialBase::CtrlLineModes::LINE_OFF);
    f696:	4631      	mov	r1, r6
    f698:	6aa0      	ldr	r0, [r4, #40]	; 0x28
    f69a:	f001 fdbb 	bl	11214 <_ZN9ClearCore10SerialBase9SpiSsModeENS0_13CtrlLineModesE>
        m_writeBuf.buf8[(MAX_CCIO_DEVICES - m_ccioCnt)] = MARKER_BYTE;
    f69e:	f894 302c 	ldrb.w	r3, [r4, #44]	; 0x2c
    f6a2:	f1c3 0308 	rsb	r3, r3, #8
        m_serPort->SpiSsMode(SerialBase::CtrlLineModes::LINE_ON);
    f6a6:	2101      	movs	r1, #1
        m_writeBuf.buf8[(MAX_CCIO_DEVICES - m_ccioCnt)] = MARKER_BYTE;
    f6a8:	54e7      	strb	r7, [r4, r3]
        m_writeBuf.buf8[MAX_CCIO_DEVICES] = 0;
    f6aa:	7226      	strb	r6, [r4, #8]
        m_serPort->SpiSsMode(SerialBase::CtrlLineModes::LINE_ON);
    f6ac:	6aa0      	ldr	r0, [r4, #40]	; 0x28
    f6ae:	f001 fdb1 	bl	11214 <_ZN9ClearCore10SerialBase9SpiSsModeENS0_13CtrlLineModesE>
                                   (MAX_CCIO_DEVICES - m_ccioCnt),
    f6b2:	f894 302c 	ldrb.w	r3, [r4, #44]	; 0x2c
                                   2 * m_ccioCnt + 1);
    f6b6:	6aa0      	ldr	r0, [r4, #40]	; 0x28
                                   (MAX_CCIO_DEVICES - m_ccioCnt) + 1,
    f6b8:	f1c3 0209 	rsb	r2, r3, #9
                                   (MAX_CCIO_DEVICES - m_ccioCnt),
    f6bc:	f1c3 0108 	rsb	r1, r3, #8
                                   2 * m_ccioCnt + 1);
    f6c0:	2701      	movs	r7, #1
    f6c2:	4442      	add	r2, r8
    f6c4:	eb07 0343 	add.w	r3, r7, r3, lsl #1
    f6c8:	4421      	add	r1, r4
    f6ca:	f001 fe4d 	bl	11368 <_ZN9ClearCore10SerialBase15SpiTransferDataEPKhPhl>
        m_serPort->SpiSsMode(SerialBase::CtrlLineModes::LINE_OFF);
    f6ce:	4631      	mov	r1, r6
    f6d0:	6aa0      	ldr	r0, [r4, #40]	; 0x28
    f6d2:	f001 fd9f 	bl	11214 <_ZN9ClearCore10SerialBase9SpiSsModeENS0_13CtrlLineModesE>
        m_ccioRefreshDelay = m_ccioRefreshRate;
    f6d6:	f894 202d 	ldrb.w	r2, [r4, #45]	; 0x2d
            m_patternMasks[LED_BLINK_OVERLOAD] &= ~ledMask;
    f6da:	4b22      	ldr	r3, [pc, #136]	; (f764 <_ZN9ClearCore16CcioBoardManager12CcioDiscoverEPNS_12SerialDriverE.part.1+0x47c>)
    f6dc:	f884 202e 	strb.w	r2, [r4, #46]	; 0x2e
    f6e0:	f8d3 20f0 	ldr.w	r2, [r3, #240]	; 0xf0
        ShiftReg.LedInFault(m_faultLed, m_ccioOverloaded);
    f6e4:	f8d4 10c0 	ldr.w	r1, [r4, #192]	; 0xc0
        state ? m_patternMasks[pattern] |= ledMask
    f6e8:	f8d3 00ec 	ldr.w	r0, [r3, #236]	; 0xec
        m_consGlitchCnt = 0;
    f6ec:	f8a4 6090 	strh.w	r6, [r4, #144]	; 0x90
            m_patternMasks[LED_BLINK_OVERLOAD] &= ~ledMask;
    f6f0:	ea22 0201 	bic.w	r2, r2, r1
        m_ccioOverloaded = 0;
    f6f4:	f04f 0800 	mov.w	r8, #0
    f6f8:	f04f 0900 	mov.w	r9, #0
        m_ccioLinkBroken = false;
    f6fc:	f884 6092 	strb.w	r6, [r4, #146]	; 0x92
        m_ccioOverloaded = 0;
    f700:	e9c4 8926 	strd	r8, r9, [r4, #152]	; 0x98
        state ? m_patternMasks[pattern] |= ledMask
    f704:	4301      	orrs	r1, r0
            m_patternMasks[LED_BLINK_OVERLOAD] &= ~ledMask;
    f706:	f8c3 20f0 	str.w	r2, [r3, #240]	; 0xf0
    f70a:	e757      	b.n	f5bc <_ZN9ClearCore16CcioBoardManager12CcioDiscoverEPNS_12SerialDriverE.part.1+0x2d4>
                                numFound++;
    f70c:	2309      	movs	r3, #9
    f70e:	e71c      	b.n	f54a <_ZN9ClearCore16CcioBoardManager12CcioDiscoverEPNS_12SerialDriverE.part.1+0x262>
    f710:	2304      	movs	r3, #4
    f712:	e71a      	b.n	f54a <_ZN9ClearCore16CcioBoardManager12CcioDiscoverEPNS_12SerialDriverE.part.1+0x262>
    f714:	2306      	movs	r3, #6
    f716:	e718      	b.n	f54a <_ZN9ClearCore16CcioBoardManager12CcioDiscoverEPNS_12SerialDriverE.part.1+0x262>
    f718:	2307      	movs	r3, #7
    f71a:	e716      	b.n	f54a <_ZN9ClearCore16CcioBoardManager12CcioDiscoverEPNS_12SerialDriverE.part.1+0x262>
    f71c:	2308      	movs	r3, #8
    f71e:	e714      	b.n	f54a <_ZN9ClearCore16CcioBoardManager12CcioDiscoverEPNS_12SerialDriverE.part.1+0x262>
    f720:	230a      	movs	r3, #10
    f722:	e712      	b.n	f54a <_ZN9ClearCore16CcioBoardManager12CcioDiscoverEPNS_12SerialDriverE.part.1+0x262>
                            m_ccioCnt = 0;
    f724:	2300      	movs	r3, #0
    f726:	f884 302c 	strb.w	r3, [r4, #44]	; 0x2c
        uint8_t cnt = CcioCount();
    f72a:	f894 302c 	ldrb.w	r3, [r4, #44]	; 0x2c
                            StatusMgr.BlinkCode(
    f72e:	4a0f      	ldr	r2, [pc, #60]	; (f76c <_ZN9ClearCore16CcioBoardManager12CcioDiscoverEPNS_12SerialDriverE.part.1+0x484>)
    f730:	b2db      	uxtb	r3, r3
        return (cnt > 1) ? (cnt >> 1) : 1;
    f732:	2b01      	cmp	r3, #1
                            m_ccioMask = 0;
    f734:	f04f 0000 	mov.w	r0, #0
    f738:	f04f 0100 	mov.w	r1, #0
    f73c:	bfcc      	ite	gt
    f73e:	105b      	asrgt	r3, r3, #1
    f740:	2301      	movle	r3, #1
    f742:	e9c4 011c 	strd	r0, r1, [r4, #112]	; 0x70
                            m_ccioRefreshRate = RefreshRate();
    f746:	f884 302d 	strb.w	r3, [r4, #45]	; 0x2d
    f74a:	e74b      	b.n	f5e4 <_ZN9ClearCore16CcioBoardManager12CcioDiscoverEPNS_12SerialDriverE.part.1+0x2fc>
                                numFound++;
    f74c:	230f      	movs	r3, #15
    f74e:	e6fc      	b.n	f54a <_ZN9ClearCore16CcioBoardManager12CcioDiscoverEPNS_12SerialDriverE.part.1+0x262>
    f750:	230b      	movs	r3, #11
    f752:	e6fa      	b.n	f54a <_ZN9ClearCore16CcioBoardManager12CcioDiscoverEPNS_12SerialDriverE.part.1+0x262>
    f754:	230c      	movs	r3, #12
    f756:	e6f8      	b.n	f54a <_ZN9ClearCore16CcioBoardManager12CcioDiscoverEPNS_12SerialDriverE.part.1+0x262>
    f758:	230d      	movs	r3, #13
    f75a:	e6f6      	b.n	f54a <_ZN9ClearCore16CcioBoardManager12CcioDiscoverEPNS_12SerialDriverE.part.1+0x262>
    f75c:	230e      	movs	r3, #14
    f75e:	e6f4      	b.n	f54a <_ZN9ClearCore16CcioBoardManager12CcioDiscoverEPNS_12SerialDriverE.part.1+0x262>
        if (flushCnt >= MAX_FLUSH_ATTEMPTS) {
    f760:	2300      	movs	r3, #0
    f762:	e70c      	b.n	f57e <_ZN9ClearCore16CcioBoardManager12CcioDiscoverEPNS_12SerialDriverE.part.1+0x296>
    f764:	20001b00 	.word	0x20001b00
    f768:	20001d1c 	.word	0x20001d1c
    f76c:	20000bf8 	.word	0x20000bf8

0000f770 <_ZN9ClearCore16CcioBoardManager8InstanceEv>:
CcioBoardManager &CcioBoardManager::Instance() {
    f770:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    static CcioBoardManager *instance = new CcioBoardManager();
    f774:	4f42      	ldr	r7, [pc, #264]	; (f880 <_ZN9ClearCore16CcioBoardManager8InstanceEv+0x110>)
    f776:	683c      	ldr	r4, [r7, #0]
    f778:	f014 0401 	ands.w	r4, r4, #1
    f77c:	d003      	beq.n	f786 <_ZN9ClearCore16CcioBoardManager8InstanceEv+0x16>
    f77e:	4b41      	ldr	r3, [pc, #260]	; (f884 <_ZN9ClearCore16CcioBoardManager8InstanceEv+0x114>)
    f780:	6818      	ldr	r0, [r3, #0]
    f782:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    f786:	f44f 602d 	mov.w	r0, #2768	; 0xad0
    f78a:	f003 fc1d 	bl	12fc8 <_Znwj>
            buf64.writeMarker = 0;
    f78e:	4603      	mov	r3, r0
    f790:	4606      	mov	r6, r0
    f792:	f803 4b01 	strb.w	r4, [r3], #1
      m_lastDiscoverTime(0) {
    f796:	f04f 38ff 	mov.w	r8, #4294967295
    f79a:	f04f 39ff 	mov.w	r9, #4294967295
    f79e:	2200      	movs	r2, #0
            buf64.inputs = 0;
    f7a0:	7074      	strb	r4, [r6, #1]
    f7a2:	705c      	strb	r4, [r3, #1]
    f7a4:	709c      	strb	r4, [r3, #2]
    f7a6:	70dc      	strb	r4, [r3, #3]
    f7a8:	711c      	strb	r4, [r3, #4]
    f7aa:	715c      	strb	r4, [r3, #5]
    f7ac:	719c      	strb	r4, [r3, #6]
    f7ae:	71dc      	strb	r4, [r3, #7]
    f7b0:	2300      	movs	r3, #0
            buf64.outputsSwapped = 0;
    f7b2:	7274      	strb	r4, [r6, #9]
    f7b4:	72b4      	strb	r4, [r6, #10]
    f7b6:	72f4      	strb	r4, [r6, #11]
    f7b8:	7334      	strb	r4, [r6, #12]
    f7ba:	7374      	strb	r4, [r6, #13]
    f7bc:	73b4      	strb	r4, [r6, #14]
    f7be:	73f4      	strb	r4, [r6, #15]
    f7c0:	7434      	strb	r4, [r6, #16]
            buf64.readMarker = 0;
    f7c2:	7474      	strb	r4, [r6, #17]
            buf64.writeMarker = 0;
    f7c4:	74b4      	strb	r4, [r6, #18]
            buf64.inputs = 0;
    f7c6:	74f4      	strb	r4, [r6, #19]
    f7c8:	7534      	strb	r4, [r6, #20]
    f7ca:	7574      	strb	r4, [r6, #21]
    f7cc:	75b4      	strb	r4, [r6, #22]
    f7ce:	75f4      	strb	r4, [r6, #23]
    f7d0:	7634      	strb	r4, [r6, #24]
    f7d2:	7674      	strb	r4, [r6, #25]
    f7d4:	76b4      	strb	r4, [r6, #26]
            buf64.outputsSwapped = 0;
    f7d6:	76f4      	strb	r4, [r6, #27]
    f7d8:	7734      	strb	r4, [r6, #28]
    f7da:	7774      	strb	r4, [r6, #29]
    f7dc:	77b4      	strb	r4, [r6, #30]
    f7de:	77f4      	strb	r4, [r6, #31]
    f7e0:	f886 4020 	strb.w	r4, [r6, #32]
    f7e4:	e9c6 8916 	strd	r8, r9, [r6, #88]	; 0x58
    f7e8:	e9c6 230c 	strd	r2, r3, [r6, #48]	; 0x30
    f7ec:	e9c6 230e 	strd	r2, r3, [r6, #56]	; 0x38
    f7f0:	e9c6 2310 	strd	r2, r3, [r6, #64]	; 0x40
    f7f4:	e9c6 2312 	strd	r2, r3, [r6, #72]	; 0x48
    f7f8:	e9c6 2314 	strd	r2, r3, [r6, #80]	; 0x50
    f7fc:	e9c6 2318 	strd	r2, r3, [r6, #96]	; 0x60
    f800:	e9c6 231a 	strd	r2, r3, [r6, #104]	; 0x68
    f804:	e9c6 231c 	strd	r2, r3, [r6, #112]	; 0x70
    f808:	e9c6 231e 	strd	r2, r3, [r6, #120]	; 0x78
    f80c:	e9c6 2320 	strd	r2, r3, [r6, #128]	; 0x80
    f810:	e9c6 2322 	strd	r2, r3, [r6, #136]	; 0x88
    f814:	e9c6 2326 	strd	r2, r3, [r6, #152]	; 0x98
    f818:	e9c6 2328 	strd	r2, r3, [r6, #160]	; 0xa0
    f81c:	e9c6 232a 	strd	r2, r3, [r6, #168]	; 0xa8
    f820:	e9c6 232c 	strd	r2, r3, [r6, #176]	; 0xb0
    f824:	e9c6 232e 	strd	r2, r3, [r6, #184]	; 0xb8
    f828:	2301      	movs	r3, #1
    f82a:	f886 4021 	strb.w	r4, [r6, #33]	; 0x21
    f82e:	f886 4022 	strb.w	r4, [r6, #34]	; 0x22
            buf64.readMarker = 0;
    f832:	f886 4023 	strb.w	r4, [r6, #35]	; 0x23
    f836:	f886 4024 	strb.w	r4, [r6, #36]	; 0x24
    f83a:	62b4      	str	r4, [r6, #40]	; 0x28
    f83c:	f886 402c 	strb.w	r4, [r6, #44]	; 0x2c
    f840:	f886 402e 	strb.w	r4, [r6, #46]	; 0x2e
    f844:	f8a6 4090 	strh.w	r4, [r6, #144]	; 0x90
    f848:	f886 4092 	strb.w	r4, [r6, #146]	; 0x92
    f84c:	f8c6 40c0 	str.w	r4, [r6, #192]	; 0xc0
    f850:	f8c6 40c8 	str.w	r4, [r6, #200]	; 0xc8
    f854:	f886 302d 	strb.w	r3, [r6, #45]	; 0x2d
    f858:	f886 30c4 	strb.w	r3, [r6, #196]	; 0xc4
    f85c:	f106 04d0 	add.w	r4, r6, #208	; 0xd0
    f860:	f506 652d 	add.w	r5, r6, #2768	; 0xad0
    f864:	4620      	mov	r0, r4
    f866:	3428      	adds	r4, #40	; 0x28
    f868:	f000 fc8a 	bl	10180 <_ZN9ClearCore7CcioPinC1Ev>
    f86c:	42ac      	cmp	r4, r5
    f86e:	d1f9      	bne.n	f864 <_ZN9ClearCore16CcioBoardManager8InstanceEv+0xf4>
    static CcioBoardManager *instance = new CcioBoardManager();
    f870:	4a04      	ldr	r2, [pc, #16]	; (f884 <_ZN9ClearCore16CcioBoardManager8InstanceEv+0x114>)
    f872:	2301      	movs	r3, #1
    f874:	6016      	str	r6, [r2, #0]
    f876:	4630      	mov	r0, r6
    f878:	603b      	str	r3, [r7, #0]
}
    f87a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    f87e:	bf00      	nop
    f880:	20001f24 	.word	0x20001f24
    f884:	20001f2c 	.word	0x20001f2c

0000f888 <_ZN9ClearCore16CcioBoardManager10InitializeEv>:
void CcioBoardManager::Initialize() {
    f888:	b570      	push	{r4, r5, r6, lr}
    f88a:	4606      	mov	r6, r0
    f88c:	f100 05d0 	add.w	r5, r0, #208	; 0xd0
    f890:	2440      	movs	r4, #64	; 0x40
        m_ccioPins[i].Initialize((ClearCorePins)(i + CLEARCORE_PIN_CCIO_BASE));
    f892:	682b      	ldr	r3, [r5, #0]
    f894:	b221      	sxth	r1, r4
    f896:	3401      	adds	r4, #1
    f898:	4628      	mov	r0, r5
    f89a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    f89c:	b2a4      	uxth	r4, r4
    f89e:	4798      	blx	r3
    for (uint8_t i = 0; i < CCIO_PIN_CNT; i++) {
    f8a0:	2c80      	cmp	r4, #128	; 0x80
    f8a2:	f105 0528 	add.w	r5, r5, #40	; 0x28
    f8a6:	d1f4      	bne.n	f892 <_ZN9ClearCore16CcioBoardManager10InitializeEv+0xa>
    if (m_discoverState == CCIO_FOUND || (LinkBroken() && !m_autoRediscover)) {
    f8a8:	f896 3024 	ldrb.w	r3, [r6, #36]	; 0x24
    f8ac:	2b02      	cmp	r3, #2
    f8ae:	d00b      	beq.n	f8c8 <_ZN9ClearCore16CcioBoardManager10InitializeEv+0x40>
    f8b0:	f896 3092 	ldrb.w	r3, [r6, #146]	; 0x92
    f8b4:	2b00      	cmp	r3, #0
    f8b6:	d13c      	bne.n	f932 <_ZN9ClearCore16CcioBoardManager10InitializeEv+0xaa>
        m_lastDiscoverTime = tickCnt;
    f8b8:	4a20      	ldr	r2, [pc, #128]	; (f93c <_ZN9ClearCore16CcioBoardManager10InitializeEv+0xb4>)
    m_serPort = comInstance;
    f8ba:	2300      	movs	r3, #0
        m_lastDiscoverTime = tickCnt;
    f8bc:	6812      	ldr	r2, [r2, #0]
    f8be:	f8c6 20c8 	str.w	r2, [r6, #200]	; 0xc8
    m_serPort = comInstance;
    f8c2:	62b3      	str	r3, [r6, #40]	; 0x28
        m_faultLed = ShiftRegister::Masks::SR_NO_FEEDBACK_MASK;
    f8c4:	f8c6 30c0 	str.w	r3, [r6, #192]	; 0xc0
    m_ccioCnt = 0;
    f8c8:	2100      	movs	r1, #0
    m_ccioRefreshRate = 1;
    f8ca:	2001      	movs	r0, #1
    m_ccioMask = 0;
    f8cc:	2200      	movs	r2, #0
    f8ce:	2300      	movs	r3, #0
    m_lastOutputsSwapped = ~0ULL;
    f8d0:	f04f 34ff 	mov.w	r4, #4294967295
    f8d4:	f04f 35ff 	mov.w	r5, #4294967295
    m_ccioCnt = 0;
    f8d8:	f886 102c 	strb.w	r1, [r6, #44]	; 0x2c
    m_ccioRefreshDelay = 0;
    f8dc:	f886 102e 	strb.w	r1, [r6, #46]	; 0x2e
    m_ccioRefreshRate = 1;
    f8e0:	f886 002d 	strb.w	r0, [r6, #45]	; 0x2d
    m_consGlitchCnt = 0;
    f8e4:	f8a6 1090 	strh.w	r1, [r6, #144]	; 0x90
    m_ccioLinkBroken = false;
    f8e8:	f886 1092 	strb.w	r1, [r6, #146]	; 0x92
    m_ccioMask = 0;
    f8ec:	e9c6 231c 	strd	r2, r3, [r6, #112]	; 0x70
    m_throttledOutputs = 0;
    f8f0:	e9c6 230c 	strd	r2, r3, [r6, #48]	; 0x30
    m_currentInputs = 0;
    f8f4:	e9c6 230e 	strd	r2, r3, [r6, #56]	; 0x38
    m_filteredInputs = 0;
    f8f8:	e9c6 2310 	strd	r2, r3, [r6, #64]	; 0x40
    m_currentOutputs = 0;
    f8fc:	e9c6 2312 	strd	r2, r3, [r6, #72]	; 0x48
    m_outputMask = 0;
    f900:	e9c6 2314 	strd	r2, r3, [r6, #80]	; 0x50
    m_lastOutputs = 0;
    f904:	e9c6 2318 	strd	r2, r3, [r6, #96]	; 0x60
    m_outputsWithThrottling = 0;
    f908:	e9c6 231a 	strd	r2, r3, [r6, #104]	; 0x68
    m_pulseActive = 0;
    f90c:	e9c6 231e 	strd	r2, r3, [r6, #120]	; 0x78
    m_pulseValue = 0;
    f910:	e9c6 2320 	strd	r2, r3, [r6, #128]	; 0x80
    m_pulseStopPending = 0;
    f914:	e9c6 2322 	strd	r2, r3, [r6, #136]	; 0x88
    m_ccioOverloaded = 0;
    f918:	e9c6 2326 	strd	r2, r3, [r6, #152]	; 0x98
    m_ccioOverloadAccum = 0;
    f91c:	e9c6 2328 	strd	r2, r3, [r6, #160]	; 0xa0
    m_inputRegRisen = 0;
    f920:	e9c6 232c 	strd	r2, r3, [r6, #176]	; 0xb0
    m_inputRegFallen = 0;
    f924:	e9c6 232e 	strd	r2, r3, [r6, #184]	; 0xb8
    m_autoRediscover = true;
    f928:	f886 00c4 	strb.w	r0, [r6, #196]	; 0xc4
    m_lastOutputsSwapped = ~0ULL;
    f92c:	e9c6 4516 	strd	r4, r5, [r6, #88]	; 0x58
}
    f930:	bd70      	pop	{r4, r5, r6, pc}
    if (m_discoverState == CCIO_FOUND || (LinkBroken() && !m_autoRediscover)) {
    f932:	f896 30c4 	ldrb.w	r3, [r6, #196]	; 0xc4
    f936:	2b00      	cmp	r3, #0
    f938:	d1be      	bne.n	f8b8 <_ZN9ClearCore16CcioBoardManager10InitializeEv+0x30>
    f93a:	e7c5      	b.n	f8c8 <_ZN9ClearCore16CcioBoardManager10InitializeEv+0x40>
    f93c:	20001d1c 	.word	0x20001d1c

0000f940 <_ZN9ClearCore16CcioBoardManager8PinStateE13ClearCorePins>:
    if (pinNum < CLEARCORE_PIN_CCIO_BASE || pinNum >= CLEARCORE_PIN_CCIO_MAX) {
    f940:	3940      	subs	r1, #64	; 0x40
    f942:	b28b      	uxth	r3, r1
    f944:	2b3f      	cmp	r3, #63	; 0x3f
    f946:	d80f      	bhi.n	f968 <_ZN9ClearCore16CcioBoardManager8PinStateE13ClearCorePins+0x28>
    return ((m_filteredInputs >> bitIndex) & 1);
    f948:	6c42      	ldr	r2, [r0, #68]	; 0x44
    f94a:	6c00      	ldr	r0, [r0, #64]	; 0x40
    f94c:	b2c9      	uxtb	r1, r1
    f94e:	f1c1 0320 	rsb	r3, r1, #32
    f952:	fa02 f303 	lsl.w	r3, r2, r3
    f956:	40c8      	lsrs	r0, r1
    f958:	3920      	subs	r1, #32
    f95a:	4318      	orrs	r0, r3
    f95c:	fa22 f101 	lsr.w	r1, r2, r1
    f960:	4308      	orrs	r0, r1
}
    f962:	f000 0001 	and.w	r0, r0, #1
    f966:	4770      	bx	lr
    f968:	2000      	movs	r0, #0
    f96a:	f000 0001 	and.w	r0, r0, #1
    f96e:	4770      	bx	lr

0000f970 <_ZN9ClearCore16CcioBoardManager7RefreshEv>:
    if (!m_serPort || !m_ccioCnt || m_ccioLinkBroken) {
    f970:	6a81      	ldr	r1, [r0, #40]	; 0x28
    f972:	2900      	cmp	r1, #0
    f974:	f000 8084 	beq.w	fa80 <_ZN9ClearCore16CcioBoardManager7RefreshEv+0x110>
    f978:	f890 302c 	ldrb.w	r3, [r0, #44]	; 0x2c
    f97c:	2b00      	cmp	r3, #0
    f97e:	d07f      	beq.n	fa80 <_ZN9ClearCore16CcioBoardManager7RefreshEv+0x110>
    f980:	f890 2092 	ldrb.w	r2, [r0, #146]	; 0x92
    f984:	2a00      	cmp	r2, #0
    f986:	d17b      	bne.n	fa80 <_ZN9ClearCore16CcioBoardManager7RefreshEv+0x110>
void CcioBoardManager::Refresh() {
    f988:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    if (m_pulseActive) {
    f98c:	e9d0 ab1e 	ldrd	sl, fp, [r0, #120]	; 0x78
    f990:	ea5a 040b 	orrs.w	r4, sl, fp
void CcioBoardManager::Refresh() {
    f994:	b091      	sub	sp, #68	; 0x44
    if (m_pulseActive) {
    f996:	f000 80a3 	beq.w	fae0 <_ZN9ClearCore16CcioBoardManager7RefreshEv+0x170>
    f99a:	e9d0 4520 	ldrd	r4, r5, [r0, #128]	; 0x80
    f99e:	e9cd 4502 	strd	r4, r5, [sp, #8]
        for (uint8_t i = 0; i < CCIO_PINS_PER_BOARD * m_ccioCnt; i++) {
    f9a2:	2400      	movs	r4, #0
    f9a4:	2500      	movs	r5, #0
    f9a6:	4690      	mov	r8, r2
    f9a8:	ea4f 0cc3 	mov.w	ip, r3, lsl #3
    f9ac:	4696      	mov	lr, r2
    f9ae:	e9cd 4504 	strd	r4, r5, [sp, #16]
    f9b2:	e9cd 4500 	strd	r4, r5, [sp]
    f9b6:	2201      	movs	r2, #1
    f9b8:	2300      	movs	r3, #0
    f9ba:	4626      	mov	r6, r4
    f9bc:	462f      	mov	r7, r5
    f9be:	9106      	str	r1, [sp, #24]
    f9c0:	e037      	b.n	fa32 <_ZN9ClearCore16CcioBoardManager7RefreshEv+0xc2>
                        if (++currentPin.m_pulseCounter >=
    f9c2:	f8b1 80f6 	ldrh.w	r8, [r1, #246]	; 0xf6
                        currentPin.m_pulseTicksRemaining =
    f9c6:	f8d1 50ec 	ldr.w	r5, [r1, #236]	; 0xec
                                currentPin.m_pulseStopCount &&
    f9ca:	f8b1 40f4 	ldrh.w	r4, [r1, #244]	; 0xf4
                        currentPin.m_pulseTicksRemaining =
    f9ce:	f8c1 50f0 	str.w	r5, [r1, #240]	; 0xf0
                        if (++currentPin.m_pulseCounter >=
    f9d2:	f108 0501 	add.w	r5, r8, #1
    f9d6:	b2ad      	uxth	r5, r5
                                currentPin.m_pulseStopCount &&
    f9d8:	42a5      	cmp	r5, r4
                        pulseFall |= mask;
    f9da:	ea46 0602 	orr.w	r6, r6, r2
    f9de:	ea47 0703 	orr.w	r7, r7, r3
                                currentPin.m_pulseStopCount &&
    f9e2:	f8a1 50f6 	strh.w	r5, [r1, #246]	; 0xf6
    f9e6:	db06      	blt.n	f9f6 <_ZN9ClearCore16CcioBoardManager7RefreshEv+0x86>
    f9e8:	b12c      	cbz	r4, f9f6 <_ZN9ClearCore16CcioBoardManager7RefreshEv+0x86>
                            pulsesEnded |= mask;
    f9ea:	e9dd 4500 	ldrd	r4, r5, [sp]
    f9ee:	4314      	orrs	r4, r2
    f9f0:	431d      	orrs	r5, r3
    f9f2:	e9cd 4500 	strd	r4, r5, [sp]
                        if (m_pulseStopPending & mask) {
    f9f6:	e9d0 4522 	ldrd	r4, r5, [r0, #136]	; 0x88
    f9fa:	ea04 0802 	and.w	r8, r4, r2
    f9fe:	ea05 0903 	and.w	r9, r5, r3
    fa02:	ea58 0109 	orrs.w	r1, r8, r9
    fa06:	d00b      	beq.n	fa20 <_ZN9ClearCore16CcioBoardManager7RefreshEv+0xb0>
                            m_pulseStopPending &= ~mask;
    fa08:	ea24 0402 	bic.w	r4, r4, r2
    fa0c:	ea25 0503 	bic.w	r5, r5, r3
    fa10:	e9c0 4522 	strd	r4, r5, [r0, #136]	; 0x88
                            pulsesEnded |= mask;
    fa14:	e9dd 4500 	ldrd	r4, r5, [sp]
    fa18:	4314      	orrs	r4, r2
    fa1a:	431d      	orrs	r5, r3
    fa1c:	e9cd 4500 	strd	r4, r5, [sp]
        for (uint8_t i = 0; i < CCIO_PINS_PER_BOARD * m_ccioCnt; i++) {
    fa20:	f10e 0e01 	add.w	lr, lr, #1
    fa24:	fa5f fe8e 	uxtb.w	lr, lr
            mask <<= 1;
    fa28:	1892      	adds	r2, r2, r2
    fa2a:	415b      	adcs	r3, r3
        for (uint8_t i = 0; i < CCIO_PINS_PER_BOARD * m_ccioCnt; i++) {
    fa2c:	45e6      	cmp	lr, ip
    fa2e:	46f0      	mov	r8, lr
    fa30:	da27      	bge.n	fa82 <_ZN9ClearCore16CcioBoardManager7RefreshEv+0x112>
            if (m_pulseActive & mask) {
    fa32:	ea0a 0402 	and.w	r4, sl, r2
    fa36:	ea0b 0503 	and.w	r5, fp, r3
    fa3a:	ea54 0105 	orrs.w	r1, r4, r5
    fa3e:	d0ef      	beq.n	fa20 <_ZN9ClearCore16CcioBoardManager7RefreshEv+0xb0>
                if (!--currentPin.m_pulseTicksRemaining) {
    fa40:	eb08 0888 	add.w	r8, r8, r8, lsl #2
    fa44:	eb00 01c8 	add.w	r1, r0, r8, lsl #3
    fa48:	f8d1 40f0 	ldr.w	r4, [r1, #240]	; 0xf0
    fa4c:	3c01      	subs	r4, #1
    fa4e:	f8c1 40f0 	str.w	r4, [r1, #240]	; 0xf0
    fa52:	2c00      	cmp	r4, #0
    fa54:	d1e4      	bne.n	fa20 <_ZN9ClearCore16CcioBoardManager7RefreshEv+0xb0>
                    if (m_pulseValue & mask) {
    fa56:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
    fa5a:	4014      	ands	r4, r2
    fa5c:	401d      	ands	r5, r3
    fa5e:	432c      	orrs	r4, r5
    fa60:	d1af      	bne.n	f9c2 <_ZN9ClearCore16CcioBoardManager7RefreshEv+0x52>
                        if (m_pulseStopPending & mask) {
    fa62:	e9d0 4522 	ldrd	r4, r5, [r0, #136]	; 0x88
    fa66:	ea04 0802 	and.w	r8, r4, r2
    fa6a:	ea05 0903 	and.w	r9, r5, r3
    fa6e:	e9cd 4508 	strd	r4, r5, [sp, #32]
    fa72:	ea58 0409 	orrs.w	r4, r8, r9
    fa76:	f000 8115 	beq.w	fca4 <_ZN9ClearCore16CcioBoardManager7RefreshEv+0x334>
                            m_pulseStopPending &= ~mask;
    fa7a:	e9dd 4508 	ldrd	r4, r5, [sp, #32]
    fa7e:	e7c3      	b.n	fa08 <_ZN9ClearCore16CcioBoardManager7RefreshEv+0x98>
    fa80:	4770      	bx	lr
        m_currentOutputs = (m_currentOutputs | pulseRise) & ~pulseFall;
    fa82:	e9d0 8912 	ldrd	r8, r9, [r0, #72]	; 0x48
    fa86:	9906      	ldr	r1, [sp, #24]
    fa88:	e9cd 8906 	strd	r8, r9, [sp, #24]
        m_pulseValue = (m_pulseValue | pulseRise) & ~pulseFall;
    fa8c:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
    fa90:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
    fa94:	4642      	mov	r2, r8
    fa96:	464b      	mov	r3, r9
    fa98:	4322      	orrs	r2, r4
    fa9a:	432b      	orrs	r3, r5
    fa9c:	4614      	mov	r4, r2
    fa9e:	461d      	mov	r5, r3
        m_currentOutputs = (m_currentOutputs | pulseRise) & ~pulseFall;
    faa0:	4642      	mov	r2, r8
    faa2:	464b      	mov	r3, r9
    faa4:	e9dd 8906 	ldrd	r8, r9, [sp, #24]
    faa8:	43f6      	mvns	r6, r6
    faaa:	43ff      	mvns	r7, r7
    faac:	ea48 0802 	orr.w	r8, r8, r2
    fab0:	ea49 0903 	orr.w	r9, r9, r3
        m_pulseValue = (m_pulseValue | pulseRise) & ~pulseFall;
    fab4:	ea04 0206 	and.w	r2, r4, r6
    fab8:	ea05 0307 	and.w	r3, r5, r7
        m_pulseActive &= ~pulsesEnded;
    fabc:	e9dd 4500 	ldrd	r4, r5, [sp]
    fac0:	ea2a 0404 	bic.w	r4, sl, r4
    fac4:	ea2b 0505 	bic.w	r5, fp, r5
    fac8:	46a2      	mov	sl, r4
    faca:	46ab      	mov	fp, r5
        m_currentOutputs = (m_currentOutputs | pulseRise) & ~pulseFall;
    facc:	ea08 0406 	and.w	r4, r8, r6
    fad0:	ea09 0507 	and.w	r5, r9, r7
        m_pulseValue = (m_pulseValue | pulseRise) & ~pulseFall;
    fad4:	e9c0 2320 	strd	r2, r3, [r0, #128]	; 0x80
        m_pulseActive &= ~pulsesEnded;
    fad8:	e9c0 ab1e 	strd	sl, fp, [r0, #120]	; 0x78
        m_currentOutputs = (m_currentOutputs | pulseRise) & ~pulseFall;
    fadc:	e9c0 4512 	strd	r4, r5, [r0, #72]	; 0x48
    if (--m_ccioRefreshDelay) {
    fae0:	f890 502e 	ldrb.w	r5, [r0, #46]	; 0x2e
    fae4:	3d01      	subs	r5, #1
    fae6:	b2ed      	uxtb	r5, r5
    fae8:	f880 502e 	strb.w	r5, [r0, #46]	; 0x2e
    faec:	b115      	cbz	r5, faf4 <_ZN9ClearCore16CcioBoardManager7RefreshEv+0x184>
}
    faee:	b011      	add	sp, #68	; 0x44
    faf0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    faf4:	4604      	mov	r4, r0
        m_ccioRefreshDelay = m_ccioRefreshRate;
    faf6:	f890 302d 	ldrb.w	r3, [r0, #45]	; 0x2d
    fafa:	f880 302e 	strb.w	r3, [r0, #46]	; 0x2e
    m_serPort->SpiAsyncWaitComplete();
    fafe:	4608      	mov	r0, r1
    fb00:	f001 fcb4 	bl	1146c <_ZN9ClearCore10SerialBase20SpiAsyncWaitCompleteEv>
    m_serPort->SpiSsMode(SerialBase::CtrlLineModes::LINE_OFF);
    fb04:	4629      	mov	r1, r5
    fb06:	6aa0      	ldr	r0, [r4, #40]	; 0x28
    fb08:	f001 fb84 	bl	11214 <_ZN9ClearCore10SerialBase9SpiSsModeENS0_13CtrlLineModesE>
        m_readBuf.buf8[MAX_CCIO_DEVICES + m_ccioCnt + 1] != MARKER_BYTE;
    fb0c:	f894 c02c 	ldrb.w	ip, [r4, #44]	; 0x2c
    fb10:	f10c 0309 	add.w	r3, ip, #9
    fb14:	4423      	add	r3, r4
    uint64_t lastInputs = m_currentInputs;
    fb16:	e9d4 010e 	ldrd	r0, r1, [r4, #56]	; 0x38
        m_readBuf.buf8[MAX_CCIO_DEVICES + m_ccioCnt + 1] != MARKER_BYTE;
    fb1a:	7c9a      	ldrb	r2, [r3, #18]
    m_readBuf.buf8[MAX_CCIO_DEVICES + m_ccioCnt + 1] = 0;
    fb1c:	749d      	strb	r5, [r3, #18]
    if (markerError || m_lastOutputsSwapped ^ m_readBuf.buf64.outputsSwapped) {
    fb1e:	2acc      	cmp	r2, #204	; 0xcc
    fb20:	f000 814e 	beq.w	fdc0 <_ZN9ClearCore16CcioBoardManager7RefreshEv+0x450>
        if ((m_consGlitchCnt++ >= MAX_GLITCH_LIM) && (MAX_GLITCH_LIM > 0)) {
    fb24:	f8b4 3090 	ldrh.w	r3, [r4, #144]	; 0x90
    fb28:	1c5a      	adds	r2, r3, #1
    fb2a:	b292      	uxth	r2, r2
    fb2c:	3b04      	subs	r3, #4
    fb2e:	4616      	mov	r6, r2
    fb30:	920b      	str	r2, [sp, #44]	; 0x2c
    fb32:	b29b      	uxth	r3, r3
    fb34:	f64f 72fb 	movw	r2, #65531	; 0xfffb
    fb38:	4293      	cmp	r3, r2
    fb3a:	f8a4 6090 	strh.w	r6, [r4, #144]	; 0x90
    fb3e:	f240 81c6 	bls.w	fece <_ZN9ClearCore16CcioBoardManager7RefreshEv+0x55e>
    fb42:	2200      	movs	r2, #0
    fb44:	2300      	movs	r3, #0
    fb46:	e9cd 0108 	strd	r0, r1, [sp, #32]
    fb4a:	e9cd 2302 	strd	r2, r3, [sp, #8]
    uint64_t overloadedOutputSample = m_outputsWithThrottling & ~lastInputs;
    fb4e:	e9d4 231a 	ldrd	r2, r3, [r4, #104]	; 0x68
    fb52:	ea22 0000 	bic.w	r0, r2, r0
    fb56:	ea23 0101 	bic.w	r1, r3, r1
    uint64_t overloadedOutputRT = m_ccioOverloaded;
    fb5a:	e9d4 2326 	ldrd	r2, r3, [r4, #152]	; 0x98
    uint64_t overloadedOutputSample = m_outputsWithThrottling & ~lastInputs;
    fb5e:	e9cd 0106 	strd	r0, r1, [sp, #24]
    uint64_t overloadedOutputRT = m_ccioOverloaded;
    fb62:	4610      	mov	r0, r2
    fb64:	4619      	mov	r1, r3
    for (uint8_t i = 0; i < CCIO_PINS_PER_BOARD * m_ccioCnt; i++) {
    fb66:	ea4f 0ecc 	mov.w	lr, ip, lsl #3
    uint64_t overloadedOutputRT = m_ccioOverloaded;
    fb6a:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
    for (uint8_t i = 0; i < CCIO_PINS_PER_BOARD * m_ccioCnt; i++) {
    fb6e:	f1bc 0f00 	cmp.w	ip, #0
    fb72:	f000 81d3 	beq.w	ff1c <_ZN9ClearCore16CcioBoardManager7RefreshEv+0x5ac>
    fb76:	e9cd 0104 	strd	r0, r1, [sp, #16]
    fb7a:	2200      	movs	r2, #0
    fb7c:	2000      	movs	r0, #0
    fb7e:	2100      	movs	r1, #0
    fb80:	4613      	mov	r3, r2
    fb82:	e9cd 0100 	strd	r0, r1, [sp]
    fb86:	f04f 0801 	mov.w	r8, #1
    fb8a:	f04f 0900 	mov.w	r9, #0
            currentPin.m_overloadTripCnt = CCIO_OVERLOAD_TRIP_TICKS;
    fb8e:	f04f 0a0c 	mov.w	sl, #12
    fb92:	e038      	b.n	fc06 <_ZN9ClearCore16CcioBoardManager7RefreshEv+0x296>
            if (!(--currentPin.m_overloadFoldbackCnt)) {
    fb94:	0099      	lsls	r1, r3, #2
    fb96:	18c8      	adds	r0, r1, r3
    fb98:	eb04 00c0 	add.w	r0, r4, r0, lsl #3
    fb9c:	f8b0 b0e6 	ldrh.w	fp, [r0, #230]	; 0xe6
    fba0:	f10b 3bff 	add.w	fp, fp, #4294967295
    fba4:	fa1f fb8b 	uxth.w	fp, fp
    fba8:	f8a0 b0e6 	strh.w	fp, [r0, #230]	; 0xe6
    fbac:	f1bb 0f00 	cmp.w	fp, #0
    fbb0:	d107      	bne.n	fbc2 <_ZN9ClearCore16CcioBoardManager7RefreshEv+0x252>
                m_throttledOutputs &= ~mask;
    fbb2:	ea26 0608 	bic.w	r6, r6, r8
    fbb6:	ea27 0709 	bic.w	r7, r7, r9
    fbba:	e9c4 670c 	strd	r6, r7, [r4, #48]	; 0x30
                currentPin.m_overloadTripCnt = CCIO_OVERLOAD_TRIP_TICKS;
    fbbe:	f8a0 a0e4 	strh.w	sl, [r0, #228]	; 0xe4
        if (changedInputs & mask) {
    fbc2:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
    fbc6:	ea06 0608 	and.w	r6, r6, r8
    fbca:	ea07 0709 	and.w	r7, r7, r9
            currentPin.m_filterTicksLeft = currentPin.m_filterLength;
    fbce:	4419      	add	r1, r3
        if (changedInputs & mask) {
    fbd0:	ea56 0007 	orrs.w	r0, r6, r7
            currentPin.m_filterTicksLeft = currentPin.m_filterLength;
    fbd4:	eb04 01c1 	add.w	r1, r4, r1, lsl #3
        if (changedInputs & mask) {
    fbd8:	d04e      	beq.n	fc78 <_ZN9ClearCore16CcioBoardManager7RefreshEv+0x308>
            if (!currentPin.m_filterLength) {
    fbda:	f8b1 30e0 	ldrh.w	r3, [r1, #224]	; 0xe0
            currentPin.m_filterTicksLeft = currentPin.m_filterLength;
    fbde:	f8a1 30e2 	strh.w	r3, [r1, #226]	; 0xe2
            if (!currentPin.m_filterLength) {
    fbe2:	b93b      	cbnz	r3, fbf4 <_ZN9ClearCore16CcioBoardManager7RefreshEv+0x284>
            settledChanges |= mask;
    fbe4:	e9dd 0100 	ldrd	r0, r1, [sp]
    fbe8:	ea40 0008 	orr.w	r0, r0, r8
    fbec:	ea41 0109 	orr.w	r1, r1, r9
    fbf0:	e9cd 0100 	strd	r0, r1, [sp]
    for (uint8_t i = 0; i < CCIO_PINS_PER_BOARD * m_ccioCnt; i++) {
    fbf4:	3201      	adds	r2, #1
    fbf6:	b2d2      	uxtb	r2, r2
        mask <<= 1;
    fbf8:	eb18 0808 	adds.w	r8, r8, r8
    fbfc:	eb49 0909 	adc.w	r9, r9, r9
    for (uint8_t i = 0; i < CCIO_PINS_PER_BOARD * m_ccioCnt; i++) {
    fc00:	4596      	cmp	lr, r2
    fc02:	4613      	mov	r3, r2
    fc04:	dd59      	ble.n	fcba <_ZN9ClearCore16CcioBoardManager7RefreshEv+0x34a>
        if (m_throttledOutputs & mask) {
    fc06:	e9d4 010c 	ldrd	r0, r1, [r4, #48]	; 0x30
    fc0a:	4606      	mov	r6, r0
    fc0c:	460f      	mov	r7, r1
    fc0e:	ea00 0008 	and.w	r0, r0, r8
    fc12:	ea01 0109 	and.w	r1, r1, r9
    fc16:	4301      	orrs	r1, r0
    fc18:	d1bc      	bne.n	fb94 <_ZN9ClearCore16CcioBoardManager7RefreshEv+0x224>
        else if (overloadedOutputSample & mask) {
    fc1a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
    fc1e:	ea00 0008 	and.w	r0, r0, r8
    fc22:	ea01 0109 	and.w	r1, r1, r9
    fc26:	4301      	orrs	r1, r0
            if (currentPin.m_overloadTripCnt &&
    fc28:	ea4f 0183 	mov.w	r1, r3, lsl #2
    fc2c:	eb01 0003 	add.w	r0, r1, r3
    fc30:	eb04 00c0 	add.w	r0, r4, r0, lsl #3
        else if (overloadedOutputSample & mask) {
    fc34:	d02b      	beq.n	fc8e <_ZN9ClearCore16CcioBoardManager7RefreshEv+0x31e>
            if (currentPin.m_overloadTripCnt &&
    fc36:	f8b0 b0e4 	ldrh.w	fp, [r0, #228]	; 0xe4
    fc3a:	f1bb 0f00 	cmp.w	fp, #0
    fc3e:	d0c0      	beq.n	fbc2 <_ZN9ClearCore16CcioBoardManager7RefreshEv+0x252>
                    !--currentPin.m_overloadTripCnt) {
    fc40:	f10b 3bff 	add.w	fp, fp, #4294967295
    fc44:	fa1f fb8b 	uxth.w	fp, fp
            if (currentPin.m_overloadTripCnt &&
    fc48:	f8a0 b0e4 	strh.w	fp, [r0, #228]	; 0xe4
    fc4c:	f1bb 0f00 	cmp.w	fp, #0
    fc50:	d1b7      	bne.n	fbc2 <_ZN9ClearCore16CcioBoardManager7RefreshEv+0x252>
                m_throttledOutputs |= mask;
    fc52:	ea46 0608 	orr.w	r6, r6, r8
    fc56:	ea47 0709 	orr.w	r7, r7, r9
    fc5a:	e9c4 670c 	strd	r6, r7, [r4, #48]	; 0x30
                overloadedOutputRT |= mask;
    fc5e:	e9dd 6704 	ldrd	r6, r7, [sp, #16]
    fc62:	ea46 0608 	orr.w	r6, r6, r8
    fc66:	ea47 0709 	orr.w	r7, r7, r9
    fc6a:	e9cd 6704 	strd	r6, r7, [sp, #16]
                currentPin.m_overloadFoldbackCnt = CCIO_OVERLOAD_FOLDBACK_TICKS;
    fc6e:	f44f 76fa 	mov.w	r6, #500	; 0x1f4
    fc72:	f8a0 60e6 	strh.w	r6, [r0, #230]	; 0xe6
    fc76:	e7a4      	b.n	fbc2 <_ZN9ClearCore16CcioBoardManager7RefreshEv+0x252>
        else if (currentPin.m_filterTicksLeft &&
    fc78:	f8b1 00e2 	ldrh.w	r0, [r1, #226]	; 0xe2
    fc7c:	2800      	cmp	r0, #0
    fc7e:	d0b9      	beq.n	fbf4 <_ZN9ClearCore16CcioBoardManager7RefreshEv+0x284>
                 !(--currentPin.m_filterTicksLeft)) {
    fc80:	3801      	subs	r0, #1
    fc82:	b280      	uxth	r0, r0
        else if (currentPin.m_filterTicksLeft &&
    fc84:	f8a1 00e2 	strh.w	r0, [r1, #226]	; 0xe2
    fc88:	2800      	cmp	r0, #0
    fc8a:	d0ab      	beq.n	fbe4 <_ZN9ClearCore16CcioBoardManager7RefreshEv+0x274>
    fc8c:	e7b2      	b.n	fbf4 <_ZN9ClearCore16CcioBoardManager7RefreshEv+0x284>
            overloadedOutputRT &= ~mask;
    fc8e:	e9dd 6704 	ldrd	r6, r7, [sp, #16]
    fc92:	ea26 0608 	bic.w	r6, r6, r8
    fc96:	ea27 0709 	bic.w	r7, r7, r9
    fc9a:	e9cd 6704 	strd	r6, r7, [sp, #16]
            currentPin.m_overloadTripCnt = CCIO_OVERLOAD_TRIP_TICKS;
    fc9e:	f8a0 a0e4 	strh.w	sl, [r0, #228]	; 0xe4
    fca2:	e78e      	b.n	fbc2 <_ZN9ClearCore16CcioBoardManager7RefreshEv+0x252>
                                currentPin.m_pulseOnTicks;
    fca4:	f8d1 40e8 	ldr.w	r4, [r1, #232]	; 0xe8
                            currentPin.m_pulseTicksRemaining =
    fca8:	f8c1 40f0 	str.w	r4, [r1, #240]	; 0xf0
                            pulseRise |= mask;
    fcac:	e9dd 4504 	ldrd	r4, r5, [sp, #16]
    fcb0:	4314      	orrs	r4, r2
    fcb2:	431d      	orrs	r5, r3
    fcb4:	e9cd 4504 	strd	r4, r5, [sp, #16]
    fcb8:	e6b2      	b.n	fa20 <_ZN9ClearCore16CcioBoardManager7RefreshEv+0xb0>
    fcba:	e9dd 2300 	ldrd	r2, r3, [sp]
    lastInputs = m_filteredInputs;
    fcbe:	e9d4 ab10 	ldrd	sl, fp, [r4, #64]	; 0x40
    m_filteredInputs = (m_filteredInputs & ~settledChanges) |
    fcc2:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
    fcc6:	ea80 000a 	eor.w	r0, r0, sl
    fcca:	ea81 010b 	eor.w	r1, r1, fp
    fcce:	4002      	ands	r2, r0
    fcd0:	400b      	ands	r3, r1
    fcd2:	ea82 080a 	eor.w	r8, r2, sl
    fcd6:	ea83 090b 	eor.w	r9, r3, fp
    m_inputRegRisen |= (m_filteredInputs & ~lastInputs);
    fcda:	e9d4 232c 	ldrd	r2, r3, [r4, #176]	; 0xb0
    fcde:	ea28 000a 	bic.w	r0, r8, sl
    fce2:	ea29 010b 	bic.w	r1, r9, fp
    fce6:	ea40 0602 	orr.w	r6, r0, r2
    fcea:	ea41 0703 	orr.w	r7, r1, r3
    m_inputRegFallen |= (~m_filteredInputs & lastInputs);
    fcee:	e9d4 232e 	ldrd	r2, r3, [r4, #184]	; 0xb8
    fcf2:	e9cd 8900 	strd	r8, r9, [sp]
    fcf6:	ea2a 0808 	bic.w	r8, sl, r8
    fcfa:	ea2b 0909 	bic.w	r9, fp, r9
    fcfe:	ea43 0109 	orr.w	r1, r3, r9
    fd02:	ea42 0008 	orr.w	r0, r2, r8
    m_filteredInputs = (m_filteredInputs & ~settledChanges) |
    fd06:	e9dd 8900 	ldrd	r8, r9, [sp]
    if (m_consGlitchCnt == 0) {
    fd0a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    m_filteredInputs = (m_filteredInputs & ~settledChanges) |
    fd0c:	e9c4 8910 	strd	r8, r9, [r4, #64]	; 0x40
    m_inputRegRisen |= (m_filteredInputs & ~lastInputs);
    fd10:	e9c4 672c 	strd	r6, r7, [r4, #176]	; 0xb0
    m_inputRegFallen |= (~m_filteredInputs & lastInputs);
    fd14:	e9c4 012e 	strd	r0, r1, [r4, #184]	; 0xb8
    if (m_consGlitchCnt == 0) {
    fd18:	2b00      	cmp	r3, #0
    fd1a:	f000 8083 	beq.w	fe24 <_ZN9ClearCore16CcioBoardManager7RefreshEv+0x4b4>
    m_lastOutputs = m_currentOutputs;
    fd1e:	e9d4 6712 	ldrd	r6, r7, [r4, #72]	; 0x48
        m_currentOutputs & ~m_throttledOutputs & m_outputMask;
    fd22:	e9d4 2314 	ldrd	r2, r3, [r4, #80]	; 0x50
    fd26:	e9d4 010c 	ldrd	r0, r1, [r4, #48]	; 0x30
    fd2a:	ea03 0907 	and.w	r9, r3, r7
    fd2e:	ea29 0101 	bic.w	r1, r9, r1
    fd32:	ea02 0806 	and.w	r8, r2, r6
    fd36:	468b      	mov	fp, r1
        outputSwapped >> ((MAX_CCIO_DEVICES - m_ccioCnt) * CCIO_PINS_PER_BOARD);
    fd38:	f1cc 0c08 	rsb	ip, ip, #8
                                     static_cast<uint32_t>(m_outputsWithThrottling))) << 32) |
    fd3c:	2100      	movs	r1, #0
        m_currentOutputs & ~m_throttledOutputs & m_outputMask;
    fd3e:	ea28 0000 	bic.w	r0, r8, r0
    __asm("REV %[result], %[input]" : [result] "=r"(res) : [input] "r"(value));
    fd42:	ba03      	rev	r3, r0
                                     static_cast<uint32_t>(m_outputsWithThrottling))) << 32) |
    fd44:	461a      	mov	r2, r3
    __asm("REV %[result], %[input]" : [result] "=r"(res) : [input] "r"(value));
    fd46:	fa9b f38b 	rev.w	r3, fp
                                     static_cast<uint32_t>(m_outputsWithThrottling))) << 32) |
    fd4a:	ea41 0803 	orr.w	r8, r1, r3
        outputSwapped >> ((MAX_CCIO_DEVICES - m_ccioCnt) * CCIO_PINS_PER_BOARD);
    fd4e:	ea4f 03cc 	mov.w	r3, ip, lsl #3
          reverseBytes(static_cast<uint32_t>(m_outputsWithThrottling >> 32)));
    fd52:	43d1      	mvns	r1, r2
        m_currentOutputs & ~m_throttledOutputs & m_outputMask;
    fd54:	4682      	mov	sl, r0
        outputSwapped >> ((MAX_CCIO_DEVICES - m_ccioCnt) * CCIO_PINS_PER_BOARD);
    fd56:	f1c3 0520 	rsb	r5, r3, #32
          reverseBytes(static_cast<uint32_t>(m_outputsWithThrottling >> 32)));
    fd5a:	ea6f 0008 	mvn.w	r0, r8
        outputSwapped >> ((MAX_CCIO_DEVICES - m_ccioCnt) * CCIO_PINS_PER_BOARD);
    fd5e:	fa01 f505 	lsl.w	r5, r1, r5
    fd62:	fa20 f203 	lsr.w	r2, r0, r3
    fd66:	432a      	orrs	r2, r5
    fd68:	f1a3 0520 	sub.w	r5, r3, #32
    fd6c:	fa21 f505 	lsr.w	r5, r1, r5
    fd70:	432a      	orrs	r2, r5
    m_lastOutputs = m_currentOutputs;
    fd72:	e9c4 6718 	strd	r6, r7, [r4, #96]	; 0x60
    m_lastOutputsSwapped = m_writeBuf.buf64.outputsSwapped;
    fd76:	f8d4 500d 	ldr.w	r5, [r4, #13]
    fd7a:	f8d4 6009 	ldr.w	r6, [r4, #9]
    m_writeBuf.buf64.outputsSwapped =
    fd7e:	f8c4 2009 	str.w	r2, [r4, #9]
        outputSwapped >> ((MAX_CCIO_DEVICES - m_ccioCnt) * CCIO_PINS_PER_BOARD);
    fd82:	fa21 f303 	lsr.w	r3, r1, r3
    m_writeBuf.buf8[(MAX_CCIO_DEVICES - m_ccioCnt)] = MARKER_BYTE;
    fd86:	22cc      	movs	r2, #204	; 0xcc
    m_writeBuf.buf64.outputsSwapped =
    fd88:	f8c4 300d 	str.w	r3, [r4, #13]
    m_lastOutputsSwapped = m_writeBuf.buf64.outputsSwapped;
    fd8c:	65e5      	str	r5, [r4, #92]	; 0x5c
    m_outputsWithThrottling =
    fd8e:	e9c4 ab1a 	strd	sl, fp, [r4, #104]	; 0x68
    m_lastOutputsSwapped = m_writeBuf.buf64.outputsSwapped;
    fd92:	65a6      	str	r6, [r4, #88]	; 0x58
    m_writeBuf.buf8[(MAX_CCIO_DEVICES - m_ccioCnt)] = MARKER_BYTE;
    fd94:	f804 200c 	strb.w	r2, [r4, ip]
    m_serPort->SpiSsMode(SerialBase::CtrlLineModes::LINE_ON);
    fd98:	2101      	movs	r1, #1
    fd9a:	6aa0      	ldr	r0, [r4, #40]	; 0x28
    fd9c:	f001 fa3a 	bl	11214 <_ZN9ClearCore10SerialBase9SpiSsModeENS0_13CtrlLineModesE>
        m_writeBuf.buf8 + (MAX_CCIO_DEVICES - m_ccioCnt),
    fda0:	f894 302c 	ldrb.w	r3, [r4, #44]	; 0x2c
        m_readBuf.buf8 + (MAX_CCIO_DEVICES - m_ccioCnt) + 1, 2 * m_ccioCnt + 1);
    fda4:	6aa0      	ldr	r0, [r4, #40]	; 0x28
    fda6:	1ae2      	subs	r2, r4, r3
        m_writeBuf.buf8 + (MAX_CCIO_DEVICES - m_ccioCnt),
    fda8:	f1c3 0108 	rsb	r1, r3, #8
        m_readBuf.buf8 + (MAX_CCIO_DEVICES - m_ccioCnt) + 1, 2 * m_ccioCnt + 1);
    fdac:	2501      	movs	r5, #1
    fdae:	321b      	adds	r2, #27
    fdb0:	4421      	add	r1, r4
    fdb2:	eb05 0343 	add.w	r3, r5, r3, lsl #1
}
    fdb6:	b011      	add	sp, #68	; 0x44
    fdb8:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
        m_readBuf.buf8 + (MAX_CCIO_DEVICES - m_ccioCnt) + 1, 2 * m_ccioCnt + 1);
    fdbc:	f001 bb04 	b.w	113c8 <_ZN9ClearCore10SerialBase20SpiTransferDataAsyncEPKhPhl>
    if (markerError || m_lastOutputsSwapped ^ m_readBuf.buf64.outputsSwapped) {
    fdc0:	e9d4 2316 	ldrd	r2, r3, [r4, #88]	; 0x58
    fdc4:	f8d4 701f 	ldr.w	r7, [r4, #31]
    fdc8:	f8d4 601b 	ldr.w	r6, [r4, #27]
    fdcc:	42bb      	cmp	r3, r7
    fdce:	bf08      	it	eq
    fdd0:	42b2      	cmpeq	r2, r6
    fdd2:	f47f aea7 	bne.w	fb24 <_ZN9ClearCore16CcioBoardManager7RefreshEv+0x1b4>
            (~m_readBuf.buf64.inputs) >> ((MAX_CCIO_DEVICES - m_ccioCnt)
    fdd6:	f8d4 2013 	ldr.w	r2, [r4, #19]
    fdda:	f8d4 3017 	ldr.w	r3, [r4, #23]
        m_consGlitchCnt = 0;
    fdde:	f8a4 5090 	strh.w	r5, [r4, #144]	; 0x90
            (~m_readBuf.buf64.inputs) >> ((MAX_CCIO_DEVICES - m_ccioCnt)
    fde2:	f1cc 0608 	rsb	r6, ip, #8
                                          * CCIO_PINS_PER_BOARD);
    fde6:	00f6      	lsls	r6, r6, #3
            (~m_readBuf.buf64.inputs) >> ((MAX_CCIO_DEVICES - m_ccioCnt)
    fde8:	ea6f 0903 	mvn.w	r9, r3
    fdec:	ea6f 0802 	mvn.w	r8, r2
    fdf0:	f1c6 0720 	rsb	r7, r6, #32
    fdf4:	fa28 f306 	lsr.w	r3, r8, r6
    fdf8:	fa09 f707 	lsl.w	r7, r9, r7
    fdfc:	f1a6 0220 	sub.w	r2, r6, #32
    fe00:	fa29 f202 	lsr.w	r2, r9, r2
    fe04:	433b      	orrs	r3, r7
    fe06:	4313      	orrs	r3, r2
    fe08:	9308      	str	r3, [sp, #32]
    fe0a:	fa29 f306 	lsr.w	r3, r9, r6
    fe0e:	9309      	str	r3, [sp, #36]	; 0x24
        m_currentInputs =
    fe10:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
    fe14:	e9c4 230e 	strd	r2, r3, [r4, #56]	; 0x38
    fe18:	4042      	eors	r2, r0
    fe1a:	404b      	eors	r3, r1
    fe1c:	e9cd 2302 	strd	r2, r3, [sp, #8]
    fe20:	950b      	str	r5, [sp, #44]	; 0x2c
    fe22:	e694      	b.n	fb4e <_ZN9ClearCore16CcioBoardManager7RefreshEv+0x1de>
        IoOverloadRT(overloadedOutputRT & m_ccioMask);
    fe24:	e9d4 231c 	ldrd	r2, r3, [r4, #112]	; 0x70
    fe28:	e9dd 6704 	ldrd	r6, r7, [sp, #16]
    m_ccioOverloadAccum |= overloadState;
    fe2c:	e9d4 0128 	ldrd	r0, r1, [r4, #160]	; 0xa0
        IoOverloadRT(overloadedOutputRT & m_ccioMask);
    fe30:	4016      	ands	r6, r2
    fe32:	401f      	ands	r7, r3
    m_ccioOverloadAccum |= overloadState;
    fe34:	ea40 0206 	orr.w	r2, r0, r6
    fe38:	ea41 0307 	orr.w	r3, r1, r7
    fe3c:	e9c4 2328 	strd	r2, r3, [r4, #160]	; 0xa0
    if (m_ccioOverloaded == overloadState) {
    fe40:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
    fe44:	42bb      	cmp	r3, r7
        IoOverloadRT(overloadedOutputRT & m_ccioMask);
    fe46:	46b0      	mov	r8, r6
    fe48:	46b9      	mov	r9, r7
    if (m_ccioOverloaded == overloadState) {
    fe4a:	bf08      	it	eq
    fe4c:	42b2      	cmpeq	r2, r6
    fe4e:	e9cd 890e 	strd	r8, r9, [sp, #56]	; 0x38
    fe52:	f43f af64 	beq.w	fd1e <_ZN9ClearCore16CcioBoardManager7RefreshEv+0x3ae>
        if (state) {
    fe56:	ea58 0309 	orrs.w	r3, r8, r9
    m_ccioOverloaded = overloadState;
    fe5a:	e9c4 8926 	strd	r8, r9, [r4, #152]	; 0x98
    ShiftReg.LedInFault(m_faultLed, overloadState);
    fe5e:	f8d4 70c0 	ldr.w	r7, [r4, #192]	; 0xc0
    fe62:	d053      	beq.n	ff0c <_ZN9ClearCore16CcioBoardManager7RefreshEv+0x59c>
    fe64:	f8df e0c8 	ldr.w	lr, [pc, #200]	; ff30 <_ZN9ClearCore16CcioBoardManager7RefreshEv+0x5c0>
    if (overloadState & ~m_overloadSinceStartupAccum) {
    fe68:	e9d4 012a 	ldrd	r0, r1, [r4, #168]	; 0xa8
            m_patternMasks[LED_BLINK_OVERLOAD] |= ledMask;
    fe6c:	f8de 60f0 	ldr.w	r6, [lr, #240]	; 0xf0
    fe70:	433e      	orrs	r6, r7
    fe72:	f8ce 60f0 	str.w	r6, [lr, #240]	; 0xf0
    fe76:	ea29 0701 	bic.w	r7, r9, r1
    fe7a:	ea28 0600 	bic.w	r6, r8, r0
    fe7e:	ea56 0307 	orrs.w	r3, r6, r7
    fe82:	f43f af4c 	beq.w	fd1e <_ZN9ClearCore16CcioBoardManager7RefreshEv+0x3ae>
        m_overloadSinceStartupAccum |= overloadState;
    fe86:	ea48 0200 	orr.w	r2, r8, r0
    fe8a:	ea49 0301 	orr.w	r3, r9, r1
    fe8e:	e9c4 232a 	strd	r2, r3, [r4, #168]	; 0xa8
        for (uint8_t i = 0; i < m_ccioCnt; i++) {
    fe92:	f1bc 0f00 	cmp.w	ip, #0
    fe96:	f43f af42 	beq.w	fd1e <_ZN9ClearCore16CcioBoardManager7RefreshEv+0x3ae>
                StatusMgr.BlinkCode(
    fe9a:	4e24      	ldr	r6, [pc, #144]	; (ff2c <_ZN9ClearCore16CcioBoardManager7RefreshEv+0x5bc>)
        for (uint8_t i = 0; i < m_ccioCnt; i++) {
    fe9c:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
                    BlinkCodeDriver::BLINK_GROUP_CCIO_OVERLOAD, 1 << i);
    fe9e:	2701      	movs	r7, #1
    fea0:	e005      	b.n	feae <_ZN9ClearCore16CcioBoardManager7RefreshEv+0x53e>
        for (uint8_t i = 0; i < m_ccioCnt; i++) {
    fea2:	3501      	adds	r5, #1
    fea4:	b2ed      	uxtb	r5, r5
    fea6:	4565      	cmp	r5, ip
    fea8:	462a      	mov	r2, r5
    feaa:	f6bf af38 	bge.w	fd1e <_ZN9ClearCore16CcioBoardManager7RefreshEv+0x3ae>
            if (charPtr[i]) {
    feae:	ab10      	add	r3, sp, #64	; 0x40
    feb0:	442b      	add	r3, r5
    feb2:	f813 3c08 	ldrb.w	r3, [r3, #-8]
    feb6:	2b00      	cmp	r3, #0
    feb8:	d0f3      	beq.n	fea2 <_ZN9ClearCore16CcioBoardManager7RefreshEv+0x532>
                    BlinkCodeDriver::BLINK_GROUP_CCIO_OVERLOAD, 1 << i);
    feba:	fa07 f202 	lsl.w	r2, r7, r2
    febe:	b2d2      	uxtb	r2, r2
    fec0:	2103      	movs	r1, #3
    fec2:	6830      	ldr	r0, [r6, #0]
    fec4:	f7f6 fdca 	bl	6a5c <_ZN9ClearCore13StatusManager9BlinkCodeENS_15BlinkCodeDriver15BlinkCodeGroupsEh>
    fec8:	f894 c02c 	ldrb.w	ip, [r4, #44]	; 0x2c
    fecc:	e7e9      	b.n	fea2 <_ZN9ClearCore16CcioBoardManager7RefreshEv+0x532>
            m_ccioLinkBroken = true;
    fece:	2101      	movs	r1, #1
    fed0:	f884 1092 	strb.w	r1, [r4, #146]	; 0x92
            m_serPort->SpiSsMode(SerialBase::CtrlLineModes::LINE_ON);
    fed4:	6aa0      	ldr	r0, [r4, #40]	; 0x28
    fed6:	f001 f99d 	bl	11214 <_ZN9ClearCore10SerialBase9SpiSsModeENS0_13CtrlLineModesE>
            StatusMgr.BlinkCode(
    feda:	4914      	ldr	r1, [pc, #80]	; (ff2c <_ZN9ClearCore16CcioBoardManager7RefreshEv+0x5bc>)
            m_ccioOverloaded = 0;
    fedc:	2300      	movs	r3, #0
    fede:	2200      	movs	r2, #0
                BlinkCodeDriver::DEVICE_ERROR_CCIO);
    fee0:	6808      	ldr	r0, [r1, #0]
            m_ccioOverloaded = 0;
    fee2:	e9c4 2326 	strd	r2, r3, [r4, #152]	; 0x98
                BlinkCodeDriver::DEVICE_ERROR_CCIO);
    fee6:	2102      	movs	r1, #2
    fee8:	2208      	movs	r2, #8
    feea:	f7f6 fdb7 	bl	6a5c <_ZN9ClearCore13StatusManager9BlinkCodeENS_15BlinkCodeDriver15BlinkCodeGroupsEh>
            m_patternMasks[LED_BLINK_OVERLOAD] &= ~ledMask;
    feee:	4b10      	ldr	r3, [pc, #64]	; (ff30 <_ZN9ClearCore16CcioBoardManager7RefreshEv+0x5c0>)
    fef0:	f8d4 20c0 	ldr.w	r2, [r4, #192]	; 0xc0
    fef4:	f8d3 00f0 	ldr.w	r0, [r3, #240]	; 0xf0
                                           : m_patternMasks[pattern] &= ~ledMask;
    fef8:	f8d3 10ec 	ldr.w	r1, [r3, #236]	; 0xec
            m_patternMasks[LED_BLINK_OVERLOAD] &= ~ledMask;
    fefc:	43d2      	mvns	r2, r2
    fefe:	4010      	ands	r0, r2
                                           : m_patternMasks[pattern] &= ~ledMask;
    ff00:	400a      	ands	r2, r1
            m_patternMasks[LED_BLINK_OVERLOAD] &= ~ledMask;
    ff02:	f8c3 00f0 	str.w	r0, [r3, #240]	; 0xf0
                                           : m_patternMasks[pattern] &= ~ledMask;
    ff06:	f8c3 20ec 	str.w	r2, [r3, #236]	; 0xec
    ff0a:	e5f0      	b.n	faee <_ZN9ClearCore16CcioBoardManager7RefreshEv+0x17e>
    ff0c:	4a08      	ldr	r2, [pc, #32]	; (ff30 <_ZN9ClearCore16CcioBoardManager7RefreshEv+0x5c0>)
            m_patternMasks[LED_BLINK_OVERLOAD] &= ~ledMask;
    ff0e:	f8d2 30f0 	ldr.w	r3, [r2, #240]	; 0xf0
    ff12:	ea23 0307 	bic.w	r3, r3, r7
    ff16:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
    ff1a:	e700      	b.n	fd1e <_ZN9ClearCore16CcioBoardManager7RefreshEv+0x3ae>
    uint64_t overloadedOutputRT = m_ccioOverloaded;
    ff1c:	e9cd 2304 	strd	r2, r3, [sp, #16]
    uint64_t settledChanges = 0;
    ff20:	2200      	movs	r2, #0
    ff22:	2300      	movs	r3, #0
    ff24:	e9cd 2300 	strd	r2, r3, [sp]
    ff28:	e6c9      	b.n	fcbe <_ZN9ClearCore16CcioBoardManager7RefreshEv+0x34e>
    ff2a:	bf00      	nop
    ff2c:	20000bf8 	.word	0x20000bf8
    ff30:	20001b00 	.word	0x20001b00

0000ff34 <_ZN9ClearCore16CcioBoardManager11RefreshSlowEv>:
    if (m_serPort && LinkBroken() && m_autoRediscover &&
    ff34:	6a81      	ldr	r1, [r0, #40]	; 0x28
    ff36:	b1c1      	cbz	r1, ff6a <_ZN9ClearCore16CcioBoardManager11RefreshSlowEv+0x36>
    ff38:	f890 2092 	ldrb.w	r2, [r0, #146]	; 0x92
    ff3c:	b1aa      	cbz	r2, ff6a <_ZN9ClearCore16CcioBoardManager11RefreshSlowEv+0x36>
    ff3e:	f890 20c4 	ldrb.w	r2, [r0, #196]	; 0xc4
    ff42:	b192      	cbz	r2, ff6a <_ZN9ClearCore16CcioBoardManager11RefreshSlowEv+0x36>
            tickCnt - m_lastDiscoverTime > CCIO_REDISCOVER_TIME_TICKS) {
    ff44:	4a09      	ldr	r2, [pc, #36]	; (ff6c <_ZN9ClearCore16CcioBoardManager11RefreshSlowEv+0x38>)
void CcioBoardManager::RefreshSlow() {
    ff46:	b430      	push	{r4, r5}
            tickCnt - m_lastDiscoverTime > CCIO_REDISCOVER_TIME_TICKS) {
    ff48:	6812      	ldr	r2, [r2, #0]
    ff4a:	f8d0 50c8 	ldr.w	r5, [r0, #200]	; 0xc8
    if (m_serPort && LinkBroken() && m_autoRediscover &&
    ff4e:	f241 3488 	movw	r4, #5000	; 0x1388
            tickCnt - m_lastDiscoverTime > CCIO_REDISCOVER_TIME_TICKS) {
    ff52:	1b52      	subs	r2, r2, r5
    if (m_serPort && LinkBroken() && m_autoRediscover &&
    ff54:	42a2      	cmp	r2, r4
    ff56:	d907      	bls.n	ff68 <_ZN9ClearCore16CcioBoardManager11RefreshSlowEv+0x34>
        m_discoverState = CCIO_SEARCH;
    ff58:	2200      	movs	r2, #0
    if (m_discoverState == CCIO_FOUND || (LinkBroken() && !m_autoRediscover)) {
    ff5a:	f890 4092 	ldrb.w	r4, [r0, #146]	; 0x92
        m_discoverState = CCIO_SEARCH;
    ff5e:	f880 2024 	strb.w	r2, [r0, #36]	; 0x24
}
    ff62:	bc30      	pop	{r4, r5}
    ff64:	f7ff b9c0 	b.w	f2e8 <_ZN9ClearCore16CcioBoardManager12CcioDiscoverEPNS_12SerialDriverE.part.1>
    ff68:	bc30      	pop	{r4, r5}
    ff6a:	4770      	bx	lr
    ff6c:	20001d1c 	.word	0x20001d1c

0000ff70 <_ZN9ClearCore16CcioBoardManager9LinkCloseEv>:
                                           : m_patternMasks[pattern] &= ~ledMask;
    ff70:	4a0e      	ldr	r2, [pc, #56]	; (ffac <_ZN9ClearCore16CcioBoardManager9LinkCloseEv+0x3c>)
void CcioBoardManager::LinkClose() {
    ff72:	b4f0      	push	{r4, r5, r6, r7}
    ShiftReg.LedPattern(m_faultLed, ShiftRegister::LED_BLINK_CCIO_COMM_ERR,
    ff74:	f8d0 60c0 	ldr.w	r6, [r0, #192]	; 0xc0
    ff78:	f8d2 10e8 	ldr.w	r1, [r2, #232]	; 0xe8
        if (state) {
    ff7c:	e9d0 4526 	ldrd	r4, r5, [r0, #152]	; 0x98
                                           : m_patternMasks[pattern] &= ~ledMask;
    ff80:	43f3      	mvns	r3, r6
    ff82:	4019      	ands	r1, r3
    m_discoverState = CCIO_SEARCH;
    ff84:	2700      	movs	r7, #0
    ff86:	f880 7024 	strb.w	r7, [r0, #36]	; 0x24
    ff8a:	f8c2 10e8 	str.w	r1, [r2, #232]	; 0xe8
        if (state) {
    ff8e:	ea54 0105 	orrs.w	r1, r4, r5
            m_patternMasks[LED_BLINK_OVERLOAD] |= ledMask;
    ff92:	bf15      	itete	ne
    ff94:	f8d2 30f0 	ldrne.w	r3, [r2, #240]	; 0xf0
            m_patternMasks[LED_BLINK_OVERLOAD] &= ~ledMask;
    ff98:	f8d2 10f0 	ldreq.w	r1, [r2, #240]	; 0xf0
            m_patternMasks[LED_BLINK_OVERLOAD] |= ledMask;
    ff9c:	4333      	orrne	r3, r6
            m_patternMasks[LED_BLINK_OVERLOAD] &= ~ledMask;
    ff9e:	400b      	andeq	r3, r1
    ffa0:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
}
    ffa4:	bcf0      	pop	{r4, r5, r6, r7}
    Initialize();
    ffa6:	f7ff bc6f 	b.w	f888 <_ZN9ClearCore16CcioBoardManager10InitializeEv>
    ffaa:	bf00      	nop
    ffac:	20001b00 	.word	0x20001b00

0000ffb0 <_ZN9ClearCore16CcioBoardManager12CcioDiscoverEPNS_12SerialDriverE>:
    if (m_discoverState == CCIO_FOUND || (LinkBroken() && !m_autoRediscover)) {
    ffb0:	f890 3024 	ldrb.w	r3, [r0, #36]	; 0x24
    ffb4:	2b02      	cmp	r3, #2
    ffb6:	d005      	beq.n	ffc4 <_ZN9ClearCore16CcioBoardManager12CcioDiscoverEPNS_12SerialDriverE+0x14>
    ffb8:	f890 3092 	ldrb.w	r3, [r0, #146]	; 0x92
    ffbc:	b12b      	cbz	r3, ffca <_ZN9ClearCore16CcioBoardManager12CcioDiscoverEPNS_12SerialDriverE+0x1a>
    ffbe:	f890 30c4 	ldrb.w	r3, [r0, #196]	; 0xc4
    ffc2:	b913      	cbnz	r3, ffca <_ZN9ClearCore16CcioBoardManager12CcioDiscoverEPNS_12SerialDriverE+0x1a>
        return m_ccioCnt;
    ffc4:	f890 002c 	ldrb.w	r0, [r0, #44]	; 0x2c
    ffc8:	4770      	bx	lr
    m_serPort = comInstance;
    ffca:	6281      	str	r1, [r0, #40]	; 0x28
    if (!m_serPort) {
    ffcc:	b109      	cbz	r1, ffd2 <_ZN9ClearCore16CcioBoardManager12CcioDiscoverEPNS_12SerialDriverE+0x22>
    ffce:	f7ff b98b 	b.w	f2e8 <_ZN9ClearCore16CcioBoardManager12CcioDiscoverEPNS_12SerialDriverE.part.1>
        m_lastDiscoverTime = tickCnt;
    ffd2:	4b04      	ldr	r3, [pc, #16]	; (ffe4 <_ZN9ClearCore16CcioBoardManager12CcioDiscoverEPNS_12SerialDriverE+0x34>)
        m_faultLed = ShiftRegister::Masks::SR_NO_FEEDBACK_MASK;
    ffd4:	f8c0 10c0 	str.w	r1, [r0, #192]	; 0xc0
        m_lastDiscoverTime = tickCnt;
    ffd8:	681b      	ldr	r3, [r3, #0]
    ffda:	f8c0 30c8 	str.w	r3, [r0, #200]	; 0xc8
        return 0;
    ffde:	4608      	mov	r0, r1
    ffe0:	4770      	bx	lr
    ffe2:	bf00      	nop
    ffe4:	20001d1c 	.word	0x20001d1c

0000ffe8 <_ZN9ClearCore16CcioBoardManager10PinByIndexE13ClearCorePins>:
void CcioBoardManager::CcioRediscoverEnable(bool enable) {
    m_autoRediscover = enable;
}

CcioPin *CcioBoardManager::PinByIndex(ClearCorePins connectorIndex) {
    if (connectorIndex >= ClearCorePins::CLEARCORE_PIN_CCIO_BASE &&
    ffe8:	3940      	subs	r1, #64	; 0x40
    ffea:	b28b      	uxth	r3, r1
    ffec:	2b3f      	cmp	r3, #63	; 0x3f
            connectorIndex < ClearCorePins::CLEARCORE_PIN_CCIO_MAX) {
        return &m_ccioPins[connectorIndex - CLEARCORE_PIN_CCIO_BASE];
    ffee:	bf9d      	ittte	ls
    fff0:	eb01 0181 	addls.w	r1, r1, r1, lsl #2
    fff4:	eb00 00c1 	addls.w	r0, r0, r1, lsl #3
    fff8:	30d0      	addls	r0, #208	; 0xd0
    }
    else {
        return NULL;
    fffa:	2000      	movhi	r0, #0
    }
}
    fffc:	4770      	bx	lr
    fffe:	bf00      	nop

00010000 <_GLOBAL__sub_I__ZN9ClearCore7CcioMgrE>:

} // ClearCore namespace
   10000:	b508      	push	{r3, lr}
CcioBoardManager &CcioMgr = CcioBoardManager::Instance();
   10002:	f7ff fbb5 	bl	f770 <_ZN9ClearCore16CcioBoardManager8InstanceEv>
   10006:	4b01      	ldr	r3, [pc, #4]	; (1000c <_GLOBAL__sub_I__ZN9ClearCore7CcioMgrE+0xc>)
   10008:	6018      	str	r0, [r3, #0]
   1000a:	bd08      	pop	{r3, pc}
   1000c:	20001f28 	.word	0x20001f28

00010010 <_ZN9ClearCore7CcioPin4ModeEv>:

        \return The connector's current operational mode.
    **/
    virtual ConnectorModes Mode() override {
        return Connector::Mode();
    }
   10010:	7980      	ldrb	r0, [r0, #6]
   10012:	4770      	bx	lr

00010014 <_ZN9ClearCore7CcioPin4TypeEv>:

        \return The type of the current connector.
    **/
    Connector::ConnectorTypes Type() override {
        return Connector::CCIO_DIGITAL_IN_OUT_TYPE;
    }
   10014:	2009      	movs	r0, #9
   10016:	4770      	bx	lr

00010018 <_ZN9ClearCore7CcioPin10IsWritableEv>:
        \endcode

        \return True if in #OUTPUT_DIGITAL mode, false otherwise
    **/
    bool IsWritable() override {
        return m_mode == OUTPUT_DIGITAL;
   10018:	7980      	ldrb	r0, [r0, #6]
    }
   1001a:	f1a0 0004 	sub.w	r0, r0, #4
   1001e:	fab0 f080 	clz	r0, r0
   10022:	0940      	lsrs	r0, r0, #5
   10024:	4770      	bx	lr
   10026:	bf00      	nop

00010028 <_ZN9ClearCore7CcioPin7RefreshEv>:
        Poll the underlying connector for new state update.

        This is typically called from a timer or main loop to update the
        underlying value.
    **/
    void Refresh() override {}
   10028:	4770      	bx	lr
   1002a:	bf00      	nop

0001002c <_ZN9ClearCore7CcioPin10InitializeE13ClearCorePins>:
      m_pulseTicksRemaining(0),
      m_pulseStopCount(0),
      m_pulseCounter(0) {}


void CcioPin::Initialize(ClearCorePins ccioPin) {
   1002c:	b470      	push	{r4, r5, r6}
    m_clearCorePin = ccioPin;
    m_dataBit = 1ULL << (ccioPin - CLEARCORE_PIN_CCIO_BASE);
   1002e:	f1a1 0540 	sub.w	r5, r1, #64	; 0x40
   10032:	2201      	movs	r2, #1
   10034:	f1a1 0360 	sub.w	r3, r1, #96	; 0x60
   10038:	f1c5 0420 	rsb	r4, r5, #32
   1003c:	fa22 f404 	lsr.w	r4, r2, r4
   10040:	fa02 f303 	lsl.w	r3, r2, r3
   10044:	4323      	orrs	r3, r4
   10046:	40aa      	lsls	r2, r5
    m_mode = ConnectorModes::INPUT_DIGITAL;
   10048:	2602      	movs	r6, #2
    m_filterLength = 3;
   1004a:	4d07      	ldr	r5, [pc, #28]	; (10068 <_ZN9ClearCore7CcioPin10InitializeE13ClearCorePins+0x3c>)
    m_clearCorePin = ccioPin;
   1004c:	8081      	strh	r1, [r0, #4]
    m_filterLength = 3;
   1004e:	240c      	movs	r4, #12
    m_dataBit = 1ULL << (ccioPin - CLEARCORE_PIN_CCIO_BASE);
   10050:	2100      	movs	r1, #0
    m_mode = ConnectorModes::INPUT_DIGITAL;
   10052:	7186      	strb	r6, [r0, #6]
    m_filterLength = 3;
   10054:	6105      	str	r5, [r0, #16]
   10056:	6144      	str	r4, [r0, #20]
    m_dataBit = 1ULL << (ccioPin - CLEARCORE_PIN_CCIO_BASE);
   10058:	6082      	str	r2, [r0, #8]
   1005a:	60c3      	str	r3, [r0, #12]
    m_filterTicksLeft = 1;
    m_overloadTripCnt = CCIO_OVERLOAD_TRIP_TICKS;
    m_overloadFoldbackCnt = 0;
    m_pulseOnTicks = 0;
   1005c:	6181      	str	r1, [r0, #24]
    m_pulseOffTicks = 0;
   1005e:	61c1      	str	r1, [r0, #28]
    m_pulseTicksRemaining = 0;
   10060:	6201      	str	r1, [r0, #32]
    m_pulseStopCount = 0;
   10062:	6241      	str	r1, [r0, #36]	; 0x24
    m_pulseCounter = 0;
}
   10064:	bc70      	pop	{r4, r5, r6}
   10066:	4770      	bx	lr
   10068:	00010003 	.word	0x00010003

0001006c <_ZN9ClearCore7CcioPin4ModeENS_9Connector14ConnectorModesE>:

bool CcioPin::Mode(ConnectorModes newMode) {
    // Bail out if we are already in the requested mode
    if (newMode == m_mode) {
   1006c:	7983      	ldrb	r3, [r0, #6]
   1006e:	428b      	cmp	r3, r1
   10070:	d02f      	beq.n	100d2 <_ZN9ClearCore7CcioPin4ModeENS_9Connector14ConnectorModesE+0x66>
        return true;
    }

    switch (newMode) {
   10072:	2902      	cmp	r1, #2
bool CcioPin::Mode(ConnectorModes newMode) {
   10074:	e92d 0370 	stmdb	sp!, {r4, r5, r6, r8, r9}
    switch (newMode) {
   10078:	d014      	beq.n	100a4 <_ZN9ClearCore7CcioPin4ModeENS_9Connector14ConnectorModesE+0x38>
   1007a:	2904      	cmp	r1, #4
   1007c:	d10b      	bne.n	10096 <_ZN9ClearCore7CcioPin4ModeENS_9Connector14ConnectorModesE+0x2a>
        // Set up as output
        case OUTPUT_DIGITAL:
            CcioMgr.m_outputMask |= m_dataBit;
   1007e:	4b16      	ldr	r3, [pc, #88]	; (100d8 <_ZN9ClearCore7CcioPin4ModeENS_9Connector14ConnectorModesE+0x6c>)
   10080:	681e      	ldr	r6, [r3, #0]
   10082:	e9d0 4502 	ldrd	r4, r5, [r0, #8]
   10086:	e9d6 2314 	ldrd	r2, r3, [r6, #80]	; 0x50
   1008a:	432b      	orrs	r3, r5
   1008c:	4322      	orrs	r2, r4
   1008e:	e9c6 2314 	strd	r2, r3, [r6, #80]	; 0x50
            m_mode = newMode;
            break;
   10092:	460b      	mov	r3, r1
            m_mode = newMode;
   10094:	7181      	strb	r1, [r0, #6]
            break;
        // Unsupported mode, don't change anything
        default:
            break;
    }
    return m_mode == newMode;
   10096:	1ac8      	subs	r0, r1, r3
   10098:	fab0 f080 	clz	r0, r0
   1009c:	0940      	lsrs	r0, r0, #5
}
   1009e:	e8bd 0370 	ldmia.w	sp!, {r4, r5, r6, r8, r9}
   100a2:	4770      	bx	lr
            CcioMgr.m_outputMask &= ~m_dataBit;
   100a4:	4b0c      	ldr	r3, [pc, #48]	; (100d8 <_ZN9ClearCore7CcioPin4ModeENS_9Connector14ConnectorModesE+0x6c>)
   100a6:	681e      	ldr	r6, [r3, #0]
   100a8:	e9d0 2302 	ldrd	r2, r3, [r0, #8]
   100ac:	e9d6 4514 	ldrd	r4, r5, [r6, #80]	; 0x50
            CcioMgr.m_pulseActive &= ~m_dataBit;
   100b0:	e9d6 891e 	ldrd	r8, r9, [r6, #120]	; 0x78
            CcioMgr.m_outputMask &= ~m_dataBit;
   100b4:	43d2      	mvns	r2, r2
   100b6:	43db      	mvns	r3, r3
   100b8:	4014      	ands	r4, r2
   100ba:	401d      	ands	r5, r3
            CcioMgr.m_pulseActive &= ~m_dataBit;
   100bc:	ea02 0208 	and.w	r2, r2, r8
   100c0:	ea03 0309 	and.w	r3, r3, r9
   100c4:	e9c6 231e 	strd	r2, r3, [r6, #120]	; 0x78
            CcioMgr.m_outputMask &= ~m_dataBit;
   100c8:	e9c6 4514 	strd	r4, r5, [r6, #80]	; 0x50
            break;
   100cc:	460b      	mov	r3, r1
            m_mode = newMode;
   100ce:	7181      	strb	r1, [r0, #6]
            break;
   100d0:	e7e1      	b.n	10096 <_ZN9ClearCore7CcioPin4ModeENS_9Connector14ConnectorModesE+0x2a>
        return true;
   100d2:	2001      	movs	r0, #1
   100d4:	4770      	bx	lr
   100d6:	bf00      	nop
   100d8:	20001f28 	.word	0x20001f28

000100dc <_ZN9ClearCore7CcioPin5StateEv>:

int16_t CcioPin::State() {
    bool state = false;

    switch (m_mode) {
   100dc:	7983      	ldrb	r3, [r0, #6]
   100de:	2b02      	cmp	r3, #2
   100e0:	d010      	beq.n	10104 <_ZN9ClearCore7CcioPin5StateEv+0x28>
   100e2:	2b04      	cmp	r3, #4
   100e4:	d10c      	bne.n	10100 <_ZN9ClearCore7CcioPin5StateEv+0x24>
        case OUTPUT_DIGITAL:
            state = CcioMgr.m_currentOutputs & m_dataBit;
   100e6:	4b0b      	ldr	r3, [pc, #44]	; (10114 <_ZN9ClearCore7CcioPin5StateEv+0x38>)
   100e8:	681b      	ldr	r3, [r3, #0]
   100ea:	e9d0 0102 	ldrd	r0, r1, [r0, #8]
   100ee:	e9d3 2312 	ldrd	r2, r3, [r3, #72]	; 0x48
            break;
        case INPUT_DIGITAL:
            state = CcioMgr.m_filteredInputs & m_dataBit;
   100f2:	4002      	ands	r2, r0
   100f4:	400b      	ands	r3, r1
   100f6:	4313      	orrs	r3, r2
   100f8:	bf14      	ite	ne
   100fa:	2001      	movne	r0, #1
   100fc:	2000      	moveq	r0, #0
            break;
   100fe:	4770      	bx	lr
    switch (m_mode) {
   10100:	2000      	movs	r0, #0
        default:
            break;
    }

    return state;
}
   10102:	4770      	bx	lr
            state = CcioMgr.m_filteredInputs & m_dataBit;
   10104:	4b03      	ldr	r3, [pc, #12]	; (10114 <_ZN9ClearCore7CcioPin5StateEv+0x38>)
   10106:	681b      	ldr	r3, [r3, #0]
   10108:	e9d0 0102 	ldrd	r0, r1, [r0, #8]
   1010c:	e9d3 2310 	ldrd	r2, r3, [r3, #64]	; 0x40
   10110:	e7ef      	b.n	100f2 <_ZN9ClearCore7CcioPin5StateEv+0x16>
   10112:	bf00      	nop
   10114:	20001f28 	.word	0x20001f28

00010118 <_ZN9ClearCore7CcioPin11IsInHwFaultEv>:
bool CcioPin::InputFallen() {
    return CcioMgr.InputsFallen(m_dataBit);
}

bool CcioPin::IsInHwFault() {
    return (volatile uint64_t &)(CcioMgr.m_ccioOverloaded) & m_dataBit;
   10118:	4b06      	ldr	r3, [pc, #24]	; (10134 <_ZN9ClearCore7CcioPin11IsInHwFaultEv+0x1c>)
   1011a:	681b      	ldr	r3, [r3, #0]
   1011c:	e9d0 0102 	ldrd	r0, r1, [r0, #8]
   10120:	e9d3 2326 	ldrd	r2, r3, [r3, #152]	; 0x98
   10124:	4002      	ands	r2, r0
   10126:	400b      	ands	r3, r1
   10128:	4313      	orrs	r3, r2
}
   1012a:	bf14      	ite	ne
   1012c:	2001      	movne	r0, #1
   1012e:	2000      	moveq	r0, #0
   10130:	4770      	bx	lr
   10132:	bf00      	nop
   10134:	20001f28 	.word	0x20001f28

00010138 <_ZN9ClearCore7CcioPin5StateEs>:
    switch (m_mode) {
   10138:	7983      	ldrb	r3, [r0, #6]
   1013a:	2b04      	cmp	r3, #4
   1013c:	d11c      	bne.n	10178 <_ZN9ClearCore7CcioPin5StateEs+0x40>
bool CcioPin::State(int16_t newState) {
   1013e:	b430      	push	{r4, r5}
                CcioMgr.m_currentOutputs |= m_dataBit;
   10140:	4b0e      	ldr	r3, [pc, #56]	; (1017c <_ZN9ClearCore7CcioPin5StateEs+0x44>)
            if (newState) {
   10142:	b969      	cbnz	r1, 10160 <_ZN9ClearCore7CcioPin5StateEs+0x28>
                CcioMgr.m_currentOutputs &= ~m_dataBit;
   10144:	6819      	ldr	r1, [r3, #0]
   10146:	e9d0 2302 	ldrd	r2, r3, [r0, #8]
   1014a:	e9d1 4512 	ldrd	r4, r5, [r1, #72]	; 0x48
   1014e:	ea24 0202 	bic.w	r2, r4, r2
   10152:	ea25 0303 	bic.w	r3, r5, r3
            success = true;
   10156:	2001      	movs	r0, #1
                CcioMgr.m_currentOutputs &= ~m_dataBit;
   10158:	e9c1 2312 	strd	r2, r3, [r1, #72]	; 0x48
}
   1015c:	bc30      	pop	{r4, r5}
   1015e:	4770      	bx	lr
                CcioMgr.m_currentOutputs |= m_dataBit;
   10160:	6819      	ldr	r1, [r3, #0]
   10162:	e9d0 4502 	ldrd	r4, r5, [r0, #8]
   10166:	e9d1 2312 	ldrd	r2, r3, [r1, #72]	; 0x48
   1016a:	4322      	orrs	r2, r4
   1016c:	432b      	orrs	r3, r5
   1016e:	2001      	movs	r0, #1
   10170:	e9c1 2312 	strd	r2, r3, [r1, #72]	; 0x48
}
   10174:	bc30      	pop	{r4, r5}
   10176:	4770      	bx	lr
    bool success = false;
   10178:	2000      	movs	r0, #0
   1017a:	4770      	bx	lr
   1017c:	20001f28 	.word	0x20001f28

00010180 <_ZN9ClearCore7CcioPinC1Ev>:
CcioPin::CcioPin()
   10180:	b5d0      	push	{r4, r6, r7, lr}
   10182:	4604      	mov	r4, r0
      m_pulseCounter(0) {}
   10184:	f7f5 f80c 	bl	51a0 <_ZN9ClearCore9ConnectorC1Ev>
   10188:	4b08      	ldr	r3, [pc, #32]	; (101ac <_ZN9ClearCore7CcioPinC1Ev+0x2c>)
   1018a:	4909      	ldr	r1, [pc, #36]	; (101b0 <_ZN9ClearCore7CcioPinC1Ev+0x30>)
   1018c:	6023      	str	r3, [r4, #0]
   1018e:	2600      	movs	r6, #0
   10190:	2300      	movs	r3, #0
   10192:	2700      	movs	r7, #0
   10194:	220c      	movs	r2, #12
   10196:	e9c4 6702 	strd	r6, r7, [r4, #8]
   1019a:	6121      	str	r1, [r4, #16]
   1019c:	6162      	str	r2, [r4, #20]
   1019e:	61a3      	str	r3, [r4, #24]
   101a0:	61e3      	str	r3, [r4, #28]
   101a2:	6223      	str	r3, [r4, #32]
   101a4:	6263      	str	r3, [r4, #36]	; 0x24
   101a6:	4620      	mov	r0, r4
   101a8:	bdd0      	pop	{r4, r6, r7, pc}
   101aa:	bf00      	nop
   101ac:	00022f7c 	.word	0x00022f7c
   101b0:	00010003 	.word	0x00010003

000101b4 <_ZN9ClearCore12SdCardDriverC1EPK15PeripheralRouteS3_S3_S3_h>:
namespace ClearCore {

/**
    Construct and wire into the board.
**/
SdCardDriver::SdCardDriver(const PeripheralRoute *misoInfo,
   101b4:	b530      	push	{r4, r5, lr}
   101b6:	b083      	sub	sp, #12
   101b8:	9d06      	ldr	r5, [sp, #24]
   101ba:	f89d 401c 	ldrb.w	r4, [sp, #28]
                           const PeripheralRoute *ssInfo,
                           const PeripheralRoute *sckInfo,
                           const PeripheralRoute *mosiInfo,
                           uint8_t peripheral)
    : SerialBase(misoInfo, ssInfo, sckInfo, mosiInfo, peripheral),
      m_errorCode(0) {
   101be:	9500      	str	r5, [sp, #0]
   101c0:	9401      	str	r4, [sp, #4]
SdCardDriver::SdCardDriver(const PeripheralRoute *misoInfo,
   101c2:	4604      	mov	r4, r0
      m_errorCode(0) {
   101c4:	2500      	movs	r5, #0
   101c6:	f000 ffbb 	bl	11140 <_ZN9ClearCore10SerialBaseC1EPK15PeripheralRouteS3_S3_S3_h>
   101ca:	4b09      	ldr	r3, [pc, #36]	; (101f0 <_ZN9ClearCore12SdCardDriverC1EPK15PeripheralRouteS3_S3_S3_h+0x3c>)
   101cc:	6023      	str	r3, [r4, #0]
   101ce:	f884 5144 	strb.w	r5, [r4, #324]	; 0x144
    PortMode(SerialBase::SPI);
   101d2:	4620      	mov	r0, r4
   101d4:	2101      	movs	r1, #1
   101d6:	f001 f811 	bl	111fc <_ZN9ClearCore10SerialBase8PortModeENS0_9PortModesE>
    SpiClock(SCK_LOW, LEAD_SAMPLE);
   101da:	462a      	mov	r2, r5
   101dc:	4629      	mov	r1, r5
   101de:	4620      	mov	r0, r4
   101e0:	f001 f852 	bl	11288 <_ZN9ClearCore10SerialBase8SpiClockENS0_18SpiClockPolaritiesENS0_14SpiClockPhasesE>
    PortOpen();
   101e4:	4620      	mov	r0, r4
   101e6:	f000 ff9f 	bl	11128 <_ZN9ClearCore10SerialBase8PortOpenEv>
}
   101ea:	4620      	mov	r0, r4
   101ec:	b003      	add	sp, #12
   101ee:	bd30      	pop	{r4, r5, pc}
   101f0:	000229a0 	.word	0x000229a0

000101f4 <_ZN9ClearCore10SerialBase10PortIsOpenEv>:
/**
    Return if the port is open or not.
**/
bool SerialBase::PortIsOpen() {
    return m_portOpen;
}
   101f4:	f890 0029 	ldrb.w	r0, [r0, #41]	; 0x29
   101f8:	4770      	bx	lr
   101fa:	bf00      	nop

000101fc <_ZN9ClearCore10SerialBase5FlushEv>:
/**
    Flush transmit buffers.
**/
void SerialBase::Flush() {
    // Flush buffers
    m_bufferOut[0] = 0;
   101fc:	2300      	movs	r3, #0
    m_outTail = 0;
   101fe:	f8c0 313c 	str.w	r3, [r0, #316]	; 0x13c
    m_bufferOut[0] = 0;
   10202:	f8a0 30b0 	strh.w	r3, [r0, #176]	; 0xb0
    m_outHead = 0;
   10206:	f8c0 3138 	str.w	r3, [r0, #312]	; 0x138
   1020a:	4770      	bx	lr

0001020c <_ZN9ClearCore10SerialBase10FlushInputEv>:

/**
    Enable the Receive Complete USART interrupt.
**/
void SerialBase::EnableRxcInterruptUart() {
    m_serPort->USART.INTENSET.reg = SERCOM_USART_INTENSET_RXC;
   1020c:	6902      	ldr	r2, [r0, #16]
    m_bufferIn[0] = 0;
   1020e:	2300      	movs	r3, #0
    m_serPort->USART.INTENSET.reg = SERCOM_USART_INTENSET_RXC;
   10210:	2104      	movs	r1, #4
    m_inTail = 0;
   10212:	f8c0 3134 	str.w	r3, [r0, #308]	; 0x134
    m_bufferIn[0] = 0;
   10216:	8603      	strh	r3, [r0, #48]	; 0x30
    m_inHead = 0;
   10218:	f8c0 3130 	str.w	r3, [r0, #304]	; 0x130
    m_serPort->USART.INTENSET.reg = SERCOM_USART_INTENSET_RXC;
   1021c:	7591      	strb	r1, [r2, #22]
   1021e:	4770      	bx	lr

00010220 <_ZN9ClearCore10SerialBase7CharGetEv>:
/**
    Attempt to get next character from serial channel.
**/
int16_t SerialBase::CharGet() {
    // Return if nothing is waiting.
    if (m_inTail == m_inHead) {
   10220:	f8d0 1134 	ldr.w	r1, [r0, #308]	; 0x134
   10224:	f8d0 2130 	ldr.w	r2, [r0, #304]	; 0x130
   10228:	4291      	cmp	r1, r2
   1022a:	d012      	beq.n	10252 <_ZN9ClearCore10SerialBase7CharGetEv+0x32>
int16_t SerialBase::CharGet() {
   1022c:	b430      	push	{r4, r5}
        return SerialBase::EOB;
    }

    // Get head of buffer, wrapped.
    int32_t nextIndex = NextIndex(m_inHead);
   1022e:	f8d0 2130 	ldr.w	r2, [r0, #304]	; 0x130
    // Get head character.
    int16_t returnChar = m_bufferIn[m_inHead];
   10232:	f8d0 1130 	ldr.w	r1, [r0, #304]	; 0x130
    m_serPort->USART.INTENSET.reg = SERCOM_USART_INTENSET_RXC;
   10236:	6904      	ldr	r4, [r0, #16]
   10238:	4603      	mov	r3, r0

    /**
        Helper function to get next index in a buffer.
    **/
    uint32_t NextIndex(uint32_t currentIndex) {
        return ((currentIndex + 1) & (SERIAL_BUFFER_SIZE - 1));
   1023a:	3201      	adds	r2, #1
    int16_t returnChar = m_bufferIn[m_inHead];
   1023c:	3118      	adds	r1, #24
    m_serPort->USART.INTENSET.reg = SERCOM_USART_INTENSET_RXC;
   1023e:	2504      	movs	r5, #4
   10240:	f002 023f 	and.w	r2, r2, #63	; 0x3f
    int16_t returnChar = m_bufferIn[m_inHead];
   10244:	f930 0011 	ldrsh.w	r0, [r0, r1, lsl #1]
    // Save new head ptr.
    m_inHead = nextIndex;
   10248:	f8c3 2130 	str.w	r2, [r3, #304]	; 0x130
    m_serPort->USART.INTENSET.reg = SERCOM_USART_INTENSET_RXC;
   1024c:	75a5      	strb	r5, [r4, #22]
    EnableRxcInterruptUart();

    return returnChar;
}
   1024e:	bc30      	pop	{r4, r5}
   10250:	4770      	bx	lr
        return SerialBase::EOB;
   10252:	f04f 30ff 	mov.w	r0, #4294967295
   10256:	4770      	bx	lr

00010258 <_ZN9ClearCore10SerialBase8CharPeekEv>:
    Attempt to get next character from serial channel without pulling it
    out of the buffer.
**/
int16_t SerialBase::CharPeek() {
    // Return if nothing is waiting
    if (m_inTail == m_inHead) {
   10258:	f8d0 2134 	ldr.w	r2, [r0, #308]	; 0x134
   1025c:	f8d0 3130 	ldr.w	r3, [r0, #304]	; 0x130
   10260:	429a      	cmp	r2, r3
        return SerialBase::EOB;
    }

    // Get head character
    int16_t peekChar = m_bufferIn[m_inHead];
   10262:	bf1d      	ittte	ne
   10264:	f8d0 3130 	ldrne.w	r3, [r0, #304]	; 0x130
   10268:	3318      	addne	r3, #24
   1026a:	f930 0013 	ldrshne.w	r0, [r0, r3, lsl #1]
        return SerialBase::EOB;
   1026e:	f04f 30ff 	moveq.w	r0, #4294967295
    return (peekChar);
}
   10272:	4770      	bx	lr

00010274 <_ZN9ClearCore10SerialBase16AvailableForReadEv>:

/**
    Return the number of free characters in the receive buffer
**/
int32_t SerialBase::AvailableForRead() {
    int32_t difference = m_inTail - m_inHead;
   10274:	f8d0 3134 	ldr.w	r3, [r0, #308]	; 0x134
   10278:	f8d0 0130 	ldr.w	r0, [r0, #304]	; 0x130

    if (difference < 0) {
   1027c:	1a18      	subs	r0, r3, r0
        return SERIAL_BUFFER_SIZE + difference;
   1027e:	bf48      	it	mi
   10280:	3040      	addmi	r0, #64	; 0x40
    }
    else {
        return difference;
    }
}
   10282:	4770      	bx	lr

00010284 <_ZN9ClearCore10SerialBase17AvailableForWriteEv>:

/**
    Returns the number of available characters in the transmit buffer
**/
int32_t SerialBase::AvailableForWrite() {
    int32_t difference = m_outHead - m_outTail - 1;
   10284:	f8d0 3138 	ldr.w	r3, [r0, #312]	; 0x138
   10288:	f8d0 213c 	ldr.w	r2, [r0, #316]	; 0x13c
   1028c:	1e58      	subs	r0, r3, #1

    if (difference < 0) {
   1028e:	1a80      	subs	r0, r0, r2
        difference += SERIAL_BUFFER_SIZE;
   10290:	bf48      	it	mi
   10292:	3040      	addmi	r0, #64	; 0x40
    }

    return difference;
}
   10294:	4770      	bx	lr
   10296:	bf00      	nop

00010298 <_ZN9ClearCore10SerialBase8SendCharEh>:
bool SerialBase::SendChar(uint8_t charToSend) {
   10298:	4602      	mov	r2, r0
    if (!m_portOpen || m_portMode == PortModes::SPI) {
   1029a:	f890 0029 	ldrb.w	r0, [r0, #41]	; 0x29
   1029e:	b1b8      	cbz	r0, 102d0 <_ZN9ClearCore10SerialBase8SendCharEh+0x38>
   102a0:	79d3      	ldrb	r3, [r2, #7]
   102a2:	2b01      	cmp	r3, #1
   102a4:	d015      	beq.n	102d2 <_ZN9ClearCore10SerialBase8SendCharEh+0x3a>
bool SerialBase::SendChar(uint8_t charToSend) {
   102a6:	b470      	push	{r4, r5, r6}
    uint32_t nextIndex = NextIndex(m_outTail);
   102a8:	f8d2 413c 	ldr.w	r4, [r2, #316]	; 0x13c
   102ac:	3401      	adds	r4, #1
   102ae:	f004 043f 	and.w	r4, r4, #63	; 0x3f
    while (nextIndex == m_outHead) {
   102b2:	f8d2 3138 	ldr.w	r3, [r2, #312]	; 0x138
   102b6:	429c      	cmp	r4, r3
   102b8:	d0fb      	beq.n	102b2 <_ZN9ClearCore10SerialBase8SendCharEh+0x1a>
    m_bufferOut[m_outTail] = charToSend;
   102ba:	f8d2 313c 	ldr.w	r3, [r2, #316]	; 0x13c
    m_serPort->USART.INTENSET.reg = SERCOM_USART_INTENSET_DRE;
   102be:	6915      	ldr	r5, [r2, #16]
    m_bufferOut[m_outTail] = charToSend;
   102c0:	3358      	adds	r3, #88	; 0x58
    m_serPort->USART.INTENSET.reg = SERCOM_USART_INTENSET_DRE;
   102c2:	2601      	movs	r6, #1
    m_bufferOut[m_outTail] = charToSend;
   102c4:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
    m_outTail = nextIndex;
   102c8:	f8c2 413c 	str.w	r4, [r2, #316]	; 0x13c
    m_serPort->USART.INTENSET.reg = SERCOM_USART_INTENSET_DRE;
   102cc:	75ae      	strb	r6, [r5, #22]
}
   102ce:	bc70      	pop	{r4, r5, r6}
   102d0:	4770      	bx	lr
        return false;
   102d2:	2000      	movs	r0, #0
   102d4:	4770      	bx	lr
   102d6:	bf00      	nop

000102d8 <_ZN9ClearCore10SerialBase19WaitForTransmitIdleEv>:
    if (m_portMode == UART) {
   102d8:	79c3      	ldrb	r3, [r0, #7]
   102da:	b113      	cbz	r3, 102e2 <_ZN9ClearCore10SerialBase19WaitForTransmitIdleEv+0xa>
    else if (m_portMode == SPI) {
   102dc:	2b01      	cmp	r3, #1
   102de:	d00e      	beq.n	102fe <_ZN9ClearCore10SerialBase19WaitForTransmitIdleEv+0x26>
   102e0:	4770      	bx	lr
        while (m_outHead != m_outTail) {
   102e2:	f8d0 2138 	ldr.w	r2, [r0, #312]	; 0x138
   102e6:	f8d0 313c 	ldr.w	r3, [r0, #316]	; 0x13c
   102ea:	429a      	cmp	r2, r3
   102ec:	d1f9      	bne.n	102e2 <_ZN9ClearCore10SerialBase19WaitForTransmitIdleEv+0xa>
        if (m_serPort->USART.INTFLAG.bit.DRE) {
   102ee:	6902      	ldr	r2, [r0, #16]
   102f0:	7e13      	ldrb	r3, [r2, #24]
   102f2:	07d8      	lsls	r0, r3, #31
   102f4:	d4f4      	bmi.n	102e0 <_ZN9ClearCore10SerialBase19WaitForTransmitIdleEv+0x8>
        while (!m_serPort->USART.INTFLAG.bit.TXC) {
   102f6:	7e13      	ldrb	r3, [r2, #24]
   102f8:	0799      	lsls	r1, r3, #30
   102fa:	d5fc      	bpl.n	102f6 <_ZN9ClearCore10SerialBase19WaitForTransmitIdleEv+0x1e>
   102fc:	4770      	bx	lr
    if (m_dmaRxChannel == DMA_INVALID_CHANNEL ||
   102fe:	f890 302e 	ldrb.w	r3, [r0, #46]	; 0x2e
   10302:	2b07      	cmp	r3, #7
   10304:	d0ec      	beq.n	102e0 <_ZN9ClearCore10SerialBase19WaitForTransmitIdleEv+0x8>
   10306:	f890 302f 	ldrb.w	r3, [r0, #47]	; 0x2f
   1030a:	2b07      	cmp	r3, #7
void SerialBase::WaitForTransmitIdle() {
   1030c:	b510      	push	{r4, lr}
   1030e:	4604      	mov	r4, r0
    if (m_dmaRxChannel == DMA_INVALID_CHANNEL ||
   10310:	d005      	beq.n	1031e <_ZN9ClearCore10SerialBase19WaitForTransmitIdleEv+0x46>
    while (m_portOpen && m_portMode == SPI &&
   10312:	f894 3029 	ldrb.w	r3, [r4, #41]	; 0x29
   10316:	b113      	cbz	r3, 1031e <_ZN9ClearCore10SerialBase19WaitForTransmitIdleEv+0x46>
   10318:	79e3      	ldrb	r3, [r4, #7]
   1031a:	2b01      	cmp	r3, #1
   1031c:	d000      	beq.n	10320 <_ZN9ClearCore10SerialBase19WaitForTransmitIdleEv+0x48>
   1031e:	bd10      	pop	{r4, pc}
            DmaManager::Channel(m_dmaRxChannel)->CHCTRLA.bit.ENABLE) {
   10320:	f894 002e 	ldrb.w	r0, [r4, #46]	; 0x2e
   10324:	f7f5 f80c 	bl	5340 <_ZN9ClearCore10DmaManager7ChannelENS_11DmaChannelsE>
   10328:	6803      	ldr	r3, [r0, #0]
    while (m_portOpen && m_portMode == SPI &&
   1032a:	079b      	lsls	r3, r3, #30
   1032c:	d4f1      	bmi.n	10312 <_ZN9ClearCore10SerialBase19WaitForTransmitIdleEv+0x3a>
   1032e:	e7f6      	b.n	1031e <_ZN9ClearCore10SerialBase19WaitForTransmitIdleEv+0x46>

00010330 <_ZN9ClearCore10SerialBase5SpeedEm>:
bool SerialBase::Speed(uint32_t bitsPerSecond) {
   10330:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    PMUX_DISABLE(m_txMosiInfo->gpioPort, m_txMosiInfo->gpioPin);
   10334:	6a02      	ldr	r2, [r0, #32]
    m_baudRate = bitsPerSecond;
   10336:	6241      	str	r1, [r0, #36]	; 0x24
    PMUX_DISABLE(m_txMosiInfo->gpioPort, m_txMosiInfo->gpioPin);
   10338:	7893      	ldrb	r3, [r2, #2]
bool SerialBase::Speed(uint32_t bitsPerSecond) {
   1033a:	460f      	mov	r7, r1
    PMUX_DISABLE(m_txMosiInfo->gpioPort, m_txMosiInfo->gpioPin);
   1033c:	f992 1001 	ldrsb.w	r1, [r2, #1]
    bool sercomEnabled = m_serPort->USART.CTRLA.bit.ENABLE;
   10340:	6902      	ldr	r2, [r0, #16]
    PMUX_DISABLE(m_txMosiInfo->gpioPort, m_txMosiInfo->gpioPin);
   10342:	eb03 13c1 	add.w	r3, r3, r1, lsl #7
   10346:	f103 4382 	add.w	r3, r3, #1090519040	; 0x41000000
   1034a:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
    bool sercomEnabled = m_serPort->USART.CTRLA.bit.ENABLE;
   1034e:	6816      	ldr	r6, [r2, #0]
    PMUX_DISABLE(m_txMosiInfo->gpioPort, m_txMosiInfo->gpioPin);
   10350:	f893 1040 	ldrb.w	r1, [r3, #64]	; 0x40
   10354:	f36f 0100 	bfc	r1, #0, #1
   10358:	f883 1040 	strb.w	r1, [r3, #64]	; 0x40
    if (m_serPort->USART.CTRLA.bit.ENABLE) {
   1035c:	6813      	ldr	r3, [r2, #0]
   1035e:	0799      	lsls	r1, r3, #30
bool SerialBase::Speed(uint32_t bitsPerSecond) {
   10360:	4604      	mov	r4, r0
    bool sercomEnabled = m_serPort->USART.CTRLA.bit.ENABLE;
   10362:	f3c6 0640 	ubfx	r6, r6, #1, #1
    if (m_serPort->USART.CTRLA.bit.ENABLE) {
   10366:	d503      	bpl.n	10370 <_ZN9ClearCore10SerialBase5SpeedEm+0x40>
        m_serPort->USART.CTRLA.bit.ENABLE = 0;
   10368:	6813      	ldr	r3, [r2, #0]
   1036a:	f36f 0341 	bfc	r3, #1, #1
   1036e:	6013      	str	r3, [r2, #0]
    SYNCBUSY_WAIT(usart, SERCOM_USART_SYNCBUSY_ENABLE);
   10370:	69d3      	ldr	r3, [r2, #28]
   10372:	f013 0302 	ands.w	r3, r3, #2
   10376:	d1fb      	bne.n	10370 <_ZN9ClearCore10SerialBase5SpeedEm+0x40>
    Flush();
   10378:	6822      	ldr	r2, [r4, #0]
   1037a:	483a      	ldr	r0, [pc, #232]	; (10464 <_ZN9ClearCore10SerialBase5SpeedEm+0x134>)
   1037c:	6811      	ldr	r1, [r2, #0]
   1037e:	4281      	cmp	r1, r0
   10380:	d165      	bne.n	1044e <_ZN9ClearCore10SerialBase5SpeedEm+0x11e>
    m_outTail = 0;
   10382:	f8c4 313c 	str.w	r3, [r4, #316]	; 0x13c
    m_bufferOut[0] = 0;
   10386:	f8a4 30b0 	strh.w	r3, [r4, #176]	; 0xb0
    m_outHead = 0;
   1038a:	f8c4 3138 	str.w	r3, [r4, #312]	; 0x138
    FlushInput();
   1038e:	6853      	ldr	r3, [r2, #4]
   10390:	4a35      	ldr	r2, [pc, #212]	; (10468 <_ZN9ClearCore10SerialBase5SpeedEm+0x138>)
   10392:	4293      	cmp	r3, r2
   10394:	d162      	bne.n	1045c <_ZN9ClearCore10SerialBase5SpeedEm+0x12c>
    m_serPort->USART.INTENSET.reg = SERCOM_USART_INTENSET_RXC;
   10396:	6925      	ldr	r5, [r4, #16]
    m_bufferIn[0] = 0;
   10398:	2300      	movs	r3, #0
    m_serPort->USART.INTENSET.reg = SERCOM_USART_INTENSET_RXC;
   1039a:	2204      	movs	r2, #4
    m_inTail = 0;
   1039c:	f8c4 3134 	str.w	r3, [r4, #308]	; 0x134
    m_bufferIn[0] = 0;
   103a0:	8623      	strh	r3, [r4, #48]	; 0x30
    m_inHead = 0;
   103a2:	f8c4 3130 	str.w	r3, [r4, #304]	; 0x130
    m_serPort->USART.INTENSET.reg = SERCOM_USART_INTENSET_RXC;
   103a6:	75aa      	strb	r2, [r5, #22]
    switch (m_portMode) {
   103a8:	79e0      	ldrb	r0, [r4, #7]
   103aa:	2801      	cmp	r0, #1
   103ac:	d124      	bne.n	103f8 <_ZN9ClearCore10SerialBase5SpeedEm+0xc8>
            baudVal = ((__SERCOM_SPI_CLOCK / 2 + (bitsPerSecond - 1)) /
   103ae:	4b2f      	ldr	r3, [pc, #188]	; (1046c <_ZN9ClearCore10SerialBase5SpeedEm+0x13c>)
   103b0:	443b      	add	r3, r7
   103b2:	fbb3 f3f7 	udiv	r3, r3, r7
   103b6:	3b01      	subs	r3, #1
            if (baudVal > UINT8_MAX) {
   103b8:	2bff      	cmp	r3, #255	; 0xff
   103ba:	bf92      	itee	ls
   103bc:	b2db      	uxtbls	r3, r3
   103be:	23ff      	movhi	r3, #255	; 0xff
                success = false;
   103c0:	2000      	movhi	r0, #0
            m_serPort->SPI.BAUD.bit.BAUD = static_cast<uint8_t>(baudVal);
   103c2:	732b      	strb	r3, [r5, #12]
    if (sercomEnabled) {
   103c4:	b1b6      	cbz	r6, 103f4 <_ZN9ClearCore10SerialBase5SpeedEm+0xc4>
    m_serPort->USART.CTRLA.bit.ENABLE = 1;
   103c6:	682b      	ldr	r3, [r5, #0]
   103c8:	f043 0302 	orr.w	r3, r3, #2
   103cc:	602b      	str	r3, [r5, #0]
    SYNCBUSY_WAIT(usart, SERCOM_USART_SYNCBUSY_ENABLE);
   103ce:	69eb      	ldr	r3, [r5, #28]
   103d0:	079b      	lsls	r3, r3, #30
   103d2:	d4fc      	bmi.n	103ce <_ZN9ClearCore10SerialBase5SpeedEm+0x9e>
        PMUX_ENABLE(m_txMosiInfo->gpioPort, m_txMosiInfo->gpioPin);
   103d4:	6a22      	ldr	r2, [r4, #32]
   103d6:	f992 1001 	ldrsb.w	r1, [r2, #1]
   103da:	7893      	ldrb	r3, [r2, #2]
   103dc:	eb03 13c1 	add.w	r3, r3, r1, lsl #7
   103e0:	f103 4382 	add.w	r3, r3, #1090519040	; 0x41000000
   103e4:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
   103e8:	f893 2040 	ldrb.w	r2, [r3, #64]	; 0x40
   103ec:	f042 0201 	orr.w	r2, r2, #1
   103f0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
}
   103f4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
                65536 * (1 - (16.0 * bitsPerSecond / __SERCOM_USART_CLOCK));
   103f8:	4638      	mov	r0, r7
   103fa:	f00b f995 	bl	1b728 <__aeabi_ui2d>
   103fe:	2200      	movs	r2, #0
   10400:	4b1b      	ldr	r3, [pc, #108]	; (10470 <_ZN9ClearCore10SerialBase5SpeedEm+0x140>)
   10402:	f00b fa07 	bl	1b814 <__aeabi_dmul>
   10406:	4b1b      	ldr	r3, [pc, #108]	; (10474 <_ZN9ClearCore10SerialBase5SpeedEm+0x144>)
   10408:	4680      	mov	r8, r0
   1040a:	6818      	ldr	r0, [r3, #0]
   1040c:	4689      	mov	r9, r1
   1040e:	f00b f98b 	bl	1b728 <__aeabi_ui2d>
   10412:	4602      	mov	r2, r0
   10414:	460b      	mov	r3, r1
   10416:	4640      	mov	r0, r8
   10418:	4649      	mov	r1, r9
   1041a:	f00b fb25 	bl	1ba68 <__aeabi_ddiv>
   1041e:	4602      	mov	r2, r0
   10420:	460b      	mov	r3, r1
   10422:	2000      	movs	r0, #0
   10424:	4914      	ldr	r1, [pc, #80]	; (10478 <_ZN9ClearCore10SerialBase5SpeedEm+0x148>)
   10426:	f00b f841 	bl	1b4ac <__aeabi_dsub>
   1042a:	2200      	movs	r2, #0
   1042c:	4b13      	ldr	r3, [pc, #76]	; (1047c <_ZN9ClearCore10SerialBase5SpeedEm+0x14c>)
   1042e:	f00b f9f1 	bl	1b814 <__aeabi_dmul>
   10432:	f00b fcd1 	bl	1bdd8 <__aeabi_d2f>
            m_serPort->USART.BAUD.bit.BAUD = (uint16_t)(baudFloat + 0.5);
   10436:	f00b f999 	bl	1b76c <__aeabi_f2d>
   1043a:	2200      	movs	r2, #0
   1043c:	4b10      	ldr	r3, [pc, #64]	; (10480 <_ZN9ClearCore10SerialBase5SpeedEm+0x150>)
   1043e:	f00b f837 	bl	1b4b0 <__adddf3>
   10442:	f00b fca9 	bl	1bd98 <__aeabi_d2uiz>
   10446:	b280      	uxth	r0, r0
   10448:	81a8      	strh	r0, [r5, #12]
    bool success = true;
   1044a:	2001      	movs	r0, #1
            break;
   1044c:	e7ba      	b.n	103c4 <_ZN9ClearCore10SerialBase5SpeedEm+0x94>
    Flush();
   1044e:	4620      	mov	r0, r4
   10450:	4788      	blx	r1
   10452:	6822      	ldr	r2, [r4, #0]
    FlushInput();
   10454:	6853      	ldr	r3, [r2, #4]
   10456:	4a04      	ldr	r2, [pc, #16]	; (10468 <_ZN9ClearCore10SerialBase5SpeedEm+0x138>)
   10458:	4293      	cmp	r3, r2
   1045a:	d09c      	beq.n	10396 <_ZN9ClearCore10SerialBase5SpeedEm+0x66>
   1045c:	4620      	mov	r0, r4
   1045e:	4798      	blx	r3
   10460:	6925      	ldr	r5, [r4, #16]
   10462:	e7a1      	b.n	103a8 <_ZN9ClearCore10SerialBase5SpeedEm+0x78>
   10464:	000101fd 	.word	0x000101fd
   10468:	0001020d 	.word	0x0001020d
   1046c:	004c4b3f 	.word	0x004c4b3f
   10470:	40300000 	.word	0x40300000
   10474:	200000e8 	.word	0x200000e8
   10478:	3ff00000 	.word	0x3ff00000
   1047c:	40f00000 	.word	0x40f00000
   10480:	3fe00000 	.word	0x3fe00000

00010484 <_ZN9ClearCore10SerialBase9PortCloseEv>:
    if (m_portOpen) {
   10484:	f890 3029 	ldrb.w	r3, [r0, #41]	; 0x29
   10488:	b903      	cbnz	r3, 1048c <_ZN9ClearCore10SerialBase9PortCloseEv+0x8>
   1048a:	4770      	bx	lr
void SerialBase::PortClose() {
   1048c:	b570      	push	{r4, r5, r6, lr}
        WaitForTransmitIdle();
   1048e:	6805      	ldr	r5, [r0, #0]
   10490:	4a3e      	ldr	r2, [pc, #248]	; (1058c <_ZN9ClearCore10SerialBase9PortCloseEv+0x108>)
   10492:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
   10494:	4293      	cmp	r3, r2
   10496:	4604      	mov	r4, r0
   10498:	d157      	bne.n	1054a <_ZN9ClearCore10SerialBase9PortCloseEv+0xc6>
    if (m_portMode == UART) {
   1049a:	79c3      	ldrb	r3, [r0, #7]
   1049c:	2b00      	cmp	r3, #0
   1049e:	d03f      	beq.n	10520 <_ZN9ClearCore10SerialBase9PortCloseEv+0x9c>
    else if (m_portMode == SPI) {
   104a0:	2b01      	cmp	r3, #1
   104a2:	d056      	beq.n	10552 <_ZN9ClearCore10SerialBase9PortCloseEv+0xce>
   104a4:	6922      	ldr	r2, [r4, #16]
        DATA_DIRECTION_INPUT(m_rtsSsInfo->gpioPort, 1L << m_rtsSsInfo->gpioPin);
   104a6:	69a0      	ldr	r0, [r4, #24]
   104a8:	4939      	ldr	r1, [pc, #228]	; (10590 <_ZN9ClearCore10SerialBase9PortCloseEv+0x10c>)
   104aa:	f990 3001 	ldrsb.w	r3, [r0, #1]
   104ae:	7886      	ldrb	r6, [r0, #2]
   104b0:	eb01 13c3 	add.w	r3, r1, r3, lsl #7
   104b4:	2001      	movs	r0, #1
   104b6:	40b0      	lsls	r0, r6
   104b8:	6058      	str	r0, [r3, #4]
    PMUX_DISABLE(m_txMosiInfo->gpioPort, m_txMosiInfo->gpioPin);
   104ba:	6a20      	ldr	r0, [r4, #32]
   104bc:	f990 3001 	ldrsb.w	r3, [r0, #1]
   104c0:	7880      	ldrb	r0, [r0, #2]
   104c2:	eb01 13c3 	add.w	r3, r1, r3, lsl #7
   104c6:	4403      	add	r3, r0
   104c8:	f893 1040 	ldrb.w	r1, [r3, #64]	; 0x40
   104cc:	f36f 0100 	bfc	r1, #0, #1
   104d0:	f883 1040 	strb.w	r1, [r3, #64]	; 0x40
    if (m_serPort->USART.CTRLA.bit.ENABLE) {
   104d4:	6813      	ldr	r3, [r2, #0]
   104d6:	079b      	lsls	r3, r3, #30
   104d8:	d503      	bpl.n	104e2 <_ZN9ClearCore10SerialBase9PortCloseEv+0x5e>
        m_serPort->USART.CTRLA.bit.ENABLE = 0;
   104da:	6813      	ldr	r3, [r2, #0]
   104dc:	f36f 0341 	bfc	r3, #1, #1
   104e0:	6013      	str	r3, [r2, #0]
    SYNCBUSY_WAIT(usart, SERCOM_USART_SYNCBUSY_ENABLE);
   104e2:	69d3      	ldr	r3, [r2, #28]
   104e4:	f013 0302 	ands.w	r3, r3, #2
   104e8:	d1fb      	bne.n	104e2 <_ZN9ClearCore10SerialBase9PortCloseEv+0x5e>
    Flush();
   104ea:	682a      	ldr	r2, [r5, #0]
   104ec:	4929      	ldr	r1, [pc, #164]	; (10594 <_ZN9ClearCore10SerialBase9PortCloseEv+0x110>)
   104ee:	428a      	cmp	r2, r1
   104f0:	d124      	bne.n	1053c <_ZN9ClearCore10SerialBase9PortCloseEv+0xb8>
    m_outTail = 0;
   104f2:	f8c4 313c 	str.w	r3, [r4, #316]	; 0x13c
    m_bufferOut[0] = 0;
   104f6:	f8a4 30b0 	strh.w	r3, [r4, #176]	; 0xb0
    m_outHead = 0;
   104fa:	f8c4 3138 	str.w	r3, [r4, #312]	; 0x138
    FlushInput();
   104fe:	686b      	ldr	r3, [r5, #4]
   10500:	4a25      	ldr	r2, [pc, #148]	; (10598 <_ZN9ClearCore10SerialBase9PortCloseEv+0x114>)
   10502:	4293      	cmp	r3, r2
   10504:	d11e      	bne.n	10544 <_ZN9ClearCore10SerialBase9PortCloseEv+0xc0>
    m_serPort->USART.INTENSET.reg = SERCOM_USART_INTENSET_RXC;
   10506:	6922      	ldr	r2, [r4, #16]
    m_bufferIn[0] = 0;
   10508:	2300      	movs	r3, #0
    m_serPort->USART.INTENSET.reg = SERCOM_USART_INTENSET_RXC;
   1050a:	2104      	movs	r1, #4
    m_inTail = 0;
   1050c:	f8c4 3134 	str.w	r3, [r4, #308]	; 0x134
    m_bufferIn[0] = 0;
   10510:	8623      	strh	r3, [r4, #48]	; 0x30
    m_inHead = 0;
   10512:	f8c4 3130 	str.w	r3, [r4, #304]	; 0x130
    m_serPort->USART.INTENSET.reg = SERCOM_USART_INTENSET_RXC;
   10516:	7591      	strb	r1, [r2, #22]
        m_portOpen = false;
   10518:	2300      	movs	r3, #0
   1051a:	f884 3029 	strb.w	r3, [r4, #41]	; 0x29
   1051e:	bd70      	pop	{r4, r5, r6, pc}
        while (m_outHead != m_outTail) {
   10520:	f8d4 2138 	ldr.w	r2, [r4, #312]	; 0x138
   10524:	f8d4 313c 	ldr.w	r3, [r4, #316]	; 0x13c
   10528:	429a      	cmp	r2, r3
   1052a:	d1f9      	bne.n	10520 <_ZN9ClearCore10SerialBase9PortCloseEv+0x9c>
        if (m_serPort->USART.INTFLAG.bit.DRE) {
   1052c:	6922      	ldr	r2, [r4, #16]
   1052e:	7e13      	ldrb	r3, [r2, #24]
   10530:	07d8      	lsls	r0, r3, #31
   10532:	d4b8      	bmi.n	104a6 <_ZN9ClearCore10SerialBase9PortCloseEv+0x22>
        while (!m_serPort->USART.INTFLAG.bit.TXC) {
   10534:	7e13      	ldrb	r3, [r2, #24]
   10536:	0799      	lsls	r1, r3, #30
   10538:	d5fc      	bpl.n	10534 <_ZN9ClearCore10SerialBase9PortCloseEv+0xb0>
   1053a:	e7b4      	b.n	104a6 <_ZN9ClearCore10SerialBase9PortCloseEv+0x22>
    Flush();
   1053c:	4620      	mov	r0, r4
   1053e:	4790      	blx	r2
   10540:	6825      	ldr	r5, [r4, #0]
   10542:	e7dc      	b.n	104fe <_ZN9ClearCore10SerialBase9PortCloseEv+0x7a>
    FlushInput();
   10544:	4620      	mov	r0, r4
   10546:	4798      	blx	r3
   10548:	e7e6      	b.n	10518 <_ZN9ClearCore10SerialBase9PortCloseEv+0x94>
        WaitForTransmitIdle();
   1054a:	4798      	blx	r3
   1054c:	6922      	ldr	r2, [r4, #16]
   1054e:	6825      	ldr	r5, [r4, #0]
   10550:	e7a9      	b.n	104a6 <_ZN9ClearCore10SerialBase9PortCloseEv+0x22>
    if (m_dmaRxChannel == DMA_INVALID_CHANNEL ||
   10552:	f890 002e 	ldrb.w	r0, [r0, #46]	; 0x2e
   10556:	2807      	cmp	r0, #7
   10558:	d0a4      	beq.n	104a4 <_ZN9ClearCore10SerialBase9PortCloseEv+0x20>
   1055a:	f894 302f 	ldrb.w	r3, [r4, #47]	; 0x2f
   1055e:	2b07      	cmp	r3, #7
   10560:	d0a0      	beq.n	104a4 <_ZN9ClearCore10SerialBase9PortCloseEv+0x20>
            DmaManager::Channel(m_dmaRxChannel)->CHCTRLA.bit.ENABLE) {
   10562:	f7f4 feed 	bl	5340 <_ZN9ClearCore10DmaManager7ChannelENS_11DmaChannelsE>
   10566:	6803      	ldr	r3, [r0, #0]
    while (m_portOpen && m_portMode == SPI &&
   10568:	079a      	lsls	r2, r3, #30
   1056a:	d5ef      	bpl.n	1054c <_ZN9ClearCore10SerialBase9PortCloseEv+0xc8>
   1056c:	f894 3029 	ldrb.w	r3, [r4, #41]	; 0x29
   10570:	2b00      	cmp	r3, #0
   10572:	d0eb      	beq.n	1054c <_ZN9ClearCore10SerialBase9PortCloseEv+0xc8>
   10574:	79e3      	ldrb	r3, [r4, #7]
   10576:	2b01      	cmp	r3, #1
   10578:	d1e8      	bne.n	1054c <_ZN9ClearCore10SerialBase9PortCloseEv+0xc8>
   1057a:	f894 002e 	ldrb.w	r0, [r4, #46]	; 0x2e
            DmaManager::Channel(m_dmaRxChannel)->CHCTRLA.bit.ENABLE) {
   1057e:	f7f4 fedf 	bl	5340 <_ZN9ClearCore10DmaManager7ChannelENS_11DmaChannelsE>
   10582:	6803      	ldr	r3, [r0, #0]
    while (m_portOpen && m_portMode == SPI &&
   10584:	079a      	lsls	r2, r3, #30
   10586:	d4f1      	bmi.n	1056c <_ZN9ClearCore10SerialBase9PortCloseEv+0xe8>
   10588:	e7e0      	b.n	1054c <_ZN9ClearCore10SerialBase9PortCloseEv+0xc8>
   1058a:	bf00      	nop
   1058c:	000102d9 	.word	0x000102d9
   10590:	41008000 	.word	0x41008000
   10594:	000101fd 	.word	0x000101fd
   10598:	0001020d 	.word	0x0001020d

0001059c <_ZN9ClearCore10SerialBase6ParityENS_7ISerial9_ParitiesE>:
bool SerialBase::Parity(Parities newParity) {
   1059c:	b538      	push	{r3, r4, r5, lr}
    switch (m_portMode) {
   1059e:	79c3      	ldrb	r3, [r0, #7]
    m_parity = newParity;
   105a0:	7101      	strb	r1, [r0, #4]
    switch (m_portMode) {
   105a2:	2b01      	cmp	r3, #1
   105a4:	d101      	bne.n	105aa <_ZN9ClearCore10SerialBase6ParityENS_7ISerial9_ParitiesE+0xe>
            return false;
   105a6:	2000      	movs	r0, #0
   105a8:	bd38      	pop	{r3, r4, r5, pc}
    PMUX_DISABLE(m_txMosiInfo->gpioPort, m_txMosiInfo->gpioPin);
   105aa:	6a01      	ldr	r1, [r0, #32]
            bool sercomEnabled = m_serPort->USART.CTRLA.bit.ENABLE;
   105ac:	6902      	ldr	r2, [r0, #16]
    PMUX_DISABLE(m_txMosiInfo->gpioPort, m_txMosiInfo->gpioPin);
   105ae:	f991 4001 	ldrsb.w	r4, [r1, #1]
   105b2:	788b      	ldrb	r3, [r1, #2]
            bool sercomEnabled = m_serPort->USART.CTRLA.bit.ENABLE;
   105b4:	6815      	ldr	r5, [r2, #0]
    PMUX_DISABLE(m_txMosiInfo->gpioPort, m_txMosiInfo->gpioPin);
   105b6:	eb03 13c4 	add.w	r3, r3, r4, lsl #7
   105ba:	f103 4382 	add.w	r3, r3, #1090519040	; 0x41000000
   105be:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
            bool sercomEnabled = m_serPort->USART.CTRLA.bit.ENABLE;
   105c2:	f3c5 0540 	ubfx	r5, r5, #1, #1
    PMUX_DISABLE(m_txMosiInfo->gpioPort, m_txMosiInfo->gpioPin);
   105c6:	f893 1040 	ldrb.w	r1, [r3, #64]	; 0x40
   105ca:	f36f 0100 	bfc	r1, #0, #1
   105ce:	f883 1040 	strb.w	r1, [r3, #64]	; 0x40
    if (m_serPort->USART.CTRLA.bit.ENABLE) {
   105d2:	6813      	ldr	r3, [r2, #0]
   105d4:	0799      	lsls	r1, r3, #30
   105d6:	d503      	bpl.n	105e0 <_ZN9ClearCore10SerialBase6ParityENS_7ISerial9_ParitiesE+0x44>
        m_serPort->USART.CTRLA.bit.ENABLE = 0;
   105d8:	6813      	ldr	r3, [r2, #0]
   105da:	f36f 0341 	bfc	r3, #1, #1
   105de:	6013      	str	r3, [r2, #0]
    SYNCBUSY_WAIT(usart, SERCOM_USART_SYNCBUSY_ENABLE);
   105e0:	69d3      	ldr	r3, [r2, #28]
   105e2:	f013 0302 	ands.w	r3, r3, #2
   105e6:	d1fb      	bne.n	105e0 <_ZN9ClearCore10SerialBase6ParityENS_7ISerial9_ParitiesE+0x44>
    Flush();
   105e8:	6802      	ldr	r2, [r0, #0]
   105ea:	4604      	mov	r4, r0
   105ec:	6811      	ldr	r1, [r2, #0]
   105ee:	4825      	ldr	r0, [pc, #148]	; (10684 <_ZN9ClearCore10SerialBase6ParityENS_7ISerial9_ParitiesE+0xe8>)
   105f0:	4281      	cmp	r1, r0
   105f2:	d142      	bne.n	1067a <_ZN9ClearCore10SerialBase6ParityENS_7ISerial9_ParitiesE+0xde>
    m_outTail = 0;
   105f4:	f8c4 313c 	str.w	r3, [r4, #316]	; 0x13c
    m_bufferOut[0] = 0;
   105f8:	f8a4 30b0 	strh.w	r3, [r4, #176]	; 0xb0
    m_outHead = 0;
   105fc:	f8c4 3138 	str.w	r3, [r4, #312]	; 0x138
    FlushInput();
   10600:	6853      	ldr	r3, [r2, #4]
   10602:	4a21      	ldr	r2, [pc, #132]	; (10688 <_ZN9ClearCore10SerialBase6ParityENS_7ISerial9_ParitiesE+0xec>)
   10604:	4293      	cmp	r3, r2
   10606:	d134      	bne.n	10672 <_ZN9ClearCore10SerialBase6ParityENS_7ISerial9_ParitiesE+0xd6>
    m_serPort->USART.INTENSET.reg = SERCOM_USART_INTENSET_RXC;
   10608:	6922      	ldr	r2, [r4, #16]
    m_bufferIn[0] = 0;
   1060a:	2300      	movs	r3, #0
    m_serPort->USART.INTENSET.reg = SERCOM_USART_INTENSET_RXC;
   1060c:	2104      	movs	r1, #4
    m_inTail = 0;
   1060e:	f8c4 3134 	str.w	r3, [r4, #308]	; 0x134
    m_bufferIn[0] = 0;
   10612:	8623      	strh	r3, [r4, #48]	; 0x30
    m_inHead = 0;
   10614:	f8c4 3130 	str.w	r3, [r4, #304]	; 0x130
    m_serPort->USART.INTENSET.reg = SERCOM_USART_INTENSET_RXC;
   10618:	7591      	strb	r1, [r2, #22]
            if (m_parity != PARITY_N) {
   1061a:	7923      	ldrb	r3, [r4, #4]
   1061c:	2b02      	cmp	r3, #2
   1061e:	d023      	beq.n	10668 <_ZN9ClearCore10SerialBase6ParityENS_7ISerial9_ParitiesE+0xcc>
                m_serPort->USART.CTRLA.bit.FORM = 1;
   10620:	6811      	ldr	r1, [r2, #0]
   10622:	2001      	movs	r0, #1
   10624:	f360 611b 	bfi	r1, r0, #24, #4
   10628:	6011      	str	r1, [r2, #0]
                m_serPort->USART.CTRLB.bit.PMODE = m_parity;
   1062a:	6851      	ldr	r1, [r2, #4]
   1062c:	f363 314d 	bfi	r1, r3, #13, #1
   10630:	6051      	str	r1, [r2, #4]
            if (sercomEnabled) {
   10632:	b1bd      	cbz	r5, 10664 <_ZN9ClearCore10SerialBase6ParityENS_7ISerial9_ParitiesE+0xc8>
    m_serPort->USART.CTRLA.bit.ENABLE = 1;
   10634:	6813      	ldr	r3, [r2, #0]
   10636:	f043 0302 	orr.w	r3, r3, #2
   1063a:	6013      	str	r3, [r2, #0]
    SYNCBUSY_WAIT(usart, SERCOM_USART_SYNCBUSY_ENABLE);
   1063c:	69d3      	ldr	r3, [r2, #28]
   1063e:	079b      	lsls	r3, r3, #30
   10640:	d4fc      	bmi.n	1063c <_ZN9ClearCore10SerialBase6ParityENS_7ISerial9_ParitiesE+0xa0>
        PMUX_ENABLE(m_txMosiInfo->gpioPort, m_txMosiInfo->gpioPin);
   10642:	6a22      	ldr	r2, [r4, #32]
   10644:	f992 1001 	ldrsb.w	r1, [r2, #1]
   10648:	7893      	ldrb	r3, [r2, #2]
   1064a:	eb03 13c1 	add.w	r3, r3, r1, lsl #7
   1064e:	f103 4382 	add.w	r3, r3, #1090519040	; 0x41000000
   10652:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
   10656:	2001      	movs	r0, #1
   10658:	f893 2040 	ldrb.w	r2, [r3, #64]	; 0x40
   1065c:	4302      	orrs	r2, r0
   1065e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
   10662:	bd38      	pop	{r3, r4, r5, pc}
            return true;
   10664:	2001      	movs	r0, #1
}
   10666:	bd38      	pop	{r3, r4, r5, pc}
                m_serPort->USART.CTRLA.bit.FORM = 0;
   10668:	6813      	ldr	r3, [r2, #0]
   1066a:	f36f 631b 	bfc	r3, #24, #4
   1066e:	6013      	str	r3, [r2, #0]
   10670:	e7df      	b.n	10632 <_ZN9ClearCore10SerialBase6ParityENS_7ISerial9_ParitiesE+0x96>
    FlushInput();
   10672:	4620      	mov	r0, r4
   10674:	4798      	blx	r3
   10676:	6922      	ldr	r2, [r4, #16]
   10678:	e7cf      	b.n	1061a <_ZN9ClearCore10SerialBase6ParityENS_7ISerial9_ParitiesE+0x7e>
    Flush();
   1067a:	4620      	mov	r0, r4
   1067c:	4788      	blx	r1
   1067e:	6822      	ldr	r2, [r4, #0]
   10680:	e7be      	b.n	10600 <_ZN9ClearCore10SerialBase6ParityENS_7ISerial9_ParitiesE+0x64>
   10682:	bf00      	nop
   10684:	000101fd 	.word	0x000101fd
   10688:	0001020d 	.word	0x0001020d

0001068c <_ZN9ClearCore10SerialBase8CharSizeEh>:
bool SerialBase::CharSize(uint8_t size) {
   1068c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    if (size < 5 || size > 9) {
   1068e:	1f4b      	subs	r3, r1, #5
   10690:	2b04      	cmp	r3, #4
   10692:	d85d      	bhi.n	10750 <_ZN9ClearCore10SerialBase8CharSizeEh+0xc4>
    else if (m_portMode == SPI && (size < 8 || size > 9)) {
   10694:	79c3      	ldrb	r3, [r0, #7]
   10696:	2b01      	cmp	r3, #1
   10698:	d056      	beq.n	10748 <_ZN9ClearCore10SerialBase8CharSizeEh+0xbc>
    PMUX_DISABLE(m_txMosiInfo->gpioPort, m_txMosiInfo->gpioPin);
   1069a:	6a02      	ldr	r2, [r0, #32]
    m_charSize = size;
   1069c:	7181      	strb	r1, [r0, #6]
    PMUX_DISABLE(m_txMosiInfo->gpioPort, m_txMosiInfo->gpioPin);
   1069e:	f992 4001 	ldrsb.w	r4, [r2, #1]
   106a2:	7893      	ldrb	r3, [r2, #2]
    bool sercomEnabled = m_serPort->USART.CTRLA.bit.ENABLE;
   106a4:	6902      	ldr	r2, [r0, #16]
    PMUX_DISABLE(m_txMosiInfo->gpioPort, m_txMosiInfo->gpioPin);
   106a6:	eb03 13c4 	add.w	r3, r3, r4, lsl #7
   106aa:	f103 4382 	add.w	r3, r3, #1090519040	; 0x41000000
   106ae:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
    bool sercomEnabled = m_serPort->USART.CTRLA.bit.ENABLE;
   106b2:	6815      	ldr	r5, [r2, #0]
    PMUX_DISABLE(m_txMosiInfo->gpioPort, m_txMosiInfo->gpioPin);
   106b4:	f893 4040 	ldrb.w	r4, [r3, #64]	; 0x40
   106b8:	f36f 0400 	bfc	r4, #0, #1
   106bc:	f883 4040 	strb.w	r4, [r3, #64]	; 0x40
    if (m_serPort->USART.CTRLA.bit.ENABLE) {
   106c0:	6813      	ldr	r3, [r2, #0]
   106c2:	079c      	lsls	r4, r3, #30
    bool sercomEnabled = m_serPort->USART.CTRLA.bit.ENABLE;
   106c4:	f3c5 0540 	ubfx	r5, r5, #1, #1
    if (m_serPort->USART.CTRLA.bit.ENABLE) {
   106c8:	d503      	bpl.n	106d2 <_ZN9ClearCore10SerialBase8CharSizeEh+0x46>
        m_serPort->USART.CTRLA.bit.ENABLE = 0;
   106ca:	6813      	ldr	r3, [r2, #0]
   106cc:	f36f 0341 	bfc	r3, #1, #1
   106d0:	6013      	str	r3, [r2, #0]
    SYNCBUSY_WAIT(usart, SERCOM_USART_SYNCBUSY_ENABLE);
   106d2:	69d3      	ldr	r3, [r2, #28]
   106d4:	f013 0302 	ands.w	r3, r3, #2
   106d8:	d1fb      	bne.n	106d2 <_ZN9ClearCore10SerialBase8CharSizeEh+0x46>
    Flush();
   106da:	6802      	ldr	r2, [r0, #0]
   106dc:	460f      	mov	r7, r1
   106de:	6816      	ldr	r6, [r2, #0]
   106e0:	4921      	ldr	r1, [pc, #132]	; (10768 <_ZN9ClearCore10SerialBase8CharSizeEh+0xdc>)
   106e2:	428e      	cmp	r6, r1
   106e4:	4604      	mov	r4, r0
   106e6:	d13b      	bne.n	10760 <_ZN9ClearCore10SerialBase8CharSizeEh+0xd4>
    m_outTail = 0;
   106e8:	f8c0 313c 	str.w	r3, [r0, #316]	; 0x13c
    m_bufferOut[0] = 0;
   106ec:	f8a0 30b0 	strh.w	r3, [r0, #176]	; 0xb0
    m_outHead = 0;
   106f0:	f8c0 3138 	str.w	r3, [r0, #312]	; 0x138
    FlushInput();
   106f4:	6853      	ldr	r3, [r2, #4]
   106f6:	4a1d      	ldr	r2, [pc, #116]	; (1076c <_ZN9ClearCore10SerialBase8CharSizeEh+0xe0>)
   106f8:	4293      	cmp	r3, r2
   106fa:	d12d      	bne.n	10758 <_ZN9ClearCore10SerialBase8CharSizeEh+0xcc>
    m_serPort->USART.INTENSET.reg = SERCOM_USART_INTENSET_RXC;
   106fc:	6922      	ldr	r2, [r4, #16]
    m_bufferIn[0] = 0;
   106fe:	2300      	movs	r3, #0
    m_serPort->USART.INTENSET.reg = SERCOM_USART_INTENSET_RXC;
   10700:	2104      	movs	r1, #4
    m_inTail = 0;
   10702:	f8c4 3134 	str.w	r3, [r4, #308]	; 0x134
    m_bufferIn[0] = 0;
   10706:	8623      	strh	r3, [r4, #48]	; 0x30
    m_inHead = 0;
   10708:	f8c4 3130 	str.w	r3, [r4, #304]	; 0x130
    m_serPort->USART.INTENSET.reg = SERCOM_USART_INTENSET_RXC;
   1070c:	7591      	strb	r1, [r2, #22]
            m_serPort->SPI.CTRLB.bit.CHSIZE = size &
   1070e:	6853      	ldr	r3, [r2, #4]
   10710:	f367 0302 	bfi	r3, r7, #0, #3
   10714:	6053      	str	r3, [r2, #4]
    if (sercomEnabled) {
   10716:	b1ed      	cbz	r5, 10754 <_ZN9ClearCore10SerialBase8CharSizeEh+0xc8>
    m_serPort->USART.CTRLA.bit.ENABLE = 1;
   10718:	6813      	ldr	r3, [r2, #0]
   1071a:	f043 0302 	orr.w	r3, r3, #2
   1071e:	6013      	str	r3, [r2, #0]
    SYNCBUSY_WAIT(usart, SERCOM_USART_SYNCBUSY_ENABLE);
   10720:	69d3      	ldr	r3, [r2, #28]
   10722:	079b      	lsls	r3, r3, #30
   10724:	d4fc      	bmi.n	10720 <_ZN9ClearCore10SerialBase8CharSizeEh+0x94>
        PMUX_ENABLE(m_txMosiInfo->gpioPort, m_txMosiInfo->gpioPin);
   10726:	6a22      	ldr	r2, [r4, #32]
   10728:	f992 1001 	ldrsb.w	r1, [r2, #1]
   1072c:	7893      	ldrb	r3, [r2, #2]
   1072e:	eb03 13c1 	add.w	r3, r3, r1, lsl #7
   10732:	f103 4382 	add.w	r3, r3, #1090519040	; 0x41000000
   10736:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
   1073a:	2001      	movs	r0, #1
   1073c:	f893 2040 	ldrb.w	r2, [r3, #64]	; 0x40
   10740:	4302      	orrs	r2, r0
   10742:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
   10746:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    else if (m_portMode == SPI && (size < 8 || size > 9)) {
   10748:	f1a1 0308 	sub.w	r3, r1, #8
   1074c:	2b01      	cmp	r3, #1
   1074e:	d9a4      	bls.n	1069a <_ZN9ClearCore10SerialBase8CharSizeEh+0xe>
        return false;
   10750:	2000      	movs	r0, #0
   10752:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    return true;
   10754:	2001      	movs	r0, #1
}
   10756:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    FlushInput();
   10758:	4620      	mov	r0, r4
   1075a:	4798      	blx	r3
   1075c:	6922      	ldr	r2, [r4, #16]
   1075e:	e7d6      	b.n	1070e <_ZN9ClearCore10SerialBase8CharSizeEh+0x82>
    Flush();
   10760:	47b0      	blx	r6
   10762:	6822      	ldr	r2, [r4, #0]
   10764:	e7c6      	b.n	106f4 <_ZN9ClearCore10SerialBase8CharSizeEh+0x68>
   10766:	bf00      	nop
   10768:	000101fd 	.word	0x000101fd
   1076c:	0001020d 	.word	0x0001020d

00010770 <_ZN9ClearCore10SerialBase8StopBitsEh>:
bool SerialBase::StopBits(uint8_t bits) {
   10770:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    if (bits < 1 || bits > 2) {
   10772:	1e4c      	subs	r4, r1, #1
   10774:	b2e4      	uxtb	r4, r4
   10776:	2c01      	cmp	r4, #1
   10778:	d901      	bls.n	1077e <_ZN9ClearCore10SerialBase8StopBitsEh+0xe>
        return false;
   1077a:	2000      	movs	r0, #0
}
   1077c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if (m_portMode != PortModes::UART) {
   1077e:	79c5      	ldrb	r5, [r0, #7]
    m_stopBits = bits;
   10780:	7141      	strb	r1, [r0, #5]
    if (m_portMode != PortModes::UART) {
   10782:	b10d      	cbz	r5, 10788 <_ZN9ClearCore10SerialBase8StopBitsEh+0x18>
        return true;
   10784:	2001      	movs	r0, #1
   10786:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    PMUX_DISABLE(m_txMosiInfo->gpioPort, m_txMosiInfo->gpioPin);
   10788:	6a01      	ldr	r1, [r0, #32]
    bool sercomEnabled = m_serPort->USART.CTRLA.bit.ENABLE;
   1078a:	6902      	ldr	r2, [r0, #16]
    PMUX_DISABLE(m_txMosiInfo->gpioPort, m_txMosiInfo->gpioPin);
   1078c:	f991 7001 	ldrsb.w	r7, [r1, #1]
   10790:	788b      	ldrb	r3, [r1, #2]
    bool sercomEnabled = m_serPort->USART.CTRLA.bit.ENABLE;
   10792:	6816      	ldr	r6, [r2, #0]
    PMUX_DISABLE(m_txMosiInfo->gpioPort, m_txMosiInfo->gpioPin);
   10794:	eb03 13c7 	add.w	r3, r3, r7, lsl #7
   10798:	f103 4382 	add.w	r3, r3, #1090519040	; 0x41000000
   1079c:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
    bool sercomEnabled = m_serPort->USART.CTRLA.bit.ENABLE;
   107a0:	f3c6 0640 	ubfx	r6, r6, #1, #1
    PMUX_DISABLE(m_txMosiInfo->gpioPort, m_txMosiInfo->gpioPin);
   107a4:	f893 1040 	ldrb.w	r1, [r3, #64]	; 0x40
   107a8:	f365 0100 	bfi	r1, r5, #0, #1
   107ac:	f883 1040 	strb.w	r1, [r3, #64]	; 0x40
    if (m_serPort->USART.CTRLA.bit.ENABLE) {
   107b0:	6813      	ldr	r3, [r2, #0]
   107b2:	0799      	lsls	r1, r3, #30
   107b4:	d503      	bpl.n	107be <_ZN9ClearCore10SerialBase8StopBitsEh+0x4e>
        m_serPort->USART.CTRLA.bit.ENABLE = 0;
   107b6:	6813      	ldr	r3, [r2, #0]
   107b8:	f365 0341 	bfi	r3, r5, #1, #1
   107bc:	6013      	str	r3, [r2, #0]
    SYNCBUSY_WAIT(usart, SERCOM_USART_SYNCBUSY_ENABLE);
   107be:	69d3      	ldr	r3, [r2, #28]
   107c0:	f013 0302 	ands.w	r3, r3, #2
   107c4:	d1fb      	bne.n	107be <_ZN9ClearCore10SerialBase8StopBitsEh+0x4e>
    Flush();
   107c6:	6802      	ldr	r2, [r0, #0]
   107c8:	4605      	mov	r5, r0
   107ca:	6811      	ldr	r1, [r2, #0]
   107cc:	481d      	ldr	r0, [pc, #116]	; (10844 <_ZN9ClearCore10SerialBase8StopBitsEh+0xd4>)
   107ce:	4281      	cmp	r1, r0
   107d0:	d130      	bne.n	10834 <_ZN9ClearCore10SerialBase8StopBitsEh+0xc4>
    m_outTail = 0;
   107d2:	f8c5 313c 	str.w	r3, [r5, #316]	; 0x13c
    m_bufferOut[0] = 0;
   107d6:	f8a5 30b0 	strh.w	r3, [r5, #176]	; 0xb0
    m_outHead = 0;
   107da:	f8c5 3138 	str.w	r3, [r5, #312]	; 0x138
    FlushInput();
   107de:	6853      	ldr	r3, [r2, #4]
   107e0:	4a19      	ldr	r2, [pc, #100]	; (10848 <_ZN9ClearCore10SerialBase8StopBitsEh+0xd8>)
   107e2:	4293      	cmp	r3, r2
   107e4:	d12a      	bne.n	1083c <_ZN9ClearCore10SerialBase8StopBitsEh+0xcc>
    m_serPort->USART.INTENSET.reg = SERCOM_USART_INTENSET_RXC;
   107e6:	692a      	ldr	r2, [r5, #16]
    m_bufferIn[0] = 0;
   107e8:	2300      	movs	r3, #0
    m_serPort->USART.INTENSET.reg = SERCOM_USART_INTENSET_RXC;
   107ea:	2104      	movs	r1, #4
    m_inTail = 0;
   107ec:	f8c5 3134 	str.w	r3, [r5, #308]	; 0x134
    m_bufferIn[0] = 0;
   107f0:	862b      	strh	r3, [r5, #48]	; 0x30
    m_inHead = 0;
   107f2:	f8c5 3130 	str.w	r3, [r5, #304]	; 0x130
    m_serPort->USART.INTENSET.reg = SERCOM_USART_INTENSET_RXC;
   107f6:	7591      	strb	r1, [r2, #22]
    m_serPort->USART.CTRLB.bit.SBMODE = bits - 1;
   107f8:	6853      	ldr	r3, [r2, #4]
   107fa:	f364 1386 	bfi	r3, r4, #6, #1
   107fe:	6053      	str	r3, [r2, #4]
    if (sercomEnabled) {
   10800:	2e00      	cmp	r6, #0
   10802:	d0bf      	beq.n	10784 <_ZN9ClearCore10SerialBase8StopBitsEh+0x14>
    m_serPort->USART.CTRLA.bit.ENABLE = 1;
   10804:	6813      	ldr	r3, [r2, #0]
   10806:	f043 0302 	orr.w	r3, r3, #2
   1080a:	6013      	str	r3, [r2, #0]
    SYNCBUSY_WAIT(usart, SERCOM_USART_SYNCBUSY_ENABLE);
   1080c:	69d3      	ldr	r3, [r2, #28]
   1080e:	079b      	lsls	r3, r3, #30
   10810:	d4fc      	bmi.n	1080c <_ZN9ClearCore10SerialBase8StopBitsEh+0x9c>
        PMUX_ENABLE(m_txMosiInfo->gpioPort, m_txMosiInfo->gpioPin);
   10812:	6a2a      	ldr	r2, [r5, #32]
   10814:	f992 1001 	ldrsb.w	r1, [r2, #1]
   10818:	7893      	ldrb	r3, [r2, #2]
   1081a:	eb03 13c1 	add.w	r3, r3, r1, lsl #7
   1081e:	f103 4382 	add.w	r3, r3, #1090519040	; 0x41000000
   10822:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
    return true;
   10826:	2001      	movs	r0, #1
        PMUX_ENABLE(m_txMosiInfo->gpioPort, m_txMosiInfo->gpioPin);
   10828:	f893 2040 	ldrb.w	r2, [r3, #64]	; 0x40
   1082c:	4302      	orrs	r2, r0
   1082e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
   10832:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    Flush();
   10834:	4628      	mov	r0, r5
   10836:	4788      	blx	r1
   10838:	682a      	ldr	r2, [r5, #0]
   1083a:	e7d0      	b.n	107de <_ZN9ClearCore10SerialBase8StopBitsEh+0x6e>
    FlushInput();
   1083c:	4628      	mov	r0, r5
   1083e:	4798      	blx	r3
   10840:	692a      	ldr	r2, [r5, #16]
   10842:	e7d9      	b.n	107f8 <_ZN9ClearCore10SerialBase8StopBitsEh+0x88>
   10844:	000101fd 	.word	0x000101fd
   10848:	0001020d 	.word	0x0001020d

0001084c <_ZN9ClearCore10SerialBase8PortModeENS0_9PortModesE.part.9>:
bool SerialBase::PortMode(PortModes newMode) {
   1084c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    SercomUsart *usart = &m_serPort->USART;
   10850:	6905      	ldr	r5, [r0, #16]
    usart->CTRLA.bit.SWRST = 1;
   10852:	682b      	ldr	r3, [r5, #0]
   10854:	f043 0301 	orr.w	r3, r3, #1
bool SerialBase::PortMode(PortModes newMode) {
   10858:	b089      	sub	sp, #36	; 0x24
   1085a:	4604      	mov	r4, r0
    usart->CTRLA.bit.SWRST = 1;
   1085c:	602b      	str	r3, [r5, #0]
    SYNCBUSY_WAIT(usart, SERCOM_USART_SYNCBUSY_SWRST);
   1085e:	69eb      	ldr	r3, [r5, #28]
   10860:	f013 0301 	ands.w	r3, r3, #1
   10864:	d1fb      	bne.n	1085e <_ZN9ClearCore10SerialBase8PortModeENS0_9PortModesE.part.9+0x12>
    Flush();
   10866:	6822      	ldr	r2, [r4, #0]
   10868:	f8df 80d4 	ldr.w	r8, [pc, #212]	; 10940 <_ZN9ClearCore10SerialBase8PortModeENS0_9PortModesE.part.9+0xf4>
   1086c:	6811      	ldr	r1, [r2, #0]
   1086e:	4541      	cmp	r1, r8
   10870:	d153      	bne.n	1091a <_ZN9ClearCore10SerialBase8PortModeENS0_9PortModesE.part.9+0xce>
    m_outTail = 0;
   10872:	f8c4 313c 	str.w	r3, [r4, #316]	; 0x13c
    m_bufferOut[0] = 0;
   10876:	f8a4 30b0 	strh.w	r3, [r4, #176]	; 0xb0
    m_outHead = 0;
   1087a:	f8c4 3138 	str.w	r3, [r4, #312]	; 0x138
    FlushInput();
   1087e:	6853      	ldr	r3, [r2, #4]
   10880:	4a28      	ldr	r2, [pc, #160]	; (10924 <_ZN9ClearCore10SerialBase8PortModeENS0_9PortModesE.part.9+0xd8>)
   10882:	4293      	cmp	r3, r2
   10884:	d122      	bne.n	108cc <_ZN9ClearCore10SerialBase8PortModeENS0_9PortModesE.part.9+0x80>
    m_bufferIn[0] = 0;
   10886:	2200      	movs	r2, #0
    m_inTail = 0;
   10888:	f8c4 2134 	str.w	r2, [r4, #308]	; 0x134
    m_serPort->USART.INTENSET.reg = SERCOM_USART_INTENSET_RXC;
   1088c:	6923      	ldr	r3, [r4, #16]
    m_bufferIn[0] = 0;
   1088e:	8622      	strh	r2, [r4, #48]	; 0x30
    m_inHead = 0;
   10890:	f8c4 2130 	str.w	r2, [r4, #304]	; 0x130
    if (m_serPort == SERCOM0) {
   10894:	4a24      	ldr	r2, [pc, #144]	; (10928 <_ZN9ClearCore10SerialBase8PortModeENS0_9PortModesE.part.9+0xdc>)
    m_serPort->USART.INTENSET.reg = SERCOM_USART_INTENSET_RXC;
   10896:	2104      	movs	r1, #4
    if (m_serPort == SERCOM0) {
   10898:	4293      	cmp	r3, r2
    m_serPort->USART.INTENSET.reg = SERCOM_USART_INTENSET_RXC;
   1089a:	7599      	strb	r1, [r3, #22]
    if (m_serPort == SERCOM0) {
   1089c:	d01c      	beq.n	108d8 <_ZN9ClearCore10SerialBase8PortModeENS0_9PortModesE.part.9+0x8c>
    else if (m_serPort == SERCOM2) {
   1089e:	4a23      	ldr	r2, [pc, #140]	; (1092c <_ZN9ClearCore10SerialBase8PortModeENS0_9PortModesE.part.9+0xe0>)
   108a0:	4293      	cmp	r3, r2
   108a2:	f000 8310 	beq.w	10ec6 <_ZN9ClearCore10SerialBase8PortModeENS0_9PortModesE.part.9+0x67a>
    else if (m_serPort == SERCOM3) {
   108a6:	4a22      	ldr	r2, [pc, #136]	; (10930 <_ZN9ClearCore10SerialBase8PortModeENS0_9PortModesE.part.9+0xe4>)
   108a8:	4293      	cmp	r3, r2
   108aa:	f000 8341 	beq.w	10f30 <_ZN9ClearCore10SerialBase8PortModeENS0_9PortModesE.part.9+0x6e4>
    else if (m_serPort == SERCOM4) {
   108ae:	f1b3 4f86 	cmp.w	r3, #1124073472	; 0x43000000
   108b2:	f000 839a 	beq.w	10fea <_ZN9ClearCore10SerialBase8PortModeENS0_9PortModesE.part.9+0x79e>
    else if (m_serPort == SERCOM5) {
   108b6:	4a1f      	ldr	r2, [pc, #124]	; (10934 <_ZN9ClearCore10SerialBase8PortModeENS0_9PortModesE.part.9+0xe8>)
   108b8:	4293      	cmp	r3, r2
   108ba:	d043      	beq.n	10944 <_ZN9ClearCore10SerialBase8PortModeENS0_9PortModesE.part.9+0xf8>
    else if (m_serPort == SERCOM7) {
   108bc:	4a1e      	ldr	r2, [pc, #120]	; (10938 <_ZN9ClearCore10SerialBase8PortModeENS0_9PortModesE.part.9+0xec>)
   108be:	4293      	cmp	r3, r2
   108c0:	f000 8372 	beq.w	10fa8 <_ZN9ClearCore10SerialBase8PortModeENS0_9PortModesE.part.9+0x75c>
        return false;
   108c4:	2000      	movs	r0, #0
}
   108c6:	b009      	add	sp, #36	; 0x24
   108c8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    FlushInput();
   108cc:	4620      	mov	r0, r4
   108ce:	4798      	blx	r3
   108d0:	6923      	ldr	r3, [r4, #16]
    if (m_serPort == SERCOM0) {
   108d2:	4a15      	ldr	r2, [pc, #84]	; (10928 <_ZN9ClearCore10SerialBase8PortModeENS0_9PortModesE.part.9+0xdc>)
   108d4:	4293      	cmp	r3, r2
   108d6:	d1e2      	bne.n	1089e <_ZN9ClearCore10SerialBase8PortModeENS0_9PortModesE.part.9+0x52>
        m_dmaTxChannel = DMA_SERCOM0_SPI_TX;
   108d8:	2203      	movs	r2, #3
   108da:	f884 202f 	strb.w	r2, [r4, #47]	; 0x2f
   108de:	4a17      	ldr	r2, [pc, #92]	; (1093c <_ZN9ClearCore10SerialBase8PortModeENS0_9PortModesE.part.9+0xf0>)
   108e0:	9207      	str	r2, [sp, #28]
   108e2:	f5a2 7280 	sub.w	r2, r2, #256	; 0x100
   108e6:	9206      	str	r2, [sp, #24]
   108e8:	f44f 3200 	mov.w	r2, #131072	; 0x20000
   108ec:	9202      	str	r2, [sp, #8]
   108ee:	2231      	movs	r2, #49	; 0x31
   108f0:	9205      	str	r2, [sp, #20]
   108f2:	f44f 3280 	mov.w	r2, #65536	; 0x10000
   108f6:	9201      	str	r2, [sp, #4]
   108f8:	2230      	movs	r2, #48	; 0x30
        m_dmaRxChannel = DMA_SERCOM0_SPI_RX;
   108fa:	2002      	movs	r0, #2
        m_dmaTxChannel = DMA_SERCOM0_SPI_TX;
   108fc:	2601      	movs	r6, #1
   108fe:	f04f 092e 	mov.w	r9, #46	; 0x2e
   10902:	9204      	str	r2, [sp, #16]
   10904:	f44f 4280 	mov.w	r2, #16384	; 0x4000
        m_dmaRxChannel = DMA_SERCOM0_SPI_RX;
   10908:	f884 002e 	strb.w	r0, [r4, #46]	; 0x2e
        m_dmaTxChannel = DMA_SERCOM0_SPI_TX;
   1090c:	4637      	mov	r7, r6
        IdNvic = SERCOM0_0_IRQn;
   1090e:	f8cd 900c 	str.w	r9, [sp, #12]
        m_dmaTxChannel = DMA_SERCOM0_SPI_TX;
   10912:	f04f 0a07 	mov.w	sl, #7
   10916:	9200      	str	r2, [sp, #0]
   10918:	e02f      	b.n	1097a <_ZN9ClearCore10SerialBase8PortModeENS0_9PortModesE.part.9+0x12e>
    Flush();
   1091a:	4620      	mov	r0, r4
   1091c:	4788      	blx	r1
   1091e:	6822      	ldr	r2, [r4, #0]
   10920:	e7ad      	b.n	1087e <_ZN9ClearCore10SerialBase8PortModeENS0_9PortModesE.part.9+0x32>
   10922:	bf00      	nop
   10924:	0001020d 	.word	0x0001020d
   10928:	40003000 	.word	0x40003000
   1092c:	41012000 	.word	0x41012000
   10930:	41014000 	.word	0x41014000
   10934:	43000400 	.word	0x43000400
   10938:	43000c00 	.word	0x43000c00
   1093c:	00200500 	.word	0x00200500
   10940:	000101fd 	.word	0x000101fd
        m_dmaTxChannel = DMA_INVALID_CHANNEL;
   10944:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
   10948:	9207      	str	r2, [sp, #28]
   1094a:	9206      	str	r2, [sp, #24]
   1094c:	2220      	movs	r2, #32
   1094e:	9202      	str	r2, [sp, #8]
   10950:	2245      	movs	r2, #69	; 0x45
   10952:	9205      	str	r2, [sp, #20]
   10954:	2210      	movs	r2, #16
   10956:	9201      	str	r2, [sp, #4]
   10958:	2244      	movs	r2, #68	; 0x44
        m_dmaRxChannel = DMA_INVALID_CHANNEL;
   1095a:	2007      	movs	r0, #7
        m_dmaTxChannel = DMA_INVALID_CHANNEL;
   1095c:	2602      	movs	r6, #2
   1095e:	f04f 0942 	mov.w	r9, #66	; 0x42
   10962:	9204      	str	r2, [sp, #16]
   10964:	2204      	movs	r2, #4
        m_dmaRxChannel = DMA_INVALID_CHANNEL;
   10966:	f884 002e 	strb.w	r0, [r4, #46]	; 0x2e
        m_dmaTxChannel = DMA_INVALID_CHANNEL;
   1096a:	f884 002f 	strb.w	r0, [r4, #47]	; 0x2f
   1096e:	4637      	mov	r7, r6
        IdNvic = SERCOM5_0_IRQn;
   10970:	f8cd 900c 	str.w	r9, [sp, #12]
        m_dmaTxChannel = DMA_INVALID_CHANNEL;
   10974:	f04f 0a23 	mov.w	sl, #35	; 0x23
   10978:	9200      	str	r2, [sp, #0]
    DATA_OUTPUT_STATE(m_txMosiInfo->gpioPort,
   1097a:	6a21      	ldr	r1, [r4, #32]
   1097c:	f991 2001 	ldrsb.w	r2, [r1, #1]
   10980:	f891 b002 	ldrb.w	fp, [r1, #2]
   10984:	01d2      	lsls	r2, r2, #7
   10986:	f102 4282 	add.w	r2, r2, #1090519040	; 0x41000000
   1098a:	f502 4200 	add.w	r2, r2, #32768	; 0x8000
   1098e:	f04f 0e01 	mov.w	lr, #1
   10992:	fa0e fc0b 	lsl.w	ip, lr, fp
   10996:	f8c2 c018 	str.w	ip, [r2, #24]
    DATA_DIRECTION_OUTPUT(m_txMosiInfo->gpioPort, 1L << m_txMosiInfo->gpioPin);
   1099a:	f8c2 c008 	str.w	ip, [r2, #8]
    switch (m_portMode) {
   1099e:	f894 c007 	ldrb.w	ip, [r4, #7]
   109a2:	45f4      	cmp	ip, lr
   109a4:	f040 819d 	bne.w	10ce2 <_ZN9ClearCore10SerialBase8PortModeENS0_9PortModesE.part.9+0x496>
  NVIC->ICER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
   109a8:	4dc4      	ldr	r5, [pc, #784]	; (10cbc <_ZN9ClearCore10SerialBase8PortModeENS0_9PortModesE.part.9+0x470>)
            SET_CLOCK_SOURCE(clockId, __SERCOM_SPI_CLOCK_INDEX);
   109aa:	4ac5      	ldr	r2, [pc, #788]	; (10cc0 <_ZN9ClearCore10SerialBase8PortModeENS0_9PortModesE.part.9+0x474>)
   109ac:	f107 0e20 	add.w	lr, r7, #32
   109b0:	3620      	adds	r6, #32
   109b2:	9f00      	ldr	r7, [sp, #0]
   109b4:	f845 702e 	str.w	r7, [r5, lr, lsl #2]
   109b8:	9f01      	ldr	r7, [sp, #4]
   109ba:	f845 7026 	str.w	r7, [r5, r6, lsl #2]
   109be:	9f02      	ldr	r7, [sp, #8]
   109c0:	f845 7026 	str.w	r7, [r5, r6, lsl #2]
   109c4:	f10a 0e20 	add.w	lr, sl, #32
   109c8:	f852 502e 	ldr.w	r5, [r2, lr, lsl #2]
   109cc:	f36f 1586 	bfc	r5, #6, #1
   109d0:	f842 502e 	str.w	r5, [r2, lr, lsl #2]
   109d4:	f852 502e 	ldr.w	r5, [r2, lr, lsl #2]
   109d8:	066d      	lsls	r5, r5, #25
   109da:	d4fb      	bmi.n	109d4 <_ZN9ClearCore10SerialBase8PortModeENS0_9PortModesE.part.9+0x188>
   109dc:	f852 502e 	ldr.w	r5, [r2, lr, lsl #2]
   109e0:	4eb7      	ldr	r6, [pc, #732]	; (10cc0 <_ZN9ClearCore10SerialBase8PortModeENS0_9PortModesE.part.9+0x474>)
   109e2:	f04f 0c07 	mov.w	ip, #7
   109e6:	f36c 0503 	bfi	r5, ip, #0, #4
   109ea:	f842 502e 	str.w	r5, [r2, lr, lsl #2]
   109ee:	f852 502e 	ldr.w	r5, [r2, lr, lsl #2]
   109f2:	f045 0540 	orr.w	r5, r5, #64	; 0x40
   109f6:	f842 502e 	str.w	r5, [r2, lr, lsl #2]
   109fa:	6875      	ldr	r5, [r6, #4]
   109fc:	f015 051c 	ands.w	r5, r5, #28
   10a00:	d1fb      	bne.n	109fa <_ZN9ClearCore10SerialBase8PortModeENS0_9PortModesE.part.9+0x1ae>
            m_serPort->SPI.CTRLA.bit.MODE = 0x3;
   10a02:	681a      	ldr	r2, [r3, #0]
   10a04:	2603      	movs	r6, #3
   10a06:	f366 0284 	bfi	r2, r6, #2, #3
   10a0a:	601a      	str	r2, [r3, #0]
            m_serPort->SPI.CTRLA.bit.CPOL = m_polarity;
   10a0c:	681a      	ldr	r2, [r3, #0]
   10a0e:	7a26      	ldrb	r6, [r4, #8]
   10a10:	f366 725d 	bfi	r2, r6, #29, #1
   10a14:	601a      	str	r2, [r3, #0]
            m_serPort->SPI.CTRLA.bit.CPHA = m_phase;
   10a16:	681a      	ldr	r2, [r3, #0]
   10a18:	7a66      	ldrb	r6, [r4, #9]
   10a1a:	f366 721c 	bfi	r2, r6, #28, #1
   10a1e:	601a      	str	r2, [r3, #0]
            m_serPort->SPI.CTRLA.bit.FORM = 0;
   10a20:	681a      	ldr	r2, [r3, #0]
   10a22:	f365 621b 	bfi	r2, r5, #24, #4
   10a26:	601a      	str	r2, [r3, #0]
            m_serPort->SPI.CTRLA.bit.DIPO = m_ctsMisoInfo->sercomPadNum;
   10a28:	6962      	ldr	r2, [r4, #20]
   10a2a:	681e      	ldr	r6, [r3, #0]
   10a2c:	7a52      	ldrb	r2, [r2, #9]
   10a2e:	f362 5615 	bfi	r6, r2, #20, #2
   10a32:	601e      	str	r6, [r3, #0]
            m_serPort->SPI.CTRLA.bit.DOPO = m_txMosiInfo->sercomPadNum ? 2 : 0;
   10a34:	7a49      	ldrb	r1, [r1, #9]
   10a36:	681a      	ldr	r2, [r3, #0]
   10a38:	2900      	cmp	r1, #0
   10a3a:	bf0c      	ite	eq
   10a3c:	2100      	moveq	r1, #0
   10a3e:	2102      	movne	r1, #2
   10a40:	f361 4211 	bfi	r2, r1, #16, #2
   10a44:	601a      	str	r2, [r3, #0]
            m_serPort->SPI.CTRLB.bit.CHSIZE = m_charSize &
   10a46:	685a      	ldr	r2, [r3, #4]
   10a48:	79a1      	ldrb	r1, [r4, #6]
   10a4a:	f361 0202 	bfi	r2, r1, #0, #3
   10a4e:	605a      	str	r2, [r3, #4]
            m_serPort->SPI.CTRLA.bit.DORD = 0;
   10a50:	681a      	ldr	r2, [r3, #0]
   10a52:	f365 729e 	bfi	r2, r5, #30, #1
   10a56:	601a      	str	r2, [r3, #0]
            m_serPort->SPI.CTRLA.bit.IBON = 1;
   10a58:	681a      	ldr	r2, [r3, #0]
   10a5a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
   10a5e:	601a      	str	r2, [r3, #0]
            m_serPort->SPI.CTRLB.bit.MSSEN = 1;
   10a60:	685a      	ldr	r2, [r3, #4]
   10a62:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
   10a66:	605a      	str	r2, [r3, #4]
            m_serPort->SPI.CTRLB.bit.RXEN = 1;
   10a68:	685a      	ldr	r2, [r3, #4]
   10a6a:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
   10a6e:	605a      	str	r2, [r3, #4]
            PMUX_SELECTION(m_rtsSsInfo->gpioPort, m_rtsSsInfo->gpioPin,
   10a70:	69a3      	ldr	r3, [r4, #24]
   10a72:	f894 6028 	ldrb.w	r6, [r4, #40]	; 0x28
   10a76:	789a      	ldrb	r2, [r3, #2]
   10a78:	f993 3001 	ldrsb.w	r3, [r3, #1]
   10a7c:	01db      	lsls	r3, r3, #7
   10a7e:	f103 4182 	add.w	r1, r3, #1090519040	; 0x41000000
   10a82:	f501 4100 	add.w	r1, r1, #32768	; 0x8000
   10a86:	eb01 0152 	add.w	r1, r1, r2, lsr #1
   10a8a:	07d7      	lsls	r7, r2, #31
   10a8c:	f891 5030 	ldrb.w	r5, [r1, #48]	; 0x30
   10a90:	bf4c      	ite	mi
   10a92:	f366 1507 	bfimi	r5, r6, #4, #4
   10a96:	f366 0503 	bfipl	r5, r6, #0, #4
   10a9a:	f881 5030 	strb.w	r5, [r1, #48]	; 0x30
            SpiSsMode(m_ssMode);
   10a9e:	7aa1      	ldrb	r1, [r4, #10]
    switch (mode) {
   10aa0:	2901      	cmp	r1, #1
   10aa2:	f240 822f 	bls.w	10f04 <_ZN9ClearCore10SerialBase8PortModeENS0_9PortModesE.part.9+0x6b8>
   10aa6:	2902      	cmp	r1, #2
   10aa8:	d10a      	bne.n	10ac0 <_ZN9ClearCore10SerialBase8PortModeENS0_9PortModesE.part.9+0x274>
            PMUX_ENABLE(m_rtsSsInfo->gpioPort, m_rtsSsInfo->gpioPin);
   10aaa:	f103 4382 	add.w	r3, r3, #1090519040	; 0x41000000
   10aae:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
   10ab2:	4413      	add	r3, r2
   10ab4:	f893 2040 	ldrb.w	r2, [r3, #64]	; 0x40
   10ab8:	f042 0201 	orr.w	r2, r2, #1
   10abc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
            if (m_dmaRxChannel != DMA_INVALID_CHANNEL &&
   10ac0:	2807      	cmp	r0, #7
   10ac2:	d031      	beq.n	10b28 <_ZN9ClearCore10SerialBase8PortModeENS0_9PortModesE.part.9+0x2dc>
   10ac4:	f894 302f 	ldrb.w	r3, [r4, #47]	; 0x2f
   10ac8:	2b07      	cmp	r3, #7
   10aca:	d02d      	beq.n	10b28 <_ZN9ClearCore10SerialBase8PortModeENS0_9PortModesE.part.9+0x2dc>
                channel = DmaManager::Channel(m_dmaRxChannel);
   10acc:	f7f4 fc38 	bl	5340 <_ZN9ClearCore10DmaManager7ChannelENS_11DmaChannelsE>
                channel->CHCTRLA.reg &= ~DMAC_CHCTRLA_ENABLE;
   10ad0:	6803      	ldr	r3, [r0, #0]
                channel->CHCTRLA.reg = DMAC_CHCTRLA_SWRST;
   10ad2:	2201      	movs	r2, #1
                channel->CHCTRLA.reg &= ~DMAC_CHCTRLA_ENABLE;
   10ad4:	f023 0302 	bic.w	r3, r3, #2
   10ad8:	6003      	str	r3, [r0, #0]
                channel->CHCTRLA.reg = DMAC_CHCTRLA_SWRST;
   10ada:	6002      	str	r2, [r0, #0]
                while (channel->CHCTRLA.reg == DMAC_CHCTRLA_SWRST) {
   10adc:	6803      	ldr	r3, [r0, #0]
   10ade:	2b01      	cmp	r3, #1
   10ae0:	d0fc      	beq.n	10adc <_ZN9ClearCore10SerialBase8PortModeENS0_9PortModesE.part.9+0x290>
                channel->CHCTRLA.reg = DMAC_CHCTRLA_TRIGSRC(dmaRxTrigger) |
   10ae2:	9b06      	ldr	r3, [sp, #24]
   10ae4:	6003      	str	r3, [r0, #0]
                baseDesc = DmaManager::BaseDescriptor(m_dmaRxChannel);
   10ae6:	f894 002e 	ldrb.w	r0, [r4, #46]	; 0x2e
   10aea:	f7f4 fc33 	bl	5354 <_ZN9ClearCore10DmaManager14BaseDescriptorENS_11DmaChannelsE>
                baseDesc->DESCADDR.reg = static_cast<uint32_t>(0);
   10aee:	2300      	movs	r3, #0
   10af0:	60c3      	str	r3, [r0, #12]
                baseDesc->SRCADDR.reg = (uint32_t)&m_serPort->SPI.DATA.reg;
   10af2:	6923      	ldr	r3, [r4, #16]
   10af4:	3328      	adds	r3, #40	; 0x28
   10af6:	6043      	str	r3, [r0, #4]
                channel = DmaManager::Channel(m_dmaTxChannel);
   10af8:	f894 002f 	ldrb.w	r0, [r4, #47]	; 0x2f
   10afc:	f7f4 fc20 	bl	5340 <_ZN9ClearCore10DmaManager7ChannelENS_11DmaChannelsE>
                channel->CHCTRLA.reg &= ~DMAC_CHCTRLA_ENABLE;
   10b00:	6803      	ldr	r3, [r0, #0]
                channel->CHCTRLA.reg = DMAC_CHCTRLA_SWRST;
   10b02:	2201      	movs	r2, #1
                channel->CHCTRLA.reg &= ~DMAC_CHCTRLA_ENABLE;
   10b04:	f023 0302 	bic.w	r3, r3, #2
   10b08:	6003      	str	r3, [r0, #0]
                channel->CHCTRLA.reg = DMAC_CHCTRLA_SWRST;
   10b0a:	6002      	str	r2, [r0, #0]
                while (channel->CHCTRLA.reg == DMAC_CHCTRLA_SWRST) {
   10b0c:	6803      	ldr	r3, [r0, #0]
   10b0e:	2b01      	cmp	r3, #1
   10b10:	d0fc      	beq.n	10b0c <_ZN9ClearCore10SerialBase8PortModeENS0_9PortModesE.part.9+0x2c0>
                channel->CHCTRLA.reg = DMAC_CHCTRLA_TRIGSRC(dmaTxTrigger) |
   10b12:	9b07      	ldr	r3, [sp, #28]
   10b14:	6003      	str	r3, [r0, #0]
                baseDesc = DmaManager::BaseDescriptor(m_dmaTxChannel);
   10b16:	f894 002f 	ldrb.w	r0, [r4, #47]	; 0x2f
   10b1a:	f7f4 fc1b 	bl	5354 <_ZN9ClearCore10DmaManager14BaseDescriptorENS_11DmaChannelsE>
                baseDesc->DESCADDR.reg = static_cast<uint32_t>(0);
   10b1e:	2300      	movs	r3, #0
   10b20:	60c3      	str	r3, [r0, #12]
                baseDesc->DSTADDR.reg = (uint32_t)&m_serPort->SPI.DATA.reg;
   10b22:	6923      	ldr	r3, [r4, #16]
   10b24:	3328      	adds	r3, #40	; 0x28
   10b26:	6083      	str	r3, [r0, #8]
    Speed(m_baudRate);
   10b28:	6820      	ldr	r0, [r4, #0]
   10b2a:	4a66      	ldr	r2, [pc, #408]	; (10cc4 <_ZN9ClearCore10SerialBase8PortModeENS0_9PortModesE.part.9+0x478>)
   10b2c:	6903      	ldr	r3, [r0, #16]
   10b2e:	f8d4 9024 	ldr.w	r9, [r4, #36]	; 0x24
   10b32:	4293      	cmp	r3, r2
   10b34:	f040 81bd 	bne.w	10eb2 <_ZN9ClearCore10SerialBase8PortModeENS0_9PortModesE.part.9+0x666>
    PMUX_DISABLE(m_txMosiInfo->gpioPort, m_txMosiInfo->gpioPin);
   10b38:	6a21      	ldr	r1, [r4, #32]
    bool sercomEnabled = m_serPort->USART.CTRLA.bit.ENABLE;
   10b3a:	6922      	ldr	r2, [r4, #16]
    PMUX_DISABLE(m_txMosiInfo->gpioPort, m_txMosiInfo->gpioPin);
   10b3c:	f991 5001 	ldrsb.w	r5, [r1, #1]
   10b40:	788b      	ldrb	r3, [r1, #2]
    bool sercomEnabled = m_serPort->USART.CTRLA.bit.ENABLE;
   10b42:	6816      	ldr	r6, [r2, #0]
    PMUX_DISABLE(m_txMosiInfo->gpioPort, m_txMosiInfo->gpioPin);
   10b44:	eb03 13c5 	add.w	r3, r3, r5, lsl #7
   10b48:	f103 4382 	add.w	r3, r3, #1090519040	; 0x41000000
   10b4c:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
    bool sercomEnabled = m_serPort->USART.CTRLA.bit.ENABLE;
   10b50:	f3c6 0640 	ubfx	r6, r6, #1, #1
    PMUX_DISABLE(m_txMosiInfo->gpioPort, m_txMosiInfo->gpioPin);
   10b54:	f893 1040 	ldrb.w	r1, [r3, #64]	; 0x40
   10b58:	f36f 0100 	bfc	r1, #0, #1
   10b5c:	f883 1040 	strb.w	r1, [r3, #64]	; 0x40
    if (m_serPort->USART.CTRLA.bit.ENABLE) {
   10b60:	6813      	ldr	r3, [r2, #0]
   10b62:	0799      	lsls	r1, r3, #30
   10b64:	d503      	bpl.n	10b6e <_ZN9ClearCore10SerialBase8PortModeENS0_9PortModesE.part.9+0x322>
        m_serPort->USART.CTRLA.bit.ENABLE = 0;
   10b66:	6813      	ldr	r3, [r2, #0]
   10b68:	f36f 0341 	bfc	r3, #1, #1
   10b6c:	6013      	str	r3, [r2, #0]
    SYNCBUSY_WAIT(usart, SERCOM_USART_SYNCBUSY_ENABLE);
   10b6e:	69d3      	ldr	r3, [r2, #28]
   10b70:	f013 0302 	ands.w	r3, r3, #2
   10b74:	d1fb      	bne.n	10b6e <_ZN9ClearCore10SerialBase8PortModeENS0_9PortModesE.part.9+0x322>
    Flush();
   10b76:	6802      	ldr	r2, [r0, #0]
   10b78:	4542      	cmp	r2, r8
   10b7a:	f040 8211 	bne.w	10fa0 <_ZN9ClearCore10SerialBase8PortModeENS0_9PortModesE.part.9+0x754>
    m_outTail = 0;
   10b7e:	f8c4 313c 	str.w	r3, [r4, #316]	; 0x13c
    m_bufferOut[0] = 0;
   10b82:	f8a4 30b0 	strh.w	r3, [r4, #176]	; 0xb0
    m_outHead = 0;
   10b86:	f8c4 3138 	str.w	r3, [r4, #312]	; 0x138
    FlushInput();
   10b8a:	6843      	ldr	r3, [r0, #4]
   10b8c:	4a4e      	ldr	r2, [pc, #312]	; (10cc8 <_ZN9ClearCore10SerialBase8PortModeENS0_9PortModesE.part.9+0x47c>)
   10b8e:	4293      	cmp	r3, r2
   10b90:	f040 8202 	bne.w	10f98 <_ZN9ClearCore10SerialBase8PortModeENS0_9PortModesE.part.9+0x74c>
    m_serPort->USART.INTENSET.reg = SERCOM_USART_INTENSET_RXC;
   10b94:	6925      	ldr	r5, [r4, #16]
    m_bufferIn[0] = 0;
   10b96:	2300      	movs	r3, #0
    m_serPort->USART.INTENSET.reg = SERCOM_USART_INTENSET_RXC;
   10b98:	2204      	movs	r2, #4
    m_inTail = 0;
   10b9a:	f8c4 3134 	str.w	r3, [r4, #308]	; 0x134
    m_bufferIn[0] = 0;
   10b9e:	8623      	strh	r3, [r4, #48]	; 0x30
    m_inHead = 0;
   10ba0:	f8c4 3130 	str.w	r3, [r4, #304]	; 0x130
    m_serPort->USART.INTENSET.reg = SERCOM_USART_INTENSET_RXC;
   10ba4:	75aa      	strb	r2, [r5, #22]
    switch (m_portMode) {
   10ba6:	79e3      	ldrb	r3, [r4, #7]
   10ba8:	2b01      	cmp	r3, #1
   10baa:	f040 8150 	bne.w	10e4e <_ZN9ClearCore10SerialBase8PortModeENS0_9PortModesE.part.9+0x602>
            baudVal = ((__SERCOM_SPI_CLOCK / 2 + (bitsPerSecond - 1)) /
   10bae:	4b47      	ldr	r3, [pc, #284]	; (10ccc <_ZN9ClearCore10SerialBase8PortModeENS0_9PortModesE.part.9+0x480>)
   10bb0:	444b      	add	r3, r9
   10bb2:	fbb3 f3f9 	udiv	r3, r3, r9
   10bb6:	3b01      	subs	r3, #1
            m_serPort->SPI.BAUD.bit.BAUD = static_cast<uint8_t>(baudVal);
   10bb8:	2bff      	cmp	r3, #255	; 0xff
   10bba:	bf28      	it	cs
   10bbc:	23ff      	movcs	r3, #255	; 0xff
   10bbe:	b2db      	uxtb	r3, r3
   10bc0:	732b      	strb	r3, [r5, #12]
    if (sercomEnabled) {
   10bc2:	2e00      	cmp	r6, #0
   10bc4:	f000 816f 	beq.w	10ea6 <_ZN9ClearCore10SerialBase8PortModeENS0_9PortModesE.part.9+0x65a>
    m_serPort->USART.CTRLA.bit.ENABLE = 1;
   10bc8:	682b      	ldr	r3, [r5, #0]
   10bca:	f043 0302 	orr.w	r3, r3, #2
   10bce:	602b      	str	r3, [r5, #0]
    SYNCBUSY_WAIT(usart, SERCOM_USART_SYNCBUSY_ENABLE);
   10bd0:	69eb      	ldr	r3, [r5, #28]
   10bd2:	079b      	lsls	r3, r3, #30
   10bd4:	d4fc      	bmi.n	10bd0 <_ZN9ClearCore10SerialBase8PortModeENS0_9PortModesE.part.9+0x384>
        PMUX_ENABLE(m_txMosiInfo->gpioPort, m_txMosiInfo->gpioPin);
   10bd6:	6a22      	ldr	r2, [r4, #32]
   10bd8:	f992 3001 	ldrsb.w	r3, [r2, #1]
   10bdc:	7890      	ldrb	r0, [r2, #2]
   10bde:	01db      	lsls	r3, r3, #7
   10be0:	f103 4282 	add.w	r2, r3, #1090519040	; 0x41000000
   10be4:	f502 4200 	add.w	r2, r2, #32768	; 0x8000
   10be8:	4402      	add	r2, r0
   10bea:	f892 1040 	ldrb.w	r1, [r2, #64]	; 0x40
   10bee:	f041 0101 	orr.w	r1, r1, #1
   10bf2:	f882 1040 	strb.w	r1, [r2, #64]	; 0x40
    DATA_DIRECTION_OUTPUT(m_rtsSsInfo->gpioPort, 1L << m_rtsSsInfo->gpioPin);
   10bf6:	69a6      	ldr	r6, [r4, #24]
   10bf8:	4a35      	ldr	r2, [pc, #212]	; (10cd0 <_ZN9ClearCore10SerialBase8PortModeENS0_9PortModesE.part.9+0x484>)
   10bfa:	f996 1001 	ldrsb.w	r1, [r6, #1]
   10bfe:	78b7      	ldrb	r7, [r6, #2]
   10c00:	eb02 11c1 	add.w	r1, r2, r1, lsl #7
   10c04:	2601      	movs	r6, #1
   10c06:	40be      	lsls	r6, r7
   10c08:	608e      	str	r6, [r1, #8]
    PMUX_SELECTION(m_ctsMisoInfo->gpioPort, m_ctsMisoInfo->gpioPin,
   10c0a:	6961      	ldr	r1, [r4, #20]
   10c0c:	f894 6028 	ldrb.w	r6, [r4, #40]	; 0x28
   10c10:	f891 c002 	ldrb.w	ip, [r1, #2]
   10c14:	f991 e001 	ldrsb.w	lr, [r1, #1]
   10c18:	f01c 0f01 	tst.w	ip, #1
   10c1c:	ea4f 1ece 	mov.w	lr, lr, lsl #7
   10c20:	f000 8108 	beq.w	10e34 <_ZN9ClearCore10SerialBase8PortModeENS0_9PortModesE.part.9+0x5e8>
   10c24:	4472      	add	r2, lr
   10c26:	eb02 025c 	add.w	r2, r2, ip, lsr #1
   10c2a:	f006 060f 	and.w	r6, r6, #15
   10c2e:	f892 1030 	ldrb.w	r1, [r2, #48]	; 0x30
   10c32:	f366 1107 	bfi	r1, r6, #4, #4
   10c36:	f882 1030 	strb.w	r1, [r2, #48]	; 0x30
    PIN_CONFIGURATION(m_ctsMisoInfo->gpioPort, m_ctsMisoInfo->gpioPin,
   10c3a:	4925      	ldr	r1, [pc, #148]	; (10cd0 <_ZN9ClearCore10SerialBase8PortModeENS0_9PortModesE.part.9+0x484>)
   10c3c:	eb01 020e 	add.w	r2, r1, lr
   10c40:	eb02 0e0c 	add.w	lr, r2, ip
    DATA_DIRECTION_INPUT(m_ctsMisoInfo->gpioPort, 1L << m_ctsMisoInfo->gpioPin);
   10c44:	2701      	movs	r7, #1
   10c46:	fa07 f70c 	lsl.w	r7, r7, ip
    PIN_CONFIGURATION(m_ctsMisoInfo->gpioPort, m_ctsMisoInfo->gpioPin,
   10c4a:	f04f 0803 	mov.w	r8, #3
   10c4e:	f88e 8040 	strb.w	r8, [lr, #64]	; 0x40
    DATA_DIRECTION_INPUT(m_ctsMisoInfo->gpioPort, 1L << m_ctsMisoInfo->gpioPin);
   10c52:	6057      	str	r7, [r2, #4]
    PMUX_SELECTION(m_rxSckInfo->gpioPort, m_rxSckInfo->gpioPin,
   10c54:	69e2      	ldr	r2, [r4, #28]
   10c56:	7894      	ldrb	r4, [r2, #2]
   10c58:	f992 2001 	ldrsb.w	r2, [r2, #1]
   10c5c:	01d2      	lsls	r2, r2, #7
   10c5e:	4411      	add	r1, r2
   10c60:	eb01 0154 	add.w	r1, r1, r4, lsr #1
   10c64:	f014 0f01 	tst.w	r4, #1
   10c68:	f891 7030 	ldrb.w	r7, [r1, #48]	; 0x30
   10c6c:	bf14      	ite	ne
   10c6e:	f366 1707 	bfine	r7, r6, #4, #4
   10c72:	f366 0703 	bfieq	r7, r6, #0, #4
   10c76:	f881 7030 	strb.w	r7, [r1, #48]	; 0x30
    PIN_CONFIGURATION(m_rxSckInfo->gpioPort, m_rxSckInfo->gpioPin,
   10c7a:	4915      	ldr	r1, [pc, #84]	; (10cd0 <_ZN9ClearCore10SerialBase8PortModeENS0_9PortModesE.part.9+0x484>)
   10c7c:	440a      	add	r2, r1
   10c7e:	4422      	add	r2, r4
    PMUX_SELECTION(m_txMosiInfo->gpioPort, m_txMosiInfo->gpioPin,
   10c80:	4419      	add	r1, r3
    PIN_CONFIGURATION(m_rxSckInfo->gpioPort, m_rxSckInfo->gpioPin,
   10c82:	2401      	movs	r4, #1
    PMUX_SELECTION(m_txMosiInfo->gpioPort, m_txMosiInfo->gpioPin,
   10c84:	eb01 0150 	add.w	r1, r1, r0, lsr #1
    PIN_CONFIGURATION(m_rxSckInfo->gpioPort, m_rxSckInfo->gpioPin,
   10c88:	f882 4040 	strb.w	r4, [r2, #64]	; 0x40
    PMUX_SELECTION(m_txMosiInfo->gpioPort, m_txMosiInfo->gpioPin,
   10c8c:	f891 2030 	ldrb.w	r2, [r1, #48]	; 0x30
    PIN_CONFIGURATION(m_txMosiInfo->gpioPort, m_txMosiInfo->gpioPin,
   10c90:	f103 4382 	add.w	r3, r3, #1090519040	; 0x41000000
    PMUX_SELECTION(m_txMosiInfo->gpioPort, m_txMosiInfo->gpioPin,
   10c94:	07c4      	lsls	r4, r0, #31
    PIN_CONFIGURATION(m_txMosiInfo->gpioPort, m_txMosiInfo->gpioPin,
   10c96:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
    PMUX_SELECTION(m_txMosiInfo->gpioPort, m_txMosiInfo->gpioPin,
   10c9a:	bf4c      	ite	mi
   10c9c:	f366 1207 	bfimi	r2, r6, #4, #4
   10ca0:	f366 0203 	bfipl	r2, r6, #0, #4
    PIN_CONFIGURATION(m_txMosiInfo->gpioPort, m_txMosiInfo->gpioPin,
   10ca4:	4403      	add	r3, r0
    PMUX_SELECTION(m_txMosiInfo->gpioPort, m_txMosiInfo->gpioPin,
   10ca6:	f881 2030 	strb.w	r2, [r1, #48]	; 0x30
    PIN_CONFIGURATION(m_txMosiInfo->gpioPort, m_txMosiInfo->gpioPin,
   10caa:	2201      	movs	r2, #1
   10cac:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    m_serPort->USART.CTRLA.bit.ENABLE = 1;
   10cb0:	682b      	ldr	r3, [r5, #0]
   10cb2:	f043 0302 	orr.w	r3, r3, #2
   10cb6:	602b      	str	r3, [r5, #0]
   10cb8:	e00c      	b.n	10cd4 <_ZN9ClearCore10SerialBase8PortModeENS0_9PortModesE.part.9+0x488>
   10cba:	bf00      	nop
   10cbc:	e000e100 	.word	0xe000e100
   10cc0:	40001c00 	.word	0x40001c00
   10cc4:	00010331 	.word	0x00010331
   10cc8:	0001020d 	.word	0x0001020d
   10ccc:	004c4b3f 	.word	0x004c4b3f
   10cd0:	41008000 	.word	0x41008000
    SYNCBUSY_WAIT(usart, SERCOM_USART_SYNCBUSY_ENABLE);
   10cd4:	69eb      	ldr	r3, [r5, #28]
   10cd6:	079b      	lsls	r3, r3, #30
   10cd8:	d4fc      	bmi.n	10cd4 <_ZN9ClearCore10SerialBase8PortModeENS0_9PortModesE.part.9+0x488>
    return true;
   10cda:	2001      	movs	r0, #1
}
   10cdc:	b009      	add	sp, #36	; 0x24
   10cde:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
            usart->CTRLA.bit.MODE = 1;
   10ce2:	6829      	ldr	r1, [r5, #0]
   10ce4:	f36e 0184 	bfi	r1, lr, #2, #3
   10ce8:	6029      	str	r1, [r5, #0]
            usart->CTRLA.bit.SAMPR = 0;
   10cea:	6829      	ldr	r1, [r5, #0]
   10cec:	f36f 314f 	bfc	r1, #13, #3
   10cf0:	6029      	str	r1, [r5, #0]
            usart->CTRLA.bit.CMODE = 0;
   10cf2:	6829      	ldr	r1, [r5, #0]
   10cf4:	f36f 711c 	bfc	r1, #28, #1
   10cf8:	6029      	str	r1, [r5, #0]
            usart->CTRLA.bit.RXPO = 1;
   10cfa:	6829      	ldr	r1, [r5, #0]
   10cfc:	f36e 5115 	bfi	r1, lr, #20, #2
   10d00:	6029      	str	r1, [r5, #0]
    if (m_portMode == UART && m_portOpen) {
   10d02:	f1bc 0f00 	cmp.w	ip, #0
   10d06:	d104      	bne.n	10d12 <_ZN9ClearCore10SerialBase8PortModeENS0_9PortModesE.part.9+0x4c6>
   10d08:	f894 1029 	ldrb.w	r1, [r4, #41]	; 0x29
   10d0c:	2900      	cmp	r1, #0
   10d0e:	f040 81af 	bne.w	11070 <_ZN9ClearCore10SerialBase8PortModeENS0_9PortModesE.part.9+0x824>
            usart->CTRLB.bit.CHSIZE =
   10d12:	686b      	ldr	r3, [r5, #4]
                m_charSize & SERCOM_USART_CTRLB_CHSIZE_Msk;
   10d14:	79a2      	ldrb	r2, [r4, #6]
            usart->CTRLB.bit.CHSIZE =
   10d16:	f362 0302 	bfi	r3, r2, #0, #3
   10d1a:	606b      	str	r3, [r5, #4]
            usart->CTRLA.bit.DORD = 1;
   10d1c:	682b      	ldr	r3, [r5, #0]
   10d1e:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
   10d22:	602b      	str	r3, [r5, #0]
            if (m_parity != PARITY_N) {
   10d24:	7923      	ldrb	r3, [r4, #4]
   10d26:	2b02      	cmp	r3, #2
   10d28:	f000 817c 	beq.w	11024 <_ZN9ClearCore10SerialBase8PortModeENS0_9PortModesE.part.9+0x7d8>
                usart->CTRLA.bit.FORM = 1;
   10d2c:	682a      	ldr	r2, [r5, #0]
   10d2e:	2101      	movs	r1, #1
   10d30:	f361 621b 	bfi	r2, r1, #24, #4
   10d34:	602a      	str	r2, [r5, #0]
                usart->CTRLB.bit.PMODE = m_parity;
   10d36:	686a      	ldr	r2, [r5, #4]
   10d38:	f363 324d 	bfi	r2, r3, #13, #1
   10d3c:	606a      	str	r2, [r5, #4]
            usart->CTRLB.bit.SBMODE = m_stopBits - 1;
   10d3e:	7963      	ldrb	r3, [r4, #5]
   10d40:	686a      	ldr	r2, [r5, #4]
   10d42:	3b01      	subs	r3, #1
   10d44:	f363 1286 	bfi	r2, r3, #6, #1
   10d48:	606a      	str	r2, [r5, #4]
            usart->CTRLB.bit.RXEN = 1;
   10d4a:	686b      	ldr	r3, [r5, #4]
   10d4c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
   10d50:	606b      	str	r3, [r5, #4]
            usart->CTRLB.bit.TXEN = 1;
   10d52:	686b      	ldr	r3, [r5, #4]
   10d54:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
   10d58:	606b      	str	r3, [r5, #4]
            usart->CTRLB.bit.SFDE = 0;
   10d5a:	686b      	ldr	r3, [r5, #4]
            usart->INTENSET.reg =
   10d5c:	2284      	movs	r2, #132	; 0x84
            usart->CTRLB.bit.SFDE = 0;
   10d5e:	f36f 2349 	bfc	r3, #9, #1
   10d62:	606b      	str	r3, [r5, #4]
            usart->INTENSET.reg =
   10d64:	75aa      	strb	r2, [r5, #22]
            SYNCBUSY_WAIT(usart, SERCOM_USART_SYNCBUSY_CTRLB);
   10d66:	69eb      	ldr	r3, [r5, #28]
   10d68:	075b      	lsls	r3, r3, #29
   10d6a:	d4fc      	bmi.n	10d66 <_ZN9ClearCore10SerialBase8PortModeENS0_9PortModesE.part.9+0x51a>
            m_dreIrqN = (IRQn_Type)(IdNvic + SERCOM_USART_INTFLAG_DRE_Pos);
   10d6c:	f8bd 200c 	ldrh.w	r2, [sp, #12]
   10d70:	85a2      	strh	r2, [r4, #44]	; 0x2c
  NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
   10d72:	4bb7      	ldr	r3, [pc, #732]	; (11050 <_ZN9ClearCore10SerialBase8PortModeENS0_9PortModesE.part.9+0x804>)
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   10d74:	9a04      	ldr	r2, [sp, #16]
   10d76:	441a      	add	r2, r3
   10d78:	4610      	mov	r0, r2
   10d7a:	9a05      	ldr	r2, [sp, #20]
   10d7c:	eb03 0109 	add.w	r1, r3, r9
   10d80:	441a      	add	r2, r3
  NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
   10d82:	46be      	mov	lr, r7
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   10d84:	4615      	mov	r5, r2
  NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
   10d86:	9f00      	ldr	r7, [sp, #0]
   10d88:	f843 702e 	str.w	r7, [r3, lr, lsl #2]
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   10d8c:	2220      	movs	r2, #32
   10d8e:	f881 2300 	strb.w	r2, [r1, #768]	; 0x300
  NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
   10d92:	9901      	ldr	r1, [sp, #4]
   10d94:	f843 1026 	str.w	r1, [r3, r6, lsl #2]
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   10d98:	f880 2300 	strb.w	r2, [r0, #768]	; 0x300
  NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
   10d9c:	9a02      	ldr	r2, [sp, #8]
   10d9e:	f843 2026 	str.w	r2, [r3, r6, lsl #2]
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   10da2:	f04f 0ee0 	mov.w	lr, #224	; 0xe0
   10da6:	f885 e300 	strb.w	lr, [r5, #768]	; 0x300
            PMUX_SELECTION(m_rtsSsInfo->gpioPort, m_rtsSsInfo->gpioPin,
   10daa:	69a3      	ldr	r3, [r4, #24]
   10dac:	f894 5028 	ldrb.w	r5, [r4, #40]	; 0x28
   10db0:	789a      	ldrb	r2, [r3, #2]
   10db2:	f993 3001 	ldrsb.w	r3, [r3, #1]
   10db6:	01db      	lsls	r3, r3, #7
   10db8:	f103 4182 	add.w	r1, r3, #1090519040	; 0x41000000
   10dbc:	f501 4100 	add.w	r1, r1, #32768	; 0x8000
   10dc0:	eb01 0152 	add.w	r1, r1, r2, lsr #1
   10dc4:	07d6      	lsls	r6, r2, #31
   10dc6:	f891 0030 	ldrb.w	r0, [r1, #48]	; 0x30
   10dca:	bf4c      	ite	mi
   10dcc:	f365 1007 	bfimi	r0, r5, #4, #4
   10dd0:	f365 0003 	bfipl	r0, r5, #0, #4
   10dd4:	f881 0030 	strb.w	r0, [r1, #48]	; 0x30
            RtsMode(m_rtsMode);
   10dd8:	7ae1      	ldrb	r1, [r4, #11]
    switch (mode) {
   10dda:	2901      	cmp	r1, #1
   10ddc:	f240 80c7 	bls.w	10f6e <_ZN9ClearCore10SerialBase8PortModeENS0_9PortModesE.part.9+0x722>
   10de0:	2902      	cmp	r1, #2
   10de2:	d10a      	bne.n	10dfa <_ZN9ClearCore10SerialBase8PortModeENS0_9PortModesE.part.9+0x5ae>
            PMUX_ENABLE(m_rtsSsInfo->gpioPort, m_rtsSsInfo->gpioPin);
   10de4:	f103 4382 	add.w	r3, r3, #1090519040	; 0x41000000
   10de8:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
   10dec:	4413      	add	r3, r2
   10dee:	f893 2040 	ldrb.w	r2, [r3, #64]	; 0x40
   10df2:	f042 0201 	orr.w	r2, r2, #1
   10df6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
            SET_CLOCK_SOURCE(clockId, __SERCOM_USART_CLOCK_INDEX);
   10dfa:	f10a 0e20 	add.w	lr, sl, #32
   10dfe:	4a95      	ldr	r2, [pc, #596]	; (11054 <_ZN9ClearCore10SerialBase8PortModeENS0_9PortModesE.part.9+0x808>)
   10e00:	f852 302e 	ldr.w	r3, [r2, lr, lsl #2]
   10e04:	f36f 1386 	bfc	r3, #6, #1
   10e08:	f842 302e 	str.w	r3, [r2, lr, lsl #2]
   10e0c:	f852 302e 	ldr.w	r3, [r2, lr, lsl #2]
   10e10:	f3c3 1380 	ubfx	r3, r3, #6, #1
   10e14:	2b00      	cmp	r3, #0
   10e16:	d1f9      	bne.n	10e0c <_ZN9ClearCore10SerialBase8PortModeENS0_9PortModesE.part.9+0x5c0>
   10e18:	f852 102e 	ldr.w	r1, [r2, lr, lsl #2]
   10e1c:	f363 0103 	bfi	r1, r3, #0, #4
   10e20:	f842 102e 	str.w	r1, [r2, lr, lsl #2]
   10e24:	f852 302e 	ldr.w	r3, [r2, lr, lsl #2]
   10e28:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   10e2c:	f842 302e 	str.w	r3, [r2, lr, lsl #2]
   10e30:	6853      	ldr	r3, [r2, #4]
   10e32:	e679      	b.n	10b28 <_ZN9ClearCore10SerialBase8PortModeENS0_9PortModesE.part.9+0x2dc>
    PMUX_SELECTION(m_ctsMisoInfo->gpioPort, m_ctsMisoInfo->gpioPin,
   10e34:	eb02 010e 	add.w	r1, r2, lr
   10e38:	eb01 015c 	add.w	r1, r1, ip, lsr #1
   10e3c:	f006 060f 	and.w	r6, r6, #15
   10e40:	f891 2030 	ldrb.w	r2, [r1, #48]	; 0x30
   10e44:	f366 0203 	bfi	r2, r6, #0, #4
   10e48:	f881 2030 	strb.w	r2, [r1, #48]	; 0x30
   10e4c:	e6f5      	b.n	10c3a <_ZN9ClearCore10SerialBase8PortModeENS0_9PortModesE.part.9+0x3ee>
                65536 * (1 - (16.0 * bitsPerSecond / __SERCOM_USART_CLOCK));
   10e4e:	4648      	mov	r0, r9
   10e50:	f00a fc6a 	bl	1b728 <__aeabi_ui2d>
   10e54:	2200      	movs	r2, #0
   10e56:	4b80      	ldr	r3, [pc, #512]	; (11058 <_ZN9ClearCore10SerialBase8PortModeENS0_9PortModesE.part.9+0x80c>)
   10e58:	f00a fcdc 	bl	1b814 <__aeabi_dmul>
   10e5c:	4b7f      	ldr	r3, [pc, #508]	; (1105c <_ZN9ClearCore10SerialBase8PortModeENS0_9PortModesE.part.9+0x810>)
   10e5e:	4680      	mov	r8, r0
   10e60:	6818      	ldr	r0, [r3, #0]
   10e62:	4689      	mov	r9, r1
   10e64:	f00a fc60 	bl	1b728 <__aeabi_ui2d>
   10e68:	4602      	mov	r2, r0
   10e6a:	460b      	mov	r3, r1
   10e6c:	4640      	mov	r0, r8
   10e6e:	4649      	mov	r1, r9
   10e70:	f00a fdfa 	bl	1ba68 <__aeabi_ddiv>
   10e74:	4602      	mov	r2, r0
   10e76:	460b      	mov	r3, r1
   10e78:	2000      	movs	r0, #0
   10e7a:	4979      	ldr	r1, [pc, #484]	; (11060 <_ZN9ClearCore10SerialBase8PortModeENS0_9PortModesE.part.9+0x814>)
   10e7c:	f00a fb16 	bl	1b4ac <__aeabi_dsub>
   10e80:	2200      	movs	r2, #0
   10e82:	4b78      	ldr	r3, [pc, #480]	; (11064 <_ZN9ClearCore10SerialBase8PortModeENS0_9PortModesE.part.9+0x818>)
   10e84:	f00a fcc6 	bl	1b814 <__aeabi_dmul>
   10e88:	f00a ffa6 	bl	1bdd8 <__aeabi_d2f>
            m_serPort->USART.BAUD.bit.BAUD = (uint16_t)(baudFloat + 0.5);
   10e8c:	f00a fc6e 	bl	1b76c <__aeabi_f2d>
   10e90:	2200      	movs	r2, #0
   10e92:	4b75      	ldr	r3, [pc, #468]	; (11068 <_ZN9ClearCore10SerialBase8PortModeENS0_9PortModesE.part.9+0x81c>)
   10e94:	f00a fb0c 	bl	1b4b0 <__adddf3>
   10e98:	f00a ff7e 	bl	1bd98 <__aeabi_d2uiz>
   10e9c:	b280      	uxth	r0, r0
   10e9e:	81a8      	strh	r0, [r5, #12]
    if (sercomEnabled) {
   10ea0:	2e00      	cmp	r6, #0
   10ea2:	f47f ae91 	bne.w	10bc8 <_ZN9ClearCore10SerialBase8PortModeENS0_9PortModesE.part.9+0x37c>
   10ea6:	6a22      	ldr	r2, [r4, #32]
   10ea8:	f992 3001 	ldrsb.w	r3, [r2, #1]
   10eac:	7890      	ldrb	r0, [r2, #2]
   10eae:	01db      	lsls	r3, r3, #7
   10eb0:	e6a1      	b.n	10bf6 <_ZN9ClearCore10SerialBase8PortModeENS0_9PortModesE.part.9+0x3aa>
    Speed(m_baudRate);
   10eb2:	4649      	mov	r1, r9
   10eb4:	4620      	mov	r0, r4
   10eb6:	4798      	blx	r3
   10eb8:	6a22      	ldr	r2, [r4, #32]
   10eba:	6925      	ldr	r5, [r4, #16]
   10ebc:	f992 3001 	ldrsb.w	r3, [r2, #1]
   10ec0:	7890      	ldrb	r0, [r2, #2]
   10ec2:	01db      	lsls	r3, r3, #7
   10ec4:	e697      	b.n	10bf6 <_ZN9ClearCore10SerialBase8PortModeENS0_9PortModesE.part.9+0x3aa>
        m_dmaTxChannel = DMA_INVALID_CHANNEL;
   10ec6:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
   10eca:	9207      	str	r2, [sp, #28]
   10ecc:	9206      	str	r2, [sp, #24]
   10ece:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
   10ed2:	9202      	str	r2, [sp, #8]
   10ed4:	2239      	movs	r2, #57	; 0x39
   10ed6:	9205      	str	r2, [sp, #20]
   10ed8:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
   10edc:	9201      	str	r2, [sp, #4]
   10ede:	2238      	movs	r2, #56	; 0x38
        m_dmaRxChannel = DMA_INVALID_CHANNEL;
   10ee0:	2007      	movs	r0, #7
        m_dmaTxChannel = DMA_INVALID_CHANNEL;
   10ee2:	2601      	movs	r6, #1
   10ee4:	f04f 0936 	mov.w	r9, #54	; 0x36
   10ee8:	9204      	str	r2, [sp, #16]
   10eea:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
        m_dmaRxChannel = DMA_INVALID_CHANNEL;
   10eee:	f884 002e 	strb.w	r0, [r4, #46]	; 0x2e
        m_dmaTxChannel = DMA_INVALID_CHANNEL;
   10ef2:	f884 002f 	strb.w	r0, [r4, #47]	; 0x2f
   10ef6:	4637      	mov	r7, r6
        IdNvic = SERCOM2_0_IRQn;
   10ef8:	f8cd 900c 	str.w	r9, [sp, #12]
        m_dmaTxChannel = DMA_INVALID_CHANNEL;
   10efc:	f04f 0a17 	mov.w	sl, #23
   10f00:	9200      	str	r2, [sp, #0]
   10f02:	e53a      	b.n	1097a <_ZN9ClearCore10SerialBase8PortModeENS0_9PortModesE.part.9+0x12e>
            DATA_OUTPUT_STATE(m_rtsSsInfo->gpioPort,
   10f04:	2900      	cmp	r1, #0
   10f06:	f040 8092 	bne.w	1102e <_ZN9ClearCore10SerialBase8PortModeENS0_9PortModesE.part.9+0x7e2>
   10f0a:	f103 4182 	add.w	r1, r3, #1090519040	; 0x41000000
   10f0e:	f501 4100 	add.w	r1, r1, #32768	; 0x8000
   10f12:	2501      	movs	r5, #1
   10f14:	4095      	lsls	r5, r2
   10f16:	618d      	str	r5, [r1, #24]
            PMUX_DISABLE(m_rtsSsInfo->gpioPort, m_rtsSsInfo->gpioPin);
   10f18:	f103 4382 	add.w	r3, r3, #1090519040	; 0x41000000
   10f1c:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
   10f20:	4413      	add	r3, r2
   10f22:	f893 2040 	ldrb.w	r2, [r3, #64]	; 0x40
   10f26:	f36f 0200 	bfc	r2, #0, #1
   10f2a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
   10f2e:	e5c7      	b.n	10ac0 <_ZN9ClearCore10SerialBase8PortModeENS0_9PortModesE.part.9+0x274>
        m_dmaTxChannel = DMA_INVALID_CHANNEL;
   10f30:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
   10f34:	9207      	str	r2, [sp, #28]
   10f36:	9206      	str	r2, [sp, #24]
   10f38:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
   10f3c:	9202      	str	r2, [sp, #8]
   10f3e:	223d      	movs	r2, #61	; 0x3d
   10f40:	9205      	str	r2, [sp, #20]
   10f42:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
   10f46:	9201      	str	r2, [sp, #4]
   10f48:	223c      	movs	r2, #60	; 0x3c
        m_dmaRxChannel = DMA_INVALID_CHANNEL;
   10f4a:	2007      	movs	r0, #7
        m_dmaTxChannel = DMA_INVALID_CHANNEL;
   10f4c:	2601      	movs	r6, #1
   10f4e:	f04f 093a 	mov.w	r9, #58	; 0x3a
   10f52:	9204      	str	r2, [sp, #16]
   10f54:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
        m_dmaRxChannel = DMA_INVALID_CHANNEL;
   10f58:	f884 002e 	strb.w	r0, [r4, #46]	; 0x2e
        m_dmaTxChannel = DMA_INVALID_CHANNEL;
   10f5c:	f884 002f 	strb.w	r0, [r4, #47]	; 0x2f
   10f60:	4637      	mov	r7, r6
        IdNvic = SERCOM3_0_IRQn;
   10f62:	f8cd 900c 	str.w	r9, [sp, #12]
        m_dmaTxChannel = DMA_INVALID_CHANNEL;
   10f66:	f04f 0a18 	mov.w	sl, #24
   10f6a:	9200      	str	r2, [sp, #0]
   10f6c:	e505      	b.n	1097a <_ZN9ClearCore10SerialBase8PortModeENS0_9PortModesE.part.9+0x12e>
            DATA_OUTPUT_STATE(m_rtsSsInfo->gpioPort,
   10f6e:	2900      	cmp	r1, #0
   10f70:	d165      	bne.n	1103e <_ZN9ClearCore10SerialBase8PortModeENS0_9PortModesE.part.9+0x7f2>
   10f72:	f103 4182 	add.w	r1, r3, #1090519040	; 0x41000000
   10f76:	f501 4100 	add.w	r1, r1, #32768	; 0x8000
   10f7a:	2001      	movs	r0, #1
   10f7c:	4090      	lsls	r0, r2
   10f7e:	6188      	str	r0, [r1, #24]
            PMUX_DISABLE(m_rtsSsInfo->gpioPort, m_rtsSsInfo->gpioPin);
   10f80:	f103 4382 	add.w	r3, r3, #1090519040	; 0x41000000
   10f84:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
   10f88:	4413      	add	r3, r2
   10f8a:	f893 2040 	ldrb.w	r2, [r3, #64]	; 0x40
   10f8e:	f36f 0200 	bfc	r2, #0, #1
   10f92:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
   10f96:	e730      	b.n	10dfa <_ZN9ClearCore10SerialBase8PortModeENS0_9PortModesE.part.9+0x5ae>
    FlushInput();
   10f98:	4620      	mov	r0, r4
   10f9a:	4798      	blx	r3
   10f9c:	6925      	ldr	r5, [r4, #16]
   10f9e:	e602      	b.n	10ba6 <_ZN9ClearCore10SerialBase8PortModeENS0_9PortModesE.part.9+0x35a>
    Flush();
   10fa0:	4620      	mov	r0, r4
   10fa2:	4790      	blx	r2
   10fa4:	6820      	ldr	r0, [r4, #0]
   10fa6:	e5f0      	b.n	10b8a <_ZN9ClearCore10SerialBase8PortModeENS0_9PortModesE.part.9+0x33e>
        m_dmaTxChannel = DMA_SERCOM7_SPI_TX;
   10fa8:	2205      	movs	r2, #5
   10faa:	f884 202f 	strb.w	r2, [r4, #47]	; 0x2f
   10fae:	f44f 5200 	mov.w	r2, #8192	; 0x2000
   10fb2:	9202      	str	r2, [sp, #8]
   10fb4:	224d      	movs	r2, #77	; 0x4d
   10fb6:	492d      	ldr	r1, [pc, #180]	; (1106c <_ZN9ClearCore10SerialBase8PortModeENS0_9PortModesE.part.9+0x820>)
   10fb8:	9205      	str	r2, [sp, #20]
   10fba:	f44f 5280 	mov.w	r2, #4096	; 0x1000
   10fbe:	9201      	str	r2, [sp, #4]
   10fc0:	224c      	movs	r2, #76	; 0x4c
        m_dmaRxChannel = DMA_SERCOM7_SPI_RX;
   10fc2:	2004      	movs	r0, #4
        m_dmaTxChannel = DMA_SERCOM7_SPI_TX;
   10fc4:	2602      	movs	r6, #2
   10fc6:	f04f 094a 	mov.w	r9, #74	; 0x4a
   10fca:	9107      	str	r1, [sp, #28]
   10fcc:	9204      	str	r2, [sp, #16]
   10fce:	f5a1 7180 	sub.w	r1, r1, #256	; 0x100
   10fd2:	f44f 6280 	mov.w	r2, #1024	; 0x400
   10fd6:	9106      	str	r1, [sp, #24]
        m_dmaRxChannel = DMA_SERCOM7_SPI_RX;
   10fd8:	f884 002e 	strb.w	r0, [r4, #46]	; 0x2e
        m_dmaTxChannel = DMA_SERCOM7_SPI_TX;
   10fdc:	4637      	mov	r7, r6
        IdNvic = SERCOM7_0_IRQn;
   10fde:	f8cd 900c 	str.w	r9, [sp, #12]
        m_dmaTxChannel = DMA_SERCOM7_SPI_TX;
   10fe2:	f04f 0a25 	mov.w	sl, #37	; 0x25
   10fe6:	9200      	str	r2, [sp, #0]
   10fe8:	e4c7      	b.n	1097a <_ZN9ClearCore10SerialBase8PortModeENS0_9PortModesE.part.9+0x12e>
        m_dmaTxChannel = DMA_INVALID_CHANNEL;
   10fea:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
   10fee:	9207      	str	r2, [sp, #28]
   10ff0:	9206      	str	r2, [sp, #24]
   10ff2:	2241      	movs	r2, #65	; 0x41
   10ff4:	9205      	str	r2, [sp, #20]
   10ff6:	2240      	movs	r2, #64	; 0x40
   10ff8:	2601      	movs	r6, #1
        m_dmaRxChannel = DMA_INVALID_CHANNEL;
   10ffa:	2007      	movs	r0, #7
        m_dmaTxChannel = DMA_INVALID_CHANNEL;
   10ffc:	2102      	movs	r1, #2
   10ffe:	f04f 093e 	mov.w	r9, #62	; 0x3e
   11002:	9204      	str	r2, [sp, #16]
   11004:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
   11008:	4637      	mov	r7, r6
   1100a:	9601      	str	r6, [sp, #4]
   1100c:	9102      	str	r1, [sp, #8]
        m_dmaRxChannel = DMA_INVALID_CHANNEL;
   1100e:	f884 002e 	strb.w	r0, [r4, #46]	; 0x2e
        m_dmaTxChannel = DMA_INVALID_CHANNEL;
   11012:	f884 002f 	strb.w	r0, [r4, #47]	; 0x2f
   11016:	460e      	mov	r6, r1
        IdNvic = SERCOM4_0_IRQn;
   11018:	f8cd 900c 	str.w	r9, [sp, #12]
        m_dmaTxChannel = DMA_INVALID_CHANNEL;
   1101c:	f04f 0a22 	mov.w	sl, #34	; 0x22
   11020:	9200      	str	r2, [sp, #0]
   11022:	e4aa      	b.n	1097a <_ZN9ClearCore10SerialBase8PortModeENS0_9PortModesE.part.9+0x12e>
                usart->CTRLA.bit.FORM = 0;
   11024:	682b      	ldr	r3, [r5, #0]
   11026:	f36f 631b 	bfc	r3, #24, #4
   1102a:	602b      	str	r3, [r5, #0]
   1102c:	e687      	b.n	10d3e <_ZN9ClearCore10SerialBase8PortModeENS0_9PortModesE.part.9+0x4f2>
            DATA_OUTPUT_STATE(m_rtsSsInfo->gpioPort,
   1102e:	f103 4182 	add.w	r1, r3, #1090519040	; 0x41000000
   11032:	f501 4100 	add.w	r1, r1, #32768	; 0x8000
   11036:	2501      	movs	r5, #1
   11038:	4095      	lsls	r5, r2
   1103a:	614d      	str	r5, [r1, #20]
   1103c:	e76c      	b.n	10f18 <_ZN9ClearCore10SerialBase8PortModeENS0_9PortModesE.part.9+0x6cc>
   1103e:	f103 4182 	add.w	r1, r3, #1090519040	; 0x41000000
   11042:	f501 4100 	add.w	r1, r1, #32768	; 0x8000
   11046:	2001      	movs	r0, #1
   11048:	4090      	lsls	r0, r2
   1104a:	6148      	str	r0, [r1, #20]
   1104c:	e798      	b.n	10f80 <_ZN9ClearCore10SerialBase8PortModeENS0_9PortModesE.part.9+0x734>
   1104e:	bf00      	nop
   11050:	e000e100 	.word	0xe000e100
   11054:	40001c00 	.word	0x40001c00
   11058:	40300000 	.word	0x40300000
   1105c:	200000e8 	.word	0x200000e8
   11060:	3ff00000 	.word	0x3ff00000
   11064:	40f00000 	.word	0x40f00000
   11068:	3fe00000 	.word	0x3fe00000
   1106c:	00201300 	.word	0x00201300
    PMUX_DISABLE(m_txMosiInfo->gpioPort, m_txMosiInfo->gpioPin);
   11070:	445a      	add	r2, fp
        bool sercomEnabled = m_serPort->USART.CTRLA.bit.ENABLE;
   11072:	6818      	ldr	r0, [r3, #0]
    PMUX_DISABLE(m_txMosiInfo->gpioPort, m_txMosiInfo->gpioPin);
   11074:	f892 1040 	ldrb.w	r1, [r2, #64]	; 0x40
   11078:	f36c 0100 	bfi	r1, ip, #0, #1
   1107c:	f882 1040 	strb.w	r1, [r2, #64]	; 0x40
    if (m_serPort->USART.CTRLA.bit.ENABLE) {
   11080:	681a      	ldr	r2, [r3, #0]
        bool sercomEnabled = m_serPort->USART.CTRLA.bit.ENABLE;
   11082:	f3c0 0b40 	ubfx	fp, r0, #1, #1
    if (m_serPort->USART.CTRLA.bit.ENABLE) {
   11086:	0790      	lsls	r0, r2, #30
   11088:	d503      	bpl.n	11092 <_ZN9ClearCore10SerialBase8PortModeENS0_9PortModesE.part.9+0x846>
        m_serPort->USART.CTRLA.bit.ENABLE = 0;
   1108a:	681a      	ldr	r2, [r3, #0]
   1108c:	f36c 0241 	bfi	r2, ip, #1, #1
   11090:	601a      	str	r2, [r3, #0]
    SYNCBUSY_WAIT(usart, SERCOM_USART_SYNCBUSY_ENABLE);
   11092:	69da      	ldr	r2, [r3, #28]
   11094:	f012 0202 	ands.w	r2, r2, #2
   11098:	d1fb      	bne.n	11092 <_ZN9ClearCore10SerialBase8PortModeENS0_9PortModesE.part.9+0x846>
    Flush();
   1109a:	6821      	ldr	r1, [r4, #0]
   1109c:	680b      	ldr	r3, [r1, #0]
   1109e:	4543      	cmp	r3, r8
   110a0:	d13b      	bne.n	1111a <_ZN9ClearCore10SerialBase8PortModeENS0_9PortModesE.part.9+0x8ce>
    m_outTail = 0;
   110a2:	f8c4 213c 	str.w	r2, [r4, #316]	; 0x13c
    m_bufferOut[0] = 0;
   110a6:	f8a4 20b0 	strh.w	r2, [r4, #176]	; 0xb0
    m_outHead = 0;
   110aa:	f8c4 2138 	str.w	r2, [r4, #312]	; 0x138
    FlushInput();
   110ae:	684b      	ldr	r3, [r1, #4]
   110b0:	4a1c      	ldr	r2, [pc, #112]	; (11124 <_ZN9ClearCore10SerialBase8PortModeENS0_9PortModesE.part.9+0x8d8>)
   110b2:	4293      	cmp	r3, r2
   110b4:	d12d      	bne.n	11112 <_ZN9ClearCore10SerialBase8PortModeENS0_9PortModesE.part.9+0x8c6>
    m_serPort->USART.INTENSET.reg = SERCOM_USART_INTENSET_RXC;
   110b6:	6922      	ldr	r2, [r4, #16]
    m_bufferIn[0] = 0;
   110b8:	2300      	movs	r3, #0
    m_serPort->USART.INTENSET.reg = SERCOM_USART_INTENSET_RXC;
   110ba:	2104      	movs	r1, #4
    m_inTail = 0;
   110bc:	f8c4 3134 	str.w	r3, [r4, #308]	; 0x134
    m_bufferIn[0] = 0;
   110c0:	8623      	strh	r3, [r4, #48]	; 0x30
    m_inHead = 0;
   110c2:	f8c4 3130 	str.w	r3, [r4, #304]	; 0x130
    m_serPort->USART.INTENSET.reg = SERCOM_USART_INTENSET_RXC;
   110c6:	7591      	strb	r1, [r2, #22]
        m_serPort->USART.CTRLA.bit.TXPO = m_flowControl ? 2 : 0;
   110c8:	7b21      	ldrb	r1, [r4, #12]
   110ca:	6813      	ldr	r3, [r2, #0]
   110cc:	2900      	cmp	r1, #0
   110ce:	bf0c      	ite	eq
   110d0:	2100      	moveq	r1, #0
   110d2:	2102      	movne	r1, #2
   110d4:	f361 4311 	bfi	r3, r1, #16, #2
   110d8:	6013      	str	r3, [r2, #0]
        if (sercomEnabled) {
   110da:	f1bb 0f00 	cmp.w	fp, #0
   110de:	f43f ae18 	beq.w	10d12 <_ZN9ClearCore10SerialBase8PortModeENS0_9PortModesE.part.9+0x4c6>
    m_serPort->USART.CTRLA.bit.ENABLE = 1;
   110e2:	6813      	ldr	r3, [r2, #0]
   110e4:	f043 0302 	orr.w	r3, r3, #2
   110e8:	6013      	str	r3, [r2, #0]
    SYNCBUSY_WAIT(usart, SERCOM_USART_SYNCBUSY_ENABLE);
   110ea:	69d3      	ldr	r3, [r2, #28]
   110ec:	0799      	lsls	r1, r3, #30
   110ee:	d4fc      	bmi.n	110ea <_ZN9ClearCore10SerialBase8PortModeENS0_9PortModesE.part.9+0x89e>
        PMUX_ENABLE(m_txMosiInfo->gpioPort, m_txMosiInfo->gpioPin);
   110f0:	6a23      	ldr	r3, [r4, #32]
   110f2:	f993 2001 	ldrsb.w	r2, [r3, #1]
   110f6:	789b      	ldrb	r3, [r3, #2]
   110f8:	eb03 13c2 	add.w	r3, r3, r2, lsl #7
   110fc:	f103 4382 	add.w	r3, r3, #1090519040	; 0x41000000
   11100:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
   11104:	f893 2040 	ldrb.w	r2, [r3, #64]	; 0x40
   11108:	f042 0201 	orr.w	r2, r2, #1
   1110c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
   11110:	e5ff      	b.n	10d12 <_ZN9ClearCore10SerialBase8PortModeENS0_9PortModesE.part.9+0x4c6>
    FlushInput();
   11112:	4620      	mov	r0, r4
   11114:	4798      	blx	r3
   11116:	6922      	ldr	r2, [r4, #16]
   11118:	e7d6      	b.n	110c8 <_ZN9ClearCore10SerialBase8PortModeENS0_9PortModesE.part.9+0x87c>
    Flush();
   1111a:	4620      	mov	r0, r4
   1111c:	4798      	blx	r3
   1111e:	6821      	ldr	r1, [r4, #0]
   11120:	e7c5      	b.n	110ae <_ZN9ClearCore10SerialBase8PortModeENS0_9PortModesE.part.9+0x862>
   11122:	bf00      	nop
   11124:	0001020d 	.word	0x0001020d

00011128 <_ZN9ClearCore10SerialBase8PortOpenEv>:
    if (!m_portOpen) {
   11128:	f890 2029 	ldrb.w	r2, [r0, #41]	; 0x29
   1112c:	b92a      	cbnz	r2, 1113a <_ZN9ClearCore10SerialBase8PortOpenEv+0x12>
    if (newMode != SPI && newMode != UART) {
   1112e:	79c2      	ldrb	r2, [r0, #7]
        m_portOpen = true;
   11130:	2101      	movs	r1, #1
    if (newMode != SPI && newMode != UART) {
   11132:	428a      	cmp	r2, r1
        m_portOpen = true;
   11134:	f880 1029 	strb.w	r1, [r0, #41]	; 0x29
    if (newMode != SPI && newMode != UART) {
   11138:	d900      	bls.n	1113c <_ZN9ClearCore10SerialBase8PortOpenEv+0x14>
   1113a:	4770      	bx	lr
   1113c:	f7ff bb86 	b.w	1084c <_ZN9ClearCore10SerialBase8PortModeENS0_9PortModesE.part.9>

00011140 <_ZN9ClearCore10SerialBaseC1EPK15PeripheralRouteS3_S3_S3_h>:
SerialBase::SerialBase(const PeripheralRoute *ctsMisoInfo,
   11140:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   11142:	4604      	mov	r4, r0
      m_outHead(0), m_outTail(0) {
   11144:	4f20      	ldr	r7, [pc, #128]	; (111c8 <_ZN9ClearCore10SerialBaseC1EPK15PeripheralRouteS3_S3_S3_h+0x88>)
   11146:	6182      	str	r2, [r0, #24]
   11148:	61c3      	str	r3, [r0, #28]
   1114a:	4d20      	ldr	r5, [pc, #128]	; (111cc <_ZN9ClearCore10SerialBaseC1EPK15PeripheralRouteS3_S3_S3_h+0x8c>)
   1114c:	60a7      	str	r7, [r4, #8]
   1114e:	9f06      	ldr	r7, [sp, #24]
   11150:	f8df c080 	ldr.w	ip, [pc, #128]	; 111d4 <_ZN9ClearCore10SerialBaseC1EPK15PeripheralRouteS3_S3_S3_h+0x94>
SerialBase::SerialBase(const PeripheralRoute *ctsMisoInfo,
   11154:	f89d 001c 	ldrb.w	r0, [sp, #28]
      m_outHead(0), m_outTail(0) {
   11158:	6065      	str	r5, [r4, #4]
   1115a:	2307      	movs	r3, #7
   1115c:	2500      	movs	r5, #0
SerialBase::SerialBase(const PeripheralRoute *ctsMisoInfo,
   1115e:	460e      	mov	r6, r1
      m_outHead(0), m_outTail(0) {
   11160:	6227      	str	r7, [r4, #32]
   11162:	f44f 5116 	mov.w	r1, #9600	; 0x2580
   11166:	2780      	movs	r7, #128	; 0x80
   11168:	f64f 72ff 	movw	r2, #65535	; 0xffff
   1116c:	f884 302e 	strb.w	r3, [r4, #46]	; 0x2e
   11170:	f884 302f 	strb.w	r3, [r4, #47]	; 0x2f
   11174:	f8c4 c000 	str.w	ip, [r4]
   11178:	6261      	str	r1, [r4, #36]	; 0x24
   1117a:	f884 0028 	strb.w	r0, [r4, #40]	; 0x28
   1117e:	85a2      	strh	r2, [r4, #44]	; 0x2c
   11180:	4629      	mov	r1, r5
   11182:	463a      	mov	r2, r7
   11184:	6166      	str	r6, [r4, #20]
   11186:	7325      	strb	r5, [r4, #12]
   11188:	f884 5029 	strb.w	r5, [r4, #41]	; 0x29
   1118c:	f884 502a 	strb.w	r5, [r4, #42]	; 0x2a
   11190:	f104 0030 	add.w	r0, r4, #48	; 0x30
   11194:	f00d f812 	bl	1e1bc <memset>
   11198:	463a      	mov	r2, r7
   1119a:	4629      	mov	r1, r5
   1119c:	f104 00b0 	add.w	r0, r4, #176	; 0xb0
   111a0:	f00d f80c 	bl	1e1bc <memset>
   111a4:	f8c4 5130 	str.w	r5, [r4, #304]	; 0x130
            reg = 0;
   111a8:	f8c4 5140 	str.w	r5, [r4, #320]	; 0x140
   111ac:	f8c4 5134 	str.w	r5, [r4, #308]	; 0x134
   111b0:	f8c4 5138 	str.w	r5, [r4, #312]	; 0x138
   111b4:	f8c4 513c 	str.w	r5, [r4, #316]	; 0x13c
    m_serPort = sercom_instances[ctsMisoInfo->sercomNum];
   111b8:	7a32      	ldrb	r2, [r6, #8]
   111ba:	4b05      	ldr	r3, [pc, #20]	; (111d0 <_ZN9ClearCore10SerialBaseC1EPK15PeripheralRouteS3_S3_S3_h+0x90>)
   111bc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
   111c0:	6123      	str	r3, [r4, #16]
}
   111c2:	4620      	mov	r0, r4
   111c4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   111c6:	bf00      	nop
   111c8:	02000100 	.word	0x02000100
   111cc:	00080102 	.word	0x00080102
   111d0:	00022ff4 	.word	0x00022ff4
   111d4:	00022fac 	.word	0x00022fac

000111d8 <_ZN9ClearCore10SerialBase15WaitOneCharTimeEv>:
        max(2, (SampleRateHz * 10 + m_baudRate - 1) / m_baudRate);
   111d8:	6a43      	ldr	r3, [r0, #36]	; 0x24
    uint32_t tickVal = tickCnt;
   111da:	4907      	ldr	r1, [pc, #28]	; (111f8 <_ZN9ClearCore10SerialBase15WaitOneCharTimeEv+0x20>)
        max(2, (SampleRateHz * 10 + m_baudRate - 1) / m_baudRate);
   111dc:	f503 4243 	add.w	r2, r3, #49920	; 0xc300
   111e0:	324f      	adds	r2, #79	; 0x4f
    uint32_t tickVal = tickCnt;
   111e2:	6808      	ldr	r0, [r1, #0]
        max(2, (SampleRateHz * 10 + m_baudRate - 1) / m_baudRate);
   111e4:	fbb2 f2f3 	udiv	r2, r2, r3
   111e8:	2a02      	cmp	r2, #2
   111ea:	bf38      	it	cc
   111ec:	2202      	movcc	r2, #2
    while (tickCnt - tickVal < ticksNeeded) {
   111ee:	680b      	ldr	r3, [r1, #0]
   111f0:	1a1b      	subs	r3, r3, r0
   111f2:	429a      	cmp	r2, r3
   111f4:	d8fb      	bhi.n	111ee <_ZN9ClearCore10SerialBase15WaitOneCharTimeEv+0x16>
}
   111f6:	4770      	bx	lr
   111f8:	20001d1c 	.word	0x20001d1c

000111fc <_ZN9ClearCore10SerialBase8PortModeENS0_9PortModesE>:
    if (newMode != SPI && newMode != UART) {
   111fc:	2901      	cmp	r1, #1
   111fe:	d901      	bls.n	11204 <_ZN9ClearCore10SerialBase8PortModeENS0_9PortModesE+0x8>
        return false;
   11200:	2000      	movs	r0, #0
   11202:	4770      	bx	lr
    if (!m_portOpen) {
   11204:	f890 2029 	ldrb.w	r2, [r0, #41]	; 0x29
    m_portMode = newMode;
   11208:	71c1      	strb	r1, [r0, #7]
    if (!m_portOpen) {
   1120a:	b10a      	cbz	r2, 11210 <_ZN9ClearCore10SerialBase8PortModeENS0_9PortModesE+0x14>
   1120c:	f7ff bb1e 	b.w	1084c <_ZN9ClearCore10SerialBase8PortModeENS0_9PortModesE.part.9>
        return true;
   11210:	2001      	movs	r0, #1
}
   11212:	4770      	bx	lr

00011214 <_ZN9ClearCore10SerialBase9SpiSsModeENS0_13CtrlLineModesE>:
    switch (mode) {
   11214:	2901      	cmp	r1, #1
    m_ssMode = mode;
   11216:	7281      	strb	r1, [r0, #10]
    switch (mode) {
   11218:	d914      	bls.n	11244 <_ZN9ClearCore10SerialBase9SpiSsModeENS0_13CtrlLineModesE+0x30>
   1121a:	2902      	cmp	r1, #2
   1121c:	d110      	bne.n	11240 <_ZN9ClearCore10SerialBase9SpiSsModeENS0_13CtrlLineModesE+0x2c>
            PMUX_ENABLE(m_rtsSsInfo->gpioPort, m_rtsSsInfo->gpioPin);
   1121e:	6982      	ldr	r2, [r0, #24]
   11220:	f992 1001 	ldrsb.w	r1, [r2, #1]
   11224:	7893      	ldrb	r3, [r2, #2]
   11226:	eb03 13c1 	add.w	r3, r3, r1, lsl #7
   1122a:	f103 4382 	add.w	r3, r3, #1090519040	; 0x41000000
   1122e:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
    bool success = true;
   11232:	2001      	movs	r0, #1
            PMUX_ENABLE(m_rtsSsInfo->gpioPort, m_rtsSsInfo->gpioPin);
   11234:	f893 2040 	ldrb.w	r2, [r3, #64]	; 0x40
   11238:	4302      	orrs	r2, r0
   1123a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
   1123e:	4770      	bx	lr
            success = false;
   11240:	2000      	movs	r0, #0
}
   11242:	4770      	bx	lr
            DATA_OUTPUT_STATE(m_rtsSsInfo->gpioPort,
   11244:	6982      	ldr	r2, [r0, #24]
   11246:	f992 3001 	ldrsb.w	r3, [r2, #1]
   1124a:	7892      	ldrb	r2, [r2, #2]
   1124c:	01db      	lsls	r3, r3, #7
   1124e:	b199      	cbz	r1, 11278 <_ZN9ClearCore10SerialBase9SpiSsModeENS0_13CtrlLineModesE+0x64>
   11250:	f103 4182 	add.w	r1, r3, #1090519040	; 0x41000000
   11254:	f501 4100 	add.w	r1, r1, #32768	; 0x8000
   11258:	2001      	movs	r0, #1
   1125a:	4090      	lsls	r0, r2
   1125c:	6148      	str	r0, [r1, #20]
            PMUX_DISABLE(m_rtsSsInfo->gpioPort, m_rtsSsInfo->gpioPin);
   1125e:	f103 4382 	add.w	r3, r3, #1090519040	; 0x41000000
   11262:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
   11266:	4413      	add	r3, r2
   11268:	2001      	movs	r0, #1
   1126a:	f893 2040 	ldrb.w	r2, [r3, #64]	; 0x40
   1126e:	f36f 0200 	bfc	r2, #0, #1
   11272:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
   11276:	4770      	bx	lr
            DATA_OUTPUT_STATE(m_rtsSsInfo->gpioPort,
   11278:	f103 4182 	add.w	r1, r3, #1090519040	; 0x41000000
   1127c:	f501 4100 	add.w	r1, r1, #32768	; 0x8000
   11280:	2001      	movs	r0, #1
   11282:	4090      	lsls	r0, r2
   11284:	6188      	str	r0, [r1, #24]
   11286:	e7ea      	b.n	1125e <_ZN9ClearCore10SerialBase9SpiSsModeENS0_13CtrlLineModesE+0x4a>

00011288 <_ZN9ClearCore10SerialBase8SpiClockENS0_18SpiClockPolaritiesENS0_14SpiClockPhasesE>:
    SpiClockPolarities polarity, SpiClockPhases phase) {
   11288:	b538      	push	{r3, r4, r5, lr}
    if (m_portMode != PortModes::SPI) {
   1128a:	79c3      	ldrb	r3, [r0, #7]
    m_polarity = polarity;
   1128c:	7201      	strb	r1, [r0, #8]
    if (m_portMode != PortModes::SPI) {
   1128e:	2b01      	cmp	r3, #1
    m_phase = phase;
   11290:	7242      	strb	r2, [r0, #9]
    if (m_portMode != PortModes::SPI) {
   11292:	d000      	beq.n	11296 <_ZN9ClearCore10SerialBase8SpiClockENS0_18SpiClockPolaritiesENS0_14SpiClockPhasesE+0xe>
   11294:	bd38      	pop	{r3, r4, r5, pc}
    PMUX_DISABLE(m_txMosiInfo->gpioPort, m_txMosiInfo->gpioPin);
   11296:	6a01      	ldr	r1, [r0, #32]
    bool sercomEnabled = m_serPort->USART.CTRLA.bit.ENABLE;
   11298:	6902      	ldr	r2, [r0, #16]
    PMUX_DISABLE(m_txMosiInfo->gpioPort, m_txMosiInfo->gpioPin);
   1129a:	f991 4001 	ldrsb.w	r4, [r1, #1]
   1129e:	788b      	ldrb	r3, [r1, #2]
    bool sercomEnabled = m_serPort->USART.CTRLA.bit.ENABLE;
   112a0:	6815      	ldr	r5, [r2, #0]
    PMUX_DISABLE(m_txMosiInfo->gpioPort, m_txMosiInfo->gpioPin);
   112a2:	eb03 13c4 	add.w	r3, r3, r4, lsl #7
   112a6:	f103 4382 	add.w	r3, r3, #1090519040	; 0x41000000
   112aa:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
    bool sercomEnabled = m_serPort->USART.CTRLA.bit.ENABLE;
   112ae:	f3c5 0540 	ubfx	r5, r5, #1, #1
    PMUX_DISABLE(m_txMosiInfo->gpioPort, m_txMosiInfo->gpioPin);
   112b2:	f893 1040 	ldrb.w	r1, [r3, #64]	; 0x40
   112b6:	f36f 0100 	bfc	r1, #0, #1
   112ba:	f883 1040 	strb.w	r1, [r3, #64]	; 0x40
    if (m_serPort->USART.CTRLA.bit.ENABLE) {
   112be:	6813      	ldr	r3, [r2, #0]
   112c0:	0799      	lsls	r1, r3, #30
   112c2:	d503      	bpl.n	112cc <_ZN9ClearCore10SerialBase8SpiClockENS0_18SpiClockPolaritiesENS0_14SpiClockPhasesE+0x44>
        m_serPort->USART.CTRLA.bit.ENABLE = 0;
   112c4:	6813      	ldr	r3, [r2, #0]
   112c6:	f36f 0341 	bfc	r3, #1, #1
   112ca:	6013      	str	r3, [r2, #0]
    SYNCBUSY_WAIT(usart, SERCOM_USART_SYNCBUSY_ENABLE);
   112cc:	69d3      	ldr	r3, [r2, #28]
   112ce:	f013 0302 	ands.w	r3, r3, #2
   112d2:	d1fb      	bne.n	112cc <_ZN9ClearCore10SerialBase8SpiClockENS0_18SpiClockPolaritiesENS0_14SpiClockPhasesE+0x44>
    Flush();
   112d4:	6802      	ldr	r2, [r0, #0]
   112d6:	4604      	mov	r4, r0
   112d8:	6811      	ldr	r1, [r2, #0]
   112da:	4821      	ldr	r0, [pc, #132]	; (11360 <_ZN9ClearCore10SerialBase8SpiClockENS0_18SpiClockPolaritiesENS0_14SpiClockPhasesE+0xd8>)
   112dc:	4281      	cmp	r1, r0
   112de:	d136      	bne.n	1134e <_ZN9ClearCore10SerialBase8SpiClockENS0_18SpiClockPolaritiesENS0_14SpiClockPhasesE+0xc6>
    m_outTail = 0;
   112e0:	f8c4 313c 	str.w	r3, [r4, #316]	; 0x13c
    m_bufferOut[0] = 0;
   112e4:	f8a4 30b0 	strh.w	r3, [r4, #176]	; 0xb0
    m_outHead = 0;
   112e8:	f8c4 3138 	str.w	r3, [r4, #312]	; 0x138
    FlushInput();
   112ec:	6853      	ldr	r3, [r2, #4]
   112ee:	4a1d      	ldr	r2, [pc, #116]	; (11364 <_ZN9ClearCore10SerialBase8SpiClockENS0_18SpiClockPolaritiesENS0_14SpiClockPhasesE+0xdc>)
   112f0:	4293      	cmp	r3, r2
   112f2:	d130      	bne.n	11356 <_ZN9ClearCore10SerialBase8SpiClockENS0_18SpiClockPolaritiesENS0_14SpiClockPhasesE+0xce>
    m_serPort->USART.INTENSET.reg = SERCOM_USART_INTENSET_RXC;
   112f4:	6923      	ldr	r3, [r4, #16]
    m_bufferIn[0] = 0;
   112f6:	2200      	movs	r2, #0
    m_serPort->USART.INTENSET.reg = SERCOM_USART_INTENSET_RXC;
   112f8:	2104      	movs	r1, #4
    m_inTail = 0;
   112fa:	f8c4 2134 	str.w	r2, [r4, #308]	; 0x134
    m_bufferIn[0] = 0;
   112fe:	8622      	strh	r2, [r4, #48]	; 0x30
    m_inHead = 0;
   11300:	f8c4 2130 	str.w	r2, [r4, #304]	; 0x130
    m_serPort->USART.INTENSET.reg = SERCOM_USART_INTENSET_RXC;
   11304:	7599      	strb	r1, [r3, #22]
    m_serPort->SPI.CTRLA.bit.CPOL = m_polarity;
   11306:	7a21      	ldrb	r1, [r4, #8]
   11308:	681a      	ldr	r2, [r3, #0]
   1130a:	f361 725d 	bfi	r2, r1, #29, #1
   1130e:	601a      	str	r2, [r3, #0]
    m_serPort->SPI.CTRLA.bit.CPHA = m_phase;
   11310:	7a61      	ldrb	r1, [r4, #9]
   11312:	681a      	ldr	r2, [r3, #0]
   11314:	f361 721c 	bfi	r2, r1, #28, #1
   11318:	601a      	str	r2, [r3, #0]
    if (sercomEnabled) {
   1131a:	2d00      	cmp	r5, #0
   1131c:	d0ba      	beq.n	11294 <_ZN9ClearCore10SerialBase8SpiClockENS0_18SpiClockPolaritiesENS0_14SpiClockPhasesE+0xc>
    m_serPort->USART.CTRLA.bit.ENABLE = 1;
   1131e:	681a      	ldr	r2, [r3, #0]
   11320:	f042 0202 	orr.w	r2, r2, #2
   11324:	601a      	str	r2, [r3, #0]
    SYNCBUSY_WAIT(usart, SERCOM_USART_SYNCBUSY_ENABLE);
   11326:	69da      	ldr	r2, [r3, #28]
   11328:	0792      	lsls	r2, r2, #30
   1132a:	d4fc      	bmi.n	11326 <_ZN9ClearCore10SerialBase8SpiClockENS0_18SpiClockPolaritiesENS0_14SpiClockPhasesE+0x9e>
        PMUX_ENABLE(m_txMosiInfo->gpioPort, m_txMosiInfo->gpioPin);
   1132c:	6a22      	ldr	r2, [r4, #32]
   1132e:	f992 1001 	ldrsb.w	r1, [r2, #1]
   11332:	7893      	ldrb	r3, [r2, #2]
   11334:	eb03 13c1 	add.w	r3, r3, r1, lsl #7
   11338:	f103 4382 	add.w	r3, r3, #1090519040	; 0x41000000
   1133c:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
   11340:	f893 2040 	ldrb.w	r2, [r3, #64]	; 0x40
   11344:	f042 0201 	orr.w	r2, r2, #1
   11348:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
   1134c:	bd38      	pop	{r3, r4, r5, pc}
    Flush();
   1134e:	4620      	mov	r0, r4
   11350:	4788      	blx	r1
   11352:	6822      	ldr	r2, [r4, #0]
   11354:	e7ca      	b.n	112ec <_ZN9ClearCore10SerialBase8SpiClockENS0_18SpiClockPolaritiesENS0_14SpiClockPhasesE+0x64>
    FlushInput();
   11356:	4620      	mov	r0, r4
   11358:	4798      	blx	r3
   1135a:	6923      	ldr	r3, [r4, #16]
   1135c:	e7d3      	b.n	11306 <_ZN9ClearCore10SerialBase8SpiClockENS0_18SpiClockPolaritiesENS0_14SpiClockPhasesE+0x7e>
   1135e:	bf00      	nop
   11360:	000101fd 	.word	0x000101fd
   11364:	0001020d 	.word	0x0001020d

00011368 <_ZN9ClearCore10SerialBase15SpiTransferDataEPKhPhl>:
    uint8_t const *writeBuf, uint8_t *readBuf, int32_t len) {
   11368:	b470      	push	{r4, r5, r6}
   1136a:	4604      	mov	r4, r0
    if (!m_portOpen || m_portMode != SPI) {
   1136c:	f890 0029 	ldrb.w	r0, [r0, #41]	; 0x29
   11370:	b120      	cbz	r0, 1137c <_ZN9ClearCore10SerialBase15SpiTransferDataEPKhPhl+0x14>
   11372:	79e0      	ldrb	r0, [r4, #7]
   11374:	2801      	cmp	r0, #1
        return 0;
   11376:	f04f 0000 	mov.w	r0, #0
    if (!m_portOpen || m_portMode != SPI) {
   1137a:	d001      	beq.n	11380 <_ZN9ClearCore10SerialBase15SpiTransferDataEPKhPhl+0x18>
}
   1137c:	bc70      	pop	{r4, r5, r6}
   1137e:	4770      	bx	lr
    for (iChar = 0; iChar < len; iChar++) {
   11380:	2b00      	cmp	r3, #0
   11382:	ddfb      	ble.n	1137c <_ZN9ClearCore10SerialBase15SpiTransferDataEPKhPhl+0x14>
        m_serPort->SPI.DATA.bit.DATA = writeBuf ? *writeBuf++ : 0;
   11384:	6925      	ldr	r5, [r4, #16]
   11386:	b1b9      	cbz	r1, 113b8 <_ZN9ClearCore10SerialBase15SpiTransferDataEPKhPhl+0x50>
   11388:	1c4e      	adds	r6, r1, #1
   1138a:	7809      	ldrb	r1, [r1, #0]
   1138c:	62a9      	str	r1, [r5, #40]	; 0x28
   1138e:	e003      	b.n	11398 <_ZN9ClearCore10SerialBase15SpiTransferDataEPKhPhl+0x30>
            if (!m_portOpen) {
   11390:	f894 1029 	ldrb.w	r1, [r4, #41]	; 0x29
   11394:	2900      	cmp	r1, #0
   11396:	d0f1      	beq.n	1137c <_ZN9ClearCore10SerialBase15SpiTransferDataEPKhPhl+0x14>
        while (!m_serPort->SPI.INTFLAG.bit.RXC ||
   11398:	7e29      	ldrb	r1, [r5, #24]
   1139a:	0749      	lsls	r1, r1, #29
   1139c:	d5f8      	bpl.n	11390 <_ZN9ClearCore10SerialBase15SpiTransferDataEPKhPhl+0x28>
                !m_serPort->SPI.INTFLAG.bit.TXC) {
   1139e:	7e29      	ldrb	r1, [r5, #24]
        while (!m_serPort->SPI.INTFLAG.bit.RXC ||
   113a0:	0789      	lsls	r1, r1, #30
   113a2:	d5f5      	bpl.n	11390 <_ZN9ClearCore10SerialBase15SpiTransferDataEPKhPhl+0x28>
        if (readBuf) {
   113a4:	b152      	cbz	r2, 113bc <_ZN9ClearCore10SerialBase15SpiTransferDataEPKhPhl+0x54>
    for (iChar = 0; iChar < len; iChar++) {
   113a6:	3001      	adds	r0, #1
            *readBuf++ = m_serPort->SPI.DATA.bit.DATA;
   113a8:	6aa9      	ldr	r1, [r5, #40]	; 0x28
   113aa:	7011      	strb	r1, [r2, #0]
    for (iChar = 0; iChar < len; iChar++) {
   113ac:	4298      	cmp	r0, r3
            *readBuf++ = m_serPort->SPI.DATA.bit.DATA;
   113ae:	f102 0201 	add.w	r2, r2, #1
    for (iChar = 0; iChar < len; iChar++) {
   113b2:	d007      	beq.n	113c4 <_ZN9ClearCore10SerialBase15SpiTransferDataEPKhPhl+0x5c>
   113b4:	4631      	mov	r1, r6
   113b6:	e7e5      	b.n	11384 <_ZN9ClearCore10SerialBase15SpiTransferDataEPKhPhl+0x1c>
   113b8:	460e      	mov	r6, r1
   113ba:	e7e7      	b.n	1138c <_ZN9ClearCore10SerialBase15SpiTransferDataEPKhPhl+0x24>
   113bc:	3001      	adds	r0, #1
   113be:	4283      	cmp	r3, r0
            (void)m_serPort->SPI.DATA.bit.DATA;
   113c0:	6aa9      	ldr	r1, [r5, #40]	; 0x28
    for (iChar = 0; iChar < len; iChar++) {
   113c2:	d1f7      	bne.n	113b4 <_ZN9ClearCore10SerialBase15SpiTransferDataEPKhPhl+0x4c>
        return 0;
   113c4:	4618      	mov	r0, r3
   113c6:	e7d9      	b.n	1137c <_ZN9ClearCore10SerialBase15SpiTransferDataEPKhPhl+0x14>

000113c8 <_ZN9ClearCore10SerialBase20SpiTransferDataAsyncEPKhPhl>:
    uint8_t const *writeBuf, uint8_t *readBuf, int32_t len) {
   113c8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    if (!m_portOpen || m_portMode != SPI) {
   113cc:	f890 5029 	ldrb.w	r5, [r0, #41]	; 0x29
   113d0:	b12d      	cbz	r5, 113de <_ZN9ClearCore10SerialBase20SpiTransferDataAsyncEPKhPhl+0x16>
   113d2:	f890 8007 	ldrb.w	r8, [r0, #7]
   113d6:	f1b8 0f01 	cmp.w	r8, #1
   113da:	d003      	beq.n	113e4 <_ZN9ClearCore10SerialBase20SpiTransferDataAsyncEPKhPhl+0x1c>
        return false;
   113dc:	2500      	movs	r5, #0
}
   113de:	4628      	mov	r0, r5
   113e0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    if (m_dmaRxChannel == DMA_INVALID_CHANNEL ||
   113e4:	f890 e02e 	ldrb.w	lr, [r0, #46]	; 0x2e
   113e8:	f1be 0f07 	cmp.w	lr, #7
   113ec:	d0f6      	beq.n	113dc <_ZN9ClearCore10SerialBase20SpiTransferDataAsyncEPKhPhl+0x14>
   113ee:	f890 402f 	ldrb.w	r4, [r0, #47]	; 0x2f
   113f2:	2c07      	cmp	r4, #7
   113f4:	d0f2      	beq.n	113dc <_ZN9ClearCore10SerialBase20SpiTransferDataAsyncEPKhPhl+0x14>
   113f6:	4616      	mov	r6, r2
   113f8:	4604      	mov	r4, r0
    baseDesc = DmaManager::BaseDescriptor(m_dmaRxChannel);
   113fa:	4670      	mov	r0, lr
   113fc:	461f      	mov	r7, r3
   113fe:	4689      	mov	r9, r1
   11400:	f7f3 ffa8 	bl	5354 <_ZN9ClearCore10DmaManager14BaseDescriptorENS_11DmaChannelsE>
    if (readBuf) {
   11404:	b336      	cbz	r6, 11454 <_ZN9ClearCore10SerialBase20SpiTransferDataAsyncEPKhPhl+0x8c>
        baseDesc->DSTADDR.reg = (uint32_t)(readBuf + len);
   11406:	443e      	add	r6, r7
        baseDesc->BTCTRL.reg =
   11408:	f640 0301 	movw	r3, #2049	; 0x801
        baseDesc->DSTADDR.reg = (uint32_t)(readBuf + len);
   1140c:	6086      	str	r6, [r0, #8]
        baseDesc->BTCTRL.reg =
   1140e:	8003      	strh	r3, [r0, #0]
    baseDesc->BTCNT.reg = len;
   11410:	b2be      	uxth	r6, r7
   11412:	8046      	strh	r6, [r0, #2]
    DmaManager::Channel(m_dmaRxChannel)->CHCTRLA.reg |= DMAC_CHCTRLA_ENABLE;
   11414:	f894 002e 	ldrb.w	r0, [r4, #46]	; 0x2e
   11418:	f7f3 ff92 	bl	5340 <_ZN9ClearCore10DmaManager7ChannelENS_11DmaChannelsE>
   1141c:	6803      	ldr	r3, [r0, #0]
   1141e:	f043 0302 	orr.w	r3, r3, #2
   11422:	6003      	str	r3, [r0, #0]
    baseDesc = DmaManager::BaseDescriptor(m_dmaTxChannel);
   11424:	f894 002f 	ldrb.w	r0, [r4, #47]	; 0x2f
   11428:	f7f3 ff94 	bl	5354 <_ZN9ClearCore10DmaManager14BaseDescriptorENS_11DmaChannelsE>
    if (writeBuf) {
   1142c:	f1b9 0f00 	cmp.w	r9, #0
   11430:	d015      	beq.n	1145e <_ZN9ClearCore10SerialBase20SpiTransferDataAsyncEPKhPhl+0x96>
        baseDesc->SRCADDR.reg = (uint32_t)(writeBuf + len);
   11432:	444f      	add	r7, r9
        baseDesc->BTCTRL.reg =
   11434:	f240 4301 	movw	r3, #1025	; 0x401
        baseDesc->SRCADDR.reg = (uint32_t)(writeBuf + len);
   11438:	6047      	str	r7, [r0, #4]
        baseDesc->BTCTRL.reg =
   1143a:	8003      	strh	r3, [r0, #0]
    baseDesc->BTCNT.reg = len;
   1143c:	8046      	strh	r6, [r0, #2]
    DmaManager::Channel(m_dmaTxChannel)->CHCTRLA.reg |= DMAC_CHCTRLA_ENABLE;
   1143e:	f894 002f 	ldrb.w	r0, [r4, #47]	; 0x2f
   11442:	f7f3 ff7d 	bl	5340 <_ZN9ClearCore10DmaManager7ChannelENS_11DmaChannelsE>
   11446:	6803      	ldr	r3, [r0, #0]
   11448:	f043 0302 	orr.w	r3, r3, #2
   1144c:	6003      	str	r3, [r0, #0]
}
   1144e:	4628      	mov	r0, r5
   11450:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
        baseDesc->DSTADDR.reg = (uint32_t)&spiDummy;
   11454:	4b04      	ldr	r3, [pc, #16]	; (11468 <_ZN9ClearCore10SerialBase20SpiTransferDataAsyncEPKhPhl+0xa0>)
   11456:	6083      	str	r3, [r0, #8]
        baseDesc->BTCTRL.reg = DMAC_BTCTRL_BEATSIZE_BYTE | DMAC_BTCTRL_VALID;
   11458:	f8a0 8000 	strh.w	r8, [r0]
   1145c:	e7d8      	b.n	11410 <_ZN9ClearCore10SerialBase20SpiTransferDataAsyncEPKhPhl+0x48>
        baseDesc->SRCADDR.reg = (uint32_t)&spiDummy;
   1145e:	4b02      	ldr	r3, [pc, #8]	; (11468 <_ZN9ClearCore10SerialBase20SpiTransferDataAsyncEPKhPhl+0xa0>)
   11460:	6043      	str	r3, [r0, #4]
        baseDesc->BTCTRL.reg = DMAC_BTCTRL_BEATSIZE_BYTE | DMAC_BTCTRL_VALID;
   11462:	2301      	movs	r3, #1
   11464:	8003      	strh	r3, [r0, #0]
   11466:	e7e9      	b.n	1143c <_ZN9ClearCore10SerialBase20SpiTransferDataAsyncEPKhPhl+0x74>
   11468:	20001f30 	.word	0x20001f30

0001146c <_ZN9ClearCore10SerialBase20SpiAsyncWaitCompleteEv>:
    if (m_dmaRxChannel == DMA_INVALID_CHANNEL ||
   1146c:	f890 302e 	ldrb.w	r3, [r0, #46]	; 0x2e
   11470:	2b07      	cmp	r3, #7
   11472:	d016      	beq.n	114a2 <_ZN9ClearCore10SerialBase20SpiAsyncWaitCompleteEv+0x36>
   11474:	f890 302f 	ldrb.w	r3, [r0, #47]	; 0x2f
   11478:	2b07      	cmp	r3, #7
bool SerialBase::SpiAsyncWaitComplete() {
   1147a:	b510      	push	{r4, lr}
   1147c:	4604      	mov	r4, r0
    if (m_dmaRxChannel == DMA_INVALID_CHANNEL ||
   1147e:	d005      	beq.n	1148c <_ZN9ClearCore10SerialBase20SpiAsyncWaitCompleteEv+0x20>
    while (m_portOpen && m_portMode == SPI &&
   11480:	f894 3029 	ldrb.w	r3, [r4, #41]	; 0x29
   11484:	b113      	cbz	r3, 1148c <_ZN9ClearCore10SerialBase20SpiAsyncWaitCompleteEv+0x20>
   11486:	79e3      	ldrb	r3, [r4, #7]
   11488:	2b01      	cmp	r3, #1
   1148a:	d001      	beq.n	11490 <_ZN9ClearCore10SerialBase20SpiAsyncWaitCompleteEv+0x24>
}
   1148c:	2001      	movs	r0, #1
   1148e:	bd10      	pop	{r4, pc}
            DmaManager::Channel(m_dmaRxChannel)->CHCTRLA.bit.ENABLE) {
   11490:	f894 002e 	ldrb.w	r0, [r4, #46]	; 0x2e
   11494:	f7f3 ff54 	bl	5340 <_ZN9ClearCore10DmaManager7ChannelENS_11DmaChannelsE>
   11498:	6803      	ldr	r3, [r0, #0]
    while (m_portOpen && m_portMode == SPI &&
   1149a:	079b      	lsls	r3, r3, #30
   1149c:	d4f0      	bmi.n	11480 <_ZN9ClearCore10SerialBase20SpiAsyncWaitCompleteEv+0x14>
}
   1149e:	2001      	movs	r0, #1
   114a0:	bd10      	pop	{r4, pc}
   114a2:	2001      	movs	r0, #1
   114a4:	4770      	bx	lr
   114a6:	bf00      	nop

000114a8 <_ZN9ClearCore10SerialBase12IrqHandlerTxEv>:
    The TX data service interrupt handler.

    This should be called by SERCOMx_0 Interrupt Vector.
**/
void SerialBase::IrqHandlerTx() {
    switch (m_portMode) {
   114a8:	79c3      	ldrb	r3, [r0, #7]
   114aa:	2b01      	cmp	r3, #1
   114ac:	d022      	beq.n	114f4 <_ZN9ClearCore10SerialBase12IrqHandlerTxEv+0x4c>
    while (m_outHead != m_outTail) {
   114ae:	f8d0 2138 	ldr.w	r2, [r0, #312]	; 0x138
   114b2:	f8d0 313c 	ldr.w	r3, [r0, #316]	; 0x13c
        if (!m_serPort->USART.INTFLAG.bit.DRE) {
   114b6:	6901      	ldr	r1, [r0, #16]
    while (m_outHead != m_outTail) {
   114b8:	429a      	cmp	r2, r3
   114ba:	d019      	beq.n	114f0 <_ZN9ClearCore10SerialBase12IrqHandlerTxEv+0x48>
        if (!m_serPort->USART.INTFLAG.bit.DRE) {
   114bc:	7e0b      	ldrb	r3, [r1, #24]
   114be:	07da      	lsls	r2, r3, #31
   114c0:	d403      	bmi.n	114ca <_ZN9ClearCore10SerialBase12IrqHandlerTxEv+0x22>
   114c2:	e018      	b.n	114f6 <_ZN9ClearCore10SerialBase12IrqHandlerTxEv+0x4e>
   114c4:	7e0b      	ldrb	r3, [r1, #24]
   114c6:	07db      	lsls	r3, r3, #31
   114c8:	d514      	bpl.n	114f4 <_ZN9ClearCore10SerialBase12IrqHandlerTxEv+0x4c>
        int32_t nextIndex = NextIndex(m_outHead);
   114ca:	f8d0 3138 	ldr.w	r3, [r0, #312]	; 0x138
        m_serPort->USART.DATA.bit.DATA = m_bufferOut[m_outHead];
   114ce:	f8d0 2138 	ldr.w	r2, [r0, #312]	; 0x138
   114d2:	3258      	adds	r2, #88	; 0x58
        return ((currentIndex + 1) & (SERIAL_BUFFER_SIZE - 1));
   114d4:	3301      	adds	r3, #1
   114d6:	f930 2012 	ldrsh.w	r2, [r0, r2, lsl #1]
   114da:	628a      	str	r2, [r1, #40]	; 0x28
   114dc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
        m_outHead = nextIndex;
   114e0:	f8c0 3138 	str.w	r3, [r0, #312]	; 0x138
    while (m_outHead != m_outTail) {
   114e4:	f8d0 2138 	ldr.w	r2, [r0, #312]	; 0x138
   114e8:	f8d0 313c 	ldr.w	r3, [r0, #316]	; 0x13c
   114ec:	429a      	cmp	r2, r3
   114ee:	d1e9      	bne.n	114c4 <_ZN9ClearCore10SerialBase12IrqHandlerTxEv+0x1c>
    m_serPort->USART.INTENCLR.reg = SERCOM_USART_INTENCLR_DRE;
   114f0:	2301      	movs	r3, #1
   114f2:	750b      	strb	r3, [r1, #20]
   114f4:	4770      	bx	lr
   114f6:	4770      	bx	lr

000114f8 <_ZN9ClearCore10SerialBase12IrqHandlerRxEv>:
    Interrupt handler for the RX data service.

    This should be called by SERCOMx_2 Interrupt Vector.
**/
void SerialBase::IrqHandlerRx() {
    switch (m_portMode) {
   114f8:	79c3      	ldrb	r3, [r0, #7]
   114fa:	2b01      	cmp	r3, #1
   114fc:	d100      	bne.n	11500 <_ZN9ClearCore10SerialBase12IrqHandlerRxEv+0x8>
        case UART:
        default:
            RxProc();
            break;
    }
}
   114fe:	4770      	bx	lr
void SerialBase::IrqHandlerRx() {
   11500:	b410      	push	{r4}
    if (m_serPort->USART.RXERRCNT.reg != 0) {
   11502:	6901      	ldr	r1, [r0, #16]
   11504:	f891 3020 	ldrb.w	r3, [r1, #32]
   11508:	b303      	cbz	r3, 1154c <_ZN9ClearCore10SerialBase12IrqHandlerRxEv+0x54>
        m_inTail = 0;
   1150a:	2300      	movs	r3, #0
   1150c:	f8c0 3134 	str.w	r3, [r0, #308]	; 0x134
        m_inHead = 0;
   11510:	f8c0 3130 	str.w	r3, [r0, #304]	; 0x130
        m_bufferIn[m_inTail++] = SerialBase::BREAK_DETECTED;
   11514:	f8d0 3134 	ldr.w	r3, [r0, #308]	; 0x134
   11518:	f103 0218 	add.w	r2, r3, #24
   1151c:	f64b 54bd 	movw	r4, #48573	; 0xbdbd
   11520:	3301      	adds	r3, #1
   11522:	f8c0 3134 	str.w	r3, [r0, #308]	; 0x134
   11526:	f820 4012 	strh.w	r4, [r0, r2, lsl #1]
        m_serPort->USART.INTFLAG.bit.ERROR = 1;
   1152a:	7e0b      	ldrb	r3, [r1, #24]
   1152c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
   11530:	760b      	strb	r3, [r1, #24]
   11532:	e00b      	b.n	1154c <_ZN9ClearCore10SerialBase12IrqHandlerRxEv+0x54>
    while (m_serPort->USART.INTFLAG.bit.RXC && nextIndex != m_inHead) {
   11534:	f8d0 2130 	ldr.w	r2, [r0, #304]	; 0x130
   11538:	429a      	cmp	r2, r3
   1153a:	d00f      	beq.n	1155c <_ZN9ClearCore10SerialBase12IrqHandlerRxEv+0x64>
        m_bufferIn[m_inTail] = m_serPort->USART.DATA.bit.DATA;
   1153c:	f8d0 2134 	ldr.w	r2, [r0, #308]	; 0x134
   11540:	6a8c      	ldr	r4, [r1, #40]	; 0x28
   11542:	3218      	adds	r2, #24
   11544:	f820 4012 	strh.w	r4, [r0, r2, lsl #1]
        m_inTail = nextIndex;
   11548:	f8c0 3134 	str.w	r3, [r0, #308]	; 0x134
        nextIndex = NextIndex(m_inTail);
   1154c:	f8d0 3134 	ldr.w	r3, [r0, #308]	; 0x134
    while (m_serPort->USART.INTFLAG.bit.RXC && nextIndex != m_inHead) {
   11550:	7e0a      	ldrb	r2, [r1, #24]
   11552:	3301      	adds	r3, #1
   11554:	0752      	lsls	r2, r2, #29
   11556:	f003 033f 	and.w	r3, r3, #63	; 0x3f
   1155a:	d4eb      	bmi.n	11534 <_ZN9ClearCore10SerialBase12IrqHandlerRxEv+0x3c>
    if (nextIndex == m_inHead) {
   1155c:	f8d0 2130 	ldr.w	r2, [r0, #304]	; 0x130
   11560:	429a      	cmp	r2, r3
   11562:	d002      	beq.n	1156a <_ZN9ClearCore10SerialBase12IrqHandlerRxEv+0x72>
}
   11564:	f85d 4b04 	ldr.w	r4, [sp], #4
   11568:	4770      	bx	lr
    m_serPort->USART.INTENCLR.reg = SERCOM_USART_INTENCLR_RXC;
   1156a:	2304      	movs	r3, #4
   1156c:	750b      	strb	r3, [r1, #20]
}
   1156e:	e7f9      	b.n	11564 <_ZN9ClearCore10SerialBase12IrqHandlerRxEv+0x6c>

00011570 <_ZN9ClearCore10SerialBase19IrqHandlerExceptionEv>:
    Interrupt handler for any serial port exceptions.

    Should be called by SERCOMx_3 Interrupt Vector.
**/
void SerialBase::IrqHandlerException() {
    switch (m_portMode) {
   11570:	79c3      	ldrb	r3, [r0, #7]
   11572:	2b01      	cmp	r3, #1
        case SPI:
            // This should not occur, but clear the interrupt flags to be safe.
            m_serPort->USART.INTFLAG.reg = SERCOM_USART_INTFLAG_ERROR;
   11574:	6903      	ldr	r3, [r0, #16]
    switch (m_portMode) {
   11576:	d022      	beq.n	115be <_ZN9ClearCore10SerialBase19IrqHandlerExceptionEv+0x4e>
            break;
        case UART:
        default:
            if (m_serPort->USART.INTFLAG.bit.ERROR) {
   11578:	7e1a      	ldrb	r2, [r3, #24]
   1157a:	09d2      	lsrs	r2, r2, #7
   1157c:	d01e      	beq.n	115bc <_ZN9ClearCore10SerialBase19IrqHandlerExceptionEv+0x4c>
                // Clear the interrupt flag
                m_serPort->USART.INTFLAG.reg = SERCOM_USART_INTFLAG_ERROR;
   1157e:	2280      	movs	r2, #128	; 0x80
   11580:	761a      	strb	r2, [r3, #24]
    if (m_serPort->USART.STATUS.bit.FERR) {
   11582:	8b5a      	ldrh	r2, [r3, #26]
   11584:	0792      	lsls	r2, r2, #30
   11586:	d509      	bpl.n	1159c <_ZN9ClearCore10SerialBase19IrqHandlerExceptionEv+0x2c>
        m_serPort->USART.STATUS.bit.FERR = 1;
   11588:	8b5a      	ldrh	r2, [r3, #26]
   1158a:	f042 0202 	orr.w	r2, r2, #2
   1158e:	835a      	strh	r2, [r3, #26]
        m_errorRegAccum.bit.SerialFrameError = 1;
   11590:	f890 2140 	ldrb.w	r2, [r0, #320]	; 0x140
   11594:	f042 0201 	orr.w	r2, r2, #1
   11598:	f880 2140 	strb.w	r2, [r0, #320]	; 0x140
    if (m_serPort->USART.STATUS.bit.PERR) {
   1159c:	8b5a      	ldrh	r2, [r3, #26]
   1159e:	07d1      	lsls	r1, r2, #31
   115a0:	d410      	bmi.n	115c4 <_ZN9ClearCore10SerialBase19IrqHandlerExceptionEv+0x54>
    if (m_serPort->USART.STATUS.bit.BUFOVF) {
   115a2:	8b5a      	ldrh	r2, [r3, #26]
   115a4:	0752      	lsls	r2, r2, #29
   115a6:	d509      	bpl.n	115bc <_ZN9ClearCore10SerialBase19IrqHandlerExceptionEv+0x4c>
        m_serPort->USART.STATUS.bit.BUFOVF = 1;
   115a8:	8b5a      	ldrh	r2, [r3, #26]
   115aa:	f042 0204 	orr.w	r2, r2, #4
   115ae:	835a      	strh	r2, [r3, #26]
        m_errorRegAccum.bit.SerialOverflowError = 1;
   115b0:	f890 3140 	ldrb.w	r3, [r0, #320]	; 0x140
   115b4:	f043 0304 	orr.w	r3, r3, #4
   115b8:	f880 3140 	strb.w	r3, [r0, #320]	; 0x140
   115bc:	4770      	bx	lr
            m_serPort->USART.INTFLAG.reg = SERCOM_USART_INTFLAG_ERROR;
   115be:	2280      	movs	r2, #128	; 0x80
   115c0:	761a      	strb	r2, [r3, #24]
            break;
   115c2:	4770      	bx	lr
        m_serPort->USART.STATUS.bit.PERR = 1;
   115c4:	8b5a      	ldrh	r2, [r3, #26]
   115c6:	f042 0201 	orr.w	r2, r2, #1
   115ca:	835a      	strh	r2, [r3, #26]
        m_errorRegAccum.bit.SerialParityError = 1;
   115cc:	f890 2140 	ldrb.w	r2, [r0, #320]	; 0x140
   115d0:	f042 0202 	orr.w	r2, r2, #2
   115d4:	f880 2140 	strb.w	r2, [r0, #320]	; 0x140
   115d8:	e7e3      	b.n	115a2 <_ZN9ClearCore10SerialBase19IrqHandlerExceptionEv+0x32>
   115da:	bf00      	nop

000115dc <_ZN9ClearCore12SerialDriver4ModeEv>:

        \return The connector's current operational mode.
    **/
    virtual ConnectorModes Mode() override {
        return Connector::Mode();
    }
   115dc:	f890 014a 	ldrb.w	r0, [r0, #330]	; 0x14a
   115e0:	4770      	bx	lr
   115e2:	bf00      	nop

000115e4 <_ZThn324_N9ClearCore12SerialDriver4ModeEv>:
    virtual ConnectorModes Mode() override {
   115e4:	f5a0 70a2 	sub.w	r0, r0, #324	; 0x144
   115e8:	e7f8      	b.n	115dc <_ZN9ClearCore12SerialDriver4ModeEv>
   115ea:	bf00      	nop

000115ec <_ZN9ClearCore12SerialDriver4TypeEv>:

        \return The type of the current connector.
    **/
    Connector::ConnectorTypes Type() override {
        return Connector::SERIAL_TYPE;
    };
   115ec:	2007      	movs	r0, #7
   115ee:	4770      	bx	lr

000115f0 <_ZThn324_N9ClearCore12SerialDriver4TypeEv>:
    Connector::ConnectorTypes Type() override {
   115f0:	f5a0 70a2 	sub.w	r0, r0, #324	; 0x144
   115f4:	e7fa      	b.n	115ec <_ZN9ClearCore12SerialDriver4TypeEv>
   115f6:	bf00      	nop

000115f8 <_ZN9ClearCore12SerialDriver10IsWritableEv>:
        \brief Get R/W status of the connector.

        \return True if the port is open.
    **/
    bool IsWritable() override {
        return PortIsOpen();
   115f8:	6803      	ldr	r3, [r0, #0]
   115fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   115fc:	4718      	bx	r3
   115fe:	bf00      	nop

00011600 <_ZThn324_N9ClearCore12SerialDriver10IsWritableEv>:
    bool IsWritable() override {
   11600:	f5a0 70a2 	sub.w	r0, r0, #324	; 0x144
   11604:	e7f8      	b.n	115f8 <_ZN9ClearCore12SerialDriver10IsWritableEv>
   11606:	bf00      	nop

00011608 <_ZN9ClearCore12SerialDriver5StateEv>:
    /**
        \brief Alias to ISerial::PortIsOpen().

        \return True if the port is open, and false otherwise.
    **/
    int16_t State() override {
   11608:	b508      	push	{r3, lr}
        return PortIsOpen();
   1160a:	6803      	ldr	r3, [r0, #0]
   1160c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   1160e:	4798      	blx	r3
    }
   11610:	b200      	sxth	r0, r0
   11612:	bd08      	pop	{r3, pc}

00011614 <_ZThn324_N9ClearCore12SerialDriver5StateEv>:
    int16_t State() override {
   11614:	f5a0 70a2 	sub.w	r0, r0, #324	; 0x144
   11618:	e7f6      	b.n	11608 <_ZN9ClearCore12SerialDriver5StateEv>
   1161a:	bf00      	nop

0001161c <_ZN9ClearCore12SerialDriver11IsInHwFaultEv>:
        return true;
    }

    bool IsInHwFault() override {
        return false;
    }
   1161c:	2000      	movs	r0, #0
   1161e:	4770      	bx	lr

00011620 <_ZThn324_N9ClearCore12SerialDriver11IsInHwFaultEv>:
    bool IsInHwFault() override {
   11620:	f5a0 70a2 	sub.w	r0, r0, #324	; 0x144
   11624:	e7fa      	b.n	1161c <_ZN9ClearCore12SerialDriver11IsInHwFaultEv>
   11626:	bf00      	nop

00011628 <_ZN9ClearCore12SerialDriver7RefreshEv>:
    void Initialize(ClearCorePins clearCorePin) override;

    /**
        Update connector's state.
    **/
    void Refresh() override {};
   11628:	4770      	bx	lr
   1162a:	bf00      	nop

0001162c <_ZThn324_N9ClearCore12SerialDriver7RefreshEv>:
   1162c:	f5a0 70a2 	sub.w	r0, r0, #324	; 0x144
   11630:	e7fa      	b.n	11628 <_ZN9ClearCore12SerialDriver7RefreshEv>
   11632:	bf00      	nop

00011634 <_ZN9ClearCore12SerialDriverC1EtNS_13ShiftRegister5MasksES2_S2_PK15PeripheralRouteS5_S5_S5_h>:
// LED feedback and option shift register
extern ShiftRegister ShiftReg;
// CCIO-8 management
extern CcioBoardManager &CcioMgr;

SerialDriver::SerialDriver(uint16_t index,
   11634:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   11638:	b082      	sub	sp, #8
   1163a:	4688      	mov	r8, r1
   1163c:	9d0c      	ldr	r5, [sp, #48]	; 0x30
   1163e:	f89d 4034 	ldrb.w	r4, [sp, #52]	; 0x34
    : SerialBase(ctsMisoInfo, rtsSsInfo, rxSckInfo, txMosiInfo,
                 peripheral),
      m_index(index),
      m_ledMask(feedBackLedMask),
      m_controlMask(controlMask),
      m_polarityMask(polarityMask) {}
   11642:	9500      	str	r5, [sp, #0]
   11644:	9401      	str	r4, [sp, #4]
   11646:	a909      	add	r1, sp, #36	; 0x24
SerialDriver::SerialDriver(uint16_t index,
   11648:	4604      	mov	r4, r0
   1164a:	4617      	mov	r7, r2
   1164c:	461e      	mov	r6, r3
      m_polarityMask(polarityMask) {}
   1164e:	c90e      	ldmia	r1, {r1, r2, r3}
SerialDriver::SerialDriver(uint16_t index,
   11650:	9d08      	ldr	r5, [sp, #32]
      m_polarityMask(polarityMask) {}
   11652:	f7ff fd75 	bl	11140 <_ZN9ClearCore10SerialBaseC1EPK15PeripheralRouteS3_S3_S3_h>
   11656:	f504 70a2 	add.w	r0, r4, #324	; 0x144
   1165a:	f7f3 fda1 	bl	51a0 <_ZN9ClearCore9ConnectorC1Ev>
   1165e:	4b09      	ldr	r3, [pc, #36]	; (11684 <_ZN9ClearCore12SerialDriverC1EtNS_13ShiftRegister5MasksES2_S2_PK15PeripheralRouteS5_S5_S5_h+0x50>)
   11660:	f884 814b 	strb.w	r8, [r4, #331]	; 0x14b
   11664:	f103 0208 	add.w	r2, r3, #8
   11668:	4620      	mov	r0, r4
   1166a:	337c      	adds	r3, #124	; 0x7c
   1166c:	f8c4 714c 	str.w	r7, [r4, #332]	; 0x14c
   11670:	f8c4 6150 	str.w	r6, [r4, #336]	; 0x150
   11674:	f8c4 5154 	str.w	r5, [r4, #340]	; 0x154
   11678:	6022      	str	r2, [r4, #0]
   1167a:	f8c4 3144 	str.w	r3, [r4, #324]	; 0x144
   1167e:	b002      	add	sp, #8
   11680:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   11684:	00023014 	.word	0x00023014

00011688 <_ZN9ClearCore12SerialDriver5SpeedEm>:
    bool Speed(uint32_t bitsPerSecond) override {
   11688:	b538      	push	{r3, r4, r5, lr}
   1168a:	4604      	mov	r4, r0
        bool retVal = SerialBase::Speed(bitsPerSecond);
   1168c:	f7fe fe50 	bl	10330 <_ZN9ClearCore10SerialBase5SpeedEm>
        if (m_portOpen) {
   11690:	f894 3029 	ldrb.w	r3, [r4, #41]	; 0x29
        bool retVal = SerialBase::Speed(bitsPerSecond);
   11694:	4605      	mov	r5, r0
        if (m_portOpen) {
   11696:	b113      	cbz	r3, 1169e <_ZN9ClearCore12SerialDriver5SpeedEm+0x16>
            WaitOneCharTime();
   11698:	4620      	mov	r0, r4
   1169a:	f7ff fd9d 	bl	111d8 <_ZN9ClearCore10SerialBase15WaitOneCharTimeEv>
    }
   1169e:	4628      	mov	r0, r5
   116a0:	bd38      	pop	{r3, r4, r5, pc}
   116a2:	bf00      	nop

000116a4 <_ZN9ClearCore12SerialDriver4ModeENS_9Connector14ConnectorModesE>:
    PortClose();
    // Default to TTL mode
    Mode(ConnectorModes::TTL);
}

bool SerialDriver::Mode(ConnectorModes newMode) {
   116a4:	b538      	push	{r3, r4, r5, lr}
    SerialBase::PortModes portMode;

    if (m_mode == newMode) {
   116a6:	f890 314a 	ldrb.w	r3, [r0, #330]	; 0x14a
   116aa:	428b      	cmp	r3, r1
   116ac:	d00d      	beq.n	116ca <_ZN9ClearCore12SerialDriver4ModeENS_9Connector14ConnectorModesE+0x26>
        // No change needed
        return true;
    }

    if (m_mode == Connector::CCIO) {
   116ae:	2b10      	cmp	r3, #16
   116b0:	460d      	mov	r5, r1
   116b2:	4604      	mov	r4, r0
   116b4:	f000 808c 	beq.w	117d0 <_ZN9ClearCore12SerialDriver4ModeENS_9Connector14ConnectorModesE+0x12c>
        CcioMgr.LinkClose();
    }

    switch (newMode) {
   116b8:	f1a5 030d 	sub.w	r3, r5, #13
   116bc:	2b03      	cmp	r3, #3
   116be:	f200 808c 	bhi.w	117da <_ZN9ClearCore12SerialDriver4ModeENS_9Connector14ConnectorModesE+0x136>
   116c2:	e8df f003 	tbb	[pc, r3]
   116c6:	3169      	.short	0x3169
   116c8:	4f06      	.short	0x4f06
        return true;
   116ca:	2501      	movs	r5, #1
    // register and settle for a full character time before sending data
    if (m_portOpen) {
        WaitOneCharTime();
    }
    return true;
}
   116cc:	4628      	mov	r0, r5
   116ce:	bd38      	pop	{r3, r4, r5, pc}
            Speed(CCIO_DEFAULT_BAUD_RATE);
   116d0:	4798      	blx	r3
        atomic_and_fetch(&m_patternOutputs[LED_BLINK_IO_SET], ~bitsToClr);
   116d2:	f8d4 2154 	ldr.w	r2, [r4, #340]	; 0x154
   116d6:	4b42      	ldr	r3, [pc, #264]	; (117e0 <_ZN9ClearCore12SerialDriver4ModeENS_9Connector14ConnectorModesE+0x13c>)
   116d8:	f3bf 8f5b 	dmb	ish
   116dc:	43d2      	mvns	r2, r2
   116de:	e853 1f00 	ldrex	r1, [r3]
   116e2:	4011      	ands	r1, r2
   116e4:	e843 1000 	strex	r0, r1, [r3]
   116e8:	2800      	cmp	r0, #0
   116ea:	d1f8      	bne.n	116de <_ZN9ClearCore12SerialDriver4ModeENS_9Connector14ConnectorModesE+0x3a>
   116ec:	f3bf 8f5b 	dmb	ish
        atomic_or_fetch(&m_patternOutputs[LED_BLINK_IO_SET], bitsToSet);
   116f0:	f8d4 2150 	ldr.w	r2, [r4, #336]	; 0x150
   116f4:	f3bf 8f5b 	dmb	ish
   116f8:	e853 1f00 	ldrex	r1, [r3]
   116fc:	4311      	orrs	r1, r2
   116fe:	e843 1000 	strex	r0, r1, [r3]
   11702:	2800      	cmp	r0, #0
   11704:	d1f8      	bne.n	116f8 <_ZN9ClearCore12SerialDriver4ModeENS_9Connector14ConnectorModesE+0x54>
   11706:	f3bf 8f5b 	dmb	ish
            portMode = SerialBase::SPI;
   1170a:	2101      	movs	r1, #1
    m_mode = newMode;
   1170c:	f884 514a 	strb.w	r5, [r4, #330]	; 0x14a
    PortMode(portMode);
   11710:	4620      	mov	r0, r4
   11712:	f7ff fd73 	bl	111fc <_ZN9ClearCore10SerialBase8PortModeENS0_9PortModesE>
    if (m_portOpen) {
   11716:	f894 5029 	ldrb.w	r5, [r4, #41]	; 0x29
   1171a:	2d00      	cmp	r5, #0
   1171c:	d0d5      	beq.n	116ca <_ZN9ClearCore12SerialDriver4ModeENS_9Connector14ConnectorModesE+0x26>
        WaitOneCharTime();
   1171e:	4620      	mov	r0, r4
   11720:	f7ff fd5a 	bl	111d8 <_ZN9ClearCore10SerialBase15WaitOneCharTimeEv>
}
   11724:	4628      	mov	r0, r5
   11726:	bd38      	pop	{r3, r4, r5, pc}
   11728:	4b2d      	ldr	r3, [pc, #180]	; (117e0 <_ZN9ClearCore12SerialDriver4ModeENS_9Connector14ConnectorModesE+0x13c>)
   1172a:	f8d4 2154 	ldr.w	r2, [r4, #340]	; 0x154
   1172e:	f3bf 8f5b 	dmb	ish
   11732:	e853 1f00 	ldrex	r1, [r3]
   11736:	4311      	orrs	r1, r2
   11738:	e843 1000 	strex	r0, r1, [r3]
   1173c:	2800      	cmp	r0, #0
   1173e:	d1f8      	bne.n	11732 <_ZN9ClearCore12SerialDriver4ModeENS_9Connector14ConnectorModesE+0x8e>
   11740:	f3bf 8f5b 	dmb	ish
        atomic_and_fetch(&m_patternOutputs[LED_BLINK_IO_SET], ~bitsToClr);
   11744:	f8d4 2150 	ldr.w	r2, [r4, #336]	; 0x150
   11748:	f3bf 8f5b 	dmb	ish
   1174c:	43d2      	mvns	r2, r2
   1174e:	e853 1f00 	ldrex	r1, [r3]
   11752:	4011      	ands	r1, r2
   11754:	e843 1000 	strex	r0, r1, [r3]
   11758:	2800      	cmp	r0, #0
   1175a:	d1f8      	bne.n	1174e <_ZN9ClearCore12SerialDriver4ModeENS_9Connector14ConnectorModesE+0xaa>
   1175c:	f3bf 8f5b 	dmb	ish
            portMode = SerialBase::UART;
   11760:	2100      	movs	r1, #0
   11762:	e7d3      	b.n	1170c <_ZN9ClearCore12SerialDriver4ModeENS_9Connector14ConnectorModesE+0x68>
            SpiClock(SerialDriver::SCK_LOW, SerialDriver::LEAD_CHANGE);
   11764:	2201      	movs	r2, #1
   11766:	2100      	movs	r1, #0
   11768:	4620      	mov	r0, r4
   1176a:	f7ff fd8d 	bl	11288 <_ZN9ClearCore10SerialBase8SpiClockENS0_18SpiClockPolaritiesENS0_14SpiClockPhasesE>
            SpiSsMode(SerialBase::CtrlLineModes::LINE_ON);
   1176e:	2101      	movs	r1, #1
   11770:	4620      	mov	r0, r4
   11772:	f7ff fd4f 	bl	11214 <_ZN9ClearCore10SerialBase9SpiSsModeENS0_13CtrlLineModesE>
            Speed(CCIO_DEFAULT_BAUD_RATE);
   11776:	6823      	ldr	r3, [r4, #0]
   11778:	4a1a      	ldr	r2, [pc, #104]	; (117e4 <_ZN9ClearCore12SerialDriver4ModeENS_9Connector14ConnectorModesE+0x140>)
   1177a:	691b      	ldr	r3, [r3, #16]
        bool retVal = SerialBase::Speed(bitsPerSecond);
   1177c:	491a      	ldr	r1, [pc, #104]	; (117e8 <_ZN9ClearCore12SerialDriver4ModeENS_9Connector14ConnectorModesE+0x144>)
   1177e:	4293      	cmp	r3, r2
   11780:	4620      	mov	r0, r4
   11782:	d1a5      	bne.n	116d0 <_ZN9ClearCore12SerialDriver4ModeENS_9Connector14ConnectorModesE+0x2c>
   11784:	f7fe fdd4 	bl	10330 <_ZN9ClearCore10SerialBase5SpeedEm>
        if (m_portOpen) {
   11788:	f894 3029 	ldrb.w	r3, [r4, #41]	; 0x29
   1178c:	2b00      	cmp	r3, #0
   1178e:	d0a0      	beq.n	116d2 <_ZN9ClearCore12SerialDriver4ModeENS_9Connector14ConnectorModesE+0x2e>
            WaitOneCharTime();
   11790:	4620      	mov	r0, r4
   11792:	f7ff fd21 	bl	111d8 <_ZN9ClearCore10SerialBase15WaitOneCharTimeEv>
   11796:	e79c      	b.n	116d2 <_ZN9ClearCore12SerialDriver4ModeENS_9Connector14ConnectorModesE+0x2e>
   11798:	f8d4 2154 	ldr.w	r2, [r4, #340]	; 0x154
   1179c:	4b10      	ldr	r3, [pc, #64]	; (117e0 <_ZN9ClearCore12SerialDriver4ModeENS_9Connector14ConnectorModesE+0x13c>)
   1179e:	f3bf 8f5b 	dmb	ish
   117a2:	43d2      	mvns	r2, r2
   117a4:	e853 1f00 	ldrex	r1, [r3]
   117a8:	4011      	ands	r1, r2
   117aa:	e843 1000 	strex	r0, r1, [r3]
   117ae:	2800      	cmp	r0, #0
   117b0:	d1f8      	bne.n	117a4 <_ZN9ClearCore12SerialDriver4ModeENS_9Connector14ConnectorModesE+0x100>
   117b2:	f3bf 8f5b 	dmb	ish
   117b6:	f8d4 2150 	ldr.w	r2, [r4, #336]	; 0x150
   117ba:	f3bf 8f5b 	dmb	ish
   117be:	43d2      	mvns	r2, r2
   117c0:	e853 1f00 	ldrex	r1, [r3]
   117c4:	4011      	ands	r1, r2
   117c6:	e843 1000 	strex	r0, r1, [r3]
   117ca:	2800      	cmp	r0, #0
   117cc:	d0c6      	beq.n	1175c <_ZN9ClearCore12SerialDriver4ModeENS_9Connector14ConnectorModesE+0xb8>
   117ce:	e7f7      	b.n	117c0 <_ZN9ClearCore12SerialDriver4ModeENS_9Connector14ConnectorModesE+0x11c>
        CcioMgr.LinkClose();
   117d0:	4b06      	ldr	r3, [pc, #24]	; (117ec <_ZN9ClearCore12SerialDriver4ModeENS_9Connector14ConnectorModesE+0x148>)
   117d2:	6818      	ldr	r0, [r3, #0]
   117d4:	f7fe fbcc 	bl	ff70 <_ZN9ClearCore16CcioBoardManager9LinkCloseEv>
   117d8:	e76e      	b.n	116b8 <_ZN9ClearCore12SerialDriver4ModeENS_9Connector14ConnectorModesE+0x14>
            return false;
   117da:	2500      	movs	r5, #0
   117dc:	e776      	b.n	116cc <_ZN9ClearCore12SerialDriver4ModeENS_9Connector14ConnectorModesE+0x28>
   117de:	bf00      	nop
   117e0:	20001bf4 	.word	0x20001bf4
   117e4:	00011689 	.word	0x00011689
   117e8:	0007a120 	.word	0x0007a120
   117ec:	20001f28 	.word	0x20001f28

000117f0 <_ZThn324_N9ClearCore12SerialDriver4ModeENS_9Connector14ConnectorModesE>:
    bool Mode(ConnectorModes newMode) override;
   117f0:	f5a0 70a2 	sub.w	r0, r0, #324	; 0x144
   117f4:	f7ff bf56 	b.w	116a4 <_ZN9ClearCore12SerialDriver4ModeENS_9Connector14ConnectorModesE>

000117f8 <_ZN9ClearCore12SerialDriver8PortOpenEv>:

void SerialDriver::PortOpen() {
   117f8:	b510      	push	{r4, lr}
   117fa:	4604      	mov	r4, r0
    if (!SerialBase::PortIsOpen()) {
   117fc:	f7fe fcfa 	bl	101f4 <_ZN9ClearCore10SerialBase10PortIsOpenEv>
   11800:	b100      	cbz	r0, 11804 <_ZN9ClearCore12SerialDriver8PortOpenEv+0xc>
   11802:	bd10      	pop	{r4, pc}
        SerialBase::PortOpen();
   11804:	4620      	mov	r0, r4
   11806:	f7ff fc8f 	bl	11128 <_ZN9ClearCore10SerialBase8PortOpenEv>
        // Delay to allow the port polarity to be written to the shift
        // register and settle for a full character time before sending data
        WaitOneCharTime();
   1180a:	4620      	mov	r0, r4
   1180c:	f7ff fce4 	bl	111d8 <_ZN9ClearCore10SerialBase15WaitOneCharTimeEv>
        atomic_or_fetch(&m_patternOutputs[LED_BLINK_IO_SET], bitsToSet);
   11810:	4b0c      	ldr	r3, [pc, #48]	; (11844 <_ZN9ClearCore12SerialDriver8PortOpenEv+0x4c>)
   11812:	f8d4 214c 	ldr.w	r2, [r4, #332]	; 0x14c
   11816:	f3bf 8f5b 	dmb	ish
   1181a:	e853 1f00 	ldrex	r1, [r3]
   1181e:	4311      	orrs	r1, r2
   11820:	e843 1000 	strex	r0, r1, [r3]
   11824:	2800      	cmp	r0, #0
   11826:	d1f8      	bne.n	1181a <_ZN9ClearCore12SerialDriver8PortOpenEv+0x22>
   11828:	f3bf 8f5b 	dmb	ish
        // LED under connector on
        ShiftReg.ShifterStateSet(m_ledMask);

        // Initialize the CCIO manager
        if (m_mode == Connector::CCIO) {
   1182c:	f894 314a 	ldrb.w	r3, [r4, #330]	; 0x14a
   11830:	2b10      	cmp	r3, #16
   11832:	d1e6      	bne.n	11802 <_ZN9ClearCore12SerialDriver8PortOpenEv+0xa>
            CcioMgr.CcioDiscover(this);
   11834:	4b04      	ldr	r3, [pc, #16]	; (11848 <_ZN9ClearCore12SerialDriver8PortOpenEv+0x50>)
   11836:	4621      	mov	r1, r4
   11838:	6818      	ldr	r0, [r3, #0]
        }
    }
}
   1183a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
            CcioMgr.CcioDiscover(this);
   1183e:	f7fe bbb7 	b.w	ffb0 <_ZN9ClearCore16CcioBoardManager12CcioDiscoverEPNS_12SerialDriverE>
   11842:	bf00      	nop
   11844:	20001bf4 	.word	0x20001bf4
   11848:	20001f28 	.word	0x20001f28

0001184c <_ZN9ClearCore12SerialDriver9PortCloseEv>:

void SerialDriver::PortClose() {
   1184c:	b510      	push	{r4, lr}
   1184e:	4604      	mov	r4, r0
    if (SerialBase::PortIsOpen()) {
   11850:	f7fe fcd0 	bl	101f4 <_ZN9ClearCore10SerialBase10PortIsOpenEv>
   11854:	b1a8      	cbz	r0, 11882 <_ZN9ClearCore12SerialDriver9PortCloseEv+0x36>
        if (m_mode == Connector::CCIO) {
   11856:	f894 314a 	ldrb.w	r3, [r4, #330]	; 0x14a
   1185a:	2b10      	cmp	r3, #16
   1185c:	d012      	beq.n	11884 <_ZN9ClearCore12SerialDriver9PortCloseEv+0x38>
            CcioMgr.LinkClose();
        }
        SerialBase::PortClose();
   1185e:	4620      	mov	r0, r4
   11860:	f7fe fe10 	bl	10484 <_ZN9ClearCore10SerialBase9PortCloseEv>
        atomic_and_fetch(&m_patternOutputs[LED_BLINK_IO_SET], ~bitsToClr);
   11864:	f8d4 314c 	ldr.w	r3, [r4, #332]	; 0x14c
   11868:	4a09      	ldr	r2, [pc, #36]	; (11890 <_ZN9ClearCore12SerialDriver9PortCloseEv+0x44>)
   1186a:	f3bf 8f5b 	dmb	ish
   1186e:	43db      	mvns	r3, r3
   11870:	e852 1f00 	ldrex	r1, [r2]
   11874:	4019      	ands	r1, r3
   11876:	e842 1000 	strex	r0, r1, [r2]
   1187a:	2800      	cmp	r0, #0
   1187c:	d1f8      	bne.n	11870 <_ZN9ClearCore12SerialDriver9PortCloseEv+0x24>
   1187e:	f3bf 8f5b 	dmb	ish
   11882:	bd10      	pop	{r4, pc}
            CcioMgr.LinkClose();
   11884:	4b03      	ldr	r3, [pc, #12]	; (11894 <_ZN9ClearCore12SerialDriver9PortCloseEv+0x48>)
   11886:	6818      	ldr	r0, [r3, #0]
   11888:	f7fe fb72 	bl	ff70 <_ZN9ClearCore16CcioBoardManager9LinkCloseEv>
   1188c:	e7e7      	b.n	1185e <_ZN9ClearCore12SerialDriver9PortCloseEv+0x12>
   1188e:	bf00      	nop
   11890:	20001bf4 	.word	0x20001bf4
   11894:	20001f28 	.word	0x20001f28

00011898 <_ZN9ClearCore12SerialDriver10InitializeE13ClearCorePins>:
    PortClose();
   11898:	6803      	ldr	r3, [r0, #0]
   1189a:	4a37      	ldr	r2, [pc, #220]	; (11978 <_ZN9ClearCore12SerialDriver10InitializeE13ClearCorePins+0xe0>)
   1189c:	68db      	ldr	r3, [r3, #12]
   1189e:	4293      	cmp	r3, r2
void SerialDriver::Initialize(ClearCorePins clearCorePin) {
   118a0:	b510      	push	{r4, lr}
   118a2:	4604      	mov	r4, r0
    m_clearCorePin = clearCorePin;
   118a4:	f8a0 1148 	strh.w	r1, [r0, #328]	; 0x148
   118a8:	d150      	bne.n	1194c <_ZN9ClearCore12SerialDriver10InitializeE13ClearCorePins+0xb4>
    if (SerialBase::PortIsOpen()) {
   118aa:	f7fe fca3 	bl	101f4 <_ZN9ClearCore10SerialBase10PortIsOpenEv>
   118ae:	b1a8      	cbz	r0, 118dc <_ZN9ClearCore12SerialDriver10InitializeE13ClearCorePins+0x44>
        if (m_mode == Connector::CCIO) {
   118b0:	f894 314a 	ldrb.w	r3, [r4, #330]	; 0x14a
   118b4:	2b10      	cmp	r3, #16
   118b6:	d059      	beq.n	1196c <_ZN9ClearCore12SerialDriver10InitializeE13ClearCorePins+0xd4>
        SerialBase::PortClose();
   118b8:	4620      	mov	r0, r4
   118ba:	f7fe fde3 	bl	10484 <_ZN9ClearCore10SerialBase9PortCloseEv>
   118be:	f8d4 314c 	ldr.w	r3, [r4, #332]	; 0x14c
   118c2:	4a2e      	ldr	r2, [pc, #184]	; (1197c <_ZN9ClearCore12SerialDriver10InitializeE13ClearCorePins+0xe4>)
   118c4:	f3bf 8f5b 	dmb	ish
   118c8:	43db      	mvns	r3, r3
   118ca:	e852 1f00 	ldrex	r1, [r2]
   118ce:	4019      	ands	r1, r3
   118d0:	e842 1000 	strex	r0, r1, [r2]
   118d4:	2800      	cmp	r0, #0
   118d6:	d1f8      	bne.n	118ca <_ZN9ClearCore12SerialDriver10InitializeE13ClearCorePins+0x32>
   118d8:	f3bf 8f5b 	dmb	ish
    Mode(ConnectorModes::TTL);
   118dc:	6823      	ldr	r3, [r4, #0]
   118de:	4a28      	ldr	r2, [pc, #160]	; (11980 <_ZN9ClearCore12SerialDriver10InitializeE13ClearCorePins+0xe8>)
   118e0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   118e2:	4293      	cmp	r3, r2
   118e4:	d138      	bne.n	11958 <_ZN9ClearCore12SerialDriver10InitializeE13ClearCorePins+0xc0>
    if (m_mode == newMode) {
   118e6:	f894 314a 	ldrb.w	r3, [r4, #330]	; 0x14a
   118ea:	2b0d      	cmp	r3, #13
   118ec:	d028      	beq.n	11940 <_ZN9ClearCore12SerialDriver10InitializeE13ClearCorePins+0xa8>
    if (m_mode == Connector::CCIO) {
   118ee:	2b10      	cmp	r3, #16
   118f0:	d037      	beq.n	11962 <_ZN9ClearCore12SerialDriver10InitializeE13ClearCorePins+0xca>
   118f2:	f8d4 2154 	ldr.w	r2, [r4, #340]	; 0x154
   118f6:	4b21      	ldr	r3, [pc, #132]	; (1197c <_ZN9ClearCore12SerialDriver10InitializeE13ClearCorePins+0xe4>)
   118f8:	f3bf 8f5b 	dmb	ish
   118fc:	43d2      	mvns	r2, r2
   118fe:	e853 1f00 	ldrex	r1, [r3]
   11902:	4011      	ands	r1, r2
   11904:	e843 1000 	strex	r0, r1, [r3]
   11908:	2800      	cmp	r0, #0
   1190a:	d1f8      	bne.n	118fe <_ZN9ClearCore12SerialDriver10InitializeE13ClearCorePins+0x66>
   1190c:	f3bf 8f5b 	dmb	ish
   11910:	f8d4 2150 	ldr.w	r2, [r4, #336]	; 0x150
   11914:	f3bf 8f5b 	dmb	ish
   11918:	43d2      	mvns	r2, r2
   1191a:	e853 1f00 	ldrex	r1, [r3]
   1191e:	4011      	ands	r1, r2
   11920:	e843 1000 	strex	r0, r1, [r3]
   11924:	2800      	cmp	r0, #0
   11926:	d1f8      	bne.n	1191a <_ZN9ClearCore12SerialDriver10InitializeE13ClearCorePins+0x82>
   11928:	f3bf 8f5b 	dmb	ish
    m_mode = newMode;
   1192c:	230d      	movs	r3, #13
   1192e:	f884 314a 	strb.w	r3, [r4, #330]	; 0x14a
    PortMode(portMode);
   11932:	4620      	mov	r0, r4
   11934:	2100      	movs	r1, #0
   11936:	f7ff fc61 	bl	111fc <_ZN9ClearCore10SerialBase8PortModeENS0_9PortModesE>
    if (m_portOpen) {
   1193a:	f894 3029 	ldrb.w	r3, [r4, #41]	; 0x29
   1193e:	b903      	cbnz	r3, 11942 <_ZN9ClearCore12SerialDriver10InitializeE13ClearCorePins+0xaa>
   11940:	bd10      	pop	{r4, pc}
        WaitOneCharTime();
   11942:	4620      	mov	r0, r4
}
   11944:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        WaitOneCharTime();
   11948:	f7ff bc46 	b.w	111d8 <_ZN9ClearCore10SerialBase15WaitOneCharTimeEv>
    PortClose();
   1194c:	4798      	blx	r3
    Mode(ConnectorModes::TTL);
   1194e:	6823      	ldr	r3, [r4, #0]
   11950:	4a0b      	ldr	r2, [pc, #44]	; (11980 <_ZN9ClearCore12SerialDriver10InitializeE13ClearCorePins+0xe8>)
   11952:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   11954:	4293      	cmp	r3, r2
   11956:	d0c6      	beq.n	118e6 <_ZN9ClearCore12SerialDriver10InitializeE13ClearCorePins+0x4e>
   11958:	4620      	mov	r0, r4
   1195a:	210d      	movs	r1, #13
}
   1195c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    Mode(ConnectorModes::TTL);
   11960:	4718      	bx	r3
        CcioMgr.LinkClose();
   11962:	4b08      	ldr	r3, [pc, #32]	; (11984 <_ZN9ClearCore12SerialDriver10InitializeE13ClearCorePins+0xec>)
   11964:	6818      	ldr	r0, [r3, #0]
   11966:	f7fe fb03 	bl	ff70 <_ZN9ClearCore16CcioBoardManager9LinkCloseEv>
   1196a:	e7c2      	b.n	118f2 <_ZN9ClearCore12SerialDriver10InitializeE13ClearCorePins+0x5a>
            CcioMgr.LinkClose();
   1196c:	4b05      	ldr	r3, [pc, #20]	; (11984 <_ZN9ClearCore12SerialDriver10InitializeE13ClearCorePins+0xec>)
   1196e:	6818      	ldr	r0, [r3, #0]
   11970:	f7fe fafe 	bl	ff70 <_ZN9ClearCore16CcioBoardManager9LinkCloseEv>
   11974:	e7a0      	b.n	118b8 <_ZN9ClearCore12SerialDriver10InitializeE13ClearCorePins+0x20>
   11976:	bf00      	nop
   11978:	0001184d 	.word	0x0001184d
   1197c:	20001bf4 	.word	0x20001bf4
   11980:	000116a5 	.word	0x000116a5
   11984:	20001f28 	.word	0x20001f28

00011988 <_ZThn324_N9ClearCore12SerialDriver10InitializeE13ClearCorePins>:
    void Initialize(ClearCorePins clearCorePin) override;
   11988:	f5a0 70a2 	sub.w	r0, r0, #324	; 0x144
   1198c:	f7ff bf84 	b.w	11898 <_ZN9ClearCore12SerialDriver10InitializeE13ClearCorePins>

00011990 <_ZN9ClearCore12SerialDriver5StateEs>:
    bool State(int16_t newState) override {
   11990:	b510      	push	{r4, lr}
            PortOpen();
   11992:	6803      	ldr	r3, [r0, #0]
    bool State(int16_t newState) override {
   11994:	4604      	mov	r4, r0
        if (newState) {
   11996:	bb09      	cbnz	r1, 119dc <_ZN9ClearCore12SerialDriver5StateEs+0x4c>
   11998:	4a26      	ldr	r2, [pc, #152]	; (11a34 <_ZN9ClearCore12SerialDriver5StateEs+0xa4>)
            PortClose();
   1199a:	68db      	ldr	r3, [r3, #12]
   1199c:	4293      	cmp	r3, r2
   1199e:	d11a      	bne.n	119d6 <_ZN9ClearCore12SerialDriver5StateEs+0x46>
    if (SerialBase::PortIsOpen()) {
   119a0:	f7fe fc28 	bl	101f4 <_ZN9ClearCore10SerialBase10PortIsOpenEv>
   119a4:	b1a8      	cbz	r0, 119d2 <_ZN9ClearCore12SerialDriver5StateEs+0x42>
        if (m_mode == Connector::CCIO) {
   119a6:	f894 314a 	ldrb.w	r3, [r4, #330]	; 0x14a
   119aa:	2b10      	cmp	r3, #16
   119ac:	d03c      	beq.n	11a28 <_ZN9ClearCore12SerialDriver5StateEs+0x98>
        SerialBase::PortClose();
   119ae:	4620      	mov	r0, r4
   119b0:	f7fe fd68 	bl	10484 <_ZN9ClearCore10SerialBase9PortCloseEv>
   119b4:	f8d4 314c 	ldr.w	r3, [r4, #332]	; 0x14c
   119b8:	4a1f      	ldr	r2, [pc, #124]	; (11a38 <_ZN9ClearCore12SerialDriver5StateEs+0xa8>)
   119ba:	f3bf 8f5b 	dmb	ish
   119be:	43db      	mvns	r3, r3
   119c0:	e852 1f00 	ldrex	r1, [r2]
   119c4:	4019      	ands	r1, r3
   119c6:	e842 1000 	strex	r0, r1, [r2]
   119ca:	2800      	cmp	r0, #0
   119cc:	d1f8      	bne.n	119c0 <_ZN9ClearCore12SerialDriver5StateEs+0x30>
   119ce:	f3bf 8f5b 	dmb	ish
    }
   119d2:	2001      	movs	r0, #1
   119d4:	bd10      	pop	{r4, pc}
            PortClose();
   119d6:	4798      	blx	r3
    }
   119d8:	2001      	movs	r0, #1
   119da:	bd10      	pop	{r4, pc}
   119dc:	4a17      	ldr	r2, [pc, #92]	; (11a3c <_ZN9ClearCore12SerialDriver5StateEs+0xac>)
            PortOpen();
   119de:	689b      	ldr	r3, [r3, #8]
   119e0:	4293      	cmp	r3, r2
   119e2:	d1f8      	bne.n	119d6 <_ZN9ClearCore12SerialDriver5StateEs+0x46>
    if (!SerialBase::PortIsOpen()) {
   119e4:	f7fe fc06 	bl	101f4 <_ZN9ClearCore10SerialBase10PortIsOpenEv>
   119e8:	2800      	cmp	r0, #0
   119ea:	d1f2      	bne.n	119d2 <_ZN9ClearCore12SerialDriver5StateEs+0x42>
        SerialBase::PortOpen();
   119ec:	4620      	mov	r0, r4
   119ee:	f7ff fb9b 	bl	11128 <_ZN9ClearCore10SerialBase8PortOpenEv>
        WaitOneCharTime();
   119f2:	4620      	mov	r0, r4
   119f4:	f7ff fbf0 	bl	111d8 <_ZN9ClearCore10SerialBase15WaitOneCharTimeEv>
        atomic_or_fetch(&m_patternOutputs[LED_BLINK_IO_SET], bitsToSet);
   119f8:	4b0f      	ldr	r3, [pc, #60]	; (11a38 <_ZN9ClearCore12SerialDriver5StateEs+0xa8>)
   119fa:	f8d4 214c 	ldr.w	r2, [r4, #332]	; 0x14c
   119fe:	f3bf 8f5b 	dmb	ish
   11a02:	e853 1f00 	ldrex	r1, [r3]
   11a06:	4311      	orrs	r1, r2
   11a08:	e843 1000 	strex	r0, r1, [r3]
   11a0c:	2800      	cmp	r0, #0
   11a0e:	d1f8      	bne.n	11a02 <_ZN9ClearCore12SerialDriver5StateEs+0x72>
   11a10:	f3bf 8f5b 	dmb	ish
        if (m_mode == Connector::CCIO) {
   11a14:	f894 314a 	ldrb.w	r3, [r4, #330]	; 0x14a
   11a18:	2b10      	cmp	r3, #16
   11a1a:	d1da      	bne.n	119d2 <_ZN9ClearCore12SerialDriver5StateEs+0x42>
            CcioMgr.CcioDiscover(this);
   11a1c:	4b08      	ldr	r3, [pc, #32]	; (11a40 <_ZN9ClearCore12SerialDriver5StateEs+0xb0>)
   11a1e:	4621      	mov	r1, r4
   11a20:	6818      	ldr	r0, [r3, #0]
   11a22:	f7fe fac5 	bl	ffb0 <_ZN9ClearCore16CcioBoardManager12CcioDiscoverEPNS_12SerialDriverE>
   11a26:	e7d4      	b.n	119d2 <_ZN9ClearCore12SerialDriver5StateEs+0x42>
            CcioMgr.LinkClose();
   11a28:	4b05      	ldr	r3, [pc, #20]	; (11a40 <_ZN9ClearCore12SerialDriver5StateEs+0xb0>)
   11a2a:	6818      	ldr	r0, [r3, #0]
   11a2c:	f7fe faa0 	bl	ff70 <_ZN9ClearCore16CcioBoardManager9LinkCloseEv>
   11a30:	e7bd      	b.n	119ae <_ZN9ClearCore12SerialDriver5StateEs+0x1e>
   11a32:	bf00      	nop
   11a34:	0001184d 	.word	0x0001184d
   11a38:	20001bf4 	.word	0x20001bf4
   11a3c:	000117f9 	.word	0x000117f9
   11a40:	20001f28 	.word	0x20001f28

00011a44 <_ZThn324_N9ClearCore12SerialDriver5StateEs>:
    bool State(int16_t newState) override {
   11a44:	f5a0 70a2 	sub.w	r0, r0, #324	; 0x144
   11a48:	e7a2      	b.n	11990 <_ZN9ClearCore12SerialDriver5StateEs>
   11a4a:	bf00      	nop

00011a4c <_ZN9ClearCore9LedDriver4ModeEv>:

        \return The connector's current operational mode.
    **/
    virtual ConnectorModes Mode() override {
        return Connector::Mode();
    }
   11a4c:	7980      	ldrb	r0, [r0, #6]
   11a4e:	4770      	bx	lr

00011a50 <_ZN9ClearCore9LedDriver4ModeENS_9Connector14ConnectorModesE>:
        The only valid mode for this connector type is: #OUTPUT_DIGITAL.
        \return Returns false if the mode is invalid or setup fails.
    **/
    bool Mode(ConnectorModes newMode) override {
        return newMode == ConnectorModes::OUTPUT_DIGITAL;
    }
   11a50:	f1a1 0004 	sub.w	r0, r1, #4
   11a54:	fab0 f080 	clz	r0, r0
   11a58:	0940      	lsrs	r0, r0, #5
   11a5a:	4770      	bx	lr

00011a5c <_ZN9ClearCore9LedDriver4TypeEv>:

        \return The type of the current connector.
    **/
    Connector::ConnectorTypes Type() override {
        return Connector::SHIFT_REG_TYPE;
    }
   11a5c:	2002      	movs	r0, #2
   11a5e:	4770      	bx	lr

00011a60 <_ZN9ClearCore9LedDriver10IsWritableEv>:

        \return True because this connector is always writable.
    **/
    bool IsWritable() override {
        return true;
    }
   11a60:	2001      	movs	r0, #1
   11a62:	4770      	bx	lr

00011a64 <_ZN9ClearCore9LedDriver11IsInHwFaultEv>:
    bool State(int16_t newState) override;

#ifndef HIDE_FROM_DOXYGEN
    bool IsInHwFault() override {
        return false;
    }
   11a64:	2000      	movs	r0, #0
   11a66:	4770      	bx	lr

00011a68 <_ZN9ClearCore9LedDriver7RefreshEv>:
        Poll the underlying connector for new state update.

        This is typically called from a timer or main loop to update the
        underlying value.
    **/
    void Refresh() override {}
   11a68:	4770      	bx	lr
   11a6a:	bf00      	nop

00011a6c <_ZN9ClearCore9LedDriver10InitializeE13ClearCorePins>:
        \note This class requires no initialization, but requires an
        implementation of Initialize() to be a concrete class.
    **/
    void Initialize(ClearCorePins clearCorePin) override {
        m_clearCorePin = clearCorePin;
        m_mode = OUTPUT_DIGITAL;
   11a6c:	2304      	movs	r3, #4
        m_clearCorePin = clearCorePin;
   11a6e:	8081      	strh	r1, [r0, #4]
        m_mode = OUTPUT_DIGITAL;
   11a70:	7183      	strb	r3, [r0, #6]
   11a72:	4770      	bx	lr

00011a74 <_ZN9ClearCore9LedDriver5StateEv>:
        return atomic_load_n(&m_patternOutputs[LED_BLINK_IO_SET]);
   11a74:	4b04      	ldr	r3, [pc, #16]	; (11a88 <_ZN9ClearCore9LedDriver5StateEv+0x14>)
   11a76:	681a      	ldr	r2, [r3, #0]
   11a78:	f3bf 8f5b 	dmb	ish
LedDriver::LedDriver(ShiftRegister::Masks ledMask)
    : Connector(),
      m_ledMask(ledMask) {}

int16_t LedDriver::State() {
    return static_cast<bool>(ShiftReg.ShifterState().reg & m_ledMask);
   11a7c:	6883      	ldr	r3, [r0, #8]
   11a7e:	421a      	tst	r2, r3
}
   11a80:	bf14      	ite	ne
   11a82:	2001      	movne	r0, #1
   11a84:	2000      	moveq	r0, #0
   11a86:	4770      	bx	lr
   11a88:	20001bf4 	.word	0x20001bf4

00011a8c <_ZN9ClearCore9LedDriver5StateEs>:

bool LedDriver::State(int16_t newState) {
    ShiftReg.ShifterState(newState, m_ledMask);
   11a8c:	6883      	ldr	r3, [r0, #8]
        : ShifterStateClear(bitsToChange);
   11a8e:	b971      	cbnz	r1, 11aae <_ZN9ClearCore9LedDriver5StateEs+0x22>
        atomic_and_fetch(&m_patternOutputs[LED_BLINK_IO_SET], ~bitsToClr);
   11a90:	f3bf 8f5b 	dmb	ish
   11a94:	4a0d      	ldr	r2, [pc, #52]	; (11acc <_ZN9ClearCore9LedDriver5StateEs+0x40>)
   11a96:	43db      	mvns	r3, r3
   11a98:	e852 1f00 	ldrex	r1, [r2]
   11a9c:	4019      	ands	r1, r3
   11a9e:	e842 1000 	strex	r0, r1, [r2]
   11aa2:	2800      	cmp	r0, #0
   11aa4:	d1f8      	bne.n	11a98 <_ZN9ClearCore9LedDriver5StateEs+0xc>
   11aa6:	f3bf 8f5b 	dmb	ish
    return true;
}
   11aaa:	2001      	movs	r0, #1
   11aac:	4770      	bx	lr
        atomic_or_fetch(&m_patternOutputs[LED_BLINK_IO_SET], bitsToSet);
   11aae:	4a07      	ldr	r2, [pc, #28]	; (11acc <_ZN9ClearCore9LedDriver5StateEs+0x40>)
   11ab0:	f3bf 8f5b 	dmb	ish
   11ab4:	e852 1f00 	ldrex	r1, [r2]
   11ab8:	4319      	orrs	r1, r3
   11aba:	e842 1000 	strex	r0, r1, [r2]
   11abe:	2800      	cmp	r0, #0
   11ac0:	d1f8      	bne.n	11ab4 <_ZN9ClearCore9LedDriver5StateEs+0x28>
        atomic_and_fetch(&m_patternOutputs[LED_BLINK_IO_SET], ~bitsToClr);
   11ac2:	f3bf 8f5b 	dmb	ish
   11ac6:	2001      	movs	r0, #1
   11ac8:	4770      	bx	lr
   11aca:	bf00      	nop
   11acc:	20001bf4 	.word	0x20001bf4

00011ad0 <_ZN9ClearCore9LedDriverC1ENS_13ShiftRegister5MasksE>:
LedDriver::LedDriver(ShiftRegister::Masks ledMask)
   11ad0:	b538      	push	{r3, r4, r5, lr}
   11ad2:	4604      	mov	r4, r0
   11ad4:	460d      	mov	r5, r1
      m_ledMask(ledMask) {}
   11ad6:	f7f3 fb63 	bl	51a0 <_ZN9ClearCore9ConnectorC1Ev>
   11ada:	4b02      	ldr	r3, [pc, #8]	; (11ae4 <_ZN9ClearCore9LedDriverC1ENS_13ShiftRegister5MasksE+0x14>)
   11adc:	60a5      	str	r5, [r4, #8]
   11ade:	6023      	str	r3, [r4, #0]
   11ae0:	4620      	mov	r0, r4
   11ae2:	bd38      	pop	{r3, r4, r5, pc}
   11ae4:	000230c0 	.word	0x000230c0

00011ae8 <_ZN9ClearCore10XBeeDriverC1EPK15PeripheralRouteS3_S3_S3_h>:
namespace ClearCore {

/**
    Construct and wire into the board.
**/
XBeeDriver::XBeeDriver(const PeripheralRoute *ctsInfo,
   11ae8:	b530      	push	{r4, r5, lr}
   11aea:	b083      	sub	sp, #12
   11aec:	f89d 401c 	ldrb.w	r4, [sp, #28]
   11af0:	9d06      	ldr	r5, [sp, #24]
                       const PeripheralRoute *rtsInfo,
                       const PeripheralRoute *rxInfo,
                       const PeripheralRoute *txInfo,
                       uint8_t peripheral)
    : SerialBase(ctsInfo, rtsInfo, rxInfo, txInfo, peripheral) {
   11af2:	9401      	str	r4, [sp, #4]
   11af4:	9500      	str	r5, [sp, #0]
XBeeDriver::XBeeDriver(const PeripheralRoute *ctsInfo,
   11af6:	4604      	mov	r4, r0
    : SerialBase(ctsInfo, rtsInfo, rxInfo, txInfo, peripheral) {
   11af8:	f7ff fb22 	bl	11140 <_ZN9ClearCore10SerialBaseC1EPK15PeripheralRouteS3_S3_S3_h>
   11afc:	4b04      	ldr	r3, [pc, #16]	; (11b10 <_ZN9ClearCore10XBeeDriverC1EPK15PeripheralRouteS3_S3_S3_h+0x28>)
   11afe:	6023      	str	r3, [r4, #0]
    PortMode(SerialBase::UART);
   11b00:	4620      	mov	r0, r4
   11b02:	2100      	movs	r1, #0
   11b04:	f7ff fb7a 	bl	111fc <_ZN9ClearCore10SerialBase8PortModeENS0_9PortModesE>
}
   11b08:	4620      	mov	r0, r4
   11b0a:	b003      	add	sp, #12
   11b0c:	bd30      	pop	{r4, r5, pc}
   11b0e:	bf00      	nop
   11b10:	000229f0 	.word	0x000229f0

00011b14 <_dummy_func_no_return>:
static bool _dummy_func_no_return(uint32_t unused0, uint32_t unused1)
{
	(void)unused0;
	(void)unused1;
	return false;
}
   11b14:	2000      	movs	r0, #0
   11b16:	4770      	bx	lr

00011b18 <_usb_d_dev_in_next>:
 * \brief Prepare next IN transactions
 * \param[in] ept Pointer to endpoint information.
 * \param[in] isr Invoked from ISR.
 */
static void _usb_d_dev_in_next(struct _usb_d_dev_ep *ept, bool isr)
{
   11b18:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   11b1c:	4605      	mov	r5, r0
	Usb *              hw          = USB;
	uint8_t            epn         = USB_EP_GET_N(ept->ep);
   11b1e:	7c80      	ldrb	r0, [r0, #18]
	UsbDeviceDescBank *bank        = &prvt_inst.desc_table[epn].DeviceDescBank[0];
	uint16_t           trans_count = isr ? bank[1].PCKSIZE.bit.BYTE_COUNT : 0;
   11b20:	460f      	mov	r7, r1
	uint8_t            epn         = USB_EP_GET_N(ept->ep);
   11b22:	f000 040f 	and.w	r4, r0, #15
	uint16_t           trans_count = isr ? bank[1].PCKSIZE.bit.BYTE_COUNT : 0;
   11b26:	2900      	cmp	r1, #0
   11b28:	d04f      	beq.n	11bca <_usb_d_dev_in_next+0xb2>
	UsbDeviceDescBank *bank        = &prvt_inst.desc_table[epn].DeviceDescBank[0];
   11b2a:	4b55      	ldr	r3, [pc, #340]	; (11c80 <_usb_d_dev_in_next+0x168>)
	uint16_t           trans_next;
	uint16_t           last_pkt = trans_count & ((ept->size == 1023) ? ept->size : (ept->size - 1));
   11b2c:	f8b5 e010 	ldrh.w	lr, [r5, #16]
	UsbDeviceDescBank *bank        = &prvt_inst.desc_table[epn].DeviceDescBank[0];
   11b30:	eb03 1344 	add.w	r3, r3, r4, lsl #5
	uint16_t           last_pkt = trans_count & ((ept->size == 1023) ? ept->size : (ept->size - 1));
   11b34:	f240 36ff 	movw	r6, #1023	; 0x3ff
	uint16_t           trans_count = isr ? bank[1].PCKSIZE.bit.BYTE_COUNT : 0;
   11b38:	695b      	ldr	r3, [r3, #20]
	uint16_t           last_pkt = trans_count & ((ept->size == 1023) ? ept->size : (ept->size - 1));
   11b3a:	45b6      	cmp	lr, r6
	uint16_t           trans_count = isr ? bank[1].PCKSIZE.bit.BYTE_COUNT : 0;
   11b3c:	f3c3 030d 	ubfx	r3, r3, #0, #14
   11b40:	b299      	uxth	r1, r3
	uint16_t           last_pkt = trans_count & ((ept->size == 1023) ? ept->size : (ept->size - 1));
   11b42:	f000 8095 	beq.w	11c70 <_usb_d_dev_in_next+0x158>
   11b46:	f10e 32ff 	add.w	r2, lr, #4294967295
	uint8_t            inten    = 0;
	bool               is_ctrl  = _usb_d_dev_ep_is_ctrl(ept);
   11b4a:	f895 c013 	ldrb.w	ip, [r5, #19]
   11b4e:	401a      	ands	r2, r3
   11b50:	b292      	uxth	r2, r2
   11b52:	f00c 0807 	and.w	r8, ip, #7
}

static inline void hri_usbendpoint_clear_EPINTFLAG_reg(const void *const hw, uint8_t submodule_index,
                                                       hri_usbendpoint_epintflag_reg_t mask)
{
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg = mask;
   11b56:	0163      	lsls	r3, r4, #5
   11b58:	f103 4382 	add.w	r3, r3, #1090519040	; 0x41000000
   11b5c:	2602      	movs	r6, #2
   11b5e:	f883 6107 	strb.w	r6, [r3, #263]	; 0x107

	if (isr) {
		_usbd_ep_ack_io_cpt(epn, 1);
	}

	ept->trans_count += trans_count;
   11b62:	68ab      	ldr	r3, [r5, #8]
	/* Send more data. */
	if (ept->trans_count < ept->trans_size) {
   11b64:	686e      	ldr	r6, [r5, #4]
	ept->trans_count += trans_count;
   11b66:	4419      	add	r1, r3
	if (ept->trans_count < ept->trans_size) {
   11b68:	42b1      	cmp	r1, r6
	ept->trans_count += trans_count;
   11b6a:	60a9      	str	r1, [r5, #8]
	if (ept->trans_count < ept->trans_size) {
   11b6c:	d235      	bcs.n	11bda <_usb_d_dev_in_next+0xc2>
		trans_next = ept->trans_size - ept->trans_count;
   11b6e:	1a76      	subs	r6, r6, r1
		if (ept->flags.bits.use_cache) {
   11b70:	f01c 0f20 	tst.w	ip, #32
		trans_next = ept->trans_size - ept->trans_count;
   11b74:	b2b6      	uxth	r6, r6
		if (ept->flags.bits.use_cache) {
   11b76:	d05e      	beq.n	11c36 <_usb_d_dev_in_next+0x11e>
			if (trans_next > ept->size) {
				trans_next = ept->size;
			}
			memcpy(ept->cache, &ept->trans_buf[ept->trans_count], trans_next);
   11b78:	682b      	ldr	r3, [r5, #0]
   11b7a:	68e8      	ldr	r0, [r5, #12]
   11b7c:	4576      	cmp	r6, lr
   11b7e:	bf28      	it	cs
   11b80:	4676      	movcs	r6, lr
   11b82:	4419      	add	r1, r3
   11b84:	4632      	mov	r2, r6
   11b86:	f00c fa1b 	bl	1dfc0 <memcpy>
	bank->ADDR.reg          = addr;
   11b8a:	4b3d      	ldr	r3, [pc, #244]	; (11c80 <_usb_d_dev_in_next+0x168>)
			_usbd_ep_set_buf(epn, 1, (uint32_t)ept->cache);
   11b8c:	68e8      	ldr	r0, [r5, #12]
	bank->ADDR.reg          = addr;
   11b8e:	0162      	lsls	r2, r4, #5
   11b90:	1899      	adds	r1, r3, r2
   11b92:	6108      	str	r0, [r1, #16]
	bank->PCKSIZE.bit.BYTE_COUNT = size;
   11b94:	4413      	add	r3, r2
   11b96:	6959      	ldr	r1, [r3, #20]
   11b98:	f366 010d 	bfi	r1, r6, #0, #14
   11b9c:	6159      	str	r1, [r3, #20]
	bank->PCKSIZE.bit.MULTI_PACKET_SIZE = count;
   11b9e:	6959      	ldr	r1, [r3, #20]
   11ba0:	f36f 319b 	bfc	r1, #14, #14
   11ba4:	6159      	str	r1, [r3, #20]
	/* Finish normally. */
	_usb_d_dev_trans_done(ept, USB_TRANS_DONE);
	return;

_in_tx_exec:
	if (!isr) {
   11ba6:	b947      	cbnz	r7, 11bba <_usb_d_dev_in_next+0xa2>
}

static inline void hri_usbendpoint_set_EPINTEN_reg(const void *const hw, uint8_t submodule_index,
                                                   hri_usbendpoint_epintenset_reg_t mask)
{
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENSET.reg = mask;
   11ba8:	f102 4382 	add.w	r3, r2, #1090519040	; 0x41000000
			/* Control endpoint: SETUP or OUT will abort IN transaction.
			 * SETUP: terminate the IN without any notification. Trigger
			 *        SETUP callback.
			 * OUT NAK: terminate IN.
			 */
			inten = USB_D_BANK1_INT_FLAGS | USB_DEVICE_EPINTFLAG_TRFAIL0;
   11bac:	f1b8 0f01 	cmp.w	r8, #1
   11bb0:	bf14      	ite	ne
   11bb2:	224a      	movne	r2, #74	; 0x4a
   11bb4:	224e      	moveq	r2, #78	; 0x4e
   11bb6:	f883 2109 	strb.w	r2, [r3, #265]	; 0x109
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSSET.reg = mask;
   11bba:	0164      	lsls	r4, r4, #5
   11bbc:	f104 4482 	add.w	r4, r4, #1090519040	; 0x41000000
   11bc0:	2380      	movs	r3, #128	; 0x80
   11bc2:	f884 3105 	strb.w	r3, [r4, #261]	; 0x105
   11bc6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	bool               is_ctrl  = _usb_d_dev_ep_is_ctrl(ept);
   11bca:	f895 c013 	ldrb.w	ip, [r5, #19]
	uint16_t           last_pkt = trans_count & ((ept->size == 1023) ? ept->size : (ept->size - 1));
   11bce:	f8b5 e010 	ldrh.w	lr, [r5, #16]
	bool               is_ctrl  = _usb_d_dev_ep_is_ctrl(ept);
   11bd2:	f00c 0807 	and.w	r8, ip, #7
   11bd6:	460a      	mov	r2, r1
   11bd8:	e7c3      	b.n	11b62 <_usb_d_dev_in_next+0x4a>
	} else if (ept->flags.bits.need_zlp) {
   11bda:	f01c 0f10 	tst.w	ip, #16
   11bde:	d11a      	bne.n	11c16 <_usb_d_dev_in_next+0xfe>
}

static inline void hri_usbendpoint_clear_EPINTEN_reg(const void *const hw, uint8_t submodule_index,
                                                     hri_usbendpoint_epintenset_reg_t mask)
{
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENCLR.reg = mask;
   11be0:	0164      	lsls	r4, r4, #5
	if (is_ctrl) {
   11be2:	f1b8 0f01 	cmp.w	r8, #1
   11be6:	f104 4482 	add.w	r4, r4, #1090519040	; 0x41000000
   11bea:	bf0c      	ite	eq
   11bec:	234b      	moveq	r3, #75	; 0x4b
   11bee:	234a      	movne	r3, #74	; 0x4a
	if (last_pkt == ept->size) {
   11bf0:	4596      	cmp	lr, r2
   11bf2:	f884 3108 	strb.w	r3, [r4, #264]	; 0x108
   11bf6:	d02c      	beq.n	11c52 <_usb_d_dev_in_next+0x13a>
 * \param[in, out] ept Pointer to endpoint information.
 * \param[in] code Information code passed.
 */
static void _usb_d_dev_trans_done(struct _usb_d_dev_ep *ept, const int32_t code)
{
	if (!(_usb_d_dev_ep_is_used(ept) && _usb_d_dev_ep_is_busy(ept))) {
   11bf8:	28ff      	cmp	r0, #255	; 0xff
   11bfa:	d028      	beq.n	11c4e <_usb_d_dev_in_next+0x136>
   11bfc:	7ceb      	ldrb	r3, [r5, #19]
   11bfe:	065a      	lsls	r2, r3, #25
   11c00:	d525      	bpl.n	11c4e <_usb_d_dev_in_next+0x136>
		return;
	}
	ept->flags.bits.is_busy = 0;
   11c02:	f36f 1386 	bfc	r3, #6, #1
	dev_inst.ep_callbacks.done(ept->ep, code, ept->trans_count);
   11c06:	491f      	ldr	r1, [pc, #124]	; (11c84 <_usb_d_dev_in_next+0x16c>)
	ept->flags.bits.is_busy = 0;
   11c08:	74eb      	strb	r3, [r5, #19]
	dev_inst.ep_callbacks.done(ept->ep, code, ept->trans_count);
   11c0a:	68aa      	ldr	r2, [r5, #8]
   11c0c:	690b      	ldr	r3, [r1, #16]
}
   11c0e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	dev_inst.ep_callbacks.done(ept->ep, code, ept->trans_count);
   11c12:	2100      	movs	r1, #0
   11c14:	4718      	bx	r3
		ept->flags.bits.need_zlp = 0;
   11c16:	7ce9      	ldrb	r1, [r5, #19]
	bank->PCKSIZE.bit.BYTE_COUNT = size;
   11c18:	4b1b      	ldr	r3, [pc, #108]	; (11c88 <_usb_d_dev_in_next+0x170>)
   11c1a:	0162      	lsls	r2, r4, #5
   11c1c:	4413      	add	r3, r2
		ept->flags.bits.need_zlp = 0;
   11c1e:	f36f 1104 	bfc	r1, #4, #1
   11c22:	74e9      	strb	r1, [r5, #19]
	bank->PCKSIZE.bit.BYTE_COUNT = size;
   11c24:	6859      	ldr	r1, [r3, #4]
   11c26:	f36f 010d 	bfc	r1, #0, #14
   11c2a:	6059      	str	r1, [r3, #4]
	bank->PCKSIZE.bit.MULTI_PACKET_SIZE = count;
   11c2c:	6859      	ldr	r1, [r3, #4]
   11c2e:	f36f 319b 	bfc	r1, #14, #14
   11c32:	6059      	str	r1, [r3, #4]
   11c34:	e7b7      	b.n	11ba6 <_usb_d_dev_in_next+0x8e>
	bank->ADDR.reg          = addr;
   11c36:	4b12      	ldr	r3, [pc, #72]	; (11c80 <_usb_d_dev_in_next+0x168>)
			_usbd_ep_set_buf(epn, 1, (uint32_t)&ept->trans_buf[ept->trans_count]);
   11c38:	6828      	ldr	r0, [r5, #0]
	bank->ADDR.reg          = addr;
   11c3a:	0162      	lsls	r2, r4, #5
   11c3c:	189d      	adds	r5, r3, r2
			_usbd_ep_set_buf(epn, 1, (uint32_t)&ept->trans_buf[ept->trans_count]);
   11c3e:	4401      	add	r1, r0
   11c40:	f5b6 5f00 	cmp.w	r6, #8192	; 0x2000
   11c44:	bf28      	it	cs
   11c46:	f44f 5600 	movcs.w	r6, #8192	; 0x2000
	bank->ADDR.reg          = addr;
   11c4a:	6129      	str	r1, [r5, #16]
   11c4c:	e7a2      	b.n	11b94 <_usb_d_dev_in_next+0x7c>
   11c4e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		ept->flags.bits.is_busy = 0;
   11c52:	7ceb      	ldrb	r3, [r5, #19]
		if (dev_inst.ep_callbacks.more(ept->ep, ept->trans_count)) {
   11c54:	4a0b      	ldr	r2, [pc, #44]	; (11c84 <_usb_d_dev_in_next+0x16c>)
		ept->flags.bits.is_busy = 0;
   11c56:	f36f 1386 	bfc	r3, #6, #1
   11c5a:	74eb      	strb	r3, [r5, #19]
		if (dev_inst.ep_callbacks.more(ept->ep, ept->trans_count)) {
   11c5c:	68d3      	ldr	r3, [r2, #12]
   11c5e:	4798      	blx	r3
   11c60:	2800      	cmp	r0, #0
   11c62:	d1f4      	bne.n	11c4e <_usb_d_dev_in_next+0x136>
		ept->flags.bits.is_busy = 1;
   11c64:	7ceb      	ldrb	r3, [r5, #19]
   11c66:	7ca8      	ldrb	r0, [r5, #18]
   11c68:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   11c6c:	74eb      	strb	r3, [r5, #19]
   11c6e:	e7c3      	b.n	11bf8 <_usb_d_dev_in_next+0xe0>
	bool               is_ctrl  = _usb_d_dev_ep_is_ctrl(ept);
   11c70:	f895 c013 	ldrb.w	ip, [r5, #19]
	uint16_t           last_pkt = trans_count & ((ept->size == 1023) ? ept->size : (ept->size - 1));
   11c74:	f3c1 0209 	ubfx	r2, r1, #0, #10
	bool               is_ctrl  = _usb_d_dev_ep_is_ctrl(ept);
   11c78:	f00c 0807 	and.w	r8, ip, #7
   11c7c:	e76b      	b.n	11b56 <_usb_d_dev_in_next+0x3e>
   11c7e:	bf00      	nop
   11c80:	20002224 	.word	0x20002224
   11c84:	20001ff4 	.word	0x20001ff4
   11c88:	20002234 	.word	0x20002234

00011c8c <_usb_d_dev_out_next>:
{
   11c8c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	uint8_t            epn        = USB_EP_GET_N(ept->ep);
   11c90:	7c85      	ldrb	r5, [r0, #18]
{
   11c92:	b083      	sub	sp, #12
   11c94:	4604      	mov	r4, r0
	uint16_t           trans_size = isr ? bank->PCKSIZE.bit.MULTI_PACKET_SIZE : 0;
   11c96:	460f      	mov	r7, r1
	uint8_t            epn        = USB_EP_GET_N(ept->ep);
   11c98:	f005 050f 	and.w	r5, r5, #15
	uint16_t           trans_size = isr ? bank->PCKSIZE.bit.MULTI_PACKET_SIZE : 0;
   11c9c:	2900      	cmp	r1, #0
   11c9e:	f000 8085 	beq.w	11dac <_usb_d_dev_out_next+0x120>
   11ca2:	4b76      	ldr	r3, [pc, #472]	; (11e7c <_usb_d_dev_out_next+0x1f0>)
	uint16_t           size_mask  = (ept->size == 1023) ? 1023 : (ept->size - 1);
   11ca4:	8a06      	ldrh	r6, [r0, #16]
	uint16_t           trans_size = isr ? bank->PCKSIZE.bit.MULTI_PACKET_SIZE : 0;
   11ca6:	ea4f 1845 	mov.w	r8, r5, lsl #5
   11caa:	4443      	add	r3, r8
	uint16_t           size_mask  = (ept->size == 1023) ? 1023 : (ept->size - 1);
   11cac:	f240 32ff 	movw	r2, #1023	; 0x3ff
	uint16_t           trans_size = isr ? bank->PCKSIZE.bit.MULTI_PACKET_SIZE : 0;
   11cb0:	6859      	ldr	r1, [r3, #4]
	uint16_t           last_trans = isr ? bank->PCKSIZE.bit.BYTE_COUNT : 0;
   11cb2:	685b      	ldr	r3, [r3, #4]
	uint16_t           size_mask  = (ept->size == 1023) ? 1023 : (ept->size - 1);
   11cb4:	4296      	cmp	r6, r2
	uint16_t           trans_size = isr ? bank->PCKSIZE.bit.MULTI_PACKET_SIZE : 0;
   11cb6:	f3c1 3a8d 	ubfx	sl, r1, #14, #14
	uint16_t           last_trans = isr ? bank->PCKSIZE.bit.BYTE_COUNT : 0;
   11cba:	f3c3 090d 	ubfx	r9, r3, #0, #14
	uint16_t           size_mask  = (ept->size == 1023) ? 1023 : (ept->size - 1);
   11cbe:	f000 80d7 	beq.w	11e70 <_usb_d_dev_out_next+0x1e4>
   11cc2:	3e01      	subs	r6, #1
	bool               is_ctrl = _usb_d_dev_ep_is_ctrl(ept);
   11cc4:	7cc2      	ldrb	r2, [r0, #19]
   11cc6:	b2b6      	uxth	r6, r6
   11cc8:	ea09 0306 	and.w	r3, r9, r6
   11ccc:	f002 0b07 	and.w	fp, r2, #7
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg = mask;
   11cd0:	0169      	lsls	r1, r5, #5
   11cd2:	f101 4182 	add.w	r1, r1, #1090519040	; 0x41000000
   11cd6:	2001      	movs	r0, #1
   11cd8:	f881 0107 	strb.w	r0, [r1, #263]	; 0x107
	if (ept->flags.bits.use_cache && ept->trans_size) {
   11cdc:	0691      	lsls	r1, r2, #26
   11cde:	d512      	bpl.n	11d06 <_usb_d_dev_out_next+0x7a>
   11ce0:	f8d4 e004 	ldr.w	lr, [r4, #4]
   11ce4:	f1be 0f00 	cmp.w	lr, #0
   11ce8:	d048      	beq.n	11d7c <_usb_d_dev_out_next+0xf0>
		uint16_t buf_remain = ept->trans_size - ept->trans_count;
   11cea:	68a0      	ldr	r0, [r4, #8]
		memcpy(&ept->trans_buf[ept->trans_count], ept->cache, (buf_remain > last_pkt) ? last_pkt : buf_remain);
   11cec:	9301      	str	r3, [sp, #4]
		uint16_t buf_remain = ept->trans_size - ept->trans_count;
   11cee:	ebae 0200 	sub.w	r2, lr, r0
   11cf2:	b292      	uxth	r2, r2
		memcpy(&ept->trans_buf[ept->trans_count], ept->cache, (buf_remain > last_pkt) ? last_pkt : buf_remain);
   11cf4:	429a      	cmp	r2, r3
   11cf6:	bf28      	it	cs
   11cf8:	461a      	movcs	r2, r3
   11cfa:	6823      	ldr	r3, [r4, #0]
   11cfc:	68e1      	ldr	r1, [r4, #12]
   11cfe:	4418      	add	r0, r3
   11d00:	f00c f95e 	bl	1dfc0 <memcpy>
   11d04:	9b01      	ldr	r3, [sp, #4]
	if (ept->trans_size == 0 && ept->flags.bits.need_zlp) {
   11d06:	6862      	ldr	r2, [r4, #4]
   11d08:	2a00      	cmp	r2, #0
   11d0a:	d036      	beq.n	11d7a <_usb_d_dev_out_next+0xee>
	} else if (isr && last_pkt < ept->size) {
   11d0c:	2f00      	cmp	r7, #0
   11d0e:	d15b      	bne.n	11dc8 <_usb_d_dev_out_next+0x13c>
		ept->trans_count += trans_size;
   11d10:	68a3      	ldr	r3, [r4, #8]
   11d12:	4453      	add	r3, sl
		if (ept->trans_count < ept->trans_size) {
   11d14:	429a      	cmp	r2, r3
		ept->trans_count += trans_size;
   11d16:	60a3      	str	r3, [r4, #8]
		if (ept->trans_count < ept->trans_size) {
   11d18:	d960      	bls.n	11ddc <_usb_d_dev_out_next+0x150>
			if (ept->flags.bits.use_cache) {
   11d1a:	7ce1      	ldrb	r1, [r4, #19]
			trans_next = ept->trans_size - ept->trans_count;
   11d1c:	1ad2      	subs	r2, r2, r3
			if (ept->flags.bits.use_cache) {
   11d1e:	0688      	lsls	r0, r1, #26
			trans_next = ept->trans_size - ept->trans_count;
   11d20:	b292      	uxth	r2, r2
			if (ept->flags.bits.use_cache) {
   11d22:	f140 808b 	bpl.w	11e3c <_usb_d_dev_out_next+0x1b0>
   11d26:	8a26      	ldrh	r6, [r4, #16]
	bank->ADDR.reg          = addr;
   11d28:	4954      	ldr	r1, [pc, #336]	; (11e7c <_usb_d_dev_out_next+0x1f0>)
				_usbd_ep_set_buf(epn, 0, (uint32_t)ept->cache);
   11d2a:	68e3      	ldr	r3, [r4, #12]
	bank->ADDR.reg          = addr;
   11d2c:	f841 3008 	str.w	r3, [r1, r8]
   11d30:	42b2      	cmp	r2, r6
   11d32:	bf28      	it	cs
   11d34:	4632      	movcs	r2, r6
   11d36:	f3c2 020d 	ubfx	r2, r2, #0, #14
	bank->PCKSIZE.bit.MULTI_PACKET_SIZE = size;
   11d3a:	eb01 0308 	add.w	r3, r1, r8
   11d3e:	6858      	ldr	r0, [r3, #4]
   11d40:	f362 309b 	bfi	r0, r2, #14, #14
   11d44:	6058      	str	r0, [r3, #4]
	bank->PCKSIZE.bit.BYTE_COUNT = count;
   11d46:	685a      	ldr	r2, [r3, #4]
   11d48:	f36f 020d 	bfc	r2, #0, #14
   11d4c:	605a      	str	r2, [r3, #4]
	if (!isr) {
   11d4e:	b95f      	cbnz	r7, 11d68 <_usb_d_dev_out_next+0xdc>
		if (is_ctrl) {
   11d50:	f1bb 0f01 	cmp.w	fp, #1
	bank->STATUS_BK.reg     = 0;
   11d54:	bf08      	it	eq
   11d56:	4441      	addeq	r1, r8
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENSET.reg = mask;
   11d58:	f108 4882 	add.w	r8, r8, #1090519040	; 0x41000000
			inten = USB_D_BANK0_INT_FLAGS | USB_DEVICE_EPINTFLAG_TRFAIL1;
   11d5c:	bf0a      	itet	eq
   11d5e:	232d      	moveq	r3, #45	; 0x2d
			inten = USB_D_BANK0_INT_FLAGS;
   11d60:	2325      	movne	r3, #37	; 0x25
	bank->STATUS_BK.reg     = 0;
   11d62:	768f      	strbeq	r7, [r1, #26]
   11d64:	f888 3109 	strb.w	r3, [r8, #265]	; 0x109
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSCLR.reg = mask;
   11d68:	016d      	lsls	r5, r5, #5
   11d6a:	f105 4582 	add.w	r5, r5, #1090519040	; 0x41000000
   11d6e:	2340      	movs	r3, #64	; 0x40
   11d70:	f885 3104 	strb.w	r3, [r5, #260]	; 0x104
}
   11d74:	b003      	add	sp, #12
   11d76:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   11d7a:	7ce2      	ldrb	r2, [r4, #19]
	if (ept->trans_size == 0 && ept->flags.bits.need_zlp) {
   11d7c:	06d6      	lsls	r6, r2, #27
   11d7e:	d54b      	bpl.n	11e18 <_usb_d_dev_out_next+0x18c>
		ept->flags.bits.need_zlp  = 0;
   11d80:	7ce3      	ldrb	r3, [r4, #19]
	bank->ADDR.reg          = addr;
   11d82:	493e      	ldr	r1, [pc, #248]	; (11e7c <_usb_d_dev_out_next+0x1f0>)
		_usbd_ep_set_buf(epn, 0, (uint32_t)ept->cache);
   11d84:	68e2      	ldr	r2, [r4, #12]
		ept->flags.bits.use_cache = 1;
   11d86:	f003 03ef 	and.w	r3, r3, #239	; 0xef
   11d8a:	f043 0320 	orr.w	r3, r3, #32
   11d8e:	74e3      	strb	r3, [r4, #19]
	bank->ADDR.reg          = addr;
   11d90:	f841 2008 	str.w	r2, [r1, r8]
   11d94:	eb01 0308 	add.w	r3, r1, r8
	bank->PCKSIZE.bit.MULTI_PACKET_SIZE = size;
   11d98:	8a20      	ldrh	r0, [r4, #16]
   11d9a:	685a      	ldr	r2, [r3, #4]
   11d9c:	f360 329b 	bfi	r2, r0, #14, #14
   11da0:	605a      	str	r2, [r3, #4]
	bank->PCKSIZE.bit.BYTE_COUNT = count;
   11da2:	685a      	ldr	r2, [r3, #4]
   11da4:	f36f 020d 	bfc	r2, #0, #14
   11da8:	605a      	str	r2, [r3, #4]
   11daa:	e7d0      	b.n	11d4e <_usb_d_dev_out_next+0xc2>
	uint16_t           size_mask  = (ept->size == 1023) ? 1023 : (ept->size - 1);
   11dac:	8a06      	ldrh	r6, [r0, #16]
	bool               is_ctrl = _usb_d_dev_ep_is_ctrl(ept);
   11dae:	7cc2      	ldrb	r2, [r0, #19]
	uint16_t           size_mask  = (ept->size == 1023) ? 1023 : (ept->size - 1);
   11db0:	f240 33ff 	movw	r3, #1023	; 0x3ff
   11db4:	429e      	cmp	r6, r3
   11db6:	d137      	bne.n	11e28 <_usb_d_dev_out_next+0x19c>
	uint16_t           trans_size = isr ? bank->PCKSIZE.bit.MULTI_PACKET_SIZE : 0;
   11db8:	46ba      	mov	sl, r7
	bool               is_ctrl = _usb_d_dev_ep_is_ctrl(ept);
   11dba:	f002 0b07 	and.w	fp, r2, #7
	uint16_t           last_pkt   = last_trans & size_mask;
   11dbe:	463b      	mov	r3, r7
	uint16_t           last_trans = isr ? bank->PCKSIZE.bit.BYTE_COUNT : 0;
   11dc0:	46b9      	mov	r9, r7
   11dc2:	ea4f 1845 	mov.w	r8, r5, lsl #5
   11dc6:	e789      	b.n	11cdc <_usb_d_dev_out_next+0x50>
	} else if (isr && last_pkt < ept->size) {
   11dc8:	8a21      	ldrh	r1, [r4, #16]
   11dca:	4299      	cmp	r1, r3
   11dcc:	d9a0      	bls.n	11d10 <_usb_d_dev_out_next+0x84>
		ept->flags.bits.need_zlp = 0;
   11dce:	7ce2      	ldrb	r2, [r4, #19]
		ept->trans_count += last_trans;
   11dd0:	68a3      	ldr	r3, [r4, #8]
		ept->flags.bits.need_zlp = 0;
   11dd2:	f36f 1204 	bfc	r2, #4, #1
		ept->trans_count += last_trans;
   11dd6:	444b      	add	r3, r9
		ept->flags.bits.need_zlp = 0;
   11dd8:	74e2      	strb	r2, [r4, #19]
		ept->trans_count += last_trans;
   11dda:	60a3      	str	r3, [r4, #8]
	if (is_ctrl) {
   11ddc:	f1bb 0f01 	cmp.w	fp, #1
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENCLR.reg = mask;
   11de0:	f108 4882 	add.w	r8, r8, #1090519040	; 0x41000000
   11de4:	bf0c      	ite	eq
   11de6:	232d      	moveq	r3, #45	; 0x2d
   11de8:	2325      	movne	r3, #37	; 0x25
   11dea:	f888 3108 	strb.w	r3, [r8, #264]	; 0x108
	if (0 == epn) {
   11dee:	b915      	cbnz	r5, 11df6 <_usb_d_dev_out_next+0x16a>
	bank->ADDR.reg          = addr;
   11df0:	4b22      	ldr	r3, [pc, #136]	; (11e7c <_usb_d_dev_out_next+0x1f0>)
		_usbd_ep_set_buf(epn, 0, (uint32_t)ept->cache);
   11df2:	68e2      	ldr	r2, [r4, #12]
	bank->ADDR.reg          = addr;
   11df4:	601a      	str	r2, [r3, #0]
	if (!(_usb_d_dev_ep_is_used(ept) && _usb_d_dev_ep_is_busy(ept))) {
   11df6:	7ca0      	ldrb	r0, [r4, #18]
   11df8:	28ff      	cmp	r0, #255	; 0xff
   11dfa:	d0bb      	beq.n	11d74 <_usb_d_dev_out_next+0xe8>
   11dfc:	7ce3      	ldrb	r3, [r4, #19]
   11dfe:	065a      	lsls	r2, r3, #25
   11e00:	d5b8      	bpl.n	11d74 <_usb_d_dev_out_next+0xe8>
	ept->flags.bits.is_busy = 0;
   11e02:	f36f 1386 	bfc	r3, #6, #1
	dev_inst.ep_callbacks.done(ept->ep, code, ept->trans_count);
   11e06:	491e      	ldr	r1, [pc, #120]	; (11e80 <_usb_d_dev_out_next+0x1f4>)
	ept->flags.bits.is_busy = 0;
   11e08:	74e3      	strb	r3, [r4, #19]
	dev_inst.ep_callbacks.done(ept->ep, code, ept->trans_count);
   11e0a:	690b      	ldr	r3, [r1, #16]
   11e0c:	68a2      	ldr	r2, [r4, #8]
   11e0e:	2100      	movs	r1, #0
}
   11e10:	b003      	add	sp, #12
   11e12:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	dev_inst.ep_callbacks.done(ept->ep, code, ept->trans_count);
   11e16:	4718      	bx	r3
	} else if (isr && last_pkt < ept->size) {
   11e18:	b117      	cbz	r7, 11e20 <_usb_d_dev_out_next+0x194>
   11e1a:	8a22      	ldrh	r2, [r4, #16]
   11e1c:	429a      	cmp	r2, r3
   11e1e:	d8d6      	bhi.n	11dce <_usb_d_dev_out_next+0x142>
		ept->trans_count += trans_size;
   11e20:	68a3      	ldr	r3, [r4, #8]
   11e22:	4453      	add	r3, sl
   11e24:	60a3      	str	r3, [r4, #8]
   11e26:	e7d9      	b.n	11ddc <_usb_d_dev_out_next+0x150>
   11e28:	3e01      	subs	r6, #1
   11e2a:	b2b6      	uxth	r6, r6
	bool               is_ctrl = _usb_d_dev_ep_is_ctrl(ept);
   11e2c:	f002 0b07 	and.w	fp, r2, #7
	uint16_t           trans_size = isr ? bank->PCKSIZE.bit.MULTI_PACKET_SIZE : 0;
   11e30:	468a      	mov	sl, r1
	bool               is_ctrl = _usb_d_dev_ep_is_ctrl(ept);
   11e32:	460b      	mov	r3, r1
	uint16_t           last_trans = isr ? bank->PCKSIZE.bit.BYTE_COUNT : 0;
   11e34:	4689      	mov	r9, r1
   11e36:	ea4f 1845 	mov.w	r8, r5, lsl #5
   11e3a:	e74f      	b.n	11cdc <_usb_d_dev_out_next+0x50>
				if (trans_next > ept->size) {
   11e3c:	8a20      	ldrh	r0, [r4, #16]
   11e3e:	4282      	cmp	r2, r0
   11e40:	d905      	bls.n	11e4e <_usb_d_dev_out_next+0x1c2>
					if (trans_next > USB_D_DEV_TRANS_MAX) {
   11e42:	f5b2 5f00 	cmp.w	r2, #8192	; 0x2000
   11e46:	d90e      	bls.n	11e66 <_usb_d_dev_out_next+0x1da>
   11e48:	f44f 5200 	mov.w	r2, #8192	; 0x2000
   11e4c:	e005      	b.n	11e5a <_usb_d_dev_out_next+0x1ce>
					ept->flags.bits.use_cache = 1;
   11e4e:	bf3c      	itt	cc
   11e50:	f041 0120 	orrcc.w	r1, r1, #32
   11e54:	74e1      	strbcc	r1, [r4, #19]
   11e56:	f3c2 020d 	ubfx	r2, r2, #0, #14
				_usbd_ep_set_buf(epn, 0, (uint32_t)&ept->trans_buf[ept->trans_count]);
   11e5a:	6820      	ldr	r0, [r4, #0]
	bank->ADDR.reg          = addr;
   11e5c:	4907      	ldr	r1, [pc, #28]	; (11e7c <_usb_d_dev_out_next+0x1f0>)
				_usbd_ep_set_buf(epn, 0, (uint32_t)&ept->trans_buf[ept->trans_count]);
   11e5e:	4403      	add	r3, r0
	bank->ADDR.reg          = addr;
   11e60:	f841 3008 	str.w	r3, [r1, r8]
   11e64:	e769      	b.n	11d3a <_usb_d_dev_out_next+0xae>
   11e66:	ea22 0206 	bic.w	r2, r2, r6
   11e6a:	f3c2 020d 	ubfx	r2, r2, #0, #14
   11e6e:	e7f4      	b.n	11e5a <_usb_d_dev_out_next+0x1ce>
	bool               is_ctrl = _usb_d_dev_ep_is_ctrl(ept);
   11e70:	7cc2      	ldrb	r2, [r0, #19]
	uint16_t           last_pkt   = last_trans & size_mask;
   11e72:	f3c9 0309 	ubfx	r3, r9, #0, #10
	bool               is_ctrl = _usb_d_dev_ep_is_ctrl(ept);
   11e76:	f002 0b07 	and.w	fp, r2, #7
   11e7a:	e729      	b.n	11cd0 <_usb_d_dev_out_next+0x44>
   11e7c:	20002224 	.word	0x20002224
   11e80:	20001ff4 	.word	0x20001ff4

00011e84 <_usb_d_dev_handler>:
{
   11e84:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	uint16_t epint = hw->DEVICE.EPINTSMRY.reg;
   11e88:	f04f 4282 	mov.w	r2, #1090519040	; 0x41000000
{
   11e8c:	b081      	sub	sp, #4
	uint16_t epint = hw->DEVICE.EPINTSMRY.reg;
   11e8e:	8c16      	ldrh	r6, [r2, #32]
   11e90:	b2b6      	uxth	r6, r6
	if (0 == epint) {
   11e92:	2e00      	cmp	r6, #0
   11e94:	f000 812c 	beq.w	120f0 <_usb_d_dev_handler+0x26c>
   11e98:	4dc4      	ldr	r5, [pc, #784]	; (121ac <_usb_d_dev_handler+0x328>)
	((Usb *)hw)->DEVICE.INTENCLR.reg = USB_DEVICE_INTENSET_LPMSUSP;
}

static inline void hri_usbdevice_set_INTEN_reg(const void *const hw, hri_usbdevice_intenset_reg_t mask)
{
	((Usb *)hw)->DEVICE.INTENSET.reg = mask;
   11e9a:	2400      	movs	r4, #0
	if (!(epint & (1u << epn))) {
   11e9c:	2701      	movs	r7, #1
		if (ept->ep == 0xFF) {
   11e9e:	7ca8      	ldrb	r0, [r5, #18]
   11ea0:	28ff      	cmp	r0, #255	; 0xff
   11ea2:	d030      	beq.n	11f06 <_usb_d_dev_handler+0x82>
	uint8_t epn = USB_EP_GET_N(ept->ep);
   11ea4:	f000 030f 	and.w	r3, r0, #15
	if (!(epint & (1u << epn))) {
   11ea8:	fa07 f203 	lsl.w	r2, r7, r3
   11eac:	4232      	tst	r2, r6
   11eae:	d02a      	beq.n	11f06 <_usb_d_dev_handler+0x82>
   11eb0:	ea4f 1e43 	mov.w	lr, r3, lsl #5
   11eb4:	f10e 4882 	add.w	r8, lr, #1090519040	; 0x41000000
	mask  = hw->DEVICE.DeviceEndpoint[epn].EPINTENSET.reg;
   11eb8:	4672      	mov	r2, lr
	flags = hw->DEVICE.DeviceEndpoint[epn].EPINTFLAG.reg;
   11eba:	f898 1107 	ldrb.w	r1, [r8, #263]	; 0x107
	mask  = hw->DEVICE.DeviceEndpoint[epn].EPINTENSET.reg;
   11ebe:	f898 3109 	ldrb.w	r3, [r8, #265]	; 0x109
	if (flags) {
   11ec2:	400b      	ands	r3, r1
	mask  = hw->DEVICE.DeviceEndpoint[epn].EPINTENSET.reg;
   11ec4:	46c1      	mov	r9, r8
	if (flags) {
   11ec6:	d01e      	beq.n	11f06 <_usb_d_dev_handler+0x82>
		if ((ept->flags.bits.eptype == 0x1) && !_usb_d_dev_ep_is_busy(ept)) {
   11ec8:	49b9      	ldr	r1, [pc, #740]	; (121b0 <_usb_d_dev_handler+0x32c>)
   11eca:	ea4f 0a84 	mov.w	sl, r4, lsl #2
   11ece:	eb0a 0c04 	add.w	ip, sl, r4
   11ed2:	eb01 0c8c 	add.w	ip, r1, ip, lsl #2
   11ed6:	f89c b027 	ldrb.w	fp, [ip, #39]	; 0x27
   11eda:	f00b 0147 	and.w	r1, fp, #71	; 0x47
   11ede:	2901      	cmp	r1, #1
   11ee0:	f000 80f4 	beq.w	120cc <_usb_d_dev_handler+0x248>
		} else if (_usb_d_dev_ep_is_in(ept)) {
   11ee4:	f01b 0f80 	tst.w	fp, #128	; 0x80
   11ee8:	d115      	bne.n	11f16 <_usb_d_dev_handler+0x92>
	if (flags & USB_DEVICE_EPINTFLAG_STALL0) {
   11eea:	f013 0120 	ands.w	r1, r3, #32
   11eee:	d15a      	bne.n	11fa6 <_usb_d_dev_handler+0x122>
	} else if (flags & USB_DEVICE_EPINTFLAG_TRFAIL0) {
   11ef0:	f013 0f04 	tst.w	r3, #4
   11ef4:	f040 8098 	bne.w	12028 <_usb_d_dev_handler+0x1a4>
	} else if (flags & USB_DEVICE_EPINTFLAG_TRCPT0) {
   11ef8:	07d9      	lsls	r1, r3, #31
   11efa:	f100 80e2 	bmi.w	120c2 <_usb_d_dev_handler+0x23e>
	} else if (_usb_d_dev_ep_is_ctrl(ept)) {
   11efe:	f00b 0107 	and.w	r1, fp, #7
   11f02:	2901      	cmp	r1, #1
   11f04:	d058      	beq.n	11fb8 <_usb_d_dev_handler+0x134>
   11f06:	3401      	adds	r4, #1
	for (i = 0; i < USB_D_N_EP; i++) {
   11f08:	2c1b      	cmp	r4, #27
   11f0a:	f105 0514 	add.w	r5, r5, #20
   11f0e:	d1c6      	bne.n	11e9e <_usb_d_dev_handler+0x1a>
}
   11f10:	b001      	add	sp, #4
   11f12:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	if (flags & USB_DEVICE_EPINTFLAG_STALL1) {
   11f16:	f013 0140 	ands.w	r1, r3, #64	; 0x40
   11f1a:	f040 8143 	bne.w	121a4 <_usb_d_dev_handler+0x320>
	} else if (flags & USB_DEVICE_EPINTFLAG_TRFAIL1) {
   11f1e:	f013 0f08 	tst.w	r3, #8
   11f22:	f040 8189 	bne.w	12238 <_usb_d_dev_handler+0x3b4>
	} else if (flags & USB_DEVICE_EPINTFLAG_TRCPT1) {
   11f26:	0799      	lsls	r1, r3, #30
   11f28:	f100 8137 	bmi.w	1219a <_usb_d_dev_handler+0x316>
	} else if (_usb_d_dev_ep_is_ctrl(ept)) {
   11f2c:	f00b 0107 	and.w	r1, fp, #7
   11f30:	2901      	cmp	r1, #1
   11f32:	d1e8      	bne.n	11f06 <_usb_d_dev_handler+0x82>
		if (flags & USB_DEVICE_EPINTFLAG_TRFAIL0) {
   11f34:	0759      	lsls	r1, r3, #29
   11f36:	f100 8241 	bmi.w	123bc <_usb_d_dev_handler+0x538>
		} else if (flags & USB_DEVICE_EPINTFLAG_RXSTP) {
   11f3a:	06db      	lsls	r3, r3, #27
   11f3c:	d5e3      	bpl.n	11f06 <_usb_d_dev_handler+0x82>
	if (_usb_d_dev_ep_is_busy(ept)) {
   11f3e:	f01b 0f40 	tst.w	fp, #64	; 0x40
   11f42:	d011      	beq.n	11f68 <_usb_d_dev_handler+0xe4>
		ept->flags.bits.is_busy = 0;
   11f44:	499a      	ldr	r1, [pc, #616]	; (121b0 <_usb_d_dev_handler+0x32c>)
   11f46:	eb0a 0304 	add.w	r3, sl, r4
   11f4a:	eb01 0383 	add.w	r3, r1, r3, lsl #2
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSCLR.reg = mask;
   11f4e:	f04f 0e80 	mov.w	lr, #128	; 0x80
   11f52:	f893 1027 	ldrb.w	r1, [r3, #39]	; 0x27
   11f56:	f36f 1186 	bfc	r1, #6, #1
   11f5a:	f883 1027 	strb.w	r1, [r3, #39]	; 0x27
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSSET.reg = mask;
   11f5e:	2340      	movs	r3, #64	; 0x40
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSCLR.reg = mask;
   11f60:	f888 e104 	strb.w	lr, [r8, #260]	; 0x104
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSSET.reg = mask;
   11f64:	f888 3105 	strb.w	r3, [r8, #261]	; 0x105
	ept->flags.bits.is_stalled = 0;
   11f68:	4b91      	ldr	r3, [pc, #580]	; (121b0 <_usb_d_dev_handler+0x32c>)
   11f6a:	eb0a 0104 	add.w	r1, sl, r4
   11f6e:	eb03 0181 	add.w	r1, r3, r1, lsl #2
	bank->STATUS_BK.reg     = 0;
   11f72:	4b90      	ldr	r3, [pc, #576]	; (121b4 <_usb_d_dev_handler+0x330>)
	ept->flags.bits.is_stalled = 0;
   11f74:	f891 c027 	ldrb.w	ip, [r1, #39]	; 0x27
	bank->STATUS_BK.reg     = 0;
   11f78:	eb03 0e02 	add.w	lr, r3, r2
	ept->flags.bits.is_stalled = 0;
   11f7c:	f36f 0cc3 	bfc	ip, #3, #1
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENCLR.reg = mask;
   11f80:	f102 4382 	add.w	r3, r2, #1090519040	; 0x41000000
   11f84:	f881 c027 	strb.w	ip, [r1, #39]	; 0x27
	bank->STATUS_BK.reg     = 0;
   11f88:	f04f 0c00 	mov.w	ip, #0
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg = mask;
   11f8c:	216f      	movs	r1, #111	; 0x6f
   11f8e:	f88e c00a 	strb.w	ip, [lr, #10]
   11f92:	f88e c01a 	strb.w	ip, [lr, #26]
   11f96:	f888 1107 	strb.w	r1, [r8, #263]	; 0x107
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENCLR.reg = mask;
   11f9a:	f883 1108 	strb.w	r1, [r3, #264]	; 0x108
	dev_inst.ep_callbacks.setup(ept->ep);
   11f9e:	4b84      	ldr	r3, [pc, #528]	; (121b0 <_usb_d_dev_handler+0x32c>)
   11fa0:	689b      	ldr	r3, [r3, #8]
   11fa2:	4798      	blx	r3
   11fa4:	e7af      	b.n	11f06 <_usb_d_dev_handler+0x82>
   11fa6:	68aa      	ldr	r2, [r5, #8]
   11fa8:	2320      	movs	r3, #32
   11faa:	f889 3108 	strb.w	r3, [r9, #264]	; 0x108
	dev_inst.ep_callbacks.done(ept->ep, USB_TRANS_STALL, ept->trans_count);
   11fae:	4b80      	ldr	r3, [pc, #512]	; (121b0 <_usb_d_dev_handler+0x32c>)
   11fb0:	2101      	movs	r1, #1
   11fb2:	691b      	ldr	r3, [r3, #16]
   11fb4:	4798      	blx	r3
   11fb6:	e7a6      	b.n	11f06 <_usb_d_dev_handler+0x82>
		if (flags & USB_DEVICE_EPINTFLAG_TRFAIL1) {
   11fb8:	0719      	lsls	r1, r3, #28
   11fba:	f100 80fd 	bmi.w	121b8 <_usb_d_dev_handler+0x334>
		} else if (flags & USB_DEVICE_EPINTFLAG_RXSTP) {
   11fbe:	06db      	lsls	r3, r3, #27
   11fc0:	d5a1      	bpl.n	11f06 <_usb_d_dev_handler+0x82>
	if (_usb_d_dev_ep_is_busy(ept)) {
   11fc2:	f01b 0f40 	tst.w	fp, #64	; 0x40
   11fc6:	d011      	beq.n	11fec <_usb_d_dev_handler+0x168>
		ept->flags.bits.is_busy = 0;
   11fc8:	4979      	ldr	r1, [pc, #484]	; (121b0 <_usb_d_dev_handler+0x32c>)
   11fca:	eb0a 0304 	add.w	r3, sl, r4
   11fce:	eb01 0383 	add.w	r3, r1, r3, lsl #2
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSCLR.reg = mask;
   11fd2:	f04f 0e80 	mov.w	lr, #128	; 0x80
   11fd6:	f893 1027 	ldrb.w	r1, [r3, #39]	; 0x27
   11fda:	f36f 1186 	bfc	r1, #6, #1
   11fde:	f883 1027 	strb.w	r1, [r3, #39]	; 0x27
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSSET.reg = mask;
   11fe2:	2340      	movs	r3, #64	; 0x40
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSCLR.reg = mask;
   11fe4:	f888 e104 	strb.w	lr, [r8, #260]	; 0x104
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSSET.reg = mask;
   11fe8:	f888 3105 	strb.w	r3, [r8, #261]	; 0x105
	ept->flags.bits.is_stalled = 0;
   11fec:	4b70      	ldr	r3, [pc, #448]	; (121b0 <_usb_d_dev_handler+0x32c>)
   11fee:	eb0a 0104 	add.w	r1, sl, r4
   11ff2:	eb03 0181 	add.w	r1, r3, r1, lsl #2
	bank->STATUS_BK.reg     = 0;
   11ff6:	4b6f      	ldr	r3, [pc, #444]	; (121b4 <_usb_d_dev_handler+0x330>)
	ept->flags.bits.is_stalled = 0;
   11ff8:	f891 c027 	ldrb.w	ip, [r1, #39]	; 0x27
	bank->STATUS_BK.reg     = 0;
   11ffc:	eb03 0e02 	add.w	lr, r3, r2
	ept->flags.bits.is_stalled = 0;
   12000:	f36f 0cc3 	bfc	ip, #3, #1
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENCLR.reg = mask;
   12004:	f102 4382 	add.w	r3, r2, #1090519040	; 0x41000000
   12008:	f881 c027 	strb.w	ip, [r1, #39]	; 0x27
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg = mask;
   1200c:	226f      	movs	r2, #111	; 0x6f
	bank->STATUS_BK.reg     = 0;
   1200e:	2100      	movs	r1, #0
   12010:	f88e 100a 	strb.w	r1, [lr, #10]
   12014:	f88e 101a 	strb.w	r1, [lr, #26]
   12018:	f888 2107 	strb.w	r2, [r8, #263]	; 0x107
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENCLR.reg = mask;
   1201c:	f883 2108 	strb.w	r2, [r3, #264]	; 0x108
	dev_inst.ep_callbacks.setup(ept->ep);
   12020:	4b63      	ldr	r3, [pc, #396]	; (121b0 <_usb_d_dev_handler+0x32c>)
   12022:	689b      	ldr	r3, [r3, #8]
   12024:	4798      	blx	r3
   12026:	e76e      	b.n	11f06 <_usb_d_dev_handler+0x82>
	UsbDeviceDescBank *bank    = prvt_inst.desc_table[epn].DeviceDescBank;
   12028:	4b62      	ldr	r3, [pc, #392]	; (121b4 <_usb_d_dev_handler+0x330>)
	tmp = ((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPCFG.reg;
   1202a:	f898 c100 	ldrb.w	ip, [r8, #256]	; 0x100
   1202e:	449e      	add	lr, r3
	if ((eptype == USB_D_EPTYPE_ISOCH) && st.bit.CRCERR) {
   12030:	f00c 0c07 	and.w	ip, ip, #7
	st.reg = bank[bank_n].STATUS_BK.reg;
   12034:	f89e 300a 	ldrb.w	r3, [lr, #10]
	if ((eptype == USB_D_EPTYPE_ISOCH) && st.bit.CRCERR) {
   12038:	f1bc 0f02 	cmp.w	ip, #2
	st.reg = bank[bank_n].STATUS_BK.reg;
   1203c:	b2db      	uxtb	r3, r3
	if ((eptype == USB_D_EPTYPE_ISOCH) && st.bit.CRCERR) {
   1203e:	d07c      	beq.n	1213a <_usb_d_dev_handler+0x2b6>
	} else if (st.bit.ERRORFLOW) {
   12040:	f013 0302 	ands.w	r3, r3, #2
   12044:	d032      	beq.n	120ac <_usb_d_dev_handler+0x228>
		bank[bank_n].STATUS_BK.bit.ERRORFLOW = 0;
   12046:	f89e 100a 	ldrb.w	r1, [lr, #10]
   1204a:	f36f 0141 	bfc	r1, #1, #1
   1204e:	f88e 100a 	strb.w	r1, [lr, #10]
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENCLR.reg = mask;
   12052:	f102 4382 	add.w	r3, r2, #1090519040	; 0x41000000
		if (is_ctrl && _usb_d_dev_ep_is_busy(ept)) {
   12056:	f00b 0107 	and.w	r1, fp, #7
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg = mask;
   1205a:	2204      	movs	r2, #4
   1205c:	2901      	cmp	r1, #1
   1205e:	f888 2107 	strb.w	r2, [r8, #263]	; 0x107
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENCLR.reg = mask;
   12062:	f883 2108 	strb.w	r2, [r3, #264]	; 0x108
   12066:	f47f af4e 	bne.w	11f06 <_usb_d_dev_handler+0x82>
   1206a:	f01b 0f40 	tst.w	fp, #64	; 0x40
   1206e:	f43f af4a 	beq.w	11f06 <_usb_d_dev_handler+0x82>
			if (bank_n != _usb_d_dev_ep_is_in(ept)) {
   12072:	494f      	ldr	r1, [pc, #316]	; (121b0 <_usb_d_dev_handler+0x32c>)
   12074:	eb0a 0204 	add.w	r2, sl, r4
   12078:	eb01 0282 	add.w	r2, r1, r2, lsl #2
   1207c:	3220      	adds	r2, #32
   1207e:	79d1      	ldrb	r1, [r2, #7]
   12080:	09c9      	lsrs	r1, r1, #7
   12082:	f43f af40 	beq.w	11f06 <_usb_d_dev_handler+0x82>
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg = mask;
   12086:	214a      	movs	r1, #74	; 0x4a
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSCLR.reg = mask;
   12088:	f04f 0e80 	mov.w	lr, #128	; 0x80
   1208c:	f888 e104 	strb.w	lr, [r8, #260]	; 0x104
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg = mask;
   12090:	f888 1107 	strb.w	r1, [r8, #263]	; 0x107
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENCLR.reg = mask;
   12094:	f883 1108 	strb.w	r1, [r3, #264]	; 0x108
	ept->flags.bits.is_busy = 0;
   12098:	79d1      	ldrb	r1, [r2, #7]
	dev_inst.ep_callbacks.done(ept->ep, code, ept->trans_count);
   1209a:	4b45      	ldr	r3, [pc, #276]	; (121b0 <_usb_d_dev_handler+0x32c>)
	ept->flags.bits.is_busy = 0;
   1209c:	f36f 1186 	bfc	r1, #6, #1
   120a0:	71d1      	strb	r1, [r2, #7]
	dev_inst.ep_callbacks.done(ept->ep, code, ept->trans_count);
   120a2:	691b      	ldr	r3, [r3, #16]
   120a4:	68aa      	ldr	r2, [r5, #8]
   120a6:	2100      	movs	r1, #0
   120a8:	4798      	blx	r3
   120aa:	e72c      	b.n	11f06 <_usb_d_dev_handler+0x82>
	bank->STATUS_BK.reg     = 0;
   120ac:	4941      	ldr	r1, [pc, #260]	; (121b4 <_usb_d_dev_handler+0x330>)
   120ae:	1888      	adds	r0, r1, r2
   120b0:	f102 4282 	add.w	r2, r2, #1090519040	; 0x41000000
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg = mask;
   120b4:	2104      	movs	r1, #4
   120b6:	7283      	strb	r3, [r0, #10]
   120b8:	f888 1107 	strb.w	r1, [r8, #263]	; 0x107
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENCLR.reg = mask;
   120bc:	f882 1108 	strb.w	r1, [r2, #264]	; 0x108
   120c0:	e721      	b.n	11f06 <_usb_d_dev_handler+0x82>
		_usb_d_dev_out_next(ept, true);
   120c2:	2101      	movs	r1, #1
   120c4:	4628      	mov	r0, r5
   120c6:	f7ff fde1 	bl	11c8c <_usb_d_dev_out_next>
   120ca:	e71c      	b.n	11f06 <_usb_d_dev_handler+0x82>
	if (flags & USB_DEVICE_EPINTFLAG_RXSTP) {
   120cc:	f013 0f10 	tst.w	r3, #16
   120d0:	f040 80e0 	bne.w	12294 <_usb_d_dev_handler+0x410>
	} else if (flags & USB_DEVICE_EPINTFLAG_STALL1) {
   120d4:	065a      	lsls	r2, r3, #25
   120d6:	f100 80e7 	bmi.w	122a8 <_usb_d_dev_handler+0x424>
	} else if (flags & USB_DEVICE_EPINTFLAG_STALL0) {
   120da:	069b      	lsls	r3, r3, #26
   120dc:	f57f af13 	bpl.w	11f06 <_usb_d_dev_handler+0x82>
   120e0:	2320      	movs	r3, #32
   120e2:	68aa      	ldr	r2, [r5, #8]
   120e4:	f888 3108 	strb.w	r3, [r8, #264]	; 0x108
	dev_inst.ep_callbacks.done(ept->ep, USB_TRANS_STALL, ept->trans_count);
   120e8:	4b31      	ldr	r3, [pc, #196]	; (121b0 <_usb_d_dev_handler+0x32c>)
   120ea:	691b      	ldr	r3, [r3, #16]
   120ec:	4798      	blx	r3
   120ee:	e70a      	b.n	11f06 <_usb_d_dev_handler+0x82>
	return ((Usb *)hw)->DEVICE.INTFLAG.reg;
   120f0:	8b91      	ldrh	r1, [r2, #28]
	return tmp;
}

static inline hri_usbdevice_intenset_reg_t hri_usbdevice_read_INTEN_reg(const void *const hw)
{
	return ((Usb *)hw)->DEVICE.INTENSET.reg;
   120f2:	8b13      	ldrh	r3, [r2, #24]
   120f4:	b29b      	uxth	r3, r3
	flags &= hri_usbdevice_read_INTEN_reg(USB);
   120f6:	400b      	ands	r3, r1
	if (flags & USB_DEVICE_INTFLAG_SOF) {
   120f8:	f013 0004 	ands.w	r0, r3, #4
   120fc:	f040 80dc 	bne.w	122b8 <_usb_d_dev_handler+0x434>
	if (flags & USB_DEVICE_INTFLAG_LPMSUSP) {
   12100:	f413 7100 	ands.w	r1, r3, #512	; 0x200
   12104:	f040 80e0 	bne.w	122c8 <_usb_d_dev_handler+0x444>
	} else if (flags & USB_DEVICE_INTFLAG_RAMACER) {
   12108:	0618      	lsls	r0, r3, #24
   1210a:	f100 8140 	bmi.w	1238e <_usb_d_dev_handler+0x50a>
	} else if (flags & USB_D_WAKEUP_INT_FLAGS) {
   1210e:	f013 0470 	ands.w	r4, r3, #112	; 0x70
   12112:	f040 8191 	bne.w	12438 <_usb_d_dev_handler+0x5b4>
	} else if (flags & USB_DEVICE_INTFLAG_EORST) {
   12116:	f013 0108 	ands.w	r1, r3, #8
   1211a:	f040 819e 	bne.w	1245a <_usb_d_dev_handler+0x5d6>
	} else if (flags & USB_DEVICE_INTFLAG_SUSPEND) {
   1211e:	07db      	lsls	r3, r3, #31
   12120:	f57f aeba 	bpl.w	11e98 <_usb_d_dev_handler+0x14>
	((Usb *)hw)->DEVICE.INTFLAG.reg = mask;
   12124:	f240 2301 	movw	r3, #513	; 0x201
	dev_inst.callbacks.event(USB_EV_SUSPEND, 0);
   12128:	4821      	ldr	r0, [pc, #132]	; (121b0 <_usb_d_dev_handler+0x32c>)
   1212a:	8393      	strh	r3, [r2, #28]
   1212c:	6844      	ldr	r4, [r0, #4]
	((Usb *)hw)->DEVICE.INTENCLR.reg = ~data;
}

static inline void hri_usbdevice_clear_INTEN_reg(const void *const hw, hri_usbdevice_intenset_reg_t mask)
{
	((Usb *)hw)->DEVICE.INTENCLR.reg = mask;
   1212e:	8293      	strh	r3, [r2, #20]
	((Usb *)hw)->DEVICE.INTENSET.reg = mask;
   12130:	2570      	movs	r5, #112	; 0x70
   12132:	2004      	movs	r0, #4
   12134:	8315      	strh	r5, [r2, #24]
   12136:	4623      	mov	r3, r4
   12138:	e0de      	b.n	122f8 <_usb_d_dev_handler+0x474>
	if ((eptype == USB_D_EPTYPE_ISOCH) && st.bit.CRCERR) {
   1213a:	f013 0f01 	tst.w	r3, #1
   1213e:	f43f af7f 	beq.w	12040 <_usb_d_dev_handler+0x1bc>
		bank[bank_n].STATUS_BK.bit.CRCERR = 0;
   12142:	f89e 300a 	ldrb.w	r3, [lr, #10]
static void _usb_d_dev_trans_stop(struct _usb_d_dev_ep *ept, bool dir, const int32_t code)
{
	uint8_t epn = USB_EP_GET_N(ept->ep);
	;
	const uint8_t intflags[2] = {USB_D_BANK0_INT_FLAGS, USB_D_BANK1_INT_FLAGS};
	if (!(_usb_d_dev_ep_is_used(ept) && _usb_d_dev_ep_is_busy(ept))) {
   12146:	f01b 0f40 	tst.w	fp, #64	; 0x40
		bank[bank_n].STATUS_BK.bit.CRCERR = 0;
   1214a:	f361 0300 	bfi	r3, r1, #0, #1
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg = mask;
   1214e:	f04f 0104 	mov.w	r1, #4
   12152:	f88e 300a 	strb.w	r3, [lr, #10]
   12156:	f888 1107 	strb.w	r1, [r8, #263]	; 0x107
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENCLR.reg = mask;
   1215a:	f888 1108 	strb.w	r1, [r8, #264]	; 0x108
	if (!(_usb_d_dev_ep_is_used(ept) && _usb_d_dev_ep_is_busy(ept))) {
   1215e:	f43f aed2 	beq.w	11f06 <_usb_d_dev_handler+0x82>
	ept->flags.bits.is_busy = 0;
   12162:	4b13      	ldr	r3, [pc, #76]	; (121b0 <_usb_d_dev_handler+0x32c>)
   12164:	eb0a 0104 	add.w	r1, sl, r4
   12168:	eb03 0181 	add.w	r1, r3, r1, lsl #2
   1216c:	f102 4382 	add.w	r3, r2, #1090519040	; 0x41000000
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg = mask;
   12170:	f04f 0e25 	mov.w	lr, #37	; 0x25
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSSET.reg = mask;
   12174:	2240      	movs	r2, #64	; 0x40
   12176:	f888 2105 	strb.w	r2, [r8, #261]	; 0x105
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg = mask;
   1217a:	f888 e107 	strb.w	lr, [r8, #263]	; 0x107
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENCLR.reg = mask;
   1217e:	f883 e108 	strb.w	lr, [r3, #264]	; 0x108
   12182:	f891 2027 	ldrb.w	r2, [r1, #39]	; 0x27
	dev_inst.ep_callbacks.done(ept->ep, code, ept->trans_count);
   12186:	4b0a      	ldr	r3, [pc, #40]	; (121b0 <_usb_d_dev_handler+0x32c>)
	ept->flags.bits.is_busy = 0;
   12188:	f36f 1286 	bfc	r2, #6, #1
   1218c:	f881 2027 	strb.w	r2, [r1, #39]	; 0x27
	dev_inst.ep_callbacks.done(ept->ep, code, ept->trans_count);
   12190:	691b      	ldr	r3, [r3, #16]
   12192:	68aa      	ldr	r2, [r5, #8]
   12194:	2104      	movs	r1, #4
   12196:	4798      	blx	r3
   12198:	e6b5      	b.n	11f06 <_usb_d_dev_handler+0x82>
		_usb_d_dev_in_next(ept, true);
   1219a:	2101      	movs	r1, #1
   1219c:	4628      	mov	r0, r5
   1219e:	f7ff fcbb 	bl	11b18 <_usb_d_dev_in_next>
   121a2:	e6b0      	b.n	11f06 <_usb_d_dev_handler+0x82>
   121a4:	68aa      	ldr	r2, [r5, #8]
   121a6:	2340      	movs	r3, #64	; 0x40
   121a8:	e6ff      	b.n	11faa <_usb_d_dev_handler+0x126>
   121aa:	bf00      	nop
   121ac:	20002008 	.word	0x20002008
   121b0:	20001ff4 	.word	0x20001ff4
   121b4:	20002224 	.word	0x20002224
	UsbDeviceDescBank *bank    = prvt_inst.desc_table[epn].DeviceDescBank;
   121b8:	4bc3      	ldr	r3, [pc, #780]	; (124c8 <_usb_d_dev_handler+0x644>)
	tmp = ((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPCFG.reg;
   121ba:	f898 1100 	ldrb.w	r1, [r8, #256]	; 0x100
   121be:	449e      	add	lr, r3
	if ((eptype == USB_D_EPTYPE_ISOCH) && st.bit.CRCERR) {
   121c0:	f3c1 1102 	ubfx	r1, r1, #4, #3
	st.reg = bank[bank_n].STATUS_BK.reg;
   121c4:	f89e 301a 	ldrb.w	r3, [lr, #26]
	if ((eptype == USB_D_EPTYPE_ISOCH) && st.bit.CRCERR) {
   121c8:	2902      	cmp	r1, #2
	st.reg = bank[bank_n].STATUS_BK.reg;
   121ca:	b2db      	uxtb	r3, r3
	if ((eptype == USB_D_EPTYPE_ISOCH) && st.bit.CRCERR) {
   121cc:	f000 8098 	beq.w	12300 <_usb_d_dev_handler+0x47c>
	} else if (st.bit.ERRORFLOW) {
   121d0:	f013 0302 	ands.w	r3, r3, #2
   121d4:	d053      	beq.n	1227e <_usb_d_dev_handler+0x3fa>
		bank[bank_n].STATUS_BK.bit.ERRORFLOW = 0;
   121d6:	f89e 101a 	ldrb.w	r1, [lr, #26]
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENCLR.reg = mask;
   121da:	f102 4382 	add.w	r3, r2, #1090519040	; 0x41000000
   121de:	f36f 0141 	bfc	r1, #1, #1
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg = mask;
   121e2:	2208      	movs	r2, #8
   121e4:	f88e 101a 	strb.w	r1, [lr, #26]
   121e8:	f888 2107 	strb.w	r2, [r8, #263]	; 0x107
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENCLR.reg = mask;
   121ec:	f883 2108 	strb.w	r2, [r3, #264]	; 0x108
		if (is_ctrl && _usb_d_dev_ep_is_busy(ept)) {
   121f0:	f01b 0f40 	tst.w	fp, #64	; 0x40
   121f4:	f43f ae87 	beq.w	11f06 <_usb_d_dev_handler+0x82>
			if (bank_n != _usb_d_dev_ep_is_in(ept)) {
   121f8:	4ab4      	ldr	r2, [pc, #720]	; (124cc <_usb_d_dev_handler+0x648>)
   121fa:	eb0a 0e04 	add.w	lr, sl, r4
   121fe:	eb02 0e8e 	add.w	lr, r2, lr, lsl #2
   12202:	f10e 0e20 	add.w	lr, lr, #32
   12206:	f89e 1007 	ldrb.w	r1, [lr, #7]
   1220a:	09c9      	lsrs	r1, r1, #7
   1220c:	f47f ae7b 	bne.w	11f06 <_usb_d_dev_handler+0x82>
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg = mask;
   12210:	2225      	movs	r2, #37	; 0x25
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSSET.reg = mask;
   12212:	f04f 0c40 	mov.w	ip, #64	; 0x40
   12216:	f888 c105 	strb.w	ip, [r8, #261]	; 0x105
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg = mask;
   1221a:	f888 2107 	strb.w	r2, [r8, #263]	; 0x107
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENCLR.reg = mask;
   1221e:	f883 2108 	strb.w	r2, [r3, #264]	; 0x108
	ept->flags.bits.is_busy = 0;
   12222:	f89e 2007 	ldrb.w	r2, [lr, #7]
	dev_inst.ep_callbacks.done(ept->ep, code, ept->trans_count);
   12226:	4ba9      	ldr	r3, [pc, #676]	; (124cc <_usb_d_dev_handler+0x648>)
	ept->flags.bits.is_busy = 0;
   12228:	f361 1286 	bfi	r2, r1, #6, #1
   1222c:	f88e 2007 	strb.w	r2, [lr, #7]
	dev_inst.ep_callbacks.done(ept->ep, code, ept->trans_count);
   12230:	691b      	ldr	r3, [r3, #16]
   12232:	68aa      	ldr	r2, [r5, #8]
   12234:	4798      	blx	r3
   12236:	e666      	b.n	11f06 <_usb_d_dev_handler+0x82>
	UsbDeviceDescBank *bank    = prvt_inst.desc_table[epn].DeviceDescBank;
   12238:	4ba3      	ldr	r3, [pc, #652]	; (124c8 <_usb_d_dev_handler+0x644>)
	tmp = ((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPCFG.reg;
   1223a:	f898 c100 	ldrb.w	ip, [r8, #256]	; 0x100
   1223e:	449e      	add	lr, r3
	if ((eptype == USB_D_EPTYPE_ISOCH) && st.bit.CRCERR) {
   12240:	f3cc 1c02 	ubfx	ip, ip, #4, #3
	st.reg = bank[bank_n].STATUS_BK.reg;
   12244:	f89e 301a 	ldrb.w	r3, [lr, #26]
	if ((eptype == USB_D_EPTYPE_ISOCH) && st.bit.CRCERR) {
   12248:	f1bc 0f02 	cmp.w	ip, #2
	st.reg = bank[bank_n].STATUS_BK.reg;
   1224c:	b2db      	uxtb	r3, r3
	if ((eptype == USB_D_EPTYPE_ISOCH) && st.bit.CRCERR) {
   1224e:	d07a      	beq.n	12346 <_usb_d_dev_handler+0x4c2>
	} else if (st.bit.ERRORFLOW) {
   12250:	f013 0302 	ands.w	r3, r3, #2
   12254:	d013      	beq.n	1227e <_usb_d_dev_handler+0x3fa>
		bank[bank_n].STATUS_BK.bit.ERRORFLOW = 0;
   12256:	f89e 101a 	ldrb.w	r1, [lr, #26]
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENCLR.reg = mask;
   1225a:	f102 4382 	add.w	r3, r2, #1090519040	; 0x41000000
		if (is_ctrl && _usb_d_dev_ep_is_busy(ept)) {
   1225e:	f00b 0207 	and.w	r2, fp, #7
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg = mask;
   12262:	f04f 0c08 	mov.w	ip, #8
		bank[bank_n].STATUS_BK.bit.ERRORFLOW = 0;
   12266:	f36f 0141 	bfc	r1, #1, #1
		if (is_ctrl && _usb_d_dev_ep_is_busy(ept)) {
   1226a:	2a01      	cmp	r2, #1
		bank[bank_n].STATUS_BK.bit.ERRORFLOW = 0;
   1226c:	f88e 101a 	strb.w	r1, [lr, #26]
   12270:	f888 c107 	strb.w	ip, [r8, #263]	; 0x107
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENCLR.reg = mask;
   12274:	f883 c108 	strb.w	ip, [r3, #264]	; 0x108
		if (is_ctrl && _usb_d_dev_ep_is_busy(ept)) {
   12278:	f47f ae45 	bne.w	11f06 <_usb_d_dev_handler+0x82>
   1227c:	e7b8      	b.n	121f0 <_usb_d_dev_handler+0x36c>
	bank->STATUS_BK.reg     = 0;
   1227e:	4992      	ldr	r1, [pc, #584]	; (124c8 <_usb_d_dev_handler+0x644>)
   12280:	1888      	adds	r0, r1, r2
   12282:	f102 4282 	add.w	r2, r2, #1090519040	; 0x41000000
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg = mask;
   12286:	2108      	movs	r1, #8
   12288:	7683      	strb	r3, [r0, #26]
   1228a:	f888 1107 	strb.w	r1, [r8, #263]	; 0x107
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENCLR.reg = mask;
   1228e:	f882 1108 	strb.w	r1, [r2, #264]	; 0x108
   12292:	e638      	b.n	11f06 <_usb_d_dev_handler+0x82>
	if (!is_ctrl) {
   12294:	f00b 0307 	and.w	r3, fp, #7
   12298:	2b01      	cmp	r3, #1
   1229a:	d07e      	beq.n	1239a <_usb_d_dev_handler+0x516>
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg = mask;
   1229c:	2310      	movs	r3, #16
   1229e:	f888 3107 	strb.w	r3, [r8, #263]	; 0x107
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENCLR.reg = USB_DEVICE_EPINTENSET_RXSTP;
   122a2:	f888 3108 	strb.w	r3, [r8, #264]	; 0x108
   122a6:	e62e      	b.n	11f06 <_usb_d_dev_handler+0x82>
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENCLR.reg = mask;
   122a8:	2340      	movs	r3, #64	; 0x40
   122aa:	68aa      	ldr	r2, [r5, #8]
   122ac:	f888 3108 	strb.w	r3, [r8, #264]	; 0x108
	dev_inst.ep_callbacks.done(ept->ep, USB_TRANS_STALL, ept->trans_count);
   122b0:	4b86      	ldr	r3, [pc, #536]	; (124cc <_usb_d_dev_handler+0x648>)
   122b2:	691b      	ldr	r3, [r3, #16]
   122b4:	4798      	blx	r3
   122b6:	e626      	b.n	11f06 <_usb_d_dev_handler+0x82>
	((Usb *)hw)->DEVICE.INTFLAG.reg = mask;
   122b8:	2104      	movs	r1, #4
	dev_inst.callbacks.sof();
   122ba:	4b84      	ldr	r3, [pc, #528]	; (124cc <_usb_d_dev_handler+0x648>)
   122bc:	8391      	strh	r1, [r2, #28]
   122be:	681b      	ldr	r3, [r3, #0]
}
   122c0:	b001      	add	sp, #4
   122c2:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	dev_inst.callbacks.sof();
   122c6:	4718      	bx	r3
   122c8:	f240 2101 	movw	r1, #513	; 0x201
	((Usb *)hw)->DEVICE.INTENSET.reg = mask;
   122cc:	2470      	movs	r4, #112	; 0x70
		if (bank->EXTREG.bit.SUBPID == 0x3) {
   122ce:	4b7e      	ldr	r3, [pc, #504]	; (124c8 <_usb_d_dev_handler+0x644>)
	((Usb *)hw)->DEVICE.INTFLAG.reg = mask;
   122d0:	8391      	strh	r1, [r2, #28]
	((Usb *)hw)->DEVICE.INTENCLR.reg = mask;
   122d2:	8291      	strh	r1, [r2, #20]
	((Usb *)hw)->DEVICE.INTENSET.reg = mask;
   122d4:	8314      	strh	r4, [r2, #24]
   122d6:	891a      	ldrh	r2, [r3, #8]
   122d8:	f002 020f 	and.w	r2, r2, #15
   122dc:	2a03      	cmp	r2, #3
   122de:	f000 8128 	beq.w	12532 <_usb_d_dev_handler+0x6ae>
   122e2:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
   122e4:	f002 020f 	and.w	r2, r2, #15
   122e8:	2a03      	cmp	r2, #3
	uint32_t lpm_variable = 0;
   122ea:	bf18      	it	ne
   122ec:	4601      	movne	r1, r0
		if (bank->EXTREG.bit.SUBPID == 0x3) {
   122ee:	f000 811f 	beq.w	12530 <_usb_d_dev_handler+0x6ac>
	dev_inst.callbacks.event(USB_EV_LPM_SUSPEND, lpm_variable);
   122f2:	4b76      	ldr	r3, [pc, #472]	; (124cc <_usb_d_dev_handler+0x648>)
   122f4:	685b      	ldr	r3, [r3, #4]
   122f6:	2003      	movs	r0, #3
}
   122f8:	b001      	add	sp, #4
   122fa:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	dev_inst.callbacks.event(USB_EV_SUSPEND, 0);
   122fe:	4718      	bx	r3
	if ((eptype == USB_D_EPTYPE_ISOCH) && st.bit.CRCERR) {
   12300:	07d9      	lsls	r1, r3, #31
   12302:	f57f af65 	bpl.w	121d0 <_usb_d_dev_handler+0x34c>
		bank[bank_n].STATUS_BK.bit.CRCERR = 0;
   12306:	f89e 101a 	ldrb.w	r1, [lr, #26]
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENCLR.reg = mask;
   1230a:	f102 4382 	add.w	r3, r2, #1090519040	; 0x41000000
   1230e:	f36f 0100 	bfc	r1, #0, #1
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg = mask;
   12312:	2208      	movs	r2, #8
	if (!(_usb_d_dev_ep_is_used(ept) && _usb_d_dev_ep_is_busy(ept))) {
   12314:	f01b 0f40 	tst.w	fp, #64	; 0x40
		bank[bank_n].STATUS_BK.bit.CRCERR = 0;
   12318:	f88e 101a 	strb.w	r1, [lr, #26]
   1231c:	f888 2107 	strb.w	r2, [r8, #263]	; 0x107
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENCLR.reg = mask;
   12320:	f883 2108 	strb.w	r2, [r3, #264]	; 0x108
	if (!(_usb_d_dev_ep_is_used(ept) && _usb_d_dev_ep_is_busy(ept))) {
   12324:	f43f adef 	beq.w	11f06 <_usb_d_dev_handler+0x82>
	ept->flags.bits.is_busy = 0;
   12328:	4a68      	ldr	r2, [pc, #416]	; (124cc <_usb_d_dev_handler+0x648>)
   1232a:	eb0a 0104 	add.w	r1, sl, r4
   1232e:	eb02 0181 	add.w	r1, r2, r1, lsl #2
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSCLR.reg = mask;
   12332:	f04f 0e80 	mov.w	lr, #128	; 0x80
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg = mask;
   12336:	224a      	movs	r2, #74	; 0x4a
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSCLR.reg = mask;
   12338:	f888 e104 	strb.w	lr, [r8, #260]	; 0x104
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg = mask;
   1233c:	f888 2107 	strb.w	r2, [r8, #263]	; 0x107
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENCLR.reg = mask;
   12340:	f883 2108 	strb.w	r2, [r3, #264]	; 0x108
   12344:	e71d      	b.n	12182 <_usb_d_dev_handler+0x2fe>
	if ((eptype == USB_D_EPTYPE_ISOCH) && st.bit.CRCERR) {
   12346:	f013 0f01 	tst.w	r3, #1
   1234a:	d081      	beq.n	12250 <_usb_d_dev_handler+0x3cc>
		bank[bank_n].STATUS_BK.bit.CRCERR = 0;
   1234c:	f89e 301a 	ldrb.w	r3, [lr, #26]
	if (!(_usb_d_dev_ep_is_used(ept) && _usb_d_dev_ep_is_busy(ept))) {
   12350:	f01b 0f40 	tst.w	fp, #64	; 0x40
		bank[bank_n].STATUS_BK.bit.CRCERR = 0;
   12354:	f361 0300 	bfi	r3, r1, #0, #1
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg = mask;
   12358:	f04f 0108 	mov.w	r1, #8
   1235c:	f88e 301a 	strb.w	r3, [lr, #26]
   12360:	f888 1107 	strb.w	r1, [r8, #263]	; 0x107
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENCLR.reg = mask;
   12364:	f888 1108 	strb.w	r1, [r8, #264]	; 0x108
	if (!(_usb_d_dev_ep_is_used(ept) && _usb_d_dev_ep_is_busy(ept))) {
   12368:	f43f adcd 	beq.w	11f06 <_usb_d_dev_handler+0x82>
	ept->flags.bits.is_busy = 0;
   1236c:	4b57      	ldr	r3, [pc, #348]	; (124cc <_usb_d_dev_handler+0x648>)
   1236e:	eb0a 0104 	add.w	r1, sl, r4
   12372:	eb03 0181 	add.w	r1, r3, r1, lsl #2
   12376:	f102 4382 	add.w	r3, r2, #1090519040	; 0x41000000
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg = mask;
   1237a:	f04f 0e4a 	mov.w	lr, #74	; 0x4a
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSCLR.reg = mask;
   1237e:	2280      	movs	r2, #128	; 0x80
   12380:	f888 2104 	strb.w	r2, [r8, #260]	; 0x104
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg = mask;
   12384:	f888 e107 	strb.w	lr, [r8, #263]	; 0x107
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENCLR.reg = mask;
   12388:	f883 e108 	strb.w	lr, [r3, #264]	; 0x108
   1238c:	e6f9      	b.n	12182 <_usb_d_dev_handler+0x2fe>
	dev_inst.callbacks.event(USB_EV_ERROR, 0);
   1238e:	4b4f      	ldr	r3, [pc, #316]	; (124cc <_usb_d_dev_handler+0x648>)
	((Usb *)hw)->DEVICE.INTFLAG.reg = mask;
   12390:	2080      	movs	r0, #128	; 0x80
   12392:	685b      	ldr	r3, [r3, #4]
   12394:	8390      	strh	r0, [r2, #28]
   12396:	2005      	movs	r0, #5
   12398:	e7ae      	b.n	122f8 <_usb_d_dev_handler+0x474>
	if (_usb_d_dev_ep_is_busy(ept)) {
   1239a:	f01b 0f40 	tst.w	fp, #64	; 0x40
   1239e:	f43f ade3 	beq.w	11f68 <_usb_d_dev_handler+0xe4>
		ept->flags.bits.is_busy = 0;
   123a2:	f89c 3027 	ldrb.w	r3, [ip, #39]	; 0x27
   123a6:	f36f 1386 	bfc	r3, #6, #1
   123aa:	f88c 3027 	strb.w	r3, [ip, #39]	; 0x27
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSCLR.reg = mask;
   123ae:	2180      	movs	r1, #128	; 0x80
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSSET.reg = mask;
   123b0:	2340      	movs	r3, #64	; 0x40
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSCLR.reg = mask;
   123b2:	f888 1104 	strb.w	r1, [r8, #260]	; 0x104
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSSET.reg = mask;
   123b6:	f888 3105 	strb.w	r3, [r8, #261]	; 0x105
   123ba:	e5d5      	b.n	11f68 <_usb_d_dev_handler+0xe4>
	UsbDeviceDescBank *bank    = prvt_inst.desc_table[epn].DeviceDescBank;
   123bc:	4b42      	ldr	r3, [pc, #264]	; (124c8 <_usb_d_dev_handler+0x644>)
	tmp = ((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPCFG.reg;
   123be:	f898 1100 	ldrb.w	r1, [r8, #256]	; 0x100
   123c2:	449e      	add	lr, r3
	if ((eptype == USB_D_EPTYPE_ISOCH) && st.bit.CRCERR) {
   123c4:	f001 0107 	and.w	r1, r1, #7
	st.reg = bank[bank_n].STATUS_BK.reg;
   123c8:	f89e 300a 	ldrb.w	r3, [lr, #10]
	if ((eptype == USB_D_EPTYPE_ISOCH) && st.bit.CRCERR) {
   123cc:	2902      	cmp	r1, #2
	st.reg = bank[bank_n].STATUS_BK.reg;
   123ce:	b2db      	uxtb	r3, r3
	if ((eptype == USB_D_EPTYPE_ISOCH) && st.bit.CRCERR) {
   123d0:	f000 8080 	beq.w	124d4 <_usb_d_dev_handler+0x650>
	} else if (st.bit.ERRORFLOW) {
   123d4:	f013 0302 	ands.w	r3, r3, #2
   123d8:	f43f ae68 	beq.w	120ac <_usb_d_dev_handler+0x228>
		bank[bank_n].STATUS_BK.bit.ERRORFLOW = 0;
   123dc:	f89e 100a 	ldrb.w	r1, [lr, #10]
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENCLR.reg = mask;
   123e0:	f102 4382 	add.w	r3, r2, #1090519040	; 0x41000000
   123e4:	f36f 0141 	bfc	r1, #1, #1
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg = mask;
   123e8:	2204      	movs	r2, #4
		if (is_ctrl && _usb_d_dev_ep_is_busy(ept)) {
   123ea:	f01b 0f40 	tst.w	fp, #64	; 0x40
		bank[bank_n].STATUS_BK.bit.ERRORFLOW = 0;
   123ee:	f88e 100a 	strb.w	r1, [lr, #10]
   123f2:	f888 2107 	strb.w	r2, [r8, #263]	; 0x107
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENCLR.reg = mask;
   123f6:	f883 2108 	strb.w	r2, [r3, #264]	; 0x108
		if (is_ctrl && _usb_d_dev_ep_is_busy(ept)) {
   123fa:	f43f ad84 	beq.w	11f06 <_usb_d_dev_handler+0x82>
			if (bank_n != _usb_d_dev_ep_is_in(ept)) {
   123fe:	4a33      	ldr	r2, [pc, #204]	; (124cc <_usb_d_dev_handler+0x648>)
   12400:	eb0a 0104 	add.w	r1, sl, r4
   12404:	eb02 0181 	add.w	r1, r2, r1, lsl #2
   12408:	3120      	adds	r1, #32
   1240a:	79ca      	ldrb	r2, [r1, #7]
   1240c:	09d2      	lsrs	r2, r2, #7
   1240e:	f43f ad7a 	beq.w	11f06 <_usb_d_dev_handler+0x82>
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg = mask;
   12412:	224a      	movs	r2, #74	; 0x4a
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSCLR.reg = mask;
   12414:	f04f 0e80 	mov.w	lr, #128	; 0x80
   12418:	f888 e104 	strb.w	lr, [r8, #260]	; 0x104
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg = mask;
   1241c:	f888 2107 	strb.w	r2, [r8, #263]	; 0x107
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENCLR.reg = mask;
   12420:	f883 2108 	strb.w	r2, [r3, #264]	; 0x108
	ept->flags.bits.is_busy = 0;
   12424:	79ca      	ldrb	r2, [r1, #7]
	dev_inst.ep_callbacks.done(ept->ep, code, ept->trans_count);
   12426:	4b29      	ldr	r3, [pc, #164]	; (124cc <_usb_d_dev_handler+0x648>)
	ept->flags.bits.is_busy = 0;
   12428:	f36f 1286 	bfc	r2, #6, #1
   1242c:	71ca      	strb	r2, [r1, #7]
	dev_inst.ep_callbacks.done(ept->ep, code, ept->trans_count);
   1242e:	691b      	ldr	r3, [r3, #16]
   12430:	68aa      	ldr	r2, [r5, #8]
   12432:	2100      	movs	r1, #0
   12434:	4798      	blx	r3
   12436:	e566      	b.n	11f06 <_usb_d_dev_handler+0x82>
	((Usb *)hw)->DEVICE.INTFLAG.reg = mask;
   12438:	2370      	movs	r3, #112	; 0x70
	((Usb *)hw)->DEVICE.INTENSET.reg = mask;
   1243a:	f240 2001 	movw	r0, #513	; 0x201

static inline hri_oscctrl_dpllstatus_reg_t hri_oscctrl_get_DPLLSTATUS_reg(const void *const hw, uint8_t submodule_index,
                                                                          hri_oscctrl_dpllstatus_reg_t mask)
{
	uint32_t tmp;
	tmp = ((Oscctrl *)hw)->Dpll[submodule_index].DPLLSTATUS.reg;
   1243e:	4924      	ldr	r1, [pc, #144]	; (124d0 <_usb_d_dev_handler+0x64c>)
	((Usb *)hw)->DEVICE.INTFLAG.reg = mask;
   12440:	8393      	strh	r3, [r2, #28]
	((Usb *)hw)->DEVICE.INTENCLR.reg = mask;
   12442:	8293      	strh	r3, [r2, #20]
	((Usb *)hw)->DEVICE.INTENSET.reg = mask;
   12444:	8310      	strh	r0, [r2, #24]
   12446:	6c0b      	ldr	r3, [r1, #64]	; 0x40
	tmp &= mask;
   12448:	f003 0303 	and.w	r3, r3, #3
	while (hri_oscctrl_get_DPLLSTATUS_reg(OSCCTRL, 0, DPLL_READY_FLAG) != DPLL_READY_FLAG)
   1244c:	2b03      	cmp	r3, #3
   1244e:	d1fa      	bne.n	12446 <_usb_d_dev_handler+0x5c2>
	dev_inst.callbacks.event(USB_EV_WAKEUP, 0);
   12450:	4b1e      	ldr	r3, [pc, #120]	; (124cc <_usb_d_dev_handler+0x648>)
   12452:	2100      	movs	r1, #0
   12454:	685b      	ldr	r3, [r3, #4]
   12456:	2002      	movs	r0, #2
   12458:	e74e      	b.n	122f8 <_usb_d_dev_handler+0x474>
   1245a:	4e1c      	ldr	r6, [pc, #112]	; (124cc <_usb_d_dev_handler+0x648>)
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPCFG.reg = data;
   1245c:	f882 4100 	strb.w	r4, [r2, #256]	; 0x100
	((Usb *)hw)->DEVICE.INTFLAG.reg = mask;
   12460:	2008      	movs	r0, #8
	((Usb *)hw)->DEVICE.INTENCLR.reg = mask;
   12462:	2170      	movs	r1, #112	; 0x70
	((Usb *)hw)->DEVICE.INTENSET.reg = mask;
   12464:	f240 2301 	movw	r3, #513	; 0x201
	((Usb *)hw)->DEVICE.INTFLAG.reg = mask;
   12468:	8390      	strh	r0, [r2, #28]
		dev_inst.ep[i].flags.u8 = 0;
   1246a:	4627      	mov	r7, r4
	((Usb *)hw)->DEVICE.INTENCLR.reg = mask;
   1246c:	8291      	strh	r1, [r2, #20]
   1246e:	4635      	mov	r5, r6
	((Usb *)hw)->DEVICE.INTENSET.reg = mask;
   12470:	8313      	strh	r3, [r2, #24]
		dev_inst.ep[i].ep       = 0xFF;
   12472:	f04f 08ff 	mov.w	r8, #255	; 0xff
   12476:	e007      	b.n	12488 <_usb_d_dev_handler+0x604>
	for (i = 0; i < USB_D_N_EP; i++) {
   12478:	2c1b      	cmp	r4, #27
		dev_inst.ep[i].ep       = 0xFF;
   1247a:	f885 8026 	strb.w	r8, [r5, #38]	; 0x26
		dev_inst.ep[i].flags.u8 = 0;
   1247e:	f885 7027 	strb.w	r7, [r5, #39]	; 0x27
   12482:	f105 0514 	add.w	r5, r5, #20
	for (i = 0; i < USB_D_N_EP; i++) {
   12486:	d016      	beq.n	124b6 <_usb_d_dev_handler+0x632>
	if (!(_usb_d_dev_ep_is_used(ept) && _usb_d_dev_ep_is_busy(ept))) {
   12488:	f895 0026 	ldrb.w	r0, [r5, #38]	; 0x26
   1248c:	eb04 0384 	add.w	r3, r4, r4, lsl #2
   12490:	eb06 0383 	add.w	r3, r6, r3, lsl #2
   12494:	28ff      	cmp	r0, #255	; 0xff
   12496:	f103 0320 	add.w	r3, r3, #32
   1249a:	f104 0401 	add.w	r4, r4, #1
   1249e:	d0eb      	beq.n	12478 <_usb_d_dev_handler+0x5f4>
   124a0:	79da      	ldrb	r2, [r3, #7]
   124a2:	0651      	lsls	r1, r2, #25
   124a4:	d5e8      	bpl.n	12478 <_usb_d_dev_handler+0x5f4>
	ept->flags.bits.is_busy = 0;
   124a6:	f36f 1286 	bfc	r2, #6, #1
   124aa:	71da      	strb	r2, [r3, #7]
	dev_inst.ep_callbacks.done(ept->ep, code, ept->trans_count);
   124ac:	69ea      	ldr	r2, [r5, #28]
   124ae:	6933      	ldr	r3, [r6, #16]
   124b0:	2103      	movs	r1, #3
   124b2:	4798      	blx	r3
   124b4:	e7e0      	b.n	12478 <_usb_d_dev_handler+0x5f4>
	memset(prvt_inst.desc_table, 0, sizeof(UsbDeviceDescriptor) * (CONF_USB_D_MAX_EP_N + 1));
   124b6:	2100      	movs	r1, #0
   124b8:	2260      	movs	r2, #96	; 0x60
   124ba:	4803      	ldr	r0, [pc, #12]	; (124c8 <_usb_d_dev_handler+0x644>)
   124bc:	f00b fe7e 	bl	1e1bc <memset>
	dev_inst.callbacks.event(USB_EV_RESET, 0);
   124c0:	6873      	ldr	r3, [r6, #4]
   124c2:	2100      	movs	r1, #0
   124c4:	2001      	movs	r0, #1
   124c6:	e717      	b.n	122f8 <_usb_d_dev_handler+0x474>
   124c8:	20002224 	.word	0x20002224
   124cc:	20001ff4 	.word	0x20001ff4
   124d0:	40001000 	.word	0x40001000
	if ((eptype == USB_D_EPTYPE_ISOCH) && st.bit.CRCERR) {
   124d4:	07d9      	lsls	r1, r3, #31
   124d6:	f57f af7d 	bpl.w	123d4 <_usb_d_dev_handler+0x550>
		bank[bank_n].STATUS_BK.bit.CRCERR = 0;
   124da:	f89e 100a 	ldrb.w	r1, [lr, #10]
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENCLR.reg = mask;
   124de:	f102 4382 	add.w	r3, r2, #1090519040	; 0x41000000
   124e2:	460a      	mov	r2, r1
   124e4:	f36f 0200 	bfc	r2, #0, #1
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg = mask;
   124e8:	2104      	movs	r1, #4
	if (!(_usb_d_dev_ep_is_used(ept) && _usb_d_dev_ep_is_busy(ept))) {
   124ea:	f01b 0f40 	tst.w	fp, #64	; 0x40
		bank[bank_n].STATUS_BK.bit.CRCERR = 0;
   124ee:	f88e 200a 	strb.w	r2, [lr, #10]
   124f2:	f888 1107 	strb.w	r1, [r8, #263]	; 0x107
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENCLR.reg = mask;
   124f6:	f883 1108 	strb.w	r1, [r3, #264]	; 0x108
	if (!(_usb_d_dev_ep_is_used(ept) && _usb_d_dev_ep_is_busy(ept))) {
   124fa:	f43f ad04 	beq.w	11f06 <_usb_d_dev_handler+0x82>
	ept->flags.bits.is_busy = 0;
   124fe:	4a11      	ldr	r2, [pc, #68]	; (12544 <_usb_d_dev_handler+0x6c0>)
   12500:	eb0a 0e04 	add.w	lr, sl, r4
   12504:	eb02 0e8e 	add.w	lr, r2, lr, lsl #2
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSSET.reg = mask;
   12508:	f04f 0c40 	mov.w	ip, #64	; 0x40
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg = mask;
   1250c:	2225      	movs	r2, #37	; 0x25
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSSET.reg = mask;
   1250e:	f888 c105 	strb.w	ip, [r8, #261]	; 0x105
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg = mask;
   12512:	f888 2107 	strb.w	r2, [r8, #263]	; 0x107
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENCLR.reg = mask;
   12516:	f883 2108 	strb.w	r2, [r3, #264]	; 0x108
   1251a:	f89e 2027 	ldrb.w	r2, [lr, #39]	; 0x27
	dev_inst.ep_callbacks.done(ept->ep, code, ept->trans_count);
   1251e:	4b09      	ldr	r3, [pc, #36]	; (12544 <_usb_d_dev_handler+0x6c0>)
	ept->flags.bits.is_busy = 0;
   12520:	f36f 1286 	bfc	r2, #6, #1
   12524:	f88e 2027 	strb.w	r2, [lr, #39]	; 0x27
	dev_inst.ep_callbacks.done(ept->ep, code, ept->trans_count);
   12528:	691b      	ldr	r3, [r3, #16]
   1252a:	68aa      	ldr	r2, [r5, #8]
   1252c:	4798      	blx	r3
   1252e:	e4ea      	b.n	11f06 <_usb_d_dev_handler+0x82>
		UsbDeviceDescBank *bank = &prvt_inst.desc_table[i].DeviceDescBank[0];
   12530:	2001      	movs	r0, #1
			lpm_variable = bank->EXTREG.bit.VARIABLE;
   12532:	eb03 1040 	add.w	r0, r3, r0, lsl #5
			bank->EXTREG.reg = 0;
   12536:	2300      	movs	r3, #0
			lpm_variable = bank->EXTREG.bit.VARIABLE;
   12538:	8901      	ldrh	r1, [r0, #8]
			bank->EXTREG.reg = 0;
   1253a:	8103      	strh	r3, [r0, #8]
			lpm_variable = bank->EXTREG.bit.VARIABLE;
   1253c:	f3c1 110a 	ubfx	r1, r1, #4, #11
   12540:	e6d7      	b.n	122f2 <_usb_d_dev_handler+0x46e>
   12542:	bf00      	nop
   12544:	20001ff4 	.word	0x20001ff4

00012548 <_usb_d_dev_init>:
{
   12548:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	return ((Usb *)hw)->DEVICE.SYNCBUSY.reg & reg;
   1254c:	f04f 4282 	mov.w	r2, #1090519040	; 0x41000000
   12550:	7893      	ldrb	r3, [r2, #2]
	if (!hri_usbdevice_is_syncing(hw, USB_SYNCBUSY_SWRST)) {
   12552:	07db      	lsls	r3, r3, #31
   12554:	d551      	bpl.n	125fa <_usb_d_dev_init+0xb2>
	while (((Usb *)hw)->DEVICE.SYNCBUSY.reg & reg) {
   12556:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
   1255a:	789c      	ldrb	r4, [r3, #2]
   1255c:	f014 0401 	ands.w	r4, r4, #1
   12560:	d1fb      	bne.n	1255a <_usb_d_dev_init+0x12>
	dev_inst.callbacks.sof   = (_usb_d_dev_sof_cb_t)_dummy_func_no_return;
   12562:	4b45      	ldr	r3, [pc, #276]	; (12678 <_usb_d_dev_init+0x130>)
   12564:	4a45      	ldr	r2, [pc, #276]	; (1267c <_usb_d_dev_init+0x134>)
   12566:	601a      	str	r2, [r3, #0]
   12568:	461e      	mov	r6, r3
   1256a:	461d      	mov	r5, r3
	dev_inst.callbacks.event = (_usb_d_dev_event_cb_t)_dummy_func_no_return;
   1256c:	605a      	str	r2, [r3, #4]
	dev_inst.ep_callbacks.setup = (_usb_d_dev_ep_cb_setup_t)_dummy_func_no_return;
   1256e:	609a      	str	r2, [r3, #8]
	dev_inst.ep_callbacks.more  = (_usb_d_dev_ep_cb_more_t)_dummy_func_no_return;
   12570:	60da      	str	r2, [r3, #12]
	dev_inst.ep_callbacks.done  = (_usb_d_dev_ep_cb_done_t)_dummy_func_no_return;
   12572:	611a      	str	r2, [r3, #16]
		dev_inst.ep[i].flags.u8 = 0;
   12574:	46a0      	mov	r8, r4
		dev_inst.ep[i].ep       = 0xFF;
   12576:	27ff      	movs	r7, #255	; 0xff
   12578:	e007      	b.n	1258a <_usb_d_dev_init+0x42>
	for (i = 0; i < USB_D_N_EP; i++) {
   1257a:	2c1b      	cmp	r4, #27
		dev_inst.ep[i].ep       = 0xFF;
   1257c:	f885 7026 	strb.w	r7, [r5, #38]	; 0x26
		dev_inst.ep[i].flags.u8 = 0;
   12580:	f885 8027 	strb.w	r8, [r5, #39]	; 0x27
   12584:	f105 0514 	add.w	r5, r5, #20
	for (i = 0; i < USB_D_N_EP; i++) {
   12588:	d01d      	beq.n	125c6 <_usb_d_dev_init+0x7e>
	if (!(_usb_d_dev_ep_is_used(ept) && _usb_d_dev_ep_is_busy(ept))) {
   1258a:	f895 0026 	ldrb.w	r0, [r5, #38]	; 0x26
   1258e:	eb04 0384 	add.w	r3, r4, r4, lsl #2
   12592:	eb06 0383 	add.w	r3, r6, r3, lsl #2
   12596:	28ff      	cmp	r0, #255	; 0xff
   12598:	f103 0320 	add.w	r3, r3, #32
   1259c:	f104 0401 	add.w	r4, r4, #1
   125a0:	d0eb      	beq.n	1257a <_usb_d_dev_init+0x32>
   125a2:	79da      	ldrb	r2, [r3, #7]
   125a4:	0651      	lsls	r1, r2, #25
   125a6:	d5e8      	bpl.n	1257a <_usb_d_dev_init+0x32>
	ept->flags.bits.is_busy = 0;
   125a8:	f36f 1286 	bfc	r2, #6, #1
   125ac:	71da      	strb	r2, [r3, #7]
	dev_inst.ep_callbacks.done(ept->ep, code, ept->trans_count);
   125ae:	69ea      	ldr	r2, [r5, #28]
   125b0:	6933      	ldr	r3, [r6, #16]
   125b2:	2103      	movs	r1, #3
   125b4:	4798      	blx	r3
	for (i = 0; i < USB_D_N_EP; i++) {
   125b6:	2c1b      	cmp	r4, #27
		dev_inst.ep[i].ep       = 0xFF;
   125b8:	f885 7026 	strb.w	r7, [r5, #38]	; 0x26
		dev_inst.ep[i].flags.u8 = 0;
   125bc:	f885 8027 	strb.w	r8, [r5, #39]	; 0x27
   125c0:	f105 0514 	add.w	r5, r5, #20
	for (i = 0; i < USB_D_N_EP; i++) {
   125c4:	d1e1      	bne.n	1258a <_usb_d_dev_init+0x42>
	memset(prvt_inst.desc_table, 0, sizeof(UsbDeviceDescriptor) * (CONF_USB_D_MAX_EP_N + 1));
   125c6:	2260      	movs	r2, #96	; 0x60
   125c8:	2100      	movs	r1, #0
   125ca:	482d      	ldr	r0, [pc, #180]	; (12680 <_usb_d_dev_init+0x138>)
   125cc:	f00b fdf6 	bl	1e1bc <memset>
	    = (*((uint32_t *)(NVMCTRL_SW0) + (NVM_USB_PAD_TRANSN_POS / 32)) >> (NVM_USB_PAD_TRANSN_POS % 32))
   125d0:	4b2c      	ldr	r3, [pc, #176]	; (12684 <_usb_d_dev_init+0x13c>)
   125d2:	681b      	ldr	r3, [r3, #0]
	uint32_t pad_transp
   125d4:	f3c3 1044 	ubfx	r0, r3, #5, #5
	uint32_t pad_trim = (*((uint32_t *)(NVMCTRL_SW0) + (NVM_USB_PAD_TRIM_POS / 32)) >> (NVM_USB_PAD_TRIM_POS % 32))
   125d8:	f3c3 2282 	ubfx	r2, r3, #10, #3
	if (pad_transn == 0 || pad_transn == 0x1F) {
   125dc:	f013 031f 	ands.w	r3, r3, #31
   125e0:	d027      	beq.n	12632 <_usb_d_dev_init+0xea>
   125e2:	2b1f      	cmp	r3, #31
   125e4:	d025      	beq.n	12632 <_usb_d_dev_init+0xea>
   125e6:	019b      	lsls	r3, r3, #6
	if (pad_transp == 0 || pad_transp == 0x1F) {
   125e8:	b338      	cbz	r0, 1263a <_usb_d_dev_init+0xf2>
   125ea:	281f      	cmp	r0, #31
   125ec:	d025      	beq.n	1263a <_usb_d_dev_init+0xf2>
   125ee:	b280      	uxth	r0, r0
	if (pad_trim == 0 || pad_trim == 0x7) {
   125f0:	b332      	cbz	r2, 12640 <_usb_d_dev_init+0xf8>
   125f2:	2a07      	cmp	r2, #7
   125f4:	d024      	beq.n	12640 <_usb_d_dev_init+0xf8>
   125f6:	0311      	lsls	r1, r2, #12
   125f8:	e024      	b.n	12644 <_usb_d_dev_init+0xfc>
   125fa:	7893      	ldrb	r3, [r2, #2]
   125fc:	079f      	lsls	r7, r3, #30
   125fe:	d1fc      	bne.n	125fa <_usb_d_dev_init+0xb2>

static inline hri_usb_ctrla_reg_t hri_usb_get_CTRLA_reg(const void *const hw, hri_usb_ctrla_reg_t mask)
{
	uint8_t tmp;
	hri_usb_wait_for_sync(hw, USB_SYNCBUSY_MASK);
	tmp = ((Usb *)hw)->HOST.CTRLA.reg;
   12600:	7813      	ldrb	r3, [r2, #0]
		if (hri_usbdevice_get_CTRLA_reg(hw, USB_CTRLA_ENABLE)) {
   12602:	079e      	lsls	r6, r3, #30
   12604:	d50d      	bpl.n	12622 <_usb_d_dev_init+0xda>
	((Usb *)hw)->HOST.CTRLA.reg &= ~USB_CTRLA_ENABLE;
   12606:	7813      	ldrb	r3, [r2, #0]
   12608:	f003 03fd 	and.w	r3, r3, #253	; 0xfd
   1260c:	7013      	strb	r3, [r2, #0]
	while (((Usb *)hw)->DEVICE.SYNCBUSY.reg & reg) {
   1260e:	f04f 4282 	mov.w	r2, #1090519040	; 0x41000000
   12612:	7893      	ldrb	r3, [r2, #2]
   12614:	079d      	lsls	r5, r3, #30
   12616:	d1fc      	bne.n	12612 <_usb_d_dev_init+0xca>
   12618:	f04f 4282 	mov.w	r2, #1090519040	; 0x41000000
   1261c:	7893      	ldrb	r3, [r2, #2]
   1261e:	079c      	lsls	r4, r3, #30
   12620:	d4fc      	bmi.n	1261c <_usb_d_dev_init+0xd4>
}

static inline void hri_usb_write_CTRLA_reg(const void *const hw, hri_usb_ctrla_reg_t data)
{
	USB_CRITICAL_SECTION_ENTER();
	((Usb *)hw)->HOST.CTRLA.reg = data;
   12622:	f04f 4282 	mov.w	r2, #1090519040	; 0x41000000
   12626:	2301      	movs	r3, #1
   12628:	7013      	strb	r3, [r2, #0]
	while (((Usb *)hw)->DEVICE.SYNCBUSY.reg & reg) {
   1262a:	7893      	ldrb	r3, [r2, #2]
   1262c:	0798      	lsls	r0, r3, #30
   1262e:	d1fc      	bne.n	1262a <_usb_d_dev_init+0xe2>
   12630:	e791      	b.n	12556 <_usb_d_dev_init+0xe>
	if (pad_transn == 0 || pad_transn == 0x1F) {
   12632:	f44f 7310 	mov.w	r3, #576	; 0x240
	if (pad_transp == 0 || pad_transp == 0x1F) {
   12636:	2800      	cmp	r0, #0
   12638:	d1d7      	bne.n	125ea <_usb_d_dev_init+0xa2>
   1263a:	2019      	movs	r0, #25
	if (pad_trim == 0 || pad_trim == 0x7) {
   1263c:	2a00      	cmp	r2, #0
   1263e:	d1d8      	bne.n	125f2 <_usb_d_dev_init+0xaa>
   12640:	f44f 41c0 	mov.w	r1, #24576	; 0x6000
	hw->DEVICE.PADCAL.reg = USB_PADCAL_TRANSN(pad_transn) | USB_PADCAL_TRANSP(pad_transp) | USB_PADCAL_TRIM(pad_trim);
   12644:	f04f 4282 	mov.w	r2, #1090519040	; 0x41000000
   12648:	4303      	orrs	r3, r0
   1264a:	430b      	orrs	r3, r1
   1264c:	8513      	strh	r3, [r2, #40]	; 0x28
	hw->DEVICE.QOSCTRL.bit.CQOS = 3;
   1264e:	78d3      	ldrb	r3, [r2, #3]
   12650:	f043 0303 	orr.w	r3, r3, #3
   12654:	70d3      	strb	r3, [r2, #3]
	hw->DEVICE.QOSCTRL.bit.DQOS = 3;
   12656:	78d3      	ldrb	r3, [r2, #3]
	((Usb *)hw)->HOST.CTRLA.reg = data;
   12658:	2104      	movs	r1, #4
   1265a:	f043 030c 	orr.w	r3, r3, #12
   1265e:	70d3      	strb	r3, [r2, #3]
	while (((Usb *)hw)->DEVICE.SYNCBUSY.reg & reg) {
   12660:	4613      	mov	r3, r2
	((Usb *)hw)->HOST.CTRLA.reg = data;
   12662:	7011      	strb	r1, [r2, #0]
	while (((Usb *)hw)->DEVICE.SYNCBUSY.reg & reg) {
   12664:	7898      	ldrb	r0, [r3, #2]
   12666:	f010 0003 	ands.w	r0, r0, #3
   1266a:	d1fb      	bne.n	12664 <_usb_d_dev_init+0x11c>
	hri_usbdevice_write_DESCADD_reg(hw, (uint32_t)prvt_inst.desc_table);
   1266c:	4a04      	ldr	r2, [pc, #16]	; (12680 <_usb_d_dev_init+0x138>)
}

static inline void hri_usb_write_DESCADD_reg(const void *const hw, hri_usb_descadd_reg_t data)
{
	USB_CRITICAL_SECTION_ENTER();
	((Usb *)hw)->HOST.DESCADD.reg = data;
   1266e:	625a      	str	r2, [r3, #36]	; 0x24
	((Usb *)hw)->DEVICE.CTRLB.reg = data;
   12670:	2201      	movs	r2, #1
   12672:	811a      	strh	r2, [r3, #8]
}
   12674:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   12678:	20001ff4 	.word	0x20001ff4
   1267c:	00011b15 	.word	0x00011b15
   12680:	20002224 	.word	0x20002224
   12684:	00800084 	.word	0x00800084

00012688 <_usb_d_dev_enable>:
	tmp = ((Usb *)hw)->HOST.SYNCBUSY.reg;
   12688:	f04f 4282 	mov.w	r2, #1090519040	; 0x41000000
   1268c:	7893      	ldrb	r3, [r2, #2]
	if (hri_usbdevice_get_SYNCBUSY_reg(hw, (USB_SYNCBUSY_ENABLE | USB_SYNCBUSY_SWRST))) {
   1268e:	079b      	lsls	r3, r3, #30
   12690:	d124      	bne.n	126dc <_usb_d_dev_enable+0x54>
{
   12692:	b470      	push	{r4, r5, r6}
	while (((Usb *)hw)->DEVICE.SYNCBUSY.reg & reg) {
   12694:	7893      	ldrb	r3, [r2, #2]
   12696:	0798      	lsls	r0, r3, #30
   12698:	d1fc      	bne.n	12694 <_usb_d_dev_enable+0xc>
	return ((Usb *)hw)->HOST.CTRLA.reg;
   1269a:	7813      	ldrb	r3, [r2, #0]
   1269c:	b2db      	uxtb	r3, r3
	if ((ctrla & USB_CTRLA_ENABLE) == 0) {
   1269e:	0799      	lsls	r1, r3, #30
   126a0:	d407      	bmi.n	126b2 <_usb_d_dev_enable+0x2a>
		hri_usbdevice_write_CTRLA_reg(hw, ctrla | USB_CTRLA_ENABLE);
   126a2:	f043 0302 	orr.w	r3, r3, #2
	((Usb *)hw)->HOST.CTRLA.reg = data;
   126a6:	7013      	strb	r3, [r2, #0]
	while (((Usb *)hw)->DEVICE.SYNCBUSY.reg & reg) {
   126a8:	f04f 4282 	mov.w	r2, #1090519040	; 0x41000000
   126ac:	7893      	ldrb	r3, [r2, #2]
   126ae:	079b      	lsls	r3, r3, #30
   126b0:	d1fc      	bne.n	126ac <_usb_d_dev_enable+0x24>
  NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
   126b2:	4b0c      	ldr	r3, [pc, #48]	; (126e4 <_usb_d_dev_enable+0x5c>)
	((Usb *)hw)->DEVICE.INTENSET.reg = mask;
   126b4:	f04f 4282 	mov.w	r2, #1090519040	; 0x41000000
   126b8:	f44f 3080 	mov.w	r0, #65536	; 0x10000
   126bc:	f44f 3600 	mov.w	r6, #131072	; 0x20000
   126c0:	f44f 2580 	mov.w	r5, #262144	; 0x40000
   126c4:	f44f 2400 	mov.w	r4, #524288	; 0x80000
   126c8:	f240 218d 	movw	r1, #653	; 0x28d
   126cc:	6098      	str	r0, [r3, #8]
   126ce:	609e      	str	r6, [r3, #8]
   126d0:	609d      	str	r5, [r3, #8]
   126d2:	609c      	str	r4, [r3, #8]
   126d4:	8311      	strh	r1, [r2, #24]
	return ERR_NONE;
   126d6:	2000      	movs	r0, #0
}
   126d8:	bc70      	pop	{r4, r5, r6}
   126da:	4770      	bx	lr
		return -USB_ERR_DENIED;
   126dc:	f06f 0010 	mvn.w	r0, #16
   126e0:	4770      	bx	lr
   126e2:	bf00      	nop
   126e4:	e000e100 	.word	0xe000e100

000126e8 <_usb_d_dev_attach>:
	((Usb *)hw)->DEVICE.CTRLB.reg &= ~USB_DEVICE_CTRLB_DETACH;
   126e8:	f04f 4282 	mov.w	r2, #1090519040	; 0x41000000
   126ec:	8913      	ldrh	r3, [r2, #8]
   126ee:	f023 0301 	bic.w	r3, r3, #1
   126f2:	041b      	lsls	r3, r3, #16
   126f4:	0c1b      	lsrs	r3, r3, #16
   126f6:	8113      	strh	r3, [r2, #8]
   126f8:	4770      	bx	lr
   126fa:	bf00      	nop

000126fc <_usb_d_dev_set_address>:
	((Usb *)hw)->DEVICE.DADD.reg = data;
   126fc:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
	hri_usbdevice_write_DADD_reg(USB, USB_DEVICE_DADD_ADDEN | USB_DEVICE_DADD_DADD(addr));
   12700:	f040 0080 	orr.w	r0, r0, #128	; 0x80
   12704:	7298      	strb	r0, [r3, #10]
   12706:	4770      	bx	lr

00012708 <_usb_d_dev_ep_init>:
{
   12708:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	uint8_t ep_index = (epn == 0) ? 0 : (dir ? (epn + CONF_USB_D_MAX_EP_N) : epn);
   1270c:	f010 050f 	ands.w	r5, r0, #15
   12710:	fa4f fc80 	sxtb.w	ip, r0
   12714:	d02a      	beq.n	1276c <_usb_d_dev_ep_init+0x64>
   12716:	f1bc 0f00 	cmp.w	ip, #0
   1271a:	bfb4      	ite	lt
   1271c:	1cab      	addlt	r3, r5, #2
   1271e:	462b      	movge	r3, r5
	if (epn > CONF_USB_D_MAX_EP_N) {
   12720:	2d02      	cmp	r5, #2
	uint8_t                        ep_type = attr & USB_EP_XTYPE_MASK;
   12722:	f001 0103 	and.w	r1, r1, #3
	if (epn > CONF_USB_D_MAX_EP_N) {
   12726:	d859      	bhi.n	127dc <_usb_d_dev_ep_init+0xd4>
	if (ept->ep != 0xFF) {
   12728:	009c      	lsls	r4, r3, #2
   1272a:	f8df e0b8 	ldr.w	lr, [pc, #184]	; 127e4 <_usb_d_dev_ep_init+0xdc>
   1272e:	18e6      	adds	r6, r4, r3
   12730:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
   12734:	f896 6026 	ldrb.w	r6, [r6, #38]	; 0x26
   12738:	2eff      	cmp	r6, #255	; 0xff
   1273a:	d14b      	bne.n	127d4 <_usb_d_dev_ep_init+0xcc>
	if (ep_type == USB_EP_XTYPE_CTRL) {
   1273c:	b1d1      	cbz	r1, 12774 <_usb_d_dev_ep_init+0x6c>
	if ((dir ? pcfg->i_cache : pcfg->cache) && ((dir ? pcfg->i_size : pcfg->size) < max_pkt_siz)) {
   1273e:	f1bc 0f00 	cmp.w	ip, #0
   12742:	db3a      	blt.n	127ba <_usb_d_dev_ep_init+0xb2>
   12744:	006f      	lsls	r7, r5, #1
   12746:	197e      	adds	r6, r7, r5
   12748:	f8df 809c 	ldr.w	r8, [pc, #156]	; 127e8 <_usb_d_dev_ep_init+0xe0>
   1274c:	f858 6026 	ldr.w	r6, [r8, r6, lsl #2]
   12750:	bb4e      	cbnz	r6, 127a6 <_usb_d_dev_ep_init+0x9e>
	ept->cache    = (uint8_t *)(dir ? pcfg->i_cache : pcfg->cache);
   12752:	4423      	add	r3, r4
   12754:	eb0e 0383 	add.w	r3, lr, r3, lsl #2
	ept->flags.u8 = (ep_type + 1);
   12758:	3101      	adds	r1, #1
   1275a:	f883 1027 	strb.w	r1, [r3, #39]	; 0x27
	ept->ep       = ep;
   1275e:	f883 0026 	strb.w	r0, [r3, #38]	; 0x26
	ept->cache    = (uint8_t *)(dir ? pcfg->i_cache : pcfg->cache);
   12762:	621e      	str	r6, [r3, #32]
	ept->size     = max_pkt_siz;
   12764:	849a      	strh	r2, [r3, #36]	; 0x24
	return USB_OK;
   12766:	2000      	movs	r0, #0
   12768:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	uint8_t                        ep_type = attr & USB_EP_XTYPE_MASK;
   1276c:	f001 0103 	and.w	r1, r1, #3
	return &dev_inst.ep[ep_index];
   12770:	462b      	mov	r3, r5
   12772:	e7d9      	b.n	12728 <_usb_d_dev_ep_init+0x20>
	uint8_t ep_index = (epn == 0) ? 0 : (dir ? (epn + CONF_USB_D_MAX_EP_N) : epn);
   12774:	b125      	cbz	r5, 12780 <_usb_d_dev_ep_init+0x78>
   12776:	f1bc 0f00 	cmp.w	ip, #0
   1277a:	db01      	blt.n	12780 <_usb_d_dev_ep_init+0x78>
   1277c:	1cae      	adds	r6, r5, #2
   1277e:	e000      	b.n	12782 <_usb_d_dev_ep_init+0x7a>
   12780:	462e      	mov	r6, r5
		if (ept_in->ep != 0xFF) {
   12782:	eb06 0686 	add.w	r6, r6, r6, lsl #2
   12786:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
   1278a:	f896 6026 	ldrb.w	r6, [r6, #38]	; 0x26
   1278e:	2eff      	cmp	r6, #255	; 0xff
   12790:	d120      	bne.n	127d4 <_usb_d_dev_ep_init+0xcc>
		if (pcfg->cache == NULL) {
   12792:	006f      	lsls	r7, r5, #1
   12794:	197e      	adds	r6, r7, r5
   12796:	f8df 8050 	ldr.w	r8, [pc, #80]	; 127e8 <_usb_d_dev_ep_init+0xe0>
   1279a:	f858 6026 	ldr.w	r6, [r8, r6, lsl #2]
   1279e:	b146      	cbz	r6, 127b2 <_usb_d_dev_ep_init+0xaa>
	if ((dir ? pcfg->i_cache : pcfg->cache) && ((dir ? pcfg->i_size : pcfg->size) < max_pkt_siz)) {
   127a0:	f1bc 0f00 	cmp.w	ip, #0
   127a4:	db0c      	blt.n	127c0 <_usb_d_dev_ep_init+0xb8>
   127a6:	443d      	add	r5, r7
   127a8:	eb08 0585 	add.w	r5, r8, r5, lsl #2
   127ac:	892d      	ldrh	r5, [r5, #8]
   127ae:	4295      	cmp	r5, r2
   127b0:	dacf      	bge.n	12752 <_usb_d_dev_ep_init+0x4a>
			return -USB_ERR_FUNC;
   127b2:	f06f 0012 	mvn.w	r0, #18
   127b6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   127ba:	f8df 802c 	ldr.w	r8, [pc, #44]	; 127e8 <_usb_d_dev_ep_init+0xe0>
   127be:	006f      	lsls	r7, r5, #1
	if ((dir ? pcfg->i_cache : pcfg->cache) && ((dir ? pcfg->i_size : pcfg->size) < max_pkt_siz)) {
   127c0:	442f      	add	r7, r5
   127c2:	eb08 0787 	add.w	r7, r8, r7, lsl #2
   127c6:	687d      	ldr	r5, [r7, #4]
   127c8:	b115      	cbz	r5, 127d0 <_usb_d_dev_ep_init+0xc8>
   127ca:	897e      	ldrh	r6, [r7, #10]
   127cc:	4296      	cmp	r6, r2
   127ce:	dbf0      	blt.n	127b2 <_usb_d_dev_ep_init+0xaa>
   127d0:	462e      	mov	r6, r5
   127d2:	e7be      	b.n	12752 <_usb_d_dev_ep_init+0x4a>
		return -USB_ERR_REDO;
   127d4:	f06f 0013 	mvn.w	r0, #19
   127d8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return -USB_ERR_PARAM;
   127dc:	f06f 0011 	mvn.w	r0, #17
   127e0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   127e4:	20001ff4 	.word	0x20001ff4
   127e8:	000230e8 	.word	0x000230e8

000127ec <_usb_d_dev_ep_deinit>:
{
   127ec:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	uint8_t ep_index = (epn == 0) ? 0 : (dir ? (epn + CONF_USB_D_MAX_EP_N) : epn);
   127f0:	f010 070f 	ands.w	r7, r0, #15
{
   127f4:	b082      	sub	sp, #8
   127f6:	fa4f f980 	sxtb.w	r9, r0
	uint8_t ep_index = (epn == 0) ? 0 : (dir ? (epn + CONF_USB_D_MAX_EP_N) : epn);
   127fa:	d009      	beq.n	12810 <_usb_d_dev_ep_deinit+0x24>
   127fc:	f1b9 0f00 	cmp.w	r9, #0
   12800:	bfb4      	ite	lt
   12802:	1cbe      	addlt	r6, r7, #2
   12804:	463e      	movge	r6, r7
	if (epn > CONF_USB_D_MAX_EP_N || !_usb_d_dev_ep_is_used(ept)) {
   12806:	2f02      	cmp	r7, #2
   12808:	d903      	bls.n	12812 <_usb_d_dev_ep_deinit+0x26>
}
   1280a:	b002      	add	sp, #8
   1280c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	return &dev_inst.ep[ep_index];
   12810:	463e      	mov	r6, r7
	if (epn > CONF_USB_D_MAX_EP_N || !_usb_d_dev_ep_is_used(ept)) {
   12812:	ea4f 0886 	mov.w	r8, r6, lsl #2
   12816:	4d3d      	ldr	r5, [pc, #244]	; (1290c <_usb_d_dev_ep_deinit+0x120>)
   12818:	eb08 0306 	add.w	r3, r8, r6
   1281c:	eb05 0383 	add.w	r3, r5, r3, lsl #2
   12820:	f893 1026 	ldrb.w	r1, [r3, #38]	; 0x26
   12824:	29ff      	cmp	r1, #255	; 0xff
   12826:	d0f0      	beq.n	1280a <_usb_d_dev_ep_deinit+0x1e>
	if (!(_usb_d_dev_ep_is_used(ept) && _usb_d_dev_ep_is_busy(ept))) {
   12828:	f893 3027 	ldrb.w	r3, [r3, #39]	; 0x27
	const uint8_t intflags[2] = {USB_D_BANK0_INT_FLAGS, USB_D_BANK1_INT_FLAGS};
   1282c:	224a      	movs	r2, #74	; 0x4a
   1282e:	4604      	mov	r4, r0
   12830:	f88d 2005 	strb.w	r2, [sp, #5]
   12834:	2025      	movs	r0, #37	; 0x25
	if (!(_usb_d_dev_ep_is_used(ept) && _usb_d_dev_ep_is_busy(ept))) {
   12836:	065a      	lsls	r2, r3, #25
	const uint8_t intflags[2] = {USB_D_BANK0_INT_FLAGS, USB_D_BANK1_INT_FLAGS};
   12838:	f88d 0004 	strb.w	r0, [sp, #4]
	if (!(_usb_d_dev_ep_is_used(ept) && _usb_d_dev_ep_is_busy(ept))) {
   1283c:	d41b      	bmi.n	12876 <_usb_d_dev_ep_deinit+0x8a>
	if (_usb_d_dev_ep_is_ctrl(ept)) {
   1283e:	f003 0307 	and.w	r3, r3, #7
   12842:	2b01      	cmp	r3, #1
   12844:	d050      	beq.n	128e8 <_usb_d_dev_ep_deinit+0xfc>
	} else if (USB_EP_GET_DIR(ep)) {
   12846:	f1b9 0f00 	cmp.w	r9, #0
   1284a:	db54      	blt.n	128f6 <_usb_d_dev_ep_deinit+0x10a>
   1284c:	0160      	lsls	r0, r4, #5
   1284e:	f100 4082 	add.w	r0, r0, #1090519040	; 0x41000000
		hw->DEVICE.DeviceEndpoint[ep].EPCFG.reg &= ~USB_DEVICE_EPCFG_EPTYPE0_Msk;
   12852:	f890 3100 	ldrb.w	r3, [r0, #256]	; 0x100
   12856:	f003 03f8 	and.w	r3, r3, #248	; 0xf8
   1285a:	f880 3100 	strb.w	r3, [r0, #256]	; 0x100
	ept->flags.u8 = 0;
   1285e:	4446      	add	r6, r8
   12860:	eb05 0586 	add.w	r5, r5, r6, lsl #2
   12864:	2200      	movs	r2, #0
	ept->ep       = 0xFF;
   12866:	23ff      	movs	r3, #255	; 0xff
	ept->flags.u8 = 0;
   12868:	f885 2027 	strb.w	r2, [r5, #39]	; 0x27
	ept->ep       = 0xFF;
   1286c:	f885 3026 	strb.w	r3, [r5, #38]	; 0x26
}
   12870:	b002      	add	sp, #8
   12872:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	uint8_t epn = USB_EP_GET_N(ept->ep);
   12876:	f001 030f 	and.w	r3, r1, #15
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSCLR.reg = mask;
   1287a:	f103 0208 	add.w	r2, r3, #8
   1287e:	0150      	lsls	r0, r2, #5
		return;
	}
	/* Stop transfer */
	if (dir) {
   12880:	f1b9 0f00 	cmp.w	r9, #0
   12884:	f100 4082 	add.w	r0, r0, #1090519040	; 0x41000000
   12888:	bfb5      	itete	lt
   1288a:	f04f 0e80 	movlt.w	lr, #128	; 0x80
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSSET.reg = mask;
   1288e:	f04f 0e40 	movge.w	lr, #64	; 0x40
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSCLR.reg = mask;
   12892:	f880 e004 	strblt.w	lr, [r0, #4]
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSSET.reg = mask;
   12896:	f880 e005 	strbge.w	lr, [r0, #5]
		_usbd_ep_set_in_rdy(epn, 1, false);
	} else {
		/* NAK OUT */
		_usbd_ep_set_out_rdy(epn, 0, false);
	}
	_usbd_ep_int_ack(epn, intflags[dir]);
   1289a:	f10d 0e08 	add.w	lr, sp, #8
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg = mask;
   1289e:	0150      	lsls	r0, r2, #5
   128a0:	eb0e 7ed9 	add.w	lr, lr, r9, lsr #31
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENCLR.reg = mask;
   128a4:	015a      	lsls	r2, r3, #5
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg = mask;
   128a6:	f100 4082 	add.w	r0, r0, #1090519040	; 0x41000000
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENCLR.reg = mask;
   128aa:	f102 4282 	add.w	r2, r2, #1090519040	; 0x41000000
	ept->flags.bits.is_busy = 0;
   128ae:	eb08 0306 	add.w	r3, r8, r6
   128b2:	eb05 0383 	add.w	r3, r5, r3, lsl #2
	_usbd_ep_int_ack(epn, intflags[dir]);
   128b6:	f81e ec04 	ldrb.w	lr, [lr, #-4]
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg = mask;
   128ba:	f880 e007 	strb.w	lr, [r0, #7]
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENCLR.reg = mask;
   128be:	f882 e108 	strb.w	lr, [r2, #264]	; 0x108
	ept->flags.bits.is_busy = 0;
   128c2:	f893 e027 	ldrb.w	lr, [r3, #39]	; 0x27
	dev_inst.ep_callbacks.done(ept->ep, code, ept->trans_count);
   128c6:	69da      	ldr	r2, [r3, #28]
	ept->flags.bits.is_busy = 0;
   128c8:	f103 0a20 	add.w	sl, r3, #32
   128cc:	f36f 1e86 	bfc	lr, #6, #1
	dev_inst.ep_callbacks.done(ept->ep, code, ept->trans_count);
   128d0:	692b      	ldr	r3, [r5, #16]
	ept->flags.bits.is_busy = 0;
   128d2:	f88a e007 	strb.w	lr, [sl, #7]
	dev_inst.ep_callbacks.done(ept->ep, code, ept->trans_count);
   128d6:	4608      	mov	r0, r1
   128d8:	2103      	movs	r1, #3
   128da:	4798      	blx	r3
   128dc:	f89a 3007 	ldrb.w	r3, [sl, #7]
	if (_usb_d_dev_ep_is_ctrl(ept)) {
   128e0:	f003 0307 	and.w	r3, r3, #7
   128e4:	2b01      	cmp	r3, #1
   128e6:	d1ae      	bne.n	12846 <_usb_d_dev_ep_deinit+0x5a>
		hw->DEVICE.DeviceEndpoint[ep].EPCFG.reg = 0;
   128e8:	0160      	lsls	r0, r4, #5
   128ea:	f100 4082 	add.w	r0, r0, #1090519040	; 0x41000000
   128ee:	2300      	movs	r3, #0
   128f0:	f880 3100 	strb.w	r3, [r0, #256]	; 0x100
   128f4:	e7b3      	b.n	1285e <_usb_d_dev_ep_deinit+0x72>
   128f6:	017f      	lsls	r7, r7, #5
   128f8:	f107 4782 	add.w	r7, r7, #1090519040	; 0x41000000
		hw->DEVICE.DeviceEndpoint[USB_EP_GET_N(ep)].EPCFG.reg &= ~USB_DEVICE_EPCFG_EPTYPE1_Msk;
   128fc:	f897 3100 	ldrb.w	r3, [r7, #256]	; 0x100
   12900:	f003 038f 	and.w	r3, r3, #143	; 0x8f
   12904:	f887 3100 	strb.w	r3, [r7, #256]	; 0x100
   12908:	e7a9      	b.n	1285e <_usb_d_dev_ep_deinit+0x72>
   1290a:	bf00      	nop
   1290c:	20001ff4 	.word	0x20001ff4

00012910 <_usb_d_dev_ep_enable>:
{
   12910:	b5f0      	push	{r4, r5, r6, r7, lr}
   12912:	b246      	sxtb	r6, r0
	uint8_t ep_index = (epn == 0) ? 0 : (dir ? (epn + CONF_USB_D_MAX_EP_N) : epn);
   12914:	f010 000f 	ands.w	r0, r0, #15
   12918:	d045      	beq.n	129a6 <_usb_d_dev_ep_enable+0x96>
	return ((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPCFG.reg;
   1291a:	0142      	lsls	r2, r0, #5
   1291c:	2e00      	cmp	r6, #0
   1291e:	f102 4282 	add.w	r2, r2, #1090519040	; 0x41000000
   12922:	bfb4      	ite	lt
   12924:	1c83      	addlt	r3, r0, #2
   12926:	4603      	movge	r3, r0
   12928:	f892 4100 	ldrb.w	r4, [r2, #256]	; 0x100
	return &dev_inst.ep[ep_index];
   1292c:	4a84      	ldr	r2, [pc, #528]	; (12b40 <_usb_d_dev_ep_enable+0x230>)
   1292e:	1c59      	adds	r1, r3, #1
   12930:	eb01 0181 	add.w	r1, r1, r1, lsl #2
	if (epn > CONF_USB_D_MAX_EP_N || !_usb_d_dev_ep_is_used(ept)) {
   12934:	2802      	cmp	r0, #2
   12936:	b2e4      	uxtb	r4, r4
	return &dev_inst.ep[ep_index];
   12938:	eb02 0181 	add.w	r1, r2, r1, lsl #2
	if (epn > CONF_USB_D_MAX_EP_N || !_usb_d_dev_ep_is_used(ept)) {
   1293c:	f200 809f 	bhi.w	12a7e <_usb_d_dev_ep_enable+0x16e>
   12940:	eb03 0383 	add.w	r3, r3, r3, lsl #2
   12944:	eb02 0383 	add.w	r3, r2, r3, lsl #2
   12948:	f893 2026 	ldrb.w	r2, [r3, #38]	; 0x26
   1294c:	2aff      	cmp	r2, #255	; 0xff
   1294e:	f000 8096 	beq.w	12a7e <_usb_d_dev_ep_enable+0x16e>
	if (ept->flags.bits.eptype == USB_D_EPTYPE_CTRL) {
   12952:	f893 2027 	ldrb.w	r2, [r3, #39]	; 0x27
	bank = prvt_inst.desc_table[epn].DeviceDescBank;
   12956:	4d7b      	ldr	r5, [pc, #492]	; (12b44 <_usb_d_dev_ep_enable+0x234>)
	if (ept->flags.bits.eptype == USB_D_EPTYPE_CTRL) {
   12958:	f002 0e07 	and.w	lr, r2, #7
   1295c:	0140      	lsls	r0, r0, #5
   1295e:	f1be 0f01 	cmp.w	lr, #1
	bank = prvt_inst.desc_table[epn].DeviceDescBank;
   12962:	eb05 0700 	add.w	r7, r5, r0
	if (ept->flags.bits.eptype == USB_D_EPTYPE_CTRL) {
   12966:	d028      	beq.n	129ba <_usb_d_dev_ep_enable+0xaa>
	} else if (dir) {
   12968:	2e00      	cmp	r6, #0
   1296a:	db65      	blt.n	12a38 <_usb_d_dev_ep_enable+0x128>
		if (epcfg & USB_DEVICE_EPCFG_EPTYPE0_Msk) {
   1296c:	0761      	lsls	r1, r4, #29
   1296e:	f040 80a4 	bne.w	12aba <_usb_d_dev_ep_enable+0x1aa>
		bank[0].PCKSIZE.reg = USB_DEVICE_PCKSIZE_MULTI_PACKET_SIZE(ept->size)
   12972:	8c99      	ldrh	r1, [r3, #36]	; 0x24
   12974:	4b74      	ldr	r3, [pc, #464]	; (12b48 <_usb_d_dev_ep_enable+0x238>)
		epcfg |= USB_DEVICE_EPCFG_EPTYPE0(ept->flags.bits.eptype);
   12976:	f002 0207 	and.w	r2, r2, #7
   1297a:	f100 4682 	add.w	r6, r0, #1090519040	; 0x41000000
   1297e:	4322      	orrs	r2, r4
	        : ((n > 256) ? 6 : ((n > 128) ? 5 : ((n > 64) ? 4 : ((n > 32) ? 3 : ((n > 16) ? 2 : ((n > 8) ? 1 : 0)))))));
   12980:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPCFG.reg = data;
   12984:	f886 2100 	strb.w	r2, [r6, #256]	; 0x100
		bank[0].PCKSIZE.reg = USB_DEVICE_PCKSIZE_MULTI_PACKET_SIZE(ept->size)
   12988:	ea03 3281 	and.w	r2, r3, r1, lsl #14
	        : ((n > 256) ? 6 : ((n > 128) ? 5 : ((n > 64) ? 4 : ((n > 32) ? 3 : ((n > 16) ? 2 : ((n > 8) ? 1 : 0)))))));
   1298c:	d97a      	bls.n	12a84 <_usb_d_dev_ep_enable+0x174>
   1298e:	f04f 41e0 	mov.w	r1, #1879048192	; 0x70000000
	bank->STATUS_BK.reg     = 0;
   12992:	182b      	adds	r3, r5, r0
		                      | USB_DEVICE_PCKSIZE_SIZE(_usbd_ep_pcksize_size(ept->size));
   12994:	430a      	orrs	r2, r1
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSSET.reg = mask;
   12996:	2440      	movs	r4, #64	; 0x40
	bank->STATUS_BK.reg     = 0;
   12998:	2100      	movs	r1, #0
		bank[0].PCKSIZE.reg = USB_DEVICE_PCKSIZE_MULTI_PACKET_SIZE(ept->size)
   1299a:	607a      	str	r2, [r7, #4]
   1299c:	f886 4105 	strb.w	r4, [r6, #261]	; 0x105
	bank->STATUS_BK.reg     = 0;
   129a0:	7299      	strb	r1, [r3, #10]
	return USB_OK;
   129a2:	4608      	mov	r0, r1
   129a4:	bdf0      	pop	{r4, r5, r6, r7, pc}
	return ((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPCFG.reg;
   129a6:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
	return &dev_inst.ep[ep_index];
   129aa:	4968      	ldr	r1, [pc, #416]	; (12b4c <_usb_d_dev_ep_enable+0x23c>)
   129ac:	f893 4100 	ldrb.w	r4, [r3, #256]	; 0x100
   129b0:	f1a1 0214 	sub.w	r2, r1, #20
   129b4:	b2e4      	uxtb	r4, r4
   129b6:	4603      	mov	r3, r0
   129b8:	e7c2      	b.n	12940 <_usb_d_dev_ep_enable+0x30>
		if (epcfg & (USB_DEVICE_EPCFG_EPTYPE1_Msk | USB_DEVICE_EPCFG_EPTYPE0_Msk)) {
   129ba:	f014 0f77 	tst.w	r4, #119	; 0x77
   129be:	d17c      	bne.n	12aba <_usb_d_dev_ep_enable+0x1aa>
		bank[0].PCKSIZE.reg = USB_DEVICE_PCKSIZE_MULTI_PACKET_SIZE(ept->size)
   129c0:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
   129c2:	4a61      	ldr	r2, [pc, #388]	; (12b48 <_usb_d_dev_ep_enable+0x238>)
   129c4:	f100 4682 	add.w	r6, r0, #1090519040	; 0x41000000
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPCFG.reg = data;
   129c8:	2411      	movs	r4, #17
	        : ((n > 256) ? 6 : ((n > 128) ? 5 : ((n > 64) ? 4 : ((n > 32) ? 3 : ((n > 16) ? 2 : ((n > 8) ? 1 : 0)))))));
   129ca:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
		bank[0].PCKSIZE.reg = USB_DEVICE_PCKSIZE_MULTI_PACKET_SIZE(ept->size)
   129ce:	ea02 3283 	and.w	r2, r2, r3, lsl #14
   129d2:	f886 4100 	strb.w	r4, [r6, #256]	; 0x100
	        : ((n > 256) ? 6 : ((n > 128) ? 5 : ((n > 64) ? 4 : ((n > 32) ? 3 : ((n > 16) ? 2 : ((n > 8) ? 1 : 0)))))));
   129d6:	d94c      	bls.n	12a72 <_usb_d_dev_ep_enable+0x162>
   129d8:	f04f 44e0 	mov.w	r4, #1879048192	; 0x70000000
		    = USB_DEVICE_PCKSIZE_BYTE_COUNT(ept->size) | USB_DEVICE_PCKSIZE_SIZE(_usbd_ep_pcksize_size(ept->size));
   129dc:	f3c3 030d 	ubfx	r3, r3, #0, #14
   129e0:	4323      	orrs	r3, r4
		                      | USB_DEVICE_PCKSIZE_SIZE(_usbd_ep_pcksize_size(ept->size));
   129e2:	4322      	orrs	r2, r4
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSCLR.reg = mask;
   129e4:	f04f 0e80 	mov.w	lr, #128	; 0x80
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSSET.reg = mask;
   129e8:	2440      	movs	r4, #64	; 0x40
		bank[0].PCKSIZE.reg = USB_DEVICE_PCKSIZE_MULTI_PACKET_SIZE(ept->size)
   129ea:	607a      	str	r2, [r7, #4]
		    = USB_DEVICE_PCKSIZE_BYTE_COUNT(ept->size) | USB_DEVICE_PCKSIZE_SIZE(_usbd_ep_pcksize_size(ept->size));
   129ec:	617b      	str	r3, [r7, #20]
   129ee:	f886 4105 	strb.w	r4, [r6, #261]	; 0x105
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSCLR.reg = mask;
   129f2:	f886 e104 	strb.w	lr, [r6, #260]	; 0x104
	uint8_t epn = USB_EP_GET_N(ept->ep);
   129f6:	7c8a      	ldrb	r2, [r1, #18]
   129f8:	8a0f      	ldrh	r7, [r1, #16]
	_usbd_ep_set_buf(epn, 0, (uint32_t)ept->cache);
   129fa:	f8d1 e00c 	ldr.w	lr, [r1, #12]
	uint8_t epn = USB_EP_GET_N(ept->ep);
   129fe:	f002 020f 	and.w	r2, r2, #15
	bank->STATUS_BK.reg     = 0;
   12a02:	182b      	adds	r3, r5, r0
	bank->ADDR.reg          = addr;
   12a04:	0151      	lsls	r1, r2, #5
	bank->STATUS_BK.reg     = 0;
   12a06:	2000      	movs	r0, #0
   12a08:	7298      	strb	r0, [r3, #10]
	bank->ADDR.reg          = addr;
   12a0a:	186e      	adds	r6, r5, r1
	bank->STATUS_BK.reg     = 0;
   12a0c:	7698      	strb	r0, [r3, #26]
	bank->ADDR.reg          = addr;
   12a0e:	f845 e001 	str.w	lr, [r5, r1]
	bank->PCKSIZE.bit.MULTI_PACKET_SIZE = size;
   12a12:	6873      	ldr	r3, [r6, #4]
   12a14:	f367 339b 	bfi	r3, r7, #14, #14
   12a18:	6073      	str	r3, [r6, #4]
	bank->PCKSIZE.bit.BYTE_COUNT = count;
   12a1a:	6872      	ldr	r2, [r6, #4]
   12a1c:	f101 4382 	add.w	r3, r1, #1090519040	; 0x41000000
   12a20:	f360 020d 	bfi	r2, r0, #0, #14
   12a24:	27b0      	movs	r7, #176	; 0xb0
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENSET.reg = mask;
   12a26:	2510      	movs	r5, #16
   12a28:	6072      	str	r2, [r6, #4]
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSCLR.reg = mask;
   12a2a:	f883 7104 	strb.w	r7, [r3, #260]	; 0x104
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSSET.reg = mask;
   12a2e:	f883 4105 	strb.w	r4, [r3, #261]	; 0x105
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENSET.reg = mask;
   12a32:	f883 5109 	strb.w	r5, [r3, #265]	; 0x109
   12a36:	bdf0      	pop	{r4, r5, r6, r7, pc}
		if (epcfg & USB_DEVICE_EPCFG_EPTYPE1_Msk) {
   12a38:	f014 0f70 	tst.w	r4, #112	; 0x70
   12a3c:	d13d      	bne.n	12aba <_usb_d_dev_ep_enable+0x1aa>
		    = USB_DEVICE_PCKSIZE_BYTE_COUNT(ept->size) | USB_DEVICE_PCKSIZE_SIZE(_usbd_ep_pcksize_size(ept->size));
   12a3e:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
		epcfg |= USB_DEVICE_EPCFG_EPTYPE1(ept->flags.bits.eptype);
   12a40:	0112      	lsls	r2, r2, #4
   12a42:	f002 0270 	and.w	r2, r2, #112	; 0x70
   12a46:	f100 4682 	add.w	r6, r0, #1090519040	; 0x41000000
   12a4a:	4322      	orrs	r2, r4
	        : ((n > 256) ? 6 : ((n > 128) ? 5 : ((n > 64) ? 4 : ((n > 32) ? 3 : ((n > 16) ? 2 : ((n > 8) ? 1 : 0)))))));
   12a4c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPCFG.reg = data;
   12a50:	f886 2100 	strb.w	r2, [r6, #256]	; 0x100
		    = USB_DEVICE_PCKSIZE_BYTE_COUNT(ept->size) | USB_DEVICE_PCKSIZE_SIZE(_usbd_ep_pcksize_size(ept->size));
   12a54:	f3c3 010d 	ubfx	r1, r3, #0, #14
	        : ((n > 256) ? 6 : ((n > 128) ? 5 : ((n > 64) ? 4 : ((n > 32) ? 3 : ((n > 16) ? 2 : ((n > 8) ? 1 : 0)))))));
   12a58:	d91a      	bls.n	12a90 <_usb_d_dev_ep_enable+0x180>
   12a5a:	f04f 42e0 	mov.w	r2, #1879048192	; 0x70000000
	bank->STATUS_BK.reg     = 0;
   12a5e:	182b      	adds	r3, r5, r0
		    = USB_DEVICE_PCKSIZE_BYTE_COUNT(ept->size) | USB_DEVICE_PCKSIZE_SIZE(_usbd_ep_pcksize_size(ept->size));
   12a60:	430a      	orrs	r2, r1
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSCLR.reg = mask;
   12a62:	2480      	movs	r4, #128	; 0x80
	bank->STATUS_BK.reg     = 0;
   12a64:	2100      	movs	r1, #0
		    = USB_DEVICE_PCKSIZE_BYTE_COUNT(ept->size) | USB_DEVICE_PCKSIZE_SIZE(_usbd_ep_pcksize_size(ept->size));
   12a66:	617a      	str	r2, [r7, #20]
   12a68:	f886 4104 	strb.w	r4, [r6, #260]	; 0x104
	bank->STATUS_BK.reg     = 0;
   12a6c:	7699      	strb	r1, [r3, #26]
	return USB_OK;
   12a6e:	4608      	mov	r0, r1
   12a70:	bdf0      	pop	{r4, r5, r6, r7, pc}
	        : ((n > 256) ? 6 : ((n > 128) ? 5 : ((n > 64) ? 4 : ((n > 32) ? 3 : ((n > 16) ? 2 : ((n > 8) ? 1 : 0)))))));
   12a72:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
   12a76:	d923      	bls.n	12ac0 <_usb_d_dev_ep_enable+0x1b0>
   12a78:	f04f 44c0 	mov.w	r4, #1610612736	; 0x60000000
   12a7c:	e7ae      	b.n	129dc <_usb_d_dev_ep_enable+0xcc>
		return -USB_ERR_PARAM;
   12a7e:	f06f 0011 	mvn.w	r0, #17
   12a82:	bdf0      	pop	{r4, r5, r6, r7, pc}
	        : ((n > 256) ? 6 : ((n > 128) ? 5 : ((n > 64) ? 4 : ((n > 32) ? 3 : ((n > 16) ? 2 : ((n > 8) ? 1 : 0)))))));
   12a84:	f5b1 7f80 	cmp.w	r1, #256	; 0x100
   12a88:	d908      	bls.n	12a9c <_usb_d_dev_ep_enable+0x18c>
   12a8a:	f04f 41c0 	mov.w	r1, #1610612736	; 0x60000000
   12a8e:	e780      	b.n	12992 <_usb_d_dev_ep_enable+0x82>
   12a90:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
   12a94:	d907      	bls.n	12aa6 <_usb_d_dev_ep_enable+0x196>
   12a96:	f04f 42c0 	mov.w	r2, #1610612736	; 0x60000000
   12a9a:	e7e0      	b.n	12a5e <_usb_d_dev_ep_enable+0x14e>
   12a9c:	2980      	cmp	r1, #128	; 0x80
   12a9e:	d907      	bls.n	12ab0 <_usb_d_dev_ep_enable+0x1a0>
   12aa0:	f04f 41a0 	mov.w	r1, #1342177280	; 0x50000000
   12aa4:	e775      	b.n	12992 <_usb_d_dev_ep_enable+0x82>
   12aa6:	2b80      	cmp	r3, #128	; 0x80
   12aa8:	d914      	bls.n	12ad4 <_usb_d_dev_ep_enable+0x1c4>
   12aaa:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
   12aae:	e7d6      	b.n	12a5e <_usb_d_dev_ep_enable+0x14e>
   12ab0:	2940      	cmp	r1, #64	; 0x40
   12ab2:	d914      	bls.n	12ade <_usb_d_dev_ep_enable+0x1ce>
   12ab4:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
   12ab8:	e76b      	b.n	12992 <_usb_d_dev_ep_enable+0x82>
			return -USB_ERR_REDO;
   12aba:	f06f 0013 	mvn.w	r0, #19
   12abe:	bdf0      	pop	{r4, r5, r6, r7, pc}
	        : ((n > 256) ? 6 : ((n > 128) ? 5 : ((n > 64) ? 4 : ((n > 32) ? 3 : ((n > 16) ? 2 : ((n > 8) ? 1 : 0)))))));
   12ac0:	2b80      	cmp	r3, #128	; 0x80
   12ac2:	d902      	bls.n	12aca <_usb_d_dev_ep_enable+0x1ba>
   12ac4:	f04f 44a0 	mov.w	r4, #1342177280	; 0x50000000
   12ac8:	e788      	b.n	129dc <_usb_d_dev_ep_enable+0xcc>
   12aca:	2b40      	cmp	r3, #64	; 0x40
   12acc:	d90c      	bls.n	12ae8 <_usb_d_dev_ep_enable+0x1d8>
   12ace:	f04f 4480 	mov.w	r4, #1073741824	; 0x40000000
   12ad2:	e783      	b.n	129dc <_usb_d_dev_ep_enable+0xcc>
   12ad4:	2b40      	cmp	r3, #64	; 0x40
   12ad6:	d90c      	bls.n	12af2 <_usb_d_dev_ep_enable+0x1e2>
   12ad8:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
   12adc:	e7bf      	b.n	12a5e <_usb_d_dev_ep_enable+0x14e>
   12ade:	2920      	cmp	r1, #32
   12ae0:	d90c      	bls.n	12afc <_usb_d_dev_ep_enable+0x1ec>
   12ae2:	f04f 5140 	mov.w	r1, #805306368	; 0x30000000
   12ae6:	e754      	b.n	12992 <_usb_d_dev_ep_enable+0x82>
   12ae8:	2b20      	cmp	r3, #32
   12aea:	d90c      	bls.n	12b06 <_usb_d_dev_ep_enable+0x1f6>
   12aec:	f04f 5440 	mov.w	r4, #805306368	; 0x30000000
   12af0:	e774      	b.n	129dc <_usb_d_dev_ep_enable+0xcc>
   12af2:	2b20      	cmp	r3, #32
   12af4:	d90c      	bls.n	12b10 <_usb_d_dev_ep_enable+0x200>
   12af6:	f04f 5240 	mov.w	r2, #805306368	; 0x30000000
   12afa:	e7b0      	b.n	12a5e <_usb_d_dev_ep_enable+0x14e>
   12afc:	2910      	cmp	r1, #16
   12afe:	d90c      	bls.n	12b1a <_usb_d_dev_ep_enable+0x20a>
   12b00:	f04f 5100 	mov.w	r1, #536870912	; 0x20000000
   12b04:	e745      	b.n	12992 <_usb_d_dev_ep_enable+0x82>
   12b06:	2b10      	cmp	r3, #16
   12b08:	d90d      	bls.n	12b26 <_usb_d_dev_ep_enable+0x216>
   12b0a:	f04f 5400 	mov.w	r4, #536870912	; 0x20000000
   12b0e:	e765      	b.n	129dc <_usb_d_dev_ep_enable+0xcc>
   12b10:	2b10      	cmp	r3, #16
   12b12:	d90e      	bls.n	12b32 <_usb_d_dev_ep_enable+0x222>
   12b14:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
   12b18:	e7a1      	b.n	12a5e <_usb_d_dev_ep_enable+0x14e>
   12b1a:	2908      	cmp	r1, #8
   12b1c:	bf94      	ite	ls
   12b1e:	2100      	movls	r1, #0
   12b20:	2101      	movhi	r1, #1
   12b22:	0709      	lsls	r1, r1, #28
   12b24:	e735      	b.n	12992 <_usb_d_dev_ep_enable+0x82>
   12b26:	2b08      	cmp	r3, #8
   12b28:	bf94      	ite	ls
   12b2a:	2400      	movls	r4, #0
   12b2c:	2401      	movhi	r4, #1
   12b2e:	0724      	lsls	r4, r4, #28
   12b30:	e754      	b.n	129dc <_usb_d_dev_ep_enable+0xcc>
   12b32:	2b08      	cmp	r3, #8
   12b34:	bf94      	ite	ls
   12b36:	2300      	movls	r3, #0
   12b38:	2301      	movhi	r3, #1
   12b3a:	071a      	lsls	r2, r3, #28
   12b3c:	e78f      	b.n	12a5e <_usb_d_dev_ep_enable+0x14e>
   12b3e:	bf00      	nop
   12b40:	20001ff4 	.word	0x20001ff4
   12b44:	20002224 	.word	0x20002224
   12b48:	0fffc000 	.word	0x0fffc000
   12b4c:	20002008 	.word	0x20002008

00012b50 <_usb_d_dev_ep_stall>:
{
   12b50:	b243      	sxtb	r3, r0
	uint8_t ep_index = (epn == 0) ? 0 : (dir ? (epn + CONF_USB_D_MAX_EP_N) : epn);
   12b52:	f010 000f 	ands.w	r0, r0, #15
{
   12b56:	b5f0      	push	{r4, r5, r6, r7, lr}
	bool                  dir = USB_EP_GET_DIR(ep);
   12b58:	ea4f 75d3 	mov.w	r5, r3, lsr #31
	uint8_t ep_index = (epn == 0) ? 0 : (dir ? (epn + CONF_USB_D_MAX_EP_N) : epn);
   12b5c:	d01e      	beq.n	12b9c <_usb_d_dev_ep_stall+0x4c>
   12b5e:	2b00      	cmp	r3, #0
   12b60:	bfb4      	ite	lt
   12b62:	1c83      	addlt	r3, r0, #2
   12b64:	4603      	movge	r3, r0
	return &dev_inst.ep[ep_index];
   12b66:	1c5c      	adds	r4, r3, #1
   12b68:	4a40      	ldr	r2, [pc, #256]	; (12c6c <_usb_d_dev_ep_stall+0x11c>)
   12b6a:	eb04 0484 	add.w	r4, r4, r4, lsl #2
	if (epn > CONF_USB_D_MAX_EP_N) {
   12b6e:	2802      	cmp	r0, #2
	return &dev_inst.ep[ep_index];
   12b70:	eb02 0284 	add.w	r2, r2, r4, lsl #2
	if (epn > CONF_USB_D_MAX_EP_N) {
   12b74:	d86d      	bhi.n	12c52 <_usb_d_dev_ep_stall+0x102>
	if (USB_EP_STALL_SET == ctrl) {
   12b76:	2901      	cmp	r1, #1
   12b78:	d014      	beq.n	12ba4 <_usb_d_dev_ep_stall+0x54>
	} else if (USB_EP_STALL_CLR == ctrl) {
   12b7a:	b389      	cbz	r1, 12be0 <_usb_d_dev_ep_stall+0x90>
	uint8_t epn = USB_EP_GET_N(ept->ep);
   12b7c:	7c93      	ldrb	r3, [r2, #18]
	return ((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUS.reg;
   12b7e:	f003 030f 	and.w	r3, r3, #15
   12b82:	015b      	lsls	r3, r3, #5
   12b84:	f103 4382 	add.w	r3, r3, #1090519040	; 0x41000000
	return (hri_usbendpoint_read_EPSTATUS_reg(hw, epn) & (USB_DEVICE_EPSTATUS_STALLRQ0 << bank_n));
   12b88:	2210      	movs	r2, #16
   12b8a:	f893 1106 	ldrb.w	r1, [r3, #262]	; 0x106
   12b8e:	fa02 f305 	lsl.w	r3, r2, r5
   12b92:	420b      	tst	r3, r1
   12b94:	bf14      	ite	ne
   12b96:	2001      	movne	r0, #1
   12b98:	2000      	moveq	r0, #0
   12b9a:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (USB_EP_STALL_SET == ctrl) {
   12b9c:	2901      	cmp	r1, #1
	return &dev_inst.ep[ep_index];
   12b9e:	4a34      	ldr	r2, [pc, #208]	; (12c70 <_usb_d_dev_ep_stall+0x120>)
   12ba0:	4603      	mov	r3, r0
	if (USB_EP_STALL_SET == ctrl) {
   12ba2:	d1ea      	bne.n	12b7a <_usb_d_dev_ep_stall+0x2a>
	uint8_t epn = USB_EP_GET_N(ept->ep);
   12ba4:	4931      	ldr	r1, [pc, #196]	; (12c6c <_usb_d_dev_ep_stall+0x11c>)
   12ba6:	eb03 0383 	add.w	r3, r3, r3, lsl #2
   12baa:	eb01 0183 	add.w	r1, r1, r3, lsl #2
		hri_usbendpoint_set_EPSTATUS_reg(USB, epn, (USB_DEVICE_EPSTATUS_STALLRQ0 << bank_n));
   12bae:	2410      	movs	r4, #16
	uint8_t epn = USB_EP_GET_N(ept->ep);
   12bb0:	f891 2026 	ldrb.w	r2, [r1, #38]	; 0x26
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSSET.reg = mask;
   12bb4:	f002 020f 	and.w	r2, r2, #15
   12bb8:	0150      	lsls	r0, r2, #5
	_usbd_ep_int_en(epn, USB_DEVICE_EPINTFLAG_STALL0 << dir);
   12bba:	2320      	movs	r3, #32
   12bbc:	f100 4082 	add.w	r0, r0, #1090519040	; 0x41000000
		hri_usbendpoint_set_EPSTATUS_reg(USB, epn, (USB_DEVICE_EPSTATUS_STALLRQ0 << bank_n));
   12bc0:	40ac      	lsls	r4, r5
	_usbd_ep_int_en(epn, USB_DEVICE_EPINTFLAG_STALL0 << dir);
   12bc2:	40ab      	lsls	r3, r5
		hri_usbendpoint_set_EPSTATUS_reg(USB, epn, (USB_DEVICE_EPSTATUS_STALLRQ0 << bank_n));
   12bc4:	b2e4      	uxtb	r4, r4
	hri_usbendpoint_set_EPINTEN_reg(USB, epn, flags);
   12bc6:	b2db      	uxtb	r3, r3
   12bc8:	f880 4105 	strb.w	r4, [r0, #261]	; 0x105
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENSET.reg = mask;
   12bcc:	f880 3109 	strb.w	r3, [r0, #265]	; 0x109
	ept->flags.bits.is_stalled = 1;
   12bd0:	f891 3027 	ldrb.w	r3, [r1, #39]	; 0x27
   12bd4:	f043 0308 	orr.w	r3, r3, #8
   12bd8:	f881 3027 	strb.w	r3, [r1, #39]	; 0x27
		rc = _usb_d_dev_ep_stall_set(ept, dir);
   12bdc:	2000      	movs	r0, #0
   12bde:	bdf0      	pop	{r4, r5, r6, r7, pc}
	uint8_t epn        = USB_EP_GET_N(ept->ep);
   12be0:	009e      	lsls	r6, r3, #2
   12be2:	4c22      	ldr	r4, [pc, #136]	; (12c6c <_usb_d_dev_ep_stall+0x11c>)
   12be4:	18f2      	adds	r2, r6, r3
   12be6:	eb04 0282 	add.w	r2, r4, r2, lsl #2
	return (hri_usbendpoint_read_EPSTATUS_reg(hw, epn) & (USB_DEVICE_EPSTATUS_STALLRQ0 << bank_n));
   12bea:	2010      	movs	r0, #16
	uint8_t epn        = USB_EP_GET_N(ept->ep);
   12bec:	f892 2026 	ldrb.w	r2, [r2, #38]	; 0x26
   12bf0:	f002 020f 	and.w	r2, r2, #15
   12bf4:	0151      	lsls	r1, r2, #5
   12bf6:	f101 4182 	add.w	r1, r1, #1090519040	; 0x41000000
	return (hri_usbendpoint_read_EPSTATUS_reg(hw, epn) & (USB_DEVICE_EPSTATUS_STALLRQ0 << bank_n));
   12bfa:	40a8      	lsls	r0, r5
	return ((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUS.reg;
   12bfc:	f891 7106 	ldrb.w	r7, [r1, #262]	; 0x106
	if (!is_stalled) {
   12c00:	4207      	tst	r7, r0
   12c02:	d01b      	beq.n	12c3c <_usb_d_dev_ep_stall+0xec>
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENCLR.reg = mask;
   12c04:	0152      	lsls	r2, r2, #5
	_usbd_ep_int_dis(epn, USB_DEVICE_EPINTFLAG_STALL0 << dir);
   12c06:	2720      	movs	r7, #32
   12c08:	f102 4282 	add.w	r2, r2, #1090519040	; 0x41000000
   12c0c:	40af      	lsls	r7, r5
		hri_usbendpoint_clear_EPSTATUS_reg(USB, epn, (USB_DEVICE_EPSTATUS_STALLRQ0 << bank_n));
   12c0e:	b2c0      	uxtb	r0, r0
	hri_usbendpoint_clear_EPINTEN_reg(USB, epn, flags);
   12c10:	fa5f fe87 	uxtb.w	lr, r7
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSCLR.reg = mask;
   12c14:	f881 0104 	strb.w	r0, [r1, #260]	; 0x104
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENCLR.reg = mask;
   12c18:	f882 e108 	strb.w	lr, [r2, #264]	; 0x108
	return ((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg;
   12c1c:	f891 2107 	ldrb.w	r2, [r1, #263]	; 0x107
	if (_usbd_ep_is_stall_sent(epn, dir)) {
   12c20:	423a      	tst	r2, r7
   12c22:	d10d      	bne.n	12c40 <_usb_d_dev_ep_stall+0xf0>
	if (_usb_d_dev_ep_is_ctrl(ept)) {
   12c24:	4433      	add	r3, r6
   12c26:	eb04 0483 	add.w	r4, r4, r3, lsl #2
   12c2a:	3420      	adds	r4, #32
   12c2c:	79e3      	ldrb	r3, [r4, #7]
   12c2e:	f003 0207 	and.w	r2, r3, #7
   12c32:	2a01      	cmp	r2, #1
   12c34:	d010      	beq.n	12c58 <_usb_d_dev_ep_stall+0x108>
		ept->flags.bits.is_stalled = 0;
   12c36:	f36f 03c3 	bfc	r3, #3, #1
   12c3a:	71e3      	strb	r3, [r4, #7]
		rc = _usb_d_dev_ep_stall_clr(ept, dir);
   12c3c:	2000      	movs	r0, #0
   12c3e:	bdf0      	pop	{r4, r5, r6, r7, pc}
		hri_usbendpoint_clear_EPSTATUS_reg(USB, epn, (USB_DEVICE_EPSTATUS_DTGLOUT << bank_n));
   12c40:	2201      	movs	r2, #1
   12c42:	fa02 f505 	lsl.w	r5, r2, r5
   12c46:	b2ed      	uxtb	r5, r5
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg = mask;
   12c48:	f881 e107 	strb.w	lr, [r1, #263]	; 0x107
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSCLR.reg = mask;
   12c4c:	f881 5104 	strb.w	r5, [r1, #260]	; 0x104
   12c50:	e7e8      	b.n	12c24 <_usb_d_dev_ep_stall+0xd4>
		return -USB_ERR_PARAM;
   12c52:	f06f 0011 	mvn.w	r0, #17
}
   12c56:	bdf0      	pop	{r4, r5, r6, r7, pc}
	return ((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUS.reg;
   12c58:	f891 0106 	ldrb.w	r0, [r1, #262]	; 0x106
		if ((hri_usbendpoint_read_EPSTATUS_reg(USB, epn) & USB_DEVICE_EPSTATUS_STALLRQ_Msk) == 0) {
   12c5c:	f010 0030 	ands.w	r0, r0, #48	; 0x30
   12c60:	d1ec      	bne.n	12c3c <_usb_d_dev_ep_stall+0xec>
			ept->flags.bits.is_stalled = 0;
   12c62:	f360 03c3 	bfi	r3, r0, #3, #1
   12c66:	71e3      	strb	r3, [r4, #7]
   12c68:	bdf0      	pop	{r4, r5, r6, r7, pc}
   12c6a:	bf00      	nop
   12c6c:	20001ff4 	.word	0x20001ff4
   12c70:	20002008 	.word	0x20002008

00012c74 <_usb_d_dev_ep_read_req>:
	_usbd_ep_int_dis(epn, intflags[dir]);
	_usb_d_dev_trans_done(ept, code);
}

int32_t _usb_d_dev_ep_read_req(const uint8_t ep, uint8_t *req_buf)
{
   12c74:	b470      	push	{r4, r5, r6}
	uint8_t            epn   = USB_EP_GET_N(ep);
   12c76:	f000 000f 	and.w	r0, r0, #15
	UsbDeviceDescBank *bank  = prvt_inst.desc_table[epn].DeviceDescBank;
   12c7a:	4a12      	ldr	r2, [pc, #72]	; (12cc4 <_usb_d_dev_ep_read_req+0x50>)
   12c7c:	0143      	lsls	r3, r0, #5
   12c7e:	18d4      	adds	r4, r2, r3
	uint32_t           addr  = bank[0].ADDR.reg;
   12c80:	58d5      	ldr	r5, [r2, r3]
	uint16_t           bytes = bank[0].PCKSIZE.bit.BYTE_COUNT;
   12c82:	6864      	ldr	r4, [r4, #4]

	if (epn > CONF_USB_D_MAX_EP_N || !req_buf) {
   12c84:	2802      	cmp	r0, #2
	uint16_t           bytes = bank[0].PCKSIZE.bit.BYTE_COUNT;
   12c86:	f3c4 040d 	ubfx	r4, r4, #0, #14
	if (epn > CONF_USB_D_MAX_EP_N || !req_buf) {
   12c8a:	d818      	bhi.n	12cbe <_usb_d_dev_ep_read_req+0x4a>
   12c8c:	b1b9      	cbz	r1, 12cbe <_usb_d_dev_ep_read_req+0x4a>
   12c8e:	f103 4382 	add.w	r3, r3, #1090519040	; 0x41000000
	return ((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPCFG.reg;
   12c92:	f893 2100 	ldrb.w	r2, [r3, #256]	; 0x100
		return -USB_ERR_PARAM;
	}
	if (!_usbd_ep_is_ctrl(epn)) {
   12c96:	2a11      	cmp	r2, #17
   12c98:	d10e      	bne.n	12cb8 <_usb_d_dev_ep_read_req+0x44>
	tmp = ((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg;
   12c9a:	f893 2107 	ldrb.w	r2, [r3, #263]	; 0x107
		return -USB_ERR_FUNC;
	}
	if (!_usbd_ep_is_setup(epn)) {
   12c9e:	f012 0010 	ands.w	r0, r2, #16
   12ca2:	d007      	beq.n	12cb4 <_usb_d_dev_ep_read_req+0x40>
		return ERR_NONE;
	}
	memcpy(req_buf, (void *)addr, 8);
   12ca4:	686a      	ldr	r2, [r5, #4]
   12ca6:	682e      	ldr	r6, [r5, #0]
   12ca8:	604a      	str	r2, [r1, #4]
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg = mask;
   12caa:	2210      	movs	r2, #16
   12cac:	600e      	str	r6, [r1, #0]
	_usbd_ep_ack_setup(epn);

	return bytes;
   12cae:	4620      	mov	r0, r4
   12cb0:	f883 2107 	strb.w	r2, [r3, #263]	; 0x107
}
   12cb4:	bc70      	pop	{r4, r5, r6}
   12cb6:	4770      	bx	lr
		return -USB_ERR_FUNC;
   12cb8:	f06f 0012 	mvn.w	r0, #18
   12cbc:	e7fa      	b.n	12cb4 <_usb_d_dev_ep_read_req+0x40>
		return -USB_ERR_PARAM;
   12cbe:	f06f 0011 	mvn.w	r0, #17
   12cc2:	e7f7      	b.n	12cb4 <_usb_d_dev_ep_read_req+0x40>
   12cc4:	20002224 	.word	0x20002224

00012cc8 <_usb_d_dev_ep_trans>:

int32_t _usb_d_dev_ep_trans(const struct usb_d_transfer *trans)
{
   12cc8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	uint8_t               epn = USB_EP_GET_N(trans->ep);
   12ccc:	7a03      	ldrb	r3, [r0, #8]
   12cce:	fa4f f983 	sxtb.w	r9, r3
	uint8_t ep_index = (epn == 0) ? 0 : (dir ? (epn + CONF_USB_D_MAX_EP_N) : epn);
   12cd2:	f013 030f 	ands.w	r3, r3, #15
{
   12cd6:	b087      	sub	sp, #28
	uint8_t ep_index = (epn == 0) ? 0 : (dir ? (epn + CONF_USB_D_MAX_EP_N) : epn);
   12cd8:	d03a      	beq.n	12d50 <_usb_d_dev_ep_trans+0x88>
   12cda:	f1b9 0f00 	cmp.w	r9, #0
   12cde:	bfb4      	ite	lt
   12ce0:	1c9d      	addlt	r5, r3, #2
   12ce2:	461d      	movge	r5, r3
	return &dev_inst.ep[ep_index];
   12ce4:	4e5d      	ldr	r6, [pc, #372]	; (12e5c <_usb_d_dev_ep_trans+0x194>)
	bool                  dir = USB_EP_GET_DIR(trans->ep);
	struct _usb_d_dev_ep *ept = _usb_d_dev_ept(epn, dir);

	uint16_t size_mask      = (ept->size == 1023) ? 1023 : (ept->size - 1);
   12ce6:	eb05 0285 	add.w	r2, r5, r5, lsl #2
   12cea:	eb06 0282 	add.w	r2, r6, r2, lsl #2
	return &dev_inst.ep[ep_index];
   12cee:	f105 0801 	add.w	r8, r5, #1
	uint16_t size_mask      = (ept->size == 1023) ? 1023 : (ept->size - 1);
   12cf2:	8c92      	ldrh	r2, [r2, #36]	; 0x24
   12cf4:	f240 31ff 	movw	r1, #1023	; 0x3ff
	return &dev_inst.ep[ep_index];
   12cf8:	eb08 0888 	add.w	r8, r8, r8, lsl #2
	uint16_t size_mask      = (ept->size == 1023) ? 1023 : (ept->size - 1);
   12cfc:	428a      	cmp	r2, r1
	return &dev_inst.ep[ep_index];
   12cfe:	eb06 0888 	add.w	r8, r6, r8, lsl #2
	uint16_t size_mask      = (ept->size == 1023) ? 1023 : (ept->size - 1);
   12d02:	d050      	beq.n	12da6 <_usb_d_dev_ep_trans+0xde>
   12d04:	1e57      	subs	r7, r2, #1
   12d06:	b2bf      	uxth	r7, r7
	bool     size_n_aligned = (trans->size & size_mask);
   12d08:	6841      	ldr	r1, [r0, #4]

	bool use_cache = false;

	volatile hal_atomic_t flags;

	if (epn > CONF_USB_D_MAX_EP_N) {
   12d0a:	2b02      	cmp	r3, #2
	bool     size_n_aligned = (trans->size & size_mask);
   12d0c:	ea07 0701 	and.w	r7, r7, r1
	if (epn > CONF_USB_D_MAX_EP_N) {
   12d10:	f200 8091 	bhi.w	12e36 <_usb_d_dev_ep_trans+0x16e>
	 * 1. Buffer not in RAM (cache all).
	 * 2. IN/OUT with unaligned buffer (cache all).
	 * 3. OUT with unaligned packet size (cache last packet).
	 * 4. OUT size < 8 (sub-case for 3).
	 */
	if (!_usb_is_addr4dma(trans->buf, trans->size) || (!_usb_is_aligned(trans->buf))
   12d14:	6803      	ldr	r3, [r0, #0]
   12d16:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
   12d1a:	d223      	bcs.n	12d64 <_usb_d_dev_ep_trans+0x9c>
	    || (!dir && (trans->size < ept->size))) {
		if (!ept->cache) {
   12d1c:	ea4f 0b85 	mov.w	fp, r5, lsl #2
   12d20:	eb0b 0305 	add.w	r3, fp, r5
   12d24:	eb06 0383 	add.w	r3, r6, r3, lsl #2
   12d28:	6a1b      	ldr	r3, [r3, #32]
   12d2a:	2b00      	cmp	r3, #0
   12d2c:	f000 8092 	beq.w	12e54 <_usb_d_dev_ep_trans+0x18c>
			return -USB_ERR_FUNC;
		}
		/* Use cache all the time. */
		use_cache = true;
   12d30:	f04f 0a01 	mov.w	sl, #1
		}
		/* Set 'use_cache' on last packet. */
	}

	/* Check halt */
	if (ept->flags.bits.is_stalled) {
   12d34:	eb0b 0405 	add.w	r4, fp, r5
   12d38:	eb06 0484 	add.w	r4, r6, r4, lsl #2
   12d3c:	f104 0220 	add.w	r2, r4, #32
   12d40:	f894 3027 	ldrb.w	r3, [r4, #39]	; 0x27
   12d44:	071b      	lsls	r3, r3, #28
   12d46:	d530      	bpl.n	12daa <_usb_d_dev_ep_trans+0xe2>
		return USB_HALTED;
   12d48:	2002      	movs	r0, #2
	} else {
		_usb_d_dev_out_next(ept, false);
	}

	return ERR_NONE;
}
   12d4a:	b007      	add	sp, #28
   12d4c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	uint16_t size_mask      = (ept->size == 1023) ? 1023 : (ept->size - 1);
   12d50:	4e42      	ldr	r6, [pc, #264]	; (12e5c <_usb_d_dev_ep_trans+0x194>)
   12d52:	8cb2      	ldrh	r2, [r6, #36]	; 0x24
   12d54:	f240 31ff 	movw	r1, #1023	; 0x3ff
   12d58:	428a      	cmp	r2, r1
   12d5a:	d01d      	beq.n	12d98 <_usb_d_dev_ep_trans+0xd0>
	return &dev_inst.ep[ep_index];
   12d5c:	f106 0814 	add.w	r8, r6, #20
   12d60:	461d      	mov	r5, r3
   12d62:	e7cf      	b.n	12d04 <_usb_d_dev_ep_trans+0x3c>
	if (!_usb_is_addr4dma(trans->buf, trans->size) || (!_usb_is_aligned(trans->buf))
   12d64:	4c3e      	ldr	r4, [pc, #248]	; (12e60 <_usb_d_dev_ep_trans+0x198>)
   12d66:	eb03 0e01 	add.w	lr, r3, r1
   12d6a:	45a6      	cmp	lr, r4
   12d6c:	d8d6      	bhi.n	12d1c <_usb_d_dev_ep_trans+0x54>
   12d6e:	f013 0303 	ands.w	r3, r3, #3
   12d72:	d1d3      	bne.n	12d1c <_usb_d_dev_ep_trans+0x54>
	    || (!dir && (trans->size < ept->size))) {
   12d74:	f1b9 0f00 	cmp.w	r9, #0
   12d78:	db60      	blt.n	12e3c <_usb_d_dev_ep_trans+0x174>
   12d7a:	428a      	cmp	r2, r1
   12d7c:	d8ce      	bhi.n	12d1c <_usb_d_dev_ep_trans+0x54>
	if (!dir && size_n_aligned) {
   12d7e:	2f00      	cmp	r7, #0
   12d80:	d060      	beq.n	12e44 <_usb_d_dev_ep_trans+0x17c>
		if (!ept->cache) {
   12d82:	ea4f 0b85 	mov.w	fp, r5, lsl #2
   12d86:	eb0b 0205 	add.w	r2, fp, r5
   12d8a:	eb06 0282 	add.w	r2, r6, r2, lsl #2
   12d8e:	6a12      	ldr	r2, [r2, #32]
   12d90:	2a00      	cmp	r2, #0
   12d92:	d050      	beq.n	12e36 <_usb_d_dev_ep_trans+0x16e>
	bool use_cache = false;
   12d94:	469a      	mov	sl, r3
   12d96:	e7cd      	b.n	12d34 <_usb_d_dev_ep_trans+0x6c>
	bool     size_n_aligned = (trans->size & size_mask);
   12d98:	6841      	ldr	r1, [r0, #4]
	return &dev_inst.ep[ep_index];
   12d9a:	461d      	mov	r5, r3
	bool     size_n_aligned = (trans->size & size_mask);
   12d9c:	f3c1 0709 	ubfx	r7, r1, #0, #10
	return &dev_inst.ep[ep_index];
   12da0:	f106 0814 	add.w	r8, r6, #20
   12da4:	e7b6      	b.n	12d14 <_usb_d_dev_ep_trans+0x4c>
   12da6:	4617      	mov	r7, r2
   12da8:	e7ae      	b.n	12d08 <_usb_d_dev_ep_trans+0x40>
   12daa:	9001      	str	r0, [sp, #4]
	atomic_enter_critical(&flags);
   12dac:	a805      	add	r0, sp, #20
   12dae:	9202      	str	r2, [sp, #8]
   12db0:	f000 f8e0 	bl	12f74 <atomic_enter_critical>
	if (_usb_d_dev_ep_is_busy(ept)) {
   12db4:	9a02      	ldr	r2, [sp, #8]
   12db6:	9b01      	ldr	r3, [sp, #4]
   12db8:	79d0      	ldrb	r0, [r2, #7]
   12dba:	f010 0140 	ands.w	r1, r0, #64	; 0x40
   12dbe:	d131      	bne.n	12e24 <_usb_d_dev_ep_trans+0x15c>
	ept->flags.bits.is_busy = 1;
   12dc0:	f040 0e40 	orr.w	lr, r0, #64	; 0x40
   12dc4:	f882 e007 	strb.w	lr, [r2, #7]
	atomic_leave_critical(&flags);
   12dc8:	a805      	add	r0, sp, #20
   12dca:	9303      	str	r3, [sp, #12]
   12dcc:	9102      	str	r1, [sp, #8]
	ept->flags.bits.is_busy = 1;
   12dce:	9201      	str	r2, [sp, #4]
	atomic_leave_critical(&flags);
   12dd0:	f000 f8d8 	bl	12f84 <atomic_leave_critical>
	ept->trans_buf   = trans->buf;
   12dd4:	9b03      	ldr	r3, [sp, #12]
	ept->flags.bits.dir       = dir;
   12dd6:	9a01      	ldr	r2, [sp, #4]
	ept->trans_buf   = trans->buf;
   12dd8:	6818      	ldr	r0, [r3, #0]
	ept->flags.bits.dir       = dir;
   12dda:	f892 e007 	ldrb.w	lr, [r2, #7]
	ept->trans_buf   = trans->buf;
   12dde:	6160      	str	r0, [r4, #20]
	bool                  dir = USB_EP_GET_DIR(trans->ep);
   12de0:	ea4f 70d9 	mov.w	r0, r9, lsr #31
	ept->flags.bits.dir       = dir;
   12de4:	f360 1ec7 	bfi	lr, r0, #7, #1
	ept->flags.bits.use_cache = use_cache;
   12de8:	f36a 1e45 	bfi	lr, sl, #5, #1
	ept->trans_size  = trans->size;
   12dec:	6858      	ldr	r0, [r3, #4]
	ept->trans_count = 0;
   12dee:	9902      	ldr	r1, [sp, #8]
	ept->trans_size  = trans->size;
   12df0:	61a0      	str	r0, [r4, #24]
	ept->flags.bits.use_cache = use_cache;
   12df2:	f882 e007 	strb.w	lr, [r2, #7]
	ept->trans_count = 0;
   12df6:	61e1      	str	r1, [r4, #28]
	ept->flags.bits.need_zlp  = (trans->zlp && (!size_n_aligned));
   12df8:	7a5b      	ldrb	r3, [r3, #9]
   12dfa:	b9c3      	cbnz	r3, 12e2e <_usb_d_dev_ep_trans+0x166>
   12dfc:	461f      	mov	r7, r3
   12dfe:	445d      	add	r5, fp
   12e00:	eb06 0685 	add.w	r6, r6, r5, lsl #2
	if (dir) {
   12e04:	f1b9 0f00 	cmp.w	r9, #0
	ept->flags.bits.need_zlp  = (trans->zlp && (!size_n_aligned));
   12e08:	f896 3027 	ldrb.w	r3, [r6, #39]	; 0x27
   12e0c:	f367 1304 	bfi	r3, r7, #4, #1
   12e10:	f886 3027 	strb.w	r3, [r6, #39]	; 0x27
		_usb_d_dev_in_next(ept, false);
   12e14:	4640      	mov	r0, r8
   12e16:	f04f 0100 	mov.w	r1, #0
	if (dir) {
   12e1a:	db17      	blt.n	12e4c <_usb_d_dev_ep_trans+0x184>
		_usb_d_dev_out_next(ept, false);
   12e1c:	f7fe ff36 	bl	11c8c <_usb_d_dev_out_next>
	return ERR_NONE;
   12e20:	2000      	movs	r0, #0
   12e22:	e792      	b.n	12d4a <_usb_d_dev_ep_trans+0x82>
		atomic_leave_critical(&flags);
   12e24:	a805      	add	r0, sp, #20
   12e26:	f000 f8ad 	bl	12f84 <atomic_leave_critical>
		return USB_BUSY;
   12e2a:	2001      	movs	r0, #1
   12e2c:	e78d      	b.n	12d4a <_usb_d_dev_ep_trans+0x82>
	ept->flags.bits.need_zlp  = (trans->zlp && (!size_n_aligned));
   12e2e:	fab7 f787 	clz	r7, r7
   12e32:	097f      	lsrs	r7, r7, #5
   12e34:	e7e3      	b.n	12dfe <_usb_d_dev_ep_trans+0x136>
		return -USB_ERR_PARAM;
   12e36:	f06f 0011 	mvn.w	r0, #17
   12e3a:	e786      	b.n	12d4a <_usb_d_dev_ep_trans+0x82>
	bool use_cache = false;
   12e3c:	469a      	mov	sl, r3
   12e3e:	ea4f 0b85 	mov.w	fp, r5, lsl #2
   12e42:	e777      	b.n	12d34 <_usb_d_dev_ep_trans+0x6c>
   12e44:	46ba      	mov	sl, r7
   12e46:	ea4f 0b85 	mov.w	fp, r5, lsl #2
   12e4a:	e773      	b.n	12d34 <_usb_d_dev_ep_trans+0x6c>
		_usb_d_dev_in_next(ept, false);
   12e4c:	f7fe fe64 	bl	11b18 <_usb_d_dev_in_next>
	return ERR_NONE;
   12e50:	2000      	movs	r0, #0
   12e52:	e77a      	b.n	12d4a <_usb_d_dev_ep_trans+0x82>
			return -USB_ERR_FUNC;
   12e54:	f06f 0012 	mvn.w	r0, #18
   12e58:	e777      	b.n	12d4a <_usb_d_dev_ep_trans+0x82>
   12e5a:	bf00      	nop
   12e5c:	20001ff4 	.word	0x20001ff4
   12e60:	20031fff 	.word	0x20031fff

00012e64 <_usb_d_dev_ep_abort>:

void _usb_d_dev_ep_abort(const uint8_t ep)
{
   12e64:	b243      	sxtb	r3, r0
	uint8_t ep_index = (epn == 0) ? 0 : (dir ? (epn + CONF_USB_D_MAX_EP_N) : epn);
   12e66:	f010 000f 	ands.w	r0, r0, #15
   12e6a:	d117      	bne.n	12e9c <_usb_d_dev_ep_abort+0x38>
{
   12e6c:	b5f0      	push	{r4, r5, r6, r7, lr}
	uint8_t epn = USB_EP_GET_N(ept->ep);
   12e6e:	0081      	lsls	r1, r0, #2
   12e70:	4d27      	ldr	r5, [pc, #156]	; (12f10 <_usb_d_dev_ep_abort+0xac>)
   12e72:	180a      	adds	r2, r1, r0
   12e74:	eb05 0282 	add.w	r2, r5, r2, lsl #2
{
   12e78:	b083      	sub	sp, #12
	uint8_t epn = USB_EP_GET_N(ept->ep);
   12e7a:	f892 4026 	ldrb.w	r4, [r2, #38]	; 0x26
	const uint8_t intflags[2] = {USB_D_BANK0_INT_FLAGS, USB_D_BANK1_INT_FLAGS};
   12e7e:	2625      	movs	r6, #37	; 0x25
   12e80:	f88d 6004 	strb.w	r6, [sp, #4]
	if (!(_usb_d_dev_ep_is_used(ept) && _usb_d_dev_ep_is_busy(ept))) {
   12e84:	2cff      	cmp	r4, #255	; 0xff
	const uint8_t intflags[2] = {USB_D_BANK0_INT_FLAGS, USB_D_BANK1_INT_FLAGS};
   12e86:	f04f 064a 	mov.w	r6, #74	; 0x4a
   12e8a:	f88d 6005 	strb.w	r6, [sp, #5]
	if (!(_usb_d_dev_ep_is_used(ept) && _usb_d_dev_ep_is_busy(ept))) {
   12e8e:	d003      	beq.n	12e98 <_usb_d_dev_ep_abort+0x34>
   12e90:	f892 2027 	ldrb.w	r2, [r2, #39]	; 0x27
   12e94:	0652      	lsls	r2, r2, #25
   12e96:	d408      	bmi.n	12eaa <_usb_d_dev_ep_abort+0x46>
	struct _usb_d_dev_ep *ept = _usb_d_dev_ept(epn, dir);
	if (epn > CONF_USB_D_MAX_EP_N) {
		return;
	}
	_usb_d_dev_trans_stop(ept, dir, USB_TRANS_ABORT);
}
   12e98:	b003      	add	sp, #12
   12e9a:	bdf0      	pop	{r4, r5, r6, r7, pc}
	uint8_t ep_index = (epn == 0) ? 0 : (dir ? (epn + CONF_USB_D_MAX_EP_N) : epn);
   12e9c:	2b00      	cmp	r3, #0
   12e9e:	bfb4      	ite	lt
   12ea0:	1c82      	addlt	r2, r0, #2
   12ea2:	4602      	movge	r2, r0
	if (epn > CONF_USB_D_MAX_EP_N) {
   12ea4:	2802      	cmp	r0, #2
   12ea6:	d931      	bls.n	12f0c <_usb_d_dev_ep_abort+0xa8>
   12ea8:	4770      	bx	lr
	uint8_t epn = USB_EP_GET_N(ept->ep);
   12eaa:	f004 020f 	and.w	r2, r4, #15
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSCLR.reg = mask;
   12eae:	f102 0608 	add.w	r6, r2, #8
   12eb2:	0177      	lsls	r7, r6, #5
	if (dir) {
   12eb4:	2b00      	cmp	r3, #0
   12eb6:	f107 4782 	add.w	r7, r7, #1090519040	; 0x41000000
   12eba:	bfb5      	itete	lt
   12ebc:	f04f 0e80 	movlt.w	lr, #128	; 0x80
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSSET.reg = mask;
   12ec0:	f04f 0e40 	movge.w	lr, #64	; 0x40
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSCLR.reg = mask;
   12ec4:	f887 e004 	strblt.w	lr, [r7, #4]
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSSET.reg = mask;
   12ec8:	f887 e005 	strbge.w	lr, [r7, #5]
	_usbd_ep_int_ack(epn, intflags[dir]);
   12ecc:	af02      	add	r7, sp, #8
   12ece:	eb07 73d3 	add.w	r3, r7, r3, lsr #31
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg = mask;
   12ed2:	0176      	lsls	r6, r6, #5
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENCLR.reg = mask;
   12ed4:	0152      	lsls	r2, r2, #5
	ept->flags.bits.is_busy = 0;
   12ed6:	4401      	add	r1, r0
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg = mask;
   12ed8:	f106 4682 	add.w	r6, r6, #1090519040	; 0x41000000
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENCLR.reg = mask;
   12edc:	f102 4282 	add.w	r2, r2, #1090519040	; 0x41000000
   12ee0:	eb05 0181 	add.w	r1, r5, r1, lsl #2
	_usbd_ep_int_ack(epn, intflags[dir]);
   12ee4:	f813 0c04 	ldrb.w	r0, [r3, #-4]
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg = mask;
   12ee8:	71f0      	strb	r0, [r6, #7]
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENCLR.reg = mask;
   12eea:	f882 0108 	strb.w	r0, [r2, #264]	; 0x108
	ept->flags.bits.is_busy = 0;
   12eee:	f891 6027 	ldrb.w	r6, [r1, #39]	; 0x27
	dev_inst.ep_callbacks.done(ept->ep, code, ept->trans_count);
   12ef2:	692d      	ldr	r5, [r5, #16]
   12ef4:	69ca      	ldr	r2, [r1, #28]
	ept->flags.bits.is_busy = 0;
   12ef6:	f36f 1686 	bfc	r6, #6, #1
   12efa:	f881 6027 	strb.w	r6, [r1, #39]	; 0x27
	dev_inst.ep_callbacks.done(ept->ep, code, ept->trans_count);
   12efe:	4620      	mov	r0, r4
   12f00:	2102      	movs	r1, #2
   12f02:	462b      	mov	r3, r5
}
   12f04:	b003      	add	sp, #12
   12f06:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
	dev_inst.ep_callbacks.done(ept->ep, code, ept->trans_count);
   12f0a:	4718      	bx	r3
	return &dev_inst.ep[ep_index];
   12f0c:	4610      	mov	r0, r2
   12f0e:	e7ad      	b.n	12e6c <_usb_d_dev_ep_abort+0x8>
   12f10:	20001ff4 	.word	0x20001ff4

00012f14 <_usb_d_dev_register_callback>:
	return USB_OK;
}

void _usb_d_dev_register_callback(const enum usb_d_cb_type type, const FUNC_PTR func)
{
	FUNC_PTR f = (func == NULL) ? (FUNC_PTR)_dummy_func_no_return : (FUNC_PTR)func;
   12f14:	4b06      	ldr	r3, [pc, #24]	; (12f30 <_usb_d_dev_register_callback+0x1c>)
   12f16:	2900      	cmp	r1, #0
   12f18:	bf08      	it	eq
   12f1a:	4619      	moveq	r1, r3
	if (type == USB_D_CB_EVENT) {
   12f1c:	2801      	cmp	r0, #1
   12f1e:	d003      	beq.n	12f28 <_usb_d_dev_register_callback+0x14>
		dev_inst.callbacks.event = (_usb_d_dev_event_cb_t)f;
	} else if (type == USB_D_CB_SOF) {
   12f20:	b908      	cbnz	r0, 12f26 <_usb_d_dev_register_callback+0x12>
		dev_inst.callbacks.sof = (_usb_d_dev_sof_cb_t)f;
   12f22:	4b04      	ldr	r3, [pc, #16]	; (12f34 <_usb_d_dev_register_callback+0x20>)
   12f24:	6019      	str	r1, [r3, #0]
   12f26:	4770      	bx	lr
		dev_inst.callbacks.event = (_usb_d_dev_event_cb_t)f;
   12f28:	4b02      	ldr	r3, [pc, #8]	; (12f34 <_usb_d_dev_register_callback+0x20>)
   12f2a:	6059      	str	r1, [r3, #4]
   12f2c:	4770      	bx	lr
   12f2e:	bf00      	nop
   12f30:	00011b15 	.word	0x00011b15
   12f34:	20001ff4 	.word	0x20001ff4

00012f38 <_usb_d_dev_register_ep_callback>:
	}
}

void _usb_d_dev_register_ep_callback(const enum usb_d_dev_ep_cb_type type, const FUNC_PTR func)
{
	FUNC_PTR f = (func == NULL) ? (FUNC_PTR)_dummy_func_no_return : (FUNC_PTR)func;
   12f38:	4b08      	ldr	r3, [pc, #32]	; (12f5c <_usb_d_dev_register_ep_callback+0x24>)
   12f3a:	2900      	cmp	r1, #0
   12f3c:	bf08      	it	eq
   12f3e:	4619      	moveq	r1, r3
	if (type == USB_D_DEV_EP_CB_SETUP) {
   12f40:	b130      	cbz	r0, 12f50 <_usb_d_dev_register_ep_callback+0x18>
		dev_inst.ep_callbacks.setup = (_usb_d_dev_ep_cb_setup_t)f;
	} else if (type == USB_D_DEV_EP_CB_MORE) {
   12f42:	2801      	cmp	r0, #1
   12f44:	d007      	beq.n	12f56 <_usb_d_dev_register_ep_callback+0x1e>
		dev_inst.ep_callbacks.more = (_usb_d_dev_ep_cb_more_t)f;
	} else if (type == USB_D_DEV_EP_CB_DONE) {
   12f46:	2802      	cmp	r0, #2
		dev_inst.ep_callbacks.done = (_usb_d_dev_ep_cb_done_t)f;
   12f48:	bf04      	itt	eq
   12f4a:	4b05      	ldreq	r3, [pc, #20]	; (12f60 <_usb_d_dev_register_ep_callback+0x28>)
   12f4c:	6119      	streq	r1, [r3, #16]
   12f4e:	4770      	bx	lr
		dev_inst.ep_callbacks.setup = (_usb_d_dev_ep_cb_setup_t)f;
   12f50:	4b03      	ldr	r3, [pc, #12]	; (12f60 <_usb_d_dev_register_ep_callback+0x28>)
   12f52:	6099      	str	r1, [r3, #8]
   12f54:	4770      	bx	lr
		dev_inst.ep_callbacks.more = (_usb_d_dev_ep_cb_more_t)f;
   12f56:	4b02      	ldr	r3, [pc, #8]	; (12f60 <_usb_d_dev_register_ep_callback+0x28>)
   12f58:	60d9      	str	r1, [r3, #12]
   12f5a:	4770      	bx	lr
   12f5c:	00011b15 	.word	0x00011b15
   12f60:	20001ff4 	.word	0x20001ff4

00012f64 <USB_0_Handler>:
   12f64:	f7fe bf8e 	b.w	11e84 <_usb_d_dev_handler>

00012f68 <USB_1_Handler>:
   12f68:	f7fe bf8c 	b.w	11e84 <_usb_d_dev_handler>

00012f6c <USB_2_Handler>:
   12f6c:	f7fe bf8a 	b.w	11e84 <_usb_d_dev_handler>

00012f70 <USB_3_Handler>:
 * \brief USB interrupt handler
 */
void USB_3_Handler(void)
{

	_usb_d_dev_handler();
   12f70:	f7fe bf88 	b.w	11e84 <_usb_d_dev_handler>

00012f74 <atomic_enter_critical>:
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
   12f74:	f3ef 8310 	mrs	r3, PRIMASK
/**
 * \brief Disable interrupts, enter critical section
 */
void atomic_enter_critical(hal_atomic_t volatile *atomic)
{
	*atomic = __get_PRIMASK();
   12f78:	6003      	str	r3, [r0, #0]
  __ASM volatile ("cpsid i" : : : "memory");
   12f7a:	b672      	cpsid	i
  __ASM volatile ("dmb 0xF":::"memory");
   12f7c:	f3bf 8f5f 	dmb	sy
   12f80:	4770      	bx	lr
   12f82:	bf00      	nop

00012f84 <atomic_leave_critical>:
   12f84:	f3bf 8f5f 	dmb	sy
 * \brief Exit atomic section
 */
void atomic_leave_critical(hal_atomic_t volatile *atomic)
{
	__DMB();
	__set_PRIMASK(*atomic);
   12f88:	6803      	ldr	r3, [r0, #0]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
   12f8a:	f383 8810 	msr	PRIMASK, r3
   12f8e:	4770      	bx	lr

00012f90 <arm_sin_q15>:
   12f90:	0982      	lsrs	r2, r0, #6
   12f92:	490c      	ldr	r1, [pc, #48]	; (12fc4 <arm_sin_q15+0x34>)
   12f94:	f000 003f 	and.w	r0, r0, #63	; 0x3f
   12f98:	0240      	lsls	r0, r0, #9
   12f9a:	f931 3012 	ldrsh.w	r3, [r1, r2, lsl #1]
   12f9e:	b410      	push	{r4}
   12fa0:	3201      	adds	r2, #1
   12fa2:	f5c0 4400 	rsb	r4, r0, #32768	; 0x8000
   12fa6:	fb03 f304 	mul.w	r3, r3, r4
   12faa:	0c1b      	lsrs	r3, r3, #16
   12fac:	f831 2012 	ldrh.w	r2, [r1, r2, lsl #1]
   12fb0:	f85d 4b04 	ldr.w	r4, [sp], #4
   12fb4:	041b      	lsls	r3, r3, #16
   12fb6:	fb10 3002 	smlabb	r0, r0, r2, r3
   12fba:	f340 30cf 	sbfx	r0, r0, #15, #16
   12fbe:	f020 0001 	bic.w	r0, r0, #1
   12fc2:	4770      	bx	lr
   12fc4:	0002310c 	.word	0x0002310c

00012fc8 <_Znwj>:
   12fc8:	b510      	push	{r4, lr}
   12fca:	2800      	cmp	r0, #0
   12fcc:	bf14      	ite	ne
   12fce:	4604      	movne	r4, r0
   12fd0:	2401      	moveq	r4, #1
   12fd2:	4620      	mov	r0, r4
   12fd4:	f00a fc98 	bl	1d908 <malloc>
   12fd8:	b100      	cbz	r0, 12fdc <_Znwj+0x14>
   12fda:	bd10      	pop	{r4, pc}
   12fdc:	f000 f9c8 	bl	13370 <_ZSt15get_new_handlerv>
   12fe0:	b108      	cbz	r0, 12fe6 <_Znwj+0x1e>
   12fe2:	4780      	blx	r0
   12fe4:	e7f5      	b.n	12fd2 <_Znwj+0xa>
   12fe6:	2004      	movs	r0, #4
   12fe8:	f000 f8a2 	bl	13130 <__cxa_allocate_exception>
   12fec:	4b02      	ldr	r3, [pc, #8]	; (12ff8 <_Znwj+0x30>)
   12fee:	6003      	str	r3, [r0, #0]
   12ff0:	4a02      	ldr	r2, [pc, #8]	; (12ffc <_Znwj+0x34>)
   12ff2:	4903      	ldr	r1, [pc, #12]	; (13000 <_Znwj+0x38>)
   12ff4:	f000 f946 	bl	13284 <__cxa_throw>
   12ff8:	00023560 	.word	0x00023560
   12ffc:	00013021 	.word	0x00013021
   13000:	0002353c 	.word	0x0002353c

00013004 <__cxa_pure_virtual>:
   13004:	b508      	push	{r3, lr}
   13006:	221b      	movs	r2, #27
   13008:	4902      	ldr	r1, [pc, #8]	; (13014 <__cxa_pure_virtual+0x10>)
   1300a:	2002      	movs	r0, #2
   1300c:	f00d f822 	bl	20054 <write>
   13010:	f000 f8ee 	bl	131f0 <_ZSt9terminatev>
   13014:	00023510 	.word	0x00023510

00013018 <_ZNKSt9bad_alloc4whatEv>:
   13018:	4800      	ldr	r0, [pc, #0]	; (1301c <_ZNKSt9bad_alloc4whatEv+0x4>)
   1301a:	4770      	bx	lr
   1301c:	0002352c 	.word	0x0002352c

00013020 <_ZNSt9bad_allocD1Ev>:
   13020:	b510      	push	{r4, lr}
   13022:	4b03      	ldr	r3, [pc, #12]	; (13030 <_ZNSt9bad_allocD1Ev+0x10>)
   13024:	6003      	str	r3, [r0, #0]
   13026:	4604      	mov	r4, r0
   13028:	f000 f8be 	bl	131a8 <_ZNSt9exceptionD1Ev>
   1302c:	4620      	mov	r0, r4
   1302e:	bd10      	pop	{r4, pc}
   13030:	00023560 	.word	0x00023560

00013034 <_ZNSt9bad_allocD0Ev>:
   13034:	b510      	push	{r4, lr}
   13036:	4b05      	ldr	r3, [pc, #20]	; (1304c <_ZNSt9bad_allocD0Ev+0x18>)
   13038:	6003      	str	r3, [r0, #0]
   1303a:	4604      	mov	r4, r0
   1303c:	f000 f8b4 	bl	131a8 <_ZNSt9exceptionD1Ev>
   13040:	4620      	mov	r0, r4
   13042:	2104      	movs	r1, #4
   13044:	f000 f804 	bl	13050 <_ZdlPvj>
   13048:	4620      	mov	r0, r4
   1304a:	bd10      	pop	{r4, pc}
   1304c:	00023560 	.word	0x00023560

00013050 <_ZdlPvj>:
   13050:	f000 bac0 	b.w	135d4 <_ZdlPv>

00013054 <_ZN12_GLOBAL__N_14pool4freeEPv.constprop.4>:
   13054:	b4f0      	push	{r4, r5, r6, r7}
   13056:	4c1b      	ldr	r4, [pc, #108]	; (130c4 <_ZN12_GLOBAL__N_14pool4freeEPv.constprop.4+0x70>)
   13058:	f850 7c08 	ldr.w	r7, [r0, #-8]
   1305c:	6861      	ldr	r1, [r4, #4]
   1305e:	f1a0 0608 	sub.w	r6, r0, #8
   13062:	b1c9      	cbz	r1, 13098 <_ZN12_GLOBAL__N_14pool4freeEPv.constprop.4+0x44>
   13064:	19f5      	adds	r5, r6, r7
   13066:	42a9      	cmp	r1, r5
   13068:	d01b      	beq.n	130a2 <_ZN12_GLOBAL__N_14pool4freeEPv.constprop.4+0x4e>
   1306a:	684a      	ldr	r2, [r1, #4]
   1306c:	b32a      	cbz	r2, 130ba <_ZN12_GLOBAL__N_14pool4freeEPv.constprop.4+0x66>
   1306e:	4295      	cmp	r5, r2
   13070:	d303      	bcc.n	1307a <_ZN12_GLOBAL__N_14pool4freeEPv.constprop.4+0x26>
   13072:	e022      	b.n	130ba <_ZN12_GLOBAL__N_14pool4freeEPv.constprop.4+0x66>
   13074:	429d      	cmp	r5, r3
   13076:	d205      	bcs.n	13084 <_ZN12_GLOBAL__N_14pool4freeEPv.constprop.4+0x30>
   13078:	461a      	mov	r2, r3
   1307a:	6853      	ldr	r3, [r2, #4]
   1307c:	1d0c      	adds	r4, r1, #4
   1307e:	4611      	mov	r1, r2
   13080:	2b00      	cmp	r3, #0
   13082:	d1f7      	bne.n	13074 <_ZN12_GLOBAL__N_14pool4freeEPv.constprop.4+0x20>
   13084:	6811      	ldr	r1, [r2, #0]
   13086:	1855      	adds	r5, r2, r1
   13088:	42ae      	cmp	r6, r5
   1308a:	d013      	beq.n	130b4 <_ZN12_GLOBAL__N_14pool4freeEPv.constprop.4+0x60>
   1308c:	f840 3c04 	str.w	r3, [r0, #-4]
   13090:	6823      	ldr	r3, [r4, #0]
   13092:	605e      	str	r6, [r3, #4]
   13094:	bcf0      	pop	{r4, r5, r6, r7}
   13096:	4770      	bx	lr
   13098:	f840 1c04 	str.w	r1, [r0, #-4]
   1309c:	6066      	str	r6, [r4, #4]
   1309e:	bcf0      	pop	{r4, r5, r6, r7}
   130a0:	4770      	bx	lr
   130a2:	680b      	ldr	r3, [r1, #0]
   130a4:	684a      	ldr	r2, [r1, #4]
   130a6:	f840 2c04 	str.w	r2, [r0, #-4]
   130aa:	441f      	add	r7, r3
   130ac:	f840 7c08 	str.w	r7, [r0, #-8]
   130b0:	6066      	str	r6, [r4, #4]
   130b2:	e7ef      	b.n	13094 <_ZN12_GLOBAL__N_14pool4freeEPv.constprop.4+0x40>
   130b4:	440f      	add	r7, r1
   130b6:	6017      	str	r7, [r2, #0]
   130b8:	e7ec      	b.n	13094 <_ZN12_GLOBAL__N_14pool4freeEPv.constprop.4+0x40>
   130ba:	4613      	mov	r3, r2
   130bc:	3404      	adds	r4, #4
   130be:	460a      	mov	r2, r1
   130c0:	e7e0      	b.n	13084 <_ZN12_GLOBAL__N_14pool4freeEPv.constprop.4+0x30>
   130c2:	bf00      	nop
   130c4:	20002284 	.word	0x20002284

000130c8 <_ZN12_GLOBAL__N_14pool8allocateEj.constprop.5>:
   130c8:	b430      	push	{r4, r5}
   130ca:	4c18      	ldr	r4, [pc, #96]	; (1312c <_ZN12_GLOBAL__N_14pool8allocateEj.constprop.5+0x64>)
   130cc:	f100 0108 	add.w	r1, r0, #8
   130d0:	6863      	ldr	r3, [r4, #4]
   130d2:	2908      	cmp	r1, #8
   130d4:	bf38      	it	cc
   130d6:	2108      	movcc	r1, #8
   130d8:	b313      	cbz	r3, 13120 <_ZN12_GLOBAL__N_14pool8allocateEj.constprop.5+0x58>
   130da:	3107      	adds	r1, #7
   130dc:	681a      	ldr	r2, [r3, #0]
   130de:	f021 0107 	bic.w	r1, r1, #7
   130e2:	4291      	cmp	r1, r2
   130e4:	d804      	bhi.n	130f0 <_ZN12_GLOBAL__N_14pool8allocateEj.constprop.5+0x28>
   130e6:	e01d      	b.n	13124 <_ZN12_GLOBAL__N_14pool8allocateEj.constprop.5+0x5c>
   130e8:	6802      	ldr	r2, [r0, #0]
   130ea:	4291      	cmp	r1, r2
   130ec:	d905      	bls.n	130fa <_ZN12_GLOBAL__N_14pool8allocateEj.constprop.5+0x32>
   130ee:	4603      	mov	r3, r0
   130f0:	6858      	ldr	r0, [r3, #4]
   130f2:	2800      	cmp	r0, #0
   130f4:	d1f8      	bne.n	130e8 <_ZN12_GLOBAL__N_14pool8allocateEj.constprop.5+0x20>
   130f6:	bc30      	pop	{r4, r5}
   130f8:	4770      	bx	lr
   130fa:	3304      	adds	r3, #4
   130fc:	1a52      	subs	r2, r2, r1
   130fe:	2a07      	cmp	r2, #7
   13100:	d90a      	bls.n	13118 <_ZN12_GLOBAL__N_14pool8allocateEj.constprop.5+0x50>
   13102:	1845      	adds	r5, r0, r1
   13104:	6844      	ldr	r4, [r0, #4]
   13106:	606c      	str	r4, [r5, #4]
   13108:	681c      	ldr	r4, [r3, #0]
   1310a:	5042      	str	r2, [r0, r1]
   1310c:	6021      	str	r1, [r4, #0]
   1310e:	601d      	str	r5, [r3, #0]
   13110:	f104 0008 	add.w	r0, r4, #8
   13114:	bc30      	pop	{r4, r5}
   13116:	4770      	bx	lr
   13118:	6842      	ldr	r2, [r0, #4]
   1311a:	601a      	str	r2, [r3, #0]
   1311c:	4604      	mov	r4, r0
   1311e:	e7f7      	b.n	13110 <_ZN12_GLOBAL__N_14pool8allocateEj.constprop.5+0x48>
   13120:	4618      	mov	r0, r3
   13122:	e7e8      	b.n	130f6 <_ZN12_GLOBAL__N_14pool8allocateEj.constprop.5+0x2e>
   13124:	4618      	mov	r0, r3
   13126:	1d23      	adds	r3, r4, #4
   13128:	e7e8      	b.n	130fc <_ZN12_GLOBAL__N_14pool8allocateEj.constprop.5+0x34>
   1312a:	bf00      	nop
   1312c:	20002284 	.word	0x20002284

00013130 <__cxa_allocate_exception>:
   13130:	b538      	push	{r3, r4, r5, lr}
   13132:	f100 0580 	add.w	r5, r0, #128	; 0x80
   13136:	4628      	mov	r0, r5
   13138:	f00a fbe6 	bl	1d908 <malloc>
   1313c:	4604      	mov	r4, r0
   1313e:	b138      	cbz	r0, 13150 <__cxa_allocate_exception+0x20>
   13140:	2280      	movs	r2, #128	; 0x80
   13142:	2100      	movs	r1, #0
   13144:	4620      	mov	r0, r4
   13146:	f00b f839 	bl	1e1bc <memset>
   1314a:	f104 0080 	add.w	r0, r4, #128	; 0x80
   1314e:	bd38      	pop	{r3, r4, r5, pc}
   13150:	4628      	mov	r0, r5
   13152:	f7ff ffb9 	bl	130c8 <_ZN12_GLOBAL__N_14pool8allocateEj.constprop.5>
   13156:	4604      	mov	r4, r0
   13158:	2800      	cmp	r0, #0
   1315a:	d1f1      	bne.n	13140 <__cxa_allocate_exception+0x10>
   1315c:	f000 f848 	bl	131f0 <_ZSt9terminatev>

00013160 <__cxa_free_exception>:
   13160:	4a06      	ldr	r2, [pc, #24]	; (1317c <__cxa_free_exception+0x1c>)
   13162:	6893      	ldr	r3, [r2, #8]
   13164:	3880      	subs	r0, #128	; 0x80
   13166:	4298      	cmp	r0, r3
   13168:	d905      	bls.n	13176 <__cxa_free_exception+0x16>
   1316a:	68d2      	ldr	r2, [r2, #12]
   1316c:	4413      	add	r3, r2
   1316e:	4298      	cmp	r0, r3
   13170:	d201      	bcs.n	13176 <__cxa_free_exception+0x16>
   13172:	f7ff bf6f 	b.w	13054 <_ZN12_GLOBAL__N_14pool4freeEPv.constprop.4>
   13176:	f00a bbcf 	b.w	1d918 <free>
   1317a:	bf00      	nop
   1317c:	20002284 	.word	0x20002284

00013180 <_GLOBAL__sub_I__ZN9__gnu_cxx9__freeresEv>:
   13180:	b538      	push	{r3, r4, r5, lr}
   13182:	4c08      	ldr	r4, [pc, #32]	; (131a4 <_GLOBAL__sub_I__ZN9__gnu_cxx9__freeresEv+0x24>)
   13184:	f44f 651e 	mov.w	r5, #2528	; 0x9e0
   13188:	4628      	mov	r0, r5
   1318a:	60e5      	str	r5, [r4, #12]
   1318c:	f00a fbbc 	bl	1d908 <malloc>
   13190:	60a0      	str	r0, [r4, #8]
   13192:	b120      	cbz	r0, 1319e <_GLOBAL__sub_I__ZN9__gnu_cxx9__freeresEv+0x1e>
   13194:	2300      	movs	r3, #0
   13196:	6060      	str	r0, [r4, #4]
   13198:	6005      	str	r5, [r0, #0]
   1319a:	6043      	str	r3, [r0, #4]
   1319c:	bd38      	pop	{r3, r4, r5, pc}
   1319e:	60e0      	str	r0, [r4, #12]
   131a0:	6060      	str	r0, [r4, #4]
   131a2:	bd38      	pop	{r3, r4, r5, pc}
   131a4:	20002284 	.word	0x20002284

000131a8 <_ZNSt9exceptionD1Ev>:
   131a8:	4770      	bx	lr
   131aa:	bf00      	nop

000131ac <_ZNSt13bad_exceptionD1Ev>:
   131ac:	4770      	bx	lr
   131ae:	bf00      	nop

000131b0 <_ZGTtNKSt13bad_exception4whatEv>:
   131b0:	4800      	ldr	r0, [pc, #0]	; (131b4 <_ZGTtNKSt13bad_exception4whatEv+0x4>)
   131b2:	4770      	bx	lr
   131b4:	0002356c 	.word	0x0002356c

000131b8 <_ZNSt13bad_exceptionD0Ev>:
   131b8:	b510      	push	{r4, lr}
   131ba:	2104      	movs	r1, #4
   131bc:	4604      	mov	r4, r0
   131be:	f7ff ff47 	bl	13050 <_ZdlPvj>
   131c2:	4620      	mov	r0, r4
   131c4:	bd10      	pop	{r4, pc}
   131c6:	bf00      	nop

000131c8 <_ZN10__cxxabiv111__terminateEPFvvE>:
   131c8:	b508      	push	{r3, lr}
   131ca:	4780      	blx	r0
   131cc:	f00a f8ee 	bl	1d3ac <abort>
   131d0:	f000 fb6c 	bl	138ac <__cxa_begin_catch>
   131d4:	f00a f8ea 	bl	1d3ac <abort>
   131d8:	460d      	mov	r5, r1
   131da:	4604      	mov	r4, r0
   131dc:	f000 fba4 	bl	13928 <__cxa_end_catch>
   131e0:	3501      	adds	r5, #1
   131e2:	d001      	beq.n	131e8 <_ZN10__cxxabiv111__terminateEPFvvE+0x20>
   131e4:	f000 f9f8 	bl	135d8 <__cxa_end_cleanup>
   131e8:	4620      	mov	r0, r4
   131ea:	f000 faef 	bl	137cc <__cxa_call_unexpected>
   131ee:	bf00      	nop

000131f0 <_ZSt9terminatev>:
   131f0:	b508      	push	{r3, lr}
   131f2:	4b03      	ldr	r3, [pc, #12]	; (13200 <_ZSt9terminatev+0x10>)
   131f4:	6818      	ldr	r0, [r3, #0]
   131f6:	f3bf 8f5b 	dmb	ish
   131fa:	f7ff ffe5 	bl	131c8 <_ZN10__cxxabiv111__terminateEPFvvE>
   131fe:	bf00      	nop
   13200:	200000f8 	.word	0x200000f8

00013204 <_ZN10__cxxabiv112__unexpectedEPFvvE>:
   13204:	b508      	push	{r3, lr}
   13206:	4780      	blx	r0
   13208:	f7ff fff2 	bl	131f0 <_ZSt9terminatev>

0001320c <_ZSt10unexpectedv>:
   1320c:	b508      	push	{r3, lr}
   1320e:	4b03      	ldr	r3, [pc, #12]	; (1321c <_ZSt10unexpectedv+0x10>)
   13210:	6818      	ldr	r0, [r3, #0]
   13212:	f3bf 8f5b 	dmb	ish
   13216:	f7ff fff5 	bl	13204 <_ZN10__cxxabiv112__unexpectedEPFvvE>
   1321a:	bf00      	nop
   1321c:	200000f4 	.word	0x200000f4

00013220 <_ZSt13get_terminatev>:
   13220:	4b02      	ldr	r3, [pc, #8]	; (1322c <_ZSt13get_terminatev+0xc>)
   13222:	6818      	ldr	r0, [r3, #0]
   13224:	f3bf 8f5b 	dmb	ish
   13228:	4770      	bx	lr
   1322a:	bf00      	nop
   1322c:	200000f8 	.word	0x200000f8

00013230 <_ZSt14get_unexpectedv>:
   13230:	4b02      	ldr	r3, [pc, #8]	; (1323c <_ZSt14get_unexpectedv+0xc>)
   13232:	6818      	ldr	r0, [r3, #0]
   13234:	f3bf 8f5b 	dmb	ish
   13238:	4770      	bx	lr
   1323a:	bf00      	nop
   1323c:	200000f4 	.word	0x200000f4

00013240 <_ZL23__gxx_exception_cleanup19_Unwind_Reason_CodeP21_Unwind_Control_Block>:
   13240:	2801      	cmp	r0, #1
   13242:	b510      	push	{r4, lr}
   13244:	d81a      	bhi.n	1327c <_ZL23__gxx_exception_cleanup19_Unwind_Reason_CodeP21_Unwind_Control_Block+0x3c>
   13246:	f3bf 8f5b 	dmb	ish
   1324a:	f1a1 0328 	sub.w	r3, r1, #40	; 0x28
   1324e:	e853 2f00 	ldrex	r2, [r3]
   13252:	3a01      	subs	r2, #1
   13254:	e843 2000 	strex	r0, r2, [r3]
   13258:	2800      	cmp	r0, #0
   1325a:	d1f8      	bne.n	1324e <_ZL23__gxx_exception_cleanup19_Unwind_Reason_CodeP21_Unwind_Control_Block+0xe>
   1325c:	f3bf 8f5b 	dmb	ish
   13260:	b95a      	cbnz	r2, 1327a <_ZL23__gxx_exception_cleanup19_Unwind_Reason_CodeP21_Unwind_Control_Block+0x3a>
   13262:	f851 3c1c 	ldr.w	r3, [r1, #-28]
   13266:	f101 0458 	add.w	r4, r1, #88	; 0x58
   1326a:	b10b      	cbz	r3, 13270 <_ZL23__gxx_exception_cleanup19_Unwind_Reason_CodeP21_Unwind_Control_Block+0x30>
   1326c:	4620      	mov	r0, r4
   1326e:	4798      	blx	r3
   13270:	4620      	mov	r0, r4
   13272:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   13276:	f7ff bf73 	b.w	13160 <__cxa_free_exception>
   1327a:	bd10      	pop	{r4, pc}
   1327c:	f851 0c14 	ldr.w	r0, [r1, #-20]
   13280:	f7ff ffa2 	bl	131c8 <_ZN10__cxxabiv111__terminateEPFvvE>

00013284 <__cxa_throw>:
   13284:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   13286:	4604      	mov	r4, r0
   13288:	460f      	mov	r7, r1
   1328a:	4616      	mov	r6, r2
   1328c:	f000 fb96 	bl	139bc <__cxa_get_globals>
   13290:	6843      	ldr	r3, [r0, #4]
   13292:	2501      	movs	r5, #1
   13294:	442b      	add	r3, r5
   13296:	6043      	str	r3, [r0, #4]
   13298:	f844 7c78 	str.w	r7, [r4, #-120]
   1329c:	f844 6c74 	str.w	r6, [r4, #-116]
   132a0:	f844 5c80 	str.w	r5, [r4, #-128]
   132a4:	f7ff ffc4 	bl	13230 <_ZSt14get_unexpectedv>
   132a8:	f844 0c70 	str.w	r0, [r4, #-112]
   132ac:	f7ff ffb8 	bl	13220 <_ZSt13get_terminatev>
   132b0:	2347      	movs	r3, #71	; 0x47
   132b2:	2243      	movs	r2, #67	; 0x43
   132b4:	f04f 0e4e 	mov.w	lr, #78	; 0x4e
   132b8:	4910      	ldr	r1, [pc, #64]	; (132fc <__cxa_throw+0x78>)
   132ba:	f804 3c58 	strb.w	r3, [r4, #-88]
   132be:	f1a4 0558 	sub.w	r5, r4, #88	; 0x58
   132c2:	232b      	movs	r3, #43	; 0x2b
   132c4:	2755      	movs	r7, #85	; 0x55
   132c6:	2600      	movs	r6, #0
   132c8:	f844 0c6c 	str.w	r0, [r4, #-108]
   132cc:	f804 ec57 	strb.w	lr, [r4, #-87]
   132d0:	f844 1c50 	str.w	r1, [r4, #-80]
   132d4:	f804 2c55 	strb.w	r2, [r4, #-85]
   132d8:	f804 2c54 	strb.w	r2, [r4, #-84]
   132dc:	f804 3c53 	strb.w	r3, [r4, #-83]
   132e0:	f804 3c52 	strb.w	r3, [r4, #-82]
   132e4:	f804 7c56 	strb.w	r7, [r4, #-86]
   132e8:	f804 6c51 	strb.w	r6, [r4, #-81]
   132ec:	4628      	mov	r0, r5
   132ee:	f009 fe41 	bl	1cf74 <_Unwind_RaiseException>
   132f2:	4628      	mov	r0, r5
   132f4:	f000 fada 	bl	138ac <__cxa_begin_catch>
   132f8:	f7ff ff7a 	bl	131f0 <_ZSt9terminatev>
   132fc:	00013241 	.word	0x00013241

00013300 <__cxa_rethrow>:
   13300:	b510      	push	{r4, lr}
   13302:	f000 fb5b 	bl	139bc <__cxa_get_globals>
   13306:	6842      	ldr	r2, [r0, #4]
   13308:	6804      	ldr	r4, [r0, #0]
   1330a:	3201      	adds	r2, #1
   1330c:	6042      	str	r2, [r0, #4]
   1330e:	b164      	cbz	r4, 1332a <__cxa_rethrow+0x2a>
   13310:	f894 2020 	ldrb.w	r2, [r4, #32]
   13314:	2a47      	cmp	r2, #71	; 0x47
   13316:	d00a      	beq.n	1332e <__cxa_rethrow+0x2e>
   13318:	2200      	movs	r2, #0
   1331a:	6002      	str	r2, [r0, #0]
   1331c:	3420      	adds	r4, #32
   1331e:	4620      	mov	r0, r4
   13320:	f009 fe4c 	bl	1cfbc <_Unwind_Resume_or_Rethrow>
   13324:	4620      	mov	r0, r4
   13326:	f000 fac1 	bl	138ac <__cxa_begin_catch>
   1332a:	f7ff ff61 	bl	131f0 <_ZSt9terminatev>
   1332e:	f894 2021 	ldrb.w	r2, [r4, #33]	; 0x21
   13332:	2a4e      	cmp	r2, #78	; 0x4e
   13334:	d1f0      	bne.n	13318 <__cxa_rethrow+0x18>
   13336:	f894 2022 	ldrb.w	r2, [r4, #34]	; 0x22
   1333a:	2a55      	cmp	r2, #85	; 0x55
   1333c:	d1ec      	bne.n	13318 <__cxa_rethrow+0x18>
   1333e:	f894 2023 	ldrb.w	r2, [r4, #35]	; 0x23
   13342:	2a43      	cmp	r2, #67	; 0x43
   13344:	d1e8      	bne.n	13318 <__cxa_rethrow+0x18>
   13346:	f894 2024 	ldrb.w	r2, [r4, #36]	; 0x24
   1334a:	2a43      	cmp	r2, #67	; 0x43
   1334c:	d1e4      	bne.n	13318 <__cxa_rethrow+0x18>
   1334e:	f894 2025 	ldrb.w	r2, [r4, #37]	; 0x25
   13352:	2a2b      	cmp	r2, #43	; 0x2b
   13354:	d1e0      	bne.n	13318 <__cxa_rethrow+0x18>
   13356:	f894 2026 	ldrb.w	r2, [r4, #38]	; 0x26
   1335a:	2a2b      	cmp	r2, #43	; 0x2b
   1335c:	d1dc      	bne.n	13318 <__cxa_rethrow+0x18>
   1335e:	f894 2027 	ldrb.w	r2, [r4, #39]	; 0x27
   13362:	2a01      	cmp	r2, #1
   13364:	d8d8      	bhi.n	13318 <__cxa_rethrow+0x18>
   13366:	6962      	ldr	r2, [r4, #20]
   13368:	4252      	negs	r2, r2
   1336a:	6162      	str	r2, [r4, #20]
   1336c:	e7d6      	b.n	1331c <__cxa_rethrow+0x1c>
   1336e:	bf00      	nop

00013370 <_ZSt15get_new_handlerv>:
   13370:	4b02      	ldr	r3, [pc, #8]	; (1337c <_ZSt15get_new_handlerv+0xc>)
   13372:	6818      	ldr	r0, [r3, #0]
   13374:	f3bf 8f5b 	dmb	ish
   13378:	4770      	bx	lr
   1337a:	bf00      	nop
   1337c:	20002294 	.word	0x20002294

00013380 <_ZN10__cxxabiv120__si_class_type_infoD1Ev>:
   13380:	b510      	push	{r4, lr}
   13382:	4b03      	ldr	r3, [pc, #12]	; (13390 <_ZN10__cxxabiv120__si_class_type_infoD1Ev+0x10>)
   13384:	6003      	str	r3, [r0, #0]
   13386:	4604      	mov	r4, r0
   13388:	f000 f8ca 	bl	13520 <_ZN10__cxxabiv117__class_type_infoD1Ev>
   1338c:	4620      	mov	r0, r4
   1338e:	bd10      	pop	{r4, pc}
   13390:	0002365c 	.word	0x0002365c

00013394 <_ZN10__cxxabiv120__si_class_type_infoD0Ev>:
   13394:	b510      	push	{r4, lr}
   13396:	4b05      	ldr	r3, [pc, #20]	; (133ac <_ZN10__cxxabiv120__si_class_type_infoD0Ev+0x18>)
   13398:	6003      	str	r3, [r0, #0]
   1339a:	4604      	mov	r4, r0
   1339c:	f000 f8c0 	bl	13520 <_ZN10__cxxabiv117__class_type_infoD1Ev>
   133a0:	4620      	mov	r0, r4
   133a2:	210c      	movs	r1, #12
   133a4:	f7ff fe54 	bl	13050 <_ZdlPvj>
   133a8:	4620      	mov	r0, r4
   133aa:	bd10      	pop	{r4, pc}
   133ac:	0002365c 	.word	0x0002365c

000133b0 <_ZNK10__cxxabiv120__si_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_>:
   133b0:	b570      	push	{r4, r5, r6, lr}
   133b2:	b082      	sub	sp, #8
   133b4:	460d      	mov	r5, r1
   133b6:	9c06      	ldr	r4, [sp, #24]
   133b8:	4294      	cmp	r4, r2
   133ba:	4606      	mov	r6, r0
   133bc:	d009      	beq.n	133d2 <_ZNK10__cxxabiv120__si_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_+0x22>
   133be:	68b0      	ldr	r0, [r6, #8]
   133c0:	6806      	ldr	r6, [r0, #0]
   133c2:	9406      	str	r4, [sp, #24]
   133c4:	6a34      	ldr	r4, [r6, #32]
   133c6:	4629      	mov	r1, r5
   133c8:	46a4      	mov	ip, r4
   133ca:	b002      	add	sp, #8
   133cc:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   133d0:	4760      	bx	ip
   133d2:	4619      	mov	r1, r3
   133d4:	9201      	str	r2, [sp, #4]
   133d6:	9300      	str	r3, [sp, #0]
   133d8:	f000 f86a 	bl	134b0 <_ZNKSt9type_infoeqERKS_>
   133dc:	9b00      	ldr	r3, [sp, #0]
   133de:	9a01      	ldr	r2, [sp, #4]
   133e0:	2800      	cmp	r0, #0
   133e2:	d0ec      	beq.n	133be <_ZNK10__cxxabiv120__si_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_+0xe>
   133e4:	2006      	movs	r0, #6
   133e6:	b002      	add	sp, #8
   133e8:	bd70      	pop	{r4, r5, r6, pc}
   133ea:	bf00      	nop

000133ec <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE>:
   133ec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   133f0:	b081      	sub	sp, #4
   133f2:	460e      	mov	r6, r1
   133f4:	4619      	mov	r1, r3
   133f6:	461f      	mov	r7, r3
   133f8:	4691      	mov	r9, r2
   133fa:	4683      	mov	fp, r0
   133fc:	9c0a      	ldr	r4, [sp, #40]	; 0x28
   133fe:	f8dd a02c 	ldr.w	sl, [sp, #44]	; 0x2c
   13402:	f8dd 8030 	ldr.w	r8, [sp, #48]	; 0x30
   13406:	9d0d      	ldr	r5, [sp, #52]	; 0x34
   13408:	f000 f852 	bl	134b0 <_ZNKSt9type_infoeqERKS_>
   1340c:	b170      	cbz	r0, 1342c <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x40>
   1340e:	2e00      	cmp	r6, #0
   13410:	602c      	str	r4, [r5, #0]
   13412:	f885 9004 	strb.w	r9, [r5, #4]
   13416:	db1f      	blt.n	13458 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x6c>
   13418:	4434      	add	r4, r6
   1341a:	45a0      	cmp	r8, r4
   1341c:	bf0c      	ite	eq
   1341e:	2406      	moveq	r4, #6
   13420:	2401      	movne	r4, #1
   13422:	71ac      	strb	r4, [r5, #6]
   13424:	2000      	movs	r0, #0
   13426:	b001      	add	sp, #4
   13428:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1342c:	4544      	cmp	r4, r8
   1342e:	d018      	beq.n	13462 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x76>
   13430:	f8db 0008 	ldr.w	r0, [fp, #8]
   13434:	f8d0 e000 	ldr.w	lr, [r0]
   13438:	950d      	str	r5, [sp, #52]	; 0x34
   1343a:	f8cd 8030 	str.w	r8, [sp, #48]	; 0x30
   1343e:	f8cd a02c 	str.w	sl, [sp, #44]	; 0x2c
   13442:	940a      	str	r4, [sp, #40]	; 0x28
   13444:	f8de 401c 	ldr.w	r4, [lr, #28]
   13448:	463b      	mov	r3, r7
   1344a:	464a      	mov	r2, r9
   1344c:	4631      	mov	r1, r6
   1344e:	46a4      	mov	ip, r4
   13450:	b001      	add	sp, #4
   13452:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   13456:	4760      	bx	ip
   13458:	3602      	adds	r6, #2
   1345a:	d1e3      	bne.n	13424 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x38>
   1345c:	2301      	movs	r3, #1
   1345e:	71ab      	strb	r3, [r5, #6]
   13460:	e7e0      	b.n	13424 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x38>
   13462:	4651      	mov	r1, sl
   13464:	4658      	mov	r0, fp
   13466:	f000 f823 	bl	134b0 <_ZNKSt9type_infoeqERKS_>
   1346a:	2800      	cmp	r0, #0
   1346c:	d0e0      	beq.n	13430 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x44>
   1346e:	2000      	movs	r0, #0
   13470:	f885 9005 	strb.w	r9, [r5, #5]
   13474:	b001      	add	sp, #4
   13476:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1347a:	bf00      	nop

0001347c <_ZNK10__cxxabiv120__si_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE>:
   1347c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   13480:	4607      	mov	r7, r0
   13482:	460c      	mov	r4, r1
   13484:	4615      	mov	r5, r2
   13486:	461e      	mov	r6, r3
   13488:	f000 f862 	bl	13550 <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PKvRNS0_15__upcast_resultE>
   1348c:	b108      	cbz	r0, 13492 <_ZNK10__cxxabiv120__si_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE+0x16>
   1348e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   13492:	68b8      	ldr	r0, [r7, #8]
   13494:	6807      	ldr	r7, [r0, #0]
   13496:	4621      	mov	r1, r4
   13498:	69bc      	ldr	r4, [r7, #24]
   1349a:	4633      	mov	r3, r6
   1349c:	462a      	mov	r2, r5
   1349e:	46a4      	mov	ip, r4
   134a0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   134a4:	4760      	bx	ip
   134a6:	bf00      	nop

000134a8 <_ZNSt9type_infoD1Ev>:
   134a8:	4770      	bx	lr
   134aa:	bf00      	nop

000134ac <_ZNKSt9type_info14__is_pointer_pEv>:
   134ac:	2000      	movs	r0, #0
   134ae:	4770      	bx	lr

000134b0 <_ZNKSt9type_infoeqERKS_>:
   134b0:	4281      	cmp	r1, r0
   134b2:	d011      	beq.n	134d8 <_ZNKSt9type_infoeqERKS_+0x28>
   134b4:	b508      	push	{r3, lr}
   134b6:	6840      	ldr	r0, [r0, #4]
   134b8:	7803      	ldrb	r3, [r0, #0]
   134ba:	2b2a      	cmp	r3, #42	; 0x2a
   134bc:	d00a      	beq.n	134d4 <_ZNKSt9type_infoeqERKS_+0x24>
   134be:	6849      	ldr	r1, [r1, #4]
   134c0:	780b      	ldrb	r3, [r1, #0]
   134c2:	2b2a      	cmp	r3, #42	; 0x2a
   134c4:	bf08      	it	eq
   134c6:	3101      	addeq	r1, #1
   134c8:	f00b f94e 	bl	1e768 <strcmp>
   134cc:	fab0 f080 	clz	r0, r0
   134d0:	0940      	lsrs	r0, r0, #5
   134d2:	bd08      	pop	{r3, pc}
   134d4:	2000      	movs	r0, #0
   134d6:	bd08      	pop	{r3, pc}
   134d8:	2001      	movs	r0, #1
   134da:	4770      	bx	lr

000134dc <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PPv>:
   134dc:	b570      	push	{r4, r5, r6, lr}
   134de:	6803      	ldr	r3, [r0, #0]
   134e0:	b084      	sub	sp, #16
   134e2:	2400      	movs	r4, #0
   134e4:	699e      	ldr	r6, [r3, #24]
   134e6:	9400      	str	r4, [sp, #0]
   134e8:	2310      	movs	r3, #16
   134ea:	4615      	mov	r5, r2
   134ec:	9302      	str	r3, [sp, #8]
   134ee:	6812      	ldr	r2, [r2, #0]
   134f0:	f88d 4004 	strb.w	r4, [sp, #4]
   134f4:	466b      	mov	r3, sp
   134f6:	9403      	str	r4, [sp, #12]
   134f8:	47b0      	blx	r6
   134fa:	f89d 3004 	ldrb.w	r3, [sp, #4]
   134fe:	f003 0306 	and.w	r3, r3, #6
   13502:	2b06      	cmp	r3, #6
   13504:	bf03      	ittte	eq
   13506:	9b00      	ldreq	r3, [sp, #0]
   13508:	602b      	streq	r3, [r5, #0]
   1350a:	2001      	moveq	r0, #1
   1350c:	4620      	movne	r0, r4
   1350e:	b004      	add	sp, #16
   13510:	bd70      	pop	{r4, r5, r6, pc}
   13512:	bf00      	nop

00013514 <_ZNK10__cxxabiv117__class_type_info20__do_find_public_srcEiPKvPKS0_S2_>:
   13514:	9800      	ldr	r0, [sp, #0]
   13516:	4290      	cmp	r0, r2
   13518:	bf0c      	ite	eq
   1351a:	2006      	moveq	r0, #6
   1351c:	2001      	movne	r0, #1
   1351e:	4770      	bx	lr

00013520 <_ZN10__cxxabiv117__class_type_infoD1Ev>:
   13520:	b510      	push	{r4, lr}
   13522:	4b03      	ldr	r3, [pc, #12]	; (13530 <_ZN10__cxxabiv117__class_type_infoD1Ev+0x10>)
   13524:	6003      	str	r3, [r0, #0]
   13526:	4604      	mov	r4, r0
   13528:	f7ff ffbe 	bl	134a8 <_ZNSt9type_infoD1Ev>
   1352c:	4620      	mov	r0, r4
   1352e:	bd10      	pop	{r4, pc}
   13530:	000236d0 	.word	0x000236d0

00013534 <_ZN10__cxxabiv117__class_type_infoD0Ev>:
   13534:	b510      	push	{r4, lr}
   13536:	4b05      	ldr	r3, [pc, #20]	; (1354c <_ZN10__cxxabiv117__class_type_infoD0Ev+0x18>)
   13538:	6003      	str	r3, [r0, #0]
   1353a:	4604      	mov	r4, r0
   1353c:	f7ff ffb4 	bl	134a8 <_ZNSt9type_infoD1Ev>
   13540:	4620      	mov	r0, r4
   13542:	2108      	movs	r1, #8
   13544:	f7ff fd84 	bl	13050 <_ZdlPvj>
   13548:	4620      	mov	r0, r4
   1354a:	bd10      	pop	{r4, pc}
   1354c:	000236d0 	.word	0x000236d0

00013550 <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PKvRNS0_15__upcast_resultE>:
   13550:	b538      	push	{r3, r4, r5, lr}
   13552:	4615      	mov	r5, r2
   13554:	461c      	mov	r4, r3
   13556:	f7ff ffab 	bl	134b0 <_ZNKSt9type_infoeqERKS_>
   1355a:	b120      	cbz	r0, 13566 <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PKvRNS0_15__upcast_resultE+0x16>
   1355c:	2208      	movs	r2, #8
   1355e:	2306      	movs	r3, #6
   13560:	6025      	str	r5, [r4, #0]
   13562:	60e2      	str	r2, [r4, #12]
   13564:	7123      	strb	r3, [r4, #4]
   13566:	bd38      	pop	{r3, r4, r5, pc}

00013568 <_ZNK10__cxxabiv117__class_type_info10__do_catchEPKSt9type_infoPPvj>:
   13568:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1356c:	4617      	mov	r7, r2
   1356e:	461c      	mov	r4, r3
   13570:	4606      	mov	r6, r0
   13572:	460d      	mov	r5, r1
   13574:	f7ff ff9c 	bl	134b0 <_ZNKSt9type_infoeqERKS_>
   13578:	b908      	cbnz	r0, 1357e <_ZNK10__cxxabiv117__class_type_info10__do_catchEPKSt9type_infoPPvj+0x16>
   1357a:	2c03      	cmp	r4, #3
   1357c:	d901      	bls.n	13582 <_ZNK10__cxxabiv117__class_type_info10__do_catchEPKSt9type_infoPPvj+0x1a>
   1357e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   13582:	682b      	ldr	r3, [r5, #0]
   13584:	463a      	mov	r2, r7
   13586:	4631      	mov	r1, r6
   13588:	4628      	mov	r0, r5
   1358a:	695b      	ldr	r3, [r3, #20]
   1358c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   13590:	4718      	bx	r3
   13592:	bf00      	nop

00013594 <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE>:
   13594:	b5f0      	push	{r4, r5, r6, r7, lr}
   13596:	b083      	sub	sp, #12
   13598:	4617      	mov	r7, r2
   1359a:	9d08      	ldr	r5, [sp, #32]
   1359c:	990a      	ldr	r1, [sp, #40]	; 0x28
   1359e:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
   135a0:	428d      	cmp	r5, r1
   135a2:	4606      	mov	r6, r0
   135a4:	d00b      	beq.n	135be <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x2a>
   135a6:	4619      	mov	r1, r3
   135a8:	4630      	mov	r0, r6
   135aa:	f7ff ff81 	bl	134b0 <_ZNKSt9type_infoeqERKS_>
   135ae:	b118      	cbz	r0, 135b8 <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x24>
   135b0:	2301      	movs	r3, #1
   135b2:	6025      	str	r5, [r4, #0]
   135b4:	7127      	strb	r7, [r4, #4]
   135b6:	71a3      	strb	r3, [r4, #6]
   135b8:	2000      	movs	r0, #0
   135ba:	b003      	add	sp, #12
   135bc:	bdf0      	pop	{r4, r5, r6, r7, pc}
   135be:	9909      	ldr	r1, [sp, #36]	; 0x24
   135c0:	9301      	str	r3, [sp, #4]
   135c2:	f7ff ff75 	bl	134b0 <_ZNKSt9type_infoeqERKS_>
   135c6:	b118      	cbz	r0, 135d0 <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x3c>
   135c8:	2000      	movs	r0, #0
   135ca:	7167      	strb	r7, [r4, #5]
   135cc:	b003      	add	sp, #12
   135ce:	bdf0      	pop	{r4, r5, r6, r7, pc}
   135d0:	9b01      	ldr	r3, [sp, #4]
   135d2:	e7e8      	b.n	135a6 <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x12>

000135d4 <_ZdlPv>:
   135d4:	f00a b9a0 	b.w	1d918 <free>

000135d8 <__cxa_end_cleanup>:
   135d8:	b41e      	push	{r1, r2, r3, r4}
   135da:	f000 f891 	bl	13700 <__gnu_end_cleanup>
   135de:	bc1e      	pop	{r1, r2, r3, r4}
   135e0:	f009 fcda 	bl	1cf98 <_Unwind_Resume>

000135e4 <__cxa_type_match>:
   135e4:	b5f0      	push	{r4, r5, r6, r7, lr}
   135e6:	7802      	ldrb	r2, [r0, #0]
   135e8:	2a47      	cmp	r2, #71	; 0x47
   135ea:	b083      	sub	sp, #12
   135ec:	460d      	mov	r5, r1
   135ee:	461f      	mov	r7, r3
   135f0:	d01e      	beq.n	13630 <__cxa_type_match+0x4c>
   135f2:	2300      	movs	r3, #0
   135f4:	4c27      	ldr	r4, [pc, #156]	; (13694 <__cxa_type_match+0xb0>)
   135f6:	9301      	str	r3, [sp, #4]
   135f8:	6823      	ldr	r3, [r4, #0]
   135fa:	4620      	mov	r0, r4
   135fc:	689b      	ldr	r3, [r3, #8]
   135fe:	4798      	blx	r3
   13600:	b180      	cbz	r0, 13624 <__cxa_type_match+0x40>
   13602:	9b01      	ldr	r3, [sp, #4]
   13604:	681b      	ldr	r3, [r3, #0]
   13606:	9301      	str	r3, [sp, #4]
   13608:	2602      	movs	r6, #2
   1360a:	682b      	ldr	r3, [r5, #0]
   1360c:	4621      	mov	r1, r4
   1360e:	4628      	mov	r0, r5
   13610:	691c      	ldr	r4, [r3, #16]
   13612:	aa01      	add	r2, sp, #4
   13614:	2301      	movs	r3, #1
   13616:	47a0      	blx	r4
   13618:	b130      	cbz	r0, 13628 <__cxa_type_match+0x44>
   1361a:	9b01      	ldr	r3, [sp, #4]
   1361c:	603b      	str	r3, [r7, #0]
   1361e:	4630      	mov	r0, r6
   13620:	b003      	add	sp, #12
   13622:	bdf0      	pop	{r4, r5, r6, r7, pc}
   13624:	2601      	movs	r6, #1
   13626:	e7f0      	b.n	1360a <__cxa_type_match+0x26>
   13628:	4606      	mov	r6, r0
   1362a:	4630      	mov	r0, r6
   1362c:	b003      	add	sp, #12
   1362e:	bdf0      	pop	{r4, r5, r6, r7, pc}
   13630:	7843      	ldrb	r3, [r0, #1]
   13632:	2b4e      	cmp	r3, #78	; 0x4e
   13634:	d1dd      	bne.n	135f2 <__cxa_type_match+0xe>
   13636:	7883      	ldrb	r3, [r0, #2]
   13638:	2b55      	cmp	r3, #85	; 0x55
   1363a:	d1da      	bne.n	135f2 <__cxa_type_match+0xe>
   1363c:	78c3      	ldrb	r3, [r0, #3]
   1363e:	2b43      	cmp	r3, #67	; 0x43
   13640:	d019      	beq.n	13676 <__cxa_type_match+0x92>
   13642:	78c3      	ldrb	r3, [r0, #3]
   13644:	2b43      	cmp	r3, #67	; 0x43
   13646:	d1d4      	bne.n	135f2 <__cxa_type_match+0xe>
   13648:	7903      	ldrb	r3, [r0, #4]
   1364a:	2b43      	cmp	r3, #67	; 0x43
   1364c:	d1d1      	bne.n	135f2 <__cxa_type_match+0xe>
   1364e:	7943      	ldrb	r3, [r0, #5]
   13650:	2b2b      	cmp	r3, #43	; 0x2b
   13652:	d1ce      	bne.n	135f2 <__cxa_type_match+0xe>
   13654:	7983      	ldrb	r3, [r0, #6]
   13656:	2b2b      	cmp	r3, #43	; 0x2b
   13658:	d1cb      	bne.n	135f2 <__cxa_type_match+0xe>
   1365a:	79c3      	ldrb	r3, [r0, #7]
   1365c:	2b01      	cmp	r3, #1
   1365e:	d8c8      	bhi.n	135f2 <__cxa_type_match+0xe>
   13660:	d004      	beq.n	1366c <__cxa_type_match+0x88>
   13662:	f850 4c20 	ldr.w	r4, [r0, #-32]
   13666:	3058      	adds	r0, #88	; 0x58
   13668:	9001      	str	r0, [sp, #4]
   1366a:	e7c5      	b.n	135f8 <__cxa_type_match+0x14>
   1366c:	f850 0c20 	ldr.w	r0, [r0, #-32]
   13670:	f850 4c78 	ldr.w	r4, [r0, #-120]
   13674:	e7f8      	b.n	13668 <__cxa_type_match+0x84>
   13676:	7903      	ldrb	r3, [r0, #4]
   13678:	2b46      	cmp	r3, #70	; 0x46
   1367a:	d1e2      	bne.n	13642 <__cxa_type_match+0x5e>
   1367c:	7943      	ldrb	r3, [r0, #5]
   1367e:	2b4f      	cmp	r3, #79	; 0x4f
   13680:	d1df      	bne.n	13642 <__cxa_type_match+0x5e>
   13682:	7983      	ldrb	r3, [r0, #6]
   13684:	2b52      	cmp	r3, #82	; 0x52
   13686:	d1dc      	bne.n	13642 <__cxa_type_match+0x5e>
   13688:	79c3      	ldrb	r3, [r0, #7]
   1368a:	2b00      	cmp	r3, #0
   1368c:	d1d9      	bne.n	13642 <__cxa_type_match+0x5e>
   1368e:	9301      	str	r3, [sp, #4]
   13690:	4c01      	ldr	r4, [pc, #4]	; (13698 <__cxa_type_match+0xb4>)
   13692:	e7b1      	b.n	135f8 <__cxa_type_match+0x14>
   13694:	00023588 	.word	0x00023588
   13698:	00023580 	.word	0x00023580

0001369c <__cxa_begin_cleanup>:
   1369c:	b510      	push	{r4, lr}
   1369e:	4604      	mov	r4, r0
   136a0:	f000 f98c 	bl	139bc <__cxa_get_globals>
   136a4:	7823      	ldrb	r3, [r4, #0]
   136a6:	2b47      	cmp	r3, #71	; 0x47
   136a8:	f1a4 0220 	sub.w	r2, r4, #32
   136ac:	d004      	beq.n	136b8 <__cxa_begin_cleanup+0x1c>
   136ae:	6883      	ldr	r3, [r0, #8]
   136b0:	bb23      	cbnz	r3, 136fc <__cxa_begin_cleanup+0x60>
   136b2:	6082      	str	r2, [r0, #8]
   136b4:	2001      	movs	r0, #1
   136b6:	bd10      	pop	{r4, pc}
   136b8:	7863      	ldrb	r3, [r4, #1]
   136ba:	2b4e      	cmp	r3, #78	; 0x4e
   136bc:	d1f7      	bne.n	136ae <__cxa_begin_cleanup+0x12>
   136be:	78a3      	ldrb	r3, [r4, #2]
   136c0:	2b55      	cmp	r3, #85	; 0x55
   136c2:	d1f4      	bne.n	136ae <__cxa_begin_cleanup+0x12>
   136c4:	78e3      	ldrb	r3, [r4, #3]
   136c6:	2b43      	cmp	r3, #67	; 0x43
   136c8:	d1f1      	bne.n	136ae <__cxa_begin_cleanup+0x12>
   136ca:	7923      	ldrb	r3, [r4, #4]
   136cc:	2b43      	cmp	r3, #67	; 0x43
   136ce:	d1ee      	bne.n	136ae <__cxa_begin_cleanup+0x12>
   136d0:	7963      	ldrb	r3, [r4, #5]
   136d2:	2b2b      	cmp	r3, #43	; 0x2b
   136d4:	d1eb      	bne.n	136ae <__cxa_begin_cleanup+0x12>
   136d6:	79a3      	ldrb	r3, [r4, #6]
   136d8:	2b2b      	cmp	r3, #43	; 0x2b
   136da:	d1e8      	bne.n	136ae <__cxa_begin_cleanup+0x12>
   136dc:	79e3      	ldrb	r3, [r4, #7]
   136de:	2b01      	cmp	r3, #1
   136e0:	d8e5      	bhi.n	136ae <__cxa_begin_cleanup+0x12>
   136e2:	f854 3c04 	ldr.w	r3, [r4, #-4]
   136e6:	3301      	adds	r3, #1
   136e8:	2b01      	cmp	r3, #1
   136ea:	f844 3c04 	str.w	r3, [r4, #-4]
   136ee:	d1e1      	bne.n	136b4 <__cxa_begin_cleanup+0x18>
   136f0:	6883      	ldr	r3, [r0, #8]
   136f2:	f844 3c08 	str.w	r3, [r4, #-8]
   136f6:	6082      	str	r2, [r0, #8]
   136f8:	2001      	movs	r0, #1
   136fa:	bd10      	pop	{r4, pc}
   136fc:	f7ff fd78 	bl	131f0 <_ZSt9terminatev>

00013700 <__gnu_end_cleanup>:
   13700:	b508      	push	{r3, lr}
   13702:	f000 f95b 	bl	139bc <__cxa_get_globals>
   13706:	6883      	ldr	r3, [r0, #8]
   13708:	b383      	cbz	r3, 1376c <__gnu_end_cleanup+0x6c>
   1370a:	f893 2020 	ldrb.w	r2, [r3, #32]
   1370e:	2a47      	cmp	r2, #71	; 0x47
   13710:	d004      	beq.n	1371c <__gnu_end_cleanup+0x1c>
   13712:	2200      	movs	r2, #0
   13714:	6082      	str	r2, [r0, #8]
   13716:	f103 0020 	add.w	r0, r3, #32
   1371a:	bd08      	pop	{r3, pc}
   1371c:	f893 2021 	ldrb.w	r2, [r3, #33]	; 0x21
   13720:	2a4e      	cmp	r2, #78	; 0x4e
   13722:	d1f6      	bne.n	13712 <__gnu_end_cleanup+0x12>
   13724:	f893 2022 	ldrb.w	r2, [r3, #34]	; 0x22
   13728:	2a55      	cmp	r2, #85	; 0x55
   1372a:	d1f2      	bne.n	13712 <__gnu_end_cleanup+0x12>
   1372c:	f893 2023 	ldrb.w	r2, [r3, #35]	; 0x23
   13730:	2a43      	cmp	r2, #67	; 0x43
   13732:	d1ee      	bne.n	13712 <__gnu_end_cleanup+0x12>
   13734:	f893 2024 	ldrb.w	r2, [r3, #36]	; 0x24
   13738:	2a43      	cmp	r2, #67	; 0x43
   1373a:	d1ea      	bne.n	13712 <__gnu_end_cleanup+0x12>
   1373c:	f893 2025 	ldrb.w	r2, [r3, #37]	; 0x25
   13740:	2a2b      	cmp	r2, #43	; 0x2b
   13742:	d1e6      	bne.n	13712 <__gnu_end_cleanup+0x12>
   13744:	f893 2026 	ldrb.w	r2, [r3, #38]	; 0x26
   13748:	2a2b      	cmp	r2, #43	; 0x2b
   1374a:	d1e2      	bne.n	13712 <__gnu_end_cleanup+0x12>
   1374c:	f893 2027 	ldrb.w	r2, [r3, #39]	; 0x27
   13750:	2a01      	cmp	r2, #1
   13752:	d8de      	bhi.n	13712 <__gnu_end_cleanup+0x12>
   13754:	69da      	ldr	r2, [r3, #28]
   13756:	3a01      	subs	r2, #1
   13758:	61da      	str	r2, [r3, #28]
   1375a:	2a00      	cmp	r2, #0
   1375c:	d1db      	bne.n	13716 <__gnu_end_cleanup+0x16>
   1375e:	699a      	ldr	r2, [r3, #24]
   13760:	6082      	str	r2, [r0, #8]
   13762:	2200      	movs	r2, #0
   13764:	619a      	str	r2, [r3, #24]
   13766:	f103 0020 	add.w	r0, r3, #32
   1376a:	bd08      	pop	{r3, pc}
   1376c:	f7ff fd40 	bl	131f0 <_ZSt9terminatev>

00013770 <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc>:
   13770:	7803      	ldrb	r3, [r0, #0]
   13772:	2b47      	cmp	r3, #71	; 0x47
   13774:	d001      	beq.n	1377a <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc+0xa>
   13776:	2000      	movs	r0, #0
   13778:	4770      	bx	lr
   1377a:	7843      	ldrb	r3, [r0, #1]
   1377c:	2b4e      	cmp	r3, #78	; 0x4e
   1377e:	d1fa      	bne.n	13776 <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc+0x6>
   13780:	7883      	ldrb	r3, [r0, #2]
   13782:	2b55      	cmp	r3, #85	; 0x55
   13784:	d1f7      	bne.n	13776 <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc+0x6>
   13786:	78c3      	ldrb	r3, [r0, #3]
   13788:	2b43      	cmp	r3, #67	; 0x43
   1378a:	d1f4      	bne.n	13776 <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc+0x6>
   1378c:	7903      	ldrb	r3, [r0, #4]
   1378e:	2b43      	cmp	r3, #67	; 0x43
   13790:	d1f1      	bne.n	13776 <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc+0x6>
   13792:	7943      	ldrb	r3, [r0, #5]
   13794:	2b2b      	cmp	r3, #43	; 0x2b
   13796:	d1ee      	bne.n	13776 <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc+0x6>
   13798:	7983      	ldrb	r3, [r0, #6]
   1379a:	2b2b      	cmp	r3, #43	; 0x2b
   1379c:	d1eb      	bne.n	13776 <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc+0x6>
   1379e:	79c0      	ldrb	r0, [r0, #7]
   137a0:	2801      	cmp	r0, #1
   137a2:	bf8c      	ite	hi
   137a4:	2000      	movhi	r0, #0
   137a6:	2001      	movls	r0, #1
   137a8:	4770      	bx	lr
   137aa:	bf00      	nop

000137ac <__cxa_call_terminate>:
   137ac:	b510      	push	{r4, lr}
   137ae:	b130      	cbz	r0, 137be <__cxa_call_terminate+0x12>
   137b0:	4604      	mov	r4, r0
   137b2:	f000 f87b 	bl	138ac <__cxa_begin_catch>
   137b6:	4620      	mov	r0, r4
   137b8:	f7ff ffda 	bl	13770 <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc>
   137bc:	b908      	cbnz	r0, 137c2 <__cxa_call_terminate+0x16>
   137be:	f7ff fd17 	bl	131f0 <_ZSt9terminatev>
   137c2:	f854 0c14 	ldr.w	r0, [r4, #-20]
   137c6:	f7ff fcff 	bl	131c8 <_ZN10__cxxabiv111__terminateEPFvvE>
   137ca:	bf00      	nop

000137cc <__cxa_call_unexpected>:
   137cc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   137d0:	b085      	sub	sp, #20
   137d2:	4602      	mov	r2, r0
   137d4:	f7ff ffcc 	bl	13770 <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc>
   137d8:	b160      	cbz	r0, 137f4 <__cxa_call_unexpected+0x28>
   137da:	f852 8c18 	ldr.w	r8, [r2, #-24]
   137de:	f852 5c14 	ldr.w	r5, [r2, #-20]
   137e2:	6a96      	ldr	r6, [r2, #40]	; 0x28
   137e4:	6b17      	ldr	r7, [r2, #48]	; 0x30
   137e6:	6b54      	ldr	r4, [r2, #52]	; 0x34
   137e8:	4610      	mov	r0, r2
   137ea:	f000 f85f 	bl	138ac <__cxa_begin_catch>
   137ee:	4640      	mov	r0, r8
   137f0:	f7ff fd08 	bl	13204 <_ZN10__cxxabiv112__unexpectedEPFvvE>
   137f4:	4610      	mov	r0, r2
   137f6:	f000 f859 	bl	138ac <__cxa_begin_catch>
   137fa:	f7ff fd07 	bl	1320c <_ZSt10unexpectedv>
   137fe:	f000 f855 	bl	138ac <__cxa_begin_catch>
   13802:	f7ff fcf5 	bl	131f0 <_ZSt9terminatev>
   13806:	f000 f851 	bl	138ac <__cxa_begin_catch>
   1380a:	f000 f8d3 	bl	139b4 <__cxa_get_globals_fast>
   1380e:	6803      	ldr	r3, [r0, #0]
   13810:	f893 2027 	ldrb.w	r2, [r3, #39]	; 0x27
   13814:	2a01      	cmp	r2, #1
   13816:	d036      	beq.n	13886 <__cxa_call_unexpected+0xba>
   13818:	f103 0278 	add.w	r2, r3, #120	; 0x78
   1381c:	f10d 0a10 	add.w	sl, sp, #16
   13820:	f04f 0800 	mov.w	r8, #0
   13824:	3320      	adds	r3, #32
   13826:	f84a 2d08 	str.w	r2, [sl, #-8]!
   1382a:	f027 0b03 	bic.w	fp, r7, #3
   1382e:	9301      	str	r3, [sp, #4]
   13830:	46c1      	mov	r9, r8
   13832:	45b1      	cmp	r9, r6
   13834:	da1b      	bge.n	1386e <__cxa_call_unexpected+0xa2>
   13836:	6827      	ldr	r7, [r4, #0]
   13838:	b107      	cbz	r7, 1383c <__cxa_call_unexpected+0x70>
   1383a:	4427      	add	r7, r4
   1383c:	4653      	mov	r3, sl
   1383e:	2200      	movs	r2, #0
   13840:	4639      	mov	r1, r7
   13842:	9801      	ldr	r0, [sp, #4]
   13844:	f7ff fece 	bl	135e4 <__cxa_type_match>
   13848:	bb10      	cbnz	r0, 13890 <__cxa_call_unexpected+0xc4>
   1384a:	683b      	ldr	r3, [r7, #0]
   1384c:	4914      	ldr	r1, [pc, #80]	; (138a0 <__cxa_call_unexpected+0xd4>)
   1384e:	691b      	ldr	r3, [r3, #16]
   13850:	9300      	str	r3, [sp, #0]
   13852:	aa04      	add	r2, sp, #16
   13854:	2301      	movs	r3, #1
   13856:	f842 0d04 	str.w	r0, [r2, #-4]!
   1385a:	4638      	mov	r0, r7
   1385c:	9f00      	ldr	r7, [sp, #0]
   1385e:	47b8      	blx	r7
   13860:	2800      	cmp	r0, #0
   13862:	bf18      	it	ne
   13864:	4680      	movne	r8, r0
   13866:	f109 0901 	add.w	r9, r9, #1
   1386a:	445c      	add	r4, fp
   1386c:	e7e1      	b.n	13832 <__cxa_call_unexpected+0x66>
   1386e:	f1b8 0f00 	cmp.w	r8, #0
   13872:	d00a      	beq.n	1388a <__cxa_call_unexpected+0xbe>
   13874:	2004      	movs	r0, #4
   13876:	f7ff fc5b 	bl	13130 <__cxa_allocate_exception>
   1387a:	4b0a      	ldr	r3, [pc, #40]	; (138a4 <__cxa_call_unexpected+0xd8>)
   1387c:	6003      	str	r3, [r0, #0]
   1387e:	4a0a      	ldr	r2, [pc, #40]	; (138a8 <__cxa_call_unexpected+0xdc>)
   13880:	4907      	ldr	r1, [pc, #28]	; (138a0 <__cxa_call_unexpected+0xd4>)
   13882:	f7ff fcff 	bl	13284 <__cxa_throw>
   13886:	681a      	ldr	r2, [r3, #0]
   13888:	e7c8      	b.n	1381c <__cxa_call_unexpected+0x50>
   1388a:	4628      	mov	r0, r5
   1388c:	f7ff fc9c 	bl	131c8 <_ZN10__cxxabiv111__terminateEPFvvE>
   13890:	f7ff fd36 	bl	13300 <__cxa_rethrow>
   13894:	f000 f848 	bl	13928 <__cxa_end_catch>
   13898:	f000 f846 	bl	13928 <__cxa_end_catch>
   1389c:	f7ff fe9c 	bl	135d8 <__cxa_end_cleanup>
   138a0:	00023590 	.word	0x00023590
   138a4:	00023614 	.word	0x00023614
   138a8:	000131ad 	.word	0x000131ad

000138ac <__cxa_begin_catch>:
   138ac:	b538      	push	{r3, r4, r5, lr}
   138ae:	4604      	mov	r4, r0
   138b0:	f000 f884 	bl	139bc <__cxa_get_globals>
   138b4:	7822      	ldrb	r2, [r4, #0]
   138b6:	6803      	ldr	r3, [r0, #0]
   138b8:	2a47      	cmp	r2, #71	; 0x47
   138ba:	f1a4 0120 	sub.w	r1, r4, #32
   138be:	d004      	beq.n	138ca <__cxa_begin_catch+0x1e>
   138c0:	bb83      	cbnz	r3, 13924 <__cxa_begin_catch+0x78>
   138c2:	461c      	mov	r4, r3
   138c4:	6001      	str	r1, [r0, #0]
   138c6:	4620      	mov	r0, r4
   138c8:	bd38      	pop	{r3, r4, r5, pc}
   138ca:	7862      	ldrb	r2, [r4, #1]
   138cc:	2a4e      	cmp	r2, #78	; 0x4e
   138ce:	d1f7      	bne.n	138c0 <__cxa_begin_catch+0x14>
   138d0:	78a2      	ldrb	r2, [r4, #2]
   138d2:	2a55      	cmp	r2, #85	; 0x55
   138d4:	d1f4      	bne.n	138c0 <__cxa_begin_catch+0x14>
   138d6:	78e2      	ldrb	r2, [r4, #3]
   138d8:	2a43      	cmp	r2, #67	; 0x43
   138da:	d1f1      	bne.n	138c0 <__cxa_begin_catch+0x14>
   138dc:	7922      	ldrb	r2, [r4, #4]
   138de:	2a43      	cmp	r2, #67	; 0x43
   138e0:	d1ee      	bne.n	138c0 <__cxa_begin_catch+0x14>
   138e2:	7962      	ldrb	r2, [r4, #5]
   138e4:	2a2b      	cmp	r2, #43	; 0x2b
   138e6:	d1eb      	bne.n	138c0 <__cxa_begin_catch+0x14>
   138e8:	79a2      	ldrb	r2, [r4, #6]
   138ea:	2a2b      	cmp	r2, #43	; 0x2b
   138ec:	d1e8      	bne.n	138c0 <__cxa_begin_catch+0x14>
   138ee:	79e2      	ldrb	r2, [r4, #7]
   138f0:	2a01      	cmp	r2, #1
   138f2:	d8e5      	bhi.n	138c0 <__cxa_begin_catch+0x14>
   138f4:	f854 2c0c 	ldr.w	r2, [r4, #-12]
   138f8:	2a00      	cmp	r2, #0
   138fa:	db10      	blt.n	1391e <__cxa_begin_catch+0x72>
   138fc:	3201      	adds	r2, #1
   138fe:	6845      	ldr	r5, [r0, #4]
   13900:	f844 2c0c 	str.w	r2, [r4, #-12]
   13904:	3d01      	subs	r5, #1
   13906:	6045      	str	r5, [r0, #4]
   13908:	428b      	cmp	r3, r1
   1390a:	bf1c      	itt	ne
   1390c:	f844 3c10 	strne.w	r3, [r4, #-16]
   13910:	6001      	strne	r1, [r0, #0]
   13912:	4620      	mov	r0, r4
   13914:	6a64      	ldr	r4, [r4, #36]	; 0x24
   13916:	f008 ff91 	bl	1c83c <_Unwind_Complete>
   1391a:	4620      	mov	r0, r4
   1391c:	bd38      	pop	{r3, r4, r5, pc}
   1391e:	f1c2 0201 	rsb	r2, r2, #1
   13922:	e7ec      	b.n	138fe <__cxa_begin_catch+0x52>
   13924:	f7ff fc64 	bl	131f0 <_ZSt9terminatev>

00013928 <__cxa_end_catch>:
   13928:	b508      	push	{r3, lr}
   1392a:	f000 f843 	bl	139b4 <__cxa_get_globals_fast>
   1392e:	4602      	mov	r2, r0
   13930:	6800      	ldr	r0, [r0, #0]
   13932:	2800      	cmp	r0, #0
   13934:	d03d      	beq.n	139b2 <__cxa_end_catch+0x8a>
   13936:	f890 3020 	ldrb.w	r3, [r0, #32]
   1393a:	2b47      	cmp	r3, #71	; 0x47
   1393c:	d006      	beq.n	1394c <__cxa_end_catch+0x24>
   1393e:	2300      	movs	r3, #0
   13940:	6013      	str	r3, [r2, #0]
   13942:	3020      	adds	r0, #32
   13944:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
   13948:	f008 bf7a 	b.w	1c840 <_Unwind_DeleteException>
   1394c:	f890 3021 	ldrb.w	r3, [r0, #33]	; 0x21
   13950:	2b4e      	cmp	r3, #78	; 0x4e
   13952:	d1f4      	bne.n	1393e <__cxa_end_catch+0x16>
   13954:	f890 3022 	ldrb.w	r3, [r0, #34]	; 0x22
   13958:	2b55      	cmp	r3, #85	; 0x55
   1395a:	d1f0      	bne.n	1393e <__cxa_end_catch+0x16>
   1395c:	f890 3023 	ldrb.w	r3, [r0, #35]	; 0x23
   13960:	2b43      	cmp	r3, #67	; 0x43
   13962:	d1ec      	bne.n	1393e <__cxa_end_catch+0x16>
   13964:	f890 3024 	ldrb.w	r3, [r0, #36]	; 0x24
   13968:	2b43      	cmp	r3, #67	; 0x43
   1396a:	d1e8      	bne.n	1393e <__cxa_end_catch+0x16>
   1396c:	f890 3025 	ldrb.w	r3, [r0, #37]	; 0x25
   13970:	2b2b      	cmp	r3, #43	; 0x2b
   13972:	d1e4      	bne.n	1393e <__cxa_end_catch+0x16>
   13974:	f890 3026 	ldrb.w	r3, [r0, #38]	; 0x26
   13978:	2b2b      	cmp	r3, #43	; 0x2b
   1397a:	d1e0      	bne.n	1393e <__cxa_end_catch+0x16>
   1397c:	f890 3027 	ldrb.w	r3, [r0, #39]	; 0x27
   13980:	2b01      	cmp	r3, #1
   13982:	d8dc      	bhi.n	1393e <__cxa_end_catch+0x16>
   13984:	6943      	ldr	r3, [r0, #20]
   13986:	2b00      	cmp	r3, #0
   13988:	db05      	blt.n	13996 <__cxa_end_catch+0x6e>
   1398a:	3b01      	subs	r3, #1
   1398c:	d008      	beq.n	139a0 <__cxa_end_catch+0x78>
   1398e:	1c5a      	adds	r2, r3, #1
   13990:	d00d      	beq.n	139ae <__cxa_end_catch+0x86>
   13992:	6143      	str	r3, [r0, #20]
   13994:	bd08      	pop	{r3, pc}
   13996:	3301      	adds	r3, #1
   13998:	d1fb      	bne.n	13992 <__cxa_end_catch+0x6a>
   1399a:	6901      	ldr	r1, [r0, #16]
   1399c:	6011      	str	r1, [r2, #0]
   1399e:	e7f8      	b.n	13992 <__cxa_end_catch+0x6a>
   139a0:	6903      	ldr	r3, [r0, #16]
   139a2:	6013      	str	r3, [r2, #0]
   139a4:	3020      	adds	r0, #32
   139a6:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
   139aa:	f008 bf49 	b.w	1c840 <_Unwind_DeleteException>
   139ae:	f7ff fc1f 	bl	131f0 <_ZSt9terminatev>
   139b2:	bd08      	pop	{r3, pc}

000139b4 <__cxa_get_globals_fast>:
   139b4:	4800      	ldr	r0, [pc, #0]	; (139b8 <__cxa_get_globals_fast+0x4>)
   139b6:	4770      	bx	lr
   139b8:	20002298 	.word	0x20002298

000139bc <__cxa_get_globals>:
   139bc:	4800      	ldr	r0, [pc, #0]	; (139c0 <__cxa_get_globals+0x4>)
   139be:	4770      	bx	lr
   139c0:	20002298 	.word	0x20002298

000139c4 <_ZL28read_encoded_value_with_basehjPKhPj>:
   139c4:	2850      	cmp	r0, #80	; 0x50
   139c6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   139c8:	d054      	beq.n	13a74 <_ZL28read_encoded_value_with_basehjPKhPj+0xb0>
   139ca:	f000 040f 	and.w	r4, r0, #15
   139ce:	2c0c      	cmp	r4, #12
   139d0:	d84e      	bhi.n	13a70 <_ZL28read_encoded_value_with_basehjPKhPj+0xac>
   139d2:	e8df f004 	tbb	[pc, r4]
   139d6:	3907      	.short	0x3907
   139d8:	4d170749 	.word	0x4d170749
   139dc:	1f4d4d4d 	.word	0x1f4d4d4d
   139e0:	071b      	.short	0x071b
   139e2:	17          	.byte	0x17
   139e3:	00          	.byte	0x00
   139e4:	4615      	mov	r5, r2
   139e6:	f855 4b04 	ldr.w	r4, [r5], #4
   139ea:	b144      	cbz	r4, 139fe <_ZL28read_encoded_value_with_basehjPKhPj+0x3a>
   139ec:	f000 0670 	and.w	r6, r0, #112	; 0x70
   139f0:	2e10      	cmp	r6, #16
   139f2:	bf08      	it	eq
   139f4:	4611      	moveq	r1, r2
   139f6:	440c      	add	r4, r1
   139f8:	0602      	lsls	r2, r0, #24
   139fa:	bf48      	it	mi
   139fc:	6824      	ldrmi	r4, [r4, #0]
   139fe:	601c      	str	r4, [r3, #0]
   13a00:	4628      	mov	r0, r5
   13a02:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   13a04:	4615      	mov	r5, r2
   13a06:	f855 4b08 	ldr.w	r4, [r5], #8
   13a0a:	e7ee      	b.n	139ea <_ZL28read_encoded_value_with_basehjPKhPj+0x26>
   13a0c:	4615      	mov	r5, r2
   13a0e:	f935 4b02 	ldrsh.w	r4, [r5], #2
   13a12:	e7ea      	b.n	139ea <_ZL28read_encoded_value_with_basehjPKhPj+0x26>
   13a14:	2400      	movs	r4, #0
   13a16:	4627      	mov	r7, r4
   13a18:	4615      	mov	r5, r2
   13a1a:	f815 eb01 	ldrb.w	lr, [r5], #1
   13a1e:	f00e 067f 	and.w	r6, lr, #127	; 0x7f
   13a22:	40be      	lsls	r6, r7
   13a24:	f01e 0f80 	tst.w	lr, #128	; 0x80
   13a28:	ea44 0406 	orr.w	r4, r4, r6
   13a2c:	f107 0707 	add.w	r7, r7, #7
   13a30:	d1f3      	bne.n	13a1a <_ZL28read_encoded_value_with_basehjPKhPj+0x56>
   13a32:	2f1f      	cmp	r7, #31
   13a34:	d8d9      	bhi.n	139ea <_ZL28read_encoded_value_with_basehjPKhPj+0x26>
   13a36:	f01e 0f40 	tst.w	lr, #64	; 0x40
   13a3a:	d0d6      	beq.n	139ea <_ZL28read_encoded_value_with_basehjPKhPj+0x26>
   13a3c:	f04f 36ff 	mov.w	r6, #4294967295
   13a40:	fa06 f707 	lsl.w	r7, r6, r7
   13a44:	433c      	orrs	r4, r7
   13a46:	e7d1      	b.n	139ec <_ZL28read_encoded_value_with_basehjPKhPj+0x28>
   13a48:	2400      	movs	r4, #0
   13a4a:	4627      	mov	r7, r4
   13a4c:	4615      	mov	r5, r2
   13a4e:	f815 eb01 	ldrb.w	lr, [r5], #1
   13a52:	f00e 067f 	and.w	r6, lr, #127	; 0x7f
   13a56:	40be      	lsls	r6, r7
   13a58:	f01e 0f80 	tst.w	lr, #128	; 0x80
   13a5c:	ea44 0406 	orr.w	r4, r4, r6
   13a60:	f107 0707 	add.w	r7, r7, #7
   13a64:	d1f3      	bne.n	13a4e <_ZL28read_encoded_value_with_basehjPKhPj+0x8a>
   13a66:	e7c0      	b.n	139ea <_ZL28read_encoded_value_with_basehjPKhPj+0x26>
   13a68:	4615      	mov	r5, r2
   13a6a:	f835 4b02 	ldrh.w	r4, [r5], #2
   13a6e:	e7bc      	b.n	139ea <_ZL28read_encoded_value_with_basehjPKhPj+0x26>
   13a70:	f009 fc9c 	bl	1d3ac <abort>
   13a74:	3203      	adds	r2, #3
   13a76:	f022 0503 	bic.w	r5, r2, #3
   13a7a:	f855 4b04 	ldr.w	r4, [r5], #4
   13a7e:	601c      	str	r4, [r3, #0]
   13a80:	4628      	mov	r0, r5
   13a82:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

00013a84 <_ZL21base_of_encoded_valuehP15_Unwind_Context>:
   13a84:	28ff      	cmp	r0, #255	; 0xff
   13a86:	d00d      	beq.n	13aa4 <_ZL21base_of_encoded_valuehP15_Unwind_Context+0x20>
   13a88:	f000 0070 	and.w	r0, r0, #112	; 0x70
   13a8c:	2820      	cmp	r0, #32
   13a8e:	d015      	beq.n	13abc <_ZL21base_of_encoded_valuehP15_Unwind_Context+0x38>
   13a90:	d90a      	bls.n	13aa8 <_ZL21base_of_encoded_valuehP15_Unwind_Context+0x24>
   13a92:	2840      	cmp	r0, #64	; 0x40
   13a94:	d00f      	beq.n	13ab6 <_ZL21base_of_encoded_valuehP15_Unwind_Context+0x32>
   13a96:	2850      	cmp	r0, #80	; 0x50
   13a98:	d004      	beq.n	13aa4 <_ZL21base_of_encoded_valuehP15_Unwind_Context+0x20>
   13a9a:	2830      	cmp	r0, #48	; 0x30
   13a9c:	d108      	bne.n	13ab0 <_ZL21base_of_encoded_valuehP15_Unwind_Context+0x2c>
   13a9e:	4608      	mov	r0, r1
   13aa0:	f009 bc7e 	b.w	1d3a0 <_Unwind_GetDataRelBase>
   13aa4:	2000      	movs	r0, #0
   13aa6:	4770      	bx	lr
   13aa8:	2800      	cmp	r0, #0
   13aaa:	d0fb      	beq.n	13aa4 <_ZL21base_of_encoded_valuehP15_Unwind_Context+0x20>
   13aac:	2810      	cmp	r0, #16
   13aae:	d0f9      	beq.n	13aa4 <_ZL21base_of_encoded_valuehP15_Unwind_Context+0x20>
   13ab0:	b508      	push	{r3, lr}
   13ab2:	f009 fc7b 	bl	1d3ac <abort>
   13ab6:	4608      	mov	r0, r1
   13ab8:	f009 bc5e 	b.w	1d378 <_Unwind_GetRegionStart>
   13abc:	4608      	mov	r0, r1
   13abe:	f009 bc6b 	b.w	1d398 <_Unwind_GetTextRelBase>
   13ac2:	bf00      	nop

00013ac4 <_ZL17parse_lsda_headerP15_Unwind_ContextPKhP16lsda_header_info>:
   13ac4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   13ac6:	460c      	mov	r4, r1
   13ac8:	4615      	mov	r5, r2
   13aca:	4607      	mov	r7, r0
   13acc:	2800      	cmp	r0, #0
   13ace:	d044      	beq.n	13b5a <_ZL17parse_lsda_headerP15_Unwind_ContextPKhP16lsda_header_info+0x96>
   13ad0:	f009 fc52 	bl	1d378 <_Unwind_GetRegionStart>
   13ad4:	6028      	str	r0, [r5, #0]
   13ad6:	7826      	ldrb	r6, [r4, #0]
   13ad8:	2eff      	cmp	r6, #255	; 0xff
   13ada:	f104 0401 	add.w	r4, r4, #1
   13ade:	d032      	beq.n	13b46 <_ZL17parse_lsda_headerP15_Unwind_ContextPKhP16lsda_header_info+0x82>
   13ae0:	4639      	mov	r1, r7
   13ae2:	4630      	mov	r0, r6
   13ae4:	f7ff ffce 	bl	13a84 <_ZL21base_of_encoded_valuehP15_Unwind_Context>
   13ae8:	4622      	mov	r2, r4
   13aea:	4601      	mov	r1, r0
   13aec:	1d2b      	adds	r3, r5, #4
   13aee:	4630      	mov	r0, r6
   13af0:	f7ff ff68 	bl	139c4 <_ZL28read_encoded_value_with_basehjPKhPj>
   13af4:	4604      	mov	r4, r0
   13af6:	1c60      	adds	r0, r4, #1
   13af8:	7823      	ldrb	r3, [r4, #0]
   13afa:	752b      	strb	r3, [r5, #20]
   13afc:	2bff      	cmp	r3, #255	; 0xff
   13afe:	d029      	beq.n	13b54 <_ZL17parse_lsda_headerP15_Unwind_ContextPKhP16lsda_header_info+0x90>
   13b00:	2310      	movs	r3, #16
   13b02:	2400      	movs	r4, #0
   13b04:	752b      	strb	r3, [r5, #20]
   13b06:	4622      	mov	r2, r4
   13b08:	f810 1b01 	ldrb.w	r1, [r0], #1
   13b0c:	f001 037f 	and.w	r3, r1, #127	; 0x7f
   13b10:	4093      	lsls	r3, r2
   13b12:	0609      	lsls	r1, r1, #24
   13b14:	ea44 0403 	orr.w	r4, r4, r3
   13b18:	f102 0207 	add.w	r2, r2, #7
   13b1c:	d4f4      	bmi.n	13b08 <_ZL17parse_lsda_headerP15_Unwind_ContextPKhP16lsda_header_info+0x44>
   13b1e:	4404      	add	r4, r0
   13b20:	60ec      	str	r4, [r5, #12]
   13b22:	7803      	ldrb	r3, [r0, #0]
   13b24:	756b      	strb	r3, [r5, #21]
   13b26:	2400      	movs	r4, #0
   13b28:	3001      	adds	r0, #1
   13b2a:	4622      	mov	r2, r4
   13b2c:	f810 1b01 	ldrb.w	r1, [r0], #1
   13b30:	f001 037f 	and.w	r3, r1, #127	; 0x7f
   13b34:	4093      	lsls	r3, r2
   13b36:	431c      	orrs	r4, r3
   13b38:	060b      	lsls	r3, r1, #24
   13b3a:	f102 0207 	add.w	r2, r2, #7
   13b3e:	d4f5      	bmi.n	13b2c <_ZL17parse_lsda_headerP15_Unwind_ContextPKhP16lsda_header_info+0x68>
   13b40:	4404      	add	r4, r0
   13b42:	612c      	str	r4, [r5, #16]
   13b44:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   13b46:	6068      	str	r0, [r5, #4]
   13b48:	7823      	ldrb	r3, [r4, #0]
   13b4a:	752b      	strb	r3, [r5, #20]
   13b4c:	2bff      	cmp	r3, #255	; 0xff
   13b4e:	f104 0001 	add.w	r0, r4, #1
   13b52:	d1d5      	bne.n	13b00 <_ZL17parse_lsda_headerP15_Unwind_ContextPKhP16lsda_header_info+0x3c>
   13b54:	2300      	movs	r3, #0
   13b56:	60eb      	str	r3, [r5, #12]
   13b58:	e7e3      	b.n	13b22 <_ZL17parse_lsda_headerP15_Unwind_ContextPKhP16lsda_header_info+0x5e>
   13b5a:	e7bb      	b.n	13ad4 <_ZL17parse_lsda_headerP15_Unwind_ContextPKhP16lsda_header_info+0x10>

00013b5c <__gxx_personality_v0>:
   13b5c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   13b60:	f000 0403 	and.w	r4, r0, #3
   13b64:	b097      	sub	sp, #92	; 0x5c
   13b66:	2300      	movs	r3, #0
   13b68:	2c01      	cmp	r4, #1
   13b6a:	4689      	mov	r9, r1
   13b6c:	4617      	mov	r7, r2
   13b6e:	930a      	str	r3, [sp, #40]	; 0x28
   13b70:	d01e      	beq.n	13bb0 <__gxx_personality_v0+0x54>
   13b72:	d30e      	bcc.n	13b92 <__gxx_personality_v0+0x36>
   13b74:	2c02      	cmp	r4, #2
   13b76:	d10a      	bne.n	13b8e <__gxx_personality_v0+0x32>
   13b78:	4639      	mov	r1, r7
   13b7a:	4648      	mov	r0, r9
   13b7c:	f009 fbe8 	bl	1d350 <__gnu_unwind_frame>
   13b80:	2800      	cmp	r0, #0
   13b82:	f000 80a5 	beq.w	13cd0 <__gxx_personality_v0+0x174>
   13b86:	2009      	movs	r0, #9
   13b88:	b017      	add	sp, #92	; 0x5c
   13b8a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   13b8e:	f009 fc0d 	bl	1d3ac <abort>
   13b92:	0700      	lsls	r0, r0, #28
   13b94:	d4f0      	bmi.n	13b78 <__gxx_personality_v0+0x1c>
   13b96:	2301      	movs	r3, #1
   13b98:	9303      	str	r3, [sp, #12]
   13b9a:	aa16      	add	r2, sp, #88	; 0x58
   13b9c:	2300      	movs	r3, #0
   13b9e:	f842 9d2c 	str.w	r9, [r2, #-44]!
   13ba2:	4619      	mov	r1, r3
   13ba4:	9200      	str	r2, [sp, #0]
   13ba6:	4638      	mov	r0, r7
   13ba8:	220c      	movs	r2, #12
   13baa:	f008 fe75 	bl	1c898 <_Unwind_VRS_Set>
   13bae:	e00f      	b.n	13bd0 <__gxx_personality_v0+0x74>
   13bb0:	f010 0408 	ands.w	r4, r0, #8
   13bb4:	f000 8090 	beq.w	13cd8 <__gxx_personality_v0+0x17c>
   13bb8:	aa16      	add	r2, sp, #88	; 0x58
   13bba:	f044 0402 	orr.w	r4, r4, #2
   13bbe:	f842 1d2c 	str.w	r1, [r2, #-44]!
   13bc2:	4638      	mov	r0, r7
   13bc4:	9200      	str	r2, [sp, #0]
   13bc6:	4619      	mov	r1, r3
   13bc8:	220c      	movs	r2, #12
   13bca:	9403      	str	r4, [sp, #12]
   13bcc:	f008 fe64 	bl	1c898 <_Unwind_VRS_Set>
   13bd0:	4638      	mov	r0, r7
   13bd2:	f009 fbd7 	bl	1d384 <_Unwind_GetLanguageSpecificData>
   13bd6:	9005      	str	r0, [sp, #20]
   13bd8:	2800      	cmp	r0, #0
   13bda:	d0cd      	beq.n	13b78 <__gxx_personality_v0+0x1c>
   13bdc:	ab10      	add	r3, sp, #64	; 0x40
   13bde:	461a      	mov	r2, r3
   13be0:	9905      	ldr	r1, [sp, #20]
   13be2:	9306      	str	r3, [sp, #24]
   13be4:	4638      	mov	r0, r7
   13be6:	f7ff ff6d 	bl	13ac4 <_ZL17parse_lsda_headerP15_Unwind_ContextPKhP16lsda_header_info>
   13bea:	4639      	mov	r1, r7
   13bec:	4604      	mov	r4, r0
   13bee:	f89d 0054 	ldrb.w	r0, [sp, #84]	; 0x54
   13bf2:	f7ff ff47 	bl	13a84 <_ZL21base_of_encoded_valuehP15_Unwind_Context>
   13bf6:	f10d 0b3c 	add.w	fp, sp, #60	; 0x3c
   13bfa:	2300      	movs	r3, #0
   13bfc:	9012      	str	r0, [sp, #72]	; 0x48
   13bfe:	4619      	mov	r1, r3
   13c00:	220f      	movs	r2, #15
   13c02:	f8cd b000 	str.w	fp, [sp]
   13c06:	4638      	mov	r0, r7
   13c08:	f008 fe20 	bl	1c84c <_Unwind_VRS_Get>
   13c0c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   13c0e:	9a14      	ldr	r2, [sp, #80]	; 0x50
   13c10:	f023 0301 	bic.w	r3, r3, #1
   13c14:	42a2      	cmp	r2, r4
   13c16:	f103 36ff 	add.w	r6, r3, #4294967295
   13c1a:	d975      	bls.n	13d08 <__gxx_personality_v0+0x1ac>
   13c1c:	f10d 0a34 	add.w	sl, sp, #52	; 0x34
   13c20:	f10d 0838 	add.w	r8, sp, #56	; 0x38
   13c24:	f89d 5055 	ldrb.w	r5, [sp, #85]	; 0x55
   13c28:	2100      	movs	r1, #0
   13c2a:	4628      	mov	r0, r5
   13c2c:	f7ff ff2a 	bl	13a84 <_ZL21base_of_encoded_valuehP15_Unwind_Context>
   13c30:	4622      	mov	r2, r4
   13c32:	4653      	mov	r3, sl
   13c34:	4601      	mov	r1, r0
   13c36:	4628      	mov	r0, r5
   13c38:	f7ff fec4 	bl	139c4 <_ZL28read_encoded_value_with_basehjPKhPj>
   13c3c:	f89d 4055 	ldrb.w	r4, [sp, #85]	; 0x55
   13c40:	4605      	mov	r5, r0
   13c42:	2100      	movs	r1, #0
   13c44:	4620      	mov	r0, r4
   13c46:	f7ff ff1d 	bl	13a84 <_ZL21base_of_encoded_valuehP15_Unwind_Context>
   13c4a:	462a      	mov	r2, r5
   13c4c:	4643      	mov	r3, r8
   13c4e:	4601      	mov	r1, r0
   13c50:	4620      	mov	r0, r4
   13c52:	f7ff feb7 	bl	139c4 <_ZL28read_encoded_value_with_basehjPKhPj>
   13c56:	f89d 4055 	ldrb.w	r4, [sp, #85]	; 0x55
   13c5a:	4605      	mov	r5, r0
   13c5c:	2100      	movs	r1, #0
   13c5e:	4620      	mov	r0, r4
   13c60:	f7ff ff10 	bl	13a84 <_ZL21base_of_encoded_valuehP15_Unwind_Context>
   13c64:	462a      	mov	r2, r5
   13c66:	4601      	mov	r1, r0
   13c68:	465b      	mov	r3, fp
   13c6a:	4620      	mov	r0, r4
   13c6c:	f7ff feaa 	bl	139c4 <_ZL28read_encoded_value_with_basehjPKhPj>
   13c70:	4604      	mov	r4, r0
   13c72:	2000      	movs	r0, #0
   13c74:	4602      	mov	r2, r0
   13c76:	f814 1b01 	ldrb.w	r1, [r4], #1
   13c7a:	f001 037f 	and.w	r3, r1, #127	; 0x7f
   13c7e:	4093      	lsls	r3, r2
   13c80:	0609      	lsls	r1, r1, #24
   13c82:	ea40 0003 	orr.w	r0, r0, r3
   13c86:	f102 0207 	add.w	r2, r2, #7
   13c8a:	d4f4      	bmi.n	13c76 <__gxx_personality_v0+0x11a>
   13c8c:	9b10      	ldr	r3, [sp, #64]	; 0x40
   13c8e:	9a0d      	ldr	r2, [sp, #52]	; 0x34
   13c90:	4413      	add	r3, r2
   13c92:	429e      	cmp	r6, r3
   13c94:	d231      	bcs.n	13cfa <__gxx_personality_v0+0x19e>
   13c96:	9b03      	ldr	r3, [sp, #12]
   13c98:	07db      	lsls	r3, r3, #31
   13c9a:	d539      	bpl.n	13d10 <__gxx_personality_v0+0x1b4>
   13c9c:	2500      	movs	r5, #0
   13c9e:	9504      	str	r5, [sp, #16]
   13ca0:	2300      	movs	r3, #0
   13ca2:	4619      	mov	r1, r3
   13ca4:	220d      	movs	r2, #13
   13ca6:	f8cd 8000 	str.w	r8, [sp]
   13caa:	4638      	mov	r0, r7
   13cac:	9c0a      	ldr	r4, [sp, #40]	; 0x28
   13cae:	f008 fdcd 	bl	1c84c <_Unwind_VRS_Get>
   13cb2:	9a05      	ldr	r2, [sp, #20]
   13cb4:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   13cb6:	f8c9 202c 	str.w	r2, [r9, #44]	; 0x2c
   13cba:	9a04      	ldr	r2, [sp, #16]
   13cbc:	f8c9 4024 	str.w	r4, [r9, #36]	; 0x24
   13cc0:	f8c9 5028 	str.w	r5, [r9, #40]	; 0x28
   13cc4:	f8c9 2030 	str.w	r2, [r9, #48]	; 0x30
   13cc8:	f8c9 3020 	str.w	r3, [r9, #32]
   13ccc:	2006      	movs	r0, #6
   13cce:	e75b      	b.n	13b88 <__gxx_personality_v0+0x2c>
   13cd0:	2008      	movs	r0, #8
   13cd2:	b017      	add	sp, #92	; 0x5c
   13cd4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   13cd8:	ab10      	add	r3, sp, #64	; 0x40
   13cda:	9300      	str	r3, [sp, #0]
   13cdc:	9306      	str	r3, [sp, #24]
   13cde:	220d      	movs	r2, #13
   13ce0:	4623      	mov	r3, r4
   13ce2:	4621      	mov	r1, r4
   13ce4:	4638      	mov	r0, r7
   13ce6:	f8d9 5020 	ldr.w	r5, [r9, #32]
   13cea:	f008 fdaf 	bl	1c84c <_Unwind_VRS_Get>
   13cee:	9b10      	ldr	r3, [sp, #64]	; 0x40
   13cf0:	429d      	cmp	r5, r3
   13cf2:	d012      	beq.n	13d1a <__gxx_personality_v0+0x1be>
   13cf4:	2302      	movs	r3, #2
   13cf6:	9303      	str	r3, [sp, #12]
   13cf8:	e74f      	b.n	13b9a <__gxx_personality_v0+0x3e>
   13cfa:	9a0e      	ldr	r2, [sp, #56]	; 0x38
   13cfc:	4413      	add	r3, r2
   13cfe:	429e      	cmp	r6, r3
   13d00:	d359      	bcc.n	13db6 <__gxx_personality_v0+0x25a>
   13d02:	9b14      	ldr	r3, [sp, #80]	; 0x50
   13d04:	42a3      	cmp	r3, r4
   13d06:	d88d      	bhi.n	13c24 <__gxx_personality_v0+0xc8>
   13d08:	2500      	movs	r5, #0
   13d0a:	9504      	str	r5, [sp, #16]
   13d0c:	2401      	movs	r4, #1
   13d0e:	e105      	b.n	13f1c <__gxx_personality_v0+0x3c0>
   13d10:	9b03      	ldr	r3, [sp, #12]
   13d12:	071b      	lsls	r3, r3, #28
   13d14:	d54c      	bpl.n	13db0 <__gxx_personality_v0+0x254>
   13d16:	f7ff fa6b 	bl	131f0 <_ZSt9terminatev>
   13d1a:	aa16      	add	r2, sp, #88	; 0x58
   13d1c:	4623      	mov	r3, r4
   13d1e:	f842 9d2c 	str.w	r9, [r2, #-44]!
   13d22:	4621      	mov	r1, r4
   13d24:	9200      	str	r2, [sp, #0]
   13d26:	4638      	mov	r0, r7
   13d28:	220c      	movs	r2, #12
   13d2a:	f008 fdb5 	bl	1c898 <_Unwind_VRS_Set>
   13d2e:	f8d9 3030 	ldr.w	r3, [r9, #48]	; 0x30
   13d32:	9304      	str	r3, [sp, #16]
   13d34:	2b00      	cmp	r3, #0
   13d36:	d03b      	beq.n	13db0 <__gxx_personality_v0+0x254>
   13d38:	f8d9 5028 	ldr.w	r5, [r9, #40]	; 0x28
   13d3c:	f8d9 102c 	ldr.w	r1, [r9, #44]	; 0x2c
   13d40:	2403      	movs	r4, #3
   13d42:	2d00      	cmp	r5, #0
   13d44:	f2c0 8106 	blt.w	13f54 <__gxx_personality_v0+0x3f8>
   13d48:	f10d 0a34 	add.w	sl, sp, #52	; 0x34
   13d4c:	f10d 0838 	add.w	r8, sp, #56	; 0x38
   13d50:	a916      	add	r1, sp, #88	; 0x58
   13d52:	2300      	movs	r3, #0
   13d54:	f841 9d28 	str.w	r9, [r1, #-40]!
   13d58:	461a      	mov	r2, r3
   13d5a:	9100      	str	r1, [sp, #0]
   13d5c:	4638      	mov	r0, r7
   13d5e:	4619      	mov	r1, r3
   13d60:	f008 fd9a 	bl	1c898 <_Unwind_VRS_Set>
   13d64:	2300      	movs	r3, #0
   13d66:	4619      	mov	r1, r3
   13d68:	2201      	movs	r2, #1
   13d6a:	f8cd a000 	str.w	sl, [sp]
   13d6e:	4638      	mov	r0, r7
   13d70:	950d      	str	r5, [sp, #52]	; 0x34
   13d72:	f008 fd91 	bl	1c898 <_Unwind_VRS_Set>
   13d76:	2300      	movs	r3, #0
   13d78:	4619      	mov	r1, r3
   13d7a:	220f      	movs	r2, #15
   13d7c:	f8cd 8000 	str.w	r8, [sp]
   13d80:	4638      	mov	r0, r7
   13d82:	f008 fd63 	bl	1c84c <_Unwind_VRS_Get>
   13d86:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   13d88:	9a04      	ldr	r2, [sp, #16]
   13d8a:	f8cd 8000 	str.w	r8, [sp]
   13d8e:	f003 0501 	and.w	r5, r3, #1
   13d92:	2300      	movs	r3, #0
   13d94:	4315      	orrs	r5, r2
   13d96:	4638      	mov	r0, r7
   13d98:	4619      	mov	r1, r3
   13d9a:	220f      	movs	r2, #15
   13d9c:	950e      	str	r5, [sp, #56]	; 0x38
   13d9e:	f008 fd7b 	bl	1c898 <_Unwind_VRS_Set>
   13da2:	2c02      	cmp	r4, #2
   13da4:	f000 8080 	beq.w	13ea8 <__gxx_personality_v0+0x34c>
   13da8:	2007      	movs	r0, #7
   13daa:	b017      	add	sp, #92	; 0x5c
   13dac:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   13db0:	4648      	mov	r0, r9
   13db2:	f7ff fcfb 	bl	137ac <__cxa_call_terminate>
   13db6:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   13db8:	9304      	str	r3, [sp, #16]
   13dba:	461a      	mov	r2, r3
   13dbc:	2b00      	cmp	r3, #0
   13dbe:	d178      	bne.n	13eb2 <__gxx_personality_v0+0x356>
   13dc0:	2800      	cmp	r0, #0
   13dc2:	f43f aed9 	beq.w	13b78 <__gxx_personality_v0+0x1c>
   13dc6:	9b14      	ldr	r3, [sp, #80]	; 0x50
   13dc8:	9a04      	ldr	r2, [sp, #16]
   13dca:	3801      	subs	r0, #1
   13dcc:	4403      	add	r3, r0
   13dce:	2a00      	cmp	r2, #0
   13dd0:	f43f aed2 	beq.w	13b78 <__gxx_personality_v0+0x1c>
   13dd4:	2b00      	cmp	r3, #0
   13dd6:	d075      	beq.n	13ec4 <__gxx_personality_v0+0x368>
   13dd8:	9a03      	ldr	r2, [sp, #12]
   13dda:	f012 0208 	ands.w	r2, r2, #8
   13dde:	9209      	str	r2, [sp, #36]	; 0x24
   13de0:	f000 80f6 	beq.w	13fd0 <__gxx_personality_v0+0x474>
   13de4:	2147      	movs	r1, #71	; 0x47
   13de6:	224e      	movs	r2, #78	; 0x4e
   13de8:	f889 1000 	strb.w	r1, [r9]
   13dec:	f889 2001 	strb.w	r2, [r9, #1]
   13df0:	2155      	movs	r1, #85	; 0x55
   13df2:	2243      	movs	r2, #67	; 0x43
   13df4:	f889 1002 	strb.w	r1, [r9, #2]
   13df8:	f889 2003 	strb.w	r2, [r9, #3]
   13dfc:	2146      	movs	r1, #70	; 0x46
   13dfe:	224f      	movs	r2, #79	; 0x4f
   13e00:	f889 1004 	strb.w	r1, [r9, #4]
   13e04:	f889 2005 	strb.w	r2, [r9, #5]
   13e08:	2152      	movs	r1, #82	; 0x52
   13e0a:	2200      	movs	r2, #0
   13e0c:	f889 1006 	strb.w	r1, [r9, #6]
   13e10:	f889 2007 	strb.w	r2, [r9, #7]
   13e14:	2200      	movs	r2, #0
   13e16:	9208      	str	r2, [sp, #32]
   13e18:	9707      	str	r7, [sp, #28]
   13e1a:	2500      	movs	r5, #0
   13e1c:	4629      	mov	r1, r5
   13e1e:	e000      	b.n	13e22 <__gxx_personality_v0+0x2c6>
   13e20:	4623      	mov	r3, r4
   13e22:	461c      	mov	r4, r3
   13e24:	f814 0b01 	ldrb.w	r0, [r4], #1
   13e28:	f000 027f 	and.w	r2, r0, #127	; 0x7f
   13e2c:	408a      	lsls	r2, r1
   13e2e:	0606      	lsls	r6, r0, #24
   13e30:	ea45 0502 	orr.w	r5, r5, r2
   13e34:	f101 0107 	add.w	r1, r1, #7
   13e38:	d4f2      	bmi.n	13e20 <__gxx_personality_v0+0x2c4>
   13e3a:	291f      	cmp	r1, #31
   13e3c:	d805      	bhi.n	13e4a <__gxx_personality_v0+0x2ee>
   13e3e:	0642      	lsls	r2, r0, #25
   13e40:	d503      	bpl.n	13e4a <__gxx_personality_v0+0x2ee>
   13e42:	2201      	movs	r2, #1
   13e44:	408a      	lsls	r2, r1
   13e46:	4252      	negs	r2, r2
   13e48:	4315      	orrs	r5, r2
   13e4a:	2600      	movs	r6, #0
   13e4c:	4631      	mov	r1, r6
   13e4e:	f813 0f01 	ldrb.w	r0, [r3, #1]!
   13e52:	f000 027f 	and.w	r2, r0, #127	; 0x7f
   13e56:	408a      	lsls	r2, r1
   13e58:	0607      	lsls	r7, r0, #24
   13e5a:	ea46 0602 	orr.w	r6, r6, r2
   13e5e:	f101 0107 	add.w	r1, r1, #7
   13e62:	d4f4      	bmi.n	13e4e <__gxx_personality_v0+0x2f2>
   13e64:	291f      	cmp	r1, #31
   13e66:	d805      	bhi.n	13e74 <__gxx_personality_v0+0x318>
   13e68:	0640      	lsls	r0, r0, #25
   13e6a:	d503      	bpl.n	13e74 <__gxx_personality_v0+0x318>
   13e6c:	2301      	movs	r3, #1
   13e6e:	408b      	lsls	r3, r1
   13e70:	425b      	negs	r3, r3
   13e72:	431e      	orrs	r6, r3
   13e74:	2d00      	cmp	r5, #0
   13e76:	d05c      	beq.n	13f32 <__gxx_personality_v0+0x3d6>
   13e78:	dd5e      	ble.n	13f38 <__gxx_personality_v0+0x3dc>
   13e7a:	f89d 0054 	ldrb.w	r0, [sp, #84]	; 0x54
   13e7e:	28ff      	cmp	r0, #255	; 0xff
   13e80:	f000 80a4 	beq.w	13fcc <__gxx_personality_v0+0x470>
   13e84:	f000 0307 	and.w	r3, r0, #7
   13e88:	2b04      	cmp	r3, #4
   13e8a:	f63f ae80 	bhi.w	13b8e <__gxx_personality_v0+0x32>
   13e8e:	a201      	add	r2, pc, #4	; (adr r2, 13e94 <__gxx_personality_v0+0x338>)
   13e90:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   13e94:	00013eff 	.word	0x00013eff
   13e98:	00013b8f 	.word	0x00013b8f
   13e9c:	00013f05 	.word	0x00013f05
   13ea0:	00013eff 	.word	0x00013eff
   13ea4:	00013edd 	.word	0x00013edd
   13ea8:	4648      	mov	r0, r9
   13eaa:	f7ff fbf7 	bl	1369c <__cxa_begin_cleanup>
   13eae:	2007      	movs	r0, #7
   13eb0:	e66a      	b.n	13b88 <__gxx_personality_v0+0x2c>
   13eb2:	9b11      	ldr	r3, [sp, #68]	; 0x44
   13eb4:	441a      	add	r2, r3
   13eb6:	9204      	str	r2, [sp, #16]
   13eb8:	2800      	cmp	r0, #0
   13eba:	d184      	bne.n	13dc6 <__gxx_personality_v0+0x26a>
   13ebc:	9b04      	ldr	r3, [sp, #16]
   13ebe:	2b00      	cmp	r3, #0
   13ec0:	f43f ae5a 	beq.w	13b78 <__gxx_personality_v0+0x1c>
   13ec4:	9b03      	ldr	r3, [sp, #12]
   13ec6:	f013 0301 	ands.w	r3, r3, #1
   13eca:	f47f ae55 	bne.w	13b78 <__gxx_personality_v0+0x1c>
   13ece:	9a03      	ldr	r2, [sp, #12]
   13ed0:	f012 0508 	ands.w	r5, r2, #8
   13ed4:	f040 8097 	bne.w	14006 <__gxx_personality_v0+0x4aa>
   13ed8:	2402      	movs	r4, #2
   13eda:	e739      	b.n	13d50 <__gxx_personality_v0+0x1f4>
   13edc:	00eb      	lsls	r3, r5, #3
   13ede:	425b      	negs	r3, r3
   13ee0:	9a13      	ldr	r2, [sp, #76]	; 0x4c
   13ee2:	9912      	ldr	r1, [sp, #72]	; 0x48
   13ee4:	441a      	add	r2, r3
   13ee6:	4643      	mov	r3, r8
   13ee8:	f7ff fd6c 	bl	139c4 <_ZL28read_encoded_value_with_basehjPKhPj>
   13eec:	990e      	ldr	r1, [sp, #56]	; 0x38
   13eee:	b199      	cbz	r1, 13f18 <__gxx_personality_v0+0x3bc>
   13ef0:	f1b9 0f00 	cmp.w	r9, #0
   13ef4:	d109      	bne.n	13f0a <__gxx_personality_v0+0x3ae>
   13ef6:	2e00      	cmp	r6, #0
   13ef8:	d077      	beq.n	13fea <__gxx_personality_v0+0x48e>
   13efa:	19a3      	adds	r3, r4, r6
   13efc:	e78d      	b.n	13e1a <__gxx_personality_v0+0x2be>
   13efe:	00ab      	lsls	r3, r5, #2
   13f00:	425b      	negs	r3, r3
   13f02:	e7ed      	b.n	13ee0 <__gxx_personality_v0+0x384>
   13f04:	006b      	lsls	r3, r5, #1
   13f06:	425b      	negs	r3, r3
   13f08:	e7ea      	b.n	13ee0 <__gxx_personality_v0+0x384>
   13f0a:	ab0a      	add	r3, sp, #40	; 0x28
   13f0c:	2200      	movs	r2, #0
   13f0e:	4648      	mov	r0, r9
   13f10:	f7ff fb68 	bl	135e4 <__cxa_type_match>
   13f14:	2800      	cmp	r0, #0
   13f16:	d0ee      	beq.n	13ef6 <__gxx_personality_v0+0x39a>
   13f18:	9f07      	ldr	r7, [sp, #28]
   13f1a:	2403      	movs	r4, #3
   13f1c:	9b03      	ldr	r3, [sp, #12]
   13f1e:	07da      	lsls	r2, r3, #31
   13f20:	d460      	bmi.n	13fe4 <__gxx_personality_v0+0x488>
   13f22:	9b03      	ldr	r3, [sp, #12]
   13f24:	0719      	lsls	r1, r3, #28
   13f26:	d466      	bmi.n	13ff6 <__gxx_personality_v0+0x49a>
   13f28:	2c01      	cmp	r4, #1
   13f2a:	f43f af41 	beq.w	13db0 <__gxx_personality_v0+0x254>
   13f2e:	9905      	ldr	r1, [sp, #20]
   13f30:	e707      	b.n	13d42 <__gxx_personality_v0+0x1e6>
   13f32:	2301      	movs	r3, #1
   13f34:	9308      	str	r3, [sp, #32]
   13f36:	e7de      	b.n	13ef6 <__gxx_personality_v0+0x39a>
   13f38:	f1b9 0f00 	cmp.w	r9, #0
   13f3c:	d001      	beq.n	13f42 <__gxx_personality_v0+0x3e6>
   13f3e:	9b09      	ldr	r3, [sp, #36]	; 0x24
   13f40:	b35b      	cbz	r3, 13f9a <__gxx_personality_v0+0x43e>
   13f42:	1c6b      	adds	r3, r5, #1
   13f44:	ebc3 7383 	rsb	r3, r3, r3, lsl #30
   13f48:	9a13      	ldr	r2, [sp, #76]	; 0x4c
   13f4a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   13f4e:	2b00      	cmp	r3, #0
   13f50:	d1d1      	bne.n	13ef6 <__gxx_personality_v0+0x39a>
   13f52:	e7e1      	b.n	13f18 <__gxx_personality_v0+0x3bc>
   13f54:	9a06      	ldr	r2, [sp, #24]
   13f56:	4638      	mov	r0, r7
   13f58:	f7ff fdb4 	bl	13ac4 <_ZL17parse_lsda_headerP15_Unwind_ContextPKhP16lsda_header_info>
   13f5c:	4639      	mov	r1, r7
   13f5e:	f89d 0054 	ldrb.w	r0, [sp, #84]	; 0x54
   13f62:	f7ff fd8f 	bl	13a84 <_ZL21base_of_encoded_valuehP15_Unwind_Context>
   13f66:	00aa      	lsls	r2, r5, #2
   13f68:	f082 0203 	eor.w	r2, r2, #3
   13f6c:	43d2      	mvns	r2, r2
   13f6e:	9e13      	ldr	r6, [sp, #76]	; 0x4c
   13f70:	9012      	str	r0, [sp, #72]	; 0x48
   13f72:	58b3      	ldr	r3, [r6, r2]
   13f74:	4416      	add	r6, r2
   13f76:	b133      	cbz	r3, 13f86 <__gxx_personality_v0+0x42a>
   13f78:	4632      	mov	r2, r6
   13f7a:	2300      	movs	r3, #0
   13f7c:	f852 1f04 	ldr.w	r1, [r2, #4]!
   13f80:	3301      	adds	r3, #1
   13f82:	2900      	cmp	r1, #0
   13f84:	d1fa      	bne.n	13f7c <__gxx_personality_v0+0x420>
   13f86:	2204      	movs	r2, #4
   13f88:	f8c9 3028 	str.w	r3, [r9, #40]	; 0x28
   13f8c:	f8c9 002c 	str.w	r0, [r9, #44]	; 0x2c
   13f90:	f8c9 6034 	str.w	r6, [r9, #52]	; 0x34
   13f94:	f8c9 2030 	str.w	r2, [r9, #48]	; 0x30
   13f98:	e6d6      	b.n	13d48 <__gxx_personality_v0+0x1ec>
   13f9a:	1c6f      	adds	r7, r5, #1
   13f9c:	ebc7 7387 	rsb	r3, r7, r7, lsl #30
   13fa0:	9f13      	ldr	r7, [sp, #76]	; 0x4c
   13fa2:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   13fa4:	f857 1023 	ldr.w	r1, [r7, r3, lsl #2]
   13fa8:	920f      	str	r2, [sp, #60]	; 0x3c
   13faa:	eb07 0783 	add.w	r7, r7, r3, lsl #2
   13fae:	b921      	cbnz	r1, 13fba <__gxx_personality_v0+0x45e>
   13fb0:	e7b2      	b.n	13f18 <__gxx_personality_v0+0x3bc>
   13fb2:	f857 1f04 	ldr.w	r1, [r7, #4]!
   13fb6:	2900      	cmp	r1, #0
   13fb8:	d0ae      	beq.n	13f18 <__gxx_personality_v0+0x3bc>
   13fba:	4439      	add	r1, r7
   13fbc:	465b      	mov	r3, fp
   13fbe:	2200      	movs	r2, #0
   13fc0:	4648      	mov	r0, r9
   13fc2:	f7ff fb0f 	bl	135e4 <__cxa_type_match>
   13fc6:	2800      	cmp	r0, #0
   13fc8:	d0f3      	beq.n	13fb2 <__gxx_personality_v0+0x456>
   13fca:	e794      	b.n	13ef6 <__gxx_personality_v0+0x39a>
   13fcc:	2300      	movs	r3, #0
   13fce:	e787      	b.n	13ee0 <__gxx_personality_v0+0x384>
   13fd0:	f899 2007 	ldrb.w	r2, [r9, #7]
   13fd4:	2a01      	cmp	r2, #1
   13fd6:	bf0c      	ite	eq
   13fd8:	f859 2c20 	ldreq.w	r2, [r9, #-32]
   13fdc:	f109 0258 	addne.w	r2, r9, #88	; 0x58
   13fe0:	920a      	str	r2, [sp, #40]	; 0x28
   13fe2:	e717      	b.n	13e14 <__gxx_personality_v0+0x2b8>
   13fe4:	f10d 0838 	add.w	r8, sp, #56	; 0x38
   13fe8:	e65a      	b.n	13ca0 <__gxx_personality_v0+0x144>
   13fea:	9b08      	ldr	r3, [sp, #32]
   13fec:	9f07      	ldr	r7, [sp, #28]
   13fee:	2b00      	cmp	r3, #0
   13ff0:	f47f af68 	bne.w	13ec4 <__gxx_personality_v0+0x368>
   13ff4:	e5c0      	b.n	13b78 <__gxx_personality_v0+0x1c>
   13ff6:	2c01      	cmp	r4, #1
   13ff8:	f43f ae8d 	beq.w	13d16 <__gxx_personality_v0+0x1ba>
   13ffc:	2d00      	cmp	r5, #0
   13ffe:	f6bf aea3 	bge.w	13d48 <__gxx_personality_v0+0x1ec>
   14002:	f7ff f903 	bl	1320c <_ZSt10unexpectedv>
   14006:	461d      	mov	r5, r3
   14008:	2402      	movs	r4, #2
   1400a:	e6a1      	b.n	13d50 <__gxx_personality_v0+0x1f4>
   1400c:	f7ff fc4e 	bl	138ac <__cxa_begin_catch>
   14010:	e681      	b.n	13d16 <__gxx_personality_v0+0x1ba>
   14012:	bf00      	nop

00014014 <_ZN9__gnu_cxx27__verbose_terminate_handlerEv>:
   14014:	b570      	push	{r4, r5, r6, lr}
   14016:	4b3c      	ldr	r3, [pc, #240]	; (14108 <_ZN9__gnu_cxx27__verbose_terminate_handlerEv+0xf4>)
   14018:	781a      	ldrb	r2, [r3, #0]
   1401a:	b082      	sub	sp, #8
   1401c:	2a00      	cmp	r2, #0
   1401e:	d135      	bne.n	1408c <_ZN9__gnu_cxx27__verbose_terminate_handlerEv+0x78>
   14020:	2401      	movs	r4, #1
   14022:	701c      	strb	r4, [r3, #0]
   14024:	f006 fbd2 	bl	1a7cc <__cxa_current_exception_type>
   14028:	2800      	cmp	r0, #0
   1402a:	d05b      	beq.n	140e4 <_ZN9__gnu_cxx27__verbose_terminate_handlerEv+0xd0>
   1402c:	6844      	ldr	r4, [r0, #4]
   1402e:	4d37      	ldr	r5, [pc, #220]	; (1410c <_ZN9__gnu_cxx27__verbose_terminate_handlerEv+0xf8>)
   14030:	7823      	ldrb	r3, [r4, #0]
   14032:	2b2a      	cmp	r3, #42	; 0x2a
   14034:	ab02      	add	r3, sp, #8
   14036:	f04f 32ff 	mov.w	r2, #4294967295
   1403a:	bf08      	it	eq
   1403c:	3401      	addeq	r4, #1
   1403e:	f843 2d04 	str.w	r2, [r3, #-4]!
   14042:	2200      	movs	r2, #0
   14044:	4611      	mov	r1, r2
   14046:	4620      	mov	r0, r4
   14048:	f006 fb52 	bl	1a6f0 <__cxa_demangle>
   1404c:	682b      	ldr	r3, [r5, #0]
   1404e:	4606      	mov	r6, r0
   14050:	68db      	ldr	r3, [r3, #12]
   14052:	482f      	ldr	r0, [pc, #188]	; (14110 <_ZN9__gnu_cxx27__verbose_terminate_handlerEv+0xfc>)
   14054:	2230      	movs	r2, #48	; 0x30
   14056:	2101      	movs	r1, #1
   14058:	f009 fbfc 	bl	1d854 <fwrite>
   1405c:	9b01      	ldr	r3, [sp, #4]
   1405e:	b17b      	cbz	r3, 14080 <_ZN9__gnu_cxx27__verbose_terminate_handlerEv+0x6c>
   14060:	682b      	ldr	r3, [r5, #0]
   14062:	4620      	mov	r0, r4
   14064:	68d9      	ldr	r1, [r3, #12]
   14066:	f009 fa1f 	bl	1d4a8 <fputs>
   1406a:	682b      	ldr	r3, [r5, #0]
   1406c:	4829      	ldr	r0, [pc, #164]	; (14114 <_ZN9__gnu_cxx27__verbose_terminate_handlerEv+0x100>)
   1406e:	68db      	ldr	r3, [r3, #12]
   14070:	2202      	movs	r2, #2
   14072:	2101      	movs	r1, #1
   14074:	f009 fbee 	bl	1d854 <fwrite>
   14078:	9b01      	ldr	r3, [sp, #4]
   1407a:	b18b      	cbz	r3, 140a0 <_ZN9__gnu_cxx27__verbose_terminate_handlerEv+0x8c>
   1407c:	f7ff f940 	bl	13300 <__cxa_rethrow>
   14080:	682b      	ldr	r3, [r5, #0]
   14082:	4630      	mov	r0, r6
   14084:	68d9      	ldr	r1, [r3, #12]
   14086:	f009 fa0f 	bl	1d4a8 <fputs>
   1408a:	e7ee      	b.n	1406a <_ZN9__gnu_cxx27__verbose_terminate_handlerEv+0x56>
   1408c:	4b1f      	ldr	r3, [pc, #124]	; (1410c <_ZN9__gnu_cxx27__verbose_terminate_handlerEv+0xf8>)
   1408e:	4822      	ldr	r0, [pc, #136]	; (14118 <_ZN9__gnu_cxx27__verbose_terminate_handlerEv+0x104>)
   14090:	681b      	ldr	r3, [r3, #0]
   14092:	221d      	movs	r2, #29
   14094:	68db      	ldr	r3, [r3, #12]
   14096:	2101      	movs	r1, #1
   14098:	f009 fbdc 	bl	1d854 <fwrite>
   1409c:	f009 f986 	bl	1d3ac <abort>
   140a0:	4630      	mov	r0, r6
   140a2:	f009 fc39 	bl	1d918 <free>
   140a6:	e7e9      	b.n	1407c <_ZN9__gnu_cxx27__verbose_terminate_handlerEv+0x68>
   140a8:	2901      	cmp	r1, #1
   140aa:	460c      	mov	r4, r1
   140ac:	d127      	bne.n	140fe <_ZN9__gnu_cxx27__verbose_terminate_handlerEv+0xea>
   140ae:	f7ff fbfd 	bl	138ac <__cxa_begin_catch>
   140b2:	6803      	ldr	r3, [r0, #0]
   140b4:	689b      	ldr	r3, [r3, #8]
   140b6:	4798      	blx	r3
   140b8:	682b      	ldr	r3, [r5, #0]
   140ba:	4606      	mov	r6, r0
   140bc:	68db      	ldr	r3, [r3, #12]
   140be:	4817      	ldr	r0, [pc, #92]	; (1411c <_ZN9__gnu_cxx27__verbose_terminate_handlerEv+0x108>)
   140c0:	4621      	mov	r1, r4
   140c2:	220b      	movs	r2, #11
   140c4:	f009 fbc6 	bl	1d854 <fwrite>
   140c8:	682b      	ldr	r3, [r5, #0]
   140ca:	4630      	mov	r0, r6
   140cc:	68d9      	ldr	r1, [r3, #12]
   140ce:	f009 f9eb 	bl	1d4a8 <fputs>
   140d2:	682b      	ldr	r3, [r5, #0]
   140d4:	200a      	movs	r0, #10
   140d6:	68d9      	ldr	r1, [r3, #12]
   140d8:	f009 f976 	bl	1d3c8 <fputc>
   140dc:	f7ff fc24 	bl	13928 <__cxa_end_catch>
   140e0:	f009 f964 	bl	1d3ac <abort>
   140e4:	4b09      	ldr	r3, [pc, #36]	; (1410c <_ZN9__gnu_cxx27__verbose_terminate_handlerEv+0xf8>)
   140e6:	480e      	ldr	r0, [pc, #56]	; (14120 <_ZN9__gnu_cxx27__verbose_terminate_handlerEv+0x10c>)
   140e8:	681b      	ldr	r3, [r3, #0]
   140ea:	4621      	mov	r1, r4
   140ec:	68db      	ldr	r3, [r3, #12]
   140ee:	222d      	movs	r2, #45	; 0x2d
   140f0:	f009 fbb0 	bl	1d854 <fwrite>
   140f4:	e7f4      	b.n	140e0 <_ZN9__gnu_cxx27__verbose_terminate_handlerEv+0xcc>
   140f6:	f7ff fc17 	bl	13928 <__cxa_end_catch>
   140fa:	f7ff fa6d 	bl	135d8 <__cxa_end_cleanup>
   140fe:	f7ff fbd5 	bl	138ac <__cxa_begin_catch>
   14102:	f7ff fc11 	bl	13928 <__cxa_end_catch>
   14106:	e7eb      	b.n	140e0 <_ZN9__gnu_cxx27__verbose_terminate_handlerEv+0xcc>
   14108:	200022a4 	.word	0x200022a4
   1410c:	20000100 	.word	0x20000100
   14110:	00023714 	.word	0x00023714
   14114:	00023748 	.word	0x00023748
   14118:	000236f4 	.word	0x000236f4
   1411c:	0002377c 	.word	0x0002377c
   14120:	0002374c 	.word	0x0002374c

00014124 <d_make_comp>:
   14124:	b470      	push	{r4, r5, r6}
   14126:	1e4c      	subs	r4, r1, #1
   14128:	2c4c      	cmp	r4, #76	; 0x4c
   1412a:	d82d      	bhi.n	14188 <d_make_comp+0x64>
   1412c:	e8df f004 	tbb	[pc, r4]
   14130:	3c3c3c3c 	.word	0x3c3c3c3c
   14134:	2c2c2c2c 	.word	0x2c2c2c2c
   14138:	273c2727 	.word	0x273c2727
   1413c:	27272727 	.word	0x27272727
   14140:	27272727 	.word	0x27272727
   14144:	2c272727 	.word	0x2c272727
   14148:	28282828 	.word	0x28282828
   1414c:	28282828 	.word	0x28282828
   14150:	2727273c 	.word	0x2727273c
   14154:	272c2727 	.word	0x272c2727
   14158:	2c3c3e28 	.word	0x2c3c3e28
   1415c:	3e28283c 	.word	0x3e28283c
   14160:	27272c2c 	.word	0x27272c2c
   14164:	3c3c3c27 	.word	0x3c3c3c27
   14168:	3c273c3c 	.word	0x3c273c3c
   1416c:	2c3c273c 	.word	0x2c3c273c
   14170:	2727272c 	.word	0x2727272c
   14174:	272c2c2c 	.word	0x272c2c2c
   14178:	283c2727 	.word	0x283c2727
   1417c:	3c          	.byte	0x3c
   1417d:	00          	.byte	0x00
   1417e:	b11a      	cbz	r2, 14188 <d_make_comp+0x64>
   14180:	6944      	ldr	r4, [r0, #20]
   14182:	6985      	ldr	r5, [r0, #24]
   14184:	42ac      	cmp	r4, r5
   14186:	db02      	blt.n	1418e <d_make_comp+0x6a>
   14188:	2000      	movs	r0, #0
   1418a:	bc70      	pop	{r4, r5, r6}
   1418c:	4770      	bx	lr
   1418e:	eb04 0544 	add.w	r5, r4, r4, lsl #1
   14192:	6906      	ldr	r6, [r0, #16]
   14194:	00ad      	lsls	r5, r5, #2
   14196:	3401      	adds	r4, #1
   14198:	6144      	str	r4, [r0, #20]
   1419a:	1970      	adds	r0, r6, r5
   1419c:	d0f5      	beq.n	1418a <d_make_comp+0x66>
   1419e:	5571      	strb	r1, [r6, r5]
   141a0:	6042      	str	r2, [r0, #4]
   141a2:	6083      	str	r3, [r0, #8]
   141a4:	bc70      	pop	{r4, r5, r6}
   141a6:	4770      	bx	lr
   141a8:	2a00      	cmp	r2, #0
   141aa:	d0ed      	beq.n	14188 <d_make_comp+0x64>
   141ac:	2b00      	cmp	r3, #0
   141ae:	d0eb      	beq.n	14188 <d_make_comp+0x64>
   141b0:	6944      	ldr	r4, [r0, #20]
   141b2:	6985      	ldr	r5, [r0, #24]
   141b4:	42ac      	cmp	r4, r5
   141b6:	dae7      	bge.n	14188 <d_make_comp+0x64>
   141b8:	e7e9      	b.n	1418e <d_make_comp+0x6a>
   141ba:	bf00      	nop

000141bc <d_cv_qualifiers>:
   141bc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   141c0:	68c3      	ldr	r3, [r0, #12]
   141c2:	f1b2 0a00 	subs.w	sl, r2, #0
   141c6:	4604      	mov	r4, r0
   141c8:	460e      	mov	r6, r1
   141ca:	781a      	ldrb	r2, [r3, #0]
   141cc:	bf15      	itete	ne
   141ce:	f04f 091e 	movne.w	r9, #30
   141d2:	f04f 091b 	moveq.w	r9, #27
   141d6:	f04f 081d 	movne.w	r8, #29
   141da:	f04f 081a 	moveq.w	r8, #26
   141de:	bf14      	ite	ne
   141e0:	271c      	movne	r7, #28
   141e2:	2719      	moveq	r7, #25
   141e4:	460d      	mov	r5, r1
   141e6:	e018      	b.n	1421a <d_cv_qualifiers+0x5e>
   141e8:	2a56      	cmp	r2, #86	; 0x56
   141ea:	d01f      	beq.n	1422c <d_cv_qualifiers+0x70>
   141ec:	2a4b      	cmp	r2, #75	; 0x4b
   141ee:	d024      	beq.n	1423a <d_cv_qualifiers+0x7e>
   141f0:	2a44      	cmp	r2, #68	; 0x44
   141f2:	d12d      	bne.n	14250 <d_cv_qualifiers+0x94>
   141f4:	785a      	ldrb	r2, [r3, #1]
   141f6:	2a78      	cmp	r2, #120	; 0x78
   141f8:	d127      	bne.n	1424a <d_cv_qualifiers+0x8e>
   141fa:	6b22      	ldr	r2, [r4, #48]	; 0x30
   141fc:	3302      	adds	r3, #2
   141fe:	3211      	adds	r2, #17
   14200:	60e3      	str	r3, [r4, #12]
   14202:	6322      	str	r2, [r4, #48]	; 0x30
   14204:	214c      	movs	r1, #76	; 0x4c
   14206:	2300      	movs	r3, #0
   14208:	461a      	mov	r2, r3
   1420a:	4620      	mov	r0, r4
   1420c:	f7ff ff8a 	bl	14124 <d_make_comp>
   14210:	6028      	str	r0, [r5, #0]
   14212:	b1c8      	cbz	r0, 14248 <d_cv_qualifiers+0x8c>
   14214:	68e3      	ldr	r3, [r4, #12]
   14216:	781a      	ldrb	r2, [r3, #0]
   14218:	1d05      	adds	r5, r0, #4
   1421a:	2a72      	cmp	r2, #114	; 0x72
   1421c:	d1e4      	bne.n	141e8 <d_cv_qualifiers+0x2c>
   1421e:	6b22      	ldr	r2, [r4, #48]	; 0x30
   14220:	3301      	adds	r3, #1
   14222:	3209      	adds	r2, #9
   14224:	60e3      	str	r3, [r4, #12]
   14226:	6322      	str	r2, [r4, #48]	; 0x30
   14228:	4639      	mov	r1, r7
   1422a:	e7ec      	b.n	14206 <d_cv_qualifiers+0x4a>
   1422c:	6b22      	ldr	r2, [r4, #48]	; 0x30
   1422e:	3301      	adds	r3, #1
   14230:	3209      	adds	r2, #9
   14232:	60e3      	str	r3, [r4, #12]
   14234:	6322      	str	r2, [r4, #48]	; 0x30
   14236:	4641      	mov	r1, r8
   14238:	e7e5      	b.n	14206 <d_cv_qualifiers+0x4a>
   1423a:	6b22      	ldr	r2, [r4, #48]	; 0x30
   1423c:	3301      	adds	r3, #1
   1423e:	3206      	adds	r2, #6
   14240:	60e3      	str	r3, [r4, #12]
   14242:	6322      	str	r2, [r4, #48]	; 0x30
   14244:	4649      	mov	r1, r9
   14246:	e7de      	b.n	14206 <d_cv_qualifiers+0x4a>
   14248:	4605      	mov	r5, r0
   1424a:	4628      	mov	r0, r5
   1424c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   14250:	f1ba 0f00 	cmp.w	sl, #0
   14254:	d1f9      	bne.n	1424a <d_cv_qualifiers+0x8e>
   14256:	2a46      	cmp	r2, #70	; 0x46
   14258:	d1f7      	bne.n	1424a <d_cv_qualifiers+0x8e>
   1425a:	42b5      	cmp	r5, r6
   1425c:	d0f5      	beq.n	1424a <d_cv_qualifiers+0x8e>
   1425e:	201d      	movs	r0, #29
   14260:	211e      	movs	r1, #30
   14262:	221c      	movs	r2, #28
   14264:	e007      	b.n	14276 <d_cv_qualifiers+0xba>
   14266:	2b1b      	cmp	r3, #27
   14268:	d00b      	beq.n	14282 <d_cv_qualifiers+0xc6>
   1426a:	2b19      	cmp	r3, #25
   1426c:	d100      	bne.n	14270 <d_cv_qualifiers+0xb4>
   1426e:	7032      	strb	r2, [r6, #0]
   14270:	3604      	adds	r6, #4
   14272:	42b5      	cmp	r5, r6
   14274:	d0e9      	beq.n	1424a <d_cv_qualifiers+0x8e>
   14276:	6836      	ldr	r6, [r6, #0]
   14278:	7833      	ldrb	r3, [r6, #0]
   1427a:	2b1a      	cmp	r3, #26
   1427c:	d1f3      	bne.n	14266 <d_cv_qualifiers+0xaa>
   1427e:	7030      	strb	r0, [r6, #0]
   14280:	e7f6      	b.n	14270 <d_cv_qualifiers+0xb4>
   14282:	7031      	strb	r1, [r6, #0]
   14284:	e7f4      	b.n	14270 <d_cv_qualifiers+0xb4>
   14286:	bf00      	nop

00014288 <d_ref_qualifier>:
   14288:	b410      	push	{r4}
   1428a:	68c3      	ldr	r3, [r0, #12]
   1428c:	781c      	ldrb	r4, [r3, #0]
   1428e:	2c52      	cmp	r4, #82	; 0x52
   14290:	460a      	mov	r2, r1
   14292:	d00f      	beq.n	142b4 <d_ref_qualifier+0x2c>
   14294:	2c4f      	cmp	r4, #79	; 0x4f
   14296:	d003      	beq.n	142a0 <d_ref_qualifier+0x18>
   14298:	4608      	mov	r0, r1
   1429a:	f85d 4b04 	ldr.w	r4, [sp], #4
   1429e:	4770      	bx	lr
   142a0:	6b01      	ldr	r1, [r0, #48]	; 0x30
   142a2:	3103      	adds	r1, #3
   142a4:	6301      	str	r1, [r0, #48]	; 0x30
   142a6:	2120      	movs	r1, #32
   142a8:	3301      	adds	r3, #1
   142aa:	60c3      	str	r3, [r0, #12]
   142ac:	f85d 4b04 	ldr.w	r4, [sp], #4
   142b0:	2300      	movs	r3, #0
   142b2:	e737      	b.n	14124 <d_make_comp>
   142b4:	6b01      	ldr	r1, [r0, #48]	; 0x30
   142b6:	3102      	adds	r1, #2
   142b8:	6301      	str	r1, [r0, #48]	; 0x30
   142ba:	211f      	movs	r1, #31
   142bc:	e7f4      	b.n	142a8 <d_ref_qualifier+0x20>
   142be:	bf00      	nop

000142c0 <d_count_templates_scopes>:
   142c0:	2a00      	cmp	r2, #0
   142c2:	d04d      	beq.n	14360 <d_count_templates_scopes+0xa0>
   142c4:	b570      	push	{r4, r5, r6, lr}
   142c6:	4605      	mov	r5, r0
   142c8:	460e      	mov	r6, r1
   142ca:	4614      	mov	r4, r2
   142cc:	7823      	ldrb	r3, [r4, #0]
   142ce:	3b01      	subs	r3, #1
   142d0:	2b4c      	cmp	r3, #76	; 0x4c
   142d2:	d82b      	bhi.n	1432c <d_count_templates_scopes+0x6c>
   142d4:	e8df f003 	tbb	[pc, r3]
   142d8:	3f363636 	.word	0x3f363636
   142dc:	27272a2a 	.word	0x27272a2a
   142e0:	36363636 	.word	0x36363636
   142e4:	36363636 	.word	0x36363636
   142e8:	36363636 	.word	0x36363636
   142ec:	2a363636 	.word	0x2a363636
   142f0:	36363636 	.word	0x36363636
   142f4:	36363636 	.word	0x36363636
   142f8:	2f2f3636 	.word	0x2f2f3636
   142fc:	362a3636 	.word	0x362a3636
   14300:	2b363636 	.word	0x2b363636
   14304:	36363636 	.word	0x36363636
   14308:	3636272a 	.word	0x3636272a
   1430c:	36363636 	.word	0x36363636
   14310:	36363636 	.word	0x36363636
   14314:	2a363636 	.word	0x2a363636
   14318:	2b2b362a 	.word	0x2b2b362a
   1431c:	362a2b2b 	.word	0x362a2b2b
   14320:	36363636 	.word	0x36363636
   14324:	36          	.byte	0x36
   14325:	00          	.byte	0x00
   14326:	68a4      	ldr	r4, [r4, #8]
   14328:	2c00      	cmp	r4, #0
   1432a:	d1cf      	bne.n	142cc <d_count_templates_scopes+0xc>
   1432c:	bd70      	pop	{r4, r5, r6, pc}
   1432e:	6864      	ldr	r4, [r4, #4]
   14330:	2c00      	cmp	r4, #0
   14332:	d1cb      	bne.n	142cc <d_count_templates_scopes+0xc>
   14334:	e7fa      	b.n	1432c <d_count_templates_scopes+0x6c>
   14336:	6862      	ldr	r2, [r4, #4]
   14338:	7813      	ldrb	r3, [r2, #0]
   1433a:	2b05      	cmp	r3, #5
   1433c:	d103      	bne.n	14346 <d_count_templates_scopes+0x86>
   1433e:	6833      	ldr	r3, [r6, #0]
   14340:	3301      	adds	r3, #1
   14342:	6033      	str	r3, [r6, #0]
   14344:	6862      	ldr	r2, [r4, #4]
   14346:	4631      	mov	r1, r6
   14348:	4628      	mov	r0, r5
   1434a:	f7ff ffb9 	bl	142c0 <d_count_templates_scopes>
   1434e:	68a4      	ldr	r4, [r4, #8]
   14350:	2c00      	cmp	r4, #0
   14352:	d1bb      	bne.n	142cc <d_count_templates_scopes+0xc>
   14354:	e7ea      	b.n	1432c <d_count_templates_scopes+0x6c>
   14356:	682b      	ldr	r3, [r5, #0]
   14358:	3301      	adds	r3, #1
   1435a:	602b      	str	r3, [r5, #0]
   1435c:	6862      	ldr	r2, [r4, #4]
   1435e:	e7f2      	b.n	14346 <d_count_templates_scopes+0x86>
   14360:	4770      	bx	lr
   14362:	bf00      	nop

00014364 <d_append_buffer>:
   14364:	b37a      	cbz	r2, 143c6 <d_append_buffer+0x62>
   14366:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1436a:	460d      	mov	r5, r1
   1436c:	4604      	mov	r4, r0
   1436e:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
   14372:	18af      	adds	r7, r5, r2
   14374:	f04f 0800 	mov.w	r8, #0
   14378:	e009      	b.n	1438e <d_append_buffer+0x2a>
   1437a:	460b      	mov	r3, r1
   1437c:	42bd      	cmp	r5, r7
   1437e:	f101 0101 	add.w	r1, r1, #1
   14382:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
   14386:	54e6      	strb	r6, [r4, r3]
   14388:	f884 6104 	strb.w	r6, [r4, #260]	; 0x104
   1438c:	d019      	beq.n	143c2 <d_append_buffer+0x5e>
   1438e:	29ff      	cmp	r1, #255	; 0xff
   14390:	f815 6b01 	ldrb.w	r6, [r5], #1
   14394:	d1f1      	bne.n	1437a <d_append_buffer+0x16>
   14396:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   1439a:	f884 80ff 	strb.w	r8, [r4, #255]	; 0xff
   1439e:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
   143a2:	4620      	mov	r0, r4
   143a4:	4798      	blx	r3
   143a6:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   143aa:	3301      	adds	r3, #1
   143ac:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
   143b0:	2300      	movs	r3, #0
   143b2:	2101      	movs	r1, #1
   143b4:	42bd      	cmp	r5, r7
   143b6:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
   143ba:	54e6      	strb	r6, [r4, r3]
   143bc:	f884 6104 	strb.w	r6, [r4, #260]	; 0x104
   143c0:	d1e5      	bne.n	1438e <d_append_buffer+0x2a>
   143c2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   143c6:	4770      	bx	lr

000143c8 <d_number.isra.0>:
   143c8:	b470      	push	{r4, r5, r6}
   143ca:	6802      	ldr	r2, [r0, #0]
   143cc:	7811      	ldrb	r1, [r2, #0]
   143ce:	296e      	cmp	r1, #110	; 0x6e
   143d0:	d018      	beq.n	14404 <d_number.isra.0+0x3c>
   143d2:	f1a1 0330 	sub.w	r3, r1, #48	; 0x30
   143d6:	2b09      	cmp	r3, #9
   143d8:	d81e      	bhi.n	14418 <d_number.isra.0+0x50>
   143da:	2600      	movs	r6, #0
   143dc:	2300      	movs	r3, #0
   143de:	3201      	adds	r2, #1
   143e0:	eb03 0383 	add.w	r3, r3, r3, lsl #2
   143e4:	6002      	str	r2, [r0, #0]
   143e6:	eb01 0443 	add.w	r4, r1, r3, lsl #1
   143ea:	7811      	ldrb	r1, [r2, #0]
   143ec:	f1a1 0530 	sub.w	r5, r1, #48	; 0x30
   143f0:	2d09      	cmp	r5, #9
   143f2:	f1a4 0330 	sub.w	r3, r4, #48	; 0x30
   143f6:	d9f2      	bls.n	143de <d_number.isra.0+0x16>
   143f8:	b10e      	cbz	r6, 143fe <d_number.isra.0+0x36>
   143fa:	f1c4 0330 	rsb	r3, r4, #48	; 0x30
   143fe:	4618      	mov	r0, r3
   14400:	bc70      	pop	{r4, r5, r6}
   14402:	4770      	bx	lr
   14404:	1c53      	adds	r3, r2, #1
   14406:	6003      	str	r3, [r0, #0]
   14408:	7851      	ldrb	r1, [r2, #1]
   1440a:	f1a1 0230 	sub.w	r2, r1, #48	; 0x30
   1440e:	2a09      	cmp	r2, #9
   14410:	d802      	bhi.n	14418 <d_number.isra.0+0x50>
   14412:	461a      	mov	r2, r3
   14414:	2601      	movs	r6, #1
   14416:	e7e1      	b.n	143dc <d_number.isra.0+0x14>
   14418:	2300      	movs	r3, #0
   1441a:	e7f0      	b.n	143fe <d_number.isra.0+0x36>

0001441c <d_number_component>:
   1441c:	6943      	ldr	r3, [r0, #20]
   1441e:	6982      	ldr	r2, [r0, #24]
   14420:	4293      	cmp	r3, r2
   14422:	b510      	push	{r4, lr}
   14424:	da0f      	bge.n	14446 <d_number_component+0x2a>
   14426:	eb03 0243 	add.w	r2, r3, r3, lsl #1
   1442a:	6901      	ldr	r1, [r0, #16]
   1442c:	0092      	lsls	r2, r2, #2
   1442e:	3301      	adds	r3, #1
   14430:	188c      	adds	r4, r1, r2
   14432:	6143      	str	r3, [r0, #20]
   14434:	d005      	beq.n	14442 <d_number_component+0x26>
   14436:	2341      	movs	r3, #65	; 0x41
   14438:	300c      	adds	r0, #12
   1443a:	548b      	strb	r3, [r1, r2]
   1443c:	f7ff ffc4 	bl	143c8 <d_number.isra.0>
   14440:	6060      	str	r0, [r4, #4]
   14442:	4620      	mov	r0, r4
   14444:	bd10      	pop	{r4, pc}
   14446:	2400      	movs	r4, #0
   14448:	4620      	mov	r0, r4
   1444a:	bd10      	pop	{r4, pc}

0001444c <d_compact_number>:
   1444c:	b510      	push	{r4, lr}
   1444e:	68c3      	ldr	r3, [r0, #12]
   14450:	781a      	ldrb	r2, [r3, #0]
   14452:	2a5f      	cmp	r2, #95	; 0x5f
   14454:	4604      	mov	r4, r0
   14456:	d00d      	beq.n	14474 <d_compact_number+0x28>
   14458:	2a6e      	cmp	r2, #110	; 0x6e
   1445a:	d00f      	beq.n	1447c <d_compact_number+0x30>
   1445c:	300c      	adds	r0, #12
   1445e:	f7ff ffb3 	bl	143c8 <d_number.isra.0>
   14462:	3001      	adds	r0, #1
   14464:	d40a      	bmi.n	1447c <d_compact_number+0x30>
   14466:	68e3      	ldr	r3, [r4, #12]
   14468:	781a      	ldrb	r2, [r3, #0]
   1446a:	2a5f      	cmp	r2, #95	; 0x5f
   1446c:	d106      	bne.n	1447c <d_compact_number+0x30>
   1446e:	3301      	adds	r3, #1
   14470:	60e3      	str	r3, [r4, #12]
   14472:	bd10      	pop	{r4, pc}
   14474:	3301      	adds	r3, #1
   14476:	2000      	movs	r0, #0
   14478:	60e3      	str	r3, [r4, #12]
   1447a:	bd10      	pop	{r4, pc}
   1447c:	f04f 30ff 	mov.w	r0, #4294967295
   14480:	bd10      	pop	{r4, pc}
   14482:	bf00      	nop

00014484 <d_template_param>:
   14484:	b538      	push	{r3, r4, r5, lr}
   14486:	68c3      	ldr	r3, [r0, #12]
   14488:	781a      	ldrb	r2, [r3, #0]
   1448a:	2a54      	cmp	r2, #84	; 0x54
   1448c:	d001      	beq.n	14492 <d_template_param+0xe>
   1448e:	2000      	movs	r0, #0
   14490:	bd38      	pop	{r3, r4, r5, pc}
   14492:	3301      	adds	r3, #1
   14494:	60c3      	str	r3, [r0, #12]
   14496:	4604      	mov	r4, r0
   14498:	f7ff ffd8 	bl	1444c <d_compact_number>
   1449c:	1e05      	subs	r5, r0, #0
   1449e:	dbf6      	blt.n	1448e <d_template_param+0xa>
   144a0:	6aa2      	ldr	r2, [r4, #40]	; 0x28
   144a2:	6963      	ldr	r3, [r4, #20]
   144a4:	69a1      	ldr	r1, [r4, #24]
   144a6:	3201      	adds	r2, #1
   144a8:	428b      	cmp	r3, r1
   144aa:	62a2      	str	r2, [r4, #40]	; 0x28
   144ac:	daef      	bge.n	1448e <d_template_param+0xa>
   144ae:	eb03 0243 	add.w	r2, r3, r3, lsl #1
   144b2:	6921      	ldr	r1, [r4, #16]
   144b4:	0092      	lsls	r2, r2, #2
   144b6:	3301      	adds	r3, #1
   144b8:	1888      	adds	r0, r1, r2
   144ba:	6163      	str	r3, [r4, #20]
   144bc:	d002      	beq.n	144c4 <d_template_param+0x40>
   144be:	2305      	movs	r3, #5
   144c0:	548b      	strb	r3, [r1, r2]
   144c2:	6045      	str	r5, [r0, #4]
   144c4:	bd38      	pop	{r3, r4, r5, pc}
   144c6:	bf00      	nop

000144c8 <d_source_name>:
   144c8:	b570      	push	{r4, r5, r6, lr}
   144ca:	4604      	mov	r4, r0
   144cc:	300c      	adds	r0, #12
   144ce:	f7ff ff7b 	bl	143c8 <d_number.isra.0>
   144d2:	1e06      	subs	r6, r0, #0
   144d4:	dd4d      	ble.n	14572 <d_source_name+0xaa>
   144d6:	68e5      	ldr	r5, [r4, #12]
   144d8:	6863      	ldr	r3, [r4, #4]
   144da:	1b5b      	subs	r3, r3, r5
   144dc:	429e      	cmp	r6, r3
   144de:	dc2b      	bgt.n	14538 <d_source_name+0x70>
   144e0:	68a2      	ldr	r2, [r4, #8]
   144e2:	19ab      	adds	r3, r5, r6
   144e4:	0752      	lsls	r2, r2, #29
   144e6:	60e3      	str	r3, [r4, #12]
   144e8:	d504      	bpl.n	144f4 <d_source_name+0x2c>
   144ea:	5daa      	ldrb	r2, [r5, r6]
   144ec:	2a24      	cmp	r2, #36	; 0x24
   144ee:	bf04      	itt	eq
   144f0:	3301      	addeq	r3, #1
   144f2:	60e3      	streq	r3, [r4, #12]
   144f4:	2e09      	cmp	r6, #9
   144f6:	dd0c      	ble.n	14512 <d_source_name+0x4a>
   144f8:	2208      	movs	r2, #8
   144fa:	491f      	ldr	r1, [pc, #124]	; (14578 <d_source_name+0xb0>)
   144fc:	4628      	mov	r0, r5
   144fe:	f009 fd2f 	bl	1df60 <memcmp>
   14502:	b930      	cbnz	r0, 14512 <d_source_name+0x4a>
   14504:	7a2b      	ldrb	r3, [r5, #8]
   14506:	2b2e      	cmp	r3, #46	; 0x2e
   14508:	d019      	beq.n	1453e <d_source_name+0x76>
   1450a:	2b5f      	cmp	r3, #95	; 0x5f
   1450c:	d017      	beq.n	1453e <d_source_name+0x76>
   1450e:	2b24      	cmp	r3, #36	; 0x24
   14510:	d015      	beq.n	1453e <d_source_name+0x76>
   14512:	6963      	ldr	r3, [r4, #20]
   14514:	69a2      	ldr	r2, [r4, #24]
   14516:	4293      	cmp	r3, r2
   14518:	da0e      	bge.n	14538 <d_source_name+0x70>
   1451a:	eb03 0243 	add.w	r2, r3, r3, lsl #1
   1451e:	6921      	ldr	r1, [r4, #16]
   14520:	0092      	lsls	r2, r2, #2
   14522:	3301      	adds	r3, #1
   14524:	1888      	adds	r0, r1, r2
   14526:	6163      	str	r3, [r4, #20]
   14528:	d006      	beq.n	14538 <d_source_name+0x70>
   1452a:	b12d      	cbz	r5, 14538 <d_source_name+0x70>
   1452c:	2300      	movs	r3, #0
   1452e:	548b      	strb	r3, [r1, r2]
   14530:	6045      	str	r5, [r0, #4]
   14532:	6086      	str	r6, [r0, #8]
   14534:	62e0      	str	r0, [r4, #44]	; 0x2c
   14536:	bd70      	pop	{r4, r5, r6, pc}
   14538:	2000      	movs	r0, #0
   1453a:	62e0      	str	r0, [r4, #44]	; 0x2c
   1453c:	bd70      	pop	{r4, r5, r6, pc}
   1453e:	7a6b      	ldrb	r3, [r5, #9]
   14540:	2b4e      	cmp	r3, #78	; 0x4e
   14542:	d1e6      	bne.n	14512 <d_source_name+0x4a>
   14544:	6b23      	ldr	r3, [r4, #48]	; 0x30
   14546:	6962      	ldr	r2, [r4, #20]
   14548:	69a1      	ldr	r1, [r4, #24]
   1454a:	3316      	adds	r3, #22
   1454c:	1b9e      	subs	r6, r3, r6
   1454e:	428a      	cmp	r2, r1
   14550:	6326      	str	r6, [r4, #48]	; 0x30
   14552:	daf1      	bge.n	14538 <d_source_name+0x70>
   14554:	eb02 0342 	add.w	r3, r2, r2, lsl #1
   14558:	6921      	ldr	r1, [r4, #16]
   1455a:	009b      	lsls	r3, r3, #2
   1455c:	3201      	adds	r2, #1
   1455e:	18c8      	adds	r0, r1, r3
   14560:	6162      	str	r2, [r4, #20]
   14562:	d0ea      	beq.n	1453a <d_source_name+0x72>
   14564:	2500      	movs	r5, #0
   14566:	54cd      	strb	r5, [r1, r3]
   14568:	4a04      	ldr	r2, [pc, #16]	; (1457c <d_source_name+0xb4>)
   1456a:	6042      	str	r2, [r0, #4]
   1456c:	2315      	movs	r3, #21
   1456e:	6083      	str	r3, [r0, #8]
   14570:	e7e3      	b.n	1453a <d_source_name+0x72>
   14572:	2000      	movs	r0, #0
   14574:	bd70      	pop	{r4, r5, r6, pc}
   14576:	bf00      	nop
   14578:	00023f20 	.word	0x00023f20
   1457c:	00023f2c 	.word	0x00023f2c

00014580 <d_abi_tags>:
   14580:	b570      	push	{r4, r5, r6, lr}
   14582:	68c3      	ldr	r3, [r0, #12]
   14584:	6ac6      	ldr	r6, [r0, #44]	; 0x2c
   14586:	781a      	ldrb	r2, [r3, #0]
   14588:	2a42      	cmp	r2, #66	; 0x42
   1458a:	4604      	mov	r4, r0
   1458c:	460d      	mov	r5, r1
   1458e:	d10f      	bne.n	145b0 <d_abi_tags+0x30>
   14590:	3301      	adds	r3, #1
   14592:	60e3      	str	r3, [r4, #12]
   14594:	4620      	mov	r0, r4
   14596:	f7ff ff97 	bl	144c8 <d_source_name>
   1459a:	462a      	mov	r2, r5
   1459c:	4603      	mov	r3, r0
   1459e:	214b      	movs	r1, #75	; 0x4b
   145a0:	4620      	mov	r0, r4
   145a2:	f7ff fdbf 	bl	14124 <d_make_comp>
   145a6:	68e3      	ldr	r3, [r4, #12]
   145a8:	781a      	ldrb	r2, [r3, #0]
   145aa:	2a42      	cmp	r2, #66	; 0x42
   145ac:	4605      	mov	r5, r0
   145ae:	d0ef      	beq.n	14590 <d_abi_tags+0x10>
   145b0:	62e6      	str	r6, [r4, #44]	; 0x2c
   145b2:	4628      	mov	r0, r5
   145b4:	bd70      	pop	{r4, r5, r6, pc}
   145b6:	bf00      	nop

000145b8 <d_substitution>:
   145b8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   145bc:	4605      	mov	r5, r0
   145be:	68c0      	ldr	r0, [r0, #12]
   145c0:	7803      	ldrb	r3, [r0, #0]
   145c2:	2b53      	cmp	r3, #83	; 0x53
   145c4:	d002      	beq.n	145cc <d_substitution+0x14>
   145c6:	2000      	movs	r0, #0
   145c8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   145cc:	1c43      	adds	r3, r0, #1
   145ce:	60eb      	str	r3, [r5, #12]
   145d0:	7842      	ldrb	r2, [r0, #1]
   145d2:	b1a2      	cbz	r2, 145fe <d_substitution+0x46>
   145d4:	1c83      	adds	r3, r0, #2
   145d6:	60eb      	str	r3, [r5, #12]
   145d8:	7842      	ldrb	r2, [r0, #1]
   145da:	2a5f      	cmp	r2, #95	; 0x5f
   145dc:	d15a      	bne.n	14694 <d_substitution+0xdc>
   145de:	2300      	movs	r3, #0
   145e0:	6a2a      	ldr	r2, [r5, #32]
   145e2:	4293      	cmp	r3, r2
   145e4:	d2ef      	bcs.n	145c6 <d_substitution+0xe>
   145e6:	6aaa      	ldr	r2, [r5, #40]	; 0x28
   145e8:	69e9      	ldr	r1, [r5, #28]
   145ea:	3201      	adds	r2, #1
   145ec:	62aa      	str	r2, [r5, #40]	; 0x28
   145ee:	f851 0023 	ldr.w	r0, [r1, r3, lsl #2]
   145f2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   145f6:	f1a2 0341 	sub.w	r3, r2, #65	; 0x41
   145fa:	2b19      	cmp	r3, #25
   145fc:	d94f      	bls.n	1469e <d_substitution+0xe6>
   145fe:	68ab      	ldr	r3, [r5, #8]
   14600:	f003 0308 	and.w	r3, r3, #8
   14604:	2b00      	cmp	r3, #0
   14606:	bf14      	ite	ne
   14608:	2401      	movne	r4, #1
   1460a:	2400      	moveq	r4, #0
   1460c:	d101      	bne.n	14612 <d_substitution+0x5a>
   1460e:	2900      	cmp	r1, #0
   14610:	d169      	bne.n	146e6 <d_substitution+0x12e>
   14612:	4b46      	ldr	r3, [pc, #280]	; (1472c <d_substitution+0x174>)
   14614:	2174      	movs	r1, #116	; 0x74
   14616:	f103 00c4 	add.w	r0, r3, #196	; 0xc4
   1461a:	e003      	b.n	14624 <d_substitution+0x6c>
   1461c:	331c      	adds	r3, #28
   1461e:	4283      	cmp	r3, r0
   14620:	d2d1      	bcs.n	145c6 <d_substitution+0xe>
   14622:	7819      	ldrb	r1, [r3, #0]
   14624:	428a      	cmp	r2, r1
   14626:	d1f9      	bne.n	1461c <d_substitution+0x64>
   14628:	695e      	ldr	r6, [r3, #20]
   1462a:	2e00      	cmp	r6, #0
   1462c:	d07b      	beq.n	14726 <d_substitution+0x16e>
   1462e:	696a      	ldr	r2, [r5, #20]
   14630:	69a9      	ldr	r1, [r5, #24]
   14632:	428a      	cmp	r2, r1
   14634:	da63      	bge.n	146fe <d_substitution+0x146>
   14636:	eb02 0742 	add.w	r7, r2, r2, lsl #1
   1463a:	f8d5 e010 	ldr.w	lr, [r5, #16]
   1463e:	f8d3 8018 	ldr.w	r8, [r3, #24]
   14642:	00bf      	lsls	r7, r7, #2
   14644:	3201      	adds	r2, #1
   14646:	eb1e 0007 	adds.w	r0, lr, r7
   1464a:	616a      	str	r2, [r5, #20]
   1464c:	d006      	beq.n	1465c <d_substitution+0xa4>
   1464e:	f04f 0c18 	mov.w	ip, #24
   14652:	f80e c007 	strb.w	ip, [lr, r7]
   14656:	6046      	str	r6, [r0, #4]
   14658:	f8c0 8008 	str.w	r8, [r0, #8]
   1465c:	62e8      	str	r0, [r5, #44]	; 0x2c
   1465e:	2c00      	cmp	r4, #0
   14660:	d04a      	beq.n	146f8 <d_substitution+0x140>
   14662:	68de      	ldr	r6, [r3, #12]
   14664:	691c      	ldr	r4, [r3, #16]
   14666:	6b2b      	ldr	r3, [r5, #48]	; 0x30
   14668:	4291      	cmp	r1, r2
   1466a:	4423      	add	r3, r4
   1466c:	632b      	str	r3, [r5, #48]	; 0x30
   1466e:	dd41      	ble.n	146f4 <d_substitution+0x13c>
   14670:	eb02 0342 	add.w	r3, r2, r2, lsl #1
   14674:	6929      	ldr	r1, [r5, #16]
   14676:	009b      	lsls	r3, r3, #2
   14678:	3201      	adds	r2, #1
   1467a:	18c8      	adds	r0, r1, r3
   1467c:	616a      	str	r2, [r5, #20]
   1467e:	d003      	beq.n	14688 <d_substitution+0xd0>
   14680:	2218      	movs	r2, #24
   14682:	54ca      	strb	r2, [r1, r3]
   14684:	6046      	str	r6, [r0, #4]
   14686:	6084      	str	r4, [r0, #8]
   14688:	68eb      	ldr	r3, [r5, #12]
   1468a:	781b      	ldrb	r3, [r3, #0]
   1468c:	2b42      	cmp	r3, #66	; 0x42
   1468e:	d038      	beq.n	14702 <d_substitution+0x14a>
   14690:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   14694:	f1a2 0430 	sub.w	r4, r2, #48	; 0x30
   14698:	b2e3      	uxtb	r3, r4
   1469a:	2b09      	cmp	r3, #9
   1469c:	d8ab      	bhi.n	145f6 <d_substitution+0x3e>
   1469e:	2100      	movs	r1, #0
   146a0:	e00d      	b.n	146be <d_substitution+0x106>
   146a2:	3b30      	subs	r3, #48	; 0x30
   146a4:	4299      	cmp	r1, r3
   146a6:	d88e      	bhi.n	145c6 <d_substitution+0xe>
   146a8:	68e9      	ldr	r1, [r5, #12]
   146aa:	780a      	ldrb	r2, [r1, #0]
   146ac:	1c48      	adds	r0, r1, #1
   146ae:	b11a      	cbz	r2, 146b8 <d_substitution+0x100>
   146b0:	60e8      	str	r0, [r5, #12]
   146b2:	780a      	ldrb	r2, [r1, #0]
   146b4:	2a5f      	cmp	r2, #95	; 0x5f
   146b6:	d014      	beq.n	146e2 <d_substitution+0x12a>
   146b8:	f1a2 0430 	sub.w	r4, r2, #48	; 0x30
   146bc:	4619      	mov	r1, r3
   146be:	b2e4      	uxtb	r4, r4
   146c0:	eb01 03c1 	add.w	r3, r1, r1, lsl #3
   146c4:	2c09      	cmp	r4, #9
   146c6:	f1a2 0041 	sub.w	r0, r2, #65	; 0x41
   146ca:	eb02 0383 	add.w	r3, r2, r3, lsl #2
   146ce:	d9e8      	bls.n	146a2 <d_substitution+0xea>
   146d0:	2819      	cmp	r0, #25
   146d2:	f63f af78 	bhi.w	145c6 <d_substitution+0xe>
   146d6:	eb01 03c1 	add.w	r3, r1, r1, lsl #3
   146da:	eb02 0383 	add.w	r3, r2, r3, lsl #2
   146de:	3b37      	subs	r3, #55	; 0x37
   146e0:	e7e0      	b.n	146a4 <d_substitution+0xec>
   146e2:	3301      	adds	r3, #1
   146e4:	e77c      	b.n	145e0 <d_substitution+0x28>
   146e6:	68eb      	ldr	r3, [r5, #12]
   146e8:	781b      	ldrb	r3, [r3, #0]
   146ea:	3b43      	subs	r3, #67	; 0x43
   146ec:	2b01      	cmp	r3, #1
   146ee:	bf98      	it	ls
   146f0:	2401      	movls	r4, #1
   146f2:	e78e      	b.n	14612 <d_substitution+0x5a>
   146f4:	2000      	movs	r0, #0
   146f6:	e7c7      	b.n	14688 <d_substitution+0xd0>
   146f8:	685e      	ldr	r6, [r3, #4]
   146fa:	689c      	ldr	r4, [r3, #8]
   146fc:	e7b3      	b.n	14666 <d_substitution+0xae>
   146fe:	2000      	movs	r0, #0
   14700:	e7ac      	b.n	1465c <d_substitution+0xa4>
   14702:	4601      	mov	r1, r0
   14704:	4628      	mov	r0, r5
   14706:	f7ff ff3b 	bl	14580 <d_abi_tags>
   1470a:	2800      	cmp	r0, #0
   1470c:	f43f af5b 	beq.w	145c6 <d_substitution+0xe>
   14710:	6a2b      	ldr	r3, [r5, #32]
   14712:	6a6a      	ldr	r2, [r5, #36]	; 0x24
   14714:	4293      	cmp	r3, r2
   14716:	dabb      	bge.n	14690 <d_substitution+0xd8>
   14718:	69e9      	ldr	r1, [r5, #28]
   1471a:	1c5a      	adds	r2, r3, #1
   1471c:	f841 0023 	str.w	r0, [r1, r3, lsl #2]
   14720:	622a      	str	r2, [r5, #32]
   14722:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   14726:	69a9      	ldr	r1, [r5, #24]
   14728:	696a      	ldr	r2, [r5, #20]
   1472a:	e798      	b.n	1465e <d_substitution+0xa6>
   1472c:	00023788 	.word	0x00023788

00014730 <d_call_offset>:
   14730:	b538      	push	{r3, r4, r5, lr}
   14732:	4604      	mov	r4, r0
   14734:	b929      	cbnz	r1, 14742 <d_call_offset+0x12>
   14736:	68c3      	ldr	r3, [r0, #12]
   14738:	781a      	ldrb	r2, [r3, #0]
   1473a:	b132      	cbz	r2, 1474a <d_call_offset+0x1a>
   1473c:	1c5a      	adds	r2, r3, #1
   1473e:	60c2      	str	r2, [r0, #12]
   14740:	7819      	ldrb	r1, [r3, #0]
   14742:	2968      	cmp	r1, #104	; 0x68
   14744:	d019      	beq.n	1477a <d_call_offset+0x4a>
   14746:	2976      	cmp	r1, #118	; 0x76
   14748:	d001      	beq.n	1474e <d_call_offset+0x1e>
   1474a:	2000      	movs	r0, #0
   1474c:	bd38      	pop	{r3, r4, r5, pc}
   1474e:	f104 050c 	add.w	r5, r4, #12
   14752:	4628      	mov	r0, r5
   14754:	f7ff fe38 	bl	143c8 <d_number.isra.0>
   14758:	68e3      	ldr	r3, [r4, #12]
   1475a:	781a      	ldrb	r2, [r3, #0]
   1475c:	2a5f      	cmp	r2, #95	; 0x5f
   1475e:	d1f4      	bne.n	1474a <d_call_offset+0x1a>
   14760:	3301      	adds	r3, #1
   14762:	60e3      	str	r3, [r4, #12]
   14764:	4628      	mov	r0, r5
   14766:	f7ff fe2f 	bl	143c8 <d_number.isra.0>
   1476a:	68e3      	ldr	r3, [r4, #12]
   1476c:	781a      	ldrb	r2, [r3, #0]
   1476e:	2a5f      	cmp	r2, #95	; 0x5f
   14770:	d1eb      	bne.n	1474a <d_call_offset+0x1a>
   14772:	3301      	adds	r3, #1
   14774:	60e3      	str	r3, [r4, #12]
   14776:	2001      	movs	r0, #1
   14778:	bd38      	pop	{r3, r4, r5, pc}
   1477a:	f104 000c 	add.w	r0, r4, #12
   1477e:	f7ff fe23 	bl	143c8 <d_number.isra.0>
   14782:	e7f2      	b.n	1476a <d_call_offset+0x3a>

00014784 <d_lookup_template_argument.isra.6>:
   14784:	f8d0 3110 	ldr.w	r3, [r0, #272]	; 0x110
   14788:	b19b      	cbz	r3, 147b2 <d_lookup_template_argument.isra.6+0x2e>
   1478a:	680a      	ldr	r2, [r1, #0]
   1478c:	685b      	ldr	r3, [r3, #4]
   1478e:	2a00      	cmp	r2, #0
   14790:	689b      	ldr	r3, [r3, #8]
   14792:	db09      	blt.n	147a8 <d_lookup_template_argument.isra.6+0x24>
   14794:	b923      	cbnz	r3, 147a0 <d_lookup_template_argument.isra.6+0x1c>
   14796:	e007      	b.n	147a8 <d_lookup_template_argument.isra.6+0x24>
   14798:	b142      	cbz	r2, 147ac <d_lookup_template_argument.isra.6+0x28>
   1479a:	689b      	ldr	r3, [r3, #8]
   1479c:	3a01      	subs	r2, #1
   1479e:	b11b      	cbz	r3, 147a8 <d_lookup_template_argument.isra.6+0x24>
   147a0:	7819      	ldrb	r1, [r3, #0]
   147a2:	292f      	cmp	r1, #47	; 0x2f
   147a4:	d0f8      	beq.n	14798 <d_lookup_template_argument.isra.6+0x14>
   147a6:	2300      	movs	r3, #0
   147a8:	4618      	mov	r0, r3
   147aa:	4770      	bx	lr
   147ac:	685b      	ldr	r3, [r3, #4]
   147ae:	4618      	mov	r0, r3
   147b0:	4770      	bx	lr
   147b2:	2201      	movs	r2, #1
   147b4:	f8c0 2118 	str.w	r2, [r0, #280]	; 0x118
   147b8:	e7f6      	b.n	147a8 <d_lookup_template_argument.isra.6+0x24>
   147ba:	bf00      	nop

000147bc <d_find_pack>:
   147bc:	2900      	cmp	r1, #0
   147be:	d041      	beq.n	14844 <d_find_pack+0x88>
   147c0:	b538      	push	{r3, r4, r5, lr}
   147c2:	4605      	mov	r5, r0
   147c4:	460c      	mov	r4, r1
   147c6:	7823      	ldrb	r3, [r4, #0]
   147c8:	2b4b      	cmp	r3, #75	; 0x4b
   147ca:	d827      	bhi.n	1481c <d_find_pack+0x60>
   147cc:	e8df f003 	tbb	[pc, r3]
   147d0:	2626262e 	.word	0x2626262e
   147d4:	2b2e3026 	.word	0x2b2e3026
   147d8:	2626262b 	.word	0x2626262b
   147dc:	26262626 	.word	0x26262626
   147e0:	26262626 	.word	0x26262626
   147e4:	26262626 	.word	0x26262626
   147e8:	2626262e 	.word	0x2626262e
   147ec:	26262626 	.word	0x26262626
   147f0:	26262626 	.word	0x26262626
   147f4:	2e262626 	.word	0x2e262626
   147f8:	26262626 	.word	0x26262626
   147fc:	2626262e 	.word	0x2626262e
   14800:	262b2e26 	.word	0x262b2e26
   14804:	26262626 	.word	0x26262626
   14808:	26262626 	.word	0x26262626
   1480c:	26262626 	.word	0x26262626
   14810:	26262e2e 	.word	0x26262e2e
   14814:	2e2e2e26 	.word	0x2e2e2e26
   14818:	2e2e2626 	.word	0x2e2e2626
   1481c:	6861      	ldr	r1, [r4, #4]
   1481e:	4628      	mov	r0, r5
   14820:	f7ff ffcc 	bl	147bc <d_find_pack>
   14824:	b918      	cbnz	r0, 1482e <d_find_pack+0x72>
   14826:	68a4      	ldr	r4, [r4, #8]
   14828:	2c00      	cmp	r4, #0
   1482a:	d1cc      	bne.n	147c6 <d_find_pack+0xa>
   1482c:	2000      	movs	r0, #0
   1482e:	bd38      	pop	{r3, r4, r5, pc}
   14830:	1d21      	adds	r1, r4, #4
   14832:	4628      	mov	r0, r5
   14834:	f7ff ffa6 	bl	14784 <d_lookup_template_argument.isra.6>
   14838:	2800      	cmp	r0, #0
   1483a:	d0f7      	beq.n	1482c <d_find_pack+0x70>
   1483c:	7803      	ldrb	r3, [r0, #0]
   1483e:	2b2f      	cmp	r3, #47	; 0x2f
   14840:	d1f4      	bne.n	1482c <d_find_pack+0x70>
   14842:	bd38      	pop	{r3, r4, r5, pc}
   14844:	2000      	movs	r0, #0
   14846:	4770      	bx	lr

00014848 <d_growable_string_callback_adapter>:
   14848:	b5f0      	push	{r4, r5, r6, r7, lr}
   1484a:	4615      	mov	r5, r2
   1484c:	6852      	ldr	r2, [r2, #4]
   1484e:	68ac      	ldr	r4, [r5, #8]
   14850:	1c4b      	adds	r3, r1, #1
   14852:	4413      	add	r3, r2
   14854:	42a3      	cmp	r3, r4
   14856:	b083      	sub	sp, #12
   14858:	460e      	mov	r6, r1
   1485a:	4607      	mov	r7, r0
   1485c:	d813      	bhi.n	14886 <d_growable_string_callback_adapter+0x3e>
   1485e:	68ec      	ldr	r4, [r5, #12]
   14860:	b10c      	cbz	r4, 14866 <d_growable_string_callback_adapter+0x1e>
   14862:	b003      	add	sp, #12
   14864:	bdf0      	pop	{r4, r5, r6, r7, pc}
   14866:	e895 0009 	ldmia.w	r5, {r0, r3}
   1486a:	4632      	mov	r2, r6
   1486c:	4639      	mov	r1, r7
   1486e:	4418      	add	r0, r3
   14870:	f009 fba6 	bl	1dfc0 <memcpy>
   14874:	682b      	ldr	r3, [r5, #0]
   14876:	686a      	ldr	r2, [r5, #4]
   14878:	4433      	add	r3, r6
   1487a:	549c      	strb	r4, [r3, r2]
   1487c:	686b      	ldr	r3, [r5, #4]
   1487e:	441e      	add	r6, r3
   14880:	606e      	str	r6, [r5, #4]
   14882:	b003      	add	sp, #12
   14884:	bdf0      	pop	{r4, r5, r6, r7, pc}
   14886:	68ea      	ldr	r2, [r5, #12]
   14888:	2a00      	cmp	r2, #0
   1488a:	d1ea      	bne.n	14862 <d_growable_string_callback_adapter+0x1a>
   1488c:	b91c      	cbnz	r4, 14896 <d_growable_string_callback_adapter+0x4e>
   1488e:	2b02      	cmp	r3, #2
   14890:	f04f 0402 	mov.w	r4, #2
   14894:	d902      	bls.n	1489c <d_growable_string_callback_adapter+0x54>
   14896:	0064      	lsls	r4, r4, #1
   14898:	42a3      	cmp	r3, r4
   1489a:	d8fc      	bhi.n	14896 <d_growable_string_callback_adapter+0x4e>
   1489c:	4621      	mov	r1, r4
   1489e:	6828      	ldr	r0, [r5, #0]
   148a0:	f009 fd1e 	bl	1e2e0 <realloc>
   148a4:	b110      	cbz	r0, 148ac <d_growable_string_callback_adapter+0x64>
   148a6:	6028      	str	r0, [r5, #0]
   148a8:	60ac      	str	r4, [r5, #8]
   148aa:	e7d8      	b.n	1485e <d_growable_string_callback_adapter+0x16>
   148ac:	9001      	str	r0, [sp, #4]
   148ae:	6828      	ldr	r0, [r5, #0]
   148b0:	f009 f832 	bl	1d918 <free>
   148b4:	9b01      	ldr	r3, [sp, #4]
   148b6:	602b      	str	r3, [r5, #0]
   148b8:	2201      	movs	r2, #1
   148ba:	606b      	str	r3, [r5, #4]
   148bc:	60ab      	str	r3, [r5, #8]
   148be:	60ea      	str	r2, [r5, #12]
   148c0:	e7cf      	b.n	14862 <d_growable_string_callback_adapter+0x1a>
   148c2:	bf00      	nop

000148c4 <d_append_num>:
   148c4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   148c8:	b088      	sub	sp, #32
   148ca:	460a      	mov	r2, r1
   148cc:	4604      	mov	r4, r0
   148ce:	491b      	ldr	r1, [pc, #108]	; (1493c <d_append_num+0x78>)
   148d0:	a801      	add	r0, sp, #4
   148d2:	f009 ff13 	bl	1e6fc <sprintf>
   148d6:	a801      	add	r0, sp, #4
   148d8:	f00a f8b2 	bl	1ea40 <strlen>
   148dc:	b350      	cbz	r0, 14934 <d_append_num+0x70>
   148de:	ad01      	add	r5, sp, #4
   148e0:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
   148e4:	182f      	adds	r7, r5, r0
   148e6:	f04f 0800 	mov.w	r8, #0
   148ea:	e009      	b.n	14900 <d_append_num+0x3c>
   148ec:	460b      	mov	r3, r1
   148ee:	42bd      	cmp	r5, r7
   148f0:	f101 0101 	add.w	r1, r1, #1
   148f4:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
   148f8:	54e6      	strb	r6, [r4, r3]
   148fa:	f884 6104 	strb.w	r6, [r4, #260]	; 0x104
   148fe:	d019      	beq.n	14934 <d_append_num+0x70>
   14900:	29ff      	cmp	r1, #255	; 0xff
   14902:	f815 6b01 	ldrb.w	r6, [r5], #1
   14906:	d1f1      	bne.n	148ec <d_append_num+0x28>
   14908:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   1490c:	f884 80ff 	strb.w	r8, [r4, #255]	; 0xff
   14910:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
   14914:	4620      	mov	r0, r4
   14916:	4798      	blx	r3
   14918:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   1491c:	3301      	adds	r3, #1
   1491e:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
   14922:	2300      	movs	r3, #0
   14924:	2101      	movs	r1, #1
   14926:	42bd      	cmp	r5, r7
   14928:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
   1492c:	54e6      	strb	r6, [r4, r3]
   1492e:	f884 6104 	strb.w	r6, [r4, #260]	; 0x104
   14932:	d1e5      	bne.n	14900 <d_append_num+0x3c>
   14934:	b008      	add	sp, #32
   14936:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   1493a:	bf00      	nop
   1493c:	00023f44 	.word	0x00023f44

00014940 <d_exprlist>:
   14940:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   14944:	68c3      	ldr	r3, [r0, #12]
   14946:	781d      	ldrb	r5, [r3, #0]
   14948:	b083      	sub	sp, #12
   1494a:	2200      	movs	r2, #0
   1494c:	428d      	cmp	r5, r1
   1494e:	4604      	mov	r4, r0
   14950:	9201      	str	r2, [sp, #4]
   14952:	f000 81c6 	beq.w	14ce2 <d_exprlist+0x3a2>
   14956:	4688      	mov	r8, r1
   14958:	f8df 949c 	ldr.w	r9, [pc, #1180]	; 14df8 <d_exprlist+0x4b8>
   1495c:	ae01      	add	r6, sp, #4
   1495e:	e023      	b.n	149a8 <d_exprlist+0x68>
   14960:	2a66      	cmp	r2, #102	; 0x66
   14962:	d04c      	beq.n	149fe <d_exprlist+0xbe>
   14964:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
   14968:	2909      	cmp	r1, #9
   1496a:	f200 8217 	bhi.w	14d9c <d_exprlist+0x45c>
   1496e:	4620      	mov	r0, r4
   14970:	f001 fb10 	bl	15f94 <d_unqualified_name>
   14974:	4605      	mov	r5, r0
   14976:	2800      	cmp	r0, #0
   14978:	f000 8170 	beq.w	14c5c <d_exprlist+0x31c>
   1497c:	68e3      	ldr	r3, [r4, #12]
   1497e:	781b      	ldrb	r3, [r3, #0]
   14980:	2b49      	cmp	r3, #73	; 0x49
   14982:	f000 8092 	beq.w	14aaa <d_exprlist+0x16a>
   14986:	6367      	str	r7, [r4, #52]	; 0x34
   14988:	462a      	mov	r2, r5
   1498a:	2300      	movs	r3, #0
   1498c:	212e      	movs	r1, #46	; 0x2e
   1498e:	4620      	mov	r0, r4
   14990:	f7ff fbc8 	bl	14124 <d_make_comp>
   14994:	6030      	str	r0, [r6, #0]
   14996:	2800      	cmp	r0, #0
   14998:	d05b      	beq.n	14a52 <d_exprlist+0x112>
   1499a:	68e3      	ldr	r3, [r4, #12]
   1499c:	781a      	ldrb	r2, [r3, #0]
   1499e:	4542      	cmp	r2, r8
   149a0:	f100 0608 	add.w	r6, r0, #8
   149a4:	f000 8107 	beq.w	14bb6 <d_exprlist+0x276>
   149a8:	2501      	movs	r5, #1
   149aa:	6b67      	ldr	r7, [r4, #52]	; 0x34
   149ac:	6365      	str	r5, [r4, #52]	; 0x34
   149ae:	781a      	ldrb	r2, [r3, #0]
   149b0:	2a4c      	cmp	r2, #76	; 0x4c
   149b2:	d047      	beq.n	14a44 <d_exprlist+0x104>
   149b4:	2a54      	cmp	r2, #84	; 0x54
   149b6:	d051      	beq.n	14a5c <d_exprlist+0x11c>
   149b8:	2a73      	cmp	r2, #115	; 0x73
   149ba:	d1d1      	bne.n	14960 <d_exprlist+0x20>
   149bc:	785a      	ldrb	r2, [r3, #1]
   149be:	2a72      	cmp	r2, #114	; 0x72
   149c0:	f000 80e2 	beq.w	14b88 <d_exprlist+0x248>
   149c4:	2a70      	cmp	r2, #112	; 0x70
   149c6:	f000 80fd 	beq.w	14bc4 <d_exprlist+0x284>
   149ca:	4620      	mov	r0, r4
   149cc:	f001 fa22 	bl	15e14 <d_operator_name>
   149d0:	4605      	mov	r5, r0
   149d2:	2800      	cmp	r0, #0
   149d4:	f000 8142 	beq.w	14c5c <d_exprlist+0x31c>
   149d8:	782b      	ldrb	r3, [r5, #0]
   149da:	2b31      	cmp	r3, #49	; 0x31
   149dc:	d043      	beq.n	14a66 <d_exprlist+0x126>
   149de:	2b32      	cmp	r3, #50	; 0x32
   149e0:	d05c      	beq.n	14a9c <d_exprlist+0x15c>
   149e2:	2b33      	cmp	r3, #51	; 0x33
   149e4:	d17b      	bne.n	14ade <d_exprlist+0x19e>
   149e6:	68e3      	ldr	r3, [r4, #12]
   149e8:	781a      	ldrb	r2, [r3, #0]
   149ea:	2a5f      	cmp	r2, #95	; 0x5f
   149ec:	f040 80c1 	bne.w	14b72 <d_exprlist+0x232>
   149f0:	3301      	adds	r3, #1
   149f2:	60e3      	str	r3, [r4, #12]
   149f4:	2145      	movs	r1, #69	; 0x45
   149f6:	4620      	mov	r0, r4
   149f8:	f7ff ffa2 	bl	14940 <d_exprlist>
   149fc:	e0bc      	b.n	14b78 <d_exprlist+0x238>
   149fe:	785a      	ldrb	r2, [r3, #1]
   14a00:	2a70      	cmp	r2, #112	; 0x70
   14a02:	d1e2      	bne.n	149ca <d_exprlist+0x8a>
   14a04:	1c9a      	adds	r2, r3, #2
   14a06:	60e2      	str	r2, [r4, #12]
   14a08:	789a      	ldrb	r2, [r3, #2]
   14a0a:	2a54      	cmp	r2, #84	; 0x54
   14a0c:	d069      	beq.n	14ae2 <d_exprlist+0x1a2>
   14a0e:	4620      	mov	r0, r4
   14a10:	f7ff fd1c 	bl	1444c <d_compact_number>
   14a14:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
   14a18:	4298      	cmp	r0, r3
   14a1a:	d060      	beq.n	14ade <d_exprlist+0x19e>
   14a1c:	1c43      	adds	r3, r0, #1
   14a1e:	d05e      	beq.n	14ade <d_exprlist+0x19e>
   14a20:	3001      	adds	r0, #1
   14a22:	6963      	ldr	r3, [r4, #20]
   14a24:	69a2      	ldr	r2, [r4, #24]
   14a26:	4293      	cmp	r3, r2
   14a28:	da59      	bge.n	14ade <d_exprlist+0x19e>
   14a2a:	6922      	ldr	r2, [r4, #16]
   14a2c:	1c59      	adds	r1, r3, #1
   14a2e:	eb03 0343 	add.w	r3, r3, r3, lsl #1
   14a32:	eb12 0583 	adds.w	r5, r2, r3, lsl #2
   14a36:	6161      	str	r1, [r4, #20]
   14a38:	d051      	beq.n	14ade <d_exprlist+0x19e>
   14a3a:	2106      	movs	r1, #6
   14a3c:	f802 1023 	strb.w	r1, [r2, r3, lsl #2]
   14a40:	6068      	str	r0, [r5, #4]
   14a42:	e7a0      	b.n	14986 <d_exprlist+0x46>
   14a44:	4620      	mov	r0, r4
   14a46:	f001 fef3 	bl	16830 <d_expr_primary>
   14a4a:	4605      	mov	r5, r0
   14a4c:	6367      	str	r7, [r4, #52]	; 0x34
   14a4e:	2d00      	cmp	r5, #0
   14a50:	d19a      	bne.n	14988 <d_exprlist+0x48>
   14a52:	2500      	movs	r5, #0
   14a54:	4628      	mov	r0, r5
   14a56:	b003      	add	sp, #12
   14a58:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   14a5c:	4620      	mov	r0, r4
   14a5e:	f7ff fd11 	bl	14484 <d_template_param>
   14a62:	4605      	mov	r5, r0
   14a64:	e7f2      	b.n	14a4c <d_exprlist+0x10c>
   14a66:	f8d5 b004 	ldr.w	fp, [r5, #4]
   14a6a:	6b23      	ldr	r3, [r4, #48]	; 0x30
   14a6c:	f8db 2008 	ldr.w	r2, [fp, #8]
   14a70:	f8db a000 	ldr.w	sl, [fp]
   14a74:	3a02      	subs	r2, #2
   14a76:	4413      	add	r3, r2
   14a78:	6323      	str	r3, [r4, #48]	; 0x30
   14a7a:	4650      	mov	r0, sl
   14a7c:	4649      	mov	r1, r9
   14a7e:	f009 fe73 	bl	1e768 <strcmp>
   14a82:	2800      	cmp	r0, #0
   14a84:	f000 80e6 	beq.w	14c54 <d_exprlist+0x314>
   14a88:	f8db 300c 	ldr.w	r3, [fp, #12]
   14a8c:	2b03      	cmp	r3, #3
   14a8e:	d826      	bhi.n	14ade <d_exprlist+0x19e>
   14a90:	e8df f013 	tbh	[pc, r3, lsl #1]
   14a94:	0135002b 	.word	0x0135002b
   14a98:	00a50033 	.word	0x00a50033
   14a9c:	686b      	ldr	r3, [r5, #4]
   14a9e:	2b03      	cmp	r3, #3
   14aa0:	d81d      	bhi.n	14ade <d_exprlist+0x19e>
   14aa2:	e8df f003 	tbb	[pc, r3]
   14aa6:	6622      	.short	0x6622
   14aa8:	1c1c      	.short	0x1c1c
   14aaa:	4620      	mov	r0, r4
   14aac:	f000 fc04 	bl	152b8 <d_template_args>
   14ab0:	462a      	mov	r2, r5
   14ab2:	4603      	mov	r3, r0
   14ab4:	2104      	movs	r1, #4
   14ab6:	4620      	mov	r0, r4
   14ab8:	f7ff fb34 	bl	14124 <d_make_comp>
   14abc:	4605      	mov	r5, r0
   14abe:	e7c5      	b.n	14a4c <d_exprlist+0x10c>
   14ac0:	2a74      	cmp	r2, #116	; 0x74
   14ac2:	d182      	bne.n	149ca <d_exprlist+0x8a>
   14ac4:	785b      	ldrb	r3, [r3, #1]
   14ac6:	2b6c      	cmp	r3, #108	; 0x6c
   14ac8:	f47f af7f 	bne.w	149ca <d_exprlist+0x8a>
   14acc:	4620      	mov	r0, r4
   14ace:	f000 fdb9 	bl	15644 <d_type>
   14ad2:	68e3      	ldr	r3, [r4, #12]
   14ad4:	785a      	ldrb	r2, [r3, #1]
   14ad6:	4605      	mov	r5, r0
   14ad8:	2a00      	cmp	r2, #0
   14ada:	f040 8169 	bne.w	14db0 <d_exprlist+0x470>
   14ade:	6367      	str	r7, [r4, #52]	; 0x34
   14ae0:	e7b7      	b.n	14a52 <d_exprlist+0x112>
   14ae2:	3303      	adds	r3, #3
   14ae4:	60e3      	str	r3, [r4, #12]
   14ae6:	2000      	movs	r0, #0
   14ae8:	e79b      	b.n	14a22 <d_exprlist+0xe2>
   14aea:	462a      	mov	r2, r5
   14aec:	2300      	movs	r3, #0
   14aee:	2135      	movs	r1, #53	; 0x35
   14af0:	4620      	mov	r0, r4
   14af2:	f7ff fb17 	bl	14124 <d_make_comp>
   14af6:	4605      	mov	r5, r0
   14af8:	e7a8      	b.n	14a4c <d_exprlist+0x10c>
   14afa:	f1ba 0f00 	cmp.w	sl, #0
   14afe:	d0ee      	beq.n	14ade <d_exprlist+0x19e>
   14b00:	686b      	ldr	r3, [r5, #4]
   14b02:	681b      	ldr	r3, [r3, #0]
   14b04:	785a      	ldrb	r2, [r3, #1]
   14b06:	2a63      	cmp	r2, #99	; 0x63
   14b08:	f000 80d2 	beq.w	14cb0 <d_exprlist+0x370>
   14b0c:	f89a 3000 	ldrb.w	r3, [sl]
   14b10:	2b66      	cmp	r3, #102	; 0x66
   14b12:	f000 80ef 	beq.w	14cf4 <d_exprlist+0x3b4>
   14b16:	4620      	mov	r0, r4
   14b18:	f000 f970 	bl	14dfc <d_expression_1>
   14b1c:	4683      	mov	fp, r0
   14b1e:	49b1      	ldr	r1, [pc, #708]	; (14de4 <d_exprlist+0x4a4>)
   14b20:	4650      	mov	r0, sl
   14b22:	f009 fe21 	bl	1e768 <strcmp>
   14b26:	2800      	cmp	r0, #0
   14b28:	f000 809d 	beq.w	14c66 <d_exprlist+0x326>
   14b2c:	49ae      	ldr	r1, [pc, #696]	; (14de8 <d_exprlist+0x4a8>)
   14b2e:	4650      	mov	r0, sl
   14b30:	f009 fe1a 	bl	1e768 <strcmp>
   14b34:	b130      	cbz	r0, 14b44 <d_exprlist+0x204>
   14b36:	4650      	mov	r0, sl
   14b38:	49ac      	ldr	r1, [pc, #688]	; (14dec <d_exprlist+0x4ac>)
   14b3a:	f009 fe15 	bl	1e768 <strcmp>
   14b3e:	2800      	cmp	r0, #0
   14b40:	f040 8083 	bne.w	14c4a <d_exprlist+0x30a>
   14b44:	4620      	mov	r0, r4
   14b46:	f001 fa25 	bl	15f94 <d_unqualified_name>
   14b4a:	68e3      	ldr	r3, [r4, #12]
   14b4c:	781b      	ldrb	r3, [r3, #0]
   14b4e:	2b49      	cmp	r3, #73	; 0x49
   14b50:	4682      	mov	sl, r0
   14b52:	f000 80e9 	beq.w	14d28 <d_exprlist+0x3e8>
   14b56:	4653      	mov	r3, sl
   14b58:	465a      	mov	r2, fp
   14b5a:	2138      	movs	r1, #56	; 0x38
   14b5c:	4620      	mov	r0, r4
   14b5e:	f7ff fae1 	bl	14124 <d_make_comp>
   14b62:	462a      	mov	r2, r5
   14b64:	4603      	mov	r3, r0
   14b66:	2137      	movs	r1, #55	; 0x37
   14b68:	4620      	mov	r0, r4
   14b6a:	f7ff fadb 	bl	14124 <d_make_comp>
   14b6e:	4605      	mov	r5, r0
   14b70:	e76c      	b.n	14a4c <d_exprlist+0x10c>
   14b72:	4620      	mov	r0, r4
   14b74:	f000 f942 	bl	14dfc <d_expression_1>
   14b78:	4603      	mov	r3, r0
   14b7a:	462a      	mov	r2, r5
   14b7c:	2136      	movs	r1, #54	; 0x36
   14b7e:	4620      	mov	r0, r4
   14b80:	f7ff fad0 	bl	14124 <d_make_comp>
   14b84:	4605      	mov	r5, r0
   14b86:	e761      	b.n	14a4c <d_exprlist+0x10c>
   14b88:	3302      	adds	r3, #2
   14b8a:	60e3      	str	r3, [r4, #12]
   14b8c:	4620      	mov	r0, r4
   14b8e:	f000 fd59 	bl	15644 <d_type>
   14b92:	4682      	mov	sl, r0
   14b94:	4620      	mov	r0, r4
   14b96:	f001 f9fd 	bl	15f94 <d_unqualified_name>
   14b9a:	68e3      	ldr	r3, [r4, #12]
   14b9c:	781b      	ldrb	r3, [r3, #0]
   14b9e:	2b49      	cmp	r3, #73	; 0x49
   14ba0:	4683      	mov	fp, r0
   14ba2:	f000 8093 	beq.w	14ccc <d_exprlist+0x38c>
   14ba6:	4603      	mov	r3, r0
   14ba8:	4629      	mov	r1, r5
   14baa:	4652      	mov	r2, sl
   14bac:	4620      	mov	r0, r4
   14bae:	f7ff fab9 	bl	14124 <d_make_comp>
   14bb2:	4605      	mov	r5, r0
   14bb4:	e74a      	b.n	14a4c <d_exprlist+0x10c>
   14bb6:	9d01      	ldr	r5, [sp, #4]
   14bb8:	3301      	adds	r3, #1
   14bba:	4628      	mov	r0, r5
   14bbc:	60e3      	str	r3, [r4, #12]
   14bbe:	b003      	add	sp, #12
   14bc0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   14bc4:	3302      	adds	r3, #2
   14bc6:	60e3      	str	r3, [r4, #12]
   14bc8:	4620      	mov	r0, r4
   14bca:	f000 f917 	bl	14dfc <d_expression_1>
   14bce:	2300      	movs	r3, #0
   14bd0:	4602      	mov	r2, r0
   14bd2:	214a      	movs	r1, #74	; 0x4a
   14bd4:	4620      	mov	r0, r4
   14bd6:	f7ff faa5 	bl	14124 <d_make_comp>
   14bda:	4605      	mov	r5, r0
   14bdc:	e736      	b.n	14a4c <d_exprlist+0x10c>
   14bde:	f1ba 0f00 	cmp.w	sl, #0
   14be2:	f43f af7c 	beq.w	14ade <d_exprlist+0x19e>
   14be6:	4982      	ldr	r1, [pc, #520]	; (14df0 <d_exprlist+0x4b0>)
   14be8:	4650      	mov	r0, sl
   14bea:	f009 fdbd 	bl	1e768 <strcmp>
   14bee:	2800      	cmp	r0, #0
   14bf0:	d03f      	beq.n	14c72 <d_exprlist+0x332>
   14bf2:	f89a 3000 	ldrb.w	r3, [sl]
   14bf6:	2b66      	cmp	r3, #102	; 0x66
   14bf8:	f000 80bd 	beq.w	14d76 <d_exprlist+0x436>
   14bfc:	2b6e      	cmp	r3, #110	; 0x6e
   14bfe:	f47f af6e 	bne.w	14ade <d_exprlist+0x19e>
   14c02:	f89a 3001 	ldrb.w	r3, [sl, #1]
   14c06:	2b77      	cmp	r3, #119	; 0x77
   14c08:	d002      	beq.n	14c10 <d_exprlist+0x2d0>
   14c0a:	2b61      	cmp	r3, #97	; 0x61
   14c0c:	f47f af67 	bne.w	14ade <d_exprlist+0x19e>
   14c10:	215f      	movs	r1, #95	; 0x5f
   14c12:	4620      	mov	r0, r4
   14c14:	f7ff fe94 	bl	14940 <d_exprlist>
   14c18:	4682      	mov	sl, r0
   14c1a:	4620      	mov	r0, r4
   14c1c:	f000 fd12 	bl	15644 <d_type>
   14c20:	68e3      	ldr	r3, [r4, #12]
   14c22:	781a      	ldrb	r2, [r3, #0]
   14c24:	2a45      	cmp	r2, #69	; 0x45
   14c26:	4683      	mov	fp, r0
   14c28:	f000 80a1 	beq.w	14d6e <d_exprlist+0x42e>
   14c2c:	2a70      	cmp	r2, #112	; 0x70
   14c2e:	f000 80a6 	beq.w	14d7e <d_exprlist+0x43e>
   14c32:	2a69      	cmp	r2, #105	; 0x69
   14c34:	f47f af53 	bne.w	14ade <d_exprlist+0x19e>
   14c38:	785b      	ldrb	r3, [r3, #1]
   14c3a:	2b6c      	cmp	r3, #108	; 0x6c
   14c3c:	f47f af4f 	bne.w	14ade <d_exprlist+0x19e>
   14c40:	4620      	mov	r0, r4
   14c42:	f000 f8db 	bl	14dfc <d_expression_1>
   14c46:	4603      	mov	r3, r0
   14c48:	e01f      	b.n	14c8a <d_exprlist+0x34a>
   14c4a:	4620      	mov	r0, r4
   14c4c:	f000 f8d6 	bl	14dfc <d_expression_1>
   14c50:	4682      	mov	sl, r0
   14c52:	e780      	b.n	14b56 <d_exprlist+0x216>
   14c54:	4620      	mov	r0, r4
   14c56:	f000 fcf5 	bl	15644 <d_type>
   14c5a:	e78d      	b.n	14b78 <d_exprlist+0x238>
   14c5c:	4628      	mov	r0, r5
   14c5e:	6367      	str	r7, [r4, #52]	; 0x34
   14c60:	b003      	add	sp, #12
   14c62:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   14c66:	2145      	movs	r1, #69	; 0x45
   14c68:	4620      	mov	r0, r4
   14c6a:	f7ff fe69 	bl	14940 <d_exprlist>
   14c6e:	4682      	mov	sl, r0
   14c70:	e771      	b.n	14b56 <d_exprlist+0x216>
   14c72:	4620      	mov	r0, r4
   14c74:	f000 f8c2 	bl	14dfc <d_expression_1>
   14c78:	4682      	mov	sl, r0
   14c7a:	4620      	mov	r0, r4
   14c7c:	f000 f8be 	bl	14dfc <d_expression_1>
   14c80:	4683      	mov	fp, r0
   14c82:	4620      	mov	r0, r4
   14c84:	f000 f8ba 	bl	14dfc <d_expression_1>
   14c88:	4603      	mov	r3, r0
   14c8a:	465a      	mov	r2, fp
   14c8c:	213b      	movs	r1, #59	; 0x3b
   14c8e:	4620      	mov	r0, r4
   14c90:	f7ff fa48 	bl	14124 <d_make_comp>
   14c94:	4652      	mov	r2, sl
   14c96:	4603      	mov	r3, r0
   14c98:	213a      	movs	r1, #58	; 0x3a
   14c9a:	4620      	mov	r0, r4
   14c9c:	f7ff fa42 	bl	14124 <d_make_comp>
   14ca0:	462a      	mov	r2, r5
   14ca2:	4603      	mov	r3, r0
   14ca4:	2139      	movs	r1, #57	; 0x39
   14ca6:	4620      	mov	r0, r4
   14ca8:	f7ff fa3c 	bl	14124 <d_make_comp>
   14cac:	4605      	mov	r5, r0
   14cae:	e6cd      	b.n	14a4c <d_exprlist+0x10c>
   14cb0:	781b      	ldrb	r3, [r3, #0]
   14cb2:	f1a3 0263 	sub.w	r2, r3, #99	; 0x63
   14cb6:	2a01      	cmp	r2, #1
   14cb8:	d903      	bls.n	14cc2 <d_exprlist+0x382>
   14cba:	3b72      	subs	r3, #114	; 0x72
   14cbc:	2b01      	cmp	r3, #1
   14cbe:	f63f af25 	bhi.w	14b0c <d_exprlist+0x1cc>
   14cc2:	4620      	mov	r0, r4
   14cc4:	f000 fcbe 	bl	15644 <d_type>
   14cc8:	4683      	mov	fp, r0
   14cca:	e728      	b.n	14b1e <d_exprlist+0x1de>
   14ccc:	4620      	mov	r0, r4
   14cce:	f000 faf3 	bl	152b8 <d_template_args>
   14cd2:	465a      	mov	r2, fp
   14cd4:	4603      	mov	r3, r0
   14cd6:	2104      	movs	r1, #4
   14cd8:	4620      	mov	r0, r4
   14cda:	f7ff fa23 	bl	14124 <d_make_comp>
   14cde:	4603      	mov	r3, r0
   14ce0:	e762      	b.n	14ba8 <d_exprlist+0x268>
   14ce2:	3301      	adds	r3, #1
   14ce4:	60c3      	str	r3, [r0, #12]
   14ce6:	212e      	movs	r1, #46	; 0x2e
   14ce8:	4613      	mov	r3, r2
   14cea:	b003      	add	sp, #12
   14cec:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   14cf0:	f7ff ba18 	b.w	14124 <d_make_comp>
   14cf4:	4620      	mov	r0, r4
   14cf6:	f001 f88d 	bl	15e14 <d_operator_name>
   14cfa:	4683      	mov	fp, r0
   14cfc:	e70f      	b.n	14b1e <d_exprlist+0x1de>
   14cfe:	f1ba 0f00 	cmp.w	sl, #0
   14d02:	f43f af36 	beq.w	14b72 <d_exprlist+0x232>
   14d06:	f89a 3000 	ldrb.w	r3, [sl]
   14d0a:	2b70      	cmp	r3, #112	; 0x70
   14d0c:	d017      	beq.n	14d3e <d_exprlist+0x3fe>
   14d0e:	2b6d      	cmp	r3, #109	; 0x6d
   14d10:	d015      	beq.n	14d3e <d_exprlist+0x3fe>
   14d12:	4650      	mov	r0, sl
   14d14:	4937      	ldr	r1, [pc, #220]	; (14df4 <d_exprlist+0x4b4>)
   14d16:	f009 fd27 	bl	1e768 <strcmp>
   14d1a:	2800      	cmp	r0, #0
   14d1c:	f47f af29 	bne.w	14b72 <d_exprlist+0x232>
   14d20:	4620      	mov	r0, r4
   14d22:	f000 fa65 	bl	151f0 <d_template_args_1>
   14d26:	e727      	b.n	14b78 <d_exprlist+0x238>
   14d28:	4620      	mov	r0, r4
   14d2a:	f000 fac5 	bl	152b8 <d_template_args>
   14d2e:	4652      	mov	r2, sl
   14d30:	4603      	mov	r3, r0
   14d32:	2104      	movs	r1, #4
   14d34:	4620      	mov	r0, r4
   14d36:	f7ff f9f5 	bl	14124 <d_make_comp>
   14d3a:	4682      	mov	sl, r0
   14d3c:	e70b      	b.n	14b56 <d_exprlist+0x216>
   14d3e:	f89a 2001 	ldrb.w	r2, [sl, #1]
   14d42:	429a      	cmp	r2, r3
   14d44:	d1e5      	bne.n	14d12 <d_exprlist+0x3d2>
   14d46:	68e3      	ldr	r3, [r4, #12]
   14d48:	781a      	ldrb	r2, [r3, #0]
   14d4a:	2a5f      	cmp	r2, #95	; 0x5f
   14d4c:	d023      	beq.n	14d96 <d_exprlist+0x456>
   14d4e:	4650      	mov	r0, sl
   14d50:	4928      	ldr	r1, [pc, #160]	; (14df4 <d_exprlist+0x4b4>)
   14d52:	f009 fd09 	bl	1e768 <strcmp>
   14d56:	2800      	cmp	r0, #0
   14d58:	d03f      	beq.n	14dda <d_exprlist+0x49a>
   14d5a:	4620      	mov	r0, r4
   14d5c:	f000 f84e 	bl	14dfc <d_expression_1>
   14d60:	4603      	mov	r3, r0
   14d62:	461a      	mov	r2, r3
   14d64:	2138      	movs	r1, #56	; 0x38
   14d66:	4620      	mov	r0, r4
   14d68:	f7ff f9dc 	bl	14124 <d_make_comp>
   14d6c:	e704      	b.n	14b78 <d_exprlist+0x238>
   14d6e:	3301      	adds	r3, #1
   14d70:	60e3      	str	r3, [r4, #12]
   14d72:	2300      	movs	r3, #0
   14d74:	e789      	b.n	14c8a <d_exprlist+0x34a>
   14d76:	4620      	mov	r0, r4
   14d78:	f001 f84c 	bl	15e14 <d_operator_name>
   14d7c:	e77c      	b.n	14c78 <d_exprlist+0x338>
   14d7e:	785a      	ldrb	r2, [r3, #1]
   14d80:	2a69      	cmp	r2, #105	; 0x69
   14d82:	f47f aeac 	bne.w	14ade <d_exprlist+0x19e>
   14d86:	3302      	adds	r3, #2
   14d88:	60e3      	str	r3, [r4, #12]
   14d8a:	2145      	movs	r1, #69	; 0x45
   14d8c:	4620      	mov	r0, r4
   14d8e:	f7ff fdd7 	bl	14940 <d_exprlist>
   14d92:	4603      	mov	r3, r0
   14d94:	e779      	b.n	14c8a <d_exprlist+0x34a>
   14d96:	3301      	adds	r3, #1
   14d98:	60e3      	str	r3, [r4, #12]
   14d9a:	e7ba      	b.n	14d12 <d_exprlist+0x3d2>
   14d9c:	2a6f      	cmp	r2, #111	; 0x6f
   14d9e:	d015      	beq.n	14dcc <d_exprlist+0x48c>
   14da0:	2a69      	cmp	r2, #105	; 0x69
   14da2:	f47f ae8d 	bne.w	14ac0 <d_exprlist+0x180>
   14da6:	785a      	ldrb	r2, [r3, #1]
   14da8:	2a6c      	cmp	r2, #108	; 0x6c
   14daa:	f47f ae0e 	bne.w	149ca <d_exprlist+0x8a>
   14dae:	2500      	movs	r5, #0
   14db0:	3302      	adds	r3, #2
   14db2:	60e3      	str	r3, [r4, #12]
   14db4:	2145      	movs	r1, #69	; 0x45
   14db6:	4620      	mov	r0, r4
   14db8:	f7ff fdc2 	bl	14940 <d_exprlist>
   14dbc:	462a      	mov	r2, r5
   14dbe:	4603      	mov	r3, r0
   14dc0:	2130      	movs	r1, #48	; 0x30
   14dc2:	4620      	mov	r0, r4
   14dc4:	f7ff f9ae 	bl	14124 <d_make_comp>
   14dc8:	4605      	mov	r5, r0
   14dca:	e63f      	b.n	14a4c <d_exprlist+0x10c>
   14dcc:	785a      	ldrb	r2, [r3, #1]
   14dce:	2a6e      	cmp	r2, #110	; 0x6e
   14dd0:	f47f adfb 	bne.w	149ca <d_exprlist+0x8a>
   14dd4:	3302      	adds	r3, #2
   14dd6:	60e3      	str	r3, [r4, #12]
   14dd8:	e5c9      	b.n	1496e <d_exprlist+0x2e>
   14dda:	4620      	mov	r0, r4
   14ddc:	f000 fa08 	bl	151f0 <d_template_args_1>
   14de0:	4603      	mov	r3, r0
   14de2:	e7be      	b.n	14d62 <d_exprlist+0x422>
   14de4:	00023f4c 	.word	0x00023f4c
   14de8:	00023f50 	.word	0x00023f50
   14dec:	00023f54 	.word	0x00023f54
   14df0:	00023f58 	.word	0x00023f58
   14df4:	00023f48 	.word	0x00023f48
   14df8:	00024450 	.word	0x00024450

00014dfc <d_expression_1>:
   14dfc:	68c1      	ldr	r1, [r0, #12]
   14dfe:	780b      	ldrb	r3, [r1, #0]
   14e00:	2b4c      	cmp	r3, #76	; 0x4c
   14e02:	f000 8087 	beq.w	14f14 <d_expression_1+0x118>
   14e06:	2b54      	cmp	r3, #84	; 0x54
   14e08:	f000 8086 	beq.w	14f18 <d_expression_1+0x11c>
   14e0c:	2b73      	cmp	r3, #115	; 0x73
   14e0e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   14e12:	4604      	mov	r4, r0
   14e14:	d037      	beq.n	14e86 <d_expression_1+0x8a>
   14e16:	2b66      	cmp	r3, #102	; 0x66
   14e18:	d012      	beq.n	14e40 <d_expression_1+0x44>
   14e1a:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
   14e1e:	2a09      	cmp	r2, #9
   14e20:	f200 81b8 	bhi.w	15194 <d_expression_1+0x398>
   14e24:	4620      	mov	r0, r4
   14e26:	f001 f8b5 	bl	15f94 <d_unqualified_name>
   14e2a:	4605      	mov	r5, r0
   14e2c:	2800      	cmp	r0, #0
   14e2e:	d06d      	beq.n	14f0c <d_expression_1+0x110>
   14e30:	68e3      	ldr	r3, [r4, #12]
   14e32:	781b      	ldrb	r3, [r3, #0]
   14e34:	2b49      	cmp	r3, #73	; 0x49
   14e36:	f000 8088 	beq.w	14f4a <d_expression_1+0x14e>
   14e3a:	4628      	mov	r0, r5
   14e3c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   14e40:	784b      	ldrb	r3, [r1, #1]
   14e42:	2b70      	cmp	r3, #112	; 0x70
   14e44:	d039      	beq.n	14eba <d_expression_1+0xbe>
   14e46:	4620      	mov	r0, r4
   14e48:	f000 ffe4 	bl	15e14 <d_operator_name>
   14e4c:	4605      	mov	r5, r0
   14e4e:	2800      	cmp	r0, #0
   14e50:	d05c      	beq.n	14f0c <d_expression_1+0x110>
   14e52:	7803      	ldrb	r3, [r0, #0]
   14e54:	2b31      	cmp	r3, #49	; 0x31
   14e56:	d061      	beq.n	14f1c <d_expression_1+0x120>
   14e58:	2b32      	cmp	r3, #50	; 0x32
   14e5a:	d025      	beq.n	14ea8 <d_expression_1+0xac>
   14e5c:	2b33      	cmp	r3, #51	; 0x33
   14e5e:	d155      	bne.n	14f0c <d_expression_1+0x110>
   14e60:	68e3      	ldr	r3, [r4, #12]
   14e62:	781a      	ldrb	r2, [r3, #0]
   14e64:	2a5f      	cmp	r2, #95	; 0x5f
   14e66:	f040 81b4 	bne.w	151d2 <d_expression_1+0x3d6>
   14e6a:	3301      	adds	r3, #1
   14e6c:	60e3      	str	r3, [r4, #12]
   14e6e:	2145      	movs	r1, #69	; 0x45
   14e70:	4620      	mov	r0, r4
   14e72:	f7ff fd65 	bl	14940 <d_exprlist>
   14e76:	4603      	mov	r3, r0
   14e78:	462a      	mov	r2, r5
   14e7a:	4620      	mov	r0, r4
   14e7c:	2136      	movs	r1, #54	; 0x36
   14e7e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   14e82:	f7ff b94f 	b.w	14124 <d_make_comp>
   14e86:	784b      	ldrb	r3, [r1, #1]
   14e88:	2b72      	cmp	r3, #114	; 0x72
   14e8a:	d069      	beq.n	14f60 <d_expression_1+0x164>
   14e8c:	2b70      	cmp	r3, #112	; 0x70
   14e8e:	d1da      	bne.n	14e46 <d_expression_1+0x4a>
   14e90:	3102      	adds	r1, #2
   14e92:	60c1      	str	r1, [r0, #12]
   14e94:	f7ff ffb2 	bl	14dfc <d_expression_1>
   14e98:	2300      	movs	r3, #0
   14e9a:	4602      	mov	r2, r0
   14e9c:	214a      	movs	r1, #74	; 0x4a
   14e9e:	4620      	mov	r0, r4
   14ea0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   14ea4:	f7ff b93e 	b.w	14124 <d_make_comp>
   14ea8:	6843      	ldr	r3, [r0, #4]
   14eaa:	2b03      	cmp	r3, #3
   14eac:	d82e      	bhi.n	14f0c <d_expression_1+0x110>
   14eae:	e8df f013 	tbh	[pc, r3, lsl #1]
   14eb2:	0071      	.short	0x0071
   14eb4:	002d0190 	.word	0x002d0190
   14eb8:	002d      	.short	0x002d
   14eba:	1c8b      	adds	r3, r1, #2
   14ebc:	60c3      	str	r3, [r0, #12]
   14ebe:	788b      	ldrb	r3, [r1, #2]
   14ec0:	2b54      	cmp	r3, #84	; 0x54
   14ec2:	d063      	beq.n	14f8c <d_expression_1+0x190>
   14ec4:	f7ff fac2 	bl	1444c <d_compact_number>
   14ec8:	43c3      	mvns	r3, r0
   14eca:	f033 4300 	bics.w	r3, r3, #2147483648	; 0x80000000
   14ece:	d01d      	beq.n	14f0c <d_expression_1+0x110>
   14ed0:	3001      	adds	r0, #1
   14ed2:	6963      	ldr	r3, [r4, #20]
   14ed4:	69a2      	ldr	r2, [r4, #24]
   14ed6:	4293      	cmp	r3, r2
   14ed8:	da18      	bge.n	14f0c <d_expression_1+0x110>
   14eda:	eb03 0243 	add.w	r2, r3, r3, lsl #1
   14ede:	6921      	ldr	r1, [r4, #16]
   14ee0:	0092      	lsls	r2, r2, #2
   14ee2:	3301      	adds	r3, #1
   14ee4:	188d      	adds	r5, r1, r2
   14ee6:	6163      	str	r3, [r4, #20]
   14ee8:	d0a7      	beq.n	14e3a <d_expression_1+0x3e>
   14eea:	2306      	movs	r3, #6
   14eec:	548b      	strb	r3, [r1, r2]
   14eee:	6068      	str	r0, [r5, #4]
   14ef0:	e7a3      	b.n	14e3a <d_expression_1+0x3e>
   14ef2:	2b74      	cmp	r3, #116	; 0x74
   14ef4:	d1a7      	bne.n	14e46 <d_expression_1+0x4a>
   14ef6:	784b      	ldrb	r3, [r1, #1]
   14ef8:	2b6c      	cmp	r3, #108	; 0x6c
   14efa:	d1a4      	bne.n	14e46 <d_expression_1+0x4a>
   14efc:	f000 fba2 	bl	15644 <d_type>
   14f00:	68e1      	ldr	r1, [r4, #12]
   14f02:	784b      	ldrb	r3, [r1, #1]
   14f04:	4605      	mov	r5, r0
   14f06:	2b00      	cmp	r3, #0
   14f08:	f040 814e 	bne.w	151a8 <d_expression_1+0x3ac>
   14f0c:	2500      	movs	r5, #0
   14f0e:	4628      	mov	r0, r5
   14f10:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   14f14:	f001 bc8c 	b.w	16830 <d_expr_primary>
   14f18:	f7ff bab4 	b.w	14484 <d_template_param>
   14f1c:	6847      	ldr	r7, [r0, #4]
   14f1e:	6b23      	ldr	r3, [r4, #48]	; 0x30
   14f20:	68ba      	ldr	r2, [r7, #8]
   14f22:	683e      	ldr	r6, [r7, #0]
   14f24:	49ac      	ldr	r1, [pc, #688]	; (151d8 <d_expression_1+0x3dc>)
   14f26:	3a02      	subs	r2, #2
   14f28:	4413      	add	r3, r2
   14f2a:	6323      	str	r3, [r4, #48]	; 0x30
   14f2c:	4630      	mov	r0, r6
   14f2e:	f009 fc1b 	bl	1e768 <strcmp>
   14f32:	2800      	cmp	r0, #0
   14f34:	f000 80ab 	beq.w	1508e <d_expression_1+0x292>
   14f38:	68ff      	ldr	r7, [r7, #12]
   14f3a:	2f03      	cmp	r7, #3
   14f3c:	d8e6      	bhi.n	14f0c <d_expression_1+0x110>
   14f3e:	e8df f017 	tbh	[pc, r7, lsl #1]
   14f42:	0029      	.short	0x0029
   14f44:	007100ff 	.word	0x007100ff
   14f48:	0031      	.short	0x0031
   14f4a:	4620      	mov	r0, r4
   14f4c:	f000 f9b4 	bl	152b8 <d_template_args>
   14f50:	462a      	mov	r2, r5
   14f52:	4603      	mov	r3, r0
   14f54:	2104      	movs	r1, #4
   14f56:	4620      	mov	r0, r4
   14f58:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   14f5c:	f7ff b8e2 	b.w	14124 <d_make_comp>
   14f60:	3102      	adds	r1, #2
   14f62:	60c1      	str	r1, [r0, #12]
   14f64:	f000 fb6e 	bl	15644 <d_type>
   14f68:	4605      	mov	r5, r0
   14f6a:	4620      	mov	r0, r4
   14f6c:	f001 f812 	bl	15f94 <d_unqualified_name>
   14f70:	68e3      	ldr	r3, [r4, #12]
   14f72:	781b      	ldrb	r3, [r3, #0]
   14f74:	2b49      	cmp	r3, #73	; 0x49
   14f76:	4606      	mov	r6, r0
   14f78:	f000 80ae 	beq.w	150d8 <d_expression_1+0x2dc>
   14f7c:	4603      	mov	r3, r0
   14f7e:	462a      	mov	r2, r5
   14f80:	4620      	mov	r0, r4
   14f82:	2101      	movs	r1, #1
   14f84:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   14f88:	f7ff b8cc 	b.w	14124 <d_make_comp>
   14f8c:	3103      	adds	r1, #3
   14f8e:	60c1      	str	r1, [r0, #12]
   14f90:	2000      	movs	r0, #0
   14f92:	e79e      	b.n	14ed2 <d_expression_1+0xd6>
   14f94:	462a      	mov	r2, r5
   14f96:	4620      	mov	r0, r4
   14f98:	2300      	movs	r3, #0
   14f9a:	2135      	movs	r1, #53	; 0x35
   14f9c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   14fa0:	f7ff b8c0 	b.w	14124 <d_make_comp>
   14fa4:	2e00      	cmp	r6, #0
   14fa6:	d0b1      	beq.n	14f0c <d_expression_1+0x110>
   14fa8:	498c      	ldr	r1, [pc, #560]	; (151dc <d_expression_1+0x3e0>)
   14faa:	4630      	mov	r0, r6
   14fac:	f009 fbdc 	bl	1e768 <strcmp>
   14fb0:	2800      	cmp	r0, #0
   14fb2:	d071      	beq.n	15098 <d_expression_1+0x29c>
   14fb4:	7833      	ldrb	r3, [r6, #0]
   14fb6:	2b66      	cmp	r3, #102	; 0x66
   14fb8:	f000 80b2 	beq.w	15120 <d_expression_1+0x324>
   14fbc:	2b6e      	cmp	r3, #110	; 0x6e
   14fbe:	d1a5      	bne.n	14f0c <d_expression_1+0x110>
   14fc0:	7873      	ldrb	r3, [r6, #1]
   14fc2:	2b77      	cmp	r3, #119	; 0x77
   14fc4:	d001      	beq.n	14fca <d_expression_1+0x1ce>
   14fc6:	2b61      	cmp	r3, #97	; 0x61
   14fc8:	d1a0      	bne.n	14f0c <d_expression_1+0x110>
   14fca:	215f      	movs	r1, #95	; 0x5f
   14fcc:	4620      	mov	r0, r4
   14fce:	f7ff fcb7 	bl	14940 <d_exprlist>
   14fd2:	4606      	mov	r6, r0
   14fd4:	4620      	mov	r0, r4
   14fd6:	f000 fb35 	bl	15644 <d_type>
   14fda:	68e3      	ldr	r3, [r4, #12]
   14fdc:	781a      	ldrb	r2, [r3, #0]
   14fde:	2a45      	cmp	r2, #69	; 0x45
   14fe0:	4607      	mov	r7, r0
   14fe2:	f000 8099 	beq.w	15118 <d_expression_1+0x31c>
   14fe6:	2a70      	cmp	r2, #112	; 0x70
   14fe8:	f000 809e 	beq.w	15128 <d_expression_1+0x32c>
   14fec:	2a69      	cmp	r2, #105	; 0x69
   14fee:	d18d      	bne.n	14f0c <d_expression_1+0x110>
   14ff0:	785b      	ldrb	r3, [r3, #1]
   14ff2:	2b6c      	cmp	r3, #108	; 0x6c
   14ff4:	d18a      	bne.n	14f0c <d_expression_1+0x110>
   14ff6:	4620      	mov	r0, r4
   14ff8:	f7ff ff00 	bl	14dfc <d_expression_1>
   14ffc:	4603      	mov	r3, r0
   14ffe:	463a      	mov	r2, r7
   15000:	213b      	movs	r1, #59	; 0x3b
   15002:	4620      	mov	r0, r4
   15004:	f7ff f88e 	bl	14124 <d_make_comp>
   15008:	4632      	mov	r2, r6
   1500a:	4603      	mov	r3, r0
   1500c:	213a      	movs	r1, #58	; 0x3a
   1500e:	4620      	mov	r0, r4
   15010:	f7ff f888 	bl	14124 <d_make_comp>
   15014:	462a      	mov	r2, r5
   15016:	4603      	mov	r3, r0
   15018:	2139      	movs	r1, #57	; 0x39
   1501a:	4620      	mov	r0, r4
   1501c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   15020:	f7ff b880 	b.w	14124 <d_make_comp>
   15024:	2e00      	cmp	r6, #0
   15026:	f43f af71 	beq.w	14f0c <d_expression_1+0x110>
   1502a:	686b      	ldr	r3, [r5, #4]
   1502c:	681b      	ldr	r3, [r3, #0]
   1502e:	785a      	ldrb	r2, [r3, #1]
   15030:	2a63      	cmp	r2, #99	; 0x63
   15032:	d044      	beq.n	150be <d_expression_1+0x2c2>
   15034:	7833      	ldrb	r3, [r6, #0]
   15036:	2b66      	cmp	r3, #102	; 0x66
   15038:	d059      	beq.n	150ee <d_expression_1+0x2f2>
   1503a:	4620      	mov	r0, r4
   1503c:	f7ff fede 	bl	14dfc <d_expression_1>
   15040:	4607      	mov	r7, r0
   15042:	4967      	ldr	r1, [pc, #412]	; (151e0 <d_expression_1+0x3e4>)
   15044:	4630      	mov	r0, r6
   15046:	f009 fb8f 	bl	1e768 <strcmp>
   1504a:	b390      	cbz	r0, 150b2 <d_expression_1+0x2b6>
   1504c:	4965      	ldr	r1, [pc, #404]	; (151e4 <d_expression_1+0x3e8>)
   1504e:	4630      	mov	r0, r6
   15050:	f009 fb8a 	bl	1e768 <strcmp>
   15054:	b128      	cbz	r0, 15062 <d_expression_1+0x266>
   15056:	4630      	mov	r0, r6
   15058:	4963      	ldr	r1, [pc, #396]	; (151e8 <d_expression_1+0x3ec>)
   1505a:	f009 fb85 	bl	1e768 <strcmp>
   1505e:	2800      	cmp	r0, #0
   15060:	d14a      	bne.n	150f8 <d_expression_1+0x2fc>
   15062:	4620      	mov	r0, r4
   15064:	f000 ff96 	bl	15f94 <d_unqualified_name>
   15068:	68e3      	ldr	r3, [r4, #12]
   1506a:	781b      	ldrb	r3, [r3, #0]
   1506c:	2b49      	cmp	r3, #73	; 0x49
   1506e:	4606      	mov	r6, r0
   15070:	d047      	beq.n	15102 <d_expression_1+0x306>
   15072:	4633      	mov	r3, r6
   15074:	463a      	mov	r2, r7
   15076:	2138      	movs	r1, #56	; 0x38
   15078:	4620      	mov	r0, r4
   1507a:	f7ff f853 	bl	14124 <d_make_comp>
   1507e:	462a      	mov	r2, r5
   15080:	4603      	mov	r3, r0
   15082:	2137      	movs	r1, #55	; 0x37
   15084:	4620      	mov	r0, r4
   15086:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   1508a:	f7ff b84b 	b.w	14124 <d_make_comp>
   1508e:	4620      	mov	r0, r4
   15090:	f000 fad8 	bl	15644 <d_type>
   15094:	4603      	mov	r3, r0
   15096:	e6ef      	b.n	14e78 <d_expression_1+0x7c>
   15098:	4620      	mov	r0, r4
   1509a:	f7ff feaf 	bl	14dfc <d_expression_1>
   1509e:	4606      	mov	r6, r0
   150a0:	4620      	mov	r0, r4
   150a2:	f7ff feab 	bl	14dfc <d_expression_1>
   150a6:	4607      	mov	r7, r0
   150a8:	4620      	mov	r0, r4
   150aa:	f7ff fea7 	bl	14dfc <d_expression_1>
   150ae:	4603      	mov	r3, r0
   150b0:	e7a5      	b.n	14ffe <d_expression_1+0x202>
   150b2:	2145      	movs	r1, #69	; 0x45
   150b4:	4620      	mov	r0, r4
   150b6:	f7ff fc43 	bl	14940 <d_exprlist>
   150ba:	4606      	mov	r6, r0
   150bc:	e7d9      	b.n	15072 <d_expression_1+0x276>
   150be:	781b      	ldrb	r3, [r3, #0]
   150c0:	f1a3 0263 	sub.w	r2, r3, #99	; 0x63
   150c4:	2a01      	cmp	r2, #1
   150c6:	d902      	bls.n	150ce <d_expression_1+0x2d2>
   150c8:	3b72      	subs	r3, #114	; 0x72
   150ca:	2b01      	cmp	r3, #1
   150cc:	d8b2      	bhi.n	15034 <d_expression_1+0x238>
   150ce:	4620      	mov	r0, r4
   150d0:	f000 fab8 	bl	15644 <d_type>
   150d4:	4607      	mov	r7, r0
   150d6:	e7b4      	b.n	15042 <d_expression_1+0x246>
   150d8:	4620      	mov	r0, r4
   150da:	f000 f8ed 	bl	152b8 <d_template_args>
   150de:	4632      	mov	r2, r6
   150e0:	4603      	mov	r3, r0
   150e2:	2104      	movs	r1, #4
   150e4:	4620      	mov	r0, r4
   150e6:	f7ff f81d 	bl	14124 <d_make_comp>
   150ea:	4603      	mov	r3, r0
   150ec:	e747      	b.n	14f7e <d_expression_1+0x182>
   150ee:	4620      	mov	r0, r4
   150f0:	f000 fe90 	bl	15e14 <d_operator_name>
   150f4:	4607      	mov	r7, r0
   150f6:	e7a4      	b.n	15042 <d_expression_1+0x246>
   150f8:	4620      	mov	r0, r4
   150fa:	f7ff fe7f 	bl	14dfc <d_expression_1>
   150fe:	4606      	mov	r6, r0
   15100:	e7b7      	b.n	15072 <d_expression_1+0x276>
   15102:	4620      	mov	r0, r4
   15104:	f000 f8d8 	bl	152b8 <d_template_args>
   15108:	4632      	mov	r2, r6
   1510a:	4603      	mov	r3, r0
   1510c:	2104      	movs	r1, #4
   1510e:	4620      	mov	r0, r4
   15110:	f7ff f808 	bl	14124 <d_make_comp>
   15114:	4606      	mov	r6, r0
   15116:	e7ac      	b.n	15072 <d_expression_1+0x276>
   15118:	3301      	adds	r3, #1
   1511a:	60e3      	str	r3, [r4, #12]
   1511c:	2300      	movs	r3, #0
   1511e:	e76e      	b.n	14ffe <d_expression_1+0x202>
   15120:	4620      	mov	r0, r4
   15122:	f000 fe77 	bl	15e14 <d_operator_name>
   15126:	e7ba      	b.n	1509e <d_expression_1+0x2a2>
   15128:	785a      	ldrb	r2, [r3, #1]
   1512a:	2a69      	cmp	r2, #105	; 0x69
   1512c:	f47f aeee 	bne.w	14f0c <d_expression_1+0x110>
   15130:	3302      	adds	r3, #2
   15132:	60e3      	str	r3, [r4, #12]
   15134:	2145      	movs	r1, #69	; 0x45
   15136:	4620      	mov	r0, r4
   15138:	f7ff fc02 	bl	14940 <d_exprlist>
   1513c:	4603      	mov	r3, r0
   1513e:	e75e      	b.n	14ffe <d_expression_1+0x202>
   15140:	2e00      	cmp	r6, #0
   15142:	d046      	beq.n	151d2 <d_expression_1+0x3d6>
   15144:	7833      	ldrb	r3, [r6, #0]
   15146:	2b70      	cmp	r3, #112	; 0x70
   15148:	d015      	beq.n	15176 <d_expression_1+0x37a>
   1514a:	2b6d      	cmp	r3, #109	; 0x6d
   1514c:	d013      	beq.n	15176 <d_expression_1+0x37a>
   1514e:	2700      	movs	r7, #0
   15150:	4630      	mov	r0, r6
   15152:	4926      	ldr	r1, [pc, #152]	; (151ec <d_expression_1+0x3f0>)
   15154:	f009 fb08 	bl	1e768 <strcmp>
   15158:	b1b8      	cbz	r0, 1518a <d_expression_1+0x38e>
   1515a:	4620      	mov	r0, r4
   1515c:	f7ff fe4e 	bl	14dfc <d_expression_1>
   15160:	4603      	mov	r3, r0
   15162:	2f00      	cmp	r7, #0
   15164:	f43f ae88 	beq.w	14e78 <d_expression_1+0x7c>
   15168:	461a      	mov	r2, r3
   1516a:	2138      	movs	r1, #56	; 0x38
   1516c:	4620      	mov	r0, r4
   1516e:	f7fe ffd9 	bl	14124 <d_make_comp>
   15172:	4603      	mov	r3, r0
   15174:	e680      	b.n	14e78 <d_expression_1+0x7c>
   15176:	7872      	ldrb	r2, [r6, #1]
   15178:	429a      	cmp	r2, r3
   1517a:	d1e8      	bne.n	1514e <d_expression_1+0x352>
   1517c:	68e3      	ldr	r3, [r4, #12]
   1517e:	781a      	ldrb	r2, [r3, #0]
   15180:	2a5f      	cmp	r2, #95	; 0x5f
   15182:	d1e5      	bne.n	15150 <d_expression_1+0x354>
   15184:	3301      	adds	r3, #1
   15186:	60e3      	str	r3, [r4, #12]
   15188:	e7e1      	b.n	1514e <d_expression_1+0x352>
   1518a:	4620      	mov	r0, r4
   1518c:	f000 f830 	bl	151f0 <d_template_args_1>
   15190:	4603      	mov	r3, r0
   15192:	e7e6      	b.n	15162 <d_expression_1+0x366>
   15194:	2b6f      	cmp	r3, #111	; 0x6f
   15196:	d015      	beq.n	151c4 <d_expression_1+0x3c8>
   15198:	2b69      	cmp	r3, #105	; 0x69
   1519a:	f47f aeaa 	bne.w	14ef2 <d_expression_1+0xf6>
   1519e:	784b      	ldrb	r3, [r1, #1]
   151a0:	2b6c      	cmp	r3, #108	; 0x6c
   151a2:	f47f ae50 	bne.w	14e46 <d_expression_1+0x4a>
   151a6:	2500      	movs	r5, #0
   151a8:	3102      	adds	r1, #2
   151aa:	60e1      	str	r1, [r4, #12]
   151ac:	4620      	mov	r0, r4
   151ae:	2145      	movs	r1, #69	; 0x45
   151b0:	f7ff fbc6 	bl	14940 <d_exprlist>
   151b4:	462a      	mov	r2, r5
   151b6:	4603      	mov	r3, r0
   151b8:	2130      	movs	r1, #48	; 0x30
   151ba:	4620      	mov	r0, r4
   151bc:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   151c0:	f7fe bfb0 	b.w	14124 <d_make_comp>
   151c4:	784b      	ldrb	r3, [r1, #1]
   151c6:	2b6e      	cmp	r3, #110	; 0x6e
   151c8:	f47f ae3d 	bne.w	14e46 <d_expression_1+0x4a>
   151cc:	3102      	adds	r1, #2
   151ce:	60c1      	str	r1, [r0, #12]
   151d0:	e628      	b.n	14e24 <d_expression_1+0x28>
   151d2:	2700      	movs	r7, #0
   151d4:	e7c1      	b.n	1515a <d_expression_1+0x35e>
   151d6:	bf00      	nop
   151d8:	00024450 	.word	0x00024450
   151dc:	00023f58 	.word	0x00023f58
   151e0:	00023f4c 	.word	0x00023f4c
   151e4:	00023f50 	.word	0x00023f50
   151e8:	00023f54 	.word	0x00023f54
   151ec:	00023f48 	.word	0x00023f48

000151f0 <d_template_args_1>:
   151f0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   151f4:	68c2      	ldr	r2, [r0, #12]
   151f6:	f8d0 802c 	ldr.w	r8, [r0, #44]	; 0x2c
   151fa:	7813      	ldrb	r3, [r2, #0]
   151fc:	2b45      	cmp	r3, #69	; 0x45
   151fe:	b083      	sub	sp, #12
   15200:	4604      	mov	r4, r0
   15202:	d04e      	beq.n	152a2 <d_template_args_1+0xb2>
   15204:	ae02      	add	r6, sp, #8
   15206:	2100      	movs	r1, #0
   15208:	f846 1d04 	str.w	r1, [r6, #-4]!
   1520c:	2701      	movs	r7, #1
   1520e:	3b49      	subs	r3, #73	; 0x49
   15210:	2b0f      	cmp	r3, #15
   15212:	d83e      	bhi.n	15292 <d_template_args_1+0xa2>
   15214:	e8df f003 	tbb	[pc, r3]
   15218:	1b3d3838 	.word	0x1b3d3838
   1521c:	3d3d3d3d 	.word	0x3d3d3d3d
   15220:	3d3d3d3d 	.word	0x3d3d3d3d
   15224:	083d3d3d 	.word	0x083d3d3d
   15228:	3201      	adds	r2, #1
   1522a:	f8d4 9034 	ldr.w	r9, [r4, #52]	; 0x34
   1522e:	60e2      	str	r2, [r4, #12]
   15230:	6367      	str	r7, [r4, #52]	; 0x34
   15232:	4620      	mov	r0, r4
   15234:	f7ff fde2 	bl	14dfc <d_expression_1>
   15238:	68e3      	ldr	r3, [r4, #12]
   1523a:	f8c4 9034 	str.w	r9, [r4, #52]	; 0x34
   1523e:	781a      	ldrb	r2, [r3, #0]
   15240:	2a45      	cmp	r2, #69	; 0x45
   15242:	4605      	mov	r5, r0
   15244:	d02a      	beq.n	1529c <d_template_args_1+0xac>
   15246:	2000      	movs	r0, #0
   15248:	b003      	add	sp, #12
   1524a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   1524e:	4620      	mov	r0, r4
   15250:	f001 faee 	bl	16830 <d_expr_primary>
   15254:	4605      	mov	r5, r0
   15256:	2300      	movs	r3, #0
   15258:	212f      	movs	r1, #47	; 0x2f
   1525a:	462a      	mov	r2, r5
   1525c:	4620      	mov	r0, r4
   1525e:	2d00      	cmp	r5, #0
   15260:	d0f1      	beq.n	15246 <d_template_args_1+0x56>
   15262:	f7fe ff5f 	bl	14124 <d_make_comp>
   15266:	6030      	str	r0, [r6, #0]
   15268:	f100 0608 	add.w	r6, r0, #8
   1526c:	2800      	cmp	r0, #0
   1526e:	d0ea      	beq.n	15246 <d_template_args_1+0x56>
   15270:	68e2      	ldr	r2, [r4, #12]
   15272:	7813      	ldrb	r3, [r2, #0]
   15274:	2b45      	cmp	r3, #69	; 0x45
   15276:	d1ca      	bne.n	1520e <d_template_args_1+0x1e>
   15278:	9801      	ldr	r0, [sp, #4]
   1527a:	f8c4 802c 	str.w	r8, [r4, #44]	; 0x2c
   1527e:	3201      	adds	r2, #1
   15280:	60e2      	str	r2, [r4, #12]
   15282:	b003      	add	sp, #12
   15284:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   15288:	4620      	mov	r0, r4
   1528a:	f000 f815 	bl	152b8 <d_template_args>
   1528e:	4605      	mov	r5, r0
   15290:	e7e1      	b.n	15256 <d_template_args_1+0x66>
   15292:	4620      	mov	r0, r4
   15294:	f000 f9d6 	bl	15644 <d_type>
   15298:	4605      	mov	r5, r0
   1529a:	e7dc      	b.n	15256 <d_template_args_1+0x66>
   1529c:	3301      	adds	r3, #1
   1529e:	60e3      	str	r3, [r4, #12]
   152a0:	e7d9      	b.n	15256 <d_template_args_1+0x66>
   152a2:	3201      	adds	r2, #1
   152a4:	2300      	movs	r3, #0
   152a6:	60c2      	str	r2, [r0, #12]
   152a8:	212f      	movs	r1, #47	; 0x2f
   152aa:	461a      	mov	r2, r3
   152ac:	b003      	add	sp, #12
   152ae:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
   152b2:	f7fe bf37 	b.w	14124 <d_make_comp>
   152b6:	bf00      	nop

000152b8 <d_template_args>:
   152b8:	68c2      	ldr	r2, [r0, #12]
   152ba:	7813      	ldrb	r3, [r2, #0]
   152bc:	3b49      	subs	r3, #73	; 0x49
   152be:	2b01      	cmp	r3, #1
   152c0:	d802      	bhi.n	152c8 <d_template_args+0x10>
   152c2:	3201      	adds	r2, #1
   152c4:	60c2      	str	r2, [r0, #12]
   152c6:	e793      	b.n	151f0 <d_template_args_1>
   152c8:	2000      	movs	r0, #0
   152ca:	4770      	bx	lr

000152cc <d_name>:
   152cc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   152d0:	68c2      	ldr	r2, [r0, #12]
   152d2:	7813      	ldrb	r3, [r2, #0]
   152d4:	3b4e      	subs	r3, #78	; 0x4e
   152d6:	b085      	sub	sp, #20
   152d8:	4605      	mov	r5, r0
   152da:	2b0c      	cmp	r3, #12
   152dc:	d870      	bhi.n	153c0 <d_name+0xf4>
   152de:	e8df f003 	tbb	[pc, r3]
   152e2:	6f1e      	.short	0x6f1e
   152e4:	5b6f6f6f 	.word	0x5b6f6f6f
   152e8:	6f6f176f 	.word	0x6f6f176f
   152ec:	6f6f      	.short	0x6f6f
   152ee:	07          	.byte	0x07
   152ef:	00          	.byte	0x00
   152f0:	3201      	adds	r2, #1
   152f2:	2100      	movs	r1, #0
   152f4:	60c2      	str	r2, [r0, #12]
   152f6:	f000 ffbd 	bl	16274 <d_encoding>
   152fa:	68eb      	ldr	r3, [r5, #12]
   152fc:	7819      	ldrb	r1, [r3, #0]
   152fe:	2945      	cmp	r1, #69	; 0x45
   15300:	4606      	mov	r6, r0
   15302:	f000 8099 	beq.w	15438 <d_name+0x16c>
   15306:	2200      	movs	r2, #0
   15308:	4610      	mov	r0, r2
   1530a:	b005      	add	sp, #20
   1530c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   15310:	f000 fe40 	bl	15f94 <d_unqualified_name>
   15314:	4602      	mov	r2, r0
   15316:	4610      	mov	r0, r2
   15318:	b005      	add	sp, #20
   1531a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   1531e:	3201      	adds	r2, #1
   15320:	60c2      	str	r2, [r0, #12]
   15322:	a903      	add	r1, sp, #12
   15324:	2201      	movs	r2, #1
   15326:	f7fe ff49 	bl	141bc <d_cv_qualifiers>
   1532a:	4681      	mov	r9, r0
   1532c:	2800      	cmp	r0, #0
   1532e:	d0ea      	beq.n	15306 <d_name+0x3a>
   15330:	2100      	movs	r1, #0
   15332:	4628      	mov	r0, r5
   15334:	f7fe ffa8 	bl	14288 <d_ref_qualifier>
   15338:	68ea      	ldr	r2, [r5, #12]
   1533a:	4eb4      	ldr	r6, [pc, #720]	; (1560c <d_name+0x340>)
   1533c:	7814      	ldrb	r4, [r2, #0]
   1533e:	4680      	mov	r8, r0
   15340:	2700      	movs	r7, #0
   15342:	2c00      	cmp	r4, #0
   15344:	f000 80e8 	beq.w	15518 <d_name+0x24c>
   15348:	2c44      	cmp	r4, #68	; 0x44
   1534a:	f000 80d1 	beq.w	154f0 <d_name+0x224>
   1534e:	f1a4 0330 	sub.w	r3, r4, #48	; 0x30
   15352:	b2db      	uxtb	r3, r3
   15354:	2b1c      	cmp	r3, #28
   15356:	f240 80a8 	bls.w	154aa <d_name+0x1de>
   1535a:	f1a4 0361 	sub.w	r3, r4, #97	; 0x61
   1535e:	2b19      	cmp	r3, #25
   15360:	f240 80a8 	bls.w	154b4 <d_name+0x1e8>
   15364:	2c55      	cmp	r4, #85	; 0x55
   15366:	f000 80de 	beq.w	15526 <d_name+0x25a>
   1536a:	2c53      	cmp	r4, #83	; 0x53
   1536c:	f000 80f1 	beq.w	15552 <d_name+0x286>
   15370:	2c49      	cmp	r4, #73	; 0x49
   15372:	f000 80da 	beq.w	1552a <d_name+0x25e>
   15376:	2c54      	cmp	r4, #84	; 0x54
   15378:	f000 811f 	beq.w	155ba <d_name+0x2ee>
   1537c:	2c45      	cmp	r4, #69	; 0x45
   1537e:	f000 814b 	beq.w	15618 <d_name+0x34c>
   15382:	2c4d      	cmp	r4, #77	; 0x4d
   15384:	f040 80c8 	bne.w	15518 <d_name+0x24c>
   15388:	2f00      	cmp	r7, #0
   1538a:	f000 80c5 	beq.w	15518 <d_name+0x24c>
   1538e:	1c53      	adds	r3, r2, #1
   15390:	60eb      	str	r3, [r5, #12]
   15392:	7854      	ldrb	r4, [r2, #1]
   15394:	461a      	mov	r2, r3
   15396:	e7d4      	b.n	15342 <d_name+0x76>
   15398:	7853      	ldrb	r3, [r2, #1]
   1539a:	2b74      	cmp	r3, #116	; 0x74
   1539c:	d031      	beq.n	15402 <d_name+0x136>
   1539e:	2100      	movs	r1, #0
   153a0:	f7ff f90a 	bl	145b8 <d_substitution>
   153a4:	68eb      	ldr	r3, [r5, #12]
   153a6:	7819      	ldrb	r1, [r3, #0]
   153a8:	2949      	cmp	r1, #73	; 0x49
   153aa:	4602      	mov	r2, r0
   153ac:	d1b3      	bne.n	15316 <d_name+0x4a>
   153ae:	3301      	adds	r3, #1
   153b0:	60eb      	str	r3, [r5, #12]
   153b2:	4628      	mov	r0, r5
   153b4:	9201      	str	r2, [sp, #4]
   153b6:	f7ff ff1b 	bl	151f0 <d_template_args_1>
   153ba:	9a01      	ldr	r2, [sp, #4]
   153bc:	4603      	mov	r3, r0
   153be:	e017      	b.n	153f0 <d_name+0x124>
   153c0:	f000 fde8 	bl	15f94 <d_unqualified_name>
   153c4:	68eb      	ldr	r3, [r5, #12]
   153c6:	7819      	ldrb	r1, [r3, #0]
   153c8:	2949      	cmp	r1, #73	; 0x49
   153ca:	4602      	mov	r2, r0
   153cc:	d1a3      	bne.n	15316 <d_name+0x4a>
   153ce:	2a00      	cmp	r2, #0
   153d0:	d099      	beq.n	15306 <d_name+0x3a>
   153d2:	6a29      	ldr	r1, [r5, #32]
   153d4:	6a68      	ldr	r0, [r5, #36]	; 0x24
   153d6:	4281      	cmp	r1, r0
   153d8:	da95      	bge.n	15306 <d_name+0x3a>
   153da:	69ec      	ldr	r4, [r5, #28]
   153dc:	1c48      	adds	r0, r1, #1
   153de:	f844 2021 	str.w	r2, [r4, r1, lsl #2]
   153e2:	6228      	str	r0, [r5, #32]
   153e4:	7819      	ldrb	r1, [r3, #0]
   153e6:	3949      	subs	r1, #73	; 0x49
   153e8:	2901      	cmp	r1, #1
   153ea:	bf88      	it	hi
   153ec:	2300      	movhi	r3, #0
   153ee:	d9de      	bls.n	153ae <d_name+0xe2>
   153f0:	4628      	mov	r0, r5
   153f2:	2104      	movs	r1, #4
   153f4:	f7fe fe96 	bl	14124 <d_make_comp>
   153f8:	4602      	mov	r2, r0
   153fa:	4610      	mov	r0, r2
   153fc:	b005      	add	sp, #20
   153fe:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   15402:	6943      	ldr	r3, [r0, #20]
   15404:	6981      	ldr	r1, [r0, #24]
   15406:	3202      	adds	r2, #2
   15408:	428b      	cmp	r3, r1
   1540a:	60c2      	str	r2, [r0, #12]
   1540c:	f2c0 80ab 	blt.w	15566 <d_name+0x29a>
   15410:	2400      	movs	r4, #0
   15412:	4628      	mov	r0, r5
   15414:	f000 fdbe 	bl	15f94 <d_unqualified_name>
   15418:	4622      	mov	r2, r4
   1541a:	4603      	mov	r3, r0
   1541c:	2101      	movs	r1, #1
   1541e:	4628      	mov	r0, r5
   15420:	f7fe fe80 	bl	14124 <d_make_comp>
   15424:	6b29      	ldr	r1, [r5, #48]	; 0x30
   15426:	68eb      	ldr	r3, [r5, #12]
   15428:	3103      	adds	r1, #3
   1542a:	6329      	str	r1, [r5, #48]	; 0x30
   1542c:	7819      	ldrb	r1, [r3, #0]
   1542e:	2949      	cmp	r1, #73	; 0x49
   15430:	4602      	mov	r2, r0
   15432:	f47f af70 	bne.w	15316 <d_name+0x4a>
   15436:	e7ca      	b.n	153ce <d_name+0x102>
   15438:	1c5a      	adds	r2, r3, #1
   1543a:	60ea      	str	r2, [r5, #12]
   1543c:	7859      	ldrb	r1, [r3, #1]
   1543e:	2973      	cmp	r1, #115	; 0x73
   15440:	f000 80a3 	beq.w	1558a <d_name+0x2be>
   15444:	2964      	cmp	r1, #100	; 0x64
   15446:	f000 80bc 	beq.w	155c2 <d_name+0x2f6>
   1544a:	4628      	mov	r0, r5
   1544c:	f7ff ff3e 	bl	152cc <d_name>
   15450:	4604      	mov	r4, r0
   15452:	2800      	cmp	r0, #0
   15454:	d072      	beq.n	1553c <d_name+0x270>
   15456:	7803      	ldrb	r3, [r0, #0]
   15458:	2b45      	cmp	r3, #69	; 0x45
   1545a:	f000 8094 	beq.w	15586 <d_name+0x2ba>
   1545e:	2b47      	cmp	r3, #71	; 0x47
   15460:	f000 8091 	beq.w	15586 <d_name+0x2ba>
   15464:	68eb      	ldr	r3, [r5, #12]
   15466:	781a      	ldrb	r2, [r3, #0]
   15468:	2a5f      	cmp	r2, #95	; 0x5f
   1546a:	f040 808c 	bne.w	15586 <d_name+0x2ba>
   1546e:	f04f 37ff 	mov.w	r7, #4294967295
   15472:	4628      	mov	r0, r5
   15474:	3301      	adds	r3, #1
   15476:	f840 3f0c 	str.w	r3, [r0, #12]!
   1547a:	f7fe ffa5 	bl	143c8 <d_number.isra.0>
   1547e:	2800      	cmp	r0, #0
   15480:	f6ff af41 	blt.w	15306 <d_name+0x3a>
   15484:	1c7b      	adds	r3, r7, #1
   15486:	d07e      	beq.n	15586 <d_name+0x2ba>
   15488:	696b      	ldr	r3, [r5, #20]
   1548a:	69aa      	ldr	r2, [r5, #24]
   1548c:	4293      	cmp	r3, r2
   1548e:	da55      	bge.n	1553c <d_name+0x270>
   15490:	eb03 0243 	add.w	r2, r3, r3, lsl #1
   15494:	6929      	ldr	r1, [r5, #16]
   15496:	3301      	adds	r3, #1
   15498:	0092      	lsls	r2, r2, #2
   1549a:	616b      	str	r3, [r5, #20]
   1549c:	188b      	adds	r3, r1, r2
   1549e:	d04e      	beq.n	1553e <d_name+0x272>
   154a0:	2046      	movs	r0, #70	; 0x46
   154a2:	5488      	strb	r0, [r1, r2]
   154a4:	609f      	str	r7, [r3, #8]
   154a6:	605c      	str	r4, [r3, #4]
   154a8:	e049      	b.n	1553e <d_name+0x272>
   154aa:	fa26 f303 	lsr.w	r3, r6, r3
   154ae:	07d9      	lsls	r1, r3, #31
   154b0:	f57f af53 	bpl.w	1535a <d_name+0x8e>
   154b4:	4628      	mov	r0, r5
   154b6:	f000 fd6d 	bl	15f94 <d_unqualified_name>
   154ba:	b347      	cbz	r7, 1550e <d_name+0x242>
   154bc:	2101      	movs	r1, #1
   154be:	4603      	mov	r3, r0
   154c0:	463a      	mov	r2, r7
   154c2:	4628      	mov	r0, r5
   154c4:	f7fe fe2e 	bl	14124 <d_make_comp>
   154c8:	4607      	mov	r7, r0
   154ca:	2c53      	cmp	r4, #83	; 0x53
   154cc:	d01c      	beq.n	15508 <d_name+0x23c>
   154ce:	68ea      	ldr	r2, [r5, #12]
   154d0:	7814      	ldrb	r4, [r2, #0]
   154d2:	2c45      	cmp	r4, #69	; 0x45
   154d4:	f43f af3b 	beq.w	1534e <d_name+0x82>
   154d8:	b1f7      	cbz	r7, 15518 <d_name+0x24c>
   154da:	6a2b      	ldr	r3, [r5, #32]
   154dc:	6a69      	ldr	r1, [r5, #36]	; 0x24
   154de:	428b      	cmp	r3, r1
   154e0:	da1a      	bge.n	15518 <d_name+0x24c>
   154e2:	69e9      	ldr	r1, [r5, #28]
   154e4:	1c58      	adds	r0, r3, #1
   154e6:	f841 7023 	str.w	r7, [r1, r3, lsl #2]
   154ea:	6228      	str	r0, [r5, #32]
   154ec:	7814      	ldrb	r4, [r2, #0]
   154ee:	e728      	b.n	15342 <d_name+0x76>
   154f0:	7853      	ldrb	r3, [r2, #1]
   154f2:	f003 03df 	and.w	r3, r3, #223	; 0xdf
   154f6:	2b54      	cmp	r3, #84	; 0x54
   154f8:	4628      	mov	r0, r5
   154fa:	d00a      	beq.n	15512 <d_name+0x246>
   154fc:	f000 fd4a 	bl	15f94 <d_unqualified_name>
   15500:	2f00      	cmp	r7, #0
   15502:	d1db      	bne.n	154bc <d_name+0x1f0>
   15504:	4607      	mov	r7, r0
   15506:	e7e2      	b.n	154ce <d_name+0x202>
   15508:	68ea      	ldr	r2, [r5, #12]
   1550a:	7814      	ldrb	r4, [r2, #0]
   1550c:	e719      	b.n	15342 <d_name+0x76>
   1550e:	4607      	mov	r7, r0
   15510:	e7db      	b.n	154ca <d_name+0x1fe>
   15512:	f000 f897 	bl	15644 <d_type>
   15516:	e7f3      	b.n	15500 <d_name+0x234>
   15518:	2200      	movs	r2, #0
   1551a:	4610      	mov	r0, r2
   1551c:	f8c9 2000 	str.w	r2, [r9]
   15520:	b005      	add	sp, #20
   15522:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   15526:	4628      	mov	r0, r5
   15528:	e7e8      	b.n	154fc <d_name+0x230>
   1552a:	2f00      	cmp	r7, #0
   1552c:	d0f4      	beq.n	15518 <d_name+0x24c>
   1552e:	3201      	adds	r2, #1
   15530:	60ea      	str	r2, [r5, #12]
   15532:	4628      	mov	r0, r5
   15534:	f7ff fe5c 	bl	151f0 <d_template_args_1>
   15538:	2104      	movs	r1, #4
   1553a:	e7c0      	b.n	154be <d_name+0x1f2>
   1553c:	2300      	movs	r3, #0
   1553e:	4632      	mov	r2, r6
   15540:	4628      	mov	r0, r5
   15542:	2102      	movs	r1, #2
   15544:	f7fe fdee 	bl	14124 <d_make_comp>
   15548:	4602      	mov	r2, r0
   1554a:	4610      	mov	r0, r2
   1554c:	b005      	add	sp, #20
   1554e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   15552:	2101      	movs	r1, #1
   15554:	4628      	mov	r0, r5
   15556:	f7ff f82f 	bl	145b8 <d_substitution>
   1555a:	2f00      	cmp	r7, #0
   1555c:	d1ae      	bne.n	154bc <d_name+0x1f0>
   1555e:	68ea      	ldr	r2, [r5, #12]
   15560:	4607      	mov	r7, r0
   15562:	7814      	ldrb	r4, [r2, #0]
   15564:	e6ed      	b.n	15342 <d_name+0x76>
   15566:	eb03 0243 	add.w	r2, r3, r3, lsl #1
   1556a:	6901      	ldr	r1, [r0, #16]
   1556c:	0092      	lsls	r2, r2, #2
   1556e:	3301      	adds	r3, #1
   15570:	188c      	adds	r4, r1, r2
   15572:	6143      	str	r3, [r0, #20]
   15574:	f43f af4d 	beq.w	15412 <d_name+0x146>
   15578:	2300      	movs	r3, #0
   1557a:	548b      	strb	r3, [r1, r2]
   1557c:	4824      	ldr	r0, [pc, #144]	; (15610 <d_name+0x344>)
   1557e:	6060      	str	r0, [r4, #4]
   15580:	2303      	movs	r3, #3
   15582:	60a3      	str	r3, [r4, #8]
   15584:	e745      	b.n	15412 <d_name+0x146>
   15586:	4623      	mov	r3, r4
   15588:	e7d9      	b.n	1553e <d_name+0x272>
   1558a:	1c9a      	adds	r2, r3, #2
   1558c:	60ea      	str	r2, [r5, #12]
   1558e:	789a      	ldrb	r2, [r3, #2]
   15590:	2a5f      	cmp	r2, #95	; 0x5f
   15592:	d032      	beq.n	155fa <d_name+0x32e>
   15594:	696b      	ldr	r3, [r5, #20]
   15596:	69aa      	ldr	r2, [r5, #24]
   15598:	4293      	cmp	r3, r2
   1559a:	dacf      	bge.n	1553c <d_name+0x270>
   1559c:	eb03 0243 	add.w	r2, r3, r3, lsl #1
   155a0:	6929      	ldr	r1, [r5, #16]
   155a2:	3301      	adds	r3, #1
   155a4:	0092      	lsls	r2, r2, #2
   155a6:	616b      	str	r3, [r5, #20]
   155a8:	188b      	adds	r3, r1, r2
   155aa:	d0c8      	beq.n	1553e <d_name+0x272>
   155ac:	2400      	movs	r4, #0
   155ae:	548c      	strb	r4, [r1, r2]
   155b0:	4818      	ldr	r0, [pc, #96]	; (15614 <d_name+0x348>)
   155b2:	6058      	str	r0, [r3, #4]
   155b4:	220e      	movs	r2, #14
   155b6:	609a      	str	r2, [r3, #8]
   155b8:	e7c1      	b.n	1553e <d_name+0x272>
   155ba:	4628      	mov	r0, r5
   155bc:	f7fe ff62 	bl	14484 <d_template_param>
   155c0:	e79e      	b.n	15500 <d_name+0x234>
   155c2:	3302      	adds	r3, #2
   155c4:	60eb      	str	r3, [r5, #12]
   155c6:	4628      	mov	r0, r5
   155c8:	f7fe ff40 	bl	1444c <d_compact_number>
   155cc:	1e07      	subs	r7, r0, #0
   155ce:	f6ff ae9a 	blt.w	15306 <d_name+0x3a>
   155d2:	4628      	mov	r0, r5
   155d4:	f7ff fe7a 	bl	152cc <d_name>
   155d8:	4604      	mov	r4, r0
   155da:	2800      	cmp	r0, #0
   155dc:	f43f af54 	beq.w	15488 <d_name+0x1bc>
   155e0:	7803      	ldrb	r3, [r0, #0]
   155e2:	2b45      	cmp	r3, #69	; 0x45
   155e4:	f43f af50 	beq.w	15488 <d_name+0x1bc>
   155e8:	2b47      	cmp	r3, #71	; 0x47
   155ea:	f43f af4d 	beq.w	15488 <d_name+0x1bc>
   155ee:	68eb      	ldr	r3, [r5, #12]
   155f0:	781a      	ldrb	r2, [r3, #0]
   155f2:	2a5f      	cmp	r2, #95	; 0x5f
   155f4:	f47f af48 	bne.w	15488 <d_name+0x1bc>
   155f8:	e73b      	b.n	15472 <d_name+0x1a6>
   155fa:	4628      	mov	r0, r5
   155fc:	3303      	adds	r3, #3
   155fe:	f840 3f0c 	str.w	r3, [r0, #12]!
   15602:	f7fe fee1 	bl	143c8 <d_number.isra.0>
   15606:	2800      	cmp	r0, #0
   15608:	dac4      	bge.n	15594 <d_name+0x2c8>
   1560a:	e67c      	b.n	15306 <d_name+0x3a>
   1560c:	100803ff 	.word	0x100803ff
   15610:	00023f6c 	.word	0x00023f6c
   15614:	00023f5c 	.word	0x00023f5c
   15618:	f8c9 7000 	str.w	r7, [r9]
   1561c:	2f00      	cmp	r7, #0
   1561e:	f43f ae72 	beq.w	15306 <d_name+0x3a>
   15622:	f1b8 0f00 	cmp.w	r8, #0
   15626:	d004      	beq.n	15632 <d_name+0x366>
   15628:	9b03      	ldr	r3, [sp, #12]
   1562a:	f8c8 3004 	str.w	r3, [r8, #4]
   1562e:	f8cd 800c 	str.w	r8, [sp, #12]
   15632:	7813      	ldrb	r3, [r2, #0]
   15634:	2b45      	cmp	r3, #69	; 0x45
   15636:	f47f ae66 	bne.w	15306 <d_name+0x3a>
   1563a:	3201      	adds	r2, #1
   1563c:	60ea      	str	r2, [r5, #12]
   1563e:	9a03      	ldr	r2, [sp, #12]
   15640:	e669      	b.n	15316 <d_name+0x4a>
   15642:	bf00      	nop

00015644 <d_type>:
   15644:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   15648:	68c2      	ldr	r2, [r0, #12]
   1564a:	7813      	ldrb	r3, [r2, #0]
   1564c:	2b72      	cmp	r3, #114	; 0x72
   1564e:	b083      	sub	sp, #12
   15650:	4604      	mov	r4, r0
   15652:	d058      	beq.n	15706 <d_type+0xc2>
   15654:	2b56      	cmp	r3, #86	; 0x56
   15656:	d056      	beq.n	15706 <d_type+0xc2>
   15658:	2b4b      	cmp	r3, #75	; 0x4b
   1565a:	d054      	beq.n	15706 <d_type+0xc2>
   1565c:	2b44      	cmp	r3, #68	; 0x44
   1565e:	f000 809f 	beq.w	157a0 <d_type+0x15c>
   15662:	f1a3 0130 	sub.w	r1, r3, #48	; 0x30
   15666:	294a      	cmp	r1, #74	; 0x4a
   15668:	f200 808a 	bhi.w	15780 <d_type+0x13c>
   1566c:	e8df f011 	tbh	[pc, r1, lsl #1]
   15670:	012a012a 	.word	0x012a012a
   15674:	012a012a 	.word	0x012a012a
   15678:	012a012a 	.word	0x012a012a
   1567c:	012a012a 	.word	0x012a012a
   15680:	012a012a 	.word	0x012a012a
   15684:	00880088 	.word	0x00880088
   15688:	00880088 	.word	0x00880088
   1568c:	00880088 	.word	0x00880088
   15690:	020b0088 	.word	0x020b0088
   15694:	01520088 	.word	0x01520088
   15698:	00880088 	.word	0x00880088
   1569c:	0160014c 	.word	0x0160014c
   156a0:	00880088 	.word	0x00880088
   156a4:	00880088 	.word	0x00880088
   156a8:	016e0088 	.word	0x016e0088
   156ac:	0186012a 	.word	0x0186012a
   156b0:	008801c3 	.word	0x008801c3
   156b4:	01a20194 	.word	0x01a20194
   156b8:	01f301d1 	.word	0x01f301d1
   156bc:	00880088 	.word	0x00880088
   156c0:	00880088 	.word	0x00880088
   156c4:	0088012a 	.word	0x0088012a
   156c8:	00880088 	.word	0x00880088
   156cc:	00880088 	.word	0x00880088
   156d0:	010c0088 	.word	0x010c0088
   156d4:	010c010c 	.word	0x010c010c
   156d8:	010c010c 	.word	0x010c010c
   156dc:	010c010c 	.word	0x010c010c
   156e0:	010c010c 	.word	0x010c010c
   156e4:	0088010c 	.word	0x0088010c
   156e8:	010c010c 	.word	0x010c010c
   156ec:	010c010c 	.word	0x010c010c
   156f0:	00880088 	.word	0x00880088
   156f4:	010c0088 	.word	0x010c0088
   156f8:	013e010c 	.word	0x013e010c
   156fc:	010c010c 	.word	0x010c010c
   15700:	010c010c 	.word	0x010c010c
   15704:	010c      	.short	0x010c
   15706:	2200      	movs	r2, #0
   15708:	a901      	add	r1, sp, #4
   1570a:	4620      	mov	r0, r4
   1570c:	f7fe fd56 	bl	141bc <d_cv_qualifiers>
   15710:	4605      	mov	r5, r0
   15712:	2800      	cmp	r0, #0
   15714:	d034      	beq.n	15780 <d_type+0x13c>
   15716:	68e3      	ldr	r3, [r4, #12]
   15718:	781b      	ldrb	r3, [r3, #0]
   1571a:	2b46      	cmp	r3, #70	; 0x46
   1571c:	4620      	mov	r0, r4
   1571e:	d034      	beq.n	1578a <d_type+0x146>
   15720:	f7ff ff90 	bl	15644 <d_type>
   15724:	6028      	str	r0, [r5, #0]
   15726:	b358      	cbz	r0, 15780 <d_type+0x13c>
   15728:	7803      	ldrb	r3, [r0, #0]
   1572a:	3b1f      	subs	r3, #31
   1572c:	2b01      	cmp	r3, #1
   1572e:	d930      	bls.n	15792 <d_type+0x14e>
   15730:	9a01      	ldr	r2, [sp, #4]
   15732:	b32a      	cbz	r2, 15780 <d_type+0x13c>
   15734:	6a23      	ldr	r3, [r4, #32]
   15736:	6a61      	ldr	r1, [r4, #36]	; 0x24
   15738:	428b      	cmp	r3, r1
   1573a:	da21      	bge.n	15780 <d_type+0x13c>
   1573c:	69e0      	ldr	r0, [r4, #28]
   1573e:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
   15742:	9d01      	ldr	r5, [sp, #4]
   15744:	1c59      	adds	r1, r3, #1
   15746:	4628      	mov	r0, r5
   15748:	6221      	str	r1, [r4, #32]
   1574a:	b003      	add	sp, #12
   1574c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   15750:	2301      	movs	r3, #1
   15752:	6b45      	ldr	r5, [r0, #52]	; 0x34
   15754:	6343      	str	r3, [r0, #52]	; 0x34
   15756:	f7ff fb51 	bl	14dfc <d_expression_1>
   1575a:	6365      	str	r5, [r4, #52]	; 0x34
   1575c:	4602      	mov	r2, r0
   1575e:	2300      	movs	r3, #0
   15760:	2142      	movs	r1, #66	; 0x42
   15762:	4620      	mov	r0, r4
   15764:	f7fe fcde 	bl	14124 <d_make_comp>
   15768:	4605      	mov	r5, r0
   1576a:	9001      	str	r0, [sp, #4]
   1576c:	b140      	cbz	r0, 15780 <d_type+0x13c>
   1576e:	68e3      	ldr	r3, [r4, #12]
   15770:	781a      	ldrb	r2, [r3, #0]
   15772:	b12a      	cbz	r2, 15780 <d_type+0x13c>
   15774:	1c5a      	adds	r2, r3, #1
   15776:	60e2      	str	r2, [r4, #12]
   15778:	781b      	ldrb	r3, [r3, #0]
   1577a:	2b45      	cmp	r3, #69	; 0x45
   1577c:	f000 80aa 	beq.w	158d4 <d_type+0x290>
   15780:	2500      	movs	r5, #0
   15782:	4628      	mov	r0, r5
   15784:	b003      	add	sp, #12
   15786:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   1578a:	f000 fd53 	bl	16234 <d_function_type>
   1578e:	6028      	str	r0, [r5, #0]
   15790:	e7c9      	b.n	15726 <d_type+0xe2>
   15792:	9a01      	ldr	r2, [sp, #4]
   15794:	6843      	ldr	r3, [r0, #4]
   15796:	6042      	str	r2, [r0, #4]
   15798:	682a      	ldr	r2, [r5, #0]
   1579a:	9201      	str	r2, [sp, #4]
   1579c:	602b      	str	r3, [r5, #0]
   1579e:	e7c7      	b.n	15730 <d_type+0xec>
   157a0:	7853      	ldrb	r3, [r2, #1]
   157a2:	2b78      	cmp	r3, #120	; 0x78
   157a4:	d0af      	beq.n	15706 <d_type+0xc2>
   157a6:	1c53      	adds	r3, r2, #1
   157a8:	60c3      	str	r3, [r0, #12]
   157aa:	7853      	ldrb	r3, [r2, #1]
   157ac:	2b00      	cmp	r3, #0
   157ae:	d0e7      	beq.n	15780 <d_type+0x13c>
   157b0:	1c93      	adds	r3, r2, #2
   157b2:	60c3      	str	r3, [r0, #12]
   157b4:	7853      	ldrb	r3, [r2, #1]
   157b6:	3b46      	subs	r3, #70	; 0x46
   157b8:	2b30      	cmp	r3, #48	; 0x30
   157ba:	d8e1      	bhi.n	15780 <d_type+0x13c>
   157bc:	a101      	add	r1, pc, #4	; (adr r1, 157c4 <d_type+0x180>)
   157be:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
   157c2:	bf00      	nop
   157c4:	00015caf 	.word	0x00015caf
   157c8:	00015781 	.word	0x00015781
   157cc:	00015781 	.word	0x00015781
   157d0:	00015781 	.word	0x00015781
   157d4:	00015781 	.word	0x00015781
   157d8:	00015781 	.word	0x00015781
   157dc:	00015781 	.word	0x00015781
   157e0:	00015781 	.word	0x00015781
   157e4:	00015781 	.word	0x00015781
   157e8:	00015781 	.word	0x00015781
   157ec:	00015781 	.word	0x00015781
   157f0:	00015781 	.word	0x00015781
   157f4:	00015781 	.word	0x00015781
   157f8:	00015781 	.word	0x00015781
   157fc:	00015751 	.word	0x00015751
   15800:	00015781 	.word	0x00015781
   15804:	00015781 	.word	0x00015781
   15808:	00015781 	.word	0x00015781
   1580c:	00015781 	.word	0x00015781
   15810:	00015781 	.word	0x00015781
   15814:	00015781 	.word	0x00015781
   15818:	00015781 	.word	0x00015781
   1581c:	00015781 	.word	0x00015781
   15820:	00015781 	.word	0x00015781
   15824:	00015781 	.word	0x00015781
   15828:	00015781 	.word	0x00015781
   1582c:	00015781 	.word	0x00015781
   15830:	00015c83 	.word	0x00015c83
   15834:	00015781 	.word	0x00015781
   15838:	00015c57 	.word	0x00015c57
   1583c:	00015c37 	.word	0x00015c37
   15840:	00015c0d 	.word	0x00015c0d
   15844:	00015bdf 	.word	0x00015bdf
   15848:	00015781 	.word	0x00015781
   1584c:	00015bb1 	.word	0x00015bb1
   15850:	00015b8d 	.word	0x00015b8d
   15854:	00015781 	.word	0x00015781
   15858:	00015781 	.word	0x00015781
   1585c:	00015781 	.word	0x00015781
   15860:	00015781 	.word	0x00015781
   15864:	00015b53 	.word	0x00015b53
   15868:	00015781 	.word	0x00015781
   1586c:	00015b3d 	.word	0x00015b3d
   15870:	00015781 	.word	0x00015781
   15874:	00015781 	.word	0x00015781
   15878:	00015b0f 	.word	0x00015b0f
   1587c:	00015751 	.word	0x00015751
   15880:	00015781 	.word	0x00015781
   15884:	00015ad9 	.word	0x00015ad9
   15888:	6960      	ldr	r0, [r4, #20]
   1588a:	69a5      	ldr	r5, [r4, #24]
   1588c:	49bc      	ldr	r1, [pc, #752]	; (15b80 <d_type+0x53c>)
   1588e:	3b61      	subs	r3, #97	; 0x61
   15890:	eb03 0383 	add.w	r3, r3, r3, lsl #2
   15894:	42a8      	cmp	r0, r5
   15896:	eb01 0383 	add.w	r3, r1, r3, lsl #2
   1589a:	f280 823a 	bge.w	15d12 <d_type+0x6ce>
   1589e:	eb00 0140 	add.w	r1, r0, r0, lsl #1
   158a2:	6926      	ldr	r6, [r4, #16]
   158a4:	0089      	lsls	r1, r1, #2
   158a6:	3001      	adds	r0, #1
   158a8:	1875      	adds	r5, r6, r1
   158aa:	6160      	str	r0, [r4, #20]
   158ac:	f000 8231 	beq.w	15d12 <d_type+0x6ce>
   158b0:	2027      	movs	r0, #39	; 0x27
   158b2:	5470      	strb	r0, [r6, r1]
   158b4:	606b      	str	r3, [r5, #4]
   158b6:	6859      	ldr	r1, [r3, #4]
   158b8:	6b23      	ldr	r3, [r4, #48]	; 0x30
   158ba:	3201      	adds	r2, #1
   158bc:	440b      	add	r3, r1
   158be:	60e2      	str	r2, [r4, #12]
   158c0:	6323      	str	r3, [r4, #48]	; 0x30
   158c2:	e75e      	b.n	15782 <d_type+0x13e>
   158c4:	4620      	mov	r0, r4
   158c6:	f7ff fd01 	bl	152cc <d_name>
   158ca:	4605      	mov	r5, r0
   158cc:	9001      	str	r0, [sp, #4]
   158ce:	2d00      	cmp	r5, #0
   158d0:	f43f af56 	beq.w	15780 <d_type+0x13c>
   158d4:	6a23      	ldr	r3, [r4, #32]
   158d6:	6a62      	ldr	r2, [r4, #36]	; 0x24
   158d8:	4293      	cmp	r3, r2
   158da:	f6bf af51 	bge.w	15780 <d_type+0x13c>
   158de:	69e1      	ldr	r1, [r4, #28]
   158e0:	1c5a      	adds	r2, r3, #1
   158e2:	f841 5023 	str.w	r5, [r1, r3, lsl #2]
   158e6:	9d01      	ldr	r5, [sp, #4]
   158e8:	6222      	str	r2, [r4, #32]
   158ea:	e74a      	b.n	15782 <d_type+0x13e>
   158ec:	3201      	adds	r2, #1
   158ee:	60e2      	str	r2, [r4, #12]
   158f0:	4620      	mov	r0, r4
   158f2:	f7fe fde9 	bl	144c8 <d_source_name>
   158f6:	2300      	movs	r3, #0
   158f8:	4602      	mov	r2, r0
   158fa:	2128      	movs	r1, #40	; 0x28
   158fc:	4620      	mov	r0, r4
   158fe:	f7fe fc11 	bl	14124 <d_make_comp>
   15902:	4605      	mov	r5, r0
   15904:	9001      	str	r0, [sp, #4]
   15906:	e7e2      	b.n	158ce <d_type+0x28a>
   15908:	4620      	mov	r0, r4
   1590a:	f000 fc93 	bl	16234 <d_function_type>
   1590e:	4605      	mov	r5, r0
   15910:	9001      	str	r0, [sp, #4]
   15912:	e7dc      	b.n	158ce <d_type+0x28a>
   15914:	3201      	adds	r2, #1
   15916:	60e2      	str	r2, [r4, #12]
   15918:	4620      	mov	r0, r4
   1591a:	f7ff fe93 	bl	15644 <d_type>
   1591e:	2300      	movs	r3, #0
   15920:	4602      	mov	r2, r0
   15922:	2125      	movs	r1, #37	; 0x25
   15924:	4620      	mov	r0, r4
   15926:	f7fe fbfd 	bl	14124 <d_make_comp>
   1592a:	4605      	mov	r5, r0
   1592c:	9001      	str	r0, [sp, #4]
   1592e:	e7ce      	b.n	158ce <d_type+0x28a>
   15930:	3201      	adds	r2, #1
   15932:	60e2      	str	r2, [r4, #12]
   15934:	4620      	mov	r0, r4
   15936:	f7ff fe85 	bl	15644 <d_type>
   1593a:	2300      	movs	r3, #0
   1593c:	4602      	mov	r2, r0
   1593e:	2126      	movs	r1, #38	; 0x26
   15940:	4620      	mov	r0, r4
   15942:	f7fe fbef 	bl	14124 <d_make_comp>
   15946:	4605      	mov	r5, r0
   15948:	9001      	str	r0, [sp, #4]
   1594a:	e7c0      	b.n	158ce <d_type+0x28a>
   1594c:	3201      	adds	r2, #1
   1594e:	60e2      	str	r2, [r4, #12]
   15950:	4620      	mov	r0, r4
   15952:	f7ff fe77 	bl	15644 <d_type>
   15956:	4605      	mov	r5, r0
   15958:	2800      	cmp	r0, #0
   1595a:	f000 80bb 	beq.w	15ad4 <d_type+0x490>
   1595e:	4620      	mov	r0, r4
   15960:	f7ff fe70 	bl	15644 <d_type>
   15964:	2800      	cmp	r0, #0
   15966:	f000 80b5 	beq.w	15ad4 <d_type+0x490>
   1596a:	4603      	mov	r3, r0
   1596c:	462a      	mov	r2, r5
   1596e:	212b      	movs	r1, #43	; 0x2b
   15970:	4620      	mov	r0, r4
   15972:	f7fe fbd7 	bl	14124 <d_make_comp>
   15976:	4605      	mov	r5, r0
   15978:	9501      	str	r5, [sp, #4]
   1597a:	e7a8      	b.n	158ce <d_type+0x28a>
   1597c:	3201      	adds	r2, #1
   1597e:	60e2      	str	r2, [r4, #12]
   15980:	4620      	mov	r0, r4
   15982:	f7ff fe5f 	bl	15644 <d_type>
   15986:	2300      	movs	r3, #0
   15988:	4602      	mov	r2, r0
   1598a:	2124      	movs	r1, #36	; 0x24
   1598c:	4620      	mov	r0, r4
   1598e:	f7fe fbc9 	bl	14124 <d_make_comp>
   15992:	4605      	mov	r5, r0
   15994:	9001      	str	r0, [sp, #4]
   15996:	e79a      	b.n	158ce <d_type+0x28a>
   15998:	3201      	adds	r2, #1
   1599a:	60e2      	str	r2, [r4, #12]
   1599c:	4620      	mov	r0, r4
   1599e:	f7ff fe51 	bl	15644 <d_type>
   159a2:	2300      	movs	r3, #0
   159a4:	4602      	mov	r2, r0
   159a6:	2123      	movs	r1, #35	; 0x23
   159a8:	4620      	mov	r0, r4
   159aa:	f7fe fbbb 	bl	14124 <d_make_comp>
   159ae:	4605      	mov	r5, r0
   159b0:	9001      	str	r0, [sp, #4]
   159b2:	e78c      	b.n	158ce <d_type+0x28a>
   159b4:	7853      	ldrb	r3, [r2, #1]
   159b6:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
   159ba:	2a09      	cmp	r2, #9
   159bc:	d905      	bls.n	159ca <d_type+0x386>
   159be:	2b5f      	cmp	r3, #95	; 0x5f
   159c0:	d003      	beq.n	159ca <d_type+0x386>
   159c2:	3b41      	subs	r3, #65	; 0x41
   159c4:	2b19      	cmp	r3, #25
   159c6:	f200 81c3 	bhi.w	15d50 <d_type+0x70c>
   159ca:	2100      	movs	r1, #0
   159cc:	4620      	mov	r0, r4
   159ce:	f7fe fdf3 	bl	145b8 <d_substitution>
   159d2:	68e3      	ldr	r3, [r4, #12]
   159d4:	9001      	str	r0, [sp, #4]
   159d6:	781b      	ldrb	r3, [r3, #0]
   159d8:	2b49      	cmp	r3, #73	; 0x49
   159da:	4605      	mov	r5, r0
   159dc:	f47f aed1 	bne.w	15782 <d_type+0x13e>
   159e0:	4620      	mov	r0, r4
   159e2:	f7ff fc69 	bl	152b8 <d_template_args>
   159e6:	462a      	mov	r2, r5
   159e8:	4603      	mov	r3, r0
   159ea:	2104      	movs	r1, #4
   159ec:	4620      	mov	r0, r4
   159ee:	f7fe fb99 	bl	14124 <d_make_comp>
   159f2:	4605      	mov	r5, r0
   159f4:	e7c0      	b.n	15978 <d_type+0x334>
   159f6:	3201      	adds	r2, #1
   159f8:	60e2      	str	r2, [r4, #12]
   159fa:	4620      	mov	r0, r4
   159fc:	f7ff fe22 	bl	15644 <d_type>
   15a00:	2300      	movs	r3, #0
   15a02:	4602      	mov	r2, r0
   15a04:	2122      	movs	r1, #34	; 0x22
   15a06:	4620      	mov	r0, r4
   15a08:	f7fe fb8c 	bl	14124 <d_make_comp>
   15a0c:	4605      	mov	r5, r0
   15a0e:	9001      	str	r0, [sp, #4]
   15a10:	e75d      	b.n	158ce <d_type+0x28a>
   15a12:	4620      	mov	r0, r4
   15a14:	f7fe fd36 	bl	14484 <d_template_param>
   15a18:	68e6      	ldr	r6, [r4, #12]
   15a1a:	9001      	str	r0, [sp, #4]
   15a1c:	7833      	ldrb	r3, [r6, #0]
   15a1e:	2b49      	cmp	r3, #73	; 0x49
   15a20:	4605      	mov	r5, r0
   15a22:	f47f af54 	bne.w	158ce <d_type+0x28a>
   15a26:	6ba3      	ldr	r3, [r4, #56]	; 0x38
   15a28:	2b00      	cmp	r3, #0
   15a2a:	f040 81a9 	bne.w	15d80 <d_type+0x73c>
   15a2e:	2800      	cmp	r0, #0
   15a30:	f43f aea6 	beq.w	15780 <d_type+0x13c>
   15a34:	6a23      	ldr	r3, [r4, #32]
   15a36:	6a62      	ldr	r2, [r4, #36]	; 0x24
   15a38:	4293      	cmp	r3, r2
   15a3a:	f6bf aea1 	bge.w	15780 <d_type+0x13c>
   15a3e:	69e1      	ldr	r1, [r4, #28]
   15a40:	1c5a      	adds	r2, r3, #1
   15a42:	f841 0023 	str.w	r0, [r1, r3, lsl #2]
   15a46:	6222      	str	r2, [r4, #32]
   15a48:	4620      	mov	r0, r4
   15a4a:	9d01      	ldr	r5, [sp, #4]
   15a4c:	f7ff fc34 	bl	152b8 <d_template_args>
   15a50:	462a      	mov	r2, r5
   15a52:	4603      	mov	r3, r0
   15a54:	e7c9      	b.n	159ea <d_type+0x3a6>
   15a56:	3201      	adds	r2, #1
   15a58:	60e2      	str	r2, [r4, #12]
   15a5a:	4620      	mov	r0, r4
   15a5c:	f7fe fd34 	bl	144c8 <d_source_name>
   15a60:	68e3      	ldr	r3, [r4, #12]
   15a62:	9001      	str	r0, [sp, #4]
   15a64:	781b      	ldrb	r3, [r3, #0]
   15a66:	2b49      	cmp	r3, #73	; 0x49
   15a68:	4605      	mov	r5, r0
   15a6a:	f000 817e 	beq.w	15d6a <d_type+0x726>
   15a6e:	4620      	mov	r0, r4
   15a70:	f7ff fde8 	bl	15644 <d_type>
   15a74:	9b01      	ldr	r3, [sp, #4]
   15a76:	4602      	mov	r2, r0
   15a78:	2121      	movs	r1, #33	; 0x21
   15a7a:	4620      	mov	r0, r4
   15a7c:	f7fe fb52 	bl	14124 <d_make_comp>
   15a80:	4605      	mov	r5, r0
   15a82:	9001      	str	r0, [sp, #4]
   15a84:	e723      	b.n	158ce <d_type+0x28a>
   15a86:	1c51      	adds	r1, r2, #1
   15a88:	60e1      	str	r1, [r4, #12]
   15a8a:	7853      	ldrb	r3, [r2, #1]
   15a8c:	2b5f      	cmp	r3, #95	; 0x5f
   15a8e:	f000 8144 	beq.w	15d1a <d_type+0x6d6>
   15a92:	3b30      	subs	r3, #48	; 0x30
   15a94:	2b09      	cmp	r3, #9
   15a96:	f200 814e 	bhi.w	15d36 <d_type+0x6f2>
   15a9a:	460b      	mov	r3, r1
   15a9c:	3301      	adds	r3, #1
   15a9e:	60e3      	str	r3, [r4, #12]
   15aa0:	781a      	ldrb	r2, [r3, #0]
   15aa2:	3a30      	subs	r2, #48	; 0x30
   15aa4:	2a09      	cmp	r2, #9
   15aa6:	d9f9      	bls.n	15a9c <d_type+0x458>
   15aa8:	6962      	ldr	r2, [r4, #20]
   15aaa:	69a0      	ldr	r0, [r4, #24]
   15aac:	4282      	cmp	r2, r0
   15aae:	da11      	bge.n	15ad4 <d_type+0x490>
   15ab0:	eb02 0042 	add.w	r0, r2, r2, lsl #1
   15ab4:	6926      	ldr	r6, [r4, #16]
   15ab6:	0080      	lsls	r0, r0, #2
   15ab8:	3201      	adds	r2, #1
   15aba:	1835      	adds	r5, r6, r0
   15abc:	6162      	str	r2, [r4, #20]
   15abe:	d009      	beq.n	15ad4 <d_type+0x490>
   15ac0:	1a5a      	subs	r2, r3, r1
   15ac2:	d007      	beq.n	15ad4 <d_type+0x490>
   15ac4:	2700      	movs	r7, #0
   15ac6:	5437      	strb	r7, [r6, r0]
   15ac8:	6069      	str	r1, [r5, #4]
   15aca:	60aa      	str	r2, [r5, #8]
   15acc:	781a      	ldrb	r2, [r3, #0]
   15ace:	2a5f      	cmp	r2, #95	; 0x5f
   15ad0:	f000 8190 	beq.w	15df4 <d_type+0x7b0>
   15ad4:	2500      	movs	r5, #0
   15ad6:	e74f      	b.n	15978 <d_type+0x334>
   15ad8:	7893      	ldrb	r3, [r2, #2]
   15ada:	2b5f      	cmp	r3, #95	; 0x5f
   15adc:	f000 8180 	beq.w	15de0 <d_type+0x79c>
   15ae0:	f7fe fc9c 	bl	1441c <d_number_component>
   15ae4:	4605      	mov	r5, r0
   15ae6:	2d00      	cmp	r5, #0
   15ae8:	f43f af46 	beq.w	15978 <d_type+0x334>
   15aec:	68e3      	ldr	r3, [r4, #12]
   15aee:	781a      	ldrb	r2, [r3, #0]
   15af0:	2a5f      	cmp	r2, #95	; 0x5f
   15af2:	d1ef      	bne.n	15ad4 <d_type+0x490>
   15af4:	3301      	adds	r3, #1
   15af6:	60e3      	str	r3, [r4, #12]
   15af8:	4620      	mov	r0, r4
   15afa:	f7ff fda3 	bl	15644 <d_type>
   15afe:	462a      	mov	r2, r5
   15b00:	4603      	mov	r3, r0
   15b02:	212d      	movs	r1, #45	; 0x2d
   15b04:	4620      	mov	r0, r4
   15b06:	f7fe fb0d 	bl	14124 <d_make_comp>
   15b0a:	4605      	mov	r5, r0
   15b0c:	e734      	b.n	15978 <d_type+0x334>
   15b0e:	6942      	ldr	r2, [r0, #20]
   15b10:	6983      	ldr	r3, [r0, #24]
   15b12:	429a      	cmp	r2, r3
   15b14:	f280 80fd 	bge.w	15d12 <d_type+0x6ce>
   15b18:	230c      	movs	r3, #12
   15b1a:	6901      	ldr	r1, [r0, #16]
   15b1c:	fb03 f302 	mul.w	r3, r3, r2
   15b20:	18cd      	adds	r5, r1, r3
   15b22:	f102 0201 	add.w	r2, r2, #1
   15b26:	6142      	str	r2, [r0, #20]
   15b28:	f000 80f3 	beq.w	15d12 <d_type+0x6ce>
   15b2c:	4a15      	ldr	r2, [pc, #84]	; (15b84 <d_type+0x540>)
   15b2e:	2027      	movs	r0, #39	; 0x27
   15b30:	54c8      	strb	r0, [r1, r3]
   15b32:	606a      	str	r2, [r5, #4]
   15b34:	6b23      	ldr	r3, [r4, #48]	; 0x30
   15b36:	3308      	adds	r3, #8
   15b38:	6323      	str	r3, [r4, #48]	; 0x30
   15b3a:	e622      	b.n	15782 <d_type+0x13e>
   15b3c:	f7ff fd82 	bl	15644 <d_type>
   15b40:	2300      	movs	r3, #0
   15b42:	4602      	mov	r2, r0
   15b44:	214a      	movs	r1, #74	; 0x4a
   15b46:	4620      	mov	r0, r4
   15b48:	f7fe faec 	bl	14124 <d_make_comp>
   15b4c:	4605      	mov	r5, r0
   15b4e:	9001      	str	r0, [sp, #4]
   15b50:	e6bd      	b.n	158ce <d_type+0x28a>
   15b52:	6942      	ldr	r2, [r0, #20]
   15b54:	6983      	ldr	r3, [r0, #24]
   15b56:	429a      	cmp	r2, r3
   15b58:	f280 80db 	bge.w	15d12 <d_type+0x6ce>
   15b5c:	230c      	movs	r3, #12
   15b5e:	6901      	ldr	r1, [r0, #16]
   15b60:	fb03 f302 	mul.w	r3, r3, r2
   15b64:	18cd      	adds	r5, r1, r3
   15b66:	f102 0201 	add.w	r2, r2, #1
   15b6a:	6142      	str	r2, [r0, #20]
   15b6c:	f000 80d1 	beq.w	15d12 <d_type+0x6ce>
   15b70:	2027      	movs	r0, #39	; 0x27
   15b72:	4a05      	ldr	r2, [pc, #20]	; (15b88 <d_type+0x544>)
   15b74:	54c8      	strb	r0, [r1, r3]
   15b76:	606a      	str	r2, [r5, #4]
   15b78:	6b23      	ldr	r3, [r4, #48]	; 0x30
   15b7a:	3311      	adds	r3, #17
   15b7c:	6323      	str	r3, [r4, #48]	; 0x30
   15b7e:	e600      	b.n	15782 <d_type+0x13e>
   15b80:	0002384c 	.word	0x0002384c
   15b84:	00023aa4 	.word	0x00023aa4
   15b88:	00023acc 	.word	0x00023acc
   15b8c:	6942      	ldr	r2, [r0, #20]
   15b8e:	6983      	ldr	r3, [r0, #24]
   15b90:	429a      	cmp	r2, r3
   15b92:	f280 80be 	bge.w	15d12 <d_type+0x6ce>
   15b96:	230c      	movs	r3, #12
   15b98:	6901      	ldr	r1, [r0, #16]
   15b9a:	fb03 f302 	mul.w	r3, r3, r2
   15b9e:	18cd      	adds	r5, r1, r3
   15ba0:	f102 0201 	add.w	r2, r2, #1
   15ba4:	6142      	str	r2, [r0, #20]
   15ba6:	f000 80b4 	beq.w	15d12 <d_type+0x6ce>
   15baa:	2027      	movs	r0, #39	; 0x27
   15bac:	4a92      	ldr	r2, [pc, #584]	; (15df8 <d_type+0x7b4>)
   15bae:	e7bf      	b.n	15b30 <d_type+0x4ec>
   15bb0:	6942      	ldr	r2, [r0, #20]
   15bb2:	6983      	ldr	r3, [r0, #24]
   15bb4:	429a      	cmp	r2, r3
   15bb6:	f280 80ac 	bge.w	15d12 <d_type+0x6ce>
   15bba:	230c      	movs	r3, #12
   15bbc:	6901      	ldr	r1, [r0, #16]
   15bbe:	fb03 f302 	mul.w	r3, r3, r2
   15bc2:	18cd      	adds	r5, r1, r3
   15bc4:	f102 0201 	add.w	r2, r2, #1
   15bc8:	6142      	str	r2, [r0, #20]
   15bca:	f000 80a2 	beq.w	15d12 <d_type+0x6ce>
   15bce:	2027      	movs	r0, #39	; 0x27
   15bd0:	4a8a      	ldr	r2, [pc, #552]	; (15dfc <d_type+0x7b8>)
   15bd2:	54c8      	strb	r0, [r1, r3]
   15bd4:	606a      	str	r2, [r5, #4]
   15bd6:	6b23      	ldr	r3, [r4, #48]	; 0x30
   15bd8:	3304      	adds	r3, #4
   15bda:	6323      	str	r3, [r4, #48]	; 0x30
   15bdc:	e5d1      	b.n	15782 <d_type+0x13e>
   15bde:	6942      	ldr	r2, [r0, #20]
   15be0:	6983      	ldr	r3, [r0, #24]
   15be2:	429a      	cmp	r2, r3
   15be4:	f280 8095 	bge.w	15d12 <d_type+0x6ce>
   15be8:	230c      	movs	r3, #12
   15bea:	6901      	ldr	r1, [r0, #16]
   15bec:	fb03 f302 	mul.w	r3, r3, r2
   15bf0:	18cd      	adds	r5, r1, r3
   15bf2:	f102 0201 	add.w	r2, r2, #1
   15bf6:	6142      	str	r2, [r0, #20]
   15bf8:	f000 808b 	beq.w	15d12 <d_type+0x6ce>
   15bfc:	4a80      	ldr	r2, [pc, #512]	; (15e00 <d_type+0x7bc>)
   15bfe:	2027      	movs	r0, #39	; 0x27
   15c00:	54c8      	strb	r0, [r1, r3]
   15c02:	606a      	str	r2, [r5, #4]
   15c04:	6b23      	ldr	r3, [r4, #48]	; 0x30
   15c06:	3309      	adds	r3, #9
   15c08:	6323      	str	r3, [r4, #48]	; 0x30
   15c0a:	e5ba      	b.n	15782 <d_type+0x13e>
   15c0c:	6942      	ldr	r2, [r0, #20]
   15c0e:	6983      	ldr	r3, [r0, #24]
   15c10:	429a      	cmp	r2, r3
   15c12:	da7e      	bge.n	15d12 <d_type+0x6ce>
   15c14:	230c      	movs	r3, #12
   15c16:	6901      	ldr	r1, [r0, #16]
   15c18:	fb03 f302 	mul.w	r3, r3, r2
   15c1c:	18cd      	adds	r5, r1, r3
   15c1e:	f102 0201 	add.w	r2, r2, #1
   15c22:	6142      	str	r2, [r0, #20]
   15c24:	d075      	beq.n	15d12 <d_type+0x6ce>
   15c26:	2027      	movs	r0, #39	; 0x27
   15c28:	4a76      	ldr	r2, [pc, #472]	; (15e04 <d_type+0x7c0>)
   15c2a:	54c8      	strb	r0, [r1, r3]
   15c2c:	606a      	str	r2, [r5, #4]
   15c2e:	6b23      	ldr	r3, [r4, #48]	; 0x30
   15c30:	330a      	adds	r3, #10
   15c32:	6323      	str	r3, [r4, #48]	; 0x30
   15c34:	e5a5      	b.n	15782 <d_type+0x13e>
   15c36:	6942      	ldr	r2, [r0, #20]
   15c38:	6983      	ldr	r3, [r0, #24]
   15c3a:	429a      	cmp	r2, r3
   15c3c:	da69      	bge.n	15d12 <d_type+0x6ce>
   15c3e:	230c      	movs	r3, #12
   15c40:	6901      	ldr	r1, [r0, #16]
   15c42:	fb03 f302 	mul.w	r3, r3, r2
   15c46:	18cd      	adds	r5, r1, r3
   15c48:	f102 0201 	add.w	r2, r2, #1
   15c4c:	6142      	str	r2, [r0, #20]
   15c4e:	d060      	beq.n	15d12 <d_type+0x6ce>
   15c50:	2027      	movs	r0, #39	; 0x27
   15c52:	4a6d      	ldr	r2, [pc, #436]	; (15e08 <d_type+0x7c4>)
   15c54:	e7d4      	b.n	15c00 <d_type+0x5bc>
   15c56:	6942      	ldr	r2, [r0, #20]
   15c58:	6983      	ldr	r3, [r0, #24]
   15c5a:	429a      	cmp	r2, r3
   15c5c:	f6bf ad90 	bge.w	15780 <d_type+0x13c>
   15c60:	230c      	movs	r3, #12
   15c62:	6901      	ldr	r1, [r0, #16]
   15c64:	fb03 f302 	mul.w	r3, r3, r2
   15c68:	18cd      	adds	r5, r1, r3
   15c6a:	f102 0201 	add.w	r2, r2, #1
   15c6e:	6142      	str	r2, [r0, #20]
   15c70:	f43f ad87 	beq.w	15782 <d_type+0x13e>
   15c74:	2000      	movs	r0, #0
   15c76:	54c8      	strb	r0, [r1, r3]
   15c78:	4a64      	ldr	r2, [pc, #400]	; (15e0c <d_type+0x7c8>)
   15c7a:	606a      	str	r2, [r5, #4]
   15c7c:	230e      	movs	r3, #14
   15c7e:	60ab      	str	r3, [r5, #8]
   15c80:	e57f      	b.n	15782 <d_type+0x13e>
   15c82:	6942      	ldr	r2, [r0, #20]
   15c84:	6983      	ldr	r3, [r0, #24]
   15c86:	429a      	cmp	r2, r3
   15c88:	f6bf ad7a 	bge.w	15780 <d_type+0x13c>
   15c8c:	230c      	movs	r3, #12
   15c8e:	6901      	ldr	r1, [r0, #16]
   15c90:	fb03 f302 	mul.w	r3, r3, r2
   15c94:	18cd      	adds	r5, r1, r3
   15c96:	f102 0201 	add.w	r2, r2, #1
   15c9a:	6142      	str	r2, [r0, #20]
   15c9c:	f43f ad71 	beq.w	15782 <d_type+0x13e>
   15ca0:	2000      	movs	r0, #0
   15ca2:	54c8      	strb	r0, [r1, r3]
   15ca4:	4a5a      	ldr	r2, [pc, #360]	; (15e10 <d_type+0x7cc>)
   15ca6:	606a      	str	r2, [r5, #4]
   15ca8:	2304      	movs	r3, #4
   15caa:	60ab      	str	r3, [r5, #8]
   15cac:	e569      	b.n	15782 <d_type+0x13e>
   15cae:	6943      	ldr	r3, [r0, #20]
   15cb0:	6981      	ldr	r1, [r0, #24]
   15cb2:	428b      	cmp	r3, r1
   15cb4:	da7a      	bge.n	15dac <d_type+0x768>
   15cb6:	6900      	ldr	r0, [r0, #16]
   15cb8:	eb03 0143 	add.w	r1, r3, r3, lsl #1
   15cbc:	0089      	lsls	r1, r1, #2
   15cbe:	3301      	adds	r3, #1
   15cc0:	1845      	adds	r5, r0, r1
   15cc2:	262c      	movs	r6, #44	; 0x2c
   15cc4:	6163      	str	r3, [r4, #20]
   15cc6:	9501      	str	r5, [sp, #4]
   15cc8:	5446      	strb	r6, [r0, r1]
   15cca:	7893      	ldrb	r3, [r2, #2]
   15ccc:	3b30      	subs	r3, #48	; 0x30
   15cce:	b2db      	uxtb	r3, r3
   15cd0:	2b09      	cmp	r3, #9
   15cd2:	bf94      	ite	ls
   15cd4:	2301      	movls	r3, #1
   15cd6:	2300      	movhi	r3, #0
   15cd8:	812b      	strh	r3, [r5, #8]
   15cda:	d97b      	bls.n	15dd4 <d_type+0x790>
   15cdc:	4620      	mov	r0, r4
   15cde:	f7ff fcb1 	bl	15644 <d_type>
   15ce2:	9b01      	ldr	r3, [sp, #4]
   15ce4:	6068      	str	r0, [r5, #4]
   15ce6:	685b      	ldr	r3, [r3, #4]
   15ce8:	2b00      	cmp	r3, #0
   15cea:	f43f ad49 	beq.w	15780 <d_type+0x13c>
   15cee:	f104 000c 	add.w	r0, r4, #12
   15cf2:	f7fe fb69 	bl	143c8 <d_number.isra.0>
   15cf6:	68e2      	ldr	r2, [r4, #12]
   15cf8:	7813      	ldrb	r3, [r2, #0]
   15cfa:	b113      	cbz	r3, 15d02 <d_type+0x6be>
   15cfc:	1c53      	adds	r3, r2, #1
   15cfe:	60e3      	str	r3, [r4, #12]
   15d00:	7813      	ldrb	r3, [r2, #0]
   15d02:	9d01      	ldr	r5, [sp, #4]
   15d04:	f1a3 0373 	sub.w	r3, r3, #115	; 0x73
   15d08:	fab3 f383 	clz	r3, r3
   15d0c:	095b      	lsrs	r3, r3, #5
   15d0e:	816b      	strh	r3, [r5, #10]
   15d10:	e537      	b.n	15782 <d_type+0x13e>
   15d12:	2300      	movs	r3, #0
   15d14:	9301      	str	r3, [sp, #4]
   15d16:	685b      	ldr	r3, [r3, #4]
   15d18:	deff      	udf	#255	; 0xff
   15d1a:	2500      	movs	r5, #0
   15d1c:	3101      	adds	r1, #1
   15d1e:	60e1      	str	r1, [r4, #12]
   15d20:	4620      	mov	r0, r4
   15d22:	f7ff fc8f 	bl	15644 <d_type>
   15d26:	462a      	mov	r2, r5
   15d28:	4603      	mov	r3, r0
   15d2a:	212a      	movs	r1, #42	; 0x2a
   15d2c:	4620      	mov	r0, r4
   15d2e:	f7fe f9f9 	bl	14124 <d_make_comp>
   15d32:	4605      	mov	r5, r0
   15d34:	e620      	b.n	15978 <d_type+0x334>
   15d36:	2301      	movs	r3, #1
   15d38:	6b65      	ldr	r5, [r4, #52]	; 0x34
   15d3a:	6363      	str	r3, [r4, #52]	; 0x34
   15d3c:	4620      	mov	r0, r4
   15d3e:	f7ff f85d 	bl	14dfc <d_expression_1>
   15d42:	6365      	str	r5, [r4, #52]	; 0x34
   15d44:	4605      	mov	r5, r0
   15d46:	2800      	cmp	r0, #0
   15d48:	f43f aec4 	beq.w	15ad4 <d_type+0x490>
   15d4c:	68e3      	ldr	r3, [r4, #12]
   15d4e:	e6bd      	b.n	15acc <d_type+0x488>
   15d50:	4620      	mov	r0, r4
   15d52:	f7ff fabb 	bl	152cc <d_name>
   15d56:	4605      	mov	r5, r0
   15d58:	9001      	str	r0, [sp, #4]
   15d5a:	2800      	cmp	r0, #0
   15d5c:	f43f ad10 	beq.w	15780 <d_type+0x13c>
   15d60:	7803      	ldrb	r3, [r0, #0]
   15d62:	2b18      	cmp	r3, #24
   15d64:	f47f adb6 	bne.w	158d4 <d_type+0x290>
   15d68:	e50b      	b.n	15782 <d_type+0x13e>
   15d6a:	4620      	mov	r0, r4
   15d6c:	f7ff faa4 	bl	152b8 <d_template_args>
   15d70:	462a      	mov	r2, r5
   15d72:	4603      	mov	r3, r0
   15d74:	2104      	movs	r1, #4
   15d76:	4620      	mov	r0, r4
   15d78:	f7fe f9d4 	bl	14124 <d_make_comp>
   15d7c:	9001      	str	r0, [sp, #4]
   15d7e:	e676      	b.n	15a6e <d_type+0x42a>
   15d80:	4620      	mov	r0, r4
   15d82:	f8d4 9014 	ldr.w	r9, [r4, #20]
   15d86:	f8d4 8020 	ldr.w	r8, [r4, #32]
   15d8a:	6aa7      	ldr	r7, [r4, #40]	; 0x28
   15d8c:	6b25      	ldr	r5, [r4, #48]	; 0x30
   15d8e:	f7ff fa93 	bl	152b8 <d_template_args>
   15d92:	68e2      	ldr	r2, [r4, #12]
   15d94:	7812      	ldrb	r2, [r2, #0]
   15d96:	2a49      	cmp	r2, #73	; 0x49
   15d98:	d00b      	beq.n	15db2 <d_type+0x76e>
   15d9a:	6325      	str	r5, [r4, #48]	; 0x30
   15d9c:	60e6      	str	r6, [r4, #12]
   15d9e:	f8c4 9014 	str.w	r9, [r4, #20]
   15da2:	f8c4 8020 	str.w	r8, [r4, #32]
   15da6:	62a7      	str	r7, [r4, #40]	; 0x28
   15da8:	9d01      	ldr	r5, [sp, #4]
   15daa:	e590      	b.n	158ce <d_type+0x28a>
   15dac:	2300      	movs	r3, #0
   15dae:	701b      	strb	r3, [r3, #0]
   15db0:	deff      	udf	#255	; 0xff
   15db2:	9b01      	ldr	r3, [sp, #4]
   15db4:	2b00      	cmp	r3, #0
   15db6:	f43f ace3 	beq.w	15780 <d_type+0x13c>
   15dba:	6a22      	ldr	r2, [r4, #32]
   15dbc:	6a61      	ldr	r1, [r4, #36]	; 0x24
   15dbe:	428a      	cmp	r2, r1
   15dc0:	f6bf acde 	bge.w	15780 <d_type+0x13c>
   15dc4:	69e5      	ldr	r5, [r4, #28]
   15dc6:	1c51      	adds	r1, r2, #1
   15dc8:	f845 3022 	str.w	r3, [r5, r2, lsl #2]
   15dcc:	9a01      	ldr	r2, [sp, #4]
   15dce:	6221      	str	r1, [r4, #32]
   15dd0:	4603      	mov	r3, r0
   15dd2:	e60a      	b.n	159ea <d_type+0x3a6>
   15dd4:	f104 000c 	add.w	r0, r4, #12
   15dd8:	f7fe faf6 	bl	143c8 <d_number.isra.0>
   15ddc:	9d01      	ldr	r5, [sp, #4]
   15dde:	e77d      	b.n	15cdc <d_type+0x698>
   15de0:	3203      	adds	r2, #3
   15de2:	2301      	movs	r3, #1
   15de4:	6b46      	ldr	r6, [r0, #52]	; 0x34
   15de6:	60c2      	str	r2, [r0, #12]
   15de8:	6343      	str	r3, [r0, #52]	; 0x34
   15dea:	f7ff f807 	bl	14dfc <d_expression_1>
   15dee:	6366      	str	r6, [r4, #52]	; 0x34
   15df0:	4605      	mov	r5, r0
   15df2:	e678      	b.n	15ae6 <d_type+0x4a2>
   15df4:	4619      	mov	r1, r3
   15df6:	e791      	b.n	15d1c <d_type+0x6d8>
   15df8:	00023ab8 	.word	0x00023ab8
   15dfc:	00023a90 	.word	0x00023a90
   15e00:	00023a54 	.word	0x00023a54
   15e04:	00023a7c 	.word	0x00023a7c
   15e08:	00023a68 	.word	0x00023a68
   15e0c:	00023f78 	.word	0x00023f78
   15e10:	00023f70 	.word	0x00023f70

00015e14 <d_operator_name>:
   15e14:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   15e16:	68c3      	ldr	r3, [r0, #12]
   15e18:	781e      	ldrb	r6, [r3, #0]
   15e1a:	4684      	mov	ip, r0
   15e1c:	b326      	cbz	r6, 15e68 <d_operator_name+0x54>
   15e1e:	1c5a      	adds	r2, r3, #1
   15e20:	60c2      	str	r2, [r0, #12]
   15e22:	785a      	ldrb	r2, [r3, #1]
   15e24:	781e      	ldrb	r6, [r3, #0]
   15e26:	2a00      	cmp	r2, #0
   15e28:	d058      	beq.n	15edc <d_operator_name+0xc8>
   15e2a:	1c9a      	adds	r2, r3, #2
   15e2c:	60c2      	str	r2, [r0, #12]
   15e2e:	2e76      	cmp	r6, #118	; 0x76
   15e30:	4604      	mov	r4, r0
   15e32:	f893 e001 	ldrb.w	lr, [r3, #1]
   15e36:	d043      	beq.n	15ec0 <d_operator_name+0xac>
   15e38:	2e63      	cmp	r6, #99	; 0x63
   15e3a:	d116      	bne.n	15e6a <d_operator_name+0x56>
   15e3c:	f1be 0f76 	cmp.w	lr, #118	; 0x76
   15e40:	d113      	bne.n	15e6a <d_operator_name+0x56>
   15e42:	6b43      	ldr	r3, [r0, #52]	; 0x34
   15e44:	6b85      	ldr	r5, [r0, #56]	; 0x38
   15e46:	fab3 f383 	clz	r3, r3
   15e4a:	095b      	lsrs	r3, r3, #5
   15e4c:	6383      	str	r3, [r0, #56]	; 0x38
   15e4e:	f7ff fbf9 	bl	15644 <d_type>
   15e52:	6ba3      	ldr	r3, [r4, #56]	; 0x38
   15e54:	4602      	mov	r2, r0
   15e56:	2b00      	cmp	r3, #0
   15e58:	d052      	beq.n	15f00 <d_operator_name+0xec>
   15e5a:	2300      	movs	r3, #0
   15e5c:	2134      	movs	r1, #52	; 0x34
   15e5e:	4620      	mov	r0, r4
   15e60:	f7fe f960 	bl	14124 <d_make_comp>
   15e64:	63a5      	str	r5, [r4, #56]	; 0x38
   15e66:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   15e68:	46b6      	mov	lr, r6
   15e6a:	4c28      	ldr	r4, [pc, #160]	; (15f0c <d_operator_name+0xf8>)
   15e6c:	2043      	movs	r0, #67	; 0x43
   15e6e:	2200      	movs	r2, #0
   15e70:	e004      	b.n	15e7c <d_operator_name+0x68>
   15e72:	bf94      	ite	ls
   15e74:	1c5a      	addls	r2, r3, #1
   15e76:	4618      	movhi	r0, r3
   15e78:	4282      	cmp	r2, r0
   15e7a:	d02d      	beq.n	15ed8 <d_operator_name+0xc4>
   15e7c:	1a83      	subs	r3, r0, r2
   15e7e:	eb03 73d3 	add.w	r3, r3, r3, lsr #31
   15e82:	eb02 0363 	add.w	r3, r2, r3, asr #1
   15e86:	0119      	lsls	r1, r3, #4
   15e88:	1867      	adds	r7, r4, r1
   15e8a:	5861      	ldr	r1, [r4, r1]
   15e8c:	780d      	ldrb	r5, [r1, #0]
   15e8e:	42b5      	cmp	r5, r6
   15e90:	d1ef      	bne.n	15e72 <d_operator_name+0x5e>
   15e92:	7849      	ldrb	r1, [r1, #1]
   15e94:	4571      	cmp	r1, lr
   15e96:	d1ec      	bne.n	15e72 <d_operator_name+0x5e>
   15e98:	f8dc 3014 	ldr.w	r3, [ip, #20]
   15e9c:	f8dc 2018 	ldr.w	r2, [ip, #24]
   15ea0:	4293      	cmp	r3, r2
   15ea2:	da19      	bge.n	15ed8 <d_operator_name+0xc4>
   15ea4:	eb03 0243 	add.w	r2, r3, r3, lsl #1
   15ea8:	f8dc 1010 	ldr.w	r1, [ip, #16]
   15eac:	0092      	lsls	r2, r2, #2
   15eae:	3301      	adds	r3, #1
   15eb0:	1888      	adds	r0, r1, r2
   15eb2:	f8cc 3014 	str.w	r3, [ip, #20]
   15eb6:	d013      	beq.n	15ee0 <d_operator_name+0xcc>
   15eb8:	2331      	movs	r3, #49	; 0x31
   15eba:	548b      	strb	r3, [r1, r2]
   15ebc:	6047      	str	r7, [r0, #4]
   15ebe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   15ec0:	f1ae 0530 	sub.w	r5, lr, #48	; 0x30
   15ec4:	b2eb      	uxtb	r3, r5
   15ec6:	2b09      	cmp	r3, #9
   15ec8:	d8cf      	bhi.n	15e6a <d_operator_name+0x56>
   15eca:	f7fe fafd 	bl	144c8 <d_source_name>
   15ece:	6963      	ldr	r3, [r4, #20]
   15ed0:	69a2      	ldr	r2, [r4, #24]
   15ed2:	4293      	cmp	r3, r2
   15ed4:	4601      	mov	r1, r0
   15ed6:	db04      	blt.n	15ee2 <d_operator_name+0xce>
   15ed8:	2000      	movs	r0, #0
   15eda:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   15edc:	4696      	mov	lr, r2
   15ede:	e7c4      	b.n	15e6a <d_operator_name+0x56>
   15ee0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   15ee2:	eb03 0243 	add.w	r2, r3, r3, lsl #1
   15ee6:	6926      	ldr	r6, [r4, #16]
   15ee8:	0092      	lsls	r2, r2, #2
   15eea:	3301      	adds	r3, #1
   15eec:	18b0      	adds	r0, r6, r2
   15eee:	6163      	str	r3, [r4, #20]
   15ef0:	d0f2      	beq.n	15ed8 <d_operator_name+0xc4>
   15ef2:	2900      	cmp	r1, #0
   15ef4:	d0f0      	beq.n	15ed8 <d_operator_name+0xc4>
   15ef6:	2332      	movs	r3, #50	; 0x32
   15ef8:	54b3      	strb	r3, [r6, r2]
   15efa:	6045      	str	r5, [r0, #4]
   15efc:	6081      	str	r1, [r0, #8]
   15efe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   15f00:	2133      	movs	r1, #51	; 0x33
   15f02:	4620      	mov	r0, r4
   15f04:	f7fe f90e 	bl	14124 <d_make_comp>
   15f08:	e7ac      	b.n	15e64 <d_operator_name+0x50>
   15f0a:	bf00      	nop
   15f0c:	00023ae0 	.word	0x00023ae0

00015f10 <d_parmlist>:
   15f10:	b530      	push	{r4, r5, lr}
   15f12:	68c2      	ldr	r2, [r0, #12]
   15f14:	b083      	sub	sp, #12
   15f16:	2300      	movs	r3, #0
   15f18:	9301      	str	r3, [sp, #4]
   15f1a:	7813      	ldrb	r3, [r2, #0]
   15f1c:	b343      	cbz	r3, 15f70 <d_parmlist+0x60>
   15f1e:	2b45      	cmp	r3, #69	; 0x45
   15f20:	d026      	beq.n	15f70 <d_parmlist+0x60>
   15f22:	2b2e      	cmp	r3, #46	; 0x2e
   15f24:	d024      	beq.n	15f70 <d_parmlist+0x60>
   15f26:	4604      	mov	r4, r0
   15f28:	ad01      	add	r5, sp, #4
   15f2a:	e015      	b.n	15f58 <d_parmlist+0x48>
   15f2c:	2b4f      	cmp	r3, #79	; 0x4f
   15f2e:	d016      	beq.n	15f5e <d_parmlist+0x4e>
   15f30:	f7ff fb88 	bl	15644 <d_type>
   15f34:	2300      	movs	r3, #0
   15f36:	4602      	mov	r2, r0
   15f38:	212e      	movs	r1, #46	; 0x2e
   15f3a:	b1c8      	cbz	r0, 15f70 <d_parmlist+0x60>
   15f3c:	4620      	mov	r0, r4
   15f3e:	f7fe f8f1 	bl	14124 <d_make_comp>
   15f42:	6028      	str	r0, [r5, #0]
   15f44:	b1a0      	cbz	r0, 15f70 <d_parmlist+0x60>
   15f46:	68e2      	ldr	r2, [r4, #12]
   15f48:	7813      	ldrb	r3, [r2, #0]
   15f4a:	f100 0508 	add.w	r5, r0, #8
   15f4e:	b14b      	cbz	r3, 15f64 <d_parmlist+0x54>
   15f50:	2b45      	cmp	r3, #69	; 0x45
   15f52:	d007      	beq.n	15f64 <d_parmlist+0x54>
   15f54:	2b2e      	cmp	r3, #46	; 0x2e
   15f56:	d005      	beq.n	15f64 <d_parmlist+0x54>
   15f58:	2b52      	cmp	r3, #82	; 0x52
   15f5a:	4620      	mov	r0, r4
   15f5c:	d1e6      	bne.n	15f2c <d_parmlist+0x1c>
   15f5e:	7853      	ldrb	r3, [r2, #1]
   15f60:	2b45      	cmp	r3, #69	; 0x45
   15f62:	d1e5      	bne.n	15f30 <d_parmlist+0x20>
   15f64:	9801      	ldr	r0, [sp, #4]
   15f66:	b118      	cbz	r0, 15f70 <d_parmlist+0x60>
   15f68:	6883      	ldr	r3, [r0, #8]
   15f6a:	b123      	cbz	r3, 15f76 <d_parmlist+0x66>
   15f6c:	b003      	add	sp, #12
   15f6e:	bd30      	pop	{r4, r5, pc}
   15f70:	2000      	movs	r0, #0
   15f72:	b003      	add	sp, #12
   15f74:	bd30      	pop	{r4, r5, pc}
   15f76:	6842      	ldr	r2, [r0, #4]
   15f78:	7811      	ldrb	r1, [r2, #0]
   15f7a:	2927      	cmp	r1, #39	; 0x27
   15f7c:	d1f6      	bne.n	15f6c <d_parmlist+0x5c>
   15f7e:	6852      	ldr	r2, [r2, #4]
   15f80:	7c11      	ldrb	r1, [r2, #16]
   15f82:	2909      	cmp	r1, #9
   15f84:	d1f2      	bne.n	15f6c <d_parmlist+0x5c>
   15f86:	6851      	ldr	r1, [r2, #4]
   15f88:	6b22      	ldr	r2, [r4, #48]	; 0x30
   15f8a:	1a52      	subs	r2, r2, r1
   15f8c:	6322      	str	r2, [r4, #48]	; 0x30
   15f8e:	6043      	str	r3, [r0, #4]
   15f90:	e7ec      	b.n	15f6c <d_parmlist+0x5c>
   15f92:	bf00      	nop

00015f94 <d_unqualified_name>:
   15f94:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   15f96:	68c1      	ldr	r1, [r0, #12]
   15f98:	780b      	ldrb	r3, [r1, #0]
   15f9a:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
   15f9e:	2a09      	cmp	r2, #9
   15fa0:	4604      	mov	r4, r0
   15fa2:	d920      	bls.n	15fe6 <d_unqualified_name+0x52>
   15fa4:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
   15fa8:	2a19      	cmp	r2, #25
   15faa:	d925      	bls.n	15ff8 <d_unqualified_name+0x64>
   15fac:	f1a3 0243 	sub.w	r2, r3, #67	; 0x43
   15fb0:	2a01      	cmp	r2, #1
   15fb2:	d92c      	bls.n	1600e <d_unqualified_name+0x7a>
   15fb4:	2b4c      	cmp	r3, #76	; 0x4c
   15fb6:	f000 8088 	beq.w	160ca <d_unqualified_name+0x136>
   15fba:	2b55      	cmp	r3, #85	; 0x55
   15fbc:	d133      	bne.n	16026 <d_unqualified_name+0x92>
   15fbe:	784b      	ldrb	r3, [r1, #1]
   15fc0:	2b6c      	cmp	r3, #108	; 0x6c
   15fc2:	d033      	beq.n	1602c <d_unqualified_name+0x98>
   15fc4:	2b74      	cmp	r3, #116	; 0x74
   15fc6:	d12e      	bne.n	16026 <d_unqualified_name+0x92>
   15fc8:	1c4b      	adds	r3, r1, #1
   15fca:	60c3      	str	r3, [r0, #12]
   15fcc:	784b      	ldrb	r3, [r1, #1]
   15fce:	2b74      	cmp	r3, #116	; 0x74
   15fd0:	d05a      	beq.n	16088 <d_unqualified_name+0xf4>
   15fd2:	2b42      	cmp	r3, #66	; 0x42
   15fd4:	f04f 0500 	mov.w	r5, #0
   15fd8:	d10c      	bne.n	15ff4 <d_unqualified_name+0x60>
   15fda:	4629      	mov	r1, r5
   15fdc:	4620      	mov	r0, r4
   15fde:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
   15fe2:	f7fe bacd 	b.w	14580 <d_abi_tags>
   15fe6:	f7fe fa6f 	bl	144c8 <d_source_name>
   15fea:	68e3      	ldr	r3, [r4, #12]
   15fec:	781b      	ldrb	r3, [r3, #0]
   15fee:	4605      	mov	r5, r0
   15ff0:	2b42      	cmp	r3, #66	; 0x42
   15ff2:	d0f2      	beq.n	15fda <d_unqualified_name+0x46>
   15ff4:	4628      	mov	r0, r5
   15ff6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   15ff8:	f7ff ff0c 	bl	15e14 <d_operator_name>
   15ffc:	4605      	mov	r5, r0
   15ffe:	b118      	cbz	r0, 16008 <d_unqualified_name+0x74>
   16000:	7803      	ldrb	r3, [r0, #0]
   16002:	2b31      	cmp	r3, #49	; 0x31
   16004:	f000 80b2 	beq.w	1616c <d_unqualified_name+0x1d8>
   16008:	68e3      	ldr	r3, [r4, #12]
   1600a:	781b      	ldrb	r3, [r3, #0]
   1600c:	e7f0      	b.n	15ff0 <d_unqualified_name+0x5c>
   1600e:	6ac5      	ldr	r5, [r0, #44]	; 0x2c
   16010:	b125      	cbz	r5, 1601c <d_unqualified_name+0x88>
   16012:	782a      	ldrb	r2, [r5, #0]
   16014:	2a00      	cmp	r2, #0
   16016:	d06c      	beq.n	160f2 <d_unqualified_name+0x15e>
   16018:	2a18      	cmp	r2, #24
   1601a:	d06a      	beq.n	160f2 <d_unqualified_name+0x15e>
   1601c:	2b43      	cmp	r3, #67	; 0x43
   1601e:	f000 80bf 	beq.w	161a0 <d_unqualified_name+0x20c>
   16022:	2b44      	cmp	r3, #68	; 0x44
   16024:	d06f      	beq.n	16106 <d_unqualified_name+0x172>
   16026:	2500      	movs	r5, #0
   16028:	4628      	mov	r0, r5
   1602a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   1602c:	1c4b      	adds	r3, r1, #1
   1602e:	60c3      	str	r3, [r0, #12]
   16030:	784b      	ldrb	r3, [r1, #1]
   16032:	2b6c      	cmp	r3, #108	; 0x6c
   16034:	d1cd      	bne.n	15fd2 <d_unqualified_name+0x3e>
   16036:	3102      	adds	r1, #2
   16038:	60c1      	str	r1, [r0, #12]
   1603a:	f7ff ff69 	bl	15f10 <d_parmlist>
   1603e:	4606      	mov	r6, r0
   16040:	b1f0      	cbz	r0, 16080 <d_unqualified_name+0xec>
   16042:	68e2      	ldr	r2, [r4, #12]
   16044:	7813      	ldrb	r3, [r2, #0]
   16046:	2b45      	cmp	r3, #69	; 0x45
   16048:	d1c3      	bne.n	15fd2 <d_unqualified_name+0x3e>
   1604a:	3201      	adds	r2, #1
   1604c:	60e2      	str	r2, [r4, #12]
   1604e:	4620      	mov	r0, r4
   16050:	f7fe f9fc 	bl	1444c <d_compact_number>
   16054:	2800      	cmp	r0, #0
   16056:	db13      	blt.n	16080 <d_unqualified_name+0xec>
   16058:	6963      	ldr	r3, [r4, #20]
   1605a:	69a2      	ldr	r2, [r4, #24]
   1605c:	4293      	cmp	r3, r2
   1605e:	da0f      	bge.n	16080 <d_unqualified_name+0xec>
   16060:	eb03 0243 	add.w	r2, r3, r3, lsl #1
   16064:	6921      	ldr	r1, [r4, #16]
   16066:	0092      	lsls	r2, r2, #2
   16068:	3301      	adds	r3, #1
   1606a:	188d      	adds	r5, r1, r2
   1606c:	6163      	str	r3, [r4, #20]
   1606e:	d0cb      	beq.n	16008 <d_unqualified_name+0x74>
   16070:	2345      	movs	r3, #69	; 0x45
   16072:	548b      	strb	r3, [r1, r2]
   16074:	606e      	str	r6, [r5, #4]
   16076:	60a8      	str	r0, [r5, #8]
   16078:	6a23      	ldr	r3, [r4, #32]
   1607a:	6a62      	ldr	r2, [r4, #36]	; 0x24
   1607c:	4293      	cmp	r3, r2
   1607e:	db1c      	blt.n	160ba <d_unqualified_name+0x126>
   16080:	68e3      	ldr	r3, [r4, #12]
   16082:	2500      	movs	r5, #0
   16084:	781b      	ldrb	r3, [r3, #0]
   16086:	e7b3      	b.n	15ff0 <d_unqualified_name+0x5c>
   16088:	3102      	adds	r1, #2
   1608a:	60c1      	str	r1, [r0, #12]
   1608c:	f7fe f9de 	bl	1444c <d_compact_number>
   16090:	2800      	cmp	r0, #0
   16092:	dbf5      	blt.n	16080 <d_unqualified_name+0xec>
   16094:	6963      	ldr	r3, [r4, #20]
   16096:	69a2      	ldr	r2, [r4, #24]
   16098:	4293      	cmp	r3, r2
   1609a:	daf1      	bge.n	16080 <d_unqualified_name+0xec>
   1609c:	eb03 0243 	add.w	r2, r3, r3, lsl #1
   160a0:	6921      	ldr	r1, [r4, #16]
   160a2:	0092      	lsls	r2, r2, #2
   160a4:	3301      	adds	r3, #1
   160a6:	188d      	adds	r5, r1, r2
   160a8:	6163      	str	r3, [r4, #20]
   160aa:	d0ad      	beq.n	16008 <d_unqualified_name+0x74>
   160ac:	2347      	movs	r3, #71	; 0x47
   160ae:	548b      	strb	r3, [r1, r2]
   160b0:	6068      	str	r0, [r5, #4]
   160b2:	6a23      	ldr	r3, [r4, #32]
   160b4:	6a62      	ldr	r2, [r4, #36]	; 0x24
   160b6:	4293      	cmp	r3, r2
   160b8:	dae2      	bge.n	16080 <d_unqualified_name+0xec>
   160ba:	69e1      	ldr	r1, [r4, #28]
   160bc:	68e2      	ldr	r2, [r4, #12]
   160be:	f841 5023 	str.w	r5, [r1, r3, lsl #2]
   160c2:	3301      	adds	r3, #1
   160c4:	6223      	str	r3, [r4, #32]
   160c6:	7813      	ldrb	r3, [r2, #0]
   160c8:	e792      	b.n	15ff0 <d_unqualified_name+0x5c>
   160ca:	3101      	adds	r1, #1
   160cc:	60c1      	str	r1, [r0, #12]
   160ce:	f7fe f9fb 	bl	144c8 <d_source_name>
   160d2:	4605      	mov	r5, r0
   160d4:	2800      	cmp	r0, #0
   160d6:	d0a6      	beq.n	16026 <d_unqualified_name+0x92>
   160d8:	68e2      	ldr	r2, [r4, #12]
   160da:	7813      	ldrb	r3, [r2, #0]
   160dc:	2b5f      	cmp	r3, #95	; 0x5f
   160de:	d187      	bne.n	15ff0 <d_unqualified_name+0x5c>
   160e0:	4620      	mov	r0, r4
   160e2:	3201      	adds	r2, #1
   160e4:	f840 2f0c 	str.w	r2, [r0, #12]!
   160e8:	f7fe f96e 	bl	143c8 <d_number.isra.0>
   160ec:	2800      	cmp	r0, #0
   160ee:	da8b      	bge.n	16008 <d_unqualified_name+0x74>
   160f0:	e799      	b.n	16026 <d_unqualified_name+0x92>
   160f2:	6b23      	ldr	r3, [r4, #48]	; 0x30
   160f4:	68aa      	ldr	r2, [r5, #8]
   160f6:	4413      	add	r3, r2
   160f8:	6323      	str	r3, [r4, #48]	; 0x30
   160fa:	780b      	ldrb	r3, [r1, #0]
   160fc:	2b43      	cmp	r3, #67	; 0x43
   160fe:	d04f      	beq.n	161a0 <d_unqualified_name+0x20c>
   16100:	2b44      	cmp	r3, #68	; 0x44
   16102:	f47f af66 	bne.w	15fd2 <d_unqualified_name+0x3e>
   16106:	784b      	ldrb	r3, [r1, #1]
   16108:	3b30      	subs	r3, #48	; 0x30
   1610a:	2b05      	cmp	r3, #5
   1610c:	d88b      	bhi.n	16026 <d_unqualified_name+0x92>
   1610e:	a201      	add	r2, pc, #4	; (adr r2, 16114 <d_unqualified_name+0x180>)
   16110:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   16114:	00016169 	.word	0x00016169
   16118:	0001612d 	.word	0x0001612d
   1611c:	00016165 	.word	0x00016165
   16120:	00016027 	.word	0x00016027
   16124:	00016161 	.word	0x00016161
   16128:	0001615d 	.word	0x0001615d
   1612c:	2702      	movs	r7, #2
   1612e:	6963      	ldr	r3, [r4, #20]
   16130:	69a2      	ldr	r2, [r4, #24]
   16132:	1c88      	adds	r0, r1, #2
   16134:	4293      	cmp	r3, r2
   16136:	60e0      	str	r0, [r4, #12]
   16138:	da56      	bge.n	161e8 <d_unqualified_name+0x254>
   1613a:	eb03 0243 	add.w	r2, r3, r3, lsl #1
   1613e:	6920      	ldr	r0, [r4, #16]
   16140:	0092      	lsls	r2, r2, #2
   16142:	3301      	adds	r3, #1
   16144:	1886      	adds	r6, r0, r2
   16146:	6163      	str	r3, [r4, #20]
   16148:	d005      	beq.n	16156 <d_unqualified_name+0x1c2>
   1614a:	2d00      	cmp	r5, #0
   1614c:	d04f      	beq.n	161ee <d_unqualified_name+0x25a>
   1614e:	2308      	movs	r3, #8
   16150:	5483      	strb	r3, [r0, r2]
   16152:	7137      	strb	r7, [r6, #4]
   16154:	60b5      	str	r5, [r6, #8]
   16156:	788b      	ldrb	r3, [r1, #2]
   16158:	4635      	mov	r5, r6
   1615a:	e749      	b.n	15ff0 <d_unqualified_name+0x5c>
   1615c:	2705      	movs	r7, #5
   1615e:	e7e6      	b.n	1612e <d_unqualified_name+0x19a>
   16160:	2704      	movs	r7, #4
   16162:	e7e4      	b.n	1612e <d_unqualified_name+0x19a>
   16164:	2703      	movs	r7, #3
   16166:	e7e2      	b.n	1612e <d_unqualified_name+0x19a>
   16168:	2701      	movs	r7, #1
   1616a:	e7e0      	b.n	1612e <d_unqualified_name+0x19a>
   1616c:	6842      	ldr	r2, [r0, #4]
   1616e:	6b23      	ldr	r3, [r4, #48]	; 0x30
   16170:	6896      	ldr	r6, [r2, #8]
   16172:	6810      	ldr	r0, [r2, #0]
   16174:	491f      	ldr	r1, [pc, #124]	; (161f4 <d_unqualified_name+0x260>)
   16176:	3307      	adds	r3, #7
   16178:	4433      	add	r3, r6
   1617a:	6323      	str	r3, [r4, #48]	; 0x30
   1617c:	f008 faf4 	bl	1e768 <strcmp>
   16180:	2800      	cmp	r0, #0
   16182:	f47f af41 	bne.w	16008 <d_unqualified_name+0x74>
   16186:	4620      	mov	r0, r4
   16188:	f7fe f99e 	bl	144c8 <d_source_name>
   1618c:	462a      	mov	r2, r5
   1618e:	4603      	mov	r3, r0
   16190:	2136      	movs	r1, #54	; 0x36
   16192:	4620      	mov	r0, r4
   16194:	f7fd ffc6 	bl	14124 <d_make_comp>
   16198:	68e3      	ldr	r3, [r4, #12]
   1619a:	4605      	mov	r5, r0
   1619c:	781b      	ldrb	r3, [r3, #0]
   1619e:	e727      	b.n	15ff0 <d_unqualified_name+0x5c>
   161a0:	784b      	ldrb	r3, [r1, #1]
   161a2:	3b31      	subs	r3, #49	; 0x31
   161a4:	2b04      	cmp	r3, #4
   161a6:	f63f af3e 	bhi.w	16026 <d_unqualified_name+0x92>
   161aa:	e8df f003 	tbb	[pc, r3]
   161ae:	0315      	.short	0x0315
   161b0:	191b      	.short	0x191b
   161b2:	17          	.byte	0x17
   161b3:	00          	.byte	0x00
   161b4:	2702      	movs	r7, #2
   161b6:	6963      	ldr	r3, [r4, #20]
   161b8:	69a2      	ldr	r2, [r4, #24]
   161ba:	1c88      	adds	r0, r1, #2
   161bc:	4293      	cmp	r3, r2
   161be:	60e0      	str	r0, [r4, #12]
   161c0:	da12      	bge.n	161e8 <d_unqualified_name+0x254>
   161c2:	eb03 0243 	add.w	r2, r3, r3, lsl #1
   161c6:	6920      	ldr	r0, [r4, #16]
   161c8:	0092      	lsls	r2, r2, #2
   161ca:	3301      	adds	r3, #1
   161cc:	1886      	adds	r6, r0, r2
   161ce:	6163      	str	r3, [r4, #20]
   161d0:	d0c1      	beq.n	16156 <d_unqualified_name+0x1c2>
   161d2:	b165      	cbz	r5, 161ee <d_unqualified_name+0x25a>
   161d4:	2307      	movs	r3, #7
   161d6:	e7bb      	b.n	16150 <d_unqualified_name+0x1bc>
   161d8:	2701      	movs	r7, #1
   161da:	e7ec      	b.n	161b6 <d_unqualified_name+0x222>
   161dc:	2705      	movs	r7, #5
   161de:	e7ea      	b.n	161b6 <d_unqualified_name+0x222>
   161e0:	2704      	movs	r7, #4
   161e2:	e7e8      	b.n	161b6 <d_unqualified_name+0x222>
   161e4:	2703      	movs	r7, #3
   161e6:	e7e6      	b.n	161b6 <d_unqualified_name+0x222>
   161e8:	788b      	ldrb	r3, [r1, #2]
   161ea:	2500      	movs	r5, #0
   161ec:	e700      	b.n	15ff0 <d_unqualified_name+0x5c>
   161ee:	788b      	ldrb	r3, [r1, #2]
   161f0:	e6fe      	b.n	15ff0 <d_unqualified_name+0x5c>
   161f2:	bf00      	nop
   161f4:	00023f88 	.word	0x00023f88

000161f8 <d_bare_function_type>:
   161f8:	b570      	push	{r4, r5, r6, lr}
   161fa:	68c3      	ldr	r3, [r0, #12]
   161fc:	781a      	ldrb	r2, [r3, #0]
   161fe:	2a4a      	cmp	r2, #74	; 0x4a
   16200:	4604      	mov	r4, r0
   16202:	d00d      	beq.n	16220 <d_bare_function_type+0x28>
   16204:	b971      	cbnz	r1, 16224 <d_bare_function_type+0x2c>
   16206:	460d      	mov	r5, r1
   16208:	4620      	mov	r0, r4
   1620a:	f7ff fe81 	bl	15f10 <d_parmlist>
   1620e:	b178      	cbz	r0, 16230 <d_bare_function_type+0x38>
   16210:	4603      	mov	r3, r0
   16212:	462a      	mov	r2, r5
   16214:	4620      	mov	r0, r4
   16216:	2129      	movs	r1, #41	; 0x29
   16218:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   1621c:	f7fd bf82 	b.w	14124 <d_make_comp>
   16220:	3301      	adds	r3, #1
   16222:	60c3      	str	r3, [r0, #12]
   16224:	4620      	mov	r0, r4
   16226:	f7ff fa0d 	bl	15644 <d_type>
   1622a:	4605      	mov	r5, r0
   1622c:	2800      	cmp	r0, #0
   1622e:	d1eb      	bne.n	16208 <d_bare_function_type+0x10>
   16230:	2000      	movs	r0, #0
   16232:	bd70      	pop	{r4, r5, r6, pc}

00016234 <d_function_type>:
   16234:	68c3      	ldr	r3, [r0, #12]
   16236:	781a      	ldrb	r2, [r3, #0]
   16238:	2a46      	cmp	r2, #70	; 0x46
   1623a:	d001      	beq.n	16240 <d_function_type+0xc>
   1623c:	2000      	movs	r0, #0
   1623e:	4770      	bx	lr
   16240:	b510      	push	{r4, lr}
   16242:	1c5a      	adds	r2, r3, #1
   16244:	60c2      	str	r2, [r0, #12]
   16246:	785a      	ldrb	r2, [r3, #1]
   16248:	2a59      	cmp	r2, #89	; 0x59
   1624a:	bf04      	itt	eq
   1624c:	3302      	addeq	r3, #2
   1624e:	60c3      	streq	r3, [r0, #12]
   16250:	2101      	movs	r1, #1
   16252:	4604      	mov	r4, r0
   16254:	f7ff ffd0 	bl	161f8 <d_bare_function_type>
   16258:	4601      	mov	r1, r0
   1625a:	4620      	mov	r0, r4
   1625c:	f7fe f814 	bl	14288 <d_ref_qualifier>
   16260:	68e3      	ldr	r3, [r4, #12]
   16262:	781a      	ldrb	r2, [r3, #0]
   16264:	2a45      	cmp	r2, #69	; 0x45
   16266:	d001      	beq.n	1626c <d_function_type+0x38>
   16268:	2000      	movs	r0, #0
   1626a:	bd10      	pop	{r4, pc}
   1626c:	3301      	adds	r3, #1
   1626e:	60e3      	str	r3, [r4, #12]
   16270:	bd10      	pop	{r4, pc}
   16272:	bf00      	nop

00016274 <d_encoding>:
   16274:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   16278:	68c3      	ldr	r3, [r0, #12]
   1627a:	781a      	ldrb	r2, [r3, #0]
   1627c:	2a47      	cmp	r2, #71	; 0x47
   1627e:	4605      	mov	r5, r0
   16280:	d01f      	beq.n	162c2 <d_encoding+0x4e>
   16282:	2a54      	cmp	r2, #84	; 0x54
   16284:	d01d      	beq.n	162c2 <d_encoding+0x4e>
   16286:	460e      	mov	r6, r1
   16288:	f7ff f820 	bl	152cc <d_name>
   1628c:	4604      	mov	r4, r0
   1628e:	b310      	cbz	r0, 162d6 <d_encoding+0x62>
   16290:	b32e      	cbz	r6, 162de <d_encoding+0x6a>
   16292:	68ab      	ldr	r3, [r5, #8]
   16294:	07db      	lsls	r3, r3, #31
   16296:	d422      	bmi.n	162de <d_encoding+0x6a>
   16298:	7823      	ldrb	r3, [r4, #0]
   1629a:	f1a3 021c 	sub.w	r2, r3, #28
   1629e:	2a04      	cmp	r2, #4
   162a0:	d940      	bls.n	16324 <d_encoding+0xb0>
   162a2:	2b4c      	cmp	r3, #76	; 0x4c
   162a4:	d03e      	beq.n	16324 <d_encoding+0xb0>
   162a6:	2b02      	cmp	r3, #2
   162a8:	d116      	bne.n	162d8 <d_encoding+0x64>
   162aa:	68a3      	ldr	r3, [r4, #8]
   162ac:	781a      	ldrb	r2, [r3, #0]
   162ae:	f1a2 011c 	sub.w	r1, r2, #28
   162b2:	2904      	cmp	r1, #4
   162b4:	f240 8283 	bls.w	167be <d_encoding+0x54a>
   162b8:	2a4c      	cmp	r2, #76	; 0x4c
   162ba:	f000 8280 	beq.w	167be <d_encoding+0x54a>
   162be:	60a3      	str	r3, [r4, #8]
   162c0:	e00a      	b.n	162d8 <d_encoding+0x64>
   162c2:	6b29      	ldr	r1, [r5, #48]	; 0x30
   162c4:	f101 0214 	add.w	r2, r1, #20
   162c8:	632a      	str	r2, [r5, #48]	; 0x30
   162ca:	781a      	ldrb	r2, [r3, #0]
   162cc:	2a54      	cmp	r2, #84	; 0x54
   162ce:	d02b      	beq.n	16328 <d_encoding+0xb4>
   162d0:	2a47      	cmp	r2, #71	; 0x47
   162d2:	f000 809f 	beq.w	16414 <d_encoding+0x1a0>
   162d6:	2400      	movs	r4, #0
   162d8:	4620      	mov	r0, r4
   162da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   162de:	68eb      	ldr	r3, [r5, #12]
   162e0:	781b      	ldrb	r3, [r3, #0]
   162e2:	2b00      	cmp	r3, #0
   162e4:	d0f8      	beq.n	162d8 <d_encoding+0x64>
   162e6:	2b45      	cmp	r3, #69	; 0x45
   162e8:	d0f6      	beq.n	162d8 <d_encoding+0x64>
   162ea:	4621      	mov	r1, r4
   162ec:	780a      	ldrb	r2, [r1, #0]
   162ee:	2a20      	cmp	r2, #32
   162f0:	f200 8113 	bhi.w	1651a <d_encoding+0x2a6>
   162f4:	2a1c      	cmp	r2, #28
   162f6:	f080 8112 	bcs.w	1651e <d_encoding+0x2aa>
   162fa:	2a04      	cmp	r2, #4
   162fc:	f040 8101 	bne.w	16502 <d_encoding+0x28e>
   16300:	684a      	ldr	r2, [r1, #4]
   16302:	b16a      	cbz	r2, 16320 <d_encoding+0xac>
   16304:	7813      	ldrb	r3, [r2, #0]
   16306:	2b08      	cmp	r3, #8
   16308:	f103 31ff 	add.w	r1, r3, #4294967295
   1630c:	f200 80f6 	bhi.w	164fc <d_encoding+0x288>
   16310:	2b07      	cmp	r3, #7
   16312:	f080 80f6 	bcs.w	16502 <d_encoding+0x28e>
   16316:	2901      	cmp	r1, #1
   16318:	d802      	bhi.n	16320 <d_encoding+0xac>
   1631a:	6892      	ldr	r2, [r2, #8]
   1631c:	2a00      	cmp	r2, #0
   1631e:	d1f1      	bne.n	16304 <d_encoding+0x90>
   16320:	2101      	movs	r1, #1
   16322:	e0ef      	b.n	16504 <d_encoding+0x290>
   16324:	6864      	ldr	r4, [r4, #4]
   16326:	e7b7      	b.n	16298 <d_encoding+0x24>
   16328:	1c5a      	adds	r2, r3, #1
   1632a:	60ea      	str	r2, [r5, #12]
   1632c:	785a      	ldrb	r2, [r3, #1]
   1632e:	2a00      	cmp	r2, #0
   16330:	d0d1      	beq.n	162d6 <d_encoding+0x62>
   16332:	1c9a      	adds	r2, r3, #2
   16334:	60ea      	str	r2, [r5, #12]
   16336:	785b      	ldrb	r3, [r3, #1]
   16338:	3b43      	subs	r3, #67	; 0x43
   1633a:	2b33      	cmp	r3, #51	; 0x33
   1633c:	d8cb      	bhi.n	162d6 <d_encoding+0x62>
   1633e:	a201      	add	r2, pc, #4	; (adr r2, 16344 <d_encoding+0xd0>)
   16340:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   16344:	0001677f 	.word	0x0001677f
   16348:	000162d7 	.word	0x000162d7
   1634c:	000162d7 	.word	0x000162d7
   16350:	00016769 	.word	0x00016769
   16354:	000162d7 	.word	0x000162d7
   16358:	00016753 	.word	0x00016753
   1635c:	0001673d 	.word	0x0001673d
   16360:	00016727 	.word	0x00016727
   16364:	000162d7 	.word	0x000162d7
   16368:	000162d7 	.word	0x000162d7
   1636c:	000162d7 	.word	0x000162d7
   16370:	000162d7 	.word	0x000162d7
   16374:	000162d7 	.word	0x000162d7
   16378:	000162d7 	.word	0x000162d7
   1637c:	000162d7 	.word	0x000162d7
   16380:	000162d7 	.word	0x000162d7
   16384:	00016711 	.word	0x00016711
   16388:	000166f7 	.word	0x000166f7
   1638c:	000162d7 	.word	0x000162d7
   16390:	000166dd 	.word	0x000166dd
   16394:	000166c7 	.word	0x000166c7
   16398:	000162d7 	.word	0x000162d7
   1639c:	000162d7 	.word	0x000162d7
   163a0:	000162d7 	.word	0x000162d7
   163a4:	000162d7 	.word	0x000162d7
   163a8:	000162d7 	.word	0x000162d7
   163ac:	000162d7 	.word	0x000162d7
   163b0:	000162d7 	.word	0x000162d7
   163b4:	000162d7 	.word	0x000162d7
   163b8:	000162d7 	.word	0x000162d7
   163bc:	000162d7 	.word	0x000162d7
   163c0:	000162d7 	.word	0x000162d7
   163c4:	00016693 	.word	0x00016693
   163c8:	000162d7 	.word	0x000162d7
   163cc:	000162d7 	.word	0x000162d7
   163d0:	000162d7 	.word	0x000162d7
   163d4:	000162d7 	.word	0x000162d7
   163d8:	0001666d 	.word	0x0001666d
   163dc:	000162d7 	.word	0x000162d7
   163e0:	000162d7 	.word	0x000162d7
   163e4:	000162d7 	.word	0x000162d7
   163e8:	000162d7 	.word	0x000162d7
   163ec:	000162d7 	.word	0x000162d7
   163f0:	000162d7 	.word	0x000162d7
   163f4:	000162d7 	.word	0x000162d7
   163f8:	000162d7 	.word	0x000162d7
   163fc:	000162d7 	.word	0x000162d7
   16400:	000162d7 	.word	0x000162d7
   16404:	000162d7 	.word	0x000162d7
   16408:	000162d7 	.word	0x000162d7
   1640c:	000162d7 	.word	0x000162d7
   16410:	00016647 	.word	0x00016647
   16414:	1c5a      	adds	r2, r3, #1
   16416:	60ea      	str	r2, [r5, #12]
   16418:	785a      	ldrb	r2, [r3, #1]
   1641a:	2a00      	cmp	r2, #0
   1641c:	f43f af5b 	beq.w	162d6 <d_encoding+0x62>
   16420:	1c9a      	adds	r2, r3, #2
   16422:	60ea      	str	r2, [r5, #12]
   16424:	785a      	ldrb	r2, [r3, #1]
   16426:	3a41      	subs	r2, #65	; 0x41
   16428:	2a31      	cmp	r2, #49	; 0x31
   1642a:	f63f af54 	bhi.w	162d6 <d_encoding+0x62>
   1642e:	a101      	add	r1, pc, #4	; (adr r1, 16434 <d_encoding+0x1c0>)
   16430:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
   16434:	00016529 	.word	0x00016529
   16438:	000162d7 	.word	0x000162d7
   1643c:	000162d7 	.word	0x000162d7
   16440:	000162d7 	.word	0x000162d7
   16444:	000162d7 	.word	0x000162d7
   16448:	000162d7 	.word	0x000162d7
   1644c:	000162d7 	.word	0x000162d7
   16450:	000162d7 	.word	0x000162d7
   16454:	000162d7 	.word	0x000162d7
   16458:	000162d7 	.word	0x000162d7
   1645c:	000162d7 	.word	0x000162d7
   16460:	000162d7 	.word	0x000162d7
   16464:	000162d7 	.word	0x000162d7
   16468:	000162d7 	.word	0x000162d7
   1646c:	000162d7 	.word	0x000162d7
   16470:	000162d7 	.word	0x000162d7
   16474:	000162d7 	.word	0x000162d7
   16478:	00016629 	.word	0x00016629
   1647c:	000162d7 	.word	0x000162d7
   16480:	000165fd 	.word	0x000165fd
   16484:	000162d7 	.word	0x000162d7
   16488:	000165e7 	.word	0x000165e7
   1648c:	000162d7 	.word	0x000162d7
   16490:	000162d7 	.word	0x000162d7
   16494:	000162d7 	.word	0x000162d7
   16498:	000162d7 	.word	0x000162d7
   1649c:	000162d7 	.word	0x000162d7
   164a0:	000162d7 	.word	0x000162d7
   164a4:	000162d7 	.word	0x000162d7
   164a8:	000162d7 	.word	0x000162d7
   164ac:	000162d7 	.word	0x000162d7
   164b0:	000162d7 	.word	0x000162d7
   164b4:	000162d7 	.word	0x000162d7
   164b8:	000162d7 	.word	0x000162d7
   164bc:	000162d7 	.word	0x000162d7
   164c0:	000162d7 	.word	0x000162d7
   164c4:	000162d7 	.word	0x000162d7
   164c8:	000162d7 	.word	0x000162d7
   164cc:	000162d7 	.word	0x000162d7
   164d0:	000162d7 	.word	0x000162d7
   164d4:	000162d7 	.word	0x000162d7
   164d8:	000162d7 	.word	0x000162d7
   164dc:	000162d7 	.word	0x000162d7
   164e0:	000162d7 	.word	0x000162d7
   164e4:	000162d7 	.word	0x000162d7
   164e8:	000162d7 	.word	0x000162d7
   164ec:	000162d7 	.word	0x000162d7
   164f0:	000162d7 	.word	0x000162d7
   164f4:	000162d7 	.word	0x000162d7
   164f8:	00016541 	.word	0x00016541
   164fc:	2b34      	cmp	r3, #52	; 0x34
   164fe:	f47f af0f 	bne.w	16320 <d_encoding+0xac>
   16502:	2100      	movs	r1, #0
   16504:	4628      	mov	r0, r5
   16506:	f7ff fe77 	bl	161f8 <d_bare_function_type>
   1650a:	4622      	mov	r2, r4
   1650c:	4603      	mov	r3, r0
   1650e:	2103      	movs	r1, #3
   16510:	4628      	mov	r0, r5
   16512:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   16516:	f7fd be05 	b.w	14124 <d_make_comp>
   1651a:	2a4c      	cmp	r2, #76	; 0x4c
   1651c:	d1f1      	bne.n	16502 <d_encoding+0x28e>
   1651e:	6849      	ldr	r1, [r1, #4]
   16520:	2900      	cmp	r1, #0
   16522:	f47f aee3 	bne.w	162ec <d_encoding+0x78>
   16526:	e7ed      	b.n	16504 <d_encoding+0x290>
   16528:	2100      	movs	r1, #0
   1652a:	4628      	mov	r0, r5
   1652c:	f7ff fea2 	bl	16274 <d_encoding>
   16530:	2300      	movs	r3, #0
   16532:	4602      	mov	r2, r0
   16534:	2117      	movs	r1, #23
   16536:	4628      	mov	r0, r5
   16538:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   1653c:	f7fd bdf2 	b.w	14124 <d_make_comp>
   16540:	f105 000c 	add.w	r0, r5, #12
   16544:	f7fd ff40 	bl	143c8 <d_number.isra.0>
   16548:	2801      	cmp	r0, #1
   1654a:	f77f aec4 	ble.w	162d6 <d_encoding+0x62>
   1654e:	68eb      	ldr	r3, [r5, #12]
   16550:	781a      	ldrb	r2, [r3, #0]
   16552:	2a00      	cmp	r2, #0
   16554:	f43f aebf 	beq.w	162d6 <d_encoding+0x62>
   16558:	1c5f      	adds	r7, r3, #1
   1655a:	60ef      	str	r7, [r5, #12]
   1655c:	781b      	ldrb	r3, [r3, #0]
   1655e:	2b5f      	cmp	r3, #95	; 0x5f
   16560:	f47f aeb9 	bne.w	162d6 <d_encoding+0x62>
   16564:	2200      	movs	r2, #0
   16566:	1e46      	subs	r6, r0, #1
   16568:	4690      	mov	r8, r2
   1656a:	f04f 0940 	mov.w	r9, #64	; 0x40
   1656e:	783b      	ldrb	r3, [r7, #0]
   16570:	2b00      	cmp	r3, #0
   16572:	f43f aeb0 	beq.w	162d6 <d_encoding+0x62>
   16576:	2b24      	cmp	r3, #36	; 0x24
   16578:	f000 8128 	beq.w	167cc <d_encoding+0x558>
   1657c:	463c      	mov	r4, r7
   1657e:	2100      	movs	r1, #0
   16580:	e004      	b.n	1658c <d_encoding+0x318>
   16582:	f814 3f01 	ldrb.w	r3, [r4, #1]!
   16586:	b123      	cbz	r3, 16592 <d_encoding+0x31e>
   16588:	2b24      	cmp	r3, #36	; 0x24
   1658a:	d002      	beq.n	16592 <d_encoding+0x31e>
   1658c:	3101      	adds	r1, #1
   1658e:	42b1      	cmp	r1, r6
   16590:	dbf7      	blt.n	16582 <d_encoding+0x30e>
   16592:	696c      	ldr	r4, [r5, #20]
   16594:	69a8      	ldr	r0, [r5, #24]
   16596:	4284      	cmp	r4, r0
   16598:	f280 8113 	bge.w	167c2 <d_encoding+0x54e>
   1659c:	6928      	ldr	r0, [r5, #16]
   1659e:	1c63      	adds	r3, r4, #1
   165a0:	eb04 0444 	add.w	r4, r4, r4, lsl #1
   165a4:	616b      	str	r3, [r5, #20]
   165a6:	eb10 0384 	adds.w	r3, r0, r4, lsl #2
   165aa:	f000 810a 	beq.w	167c2 <d_encoding+0x54e>
   165ae:	f800 8024 	strb.w	r8, [r0, r4, lsl #2]
   165b2:	605f      	str	r7, [r3, #4]
   165b4:	6099      	str	r1, [r3, #8]
   165b6:	68ef      	ldr	r7, [r5, #12]
   165b8:	440f      	add	r7, r1
   165ba:	1a76      	subs	r6, r6, r1
   165bc:	60ef      	str	r7, [r5, #12]
   165be:	2a00      	cmp	r2, #0
   165c0:	f000 8121 	beq.w	16806 <d_encoding+0x592>
   165c4:	213f      	movs	r1, #63	; 0x3f
   165c6:	4628      	mov	r0, r5
   165c8:	f7fd fdac 	bl	14124 <d_make_comp>
   165cc:	4602      	mov	r2, r0
   165ce:	2800      	cmp	r0, #0
   165d0:	f43f ae81 	beq.w	162d6 <d_encoding+0x62>
   165d4:	2e00      	cmp	r6, #0
   165d6:	dcca      	bgt.n	1656e <d_encoding+0x2fa>
   165d8:	4628      	mov	r0, r5
   165da:	2300      	movs	r3, #0
   165dc:	213e      	movs	r1, #62	; 0x3e
   165de:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   165e2:	f7fd bd9f 	b.w	14124 <d_make_comp>
   165e6:	4628      	mov	r0, r5
   165e8:	f7fe fe70 	bl	152cc <d_name>
   165ec:	2300      	movs	r3, #0
   165ee:	4602      	mov	r2, r0
   165f0:	2113      	movs	r1, #19
   165f2:	4628      	mov	r0, r5
   165f4:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   165f8:	f7fd bd94 	b.w	14124 <d_make_comp>
   165fc:	789a      	ldrb	r2, [r3, #2]
   165fe:	2100      	movs	r1, #0
   16600:	4628      	mov	r0, r5
   16602:	2a00      	cmp	r2, #0
   16604:	f000 8101 	beq.w	1680a <d_encoding+0x596>
   16608:	1cda      	adds	r2, r3, #3
   1660a:	60ea      	str	r2, [r5, #12]
   1660c:	789b      	ldrb	r3, [r3, #2]
   1660e:	2b6e      	cmp	r3, #110	; 0x6e
   16610:	f040 80fb 	bne.w	1680a <d_encoding+0x596>
   16614:	f7ff fe2e 	bl	16274 <d_encoding>
   16618:	2300      	movs	r3, #0
   1661a:	4602      	mov	r2, r0
   1661c:	2149      	movs	r1, #73	; 0x49
   1661e:	4628      	mov	r0, r5
   16620:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   16624:	f7fd bd7e 	b.w	14124 <d_make_comp>
   16628:	4628      	mov	r0, r5
   1662a:	f7fe fe4f 	bl	152cc <d_name>
   1662e:	4604      	mov	r4, r0
   16630:	4628      	mov	r0, r5
   16632:	f7fd fef3 	bl	1441c <d_number_component>
   16636:	4622      	mov	r2, r4
   16638:	4603      	mov	r3, r0
   1663a:	2116      	movs	r1, #22
   1663c:	4628      	mov	r0, r5
   1663e:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   16642:	f7fd bd6f 	b.w	14124 <d_make_comp>
   16646:	2176      	movs	r1, #118	; 0x76
   16648:	4628      	mov	r0, r5
   1664a:	f7fe f871 	bl	14730 <d_call_offset>
   1664e:	2800      	cmp	r0, #0
   16650:	f43f ae41 	beq.w	162d6 <d_encoding+0x62>
   16654:	2100      	movs	r1, #0
   16656:	4628      	mov	r0, r5
   16658:	f7ff fe0c 	bl	16274 <d_encoding>
   1665c:	2300      	movs	r3, #0
   1665e:	4602      	mov	r2, r0
   16660:	2110      	movs	r1, #16
   16662:	4628      	mov	r0, r5
   16664:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   16668:	f7fd bd5c 	b.w	14124 <d_make_comp>
   1666c:	2168      	movs	r1, #104	; 0x68
   1666e:	4628      	mov	r0, r5
   16670:	f7fe f85e 	bl	14730 <d_call_offset>
   16674:	2800      	cmp	r0, #0
   16676:	f43f ae2e 	beq.w	162d6 <d_encoding+0x62>
   1667a:	2100      	movs	r1, #0
   1667c:	4628      	mov	r0, r5
   1667e:	f7ff fdf9 	bl	16274 <d_encoding>
   16682:	2300      	movs	r3, #0
   16684:	4602      	mov	r2, r0
   16686:	210f      	movs	r1, #15
   16688:	4628      	mov	r0, r5
   1668a:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   1668e:	f7fd bd49 	b.w	14124 <d_make_comp>
   16692:	2100      	movs	r1, #0
   16694:	4628      	mov	r0, r5
   16696:	f7fe f84b 	bl	14730 <d_call_offset>
   1669a:	2800      	cmp	r0, #0
   1669c:	f43f ae1b 	beq.w	162d6 <d_encoding+0x62>
   166a0:	2100      	movs	r1, #0
   166a2:	4628      	mov	r0, r5
   166a4:	f7fe f844 	bl	14730 <d_call_offset>
   166a8:	2800      	cmp	r0, #0
   166aa:	f43f ae14 	beq.w	162d6 <d_encoding+0x62>
   166ae:	2100      	movs	r1, #0
   166b0:	4628      	mov	r0, r5
   166b2:	f7ff fddf 	bl	16274 <d_encoding>
   166b6:	2300      	movs	r3, #0
   166b8:	4602      	mov	r2, r0
   166ba:	2111      	movs	r1, #17
   166bc:	4628      	mov	r0, r5
   166be:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   166c2:	f7fd bd2f 	b.w	14124 <d_make_comp>
   166c6:	4628      	mov	r0, r5
   166c8:	f7fe fe00 	bl	152cc <d_name>
   166cc:	2300      	movs	r3, #0
   166ce:	4602      	mov	r2, r0
   166d0:	2115      	movs	r1, #21
   166d2:	4628      	mov	r0, r5
   166d4:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   166d8:	f7fd bd24 	b.w	14124 <d_make_comp>
   166dc:	310f      	adds	r1, #15
   166de:	6329      	str	r1, [r5, #48]	; 0x30
   166e0:	4628      	mov	r0, r5
   166e2:	f7fe ffaf 	bl	15644 <d_type>
   166e6:	2300      	movs	r3, #0
   166e8:	4602      	mov	r2, r0
   166ea:	2109      	movs	r1, #9
   166ec:	4628      	mov	r0, r5
   166ee:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   166f2:	f7fd bd17 	b.w	14124 <d_make_comp>
   166f6:	310a      	adds	r1, #10
   166f8:	6329      	str	r1, [r5, #48]	; 0x30
   166fa:	4628      	mov	r0, r5
   166fc:	f7fe ffa2 	bl	15644 <d_type>
   16700:	2300      	movs	r3, #0
   16702:	4602      	mov	r2, r0
   16704:	210a      	movs	r1, #10
   16706:	4628      	mov	r0, r5
   16708:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   1670c:	f7fd bd0a 	b.w	14124 <d_make_comp>
   16710:	4628      	mov	r0, r5
   16712:	f7fe ff97 	bl	15644 <d_type>
   16716:	2300      	movs	r3, #0
   16718:	4602      	mov	r2, r0
   1671a:	210d      	movs	r1, #13
   1671c:	4628      	mov	r0, r5
   1671e:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   16722:	f7fd bcff 	b.w	14124 <d_make_comp>
   16726:	4628      	mov	r0, r5
   16728:	f7fe ff8c 	bl	15644 <d_type>
   1672c:	2300      	movs	r3, #0
   1672e:	4602      	mov	r2, r0
   16730:	2112      	movs	r1, #18
   16732:	4628      	mov	r0, r5
   16734:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   16738:	f7fd bcf4 	b.w	14124 <d_make_comp>
   1673c:	4628      	mov	r0, r5
   1673e:	f7fe ff81 	bl	15644 <d_type>
   16742:	2300      	movs	r3, #0
   16744:	4602      	mov	r2, r0
   16746:	210c      	movs	r1, #12
   16748:	4628      	mov	r0, r5
   1674a:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   1674e:	f7fd bce9 	b.w	14124 <d_make_comp>
   16752:	4628      	mov	r0, r5
   16754:	f7fe fdba 	bl	152cc <d_name>
   16758:	2300      	movs	r3, #0
   1675a:	4602      	mov	r2, r0
   1675c:	2114      	movs	r1, #20
   1675e:	4628      	mov	r0, r5
   16760:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   16764:	f7fd bcde 	b.w	14124 <d_make_comp>
   16768:	4628      	mov	r0, r5
   1676a:	f7fe ff6b 	bl	15644 <d_type>
   1676e:	2300      	movs	r3, #0
   16770:	4602      	mov	r2, r0
   16772:	210e      	movs	r1, #14
   16774:	4628      	mov	r0, r5
   16776:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   1677a:	f7fd bcd3 	b.w	14124 <d_make_comp>
   1677e:	4628      	mov	r0, r5
   16780:	f7fe ff60 	bl	15644 <d_type>
   16784:	4604      	mov	r4, r0
   16786:	f105 000c 	add.w	r0, r5, #12
   1678a:	f7fd fe1d 	bl	143c8 <d_number.isra.0>
   1678e:	2800      	cmp	r0, #0
   16790:	f6ff ada1 	blt.w	162d6 <d_encoding+0x62>
   16794:	68eb      	ldr	r3, [r5, #12]
   16796:	781a      	ldrb	r2, [r3, #0]
   16798:	2a5f      	cmp	r2, #95	; 0x5f
   1679a:	f47f ad9c 	bne.w	162d6 <d_encoding+0x62>
   1679e:	3301      	adds	r3, #1
   167a0:	60eb      	str	r3, [r5, #12]
   167a2:	4628      	mov	r0, r5
   167a4:	f7fe ff4e 	bl	15644 <d_type>
   167a8:	6b2b      	ldr	r3, [r5, #48]	; 0x30
   167aa:	1d59      	adds	r1, r3, #5
   167ac:	6329      	str	r1, [r5, #48]	; 0x30
   167ae:	4602      	mov	r2, r0
   167b0:	4623      	mov	r3, r4
   167b2:	4628      	mov	r0, r5
   167b4:	210b      	movs	r1, #11
   167b6:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   167ba:	f7fd bcb3 	b.w	14124 <d_make_comp>
   167be:	685b      	ldr	r3, [r3, #4]
   167c0:	e574      	b.n	162ac <d_encoding+0x38>
   167c2:	68eb      	ldr	r3, [r5, #12]
   167c4:	440b      	add	r3, r1
   167c6:	60eb      	str	r3, [r5, #12]
   167c8:	2400      	movs	r4, #0
   167ca:	e585      	b.n	162d8 <d_encoding+0x64>
   167cc:	787b      	ldrb	r3, [r7, #1]
   167ce:	2b53      	cmp	r3, #83	; 0x53
   167d0:	d027      	beq.n	16822 <d_encoding+0x5ae>
   167d2:	2b5f      	cmp	r3, #95	; 0x5f
   167d4:	d023      	beq.n	1681e <d_encoding+0x5aa>
   167d6:	2b24      	cmp	r3, #36	; 0x24
   167d8:	f47f ad7d 	bne.w	162d6 <d_encoding+0x62>
   167dc:	4618      	mov	r0, r3
   167de:	6969      	ldr	r1, [r5, #20]
   167e0:	69ab      	ldr	r3, [r5, #24]
   167e2:	4299      	cmp	r1, r3
   167e4:	da1f      	bge.n	16826 <d_encoding+0x5b2>
   167e6:	692c      	ldr	r4, [r5, #16]
   167e8:	1c4f      	adds	r7, r1, #1
   167ea:	eb01 0141 	add.w	r1, r1, r1, lsl #1
   167ee:	eb14 0381 	adds.w	r3, r4, r1, lsl #2
   167f2:	616f      	str	r7, [r5, #20]
   167f4:	d017      	beq.n	16826 <d_encoding+0x5b2>
   167f6:	f804 9021 	strb.w	r9, [r4, r1, lsl #2]
   167fa:	6058      	str	r0, [r3, #4]
   167fc:	68ef      	ldr	r7, [r5, #12]
   167fe:	3702      	adds	r7, #2
   16800:	3e02      	subs	r6, #2
   16802:	60ef      	str	r7, [r5, #12]
   16804:	e6db      	b.n	165be <d_encoding+0x34a>
   16806:	461a      	mov	r2, r3
   16808:	e6e4      	b.n	165d4 <d_encoding+0x360>
   1680a:	f7ff fd33 	bl	16274 <d_encoding>
   1680e:	2300      	movs	r3, #0
   16810:	4602      	mov	r2, r0
   16812:	2148      	movs	r1, #72	; 0x48
   16814:	4628      	mov	r0, r5
   16816:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   1681a:	f7fd bc83 	b.w	14124 <d_make_comp>
   1681e:	202e      	movs	r0, #46	; 0x2e
   16820:	e7dd      	b.n	167de <d_encoding+0x56a>
   16822:	202f      	movs	r0, #47	; 0x2f
   16824:	e7db      	b.n	167de <d_encoding+0x56a>
   16826:	68eb      	ldr	r3, [r5, #12]
   16828:	3302      	adds	r3, #2
   1682a:	60eb      	str	r3, [r5, #12]
   1682c:	2400      	movs	r4, #0
   1682e:	e553      	b.n	162d8 <d_encoding+0x64>

00016830 <d_expr_primary>:
   16830:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   16832:	68c2      	ldr	r2, [r0, #12]
   16834:	7813      	ldrb	r3, [r2, #0]
   16836:	2b4c      	cmp	r3, #76	; 0x4c
   16838:	d001      	beq.n	1683e <d_expr_primary+0xe>
   1683a:	2000      	movs	r0, #0
   1683c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   1683e:	1c53      	adds	r3, r2, #1
   16840:	60c3      	str	r3, [r0, #12]
   16842:	7851      	ldrb	r1, [r2, #1]
   16844:	295f      	cmp	r1, #95	; 0x5f
   16846:	4605      	mov	r5, r0
   16848:	d03a      	beq.n	168c0 <d_expr_primary+0x90>
   1684a:	295a      	cmp	r1, #90	; 0x5a
   1684c:	d03f      	beq.n	168ce <d_expr_primary+0x9e>
   1684e:	f7fe fef9 	bl	15644 <d_type>
   16852:	2800      	cmp	r0, #0
   16854:	d0f1      	beq.n	1683a <d_expr_primary+0xa>
   16856:	7803      	ldrb	r3, [r0, #0]
   16858:	2b27      	cmp	r3, #39	; 0x27
   1685a:	d046      	beq.n	168ea <d_expr_primary+0xba>
   1685c:	68ee      	ldr	r6, [r5, #12]
   1685e:	7833      	ldrb	r3, [r6, #0]
   16860:	2b6e      	cmp	r3, #110	; 0x6e
   16862:	d04b      	beq.n	168fc <d_expr_primary+0xcc>
   16864:	213c      	movs	r1, #60	; 0x3c
   16866:	2b45      	cmp	r3, #69	; 0x45
   16868:	d04e      	beq.n	16908 <d_expr_primary+0xd8>
   1686a:	2b00      	cmp	r3, #0
   1686c:	d0e5      	beq.n	1683a <d_expr_primary+0xa>
   1686e:	4633      	mov	r3, r6
   16870:	e001      	b.n	16876 <d_expr_primary+0x46>
   16872:	2c00      	cmp	r4, #0
   16874:	d0e1      	beq.n	1683a <d_expr_primary+0xa>
   16876:	3301      	adds	r3, #1
   16878:	60eb      	str	r3, [r5, #12]
   1687a:	781c      	ldrb	r4, [r3, #0]
   1687c:	2c45      	cmp	r4, #69	; 0x45
   1687e:	d1f8      	bne.n	16872 <d_expr_primary+0x42>
   16880:	1b9c      	subs	r4, r3, r6
   16882:	696b      	ldr	r3, [r5, #20]
   16884:	69aa      	ldr	r2, [r5, #24]
   16886:	4293      	cmp	r3, r2
   16888:	da2d      	bge.n	168e6 <d_expr_primary+0xb6>
   1688a:	eb03 0243 	add.w	r2, r3, r3, lsl #1
   1688e:	692f      	ldr	r7, [r5, #16]
   16890:	3301      	adds	r3, #1
   16892:	0092      	lsls	r2, r2, #2
   16894:	616b      	str	r3, [r5, #20]
   16896:	18bb      	adds	r3, r7, r2
   16898:	d025      	beq.n	168e6 <d_expr_primary+0xb6>
   1689a:	b326      	cbz	r6, 168e6 <d_expr_primary+0xb6>
   1689c:	b31c      	cbz	r4, 168e6 <d_expr_primary+0xb6>
   1689e:	f04f 0e00 	mov.w	lr, #0
   168a2:	f807 e002 	strb.w	lr, [r7, r2]
   168a6:	605e      	str	r6, [r3, #4]
   168a8:	609c      	str	r4, [r3, #8]
   168aa:	4602      	mov	r2, r0
   168ac:	4628      	mov	r0, r5
   168ae:	f7fd fc39 	bl	14124 <d_make_comp>
   168b2:	68eb      	ldr	r3, [r5, #12]
   168b4:	781a      	ldrb	r2, [r3, #0]
   168b6:	2a45      	cmp	r2, #69	; 0x45
   168b8:	d1bf      	bne.n	1683a <d_expr_primary+0xa>
   168ba:	3301      	adds	r3, #1
   168bc:	60eb      	str	r3, [r5, #12]
   168be:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   168c0:	1c93      	adds	r3, r2, #2
   168c2:	60c3      	str	r3, [r0, #12]
   168c4:	7892      	ldrb	r2, [r2, #2]
   168c6:	2a5a      	cmp	r2, #90	; 0x5a
   168c8:	bf18      	it	ne
   168ca:	2000      	movne	r0, #0
   168cc:	d107      	bne.n	168de <d_expr_primary+0xae>
   168ce:	3301      	adds	r3, #1
   168d0:	60eb      	str	r3, [r5, #12]
   168d2:	2100      	movs	r1, #0
   168d4:	4628      	mov	r0, r5
   168d6:	f7ff fccd 	bl	16274 <d_encoding>
   168da:	68eb      	ldr	r3, [r5, #12]
   168dc:	781a      	ldrb	r2, [r3, #0]
   168de:	2a45      	cmp	r2, #69	; 0x45
   168e0:	d0eb      	beq.n	168ba <d_expr_primary+0x8a>
   168e2:	2000      	movs	r0, #0
   168e4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   168e6:	2300      	movs	r3, #0
   168e8:	e7df      	b.n	168aa <d_expr_primary+0x7a>
   168ea:	6843      	ldr	r3, [r0, #4]
   168ec:	7c1a      	ldrb	r2, [r3, #16]
   168ee:	2a00      	cmp	r2, #0
   168f0:	d0b4      	beq.n	1685c <d_expr_primary+0x2c>
   168f2:	685a      	ldr	r2, [r3, #4]
   168f4:	6b2b      	ldr	r3, [r5, #48]	; 0x30
   168f6:	1a9b      	subs	r3, r3, r2
   168f8:	632b      	str	r3, [r5, #48]	; 0x30
   168fa:	e7af      	b.n	1685c <d_expr_primary+0x2c>
   168fc:	1c72      	adds	r2, r6, #1
   168fe:	60ea      	str	r2, [r5, #12]
   16900:	7873      	ldrb	r3, [r6, #1]
   16902:	213d      	movs	r1, #61	; 0x3d
   16904:	4616      	mov	r6, r2
   16906:	e7ae      	b.n	16866 <d_expr_primary+0x36>
   16908:	2400      	movs	r4, #0
   1690a:	e7ba      	b.n	16882 <d_expr_primary+0x52>

0001690c <d_print_comp_inner>:
   1690c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   16910:	4604      	mov	r4, r0
   16912:	b095      	sub	sp, #84	; 0x54
   16914:	2a00      	cmp	r2, #0
   16916:	f000 80db 	beq.w	16ad0 <d_print_comp_inner+0x1c4>
   1691a:	f8d0 7118 	ldr.w	r7, [r0, #280]	; 0x118
   1691e:	2f00      	cmp	r7, #0
   16920:	f040 80c2 	bne.w	16aa8 <d_print_comp_inner+0x19c>
   16924:	7813      	ldrb	r3, [r2, #0]
   16926:	4688      	mov	r8, r1
   16928:	4615      	mov	r5, r2
   1692a:	2b4d      	cmp	r3, #77	; 0x4d
   1692c:	f201 81e6 	bhi.w	17cfc <d_print_comp_inner+0x13f0>
   16930:	e8df f013 	tbh	[pc, r3, lsl #1]
   16934:	043c045a 	.word	0x043c045a
   16938:	03a4043c 	.word	0x03a4043c
   1693c:	048904a5 	.word	0x048904a5
   16940:	038e04ea 	.word	0x038e04ea
   16944:	0330037c 	.word	0x0330037c
   16948:	030a0356 	.word	0x030a0356
   1694c:	029802e4 	.word	0x029802e4
   16950:	027202be 	.word	0x027202be
   16954:	01f0024c 	.word	0x01f0024c
   16958:	01ca0226 	.word	0x01ca0226
   1695c:	015801a4 	.word	0x015801a4
   16960:	0132017e 	.word	0x0132017e
   16964:	00f2010b 	.word	0x00f2010b
   16968:	00f200f2 	.word	0x00f200f2
   1696c:	00d400d4 	.word	0x00d400d4
   16970:	00d400d4 	.word	0x00d400d4
   16974:	00d400d4 	.word	0x00d400d4
   16978:	06d500d4 	.word	0x06d500d4
   1697c:	00d406d5 	.word	0x00d406d5
   16980:	06a900d4 	.word	0x06a900d4
   16984:	069306fc 	.word	0x069306fc
   16988:	0701071d 	.word	0x0701071d
   1698c:	07010788 	.word	0x07010788
   16990:	057b057b 	.word	0x057b057b
   16994:	06060630 	.word	0x06060630
   16998:	09e405e0 	.word	0x09e405e0
   1699c:	068e05ad 	.word	0x068e05ad
   169a0:	004e0654 	.word	0x004e0654
   169a4:	094c0485 	.word	0x094c0485
   169a8:	08df08df 	.word	0x08df08df
   169ac:	08ae08ae 	.word	0x08ae08ae
   169b0:	05480888 	.word	0x05480888
   169b4:	08e4053a 	.word	0x08e4053a
   169b8:	09be0514 	.word	0x09be0514
   169bc:	09980914 	.word	0x09980914
   169c0:	07cb09e4 	.word	0x07cb09e4
   169c4:	07f10862 	.word	0x07f10862
   169c8:	04130817 	.word	0x04130817
   169cc:	055200d4 	.word	0x055200d4
   169d0:	68ab      	ldr	r3, [r5, #8]
   169d2:	781b      	ldrb	r3, [r3, #0]
   169d4:	2b38      	cmp	r3, #56	; 0x38
   169d6:	d17b      	bne.n	16ad0 <d_print_comp_inner+0x1c4>
   169d8:	686a      	ldr	r2, [r5, #4]
   169da:	6853      	ldr	r3, [r2, #4]
   169dc:	681b      	ldr	r3, [r3, #0]
   169de:	7859      	ldrb	r1, [r3, #1]
   169e0:	2963      	cmp	r1, #99	; 0x63
   169e2:	f002 814a 	beq.w	18c7a <d_print_comp_inner+0x236e>
   169e6:	f105 0308 	add.w	r3, r5, #8
   169ea:	4641      	mov	r1, r8
   169ec:	4620      	mov	r0, r4
   169ee:	f003 fbbb 	bl	1a168 <d_maybe_print_fold_expression.isra.15>
   169f2:	4606      	mov	r6, r0
   169f4:	2800      	cmp	r0, #0
   169f6:	d157      	bne.n	16aa8 <d_print_comp_inner+0x19c>
   169f8:	686b      	ldr	r3, [r5, #4]
   169fa:	781a      	ldrb	r2, [r3, #0]
   169fc:	2a31      	cmp	r2, #49	; 0x31
   169fe:	f002 836b 	beq.w	190d8 <d_print_comp_inner+0x27cc>
   16a02:	685b      	ldr	r3, [r3, #4]
   16a04:	49c7      	ldr	r1, [pc, #796]	; (16d24 <d_print_comp_inner+0x418>)
   16a06:	6818      	ldr	r0, [r3, #0]
   16a08:	f007 feae 	bl	1e768 <strcmp>
   16a0c:	68ab      	ldr	r3, [r5, #8]
   16a0e:	b920      	cbnz	r0, 16a1a <d_print_comp_inner+0x10e>
   16a10:	685a      	ldr	r2, [r3, #4]
   16a12:	7811      	ldrb	r1, [r2, #0]
   16a14:	2903      	cmp	r1, #3
   16a16:	f002 83a5 	beq.w	19164 <d_print_comp_inner+0x2858>
   16a1a:	685a      	ldr	r2, [r3, #4]
   16a1c:	4641      	mov	r1, r8
   16a1e:	4620      	mov	r0, r4
   16a20:	f003 fb3e 	bl	1a0a0 <d_print_subexpr>
   16a24:	686f      	ldr	r7, [r5, #4]
   16a26:	49c0      	ldr	r1, [pc, #768]	; (16d28 <d_print_comp_inner+0x41c>)
   16a28:	687b      	ldr	r3, [r7, #4]
   16a2a:	f8d3 9000 	ldr.w	r9, [r3]
   16a2e:	4648      	mov	r0, r9
   16a30:	f007 fe9a 	bl	1e768 <strcmp>
   16a34:	4606      	mov	r6, r0
   16a36:	2800      	cmp	r0, #0
   16a38:	f042 826f 	bne.w	18f1a <d_print_comp_inner+0x260e>
   16a3c:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
   16a40:	29ff      	cmp	r1, #255	; 0xff
   16a42:	f002 844a 	beq.w	192da <d_print_comp_inner+0x29ce>
   16a46:	1c4a      	adds	r2, r1, #1
   16a48:	235b      	movs	r3, #91	; 0x5b
   16a4a:	f8c4 2100 	str.w	r2, [r4, #256]	; 0x100
   16a4e:	5463      	strb	r3, [r4, r1]
   16a50:	f884 3104 	strb.w	r3, [r4, #260]	; 0x104
   16a54:	68ab      	ldr	r3, [r5, #8]
   16a56:	4641      	mov	r1, r8
   16a58:	689a      	ldr	r2, [r3, #8]
   16a5a:	4620      	mov	r0, r4
   16a5c:	f002 fcfa 	bl	19454 <d_print_comp>
   16a60:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
   16a64:	29ff      	cmp	r1, #255	; 0xff
   16a66:	f002 8425 	beq.w	192b4 <d_print_comp_inner+0x29a8>
   16a6a:	235d      	movs	r3, #93	; 0x5d
   16a6c:	1c4a      	adds	r2, r1, #1
   16a6e:	f8c4 2100 	str.w	r2, [r4, #256]	; 0x100
   16a72:	5463      	strb	r3, [r4, r1]
   16a74:	f884 3104 	strb.w	r3, [r4, #260]	; 0x104
   16a78:	686b      	ldr	r3, [r5, #4]
   16a7a:	781a      	ldrb	r2, [r3, #0]
   16a7c:	2a31      	cmp	r2, #49	; 0x31
   16a7e:	d113      	bne.n	16aa8 <d_print_comp_inner+0x19c>
   16a80:	685b      	ldr	r3, [r3, #4]
   16a82:	689a      	ldr	r2, [r3, #8]
   16a84:	2a01      	cmp	r2, #1
   16a86:	d10f      	bne.n	16aa8 <d_print_comp_inner+0x19c>
   16a88:	685b      	ldr	r3, [r3, #4]
   16a8a:	781b      	ldrb	r3, [r3, #0]
   16a8c:	2b3e      	cmp	r3, #62	; 0x3e
   16a8e:	d10b      	bne.n	16aa8 <d_print_comp_inner+0x19c>
   16a90:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
   16a94:	29ff      	cmp	r1, #255	; 0xff
   16a96:	f002 8482 	beq.w	1939e <d_print_comp_inner+0x2a92>
   16a9a:	2329      	movs	r3, #41	; 0x29
   16a9c:	1c4a      	adds	r2, r1, #1
   16a9e:	f8c4 2100 	str.w	r2, [r4, #256]	; 0x100
   16aa2:	5463      	strb	r3, [r4, r1]
   16aa4:	f884 3104 	strb.w	r3, [r4, #260]	; 0x104
   16aa8:	b015      	add	sp, #84	; 0x54
   16aaa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   16aae:	f8d4 3120 	ldr.w	r3, [r4, #288]	; 0x120
   16ab2:	2b00      	cmp	r3, #0
   16ab4:	f2c1 84a4 	blt.w	18400 <d_print_comp_inner+0x1af4>
   16ab8:	2b00      	cmp	r3, #0
   16aba:	f002 8432 	beq.w	19322 <d_print_comp_inner+0x2a16>
   16abe:	6880      	ldr	r0, [r0, #8]
   16ac0:	3b01      	subs	r3, #1
   16ac2:	b110      	cbz	r0, 16aca <d_print_comp_inner+0x1be>
   16ac4:	7802      	ldrb	r2, [r0, #0]
   16ac6:	2a2f      	cmp	r2, #47	; 0x2f
   16ac8:	d0f6      	beq.n	16ab8 <d_print_comp_inner+0x1ac>
   16aca:	b10f      	cbz	r7, 16ad0 <d_print_comp_inner+0x1c4>
   16acc:	f8c4 6110 	str.w	r6, [r4, #272]	; 0x110
   16ad0:	2301      	movs	r3, #1
   16ad2:	f8c4 3118 	str.w	r3, [r4, #280]	; 0x118
   16ad6:	b015      	add	sp, #84	; 0x54
   16ad8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   16adc:	f8d4 c114 	ldr.w	ip, [r4, #276]	; 0x114
   16ae0:	f8d4 2110 	ldr.w	r2, [r4, #272]	; 0x110
   16ae4:	9505      	str	r5, [sp, #20]
   16ae6:	ab14      	add	r3, sp, #80	; 0x50
   16ae8:	2100      	movs	r1, #0
   16aea:	f843 cd40 	str.w	ip, [r3, #-64]!
   16aee:	9106      	str	r1, [sp, #24]
   16af0:	f8c4 3114 	str.w	r3, [r4, #276]	; 0x114
   16af4:	9207      	str	r2, [sp, #28]
   16af6:	686a      	ldr	r2, [r5, #4]
   16af8:	4641      	mov	r1, r8
   16afa:	4620      	mov	r0, r4
   16afc:	f002 fcaa 	bl	19454 <d_print_comp>
   16b00:	9b06      	ldr	r3, [sp, #24]
   16b02:	2b00      	cmp	r3, #0
   16b04:	f001 8389 	beq.w	1821a <d_print_comp_inner+0x190e>
   16b08:	9b04      	ldr	r3, [sp, #16]
   16b0a:	f8c4 3114 	str.w	r3, [r4, #276]	; 0x114
   16b0e:	2f00      	cmp	r7, #0
   16b10:	d0ca      	beq.n	16aa8 <d_print_comp_inner+0x19c>
   16b12:	f8c4 6110 	str.w	r6, [r4, #272]	; 0x110
   16b16:	e7c7      	b.n	16aa8 <d_print_comp_inner+0x19c>
   16b18:	f8d0 c114 	ldr.w	ip, [r0, #276]	; 0x114
   16b1c:	f1bc 0f00 	cmp.w	ip, #0
   16b20:	d0de      	beq.n	16ae0 <d_print_comp_inner+0x1d4>
   16b22:	4662      	mov	r2, ip
   16b24:	e005      	b.n	16b32 <d_print_comp_inner+0x226>
   16b26:	428b      	cmp	r3, r1
   16b28:	f001 86b8 	beq.w	1889c <d_print_comp_inner+0x1f90>
   16b2c:	6812      	ldr	r2, [r2, #0]
   16b2e:	2a00      	cmp	r2, #0
   16b30:	d0d6      	beq.n	16ae0 <d_print_comp_inner+0x1d4>
   16b32:	6890      	ldr	r0, [r2, #8]
   16b34:	2800      	cmp	r0, #0
   16b36:	d1f9      	bne.n	16b2c <d_print_comp_inner+0x220>
   16b38:	6851      	ldr	r1, [r2, #4]
   16b3a:	7809      	ldrb	r1, [r1, #0]
   16b3c:	f1a1 0e19 	sub.w	lr, r1, #25
   16b40:	f1be 0f02 	cmp.w	lr, #2
   16b44:	d9ef      	bls.n	16b26 <d_print_comp_inner+0x21a>
   16b46:	4607      	mov	r7, r0
   16b48:	e7ca      	b.n	16ae0 <d_print_comp_inner+0x1d4>
   16b4a:	68af      	ldr	r7, [r5, #8]
   16b4c:	686d      	ldr	r5, [r5, #4]
   16b4e:	2f00      	cmp	r7, #0
   16b50:	d0aa      	beq.n	16aa8 <d_print_comp_inner+0x19c>
   16b52:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
   16b56:	442f      	add	r7, r5
   16b58:	f04f 0800 	mov.w	r8, #0
   16b5c:	e008      	b.n	16b70 <d_print_comp_inner+0x264>
   16b5e:	460b      	mov	r3, r1
   16b60:	3101      	adds	r1, #1
   16b62:	42bd      	cmp	r5, r7
   16b64:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
   16b68:	54e6      	strb	r6, [r4, r3]
   16b6a:	f884 6104 	strb.w	r6, [r4, #260]	; 0x104
   16b6e:	d09b      	beq.n	16aa8 <d_print_comp_inner+0x19c>
   16b70:	29ff      	cmp	r1, #255	; 0xff
   16b72:	f815 6b01 	ldrb.w	r6, [r5], #1
   16b76:	d1f2      	bne.n	16b5e <d_print_comp_inner+0x252>
   16b78:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   16b7c:	f884 80ff 	strb.w	r8, [r4, #255]	; 0xff
   16b80:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
   16b84:	4620      	mov	r0, r4
   16b86:	4798      	blx	r3
   16b88:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   16b8c:	3301      	adds	r3, #1
   16b8e:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
   16b92:	2101      	movs	r1, #1
   16b94:	2300      	movs	r3, #0
   16b96:	e7e4      	b.n	16b62 <d_print_comp_inner+0x256>
   16b98:	4e64      	ldr	r6, [pc, #400]	; (16d2c <d_print_comp_inner+0x420>)
   16b9a:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
   16b9e:	f106 0a11 	add.w	sl, r6, #17
   16ba2:	f04f 0900 	mov.w	r9, #0
   16ba6:	e009      	b.n	16bbc <d_print_comp_inner+0x2b0>
   16ba8:	460b      	mov	r3, r1
   16baa:	3101      	adds	r1, #1
   16bac:	4556      	cmp	r6, sl
   16bae:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
   16bb2:	54e7      	strb	r7, [r4, r3]
   16bb4:	f884 7104 	strb.w	r7, [r4, #260]	; 0x104
   16bb8:	f001 8296 	beq.w	180e8 <d_print_comp_inner+0x17dc>
   16bbc:	29ff      	cmp	r1, #255	; 0xff
   16bbe:	f816 7f01 	ldrb.w	r7, [r6, #1]!
   16bc2:	d1f1      	bne.n	16ba8 <d_print_comp_inner+0x29c>
   16bc4:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   16bc8:	f884 90ff 	strb.w	r9, [r4, #255]	; 0xff
   16bcc:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
   16bd0:	4620      	mov	r0, r4
   16bd2:	4798      	blx	r3
   16bd4:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   16bd8:	3301      	adds	r3, #1
   16bda:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
   16bde:	2101      	movs	r1, #1
   16be0:	2300      	movs	r3, #0
   16be2:	e7e3      	b.n	16bac <d_print_comp_inner+0x2a0>
   16be4:	4e52      	ldr	r6, [pc, #328]	; (16d30 <d_print_comp_inner+0x424>)
   16be6:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
   16bea:	f106 0a19 	add.w	sl, r6, #25
   16bee:	f04f 0900 	mov.w	r9, #0
   16bf2:	e009      	b.n	16c08 <d_print_comp_inner+0x2fc>
   16bf4:	460b      	mov	r3, r1
   16bf6:	3101      	adds	r1, #1
   16bf8:	4556      	cmp	r6, sl
   16bfa:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
   16bfe:	54e7      	strb	r7, [r4, r3]
   16c00:	f884 7104 	strb.w	r7, [r4, #260]	; 0x104
   16c04:	f001 82a8 	beq.w	18158 <d_print_comp_inner+0x184c>
   16c08:	29ff      	cmp	r1, #255	; 0xff
   16c0a:	f816 7f01 	ldrb.w	r7, [r6, #1]!
   16c0e:	d1f1      	bne.n	16bf4 <d_print_comp_inner+0x2e8>
   16c10:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   16c14:	f884 90ff 	strb.w	r9, [r4, #255]	; 0xff
   16c18:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
   16c1c:	4620      	mov	r0, r4
   16c1e:	4798      	blx	r3
   16c20:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   16c24:	3301      	adds	r3, #1
   16c26:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
   16c2a:	2101      	movs	r1, #1
   16c2c:	2300      	movs	r3, #0
   16c2e:	e7e3      	b.n	16bf8 <d_print_comp_inner+0x2ec>
   16c30:	4e40      	ldr	r6, [pc, #256]	; (16d34 <d_print_comp_inner+0x428>)
   16c32:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
   16c36:	f106 0a15 	add.w	sl, r6, #21
   16c3a:	f04f 0900 	mov.w	r9, #0
   16c3e:	e009      	b.n	16c54 <d_print_comp_inner+0x348>
   16c40:	460b      	mov	r3, r1
   16c42:	3101      	adds	r1, #1
   16c44:	4556      	cmp	r6, sl
   16c46:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
   16c4a:	54e7      	strb	r7, [r4, r3]
   16c4c:	f884 7104 	strb.w	r7, [r4, #260]	; 0x104
   16c50:	f001 8251 	beq.w	180f6 <d_print_comp_inner+0x17ea>
   16c54:	29ff      	cmp	r1, #255	; 0xff
   16c56:	f816 7f01 	ldrb.w	r7, [r6, #1]!
   16c5a:	d1f1      	bne.n	16c40 <d_print_comp_inner+0x334>
   16c5c:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   16c60:	f884 90ff 	strb.w	r9, [r4, #255]	; 0xff
   16c64:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
   16c68:	4620      	mov	r0, r4
   16c6a:	4798      	blx	r3
   16c6c:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   16c70:	3301      	adds	r3, #1
   16c72:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
   16c76:	2101      	movs	r1, #1
   16c78:	2300      	movs	r3, #0
   16c7a:	e7e3      	b.n	16c44 <d_print_comp_inner+0x338>
   16c7c:	4e2e      	ldr	r6, [pc, #184]	; (16d38 <d_print_comp_inner+0x42c>)
   16c7e:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
   16c82:	f106 0a16 	add.w	sl, r6, #22
   16c86:	f04f 0900 	mov.w	r9, #0
   16c8a:	e009      	b.n	16ca0 <d_print_comp_inner+0x394>
   16c8c:	460b      	mov	r3, r1
   16c8e:	3101      	adds	r1, #1
   16c90:	4556      	cmp	r6, sl
   16c92:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
   16c96:	54e7      	strb	r7, [r4, r3]
   16c98:	f884 7104 	strb.w	r7, [r4, #260]	; 0x104
   16c9c:	f001 8263 	beq.w	18166 <d_print_comp_inner+0x185a>
   16ca0:	29ff      	cmp	r1, #255	; 0xff
   16ca2:	f816 7f01 	ldrb.w	r7, [r6, #1]!
   16ca6:	d1f1      	bne.n	16c8c <d_print_comp_inner+0x380>
   16ca8:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   16cac:	f884 90ff 	strb.w	r9, [r4, #255]	; 0xff
   16cb0:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
   16cb4:	4620      	mov	r0, r4
   16cb6:	4798      	blx	r3
   16cb8:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   16cbc:	3301      	adds	r3, #1
   16cbe:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
   16cc2:	2101      	movs	r1, #1
   16cc4:	2300      	movs	r3, #0
   16cc6:	e7e3      	b.n	16c90 <d_print_comp_inner+0x384>
   16cc8:	4e1c      	ldr	r6, [pc, #112]	; (16d3c <d_print_comp_inner+0x430>)
   16cca:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
   16cce:	f106 0a13 	add.w	sl, r6, #19
   16cd2:	f04f 0900 	mov.w	r9, #0
   16cd6:	e009      	b.n	16cec <d_print_comp_inner+0x3e0>
   16cd8:	460b      	mov	r3, r1
   16cda:	3101      	adds	r1, #1
   16cdc:	45b2      	cmp	sl, r6
   16cde:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
   16ce2:	54e7      	strb	r7, [r4, r3]
   16ce4:	f884 7104 	strb.w	r7, [r4, #260]	; 0x104
   16ce8:	f001 8077 	beq.w	17dda <d_print_comp_inner+0x14ce>
   16cec:	29ff      	cmp	r1, #255	; 0xff
   16cee:	f816 7f01 	ldrb.w	r7, [r6, #1]!
   16cf2:	d1f1      	bne.n	16cd8 <d_print_comp_inner+0x3cc>
   16cf4:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   16cf8:	f884 90ff 	strb.w	r9, [r4, #255]	; 0xff
   16cfc:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
   16d00:	4620      	mov	r0, r4
   16d02:	4798      	blx	r3
   16d04:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   16d08:	3301      	adds	r3, #1
   16d0a:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
   16d0e:	2101      	movs	r1, #1
   16d10:	2300      	movs	r3, #0
   16d12:	e7e3      	b.n	16cdc <d_print_comp_inner+0x3d0>
   16d14:	4e0a      	ldr	r6, [pc, #40]	; (16d40 <d_print_comp_inner+0x434>)
   16d16:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
   16d1a:	f106 0a1a 	add.w	sl, r6, #26
   16d1e:	f04f 0900 	mov.w	r9, #0
   16d22:	e019      	b.n	16d58 <d_print_comp_inner+0x44c>
   16d24:	00023f4c 	.word	0x00023f4c
   16d28:	00024148 	.word	0x00024148
   16d2c:	000240d7 	.word	0x000240d7
   16d30:	000240a3 	.word	0x000240a3
   16d34:	000240bf 	.word	0x000240bf
   16d38:	0002408b 	.word	0x0002408b
   16d3c:	00024077 	.word	0x00024077
   16d40:	0002404b 	.word	0x0002404b
   16d44:	460b      	mov	r3, r1
   16d46:	3101      	adds	r1, #1
   16d48:	4556      	cmp	r6, sl
   16d4a:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
   16d4e:	54e7      	strb	r7, [r4, r3]
   16d50:	f884 7104 	strb.w	r7, [r4, #260]	; 0x104
   16d54:	f001 804f 	beq.w	17df6 <d_print_comp_inner+0x14ea>
   16d58:	29ff      	cmp	r1, #255	; 0xff
   16d5a:	f816 7f01 	ldrb.w	r7, [r6, #1]!
   16d5e:	d1f1      	bne.n	16d44 <d_print_comp_inner+0x438>
   16d60:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   16d64:	f884 90ff 	strb.w	r9, [r4, #255]	; 0xff
   16d68:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
   16d6c:	4620      	mov	r0, r4
   16d6e:	4798      	blx	r3
   16d70:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   16d74:	3301      	adds	r3, #1
   16d76:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
   16d7a:	2101      	movs	r1, #1
   16d7c:	2300      	movs	r3, #0
   16d7e:	e7e3      	b.n	16d48 <d_print_comp_inner+0x43c>
   16d80:	4eb5      	ldr	r6, [pc, #724]	; (17058 <d_print_comp_inner+0x74c>)
   16d82:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
   16d86:	f106 0a0f 	add.w	sl, r6, #15
   16d8a:	f04f 0900 	mov.w	r9, #0
   16d8e:	e009      	b.n	16da4 <d_print_comp_inner+0x498>
   16d90:	460b      	mov	r3, r1
   16d92:	3101      	adds	r1, #1
   16d94:	4556      	cmp	r6, sl
   16d96:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
   16d9a:	54e7      	strb	r7, [r4, r3]
   16d9c:	f884 7104 	strb.w	r7, [r4, #260]	; 0x104
   16da0:	f001 8022 	beq.w	17de8 <d_print_comp_inner+0x14dc>
   16da4:	29ff      	cmp	r1, #255	; 0xff
   16da6:	f816 7f01 	ldrb.w	r7, [r6, #1]!
   16daa:	d1f1      	bne.n	16d90 <d_print_comp_inner+0x484>
   16dac:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   16db0:	f884 90ff 	strb.w	r9, [r4, #255]	; 0xff
   16db4:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
   16db8:	4620      	mov	r0, r4
   16dba:	4798      	blx	r3
   16dbc:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   16dc0:	3301      	adds	r3, #1
   16dc2:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
   16dc6:	2101      	movs	r1, #1
   16dc8:	2300      	movs	r3, #0
   16dca:	e7e3      	b.n	16d94 <d_print_comp_inner+0x488>
   16dcc:	4ea3      	ldr	r6, [pc, #652]	; (1705c <d_print_comp_inner+0x750>)
   16dce:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
   16dd2:	f106 0a11 	add.w	sl, r6, #17
   16dd6:	f04f 0900 	mov.w	r9, #0
   16dda:	e009      	b.n	16df0 <d_print_comp_inner+0x4e4>
   16ddc:	460b      	mov	r3, r1
   16dde:	3101      	adds	r1, #1
   16de0:	4556      	cmp	r6, sl
   16de2:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
   16de6:	54e7      	strb	r7, [r4, r3]
   16de8:	f884 7104 	strb.w	r7, [r4, #260]	; 0x104
   16dec:	f001 800a 	beq.w	17e04 <d_print_comp_inner+0x14f8>
   16df0:	29ff      	cmp	r1, #255	; 0xff
   16df2:	f816 7f01 	ldrb.w	r7, [r6, #1]!
   16df6:	d1f1      	bne.n	16ddc <d_print_comp_inner+0x4d0>
   16df8:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   16dfc:	f884 90ff 	strb.w	r9, [r4, #255]	; 0xff
   16e00:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
   16e04:	4620      	mov	r0, r4
   16e06:	4798      	blx	r3
   16e08:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   16e0c:	3301      	adds	r3, #1
   16e0e:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
   16e12:	2101      	movs	r1, #1
   16e14:	2300      	movs	r3, #0
   16e16:	e7e3      	b.n	16de0 <d_print_comp_inner+0x4d4>
   16e18:	4e91      	ldr	r6, [pc, #580]	; (17060 <d_print_comp_inner+0x754>)
   16e1a:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
   16e1e:	f106 0a15 	add.w	sl, r6, #21
   16e22:	f04f 0900 	mov.w	r9, #0
   16e26:	e009      	b.n	16e3c <d_print_comp_inner+0x530>
   16e28:	460b      	mov	r3, r1
   16e2a:	3101      	adds	r1, #1
   16e2c:	4556      	cmp	r6, sl
   16e2e:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
   16e32:	54e7      	strb	r7, [r4, r3]
   16e34:	f884 7104 	strb.w	r7, [r4, #260]	; 0x104
   16e38:	f000 87b3 	beq.w	17da2 <d_print_comp_inner+0x1496>
   16e3c:	29ff      	cmp	r1, #255	; 0xff
   16e3e:	f816 7f01 	ldrb.w	r7, [r6, #1]!
   16e42:	d1f1      	bne.n	16e28 <d_print_comp_inner+0x51c>
   16e44:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   16e48:	f884 90ff 	strb.w	r9, [r4, #255]	; 0xff
   16e4c:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
   16e50:	4620      	mov	r0, r4
   16e52:	4798      	blx	r3
   16e54:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   16e58:	3301      	adds	r3, #1
   16e5a:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
   16e5e:	2101      	movs	r1, #1
   16e60:	2300      	movs	r3, #0
   16e62:	e7e3      	b.n	16e2c <d_print_comp_inner+0x520>
   16e64:	4e7f      	ldr	r6, [pc, #508]	; (17064 <d_print_comp_inner+0x758>)
   16e66:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
   16e6a:	f106 0a12 	add.w	sl, r6, #18
   16e6e:	f04f 0900 	mov.w	r9, #0
   16e72:	e009      	b.n	16e88 <d_print_comp_inner+0x57c>
   16e74:	460b      	mov	r3, r1
   16e76:	3101      	adds	r1, #1
   16e78:	45b2      	cmp	sl, r6
   16e7a:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
   16e7e:	54e7      	strb	r7, [r4, r3]
   16e80:	f884 7104 	strb.w	r7, [r4, #260]	; 0x104
   16e84:	f000 879b 	beq.w	17dbe <d_print_comp_inner+0x14b2>
   16e88:	29ff      	cmp	r1, #255	; 0xff
   16e8a:	f816 7f01 	ldrb.w	r7, [r6, #1]!
   16e8e:	d1f1      	bne.n	16e74 <d_print_comp_inner+0x568>
   16e90:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   16e94:	f884 90ff 	strb.w	r9, [r4, #255]	; 0xff
   16e98:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
   16e9c:	4620      	mov	r0, r4
   16e9e:	4798      	blx	r3
   16ea0:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   16ea4:	3301      	adds	r3, #1
   16ea6:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
   16eaa:	2101      	movs	r1, #1
   16eac:	2300      	movs	r3, #0
   16eae:	e7e3      	b.n	16e78 <d_print_comp_inner+0x56c>
   16eb0:	4e6d      	ldr	r6, [pc, #436]	; (17068 <d_print_comp_inner+0x75c>)
   16eb2:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
   16eb6:	f106 0a10 	add.w	sl, r6, #16
   16eba:	f04f 0900 	mov.w	r9, #0
   16ebe:	e009      	b.n	16ed4 <d_print_comp_inner+0x5c8>
   16ec0:	460b      	mov	r3, r1
   16ec2:	3101      	adds	r1, #1
   16ec4:	4556      	cmp	r6, sl
   16ec6:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
   16eca:	54e7      	strb	r7, [r4, r3]
   16ecc:	f884 7104 	strb.w	r7, [r4, #260]	; 0x104
   16ed0:	f000 876e 	beq.w	17db0 <d_print_comp_inner+0x14a4>
   16ed4:	29ff      	cmp	r1, #255	; 0xff
   16ed6:	f816 7f01 	ldrb.w	r7, [r6, #1]!
   16eda:	d1f1      	bne.n	16ec0 <d_print_comp_inner+0x5b4>
   16edc:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   16ee0:	f884 90ff 	strb.w	r9, [r4, #255]	; 0xff
   16ee4:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
   16ee8:	4620      	mov	r0, r4
   16eea:	4798      	blx	r3
   16eec:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   16ef0:	3301      	adds	r3, #1
   16ef2:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
   16ef6:	2101      	movs	r1, #1
   16ef8:	2300      	movs	r3, #0
   16efa:	e7e3      	b.n	16ec4 <d_print_comp_inner+0x5b8>
   16efc:	4e5b      	ldr	r6, [pc, #364]	; (1706c <d_print_comp_inner+0x760>)
   16efe:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
   16f02:	f106 0a0d 	add.w	sl, r6, #13
   16f06:	f04f 0900 	mov.w	r9, #0
   16f0a:	e009      	b.n	16f20 <d_print_comp_inner+0x614>
   16f0c:	460b      	mov	r3, r1
   16f0e:	3101      	adds	r1, #1
   16f10:	4556      	cmp	r6, sl
   16f12:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
   16f16:	54e7      	strb	r7, [r4, r3]
   16f18:	f884 7104 	strb.w	r7, [r4, #260]	; 0x104
   16f1c:	f000 8756 	beq.w	17dcc <d_print_comp_inner+0x14c0>
   16f20:	29ff      	cmp	r1, #255	; 0xff
   16f22:	f816 7b01 	ldrb.w	r7, [r6], #1
   16f26:	d1f1      	bne.n	16f0c <d_print_comp_inner+0x600>
   16f28:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   16f2c:	f884 90ff 	strb.w	r9, [r4, #255]	; 0xff
   16f30:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
   16f34:	4620      	mov	r0, r4
   16f36:	4798      	blx	r3
   16f38:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   16f3c:	3301      	adds	r3, #1
   16f3e:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
   16f42:	2101      	movs	r1, #1
   16f44:	2300      	movs	r3, #0
   16f46:	e7e3      	b.n	16f10 <d_print_comp_inner+0x604>
   16f48:	4e49      	ldr	r6, [pc, #292]	; (17070 <d_print_comp_inner+0x764>)
   16f4a:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
   16f4e:	f106 0a18 	add.w	sl, r6, #24
   16f52:	f04f 0900 	mov.w	r9, #0
   16f56:	e009      	b.n	16f6c <d_print_comp_inner+0x660>
   16f58:	460b      	mov	r3, r1
   16f5a:	3101      	adds	r1, #1
   16f5c:	45b2      	cmp	sl, r6
   16f5e:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
   16f62:	54e7      	strb	r7, [r4, r3]
   16f64:	f884 7104 	strb.w	r7, [r4, #260]	; 0x104
   16f68:	f000 86e3 	beq.w	17d32 <d_print_comp_inner+0x1426>
   16f6c:	29ff      	cmp	r1, #255	; 0xff
   16f6e:	f816 7f01 	ldrb.w	r7, [r6, #1]!
   16f72:	d1f1      	bne.n	16f58 <d_print_comp_inner+0x64c>
   16f74:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   16f78:	f884 90ff 	strb.w	r9, [r4, #255]	; 0xff
   16f7c:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
   16f80:	4620      	mov	r0, r4
   16f82:	4798      	blx	r3
   16f84:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   16f88:	3301      	adds	r3, #1
   16f8a:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
   16f8e:	2101      	movs	r1, #1
   16f90:	2300      	movs	r3, #0
   16f92:	e7e3      	b.n	16f5c <d_print_comp_inner+0x650>
   16f94:	4e37      	ldr	r6, [pc, #220]	; (17074 <d_print_comp_inner+0x768>)
   16f96:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
   16f9a:	f106 0a0b 	add.w	sl, r6, #11
   16f9e:	f04f 0900 	mov.w	r9, #0
   16fa2:	e009      	b.n	16fb8 <d_print_comp_inner+0x6ac>
   16fa4:	460b      	mov	r3, r1
   16fa6:	3101      	adds	r1, #1
   16fa8:	45b2      	cmp	sl, r6
   16faa:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
   16fae:	54e7      	strb	r7, [r4, r3]
   16fb0:	f884 7104 	strb.w	r7, [r4, #260]	; 0x104
   16fb4:	f000 87ca 	beq.w	17f4c <d_print_comp_inner+0x1640>
   16fb8:	29ff      	cmp	r1, #255	; 0xff
   16fba:	f816 7b01 	ldrb.w	r7, [r6], #1
   16fbe:	d1f1      	bne.n	16fa4 <d_print_comp_inner+0x698>
   16fc0:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   16fc4:	f884 90ff 	strb.w	r9, [r4, #255]	; 0xff
   16fc8:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
   16fcc:	4620      	mov	r0, r4
   16fce:	4798      	blx	r3
   16fd0:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   16fd4:	3301      	adds	r3, #1
   16fd6:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
   16fda:	2101      	movs	r1, #1
   16fdc:	2300      	movs	r3, #0
   16fde:	e7e3      	b.n	16fa8 <d_print_comp_inner+0x69c>
   16fe0:	4e25      	ldr	r6, [pc, #148]	; (17078 <d_print_comp_inner+0x76c>)
   16fe2:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
   16fe6:	f106 0a08 	add.w	sl, r6, #8
   16fea:	f04f 0900 	mov.w	r9, #0
   16fee:	e009      	b.n	17004 <d_print_comp_inner+0x6f8>
   16ff0:	460b      	mov	r3, r1
   16ff2:	3101      	adds	r1, #1
   16ff4:	45b2      	cmp	sl, r6
   16ff6:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
   16ffa:	54e7      	strb	r7, [r4, r3]
   16ffc:	f884 7104 	strb.w	r7, [r4, #260]	; 0x104
   17000:	f000 86c8 	beq.w	17d94 <d_print_comp_inner+0x1488>
   17004:	29ff      	cmp	r1, #255	; 0xff
   17006:	f816 7f01 	ldrb.w	r7, [r6, #1]!
   1700a:	d1f1      	bne.n	16ff0 <d_print_comp_inner+0x6e4>
   1700c:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   17010:	f884 90ff 	strb.w	r9, [r4, #255]	; 0xff
   17014:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
   17018:	4620      	mov	r0, r4
   1701a:	4798      	blx	r3
   1701c:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   17020:	3301      	adds	r3, #1
   17022:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
   17026:	2101      	movs	r1, #1
   17028:	2300      	movs	r3, #0
   1702a:	e7e3      	b.n	16ff4 <d_print_comp_inner+0x6e8>
   1702c:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
   17030:	29ff      	cmp	r1, #255	; 0xff
   17032:	f001 847c 	beq.w	1892e <d_print_comp_inner+0x2022>
   17036:	1c4a      	adds	r2, r1, #1
   17038:	237e      	movs	r3, #126	; 0x7e
   1703a:	f8c4 2100 	str.w	r2, [r4, #256]	; 0x100
   1703e:	5463      	strb	r3, [r4, r1]
   17040:	f884 3104 	strb.w	r3, [r4, #260]	; 0x104
   17044:	4641      	mov	r1, r8
   17046:	68aa      	ldr	r2, [r5, #8]
   17048:	4620      	mov	r0, r4
   1704a:	f002 fa03 	bl	19454 <d_print_comp>
   1704e:	e52b      	b.n	16aa8 <d_print_comp_inner+0x19c>
   17050:	68aa      	ldr	r2, [r5, #8]
   17052:	f002 f9ff 	bl	19454 <d_print_comp>
   17056:	e527      	b.n	16aa8 <d_print_comp_inner+0x19c>
   17058:	00024067 	.word	0x00024067
   1705c:	00024037 	.word	0x00024037
   17060:	00024033 	.word	0x00024033
   17064:	0002400b 	.word	0x0002400b
   17068:	0002401f 	.word	0x0002401f
   1706c:	00023ffc 	.word	0x00023ffc
   17070:	00023fd7 	.word	0x00023fd7
   17074:	00023fc0 	.word	0x00023fc0
   17078:	00023fcb 	.word	0x00023fcb
   1707c:	2200      	movs	r2, #0
   1707e:	f8d0 3114 	ldr.w	r3, [r0, #276]	; 0x114
   17082:	f8c0 2114 	str.w	r2, [r0, #276]	; 0x114
   17086:	686e      	ldr	r6, [r5, #4]
   17088:	9300      	str	r3, [sp, #0]
   1708a:	2e00      	cmp	r6, #0
   1708c:	f000 864c 	beq.w	17d28 <d_print_comp_inner+0x141c>
   17090:	f10d 0910 	add.w	r9, sp, #16
   17094:	f8d0 c110 	ldr.w	ip, [r0, #272]	; 0x110
   17098:	4617      	mov	r7, r2
   1709a:	4696      	mov	lr, r2
   1709c:	464b      	mov	r3, r9
   1709e:	7831      	ldrb	r1, [r6, #0]
   170a0:	601a      	str	r2, [r3, #0]
   170a2:	f1a1 021c 	sub.w	r2, r1, #28
   170a6:	2a04      	cmp	r2, #4
   170a8:	605e      	str	r6, [r3, #4]
   170aa:	f8c3 e008 	str.w	lr, [r3, #8]
   170ae:	f8c3 c00c 	str.w	ip, [r3, #12]
   170b2:	f107 0701 	add.w	r7, r7, #1
   170b6:	4618      	mov	r0, r3
   170b8:	461a      	mov	r2, r3
   170ba:	f240 862a 	bls.w	17d12 <d_print_comp_inner+0x1406>
   170be:	294c      	cmp	r1, #76	; 0x4c
   170c0:	f000 8627 	beq.w	17d12 <d_print_comp_inner+0x1406>
   170c4:	2904      	cmp	r1, #4
   170c6:	f8c4 3114 	str.w	r3, [r4, #276]	; 0x114
   170ca:	f001 87bb 	beq.w	19044 <d_print_comp_inner+0x2738>
   170ce:	2902      	cmp	r1, #2
   170d0:	d11a      	bne.n	17108 <d_print_comp_inner+0x7fc>
   170d2:	f8d6 b008 	ldr.w	fp, [r6, #8]
   170d6:	f89b 3000 	ldrb.w	r3, [fp]
   170da:	2b46      	cmp	r3, #70	; 0x46
   170dc:	f002 8035 	beq.w	1914a <d_print_comp_inner+0x283e>
   170e0:	462b      	mov	r3, r5
   170e2:	eb09 1e07 	add.w	lr, r9, r7, lsl #4
   170e6:	9601      	str	r6, [sp, #4]
   170e8:	465d      	mov	r5, fp
   170ea:	4676      	mov	r6, lr
   170ec:	46a2      	mov	sl, r4
   170ee:	469b      	mov	fp, r3
   170f0:	782b      	ldrb	r3, [r5, #0]
   170f2:	f1a3 021c 	sub.w	r2, r3, #28
   170f6:	2a04      	cmp	r2, #4
   170f8:	f241 805d 	bls.w	181b6 <d_print_comp_inner+0x18aa>
   170fc:	2b4c      	cmp	r3, #76	; 0x4c
   170fe:	f001 805a 	beq.w	181b6 <d_print_comp_inner+0x18aa>
   17102:	9e01      	ldr	r6, [sp, #4]
   17104:	4654      	mov	r4, sl
   17106:	465d      	mov	r5, fp
   17108:	68aa      	ldr	r2, [r5, #8]
   1710a:	4641      	mov	r1, r8
   1710c:	4620      	mov	r0, r4
   1710e:	f002 f9a1 	bl	19454 <d_print_comp>
   17112:	7833      	ldrb	r3, [r6, #0]
   17114:	2b04      	cmp	r3, #4
   17116:	f002 8020 	beq.w	1915a <d_print_comp_inner+0x284e>
   1711a:	eb09 1907 	add.w	r9, r9, r7, lsl #4
   1711e:	2620      	movs	r6, #32
   17120:	f859 5c08 	ldr.w	r5, [r9, #-8]
   17124:	3f01      	subs	r7, #1
   17126:	b985      	cbnz	r5, 1714a <d_print_comp_inner+0x83e>
   17128:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
   1712c:	29ff      	cmp	r1, #255	; 0xff
   1712e:	f002 8043 	beq.w	191b8 <d_print_comp_inner+0x28ac>
   17132:	1c4b      	adds	r3, r1, #1
   17134:	f8c4 3100 	str.w	r3, [r4, #256]	; 0x100
   17138:	f859 2c0c 	ldr.w	r2, [r9, #-12]
   1713c:	5466      	strb	r6, [r4, r1]
   1713e:	4620      	mov	r0, r4
   17140:	4641      	mov	r1, r8
   17142:	f884 6104 	strb.w	r6, [r4, #260]	; 0x104
   17146:	f002 f995 	bl	19474 <d_print_mod>
   1714a:	f1a9 0910 	sub.w	r9, r9, #16
   1714e:	2f00      	cmp	r7, #0
   17150:	d1e6      	bne.n	17120 <d_print_comp_inner+0x814>
   17152:	9b00      	ldr	r3, [sp, #0]
   17154:	f8c4 3114 	str.w	r3, [r4, #276]	; 0x114
   17158:	e4a6      	b.n	16aa8 <d_print_comp_inner+0x19c>
   1715a:	4ed1      	ldr	r6, [pc, #836]	; (174a0 <d_print_comp_inner+0xb94>)
   1715c:	686a      	ldr	r2, [r5, #4]
   1715e:	f002 f979 	bl	19454 <d_print_comp>
   17162:	f106 0a05 	add.w	sl, r6, #5
   17166:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
   1716a:	f04f 0900 	mov.w	r9, #0
   1716e:	e009      	b.n	17184 <d_print_comp_inner+0x878>
   17170:	460b      	mov	r3, r1
   17172:	3101      	adds	r1, #1
   17174:	45b2      	cmp	sl, r6
   17176:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
   1717a:	54e7      	strb	r7, [r4, r3]
   1717c:	f884 7104 	strb.w	r7, [r4, #260]	; 0x104
   17180:	f000 86d1 	beq.w	17f26 <d_print_comp_inner+0x161a>
   17184:	29ff      	cmp	r1, #255	; 0xff
   17186:	f816 7b01 	ldrb.w	r7, [r6], #1
   1718a:	d1f1      	bne.n	17170 <d_print_comp_inner+0x864>
   1718c:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   17190:	f884 90ff 	strb.w	r9, [r4, #255]	; 0xff
   17194:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
   17198:	4620      	mov	r0, r4
   1719a:	4798      	blx	r3
   1719c:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   171a0:	3301      	adds	r3, #1
   171a2:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
   171a6:	2101      	movs	r1, #1
   171a8:	2300      	movs	r3, #0
   171aa:	e7e3      	b.n	17174 <d_print_comp_inner+0x868>
   171ac:	686a      	ldr	r2, [r5, #4]
   171ae:	f002 f951 	bl	19454 <d_print_comp>
   171b2:	f018 0904 	ands.w	r9, r8, #4
   171b6:	f001 82aa 	beq.w	1870e <d_print_comp_inner+0x1e02>
   171ba:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
   171be:	29ff      	cmp	r1, #255	; 0xff
   171c0:	f001 859a 	beq.w	18cf8 <d_print_comp_inner+0x23ec>
   171c4:	1c4a      	adds	r2, r1, #1
   171c6:	232e      	movs	r3, #46	; 0x2e
   171c8:	f8c4 2100 	str.w	r2, [r4, #256]	; 0x100
   171cc:	5463      	strb	r3, [r4, r1]
   171ce:	f884 3104 	strb.w	r3, [r4, #260]	; 0x104
   171d2:	68ad      	ldr	r5, [r5, #8]
   171d4:	782b      	ldrb	r3, [r5, #0]
   171d6:	2b46      	cmp	r3, #70	; 0x46
   171d8:	f001 83cc 	beq.w	18974 <d_print_comp_inner+0x2068>
   171dc:	462a      	mov	r2, r5
   171de:	4641      	mov	r1, r8
   171e0:	4620      	mov	r0, r4
   171e2:	f002 f937 	bl	19454 <d_print_comp>
   171e6:	e45f      	b.n	16aa8 <d_print_comp_inner+0x19c>
   171e8:	f011 0804 	ands.w	r8, r1, #4
   171ec:	f041 808b 	bne.w	18306 <d_print_comp_inner+0x19fa>
   171f0:	68af      	ldr	r7, [r5, #8]
   171f2:	686d      	ldr	r5, [r5, #4]
   171f4:	2f00      	cmp	r7, #0
   171f6:	f43f ac57 	beq.w	16aa8 <d_print_comp_inner+0x19c>
   171fa:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
   171fe:	442f      	add	r7, r5
   17200:	e009      	b.n	17216 <d_print_comp_inner+0x90a>
   17202:	460b      	mov	r3, r1
   17204:	3101      	adds	r1, #1
   17206:	42bd      	cmp	r5, r7
   17208:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
   1720c:	54e6      	strb	r6, [r4, r3]
   1720e:	f884 6104 	strb.w	r6, [r4, #260]	; 0x104
   17212:	f43f ac49 	beq.w	16aa8 <d_print_comp_inner+0x19c>
   17216:	29ff      	cmp	r1, #255	; 0xff
   17218:	f815 6b01 	ldrb.w	r6, [r5], #1
   1721c:	d1f1      	bne.n	17202 <d_print_comp_inner+0x8f6>
   1721e:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   17222:	f884 80ff 	strb.w	r8, [r4, #255]	; 0xff
   17226:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
   1722a:	4620      	mov	r0, r4
   1722c:	4798      	blx	r3
   1722e:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   17232:	3301      	adds	r3, #1
   17234:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
   17238:	2101      	movs	r1, #1
   1723a:	2300      	movs	r3, #0
   1723c:	e7e3      	b.n	17206 <d_print_comp_inner+0x8fa>
   1723e:	2301      	movs	r3, #1
   17240:	f8c0 3118 	str.w	r3, [r0, #280]	; 0x118
   17244:	e430      	b.n	16aa8 <d_print_comp_inner+0x19c>
   17246:	f8d0 311c 	ldr.w	r3, [r0, #284]	; 0x11c
   1724a:	2b00      	cmp	r3, #0
   1724c:	f041 8106 	bne.w	1845c <d_print_comp_inner+0x1b50>
   17250:	1d29      	adds	r1, r5, #4
   17252:	f7fd fa97 	bl	14784 <d_lookup_template_argument.isra.6>
   17256:	2800      	cmp	r0, #0
   17258:	f43f ac3a 	beq.w	16ad0 <d_print_comp_inner+0x1c4>
   1725c:	7803      	ldrb	r3, [r0, #0]
   1725e:	2b2f      	cmp	r3, #47	; 0x2f
   17260:	f001 83fc 	beq.w	18a5c <d_print_comp_inner+0x2150>
   17264:	f8d4 5110 	ldr.w	r5, [r4, #272]	; 0x110
   17268:	682b      	ldr	r3, [r5, #0]
   1726a:	f8c4 3110 	str.w	r3, [r4, #272]	; 0x110
   1726e:	4602      	mov	r2, r0
   17270:	4641      	mov	r1, r8
   17272:	4620      	mov	r0, r4
   17274:	f002 f8ee 	bl	19454 <d_print_comp>
   17278:	f8c4 5110 	str.w	r5, [r4, #272]	; 0x110
   1727c:	e414      	b.n	16aa8 <d_print_comp_inner+0x19c>
   1727e:	2300      	movs	r3, #0
   17280:	f8d0 9114 	ldr.w	r9, [r0, #276]	; 0x114
   17284:	f8d0 7144 	ldr.w	r7, [r0, #324]	; 0x144
   17288:	f8c0 3114 	str.w	r3, [r0, #276]	; 0x114
   1728c:	f8c0 5144 	str.w	r5, [r0, #324]	; 0x144
   17290:	f011 0f04 	tst.w	r1, #4
   17294:	686e      	ldr	r6, [r5, #4]
   17296:	d005      	beq.n	172a4 <d_print_comp_inner+0x998>
   17298:	7833      	ldrb	r3, [r6, #0]
   1729a:	b91b      	cbnz	r3, 172a4 <d_print_comp_inner+0x998>
   1729c:	68b2      	ldr	r2, [r6, #8]
   1729e:	2a06      	cmp	r2, #6
   172a0:	f001 853c 	beq.w	18d1c <d_print_comp_inner+0x2410>
   172a4:	4632      	mov	r2, r6
   172a6:	4641      	mov	r1, r8
   172a8:	4620      	mov	r0, r4
   172aa:	f002 f8d3 	bl	19454 <d_print_comp>
   172ae:	f894 3104 	ldrb.w	r3, [r4, #260]	; 0x104
   172b2:	2b3c      	cmp	r3, #60	; 0x3c
   172b4:	f001 8274 	beq.w	187a0 <d_print_comp_inner+0x1e94>
   172b8:	f8d4 3100 	ldr.w	r3, [r4, #256]	; 0x100
   172bc:	2bff      	cmp	r3, #255	; 0xff
   172be:	f001 8489 	beq.w	18bd4 <d_print_comp_inner+0x22c8>
   172c2:	1c59      	adds	r1, r3, #1
   172c4:	223c      	movs	r2, #60	; 0x3c
   172c6:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
   172ca:	54e2      	strb	r2, [r4, r3]
   172cc:	f884 2104 	strb.w	r2, [r4, #260]	; 0x104
   172d0:	4641      	mov	r1, r8
   172d2:	68aa      	ldr	r2, [r5, #8]
   172d4:	4620      	mov	r0, r4
   172d6:	f002 f8bd 	bl	19454 <d_print_comp>
   172da:	f894 3104 	ldrb.w	r3, [r4, #260]	; 0x104
   172de:	2b3e      	cmp	r3, #62	; 0x3e
   172e0:	f001 8239 	beq.w	18756 <d_print_comp_inner+0x1e4a>
   172e4:	f8d4 3100 	ldr.w	r3, [r4, #256]	; 0x100
   172e8:	2bff      	cmp	r3, #255	; 0xff
   172ea:	f001 8460 	beq.w	18bae <d_print_comp_inner+0x22a2>
   172ee:	1c59      	adds	r1, r3, #1
   172f0:	223e      	movs	r2, #62	; 0x3e
   172f2:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
   172f6:	54e2      	strb	r2, [r4, r3]
   172f8:	f884 2104 	strb.w	r2, [r4, #260]	; 0x104
   172fc:	f8c4 9114 	str.w	r9, [r4, #276]	; 0x114
   17300:	f8c4 7144 	str.w	r7, [r4, #324]	; 0x144
   17304:	f7ff bbd0 	b.w	16aa8 <d_print_comp_inner+0x19c>
   17308:	686f      	ldr	r7, [r5, #4]
   1730a:	2f00      	cmp	r7, #0
   1730c:	f001 8082 	beq.w	18414 <d_print_comp_inner+0x1b08>
   17310:	4d64      	ldr	r5, [pc, #400]	; (174a4 <d_print_comp_inner+0xb98>)
   17312:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
   17316:	f105 0906 	add.w	r9, r5, #6
   1731a:	f04f 0800 	mov.w	r8, #0
   1731e:	e009      	b.n	17334 <d_print_comp_inner+0xa28>
   17320:	460b      	mov	r3, r1
   17322:	3101      	adds	r1, #1
   17324:	45a9      	cmp	r9, r5
   17326:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
   1732a:	54e6      	strb	r6, [r4, r3]
   1732c:	f884 6104 	strb.w	r6, [r4, #260]	; 0x104
   17330:	f000 8782 	beq.w	18238 <d_print_comp_inner+0x192c>
   17334:	29ff      	cmp	r1, #255	; 0xff
   17336:	f815 6b01 	ldrb.w	r6, [r5], #1
   1733a:	d1f1      	bne.n	17320 <d_print_comp_inner+0xa14>
   1733c:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   17340:	f884 80ff 	strb.w	r8, [r4, #255]	; 0xff
   17344:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
   17348:	4620      	mov	r0, r4
   1734a:	4798      	blx	r3
   1734c:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   17350:	3301      	adds	r3, #1
   17352:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
   17356:	2101      	movs	r1, #1
   17358:	2300      	movs	r3, #0
   1735a:	e7e3      	b.n	17324 <d_print_comp_inner+0xa18>
   1735c:	4e52      	ldr	r6, [pc, #328]	; (174a8 <d_print_comp_inner+0xb9c>)
   1735e:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
   17362:	f106 0a0a 	add.w	sl, r6, #10
   17366:	f04f 0900 	mov.w	r9, #0
   1736a:	e009      	b.n	17380 <d_print_comp_inner+0xa74>
   1736c:	460b      	mov	r3, r1
   1736e:	3101      	adds	r1, #1
   17370:	4556      	cmp	r6, sl
   17372:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
   17376:	54e7      	strb	r7, [r4, r3]
   17378:	f884 7104 	strb.w	r7, [r4, #260]	; 0x104
   1737c:	f000 8701 	beq.w	18182 <d_print_comp_inner+0x1876>
   17380:	29ff      	cmp	r1, #255	; 0xff
   17382:	f816 7b01 	ldrb.w	r7, [r6], #1
   17386:	d1f1      	bne.n	1736c <d_print_comp_inner+0xa60>
   17388:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   1738c:	f884 90ff 	strb.w	r9, [r4, #255]	; 0xff
   17390:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
   17394:	4620      	mov	r0, r4
   17396:	4798      	blx	r3
   17398:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   1739c:	3301      	adds	r3, #1
   1739e:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
   173a2:	2101      	movs	r1, #1
   173a4:	2300      	movs	r3, #0
   173a6:	e7e3      	b.n	17370 <d_print_comp_inner+0xa64>
   173a8:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
   173ac:	792d      	ldrb	r5, [r5, #4]
   173ae:	29ff      	cmp	r1, #255	; 0xff
   173b0:	f001 82ab 	beq.w	1890a <d_print_comp_inner+0x1ffe>
   173b4:	1c4b      	adds	r3, r1, #1
   173b6:	f8c4 3100 	str.w	r3, [r4, #256]	; 0x100
   173ba:	5465      	strb	r5, [r4, r1]
   173bc:	f884 5104 	strb.w	r5, [r4, #260]	; 0x104
   173c0:	f7ff bb72 	b.w	16aa8 <d_print_comp_inner+0x19c>
   173c4:	686a      	ldr	r2, [r5, #4]
   173c6:	f002 f845 	bl	19454 <d_print_comp>
   173ca:	68aa      	ldr	r2, [r5, #8]
   173cc:	4641      	mov	r1, r8
   173ce:	4620      	mov	r0, r4
   173d0:	f002 f840 	bl	19454 <d_print_comp>
   173d4:	f7ff bb68 	b.w	16aa8 <d_print_comp_inner+0x19c>
   173d8:	4e34      	ldr	r6, [pc, #208]	; (174ac <d_print_comp_inner+0xba0>)
   173da:	686a      	ldr	r2, [r5, #4]
   173dc:	f002 f83a 	bl	19454 <d_print_comp>
   173e0:	f106 0a08 	add.w	sl, r6, #8
   173e4:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
   173e8:	f04f 0900 	mov.w	r9, #0
   173ec:	e009      	b.n	17402 <d_print_comp_inner+0xaf6>
   173ee:	460b      	mov	r3, r1
   173f0:	3101      	adds	r1, #1
   173f2:	4556      	cmp	r6, sl
   173f4:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
   173f8:	54e7      	strb	r7, [r4, r3]
   173fa:	f884 7104 	strb.w	r7, [r4, #260]	; 0x104
   173fe:	f000 8508 	beq.w	17e12 <d_print_comp_inner+0x1506>
   17402:	29ff      	cmp	r1, #255	; 0xff
   17404:	f816 7f01 	ldrb.w	r7, [r6, #1]!
   17408:	d1f1      	bne.n	173ee <d_print_comp_inner+0xae2>
   1740a:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   1740e:	f884 90ff 	strb.w	r9, [r4, #255]	; 0xff
   17412:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
   17416:	4620      	mov	r0, r4
   17418:	4798      	blx	r3
   1741a:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   1741e:	3301      	adds	r3, #1
   17420:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
   17424:	2101      	movs	r1, #1
   17426:	2300      	movs	r3, #0
   17428:	e7e3      	b.n	173f2 <d_print_comp_inner+0xae6>
   1742a:	686a      	ldr	r2, [r5, #4]
   1742c:	b10a      	cbz	r2, 17432 <d_print_comp_inner+0xb26>
   1742e:	f002 f811 	bl	19454 <d_print_comp>
   17432:	68ab      	ldr	r3, [r5, #8]
   17434:	2b00      	cmp	r3, #0
   17436:	f43f ab37 	beq.w	16aa8 <d_print_comp_inner+0x19c>
   1743a:	f8d4 6100 	ldr.w	r6, [r4, #256]	; 0x100
   1743e:	2efd      	cmp	r6, #253	; 0xfd
   17440:	f201 81bc 	bhi.w	187bc <d_print_comp_inner+0x1eb0>
   17444:	4f1a      	ldr	r7, [pc, #104]	; (174b0 <d_print_comp_inner+0xba4>)
   17446:	f04f 0a00 	mov.w	sl, #0
   1744a:	f107 0b02 	add.w	fp, r7, #2
   1744e:	4631      	mov	r1, r6
   17450:	e009      	b.n	17466 <d_print_comp_inner+0xb5a>
   17452:	460b      	mov	r3, r1
   17454:	3101      	adds	r1, #1
   17456:	455f      	cmp	r7, fp
   17458:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
   1745c:	54e6      	strb	r6, [r4, r3]
   1745e:	f884 6104 	strb.w	r6, [r4, #260]	; 0x104
   17462:	f000 86c1 	beq.w	181e8 <d_print_comp_inner+0x18dc>
   17466:	29ff      	cmp	r1, #255	; 0xff
   17468:	f817 6b01 	ldrb.w	r6, [r7], #1
   1746c:	d1f1      	bne.n	17452 <d_print_comp_inner+0xb46>
   1746e:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   17472:	f884 a0ff 	strb.w	sl, [r4, #255]	; 0xff
   17476:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
   1747a:	4620      	mov	r0, r4
   1747c:	4798      	blx	r3
   1747e:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   17482:	3301      	adds	r3, #1
   17484:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
   17488:	2101      	movs	r1, #1
   1748a:	2300      	movs	r3, #0
   1748c:	e7e3      	b.n	17456 <d_print_comp_inner+0xb4a>
   1748e:	4e09      	ldr	r6, [pc, #36]	; (174b4 <d_print_comp_inner+0xba8>)
   17490:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
   17494:	f106 0a09 	add.w	sl, r6, #9
   17498:	f04f 0900 	mov.w	r9, #0
   1749c:	e016      	b.n	174cc <d_print_comp_inner+0xbc0>
   1749e:	bf00      	nop
   174a0:	00023f8c 	.word	0x00023f8c
   174a4:	0002419c 	.word	0x0002419c
   174a8:	00024184 	.word	0x00024184
   174ac:	00024203 	.word	0x00024203
   174b0:	00024120 	.word	0x00024120
   174b4:	0002412f 	.word	0x0002412f
   174b8:	460b      	mov	r3, r1
   174ba:	3101      	adds	r1, #1
   174bc:	4556      	cmp	r6, sl
   174be:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
   174c2:	54e7      	strb	r7, [r4, r3]
   174c4:	f884 7104 	strb.w	r7, [r4, #260]	; 0x104
   174c8:	f000 8594 	beq.w	17ff4 <d_print_comp_inner+0x16e8>
   174cc:	29ff      	cmp	r1, #255	; 0xff
   174ce:	f816 7f01 	ldrb.w	r7, [r6, #1]!
   174d2:	d1f1      	bne.n	174b8 <d_print_comp_inner+0xbac>
   174d4:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   174d8:	f884 90ff 	strb.w	r9, [r4, #255]	; 0xff
   174dc:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
   174e0:	4620      	mov	r0, r4
   174e2:	4798      	blx	r3
   174e4:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   174e8:	3301      	adds	r3, #1
   174ea:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
   174ee:	2101      	movs	r1, #1
   174f0:	2300      	movs	r3, #0
   174f2:	e7e3      	b.n	174bc <d_print_comp_inner+0xbb0>
   174f4:	4ed1      	ldr	r6, [pc, #836]	; (1783c <d_print_comp_inner+0xf30>)
   174f6:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
   174fa:	f106 0a09 	add.w	sl, r6, #9
   174fe:	f04f 0900 	mov.w	r9, #0
   17502:	e009      	b.n	17518 <d_print_comp_inner+0xc0c>
   17504:	460b      	mov	r3, r1
   17506:	3101      	adds	r1, #1
   17508:	4556      	cmp	r6, sl
   1750a:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
   1750e:	54e7      	strb	r7, [r4, r3]
   17510:	f884 7104 	strb.w	r7, [r4, #260]	; 0x104
   17514:	f000 8597 	beq.w	18046 <d_print_comp_inner+0x173a>
   17518:	29ff      	cmp	r1, #255	; 0xff
   1751a:	f816 7f01 	ldrb.w	r7, [r6, #1]!
   1751e:	d1f1      	bne.n	17504 <d_print_comp_inner+0xbf8>
   17520:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   17524:	f884 90ff 	strb.w	r9, [r4, #255]	; 0xff
   17528:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
   1752c:	4620      	mov	r0, r4
   1752e:	4798      	blx	r3
   17530:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   17534:	3301      	adds	r3, #1
   17536:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
   1753a:	2101      	movs	r1, #1
   1753c:	2300      	movs	r3, #0
   1753e:	e7e3      	b.n	17508 <d_print_comp_inner+0xbfc>
   17540:	f8d5 a004 	ldr.w	sl, [r5, #4]
   17544:	4dbe      	ldr	r5, [pc, #760]	; (17840 <d_print_comp_inner+0xf34>)
   17546:	f8da 7008 	ldr.w	r7, [sl, #8]
   1754a:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
   1754e:	f105 0808 	add.w	r8, r5, #8
   17552:	f04f 0900 	mov.w	r9, #0
   17556:	e009      	b.n	1756c <d_print_comp_inner+0xc60>
   17558:	460b      	mov	r3, r1
   1755a:	3101      	adds	r1, #1
   1755c:	45a8      	cmp	r8, r5
   1755e:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
   17562:	54e6      	strb	r6, [r4, r3]
   17564:	f884 6104 	strb.w	r6, [r4, #260]	; 0x104
   17568:	f000 8506 	beq.w	17f78 <d_print_comp_inner+0x166c>
   1756c:	29ff      	cmp	r1, #255	; 0xff
   1756e:	f815 6f01 	ldrb.w	r6, [r5, #1]!
   17572:	d1f1      	bne.n	17558 <d_print_comp_inner+0xc4c>
   17574:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   17578:	f884 90ff 	strb.w	r9, [r4, #255]	; 0xff
   1757c:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
   17580:	4620      	mov	r0, r4
   17582:	4798      	blx	r3
   17584:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   17588:	3301      	adds	r3, #1
   1758a:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
   1758e:	2101      	movs	r1, #1
   17590:	2300      	movs	r3, #0
   17592:	e7e3      	b.n	1755c <d_print_comp_inner+0xc50>
   17594:	686a      	ldr	r2, [r5, #4]
   17596:	68ae      	ldr	r6, [r5, #8]
   17598:	b10a      	cbz	r2, 1759e <d_print_comp_inner+0xc92>
   1759a:	f001 ff5b 	bl	19454 <d_print_comp>
   1759e:	f8d4 3100 	ldr.w	r3, [r4, #256]	; 0x100
   175a2:	2bff      	cmp	r3, #255	; 0xff
   175a4:	f001 82b1 	beq.w	18b0a <d_print_comp_inner+0x21fe>
   175a8:	1c5a      	adds	r2, r3, #1
   175aa:	257b      	movs	r5, #123	; 0x7b
   175ac:	f8c4 2100 	str.w	r2, [r4, #256]	; 0x100
   175b0:	4641      	mov	r1, r8
   175b2:	54e5      	strb	r5, [r4, r3]
   175b4:	4632      	mov	r2, r6
   175b6:	4620      	mov	r0, r4
   175b8:	f884 5104 	strb.w	r5, [r4, #260]	; 0x104
   175bc:	f001 ff4a 	bl	19454 <d_print_comp>
   175c0:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
   175c4:	29ff      	cmp	r1, #255	; 0xff
   175c6:	f001 81e7 	beq.w	18998 <d_print_comp_inner+0x208c>
   175ca:	1c4a      	adds	r2, r1, #1
   175cc:	237d      	movs	r3, #125	; 0x7d
   175ce:	f8c4 2100 	str.w	r2, [r4, #256]	; 0x100
   175d2:	5463      	strb	r3, [r4, r1]
   175d4:	f884 3104 	strb.w	r3, [r4, #260]	; 0x104
   175d8:	f7ff ba66 	b.w	16aa8 <d_print_comp_inner+0x19c>
   175dc:	f8d5 9004 	ldr.w	r9, [r5, #4]
   175e0:	68ae      	ldr	r6, [r5, #8]
   175e2:	f899 3000 	ldrb.w	r3, [r9]
   175e6:	2b31      	cmp	r3, #49	; 0x31
   175e8:	f000 87cb 	beq.w	18582 <d_print_comp_inner+0x1c76>
   175ec:	2b33      	cmp	r3, #51	; 0x33
   175ee:	f041 86d3 	bne.w	19398 <d_print_comp_inner+0x2a8c>
   175f2:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
   175f6:	29ff      	cmp	r1, #255	; 0xff
   175f8:	f001 84c3 	beq.w	18f82 <d_print_comp_inner+0x2676>
   175fc:	1c4a      	adds	r2, r1, #1
   175fe:	2328      	movs	r3, #40	; 0x28
   17600:	f8c4 2100 	str.w	r2, [r4, #256]	; 0x100
   17604:	5463      	strb	r3, [r4, r1]
   17606:	f884 3104 	strb.w	r3, [r4, #260]	; 0x104
   1760a:	a904      	add	r1, sp, #16
   1760c:	f8d9 2004 	ldr.w	r2, [r9, #4]
   17610:	f8d4 3128 	ldr.w	r3, [r4, #296]	; 0x128
   17614:	f8c4 1128 	str.w	r1, [r4, #296]	; 0x128
   17618:	4620      	mov	r0, r4
   1761a:	4641      	mov	r1, r8
   1761c:	9305      	str	r3, [sp, #20]
   1761e:	9204      	str	r2, [sp, #16]
   17620:	f7ff f974 	bl	1690c <d_print_comp_inner>
   17624:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
   17628:	9b05      	ldr	r3, [sp, #20]
   1762a:	f8c4 3128 	str.w	r3, [r4, #296]	; 0x128
   1762e:	29ff      	cmp	r1, #255	; 0xff
   17630:	f001 8496 	beq.w	18f60 <d_print_comp_inner+0x2654>
   17634:	2329      	movs	r3, #41	; 0x29
   17636:	1c4a      	adds	r2, r1, #1
   17638:	f8c4 2100 	str.w	r2, [r4, #256]	; 0x100
   1763c:	5463      	strb	r3, [r4, r1]
   1763e:	f884 3104 	strb.w	r3, [r4, #260]	; 0x104
   17642:	4632      	mov	r2, r6
   17644:	4641      	mov	r1, r8
   17646:	4620      	mov	r0, r4
   17648:	f002 fd2a 	bl	1a0a0 <d_print_subexpr>
   1764c:	f7ff ba2c 	b.w	16aa8 <d_print_comp_inner+0x19c>
   17650:	686a      	ldr	r2, [r5, #4]
   17652:	f002 fce7 	bl	1a024 <d_print_expr_op>
   17656:	f7ff ba27 	b.w	16aa8 <d_print_comp_inner+0x19c>
   1765a:	f011 0f20 	tst.w	r1, #32
   1765e:	f040 8753 	bne.w	18508 <d_print_comp_inner+0x1bfc>
   17662:	686a      	ldr	r2, [r5, #4]
   17664:	b11a      	cbz	r2, 1766e <d_print_comp_inner+0xd62>
   17666:	f018 0340 	ands.w	r3, r8, #64	; 0x40
   1766a:	f001 81d0 	beq.w	18a0e <d_print_comp_inner+0x2102>
   1766e:	f028 0860 	bic.w	r8, r8, #96	; 0x60
   17672:	f105 0208 	add.w	r2, r5, #8
   17676:	4641      	mov	r1, r8
   17678:	f8d4 3114 	ldr.w	r3, [r4, #276]	; 0x114
   1767c:	4620      	mov	r0, r4
   1767e:	f002 fbdd 	bl	19e3c <d_print_function_type.isra.11>
   17682:	f7ff ba11 	b.w	16aa8 <d_print_comp_inner+0x19c>
   17686:	f011 0804 	ands.w	r8, r1, #4
   1768a:	686b      	ldr	r3, [r5, #4]
   1768c:	f040 8612 	bne.w	182b4 <d_print_comp_inner+0x19a8>
   17690:	e893 00a0 	ldmia.w	r3, {r5, r7}
   17694:	2f00      	cmp	r7, #0
   17696:	f43f aa07 	beq.w	16aa8 <d_print_comp_inner+0x19c>
   1769a:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
   1769e:	442f      	add	r7, r5
   176a0:	e009      	b.n	176b6 <d_print_comp_inner+0xdaa>
   176a2:	460b      	mov	r3, r1
   176a4:	3101      	adds	r1, #1
   176a6:	42bd      	cmp	r5, r7
   176a8:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
   176ac:	54e6      	strb	r6, [r4, r3]
   176ae:	f884 6104 	strb.w	r6, [r4, #260]	; 0x104
   176b2:	f43f a9f9 	beq.w	16aa8 <d_print_comp_inner+0x19c>
   176b6:	29ff      	cmp	r1, #255	; 0xff
   176b8:	f815 6b01 	ldrb.w	r6, [r5], #1
   176bc:	d1f1      	bne.n	176a2 <d_print_comp_inner+0xd96>
   176be:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   176c2:	f884 80ff 	strb.w	r8, [r4, #255]	; 0xff
   176c6:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
   176ca:	4620      	mov	r0, r4
   176cc:	4798      	blx	r3
   176ce:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   176d2:	3301      	adds	r3, #1
   176d4:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
   176d8:	2101      	movs	r1, #1
   176da:	2300      	movs	r3, #0
   176dc:	e7e3      	b.n	176a6 <d_print_comp_inner+0xd9a>
   176de:	6869      	ldr	r1, [r5, #4]
   176e0:	f8d0 711c 	ldr.w	r7, [r0, #284]	; 0x11c
   176e4:	780b      	ldrb	r3, [r1, #0]
   176e6:	2f00      	cmp	r7, #0
   176e8:	f040 85e1 	bne.w	182ae <d_print_comp_inner+0x19a2>
   176ec:	2b05      	cmp	r3, #5
   176ee:	f001 81c7 	beq.w	18a80 <d_print_comp_inner+0x2174>
   176f2:	2b23      	cmp	r3, #35	; 0x23
   176f4:	f000 8689 	beq.w	1840a <d_print_comp_inner+0x1afe>
   176f8:	782a      	ldrb	r2, [r5, #0]
   176fa:	429a      	cmp	r2, r3
   176fc:	f000 8685 	beq.w	1840a <d_print_comp_inner+0x1afe>
   17700:	2b24      	cmp	r3, #36	; 0x24
   17702:	f47f a9eb 	bne.w	16adc <d_print_comp_inner+0x1d0>
   17706:	a814      	add	r0, sp, #80	; 0x50
   17708:	f8d4 3114 	ldr.w	r3, [r4, #276]	; 0x114
   1770c:	684a      	ldr	r2, [r1, #4]
   1770e:	f840 3d40 	str.w	r3, [r0, #-64]!
   17712:	2100      	movs	r1, #0
   17714:	f8d4 3110 	ldr.w	r3, [r4, #272]	; 0x110
   17718:	9505      	str	r5, [sp, #20]
   1771a:	f8c4 0114 	str.w	r0, [r4, #276]	; 0x114
   1771e:	9106      	str	r1, [sp, #24]
   17720:	9307      	str	r3, [sp, #28]
   17722:	2a00      	cmp	r2, #0
   17724:	f47f a9e8 	bne.w	16af8 <d_print_comp_inner+0x1ec>
   17728:	f7ff b9e5 	b.w	16af6 <d_print_comp_inner+0x1ea>
   1772c:	686a      	ldr	r2, [r5, #4]
   1772e:	f001 fe91 	bl	19454 <d_print_comp>
   17732:	f7ff b9b9 	b.w	16aa8 <d_print_comp_inner+0x19c>
   17736:	ab14      	add	r3, sp, #80	; 0x50
   17738:	f8d0 2114 	ldr.w	r2, [r0, #276]	; 0x114
   1773c:	f843 2d40 	str.w	r2, [r3, #-64]!
   17740:	f8c0 3114 	str.w	r3, [r0, #276]	; 0x114
   17744:	68aa      	ldr	r2, [r5, #8]
   17746:	f8d0 3110 	ldr.w	r3, [r0, #272]	; 0x110
   1774a:	9307      	str	r3, [sp, #28]
   1774c:	2600      	movs	r6, #0
   1774e:	9505      	str	r5, [sp, #20]
   17750:	9606      	str	r6, [sp, #24]
   17752:	f001 fe7f 	bl	19454 <d_print_comp>
   17756:	9b06      	ldr	r3, [sp, #24]
   17758:	b923      	cbnz	r3, 17764 <d_print_comp_inner+0xe58>
   1775a:	462a      	mov	r2, r5
   1775c:	4641      	mov	r1, r8
   1775e:	4620      	mov	r0, r4
   17760:	f001 fe88 	bl	19474 <d_print_mod>
   17764:	9b04      	ldr	r3, [sp, #16]
   17766:	f8c4 3114 	str.w	r3, [r4, #276]	; 0x114
   1776a:	f7ff b99d 	b.w	16aa8 <d_print_comp_inner+0x19c>
   1776e:	f10d 0950 	add.w	r9, sp, #80	; 0x50
   17772:	f8d0 b114 	ldr.w	fp, [r0, #276]	; 0x114
   17776:	f849 bd40 	str.w	fp, [r9, #-64]!
   1777a:	2200      	movs	r2, #0
   1777c:	f8d0 3110 	ldr.w	r3, [r0, #272]	; 0x110
   17780:	f8cd b000 	str.w	fp, [sp]
   17784:	4659      	mov	r1, fp
   17786:	f8c0 9114 	str.w	r9, [r0, #276]	; 0x114
   1778a:	9505      	str	r5, [sp, #20]
   1778c:	9206      	str	r2, [sp, #24]
   1778e:	9307      	str	r3, [sp, #28]
   17790:	2900      	cmp	r1, #0
   17792:	f001 83a0 	beq.w	18ed6 <d_print_comp_inner+0x25ca>
   17796:	684b      	ldr	r3, [r1, #4]
   17798:	781b      	ldrb	r3, [r3, #0]
   1779a:	3b19      	subs	r3, #25
   1779c:	2b02      	cmp	r3, #2
   1779e:	f201 839a 	bhi.w	18ed6 <d_print_comp_inner+0x25ca>
   177a2:	46ac      	mov	ip, r5
   177a4:	2701      	movs	r7, #1
   177a6:	460e      	mov	r6, r1
   177a8:	464d      	mov	r5, r9
   177aa:	e004      	b.n	177b6 <d_print_comp_inner+0xeaa>
   177ac:	6873      	ldr	r3, [r6, #4]
   177ae:	781b      	ldrb	r3, [r3, #0]
   177b0:	3b19      	subs	r3, #25
   177b2:	2b02      	cmp	r3, #2
   177b4:	d81b      	bhi.n	177ee <d_print_comp_inner+0xee2>
   177b6:	68b3      	ldr	r3, [r6, #8]
   177b8:	ea4f 1e07 	mov.w	lr, r7, lsl #4
   177bc:	aa14      	add	r2, sp, #80	; 0x50
   177be:	eb02 0b0e 	add.w	fp, r2, lr
   177c2:	b98b      	cbnz	r3, 177e8 <d_print_comp_inner+0xedc>
   177c4:	2f03      	cmp	r7, #3
   177c6:	f201 80f9 	bhi.w	189bc <d_print_comp_inner+0x20b0>
   177ca:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
   177ce:	f1ab 0a40 	sub.w	sl, fp, #64	; 0x40
   177d2:	e88a 000f 	stmia.w	sl, {r0, r1, r2, r3}
   177d6:	f84b 5c40 	str.w	r5, [fp, #-64]
   177da:	2301      	movs	r3, #1
   177dc:	eb09 050e 	add.w	r5, r9, lr
   177e0:	f8c4 5114 	str.w	r5, [r4, #276]	; 0x114
   177e4:	3701      	adds	r7, #1
   177e6:	60b3      	str	r3, [r6, #8]
   177e8:	6836      	ldr	r6, [r6, #0]
   177ea:	2e00      	cmp	r6, #0
   177ec:	d1de      	bne.n	177ac <d_print_comp_inner+0xea0>
   177ee:	f8dc 2008 	ldr.w	r2, [ip, #8]
   177f2:	4641      	mov	r1, r8
   177f4:	4620      	mov	r0, r4
   177f6:	4665      	mov	r5, ip
   177f8:	f001 fe2c 	bl	19454 <d_print_comp>
   177fc:	9b06      	ldr	r3, [sp, #24]
   177fe:	9a00      	ldr	r2, [sp, #0]
   17800:	f8c4 2114 	str.w	r2, [r4, #276]	; 0x114
   17804:	2b00      	cmp	r3, #0
   17806:	f47f a94f 	bne.w	16aa8 <d_print_comp_inner+0x19c>
   1780a:	2f01      	cmp	r7, #1
   1780c:	d00c      	beq.n	17828 <d_print_comp_inner+0xf1c>
   1780e:	eb09 1907 	add.w	r9, r9, r7, lsl #4
   17812:	f859 2c0c 	ldr.w	r2, [r9, #-12]
   17816:	3f01      	subs	r7, #1
   17818:	4641      	mov	r1, r8
   1781a:	4620      	mov	r0, r4
   1781c:	f001 fe2a 	bl	19474 <d_print_mod>
   17820:	2f01      	cmp	r7, #1
   17822:	f1a9 0910 	sub.w	r9, r9, #16
   17826:	d1f4      	bne.n	17812 <d_print_comp_inner+0xf06>
   17828:	1d2a      	adds	r2, r5, #4
   1782a:	4641      	mov	r1, r8
   1782c:	f8d4 3114 	ldr.w	r3, [r4, #276]	; 0x114
   17830:	4620      	mov	r0, r4
   17832:	f002 fa27 	bl	19c84 <d_print_array_type.isra.10>
   17836:	f7ff b937 	b.w	16aa8 <d_print_comp_inner+0x19c>
   1783a:	bf00      	nop
   1783c:	0002412f 	.word	0x0002412f
   17840:	00024123 	.word	0x00024123
   17844:	f9b5 300a 	ldrsh.w	r3, [r5, #10]
   17848:	2b00      	cmp	r3, #0
   1784a:	f040 8674 	bne.w	18536 <d_print_comp_inner+0x1c2a>
   1784e:	686a      	ldr	r2, [r5, #4]
   17850:	4bd5      	ldr	r3, [pc, #852]	; (17ba8 <d_print_comp_inner+0x129c>)
   17852:	6851      	ldr	r1, [r2, #4]
   17854:	4299      	cmp	r1, r3
   17856:	f000 866a 	beq.w	1852e <d_print_comp_inner+0x1c22>
   1785a:	4641      	mov	r1, r8
   1785c:	4620      	mov	r0, r4
   1785e:	f001 fdf9 	bl	19454 <d_print_comp>
   17862:	f8d4 3100 	ldr.w	r3, [r4, #256]	; 0x100
   17866:	2bff      	cmp	r3, #255	; 0xff
   17868:	f001 82b2 	beq.w	18dd0 <d_print_comp_inner+0x24c4>
   1786c:	1c59      	adds	r1, r3, #1
   1786e:	2220      	movs	r2, #32
   17870:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
   17874:	54e2      	strb	r2, [r4, r3]
   17876:	f884 2104 	strb.w	r2, [r4, #260]	; 0x104
   1787a:	f9b5 3008 	ldrsh.w	r3, [r5, #8]
   1787e:	2b00      	cmp	r3, #0
   17880:	f000 8595 	beq.w	183ae <d_print_comp_inner+0x1aa2>
   17884:	4dc9      	ldr	r5, [pc, #804]	; (17bac <d_print_comp_inner+0x12a0>)
   17886:	f04f 0800 	mov.w	r8, #0
   1788a:	1daf      	adds	r7, r5, #6
   1788c:	e009      	b.n	178a2 <d_print_comp_inner+0xf96>
   1788e:	460b      	mov	r3, r1
   17890:	3101      	adds	r1, #1
   17892:	42bd      	cmp	r5, r7
   17894:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
   17898:	54e6      	strb	r6, [r4, r3]
   1789a:	f884 6104 	strb.w	r6, [r4, #260]	; 0x104
   1789e:	f43f a903 	beq.w	16aa8 <d_print_comp_inner+0x19c>
   178a2:	29ff      	cmp	r1, #255	; 0xff
   178a4:	f815 6b01 	ldrb.w	r6, [r5], #1
   178a8:	d1f1      	bne.n	1788e <d_print_comp_inner+0xf82>
   178aa:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   178ae:	f884 80ff 	strb.w	r8, [r4, #255]	; 0xff
   178b2:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
   178b6:	4620      	mov	r0, r4
   178b8:	4798      	blx	r3
   178ba:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   178be:	3301      	adds	r3, #1
   178c0:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
   178c4:	2101      	movs	r1, #1
   178c6:	2300      	movs	r3, #0
   178c8:	e7e3      	b.n	17892 <d_print_comp_inner+0xf86>
   178ca:	4eb9      	ldr	r6, [pc, #740]	; (17bb0 <d_print_comp_inner+0x12a4>)
   178cc:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
   178d0:	f106 090e 	add.w	r9, r6, #14
   178d4:	f04f 0800 	mov.w	r8, #0
   178d8:	e009      	b.n	178ee <d_print_comp_inner+0xfe2>
   178da:	460b      	mov	r3, r1
   178dc:	3101      	adds	r1, #1
   178de:	45b1      	cmp	r9, r6
   178e0:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
   178e4:	54e7      	strb	r7, [r4, r3]
   178e6:	f884 7104 	strb.w	r7, [r4, #260]	; 0x104
   178ea:	f000 83b3 	beq.w	18054 <d_print_comp_inner+0x1748>
   178ee:	29ff      	cmp	r1, #255	; 0xff
   178f0:	f816 7f01 	ldrb.w	r7, [r6, #1]!
   178f4:	d1f1      	bne.n	178da <d_print_comp_inner+0xfce>
   178f6:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   178fa:	f884 80ff 	strb.w	r8, [r4, #255]	; 0xff
   178fe:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
   17902:	4620      	mov	r0, r4
   17904:	4798      	blx	r3
   17906:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   1790a:	3301      	adds	r3, #1
   1790c:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
   17910:	2101      	movs	r1, #1
   17912:	2300      	movs	r3, #0
   17914:	e7e3      	b.n	178de <d_print_comp_inner+0xfd2>
   17916:	4ea7      	ldr	r6, [pc, #668]	; (17bb4 <d_print_comp_inner+0x12a8>)
   17918:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
   1791c:	f106 0a1a 	add.w	sl, r6, #26
   17920:	f04f 0900 	mov.w	r9, #0
   17924:	e009      	b.n	1793a <d_print_comp_inner+0x102e>
   17926:	460b      	mov	r3, r1
   17928:	3101      	adds	r1, #1
   1792a:	4556      	cmp	r6, sl
   1792c:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
   17930:	54e7      	strb	r7, [r4, r3]
   17932:	f884 7104 	strb.w	r7, [r4, #260]	; 0x104
   17936:	f000 82ef 	beq.w	17f18 <d_print_comp_inner+0x160c>
   1793a:	29ff      	cmp	r1, #255	; 0xff
   1793c:	f816 7f01 	ldrb.w	r7, [r6, #1]!
   17940:	d1f1      	bne.n	17926 <d_print_comp_inner+0x101a>
   17942:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   17946:	f884 90ff 	strb.w	r9, [r4, #255]	; 0xff
   1794a:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
   1794e:	4620      	mov	r0, r4
   17950:	4798      	blx	r3
   17952:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   17956:	3301      	adds	r3, #1
   17958:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
   1795c:	2101      	movs	r1, #1
   1795e:	2300      	movs	r3, #0
   17960:	e7e3      	b.n	1792a <d_print_comp_inner+0x101e>
   17962:	6869      	ldr	r1, [r5, #4]
   17964:	f7fc ff2a 	bl	147bc <d_find_pack>
   17968:	f04f 0900 	mov.w	r9, #0
   1796c:	2800      	cmp	r0, #0
   1796e:	f001 835d 	beq.w	1902c <d_print_comp_inner+0x2720>
   17972:	7803      	ldrb	r3, [r0, #0]
   17974:	2b2f      	cmp	r3, #47	; 0x2f
   17976:	f040 8457 	bne.w	18228 <d_print_comp_inner+0x191c>
   1797a:	6843      	ldr	r3, [r0, #4]
   1797c:	2b00      	cmp	r3, #0
   1797e:	f000 8453 	beq.w	18228 <d_print_comp_inner+0x191c>
   17982:	6880      	ldr	r0, [r0, #8]
   17984:	f109 0901 	add.w	r9, r9, #1
   17988:	2800      	cmp	r0, #0
   1798a:	d1f2      	bne.n	17972 <d_print_comp_inner+0x1066>
   1798c:	686b      	ldr	r3, [r5, #4]
   1798e:	9300      	str	r3, [sp, #0]
   17990:	f109 33ff 	add.w	r3, r9, #4294967295
   17994:	9301      	str	r3, [sp, #4]
   17996:	f04f 0a00 	mov.w	sl, #0
   1799a:	f8c4 7120 	str.w	r7, [r4, #288]	; 0x120
   1799e:	9a00      	ldr	r2, [sp, #0]
   179a0:	4641      	mov	r1, r8
   179a2:	4620      	mov	r0, r4
   179a4:	f001 fd56 	bl	19454 <d_print_comp>
   179a8:	9b01      	ldr	r3, [sp, #4]
   179aa:	42bb      	cmp	r3, r7
   179ac:	f340 81ab 	ble.w	17d06 <d_print_comp_inner+0x13fa>
   179b0:	4d81      	ldr	r5, [pc, #516]	; (17bb8 <d_print_comp_inner+0x12ac>)
   179b2:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
   179b6:	f105 0b02 	add.w	fp, r5, #2
   179ba:	e009      	b.n	179d0 <d_print_comp_inner+0x10c4>
   179bc:	460b      	mov	r3, r1
   179be:	3101      	adds	r1, #1
   179c0:	45ab      	cmp	fp, r5
   179c2:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
   179c6:	54e6      	strb	r6, [r4, r3]
   179c8:	f884 6104 	strb.w	r6, [r4, #260]	; 0x104
   179cc:	f000 819b 	beq.w	17d06 <d_print_comp_inner+0x13fa>
   179d0:	29ff      	cmp	r1, #255	; 0xff
   179d2:	f815 6b01 	ldrb.w	r6, [r5], #1
   179d6:	d1f1      	bne.n	179bc <d_print_comp_inner+0x10b0>
   179d8:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   179dc:	f884 a0ff 	strb.w	sl, [r4, #255]	; 0xff
   179e0:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
   179e4:	4620      	mov	r0, r4
   179e6:	4798      	blx	r3
   179e8:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   179ec:	3301      	adds	r3, #1
   179ee:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
   179f2:	2101      	movs	r1, #1
   179f4:	2300      	movs	r3, #0
   179f6:	e7e3      	b.n	179c0 <d_print_comp_inner+0x10b4>
   179f8:	4e70      	ldr	r6, [pc, #448]	; (17bbc <d_print_comp_inner+0x12b0>)
   179fa:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
   179fe:	f106 0a16 	add.w	sl, r6, #22
   17a02:	f04f 0900 	mov.w	r9, #0
   17a06:	e009      	b.n	17a1c <d_print_comp_inner+0x1110>
   17a08:	460b      	mov	r3, r1
   17a0a:	3101      	adds	r1, #1
   17a0c:	45b2      	cmp	sl, r6
   17a0e:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
   17a12:	54e7      	strb	r7, [r4, r3]
   17a14:	f884 7104 	strb.w	r7, [r4, #260]	; 0x104
   17a18:	f000 835f 	beq.w	180da <d_print_comp_inner+0x17ce>
   17a1c:	29ff      	cmp	r1, #255	; 0xff
   17a1e:	f816 7f01 	ldrb.w	r7, [r6, #1]!
   17a22:	d1f1      	bne.n	17a08 <d_print_comp_inner+0x10fc>
   17a24:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   17a28:	f884 90ff 	strb.w	r9, [r4, #255]	; 0xff
   17a2c:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
   17a30:	4620      	mov	r0, r4
   17a32:	4798      	blx	r3
   17a34:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   17a38:	3301      	adds	r3, #1
   17a3a:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
   17a3e:	2101      	movs	r1, #1
   17a40:	2300      	movs	r3, #0
   17a42:	e7e3      	b.n	17a0c <d_print_comp_inner+0x1100>
   17a44:	4e5e      	ldr	r6, [pc, #376]	; (17bc0 <d_print_comp_inner+0x12b4>)
   17a46:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
   17a4a:	f106 0a0e 	add.w	sl, r6, #14
   17a4e:	f04f 0900 	mov.w	r9, #0
   17a52:	e009      	b.n	17a68 <d_print_comp_inner+0x115c>
   17a54:	460b      	mov	r3, r1
   17a56:	3101      	adds	r1, #1
   17a58:	4556      	cmp	r6, sl
   17a5a:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
   17a5e:	54e7      	strb	r7, [r4, r3]
   17a60:	f884 7104 	strb.w	r7, [r4, #260]	; 0x104
   17a64:	f000 83a0 	beq.w	181a8 <d_print_comp_inner+0x189c>
   17a68:	29ff      	cmp	r1, #255	; 0xff
   17a6a:	f816 7f01 	ldrb.w	r7, [r6, #1]!
   17a6e:	d1f1      	bne.n	17a54 <d_print_comp_inner+0x1148>
   17a70:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   17a74:	f884 90ff 	strb.w	r9, [r4, #255]	; 0xff
   17a78:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
   17a7c:	4620      	mov	r0, r4
   17a7e:	4798      	blx	r3
   17a80:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   17a84:	3301      	adds	r3, #1
   17a86:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
   17a8a:	2101      	movs	r1, #1
   17a8c:	2300      	movs	r3, #0
   17a8e:	e7e3      	b.n	17a58 <d_print_comp_inner+0x114c>
   17a90:	686a      	ldr	r2, [r5, #4]
   17a92:	7811      	ldrb	r1, [r2, #0]
   17a94:	2927      	cmp	r1, #39	; 0x27
   17a96:	f000 8615 	beq.w	186c4 <d_print_comp_inner+0x1db8>
   17a9a:	2600      	movs	r6, #0
   17a9c:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
   17aa0:	29ff      	cmp	r1, #255	; 0xff
   17aa2:	f001 80c5 	beq.w	18c30 <d_print_comp_inner+0x2324>
   17aa6:	2328      	movs	r3, #40	; 0x28
   17aa8:	1c4a      	adds	r2, r1, #1
   17aaa:	f8c4 2100 	str.w	r2, [r4, #256]	; 0x100
   17aae:	5463      	strb	r3, [r4, r1]
   17ab0:	f884 3104 	strb.w	r3, [r4, #260]	; 0x104
   17ab4:	686a      	ldr	r2, [r5, #4]
   17ab6:	4641      	mov	r1, r8
   17ab8:	4620      	mov	r0, r4
   17aba:	f001 fccb 	bl	19454 <d_print_comp>
   17abe:	f8d4 3100 	ldr.w	r3, [r4, #256]	; 0x100
   17ac2:	2bff      	cmp	r3, #255	; 0xff
   17ac4:	f001 8099 	beq.w	18bfa <d_print_comp_inner+0x22ee>
   17ac8:	1c59      	adds	r1, r3, #1
   17aca:	2229      	movs	r2, #41	; 0x29
   17acc:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
   17ad0:	54e2      	strb	r2, [r4, r3]
   17ad2:	f884 2104 	strb.w	r2, [r4, #260]	; 0x104
   17ad6:	782b      	ldrb	r3, [r5, #0]
   17ad8:	2b3d      	cmp	r3, #61	; 0x3d
   17ada:	f000 86e6 	beq.w	188aa <d_print_comp_inner+0x1f9e>
   17ade:	2e08      	cmp	r6, #8
   17ae0:	f000 867f 	beq.w	187e2 <d_print_comp_inner+0x1ed6>
   17ae4:	68aa      	ldr	r2, [r5, #8]
   17ae6:	4641      	mov	r1, r8
   17ae8:	4620      	mov	r0, r4
   17aea:	f001 fcb3 	bl	19454 <d_print_comp>
   17aee:	f7fe bfdb 	b.w	16aa8 <d_print_comp_inner+0x19c>
   17af2:	2301      	movs	r3, #1
   17af4:	f8c0 3118 	str.w	r3, [r0, #280]	; 0x118
   17af8:	f7fe bfd6 	b.w	16aa8 <d_print_comp_inner+0x19c>
   17afc:	686a      	ldr	r2, [r5, #4]
   17afe:	4931      	ldr	r1, [pc, #196]	; (17bc4 <d_print_comp_inner+0x12b8>)
   17b00:	a804      	add	r0, sp, #16
   17b02:	f006 fdfb 	bl	1e6fc <sprintf>
   17b06:	a804      	add	r0, sp, #16
   17b08:	f006 ff9a 	bl	1ea40 <strlen>
   17b0c:	2800      	cmp	r0, #0
   17b0e:	f43e afcb 	beq.w	16aa8 <d_print_comp_inner+0x19c>
   17b12:	ad04      	add	r5, sp, #16
   17b14:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
   17b18:	182f      	adds	r7, r5, r0
   17b1a:	f04f 0800 	mov.w	r8, #0
   17b1e:	e009      	b.n	17b34 <d_print_comp_inner+0x1228>
   17b20:	460b      	mov	r3, r1
   17b22:	3101      	adds	r1, #1
   17b24:	42bd      	cmp	r5, r7
   17b26:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
   17b2a:	54e6      	strb	r6, [r4, r3]
   17b2c:	f884 6104 	strb.w	r6, [r4, #260]	; 0x104
   17b30:	f43e afba 	beq.w	16aa8 <d_print_comp_inner+0x19c>
   17b34:	29ff      	cmp	r1, #255	; 0xff
   17b36:	f815 6b01 	ldrb.w	r6, [r5], #1
   17b3a:	d1f1      	bne.n	17b20 <d_print_comp_inner+0x1214>
   17b3c:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   17b40:	f884 80ff 	strb.w	r8, [r4, #255]	; 0xff
   17b44:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
   17b48:	4620      	mov	r0, r4
   17b4a:	4798      	blx	r3
   17b4c:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   17b50:	3301      	adds	r3, #1
   17b52:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
   17b56:	2101      	movs	r1, #1
   17b58:	2300      	movs	r3, #0
   17b5a:	e7e3      	b.n	17b24 <d_print_comp_inner+0x1218>
   17b5c:	4e1a      	ldr	r6, [pc, #104]	; (17bc8 <d_print_comp_inner+0x12bc>)
   17b5e:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
   17b62:	f106 0a1c 	add.w	sl, r6, #28
   17b66:	f04f 0900 	mov.w	r9, #0
   17b6a:	e009      	b.n	17b80 <d_print_comp_inner+0x1274>
   17b6c:	460b      	mov	r3, r1
   17b6e:	3101      	adds	r1, #1
   17b70:	4556      	cmp	r6, sl
   17b72:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
   17b76:	54e7      	strb	r7, [r4, r3]
   17b78:	f884 7104 	strb.w	r7, [r4, #260]	; 0x104
   17b7c:	f000 82fa 	beq.w	18174 <d_print_comp_inner+0x1868>
   17b80:	29ff      	cmp	r1, #255	; 0xff
   17b82:	f816 7f01 	ldrb.w	r7, [r6, #1]!
   17b86:	d1f1      	bne.n	17b6c <d_print_comp_inner+0x1260>
   17b88:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   17b8c:	f884 90ff 	strb.w	r9, [r4, #255]	; 0xff
   17b90:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
   17b94:	4620      	mov	r0, r4
   17b96:	4798      	blx	r3
   17b98:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   17b9c:	3301      	adds	r3, #1
   17b9e:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
   17ba2:	2101      	movs	r1, #1
   17ba4:	2300      	movs	r3, #0
   17ba6:	e7e3      	b.n	17b70 <d_print_comp_inner+0x1264>
   17ba8:	000238ec 	.word	0x000238ec
   17bac:	00024110 	.word	0x00024110
   17bb0:	000241f3 	.word	0x000241f3
   17bb4:	000240eb 	.word	0x000240eb
   17bb8:	00024120 	.word	0x00024120
   17bbc:	000240ef 	.word	0x000240ef
   17bc0:	00024173 	.word	0x00024173
   17bc4:	00023f44 	.word	0x00023f44
   17bc8:	000241c3 	.word	0x000241c3
   17bcc:	68ab      	ldr	r3, [r5, #8]
   17bce:	781a      	ldrb	r2, [r3, #0]
   17bd0:	2a3a      	cmp	r2, #58	; 0x3a
   17bd2:	f47e af7d 	bne.w	16ad0 <d_print_comp_inner+0x1c4>
   17bd6:	689b      	ldr	r3, [r3, #8]
   17bd8:	781b      	ldrb	r3, [r3, #0]
   17bda:	2b3b      	cmp	r3, #59	; 0x3b
   17bdc:	f47e af78 	bne.w	16ad0 <d_print_comp_inner+0x1c4>
   17be0:	f105 0308 	add.w	r3, r5, #8
   17be4:	686a      	ldr	r2, [r5, #4]
   17be6:	f002 fabf 	bl	1a168 <d_maybe_print_fold_expression.isra.15>
   17bea:	4606      	mov	r6, r0
   17bec:	2800      	cmp	r0, #0
   17bee:	f47e af5b 	bne.w	16aa8 <d_print_comp_inner+0x19c>
   17bf2:	f8d5 a004 	ldr.w	sl, [r5, #4]
   17bf6:	68aa      	ldr	r2, [r5, #8]
   17bf8:	f8da 1004 	ldr.w	r1, [sl, #4]
   17bfc:	6893      	ldr	r3, [r2, #8]
   17bfe:	6808      	ldr	r0, [r1, #0]
   17c00:	49d6      	ldr	r1, [pc, #856]	; (17f5c <d_print_comp_inner+0x1650>)
   17c02:	f8d2 9004 	ldr.w	r9, [r2, #4]
   17c06:	685f      	ldr	r7, [r3, #4]
   17c08:	689d      	ldr	r5, [r3, #8]
   17c0a:	f006 fdad 	bl	1e768 <strcmp>
   17c0e:	2800      	cmp	r0, #0
   17c10:	f001 82e2 	beq.w	191d8 <d_print_comp_inner+0x28cc>
   17c14:	2204      	movs	r2, #4
   17c16:	49d2      	ldr	r1, [pc, #840]	; (17f60 <d_print_comp_inner+0x1654>)
   17c18:	4620      	mov	r0, r4
   17c1a:	f7fc fba3 	bl	14364 <d_append_buffer>
   17c1e:	f8d9 3004 	ldr.w	r3, [r9, #4]
   17c22:	b183      	cbz	r3, 17c46 <d_print_comp_inner+0x133a>
   17c24:	4641      	mov	r1, r8
   17c26:	464a      	mov	r2, r9
   17c28:	4620      	mov	r0, r4
   17c2a:	f002 fa39 	bl	1a0a0 <d_print_subexpr>
   17c2e:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
   17c32:	29ff      	cmp	r1, #255	; 0xff
   17c34:	f001 83ec 	beq.w	19410 <d_print_comp_inner+0x2b04>
   17c38:	2320      	movs	r3, #32
   17c3a:	1c4a      	adds	r2, r1, #1
   17c3c:	f8c4 2100 	str.w	r2, [r4, #256]	; 0x100
   17c40:	5463      	strb	r3, [r4, r1]
   17c42:	f884 3104 	strb.w	r3, [r4, #260]	; 0x104
   17c46:	463a      	mov	r2, r7
   17c48:	4641      	mov	r1, r8
   17c4a:	4620      	mov	r0, r4
   17c4c:	f001 fc02 	bl	19454 <d_print_comp>
   17c50:	2d00      	cmp	r5, #0
   17c52:	f43e af29 	beq.w	16aa8 <d_print_comp_inner+0x19c>
   17c56:	462a      	mov	r2, r5
   17c58:	4641      	mov	r1, r8
   17c5a:	4620      	mov	r0, r4
   17c5c:	f002 fa20 	bl	1a0a0 <d_print_subexpr>
   17c60:	f7fe bf22 	b.w	16aa8 <d_print_comp_inner+0x19c>
   17c64:	4ebf      	ldr	r6, [pc, #764]	; (17f64 <d_print_comp_inner+0x1658>)
   17c66:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
   17c6a:	f106 0a08 	add.w	sl, r6, #8
   17c6e:	f04f 0900 	mov.w	r9, #0
   17c72:	e009      	b.n	17c88 <d_print_comp_inner+0x137c>
   17c74:	460b      	mov	r3, r1
   17c76:	3101      	adds	r1, #1
   17c78:	4556      	cmp	r6, sl
   17c7a:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
   17c7e:	54e7      	strb	r7, [r4, r3]
   17c80:	f884 7104 	strb.w	r7, [r4, #260]	; 0x104
   17c84:	f000 80d8 	beq.w	17e38 <d_print_comp_inner+0x152c>
   17c88:	29ff      	cmp	r1, #255	; 0xff
   17c8a:	f816 7f01 	ldrb.w	r7, [r6, #1]!
   17c8e:	d1f1      	bne.n	17c74 <d_print_comp_inner+0x1368>
   17c90:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   17c94:	f884 90ff 	strb.w	r9, [r4, #255]	; 0xff
   17c98:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
   17c9c:	4620      	mov	r0, r4
   17c9e:	4798      	blx	r3
   17ca0:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   17ca4:	3301      	adds	r3, #1
   17ca6:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
   17caa:	2101      	movs	r1, #1
   17cac:	2300      	movs	r3, #0
   17cae:	e7e3      	b.n	17c78 <d_print_comp_inner+0x136c>
   17cb0:	4ead      	ldr	r6, [pc, #692]	; (17f68 <d_print_comp_inner+0x165c>)
   17cb2:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
   17cb6:	f106 0a1d 	add.w	sl, r6, #29
   17cba:	f04f 0900 	mov.w	r9, #0
   17cbe:	e009      	b.n	17cd4 <d_print_comp_inner+0x13c8>
   17cc0:	460b      	mov	r3, r1
   17cc2:	3101      	adds	r1, #1
   17cc4:	45b2      	cmp	sl, r6
   17cc6:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
   17cca:	54e7      	strb	r7, [r4, r3]
   17ccc:	f884 7104 	strb.w	r7, [r4, #260]	; 0x104
   17cd0:	f000 81fc 	beq.w	180cc <d_print_comp_inner+0x17c0>
   17cd4:	29ff      	cmp	r1, #255	; 0xff
   17cd6:	f816 7f01 	ldrb.w	r7, [r6, #1]!
   17cda:	d1f1      	bne.n	17cc0 <d_print_comp_inner+0x13b4>
   17cdc:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   17ce0:	f884 90ff 	strb.w	r9, [r4, #255]	; 0xff
   17ce4:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
   17ce8:	4620      	mov	r0, r4
   17cea:	4798      	blx	r3
   17cec:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   17cf0:	3301      	adds	r3, #1
   17cf2:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
   17cf6:	2101      	movs	r1, #1
   17cf8:	2300      	movs	r3, #0
   17cfa:	e7e3      	b.n	17cc4 <d_print_comp_inner+0x13b8>
   17cfc:	2301      	movs	r3, #1
   17cfe:	f8c0 3118 	str.w	r3, [r0, #280]	; 0x118
   17d02:	f7fe bed1 	b.w	16aa8 <d_print_comp_inner+0x19c>
   17d06:	3701      	adds	r7, #1
   17d08:	454f      	cmp	r7, r9
   17d0a:	f47f ae46 	bne.w	1799a <d_print_comp_inner+0x108e>
   17d0e:	f7fe becb 	b.w	16aa8 <d_print_comp_inner+0x19c>
   17d12:	6876      	ldr	r6, [r6, #4]
   17d14:	2e00      	cmp	r6, #0
   17d16:	f001 806e 	beq.w	18df6 <d_print_comp_inner+0x24ea>
   17d1a:	2f04      	cmp	r7, #4
   17d1c:	f103 0310 	add.w	r3, r3, #16
   17d20:	f47f a9bd 	bne.w	1709e <d_print_comp_inner+0x792>
   17d24:	f8c4 0114 	str.w	r0, [r4, #276]	; 0x114
   17d28:	2301      	movs	r3, #1
   17d2a:	f8c4 3118 	str.w	r3, [r4, #280]	; 0x118
   17d2e:	f7fe bebb 	b.w	16aa8 <d_print_comp_inner+0x19c>
   17d32:	4e8e      	ldr	r6, [pc, #568]	; (17f6c <d_print_comp_inner+0x1660>)
   17d34:	686a      	ldr	r2, [r5, #4]
   17d36:	4641      	mov	r1, r8
   17d38:	4620      	mov	r0, r4
   17d3a:	f001 fb8b 	bl	19454 <d_print_comp>
   17d3e:	f106 0a04 	add.w	sl, r6, #4
   17d42:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
   17d46:	f04f 0900 	mov.w	r9, #0
   17d4a:	e008      	b.n	17d5e <d_print_comp_inner+0x1452>
   17d4c:	460b      	mov	r3, r1
   17d4e:	3101      	adds	r1, #1
   17d50:	45b2      	cmp	sl, r6
   17d52:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
   17d56:	54e7      	strb	r7, [r4, r3]
   17d58:	f884 7104 	strb.w	r7, [r4, #260]	; 0x104
   17d5c:	d013      	beq.n	17d86 <d_print_comp_inner+0x147a>
   17d5e:	29ff      	cmp	r1, #255	; 0xff
   17d60:	f816 7b01 	ldrb.w	r7, [r6], #1
   17d64:	d1f2      	bne.n	17d4c <d_print_comp_inner+0x1440>
   17d66:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   17d6a:	f884 90ff 	strb.w	r9, [r4, #255]	; 0xff
   17d6e:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
   17d72:	4620      	mov	r0, r4
   17d74:	4798      	blx	r3
   17d76:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   17d7a:	3301      	adds	r3, #1
   17d7c:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
   17d80:	2101      	movs	r1, #1
   17d82:	2300      	movs	r3, #0
   17d84:	e7e4      	b.n	17d50 <d_print_comp_inner+0x1444>
   17d86:	68aa      	ldr	r2, [r5, #8]
   17d88:	4641      	mov	r1, r8
   17d8a:	4620      	mov	r0, r4
   17d8c:	f001 fb62 	bl	19454 <d_print_comp>
   17d90:	f7fe be8a 	b.w	16aa8 <d_print_comp_inner+0x19c>
   17d94:	686a      	ldr	r2, [r5, #4]
   17d96:	4641      	mov	r1, r8
   17d98:	4620      	mov	r0, r4
   17d9a:	f001 fb5b 	bl	19454 <d_print_comp>
   17d9e:	f7fe be83 	b.w	16aa8 <d_print_comp_inner+0x19c>
   17da2:	686a      	ldr	r2, [r5, #4]
   17da4:	4641      	mov	r1, r8
   17da6:	4620      	mov	r0, r4
   17da8:	f001 fb54 	bl	19454 <d_print_comp>
   17dac:	f7fe be7c 	b.w	16aa8 <d_print_comp_inner+0x19c>
   17db0:	686a      	ldr	r2, [r5, #4]
   17db2:	4641      	mov	r1, r8
   17db4:	4620      	mov	r0, r4
   17db6:	f001 fb4d 	bl	19454 <d_print_comp>
   17dba:	f7fe be75 	b.w	16aa8 <d_print_comp_inner+0x19c>
   17dbe:	686a      	ldr	r2, [r5, #4]
   17dc0:	4641      	mov	r1, r8
   17dc2:	4620      	mov	r0, r4
   17dc4:	f001 fb46 	bl	19454 <d_print_comp>
   17dc8:	f7fe be6e 	b.w	16aa8 <d_print_comp_inner+0x19c>
   17dcc:	686a      	ldr	r2, [r5, #4]
   17dce:	4641      	mov	r1, r8
   17dd0:	4620      	mov	r0, r4
   17dd2:	f001 fb3f 	bl	19454 <d_print_comp>
   17dd6:	f7fe be67 	b.w	16aa8 <d_print_comp_inner+0x19c>
   17dda:	686a      	ldr	r2, [r5, #4]
   17ddc:	4641      	mov	r1, r8
   17dde:	4620      	mov	r0, r4
   17de0:	f001 fb38 	bl	19454 <d_print_comp>
   17de4:	f7fe be60 	b.w	16aa8 <d_print_comp_inner+0x19c>
   17de8:	686a      	ldr	r2, [r5, #4]
   17dea:	4641      	mov	r1, r8
   17dec:	4620      	mov	r0, r4
   17dee:	f001 fb31 	bl	19454 <d_print_comp>
   17df2:	f7fe be59 	b.w	16aa8 <d_print_comp_inner+0x19c>
   17df6:	686a      	ldr	r2, [r5, #4]
   17df8:	4641      	mov	r1, r8
   17dfa:	4620      	mov	r0, r4
   17dfc:	f001 fb2a 	bl	19454 <d_print_comp>
   17e00:	f7fe be52 	b.w	16aa8 <d_print_comp_inner+0x19c>
   17e04:	686a      	ldr	r2, [r5, #4]
   17e06:	4641      	mov	r1, r8
   17e08:	4620      	mov	r0, r4
   17e0a:	f001 fb23 	bl	19454 <d_print_comp>
   17e0e:	f7fe be4b 	b.w	16aa8 <d_print_comp_inner+0x19c>
   17e12:	4641      	mov	r1, r8
   17e14:	68aa      	ldr	r2, [r5, #8]
   17e16:	4620      	mov	r0, r4
   17e18:	f001 fb1c 	bl	19454 <d_print_comp>
   17e1c:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
   17e20:	29ff      	cmp	r1, #255	; 0xff
   17e22:	f000 8560 	beq.w	188e6 <d_print_comp_inner+0x1fda>
   17e26:	1c4a      	adds	r2, r1, #1
   17e28:	235d      	movs	r3, #93	; 0x5d
   17e2a:	f8c4 2100 	str.w	r2, [r4, #256]	; 0x100
   17e2e:	5463      	strb	r3, [r4, r1]
   17e30:	f884 3104 	strb.w	r3, [r4, #260]	; 0x104
   17e34:	f7fe be38 	b.w	16aa8 <d_print_comp_inner+0x19c>
   17e38:	f8d4 311c 	ldr.w	r3, [r4, #284]	; 0x11c
   17e3c:	4e4c      	ldr	r6, [pc, #304]	; (17f70 <d_print_comp_inner+0x1664>)
   17e3e:	3301      	adds	r3, #1
   17e40:	f8c4 311c 	str.w	r3, [r4, #284]	; 0x11c
   17e44:	4641      	mov	r1, r8
   17e46:	686a      	ldr	r2, [r5, #4]
   17e48:	4620      	mov	r0, r4
   17e4a:	f001 fb03 	bl	19454 <d_print_comp>
   17e4e:	f8d4 311c 	ldr.w	r3, [r4, #284]	; 0x11c
   17e52:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
   17e56:	3b01      	subs	r3, #1
   17e58:	f8c4 311c 	str.w	r3, [r4, #284]	; 0x11c
   17e5c:	f106 0902 	add.w	r9, r6, #2
   17e60:	f04f 0800 	mov.w	r8, #0
   17e64:	e008      	b.n	17e78 <d_print_comp_inner+0x156c>
   17e66:	460b      	mov	r3, r1
   17e68:	3101      	adds	r1, #1
   17e6a:	454e      	cmp	r6, r9
   17e6c:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
   17e70:	54e7      	strb	r7, [r4, r3]
   17e72:	f884 7104 	strb.w	r7, [r4, #260]	; 0x104
   17e76:	d013      	beq.n	17ea0 <d_print_comp_inner+0x1594>
   17e78:	29ff      	cmp	r1, #255	; 0xff
   17e7a:	f816 7b01 	ldrb.w	r7, [r6], #1
   17e7e:	d1f2      	bne.n	17e66 <d_print_comp_inner+0x155a>
   17e80:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   17e84:	f884 80ff 	strb.w	r8, [r4, #255]	; 0xff
   17e88:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
   17e8c:	4620      	mov	r0, r4
   17e8e:	4798      	blx	r3
   17e90:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   17e94:	3301      	adds	r3, #1
   17e96:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
   17e9a:	2101      	movs	r1, #1
   17e9c:	2300      	movs	r3, #0
   17e9e:	e7e4      	b.n	17e6a <d_print_comp_inner+0x155e>
   17ea0:	68aa      	ldr	r2, [r5, #8]
   17ea2:	4934      	ldr	r1, [pc, #208]	; (17f74 <d_print_comp_inner+0x1668>)
   17ea4:	3201      	adds	r2, #1
   17ea6:	a804      	add	r0, sp, #16
   17ea8:	f006 fc28 	bl	1e6fc <sprintf>
   17eac:	a804      	add	r0, sp, #16
   17eae:	f006 fdc7 	bl	1ea40 <strlen>
   17eb2:	b318      	cbz	r0, 17efc <d_print_comp_inner+0x15f0>
   17eb4:	ad04      	add	r5, sp, #16
   17eb6:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
   17eba:	182f      	adds	r7, r5, r0
   17ebc:	f04f 0800 	mov.w	r8, #0
   17ec0:	e008      	b.n	17ed4 <d_print_comp_inner+0x15c8>
   17ec2:	460b      	mov	r3, r1
   17ec4:	3101      	adds	r1, #1
   17ec6:	42af      	cmp	r7, r5
   17ec8:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
   17ecc:	54e6      	strb	r6, [r4, r3]
   17ece:	f884 6104 	strb.w	r6, [r4, #260]	; 0x104
   17ed2:	d015      	beq.n	17f00 <d_print_comp_inner+0x15f4>
   17ed4:	29ff      	cmp	r1, #255	; 0xff
   17ed6:	f815 6b01 	ldrb.w	r6, [r5], #1
   17eda:	d1f2      	bne.n	17ec2 <d_print_comp_inner+0x15b6>
   17edc:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   17ee0:	f884 80ff 	strb.w	r8, [r4, #255]	; 0xff
   17ee4:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
   17ee8:	4620      	mov	r0, r4
   17eea:	4798      	blx	r3
   17eec:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   17ef0:	3301      	adds	r3, #1
   17ef2:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
   17ef6:	2101      	movs	r1, #1
   17ef8:	2300      	movs	r3, #0
   17efa:	e7e4      	b.n	17ec6 <d_print_comp_inner+0x15ba>
   17efc:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
   17f00:	29ff      	cmp	r1, #255	; 0xff
   17f02:	f000 8560 	beq.w	189c6 <d_print_comp_inner+0x20ba>
   17f06:	1c4a      	adds	r2, r1, #1
   17f08:	237d      	movs	r3, #125	; 0x7d
   17f0a:	f8c4 2100 	str.w	r2, [r4, #256]	; 0x100
   17f0e:	5463      	strb	r3, [r4, r1]
   17f10:	f884 3104 	strb.w	r3, [r4, #260]	; 0x104
   17f14:	f7fe bdc8 	b.w	16aa8 <d_print_comp_inner+0x19c>
   17f18:	686a      	ldr	r2, [r5, #4]
   17f1a:	4641      	mov	r1, r8
   17f1c:	4620      	mov	r0, r4
   17f1e:	f001 fa99 	bl	19454 <d_print_comp>
   17f22:	f7fe bdc1 	b.w	16aa8 <d_print_comp_inner+0x19c>
   17f26:	4641      	mov	r1, r8
   17f28:	68aa      	ldr	r2, [r5, #8]
   17f2a:	4620      	mov	r0, r4
   17f2c:	f001 fa92 	bl	19454 <d_print_comp>
   17f30:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
   17f34:	29ff      	cmp	r1, #255	; 0xff
   17f36:	f000 850b 	beq.w	18950 <d_print_comp_inner+0x2044>
   17f3a:	1c4a      	adds	r2, r1, #1
   17f3c:	235d      	movs	r3, #93	; 0x5d
   17f3e:	f8c4 2100 	str.w	r2, [r4, #256]	; 0x100
   17f42:	5463      	strb	r3, [r4, r1]
   17f44:	f884 3104 	strb.w	r3, [r4, #260]	; 0x104
   17f48:	f7fe bdae 	b.w	16aa8 <d_print_comp_inner+0x19c>
   17f4c:	686a      	ldr	r2, [r5, #4]
   17f4e:	4641      	mov	r1, r8
   17f50:	4620      	mov	r0, r4
   17f52:	f001 fa7f 	bl	19454 <d_print_comp>
   17f56:	f7fe bda7 	b.w	16aa8 <d_print_comp_inner+0x19c>
   17f5a:	bf00      	nop
   17f5c:	00023f58 	.word	0x00023f58
   17f60:	00024150 	.word	0x00024150
   17f64:	000241e3 	.word	0x000241e3
   17f68:	000241a3 	.word	0x000241a3
   17f6c:	00023ff4 	.word	0x00023ff4
   17f70:	000241f0 	.word	0x000241f0
   17f74:	00023f44 	.word	0x00023f44
   17f78:	f8da 5004 	ldr.w	r5, [sl, #4]
   17f7c:	782b      	ldrb	r3, [r5, #0]
   17f7e:	3b61      	subs	r3, #97	; 0x61
   17f80:	2b19      	cmp	r3, #25
   17f82:	d809      	bhi.n	17f98 <d_print_comp_inner+0x168c>
   17f84:	29ff      	cmp	r1, #255	; 0xff
   17f86:	f000 8793 	beq.w	18eb0 <d_print_comp_inner+0x25a4>
   17f8a:	2320      	movs	r3, #32
   17f8c:	1c4a      	adds	r2, r1, #1
   17f8e:	f8c4 2100 	str.w	r2, [r4, #256]	; 0x100
   17f92:	5463      	strb	r3, [r4, r1]
   17f94:	f884 3104 	strb.w	r3, [r4, #260]	; 0x104
   17f98:	19eb      	adds	r3, r5, r7
   17f9a:	f813 3c01 	ldrb.w	r3, [r3, #-1]
   17f9e:	2b20      	cmp	r3, #32
   17fa0:	bf08      	it	eq
   17fa2:	f107 37ff 	addeq.w	r7, r7, #4294967295
   17fa6:	2f00      	cmp	r7, #0
   17fa8:	f43e ad7e 	beq.w	16aa8 <d_print_comp_inner+0x19c>
   17fac:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
   17fb0:	442f      	add	r7, r5
   17fb2:	f04f 0800 	mov.w	r8, #0
   17fb6:	e009      	b.n	17fcc <d_print_comp_inner+0x16c0>
   17fb8:	460b      	mov	r3, r1
   17fba:	3101      	adds	r1, #1
   17fbc:	42af      	cmp	r7, r5
   17fbe:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
   17fc2:	54e6      	strb	r6, [r4, r3]
   17fc4:	f884 6104 	strb.w	r6, [r4, #260]	; 0x104
   17fc8:	f43e ad6e 	beq.w	16aa8 <d_print_comp_inner+0x19c>
   17fcc:	29ff      	cmp	r1, #255	; 0xff
   17fce:	f815 6b01 	ldrb.w	r6, [r5], #1
   17fd2:	d1f1      	bne.n	17fb8 <d_print_comp_inner+0x16ac>
   17fd4:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   17fd8:	f884 80ff 	strb.w	r8, [r4, #255]	; 0xff
   17fdc:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
   17fe0:	4620      	mov	r0, r4
   17fe2:	4798      	blx	r3
   17fe4:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   17fe8:	3301      	adds	r3, #1
   17fea:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
   17fee:	2101      	movs	r1, #1
   17ff0:	2300      	movs	r3, #0
   17ff2:	e7e3      	b.n	17fbc <d_print_comp_inner+0x16b0>
   17ff4:	f8d4 2144 	ldr.w	r2, [r4, #324]	; 0x144
   17ff8:	b13a      	cbz	r2, 1800a <d_print_comp_inner+0x16fe>
   17ffa:	ab14      	add	r3, sp, #80	; 0x50
   17ffc:	f8d4 1110 	ldr.w	r1, [r4, #272]	; 0x110
   18000:	f843 1d48 	str.w	r1, [r3, #-72]!
   18004:	9203      	str	r2, [sp, #12]
   18006:	f8c4 3110 	str.w	r3, [r4, #272]	; 0x110
   1800a:	686b      	ldr	r3, [r5, #4]
   1800c:	781a      	ldrb	r2, [r3, #0]
   1800e:	2a04      	cmp	r2, #4
   18010:	f000 830e 	beq.w	18630 <d_print_comp_inner+0x1d24>
   18014:	a804      	add	r0, sp, #16
   18016:	461a      	mov	r2, r3
   18018:	f8d4 5128 	ldr.w	r5, [r4, #296]	; 0x128
   1801c:	f8c4 0128 	str.w	r0, [r4, #296]	; 0x128
   18020:	4641      	mov	r1, r8
   18022:	4620      	mov	r0, r4
   18024:	9304      	str	r3, [sp, #16]
   18026:	9505      	str	r5, [sp, #20]
   18028:	f7fe fc70 	bl	1690c <d_print_comp_inner>
   1802c:	f8d4 3144 	ldr.w	r3, [r4, #324]	; 0x144
   18030:	9a05      	ldr	r2, [sp, #20]
   18032:	f8c4 2128 	str.w	r2, [r4, #296]	; 0x128
   18036:	2b00      	cmp	r3, #0
   18038:	f43e ad36 	beq.w	16aa8 <d_print_comp_inner+0x19c>
   1803c:	9b02      	ldr	r3, [sp, #8]
   1803e:	f8c4 3110 	str.w	r3, [r4, #272]	; 0x110
   18042:	f7fe bd31 	b.w	16aa8 <d_print_comp_inner+0x19c>
   18046:	68aa      	ldr	r2, [r5, #8]
   18048:	4641      	mov	r1, r8
   1804a:	4620      	mov	r0, r4
   1804c:	f001 fa02 	bl	19454 <d_print_comp>
   18050:	f7fe bd2a 	b.w	16aa8 <d_print_comp_inner+0x19c>
   18054:	686a      	ldr	r2, [r5, #4]
   18056:	49d8      	ldr	r1, [pc, #864]	; (183b8 <d_print_comp_inner+0x1aac>)
   18058:	3201      	adds	r2, #1
   1805a:	a804      	add	r0, sp, #16
   1805c:	f006 fb4e 	bl	1e6fc <sprintf>
   18060:	a804      	add	r0, sp, #16
   18062:	f006 fced 	bl	1ea40 <strlen>
   18066:	b318      	cbz	r0, 180b0 <d_print_comp_inner+0x17a4>
   18068:	ad04      	add	r5, sp, #16
   1806a:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
   1806e:	182f      	adds	r7, r5, r0
   18070:	f04f 0800 	mov.w	r8, #0
   18074:	e008      	b.n	18088 <d_print_comp_inner+0x177c>
   18076:	460b      	mov	r3, r1
   18078:	3101      	adds	r1, #1
   1807a:	42bd      	cmp	r5, r7
   1807c:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
   18080:	54e6      	strb	r6, [r4, r3]
   18082:	f884 6104 	strb.w	r6, [r4, #260]	; 0x104
   18086:	d015      	beq.n	180b4 <d_print_comp_inner+0x17a8>
   18088:	29ff      	cmp	r1, #255	; 0xff
   1808a:	f815 6b01 	ldrb.w	r6, [r5], #1
   1808e:	d1f2      	bne.n	18076 <d_print_comp_inner+0x176a>
   18090:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   18094:	f884 80ff 	strb.w	r8, [r4, #255]	; 0xff
   18098:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
   1809c:	4620      	mov	r0, r4
   1809e:	4798      	blx	r3
   180a0:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   180a4:	3301      	adds	r3, #1
   180a6:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
   180aa:	2101      	movs	r1, #1
   180ac:	2300      	movs	r3, #0
   180ae:	e7e4      	b.n	1807a <d_print_comp_inner+0x176e>
   180b0:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
   180b4:	29ff      	cmp	r1, #255	; 0xff
   180b6:	f000 8404 	beq.w	188c2 <d_print_comp_inner+0x1fb6>
   180ba:	1c4a      	adds	r2, r1, #1
   180bc:	237d      	movs	r3, #125	; 0x7d
   180be:	f8c4 2100 	str.w	r2, [r4, #256]	; 0x100
   180c2:	5463      	strb	r3, [r4, r1]
   180c4:	f884 3104 	strb.w	r3, [r4, #260]	; 0x104
   180c8:	f7fe bcee 	b.w	16aa8 <d_print_comp_inner+0x19c>
   180cc:	686a      	ldr	r2, [r5, #4]
   180ce:	4641      	mov	r1, r8
   180d0:	4620      	mov	r0, r4
   180d2:	f001 f9bf 	bl	19454 <d_print_comp>
   180d6:	f7fe bce7 	b.w	16aa8 <d_print_comp_inner+0x19c>
   180da:	686a      	ldr	r2, [r5, #4]
   180dc:	4641      	mov	r1, r8
   180de:	4620      	mov	r0, r4
   180e0:	f001 f9b8 	bl	19454 <d_print_comp>
   180e4:	f7fe bce0 	b.w	16aa8 <d_print_comp_inner+0x19c>
   180e8:	686a      	ldr	r2, [r5, #4]
   180ea:	4641      	mov	r1, r8
   180ec:	4620      	mov	r0, r4
   180ee:	f001 f9b1 	bl	19454 <d_print_comp>
   180f2:	f7fe bcd9 	b.w	16aa8 <d_print_comp_inner+0x19c>
   180f6:	4eb1      	ldr	r6, [pc, #708]	; (183bc <d_print_comp_inner+0x1ab0>)
   180f8:	68aa      	ldr	r2, [r5, #8]
   180fa:	4641      	mov	r1, r8
   180fc:	4620      	mov	r0, r4
   180fe:	f001 f9a9 	bl	19454 <d_print_comp>
   18102:	f106 0a05 	add.w	sl, r6, #5
   18106:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
   1810a:	f04f 0900 	mov.w	r9, #0
   1810e:	e008      	b.n	18122 <d_print_comp_inner+0x1816>
   18110:	460b      	mov	r3, r1
   18112:	3101      	adds	r1, #1
   18114:	4556      	cmp	r6, sl
   18116:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
   1811a:	54e7      	strb	r7, [r4, r3]
   1811c:	f884 7104 	strb.w	r7, [r4, #260]	; 0x104
   18120:	d013      	beq.n	1814a <d_print_comp_inner+0x183e>
   18122:	29ff      	cmp	r1, #255	; 0xff
   18124:	f816 7b01 	ldrb.w	r7, [r6], #1
   18128:	d1f2      	bne.n	18110 <d_print_comp_inner+0x1804>
   1812a:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   1812e:	f884 90ff 	strb.w	r9, [r4, #255]	; 0xff
   18132:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
   18136:	4620      	mov	r0, r4
   18138:	4798      	blx	r3
   1813a:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   1813e:	3301      	adds	r3, #1
   18140:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
   18144:	2101      	movs	r1, #1
   18146:	2300      	movs	r3, #0
   18148:	e7e4      	b.n	18114 <d_print_comp_inner+0x1808>
   1814a:	686a      	ldr	r2, [r5, #4]
   1814c:	4641      	mov	r1, r8
   1814e:	4620      	mov	r0, r4
   18150:	f001 f980 	bl	19454 <d_print_comp>
   18154:	f7fe bca8 	b.w	16aa8 <d_print_comp_inner+0x19c>
   18158:	686a      	ldr	r2, [r5, #4]
   1815a:	4641      	mov	r1, r8
   1815c:	4620      	mov	r0, r4
   1815e:	f001 f979 	bl	19454 <d_print_comp>
   18162:	f7fe bca1 	b.w	16aa8 <d_print_comp_inner+0x19c>
   18166:	686a      	ldr	r2, [r5, #4]
   18168:	4641      	mov	r1, r8
   1816a:	4620      	mov	r0, r4
   1816c:	f001 f972 	bl	19454 <d_print_comp>
   18170:	f7fe bc9a 	b.w	16aa8 <d_print_comp_inner+0x19c>
   18174:	686a      	ldr	r2, [r5, #4]
   18176:	4641      	mov	r1, r8
   18178:	4620      	mov	r0, r4
   1817a:	f001 f96b 	bl	19454 <d_print_comp>
   1817e:	f7fe bc93 	b.w	16aa8 <d_print_comp_inner+0x19c>
   18182:	4641      	mov	r1, r8
   18184:	686a      	ldr	r2, [r5, #4]
   18186:	4620      	mov	r0, r4
   18188:	f001 f964 	bl	19454 <d_print_comp>
   1818c:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
   18190:	29ff      	cmp	r1, #255	; 0xff
   18192:	f000 842a 	beq.w	189ea <d_print_comp_inner+0x20de>
   18196:	1c4a      	adds	r2, r1, #1
   18198:	2329      	movs	r3, #41	; 0x29
   1819a:	f8c4 2100 	str.w	r2, [r4, #256]	; 0x100
   1819e:	5463      	strb	r3, [r4, r1]
   181a0:	f884 3104 	strb.w	r3, [r4, #260]	; 0x104
   181a4:	f7fe bc80 	b.w	16aa8 <d_print_comp_inner+0x19c>
   181a8:	686a      	ldr	r2, [r5, #4]
   181aa:	4641      	mov	r1, r8
   181ac:	4620      	mov	r0, r4
   181ae:	f001 f951 	bl	19454 <d_print_comp>
   181b2:	f7fe bc79 	b.w	16aa8 <d_print_comp_inner+0x19c>
   181b6:	2f04      	cmp	r7, #4
   181b8:	f1a6 0410 	sub.w	r4, r6, #16
   181bc:	f106 0e10 	add.w	lr, r6, #16
   181c0:	f000 8722 	beq.w	19008 <d_print_comp_inner+0x26fc>
   181c4:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
   181c8:	e886 000f 	stmia.w	r6, {r0, r1, r2, r3}
   181cc:	2300      	movs	r3, #0
   181ce:	f84e 4c10 	str.w	r4, [lr, #-16]
   181d2:	e906 1008 	stmdb	r6, {r3, ip}
   181d6:	f8ca 6114 	str.w	r6, [sl, #276]	; 0x114
   181da:	f846 5c0c 	str.w	r5, [r6, #-12]
   181de:	686d      	ldr	r5, [r5, #4]
   181e0:	3701      	adds	r7, #1
   181e2:	4676      	mov	r6, lr
   181e4:	f7fe bf84 	b.w	170f0 <d_print_comp_inner+0x7e4>
   181e8:	68aa      	ldr	r2, [r5, #8]
   181ea:	9300      	str	r3, [sp, #0]
   181ec:	460e      	mov	r6, r1
   181ee:	4620      	mov	r0, r4
   181f0:	4641      	mov	r1, r8
   181f2:	f8d4 5124 	ldr.w	r5, [r4, #292]	; 0x124
   181f6:	f001 f92d 	bl	19454 <d_print_comp>
   181fa:	f8d4 2124 	ldr.w	r2, [r4, #292]	; 0x124
   181fe:	9b00      	ldr	r3, [sp, #0]
   18200:	4295      	cmp	r5, r2
   18202:	f47e ac51 	bne.w	16aa8 <d_print_comp_inner+0x19c>
   18206:	f8d4 2100 	ldr.w	r2, [r4, #256]	; 0x100
   1820a:	42b2      	cmp	r2, r6
   1820c:	f47e ac4c 	bne.w	16aa8 <d_print_comp_inner+0x19c>
   18210:	3b01      	subs	r3, #1
   18212:	f8c4 3100 	str.w	r3, [r4, #256]	; 0x100
   18216:	f7fe bc47 	b.w	16aa8 <d_print_comp_inner+0x19c>
   1821a:	462a      	mov	r2, r5
   1821c:	4641      	mov	r1, r8
   1821e:	4620      	mov	r0, r4
   18220:	f001 f928 	bl	19474 <d_print_mod>
   18224:	f7fe bc70 	b.w	16b08 <d_print_comp_inner+0x1fc>
   18228:	686b      	ldr	r3, [r5, #4]
   1822a:	9300      	str	r3, [sp, #0]
   1822c:	f1b9 0f00 	cmp.w	r9, #0
   18230:	f47f abae 	bne.w	17990 <d_print_comp_inner+0x1084>
   18234:	f7fe bc38 	b.w	16aa8 <d_print_comp_inner+0x19c>
   18238:	463a      	mov	r2, r7
   1823a:	a804      	add	r0, sp, #16
   1823c:	495e      	ldr	r1, [pc, #376]	; (183b8 <d_print_comp_inner+0x1aac>)
   1823e:	f006 fa5d 	bl	1e6fc <sprintf>
   18242:	a804      	add	r0, sp, #16
   18244:	f006 fbfc 	bl	1ea40 <strlen>
   18248:	b318      	cbz	r0, 18292 <d_print_comp_inner+0x1986>
   1824a:	ad04      	add	r5, sp, #16
   1824c:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
   18250:	182f      	adds	r7, r5, r0
   18252:	f04f 0800 	mov.w	r8, #0
   18256:	e008      	b.n	1826a <d_print_comp_inner+0x195e>
   18258:	460b      	mov	r3, r1
   1825a:	3101      	adds	r1, #1
   1825c:	42af      	cmp	r7, r5
   1825e:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
   18262:	54e6      	strb	r6, [r4, r3]
   18264:	f884 6104 	strb.w	r6, [r4, #260]	; 0x104
   18268:	d015      	beq.n	18296 <d_print_comp_inner+0x198a>
   1826a:	29ff      	cmp	r1, #255	; 0xff
   1826c:	f815 6b01 	ldrb.w	r6, [r5], #1
   18270:	d1f2      	bne.n	18258 <d_print_comp_inner+0x194c>
   18272:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   18276:	f884 80ff 	strb.w	r8, [r4, #255]	; 0xff
   1827a:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
   1827e:	4620      	mov	r0, r4
   18280:	4798      	blx	r3
   18282:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   18286:	3301      	adds	r3, #1
   18288:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
   1828c:	2101      	movs	r1, #1
   1828e:	2300      	movs	r3, #0
   18290:	e7e4      	b.n	1825c <d_print_comp_inner+0x1950>
   18292:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
   18296:	29ff      	cmp	r1, #255	; 0xff
   18298:	f000 84dd 	beq.w	18c56 <d_print_comp_inner+0x234a>
   1829c:	1c4a      	adds	r2, r1, #1
   1829e:	237d      	movs	r3, #125	; 0x7d
   182a0:	f8c4 2100 	str.w	r2, [r4, #256]	; 0x100
   182a4:	5463      	strb	r3, [r4, r1]
   182a6:	f884 3104 	strb.w	r3, [r4, #260]	; 0x104
   182aa:	f7fe bbfd 	b.w	16aa8 <d_print_comp_inner+0x19c>
   182ae:	2700      	movs	r7, #0
   182b0:	f7ff ba1f 	b.w	176f2 <d_print_comp_inner+0xde6>
   182b4:	68df      	ldr	r7, [r3, #12]
   182b6:	689d      	ldr	r5, [r3, #8]
   182b8:	2f00      	cmp	r7, #0
   182ba:	f43e abf5 	beq.w	16aa8 <d_print_comp_inner+0x19c>
   182be:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
   182c2:	442f      	add	r7, r5
   182c4:	f04f 0800 	mov.w	r8, #0
   182c8:	e009      	b.n	182de <d_print_comp_inner+0x19d2>
   182ca:	460b      	mov	r3, r1
   182cc:	3101      	adds	r1, #1
   182ce:	42bd      	cmp	r5, r7
   182d0:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
   182d4:	54e6      	strb	r6, [r4, r3]
   182d6:	f884 6104 	strb.w	r6, [r4, #260]	; 0x104
   182da:	f43e abe5 	beq.w	16aa8 <d_print_comp_inner+0x19c>
   182de:	29ff      	cmp	r1, #255	; 0xff
   182e0:	f815 6b01 	ldrb.w	r6, [r5], #1
   182e4:	d1f1      	bne.n	182ca <d_print_comp_inner+0x19be>
   182e6:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   182ea:	f884 80ff 	strb.w	r8, [r4, #255]	; 0xff
   182ee:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
   182f2:	4620      	mov	r0, r4
   182f4:	4798      	blx	r3
   182f6:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   182fa:	3301      	adds	r3, #1
   182fc:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
   18300:	2101      	movs	r1, #1
   18302:	2300      	movs	r3, #0
   18304:	e7e3      	b.n	182ce <d_print_comp_inner+0x19c2>
   18306:	686e      	ldr	r6, [r5, #4]
   18308:	68af      	ldr	r7, [r5, #8]
   1830a:	4437      	add	r7, r6
   1830c:	42be      	cmp	r6, r7
   1830e:	f4be abcb 	bcs.w	16aa8 <d_print_comp_inner+0x19c>
   18312:	f04f 0800 	mov.w	r8, #0
   18316:	e00d      	b.n	18334 <d_print_comp_inner+0x1a28>
   18318:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
   1831c:	29ff      	cmp	r1, #255	; 0xff
   1831e:	d036      	beq.n	1838e <d_print_comp_inner+0x1a82>
   18320:	1c4b      	adds	r3, r1, #1
   18322:	f8c4 3100 	str.w	r3, [r4, #256]	; 0x100
   18326:	5465      	strb	r5, [r4, r1]
   18328:	f884 5104 	strb.w	r5, [r4, #260]	; 0x104
   1832c:	3601      	adds	r6, #1
   1832e:	42b7      	cmp	r7, r6
   18330:	f67e abba 	bls.w	16aa8 <d_print_comp_inner+0x19c>
   18334:	1bbb      	subs	r3, r7, r6
   18336:	2b03      	cmp	r3, #3
   18338:	7835      	ldrb	r5, [r6, #0]
   1833a:	dded      	ble.n	18318 <d_print_comp_inner+0x1a0c>
   1833c:	2d5f      	cmp	r5, #95	; 0x5f
   1833e:	d1eb      	bne.n	18318 <d_print_comp_inner+0x1a0c>
   18340:	7873      	ldrb	r3, [r6, #1]
   18342:	2b5f      	cmp	r3, #95	; 0x5f
   18344:	d1e8      	bne.n	18318 <d_print_comp_inner+0x1a0c>
   18346:	78b3      	ldrb	r3, [r6, #2]
   18348:	2b55      	cmp	r3, #85	; 0x55
   1834a:	d1e5      	bne.n	18318 <d_print_comp_inner+0x1a0c>
   1834c:	1cf3      	adds	r3, r6, #3
   1834e:	429f      	cmp	r7, r3
   18350:	d9e2      	bls.n	18318 <d_print_comp_inner+0x1a0c>
   18352:	2000      	movs	r0, #0
   18354:	e006      	b.n	18364 <d_print_comp_inner+0x1a58>
   18356:	f1a5 0237 	sub.w	r2, r5, #55	; 0x37
   1835a:	429f      	cmp	r7, r3
   1835c:	eb02 1000 	add.w	r0, r2, r0, lsl #4
   18360:	f000 85c7 	beq.w	18ef2 <d_print_comp_inner+0x25e6>
   18364:	4699      	mov	r9, r3
   18366:	f813 5b01 	ldrb.w	r5, [r3], #1
   1836a:	f1a5 0230 	sub.w	r2, r5, #48	; 0x30
   1836e:	b2d1      	uxtb	r1, r2
   18370:	2909      	cmp	r1, #9
   18372:	f1a5 0e41 	sub.w	lr, r5, #65	; 0x41
   18376:	d9f0      	bls.n	1835a <d_print_comp_inner+0x1a4e>
   18378:	f1be 0f05 	cmp.w	lr, #5
   1837c:	f1a5 0261 	sub.w	r2, r5, #97	; 0x61
   18380:	d9e9      	bls.n	18356 <d_print_comp_inner+0x1a4a>
   18382:	2a05      	cmp	r2, #5
   18384:	f200 8743 	bhi.w	1920e <d_print_comp_inner+0x2902>
   18388:	f1a5 0257 	sub.w	r2, r5, #87	; 0x57
   1838c:	e7e5      	b.n	1835a <d_print_comp_inner+0x1a4e>
   1838e:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   18392:	f884 80ff 	strb.w	r8, [r4, #255]	; 0xff
   18396:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
   1839a:	4620      	mov	r0, r4
   1839c:	4798      	blx	r3
   1839e:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   183a2:	3301      	adds	r3, #1
   183a4:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
   183a8:	2100      	movs	r1, #0
   183aa:	2301      	movs	r3, #1
   183ac:	e7b9      	b.n	18322 <d_print_comp_inner+0x1a16>
   183ae:	4d04      	ldr	r5, [pc, #16]	; (183c0 <d_print_comp_inner+0x1ab4>)
   183b0:	4698      	mov	r8, r3
   183b2:	1daf      	adds	r7, r5, #6
   183b4:	e010      	b.n	183d8 <d_print_comp_inner+0x1acc>
   183b6:	bf00      	nop
   183b8:	00023f44 	.word	0x00023f44
   183bc:	000240b8 	.word	0x000240b8
   183c0:	00024118 	.word	0x00024118
   183c4:	460b      	mov	r3, r1
   183c6:	3101      	adds	r1, #1
   183c8:	42bd      	cmp	r5, r7
   183ca:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
   183ce:	54e6      	strb	r6, [r4, r3]
   183d0:	f884 6104 	strb.w	r6, [r4, #260]	; 0x104
   183d4:	f43e ab68 	beq.w	16aa8 <d_print_comp_inner+0x19c>
   183d8:	29ff      	cmp	r1, #255	; 0xff
   183da:	f815 6b01 	ldrb.w	r6, [r5], #1
   183de:	d1f1      	bne.n	183c4 <d_print_comp_inner+0x1ab8>
   183e0:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   183e4:	f884 80ff 	strb.w	r8, [r4, #255]	; 0xff
   183e8:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
   183ec:	4620      	mov	r0, r4
   183ee:	4798      	blx	r3
   183f0:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   183f4:	3301      	adds	r3, #1
   183f6:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
   183fa:	2101      	movs	r1, #1
   183fc:	2300      	movs	r3, #0
   183fe:	e7e3      	b.n	183c8 <d_print_comp_inner+0x1abc>
   18400:	782b      	ldrb	r3, [r5, #0]
   18402:	2b2f      	cmp	r3, #47	; 0x2f
   18404:	f47e ab6a 	bne.w	16adc <d_print_comp_inner+0x1d0>
   18408:	4601      	mov	r1, r0
   1840a:	460d      	mov	r5, r1
   1840c:	f8d4 c114 	ldr.w	ip, [r4, #276]	; 0x114
   18410:	f7fe bb66 	b.w	16ae0 <d_print_comp_inner+0x1d4>
   18414:	4dd7      	ldr	r5, [pc, #860]	; (18774 <d_print_comp_inner+0x1e68>)
   18416:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
   1841a:	f105 0804 	add.w	r8, r5, #4
   1841e:	e009      	b.n	18434 <d_print_comp_inner+0x1b28>
   18420:	460b      	mov	r3, r1
   18422:	3101      	adds	r1, #1
   18424:	45a8      	cmp	r8, r5
   18426:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
   1842a:	54e6      	strb	r6, [r4, r3]
   1842c:	f884 6104 	strb.w	r6, [r4, #260]	; 0x104
   18430:	f43e ab3a 	beq.w	16aa8 <d_print_comp_inner+0x19c>
   18434:	29ff      	cmp	r1, #255	; 0xff
   18436:	f815 6b01 	ldrb.w	r6, [r5], #1
   1843a:	d1f1      	bne.n	18420 <d_print_comp_inner+0x1b14>
   1843c:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   18440:	f884 70ff 	strb.w	r7, [r4, #255]	; 0xff
   18444:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
   18448:	4620      	mov	r0, r4
   1844a:	4798      	blx	r3
   1844c:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   18450:	3301      	adds	r3, #1
   18452:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
   18456:	2101      	movs	r1, #1
   18458:	2300      	movs	r3, #0
   1845a:	e7e3      	b.n	18424 <d_print_comp_inner+0x1b18>
   1845c:	4ec6      	ldr	r6, [pc, #792]	; (18778 <d_print_comp_inner+0x1e6c>)
   1845e:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
   18462:	f106 0905 	add.w	r9, r6, #5
   18466:	f04f 0800 	mov.w	r8, #0
   1846a:	e008      	b.n	1847e <d_print_comp_inner+0x1b72>
   1846c:	460b      	mov	r3, r1
   1846e:	3101      	adds	r1, #1
   18470:	45b1      	cmp	r9, r6
   18472:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
   18476:	54e7      	strb	r7, [r4, r3]
   18478:	f884 7104 	strb.w	r7, [r4, #260]	; 0x104
   1847c:	d013      	beq.n	184a6 <d_print_comp_inner+0x1b9a>
   1847e:	29ff      	cmp	r1, #255	; 0xff
   18480:	f816 7b01 	ldrb.w	r7, [r6], #1
   18484:	d1f2      	bne.n	1846c <d_print_comp_inner+0x1b60>
   18486:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   1848a:	f884 80ff 	strb.w	r8, [r4, #255]	; 0xff
   1848e:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
   18492:	4620      	mov	r0, r4
   18494:	4798      	blx	r3
   18496:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   1849a:	3301      	adds	r3, #1
   1849c:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
   184a0:	2101      	movs	r1, #1
   184a2:	2300      	movs	r3, #0
   184a4:	e7e4      	b.n	18470 <d_print_comp_inner+0x1b64>
   184a6:	686a      	ldr	r2, [r5, #4]
   184a8:	49b4      	ldr	r1, [pc, #720]	; (1877c <d_print_comp_inner+0x1e70>)
   184aa:	3201      	adds	r2, #1
   184ac:	a804      	add	r0, sp, #16
   184ae:	f006 f925 	bl	1e6fc <sprintf>
   184b2:	a804      	add	r0, sp, #16
   184b4:	f006 fac4 	bl	1ea40 <strlen>
   184b8:	2800      	cmp	r0, #0
   184ba:	f43e aaf5 	beq.w	16aa8 <d_print_comp_inner+0x19c>
   184be:	ad04      	add	r5, sp, #16
   184c0:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
   184c4:	182f      	adds	r7, r5, r0
   184c6:	f04f 0800 	mov.w	r8, #0
   184ca:	e009      	b.n	184e0 <d_print_comp_inner+0x1bd4>
   184cc:	460b      	mov	r3, r1
   184ce:	3101      	adds	r1, #1
   184d0:	42af      	cmp	r7, r5
   184d2:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
   184d6:	54e6      	strb	r6, [r4, r3]
   184d8:	f884 6104 	strb.w	r6, [r4, #260]	; 0x104
   184dc:	f43e aae4 	beq.w	16aa8 <d_print_comp_inner+0x19c>
   184e0:	29ff      	cmp	r1, #255	; 0xff
   184e2:	f815 6b01 	ldrb.w	r6, [r5], #1
   184e6:	d1f1      	bne.n	184cc <d_print_comp_inner+0x1bc0>
   184e8:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   184ec:	f884 80ff 	strb.w	r8, [r4, #255]	; 0xff
   184f0:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
   184f4:	4620      	mov	r0, r4
   184f6:	4798      	blx	r3
   184f8:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   184fc:	3301      	adds	r3, #1
   184fe:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
   18502:	2101      	movs	r1, #1
   18504:	2300      	movs	r3, #0
   18506:	e7e3      	b.n	184d0 <d_print_comp_inner+0x1bc4>
   18508:	f021 0860 	bic.w	r8, r1, #96	; 0x60
   1850c:	f105 0208 	add.w	r2, r5, #8
   18510:	4641      	mov	r1, r8
   18512:	f8d0 3114 	ldr.w	r3, [r0, #276]	; 0x114
   18516:	f001 fc91 	bl	19e3c <d_print_function_type.isra.11>
   1851a:	686a      	ldr	r2, [r5, #4]
   1851c:	2a00      	cmp	r2, #0
   1851e:	f43e aac3 	beq.w	16aa8 <d_print_comp_inner+0x19c>
   18522:	4641      	mov	r1, r8
   18524:	4620      	mov	r0, r4
   18526:	f000 ff95 	bl	19454 <d_print_comp>
   1852a:	f7fe babd 	b.w	16aa8 <d_print_comp_inner+0x19c>
   1852e:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
   18532:	f7ff b9a2 	b.w	1787a <d_print_comp_inner+0xf6e>
   18536:	4e92      	ldr	r6, [pc, #584]	; (18780 <d_print_comp_inner+0x1e74>)
   18538:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
   1853c:	f106 0a05 	add.w	sl, r6, #5
   18540:	f04f 0900 	mov.w	r9, #0
   18544:	e009      	b.n	1855a <d_print_comp_inner+0x1c4e>
   18546:	460b      	mov	r3, r1
   18548:	3101      	adds	r1, #1
   1854a:	45b2      	cmp	sl, r6
   1854c:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
   18550:	54e7      	strb	r7, [r4, r3]
   18552:	f884 7104 	strb.w	r7, [r4, #260]	; 0x104
   18556:	f43f a97a 	beq.w	1784e <d_print_comp_inner+0xf42>
   1855a:	29ff      	cmp	r1, #255	; 0xff
   1855c:	f816 7b01 	ldrb.w	r7, [r6], #1
   18560:	d1f1      	bne.n	18546 <d_print_comp_inner+0x1c3a>
   18562:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   18566:	f884 90ff 	strb.w	r9, [r4, #255]	; 0xff
   1856a:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
   1856e:	4620      	mov	r0, r4
   18570:	4798      	blx	r3
   18572:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   18576:	3301      	adds	r3, #1
   18578:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
   1857c:	2101      	movs	r1, #1
   1857e:	2300      	movs	r3, #0
   18580:	e7e3      	b.n	1854a <d_print_comp_inner+0x1c3e>
   18582:	f8d9 3004 	ldr.w	r3, [r9, #4]
   18586:	497f      	ldr	r1, [pc, #508]	; (18784 <d_print_comp_inner+0x1e78>)
   18588:	681f      	ldr	r7, [r3, #0]
   1858a:	4638      	mov	r0, r7
   1858c:	f006 f8ec 	bl	1e768 <strcmp>
   18590:	f896 a000 	ldrb.w	sl, [r6]
   18594:	b918      	cbnz	r0, 1859e <d_print_comp_inner+0x1c92>
   18596:	f1ba 0f03 	cmp.w	sl, #3
   1859a:	f000 851b 	beq.w	18fd4 <d_print_comp_inner+0x26c8>
   1859e:	f1ba 0f38 	cmp.w	sl, #56	; 0x38
   185a2:	f000 85fd 	beq.w	191a0 <d_print_comp_inner+0x2894>
   185a6:	4978      	ldr	r1, [pc, #480]	; (18788 <d_print_comp_inner+0x1e7c>)
   185a8:	4638      	mov	r0, r7
   185aa:	f006 f8dd 	bl	1e768 <strcmp>
   185ae:	4605      	mov	r5, r0
   185b0:	2800      	cmp	r0, #0
   185b2:	f000 8135 	beq.w	18820 <d_print_comp_inner+0x1f14>
   185b6:	4975      	ldr	r1, [pc, #468]	; (1878c <d_print_comp_inner+0x1e80>)
   185b8:	4638      	mov	r0, r7
   185ba:	f006 f8d5 	bl	1e768 <strcmp>
   185be:	2800      	cmp	r0, #0
   185c0:	f000 82b6 	beq.w	18b30 <d_print_comp_inner+0x2224>
   185c4:	464a      	mov	r2, r9
   185c6:	4641      	mov	r1, r8
   185c8:	4620      	mov	r0, r4
   185ca:	f001 fd2b 	bl	1a024 <d_print_expr_op>
   185ce:	2f00      	cmp	r7, #0
   185d0:	f43f a837 	beq.w	17642 <d_print_comp_inner+0xd36>
   185d4:	496e      	ldr	r1, [pc, #440]	; (18790 <d_print_comp_inner+0x1e84>)
   185d6:	4638      	mov	r0, r7
   185d8:	f006 f8c6 	bl	1e768 <strcmp>
   185dc:	2800      	cmp	r0, #0
   185de:	f000 8384 	beq.w	18cea <d_print_comp_inner+0x23de>
   185e2:	4638      	mov	r0, r7
   185e4:	496b      	ldr	r1, [pc, #428]	; (18794 <d_print_comp_inner+0x1e88>)
   185e6:	f006 f8bf 	bl	1e768 <strcmp>
   185ea:	4605      	mov	r5, r0
   185ec:	2800      	cmp	r0, #0
   185ee:	f47f a828 	bne.w	17642 <d_print_comp_inner+0xd36>
   185f2:	f8d4 3100 	ldr.w	r3, [r4, #256]	; 0x100
   185f6:	2bff      	cmp	r3, #255	; 0xff
   185f8:	f000 84db 	beq.w	18fb2 <d_print_comp_inner+0x26a6>
   185fc:	1c58      	adds	r0, r3, #1
   185fe:	2528      	movs	r5, #40	; 0x28
   18600:	f8c4 0100 	str.w	r0, [r4, #256]	; 0x100
   18604:	4641      	mov	r1, r8
   18606:	54e5      	strb	r5, [r4, r3]
   18608:	4632      	mov	r2, r6
   1860a:	4620      	mov	r0, r4
   1860c:	f884 5104 	strb.w	r5, [r4, #260]	; 0x104
   18610:	f000 ff20 	bl	19454 <d_print_comp>
   18614:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
   18618:	29ff      	cmp	r1, #255	; 0xff
   1861a:	f000 846d 	beq.w	18ef8 <d_print_comp_inner+0x25ec>
   1861e:	2329      	movs	r3, #41	; 0x29
   18620:	1c4a      	adds	r2, r1, #1
   18622:	f8c4 2100 	str.w	r2, [r4, #256]	; 0x100
   18626:	5463      	strb	r3, [r4, r1]
   18628:	f884 3104 	strb.w	r3, [r4, #260]	; 0x104
   1862c:	f7fe ba3c 	b.w	16aa8 <d_print_comp_inner+0x19c>
   18630:	f10d 0910 	add.w	r9, sp, #16
   18634:	685a      	ldr	r2, [r3, #4]
   18636:	f8d4 3128 	ldr.w	r3, [r4, #296]	; 0x128
   1863a:	f8c4 9128 	str.w	r9, [r4, #296]	; 0x128
   1863e:	4641      	mov	r1, r8
   18640:	4620      	mov	r0, r4
   18642:	9204      	str	r2, [sp, #16]
   18644:	9305      	str	r3, [sp, #20]
   18646:	f7fe f961 	bl	1690c <d_print_comp_inner>
   1864a:	f8d4 3144 	ldr.w	r3, [r4, #324]	; 0x144
   1864e:	9a05      	ldr	r2, [sp, #20]
   18650:	f8c4 2128 	str.w	r2, [r4, #296]	; 0x128
   18654:	b113      	cbz	r3, 1865c <d_print_comp_inner+0x1d50>
   18656:	9b02      	ldr	r3, [sp, #8]
   18658:	f8c4 3110 	str.w	r3, [r4, #272]	; 0x110
   1865c:	f894 3104 	ldrb.w	r3, [r4, #260]	; 0x104
   18660:	2b3c      	cmp	r3, #60	; 0x3c
   18662:	f000 83d9 	beq.w	18e18 <d_print_comp_inner+0x250c>
   18666:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
   1866a:	29ff      	cmp	r1, #255	; 0xff
   1866c:	f000 8467 	beq.w	18f3e <d_print_comp_inner+0x2632>
   18670:	1c4a      	adds	r2, r1, #1
   18672:	233c      	movs	r3, #60	; 0x3c
   18674:	f8c4 2100 	str.w	r2, [r4, #256]	; 0x100
   18678:	5463      	strb	r3, [r4, r1]
   1867a:	f884 3104 	strb.w	r3, [r4, #260]	; 0x104
   1867e:	686b      	ldr	r3, [r5, #4]
   18680:	f8d4 5128 	ldr.w	r5, [r4, #296]	; 0x128
   18684:	689b      	ldr	r3, [r3, #8]
   18686:	f8c4 9128 	str.w	r9, [r4, #296]	; 0x128
   1868a:	461a      	mov	r2, r3
   1868c:	4641      	mov	r1, r8
   1868e:	4620      	mov	r0, r4
   18690:	9304      	str	r3, [sp, #16]
   18692:	9505      	str	r5, [sp, #20]
   18694:	f7fe f93a 	bl	1690c <d_print_comp_inner>
   18698:	f894 3104 	ldrb.w	r3, [r4, #260]	; 0x104
   1869c:	9a05      	ldr	r2, [sp, #20]
   1869e:	f8c4 2128 	str.w	r2, [r4, #296]	; 0x128
   186a2:	2b3e      	cmp	r3, #62	; 0x3e
   186a4:	f000 83ab 	beq.w	18dfe <d_print_comp_inner+0x24f2>
   186a8:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
   186ac:	29ff      	cmp	r1, #255	; 0xff
   186ae:	f000 849a 	beq.w	18fe6 <d_print_comp_inner+0x26da>
   186b2:	233e      	movs	r3, #62	; 0x3e
   186b4:	1c4a      	adds	r2, r1, #1
   186b6:	f8c4 2100 	str.w	r2, [r4, #256]	; 0x100
   186ba:	5463      	strb	r3, [r4, r1]
   186bc:	f884 3104 	strb.w	r3, [r4, #260]	; 0x104
   186c0:	f7fe b9f2 	b.w	16aa8 <d_print_comp_inner+0x19c>
   186c4:	6852      	ldr	r2, [r2, #4]
   186c6:	7c16      	ldrb	r6, [r2, #16]
   186c8:	2e00      	cmp	r6, #0
   186ca:	f43f a9e7 	beq.w	17a9c <d_print_comp_inner+0x1190>
   186ce:	2e06      	cmp	r6, #6
   186d0:	f240 8337 	bls.w	18d42 <d_print_comp_inner+0x2436>
   186d4:	2e07      	cmp	r6, #7
   186d6:	f47f a9e1 	bne.w	17a9c <d_print_comp_inner+0x1190>
   186da:	68aa      	ldr	r2, [r5, #8]
   186dc:	7811      	ldrb	r1, [r2, #0]
   186de:	2900      	cmp	r1, #0
   186e0:	f47f a9dc 	bne.w	17a9c <d_print_comp_inner+0x1190>
   186e4:	6891      	ldr	r1, [r2, #8]
   186e6:	2901      	cmp	r1, #1
   186e8:	f47f a9d8 	bne.w	17a9c <d_print_comp_inner+0x1190>
   186ec:	2b3c      	cmp	r3, #60	; 0x3c
   186ee:	f47f a9d5 	bne.w	17a9c <d_print_comp_inner+0x1190>
   186f2:	6853      	ldr	r3, [r2, #4]
   186f4:	781b      	ldrb	r3, [r3, #0]
   186f6:	2b30      	cmp	r3, #48	; 0x30
   186f8:	f000 8626 	beq.w	19348 <d_print_comp_inner+0x2a3c>
   186fc:	2b31      	cmp	r3, #49	; 0x31
   186fe:	f47f a9cd 	bne.w	17a9c <d_print_comp_inner+0x1190>
   18702:	2204      	movs	r2, #4
   18704:	4924      	ldr	r1, [pc, #144]	; (18798 <d_print_comp_inner+0x1e8c>)
   18706:	f7fb fe2d 	bl	14364 <d_append_buffer>
   1870a:	f7fe b9cd 	b.w	16aa8 <d_print_comp_inner+0x19c>
   1870e:	4e23      	ldr	r6, [pc, #140]	; (1879c <d_print_comp_inner+0x1e90>)
   18710:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
   18714:	f106 0a02 	add.w	sl, r6, #2
   18718:	e009      	b.n	1872e <d_print_comp_inner+0x1e22>
   1871a:	460b      	mov	r3, r1
   1871c:	3101      	adds	r1, #1
   1871e:	45b2      	cmp	sl, r6
   18720:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
   18724:	54e7      	strb	r7, [r4, r3]
   18726:	f884 7104 	strb.w	r7, [r4, #260]	; 0x104
   1872a:	f43e ad52 	beq.w	171d2 <d_print_comp_inner+0x8c6>
   1872e:	29ff      	cmp	r1, #255	; 0xff
   18730:	f816 7b01 	ldrb.w	r7, [r6], #1
   18734:	d1f1      	bne.n	1871a <d_print_comp_inner+0x1e0e>
   18736:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   1873a:	f884 90ff 	strb.w	r9, [r4, #255]	; 0xff
   1873e:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
   18742:	4620      	mov	r0, r4
   18744:	4798      	blx	r3
   18746:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   1874a:	3301      	adds	r3, #1
   1874c:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
   18750:	2101      	movs	r1, #1
   18752:	2300      	movs	r3, #0
   18754:	e7e3      	b.n	1871e <d_print_comp_inner+0x1e12>
   18756:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
   1875a:	29ff      	cmp	r1, #255	; 0xff
   1875c:	f000 84e4 	beq.w	19128 <d_print_comp_inner+0x281c>
   18760:	2220      	movs	r2, #32
   18762:	1c4b      	adds	r3, r1, #1
   18764:	f8c4 3100 	str.w	r3, [r4, #256]	; 0x100
   18768:	5462      	strb	r2, [r4, r1]
   1876a:	f884 2104 	strb.w	r2, [r4, #260]	; 0x104
   1876e:	f7fe bdbb 	b.w	172e8 <d_print_comp_inner+0x9dc>
   18772:	bf00      	nop
   18774:	00024194 	.word	0x00024194
   18778:	00023fb8 	.word	0x00023fb8
   1877c:	00023f44 	.word	0x00023f44
   18780:	00024108 	.word	0x00024108
   18784:	0002413c 	.word	0x0002413c
   18788:	00024210 	.word	0x00024210
   1878c:	00023f48 	.word	0x00023f48
   18790:	00024140 	.word	0x00024140
   18794:	00024450 	.word	0x00024450
   18798:	0002416c 	.word	0x0002416c
   1879c:	00023f94 	.word	0x00023f94
   187a0:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
   187a4:	29ff      	cmp	r1, #255	; 0xff
   187a6:	f000 8465 	beq.w	19074 <d_print_comp_inner+0x2768>
   187aa:	2220      	movs	r2, #32
   187ac:	1c4b      	adds	r3, r1, #1
   187ae:	f8c4 3100 	str.w	r3, [r4, #256]	; 0x100
   187b2:	5462      	strb	r2, [r4, r1]
   187b4:	f884 2104 	strb.w	r2, [r4, #260]	; 0x104
   187b8:	f7fe bd80 	b.w	172bc <d_print_comp_inner+0x9b0>
   187bc:	2700      	movs	r7, #0
   187be:	55a7      	strb	r7, [r4, r6]
   187c0:	4631      	mov	r1, r6
   187c2:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   187c6:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
   187ca:	4620      	mov	r0, r4
   187cc:	4798      	blx	r3
   187ce:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   187d2:	f8c4 7100 	str.w	r7, [r4, #256]	; 0x100
   187d6:	3301      	adds	r3, #1
   187d8:	463e      	mov	r6, r7
   187da:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
   187de:	f7fe be31 	b.w	17444 <d_print_comp_inner+0xb38>
   187e2:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
   187e6:	29ff      	cmp	r1, #255	; 0xff
   187e8:	f000 8465 	beq.w	190b6 <d_print_comp_inner+0x27aa>
   187ec:	1c4a      	adds	r2, r1, #1
   187ee:	235b      	movs	r3, #91	; 0x5b
   187f0:	f8c4 2100 	str.w	r2, [r4, #256]	; 0x100
   187f4:	5463      	strb	r3, [r4, r1]
   187f6:	f884 3104 	strb.w	r3, [r4, #260]	; 0x104
   187fa:	4641      	mov	r1, r8
   187fc:	68aa      	ldr	r2, [r5, #8]
   187fe:	4620      	mov	r0, r4
   18800:	f000 fe28 	bl	19454 <d_print_comp>
   18804:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
   18808:	29ff      	cmp	r1, #255	; 0xff
   1880a:	f000 8312 	beq.w	18e32 <d_print_comp_inner+0x2526>
   1880e:	235d      	movs	r3, #93	; 0x5d
   18810:	1c4a      	adds	r2, r1, #1
   18812:	f8c4 2100 	str.w	r2, [r4, #256]	; 0x100
   18816:	5463      	strb	r3, [r4, r1]
   18818:	f884 3104 	strb.w	r3, [r4, #260]	; 0x104
   1881c:	f7fe b944 	b.w	16aa8 <d_print_comp_inner+0x19c>
   18820:	4631      	mov	r1, r6
   18822:	4620      	mov	r0, r4
   18824:	f7fb ffca 	bl	147bc <d_find_pack>
   18828:	b928      	cbnz	r0, 18836 <d_print_comp_inner+0x1f2a>
   1882a:	e007      	b.n	1883c <d_print_comp_inner+0x1f30>
   1882c:	6843      	ldr	r3, [r0, #4]
   1882e:	b12b      	cbz	r3, 1883c <d_print_comp_inner+0x1f30>
   18830:	6880      	ldr	r0, [r0, #8]
   18832:	3501      	adds	r5, #1
   18834:	b110      	cbz	r0, 1883c <d_print_comp_inner+0x1f30>
   18836:	7803      	ldrb	r3, [r0, #0]
   18838:	2b2f      	cmp	r3, #47	; 0x2f
   1883a:	d0f7      	beq.n	1882c <d_print_comp_inner+0x1f20>
   1883c:	462a      	mov	r2, r5
   1883e:	a804      	add	r0, sp, #16
   18840:	49d4      	ldr	r1, [pc, #848]	; (18b94 <d_print_comp_inner+0x2288>)
   18842:	f005 ff5b 	bl	1e6fc <sprintf>
   18846:	a804      	add	r0, sp, #16
   18848:	f006 f8fa 	bl	1ea40 <strlen>
   1884c:	2800      	cmp	r0, #0
   1884e:	f43e a92b 	beq.w	16aa8 <d_print_comp_inner+0x19c>
   18852:	ad04      	add	r5, sp, #16
   18854:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
   18858:	182f      	adds	r7, r5, r0
   1885a:	f04f 0800 	mov.w	r8, #0
   1885e:	e009      	b.n	18874 <d_print_comp_inner+0x1f68>
   18860:	460b      	mov	r3, r1
   18862:	3101      	adds	r1, #1
   18864:	42bd      	cmp	r5, r7
   18866:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
   1886a:	54e6      	strb	r6, [r4, r3]
   1886c:	f884 6104 	strb.w	r6, [r4, #260]	; 0x104
   18870:	f43e a91a 	beq.w	16aa8 <d_print_comp_inner+0x19c>
   18874:	29ff      	cmp	r1, #255	; 0xff
   18876:	f815 6b01 	ldrb.w	r6, [r5], #1
   1887a:	d1f1      	bne.n	18860 <d_print_comp_inner+0x1f54>
   1887c:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   18880:	f884 80ff 	strb.w	r8, [r4, #255]	; 0xff
   18884:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
   18888:	4620      	mov	r0, r4
   1888a:	4798      	blx	r3
   1888c:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   18890:	3301      	adds	r3, #1
   18892:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
   18896:	2101      	movs	r1, #1
   18898:	2300      	movs	r3, #0
   1889a:	e7e3      	b.n	18864 <d_print_comp_inner+0x1f58>
   1889c:	686a      	ldr	r2, [r5, #4]
   1889e:	4641      	mov	r1, r8
   188a0:	4620      	mov	r0, r4
   188a2:	f000 fdd7 	bl	19454 <d_print_comp>
   188a6:	f7fe b8ff 	b.w	16aa8 <d_print_comp_inner+0x19c>
   188aa:	29ff      	cmp	r1, #255	; 0xff
   188ac:	f000 83d2 	beq.w	19054 <d_print_comp_inner+0x2748>
   188b0:	232d      	movs	r3, #45	; 0x2d
   188b2:	1c4a      	adds	r2, r1, #1
   188b4:	f8c4 2100 	str.w	r2, [r4, #256]	; 0x100
   188b8:	5463      	strb	r3, [r4, r1]
   188ba:	f884 3104 	strb.w	r3, [r4, #260]	; 0x104
   188be:	f7ff b90e 	b.w	17ade <d_print_comp_inner+0x11d2>
   188c2:	2500      	movs	r5, #0
   188c4:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   188c8:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
   188cc:	f884 50ff 	strb.w	r5, [r4, #255]	; 0xff
   188d0:	4620      	mov	r0, r4
   188d2:	4798      	blx	r3
   188d4:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   188d8:	3301      	adds	r3, #1
   188da:	4629      	mov	r1, r5
   188dc:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
   188e0:	2201      	movs	r2, #1
   188e2:	f7ff bbeb 	b.w	180bc <d_print_comp_inner+0x17b0>
   188e6:	2500      	movs	r5, #0
   188e8:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   188ec:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
   188f0:	f884 50ff 	strb.w	r5, [r4, #255]	; 0xff
   188f4:	4620      	mov	r0, r4
   188f6:	4798      	blx	r3
   188f8:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   188fc:	3301      	adds	r3, #1
   188fe:	4629      	mov	r1, r5
   18900:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
   18904:	2201      	movs	r2, #1
   18906:	f7ff ba8f 	b.w	17e28 <d_print_comp_inner+0x151c>
   1890a:	2600      	movs	r6, #0
   1890c:	f8d0 3108 	ldr.w	r3, [r0, #264]	; 0x108
   18910:	f880 60ff 	strb.w	r6, [r0, #255]	; 0xff
   18914:	f8d0 210c 	ldr.w	r2, [r0, #268]	; 0x10c
   18918:	4798      	blx	r3
   1891a:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   1891e:	f8c4 6100 	str.w	r6, [r4, #256]	; 0x100
   18922:	3301      	adds	r3, #1
   18924:	4631      	mov	r1, r6
   18926:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
   1892a:	f7fe bd43 	b.w	173b4 <d_print_comp_inner+0xaa8>
   1892e:	2600      	movs	r6, #0
   18930:	f8d0 3108 	ldr.w	r3, [r0, #264]	; 0x108
   18934:	f8d0 210c 	ldr.w	r2, [r0, #268]	; 0x10c
   18938:	f880 60ff 	strb.w	r6, [r0, #255]	; 0xff
   1893c:	4798      	blx	r3
   1893e:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   18942:	3301      	adds	r3, #1
   18944:	4631      	mov	r1, r6
   18946:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
   1894a:	2201      	movs	r2, #1
   1894c:	f7fe bb74 	b.w	17038 <d_print_comp_inner+0x72c>
   18950:	2500      	movs	r5, #0
   18952:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   18956:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
   1895a:	f884 50ff 	strb.w	r5, [r4, #255]	; 0xff
   1895e:	4620      	mov	r0, r4
   18960:	4798      	blx	r3
   18962:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   18966:	3301      	adds	r3, #1
   18968:	4629      	mov	r1, r5
   1896a:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
   1896e:	2201      	movs	r2, #1
   18970:	f7ff bae4 	b.w	17f3c <d_print_comp_inner+0x1630>
   18974:	220d      	movs	r2, #13
   18976:	4988      	ldr	r1, [pc, #544]	; (18b98 <d_print_comp_inner+0x228c>)
   18978:	4620      	mov	r0, r4
   1897a:	f7fb fcf3 	bl	14364 <d_append_buffer>
   1897e:	68a9      	ldr	r1, [r5, #8]
   18980:	4620      	mov	r0, r4
   18982:	3101      	adds	r1, #1
   18984:	f7fb ff9e 	bl	148c4 <d_append_num>
   18988:	2203      	movs	r2, #3
   1898a:	4984      	ldr	r1, [pc, #528]	; (18b9c <d_print_comp_inner+0x2290>)
   1898c:	4620      	mov	r0, r4
   1898e:	f7fb fce9 	bl	14364 <d_append_buffer>
   18992:	686d      	ldr	r5, [r5, #4]
   18994:	f7fe bc22 	b.w	171dc <d_print_comp_inner+0x8d0>
   18998:	2500      	movs	r5, #0
   1899a:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   1899e:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
   189a2:	f884 50ff 	strb.w	r5, [r4, #255]	; 0xff
   189a6:	4620      	mov	r0, r4
   189a8:	4798      	blx	r3
   189aa:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   189ae:	3301      	adds	r3, #1
   189b0:	4629      	mov	r1, r5
   189b2:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
   189b6:	2201      	movs	r2, #1
   189b8:	f7fe be08 	b.w	175cc <d_print_comp_inner+0xcc0>
   189bc:	2301      	movs	r3, #1
   189be:	f8c4 3118 	str.w	r3, [r4, #280]	; 0x118
   189c2:	f7fe b871 	b.w	16aa8 <d_print_comp_inner+0x19c>
   189c6:	2500      	movs	r5, #0
   189c8:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   189cc:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
   189d0:	f884 50ff 	strb.w	r5, [r4, #255]	; 0xff
   189d4:	4620      	mov	r0, r4
   189d6:	4798      	blx	r3
   189d8:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   189dc:	3301      	adds	r3, #1
   189de:	4629      	mov	r1, r5
   189e0:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
   189e4:	2201      	movs	r2, #1
   189e6:	f7ff ba8f 	b.w	17f08 <d_print_comp_inner+0x15fc>
   189ea:	2500      	movs	r5, #0
   189ec:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   189f0:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
   189f4:	f884 50ff 	strb.w	r5, [r4, #255]	; 0xff
   189f8:	4620      	mov	r0, r4
   189fa:	4798      	blx	r3
   189fc:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   18a00:	3301      	adds	r3, #1
   18a02:	4629      	mov	r1, r5
   18a04:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
   18a08:	2201      	movs	r2, #1
   18a0a:	f7ff bbc5 	b.w	18198 <d_print_comp_inner+0x188c>
   18a0e:	a914      	add	r1, sp, #80	; 0x50
   18a10:	f8d4 0114 	ldr.w	r0, [r4, #276]	; 0x114
   18a14:	f841 0d40 	str.w	r0, [r1, #-64]!
   18a18:	f028 0860 	bic.w	r8, r8, #96	; 0x60
   18a1c:	f8d4 6110 	ldr.w	r6, [r4, #272]	; 0x110
   18a20:	f8c4 1114 	str.w	r1, [r4, #276]	; 0x114
   18a24:	4620      	mov	r0, r4
   18a26:	4641      	mov	r1, r8
   18a28:	9306      	str	r3, [sp, #24]
   18a2a:	9607      	str	r6, [sp, #28]
   18a2c:	9505      	str	r5, [sp, #20]
   18a2e:	f000 fd11 	bl	19454 <d_print_comp>
   18a32:	9e06      	ldr	r6, [sp, #24]
   18a34:	9b04      	ldr	r3, [sp, #16]
   18a36:	f8c4 3114 	str.w	r3, [r4, #276]	; 0x114
   18a3a:	2e00      	cmp	r6, #0
   18a3c:	f47e a834 	bne.w	16aa8 <d_print_comp_inner+0x19c>
   18a40:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
   18a44:	29ff      	cmp	r1, #255	; 0xff
   18a46:	f000 8409 	beq.w	1925c <d_print_comp_inner+0x2950>
   18a4a:	2320      	movs	r3, #32
   18a4c:	1c4a      	adds	r2, r1, #1
   18a4e:	f8c4 2100 	str.w	r2, [r4, #256]	; 0x100
   18a52:	5463      	strb	r3, [r4, r1]
   18a54:	f884 3104 	strb.w	r3, [r4, #260]	; 0x104
   18a58:	f7fe be0b 	b.w	17672 <d_print_comp_inner+0xd66>
   18a5c:	f8d4 3120 	ldr.w	r3, [r4, #288]	; 0x120
   18a60:	2b00      	cmp	r3, #0
   18a62:	f6fe abff 	blt.w	17264 <d_print_comp_inner+0x958>
   18a66:	2b00      	cmp	r3, #0
   18a68:	f000 829d 	beq.w	18fa6 <d_print_comp_inner+0x269a>
   18a6c:	6880      	ldr	r0, [r0, #8]
   18a6e:	3b01      	subs	r3, #1
   18a70:	2800      	cmp	r0, #0
   18a72:	f43e a82d 	beq.w	16ad0 <d_print_comp_inner+0x1c4>
   18a76:	7802      	ldrb	r2, [r0, #0]
   18a78:	2a2f      	cmp	r2, #47	; 0x2f
   18a7a:	d0f4      	beq.n	18a66 <d_print_comp_inner+0x215a>
   18a7c:	f7fe b828 	b.w	16ad0 <d_print_comp_inner+0x1c4>
   18a80:	f8d0 e130 	ldr.w	lr, [r0, #304]	; 0x130
   18a84:	f8d0 212c 	ldr.w	r2, [r0, #300]	; 0x12c
   18a88:	f1be 0f00 	cmp.w	lr, #0
   18a8c:	dd14      	ble.n	18ab8 <d_print_comp_inner+0x21ac>
   18a8e:	6813      	ldr	r3, [r2, #0]
   18a90:	4299      	cmp	r1, r3
   18a92:	f000 83f5 	beq.w	19280 <d_print_comp_inner+0x2974>
   18a96:	f102 0008 	add.w	r0, r2, #8
   18a9a:	463b      	mov	r3, r7
   18a9c:	46a4      	mov	ip, r4
   18a9e:	e004      	b.n	18aaa <d_print_comp_inner+0x219e>
   18aa0:	f852 4033 	ldr.w	r4, [r2, r3, lsl #3]
   18aa4:	42a1      	cmp	r1, r4
   18aa6:	f000 81d4 	beq.w	18e52 <d_print_comp_inner+0x2546>
   18aaa:	3301      	adds	r3, #1
   18aac:	459e      	cmp	lr, r3
   18aae:	4681      	mov	r9, r0
   18ab0:	f100 0008 	add.w	r0, r0, #8
   18ab4:	d1f4      	bne.n	18aa0 <d_print_comp_inner+0x2194>
   18ab6:	4664      	mov	r4, ip
   18ab8:	f8d4 3134 	ldr.w	r3, [r4, #308]	; 0x134
   18abc:	459e      	cmp	lr, r3
   18abe:	f280 84b9 	bge.w	19434 <d_print_comp_inner+0x2b28>
   18ac2:	f10e 0301 	add.w	r3, lr, #1
   18ac6:	eb02 00ce 	add.w	r0, r2, lr, lsl #3
   18aca:	f8c4 3130 	str.w	r3, [r4, #304]	; 0x130
   18ace:	f842 103e 	str.w	r1, [r2, lr, lsl #3]
   18ad2:	f8d4 2110 	ldr.w	r2, [r4, #272]	; 0x110
   18ad6:	3004      	adds	r0, #4
   18ad8:	468e      	mov	lr, r1
   18ada:	2a00      	cmp	r2, #0
   18adc:	f000 848d 	beq.w	193fa <d_print_comp_inner+0x2aee>
   18ae0:	f8d4 313c 	ldr.w	r3, [r4, #316]	; 0x13c
   18ae4:	f8d4 1140 	ldr.w	r1, [r4, #320]	; 0x140
   18ae8:	428b      	cmp	r3, r1
   18aea:	f103 0c01 	add.w	ip, r3, #1
   18aee:	f280 84a1 	bge.w	19434 <d_print_comp_inner+0x2b28>
   18af2:	f8d4 1138 	ldr.w	r1, [r4, #312]	; 0x138
   18af6:	f8c4 c13c 	str.w	ip, [r4, #316]	; 0x13c
   18afa:	eb01 03c3 	add.w	r3, r1, r3, lsl #3
   18afe:	6851      	ldr	r1, [r2, #4]
   18b00:	6059      	str	r1, [r3, #4]
   18b02:	6003      	str	r3, [r0, #0]
   18b04:	6812      	ldr	r2, [r2, #0]
   18b06:	4618      	mov	r0, r3
   18b08:	e7e7      	b.n	18ada <d_print_comp_inner+0x21ce>
   18b0a:	2500      	movs	r5, #0
   18b0c:	4619      	mov	r1, r3
   18b0e:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
   18b12:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   18b16:	f884 50ff 	strb.w	r5, [r4, #255]	; 0xff
   18b1a:	4620      	mov	r0, r4
   18b1c:	4798      	blx	r3
   18b1e:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   18b22:	1c5a      	adds	r2, r3, #1
   18b24:	f8c4 2124 	str.w	r2, [r4, #292]	; 0x124
   18b28:	462b      	mov	r3, r5
   18b2a:	2201      	movs	r2, #1
   18b2c:	f7fe bd3d 	b.w	175aa <d_print_comp_inner+0xc9e>
   18b30:	2e00      	cmp	r6, #0
   18b32:	f000 844d 	beq.w	193d0 <d_print_comp_inner+0x2ac4>
   18b36:	f1ba 0f2f 	cmp.w	sl, #47	; 0x2f
   18b3a:	f040 8488 	bne.w	1944e <d_print_comp_inner+0x2b42>
   18b3e:	6873      	ldr	r3, [r6, #4]
   18b40:	b373      	cbz	r3, 18ba0 <d_print_comp_inner+0x2294>
   18b42:	4607      	mov	r7, r0
   18b44:	e007      	b.n	18b56 <d_print_comp_inner+0x224a>
   18b46:	3701      	adds	r7, #1
   18b48:	68b6      	ldr	r6, [r6, #8]
   18b4a:	b356      	cbz	r6, 18ba2 <d_print_comp_inner+0x2296>
   18b4c:	7833      	ldrb	r3, [r6, #0]
   18b4e:	2b2f      	cmp	r3, #47	; 0x2f
   18b50:	d127      	bne.n	18ba2 <d_print_comp_inner+0x2296>
   18b52:	6873      	ldr	r3, [r6, #4]
   18b54:	b32b      	cbz	r3, 18ba2 <d_print_comp_inner+0x2296>
   18b56:	781a      	ldrb	r2, [r3, #0]
   18b58:	2a4a      	cmp	r2, #74	; 0x4a
   18b5a:	d1f4      	bne.n	18b46 <d_print_comp_inner+0x223a>
   18b5c:	6859      	ldr	r1, [r3, #4]
   18b5e:	4620      	mov	r0, r4
   18b60:	f7fb fe2c 	bl	147bc <d_find_pack>
   18b64:	b198      	cbz	r0, 18b8e <d_print_comp_inner+0x2282>
   18b66:	7803      	ldrb	r3, [r0, #0]
   18b68:	2b2f      	cmp	r3, #47	; 0x2f
   18b6a:	f040 846c 	bne.w	19446 <d_print_comp_inner+0x2b3a>
   18b6e:	6843      	ldr	r3, [r0, #4]
   18b70:	2b00      	cmp	r3, #0
   18b72:	f000 8464 	beq.w	1943e <d_print_comp_inner+0x2b32>
   18b76:	4603      	mov	r3, r0
   18b78:	2000      	movs	r0, #0
   18b7a:	e004      	b.n	18b86 <d_print_comp_inner+0x227a>
   18b7c:	781a      	ldrb	r2, [r3, #0]
   18b7e:	2a2f      	cmp	r2, #47	; 0x2f
   18b80:	d105      	bne.n	18b8e <d_print_comp_inner+0x2282>
   18b82:	685a      	ldr	r2, [r3, #4]
   18b84:	b11a      	cbz	r2, 18b8e <d_print_comp_inner+0x2282>
   18b86:	689b      	ldr	r3, [r3, #8]
   18b88:	3001      	adds	r0, #1
   18b8a:	2b00      	cmp	r3, #0
   18b8c:	d1f6      	bne.n	18b7c <d_print_comp_inner+0x2270>
   18b8e:	4407      	add	r7, r0
   18b90:	e7da      	b.n	18b48 <d_print_comp_inner+0x223c>
   18b92:	bf00      	nop
   18b94:	00023f44 	.word	0x00023f44
   18b98:	00023f98 	.word	0x00023f98
   18b9c:	00023fa8 	.word	0x00023fa8
   18ba0:	461f      	mov	r7, r3
   18ba2:	4639      	mov	r1, r7
   18ba4:	4620      	mov	r0, r4
   18ba6:	f7fb fe8d 	bl	148c4 <d_append_num>
   18baa:	f7fd bf7d 	b.w	16aa8 <d_print_comp_inner+0x19c>
   18bae:	2500      	movs	r5, #0
   18bb0:	4619      	mov	r1, r3
   18bb2:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
   18bb6:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   18bba:	f884 50ff 	strb.w	r5, [r4, #255]	; 0xff
   18bbe:	4620      	mov	r0, r4
   18bc0:	4798      	blx	r3
   18bc2:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   18bc6:	1c5a      	adds	r2, r3, #1
   18bc8:	f8c4 2124 	str.w	r2, [r4, #292]	; 0x124
   18bcc:	462b      	mov	r3, r5
   18bce:	2101      	movs	r1, #1
   18bd0:	f7fe bb8e 	b.w	172f0 <d_print_comp_inner+0x9e4>
   18bd4:	2600      	movs	r6, #0
   18bd6:	4619      	mov	r1, r3
   18bd8:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
   18bdc:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   18be0:	f884 60ff 	strb.w	r6, [r4, #255]	; 0xff
   18be4:	4620      	mov	r0, r4
   18be6:	4798      	blx	r3
   18be8:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   18bec:	1c5a      	adds	r2, r3, #1
   18bee:	f8c4 2124 	str.w	r2, [r4, #292]	; 0x124
   18bf2:	4633      	mov	r3, r6
   18bf4:	2101      	movs	r1, #1
   18bf6:	f7fe bb65 	b.w	172c4 <d_print_comp_inner+0x9b8>
   18bfa:	2200      	movs	r2, #0
   18bfc:	4619      	mov	r1, r3
   18bfe:	f884 20ff 	strb.w	r2, [r4, #255]	; 0xff
   18c02:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   18c06:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
   18c0a:	4620      	mov	r0, r4
   18c0c:	4798      	blx	r3
   18c0e:	2329      	movs	r3, #41	; 0x29
   18c10:	7023      	strb	r3, [r4, #0]
   18c12:	f884 3104 	strb.w	r3, [r4, #260]	; 0x104
   18c16:	782a      	ldrb	r2, [r5, #0]
   18c18:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   18c1c:	2101      	movs	r1, #1
   18c1e:	3301      	adds	r3, #1
   18c20:	2a3d      	cmp	r2, #61	; 0x3d
   18c22:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
   18c26:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
   18c2a:	f47e af58 	bne.w	17ade <d_print_comp_inner+0x11d2>
   18c2e:	e63f      	b.n	188b0 <d_print_comp_inner+0x1fa4>
   18c30:	2700      	movs	r7, #0
   18c32:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   18c36:	f884 70ff 	strb.w	r7, [r4, #255]	; 0xff
   18c3a:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
   18c3e:	4620      	mov	r0, r4
   18c40:	4798      	blx	r3
   18c42:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   18c46:	f8c4 7100 	str.w	r7, [r4, #256]	; 0x100
   18c4a:	3301      	adds	r3, #1
   18c4c:	4639      	mov	r1, r7
   18c4e:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
   18c52:	f7fe bf28 	b.w	17aa6 <d_print_comp_inner+0x119a>
   18c56:	2500      	movs	r5, #0
   18c58:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   18c5c:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
   18c60:	f884 50ff 	strb.w	r5, [r4, #255]	; 0xff
   18c64:	4620      	mov	r0, r4
   18c66:	4798      	blx	r3
   18c68:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   18c6c:	3301      	adds	r3, #1
   18c6e:	4629      	mov	r1, r5
   18c70:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
   18c74:	2201      	movs	r2, #1
   18c76:	f7ff bb12 	b.w	1829e <d_print_comp_inner+0x1992>
   18c7a:	781b      	ldrb	r3, [r3, #0]
   18c7c:	f1a3 0163 	sub.w	r1, r3, #99	; 0x63
   18c80:	2901      	cmp	r1, #1
   18c82:	d903      	bls.n	18c8c <d_print_comp_inner+0x2380>
   18c84:	3b72      	subs	r3, #114	; 0x72
   18c86:	2b01      	cmp	r3, #1
   18c88:	f63d aead 	bhi.w	169e6 <d_print_comp_inner+0xda>
   18c8c:	4641      	mov	r1, r8
   18c8e:	4620      	mov	r0, r4
   18c90:	f001 f9c8 	bl	1a024 <d_print_expr_op>
   18c94:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
   18c98:	29ff      	cmp	r1, #255	; 0xff
   18c9a:	f000 8271 	beq.w	19180 <d_print_comp_inner+0x2874>
   18c9e:	1c4a      	adds	r2, r1, #1
   18ca0:	233c      	movs	r3, #60	; 0x3c
   18ca2:	f8c4 2100 	str.w	r2, [r4, #256]	; 0x100
   18ca6:	5463      	strb	r3, [r4, r1]
   18ca8:	f884 3104 	strb.w	r3, [r4, #260]	; 0x104
   18cac:	68ab      	ldr	r3, [r5, #8]
   18cae:	4641      	mov	r1, r8
   18cb0:	685a      	ldr	r2, [r3, #4]
   18cb2:	4620      	mov	r0, r4
   18cb4:	f000 fbce 	bl	19454 <d_print_comp>
   18cb8:	2202      	movs	r2, #2
   18cba:	49d5      	ldr	r1, [pc, #852]	; (19010 <d_print_comp_inner+0x2704>)
   18cbc:	4620      	mov	r0, r4
   18cbe:	f7fb fb51 	bl	14364 <d_append_buffer>
   18cc2:	68ab      	ldr	r3, [r5, #8]
   18cc4:	4641      	mov	r1, r8
   18cc6:	689a      	ldr	r2, [r3, #8]
   18cc8:	4620      	mov	r0, r4
   18cca:	f000 fbc3 	bl	19454 <d_print_comp>
   18cce:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
   18cd2:	29ff      	cmp	r1, #255	; 0xff
   18cd4:	f000 81df 	beq.w	19096 <d_print_comp_inner+0x278a>
   18cd8:	2329      	movs	r3, #41	; 0x29
   18cda:	1c4a      	adds	r2, r1, #1
   18cdc:	f8c4 2100 	str.w	r2, [r4, #256]	; 0x100
   18ce0:	5463      	strb	r3, [r4, r1]
   18ce2:	f884 3104 	strb.w	r3, [r4, #260]	; 0x104
   18ce6:	f7fd bedf 	b.w	16aa8 <d_print_comp_inner+0x19c>
   18cea:	4632      	mov	r2, r6
   18cec:	4641      	mov	r1, r8
   18cee:	4620      	mov	r0, r4
   18cf0:	f000 fbb0 	bl	19454 <d_print_comp>
   18cf4:	f7fd bed8 	b.w	16aa8 <d_print_comp_inner+0x19c>
   18cf8:	2600      	movs	r6, #0
   18cfa:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   18cfe:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
   18d02:	f884 60ff 	strb.w	r6, [r4, #255]	; 0xff
   18d06:	4620      	mov	r0, r4
   18d08:	4798      	blx	r3
   18d0a:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   18d0e:	3301      	adds	r3, #1
   18d10:	4631      	mov	r1, r6
   18d12:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
   18d16:	2201      	movs	r2, #1
   18d18:	f7fe ba55 	b.w	171c6 <d_print_comp_inner+0x8ba>
   18d1c:	49bd      	ldr	r1, [pc, #756]	; (19014 <d_print_comp_inner+0x2708>)
   18d1e:	6870      	ldr	r0, [r6, #4]
   18d20:	f005 fefc 	bl	1eb1c <strncmp>
   18d24:	2800      	cmp	r0, #0
   18d26:	f47e aabd 	bne.w	172a4 <d_print_comp_inner+0x998>
   18d2a:	68aa      	ldr	r2, [r5, #8]
   18d2c:	4641      	mov	r1, r8
   18d2e:	4620      	mov	r0, r4
   18d30:	f000 fb90 	bl	19454 <d_print_comp>
   18d34:	2202      	movs	r2, #2
   18d36:	49b8      	ldr	r1, [pc, #736]	; (19018 <d_print_comp_inner+0x270c>)
   18d38:	4620      	mov	r0, r4
   18d3a:	f7fb fb13 	bl	14364 <d_append_buffer>
   18d3e:	f7fe badd 	b.w	172fc <d_print_comp_inner+0x9f0>
   18d42:	68aa      	ldr	r2, [r5, #8]
   18d44:	7817      	ldrb	r7, [r2, #0]
   18d46:	2f00      	cmp	r7, #0
   18d48:	f47e aea8 	bne.w	17a9c <d_print_comp_inner+0x1190>
   18d4c:	2b3d      	cmp	r3, #61	; 0x3d
   18d4e:	f000 82ef 	beq.w	19330 <d_print_comp_inner+0x2a24>
   18d52:	68aa      	ldr	r2, [r5, #8]
   18d54:	4641      	mov	r1, r8
   18d56:	4620      	mov	r0, r4
   18d58:	3e02      	subs	r6, #2
   18d5a:	f000 fb7b 	bl	19454 <d_print_comp>
   18d5e:	2e04      	cmp	r6, #4
   18d60:	f63d aea2 	bhi.w	16aa8 <d_print_comp_inner+0x19c>
   18d64:	e8df f006 	tbb	[pc, r6]
   18d68:	0a111826 	.word	0x0a111826
   18d6c:	03          	.byte	0x03
   18d6d:	00          	.byte	0x00
   18d6e:	4620      	mov	r0, r4
   18d70:	2203      	movs	r2, #3
   18d72:	49aa      	ldr	r1, [pc, #680]	; (1901c <d_print_comp_inner+0x2710>)
   18d74:	f7fb faf6 	bl	14364 <d_append_buffer>
   18d78:	f7fd be96 	b.w	16aa8 <d_print_comp_inner+0x19c>
   18d7c:	4620      	mov	r0, r4
   18d7e:	2202      	movs	r2, #2
   18d80:	49a7      	ldr	r1, [pc, #668]	; (19020 <d_print_comp_inner+0x2714>)
   18d82:	f7fb faef 	bl	14364 <d_append_buffer>
   18d86:	f7fd be8f 	b.w	16aa8 <d_print_comp_inner+0x19c>
   18d8a:	4620      	mov	r0, r4
   18d8c:	2202      	movs	r2, #2
   18d8e:	49a5      	ldr	r1, [pc, #660]	; (19024 <d_print_comp_inner+0x2718>)
   18d90:	f7fb fae8 	bl	14364 <d_append_buffer>
   18d94:	f7fd be88 	b.w	16aa8 <d_print_comp_inner+0x19c>
   18d98:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
   18d9c:	29ff      	cmp	r1, #255	; 0xff
   18d9e:	f000 831a 	beq.w	193d6 <d_print_comp_inner+0x2aca>
   18da2:	236c      	movs	r3, #108	; 0x6c
   18da4:	1c4a      	adds	r2, r1, #1
   18da6:	f8c4 2100 	str.w	r2, [r4, #256]	; 0x100
   18daa:	5463      	strb	r3, [r4, r1]
   18dac:	f884 3104 	strb.w	r3, [r4, #260]	; 0x104
   18db0:	f7fd be7a 	b.w	16aa8 <d_print_comp_inner+0x19c>
   18db4:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
   18db8:	29ff      	cmp	r1, #255	; 0xff
   18dba:	f000 82db 	beq.w	19374 <d_print_comp_inner+0x2a68>
   18dbe:	2375      	movs	r3, #117	; 0x75
   18dc0:	1c4a      	adds	r2, r1, #1
   18dc2:	f8c4 2100 	str.w	r2, [r4, #256]	; 0x100
   18dc6:	5463      	strb	r3, [r4, r1]
   18dc8:	f884 3104 	strb.w	r3, [r4, #260]	; 0x104
   18dcc:	f7fd be6c 	b.w	16aa8 <d_print_comp_inner+0x19c>
   18dd0:	2600      	movs	r6, #0
   18dd2:	4619      	mov	r1, r3
   18dd4:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
   18dd8:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   18ddc:	f884 60ff 	strb.w	r6, [r4, #255]	; 0xff
   18de0:	4620      	mov	r0, r4
   18de2:	4798      	blx	r3
   18de4:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   18de8:	1c5a      	adds	r2, r3, #1
   18dea:	f8c4 2124 	str.w	r2, [r4, #292]	; 0x124
   18dee:	4633      	mov	r3, r6
   18df0:	2101      	movs	r1, #1
   18df2:	f7fe bd3c 	b.w	1786e <d_print_comp_inner+0xf62>
   18df6:	f8c4 3114 	str.w	r3, [r4, #276]	; 0x114
   18dfa:	f7fe bf95 	b.w	17d28 <d_print_comp_inner+0x141c>
   18dfe:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
   18e02:	29ff      	cmp	r1, #255	; 0xff
   18e04:	f000 8244 	beq.w	19290 <d_print_comp_inner+0x2984>
   18e08:	2320      	movs	r3, #32
   18e0a:	1c4a      	adds	r2, r1, #1
   18e0c:	f8c4 2100 	str.w	r2, [r4, #256]	; 0x100
   18e10:	5463      	strb	r3, [r4, r1]
   18e12:	f884 3104 	strb.w	r3, [r4, #260]	; 0x104
   18e16:	e447      	b.n	186a8 <d_print_comp_inner+0x1d9c>
   18e18:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
   18e1c:	29ff      	cmp	r1, #255	; 0xff
   18e1e:	f000 826e 	beq.w	192fe <d_print_comp_inner+0x29f2>
   18e22:	2320      	movs	r3, #32
   18e24:	1c4a      	adds	r2, r1, #1
   18e26:	f8c4 2100 	str.w	r2, [r4, #256]	; 0x100
   18e2a:	5463      	strb	r3, [r4, r1]
   18e2c:	f884 3104 	strb.w	r3, [r4, #260]	; 0x104
   18e30:	e419      	b.n	18666 <d_print_comp_inner+0x1d5a>
   18e32:	2500      	movs	r5, #0
   18e34:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   18e38:	f884 50ff 	strb.w	r5, [r4, #255]	; 0xff
   18e3c:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
   18e40:	4620      	mov	r0, r4
   18e42:	4798      	blx	r3
   18e44:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   18e48:	3301      	adds	r3, #1
   18e4a:	4629      	mov	r1, r5
   18e4c:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
   18e50:	e4dd      	b.n	1880e <d_print_comp_inner+0x1f02>
   18e52:	4664      	mov	r4, ip
   18e54:	f8d4 0128 	ldr.w	r0, [r4, #296]	; 0x128
   18e58:	b1d8      	cbz	r0, 18e92 <d_print_comp_inner+0x2586>
   18e5a:	6802      	ldr	r2, [r0, #0]
   18e5c:	4291      	cmp	r1, r2
   18e5e:	d00a      	beq.n	18e76 <d_print_comp_inner+0x256a>
   18e60:	4603      	mov	r3, r0
   18e62:	e004      	b.n	18e6e <d_print_comp_inner+0x2562>
   18e64:	685b      	ldr	r3, [r3, #4]
   18e66:	b1a3      	cbz	r3, 18e92 <d_print_comp_inner+0x2586>
   18e68:	681a      	ldr	r2, [r3, #0]
   18e6a:	4291      	cmp	r1, r2
   18e6c:	d003      	beq.n	18e76 <d_print_comp_inner+0x256a>
   18e6e:	4295      	cmp	r5, r2
   18e70:	d1f8      	bne.n	18e64 <d_print_comp_inner+0x2558>
   18e72:	4298      	cmp	r0, r3
   18e74:	d0f6      	beq.n	18e64 <d_print_comp_inner+0x2558>
   18e76:	3104      	adds	r1, #4
   18e78:	4620      	mov	r0, r4
   18e7a:	f7fb fc83 	bl	14784 <d_lookup_template_argument.isra.6>
   18e7e:	2800      	cmp	r0, #0
   18e80:	f43d ae26 	beq.w	16ad0 <d_print_comp_inner+0x1c4>
   18e84:	7803      	ldrb	r3, [r0, #0]
   18e86:	2b2f      	cmp	r3, #47	; 0x2f
   18e88:	f43d ae11 	beq.w	16aae <d_print_comp_inner+0x1a2>
   18e8c:	4601      	mov	r1, r0
   18e8e:	f7fe bc30 	b.w	176f2 <d_print_comp_inner+0xde6>
   18e92:	f8d9 3004 	ldr.w	r3, [r9, #4]
   18e96:	f8d4 6110 	ldr.w	r6, [r4, #272]	; 0x110
   18e9a:	f8c4 3110 	str.w	r3, [r4, #272]	; 0x110
   18e9e:	3104      	adds	r1, #4
   18ea0:	4620      	mov	r0, r4
   18ea2:	f7fb fc6f 	bl	14784 <d_lookup_template_argument.isra.6>
   18ea6:	2800      	cmp	r0, #0
   18ea8:	f43d ae10 	beq.w	16acc <d_print_comp_inner+0x1c0>
   18eac:	2701      	movs	r7, #1
   18eae:	e7e9      	b.n	18e84 <d_print_comp_inner+0x2578>
   18eb0:	2600      	movs	r6, #0
   18eb2:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   18eb6:	f884 60ff 	strb.w	r6, [r4, #255]	; 0xff
   18eba:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
   18ebe:	4620      	mov	r0, r4
   18ec0:	4798      	blx	r3
   18ec2:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   18ec6:	f8da 5004 	ldr.w	r5, [sl, #4]
   18eca:	3301      	adds	r3, #1
   18ecc:	4631      	mov	r1, r6
   18ece:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
   18ed2:	f7ff b85a 	b.w	17f8a <d_print_comp_inner+0x167e>
   18ed6:	68aa      	ldr	r2, [r5, #8]
   18ed8:	4641      	mov	r1, r8
   18eda:	4620      	mov	r0, r4
   18edc:	f000 faba 	bl	19454 <d_print_comp>
   18ee0:	9b06      	ldr	r3, [sp, #24]
   18ee2:	9a00      	ldr	r2, [sp, #0]
   18ee4:	f8c4 2114 	str.w	r2, [r4, #276]	; 0x114
   18ee8:	2b00      	cmp	r3, #0
   18eea:	f43e ac9d 	beq.w	17828 <d_print_comp_inner+0xf1c>
   18eee:	f7fd bddb 	b.w	16aa8 <d_print_comp_inner+0x19c>
   18ef2:	255f      	movs	r5, #95	; 0x5f
   18ef4:	f7ff ba10 	b.w	18318 <d_print_comp_inner+0x1a0c>
   18ef8:	2500      	movs	r5, #0
   18efa:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   18efe:	f884 50ff 	strb.w	r5, [r4, #255]	; 0xff
   18f02:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
   18f06:	4620      	mov	r0, r4
   18f08:	4798      	blx	r3
   18f0a:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   18f0e:	3301      	adds	r3, #1
   18f10:	4629      	mov	r1, r5
   18f12:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
   18f16:	f7ff bb82 	b.w	1861e <d_print_comp_inner+0x1d12>
   18f1a:	4648      	mov	r0, r9
   18f1c:	4942      	ldr	r1, [pc, #264]	; (19028 <d_print_comp_inner+0x271c>)
   18f1e:	f005 fc23 	bl	1e768 <strcmp>
   18f22:	b120      	cbz	r0, 18f2e <d_print_comp_inner+0x2622>
   18f24:	463a      	mov	r2, r7
   18f26:	4641      	mov	r1, r8
   18f28:	4620      	mov	r0, r4
   18f2a:	f001 f87b 	bl	1a024 <d_print_expr_op>
   18f2e:	68ab      	ldr	r3, [r5, #8]
   18f30:	4641      	mov	r1, r8
   18f32:	689a      	ldr	r2, [r3, #8]
   18f34:	4620      	mov	r0, r4
   18f36:	f001 f8b3 	bl	1a0a0 <d_print_subexpr>
   18f3a:	f7fd bd9d 	b.w	16a78 <d_print_comp_inner+0x16c>
   18f3e:	2600      	movs	r6, #0
   18f40:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   18f44:	f884 60ff 	strb.w	r6, [r4, #255]	; 0xff
   18f48:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
   18f4c:	4620      	mov	r0, r4
   18f4e:	4798      	blx	r3
   18f50:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   18f54:	3301      	adds	r3, #1
   18f56:	4631      	mov	r1, r6
   18f58:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
   18f5c:	f7ff bb88 	b.w	18670 <d_print_comp_inner+0x1d64>
   18f60:	2500      	movs	r5, #0
   18f62:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   18f66:	f884 50ff 	strb.w	r5, [r4, #255]	; 0xff
   18f6a:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
   18f6e:	4620      	mov	r0, r4
   18f70:	4798      	blx	r3
   18f72:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   18f76:	3301      	adds	r3, #1
   18f78:	4629      	mov	r1, r5
   18f7a:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
   18f7e:	f7fe bb59 	b.w	17634 <d_print_comp_inner+0xd28>
   18f82:	2500      	movs	r5, #0
   18f84:	f8d0 3108 	ldr.w	r3, [r0, #264]	; 0x108
   18f88:	f880 50ff 	strb.w	r5, [r0, #255]	; 0xff
   18f8c:	f8d0 210c 	ldr.w	r2, [r0, #268]	; 0x10c
   18f90:	4798      	blx	r3
   18f92:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   18f96:	f8c4 5100 	str.w	r5, [r4, #256]	; 0x100
   18f9a:	3301      	adds	r3, #1
   18f9c:	4629      	mov	r1, r5
   18f9e:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
   18fa2:	f7fe bb2b 	b.w	175fc <d_print_comp_inner+0xcf0>
   18fa6:	6840      	ldr	r0, [r0, #4]
   18fa8:	2800      	cmp	r0, #0
   18faa:	f43d ad91 	beq.w	16ad0 <d_print_comp_inner+0x1c4>
   18fae:	f7fe b959 	b.w	17264 <d_print_comp_inner+0x958>
   18fb2:	f884 00ff 	strb.w	r0, [r4, #255]	; 0xff
   18fb6:	4619      	mov	r1, r3
   18fb8:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
   18fbc:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   18fc0:	4620      	mov	r0, r4
   18fc2:	4798      	blx	r3
   18fc4:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   18fc8:	1c5a      	adds	r2, r3, #1
   18fca:	f8c4 2124 	str.w	r2, [r4, #292]	; 0x124
   18fce:	462b      	mov	r3, r5
   18fd0:	f7ff bb14 	b.w	185fc <d_print_comp_inner+0x1cf0>
   18fd4:	6873      	ldr	r3, [r6, #4]
   18fd6:	781a      	ldrb	r2, [r3, #0]
   18fd8:	2a01      	cmp	r2, #1
   18fda:	f000 8153 	beq.w	19284 <d_print_comp_inner+0x2978>
   18fde:	f896 a000 	ldrb.w	sl, [r6]
   18fe2:	f7ff bae0 	b.w	185a6 <d_print_comp_inner+0x1c9a>
   18fe6:	2500      	movs	r5, #0
   18fe8:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   18fec:	f884 50ff 	strb.w	r5, [r4, #255]	; 0xff
   18ff0:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
   18ff4:	4620      	mov	r0, r4
   18ff6:	4798      	blx	r3
   18ff8:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   18ffc:	3301      	adds	r3, #1
   18ffe:	4629      	mov	r1, r5
   19000:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
   19004:	f7ff bb55 	b.w	186b2 <d_print_comp_inner+0x1da6>
   19008:	4654      	mov	r4, sl
   1900a:	f7fe be8d 	b.w	17d28 <d_print_comp_inner+0x141c>
   1900e:	bf00      	nop
   19010:	00024144 	.word	0x00024144
   19014:	00023fac 	.word	0x00023fac
   19018:	00023fb4 	.word	0x00023fb4
   1901c:	00024160 	.word	0x00024160
   19020:	0002415c 	.word	0x0002415c
   19024:	00024158 	.word	0x00024158
   19028:	00023f4c 	.word	0x00023f4c
   1902c:	686a      	ldr	r2, [r5, #4]
   1902e:	4641      	mov	r1, r8
   19030:	4620      	mov	r0, r4
   19032:	f001 f835 	bl	1a0a0 <d_print_subexpr>
   19036:	4620      	mov	r0, r4
   19038:	2203      	movs	r2, #3
   1903a:	49e2      	ldr	r1, [pc, #904]	; (193c4 <d_print_comp_inner+0x2ab8>)
   1903c:	f7fb f992 	bl	14364 <d_append_buffer>
   19040:	f7fd bd32 	b.w	16aa8 <d_print_comp_inner+0x19c>
   19044:	ab14      	add	r3, sp, #80	; 0x50
   19046:	9603      	str	r6, [sp, #12]
   19048:	f843 cd48 	str.w	ip, [r3, #-72]!
   1904c:	f8c4 3110 	str.w	r3, [r4, #272]	; 0x110
   19050:	f7fe b85a 	b.w	17108 <d_print_comp_inner+0x7fc>
   19054:	2700      	movs	r7, #0
   19056:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   1905a:	f884 70ff 	strb.w	r7, [r4, #255]	; 0xff
   1905e:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
   19062:	4620      	mov	r0, r4
   19064:	4798      	blx	r3
   19066:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   1906a:	3301      	adds	r3, #1
   1906c:	4639      	mov	r1, r7
   1906e:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
   19072:	e41d      	b.n	188b0 <d_print_comp_inner+0x1fa4>
   19074:	2600      	movs	r6, #0
   19076:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   1907a:	f884 60ff 	strb.w	r6, [r4, #255]	; 0xff
   1907e:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
   19082:	4620      	mov	r0, r4
   19084:	4798      	blx	r3
   19086:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   1908a:	3301      	adds	r3, #1
   1908c:	4631      	mov	r1, r6
   1908e:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
   19092:	f7ff bb8a 	b.w	187aa <d_print_comp_inner+0x1e9e>
   19096:	2500      	movs	r5, #0
   19098:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   1909c:	f884 50ff 	strb.w	r5, [r4, #255]	; 0xff
   190a0:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
   190a4:	4620      	mov	r0, r4
   190a6:	4798      	blx	r3
   190a8:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   190ac:	3301      	adds	r3, #1
   190ae:	4629      	mov	r1, r5
   190b0:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
   190b4:	e610      	b.n	18cd8 <d_print_comp_inner+0x23cc>
   190b6:	2600      	movs	r6, #0
   190b8:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   190bc:	f884 60ff 	strb.w	r6, [r4, #255]	; 0xff
   190c0:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
   190c4:	4620      	mov	r0, r4
   190c6:	4798      	blx	r3
   190c8:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   190cc:	3301      	adds	r3, #1
   190ce:	4631      	mov	r1, r6
   190d0:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
   190d4:	f7ff bb8a 	b.w	187ec <d_print_comp_inner+0x1ee0>
   190d8:	685a      	ldr	r2, [r3, #4]
   190da:	6891      	ldr	r1, [r2, #8]
   190dc:	2901      	cmp	r1, #1
   190de:	f47d ac90 	bne.w	16a02 <d_print_comp_inner+0xf6>
   190e2:	6852      	ldr	r2, [r2, #4]
   190e4:	7812      	ldrb	r2, [r2, #0]
   190e6:	2a3e      	cmp	r2, #62	; 0x3e
   190e8:	f47d ac8b 	bne.w	16a02 <d_print_comp_inner+0xf6>
   190ec:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
   190f0:	29ff      	cmp	r1, #255	; 0xff
   190f2:	d10f      	bne.n	19114 <d_print_comp_inner+0x2808>
   190f4:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   190f8:	f884 60ff 	strb.w	r6, [r4, #255]	; 0xff
   190fc:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
   19100:	4620      	mov	r0, r4
   19102:	4798      	blx	r3
   19104:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   19108:	f8c4 6100 	str.w	r6, [r4, #256]	; 0x100
   1910c:	3301      	adds	r3, #1
   1910e:	4631      	mov	r1, r6
   19110:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
   19114:	2328      	movs	r3, #40	; 0x28
   19116:	1c4a      	adds	r2, r1, #1
   19118:	f8c4 2100 	str.w	r2, [r4, #256]	; 0x100
   1911c:	5463      	strb	r3, [r4, r1]
   1911e:	f884 3104 	strb.w	r3, [r4, #260]	; 0x104
   19122:	686b      	ldr	r3, [r5, #4]
   19124:	f7fd bc6d 	b.w	16a02 <d_print_comp_inner+0xf6>
   19128:	2500      	movs	r5, #0
   1912a:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   1912e:	f884 50ff 	strb.w	r5, [r4, #255]	; 0xff
   19132:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
   19136:	4620      	mov	r0, r4
   19138:	4798      	blx	r3
   1913a:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   1913e:	3301      	adds	r3, #1
   19140:	4629      	mov	r1, r5
   19142:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
   19146:	f7ff bb0b 	b.w	18760 <d_print_comp_inner+0x1e54>
   1914a:	f8db b004 	ldr.w	fp, [fp, #4]
   1914e:	f1bb 0f00 	cmp.w	fp, #0
   19152:	f43e ade9 	beq.w	17d28 <d_print_comp_inner+0x141c>
   19156:	f7fd bfc3 	b.w	170e0 <d_print_comp_inner+0x7d4>
   1915a:	9b02      	ldr	r3, [sp, #8]
   1915c:	f8c4 3110 	str.w	r3, [r4, #272]	; 0x110
   19160:	f7fd bfdb 	b.w	1711a <d_print_comp_inner+0x80e>
   19164:	6893      	ldr	r3, [r2, #8]
   19166:	781b      	ldrb	r3, [r3, #0]
   19168:	2b29      	cmp	r3, #41	; 0x29
   1916a:	bf1c      	itt	ne
   1916c:	2301      	movne	r3, #1
   1916e:	f8c4 3118 	strne.w	r3, [r4, #280]	; 0x118
   19172:	6852      	ldr	r2, [r2, #4]
   19174:	4641      	mov	r1, r8
   19176:	4620      	mov	r0, r4
   19178:	f000 ff92 	bl	1a0a0 <d_print_subexpr>
   1917c:	f7fd bc52 	b.w	16a24 <d_print_comp_inner+0x118>
   19180:	2600      	movs	r6, #0
   19182:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   19186:	f884 60ff 	strb.w	r6, [r4, #255]	; 0xff
   1918a:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
   1918e:	4620      	mov	r0, r4
   19190:	4798      	blx	r3
   19192:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   19196:	3301      	adds	r3, #1
   19198:	4631      	mov	r1, r6
   1919a:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
   1919e:	e57e      	b.n	18c9e <d_print_comp_inner+0x2392>
   191a0:	6872      	ldr	r2, [r6, #4]
   191a2:	4641      	mov	r1, r8
   191a4:	4620      	mov	r0, r4
   191a6:	f000 ff7b 	bl	1a0a0 <d_print_subexpr>
   191aa:	464a      	mov	r2, r9
   191ac:	4641      	mov	r1, r8
   191ae:	4620      	mov	r0, r4
   191b0:	f000 ff38 	bl	1a024 <d_print_expr_op>
   191b4:	f7fd bc78 	b.w	16aa8 <d_print_comp_inner+0x19c>
   191b8:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   191bc:	f884 50ff 	strb.w	r5, [r4, #255]	; 0xff
   191c0:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
   191c4:	4620      	mov	r0, r4
   191c6:	4798      	blx	r3
   191c8:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   191cc:	3301      	adds	r3, #1
   191ce:	4629      	mov	r1, r5
   191d0:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
   191d4:	f7fd bfad 	b.w	17132 <d_print_comp_inner+0x826>
   191d8:	464a      	mov	r2, r9
   191da:	4641      	mov	r1, r8
   191dc:	4620      	mov	r0, r4
   191de:	f000 ff5f 	bl	1a0a0 <d_print_subexpr>
   191e2:	4652      	mov	r2, sl
   191e4:	4641      	mov	r1, r8
   191e6:	4620      	mov	r0, r4
   191e8:	f000 ff1c 	bl	1a024 <d_print_expr_op>
   191ec:	463a      	mov	r2, r7
   191ee:	4641      	mov	r1, r8
   191f0:	4620      	mov	r0, r4
   191f2:	f000 ff55 	bl	1a0a0 <d_print_subexpr>
   191f6:	4620      	mov	r0, r4
   191f8:	2203      	movs	r2, #3
   191fa:	4973      	ldr	r1, [pc, #460]	; (193c8 <d_print_comp_inner+0x2abc>)
   191fc:	f7fb f8b2 	bl	14364 <d_append_buffer>
   19200:	462a      	mov	r2, r5
   19202:	4641      	mov	r1, r8
   19204:	4620      	mov	r0, r4
   19206:	f000 ff4b 	bl	1a0a0 <d_print_subexpr>
   1920a:	f7fd bc4d 	b.w	16aa8 <d_print_comp_inner+0x19c>
   1920e:	454f      	cmp	r7, r9
   19210:	f67f ae6f 	bls.w	18ef2 <d_print_comp_inner+0x25e6>
   19214:	2d5f      	cmp	r5, #95	; 0x5f
   19216:	f47f ae6c 	bne.w	18ef2 <d_print_comp_inner+0x25e6>
   1921a:	28ff      	cmp	r0, #255	; 0xff
   1921c:	f63f a87c 	bhi.w	18318 <d_print_comp_inner+0x1a0c>
   19220:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
   19224:	29ff      	cmp	r1, #255	; 0xff
   19226:	b2c5      	uxtb	r5, r0
   19228:	d10f      	bne.n	1924a <d_print_comp_inner+0x293e>
   1922a:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   1922e:	f884 80ff 	strb.w	r8, [r4, #255]	; 0xff
   19232:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
   19236:	4620      	mov	r0, r4
   19238:	4798      	blx	r3
   1923a:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   1923e:	f8c4 8100 	str.w	r8, [r4, #256]	; 0x100
   19242:	3301      	adds	r3, #1
   19244:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
   19248:	2100      	movs	r1, #0
   1924a:	1c4b      	adds	r3, r1, #1
   1924c:	f8c4 3100 	str.w	r3, [r4, #256]	; 0x100
   19250:	464e      	mov	r6, r9
   19252:	5465      	strb	r5, [r4, r1]
   19254:	f884 5104 	strb.w	r5, [r4, #260]	; 0x104
   19258:	f7ff b868 	b.w	1832c <d_print_comp_inner+0x1a20>
   1925c:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   19260:	f884 60ff 	strb.w	r6, [r4, #255]	; 0xff
   19264:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
   19268:	4620      	mov	r0, r4
   1926a:	4798      	blx	r3
   1926c:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   19270:	f8c4 6100 	str.w	r6, [r4, #256]	; 0x100
   19274:	3301      	adds	r3, #1
   19276:	4631      	mov	r1, r6
   19278:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
   1927c:	f7ff bbe5 	b.w	18a4a <d_print_comp_inner+0x213e>
   19280:	4691      	mov	r9, r2
   19282:	e5e7      	b.n	18e54 <d_print_comp_inner+0x2548>
   19284:	68b2      	ldr	r2, [r6, #8]
   19286:	7812      	ldrb	r2, [r2, #0]
   19288:	2a29      	cmp	r2, #41	; 0x29
   1928a:	bf08      	it	eq
   1928c:	461e      	moveq	r6, r3
   1928e:	e6a6      	b.n	18fde <d_print_comp_inner+0x26d2>
   19290:	2500      	movs	r5, #0
   19292:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   19296:	f884 50ff 	strb.w	r5, [r4, #255]	; 0xff
   1929a:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
   1929e:	4620      	mov	r0, r4
   192a0:	4798      	blx	r3
   192a2:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   192a6:	f8c4 5100 	str.w	r5, [r4, #256]	; 0x100
   192aa:	3301      	adds	r3, #1
   192ac:	4629      	mov	r1, r5
   192ae:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
   192b2:	e5a9      	b.n	18e08 <d_print_comp_inner+0x24fc>
   192b4:	2600      	movs	r6, #0
   192b6:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   192ba:	f884 60ff 	strb.w	r6, [r4, #255]	; 0xff
   192be:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
   192c2:	4620      	mov	r0, r4
   192c4:	4798      	blx	r3
   192c6:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   192ca:	f8c4 6100 	str.w	r6, [r4, #256]	; 0x100
   192ce:	3301      	adds	r3, #1
   192d0:	4631      	mov	r1, r6
   192d2:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
   192d6:	f7fd bbc8 	b.w	16a6a <d_print_comp_inner+0x15e>
   192da:	f884 00ff 	strb.w	r0, [r4, #255]	; 0xff
   192de:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   192e2:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
   192e6:	4620      	mov	r0, r4
   192e8:	4798      	blx	r3
   192ea:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   192ee:	f8c4 6100 	str.w	r6, [r4, #256]	; 0x100
   192f2:	3301      	adds	r3, #1
   192f4:	4631      	mov	r1, r6
   192f6:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
   192fa:	f7fd bba4 	b.w	16a46 <d_print_comp_inner+0x13a>
   192fe:	2600      	movs	r6, #0
   19300:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   19304:	f884 60ff 	strb.w	r6, [r4, #255]	; 0xff
   19308:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
   1930c:	4620      	mov	r0, r4
   1930e:	4798      	blx	r3
   19310:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   19314:	f8c4 6100 	str.w	r6, [r4, #256]	; 0x100
   19318:	3301      	adds	r3, #1
   1931a:	4631      	mov	r1, r6
   1931c:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
   19320:	e57f      	b.n	18e22 <d_print_comp_inner+0x2516>
   19322:	6841      	ldr	r1, [r0, #4]
   19324:	2900      	cmp	r1, #0
   19326:	f43d abd0 	beq.w	16aca <d_print_comp_inner+0x1be>
   1932a:	780b      	ldrb	r3, [r1, #0]
   1932c:	f7fe b9e1 	b.w	176f2 <d_print_comp_inner+0xde6>
   19330:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
   19334:	29ff      	cmp	r1, #255	; 0xff
   19336:	d00d      	beq.n	19354 <d_print_comp_inner+0x2a48>
   19338:	232d      	movs	r3, #45	; 0x2d
   1933a:	1c4a      	adds	r2, r1, #1
   1933c:	f8c4 2100 	str.w	r2, [r4, #256]	; 0x100
   19340:	5463      	strb	r3, [r4, r1]
   19342:	f884 3104 	strb.w	r3, [r4, #260]	; 0x104
   19346:	e504      	b.n	18d52 <d_print_comp_inner+0x2446>
   19348:	2205      	movs	r2, #5
   1934a:	4920      	ldr	r1, [pc, #128]	; (193cc <d_print_comp_inner+0x2ac0>)
   1934c:	f7fb f80a 	bl	14364 <d_append_buffer>
   19350:	f7fd bbaa 	b.w	16aa8 <d_print_comp_inner+0x19c>
   19354:	f8d0 3108 	ldr.w	r3, [r0, #264]	; 0x108
   19358:	f880 70ff 	strb.w	r7, [r0, #255]	; 0xff
   1935c:	f8d0 210c 	ldr.w	r2, [r0, #268]	; 0x10c
   19360:	4798      	blx	r3
   19362:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   19366:	f8c4 7100 	str.w	r7, [r4, #256]	; 0x100
   1936a:	3301      	adds	r3, #1
   1936c:	4639      	mov	r1, r7
   1936e:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
   19372:	e7e1      	b.n	19338 <d_print_comp_inner+0x2a2c>
   19374:	2500      	movs	r5, #0
   19376:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   1937a:	f884 50ff 	strb.w	r5, [r4, #255]	; 0xff
   1937e:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
   19382:	4620      	mov	r0, r4
   19384:	4798      	blx	r3
   19386:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   1938a:	f8c4 5100 	str.w	r5, [r4, #256]	; 0x100
   1938e:	3301      	adds	r3, #1
   19390:	4629      	mov	r1, r5
   19392:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
   19396:	e512      	b.n	18dbe <d_print_comp_inner+0x24b2>
   19398:	2700      	movs	r7, #0
   1939a:	f7ff b913 	b.w	185c4 <d_print_comp_inner+0x1cb8>
   1939e:	2500      	movs	r5, #0
   193a0:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   193a4:	f884 50ff 	strb.w	r5, [r4, #255]	; 0xff
   193a8:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
   193ac:	4620      	mov	r0, r4
   193ae:	4798      	blx	r3
   193b0:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   193b4:	f8c4 5100 	str.w	r5, [r4, #256]	; 0x100
   193b8:	3301      	adds	r3, #1
   193ba:	4629      	mov	r1, r5
   193bc:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
   193c0:	f7fd bb6b 	b.w	16a9a <d_print_comp_inner+0x18e>
   193c4:	00024190 	.word	0x00024190
   193c8:	0002414c 	.word	0x0002414c
   193cc:	00024164 	.word	0x00024164
   193d0:	4637      	mov	r7, r6
   193d2:	f7ff bbe6 	b.w	18ba2 <d_print_comp_inner+0x2296>
   193d6:	2500      	movs	r5, #0
   193d8:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   193dc:	f884 50ff 	strb.w	r5, [r4, #255]	; 0xff
   193e0:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
   193e4:	4620      	mov	r0, r4
   193e6:	4798      	blx	r3
   193e8:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   193ec:	f8c4 5100 	str.w	r5, [r4, #256]	; 0x100
   193f0:	3301      	adds	r3, #1
   193f2:	4629      	mov	r1, r5
   193f4:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
   193f8:	e4d3      	b.n	18da2 <d_print_comp_inner+0x2496>
   193fa:	4671      	mov	r1, lr
   193fc:	6002      	str	r2, [r0, #0]
   193fe:	3104      	adds	r1, #4
   19400:	4620      	mov	r0, r4
   19402:	f7fb f9bf 	bl	14784 <d_lookup_template_argument.isra.6>
   19406:	2800      	cmp	r0, #0
   19408:	f47f ad3c 	bne.w	18e84 <d_print_comp_inner+0x2578>
   1940c:	f7fd bb60 	b.w	16ad0 <d_print_comp_inner+0x1c4>
   19410:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   19414:	f884 60ff 	strb.w	r6, [r4, #255]	; 0xff
   19418:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
   1941c:	4620      	mov	r0, r4
   1941e:	4798      	blx	r3
   19420:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   19424:	f8c4 6100 	str.w	r6, [r4, #256]	; 0x100
   19428:	3301      	adds	r3, #1
   1942a:	4631      	mov	r1, r6
   1942c:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
   19430:	f7fe bc02 	b.w	17c38 <d_print_comp_inner+0x132c>
   19434:	2301      	movs	r3, #1
   19436:	f8c4 3118 	str.w	r3, [r4, #280]	; 0x118
   1943a:	f7fd bb35 	b.w	16aa8 <d_print_comp_inner+0x19c>
   1943e:	4618      	mov	r0, r3
   19440:	4407      	add	r7, r0
   19442:	f7ff bb81 	b.w	18b48 <d_print_comp_inner+0x223c>
   19446:	2000      	movs	r0, #0
   19448:	4407      	add	r7, r0
   1944a:	f7ff bb7d 	b.w	18b48 <d_print_comp_inner+0x223c>
   1944e:	4607      	mov	r7, r0
   19450:	f7ff bba7 	b.w	18ba2 <d_print_comp_inner+0x2296>

00019454 <d_print_comp>:
   19454:	b510      	push	{r4, lr}
   19456:	f8d0 3128 	ldr.w	r3, [r0, #296]	; 0x128
   1945a:	b082      	sub	sp, #8
   1945c:	f8c0 d128 	str.w	sp, [r0, #296]	; 0x128
   19460:	4604      	mov	r4, r0
   19462:	e88d 000c 	stmia.w	sp, {r2, r3}
   19466:	f7fd fa51 	bl	1690c <d_print_comp_inner>
   1946a:	9b01      	ldr	r3, [sp, #4]
   1946c:	f8c4 3128 	str.w	r3, [r4, #296]	; 0x128
   19470:	b002      	add	sp, #8
   19472:	bd10      	pop	{r4, pc}

00019474 <d_print_mod>:
   19474:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   19478:	7813      	ldrb	r3, [r2, #0]
   1947a:	3b03      	subs	r3, #3
   1947c:	b082      	sub	sp, #8
   1947e:	4615      	mov	r5, r2
   19480:	4604      	mov	r4, r0
   19482:	4688      	mov	r8, r1
   19484:	2b49      	cmp	r3, #73	; 0x49
   19486:	f200 8223 	bhi.w	198d0 <d_print_mod+0x45c>
   1948a:	e8df f013 	tbh	[pc, r3, lsl #1]
   1948e:	01e7      	.short	0x01e7
   19490:	02210221 	.word	0x02210221
   19494:	02210221 	.word	0x02210221
   19498:	02210221 	.word	0x02210221
   1949c:	02210221 	.word	0x02210221
   194a0:	02210221 	.word	0x02210221
   194a4:	02210221 	.word	0x02210221
   194a8:	02210221 	.word	0x02210221
   194ac:	02210221 	.word	0x02210221
   194b0:	02210221 	.word	0x02210221
   194b4:	02210221 	.word	0x02210221
   194b8:	01e90221 	.word	0x01e90221
   194bc:	01a80182 	.word	0x01a80182
   194c0:	018201e9 	.word	0x018201e9
   194c4:	01cd01a8 	.word	0x01cd01a8
   194c8:	006f01da 	.word	0x006f01da
   194cc:	009c008c 	.word	0x009c008c
   194d0:	00cf00ab 	.word	0x00cf00ab
   194d4:	022100f4 	.word	0x022100f4
   194d8:	02210221 	.word	0x02210221
   194dc:	01190221 	.word	0x01190221
   194e0:	015c0221 	.word	0x015c0221
   194e4:	02210221 	.word	0x02210221
   194e8:	02210221 	.word	0x02210221
   194ec:	02210221 	.word	0x02210221
   194f0:	02210221 	.word	0x02210221
   194f4:	02210221 	.word	0x02210221
   194f8:	02210221 	.word	0x02210221
   194fc:	02210221 	.word	0x02210221
   19500:	02210221 	.word	0x02210221
   19504:	02210221 	.word	0x02210221
   19508:	02210221 	.word	0x02210221
   1950c:	02210221 	.word	0x02210221
   19510:	02210221 	.word	0x02210221
   19514:	02210221 	.word	0x02210221
   19518:	02210221 	.word	0x02210221
   1951c:	02210221 	.word	0x02210221
   19520:	004a      	.short	0x004a
   19522:	4dd3      	ldr	r5, [pc, #844]	; (19870 <d_print_mod+0x3fc>)
   19524:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
   19528:	f105 0711 	add.w	r7, r5, #17
   1952c:	f04f 0800 	mov.w	r8, #0
   19530:	e008      	b.n	19544 <d_print_mod+0xd0>
   19532:	460b      	mov	r3, r1
   19534:	3101      	adds	r1, #1
   19536:	42bd      	cmp	r5, r7
   19538:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
   1953c:	54e6      	strb	r6, [r4, r3]
   1953e:	f884 6104 	strb.w	r6, [r4, #260]	; 0x104
   19542:	d02d      	beq.n	195a0 <d_print_mod+0x12c>
   19544:	29ff      	cmp	r1, #255	; 0xff
   19546:	f815 6f01 	ldrb.w	r6, [r5, #1]!
   1954a:	d1f2      	bne.n	19532 <d_print_mod+0xbe>
   1954c:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   19550:	f884 80ff 	strb.w	r8, [r4, #255]	; 0xff
   19554:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
   19558:	4620      	mov	r0, r4
   1955a:	4798      	blx	r3
   1955c:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   19560:	3301      	adds	r3, #1
   19562:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
   19566:	2101      	movs	r1, #1
   19568:	2300      	movs	r3, #0
   1956a:	e7e4      	b.n	19536 <d_print_mod+0xc2>
   1956c:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
   19570:	29ff      	cmp	r1, #255	; 0xff
   19572:	f000 81f7 	beq.w	19964 <d_print_mod+0x4f0>
   19576:	1c4a      	adds	r2, r1, #1
   19578:	2320      	movs	r3, #32
   1957a:	f8c4 2100 	str.w	r2, [r4, #256]	; 0x100
   1957e:	5463      	strb	r3, [r4, r1]
   19580:	f884 3104 	strb.w	r3, [r4, #260]	; 0x104
   19584:	68aa      	ldr	r2, [r5, #8]
   19586:	f8d4 3128 	ldr.w	r3, [r4, #296]	; 0x128
   1958a:	9200      	str	r2, [sp, #0]
   1958c:	4641      	mov	r1, r8
   1958e:	f8c4 d128 	str.w	sp, [r4, #296]	; 0x128
   19592:	4620      	mov	r0, r4
   19594:	9301      	str	r3, [sp, #4]
   19596:	f7fd f9b9 	bl	1690c <d_print_comp_inner>
   1959a:	9b01      	ldr	r3, [sp, #4]
   1959c:	f8c4 3128 	str.w	r3, [r4, #296]	; 0x128
   195a0:	b002      	add	sp, #8
   195a2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   195a6:	f011 0504 	ands.w	r5, r1, #4
   195aa:	d1f9      	bne.n	195a0 <d_print_mod+0x12c>
   195ac:	f8d0 3100 	ldr.w	r3, [r0, #256]	; 0x100
   195b0:	2bff      	cmp	r3, #255	; 0xff
   195b2:	f000 821c 	beq.w	199ee <d_print_mod+0x57a>
   195b6:	222a      	movs	r2, #42	; 0x2a
   195b8:	1c59      	adds	r1, r3, #1
   195ba:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
   195be:	54e2      	strb	r2, [r4, r3]
   195c0:	f884 2104 	strb.w	r2, [r4, #260]	; 0x104
   195c4:	e7ec      	b.n	195a0 <d_print_mod+0x12c>
   195c6:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
   195ca:	29ff      	cmp	r1, #255	; 0xff
   195cc:	f000 81b9 	beq.w	19942 <d_print_mod+0x4ce>
   195d0:	1c4a      	adds	r2, r1, #1
   195d2:	2326      	movs	r3, #38	; 0x26
   195d4:	f8c4 2100 	str.w	r2, [r4, #256]	; 0x100
   195d8:	5463      	strb	r3, [r4, r1]
   195da:	f884 3104 	strb.w	r3, [r4, #260]	; 0x104
   195de:	b002      	add	sp, #8
   195e0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   195e4:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
   195e8:	4da2      	ldr	r5, [pc, #648]	; (19874 <d_print_mod+0x400>)
   195ea:	f04f 0800 	mov.w	r8, #0
   195ee:	1caf      	adds	r7, r5, #2
   195f0:	e008      	b.n	19604 <d_print_mod+0x190>
   195f2:	460b      	mov	r3, r1
   195f4:	3101      	adds	r1, #1
   195f6:	42bd      	cmp	r5, r7
   195f8:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
   195fc:	54e6      	strb	r6, [r4, r3]
   195fe:	f884 6104 	strb.w	r6, [r4, #260]	; 0x104
   19602:	d0cd      	beq.n	195a0 <d_print_mod+0x12c>
   19604:	29ff      	cmp	r1, #255	; 0xff
   19606:	f815 6b01 	ldrb.w	r6, [r5], #1
   1960a:	d1f2      	bne.n	195f2 <d_print_mod+0x17e>
   1960c:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   19610:	f884 80ff 	strb.w	r8, [r4, #255]	; 0xff
   19614:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
   19618:	4620      	mov	r0, r4
   1961a:	4798      	blx	r3
   1961c:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   19620:	3301      	adds	r3, #1
   19622:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
   19626:	2101      	movs	r1, #1
   19628:	2300      	movs	r3, #0
   1962a:	e7e4      	b.n	195f6 <d_print_mod+0x182>
   1962c:	4d92      	ldr	r5, [pc, #584]	; (19878 <d_print_mod+0x404>)
   1962e:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
   19632:	f105 0708 	add.w	r7, r5, #8
   19636:	f04f 0800 	mov.w	r8, #0
   1963a:	e008      	b.n	1964e <d_print_mod+0x1da>
   1963c:	460b      	mov	r3, r1
   1963e:	3101      	adds	r1, #1
   19640:	42bd      	cmp	r5, r7
   19642:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
   19646:	54e6      	strb	r6, [r4, r3]
   19648:	f884 6104 	strb.w	r6, [r4, #260]	; 0x104
   1964c:	d0a8      	beq.n	195a0 <d_print_mod+0x12c>
   1964e:	29ff      	cmp	r1, #255	; 0xff
   19650:	f815 6f01 	ldrb.w	r6, [r5, #1]!
   19654:	d1f2      	bne.n	1963c <d_print_mod+0x1c8>
   19656:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   1965a:	f884 80ff 	strb.w	r8, [r4, #255]	; 0xff
   1965e:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
   19662:	4620      	mov	r0, r4
   19664:	4798      	blx	r3
   19666:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   1966a:	3301      	adds	r3, #1
   1966c:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
   19670:	2101      	movs	r1, #1
   19672:	2300      	movs	r3, #0
   19674:	e7e4      	b.n	19640 <d_print_mod+0x1cc>
   19676:	4d81      	ldr	r5, [pc, #516]	; (1987c <d_print_mod+0x408>)
   19678:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
   1967c:	f105 070a 	add.w	r7, r5, #10
   19680:	f04f 0800 	mov.w	r8, #0
   19684:	e008      	b.n	19698 <d_print_mod+0x224>
   19686:	460b      	mov	r3, r1
   19688:	3101      	adds	r1, #1
   1968a:	42bd      	cmp	r5, r7
   1968c:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
   19690:	54e6      	strb	r6, [r4, r3]
   19692:	f884 6104 	strb.w	r6, [r4, #260]	; 0x104
   19696:	d083      	beq.n	195a0 <d_print_mod+0x12c>
   19698:	29ff      	cmp	r1, #255	; 0xff
   1969a:	f815 6b01 	ldrb.w	r6, [r5], #1
   1969e:	d1f2      	bne.n	19686 <d_print_mod+0x212>
   196a0:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   196a4:	f884 80ff 	strb.w	r8, [r4, #255]	; 0xff
   196a8:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
   196ac:	4620      	mov	r0, r4
   196ae:	4798      	blx	r3
   196b0:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   196b4:	3301      	adds	r3, #1
   196b6:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
   196ba:	2101      	movs	r1, #1
   196bc:	2300      	movs	r3, #0
   196be:	e7e4      	b.n	1968a <d_print_mod+0x216>
   196c0:	f890 3104 	ldrb.w	r3, [r0, #260]	; 0x104
   196c4:	2b28      	cmp	r3, #40	; 0x28
   196c6:	d00b      	beq.n	196e0 <d_print_mod+0x26c>
   196c8:	f8d0 3100 	ldr.w	r3, [r0, #256]	; 0x100
   196cc:	2bff      	cmp	r3, #255	; 0xff
   196ce:	f000 8126 	beq.w	1991e <d_print_mod+0x4aa>
   196d2:	2220      	movs	r2, #32
   196d4:	1c59      	adds	r1, r3, #1
   196d6:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
   196da:	54e2      	strb	r2, [r4, r3]
   196dc:	f884 2104 	strb.w	r2, [r4, #260]	; 0x104
   196e0:	686a      	ldr	r2, [r5, #4]
   196e2:	f8d4 3128 	ldr.w	r3, [r4, #296]	; 0x128
   196e6:	4d66      	ldr	r5, [pc, #408]	; (19880 <d_print_mod+0x40c>)
   196e8:	f8c4 d128 	str.w	sp, [r4, #296]	; 0x128
   196ec:	4641      	mov	r1, r8
   196ee:	4620      	mov	r0, r4
   196f0:	9301      	str	r3, [sp, #4]
   196f2:	9200      	str	r2, [sp, #0]
   196f4:	f7fd f90a 	bl	1690c <d_print_comp_inner>
   196f8:	9b01      	ldr	r3, [sp, #4]
   196fa:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
   196fe:	f8c4 3128 	str.w	r3, [r4, #296]	; 0x128
   19702:	1cef      	adds	r7, r5, #3
   19704:	f04f 0800 	mov.w	r8, #0
   19708:	e009      	b.n	1971e <d_print_mod+0x2aa>
   1970a:	460b      	mov	r3, r1
   1970c:	3101      	adds	r1, #1
   1970e:	42bd      	cmp	r5, r7
   19710:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
   19714:	54e6      	strb	r6, [r4, r3]
   19716:	f884 6104 	strb.w	r6, [r4, #260]	; 0x104
   1971a:	f43f af41 	beq.w	195a0 <d_print_mod+0x12c>
   1971e:	29ff      	cmp	r1, #255	; 0xff
   19720:	f815 6b01 	ldrb.w	r6, [r5], #1
   19724:	d1f1      	bne.n	1970a <d_print_mod+0x296>
   19726:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   1972a:	f884 80ff 	strb.w	r8, [r4, #255]	; 0xff
   1972e:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
   19732:	4620      	mov	r0, r4
   19734:	4798      	blx	r3
   19736:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   1973a:	3301      	adds	r3, #1
   1973c:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
   19740:	2101      	movs	r1, #1
   19742:	2300      	movs	r3, #0
   19744:	e7e3      	b.n	1970e <d_print_mod+0x29a>
   19746:	4e4f      	ldr	r6, [pc, #316]	; (19884 <d_print_mod+0x410>)
   19748:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
   1974c:	f106 0a0a 	add.w	sl, r6, #10
   19750:	f04f 0900 	mov.w	r9, #0
   19754:	e009      	b.n	1976a <d_print_mod+0x2f6>
   19756:	460b      	mov	r3, r1
   19758:	3101      	adds	r1, #1
   1975a:	4556      	cmp	r6, sl
   1975c:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
   19760:	54e7      	strb	r7, [r4, r3]
   19762:	f884 7104 	strb.w	r7, [r4, #260]	; 0x104
   19766:	f000 80c0 	beq.w	198ea <d_print_mod+0x476>
   1976a:	29ff      	cmp	r1, #255	; 0xff
   1976c:	f816 7b01 	ldrb.w	r7, [r6], #1
   19770:	d1f1      	bne.n	19756 <d_print_mod+0x2e2>
   19772:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   19776:	f884 90ff 	strb.w	r9, [r4, #255]	; 0xff
   1977a:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
   1977e:	4620      	mov	r0, r4
   19780:	4798      	blx	r3
   19782:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   19786:	3301      	adds	r3, #1
   19788:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
   1978c:	2101      	movs	r1, #1
   1978e:	2300      	movs	r3, #0
   19790:	e7e3      	b.n	1975a <d_print_mod+0x2e6>
   19792:	4d3d      	ldr	r5, [pc, #244]	; (19888 <d_print_mod+0x414>)
   19794:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
   19798:	f105 0709 	add.w	r7, r5, #9
   1979c:	f04f 0800 	mov.w	r8, #0
   197a0:	e009      	b.n	197b6 <d_print_mod+0x342>
   197a2:	460b      	mov	r3, r1
   197a4:	3101      	adds	r1, #1
   197a6:	42bd      	cmp	r5, r7
   197a8:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
   197ac:	54e6      	strb	r6, [r4, r3]
   197ae:	f884 6104 	strb.w	r6, [r4, #260]	; 0x104
   197b2:	f43f aef5 	beq.w	195a0 <d_print_mod+0x12c>
   197b6:	29ff      	cmp	r1, #255	; 0xff
   197b8:	f815 6f01 	ldrb.w	r6, [r5, #1]!
   197bc:	d1f1      	bne.n	197a2 <d_print_mod+0x32e>
   197be:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   197c2:	f884 80ff 	strb.w	r8, [r4, #255]	; 0xff
   197c6:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
   197ca:	4620      	mov	r0, r4
   197cc:	4798      	blx	r3
   197ce:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   197d2:	3301      	adds	r3, #1
   197d4:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
   197d8:	2101      	movs	r1, #1
   197da:	2300      	movs	r3, #0
   197dc:	e7e3      	b.n	197a6 <d_print_mod+0x332>
   197de:	4d2b      	ldr	r5, [pc, #172]	; (1988c <d_print_mod+0x418>)
   197e0:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
   197e4:	1daf      	adds	r7, r5, #6
   197e6:	f04f 0800 	mov.w	r8, #0
   197ea:	e009      	b.n	19800 <d_print_mod+0x38c>
   197ec:	460b      	mov	r3, r1
   197ee:	3101      	adds	r1, #1
   197f0:	42bd      	cmp	r5, r7
   197f2:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
   197f6:	54e6      	strb	r6, [r4, r3]
   197f8:	f884 6104 	strb.w	r6, [r4, #260]	; 0x104
   197fc:	f43f aed0 	beq.w	195a0 <d_print_mod+0x12c>
   19800:	29ff      	cmp	r1, #255	; 0xff
   19802:	f815 6b01 	ldrb.w	r6, [r5], #1
   19806:	d1f1      	bne.n	197ec <d_print_mod+0x378>
   19808:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   1980c:	f884 80ff 	strb.w	r8, [r4, #255]	; 0xff
   19810:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
   19814:	4620      	mov	r0, r4
   19816:	4798      	blx	r3
   19818:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   1981c:	3301      	adds	r3, #1
   1981e:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
   19822:	2101      	movs	r1, #1
   19824:	2300      	movs	r3, #0
   19826:	e7e3      	b.n	197f0 <d_print_mod+0x37c>
   19828:	f8d0 3100 	ldr.w	r3, [r0, #256]	; 0x100
   1982c:	2bff      	cmp	r3, #255	; 0xff
   1982e:	f000 80cc 	beq.w	199ca <d_print_mod+0x556>
   19832:	2220      	movs	r2, #32
   19834:	1c59      	adds	r1, r3, #1
   19836:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
   1983a:	54e2      	strb	r2, [r4, r3]
   1983c:	f884 2104 	strb.w	r2, [r4, #260]	; 0x104
   19840:	e6c3      	b.n	195ca <d_print_mod+0x156>
   19842:	f8d0 3100 	ldr.w	r3, [r0, #256]	; 0x100
   19846:	2bff      	cmp	r3, #255	; 0xff
   19848:	f000 80ad 	beq.w	199a6 <d_print_mod+0x532>
   1984c:	2220      	movs	r2, #32
   1984e:	1c59      	adds	r1, r3, #1
   19850:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
   19854:	54e2      	strb	r2, [r4, r3]
   19856:	f884 2104 	strb.w	r2, [r4, #260]	; 0x104
   1985a:	e6c5      	b.n	195e8 <d_print_mod+0x174>
   1985c:	686a      	ldr	r2, [r5, #4]
   1985e:	e692      	b.n	19586 <d_print_mod+0x112>
   19860:	4d0b      	ldr	r5, [pc, #44]	; (19890 <d_print_mod+0x41c>)
   19862:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
   19866:	f105 0709 	add.w	r7, r5, #9
   1986a:	f04f 0800 	mov.w	r8, #0
   1986e:	e01b      	b.n	198a8 <d_print_mod+0x434>
   19870:	00024233 	.word	0x00024233
   19874:	00024248 	.word	0x00024248
   19878:	0002424b 	.word	0x0002424b
   1987c:	00024258 	.word	0x00024258
   19880:	00024264 	.word	0x00024264
   19884:	00024268 	.word	0x00024268
   19888:	0002421f 	.word	0x0002421f
   1988c:	0002422c 	.word	0x0002422c
   19890:	00024213 	.word	0x00024213
   19894:	460b      	mov	r3, r1
   19896:	3101      	adds	r1, #1
   19898:	42af      	cmp	r7, r5
   1989a:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
   1989e:	54e6      	strb	r6, [r4, r3]
   198a0:	f884 6104 	strb.w	r6, [r4, #260]	; 0x104
   198a4:	f43f ae7c 	beq.w	195a0 <d_print_mod+0x12c>
   198a8:	29ff      	cmp	r1, #255	; 0xff
   198aa:	f815 6f01 	ldrb.w	r6, [r5, #1]!
   198ae:	d1f1      	bne.n	19894 <d_print_mod+0x420>
   198b0:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   198b4:	f884 80ff 	strb.w	r8, [r4, #255]	; 0xff
   198b8:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
   198bc:	4620      	mov	r0, r4
   198be:	4798      	blx	r3
   198c0:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   198c4:	3301      	adds	r3, #1
   198c6:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
   198ca:	2101      	movs	r1, #1
   198cc:	2300      	movs	r3, #0
   198ce:	e7e3      	b.n	19898 <d_print_mod+0x424>
   198d0:	f8d0 3128 	ldr.w	r3, [r0, #296]	; 0x128
   198d4:	f8c0 d128 	str.w	sp, [r0, #296]	; 0x128
   198d8:	462a      	mov	r2, r5
   198da:	9301      	str	r3, [sp, #4]
   198dc:	9500      	str	r5, [sp, #0]
   198de:	f7fd f815 	bl	1690c <d_print_comp_inner>
   198e2:	9b01      	ldr	r3, [sp, #4]
   198e4:	f8c4 3128 	str.w	r3, [r4, #296]	; 0x128
   198e8:	e65a      	b.n	195a0 <d_print_mod+0x12c>
   198ea:	f8d4 3128 	ldr.w	r3, [r4, #296]	; 0x128
   198ee:	686a      	ldr	r2, [r5, #4]
   198f0:	f8c4 d128 	str.w	sp, [r4, #296]	; 0x128
   198f4:	4641      	mov	r1, r8
   198f6:	4620      	mov	r0, r4
   198f8:	9301      	str	r3, [sp, #4]
   198fa:	9200      	str	r2, [sp, #0]
   198fc:	f7fd f806 	bl	1690c <d_print_comp_inner>
   19900:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
   19904:	9b01      	ldr	r3, [sp, #4]
   19906:	f8c4 3128 	str.w	r3, [r4, #296]	; 0x128
   1990a:	29ff      	cmp	r1, #255	; 0xff
   1990c:	d03a      	beq.n	19984 <d_print_mod+0x510>
   1990e:	1c4a      	adds	r2, r1, #1
   19910:	2329      	movs	r3, #41	; 0x29
   19912:	f8c4 2100 	str.w	r2, [r4, #256]	; 0x100
   19916:	5463      	strb	r3, [r4, r1]
   19918:	f884 3104 	strb.w	r3, [r4, #260]	; 0x104
   1991c:	e640      	b.n	195a0 <d_print_mod+0x12c>
   1991e:	2600      	movs	r6, #0
   19920:	4619      	mov	r1, r3
   19922:	f8d0 210c 	ldr.w	r2, [r0, #268]	; 0x10c
   19926:	f8d0 3108 	ldr.w	r3, [r0, #264]	; 0x108
   1992a:	f880 60ff 	strb.w	r6, [r0, #255]	; 0xff
   1992e:	4798      	blx	r3
   19930:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   19934:	f8c4 6100 	str.w	r6, [r4, #256]	; 0x100
   19938:	1c5a      	adds	r2, r3, #1
   1993a:	f8c4 2124 	str.w	r2, [r4, #292]	; 0x124
   1993e:	4633      	mov	r3, r6
   19940:	e6c7      	b.n	196d2 <d_print_mod+0x25e>
   19942:	2500      	movs	r5, #0
   19944:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   19948:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
   1994c:	f884 50ff 	strb.w	r5, [r4, #255]	; 0xff
   19950:	4620      	mov	r0, r4
   19952:	4798      	blx	r3
   19954:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   19958:	3301      	adds	r3, #1
   1995a:	4629      	mov	r1, r5
   1995c:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
   19960:	2201      	movs	r2, #1
   19962:	e636      	b.n	195d2 <d_print_mod+0x15e>
   19964:	2600      	movs	r6, #0
   19966:	f8d0 3108 	ldr.w	r3, [r0, #264]	; 0x108
   1996a:	f8d0 210c 	ldr.w	r2, [r0, #268]	; 0x10c
   1996e:	f880 60ff 	strb.w	r6, [r0, #255]	; 0xff
   19972:	4798      	blx	r3
   19974:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   19978:	3301      	adds	r3, #1
   1997a:	4631      	mov	r1, r6
   1997c:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
   19980:	2201      	movs	r2, #1
   19982:	e5f9      	b.n	19578 <d_print_mod+0x104>
   19984:	2500      	movs	r5, #0
   19986:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   1998a:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
   1998e:	f884 50ff 	strb.w	r5, [r4, #255]	; 0xff
   19992:	4620      	mov	r0, r4
   19994:	4798      	blx	r3
   19996:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   1999a:	3301      	adds	r3, #1
   1999c:	4629      	mov	r1, r5
   1999e:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
   199a2:	2201      	movs	r2, #1
   199a4:	e7b4      	b.n	19910 <d_print_mod+0x49c>
   199a6:	2500      	movs	r5, #0
   199a8:	4619      	mov	r1, r3
   199aa:	f8d0 210c 	ldr.w	r2, [r0, #268]	; 0x10c
   199ae:	f8d0 3108 	ldr.w	r3, [r0, #264]	; 0x108
   199b2:	f880 50ff 	strb.w	r5, [r0, #255]	; 0xff
   199b6:	4798      	blx	r3
   199b8:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   199bc:	f8c4 5100 	str.w	r5, [r4, #256]	; 0x100
   199c0:	1c5a      	adds	r2, r3, #1
   199c2:	f8c4 2124 	str.w	r2, [r4, #292]	; 0x124
   199c6:	462b      	mov	r3, r5
   199c8:	e740      	b.n	1984c <d_print_mod+0x3d8>
   199ca:	2500      	movs	r5, #0
   199cc:	4619      	mov	r1, r3
   199ce:	f8d0 210c 	ldr.w	r2, [r0, #268]	; 0x10c
   199d2:	f8d0 3108 	ldr.w	r3, [r0, #264]	; 0x108
   199d6:	f880 50ff 	strb.w	r5, [r0, #255]	; 0xff
   199da:	4798      	blx	r3
   199dc:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   199e0:	f8c4 5100 	str.w	r5, [r4, #256]	; 0x100
   199e4:	1c5a      	adds	r2, r3, #1
   199e6:	f8c4 2124 	str.w	r2, [r4, #292]	; 0x124
   199ea:	462b      	mov	r3, r5
   199ec:	e721      	b.n	19832 <d_print_mod+0x3be>
   199ee:	4619      	mov	r1, r3
   199f0:	f8d0 210c 	ldr.w	r2, [r0, #268]	; 0x10c
   199f4:	f8d0 3108 	ldr.w	r3, [r0, #264]	; 0x108
   199f8:	f880 50ff 	strb.w	r5, [r0, #255]	; 0xff
   199fc:	4798      	blx	r3
   199fe:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   19a02:	f8c4 5100 	str.w	r5, [r4, #256]	; 0x100
   19a06:	1c5a      	adds	r2, r3, #1
   19a08:	f8c4 2124 	str.w	r2, [r4, #292]	; 0x124
   19a0c:	462b      	mov	r3, r5
   19a0e:	e5d2      	b.n	195b6 <d_print_mod+0x142>

00019a10 <d_print_mod_list>:
   19a10:	2a00      	cmp	r2, #0
   19a12:	f000 80a1 	beq.w	19b58 <d_print_mod_list+0x148>
   19a16:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   19a1a:	461e      	mov	r6, r3
   19a1c:	f8d0 3118 	ldr.w	r3, [r0, #280]	; 0x118
   19a20:	b089      	sub	sp, #36	; 0x24
   19a22:	4605      	mov	r5, r0
   19a24:	bb43      	cbnz	r3, 19a78 <d_print_mod_list+0x68>
   19a26:	460f      	mov	r7, r1
   19a28:	4614      	mov	r4, r2
   19a2a:	f04f 0801 	mov.w	r8, #1
   19a2e:	e002      	b.n	19a36 <d_print_mod_list+0x26>
   19a30:	f8d5 3118 	ldr.w	r3, [r5, #280]	; 0x118
   19a34:	bb03      	cbnz	r3, 19a78 <d_print_mod_list+0x68>
   19a36:	68a3      	ldr	r3, [r4, #8]
   19a38:	b9db      	cbnz	r3, 19a72 <d_print_mod_list+0x62>
   19a3a:	6862      	ldr	r2, [r4, #4]
   19a3c:	7813      	ldrb	r3, [r2, #0]
   19a3e:	b92e      	cbnz	r6, 19a4c <d_print_mod_list+0x3c>
   19a40:	f1a3 011c 	sub.w	r1, r3, #28
   19a44:	2904      	cmp	r1, #4
   19a46:	d914      	bls.n	19a72 <d_print_mod_list+0x62>
   19a48:	2b4c      	cmp	r3, #76	; 0x4c
   19a4a:	d012      	beq.n	19a72 <d_print_mod_list+0x62>
   19a4c:	68e1      	ldr	r1, [r4, #12]
   19a4e:	f8c4 8008 	str.w	r8, [r4, #8]
   19a52:	2b29      	cmp	r3, #41	; 0x29
   19a54:	f8d5 9110 	ldr.w	r9, [r5, #272]	; 0x110
   19a58:	f8c5 1110 	str.w	r1, [r5, #272]	; 0x110
   19a5c:	d00f      	beq.n	19a7e <d_print_mod_list+0x6e>
   19a5e:	2b2a      	cmp	r3, #42	; 0x2a
   19a60:	d018      	beq.n	19a94 <d_print_mod_list+0x84>
   19a62:	2b02      	cmp	r3, #2
   19a64:	d021      	beq.n	19aaa <d_print_mod_list+0x9a>
   19a66:	4639      	mov	r1, r7
   19a68:	4628      	mov	r0, r5
   19a6a:	f7ff fd03 	bl	19474 <d_print_mod>
   19a6e:	f8c5 9110 	str.w	r9, [r5, #272]	; 0x110
   19a72:	6824      	ldr	r4, [r4, #0]
   19a74:	2c00      	cmp	r4, #0
   19a76:	d1db      	bne.n	19a30 <d_print_mod_list+0x20>
   19a78:	b009      	add	sp, #36	; 0x24
   19a7a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   19a7e:	6823      	ldr	r3, [r4, #0]
   19a80:	3208      	adds	r2, #8
   19a82:	4639      	mov	r1, r7
   19a84:	4628      	mov	r0, r5
   19a86:	f000 f9d9 	bl	19e3c <d_print_function_type.isra.11>
   19a8a:	f8c5 9110 	str.w	r9, [r5, #272]	; 0x110
   19a8e:	b009      	add	sp, #36	; 0x24
   19a90:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   19a94:	6823      	ldr	r3, [r4, #0]
   19a96:	3204      	adds	r2, #4
   19a98:	4639      	mov	r1, r7
   19a9a:	4628      	mov	r0, r5
   19a9c:	f000 f8f2 	bl	19c84 <d_print_array_type.isra.10>
   19aa0:	f8c5 9110 	str.w	r9, [r5, #272]	; 0x110
   19aa4:	b009      	add	sp, #36	; 0x24
   19aa6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   19aaa:	2600      	movs	r6, #0
   19aac:	f8d5 8114 	ldr.w	r8, [r5, #276]	; 0x114
   19ab0:	f8c5 6114 	str.w	r6, [r5, #276]	; 0x114
   19ab4:	6852      	ldr	r2, [r2, #4]
   19ab6:	4639      	mov	r1, r7
   19ab8:	4628      	mov	r0, r5
   19aba:	f7ff fccb 	bl	19454 <d_print_comp>
   19abe:	f017 0a04 	ands.w	sl, r7, #4
   19ac2:	f8c5 8114 	str.w	r8, [r5, #276]	; 0x114
   19ac6:	d023      	beq.n	19b10 <d_print_mod_list+0x100>
   19ac8:	f8d5 1100 	ldr.w	r1, [r5, #256]	; 0x100
   19acc:	29ff      	cmp	r1, #255	; 0xff
   19ace:	f000 80c1 	beq.w	19c54 <d_print_mod_list+0x244>
   19ad2:	1c4a      	adds	r2, r1, #1
   19ad4:	232e      	movs	r3, #46	; 0x2e
   19ad6:	f8c5 2100 	str.w	r2, [r5, #256]	; 0x100
   19ada:	546b      	strb	r3, [r5, r1]
   19adc:	f885 3104 	strb.w	r3, [r5, #260]	; 0x104
   19ae0:	6863      	ldr	r3, [r4, #4]
   19ae2:	689c      	ldr	r4, [r3, #8]
   19ae4:	7823      	ldrb	r3, [r4, #0]
   19ae6:	2b46      	cmp	r3, #70	; 0x46
   19ae8:	d037      	beq.n	19b5a <d_print_mod_list+0x14a>
   19aea:	f1a3 021c 	sub.w	r2, r3, #28
   19aee:	2a04      	cmp	r2, #4
   19af0:	d90b      	bls.n	19b0a <d_print_mod_list+0xfa>
   19af2:	2b4c      	cmp	r3, #76	; 0x4c
   19af4:	d009      	beq.n	19b0a <d_print_mod_list+0xfa>
   19af6:	4622      	mov	r2, r4
   19af8:	4639      	mov	r1, r7
   19afa:	4628      	mov	r0, r5
   19afc:	f7ff fcaa 	bl	19454 <d_print_comp>
   19b00:	f8c5 9110 	str.w	r9, [r5, #272]	; 0x110
   19b04:	b009      	add	sp, #36	; 0x24
   19b06:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   19b0a:	6864      	ldr	r4, [r4, #4]
   19b0c:	7823      	ldrb	r3, [r4, #0]
   19b0e:	e7ec      	b.n	19aea <d_print_mod_list+0xda>
   19b10:	4e58      	ldr	r6, [pc, #352]	; (19c74 <d_print_mod_list+0x264>)
   19b12:	f8d5 1100 	ldr.w	r1, [r5, #256]	; 0x100
   19b16:	f106 0b02 	add.w	fp, r6, #2
   19b1a:	e009      	b.n	19b30 <d_print_mod_list+0x120>
   19b1c:	460b      	mov	r3, r1
   19b1e:	3101      	adds	r1, #1
   19b20:	455e      	cmp	r6, fp
   19b22:	f8c5 1100 	str.w	r1, [r5, #256]	; 0x100
   19b26:	f805 8003 	strb.w	r8, [r5, r3]
   19b2a:	f885 8104 	strb.w	r8, [r5, #260]	; 0x104
   19b2e:	d0d7      	beq.n	19ae0 <d_print_mod_list+0xd0>
   19b30:	29ff      	cmp	r1, #255	; 0xff
   19b32:	f816 8b01 	ldrb.w	r8, [r6], #1
   19b36:	d1f1      	bne.n	19b1c <d_print_mod_list+0x10c>
   19b38:	f8d5 3108 	ldr.w	r3, [r5, #264]	; 0x108
   19b3c:	f885 a0ff 	strb.w	sl, [r5, #255]	; 0xff
   19b40:	f8d5 210c 	ldr.w	r2, [r5, #268]	; 0x10c
   19b44:	4628      	mov	r0, r5
   19b46:	4798      	blx	r3
   19b48:	f8d5 3124 	ldr.w	r3, [r5, #292]	; 0x124
   19b4c:	3301      	adds	r3, #1
   19b4e:	f8c5 3124 	str.w	r3, [r5, #292]	; 0x124
   19b52:	2101      	movs	r1, #1
   19b54:	2300      	movs	r3, #0
   19b56:	e7e3      	b.n	19b20 <d_print_mod_list+0x110>
   19b58:	4770      	bx	lr
   19b5a:	4e47      	ldr	r6, [pc, #284]	; (19c78 <d_print_mod_list+0x268>)
   19b5c:	f8d5 1100 	ldr.w	r1, [r5, #256]	; 0x100
   19b60:	f106 0a0d 	add.w	sl, r6, #13
   19b64:	f04f 0b00 	mov.w	fp, #0
   19b68:	e009      	b.n	19b7e <d_print_mod_list+0x16e>
   19b6a:	460b      	mov	r3, r1
   19b6c:	3101      	adds	r1, #1
   19b6e:	45b2      	cmp	sl, r6
   19b70:	f8c5 1100 	str.w	r1, [r5, #256]	; 0x100
   19b74:	f805 8003 	strb.w	r8, [r5, r3]
   19b78:	f885 8104 	strb.w	r8, [r5, #260]	; 0x104
   19b7c:	d013      	beq.n	19ba6 <d_print_mod_list+0x196>
   19b7e:	29ff      	cmp	r1, #255	; 0xff
   19b80:	f816 8b01 	ldrb.w	r8, [r6], #1
   19b84:	d1f1      	bne.n	19b6a <d_print_mod_list+0x15a>
   19b86:	f8d5 3108 	ldr.w	r3, [r5, #264]	; 0x108
   19b8a:	f885 b0ff 	strb.w	fp, [r5, #255]	; 0xff
   19b8e:	f8d5 210c 	ldr.w	r2, [r5, #268]	; 0x10c
   19b92:	4628      	mov	r0, r5
   19b94:	4798      	blx	r3
   19b96:	f8d5 3124 	ldr.w	r3, [r5, #292]	; 0x124
   19b9a:	3301      	adds	r3, #1
   19b9c:	f8c5 3124 	str.w	r3, [r5, #292]	; 0x124
   19ba0:	2101      	movs	r1, #1
   19ba2:	2300      	movs	r3, #0
   19ba4:	e7e3      	b.n	19b6e <d_print_mod_list+0x15e>
   19ba6:	68a2      	ldr	r2, [r4, #8]
   19ba8:	4934      	ldr	r1, [pc, #208]	; (19c7c <d_print_mod_list+0x26c>)
   19baa:	3201      	adds	r2, #1
   19bac:	a801      	add	r0, sp, #4
   19bae:	f004 fda5 	bl	1e6fc <sprintf>
   19bb2:	a801      	add	r0, sp, #4
   19bb4:	f004 ff44 	bl	1ea40 <strlen>
   19bb8:	b328      	cbz	r0, 19c06 <d_print_mod_list+0x1f6>
   19bba:	ae01      	add	r6, sp, #4
   19bbc:	f8d5 1100 	ldr.w	r1, [r5, #256]	; 0x100
   19bc0:	eb06 0a00 	add.w	sl, r6, r0
   19bc4:	f04f 0b00 	mov.w	fp, #0
   19bc8:	e009      	b.n	19bde <d_print_mod_list+0x1ce>
   19bca:	460b      	mov	r3, r1
   19bcc:	3101      	adds	r1, #1
   19bce:	45b2      	cmp	sl, r6
   19bd0:	f8c5 1100 	str.w	r1, [r5, #256]	; 0x100
   19bd4:	f805 8003 	strb.w	r8, [r5, r3]
   19bd8:	f885 8104 	strb.w	r8, [r5, #260]	; 0x104
   19bdc:	d015      	beq.n	19c0a <d_print_mod_list+0x1fa>
   19bde:	29ff      	cmp	r1, #255	; 0xff
   19be0:	f816 8b01 	ldrb.w	r8, [r6], #1
   19be4:	d1f1      	bne.n	19bca <d_print_mod_list+0x1ba>
   19be6:	f8d5 3108 	ldr.w	r3, [r5, #264]	; 0x108
   19bea:	f885 b0ff 	strb.w	fp, [r5, #255]	; 0xff
   19bee:	f8d5 210c 	ldr.w	r2, [r5, #268]	; 0x10c
   19bf2:	4628      	mov	r0, r5
   19bf4:	4798      	blx	r3
   19bf6:	f8d5 3124 	ldr.w	r3, [r5, #292]	; 0x124
   19bfa:	3301      	adds	r3, #1
   19bfc:	f8c5 3124 	str.w	r3, [r5, #292]	; 0x124
   19c00:	2101      	movs	r1, #1
   19c02:	2300      	movs	r3, #0
   19c04:	e7e3      	b.n	19bce <d_print_mod_list+0x1be>
   19c06:	f8d5 1100 	ldr.w	r1, [r5, #256]	; 0x100
   19c0a:	4e1d      	ldr	r6, [pc, #116]	; (19c80 <d_print_mod_list+0x270>)
   19c0c:	f04f 0b00 	mov.w	fp, #0
   19c10:	f106 0a03 	add.w	sl, r6, #3
   19c14:	e00a      	b.n	19c2c <d_print_mod_list+0x21c>
   19c16:	460b      	mov	r3, r1
   19c18:	3101      	adds	r1, #1
   19c1a:	45b2      	cmp	sl, r6
   19c1c:	f8c5 1100 	str.w	r1, [r5, #256]	; 0x100
   19c20:	f805 8003 	strb.w	r8, [r5, r3]
   19c24:	f885 8104 	strb.w	r8, [r5, #260]	; 0x104
   19c28:	f43f af6f 	beq.w	19b0a <d_print_mod_list+0xfa>
   19c2c:	29ff      	cmp	r1, #255	; 0xff
   19c2e:	f816 8b01 	ldrb.w	r8, [r6], #1
   19c32:	d1f0      	bne.n	19c16 <d_print_mod_list+0x206>
   19c34:	f8d5 3108 	ldr.w	r3, [r5, #264]	; 0x108
   19c38:	f885 b0ff 	strb.w	fp, [r5, #255]	; 0xff
   19c3c:	f8d5 210c 	ldr.w	r2, [r5, #268]	; 0x10c
   19c40:	4628      	mov	r0, r5
   19c42:	4798      	blx	r3
   19c44:	f8d5 3124 	ldr.w	r3, [r5, #292]	; 0x124
   19c48:	3301      	adds	r3, #1
   19c4a:	f8c5 3124 	str.w	r3, [r5, #292]	; 0x124
   19c4e:	2101      	movs	r1, #1
   19c50:	2300      	movs	r3, #0
   19c52:	e7e2      	b.n	19c1a <d_print_mod_list+0x20a>
   19c54:	f8d5 3108 	ldr.w	r3, [r5, #264]	; 0x108
   19c58:	f8d5 210c 	ldr.w	r2, [r5, #268]	; 0x10c
   19c5c:	f885 60ff 	strb.w	r6, [r5, #255]	; 0xff
   19c60:	4628      	mov	r0, r5
   19c62:	4798      	blx	r3
   19c64:	f8d5 3124 	ldr.w	r3, [r5, #292]	; 0x124
   19c68:	3301      	adds	r3, #1
   19c6a:	4631      	mov	r1, r6
   19c6c:	f8c5 3124 	str.w	r3, [r5, #292]	; 0x124
   19c70:	2201      	movs	r2, #1
   19c72:	e72f      	b.n	19ad4 <d_print_mod_list+0xc4>
   19c74:	00023f94 	.word	0x00023f94
   19c78:	00023f98 	.word	0x00023f98
   19c7c:	00023f44 	.word	0x00023f44
   19c80:	00023fa8 	.word	0x00023fa8

00019c84 <d_print_array_type.isra.10>:
   19c84:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   19c88:	4604      	mov	r4, r0
   19c8a:	460f      	mov	r7, r1
   19c8c:	4690      	mov	r8, r2
   19c8e:	b163      	cbz	r3, 19caa <d_print_array_type.isra.10+0x26>
   19c90:	461e      	mov	r6, r3
   19c92:	461a      	mov	r2, r3
   19c94:	6893      	ldr	r3, [r2, #8]
   19c96:	b393      	cbz	r3, 19cfe <d_print_array_type.isra.10+0x7a>
   19c98:	6812      	ldr	r2, [r2, #0]
   19c9a:	2a00      	cmp	r2, #0
   19c9c:	d1fa      	bne.n	19c94 <d_print_array_type.isra.10+0x10>
   19c9e:	4613      	mov	r3, r2
   19ca0:	4639      	mov	r1, r7
   19ca2:	4632      	mov	r2, r6
   19ca4:	4620      	mov	r0, r4
   19ca6:	f7ff feb3 	bl	19a10 <d_print_mod_list>
   19caa:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
   19cae:	29ff      	cmp	r1, #255	; 0xff
   19cb0:	f000 808d 	beq.w	19dce <d_print_array_type.isra.10+0x14a>
   19cb4:	1c4b      	adds	r3, r1, #1
   19cb6:	2220      	movs	r2, #32
   19cb8:	2bff      	cmp	r3, #255	; 0xff
   19cba:	f8c4 3100 	str.w	r3, [r4, #256]	; 0x100
   19cbe:	5462      	strb	r2, [r4, r1]
   19cc0:	f884 2104 	strb.w	r2, [r4, #260]	; 0x104
   19cc4:	d068      	beq.n	19d98 <d_print_array_type.isra.10+0x114>
   19cc6:	225b      	movs	r2, #91	; 0x5b
   19cc8:	1c59      	adds	r1, r3, #1
   19cca:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
   19cce:	54e2      	strb	r2, [r4, r3]
   19cd0:	f884 2104 	strb.w	r2, [r4, #260]	; 0x104
   19cd4:	f8d8 2000 	ldr.w	r2, [r8]
   19cd8:	b12a      	cbz	r2, 19ce6 <d_print_array_type.isra.10+0x62>
   19cda:	4639      	mov	r1, r7
   19cdc:	4620      	mov	r0, r4
   19cde:	f7ff fbb9 	bl	19454 <d_print_comp>
   19ce2:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
   19ce6:	29ff      	cmp	r1, #255	; 0xff
   19ce8:	f000 8082 	beq.w	19df0 <d_print_array_type.isra.10+0x16c>
   19cec:	1c4a      	adds	r2, r1, #1
   19cee:	235d      	movs	r3, #93	; 0x5d
   19cf0:	f8c4 2100 	str.w	r2, [r4, #256]	; 0x100
   19cf4:	5463      	strb	r3, [r4, r1]
   19cf6:	f884 3104 	strb.w	r3, [r4, #260]	; 0x104
   19cfa:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   19cfe:	6852      	ldr	r2, [r2, #4]
   19d00:	7812      	ldrb	r2, [r2, #0]
   19d02:	2a2a      	cmp	r2, #42	; 0x2a
   19d04:	d03f      	beq.n	19d86 <d_print_array_type.isra.10+0x102>
   19d06:	f8df 9130 	ldr.w	r9, [pc, #304]	; 19e38 <d_print_array_type.isra.10+0x1b4>
   19d0a:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
   19d0e:	461d      	mov	r5, r3
   19d10:	f109 0b02 	add.w	fp, r9, #2
   19d14:	e00a      	b.n	19d2c <d_print_array_type.isra.10+0xa8>
   19d16:	460b      	mov	r3, r1
   19d18:	45cb      	cmp	fp, r9
   19d1a:	f101 0101 	add.w	r1, r1, #1
   19d1e:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
   19d22:	f804 a003 	strb.w	sl, [r4, r3]
   19d26:	f884 a104 	strb.w	sl, [r4, #260]	; 0x104
   19d2a:	d01a      	beq.n	19d62 <d_print_array_type.isra.10+0xde>
   19d2c:	29ff      	cmp	r1, #255	; 0xff
   19d2e:	f819 ab01 	ldrb.w	sl, [r9], #1
   19d32:	d1f0      	bne.n	19d16 <d_print_array_type.isra.10+0x92>
   19d34:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   19d38:	f884 50ff 	strb.w	r5, [r4, #255]	; 0xff
   19d3c:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
   19d40:	4620      	mov	r0, r4
   19d42:	4798      	blx	r3
   19d44:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   19d48:	3301      	adds	r3, #1
   19d4a:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
   19d4e:	2300      	movs	r3, #0
   19d50:	2101      	movs	r1, #1
   19d52:	45cb      	cmp	fp, r9
   19d54:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
   19d58:	f804 a003 	strb.w	sl, [r4, r3]
   19d5c:	f884 a104 	strb.w	sl, [r4, #260]	; 0x104
   19d60:	d1e4      	bne.n	19d2c <d_print_array_type.isra.10+0xa8>
   19d62:	2300      	movs	r3, #0
   19d64:	4632      	mov	r2, r6
   19d66:	4639      	mov	r1, r7
   19d68:	4620      	mov	r0, r4
   19d6a:	f7ff fe51 	bl	19a10 <d_print_mod_list>
   19d6e:	f8d4 3100 	ldr.w	r3, [r4, #256]	; 0x100
   19d72:	2bff      	cmp	r3, #255	; 0xff
   19d74:	d04d      	beq.n	19e12 <d_print_array_type.isra.10+0x18e>
   19d76:	1c59      	adds	r1, r3, #1
   19d78:	2229      	movs	r2, #41	; 0x29
   19d7a:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
   19d7e:	54e2      	strb	r2, [r4, r3]
   19d80:	f884 2104 	strb.w	r2, [r4, #260]	; 0x104
   19d84:	e793      	b.n	19cae <d_print_array_type.isra.10+0x2a>
   19d86:	4632      	mov	r2, r6
   19d88:	4639      	mov	r1, r7
   19d8a:	4620      	mov	r0, r4
   19d8c:	f7ff fe40 	bl	19a10 <d_print_mod_list>
   19d90:	f8d4 3100 	ldr.w	r3, [r4, #256]	; 0x100
   19d94:	2bff      	cmp	r3, #255	; 0xff
   19d96:	d196      	bne.n	19cc6 <d_print_array_type.isra.10+0x42>
   19d98:	2200      	movs	r2, #0
   19d9a:	4619      	mov	r1, r3
   19d9c:	f884 20ff 	strb.w	r2, [r4, #255]	; 0xff
   19da0:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   19da4:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
   19da8:	4620      	mov	r0, r4
   19daa:	4798      	blx	r3
   19dac:	235b      	movs	r3, #91	; 0x5b
   19dae:	7023      	strb	r3, [r4, #0]
   19db0:	f884 3104 	strb.w	r3, [r4, #260]	; 0x104
   19db4:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   19db8:	f8d8 2000 	ldr.w	r2, [r8]
   19dbc:	3301      	adds	r3, #1
   19dbe:	2101      	movs	r1, #1
   19dc0:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
   19dc4:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
   19dc8:	2a00      	cmp	r2, #0
   19dca:	d186      	bne.n	19cda <d_print_array_type.isra.10+0x56>
   19dcc:	e78e      	b.n	19cec <d_print_array_type.isra.10+0x68>
   19dce:	2500      	movs	r5, #0
   19dd0:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   19dd4:	f884 50ff 	strb.w	r5, [r4, #255]	; 0xff
   19dd8:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
   19ddc:	4620      	mov	r0, r4
   19dde:	4798      	blx	r3
   19de0:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   19de4:	3301      	adds	r3, #1
   19de6:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
   19dea:	4629      	mov	r1, r5
   19dec:	2301      	movs	r3, #1
   19dee:	e762      	b.n	19cb6 <d_print_array_type.isra.10+0x32>
   19df0:	2500      	movs	r5, #0
   19df2:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   19df6:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
   19dfa:	f884 50ff 	strb.w	r5, [r4, #255]	; 0xff
   19dfe:	4620      	mov	r0, r4
   19e00:	4798      	blx	r3
   19e02:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   19e06:	3301      	adds	r3, #1
   19e08:	4629      	mov	r1, r5
   19e0a:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
   19e0e:	2201      	movs	r2, #1
   19e10:	e76d      	b.n	19cee <d_print_array_type.isra.10+0x6a>
   19e12:	2500      	movs	r5, #0
   19e14:	4619      	mov	r1, r3
   19e16:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
   19e1a:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   19e1e:	f884 50ff 	strb.w	r5, [r4, #255]	; 0xff
   19e22:	4620      	mov	r0, r4
   19e24:	4798      	blx	r3
   19e26:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   19e2a:	1c5a      	adds	r2, r3, #1
   19e2c:	f8c4 2124 	str.w	r2, [r4, #292]	; 0x124
   19e30:	462b      	mov	r3, r5
   19e32:	2101      	movs	r1, #1
   19e34:	e7a0      	b.n	19d78 <d_print_array_type.isra.10+0xf4>
   19e36:	bf00      	nop
   19e38:	0002418c 	.word	0x0002418c

00019e3c <d_print_function_type.isra.11>:
   19e3c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   19e40:	4604      	mov	r4, r0
   19e42:	b083      	sub	sp, #12
   19e44:	460e      	mov	r6, r1
   19e46:	4617      	mov	r7, r2
   19e48:	461d      	mov	r5, r3
   19e4a:	b34b      	cbz	r3, 19ea0 <d_print_function_type.isra.11+0x64>
   19e4c:	689b      	ldr	r3, [r3, #8]
   19e4e:	bb3b      	cbnz	r3, 19ea0 <d_print_function_type.isra.11+0x64>
   19e50:	462a      	mov	r2, r5
   19e52:	2001      	movs	r0, #1
   19e54:	f8df e1c8 	ldr.w	lr, [pc, #456]	; 1a020 <d_print_function_type.isra.11+0x1e4>
   19e58:	e006      	b.n	19e68 <d_print_function_type.isra.11+0x2c>
   19e5a:	f411 6f60 	tst.w	r1, #3584	; 0xe00
   19e5e:	d15a      	bne.n	19f16 <d_print_function_type.isra.11+0xda>
   19e60:	6812      	ldr	r2, [r2, #0]
   19e62:	b1ea      	cbz	r2, 19ea0 <d_print_function_type.isra.11+0x64>
   19e64:	6893      	ldr	r3, [r2, #8]
   19e66:	b9db      	cbnz	r3, 19ea0 <d_print_function_type.isra.11+0x64>
   19e68:	6853      	ldr	r3, [r2, #4]
   19e6a:	781b      	ldrb	r3, [r3, #0]
   19e6c:	3b19      	subs	r3, #25
   19e6e:	b2db      	uxtb	r3, r3
   19e70:	2b12      	cmp	r3, #18
   19e72:	fa00 f103 	lsl.w	r1, r0, r3
   19e76:	d8f3      	bhi.n	19e60 <d_print_function_type.isra.11+0x24>
   19e78:	ea11 0f0e 	tst.w	r1, lr
   19e7c:	d0ed      	beq.n	19e5a <d_print_function_type.isra.11+0x1e>
   19e7e:	f894 3104 	ldrb.w	r3, [r4, #260]	; 0x104
   19e82:	2b20      	cmp	r3, #32
   19e84:	d04d      	beq.n	19f22 <d_print_function_type.isra.11+0xe6>
   19e86:	f8d4 3100 	ldr.w	r3, [r4, #256]	; 0x100
   19e8a:	2bff      	cmp	r3, #255	; 0xff
   19e8c:	f000 80b4 	beq.w	19ff8 <d_print_function_type.isra.11+0x1bc>
   19e90:	1c59      	adds	r1, r3, #1
   19e92:	2220      	movs	r2, #32
   19e94:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
   19e98:	54e2      	strb	r2, [r4, r3]
   19e9a:	f884 2104 	strb.w	r2, [r4, #260]	; 0x104
   19e9e:	e042      	b.n	19f26 <d_print_function_type.isra.11+0xea>
   19ea0:	2300      	movs	r3, #0
   19ea2:	f8d4 8114 	ldr.w	r8, [r4, #276]	; 0x114
   19ea6:	f8c4 3114 	str.w	r3, [r4, #276]	; 0x114
   19eaa:	4631      	mov	r1, r6
   19eac:	462a      	mov	r2, r5
   19eae:	4620      	mov	r0, r4
   19eb0:	f7ff fdae 	bl	19a10 <d_print_mod_list>
   19eb4:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
   19eb8:	29ff      	cmp	r1, #255	; 0xff
   19eba:	d056      	beq.n	19f6a <d_print_function_type.isra.11+0x12e>
   19ebc:	1c4b      	adds	r3, r1, #1
   19ebe:	2228      	movs	r2, #40	; 0x28
   19ec0:	f8c4 3100 	str.w	r3, [r4, #256]	; 0x100
   19ec4:	5462      	strb	r2, [r4, r1]
   19ec6:	f884 2104 	strb.w	r2, [r4, #260]	; 0x104
   19eca:	6838      	ldr	r0, [r7, #0]
   19ecc:	b178      	cbz	r0, 19eee <d_print_function_type.isra.11+0xb2>
   19ece:	f8d4 3128 	ldr.w	r3, [r4, #296]	; 0x128
   19ed2:	9000      	str	r0, [sp, #0]
   19ed4:	4602      	mov	r2, r0
   19ed6:	f8c4 d128 	str.w	sp, [r4, #296]	; 0x128
   19eda:	4631      	mov	r1, r6
   19edc:	4620      	mov	r0, r4
   19ede:	9301      	str	r3, [sp, #4]
   19ee0:	f7fc fd14 	bl	1690c <d_print_comp_inner>
   19ee4:	9a01      	ldr	r2, [sp, #4]
   19ee6:	f8d4 3100 	ldr.w	r3, [r4, #256]	; 0x100
   19eea:	f8c4 2128 	str.w	r2, [r4, #296]	; 0x128
   19eee:	2bff      	cmp	r3, #255	; 0xff
   19ef0:	d04d      	beq.n	19f8e <d_print_function_type.isra.11+0x152>
   19ef2:	1c5a      	adds	r2, r3, #1
   19ef4:	2029      	movs	r0, #41	; 0x29
   19ef6:	f8c4 2100 	str.w	r2, [r4, #256]	; 0x100
   19efa:	4631      	mov	r1, r6
   19efc:	54e0      	strb	r0, [r4, r3]
   19efe:	462a      	mov	r2, r5
   19f00:	f884 0104 	strb.w	r0, [r4, #260]	; 0x104
   19f04:	2301      	movs	r3, #1
   19f06:	4620      	mov	r0, r4
   19f08:	f7ff fd82 	bl	19a10 <d_print_mod_list>
   19f0c:	f8c4 8114 	str.w	r8, [r4, #276]	; 0x114
   19f10:	b003      	add	sp, #12
   19f12:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   19f16:	f894 3104 	ldrb.w	r3, [r4, #260]	; 0x104
   19f1a:	f003 02fd 	and.w	r2, r3, #253	; 0xfd
   19f1e:	2a28      	cmp	r2, #40	; 0x28
   19f20:	d1af      	bne.n	19e82 <d_print_function_type.isra.11+0x46>
   19f22:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
   19f26:	29ff      	cmp	r1, #255	; 0xff
   19f28:	d054      	beq.n	19fd4 <d_print_function_type.isra.11+0x198>
   19f2a:	1c4a      	adds	r2, r1, #1
   19f2c:	2328      	movs	r3, #40	; 0x28
   19f2e:	f8c4 2100 	str.w	r2, [r4, #256]	; 0x100
   19f32:	5463      	strb	r3, [r4, r1]
   19f34:	f04f 0900 	mov.w	r9, #0
   19f38:	f884 3104 	strb.w	r3, [r4, #260]	; 0x104
   19f3c:	f8d4 8114 	ldr.w	r8, [r4, #276]	; 0x114
   19f40:	f8c4 9114 	str.w	r9, [r4, #276]	; 0x114
   19f44:	464b      	mov	r3, r9
   19f46:	462a      	mov	r2, r5
   19f48:	4631      	mov	r1, r6
   19f4a:	4620      	mov	r0, r4
   19f4c:	f7ff fd60 	bl	19a10 <d_print_mod_list>
   19f50:	f8d4 3100 	ldr.w	r3, [r4, #256]	; 0x100
   19f54:	2bff      	cmp	r3, #255	; 0xff
   19f56:	d02c      	beq.n	19fb2 <d_print_function_type.isra.11+0x176>
   19f58:	1c59      	adds	r1, r3, #1
   19f5a:	2229      	movs	r2, #41	; 0x29
   19f5c:	29ff      	cmp	r1, #255	; 0xff
   19f5e:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
   19f62:	54e2      	strb	r2, [r4, r3]
   19f64:	f884 2104 	strb.w	r2, [r4, #260]	; 0x104
   19f68:	d1a8      	bne.n	19ebc <d_print_function_type.isra.11+0x80>
   19f6a:	f04f 0900 	mov.w	r9, #0
   19f6e:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   19f72:	f884 90ff 	strb.w	r9, [r4, #255]	; 0xff
   19f76:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
   19f7a:	4620      	mov	r0, r4
   19f7c:	4798      	blx	r3
   19f7e:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   19f82:	3301      	adds	r3, #1
   19f84:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
   19f88:	4649      	mov	r1, r9
   19f8a:	2301      	movs	r3, #1
   19f8c:	e797      	b.n	19ebe <d_print_function_type.isra.11+0x82>
   19f8e:	2700      	movs	r7, #0
   19f90:	4619      	mov	r1, r3
   19f92:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
   19f96:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   19f9a:	f884 70ff 	strb.w	r7, [r4, #255]	; 0xff
   19f9e:	4620      	mov	r0, r4
   19fa0:	4798      	blx	r3
   19fa2:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   19fa6:	1c5a      	adds	r2, r3, #1
   19fa8:	f8c4 2124 	str.w	r2, [r4, #292]	; 0x124
   19fac:	463b      	mov	r3, r7
   19fae:	2201      	movs	r2, #1
   19fb0:	e7a0      	b.n	19ef4 <d_print_function_type.isra.11+0xb8>
   19fb2:	4619      	mov	r1, r3
   19fb4:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
   19fb8:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   19fbc:	f884 90ff 	strb.w	r9, [r4, #255]	; 0xff
   19fc0:	4620      	mov	r0, r4
   19fc2:	4798      	blx	r3
   19fc4:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   19fc8:	1c5a      	adds	r2, r3, #1
   19fca:	f8c4 2124 	str.w	r2, [r4, #292]	; 0x124
   19fce:	464b      	mov	r3, r9
   19fd0:	2101      	movs	r1, #1
   19fd2:	e7c2      	b.n	19f5a <d_print_function_type.isra.11+0x11e>
   19fd4:	f04f 0800 	mov.w	r8, #0
   19fd8:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   19fdc:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
   19fe0:	f884 80ff 	strb.w	r8, [r4, #255]	; 0xff
   19fe4:	4620      	mov	r0, r4
   19fe6:	4798      	blx	r3
   19fe8:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   19fec:	3301      	adds	r3, #1
   19fee:	4641      	mov	r1, r8
   19ff0:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
   19ff4:	2201      	movs	r2, #1
   19ff6:	e799      	b.n	19f2c <d_print_function_type.isra.11+0xf0>
   19ff8:	f04f 0800 	mov.w	r8, #0
   19ffc:	4619      	mov	r1, r3
   19ffe:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
   1a002:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   1a006:	f884 80ff 	strb.w	r8, [r4, #255]	; 0xff
   1a00a:	4620      	mov	r0, r4
   1a00c:	4798      	blx	r3
   1a00e:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   1a012:	1c5a      	adds	r2, r3, #1
   1a014:	f8c4 2124 	str.w	r2, [r4, #292]	; 0x124
   1a018:	4643      	mov	r3, r8
   1a01a:	2101      	movs	r1, #1
   1a01c:	e739      	b.n	19e92 <d_print_function_type.isra.11+0x56>
   1a01e:	bf00      	nop
   1a020:	00043107 	.word	0x00043107

0001a024 <d_print_expr_op>:
   1a024:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1a028:	7815      	ldrb	r5, [r2, #0]
   1a02a:	2d31      	cmp	r5, #49	; 0x31
   1a02c:	b082      	sub	sp, #8
   1a02e:	4613      	mov	r3, r2
   1a030:	4604      	mov	r4, r0
   1a032:	d00d      	beq.n	1a050 <d_print_expr_op+0x2c>
   1a034:	f8d0 5128 	ldr.w	r5, [r0, #296]	; 0x128
   1a038:	f8c0 d128 	str.w	sp, [r0, #296]	; 0x128
   1a03c:	e88d 0028 	stmia.w	sp, {r3, r5}
   1a040:	f7fc fc64 	bl	1690c <d_print_comp_inner>
   1a044:	9b01      	ldr	r3, [sp, #4]
   1a046:	f8c4 3128 	str.w	r3, [r4, #296]	; 0x128
   1a04a:	b002      	add	sp, #8
   1a04c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   1a050:	6853      	ldr	r3, [r2, #4]
   1a052:	689f      	ldr	r7, [r3, #8]
   1a054:	685d      	ldr	r5, [r3, #4]
   1a056:	2f00      	cmp	r7, #0
   1a058:	d0f7      	beq.n	1a04a <d_print_expr_op+0x26>
   1a05a:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
   1a05e:	442f      	add	r7, r5
   1a060:	f04f 0800 	mov.w	r8, #0
   1a064:	e008      	b.n	1a078 <d_print_expr_op+0x54>
   1a066:	460b      	mov	r3, r1
   1a068:	3101      	adds	r1, #1
   1a06a:	42bd      	cmp	r5, r7
   1a06c:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
   1a070:	54e6      	strb	r6, [r4, r3]
   1a072:	f884 6104 	strb.w	r6, [r4, #260]	; 0x104
   1a076:	d0e8      	beq.n	1a04a <d_print_expr_op+0x26>
   1a078:	29ff      	cmp	r1, #255	; 0xff
   1a07a:	f815 6b01 	ldrb.w	r6, [r5], #1
   1a07e:	d1f2      	bne.n	1a066 <d_print_expr_op+0x42>
   1a080:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   1a084:	f884 80ff 	strb.w	r8, [r4, #255]	; 0xff
   1a088:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
   1a08c:	4620      	mov	r0, r4
   1a08e:	4798      	blx	r3
   1a090:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   1a094:	3301      	adds	r3, #1
   1a096:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
   1a09a:	2101      	movs	r1, #1
   1a09c:	2300      	movs	r3, #0
   1a09e:	e7e4      	b.n	1a06a <d_print_expr_op+0x46>

0001a0a0 <d_print_subexpr>:
   1a0a0:	b5f0      	push	{r4, r5, r6, r7, lr}
   1a0a2:	7813      	ldrb	r3, [r2, #0]
   1a0a4:	2b01      	cmp	r3, #1
   1a0a6:	b083      	sub	sp, #12
   1a0a8:	4615      	mov	r5, r2
   1a0aa:	460e      	mov	r6, r1
   1a0ac:	4604      	mov	r4, r0
   1a0ae:	d929      	bls.n	1a104 <d_print_subexpr+0x64>
   1a0b0:	2b30      	cmp	r3, #48	; 0x30
   1a0b2:	d027      	beq.n	1a104 <d_print_subexpr+0x64>
   1a0b4:	2b06      	cmp	r3, #6
   1a0b6:	d025      	beq.n	1a104 <d_print_subexpr+0x64>
   1a0b8:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
   1a0bc:	29ff      	cmp	r1, #255	; 0xff
   1a0be:	d031      	beq.n	1a124 <d_print_subexpr+0x84>
   1a0c0:	1c4a      	adds	r2, r1, #1
   1a0c2:	2328      	movs	r3, #40	; 0x28
   1a0c4:	f8c4 2100 	str.w	r2, [r4, #256]	; 0x100
   1a0c8:	5463      	strb	r3, [r4, r1]
   1a0ca:	462a      	mov	r2, r5
   1a0cc:	4631      	mov	r1, r6
   1a0ce:	f884 3104 	strb.w	r3, [r4, #260]	; 0x104
   1a0d2:	4620      	mov	r0, r4
   1a0d4:	f8d4 3128 	ldr.w	r3, [r4, #296]	; 0x128
   1a0d8:	f8c4 d128 	str.w	sp, [r4, #296]	; 0x128
   1a0dc:	9301      	str	r3, [sp, #4]
   1a0de:	9500      	str	r5, [sp, #0]
   1a0e0:	f7fc fc14 	bl	1690c <d_print_comp_inner>
   1a0e4:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
   1a0e8:	9b01      	ldr	r3, [sp, #4]
   1a0ea:	f8c4 3128 	str.w	r3, [r4, #296]	; 0x128
   1a0ee:	29ff      	cmp	r1, #255	; 0xff
   1a0f0:	d028      	beq.n	1a144 <d_print_subexpr+0xa4>
   1a0f2:	1c4a      	adds	r2, r1, #1
   1a0f4:	2329      	movs	r3, #41	; 0x29
   1a0f6:	f8c4 2100 	str.w	r2, [r4, #256]	; 0x100
   1a0fa:	5463      	strb	r3, [r4, r1]
   1a0fc:	f884 3104 	strb.w	r3, [r4, #260]	; 0x104
   1a100:	b003      	add	sp, #12
   1a102:	bdf0      	pop	{r4, r5, r6, r7, pc}
   1a104:	f8d4 3128 	ldr.w	r3, [r4, #296]	; 0x128
   1a108:	f8c4 d128 	str.w	sp, [r4, #296]	; 0x128
   1a10c:	4631      	mov	r1, r6
   1a10e:	462a      	mov	r2, r5
   1a110:	4620      	mov	r0, r4
   1a112:	9301      	str	r3, [sp, #4]
   1a114:	9500      	str	r5, [sp, #0]
   1a116:	f7fc fbf9 	bl	1690c <d_print_comp_inner>
   1a11a:	9b01      	ldr	r3, [sp, #4]
   1a11c:	f8c4 3128 	str.w	r3, [r4, #296]	; 0x128
   1a120:	b003      	add	sp, #12
   1a122:	bdf0      	pop	{r4, r5, r6, r7, pc}
   1a124:	2700      	movs	r7, #0
   1a126:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   1a12a:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
   1a12e:	f884 70ff 	strb.w	r7, [r4, #255]	; 0xff
   1a132:	4798      	blx	r3
   1a134:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   1a138:	3301      	adds	r3, #1
   1a13a:	4639      	mov	r1, r7
   1a13c:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
   1a140:	2201      	movs	r2, #1
   1a142:	e7be      	b.n	1a0c2 <d_print_subexpr+0x22>
   1a144:	2500      	movs	r5, #0
   1a146:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   1a14a:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
   1a14e:	f884 50ff 	strb.w	r5, [r4, #255]	; 0xff
   1a152:	4620      	mov	r0, r4
   1a154:	4798      	blx	r3
   1a156:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   1a15a:	3301      	adds	r3, #1
   1a15c:	4629      	mov	r1, r5
   1a15e:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
   1a162:	2201      	movs	r2, #1
   1a164:	e7c6      	b.n	1a0f4 <d_print_subexpr+0x54>
   1a166:	bf00      	nop

0001a168 <d_maybe_print_fold_expression.isra.15>:
   1a168:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1a16c:	6852      	ldr	r2, [r2, #4]
   1a16e:	6812      	ldr	r2, [r2, #0]
   1a170:	7815      	ldrb	r5, [r2, #0]
   1a172:	2d66      	cmp	r5, #102	; 0x66
   1a174:	d002      	beq.n	1a17c <d_maybe_print_fold_expression.isra.15+0x14>
   1a176:	2000      	movs	r0, #0
   1a178:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1a17c:	681b      	ldr	r3, [r3, #0]
   1a17e:	f8d0 7120 	ldr.w	r7, [r0, #288]	; 0x120
   1a182:	f8d3 9008 	ldr.w	r9, [r3, #8]
   1a186:	f8d3 8004 	ldr.w	r8, [r3, #4]
   1a18a:	f899 3000 	ldrb.w	r3, [r9]
   1a18e:	2b3b      	cmp	r3, #59	; 0x3b
   1a190:	f04f 33ff 	mov.w	r3, #4294967295
   1a194:	bf04      	itt	eq
   1a196:	f8d9 5008 	ldreq.w	r5, [r9, #8]
   1a19a:	f8d9 9004 	ldreq.w	r9, [r9, #4]
   1a19e:	f8c0 3120 	str.w	r3, [r0, #288]	; 0x120
   1a1a2:	7853      	ldrb	r3, [r2, #1]
   1a1a4:	f1a3 034c 	sub.w	r3, r3, #76	; 0x4c
   1a1a8:	bf18      	it	ne
   1a1aa:	2500      	movne	r5, #0
   1a1ac:	460e      	mov	r6, r1
   1a1ae:	4604      	mov	r4, r0
   1a1b0:	2b26      	cmp	r3, #38	; 0x26
   1a1b2:	d82b      	bhi.n	1a20c <d_maybe_print_fold_expression.isra.15+0xa4>
   1a1b4:	e8df f003 	tbb	[pc, r3]
   1a1b8:	2a2a2a90 	.word	0x2a2a2a90
   1a1bc:	2a902a2a 	.word	0x2a902a2a
   1a1c0:	2a2a2a2a 	.word	0x2a2a2a2a
   1a1c4:	2a2a2a2a 	.word	0x2a2a2a2a
   1a1c8:	2a2a2a2a 	.word	0x2a2a2a2a
   1a1cc:	2a2a2a2a 	.word	0x2a2a2a2a
   1a1d0:	2a2a2a2a 	.word	0x2a2a2a2a
   1a1d4:	2a2a2a2a 	.word	0x2a2a2a2a
   1a1d8:	2a2a2a6a 	.word	0x2a2a2a6a
   1a1dc:	2a2a      	.short	0x2a2a
   1a1de:	2f          	.byte	0x2f
   1a1df:	00          	.byte	0x00
   1a1e0:	4642      	mov	r2, r8
   1a1e2:	4631      	mov	r1, r6
   1a1e4:	4620      	mov	r0, r4
   1a1e6:	f7ff ff1d 	bl	1a024 <d_print_expr_op>
   1a1ea:	464a      	mov	r2, r9
   1a1ec:	4631      	mov	r1, r6
   1a1ee:	4620      	mov	r0, r4
   1a1f0:	f7ff ff56 	bl	1a0a0 <d_print_subexpr>
   1a1f4:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
   1a1f8:	29ff      	cmp	r1, #255	; 0xff
   1a1fa:	f000 80b2 	beq.w	1a362 <d_maybe_print_fold_expression.isra.15+0x1fa>
   1a1fe:	1c4a      	adds	r2, r1, #1
   1a200:	2329      	movs	r3, #41	; 0x29
   1a202:	f8c4 2100 	str.w	r2, [r4, #256]	; 0x100
   1a206:	5463      	strb	r3, [r4, r1]
   1a208:	f884 3104 	strb.w	r3, [r4, #260]	; 0x104
   1a20c:	f8c4 7120 	str.w	r7, [r4, #288]	; 0x120
   1a210:	2001      	movs	r0, #1
   1a212:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1a216:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
   1a21a:	29ff      	cmp	r1, #255	; 0xff
   1a21c:	f000 80c5 	beq.w	1a3aa <d_maybe_print_fold_expression.isra.15+0x242>
   1a220:	1c4a      	adds	r2, r1, #1
   1a222:	2328      	movs	r3, #40	; 0x28
   1a224:	f8c4 2100 	str.w	r2, [r4, #256]	; 0x100
   1a228:	4620      	mov	r0, r4
   1a22a:	5463      	strb	r3, [r4, r1]
   1a22c:	464a      	mov	r2, r9
   1a22e:	4631      	mov	r1, r6
   1a230:	f884 3104 	strb.w	r3, [r4, #260]	; 0x104
   1a234:	4d65      	ldr	r5, [pc, #404]	; (1a3cc <d_maybe_print_fold_expression.isra.15+0x264>)
   1a236:	f7ff ff33 	bl	1a0a0 <d_print_subexpr>
   1a23a:	4642      	mov	r2, r8
   1a23c:	4631      	mov	r1, r6
   1a23e:	4620      	mov	r0, r4
   1a240:	f7ff fef0 	bl	1a024 <d_print_expr_op>
   1a244:	f105 0904 	add.w	r9, r5, #4
   1a248:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
   1a24c:	f04f 0800 	mov.w	r8, #0
   1a250:	e008      	b.n	1a264 <d_maybe_print_fold_expression.isra.15+0xfc>
   1a252:	460b      	mov	r3, r1
   1a254:	3101      	adds	r1, #1
   1a256:	45a9      	cmp	r9, r5
   1a258:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
   1a25c:	54e6      	strb	r6, [r4, r3]
   1a25e:	f884 6104 	strb.w	r6, [r4, #260]	; 0x104
   1a262:	d0d3      	beq.n	1a20c <d_maybe_print_fold_expression.isra.15+0xa4>
   1a264:	29ff      	cmp	r1, #255	; 0xff
   1a266:	f815 6b01 	ldrb.w	r6, [r5], #1
   1a26a:	d1f2      	bne.n	1a252 <d_maybe_print_fold_expression.isra.15+0xea>
   1a26c:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   1a270:	f884 80ff 	strb.w	r8, [r4, #255]	; 0xff
   1a274:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
   1a278:	4620      	mov	r0, r4
   1a27a:	4798      	blx	r3
   1a27c:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   1a280:	3301      	adds	r3, #1
   1a282:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
   1a286:	2101      	movs	r1, #1
   1a288:	2300      	movs	r3, #0
   1a28a:	e7e4      	b.n	1a256 <d_maybe_print_fold_expression.isra.15+0xee>
   1a28c:	4d50      	ldr	r5, [pc, #320]	; (1a3d0 <d_maybe_print_fold_expression.isra.15+0x268>)
   1a28e:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
   1a292:	f105 0b04 	add.w	fp, r5, #4
   1a296:	e009      	b.n	1a2ac <d_maybe_print_fold_expression.isra.15+0x144>
   1a298:	460b      	mov	r3, r1
   1a29a:	3101      	adds	r1, #1
   1a29c:	455d      	cmp	r5, fp
   1a29e:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
   1a2a2:	f804 a003 	strb.w	sl, [r4, r3]
   1a2a6:	f884 a104 	strb.w	sl, [r4, #260]	; 0x104
   1a2aa:	d099      	beq.n	1a1e0 <d_maybe_print_fold_expression.isra.15+0x78>
   1a2ac:	29ff      	cmp	r1, #255	; 0xff
   1a2ae:	f815 ab01 	ldrb.w	sl, [r5], #1
   1a2b2:	d1f1      	bne.n	1a298 <d_maybe_print_fold_expression.isra.15+0x130>
   1a2b4:	f04f 0300 	mov.w	r3, #0
   1a2b8:	f884 30ff 	strb.w	r3, [r4, #255]	; 0xff
   1a2bc:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
   1a2c0:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   1a2c4:	4620      	mov	r0, r4
   1a2c6:	4798      	blx	r3
   1a2c8:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   1a2cc:	3301      	adds	r3, #1
   1a2ce:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
   1a2d2:	2101      	movs	r1, #1
   1a2d4:	2300      	movs	r3, #0
   1a2d6:	e7e1      	b.n	1a29c <d_maybe_print_fold_expression.isra.15+0x134>
   1a2d8:	f8d0 3100 	ldr.w	r3, [r0, #256]	; 0x100
   1a2dc:	2bff      	cmp	r3, #255	; 0xff
   1a2de:	d051      	beq.n	1a384 <d_maybe_print_fold_expression.isra.15+0x21c>
   1a2e0:	1c59      	adds	r1, r3, #1
   1a2e2:	f04f 0e28 	mov.w	lr, #40	; 0x28
   1a2e6:	464a      	mov	r2, r9
   1a2e8:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
   1a2ec:	4620      	mov	r0, r4
   1a2ee:	f804 e003 	strb.w	lr, [r4, r3]
   1a2f2:	4631      	mov	r1, r6
   1a2f4:	f884 e104 	strb.w	lr, [r4, #260]	; 0x104
   1a2f8:	f8df 90d8 	ldr.w	r9, [pc, #216]	; 1a3d4 <d_maybe_print_fold_expression.isra.15+0x26c>
   1a2fc:	f7ff fed0 	bl	1a0a0 <d_print_subexpr>
   1a300:	4631      	mov	r1, r6
   1a302:	4642      	mov	r2, r8
   1a304:	4620      	mov	r0, r4
   1a306:	f7ff fe8d 	bl	1a024 <d_print_expr_op>
   1a30a:	f109 0b03 	add.w	fp, r9, #3
   1a30e:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
   1a312:	e009      	b.n	1a328 <d_maybe_print_fold_expression.isra.15+0x1c0>
   1a314:	460b      	mov	r3, r1
   1a316:	3101      	adds	r1, #1
   1a318:	45cb      	cmp	fp, r9
   1a31a:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
   1a31e:	f804 a003 	strb.w	sl, [r4, r3]
   1a322:	f884 a104 	strb.w	sl, [r4, #260]	; 0x104
   1a326:	d015      	beq.n	1a354 <d_maybe_print_fold_expression.isra.15+0x1ec>
   1a328:	29ff      	cmp	r1, #255	; 0xff
   1a32a:	f819 ab01 	ldrb.w	sl, [r9], #1
   1a32e:	d1f1      	bne.n	1a314 <d_maybe_print_fold_expression.isra.15+0x1ac>
   1a330:	f04f 0300 	mov.w	r3, #0
   1a334:	f884 30ff 	strb.w	r3, [r4, #255]	; 0xff
   1a338:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
   1a33c:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   1a340:	4620      	mov	r0, r4
   1a342:	4798      	blx	r3
   1a344:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   1a348:	3301      	adds	r3, #1
   1a34a:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
   1a34e:	2101      	movs	r1, #1
   1a350:	2300      	movs	r3, #0
   1a352:	e7e1      	b.n	1a318 <d_maybe_print_fold_expression.isra.15+0x1b0>
   1a354:	4642      	mov	r2, r8
   1a356:	4631      	mov	r1, r6
   1a358:	4620      	mov	r0, r4
   1a35a:	f7ff fe63 	bl	1a024 <d_print_expr_op>
   1a35e:	462a      	mov	r2, r5
   1a360:	e744      	b.n	1a1ec <d_maybe_print_fold_expression.isra.15+0x84>
   1a362:	2500      	movs	r5, #0
   1a364:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   1a368:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
   1a36c:	f884 50ff 	strb.w	r5, [r4, #255]	; 0xff
   1a370:	4620      	mov	r0, r4
   1a372:	4798      	blx	r3
   1a374:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   1a378:	3301      	adds	r3, #1
   1a37a:	4629      	mov	r1, r5
   1a37c:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
   1a380:	2201      	movs	r2, #1
   1a382:	e73d      	b.n	1a200 <d_maybe_print_fold_expression.isra.15+0x98>
   1a384:	f04f 0a00 	mov.w	sl, #0
   1a388:	4619      	mov	r1, r3
   1a38a:	f8d0 210c 	ldr.w	r2, [r0, #268]	; 0x10c
   1a38e:	f8d0 3108 	ldr.w	r3, [r0, #264]	; 0x108
   1a392:	f880 a0ff 	strb.w	sl, [r0, #255]	; 0xff
   1a396:	4798      	blx	r3
   1a398:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   1a39c:	f8c4 a100 	str.w	sl, [r4, #256]	; 0x100
   1a3a0:	1c5a      	adds	r2, r3, #1
   1a3a2:	f8c4 2124 	str.w	r2, [r4, #292]	; 0x124
   1a3a6:	4653      	mov	r3, sl
   1a3a8:	e79a      	b.n	1a2e0 <d_maybe_print_fold_expression.isra.15+0x178>
   1a3aa:	2500      	movs	r5, #0
   1a3ac:	f8d0 3108 	ldr.w	r3, [r0, #264]	; 0x108
   1a3b0:	f8d0 210c 	ldr.w	r2, [r0, #268]	; 0x10c
   1a3b4:	f880 50ff 	strb.w	r5, [r0, #255]	; 0xff
   1a3b8:	4798      	blx	r3
   1a3ba:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   1a3be:	3301      	adds	r3, #1
   1a3c0:	4629      	mov	r1, r5
   1a3c2:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
   1a3c6:	2201      	movs	r2, #1
   1a3c8:	e72b      	b.n	1a222 <d_maybe_print_fold_expression.isra.15+0xba>
   1a3ca:	bf00      	nop
   1a3cc:	0002427c 	.word	0x0002427c
   1a3d0:	00024274 	.word	0x00024274
   1a3d4:	00024190 	.word	0x00024190

0001a3d8 <d_demangle_callback.constprop.17>:
   1a3d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1a3dc:	b0e7      	sub	sp, #412	; 0x19c
   1a3de:	f890 9000 	ldrb.w	r9, [r0]
   1a3e2:	f1b9 0f5f 	cmp.w	r9, #95	; 0x5f
   1a3e6:	af00      	add	r7, sp, #0
   1a3e8:	4605      	mov	r5, r0
   1a3ea:	4688      	mov	r8, r1
   1a3ec:	4616      	mov	r6, r2
   1a3ee:	f000 80f1 	beq.w	1a5d4 <d_demangle_callback.constprop.17+0x1fc>
   1a3f2:	2208      	movs	r2, #8
   1a3f4:	49bd      	ldr	r1, [pc, #756]	; (1a6ec <d_demangle_callback.constprop.17+0x314>)
   1a3f6:	4628      	mov	r0, r5
   1a3f8:	f004 fb90 	bl	1eb1c <strncmp>
   1a3fc:	b948      	cbnz	r0, 1a412 <d_demangle_callback.constprop.17+0x3a>
   1a3fe:	7a2b      	ldrb	r3, [r5, #8]
   1a400:	2b2e      	cmp	r3, #46	; 0x2e
   1a402:	f000 80d6 	beq.w	1a5b2 <d_demangle_callback.constprop.17+0x1da>
   1a406:	2b5f      	cmp	r3, #95	; 0x5f
   1a408:	f000 80d3 	beq.w	1a5b2 <d_demangle_callback.constprop.17+0x1da>
   1a40c:	2b24      	cmp	r3, #36	; 0x24
   1a40e:	f000 80d0 	beq.w	1a5b2 <d_demangle_callback.constprop.17+0x1da>
   1a412:	f04f 0a00 	mov.w	sl, #0
   1a416:	4628      	mov	r0, r5
   1a418:	f004 fb12 	bl	1ea40 <strlen>
   1a41c:	ea4f 0b40 	mov.w	fp, r0, lsl #1
   1a420:	0083      	lsls	r3, r0, #2
   1a422:	eb03 020b 	add.w	r2, r3, fp
   1a426:	0092      	lsls	r2, r2, #2
   1a428:	3208      	adds	r2, #8
   1a42a:	330a      	adds	r3, #10
   1a42c:	ebad 0d02 	sub.w	sp, sp, r2
   1a430:	f023 0307 	bic.w	r3, r3, #7
   1a434:	2400      	movs	r4, #0
   1a436:	466a      	mov	r2, sp
   1a438:	1829      	adds	r1, r5, r0
   1a43a:	ebad 0d03 	sub.w	sp, sp, r3
   1a43e:	f1ba 0f01 	cmp.w	sl, #1
   1a442:	f04f 0311 	mov.w	r3, #17
   1a446:	627a      	str	r2, [r7, #36]	; 0x24
   1a448:	f8c7 d030 	str.w	sp, [r7, #48]	; 0x30
   1a44c:	f8c7 b02c 	str.w	fp, [r7, #44]	; 0x2c
   1a450:	617d      	str	r5, [r7, #20]
   1a452:	623d      	str	r5, [r7, #32]
   1a454:	63b8      	str	r0, [r7, #56]	; 0x38
   1a456:	61b9      	str	r1, [r7, #24]
   1a458:	61fb      	str	r3, [r7, #28]
   1a45a:	62bc      	str	r4, [r7, #40]	; 0x28
   1a45c:	637c      	str	r4, [r7, #52]	; 0x34
   1a45e:	63fc      	str	r4, [r7, #60]	; 0x3c
   1a460:	643c      	str	r4, [r7, #64]	; 0x40
   1a462:	647c      	str	r4, [r7, #68]	; 0x44
   1a464:	64bc      	str	r4, [r7, #72]	; 0x48
   1a466:	64fc      	str	r4, [r7, #76]	; 0x4c
   1a468:	f000 80bb 	beq.w	1a5e2 <d_demangle_callback.constprop.17+0x20a>
   1a46c:	f0c0 80cf 	bcc.w	1a60e <d_demangle_callback.constprop.17+0x236>
   1a470:	7aeb      	ldrb	r3, [r5, #11]
   1a472:	f1ba 0f02 	cmp.w	sl, #2
   1a476:	bf18      	it	ne
   1a478:	f04f 0944 	movne.w	r9, #68	; 0x44
   1a47c:	f105 0a0b 	add.w	sl, r5, #11
   1a480:	bf08      	it	eq
   1a482:	f04f 0943 	moveq.w	r9, #67	; 0x43
   1a486:	2b5f      	cmp	r3, #95	; 0x5f
   1a488:	f8c7 a020 	str.w	sl, [r7, #32]
   1a48c:	f000 80b2 	beq.w	1a5f4 <d_demangle_callback.constprop.17+0x21c>
   1a490:	4650      	mov	r0, sl
   1a492:	607a      	str	r2, [r7, #4]
   1a494:	f004 fad4 	bl	1ea40 <strlen>
   1a498:	f1bb 0f00 	cmp.w	fp, #0
   1a49c:	687a      	ldr	r2, [r7, #4]
   1a49e:	f340 80bf 	ble.w	1a620 <d_demangle_callback.constprop.17+0x248>
   1a4a2:	2301      	movs	r3, #1
   1a4a4:	62bb      	str	r3, [r7, #40]	; 0x28
   1a4a6:	2800      	cmp	r0, #0
   1a4a8:	f000 80ba 	beq.w	1a620 <d_demangle_callback.constprop.17+0x248>
   1a4ac:	2300      	movs	r3, #0
   1a4ae:	f8c2 a004 	str.w	sl, [r2, #4]
   1a4b2:	6090      	str	r0, [r2, #8]
   1a4b4:	7013      	strb	r3, [r2, #0]
   1a4b6:	4649      	mov	r1, r9
   1a4b8:	2300      	movs	r3, #0
   1a4ba:	f107 0014 	add.w	r0, r7, #20
   1a4be:	f7f9 fe31 	bl	14124 <d_make_comp>
   1a4c2:	6a3c      	ldr	r4, [r7, #32]
   1a4c4:	4605      	mov	r5, r0
   1a4c6:	4620      	mov	r0, r4
   1a4c8:	f004 faba 	bl	1ea40 <strlen>
   1a4cc:	1823      	adds	r3, r4, r0
   1a4ce:	623b      	str	r3, [r7, #32]
   1a4d0:	f814 9000 	ldrb.w	r9, [r4, r0]
   1a4d4:	f1b9 0f00 	cmp.w	r9, #0
   1a4d8:	f040 8086 	bne.w	1a5e8 <d_demangle_callback.constprop.17+0x210>
   1a4dc:	2d00      	cmp	r5, #0
   1a4de:	f000 8083 	beq.w	1a5e8 <d_demangle_callback.constprop.17+0x210>
   1a4e2:	f107 0450 	add.w	r4, r7, #80	; 0x50
   1a4e6:	462a      	mov	r2, r5
   1a4e8:	f507 71c2 	add.w	r1, r7, #388	; 0x184
   1a4ec:	f507 70c8 	add.w	r0, r7, #400	; 0x190
   1a4f0:	f8c4 8108 	str.w	r8, [r4, #264]	; 0x108
   1a4f4:	f8c4 610c 	str.w	r6, [r4, #268]	; 0x10c
   1a4f8:	f8c4 9100 	str.w	r9, [r4, #256]	; 0x100
   1a4fc:	f884 9104 	strb.w	r9, [r4, #260]	; 0x104
   1a500:	f8c4 9110 	str.w	r9, [r4, #272]	; 0x110
   1a504:	f8c4 9114 	str.w	r9, [r4, #276]	; 0x114
   1a508:	f8c4 9120 	str.w	r9, [r4, #288]	; 0x120
   1a50c:	f8c4 9124 	str.w	r9, [r4, #292]	; 0x124
   1a510:	f8c4 9118 	str.w	r9, [r4, #280]	; 0x118
   1a514:	f8c4 911c 	str.w	r9, [r4, #284]	; 0x11c
   1a518:	f8c4 9128 	str.w	r9, [r4, #296]	; 0x128
   1a51c:	f8c4 912c 	str.w	r9, [r4, #300]	; 0x12c
   1a520:	f8c4 9130 	str.w	r9, [r4, #304]	; 0x130
   1a524:	f8c4 9134 	str.w	r9, [r4, #308]	; 0x134
   1a528:	f8c4 9138 	str.w	r9, [r4, #312]	; 0x138
   1a52c:	f8c4 913c 	str.w	r9, [r4, #316]	; 0x13c
   1a530:	f8c4 9140 	str.w	r9, [r4, #320]	; 0x140
   1a534:	f7f9 fec4 	bl	142c0 <d_count_templates_scopes>
   1a538:	f8d4 2134 	ldr.w	r2, [r4, #308]	; 0x134
   1a53c:	f8d4 1140 	ldr.w	r1, [r4, #320]	; 0x140
   1a540:	f8d4 3128 	ldr.w	r3, [r4, #296]	; 0x128
   1a544:	613b      	str	r3, [r7, #16]
   1a546:	00d0      	lsls	r0, r2, #3
   1a548:	fb01 f102 	mul.w	r1, r1, r2
   1a54c:	3008      	adds	r0, #8
   1a54e:	46e8      	mov	r8, sp
   1a550:	00ca      	lsls	r2, r1, #3
   1a552:	ebad 0d00 	sub.w	sp, sp, r0
   1a556:	4668      	mov	r0, sp
   1a558:	3208      	adds	r2, #8
   1a55a:	ebad 0d02 	sub.w	sp, sp, r2
   1a55e:	f107 060c 	add.w	r6, r7, #12
   1a562:	462a      	mov	r2, r5
   1a564:	f8c4 012c 	str.w	r0, [r4, #300]	; 0x12c
   1a568:	f8c4 1140 	str.w	r1, [r4, #320]	; 0x140
   1a56c:	4620      	mov	r0, r4
   1a56e:	2111      	movs	r1, #17
   1a570:	f8c4 d138 	str.w	sp, [r4, #312]	; 0x138
   1a574:	60fd      	str	r5, [r7, #12]
   1a576:	f8c4 9144 	str.w	r9, [r4, #324]	; 0x144
   1a57a:	f8c4 6128 	str.w	r6, [r4, #296]	; 0x128
   1a57e:	f7fc f9c5 	bl	1690c <d_print_comp_inner>
   1a582:	693b      	ldr	r3, [r7, #16]
   1a584:	f8c4 3128 	str.w	r3, [r4, #296]	; 0x128
   1a588:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
   1a58c:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   1a590:	f804 9001 	strb.w	r9, [r4, r1]
   1a594:	4620      	mov	r0, r4
   1a596:	46c5      	mov	sp, r8
   1a598:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
   1a59c:	4798      	blx	r3
   1a59e:	f8d4 0118 	ldr.w	r0, [r4, #280]	; 0x118
   1a5a2:	fab0 f080 	clz	r0, r0
   1a5a6:	0940      	lsrs	r0, r0, #5
   1a5a8:	f507 77ce 	add.w	r7, r7, #412	; 0x19c
   1a5ac:	46bd      	mov	sp, r7
   1a5ae:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1a5b2:	7a6b      	ldrb	r3, [r5, #9]
   1a5b4:	2b44      	cmp	r3, #68	; 0x44
   1a5b6:	d002      	beq.n	1a5be <d_demangle_callback.constprop.17+0x1e6>
   1a5b8:	2b49      	cmp	r3, #73	; 0x49
   1a5ba:	f47f af2a 	bne.w	1a412 <d_demangle_callback.constprop.17+0x3a>
   1a5be:	7aaa      	ldrb	r2, [r5, #10]
   1a5c0:	2a5f      	cmp	r2, #95	; 0x5f
   1a5c2:	f47f af26 	bne.w	1a412 <d_demangle_callback.constprop.17+0x3a>
   1a5c6:	2b49      	cmp	r3, #73	; 0x49
   1a5c8:	bf14      	ite	ne
   1a5ca:	f04f 0a03 	movne.w	sl, #3
   1a5ce:	f04f 0a02 	moveq.w	sl, #2
   1a5d2:	e720      	b.n	1a416 <d_demangle_callback.constprop.17+0x3e>
   1a5d4:	7843      	ldrb	r3, [r0, #1]
   1a5d6:	2b5a      	cmp	r3, #90	; 0x5a
   1a5d8:	f47f af0b 	bne.w	1a3f2 <d_demangle_callback.constprop.17+0x1a>
   1a5dc:	f04f 0a01 	mov.w	sl, #1
   1a5e0:	e719      	b.n	1a416 <d_demangle_callback.constprop.17+0x3e>
   1a5e2:	f1b9 0f5f 	cmp.w	r9, #95	; 0x5f
   1a5e6:	d01d      	beq.n	1a624 <d_demangle_callback.constprop.17+0x24c>
   1a5e8:	2000      	movs	r0, #0
   1a5ea:	f507 77ce 	add.w	r7, r7, #412	; 0x19c
   1a5ee:	46bd      	mov	sp, r7
   1a5f0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1a5f4:	7b2b      	ldrb	r3, [r5, #12]
   1a5f6:	2b5a      	cmp	r3, #90	; 0x5a
   1a5f8:	f47f af4a 	bne.w	1a490 <d_demangle_callback.constprop.17+0xb8>
   1a5fc:	350d      	adds	r5, #13
   1a5fe:	4621      	mov	r1, r4
   1a600:	f107 0014 	add.w	r0, r7, #20
   1a604:	623d      	str	r5, [r7, #32]
   1a606:	f7fb fe35 	bl	16274 <d_encoding>
   1a60a:	4602      	mov	r2, r0
   1a60c:	e753      	b.n	1a4b6 <d_demangle_callback.constprop.17+0xde>
   1a60e:	f107 0014 	add.w	r0, r7, #20
   1a612:	f7fb f817 	bl	15644 <d_type>
   1a616:	6a3b      	ldr	r3, [r7, #32]
   1a618:	4605      	mov	r5, r0
   1a61a:	f893 9000 	ldrb.w	r9, [r3]
   1a61e:	e759      	b.n	1a4d4 <d_demangle_callback.constprop.17+0xfc>
   1a620:	2200      	movs	r2, #0
   1a622:	e748      	b.n	1a4b6 <d_demangle_callback.constprop.17+0xde>
   1a624:	786b      	ldrb	r3, [r5, #1]
   1a626:	2b5a      	cmp	r3, #90	; 0x5a
   1a628:	d1de      	bne.n	1a5e8 <d_demangle_callback.constprop.17+0x210>
   1a62a:	3502      	adds	r5, #2
   1a62c:	4651      	mov	r1, sl
   1a62e:	f107 0014 	add.w	r0, r7, #20
   1a632:	623d      	str	r5, [r7, #32]
   1a634:	f7fb fe1e 	bl	16274 <d_encoding>
   1a638:	69fb      	ldr	r3, [r7, #28]
   1a63a:	07db      	lsls	r3, r3, #31
   1a63c:	4605      	mov	r5, r0
   1a63e:	d551      	bpl.n	1a6e4 <d_demangle_callback.constprop.17+0x30c>
   1a640:	6a38      	ldr	r0, [r7, #32]
   1a642:	f890 9000 	ldrb.w	r9, [r0]
   1a646:	f1b9 0f2e 	cmp.w	r9, #46	; 0x2e
   1a64a:	f47f af43 	bne.w	1a4d4 <d_demangle_callback.constprop.17+0xfc>
   1a64e:	7843      	ldrb	r3, [r0, #1]
   1a650:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
   1a654:	2a19      	cmp	r2, #25
   1a656:	d939      	bls.n	1a6cc <d_demangle_callback.constprop.17+0x2f4>
   1a658:	2b5f      	cmp	r3, #95	; 0x5f
   1a65a:	d037      	beq.n	1a6cc <d_demangle_callback.constprop.17+0x2f4>
   1a65c:	3b30      	subs	r3, #48	; 0x30
   1a65e:	2b09      	cmp	r3, #9
   1a660:	d840      	bhi.n	1a6e4 <d_demangle_callback.constprop.17+0x30c>
   1a662:	7803      	ldrb	r3, [r0, #0]
   1a664:	4602      	mov	r2, r0
   1a666:	2b2e      	cmp	r3, #46	; 0x2e
   1a668:	d112      	bne.n	1a690 <d_demangle_callback.constprop.17+0x2b8>
   1a66a:	7853      	ldrb	r3, [r2, #1]
   1a66c:	3b30      	subs	r3, #48	; 0x30
   1a66e:	2b09      	cmp	r3, #9
   1a670:	d80e      	bhi.n	1a690 <d_demangle_callback.constprop.17+0x2b8>
   1a672:	7893      	ldrb	r3, [r2, #2]
   1a674:	f1a3 0130 	sub.w	r1, r3, #48	; 0x30
   1a678:	2909      	cmp	r1, #9
   1a67a:	f102 0202 	add.w	r2, r2, #2
   1a67e:	d8f2      	bhi.n	1a666 <d_demangle_callback.constprop.17+0x28e>
   1a680:	f812 3f01 	ldrb.w	r3, [r2, #1]!
   1a684:	f1a3 0130 	sub.w	r1, r3, #48	; 0x30
   1a688:	2909      	cmp	r1, #9
   1a68a:	d9f9      	bls.n	1a680 <d_demangle_callback.constprop.17+0x2a8>
   1a68c:	2b2e      	cmp	r3, #46	; 0x2e
   1a68e:	d0ec      	beq.n	1a66a <d_demangle_callback.constprop.17+0x292>
   1a690:	6ab9      	ldr	r1, [r7, #40]	; 0x28
   1a692:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   1a694:	623a      	str	r2, [r7, #32]
   1a696:	4299      	cmp	r1, r3
   1a698:	da16      	bge.n	1a6c8 <d_demangle_callback.constprop.17+0x2f0>
   1a69a:	f8d7 e024 	ldr.w	lr, [r7, #36]	; 0x24
   1a69e:	1c4b      	adds	r3, r1, #1
   1a6a0:	eb01 0141 	add.w	r1, r1, r1, lsl #1
   1a6a4:	62bb      	str	r3, [r7, #40]	; 0x28
   1a6a6:	eb1e 0381 	adds.w	r3, lr, r1, lsl #2
   1a6aa:	d00d      	beq.n	1a6c8 <d_demangle_callback.constprop.17+0x2f0>
   1a6ac:	1a12      	subs	r2, r2, r0
   1a6ae:	d00b      	beq.n	1a6c8 <d_demangle_callback.constprop.17+0x2f0>
   1a6b0:	f80e 4021 	strb.w	r4, [lr, r1, lsl #2]
   1a6b4:	6058      	str	r0, [r3, #4]
   1a6b6:	609a      	str	r2, [r3, #8]
   1a6b8:	462a      	mov	r2, r5
   1a6ba:	214d      	movs	r1, #77	; 0x4d
   1a6bc:	f107 0014 	add.w	r0, r7, #20
   1a6c0:	f7f9 fd30 	bl	14124 <d_make_comp>
   1a6c4:	4605      	mov	r5, r0
   1a6c6:	e7bb      	b.n	1a640 <d_demangle_callback.constprop.17+0x268>
   1a6c8:	2300      	movs	r3, #0
   1a6ca:	e7f5      	b.n	1a6b8 <d_demangle_callback.constprop.17+0x2e0>
   1a6cc:	1c81      	adds	r1, r0, #2
   1a6ce:	460a      	mov	r2, r1
   1a6d0:	f811 3b01 	ldrb.w	r3, [r1], #1
   1a6d4:	f1a3 0e61 	sub.w	lr, r3, #97	; 0x61
   1a6d8:	f1be 0f19 	cmp.w	lr, #25
   1a6dc:	d9f7      	bls.n	1a6ce <d_demangle_callback.constprop.17+0x2f6>
   1a6de:	2b5f      	cmp	r3, #95	; 0x5f
   1a6e0:	d0f5      	beq.n	1a6ce <d_demangle_callback.constprop.17+0x2f6>
   1a6e2:	e7c0      	b.n	1a666 <d_demangle_callback.constprop.17+0x28e>
   1a6e4:	6a3b      	ldr	r3, [r7, #32]
   1a6e6:	f893 9000 	ldrb.w	r9, [r3]
   1a6ea:	e6f3      	b.n	1a4d4 <d_demangle_callback.constprop.17+0xfc>
   1a6ec:	00023f20 	.word	0x00023f20

0001a6f0 <__cxa_demangle>:
   1a6f0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1a6f4:	b084      	sub	sp, #16
   1a6f6:	b378      	cbz	r0, 1a758 <__cxa_demangle+0x68>
   1a6f8:	b101      	cbz	r1, 1a6fc <__cxa_demangle+0xc>
   1a6fa:	b36a      	cbz	r2, 1a758 <__cxa_demangle+0x68>
   1a6fc:	2400      	movs	r4, #0
   1a6fe:	4616      	mov	r6, r2
   1a700:	460d      	mov	r5, r1
   1a702:	466a      	mov	r2, sp
   1a704:	4927      	ldr	r1, [pc, #156]	; (1a7a4 <__cxa_demangle+0xb4>)
   1a706:	9400      	str	r4, [sp, #0]
   1a708:	461f      	mov	r7, r3
   1a70a:	9401      	str	r4, [sp, #4]
   1a70c:	9402      	str	r4, [sp, #8]
   1a70e:	9403      	str	r4, [sp, #12]
   1a710:	f7ff fe62 	bl	1a3d8 <d_demangle_callback.constprop.17>
   1a714:	2800      	cmp	r0, #0
   1a716:	d03f      	beq.n	1a798 <__cxa_demangle+0xa8>
   1a718:	9b03      	ldr	r3, [sp, #12]
   1a71a:	b1d3      	cbz	r3, 1a752 <__cxa_demangle+0x62>
   1a71c:	f04f 0801 	mov.w	r8, #1
   1a720:	9c00      	ldr	r4, [sp, #0]
   1a722:	b35c      	cbz	r4, 1a77c <__cxa_demangle+0x8c>
   1a724:	b33d      	cbz	r5, 1a776 <__cxa_demangle+0x86>
   1a726:	4620      	mov	r0, r4
   1a728:	f004 f98a 	bl	1ea40 <strlen>
   1a72c:	6833      	ldr	r3, [r6, #0]
   1a72e:	4298      	cmp	r0, r3
   1a730:	d21b      	bcs.n	1a76a <__cxa_demangle+0x7a>
   1a732:	1c42      	adds	r2, r0, #1
   1a734:	4621      	mov	r1, r4
   1a736:	4628      	mov	r0, r5
   1a738:	f003 fc42 	bl	1dfc0 <memcpy>
   1a73c:	4620      	mov	r0, r4
   1a73e:	f003 f8eb 	bl	1d918 <free>
   1a742:	462c      	mov	r4, r5
   1a744:	b10f      	cbz	r7, 1a74a <__cxa_demangle+0x5a>
   1a746:	2300      	movs	r3, #0
   1a748:	603b      	str	r3, [r7, #0]
   1a74a:	4620      	mov	r0, r4
   1a74c:	b004      	add	sp, #16
   1a74e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   1a752:	f8dd 8008 	ldr.w	r8, [sp, #8]
   1a756:	e7e3      	b.n	1a720 <__cxa_demangle+0x30>
   1a758:	b113      	cbz	r3, 1a760 <__cxa_demangle+0x70>
   1a75a:	f06f 0202 	mvn.w	r2, #2
   1a75e:	601a      	str	r2, [r3, #0]
   1a760:	2400      	movs	r4, #0
   1a762:	4620      	mov	r0, r4
   1a764:	b004      	add	sp, #16
   1a766:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   1a76a:	4628      	mov	r0, r5
   1a76c:	f003 f8d4 	bl	1d918 <free>
   1a770:	f8c6 8000 	str.w	r8, [r6]
   1a774:	e7e6      	b.n	1a744 <__cxa_demangle+0x54>
   1a776:	2e00      	cmp	r6, #0
   1a778:	d1fa      	bne.n	1a770 <__cxa_demangle+0x80>
   1a77a:	e7e3      	b.n	1a744 <__cxa_demangle+0x54>
   1a77c:	2f00      	cmp	r7, #0
   1a77e:	d0ef      	beq.n	1a760 <__cxa_demangle+0x70>
   1a780:	f1b8 0f01 	cmp.w	r8, #1
   1a784:	d004      	beq.n	1a790 <__cxa_demangle+0xa0>
   1a786:	f06f 0301 	mvn.w	r3, #1
   1a78a:	603b      	str	r3, [r7, #0]
   1a78c:	2400      	movs	r4, #0
   1a78e:	e7dc      	b.n	1a74a <__cxa_demangle+0x5a>
   1a790:	f04f 33ff 	mov.w	r3, #4294967295
   1a794:	603b      	str	r3, [r7, #0]
   1a796:	e7d8      	b.n	1a74a <__cxa_demangle+0x5a>
   1a798:	9800      	ldr	r0, [sp, #0]
   1a79a:	f003 f8bd 	bl	1d918 <free>
   1a79e:	2f00      	cmp	r7, #0
   1a7a0:	d1f1      	bne.n	1a786 <__cxa_demangle+0x96>
   1a7a2:	e7dd      	b.n	1a760 <__cxa_demangle+0x70>
   1a7a4:	00014849 	.word	0x00014849

0001a7a8 <__gcclibcxx_demangle_callback>:
   1a7a8:	b160      	cbz	r0, 1a7c4 <__gcclibcxx_demangle_callback+0x1c>
   1a7aa:	b508      	push	{r3, lr}
   1a7ac:	b139      	cbz	r1, 1a7be <__gcclibcxx_demangle_callback+0x16>
   1a7ae:	f7ff fe13 	bl	1a3d8 <d_demangle_callback.constprop.17>
   1a7b2:	2800      	cmp	r0, #0
   1a7b4:	bf0c      	ite	eq
   1a7b6:	f06f 0001 	mvneq.w	r0, #1
   1a7ba:	2000      	movne	r0, #0
   1a7bc:	bd08      	pop	{r3, pc}
   1a7be:	f06f 0002 	mvn.w	r0, #2
   1a7c2:	bd08      	pop	{r3, pc}
   1a7c4:	f06f 0002 	mvn.w	r0, #2
   1a7c8:	4770      	bx	lr
   1a7ca:	bf00      	nop

0001a7cc <__cxa_current_exception_type>:
   1a7cc:	b508      	push	{r3, lr}
   1a7ce:	f7f9 f8f5 	bl	139bc <__cxa_get_globals>
   1a7d2:	6800      	ldr	r0, [r0, #0]
   1a7d4:	b130      	cbz	r0, 1a7e4 <__cxa_current_exception_type+0x18>
   1a7d6:	f890 3027 	ldrb.w	r3, [r0, #39]	; 0x27
   1a7da:	2b01      	cmp	r3, #1
   1a7dc:	bf04      	itt	eq
   1a7de:	6800      	ldreq	r0, [r0, #0]
   1a7e0:	3878      	subeq	r0, #120	; 0x78
   1a7e2:	6800      	ldr	r0, [r0, #0]
   1a7e4:	bd08      	pop	{r3, pc}
   1a7e6:	bf00      	nop

0001a7e8 <round>:
   1a7e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1a7ea:	ec53 2b10 	vmov	r2, r3, d0
   1a7ee:	f3c3 540a 	ubfx	r4, r3, #20, #11
   1a7f2:	f2a4 30ff 	subw	r0, r4, #1023	; 0x3ff
   1a7f6:	2813      	cmp	r0, #19
   1a7f8:	4619      	mov	r1, r3
   1a7fa:	ee10 6a10 	vmov	r6, s0
   1a7fe:	dc12      	bgt.n	1a826 <round+0x3e>
   1a800:	2800      	cmp	r0, #0
   1a802:	db32      	blt.n	1a86a <round+0x82>
   1a804:	4d23      	ldr	r5, [pc, #140]	; (1a894 <round+0xac>)
   1a806:	4105      	asrs	r5, r0
   1a808:	422b      	tst	r3, r5
   1a80a:	461f      	mov	r7, r3
   1a80c:	d02a      	beq.n	1a864 <round+0x7c>
   1a80e:	f44f 2100 	mov.w	r1, #524288	; 0x80000
   1a812:	4101      	asrs	r1, r0
   1a814:	4439      	add	r1, r7
   1a816:	ea21 0105 	bic.w	r1, r1, r5
   1a81a:	2400      	movs	r4, #0
   1a81c:	460b      	mov	r3, r1
   1a81e:	4622      	mov	r2, r4
   1a820:	ec43 2b10 	vmov	d0, r2, r3
   1a824:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   1a826:	2833      	cmp	r0, #51	; 0x33
   1a828:	dd05      	ble.n	1a836 <round+0x4e>
   1a82a:	f5b0 6f80 	cmp.w	r0, #1024	; 0x400
   1a82e:	d022      	beq.n	1a876 <round+0x8e>
   1a830:	ec43 2b10 	vmov	d0, r2, r3
   1a834:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   1a836:	f2a4 4413 	subw	r4, r4, #1043	; 0x413
   1a83a:	f04f 35ff 	mov.w	r5, #4294967295
   1a83e:	fa25 f404 	lsr.w	r4, r5, r4
   1a842:	4222      	tst	r2, r4
   1a844:	d0f4      	beq.n	1a830 <round+0x48>
   1a846:	2301      	movs	r3, #1
   1a848:	f1c0 0033 	rsb	r0, r0, #51	; 0x33
   1a84c:	fa03 f000 	lsl.w	r0, r3, r0
   1a850:	1980      	adds	r0, r0, r6
   1a852:	bf28      	it	cs
   1a854:	18c9      	addcs	r1, r1, r3
   1a856:	ea20 0404 	bic.w	r4, r0, r4
   1a85a:	460b      	mov	r3, r1
   1a85c:	4622      	mov	r2, r4
   1a85e:	ec43 2b10 	vmov	d0, r2, r3
   1a862:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   1a864:	2a00      	cmp	r2, #0
   1a866:	d1d2      	bne.n	1a80e <round+0x26>
   1a868:	e7e2      	b.n	1a830 <round+0x48>
   1a86a:	3001      	adds	r0, #1
   1a86c:	f003 4100 	and.w	r1, r3, #2147483648	; 0x80000000
   1a870:	d009      	beq.n	1a886 <round+0x9e>
   1a872:	2400      	movs	r4, #0
   1a874:	e7d2      	b.n	1a81c <round+0x34>
   1a876:	ee10 0a10 	vmov	r0, s0
   1a87a:	4619      	mov	r1, r3
   1a87c:	f000 fe18 	bl	1b4b0 <__adddf3>
   1a880:	ec41 0b10 	vmov	d0, r0, r1
   1a884:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   1a886:	f041 517f 	orr.w	r1, r1, #1069547520	; 0x3fc00000
   1a88a:	f441 1140 	orr.w	r1, r1, #3145728	; 0x300000
   1a88e:	2400      	movs	r4, #0
   1a890:	e7c4      	b.n	1a81c <round+0x34>
   1a892:	bf00      	nop
   1a894:	000fffff 	.word	0x000fffff

0001a898 <powf>:
   1a898:	b5f0      	push	{r4, r5, r6, r7, lr}
   1a89a:	ed2d 8b04 	vpush	{d8-d9}
   1a89e:	4db3      	ldr	r5, [pc, #716]	; (1ab6c <powf+0x2d4>)
   1a8a0:	b08b      	sub	sp, #44	; 0x2c
   1a8a2:	eef0 8a40 	vmov.f32	s17, s0
   1a8a6:	eeb0 8a60 	vmov.f32	s16, s1
   1a8aa:	f000 f9df 	bl	1ac6c <__ieee754_powf>
   1a8ae:	f995 4000 	ldrsb.w	r4, [r5]
   1a8b2:	1c63      	adds	r3, r4, #1
   1a8b4:	eeb0 9a40 	vmov.f32	s18, s0
   1a8b8:	d02e      	beq.n	1a918 <powf+0x80>
   1a8ba:	eeb4 8a48 	vcmp.f32	s16, s16
   1a8be:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   1a8c2:	d629      	bvs.n	1a918 <powf+0x80>
   1a8c4:	eef4 8a68 	vcmp.f32	s17, s17
   1a8c8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   1a8cc:	f180 80a2 	bvs.w	1aa14 <powf+0x17c>
   1a8d0:	eef5 8a40 	vcmp.f32	s17, #0.0
   1a8d4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   1a8d8:	d124      	bne.n	1a924 <powf+0x8c>
   1a8da:	eeb5 8a40 	vcmp.f32	s16, #0.0
   1a8de:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   1a8e2:	d159      	bne.n	1a998 <powf+0x100>
   1a8e4:	2301      	movs	r3, #1
   1a8e6:	4aa2      	ldr	r2, [pc, #648]	; (1ab70 <powf+0x2d8>)
   1a8e8:	9300      	str	r3, [sp, #0]
   1a8ea:	ee18 0a90 	vmov	r0, s17
   1a8ee:	2300      	movs	r3, #0
   1a8f0:	9201      	str	r2, [sp, #4]
   1a8f2:	9308      	str	r3, [sp, #32]
   1a8f4:	f000 ff3a 	bl	1b76c <__aeabi_f2d>
   1a8f8:	e9cd 0102 	strd	r0, r1, [sp, #8]
   1a8fc:	ee18 0a10 	vmov	r0, s16
   1a900:	f000 ff34 	bl	1b76c <__aeabi_f2d>
   1a904:	2200      	movs	r2, #0
   1a906:	2300      	movs	r3, #0
   1a908:	e9cd 0104 	strd	r0, r1, [sp, #16]
   1a90c:	e9cd 2306 	strd	r2, r3, [sp, #24]
   1a910:	2c00      	cmp	r4, #0
   1a912:	d067      	beq.n	1a9e4 <powf+0x14c>
   1a914:	eeb7 9a00 	vmov.f32	s18, #112	; 0x3f800000  1.0
   1a918:	eeb0 0a49 	vmov.f32	s0, s18
   1a91c:	b00b      	add	sp, #44	; 0x2c
   1a91e:	ecbd 8b04 	vpop	{d8-d9}
   1a922:	bdf0      	pop	{r4, r5, r6, r7, pc}
   1a924:	f000 fd3a 	bl	1b39c <finitef>
   1a928:	4604      	mov	r4, r0
   1a92a:	2800      	cmp	r0, #0
   1a92c:	f000 8091 	beq.w	1aa52 <powf+0x1ba>
   1a930:	eeb5 9a40 	vcmp.f32	s18, #0.0
   1a934:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   1a938:	d1ee      	bne.n	1a918 <powf+0x80>
   1a93a:	eeb0 0a68 	vmov.f32	s0, s17
   1a93e:	f000 fd2d 	bl	1b39c <finitef>
   1a942:	2800      	cmp	r0, #0
   1a944:	d0e8      	beq.n	1a918 <powf+0x80>
   1a946:	eeb0 0a48 	vmov.f32	s0, s16
   1a94a:	f000 fd27 	bl	1b39c <finitef>
   1a94e:	2800      	cmp	r0, #0
   1a950:	d0e2      	beq.n	1a918 <powf+0x80>
   1a952:	2304      	movs	r3, #4
   1a954:	4a86      	ldr	r2, [pc, #536]	; (1ab70 <powf+0x2d8>)
   1a956:	9300      	str	r3, [sp, #0]
   1a958:	ee18 0a90 	vmov	r0, s17
   1a95c:	2300      	movs	r3, #0
   1a95e:	9308      	str	r3, [sp, #32]
   1a960:	9201      	str	r2, [sp, #4]
   1a962:	f000 ff03 	bl	1b76c <__aeabi_f2d>
   1a966:	e9cd 0102 	strd	r0, r1, [sp, #8]
   1a96a:	ee18 0a10 	vmov	r0, s16
   1a96e:	f000 fefd 	bl	1b76c <__aeabi_f2d>
   1a972:	2600      	movs	r6, #0
   1a974:	2700      	movs	r7, #0
   1a976:	e9cd 0104 	strd	r0, r1, [sp, #16]
   1a97a:	e9cd 6706 	strd	r6, r7, [sp, #24]
   1a97e:	f995 3000 	ldrsb.w	r3, [r5]
   1a982:	2b02      	cmp	r3, #2
   1a984:	d003      	beq.n	1a98e <powf+0xf6>
   1a986:	4668      	mov	r0, sp
   1a988:	f000 fc6c 	bl	1b264 <matherr>
   1a98c:	bb80      	cbnz	r0, 1a9f0 <powf+0x158>
   1a98e:	f002 fd15 	bl	1d3bc <__errno>
   1a992:	2322      	movs	r3, #34	; 0x22
   1a994:	6003      	str	r3, [r0, #0]
   1a996:	e02b      	b.n	1a9f0 <powf+0x158>
   1a998:	eeb0 0a48 	vmov.f32	s0, s16
   1a99c:	f000 fcfe 	bl	1b39c <finitef>
   1a9a0:	2800      	cmp	r0, #0
   1a9a2:	d0b9      	beq.n	1a918 <powf+0x80>
   1a9a4:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
   1a9a8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   1a9ac:	d5b4      	bpl.n	1a918 <powf+0x80>
   1a9ae:	2301      	movs	r3, #1
   1a9b0:	4a6f      	ldr	r2, [pc, #444]	; (1ab70 <powf+0x2d8>)
   1a9b2:	9300      	str	r3, [sp, #0]
   1a9b4:	ee18 0a90 	vmov	r0, s17
   1a9b8:	2300      	movs	r3, #0
   1a9ba:	9308      	str	r3, [sp, #32]
   1a9bc:	9201      	str	r2, [sp, #4]
   1a9be:	f000 fed5 	bl	1b76c <__aeabi_f2d>
   1a9c2:	e9cd 0102 	strd	r0, r1, [sp, #8]
   1a9c6:	ee18 0a10 	vmov	r0, s16
   1a9ca:	f000 fecf 	bl	1b76c <__aeabi_f2d>
   1a9ce:	f995 3000 	ldrsb.w	r3, [r5]
   1a9d2:	e9cd 0104 	strd	r0, r1, [sp, #16]
   1a9d6:	2b00      	cmp	r3, #0
   1a9d8:	f040 809b 	bne.w	1ab12 <powf+0x27a>
   1a9dc:	2200      	movs	r2, #0
   1a9de:	2300      	movs	r3, #0
   1a9e0:	e9cd 2306 	strd	r2, r3, [sp, #24]
   1a9e4:	4668      	mov	r0, sp
   1a9e6:	f000 fc3d 	bl	1b264 <matherr>
   1a9ea:	2800      	cmp	r0, #0
   1a9ec:	f000 808c 	beq.w	1ab08 <powf+0x270>
   1a9f0:	9b08      	ldr	r3, [sp, #32]
   1a9f2:	b11b      	cbz	r3, 1a9fc <powf+0x164>
   1a9f4:	f002 fce2 	bl	1d3bc <__errno>
   1a9f8:	9b08      	ldr	r3, [sp, #32]
   1a9fa:	6003      	str	r3, [r0, #0]
   1a9fc:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
   1aa00:	f001 f9ea 	bl	1bdd8 <__aeabi_d2f>
   1aa04:	ee09 0a10 	vmov	s18, r0
   1aa08:	eeb0 0a49 	vmov.f32	s0, s18
   1aa0c:	b00b      	add	sp, #44	; 0x2c
   1aa0e:	ecbd 8b04 	vpop	{d8-d9}
   1aa12:	bdf0      	pop	{r4, r5, r6, r7, pc}
   1aa14:	eeb5 8a40 	vcmp.f32	s16, #0.0
   1aa18:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   1aa1c:	f47f af7c 	bne.w	1a918 <powf+0x80>
   1aa20:	2301      	movs	r3, #1
   1aa22:	4a53      	ldr	r2, [pc, #332]	; (1ab70 <powf+0x2d8>)
   1aa24:	9300      	str	r3, [sp, #0]
   1aa26:	ee18 0a90 	vmov	r0, s17
   1aa2a:	2300      	movs	r3, #0
   1aa2c:	9201      	str	r2, [sp, #4]
   1aa2e:	9308      	str	r3, [sp, #32]
   1aa30:	f000 fe9c 	bl	1b76c <__aeabi_f2d>
   1aa34:	e9cd 0102 	strd	r0, r1, [sp, #8]
   1aa38:	ee18 0a10 	vmov	r0, s16
   1aa3c:	f000 fe96 	bl	1b76c <__aeabi_f2d>
   1aa40:	4b4c      	ldr	r3, [pc, #304]	; (1ab74 <powf+0x2dc>)
   1aa42:	2200      	movs	r2, #0
   1aa44:	2c02      	cmp	r4, #2
   1aa46:	e9cd 0104 	strd	r0, r1, [sp, #16]
   1aa4a:	e9cd 2306 	strd	r2, r3, [sp, #24]
   1aa4e:	d1c9      	bne.n	1a9e4 <powf+0x14c>
   1aa50:	e760      	b.n	1a914 <powf+0x7c>
   1aa52:	eeb0 0a68 	vmov.f32	s0, s17
   1aa56:	f000 fca1 	bl	1b39c <finitef>
   1aa5a:	2800      	cmp	r0, #0
   1aa5c:	f43f af68 	beq.w	1a930 <powf+0x98>
   1aa60:	eeb0 0a48 	vmov.f32	s0, s16
   1aa64:	f000 fc9a 	bl	1b39c <finitef>
   1aa68:	2800      	cmp	r0, #0
   1aa6a:	f43f af61 	beq.w	1a930 <powf+0x98>
   1aa6e:	eeb4 9a49 	vcmp.f32	s18, s18
   1aa72:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   1aa76:	f180 8087 	bvs.w	1ab88 <powf+0x2f0>
   1aa7a:	4b3d      	ldr	r3, [pc, #244]	; (1ab70 <powf+0x2d8>)
   1aa7c:	9408      	str	r4, [sp, #32]
   1aa7e:	2203      	movs	r2, #3
   1aa80:	ee18 0a90 	vmov	r0, s17
   1aa84:	e88d 000c 	stmia.w	sp, {r2, r3}
   1aa88:	f000 fe70 	bl	1b76c <__aeabi_f2d>
   1aa8c:	e9cd 0102 	strd	r0, r1, [sp, #8]
   1aa90:	ee18 0a10 	vmov	r0, s16
   1aa94:	f000 fe6a 	bl	1b76c <__aeabi_f2d>
   1aa98:	f995 3000 	ldrsb.w	r3, [r5]
   1aa9c:	e9cd 0104 	strd	r0, r1, [sp, #16]
   1aaa0:	2b00      	cmp	r3, #0
   1aaa2:	d13d      	bne.n	1ab20 <powf+0x288>
   1aaa4:	4b34      	ldr	r3, [pc, #208]	; (1ab78 <powf+0x2e0>)
   1aaa6:	eef5 8ac0 	vcmpe.f32	s17, #0.0
   1aaaa:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
   1aaae:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   1aab2:	e9cd 2306 	strd	r2, r3, [sp, #24]
   1aab6:	f57f af66 	bpl.w	1a986 <powf+0xee>
   1aaba:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
   1aabe:	ee68 7a27 	vmul.f32	s15, s16, s15
   1aac2:	ee17 0a90 	vmov	r0, s15
   1aac6:	f000 fe51 	bl	1b76c <__aeabi_f2d>
   1aaca:	4606      	mov	r6, r0
   1aacc:	460f      	mov	r7, r1
   1aace:	ec47 6b10 	vmov	d0, r6, r7
   1aad2:	f000 fbc9 	bl	1b268 <rint>
   1aad6:	4630      	mov	r0, r6
   1aad8:	ec53 2b10 	vmov	r2, r3, d0
   1aadc:	4639      	mov	r1, r7
   1aade:	f001 f901 	bl	1bce4 <__aeabi_dcmpeq>
   1aae2:	2800      	cmp	r0, #0
   1aae4:	d13f      	bne.n	1ab66 <powf+0x2ce>
   1aae6:	4925      	ldr	r1, [pc, #148]	; (1ab7c <powf+0x2e4>)
   1aae8:	f995 3000 	ldrsb.w	r3, [r5]
   1aaec:	f04f 4060 	mov.w	r0, #3758096384	; 0xe0000000
   1aaf0:	e9cd 0106 	strd	r0, r1, [sp, #24]
   1aaf4:	e745      	b.n	1a982 <powf+0xea>
   1aaf6:	4610      	mov	r0, r2
   1aaf8:	4619      	mov	r1, r3
   1aafa:	f000 ffb5 	bl	1ba68 <__aeabi_ddiv>
   1aafe:	2c02      	cmp	r4, #2
   1ab00:	e9cd 0106 	strd	r0, r1, [sp, #24]
   1ab04:	f47f af6e 	bne.w	1a9e4 <powf+0x14c>
   1ab08:	f002 fc58 	bl	1d3bc <__errno>
   1ab0c:	2321      	movs	r3, #33	; 0x21
   1ab0e:	6003      	str	r3, [r0, #0]
   1ab10:	e76e      	b.n	1a9f0 <powf+0x158>
   1ab12:	491b      	ldr	r1, [pc, #108]	; (1ab80 <powf+0x2e8>)
   1ab14:	2000      	movs	r0, #0
   1ab16:	2b02      	cmp	r3, #2
   1ab18:	e9cd 0106 	strd	r0, r1, [sp, #24]
   1ab1c:	d0f4      	beq.n	1ab08 <powf+0x270>
   1ab1e:	e761      	b.n	1a9e4 <powf+0x14c>
   1ab20:	4918      	ldr	r1, [pc, #96]	; (1ab84 <powf+0x2ec>)
   1ab22:	eef5 8ac0 	vcmpe.f32	s17, #0.0
   1ab26:	2000      	movs	r0, #0
   1ab28:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   1ab2c:	e9cd 0106 	strd	r0, r1, [sp, #24]
   1ab30:	f57f af27 	bpl.w	1a982 <powf+0xea>
   1ab34:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
   1ab38:	ee68 7a27 	vmul.f32	s15, s16, s15
   1ab3c:	ee17 0a90 	vmov	r0, s15
   1ab40:	f000 fe14 	bl	1b76c <__aeabi_f2d>
   1ab44:	4606      	mov	r6, r0
   1ab46:	460f      	mov	r7, r1
   1ab48:	ec47 6b10 	vmov	d0, r6, r7
   1ab4c:	f000 fb8c 	bl	1b268 <rint>
   1ab50:	4630      	mov	r0, r6
   1ab52:	ec53 2b10 	vmov	r2, r3, d0
   1ab56:	4639      	mov	r1, r7
   1ab58:	f001 f8c4 	bl	1bce4 <__aeabi_dcmpeq>
   1ab5c:	b918      	cbnz	r0, 1ab66 <powf+0x2ce>
   1ab5e:	4b08      	ldr	r3, [pc, #32]	; (1ab80 <powf+0x2e8>)
   1ab60:	2200      	movs	r2, #0
   1ab62:	e9cd 2306 	strd	r2, r3, [sp, #24]
   1ab66:	f995 3000 	ldrsb.w	r3, [r5]
   1ab6a:	e70a      	b.n	1a982 <powf+0xea>
   1ab6c:	200000fc 	.word	0x200000fc
   1ab70:	00024770 	.word	0x00024770
   1ab74:	3ff00000 	.word	0x3ff00000
   1ab78:	47efffff 	.word	0x47efffff
   1ab7c:	c7efffff 	.word	0xc7efffff
   1ab80:	fff00000 	.word	0xfff00000
   1ab84:	7ff00000 	.word	0x7ff00000
   1ab88:	4b0c      	ldr	r3, [pc, #48]	; (1abbc <powf+0x324>)
   1ab8a:	9408      	str	r4, [sp, #32]
   1ab8c:	2201      	movs	r2, #1
   1ab8e:	ee18 0a90 	vmov	r0, s17
   1ab92:	e88d 000c 	stmia.w	sp, {r2, r3}
   1ab96:	f000 fde9 	bl	1b76c <__aeabi_f2d>
   1ab9a:	e9cd 0102 	strd	r0, r1, [sp, #8]
   1ab9e:	ee18 0a10 	vmov	r0, s16
   1aba2:	f000 fde3 	bl	1b76c <__aeabi_f2d>
   1aba6:	f995 4000 	ldrsb.w	r4, [r5]
   1abaa:	e9cd 0104 	strd	r0, r1, [sp, #16]
   1abae:	2200      	movs	r2, #0
   1abb0:	2300      	movs	r3, #0
   1abb2:	2c00      	cmp	r4, #0
   1abb4:	d19f      	bne.n	1aaf6 <powf+0x25e>
   1abb6:	e9cd 2306 	strd	r2, r3, [sp, #24]
   1abba:	e713      	b.n	1a9e4 <powf+0x14c>
   1abbc:	00024770 	.word	0x00024770

0001abc0 <sqrtf>:
   1abc0:	b510      	push	{r4, lr}
   1abc2:	ed2d 8b02 	vpush	{d8}
   1abc6:	b08a      	sub	sp, #40	; 0x28
   1abc8:	eeb0 8a40 	vmov.f32	s16, s0
   1abcc:	f000 fb46 	bl	1b25c <__ieee754_sqrtf>
   1abd0:	4b24      	ldr	r3, [pc, #144]	; (1ac64 <sqrtf+0xa4>)
   1abd2:	f993 4000 	ldrsb.w	r4, [r3]
   1abd6:	1c63      	adds	r3, r4, #1
   1abd8:	d009      	beq.n	1abee <sqrtf+0x2e>
   1abda:	eeb4 8a48 	vcmp.f32	s16, s16
   1abde:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   1abe2:	d604      	bvs.n	1abee <sqrtf+0x2e>
   1abe4:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
   1abe8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   1abec:	d403      	bmi.n	1abf6 <sqrtf+0x36>
   1abee:	b00a      	add	sp, #40	; 0x28
   1abf0:	ecbd 8b02 	vpop	{d8}
   1abf4:	bd10      	pop	{r4, pc}
   1abf6:	2301      	movs	r3, #1
   1abf8:	4a1b      	ldr	r2, [pc, #108]	; (1ac68 <sqrtf+0xa8>)
   1abfa:	9300      	str	r3, [sp, #0]
   1abfc:	ee18 0a10 	vmov	r0, s16
   1ac00:	2300      	movs	r3, #0
   1ac02:	9201      	str	r2, [sp, #4]
   1ac04:	9308      	str	r3, [sp, #32]
   1ac06:	f000 fdb1 	bl	1b76c <__aeabi_f2d>
   1ac0a:	2200      	movs	r2, #0
   1ac0c:	e9cd 0104 	strd	r0, r1, [sp, #16]
   1ac10:	e9cd 0102 	strd	r0, r1, [sp, #8]
   1ac14:	2300      	movs	r3, #0
   1ac16:	b1bc      	cbz	r4, 1ac48 <sqrtf+0x88>
   1ac18:	4610      	mov	r0, r2
   1ac1a:	4619      	mov	r1, r3
   1ac1c:	f000 ff24 	bl	1ba68 <__aeabi_ddiv>
   1ac20:	2c02      	cmp	r4, #2
   1ac22:	e9cd 0106 	strd	r0, r1, [sp, #24]
   1ac26:	d111      	bne.n	1ac4c <sqrtf+0x8c>
   1ac28:	f002 fbc8 	bl	1d3bc <__errno>
   1ac2c:	2321      	movs	r3, #33	; 0x21
   1ac2e:	6003      	str	r3, [r0, #0]
   1ac30:	9b08      	ldr	r3, [sp, #32]
   1ac32:	b98b      	cbnz	r3, 1ac58 <sqrtf+0x98>
   1ac34:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
   1ac38:	f001 f8ce 	bl	1bdd8 <__aeabi_d2f>
   1ac3c:	ee00 0a10 	vmov	s0, r0
   1ac40:	b00a      	add	sp, #40	; 0x28
   1ac42:	ecbd 8b02 	vpop	{d8}
   1ac46:	bd10      	pop	{r4, pc}
   1ac48:	e9cd 2306 	strd	r2, r3, [sp, #24]
   1ac4c:	4668      	mov	r0, sp
   1ac4e:	f000 fb09 	bl	1b264 <matherr>
   1ac52:	2800      	cmp	r0, #0
   1ac54:	d1ec      	bne.n	1ac30 <sqrtf+0x70>
   1ac56:	e7e7      	b.n	1ac28 <sqrtf+0x68>
   1ac58:	f002 fbb0 	bl	1d3bc <__errno>
   1ac5c:	9b08      	ldr	r3, [sp, #32]
   1ac5e:	6003      	str	r3, [r0, #0]
   1ac60:	e7e8      	b.n	1ac34 <sqrtf+0x74>
   1ac62:	bf00      	nop
   1ac64:	200000fc 	.word	0x200000fc
   1ac68:	00024778 	.word	0x00024778

0001ac6c <__ieee754_powf>:
   1ac6c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   1ac70:	ed2d 8b02 	vpush	{d8}
   1ac74:	b082      	sub	sp, #8
   1ac76:	edcd 0a00 	vstr	s1, [sp]
   1ac7a:	9c00      	ldr	r4, [sp, #0]
   1ac7c:	ed8d 0a01 	vstr	s0, [sp, #4]
   1ac80:	f034 4600 	bics.w	r6, r4, #2147483648	; 0x80000000
   1ac84:	d014      	beq.n	1acb0 <__ieee754_powf+0x44>
   1ac86:	f8dd 8004 	ldr.w	r8, [sp, #4]
   1ac8a:	f028 4700 	bic.w	r7, r8, #2147483648	; 0x80000000
   1ac8e:	f1b7 4fff 	cmp.w	r7, #2139095040	; 0x7f800000
   1ac92:	dd07      	ble.n	1aca4 <__ieee754_powf+0x38>
   1ac94:	4858      	ldr	r0, [pc, #352]	; (1adf8 <__ieee754_powf+0x18c>)
   1ac96:	b002      	add	sp, #8
   1ac98:	ecbd 8b02 	vpop	{d8}
   1ac9c:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   1aca0:	f000 bb86 	b.w	1b3b0 <nanf>
   1aca4:	f1b6 4fff 	cmp.w	r6, #2139095040	; 0x7f800000
   1aca8:	dd09      	ble.n	1acbe <__ieee754_powf+0x52>
   1acaa:	f1b7 5f7e 	cmp.w	r7, #1065353216	; 0x3f800000
   1acae:	d1f1      	bne.n	1ac94 <__ieee754_powf+0x28>
   1acb0:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
   1acb4:	b002      	add	sp, #8
   1acb6:	ecbd 8b02 	vpop	{d8}
   1acba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   1acbe:	f1b8 0f00 	cmp.w	r8, #0
   1acc2:	db4d      	blt.n	1ad60 <__ieee754_powf+0xf4>
   1acc4:	f04f 0a00 	mov.w	sl, #0
   1acc8:	f1b6 4fff 	cmp.w	r6, #2139095040	; 0x7f800000
   1accc:	d03f      	beq.n	1ad4e <__ieee754_powf+0xe2>
   1acce:	f1b6 5f7e 	cmp.w	r6, #1065353216	; 0x3f800000
   1acd2:	d058      	beq.n	1ad86 <__ieee754_powf+0x11a>
   1acd4:	f1b4 4f80 	cmp.w	r4, #1073741824	; 0x40000000
   1acd8:	d06e      	beq.n	1adb8 <__ieee754_powf+0x14c>
   1acda:	9d01      	ldr	r5, [sp, #4]
   1acdc:	f8dd 9000 	ldr.w	r9, [sp]
   1ace0:	f1b4 5f7c 	cmp.w	r4, #1056964608	; 0x3f000000
   1ace4:	ee00 5a10 	vmov	s0, r5
   1ace8:	d01c      	beq.n	1ad24 <__ieee754_powf+0xb8>
   1acea:	f000 fb4f 	bl	1b38c <fabsf>
   1acee:	f1b7 4fff 	cmp.w	r7, #2139095040	; 0x7f800000
   1acf2:	d04d      	beq.n	1ad90 <__ieee754_powf+0x124>
   1acf4:	2f00      	cmp	r7, #0
   1acf6:	d04b      	beq.n	1ad90 <__ieee754_powf+0x124>
   1acf8:	f1b7 5f7e 	cmp.w	r7, #1065353216	; 0x3f800000
   1acfc:	d048      	beq.n	1ad90 <__ieee754_powf+0x124>
   1acfe:	ea4f 73d8 	mov.w	r3, r8, lsr #31
   1ad02:	3b01      	subs	r3, #1
   1ad04:	ea5a 0203 	orrs.w	r2, sl, r3
   1ad08:	d06e      	beq.n	1ade8 <__ieee754_powf+0x17c>
   1ad0a:	f1b6 4f9a 	cmp.w	r6, #1291845632	; 0x4d000000
   1ad0e:	dd7b      	ble.n	1ae08 <__ieee754_powf+0x19c>
   1ad10:	4a3a      	ldr	r2, [pc, #232]	; (1adfc <__ieee754_powf+0x190>)
   1ad12:	4297      	cmp	r7, r2
   1ad14:	f300 81c8 	bgt.w	1b0a8 <__ieee754_powf+0x43c>
   1ad18:	2c00      	cmp	r4, #0
   1ad1a:	f2c0 81cb 	blt.w	1b0b4 <__ieee754_powf+0x448>
   1ad1e:	ed9f 0a38 	vldr	s0, [pc, #224]	; 1ae00 <__ieee754_powf+0x194>
   1ad22:	e7c7      	b.n	1acb4 <__ieee754_powf+0x48>
   1ad24:	f1b8 0f00 	cmp.w	r8, #0
   1ad28:	da4b      	bge.n	1adc2 <__ieee754_powf+0x156>
   1ad2a:	f000 fb2f 	bl	1b38c <fabsf>
   1ad2e:	f1b7 4fff 	cmp.w	r7, #2139095040	; 0x7f800000
   1ad32:	d001      	beq.n	1ad38 <__ieee754_powf+0xcc>
   1ad34:	2f00      	cmp	r7, #0
   1ad36:	d1df      	bne.n	1acf8 <__ieee754_powf+0x8c>
   1ad38:	f1a7 577e 	sub.w	r7, r7, #1065353216	; 0x3f800000
   1ad3c:	ea57 030a 	orrs.w	r3, r7, sl
   1ad40:	d04d      	beq.n	1adde <__ieee754_powf+0x172>
   1ad42:	f1ba 0f01 	cmp.w	sl, #1
   1ad46:	d1b5      	bne.n	1acb4 <__ieee754_powf+0x48>
   1ad48:	eeb1 0a40 	vneg.f32	s0, s0
   1ad4c:	e7b2      	b.n	1acb4 <__ieee754_powf+0x48>
   1ad4e:	f1b7 5f7e 	cmp.w	r7, #1065353216	; 0x3f800000
   1ad52:	d0ad      	beq.n	1acb0 <__ieee754_powf+0x44>
   1ad54:	dd29      	ble.n	1adaa <__ieee754_powf+0x13e>
   1ad56:	2c00      	cmp	r4, #0
   1ad58:	dbe1      	blt.n	1ad1e <__ieee754_powf+0xb2>
   1ad5a:	ed9d 0a00 	vldr	s0, [sp]
   1ad5e:	e7a9      	b.n	1acb4 <__ieee754_powf+0x48>
   1ad60:	f1b6 4f97 	cmp.w	r6, #1266679808	; 0x4b800000
   1ad64:	da1e      	bge.n	1ada4 <__ieee754_powf+0x138>
   1ad66:	f1b6 5f7e 	cmp.w	r6, #1065353216	; 0x3f800000
   1ad6a:	db09      	blt.n	1ad80 <__ieee754_powf+0x114>
   1ad6c:	15f3      	asrs	r3, r6, #23
   1ad6e:	f1c3 0396 	rsb	r3, r3, #150	; 0x96
   1ad72:	fa46 f203 	asr.w	r2, r6, r3
   1ad76:	fa02 f303 	lsl.w	r3, r2, r3
   1ad7a:	429e      	cmp	r6, r3
   1ad7c:	f000 818f 	beq.w	1b09e <__ieee754_powf+0x432>
   1ad80:	f04f 0a00 	mov.w	sl, #0
   1ad84:	e7a3      	b.n	1acce <__ieee754_powf+0x62>
   1ad86:	2c00      	cmp	r4, #0
   1ad88:	db22      	blt.n	1add0 <__ieee754_powf+0x164>
   1ad8a:	ed9d 0a01 	vldr	s0, [sp, #4]
   1ad8e:	e791      	b.n	1acb4 <__ieee754_powf+0x48>
   1ad90:	2c00      	cmp	r4, #0
   1ad92:	bfbc      	itt	lt
   1ad94:	eef7 7a00 	vmovlt.f32	s15, #112	; 0x3f800000  1.0
   1ad98:	ee87 0a80 	vdivlt.f32	s0, s15, s0
   1ad9c:	f1b8 0f00 	cmp.w	r8, #0
   1ada0:	da88      	bge.n	1acb4 <__ieee754_powf+0x48>
   1ada2:	e7c9      	b.n	1ad38 <__ieee754_powf+0xcc>
   1ada4:	f04f 0a02 	mov.w	sl, #2
   1ada8:	e78e      	b.n	1acc8 <__ieee754_powf+0x5c>
   1adaa:	2c00      	cmp	r4, #0
   1adac:	dab7      	bge.n	1ad1e <__ieee754_powf+0xb2>
   1adae:	eddd 7a00 	vldr	s15, [sp]
   1adb2:	eeb1 0a67 	vneg.f32	s0, s15
   1adb6:	e77d      	b.n	1acb4 <__ieee754_powf+0x48>
   1adb8:	eddd 7a01 	vldr	s15, [sp, #4]
   1adbc:	ee27 0aa7 	vmul.f32	s0, s15, s15
   1adc0:	e778      	b.n	1acb4 <__ieee754_powf+0x48>
   1adc2:	b002      	add	sp, #8
   1adc4:	ecbd 8b02 	vpop	{d8}
   1adc8:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   1adcc:	f000 ba46 	b.w	1b25c <__ieee754_sqrtf>
   1add0:	ed9d 7a01 	vldr	s14, [sp, #4]
   1add4:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
   1add8:	ee87 0a87 	vdiv.f32	s0, s15, s14
   1addc:	e76a      	b.n	1acb4 <__ieee754_powf+0x48>
   1adde:	ee70 7a40 	vsub.f32	s15, s0, s0
   1ade2:	ee87 0aa7 	vdiv.f32	s0, s15, s15
   1ade6:	e765      	b.n	1acb4 <__ieee754_powf+0x48>
   1ade8:	ee07 5a90 	vmov	s15, r5
   1adec:	ee77 7ae7 	vsub.f32	s15, s15, s15
   1adf0:	ee87 0aa7 	vdiv.f32	s0, s15, s15
   1adf4:	e75e      	b.n	1acb4 <__ieee754_powf+0x48>
   1adf6:	bf00      	nop
   1adf8:	0002420c 	.word	0x0002420c
   1adfc:	3f7ffff7 	.word	0x3f7ffff7
   1ae00:	00000000 	.word	0x00000000
   1ae04:	4b800000 	.word	0x4b800000
   1ae08:	f5b7 0f00 	cmp.w	r7, #8388608	; 0x800000
   1ae0c:	f280 815f 	bge.w	1b0ce <__ieee754_powf+0x462>
   1ae10:	ed5f 7a04 	vldr	s15, [pc, #-16]	; 1ae04 <__ieee754_powf+0x198>
   1ae14:	ee60 7a27 	vmul.f32	s15, s0, s15
   1ae18:	f06f 0217 	mvn.w	r2, #23
   1ae1c:	ee17 7a90 	vmov	r7, s15
   1ae20:	48ee      	ldr	r0, [pc, #952]	; (1b1dc <__ieee754_powf+0x570>)
   1ae22:	15f9      	asrs	r1, r7, #23
   1ae24:	f3c7 0716 	ubfx	r7, r7, #0, #23
   1ae28:	397f      	subs	r1, #127	; 0x7f
   1ae2a:	4287      	cmp	r7, r0
   1ae2c:	4411      	add	r1, r2
   1ae2e:	f047 527e 	orr.w	r2, r7, #1065353216	; 0x3f800000
   1ae32:	f340 8144 	ble.w	1b0be <__ieee754_powf+0x452>
   1ae36:	48ea      	ldr	r0, [pc, #936]	; (1b1e0 <__ieee754_powf+0x574>)
   1ae38:	4287      	cmp	r7, r0
   1ae3a:	f340 8191 	ble.w	1b160 <__ieee754_powf+0x4f4>
   1ae3e:	eddf 4ae9 	vldr	s9, [pc, #932]	; 1b1e4 <__ieee754_powf+0x578>
   1ae42:	3101      	adds	r1, #1
   1ae44:	f5a2 0200 	sub.w	r2, r2, #8388608	; 0x800000
   1ae48:	eef0 3a64 	vmov.f32	s7, s9
   1ae4c:	2500      	movs	r5, #0
   1ae4e:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
   1ae52:	ee06 2a90 	vmov	s13, r2
   1ae56:	ee76 7a86 	vadd.f32	s15, s13, s12
   1ae5a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
   1ae5e:	ee87 8a27 	vdiv.f32	s16, s14, s15
   1ae62:	1052      	asrs	r2, r2, #1
   1ae64:	f042 5200 	orr.w	r2, r2, #536870912	; 0x20000000
   1ae68:	f502 2280 	add.w	r2, r2, #262144	; 0x40000
   1ae6c:	442a      	add	r2, r5
   1ae6e:	48de      	ldr	r0, [pc, #888]	; (1b1e8 <__ieee754_powf+0x57c>)
   1ae70:	ee36 7ac6 	vsub.f32	s14, s13, s12
   1ae74:	ee07 2a90 	vmov	s15, r2
   1ae78:	ee27 4a08 	vmul.f32	s8, s14, s16
   1ae7c:	ee37 5ac6 	vsub.f32	s10, s15, s12
   1ae80:	eddf 8ada 	vldr	s17, [pc, #872]	; 1b1ec <__ieee754_powf+0x580>
   1ae84:	ed9f 0ada 	vldr	s0, [pc, #872]	; 1b1f0 <__ieee754_powf+0x584>
   1ae88:	eddf 1ada 	vldr	s3, [pc, #872]	; 1b1f4 <__ieee754_powf+0x588>
   1ae8c:	eddf 0ada 	vldr	s1, [pc, #872]	; 1b1f8 <__ieee754_powf+0x58c>
   1ae90:	ed9f 1ada 	vldr	s2, [pc, #872]	; 1b1fc <__ieee754_powf+0x590>
   1ae94:	ed9f 2ada 	vldr	s4, [pc, #872]	; 1b200 <__ieee754_powf+0x594>
   1ae98:	eddf 2ada 	vldr	s5, [pc, #872]	; 1b204 <__ieee754_powf+0x598>
   1ae9c:	ed9f 3ada 	vldr	s6, [pc, #872]	; 1b208 <__ieee754_powf+0x59c>
   1aea0:	ee24 6a04 	vmul.f32	s12, s8, s8
   1aea4:	ee14 2a10 	vmov	r2, s8
   1aea8:	eea6 0a28 	vfma.f32	s0, s12, s17
   1aeac:	4002      	ands	r2, r0
   1aeae:	ee76 6ac5 	vsub.f32	s13, s13, s10
   1aeb2:	eeb0 5a61 	vmov.f32	s10, s3
   1aeb6:	ee05 2a90 	vmov	s11, r2
   1aeba:	eea6 5a00 	vfma.f32	s10, s12, s0
   1aebe:	eef1 1a65 	vneg.f32	s3, s11
   1aec2:	eea1 7aa7 	vfma.f32	s14, s3, s15
   1aec6:	eef0 7a60 	vmov.f32	s15, s1
   1aeca:	eee6 7a05 	vfma.f32	s15, s12, s10
   1aece:	eea1 7aa6 	vfma.f32	s14, s3, s13
   1aed2:	eeb0 5a41 	vmov.f32	s10, s2
   1aed6:	eea6 5a27 	vfma.f32	s10, s12, s15
   1aeda:	ee67 6a08 	vmul.f32	s13, s14, s16
   1aede:	eeb0 7a42 	vmov.f32	s14, s4
   1aee2:	eea6 7a05 	vfma.f32	s14, s12, s10
   1aee6:	ee75 7a84 	vadd.f32	s15, s11, s8
   1aeea:	ee26 6a06 	vmul.f32	s12, s12, s12
   1aeee:	ee67 7aa6 	vmul.f32	s15, s15, s13
   1aef2:	eeb0 5a08 	vmov.f32	s10, #8	; 0x40400000  3.0
   1aef6:	eee6 7a07 	vfma.f32	s15, s12, s14
   1aefa:	eeb0 7a45 	vmov.f32	s14, s10
   1aefe:	eea5 7aa5 	vfma.f32	s14, s11, s11
   1af02:	ed9f 2ac2 	vldr	s4, [pc, #776]	; 1b20c <__ieee754_powf+0x5a0>
   1af06:	ee37 6a27 	vadd.f32	s12, s14, s15
   1af0a:	ee07 1a10 	vmov	s14, r1
   1af0e:	ee16 2a10 	vmov	r2, s12
   1af12:	4002      	ands	r2, r0
   1af14:	ee06 2a10 	vmov	s12, r2
   1af18:	ee36 5a45 	vsub.f32	s10, s12, s10
   1af1c:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
   1af20:	eea1 5aa5 	vfma.f32	s10, s3, s11
   1af24:	ee77 7ac5 	vsub.f32	s15, s15, s10
   1af28:	ee67 7a84 	vmul.f32	s15, s15, s8
   1af2c:	eee6 7a26 	vfma.f32	s15, s12, s13
   1af30:	eef0 6a67 	vmov.f32	s13, s15
   1af34:	eee5 6a86 	vfma.f32	s13, s11, s12
   1af38:	ee16 2a90 	vmov	r2, s13
   1af3c:	4002      	ands	r2, r0
   1af3e:	ee06 2a90 	vmov	s13, r2
   1af42:	eee1 6a86 	vfma.f32	s13, s3, s12
   1af46:	ee05 2a90 	vmov	s11, r2
   1af4a:	ee77 7ae6 	vsub.f32	s15, s15, s13
   1af4e:	ee67 7aa2 	vmul.f32	s15, s15, s5
   1af52:	eee5 7a83 	vfma.f32	s15, s11, s6
   1af56:	ee77 7aa3 	vadd.f32	s15, s15, s7
   1af5a:	eef0 6a67 	vmov.f32	s13, s15
   1af5e:	eee5 6a82 	vfma.f32	s13, s11, s4
   1af62:	ee76 6aa4 	vadd.f32	s13, s13, s9
   1af66:	ee76 6a87 	vadd.f32	s13, s13, s14
   1af6a:	ee16 2a90 	vmov	r2, s13
   1af6e:	4002      	ands	r2, r0
   1af70:	ee06 2a90 	vmov	s13, r2
   1af74:	ee36 7ac7 	vsub.f32	s14, s13, s14
   1af78:	ee37 7a64 	vsub.f32	s14, s14, s9
   1af7c:	eea5 7ac2 	vfms.f32	s14, s11, s4
   1af80:	ee77 7ac7 	vsub.f32	s15, s15, s14
   1af84:	f424 647f 	bic.w	r4, r4, #4080	; 0xff0
   1af88:	f024 040f 	bic.w	r4, r4, #15
   1af8c:	ee07 9a10 	vmov	s14, r9
   1af90:	ee06 4a10 	vmov	s12, r4
   1af94:	ee67 7a87 	vmul.f32	s15, s15, s14
   1af98:	ee37 6a46 	vsub.f32	s12, s14, s12
   1af9c:	ee07 4a10 	vmov	s14, r4
   1afa0:	eee6 7a86 	vfma.f32	s15, s13, s12
   1afa4:	f10a 3aff 	add.w	sl, sl, #4294967295
   1afa8:	ea5a 0303 	orrs.w	r3, sl, r3
   1afac:	ee26 7a87 	vmul.f32	s14, s13, s14
   1afb0:	eebf 0a00 	vmov.f32	s0, #240	; 0xbf800000 -1.0
   1afb4:	ee77 6a87 	vadd.f32	s13, s15, s14
   1afb8:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
   1afbc:	ee16 2a90 	vmov	r2, s13
   1afc0:	bf14      	ite	ne
   1afc2:	eeb0 8a46 	vmovne.f32	s16, s12
   1afc6:	eeb0 8a40 	vmoveq.f32	s16, s0
   1afca:	2a00      	cmp	r2, #0
   1afcc:	f022 4300 	bic.w	r3, r2, #2147483648	; 0x80000000
   1afd0:	f340 80b3 	ble.w	1b13a <__ieee754_powf+0x4ce>
   1afd4:	f1b3 4f86 	cmp.w	r3, #1124073472	; 0x43000000
   1afd8:	f300 8086 	bgt.w	1b0e8 <__ieee754_powf+0x47c>
   1afdc:	d079      	beq.n	1b0d2 <__ieee754_powf+0x466>
   1afde:	f1b3 5f7c 	cmp.w	r3, #1056964608	; 0x3f000000
   1afe2:	f300 8088 	bgt.w	1b0f6 <__ieee754_powf+0x48a>
   1afe6:	2100      	movs	r1, #0
   1afe8:	4608      	mov	r0, r1
   1afea:	f422 637f 	bic.w	r3, r2, #4080	; 0xff0
   1afee:	f023 030f 	bic.w	r3, r3, #15
   1aff2:	ee06 3a10 	vmov	s12, r3
   1aff6:	eddf 6a86 	vldr	s13, [pc, #536]	; 1b210 <__ieee754_powf+0x5a4>
   1affa:	eddf 5a86 	vldr	s11, [pc, #536]	; 1b214 <__ieee754_powf+0x5a8>
   1affe:	ed9f 3a86 	vldr	s6, [pc, #536]	; 1b218 <__ieee754_powf+0x5ac>
   1b002:	eddf 3a86 	vldr	s7, [pc, #536]	; 1b21c <__ieee754_powf+0x5b0>
   1b006:	ed9f 2a86 	vldr	s4, [pc, #536]	; 1b220 <__ieee754_powf+0x5b4>
   1b00a:	ed9f 4a86 	vldr	s8, [pc, #536]	; 1b224 <__ieee754_powf+0x5b8>
   1b00e:	eddf 4a86 	vldr	s9, [pc, #536]	; 1b228 <__ieee754_powf+0x5bc>
   1b012:	ed9f 5a86 	vldr	s10, [pc, #536]	; 1b22c <__ieee754_powf+0x5c0>
   1b016:	ee36 7a47 	vsub.f32	s14, s12, s14
   1b01a:	eef0 2a00 	vmov.f32	s5, #0	; 0x40000000  2.0
   1b01e:	ee77 7ac7 	vsub.f32	s15, s15, s14
   1b022:	ee26 7a26 	vmul.f32	s14, s12, s13
   1b026:	eea7 7aa5 	vfma.f32	s14, s15, s11
   1b02a:	eef7 5a00 	vmov.f32	s11, #112	; 0x3f800000  1.0
   1b02e:	eef0 7a47 	vmov.f32	s15, s14
   1b032:	eea6 7a03 	vfma.f32	s14, s12, s6
   1b036:	ee67 6a07 	vmul.f32	s13, s14, s14
   1b03a:	eef0 1a47 	vmov.f32	s3, s14
   1b03e:	eee6 1a43 	vfms.f32	s3, s12, s6
   1b042:	eeb0 6a63 	vmov.f32	s12, s7
   1b046:	eea6 6a82 	vfma.f32	s12, s13, s4
   1b04a:	ee77 7ae1 	vsub.f32	s15, s15, s3
   1b04e:	eea6 4a86 	vfma.f32	s8, s13, s12
   1b052:	eee7 7a27 	vfma.f32	s15, s14, s15
   1b056:	eee6 4a84 	vfma.f32	s9, s13, s8
   1b05a:	eea6 5aa4 	vfma.f32	s10, s13, s9
   1b05e:	eeb0 6a45 	vmov.f32	s12, s10
   1b062:	eeb0 5a47 	vmov.f32	s10, s14
   1b066:	eea6 5ac6 	vfms.f32	s10, s13, s12
   1b06a:	eef0 6a45 	vmov.f32	s13, s10
   1b06e:	ee36 6ae2 	vsub.f32	s12, s13, s5
   1b072:	ee27 5a05 	vmul.f32	s10, s14, s10
   1b076:	eec5 6a06 	vdiv.f32	s13, s10, s12
   1b07a:	ee76 7ae7 	vsub.f32	s15, s13, s15
   1b07e:	ee37 7ac7 	vsub.f32	s14, s15, s14
   1b082:	ee35 0ac7 	vsub.f32	s0, s11, s14
   1b086:	ee10 3a10 	vmov	r3, s0
   1b08a:	440b      	add	r3, r1
   1b08c:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
   1b090:	f2c0 80a0 	blt.w	1b1d4 <__ieee754_powf+0x568>
   1b094:	ee00 3a10 	vmov	s0, r3
   1b098:	ee20 0a08 	vmul.f32	s0, s0, s16
   1b09c:	e60a      	b.n	1acb4 <__ieee754_powf+0x48>
   1b09e:	f002 0201 	and.w	r2, r2, #1
   1b0a2:	f1c2 0a02 	rsb	sl, r2, #2
   1b0a6:	e612      	b.n	1acce <__ieee754_powf+0x62>
   1b0a8:	4a61      	ldr	r2, [pc, #388]	; (1b230 <__ieee754_powf+0x5c4>)
   1b0aa:	4297      	cmp	r7, r2
   1b0ac:	dd61      	ble.n	1b172 <__ieee754_powf+0x506>
   1b0ae:	2c00      	cmp	r4, #0
   1b0b0:	f77f ae35 	ble.w	1ad1e <__ieee754_powf+0xb2>
   1b0b4:	ed9f 0a5f 	vldr	s0, [pc, #380]	; 1b234 <__ieee754_powf+0x5c8>
   1b0b8:	ee20 0a00 	vmul.f32	s0, s0, s0
   1b0bc:	e5fa      	b.n	1acb4 <__ieee754_powf+0x48>
   1b0be:	eddf 4a49 	vldr	s9, [pc, #292]	; 1b1e4 <__ieee754_powf+0x578>
   1b0c2:	2500      	movs	r5, #0
   1b0c4:	eef0 3a64 	vmov.f32	s7, s9
   1b0c8:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
   1b0cc:	e6c1      	b.n	1ae52 <__ieee754_powf+0x1e6>
   1b0ce:	2200      	movs	r2, #0
   1b0d0:	e6a6      	b.n	1ae20 <__ieee754_powf+0x1b4>
   1b0d2:	ed9f 6a59 	vldr	s12, [pc, #356]	; 1b238 <__ieee754_powf+0x5cc>
   1b0d6:	ee76 6ac7 	vsub.f32	s13, s13, s14
   1b0da:	ee37 6a86 	vadd.f32	s12, s15, s12
   1b0de:	eeb4 6ae6 	vcmpe.f32	s12, s13
   1b0e2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   1b0e6:	dd06      	ble.n	1b0f6 <__ieee754_powf+0x48a>
   1b0e8:	eddf 7a52 	vldr	s15, [pc, #328]	; 1b234 <__ieee754_powf+0x5c8>
   1b0ec:	ee28 0a27 	vmul.f32	s0, s16, s15
   1b0f0:	ee20 0a27 	vmul.f32	s0, s0, s15
   1b0f4:	e5de      	b.n	1acb4 <__ieee754_powf+0x48>
   1b0f6:	15db      	asrs	r3, r3, #23
   1b0f8:	f44f 0100 	mov.w	r1, #8388608	; 0x800000
   1b0fc:	3b7e      	subs	r3, #126	; 0x7e
   1b0fe:	fa41 f303 	asr.w	r3, r1, r3
   1b102:	4413      	add	r3, r2
   1b104:	f3c3 51c7 	ubfx	r1, r3, #23, #8
   1b108:	4c4c      	ldr	r4, [pc, #304]	; (1b23c <__ieee754_powf+0x5d0>)
   1b10a:	397f      	subs	r1, #127	; 0x7f
   1b10c:	410c      	asrs	r4, r1
   1b10e:	f3c3 0016 	ubfx	r0, r3, #0, #23
   1b112:	ea23 0304 	bic.w	r3, r3, r4
   1b116:	ee06 3a90 	vmov	s13, r3
   1b11a:	ee37 7a66 	vsub.f32	s14, s14, s13
   1b11e:	f1c1 0117 	rsb	r1, r1, #23
   1b122:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
   1b126:	4108      	asrs	r0, r1
   1b128:	2a00      	cmp	r2, #0
   1b12a:	ee77 6a87 	vadd.f32	s13, s15, s14
   1b12e:	bfb8      	it	lt
   1b130:	4240      	neglt	r0, r0
   1b132:	05c1      	lsls	r1, r0, #23
   1b134:	ee16 2a90 	vmov	r2, s13
   1b138:	e757      	b.n	1afea <__ieee754_powf+0x37e>
   1b13a:	4941      	ldr	r1, [pc, #260]	; (1b240 <__ieee754_powf+0x5d4>)
   1b13c:	428b      	cmp	r3, r1
   1b13e:	dc08      	bgt.n	1b152 <__ieee754_powf+0x4e6>
   1b140:	f47f af4d 	bne.w	1afde <__ieee754_powf+0x372>
   1b144:	ee76 6ac7 	vsub.f32	s13, s13, s14
   1b148:	eef4 7ae6 	vcmpe.f32	s15, s13
   1b14c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   1b150:	d8d1      	bhi.n	1b0f6 <__ieee754_powf+0x48a>
   1b152:	eddf 7a3c 	vldr	s15, [pc, #240]	; 1b244 <__ieee754_powf+0x5d8>
   1b156:	ee28 0a27 	vmul.f32	s0, s16, s15
   1b15a:	ee20 0a27 	vmul.f32	s0, s0, s15
   1b15e:	e5a9      	b.n	1acb4 <__ieee754_powf+0x48>
   1b160:	eddf 4a39 	vldr	s9, [pc, #228]	; 1b248 <__ieee754_powf+0x5dc>
   1b164:	eddf 3a39 	vldr	s7, [pc, #228]	; 1b24c <__ieee754_powf+0x5e0>
   1b168:	f44f 1500 	mov.w	r5, #2097152	; 0x200000
   1b16c:	eeb7 6a08 	vmov.f32	s12, #120	; 0x3fc00000  1.5
   1b170:	e66f      	b.n	1ae52 <__ieee754_powf+0x1e6>
   1b172:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
   1b176:	ee30 0a67 	vsub.f32	s0, s0, s15
   1b17a:	eddf 6a1f 	vldr	s13, [pc, #124]	; 1b1f8 <__ieee754_powf+0x58c>
   1b17e:	eddf 7a34 	vldr	s15, [pc, #208]	; 1b250 <__ieee754_powf+0x5e4>
   1b182:	ed9f 5a34 	vldr	s10, [pc, #208]	; 1b254 <__ieee754_powf+0x5e8>
   1b186:	eddf 5a34 	vldr	s11, [pc, #208]	; 1b258 <__ieee754_powf+0x5ec>
   1b18a:	eeb1 6a40 	vneg.f32	s12, s0
   1b18e:	eeb5 7a00 	vmov.f32	s14, #80	; 0x3e800000  0.250
   1b192:	eee6 6a07 	vfma.f32	s13, s12, s14
   1b196:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
   1b19a:	eea6 7a26 	vfma.f32	s14, s12, s13
   1b19e:	ee60 6a00 	vmul.f32	s13, s0, s0
   1b1a2:	ee27 7a26 	vmul.f32	s14, s14, s13
   1b1a6:	ee67 7ac7 	vnmul.f32	s15, s15, s14
   1b1aa:	eee0 7a05 	vfma.f32	s15, s0, s10
   1b1ae:	eef0 6a67 	vmov.f32	s13, s15
   1b1b2:	eee0 6a25 	vfma.f32	s13, s0, s11
   1b1b6:	ee16 2a90 	vmov	r2, s13
   1b1ba:	f422 627f 	bic.w	r2, r2, #4080	; 0xff0
   1b1be:	f022 020f 	bic.w	r2, r2, #15
   1b1c2:	ee07 2a10 	vmov	s14, r2
   1b1c6:	eea6 7a25 	vfma.f32	s14, s12, s11
   1b1ca:	ee06 2a90 	vmov	s13, r2
   1b1ce:	ee77 7ac7 	vsub.f32	s15, s15, s14
   1b1d2:	e6d7      	b.n	1af84 <__ieee754_powf+0x318>
   1b1d4:	f000 f8f2 	bl	1b3bc <scalbnf>
   1b1d8:	e75e      	b.n	1b098 <__ieee754_powf+0x42c>
   1b1da:	bf00      	nop
   1b1dc:	001cc471 	.word	0x001cc471
   1b1e0:	005db3d6 	.word	0x005db3d6
   1b1e4:	00000000 	.word	0x00000000
   1b1e8:	fffff000 	.word	0xfffff000
   1b1ec:	3e53f142 	.word	0x3e53f142
   1b1f0:	3e6c3255 	.word	0x3e6c3255
   1b1f4:	3e8ba305 	.word	0x3e8ba305
   1b1f8:	3eaaaaab 	.word	0x3eaaaaab
   1b1fc:	3edb6db7 	.word	0x3edb6db7
   1b200:	3f19999a 	.word	0x3f19999a
   1b204:	3f76384f 	.word	0x3f76384f
   1b208:	369dc3a0 	.word	0x369dc3a0
   1b20c:	3f763800 	.word	0x3f763800
   1b210:	35bfbe8c 	.word	0x35bfbe8c
   1b214:	3f317218 	.word	0x3f317218
   1b218:	3f317200 	.word	0x3f317200
   1b21c:	b5ddea0e 	.word	0xb5ddea0e
   1b220:	3331bb4c 	.word	0x3331bb4c
   1b224:	388ab355 	.word	0x388ab355
   1b228:	bb360b61 	.word	0xbb360b61
   1b22c:	3e2aaaab 	.word	0x3e2aaaab
   1b230:	3f800007 	.word	0x3f800007
   1b234:	7149f2ca 	.word	0x7149f2ca
   1b238:	3338aa3c 	.word	0x3338aa3c
   1b23c:	007fffff 	.word	0x007fffff
   1b240:	43160000 	.word	0x43160000
   1b244:	0da24260 	.word	0x0da24260
   1b248:	3f15c000 	.word	0x3f15c000
   1b24c:	35d1cfdc 	.word	0x35d1cfdc
   1b250:	3fb8aa3b 	.word	0x3fb8aa3b
   1b254:	36eca570 	.word	0x36eca570
   1b258:	3fb8aa00 	.word	0x3fb8aa00

0001b25c <__ieee754_sqrtf>:
   1b25c:	eeb1 0ac0 	vsqrt.f32	s0, s0
   1b260:	4770      	bx	lr
   1b262:	bf00      	nop

0001b264 <matherr>:
   1b264:	2000      	movs	r0, #0
   1b266:	4770      	bx	lr

0001b268 <rint>:
   1b268:	b5f0      	push	{r4, r5, r6, r7, lr}
   1b26a:	ec53 2b10 	vmov	r2, r3, d0
   1b26e:	f3c3 560a 	ubfx	r6, r3, #20, #11
   1b272:	f2a6 30ff 	subw	r0, r6, #1023	; 0x3ff
   1b276:	2813      	cmp	r0, #19
   1b278:	b083      	sub	sp, #12
   1b27a:	4619      	mov	r1, r3
   1b27c:	ea4f 74d3 	mov.w	r4, r3, lsr #31
   1b280:	ee10 5a10 	vmov	r5, s0
   1b284:	dc2f      	bgt.n	1b2e6 <rint+0x7e>
   1b286:	2800      	cmp	r0, #0
   1b288:	db49      	blt.n	1b31e <rint+0xb6>
   1b28a:	4e3e      	ldr	r6, [pc, #248]	; (1b384 <rint+0x11c>)
   1b28c:	4106      	asrs	r6, r0
   1b28e:	ea03 0706 	and.w	r7, r3, r6
   1b292:	4317      	orrs	r7, r2
   1b294:	d02c      	beq.n	1b2f0 <rint+0x88>
   1b296:	0876      	lsrs	r6, r6, #1
   1b298:	4033      	ands	r3, r6
   1b29a:	431d      	orrs	r5, r3
   1b29c:	d00c      	beq.n	1b2b8 <rint+0x50>
   1b29e:	f44f 2380 	mov.w	r3, #262144	; 0x40000
   1b2a2:	2813      	cmp	r0, #19
   1b2a4:	ea21 0606 	bic.w	r6, r1, r6
   1b2a8:	fa43 f100 	asr.w	r1, r3, r0
   1b2ac:	ea41 0106 	orr.w	r1, r1, r6
   1b2b0:	bf0c      	ite	eq
   1b2b2:	f04f 4500 	moveq.w	r5, #2147483648	; 0x80000000
   1b2b6:	2500      	movne	r5, #0
   1b2b8:	4833      	ldr	r0, [pc, #204]	; (1b388 <rint+0x120>)
   1b2ba:	eb00 04c4 	add.w	r4, r0, r4, lsl #3
   1b2be:	462a      	mov	r2, r5
   1b2c0:	e9d4 4500 	ldrd	r4, r5, [r4]
   1b2c4:	4610      	mov	r0, r2
   1b2c6:	462b      	mov	r3, r5
   1b2c8:	4622      	mov	r2, r4
   1b2ca:	f000 f8f1 	bl	1b4b0 <__adddf3>
   1b2ce:	e9cd 0100 	strd	r0, r1, [sp]
   1b2d2:	4622      	mov	r2, r4
   1b2d4:	462b      	mov	r3, r5
   1b2d6:	e9dd 0100 	ldrd	r0, r1, [sp]
   1b2da:	f000 f8e7 	bl	1b4ac <__aeabi_dsub>
   1b2de:	ec41 0b10 	vmov	d0, r0, r1
   1b2e2:	b003      	add	sp, #12
   1b2e4:	bdf0      	pop	{r4, r5, r6, r7, pc}
   1b2e6:	2833      	cmp	r0, #51	; 0x33
   1b2e8:	dd06      	ble.n	1b2f8 <rint+0x90>
   1b2ea:	f5b0 6f80 	cmp.w	r0, #1024	; 0x400
   1b2ee:	d040      	beq.n	1b372 <rint+0x10a>
   1b2f0:	ec43 2b10 	vmov	d0, r2, r3
   1b2f4:	b003      	add	sp, #12
   1b2f6:	bdf0      	pop	{r4, r5, r6, r7, pc}
   1b2f8:	f2a6 4613 	subw	r6, r6, #1043	; 0x413
   1b2fc:	f04f 30ff 	mov.w	r0, #4294967295
   1b300:	40f0      	lsrs	r0, r6
   1b302:	4202      	tst	r2, r0
   1b304:	d0f4      	beq.n	1b2f0 <rint+0x88>
   1b306:	0840      	lsrs	r0, r0, #1
   1b308:	4202      	tst	r2, r0
   1b30a:	d0d5      	beq.n	1b2b8 <rint+0x50>
   1b30c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   1b310:	ea25 0000 	bic.w	r0, r5, r0
   1b314:	fa43 f606 	asr.w	r6, r3, r6
   1b318:	ea46 0500 	orr.w	r5, r6, r0
   1b31c:	e7cc      	b.n	1b2b8 <rint+0x50>
   1b31e:	f023 4000 	bic.w	r0, r3, #2147483648	; 0x80000000
   1b322:	4310      	orrs	r0, r2
   1b324:	d0e4      	beq.n	1b2f0 <rint+0x88>
   1b326:	f3c3 0013 	ubfx	r0, r3, #0, #20
   1b32a:	4310      	orrs	r0, r2
   1b32c:	4247      	negs	r7, r0
   1b32e:	4307      	orrs	r7, r0
   1b330:	4d15      	ldr	r5, [pc, #84]	; (1b388 <rint+0x120>)
   1b332:	0c5e      	lsrs	r6, r3, #17
   1b334:	0b3f      	lsrs	r7, r7, #12
   1b336:	f407 2300 	and.w	r3, r7, #524288	; 0x80000
   1b33a:	0476      	lsls	r6, r6, #17
   1b33c:	eb05 02c4 	add.w	r2, r5, r4, lsl #3
   1b340:	ea43 0106 	orr.w	r1, r3, r6
   1b344:	e9d2 6700 	ldrd	r6, r7, [r2]
   1b348:	ee10 0a10 	vmov	r0, s0
   1b34c:	4632      	mov	r2, r6
   1b34e:	463b      	mov	r3, r7
   1b350:	f000 f8ae 	bl	1b4b0 <__adddf3>
   1b354:	e9cd 0100 	strd	r0, r1, [sp]
   1b358:	463b      	mov	r3, r7
   1b35a:	4632      	mov	r2, r6
   1b35c:	e9dd 0100 	ldrd	r0, r1, [sp]
   1b360:	f000 f8a4 	bl	1b4ac <__aeabi_dsub>
   1b364:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
   1b368:	ea43 71c4 	orr.w	r1, r3, r4, lsl #31
   1b36c:	ec41 0b10 	vmov	d0, r0, r1
   1b370:	e7c0      	b.n	1b2f4 <rint+0x8c>
   1b372:	ee10 0a10 	vmov	r0, s0
   1b376:	4619      	mov	r1, r3
   1b378:	f000 f89a 	bl	1b4b0 <__adddf3>
   1b37c:	ec41 0b10 	vmov	d0, r0, r1
   1b380:	e7b8      	b.n	1b2f4 <rint+0x8c>
   1b382:	bf00      	nop
   1b384:	000fffff 	.word	0x000fffff
   1b388:	00024780 	.word	0x00024780

0001b38c <fabsf>:
   1b38c:	ee10 3a10 	vmov	r3, s0
   1b390:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
   1b394:	ee00 3a10 	vmov	s0, r3
   1b398:	4770      	bx	lr
   1b39a:	bf00      	nop

0001b39c <finitef>:
   1b39c:	ee10 3a10 	vmov	r3, s0
   1b3a0:	f023 4000 	bic.w	r0, r3, #2147483648	; 0x80000000
   1b3a4:	f1b0 4fff 	cmp.w	r0, #2139095040	; 0x7f800000
   1b3a8:	bfac      	ite	ge
   1b3aa:	2000      	movge	r0, #0
   1b3ac:	2001      	movlt	r0, #1
   1b3ae:	4770      	bx	lr

0001b3b0 <nanf>:
   1b3b0:	ed9f 0a01 	vldr	s0, [pc, #4]	; 1b3b8 <nanf+0x8>
   1b3b4:	4770      	bx	lr
   1b3b6:	bf00      	nop
   1b3b8:	7fc00000 	.word	0x7fc00000

0001b3bc <scalbnf>:
   1b3bc:	b508      	push	{r3, lr}
   1b3be:	ee10 3a10 	vmov	r3, s0
   1b3c2:	f033 4200 	bics.w	r2, r3, #2147483648	; 0x80000000
   1b3c6:	ed2d 8b02 	vpush	{d8}
   1b3ca:	d011      	beq.n	1b3f0 <scalbnf+0x34>
   1b3cc:	f1b2 4fff 	cmp.w	r2, #2139095040	; 0x7f800000
   1b3d0:	d211      	bcs.n	1b3f6 <scalbnf+0x3a>
   1b3d2:	f5b2 0f00 	cmp.w	r2, #8388608	; 0x800000
   1b3d6:	d313      	bcc.n	1b400 <scalbnf+0x44>
   1b3d8:	0dd2      	lsrs	r2, r2, #23
   1b3da:	4402      	add	r2, r0
   1b3dc:	2afe      	cmp	r2, #254	; 0xfe
   1b3de:	dc2e      	bgt.n	1b43e <scalbnf+0x82>
   1b3e0:	2a00      	cmp	r2, #0
   1b3e2:	dd1a      	ble.n	1b41a <scalbnf+0x5e>
   1b3e4:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
   1b3e8:	ea43 53c2 	orr.w	r3, r3, r2, lsl #23
   1b3ec:	ee00 3a10 	vmov	s0, r3
   1b3f0:	ecbd 8b02 	vpop	{d8}
   1b3f4:	bd08      	pop	{r3, pc}
   1b3f6:	ecbd 8b02 	vpop	{d8}
   1b3fa:	ee30 0a00 	vadd.f32	s0, s0, s0
   1b3fe:	bd08      	pop	{r3, pc}
   1b400:	4b1d      	ldr	r3, [pc, #116]	; (1b478 <scalbnf+0xbc>)
   1b402:	eddf 7a1e 	vldr	s15, [pc, #120]	; 1b47c <scalbnf+0xc0>
   1b406:	4298      	cmp	r0, r3
   1b408:	ee20 0a27 	vmul.f32	s0, s0, s15
   1b40c:	db22      	blt.n	1b454 <scalbnf+0x98>
   1b40e:	ee10 3a10 	vmov	r3, s0
   1b412:	f3c3 52c7 	ubfx	r2, r3, #23, #8
   1b416:	3a19      	subs	r2, #25
   1b418:	e7df      	b.n	1b3da <scalbnf+0x1e>
   1b41a:	f112 0f16 	cmn.w	r2, #22
   1b41e:	da1e      	bge.n	1b45e <scalbnf+0xa2>
   1b420:	f24c 3350 	movw	r3, #50000	; 0xc350
   1b424:	4298      	cmp	r0, r3
   1b426:	dc0a      	bgt.n	1b43e <scalbnf+0x82>
   1b428:	ed9f 8a15 	vldr	s16, [pc, #84]	; 1b480 <scalbnf+0xc4>
   1b42c:	eef0 0a40 	vmov.f32	s1, s0
   1b430:	eeb0 0a48 	vmov.f32	s0, s16
   1b434:	f000 f82a 	bl	1b48c <copysignf>
   1b438:	ee20 0a08 	vmul.f32	s0, s0, s16
   1b43c:	e7d8      	b.n	1b3f0 <scalbnf+0x34>
   1b43e:	ed9f 8a11 	vldr	s16, [pc, #68]	; 1b484 <scalbnf+0xc8>
   1b442:	eef0 0a40 	vmov.f32	s1, s0
   1b446:	eeb0 0a48 	vmov.f32	s0, s16
   1b44a:	f000 f81f 	bl	1b48c <copysignf>
   1b44e:	ee20 0a08 	vmul.f32	s0, s0, s16
   1b452:	e7cd      	b.n	1b3f0 <scalbnf+0x34>
   1b454:	eddf 0a0a 	vldr	s1, [pc, #40]	; 1b480 <scalbnf+0xc4>
   1b458:	ee20 0a20 	vmul.f32	s0, s0, s1
   1b45c:	e7c8      	b.n	1b3f0 <scalbnf+0x34>
   1b45e:	3219      	adds	r2, #25
   1b460:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
   1b464:	ea43 53c2 	orr.w	r3, r3, r2, lsl #23
   1b468:	eddf 7a07 	vldr	s15, [pc, #28]	; 1b488 <scalbnf+0xcc>
   1b46c:	ee00 3a10 	vmov	s0, r3
   1b470:	ee20 0a27 	vmul.f32	s0, s0, s15
   1b474:	e7bc      	b.n	1b3f0 <scalbnf+0x34>
   1b476:	bf00      	nop
   1b478:	ffff3cb0 	.word	0xffff3cb0
   1b47c:	4c000000 	.word	0x4c000000
   1b480:	0da24260 	.word	0x0da24260
   1b484:	7149f2ca 	.word	0x7149f2ca
   1b488:	33000000 	.word	0x33000000

0001b48c <copysignf>:
   1b48c:	ee10 3a10 	vmov	r3, s0
   1b490:	ee10 2a90 	vmov	r2, s1
   1b494:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
   1b498:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
   1b49c:	4313      	orrs	r3, r2
   1b49e:	ee00 3a10 	vmov	s0, r3
   1b4a2:	4770      	bx	lr

0001b4a4 <__aeabi_drsub>:
   1b4a4:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
   1b4a8:	e002      	b.n	1b4b0 <__adddf3>
   1b4aa:	bf00      	nop

0001b4ac <__aeabi_dsub>:
   1b4ac:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0001b4b0 <__adddf3>:
   1b4b0:	b530      	push	{r4, r5, lr}
   1b4b2:	ea4f 0441 	mov.w	r4, r1, lsl #1
   1b4b6:	ea4f 0543 	mov.w	r5, r3, lsl #1
   1b4ba:	ea94 0f05 	teq	r4, r5
   1b4be:	bf08      	it	eq
   1b4c0:	ea90 0f02 	teqeq	r0, r2
   1b4c4:	bf1f      	itttt	ne
   1b4c6:	ea54 0c00 	orrsne.w	ip, r4, r0
   1b4ca:	ea55 0c02 	orrsne.w	ip, r5, r2
   1b4ce:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
   1b4d2:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   1b4d6:	f000 80e2 	beq.w	1b69e <__adddf3+0x1ee>
   1b4da:	ea4f 5454 	mov.w	r4, r4, lsr #21
   1b4de:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
   1b4e2:	bfb8      	it	lt
   1b4e4:	426d      	neglt	r5, r5
   1b4e6:	dd0c      	ble.n	1b502 <__adddf3+0x52>
   1b4e8:	442c      	add	r4, r5
   1b4ea:	ea80 0202 	eor.w	r2, r0, r2
   1b4ee:	ea81 0303 	eor.w	r3, r1, r3
   1b4f2:	ea82 0000 	eor.w	r0, r2, r0
   1b4f6:	ea83 0101 	eor.w	r1, r3, r1
   1b4fa:	ea80 0202 	eor.w	r2, r0, r2
   1b4fe:	ea81 0303 	eor.w	r3, r1, r3
   1b502:	2d36      	cmp	r5, #54	; 0x36
   1b504:	bf88      	it	hi
   1b506:	bd30      	pophi	{r4, r5, pc}
   1b508:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
   1b50c:	ea4f 3101 	mov.w	r1, r1, lsl #12
   1b510:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
   1b514:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
   1b518:	d002      	beq.n	1b520 <__adddf3+0x70>
   1b51a:	4240      	negs	r0, r0
   1b51c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   1b520:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
   1b524:	ea4f 3303 	mov.w	r3, r3, lsl #12
   1b528:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
   1b52c:	d002      	beq.n	1b534 <__adddf3+0x84>
   1b52e:	4252      	negs	r2, r2
   1b530:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
   1b534:	ea94 0f05 	teq	r4, r5
   1b538:	f000 80a7 	beq.w	1b68a <__adddf3+0x1da>
   1b53c:	f1a4 0401 	sub.w	r4, r4, #1
   1b540:	f1d5 0e20 	rsbs	lr, r5, #32
   1b544:	db0d      	blt.n	1b562 <__adddf3+0xb2>
   1b546:	fa02 fc0e 	lsl.w	ip, r2, lr
   1b54a:	fa22 f205 	lsr.w	r2, r2, r5
   1b54e:	1880      	adds	r0, r0, r2
   1b550:	f141 0100 	adc.w	r1, r1, #0
   1b554:	fa03 f20e 	lsl.w	r2, r3, lr
   1b558:	1880      	adds	r0, r0, r2
   1b55a:	fa43 f305 	asr.w	r3, r3, r5
   1b55e:	4159      	adcs	r1, r3
   1b560:	e00e      	b.n	1b580 <__adddf3+0xd0>
   1b562:	f1a5 0520 	sub.w	r5, r5, #32
   1b566:	f10e 0e20 	add.w	lr, lr, #32
   1b56a:	2a01      	cmp	r2, #1
   1b56c:	fa03 fc0e 	lsl.w	ip, r3, lr
   1b570:	bf28      	it	cs
   1b572:	f04c 0c02 	orrcs.w	ip, ip, #2
   1b576:	fa43 f305 	asr.w	r3, r3, r5
   1b57a:	18c0      	adds	r0, r0, r3
   1b57c:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
   1b580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   1b584:	d507      	bpl.n	1b596 <__adddf3+0xe6>
   1b586:	f04f 0e00 	mov.w	lr, #0
   1b58a:	f1dc 0c00 	rsbs	ip, ip, #0
   1b58e:	eb7e 0000 	sbcs.w	r0, lr, r0
   1b592:	eb6e 0101 	sbc.w	r1, lr, r1
   1b596:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
   1b59a:	d31b      	bcc.n	1b5d4 <__adddf3+0x124>
   1b59c:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
   1b5a0:	d30c      	bcc.n	1b5bc <__adddf3+0x10c>
   1b5a2:	0849      	lsrs	r1, r1, #1
   1b5a4:	ea5f 0030 	movs.w	r0, r0, rrx
   1b5a8:	ea4f 0c3c 	mov.w	ip, ip, rrx
   1b5ac:	f104 0401 	add.w	r4, r4, #1
   1b5b0:	ea4f 5244 	mov.w	r2, r4, lsl #21
   1b5b4:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
   1b5b8:	f080 809a 	bcs.w	1b6f0 <__adddf3+0x240>
   1b5bc:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
   1b5c0:	bf08      	it	eq
   1b5c2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
   1b5c6:	f150 0000 	adcs.w	r0, r0, #0
   1b5ca:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   1b5ce:	ea41 0105 	orr.w	r1, r1, r5
   1b5d2:	bd30      	pop	{r4, r5, pc}
   1b5d4:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
   1b5d8:	4140      	adcs	r0, r0
   1b5da:	eb41 0101 	adc.w	r1, r1, r1
   1b5de:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   1b5e2:	f1a4 0401 	sub.w	r4, r4, #1
   1b5e6:	d1e9      	bne.n	1b5bc <__adddf3+0x10c>
   1b5e8:	f091 0f00 	teq	r1, #0
   1b5ec:	bf04      	itt	eq
   1b5ee:	4601      	moveq	r1, r0
   1b5f0:	2000      	moveq	r0, #0
   1b5f2:	fab1 f381 	clz	r3, r1
   1b5f6:	bf08      	it	eq
   1b5f8:	3320      	addeq	r3, #32
   1b5fa:	f1a3 030b 	sub.w	r3, r3, #11
   1b5fe:	f1b3 0220 	subs.w	r2, r3, #32
   1b602:	da0c      	bge.n	1b61e <__adddf3+0x16e>
   1b604:	320c      	adds	r2, #12
   1b606:	dd08      	ble.n	1b61a <__adddf3+0x16a>
   1b608:	f102 0c14 	add.w	ip, r2, #20
   1b60c:	f1c2 020c 	rsb	r2, r2, #12
   1b610:	fa01 f00c 	lsl.w	r0, r1, ip
   1b614:	fa21 f102 	lsr.w	r1, r1, r2
   1b618:	e00c      	b.n	1b634 <__adddf3+0x184>
   1b61a:	f102 0214 	add.w	r2, r2, #20
   1b61e:	bfd8      	it	le
   1b620:	f1c2 0c20 	rsble	ip, r2, #32
   1b624:	fa01 f102 	lsl.w	r1, r1, r2
   1b628:	fa20 fc0c 	lsr.w	ip, r0, ip
   1b62c:	bfdc      	itt	le
   1b62e:	ea41 010c 	orrle.w	r1, r1, ip
   1b632:	4090      	lslle	r0, r2
   1b634:	1ae4      	subs	r4, r4, r3
   1b636:	bfa2      	ittt	ge
   1b638:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
   1b63c:	4329      	orrge	r1, r5
   1b63e:	bd30      	popge	{r4, r5, pc}
   1b640:	ea6f 0404 	mvn.w	r4, r4
   1b644:	3c1f      	subs	r4, #31
   1b646:	da1c      	bge.n	1b682 <__adddf3+0x1d2>
   1b648:	340c      	adds	r4, #12
   1b64a:	dc0e      	bgt.n	1b66a <__adddf3+0x1ba>
   1b64c:	f104 0414 	add.w	r4, r4, #20
   1b650:	f1c4 0220 	rsb	r2, r4, #32
   1b654:	fa20 f004 	lsr.w	r0, r0, r4
   1b658:	fa01 f302 	lsl.w	r3, r1, r2
   1b65c:	ea40 0003 	orr.w	r0, r0, r3
   1b660:	fa21 f304 	lsr.w	r3, r1, r4
   1b664:	ea45 0103 	orr.w	r1, r5, r3
   1b668:	bd30      	pop	{r4, r5, pc}
   1b66a:	f1c4 040c 	rsb	r4, r4, #12
   1b66e:	f1c4 0220 	rsb	r2, r4, #32
   1b672:	fa20 f002 	lsr.w	r0, r0, r2
   1b676:	fa01 f304 	lsl.w	r3, r1, r4
   1b67a:	ea40 0003 	orr.w	r0, r0, r3
   1b67e:	4629      	mov	r1, r5
   1b680:	bd30      	pop	{r4, r5, pc}
   1b682:	fa21 f004 	lsr.w	r0, r1, r4
   1b686:	4629      	mov	r1, r5
   1b688:	bd30      	pop	{r4, r5, pc}
   1b68a:	f094 0f00 	teq	r4, #0
   1b68e:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
   1b692:	bf06      	itte	eq
   1b694:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
   1b698:	3401      	addeq	r4, #1
   1b69a:	3d01      	subne	r5, #1
   1b69c:	e74e      	b.n	1b53c <__adddf3+0x8c>
   1b69e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   1b6a2:	bf18      	it	ne
   1b6a4:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   1b6a8:	d029      	beq.n	1b6fe <__adddf3+0x24e>
   1b6aa:	ea94 0f05 	teq	r4, r5
   1b6ae:	bf08      	it	eq
   1b6b0:	ea90 0f02 	teqeq	r0, r2
   1b6b4:	d005      	beq.n	1b6c2 <__adddf3+0x212>
   1b6b6:	ea54 0c00 	orrs.w	ip, r4, r0
   1b6ba:	bf04      	itt	eq
   1b6bc:	4619      	moveq	r1, r3
   1b6be:	4610      	moveq	r0, r2
   1b6c0:	bd30      	pop	{r4, r5, pc}
   1b6c2:	ea91 0f03 	teq	r1, r3
   1b6c6:	bf1e      	ittt	ne
   1b6c8:	2100      	movne	r1, #0
   1b6ca:	2000      	movne	r0, #0
   1b6cc:	bd30      	popne	{r4, r5, pc}
   1b6ce:	ea5f 5c54 	movs.w	ip, r4, lsr #21
   1b6d2:	d105      	bne.n	1b6e0 <__adddf3+0x230>
   1b6d4:	0040      	lsls	r0, r0, #1
   1b6d6:	4149      	adcs	r1, r1
   1b6d8:	bf28      	it	cs
   1b6da:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
   1b6de:	bd30      	pop	{r4, r5, pc}
   1b6e0:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
   1b6e4:	bf3c      	itt	cc
   1b6e6:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
   1b6ea:	bd30      	popcc	{r4, r5, pc}
   1b6ec:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   1b6f0:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
   1b6f4:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   1b6f8:	f04f 0000 	mov.w	r0, #0
   1b6fc:	bd30      	pop	{r4, r5, pc}
   1b6fe:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   1b702:	bf1a      	itte	ne
   1b704:	4619      	movne	r1, r3
   1b706:	4610      	movne	r0, r2
   1b708:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
   1b70c:	bf1c      	itt	ne
   1b70e:	460b      	movne	r3, r1
   1b710:	4602      	movne	r2, r0
   1b712:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
   1b716:	bf06      	itte	eq
   1b718:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
   1b71c:	ea91 0f03 	teqeq	r1, r3
   1b720:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
   1b724:	bd30      	pop	{r4, r5, pc}
   1b726:	bf00      	nop

0001b728 <__aeabi_ui2d>:
   1b728:	f090 0f00 	teq	r0, #0
   1b72c:	bf04      	itt	eq
   1b72e:	2100      	moveq	r1, #0
   1b730:	4770      	bxeq	lr
   1b732:	b530      	push	{r4, r5, lr}
   1b734:	f44f 6480 	mov.w	r4, #1024	; 0x400
   1b738:	f104 0432 	add.w	r4, r4, #50	; 0x32
   1b73c:	f04f 0500 	mov.w	r5, #0
   1b740:	f04f 0100 	mov.w	r1, #0
   1b744:	e750      	b.n	1b5e8 <__adddf3+0x138>
   1b746:	bf00      	nop

0001b748 <__aeabi_i2d>:
   1b748:	f090 0f00 	teq	r0, #0
   1b74c:	bf04      	itt	eq
   1b74e:	2100      	moveq	r1, #0
   1b750:	4770      	bxeq	lr
   1b752:	b530      	push	{r4, r5, lr}
   1b754:	f44f 6480 	mov.w	r4, #1024	; 0x400
   1b758:	f104 0432 	add.w	r4, r4, #50	; 0x32
   1b75c:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
   1b760:	bf48      	it	mi
   1b762:	4240      	negmi	r0, r0
   1b764:	f04f 0100 	mov.w	r1, #0
   1b768:	e73e      	b.n	1b5e8 <__adddf3+0x138>
   1b76a:	bf00      	nop

0001b76c <__aeabi_f2d>:
   1b76c:	0042      	lsls	r2, r0, #1
   1b76e:	ea4f 01e2 	mov.w	r1, r2, asr #3
   1b772:	ea4f 0131 	mov.w	r1, r1, rrx
   1b776:	ea4f 7002 	mov.w	r0, r2, lsl #28
   1b77a:	bf1f      	itttt	ne
   1b77c:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
   1b780:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
   1b784:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
   1b788:	4770      	bxne	lr
   1b78a:	f092 0f00 	teq	r2, #0
   1b78e:	bf14      	ite	ne
   1b790:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
   1b794:	4770      	bxeq	lr
   1b796:	b530      	push	{r4, r5, lr}
   1b798:	f44f 7460 	mov.w	r4, #896	; 0x380
   1b79c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   1b7a0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   1b7a4:	e720      	b.n	1b5e8 <__adddf3+0x138>
   1b7a6:	bf00      	nop

0001b7a8 <__aeabi_ul2d>:
   1b7a8:	ea50 0201 	orrs.w	r2, r0, r1
   1b7ac:	bf08      	it	eq
   1b7ae:	4770      	bxeq	lr
   1b7b0:	b530      	push	{r4, r5, lr}
   1b7b2:	f04f 0500 	mov.w	r5, #0
   1b7b6:	e00a      	b.n	1b7ce <__aeabi_l2d+0x16>

0001b7b8 <__aeabi_l2d>:
   1b7b8:	ea50 0201 	orrs.w	r2, r0, r1
   1b7bc:	bf08      	it	eq
   1b7be:	4770      	bxeq	lr
   1b7c0:	b530      	push	{r4, r5, lr}
   1b7c2:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
   1b7c6:	d502      	bpl.n	1b7ce <__aeabi_l2d+0x16>
   1b7c8:	4240      	negs	r0, r0
   1b7ca:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   1b7ce:	f44f 6480 	mov.w	r4, #1024	; 0x400
   1b7d2:	f104 0432 	add.w	r4, r4, #50	; 0x32
   1b7d6:	ea5f 5c91 	movs.w	ip, r1, lsr #22
   1b7da:	f43f aedc 	beq.w	1b596 <__adddf3+0xe6>
   1b7de:	f04f 0203 	mov.w	r2, #3
   1b7e2:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   1b7e6:	bf18      	it	ne
   1b7e8:	3203      	addne	r2, #3
   1b7ea:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   1b7ee:	bf18      	it	ne
   1b7f0:	3203      	addne	r2, #3
   1b7f2:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
   1b7f6:	f1c2 0320 	rsb	r3, r2, #32
   1b7fa:	fa00 fc03 	lsl.w	ip, r0, r3
   1b7fe:	fa20 f002 	lsr.w	r0, r0, r2
   1b802:	fa01 fe03 	lsl.w	lr, r1, r3
   1b806:	ea40 000e 	orr.w	r0, r0, lr
   1b80a:	fa21 f102 	lsr.w	r1, r1, r2
   1b80e:	4414      	add	r4, r2
   1b810:	e6c1      	b.n	1b596 <__adddf3+0xe6>
   1b812:	bf00      	nop

0001b814 <__aeabi_dmul>:
   1b814:	b570      	push	{r4, r5, r6, lr}
   1b816:	f04f 0cff 	mov.w	ip, #255	; 0xff
   1b81a:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
   1b81e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
   1b822:	bf1d      	ittte	ne
   1b824:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
   1b828:	ea94 0f0c 	teqne	r4, ip
   1b82c:	ea95 0f0c 	teqne	r5, ip
   1b830:	f000 f8de 	bleq	1b9f0 <__aeabi_dmul+0x1dc>
   1b834:	442c      	add	r4, r5
   1b836:	ea81 0603 	eor.w	r6, r1, r3
   1b83a:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
   1b83e:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
   1b842:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
   1b846:	bf18      	it	ne
   1b848:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
   1b84c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   1b850:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
   1b854:	d038      	beq.n	1b8c8 <__aeabi_dmul+0xb4>
   1b856:	fba0 ce02 	umull	ip, lr, r0, r2
   1b85a:	f04f 0500 	mov.w	r5, #0
   1b85e:	fbe1 e502 	umlal	lr, r5, r1, r2
   1b862:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
   1b866:	fbe0 e503 	umlal	lr, r5, r0, r3
   1b86a:	f04f 0600 	mov.w	r6, #0
   1b86e:	fbe1 5603 	umlal	r5, r6, r1, r3
   1b872:	f09c 0f00 	teq	ip, #0
   1b876:	bf18      	it	ne
   1b878:	f04e 0e01 	orrne.w	lr, lr, #1
   1b87c:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
   1b880:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
   1b884:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
   1b888:	d204      	bcs.n	1b894 <__aeabi_dmul+0x80>
   1b88a:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
   1b88e:	416d      	adcs	r5, r5
   1b890:	eb46 0606 	adc.w	r6, r6, r6
   1b894:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
   1b898:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
   1b89c:	ea4f 20c5 	mov.w	r0, r5, lsl #11
   1b8a0:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
   1b8a4:	ea4f 2ece 	mov.w	lr, lr, lsl #11
   1b8a8:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
   1b8ac:	bf88      	it	hi
   1b8ae:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
   1b8b2:	d81e      	bhi.n	1b8f2 <__aeabi_dmul+0xde>
   1b8b4:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
   1b8b8:	bf08      	it	eq
   1b8ba:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
   1b8be:	f150 0000 	adcs.w	r0, r0, #0
   1b8c2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   1b8c6:	bd70      	pop	{r4, r5, r6, pc}
   1b8c8:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
   1b8cc:	ea46 0101 	orr.w	r1, r6, r1
   1b8d0:	ea40 0002 	orr.w	r0, r0, r2
   1b8d4:	ea81 0103 	eor.w	r1, r1, r3
   1b8d8:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
   1b8dc:	bfc2      	ittt	gt
   1b8de:	ebd4 050c 	rsbsgt	r5, r4, ip
   1b8e2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
   1b8e6:	bd70      	popgt	{r4, r5, r6, pc}
   1b8e8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   1b8ec:	f04f 0e00 	mov.w	lr, #0
   1b8f0:	3c01      	subs	r4, #1
   1b8f2:	f300 80ab 	bgt.w	1ba4c <__aeabi_dmul+0x238>
   1b8f6:	f114 0f36 	cmn.w	r4, #54	; 0x36
   1b8fa:	bfde      	ittt	le
   1b8fc:	2000      	movle	r0, #0
   1b8fe:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
   1b902:	bd70      	pople	{r4, r5, r6, pc}
   1b904:	f1c4 0400 	rsb	r4, r4, #0
   1b908:	3c20      	subs	r4, #32
   1b90a:	da35      	bge.n	1b978 <__aeabi_dmul+0x164>
   1b90c:	340c      	adds	r4, #12
   1b90e:	dc1b      	bgt.n	1b948 <__aeabi_dmul+0x134>
   1b910:	f104 0414 	add.w	r4, r4, #20
   1b914:	f1c4 0520 	rsb	r5, r4, #32
   1b918:	fa00 f305 	lsl.w	r3, r0, r5
   1b91c:	fa20 f004 	lsr.w	r0, r0, r4
   1b920:	fa01 f205 	lsl.w	r2, r1, r5
   1b924:	ea40 0002 	orr.w	r0, r0, r2
   1b928:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
   1b92c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   1b930:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
   1b934:	fa21 f604 	lsr.w	r6, r1, r4
   1b938:	eb42 0106 	adc.w	r1, r2, r6
   1b93c:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   1b940:	bf08      	it	eq
   1b942:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   1b946:	bd70      	pop	{r4, r5, r6, pc}
   1b948:	f1c4 040c 	rsb	r4, r4, #12
   1b94c:	f1c4 0520 	rsb	r5, r4, #32
   1b950:	fa00 f304 	lsl.w	r3, r0, r4
   1b954:	fa20 f005 	lsr.w	r0, r0, r5
   1b958:	fa01 f204 	lsl.w	r2, r1, r4
   1b95c:	ea40 0002 	orr.w	r0, r0, r2
   1b960:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   1b964:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
   1b968:	f141 0100 	adc.w	r1, r1, #0
   1b96c:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   1b970:	bf08      	it	eq
   1b972:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   1b976:	bd70      	pop	{r4, r5, r6, pc}
   1b978:	f1c4 0520 	rsb	r5, r4, #32
   1b97c:	fa00 f205 	lsl.w	r2, r0, r5
   1b980:	ea4e 0e02 	orr.w	lr, lr, r2
   1b984:	fa20 f304 	lsr.w	r3, r0, r4
   1b988:	fa01 f205 	lsl.w	r2, r1, r5
   1b98c:	ea43 0302 	orr.w	r3, r3, r2
   1b990:	fa21 f004 	lsr.w	r0, r1, r4
   1b994:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   1b998:	fa21 f204 	lsr.w	r2, r1, r4
   1b99c:	ea20 0002 	bic.w	r0, r0, r2
   1b9a0:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
   1b9a4:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   1b9a8:	bf08      	it	eq
   1b9aa:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   1b9ae:	bd70      	pop	{r4, r5, r6, pc}
   1b9b0:	f094 0f00 	teq	r4, #0
   1b9b4:	d10f      	bne.n	1b9d6 <__aeabi_dmul+0x1c2>
   1b9b6:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
   1b9ba:	0040      	lsls	r0, r0, #1
   1b9bc:	eb41 0101 	adc.w	r1, r1, r1
   1b9c0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   1b9c4:	bf08      	it	eq
   1b9c6:	3c01      	subeq	r4, #1
   1b9c8:	d0f7      	beq.n	1b9ba <__aeabi_dmul+0x1a6>
   1b9ca:	ea41 0106 	orr.w	r1, r1, r6
   1b9ce:	f095 0f00 	teq	r5, #0
   1b9d2:	bf18      	it	ne
   1b9d4:	4770      	bxne	lr
   1b9d6:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
   1b9da:	0052      	lsls	r2, r2, #1
   1b9dc:	eb43 0303 	adc.w	r3, r3, r3
   1b9e0:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
   1b9e4:	bf08      	it	eq
   1b9e6:	3d01      	subeq	r5, #1
   1b9e8:	d0f7      	beq.n	1b9da <__aeabi_dmul+0x1c6>
   1b9ea:	ea43 0306 	orr.w	r3, r3, r6
   1b9ee:	4770      	bx	lr
   1b9f0:	ea94 0f0c 	teq	r4, ip
   1b9f4:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
   1b9f8:	bf18      	it	ne
   1b9fa:	ea95 0f0c 	teqne	r5, ip
   1b9fe:	d00c      	beq.n	1ba1a <__aeabi_dmul+0x206>
   1ba00:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   1ba04:	bf18      	it	ne
   1ba06:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   1ba0a:	d1d1      	bne.n	1b9b0 <__aeabi_dmul+0x19c>
   1ba0c:	ea81 0103 	eor.w	r1, r1, r3
   1ba10:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   1ba14:	f04f 0000 	mov.w	r0, #0
   1ba18:	bd70      	pop	{r4, r5, r6, pc}
   1ba1a:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   1ba1e:	bf06      	itte	eq
   1ba20:	4610      	moveq	r0, r2
   1ba22:	4619      	moveq	r1, r3
   1ba24:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   1ba28:	d019      	beq.n	1ba5e <__aeabi_dmul+0x24a>
   1ba2a:	ea94 0f0c 	teq	r4, ip
   1ba2e:	d102      	bne.n	1ba36 <__aeabi_dmul+0x222>
   1ba30:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
   1ba34:	d113      	bne.n	1ba5e <__aeabi_dmul+0x24a>
   1ba36:	ea95 0f0c 	teq	r5, ip
   1ba3a:	d105      	bne.n	1ba48 <__aeabi_dmul+0x234>
   1ba3c:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
   1ba40:	bf1c      	itt	ne
   1ba42:	4610      	movne	r0, r2
   1ba44:	4619      	movne	r1, r3
   1ba46:	d10a      	bne.n	1ba5e <__aeabi_dmul+0x24a>
   1ba48:	ea81 0103 	eor.w	r1, r1, r3
   1ba4c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   1ba50:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
   1ba54:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   1ba58:	f04f 0000 	mov.w	r0, #0
   1ba5c:	bd70      	pop	{r4, r5, r6, pc}
   1ba5e:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
   1ba62:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
   1ba66:	bd70      	pop	{r4, r5, r6, pc}

0001ba68 <__aeabi_ddiv>:
   1ba68:	b570      	push	{r4, r5, r6, lr}
   1ba6a:	f04f 0cff 	mov.w	ip, #255	; 0xff
   1ba6e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
   1ba72:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
   1ba76:	bf1d      	ittte	ne
   1ba78:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
   1ba7c:	ea94 0f0c 	teqne	r4, ip
   1ba80:	ea95 0f0c 	teqne	r5, ip
   1ba84:	f000 f8a7 	bleq	1bbd6 <__aeabi_ddiv+0x16e>
   1ba88:	eba4 0405 	sub.w	r4, r4, r5
   1ba8c:	ea81 0e03 	eor.w	lr, r1, r3
   1ba90:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
   1ba94:	ea4f 3101 	mov.w	r1, r1, lsl #12
   1ba98:	f000 8088 	beq.w	1bbac <__aeabi_ddiv+0x144>
   1ba9c:	ea4f 3303 	mov.w	r3, r3, lsl #12
   1baa0:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
   1baa4:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
   1baa8:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
   1baac:	ea4f 2202 	mov.w	r2, r2, lsl #8
   1bab0:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
   1bab4:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
   1bab8:	ea4f 2600 	mov.w	r6, r0, lsl #8
   1babc:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
   1bac0:	429d      	cmp	r5, r3
   1bac2:	bf08      	it	eq
   1bac4:	4296      	cmpeq	r6, r2
   1bac6:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
   1baca:	f504 7440 	add.w	r4, r4, #768	; 0x300
   1bace:	d202      	bcs.n	1bad6 <__aeabi_ddiv+0x6e>
   1bad0:	085b      	lsrs	r3, r3, #1
   1bad2:	ea4f 0232 	mov.w	r2, r2, rrx
   1bad6:	1ab6      	subs	r6, r6, r2
   1bad8:	eb65 0503 	sbc.w	r5, r5, r3
   1badc:	085b      	lsrs	r3, r3, #1
   1bade:	ea4f 0232 	mov.w	r2, r2, rrx
   1bae2:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
   1bae6:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
   1baea:	ebb6 0e02 	subs.w	lr, r6, r2
   1baee:	eb75 0e03 	sbcs.w	lr, r5, r3
   1baf2:	bf22      	ittt	cs
   1baf4:	1ab6      	subcs	r6, r6, r2
   1baf6:	4675      	movcs	r5, lr
   1baf8:	ea40 000c 	orrcs.w	r0, r0, ip
   1bafc:	085b      	lsrs	r3, r3, #1
   1bafe:	ea4f 0232 	mov.w	r2, r2, rrx
   1bb02:	ebb6 0e02 	subs.w	lr, r6, r2
   1bb06:	eb75 0e03 	sbcs.w	lr, r5, r3
   1bb0a:	bf22      	ittt	cs
   1bb0c:	1ab6      	subcs	r6, r6, r2
   1bb0e:	4675      	movcs	r5, lr
   1bb10:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
   1bb14:	085b      	lsrs	r3, r3, #1
   1bb16:	ea4f 0232 	mov.w	r2, r2, rrx
   1bb1a:	ebb6 0e02 	subs.w	lr, r6, r2
   1bb1e:	eb75 0e03 	sbcs.w	lr, r5, r3
   1bb22:	bf22      	ittt	cs
   1bb24:	1ab6      	subcs	r6, r6, r2
   1bb26:	4675      	movcs	r5, lr
   1bb28:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
   1bb2c:	085b      	lsrs	r3, r3, #1
   1bb2e:	ea4f 0232 	mov.w	r2, r2, rrx
   1bb32:	ebb6 0e02 	subs.w	lr, r6, r2
   1bb36:	eb75 0e03 	sbcs.w	lr, r5, r3
   1bb3a:	bf22      	ittt	cs
   1bb3c:	1ab6      	subcs	r6, r6, r2
   1bb3e:	4675      	movcs	r5, lr
   1bb40:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
   1bb44:	ea55 0e06 	orrs.w	lr, r5, r6
   1bb48:	d018      	beq.n	1bb7c <__aeabi_ddiv+0x114>
   1bb4a:	ea4f 1505 	mov.w	r5, r5, lsl #4
   1bb4e:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
   1bb52:	ea4f 1606 	mov.w	r6, r6, lsl #4
   1bb56:	ea4f 03c3 	mov.w	r3, r3, lsl #3
   1bb5a:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
   1bb5e:	ea4f 02c2 	mov.w	r2, r2, lsl #3
   1bb62:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
   1bb66:	d1c0      	bne.n	1baea <__aeabi_ddiv+0x82>
   1bb68:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   1bb6c:	d10b      	bne.n	1bb86 <__aeabi_ddiv+0x11e>
   1bb6e:	ea41 0100 	orr.w	r1, r1, r0
   1bb72:	f04f 0000 	mov.w	r0, #0
   1bb76:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
   1bb7a:	e7b6      	b.n	1baea <__aeabi_ddiv+0x82>
   1bb7c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   1bb80:	bf04      	itt	eq
   1bb82:	4301      	orreq	r1, r0
   1bb84:	2000      	moveq	r0, #0
   1bb86:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
   1bb8a:	bf88      	it	hi
   1bb8c:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
   1bb90:	f63f aeaf 	bhi.w	1b8f2 <__aeabi_dmul+0xde>
   1bb94:	ebb5 0c03 	subs.w	ip, r5, r3
   1bb98:	bf04      	itt	eq
   1bb9a:	ebb6 0c02 	subseq.w	ip, r6, r2
   1bb9e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
   1bba2:	f150 0000 	adcs.w	r0, r0, #0
   1bba6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   1bbaa:	bd70      	pop	{r4, r5, r6, pc}
   1bbac:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
   1bbb0:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
   1bbb4:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
   1bbb8:	bfc2      	ittt	gt
   1bbba:	ebd4 050c 	rsbsgt	r5, r4, ip
   1bbbe:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
   1bbc2:	bd70      	popgt	{r4, r5, r6, pc}
   1bbc4:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   1bbc8:	f04f 0e00 	mov.w	lr, #0
   1bbcc:	3c01      	subs	r4, #1
   1bbce:	e690      	b.n	1b8f2 <__aeabi_dmul+0xde>
   1bbd0:	ea45 0e06 	orr.w	lr, r5, r6
   1bbd4:	e68d      	b.n	1b8f2 <__aeabi_dmul+0xde>
   1bbd6:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
   1bbda:	ea94 0f0c 	teq	r4, ip
   1bbde:	bf08      	it	eq
   1bbe0:	ea95 0f0c 	teqeq	r5, ip
   1bbe4:	f43f af3b 	beq.w	1ba5e <__aeabi_dmul+0x24a>
   1bbe8:	ea94 0f0c 	teq	r4, ip
   1bbec:	d10a      	bne.n	1bc04 <__aeabi_ddiv+0x19c>
   1bbee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
   1bbf2:	f47f af34 	bne.w	1ba5e <__aeabi_dmul+0x24a>
   1bbf6:	ea95 0f0c 	teq	r5, ip
   1bbfa:	f47f af25 	bne.w	1ba48 <__aeabi_dmul+0x234>
   1bbfe:	4610      	mov	r0, r2
   1bc00:	4619      	mov	r1, r3
   1bc02:	e72c      	b.n	1ba5e <__aeabi_dmul+0x24a>
   1bc04:	ea95 0f0c 	teq	r5, ip
   1bc08:	d106      	bne.n	1bc18 <__aeabi_ddiv+0x1b0>
   1bc0a:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
   1bc0e:	f43f aefd 	beq.w	1ba0c <__aeabi_dmul+0x1f8>
   1bc12:	4610      	mov	r0, r2
   1bc14:	4619      	mov	r1, r3
   1bc16:	e722      	b.n	1ba5e <__aeabi_dmul+0x24a>
   1bc18:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   1bc1c:	bf18      	it	ne
   1bc1e:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   1bc22:	f47f aec5 	bne.w	1b9b0 <__aeabi_dmul+0x19c>
   1bc26:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
   1bc2a:	f47f af0d 	bne.w	1ba48 <__aeabi_dmul+0x234>
   1bc2e:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
   1bc32:	f47f aeeb 	bne.w	1ba0c <__aeabi_dmul+0x1f8>
   1bc36:	e712      	b.n	1ba5e <__aeabi_dmul+0x24a>

0001bc38 <__gedf2>:
   1bc38:	f04f 3cff 	mov.w	ip, #4294967295
   1bc3c:	e006      	b.n	1bc4c <__cmpdf2+0x4>
   1bc3e:	bf00      	nop

0001bc40 <__ledf2>:
   1bc40:	f04f 0c01 	mov.w	ip, #1
   1bc44:	e002      	b.n	1bc4c <__cmpdf2+0x4>
   1bc46:	bf00      	nop

0001bc48 <__cmpdf2>:
   1bc48:	f04f 0c01 	mov.w	ip, #1
   1bc4c:	f84d cd04 	str.w	ip, [sp, #-4]!
   1bc50:	ea4f 0c41 	mov.w	ip, r1, lsl #1
   1bc54:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   1bc58:	ea4f 0c43 	mov.w	ip, r3, lsl #1
   1bc5c:	bf18      	it	ne
   1bc5e:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
   1bc62:	d01b      	beq.n	1bc9c <__cmpdf2+0x54>
   1bc64:	b001      	add	sp, #4
   1bc66:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
   1bc6a:	bf0c      	ite	eq
   1bc6c:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
   1bc70:	ea91 0f03 	teqne	r1, r3
   1bc74:	bf02      	ittt	eq
   1bc76:	ea90 0f02 	teqeq	r0, r2
   1bc7a:	2000      	moveq	r0, #0
   1bc7c:	4770      	bxeq	lr
   1bc7e:	f110 0f00 	cmn.w	r0, #0
   1bc82:	ea91 0f03 	teq	r1, r3
   1bc86:	bf58      	it	pl
   1bc88:	4299      	cmppl	r1, r3
   1bc8a:	bf08      	it	eq
   1bc8c:	4290      	cmpeq	r0, r2
   1bc8e:	bf2c      	ite	cs
   1bc90:	17d8      	asrcs	r0, r3, #31
   1bc92:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
   1bc96:	f040 0001 	orr.w	r0, r0, #1
   1bc9a:	4770      	bx	lr
   1bc9c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
   1bca0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   1bca4:	d102      	bne.n	1bcac <__cmpdf2+0x64>
   1bca6:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
   1bcaa:	d107      	bne.n	1bcbc <__cmpdf2+0x74>
   1bcac:	ea4f 0c43 	mov.w	ip, r3, lsl #1
   1bcb0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   1bcb4:	d1d6      	bne.n	1bc64 <__cmpdf2+0x1c>
   1bcb6:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
   1bcba:	d0d3      	beq.n	1bc64 <__cmpdf2+0x1c>
   1bcbc:	f85d 0b04 	ldr.w	r0, [sp], #4
   1bcc0:	4770      	bx	lr
   1bcc2:	bf00      	nop

0001bcc4 <__aeabi_cdrcmple>:
   1bcc4:	4684      	mov	ip, r0
   1bcc6:	4610      	mov	r0, r2
   1bcc8:	4662      	mov	r2, ip
   1bcca:	468c      	mov	ip, r1
   1bccc:	4619      	mov	r1, r3
   1bcce:	4663      	mov	r3, ip
   1bcd0:	e000      	b.n	1bcd4 <__aeabi_cdcmpeq>
   1bcd2:	bf00      	nop

0001bcd4 <__aeabi_cdcmpeq>:
   1bcd4:	b501      	push	{r0, lr}
   1bcd6:	f7ff ffb7 	bl	1bc48 <__cmpdf2>
   1bcda:	2800      	cmp	r0, #0
   1bcdc:	bf48      	it	mi
   1bcde:	f110 0f00 	cmnmi.w	r0, #0
   1bce2:	bd01      	pop	{r0, pc}

0001bce4 <__aeabi_dcmpeq>:
   1bce4:	f84d ed08 	str.w	lr, [sp, #-8]!
   1bce8:	f7ff fff4 	bl	1bcd4 <__aeabi_cdcmpeq>
   1bcec:	bf0c      	ite	eq
   1bcee:	2001      	moveq	r0, #1
   1bcf0:	2000      	movne	r0, #0
   1bcf2:	f85d fb08 	ldr.w	pc, [sp], #8
   1bcf6:	bf00      	nop

0001bcf8 <__aeabi_dcmplt>:
   1bcf8:	f84d ed08 	str.w	lr, [sp, #-8]!
   1bcfc:	f7ff ffea 	bl	1bcd4 <__aeabi_cdcmpeq>
   1bd00:	bf34      	ite	cc
   1bd02:	2001      	movcc	r0, #1
   1bd04:	2000      	movcs	r0, #0
   1bd06:	f85d fb08 	ldr.w	pc, [sp], #8
   1bd0a:	bf00      	nop

0001bd0c <__aeabi_dcmple>:
   1bd0c:	f84d ed08 	str.w	lr, [sp, #-8]!
   1bd10:	f7ff ffe0 	bl	1bcd4 <__aeabi_cdcmpeq>
   1bd14:	bf94      	ite	ls
   1bd16:	2001      	movls	r0, #1
   1bd18:	2000      	movhi	r0, #0
   1bd1a:	f85d fb08 	ldr.w	pc, [sp], #8
   1bd1e:	bf00      	nop

0001bd20 <__aeabi_dcmpge>:
   1bd20:	f84d ed08 	str.w	lr, [sp, #-8]!
   1bd24:	f7ff ffce 	bl	1bcc4 <__aeabi_cdrcmple>
   1bd28:	bf94      	ite	ls
   1bd2a:	2001      	movls	r0, #1
   1bd2c:	2000      	movhi	r0, #0
   1bd2e:	f85d fb08 	ldr.w	pc, [sp], #8
   1bd32:	bf00      	nop

0001bd34 <__aeabi_dcmpgt>:
   1bd34:	f84d ed08 	str.w	lr, [sp, #-8]!
   1bd38:	f7ff ffc4 	bl	1bcc4 <__aeabi_cdrcmple>
   1bd3c:	bf34      	ite	cc
   1bd3e:	2001      	movcc	r0, #1
   1bd40:	2000      	movcs	r0, #0
   1bd42:	f85d fb08 	ldr.w	pc, [sp], #8
   1bd46:	bf00      	nop

0001bd48 <__aeabi_d2iz>:
   1bd48:	ea4f 0241 	mov.w	r2, r1, lsl #1
   1bd4c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
   1bd50:	d215      	bcs.n	1bd7e <__aeabi_d2iz+0x36>
   1bd52:	d511      	bpl.n	1bd78 <__aeabi_d2iz+0x30>
   1bd54:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
   1bd58:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
   1bd5c:	d912      	bls.n	1bd84 <__aeabi_d2iz+0x3c>
   1bd5e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
   1bd62:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
   1bd66:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
   1bd6a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
   1bd6e:	fa23 f002 	lsr.w	r0, r3, r2
   1bd72:	bf18      	it	ne
   1bd74:	4240      	negne	r0, r0
   1bd76:	4770      	bx	lr
   1bd78:	f04f 0000 	mov.w	r0, #0
   1bd7c:	4770      	bx	lr
   1bd7e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
   1bd82:	d105      	bne.n	1bd90 <__aeabi_d2iz+0x48>
   1bd84:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
   1bd88:	bf08      	it	eq
   1bd8a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
   1bd8e:	4770      	bx	lr
   1bd90:	f04f 0000 	mov.w	r0, #0
   1bd94:	4770      	bx	lr
   1bd96:	bf00      	nop

0001bd98 <__aeabi_d2uiz>:
   1bd98:	004a      	lsls	r2, r1, #1
   1bd9a:	d211      	bcs.n	1bdc0 <__aeabi_d2uiz+0x28>
   1bd9c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
   1bda0:	d211      	bcs.n	1bdc6 <__aeabi_d2uiz+0x2e>
   1bda2:	d50d      	bpl.n	1bdc0 <__aeabi_d2uiz+0x28>
   1bda4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
   1bda8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
   1bdac:	d40e      	bmi.n	1bdcc <__aeabi_d2uiz+0x34>
   1bdae:	ea4f 23c1 	mov.w	r3, r1, lsl #11
   1bdb2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
   1bdb6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
   1bdba:	fa23 f002 	lsr.w	r0, r3, r2
   1bdbe:	4770      	bx	lr
   1bdc0:	f04f 0000 	mov.w	r0, #0
   1bdc4:	4770      	bx	lr
   1bdc6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
   1bdca:	d102      	bne.n	1bdd2 <__aeabi_d2uiz+0x3a>
   1bdcc:	f04f 30ff 	mov.w	r0, #4294967295
   1bdd0:	4770      	bx	lr
   1bdd2:	f04f 0000 	mov.w	r0, #0
   1bdd6:	4770      	bx	lr

0001bdd8 <__aeabi_d2f>:
   1bdd8:	ea4f 0241 	mov.w	r2, r1, lsl #1
   1bddc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
   1bde0:	bf24      	itt	cs
   1bde2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
   1bde6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
   1bdea:	d90d      	bls.n	1be08 <__aeabi_d2f+0x30>
   1bdec:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
   1bdf0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
   1bdf4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
   1bdf8:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
   1bdfc:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
   1be00:	bf08      	it	eq
   1be02:	f020 0001 	biceq.w	r0, r0, #1
   1be06:	4770      	bx	lr
   1be08:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
   1be0c:	d121      	bne.n	1be52 <__aeabi_d2f+0x7a>
   1be0e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
   1be12:	bfbc      	itt	lt
   1be14:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
   1be18:	4770      	bxlt	lr
   1be1a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   1be1e:	ea4f 5252 	mov.w	r2, r2, lsr #21
   1be22:	f1c2 0218 	rsb	r2, r2, #24
   1be26:	f1c2 0c20 	rsb	ip, r2, #32
   1be2a:	fa10 f30c 	lsls.w	r3, r0, ip
   1be2e:	fa20 f002 	lsr.w	r0, r0, r2
   1be32:	bf18      	it	ne
   1be34:	f040 0001 	orrne.w	r0, r0, #1
   1be38:	ea4f 23c1 	mov.w	r3, r1, lsl #11
   1be3c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
   1be40:	fa03 fc0c 	lsl.w	ip, r3, ip
   1be44:	ea40 000c 	orr.w	r0, r0, ip
   1be48:	fa23 f302 	lsr.w	r3, r3, r2
   1be4c:	ea4f 0343 	mov.w	r3, r3, lsl #1
   1be50:	e7cc      	b.n	1bdec <__aeabi_d2f+0x14>
   1be52:	ea7f 5362 	mvns.w	r3, r2, asr #21
   1be56:	d107      	bne.n	1be68 <__aeabi_d2f+0x90>
   1be58:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
   1be5c:	bf1e      	ittt	ne
   1be5e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
   1be62:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
   1be66:	4770      	bxne	lr
   1be68:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
   1be6c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
   1be70:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
   1be74:	4770      	bx	lr
   1be76:	bf00      	nop

0001be78 <__aeabi_frsub>:
   1be78:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
   1be7c:	e002      	b.n	1be84 <__addsf3>
   1be7e:	bf00      	nop

0001be80 <__aeabi_fsub>:
   1be80:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

0001be84 <__addsf3>:
   1be84:	0042      	lsls	r2, r0, #1
   1be86:	bf1f      	itttt	ne
   1be88:	ea5f 0341 	movsne.w	r3, r1, lsl #1
   1be8c:	ea92 0f03 	teqne	r2, r3
   1be90:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
   1be94:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
   1be98:	d06a      	beq.n	1bf70 <__addsf3+0xec>
   1be9a:	ea4f 6212 	mov.w	r2, r2, lsr #24
   1be9e:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
   1bea2:	bfc1      	itttt	gt
   1bea4:	18d2      	addgt	r2, r2, r3
   1bea6:	4041      	eorgt	r1, r0
   1bea8:	4048      	eorgt	r0, r1
   1beaa:	4041      	eorgt	r1, r0
   1beac:	bfb8      	it	lt
   1beae:	425b      	neglt	r3, r3
   1beb0:	2b19      	cmp	r3, #25
   1beb2:	bf88      	it	hi
   1beb4:	4770      	bxhi	lr
   1beb6:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
   1beba:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
   1bebe:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
   1bec2:	bf18      	it	ne
   1bec4:	4240      	negne	r0, r0
   1bec6:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
   1beca:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
   1bece:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
   1bed2:	bf18      	it	ne
   1bed4:	4249      	negne	r1, r1
   1bed6:	ea92 0f03 	teq	r2, r3
   1beda:	d03f      	beq.n	1bf5c <__addsf3+0xd8>
   1bedc:	f1a2 0201 	sub.w	r2, r2, #1
   1bee0:	fa41 fc03 	asr.w	ip, r1, r3
   1bee4:	eb10 000c 	adds.w	r0, r0, ip
   1bee8:	f1c3 0320 	rsb	r3, r3, #32
   1beec:	fa01 f103 	lsl.w	r1, r1, r3
   1bef0:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
   1bef4:	d502      	bpl.n	1befc <__addsf3+0x78>
   1bef6:	4249      	negs	r1, r1
   1bef8:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
   1befc:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
   1bf00:	d313      	bcc.n	1bf2a <__addsf3+0xa6>
   1bf02:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
   1bf06:	d306      	bcc.n	1bf16 <__addsf3+0x92>
   1bf08:	0840      	lsrs	r0, r0, #1
   1bf0a:	ea4f 0131 	mov.w	r1, r1, rrx
   1bf0e:	f102 0201 	add.w	r2, r2, #1
   1bf12:	2afe      	cmp	r2, #254	; 0xfe
   1bf14:	d251      	bcs.n	1bfba <__addsf3+0x136>
   1bf16:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
   1bf1a:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
   1bf1e:	bf08      	it	eq
   1bf20:	f020 0001 	biceq.w	r0, r0, #1
   1bf24:	ea40 0003 	orr.w	r0, r0, r3
   1bf28:	4770      	bx	lr
   1bf2a:	0049      	lsls	r1, r1, #1
   1bf2c:	eb40 0000 	adc.w	r0, r0, r0
   1bf30:	f410 0f00 	tst.w	r0, #8388608	; 0x800000
   1bf34:	f1a2 0201 	sub.w	r2, r2, #1
   1bf38:	d1ed      	bne.n	1bf16 <__addsf3+0x92>
   1bf3a:	fab0 fc80 	clz	ip, r0
   1bf3e:	f1ac 0c08 	sub.w	ip, ip, #8
   1bf42:	ebb2 020c 	subs.w	r2, r2, ip
   1bf46:	fa00 f00c 	lsl.w	r0, r0, ip
   1bf4a:	bfaa      	itet	ge
   1bf4c:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
   1bf50:	4252      	neglt	r2, r2
   1bf52:	4318      	orrge	r0, r3
   1bf54:	bfbc      	itt	lt
   1bf56:	40d0      	lsrlt	r0, r2
   1bf58:	4318      	orrlt	r0, r3
   1bf5a:	4770      	bx	lr
   1bf5c:	f092 0f00 	teq	r2, #0
   1bf60:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
   1bf64:	bf06      	itte	eq
   1bf66:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
   1bf6a:	3201      	addeq	r2, #1
   1bf6c:	3b01      	subne	r3, #1
   1bf6e:	e7b5      	b.n	1bedc <__addsf3+0x58>
   1bf70:	ea4f 0341 	mov.w	r3, r1, lsl #1
   1bf74:	ea7f 6c22 	mvns.w	ip, r2, asr #24
   1bf78:	bf18      	it	ne
   1bf7a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
   1bf7e:	d021      	beq.n	1bfc4 <__addsf3+0x140>
   1bf80:	ea92 0f03 	teq	r2, r3
   1bf84:	d004      	beq.n	1bf90 <__addsf3+0x10c>
   1bf86:	f092 0f00 	teq	r2, #0
   1bf8a:	bf08      	it	eq
   1bf8c:	4608      	moveq	r0, r1
   1bf8e:	4770      	bx	lr
   1bf90:	ea90 0f01 	teq	r0, r1
   1bf94:	bf1c      	itt	ne
   1bf96:	2000      	movne	r0, #0
   1bf98:	4770      	bxne	lr
   1bf9a:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
   1bf9e:	d104      	bne.n	1bfaa <__addsf3+0x126>
   1bfa0:	0040      	lsls	r0, r0, #1
   1bfa2:	bf28      	it	cs
   1bfa4:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
   1bfa8:	4770      	bx	lr
   1bfaa:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
   1bfae:	bf3c      	itt	cc
   1bfb0:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
   1bfb4:	4770      	bxcc	lr
   1bfb6:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
   1bfba:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
   1bfbe:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
   1bfc2:	4770      	bx	lr
   1bfc4:	ea7f 6222 	mvns.w	r2, r2, asr #24
   1bfc8:	bf16      	itet	ne
   1bfca:	4608      	movne	r0, r1
   1bfcc:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
   1bfd0:	4601      	movne	r1, r0
   1bfd2:	0242      	lsls	r2, r0, #9
   1bfd4:	bf06      	itte	eq
   1bfd6:	ea5f 2341 	movseq.w	r3, r1, lsl #9
   1bfda:	ea90 0f01 	teqeq	r0, r1
   1bfde:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
   1bfe2:	4770      	bx	lr

0001bfe4 <__aeabi_ui2f>:
   1bfe4:	f04f 0300 	mov.w	r3, #0
   1bfe8:	e004      	b.n	1bff4 <__aeabi_i2f+0x8>
   1bfea:	bf00      	nop

0001bfec <__aeabi_i2f>:
   1bfec:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
   1bff0:	bf48      	it	mi
   1bff2:	4240      	negmi	r0, r0
   1bff4:	ea5f 0c00 	movs.w	ip, r0
   1bff8:	bf08      	it	eq
   1bffa:	4770      	bxeq	lr
   1bffc:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
   1c000:	4601      	mov	r1, r0
   1c002:	f04f 0000 	mov.w	r0, #0
   1c006:	e01c      	b.n	1c042 <__aeabi_l2f+0x2a>

0001c008 <__aeabi_ul2f>:
   1c008:	ea50 0201 	orrs.w	r2, r0, r1
   1c00c:	bf08      	it	eq
   1c00e:	4770      	bxeq	lr
   1c010:	f04f 0300 	mov.w	r3, #0
   1c014:	e00a      	b.n	1c02c <__aeabi_l2f+0x14>
   1c016:	bf00      	nop

0001c018 <__aeabi_l2f>:
   1c018:	ea50 0201 	orrs.w	r2, r0, r1
   1c01c:	bf08      	it	eq
   1c01e:	4770      	bxeq	lr
   1c020:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
   1c024:	d502      	bpl.n	1c02c <__aeabi_l2f+0x14>
   1c026:	4240      	negs	r0, r0
   1c028:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   1c02c:	ea5f 0c01 	movs.w	ip, r1
   1c030:	bf02      	ittt	eq
   1c032:	4684      	moveq	ip, r0
   1c034:	4601      	moveq	r1, r0
   1c036:	2000      	moveq	r0, #0
   1c038:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
   1c03c:	bf08      	it	eq
   1c03e:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
   1c042:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
   1c046:	fabc f28c 	clz	r2, ip
   1c04a:	3a08      	subs	r2, #8
   1c04c:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
   1c050:	db10      	blt.n	1c074 <__aeabi_l2f+0x5c>
   1c052:	fa01 fc02 	lsl.w	ip, r1, r2
   1c056:	4463      	add	r3, ip
   1c058:	fa00 fc02 	lsl.w	ip, r0, r2
   1c05c:	f1c2 0220 	rsb	r2, r2, #32
   1c060:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
   1c064:	fa20 f202 	lsr.w	r2, r0, r2
   1c068:	eb43 0002 	adc.w	r0, r3, r2
   1c06c:	bf08      	it	eq
   1c06e:	f020 0001 	biceq.w	r0, r0, #1
   1c072:	4770      	bx	lr
   1c074:	f102 0220 	add.w	r2, r2, #32
   1c078:	fa01 fc02 	lsl.w	ip, r1, r2
   1c07c:	f1c2 0220 	rsb	r2, r2, #32
   1c080:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
   1c084:	fa21 f202 	lsr.w	r2, r1, r2
   1c088:	eb43 0002 	adc.w	r0, r3, r2
   1c08c:	bf08      	it	eq
   1c08e:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
   1c092:	4770      	bx	lr

0001c094 <__aeabi_ldivmod>:
   1c094:	b97b      	cbnz	r3, 1c0b6 <__aeabi_ldivmod+0x22>
   1c096:	b972      	cbnz	r2, 1c0b6 <__aeabi_ldivmod+0x22>
   1c098:	2900      	cmp	r1, #0
   1c09a:	bfbe      	ittt	lt
   1c09c:	2000      	movlt	r0, #0
   1c09e:	f04f 4100 	movlt.w	r1, #2147483648	; 0x80000000
   1c0a2:	e006      	blt.n	1c0b2 <__aeabi_ldivmod+0x1e>
   1c0a4:	bf08      	it	eq
   1c0a6:	2800      	cmpeq	r0, #0
   1c0a8:	bf1c      	itt	ne
   1c0aa:	f06f 4100 	mvnne.w	r1, #2147483648	; 0x80000000
   1c0ae:	f04f 30ff 	movne.w	r0, #4294967295
   1c0b2:	f001 b979 	b.w	1d3a8 <__aeabi_idiv0>
   1c0b6:	f1ad 0c08 	sub.w	ip, sp, #8
   1c0ba:	e96d ce04 	strd	ip, lr, [sp, #-16]!
   1c0be:	2900      	cmp	r1, #0
   1c0c0:	db09      	blt.n	1c0d6 <__aeabi_ldivmod+0x42>
   1c0c2:	2b00      	cmp	r3, #0
   1c0c4:	db1a      	blt.n	1c0fc <__aeabi_ldivmod+0x68>
   1c0c6:	f000 f885 	bl	1c1d4 <__udivmoddi4>
   1c0ca:	f8dd e004 	ldr.w	lr, [sp, #4]
   1c0ce:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
   1c0d2:	b004      	add	sp, #16
   1c0d4:	4770      	bx	lr
   1c0d6:	4240      	negs	r0, r0
   1c0d8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   1c0dc:	2b00      	cmp	r3, #0
   1c0de:	db1b      	blt.n	1c118 <__aeabi_ldivmod+0x84>
   1c0e0:	f000 f878 	bl	1c1d4 <__udivmoddi4>
   1c0e4:	f8dd e004 	ldr.w	lr, [sp, #4]
   1c0e8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
   1c0ec:	b004      	add	sp, #16
   1c0ee:	4240      	negs	r0, r0
   1c0f0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   1c0f4:	4252      	negs	r2, r2
   1c0f6:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
   1c0fa:	4770      	bx	lr
   1c0fc:	4252      	negs	r2, r2
   1c0fe:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
   1c102:	f000 f867 	bl	1c1d4 <__udivmoddi4>
   1c106:	f8dd e004 	ldr.w	lr, [sp, #4]
   1c10a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
   1c10e:	b004      	add	sp, #16
   1c110:	4240      	negs	r0, r0
   1c112:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   1c116:	4770      	bx	lr
   1c118:	4252      	negs	r2, r2
   1c11a:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
   1c11e:	f000 f859 	bl	1c1d4 <__udivmoddi4>
   1c122:	f8dd e004 	ldr.w	lr, [sp, #4]
   1c126:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
   1c12a:	b004      	add	sp, #16
   1c12c:	4252      	negs	r2, r2
   1c12e:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
   1c132:	4770      	bx	lr

0001c134 <__aeabi_uldivmod>:
   1c134:	b953      	cbnz	r3, 1c14c <__aeabi_uldivmod+0x18>
   1c136:	b94a      	cbnz	r2, 1c14c <__aeabi_uldivmod+0x18>
   1c138:	2900      	cmp	r1, #0
   1c13a:	bf08      	it	eq
   1c13c:	2800      	cmpeq	r0, #0
   1c13e:	bf1c      	itt	ne
   1c140:	f04f 31ff 	movne.w	r1, #4294967295
   1c144:	f04f 30ff 	movne.w	r0, #4294967295
   1c148:	f001 b92e 	b.w	1d3a8 <__aeabi_idiv0>
   1c14c:	f1ad 0c08 	sub.w	ip, sp, #8
   1c150:	e96d ce04 	strd	ip, lr, [sp, #-16]!
   1c154:	f000 f83e 	bl	1c1d4 <__udivmoddi4>
   1c158:	f8dd e004 	ldr.w	lr, [sp, #4]
   1c15c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
   1c160:	b004      	add	sp, #16
   1c162:	4770      	bx	lr

0001c164 <__aeabi_f2lz>:
   1c164:	ee07 0a90 	vmov	s15, r0
   1c168:	eef5 7ac0 	vcmpe.f32	s15, #0.0
   1c16c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   1c170:	d401      	bmi.n	1c176 <__aeabi_f2lz+0x12>
   1c172:	f000 b809 	b.w	1c188 <__aeabi_f2ulz>
   1c176:	b508      	push	{r3, lr}
   1c178:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
   1c17c:	f000 f804 	bl	1c188 <__aeabi_f2ulz>
   1c180:	4240      	negs	r0, r0
   1c182:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   1c186:	bd08      	pop	{r3, pc}

0001c188 <__aeabi_f2ulz>:
   1c188:	b5d0      	push	{r4, r6, r7, lr}
   1c18a:	f7ff faef 	bl	1b76c <__aeabi_f2d>
   1c18e:	2200      	movs	r2, #0
   1c190:	4b0e      	ldr	r3, [pc, #56]	; (1c1cc <__aeabi_f2ulz+0x44>)
   1c192:	4606      	mov	r6, r0
   1c194:	460f      	mov	r7, r1
   1c196:	f7ff fb3d 	bl	1b814 <__aeabi_dmul>
   1c19a:	f7ff fdfd 	bl	1bd98 <__aeabi_d2uiz>
   1c19e:	4604      	mov	r4, r0
   1c1a0:	f7ff fac2 	bl	1b728 <__aeabi_ui2d>
   1c1a4:	2200      	movs	r2, #0
   1c1a6:	4b0a      	ldr	r3, [pc, #40]	; (1c1d0 <__aeabi_f2ulz+0x48>)
   1c1a8:	f7ff fb34 	bl	1b814 <__aeabi_dmul>
   1c1ac:	4602      	mov	r2, r0
   1c1ae:	460b      	mov	r3, r1
   1c1b0:	4630      	mov	r0, r6
   1c1b2:	4639      	mov	r1, r7
   1c1b4:	f7ff f97a 	bl	1b4ac <__aeabi_dsub>
   1c1b8:	f7ff fdee 	bl	1bd98 <__aeabi_d2uiz>
   1c1bc:	4623      	mov	r3, r4
   1c1be:	2200      	movs	r2, #0
   1c1c0:	ea42 0200 	orr.w	r2, r2, r0
   1c1c4:	4610      	mov	r0, r2
   1c1c6:	4619      	mov	r1, r3
   1c1c8:	bdd0      	pop	{r4, r6, r7, pc}
   1c1ca:	bf00      	nop
   1c1cc:	3df00000 	.word	0x3df00000
   1c1d0:	41f00000 	.word	0x41f00000

0001c1d4 <__udivmoddi4>:
   1c1d4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   1c1d8:	468c      	mov	ip, r1
   1c1da:	460d      	mov	r5, r1
   1c1dc:	4604      	mov	r4, r0
   1c1de:	9e08      	ldr	r6, [sp, #32]
   1c1e0:	2b00      	cmp	r3, #0
   1c1e2:	d151      	bne.n	1c288 <__udivmoddi4+0xb4>
   1c1e4:	428a      	cmp	r2, r1
   1c1e6:	4617      	mov	r7, r2
   1c1e8:	d96d      	bls.n	1c2c6 <__udivmoddi4+0xf2>
   1c1ea:	fab2 fe82 	clz	lr, r2
   1c1ee:	f1be 0f00 	cmp.w	lr, #0
   1c1f2:	d00b      	beq.n	1c20c <__udivmoddi4+0x38>
   1c1f4:	f1ce 0c20 	rsb	ip, lr, #32
   1c1f8:	fa01 f50e 	lsl.w	r5, r1, lr
   1c1fc:	fa20 fc0c 	lsr.w	ip, r0, ip
   1c200:	fa02 f70e 	lsl.w	r7, r2, lr
   1c204:	ea4c 0c05 	orr.w	ip, ip, r5
   1c208:	fa00 f40e 	lsl.w	r4, r0, lr
   1c20c:	ea4f 4a17 	mov.w	sl, r7, lsr #16
   1c210:	0c25      	lsrs	r5, r4, #16
   1c212:	fbbc f8fa 	udiv	r8, ip, sl
   1c216:	fa1f f987 	uxth.w	r9, r7
   1c21a:	fb0a cc18 	mls	ip, sl, r8, ip
   1c21e:	ea45 450c 	orr.w	r5, r5, ip, lsl #16
   1c222:	fb08 f309 	mul.w	r3, r8, r9
   1c226:	42ab      	cmp	r3, r5
   1c228:	d90a      	bls.n	1c240 <__udivmoddi4+0x6c>
   1c22a:	19ed      	adds	r5, r5, r7
   1c22c:	f108 32ff 	add.w	r2, r8, #4294967295
   1c230:	f080 8123 	bcs.w	1c47a <__udivmoddi4+0x2a6>
   1c234:	42ab      	cmp	r3, r5
   1c236:	f240 8120 	bls.w	1c47a <__udivmoddi4+0x2a6>
   1c23a:	f1a8 0802 	sub.w	r8, r8, #2
   1c23e:	443d      	add	r5, r7
   1c240:	1aed      	subs	r5, r5, r3
   1c242:	b2a4      	uxth	r4, r4
   1c244:	fbb5 f0fa 	udiv	r0, r5, sl
   1c248:	fb0a 5510 	mls	r5, sl, r0, r5
   1c24c:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
   1c250:	fb00 f909 	mul.w	r9, r0, r9
   1c254:	45a1      	cmp	r9, r4
   1c256:	d909      	bls.n	1c26c <__udivmoddi4+0x98>
   1c258:	19e4      	adds	r4, r4, r7
   1c25a:	f100 33ff 	add.w	r3, r0, #4294967295
   1c25e:	f080 810a 	bcs.w	1c476 <__udivmoddi4+0x2a2>
   1c262:	45a1      	cmp	r9, r4
   1c264:	f240 8107 	bls.w	1c476 <__udivmoddi4+0x2a2>
   1c268:	3802      	subs	r0, #2
   1c26a:	443c      	add	r4, r7
   1c26c:	eba4 0409 	sub.w	r4, r4, r9
   1c270:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
   1c274:	2100      	movs	r1, #0
   1c276:	2e00      	cmp	r6, #0
   1c278:	d061      	beq.n	1c33e <__udivmoddi4+0x16a>
   1c27a:	fa24 f40e 	lsr.w	r4, r4, lr
   1c27e:	2300      	movs	r3, #0
   1c280:	6034      	str	r4, [r6, #0]
   1c282:	6073      	str	r3, [r6, #4]
   1c284:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   1c288:	428b      	cmp	r3, r1
   1c28a:	d907      	bls.n	1c29c <__udivmoddi4+0xc8>
   1c28c:	2e00      	cmp	r6, #0
   1c28e:	d054      	beq.n	1c33a <__udivmoddi4+0x166>
   1c290:	2100      	movs	r1, #0
   1c292:	e886 0021 	stmia.w	r6, {r0, r5}
   1c296:	4608      	mov	r0, r1
   1c298:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   1c29c:	fab3 f183 	clz	r1, r3
   1c2a0:	2900      	cmp	r1, #0
   1c2a2:	f040 808e 	bne.w	1c3c2 <__udivmoddi4+0x1ee>
   1c2a6:	42ab      	cmp	r3, r5
   1c2a8:	d302      	bcc.n	1c2b0 <__udivmoddi4+0xdc>
   1c2aa:	4282      	cmp	r2, r0
   1c2ac:	f200 80fa 	bhi.w	1c4a4 <__udivmoddi4+0x2d0>
   1c2b0:	1a84      	subs	r4, r0, r2
   1c2b2:	eb65 0503 	sbc.w	r5, r5, r3
   1c2b6:	2001      	movs	r0, #1
   1c2b8:	46ac      	mov	ip, r5
   1c2ba:	2e00      	cmp	r6, #0
   1c2bc:	d03f      	beq.n	1c33e <__udivmoddi4+0x16a>
   1c2be:	e886 1010 	stmia.w	r6, {r4, ip}
   1c2c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   1c2c6:	b912      	cbnz	r2, 1c2ce <__udivmoddi4+0xfa>
   1c2c8:	2701      	movs	r7, #1
   1c2ca:	fbb7 f7f2 	udiv	r7, r7, r2
   1c2ce:	fab7 fe87 	clz	lr, r7
   1c2d2:	f1be 0f00 	cmp.w	lr, #0
   1c2d6:	d134      	bne.n	1c342 <__udivmoddi4+0x16e>
   1c2d8:	1beb      	subs	r3, r5, r7
   1c2da:	0c3a      	lsrs	r2, r7, #16
   1c2dc:	fa1f fc87 	uxth.w	ip, r7
   1c2e0:	2101      	movs	r1, #1
   1c2e2:	fbb3 f8f2 	udiv	r8, r3, r2
   1c2e6:	0c25      	lsrs	r5, r4, #16
   1c2e8:	fb02 3318 	mls	r3, r2, r8, r3
   1c2ec:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
   1c2f0:	fb0c f308 	mul.w	r3, ip, r8
   1c2f4:	42ab      	cmp	r3, r5
   1c2f6:	d907      	bls.n	1c308 <__udivmoddi4+0x134>
   1c2f8:	19ed      	adds	r5, r5, r7
   1c2fa:	f108 30ff 	add.w	r0, r8, #4294967295
   1c2fe:	d202      	bcs.n	1c306 <__udivmoddi4+0x132>
   1c300:	42ab      	cmp	r3, r5
   1c302:	f200 80d1 	bhi.w	1c4a8 <__udivmoddi4+0x2d4>
   1c306:	4680      	mov	r8, r0
   1c308:	1aed      	subs	r5, r5, r3
   1c30a:	b2a3      	uxth	r3, r4
   1c30c:	fbb5 f0f2 	udiv	r0, r5, r2
   1c310:	fb02 5510 	mls	r5, r2, r0, r5
   1c314:	ea43 4405 	orr.w	r4, r3, r5, lsl #16
   1c318:	fb0c fc00 	mul.w	ip, ip, r0
   1c31c:	45a4      	cmp	ip, r4
   1c31e:	d907      	bls.n	1c330 <__udivmoddi4+0x15c>
   1c320:	19e4      	adds	r4, r4, r7
   1c322:	f100 33ff 	add.w	r3, r0, #4294967295
   1c326:	d202      	bcs.n	1c32e <__udivmoddi4+0x15a>
   1c328:	45a4      	cmp	ip, r4
   1c32a:	f200 80b8 	bhi.w	1c49e <__udivmoddi4+0x2ca>
   1c32e:	4618      	mov	r0, r3
   1c330:	eba4 040c 	sub.w	r4, r4, ip
   1c334:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
   1c338:	e79d      	b.n	1c276 <__udivmoddi4+0xa2>
   1c33a:	4631      	mov	r1, r6
   1c33c:	4630      	mov	r0, r6
   1c33e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   1c342:	f1ce 0420 	rsb	r4, lr, #32
   1c346:	fa05 f30e 	lsl.w	r3, r5, lr
   1c34a:	fa07 f70e 	lsl.w	r7, r7, lr
   1c34e:	fa20 f804 	lsr.w	r8, r0, r4
   1c352:	0c3a      	lsrs	r2, r7, #16
   1c354:	fa25 f404 	lsr.w	r4, r5, r4
   1c358:	ea48 0803 	orr.w	r8, r8, r3
   1c35c:	fbb4 f1f2 	udiv	r1, r4, r2
   1c360:	ea4f 4518 	mov.w	r5, r8, lsr #16
   1c364:	fb02 4411 	mls	r4, r2, r1, r4
   1c368:	fa1f fc87 	uxth.w	ip, r7
   1c36c:	ea45 4504 	orr.w	r5, r5, r4, lsl #16
   1c370:	fb01 f30c 	mul.w	r3, r1, ip
   1c374:	42ab      	cmp	r3, r5
   1c376:	fa00 f40e 	lsl.w	r4, r0, lr
   1c37a:	d909      	bls.n	1c390 <__udivmoddi4+0x1bc>
   1c37c:	19ed      	adds	r5, r5, r7
   1c37e:	f101 30ff 	add.w	r0, r1, #4294967295
   1c382:	f080 808a 	bcs.w	1c49a <__udivmoddi4+0x2c6>
   1c386:	42ab      	cmp	r3, r5
   1c388:	f240 8087 	bls.w	1c49a <__udivmoddi4+0x2c6>
   1c38c:	3902      	subs	r1, #2
   1c38e:	443d      	add	r5, r7
   1c390:	1aeb      	subs	r3, r5, r3
   1c392:	fa1f f588 	uxth.w	r5, r8
   1c396:	fbb3 f0f2 	udiv	r0, r3, r2
   1c39a:	fb02 3310 	mls	r3, r2, r0, r3
   1c39e:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
   1c3a2:	fb00 f30c 	mul.w	r3, r0, ip
   1c3a6:	42ab      	cmp	r3, r5
   1c3a8:	d907      	bls.n	1c3ba <__udivmoddi4+0x1e6>
   1c3aa:	19ed      	adds	r5, r5, r7
   1c3ac:	f100 38ff 	add.w	r8, r0, #4294967295
   1c3b0:	d26f      	bcs.n	1c492 <__udivmoddi4+0x2be>
   1c3b2:	42ab      	cmp	r3, r5
   1c3b4:	d96d      	bls.n	1c492 <__udivmoddi4+0x2be>
   1c3b6:	3802      	subs	r0, #2
   1c3b8:	443d      	add	r5, r7
   1c3ba:	1aeb      	subs	r3, r5, r3
   1c3bc:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
   1c3c0:	e78f      	b.n	1c2e2 <__udivmoddi4+0x10e>
   1c3c2:	f1c1 0720 	rsb	r7, r1, #32
   1c3c6:	fa22 f807 	lsr.w	r8, r2, r7
   1c3ca:	408b      	lsls	r3, r1
   1c3cc:	fa05 f401 	lsl.w	r4, r5, r1
   1c3d0:	ea48 0303 	orr.w	r3, r8, r3
   1c3d4:	fa20 fe07 	lsr.w	lr, r0, r7
   1c3d8:	ea4f 4c13 	mov.w	ip, r3, lsr #16
   1c3dc:	40fd      	lsrs	r5, r7
   1c3de:	ea4e 0e04 	orr.w	lr, lr, r4
   1c3e2:	fbb5 f9fc 	udiv	r9, r5, ip
   1c3e6:	ea4f 441e 	mov.w	r4, lr, lsr #16
   1c3ea:	fb0c 5519 	mls	r5, ip, r9, r5
   1c3ee:	fa1f f883 	uxth.w	r8, r3
   1c3f2:	ea44 4505 	orr.w	r5, r4, r5, lsl #16
   1c3f6:	fb09 f408 	mul.w	r4, r9, r8
   1c3fa:	42ac      	cmp	r4, r5
   1c3fc:	fa02 f201 	lsl.w	r2, r2, r1
   1c400:	fa00 fa01 	lsl.w	sl, r0, r1
   1c404:	d908      	bls.n	1c418 <__udivmoddi4+0x244>
   1c406:	18ed      	adds	r5, r5, r3
   1c408:	f109 30ff 	add.w	r0, r9, #4294967295
   1c40c:	d243      	bcs.n	1c496 <__udivmoddi4+0x2c2>
   1c40e:	42ac      	cmp	r4, r5
   1c410:	d941      	bls.n	1c496 <__udivmoddi4+0x2c2>
   1c412:	f1a9 0902 	sub.w	r9, r9, #2
   1c416:	441d      	add	r5, r3
   1c418:	1b2d      	subs	r5, r5, r4
   1c41a:	fa1f fe8e 	uxth.w	lr, lr
   1c41e:	fbb5 f0fc 	udiv	r0, r5, ip
   1c422:	fb0c 5510 	mls	r5, ip, r0, r5
   1c426:	ea4e 4405 	orr.w	r4, lr, r5, lsl #16
   1c42a:	fb00 f808 	mul.w	r8, r0, r8
   1c42e:	45a0      	cmp	r8, r4
   1c430:	d907      	bls.n	1c442 <__udivmoddi4+0x26e>
   1c432:	18e4      	adds	r4, r4, r3
   1c434:	f100 35ff 	add.w	r5, r0, #4294967295
   1c438:	d229      	bcs.n	1c48e <__udivmoddi4+0x2ba>
   1c43a:	45a0      	cmp	r8, r4
   1c43c:	d927      	bls.n	1c48e <__udivmoddi4+0x2ba>
   1c43e:	3802      	subs	r0, #2
   1c440:	441c      	add	r4, r3
   1c442:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
   1c446:	eba4 0408 	sub.w	r4, r4, r8
   1c44a:	fba0 8902 	umull	r8, r9, r0, r2
   1c44e:	454c      	cmp	r4, r9
   1c450:	46c6      	mov	lr, r8
   1c452:	464d      	mov	r5, r9
   1c454:	d315      	bcc.n	1c482 <__udivmoddi4+0x2ae>
   1c456:	d012      	beq.n	1c47e <__udivmoddi4+0x2aa>
   1c458:	b156      	cbz	r6, 1c470 <__udivmoddi4+0x29c>
   1c45a:	ebba 030e 	subs.w	r3, sl, lr
   1c45e:	eb64 0405 	sbc.w	r4, r4, r5
   1c462:	fa04 f707 	lsl.w	r7, r4, r7
   1c466:	40cb      	lsrs	r3, r1
   1c468:	431f      	orrs	r7, r3
   1c46a:	40cc      	lsrs	r4, r1
   1c46c:	6037      	str	r7, [r6, #0]
   1c46e:	6074      	str	r4, [r6, #4]
   1c470:	2100      	movs	r1, #0
   1c472:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   1c476:	4618      	mov	r0, r3
   1c478:	e6f8      	b.n	1c26c <__udivmoddi4+0x98>
   1c47a:	4690      	mov	r8, r2
   1c47c:	e6e0      	b.n	1c240 <__udivmoddi4+0x6c>
   1c47e:	45c2      	cmp	sl, r8
   1c480:	d2ea      	bcs.n	1c458 <__udivmoddi4+0x284>
   1c482:	ebb8 0e02 	subs.w	lr, r8, r2
   1c486:	eb69 0503 	sbc.w	r5, r9, r3
   1c48a:	3801      	subs	r0, #1
   1c48c:	e7e4      	b.n	1c458 <__udivmoddi4+0x284>
   1c48e:	4628      	mov	r0, r5
   1c490:	e7d7      	b.n	1c442 <__udivmoddi4+0x26e>
   1c492:	4640      	mov	r0, r8
   1c494:	e791      	b.n	1c3ba <__udivmoddi4+0x1e6>
   1c496:	4681      	mov	r9, r0
   1c498:	e7be      	b.n	1c418 <__udivmoddi4+0x244>
   1c49a:	4601      	mov	r1, r0
   1c49c:	e778      	b.n	1c390 <__udivmoddi4+0x1bc>
   1c49e:	3802      	subs	r0, #2
   1c4a0:	443c      	add	r4, r7
   1c4a2:	e745      	b.n	1c330 <__udivmoddi4+0x15c>
   1c4a4:	4608      	mov	r0, r1
   1c4a6:	e708      	b.n	1c2ba <__udivmoddi4+0xe6>
   1c4a8:	f1a8 0802 	sub.w	r8, r8, #2
   1c4ac:	443d      	add	r5, r7
   1c4ae:	e72b      	b.n	1c308 <__udivmoddi4+0x134>

0001c4b0 <selfrel_offset31>:
   1c4b0:	6803      	ldr	r3, [r0, #0]
   1c4b2:	005a      	lsls	r2, r3, #1
   1c4b4:	bf4c      	ite	mi
   1c4b6:	f043 4300 	orrmi.w	r3, r3, #2147483648	; 0x80000000
   1c4ba:	f023 4300 	bicpl.w	r3, r3, #2147483648	; 0x80000000
   1c4be:	4418      	add	r0, r3
   1c4c0:	4770      	bx	lr
   1c4c2:	bf00      	nop

0001c4c4 <search_EIT_table>:
   1c4c4:	b361      	cbz	r1, 1c520 <search_EIT_table+0x5c>
   1c4c6:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1c4ca:	f101 3aff 	add.w	sl, r1, #4294967295
   1c4ce:	4690      	mov	r8, r2
   1c4d0:	4606      	mov	r6, r0
   1c4d2:	46d1      	mov	r9, sl
   1c4d4:	2700      	movs	r7, #0
   1c4d6:	eb07 0409 	add.w	r4, r7, r9
   1c4da:	eb04 74d4 	add.w	r4, r4, r4, lsr #31
   1c4de:	1064      	asrs	r4, r4, #1
   1c4e0:	00e5      	lsls	r5, r4, #3
   1c4e2:	1971      	adds	r1, r6, r5
   1c4e4:	4608      	mov	r0, r1
   1c4e6:	f7ff ffe3 	bl	1c4b0 <selfrel_offset31>
   1c4ea:	45a2      	cmp	sl, r4
   1c4ec:	4683      	mov	fp, r0
   1c4ee:	f105 0008 	add.w	r0, r5, #8
   1c4f2:	4430      	add	r0, r6
   1c4f4:	d009      	beq.n	1c50a <search_EIT_table+0x46>
   1c4f6:	f7ff ffdb 	bl	1c4b0 <selfrel_offset31>
   1c4fa:	45c3      	cmp	fp, r8
   1c4fc:	f100 30ff 	add.w	r0, r0, #4294967295
   1c500:	d805      	bhi.n	1c50e <search_EIT_table+0x4a>
   1c502:	4540      	cmp	r0, r8
   1c504:	d209      	bcs.n	1c51a <search_EIT_table+0x56>
   1c506:	1c67      	adds	r7, r4, #1
   1c508:	e7e5      	b.n	1c4d6 <search_EIT_table+0x12>
   1c50a:	45c3      	cmp	fp, r8
   1c50c:	d905      	bls.n	1c51a <search_EIT_table+0x56>
   1c50e:	42a7      	cmp	r7, r4
   1c510:	d002      	beq.n	1c518 <search_EIT_table+0x54>
   1c512:	f104 39ff 	add.w	r9, r4, #4294967295
   1c516:	e7de      	b.n	1c4d6 <search_EIT_table+0x12>
   1c518:	2100      	movs	r1, #0
   1c51a:	4608      	mov	r0, r1
   1c51c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1c520:	4608      	mov	r0, r1
   1c522:	4770      	bx	lr

0001c524 <__gnu_unwind_get_pr_addr>:
   1c524:	2801      	cmp	r0, #1
   1c526:	d007      	beq.n	1c538 <__gnu_unwind_get_pr_addr+0x14>
   1c528:	2802      	cmp	r0, #2
   1c52a:	d007      	beq.n	1c53c <__gnu_unwind_get_pr_addr+0x18>
   1c52c:	4b04      	ldr	r3, [pc, #16]	; (1c540 <__gnu_unwind_get_pr_addr+0x1c>)
   1c52e:	2800      	cmp	r0, #0
   1c530:	bf0c      	ite	eq
   1c532:	4618      	moveq	r0, r3
   1c534:	2000      	movne	r0, #0
   1c536:	4770      	bx	lr
   1c538:	4802      	ldr	r0, [pc, #8]	; (1c544 <__gnu_unwind_get_pr_addr+0x20>)
   1c53a:	4770      	bx	lr
   1c53c:	4802      	ldr	r0, [pc, #8]	; (1c548 <__gnu_unwind_get_pr_addr+0x24>)
   1c53e:	4770      	bx	lr
   1c540:	0001cc29 	.word	0x0001cc29
   1c544:	0001cc2d 	.word	0x0001cc2d
   1c548:	0001cc31 	.word	0x0001cc31

0001c54c <get_eit_entry>:
   1c54c:	b530      	push	{r4, r5, lr}
   1c54e:	4b24      	ldr	r3, [pc, #144]	; (1c5e0 <get_eit_entry+0x94>)
   1c550:	b083      	sub	sp, #12
   1c552:	4604      	mov	r4, r0
   1c554:	1e8d      	subs	r5, r1, #2
   1c556:	b37b      	cbz	r3, 1c5b8 <get_eit_entry+0x6c>
   1c558:	a901      	add	r1, sp, #4
   1c55a:	4628      	mov	r0, r5
   1c55c:	f3af 8000 	nop.w
   1c560:	b320      	cbz	r0, 1c5ac <get_eit_entry+0x60>
   1c562:	9901      	ldr	r1, [sp, #4]
   1c564:	462a      	mov	r2, r5
   1c566:	f7ff ffad 	bl	1c4c4 <search_EIT_table>
   1c56a:	4601      	mov	r1, r0
   1c56c:	b1f0      	cbz	r0, 1c5ac <get_eit_entry+0x60>
   1c56e:	f7ff ff9f 	bl	1c4b0 <selfrel_offset31>
   1c572:	684b      	ldr	r3, [r1, #4]
   1c574:	64a0      	str	r0, [r4, #72]	; 0x48
   1c576:	2b01      	cmp	r3, #1
   1c578:	d012      	beq.n	1c5a0 <get_eit_entry+0x54>
   1c57a:	2b00      	cmp	r3, #0
   1c57c:	f101 0004 	add.w	r0, r1, #4
   1c580:	db20      	blt.n	1c5c4 <get_eit_entry+0x78>
   1c582:	f7ff ff95 	bl	1c4b0 <selfrel_offset31>
   1c586:	2300      	movs	r3, #0
   1c588:	64e0      	str	r0, [r4, #76]	; 0x4c
   1c58a:	6523      	str	r3, [r4, #80]	; 0x50
   1c58c:	6803      	ldr	r3, [r0, #0]
   1c58e:	2b00      	cmp	r3, #0
   1c590:	db1c      	blt.n	1c5cc <get_eit_entry+0x80>
   1c592:	f7ff ff8d 	bl	1c4b0 <selfrel_offset31>
   1c596:	2300      	movs	r3, #0
   1c598:	6120      	str	r0, [r4, #16]
   1c59a:	4618      	mov	r0, r3
   1c59c:	b003      	add	sp, #12
   1c59e:	bd30      	pop	{r4, r5, pc}
   1c5a0:	2300      	movs	r3, #0
   1c5a2:	6123      	str	r3, [r4, #16]
   1c5a4:	2305      	movs	r3, #5
   1c5a6:	4618      	mov	r0, r3
   1c5a8:	b003      	add	sp, #12
   1c5aa:	bd30      	pop	{r4, r5, pc}
   1c5ac:	2300      	movs	r3, #0
   1c5ae:	6123      	str	r3, [r4, #16]
   1c5b0:	2309      	movs	r3, #9
   1c5b2:	4618      	mov	r0, r3
   1c5b4:	b003      	add	sp, #12
   1c5b6:	bd30      	pop	{r4, r5, pc}
   1c5b8:	490a      	ldr	r1, [pc, #40]	; (1c5e4 <get_eit_entry+0x98>)
   1c5ba:	480b      	ldr	r0, [pc, #44]	; (1c5e8 <get_eit_entry+0x9c>)
   1c5bc:	1a09      	subs	r1, r1, r0
   1c5be:	10c9      	asrs	r1, r1, #3
   1c5c0:	9101      	str	r1, [sp, #4]
   1c5c2:	e7cf      	b.n	1c564 <get_eit_entry+0x18>
   1c5c4:	2301      	movs	r3, #1
   1c5c6:	64e0      	str	r0, [r4, #76]	; 0x4c
   1c5c8:	6523      	str	r3, [r4, #80]	; 0x50
   1c5ca:	e7df      	b.n	1c58c <get_eit_entry+0x40>
   1c5cc:	f3c3 6003 	ubfx	r0, r3, #24, #4
   1c5d0:	f7ff ffa8 	bl	1c524 <__gnu_unwind_get_pr_addr>
   1c5d4:	2800      	cmp	r0, #0
   1c5d6:	6120      	str	r0, [r4, #16]
   1c5d8:	bf14      	ite	ne
   1c5da:	2300      	movne	r3, #0
   1c5dc:	2309      	moveq	r3, #9
   1c5de:	e7dc      	b.n	1c59a <get_eit_entry+0x4e>
   1c5e0:	00000000 	.word	0x00000000
   1c5e4:	00024cc4 	.word	0x00024cc4
   1c5e8:	00024b3c 	.word	0x00024b3c

0001c5ec <restore_non_core_regs>:
   1c5ec:	6803      	ldr	r3, [r0, #0]
   1c5ee:	07da      	lsls	r2, r3, #31
   1c5f0:	b510      	push	{r4, lr}
   1c5f2:	4604      	mov	r4, r0
   1c5f4:	d406      	bmi.n	1c604 <restore_non_core_regs+0x18>
   1c5f6:	079b      	lsls	r3, r3, #30
   1c5f8:	f100 0048 	add.w	r0, r0, #72	; 0x48
   1c5fc:	d509      	bpl.n	1c612 <restore_non_core_regs+0x26>
   1c5fe:	f000 fc51 	bl	1cea4 <__gnu_Unwind_Restore_VFP_D>
   1c602:	6823      	ldr	r3, [r4, #0]
   1c604:	0759      	lsls	r1, r3, #29
   1c606:	d509      	bpl.n	1c61c <restore_non_core_regs+0x30>
   1c608:	071a      	lsls	r2, r3, #28
   1c60a:	d50e      	bpl.n	1c62a <restore_non_core_regs+0x3e>
   1c60c:	06db      	lsls	r3, r3, #27
   1c60e:	d513      	bpl.n	1c638 <restore_non_core_regs+0x4c>
   1c610:	bd10      	pop	{r4, pc}
   1c612:	f000 fc3f 	bl	1ce94 <__gnu_Unwind_Restore_VFP>
   1c616:	6823      	ldr	r3, [r4, #0]
   1c618:	0759      	lsls	r1, r3, #29
   1c61a:	d4f5      	bmi.n	1c608 <restore_non_core_regs+0x1c>
   1c61c:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
   1c620:	f000 fc48 	bl	1ceb4 <__gnu_Unwind_Restore_VFP_D_16_to_31>
   1c624:	6823      	ldr	r3, [r4, #0]
   1c626:	071a      	lsls	r2, r3, #28
   1c628:	d4f0      	bmi.n	1c60c <restore_non_core_regs+0x20>
   1c62a:	f504 70a8 	add.w	r0, r4, #336	; 0x150
   1c62e:	f000 fc49 	bl	1cec4 <__gnu_Unwind_Restore_WMMXD>
   1c632:	6823      	ldr	r3, [r4, #0]
   1c634:	06db      	lsls	r3, r3, #27
   1c636:	d4eb      	bmi.n	1c610 <restore_non_core_regs+0x24>
   1c638:	f504 70e8 	add.w	r0, r4, #464	; 0x1d0
   1c63c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   1c640:	f000 bc84 	b.w	1cf4c <__gnu_Unwind_Restore_WMMXC>

0001c644 <_Unwind_decode_typeinfo_ptr.isra.0>:
   1c644:	6803      	ldr	r3, [r0, #0]
   1c646:	b103      	cbz	r3, 1c64a <_Unwind_decode_typeinfo_ptr.isra.0+0x6>
   1c648:	4403      	add	r3, r0
   1c64a:	4618      	mov	r0, r3
   1c64c:	4770      	bx	lr
   1c64e:	bf00      	nop

0001c650 <__gnu_unwind_24bit.isra.1>:
   1c650:	2009      	movs	r0, #9
   1c652:	4770      	bx	lr

0001c654 <_Unwind_DebugHook>:
   1c654:	4770      	bx	lr
   1c656:	bf00      	nop

0001c658 <unwind_phase2>:
   1c658:	b570      	push	{r4, r5, r6, lr}
   1c65a:	4604      	mov	r4, r0
   1c65c:	460d      	mov	r5, r1
   1c65e:	e008      	b.n	1c672 <unwind_phase2+0x1a>
   1c660:	6c2b      	ldr	r3, [r5, #64]	; 0x40
   1c662:	6163      	str	r3, [r4, #20]
   1c664:	462a      	mov	r2, r5
   1c666:	6923      	ldr	r3, [r4, #16]
   1c668:	4621      	mov	r1, r4
   1c66a:	2001      	movs	r0, #1
   1c66c:	4798      	blx	r3
   1c66e:	2808      	cmp	r0, #8
   1c670:	d108      	bne.n	1c684 <unwind_phase2+0x2c>
   1c672:	6c29      	ldr	r1, [r5, #64]	; 0x40
   1c674:	4620      	mov	r0, r4
   1c676:	f7ff ff69 	bl	1c54c <get_eit_entry>
   1c67a:	4606      	mov	r6, r0
   1c67c:	2800      	cmp	r0, #0
   1c67e:	d0ef      	beq.n	1c660 <unwind_phase2+0x8>
   1c680:	f000 fe94 	bl	1d3ac <abort>
   1c684:	2807      	cmp	r0, #7
   1c686:	d1fb      	bne.n	1c680 <unwind_phase2+0x28>
   1c688:	4630      	mov	r0, r6
   1c68a:	6c29      	ldr	r1, [r5, #64]	; 0x40
   1c68c:	f7ff ffe2 	bl	1c654 <_Unwind_DebugHook>
   1c690:	1d28      	adds	r0, r5, #4
   1c692:	f000 fbf3 	bl	1ce7c <__restore_core_regs>
   1c696:	bf00      	nop

0001c698 <unwind_phase2_forced>:
   1c698:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   1c69c:	1d0c      	adds	r4, r1, #4
   1c69e:	4605      	mov	r5, r0
   1c6a0:	4692      	mov	sl, r2
   1c6a2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
   1c6a4:	f5ad 7d72 	sub.w	sp, sp, #968	; 0x3c8
   1c6a8:	ae03      	add	r6, sp, #12
   1c6aa:	c60f      	stmia	r6!, {r0, r1, r2, r3}
   1c6ac:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
   1c6ae:	c60f      	stmia	r6!, {r0, r1, r2, r3}
   1c6b0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
   1c6b2:	c60f      	stmia	r6!, {r0, r1, r2, r3}
   1c6b4:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
   1c6b8:	ac02      	add	r4, sp, #8
   1c6ba:	f8d5 800c 	ldr.w	r8, [r5, #12]
   1c6be:	f8d5 9018 	ldr.w	r9, [r5, #24]
   1c6c2:	e886 000f 	stmia.w	r6, {r0, r1, r2, r3}
   1c6c6:	2300      	movs	r3, #0
   1c6c8:	4628      	mov	r0, r5
   1c6ca:	6c21      	ldr	r1, [r4, #64]	; 0x40
   1c6cc:	6023      	str	r3, [r4, #0]
   1c6ce:	f7ff ff3d 	bl	1c54c <get_eit_entry>
   1c6d2:	f1ba 0f00 	cmp.w	sl, #0
   1c6d6:	4607      	mov	r7, r0
   1c6d8:	bf14      	ite	ne
   1c6da:	260a      	movne	r6, #10
   1c6dc:	2609      	moveq	r6, #9
   1c6de:	b17f      	cbz	r7, 1c700 <unwind_phase2_forced+0x68>
   1c6e0:	6ba3      	ldr	r3, [r4, #56]	; 0x38
   1c6e2:	f046 0110 	orr.w	r1, r6, #16
   1c6e6:	e88d 0210 	stmia.w	sp, {r4, r9}
   1c6ea:	462a      	mov	r2, r5
   1c6ec:	6463      	str	r3, [r4, #68]	; 0x44
   1c6ee:	2001      	movs	r0, #1
   1c6f0:	462b      	mov	r3, r5
   1c6f2:	47c0      	blx	r8
   1c6f4:	bb78      	cbnz	r0, 1c756 <unwind_phase2_forced+0xbe>
   1c6f6:	4638      	mov	r0, r7
   1c6f8:	f50d 7d72 	add.w	sp, sp, #968	; 0x3c8
   1c6fc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   1c700:	6c23      	ldr	r3, [r4, #64]	; 0x40
   1c702:	616b      	str	r3, [r5, #20]
   1c704:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
   1c708:	4621      	mov	r1, r4
   1c70a:	a87a      	add	r0, sp, #488	; 0x1e8
   1c70c:	f001 fc58 	bl	1dfc0 <memcpy>
   1c710:	692b      	ldr	r3, [r5, #16]
   1c712:	aa7a      	add	r2, sp, #488	; 0x1e8
   1c714:	4629      	mov	r1, r5
   1c716:	4630      	mov	r0, r6
   1c718:	4798      	blx	r3
   1c71a:	9b88      	ldr	r3, [sp, #544]	; 0x220
   1c71c:	4682      	mov	sl, r0
   1c71e:	e88d 0210 	stmia.w	sp, {r4, r9}
   1c722:	4631      	mov	r1, r6
   1c724:	6463      	str	r3, [r4, #68]	; 0x44
   1c726:	462a      	mov	r2, r5
   1c728:	462b      	mov	r3, r5
   1c72a:	2001      	movs	r0, #1
   1c72c:	47c0      	blx	r8
   1c72e:	b990      	cbnz	r0, 1c756 <unwind_phase2_forced+0xbe>
   1c730:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
   1c734:	a97a      	add	r1, sp, #488	; 0x1e8
   1c736:	4620      	mov	r0, r4
   1c738:	f001 fc42 	bl	1dfc0 <memcpy>
   1c73c:	f1ba 0f08 	cmp.w	sl, #8
   1c740:	d106      	bne.n	1c750 <unwind_phase2_forced+0xb8>
   1c742:	6c21      	ldr	r1, [r4, #64]	; 0x40
   1c744:	4628      	mov	r0, r5
   1c746:	f7ff ff01 	bl	1c54c <get_eit_entry>
   1c74a:	2609      	movs	r6, #9
   1c74c:	4607      	mov	r7, r0
   1c74e:	e7c6      	b.n	1c6de <unwind_phase2_forced+0x46>
   1c750:	f1ba 0f07 	cmp.w	sl, #7
   1c754:	d005      	beq.n	1c762 <unwind_phase2_forced+0xca>
   1c756:	2709      	movs	r7, #9
   1c758:	4638      	mov	r0, r7
   1c75a:	f50d 7d72 	add.w	sp, sp, #968	; 0x3c8
   1c75e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   1c762:	4638      	mov	r0, r7
   1c764:	6c21      	ldr	r1, [r4, #64]	; 0x40
   1c766:	f7ff ff75 	bl	1c654 <_Unwind_DebugHook>
   1c76a:	a803      	add	r0, sp, #12
   1c76c:	f000 fb86 	bl	1ce7c <__restore_core_regs>

0001c770 <_Unwind_GetCFA>:
   1c770:	6c40      	ldr	r0, [r0, #68]	; 0x44
   1c772:	4770      	bx	lr

0001c774 <__gnu_Unwind_RaiseException>:
   1c774:	b5f0      	push	{r4, r5, r6, r7, lr}
   1c776:	6bcb      	ldr	r3, [r1, #60]	; 0x3c
   1c778:	640b      	str	r3, [r1, #64]	; 0x40
   1c77a:	1d0e      	adds	r6, r1, #4
   1c77c:	460f      	mov	r7, r1
   1c77e:	4604      	mov	r4, r0
   1c780:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
   1c782:	b0f9      	sub	sp, #484	; 0x1e4
   1c784:	ad01      	add	r5, sp, #4
   1c786:	c50f      	stmia	r5!, {r0, r1, r2, r3}
   1c788:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
   1c78a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
   1c78c:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
   1c78e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
   1c790:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
   1c794:	f04f 36ff 	mov.w	r6, #4294967295
   1c798:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
   1c79c:	9600      	str	r6, [sp, #0]
   1c79e:	e006      	b.n	1c7ae <__gnu_Unwind_RaiseException+0x3a>
   1c7a0:	6923      	ldr	r3, [r4, #16]
   1c7a2:	466a      	mov	r2, sp
   1c7a4:	4621      	mov	r1, r4
   1c7a6:	4798      	blx	r3
   1c7a8:	2808      	cmp	r0, #8
   1c7aa:	4605      	mov	r5, r0
   1c7ac:	d108      	bne.n	1c7c0 <__gnu_Unwind_RaiseException+0x4c>
   1c7ae:	9910      	ldr	r1, [sp, #64]	; 0x40
   1c7b0:	4620      	mov	r0, r4
   1c7b2:	f7ff fecb 	bl	1c54c <get_eit_entry>
   1c7b6:	2800      	cmp	r0, #0
   1c7b8:	d0f2      	beq.n	1c7a0 <__gnu_Unwind_RaiseException+0x2c>
   1c7ba:	2009      	movs	r0, #9
   1c7bc:	b079      	add	sp, #484	; 0x1e4
   1c7be:	bdf0      	pop	{r4, r5, r6, r7, pc}
   1c7c0:	4668      	mov	r0, sp
   1c7c2:	f7ff ff13 	bl	1c5ec <restore_non_core_regs>
   1c7c6:	2d06      	cmp	r5, #6
   1c7c8:	d1f7      	bne.n	1c7ba <__gnu_Unwind_RaiseException+0x46>
   1c7ca:	4639      	mov	r1, r7
   1c7cc:	4620      	mov	r0, r4
   1c7ce:	f7ff ff43 	bl	1c658 <unwind_phase2>
   1c7d2:	bf00      	nop

0001c7d4 <__gnu_Unwind_ForcedUnwind>:
   1c7d4:	b430      	push	{r4, r5}
   1c7d6:	6bdd      	ldr	r5, [r3, #60]	; 0x3c
   1c7d8:	60c1      	str	r1, [r0, #12]
   1c7da:	6182      	str	r2, [r0, #24]
   1c7dc:	4619      	mov	r1, r3
   1c7de:	641d      	str	r5, [r3, #64]	; 0x40
   1c7e0:	2200      	movs	r2, #0
   1c7e2:	bc30      	pop	{r4, r5}
   1c7e4:	e758      	b.n	1c698 <unwind_phase2_forced>
   1c7e6:	bf00      	nop

0001c7e8 <__gnu_Unwind_Resume>:
   1c7e8:	b570      	push	{r4, r5, r6, lr}
   1c7ea:	68c6      	ldr	r6, [r0, #12]
   1c7ec:	6943      	ldr	r3, [r0, #20]
   1c7ee:	640b      	str	r3, [r1, #64]	; 0x40
   1c7f0:	b126      	cbz	r6, 1c7fc <__gnu_Unwind_Resume+0x14>
   1c7f2:	2201      	movs	r2, #1
   1c7f4:	f7ff ff50 	bl	1c698 <unwind_phase2_forced>
   1c7f8:	f000 fdd8 	bl	1d3ac <abort>
   1c7fc:	6903      	ldr	r3, [r0, #16]
   1c7fe:	460a      	mov	r2, r1
   1c800:	4604      	mov	r4, r0
   1c802:	460d      	mov	r5, r1
   1c804:	4601      	mov	r1, r0
   1c806:	2002      	movs	r0, #2
   1c808:	4798      	blx	r3
   1c80a:	2807      	cmp	r0, #7
   1c80c:	d007      	beq.n	1c81e <__gnu_Unwind_Resume+0x36>
   1c80e:	2808      	cmp	r0, #8
   1c810:	d103      	bne.n	1c81a <__gnu_Unwind_Resume+0x32>
   1c812:	4629      	mov	r1, r5
   1c814:	4620      	mov	r0, r4
   1c816:	f7ff ff1f 	bl	1c658 <unwind_phase2>
   1c81a:	f000 fdc7 	bl	1d3ac <abort>
   1c81e:	4630      	mov	r0, r6
   1c820:	6c29      	ldr	r1, [r5, #64]	; 0x40
   1c822:	f7ff ff17 	bl	1c654 <_Unwind_DebugHook>
   1c826:	1d28      	adds	r0, r5, #4
   1c828:	f000 fb28 	bl	1ce7c <__restore_core_regs>

0001c82c <__gnu_Unwind_Resume_or_Rethrow>:
   1c82c:	68c2      	ldr	r2, [r0, #12]
   1c82e:	b11a      	cbz	r2, 1c838 <__gnu_Unwind_Resume_or_Rethrow+0xc>
   1c830:	6bca      	ldr	r2, [r1, #60]	; 0x3c
   1c832:	640a      	str	r2, [r1, #64]	; 0x40
   1c834:	2200      	movs	r2, #0
   1c836:	e72f      	b.n	1c698 <unwind_phase2_forced>
   1c838:	e79c      	b.n	1c774 <__gnu_Unwind_RaiseException>
   1c83a:	bf00      	nop

0001c83c <_Unwind_Complete>:
   1c83c:	4770      	bx	lr
   1c83e:	bf00      	nop

0001c840 <_Unwind_DeleteException>:
   1c840:	6883      	ldr	r3, [r0, #8]
   1c842:	b113      	cbz	r3, 1c84a <_Unwind_DeleteException+0xa>
   1c844:	4601      	mov	r1, r0
   1c846:	2001      	movs	r0, #1
   1c848:	4718      	bx	r3
   1c84a:	4770      	bx	lr

0001c84c <_Unwind_VRS_Get>:
   1c84c:	b500      	push	{lr}
   1c84e:	2904      	cmp	r1, #4
   1c850:	d807      	bhi.n	1c862 <_Unwind_VRS_Get+0x16>
   1c852:	e8df f001 	tbb	[pc, r1]
   1c856:	0903      	.short	0x0903
   1c858:	0906      	.short	0x0906
   1c85a:	09          	.byte	0x09
   1c85b:	00          	.byte	0x00
   1c85c:	b90b      	cbnz	r3, 1c862 <_Unwind_VRS_Get+0x16>
   1c85e:	2a0f      	cmp	r2, #15
   1c860:	d905      	bls.n	1c86e <_Unwind_VRS_Get+0x22>
   1c862:	2002      	movs	r0, #2
   1c864:	f85d fb04 	ldr.w	pc, [sp], #4
   1c868:	2001      	movs	r0, #1
   1c86a:	f85d fb04 	ldr.w	pc, [sp], #4
   1c86e:	eb00 0282 	add.w	r2, r0, r2, lsl #2
   1c872:	4618      	mov	r0, r3
   1c874:	6853      	ldr	r3, [r2, #4]
   1c876:	9a01      	ldr	r2, [sp, #4]
   1c878:	6013      	str	r3, [r2, #0]
   1c87a:	f85d fb04 	ldr.w	pc, [sp], #4
   1c87e:	bf00      	nop

0001c880 <_Unwind_GetGR>:
   1c880:	b510      	push	{r4, lr}
   1c882:	b084      	sub	sp, #16
   1c884:	2300      	movs	r3, #0
   1c886:	ac03      	add	r4, sp, #12
   1c888:	460a      	mov	r2, r1
   1c88a:	9400      	str	r4, [sp, #0]
   1c88c:	4619      	mov	r1, r3
   1c88e:	f7ff ffdd 	bl	1c84c <_Unwind_VRS_Get>
   1c892:	9803      	ldr	r0, [sp, #12]
   1c894:	b004      	add	sp, #16
   1c896:	bd10      	pop	{r4, pc}

0001c898 <_Unwind_VRS_Set>:
   1c898:	b500      	push	{lr}
   1c89a:	2904      	cmp	r1, #4
   1c89c:	d807      	bhi.n	1c8ae <_Unwind_VRS_Set+0x16>
   1c89e:	e8df f001 	tbb	[pc, r1]
   1c8a2:	0903      	.short	0x0903
   1c8a4:	0906      	.short	0x0906
   1c8a6:	09          	.byte	0x09
   1c8a7:	00          	.byte	0x00
   1c8a8:	b90b      	cbnz	r3, 1c8ae <_Unwind_VRS_Set+0x16>
   1c8aa:	2a0f      	cmp	r2, #15
   1c8ac:	d905      	bls.n	1c8ba <_Unwind_VRS_Set+0x22>
   1c8ae:	2002      	movs	r0, #2
   1c8b0:	f85d fb04 	ldr.w	pc, [sp], #4
   1c8b4:	2001      	movs	r0, #1
   1c8b6:	f85d fb04 	ldr.w	pc, [sp], #4
   1c8ba:	9901      	ldr	r1, [sp, #4]
   1c8bc:	eb00 0282 	add.w	r2, r0, r2, lsl #2
   1c8c0:	6809      	ldr	r1, [r1, #0]
   1c8c2:	6051      	str	r1, [r2, #4]
   1c8c4:	4618      	mov	r0, r3
   1c8c6:	f85d fb04 	ldr.w	pc, [sp], #4
   1c8ca:	bf00      	nop

0001c8cc <_Unwind_SetGR>:
   1c8cc:	b510      	push	{r4, lr}
   1c8ce:	b084      	sub	sp, #16
   1c8d0:	ac04      	add	r4, sp, #16
   1c8d2:	2300      	movs	r3, #0
   1c8d4:	f844 2d04 	str.w	r2, [r4, #-4]!
   1c8d8:	460a      	mov	r2, r1
   1c8da:	9400      	str	r4, [sp, #0]
   1c8dc:	4619      	mov	r1, r3
   1c8de:	f7ff ffdb 	bl	1c898 <_Unwind_VRS_Set>
   1c8e2:	b004      	add	sp, #16
   1c8e4:	bd10      	pop	{r4, pc}
   1c8e6:	bf00      	nop

0001c8e8 <__gnu_Unwind_Backtrace>:
   1c8e8:	b5f0      	push	{r4, r5, r6, r7, lr}
   1c8ea:	6bd3      	ldr	r3, [r2, #60]	; 0x3c
   1c8ec:	6413      	str	r3, [r2, #64]	; 0x40
   1c8ee:	1d15      	adds	r5, r2, #4
   1c8f0:	4607      	mov	r7, r0
   1c8f2:	460e      	mov	r6, r1
   1c8f4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   1c8f6:	f5ad 7d0f 	sub.w	sp, sp, #572	; 0x23c
   1c8fa:	ac17      	add	r4, sp, #92	; 0x5c
   1c8fc:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   1c8fe:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   1c900:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   1c902:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   1c904:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   1c906:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
   1c90a:	f04f 35ff 	mov.w	r5, #4294967295
   1c90e:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
   1c912:	9516      	str	r5, [sp, #88]	; 0x58
   1c914:	e010      	b.n	1c938 <__gnu_Unwind_Backtrace+0x50>
   1c916:	a816      	add	r0, sp, #88	; 0x58
   1c918:	f7ff ffd8 	bl	1c8cc <_Unwind_SetGR>
   1c91c:	4631      	mov	r1, r6
   1c91e:	a816      	add	r0, sp, #88	; 0x58
   1c920:	47b8      	blx	r7
   1c922:	aa16      	add	r2, sp, #88	; 0x58
   1c924:	4669      	mov	r1, sp
   1c926:	b978      	cbnz	r0, 1c948 <__gnu_Unwind_Backtrace+0x60>
   1c928:	9b04      	ldr	r3, [sp, #16]
   1c92a:	2008      	movs	r0, #8
   1c92c:	4798      	blx	r3
   1c92e:	2805      	cmp	r0, #5
   1c930:	4604      	mov	r4, r0
   1c932:	d00a      	beq.n	1c94a <__gnu_Unwind_Backtrace+0x62>
   1c934:	2809      	cmp	r0, #9
   1c936:	d007      	beq.n	1c948 <__gnu_Unwind_Backtrace+0x60>
   1c938:	9926      	ldr	r1, [sp, #152]	; 0x98
   1c93a:	4668      	mov	r0, sp
   1c93c:	f7ff fe06 	bl	1c54c <get_eit_entry>
   1c940:	466a      	mov	r2, sp
   1c942:	210c      	movs	r1, #12
   1c944:	2800      	cmp	r0, #0
   1c946:	d0e6      	beq.n	1c916 <__gnu_Unwind_Backtrace+0x2e>
   1c948:	2409      	movs	r4, #9
   1c94a:	a816      	add	r0, sp, #88	; 0x58
   1c94c:	f7ff fe4e 	bl	1c5ec <restore_non_core_regs>
   1c950:	4620      	mov	r0, r4
   1c952:	f50d 7d0f 	add.w	sp, sp, #572	; 0x23c
   1c956:	bdf0      	pop	{r4, r5, r6, r7, pc}

0001c958 <__gnu_unwind_pr_common>:
   1c958:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1c95c:	460d      	mov	r5, r1
   1c95e:	6cc9      	ldr	r1, [r1, #76]	; 0x4c
   1c960:	b08b      	sub	sp, #44	; 0x2c
   1c962:	1d0c      	adds	r4, r1, #4
   1c964:	6809      	ldr	r1, [r1, #0]
   1c966:	9107      	str	r1, [sp, #28]
   1c968:	4691      	mov	r9, r2
   1c96a:	9408      	str	r4, [sp, #32]
   1c96c:	f000 0b03 	and.w	fp, r0, #3
   1c970:	461e      	mov	r6, r3
   1c972:	2b00      	cmp	r3, #0
   1c974:	d160      	bne.n	1ca38 <__gnu_unwind_pr_common+0xe0>
   1c976:	0209      	lsls	r1, r1, #8
   1c978:	2303      	movs	r3, #3
   1c97a:	9107      	str	r1, [sp, #28]
   1c97c:	f88d 6025 	strb.w	r6, [sp, #37]	; 0x25
   1c980:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
   1c984:	6d2b      	ldr	r3, [r5, #80]	; 0x50
   1c986:	f1bb 0f02 	cmp.w	fp, #2
   1c98a:	bf08      	it	eq
   1c98c:	6bac      	ldreq	r4, [r5, #56]	; 0x38
   1c98e:	f013 0301 	ands.w	r3, r3, #1
   1c992:	d140      	bne.n	1ca16 <__gnu_unwind_pr_common+0xbe>
   1c994:	9301      	str	r3, [sp, #4]
   1c996:	f000 0308 	and.w	r3, r0, #8
   1c99a:	9303      	str	r3, [sp, #12]
   1c99c:	f8d4 8000 	ldr.w	r8, [r4]
   1c9a0:	f1b8 0f00 	cmp.w	r8, #0
   1c9a4:	d039      	beq.n	1ca1a <__gnu_unwind_pr_common+0xc2>
   1c9a6:	2e02      	cmp	r6, #2
   1c9a8:	d043      	beq.n	1ca32 <__gnu_unwind_pr_common+0xda>
   1c9aa:	f8b4 8000 	ldrh.w	r8, [r4]
   1c9ae:	8867      	ldrh	r7, [r4, #2]
   1c9b0:	3404      	adds	r4, #4
   1c9b2:	6cab      	ldr	r3, [r5, #72]	; 0x48
   1c9b4:	f027 0a01 	bic.w	sl, r7, #1
   1c9b8:	210f      	movs	r1, #15
   1c9ba:	4648      	mov	r0, r9
   1c9bc:	449a      	add	sl, r3
   1c9be:	f7ff ff5f 	bl	1c880 <_Unwind_GetGR>
   1c9c2:	4582      	cmp	sl, r0
   1c9c4:	d833      	bhi.n	1ca2e <__gnu_unwind_pr_common+0xd6>
   1c9c6:	f028 0301 	bic.w	r3, r8, #1
   1c9ca:	449a      	add	sl, r3
   1c9cc:	4550      	cmp	r0, sl
   1c9ce:	bf2c      	ite	cs
   1c9d0:	2000      	movcs	r0, #0
   1c9d2:	2001      	movcc	r0, #1
   1c9d4:	007f      	lsls	r7, r7, #1
   1c9d6:	f007 0702 	and.w	r7, r7, #2
   1c9da:	f008 0801 	and.w	r8, r8, #1
   1c9de:	ea47 0708 	orr.w	r7, r7, r8
   1c9e2:	2f01      	cmp	r7, #1
   1c9e4:	d03e      	beq.n	1ca64 <__gnu_unwind_pr_common+0x10c>
   1c9e6:	d335      	bcc.n	1ca54 <__gnu_unwind_pr_common+0xfc>
   1c9e8:	2f02      	cmp	r7, #2
   1c9ea:	d11c      	bne.n	1ca26 <__gnu_unwind_pr_common+0xce>
   1c9ec:	6823      	ldr	r3, [r4, #0]
   1c9ee:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
   1c9f2:	9202      	str	r2, [sp, #8]
   1c9f4:	f1bb 0f00 	cmp.w	fp, #0
   1c9f8:	d176      	bne.n	1cae8 <__gnu_unwind_pr_common+0x190>
   1c9fa:	b128      	cbz	r0, 1ca08 <__gnu_unwind_pr_common+0xb0>
   1c9fc:	9903      	ldr	r1, [sp, #12]
   1c9fe:	2900      	cmp	r1, #0
   1ca00:	d07e      	beq.n	1cb00 <__gnu_unwind_pr_common+0x1a8>
   1ca02:	2a00      	cmp	r2, #0
   1ca04:	f000 80a6 	beq.w	1cb54 <__gnu_unwind_pr_common+0x1fc>
   1ca08:	2b00      	cmp	r3, #0
   1ca0a:	db77      	blt.n	1cafc <__gnu_unwind_pr_common+0x1a4>
   1ca0c:	9b02      	ldr	r3, [sp, #8]
   1ca0e:	3301      	adds	r3, #1
   1ca10:	eb04 0483 	add.w	r4, r4, r3, lsl #2
   1ca14:	e7c2      	b.n	1c99c <__gnu_unwind_pr_common+0x44>
   1ca16:	2300      	movs	r3, #0
   1ca18:	9301      	str	r3, [sp, #4]
   1ca1a:	2e02      	cmp	r6, #2
   1ca1c:	dd3e      	ble.n	1ca9c <__gnu_unwind_pr_common+0x144>
   1ca1e:	f7ff fe17 	bl	1c650 <__gnu_unwind_24bit.isra.1>
   1ca22:	2800      	cmp	r0, #0
   1ca24:	d040      	beq.n	1caa8 <__gnu_unwind_pr_common+0x150>
   1ca26:	2009      	movs	r0, #9
   1ca28:	b00b      	add	sp, #44	; 0x2c
   1ca2a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1ca2e:	2000      	movs	r0, #0
   1ca30:	e7d0      	b.n	1c9d4 <__gnu_unwind_pr_common+0x7c>
   1ca32:	6867      	ldr	r7, [r4, #4]
   1ca34:	3408      	adds	r4, #8
   1ca36:	e7bc      	b.n	1c9b2 <__gnu_unwind_pr_common+0x5a>
   1ca38:	2b02      	cmp	r3, #2
   1ca3a:	dca3      	bgt.n	1c984 <__gnu_unwind_pr_common+0x2c>
   1ca3c:	0c0b      	lsrs	r3, r1, #16
   1ca3e:	b2da      	uxtb	r2, r3
   1ca40:	0409      	lsls	r1, r1, #16
   1ca42:	f88d 3025 	strb.w	r3, [sp, #37]	; 0x25
   1ca46:	2302      	movs	r3, #2
   1ca48:	eb04 0482 	add.w	r4, r4, r2, lsl #2
   1ca4c:	9107      	str	r1, [sp, #28]
   1ca4e:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
   1ca52:	e797      	b.n	1c984 <__gnu_unwind_pr_common+0x2c>
   1ca54:	f1bb 0f00 	cmp.w	fp, #0
   1ca58:	d002      	beq.n	1ca60 <__gnu_unwind_pr_common+0x108>
   1ca5a:	2800      	cmp	r0, #0
   1ca5c:	f040 80bd 	bne.w	1cbda <__gnu_unwind_pr_common+0x282>
   1ca60:	3404      	adds	r4, #4
   1ca62:	e79b      	b.n	1c99c <__gnu_unwind_pr_common+0x44>
   1ca64:	f1bb 0f00 	cmp.w	fp, #0
   1ca68:	d125      	bne.n	1cab6 <__gnu_unwind_pr_common+0x15e>
   1ca6a:	b1a8      	cbz	r0, 1ca98 <__gnu_unwind_pr_common+0x140>
   1ca6c:	e894 000c 	ldmia.w	r4, {r2, r3}
   1ca70:	1c99      	adds	r1, r3, #2
   1ca72:	ea4f 72d2 	mov.w	r2, r2, lsr #31
   1ca76:	d0d6      	beq.n	1ca26 <__gnu_unwind_pr_common+0xce>
   1ca78:	f105 0158 	add.w	r1, r5, #88	; 0x58
   1ca7c:	3301      	adds	r3, #1
   1ca7e:	9106      	str	r1, [sp, #24]
   1ca80:	f000 80a3 	beq.w	1cbca <__gnu_unwind_pr_common+0x272>
   1ca84:	1d20      	adds	r0, r4, #4
   1ca86:	f7ff fddd 	bl	1c644 <_Unwind_decode_typeinfo_ptr.isra.0>
   1ca8a:	ab06      	add	r3, sp, #24
   1ca8c:	4601      	mov	r1, r0
   1ca8e:	4628      	mov	r0, r5
   1ca90:	f7f6 fda8 	bl	135e4 <__cxa_type_match>
   1ca94:	2800      	cmp	r0, #0
   1ca96:	d177      	bne.n	1cb88 <__gnu_unwind_pr_common+0x230>
   1ca98:	3408      	adds	r4, #8
   1ca9a:	e77f      	b.n	1c99c <__gnu_unwind_pr_common+0x44>
   1ca9c:	a907      	add	r1, sp, #28
   1ca9e:	4648      	mov	r0, r9
   1caa0:	f000 faee 	bl	1d080 <__gnu_unwind_execute>
   1caa4:	2800      	cmp	r0, #0
   1caa6:	d1be      	bne.n	1ca26 <__gnu_unwind_pr_common+0xce>
   1caa8:	9b01      	ldr	r3, [sp, #4]
   1caaa:	2b00      	cmp	r3, #0
   1caac:	d15c      	bne.n	1cb68 <__gnu_unwind_pr_common+0x210>
   1caae:	2008      	movs	r0, #8
   1cab0:	b00b      	add	sp, #44	; 0x2c
   1cab2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1cab6:	210d      	movs	r1, #13
   1cab8:	4648      	mov	r0, r9
   1caba:	6a2f      	ldr	r7, [r5, #32]
   1cabc:	f7ff fee0 	bl	1c880 <_Unwind_GetGR>
   1cac0:	4287      	cmp	r7, r0
   1cac2:	d1e9      	bne.n	1ca98 <__gnu_unwind_pr_common+0x140>
   1cac4:	6aab      	ldr	r3, [r5, #40]	; 0x28
   1cac6:	429c      	cmp	r4, r3
   1cac8:	d1e6      	bne.n	1ca98 <__gnu_unwind_pr_common+0x140>
   1caca:	4620      	mov	r0, r4
   1cacc:	f7ff fcf0 	bl	1c4b0 <selfrel_offset31>
   1cad0:	210f      	movs	r1, #15
   1cad2:	4602      	mov	r2, r0
   1cad4:	4648      	mov	r0, r9
   1cad6:	f7ff fef9 	bl	1c8cc <_Unwind_SetGR>
   1cada:	4648      	mov	r0, r9
   1cadc:	462a      	mov	r2, r5
   1cade:	2100      	movs	r1, #0
   1cae0:	f7ff fef4 	bl	1c8cc <_Unwind_SetGR>
   1cae4:	2007      	movs	r0, #7
   1cae6:	e79f      	b.n	1ca28 <__gnu_unwind_pr_common+0xd0>
   1cae8:	210d      	movs	r1, #13
   1caea:	4648      	mov	r0, r9
   1caec:	6a2f      	ldr	r7, [r5, #32]
   1caee:	f7ff fec7 	bl	1c880 <_Unwind_GetGR>
   1caf2:	4287      	cmp	r7, r0
   1caf4:	d058      	beq.n	1cba8 <__gnu_unwind_pr_common+0x250>
   1caf6:	6823      	ldr	r3, [r4, #0]
   1caf8:	2b00      	cmp	r3, #0
   1cafa:	da87      	bge.n	1ca0c <__gnu_unwind_pr_common+0xb4>
   1cafc:	3404      	adds	r4, #4
   1cafe:	e785      	b.n	1ca0c <__gnu_unwind_pr_common+0xb4>
   1cb00:	9b02      	ldr	r3, [sp, #8]
   1cb02:	b33b      	cbz	r3, 1cb54 <__gnu_unwind_pr_common+0x1fc>
   1cb04:	f105 0358 	add.w	r3, r5, #88	; 0x58
   1cb08:	1d27      	adds	r7, r4, #4
   1cb0a:	f8cd b010 	str.w	fp, [sp, #16]
   1cb0e:	f8dd 800c 	ldr.w	r8, [sp, #12]
   1cb12:	f8dd a008 	ldr.w	sl, [sp, #8]
   1cb16:	9605      	str	r6, [sp, #20]
   1cb18:	46a3      	mov	fp, r4
   1cb1a:	461c      	mov	r4, r3
   1cb1c:	e002      	b.n	1cb24 <__gnu_unwind_pr_common+0x1cc>
   1cb1e:	45b2      	cmp	sl, r6
   1cb20:	46b0      	mov	r8, r6
   1cb22:	d016      	beq.n	1cb52 <__gnu_unwind_pr_common+0x1fa>
   1cb24:	4638      	mov	r0, r7
   1cb26:	9406      	str	r4, [sp, #24]
   1cb28:	f7ff fd8c 	bl	1c644 <_Unwind_decode_typeinfo_ptr.isra.0>
   1cb2c:	ab06      	add	r3, sp, #24
   1cb2e:	4601      	mov	r1, r0
   1cb30:	2200      	movs	r2, #0
   1cb32:	4628      	mov	r0, r5
   1cb34:	f7f6 fd56 	bl	135e4 <__cxa_type_match>
   1cb38:	f108 0601 	add.w	r6, r8, #1
   1cb3c:	3704      	adds	r7, #4
   1cb3e:	2800      	cmp	r0, #0
   1cb40:	d0ed      	beq.n	1cb1e <__gnu_unwind_pr_common+0x1c6>
   1cb42:	9b02      	ldr	r3, [sp, #8]
   1cb44:	9e05      	ldr	r6, [sp, #20]
   1cb46:	4543      	cmp	r3, r8
   1cb48:	465c      	mov	r4, fp
   1cb4a:	f8dd b010 	ldr.w	fp, [sp, #16]
   1cb4e:	d1d2      	bne.n	1caf6 <__gnu_unwind_pr_common+0x19e>
   1cb50:	e000      	b.n	1cb54 <__gnu_unwind_pr_common+0x1fc>
   1cb52:	465c      	mov	r4, fp
   1cb54:	4648      	mov	r0, r9
   1cb56:	210d      	movs	r1, #13
   1cb58:	f7ff fe92 	bl	1c880 <_Unwind_GetGR>
   1cb5c:	9b06      	ldr	r3, [sp, #24]
   1cb5e:	6228      	str	r0, [r5, #32]
   1cb60:	62ac      	str	r4, [r5, #40]	; 0x28
   1cb62:	626b      	str	r3, [r5, #36]	; 0x24
   1cb64:	2006      	movs	r0, #6
   1cb66:	e75f      	b.n	1ca28 <__gnu_unwind_pr_common+0xd0>
   1cb68:	210f      	movs	r1, #15
   1cb6a:	4648      	mov	r0, r9
   1cb6c:	f7ff fe88 	bl	1c880 <_Unwind_GetGR>
   1cb70:	210e      	movs	r1, #14
   1cb72:	4602      	mov	r2, r0
   1cb74:	4648      	mov	r0, r9
   1cb76:	f7ff fea9 	bl	1c8cc <_Unwind_SetGR>
   1cb7a:	4648      	mov	r0, r9
   1cb7c:	4a29      	ldr	r2, [pc, #164]	; (1cc24 <__gnu_unwind_pr_common+0x2cc>)
   1cb7e:	210f      	movs	r1, #15
   1cb80:	f7ff fea4 	bl	1c8cc <_Unwind_SetGR>
   1cb84:	2007      	movs	r0, #7
   1cb86:	e74f      	b.n	1ca28 <__gnu_unwind_pr_common+0xd0>
   1cb88:	4607      	mov	r7, r0
   1cb8a:	210d      	movs	r1, #13
   1cb8c:	4648      	mov	r0, r9
   1cb8e:	f7ff fe77 	bl	1c880 <_Unwind_GetGR>
   1cb92:	2f02      	cmp	r7, #2
   1cb94:	6228      	str	r0, [r5, #32]
   1cb96:	d11d      	bne.n	1cbd4 <__gnu_unwind_pr_common+0x27c>
   1cb98:	462b      	mov	r3, r5
   1cb9a:	9a06      	ldr	r2, [sp, #24]
   1cb9c:	f843 2f2c 	str.w	r2, [r3, #44]!
   1cba0:	626b      	str	r3, [r5, #36]	; 0x24
   1cba2:	62ac      	str	r4, [r5, #40]	; 0x28
   1cba4:	2006      	movs	r0, #6
   1cba6:	e73f      	b.n	1ca28 <__gnu_unwind_pr_common+0xd0>
   1cba8:	6aab      	ldr	r3, [r5, #40]	; 0x28
   1cbaa:	429c      	cmp	r4, r3
   1cbac:	d1a3      	bne.n	1caf6 <__gnu_unwind_pr_common+0x19e>
   1cbae:	2204      	movs	r2, #4
   1cbb0:	2700      	movs	r7, #0
   1cbb2:	18a3      	adds	r3, r4, r2
   1cbb4:	9902      	ldr	r1, [sp, #8]
   1cbb6:	62a9      	str	r1, [r5, #40]	; 0x28
   1cbb8:	62ef      	str	r7, [r5, #44]	; 0x2c
   1cbba:	632a      	str	r2, [r5, #48]	; 0x30
   1cbbc:	636b      	str	r3, [r5, #52]	; 0x34
   1cbbe:	6823      	ldr	r3, [r4, #0]
   1cbc0:	42bb      	cmp	r3, r7
   1cbc2:	db1d      	blt.n	1cc00 <__gnu_unwind_pr_common+0x2a8>
   1cbc4:	2301      	movs	r3, #1
   1cbc6:	9301      	str	r3, [sp, #4]
   1cbc8:	e720      	b.n	1ca0c <__gnu_unwind_pr_common+0xb4>
   1cbca:	4648      	mov	r0, r9
   1cbcc:	210d      	movs	r1, #13
   1cbce:	f7ff fe57 	bl	1c880 <_Unwind_GetGR>
   1cbd2:	6228      	str	r0, [r5, #32]
   1cbd4:	9b06      	ldr	r3, [sp, #24]
   1cbd6:	626b      	str	r3, [r5, #36]	; 0x24
   1cbd8:	e7e3      	b.n	1cba2 <__gnu_unwind_pr_common+0x24a>
   1cbda:	4620      	mov	r0, r4
   1cbdc:	f7ff fc68 	bl	1c4b0 <selfrel_offset31>
   1cbe0:	3404      	adds	r4, #4
   1cbe2:	4606      	mov	r6, r0
   1cbe4:	63ac      	str	r4, [r5, #56]	; 0x38
   1cbe6:	4628      	mov	r0, r5
   1cbe8:	f7f6 fd58 	bl	1369c <__cxa_begin_cleanup>
   1cbec:	2800      	cmp	r0, #0
   1cbee:	f43f af1a 	beq.w	1ca26 <__gnu_unwind_pr_common+0xce>
   1cbf2:	4648      	mov	r0, r9
   1cbf4:	4632      	mov	r2, r6
   1cbf6:	210f      	movs	r1, #15
   1cbf8:	f7ff fe68 	bl	1c8cc <_Unwind_SetGR>
   1cbfc:	2007      	movs	r0, #7
   1cbfe:	e713      	b.n	1ca28 <__gnu_unwind_pr_common+0xd0>
   1cc00:	4608      	mov	r0, r1
   1cc02:	3001      	adds	r0, #1
   1cc04:	eb04 0080 	add.w	r0, r4, r0, lsl #2
   1cc08:	f7ff fc52 	bl	1c4b0 <selfrel_offset31>
   1cc0c:	210f      	movs	r1, #15
   1cc0e:	4602      	mov	r2, r0
   1cc10:	4648      	mov	r0, r9
   1cc12:	f7ff fe5b 	bl	1c8cc <_Unwind_SetGR>
   1cc16:	4648      	mov	r0, r9
   1cc18:	462a      	mov	r2, r5
   1cc1a:	4639      	mov	r1, r7
   1cc1c:	f7ff fe56 	bl	1c8cc <_Unwind_SetGR>
   1cc20:	2007      	movs	r0, #7
   1cc22:	e701      	b.n	1ca28 <__gnu_unwind_pr_common+0xd0>
   1cc24:	000137cd 	.word	0x000137cd

0001cc28 <__aeabi_unwind_cpp_pr0>:
   1cc28:	2300      	movs	r3, #0
   1cc2a:	e695      	b.n	1c958 <__gnu_unwind_pr_common>

0001cc2c <__aeabi_unwind_cpp_pr1>:
   1cc2c:	2301      	movs	r3, #1
   1cc2e:	e693      	b.n	1c958 <__gnu_unwind_pr_common>

0001cc30 <__aeabi_unwind_cpp_pr2>:
   1cc30:	2302      	movs	r3, #2
   1cc32:	e691      	b.n	1c958 <__gnu_unwind_pr_common>

0001cc34 <_Unwind_VRS_Pop>:
   1cc34:	b5f0      	push	{r4, r5, r6, r7, lr}
   1cc36:	4604      	mov	r4, r0
   1cc38:	b0c5      	sub	sp, #276	; 0x114
   1cc3a:	2904      	cmp	r1, #4
   1cc3c:	d80d      	bhi.n	1cc5a <_Unwind_VRS_Pop+0x26>
   1cc3e:	e8df f001 	tbb	[pc, r1]
   1cc42:	0353      	.short	0x0353
   1cc44:	310c      	.short	0x310c
   1cc46:	0f          	.byte	0x0f
   1cc47:	00          	.byte	0x00
   1cc48:	2b01      	cmp	r3, #1
   1cc4a:	ea4f 4612 	mov.w	r6, r2, lsr #16
   1cc4e:	b295      	uxth	r5, r2
   1cc50:	d162      	bne.n	1cd18 <_Unwind_VRS_Pop+0xe4>
   1cc52:	1972      	adds	r2, r6, r5
   1cc54:	2a10      	cmp	r2, #16
   1cc56:	f240 809b 	bls.w	1cd90 <_Unwind_VRS_Pop+0x15c>
   1cc5a:	2002      	movs	r0, #2
   1cc5c:	b045      	add	sp, #276	; 0x114
   1cc5e:	bdf0      	pop	{r4, r5, r6, r7, pc}
   1cc60:	2b00      	cmp	r3, #0
   1cc62:	d1fa      	bne.n	1cc5a <_Unwind_VRS_Pop+0x26>
   1cc64:	2a10      	cmp	r2, #16
   1cc66:	d8f8      	bhi.n	1cc5a <_Unwind_VRS_Pop+0x26>
   1cc68:	6823      	ldr	r3, [r4, #0]
   1cc6a:	06d8      	lsls	r0, r3, #27
   1cc6c:	f100 80c6 	bmi.w	1cdfc <_Unwind_VRS_Pop+0x1c8>
   1cc70:	ae22      	add	r6, sp, #136	; 0x88
   1cc72:	4630      	mov	r0, r6
   1cc74:	9201      	str	r2, [sp, #4]
   1cc76:	f000 f973 	bl	1cf60 <__gnu_Unwind_Save_WMMXC>
   1cc7a:	6ba0      	ldr	r0, [r4, #56]	; 0x38
   1cc7c:	9a01      	ldr	r2, [sp, #4]
   1cc7e:	2300      	movs	r3, #0
   1cc80:	2501      	movs	r5, #1
   1cc82:	fa05 f103 	lsl.w	r1, r5, r3
   1cc86:	4211      	tst	r1, r2
   1cc88:	d003      	beq.n	1cc92 <_Unwind_VRS_Pop+0x5e>
   1cc8a:	6801      	ldr	r1, [r0, #0]
   1cc8c:	f846 1023 	str.w	r1, [r6, r3, lsl #2]
   1cc90:	3004      	adds	r0, #4
   1cc92:	3301      	adds	r3, #1
   1cc94:	2b04      	cmp	r3, #4
   1cc96:	d1f4      	bne.n	1cc82 <_Unwind_VRS_Pop+0x4e>
   1cc98:	63a0      	str	r0, [r4, #56]	; 0x38
   1cc9a:	4630      	mov	r0, r6
   1cc9c:	f000 f956 	bl	1cf4c <__gnu_Unwind_Restore_WMMXC>
   1cca0:	2000      	movs	r0, #0
   1cca2:	e7db      	b.n	1cc5c <_Unwind_VRS_Pop+0x28>
   1cca4:	2b03      	cmp	r3, #3
   1cca6:	d1d8      	bne.n	1cc5a <_Unwind_VRS_Pop+0x26>
   1cca8:	0c15      	lsrs	r5, r2, #16
   1ccaa:	b297      	uxth	r7, r2
   1ccac:	19eb      	adds	r3, r5, r7
   1ccae:	2b10      	cmp	r3, #16
   1ccb0:	d8d3      	bhi.n	1cc5a <_Unwind_VRS_Pop+0x26>
   1ccb2:	6823      	ldr	r3, [r4, #0]
   1ccb4:	071e      	lsls	r6, r3, #28
   1ccb6:	f100 80b5 	bmi.w	1ce24 <_Unwind_VRS_Pop+0x1f0>
   1ccba:	ae22      	add	r6, sp, #136	; 0x88
   1ccbc:	4630      	mov	r0, r6
   1ccbe:	f000 f923 	bl	1cf08 <__gnu_Unwind_Save_WMMXD>
   1ccc2:	00ed      	lsls	r5, r5, #3
   1ccc4:	6ba3      	ldr	r3, [r4, #56]	; 0x38
   1ccc6:	b14f      	cbz	r7, 1ccdc <_Unwind_VRS_Pop+0xa8>
   1ccc8:	3d04      	subs	r5, #4
   1ccca:	1971      	adds	r1, r6, r5
   1cccc:	eb03 00c7 	add.w	r0, r3, r7, lsl #3
   1ccd0:	f853 2b04 	ldr.w	r2, [r3], #4
   1ccd4:	f841 2f04 	str.w	r2, [r1, #4]!
   1ccd8:	4283      	cmp	r3, r0
   1ccda:	d1f9      	bne.n	1ccd0 <_Unwind_VRS_Pop+0x9c>
   1ccdc:	4630      	mov	r0, r6
   1ccde:	63a3      	str	r3, [r4, #56]	; 0x38
   1cce0:	f000 f8f0 	bl	1cec4 <__gnu_Unwind_Restore_WMMXD>
   1cce4:	2000      	movs	r0, #0
   1cce6:	e7b9      	b.n	1cc5c <_Unwind_VRS_Pop+0x28>
   1cce8:	2b00      	cmp	r3, #0
   1ccea:	d1b6      	bne.n	1cc5a <_Unwind_VRS_Pop+0x26>
   1ccec:	6ba5      	ldr	r5, [r4, #56]	; 0x38
   1ccee:	b297      	uxth	r7, r2
   1ccf0:	1d20      	adds	r0, r4, #4
   1ccf2:	2601      	movs	r6, #1
   1ccf4:	fa06 f103 	lsl.w	r1, r6, r3
   1ccf8:	4239      	tst	r1, r7
   1ccfa:	f103 0301 	add.w	r3, r3, #1
   1ccfe:	d002      	beq.n	1cd06 <_Unwind_VRS_Pop+0xd2>
   1cd00:	6829      	ldr	r1, [r5, #0]
   1cd02:	6001      	str	r1, [r0, #0]
   1cd04:	3504      	adds	r5, #4
   1cd06:	2b10      	cmp	r3, #16
   1cd08:	f100 0004 	add.w	r0, r0, #4
   1cd0c:	d1f2      	bne.n	1ccf4 <_Unwind_VRS_Pop+0xc0>
   1cd0e:	f412 5000 	ands.w	r0, r2, #8192	; 0x2000
   1cd12:	d13b      	bne.n	1cd8c <_Unwind_VRS_Pop+0x158>
   1cd14:	63a5      	str	r5, [r4, #56]	; 0x38
   1cd16:	e7a1      	b.n	1cc5c <_Unwind_VRS_Pop+0x28>
   1cd18:	2b05      	cmp	r3, #5
   1cd1a:	d19e      	bne.n	1cc5a <_Unwind_VRS_Pop+0x26>
   1cd1c:	1977      	adds	r7, r6, r5
   1cd1e:	2f20      	cmp	r7, #32
   1cd20:	d89b      	bhi.n	1cc5a <_Unwind_VRS_Pop+0x26>
   1cd22:	2e0f      	cmp	r6, #15
   1cd24:	d966      	bls.n	1cdf4 <_Unwind_VRS_Pop+0x1c0>
   1cd26:	462f      	mov	r7, r5
   1cd28:	2d00      	cmp	r5, #0
   1cd2a:	d13a      	bne.n	1cda2 <_Unwind_VRS_Pop+0x16e>
   1cd2c:	462a      	mov	r2, r5
   1cd2e:	2700      	movs	r7, #0
   1cd30:	2a00      	cmp	r2, #0
   1cd32:	6ba0      	ldr	r0, [r4, #56]	; 0x38
   1cd34:	dd72      	ble.n	1ce1c <_Unwind_VRS_Pop+0x1e8>
   1cd36:	eb00 02c2 	add.w	r2, r0, r2, lsl #3
   1cd3a:	4601      	mov	r1, r0
   1cd3c:	a844      	add	r0, sp, #272	; 0x110
   1cd3e:	eb00 00c6 	add.w	r0, r0, r6, lsl #3
   1cd42:	388c      	subs	r0, #140	; 0x8c
   1cd44:	f851 5b04 	ldr.w	r5, [r1], #4
   1cd48:	f840 5f04 	str.w	r5, [r0, #4]!
   1cd4c:	4291      	cmp	r1, r2
   1cd4e:	d1f9      	bne.n	1cd44 <_Unwind_VRS_Pop+0x110>
   1cd50:	4608      	mov	r0, r1
   1cd52:	b197      	cbz	r7, 1cd7a <_Unwind_VRS_Pop+0x146>
   1cd54:	2e10      	cmp	r6, #16
   1cd56:	4632      	mov	r2, r6
   1cd58:	a944      	add	r1, sp, #272	; 0x110
   1cd5a:	bf38      	it	cc
   1cd5c:	2210      	movcc	r2, #16
   1cd5e:	eb01 02c2 	add.w	r2, r1, r2, lsl #3
   1cd62:	f5a2 72c4 	sub.w	r2, r2, #392	; 0x188
   1cd66:	0079      	lsls	r1, r7, #1
   1cd68:	3a04      	subs	r2, #4
   1cd6a:	eb00 0181 	add.w	r1, r0, r1, lsl #2
   1cd6e:	f850 5b04 	ldr.w	r5, [r0], #4
   1cd72:	f842 5f04 	str.w	r5, [r2, #4]!
   1cd76:	4288      	cmp	r0, r1
   1cd78:	d1f9      	bne.n	1cd6e <_Unwind_VRS_Pop+0x13a>
   1cd7a:	2b01      	cmp	r3, #1
   1cd7c:	d048      	beq.n	1ce10 <_Unwind_VRS_Pop+0x1dc>
   1cd7e:	2e0f      	cmp	r6, #15
   1cd80:	63a1      	str	r1, [r4, #56]	; 0x38
   1cd82:	d933      	bls.n	1cdec <_Unwind_VRS_Pop+0x1b8>
   1cd84:	b117      	cbz	r7, 1cd8c <_Unwind_VRS_Pop+0x158>
   1cd86:	a802      	add	r0, sp, #8
   1cd88:	f000 f894 	bl	1ceb4 <__gnu_Unwind_Restore_VFP_D_16_to_31>
   1cd8c:	2000      	movs	r0, #0
   1cd8e:	e765      	b.n	1cc5c <_Unwind_VRS_Pop+0x28>
   1cd90:	2e0f      	cmp	r6, #15
   1cd92:	f63f af62 	bhi.w	1cc5a <_Unwind_VRS_Pop+0x26>
   1cd96:	2700      	movs	r7, #0
   1cd98:	6822      	ldr	r2, [r4, #0]
   1cd9a:	07d1      	lsls	r1, r2, #31
   1cd9c:	d417      	bmi.n	1cdce <_Unwind_VRS_Pop+0x19a>
   1cd9e:	2f00      	cmp	r7, #0
   1cda0:	d060      	beq.n	1ce64 <_Unwind_VRS_Pop+0x230>
   1cda2:	6822      	ldr	r2, [r4, #0]
   1cda4:	0751      	lsls	r1, r2, #29
   1cda6:	d445      	bmi.n	1ce34 <_Unwind_VRS_Pop+0x200>
   1cda8:	2b01      	cmp	r3, #1
   1cdaa:	d04d      	beq.n	1ce48 <_Unwind_VRS_Pop+0x214>
   1cdac:	2e0f      	cmp	r6, #15
   1cdae:	d806      	bhi.n	1cdbe <_Unwind_VRS_Pop+0x18a>
   1cdb0:	a822      	add	r0, sp, #136	; 0x88
   1cdb2:	9301      	str	r3, [sp, #4]
   1cdb4:	f000 f87a 	bl	1ceac <__gnu_Unwind_Save_VFP_D>
   1cdb8:	9b01      	ldr	r3, [sp, #4]
   1cdba:	2f00      	cmp	r7, #0
   1cdbc:	d0b6      	beq.n	1cd2c <_Unwind_VRS_Pop+0xf8>
   1cdbe:	a802      	add	r0, sp, #8
   1cdc0:	9301      	str	r3, [sp, #4]
   1cdc2:	f000 f87b 	bl	1cebc <__gnu_Unwind_Save_VFP_D_16_to_31>
   1cdc6:	9b01      	ldr	r3, [sp, #4]
   1cdc8:	f1c6 0210 	rsb	r2, r6, #16
   1cdcc:	e7b0      	b.n	1cd30 <_Unwind_VRS_Pop+0xfc>
   1cdce:	f022 0101 	bic.w	r1, r2, #1
   1cdd2:	2b05      	cmp	r3, #5
   1cdd4:	6021      	str	r1, [r4, #0]
   1cdd6:	9301      	str	r3, [sp, #4]
   1cdd8:	4620      	mov	r0, r4
   1cdda:	d03b      	beq.n	1ce54 <_Unwind_VRS_Pop+0x220>
   1cddc:	f022 0203 	bic.w	r2, r2, #3
   1cde0:	f840 2b48 	str.w	r2, [r0], #72
   1cde4:	f000 f85a 	bl	1ce9c <__gnu_Unwind_Save_VFP>
   1cde8:	9b01      	ldr	r3, [sp, #4]
   1cdea:	e7d8      	b.n	1cd9e <_Unwind_VRS_Pop+0x16a>
   1cdec:	a822      	add	r0, sp, #136	; 0x88
   1cdee:	f000 f859 	bl	1cea4 <__gnu_Unwind_Restore_VFP_D>
   1cdf2:	e7c7      	b.n	1cd84 <_Unwind_VRS_Pop+0x150>
   1cdf4:	2f10      	cmp	r7, #16
   1cdf6:	d9ce      	bls.n	1cd96 <_Unwind_VRS_Pop+0x162>
   1cdf8:	3f10      	subs	r7, #16
   1cdfa:	e7cd      	b.n	1cd98 <_Unwind_VRS_Pop+0x164>
   1cdfc:	f023 0310 	bic.w	r3, r3, #16
   1ce00:	6023      	str	r3, [r4, #0]
   1ce02:	f504 70e8 	add.w	r0, r4, #464	; 0x1d0
   1ce06:	9201      	str	r2, [sp, #4]
   1ce08:	f000 f8aa 	bl	1cf60 <__gnu_Unwind_Save_WMMXC>
   1ce0c:	9a01      	ldr	r2, [sp, #4]
   1ce0e:	e72f      	b.n	1cc70 <_Unwind_VRS_Pop+0x3c>
   1ce10:	3104      	adds	r1, #4
   1ce12:	63a1      	str	r1, [r4, #56]	; 0x38
   1ce14:	a822      	add	r0, sp, #136	; 0x88
   1ce16:	f000 f83d 	bl	1ce94 <__gnu_Unwind_Restore_VFP>
   1ce1a:	e7b7      	b.n	1cd8c <_Unwind_VRS_Pop+0x158>
   1ce1c:	2f00      	cmp	r7, #0
   1ce1e:	d199      	bne.n	1cd54 <_Unwind_VRS_Pop+0x120>
   1ce20:	4601      	mov	r1, r0
   1ce22:	e7aa      	b.n	1cd7a <_Unwind_VRS_Pop+0x146>
   1ce24:	f023 0308 	bic.w	r3, r3, #8
   1ce28:	6023      	str	r3, [r4, #0]
   1ce2a:	f504 70a8 	add.w	r0, r4, #336	; 0x150
   1ce2e:	f000 f86b 	bl	1cf08 <__gnu_Unwind_Save_WMMXD>
   1ce32:	e742      	b.n	1ccba <_Unwind_VRS_Pop+0x86>
   1ce34:	4620      	mov	r0, r4
   1ce36:	f022 0204 	bic.w	r2, r2, #4
   1ce3a:	f840 2bd0 	str.w	r2, [r0], #208
   1ce3e:	9301      	str	r3, [sp, #4]
   1ce40:	f000 f83c 	bl	1cebc <__gnu_Unwind_Save_VFP_D_16_to_31>
   1ce44:	9b01      	ldr	r3, [sp, #4]
   1ce46:	e7af      	b.n	1cda8 <_Unwind_VRS_Pop+0x174>
   1ce48:	a822      	add	r0, sp, #136	; 0x88
   1ce4a:	9301      	str	r3, [sp, #4]
   1ce4c:	f000 f826 	bl	1ce9c <__gnu_Unwind_Save_VFP>
   1ce50:	9b01      	ldr	r3, [sp, #4]
   1ce52:	e7b9      	b.n	1cdc8 <_Unwind_VRS_Pop+0x194>
   1ce54:	f041 0102 	orr.w	r1, r1, #2
   1ce58:	f840 1b48 	str.w	r1, [r0], #72
   1ce5c:	f000 f826 	bl	1ceac <__gnu_Unwind_Save_VFP_D>
   1ce60:	9b01      	ldr	r3, [sp, #4]
   1ce62:	e79c      	b.n	1cd9e <_Unwind_VRS_Pop+0x16a>
   1ce64:	2b01      	cmp	r3, #1
   1ce66:	d003      	beq.n	1ce70 <_Unwind_VRS_Pop+0x23c>
   1ce68:	2e0f      	cmp	r6, #15
   1ce6a:	f63f af5f 	bhi.w	1cd2c <_Unwind_VRS_Pop+0xf8>
   1ce6e:	e79f      	b.n	1cdb0 <_Unwind_VRS_Pop+0x17c>
   1ce70:	a822      	add	r0, sp, #136	; 0x88
   1ce72:	9301      	str	r3, [sp, #4]
   1ce74:	f000 f812 	bl	1ce9c <__gnu_Unwind_Save_VFP>
   1ce78:	9b01      	ldr	r3, [sp, #4]
   1ce7a:	e757      	b.n	1cd2c <_Unwind_VRS_Pop+0xf8>

0001ce7c <__restore_core_regs>:
   1ce7c:	f100 0134 	add.w	r1, r0, #52	; 0x34
   1ce80:	e891 0038 	ldmia.w	r1, {r3, r4, r5}
   1ce84:	469c      	mov	ip, r3
   1ce86:	46a6      	mov	lr, r4
   1ce88:	f84c 5d04 	str.w	r5, [ip, #-4]!
   1ce8c:	e890 0fff 	ldmia.w	r0, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp}
   1ce90:	46e5      	mov	sp, ip
   1ce92:	bd00      	pop	{pc}

0001ce94 <__gnu_Unwind_Restore_VFP>:
   1ce94:	ec90 0b21 	fldmiax	r0, {d0-d15}	;@ Deprecated
   1ce98:	4770      	bx	lr
   1ce9a:	bf00      	nop

0001ce9c <__gnu_Unwind_Save_VFP>:
   1ce9c:	ec80 0b21 	fstmiax	r0, {d0-d15}	;@ Deprecated
   1cea0:	4770      	bx	lr
   1cea2:	bf00      	nop

0001cea4 <__gnu_Unwind_Restore_VFP_D>:
   1cea4:	ec90 0b20 	vldmia	r0, {d0-d15}
   1cea8:	4770      	bx	lr
   1ceaa:	bf00      	nop

0001ceac <__gnu_Unwind_Save_VFP_D>:
   1ceac:	ec80 0b20 	vstmia	r0, {d0-d15}
   1ceb0:	4770      	bx	lr
   1ceb2:	bf00      	nop

0001ceb4 <__gnu_Unwind_Restore_VFP_D_16_to_31>:
   1ceb4:	ecd0 0b20 	vldmia	r0, {d16-d31}
   1ceb8:	4770      	bx	lr
   1ceba:	bf00      	nop

0001cebc <__gnu_Unwind_Save_VFP_D_16_to_31>:
   1cebc:	ecc0 0b20 	vstmia	r0, {d16-d31}
   1cec0:	4770      	bx	lr
   1cec2:	bf00      	nop

0001cec4 <__gnu_Unwind_Restore_WMMXD>:
   1cec4:	ecf0 0102 	ldfe	f0, [r0], #8
   1cec8:	ecf0 1102 	ldfe	f1, [r0], #8
   1cecc:	ecf0 2102 	ldfe	f2, [r0], #8
   1ced0:	ecf0 3102 	ldfe	f3, [r0], #8
   1ced4:	ecf0 4102 	ldfe	f4, [r0], #8
   1ced8:	ecf0 5102 	ldfe	f5, [r0], #8
   1cedc:	ecf0 6102 	ldfe	f6, [r0], #8
   1cee0:	ecf0 7102 	ldfe	f7, [r0], #8
   1cee4:	ecf0 8102 	ldfp	f0, [r0], #8
   1cee8:	ecf0 9102 	ldfp	f1, [r0], #8
   1ceec:	ecf0 a102 	ldfp	f2, [r0], #8
   1cef0:	ecf0 b102 	ldfp	f3, [r0], #8
   1cef4:	ecf0 c102 	ldfp	f4, [r0], #8
   1cef8:	ecf0 d102 	ldfp	f5, [r0], #8
   1cefc:	ecf0 e102 	ldfp	f6, [r0], #8
   1cf00:	ecf0 f102 	ldfp	f7, [r0], #8
   1cf04:	4770      	bx	lr
   1cf06:	bf00      	nop

0001cf08 <__gnu_Unwind_Save_WMMXD>:
   1cf08:	ece0 0102 	stfe	f0, [r0], #8
   1cf0c:	ece0 1102 	stfe	f1, [r0], #8
   1cf10:	ece0 2102 	stfe	f2, [r0], #8
   1cf14:	ece0 3102 	stfe	f3, [r0], #8
   1cf18:	ece0 4102 	stfe	f4, [r0], #8
   1cf1c:	ece0 5102 	stfe	f5, [r0], #8
   1cf20:	ece0 6102 	stfe	f6, [r0], #8
   1cf24:	ece0 7102 	stfe	f7, [r0], #8
   1cf28:	ece0 8102 	stfp	f0, [r0], #8
   1cf2c:	ece0 9102 	stfp	f1, [r0], #8
   1cf30:	ece0 a102 	stfp	f2, [r0], #8
   1cf34:	ece0 b102 	stfp	f3, [r0], #8
   1cf38:	ece0 c102 	stfp	f4, [r0], #8
   1cf3c:	ece0 d102 	stfp	f5, [r0], #8
   1cf40:	ece0 e102 	stfp	f6, [r0], #8
   1cf44:	ece0 f102 	stfp	f7, [r0], #8
   1cf48:	4770      	bx	lr
   1cf4a:	bf00      	nop

0001cf4c <__gnu_Unwind_Restore_WMMXC>:
   1cf4c:	fcb0 8101 	ldc2	1, cr8, [r0], #4
   1cf50:	fcb0 9101 	ldc2	1, cr9, [r0], #4
   1cf54:	fcb0 a101 	ldc2	1, cr10, [r0], #4
   1cf58:	fcb0 b101 	ldc2	1, cr11, [r0], #4
   1cf5c:	4770      	bx	lr
   1cf5e:	bf00      	nop

0001cf60 <__gnu_Unwind_Save_WMMXC>:
   1cf60:	fca0 8101 	stc2	1, cr8, [r0], #4
   1cf64:	fca0 9101 	stc2	1, cr9, [r0], #4
   1cf68:	fca0 a101 	stc2	1, cr10, [r0], #4
   1cf6c:	fca0 b101 	stc2	1, cr11, [r0], #4
   1cf70:	4770      	bx	lr
   1cf72:	bf00      	nop

0001cf74 <_Unwind_RaiseException>:
   1cf74:	46ec      	mov	ip, sp
   1cf76:	b500      	push	{lr}
   1cf78:	e92d 5000 	stmdb	sp!, {ip, lr}
   1cf7c:	e92d 1fff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip}
   1cf80:	f04f 0300 	mov.w	r3, #0
   1cf84:	e92d 000c 	stmdb	sp!, {r2, r3}
   1cf88:	a901      	add	r1, sp, #4
   1cf8a:	f7ff fbf3 	bl	1c774 <__gnu_Unwind_RaiseException>
   1cf8e:	f8dd e040 	ldr.w	lr, [sp, #64]	; 0x40
   1cf92:	b012      	add	sp, #72	; 0x48
   1cf94:	4770      	bx	lr
   1cf96:	bf00      	nop

0001cf98 <_Unwind_Resume>:
   1cf98:	46ec      	mov	ip, sp
   1cf9a:	b500      	push	{lr}
   1cf9c:	e92d 5000 	stmdb	sp!, {ip, lr}
   1cfa0:	e92d 1fff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip}
   1cfa4:	f04f 0300 	mov.w	r3, #0
   1cfa8:	e92d 000c 	stmdb	sp!, {r2, r3}
   1cfac:	a901      	add	r1, sp, #4
   1cfae:	f7ff fc1b 	bl	1c7e8 <__gnu_Unwind_Resume>
   1cfb2:	f8dd e040 	ldr.w	lr, [sp, #64]	; 0x40
   1cfb6:	b012      	add	sp, #72	; 0x48
   1cfb8:	4770      	bx	lr
   1cfba:	bf00      	nop

0001cfbc <_Unwind_Resume_or_Rethrow>:
   1cfbc:	46ec      	mov	ip, sp
   1cfbe:	b500      	push	{lr}
   1cfc0:	e92d 5000 	stmdb	sp!, {ip, lr}
   1cfc4:	e92d 1fff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip}
   1cfc8:	f04f 0300 	mov.w	r3, #0
   1cfcc:	e92d 000c 	stmdb	sp!, {r2, r3}
   1cfd0:	a901      	add	r1, sp, #4
   1cfd2:	f7ff fc2b 	bl	1c82c <__gnu_Unwind_Resume_or_Rethrow>
   1cfd6:	f8dd e040 	ldr.w	lr, [sp, #64]	; 0x40
   1cfda:	b012      	add	sp, #72	; 0x48
   1cfdc:	4770      	bx	lr
   1cfde:	bf00      	nop

0001cfe0 <_Unwind_ForcedUnwind>:
   1cfe0:	46ec      	mov	ip, sp
   1cfe2:	b500      	push	{lr}
   1cfe4:	e92d 5000 	stmdb	sp!, {ip, lr}
   1cfe8:	e92d 1fff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip}
   1cfec:	f04f 0300 	mov.w	r3, #0
   1cff0:	e92d 000c 	stmdb	sp!, {r2, r3}
   1cff4:	ab01      	add	r3, sp, #4
   1cff6:	f7ff fbed 	bl	1c7d4 <__gnu_Unwind_ForcedUnwind>
   1cffa:	f8dd e040 	ldr.w	lr, [sp, #64]	; 0x40
   1cffe:	b012      	add	sp, #72	; 0x48
   1d000:	4770      	bx	lr
   1d002:	bf00      	nop

0001d004 <_Unwind_Backtrace>:
   1d004:	46ec      	mov	ip, sp
   1d006:	b500      	push	{lr}
   1d008:	e92d 5000 	stmdb	sp!, {ip, lr}
   1d00c:	e92d 1fff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip}
   1d010:	f04f 0300 	mov.w	r3, #0
   1d014:	e92d 000c 	stmdb	sp!, {r2, r3}
   1d018:	aa01      	add	r2, sp, #4
   1d01a:	f7ff fc65 	bl	1c8e8 <__gnu_Unwind_Backtrace>
   1d01e:	f8dd e040 	ldr.w	lr, [sp, #64]	; 0x40
   1d022:	b012      	add	sp, #72	; 0x48
   1d024:	4770      	bx	lr
   1d026:	bf00      	nop

0001d028 <next_unwind_byte>:
   1d028:	7a02      	ldrb	r2, [r0, #8]
   1d02a:	b91a      	cbnz	r2, 1d034 <next_unwind_byte+0xc>
   1d02c:	7a43      	ldrb	r3, [r0, #9]
   1d02e:	b943      	cbnz	r3, 1d042 <next_unwind_byte+0x1a>
   1d030:	20b0      	movs	r0, #176	; 0xb0
   1d032:	4770      	bx	lr
   1d034:	6803      	ldr	r3, [r0, #0]
   1d036:	3a01      	subs	r2, #1
   1d038:	7202      	strb	r2, [r0, #8]
   1d03a:	021a      	lsls	r2, r3, #8
   1d03c:	6002      	str	r2, [r0, #0]
   1d03e:	0e18      	lsrs	r0, r3, #24
   1d040:	4770      	bx	lr
   1d042:	6842      	ldr	r2, [r0, #4]
   1d044:	3b01      	subs	r3, #1
   1d046:	b410      	push	{r4}
   1d048:	7243      	strb	r3, [r0, #9]
   1d04a:	6813      	ldr	r3, [r2, #0]
   1d04c:	2103      	movs	r1, #3
   1d04e:	1d14      	adds	r4, r2, #4
   1d050:	7201      	strb	r1, [r0, #8]
   1d052:	021a      	lsls	r2, r3, #8
   1d054:	6044      	str	r4, [r0, #4]
   1d056:	6002      	str	r2, [r0, #0]
   1d058:	f85d 4b04 	ldr.w	r4, [sp], #4
   1d05c:	0e18      	lsrs	r0, r3, #24
   1d05e:	4770      	bx	lr

0001d060 <_Unwind_GetGR.constprop.0>:
   1d060:	b500      	push	{lr}
   1d062:	b085      	sub	sp, #20
   1d064:	aa03      	add	r2, sp, #12
   1d066:	2300      	movs	r3, #0
   1d068:	9200      	str	r2, [sp, #0]
   1d06a:	4619      	mov	r1, r3
   1d06c:	220c      	movs	r2, #12
   1d06e:	f7ff fbed 	bl	1c84c <_Unwind_VRS_Get>
   1d072:	9803      	ldr	r0, [sp, #12]
   1d074:	b005      	add	sp, #20
   1d076:	f85d fb04 	ldr.w	pc, [sp], #4
   1d07a:	bf00      	nop

0001d07c <unwind_UCB_from_context>:
   1d07c:	e7f0      	b.n	1d060 <_Unwind_GetGR.constprop.0>
   1d07e:	bf00      	nop

0001d080 <__gnu_unwind_execute>:
   1d080:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   1d084:	4606      	mov	r6, r0
   1d086:	b085      	sub	sp, #20
   1d088:	460f      	mov	r7, r1
   1d08a:	f04f 0800 	mov.w	r8, #0
   1d08e:	4638      	mov	r0, r7
   1d090:	f7ff ffca 	bl	1d028 <next_unwind_byte>
   1d094:	28b0      	cmp	r0, #176	; 0xb0
   1d096:	4604      	mov	r4, r0
   1d098:	d023      	beq.n	1d0e2 <__gnu_unwind_execute+0x62>
   1d09a:	0605      	lsls	r5, r0, #24
   1d09c:	d427      	bmi.n	1d0ee <__gnu_unwind_execute+0x6e>
   1d09e:	2300      	movs	r3, #0
   1d0a0:	f10d 090c 	add.w	r9, sp, #12
   1d0a4:	4619      	mov	r1, r3
   1d0a6:	0085      	lsls	r5, r0, #2
   1d0a8:	220d      	movs	r2, #13
   1d0aa:	f8cd 9000 	str.w	r9, [sp]
   1d0ae:	4630      	mov	r0, r6
   1d0b0:	f7ff fbcc 	bl	1c84c <_Unwind_VRS_Get>
   1d0b4:	b2ed      	uxtb	r5, r5
   1d0b6:	9b03      	ldr	r3, [sp, #12]
   1d0b8:	f8cd 9000 	str.w	r9, [sp]
   1d0bc:	0660      	lsls	r0, r4, #25
   1d0be:	f105 0504 	add.w	r5, r5, #4
   1d0c2:	bf4c      	ite	mi
   1d0c4:	1b5d      	submi	r5, r3, r5
   1d0c6:	18ed      	addpl	r5, r5, r3
   1d0c8:	2300      	movs	r3, #0
   1d0ca:	4619      	mov	r1, r3
   1d0cc:	220d      	movs	r2, #13
   1d0ce:	4630      	mov	r0, r6
   1d0d0:	9503      	str	r5, [sp, #12]
   1d0d2:	f7ff fbe1 	bl	1c898 <_Unwind_VRS_Set>
   1d0d6:	4638      	mov	r0, r7
   1d0d8:	f7ff ffa6 	bl	1d028 <next_unwind_byte>
   1d0dc:	28b0      	cmp	r0, #176	; 0xb0
   1d0de:	4604      	mov	r4, r0
   1d0e0:	d1db      	bne.n	1d09a <__gnu_unwind_execute+0x1a>
   1d0e2:	f1b8 0f00 	cmp.w	r8, #0
   1d0e6:	f000 8095 	beq.w	1d214 <__gnu_unwind_execute+0x194>
   1d0ea:	2000      	movs	r0, #0
   1d0ec:	e01c      	b.n	1d128 <__gnu_unwind_execute+0xa8>
   1d0ee:	f000 03f0 	and.w	r3, r0, #240	; 0xf0
   1d0f2:	2b80      	cmp	r3, #128	; 0x80
   1d0f4:	d05d      	beq.n	1d1b2 <__gnu_unwind_execute+0x132>
   1d0f6:	2b90      	cmp	r3, #144	; 0x90
   1d0f8:	d019      	beq.n	1d12e <__gnu_unwind_execute+0xae>
   1d0fa:	2ba0      	cmp	r3, #160	; 0xa0
   1d0fc:	d02c      	beq.n	1d158 <__gnu_unwind_execute+0xd8>
   1d0fe:	2bb0      	cmp	r3, #176	; 0xb0
   1d100:	d03f      	beq.n	1d182 <__gnu_unwind_execute+0x102>
   1d102:	2bc0      	cmp	r3, #192	; 0xc0
   1d104:	d06c      	beq.n	1d1e0 <__gnu_unwind_execute+0x160>
   1d106:	f000 03f8 	and.w	r3, r0, #248	; 0xf8
   1d10a:	2bd0      	cmp	r3, #208	; 0xd0
   1d10c:	d10b      	bne.n	1d126 <__gnu_unwind_execute+0xa6>
   1d10e:	f000 0207 	and.w	r2, r0, #7
   1d112:	3201      	adds	r2, #1
   1d114:	f442 2200 	orr.w	r2, r2, #524288	; 0x80000
   1d118:	2305      	movs	r3, #5
   1d11a:	2101      	movs	r1, #1
   1d11c:	4630      	mov	r0, r6
   1d11e:	f7ff fd89 	bl	1cc34 <_Unwind_VRS_Pop>
   1d122:	2800      	cmp	r0, #0
   1d124:	d0b3      	beq.n	1d08e <__gnu_unwind_execute+0xe>
   1d126:	2009      	movs	r0, #9
   1d128:	b005      	add	sp, #20
   1d12a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   1d12e:	f000 030d 	and.w	r3, r0, #13
   1d132:	2b0d      	cmp	r3, #13
   1d134:	d0f7      	beq.n	1d126 <__gnu_unwind_execute+0xa6>
   1d136:	ad03      	add	r5, sp, #12
   1d138:	2300      	movs	r3, #0
   1d13a:	f000 020f 	and.w	r2, r0, #15
   1d13e:	4619      	mov	r1, r3
   1d140:	9500      	str	r5, [sp, #0]
   1d142:	4630      	mov	r0, r6
   1d144:	f7ff fb82 	bl	1c84c <_Unwind_VRS_Get>
   1d148:	2300      	movs	r3, #0
   1d14a:	9500      	str	r5, [sp, #0]
   1d14c:	4619      	mov	r1, r3
   1d14e:	220d      	movs	r2, #13
   1d150:	4630      	mov	r0, r6
   1d152:	f7ff fba1 	bl	1c898 <_Unwind_VRS_Set>
   1d156:	e79a      	b.n	1d08e <__gnu_unwind_execute+0xe>
   1d158:	43c2      	mvns	r2, r0
   1d15a:	f002 0307 	and.w	r3, r2, #7
   1d15e:	f44f 627f 	mov.w	r2, #4080	; 0xff0
   1d162:	411a      	asrs	r2, r3
   1d164:	0701      	lsls	r1, r0, #28
   1d166:	f402 627f 	and.w	r2, r2, #4080	; 0xff0
   1d16a:	f04f 0300 	mov.w	r3, #0
   1d16e:	bf48      	it	mi
   1d170:	f442 4280 	orrmi.w	r2, r2, #16384	; 0x4000
   1d174:	4619      	mov	r1, r3
   1d176:	4630      	mov	r0, r6
   1d178:	f7ff fd5c 	bl	1cc34 <_Unwind_VRS_Pop>
   1d17c:	2800      	cmp	r0, #0
   1d17e:	d1d2      	bne.n	1d126 <__gnu_unwind_execute+0xa6>
   1d180:	e785      	b.n	1d08e <__gnu_unwind_execute+0xe>
   1d182:	28b1      	cmp	r0, #177	; 0xb1
   1d184:	d057      	beq.n	1d236 <__gnu_unwind_execute+0x1b6>
   1d186:	28b2      	cmp	r0, #178	; 0xb2
   1d188:	d068      	beq.n	1d25c <__gnu_unwind_execute+0x1dc>
   1d18a:	28b3      	cmp	r0, #179	; 0xb3
   1d18c:	f000 8095 	beq.w	1d2ba <__gnu_unwind_execute+0x23a>
   1d190:	f000 03fc 	and.w	r3, r0, #252	; 0xfc
   1d194:	2bb4      	cmp	r3, #180	; 0xb4
   1d196:	d0c6      	beq.n	1d126 <__gnu_unwind_execute+0xa6>
   1d198:	f000 0207 	and.w	r2, r0, #7
   1d19c:	3201      	adds	r2, #1
   1d19e:	2301      	movs	r3, #1
   1d1a0:	f442 2200 	orr.w	r2, r2, #524288	; 0x80000
   1d1a4:	4619      	mov	r1, r3
   1d1a6:	4630      	mov	r0, r6
   1d1a8:	f7ff fd44 	bl	1cc34 <_Unwind_VRS_Pop>
   1d1ac:	2800      	cmp	r0, #0
   1d1ae:	d1ba      	bne.n	1d126 <__gnu_unwind_execute+0xa6>
   1d1b0:	e76d      	b.n	1d08e <__gnu_unwind_execute+0xe>
   1d1b2:	4638      	mov	r0, r7
   1d1b4:	f7ff ff38 	bl	1d028 <next_unwind_byte>
   1d1b8:	0224      	lsls	r4, r4, #8
   1d1ba:	4304      	orrs	r4, r0
   1d1bc:	f5b4 4f00 	cmp.w	r4, #32768	; 0x8000
   1d1c0:	d0b1      	beq.n	1d126 <__gnu_unwind_execute+0xa6>
   1d1c2:	0124      	lsls	r4, r4, #4
   1d1c4:	2300      	movs	r3, #0
   1d1c6:	b2a2      	uxth	r2, r4
   1d1c8:	4619      	mov	r1, r3
   1d1ca:	4630      	mov	r0, r6
   1d1cc:	f7ff fd32 	bl	1cc34 <_Unwind_VRS_Pop>
   1d1d0:	2800      	cmp	r0, #0
   1d1d2:	d1a8      	bne.n	1d126 <__gnu_unwind_execute+0xa6>
   1d1d4:	f414 4f00 	tst.w	r4, #32768	; 0x8000
   1d1d8:	bf18      	it	ne
   1d1da:	f04f 0801 	movne.w	r8, #1
   1d1de:	e756      	b.n	1d08e <__gnu_unwind_execute+0xe>
   1d1e0:	28c6      	cmp	r0, #198	; 0xc6
   1d1e2:	d07d      	beq.n	1d2e0 <__gnu_unwind_execute+0x260>
   1d1e4:	28c7      	cmp	r0, #199	; 0xc7
   1d1e6:	f000 8086 	beq.w	1d2f6 <__gnu_unwind_execute+0x276>
   1d1ea:	f000 03f8 	and.w	r3, r0, #248	; 0xf8
   1d1ee:	2bc0      	cmp	r3, #192	; 0xc0
   1d1f0:	f000 8094 	beq.w	1d31c <__gnu_unwind_execute+0x29c>
   1d1f4:	28c8      	cmp	r0, #200	; 0xc8
   1d1f6:	f000 809f 	beq.w	1d338 <__gnu_unwind_execute+0x2b8>
   1d1fa:	28c9      	cmp	r0, #201	; 0xc9
   1d1fc:	d193      	bne.n	1d126 <__gnu_unwind_execute+0xa6>
   1d1fe:	4638      	mov	r0, r7
   1d200:	f7ff ff12 	bl	1d028 <next_unwind_byte>
   1d204:	0302      	lsls	r2, r0, #12
   1d206:	f000 000f 	and.w	r0, r0, #15
   1d20a:	f402 2270 	and.w	r2, r2, #983040	; 0xf0000
   1d20e:	3001      	adds	r0, #1
   1d210:	4302      	orrs	r2, r0
   1d212:	e781      	b.n	1d118 <__gnu_unwind_execute+0x98>
   1d214:	ac03      	add	r4, sp, #12
   1d216:	4643      	mov	r3, r8
   1d218:	220e      	movs	r2, #14
   1d21a:	4641      	mov	r1, r8
   1d21c:	9400      	str	r4, [sp, #0]
   1d21e:	4630      	mov	r0, r6
   1d220:	f7ff fb14 	bl	1c84c <_Unwind_VRS_Get>
   1d224:	9400      	str	r4, [sp, #0]
   1d226:	4630      	mov	r0, r6
   1d228:	4643      	mov	r3, r8
   1d22a:	220f      	movs	r2, #15
   1d22c:	4641      	mov	r1, r8
   1d22e:	f7ff fb33 	bl	1c898 <_Unwind_VRS_Set>
   1d232:	4640      	mov	r0, r8
   1d234:	e778      	b.n	1d128 <__gnu_unwind_execute+0xa8>
   1d236:	4638      	mov	r0, r7
   1d238:	f7ff fef6 	bl	1d028 <next_unwind_byte>
   1d23c:	2800      	cmp	r0, #0
   1d23e:	f43f af72 	beq.w	1d126 <__gnu_unwind_execute+0xa6>
   1d242:	f010 03f0 	ands.w	r3, r0, #240	; 0xf0
   1d246:	f47f af6e 	bne.w	1d126 <__gnu_unwind_execute+0xa6>
   1d24a:	4602      	mov	r2, r0
   1d24c:	4619      	mov	r1, r3
   1d24e:	4630      	mov	r0, r6
   1d250:	f7ff fcf0 	bl	1cc34 <_Unwind_VRS_Pop>
   1d254:	2800      	cmp	r0, #0
   1d256:	f47f af66 	bne.w	1d126 <__gnu_unwind_execute+0xa6>
   1d25a:	e718      	b.n	1d08e <__gnu_unwind_execute+0xe>
   1d25c:	2300      	movs	r3, #0
   1d25e:	f10d 090c 	add.w	r9, sp, #12
   1d262:	220d      	movs	r2, #13
   1d264:	4619      	mov	r1, r3
   1d266:	f8cd 9000 	str.w	r9, [sp]
   1d26a:	4630      	mov	r0, r6
   1d26c:	f7ff faee 	bl	1c84c <_Unwind_VRS_Get>
   1d270:	4638      	mov	r0, r7
   1d272:	f7ff fed9 	bl	1d028 <next_unwind_byte>
   1d276:	0602      	lsls	r2, r0, #24
   1d278:	f04f 0402 	mov.w	r4, #2
   1d27c:	d50c      	bpl.n	1d298 <__gnu_unwind_execute+0x218>
   1d27e:	9b03      	ldr	r3, [sp, #12]
   1d280:	f000 007f 	and.w	r0, r0, #127	; 0x7f
   1d284:	40a0      	lsls	r0, r4
   1d286:	4403      	add	r3, r0
   1d288:	4638      	mov	r0, r7
   1d28a:	9303      	str	r3, [sp, #12]
   1d28c:	f7ff fecc 	bl	1d028 <next_unwind_byte>
   1d290:	0603      	lsls	r3, r0, #24
   1d292:	f104 0407 	add.w	r4, r4, #7
   1d296:	d4f2      	bmi.n	1d27e <__gnu_unwind_execute+0x1fe>
   1d298:	9b03      	ldr	r3, [sp, #12]
   1d29a:	f8cd 9000 	str.w	r9, [sp]
   1d29e:	f000 027f 	and.w	r2, r0, #127	; 0x7f
   1d2a2:	40a2      	lsls	r2, r4
   1d2a4:	f503 7401 	add.w	r4, r3, #516	; 0x204
   1d2a8:	2300      	movs	r3, #0
   1d2aa:	4414      	add	r4, r2
   1d2ac:	4619      	mov	r1, r3
   1d2ae:	220d      	movs	r2, #13
   1d2b0:	4630      	mov	r0, r6
   1d2b2:	9403      	str	r4, [sp, #12]
   1d2b4:	f7ff faf0 	bl	1c898 <_Unwind_VRS_Set>
   1d2b8:	e6e9      	b.n	1d08e <__gnu_unwind_execute+0xe>
   1d2ba:	4638      	mov	r0, r7
   1d2bc:	f7ff feb4 	bl	1d028 <next_unwind_byte>
   1d2c0:	0301      	lsls	r1, r0, #12
   1d2c2:	f000 000f 	and.w	r0, r0, #15
   1d2c6:	f401 2170 	and.w	r1, r1, #983040	; 0xf0000
   1d2ca:	1c42      	adds	r2, r0, #1
   1d2cc:	2301      	movs	r3, #1
   1d2ce:	430a      	orrs	r2, r1
   1d2d0:	4630      	mov	r0, r6
   1d2d2:	4619      	mov	r1, r3
   1d2d4:	f7ff fcae 	bl	1cc34 <_Unwind_VRS_Pop>
   1d2d8:	2800      	cmp	r0, #0
   1d2da:	f47f af24 	bne.w	1d126 <__gnu_unwind_execute+0xa6>
   1d2de:	e6d6      	b.n	1d08e <__gnu_unwind_execute+0xe>
   1d2e0:	4638      	mov	r0, r7
   1d2e2:	f7ff fea1 	bl	1d028 <next_unwind_byte>
   1d2e6:	0301      	lsls	r1, r0, #12
   1d2e8:	f000 000f 	and.w	r0, r0, #15
   1d2ec:	f401 2170 	and.w	r1, r1, #983040	; 0xf0000
   1d2f0:	1c42      	adds	r2, r0, #1
   1d2f2:	2303      	movs	r3, #3
   1d2f4:	e7eb      	b.n	1d2ce <__gnu_unwind_execute+0x24e>
   1d2f6:	4638      	mov	r0, r7
   1d2f8:	f7ff fe96 	bl	1d028 <next_unwind_byte>
   1d2fc:	2800      	cmp	r0, #0
   1d2fe:	f43f af12 	beq.w	1d126 <__gnu_unwind_execute+0xa6>
   1d302:	f010 03f0 	ands.w	r3, r0, #240	; 0xf0
   1d306:	f47f af0e 	bne.w	1d126 <__gnu_unwind_execute+0xa6>
   1d30a:	4602      	mov	r2, r0
   1d30c:	2104      	movs	r1, #4
   1d30e:	4630      	mov	r0, r6
   1d310:	f7ff fc90 	bl	1cc34 <_Unwind_VRS_Pop>
   1d314:	2800      	cmp	r0, #0
   1d316:	f47f af06 	bne.w	1d126 <__gnu_unwind_execute+0xa6>
   1d31a:	e6b8      	b.n	1d08e <__gnu_unwind_execute+0xe>
   1d31c:	f000 020f 	and.w	r2, r0, #15
   1d320:	3201      	adds	r2, #1
   1d322:	2303      	movs	r3, #3
   1d324:	f442 2220 	orr.w	r2, r2, #655360	; 0xa0000
   1d328:	4619      	mov	r1, r3
   1d32a:	4630      	mov	r0, r6
   1d32c:	f7ff fc82 	bl	1cc34 <_Unwind_VRS_Pop>
   1d330:	2800      	cmp	r0, #0
   1d332:	f47f aef8 	bne.w	1d126 <__gnu_unwind_execute+0xa6>
   1d336:	e6aa      	b.n	1d08e <__gnu_unwind_execute+0xe>
   1d338:	4638      	mov	r0, r7
   1d33a:	f7ff fe75 	bl	1d028 <next_unwind_byte>
   1d33e:	f000 02f0 	and.w	r2, r0, #240	; 0xf0
   1d342:	f000 030f 	and.w	r3, r0, #15
   1d346:	3210      	adds	r2, #16
   1d348:	3301      	adds	r3, #1
   1d34a:	ea43 3202 	orr.w	r2, r3, r2, lsl #12
   1d34e:	e6e3      	b.n	1d118 <__gnu_unwind_execute+0x98>

0001d350 <__gnu_unwind_frame>:
   1d350:	b510      	push	{r4, lr}
   1d352:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
   1d354:	b084      	sub	sp, #16
   1d356:	685a      	ldr	r2, [r3, #4]
   1d358:	2003      	movs	r0, #3
   1d35a:	f88d 000c 	strb.w	r0, [sp, #12]
   1d35e:	79dc      	ldrb	r4, [r3, #7]
   1d360:	f88d 400d 	strb.w	r4, [sp, #13]
   1d364:	0212      	lsls	r2, r2, #8
   1d366:	3308      	adds	r3, #8
   1d368:	4608      	mov	r0, r1
   1d36a:	a901      	add	r1, sp, #4
   1d36c:	9201      	str	r2, [sp, #4]
   1d36e:	9302      	str	r3, [sp, #8]
   1d370:	f7ff fe86 	bl	1d080 <__gnu_unwind_execute>
   1d374:	b004      	add	sp, #16
   1d376:	bd10      	pop	{r4, pc}

0001d378 <_Unwind_GetRegionStart>:
   1d378:	b508      	push	{r3, lr}
   1d37a:	f7ff fe7f 	bl	1d07c <unwind_UCB_from_context>
   1d37e:	6c80      	ldr	r0, [r0, #72]	; 0x48
   1d380:	bd08      	pop	{r3, pc}
   1d382:	bf00      	nop

0001d384 <_Unwind_GetLanguageSpecificData>:
   1d384:	b508      	push	{r3, lr}
   1d386:	f7ff fe79 	bl	1d07c <unwind_UCB_from_context>
   1d38a:	6cc0      	ldr	r0, [r0, #76]	; 0x4c
   1d38c:	79c3      	ldrb	r3, [r0, #7]
   1d38e:	eb00 0083 	add.w	r0, r0, r3, lsl #2
   1d392:	3008      	adds	r0, #8
   1d394:	bd08      	pop	{r3, pc}
   1d396:	bf00      	nop

0001d398 <_Unwind_GetTextRelBase>:
   1d398:	b508      	push	{r3, lr}
   1d39a:	f000 f807 	bl	1d3ac <abort>
   1d39e:	bf00      	nop

0001d3a0 <_Unwind_GetDataRelBase>:
   1d3a0:	b508      	push	{r3, lr}
   1d3a2:	f7ff fff9 	bl	1d398 <_Unwind_GetTextRelBase>
   1d3a6:	bf00      	nop

0001d3a8 <__aeabi_idiv0>:
   1d3a8:	4770      	bx	lr
   1d3aa:	bf00      	nop

0001d3ac <abort>:
   1d3ac:	b508      	push	{r3, lr}
   1d3ae:	2006      	movs	r0, #6
   1d3b0:	f001 f986 	bl	1e6c0 <raise>
   1d3b4:	2001      	movs	r0, #1
   1d3b6:	f005 f923 	bl	22600 <_exit>
   1d3ba:	bf00      	nop

0001d3bc <__errno>:
   1d3bc:	4b01      	ldr	r3, [pc, #4]	; (1d3c4 <__errno+0x8>)
   1d3be:	6818      	ldr	r0, [r3, #0]
   1d3c0:	4770      	bx	lr
   1d3c2:	bf00      	nop
   1d3c4:	20000100 	.word	0x20000100

0001d3c8 <fputc>:
   1d3c8:	4b14      	ldr	r3, [pc, #80]	; (1d41c <fputc+0x54>)
   1d3ca:	b570      	push	{r4, r5, r6, lr}
   1d3cc:	681d      	ldr	r5, [r3, #0]
   1d3ce:	4606      	mov	r6, r0
   1d3d0:	460c      	mov	r4, r1
   1d3d2:	b10d      	cbz	r5, 1d3d8 <fputc+0x10>
   1d3d4:	6bab      	ldr	r3, [r5, #56]	; 0x38
   1d3d6:	b1c3      	cbz	r3, 1d40a <fputc+0x42>
   1d3d8:	6e63      	ldr	r3, [r4, #100]	; 0x64
   1d3da:	07d8      	lsls	r0, r3, #31
   1d3dc:	d402      	bmi.n	1d3e4 <fputc+0x1c>
   1d3de:	89a3      	ldrh	r3, [r4, #12]
   1d3e0:	0599      	lsls	r1, r3, #22
   1d3e2:	d516      	bpl.n	1d412 <fputc+0x4a>
   1d3e4:	4628      	mov	r0, r5
   1d3e6:	4622      	mov	r2, r4
   1d3e8:	4631      	mov	r1, r6
   1d3ea:	f000 ff41 	bl	1e270 <_putc_r>
   1d3ee:	6e63      	ldr	r3, [r4, #100]	; 0x64
   1d3f0:	07da      	lsls	r2, r3, #31
   1d3f2:	4605      	mov	r5, r0
   1d3f4:	d402      	bmi.n	1d3fc <fputc+0x34>
   1d3f6:	89a3      	ldrh	r3, [r4, #12]
   1d3f8:	059b      	lsls	r3, r3, #22
   1d3fa:	d501      	bpl.n	1d400 <fputc+0x38>
   1d3fc:	4628      	mov	r0, r5
   1d3fe:	bd70      	pop	{r4, r5, r6, pc}
   1d400:	6da0      	ldr	r0, [r4, #88]	; 0x58
   1d402:	f000 fa7f 	bl	1d904 <__retarget_lock_release_recursive>
   1d406:	4628      	mov	r0, r5
   1d408:	bd70      	pop	{r4, r5, r6, pc}
   1d40a:	4628      	mov	r0, r5
   1d40c:	f004 f812 	bl	21434 <__sinit>
   1d410:	e7e2      	b.n	1d3d8 <fputc+0x10>
   1d412:	6da0      	ldr	r0, [r4, #88]	; 0x58
   1d414:	f000 fa74 	bl	1d900 <__retarget_lock_acquire_recursive>
   1d418:	e7e4      	b.n	1d3e4 <fputc+0x1c>
   1d41a:	bf00      	nop
   1d41c:	20000100 	.word	0x20000100

0001d420 <_fputs_r>:
   1d420:	b530      	push	{r4, r5, lr}
   1d422:	b087      	sub	sp, #28
   1d424:	4605      	mov	r5, r0
   1d426:	4608      	mov	r0, r1
   1d428:	4614      	mov	r4, r2
   1d42a:	9101      	str	r1, [sp, #4]
   1d42c:	f001 fb08 	bl	1ea40 <strlen>
   1d430:	aa01      	add	r2, sp, #4
   1d432:	2301      	movs	r3, #1
   1d434:	9005      	str	r0, [sp, #20]
   1d436:	9002      	str	r0, [sp, #8]
   1d438:	9203      	str	r2, [sp, #12]
   1d43a:	9304      	str	r3, [sp, #16]
   1d43c:	b10d      	cbz	r5, 1d442 <_fputs_r+0x22>
   1d43e:	6bab      	ldr	r3, [r5, #56]	; 0x38
   1d440:	b333      	cbz	r3, 1d490 <_fputs_r+0x70>
   1d442:	6e63      	ldr	r3, [r4, #100]	; 0x64
   1d444:	f013 0f01 	tst.w	r3, #1
   1d448:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   1d44c:	b29a      	uxth	r2, r3
   1d44e:	d101      	bne.n	1d454 <_fputs_r+0x34>
   1d450:	0590      	lsls	r0, r2, #22
   1d452:	d521      	bpl.n	1d498 <_fputs_r+0x78>
   1d454:	0491      	lsls	r1, r2, #18
   1d456:	d406      	bmi.n	1d466 <_fputs_r+0x46>
   1d458:	6e62      	ldr	r2, [r4, #100]	; 0x64
   1d45a:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
   1d45e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
   1d462:	81a3      	strh	r3, [r4, #12]
   1d464:	6662      	str	r2, [r4, #100]	; 0x64
   1d466:	4628      	mov	r0, r5
   1d468:	aa03      	add	r2, sp, #12
   1d46a:	4621      	mov	r1, r4
   1d46c:	f000 f824 	bl	1d4b8 <__sfvwrite_r>
   1d470:	6e63      	ldr	r3, [r4, #100]	; 0x64
   1d472:	07da      	lsls	r2, r3, #31
   1d474:	4605      	mov	r5, r0
   1d476:	d402      	bmi.n	1d47e <_fputs_r+0x5e>
   1d478:	89a3      	ldrh	r3, [r4, #12]
   1d47a:	059b      	lsls	r3, r3, #22
   1d47c:	d502      	bpl.n	1d484 <_fputs_r+0x64>
   1d47e:	4628      	mov	r0, r5
   1d480:	b007      	add	sp, #28
   1d482:	bd30      	pop	{r4, r5, pc}
   1d484:	6da0      	ldr	r0, [r4, #88]	; 0x58
   1d486:	f000 fa3d 	bl	1d904 <__retarget_lock_release_recursive>
   1d48a:	4628      	mov	r0, r5
   1d48c:	b007      	add	sp, #28
   1d48e:	bd30      	pop	{r4, r5, pc}
   1d490:	4628      	mov	r0, r5
   1d492:	f003 ffcf 	bl	21434 <__sinit>
   1d496:	e7d4      	b.n	1d442 <_fputs_r+0x22>
   1d498:	6da0      	ldr	r0, [r4, #88]	; 0x58
   1d49a:	f000 fa31 	bl	1d900 <__retarget_lock_acquire_recursive>
   1d49e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   1d4a2:	b29a      	uxth	r2, r3
   1d4a4:	e7d6      	b.n	1d454 <_fputs_r+0x34>
   1d4a6:	bf00      	nop

0001d4a8 <fputs>:
   1d4a8:	4b02      	ldr	r3, [pc, #8]	; (1d4b4 <fputs+0xc>)
   1d4aa:	460a      	mov	r2, r1
   1d4ac:	4601      	mov	r1, r0
   1d4ae:	6818      	ldr	r0, [r3, #0]
   1d4b0:	f7ff bfb6 	b.w	1d420 <_fputs_r>
   1d4b4:	20000100 	.word	0x20000100

0001d4b8 <__sfvwrite_r>:
   1d4b8:	6893      	ldr	r3, [r2, #8]
   1d4ba:	2b00      	cmp	r3, #0
   1d4bc:	d073      	beq.n	1d5a6 <__sfvwrite_r+0xee>
   1d4be:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1d4c2:	898b      	ldrh	r3, [r1, #12]
   1d4c4:	b083      	sub	sp, #12
   1d4c6:	460c      	mov	r4, r1
   1d4c8:	0719      	lsls	r1, r3, #28
   1d4ca:	9000      	str	r0, [sp, #0]
   1d4cc:	4616      	mov	r6, r2
   1d4ce:	d526      	bpl.n	1d51e <__sfvwrite_r+0x66>
   1d4d0:	6922      	ldr	r2, [r4, #16]
   1d4d2:	b322      	cbz	r2, 1d51e <__sfvwrite_r+0x66>
   1d4d4:	f013 0002 	ands.w	r0, r3, #2
   1d4d8:	6835      	ldr	r5, [r6, #0]
   1d4da:	d02c      	beq.n	1d536 <__sfvwrite_r+0x7e>
   1d4dc:	f04f 0900 	mov.w	r9, #0
   1d4e0:	4fb0      	ldr	r7, [pc, #704]	; (1d7a4 <__sfvwrite_r+0x2ec>)
   1d4e2:	46c8      	mov	r8, r9
   1d4e4:	46b2      	mov	sl, r6
   1d4e6:	45b8      	cmp	r8, r7
   1d4e8:	4643      	mov	r3, r8
   1d4ea:	464a      	mov	r2, r9
   1d4ec:	bf28      	it	cs
   1d4ee:	463b      	movcs	r3, r7
   1d4f0:	9800      	ldr	r0, [sp, #0]
   1d4f2:	f1b8 0f00 	cmp.w	r8, #0
   1d4f6:	d050      	beq.n	1d59a <__sfvwrite_r+0xe2>
   1d4f8:	69e1      	ldr	r1, [r4, #28]
   1d4fa:	6a66      	ldr	r6, [r4, #36]	; 0x24
   1d4fc:	47b0      	blx	r6
   1d4fe:	2800      	cmp	r0, #0
   1d500:	dd58      	ble.n	1d5b4 <__sfvwrite_r+0xfc>
   1d502:	f8da 3008 	ldr.w	r3, [sl, #8]
   1d506:	1a1b      	subs	r3, r3, r0
   1d508:	4481      	add	r9, r0
   1d50a:	eba8 0800 	sub.w	r8, r8, r0
   1d50e:	f8ca 3008 	str.w	r3, [sl, #8]
   1d512:	2b00      	cmp	r3, #0
   1d514:	d1e7      	bne.n	1d4e6 <__sfvwrite_r+0x2e>
   1d516:	2000      	movs	r0, #0
   1d518:	b003      	add	sp, #12
   1d51a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1d51e:	4621      	mov	r1, r4
   1d520:	9800      	ldr	r0, [sp, #0]
   1d522:	f002 fe5f 	bl	201e4 <__swsetup_r>
   1d526:	2800      	cmp	r0, #0
   1d528:	f040 8133 	bne.w	1d792 <__sfvwrite_r+0x2da>
   1d52c:	89a3      	ldrh	r3, [r4, #12]
   1d52e:	6835      	ldr	r5, [r6, #0]
   1d530:	f013 0002 	ands.w	r0, r3, #2
   1d534:	d1d2      	bne.n	1d4dc <__sfvwrite_r+0x24>
   1d536:	f013 0901 	ands.w	r9, r3, #1
   1d53a:	d145      	bne.n	1d5c8 <__sfvwrite_r+0x110>
   1d53c:	464f      	mov	r7, r9
   1d53e:	9601      	str	r6, [sp, #4]
   1d540:	b337      	cbz	r7, 1d590 <__sfvwrite_r+0xd8>
   1d542:	059a      	lsls	r2, r3, #22
   1d544:	f8d4 8008 	ldr.w	r8, [r4, #8]
   1d548:	f140 8083 	bpl.w	1d652 <__sfvwrite_r+0x19a>
   1d54c:	4547      	cmp	r7, r8
   1d54e:	46c3      	mov	fp, r8
   1d550:	f0c0 80ab 	bcc.w	1d6aa <__sfvwrite_r+0x1f2>
   1d554:	f413 6f90 	tst.w	r3, #1152	; 0x480
   1d558:	f040 80ac 	bne.w	1d6b4 <__sfvwrite_r+0x1fc>
   1d55c:	6820      	ldr	r0, [r4, #0]
   1d55e:	46ba      	mov	sl, r7
   1d560:	465a      	mov	r2, fp
   1d562:	4649      	mov	r1, r9
   1d564:	f000 fdc6 	bl	1e0f4 <memmove>
   1d568:	68a2      	ldr	r2, [r4, #8]
   1d56a:	6823      	ldr	r3, [r4, #0]
   1d56c:	eba2 0208 	sub.w	r2, r2, r8
   1d570:	445b      	add	r3, fp
   1d572:	60a2      	str	r2, [r4, #8]
   1d574:	6023      	str	r3, [r4, #0]
   1d576:	9a01      	ldr	r2, [sp, #4]
   1d578:	6893      	ldr	r3, [r2, #8]
   1d57a:	eba3 030a 	sub.w	r3, r3, sl
   1d57e:	44d1      	add	r9, sl
   1d580:	eba7 070a 	sub.w	r7, r7, sl
   1d584:	6093      	str	r3, [r2, #8]
   1d586:	2b00      	cmp	r3, #0
   1d588:	d0c5      	beq.n	1d516 <__sfvwrite_r+0x5e>
   1d58a:	89a3      	ldrh	r3, [r4, #12]
   1d58c:	2f00      	cmp	r7, #0
   1d58e:	d1d8      	bne.n	1d542 <__sfvwrite_r+0x8a>
   1d590:	f8d5 9000 	ldr.w	r9, [r5]
   1d594:	686f      	ldr	r7, [r5, #4]
   1d596:	3508      	adds	r5, #8
   1d598:	e7d2      	b.n	1d540 <__sfvwrite_r+0x88>
   1d59a:	f8d5 9000 	ldr.w	r9, [r5]
   1d59e:	f8d5 8004 	ldr.w	r8, [r5, #4]
   1d5a2:	3508      	adds	r5, #8
   1d5a4:	e79f      	b.n	1d4e6 <__sfvwrite_r+0x2e>
   1d5a6:	2000      	movs	r0, #0
   1d5a8:	4770      	bx	lr
   1d5aa:	4621      	mov	r1, r4
   1d5ac:	9800      	ldr	r0, [sp, #0]
   1d5ae:	f003 fee9 	bl	21384 <_fflush_r>
   1d5b2:	b370      	cbz	r0, 1d612 <__sfvwrite_r+0x15a>
   1d5b4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   1d5b8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   1d5bc:	f04f 30ff 	mov.w	r0, #4294967295
   1d5c0:	81a3      	strh	r3, [r4, #12]
   1d5c2:	b003      	add	sp, #12
   1d5c4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1d5c8:	4681      	mov	r9, r0
   1d5ca:	4633      	mov	r3, r6
   1d5cc:	464e      	mov	r6, r9
   1d5ce:	46a8      	mov	r8, r5
   1d5d0:	469a      	mov	sl, r3
   1d5d2:	464d      	mov	r5, r9
   1d5d4:	b34e      	cbz	r6, 1d62a <__sfvwrite_r+0x172>
   1d5d6:	b380      	cbz	r0, 1d63a <__sfvwrite_r+0x182>
   1d5d8:	6820      	ldr	r0, [r4, #0]
   1d5da:	6923      	ldr	r3, [r4, #16]
   1d5dc:	6962      	ldr	r2, [r4, #20]
   1d5de:	45b1      	cmp	r9, r6
   1d5e0:	46cb      	mov	fp, r9
   1d5e2:	bf28      	it	cs
   1d5e4:	46b3      	movcs	fp, r6
   1d5e6:	4298      	cmp	r0, r3
   1d5e8:	465f      	mov	r7, fp
   1d5ea:	d904      	bls.n	1d5f6 <__sfvwrite_r+0x13e>
   1d5ec:	68a3      	ldr	r3, [r4, #8]
   1d5ee:	4413      	add	r3, r2
   1d5f0:	459b      	cmp	fp, r3
   1d5f2:	f300 80a6 	bgt.w	1d742 <__sfvwrite_r+0x28a>
   1d5f6:	4593      	cmp	fp, r2
   1d5f8:	db4b      	blt.n	1d692 <__sfvwrite_r+0x1da>
   1d5fa:	4613      	mov	r3, r2
   1d5fc:	6a67      	ldr	r7, [r4, #36]	; 0x24
   1d5fe:	69e1      	ldr	r1, [r4, #28]
   1d600:	9800      	ldr	r0, [sp, #0]
   1d602:	462a      	mov	r2, r5
   1d604:	47b8      	blx	r7
   1d606:	1e07      	subs	r7, r0, #0
   1d608:	ddd4      	ble.n	1d5b4 <__sfvwrite_r+0xfc>
   1d60a:	ebb9 0907 	subs.w	r9, r9, r7
   1d60e:	d0cc      	beq.n	1d5aa <__sfvwrite_r+0xf2>
   1d610:	2001      	movs	r0, #1
   1d612:	f8da 3008 	ldr.w	r3, [sl, #8]
   1d616:	1bdb      	subs	r3, r3, r7
   1d618:	443d      	add	r5, r7
   1d61a:	1bf6      	subs	r6, r6, r7
   1d61c:	f8ca 3008 	str.w	r3, [sl, #8]
   1d620:	2b00      	cmp	r3, #0
   1d622:	f43f af78 	beq.w	1d516 <__sfvwrite_r+0x5e>
   1d626:	2e00      	cmp	r6, #0
   1d628:	d1d5      	bne.n	1d5d6 <__sfvwrite_r+0x11e>
   1d62a:	f108 0308 	add.w	r3, r8, #8
   1d62e:	e913 0060 	ldmdb	r3, {r5, r6}
   1d632:	4698      	mov	r8, r3
   1d634:	3308      	adds	r3, #8
   1d636:	2e00      	cmp	r6, #0
   1d638:	d0f9      	beq.n	1d62e <__sfvwrite_r+0x176>
   1d63a:	4632      	mov	r2, r6
   1d63c:	210a      	movs	r1, #10
   1d63e:	4628      	mov	r0, r5
   1d640:	f000 fc3e 	bl	1dec0 <memchr>
   1d644:	2800      	cmp	r0, #0
   1d646:	f000 80a1 	beq.w	1d78c <__sfvwrite_r+0x2d4>
   1d64a:	3001      	adds	r0, #1
   1d64c:	eba0 0905 	sub.w	r9, r0, r5
   1d650:	e7c2      	b.n	1d5d8 <__sfvwrite_r+0x120>
   1d652:	6820      	ldr	r0, [r4, #0]
   1d654:	6923      	ldr	r3, [r4, #16]
   1d656:	4298      	cmp	r0, r3
   1d658:	d802      	bhi.n	1d660 <__sfvwrite_r+0x1a8>
   1d65a:	6963      	ldr	r3, [r4, #20]
   1d65c:	429f      	cmp	r7, r3
   1d65e:	d25d      	bcs.n	1d71c <__sfvwrite_r+0x264>
   1d660:	45b8      	cmp	r8, r7
   1d662:	bf28      	it	cs
   1d664:	46b8      	movcs	r8, r7
   1d666:	4642      	mov	r2, r8
   1d668:	4649      	mov	r1, r9
   1d66a:	f000 fd43 	bl	1e0f4 <memmove>
   1d66e:	68a3      	ldr	r3, [r4, #8]
   1d670:	6822      	ldr	r2, [r4, #0]
   1d672:	eba3 0308 	sub.w	r3, r3, r8
   1d676:	4442      	add	r2, r8
   1d678:	60a3      	str	r3, [r4, #8]
   1d67a:	6022      	str	r2, [r4, #0]
   1d67c:	b10b      	cbz	r3, 1d682 <__sfvwrite_r+0x1ca>
   1d67e:	46c2      	mov	sl, r8
   1d680:	e779      	b.n	1d576 <__sfvwrite_r+0xbe>
   1d682:	4621      	mov	r1, r4
   1d684:	9800      	ldr	r0, [sp, #0]
   1d686:	f003 fe7d 	bl	21384 <_fflush_r>
   1d68a:	2800      	cmp	r0, #0
   1d68c:	d192      	bne.n	1d5b4 <__sfvwrite_r+0xfc>
   1d68e:	46c2      	mov	sl, r8
   1d690:	e771      	b.n	1d576 <__sfvwrite_r+0xbe>
   1d692:	465a      	mov	r2, fp
   1d694:	4629      	mov	r1, r5
   1d696:	f000 fd2d 	bl	1e0f4 <memmove>
   1d69a:	68a2      	ldr	r2, [r4, #8]
   1d69c:	6823      	ldr	r3, [r4, #0]
   1d69e:	eba2 020b 	sub.w	r2, r2, fp
   1d6a2:	445b      	add	r3, fp
   1d6a4:	60a2      	str	r2, [r4, #8]
   1d6a6:	6023      	str	r3, [r4, #0]
   1d6a8:	e7af      	b.n	1d60a <__sfvwrite_r+0x152>
   1d6aa:	6820      	ldr	r0, [r4, #0]
   1d6ac:	46b8      	mov	r8, r7
   1d6ae:	46ba      	mov	sl, r7
   1d6b0:	46bb      	mov	fp, r7
   1d6b2:	e755      	b.n	1d560 <__sfvwrite_r+0xa8>
   1d6b4:	6962      	ldr	r2, [r4, #20]
   1d6b6:	6820      	ldr	r0, [r4, #0]
   1d6b8:	6921      	ldr	r1, [r4, #16]
   1d6ba:	eb02 0842 	add.w	r8, r2, r2, lsl #1
   1d6be:	eba0 0a01 	sub.w	sl, r0, r1
   1d6c2:	eb08 78d8 	add.w	r8, r8, r8, lsr #31
   1d6c6:	f10a 0001 	add.w	r0, sl, #1
   1d6ca:	ea4f 0868 	mov.w	r8, r8, asr #1
   1d6ce:	4438      	add	r0, r7
   1d6d0:	4540      	cmp	r0, r8
   1d6d2:	4642      	mov	r2, r8
   1d6d4:	bf84      	itt	hi
   1d6d6:	4680      	movhi	r8, r0
   1d6d8:	4642      	movhi	r2, r8
   1d6da:	055b      	lsls	r3, r3, #21
   1d6dc:	d544      	bpl.n	1d768 <__sfvwrite_r+0x2b0>
   1d6de:	4611      	mov	r1, r2
   1d6e0:	9800      	ldr	r0, [sp, #0]
   1d6e2:	f000 f921 	bl	1d928 <_malloc_r>
   1d6e6:	4683      	mov	fp, r0
   1d6e8:	2800      	cmp	r0, #0
   1d6ea:	d055      	beq.n	1d798 <__sfvwrite_r+0x2e0>
   1d6ec:	4652      	mov	r2, sl
   1d6ee:	6921      	ldr	r1, [r4, #16]
   1d6f0:	f000 fc66 	bl	1dfc0 <memcpy>
   1d6f4:	89a3      	ldrh	r3, [r4, #12]
   1d6f6:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
   1d6fa:	f043 0380 	orr.w	r3, r3, #128	; 0x80
   1d6fe:	81a3      	strh	r3, [r4, #12]
   1d700:	eb0b 000a 	add.w	r0, fp, sl
   1d704:	eba8 030a 	sub.w	r3, r8, sl
   1d708:	f8c4 b010 	str.w	fp, [r4, #16]
   1d70c:	f8c4 8014 	str.w	r8, [r4, #20]
   1d710:	6020      	str	r0, [r4, #0]
   1d712:	60a3      	str	r3, [r4, #8]
   1d714:	46b8      	mov	r8, r7
   1d716:	46ba      	mov	sl, r7
   1d718:	46bb      	mov	fp, r7
   1d71a:	e721      	b.n	1d560 <__sfvwrite_r+0xa8>
   1d71c:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
   1d720:	42b9      	cmp	r1, r7
   1d722:	bf28      	it	cs
   1d724:	4639      	movcs	r1, r7
   1d726:	464a      	mov	r2, r9
   1d728:	fb91 f1f3 	sdiv	r1, r1, r3
   1d72c:	9800      	ldr	r0, [sp, #0]
   1d72e:	6a66      	ldr	r6, [r4, #36]	; 0x24
   1d730:	fb03 f301 	mul.w	r3, r3, r1
   1d734:	69e1      	ldr	r1, [r4, #28]
   1d736:	47b0      	blx	r6
   1d738:	f1b0 0a00 	subs.w	sl, r0, #0
   1d73c:	f73f af1b 	bgt.w	1d576 <__sfvwrite_r+0xbe>
   1d740:	e738      	b.n	1d5b4 <__sfvwrite_r+0xfc>
   1d742:	461a      	mov	r2, r3
   1d744:	4629      	mov	r1, r5
   1d746:	9301      	str	r3, [sp, #4]
   1d748:	f000 fcd4 	bl	1e0f4 <memmove>
   1d74c:	6822      	ldr	r2, [r4, #0]
   1d74e:	9b01      	ldr	r3, [sp, #4]
   1d750:	9800      	ldr	r0, [sp, #0]
   1d752:	441a      	add	r2, r3
   1d754:	6022      	str	r2, [r4, #0]
   1d756:	4621      	mov	r1, r4
   1d758:	f003 fe14 	bl	21384 <_fflush_r>
   1d75c:	9b01      	ldr	r3, [sp, #4]
   1d75e:	2800      	cmp	r0, #0
   1d760:	f47f af28 	bne.w	1d5b4 <__sfvwrite_r+0xfc>
   1d764:	461f      	mov	r7, r3
   1d766:	e750      	b.n	1d60a <__sfvwrite_r+0x152>
   1d768:	9800      	ldr	r0, [sp, #0]
   1d76a:	f000 fdc1 	bl	1e2f0 <_realloc_r>
   1d76e:	4683      	mov	fp, r0
   1d770:	2800      	cmp	r0, #0
   1d772:	d1c5      	bne.n	1d700 <__sfvwrite_r+0x248>
   1d774:	9d00      	ldr	r5, [sp, #0]
   1d776:	6921      	ldr	r1, [r4, #16]
   1d778:	4628      	mov	r0, r5
   1d77a:	f003 fefd 	bl	21578 <_free_r>
   1d77e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   1d782:	220c      	movs	r2, #12
   1d784:	f023 0380 	bic.w	r3, r3, #128	; 0x80
   1d788:	602a      	str	r2, [r5, #0]
   1d78a:	e715      	b.n	1d5b8 <__sfvwrite_r+0x100>
   1d78c:	f106 0901 	add.w	r9, r6, #1
   1d790:	e722      	b.n	1d5d8 <__sfvwrite_r+0x120>
   1d792:	f04f 30ff 	mov.w	r0, #4294967295
   1d796:	e6bf      	b.n	1d518 <__sfvwrite_r+0x60>
   1d798:	9a00      	ldr	r2, [sp, #0]
   1d79a:	230c      	movs	r3, #12
   1d79c:	6013      	str	r3, [r2, #0]
   1d79e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   1d7a2:	e709      	b.n	1d5b8 <__sfvwrite_r+0x100>
   1d7a4:	7ffffc00 	.word	0x7ffffc00

0001d7a8 <_fwrite_r>:
   1d7a8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1d7ac:	b086      	sub	sp, #24
   1d7ae:	fb02 f503 	mul.w	r5, r2, r3
   1d7b2:	4690      	mov	r8, r2
   1d7b4:	461e      	mov	r6, r3
   1d7b6:	aa01      	add	r2, sp, #4
   1d7b8:	2301      	movs	r3, #1
   1d7ba:	9101      	str	r1, [sp, #4]
   1d7bc:	9502      	str	r5, [sp, #8]
   1d7be:	9505      	str	r5, [sp, #20]
   1d7c0:	9203      	str	r2, [sp, #12]
   1d7c2:	9304      	str	r3, [sp, #16]
   1d7c4:	9c0c      	ldr	r4, [sp, #48]	; 0x30
   1d7c6:	4607      	mov	r7, r0
   1d7c8:	b110      	cbz	r0, 1d7d0 <_fwrite_r+0x28>
   1d7ca:	6b83      	ldr	r3, [r0, #56]	; 0x38
   1d7cc:	2b00      	cmp	r3, #0
   1d7ce:	d031      	beq.n	1d834 <_fwrite_r+0x8c>
   1d7d0:	6e63      	ldr	r3, [r4, #100]	; 0x64
   1d7d2:	f013 0f01 	tst.w	r3, #1
   1d7d6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   1d7da:	b29a      	uxth	r2, r3
   1d7dc:	d101      	bne.n	1d7e2 <_fwrite_r+0x3a>
   1d7de:	0591      	lsls	r1, r2, #22
   1d7e0:	d52b      	bpl.n	1d83a <_fwrite_r+0x92>
   1d7e2:	0492      	lsls	r2, r2, #18
   1d7e4:	d406      	bmi.n	1d7f4 <_fwrite_r+0x4c>
   1d7e6:	6e62      	ldr	r2, [r4, #100]	; 0x64
   1d7e8:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
   1d7ec:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
   1d7f0:	81a3      	strh	r3, [r4, #12]
   1d7f2:	6662      	str	r2, [r4, #100]	; 0x64
   1d7f4:	4638      	mov	r0, r7
   1d7f6:	aa03      	add	r2, sp, #12
   1d7f8:	4621      	mov	r1, r4
   1d7fa:	f7ff fe5d 	bl	1d4b8 <__sfvwrite_r>
   1d7fe:	6e63      	ldr	r3, [r4, #100]	; 0x64
   1d800:	b940      	cbnz	r0, 1d814 <_fwrite_r+0x6c>
   1d802:	07d8      	lsls	r0, r3, #31
   1d804:	d402      	bmi.n	1d80c <_fwrite_r+0x64>
   1d806:	89a3      	ldrh	r3, [r4, #12]
   1d808:	0599      	lsls	r1, r3, #22
   1d80a:	d51d      	bpl.n	1d848 <_fwrite_r+0xa0>
   1d80c:	4630      	mov	r0, r6
   1d80e:	b006      	add	sp, #24
   1d810:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   1d814:	07da      	lsls	r2, r3, #31
   1d816:	d506      	bpl.n	1d826 <_fwrite_r+0x7e>
   1d818:	9805      	ldr	r0, [sp, #20]
   1d81a:	1a2d      	subs	r5, r5, r0
   1d81c:	fbb5 f0f8 	udiv	r0, r5, r8
   1d820:	b006      	add	sp, #24
   1d822:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   1d826:	89a3      	ldrh	r3, [r4, #12]
   1d828:	059b      	lsls	r3, r3, #22
   1d82a:	d4f5      	bmi.n	1d818 <_fwrite_r+0x70>
   1d82c:	6da0      	ldr	r0, [r4, #88]	; 0x58
   1d82e:	f000 f869 	bl	1d904 <__retarget_lock_release_recursive>
   1d832:	e7f1      	b.n	1d818 <_fwrite_r+0x70>
   1d834:	f003 fdfe 	bl	21434 <__sinit>
   1d838:	e7ca      	b.n	1d7d0 <_fwrite_r+0x28>
   1d83a:	6da0      	ldr	r0, [r4, #88]	; 0x58
   1d83c:	f000 f860 	bl	1d900 <__retarget_lock_acquire_recursive>
   1d840:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   1d844:	b29a      	uxth	r2, r3
   1d846:	e7cc      	b.n	1d7e2 <_fwrite_r+0x3a>
   1d848:	6da0      	ldr	r0, [r4, #88]	; 0x58
   1d84a:	f000 f85b 	bl	1d904 <__retarget_lock_release_recursive>
   1d84e:	4630      	mov	r0, r6
   1d850:	e7e6      	b.n	1d820 <_fwrite_r+0x78>
   1d852:	bf00      	nop

0001d854 <fwrite>:
   1d854:	b510      	push	{r4, lr}
   1d856:	b082      	sub	sp, #8
   1d858:	4c05      	ldr	r4, [pc, #20]	; (1d870 <fwrite+0x1c>)
   1d85a:	9300      	str	r3, [sp, #0]
   1d85c:	6824      	ldr	r4, [r4, #0]
   1d85e:	4613      	mov	r3, r2
   1d860:	460a      	mov	r2, r1
   1d862:	4601      	mov	r1, r0
   1d864:	4620      	mov	r0, r4
   1d866:	f7ff ff9f 	bl	1d7a8 <_fwrite_r>
   1d86a:	b002      	add	sp, #8
   1d86c:	bd10      	pop	{r4, pc}
   1d86e:	bf00      	nop
   1d870:	20000100 	.word	0x20000100

0001d874 <__libc_init_array>:
   1d874:	b570      	push	{r4, r5, r6, lr}
   1d876:	4e0f      	ldr	r6, [pc, #60]	; (1d8b4 <__libc_init_array+0x40>)
   1d878:	4d0f      	ldr	r5, [pc, #60]	; (1d8b8 <__libc_init_array+0x44>)
   1d87a:	1b76      	subs	r6, r6, r5
   1d87c:	10b6      	asrs	r6, r6, #2
   1d87e:	bf18      	it	ne
   1d880:	2400      	movne	r4, #0
   1d882:	d005      	beq.n	1d890 <__libc_init_array+0x1c>
   1d884:	3401      	adds	r4, #1
   1d886:	f855 3b04 	ldr.w	r3, [r5], #4
   1d88a:	4798      	blx	r3
   1d88c:	42a6      	cmp	r6, r4
   1d88e:	d1f9      	bne.n	1d884 <__libc_init_array+0x10>
   1d890:	4e0a      	ldr	r6, [pc, #40]	; (1d8bc <__libc_init_array+0x48>)
   1d892:	4d0b      	ldr	r5, [pc, #44]	; (1d8c0 <__libc_init_array+0x4c>)
   1d894:	1b76      	subs	r6, r6, r5
   1d896:	f004 fec7 	bl	22628 <_init>
   1d89a:	10b6      	asrs	r6, r6, #2
   1d89c:	bf18      	it	ne
   1d89e:	2400      	movne	r4, #0
   1d8a0:	d006      	beq.n	1d8b0 <__libc_init_array+0x3c>
   1d8a2:	3401      	adds	r4, #1
   1d8a4:	f855 3b04 	ldr.w	r3, [r5], #4
   1d8a8:	4798      	blx	r3
   1d8aa:	42a6      	cmp	r6, r4
   1d8ac:	d1f9      	bne.n	1d8a2 <__libc_init_array+0x2e>
   1d8ae:	bd70      	pop	{r4, r5, r6, pc}
   1d8b0:	bd70      	pop	{r4, r5, r6, pc}
   1d8b2:	bf00      	nop
   1d8b4:	00022640 	.word	0x00022640
   1d8b8:	00022640 	.word	0x00022640
   1d8bc:	00022678 	.word	0x00022678
   1d8c0:	00022640 	.word	0x00022640

0001d8c4 <__itoa>:
   1d8c4:	1e93      	subs	r3, r2, #2
   1d8c6:	2b22      	cmp	r3, #34	; 0x22
   1d8c8:	d810      	bhi.n	1d8ec <__itoa+0x28>
   1d8ca:	2a0a      	cmp	r2, #10
   1d8cc:	b510      	push	{r4, lr}
   1d8ce:	d006      	beq.n	1d8de <__itoa+0x1a>
   1d8d0:	2300      	movs	r3, #0
   1d8d2:	460c      	mov	r4, r1
   1d8d4:	4419      	add	r1, r3
   1d8d6:	f002 fbc9 	bl	2006c <__utoa>
   1d8da:	4620      	mov	r0, r4
   1d8dc:	bd10      	pop	{r4, pc}
   1d8de:	2800      	cmp	r0, #0
   1d8e0:	daf6      	bge.n	1d8d0 <__itoa+0xc>
   1d8e2:	232d      	movs	r3, #45	; 0x2d
   1d8e4:	700b      	strb	r3, [r1, #0]
   1d8e6:	4240      	negs	r0, r0
   1d8e8:	2301      	movs	r3, #1
   1d8ea:	e7f2      	b.n	1d8d2 <__itoa+0xe>
   1d8ec:	2000      	movs	r0, #0
   1d8ee:	7008      	strb	r0, [r1, #0]
   1d8f0:	4770      	bx	lr
   1d8f2:	bf00      	nop

0001d8f4 <itoa>:
   1d8f4:	f7ff bfe6 	b.w	1d8c4 <__itoa>

0001d8f8 <__retarget_lock_init_recursive>:
   1d8f8:	4770      	bx	lr
   1d8fa:	bf00      	nop

0001d8fc <__retarget_lock_close_recursive>:
   1d8fc:	4770      	bx	lr
   1d8fe:	bf00      	nop

0001d900 <__retarget_lock_acquire_recursive>:
   1d900:	4770      	bx	lr
   1d902:	bf00      	nop

0001d904 <__retarget_lock_release_recursive>:
   1d904:	4770      	bx	lr
   1d906:	bf00      	nop

0001d908 <malloc>:
   1d908:	4b02      	ldr	r3, [pc, #8]	; (1d914 <malloc+0xc>)
   1d90a:	4601      	mov	r1, r0
   1d90c:	6818      	ldr	r0, [r3, #0]
   1d90e:	f000 b80b 	b.w	1d928 <_malloc_r>
   1d912:	bf00      	nop
   1d914:	20000100 	.word	0x20000100

0001d918 <free>:
   1d918:	4b02      	ldr	r3, [pc, #8]	; (1d924 <free+0xc>)
   1d91a:	4601      	mov	r1, r0
   1d91c:	6818      	ldr	r0, [r3, #0]
   1d91e:	f003 be2b 	b.w	21578 <_free_r>
   1d922:	bf00      	nop
   1d924:	20000100 	.word	0x20000100

0001d928 <_malloc_r>:
   1d928:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1d92c:	f101 060b 	add.w	r6, r1, #11
   1d930:	2e16      	cmp	r6, #22
   1d932:	b083      	sub	sp, #12
   1d934:	4605      	mov	r5, r0
   1d936:	f240 809e 	bls.w	1da76 <_malloc_r+0x14e>
   1d93a:	f036 0607 	bics.w	r6, r6, #7
   1d93e:	f100 80bd 	bmi.w	1dabc <_malloc_r+0x194>
   1d942:	42b1      	cmp	r1, r6
   1d944:	f200 80ba 	bhi.w	1dabc <_malloc_r+0x194>
   1d948:	f000 fc86 	bl	1e258 <__malloc_lock>
   1d94c:	f5b6 7ffc 	cmp.w	r6, #504	; 0x1f8
   1d950:	f0c0 8293 	bcc.w	1de7a <_malloc_r+0x552>
   1d954:	0a73      	lsrs	r3, r6, #9
   1d956:	f000 80b8 	beq.w	1daca <_malloc_r+0x1a2>
   1d95a:	2b04      	cmp	r3, #4
   1d95c:	f200 8179 	bhi.w	1dc52 <_malloc_r+0x32a>
   1d960:	09b3      	lsrs	r3, r6, #6
   1d962:	f103 0039 	add.w	r0, r3, #57	; 0x39
   1d966:	f103 0e38 	add.w	lr, r3, #56	; 0x38
   1d96a:	00c3      	lsls	r3, r0, #3
   1d96c:	4fbf      	ldr	r7, [pc, #764]	; (1dc6c <_malloc_r+0x344>)
   1d96e:	443b      	add	r3, r7
   1d970:	f1a3 0108 	sub.w	r1, r3, #8
   1d974:	685c      	ldr	r4, [r3, #4]
   1d976:	42a1      	cmp	r1, r4
   1d978:	d106      	bne.n	1d988 <_malloc_r+0x60>
   1d97a:	e00c      	b.n	1d996 <_malloc_r+0x6e>
   1d97c:	2a00      	cmp	r2, #0
   1d97e:	f280 80aa 	bge.w	1dad6 <_malloc_r+0x1ae>
   1d982:	68e4      	ldr	r4, [r4, #12]
   1d984:	42a1      	cmp	r1, r4
   1d986:	d006      	beq.n	1d996 <_malloc_r+0x6e>
   1d988:	6863      	ldr	r3, [r4, #4]
   1d98a:	f023 0303 	bic.w	r3, r3, #3
   1d98e:	1b9a      	subs	r2, r3, r6
   1d990:	2a0f      	cmp	r2, #15
   1d992:	ddf3      	ble.n	1d97c <_malloc_r+0x54>
   1d994:	4670      	mov	r0, lr
   1d996:	693c      	ldr	r4, [r7, #16]
   1d998:	f8df e2e4 	ldr.w	lr, [pc, #740]	; 1dc80 <_malloc_r+0x358>
   1d99c:	4574      	cmp	r4, lr
   1d99e:	f000 81ab 	beq.w	1dcf8 <_malloc_r+0x3d0>
   1d9a2:	6863      	ldr	r3, [r4, #4]
   1d9a4:	f023 0303 	bic.w	r3, r3, #3
   1d9a8:	1b9a      	subs	r2, r3, r6
   1d9aa:	2a0f      	cmp	r2, #15
   1d9ac:	f300 8190 	bgt.w	1dcd0 <_malloc_r+0x3a8>
   1d9b0:	2a00      	cmp	r2, #0
   1d9b2:	f8c7 e014 	str.w	lr, [r7, #20]
   1d9b6:	f8c7 e010 	str.w	lr, [r7, #16]
   1d9ba:	f280 809d 	bge.w	1daf8 <_malloc_r+0x1d0>
   1d9be:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
   1d9c2:	f080 8161 	bcs.w	1dc88 <_malloc_r+0x360>
   1d9c6:	08db      	lsrs	r3, r3, #3
   1d9c8:	f103 0c01 	add.w	ip, r3, #1
   1d9cc:	1099      	asrs	r1, r3, #2
   1d9ce:	687a      	ldr	r2, [r7, #4]
   1d9d0:	f857 803c 	ldr.w	r8, [r7, ip, lsl #3]
   1d9d4:	f8c4 8008 	str.w	r8, [r4, #8]
   1d9d8:	2301      	movs	r3, #1
   1d9da:	408b      	lsls	r3, r1
   1d9dc:	eb07 01cc 	add.w	r1, r7, ip, lsl #3
   1d9e0:	4313      	orrs	r3, r2
   1d9e2:	3908      	subs	r1, #8
   1d9e4:	60e1      	str	r1, [r4, #12]
   1d9e6:	607b      	str	r3, [r7, #4]
   1d9e8:	f847 403c 	str.w	r4, [r7, ip, lsl #3]
   1d9ec:	f8c8 400c 	str.w	r4, [r8, #12]
   1d9f0:	1082      	asrs	r2, r0, #2
   1d9f2:	2401      	movs	r4, #1
   1d9f4:	4094      	lsls	r4, r2
   1d9f6:	429c      	cmp	r4, r3
   1d9f8:	f200 808b 	bhi.w	1db12 <_malloc_r+0x1ea>
   1d9fc:	421c      	tst	r4, r3
   1d9fe:	d106      	bne.n	1da0e <_malloc_r+0xe6>
   1da00:	f020 0003 	bic.w	r0, r0, #3
   1da04:	0064      	lsls	r4, r4, #1
   1da06:	421c      	tst	r4, r3
   1da08:	f100 0004 	add.w	r0, r0, #4
   1da0c:	d0fa      	beq.n	1da04 <_malloc_r+0xdc>
   1da0e:	eb07 09c0 	add.w	r9, r7, r0, lsl #3
   1da12:	46cc      	mov	ip, r9
   1da14:	4680      	mov	r8, r0
   1da16:	f8dc 300c 	ldr.w	r3, [ip, #12]
   1da1a:	459c      	cmp	ip, r3
   1da1c:	d107      	bne.n	1da2e <_malloc_r+0x106>
   1da1e:	e16d      	b.n	1dcfc <_malloc_r+0x3d4>
   1da20:	2a00      	cmp	r2, #0
   1da22:	f280 817b 	bge.w	1dd1c <_malloc_r+0x3f4>
   1da26:	68db      	ldr	r3, [r3, #12]
   1da28:	459c      	cmp	ip, r3
   1da2a:	f000 8167 	beq.w	1dcfc <_malloc_r+0x3d4>
   1da2e:	6859      	ldr	r1, [r3, #4]
   1da30:	f021 0103 	bic.w	r1, r1, #3
   1da34:	1b8a      	subs	r2, r1, r6
   1da36:	2a0f      	cmp	r2, #15
   1da38:	ddf2      	ble.n	1da20 <_malloc_r+0xf8>
   1da3a:	f8d3 c00c 	ldr.w	ip, [r3, #12]
   1da3e:	f8d3 8008 	ldr.w	r8, [r3, #8]
   1da42:	9300      	str	r3, [sp, #0]
   1da44:	199c      	adds	r4, r3, r6
   1da46:	4628      	mov	r0, r5
   1da48:	f046 0601 	orr.w	r6, r6, #1
   1da4c:	f042 0501 	orr.w	r5, r2, #1
   1da50:	605e      	str	r6, [r3, #4]
   1da52:	f8c8 c00c 	str.w	ip, [r8, #12]
   1da56:	f8cc 8008 	str.w	r8, [ip, #8]
   1da5a:	617c      	str	r4, [r7, #20]
   1da5c:	613c      	str	r4, [r7, #16]
   1da5e:	f8c4 e00c 	str.w	lr, [r4, #12]
   1da62:	f8c4 e008 	str.w	lr, [r4, #8]
   1da66:	6065      	str	r5, [r4, #4]
   1da68:	505a      	str	r2, [r3, r1]
   1da6a:	f000 fbfb 	bl	1e264 <__malloc_unlock>
   1da6e:	9b00      	ldr	r3, [sp, #0]
   1da70:	f103 0408 	add.w	r4, r3, #8
   1da74:	e01e      	b.n	1dab4 <_malloc_r+0x18c>
   1da76:	2910      	cmp	r1, #16
   1da78:	d820      	bhi.n	1dabc <_malloc_r+0x194>
   1da7a:	f000 fbed 	bl	1e258 <__malloc_lock>
   1da7e:	2610      	movs	r6, #16
   1da80:	2318      	movs	r3, #24
   1da82:	2002      	movs	r0, #2
   1da84:	4f79      	ldr	r7, [pc, #484]	; (1dc6c <_malloc_r+0x344>)
   1da86:	443b      	add	r3, r7
   1da88:	f1a3 0208 	sub.w	r2, r3, #8
   1da8c:	685c      	ldr	r4, [r3, #4]
   1da8e:	4294      	cmp	r4, r2
   1da90:	f000 813d 	beq.w	1dd0e <_malloc_r+0x3e6>
   1da94:	6863      	ldr	r3, [r4, #4]
   1da96:	68e1      	ldr	r1, [r4, #12]
   1da98:	68a6      	ldr	r6, [r4, #8]
   1da9a:	f023 0303 	bic.w	r3, r3, #3
   1da9e:	4423      	add	r3, r4
   1daa0:	4628      	mov	r0, r5
   1daa2:	685a      	ldr	r2, [r3, #4]
   1daa4:	60f1      	str	r1, [r6, #12]
   1daa6:	f042 0201 	orr.w	r2, r2, #1
   1daaa:	608e      	str	r6, [r1, #8]
   1daac:	605a      	str	r2, [r3, #4]
   1daae:	f000 fbd9 	bl	1e264 <__malloc_unlock>
   1dab2:	3408      	adds	r4, #8
   1dab4:	4620      	mov	r0, r4
   1dab6:	b003      	add	sp, #12
   1dab8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1dabc:	2400      	movs	r4, #0
   1dabe:	230c      	movs	r3, #12
   1dac0:	4620      	mov	r0, r4
   1dac2:	602b      	str	r3, [r5, #0]
   1dac4:	b003      	add	sp, #12
   1dac6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1daca:	2040      	movs	r0, #64	; 0x40
   1dacc:	f44f 7300 	mov.w	r3, #512	; 0x200
   1dad0:	f04f 0e3f 	mov.w	lr, #63	; 0x3f
   1dad4:	e74a      	b.n	1d96c <_malloc_r+0x44>
   1dad6:	4423      	add	r3, r4
   1dad8:	68e1      	ldr	r1, [r4, #12]
   1dada:	685a      	ldr	r2, [r3, #4]
   1dadc:	68a6      	ldr	r6, [r4, #8]
   1dade:	f042 0201 	orr.w	r2, r2, #1
   1dae2:	60f1      	str	r1, [r6, #12]
   1dae4:	4628      	mov	r0, r5
   1dae6:	608e      	str	r6, [r1, #8]
   1dae8:	605a      	str	r2, [r3, #4]
   1daea:	f000 fbbb 	bl	1e264 <__malloc_unlock>
   1daee:	3408      	adds	r4, #8
   1daf0:	4620      	mov	r0, r4
   1daf2:	b003      	add	sp, #12
   1daf4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1daf8:	4423      	add	r3, r4
   1dafa:	4628      	mov	r0, r5
   1dafc:	685a      	ldr	r2, [r3, #4]
   1dafe:	f042 0201 	orr.w	r2, r2, #1
   1db02:	605a      	str	r2, [r3, #4]
   1db04:	f000 fbae 	bl	1e264 <__malloc_unlock>
   1db08:	3408      	adds	r4, #8
   1db0a:	4620      	mov	r0, r4
   1db0c:	b003      	add	sp, #12
   1db0e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1db12:	68bc      	ldr	r4, [r7, #8]
   1db14:	6863      	ldr	r3, [r4, #4]
   1db16:	f023 0803 	bic.w	r8, r3, #3
   1db1a:	45b0      	cmp	r8, r6
   1db1c:	d304      	bcc.n	1db28 <_malloc_r+0x200>
   1db1e:	eba8 0306 	sub.w	r3, r8, r6
   1db22:	2b0f      	cmp	r3, #15
   1db24:	f300 8085 	bgt.w	1dc32 <_malloc_r+0x30a>
   1db28:	f8df 9158 	ldr.w	r9, [pc, #344]	; 1dc84 <_malloc_r+0x35c>
   1db2c:	4b50      	ldr	r3, [pc, #320]	; (1dc70 <_malloc_r+0x348>)
   1db2e:	f8d9 2000 	ldr.w	r2, [r9]
   1db32:	681b      	ldr	r3, [r3, #0]
   1db34:	3201      	adds	r2, #1
   1db36:	4433      	add	r3, r6
   1db38:	eb04 0a08 	add.w	sl, r4, r8
   1db3c:	f000 8155 	beq.w	1ddea <_malloc_r+0x4c2>
   1db40:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
   1db44:	330f      	adds	r3, #15
   1db46:	f423 6b7f 	bic.w	fp, r3, #4080	; 0xff0
   1db4a:	f02b 0b0f 	bic.w	fp, fp, #15
   1db4e:	4659      	mov	r1, fp
   1db50:	4628      	mov	r0, r5
   1db52:	f000 fd73 	bl	1e63c <_sbrk_r>
   1db56:	1c41      	adds	r1, r0, #1
   1db58:	4602      	mov	r2, r0
   1db5a:	f000 80fc 	beq.w	1dd56 <_malloc_r+0x42e>
   1db5e:	4582      	cmp	sl, r0
   1db60:	f200 80f7 	bhi.w	1dd52 <_malloc_r+0x42a>
   1db64:	4b43      	ldr	r3, [pc, #268]	; (1dc74 <_malloc_r+0x34c>)
   1db66:	6819      	ldr	r1, [r3, #0]
   1db68:	4459      	add	r1, fp
   1db6a:	6019      	str	r1, [r3, #0]
   1db6c:	f000 814d 	beq.w	1de0a <_malloc_r+0x4e2>
   1db70:	f8d9 0000 	ldr.w	r0, [r9]
   1db74:	3001      	adds	r0, #1
   1db76:	bf1b      	ittet	ne
   1db78:	eba2 0a0a 	subne.w	sl, r2, sl
   1db7c:	4451      	addne	r1, sl
   1db7e:	f8c9 2000 	streq.w	r2, [r9]
   1db82:	6019      	strne	r1, [r3, #0]
   1db84:	f012 0107 	ands.w	r1, r2, #7
   1db88:	f000 8115 	beq.w	1ddb6 <_malloc_r+0x48e>
   1db8c:	f1c1 0008 	rsb	r0, r1, #8
   1db90:	f5c1 5180 	rsb	r1, r1, #4096	; 0x1000
   1db94:	4402      	add	r2, r0
   1db96:	3108      	adds	r1, #8
   1db98:	eb02 090b 	add.w	r9, r2, fp
   1db9c:	f3c9 090b 	ubfx	r9, r9, #0, #12
   1dba0:	eba1 0909 	sub.w	r9, r1, r9
   1dba4:	4649      	mov	r1, r9
   1dba6:	4628      	mov	r0, r5
   1dba8:	9301      	str	r3, [sp, #4]
   1dbaa:	9200      	str	r2, [sp, #0]
   1dbac:	f000 fd46 	bl	1e63c <_sbrk_r>
   1dbb0:	1c43      	adds	r3, r0, #1
   1dbb2:	e89d 000c 	ldmia.w	sp, {r2, r3}
   1dbb6:	f000 8143 	beq.w	1de40 <_malloc_r+0x518>
   1dbba:	1a80      	subs	r0, r0, r2
   1dbbc:	4448      	add	r0, r9
   1dbbe:	f040 0001 	orr.w	r0, r0, #1
   1dbc2:	6819      	ldr	r1, [r3, #0]
   1dbc4:	60ba      	str	r2, [r7, #8]
   1dbc6:	4449      	add	r1, r9
   1dbc8:	42bc      	cmp	r4, r7
   1dbca:	6050      	str	r0, [r2, #4]
   1dbcc:	6019      	str	r1, [r3, #0]
   1dbce:	d017      	beq.n	1dc00 <_malloc_r+0x2d8>
   1dbd0:	f1b8 0f0f 	cmp.w	r8, #15
   1dbd4:	f240 80fb 	bls.w	1ddce <_malloc_r+0x4a6>
   1dbd8:	6860      	ldr	r0, [r4, #4]
   1dbda:	f1a8 020c 	sub.w	r2, r8, #12
   1dbde:	f022 0207 	bic.w	r2, r2, #7
   1dbe2:	eb04 0e02 	add.w	lr, r4, r2
   1dbe6:	f000 0001 	and.w	r0, r0, #1
   1dbea:	f04f 0c05 	mov.w	ip, #5
   1dbee:	4310      	orrs	r0, r2
   1dbf0:	2a0f      	cmp	r2, #15
   1dbf2:	6060      	str	r0, [r4, #4]
   1dbf4:	f8ce c004 	str.w	ip, [lr, #4]
   1dbf8:	f8ce c008 	str.w	ip, [lr, #8]
   1dbfc:	f200 8117 	bhi.w	1de2e <_malloc_r+0x506>
   1dc00:	4b1d      	ldr	r3, [pc, #116]	; (1dc78 <_malloc_r+0x350>)
   1dc02:	68bc      	ldr	r4, [r7, #8]
   1dc04:	681a      	ldr	r2, [r3, #0]
   1dc06:	4291      	cmp	r1, r2
   1dc08:	bf88      	it	hi
   1dc0a:	6019      	strhi	r1, [r3, #0]
   1dc0c:	4b1b      	ldr	r3, [pc, #108]	; (1dc7c <_malloc_r+0x354>)
   1dc0e:	681a      	ldr	r2, [r3, #0]
   1dc10:	4291      	cmp	r1, r2
   1dc12:	6862      	ldr	r2, [r4, #4]
   1dc14:	bf88      	it	hi
   1dc16:	6019      	strhi	r1, [r3, #0]
   1dc18:	f022 0203 	bic.w	r2, r2, #3
   1dc1c:	4296      	cmp	r6, r2
   1dc1e:	eba2 0306 	sub.w	r3, r2, r6
   1dc22:	d801      	bhi.n	1dc28 <_malloc_r+0x300>
   1dc24:	2b0f      	cmp	r3, #15
   1dc26:	dc04      	bgt.n	1dc32 <_malloc_r+0x30a>
   1dc28:	4628      	mov	r0, r5
   1dc2a:	f000 fb1b 	bl	1e264 <__malloc_unlock>
   1dc2e:	2400      	movs	r4, #0
   1dc30:	e740      	b.n	1dab4 <_malloc_r+0x18c>
   1dc32:	19a2      	adds	r2, r4, r6
   1dc34:	f043 0301 	orr.w	r3, r3, #1
   1dc38:	f046 0601 	orr.w	r6, r6, #1
   1dc3c:	6066      	str	r6, [r4, #4]
   1dc3e:	4628      	mov	r0, r5
   1dc40:	60ba      	str	r2, [r7, #8]
   1dc42:	6053      	str	r3, [r2, #4]
   1dc44:	f000 fb0e 	bl	1e264 <__malloc_unlock>
   1dc48:	3408      	adds	r4, #8
   1dc4a:	4620      	mov	r0, r4
   1dc4c:	b003      	add	sp, #12
   1dc4e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1dc52:	2b14      	cmp	r3, #20
   1dc54:	d971      	bls.n	1dd3a <_malloc_r+0x412>
   1dc56:	2b54      	cmp	r3, #84	; 0x54
   1dc58:	f200 80a3 	bhi.w	1dda2 <_malloc_r+0x47a>
   1dc5c:	0b33      	lsrs	r3, r6, #12
   1dc5e:	f103 006f 	add.w	r0, r3, #111	; 0x6f
   1dc62:	f103 0e6e 	add.w	lr, r3, #110	; 0x6e
   1dc66:	00c3      	lsls	r3, r0, #3
   1dc68:	e680      	b.n	1d96c <_malloc_r+0x44>
   1dc6a:	bf00      	nop
   1dc6c:	2000069c 	.word	0x2000069c
   1dc70:	200022d8 	.word	0x200022d8
   1dc74:	200022a8 	.word	0x200022a8
   1dc78:	200022d0 	.word	0x200022d0
   1dc7c:	200022d4 	.word	0x200022d4
   1dc80:	200006a4 	.word	0x200006a4
   1dc84:	20000aa4 	.word	0x20000aa4
   1dc88:	0a5a      	lsrs	r2, r3, #9
   1dc8a:	2a04      	cmp	r2, #4
   1dc8c:	d95b      	bls.n	1dd46 <_malloc_r+0x41e>
   1dc8e:	2a14      	cmp	r2, #20
   1dc90:	f200 80ae 	bhi.w	1ddf0 <_malloc_r+0x4c8>
   1dc94:	f102 015c 	add.w	r1, r2, #92	; 0x5c
   1dc98:	00c9      	lsls	r1, r1, #3
   1dc9a:	325b      	adds	r2, #91	; 0x5b
   1dc9c:	eb07 0c01 	add.w	ip, r7, r1
   1dca0:	5879      	ldr	r1, [r7, r1]
   1dca2:	f1ac 0c08 	sub.w	ip, ip, #8
   1dca6:	458c      	cmp	ip, r1
   1dca8:	f000 8088 	beq.w	1ddbc <_malloc_r+0x494>
   1dcac:	684a      	ldr	r2, [r1, #4]
   1dcae:	f022 0203 	bic.w	r2, r2, #3
   1dcb2:	4293      	cmp	r3, r2
   1dcb4:	d273      	bcs.n	1dd9e <_malloc_r+0x476>
   1dcb6:	6889      	ldr	r1, [r1, #8]
   1dcb8:	458c      	cmp	ip, r1
   1dcba:	d1f7      	bne.n	1dcac <_malloc_r+0x384>
   1dcbc:	f8dc 200c 	ldr.w	r2, [ip, #12]
   1dcc0:	687b      	ldr	r3, [r7, #4]
   1dcc2:	60e2      	str	r2, [r4, #12]
   1dcc4:	f8c4 c008 	str.w	ip, [r4, #8]
   1dcc8:	6094      	str	r4, [r2, #8]
   1dcca:	f8cc 400c 	str.w	r4, [ip, #12]
   1dcce:	e68f      	b.n	1d9f0 <_malloc_r+0xc8>
   1dcd0:	19a1      	adds	r1, r4, r6
   1dcd2:	f046 0c01 	orr.w	ip, r6, #1
   1dcd6:	f042 0601 	orr.w	r6, r2, #1
   1dcda:	f8c4 c004 	str.w	ip, [r4, #4]
   1dcde:	4628      	mov	r0, r5
   1dce0:	6179      	str	r1, [r7, #20]
   1dce2:	6139      	str	r1, [r7, #16]
   1dce4:	f8c1 e00c 	str.w	lr, [r1, #12]
   1dce8:	f8c1 e008 	str.w	lr, [r1, #8]
   1dcec:	604e      	str	r6, [r1, #4]
   1dcee:	50e2      	str	r2, [r4, r3]
   1dcf0:	f000 fab8 	bl	1e264 <__malloc_unlock>
   1dcf4:	3408      	adds	r4, #8
   1dcf6:	e6dd      	b.n	1dab4 <_malloc_r+0x18c>
   1dcf8:	687b      	ldr	r3, [r7, #4]
   1dcfa:	e679      	b.n	1d9f0 <_malloc_r+0xc8>
   1dcfc:	f108 0801 	add.w	r8, r8, #1
   1dd00:	f018 0f03 	tst.w	r8, #3
   1dd04:	f10c 0c08 	add.w	ip, ip, #8
   1dd08:	f47f ae85 	bne.w	1da16 <_malloc_r+0xee>
   1dd0c:	e02d      	b.n	1dd6a <_malloc_r+0x442>
   1dd0e:	68dc      	ldr	r4, [r3, #12]
   1dd10:	42a3      	cmp	r3, r4
   1dd12:	bf08      	it	eq
   1dd14:	3002      	addeq	r0, #2
   1dd16:	f43f ae3e 	beq.w	1d996 <_malloc_r+0x6e>
   1dd1a:	e6bb      	b.n	1da94 <_malloc_r+0x16c>
   1dd1c:	4419      	add	r1, r3
   1dd1e:	461c      	mov	r4, r3
   1dd20:	684a      	ldr	r2, [r1, #4]
   1dd22:	68db      	ldr	r3, [r3, #12]
   1dd24:	f854 6f08 	ldr.w	r6, [r4, #8]!
   1dd28:	f042 0201 	orr.w	r2, r2, #1
   1dd2c:	604a      	str	r2, [r1, #4]
   1dd2e:	4628      	mov	r0, r5
   1dd30:	60f3      	str	r3, [r6, #12]
   1dd32:	609e      	str	r6, [r3, #8]
   1dd34:	f000 fa96 	bl	1e264 <__malloc_unlock>
   1dd38:	e6bc      	b.n	1dab4 <_malloc_r+0x18c>
   1dd3a:	f103 005c 	add.w	r0, r3, #92	; 0x5c
   1dd3e:	f103 0e5b 	add.w	lr, r3, #91	; 0x5b
   1dd42:	00c3      	lsls	r3, r0, #3
   1dd44:	e612      	b.n	1d96c <_malloc_r+0x44>
   1dd46:	099a      	lsrs	r2, r3, #6
   1dd48:	f102 0139 	add.w	r1, r2, #57	; 0x39
   1dd4c:	00c9      	lsls	r1, r1, #3
   1dd4e:	3238      	adds	r2, #56	; 0x38
   1dd50:	e7a4      	b.n	1dc9c <_malloc_r+0x374>
   1dd52:	42bc      	cmp	r4, r7
   1dd54:	d054      	beq.n	1de00 <_malloc_r+0x4d8>
   1dd56:	68bc      	ldr	r4, [r7, #8]
   1dd58:	6862      	ldr	r2, [r4, #4]
   1dd5a:	f022 0203 	bic.w	r2, r2, #3
   1dd5e:	e75d      	b.n	1dc1c <_malloc_r+0x2f4>
   1dd60:	f859 3908 	ldr.w	r3, [r9], #-8
   1dd64:	4599      	cmp	r9, r3
   1dd66:	f040 8086 	bne.w	1de76 <_malloc_r+0x54e>
   1dd6a:	f010 0f03 	tst.w	r0, #3
   1dd6e:	f100 30ff 	add.w	r0, r0, #4294967295
   1dd72:	d1f5      	bne.n	1dd60 <_malloc_r+0x438>
   1dd74:	687b      	ldr	r3, [r7, #4]
   1dd76:	ea23 0304 	bic.w	r3, r3, r4
   1dd7a:	607b      	str	r3, [r7, #4]
   1dd7c:	0064      	lsls	r4, r4, #1
   1dd7e:	429c      	cmp	r4, r3
   1dd80:	f63f aec7 	bhi.w	1db12 <_malloc_r+0x1ea>
   1dd84:	2c00      	cmp	r4, #0
   1dd86:	f43f aec4 	beq.w	1db12 <_malloc_r+0x1ea>
   1dd8a:	421c      	tst	r4, r3
   1dd8c:	4640      	mov	r0, r8
   1dd8e:	f47f ae3e 	bne.w	1da0e <_malloc_r+0xe6>
   1dd92:	0064      	lsls	r4, r4, #1
   1dd94:	421c      	tst	r4, r3
   1dd96:	f100 0004 	add.w	r0, r0, #4
   1dd9a:	d0fa      	beq.n	1dd92 <_malloc_r+0x46a>
   1dd9c:	e637      	b.n	1da0e <_malloc_r+0xe6>
   1dd9e:	468c      	mov	ip, r1
   1dda0:	e78c      	b.n	1dcbc <_malloc_r+0x394>
   1dda2:	f5b3 7faa 	cmp.w	r3, #340	; 0x154
   1dda6:	d815      	bhi.n	1ddd4 <_malloc_r+0x4ac>
   1dda8:	0bf3      	lsrs	r3, r6, #15
   1ddaa:	f103 0078 	add.w	r0, r3, #120	; 0x78
   1ddae:	f103 0e77 	add.w	lr, r3, #119	; 0x77
   1ddb2:	00c3      	lsls	r3, r0, #3
   1ddb4:	e5da      	b.n	1d96c <_malloc_r+0x44>
   1ddb6:	f44f 5180 	mov.w	r1, #4096	; 0x1000
   1ddba:	e6ed      	b.n	1db98 <_malloc_r+0x270>
   1ddbc:	687b      	ldr	r3, [r7, #4]
   1ddbe:	1092      	asrs	r2, r2, #2
   1ddc0:	2101      	movs	r1, #1
   1ddc2:	fa01 f202 	lsl.w	r2, r1, r2
   1ddc6:	4313      	orrs	r3, r2
   1ddc8:	607b      	str	r3, [r7, #4]
   1ddca:	4662      	mov	r2, ip
   1ddcc:	e779      	b.n	1dcc2 <_malloc_r+0x39a>
   1ddce:	2301      	movs	r3, #1
   1ddd0:	6053      	str	r3, [r2, #4]
   1ddd2:	e729      	b.n	1dc28 <_malloc_r+0x300>
   1ddd4:	f240 5254 	movw	r2, #1364	; 0x554
   1ddd8:	4293      	cmp	r3, r2
   1ddda:	d822      	bhi.n	1de22 <_malloc_r+0x4fa>
   1dddc:	0cb3      	lsrs	r3, r6, #18
   1ddde:	f103 007d 	add.w	r0, r3, #125	; 0x7d
   1dde2:	f103 0e7c 	add.w	lr, r3, #124	; 0x7c
   1dde6:	00c3      	lsls	r3, r0, #3
   1dde8:	e5c0      	b.n	1d96c <_malloc_r+0x44>
   1ddea:	f103 0b10 	add.w	fp, r3, #16
   1ddee:	e6ae      	b.n	1db4e <_malloc_r+0x226>
   1ddf0:	2a54      	cmp	r2, #84	; 0x54
   1ddf2:	d829      	bhi.n	1de48 <_malloc_r+0x520>
   1ddf4:	0b1a      	lsrs	r2, r3, #12
   1ddf6:	f102 016f 	add.w	r1, r2, #111	; 0x6f
   1ddfa:	00c9      	lsls	r1, r1, #3
   1ddfc:	326e      	adds	r2, #110	; 0x6e
   1ddfe:	e74d      	b.n	1dc9c <_malloc_r+0x374>
   1de00:	4b20      	ldr	r3, [pc, #128]	; (1de84 <_malloc_r+0x55c>)
   1de02:	6819      	ldr	r1, [r3, #0]
   1de04:	4459      	add	r1, fp
   1de06:	6019      	str	r1, [r3, #0]
   1de08:	e6b2      	b.n	1db70 <_malloc_r+0x248>
   1de0a:	f3ca 000b 	ubfx	r0, sl, #0, #12
   1de0e:	2800      	cmp	r0, #0
   1de10:	f47f aeae 	bne.w	1db70 <_malloc_r+0x248>
   1de14:	eb08 030b 	add.w	r3, r8, fp
   1de18:	68ba      	ldr	r2, [r7, #8]
   1de1a:	f043 0301 	orr.w	r3, r3, #1
   1de1e:	6053      	str	r3, [r2, #4]
   1de20:	e6ee      	b.n	1dc00 <_malloc_r+0x2d8>
   1de22:	207f      	movs	r0, #127	; 0x7f
   1de24:	f44f 737e 	mov.w	r3, #1016	; 0x3f8
   1de28:	f04f 0e7e 	mov.w	lr, #126	; 0x7e
   1de2c:	e59e      	b.n	1d96c <_malloc_r+0x44>
   1de2e:	f104 0108 	add.w	r1, r4, #8
   1de32:	4628      	mov	r0, r5
   1de34:	9300      	str	r3, [sp, #0]
   1de36:	f003 fb9f 	bl	21578 <_free_r>
   1de3a:	9b00      	ldr	r3, [sp, #0]
   1de3c:	6819      	ldr	r1, [r3, #0]
   1de3e:	e6df      	b.n	1dc00 <_malloc_r+0x2d8>
   1de40:	2001      	movs	r0, #1
   1de42:	f04f 0900 	mov.w	r9, #0
   1de46:	e6bc      	b.n	1dbc2 <_malloc_r+0x29a>
   1de48:	f5b2 7faa 	cmp.w	r2, #340	; 0x154
   1de4c:	d805      	bhi.n	1de5a <_malloc_r+0x532>
   1de4e:	0bda      	lsrs	r2, r3, #15
   1de50:	f102 0178 	add.w	r1, r2, #120	; 0x78
   1de54:	00c9      	lsls	r1, r1, #3
   1de56:	3277      	adds	r2, #119	; 0x77
   1de58:	e720      	b.n	1dc9c <_malloc_r+0x374>
   1de5a:	f240 5154 	movw	r1, #1364	; 0x554
   1de5e:	428a      	cmp	r2, r1
   1de60:	d805      	bhi.n	1de6e <_malloc_r+0x546>
   1de62:	0c9a      	lsrs	r2, r3, #18
   1de64:	f102 017d 	add.w	r1, r2, #125	; 0x7d
   1de68:	00c9      	lsls	r1, r1, #3
   1de6a:	327c      	adds	r2, #124	; 0x7c
   1de6c:	e716      	b.n	1dc9c <_malloc_r+0x374>
   1de6e:	f44f 717e 	mov.w	r1, #1016	; 0x3f8
   1de72:	227e      	movs	r2, #126	; 0x7e
   1de74:	e712      	b.n	1dc9c <_malloc_r+0x374>
   1de76:	687b      	ldr	r3, [r7, #4]
   1de78:	e780      	b.n	1dd7c <_malloc_r+0x454>
   1de7a:	08f0      	lsrs	r0, r6, #3
   1de7c:	f106 0308 	add.w	r3, r6, #8
   1de80:	e600      	b.n	1da84 <_malloc_r+0x15c>
   1de82:	bf00      	nop
   1de84:	200022a8 	.word	0x200022a8

0001de88 <__ascii_mbtowc>:
   1de88:	b082      	sub	sp, #8
   1de8a:	b149      	cbz	r1, 1dea0 <__ascii_mbtowc+0x18>
   1de8c:	b15a      	cbz	r2, 1dea6 <__ascii_mbtowc+0x1e>
   1de8e:	b16b      	cbz	r3, 1deac <__ascii_mbtowc+0x24>
   1de90:	7813      	ldrb	r3, [r2, #0]
   1de92:	600b      	str	r3, [r1, #0]
   1de94:	7812      	ldrb	r2, [r2, #0]
   1de96:	1c10      	adds	r0, r2, #0
   1de98:	bf18      	it	ne
   1de9a:	2001      	movne	r0, #1
   1de9c:	b002      	add	sp, #8
   1de9e:	4770      	bx	lr
   1dea0:	a901      	add	r1, sp, #4
   1dea2:	2a00      	cmp	r2, #0
   1dea4:	d1f3      	bne.n	1de8e <__ascii_mbtowc+0x6>
   1dea6:	4610      	mov	r0, r2
   1dea8:	b002      	add	sp, #8
   1deaa:	4770      	bx	lr
   1deac:	f06f 0001 	mvn.w	r0, #1
   1deb0:	e7f4      	b.n	1de9c <__ascii_mbtowc+0x14>
   1deb2:	bf00      	nop
	...

0001dec0 <memchr>:
   1dec0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
   1dec4:	2a10      	cmp	r2, #16
   1dec6:	db2b      	blt.n	1df20 <memchr+0x60>
   1dec8:	f010 0f07 	tst.w	r0, #7
   1decc:	d008      	beq.n	1dee0 <memchr+0x20>
   1dece:	f810 3b01 	ldrb.w	r3, [r0], #1
   1ded2:	3a01      	subs	r2, #1
   1ded4:	428b      	cmp	r3, r1
   1ded6:	d02d      	beq.n	1df34 <memchr+0x74>
   1ded8:	f010 0f07 	tst.w	r0, #7
   1dedc:	b342      	cbz	r2, 1df30 <memchr+0x70>
   1dede:	d1f6      	bne.n	1dece <memchr+0xe>
   1dee0:	b4f0      	push	{r4, r5, r6, r7}
   1dee2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
   1dee6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
   1deea:	f022 0407 	bic.w	r4, r2, #7
   1deee:	f07f 0700 	mvns.w	r7, #0
   1def2:	2300      	movs	r3, #0
   1def4:	e8f0 5602 	ldrd	r5, r6, [r0], #8
   1def8:	3c08      	subs	r4, #8
   1defa:	ea85 0501 	eor.w	r5, r5, r1
   1defe:	ea86 0601 	eor.w	r6, r6, r1
   1df02:	fa85 f547 	uadd8	r5, r5, r7
   1df06:	faa3 f587 	sel	r5, r3, r7
   1df0a:	fa86 f647 	uadd8	r6, r6, r7
   1df0e:	faa5 f687 	sel	r6, r5, r7
   1df12:	b98e      	cbnz	r6, 1df38 <memchr+0x78>
   1df14:	d1ee      	bne.n	1def4 <memchr+0x34>
   1df16:	bcf0      	pop	{r4, r5, r6, r7}
   1df18:	f001 01ff 	and.w	r1, r1, #255	; 0xff
   1df1c:	f002 0207 	and.w	r2, r2, #7
   1df20:	b132      	cbz	r2, 1df30 <memchr+0x70>
   1df22:	f810 3b01 	ldrb.w	r3, [r0], #1
   1df26:	3a01      	subs	r2, #1
   1df28:	ea83 0301 	eor.w	r3, r3, r1
   1df2c:	b113      	cbz	r3, 1df34 <memchr+0x74>
   1df2e:	d1f8      	bne.n	1df22 <memchr+0x62>
   1df30:	2000      	movs	r0, #0
   1df32:	4770      	bx	lr
   1df34:	3801      	subs	r0, #1
   1df36:	4770      	bx	lr
   1df38:	2d00      	cmp	r5, #0
   1df3a:	bf06      	itte	eq
   1df3c:	4635      	moveq	r5, r6
   1df3e:	3803      	subeq	r0, #3
   1df40:	3807      	subne	r0, #7
   1df42:	f015 0f01 	tst.w	r5, #1
   1df46:	d107      	bne.n	1df58 <memchr+0x98>
   1df48:	3001      	adds	r0, #1
   1df4a:	f415 7f80 	tst.w	r5, #256	; 0x100
   1df4e:	bf02      	ittt	eq
   1df50:	3001      	addeq	r0, #1
   1df52:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
   1df56:	3001      	addeq	r0, #1
   1df58:	bcf0      	pop	{r4, r5, r6, r7}
   1df5a:	3801      	subs	r0, #1
   1df5c:	4770      	bx	lr
   1df5e:	bf00      	nop

0001df60 <memcmp>:
   1df60:	2a03      	cmp	r2, #3
   1df62:	b470      	push	{r4, r5, r6}
   1df64:	d922      	bls.n	1dfac <memcmp+0x4c>
   1df66:	ea40 0301 	orr.w	r3, r0, r1
   1df6a:	079b      	lsls	r3, r3, #30
   1df6c:	d011      	beq.n	1df92 <memcmp+0x32>
   1df6e:	7803      	ldrb	r3, [r0, #0]
   1df70:	780c      	ldrb	r4, [r1, #0]
   1df72:	42a3      	cmp	r3, r4
   1df74:	d11d      	bne.n	1dfb2 <memcmp+0x52>
   1df76:	440a      	add	r2, r1
   1df78:	3101      	adds	r1, #1
   1df7a:	e005      	b.n	1df88 <memcmp+0x28>
   1df7c:	f810 3f01 	ldrb.w	r3, [r0, #1]!
   1df80:	f811 4b01 	ldrb.w	r4, [r1], #1
   1df84:	42a3      	cmp	r3, r4
   1df86:	d114      	bne.n	1dfb2 <memcmp+0x52>
   1df88:	4291      	cmp	r1, r2
   1df8a:	d1f7      	bne.n	1df7c <memcmp+0x1c>
   1df8c:	2000      	movs	r0, #0
   1df8e:	bc70      	pop	{r4, r5, r6}
   1df90:	4770      	bx	lr
   1df92:	680d      	ldr	r5, [r1, #0]
   1df94:	6806      	ldr	r6, [r0, #0]
   1df96:	42ae      	cmp	r6, r5
   1df98:	460c      	mov	r4, r1
   1df9a:	4603      	mov	r3, r0
   1df9c:	f101 0104 	add.w	r1, r1, #4
   1dfa0:	f100 0004 	add.w	r0, r0, #4
   1dfa4:	d108      	bne.n	1dfb8 <memcmp+0x58>
   1dfa6:	3a04      	subs	r2, #4
   1dfa8:	2a03      	cmp	r2, #3
   1dfaa:	d8f2      	bhi.n	1df92 <memcmp+0x32>
   1dfac:	2a00      	cmp	r2, #0
   1dfae:	d1de      	bne.n	1df6e <memcmp+0xe>
   1dfb0:	e7ec      	b.n	1df8c <memcmp+0x2c>
   1dfb2:	1b18      	subs	r0, r3, r4
   1dfb4:	bc70      	pop	{r4, r5, r6}
   1dfb6:	4770      	bx	lr
   1dfb8:	4621      	mov	r1, r4
   1dfba:	4618      	mov	r0, r3
   1dfbc:	e7d7      	b.n	1df6e <memcmp+0xe>
   1dfbe:	bf00      	nop

0001dfc0 <memcpy>:
   1dfc0:	4684      	mov	ip, r0
   1dfc2:	ea41 0300 	orr.w	r3, r1, r0
   1dfc6:	f013 0303 	ands.w	r3, r3, #3
   1dfca:	d16d      	bne.n	1e0a8 <memcpy+0xe8>
   1dfcc:	3a40      	subs	r2, #64	; 0x40
   1dfce:	d341      	bcc.n	1e054 <memcpy+0x94>
   1dfd0:	f851 3b04 	ldr.w	r3, [r1], #4
   1dfd4:	f840 3b04 	str.w	r3, [r0], #4
   1dfd8:	f851 3b04 	ldr.w	r3, [r1], #4
   1dfdc:	f840 3b04 	str.w	r3, [r0], #4
   1dfe0:	f851 3b04 	ldr.w	r3, [r1], #4
   1dfe4:	f840 3b04 	str.w	r3, [r0], #4
   1dfe8:	f851 3b04 	ldr.w	r3, [r1], #4
   1dfec:	f840 3b04 	str.w	r3, [r0], #4
   1dff0:	f851 3b04 	ldr.w	r3, [r1], #4
   1dff4:	f840 3b04 	str.w	r3, [r0], #4
   1dff8:	f851 3b04 	ldr.w	r3, [r1], #4
   1dffc:	f840 3b04 	str.w	r3, [r0], #4
   1e000:	f851 3b04 	ldr.w	r3, [r1], #4
   1e004:	f840 3b04 	str.w	r3, [r0], #4
   1e008:	f851 3b04 	ldr.w	r3, [r1], #4
   1e00c:	f840 3b04 	str.w	r3, [r0], #4
   1e010:	f851 3b04 	ldr.w	r3, [r1], #4
   1e014:	f840 3b04 	str.w	r3, [r0], #4
   1e018:	f851 3b04 	ldr.w	r3, [r1], #4
   1e01c:	f840 3b04 	str.w	r3, [r0], #4
   1e020:	f851 3b04 	ldr.w	r3, [r1], #4
   1e024:	f840 3b04 	str.w	r3, [r0], #4
   1e028:	f851 3b04 	ldr.w	r3, [r1], #4
   1e02c:	f840 3b04 	str.w	r3, [r0], #4
   1e030:	f851 3b04 	ldr.w	r3, [r1], #4
   1e034:	f840 3b04 	str.w	r3, [r0], #4
   1e038:	f851 3b04 	ldr.w	r3, [r1], #4
   1e03c:	f840 3b04 	str.w	r3, [r0], #4
   1e040:	f851 3b04 	ldr.w	r3, [r1], #4
   1e044:	f840 3b04 	str.w	r3, [r0], #4
   1e048:	f851 3b04 	ldr.w	r3, [r1], #4
   1e04c:	f840 3b04 	str.w	r3, [r0], #4
   1e050:	3a40      	subs	r2, #64	; 0x40
   1e052:	d2bd      	bcs.n	1dfd0 <memcpy+0x10>
   1e054:	3230      	adds	r2, #48	; 0x30
   1e056:	d311      	bcc.n	1e07c <memcpy+0xbc>
   1e058:	f851 3b04 	ldr.w	r3, [r1], #4
   1e05c:	f840 3b04 	str.w	r3, [r0], #4
   1e060:	f851 3b04 	ldr.w	r3, [r1], #4
   1e064:	f840 3b04 	str.w	r3, [r0], #4
   1e068:	f851 3b04 	ldr.w	r3, [r1], #4
   1e06c:	f840 3b04 	str.w	r3, [r0], #4
   1e070:	f851 3b04 	ldr.w	r3, [r1], #4
   1e074:	f840 3b04 	str.w	r3, [r0], #4
   1e078:	3a10      	subs	r2, #16
   1e07a:	d2ed      	bcs.n	1e058 <memcpy+0x98>
   1e07c:	320c      	adds	r2, #12
   1e07e:	d305      	bcc.n	1e08c <memcpy+0xcc>
   1e080:	f851 3b04 	ldr.w	r3, [r1], #4
   1e084:	f840 3b04 	str.w	r3, [r0], #4
   1e088:	3a04      	subs	r2, #4
   1e08a:	d2f9      	bcs.n	1e080 <memcpy+0xc0>
   1e08c:	3204      	adds	r2, #4
   1e08e:	d008      	beq.n	1e0a2 <memcpy+0xe2>
   1e090:	07d2      	lsls	r2, r2, #31
   1e092:	bf1c      	itt	ne
   1e094:	f811 3b01 	ldrbne.w	r3, [r1], #1
   1e098:	f800 3b01 	strbne.w	r3, [r0], #1
   1e09c:	d301      	bcc.n	1e0a2 <memcpy+0xe2>
   1e09e:	880b      	ldrh	r3, [r1, #0]
   1e0a0:	8003      	strh	r3, [r0, #0]
   1e0a2:	4660      	mov	r0, ip
   1e0a4:	4770      	bx	lr
   1e0a6:	bf00      	nop
   1e0a8:	2a08      	cmp	r2, #8
   1e0aa:	d313      	bcc.n	1e0d4 <memcpy+0x114>
   1e0ac:	078b      	lsls	r3, r1, #30
   1e0ae:	d08d      	beq.n	1dfcc <memcpy+0xc>
   1e0b0:	f010 0303 	ands.w	r3, r0, #3
   1e0b4:	d08a      	beq.n	1dfcc <memcpy+0xc>
   1e0b6:	f1c3 0304 	rsb	r3, r3, #4
   1e0ba:	1ad2      	subs	r2, r2, r3
   1e0bc:	07db      	lsls	r3, r3, #31
   1e0be:	bf1c      	itt	ne
   1e0c0:	f811 3b01 	ldrbne.w	r3, [r1], #1
   1e0c4:	f800 3b01 	strbne.w	r3, [r0], #1
   1e0c8:	d380      	bcc.n	1dfcc <memcpy+0xc>
   1e0ca:	f831 3b02 	ldrh.w	r3, [r1], #2
   1e0ce:	f820 3b02 	strh.w	r3, [r0], #2
   1e0d2:	e77b      	b.n	1dfcc <memcpy+0xc>
   1e0d4:	3a04      	subs	r2, #4
   1e0d6:	d3d9      	bcc.n	1e08c <memcpy+0xcc>
   1e0d8:	3a01      	subs	r2, #1
   1e0da:	f811 3b01 	ldrb.w	r3, [r1], #1
   1e0de:	f800 3b01 	strb.w	r3, [r0], #1
   1e0e2:	d2f9      	bcs.n	1e0d8 <memcpy+0x118>
   1e0e4:	780b      	ldrb	r3, [r1, #0]
   1e0e6:	7003      	strb	r3, [r0, #0]
   1e0e8:	784b      	ldrb	r3, [r1, #1]
   1e0ea:	7043      	strb	r3, [r0, #1]
   1e0ec:	788b      	ldrb	r3, [r1, #2]
   1e0ee:	7083      	strb	r3, [r0, #2]
   1e0f0:	4660      	mov	r0, ip
   1e0f2:	4770      	bx	lr

0001e0f4 <memmove>:
   1e0f4:	4288      	cmp	r0, r1
   1e0f6:	b5f0      	push	{r4, r5, r6, r7, lr}
   1e0f8:	d90d      	bls.n	1e116 <memmove+0x22>
   1e0fa:	188b      	adds	r3, r1, r2
   1e0fc:	4298      	cmp	r0, r3
   1e0fe:	d20a      	bcs.n	1e116 <memmove+0x22>
   1e100:	1884      	adds	r4, r0, r2
   1e102:	2a00      	cmp	r2, #0
   1e104:	d051      	beq.n	1e1aa <memmove+0xb6>
   1e106:	4622      	mov	r2, r4
   1e108:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
   1e10c:	f802 4d01 	strb.w	r4, [r2, #-1]!
   1e110:	4299      	cmp	r1, r3
   1e112:	d1f9      	bne.n	1e108 <memmove+0x14>
   1e114:	bdf0      	pop	{r4, r5, r6, r7, pc}
   1e116:	2a0f      	cmp	r2, #15
   1e118:	d948      	bls.n	1e1ac <memmove+0xb8>
   1e11a:	ea41 0300 	orr.w	r3, r1, r0
   1e11e:	079b      	lsls	r3, r3, #30
   1e120:	d146      	bne.n	1e1b0 <memmove+0xbc>
   1e122:	f100 0410 	add.w	r4, r0, #16
   1e126:	f101 0310 	add.w	r3, r1, #16
   1e12a:	4615      	mov	r5, r2
   1e12c:	f853 6c10 	ldr.w	r6, [r3, #-16]
   1e130:	f844 6c10 	str.w	r6, [r4, #-16]
   1e134:	f853 6c0c 	ldr.w	r6, [r3, #-12]
   1e138:	f844 6c0c 	str.w	r6, [r4, #-12]
   1e13c:	f853 6c08 	ldr.w	r6, [r3, #-8]
   1e140:	f844 6c08 	str.w	r6, [r4, #-8]
   1e144:	3d10      	subs	r5, #16
   1e146:	f853 6c04 	ldr.w	r6, [r3, #-4]
   1e14a:	f844 6c04 	str.w	r6, [r4, #-4]
   1e14e:	2d0f      	cmp	r5, #15
   1e150:	f103 0310 	add.w	r3, r3, #16
   1e154:	f104 0410 	add.w	r4, r4, #16
   1e158:	d8e8      	bhi.n	1e12c <memmove+0x38>
   1e15a:	f1a2 0310 	sub.w	r3, r2, #16
   1e15e:	f023 030f 	bic.w	r3, r3, #15
   1e162:	f002 0e0f 	and.w	lr, r2, #15
   1e166:	3310      	adds	r3, #16
   1e168:	f1be 0f03 	cmp.w	lr, #3
   1e16c:	4419      	add	r1, r3
   1e16e:	4403      	add	r3, r0
   1e170:	d921      	bls.n	1e1b6 <memmove+0xc2>
   1e172:	1f1e      	subs	r6, r3, #4
   1e174:	460d      	mov	r5, r1
   1e176:	4674      	mov	r4, lr
   1e178:	3c04      	subs	r4, #4
   1e17a:	f855 7b04 	ldr.w	r7, [r5], #4
   1e17e:	f846 7f04 	str.w	r7, [r6, #4]!
   1e182:	2c03      	cmp	r4, #3
   1e184:	d8f8      	bhi.n	1e178 <memmove+0x84>
   1e186:	f1ae 0404 	sub.w	r4, lr, #4
   1e18a:	f024 0403 	bic.w	r4, r4, #3
   1e18e:	3404      	adds	r4, #4
   1e190:	4421      	add	r1, r4
   1e192:	4423      	add	r3, r4
   1e194:	f002 0203 	and.w	r2, r2, #3
   1e198:	b162      	cbz	r2, 1e1b4 <memmove+0xc0>
   1e19a:	3b01      	subs	r3, #1
   1e19c:	440a      	add	r2, r1
   1e19e:	f811 4b01 	ldrb.w	r4, [r1], #1
   1e1a2:	f803 4f01 	strb.w	r4, [r3, #1]!
   1e1a6:	428a      	cmp	r2, r1
   1e1a8:	d1f9      	bne.n	1e19e <memmove+0xaa>
   1e1aa:	bdf0      	pop	{r4, r5, r6, r7, pc}
   1e1ac:	4603      	mov	r3, r0
   1e1ae:	e7f3      	b.n	1e198 <memmove+0xa4>
   1e1b0:	4603      	mov	r3, r0
   1e1b2:	e7f2      	b.n	1e19a <memmove+0xa6>
   1e1b4:	bdf0      	pop	{r4, r5, r6, r7, pc}
   1e1b6:	4672      	mov	r2, lr
   1e1b8:	e7ee      	b.n	1e198 <memmove+0xa4>
   1e1ba:	bf00      	nop

0001e1bc <memset>:
   1e1bc:	b470      	push	{r4, r5, r6}
   1e1be:	0786      	lsls	r6, r0, #30
   1e1c0:	d046      	beq.n	1e250 <memset+0x94>
   1e1c2:	1e54      	subs	r4, r2, #1
   1e1c4:	2a00      	cmp	r2, #0
   1e1c6:	d041      	beq.n	1e24c <memset+0x90>
   1e1c8:	b2ca      	uxtb	r2, r1
   1e1ca:	4603      	mov	r3, r0
   1e1cc:	e002      	b.n	1e1d4 <memset+0x18>
   1e1ce:	f114 34ff 	adds.w	r4, r4, #4294967295
   1e1d2:	d33b      	bcc.n	1e24c <memset+0x90>
   1e1d4:	f803 2b01 	strb.w	r2, [r3], #1
   1e1d8:	079d      	lsls	r5, r3, #30
   1e1da:	d1f8      	bne.n	1e1ce <memset+0x12>
   1e1dc:	2c03      	cmp	r4, #3
   1e1de:	d92e      	bls.n	1e23e <memset+0x82>
   1e1e0:	b2cd      	uxtb	r5, r1
   1e1e2:	ea45 2505 	orr.w	r5, r5, r5, lsl #8
   1e1e6:	2c0f      	cmp	r4, #15
   1e1e8:	ea45 4505 	orr.w	r5, r5, r5, lsl #16
   1e1ec:	d919      	bls.n	1e222 <memset+0x66>
   1e1ee:	f103 0210 	add.w	r2, r3, #16
   1e1f2:	4626      	mov	r6, r4
   1e1f4:	3e10      	subs	r6, #16
   1e1f6:	2e0f      	cmp	r6, #15
   1e1f8:	f842 5c10 	str.w	r5, [r2, #-16]
   1e1fc:	f842 5c0c 	str.w	r5, [r2, #-12]
   1e200:	f842 5c08 	str.w	r5, [r2, #-8]
   1e204:	f842 5c04 	str.w	r5, [r2, #-4]
   1e208:	f102 0210 	add.w	r2, r2, #16
   1e20c:	d8f2      	bhi.n	1e1f4 <memset+0x38>
   1e20e:	f1a4 0210 	sub.w	r2, r4, #16
   1e212:	f022 020f 	bic.w	r2, r2, #15
   1e216:	f004 040f 	and.w	r4, r4, #15
   1e21a:	3210      	adds	r2, #16
   1e21c:	2c03      	cmp	r4, #3
   1e21e:	4413      	add	r3, r2
   1e220:	d90d      	bls.n	1e23e <memset+0x82>
   1e222:	461e      	mov	r6, r3
   1e224:	4622      	mov	r2, r4
   1e226:	3a04      	subs	r2, #4
   1e228:	2a03      	cmp	r2, #3
   1e22a:	f846 5b04 	str.w	r5, [r6], #4
   1e22e:	d8fa      	bhi.n	1e226 <memset+0x6a>
   1e230:	1f22      	subs	r2, r4, #4
   1e232:	f022 0203 	bic.w	r2, r2, #3
   1e236:	3204      	adds	r2, #4
   1e238:	4413      	add	r3, r2
   1e23a:	f004 0403 	and.w	r4, r4, #3
   1e23e:	b12c      	cbz	r4, 1e24c <memset+0x90>
   1e240:	b2c9      	uxtb	r1, r1
   1e242:	441c      	add	r4, r3
   1e244:	f803 1b01 	strb.w	r1, [r3], #1
   1e248:	429c      	cmp	r4, r3
   1e24a:	d1fb      	bne.n	1e244 <memset+0x88>
   1e24c:	bc70      	pop	{r4, r5, r6}
   1e24e:	4770      	bx	lr
   1e250:	4614      	mov	r4, r2
   1e252:	4603      	mov	r3, r0
   1e254:	e7c2      	b.n	1e1dc <memset+0x20>
   1e256:	bf00      	nop

0001e258 <__malloc_lock>:
   1e258:	4801      	ldr	r0, [pc, #4]	; (1e260 <__malloc_lock+0x8>)
   1e25a:	f7ff bb51 	b.w	1d900 <__retarget_lock_acquire_recursive>
   1e25e:	bf00      	nop
   1e260:	20002390 	.word	0x20002390

0001e264 <__malloc_unlock>:
   1e264:	4801      	ldr	r0, [pc, #4]	; (1e26c <__malloc_unlock+0x8>)
   1e266:	f7ff bb4d 	b.w	1d904 <__retarget_lock_release_recursive>
   1e26a:	bf00      	nop
   1e26c:	20002390 	.word	0x20002390

0001e270 <_putc_r>:
   1e270:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1e272:	460e      	mov	r6, r1
   1e274:	4614      	mov	r4, r2
   1e276:	4607      	mov	r7, r0
   1e278:	b108      	cbz	r0, 1e27e <_putc_r+0xe>
   1e27a:	6b83      	ldr	r3, [r0, #56]	; 0x38
   1e27c:	b34b      	cbz	r3, 1e2d2 <_putc_r+0x62>
   1e27e:	6e63      	ldr	r3, [r4, #100]	; 0x64
   1e280:	07d8      	lsls	r0, r3, #31
   1e282:	d402      	bmi.n	1e28a <_putc_r+0x1a>
   1e284:	89a3      	ldrh	r3, [r4, #12]
   1e286:	0599      	lsls	r1, r3, #22
   1e288:	d526      	bpl.n	1e2d8 <_putc_r+0x68>
   1e28a:	68a3      	ldr	r3, [r4, #8]
   1e28c:	3b01      	subs	r3, #1
   1e28e:	2b00      	cmp	r3, #0
   1e290:	60a3      	str	r3, [r4, #8]
   1e292:	db11      	blt.n	1e2b8 <_putc_r+0x48>
   1e294:	b2f5      	uxtb	r5, r6
   1e296:	6823      	ldr	r3, [r4, #0]
   1e298:	1c5a      	adds	r2, r3, #1
   1e29a:	6022      	str	r2, [r4, #0]
   1e29c:	701e      	strb	r6, [r3, #0]
   1e29e:	6e63      	ldr	r3, [r4, #100]	; 0x64
   1e2a0:	07da      	lsls	r2, r3, #31
   1e2a2:	d402      	bmi.n	1e2aa <_putc_r+0x3a>
   1e2a4:	89a3      	ldrh	r3, [r4, #12]
   1e2a6:	059b      	lsls	r3, r3, #22
   1e2a8:	d501      	bpl.n	1e2ae <_putc_r+0x3e>
   1e2aa:	4628      	mov	r0, r5
   1e2ac:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   1e2ae:	6da0      	ldr	r0, [r4, #88]	; 0x58
   1e2b0:	f7ff fb28 	bl	1d904 <__retarget_lock_release_recursive>
   1e2b4:	4628      	mov	r0, r5
   1e2b6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   1e2b8:	69a2      	ldr	r2, [r4, #24]
   1e2ba:	4293      	cmp	r3, r2
   1e2bc:	db02      	blt.n	1e2c4 <_putc_r+0x54>
   1e2be:	b2f5      	uxtb	r5, r6
   1e2c0:	2d0a      	cmp	r5, #10
   1e2c2:	d1e8      	bne.n	1e296 <_putc_r+0x26>
   1e2c4:	4631      	mov	r1, r6
   1e2c6:	4638      	mov	r0, r7
   1e2c8:	4622      	mov	r2, r4
   1e2ca:	f001 ff0f 	bl	200ec <__swbuf_r>
   1e2ce:	4605      	mov	r5, r0
   1e2d0:	e7e5      	b.n	1e29e <_putc_r+0x2e>
   1e2d2:	f003 f8af 	bl	21434 <__sinit>
   1e2d6:	e7d2      	b.n	1e27e <_putc_r+0xe>
   1e2d8:	6da0      	ldr	r0, [r4, #88]	; 0x58
   1e2da:	f7ff fb11 	bl	1d900 <__retarget_lock_acquire_recursive>
   1e2de:	e7d4      	b.n	1e28a <_putc_r+0x1a>

0001e2e0 <realloc>:
   1e2e0:	4b02      	ldr	r3, [pc, #8]	; (1e2ec <realloc+0xc>)
   1e2e2:	460a      	mov	r2, r1
   1e2e4:	4601      	mov	r1, r0
   1e2e6:	6818      	ldr	r0, [r3, #0]
   1e2e8:	f000 b802 	b.w	1e2f0 <_realloc_r>
   1e2ec:	20000100 	.word	0x20000100

0001e2f0 <_realloc_r>:
   1e2f0:	2900      	cmp	r1, #0
   1e2f2:	f000 8095 	beq.w	1e420 <_realloc_r+0x130>
   1e2f6:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1e2fa:	460d      	mov	r5, r1
   1e2fc:	4616      	mov	r6, r2
   1e2fe:	b083      	sub	sp, #12
   1e300:	4680      	mov	r8, r0
   1e302:	f106 070b 	add.w	r7, r6, #11
   1e306:	f7ff ffa7 	bl	1e258 <__malloc_lock>
   1e30a:	f855 ec04 	ldr.w	lr, [r5, #-4]
   1e30e:	2f16      	cmp	r7, #22
   1e310:	f02e 0403 	bic.w	r4, lr, #3
   1e314:	f1a5 0908 	sub.w	r9, r5, #8
   1e318:	d83c      	bhi.n	1e394 <_realloc_r+0xa4>
   1e31a:	2210      	movs	r2, #16
   1e31c:	4617      	mov	r7, r2
   1e31e:	42be      	cmp	r6, r7
   1e320:	d83d      	bhi.n	1e39e <_realloc_r+0xae>
   1e322:	4294      	cmp	r4, r2
   1e324:	da43      	bge.n	1e3ae <_realloc_r+0xbe>
   1e326:	4bc4      	ldr	r3, [pc, #784]	; (1e638 <_realloc_r+0x348>)
   1e328:	6899      	ldr	r1, [r3, #8]
   1e32a:	eb09 0004 	add.w	r0, r9, r4
   1e32e:	4288      	cmp	r0, r1
   1e330:	f000 80b4 	beq.w	1e49c <_realloc_r+0x1ac>
   1e334:	6843      	ldr	r3, [r0, #4]
   1e336:	f023 0101 	bic.w	r1, r3, #1
   1e33a:	4401      	add	r1, r0
   1e33c:	6849      	ldr	r1, [r1, #4]
   1e33e:	07c9      	lsls	r1, r1, #31
   1e340:	d54c      	bpl.n	1e3dc <_realloc_r+0xec>
   1e342:	f01e 0f01 	tst.w	lr, #1
   1e346:	f000 809b 	beq.w	1e480 <_realloc_r+0x190>
   1e34a:	4631      	mov	r1, r6
   1e34c:	4640      	mov	r0, r8
   1e34e:	f7ff faeb 	bl	1d928 <_malloc_r>
   1e352:	4606      	mov	r6, r0
   1e354:	2800      	cmp	r0, #0
   1e356:	d03a      	beq.n	1e3ce <_realloc_r+0xde>
   1e358:	f855 3c04 	ldr.w	r3, [r5, #-4]
   1e35c:	f023 0301 	bic.w	r3, r3, #1
   1e360:	444b      	add	r3, r9
   1e362:	f1a0 0208 	sub.w	r2, r0, #8
   1e366:	429a      	cmp	r2, r3
   1e368:	f000 8121 	beq.w	1e5ae <_realloc_r+0x2be>
   1e36c:	1f22      	subs	r2, r4, #4
   1e36e:	2a24      	cmp	r2, #36	; 0x24
   1e370:	f200 8107 	bhi.w	1e582 <_realloc_r+0x292>
   1e374:	2a13      	cmp	r2, #19
   1e376:	f200 80db 	bhi.w	1e530 <_realloc_r+0x240>
   1e37a:	4603      	mov	r3, r0
   1e37c:	462a      	mov	r2, r5
   1e37e:	6811      	ldr	r1, [r2, #0]
   1e380:	6019      	str	r1, [r3, #0]
   1e382:	6851      	ldr	r1, [r2, #4]
   1e384:	6059      	str	r1, [r3, #4]
   1e386:	6892      	ldr	r2, [r2, #8]
   1e388:	609a      	str	r2, [r3, #8]
   1e38a:	4629      	mov	r1, r5
   1e38c:	4640      	mov	r0, r8
   1e38e:	f003 f8f3 	bl	21578 <_free_r>
   1e392:	e01c      	b.n	1e3ce <_realloc_r+0xde>
   1e394:	f027 0707 	bic.w	r7, r7, #7
   1e398:	2f00      	cmp	r7, #0
   1e39a:	463a      	mov	r2, r7
   1e39c:	dabf      	bge.n	1e31e <_realloc_r+0x2e>
   1e39e:	2600      	movs	r6, #0
   1e3a0:	230c      	movs	r3, #12
   1e3a2:	4630      	mov	r0, r6
   1e3a4:	f8c8 3000 	str.w	r3, [r8]
   1e3a8:	b003      	add	sp, #12
   1e3aa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1e3ae:	462e      	mov	r6, r5
   1e3b0:	1be3      	subs	r3, r4, r7
   1e3b2:	2b0f      	cmp	r3, #15
   1e3b4:	d81e      	bhi.n	1e3f4 <_realloc_r+0x104>
   1e3b6:	f8d9 3004 	ldr.w	r3, [r9, #4]
   1e3ba:	f003 0301 	and.w	r3, r3, #1
   1e3be:	4323      	orrs	r3, r4
   1e3c0:	444c      	add	r4, r9
   1e3c2:	f8c9 3004 	str.w	r3, [r9, #4]
   1e3c6:	6863      	ldr	r3, [r4, #4]
   1e3c8:	f043 0301 	orr.w	r3, r3, #1
   1e3cc:	6063      	str	r3, [r4, #4]
   1e3ce:	4640      	mov	r0, r8
   1e3d0:	f7ff ff48 	bl	1e264 <__malloc_unlock>
   1e3d4:	4630      	mov	r0, r6
   1e3d6:	b003      	add	sp, #12
   1e3d8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1e3dc:	f023 0303 	bic.w	r3, r3, #3
   1e3e0:	18e1      	adds	r1, r4, r3
   1e3e2:	4291      	cmp	r1, r2
   1e3e4:	db1f      	blt.n	1e426 <_realloc_r+0x136>
   1e3e6:	68c3      	ldr	r3, [r0, #12]
   1e3e8:	6882      	ldr	r2, [r0, #8]
   1e3ea:	462e      	mov	r6, r5
   1e3ec:	60d3      	str	r3, [r2, #12]
   1e3ee:	460c      	mov	r4, r1
   1e3f0:	609a      	str	r2, [r3, #8]
   1e3f2:	e7dd      	b.n	1e3b0 <_realloc_r+0xc0>
   1e3f4:	f8d9 2004 	ldr.w	r2, [r9, #4]
   1e3f8:	eb09 0107 	add.w	r1, r9, r7
   1e3fc:	f002 0201 	and.w	r2, r2, #1
   1e400:	444c      	add	r4, r9
   1e402:	f043 0301 	orr.w	r3, r3, #1
   1e406:	4317      	orrs	r7, r2
   1e408:	f8c9 7004 	str.w	r7, [r9, #4]
   1e40c:	604b      	str	r3, [r1, #4]
   1e40e:	6863      	ldr	r3, [r4, #4]
   1e410:	f043 0301 	orr.w	r3, r3, #1
   1e414:	3108      	adds	r1, #8
   1e416:	6063      	str	r3, [r4, #4]
   1e418:	4640      	mov	r0, r8
   1e41a:	f003 f8ad 	bl	21578 <_free_r>
   1e41e:	e7d6      	b.n	1e3ce <_realloc_r+0xde>
   1e420:	4611      	mov	r1, r2
   1e422:	f7ff ba81 	b.w	1d928 <_malloc_r>
   1e426:	f01e 0f01 	tst.w	lr, #1
   1e42a:	d18e      	bne.n	1e34a <_realloc_r+0x5a>
   1e42c:	f855 1c08 	ldr.w	r1, [r5, #-8]
   1e430:	eba9 0a01 	sub.w	sl, r9, r1
   1e434:	f8da 1004 	ldr.w	r1, [sl, #4]
   1e438:	f021 0103 	bic.w	r1, r1, #3
   1e43c:	440b      	add	r3, r1
   1e43e:	4423      	add	r3, r4
   1e440:	4293      	cmp	r3, r2
   1e442:	db25      	blt.n	1e490 <_realloc_r+0x1a0>
   1e444:	68c2      	ldr	r2, [r0, #12]
   1e446:	6881      	ldr	r1, [r0, #8]
   1e448:	4656      	mov	r6, sl
   1e44a:	60ca      	str	r2, [r1, #12]
   1e44c:	6091      	str	r1, [r2, #8]
   1e44e:	f8da 100c 	ldr.w	r1, [sl, #12]
   1e452:	f856 0f08 	ldr.w	r0, [r6, #8]!
   1e456:	1f22      	subs	r2, r4, #4
   1e458:	2a24      	cmp	r2, #36	; 0x24
   1e45a:	60c1      	str	r1, [r0, #12]
   1e45c:	6088      	str	r0, [r1, #8]
   1e45e:	f200 8094 	bhi.w	1e58a <_realloc_r+0x29a>
   1e462:	2a13      	cmp	r2, #19
   1e464:	d96f      	bls.n	1e546 <_realloc_r+0x256>
   1e466:	6829      	ldr	r1, [r5, #0]
   1e468:	f8ca 1008 	str.w	r1, [sl, #8]
   1e46c:	6869      	ldr	r1, [r5, #4]
   1e46e:	f8ca 100c 	str.w	r1, [sl, #12]
   1e472:	2a1b      	cmp	r2, #27
   1e474:	f200 80a2 	bhi.w	1e5bc <_realloc_r+0x2cc>
   1e478:	3508      	adds	r5, #8
   1e47a:	f10a 0210 	add.w	r2, sl, #16
   1e47e:	e063      	b.n	1e548 <_realloc_r+0x258>
   1e480:	f855 3c08 	ldr.w	r3, [r5, #-8]
   1e484:	eba9 0a03 	sub.w	sl, r9, r3
   1e488:	f8da 1004 	ldr.w	r1, [sl, #4]
   1e48c:	f021 0103 	bic.w	r1, r1, #3
   1e490:	1863      	adds	r3, r4, r1
   1e492:	4293      	cmp	r3, r2
   1e494:	f6ff af59 	blt.w	1e34a <_realloc_r+0x5a>
   1e498:	4656      	mov	r6, sl
   1e49a:	e7d8      	b.n	1e44e <_realloc_r+0x15e>
   1e49c:	6841      	ldr	r1, [r0, #4]
   1e49e:	f021 0b03 	bic.w	fp, r1, #3
   1e4a2:	44a3      	add	fp, r4
   1e4a4:	f107 0010 	add.w	r0, r7, #16
   1e4a8:	4583      	cmp	fp, r0
   1e4aa:	da56      	bge.n	1e55a <_realloc_r+0x26a>
   1e4ac:	f01e 0f01 	tst.w	lr, #1
   1e4b0:	f47f af4b 	bne.w	1e34a <_realloc_r+0x5a>
   1e4b4:	f855 1c08 	ldr.w	r1, [r5, #-8]
   1e4b8:	eba9 0a01 	sub.w	sl, r9, r1
   1e4bc:	f8da 1004 	ldr.w	r1, [sl, #4]
   1e4c0:	f021 0103 	bic.w	r1, r1, #3
   1e4c4:	448b      	add	fp, r1
   1e4c6:	4558      	cmp	r0, fp
   1e4c8:	dce2      	bgt.n	1e490 <_realloc_r+0x1a0>
   1e4ca:	4656      	mov	r6, sl
   1e4cc:	f8da 100c 	ldr.w	r1, [sl, #12]
   1e4d0:	f856 0f08 	ldr.w	r0, [r6, #8]!
   1e4d4:	1f22      	subs	r2, r4, #4
   1e4d6:	2a24      	cmp	r2, #36	; 0x24
   1e4d8:	60c1      	str	r1, [r0, #12]
   1e4da:	6088      	str	r0, [r1, #8]
   1e4dc:	f200 808f 	bhi.w	1e5fe <_realloc_r+0x30e>
   1e4e0:	2a13      	cmp	r2, #19
   1e4e2:	f240 808a 	bls.w	1e5fa <_realloc_r+0x30a>
   1e4e6:	6829      	ldr	r1, [r5, #0]
   1e4e8:	f8ca 1008 	str.w	r1, [sl, #8]
   1e4ec:	6869      	ldr	r1, [r5, #4]
   1e4ee:	f8ca 100c 	str.w	r1, [sl, #12]
   1e4f2:	2a1b      	cmp	r2, #27
   1e4f4:	f200 808a 	bhi.w	1e60c <_realloc_r+0x31c>
   1e4f8:	3508      	adds	r5, #8
   1e4fa:	f10a 0210 	add.w	r2, sl, #16
   1e4fe:	6829      	ldr	r1, [r5, #0]
   1e500:	6011      	str	r1, [r2, #0]
   1e502:	6869      	ldr	r1, [r5, #4]
   1e504:	6051      	str	r1, [r2, #4]
   1e506:	68a9      	ldr	r1, [r5, #8]
   1e508:	6091      	str	r1, [r2, #8]
   1e50a:	eb0a 0107 	add.w	r1, sl, r7
   1e50e:	ebab 0207 	sub.w	r2, fp, r7
   1e512:	f042 0201 	orr.w	r2, r2, #1
   1e516:	6099      	str	r1, [r3, #8]
   1e518:	604a      	str	r2, [r1, #4]
   1e51a:	f8da 3004 	ldr.w	r3, [sl, #4]
   1e51e:	f003 0301 	and.w	r3, r3, #1
   1e522:	431f      	orrs	r7, r3
   1e524:	4640      	mov	r0, r8
   1e526:	f8ca 7004 	str.w	r7, [sl, #4]
   1e52a:	f7ff fe9b 	bl	1e264 <__malloc_unlock>
   1e52e:	e751      	b.n	1e3d4 <_realloc_r+0xe4>
   1e530:	682b      	ldr	r3, [r5, #0]
   1e532:	6003      	str	r3, [r0, #0]
   1e534:	686b      	ldr	r3, [r5, #4]
   1e536:	6043      	str	r3, [r0, #4]
   1e538:	2a1b      	cmp	r2, #27
   1e53a:	d82d      	bhi.n	1e598 <_realloc_r+0x2a8>
   1e53c:	f100 0308 	add.w	r3, r0, #8
   1e540:	f105 0208 	add.w	r2, r5, #8
   1e544:	e71b      	b.n	1e37e <_realloc_r+0x8e>
   1e546:	4632      	mov	r2, r6
   1e548:	6829      	ldr	r1, [r5, #0]
   1e54a:	6011      	str	r1, [r2, #0]
   1e54c:	6869      	ldr	r1, [r5, #4]
   1e54e:	6051      	str	r1, [r2, #4]
   1e550:	68a9      	ldr	r1, [r5, #8]
   1e552:	6091      	str	r1, [r2, #8]
   1e554:	461c      	mov	r4, r3
   1e556:	46d1      	mov	r9, sl
   1e558:	e72a      	b.n	1e3b0 <_realloc_r+0xc0>
   1e55a:	eb09 0107 	add.w	r1, r9, r7
   1e55e:	ebab 0b07 	sub.w	fp, fp, r7
   1e562:	f04b 0201 	orr.w	r2, fp, #1
   1e566:	6099      	str	r1, [r3, #8]
   1e568:	604a      	str	r2, [r1, #4]
   1e56a:	f855 3c04 	ldr.w	r3, [r5, #-4]
   1e56e:	f003 0301 	and.w	r3, r3, #1
   1e572:	431f      	orrs	r7, r3
   1e574:	4640      	mov	r0, r8
   1e576:	f845 7c04 	str.w	r7, [r5, #-4]
   1e57a:	f7ff fe73 	bl	1e264 <__malloc_unlock>
   1e57e:	462e      	mov	r6, r5
   1e580:	e728      	b.n	1e3d4 <_realloc_r+0xe4>
   1e582:	4629      	mov	r1, r5
   1e584:	f7ff fdb6 	bl	1e0f4 <memmove>
   1e588:	e6ff      	b.n	1e38a <_realloc_r+0x9a>
   1e58a:	4629      	mov	r1, r5
   1e58c:	4630      	mov	r0, r6
   1e58e:	461c      	mov	r4, r3
   1e590:	46d1      	mov	r9, sl
   1e592:	f7ff fdaf 	bl	1e0f4 <memmove>
   1e596:	e70b      	b.n	1e3b0 <_realloc_r+0xc0>
   1e598:	68ab      	ldr	r3, [r5, #8]
   1e59a:	6083      	str	r3, [r0, #8]
   1e59c:	68eb      	ldr	r3, [r5, #12]
   1e59e:	60c3      	str	r3, [r0, #12]
   1e5a0:	2a24      	cmp	r2, #36	; 0x24
   1e5a2:	d017      	beq.n	1e5d4 <_realloc_r+0x2e4>
   1e5a4:	f100 0310 	add.w	r3, r0, #16
   1e5a8:	f105 0210 	add.w	r2, r5, #16
   1e5ac:	e6e7      	b.n	1e37e <_realloc_r+0x8e>
   1e5ae:	f850 3c04 	ldr.w	r3, [r0, #-4]
   1e5b2:	f023 0303 	bic.w	r3, r3, #3
   1e5b6:	441c      	add	r4, r3
   1e5b8:	462e      	mov	r6, r5
   1e5ba:	e6f9      	b.n	1e3b0 <_realloc_r+0xc0>
   1e5bc:	68a9      	ldr	r1, [r5, #8]
   1e5be:	f8ca 1010 	str.w	r1, [sl, #16]
   1e5c2:	68e9      	ldr	r1, [r5, #12]
   1e5c4:	f8ca 1014 	str.w	r1, [sl, #20]
   1e5c8:	2a24      	cmp	r2, #36	; 0x24
   1e5ca:	d00c      	beq.n	1e5e6 <_realloc_r+0x2f6>
   1e5cc:	3510      	adds	r5, #16
   1e5ce:	f10a 0218 	add.w	r2, sl, #24
   1e5d2:	e7b9      	b.n	1e548 <_realloc_r+0x258>
   1e5d4:	692b      	ldr	r3, [r5, #16]
   1e5d6:	6103      	str	r3, [r0, #16]
   1e5d8:	696b      	ldr	r3, [r5, #20]
   1e5da:	6143      	str	r3, [r0, #20]
   1e5dc:	f105 0218 	add.w	r2, r5, #24
   1e5e0:	f100 0318 	add.w	r3, r0, #24
   1e5e4:	e6cb      	b.n	1e37e <_realloc_r+0x8e>
   1e5e6:	692a      	ldr	r2, [r5, #16]
   1e5e8:	f8ca 2018 	str.w	r2, [sl, #24]
   1e5ec:	696a      	ldr	r2, [r5, #20]
   1e5ee:	f8ca 201c 	str.w	r2, [sl, #28]
   1e5f2:	3518      	adds	r5, #24
   1e5f4:	f10a 0220 	add.w	r2, sl, #32
   1e5f8:	e7a6      	b.n	1e548 <_realloc_r+0x258>
   1e5fa:	4632      	mov	r2, r6
   1e5fc:	e77f      	b.n	1e4fe <_realloc_r+0x20e>
   1e5fe:	4629      	mov	r1, r5
   1e600:	4630      	mov	r0, r6
   1e602:	9301      	str	r3, [sp, #4]
   1e604:	f7ff fd76 	bl	1e0f4 <memmove>
   1e608:	9b01      	ldr	r3, [sp, #4]
   1e60a:	e77e      	b.n	1e50a <_realloc_r+0x21a>
   1e60c:	68a9      	ldr	r1, [r5, #8]
   1e60e:	f8ca 1010 	str.w	r1, [sl, #16]
   1e612:	68e9      	ldr	r1, [r5, #12]
   1e614:	f8ca 1014 	str.w	r1, [sl, #20]
   1e618:	2a24      	cmp	r2, #36	; 0x24
   1e61a:	d003      	beq.n	1e624 <_realloc_r+0x334>
   1e61c:	3510      	adds	r5, #16
   1e61e:	f10a 0218 	add.w	r2, sl, #24
   1e622:	e76c      	b.n	1e4fe <_realloc_r+0x20e>
   1e624:	692a      	ldr	r2, [r5, #16]
   1e626:	f8ca 2018 	str.w	r2, [sl, #24]
   1e62a:	696a      	ldr	r2, [r5, #20]
   1e62c:	f8ca 201c 	str.w	r2, [sl, #28]
   1e630:	3518      	adds	r5, #24
   1e632:	f10a 0220 	add.w	r2, sl, #32
   1e636:	e762      	b.n	1e4fe <_realloc_r+0x20e>
   1e638:	2000069c 	.word	0x2000069c

0001e63c <_sbrk_r>:
   1e63c:	b538      	push	{r3, r4, r5, lr}
   1e63e:	4c07      	ldr	r4, [pc, #28]	; (1e65c <_sbrk_r+0x20>)
   1e640:	2300      	movs	r3, #0
   1e642:	4605      	mov	r5, r0
   1e644:	4608      	mov	r0, r1
   1e646:	6023      	str	r3, [r4, #0]
   1e648:	f003 ff64 	bl	22514 <_sbrk>
   1e64c:	1c43      	adds	r3, r0, #1
   1e64e:	d000      	beq.n	1e652 <_sbrk_r+0x16>
   1e650:	bd38      	pop	{r3, r4, r5, pc}
   1e652:	6823      	ldr	r3, [r4, #0]
   1e654:	2b00      	cmp	r3, #0
   1e656:	d0fb      	beq.n	1e650 <_sbrk_r+0x14>
   1e658:	602b      	str	r3, [r5, #0]
   1e65a:	bd38      	pop	{r3, r4, r5, pc}
   1e65c:	200023a4 	.word	0x200023a4

0001e660 <_raise_r>:
   1e660:	291f      	cmp	r1, #31
   1e662:	d828      	bhi.n	1e6b6 <_raise_r+0x56>
   1e664:	b520      	push	{r5, lr}
   1e666:	f8d0 22dc 	ldr.w	r2, [r0, #732]	; 0x2dc
   1e66a:	b082      	sub	sp, #8
   1e66c:	4605      	mov	r5, r0
   1e66e:	b1aa      	cbz	r2, 1e69c <_raise_r+0x3c>
   1e670:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
   1e674:	b193      	cbz	r3, 1e69c <_raise_r+0x3c>
   1e676:	2b01      	cmp	r3, #1
   1e678:	d00e      	beq.n	1e698 <_raise_r+0x38>
   1e67a:	1c58      	adds	r0, r3, #1
   1e67c:	d007      	beq.n	1e68e <_raise_r+0x2e>
   1e67e:	2500      	movs	r5, #0
   1e680:	4608      	mov	r0, r1
   1e682:	f842 5021 	str.w	r5, [r2, r1, lsl #2]
   1e686:	4798      	blx	r3
   1e688:	4628      	mov	r0, r5
   1e68a:	b002      	add	sp, #8
   1e68c:	bd20      	pop	{r5, pc}
   1e68e:	2316      	movs	r3, #22
   1e690:	2001      	movs	r0, #1
   1e692:	602b      	str	r3, [r5, #0]
   1e694:	b002      	add	sp, #8
   1e696:	bd20      	pop	{r5, pc}
   1e698:	2000      	movs	r0, #0
   1e69a:	e7f6      	b.n	1e68a <_raise_r+0x2a>
   1e69c:	4628      	mov	r0, r5
   1e69e:	9101      	str	r1, [sp, #4]
   1e6a0:	f000 f82a 	bl	1e6f8 <_getpid_r>
   1e6a4:	9901      	ldr	r1, [sp, #4]
   1e6a6:	460a      	mov	r2, r1
   1e6a8:	4601      	mov	r1, r0
   1e6aa:	4628      	mov	r0, r5
   1e6ac:	b002      	add	sp, #8
   1e6ae:	e8bd 4020 	ldmia.w	sp!, {r5, lr}
   1e6b2:	f000 b80d 	b.w	1e6d0 <_kill_r>
   1e6b6:	2316      	movs	r3, #22
   1e6b8:	6003      	str	r3, [r0, #0]
   1e6ba:	f04f 30ff 	mov.w	r0, #4294967295
   1e6be:	4770      	bx	lr

0001e6c0 <raise>:
   1e6c0:	4b02      	ldr	r3, [pc, #8]	; (1e6cc <raise+0xc>)
   1e6c2:	4601      	mov	r1, r0
   1e6c4:	6818      	ldr	r0, [r3, #0]
   1e6c6:	f7ff bfcb 	b.w	1e660 <_raise_r>
   1e6ca:	bf00      	nop
   1e6cc:	20000100 	.word	0x20000100

0001e6d0 <_kill_r>:
   1e6d0:	b538      	push	{r3, r4, r5, lr}
   1e6d2:	460b      	mov	r3, r1
   1e6d4:	4c07      	ldr	r4, [pc, #28]	; (1e6f4 <_kill_r+0x24>)
   1e6d6:	4605      	mov	r5, r0
   1e6d8:	4611      	mov	r1, r2
   1e6da:	4618      	mov	r0, r3
   1e6dc:	2300      	movs	r3, #0
   1e6de:	6023      	str	r3, [r4, #0]
   1e6e0:	f003 ff92 	bl	22608 <_kill>
   1e6e4:	1c43      	adds	r3, r0, #1
   1e6e6:	d000      	beq.n	1e6ea <_kill_r+0x1a>
   1e6e8:	bd38      	pop	{r3, r4, r5, pc}
   1e6ea:	6823      	ldr	r3, [r4, #0]
   1e6ec:	2b00      	cmp	r3, #0
   1e6ee:	d0fb      	beq.n	1e6e8 <_kill_r+0x18>
   1e6f0:	602b      	str	r3, [r5, #0]
   1e6f2:	bd38      	pop	{r3, r4, r5, pc}
   1e6f4:	200023a4 	.word	0x200023a4

0001e6f8 <_getpid_r>:
   1e6f8:	f003 bf0a 	b.w	22510 <_getpid>

0001e6fc <sprintf>:
   1e6fc:	b40e      	push	{r1, r2, r3}
   1e6fe:	b5f0      	push	{r4, r5, r6, r7, lr}
   1e700:	b09c      	sub	sp, #112	; 0x70
   1e702:	ab21      	add	r3, sp, #132	; 0x84
   1e704:	490f      	ldr	r1, [pc, #60]	; (1e744 <sprintf+0x48>)
   1e706:	f853 2b04 	ldr.w	r2, [r3], #4
   1e70a:	9301      	str	r3, [sp, #4]
   1e70c:	4605      	mov	r5, r0
   1e70e:	f06f 4400 	mvn.w	r4, #2147483648	; 0x80000000
   1e712:	6808      	ldr	r0, [r1, #0]
   1e714:	9502      	str	r5, [sp, #8]
   1e716:	f44f 7702 	mov.w	r7, #520	; 0x208
   1e71a:	f64f 76ff 	movw	r6, #65535	; 0xffff
   1e71e:	a902      	add	r1, sp, #8
   1e720:	9506      	str	r5, [sp, #24]
   1e722:	f8ad 7014 	strh.w	r7, [sp, #20]
   1e726:	9404      	str	r4, [sp, #16]
   1e728:	9407      	str	r4, [sp, #28]
   1e72a:	f8ad 6016 	strh.w	r6, [sp, #22]
   1e72e:	f000 fa47 	bl	1ebc0 <_svfprintf_r>
   1e732:	9b02      	ldr	r3, [sp, #8]
   1e734:	2200      	movs	r2, #0
   1e736:	701a      	strb	r2, [r3, #0]
   1e738:	b01c      	add	sp, #112	; 0x70
   1e73a:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
   1e73e:	b003      	add	sp, #12
   1e740:	4770      	bx	lr
   1e742:	bf00      	nop
   1e744:	20000100 	.word	0x20000100
	...
   1e760:	eba2 0003 	sub.w	r0, r2, r3
   1e764:	4770      	bx	lr
   1e766:	bf00      	nop

0001e768 <strcmp>:
   1e768:	7802      	ldrb	r2, [r0, #0]
   1e76a:	780b      	ldrb	r3, [r1, #0]
   1e76c:	2a01      	cmp	r2, #1
   1e76e:	bf28      	it	cs
   1e770:	429a      	cmpcs	r2, r3
   1e772:	d1f5      	bne.n	1e760 <sprintf+0x64>
   1e774:	e96d 4504 	strd	r4, r5, [sp, #-16]!
   1e778:	ea40 0401 	orr.w	r4, r0, r1
   1e77c:	e9cd 6702 	strd	r6, r7, [sp, #8]
   1e780:	f06f 0c00 	mvn.w	ip, #0
   1e784:	ea4f 7244 	mov.w	r2, r4, lsl #29
   1e788:	b312      	cbz	r2, 1e7d0 <strcmp+0x68>
   1e78a:	ea80 0401 	eor.w	r4, r0, r1
   1e78e:	f014 0f07 	tst.w	r4, #7
   1e792:	d16a      	bne.n	1e86a <strcmp+0x102>
   1e794:	f000 0407 	and.w	r4, r0, #7
   1e798:	f020 0007 	bic.w	r0, r0, #7
   1e79c:	f004 0503 	and.w	r5, r4, #3
   1e7a0:	f021 0107 	bic.w	r1, r1, #7
   1e7a4:	ea4f 05c5 	mov.w	r5, r5, lsl #3
   1e7a8:	e8f0 2304 	ldrd	r2, r3, [r0], #16
   1e7ac:	f014 0f04 	tst.w	r4, #4
   1e7b0:	e8f1 6704 	ldrd	r6, r7, [r1], #16
   1e7b4:	fa0c f405 	lsl.w	r4, ip, r5
   1e7b8:	ea62 0204 	orn	r2, r2, r4
   1e7bc:	ea66 0604 	orn	r6, r6, r4
   1e7c0:	d00a      	beq.n	1e7d8 <strcmp+0x70>
   1e7c2:	ea63 0304 	orn	r3, r3, r4
   1e7c6:	4662      	mov	r2, ip
   1e7c8:	ea67 0704 	orn	r7, r7, r4
   1e7cc:	4666      	mov	r6, ip
   1e7ce:	e003      	b.n	1e7d8 <strcmp+0x70>
   1e7d0:	e8f0 2304 	ldrd	r2, r3, [r0], #16
   1e7d4:	e8f1 6704 	ldrd	r6, r7, [r1], #16
   1e7d8:	fa82 f54c 	uadd8	r5, r2, ip
   1e7dc:	ea82 0406 	eor.w	r4, r2, r6
   1e7e0:	faa4 f48c 	sel	r4, r4, ip
   1e7e4:	bb6c      	cbnz	r4, 1e842 <strcmp+0xda>
   1e7e6:	fa83 f54c 	uadd8	r5, r3, ip
   1e7ea:	ea83 0507 	eor.w	r5, r3, r7
   1e7ee:	faa5 f58c 	sel	r5, r5, ip
   1e7f2:	b995      	cbnz	r5, 1e81a <strcmp+0xb2>
   1e7f4:	e950 2302 	ldrd	r2, r3, [r0, #-8]
   1e7f8:	e951 6702 	ldrd	r6, r7, [r1, #-8]
   1e7fc:	fa82 f54c 	uadd8	r5, r2, ip
   1e800:	ea82 0406 	eor.w	r4, r2, r6
   1e804:	faa4 f48c 	sel	r4, r4, ip
   1e808:	fa83 f54c 	uadd8	r5, r3, ip
   1e80c:	ea83 0507 	eor.w	r5, r3, r7
   1e810:	faa5 f58c 	sel	r5, r5, ip
   1e814:	4325      	orrs	r5, r4
   1e816:	d0db      	beq.n	1e7d0 <strcmp+0x68>
   1e818:	b99c      	cbnz	r4, 1e842 <strcmp+0xda>
   1e81a:	ba2d      	rev	r5, r5
   1e81c:	fab5 f485 	clz	r4, r5
   1e820:	f024 0407 	bic.w	r4, r4, #7
   1e824:	fa27 f104 	lsr.w	r1, r7, r4
   1e828:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
   1e82c:	fa23 f304 	lsr.w	r3, r3, r4
   1e830:	f003 00ff 	and.w	r0, r3, #255	; 0xff
   1e834:	f001 01ff 	and.w	r1, r1, #255	; 0xff
   1e838:	e8fd 4504 	ldrd	r4, r5, [sp], #16
   1e83c:	eba0 0001 	sub.w	r0, r0, r1
   1e840:	4770      	bx	lr
   1e842:	ba24      	rev	r4, r4
   1e844:	fab4 f484 	clz	r4, r4
   1e848:	f024 0407 	bic.w	r4, r4, #7
   1e84c:	fa26 f104 	lsr.w	r1, r6, r4
   1e850:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
   1e854:	fa22 f204 	lsr.w	r2, r2, r4
   1e858:	f002 00ff 	and.w	r0, r2, #255	; 0xff
   1e85c:	f001 01ff 	and.w	r1, r1, #255	; 0xff
   1e860:	e8fd 4504 	ldrd	r4, r5, [sp], #16
   1e864:	eba0 0001 	sub.w	r0, r0, r1
   1e868:	4770      	bx	lr
   1e86a:	f014 0f03 	tst.w	r4, #3
   1e86e:	d13c      	bne.n	1e8ea <strcmp+0x182>
   1e870:	f010 0403 	ands.w	r4, r0, #3
   1e874:	d128      	bne.n	1e8c8 <strcmp+0x160>
   1e876:	f850 2b08 	ldr.w	r2, [r0], #8
   1e87a:	f851 3b08 	ldr.w	r3, [r1], #8
   1e87e:	fa82 f54c 	uadd8	r5, r2, ip
   1e882:	ea82 0503 	eor.w	r5, r2, r3
   1e886:	faa5 f58c 	sel	r5, r5, ip
   1e88a:	b95d      	cbnz	r5, 1e8a4 <strcmp+0x13c>
   1e88c:	f850 2c04 	ldr.w	r2, [r0, #-4]
   1e890:	f851 3c04 	ldr.w	r3, [r1, #-4]
   1e894:	fa82 f54c 	uadd8	r5, r2, ip
   1e898:	ea82 0503 	eor.w	r5, r2, r3
   1e89c:	faa5 f58c 	sel	r5, r5, ip
   1e8a0:	2d00      	cmp	r5, #0
   1e8a2:	d0e8      	beq.n	1e876 <strcmp+0x10e>
   1e8a4:	ba2d      	rev	r5, r5
   1e8a6:	fab5 f485 	clz	r4, r5
   1e8aa:	f024 0407 	bic.w	r4, r4, #7
   1e8ae:	fa23 f104 	lsr.w	r1, r3, r4
   1e8b2:	fa22 f204 	lsr.w	r2, r2, r4
   1e8b6:	f002 00ff 	and.w	r0, r2, #255	; 0xff
   1e8ba:	f001 01ff 	and.w	r1, r1, #255	; 0xff
   1e8be:	e8fd 4504 	ldrd	r4, r5, [sp], #16
   1e8c2:	eba0 0001 	sub.w	r0, r0, r1
   1e8c6:	4770      	bx	lr
   1e8c8:	ea4f 04c4 	mov.w	r4, r4, lsl #3
   1e8cc:	f020 0003 	bic.w	r0, r0, #3
   1e8d0:	f850 2b08 	ldr.w	r2, [r0], #8
   1e8d4:	f021 0103 	bic.w	r1, r1, #3
   1e8d8:	f851 3b08 	ldr.w	r3, [r1], #8
   1e8dc:	fa0c f404 	lsl.w	r4, ip, r4
   1e8e0:	ea62 0204 	orn	r2, r2, r4
   1e8e4:	ea63 0304 	orn	r3, r3, r4
   1e8e8:	e7c9      	b.n	1e87e <strcmp+0x116>
   1e8ea:	f010 0403 	ands.w	r4, r0, #3
   1e8ee:	d01a      	beq.n	1e926 <strcmp+0x1be>
   1e8f0:	eba1 0104 	sub.w	r1, r1, r4
   1e8f4:	f020 0003 	bic.w	r0, r0, #3
   1e8f8:	07e4      	lsls	r4, r4, #31
   1e8fa:	f850 2b04 	ldr.w	r2, [r0], #4
   1e8fe:	d006      	beq.n	1e90e <strcmp+0x1a6>
   1e900:	d20f      	bcs.n	1e922 <strcmp+0x1ba>
   1e902:	788b      	ldrb	r3, [r1, #2]
   1e904:	fa5f f4a2 	uxtb.w	r4, r2, ror #16
   1e908:	1ae4      	subs	r4, r4, r3
   1e90a:	d106      	bne.n	1e91a <strcmp+0x1b2>
   1e90c:	b12b      	cbz	r3, 1e91a <strcmp+0x1b2>
   1e90e:	78cb      	ldrb	r3, [r1, #3]
   1e910:	fa5f f4b2 	uxtb.w	r4, r2, ror #24
   1e914:	1ae4      	subs	r4, r4, r3
   1e916:	d100      	bne.n	1e91a <strcmp+0x1b2>
   1e918:	b91b      	cbnz	r3, 1e922 <strcmp+0x1ba>
   1e91a:	4620      	mov	r0, r4
   1e91c:	f85d 4b10 	ldr.w	r4, [sp], #16
   1e920:	4770      	bx	lr
   1e922:	f101 0104 	add.w	r1, r1, #4
   1e926:	f850 2b04 	ldr.w	r2, [r0], #4
   1e92a:	07cc      	lsls	r4, r1, #31
   1e92c:	f021 0103 	bic.w	r1, r1, #3
   1e930:	f851 3b04 	ldr.w	r3, [r1], #4
   1e934:	d848      	bhi.n	1e9c8 <strcmp+0x260>
   1e936:	d224      	bcs.n	1e982 <strcmp+0x21a>
   1e938:	f022 447f 	bic.w	r4, r2, #4278190080	; 0xff000000
   1e93c:	fa82 f54c 	uadd8	r5, r2, ip
   1e940:	ea94 2513 	eors.w	r5, r4, r3, lsr #8
   1e944:	faa5 f58c 	sel	r5, r5, ip
   1e948:	d10a      	bne.n	1e960 <strcmp+0x1f8>
   1e94a:	b965      	cbnz	r5, 1e966 <strcmp+0x1fe>
   1e94c:	f851 3b04 	ldr.w	r3, [r1], #4
   1e950:	ea84 0402 	eor.w	r4, r4, r2
   1e954:	ebb4 6f03 	cmp.w	r4, r3, lsl #24
   1e958:	d10e      	bne.n	1e978 <strcmp+0x210>
   1e95a:	f850 2b04 	ldr.w	r2, [r0], #4
   1e95e:	e7eb      	b.n	1e938 <strcmp+0x1d0>
   1e960:	ea4f 2313 	mov.w	r3, r3, lsr #8
   1e964:	e055      	b.n	1ea12 <strcmp+0x2aa>
   1e966:	f035 457f 	bics.w	r5, r5, #4278190080	; 0xff000000
   1e96a:	d14d      	bne.n	1ea08 <strcmp+0x2a0>
   1e96c:	7808      	ldrb	r0, [r1, #0]
   1e96e:	e8fd 4504 	ldrd	r4, r5, [sp], #16
   1e972:	f1c0 0000 	rsb	r0, r0, #0
   1e976:	4770      	bx	lr
   1e978:	ea4f 6212 	mov.w	r2, r2, lsr #24
   1e97c:	f003 03ff 	and.w	r3, r3, #255	; 0xff
   1e980:	e047      	b.n	1ea12 <strcmp+0x2aa>
   1e982:	ea02 441c 	and.w	r4, r2, ip, lsr #16
   1e986:	fa82 f54c 	uadd8	r5, r2, ip
   1e98a:	ea94 4513 	eors.w	r5, r4, r3, lsr #16
   1e98e:	faa5 f58c 	sel	r5, r5, ip
   1e992:	d10a      	bne.n	1e9aa <strcmp+0x242>
   1e994:	b965      	cbnz	r5, 1e9b0 <strcmp+0x248>
   1e996:	f851 3b04 	ldr.w	r3, [r1], #4
   1e99a:	ea84 0402 	eor.w	r4, r4, r2
   1e99e:	ebb4 4f03 	cmp.w	r4, r3, lsl #16
   1e9a2:	d10c      	bne.n	1e9be <strcmp+0x256>
   1e9a4:	f850 2b04 	ldr.w	r2, [r0], #4
   1e9a8:	e7eb      	b.n	1e982 <strcmp+0x21a>
   1e9aa:	ea4f 4313 	mov.w	r3, r3, lsr #16
   1e9ae:	e030      	b.n	1ea12 <strcmp+0x2aa>
   1e9b0:	ea15 451c 	ands.w	r5, r5, ip, lsr #16
   1e9b4:	d128      	bne.n	1ea08 <strcmp+0x2a0>
   1e9b6:	880b      	ldrh	r3, [r1, #0]
   1e9b8:	ea4f 4212 	mov.w	r2, r2, lsr #16
   1e9bc:	e029      	b.n	1ea12 <strcmp+0x2aa>
   1e9be:	ea4f 4212 	mov.w	r2, r2, lsr #16
   1e9c2:	ea03 431c 	and.w	r3, r3, ip, lsr #16
   1e9c6:	e024      	b.n	1ea12 <strcmp+0x2aa>
   1e9c8:	f002 04ff 	and.w	r4, r2, #255	; 0xff
   1e9cc:	fa82 f54c 	uadd8	r5, r2, ip
   1e9d0:	ea94 6513 	eors.w	r5, r4, r3, lsr #24
   1e9d4:	faa5 f58c 	sel	r5, r5, ip
   1e9d8:	d10a      	bne.n	1e9f0 <strcmp+0x288>
   1e9da:	b965      	cbnz	r5, 1e9f6 <strcmp+0x28e>
   1e9dc:	f851 3b04 	ldr.w	r3, [r1], #4
   1e9e0:	ea84 0402 	eor.w	r4, r4, r2
   1e9e4:	ebb4 2f03 	cmp.w	r4, r3, lsl #8
   1e9e8:	d109      	bne.n	1e9fe <strcmp+0x296>
   1e9ea:	f850 2b04 	ldr.w	r2, [r0], #4
   1e9ee:	e7eb      	b.n	1e9c8 <strcmp+0x260>
   1e9f0:	ea4f 6313 	mov.w	r3, r3, lsr #24
   1e9f4:	e00d      	b.n	1ea12 <strcmp+0x2aa>
   1e9f6:	f015 0fff 	tst.w	r5, #255	; 0xff
   1e9fa:	d105      	bne.n	1ea08 <strcmp+0x2a0>
   1e9fc:	680b      	ldr	r3, [r1, #0]
   1e9fe:	ea4f 2212 	mov.w	r2, r2, lsr #8
   1ea02:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
   1ea06:	e004      	b.n	1ea12 <strcmp+0x2aa>
   1ea08:	f04f 0000 	mov.w	r0, #0
   1ea0c:	e8fd 4504 	ldrd	r4, r5, [sp], #16
   1ea10:	4770      	bx	lr
   1ea12:	ba12      	rev	r2, r2
   1ea14:	ba1b      	rev	r3, r3
   1ea16:	fa82 f44c 	uadd8	r4, r2, ip
   1ea1a:	ea82 0403 	eor.w	r4, r2, r3
   1ea1e:	faa4 f58c 	sel	r5, r4, ip
   1ea22:	fab5 f485 	clz	r4, r5
   1ea26:	fa02 f204 	lsl.w	r2, r2, r4
   1ea2a:	fa03 f304 	lsl.w	r3, r3, r4
   1ea2e:	ea4f 6012 	mov.w	r0, r2, lsr #24
   1ea32:	e8fd 4504 	ldrd	r4, r5, [sp], #16
   1ea36:	eba0 6013 	sub.w	r0, r0, r3, lsr #24
   1ea3a:	4770      	bx	lr
   1ea3c:	0000      	movs	r0, r0
	...

0001ea40 <strlen>:
   1ea40:	f890 f000 	pld	[r0]
   1ea44:	e96d 4502 	strd	r4, r5, [sp, #-8]!
   1ea48:	f020 0107 	bic.w	r1, r0, #7
   1ea4c:	f06f 0c00 	mvn.w	ip, #0
   1ea50:	f010 0407 	ands.w	r4, r0, #7
   1ea54:	f891 f020 	pld	[r1, #32]
   1ea58:	f040 8049 	bne.w	1eaee <strlen+0xae>
   1ea5c:	f04f 0400 	mov.w	r4, #0
   1ea60:	f06f 0007 	mvn.w	r0, #7
   1ea64:	e9d1 2300 	ldrd	r2, r3, [r1]
   1ea68:	f891 f040 	pld	[r1, #64]	; 0x40
   1ea6c:	f100 0008 	add.w	r0, r0, #8
   1ea70:	fa82 f24c 	uadd8	r2, r2, ip
   1ea74:	faa4 f28c 	sel	r2, r4, ip
   1ea78:	fa83 f34c 	uadd8	r3, r3, ip
   1ea7c:	faa2 f38c 	sel	r3, r2, ip
   1ea80:	bb4b      	cbnz	r3, 1ead6 <strlen+0x96>
   1ea82:	e9d1 2302 	ldrd	r2, r3, [r1, #8]
   1ea86:	fa82 f24c 	uadd8	r2, r2, ip
   1ea8a:	f100 0008 	add.w	r0, r0, #8
   1ea8e:	faa4 f28c 	sel	r2, r4, ip
   1ea92:	fa83 f34c 	uadd8	r3, r3, ip
   1ea96:	faa2 f38c 	sel	r3, r2, ip
   1ea9a:	b9e3      	cbnz	r3, 1ead6 <strlen+0x96>
   1ea9c:	e9d1 2304 	ldrd	r2, r3, [r1, #16]
   1eaa0:	fa82 f24c 	uadd8	r2, r2, ip
   1eaa4:	f100 0008 	add.w	r0, r0, #8
   1eaa8:	faa4 f28c 	sel	r2, r4, ip
   1eaac:	fa83 f34c 	uadd8	r3, r3, ip
   1eab0:	faa2 f38c 	sel	r3, r2, ip
   1eab4:	b97b      	cbnz	r3, 1ead6 <strlen+0x96>
   1eab6:	e9d1 2306 	ldrd	r2, r3, [r1, #24]
   1eaba:	f101 0120 	add.w	r1, r1, #32
   1eabe:	fa82 f24c 	uadd8	r2, r2, ip
   1eac2:	f100 0008 	add.w	r0, r0, #8
   1eac6:	faa4 f28c 	sel	r2, r4, ip
   1eaca:	fa83 f34c 	uadd8	r3, r3, ip
   1eace:	faa2 f38c 	sel	r3, r2, ip
   1ead2:	2b00      	cmp	r3, #0
   1ead4:	d0c6      	beq.n	1ea64 <strlen+0x24>
   1ead6:	2a00      	cmp	r2, #0
   1ead8:	bf04      	itt	eq
   1eada:	3004      	addeq	r0, #4
   1eadc:	461a      	moveq	r2, r3
   1eade:	ba12      	rev	r2, r2
   1eae0:	fab2 f282 	clz	r2, r2
   1eae4:	e8fd 4502 	ldrd	r4, r5, [sp], #8
   1eae8:	eb00 00d2 	add.w	r0, r0, r2, lsr #3
   1eaec:	4770      	bx	lr
   1eaee:	e9d1 2300 	ldrd	r2, r3, [r1]
   1eaf2:	f004 0503 	and.w	r5, r4, #3
   1eaf6:	f1c4 0000 	rsb	r0, r4, #0
   1eafa:	ea4f 05c5 	mov.w	r5, r5, lsl #3
   1eafe:	f014 0f04 	tst.w	r4, #4
   1eb02:	f891 f040 	pld	[r1, #64]	; 0x40
   1eb06:	fa0c f505 	lsl.w	r5, ip, r5
   1eb0a:	ea62 0205 	orn	r2, r2, r5
   1eb0e:	bf1c      	itt	ne
   1eb10:	ea63 0305 	ornne	r3, r3, r5
   1eb14:	4662      	movne	r2, ip
   1eb16:	f04f 0400 	mov.w	r4, #0
   1eb1a:	e7a9      	b.n	1ea70 <strlen+0x30>

0001eb1c <strncmp>:
   1eb1c:	2a00      	cmp	r2, #0
   1eb1e:	d041      	beq.n	1eba4 <strncmp+0x88>
   1eb20:	ea40 0301 	orr.w	r3, r0, r1
   1eb24:	f013 0303 	ands.w	r3, r3, #3
   1eb28:	b4f0      	push	{r4, r5, r6, r7}
   1eb2a:	d125      	bne.n	1eb78 <strncmp+0x5c>
   1eb2c:	2a03      	cmp	r2, #3
   1eb2e:	d923      	bls.n	1eb78 <strncmp+0x5c>
   1eb30:	6804      	ldr	r4, [r0, #0]
   1eb32:	680d      	ldr	r5, [r1, #0]
   1eb34:	42ac      	cmp	r4, r5
   1eb36:	d11f      	bne.n	1eb78 <strncmp+0x5c>
   1eb38:	3a04      	subs	r2, #4
   1eb3a:	d038      	beq.n	1ebae <strncmp+0x92>
   1eb3c:	f1a4 3501 	sub.w	r5, r4, #16843009	; 0x1010101
   1eb40:	ea25 0404 	bic.w	r4, r5, r4
   1eb44:	f014 3f80 	tst.w	r4, #2155905152	; 0x80808080
   1eb48:	d12e      	bne.n	1eba8 <strncmp+0x8c>
   1eb4a:	3004      	adds	r0, #4
   1eb4c:	3104      	adds	r1, #4
   1eb4e:	e00f      	b.n	1eb70 <strncmp+0x54>
   1eb50:	f850 3b04 	ldr.w	r3, [r0], #4
   1eb54:	680e      	ldr	r6, [r1, #0]
   1eb56:	f1a3 3401 	sub.w	r4, r3, #16843009	; 0x1010101
   1eb5a:	42b3      	cmp	r3, r6
   1eb5c:	ea24 0403 	bic.w	r4, r4, r3
   1eb60:	f101 0104 	add.w	r1, r1, #4
   1eb64:	d126      	bne.n	1ebb4 <strncmp+0x98>
   1eb66:	3a04      	subs	r2, #4
   1eb68:	d021      	beq.n	1ebae <strncmp+0x92>
   1eb6a:	f014 3f80 	tst.w	r4, #2155905152	; 0x80808080
   1eb6e:	d11b      	bne.n	1eba8 <strncmp+0x8c>
   1eb70:	2a03      	cmp	r2, #3
   1eb72:	4607      	mov	r7, r0
   1eb74:	460d      	mov	r5, r1
   1eb76:	d8eb      	bhi.n	1eb50 <strncmp+0x34>
   1eb78:	7805      	ldrb	r5, [r0, #0]
   1eb7a:	780c      	ldrb	r4, [r1, #0]
   1eb7c:	42ac      	cmp	r4, r5
   1eb7e:	f102 33ff 	add.w	r3, r2, #4294967295
   1eb82:	d11a      	bne.n	1ebba <strncmp+0x9e>
   1eb84:	b183      	cbz	r3, 1eba8 <strncmp+0x8c>
   1eb86:	b914      	cbnz	r4, 1eb8e <strncmp+0x72>
   1eb88:	e00e      	b.n	1eba8 <strncmp+0x8c>
   1eb8a:	b16b      	cbz	r3, 1eba8 <strncmp+0x8c>
   1eb8c:	b17a      	cbz	r2, 1ebae <strncmp+0x92>
   1eb8e:	f810 2f01 	ldrb.w	r2, [r0, #1]!
   1eb92:	f811 4f01 	ldrb.w	r4, [r1, #1]!
   1eb96:	42a2      	cmp	r2, r4
   1eb98:	f103 33ff 	add.w	r3, r3, #4294967295
   1eb9c:	d0f5      	beq.n	1eb8a <strncmp+0x6e>
   1eb9e:	1b10      	subs	r0, r2, r4
   1eba0:	bcf0      	pop	{r4, r5, r6, r7}
   1eba2:	4770      	bx	lr
   1eba4:	4610      	mov	r0, r2
   1eba6:	4770      	bx	lr
   1eba8:	2000      	movs	r0, #0
   1ebaa:	bcf0      	pop	{r4, r5, r6, r7}
   1ebac:	4770      	bx	lr
   1ebae:	4610      	mov	r0, r2
   1ebb0:	bcf0      	pop	{r4, r5, r6, r7}
   1ebb2:	4770      	bx	lr
   1ebb4:	4629      	mov	r1, r5
   1ebb6:	4638      	mov	r0, r7
   1ebb8:	e7de      	b.n	1eb78 <strncmp+0x5c>
   1ebba:	462a      	mov	r2, r5
   1ebbc:	e7ef      	b.n	1eb9e <strncmp+0x82>
   1ebbe:	bf00      	nop

0001ebc0 <_svfprintf_r>:
   1ebc0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1ebc4:	b0c1      	sub	sp, #260	; 0x104
   1ebc6:	460c      	mov	r4, r1
   1ebc8:	9107      	str	r1, [sp, #28]
   1ebca:	4692      	mov	sl, r2
   1ebcc:	930b      	str	r3, [sp, #44]	; 0x2c
   1ebce:	9008      	str	r0, [sp, #32]
   1ebd0:	f002 fde2 	bl	21798 <_localeconv_r>
   1ebd4:	6803      	ldr	r3, [r0, #0]
   1ebd6:	9314      	str	r3, [sp, #80]	; 0x50
   1ebd8:	4618      	mov	r0, r3
   1ebda:	f7ff ff31 	bl	1ea40 <strlen>
   1ebde:	89a3      	ldrh	r3, [r4, #12]
   1ebe0:	9013      	str	r0, [sp, #76]	; 0x4c
   1ebe2:	0619      	lsls	r1, r3, #24
   1ebe4:	d503      	bpl.n	1ebee <_svfprintf_r+0x2e>
   1ebe6:	6923      	ldr	r3, [r4, #16]
   1ebe8:	2b00      	cmp	r3, #0
   1ebea:	f001 801b 	beq.w	1fc24 <_svfprintf_r+0x1064>
   1ebee:	ed9f 7b94 	vldr	d7, [pc, #592]	; 1ee40 <_svfprintf_r+0x280>
   1ebf2:	ed8d 7b10 	vstr	d7, [sp, #64]	; 0x40
   1ebf6:	2300      	movs	r3, #0
   1ebf8:	f10d 09c0 	add.w	r9, sp, #192	; 0xc0
   1ebfc:	930f      	str	r3, [sp, #60]	; 0x3c
   1ebfe:	9325      	str	r3, [sp, #148]	; 0x94
   1ec00:	9324      	str	r3, [sp, #144]	; 0x90
   1ec02:	9312      	str	r3, [sp, #72]	; 0x48
   1ec04:	9315      	str	r3, [sp, #84]	; 0x54
   1ec06:	9305      	str	r3, [sp, #20]
   1ec08:	f8cd 908c 	str.w	r9, [sp, #140]	; 0x8c
   1ec0c:	46c8      	mov	r8, r9
   1ec0e:	f89a 3000 	ldrb.w	r3, [sl]
   1ec12:	4654      	mov	r4, sl
   1ec14:	b1e3      	cbz	r3, 1ec50 <_svfprintf_r+0x90>
   1ec16:	2b25      	cmp	r3, #37	; 0x25
   1ec18:	d102      	bne.n	1ec20 <_svfprintf_r+0x60>
   1ec1a:	e019      	b.n	1ec50 <_svfprintf_r+0x90>
   1ec1c:	2b25      	cmp	r3, #37	; 0x25
   1ec1e:	d003      	beq.n	1ec28 <_svfprintf_r+0x68>
   1ec20:	f814 3f01 	ldrb.w	r3, [r4, #1]!
   1ec24:	2b00      	cmp	r3, #0
   1ec26:	d1f9      	bne.n	1ec1c <_svfprintf_r+0x5c>
   1ec28:	eba4 050a 	sub.w	r5, r4, sl
   1ec2c:	b185      	cbz	r5, 1ec50 <_svfprintf_r+0x90>
   1ec2e:	9b24      	ldr	r3, [sp, #144]	; 0x90
   1ec30:	9a25      	ldr	r2, [sp, #148]	; 0x94
   1ec32:	f8c8 a000 	str.w	sl, [r8]
   1ec36:	3301      	adds	r3, #1
   1ec38:	442a      	add	r2, r5
   1ec3a:	2b07      	cmp	r3, #7
   1ec3c:	f8c8 5004 	str.w	r5, [r8, #4]
   1ec40:	9225      	str	r2, [sp, #148]	; 0x94
   1ec42:	9324      	str	r3, [sp, #144]	; 0x90
   1ec44:	dc7f      	bgt.n	1ed46 <_svfprintf_r+0x186>
   1ec46:	f108 0808 	add.w	r8, r8, #8
   1ec4a:	9b05      	ldr	r3, [sp, #20]
   1ec4c:	442b      	add	r3, r5
   1ec4e:	9305      	str	r3, [sp, #20]
   1ec50:	7823      	ldrb	r3, [r4, #0]
   1ec52:	2b00      	cmp	r3, #0
   1ec54:	d07f      	beq.n	1ed56 <_svfprintf_r+0x196>
   1ec56:	2300      	movs	r3, #0
   1ec58:	461a      	mov	r2, r3
   1ec5a:	f88d 306f 	strb.w	r3, [sp, #111]	; 0x6f
   1ec5e:	4619      	mov	r1, r3
   1ec60:	9309      	str	r3, [sp, #36]	; 0x24
   1ec62:	469b      	mov	fp, r3
   1ec64:	f04f 30ff 	mov.w	r0, #4294967295
   1ec68:	7863      	ldrb	r3, [r4, #1]
   1ec6a:	9006      	str	r0, [sp, #24]
   1ec6c:	f104 0a01 	add.w	sl, r4, #1
   1ec70:	f10a 0a01 	add.w	sl, sl, #1
   1ec74:	f1a3 0020 	sub.w	r0, r3, #32
   1ec78:	2858      	cmp	r0, #88	; 0x58
   1ec7a:	f200 83d3 	bhi.w	1f424 <_svfprintf_r+0x864>
   1ec7e:	e8df f010 	tbh	[pc, r0, lsl #1]
   1ec82:	023f      	.short	0x023f
   1ec84:	03d103d1 	.word	0x03d103d1
   1ec88:	03d10247 	.word	0x03d10247
   1ec8c:	03d103d1 	.word	0x03d103d1
   1ec90:	03d103d1 	.word	0x03d103d1
   1ec94:	024c03d1 	.word	0x024c03d1
   1ec98:	03d1020a 	.word	0x03d1020a
   1ec9c:	0273005d 	.word	0x0273005d
   1eca0:	028e03d1 	.word	0x028e03d1
   1eca4:	03c103c1 	.word	0x03c103c1
   1eca8:	03c103c1 	.word	0x03c103c1
   1ecac:	03c103c1 	.word	0x03c103c1
   1ecb0:	03c103c1 	.word	0x03c103c1
   1ecb4:	03d103c1 	.word	0x03d103c1
   1ecb8:	03d103d1 	.word	0x03d103d1
   1ecbc:	03d103d1 	.word	0x03d103d1
   1ecc0:	03d103d1 	.word	0x03d103d1
   1ecc4:	03d103d1 	.word	0x03d103d1
   1ecc8:	033f03d1 	.word	0x033f03d1
   1eccc:	03d1035f 	.word	0x03d1035f
   1ecd0:	03d1035f 	.word	0x03d1035f
   1ecd4:	03d103d1 	.word	0x03d103d1
   1ecd8:	03aa03d1 	.word	0x03aa03d1
   1ecdc:	03d103d1 	.word	0x03d103d1
   1ece0:	03d103af 	.word	0x03d103af
   1ece4:	03d103d1 	.word	0x03d103d1
   1ece8:	03d103d1 	.word	0x03d103d1
   1ecec:	03d10261 	.word	0x03d10261
   1ecf0:	032603d1 	.word	0x032603d1
   1ecf4:	03d103d1 	.word	0x03d103d1
   1ecf8:	03d103d1 	.word	0x03d103d1
   1ecfc:	03d103d1 	.word	0x03d103d1
   1ed00:	03d103d1 	.word	0x03d103d1
   1ed04:	03d103d1 	.word	0x03d103d1
   1ed08:	02e302ce 	.word	0x02e302ce
   1ed0c:	035f035f 	.word	0x035f035f
   1ed10:	0293035f 	.word	0x0293035f
   1ed14:	03d102e3 	.word	0x03d102e3
   1ed18:	029803d1 	.word	0x029803d1
   1ed1c:	02a503d1 	.word	0x02a503d1
   1ed20:	02bc01d3 	.word	0x02bc01d3
   1ed24:	03d1020f 	.word	0x03d1020f
   1ed28:	03d101e8 	.word	0x03d101e8
   1ed2c:	03d1007e 	.word	0x03d1007e
   1ed30:	021403d1 	.word	0x021403d1
   1ed34:	9809      	ldr	r0, [sp, #36]	; 0x24
   1ed36:	930b      	str	r3, [sp, #44]	; 0x2c
   1ed38:	4240      	negs	r0, r0
   1ed3a:	9009      	str	r0, [sp, #36]	; 0x24
   1ed3c:	f04b 0b04 	orr.w	fp, fp, #4
   1ed40:	f89a 3000 	ldrb.w	r3, [sl]
   1ed44:	e794      	b.n	1ec70 <_svfprintf_r+0xb0>
   1ed46:	aa23      	add	r2, sp, #140	; 0x8c
   1ed48:	9907      	ldr	r1, [sp, #28]
   1ed4a:	9808      	ldr	r0, [sp, #32]
   1ed4c:	f003 f8ea 	bl	21f24 <__ssprint_r>
   1ed50:	b940      	cbnz	r0, 1ed64 <_svfprintf_r+0x1a4>
   1ed52:	46c8      	mov	r8, r9
   1ed54:	e779      	b.n	1ec4a <_svfprintf_r+0x8a>
   1ed56:	9b25      	ldr	r3, [sp, #148]	; 0x94
   1ed58:	b123      	cbz	r3, 1ed64 <_svfprintf_r+0x1a4>
   1ed5a:	9808      	ldr	r0, [sp, #32]
   1ed5c:	9907      	ldr	r1, [sp, #28]
   1ed5e:	aa23      	add	r2, sp, #140	; 0x8c
   1ed60:	f003 f8e0 	bl	21f24 <__ssprint_r>
   1ed64:	9b07      	ldr	r3, [sp, #28]
   1ed66:	899b      	ldrh	r3, [r3, #12]
   1ed68:	f013 0f40 	tst.w	r3, #64	; 0x40
   1ed6c:	9b05      	ldr	r3, [sp, #20]
   1ed6e:	bf18      	it	ne
   1ed70:	f04f 33ff 	movne.w	r3, #4294967295
   1ed74:	9305      	str	r3, [sp, #20]
   1ed76:	9805      	ldr	r0, [sp, #20]
   1ed78:	b041      	add	sp, #260	; 0x104
   1ed7a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1ed7e:	f01b 0f20 	tst.w	fp, #32
   1ed82:	930d      	str	r3, [sp, #52]	; 0x34
   1ed84:	f040 81e5 	bne.w	1f152 <_svfprintf_r+0x592>
   1ed88:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
   1ed8a:	f01b 0f10 	tst.w	fp, #16
   1ed8e:	4613      	mov	r3, r2
   1ed90:	f040 8588 	bne.w	1f8a4 <_svfprintf_r+0xce4>
   1ed94:	f01b 0f40 	tst.w	fp, #64	; 0x40
   1ed98:	f000 8584 	beq.w	1f8a4 <_svfprintf_r+0xce4>
   1ed9c:	8814      	ldrh	r4, [r2, #0]
   1ed9e:	3204      	adds	r2, #4
   1eda0:	2500      	movs	r5, #0
   1eda2:	2301      	movs	r3, #1
   1eda4:	920b      	str	r2, [sp, #44]	; 0x2c
   1eda6:	2700      	movs	r7, #0
   1eda8:	f88d 706f 	strb.w	r7, [sp, #111]	; 0x6f
   1edac:	9906      	ldr	r1, [sp, #24]
   1edae:	1c4a      	adds	r2, r1, #1
   1edb0:	f000 826d 	beq.w	1f28e <_svfprintf_r+0x6ce>
   1edb4:	f02b 0280 	bic.w	r2, fp, #128	; 0x80
   1edb8:	9203      	str	r2, [sp, #12]
   1edba:	ea54 0205 	orrs.w	r2, r4, r5
   1edbe:	f040 826c 	bne.w	1f29a <_svfprintf_r+0x6da>
   1edc2:	2900      	cmp	r1, #0
   1edc4:	f040 8451 	bne.w	1f66a <_svfprintf_r+0xaaa>
   1edc8:	2b00      	cmp	r3, #0
   1edca:	f040 850b 	bne.w	1f7e4 <_svfprintf_r+0xc24>
   1edce:	f01b 0301 	ands.w	r3, fp, #1
   1edd2:	930a      	str	r3, [sp, #40]	; 0x28
   1edd4:	f000 861a 	beq.w	1fa0c <_svfprintf_r+0xe4c>
   1edd8:	ae40      	add	r6, sp, #256	; 0x100
   1edda:	2330      	movs	r3, #48	; 0x30
   1eddc:	f806 3d41 	strb.w	r3, [r6, #-65]!
   1ede0:	9b06      	ldr	r3, [sp, #24]
   1ede2:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   1ede4:	4293      	cmp	r3, r2
   1ede6:	bfb8      	it	lt
   1ede8:	4613      	movlt	r3, r2
   1edea:	9304      	str	r3, [sp, #16]
   1edec:	2300      	movs	r3, #0
   1edee:	930e      	str	r3, [sp, #56]	; 0x38
   1edf0:	b117      	cbz	r7, 1edf8 <_svfprintf_r+0x238>
   1edf2:	9b04      	ldr	r3, [sp, #16]
   1edf4:	3301      	adds	r3, #1
   1edf6:	9304      	str	r3, [sp, #16]
   1edf8:	9b03      	ldr	r3, [sp, #12]
   1edfa:	f013 0302 	ands.w	r3, r3, #2
   1edfe:	930c      	str	r3, [sp, #48]	; 0x30
   1ee00:	d002      	beq.n	1ee08 <_svfprintf_r+0x248>
   1ee02:	9b04      	ldr	r3, [sp, #16]
   1ee04:	3302      	adds	r3, #2
   1ee06:	9304      	str	r3, [sp, #16]
   1ee08:	9b03      	ldr	r3, [sp, #12]
   1ee0a:	f013 0584 	ands.w	r5, r3, #132	; 0x84
   1ee0e:	f040 8320 	bne.w	1f452 <_svfprintf_r+0x892>
   1ee12:	9b09      	ldr	r3, [sp, #36]	; 0x24
   1ee14:	9a04      	ldr	r2, [sp, #16]
   1ee16:	eba3 0b02 	sub.w	fp, r3, r2
   1ee1a:	f1bb 0f00 	cmp.w	fp, #0
   1ee1e:	f340 8318 	ble.w	1f452 <_svfprintf_r+0x892>
   1ee22:	f1bb 0f10 	cmp.w	fp, #16
   1ee26:	9c25      	ldr	r4, [sp, #148]	; 0x94
   1ee28:	9a24      	ldr	r2, [sp, #144]	; 0x90
   1ee2a:	dd30      	ble.n	1ee8e <_svfprintf_r+0x2ce>
   1ee2c:	4643      	mov	r3, r8
   1ee2e:	4621      	mov	r1, r4
   1ee30:	46a8      	mov	r8, r5
   1ee32:	2710      	movs	r7, #16
   1ee34:	9c08      	ldr	r4, [sp, #32]
   1ee36:	9d07      	ldr	r5, [sp, #28]
   1ee38:	e00d      	b.n	1ee56 <_svfprintf_r+0x296>
   1ee3a:	bf00      	nop
   1ee3c:	f3af 8000 	nop.w
	...
   1ee48:	f1ab 0b10 	sub.w	fp, fp, #16
   1ee4c:	f1bb 0f10 	cmp.w	fp, #16
   1ee50:	f103 0308 	add.w	r3, r3, #8
   1ee54:	dd18      	ble.n	1ee88 <_svfprintf_r+0x2c8>
   1ee56:	3201      	adds	r2, #1
   1ee58:	48b7      	ldr	r0, [pc, #732]	; (1f138 <_svfprintf_r+0x578>)
   1ee5a:	9224      	str	r2, [sp, #144]	; 0x90
   1ee5c:	3110      	adds	r1, #16
   1ee5e:	2a07      	cmp	r2, #7
   1ee60:	9125      	str	r1, [sp, #148]	; 0x94
   1ee62:	e883 0081 	stmia.w	r3, {r0, r7}
   1ee66:	ddef      	ble.n	1ee48 <_svfprintf_r+0x288>
   1ee68:	aa23      	add	r2, sp, #140	; 0x8c
   1ee6a:	4629      	mov	r1, r5
   1ee6c:	4620      	mov	r0, r4
   1ee6e:	f003 f859 	bl	21f24 <__ssprint_r>
   1ee72:	2800      	cmp	r0, #0
   1ee74:	f47f af76 	bne.w	1ed64 <_svfprintf_r+0x1a4>
   1ee78:	f1ab 0b10 	sub.w	fp, fp, #16
   1ee7c:	f1bb 0f10 	cmp.w	fp, #16
   1ee80:	9925      	ldr	r1, [sp, #148]	; 0x94
   1ee82:	9a24      	ldr	r2, [sp, #144]	; 0x90
   1ee84:	464b      	mov	r3, r9
   1ee86:	dce6      	bgt.n	1ee56 <_svfprintf_r+0x296>
   1ee88:	4645      	mov	r5, r8
   1ee8a:	460c      	mov	r4, r1
   1ee8c:	4698      	mov	r8, r3
   1ee8e:	3201      	adds	r2, #1
   1ee90:	4ba9      	ldr	r3, [pc, #676]	; (1f138 <_svfprintf_r+0x578>)
   1ee92:	9224      	str	r2, [sp, #144]	; 0x90
   1ee94:	445c      	add	r4, fp
   1ee96:	2a07      	cmp	r2, #7
   1ee98:	9425      	str	r4, [sp, #148]	; 0x94
   1ee9a:	e888 0808 	stmia.w	r8, {r3, fp}
   1ee9e:	f300 84a6 	bgt.w	1f7ee <_svfprintf_r+0xc2e>
   1eea2:	f89d 706f 	ldrb.w	r7, [sp, #111]	; 0x6f
   1eea6:	f108 0808 	add.w	r8, r8, #8
   1eeaa:	b177      	cbz	r7, 1eeca <_svfprintf_r+0x30a>
   1eeac:	9b24      	ldr	r3, [sp, #144]	; 0x90
   1eeae:	3301      	adds	r3, #1
   1eeb0:	3401      	adds	r4, #1
   1eeb2:	f10d 016f 	add.w	r1, sp, #111	; 0x6f
   1eeb6:	2201      	movs	r2, #1
   1eeb8:	2b07      	cmp	r3, #7
   1eeba:	9425      	str	r4, [sp, #148]	; 0x94
   1eebc:	9324      	str	r3, [sp, #144]	; 0x90
   1eebe:	e888 0006 	stmia.w	r8, {r1, r2}
   1eec2:	f300 83f4 	bgt.w	1f6ae <_svfprintf_r+0xaee>
   1eec6:	f108 0808 	add.w	r8, r8, #8
   1eeca:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   1eecc:	b16b      	cbz	r3, 1eeea <_svfprintf_r+0x32a>
   1eece:	9b24      	ldr	r3, [sp, #144]	; 0x90
   1eed0:	3301      	adds	r3, #1
   1eed2:	3402      	adds	r4, #2
   1eed4:	a91c      	add	r1, sp, #112	; 0x70
   1eed6:	2202      	movs	r2, #2
   1eed8:	2b07      	cmp	r3, #7
   1eeda:	9425      	str	r4, [sp, #148]	; 0x94
   1eedc:	9324      	str	r3, [sp, #144]	; 0x90
   1eede:	e888 0006 	stmia.w	r8, {r1, r2}
   1eee2:	f300 83d9 	bgt.w	1f698 <_svfprintf_r+0xad8>
   1eee6:	f108 0808 	add.w	r8, r8, #8
   1eeea:	2d80      	cmp	r5, #128	; 0x80
   1eeec:	f000 8322 	beq.w	1f534 <_svfprintf_r+0x974>
   1eef0:	9b06      	ldr	r3, [sp, #24]
   1eef2:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   1eef4:	1a9f      	subs	r7, r3, r2
   1eef6:	2f00      	cmp	r7, #0
   1eef8:	dd36      	ble.n	1ef68 <_svfprintf_r+0x3a8>
   1eefa:	2f10      	cmp	r7, #16
   1eefc:	9b24      	ldr	r3, [sp, #144]	; 0x90
   1eefe:	4d8f      	ldr	r5, [pc, #572]	; (1f13c <_svfprintf_r+0x57c>)
   1ef00:	dd27      	ble.n	1ef52 <_svfprintf_r+0x392>
   1ef02:	4642      	mov	r2, r8
   1ef04:	4621      	mov	r1, r4
   1ef06:	46b0      	mov	r8, r6
   1ef08:	f04f 0b10 	mov.w	fp, #16
   1ef0c:	462e      	mov	r6, r5
   1ef0e:	9c08      	ldr	r4, [sp, #32]
   1ef10:	9d07      	ldr	r5, [sp, #28]
   1ef12:	e004      	b.n	1ef1e <_svfprintf_r+0x35e>
   1ef14:	3f10      	subs	r7, #16
   1ef16:	2f10      	cmp	r7, #16
   1ef18:	f102 0208 	add.w	r2, r2, #8
   1ef1c:	dd15      	ble.n	1ef4a <_svfprintf_r+0x38a>
   1ef1e:	3301      	adds	r3, #1
   1ef20:	3110      	adds	r1, #16
   1ef22:	2b07      	cmp	r3, #7
   1ef24:	9125      	str	r1, [sp, #148]	; 0x94
   1ef26:	9324      	str	r3, [sp, #144]	; 0x90
   1ef28:	e882 0840 	stmia.w	r2, {r6, fp}
   1ef2c:	ddf2      	ble.n	1ef14 <_svfprintf_r+0x354>
   1ef2e:	aa23      	add	r2, sp, #140	; 0x8c
   1ef30:	4629      	mov	r1, r5
   1ef32:	4620      	mov	r0, r4
   1ef34:	f002 fff6 	bl	21f24 <__ssprint_r>
   1ef38:	2800      	cmp	r0, #0
   1ef3a:	f47f af13 	bne.w	1ed64 <_svfprintf_r+0x1a4>
   1ef3e:	3f10      	subs	r7, #16
   1ef40:	2f10      	cmp	r7, #16
   1ef42:	9925      	ldr	r1, [sp, #148]	; 0x94
   1ef44:	9b24      	ldr	r3, [sp, #144]	; 0x90
   1ef46:	464a      	mov	r2, r9
   1ef48:	dce9      	bgt.n	1ef1e <_svfprintf_r+0x35e>
   1ef4a:	4635      	mov	r5, r6
   1ef4c:	460c      	mov	r4, r1
   1ef4e:	4646      	mov	r6, r8
   1ef50:	4690      	mov	r8, r2
   1ef52:	3301      	adds	r3, #1
   1ef54:	443c      	add	r4, r7
   1ef56:	2b07      	cmp	r3, #7
   1ef58:	9425      	str	r4, [sp, #148]	; 0x94
   1ef5a:	9324      	str	r3, [sp, #144]	; 0x90
   1ef5c:	e888 00a0 	stmia.w	r8, {r5, r7}
   1ef60:	f300 838f 	bgt.w	1f682 <_svfprintf_r+0xac2>
   1ef64:	f108 0808 	add.w	r8, r8, #8
   1ef68:	9b03      	ldr	r3, [sp, #12]
   1ef6a:	05df      	lsls	r7, r3, #23
   1ef6c:	f100 8273 	bmi.w	1f456 <_svfprintf_r+0x896>
   1ef70:	9b24      	ldr	r3, [sp, #144]	; 0x90
   1ef72:	990a      	ldr	r1, [sp, #40]	; 0x28
   1ef74:	f8c8 6000 	str.w	r6, [r8]
   1ef78:	3301      	adds	r3, #1
   1ef7a:	440c      	add	r4, r1
   1ef7c:	2b07      	cmp	r3, #7
   1ef7e:	9425      	str	r4, [sp, #148]	; 0x94
   1ef80:	f8c8 1004 	str.w	r1, [r8, #4]
   1ef84:	9324      	str	r3, [sp, #144]	; 0x90
   1ef86:	f300 835b 	bgt.w	1f640 <_svfprintf_r+0xa80>
   1ef8a:	f108 0808 	add.w	r8, r8, #8
   1ef8e:	9b03      	ldr	r3, [sp, #12]
   1ef90:	075b      	lsls	r3, r3, #29
   1ef92:	d53a      	bpl.n	1f00a <_svfprintf_r+0x44a>
   1ef94:	9b09      	ldr	r3, [sp, #36]	; 0x24
   1ef96:	9a04      	ldr	r2, [sp, #16]
   1ef98:	1a9d      	subs	r5, r3, r2
   1ef9a:	2d00      	cmp	r5, #0
   1ef9c:	dd35      	ble.n	1f00a <_svfprintf_r+0x44a>
   1ef9e:	2d10      	cmp	r5, #16
   1efa0:	9b24      	ldr	r3, [sp, #144]	; 0x90
   1efa2:	dd20      	ble.n	1efe6 <_svfprintf_r+0x426>
   1efa4:	2610      	movs	r6, #16
   1efa6:	9f08      	ldr	r7, [sp, #32]
   1efa8:	f8dd b01c 	ldr.w	fp, [sp, #28]
   1efac:	e004      	b.n	1efb8 <_svfprintf_r+0x3f8>
   1efae:	3d10      	subs	r5, #16
   1efb0:	2d10      	cmp	r5, #16
   1efb2:	f108 0808 	add.w	r8, r8, #8
   1efb6:	dd16      	ble.n	1efe6 <_svfprintf_r+0x426>
   1efb8:	3301      	adds	r3, #1
   1efba:	4a5f      	ldr	r2, [pc, #380]	; (1f138 <_svfprintf_r+0x578>)
   1efbc:	9324      	str	r3, [sp, #144]	; 0x90
   1efbe:	3410      	adds	r4, #16
   1efc0:	2b07      	cmp	r3, #7
   1efc2:	9425      	str	r4, [sp, #148]	; 0x94
   1efc4:	e888 0044 	stmia.w	r8, {r2, r6}
   1efc8:	ddf1      	ble.n	1efae <_svfprintf_r+0x3ee>
   1efca:	aa23      	add	r2, sp, #140	; 0x8c
   1efcc:	4659      	mov	r1, fp
   1efce:	4638      	mov	r0, r7
   1efd0:	f002 ffa8 	bl	21f24 <__ssprint_r>
   1efd4:	2800      	cmp	r0, #0
   1efd6:	f47f aec5 	bne.w	1ed64 <_svfprintf_r+0x1a4>
   1efda:	3d10      	subs	r5, #16
   1efdc:	2d10      	cmp	r5, #16
   1efde:	9c25      	ldr	r4, [sp, #148]	; 0x94
   1efe0:	9b24      	ldr	r3, [sp, #144]	; 0x90
   1efe2:	46c8      	mov	r8, r9
   1efe4:	dce8      	bgt.n	1efb8 <_svfprintf_r+0x3f8>
   1efe6:	3301      	adds	r3, #1
   1efe8:	4a53      	ldr	r2, [pc, #332]	; (1f138 <_svfprintf_r+0x578>)
   1efea:	9324      	str	r3, [sp, #144]	; 0x90
   1efec:	442c      	add	r4, r5
   1efee:	2b07      	cmp	r3, #7
   1eff0:	9425      	str	r4, [sp, #148]	; 0x94
   1eff2:	e888 0024 	stmia.w	r8, {r2, r5}
   1eff6:	dd08      	ble.n	1f00a <_svfprintf_r+0x44a>
   1eff8:	aa23      	add	r2, sp, #140	; 0x8c
   1effa:	9907      	ldr	r1, [sp, #28]
   1effc:	9808      	ldr	r0, [sp, #32]
   1effe:	f002 ff91 	bl	21f24 <__ssprint_r>
   1f002:	2800      	cmp	r0, #0
   1f004:	f47f aeae 	bne.w	1ed64 <_svfprintf_r+0x1a4>
   1f008:	9c25      	ldr	r4, [sp, #148]	; 0x94
   1f00a:	9b05      	ldr	r3, [sp, #20]
   1f00c:	9a09      	ldr	r2, [sp, #36]	; 0x24
   1f00e:	9904      	ldr	r1, [sp, #16]
   1f010:	428a      	cmp	r2, r1
   1f012:	bfac      	ite	ge
   1f014:	189b      	addge	r3, r3, r2
   1f016:	185b      	addlt	r3, r3, r1
   1f018:	9305      	str	r3, [sp, #20]
   1f01a:	2c00      	cmp	r4, #0
   1f01c:	f040 831b 	bne.w	1f656 <_svfprintf_r+0xa96>
   1f020:	2300      	movs	r3, #0
   1f022:	9324      	str	r3, [sp, #144]	; 0x90
   1f024:	46c8      	mov	r8, r9
   1f026:	e5f2      	b.n	1ec0e <_svfprintf_r+0x4e>
   1f028:	930d      	str	r3, [sp, #52]	; 0x34
   1f02a:	f01b 0320 	ands.w	r3, fp, #32
   1f02e:	f040 81de 	bne.w	1f3ee <_svfprintf_r+0x82e>
   1f032:	f01b 0210 	ands.w	r2, fp, #16
   1f036:	f040 842d 	bne.w	1f894 <_svfprintf_r+0xcd4>
   1f03a:	f01b 0340 	ands.w	r3, fp, #64	; 0x40
   1f03e:	f000 8429 	beq.w	1f894 <_svfprintf_r+0xcd4>
   1f042:	990b      	ldr	r1, [sp, #44]	; 0x2c
   1f044:	4613      	mov	r3, r2
   1f046:	460a      	mov	r2, r1
   1f048:	3204      	adds	r2, #4
   1f04a:	880c      	ldrh	r4, [r1, #0]
   1f04c:	920b      	str	r2, [sp, #44]	; 0x2c
   1f04e:	2500      	movs	r5, #0
   1f050:	e6a9      	b.n	1eda6 <_svfprintf_r+0x1e6>
   1f052:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
   1f054:	930d      	str	r3, [sp, #52]	; 0x34
   1f056:	6816      	ldr	r6, [r2, #0]
   1f058:	2400      	movs	r4, #0
   1f05a:	f88d 406f 	strb.w	r4, [sp, #111]	; 0x6f
   1f05e:	1d15      	adds	r5, r2, #4
   1f060:	2e00      	cmp	r6, #0
   1f062:	f000 86b5 	beq.w	1fdd0 <_svfprintf_r+0x1210>
   1f066:	9a06      	ldr	r2, [sp, #24]
   1f068:	1c53      	adds	r3, r2, #1
   1f06a:	f000 8617 	beq.w	1fc9c <_svfprintf_r+0x10dc>
   1f06e:	4621      	mov	r1, r4
   1f070:	4630      	mov	r0, r6
   1f072:	f7fe ff25 	bl	1dec0 <memchr>
   1f076:	2800      	cmp	r0, #0
   1f078:	f000 8708 	beq.w	1fe8c <_svfprintf_r+0x12cc>
   1f07c:	1b83      	subs	r3, r0, r6
   1f07e:	930a      	str	r3, [sp, #40]	; 0x28
   1f080:	9406      	str	r4, [sp, #24]
   1f082:	950b      	str	r5, [sp, #44]	; 0x2c
   1f084:	f8cd b00c 	str.w	fp, [sp, #12]
   1f088:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
   1f08c:	9304      	str	r3, [sp, #16]
   1f08e:	940e      	str	r4, [sp, #56]	; 0x38
   1f090:	f89d 706f 	ldrb.w	r7, [sp, #111]	; 0x6f
   1f094:	e6ac      	b.n	1edf0 <_svfprintf_r+0x230>
   1f096:	f89a 3000 	ldrb.w	r3, [sl]
   1f09a:	2201      	movs	r2, #1
   1f09c:	212b      	movs	r1, #43	; 0x2b
   1f09e:	e5e7      	b.n	1ec70 <_svfprintf_r+0xb0>
   1f0a0:	f04b 0b20 	orr.w	fp, fp, #32
   1f0a4:	f89a 3000 	ldrb.w	r3, [sl]
   1f0a8:	e5e2      	b.n	1ec70 <_svfprintf_r+0xb0>
   1f0aa:	930d      	str	r3, [sp, #52]	; 0x34
   1f0ac:	2a00      	cmp	r2, #0
   1f0ae:	f040 87aa 	bne.w	20006 <_svfprintf_r+0x1446>
   1f0b2:	4b23      	ldr	r3, [pc, #140]	; (1f140 <_svfprintf_r+0x580>)
   1f0b4:	9312      	str	r3, [sp, #72]	; 0x48
   1f0b6:	f01b 0f20 	tst.w	fp, #32
   1f0ba:	f040 8112 	bne.w	1f2e2 <_svfprintf_r+0x722>
   1f0be:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
   1f0c0:	f01b 0f10 	tst.w	fp, #16
   1f0c4:	4613      	mov	r3, r2
   1f0c6:	f040 83e0 	bne.w	1f88a <_svfprintf_r+0xcca>
   1f0ca:	f01b 0f40 	tst.w	fp, #64	; 0x40
   1f0ce:	f000 83dc 	beq.w	1f88a <_svfprintf_r+0xcca>
   1f0d2:	3304      	adds	r3, #4
   1f0d4:	8814      	ldrh	r4, [r2, #0]
   1f0d6:	930b      	str	r3, [sp, #44]	; 0x2c
   1f0d8:	2500      	movs	r5, #0
   1f0da:	f01b 0f01 	tst.w	fp, #1
   1f0de:	f000 810d 	beq.w	1f2fc <_svfprintf_r+0x73c>
   1f0e2:	ea54 0305 	orrs.w	r3, r4, r5
   1f0e6:	f000 8109 	beq.w	1f2fc <_svfprintf_r+0x73c>
   1f0ea:	2330      	movs	r3, #48	; 0x30
   1f0ec:	f89d 2034 	ldrb.w	r2, [sp, #52]	; 0x34
   1f0f0:	f88d 3070 	strb.w	r3, [sp, #112]	; 0x70
   1f0f4:	f88d 2071 	strb.w	r2, [sp, #113]	; 0x71
   1f0f8:	f04b 0b02 	orr.w	fp, fp, #2
   1f0fc:	2302      	movs	r3, #2
   1f0fe:	e652      	b.n	1eda6 <_svfprintf_r+0x1e6>
   1f100:	f89a 3000 	ldrb.w	r3, [sl]
   1f104:	2900      	cmp	r1, #0
   1f106:	f47f adb3 	bne.w	1ec70 <_svfprintf_r+0xb0>
   1f10a:	2201      	movs	r2, #1
   1f10c:	2120      	movs	r1, #32
   1f10e:	e5af      	b.n	1ec70 <_svfprintf_r+0xb0>
   1f110:	f04b 0b01 	orr.w	fp, fp, #1
   1f114:	f89a 3000 	ldrb.w	r3, [sl]
   1f118:	e5aa      	b.n	1ec70 <_svfprintf_r+0xb0>
   1f11a:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
   1f11c:	6823      	ldr	r3, [r4, #0]
   1f11e:	9309      	str	r3, [sp, #36]	; 0x24
   1f120:	4618      	mov	r0, r3
   1f122:	2800      	cmp	r0, #0
   1f124:	4623      	mov	r3, r4
   1f126:	f103 0304 	add.w	r3, r3, #4
   1f12a:	f6ff ae03 	blt.w	1ed34 <_svfprintf_r+0x174>
   1f12e:	930b      	str	r3, [sp, #44]	; 0x2c
   1f130:	f89a 3000 	ldrb.w	r3, [sl]
   1f134:	e59c      	b.n	1ec70 <_svfprintf_r+0xb0>
   1f136:	bf00      	nop
   1f138:	000247e4 	.word	0x000247e4
   1f13c:	000247f4 	.word	0x000247f4
   1f140:	000247c4 	.word	0x000247c4
   1f144:	f04b 0b10 	orr.w	fp, fp, #16
   1f148:	f01b 0f20 	tst.w	fp, #32
   1f14c:	930d      	str	r3, [sp, #52]	; 0x34
   1f14e:	f43f ae1b 	beq.w	1ed88 <_svfprintf_r+0x1c8>
   1f152:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
   1f154:	3507      	adds	r5, #7
   1f156:	f025 0307 	bic.w	r3, r5, #7
   1f15a:	f103 0208 	add.w	r2, r3, #8
   1f15e:	e9d3 4500 	ldrd	r4, r5, [r3]
   1f162:	920b      	str	r2, [sp, #44]	; 0x2c
   1f164:	2301      	movs	r3, #1
   1f166:	e61e      	b.n	1eda6 <_svfprintf_r+0x1e6>
   1f168:	f89a 3000 	ldrb.w	r3, [sl]
   1f16c:	2b2a      	cmp	r3, #42	; 0x2a
   1f16e:	f10a 0401 	add.w	r4, sl, #1
   1f172:	f000 873b 	beq.w	1ffec <_svfprintf_r+0x142c>
   1f176:	f1a3 0030 	sub.w	r0, r3, #48	; 0x30
   1f17a:	2809      	cmp	r0, #9
   1f17c:	46a2      	mov	sl, r4
   1f17e:	f200 8691 	bhi.w	1fea4 <_svfprintf_r+0x12e4>
   1f182:	2300      	movs	r3, #0
   1f184:	461c      	mov	r4, r3
   1f186:	f81a 3b01 	ldrb.w	r3, [sl], #1
   1f18a:	eb04 0484 	add.w	r4, r4, r4, lsl #2
   1f18e:	eb00 0444 	add.w	r4, r0, r4, lsl #1
   1f192:	f1a3 0030 	sub.w	r0, r3, #48	; 0x30
   1f196:	2809      	cmp	r0, #9
   1f198:	d9f5      	bls.n	1f186 <_svfprintf_r+0x5c6>
   1f19a:	9406      	str	r4, [sp, #24]
   1f19c:	e56a      	b.n	1ec74 <_svfprintf_r+0xb4>
   1f19e:	f04b 0b80 	orr.w	fp, fp, #128	; 0x80
   1f1a2:	f89a 3000 	ldrb.w	r3, [sl]
   1f1a6:	e563      	b.n	1ec70 <_svfprintf_r+0xb0>
   1f1a8:	f04b 0b40 	orr.w	fp, fp, #64	; 0x40
   1f1ac:	f89a 3000 	ldrb.w	r3, [sl]
   1f1b0:	e55e      	b.n	1ec70 <_svfprintf_r+0xb0>
   1f1b2:	f89a 3000 	ldrb.w	r3, [sl]
   1f1b6:	2b6c      	cmp	r3, #108	; 0x6c
   1f1b8:	bf03      	ittte	eq
   1f1ba:	f89a 3001 	ldrbeq.w	r3, [sl, #1]
   1f1be:	f04b 0b20 	orreq.w	fp, fp, #32
   1f1c2:	f10a 0a01 	addeq.w	sl, sl, #1
   1f1c6:	f04b 0b10 	orrne.w	fp, fp, #16
   1f1ca:	e551      	b.n	1ec70 <_svfprintf_r+0xb0>
   1f1cc:	2a00      	cmp	r2, #0
   1f1ce:	f040 871e 	bne.w	2000e <_svfprintf_r+0x144e>
   1f1d2:	f01b 0f20 	tst.w	fp, #32
   1f1d6:	f040 8509 	bne.w	1fbec <_svfprintf_r+0x102c>
   1f1da:	f01b 0f10 	tst.w	fp, #16
   1f1de:	f040 84bc 	bne.w	1fb5a <_svfprintf_r+0xf9a>
   1f1e2:	f01b 0f40 	tst.w	fp, #64	; 0x40
   1f1e6:	f000 84b8 	beq.w	1fb5a <_svfprintf_r+0xf9a>
   1f1ea:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
   1f1ec:	6813      	ldr	r3, [r2, #0]
   1f1ee:	3204      	adds	r2, #4
   1f1f0:	920b      	str	r2, [sp, #44]	; 0x2c
   1f1f2:	f8bd 2014 	ldrh.w	r2, [sp, #20]
   1f1f6:	801a      	strh	r2, [r3, #0]
   1f1f8:	e509      	b.n	1ec0e <_svfprintf_r+0x4e>
   1f1fa:	990b      	ldr	r1, [sp, #44]	; 0x2c
   1f1fc:	4bb9      	ldr	r3, [pc, #740]	; (1f4e4 <_svfprintf_r+0x924>)
   1f1fe:	680c      	ldr	r4, [r1, #0]
   1f200:	9312      	str	r3, [sp, #72]	; 0x48
   1f202:	2230      	movs	r2, #48	; 0x30
   1f204:	2378      	movs	r3, #120	; 0x78
   1f206:	3104      	adds	r1, #4
   1f208:	f88d 3071 	strb.w	r3, [sp, #113]	; 0x71
   1f20c:	930d      	str	r3, [sp, #52]	; 0x34
   1f20e:	f04b 0b02 	orr.w	fp, fp, #2
   1f212:	910b      	str	r1, [sp, #44]	; 0x2c
   1f214:	2500      	movs	r5, #0
   1f216:	f88d 2070 	strb.w	r2, [sp, #112]	; 0x70
   1f21a:	2302      	movs	r3, #2
   1f21c:	e5c3      	b.n	1eda6 <_svfprintf_r+0x1e6>
   1f21e:	990b      	ldr	r1, [sp, #44]	; 0x2c
   1f220:	930d      	str	r3, [sp, #52]	; 0x34
   1f222:	680a      	ldr	r2, [r1, #0]
   1f224:	f88d 2098 	strb.w	r2, [sp, #152]	; 0x98
   1f228:	2300      	movs	r3, #0
   1f22a:	460a      	mov	r2, r1
   1f22c:	461f      	mov	r7, r3
   1f22e:	f88d 306f 	strb.w	r3, [sp, #111]	; 0x6f
   1f232:	3204      	adds	r2, #4
   1f234:	2301      	movs	r3, #1
   1f236:	9304      	str	r3, [sp, #16]
   1f238:	f8cd b00c 	str.w	fp, [sp, #12]
   1f23c:	9706      	str	r7, [sp, #24]
   1f23e:	970e      	str	r7, [sp, #56]	; 0x38
   1f240:	920b      	str	r2, [sp, #44]	; 0x2c
   1f242:	930a      	str	r3, [sp, #40]	; 0x28
   1f244:	ae26      	add	r6, sp, #152	; 0x98
   1f246:	e5d7      	b.n	1edf8 <_svfprintf_r+0x238>
   1f248:	930d      	str	r3, [sp, #52]	; 0x34
   1f24a:	2a00      	cmp	r2, #0
   1f24c:	f040 86fe 	bne.w	2004c <_svfprintf_r+0x148c>
   1f250:	f01b 0f20 	tst.w	fp, #32
   1f254:	d15d      	bne.n	1f312 <_svfprintf_r+0x752>
   1f256:	f01b 0f10 	tst.w	fp, #16
   1f25a:	f040 8335 	bne.w	1f8c8 <_svfprintf_r+0xd08>
   1f25e:	f01b 0f40 	tst.w	fp, #64	; 0x40
   1f262:	f000 8331 	beq.w	1f8c8 <_svfprintf_r+0xd08>
   1f266:	990b      	ldr	r1, [sp, #44]	; 0x2c
   1f268:	f9b1 4000 	ldrsh.w	r4, [r1]
   1f26c:	3104      	adds	r1, #4
   1f26e:	17e5      	asrs	r5, r4, #31
   1f270:	4622      	mov	r2, r4
   1f272:	462b      	mov	r3, r5
   1f274:	910b      	str	r1, [sp, #44]	; 0x2c
   1f276:	2a00      	cmp	r2, #0
   1f278:	f173 0300 	sbcs.w	r3, r3, #0
   1f27c:	db58      	blt.n	1f330 <_svfprintf_r+0x770>
   1f27e:	9906      	ldr	r1, [sp, #24]
   1f280:	f89d 706f 	ldrb.w	r7, [sp, #111]	; 0x6f
   1f284:	1c4a      	adds	r2, r1, #1
   1f286:	f04f 0301 	mov.w	r3, #1
   1f28a:	f47f ad93 	bne.w	1edb4 <_svfprintf_r+0x1f4>
   1f28e:	ea54 0205 	orrs.w	r2, r4, r5
   1f292:	f000 81ec 	beq.w	1f66e <_svfprintf_r+0xaae>
   1f296:	f8cd b00c 	str.w	fp, [sp, #12]
   1f29a:	2b01      	cmp	r3, #1
   1f29c:	f000 8283 	beq.w	1f7a6 <_svfprintf_r+0xbe6>
   1f2a0:	2b02      	cmp	r3, #2
   1f2a2:	f040 8213 	bne.w	1f6cc <_svfprintf_r+0xb0c>
   1f2a6:	9812      	ldr	r0, [sp, #72]	; 0x48
   1f2a8:	464e      	mov	r6, r9
   1f2aa:	0923      	lsrs	r3, r4, #4
   1f2ac:	f004 010f 	and.w	r1, r4, #15
   1f2b0:	ea43 7305 	orr.w	r3, r3, r5, lsl #28
   1f2b4:	092a      	lsrs	r2, r5, #4
   1f2b6:	461c      	mov	r4, r3
   1f2b8:	4615      	mov	r5, r2
   1f2ba:	5c43      	ldrb	r3, [r0, r1]
   1f2bc:	f806 3d01 	strb.w	r3, [r6, #-1]!
   1f2c0:	ea54 0305 	orrs.w	r3, r4, r5
   1f2c4:	d1f1      	bne.n	1f2aa <_svfprintf_r+0x6ea>
   1f2c6:	eba9 0306 	sub.w	r3, r9, r6
   1f2ca:	930a      	str	r3, [sp, #40]	; 0x28
   1f2cc:	e588      	b.n	1ede0 <_svfprintf_r+0x220>
   1f2ce:	930d      	str	r3, [sp, #52]	; 0x34
   1f2d0:	2a00      	cmp	r2, #0
   1f2d2:	f040 86b7 	bne.w	20044 <_svfprintf_r+0x1484>
   1f2d6:	4b84      	ldr	r3, [pc, #528]	; (1f4e8 <_svfprintf_r+0x928>)
   1f2d8:	9312      	str	r3, [sp, #72]	; 0x48
   1f2da:	f01b 0f20 	tst.w	fp, #32
   1f2de:	f43f aeee 	beq.w	1f0be <_svfprintf_r+0x4fe>
   1f2e2:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
   1f2e4:	3507      	adds	r5, #7
   1f2e6:	f025 0307 	bic.w	r3, r5, #7
   1f2ea:	f103 0208 	add.w	r2, r3, #8
   1f2ee:	f01b 0f01 	tst.w	fp, #1
   1f2f2:	920b      	str	r2, [sp, #44]	; 0x2c
   1f2f4:	e9d3 4500 	ldrd	r4, r5, [r3]
   1f2f8:	f47f aef3 	bne.w	1f0e2 <_svfprintf_r+0x522>
   1f2fc:	2302      	movs	r3, #2
   1f2fe:	e552      	b.n	1eda6 <_svfprintf_r+0x1e6>
   1f300:	930d      	str	r3, [sp, #52]	; 0x34
   1f302:	2a00      	cmp	r2, #0
   1f304:	f040 869a 	bne.w	2003c <_svfprintf_r+0x147c>
   1f308:	f04b 0b10 	orr.w	fp, fp, #16
   1f30c:	f01b 0f20 	tst.w	fp, #32
   1f310:	d0a1      	beq.n	1f256 <_svfprintf_r+0x696>
   1f312:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
   1f314:	3507      	adds	r5, #7
   1f316:	f025 0507 	bic.w	r5, r5, #7
   1f31a:	e9d5 2300 	ldrd	r2, r3, [r5]
   1f31e:	2a00      	cmp	r2, #0
   1f320:	f105 0108 	add.w	r1, r5, #8
   1f324:	461d      	mov	r5, r3
   1f326:	f173 0300 	sbcs.w	r3, r3, #0
   1f32a:	910b      	str	r1, [sp, #44]	; 0x2c
   1f32c:	4614      	mov	r4, r2
   1f32e:	daa6      	bge.n	1f27e <_svfprintf_r+0x6be>
   1f330:	272d      	movs	r7, #45	; 0x2d
   1f332:	4264      	negs	r4, r4
   1f334:	eb65 0545 	sbc.w	r5, r5, r5, lsl #1
   1f338:	f88d 706f 	strb.w	r7, [sp, #111]	; 0x6f
   1f33c:	2301      	movs	r3, #1
   1f33e:	e535      	b.n	1edac <_svfprintf_r+0x1ec>
   1f340:	930d      	str	r3, [sp, #52]	; 0x34
   1f342:	2a00      	cmp	r2, #0
   1f344:	f040 8676 	bne.w	20034 <_svfprintf_r+0x1474>
   1f348:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
   1f34a:	f01b 0f08 	tst.w	fp, #8
   1f34e:	f105 0507 	add.w	r5, r5, #7
   1f352:	f000 83e8 	beq.w	1fb26 <_svfprintf_r+0xf66>
   1f356:	f025 0307 	bic.w	r3, r5, #7
   1f35a:	ed93 7b00 	vldr	d7, [r3]
   1f35e:	ed8d 7b10 	vstr	d7, [sp, #64]	; 0x40
   1f362:	f103 0208 	add.w	r2, r3, #8
   1f366:	920b      	str	r2, [sp, #44]	; 0x2c
   1f368:	e9dd 1210 	ldrd	r1, r2, [sp, #64]	; 0x40
   1f36c:	f022 4300 	bic.w	r3, r2, #2147483648	; 0x80000000
   1f370:	9116      	str	r1, [sp, #88]	; 0x58
   1f372:	9317      	str	r3, [sp, #92]	; 0x5c
   1f374:	e9dd 4516 	ldrd	r4, r5, [sp, #88]	; 0x58
   1f378:	f04f 32ff 	mov.w	r2, #4294967295
   1f37c:	4620      	mov	r0, r4
   1f37e:	4629      	mov	r1, r5
   1f380:	4b5a      	ldr	r3, [pc, #360]	; (1f4ec <_svfprintf_r+0x92c>)
   1f382:	f002 ffa5 	bl	222d0 <__aeabi_dcmpun>
   1f386:	2800      	cmp	r0, #0
   1f388:	f040 834f 	bne.w	1fa2a <_svfprintf_r+0xe6a>
   1f38c:	f04f 32ff 	mov.w	r2, #4294967295
   1f390:	4b56      	ldr	r3, [pc, #344]	; (1f4ec <_svfprintf_r+0x92c>)
   1f392:	4620      	mov	r0, r4
   1f394:	4629      	mov	r1, r5
   1f396:	f7fc fcb9 	bl	1bd0c <__aeabi_dcmple>
   1f39a:	2800      	cmp	r0, #0
   1f39c:	f040 8345 	bne.w	1fa2a <_svfprintf_r+0xe6a>
   1f3a0:	2200      	movs	r2, #0
   1f3a2:	2300      	movs	r3, #0
   1f3a4:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
   1f3a8:	f7fc fca6 	bl	1bcf8 <__aeabi_dcmplt>
   1f3ac:	2800      	cmp	r0, #0
   1f3ae:	f040 8533 	bne.w	1fe18 <_svfprintf_r+0x1258>
   1f3b2:	f89d 706f 	ldrb.w	r7, [sp, #111]	; 0x6f
   1f3b6:	4e4e      	ldr	r6, [pc, #312]	; (1f4f0 <_svfprintf_r+0x930>)
   1f3b8:	4b4e      	ldr	r3, [pc, #312]	; (1f4f4 <_svfprintf_r+0x934>)
   1f3ba:	f02b 0080 	bic.w	r0, fp, #128	; 0x80
   1f3be:	9003      	str	r0, [sp, #12]
   1f3c0:	980d      	ldr	r0, [sp, #52]	; 0x34
   1f3c2:	2203      	movs	r2, #3
   1f3c4:	2100      	movs	r1, #0
   1f3c6:	9204      	str	r2, [sp, #16]
   1f3c8:	9106      	str	r1, [sp, #24]
   1f3ca:	2847      	cmp	r0, #71	; 0x47
   1f3cc:	bfd8      	it	le
   1f3ce:	461e      	movle	r6, r3
   1f3d0:	920a      	str	r2, [sp, #40]	; 0x28
   1f3d2:	910e      	str	r1, [sp, #56]	; 0x38
   1f3d4:	e50c      	b.n	1edf0 <_svfprintf_r+0x230>
   1f3d6:	f04b 0b08 	orr.w	fp, fp, #8
   1f3da:	f89a 3000 	ldrb.w	r3, [sl]
   1f3de:	e447      	b.n	1ec70 <_svfprintf_r+0xb0>
   1f3e0:	f04b 0b10 	orr.w	fp, fp, #16
   1f3e4:	930d      	str	r3, [sp, #52]	; 0x34
   1f3e6:	f01b 0320 	ands.w	r3, fp, #32
   1f3ea:	f43f ae22 	beq.w	1f032 <_svfprintf_r+0x472>
   1f3ee:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
   1f3f0:	3507      	adds	r5, #7
   1f3f2:	f025 0307 	bic.w	r3, r5, #7
   1f3f6:	f103 0208 	add.w	r2, r3, #8
   1f3fa:	e9d3 4500 	ldrd	r4, r5, [r3]
   1f3fe:	920b      	str	r2, [sp, #44]	; 0x2c
   1f400:	2300      	movs	r3, #0
   1f402:	e4d0      	b.n	1eda6 <_svfprintf_r+0x1e6>
   1f404:	f1a3 0030 	sub.w	r0, r3, #48	; 0x30
   1f408:	2300      	movs	r3, #0
   1f40a:	461c      	mov	r4, r3
   1f40c:	f81a 3b01 	ldrb.w	r3, [sl], #1
   1f410:	eb04 0484 	add.w	r4, r4, r4, lsl #2
   1f414:	eb00 0444 	add.w	r4, r0, r4, lsl #1
   1f418:	f1a3 0030 	sub.w	r0, r3, #48	; 0x30
   1f41c:	2809      	cmp	r0, #9
   1f41e:	d9f5      	bls.n	1f40c <_svfprintf_r+0x84c>
   1f420:	9409      	str	r4, [sp, #36]	; 0x24
   1f422:	e427      	b.n	1ec74 <_svfprintf_r+0xb4>
   1f424:	930d      	str	r3, [sp, #52]	; 0x34
   1f426:	2a00      	cmp	r2, #0
   1f428:	f040 85f5 	bne.w	20016 <_svfprintf_r+0x1456>
   1f42c:	9a0d      	ldr	r2, [sp, #52]	; 0x34
   1f42e:	2a00      	cmp	r2, #0
   1f430:	f43f ac91 	beq.w	1ed56 <_svfprintf_r+0x196>
   1f434:	2300      	movs	r3, #0
   1f436:	2101      	movs	r1, #1
   1f438:	461f      	mov	r7, r3
   1f43a:	9104      	str	r1, [sp, #16]
   1f43c:	f88d 2098 	strb.w	r2, [sp, #152]	; 0x98
   1f440:	f8cd b00c 	str.w	fp, [sp, #12]
   1f444:	f88d 306f 	strb.w	r3, [sp, #111]	; 0x6f
   1f448:	9306      	str	r3, [sp, #24]
   1f44a:	930e      	str	r3, [sp, #56]	; 0x38
   1f44c:	910a      	str	r1, [sp, #40]	; 0x28
   1f44e:	ae26      	add	r6, sp, #152	; 0x98
   1f450:	e4d2      	b.n	1edf8 <_svfprintf_r+0x238>
   1f452:	9c25      	ldr	r4, [sp, #148]	; 0x94
   1f454:	e529      	b.n	1eeaa <_svfprintf_r+0x2ea>
   1f456:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   1f458:	2b65      	cmp	r3, #101	; 0x65
   1f45a:	f340 80a9 	ble.w	1f5b0 <_svfprintf_r+0x9f0>
   1f45e:	2200      	movs	r2, #0
   1f460:	2300      	movs	r3, #0
   1f462:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
   1f466:	f7fc fc3d 	bl	1bce4 <__aeabi_dcmpeq>
   1f46a:	2800      	cmp	r0, #0
   1f46c:	f000 8152 	beq.w	1f714 <_svfprintf_r+0xb54>
   1f470:	9b24      	ldr	r3, [sp, #144]	; 0x90
   1f472:	4a21      	ldr	r2, [pc, #132]	; (1f4f8 <_svfprintf_r+0x938>)
   1f474:	f8c8 2000 	str.w	r2, [r8]
   1f478:	3301      	adds	r3, #1
   1f47a:	3401      	adds	r4, #1
   1f47c:	2201      	movs	r2, #1
   1f47e:	2b07      	cmp	r3, #7
   1f480:	9425      	str	r4, [sp, #148]	; 0x94
   1f482:	9324      	str	r3, [sp, #144]	; 0x90
   1f484:	f8c8 2004 	str.w	r2, [r8, #4]
   1f488:	f300 836f 	bgt.w	1fb6a <_svfprintf_r+0xfaa>
   1f48c:	f108 0808 	add.w	r8, r8, #8
   1f490:	9b1d      	ldr	r3, [sp, #116]	; 0x74
   1f492:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
   1f494:	9c25      	ldr	r4, [sp, #148]	; 0x94
   1f496:	4293      	cmp	r3, r2
   1f498:	db03      	blt.n	1f4a2 <_svfprintf_r+0x8e2>
   1f49a:	9b03      	ldr	r3, [sp, #12]
   1f49c:	07dd      	lsls	r5, r3, #31
   1f49e:	f57f ad76 	bpl.w	1ef8e <_svfprintf_r+0x3ce>
   1f4a2:	9b24      	ldr	r3, [sp, #144]	; 0x90
   1f4a4:	9913      	ldr	r1, [sp, #76]	; 0x4c
   1f4a6:	9a14      	ldr	r2, [sp, #80]	; 0x50
   1f4a8:	f8c8 2000 	str.w	r2, [r8]
   1f4ac:	3301      	adds	r3, #1
   1f4ae:	440c      	add	r4, r1
   1f4b0:	2b07      	cmp	r3, #7
   1f4b2:	f8c8 1004 	str.w	r1, [r8, #4]
   1f4b6:	9425      	str	r4, [sp, #148]	; 0x94
   1f4b8:	9324      	str	r3, [sp, #144]	; 0x90
   1f4ba:	f300 83a3 	bgt.w	1fc04 <_svfprintf_r+0x1044>
   1f4be:	f108 0808 	add.w	r8, r8, #8
   1f4c2:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   1f4c4:	1e5e      	subs	r6, r3, #1
   1f4c6:	2e00      	cmp	r6, #0
   1f4c8:	f77f ad61 	ble.w	1ef8e <_svfprintf_r+0x3ce>
   1f4cc:	2e10      	cmp	r6, #16
   1f4ce:	9b24      	ldr	r3, [sp, #144]	; 0x90
   1f4d0:	4d0a      	ldr	r5, [pc, #40]	; (1f4fc <_svfprintf_r+0x93c>)
   1f4d2:	f340 81ef 	ble.w	1f8b4 <_svfprintf_r+0xcf4>
   1f4d6:	4622      	mov	r2, r4
   1f4d8:	2710      	movs	r7, #16
   1f4da:	f8dd b020 	ldr.w	fp, [sp, #32]
   1f4de:	9c07      	ldr	r4, [sp, #28]
   1f4e0:	e014      	b.n	1f50c <_svfprintf_r+0x94c>
   1f4e2:	bf00      	nop
   1f4e4:	000247c4 	.word	0x000247c4
   1f4e8:	000247b0 	.word	0x000247b0
   1f4ec:	7fefffff 	.word	0x7fefffff
   1f4f0:	000247a4 	.word	0x000247a4
   1f4f4:	000247a0 	.word	0x000247a0
   1f4f8:	000247e0 	.word	0x000247e0
   1f4fc:	000247f4 	.word	0x000247f4
   1f500:	f108 0808 	add.w	r8, r8, #8
   1f504:	3e10      	subs	r6, #16
   1f506:	2e10      	cmp	r6, #16
   1f508:	f340 81d3 	ble.w	1f8b2 <_svfprintf_r+0xcf2>
   1f50c:	3301      	adds	r3, #1
   1f50e:	3210      	adds	r2, #16
   1f510:	2b07      	cmp	r3, #7
   1f512:	9225      	str	r2, [sp, #148]	; 0x94
   1f514:	9324      	str	r3, [sp, #144]	; 0x90
   1f516:	e888 00a0 	stmia.w	r8, {r5, r7}
   1f51a:	ddf1      	ble.n	1f500 <_svfprintf_r+0x940>
   1f51c:	aa23      	add	r2, sp, #140	; 0x8c
   1f51e:	4621      	mov	r1, r4
   1f520:	4658      	mov	r0, fp
   1f522:	f002 fcff 	bl	21f24 <__ssprint_r>
   1f526:	2800      	cmp	r0, #0
   1f528:	f47f ac1c 	bne.w	1ed64 <_svfprintf_r+0x1a4>
   1f52c:	9a25      	ldr	r2, [sp, #148]	; 0x94
   1f52e:	9b24      	ldr	r3, [sp, #144]	; 0x90
   1f530:	46c8      	mov	r8, r9
   1f532:	e7e7      	b.n	1f504 <_svfprintf_r+0x944>
   1f534:	9b09      	ldr	r3, [sp, #36]	; 0x24
   1f536:	9a04      	ldr	r2, [sp, #16]
   1f538:	1a9f      	subs	r7, r3, r2
   1f53a:	2f00      	cmp	r7, #0
   1f53c:	f77f acd8 	ble.w	1eef0 <_svfprintf_r+0x330>
   1f540:	2f10      	cmp	r7, #16
   1f542:	9b24      	ldr	r3, [sp, #144]	; 0x90
   1f544:	4db7      	ldr	r5, [pc, #732]	; (1f824 <_svfprintf_r+0xc64>)
   1f546:	dd27      	ble.n	1f598 <_svfprintf_r+0x9d8>
   1f548:	4642      	mov	r2, r8
   1f54a:	4621      	mov	r1, r4
   1f54c:	46b0      	mov	r8, r6
   1f54e:	f04f 0b10 	mov.w	fp, #16
   1f552:	462e      	mov	r6, r5
   1f554:	9c08      	ldr	r4, [sp, #32]
   1f556:	9d07      	ldr	r5, [sp, #28]
   1f558:	e004      	b.n	1f564 <_svfprintf_r+0x9a4>
   1f55a:	3f10      	subs	r7, #16
   1f55c:	2f10      	cmp	r7, #16
   1f55e:	f102 0208 	add.w	r2, r2, #8
   1f562:	dd15      	ble.n	1f590 <_svfprintf_r+0x9d0>
   1f564:	3301      	adds	r3, #1
   1f566:	3110      	adds	r1, #16
   1f568:	2b07      	cmp	r3, #7
   1f56a:	9125      	str	r1, [sp, #148]	; 0x94
   1f56c:	9324      	str	r3, [sp, #144]	; 0x90
   1f56e:	e882 0840 	stmia.w	r2, {r6, fp}
   1f572:	ddf2      	ble.n	1f55a <_svfprintf_r+0x99a>
   1f574:	aa23      	add	r2, sp, #140	; 0x8c
   1f576:	4629      	mov	r1, r5
   1f578:	4620      	mov	r0, r4
   1f57a:	f002 fcd3 	bl	21f24 <__ssprint_r>
   1f57e:	2800      	cmp	r0, #0
   1f580:	f47f abf0 	bne.w	1ed64 <_svfprintf_r+0x1a4>
   1f584:	3f10      	subs	r7, #16
   1f586:	2f10      	cmp	r7, #16
   1f588:	9925      	ldr	r1, [sp, #148]	; 0x94
   1f58a:	9b24      	ldr	r3, [sp, #144]	; 0x90
   1f58c:	464a      	mov	r2, r9
   1f58e:	dce9      	bgt.n	1f564 <_svfprintf_r+0x9a4>
   1f590:	4635      	mov	r5, r6
   1f592:	460c      	mov	r4, r1
   1f594:	4646      	mov	r6, r8
   1f596:	4690      	mov	r8, r2
   1f598:	3301      	adds	r3, #1
   1f59a:	443c      	add	r4, r7
   1f59c:	2b07      	cmp	r3, #7
   1f59e:	9425      	str	r4, [sp, #148]	; 0x94
   1f5a0:	9324      	str	r3, [sp, #144]	; 0x90
   1f5a2:	e888 00a0 	stmia.w	r8, {r5, r7}
   1f5a6:	f300 8234 	bgt.w	1fa12 <_svfprintf_r+0xe52>
   1f5aa:	f108 0808 	add.w	r8, r8, #8
   1f5ae:	e49f      	b.n	1eef0 <_svfprintf_r+0x330>
   1f5b0:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   1f5b2:	9f24      	ldr	r7, [sp, #144]	; 0x90
   1f5b4:	2b01      	cmp	r3, #1
   1f5b6:	f340 8200 	ble.w	1f9ba <_svfprintf_r+0xdfa>
   1f5ba:	3701      	adds	r7, #1
   1f5bc:	3401      	adds	r4, #1
   1f5be:	2301      	movs	r3, #1
   1f5c0:	2f07      	cmp	r7, #7
   1f5c2:	9425      	str	r4, [sp, #148]	; 0x94
   1f5c4:	9724      	str	r7, [sp, #144]	; 0x90
   1f5c6:	f8c8 6000 	str.w	r6, [r8]
   1f5ca:	f8c8 3004 	str.w	r3, [r8, #4]
   1f5ce:	f300 8205 	bgt.w	1f9dc <_svfprintf_r+0xe1c>
   1f5d2:	f108 0808 	add.w	r8, r8, #8
   1f5d6:	9a13      	ldr	r2, [sp, #76]	; 0x4c
   1f5d8:	9b14      	ldr	r3, [sp, #80]	; 0x50
   1f5da:	f8c8 3000 	str.w	r3, [r8]
   1f5de:	3701      	adds	r7, #1
   1f5e0:	4414      	add	r4, r2
   1f5e2:	2f07      	cmp	r7, #7
   1f5e4:	9425      	str	r4, [sp, #148]	; 0x94
   1f5e6:	9724      	str	r7, [sp, #144]	; 0x90
   1f5e8:	f8c8 2004 	str.w	r2, [r8, #4]
   1f5ec:	f300 8202 	bgt.w	1f9f4 <_svfprintf_r+0xe34>
   1f5f0:	f108 0808 	add.w	r8, r8, #8
   1f5f4:	2300      	movs	r3, #0
   1f5f6:	2200      	movs	r2, #0
   1f5f8:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
   1f5fc:	f7fc fb72 	bl	1bce4 <__aeabi_dcmpeq>
   1f600:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   1f602:	2800      	cmp	r0, #0
   1f604:	f040 8101 	bne.w	1f80a <_svfprintf_r+0xc4a>
   1f608:	3b01      	subs	r3, #1
   1f60a:	3701      	adds	r7, #1
   1f60c:	3601      	adds	r6, #1
   1f60e:	441c      	add	r4, r3
   1f610:	2f07      	cmp	r7, #7
   1f612:	9724      	str	r7, [sp, #144]	; 0x90
   1f614:	9425      	str	r4, [sp, #148]	; 0x94
   1f616:	f8c8 6000 	str.w	r6, [r8]
   1f61a:	f8c8 3004 	str.w	r3, [r8, #4]
   1f61e:	f300 8128 	bgt.w	1f872 <_svfprintf_r+0xcb2>
   1f622:	f108 0808 	add.w	r8, r8, #8
   1f626:	9a15      	ldr	r2, [sp, #84]	; 0x54
   1f628:	f8c8 2004 	str.w	r2, [r8, #4]
   1f62c:	3701      	adds	r7, #1
   1f62e:	4414      	add	r4, r2
   1f630:	ab1f      	add	r3, sp, #124	; 0x7c
   1f632:	2f07      	cmp	r7, #7
   1f634:	9425      	str	r4, [sp, #148]	; 0x94
   1f636:	9724      	str	r7, [sp, #144]	; 0x90
   1f638:	f8c8 3000 	str.w	r3, [r8]
   1f63c:	f77f aca5 	ble.w	1ef8a <_svfprintf_r+0x3ca>
   1f640:	aa23      	add	r2, sp, #140	; 0x8c
   1f642:	9907      	ldr	r1, [sp, #28]
   1f644:	9808      	ldr	r0, [sp, #32]
   1f646:	f002 fc6d 	bl	21f24 <__ssprint_r>
   1f64a:	2800      	cmp	r0, #0
   1f64c:	f47f ab8a 	bne.w	1ed64 <_svfprintf_r+0x1a4>
   1f650:	9c25      	ldr	r4, [sp, #148]	; 0x94
   1f652:	46c8      	mov	r8, r9
   1f654:	e49b      	b.n	1ef8e <_svfprintf_r+0x3ce>
   1f656:	aa23      	add	r2, sp, #140	; 0x8c
   1f658:	9907      	ldr	r1, [sp, #28]
   1f65a:	9808      	ldr	r0, [sp, #32]
   1f65c:	f002 fc62 	bl	21f24 <__ssprint_r>
   1f660:	2800      	cmp	r0, #0
   1f662:	f43f acdd 	beq.w	1f020 <_svfprintf_r+0x460>
   1f666:	f7ff bb7d 	b.w	1ed64 <_svfprintf_r+0x1a4>
   1f66a:	f8dd b00c 	ldr.w	fp, [sp, #12]
   1f66e:	2b01      	cmp	r3, #1
   1f670:	f000 8135 	beq.w	1f8de <_svfprintf_r+0xd1e>
   1f674:	2b02      	cmp	r3, #2
   1f676:	d125      	bne.n	1f6c4 <_svfprintf_r+0xb04>
   1f678:	f8cd b00c 	str.w	fp, [sp, #12]
   1f67c:	2400      	movs	r4, #0
   1f67e:	2500      	movs	r5, #0
   1f680:	e611      	b.n	1f2a6 <_svfprintf_r+0x6e6>
   1f682:	aa23      	add	r2, sp, #140	; 0x8c
   1f684:	9907      	ldr	r1, [sp, #28]
   1f686:	9808      	ldr	r0, [sp, #32]
   1f688:	f002 fc4c 	bl	21f24 <__ssprint_r>
   1f68c:	2800      	cmp	r0, #0
   1f68e:	f47f ab69 	bne.w	1ed64 <_svfprintf_r+0x1a4>
   1f692:	9c25      	ldr	r4, [sp, #148]	; 0x94
   1f694:	46c8      	mov	r8, r9
   1f696:	e467      	b.n	1ef68 <_svfprintf_r+0x3a8>
   1f698:	aa23      	add	r2, sp, #140	; 0x8c
   1f69a:	9907      	ldr	r1, [sp, #28]
   1f69c:	9808      	ldr	r0, [sp, #32]
   1f69e:	f002 fc41 	bl	21f24 <__ssprint_r>
   1f6a2:	2800      	cmp	r0, #0
   1f6a4:	f47f ab5e 	bne.w	1ed64 <_svfprintf_r+0x1a4>
   1f6a8:	9c25      	ldr	r4, [sp, #148]	; 0x94
   1f6aa:	46c8      	mov	r8, r9
   1f6ac:	e41d      	b.n	1eeea <_svfprintf_r+0x32a>
   1f6ae:	aa23      	add	r2, sp, #140	; 0x8c
   1f6b0:	9907      	ldr	r1, [sp, #28]
   1f6b2:	9808      	ldr	r0, [sp, #32]
   1f6b4:	f002 fc36 	bl	21f24 <__ssprint_r>
   1f6b8:	2800      	cmp	r0, #0
   1f6ba:	f47f ab53 	bne.w	1ed64 <_svfprintf_r+0x1a4>
   1f6be:	9c25      	ldr	r4, [sp, #148]	; 0x94
   1f6c0:	46c8      	mov	r8, r9
   1f6c2:	e402      	b.n	1eeca <_svfprintf_r+0x30a>
   1f6c4:	f8cd b00c 	str.w	fp, [sp, #12]
   1f6c8:	2400      	movs	r4, #0
   1f6ca:	2500      	movs	r5, #0
   1f6cc:	4649      	mov	r1, r9
   1f6ce:	e000      	b.n	1f6d2 <_svfprintf_r+0xb12>
   1f6d0:	4631      	mov	r1, r6
   1f6d2:	08e2      	lsrs	r2, r4, #3
   1f6d4:	ea42 7245 	orr.w	r2, r2, r5, lsl #29
   1f6d8:	08e8      	lsrs	r0, r5, #3
   1f6da:	f004 0307 	and.w	r3, r4, #7
   1f6de:	4605      	mov	r5, r0
   1f6e0:	4614      	mov	r4, r2
   1f6e2:	3330      	adds	r3, #48	; 0x30
   1f6e4:	ea54 0205 	orrs.w	r2, r4, r5
   1f6e8:	f801 3c01 	strb.w	r3, [r1, #-1]
   1f6ec:	f101 36ff 	add.w	r6, r1, #4294967295
   1f6f0:	d1ee      	bne.n	1f6d0 <_svfprintf_r+0xb10>
   1f6f2:	9a03      	ldr	r2, [sp, #12]
   1f6f4:	07d2      	lsls	r2, r2, #31
   1f6f6:	f57f ade6 	bpl.w	1f2c6 <_svfprintf_r+0x706>
   1f6fa:	2b30      	cmp	r3, #48	; 0x30
   1f6fc:	f43f ade3 	beq.w	1f2c6 <_svfprintf_r+0x706>
   1f700:	3902      	subs	r1, #2
   1f702:	2330      	movs	r3, #48	; 0x30
   1f704:	f806 3c01 	strb.w	r3, [r6, #-1]
   1f708:	eba9 0301 	sub.w	r3, r9, r1
   1f70c:	930a      	str	r3, [sp, #40]	; 0x28
   1f70e:	460e      	mov	r6, r1
   1f710:	f7ff bb66 	b.w	1ede0 <_svfprintf_r+0x220>
   1f714:	991d      	ldr	r1, [sp, #116]	; 0x74
   1f716:	2900      	cmp	r1, #0
   1f718:	f340 8231 	ble.w	1fb7e <_svfprintf_r+0xfbe>
   1f71c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   1f71e:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
   1f720:	4293      	cmp	r3, r2
   1f722:	bfa8      	it	ge
   1f724:	4613      	movge	r3, r2
   1f726:	2b00      	cmp	r3, #0
   1f728:	461f      	mov	r7, r3
   1f72a:	dd0d      	ble.n	1f748 <_svfprintf_r+0xb88>
   1f72c:	9b24      	ldr	r3, [sp, #144]	; 0x90
   1f72e:	f8c8 6000 	str.w	r6, [r8]
   1f732:	3301      	adds	r3, #1
   1f734:	443c      	add	r4, r7
   1f736:	2b07      	cmp	r3, #7
   1f738:	9425      	str	r4, [sp, #148]	; 0x94
   1f73a:	f8c8 7004 	str.w	r7, [r8, #4]
   1f73e:	9324      	str	r3, [sp, #144]	; 0x90
   1f740:	f300 8321 	bgt.w	1fd86 <_svfprintf_r+0x11c6>
   1f744:	f108 0808 	add.w	r8, r8, #8
   1f748:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   1f74a:	2f00      	cmp	r7, #0
   1f74c:	bfa8      	it	ge
   1f74e:	1bdb      	subge	r3, r3, r7
   1f750:	2b00      	cmp	r3, #0
   1f752:	461f      	mov	r7, r3
   1f754:	f340 80d7 	ble.w	1f906 <_svfprintf_r+0xd46>
   1f758:	2f10      	cmp	r7, #16
   1f75a:	9b24      	ldr	r3, [sp, #144]	; 0x90
   1f75c:	4d31      	ldr	r5, [pc, #196]	; (1f824 <_svfprintf_r+0xc64>)
   1f75e:	f340 81f0 	ble.w	1fb42 <_svfprintf_r+0xf82>
   1f762:	4642      	mov	r2, r8
   1f764:	4621      	mov	r1, r4
   1f766:	46b0      	mov	r8, r6
   1f768:	f04f 0b10 	mov.w	fp, #16
   1f76c:	462e      	mov	r6, r5
   1f76e:	9c08      	ldr	r4, [sp, #32]
   1f770:	9d07      	ldr	r5, [sp, #28]
   1f772:	e004      	b.n	1f77e <_svfprintf_r+0xbbe>
   1f774:	3208      	adds	r2, #8
   1f776:	3f10      	subs	r7, #16
   1f778:	2f10      	cmp	r7, #16
   1f77a:	f340 81de 	ble.w	1fb3a <_svfprintf_r+0xf7a>
   1f77e:	3301      	adds	r3, #1
   1f780:	3110      	adds	r1, #16
   1f782:	2b07      	cmp	r3, #7
   1f784:	9125      	str	r1, [sp, #148]	; 0x94
   1f786:	9324      	str	r3, [sp, #144]	; 0x90
   1f788:	e882 0840 	stmia.w	r2, {r6, fp}
   1f78c:	ddf2      	ble.n	1f774 <_svfprintf_r+0xbb4>
   1f78e:	aa23      	add	r2, sp, #140	; 0x8c
   1f790:	4629      	mov	r1, r5
   1f792:	4620      	mov	r0, r4
   1f794:	f002 fbc6 	bl	21f24 <__ssprint_r>
   1f798:	2800      	cmp	r0, #0
   1f79a:	f47f aae3 	bne.w	1ed64 <_svfprintf_r+0x1a4>
   1f79e:	9925      	ldr	r1, [sp, #148]	; 0x94
   1f7a0:	9b24      	ldr	r3, [sp, #144]	; 0x90
   1f7a2:	464a      	mov	r2, r9
   1f7a4:	e7e7      	b.n	1f776 <_svfprintf_r+0xbb6>
   1f7a6:	2d00      	cmp	r5, #0
   1f7a8:	bf08      	it	eq
   1f7aa:	2c0a      	cmpeq	r4, #10
   1f7ac:	f0c0 8095 	bcc.w	1f8da <_svfprintf_r+0xd1a>
   1f7b0:	464e      	mov	r6, r9
   1f7b2:	4620      	mov	r0, r4
   1f7b4:	4629      	mov	r1, r5
   1f7b6:	220a      	movs	r2, #10
   1f7b8:	2300      	movs	r3, #0
   1f7ba:	f7fc fcbb 	bl	1c134 <__aeabi_uldivmod>
   1f7be:	3230      	adds	r2, #48	; 0x30
   1f7c0:	f806 2d01 	strb.w	r2, [r6, #-1]!
   1f7c4:	4620      	mov	r0, r4
   1f7c6:	4629      	mov	r1, r5
   1f7c8:	2300      	movs	r3, #0
   1f7ca:	220a      	movs	r2, #10
   1f7cc:	f7fc fcb2 	bl	1c134 <__aeabi_uldivmod>
   1f7d0:	4604      	mov	r4, r0
   1f7d2:	460d      	mov	r5, r1
   1f7d4:	ea54 0305 	orrs.w	r3, r4, r5
   1f7d8:	d1eb      	bne.n	1f7b2 <_svfprintf_r+0xbf2>
   1f7da:	eba9 0306 	sub.w	r3, r9, r6
   1f7de:	930a      	str	r3, [sp, #40]	; 0x28
   1f7e0:	f7ff bafe 	b.w	1ede0 <_svfprintf_r+0x220>
   1f7e4:	9b06      	ldr	r3, [sp, #24]
   1f7e6:	930a      	str	r3, [sp, #40]	; 0x28
   1f7e8:	464e      	mov	r6, r9
   1f7ea:	f7ff baf9 	b.w	1ede0 <_svfprintf_r+0x220>
   1f7ee:	aa23      	add	r2, sp, #140	; 0x8c
   1f7f0:	9907      	ldr	r1, [sp, #28]
   1f7f2:	9808      	ldr	r0, [sp, #32]
   1f7f4:	f002 fb96 	bl	21f24 <__ssprint_r>
   1f7f8:	2800      	cmp	r0, #0
   1f7fa:	f47f aab3 	bne.w	1ed64 <_svfprintf_r+0x1a4>
   1f7fe:	f89d 706f 	ldrb.w	r7, [sp, #111]	; 0x6f
   1f802:	9c25      	ldr	r4, [sp, #148]	; 0x94
   1f804:	46c8      	mov	r8, r9
   1f806:	f7ff bb50 	b.w	1eeaa <_svfprintf_r+0x2ea>
   1f80a:	1e5e      	subs	r6, r3, #1
   1f80c:	2e00      	cmp	r6, #0
   1f80e:	f77f af0a 	ble.w	1f626 <_svfprintf_r+0xa66>
   1f812:	2e10      	cmp	r6, #16
   1f814:	4d03      	ldr	r5, [pc, #12]	; (1f824 <_svfprintf_r+0xc64>)
   1f816:	dd23      	ble.n	1f860 <_svfprintf_r+0xca0>
   1f818:	4622      	mov	r2, r4
   1f81a:	f04f 0b10 	mov.w	fp, #16
   1f81e:	9c08      	ldr	r4, [sp, #32]
   1f820:	e007      	b.n	1f832 <_svfprintf_r+0xc72>
   1f822:	bf00      	nop
   1f824:	000247f4 	.word	0x000247f4
   1f828:	3e10      	subs	r6, #16
   1f82a:	2e10      	cmp	r6, #16
   1f82c:	f108 0808 	add.w	r8, r8, #8
   1f830:	dd15      	ble.n	1f85e <_svfprintf_r+0xc9e>
   1f832:	3701      	adds	r7, #1
   1f834:	3210      	adds	r2, #16
   1f836:	2f07      	cmp	r7, #7
   1f838:	9225      	str	r2, [sp, #148]	; 0x94
   1f83a:	9724      	str	r7, [sp, #144]	; 0x90
   1f83c:	e888 0820 	stmia.w	r8, {r5, fp}
   1f840:	ddf2      	ble.n	1f828 <_svfprintf_r+0xc68>
   1f842:	aa23      	add	r2, sp, #140	; 0x8c
   1f844:	9907      	ldr	r1, [sp, #28]
   1f846:	4620      	mov	r0, r4
   1f848:	f002 fb6c 	bl	21f24 <__ssprint_r>
   1f84c:	2800      	cmp	r0, #0
   1f84e:	f47f aa89 	bne.w	1ed64 <_svfprintf_r+0x1a4>
   1f852:	3e10      	subs	r6, #16
   1f854:	2e10      	cmp	r6, #16
   1f856:	9a25      	ldr	r2, [sp, #148]	; 0x94
   1f858:	9f24      	ldr	r7, [sp, #144]	; 0x90
   1f85a:	46c8      	mov	r8, r9
   1f85c:	dce9      	bgt.n	1f832 <_svfprintf_r+0xc72>
   1f85e:	4614      	mov	r4, r2
   1f860:	3701      	adds	r7, #1
   1f862:	4434      	add	r4, r6
   1f864:	2f07      	cmp	r7, #7
   1f866:	9425      	str	r4, [sp, #148]	; 0x94
   1f868:	9724      	str	r7, [sp, #144]	; 0x90
   1f86a:	e888 0060 	stmia.w	r8, {r5, r6}
   1f86e:	f77f aed8 	ble.w	1f622 <_svfprintf_r+0xa62>
   1f872:	aa23      	add	r2, sp, #140	; 0x8c
   1f874:	9907      	ldr	r1, [sp, #28]
   1f876:	9808      	ldr	r0, [sp, #32]
   1f878:	f002 fb54 	bl	21f24 <__ssprint_r>
   1f87c:	2800      	cmp	r0, #0
   1f87e:	f47f aa71 	bne.w	1ed64 <_svfprintf_r+0x1a4>
   1f882:	9c25      	ldr	r4, [sp, #148]	; 0x94
   1f884:	9f24      	ldr	r7, [sp, #144]	; 0x90
   1f886:	46c8      	mov	r8, r9
   1f888:	e6cd      	b.n	1f626 <_svfprintf_r+0xa66>
   1f88a:	681c      	ldr	r4, [r3, #0]
   1f88c:	3304      	adds	r3, #4
   1f88e:	930b      	str	r3, [sp, #44]	; 0x2c
   1f890:	2500      	movs	r5, #0
   1f892:	e422      	b.n	1f0da <_svfprintf_r+0x51a>
   1f894:	990b      	ldr	r1, [sp, #44]	; 0x2c
   1f896:	460a      	mov	r2, r1
   1f898:	3204      	adds	r2, #4
   1f89a:	680c      	ldr	r4, [r1, #0]
   1f89c:	920b      	str	r2, [sp, #44]	; 0x2c
   1f89e:	2500      	movs	r5, #0
   1f8a0:	f7ff ba81 	b.w	1eda6 <_svfprintf_r+0x1e6>
   1f8a4:	3204      	adds	r2, #4
   1f8a6:	681c      	ldr	r4, [r3, #0]
   1f8a8:	920b      	str	r2, [sp, #44]	; 0x2c
   1f8aa:	2301      	movs	r3, #1
   1f8ac:	2500      	movs	r5, #0
   1f8ae:	f7ff ba7a 	b.w	1eda6 <_svfprintf_r+0x1e6>
   1f8b2:	4614      	mov	r4, r2
   1f8b4:	3301      	adds	r3, #1
   1f8b6:	4434      	add	r4, r6
   1f8b8:	2b07      	cmp	r3, #7
   1f8ba:	9425      	str	r4, [sp, #148]	; 0x94
   1f8bc:	9324      	str	r3, [sp, #144]	; 0x90
   1f8be:	e888 0060 	stmia.w	r8, {r5, r6}
   1f8c2:	f77f ab62 	ble.w	1ef8a <_svfprintf_r+0x3ca>
   1f8c6:	e6bb      	b.n	1f640 <_svfprintf_r+0xa80>
   1f8c8:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
   1f8ca:	6814      	ldr	r4, [r2, #0]
   1f8cc:	4613      	mov	r3, r2
   1f8ce:	3304      	adds	r3, #4
   1f8d0:	17e5      	asrs	r5, r4, #31
   1f8d2:	930b      	str	r3, [sp, #44]	; 0x2c
   1f8d4:	4622      	mov	r2, r4
   1f8d6:	462b      	mov	r3, r5
   1f8d8:	e4cd      	b.n	1f276 <_svfprintf_r+0x6b6>
   1f8da:	f8dd b00c 	ldr.w	fp, [sp, #12]
   1f8de:	f8cd b00c 	str.w	fp, [sp, #12]
   1f8e2:	ae40      	add	r6, sp, #256	; 0x100
   1f8e4:	3430      	adds	r4, #48	; 0x30
   1f8e6:	2301      	movs	r3, #1
   1f8e8:	f806 4d41 	strb.w	r4, [r6, #-65]!
   1f8ec:	930a      	str	r3, [sp, #40]	; 0x28
   1f8ee:	f7ff ba77 	b.w	1ede0 <_svfprintf_r+0x220>
   1f8f2:	aa23      	add	r2, sp, #140	; 0x8c
   1f8f4:	9907      	ldr	r1, [sp, #28]
   1f8f6:	9808      	ldr	r0, [sp, #32]
   1f8f8:	f002 fb14 	bl	21f24 <__ssprint_r>
   1f8fc:	2800      	cmp	r0, #0
   1f8fe:	f47f aa31 	bne.w	1ed64 <_svfprintf_r+0x1a4>
   1f902:	9c25      	ldr	r4, [sp, #148]	; 0x94
   1f904:	46c8      	mov	r8, r9
   1f906:	9a1d      	ldr	r2, [sp, #116]	; 0x74
   1f908:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   1f90a:	429a      	cmp	r2, r3
   1f90c:	db44      	blt.n	1f998 <_svfprintf_r+0xdd8>
   1f90e:	9b03      	ldr	r3, [sp, #12]
   1f910:	07d9      	lsls	r1, r3, #31
   1f912:	d441      	bmi.n	1f998 <_svfprintf_r+0xdd8>
   1f914:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   1f916:	980e      	ldr	r0, [sp, #56]	; 0x38
   1f918:	1a9a      	subs	r2, r3, r2
   1f91a:	1a1d      	subs	r5, r3, r0
   1f91c:	4295      	cmp	r5, r2
   1f91e:	bfa8      	it	ge
   1f920:	4615      	movge	r5, r2
   1f922:	2d00      	cmp	r5, #0
   1f924:	dd0e      	ble.n	1f944 <_svfprintf_r+0xd84>
   1f926:	9924      	ldr	r1, [sp, #144]	; 0x90
   1f928:	f8c8 5004 	str.w	r5, [r8, #4]
   1f92c:	3101      	adds	r1, #1
   1f92e:	4406      	add	r6, r0
   1f930:	442c      	add	r4, r5
   1f932:	2907      	cmp	r1, #7
   1f934:	f8c8 6000 	str.w	r6, [r8]
   1f938:	9425      	str	r4, [sp, #148]	; 0x94
   1f93a:	9124      	str	r1, [sp, #144]	; 0x90
   1f93c:	f300 823a 	bgt.w	1fdb4 <_svfprintf_r+0x11f4>
   1f940:	f108 0808 	add.w	r8, r8, #8
   1f944:	2d00      	cmp	r5, #0
   1f946:	bfac      	ite	ge
   1f948:	1b56      	subge	r6, r2, r5
   1f94a:	4616      	movlt	r6, r2
   1f94c:	2e00      	cmp	r6, #0
   1f94e:	f77f ab1e 	ble.w	1ef8e <_svfprintf_r+0x3ce>
   1f952:	2e10      	cmp	r6, #16
   1f954:	9b24      	ldr	r3, [sp, #144]	; 0x90
   1f956:	4db1      	ldr	r5, [pc, #708]	; (1fc1c <_svfprintf_r+0x105c>)
   1f958:	ddac      	ble.n	1f8b4 <_svfprintf_r+0xcf4>
   1f95a:	4622      	mov	r2, r4
   1f95c:	2710      	movs	r7, #16
   1f95e:	f8dd b020 	ldr.w	fp, [sp, #32]
   1f962:	9c07      	ldr	r4, [sp, #28]
   1f964:	e004      	b.n	1f970 <_svfprintf_r+0xdb0>
   1f966:	f108 0808 	add.w	r8, r8, #8
   1f96a:	3e10      	subs	r6, #16
   1f96c:	2e10      	cmp	r6, #16
   1f96e:	dda0      	ble.n	1f8b2 <_svfprintf_r+0xcf2>
   1f970:	3301      	adds	r3, #1
   1f972:	3210      	adds	r2, #16
   1f974:	2b07      	cmp	r3, #7
   1f976:	9225      	str	r2, [sp, #148]	; 0x94
   1f978:	9324      	str	r3, [sp, #144]	; 0x90
   1f97a:	e888 00a0 	stmia.w	r8, {r5, r7}
   1f97e:	ddf2      	ble.n	1f966 <_svfprintf_r+0xda6>
   1f980:	aa23      	add	r2, sp, #140	; 0x8c
   1f982:	4621      	mov	r1, r4
   1f984:	4658      	mov	r0, fp
   1f986:	f002 facd 	bl	21f24 <__ssprint_r>
   1f98a:	2800      	cmp	r0, #0
   1f98c:	f47f a9ea 	bne.w	1ed64 <_svfprintf_r+0x1a4>
   1f990:	9a25      	ldr	r2, [sp, #148]	; 0x94
   1f992:	9b24      	ldr	r3, [sp, #144]	; 0x90
   1f994:	46c8      	mov	r8, r9
   1f996:	e7e8      	b.n	1f96a <_svfprintf_r+0xdaa>
   1f998:	9b24      	ldr	r3, [sp, #144]	; 0x90
   1f99a:	9813      	ldr	r0, [sp, #76]	; 0x4c
   1f99c:	9914      	ldr	r1, [sp, #80]	; 0x50
   1f99e:	f8c8 1000 	str.w	r1, [r8]
   1f9a2:	3301      	adds	r3, #1
   1f9a4:	4404      	add	r4, r0
   1f9a6:	2b07      	cmp	r3, #7
   1f9a8:	9425      	str	r4, [sp, #148]	; 0x94
   1f9aa:	f8c8 0004 	str.w	r0, [r8, #4]
   1f9ae:	9324      	str	r3, [sp, #144]	; 0x90
   1f9b0:	f300 81f4 	bgt.w	1fd9c <_svfprintf_r+0x11dc>
   1f9b4:	f108 0808 	add.w	r8, r8, #8
   1f9b8:	e7ac      	b.n	1f914 <_svfprintf_r+0xd54>
   1f9ba:	9b03      	ldr	r3, [sp, #12]
   1f9bc:	07da      	lsls	r2, r3, #31
   1f9be:	f53f adfc 	bmi.w	1f5ba <_svfprintf_r+0x9fa>
   1f9c2:	3701      	adds	r7, #1
   1f9c4:	3401      	adds	r4, #1
   1f9c6:	2301      	movs	r3, #1
   1f9c8:	2f07      	cmp	r7, #7
   1f9ca:	9425      	str	r4, [sp, #148]	; 0x94
   1f9cc:	9724      	str	r7, [sp, #144]	; 0x90
   1f9ce:	f8c8 6000 	str.w	r6, [r8]
   1f9d2:	f8c8 3004 	str.w	r3, [r8, #4]
   1f9d6:	f77f ae24 	ble.w	1f622 <_svfprintf_r+0xa62>
   1f9da:	e74a      	b.n	1f872 <_svfprintf_r+0xcb2>
   1f9dc:	aa23      	add	r2, sp, #140	; 0x8c
   1f9de:	9907      	ldr	r1, [sp, #28]
   1f9e0:	9808      	ldr	r0, [sp, #32]
   1f9e2:	f002 fa9f 	bl	21f24 <__ssprint_r>
   1f9e6:	2800      	cmp	r0, #0
   1f9e8:	f47f a9bc 	bne.w	1ed64 <_svfprintf_r+0x1a4>
   1f9ec:	9c25      	ldr	r4, [sp, #148]	; 0x94
   1f9ee:	9f24      	ldr	r7, [sp, #144]	; 0x90
   1f9f0:	46c8      	mov	r8, r9
   1f9f2:	e5f0      	b.n	1f5d6 <_svfprintf_r+0xa16>
   1f9f4:	aa23      	add	r2, sp, #140	; 0x8c
   1f9f6:	9907      	ldr	r1, [sp, #28]
   1f9f8:	9808      	ldr	r0, [sp, #32]
   1f9fa:	f002 fa93 	bl	21f24 <__ssprint_r>
   1f9fe:	2800      	cmp	r0, #0
   1fa00:	f47f a9b0 	bne.w	1ed64 <_svfprintf_r+0x1a4>
   1fa04:	9c25      	ldr	r4, [sp, #148]	; 0x94
   1fa06:	9f24      	ldr	r7, [sp, #144]	; 0x90
   1fa08:	46c8      	mov	r8, r9
   1fa0a:	e5f3      	b.n	1f5f4 <_svfprintf_r+0xa34>
   1fa0c:	464e      	mov	r6, r9
   1fa0e:	f7ff b9e7 	b.w	1ede0 <_svfprintf_r+0x220>
   1fa12:	aa23      	add	r2, sp, #140	; 0x8c
   1fa14:	9907      	ldr	r1, [sp, #28]
   1fa16:	9808      	ldr	r0, [sp, #32]
   1fa18:	f002 fa84 	bl	21f24 <__ssprint_r>
   1fa1c:	2800      	cmp	r0, #0
   1fa1e:	f47f a9a1 	bne.w	1ed64 <_svfprintf_r+0x1a4>
   1fa22:	9c25      	ldr	r4, [sp, #148]	; 0x94
   1fa24:	46c8      	mov	r8, r9
   1fa26:	f7ff ba63 	b.w	1eef0 <_svfprintf_r+0x330>
   1fa2a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
   1fa2e:	4602      	mov	r2, r0
   1fa30:	460b      	mov	r3, r1
   1fa32:	f002 fc4d 	bl	222d0 <__aeabi_dcmpun>
   1fa36:	2800      	cmp	r0, #0
   1fa38:	f040 8298 	bne.w	1ff6c <_svfprintf_r+0x13ac>
   1fa3c:	9b06      	ldr	r3, [sp, #24]
   1fa3e:	3301      	adds	r3, #1
   1fa40:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   1fa42:	f023 0720 	bic.w	r7, r3, #32
   1fa46:	f000 81d2 	beq.w	1fdee <_svfprintf_r+0x122e>
   1fa4a:	2f47      	cmp	r7, #71	; 0x47
   1fa4c:	f000 8120 	beq.w	1fc90 <_svfprintf_r+0x10d0>
   1fa50:	9b11      	ldr	r3, [sp, #68]	; 0x44
   1fa52:	f44b 7280 	orr.w	r2, fp, #256	; 0x100
   1fa56:	2b00      	cmp	r3, #0
   1fa58:	9203      	str	r2, [sp, #12]
   1fa5a:	f2c0 81f0 	blt.w	1fe3e <_svfprintf_r+0x127e>
   1fa5e:	ed9d 7b10 	vldr	d7, [sp, #64]	; 0x40
   1fa62:	ed8d 7b18 	vstr	d7, [sp, #96]	; 0x60
   1fa66:	2300      	movs	r3, #0
   1fa68:	930c      	str	r3, [sp, #48]	; 0x30
   1fa6a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   1fa6c:	2b66      	cmp	r3, #102	; 0x66
   1fa6e:	f000 81c1 	beq.w	1fdf4 <_svfprintf_r+0x1234>
   1fa72:	2b46      	cmp	r3, #70	; 0x46
   1fa74:	f000 80f1 	beq.w	1fc5a <_svfprintf_r+0x109a>
   1fa78:	2f45      	cmp	r7, #69	; 0x45
   1fa7a:	bf0c      	ite	eq
   1fa7c:	9b06      	ldreq	r3, [sp, #24]
   1fa7e:	9d06      	ldrne	r5, [sp, #24]
   1fa80:	9808      	ldr	r0, [sp, #32]
   1fa82:	bf08      	it	eq
   1fa84:	1c5d      	addeq	r5, r3, #1
   1fa86:	aa21      	add	r2, sp, #132	; 0x84
   1fa88:	ab1e      	add	r3, sp, #120	; 0x78
   1fa8a:	9201      	str	r2, [sp, #4]
   1fa8c:	9300      	str	r3, [sp, #0]
   1fa8e:	462a      	mov	r2, r5
   1fa90:	ab1d      	add	r3, sp, #116	; 0x74
   1fa92:	2102      	movs	r1, #2
   1fa94:	ed9d 0b18 	vldr	d0, [sp, #96]	; 0x60
   1fa98:	f000 fcae 	bl	203f8 <_dtoa_r>
   1fa9c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   1fa9e:	2b67      	cmp	r3, #103	; 0x67
   1faa0:	4606      	mov	r6, r0
   1faa2:	f040 81d5 	bne.w	1fe50 <_svfprintf_r+0x1290>
   1faa6:	f01b 0f01 	tst.w	fp, #1
   1faaa:	f000 824e 	beq.w	1ff4a <_svfprintf_r+0x138a>
   1faae:	1974      	adds	r4, r6, r5
   1fab0:	2200      	movs	r2, #0
   1fab2:	2300      	movs	r3, #0
   1fab4:	e9dd 0118 	ldrd	r0, r1, [sp, #96]	; 0x60
   1fab8:	f7fc f914 	bl	1bce4 <__aeabi_dcmpeq>
   1fabc:	2800      	cmp	r0, #0
   1fabe:	f040 8160 	bne.w	1fd82 <_svfprintf_r+0x11c2>
   1fac2:	9b21      	ldr	r3, [sp, #132]	; 0x84
   1fac4:	42a3      	cmp	r3, r4
   1fac6:	d206      	bcs.n	1fad6 <_svfprintf_r+0xf16>
   1fac8:	2130      	movs	r1, #48	; 0x30
   1faca:	1c5a      	adds	r2, r3, #1
   1facc:	9221      	str	r2, [sp, #132]	; 0x84
   1face:	7019      	strb	r1, [r3, #0]
   1fad0:	9b21      	ldr	r3, [sp, #132]	; 0x84
   1fad2:	429c      	cmp	r4, r3
   1fad4:	d8f9      	bhi.n	1faca <_svfprintf_r+0xf0a>
   1fad6:	1b9b      	subs	r3, r3, r6
   1fad8:	2f47      	cmp	r7, #71	; 0x47
   1fada:	930f      	str	r3, [sp, #60]	; 0x3c
   1fadc:	f000 80f0 	beq.w	1fcc0 <_svfprintf_r+0x1100>
   1fae0:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   1fae2:	2b65      	cmp	r3, #101	; 0x65
   1fae4:	f340 81c3 	ble.w	1fe6e <_svfprintf_r+0x12ae>
   1fae8:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   1faea:	2b66      	cmp	r3, #102	; 0x66
   1faec:	9b1d      	ldr	r3, [sp, #116]	; 0x74
   1faee:	930e      	str	r3, [sp, #56]	; 0x38
   1faf0:	f000 81c0 	beq.w	1fe74 <_svfprintf_r+0x12b4>
   1faf4:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   1faf6:	9a0e      	ldr	r2, [sp, #56]	; 0x38
   1faf8:	4619      	mov	r1, r3
   1fafa:	4291      	cmp	r1, r2
   1fafc:	f300 8191 	bgt.w	1fe22 <_svfprintf_r+0x1262>
   1fb00:	f01b 0f01 	tst.w	fp, #1
   1fb04:	f040 8223 	bne.w	1ff4e <_svfprintf_r+0x138e>
   1fb08:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
   1fb0c:	9304      	str	r3, [sp, #16]
   1fb0e:	2367      	movs	r3, #103	; 0x67
   1fb10:	920a      	str	r2, [sp, #40]	; 0x28
   1fb12:	930d      	str	r3, [sp, #52]	; 0x34
   1fb14:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   1fb16:	2b00      	cmp	r3, #0
   1fb18:	f040 80cb 	bne.w	1fcb2 <_svfprintf_r+0x10f2>
   1fb1c:	9306      	str	r3, [sp, #24]
   1fb1e:	f89d 706f 	ldrb.w	r7, [sp, #111]	; 0x6f
   1fb22:	f7ff b965 	b.w	1edf0 <_svfprintf_r+0x230>
   1fb26:	f025 0507 	bic.w	r5, r5, #7
   1fb2a:	ed95 7b00 	vldr	d7, [r5]
   1fb2e:	f105 0308 	add.w	r3, r5, #8
   1fb32:	ed8d 7b10 	vstr	d7, [sp, #64]	; 0x40
   1fb36:	930b      	str	r3, [sp, #44]	; 0x2c
   1fb38:	e416      	b.n	1f368 <_svfprintf_r+0x7a8>
   1fb3a:	4635      	mov	r5, r6
   1fb3c:	460c      	mov	r4, r1
   1fb3e:	4646      	mov	r6, r8
   1fb40:	4690      	mov	r8, r2
   1fb42:	3301      	adds	r3, #1
   1fb44:	443c      	add	r4, r7
   1fb46:	2b07      	cmp	r3, #7
   1fb48:	9425      	str	r4, [sp, #148]	; 0x94
   1fb4a:	9324      	str	r3, [sp, #144]	; 0x90
   1fb4c:	e888 00a0 	stmia.w	r8, {r5, r7}
   1fb50:	f73f aecf 	bgt.w	1f8f2 <_svfprintf_r+0xd32>
   1fb54:	f108 0808 	add.w	r8, r8, #8
   1fb58:	e6d5      	b.n	1f906 <_svfprintf_r+0xd46>
   1fb5a:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
   1fb5c:	6813      	ldr	r3, [r2, #0]
   1fb5e:	3204      	adds	r2, #4
   1fb60:	920b      	str	r2, [sp, #44]	; 0x2c
   1fb62:	9a05      	ldr	r2, [sp, #20]
   1fb64:	601a      	str	r2, [r3, #0]
   1fb66:	f7ff b852 	b.w	1ec0e <_svfprintf_r+0x4e>
   1fb6a:	aa23      	add	r2, sp, #140	; 0x8c
   1fb6c:	9907      	ldr	r1, [sp, #28]
   1fb6e:	9808      	ldr	r0, [sp, #32]
   1fb70:	f002 f9d8 	bl	21f24 <__ssprint_r>
   1fb74:	2800      	cmp	r0, #0
   1fb76:	f47f a8f5 	bne.w	1ed64 <_svfprintf_r+0x1a4>
   1fb7a:	46c8      	mov	r8, r9
   1fb7c:	e488      	b.n	1f490 <_svfprintf_r+0x8d0>
   1fb7e:	9b24      	ldr	r3, [sp, #144]	; 0x90
   1fb80:	4a27      	ldr	r2, [pc, #156]	; (1fc20 <_svfprintf_r+0x1060>)
   1fb82:	f8c8 2000 	str.w	r2, [r8]
   1fb86:	3301      	adds	r3, #1
   1fb88:	3401      	adds	r4, #1
   1fb8a:	2201      	movs	r2, #1
   1fb8c:	2b07      	cmp	r3, #7
   1fb8e:	9425      	str	r4, [sp, #148]	; 0x94
   1fb90:	9324      	str	r3, [sp, #144]	; 0x90
   1fb92:	f8c8 2004 	str.w	r2, [r8, #4]
   1fb96:	dc54      	bgt.n	1fc42 <_svfprintf_r+0x1082>
   1fb98:	f108 0808 	add.w	r8, r8, #8
   1fb9c:	b929      	cbnz	r1, 1fbaa <_svfprintf_r+0xfea>
   1fb9e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   1fba0:	b91b      	cbnz	r3, 1fbaa <_svfprintf_r+0xfea>
   1fba2:	9b03      	ldr	r3, [sp, #12]
   1fba4:	07d8      	lsls	r0, r3, #31
   1fba6:	f57f a9f2 	bpl.w	1ef8e <_svfprintf_r+0x3ce>
   1fbaa:	9b24      	ldr	r3, [sp, #144]	; 0x90
   1fbac:	9813      	ldr	r0, [sp, #76]	; 0x4c
   1fbae:	9a14      	ldr	r2, [sp, #80]	; 0x50
   1fbb0:	f8c8 2000 	str.w	r2, [r8]
   1fbb4:	3301      	adds	r3, #1
   1fbb6:	4602      	mov	r2, r0
   1fbb8:	4422      	add	r2, r4
   1fbba:	2b07      	cmp	r3, #7
   1fbbc:	9225      	str	r2, [sp, #148]	; 0x94
   1fbbe:	f8c8 0004 	str.w	r0, [r8, #4]
   1fbc2:	9324      	str	r3, [sp, #144]	; 0x90
   1fbc4:	f300 8195 	bgt.w	1fef2 <_svfprintf_r+0x1332>
   1fbc8:	f108 0808 	add.w	r8, r8, #8
   1fbcc:	2900      	cmp	r1, #0
   1fbce:	f2c0 816d 	blt.w	1feac <_svfprintf_r+0x12ec>
   1fbd2:	990f      	ldr	r1, [sp, #60]	; 0x3c
   1fbd4:	f8c8 6000 	str.w	r6, [r8]
   1fbd8:	3301      	adds	r3, #1
   1fbda:	188c      	adds	r4, r1, r2
   1fbdc:	2b07      	cmp	r3, #7
   1fbde:	9425      	str	r4, [sp, #148]	; 0x94
   1fbe0:	9324      	str	r3, [sp, #144]	; 0x90
   1fbe2:	f8c8 1004 	str.w	r1, [r8, #4]
   1fbe6:	f77f a9d0 	ble.w	1ef8a <_svfprintf_r+0x3ca>
   1fbea:	e529      	b.n	1f640 <_svfprintf_r+0xa80>
   1fbec:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
   1fbee:	9905      	ldr	r1, [sp, #20]
   1fbf0:	6813      	ldr	r3, [r2, #0]
   1fbf2:	17cd      	asrs	r5, r1, #31
   1fbf4:	4608      	mov	r0, r1
   1fbf6:	3204      	adds	r2, #4
   1fbf8:	4629      	mov	r1, r5
   1fbfa:	920b      	str	r2, [sp, #44]	; 0x2c
   1fbfc:	e9c3 0100 	strd	r0, r1, [r3]
   1fc00:	f7ff b805 	b.w	1ec0e <_svfprintf_r+0x4e>
   1fc04:	aa23      	add	r2, sp, #140	; 0x8c
   1fc06:	9907      	ldr	r1, [sp, #28]
   1fc08:	9808      	ldr	r0, [sp, #32]
   1fc0a:	f002 f98b 	bl	21f24 <__ssprint_r>
   1fc0e:	2800      	cmp	r0, #0
   1fc10:	f47f a8a8 	bne.w	1ed64 <_svfprintf_r+0x1a4>
   1fc14:	9c25      	ldr	r4, [sp, #148]	; 0x94
   1fc16:	46c8      	mov	r8, r9
   1fc18:	e453      	b.n	1f4c2 <_svfprintf_r+0x902>
   1fc1a:	bf00      	nop
   1fc1c:	000247f4 	.word	0x000247f4
   1fc20:	000247e0 	.word	0x000247e0
   1fc24:	2140      	movs	r1, #64	; 0x40
   1fc26:	9808      	ldr	r0, [sp, #32]
   1fc28:	f7fd fe7e 	bl	1d928 <_malloc_r>
   1fc2c:	9a07      	ldr	r2, [sp, #28]
   1fc2e:	6010      	str	r0, [r2, #0]
   1fc30:	6110      	str	r0, [r2, #16]
   1fc32:	2800      	cmp	r0, #0
   1fc34:	f000 81f6 	beq.w	20024 <_svfprintf_r+0x1464>
   1fc38:	9a07      	ldr	r2, [sp, #28]
   1fc3a:	2340      	movs	r3, #64	; 0x40
   1fc3c:	6153      	str	r3, [r2, #20]
   1fc3e:	f7fe bfd6 	b.w	1ebee <_svfprintf_r+0x2e>
   1fc42:	aa23      	add	r2, sp, #140	; 0x8c
   1fc44:	9907      	ldr	r1, [sp, #28]
   1fc46:	9808      	ldr	r0, [sp, #32]
   1fc48:	f002 f96c 	bl	21f24 <__ssprint_r>
   1fc4c:	2800      	cmp	r0, #0
   1fc4e:	f47f a889 	bne.w	1ed64 <_svfprintf_r+0x1a4>
   1fc52:	991d      	ldr	r1, [sp, #116]	; 0x74
   1fc54:	9c25      	ldr	r4, [sp, #148]	; 0x94
   1fc56:	46c8      	mov	r8, r9
   1fc58:	e7a0      	b.n	1fb9c <_svfprintf_r+0xfdc>
   1fc5a:	9d06      	ldr	r5, [sp, #24]
   1fc5c:	9808      	ldr	r0, [sp, #32]
   1fc5e:	aa21      	add	r2, sp, #132	; 0x84
   1fc60:	ab1e      	add	r3, sp, #120	; 0x78
   1fc62:	9201      	str	r2, [sp, #4]
   1fc64:	9300      	str	r3, [sp, #0]
   1fc66:	462a      	mov	r2, r5
   1fc68:	ab1d      	add	r3, sp, #116	; 0x74
   1fc6a:	2103      	movs	r1, #3
   1fc6c:	ed9d 0b18 	vldr	d0, [sp, #96]	; 0x60
   1fc70:	f000 fbc2 	bl	203f8 <_dtoa_r>
   1fc74:	4606      	mov	r6, r0
   1fc76:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   1fc78:	2b46      	cmp	r3, #70	; 0x46
   1fc7a:	eb06 0405 	add.w	r4, r6, r5
   1fc7e:	f47f af17 	bne.w	1fab0 <_svfprintf_r+0xef0>
   1fc82:	7833      	ldrb	r3, [r6, #0]
   1fc84:	2b30      	cmp	r3, #48	; 0x30
   1fc86:	f000 817d 	beq.w	1ff84 <_svfprintf_r+0x13c4>
   1fc8a:	9d1d      	ldr	r5, [sp, #116]	; 0x74
   1fc8c:	442c      	add	r4, r5
   1fc8e:	e70f      	b.n	1fab0 <_svfprintf_r+0xef0>
   1fc90:	9b06      	ldr	r3, [sp, #24]
   1fc92:	2b00      	cmp	r3, #0
   1fc94:	bf08      	it	eq
   1fc96:	2301      	moveq	r3, #1
   1fc98:	9306      	str	r3, [sp, #24]
   1fc9a:	e6d9      	b.n	1fa50 <_svfprintf_r+0xe90>
   1fc9c:	4630      	mov	r0, r6
   1fc9e:	9406      	str	r4, [sp, #24]
   1fca0:	f7fe fece 	bl	1ea40 <strlen>
   1fca4:	950b      	str	r5, [sp, #44]	; 0x2c
   1fca6:	900a      	str	r0, [sp, #40]	; 0x28
   1fca8:	f8cd b00c 	str.w	fp, [sp, #12]
   1fcac:	4603      	mov	r3, r0
   1fcae:	f7ff b9eb 	b.w	1f088 <_svfprintf_r+0x4c8>
   1fcb2:	272d      	movs	r7, #45	; 0x2d
   1fcb4:	2300      	movs	r3, #0
   1fcb6:	f88d 706f 	strb.w	r7, [sp, #111]	; 0x6f
   1fcba:	9306      	str	r3, [sp, #24]
   1fcbc:	f7ff b899 	b.w	1edf2 <_svfprintf_r+0x232>
   1fcc0:	9b1d      	ldr	r3, [sp, #116]	; 0x74
   1fcc2:	930e      	str	r3, [sp, #56]	; 0x38
   1fcc4:	461a      	mov	r2, r3
   1fcc6:	3303      	adds	r3, #3
   1fcc8:	db04      	blt.n	1fcd4 <_svfprintf_r+0x1114>
   1fcca:	9b06      	ldr	r3, [sp, #24]
   1fccc:	4619      	mov	r1, r3
   1fcce:	4291      	cmp	r1, r2
   1fcd0:	f6bf af10 	bge.w	1faf4 <_svfprintf_r+0xf34>
   1fcd4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   1fcd6:	3b02      	subs	r3, #2
   1fcd8:	930d      	str	r3, [sp, #52]	; 0x34
   1fcda:	f89d 3034 	ldrb.w	r3, [sp, #52]	; 0x34
   1fcde:	f88d 307c 	strb.w	r3, [sp, #124]	; 0x7c
   1fce2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   1fce4:	3b01      	subs	r3, #1
   1fce6:	2b00      	cmp	r3, #0
   1fce8:	931d      	str	r3, [sp, #116]	; 0x74
   1fcea:	bfbd      	ittte	lt
   1fcec:	9b0e      	ldrlt	r3, [sp, #56]	; 0x38
   1fcee:	f1c3 0301 	rsblt	r3, r3, #1
   1fcf2:	222d      	movlt	r2, #45	; 0x2d
   1fcf4:	222b      	movge	r2, #43	; 0x2b
   1fcf6:	2b09      	cmp	r3, #9
   1fcf8:	f88d 207d 	strb.w	r2, [sp, #125]	; 0x7d
   1fcfc:	f340 811d 	ble.w	1ff3a <_svfprintf_r+0x137a>
   1fd00:	f10d 048b 	add.w	r4, sp, #139	; 0x8b
   1fd04:	4620      	mov	r0, r4
   1fd06:	4daf      	ldr	r5, [pc, #700]	; (1ffc4 <_svfprintf_r+0x1404>)
   1fd08:	e000      	b.n	1fd0c <_svfprintf_r+0x114c>
   1fd0a:	4610      	mov	r0, r2
   1fd0c:	fb85 1203 	smull	r1, r2, r5, r3
   1fd10:	17d9      	asrs	r1, r3, #31
   1fd12:	ebc1 01a2 	rsb	r1, r1, r2, asr #2
   1fd16:	eb01 0281 	add.w	r2, r1, r1, lsl #2
   1fd1a:	eba3 0242 	sub.w	r2, r3, r2, lsl #1
   1fd1e:	3230      	adds	r2, #48	; 0x30
   1fd20:	2909      	cmp	r1, #9
   1fd22:	f800 2c01 	strb.w	r2, [r0, #-1]
   1fd26:	460b      	mov	r3, r1
   1fd28:	f100 32ff 	add.w	r2, r0, #4294967295
   1fd2c:	dced      	bgt.n	1fd0a <_svfprintf_r+0x114a>
   1fd2e:	3330      	adds	r3, #48	; 0x30
   1fd30:	3802      	subs	r0, #2
   1fd32:	b2d9      	uxtb	r1, r3
   1fd34:	4284      	cmp	r4, r0
   1fd36:	f802 1c01 	strb.w	r1, [r2, #-1]
   1fd3a:	f240 8170 	bls.w	2001e <_svfprintf_r+0x145e>
   1fd3e:	f10d 007e 	add.w	r0, sp, #126	; 0x7e
   1fd42:	4613      	mov	r3, r2
   1fd44:	e001      	b.n	1fd4a <_svfprintf_r+0x118a>
   1fd46:	f813 1b01 	ldrb.w	r1, [r3], #1
   1fd4a:	f800 1b01 	strb.w	r1, [r0], #1
   1fd4e:	42a3      	cmp	r3, r4
   1fd50:	d1f9      	bne.n	1fd46 <_svfprintf_r+0x1186>
   1fd52:	3301      	adds	r3, #1
   1fd54:	1a9b      	subs	r3, r3, r2
   1fd56:	f10d 027e 	add.w	r2, sp, #126	; 0x7e
   1fd5a:	4413      	add	r3, r2
   1fd5c:	aa1f      	add	r2, sp, #124	; 0x7c
   1fd5e:	1a9b      	subs	r3, r3, r2
   1fd60:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
   1fd62:	9315      	str	r3, [sp, #84]	; 0x54
   1fd64:	2a01      	cmp	r2, #1
   1fd66:	4413      	add	r3, r2
   1fd68:	930a      	str	r3, [sp, #40]	; 0x28
   1fd6a:	f340 8120 	ble.w	1ffae <_svfprintf_r+0x13ee>
   1fd6e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   1fd70:	9a13      	ldr	r2, [sp, #76]	; 0x4c
   1fd72:	4413      	add	r3, r2
   1fd74:	930a      	str	r3, [sp, #40]	; 0x28
   1fd76:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
   1fd7a:	9304      	str	r3, [sp, #16]
   1fd7c:	2300      	movs	r3, #0
   1fd7e:	930e      	str	r3, [sp, #56]	; 0x38
   1fd80:	e6c8      	b.n	1fb14 <_svfprintf_r+0xf54>
   1fd82:	4623      	mov	r3, r4
   1fd84:	e6a7      	b.n	1fad6 <_svfprintf_r+0xf16>
   1fd86:	aa23      	add	r2, sp, #140	; 0x8c
   1fd88:	9907      	ldr	r1, [sp, #28]
   1fd8a:	9808      	ldr	r0, [sp, #32]
   1fd8c:	f002 f8ca 	bl	21f24 <__ssprint_r>
   1fd90:	2800      	cmp	r0, #0
   1fd92:	f47e afe7 	bne.w	1ed64 <_svfprintf_r+0x1a4>
   1fd96:	9c25      	ldr	r4, [sp, #148]	; 0x94
   1fd98:	46c8      	mov	r8, r9
   1fd9a:	e4d5      	b.n	1f748 <_svfprintf_r+0xb88>
   1fd9c:	aa23      	add	r2, sp, #140	; 0x8c
   1fd9e:	9907      	ldr	r1, [sp, #28]
   1fda0:	9808      	ldr	r0, [sp, #32]
   1fda2:	f002 f8bf 	bl	21f24 <__ssprint_r>
   1fda6:	2800      	cmp	r0, #0
   1fda8:	f47e afdc 	bne.w	1ed64 <_svfprintf_r+0x1a4>
   1fdac:	9a1d      	ldr	r2, [sp, #116]	; 0x74
   1fdae:	9c25      	ldr	r4, [sp, #148]	; 0x94
   1fdb0:	46c8      	mov	r8, r9
   1fdb2:	e5af      	b.n	1f914 <_svfprintf_r+0xd54>
   1fdb4:	aa23      	add	r2, sp, #140	; 0x8c
   1fdb6:	9907      	ldr	r1, [sp, #28]
   1fdb8:	9808      	ldr	r0, [sp, #32]
   1fdba:	f002 f8b3 	bl	21f24 <__ssprint_r>
   1fdbe:	2800      	cmp	r0, #0
   1fdc0:	f47e afd0 	bne.w	1ed64 <_svfprintf_r+0x1a4>
   1fdc4:	9a1d      	ldr	r2, [sp, #116]	; 0x74
   1fdc6:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   1fdc8:	9c25      	ldr	r4, [sp, #148]	; 0x94
   1fdca:	1a9a      	subs	r2, r3, r2
   1fdcc:	46c8      	mov	r8, r9
   1fdce:	e5b9      	b.n	1f944 <_svfprintf_r+0xd84>
   1fdd0:	9b06      	ldr	r3, [sp, #24]
   1fdd2:	960e      	str	r6, [sp, #56]	; 0x38
   1fdd4:	2b06      	cmp	r3, #6
   1fdd6:	bf28      	it	cs
   1fdd8:	2306      	movcs	r3, #6
   1fdda:	9606      	str	r6, [sp, #24]
   1fddc:	4637      	mov	r7, r6
   1fdde:	9304      	str	r3, [sp, #16]
   1fde0:	950b      	str	r5, [sp, #44]	; 0x2c
   1fde2:	f8cd b00c 	str.w	fp, [sp, #12]
   1fde6:	930a      	str	r3, [sp, #40]	; 0x28
   1fde8:	4e77      	ldr	r6, [pc, #476]	; (1ffc8 <_svfprintf_r+0x1408>)
   1fdea:	f7ff b801 	b.w	1edf0 <_svfprintf_r+0x230>
   1fdee:	2306      	movs	r3, #6
   1fdf0:	9306      	str	r3, [sp, #24]
   1fdf2:	e62d      	b.n	1fa50 <_svfprintf_r+0xe90>
   1fdf4:	9c06      	ldr	r4, [sp, #24]
   1fdf6:	9808      	ldr	r0, [sp, #32]
   1fdf8:	aa21      	add	r2, sp, #132	; 0x84
   1fdfa:	ab1e      	add	r3, sp, #120	; 0x78
   1fdfc:	9201      	str	r2, [sp, #4]
   1fdfe:	9300      	str	r3, [sp, #0]
   1fe00:	4622      	mov	r2, r4
   1fe02:	ab1d      	add	r3, sp, #116	; 0x74
   1fe04:	2103      	movs	r1, #3
   1fe06:	ed9d 0b18 	vldr	d0, [sp, #96]	; 0x60
   1fe0a:	f000 faf5 	bl	203f8 <_dtoa_r>
   1fe0e:	4623      	mov	r3, r4
   1fe10:	4606      	mov	r6, r0
   1fe12:	1904      	adds	r4, r0, r4
   1fe14:	461d      	mov	r5, r3
   1fe16:	e734      	b.n	1fc82 <_svfprintf_r+0x10c2>
   1fe18:	272d      	movs	r7, #45	; 0x2d
   1fe1a:	f88d 706f 	strb.w	r7, [sp, #111]	; 0x6f
   1fe1e:	f7ff baca 	b.w	1f3b6 <_svfprintf_r+0x7f6>
   1fe22:	9a13      	ldr	r2, [sp, #76]	; 0x4c
   1fe24:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   1fe26:	4413      	add	r3, r2
   1fe28:	9a0e      	ldr	r2, [sp, #56]	; 0x38
   1fe2a:	930a      	str	r3, [sp, #40]	; 0x28
   1fe2c:	2a00      	cmp	r2, #0
   1fe2e:	f340 80b7 	ble.w	1ffa0 <_svfprintf_r+0x13e0>
   1fe32:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
   1fe36:	9304      	str	r3, [sp, #16]
   1fe38:	2367      	movs	r3, #103	; 0x67
   1fe3a:	930d      	str	r3, [sp, #52]	; 0x34
   1fe3c:	e66a      	b.n	1fb14 <_svfprintf_r+0xf54>
   1fe3e:	e9dd 1210 	ldrd	r1, r2, [sp, #64]	; 0x40
   1fe42:	f102 4300 	add.w	r3, r2, #2147483648	; 0x80000000
   1fe46:	9319      	str	r3, [sp, #100]	; 0x64
   1fe48:	232d      	movs	r3, #45	; 0x2d
   1fe4a:	9118      	str	r1, [sp, #96]	; 0x60
   1fe4c:	930c      	str	r3, [sp, #48]	; 0x30
   1fe4e:	e60c      	b.n	1fa6a <_svfprintf_r+0xeaa>
   1fe50:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   1fe52:	2b47      	cmp	r3, #71	; 0x47
   1fe54:	f47f ae2b 	bne.w	1faae <_svfprintf_r+0xeee>
   1fe58:	f01b 0f01 	tst.w	fp, #1
   1fe5c:	f47f af0b 	bne.w	1fc76 <_svfprintf_r+0x10b6>
   1fe60:	9b21      	ldr	r3, [sp, #132]	; 0x84
   1fe62:	2f47      	cmp	r7, #71	; 0x47
   1fe64:	eba3 0306 	sub.w	r3, r3, r6
   1fe68:	930f      	str	r3, [sp, #60]	; 0x3c
   1fe6a:	f43f af29 	beq.w	1fcc0 <_svfprintf_r+0x1100>
   1fe6e:	9b1d      	ldr	r3, [sp, #116]	; 0x74
   1fe70:	930e      	str	r3, [sp, #56]	; 0x38
   1fe72:	e732      	b.n	1fcda <_svfprintf_r+0x111a>
   1fe74:	2b00      	cmp	r3, #0
   1fe76:	f340 80af 	ble.w	1ffd8 <_svfprintf_r+0x1418>
   1fe7a:	9a06      	ldr	r2, [sp, #24]
   1fe7c:	2a00      	cmp	r2, #0
   1fe7e:	d16b      	bne.n	1ff58 <_svfprintf_r+0x1398>
   1fe80:	f01b 0f01 	tst.w	fp, #1
   1fe84:	d168      	bne.n	1ff58 <_svfprintf_r+0x1398>
   1fe86:	9304      	str	r3, [sp, #16]
   1fe88:	930a      	str	r3, [sp, #40]	; 0x28
   1fe8a:	e643      	b.n	1fb14 <_svfprintf_r+0xf54>
   1fe8c:	9b06      	ldr	r3, [sp, #24]
   1fe8e:	9304      	str	r3, [sp, #16]
   1fe90:	930a      	str	r3, [sp, #40]	; 0x28
   1fe92:	9006      	str	r0, [sp, #24]
   1fe94:	950b      	str	r5, [sp, #44]	; 0x2c
   1fe96:	f8cd b00c 	str.w	fp, [sp, #12]
   1fe9a:	900e      	str	r0, [sp, #56]	; 0x38
   1fe9c:	f89d 706f 	ldrb.w	r7, [sp, #111]	; 0x6f
   1fea0:	f7fe bfa6 	b.w	1edf0 <_svfprintf_r+0x230>
   1fea4:	2000      	movs	r0, #0
   1fea6:	9006      	str	r0, [sp, #24]
   1fea8:	f7fe bee4 	b.w	1ec74 <_svfprintf_r+0xb4>
   1feac:	424f      	negs	r7, r1
   1feae:	3110      	adds	r1, #16
   1feb0:	4d46      	ldr	r5, [pc, #280]	; (1ffcc <_svfprintf_r+0x140c>)
   1feb2:	da2b      	bge.n	1ff0c <_svfprintf_r+0x134c>
   1feb4:	2410      	movs	r4, #16
   1feb6:	f8dd b020 	ldr.w	fp, [sp, #32]
   1feba:	e004      	b.n	1fec6 <_svfprintf_r+0x1306>
   1febc:	f108 0808 	add.w	r8, r8, #8
   1fec0:	3f10      	subs	r7, #16
   1fec2:	2f10      	cmp	r7, #16
   1fec4:	dd22      	ble.n	1ff0c <_svfprintf_r+0x134c>
   1fec6:	3301      	adds	r3, #1
   1fec8:	3210      	adds	r2, #16
   1feca:	2b07      	cmp	r3, #7
   1fecc:	9225      	str	r2, [sp, #148]	; 0x94
   1fece:	9324      	str	r3, [sp, #144]	; 0x90
   1fed0:	f8c8 5000 	str.w	r5, [r8]
   1fed4:	f8c8 4004 	str.w	r4, [r8, #4]
   1fed8:	ddf0      	ble.n	1febc <_svfprintf_r+0x12fc>
   1feda:	aa23      	add	r2, sp, #140	; 0x8c
   1fedc:	9907      	ldr	r1, [sp, #28]
   1fede:	4658      	mov	r0, fp
   1fee0:	f002 f820 	bl	21f24 <__ssprint_r>
   1fee4:	2800      	cmp	r0, #0
   1fee6:	f47e af3d 	bne.w	1ed64 <_svfprintf_r+0x1a4>
   1feea:	9a25      	ldr	r2, [sp, #148]	; 0x94
   1feec:	9b24      	ldr	r3, [sp, #144]	; 0x90
   1feee:	46c8      	mov	r8, r9
   1fef0:	e7e6      	b.n	1fec0 <_svfprintf_r+0x1300>
   1fef2:	aa23      	add	r2, sp, #140	; 0x8c
   1fef4:	9907      	ldr	r1, [sp, #28]
   1fef6:	9808      	ldr	r0, [sp, #32]
   1fef8:	f002 f814 	bl	21f24 <__ssprint_r>
   1fefc:	2800      	cmp	r0, #0
   1fefe:	f47e af31 	bne.w	1ed64 <_svfprintf_r+0x1a4>
   1ff02:	991d      	ldr	r1, [sp, #116]	; 0x74
   1ff04:	9a25      	ldr	r2, [sp, #148]	; 0x94
   1ff06:	9b24      	ldr	r3, [sp, #144]	; 0x90
   1ff08:	46c8      	mov	r8, r9
   1ff0a:	e65f      	b.n	1fbcc <_svfprintf_r+0x100c>
   1ff0c:	3301      	adds	r3, #1
   1ff0e:	443a      	add	r2, r7
   1ff10:	2b07      	cmp	r3, #7
   1ff12:	e888 00a0 	stmia.w	r8, {r5, r7}
   1ff16:	9225      	str	r2, [sp, #148]	; 0x94
   1ff18:	9324      	str	r3, [sp, #144]	; 0x90
   1ff1a:	f108 0808 	add.w	r8, r8, #8
   1ff1e:	f77f ae58 	ble.w	1fbd2 <_svfprintf_r+0x1012>
   1ff22:	aa23      	add	r2, sp, #140	; 0x8c
   1ff24:	9907      	ldr	r1, [sp, #28]
   1ff26:	9808      	ldr	r0, [sp, #32]
   1ff28:	f001 fffc 	bl	21f24 <__ssprint_r>
   1ff2c:	2800      	cmp	r0, #0
   1ff2e:	f47e af19 	bne.w	1ed64 <_svfprintf_r+0x1a4>
   1ff32:	9a25      	ldr	r2, [sp, #148]	; 0x94
   1ff34:	9b24      	ldr	r3, [sp, #144]	; 0x90
   1ff36:	46c8      	mov	r8, r9
   1ff38:	e64b      	b.n	1fbd2 <_svfprintf_r+0x1012>
   1ff3a:	3330      	adds	r3, #48	; 0x30
   1ff3c:	2230      	movs	r2, #48	; 0x30
   1ff3e:	f88d 307f 	strb.w	r3, [sp, #127]	; 0x7f
   1ff42:	f88d 207e 	strb.w	r2, [sp, #126]	; 0x7e
   1ff46:	ab20      	add	r3, sp, #128	; 0x80
   1ff48:	e708      	b.n	1fd5c <_svfprintf_r+0x119c>
   1ff4a:	9b21      	ldr	r3, [sp, #132]	; 0x84
   1ff4c:	e5c3      	b.n	1fad6 <_svfprintf_r+0xf16>
   1ff4e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   1ff50:	9a13      	ldr	r2, [sp, #76]	; 0x4c
   1ff52:	4413      	add	r3, r2
   1ff54:	930a      	str	r3, [sp, #40]	; 0x28
   1ff56:	e76c      	b.n	1fe32 <_svfprintf_r+0x1272>
   1ff58:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   1ff5a:	9a13      	ldr	r2, [sp, #76]	; 0x4c
   1ff5c:	4413      	add	r3, r2
   1ff5e:	9a06      	ldr	r2, [sp, #24]
   1ff60:	441a      	add	r2, r3
   1ff62:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
   1ff66:	920a      	str	r2, [sp, #40]	; 0x28
   1ff68:	9304      	str	r3, [sp, #16]
   1ff6a:	e5d3      	b.n	1fb14 <_svfprintf_r+0xf54>
   1ff6c:	9b11      	ldr	r3, [sp, #68]	; 0x44
   1ff6e:	4e18      	ldr	r6, [pc, #96]	; (1ffd0 <_svfprintf_r+0x1410>)
   1ff70:	2b00      	cmp	r3, #0
   1ff72:	bfb6      	itet	lt
   1ff74:	272d      	movlt	r7, #45	; 0x2d
   1ff76:	f89d 706f 	ldrbge.w	r7, [sp, #111]	; 0x6f
   1ff7a:	f88d 706f 	strblt.w	r7, [sp, #111]	; 0x6f
   1ff7e:	4b15      	ldr	r3, [pc, #84]	; (1ffd4 <_svfprintf_r+0x1414>)
   1ff80:	f7ff ba1b 	b.w	1f3ba <_svfprintf_r+0x7fa>
   1ff84:	2200      	movs	r2, #0
   1ff86:	2300      	movs	r3, #0
   1ff88:	e9dd 0118 	ldrd	r0, r1, [sp, #96]	; 0x60
   1ff8c:	f7fb feaa 	bl	1bce4 <__aeabi_dcmpeq>
   1ff90:	2800      	cmp	r0, #0
   1ff92:	f47f ae7a 	bne.w	1fc8a <_svfprintf_r+0x10ca>
   1ff96:	f1c5 0501 	rsb	r5, r5, #1
   1ff9a:	951d      	str	r5, [sp, #116]	; 0x74
   1ff9c:	442c      	add	r4, r5
   1ff9e:	e587      	b.n	1fab0 <_svfprintf_r+0xef0>
   1ffa0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   1ffa2:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   1ffa4:	f1c3 0301 	rsb	r3, r3, #1
   1ffa8:	441a      	add	r2, r3
   1ffaa:	4613      	mov	r3, r2
   1ffac:	e7d2      	b.n	1ff54 <_svfprintf_r+0x1394>
   1ffae:	f01b 0301 	ands.w	r3, fp, #1
   1ffb2:	930e      	str	r3, [sp, #56]	; 0x38
   1ffb4:	f47f aedb 	bne.w	1fd6e <_svfprintf_r+0x11ae>
   1ffb8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   1ffba:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
   1ffbe:	9304      	str	r3, [sp, #16]
   1ffc0:	e5a8      	b.n	1fb14 <_svfprintf_r+0xf54>
   1ffc2:	bf00      	nop
   1ffc4:	66666667 	.word	0x66666667
   1ffc8:	000247d8 	.word	0x000247d8
   1ffcc:	000247f4 	.word	0x000247f4
   1ffd0:	000247ac 	.word	0x000247ac
   1ffd4:	000247a8 	.word	0x000247a8
   1ffd8:	9b06      	ldr	r3, [sp, #24]
   1ffda:	b913      	cbnz	r3, 1ffe2 <_svfprintf_r+0x1422>
   1ffdc:	f01b 0f01 	tst.w	fp, #1
   1ffe0:	d002      	beq.n	1ffe8 <_svfprintf_r+0x1428>
   1ffe2:	9b13      	ldr	r3, [sp, #76]	; 0x4c
   1ffe4:	3301      	adds	r3, #1
   1ffe6:	e7ba      	b.n	1ff5e <_svfprintf_r+0x139e>
   1ffe8:	2301      	movs	r3, #1
   1ffea:	e74c      	b.n	1fe86 <_svfprintf_r+0x12c6>
   1ffec:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
   1ffee:	f89a 3001 	ldrb.w	r3, [sl, #1]
   1fff2:	6828      	ldr	r0, [r5, #0]
   1fff4:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   1fff8:	9006      	str	r0, [sp, #24]
   1fffa:	4628      	mov	r0, r5
   1fffc:	3004      	adds	r0, #4
   1fffe:	46a2      	mov	sl, r4
   20000:	900b      	str	r0, [sp, #44]	; 0x2c
   20002:	f7fe be35 	b.w	1ec70 <_svfprintf_r+0xb0>
   20006:	f88d 106f 	strb.w	r1, [sp, #111]	; 0x6f
   2000a:	f7ff b852 	b.w	1f0b2 <_svfprintf_r+0x4f2>
   2000e:	f88d 106f 	strb.w	r1, [sp, #111]	; 0x6f
   20012:	f7ff b8de 	b.w	1f1d2 <_svfprintf_r+0x612>
   20016:	f88d 106f 	strb.w	r1, [sp, #111]	; 0x6f
   2001a:	f7ff ba07 	b.w	1f42c <_svfprintf_r+0x86c>
   2001e:	f10d 037e 	add.w	r3, sp, #126	; 0x7e
   20022:	e69b      	b.n	1fd5c <_svfprintf_r+0x119c>
   20024:	9a08      	ldr	r2, [sp, #32]
   20026:	230c      	movs	r3, #12
   20028:	6013      	str	r3, [r2, #0]
   2002a:	f04f 33ff 	mov.w	r3, #4294967295
   2002e:	9305      	str	r3, [sp, #20]
   20030:	f7fe bea1 	b.w	1ed76 <_svfprintf_r+0x1b6>
   20034:	f88d 106f 	strb.w	r1, [sp, #111]	; 0x6f
   20038:	f7ff b986 	b.w	1f348 <_svfprintf_r+0x788>
   2003c:	f88d 106f 	strb.w	r1, [sp, #111]	; 0x6f
   20040:	f7ff b962 	b.w	1f308 <_svfprintf_r+0x748>
   20044:	f88d 106f 	strb.w	r1, [sp, #111]	; 0x6f
   20048:	f7ff b945 	b.w	1f2d6 <_svfprintf_r+0x716>
   2004c:	f88d 106f 	strb.w	r1, [sp, #111]	; 0x6f
   20050:	f7ff b8fe 	b.w	1f250 <_svfprintf_r+0x690>

00020054 <write>:
   20054:	b410      	push	{r4}
   20056:	4c04      	ldr	r4, [pc, #16]	; (20068 <write+0x14>)
   20058:	4613      	mov	r3, r2
   2005a:	460a      	mov	r2, r1
   2005c:	4601      	mov	r1, r0
   2005e:	6820      	ldr	r0, [r4, #0]
   20060:	f85d 4b04 	ldr.w	r4, [sp], #4
   20064:	f000 b8a8 	b.w	201b8 <_write_r>
   20068:	20000100 	.word	0x20000100

0002006c <__utoa>:
   2006c:	b5f0      	push	{r4, r5, r6, r7, lr}
   2006e:	f8df e078 	ldr.w	lr, [pc, #120]	; 200e8 <__utoa+0x7c>
   20072:	4616      	mov	r6, r2
   20074:	4604      	mov	r4, r0
   20076:	460f      	mov	r7, r1
   20078:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
   2007c:	b08b      	sub	sp, #44	; 0x2c
   2007e:	466d      	mov	r5, sp
   20080:	c50f      	stmia	r5!, {r0, r1, r2, r3}
   20082:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
   20086:	c50f      	stmia	r5!, {r0, r1, r2, r3}
   20088:	e89e 0003 	ldmia.w	lr, {r0, r1}
   2008c:	1eb3      	subs	r3, r6, #2
   2008e:	f845 0b04 	str.w	r0, [r5], #4
   20092:	2b22      	cmp	r3, #34	; 0x22
   20094:	7029      	strb	r1, [r5, #0]
   20096:	d822      	bhi.n	200de <__utoa+0x72>
   20098:	1e7d      	subs	r5, r7, #1
   2009a:	4628      	mov	r0, r5
   2009c:	2200      	movs	r2, #0
   2009e:	e000      	b.n	200a2 <__utoa+0x36>
   200a0:	461a      	mov	r2, r3
   200a2:	fbb4 f1f6 	udiv	r1, r4, r6
   200a6:	ab0a      	add	r3, sp, #40	; 0x28
   200a8:	fb06 4411 	mls	r4, r6, r1, r4
   200ac:	4423      	add	r3, r4
   200ae:	460c      	mov	r4, r1
   200b0:	f813 3c28 	ldrb.w	r3, [r3, #-40]
   200b4:	f800 3f01 	strb.w	r3, [r0, #1]!
   200b8:	1c53      	adds	r3, r2, #1
   200ba:	2900      	cmp	r1, #0
   200bc:	d1f0      	bne.n	200a0 <__utoa+0x34>
   200be:	54f9      	strb	r1, [r7, r3]
   200c0:	18bb      	adds	r3, r7, r2
   200c2:	b14a      	cbz	r2, 200d8 <__utoa+0x6c>
   200c4:	7819      	ldrb	r1, [r3, #0]
   200c6:	7868      	ldrb	r0, [r5, #1]
   200c8:	f805 1f01 	strb.w	r1, [r5, #1]!
   200cc:	3401      	adds	r4, #1
   200ce:	1b11      	subs	r1, r2, r4
   200d0:	428c      	cmp	r4, r1
   200d2:	f803 0901 	strb.w	r0, [r3], #-1
   200d6:	dbf5      	blt.n	200c4 <__utoa+0x58>
   200d8:	4638      	mov	r0, r7
   200da:	b00b      	add	sp, #44	; 0x2c
   200dc:	bdf0      	pop	{r4, r5, r6, r7, pc}
   200de:	2000      	movs	r0, #0
   200e0:	7038      	strb	r0, [r7, #0]
   200e2:	b00b      	add	sp, #44	; 0x2c
   200e4:	bdf0      	pop	{r4, r5, r6, r7, pc}
   200e6:	bf00      	nop
   200e8:	00024804 	.word	0x00024804

000200ec <__swbuf_r>:
   200ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   200ee:	460d      	mov	r5, r1
   200f0:	4614      	mov	r4, r2
   200f2:	4606      	mov	r6, r0
   200f4:	b110      	cbz	r0, 200fc <__swbuf_r+0x10>
   200f6:	6b83      	ldr	r3, [r0, #56]	; 0x38
   200f8:	2b00      	cmp	r3, #0
   200fa:	d04b      	beq.n	20194 <__swbuf_r+0xa8>
   200fc:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
   20100:	69a3      	ldr	r3, [r4, #24]
   20102:	60a3      	str	r3, [r4, #8]
   20104:	b291      	uxth	r1, r2
   20106:	0708      	lsls	r0, r1, #28
   20108:	d539      	bpl.n	2017e <__swbuf_r+0x92>
   2010a:	6923      	ldr	r3, [r4, #16]
   2010c:	2b00      	cmp	r3, #0
   2010e:	d036      	beq.n	2017e <__swbuf_r+0x92>
   20110:	b2ed      	uxtb	r5, r5
   20112:	0489      	lsls	r1, r1, #18
   20114:	462f      	mov	r7, r5
   20116:	d515      	bpl.n	20144 <__swbuf_r+0x58>
   20118:	6822      	ldr	r2, [r4, #0]
   2011a:	6961      	ldr	r1, [r4, #20]
   2011c:	1ad3      	subs	r3, r2, r3
   2011e:	428b      	cmp	r3, r1
   20120:	da1c      	bge.n	2015c <__swbuf_r+0x70>
   20122:	3301      	adds	r3, #1
   20124:	68a1      	ldr	r1, [r4, #8]
   20126:	1c50      	adds	r0, r2, #1
   20128:	3901      	subs	r1, #1
   2012a:	60a1      	str	r1, [r4, #8]
   2012c:	6020      	str	r0, [r4, #0]
   2012e:	7015      	strb	r5, [r2, #0]
   20130:	6962      	ldr	r2, [r4, #20]
   20132:	429a      	cmp	r2, r3
   20134:	d01a      	beq.n	2016c <__swbuf_r+0x80>
   20136:	89a3      	ldrh	r3, [r4, #12]
   20138:	07db      	lsls	r3, r3, #31
   2013a:	d501      	bpl.n	20140 <__swbuf_r+0x54>
   2013c:	2d0a      	cmp	r5, #10
   2013e:	d015      	beq.n	2016c <__swbuf_r+0x80>
   20140:	4638      	mov	r0, r7
   20142:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   20144:	6e61      	ldr	r1, [r4, #100]	; 0x64
   20146:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
   2014a:	f421 5100 	bic.w	r1, r1, #8192	; 0x2000
   2014e:	81a2      	strh	r2, [r4, #12]
   20150:	6822      	ldr	r2, [r4, #0]
   20152:	6661      	str	r1, [r4, #100]	; 0x64
   20154:	6961      	ldr	r1, [r4, #20]
   20156:	1ad3      	subs	r3, r2, r3
   20158:	428b      	cmp	r3, r1
   2015a:	dbe2      	blt.n	20122 <__swbuf_r+0x36>
   2015c:	4621      	mov	r1, r4
   2015e:	4630      	mov	r0, r6
   20160:	f001 f910 	bl	21384 <_fflush_r>
   20164:	b940      	cbnz	r0, 20178 <__swbuf_r+0x8c>
   20166:	6822      	ldr	r2, [r4, #0]
   20168:	2301      	movs	r3, #1
   2016a:	e7db      	b.n	20124 <__swbuf_r+0x38>
   2016c:	4621      	mov	r1, r4
   2016e:	4630      	mov	r0, r6
   20170:	f001 f908 	bl	21384 <_fflush_r>
   20174:	2800      	cmp	r0, #0
   20176:	d0e3      	beq.n	20140 <__swbuf_r+0x54>
   20178:	f04f 37ff 	mov.w	r7, #4294967295
   2017c:	e7e0      	b.n	20140 <__swbuf_r+0x54>
   2017e:	4621      	mov	r1, r4
   20180:	4630      	mov	r0, r6
   20182:	f000 f82f 	bl	201e4 <__swsetup_r>
   20186:	2800      	cmp	r0, #0
   20188:	d1f6      	bne.n	20178 <__swbuf_r+0x8c>
   2018a:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
   2018e:	6923      	ldr	r3, [r4, #16]
   20190:	b291      	uxth	r1, r2
   20192:	e7bd      	b.n	20110 <__swbuf_r+0x24>
   20194:	f001 f94e 	bl	21434 <__sinit>
   20198:	e7b0      	b.n	200fc <__swbuf_r+0x10>
   2019a:	bf00      	nop

0002019c <__ascii_wctomb>:
   2019c:	b121      	cbz	r1, 201a8 <__ascii_wctomb+0xc>
   2019e:	2aff      	cmp	r2, #255	; 0xff
   201a0:	d804      	bhi.n	201ac <__ascii_wctomb+0x10>
   201a2:	700a      	strb	r2, [r1, #0]
   201a4:	2001      	movs	r0, #1
   201a6:	4770      	bx	lr
   201a8:	4608      	mov	r0, r1
   201aa:	4770      	bx	lr
   201ac:	238a      	movs	r3, #138	; 0x8a
   201ae:	6003      	str	r3, [r0, #0]
   201b0:	f04f 30ff 	mov.w	r0, #4294967295
   201b4:	4770      	bx	lr
   201b6:	bf00      	nop

000201b8 <_write_r>:
   201b8:	b570      	push	{r4, r5, r6, lr}
   201ba:	460d      	mov	r5, r1
   201bc:	4c08      	ldr	r4, [pc, #32]	; (201e0 <_write_r+0x28>)
   201be:	4611      	mov	r1, r2
   201c0:	4606      	mov	r6, r0
   201c2:	461a      	mov	r2, r3
   201c4:	4628      	mov	r0, r5
   201c6:	2300      	movs	r3, #0
   201c8:	6023      	str	r3, [r4, #0]
   201ca:	f002 f935 	bl	22438 <_write>
   201ce:	1c43      	adds	r3, r0, #1
   201d0:	d000      	beq.n	201d4 <_write_r+0x1c>
   201d2:	bd70      	pop	{r4, r5, r6, pc}
   201d4:	6823      	ldr	r3, [r4, #0]
   201d6:	2b00      	cmp	r3, #0
   201d8:	d0fb      	beq.n	201d2 <_write_r+0x1a>
   201da:	6033      	str	r3, [r6, #0]
   201dc:	bd70      	pop	{r4, r5, r6, pc}
   201de:	bf00      	nop
   201e0:	200023a4 	.word	0x200023a4

000201e4 <__swsetup_r>:
   201e4:	b538      	push	{r3, r4, r5, lr}
   201e6:	4b30      	ldr	r3, [pc, #192]	; (202a8 <__swsetup_r+0xc4>)
   201e8:	681b      	ldr	r3, [r3, #0]
   201ea:	4605      	mov	r5, r0
   201ec:	460c      	mov	r4, r1
   201ee:	b113      	cbz	r3, 201f6 <__swsetup_r+0x12>
   201f0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
   201f2:	2a00      	cmp	r2, #0
   201f4:	d038      	beq.n	20268 <__swsetup_r+0x84>
   201f6:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
   201fa:	b293      	uxth	r3, r2
   201fc:	0718      	lsls	r0, r3, #28
   201fe:	d50c      	bpl.n	2021a <__swsetup_r+0x36>
   20200:	6920      	ldr	r0, [r4, #16]
   20202:	b1a8      	cbz	r0, 20230 <__swsetup_r+0x4c>
   20204:	f013 0201 	ands.w	r2, r3, #1
   20208:	d01e      	beq.n	20248 <__swsetup_r+0x64>
   2020a:	6963      	ldr	r3, [r4, #20]
   2020c:	2200      	movs	r2, #0
   2020e:	425b      	negs	r3, r3
   20210:	61a3      	str	r3, [r4, #24]
   20212:	60a2      	str	r2, [r4, #8]
   20214:	b1f0      	cbz	r0, 20254 <__swsetup_r+0x70>
   20216:	2000      	movs	r0, #0
   20218:	bd38      	pop	{r3, r4, r5, pc}
   2021a:	06d9      	lsls	r1, r3, #27
   2021c:	d53c      	bpl.n	20298 <__swsetup_r+0xb4>
   2021e:	0758      	lsls	r0, r3, #29
   20220:	d426      	bmi.n	20270 <__swsetup_r+0x8c>
   20222:	6920      	ldr	r0, [r4, #16]
   20224:	f042 0308 	orr.w	r3, r2, #8
   20228:	81a3      	strh	r3, [r4, #12]
   2022a:	b29b      	uxth	r3, r3
   2022c:	2800      	cmp	r0, #0
   2022e:	d1e9      	bne.n	20204 <__swsetup_r+0x20>
   20230:	f403 7220 	and.w	r2, r3, #640	; 0x280
   20234:	f5b2 7f00 	cmp.w	r2, #512	; 0x200
   20238:	d0e4      	beq.n	20204 <__swsetup_r+0x20>
   2023a:	4628      	mov	r0, r5
   2023c:	4621      	mov	r1, r4
   2023e:	f001 fae7 	bl	21810 <__smakebuf_r>
   20242:	89a3      	ldrh	r3, [r4, #12]
   20244:	6920      	ldr	r0, [r4, #16]
   20246:	e7dd      	b.n	20204 <__swsetup_r+0x20>
   20248:	0799      	lsls	r1, r3, #30
   2024a:	bf58      	it	pl
   2024c:	6962      	ldrpl	r2, [r4, #20]
   2024e:	60a2      	str	r2, [r4, #8]
   20250:	2800      	cmp	r0, #0
   20252:	d1e0      	bne.n	20216 <__swsetup_r+0x32>
   20254:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   20258:	061a      	lsls	r2, r3, #24
   2025a:	d5dd      	bpl.n	20218 <__swsetup_r+0x34>
   2025c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   20260:	81a3      	strh	r3, [r4, #12]
   20262:	f04f 30ff 	mov.w	r0, #4294967295
   20266:	bd38      	pop	{r3, r4, r5, pc}
   20268:	4618      	mov	r0, r3
   2026a:	f001 f8e3 	bl	21434 <__sinit>
   2026e:	e7c2      	b.n	201f6 <__swsetup_r+0x12>
   20270:	6b21      	ldr	r1, [r4, #48]	; 0x30
   20272:	b151      	cbz	r1, 2028a <__swsetup_r+0xa6>
   20274:	f104 0340 	add.w	r3, r4, #64	; 0x40
   20278:	4299      	cmp	r1, r3
   2027a:	d004      	beq.n	20286 <__swsetup_r+0xa2>
   2027c:	4628      	mov	r0, r5
   2027e:	f001 f97b 	bl	21578 <_free_r>
   20282:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
   20286:	2300      	movs	r3, #0
   20288:	6323      	str	r3, [r4, #48]	; 0x30
   2028a:	2300      	movs	r3, #0
   2028c:	6920      	ldr	r0, [r4, #16]
   2028e:	6063      	str	r3, [r4, #4]
   20290:	f022 0224 	bic.w	r2, r2, #36	; 0x24
   20294:	6020      	str	r0, [r4, #0]
   20296:	e7c5      	b.n	20224 <__swsetup_r+0x40>
   20298:	f042 0240 	orr.w	r2, r2, #64	; 0x40
   2029c:	2309      	movs	r3, #9
   2029e:	602b      	str	r3, [r5, #0]
   202a0:	f04f 30ff 	mov.w	r0, #4294967295
   202a4:	81a2      	strh	r2, [r4, #12]
   202a6:	bd38      	pop	{r3, r4, r5, pc}
   202a8:	20000100 	.word	0x20000100

000202ac <register_fini>:
   202ac:	4b02      	ldr	r3, [pc, #8]	; (202b8 <register_fini+0xc>)
   202ae:	b113      	cbz	r3, 202b6 <register_fini+0xa>
   202b0:	4802      	ldr	r0, [pc, #8]	; (202bc <register_fini+0x10>)
   202b2:	f000 b805 	b.w	202c0 <atexit>
   202b6:	4770      	bx	lr
   202b8:	00000000 	.word	0x00000000
   202bc:	000214a5 	.word	0x000214a5

000202c0 <atexit>:
   202c0:	2300      	movs	r3, #0
   202c2:	4601      	mov	r1, r0
   202c4:	461a      	mov	r2, r3
   202c6:	4618      	mov	r0, r3
   202c8:	f001 beaa 	b.w	22020 <__register_exitproc>

000202cc <quorem>:
   202cc:	6902      	ldr	r2, [r0, #16]
   202ce:	690b      	ldr	r3, [r1, #16]
   202d0:	4293      	cmp	r3, r2
   202d2:	f300 808d 	bgt.w	203f0 <quorem+0x124>
   202d6:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   202da:	f103 38ff 	add.w	r8, r3, #4294967295
   202de:	f101 0714 	add.w	r7, r1, #20
   202e2:	f100 0b14 	add.w	fp, r0, #20
   202e6:	f857 2028 	ldr.w	r2, [r7, r8, lsl #2]
   202ea:	f85b 3028 	ldr.w	r3, [fp, r8, lsl #2]
   202ee:	ea4f 0488 	mov.w	r4, r8, lsl #2
   202f2:	b083      	sub	sp, #12
   202f4:	3201      	adds	r2, #1
   202f6:	fbb3 f9f2 	udiv	r9, r3, r2
   202fa:	eb0b 0304 	add.w	r3, fp, r4
   202fe:	9400      	str	r4, [sp, #0]
   20300:	eb07 0a04 	add.w	sl, r7, r4
   20304:	9301      	str	r3, [sp, #4]
   20306:	f1b9 0f00 	cmp.w	r9, #0
   2030a:	d039      	beq.n	20380 <quorem+0xb4>
   2030c:	2500      	movs	r5, #0
   2030e:	462e      	mov	r6, r5
   20310:	46bc      	mov	ip, r7
   20312:	46de      	mov	lr, fp
   20314:	f85c 4b04 	ldr.w	r4, [ip], #4
   20318:	f8de 3000 	ldr.w	r3, [lr]
   2031c:	b2a2      	uxth	r2, r4
   2031e:	fb09 5502 	mla	r5, r9, r2, r5
   20322:	0c22      	lsrs	r2, r4, #16
   20324:	0c2c      	lsrs	r4, r5, #16
   20326:	fb09 4202 	mla	r2, r9, r2, r4
   2032a:	b2ad      	uxth	r5, r5
   2032c:	1b75      	subs	r5, r6, r5
   2032e:	b296      	uxth	r6, r2
   20330:	ebc6 4613 	rsb	r6, r6, r3, lsr #16
   20334:	fa15 f383 	uxtah	r3, r5, r3
   20338:	eb06 4623 	add.w	r6, r6, r3, asr #16
   2033c:	b29b      	uxth	r3, r3
   2033e:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
   20342:	45e2      	cmp	sl, ip
   20344:	ea4f 4512 	mov.w	r5, r2, lsr #16
   20348:	f84e 3b04 	str.w	r3, [lr], #4
   2034c:	ea4f 4626 	mov.w	r6, r6, asr #16
   20350:	d2e0      	bcs.n	20314 <quorem+0x48>
   20352:	9b00      	ldr	r3, [sp, #0]
   20354:	f85b 3003 	ldr.w	r3, [fp, r3]
   20358:	b993      	cbnz	r3, 20380 <quorem+0xb4>
   2035a:	9c01      	ldr	r4, [sp, #4]
   2035c:	1f23      	subs	r3, r4, #4
   2035e:	459b      	cmp	fp, r3
   20360:	d20c      	bcs.n	2037c <quorem+0xb0>
   20362:	f854 3c04 	ldr.w	r3, [r4, #-4]
   20366:	b94b      	cbnz	r3, 2037c <quorem+0xb0>
   20368:	f1a4 0308 	sub.w	r3, r4, #8
   2036c:	e002      	b.n	20374 <quorem+0xa8>
   2036e:	681a      	ldr	r2, [r3, #0]
   20370:	3b04      	subs	r3, #4
   20372:	b91a      	cbnz	r2, 2037c <quorem+0xb0>
   20374:	459b      	cmp	fp, r3
   20376:	f108 38ff 	add.w	r8, r8, #4294967295
   2037a:	d3f8      	bcc.n	2036e <quorem+0xa2>
   2037c:	f8c0 8010 	str.w	r8, [r0, #16]
   20380:	4604      	mov	r4, r0
   20382:	f001 fc8d 	bl	21ca0 <__mcmp>
   20386:	2800      	cmp	r0, #0
   20388:	db2e      	blt.n	203e8 <quorem+0x11c>
   2038a:	f109 0901 	add.w	r9, r9, #1
   2038e:	465d      	mov	r5, fp
   20390:	2300      	movs	r3, #0
   20392:	f857 1b04 	ldr.w	r1, [r7], #4
   20396:	6828      	ldr	r0, [r5, #0]
   20398:	b28a      	uxth	r2, r1
   2039a:	1a9a      	subs	r2, r3, r2
   2039c:	0c0b      	lsrs	r3, r1, #16
   2039e:	fa12 f280 	uxtah	r2, r2, r0
   203a2:	ebc3 4310 	rsb	r3, r3, r0, lsr #16
   203a6:	eb03 4322 	add.w	r3, r3, r2, asr #16
   203aa:	b292      	uxth	r2, r2
   203ac:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
   203b0:	45ba      	cmp	sl, r7
   203b2:	f845 2b04 	str.w	r2, [r5], #4
   203b6:	ea4f 4323 	mov.w	r3, r3, asr #16
   203ba:	d2ea      	bcs.n	20392 <quorem+0xc6>
   203bc:	f85b 2028 	ldr.w	r2, [fp, r8, lsl #2]
   203c0:	eb0b 0388 	add.w	r3, fp, r8, lsl #2
   203c4:	b982      	cbnz	r2, 203e8 <quorem+0x11c>
   203c6:	1f1a      	subs	r2, r3, #4
   203c8:	4593      	cmp	fp, r2
   203ca:	d20b      	bcs.n	203e4 <quorem+0x118>
   203cc:	f853 2c04 	ldr.w	r2, [r3, #-4]
   203d0:	b942      	cbnz	r2, 203e4 <quorem+0x118>
   203d2:	3b08      	subs	r3, #8
   203d4:	e002      	b.n	203dc <quorem+0x110>
   203d6:	681a      	ldr	r2, [r3, #0]
   203d8:	3b04      	subs	r3, #4
   203da:	b91a      	cbnz	r2, 203e4 <quorem+0x118>
   203dc:	459b      	cmp	fp, r3
   203de:	f108 38ff 	add.w	r8, r8, #4294967295
   203e2:	d3f8      	bcc.n	203d6 <quorem+0x10a>
   203e4:	f8c4 8010 	str.w	r8, [r4, #16]
   203e8:	4648      	mov	r0, r9
   203ea:	b003      	add	sp, #12
   203ec:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   203f0:	2000      	movs	r0, #0
   203f2:	4770      	bx	lr
   203f4:	0000      	movs	r0, r0
	...

000203f8 <_dtoa_r>:
   203f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   203fc:	ec57 6b10 	vmov	r6, r7, d0
   20400:	b097      	sub	sp, #92	; 0x5c
   20402:	6c05      	ldr	r5, [r0, #64]	; 0x40
   20404:	9102      	str	r1, [sp, #8]
   20406:	4604      	mov	r4, r0
   20408:	4693      	mov	fp, r2
   2040a:	9303      	str	r3, [sp, #12]
   2040c:	e9cd 6700 	strd	r6, r7, [sp]
   20410:	b14d      	cbz	r5, 20426 <_dtoa_r+0x2e>
   20412:	6c42      	ldr	r2, [r0, #68]	; 0x44
   20414:	606a      	str	r2, [r5, #4]
   20416:	2301      	movs	r3, #1
   20418:	4093      	lsls	r3, r2
   2041a:	60ab      	str	r3, [r5, #8]
   2041c:	4629      	mov	r1, r5
   2041e:	f001 fa67 	bl	218f0 <_Bfree>
   20422:	2300      	movs	r3, #0
   20424:	6423      	str	r3, [r4, #64]	; 0x40
   20426:	e9dd 2300 	ldrd	r2, r3, [sp]
   2042a:	2b00      	cmp	r3, #0
   2042c:	4699      	mov	r9, r3
   2042e:	db38      	blt.n	204a2 <_dtoa_r+0xaa>
   20430:	9a20      	ldr	r2, [sp, #128]	; 0x80
   20432:	2300      	movs	r3, #0
   20434:	6013      	str	r3, [r2, #0]
   20436:	4ba0      	ldr	r3, [pc, #640]	; (206b8 <_dtoa_r+0x2c0>)
   20438:	ea33 0309 	bics.w	r3, r3, r9
   2043c:	d017      	beq.n	2046e <_dtoa_r+0x76>
   2043e:	e9dd 6700 	ldrd	r6, r7, [sp]
   20442:	2200      	movs	r2, #0
   20444:	2300      	movs	r3, #0
   20446:	4630      	mov	r0, r6
   20448:	4639      	mov	r1, r7
   2044a:	f7fb fc4b 	bl	1bce4 <__aeabi_dcmpeq>
   2044e:	4680      	mov	r8, r0
   20450:	2800      	cmp	r0, #0
   20452:	d02f      	beq.n	204b4 <_dtoa_r+0xbc>
   20454:	9a03      	ldr	r2, [sp, #12]
   20456:	2301      	movs	r3, #1
   20458:	6013      	str	r3, [r2, #0]
   2045a:	9b21      	ldr	r3, [sp, #132]	; 0x84
   2045c:	2b00      	cmp	r3, #0
   2045e:	f000 80c4 	beq.w	205ea <_dtoa_r+0x1f2>
   20462:	4896      	ldr	r0, [pc, #600]	; (206bc <_dtoa_r+0x2c4>)
   20464:	6018      	str	r0, [r3, #0]
   20466:	3801      	subs	r0, #1
   20468:	b017      	add	sp, #92	; 0x5c
   2046a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2046e:	9a03      	ldr	r2, [sp, #12]
   20470:	f242 730f 	movw	r3, #9999	; 0x270f
   20474:	6013      	str	r3, [r2, #0]
   20476:	9b00      	ldr	r3, [sp, #0]
   20478:	b96b      	cbnz	r3, 20496 <_dtoa_r+0x9e>
   2047a:	f3c9 0313 	ubfx	r3, r9, #0, #20
   2047e:	b953      	cbnz	r3, 20496 <_dtoa_r+0x9e>
   20480:	9b21      	ldr	r3, [sp, #132]	; 0x84
   20482:	488f      	ldr	r0, [pc, #572]	; (206c0 <_dtoa_r+0x2c8>)
   20484:	2b00      	cmp	r3, #0
   20486:	d0ef      	beq.n	20468 <_dtoa_r+0x70>
   20488:	f100 0308 	add.w	r3, r0, #8
   2048c:	9a21      	ldr	r2, [sp, #132]	; 0x84
   2048e:	6013      	str	r3, [r2, #0]
   20490:	b017      	add	sp, #92	; 0x5c
   20492:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   20496:	9b21      	ldr	r3, [sp, #132]	; 0x84
   20498:	488a      	ldr	r0, [pc, #552]	; (206c4 <_dtoa_r+0x2cc>)
   2049a:	2b00      	cmp	r3, #0
   2049c:	d0e4      	beq.n	20468 <_dtoa_r+0x70>
   2049e:	1cc3      	adds	r3, r0, #3
   204a0:	e7f4      	b.n	2048c <_dtoa_r+0x94>
   204a2:	9a01      	ldr	r2, [sp, #4]
   204a4:	f022 4900 	bic.w	r9, r2, #2147483648	; 0x80000000
   204a8:	9a20      	ldr	r2, [sp, #128]	; 0x80
   204aa:	f8cd 9004 	str.w	r9, [sp, #4]
   204ae:	2301      	movs	r3, #1
   204b0:	6013      	str	r3, [r2, #0]
   204b2:	e7c0      	b.n	20436 <_dtoa_r+0x3e>
   204b4:	aa14      	add	r2, sp, #80	; 0x50
   204b6:	a915      	add	r1, sp, #84	; 0x54
   204b8:	ec47 6b10 	vmov	d0, r6, r7
   204bc:	4620      	mov	r0, r4
   204be:	f001 fc8f 	bl	21de0 <__d2b>
   204c2:	ea5f 5519 	movs.w	r5, r9, lsr #20
   204c6:	4682      	mov	sl, r0
   204c8:	d073      	beq.n	205b2 <_dtoa_r+0x1ba>
   204ca:	f3c7 0313 	ubfx	r3, r7, #0, #20
   204ce:	f043 517f 	orr.w	r1, r3, #1069547520	; 0x3fc00000
   204d2:	f8cd 8040 	str.w	r8, [sp, #64]	; 0x40
   204d6:	f8dd 8050 	ldr.w	r8, [sp, #80]	; 0x50
   204da:	4630      	mov	r0, r6
   204dc:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
   204e0:	f441 1140 	orr.w	r1, r1, #3145728	; 0x300000
   204e4:	2200      	movs	r2, #0
   204e6:	4b78      	ldr	r3, [pc, #480]	; (206c8 <_dtoa_r+0x2d0>)
   204e8:	f7fa ffe0 	bl	1b4ac <__aeabi_dsub>
   204ec:	a36c      	add	r3, pc, #432	; (adr r3, 206a0 <_dtoa_r+0x2a8>)
   204ee:	e9d3 2300 	ldrd	r2, r3, [r3]
   204f2:	f7fb f98f 	bl	1b814 <__aeabi_dmul>
   204f6:	a36c      	add	r3, pc, #432	; (adr r3, 206a8 <_dtoa_r+0x2b0>)
   204f8:	e9d3 2300 	ldrd	r2, r3, [r3]
   204fc:	f7fa ffd8 	bl	1b4b0 <__adddf3>
   20500:	4606      	mov	r6, r0
   20502:	4628      	mov	r0, r5
   20504:	460f      	mov	r7, r1
   20506:	f7fb f91f 	bl	1b748 <__aeabi_i2d>
   2050a:	a369      	add	r3, pc, #420	; (adr r3, 206b0 <_dtoa_r+0x2b8>)
   2050c:	e9d3 2300 	ldrd	r2, r3, [r3]
   20510:	f7fb f980 	bl	1b814 <__aeabi_dmul>
   20514:	4602      	mov	r2, r0
   20516:	460b      	mov	r3, r1
   20518:	4630      	mov	r0, r6
   2051a:	4639      	mov	r1, r7
   2051c:	f7fa ffc8 	bl	1b4b0 <__adddf3>
   20520:	4606      	mov	r6, r0
   20522:	460f      	mov	r7, r1
   20524:	f7fb fc10 	bl	1bd48 <__aeabi_d2iz>
   20528:	2200      	movs	r2, #0
   2052a:	9004      	str	r0, [sp, #16]
   2052c:	2300      	movs	r3, #0
   2052e:	4630      	mov	r0, r6
   20530:	4639      	mov	r1, r7
   20532:	f7fb fbe1 	bl	1bcf8 <__aeabi_dcmplt>
   20536:	2800      	cmp	r0, #0
   20538:	f040 816f 	bne.w	2081a <_dtoa_r+0x422>
   2053c:	9e04      	ldr	r6, [sp, #16]
   2053e:	2e16      	cmp	r6, #22
   20540:	f200 8159 	bhi.w	207f6 <_dtoa_r+0x3fe>
   20544:	4b61      	ldr	r3, [pc, #388]	; (206cc <_dtoa_r+0x2d4>)
   20546:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
   2054a:	e9d3 0100 	ldrd	r0, r1, [r3]
   2054e:	e9dd 2300 	ldrd	r2, r3, [sp]
   20552:	f7fb fbef 	bl	1bd34 <__aeabi_dcmpgt>
   20556:	2800      	cmp	r0, #0
   20558:	f000 81c4 	beq.w	208e4 <_dtoa_r+0x4ec>
   2055c:	1e73      	subs	r3, r6, #1
   2055e:	9304      	str	r3, [sp, #16]
   20560:	2300      	movs	r3, #0
   20562:	930c      	str	r3, [sp, #48]	; 0x30
   20564:	eba8 0505 	sub.w	r5, r8, r5
   20568:	1e6b      	subs	r3, r5, #1
   2056a:	9305      	str	r3, [sp, #20]
   2056c:	f100 814f 	bmi.w	2080e <_dtoa_r+0x416>
   20570:	2300      	movs	r3, #0
   20572:	9306      	str	r3, [sp, #24]
   20574:	9b04      	ldr	r3, [sp, #16]
   20576:	2b00      	cmp	r3, #0
   20578:	f2c0 8140 	blt.w	207fc <_dtoa_r+0x404>
   2057c:	9a05      	ldr	r2, [sp, #20]
   2057e:	930b      	str	r3, [sp, #44]	; 0x2c
   20580:	4611      	mov	r1, r2
   20582:	4419      	add	r1, r3
   20584:	2300      	movs	r3, #0
   20586:	9105      	str	r1, [sp, #20]
   20588:	930a      	str	r3, [sp, #40]	; 0x28
   2058a:	9b02      	ldr	r3, [sp, #8]
   2058c:	2b09      	cmp	r3, #9
   2058e:	d82e      	bhi.n	205ee <_dtoa_r+0x1f6>
   20590:	2b05      	cmp	r3, #5
   20592:	f340 8651 	ble.w	21238 <_dtoa_r+0xe40>
   20596:	3b04      	subs	r3, #4
   20598:	9302      	str	r3, [sp, #8]
   2059a:	2700      	movs	r7, #0
   2059c:	9b02      	ldr	r3, [sp, #8]
   2059e:	3b02      	subs	r3, #2
   205a0:	2b03      	cmp	r3, #3
   205a2:	f200 8633 	bhi.w	2120c <_dtoa_r+0xe14>
   205a6:	e8df f013 	tbh	[pc, r3, lsl #1]
   205aa:	03d6      	.short	0x03d6
   205ac:	03e302cb 	.word	0x03e302cb
   205b0:	0464      	.short	0x0464
   205b2:	f8dd 8050 	ldr.w	r8, [sp, #80]	; 0x50
   205b6:	9d15      	ldr	r5, [sp, #84]	; 0x54
   205b8:	4445      	add	r5, r8
   205ba:	f205 4332 	addw	r3, r5, #1074	; 0x432
   205be:	2b20      	cmp	r3, #32
   205c0:	f340 818a 	ble.w	208d8 <_dtoa_r+0x4e0>
   205c4:	f1c3 0340 	rsb	r3, r3, #64	; 0x40
   205c8:	fa09 f903 	lsl.w	r9, r9, r3
   205cc:	9b00      	ldr	r3, [sp, #0]
   205ce:	f205 4012 	addw	r0, r5, #1042	; 0x412
   205d2:	fa23 f000 	lsr.w	r0, r3, r0
   205d6:	ea40 0009 	orr.w	r0, r0, r9
   205da:	f7fb f8a5 	bl	1b728 <__aeabi_ui2d>
   205de:	2301      	movs	r3, #1
   205e0:	3d01      	subs	r5, #1
   205e2:	f1a1 71f8 	sub.w	r1, r1, #32505856	; 0x1f00000
   205e6:	9310      	str	r3, [sp, #64]	; 0x40
   205e8:	e77c      	b.n	204e4 <_dtoa_r+0xec>
   205ea:	4839      	ldr	r0, [pc, #228]	; (206d0 <_dtoa_r+0x2d8>)
   205ec:	e73c      	b.n	20468 <_dtoa_r+0x70>
   205ee:	2100      	movs	r1, #0
   205f0:	6461      	str	r1, [r4, #68]	; 0x44
   205f2:	4620      	mov	r0, r4
   205f4:	468b      	mov	fp, r1
   205f6:	f001 f955 	bl	218a4 <_Balloc>
   205fa:	f04f 33ff 	mov.w	r3, #4294967295
   205fe:	9308      	str	r3, [sp, #32]
   20600:	930d      	str	r3, [sp, #52]	; 0x34
   20602:	2301      	movs	r3, #1
   20604:	9007      	str	r0, [sp, #28]
   20606:	6420      	str	r0, [r4, #64]	; 0x40
   20608:	f8cd b008 	str.w	fp, [sp, #8]
   2060c:	9309      	str	r3, [sp, #36]	; 0x24
   2060e:	9b15      	ldr	r3, [sp, #84]	; 0x54
   20610:	2b00      	cmp	r3, #0
   20612:	f2c0 80d0 	blt.w	207b6 <_dtoa_r+0x3be>
   20616:	9a04      	ldr	r2, [sp, #16]
   20618:	2a0e      	cmp	r2, #14
   2061a:	f300 80cc 	bgt.w	207b6 <_dtoa_r+0x3be>
   2061e:	4b2b      	ldr	r3, [pc, #172]	; (206cc <_dtoa_r+0x2d4>)
   20620:	f1bb 0f00 	cmp.w	fp, #0
   20624:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
   20628:	e9d3 8900 	ldrd	r8, r9, [r3]
   2062c:	f2c0 83be 	blt.w	20dac <_dtoa_r+0x9b4>
   20630:	e9dd 6700 	ldrd	r6, r7, [sp]
   20634:	4642      	mov	r2, r8
   20636:	464b      	mov	r3, r9
   20638:	4630      	mov	r0, r6
   2063a:	4639      	mov	r1, r7
   2063c:	f7fb fa14 	bl	1ba68 <__aeabi_ddiv>
   20640:	f7fb fb82 	bl	1bd48 <__aeabi_d2iz>
   20644:	4683      	mov	fp, r0
   20646:	f7fb f87f 	bl	1b748 <__aeabi_i2d>
   2064a:	4642      	mov	r2, r8
   2064c:	464b      	mov	r3, r9
   2064e:	f7fb f8e1 	bl	1b814 <__aeabi_dmul>
   20652:	460b      	mov	r3, r1
   20654:	4602      	mov	r2, r0
   20656:	4639      	mov	r1, r7
   20658:	4630      	mov	r0, r6
   2065a:	f7fa ff27 	bl	1b4ac <__aeabi_dsub>
   2065e:	9d07      	ldr	r5, [sp, #28]
   20660:	f10b 0330 	add.w	r3, fp, #48	; 0x30
   20664:	702b      	strb	r3, [r5, #0]
   20666:	9b08      	ldr	r3, [sp, #32]
   20668:	2b01      	cmp	r3, #1
   2066a:	4606      	mov	r6, r0
   2066c:	460f      	mov	r7, r1
   2066e:	f105 0501 	add.w	r5, r5, #1
   20672:	d061      	beq.n	20738 <_dtoa_r+0x340>
   20674:	2200      	movs	r2, #0
   20676:	4b17      	ldr	r3, [pc, #92]	; (206d4 <_dtoa_r+0x2dc>)
   20678:	f7fb f8cc 	bl	1b814 <__aeabi_dmul>
   2067c:	2200      	movs	r2, #0
   2067e:	2300      	movs	r3, #0
   20680:	4606      	mov	r6, r0
   20682:	460f      	mov	r7, r1
   20684:	f7fb fb2e 	bl	1bce4 <__aeabi_dcmpeq>
   20688:	2800      	cmp	r0, #0
   2068a:	f040 8081 	bne.w	20790 <_dtoa_r+0x398>
   2068e:	f8cd a000 	str.w	sl, [sp]
   20692:	9402      	str	r4, [sp, #8]
   20694:	f8dd a01c 	ldr.w	sl, [sp, #28]
   20698:	9c08      	ldr	r4, [sp, #32]
   2069a:	e028      	b.n	206ee <_dtoa_r+0x2f6>
   2069c:	f3af 8000 	nop.w
   206a0:	636f4361 	.word	0x636f4361
   206a4:	3fd287a7 	.word	0x3fd287a7
   206a8:	8b60c8b3 	.word	0x8b60c8b3
   206ac:	3fc68a28 	.word	0x3fc68a28
   206b0:	509f79fb 	.word	0x509f79fb
   206b4:	3fd34413 	.word	0x3fd34413
   206b8:	7ff00000 	.word	0x7ff00000
   206bc:	000247e1 	.word	0x000247e1
   206c0:	00024930 	.word	0x00024930
   206c4:	0002493c 	.word	0x0002493c
   206c8:	3ff80000 	.word	0x3ff80000
   206cc:	00024968 	.word	0x00024968
   206d0:	000247e0 	.word	0x000247e0
   206d4:	40240000 	.word	0x40240000
   206d8:	f7fb f89c 	bl	1b814 <__aeabi_dmul>
   206dc:	2200      	movs	r2, #0
   206de:	2300      	movs	r3, #0
   206e0:	4606      	mov	r6, r0
   206e2:	460f      	mov	r7, r1
   206e4:	f7fb fafe 	bl	1bce4 <__aeabi_dcmpeq>
   206e8:	2800      	cmp	r0, #0
   206ea:	f040 83c5 	bne.w	20e78 <_dtoa_r+0xa80>
   206ee:	4642      	mov	r2, r8
   206f0:	464b      	mov	r3, r9
   206f2:	4630      	mov	r0, r6
   206f4:	4639      	mov	r1, r7
   206f6:	f7fb f9b7 	bl	1ba68 <__aeabi_ddiv>
   206fa:	f7fb fb25 	bl	1bd48 <__aeabi_d2iz>
   206fe:	4683      	mov	fp, r0
   20700:	f7fb f822 	bl	1b748 <__aeabi_i2d>
   20704:	4642      	mov	r2, r8
   20706:	464b      	mov	r3, r9
   20708:	f7fb f884 	bl	1b814 <__aeabi_dmul>
   2070c:	4602      	mov	r2, r0
   2070e:	460b      	mov	r3, r1
   20710:	4630      	mov	r0, r6
   20712:	4639      	mov	r1, r7
   20714:	f7fa feca 	bl	1b4ac <__aeabi_dsub>
   20718:	f10b 0e30 	add.w	lr, fp, #48	; 0x30
   2071c:	f805 eb01 	strb.w	lr, [r5], #1
   20720:	eba5 0e0a 	sub.w	lr, r5, sl
   20724:	45a6      	cmp	lr, r4
   20726:	4606      	mov	r6, r0
   20728:	460f      	mov	r7, r1
   2072a:	f04f 0200 	mov.w	r2, #0
   2072e:	4b6e      	ldr	r3, [pc, #440]	; (208e8 <_dtoa_r+0x4f0>)
   20730:	d1d2      	bne.n	206d8 <_dtoa_r+0x2e0>
   20732:	f8dd a000 	ldr.w	sl, [sp]
   20736:	9c02      	ldr	r4, [sp, #8]
   20738:	4632      	mov	r2, r6
   2073a:	463b      	mov	r3, r7
   2073c:	4630      	mov	r0, r6
   2073e:	4639      	mov	r1, r7
   20740:	f7fa feb6 	bl	1b4b0 <__adddf3>
   20744:	4606      	mov	r6, r0
   20746:	460f      	mov	r7, r1
   20748:	4602      	mov	r2, r0
   2074a:	460b      	mov	r3, r1
   2074c:	4640      	mov	r0, r8
   2074e:	4649      	mov	r1, r9
   20750:	f7fb fad2 	bl	1bcf8 <__aeabi_dcmplt>
   20754:	b948      	cbnz	r0, 2076a <_dtoa_r+0x372>
   20756:	4632      	mov	r2, r6
   20758:	463b      	mov	r3, r7
   2075a:	4640      	mov	r0, r8
   2075c:	4649      	mov	r1, r9
   2075e:	f7fb fac1 	bl	1bce4 <__aeabi_dcmpeq>
   20762:	b1a8      	cbz	r0, 20790 <_dtoa_r+0x398>
   20764:	f01b 0f01 	tst.w	fp, #1
   20768:	d012      	beq.n	20790 <_dtoa_r+0x398>
   2076a:	f815 8c01 	ldrb.w	r8, [r5, #-1]
   2076e:	9a07      	ldr	r2, [sp, #28]
   20770:	1e6b      	subs	r3, r5, #1
   20772:	e004      	b.n	2077e <_dtoa_r+0x386>
   20774:	429a      	cmp	r2, r3
   20776:	f000 842d 	beq.w	20fd4 <_dtoa_r+0xbdc>
   2077a:	f813 8d01 	ldrb.w	r8, [r3, #-1]!
   2077e:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
   20782:	f103 0501 	add.w	r5, r3, #1
   20786:	d0f5      	beq.n	20774 <_dtoa_r+0x37c>
   20788:	f108 0801 	add.w	r8, r8, #1
   2078c:	f883 8000 	strb.w	r8, [r3]
   20790:	4651      	mov	r1, sl
   20792:	4620      	mov	r0, r4
   20794:	f001 f8ac 	bl	218f0 <_Bfree>
   20798:	2200      	movs	r2, #0
   2079a:	9b04      	ldr	r3, [sp, #16]
   2079c:	702a      	strb	r2, [r5, #0]
   2079e:	9a03      	ldr	r2, [sp, #12]
   207a0:	3301      	adds	r3, #1
   207a2:	6013      	str	r3, [r2, #0]
   207a4:	9b21      	ldr	r3, [sp, #132]	; 0x84
   207a6:	2b00      	cmp	r3, #0
   207a8:	f000 83a3 	beq.w	20ef2 <_dtoa_r+0xafa>
   207ac:	9807      	ldr	r0, [sp, #28]
   207ae:	601d      	str	r5, [r3, #0]
   207b0:	b017      	add	sp, #92	; 0x5c
   207b2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   207b6:	9a09      	ldr	r2, [sp, #36]	; 0x24
   207b8:	2a00      	cmp	r2, #0
   207ba:	d040      	beq.n	2083e <_dtoa_r+0x446>
   207bc:	9a02      	ldr	r2, [sp, #8]
   207be:	2a01      	cmp	r2, #1
   207c0:	f340 831c 	ble.w	20dfc <_dtoa_r+0xa04>
   207c4:	9b08      	ldr	r3, [sp, #32]
   207c6:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   207c8:	1e5f      	subs	r7, r3, #1
   207ca:	42ba      	cmp	r2, r7
   207cc:	f2c0 8394 	blt.w	20ef8 <_dtoa_r+0xb00>
   207d0:	1bd7      	subs	r7, r2, r7
   207d2:	9b08      	ldr	r3, [sp, #32]
   207d4:	2b00      	cmp	r3, #0
   207d6:	f2c0 847e 	blt.w	210d6 <_dtoa_r+0xcde>
   207da:	9d06      	ldr	r5, [sp, #24]
   207dc:	9b08      	ldr	r3, [sp, #32]
   207de:	9a06      	ldr	r2, [sp, #24]
   207e0:	441a      	add	r2, r3
   207e2:	9206      	str	r2, [sp, #24]
   207e4:	9a05      	ldr	r2, [sp, #20]
   207e6:	2101      	movs	r1, #1
   207e8:	441a      	add	r2, r3
   207ea:	4620      	mov	r0, r4
   207ec:	9205      	str	r2, [sp, #20]
   207ee:	f001 f919 	bl	21a24 <__i2b>
   207f2:	4606      	mov	r6, r0
   207f4:	e026      	b.n	20844 <_dtoa_r+0x44c>
   207f6:	2301      	movs	r3, #1
   207f8:	930c      	str	r3, [sp, #48]	; 0x30
   207fa:	e6b3      	b.n	20564 <_dtoa_r+0x16c>
   207fc:	9a06      	ldr	r2, [sp, #24]
   207fe:	9b04      	ldr	r3, [sp, #16]
   20800:	1ad2      	subs	r2, r2, r3
   20802:	425b      	negs	r3, r3
   20804:	930a      	str	r3, [sp, #40]	; 0x28
   20806:	2300      	movs	r3, #0
   20808:	9206      	str	r2, [sp, #24]
   2080a:	930b      	str	r3, [sp, #44]	; 0x2c
   2080c:	e6bd      	b.n	2058a <_dtoa_r+0x192>
   2080e:	f1c5 0301 	rsb	r3, r5, #1
   20812:	9306      	str	r3, [sp, #24]
   20814:	2300      	movs	r3, #0
   20816:	9305      	str	r3, [sp, #20]
   20818:	e6ac      	b.n	20574 <_dtoa_r+0x17c>
   2081a:	f8dd 9010 	ldr.w	r9, [sp, #16]
   2081e:	4648      	mov	r0, r9
   20820:	f7fa ff92 	bl	1b748 <__aeabi_i2d>
   20824:	4602      	mov	r2, r0
   20826:	460b      	mov	r3, r1
   20828:	4630      	mov	r0, r6
   2082a:	4639      	mov	r1, r7
   2082c:	f7fb fa5a 	bl	1bce4 <__aeabi_dcmpeq>
   20830:	2800      	cmp	r0, #0
   20832:	f47f ae83 	bne.w	2053c <_dtoa_r+0x144>
   20836:	f109 33ff 	add.w	r3, r9, #4294967295
   2083a:	9304      	str	r3, [sp, #16]
   2083c:	e67e      	b.n	2053c <_dtoa_r+0x144>
   2083e:	9f0a      	ldr	r7, [sp, #40]	; 0x28
   20840:	9d06      	ldr	r5, [sp, #24]
   20842:	9e09      	ldr	r6, [sp, #36]	; 0x24
   20844:	2d00      	cmp	r5, #0
   20846:	dd0c      	ble.n	20862 <_dtoa_r+0x46a>
   20848:	9905      	ldr	r1, [sp, #20]
   2084a:	2900      	cmp	r1, #0
   2084c:	460b      	mov	r3, r1
   2084e:	dd08      	ble.n	20862 <_dtoa_r+0x46a>
   20850:	42a9      	cmp	r1, r5
   20852:	9a06      	ldr	r2, [sp, #24]
   20854:	bfa8      	it	ge
   20856:	462b      	movge	r3, r5
   20858:	1ad2      	subs	r2, r2, r3
   2085a:	1aed      	subs	r5, r5, r3
   2085c:	1acb      	subs	r3, r1, r3
   2085e:	9206      	str	r2, [sp, #24]
   20860:	9305      	str	r3, [sp, #20]
   20862:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   20864:	b1d3      	cbz	r3, 2089c <_dtoa_r+0x4a4>
   20866:	9b09      	ldr	r3, [sp, #36]	; 0x24
   20868:	2b00      	cmp	r3, #0
   2086a:	f000 82c0 	beq.w	20dee <_dtoa_r+0x9f6>
   2086e:	2f00      	cmp	r7, #0
   20870:	dd10      	ble.n	20894 <_dtoa_r+0x49c>
   20872:	4631      	mov	r1, r6
   20874:	463a      	mov	r2, r7
   20876:	4620      	mov	r0, r4
   20878:	f001 f970 	bl	21b5c <__pow5mult>
   2087c:	4652      	mov	r2, sl
   2087e:	4601      	mov	r1, r0
   20880:	4606      	mov	r6, r0
   20882:	4620      	mov	r0, r4
   20884:	f001 f8d8 	bl	21a38 <__multiply>
   20888:	4651      	mov	r1, sl
   2088a:	4680      	mov	r8, r0
   2088c:	4620      	mov	r0, r4
   2088e:	f001 f82f 	bl	218f0 <_Bfree>
   20892:	46c2      	mov	sl, r8
   20894:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   20896:	1bda      	subs	r2, r3, r7
   20898:	f040 82aa 	bne.w	20df0 <_dtoa_r+0x9f8>
   2089c:	2101      	movs	r1, #1
   2089e:	4620      	mov	r0, r4
   208a0:	f001 f8c0 	bl	21a24 <__i2b>
   208a4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   208a6:	2b00      	cmp	r3, #0
   208a8:	4681      	mov	r9, r0
   208aa:	dd1f      	ble.n	208ec <_dtoa_r+0x4f4>
   208ac:	4601      	mov	r1, r0
   208ae:	461a      	mov	r2, r3
   208b0:	4620      	mov	r0, r4
   208b2:	f001 f953 	bl	21b5c <__pow5mult>
   208b6:	9b02      	ldr	r3, [sp, #8]
   208b8:	2b01      	cmp	r3, #1
   208ba:	4681      	mov	r9, r0
   208bc:	f340 825b 	ble.w	20d76 <_dtoa_r+0x97e>
   208c0:	f04f 0800 	mov.w	r8, #0
   208c4:	f8d9 3010 	ldr.w	r3, [r9, #16]
   208c8:	eb09 0383 	add.w	r3, r9, r3, lsl #2
   208cc:	6918      	ldr	r0, [r3, #16]
   208ce:	f001 f859 	bl	21984 <__hi0bits>
   208d2:	f1c0 0020 	rsb	r0, r0, #32
   208d6:	e013      	b.n	20900 <_dtoa_r+0x508>
   208d8:	f1c3 0920 	rsb	r9, r3, #32
   208dc:	9b00      	ldr	r3, [sp, #0]
   208de:	fa03 f009 	lsl.w	r0, r3, r9
   208e2:	e67a      	b.n	205da <_dtoa_r+0x1e2>
   208e4:	900c      	str	r0, [sp, #48]	; 0x30
   208e6:	e63d      	b.n	20564 <_dtoa_r+0x16c>
   208e8:	40240000 	.word	0x40240000
   208ec:	9b02      	ldr	r3, [sp, #8]
   208ee:	2b01      	cmp	r3, #1
   208f0:	f340 828d 	ble.w	20e0e <_dtoa_r+0xa16>
   208f4:	f04f 0800 	mov.w	r8, #0
   208f8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   208fa:	2001      	movs	r0, #1
   208fc:	2b00      	cmp	r3, #0
   208fe:	d1e1      	bne.n	208c4 <_dtoa_r+0x4cc>
   20900:	9a05      	ldr	r2, [sp, #20]
   20902:	4410      	add	r0, r2
   20904:	f010 001f 	ands.w	r0, r0, #31
   20908:	f000 80a1 	beq.w	20a4e <_dtoa_r+0x656>
   2090c:	f1c0 0320 	rsb	r3, r0, #32
   20910:	2b04      	cmp	r3, #4
   20912:	f340 848c 	ble.w	2122e <_dtoa_r+0xe36>
   20916:	9b06      	ldr	r3, [sp, #24]
   20918:	f1c0 001c 	rsb	r0, r0, #28
   2091c:	4403      	add	r3, r0
   2091e:	9306      	str	r3, [sp, #24]
   20920:	4613      	mov	r3, r2
   20922:	4403      	add	r3, r0
   20924:	4405      	add	r5, r0
   20926:	9305      	str	r3, [sp, #20]
   20928:	9b06      	ldr	r3, [sp, #24]
   2092a:	2b00      	cmp	r3, #0
   2092c:	dd05      	ble.n	2093a <_dtoa_r+0x542>
   2092e:	4651      	mov	r1, sl
   20930:	461a      	mov	r2, r3
   20932:	4620      	mov	r0, r4
   20934:	f001 f962 	bl	21bfc <__lshift>
   20938:	4682      	mov	sl, r0
   2093a:	9b05      	ldr	r3, [sp, #20]
   2093c:	2b00      	cmp	r3, #0
   2093e:	dd05      	ble.n	2094c <_dtoa_r+0x554>
   20940:	4649      	mov	r1, r9
   20942:	461a      	mov	r2, r3
   20944:	4620      	mov	r0, r4
   20946:	f001 f959 	bl	21bfc <__lshift>
   2094a:	4681      	mov	r9, r0
   2094c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   2094e:	2b00      	cmp	r3, #0
   20950:	f040 8086 	bne.w	20a60 <_dtoa_r+0x668>
   20954:	9b08      	ldr	r3, [sp, #32]
   20956:	2b00      	cmp	r3, #0
   20958:	f340 8269 	ble.w	20e2e <_dtoa_r+0xa36>
   2095c:	9b09      	ldr	r3, [sp, #36]	; 0x24
   2095e:	2b00      	cmp	r3, #0
   20960:	f000 8098 	beq.w	20a94 <_dtoa_r+0x69c>
   20964:	2d00      	cmp	r5, #0
   20966:	dd05      	ble.n	20974 <_dtoa_r+0x57c>
   20968:	4631      	mov	r1, r6
   2096a:	462a      	mov	r2, r5
   2096c:	4620      	mov	r0, r4
   2096e:	f001 f945 	bl	21bfc <__lshift>
   20972:	4606      	mov	r6, r0
   20974:	f1b8 0f00 	cmp.w	r8, #0
   20978:	f040 8336 	bne.w	20fe8 <_dtoa_r+0xbf0>
   2097c:	46b0      	mov	r8, r6
   2097e:	9b08      	ldr	r3, [sp, #32]
   20980:	9a07      	ldr	r2, [sp, #28]
   20982:	3b01      	subs	r3, #1
   20984:	18d3      	adds	r3, r2, r3
   20986:	9308      	str	r3, [sp, #32]
   20988:	9b00      	ldr	r3, [sp, #0]
   2098a:	f003 0301 	and.w	r3, r3, #1
   2098e:	9309      	str	r3, [sp, #36]	; 0x24
   20990:	4617      	mov	r7, r2
   20992:	4649      	mov	r1, r9
   20994:	4650      	mov	r0, sl
   20996:	f7ff fc99 	bl	202cc <quorem>
   2099a:	4631      	mov	r1, r6
   2099c:	4605      	mov	r5, r0
   2099e:	4650      	mov	r0, sl
   209a0:	f001 f97e 	bl	21ca0 <__mcmp>
   209a4:	4642      	mov	r2, r8
   209a6:	4649      	mov	r1, r9
   209a8:	4683      	mov	fp, r0
   209aa:	4620      	mov	r0, r4
   209ac:	f001 f994 	bl	21cd8 <__mdiff>
   209b0:	f105 0230 	add.w	r2, r5, #48	; 0x30
   209b4:	9200      	str	r2, [sp, #0]
   209b6:	68c2      	ldr	r2, [r0, #12]
   209b8:	4601      	mov	r1, r0
   209ba:	2a00      	cmp	r2, #0
   209bc:	f040 8232 	bne.w	20e24 <_dtoa_r+0xa2c>
   209c0:	9006      	str	r0, [sp, #24]
   209c2:	4650      	mov	r0, sl
   209c4:	f001 f96c 	bl	21ca0 <__mcmp>
   209c8:	9b06      	ldr	r3, [sp, #24]
   209ca:	9005      	str	r0, [sp, #20]
   209cc:	4619      	mov	r1, r3
   209ce:	4620      	mov	r0, r4
   209d0:	f000 ff8e 	bl	218f0 <_Bfree>
   209d4:	9a05      	ldr	r2, [sp, #20]
   209d6:	b932      	cbnz	r2, 209e6 <_dtoa_r+0x5ee>
   209d8:	9b02      	ldr	r3, [sp, #8]
   209da:	b923      	cbnz	r3, 209e6 <_dtoa_r+0x5ee>
   209dc:	9b09      	ldr	r3, [sp, #36]	; 0x24
   209de:	2b00      	cmp	r3, #0
   209e0:	f000 83de 	beq.w	211a0 <_dtoa_r+0xda8>
   209e4:	9a02      	ldr	r2, [sp, #8]
   209e6:	f1bb 0f00 	cmp.w	fp, #0
   209ea:	f2c0 82a2 	blt.w	20f32 <_dtoa_r+0xb3a>
   209ee:	d105      	bne.n	209fc <_dtoa_r+0x604>
   209f0:	9b02      	ldr	r3, [sp, #8]
   209f2:	b91b      	cbnz	r3, 209fc <_dtoa_r+0x604>
   209f4:	9b09      	ldr	r3, [sp, #36]	; 0x24
   209f6:	2b00      	cmp	r3, #0
   209f8:	f000 829b 	beq.w	20f32 <_dtoa_r+0xb3a>
   209fc:	2a00      	cmp	r2, #0
   209fe:	f300 8307 	bgt.w	21010 <_dtoa_r+0xc18>
   20a02:	f89d 3000 	ldrb.w	r3, [sp]
   20a06:	703b      	strb	r3, [r7, #0]
   20a08:	9b08      	ldr	r3, [sp, #32]
   20a0a:	f107 0b01 	add.w	fp, r7, #1
   20a0e:	429f      	cmp	r7, r3
   20a10:	465d      	mov	r5, fp
   20a12:	f000 8308 	beq.w	21026 <_dtoa_r+0xc2e>
   20a16:	4651      	mov	r1, sl
   20a18:	2300      	movs	r3, #0
   20a1a:	220a      	movs	r2, #10
   20a1c:	4620      	mov	r0, r4
   20a1e:	f000 ff71 	bl	21904 <__multadd>
   20a22:	4546      	cmp	r6, r8
   20a24:	4682      	mov	sl, r0
   20a26:	4631      	mov	r1, r6
   20a28:	f04f 0300 	mov.w	r3, #0
   20a2c:	f04f 020a 	mov.w	r2, #10
   20a30:	4620      	mov	r0, r4
   20a32:	f000 81f1 	beq.w	20e18 <_dtoa_r+0xa20>
   20a36:	f000 ff65 	bl	21904 <__multadd>
   20a3a:	4641      	mov	r1, r8
   20a3c:	4606      	mov	r6, r0
   20a3e:	2300      	movs	r3, #0
   20a40:	220a      	movs	r2, #10
   20a42:	4620      	mov	r0, r4
   20a44:	f000 ff5e 	bl	21904 <__multadd>
   20a48:	465f      	mov	r7, fp
   20a4a:	4680      	mov	r8, r0
   20a4c:	e7a1      	b.n	20992 <_dtoa_r+0x59a>
   20a4e:	201c      	movs	r0, #28
   20a50:	9b06      	ldr	r3, [sp, #24]
   20a52:	4403      	add	r3, r0
   20a54:	9306      	str	r3, [sp, #24]
   20a56:	9b05      	ldr	r3, [sp, #20]
   20a58:	4403      	add	r3, r0
   20a5a:	4405      	add	r5, r0
   20a5c:	9305      	str	r3, [sp, #20]
   20a5e:	e763      	b.n	20928 <_dtoa_r+0x530>
   20a60:	4649      	mov	r1, r9
   20a62:	4650      	mov	r0, sl
   20a64:	f001 f91c 	bl	21ca0 <__mcmp>
   20a68:	2800      	cmp	r0, #0
   20a6a:	f6bf af73 	bge.w	20954 <_dtoa_r+0x55c>
   20a6e:	9f04      	ldr	r7, [sp, #16]
   20a70:	4651      	mov	r1, sl
   20a72:	2300      	movs	r3, #0
   20a74:	220a      	movs	r2, #10
   20a76:	4620      	mov	r0, r4
   20a78:	3f01      	subs	r7, #1
   20a7a:	9704      	str	r7, [sp, #16]
   20a7c:	f000 ff42 	bl	21904 <__multadd>
   20a80:	9b09      	ldr	r3, [sp, #36]	; 0x24
   20a82:	4682      	mov	sl, r0
   20a84:	2b00      	cmp	r3, #0
   20a86:	f040 83a7 	bne.w	211d8 <_dtoa_r+0xde0>
   20a8a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   20a8c:	2b00      	cmp	r3, #0
   20a8e:	f340 83b0 	ble.w	211f2 <_dtoa_r+0xdfa>
   20a92:	9308      	str	r3, [sp, #32]
   20a94:	f8dd b01c 	ldr.w	fp, [sp, #28]
   20a98:	f8dd 8020 	ldr.w	r8, [sp, #32]
   20a9c:	465d      	mov	r5, fp
   20a9e:	e002      	b.n	20aa6 <_dtoa_r+0x6ae>
   20aa0:	f000 ff30 	bl	21904 <__multadd>
   20aa4:	4682      	mov	sl, r0
   20aa6:	4649      	mov	r1, r9
   20aa8:	4650      	mov	r0, sl
   20aaa:	f7ff fc0f 	bl	202cc <quorem>
   20aae:	f100 0730 	add.w	r7, r0, #48	; 0x30
   20ab2:	f805 7b01 	strb.w	r7, [r5], #1
   20ab6:	eba5 030b 	sub.w	r3, r5, fp
   20aba:	4543      	cmp	r3, r8
   20abc:	f04f 020a 	mov.w	r2, #10
   20ac0:	f04f 0300 	mov.w	r3, #0
   20ac4:	4651      	mov	r1, sl
   20ac6:	4620      	mov	r0, r4
   20ac8:	dbea      	blt.n	20aa0 <_dtoa_r+0x6a8>
   20aca:	9b07      	ldr	r3, [sp, #28]
   20acc:	9a08      	ldr	r2, [sp, #32]
   20ace:	9700      	str	r7, [sp, #0]
   20ad0:	2a01      	cmp	r2, #1
   20ad2:	bfac      	ite	ge
   20ad4:	189b      	addge	r3, r3, r2
   20ad6:	3301      	addlt	r3, #1
   20ad8:	461d      	mov	r5, r3
   20ada:	f04f 0b00 	mov.w	fp, #0
   20ade:	4651      	mov	r1, sl
   20ae0:	2201      	movs	r2, #1
   20ae2:	4620      	mov	r0, r4
   20ae4:	f001 f88a 	bl	21bfc <__lshift>
   20ae8:	4649      	mov	r1, r9
   20aea:	4682      	mov	sl, r0
   20aec:	f001 f8d8 	bl	21ca0 <__mcmp>
   20af0:	2800      	cmp	r0, #0
   20af2:	f340 823a 	ble.w	20f6a <_dtoa_r+0xb72>
   20af6:	f815 2c01 	ldrb.w	r2, [r5, #-1]
   20afa:	9907      	ldr	r1, [sp, #28]
   20afc:	1e6b      	subs	r3, r5, #1
   20afe:	e004      	b.n	20b0a <_dtoa_r+0x712>
   20b00:	428b      	cmp	r3, r1
   20b02:	f000 81af 	beq.w	20e64 <_dtoa_r+0xa6c>
   20b06:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
   20b0a:	2a39      	cmp	r2, #57	; 0x39
   20b0c:	f103 0501 	add.w	r5, r3, #1
   20b10:	d0f6      	beq.n	20b00 <_dtoa_r+0x708>
   20b12:	3201      	adds	r2, #1
   20b14:	701a      	strb	r2, [r3, #0]
   20b16:	4649      	mov	r1, r9
   20b18:	4620      	mov	r0, r4
   20b1a:	f000 fee9 	bl	218f0 <_Bfree>
   20b1e:	2e00      	cmp	r6, #0
   20b20:	f43f ae36 	beq.w	20790 <_dtoa_r+0x398>
   20b24:	f1bb 0f00 	cmp.w	fp, #0
   20b28:	d005      	beq.n	20b36 <_dtoa_r+0x73e>
   20b2a:	45b3      	cmp	fp, r6
   20b2c:	d003      	beq.n	20b36 <_dtoa_r+0x73e>
   20b2e:	4659      	mov	r1, fp
   20b30:	4620      	mov	r0, r4
   20b32:	f000 fedd 	bl	218f0 <_Bfree>
   20b36:	4631      	mov	r1, r6
   20b38:	4620      	mov	r0, r4
   20b3a:	f000 fed9 	bl	218f0 <_Bfree>
   20b3e:	e627      	b.n	20790 <_dtoa_r+0x398>
   20b40:	2300      	movs	r3, #0
   20b42:	9309      	str	r3, [sp, #36]	; 0x24
   20b44:	9b04      	ldr	r3, [sp, #16]
   20b46:	445b      	add	r3, fp
   20b48:	930d      	str	r3, [sp, #52]	; 0x34
   20b4a:	3301      	adds	r3, #1
   20b4c:	2b01      	cmp	r3, #1
   20b4e:	461e      	mov	r6, r3
   20b50:	461d      	mov	r5, r3
   20b52:	9308      	str	r3, [sp, #32]
   20b54:	bfb8      	it	lt
   20b56:	2601      	movlt	r6, #1
   20b58:	2100      	movs	r1, #0
   20b5a:	2e17      	cmp	r6, #23
   20b5c:	6461      	str	r1, [r4, #68]	; 0x44
   20b5e:	d90a      	bls.n	20b76 <_dtoa_r+0x77e>
   20b60:	2201      	movs	r2, #1
   20b62:	2304      	movs	r3, #4
   20b64:	005b      	lsls	r3, r3, #1
   20b66:	f103 0014 	add.w	r0, r3, #20
   20b6a:	4286      	cmp	r6, r0
   20b6c:	4611      	mov	r1, r2
   20b6e:	f102 0201 	add.w	r2, r2, #1
   20b72:	d2f7      	bcs.n	20b64 <_dtoa_r+0x76c>
   20b74:	6461      	str	r1, [r4, #68]	; 0x44
   20b76:	4620      	mov	r0, r4
   20b78:	f000 fe94 	bl	218a4 <_Balloc>
   20b7c:	2d0e      	cmp	r5, #14
   20b7e:	9007      	str	r0, [sp, #28]
   20b80:	6420      	str	r0, [r4, #64]	; 0x40
   20b82:	f63f ad44 	bhi.w	2060e <_dtoa_r+0x216>
   20b86:	2f00      	cmp	r7, #0
   20b88:	f43f ad41 	beq.w	2060e <_dtoa_r+0x216>
   20b8c:	9904      	ldr	r1, [sp, #16]
   20b8e:	2900      	cmp	r1, #0
   20b90:	ed9d 7b00 	vldr	d7, [sp]
   20b94:	f340 81f6 	ble.w	20f84 <_dtoa_r+0xb8c>
   20b98:	4bb9      	ldr	r3, [pc, #740]	; (20e80 <_dtoa_r+0xa88>)
   20b9a:	f001 020f 	and.w	r2, r1, #15
   20b9e:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
   20ba2:	110d      	asrs	r5, r1, #4
   20ba4:	e9d3 6700 	ldrd	r6, r7, [r3]
   20ba8:	06eb      	lsls	r3, r5, #27
   20baa:	f140 81ad 	bpl.w	20f08 <_dtoa_r+0xb10>
   20bae:	4bb5      	ldr	r3, [pc, #724]	; (20e84 <_dtoa_r+0xa8c>)
   20bb0:	ec51 0b17 	vmov	r0, r1, d7
   20bb4:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
   20bb8:	f7fa ff56 	bl	1ba68 <__aeabi_ddiv>
   20bbc:	e9cd 010e 	strd	r0, r1, [sp, #56]	; 0x38
   20bc0:	f005 050f 	and.w	r5, r5, #15
   20bc4:	f04f 0903 	mov.w	r9, #3
   20bc8:	b18d      	cbz	r5, 20bee <_dtoa_r+0x7f6>
   20bca:	f8df 82b8 	ldr.w	r8, [pc, #696]	; 20e84 <_dtoa_r+0xa8c>
   20bce:	07e8      	lsls	r0, r5, #31
   20bd0:	d509      	bpl.n	20be6 <_dtoa_r+0x7ee>
   20bd2:	4630      	mov	r0, r6
   20bd4:	4639      	mov	r1, r7
   20bd6:	e9d8 2300 	ldrd	r2, r3, [r8]
   20bda:	f7fa fe1b 	bl	1b814 <__aeabi_dmul>
   20bde:	f109 0901 	add.w	r9, r9, #1
   20be2:	4606      	mov	r6, r0
   20be4:	460f      	mov	r7, r1
   20be6:	106d      	asrs	r5, r5, #1
   20be8:	f108 0808 	add.w	r8, r8, #8
   20bec:	d1ef      	bne.n	20bce <_dtoa_r+0x7d6>
   20bee:	463b      	mov	r3, r7
   20bf0:	4632      	mov	r2, r6
   20bf2:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
   20bf6:	f7fa ff37 	bl	1ba68 <__aeabi_ddiv>
   20bfa:	4607      	mov	r7, r0
   20bfc:	4688      	mov	r8, r1
   20bfe:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   20c00:	b143      	cbz	r3, 20c14 <_dtoa_r+0x81c>
   20c02:	2200      	movs	r2, #0
   20c04:	4ba0      	ldr	r3, [pc, #640]	; (20e88 <_dtoa_r+0xa90>)
   20c06:	4638      	mov	r0, r7
   20c08:	4641      	mov	r1, r8
   20c0a:	f7fb f875 	bl	1bcf8 <__aeabi_dcmplt>
   20c0e:	2800      	cmp	r0, #0
   20c10:	f040 8273 	bne.w	210fa <_dtoa_r+0xd02>
   20c14:	4648      	mov	r0, r9
   20c16:	f7fa fd97 	bl	1b748 <__aeabi_i2d>
   20c1a:	463a      	mov	r2, r7
   20c1c:	4643      	mov	r3, r8
   20c1e:	f7fa fdf9 	bl	1b814 <__aeabi_dmul>
   20c22:	4b9a      	ldr	r3, [pc, #616]	; (20e8c <_dtoa_r+0xa94>)
   20c24:	2200      	movs	r2, #0
   20c26:	f7fa fc43 	bl	1b4b0 <__adddf3>
   20c2a:	9b08      	ldr	r3, [sp, #32]
   20c2c:	4605      	mov	r5, r0
   20c2e:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
   20c32:	2b00      	cmp	r3, #0
   20c34:	f000 8140 	beq.w	20eb8 <_dtoa_r+0xac0>
   20c38:	9b04      	ldr	r3, [sp, #16]
   20c3a:	f8dd 9020 	ldr.w	r9, [sp, #32]
   20c3e:	9311      	str	r3, [sp, #68]	; 0x44
   20c40:	9b09      	ldr	r3, [sp, #36]	; 0x24
   20c42:	2b00      	cmp	r3, #0
   20c44:	f000 81f6 	beq.w	21034 <_dtoa_r+0xc3c>
   20c48:	4b8d      	ldr	r3, [pc, #564]	; (20e80 <_dtoa_r+0xa88>)
   20c4a:	4991      	ldr	r1, [pc, #580]	; (20e90 <_dtoa_r+0xa98>)
   20c4c:	eb03 03c9 	add.w	r3, r3, r9, lsl #3
   20c50:	e953 2302 	ldrd	r2, r3, [r3, #-8]
   20c54:	2000      	movs	r0, #0
   20c56:	f7fa ff07 	bl	1ba68 <__aeabi_ddiv>
   20c5a:	462a      	mov	r2, r5
   20c5c:	4633      	mov	r3, r6
   20c5e:	f7fa fc25 	bl	1b4ac <__aeabi_dsub>
   20c62:	e9cd 010e 	strd	r0, r1, [sp, #56]	; 0x38
   20c66:	4641      	mov	r1, r8
   20c68:	4638      	mov	r0, r7
   20c6a:	f7fb f86d 	bl	1bd48 <__aeabi_d2iz>
   20c6e:	4605      	mov	r5, r0
   20c70:	f7fa fd6a 	bl	1b748 <__aeabi_i2d>
   20c74:	4602      	mov	r2, r0
   20c76:	460b      	mov	r3, r1
   20c78:	4638      	mov	r0, r7
   20c7a:	4641      	mov	r1, r8
   20c7c:	f7fa fc16 	bl	1b4ac <__aeabi_dsub>
   20c80:	3530      	adds	r5, #48	; 0x30
   20c82:	fa5f f885 	uxtb.w	r8, r5
   20c86:	9d07      	ldr	r5, [sp, #28]
   20c88:	4606      	mov	r6, r0
   20c8a:	460f      	mov	r7, r1
   20c8c:	f885 8000 	strb.w	r8, [r5]
   20c90:	4602      	mov	r2, r0
   20c92:	460b      	mov	r3, r1
   20c94:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
   20c98:	3501      	adds	r5, #1
   20c9a:	f7fb f84b 	bl	1bd34 <__aeabi_dcmpgt>
   20c9e:	2800      	cmp	r0, #0
   20ca0:	d156      	bne.n	20d50 <_dtoa_r+0x958>
   20ca2:	4632      	mov	r2, r6
   20ca4:	463b      	mov	r3, r7
   20ca6:	2000      	movs	r0, #0
   20ca8:	4977      	ldr	r1, [pc, #476]	; (20e88 <_dtoa_r+0xa90>)
   20caa:	f7fa fbff 	bl	1b4ac <__aeabi_dsub>
   20cae:	4602      	mov	r2, r0
   20cb0:	460b      	mov	r3, r1
   20cb2:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
   20cb6:	f7fb f83d 	bl	1bd34 <__aeabi_dcmpgt>
   20cba:	2800      	cmp	r0, #0
   20cbc:	f040 8262 	bne.w	21184 <_dtoa_r+0xd8c>
   20cc0:	f1b9 0f01 	cmp.w	r9, #1
   20cc4:	f43f aca3 	beq.w	2060e <_dtoa_r+0x216>
   20cc8:	9b07      	ldr	r3, [sp, #28]
   20cca:	f8cd a048 	str.w	sl, [sp, #72]	; 0x48
   20cce:	f8cd b04c 	str.w	fp, [sp, #76]	; 0x4c
   20cd2:	4499      	add	r9, r3
   20cd4:	46a0      	mov	r8, r4
   20cd6:	e9dd ab0e 	ldrd	sl, fp, [sp, #56]	; 0x38
   20cda:	e00d      	b.n	20cf8 <_dtoa_r+0x900>
   20cdc:	2000      	movs	r0, #0
   20cde:	496a      	ldr	r1, [pc, #424]	; (20e88 <_dtoa_r+0xa90>)
   20ce0:	f7fa fbe4 	bl	1b4ac <__aeabi_dsub>
   20ce4:	4652      	mov	r2, sl
   20ce6:	465b      	mov	r3, fp
   20ce8:	f7fb f806 	bl	1bcf8 <__aeabi_dcmplt>
   20cec:	2800      	cmp	r0, #0
   20cee:	f040 8244 	bne.w	2117a <_dtoa_r+0xd82>
   20cf2:	454d      	cmp	r5, r9
   20cf4:	f000 824a 	beq.w	2118c <_dtoa_r+0xd94>
   20cf8:	4650      	mov	r0, sl
   20cfa:	4659      	mov	r1, fp
   20cfc:	2200      	movs	r2, #0
   20cfe:	4b65      	ldr	r3, [pc, #404]	; (20e94 <_dtoa_r+0xa9c>)
   20d00:	f7fa fd88 	bl	1b814 <__aeabi_dmul>
   20d04:	2200      	movs	r2, #0
   20d06:	4b63      	ldr	r3, [pc, #396]	; (20e94 <_dtoa_r+0xa9c>)
   20d08:	4682      	mov	sl, r0
   20d0a:	468b      	mov	fp, r1
   20d0c:	4630      	mov	r0, r6
   20d0e:	4639      	mov	r1, r7
   20d10:	f7fa fd80 	bl	1b814 <__aeabi_dmul>
   20d14:	460f      	mov	r7, r1
   20d16:	4606      	mov	r6, r0
   20d18:	f7fb f816 	bl	1bd48 <__aeabi_d2iz>
   20d1c:	4604      	mov	r4, r0
   20d1e:	f7fa fd13 	bl	1b748 <__aeabi_i2d>
   20d22:	4602      	mov	r2, r0
   20d24:	460b      	mov	r3, r1
   20d26:	4630      	mov	r0, r6
   20d28:	4639      	mov	r1, r7
   20d2a:	f7fa fbbf 	bl	1b4ac <__aeabi_dsub>
   20d2e:	3430      	adds	r4, #48	; 0x30
   20d30:	b2e4      	uxtb	r4, r4
   20d32:	4652      	mov	r2, sl
   20d34:	465b      	mov	r3, fp
   20d36:	f805 4b01 	strb.w	r4, [r5], #1
   20d3a:	4606      	mov	r6, r0
   20d3c:	460f      	mov	r7, r1
   20d3e:	f7fa ffdb 	bl	1bcf8 <__aeabi_dcmplt>
   20d42:	4632      	mov	r2, r6
   20d44:	463b      	mov	r3, r7
   20d46:	2800      	cmp	r0, #0
   20d48:	d0c8      	beq.n	20cdc <_dtoa_r+0x8e4>
   20d4a:	f8dd a048 	ldr.w	sl, [sp, #72]	; 0x48
   20d4e:	4644      	mov	r4, r8
   20d50:	9b11      	ldr	r3, [sp, #68]	; 0x44
   20d52:	9304      	str	r3, [sp, #16]
   20d54:	e51c      	b.n	20790 <_dtoa_r+0x398>
   20d56:	2300      	movs	r3, #0
   20d58:	9309      	str	r3, [sp, #36]	; 0x24
   20d5a:	f1bb 0f00 	cmp.w	fp, #0
   20d5e:	f340 80da 	ble.w	20f16 <_dtoa_r+0xb1e>
   20d62:	465e      	mov	r6, fp
   20d64:	465d      	mov	r5, fp
   20d66:	f8cd b034 	str.w	fp, [sp, #52]	; 0x34
   20d6a:	f8cd b020 	str.w	fp, [sp, #32]
   20d6e:	e6f3      	b.n	20b58 <_dtoa_r+0x760>
   20d70:	2301      	movs	r3, #1
   20d72:	9309      	str	r3, [sp, #36]	; 0x24
   20d74:	e7f1      	b.n	20d5a <_dtoa_r+0x962>
   20d76:	9b00      	ldr	r3, [sp, #0]
   20d78:	2b00      	cmp	r3, #0
   20d7a:	f47f ada1 	bne.w	208c0 <_dtoa_r+0x4c8>
   20d7e:	e9dd 1200 	ldrd	r1, r2, [sp]
   20d82:	f3c2 0313 	ubfx	r3, r2, #0, #20
   20d86:	2b00      	cmp	r3, #0
   20d88:	f47f adb4 	bne.w	208f4 <_dtoa_r+0x4fc>
   20d8c:	f022 4700 	bic.w	r7, r2, #2147483648	; 0x80000000
   20d90:	0d3f      	lsrs	r7, r7, #20
   20d92:	053f      	lsls	r7, r7, #20
   20d94:	2f00      	cmp	r7, #0
   20d96:	f000 8200 	beq.w	2119a <_dtoa_r+0xda2>
   20d9a:	9b06      	ldr	r3, [sp, #24]
   20d9c:	3301      	adds	r3, #1
   20d9e:	9306      	str	r3, [sp, #24]
   20da0:	9b05      	ldr	r3, [sp, #20]
   20da2:	3301      	adds	r3, #1
   20da4:	9305      	str	r3, [sp, #20]
   20da6:	f04f 0801 	mov.w	r8, #1
   20daa:	e5a5      	b.n	208f8 <_dtoa_r+0x500>
   20dac:	9b08      	ldr	r3, [sp, #32]
   20dae:	2b00      	cmp	r3, #0
   20db0:	f73f ac3e 	bgt.w	20630 <_dtoa_r+0x238>
   20db4:	f040 8099 	bne.w	20eea <_dtoa_r+0xaf2>
   20db8:	4649      	mov	r1, r9
   20dba:	2200      	movs	r2, #0
   20dbc:	4b36      	ldr	r3, [pc, #216]	; (20e98 <_dtoa_r+0xaa0>)
   20dbe:	4640      	mov	r0, r8
   20dc0:	f7fa fd28 	bl	1b814 <__aeabi_dmul>
   20dc4:	e9dd 2300 	ldrd	r2, r3, [sp]
   20dc8:	f7fa ffaa 	bl	1bd20 <__aeabi_dcmpge>
   20dcc:	f8dd 9020 	ldr.w	r9, [sp, #32]
   20dd0:	464e      	mov	r6, r9
   20dd2:	2800      	cmp	r0, #0
   20dd4:	d03e      	beq.n	20e54 <_dtoa_r+0xa5c>
   20dd6:	ea6f 030b 	mvn.w	r3, fp
   20dda:	9d07      	ldr	r5, [sp, #28]
   20ddc:	9304      	str	r3, [sp, #16]
   20dde:	4649      	mov	r1, r9
   20de0:	4620      	mov	r0, r4
   20de2:	f000 fd85 	bl	218f0 <_Bfree>
   20de6:	2e00      	cmp	r6, #0
   20de8:	f43f acd2 	beq.w	20790 <_dtoa_r+0x398>
   20dec:	e6a3      	b.n	20b36 <_dtoa_r+0x73e>
   20dee:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   20df0:	4651      	mov	r1, sl
   20df2:	4620      	mov	r0, r4
   20df4:	f000 feb2 	bl	21b5c <__pow5mult>
   20df8:	4682      	mov	sl, r0
   20dfa:	e54f      	b.n	2089c <_dtoa_r+0x4a4>
   20dfc:	9a10      	ldr	r2, [sp, #64]	; 0x40
   20dfe:	2a00      	cmp	r2, #0
   20e00:	f000 816f 	beq.w	210e2 <_dtoa_r+0xcea>
   20e04:	f203 4333 	addw	r3, r3, #1075	; 0x433
   20e08:	9f0a      	ldr	r7, [sp, #40]	; 0x28
   20e0a:	9d06      	ldr	r5, [sp, #24]
   20e0c:	e4e7      	b.n	207de <_dtoa_r+0x3e6>
   20e0e:	9b00      	ldr	r3, [sp, #0]
   20e10:	2b00      	cmp	r3, #0
   20e12:	f47f ad6f 	bne.w	208f4 <_dtoa_r+0x4fc>
   20e16:	e7b2      	b.n	20d7e <_dtoa_r+0x986>
   20e18:	f000 fd74 	bl	21904 <__multadd>
   20e1c:	465f      	mov	r7, fp
   20e1e:	4606      	mov	r6, r0
   20e20:	4680      	mov	r8, r0
   20e22:	e5b6      	b.n	20992 <_dtoa_r+0x59a>
   20e24:	4620      	mov	r0, r4
   20e26:	f000 fd63 	bl	218f0 <_Bfree>
   20e2a:	2201      	movs	r2, #1
   20e2c:	e5db      	b.n	209e6 <_dtoa_r+0x5ee>
   20e2e:	9b02      	ldr	r3, [sp, #8]
   20e30:	2b02      	cmp	r3, #2
   20e32:	f77f ad93 	ble.w	2095c <_dtoa_r+0x564>
   20e36:	9b08      	ldr	r3, [sp, #32]
   20e38:	2b00      	cmp	r3, #0
   20e3a:	d1cc      	bne.n	20dd6 <_dtoa_r+0x9de>
   20e3c:	4649      	mov	r1, r9
   20e3e:	2205      	movs	r2, #5
   20e40:	4620      	mov	r0, r4
   20e42:	f000 fd5f 	bl	21904 <__multadd>
   20e46:	4601      	mov	r1, r0
   20e48:	4681      	mov	r9, r0
   20e4a:	4650      	mov	r0, sl
   20e4c:	f000 ff28 	bl	21ca0 <__mcmp>
   20e50:	2800      	cmp	r0, #0
   20e52:	ddc0      	ble.n	20dd6 <_dtoa_r+0x9de>
   20e54:	9a04      	ldr	r2, [sp, #16]
   20e56:	9907      	ldr	r1, [sp, #28]
   20e58:	2331      	movs	r3, #49	; 0x31
   20e5a:	3201      	adds	r2, #1
   20e5c:	9204      	str	r2, [sp, #16]
   20e5e:	700b      	strb	r3, [r1, #0]
   20e60:	1c4d      	adds	r5, r1, #1
   20e62:	e7bc      	b.n	20dde <_dtoa_r+0x9e6>
   20e64:	9a04      	ldr	r2, [sp, #16]
   20e66:	3201      	adds	r2, #1
   20e68:	9204      	str	r2, [sp, #16]
   20e6a:	9a07      	ldr	r2, [sp, #28]
   20e6c:	2331      	movs	r3, #49	; 0x31
   20e6e:	7013      	strb	r3, [r2, #0]
   20e70:	e651      	b.n	20b16 <_dtoa_r+0x71e>
   20e72:	2301      	movs	r3, #1
   20e74:	9309      	str	r3, [sp, #36]	; 0x24
   20e76:	e665      	b.n	20b44 <_dtoa_r+0x74c>
   20e78:	f8dd a000 	ldr.w	sl, [sp]
   20e7c:	9c02      	ldr	r4, [sp, #8]
   20e7e:	e487      	b.n	20790 <_dtoa_r+0x398>
   20e80:	00024968 	.word	0x00024968
   20e84:	00024940 	.word	0x00024940
   20e88:	3ff00000 	.word	0x3ff00000
   20e8c:	401c0000 	.word	0x401c0000
   20e90:	3fe00000 	.word	0x3fe00000
   20e94:	40240000 	.word	0x40240000
   20e98:	40140000 	.word	0x40140000
   20e9c:	4648      	mov	r0, r9
   20e9e:	f7fa fc53 	bl	1b748 <__aeabi_i2d>
   20ea2:	463a      	mov	r2, r7
   20ea4:	4643      	mov	r3, r8
   20ea6:	f7fa fcb5 	bl	1b814 <__aeabi_dmul>
   20eaa:	2200      	movs	r2, #0
   20eac:	4bc4      	ldr	r3, [pc, #784]	; (211c0 <_dtoa_r+0xdc8>)
   20eae:	f7fa faff 	bl	1b4b0 <__adddf3>
   20eb2:	4605      	mov	r5, r0
   20eb4:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
   20eb8:	4641      	mov	r1, r8
   20eba:	2200      	movs	r2, #0
   20ebc:	4bc1      	ldr	r3, [pc, #772]	; (211c4 <_dtoa_r+0xdcc>)
   20ebe:	4638      	mov	r0, r7
   20ec0:	f7fa faf4 	bl	1b4ac <__aeabi_dsub>
   20ec4:	462a      	mov	r2, r5
   20ec6:	4633      	mov	r3, r6
   20ec8:	4680      	mov	r8, r0
   20eca:	4689      	mov	r9, r1
   20ecc:	f7fa ff32 	bl	1bd34 <__aeabi_dcmpgt>
   20ed0:	2800      	cmp	r0, #0
   20ed2:	f040 80ab 	bne.w	2102c <_dtoa_r+0xc34>
   20ed6:	462a      	mov	r2, r5
   20ed8:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
   20edc:	4640      	mov	r0, r8
   20ede:	4649      	mov	r1, r9
   20ee0:	f7fa ff0a 	bl	1bcf8 <__aeabi_dcmplt>
   20ee4:	2800      	cmp	r0, #0
   20ee6:	f43f ab92 	beq.w	2060e <_dtoa_r+0x216>
   20eea:	f04f 0900 	mov.w	r9, #0
   20eee:	464e      	mov	r6, r9
   20ef0:	e771      	b.n	20dd6 <_dtoa_r+0x9de>
   20ef2:	9807      	ldr	r0, [sp, #28]
   20ef4:	f7ff bab8 	b.w	20468 <_dtoa_r+0x70>
   20ef8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   20efa:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
   20efc:	970a      	str	r7, [sp, #40]	; 0x28
   20efe:	1afb      	subs	r3, r7, r3
   20f00:	441a      	add	r2, r3
   20f02:	920b      	str	r2, [sp, #44]	; 0x2c
   20f04:	2700      	movs	r7, #0
   20f06:	e464      	b.n	207d2 <_dtoa_r+0x3da>
   20f08:	ed9d 7b00 	vldr	d7, [sp]
   20f0c:	f04f 0902 	mov.w	r9, #2
   20f10:	ed8d 7b0e 	vstr	d7, [sp, #56]	; 0x38
   20f14:	e658      	b.n	20bc8 <_dtoa_r+0x7d0>
   20f16:	2100      	movs	r1, #0
   20f18:	6461      	str	r1, [r4, #68]	; 0x44
   20f1a:	4620      	mov	r0, r4
   20f1c:	f000 fcc2 	bl	218a4 <_Balloc>
   20f20:	f04f 0b01 	mov.w	fp, #1
   20f24:	9007      	str	r0, [sp, #28]
   20f26:	6420      	str	r0, [r4, #64]	; 0x40
   20f28:	f8cd b020 	str.w	fp, [sp, #32]
   20f2c:	f8cd b034 	str.w	fp, [sp, #52]	; 0x34
   20f30:	e629      	b.n	20b86 <_dtoa_r+0x78e>
   20f32:	2a00      	cmp	r2, #0
   20f34:	dd12      	ble.n	20f5c <_dtoa_r+0xb64>
   20f36:	4651      	mov	r1, sl
   20f38:	2201      	movs	r2, #1
   20f3a:	4620      	mov	r0, r4
   20f3c:	f000 fe5e 	bl	21bfc <__lshift>
   20f40:	4649      	mov	r1, r9
   20f42:	4682      	mov	sl, r0
   20f44:	f000 feac 	bl	21ca0 <__mcmp>
   20f48:	2800      	cmp	r0, #0
   20f4a:	f340 8131 	ble.w	211b0 <_dtoa_r+0xdb8>
   20f4e:	9b00      	ldr	r3, [sp, #0]
   20f50:	2b39      	cmp	r3, #57	; 0x39
   20f52:	f000 80f7 	beq.w	21144 <_dtoa_r+0xd4c>
   20f56:	f105 0331 	add.w	r3, r5, #49	; 0x31
   20f5a:	9300      	str	r3, [sp, #0]
   20f5c:	f89d 3000 	ldrb.w	r3, [sp]
   20f60:	703b      	strb	r3, [r7, #0]
   20f62:	46b3      	mov	fp, r6
   20f64:	1c7d      	adds	r5, r7, #1
   20f66:	4646      	mov	r6, r8
   20f68:	e5d5      	b.n	20b16 <_dtoa_r+0x71e>
   20f6a:	d104      	bne.n	20f76 <_dtoa_r+0xb7e>
   20f6c:	9b00      	ldr	r3, [sp, #0]
   20f6e:	07db      	lsls	r3, r3, #31
   20f70:	d501      	bpl.n	20f76 <_dtoa_r+0xb7e>
   20f72:	e5c0      	b.n	20af6 <_dtoa_r+0x6fe>
   20f74:	4615      	mov	r5, r2
   20f76:	f815 3c01 	ldrb.w	r3, [r5, #-1]
   20f7a:	2b30      	cmp	r3, #48	; 0x30
   20f7c:	f105 32ff 	add.w	r2, r5, #4294967295
   20f80:	d0f8      	beq.n	20f74 <_dtoa_r+0xb7c>
   20f82:	e5c8      	b.n	20b16 <_dtoa_r+0x71e>
   20f84:	f000 80b4 	beq.w	210f0 <_dtoa_r+0xcf8>
   20f88:	9b04      	ldr	r3, [sp, #16]
   20f8a:	425d      	negs	r5, r3
   20f8c:	4b8e      	ldr	r3, [pc, #568]	; (211c8 <_dtoa_r+0xdd0>)
   20f8e:	f005 020f 	and.w	r2, r5, #15
   20f92:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
   20f96:	e9d3 2300 	ldrd	r2, r3, [r3]
   20f9a:	e9dd 0100 	ldrd	r0, r1, [sp]
   20f9e:	f7fa fc39 	bl	1b814 <__aeabi_dmul>
   20fa2:	112d      	asrs	r5, r5, #4
   20fa4:	4607      	mov	r7, r0
   20fa6:	4688      	mov	r8, r1
   20fa8:	f000 8128 	beq.w	211fc <_dtoa_r+0xe04>
   20fac:	4e87      	ldr	r6, [pc, #540]	; (211cc <_dtoa_r+0xdd4>)
   20fae:	f04f 0902 	mov.w	r9, #2
   20fb2:	07e9      	lsls	r1, r5, #31
   20fb4:	d509      	bpl.n	20fca <_dtoa_r+0xbd2>
   20fb6:	4638      	mov	r0, r7
   20fb8:	4641      	mov	r1, r8
   20fba:	e9d6 2300 	ldrd	r2, r3, [r6]
   20fbe:	f7fa fc29 	bl	1b814 <__aeabi_dmul>
   20fc2:	f109 0901 	add.w	r9, r9, #1
   20fc6:	4607      	mov	r7, r0
   20fc8:	4688      	mov	r8, r1
   20fca:	106d      	asrs	r5, r5, #1
   20fcc:	f106 0608 	add.w	r6, r6, #8
   20fd0:	d1ef      	bne.n	20fb2 <_dtoa_r+0xbba>
   20fd2:	e614      	b.n	20bfe <_dtoa_r+0x806>
   20fd4:	9907      	ldr	r1, [sp, #28]
   20fd6:	2230      	movs	r2, #48	; 0x30
   20fd8:	700a      	strb	r2, [r1, #0]
   20fda:	9a04      	ldr	r2, [sp, #16]
   20fdc:	f815 8c01 	ldrb.w	r8, [r5, #-1]
   20fe0:	3201      	adds	r2, #1
   20fe2:	9204      	str	r2, [sp, #16]
   20fe4:	f7ff bbd0 	b.w	20788 <_dtoa_r+0x390>
   20fe8:	6871      	ldr	r1, [r6, #4]
   20fea:	4620      	mov	r0, r4
   20fec:	f000 fc5a 	bl	218a4 <_Balloc>
   20ff0:	6933      	ldr	r3, [r6, #16]
   20ff2:	3302      	adds	r3, #2
   20ff4:	009a      	lsls	r2, r3, #2
   20ff6:	4605      	mov	r5, r0
   20ff8:	f106 010c 	add.w	r1, r6, #12
   20ffc:	300c      	adds	r0, #12
   20ffe:	f7fc ffdf 	bl	1dfc0 <memcpy>
   21002:	4629      	mov	r1, r5
   21004:	2201      	movs	r2, #1
   21006:	4620      	mov	r0, r4
   21008:	f000 fdf8 	bl	21bfc <__lshift>
   2100c:	4680      	mov	r8, r0
   2100e:	e4b6      	b.n	2097e <_dtoa_r+0x586>
   21010:	9b00      	ldr	r3, [sp, #0]
   21012:	2b39      	cmp	r3, #57	; 0x39
   21014:	f000 8096 	beq.w	21144 <_dtoa_r+0xd4c>
   21018:	9b00      	ldr	r3, [sp, #0]
   2101a:	3301      	adds	r3, #1
   2101c:	46b3      	mov	fp, r6
   2101e:	703b      	strb	r3, [r7, #0]
   21020:	1c7d      	adds	r5, r7, #1
   21022:	4646      	mov	r6, r8
   21024:	e577      	b.n	20b16 <_dtoa_r+0x71e>
   21026:	46b3      	mov	fp, r6
   21028:	4646      	mov	r6, r8
   2102a:	e558      	b.n	20ade <_dtoa_r+0x6e6>
   2102c:	f04f 0900 	mov.w	r9, #0
   21030:	464e      	mov	r6, r9
   21032:	e70f      	b.n	20e54 <_dtoa_r+0xa5c>
   21034:	4964      	ldr	r1, [pc, #400]	; (211c8 <_dtoa_r+0xdd0>)
   21036:	eb01 01c9 	add.w	r1, r1, r9, lsl #3
   2103a:	462a      	mov	r2, r5
   2103c:	4633      	mov	r3, r6
   2103e:	e951 0102 	ldrd	r0, r1, [r1, #-8]
   21042:	f7fa fbe7 	bl	1b814 <__aeabi_dmul>
   21046:	e9cd 010e 	strd	r0, r1, [sp, #56]	; 0x38
   2104a:	4638      	mov	r0, r7
   2104c:	4641      	mov	r1, r8
   2104e:	f7fa fe7b 	bl	1bd48 <__aeabi_d2iz>
   21052:	4605      	mov	r5, r0
   21054:	f7fa fb78 	bl	1b748 <__aeabi_i2d>
   21058:	4602      	mov	r2, r0
   2105a:	460b      	mov	r3, r1
   2105c:	4638      	mov	r0, r7
   2105e:	4641      	mov	r1, r8
   21060:	f7fa fa24 	bl	1b4ac <__aeabi_dsub>
   21064:	9a07      	ldr	r2, [sp, #28]
   21066:	3530      	adds	r5, #48	; 0x30
   21068:	f1b9 0f01 	cmp.w	r9, #1
   2106c:	7015      	strb	r5, [r2, #0]
   2106e:	4606      	mov	r6, r0
   21070:	460f      	mov	r7, r1
   21072:	f102 0501 	add.w	r5, r2, #1
   21076:	d01c      	beq.n	210b2 <_dtoa_r+0xcba>
   21078:	9b07      	ldr	r3, [sp, #28]
   2107a:	4499      	add	r9, r3
   2107c:	2200      	movs	r2, #0
   2107e:	4b54      	ldr	r3, [pc, #336]	; (211d0 <_dtoa_r+0xdd8>)
   21080:	4630      	mov	r0, r6
   21082:	4639      	mov	r1, r7
   21084:	f7fa fbc6 	bl	1b814 <__aeabi_dmul>
   21088:	460f      	mov	r7, r1
   2108a:	4606      	mov	r6, r0
   2108c:	f7fa fe5c 	bl	1bd48 <__aeabi_d2iz>
   21090:	4680      	mov	r8, r0
   21092:	f7fa fb59 	bl	1b748 <__aeabi_i2d>
   21096:	f108 0830 	add.w	r8, r8, #48	; 0x30
   2109a:	4602      	mov	r2, r0
   2109c:	460b      	mov	r3, r1
   2109e:	4630      	mov	r0, r6
   210a0:	4639      	mov	r1, r7
   210a2:	f7fa fa03 	bl	1b4ac <__aeabi_dsub>
   210a6:	f805 8b01 	strb.w	r8, [r5], #1
   210aa:	454d      	cmp	r5, r9
   210ac:	4606      	mov	r6, r0
   210ae:	460f      	mov	r7, r1
   210b0:	d1e4      	bne.n	2107c <_dtoa_r+0xc84>
   210b2:	2200      	movs	r2, #0
   210b4:	4b47      	ldr	r3, [pc, #284]	; (211d4 <_dtoa_r+0xddc>)
   210b6:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
   210ba:	f7fa f9f9 	bl	1b4b0 <__adddf3>
   210be:	4632      	mov	r2, r6
   210c0:	463b      	mov	r3, r7
   210c2:	f7fa fe19 	bl	1bcf8 <__aeabi_dcmplt>
   210c6:	2800      	cmp	r0, #0
   210c8:	d042      	beq.n	21150 <_dtoa_r+0xd58>
   210ca:	9b11      	ldr	r3, [sp, #68]	; 0x44
   210cc:	9304      	str	r3, [sp, #16]
   210ce:	f815 8c01 	ldrb.w	r8, [r5, #-1]
   210d2:	f7ff bb4c 	b.w	2076e <_dtoa_r+0x376>
   210d6:	9b06      	ldr	r3, [sp, #24]
   210d8:	9a08      	ldr	r2, [sp, #32]
   210da:	1a9d      	subs	r5, r3, r2
   210dc:	2300      	movs	r3, #0
   210de:	f7ff bb7e 	b.w	207de <_dtoa_r+0x3e6>
   210e2:	9b14      	ldr	r3, [sp, #80]	; 0x50
   210e4:	9f0a      	ldr	r7, [sp, #40]	; 0x28
   210e6:	9d06      	ldr	r5, [sp, #24]
   210e8:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
   210ec:	f7ff bb77 	b.w	207de <_dtoa_r+0x3e6>
   210f0:	e9dd 7800 	ldrd	r7, r8, [sp]
   210f4:	f04f 0902 	mov.w	r9, #2
   210f8:	e581      	b.n	20bfe <_dtoa_r+0x806>
   210fa:	9b08      	ldr	r3, [sp, #32]
   210fc:	2b00      	cmp	r3, #0
   210fe:	f43f aecd 	beq.w	20e9c <_dtoa_r+0xaa4>
   21102:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   21104:	2b00      	cmp	r3, #0
   21106:	f77f aa82 	ble.w	2060e <_dtoa_r+0x216>
   2110a:	2200      	movs	r2, #0
   2110c:	4b30      	ldr	r3, [pc, #192]	; (211d0 <_dtoa_r+0xdd8>)
   2110e:	4638      	mov	r0, r7
   21110:	4641      	mov	r1, r8
   21112:	f7fa fb7f 	bl	1b814 <__aeabi_dmul>
   21116:	4607      	mov	r7, r0
   21118:	4688      	mov	r8, r1
   2111a:	f109 0001 	add.w	r0, r9, #1
   2111e:	f7fa fb13 	bl	1b748 <__aeabi_i2d>
   21122:	463a      	mov	r2, r7
   21124:	4643      	mov	r3, r8
   21126:	f7fa fb75 	bl	1b814 <__aeabi_dmul>
   2112a:	2200      	movs	r2, #0
   2112c:	4b24      	ldr	r3, [pc, #144]	; (211c0 <_dtoa_r+0xdc8>)
   2112e:	f7fa f9bf 	bl	1b4b0 <__adddf3>
   21132:	9a04      	ldr	r2, [sp, #16]
   21134:	f8dd 9034 	ldr.w	r9, [sp, #52]	; 0x34
   21138:	3a01      	subs	r2, #1
   2113a:	4605      	mov	r5, r0
   2113c:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
   21140:	9211      	str	r2, [sp, #68]	; 0x44
   21142:	e57d      	b.n	20c40 <_dtoa_r+0x848>
   21144:	2239      	movs	r2, #57	; 0x39
   21146:	46b3      	mov	fp, r6
   21148:	703a      	strb	r2, [r7, #0]
   2114a:	4646      	mov	r6, r8
   2114c:	1c7d      	adds	r5, r7, #1
   2114e:	e4d4      	b.n	20afa <_dtoa_r+0x702>
   21150:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
   21154:	2000      	movs	r0, #0
   21156:	491f      	ldr	r1, [pc, #124]	; (211d4 <_dtoa_r+0xddc>)
   21158:	f7fa f9a8 	bl	1b4ac <__aeabi_dsub>
   2115c:	4632      	mov	r2, r6
   2115e:	463b      	mov	r3, r7
   21160:	f7fa fde8 	bl	1bd34 <__aeabi_dcmpgt>
   21164:	b910      	cbnz	r0, 2116c <_dtoa_r+0xd74>
   21166:	f7ff ba52 	b.w	2060e <_dtoa_r+0x216>
   2116a:	4615      	mov	r5, r2
   2116c:	f815 3c01 	ldrb.w	r3, [r5, #-1]
   21170:	2b30      	cmp	r3, #48	; 0x30
   21172:	f105 32ff 	add.w	r2, r5, #4294967295
   21176:	d0f8      	beq.n	2116a <_dtoa_r+0xd72>
   21178:	e5ea      	b.n	20d50 <_dtoa_r+0x958>
   2117a:	4643      	mov	r3, r8
   2117c:	f8dd a048 	ldr.w	sl, [sp, #72]	; 0x48
   21180:	46a0      	mov	r8, r4
   21182:	461c      	mov	r4, r3
   21184:	9b11      	ldr	r3, [sp, #68]	; 0x44
   21186:	9304      	str	r3, [sp, #16]
   21188:	f7ff baf1 	b.w	2076e <_dtoa_r+0x376>
   2118c:	f8dd a048 	ldr.w	sl, [sp, #72]	; 0x48
   21190:	f8dd b04c 	ldr.w	fp, [sp, #76]	; 0x4c
   21194:	4644      	mov	r4, r8
   21196:	f7ff ba3a 	b.w	2060e <_dtoa_r+0x216>
   2119a:	46b8      	mov	r8, r7
   2119c:	f7ff bbac 	b.w	208f8 <_dtoa_r+0x500>
   211a0:	9b00      	ldr	r3, [sp, #0]
   211a2:	2b39      	cmp	r3, #57	; 0x39
   211a4:	d0ce      	beq.n	21144 <_dtoa_r+0xd4c>
   211a6:	f1bb 0f00 	cmp.w	fp, #0
   211aa:	f73f aed4 	bgt.w	20f56 <_dtoa_r+0xb5e>
   211ae:	e6d5      	b.n	20f5c <_dtoa_r+0xb64>
   211b0:	f47f aed4 	bne.w	20f5c <_dtoa_r+0xb64>
   211b4:	9b00      	ldr	r3, [sp, #0]
   211b6:	07da      	lsls	r2, r3, #31
   211b8:	f57f aed0 	bpl.w	20f5c <_dtoa_r+0xb64>
   211bc:	e6c7      	b.n	20f4e <_dtoa_r+0xb56>
   211be:	bf00      	nop
   211c0:	401c0000 	.word	0x401c0000
   211c4:	40140000 	.word	0x40140000
   211c8:	00024968 	.word	0x00024968
   211cc:	00024940 	.word	0x00024940
   211d0:	40240000 	.word	0x40240000
   211d4:	3fe00000 	.word	0x3fe00000
   211d8:	4631      	mov	r1, r6
   211da:	2300      	movs	r3, #0
   211dc:	220a      	movs	r2, #10
   211de:	4620      	mov	r0, r4
   211e0:	f000 fb90 	bl	21904 <__multadd>
   211e4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   211e6:	2b00      	cmp	r3, #0
   211e8:	4606      	mov	r6, r0
   211ea:	dd0a      	ble.n	21202 <_dtoa_r+0xe0a>
   211ec:	9308      	str	r3, [sp, #32]
   211ee:	f7ff bbb9 	b.w	20964 <_dtoa_r+0x56c>
   211f2:	9b02      	ldr	r3, [sp, #8]
   211f4:	2b02      	cmp	r3, #2
   211f6:	dc22      	bgt.n	2123e <_dtoa_r+0xe46>
   211f8:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   211fa:	e44a      	b.n	20a92 <_dtoa_r+0x69a>
   211fc:	f04f 0902 	mov.w	r9, #2
   21200:	e4fd      	b.n	20bfe <_dtoa_r+0x806>
   21202:	9b02      	ldr	r3, [sp, #8]
   21204:	2b02      	cmp	r3, #2
   21206:	dc1a      	bgt.n	2123e <_dtoa_r+0xe46>
   21208:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   2120a:	e7ef      	b.n	211ec <_dtoa_r+0xdf4>
   2120c:	2500      	movs	r5, #0
   2120e:	6465      	str	r5, [r4, #68]	; 0x44
   21210:	4629      	mov	r1, r5
   21212:	4620      	mov	r0, r4
   21214:	f000 fb46 	bl	218a4 <_Balloc>
   21218:	f04f 33ff 	mov.w	r3, #4294967295
   2121c:	9308      	str	r3, [sp, #32]
   2121e:	930d      	str	r3, [sp, #52]	; 0x34
   21220:	2301      	movs	r3, #1
   21222:	9007      	str	r0, [sp, #28]
   21224:	46ab      	mov	fp, r5
   21226:	6420      	str	r0, [r4, #64]	; 0x40
   21228:	9309      	str	r3, [sp, #36]	; 0x24
   2122a:	f7ff b9f0 	b.w	2060e <_dtoa_r+0x216>
   2122e:	f43f ab7b 	beq.w	20928 <_dtoa_r+0x530>
   21232:	f1c0 003c 	rsb	r0, r0, #60	; 0x3c
   21236:	e40b      	b.n	20a50 <_dtoa_r+0x658>
   21238:	2701      	movs	r7, #1
   2123a:	f7ff b9af 	b.w	2059c <_dtoa_r+0x1a4>
   2123e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   21240:	9308      	str	r3, [sp, #32]
   21242:	e5f8      	b.n	20e36 <_dtoa_r+0xa3e>

00021244 <__sflush_r>:
   21244:	f9b1 300c 	ldrsh.w	r3, [r1, #12]
   21248:	b29a      	uxth	r2, r3
   2124a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   2124e:	460d      	mov	r5, r1
   21250:	0711      	lsls	r1, r2, #28
   21252:	4680      	mov	r8, r0
   21254:	d43a      	bmi.n	212cc <__sflush_r+0x88>
   21256:	686a      	ldr	r2, [r5, #4]
   21258:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
   2125c:	2a00      	cmp	r2, #0
   2125e:	81ab      	strh	r3, [r5, #12]
   21260:	dd6f      	ble.n	21342 <__sflush_r+0xfe>
   21262:	6aac      	ldr	r4, [r5, #40]	; 0x28
   21264:	2c00      	cmp	r4, #0
   21266:	d049      	beq.n	212fc <__sflush_r+0xb8>
   21268:	2200      	movs	r2, #0
   2126a:	b29b      	uxth	r3, r3
   2126c:	f8d8 6000 	ldr.w	r6, [r8]
   21270:	f8c8 2000 	str.w	r2, [r8]
   21274:	f413 5280 	ands.w	r2, r3, #4096	; 0x1000
   21278:	d067      	beq.n	2134a <__sflush_r+0x106>
   2127a:	6d2a      	ldr	r2, [r5, #80]	; 0x50
   2127c:	075f      	lsls	r7, r3, #29
   2127e:	d505      	bpl.n	2128c <__sflush_r+0x48>
   21280:	6869      	ldr	r1, [r5, #4]
   21282:	6b2b      	ldr	r3, [r5, #48]	; 0x30
   21284:	1a52      	subs	r2, r2, r1
   21286:	b10b      	cbz	r3, 2128c <__sflush_r+0x48>
   21288:	6beb      	ldr	r3, [r5, #60]	; 0x3c
   2128a:	1ad2      	subs	r2, r2, r3
   2128c:	2300      	movs	r3, #0
   2128e:	69e9      	ldr	r1, [r5, #28]
   21290:	4640      	mov	r0, r8
   21292:	47a0      	blx	r4
   21294:	1c44      	adds	r4, r0, #1
   21296:	d03c      	beq.n	21312 <__sflush_r+0xce>
   21298:	f9b5 300c 	ldrsh.w	r3, [r5, #12]
   2129c:	692a      	ldr	r2, [r5, #16]
   2129e:	602a      	str	r2, [r5, #0]
   212a0:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
   212a4:	2200      	movs	r2, #0
   212a6:	81ab      	strh	r3, [r5, #12]
   212a8:	04db      	lsls	r3, r3, #19
   212aa:	606a      	str	r2, [r5, #4]
   212ac:	d447      	bmi.n	2133e <__sflush_r+0xfa>
   212ae:	6b29      	ldr	r1, [r5, #48]	; 0x30
   212b0:	f8c8 6000 	str.w	r6, [r8]
   212b4:	b311      	cbz	r1, 212fc <__sflush_r+0xb8>
   212b6:	f105 0340 	add.w	r3, r5, #64	; 0x40
   212ba:	4299      	cmp	r1, r3
   212bc:	d002      	beq.n	212c4 <__sflush_r+0x80>
   212be:	4640      	mov	r0, r8
   212c0:	f000 f95a 	bl	21578 <_free_r>
   212c4:	2000      	movs	r0, #0
   212c6:	6328      	str	r0, [r5, #48]	; 0x30
   212c8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   212cc:	692e      	ldr	r6, [r5, #16]
   212ce:	b1ae      	cbz	r6, 212fc <__sflush_r+0xb8>
   212d0:	682c      	ldr	r4, [r5, #0]
   212d2:	602e      	str	r6, [r5, #0]
   212d4:	0791      	lsls	r1, r2, #30
   212d6:	bf0c      	ite	eq
   212d8:	696b      	ldreq	r3, [r5, #20]
   212da:	2300      	movne	r3, #0
   212dc:	1ba4      	subs	r4, r4, r6
   212de:	60ab      	str	r3, [r5, #8]
   212e0:	e00a      	b.n	212f8 <__sflush_r+0xb4>
   212e2:	4623      	mov	r3, r4
   212e4:	4632      	mov	r2, r6
   212e6:	6a6f      	ldr	r7, [r5, #36]	; 0x24
   212e8:	69e9      	ldr	r1, [r5, #28]
   212ea:	4640      	mov	r0, r8
   212ec:	47b8      	blx	r7
   212ee:	2800      	cmp	r0, #0
   212f0:	eba4 0400 	sub.w	r4, r4, r0
   212f4:	4406      	add	r6, r0
   212f6:	dd04      	ble.n	21302 <__sflush_r+0xbe>
   212f8:	2c00      	cmp	r4, #0
   212fa:	dcf2      	bgt.n	212e2 <__sflush_r+0x9e>
   212fc:	2000      	movs	r0, #0
   212fe:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   21302:	89ab      	ldrh	r3, [r5, #12]
   21304:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   21308:	81ab      	strh	r3, [r5, #12]
   2130a:	f04f 30ff 	mov.w	r0, #4294967295
   2130e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   21312:	f8d8 4000 	ldr.w	r4, [r8]
   21316:	2c1d      	cmp	r4, #29
   21318:	d8f3      	bhi.n	21302 <__sflush_r+0xbe>
   2131a:	4b19      	ldr	r3, [pc, #100]	; (21380 <__sflush_r+0x13c>)
   2131c:	40e3      	lsrs	r3, r4
   2131e:	43db      	mvns	r3, r3
   21320:	f013 0301 	ands.w	r3, r3, #1
   21324:	d1ed      	bne.n	21302 <__sflush_r+0xbe>
   21326:	f9b5 200c 	ldrsh.w	r2, [r5, #12]
   2132a:	606b      	str	r3, [r5, #4]
   2132c:	f422 6300 	bic.w	r3, r2, #2048	; 0x800
   21330:	6929      	ldr	r1, [r5, #16]
   21332:	81ab      	strh	r3, [r5, #12]
   21334:	04da      	lsls	r2, r3, #19
   21336:	6029      	str	r1, [r5, #0]
   21338:	d5b9      	bpl.n	212ae <__sflush_r+0x6a>
   2133a:	2c00      	cmp	r4, #0
   2133c:	d1b7      	bne.n	212ae <__sflush_r+0x6a>
   2133e:	6528      	str	r0, [r5, #80]	; 0x50
   21340:	e7b5      	b.n	212ae <__sflush_r+0x6a>
   21342:	6bea      	ldr	r2, [r5, #60]	; 0x3c
   21344:	2a00      	cmp	r2, #0
   21346:	dc8c      	bgt.n	21262 <__sflush_r+0x1e>
   21348:	e7d8      	b.n	212fc <__sflush_r+0xb8>
   2134a:	2301      	movs	r3, #1
   2134c:	69e9      	ldr	r1, [r5, #28]
   2134e:	4640      	mov	r0, r8
   21350:	47a0      	blx	r4
   21352:	1c43      	adds	r3, r0, #1
   21354:	4602      	mov	r2, r0
   21356:	d002      	beq.n	2135e <__sflush_r+0x11a>
   21358:	89ab      	ldrh	r3, [r5, #12]
   2135a:	6aac      	ldr	r4, [r5, #40]	; 0x28
   2135c:	e78e      	b.n	2127c <__sflush_r+0x38>
   2135e:	f8d8 3000 	ldr.w	r3, [r8]
   21362:	2b00      	cmp	r3, #0
   21364:	d0f8      	beq.n	21358 <__sflush_r+0x114>
   21366:	2b1d      	cmp	r3, #29
   21368:	d001      	beq.n	2136e <__sflush_r+0x12a>
   2136a:	2b16      	cmp	r3, #22
   2136c:	d102      	bne.n	21374 <__sflush_r+0x130>
   2136e:	f8c8 6000 	str.w	r6, [r8]
   21372:	e7c3      	b.n	212fc <__sflush_r+0xb8>
   21374:	89ab      	ldrh	r3, [r5, #12]
   21376:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   2137a:	81ab      	strh	r3, [r5, #12]
   2137c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   21380:	20400001 	.word	0x20400001

00021384 <_fflush_r>:
   21384:	b538      	push	{r3, r4, r5, lr}
   21386:	460d      	mov	r5, r1
   21388:	4604      	mov	r4, r0
   2138a:	b108      	cbz	r0, 21390 <_fflush_r+0xc>
   2138c:	6b83      	ldr	r3, [r0, #56]	; 0x38
   2138e:	b1bb      	cbz	r3, 213c0 <_fflush_r+0x3c>
   21390:	f9b5 000c 	ldrsh.w	r0, [r5, #12]
   21394:	b188      	cbz	r0, 213ba <_fflush_r+0x36>
   21396:	6e6b      	ldr	r3, [r5, #100]	; 0x64
   21398:	07db      	lsls	r3, r3, #31
   2139a:	d401      	bmi.n	213a0 <_fflush_r+0x1c>
   2139c:	0581      	lsls	r1, r0, #22
   2139e:	d517      	bpl.n	213d0 <_fflush_r+0x4c>
   213a0:	4620      	mov	r0, r4
   213a2:	4629      	mov	r1, r5
   213a4:	f7ff ff4e 	bl	21244 <__sflush_r>
   213a8:	6e6b      	ldr	r3, [r5, #100]	; 0x64
   213aa:	07da      	lsls	r2, r3, #31
   213ac:	4604      	mov	r4, r0
   213ae:	d402      	bmi.n	213b6 <_fflush_r+0x32>
   213b0:	89ab      	ldrh	r3, [r5, #12]
   213b2:	059b      	lsls	r3, r3, #22
   213b4:	d507      	bpl.n	213c6 <_fflush_r+0x42>
   213b6:	4620      	mov	r0, r4
   213b8:	bd38      	pop	{r3, r4, r5, pc}
   213ba:	4604      	mov	r4, r0
   213bc:	4620      	mov	r0, r4
   213be:	bd38      	pop	{r3, r4, r5, pc}
   213c0:	f000 f838 	bl	21434 <__sinit>
   213c4:	e7e4      	b.n	21390 <_fflush_r+0xc>
   213c6:	6da8      	ldr	r0, [r5, #88]	; 0x58
   213c8:	f7fc fa9c 	bl	1d904 <__retarget_lock_release_recursive>
   213cc:	4620      	mov	r0, r4
   213ce:	bd38      	pop	{r3, r4, r5, pc}
   213d0:	6da8      	ldr	r0, [r5, #88]	; 0x58
   213d2:	f7fc fa95 	bl	1d900 <__retarget_lock_acquire_recursive>
   213d6:	e7e3      	b.n	213a0 <_fflush_r+0x1c>

000213d8 <_cleanup_r>:
   213d8:	4901      	ldr	r1, [pc, #4]	; (213e0 <_cleanup_r+0x8>)
   213da:	f000 b9b3 	b.w	21744 <_fwalk_reent>
   213de:	bf00      	nop
   213e0:	00022169 	.word	0x00022169

000213e4 <std.isra.0>:
   213e4:	b510      	push	{r4, lr}
   213e6:	2300      	movs	r3, #0
   213e8:	4604      	mov	r4, r0
   213ea:	8181      	strh	r1, [r0, #12]
   213ec:	81c2      	strh	r2, [r0, #14]
   213ee:	6003      	str	r3, [r0, #0]
   213f0:	6043      	str	r3, [r0, #4]
   213f2:	6083      	str	r3, [r0, #8]
   213f4:	6643      	str	r3, [r0, #100]	; 0x64
   213f6:	6103      	str	r3, [r0, #16]
   213f8:	6143      	str	r3, [r0, #20]
   213fa:	6183      	str	r3, [r0, #24]
   213fc:	4619      	mov	r1, r3
   213fe:	2208      	movs	r2, #8
   21400:	305c      	adds	r0, #92	; 0x5c
   21402:	f7fc fedb 	bl	1e1bc <memset>
   21406:	4807      	ldr	r0, [pc, #28]	; (21424 <std.isra.0+0x40>)
   21408:	4907      	ldr	r1, [pc, #28]	; (21428 <std.isra.0+0x44>)
   2140a:	4a08      	ldr	r2, [pc, #32]	; (2142c <std.isra.0+0x48>)
   2140c:	4b08      	ldr	r3, [pc, #32]	; (21430 <std.isra.0+0x4c>)
   2140e:	6220      	str	r0, [r4, #32]
   21410:	61e4      	str	r4, [r4, #28]
   21412:	6261      	str	r1, [r4, #36]	; 0x24
   21414:	62a2      	str	r2, [r4, #40]	; 0x28
   21416:	62e3      	str	r3, [r4, #44]	; 0x2c
   21418:	f104 0058 	add.w	r0, r4, #88	; 0x58
   2141c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   21420:	f7fc ba6a 	b.w	1d8f8 <__retarget_lock_init_recursive>
   21424:	00021e9d 	.word	0x00021e9d
   21428:	00021ec1 	.word	0x00021ec1
   2142c:	00021efd 	.word	0x00021efd
   21430:	00021f1d 	.word	0x00021f1d

00021434 <__sinit>:
   21434:	b510      	push	{r4, lr}
   21436:	4604      	mov	r4, r0
   21438:	4812      	ldr	r0, [pc, #72]	; (21484 <__sinit+0x50>)
   2143a:	f7fc fa61 	bl	1d900 <__retarget_lock_acquire_recursive>
   2143e:	6ba2      	ldr	r2, [r4, #56]	; 0x38
   21440:	b9d2      	cbnz	r2, 21478 <__sinit+0x44>
   21442:	f504 733b 	add.w	r3, r4, #748	; 0x2ec
   21446:	4810      	ldr	r0, [pc, #64]	; (21488 <__sinit+0x54>)
   21448:	f8c4 32e8 	str.w	r3, [r4, #744]	; 0x2e8
   2144c:	2103      	movs	r1, #3
   2144e:	f8c4 22e0 	str.w	r2, [r4, #736]	; 0x2e0
   21452:	63e0      	str	r0, [r4, #60]	; 0x3c
   21454:	f8c4 12e4 	str.w	r1, [r4, #740]	; 0x2e4
   21458:	6860      	ldr	r0, [r4, #4]
   2145a:	2104      	movs	r1, #4
   2145c:	f7ff ffc2 	bl	213e4 <std.isra.0>
   21460:	2201      	movs	r2, #1
   21462:	2109      	movs	r1, #9
   21464:	68a0      	ldr	r0, [r4, #8]
   21466:	f7ff ffbd 	bl	213e4 <std.isra.0>
   2146a:	2202      	movs	r2, #2
   2146c:	2112      	movs	r1, #18
   2146e:	68e0      	ldr	r0, [r4, #12]
   21470:	f7ff ffb8 	bl	213e4 <std.isra.0>
   21474:	2301      	movs	r3, #1
   21476:	63a3      	str	r3, [r4, #56]	; 0x38
   21478:	4802      	ldr	r0, [pc, #8]	; (21484 <__sinit+0x50>)
   2147a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   2147e:	f7fc ba41 	b.w	1d904 <__retarget_lock_release_recursive>
   21482:	bf00      	nop
   21484:	2000238c 	.word	0x2000238c
   21488:	000213d9 	.word	0x000213d9

0002148c <__sfp_lock_acquire>:
   2148c:	4801      	ldr	r0, [pc, #4]	; (21494 <__sfp_lock_acquire+0x8>)
   2148e:	f7fc ba37 	b.w	1d900 <__retarget_lock_acquire_recursive>
   21492:	bf00      	nop
   21494:	200023a0 	.word	0x200023a0

00021498 <__sfp_lock_release>:
   21498:	4801      	ldr	r0, [pc, #4]	; (214a0 <__sfp_lock_release+0x8>)
   2149a:	f7fc ba33 	b.w	1d904 <__retarget_lock_release_recursive>
   2149e:	bf00      	nop
   214a0:	200023a0 	.word	0x200023a0

000214a4 <__libc_fini_array>:
   214a4:	b538      	push	{r3, r4, r5, lr}
   214a6:	4c0a      	ldr	r4, [pc, #40]	; (214d0 <__libc_fini_array+0x2c>)
   214a8:	4d0a      	ldr	r5, [pc, #40]	; (214d4 <__libc_fini_array+0x30>)
   214aa:	1b64      	subs	r4, r4, r5
   214ac:	10a4      	asrs	r4, r4, #2
   214ae:	d00a      	beq.n	214c6 <__libc_fini_array+0x22>
   214b0:	f104 4380 	add.w	r3, r4, #1073741824	; 0x40000000
   214b4:	3b01      	subs	r3, #1
   214b6:	eb05 0583 	add.w	r5, r5, r3, lsl #2
   214ba:	3c01      	subs	r4, #1
   214bc:	f855 3904 	ldr.w	r3, [r5], #-4
   214c0:	4798      	blx	r3
   214c2:	2c00      	cmp	r4, #0
   214c4:	d1f9      	bne.n	214ba <__libc_fini_array+0x16>
   214c6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   214ca:	f001 b8b3 	b.w	22634 <_fini>
   214ce:	bf00      	nop
   214d0:	0002267c 	.word	0x0002267c
   214d4:	00022678 	.word	0x00022678

000214d8 <_malloc_trim_r>:
   214d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   214da:	4f24      	ldr	r7, [pc, #144]	; (2156c <_malloc_trim_r+0x94>)
   214dc:	460c      	mov	r4, r1
   214de:	4606      	mov	r6, r0
   214e0:	f7fc feba 	bl	1e258 <__malloc_lock>
   214e4:	68bb      	ldr	r3, [r7, #8]
   214e6:	685d      	ldr	r5, [r3, #4]
   214e8:	f5c4 617e 	rsb	r1, r4, #4064	; 0xfe0
   214ec:	310f      	adds	r1, #15
   214ee:	f025 0503 	bic.w	r5, r5, #3
   214f2:	4429      	add	r1, r5
   214f4:	f421 617f 	bic.w	r1, r1, #4080	; 0xff0
   214f8:	f021 010f 	bic.w	r1, r1, #15
   214fc:	f5a1 5480 	sub.w	r4, r1, #4096	; 0x1000
   21500:	f5b4 5f80 	cmp.w	r4, #4096	; 0x1000
   21504:	db07      	blt.n	21516 <_malloc_trim_r+0x3e>
   21506:	2100      	movs	r1, #0
   21508:	4630      	mov	r0, r6
   2150a:	f7fd f897 	bl	1e63c <_sbrk_r>
   2150e:	68bb      	ldr	r3, [r7, #8]
   21510:	442b      	add	r3, r5
   21512:	4298      	cmp	r0, r3
   21514:	d004      	beq.n	21520 <_malloc_trim_r+0x48>
   21516:	4630      	mov	r0, r6
   21518:	f7fc fea4 	bl	1e264 <__malloc_unlock>
   2151c:	2000      	movs	r0, #0
   2151e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   21520:	4261      	negs	r1, r4
   21522:	4630      	mov	r0, r6
   21524:	f7fd f88a 	bl	1e63c <_sbrk_r>
   21528:	3001      	adds	r0, #1
   2152a:	d00d      	beq.n	21548 <_malloc_trim_r+0x70>
   2152c:	4b10      	ldr	r3, [pc, #64]	; (21570 <_malloc_trim_r+0x98>)
   2152e:	68ba      	ldr	r2, [r7, #8]
   21530:	6819      	ldr	r1, [r3, #0]
   21532:	1b2d      	subs	r5, r5, r4
   21534:	f045 0501 	orr.w	r5, r5, #1
   21538:	4630      	mov	r0, r6
   2153a:	1b09      	subs	r1, r1, r4
   2153c:	6055      	str	r5, [r2, #4]
   2153e:	6019      	str	r1, [r3, #0]
   21540:	f7fc fe90 	bl	1e264 <__malloc_unlock>
   21544:	2001      	movs	r0, #1
   21546:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   21548:	2100      	movs	r1, #0
   2154a:	4630      	mov	r0, r6
   2154c:	f7fd f876 	bl	1e63c <_sbrk_r>
   21550:	68ba      	ldr	r2, [r7, #8]
   21552:	1a83      	subs	r3, r0, r2
   21554:	2b0f      	cmp	r3, #15
   21556:	ddde      	ble.n	21516 <_malloc_trim_r+0x3e>
   21558:	4c06      	ldr	r4, [pc, #24]	; (21574 <_malloc_trim_r+0x9c>)
   2155a:	4905      	ldr	r1, [pc, #20]	; (21570 <_malloc_trim_r+0x98>)
   2155c:	6824      	ldr	r4, [r4, #0]
   2155e:	f043 0301 	orr.w	r3, r3, #1
   21562:	1b00      	subs	r0, r0, r4
   21564:	6053      	str	r3, [r2, #4]
   21566:	6008      	str	r0, [r1, #0]
   21568:	e7d5      	b.n	21516 <_malloc_trim_r+0x3e>
   2156a:	bf00      	nop
   2156c:	2000069c 	.word	0x2000069c
   21570:	200022a8 	.word	0x200022a8
   21574:	20000aa4 	.word	0x20000aa4

00021578 <_free_r>:
   21578:	2900      	cmp	r1, #0
   2157a:	d044      	beq.n	21606 <_free_r+0x8e>
   2157c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   21580:	460d      	mov	r5, r1
   21582:	4680      	mov	r8, r0
   21584:	f7fc fe68 	bl	1e258 <__malloc_lock>
   21588:	f855 7c04 	ldr.w	r7, [r5, #-4]
   2158c:	4969      	ldr	r1, [pc, #420]	; (21734 <_free_r+0x1bc>)
   2158e:	f027 0301 	bic.w	r3, r7, #1
   21592:	f1a5 0408 	sub.w	r4, r5, #8
   21596:	18e2      	adds	r2, r4, r3
   21598:	688e      	ldr	r6, [r1, #8]
   2159a:	6850      	ldr	r0, [r2, #4]
   2159c:	42b2      	cmp	r2, r6
   2159e:	f020 0003 	bic.w	r0, r0, #3
   215a2:	d05e      	beq.n	21662 <_free_r+0xea>
   215a4:	07fe      	lsls	r6, r7, #31
   215a6:	6050      	str	r0, [r2, #4]
   215a8:	d40b      	bmi.n	215c2 <_free_r+0x4a>
   215aa:	f855 7c08 	ldr.w	r7, [r5, #-8]
   215ae:	1be4      	subs	r4, r4, r7
   215b0:	f101 0e08 	add.w	lr, r1, #8
   215b4:	68a5      	ldr	r5, [r4, #8]
   215b6:	4575      	cmp	r5, lr
   215b8:	443b      	add	r3, r7
   215ba:	d06d      	beq.n	21698 <_free_r+0x120>
   215bc:	68e7      	ldr	r7, [r4, #12]
   215be:	60ef      	str	r7, [r5, #12]
   215c0:	60bd      	str	r5, [r7, #8]
   215c2:	1815      	adds	r5, r2, r0
   215c4:	686d      	ldr	r5, [r5, #4]
   215c6:	07ed      	lsls	r5, r5, #31
   215c8:	d53e      	bpl.n	21648 <_free_r+0xd0>
   215ca:	f043 0201 	orr.w	r2, r3, #1
   215ce:	6062      	str	r2, [r4, #4]
   215d0:	50e3      	str	r3, [r4, r3]
   215d2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
   215d6:	d217      	bcs.n	21608 <_free_r+0x90>
   215d8:	08db      	lsrs	r3, r3, #3
   215da:	1c58      	adds	r0, r3, #1
   215dc:	109a      	asrs	r2, r3, #2
   215de:	684d      	ldr	r5, [r1, #4]
   215e0:	f851 7030 	ldr.w	r7, [r1, r0, lsl #3]
   215e4:	60a7      	str	r7, [r4, #8]
   215e6:	2301      	movs	r3, #1
   215e8:	4093      	lsls	r3, r2
   215ea:	eb01 02c0 	add.w	r2, r1, r0, lsl #3
   215ee:	432b      	orrs	r3, r5
   215f0:	3a08      	subs	r2, #8
   215f2:	60e2      	str	r2, [r4, #12]
   215f4:	604b      	str	r3, [r1, #4]
   215f6:	f841 4030 	str.w	r4, [r1, r0, lsl #3]
   215fa:	60fc      	str	r4, [r7, #12]
   215fc:	4640      	mov	r0, r8
   215fe:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   21602:	f7fc be2f 	b.w	1e264 <__malloc_unlock>
   21606:	4770      	bx	lr
   21608:	0a5a      	lsrs	r2, r3, #9
   2160a:	2a04      	cmp	r2, #4
   2160c:	d852      	bhi.n	216b4 <_free_r+0x13c>
   2160e:	099a      	lsrs	r2, r3, #6
   21610:	f102 0739 	add.w	r7, r2, #57	; 0x39
   21614:	00ff      	lsls	r7, r7, #3
   21616:	f102 0538 	add.w	r5, r2, #56	; 0x38
   2161a:	19c8      	adds	r0, r1, r7
   2161c:	59ca      	ldr	r2, [r1, r7]
   2161e:	3808      	subs	r0, #8
   21620:	4290      	cmp	r0, r2
   21622:	d04f      	beq.n	216c4 <_free_r+0x14c>
   21624:	6851      	ldr	r1, [r2, #4]
   21626:	f021 0103 	bic.w	r1, r1, #3
   2162a:	428b      	cmp	r3, r1
   2162c:	d232      	bcs.n	21694 <_free_r+0x11c>
   2162e:	6892      	ldr	r2, [r2, #8]
   21630:	4290      	cmp	r0, r2
   21632:	d1f7      	bne.n	21624 <_free_r+0xac>
   21634:	68c3      	ldr	r3, [r0, #12]
   21636:	60a0      	str	r0, [r4, #8]
   21638:	60e3      	str	r3, [r4, #12]
   2163a:	609c      	str	r4, [r3, #8]
   2163c:	60c4      	str	r4, [r0, #12]
   2163e:	4640      	mov	r0, r8
   21640:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   21644:	f7fc be0e 	b.w	1e264 <__malloc_unlock>
   21648:	6895      	ldr	r5, [r2, #8]
   2164a:	4f3b      	ldr	r7, [pc, #236]	; (21738 <_free_r+0x1c0>)
   2164c:	42bd      	cmp	r5, r7
   2164e:	4403      	add	r3, r0
   21650:	d040      	beq.n	216d4 <_free_r+0x15c>
   21652:	68d0      	ldr	r0, [r2, #12]
   21654:	60e8      	str	r0, [r5, #12]
   21656:	f043 0201 	orr.w	r2, r3, #1
   2165a:	6085      	str	r5, [r0, #8]
   2165c:	6062      	str	r2, [r4, #4]
   2165e:	50e3      	str	r3, [r4, r3]
   21660:	e7b7      	b.n	215d2 <_free_r+0x5a>
   21662:	07ff      	lsls	r7, r7, #31
   21664:	4403      	add	r3, r0
   21666:	d407      	bmi.n	21678 <_free_r+0x100>
   21668:	f855 2c08 	ldr.w	r2, [r5, #-8]
   2166c:	1aa4      	subs	r4, r4, r2
   2166e:	4413      	add	r3, r2
   21670:	68a0      	ldr	r0, [r4, #8]
   21672:	68e2      	ldr	r2, [r4, #12]
   21674:	60c2      	str	r2, [r0, #12]
   21676:	6090      	str	r0, [r2, #8]
   21678:	4a30      	ldr	r2, [pc, #192]	; (2173c <_free_r+0x1c4>)
   2167a:	6812      	ldr	r2, [r2, #0]
   2167c:	f043 0001 	orr.w	r0, r3, #1
   21680:	4293      	cmp	r3, r2
   21682:	6060      	str	r0, [r4, #4]
   21684:	608c      	str	r4, [r1, #8]
   21686:	d3b9      	bcc.n	215fc <_free_r+0x84>
   21688:	4b2d      	ldr	r3, [pc, #180]	; (21740 <_free_r+0x1c8>)
   2168a:	4640      	mov	r0, r8
   2168c:	6819      	ldr	r1, [r3, #0]
   2168e:	f7ff ff23 	bl	214d8 <_malloc_trim_r>
   21692:	e7b3      	b.n	215fc <_free_r+0x84>
   21694:	4610      	mov	r0, r2
   21696:	e7cd      	b.n	21634 <_free_r+0xbc>
   21698:	1811      	adds	r1, r2, r0
   2169a:	6849      	ldr	r1, [r1, #4]
   2169c:	07c9      	lsls	r1, r1, #31
   2169e:	d444      	bmi.n	2172a <_free_r+0x1b2>
   216a0:	6891      	ldr	r1, [r2, #8]
   216a2:	68d2      	ldr	r2, [r2, #12]
   216a4:	60ca      	str	r2, [r1, #12]
   216a6:	4403      	add	r3, r0
   216a8:	f043 0001 	orr.w	r0, r3, #1
   216ac:	6091      	str	r1, [r2, #8]
   216ae:	6060      	str	r0, [r4, #4]
   216b0:	50e3      	str	r3, [r4, r3]
   216b2:	e7a3      	b.n	215fc <_free_r+0x84>
   216b4:	2a14      	cmp	r2, #20
   216b6:	d816      	bhi.n	216e6 <_free_r+0x16e>
   216b8:	f102 075c 	add.w	r7, r2, #92	; 0x5c
   216bc:	00ff      	lsls	r7, r7, #3
   216be:	f102 055b 	add.w	r5, r2, #91	; 0x5b
   216c2:	e7aa      	b.n	2161a <_free_r+0xa2>
   216c4:	10aa      	asrs	r2, r5, #2
   216c6:	2301      	movs	r3, #1
   216c8:	684d      	ldr	r5, [r1, #4]
   216ca:	4093      	lsls	r3, r2
   216cc:	432b      	orrs	r3, r5
   216ce:	604b      	str	r3, [r1, #4]
   216d0:	4603      	mov	r3, r0
   216d2:	e7b0      	b.n	21636 <_free_r+0xbe>
   216d4:	f043 0201 	orr.w	r2, r3, #1
   216d8:	614c      	str	r4, [r1, #20]
   216da:	610c      	str	r4, [r1, #16]
   216dc:	60e5      	str	r5, [r4, #12]
   216de:	60a5      	str	r5, [r4, #8]
   216e0:	6062      	str	r2, [r4, #4]
   216e2:	50e3      	str	r3, [r4, r3]
   216e4:	e78a      	b.n	215fc <_free_r+0x84>
   216e6:	2a54      	cmp	r2, #84	; 0x54
   216e8:	d806      	bhi.n	216f8 <_free_r+0x180>
   216ea:	0b1a      	lsrs	r2, r3, #12
   216ec:	f102 076f 	add.w	r7, r2, #111	; 0x6f
   216f0:	00ff      	lsls	r7, r7, #3
   216f2:	f102 056e 	add.w	r5, r2, #110	; 0x6e
   216f6:	e790      	b.n	2161a <_free_r+0xa2>
   216f8:	f5b2 7faa 	cmp.w	r2, #340	; 0x154
   216fc:	d806      	bhi.n	2170c <_free_r+0x194>
   216fe:	0bda      	lsrs	r2, r3, #15
   21700:	f102 0778 	add.w	r7, r2, #120	; 0x78
   21704:	00ff      	lsls	r7, r7, #3
   21706:	f102 0577 	add.w	r5, r2, #119	; 0x77
   2170a:	e786      	b.n	2161a <_free_r+0xa2>
   2170c:	f240 5054 	movw	r0, #1364	; 0x554
   21710:	4282      	cmp	r2, r0
   21712:	d806      	bhi.n	21722 <_free_r+0x1aa>
   21714:	0c9a      	lsrs	r2, r3, #18
   21716:	f102 077d 	add.w	r7, r2, #125	; 0x7d
   2171a:	00ff      	lsls	r7, r7, #3
   2171c:	f102 057c 	add.w	r5, r2, #124	; 0x7c
   21720:	e77b      	b.n	2161a <_free_r+0xa2>
   21722:	f44f 777e 	mov.w	r7, #1016	; 0x3f8
   21726:	257e      	movs	r5, #126	; 0x7e
   21728:	e777      	b.n	2161a <_free_r+0xa2>
   2172a:	f043 0101 	orr.w	r1, r3, #1
   2172e:	6061      	str	r1, [r4, #4]
   21730:	6013      	str	r3, [r2, #0]
   21732:	e763      	b.n	215fc <_free_r+0x84>
   21734:	2000069c 	.word	0x2000069c
   21738:	200006a4 	.word	0x200006a4
   2173c:	20000aa8 	.word	0x20000aa8
   21740:	200022d8 	.word	0x200022d8

00021744 <_fwalk_reent>:
   21744:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   21748:	f510 7738 	adds.w	r7, r0, #736	; 0x2e0
   2174c:	d01f      	beq.n	2178e <_fwalk_reent+0x4a>
   2174e:	4688      	mov	r8, r1
   21750:	4606      	mov	r6, r0
   21752:	f04f 0900 	mov.w	r9, #0
   21756:	687d      	ldr	r5, [r7, #4]
   21758:	68bc      	ldr	r4, [r7, #8]
   2175a:	3d01      	subs	r5, #1
   2175c:	d411      	bmi.n	21782 <_fwalk_reent+0x3e>
   2175e:	89a3      	ldrh	r3, [r4, #12]
   21760:	2b01      	cmp	r3, #1
   21762:	f105 35ff 	add.w	r5, r5, #4294967295
   21766:	d908      	bls.n	2177a <_fwalk_reent+0x36>
   21768:	f9b4 300e 	ldrsh.w	r3, [r4, #14]
   2176c:	3301      	adds	r3, #1
   2176e:	4621      	mov	r1, r4
   21770:	4630      	mov	r0, r6
   21772:	d002      	beq.n	2177a <_fwalk_reent+0x36>
   21774:	47c0      	blx	r8
   21776:	ea49 0900 	orr.w	r9, r9, r0
   2177a:	1c6b      	adds	r3, r5, #1
   2177c:	f104 0468 	add.w	r4, r4, #104	; 0x68
   21780:	d1ed      	bne.n	2175e <_fwalk_reent+0x1a>
   21782:	683f      	ldr	r7, [r7, #0]
   21784:	2f00      	cmp	r7, #0
   21786:	d1e6      	bne.n	21756 <_fwalk_reent+0x12>
   21788:	4648      	mov	r0, r9
   2178a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   2178e:	46b9      	mov	r9, r7
   21790:	4648      	mov	r0, r9
   21792:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   21796:	bf00      	nop

00021798 <_localeconv_r>:
   21798:	4a04      	ldr	r2, [pc, #16]	; (217ac <_localeconv_r+0x14>)
   2179a:	4b05      	ldr	r3, [pc, #20]	; (217b0 <_localeconv_r+0x18>)
   2179c:	6812      	ldr	r2, [r2, #0]
   2179e:	6b50      	ldr	r0, [r2, #52]	; 0x34
   217a0:	2800      	cmp	r0, #0
   217a2:	bf08      	it	eq
   217a4:	4618      	moveq	r0, r3
   217a6:	30f0      	adds	r0, #240	; 0xf0
   217a8:	4770      	bx	lr
   217aa:	bf00      	nop
   217ac:	20000100 	.word	0x20000100
   217b0:	20000530 	.word	0x20000530

000217b4 <__swhatbuf_r>:
   217b4:	b570      	push	{r4, r5, r6, lr}
   217b6:	460c      	mov	r4, r1
   217b8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
   217bc:	2900      	cmp	r1, #0
   217be:	b090      	sub	sp, #64	; 0x40
   217c0:	4615      	mov	r5, r2
   217c2:	461e      	mov	r6, r3
   217c4:	db14      	blt.n	217f0 <__swhatbuf_r+0x3c>
   217c6:	aa01      	add	r2, sp, #4
   217c8:	f000 fd30 	bl	2222c <_fstat_r>
   217cc:	2800      	cmp	r0, #0
   217ce:	db0f      	blt.n	217f0 <__swhatbuf_r+0x3c>
   217d0:	9a02      	ldr	r2, [sp, #8]
   217d2:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
   217d6:	f5a2 5200 	sub.w	r2, r2, #8192	; 0x2000
   217da:	fab2 f282 	clz	r2, r2
   217de:	0952      	lsrs	r2, r2, #5
   217e0:	f44f 6380 	mov.w	r3, #1024	; 0x400
   217e4:	f44f 6000 	mov.w	r0, #2048	; 0x800
   217e8:	6032      	str	r2, [r6, #0]
   217ea:	602b      	str	r3, [r5, #0]
   217ec:	b010      	add	sp, #64	; 0x40
   217ee:	bd70      	pop	{r4, r5, r6, pc}
   217f0:	89a2      	ldrh	r2, [r4, #12]
   217f2:	2300      	movs	r3, #0
   217f4:	f012 0080 	ands.w	r0, r2, #128	; 0x80
   217f8:	6033      	str	r3, [r6, #0]
   217fa:	d004      	beq.n	21806 <__swhatbuf_r+0x52>
   217fc:	2240      	movs	r2, #64	; 0x40
   217fe:	4618      	mov	r0, r3
   21800:	602a      	str	r2, [r5, #0]
   21802:	b010      	add	sp, #64	; 0x40
   21804:	bd70      	pop	{r4, r5, r6, pc}
   21806:	f44f 6380 	mov.w	r3, #1024	; 0x400
   2180a:	602b      	str	r3, [r5, #0]
   2180c:	b010      	add	sp, #64	; 0x40
   2180e:	bd70      	pop	{r4, r5, r6, pc}

00021810 <__smakebuf_r>:
   21810:	898a      	ldrh	r2, [r1, #12]
   21812:	0792      	lsls	r2, r2, #30
   21814:	460b      	mov	r3, r1
   21816:	d506      	bpl.n	21826 <__smakebuf_r+0x16>
   21818:	f101 0243 	add.w	r2, r1, #67	; 0x43
   2181c:	2101      	movs	r1, #1
   2181e:	601a      	str	r2, [r3, #0]
   21820:	611a      	str	r2, [r3, #16]
   21822:	6159      	str	r1, [r3, #20]
   21824:	4770      	bx	lr
   21826:	b5f0      	push	{r4, r5, r6, r7, lr}
   21828:	b083      	sub	sp, #12
   2182a:	ab01      	add	r3, sp, #4
   2182c:	466a      	mov	r2, sp
   2182e:	460c      	mov	r4, r1
   21830:	4606      	mov	r6, r0
   21832:	f7ff ffbf 	bl	217b4 <__swhatbuf_r>
   21836:	9900      	ldr	r1, [sp, #0]
   21838:	4605      	mov	r5, r0
   2183a:	4630      	mov	r0, r6
   2183c:	f7fc f874 	bl	1d928 <_malloc_r>
   21840:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   21844:	b1d8      	cbz	r0, 2187e <__smakebuf_r+0x6e>
   21846:	9a01      	ldr	r2, [sp, #4]
   21848:	4f15      	ldr	r7, [pc, #84]	; (218a0 <__smakebuf_r+0x90>)
   2184a:	9900      	ldr	r1, [sp, #0]
   2184c:	63f7      	str	r7, [r6, #60]	; 0x3c
   2184e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
   21852:	81a3      	strh	r3, [r4, #12]
   21854:	6020      	str	r0, [r4, #0]
   21856:	6120      	str	r0, [r4, #16]
   21858:	6161      	str	r1, [r4, #20]
   2185a:	b91a      	cbnz	r2, 21864 <__smakebuf_r+0x54>
   2185c:	432b      	orrs	r3, r5
   2185e:	81a3      	strh	r3, [r4, #12]
   21860:	b003      	add	sp, #12
   21862:	bdf0      	pop	{r4, r5, r6, r7, pc}
   21864:	4630      	mov	r0, r6
   21866:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
   2186a:	f000 fcf3 	bl	22254 <_isatty_r>
   2186e:	b1a0      	cbz	r0, 2189a <__smakebuf_r+0x8a>
   21870:	89a3      	ldrh	r3, [r4, #12]
   21872:	f023 0303 	bic.w	r3, r3, #3
   21876:	f043 0301 	orr.w	r3, r3, #1
   2187a:	b21b      	sxth	r3, r3
   2187c:	e7ee      	b.n	2185c <__smakebuf_r+0x4c>
   2187e:	059a      	lsls	r2, r3, #22
   21880:	d4ee      	bmi.n	21860 <__smakebuf_r+0x50>
   21882:	f023 0303 	bic.w	r3, r3, #3
   21886:	f104 0243 	add.w	r2, r4, #67	; 0x43
   2188a:	f043 0302 	orr.w	r3, r3, #2
   2188e:	2101      	movs	r1, #1
   21890:	81a3      	strh	r3, [r4, #12]
   21892:	6022      	str	r2, [r4, #0]
   21894:	6122      	str	r2, [r4, #16]
   21896:	6161      	str	r1, [r4, #20]
   21898:	e7e2      	b.n	21860 <__smakebuf_r+0x50>
   2189a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   2189e:	e7dd      	b.n	2185c <__smakebuf_r+0x4c>
   218a0:	000213d9 	.word	0x000213d9

000218a4 <_Balloc>:
   218a4:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
   218a6:	b570      	push	{r4, r5, r6, lr}
   218a8:	4605      	mov	r5, r0
   218aa:	460c      	mov	r4, r1
   218ac:	b14b      	cbz	r3, 218c2 <_Balloc+0x1e>
   218ae:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
   218b2:	b180      	cbz	r0, 218d6 <_Balloc+0x32>
   218b4:	6802      	ldr	r2, [r0, #0]
   218b6:	f843 2024 	str.w	r2, [r3, r4, lsl #2]
   218ba:	2300      	movs	r3, #0
   218bc:	6103      	str	r3, [r0, #16]
   218be:	60c3      	str	r3, [r0, #12]
   218c0:	bd70      	pop	{r4, r5, r6, pc}
   218c2:	2221      	movs	r2, #33	; 0x21
   218c4:	2104      	movs	r1, #4
   218c6:	f000 fc0d 	bl	220e4 <_calloc_r>
   218ca:	64e8      	str	r0, [r5, #76]	; 0x4c
   218cc:	4603      	mov	r3, r0
   218ce:	2800      	cmp	r0, #0
   218d0:	d1ed      	bne.n	218ae <_Balloc+0xa>
   218d2:	2000      	movs	r0, #0
   218d4:	bd70      	pop	{r4, r5, r6, pc}
   218d6:	2101      	movs	r1, #1
   218d8:	fa01 f604 	lsl.w	r6, r1, r4
   218dc:	1d72      	adds	r2, r6, #5
   218de:	4628      	mov	r0, r5
   218e0:	0092      	lsls	r2, r2, #2
   218e2:	f000 fbff 	bl	220e4 <_calloc_r>
   218e6:	2800      	cmp	r0, #0
   218e8:	d0f3      	beq.n	218d2 <_Balloc+0x2e>
   218ea:	6044      	str	r4, [r0, #4]
   218ec:	6086      	str	r6, [r0, #8]
   218ee:	e7e4      	b.n	218ba <_Balloc+0x16>

000218f0 <_Bfree>:
   218f0:	b131      	cbz	r1, 21900 <_Bfree+0x10>
   218f2:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
   218f4:	684a      	ldr	r2, [r1, #4]
   218f6:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
   218fa:	6008      	str	r0, [r1, #0]
   218fc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
   21900:	4770      	bx	lr
   21902:	bf00      	nop

00021904 <__multadd>:
   21904:	b5f0      	push	{r4, r5, r6, r7, lr}
   21906:	690c      	ldr	r4, [r1, #16]
   21908:	b083      	sub	sp, #12
   2190a:	460d      	mov	r5, r1
   2190c:	4606      	mov	r6, r0
   2190e:	f101 0e14 	add.w	lr, r1, #20
   21912:	2700      	movs	r7, #0
   21914:	f8de 0000 	ldr.w	r0, [lr]
   21918:	b281      	uxth	r1, r0
   2191a:	fb02 3301 	mla	r3, r2, r1, r3
   2191e:	0c01      	lsrs	r1, r0, #16
   21920:	0c18      	lsrs	r0, r3, #16
   21922:	fb02 0101 	mla	r1, r2, r1, r0
   21926:	b29b      	uxth	r3, r3
   21928:	3701      	adds	r7, #1
   2192a:	eb03 4301 	add.w	r3, r3, r1, lsl #16
   2192e:	42bc      	cmp	r4, r7
   21930:	f84e 3b04 	str.w	r3, [lr], #4
   21934:	ea4f 4311 	mov.w	r3, r1, lsr #16
   21938:	dcec      	bgt.n	21914 <__multadd+0x10>
   2193a:	b13b      	cbz	r3, 2194c <__multadd+0x48>
   2193c:	68aa      	ldr	r2, [r5, #8]
   2193e:	4294      	cmp	r4, r2
   21940:	da07      	bge.n	21952 <__multadd+0x4e>
   21942:	eb05 0284 	add.w	r2, r5, r4, lsl #2
   21946:	3401      	adds	r4, #1
   21948:	6153      	str	r3, [r2, #20]
   2194a:	612c      	str	r4, [r5, #16]
   2194c:	4628      	mov	r0, r5
   2194e:	b003      	add	sp, #12
   21950:	bdf0      	pop	{r4, r5, r6, r7, pc}
   21952:	6869      	ldr	r1, [r5, #4]
   21954:	9301      	str	r3, [sp, #4]
   21956:	3101      	adds	r1, #1
   21958:	4630      	mov	r0, r6
   2195a:	f7ff ffa3 	bl	218a4 <_Balloc>
   2195e:	692a      	ldr	r2, [r5, #16]
   21960:	3202      	adds	r2, #2
   21962:	f105 010c 	add.w	r1, r5, #12
   21966:	4607      	mov	r7, r0
   21968:	0092      	lsls	r2, r2, #2
   2196a:	300c      	adds	r0, #12
   2196c:	f7fc fb28 	bl	1dfc0 <memcpy>
   21970:	6cf2      	ldr	r2, [r6, #76]	; 0x4c
   21972:	6869      	ldr	r1, [r5, #4]
   21974:	9b01      	ldr	r3, [sp, #4]
   21976:	f852 0021 	ldr.w	r0, [r2, r1, lsl #2]
   2197a:	6028      	str	r0, [r5, #0]
   2197c:	f842 5021 	str.w	r5, [r2, r1, lsl #2]
   21980:	463d      	mov	r5, r7
   21982:	e7de      	b.n	21942 <__multadd+0x3e>

00021984 <__hi0bits>:
   21984:	0c02      	lsrs	r2, r0, #16
   21986:	0412      	lsls	r2, r2, #16
   21988:	4603      	mov	r3, r0
   2198a:	b9b2      	cbnz	r2, 219ba <__hi0bits+0x36>
   2198c:	0403      	lsls	r3, r0, #16
   2198e:	2010      	movs	r0, #16
   21990:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
   21994:	bf04      	itt	eq
   21996:	021b      	lsleq	r3, r3, #8
   21998:	3008      	addeq	r0, #8
   2199a:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
   2199e:	bf04      	itt	eq
   219a0:	011b      	lsleq	r3, r3, #4
   219a2:	3004      	addeq	r0, #4
   219a4:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
   219a8:	bf04      	itt	eq
   219aa:	009b      	lsleq	r3, r3, #2
   219ac:	3002      	addeq	r0, #2
   219ae:	2b00      	cmp	r3, #0
   219b0:	db02      	blt.n	219b8 <__hi0bits+0x34>
   219b2:	005b      	lsls	r3, r3, #1
   219b4:	d403      	bmi.n	219be <__hi0bits+0x3a>
   219b6:	2020      	movs	r0, #32
   219b8:	4770      	bx	lr
   219ba:	2000      	movs	r0, #0
   219bc:	e7e8      	b.n	21990 <__hi0bits+0xc>
   219be:	3001      	adds	r0, #1
   219c0:	4770      	bx	lr
   219c2:	bf00      	nop

000219c4 <__lo0bits>:
   219c4:	6803      	ldr	r3, [r0, #0]
   219c6:	f013 0207 	ands.w	r2, r3, #7
   219ca:	4601      	mov	r1, r0
   219cc:	d007      	beq.n	219de <__lo0bits+0x1a>
   219ce:	07da      	lsls	r2, r3, #31
   219d0:	d421      	bmi.n	21a16 <__lo0bits+0x52>
   219d2:	0798      	lsls	r0, r3, #30
   219d4:	d421      	bmi.n	21a1a <__lo0bits+0x56>
   219d6:	089b      	lsrs	r3, r3, #2
   219d8:	600b      	str	r3, [r1, #0]
   219da:	2002      	movs	r0, #2
   219dc:	4770      	bx	lr
   219de:	b298      	uxth	r0, r3
   219e0:	b198      	cbz	r0, 21a0a <__lo0bits+0x46>
   219e2:	4610      	mov	r0, r2
   219e4:	f013 0fff 	tst.w	r3, #255	; 0xff
   219e8:	bf04      	itt	eq
   219ea:	0a1b      	lsreq	r3, r3, #8
   219ec:	3008      	addeq	r0, #8
   219ee:	071a      	lsls	r2, r3, #28
   219f0:	bf04      	itt	eq
   219f2:	091b      	lsreq	r3, r3, #4
   219f4:	3004      	addeq	r0, #4
   219f6:	079a      	lsls	r2, r3, #30
   219f8:	bf04      	itt	eq
   219fa:	089b      	lsreq	r3, r3, #2
   219fc:	3002      	addeq	r0, #2
   219fe:	07da      	lsls	r2, r3, #31
   21a00:	d407      	bmi.n	21a12 <__lo0bits+0x4e>
   21a02:	085b      	lsrs	r3, r3, #1
   21a04:	d104      	bne.n	21a10 <__lo0bits+0x4c>
   21a06:	2020      	movs	r0, #32
   21a08:	4770      	bx	lr
   21a0a:	0c1b      	lsrs	r3, r3, #16
   21a0c:	2010      	movs	r0, #16
   21a0e:	e7e9      	b.n	219e4 <__lo0bits+0x20>
   21a10:	3001      	adds	r0, #1
   21a12:	600b      	str	r3, [r1, #0]
   21a14:	4770      	bx	lr
   21a16:	2000      	movs	r0, #0
   21a18:	4770      	bx	lr
   21a1a:	085b      	lsrs	r3, r3, #1
   21a1c:	600b      	str	r3, [r1, #0]
   21a1e:	2001      	movs	r0, #1
   21a20:	4770      	bx	lr
   21a22:	bf00      	nop

00021a24 <__i2b>:
   21a24:	b510      	push	{r4, lr}
   21a26:	460c      	mov	r4, r1
   21a28:	2101      	movs	r1, #1
   21a2a:	f7ff ff3b 	bl	218a4 <_Balloc>
   21a2e:	2201      	movs	r2, #1
   21a30:	6144      	str	r4, [r0, #20]
   21a32:	6102      	str	r2, [r0, #16]
   21a34:	bd10      	pop	{r4, pc}
   21a36:	bf00      	nop

00021a38 <__multiply>:
   21a38:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   21a3c:	690c      	ldr	r4, [r1, #16]
   21a3e:	6915      	ldr	r5, [r2, #16]
   21a40:	42ac      	cmp	r4, r5
   21a42:	b083      	sub	sp, #12
   21a44:	468b      	mov	fp, r1
   21a46:	4616      	mov	r6, r2
   21a48:	da04      	bge.n	21a54 <__multiply+0x1c>
   21a4a:	4622      	mov	r2, r4
   21a4c:	46b3      	mov	fp, r6
   21a4e:	462c      	mov	r4, r5
   21a50:	460e      	mov	r6, r1
   21a52:	4615      	mov	r5, r2
   21a54:	f8db 3008 	ldr.w	r3, [fp, #8]
   21a58:	f8db 1004 	ldr.w	r1, [fp, #4]
   21a5c:	eb04 0805 	add.w	r8, r4, r5
   21a60:	4598      	cmp	r8, r3
   21a62:	bfc8      	it	gt
   21a64:	3101      	addgt	r1, #1
   21a66:	f7ff ff1d 	bl	218a4 <_Balloc>
   21a6a:	f100 0914 	add.w	r9, r0, #20
   21a6e:	eb09 0a88 	add.w	sl, r9, r8, lsl #2
   21a72:	45d1      	cmp	r9, sl
   21a74:	9000      	str	r0, [sp, #0]
   21a76:	d205      	bcs.n	21a84 <__multiply+0x4c>
   21a78:	464b      	mov	r3, r9
   21a7a:	2100      	movs	r1, #0
   21a7c:	f843 1b04 	str.w	r1, [r3], #4
   21a80:	459a      	cmp	sl, r3
   21a82:	d8fb      	bhi.n	21a7c <__multiply+0x44>
   21a84:	f106 0c14 	add.w	ip, r6, #20
   21a88:	eb0c 0385 	add.w	r3, ip, r5, lsl #2
   21a8c:	f10b 0b14 	add.w	fp, fp, #20
   21a90:	459c      	cmp	ip, r3
   21a92:	eb0b 0e84 	add.w	lr, fp, r4, lsl #2
   21a96:	d24c      	bcs.n	21b32 <__multiply+0xfa>
   21a98:	f8cd a004 	str.w	sl, [sp, #4]
   21a9c:	469a      	mov	sl, r3
   21a9e:	f8dc 5000 	ldr.w	r5, [ip]
   21aa2:	b2af      	uxth	r7, r5
   21aa4:	b1ef      	cbz	r7, 21ae2 <__multiply+0xaa>
   21aa6:	2100      	movs	r1, #0
   21aa8:	464d      	mov	r5, r9
   21aaa:	465e      	mov	r6, fp
   21aac:	460c      	mov	r4, r1
   21aae:	f856 2b04 	ldr.w	r2, [r6], #4
   21ab2:	6828      	ldr	r0, [r5, #0]
   21ab4:	b293      	uxth	r3, r2
   21ab6:	b281      	uxth	r1, r0
   21ab8:	fb07 1303 	mla	r3, r7, r3, r1
   21abc:	0c12      	lsrs	r2, r2, #16
   21abe:	0c01      	lsrs	r1, r0, #16
   21ac0:	4423      	add	r3, r4
   21ac2:	fb07 1102 	mla	r1, r7, r2, r1
   21ac6:	eb01 4113 	add.w	r1, r1, r3, lsr #16
   21aca:	b29b      	uxth	r3, r3
   21acc:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
   21ad0:	45b6      	cmp	lr, r6
   21ad2:	f845 3b04 	str.w	r3, [r5], #4
   21ad6:	ea4f 4411 	mov.w	r4, r1, lsr #16
   21ada:	d8e8      	bhi.n	21aae <__multiply+0x76>
   21adc:	602c      	str	r4, [r5, #0]
   21ade:	f8dc 5000 	ldr.w	r5, [ip]
   21ae2:	0c2d      	lsrs	r5, r5, #16
   21ae4:	d01d      	beq.n	21b22 <__multiply+0xea>
   21ae6:	f8d9 3000 	ldr.w	r3, [r9]
   21aea:	4648      	mov	r0, r9
   21aec:	461c      	mov	r4, r3
   21aee:	4659      	mov	r1, fp
   21af0:	2200      	movs	r2, #0
   21af2:	880e      	ldrh	r6, [r1, #0]
   21af4:	0c24      	lsrs	r4, r4, #16
   21af6:	fb05 4406 	mla	r4, r5, r6, r4
   21afa:	4422      	add	r2, r4
   21afc:	b29b      	uxth	r3, r3
   21afe:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
   21b02:	f840 3b04 	str.w	r3, [r0], #4
   21b06:	f851 3b04 	ldr.w	r3, [r1], #4
   21b0a:	6804      	ldr	r4, [r0, #0]
   21b0c:	0c1b      	lsrs	r3, r3, #16
   21b0e:	b2a6      	uxth	r6, r4
   21b10:	fb05 6303 	mla	r3, r5, r3, r6
   21b14:	eb03 4312 	add.w	r3, r3, r2, lsr #16
   21b18:	458e      	cmp	lr, r1
   21b1a:	ea4f 4213 	mov.w	r2, r3, lsr #16
   21b1e:	d8e8      	bhi.n	21af2 <__multiply+0xba>
   21b20:	6003      	str	r3, [r0, #0]
   21b22:	f10c 0c04 	add.w	ip, ip, #4
   21b26:	45e2      	cmp	sl, ip
   21b28:	f109 0904 	add.w	r9, r9, #4
   21b2c:	d8b7      	bhi.n	21a9e <__multiply+0x66>
   21b2e:	f8dd a004 	ldr.w	sl, [sp, #4]
   21b32:	f1b8 0f00 	cmp.w	r8, #0
   21b36:	dd0b      	ble.n	21b50 <__multiply+0x118>
   21b38:	f85a 3c04 	ldr.w	r3, [sl, #-4]
   21b3c:	f1aa 0a04 	sub.w	sl, sl, #4
   21b40:	b11b      	cbz	r3, 21b4a <__multiply+0x112>
   21b42:	e005      	b.n	21b50 <__multiply+0x118>
   21b44:	f85a 3d04 	ldr.w	r3, [sl, #-4]!
   21b48:	b913      	cbnz	r3, 21b50 <__multiply+0x118>
   21b4a:	f1b8 0801 	subs.w	r8, r8, #1
   21b4e:	d1f9      	bne.n	21b44 <__multiply+0x10c>
   21b50:	9800      	ldr	r0, [sp, #0]
   21b52:	f8c0 8010 	str.w	r8, [r0, #16]
   21b56:	b003      	add	sp, #12
   21b58:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

00021b5c <__pow5mult>:
   21b5c:	f012 0303 	ands.w	r3, r2, #3
   21b60:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   21b64:	4614      	mov	r4, r2
   21b66:	4607      	mov	r7, r0
   21b68:	d12e      	bne.n	21bc8 <__pow5mult+0x6c>
   21b6a:	460d      	mov	r5, r1
   21b6c:	10a4      	asrs	r4, r4, #2
   21b6e:	d01c      	beq.n	21baa <__pow5mult+0x4e>
   21b70:	6cbe      	ldr	r6, [r7, #72]	; 0x48
   21b72:	b396      	cbz	r6, 21bda <__pow5mult+0x7e>
   21b74:	07e3      	lsls	r3, r4, #31
   21b76:	f04f 0800 	mov.w	r8, #0
   21b7a:	d406      	bmi.n	21b8a <__pow5mult+0x2e>
   21b7c:	1064      	asrs	r4, r4, #1
   21b7e:	d014      	beq.n	21baa <__pow5mult+0x4e>
   21b80:	6830      	ldr	r0, [r6, #0]
   21b82:	b1a8      	cbz	r0, 21bb0 <__pow5mult+0x54>
   21b84:	4606      	mov	r6, r0
   21b86:	07e3      	lsls	r3, r4, #31
   21b88:	d5f8      	bpl.n	21b7c <__pow5mult+0x20>
   21b8a:	4632      	mov	r2, r6
   21b8c:	4629      	mov	r1, r5
   21b8e:	4638      	mov	r0, r7
   21b90:	f7ff ff52 	bl	21a38 <__multiply>
   21b94:	b1b5      	cbz	r5, 21bc4 <__pow5mult+0x68>
   21b96:	686a      	ldr	r2, [r5, #4]
   21b98:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
   21b9a:	1064      	asrs	r4, r4, #1
   21b9c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
   21ba0:	6029      	str	r1, [r5, #0]
   21ba2:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
   21ba6:	4605      	mov	r5, r0
   21ba8:	d1ea      	bne.n	21b80 <__pow5mult+0x24>
   21baa:	4628      	mov	r0, r5
   21bac:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   21bb0:	4632      	mov	r2, r6
   21bb2:	4631      	mov	r1, r6
   21bb4:	4638      	mov	r0, r7
   21bb6:	f7ff ff3f 	bl	21a38 <__multiply>
   21bba:	6030      	str	r0, [r6, #0]
   21bbc:	f8c0 8000 	str.w	r8, [r0]
   21bc0:	4606      	mov	r6, r0
   21bc2:	e7e0      	b.n	21b86 <__pow5mult+0x2a>
   21bc4:	4605      	mov	r5, r0
   21bc6:	e7d9      	b.n	21b7c <__pow5mult+0x20>
   21bc8:	1e5a      	subs	r2, r3, #1
   21bca:	4d0b      	ldr	r5, [pc, #44]	; (21bf8 <__pow5mult+0x9c>)
   21bcc:	2300      	movs	r3, #0
   21bce:	f855 2022 	ldr.w	r2, [r5, r2, lsl #2]
   21bd2:	f7ff fe97 	bl	21904 <__multadd>
   21bd6:	4605      	mov	r5, r0
   21bd8:	e7c8      	b.n	21b6c <__pow5mult+0x10>
   21bda:	2101      	movs	r1, #1
   21bdc:	4638      	mov	r0, r7
   21bde:	f7ff fe61 	bl	218a4 <_Balloc>
   21be2:	f240 2171 	movw	r1, #625	; 0x271
   21be6:	2201      	movs	r2, #1
   21be8:	2300      	movs	r3, #0
   21bea:	6141      	str	r1, [r0, #20]
   21bec:	6102      	str	r2, [r0, #16]
   21bee:	4606      	mov	r6, r0
   21bf0:	64b8      	str	r0, [r7, #72]	; 0x48
   21bf2:	6003      	str	r3, [r0, #0]
   21bf4:	e7be      	b.n	21b74 <__pow5mult+0x18>
   21bf6:	bf00      	nop
   21bf8:	00024a30 	.word	0x00024a30

00021bfc <__lshift>:
   21bfc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   21c00:	4691      	mov	r9, r2
   21c02:	690a      	ldr	r2, [r1, #16]
   21c04:	688b      	ldr	r3, [r1, #8]
   21c06:	ea4f 1469 	mov.w	r4, r9, asr #5
   21c0a:	eb04 0802 	add.w	r8, r4, r2
   21c0e:	f108 0501 	add.w	r5, r8, #1
   21c12:	429d      	cmp	r5, r3
   21c14:	460e      	mov	r6, r1
   21c16:	4607      	mov	r7, r0
   21c18:	6849      	ldr	r1, [r1, #4]
   21c1a:	dd04      	ble.n	21c26 <__lshift+0x2a>
   21c1c:	005b      	lsls	r3, r3, #1
   21c1e:	429d      	cmp	r5, r3
   21c20:	f101 0101 	add.w	r1, r1, #1
   21c24:	dcfa      	bgt.n	21c1c <__lshift+0x20>
   21c26:	4638      	mov	r0, r7
   21c28:	f7ff fe3c 	bl	218a4 <_Balloc>
   21c2c:	2c00      	cmp	r4, #0
   21c2e:	f100 0314 	add.w	r3, r0, #20
   21c32:	dd06      	ble.n	21c42 <__lshift+0x46>
   21c34:	eb03 0284 	add.w	r2, r3, r4, lsl #2
   21c38:	2100      	movs	r1, #0
   21c3a:	f843 1b04 	str.w	r1, [r3], #4
   21c3e:	429a      	cmp	r2, r3
   21c40:	d1fb      	bne.n	21c3a <__lshift+0x3e>
   21c42:	6934      	ldr	r4, [r6, #16]
   21c44:	f106 0114 	add.w	r1, r6, #20
   21c48:	f019 091f 	ands.w	r9, r9, #31
   21c4c:	eb01 0e84 	add.w	lr, r1, r4, lsl #2
   21c50:	d01d      	beq.n	21c8e <__lshift+0x92>
   21c52:	f1c9 0c20 	rsb	ip, r9, #32
   21c56:	2200      	movs	r2, #0
   21c58:	680c      	ldr	r4, [r1, #0]
   21c5a:	fa04 f409 	lsl.w	r4, r4, r9
   21c5e:	4314      	orrs	r4, r2
   21c60:	f843 4b04 	str.w	r4, [r3], #4
   21c64:	f851 2b04 	ldr.w	r2, [r1], #4
   21c68:	458e      	cmp	lr, r1
   21c6a:	fa22 f20c 	lsr.w	r2, r2, ip
   21c6e:	d8f3      	bhi.n	21c58 <__lshift+0x5c>
   21c70:	601a      	str	r2, [r3, #0]
   21c72:	b10a      	cbz	r2, 21c78 <__lshift+0x7c>
   21c74:	f108 0502 	add.w	r5, r8, #2
   21c78:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
   21c7a:	6872      	ldr	r2, [r6, #4]
   21c7c:	3d01      	subs	r5, #1
   21c7e:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
   21c82:	6105      	str	r5, [r0, #16]
   21c84:	6031      	str	r1, [r6, #0]
   21c86:	f843 6022 	str.w	r6, [r3, r2, lsl #2]
   21c8a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   21c8e:	3b04      	subs	r3, #4
   21c90:	f851 2b04 	ldr.w	r2, [r1], #4
   21c94:	f843 2f04 	str.w	r2, [r3, #4]!
   21c98:	458e      	cmp	lr, r1
   21c9a:	d8f9      	bhi.n	21c90 <__lshift+0x94>
   21c9c:	e7ec      	b.n	21c78 <__lshift+0x7c>
   21c9e:	bf00      	nop

00021ca0 <__mcmp>:
   21ca0:	b430      	push	{r4, r5}
   21ca2:	690b      	ldr	r3, [r1, #16]
   21ca4:	4605      	mov	r5, r0
   21ca6:	6900      	ldr	r0, [r0, #16]
   21ca8:	1ac0      	subs	r0, r0, r3
   21caa:	d10f      	bne.n	21ccc <__mcmp+0x2c>
   21cac:	009b      	lsls	r3, r3, #2
   21cae:	3514      	adds	r5, #20
   21cb0:	3114      	adds	r1, #20
   21cb2:	4419      	add	r1, r3
   21cb4:	442b      	add	r3, r5
   21cb6:	e001      	b.n	21cbc <__mcmp+0x1c>
   21cb8:	429d      	cmp	r5, r3
   21cba:	d207      	bcs.n	21ccc <__mcmp+0x2c>
   21cbc:	f853 4d04 	ldr.w	r4, [r3, #-4]!
   21cc0:	f851 2d04 	ldr.w	r2, [r1, #-4]!
   21cc4:	4294      	cmp	r4, r2
   21cc6:	d0f7      	beq.n	21cb8 <__mcmp+0x18>
   21cc8:	d302      	bcc.n	21cd0 <__mcmp+0x30>
   21cca:	2001      	movs	r0, #1
   21ccc:	bc30      	pop	{r4, r5}
   21cce:	4770      	bx	lr
   21cd0:	f04f 30ff 	mov.w	r0, #4294967295
   21cd4:	e7fa      	b.n	21ccc <__mcmp+0x2c>
   21cd6:	bf00      	nop

00021cd8 <__mdiff>:
   21cd8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   21cdc:	690f      	ldr	r7, [r1, #16]
   21cde:	460e      	mov	r6, r1
   21ce0:	6911      	ldr	r1, [r2, #16]
   21ce2:	1a7f      	subs	r7, r7, r1
   21ce4:	2f00      	cmp	r7, #0
   21ce6:	4690      	mov	r8, r2
   21ce8:	d117      	bne.n	21d1a <__mdiff+0x42>
   21cea:	0089      	lsls	r1, r1, #2
   21cec:	f106 0514 	add.w	r5, r6, #20
   21cf0:	f102 0e14 	add.w	lr, r2, #20
   21cf4:	186b      	adds	r3, r5, r1
   21cf6:	4471      	add	r1, lr
   21cf8:	e001      	b.n	21cfe <__mdiff+0x26>
   21cfa:	429d      	cmp	r5, r3
   21cfc:	d25c      	bcs.n	21db8 <__mdiff+0xe0>
   21cfe:	f853 2d04 	ldr.w	r2, [r3, #-4]!
   21d02:	f851 4d04 	ldr.w	r4, [r1, #-4]!
   21d06:	42a2      	cmp	r2, r4
   21d08:	d0f7      	beq.n	21cfa <__mdiff+0x22>
   21d0a:	d25e      	bcs.n	21dca <__mdiff+0xf2>
   21d0c:	4633      	mov	r3, r6
   21d0e:	462c      	mov	r4, r5
   21d10:	4646      	mov	r6, r8
   21d12:	4675      	mov	r5, lr
   21d14:	4698      	mov	r8, r3
   21d16:	2701      	movs	r7, #1
   21d18:	e005      	b.n	21d26 <__mdiff+0x4e>
   21d1a:	db58      	blt.n	21dce <__mdiff+0xf6>
   21d1c:	f106 0514 	add.w	r5, r6, #20
   21d20:	f108 0414 	add.w	r4, r8, #20
   21d24:	2700      	movs	r7, #0
   21d26:	6871      	ldr	r1, [r6, #4]
   21d28:	f7ff fdbc 	bl	218a4 <_Balloc>
   21d2c:	f8d8 3010 	ldr.w	r3, [r8, #16]
   21d30:	6936      	ldr	r6, [r6, #16]
   21d32:	60c7      	str	r7, [r0, #12]
   21d34:	eb04 0c83 	add.w	ip, r4, r3, lsl #2
   21d38:	46a6      	mov	lr, r4
   21d3a:	eb05 0786 	add.w	r7, r5, r6, lsl #2
   21d3e:	f100 0414 	add.w	r4, r0, #20
   21d42:	2300      	movs	r3, #0
   21d44:	f85e 1b04 	ldr.w	r1, [lr], #4
   21d48:	f855 8b04 	ldr.w	r8, [r5], #4
   21d4c:	b28a      	uxth	r2, r1
   21d4e:	fa13 f388 	uxtah	r3, r3, r8
   21d52:	0c09      	lsrs	r1, r1, #16
   21d54:	1a9a      	subs	r2, r3, r2
   21d56:	ebc1 4318 	rsb	r3, r1, r8, lsr #16
   21d5a:	eb03 4322 	add.w	r3, r3, r2, asr #16
   21d5e:	b292      	uxth	r2, r2
   21d60:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
   21d64:	45f4      	cmp	ip, lr
   21d66:	f844 2b04 	str.w	r2, [r4], #4
   21d6a:	ea4f 4323 	mov.w	r3, r3, asr #16
   21d6e:	d8e9      	bhi.n	21d44 <__mdiff+0x6c>
   21d70:	42af      	cmp	r7, r5
   21d72:	d917      	bls.n	21da4 <__mdiff+0xcc>
   21d74:	46a4      	mov	ip, r4
   21d76:	46ae      	mov	lr, r5
   21d78:	f85e 2b04 	ldr.w	r2, [lr], #4
   21d7c:	fa13 f382 	uxtah	r3, r3, r2
   21d80:	1419      	asrs	r1, r3, #16
   21d82:	eb01 4112 	add.w	r1, r1, r2, lsr #16
   21d86:	b29b      	uxth	r3, r3
   21d88:	ea43 4201 	orr.w	r2, r3, r1, lsl #16
   21d8c:	4577      	cmp	r7, lr
   21d8e:	f84c 2b04 	str.w	r2, [ip], #4
   21d92:	ea4f 4321 	mov.w	r3, r1, asr #16
   21d96:	d8ef      	bhi.n	21d78 <__mdiff+0xa0>
   21d98:	43ed      	mvns	r5, r5
   21d9a:	442f      	add	r7, r5
   21d9c:	f027 0703 	bic.w	r7, r7, #3
   21da0:	3704      	adds	r7, #4
   21da2:	443c      	add	r4, r7
   21da4:	3c04      	subs	r4, #4
   21da6:	b922      	cbnz	r2, 21db2 <__mdiff+0xda>
   21da8:	f854 3d04 	ldr.w	r3, [r4, #-4]!
   21dac:	3e01      	subs	r6, #1
   21dae:	2b00      	cmp	r3, #0
   21db0:	d0fa      	beq.n	21da8 <__mdiff+0xd0>
   21db2:	6106      	str	r6, [r0, #16]
   21db4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   21db8:	2100      	movs	r1, #0
   21dba:	f7ff fd73 	bl	218a4 <_Balloc>
   21dbe:	2201      	movs	r2, #1
   21dc0:	2300      	movs	r3, #0
   21dc2:	6102      	str	r2, [r0, #16]
   21dc4:	6143      	str	r3, [r0, #20]
   21dc6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   21dca:	4674      	mov	r4, lr
   21dcc:	e7ab      	b.n	21d26 <__mdiff+0x4e>
   21dce:	4633      	mov	r3, r6
   21dd0:	f106 0414 	add.w	r4, r6, #20
   21dd4:	f102 0514 	add.w	r5, r2, #20
   21dd8:	4616      	mov	r6, r2
   21dda:	2701      	movs	r7, #1
   21ddc:	4698      	mov	r8, r3
   21dde:	e7a2      	b.n	21d26 <__mdiff+0x4e>

00021de0 <__d2b>:
   21de0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   21de4:	ec57 6b10 	vmov	r6, r7, d0
   21de8:	b083      	sub	sp, #12
   21dea:	4688      	mov	r8, r1
   21dec:	2101      	movs	r1, #1
   21dee:	463c      	mov	r4, r7
   21df0:	f3c7 550a 	ubfx	r5, r7, #20, #11
   21df4:	4617      	mov	r7, r2
   21df6:	f7ff fd55 	bl	218a4 <_Balloc>
   21dfa:	f3c4 0413 	ubfx	r4, r4, #0, #20
   21dfe:	4681      	mov	r9, r0
   21e00:	b10d      	cbz	r5, 21e06 <__d2b+0x26>
   21e02:	f444 1480 	orr.w	r4, r4, #1048576	; 0x100000
   21e06:	9401      	str	r4, [sp, #4]
   21e08:	b31e      	cbz	r6, 21e52 <__d2b+0x72>
   21e0a:	a802      	add	r0, sp, #8
   21e0c:	f840 6d08 	str.w	r6, [r0, #-8]!
   21e10:	f7ff fdd8 	bl	219c4 <__lo0bits>
   21e14:	2800      	cmp	r0, #0
   21e16:	d134      	bne.n	21e82 <__d2b+0xa2>
   21e18:	e89d 000c 	ldmia.w	sp, {r2, r3}
   21e1c:	f8c9 2014 	str.w	r2, [r9, #20]
   21e20:	2b00      	cmp	r3, #0
   21e22:	bf0c      	ite	eq
   21e24:	2101      	moveq	r1, #1
   21e26:	2102      	movne	r1, #2
   21e28:	f8c9 3018 	str.w	r3, [r9, #24]
   21e2c:	f8c9 1010 	str.w	r1, [r9, #16]
   21e30:	b9dd      	cbnz	r5, 21e6a <__d2b+0x8a>
   21e32:	eb09 0381 	add.w	r3, r9, r1, lsl #2
   21e36:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
   21e3a:	f8c8 0000 	str.w	r0, [r8]
   21e3e:	6918      	ldr	r0, [r3, #16]
   21e40:	f7ff fda0 	bl	21984 <__hi0bits>
   21e44:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
   21e48:	6038      	str	r0, [r7, #0]
   21e4a:	4648      	mov	r0, r9
   21e4c:	b003      	add	sp, #12
   21e4e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   21e52:	a801      	add	r0, sp, #4
   21e54:	f7ff fdb6 	bl	219c4 <__lo0bits>
   21e58:	9b01      	ldr	r3, [sp, #4]
   21e5a:	f8c9 3014 	str.w	r3, [r9, #20]
   21e5e:	2101      	movs	r1, #1
   21e60:	3020      	adds	r0, #32
   21e62:	f8c9 1010 	str.w	r1, [r9, #16]
   21e66:	2d00      	cmp	r5, #0
   21e68:	d0e3      	beq.n	21e32 <__d2b+0x52>
   21e6a:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
   21e6e:	4405      	add	r5, r0
   21e70:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
   21e74:	f8c8 5000 	str.w	r5, [r8]
   21e78:	6038      	str	r0, [r7, #0]
   21e7a:	4648      	mov	r0, r9
   21e7c:	b003      	add	sp, #12
   21e7e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   21e82:	e89d 000a 	ldmia.w	sp, {r1, r3}
   21e86:	f1c0 0220 	rsb	r2, r0, #32
   21e8a:	fa03 f202 	lsl.w	r2, r3, r2
   21e8e:	430a      	orrs	r2, r1
   21e90:	40c3      	lsrs	r3, r0
   21e92:	9301      	str	r3, [sp, #4]
   21e94:	f8c9 2014 	str.w	r2, [r9, #20]
   21e98:	e7c2      	b.n	21e20 <__d2b+0x40>
   21e9a:	bf00      	nop

00021e9c <__sread>:
   21e9c:	b510      	push	{r4, lr}
   21e9e:	460c      	mov	r4, r1
   21ea0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
   21ea4:	f000 f9fe 	bl	222a4 <_read_r>
   21ea8:	2800      	cmp	r0, #0
   21eaa:	db03      	blt.n	21eb4 <__sread+0x18>
   21eac:	6d23      	ldr	r3, [r4, #80]	; 0x50
   21eae:	4403      	add	r3, r0
   21eb0:	6523      	str	r3, [r4, #80]	; 0x50
   21eb2:	bd10      	pop	{r4, pc}
   21eb4:	89a3      	ldrh	r3, [r4, #12]
   21eb6:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
   21eba:	81a3      	strh	r3, [r4, #12]
   21ebc:	bd10      	pop	{r4, pc}
   21ebe:	bf00      	nop

00021ec0 <__swrite>:
   21ec0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   21ec4:	4616      	mov	r6, r2
   21ec6:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
   21eca:	461f      	mov	r7, r3
   21ecc:	05d3      	lsls	r3, r2, #23
   21ece:	460c      	mov	r4, r1
   21ed0:	4605      	mov	r5, r0
   21ed2:	d507      	bpl.n	21ee4 <__swrite+0x24>
   21ed4:	2200      	movs	r2, #0
   21ed6:	2302      	movs	r3, #2
   21ed8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
   21edc:	f000 f9cc 	bl	22278 <_lseek_r>
   21ee0:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
   21ee4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
   21ee8:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
   21eec:	81a2      	strh	r2, [r4, #12]
   21eee:	463b      	mov	r3, r7
   21ef0:	4632      	mov	r2, r6
   21ef2:	4628      	mov	r0, r5
   21ef4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   21ef8:	f7fe b95e 	b.w	201b8 <_write_r>

00021efc <__sseek>:
   21efc:	b510      	push	{r4, lr}
   21efe:	460c      	mov	r4, r1
   21f00:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
   21f04:	f000 f9b8 	bl	22278 <_lseek_r>
   21f08:	89a3      	ldrh	r3, [r4, #12]
   21f0a:	1c42      	adds	r2, r0, #1
   21f0c:	bf0e      	itee	eq
   21f0e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
   21f12:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
   21f16:	6520      	strne	r0, [r4, #80]	; 0x50
   21f18:	81a3      	strh	r3, [r4, #12]
   21f1a:	bd10      	pop	{r4, pc}

00021f1c <__sclose>:
   21f1c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
   21f20:	f000 b910 	b.w	22144 <_close_r>

00021f24 <__ssprint_r>:
   21f24:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   21f28:	6893      	ldr	r3, [r2, #8]
   21f2a:	b083      	sub	sp, #12
   21f2c:	4690      	mov	r8, r2
   21f2e:	2b00      	cmp	r3, #0
   21f30:	d070      	beq.n	22014 <__ssprint_r+0xf0>
   21f32:	4682      	mov	sl, r0
   21f34:	460c      	mov	r4, r1
   21f36:	6817      	ldr	r7, [r2, #0]
   21f38:	688d      	ldr	r5, [r1, #8]
   21f3a:	6808      	ldr	r0, [r1, #0]
   21f3c:	e042      	b.n	21fc4 <__ssprint_r+0xa0>
   21f3e:	89a3      	ldrh	r3, [r4, #12]
   21f40:	f413 6f90 	tst.w	r3, #1152	; 0x480
   21f44:	d02e      	beq.n	21fa4 <__ssprint_r+0x80>
   21f46:	6965      	ldr	r5, [r4, #20]
   21f48:	6921      	ldr	r1, [r4, #16]
   21f4a:	eb05 0545 	add.w	r5, r5, r5, lsl #1
   21f4e:	eba0 0b01 	sub.w	fp, r0, r1
   21f52:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
   21f56:	f10b 0001 	add.w	r0, fp, #1
   21f5a:	106d      	asrs	r5, r5, #1
   21f5c:	4430      	add	r0, r6
   21f5e:	42a8      	cmp	r0, r5
   21f60:	462a      	mov	r2, r5
   21f62:	bf84      	itt	hi
   21f64:	4605      	movhi	r5, r0
   21f66:	462a      	movhi	r2, r5
   21f68:	055b      	lsls	r3, r3, #21
   21f6a:	d538      	bpl.n	21fde <__ssprint_r+0xba>
   21f6c:	4611      	mov	r1, r2
   21f6e:	4650      	mov	r0, sl
   21f70:	f7fb fcda 	bl	1d928 <_malloc_r>
   21f74:	2800      	cmp	r0, #0
   21f76:	d03c      	beq.n	21ff2 <__ssprint_r+0xce>
   21f78:	465a      	mov	r2, fp
   21f7a:	6921      	ldr	r1, [r4, #16]
   21f7c:	9001      	str	r0, [sp, #4]
   21f7e:	f7fc f81f 	bl	1dfc0 <memcpy>
   21f82:	89a2      	ldrh	r2, [r4, #12]
   21f84:	9b01      	ldr	r3, [sp, #4]
   21f86:	f422 6290 	bic.w	r2, r2, #1152	; 0x480
   21f8a:	f042 0280 	orr.w	r2, r2, #128	; 0x80
   21f8e:	81a2      	strh	r2, [r4, #12]
   21f90:	eba5 020b 	sub.w	r2, r5, fp
   21f94:	eb03 000b 	add.w	r0, r3, fp
   21f98:	6165      	str	r5, [r4, #20]
   21f9a:	6123      	str	r3, [r4, #16]
   21f9c:	6020      	str	r0, [r4, #0]
   21f9e:	60a2      	str	r2, [r4, #8]
   21fa0:	4635      	mov	r5, r6
   21fa2:	46b3      	mov	fp, r6
   21fa4:	465a      	mov	r2, fp
   21fa6:	4649      	mov	r1, r9
   21fa8:	f7fc f8a4 	bl	1e0f4 <memmove>
   21fac:	f8d8 3008 	ldr.w	r3, [r8, #8]
   21fb0:	68a2      	ldr	r2, [r4, #8]
   21fb2:	6820      	ldr	r0, [r4, #0]
   21fb4:	1b55      	subs	r5, r2, r5
   21fb6:	4458      	add	r0, fp
   21fb8:	1b9e      	subs	r6, r3, r6
   21fba:	60a5      	str	r5, [r4, #8]
   21fbc:	6020      	str	r0, [r4, #0]
   21fbe:	f8c8 6008 	str.w	r6, [r8, #8]
   21fc2:	b33e      	cbz	r6, 22014 <__ssprint_r+0xf0>
   21fc4:	687e      	ldr	r6, [r7, #4]
   21fc6:	463b      	mov	r3, r7
   21fc8:	3708      	adds	r7, #8
   21fca:	2e00      	cmp	r6, #0
   21fcc:	d0fa      	beq.n	21fc4 <__ssprint_r+0xa0>
   21fce:	42ae      	cmp	r6, r5
   21fd0:	f8d3 9000 	ldr.w	r9, [r3]
   21fd4:	46ab      	mov	fp, r5
   21fd6:	d2b2      	bcs.n	21f3e <__ssprint_r+0x1a>
   21fd8:	4635      	mov	r5, r6
   21fda:	46b3      	mov	fp, r6
   21fdc:	e7e2      	b.n	21fa4 <__ssprint_r+0x80>
   21fde:	4650      	mov	r0, sl
   21fe0:	f7fc f986 	bl	1e2f0 <_realloc_r>
   21fe4:	4603      	mov	r3, r0
   21fe6:	2800      	cmp	r0, #0
   21fe8:	d1d2      	bne.n	21f90 <__ssprint_r+0x6c>
   21fea:	6921      	ldr	r1, [r4, #16]
   21fec:	4650      	mov	r0, sl
   21fee:	f7ff fac3 	bl	21578 <_free_r>
   21ff2:	230c      	movs	r3, #12
   21ff4:	f8ca 3000 	str.w	r3, [sl]
   21ff8:	89a3      	ldrh	r3, [r4, #12]
   21ffa:	2200      	movs	r2, #0
   21ffc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   22000:	f04f 30ff 	mov.w	r0, #4294967295
   22004:	81a3      	strh	r3, [r4, #12]
   22006:	f8c8 2008 	str.w	r2, [r8, #8]
   2200a:	f8c8 2004 	str.w	r2, [r8, #4]
   2200e:	b003      	add	sp, #12
   22010:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   22014:	2000      	movs	r0, #0
   22016:	f8c8 0004 	str.w	r0, [r8, #4]
   2201a:	b003      	add	sp, #12
   2201c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

00022020 <__register_exitproc>:
   22020:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   22024:	4d2c      	ldr	r5, [pc, #176]	; (220d8 <__register_exitproc+0xb8>)
   22026:	4606      	mov	r6, r0
   22028:	6828      	ldr	r0, [r5, #0]
   2202a:	4698      	mov	r8, r3
   2202c:	460f      	mov	r7, r1
   2202e:	4691      	mov	r9, r2
   22030:	f7fb fc66 	bl	1d900 <__retarget_lock_acquire_recursive>
   22034:	4b29      	ldr	r3, [pc, #164]	; (220dc <__register_exitproc+0xbc>)
   22036:	681c      	ldr	r4, [r3, #0]
   22038:	f8d4 3148 	ldr.w	r3, [r4, #328]	; 0x148
   2203c:	2b00      	cmp	r3, #0
   2203e:	d03e      	beq.n	220be <__register_exitproc+0x9e>
   22040:	685a      	ldr	r2, [r3, #4]
   22042:	2a1f      	cmp	r2, #31
   22044:	dc1c      	bgt.n	22080 <__register_exitproc+0x60>
   22046:	f102 0e01 	add.w	lr, r2, #1
   2204a:	b176      	cbz	r6, 2206a <__register_exitproc+0x4a>
   2204c:	eb03 0182 	add.w	r1, r3, r2, lsl #2
   22050:	2401      	movs	r4, #1
   22052:	f8c1 9088 	str.w	r9, [r1, #136]	; 0x88
   22056:	f8d3 0188 	ldr.w	r0, [r3, #392]	; 0x188
   2205a:	4094      	lsls	r4, r2
   2205c:	4320      	orrs	r0, r4
   2205e:	2e02      	cmp	r6, #2
   22060:	f8c3 0188 	str.w	r0, [r3, #392]	; 0x188
   22064:	f8c1 8108 	str.w	r8, [r1, #264]	; 0x108
   22068:	d023      	beq.n	220b2 <__register_exitproc+0x92>
   2206a:	3202      	adds	r2, #2
   2206c:	f8c3 e004 	str.w	lr, [r3, #4]
   22070:	6828      	ldr	r0, [r5, #0]
   22072:	f843 7022 	str.w	r7, [r3, r2, lsl #2]
   22076:	f7fb fc45 	bl	1d904 <__retarget_lock_release_recursive>
   2207a:	2000      	movs	r0, #0
   2207c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   22080:	4b17      	ldr	r3, [pc, #92]	; (220e0 <__register_exitproc+0xc0>)
   22082:	b30b      	cbz	r3, 220c8 <__register_exitproc+0xa8>
   22084:	f44f 70c8 	mov.w	r0, #400	; 0x190
   22088:	f7fb fc3e 	bl	1d908 <malloc>
   2208c:	4603      	mov	r3, r0
   2208e:	b1d8      	cbz	r0, 220c8 <__register_exitproc+0xa8>
   22090:	f8d4 2148 	ldr.w	r2, [r4, #328]	; 0x148
   22094:	6002      	str	r2, [r0, #0]
   22096:	2100      	movs	r1, #0
   22098:	6041      	str	r1, [r0, #4]
   2209a:	460a      	mov	r2, r1
   2209c:	f8c4 0148 	str.w	r0, [r4, #328]	; 0x148
   220a0:	f04f 0e01 	mov.w	lr, #1
   220a4:	f8c0 1188 	str.w	r1, [r0, #392]	; 0x188
   220a8:	f8c0 118c 	str.w	r1, [r0, #396]	; 0x18c
   220ac:	2e00      	cmp	r6, #0
   220ae:	d0dc      	beq.n	2206a <__register_exitproc+0x4a>
   220b0:	e7cc      	b.n	2204c <__register_exitproc+0x2c>
   220b2:	f8d3 118c 	ldr.w	r1, [r3, #396]	; 0x18c
   220b6:	430c      	orrs	r4, r1
   220b8:	f8c3 418c 	str.w	r4, [r3, #396]	; 0x18c
   220bc:	e7d5      	b.n	2206a <__register_exitproc+0x4a>
   220be:	f504 73a6 	add.w	r3, r4, #332	; 0x14c
   220c2:	f8c4 3148 	str.w	r3, [r4, #328]	; 0x148
   220c6:	e7bb      	b.n	22040 <__register_exitproc+0x20>
   220c8:	6828      	ldr	r0, [r5, #0]
   220ca:	f7fb fc1b 	bl	1d904 <__retarget_lock_release_recursive>
   220ce:	f04f 30ff 	mov.w	r0, #4294967295
   220d2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   220d6:	bf00      	nop
   220d8:	20000aac 	.word	0x20000aac
   220dc:	00024790 	.word	0x00024790
   220e0:	0001d909 	.word	0x0001d909

000220e4 <_calloc_r>:
   220e4:	b510      	push	{r4, lr}
   220e6:	fb02 f101 	mul.w	r1, r2, r1
   220ea:	f7fb fc1d 	bl	1d928 <_malloc_r>
   220ee:	4604      	mov	r4, r0
   220f0:	b1d8      	cbz	r0, 2212a <_calloc_r+0x46>
   220f2:	f850 2c04 	ldr.w	r2, [r0, #-4]
   220f6:	f022 0203 	bic.w	r2, r2, #3
   220fa:	3a04      	subs	r2, #4
   220fc:	2a24      	cmp	r2, #36	; 0x24
   220fe:	d818      	bhi.n	22132 <_calloc_r+0x4e>
   22100:	2a13      	cmp	r2, #19
   22102:	d914      	bls.n	2212e <_calloc_r+0x4a>
   22104:	2300      	movs	r3, #0
   22106:	2a1b      	cmp	r2, #27
   22108:	6003      	str	r3, [r0, #0]
   2210a:	6043      	str	r3, [r0, #4]
   2210c:	d916      	bls.n	2213c <_calloc_r+0x58>
   2210e:	2a24      	cmp	r2, #36	; 0x24
   22110:	6083      	str	r3, [r0, #8]
   22112:	60c3      	str	r3, [r0, #12]
   22114:	bf11      	iteee	ne
   22116:	f100 0210 	addne.w	r2, r0, #16
   2211a:	6103      	streq	r3, [r0, #16]
   2211c:	6143      	streq	r3, [r0, #20]
   2211e:	f100 0218 	addeq.w	r2, r0, #24
   22122:	2300      	movs	r3, #0
   22124:	6013      	str	r3, [r2, #0]
   22126:	6053      	str	r3, [r2, #4]
   22128:	6093      	str	r3, [r2, #8]
   2212a:	4620      	mov	r0, r4
   2212c:	bd10      	pop	{r4, pc}
   2212e:	4602      	mov	r2, r0
   22130:	e7f7      	b.n	22122 <_calloc_r+0x3e>
   22132:	2100      	movs	r1, #0
   22134:	f7fc f842 	bl	1e1bc <memset>
   22138:	4620      	mov	r0, r4
   2213a:	bd10      	pop	{r4, pc}
   2213c:	f100 0208 	add.w	r2, r0, #8
   22140:	e7ef      	b.n	22122 <_calloc_r+0x3e>
   22142:	bf00      	nop

00022144 <_close_r>:
   22144:	b538      	push	{r3, r4, r5, lr}
   22146:	4c07      	ldr	r4, [pc, #28]	; (22164 <_close_r+0x20>)
   22148:	2300      	movs	r3, #0
   2214a:	4605      	mov	r5, r0
   2214c:	4608      	mov	r0, r1
   2214e:	6023      	str	r3, [r4, #0]
   22150:	f000 f9ac 	bl	224ac <_close>
   22154:	1c43      	adds	r3, r0, #1
   22156:	d000      	beq.n	2215a <_close_r+0x16>
   22158:	bd38      	pop	{r3, r4, r5, pc}
   2215a:	6823      	ldr	r3, [r4, #0]
   2215c:	2b00      	cmp	r3, #0
   2215e:	d0fb      	beq.n	22158 <_close_r+0x14>
   22160:	602b      	str	r3, [r5, #0]
   22162:	bd38      	pop	{r3, r4, r5, pc}
   22164:	200023a4 	.word	0x200023a4

00022168 <_fclose_r>:
   22168:	b570      	push	{r4, r5, r6, lr}
   2216a:	b159      	cbz	r1, 22184 <_fclose_r+0x1c>
   2216c:	4605      	mov	r5, r0
   2216e:	460c      	mov	r4, r1
   22170:	b110      	cbz	r0, 22178 <_fclose_r+0x10>
   22172:	6b83      	ldr	r3, [r0, #56]	; 0x38
   22174:	2b00      	cmp	r3, #0
   22176:	d03c      	beq.n	221f2 <_fclose_r+0x8a>
   22178:	6e63      	ldr	r3, [r4, #100]	; 0x64
   2217a:	07d8      	lsls	r0, r3, #31
   2217c:	d505      	bpl.n	2218a <_fclose_r+0x22>
   2217e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   22182:	b92b      	cbnz	r3, 22190 <_fclose_r+0x28>
   22184:	2600      	movs	r6, #0
   22186:	4630      	mov	r0, r6
   22188:	bd70      	pop	{r4, r5, r6, pc}
   2218a:	89a3      	ldrh	r3, [r4, #12]
   2218c:	0599      	lsls	r1, r3, #22
   2218e:	d53c      	bpl.n	2220a <_fclose_r+0xa2>
   22190:	4621      	mov	r1, r4
   22192:	4628      	mov	r0, r5
   22194:	f7ff f856 	bl	21244 <__sflush_r>
   22198:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
   2219a:	4606      	mov	r6, r0
   2219c:	b133      	cbz	r3, 221ac <_fclose_r+0x44>
   2219e:	69e1      	ldr	r1, [r4, #28]
   221a0:	4628      	mov	r0, r5
   221a2:	4798      	blx	r3
   221a4:	2800      	cmp	r0, #0
   221a6:	bfb8      	it	lt
   221a8:	f04f 36ff 	movlt.w	r6, #4294967295
   221ac:	89a3      	ldrh	r3, [r4, #12]
   221ae:	061a      	lsls	r2, r3, #24
   221b0:	d422      	bmi.n	221f8 <_fclose_r+0x90>
   221b2:	6b21      	ldr	r1, [r4, #48]	; 0x30
   221b4:	b141      	cbz	r1, 221c8 <_fclose_r+0x60>
   221b6:	f104 0340 	add.w	r3, r4, #64	; 0x40
   221ba:	4299      	cmp	r1, r3
   221bc:	d002      	beq.n	221c4 <_fclose_r+0x5c>
   221be:	4628      	mov	r0, r5
   221c0:	f7ff f9da 	bl	21578 <_free_r>
   221c4:	2300      	movs	r3, #0
   221c6:	6323      	str	r3, [r4, #48]	; 0x30
   221c8:	6c61      	ldr	r1, [r4, #68]	; 0x44
   221ca:	b121      	cbz	r1, 221d6 <_fclose_r+0x6e>
   221cc:	4628      	mov	r0, r5
   221ce:	f7ff f9d3 	bl	21578 <_free_r>
   221d2:	2300      	movs	r3, #0
   221d4:	6463      	str	r3, [r4, #68]	; 0x44
   221d6:	f7ff f959 	bl	2148c <__sfp_lock_acquire>
   221da:	6e63      	ldr	r3, [r4, #100]	; 0x64
   221dc:	2200      	movs	r2, #0
   221de:	07db      	lsls	r3, r3, #31
   221e0:	81a2      	strh	r2, [r4, #12]
   221e2:	d50e      	bpl.n	22202 <_fclose_r+0x9a>
   221e4:	6da0      	ldr	r0, [r4, #88]	; 0x58
   221e6:	f7fb fb89 	bl	1d8fc <__retarget_lock_close_recursive>
   221ea:	f7ff f955 	bl	21498 <__sfp_lock_release>
   221ee:	4630      	mov	r0, r6
   221f0:	bd70      	pop	{r4, r5, r6, pc}
   221f2:	f7ff f91f 	bl	21434 <__sinit>
   221f6:	e7bf      	b.n	22178 <_fclose_r+0x10>
   221f8:	6921      	ldr	r1, [r4, #16]
   221fa:	4628      	mov	r0, r5
   221fc:	f7ff f9bc 	bl	21578 <_free_r>
   22200:	e7d7      	b.n	221b2 <_fclose_r+0x4a>
   22202:	6da0      	ldr	r0, [r4, #88]	; 0x58
   22204:	f7fb fb7e 	bl	1d904 <__retarget_lock_release_recursive>
   22208:	e7ec      	b.n	221e4 <_fclose_r+0x7c>
   2220a:	6da0      	ldr	r0, [r4, #88]	; 0x58
   2220c:	f7fb fb78 	bl	1d900 <__retarget_lock_acquire_recursive>
   22210:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   22214:	2b00      	cmp	r3, #0
   22216:	d1bb      	bne.n	22190 <_fclose_r+0x28>
   22218:	6e66      	ldr	r6, [r4, #100]	; 0x64
   2221a:	f016 0601 	ands.w	r6, r6, #1
   2221e:	d1b1      	bne.n	22184 <_fclose_r+0x1c>
   22220:	6da0      	ldr	r0, [r4, #88]	; 0x58
   22222:	f7fb fb6f 	bl	1d904 <__retarget_lock_release_recursive>
   22226:	4630      	mov	r0, r6
   22228:	bd70      	pop	{r4, r5, r6, pc}
   2222a:	bf00      	nop

0002222c <_fstat_r>:
   2222c:	b538      	push	{r3, r4, r5, lr}
   2222e:	460b      	mov	r3, r1
   22230:	4c07      	ldr	r4, [pc, #28]	; (22250 <_fstat_r+0x24>)
   22232:	4605      	mov	r5, r0
   22234:	4611      	mov	r1, r2
   22236:	4618      	mov	r0, r3
   22238:	2300      	movs	r3, #0
   2223a:	6023      	str	r3, [r4, #0]
   2223c:	f000 f9b4 	bl	225a8 <_fstat>
   22240:	1c43      	adds	r3, r0, #1
   22242:	d000      	beq.n	22246 <_fstat_r+0x1a>
   22244:	bd38      	pop	{r3, r4, r5, pc}
   22246:	6823      	ldr	r3, [r4, #0]
   22248:	2b00      	cmp	r3, #0
   2224a:	d0fb      	beq.n	22244 <_fstat_r+0x18>
   2224c:	602b      	str	r3, [r5, #0]
   2224e:	bd38      	pop	{r3, r4, r5, pc}
   22250:	200023a4 	.word	0x200023a4

00022254 <_isatty_r>:
   22254:	b538      	push	{r3, r4, r5, lr}
   22256:	4c07      	ldr	r4, [pc, #28]	; (22274 <_isatty_r+0x20>)
   22258:	2300      	movs	r3, #0
   2225a:	4605      	mov	r5, r0
   2225c:	4608      	mov	r0, r1
   2225e:	6023      	str	r3, [r4, #0]
   22260:	f000 f9b0 	bl	225c4 <_isatty>
   22264:	1c43      	adds	r3, r0, #1
   22266:	d000      	beq.n	2226a <_isatty_r+0x16>
   22268:	bd38      	pop	{r3, r4, r5, pc}
   2226a:	6823      	ldr	r3, [r4, #0]
   2226c:	2b00      	cmp	r3, #0
   2226e:	d0fb      	beq.n	22268 <_isatty_r+0x14>
   22270:	602b      	str	r3, [r5, #0]
   22272:	bd38      	pop	{r3, r4, r5, pc}
   22274:	200023a4 	.word	0x200023a4

00022278 <_lseek_r>:
   22278:	b570      	push	{r4, r5, r6, lr}
   2227a:	460d      	mov	r5, r1
   2227c:	4c08      	ldr	r4, [pc, #32]	; (222a0 <_lseek_r+0x28>)
   2227e:	4611      	mov	r1, r2
   22280:	4606      	mov	r6, r0
   22282:	461a      	mov	r2, r3
   22284:	4628      	mov	r0, r5
   22286:	2300      	movs	r3, #0
   22288:	6023      	str	r3, [r4, #0]
   2228a:	f000 f8d3 	bl	22434 <_lseek>
   2228e:	1c43      	adds	r3, r0, #1
   22290:	d000      	beq.n	22294 <_lseek_r+0x1c>
   22292:	bd70      	pop	{r4, r5, r6, pc}
   22294:	6823      	ldr	r3, [r4, #0]
   22296:	2b00      	cmp	r3, #0
   22298:	d0fb      	beq.n	22292 <_lseek_r+0x1a>
   2229a:	6033      	str	r3, [r6, #0]
   2229c:	bd70      	pop	{r4, r5, r6, pc}
   2229e:	bf00      	nop
   222a0:	200023a4 	.word	0x200023a4

000222a4 <_read_r>:
   222a4:	b570      	push	{r4, r5, r6, lr}
   222a6:	460d      	mov	r5, r1
   222a8:	4c08      	ldr	r4, [pc, #32]	; (222cc <_read_r+0x28>)
   222aa:	4611      	mov	r1, r2
   222ac:	4606      	mov	r6, r0
   222ae:	461a      	mov	r2, r3
   222b0:	4628      	mov	r0, r5
   222b2:	2300      	movs	r3, #0
   222b4:	6023      	str	r3, [r4, #0]
   222b6:	f000 f84b 	bl	22350 <_read>
   222ba:	1c43      	adds	r3, r0, #1
   222bc:	d000      	beq.n	222c0 <_read_r+0x1c>
   222be:	bd70      	pop	{r4, r5, r6, pc}
   222c0:	6823      	ldr	r3, [r4, #0]
   222c2:	2b00      	cmp	r3, #0
   222c4:	d0fb      	beq.n	222be <_read_r+0x1a>
   222c6:	6033      	str	r3, [r6, #0]
   222c8:	bd70      	pop	{r4, r5, r6, pc}
   222ca:	bf00      	nop
   222cc:	200023a4 	.word	0x200023a4

000222d0 <__aeabi_dcmpun>:
   222d0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
   222d4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   222d8:	d102      	bne.n	222e0 <__aeabi_dcmpun+0x10>
   222da:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
   222de:	d10a      	bne.n	222f6 <__aeabi_dcmpun+0x26>
   222e0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
   222e4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   222e8:	d102      	bne.n	222f0 <__aeabi_dcmpun+0x20>
   222ea:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
   222ee:	d102      	bne.n	222f6 <__aeabi_dcmpun+0x26>
   222f0:	f04f 0000 	mov.w	r0, #0
   222f4:	4770      	bx	lr
   222f6:	f04f 0001 	mov.w	r0, #1
   222fa:	4770      	bx	lr

000222fc <findslot>:
   222fc:	4b0b      	ldr	r3, [pc, #44]	; (2232c <findslot+0x30>)
   222fe:	681b      	ldr	r3, [r3, #0]
   22300:	b510      	push	{r4, lr}
   22302:	4604      	mov	r4, r0
   22304:	b10b      	cbz	r3, 2230a <findslot+0xe>
   22306:	6b9a      	ldr	r2, [r3, #56]	; 0x38
   22308:	b14a      	cbz	r2, 2231e <findslot+0x22>
   2230a:	2c13      	cmp	r4, #19
   2230c:	d80c      	bhi.n	22328 <findslot+0x2c>
   2230e:	4808      	ldr	r0, [pc, #32]	; (22330 <findslot+0x34>)
   22310:	f850 3034 	ldr.w	r3, [r0, r4, lsl #3]
   22314:	3301      	adds	r3, #1
   22316:	d007      	beq.n	22328 <findslot+0x2c>
   22318:	eb00 00c4 	add.w	r0, r0, r4, lsl #3
   2231c:	bd10      	pop	{r4, pc}
   2231e:	4618      	mov	r0, r3
   22320:	f7ff f888 	bl	21434 <__sinit>
   22324:	2c13      	cmp	r4, #19
   22326:	d9f2      	bls.n	2230e <findslot+0x12>
   22328:	2000      	movs	r0, #0
   2232a:	bd10      	pop	{r4, pc}
   2232c:	20000100 	.word	0x20000100
   22330:	200022e0 	.word	0x200022e0

00022334 <checkerror.part.0>:
   22334:	b570      	push	{r4, r5, r6, lr}
   22336:	f7fb f841 	bl	1d3bc <__errno>
   2233a:	2413      	movs	r4, #19
   2233c:	4605      	mov	r5, r0
   2233e:	2600      	movs	r6, #0
   22340:	4620      	mov	r0, r4
   22342:	4631      	mov	r1, r6
   22344:	beab      	bkpt	0x00ab
   22346:	4604      	mov	r4, r0
   22348:	f04f 30ff 	mov.w	r0, #4294967295
   2234c:	602c      	str	r4, [r5, #0]
   2234e:	bd70      	pop	{r4, r5, r6, pc}

00022350 <_read>:
   22350:	b5f0      	push	{r4, r5, r6, r7, lr}
   22352:	b085      	sub	sp, #20
   22354:	460c      	mov	r4, r1
   22356:	4616      	mov	r6, r2
   22358:	f7ff ffd0 	bl	222fc <findslot>
   2235c:	b1c8      	cbz	r0, 22392 <_read+0x42>
   2235e:	6803      	ldr	r3, [r0, #0]
   22360:	9301      	str	r3, [sp, #4]
   22362:	9402      	str	r4, [sp, #8]
   22364:	4605      	mov	r5, r0
   22366:	9603      	str	r6, [sp, #12]
   22368:	2406      	movs	r4, #6
   2236a:	af01      	add	r7, sp, #4
   2236c:	4620      	mov	r0, r4
   2236e:	4639      	mov	r1, r7
   22370:	beab      	bkpt	0x00ab
   22372:	4604      	mov	r4, r0
   22374:	1c62      	adds	r2, r4, #1
   22376:	4620      	mov	r0, r4
   22378:	d005      	beq.n	22386 <_read+0x36>
   2237a:	686b      	ldr	r3, [r5, #4]
   2237c:	1a30      	subs	r0, r6, r0
   2237e:	4403      	add	r3, r0
   22380:	606b      	str	r3, [r5, #4]
   22382:	b005      	add	sp, #20
   22384:	bdf0      	pop	{r4, r5, r6, r7, pc}
   22386:	f7ff ffd5 	bl	22334 <checkerror.part.0>
   2238a:	1c43      	adds	r3, r0, #1
   2238c:	d1f5      	bne.n	2237a <_read+0x2a>
   2238e:	b005      	add	sp, #20
   22390:	bdf0      	pop	{r4, r5, r6, r7, pc}
   22392:	f7fb f813 	bl	1d3bc <__errno>
   22396:	2309      	movs	r3, #9
   22398:	6003      	str	r3, [r0, #0]
   2239a:	f04f 30ff 	mov.w	r0, #4294967295
   2239e:	e7f0      	b.n	22382 <_read+0x32>

000223a0 <_swilseek>:
   223a0:	b5f0      	push	{r4, r5, r6, r7, lr}
   223a2:	b083      	sub	sp, #12
   223a4:	460d      	mov	r5, r1
   223a6:	4614      	mov	r4, r2
   223a8:	f7ff ffa8 	bl	222fc <findslot>
   223ac:	2800      	cmp	r0, #0
   223ae:	d03a      	beq.n	22426 <_swilseek+0x86>
   223b0:	2c02      	cmp	r4, #2
   223b2:	d825      	bhi.n	22400 <_swilseek+0x60>
   223b4:	2c01      	cmp	r4, #1
   223b6:	4606      	mov	r6, r0
   223b8:	d01f      	beq.n	223fa <_swilseek+0x5a>
   223ba:	2c02      	cmp	r4, #2
   223bc:	d010      	beq.n	223e0 <_swilseek+0x40>
   223be:	466f      	mov	r7, sp
   223c0:	6833      	ldr	r3, [r6, #0]
   223c2:	240a      	movs	r4, #10
   223c4:	e88d 0028 	stmia.w	sp, {r3, r5}
   223c8:	4620      	mov	r0, r4
   223ca:	4639      	mov	r1, r7
   223cc:	beab      	bkpt	0x00ab
   223ce:	4604      	mov	r4, r0
   223d0:	1c63      	adds	r3, r4, #1
   223d2:	d01c      	beq.n	2240e <_swilseek+0x6e>
   223d4:	2c00      	cmp	r4, #0
   223d6:	db23      	blt.n	22420 <_swilseek+0x80>
   223d8:	6075      	str	r5, [r6, #4]
   223da:	4628      	mov	r0, r5
   223dc:	b003      	add	sp, #12
   223de:	bdf0      	pop	{r4, r5, r6, r7, pc}
   223e0:	af02      	add	r7, sp, #8
   223e2:	6803      	ldr	r3, [r0, #0]
   223e4:	f847 3d08 	str.w	r3, [r7, #-8]!
   223e8:	240c      	movs	r4, #12
   223ea:	4620      	mov	r0, r4
   223ec:	4639      	mov	r1, r7
   223ee:	beab      	bkpt	0x00ab
   223f0:	4604      	mov	r4, r0
   223f2:	1c61      	adds	r1, r4, #1
   223f4:	d00f      	beq.n	22416 <_swilseek+0x76>
   223f6:	4425      	add	r5, r4
   223f8:	e7e2      	b.n	223c0 <_swilseek+0x20>
   223fa:	6840      	ldr	r0, [r0, #4]
   223fc:	182d      	adds	r5, r5, r0
   223fe:	d5de      	bpl.n	223be <_swilseek+0x1e>
   22400:	f7fa ffdc 	bl	1d3bc <__errno>
   22404:	2316      	movs	r3, #22
   22406:	6003      	str	r3, [r0, #0]
   22408:	f04f 35ff 	mov.w	r5, #4294967295
   2240c:	e7e5      	b.n	223da <_swilseek+0x3a>
   2240e:	f7ff ff91 	bl	22334 <checkerror.part.0>
   22412:	4604      	mov	r4, r0
   22414:	e7de      	b.n	223d4 <_swilseek+0x34>
   22416:	f7ff ff8d 	bl	22334 <checkerror.part.0>
   2241a:	1c42      	adds	r2, r0, #1
   2241c:	4604      	mov	r4, r0
   2241e:	d1ea      	bne.n	223f6 <_swilseek+0x56>
   22420:	f04f 35ff 	mov.w	r5, #4294967295
   22424:	e7d9      	b.n	223da <_swilseek+0x3a>
   22426:	f7fa ffc9 	bl	1d3bc <__errno>
   2242a:	2309      	movs	r3, #9
   2242c:	6003      	str	r3, [r0, #0]
   2242e:	f04f 35ff 	mov.w	r5, #4294967295
   22432:	e7d2      	b.n	223da <_swilseek+0x3a>

00022434 <_lseek>:
   22434:	f7ff bfb4 	b.w	223a0 <_swilseek>

00022438 <_write>:
   22438:	b5f0      	push	{r4, r5, r6, r7, lr}
   2243a:	b085      	sub	sp, #20
   2243c:	460c      	mov	r4, r1
   2243e:	4616      	mov	r6, r2
   22440:	f7ff ff5c 	bl	222fc <findslot>
   22444:	b350      	cbz	r0, 2249c <_write+0x64>
   22446:	6803      	ldr	r3, [r0, #0]
   22448:	9301      	str	r3, [sp, #4]
   2244a:	9402      	str	r4, [sp, #8]
   2244c:	4605      	mov	r5, r0
   2244e:	9603      	str	r6, [sp, #12]
   22450:	2405      	movs	r4, #5
   22452:	af01      	add	r7, sp, #4
   22454:	4620      	mov	r0, r4
   22456:	4639      	mov	r1, r7
   22458:	beab      	bkpt	0x00ab
   2245a:	4604      	mov	r4, r0
   2245c:	1c63      	adds	r3, r4, #1
   2245e:	d016      	beq.n	2248e <_write+0x56>
   22460:	2c00      	cmp	r4, #0
   22462:	db18      	blt.n	22496 <_write+0x5e>
   22464:	686a      	ldr	r2, [r5, #4]
   22466:	1b30      	subs	r0, r6, r4
   22468:	4402      	add	r2, r0
   2246a:	42a6      	cmp	r6, r4
   2246c:	606a      	str	r2, [r5, #4]
   2246e:	d001      	beq.n	22474 <_write+0x3c>
   22470:	b005      	add	sp, #20
   22472:	bdf0      	pop	{r4, r5, r6, r7, pc}
   22474:	f7fa ffa2 	bl	1d3bc <__errno>
   22478:	2513      	movs	r5, #19
   2247a:	4606      	mov	r6, r0
   2247c:	2400      	movs	r4, #0
   2247e:	4628      	mov	r0, r5
   22480:	4621      	mov	r1, r4
   22482:	beab      	bkpt	0x00ab
   22484:	4605      	mov	r5, r0
   22486:	4620      	mov	r0, r4
   22488:	6035      	str	r5, [r6, #0]
   2248a:	b005      	add	sp, #20
   2248c:	bdf0      	pop	{r4, r5, r6, r7, pc}
   2248e:	f7ff ff51 	bl	22334 <checkerror.part.0>
   22492:	4604      	mov	r4, r0
   22494:	e7e4      	b.n	22460 <_write+0x28>
   22496:	f04f 30ff 	mov.w	r0, #4294967295
   2249a:	e7e9      	b.n	22470 <_write+0x38>
   2249c:	f7fa ff8e 	bl	1d3bc <__errno>
   224a0:	2309      	movs	r3, #9
   224a2:	6003      	str	r3, [r0, #0]
   224a4:	f04f 30ff 	mov.w	r0, #4294967295
   224a8:	e7e2      	b.n	22470 <_write+0x38>
   224aa:	bf00      	nop

000224ac <_close>:
   224ac:	b570      	push	{r4, r5, r6, lr}
   224ae:	b082      	sub	sp, #8
   224b0:	4604      	mov	r4, r0
   224b2:	f7ff ff23 	bl	222fc <findslot>
   224b6:	b310      	cbz	r0, 224fe <_close+0x52>
   224b8:	3c01      	subs	r4, #1
   224ba:	2c01      	cmp	r4, #1
   224bc:	4606      	mov	r6, r0
   224be:	d911      	bls.n	224e4 <_close+0x38>
   224c0:	ad02      	add	r5, sp, #8
   224c2:	6833      	ldr	r3, [r6, #0]
   224c4:	f845 3d04 	str.w	r3, [r5, #-4]!
   224c8:	2402      	movs	r4, #2
   224ca:	4620      	mov	r0, r4
   224cc:	4629      	mov	r1, r5
   224ce:	beab      	bkpt	0x00ab
   224d0:	4604      	mov	r4, r0
   224d2:	1c63      	adds	r3, r4, #1
   224d4:	4620      	mov	r0, r4
   224d6:	d00f      	beq.n	224f8 <_close+0x4c>
   224d8:	b910      	cbnz	r0, 224e0 <_close+0x34>
   224da:	f04f 33ff 	mov.w	r3, #4294967295
   224de:	6033      	str	r3, [r6, #0]
   224e0:	b002      	add	sp, #8
   224e2:	bd70      	pop	{r4, r5, r6, pc}
   224e4:	4b09      	ldr	r3, [pc, #36]	; (2250c <_close+0x60>)
   224e6:	689a      	ldr	r2, [r3, #8]
   224e8:	691b      	ldr	r3, [r3, #16]
   224ea:	429a      	cmp	r2, r3
   224ec:	d1e8      	bne.n	224c0 <_close+0x14>
   224ee:	f04f 33ff 	mov.w	r3, #4294967295
   224f2:	6003      	str	r3, [r0, #0]
   224f4:	2000      	movs	r0, #0
   224f6:	e7f3      	b.n	224e0 <_close+0x34>
   224f8:	f7ff ff1c 	bl	22334 <checkerror.part.0>
   224fc:	e7ec      	b.n	224d8 <_close+0x2c>
   224fe:	f7fa ff5d 	bl	1d3bc <__errno>
   22502:	2309      	movs	r3, #9
   22504:	6003      	str	r3, [r0, #0]
   22506:	f04f 30ff 	mov.w	r0, #4294967295
   2250a:	e7e9      	b.n	224e0 <_close+0x34>
   2250c:	200022e0 	.word	0x200022e0

00022510 <_getpid>:
   22510:	2001      	movs	r0, #1
   22512:	4770      	bx	lr

00022514 <_sbrk>:
   22514:	4a0e      	ldr	r2, [pc, #56]	; (22550 <_sbrk+0x3c>)
   22516:	6813      	ldr	r3, [r2, #0]
   22518:	b510      	push	{r4, lr}
   2251a:	b1ab      	cbz	r3, 22548 <_sbrk+0x34>
   2251c:	4418      	add	r0, r3
   2251e:	4669      	mov	r1, sp
   22520:	4288      	cmp	r0, r1
   22522:	d809      	bhi.n	22538 <_sbrk+0x24>
   22524:	490b      	ldr	r1, [pc, #44]	; (22554 <_sbrk+0x40>)
   22526:	4c0c      	ldr	r4, [pc, #48]	; (22558 <_sbrk+0x44>)
   22528:	6809      	ldr	r1, [r1, #0]
   2252a:	42a1      	cmp	r1, r4
   2252c:	d001      	beq.n	22532 <_sbrk+0x1e>
   2252e:	4288      	cmp	r0, r1
   22530:	d802      	bhi.n	22538 <_sbrk+0x24>
   22532:	6010      	str	r0, [r2, #0]
   22534:	4618      	mov	r0, r3
   22536:	bd10      	pop	{r4, pc}
   22538:	f7fa ff40 	bl	1d3bc <__errno>
   2253c:	230c      	movs	r3, #12
   2253e:	6003      	str	r3, [r0, #0]
   22540:	f04f 33ff 	mov.w	r3, #4294967295
   22544:	4618      	mov	r0, r3
   22546:	bd10      	pop	{r4, pc}
   22548:	4b04      	ldr	r3, [pc, #16]	; (2255c <_sbrk+0x48>)
   2254a:	6013      	str	r3, [r2, #0]
   2254c:	e7e6      	b.n	2251c <_sbrk+0x8>
   2254e:	bf00      	nop
   22550:	200022dc 	.word	0x200022dc
   22554:	20000ab0 	.word	0x20000ab0
   22558:	cafedead 	.word	0xcafedead
   2255c:	200023a8 	.word	0x200023a8

00022560 <_swistat>:
   22560:	b570      	push	{r4, r5, r6, lr}
   22562:	460d      	mov	r5, r1
   22564:	f7ff feca 	bl	222fc <findslot>
   22568:	b1b8      	cbz	r0, 2259a <_swistat+0x3a>
   2256a:	686b      	ldr	r3, [r5, #4]
   2256c:	f44f 6280 	mov.w	r2, #1024	; 0x400
   22570:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
   22574:	4606      	mov	r6, r0
   22576:	606b      	str	r3, [r5, #4]
   22578:	62ea      	str	r2, [r5, #44]	; 0x2c
   2257a:	240c      	movs	r4, #12
   2257c:	4620      	mov	r0, r4
   2257e:	4631      	mov	r1, r6
   22580:	beab      	bkpt	0x00ab
   22582:	4604      	mov	r4, r0
   22584:	1c62      	adds	r2, r4, #1
   22586:	4620      	mov	r0, r4
   22588:	d002      	beq.n	22590 <_swistat+0x30>
   2258a:	6128      	str	r0, [r5, #16]
   2258c:	2000      	movs	r0, #0
   2258e:	bd70      	pop	{r4, r5, r6, pc}
   22590:	f7ff fed0 	bl	22334 <checkerror.part.0>
   22594:	1c43      	adds	r3, r0, #1
   22596:	d1f8      	bne.n	2258a <_swistat+0x2a>
   22598:	e7f9      	b.n	2258e <_swistat+0x2e>
   2259a:	f7fa ff0f 	bl	1d3bc <__errno>
   2259e:	2309      	movs	r3, #9
   225a0:	6003      	str	r3, [r0, #0]
   225a2:	f04f 30ff 	mov.w	r0, #4294967295
   225a6:	bd70      	pop	{r4, r5, r6, pc}

000225a8 <_fstat>:
   225a8:	b538      	push	{r3, r4, r5, lr}
   225aa:	223c      	movs	r2, #60	; 0x3c
   225ac:	460c      	mov	r4, r1
   225ae:	4605      	mov	r5, r0
   225b0:	4608      	mov	r0, r1
   225b2:	2100      	movs	r1, #0
   225b4:	f7fb fe02 	bl	1e1bc <memset>
   225b8:	4621      	mov	r1, r4
   225ba:	4628      	mov	r0, r5
   225bc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   225c0:	f7ff bfce 	b.w	22560 <_swistat>

000225c4 <_isatty>:
   225c4:	b570      	push	{r4, r5, r6, lr}
   225c6:	f7ff fe99 	bl	222fc <findslot>
   225ca:	4605      	mov	r5, r0
   225cc:	b190      	cbz	r0, 225f4 <_isatty+0x30>
   225ce:	2409      	movs	r4, #9
   225d0:	4620      	mov	r0, r4
   225d2:	4629      	mov	r1, r5
   225d4:	beab      	bkpt	0x00ab
   225d6:	4604      	mov	r4, r0
   225d8:	2c01      	cmp	r4, #1
   225da:	d009      	beq.n	225f0 <_isatty+0x2c>
   225dc:	f7fa feee 	bl	1d3bc <__errno>
   225e0:	2513      	movs	r5, #19
   225e2:	4606      	mov	r6, r0
   225e4:	2400      	movs	r4, #0
   225e6:	4628      	mov	r0, r5
   225e8:	4621      	mov	r1, r4
   225ea:	beab      	bkpt	0x00ab
   225ec:	4605      	mov	r5, r0
   225ee:	6035      	str	r5, [r6, #0]
   225f0:	4620      	mov	r0, r4
   225f2:	bd70      	pop	{r4, r5, r6, pc}
   225f4:	f7fa fee2 	bl	1d3bc <__errno>
   225f8:	2209      	movs	r2, #9
   225fa:	462c      	mov	r4, r5
   225fc:	6002      	str	r2, [r0, #0]
   225fe:	e7f7      	b.n	225f0 <_isatty+0x2c>

00022600 <_exit>:
   22600:	f04f 31ff 	mov.w	r1, #4294967295
   22604:	f000 b800 	b.w	22608 <_kill>

00022608 <_kill>:
   22608:	2906      	cmp	r1, #6
   2260a:	b530      	push	{r4, r5, lr}
   2260c:	bf0c      	ite	eq
   2260e:	4d04      	ldreq	r5, [pc, #16]	; (22620 <_kill+0x18>)
   22610:	4d04      	ldrne	r5, [pc, #16]	; (22624 <_kill+0x1c>)
   22612:	2418      	movs	r4, #24
   22614:	4620      	mov	r0, r4
   22616:	4629      	mov	r1, r5
   22618:	beab      	bkpt	0x00ab
   2261a:	4604      	mov	r4, r0
   2261c:	4620      	mov	r0, r4
   2261e:	bd30      	pop	{r4, r5, pc}
   22620:	00020023 	.word	0x00020023
   22624:	00020026 	.word	0x00020026

00022628 <_init>:
   22628:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   2262a:	bf00      	nop
   2262c:	bcf8      	pop	{r3, r4, r5, r6, r7}
   2262e:	bc08      	pop	{r3}
   22630:	469e      	mov	lr, r3
   22632:	4770      	bx	lr

00022634 <_fini>:
   22634:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   22636:	bf00      	nop
   22638:	bcf8      	pop	{r3, r4, r5, r6, r7}
   2263a:	bc08      	pop	{r3}
   2263c:	469e      	mov	lr, r3
   2263e:	4770      	bx	lr

00022640 <__init_array_start>:
   22640:	000202ad 	.word	0x000202ad

00022644 <__frame_dummy_init_array_entry>:
   22644:	00004289 00004c35 00005369 0000553d     .B..5L..iS..=U..
   22654:	00006dd1 00008559 0000a65d 0000a8ed     .m..Y...].......
   22664:	0000aac5 0000b5f1 0000c181 00010001     ................
   22674:	00013181                                .1..

00022678 <__do_global_dtors_aux_fini_array_entry>:
   22678:	00004265                                eB..

0002267c <__fini_array_end>:
   2267c:	65766f4d 	.word	0x65766f4d
   22680:	6a657220 	.word	0x6a657220
   22684:	65746365 	.word	0x65746365
   22688:	72202c64 	.word	0x72202c64
   2268c:	65757165 	.word	0x65757165
   22690:	64657473 	.word	0x64657473
   22694:	6c657620 	.word	0x6c657620
   22698:	7469636f 	.word	0x7469636f
   2269c:	74612079 	.word	0x74612079
   226a0:	20726f20 	.word	0x20726f20
   226a4:	7265766f 	.word	0x7265766f
   226a8:	65687420 	.word	0x65687420
   226ac:	6d696c20 	.word	0x6d696c20
   226b0:	002e7469 	.word	0x002e7469
   226b4:	6f746f4d 	.word	0x6f746f4d
   226b8:	74732072 	.word	0x74732072
   226bc:	73757461 	.word	0x73757461
   226c0:	4927203a 	.word	0x4927203a
   226c4:	6c41206e 	.word	0x6c41206e
   226c8:	27747265 	.word	0x27747265
   226cc:	6f4d202e 	.word	0x6f4d202e
   226d0:	43206576 	.word	0x43206576
   226d4:	65636e61 	.word	0x65636e61
   226d8:	2e64656c 	.word	0x2e64656c
   226dc:	00000000 	.word	0x00000000
   226e0:	6d6d6f43 	.word	0x6d6d6f43
   226e4:	69646e61 	.word	0x69646e61
   226e8:	7620676e 	.word	0x7620676e
   226ec:	636f6c65 	.word	0x636f6c65
   226f0:	3a797469 	.word	0x3a797469
   226f4:	00000020 	.word	0x00000020
   226f8:	6f746f4d 	.word	0x6f746f4d
   226fc:	6e452072 	.word	0x6e452072
   22700:	656c6261 	.word	0x656c6261
   22704:	00000064 	.word	0x00000064
   22708:	00022768 	.word	0x00022768
   2270c:	00022758 	.word	0x00022758
   22710:	00022738 	.word	0x00022738
   22714:	00022748 	.word	0x00022748

00022718 <_ZN9ClearCore10AdcManager21ADC_CHANNEL_MAX_FLOATE>:
   22718:	42a1b333 41200000 40d33333 41200000     3..B.. A33.@.. A
   22728:	41200000 41200000 41200000 41200000     .. A.. A.. A.. A

00022738 <_ZN9ClearCoreL11Sdrvr2_iMonE>:
   22738:	01010204 ff0bff00 ffffffff 00ffffff     ................

00022748 <_ZN9ClearCoreL11Sdrvr3_iMonE>:
   22748:	00000203 ff0aff00 ffffffff 00ffffff     ................

00022758 <_ZN9ClearCoreL24Vsupply_MON_IO_4and5_RSTE>:
   22758:	02020205 ff04ff00 ffffffff 00ffffff     ................

00022768 <_ZN9ClearCoreL9_5VOB_MONE>:
   22768:	04040109 ff06ff00 ffffffff 00ffffff     ................

00022778 <_ZTVN9ClearCore17DigitalInAnalogInE>:
	...
   22780:	00004c8d 00004c9d 00004c91 00004c95     .L...L...L...L..
   22790:	00004ef1 00004c99 00004c81 00004c85     .N...L...L...L..
   227a0:	00004dc5 00004e3d                       .M..=N..

000227a8 <_ZTVN9ClearCore9ConnectorE>:
	...
   227b0:	00004f39 00013005 00013005 00013005     9O...0...0...0..
   227c0:	00013005 00013005 00013005 00004f3d     .0...0...0..=O..
   227d0:	00013005 00013005                       .0...0..

000227d8 <_ZTVN9ClearCore9DigitalInE>:
	...
   227e0:	00004f45 00004f49 00004f55 00004f59     EO..IO..UO..YO..
   227f0:	00004f61 00004f5d 00004c81 00004c85     aO..]O...L...L..
   22800:	00005055 00004f89                       UP...O..

00022808 <CSWTCH.95>:
   22808:	02030406 00000002                       ........

00022810 <_ZN9ClearCoreL11tcc_modulesE>:
   22810:	41016000 41018000 42000c00 42001000     .`.A...A...B...B
   22820:	43001000                                ...C

00022824 <_ZTVN9ClearCore11MotorDriverE>:
	...
   2282c:	0000555d 00005561 0000554d 00005551     ]U..aU..MU..QU..
   2283c:	00004f61 00004f5d 00005555 00004c85     aO..]O..UU...L..
   2284c:	00005c51 00006485 000062ad 000063a5     Q\...d...b...c..
   2285c:	000056c5 ffffffd0 00000000 0000639d     .V...........c..
   2286c:	0000647d 00005715                       }d...W..

00022874 <_ZZN9ClearCore11MotorDriver10InitializeE13ClearCorePinsE10tc_modules>:
   22874:	40003800 40003c00 4101a000 4101c000     .8.@.<.@...A...A
   22884:	42001400 42001800 43001400 43001800     ...B...B...C...C

00022894 <_ZTVN9ClearCore7ISerialE>:
	...
   2289c:	00013005 00013005 00013005 00013005     .0...0...0...0..
   228ac:	00013005 00013005 00013005 00013005     .0...0...0...0..
   228bc:	00013005 00013005 00013005 00013005     .0...0...0...0..
   228cc:	00013005 00013005 00013005 00013005     .0...0...0...0..
   228dc:	00013005 00013005                       .0...0..

000228e4 <_ZTVN9ClearCore9SerialUsbE>:
	...
   228ec:	00006821 00006815 00006839 00006845     !h...h..9h..Eh..
   228fc:	00006851 0000685d 00006869 00006875     Qh..]h..ih..uh..
   2290c:	00006881 0000688d 00006899 00006821     .h...h...h..!h..
   2291c:	0000682d 0000682d 00006799 000067a5     -h..-h...g...g..
   2292c:	000067a9 000067b5 000067c1 000067cd     .g...g...g...g..
   2293c:	000067e1 000068a5 000068c9 000068f9     .g...h...h...h..
   2294c:	000067ed 000067f9 00006809 fffffffc     .g...g...h......
   2295c:	00000000 000067c5 000067d9 000067e5     .....g...g...g..
   2296c:	000068c1 000068f1 00006939 000067f1     .h...h..9i...g..
   2297c:	00004f3d 0000680d 00006801 008061fc     =O...h...h...a..
   2298c:	00806010 00806014 00806018              .`...`...`..

00022998 <_ZTVN9ClearCore12SdCardDriverE>:
	...
   229a0:	000101fd 0001020d 00011129 00010485     ........).......
   229b0:	00010331 00008569 00010221 00010259     1...i...!...Y...
   229c0:	00010299 00010275 00010285 000102d9     ....u...........
   229d0:	000101f5 00008571 0001059d 0000856d     ....q.......m...
   229e0:	00010771 0001068d                       q.......

000229e8 <_ZTVN9ClearCore10XBeeDriverE>:
	...
   229f0:	000101fd 0001020d 00011129 00010485     ........).......
   22a00:	00010331 00008569 00010221 00010259     1...i...!...Y...
   22a10:	00010299 00010275 00010285 000102d9     ....u...........
   22a20:	000101f5 00008571 0001059d 0000856d     ....q.......m...
   22a30:	00010771 0001068d 40003c00 4101a000     q........<.@...A
   22a40:	43001400                                ...C

00022a44 <_ZN9ClearCore10hBridgeConE>:
   22a44:	2000149c 20001520                       ...  .. 

00022a4c <_ZN9ClearCore15MotorConnectorsE>:
   22a4c:	20000c90 20000dd8 20000f20 20001068     ... ...  .. h.. 

00022a5c <_ZN9ClearCoreL10ConnectorsE>:
   22a5c:	20001310 2000137c 200013dc 2000143c     ... |.. ... <.. 
   22a6c:	2000149c 20001520 20001280 200012b0     ...  .. ... ... 
   22a7c:	200012e0 20000c4c 200011b4 200011f8     ... L.. ... ... 
   22a8c:	2000123c 200015a4 20000c90 20000dd8     <.. ... ... ... 
   22a9c:	20000f20 20001068 20001704 2000185c      .. h.. ... \.. 
   22aac:	200015b4                                ... 

00022ab0 <_ZN9ClearCoreL10MicroSD_SSE>:
   22ab0:	0504003d ffffff00 ffffffff 00ff0500     =...............

00022ac0 <_ZN9ClearCoreL10XBee_Rx_INE>:
   22ac0:	08180150 ffffff00 ffff0102 00ffffff     P...............

00022ad0 <_ZN9ClearCoreL11Com0_RTS_SSE>:
   22ad0:	02120142 ffffff00 ffff0207 00040001     B...............

00022ae0 <_ZN9ClearCoreL11Com0_RX_SCKE>:
   22ae0:	04140144 ffffff00 ffff0107 00060201     D...............

00022af0 <_ZN9ClearCoreL11Com1_RTS_SSE>:
   22af0:	0a0a001c ffffff00 00010200 00040200     ................

00022b00 <_ZN9ClearCoreL11Com1_RX_SCKE>:
   22b00:	0909001b ff03ff00 01000100 00ff0100     ................

00022b10 <_ZN9ClearCoreL11IN06n_QuadAE>:
   22b10:	00100238 ffffff01 ffff0006 00ff0000     8...............

00022b20 <_ZN9ClearCoreL11IN07n_QuadBE>:
   22b20:	01110239 ffffff01 ffff0106 00ff0100     9...............

00022b30 <_ZN9ClearCoreL11IN08n_QuadIE>:
   22b30:	0212023a ffffff01 ffff0206 00ff0200     :...............

00022b40 <_ZN9ClearCoreL11IN09n_AIN09E>:
   22b40:	0707010e ff09ff01 ffffffff 00ffffff     ................

00022b50 <_ZN9ClearCoreL11IN10n_AIN10E>:
   22b50:	0606010d ff08ff01 ffffffff 00ffffff     ................

00022b60 <_ZN9ClearCoreL11IN11n_AIN11E>:
   22b60:	0505010a ff07ff01 ffffffff 00ffffff     ................

00022b70 <_ZN9ClearCoreL11IN12n_AIN12E>:
   22b70:	03030206 ff05ff01 ffffffff 00ffffff     ................

00022b80 <_ZN9ClearCoreL11MicroSD_SCKE>:
   22b80:	09090110 ff01ff00 01040104 00ffffff     ................

00022b90 <_ZN9ClearCoreL11XBee_CTS_INE>:
   22b90:	09190253 ffffff00 ffff0302 00ffffff     S...............

00022ba0 <_ZN9ClearCoreL11XBee_Tx_OUTE>:
   22ba0:	09190151 ffffff00 ffff0002 00ffffff     Q...............

00022bb0 <_ZN9ClearCoreL12Com0_TX_MOSIE>:
   22bb0:	05150145 ffffff00 ffff0007 00070301     E...............

00022bc0 <_ZN9ClearCoreL12Com1_TX_MOSIE>:
   22bc0:	ff08001a ff02ff00 00000000 00ff0000     ................

00022bd0 <_ZN9ClearCoreL12MicroSD_MISOE>:
   22bd0:	0a0a0120 ffffff00 00050204 00040400      ...............

00022be0 <_ZN9ClearCoreL12MicroSD_MOSIE>:
   22be0:	0808010f ff00ff00 00040004 00ffffff     ................

00022bf0 <_ZN9ClearCoreL12Mtr0_An_SCTxE>:
   22bf0:	07170049 ffffff00 01040005 00ff0701     I...............

00022c00 <_ZN9ClearCoreL12XBee_RTS_OUTE>:
   22c00:	08180252 ffffff00 ffff0202 00ffffff     R...............

00022c10 <_ZN9ClearCoreL13Com0_CTS_MISOE>:
   22c10:	03130143 ffffff00 ffff0307 00050101     C...............

00022c20 <_ZN9ClearCoreL13Com1_CTS_MISOE>:
   22c20:	0b0b001d ffffff00 01010300 00050300     ................

00022c30 <_ZN9ClearCoreL13IN00n_Aout00nE>:
   22c30:	05050012 01ffff00 0100ffff 00ffffff     ................

00022c40 <_ZN9ClearCoreL14Mtr0_HLFB_SCRxE>:
   22c40:	04140046 ffffff01 00070205 00ff0401     F...............

00022c50 <_ZN9ClearCoreL14OUT04_ENABLE04E>:
   22c50:	00100140 ffffff00 00060005 00020003     @...............

00022c60 <_ZN9ClearCoreL14OUT05_ENABLE05E>:
   22c60:	03030164 ffffff00 0106ffff 00ffffff     d...............

00022c70 <_ZN9ClearCoreL17Polarity04_PWM04AE>:
   22c70:	0e0e0124 ffffff00 00050204 00000004     $...............

00022c80 <_ZN9ClearCoreL17Polarity05_PWM05AE>:
   22c80:	0c0c0122 ffffff00 00040004 00060003     "...............

00022c90 <_ZN9ClearCoreL18Mtr2_B_Sdrvr2_PWMBE>:
   22c90:	0d0d022b ffffff00 ffff0107 00ff0300     +...............

00022ca0 <_ZN9ClearCoreL18Mtr3_B_Sdrvr3_PWMBE>:
   22ca0:	0a0a0228 ffffff00 ffff0206 00ff0000     (...............

00022cb0 <_ZN9ClearCoreL18Polarity04S_PWM04BE>:
   22cb0:	0f0f0125 ffffff00 01050304 00010104     %...............

00022cc0 <_ZN9ClearCoreL18Polarity05S_PWM05BE>:
   22cc0:	0d0d0123 ffffff00 01040104 00070103     #...............

00022cd0 <_ZN9ClearCoreL19Mtr2_An_Sdrvr2_PWMAE>:
   22cd0:	06160048 ffffff00 00040003 00ff0601     H...............

00022ce0 <_ZN9ClearCoreL19Mtr3_An_Sdrvr3_PWMAE>:
   22ce0:	00100034 ffffff00 00020001 00020001     4...............

00022cf0 <_ZN9ClearCoreL21Mtr2_HLFB_Sdrvr2_TrigE>:
   22cf0:	0a1a0254 ffffff01 ffffffff 00ffffff     T...............

00022d00 <_ZN9ClearCoreL21Mtr3_HLFB_Sdrvr3_TrigE>:
   22d00:	0f1f0160 ffffff01 0100ffff 00ff0104     `...............

00022d10 <_ZN9ClearCoreL5IN01nE>:
   22d10:	02110107 00ffff00 ffffffff 00ffffff     ................

00022d20 <_ZN9ClearCoreL5IN02nE>:
   22d20:	03030008 ffffff00 ffffffff 00ffffff     ................

00022d30 <_ZN9ClearCoreL5IN03nE>:
   22d30:	04150211 ffffff00 0000ffff 00ffffff     ................

00022d40 <_ZN9ClearCoreL5IN04nE>:
   22d40:	0b1b0255 ffffff00 ffff0001 00ffffff     U...............

00022d50 <_ZN9ClearCoreL5IN05nE>:
   22d50:	0313023b ffffff00 ffff0306 00ff0300     ;...............

00022d60 <_ZN9ClearCoreL5OUT00E>:
   22d60:	00000001 ffffff00 0002ffff 00ffffff     ................

00022d70 <_ZN9ClearCoreL5OUT01E>:
   22d70:	01010002 ffffff00 0102ffff 00ffffff     ................

00022d80 <_ZN9ClearCoreL5OUT02E>:
   22d80:	06060013 ffffff00 0001ffff 00ffffff     ................

00022d90 <_ZN9ClearCoreL5OUT03E>:
   22d90:	07070014 ffffff00 0101ffff 00ffffff     ................

00022da0 <_ZN9ClearCoreL6Aout00E>:
   22da0:	02020007 01ffff00 0100ffff 00ffffff     ................

00022db0 <_ZN9ClearCoreL6Mtr0_BE>:
   22db0:	0e0e022c ffffff00 ffff0207 00ff0400     ,...............

00022dc0 <_ZN9ClearCoreL6Mtr1_BE>:
   22dc0:	0f0f022d ffffff00 ffff0307 00ff0500     -...............

00022dd0 <_ZN9ClearCoreL7Mtr1_AnE>:
   22dd0:	05150047 ffffff00 01070305 00ff0501     G...............

00022de0 <_ZN9ClearCoreL9Mtr1_HLFBE>:
   22de0:	0b0b0121 ffffff01 0105ffff 00050500     !...............
   22df0:	00000080 00000040 00000020 00000010     ....@... .......
   22e00:	00000008 00000004 01000000 02000000     ................
   22e10:	04000000 08000000 00800000 00400000     ..............@.
   22e20:	00200000 00004000 00008000 00040000     .. ..@..........
   22e30:	00080000                                ....

00022e34 <_ZTVN9ClearCore13StepGeneratorE>:
	...
   22e3c:	0000c191 0000c205 00013005              .........0..

00022e48 <_ZN9ClearCoreL11IN06n_QuadAE>:
   22e48:	00100238 ffffff01 ffff0006 00ff0000     8...............

00022e58 <_ZN9ClearCoreL11IN07n_QuadBE>:
   22e58:	01110239 ffffff01 ffff0106 00ff0100     9...............

00022e68 <_ZN9ClearCoreL11IN08n_QuadIE>:
   22e68:	0212023a ffffff01 ffff0206 00ff0200     :...............
   22e78:	752f2e2e 642f6273 63697665 73752f65     ../usb/device/us
   22e88:	2e636462 00000063 682f2e2e 752f6c61     bdc.c...../hal/u
   22e98:	736c6974 6372732f 6974752f 6c5f736c     tils/src/utils_l
   22ea8:	2e747369 00000063                       ist.c...

00022eb0 <_ZTVN9ClearCore21DigitalInOutAnalogOutE>:
	...
   22eb8:	0000df5d 0000e18d 0000df61 0000df65     ].......a...e...
   22ec8:	0000e285 0000e2a1 0000df55 00004c85     ........U....L..
   22ed8:	0000e175 0000e33d                       u...=...

00022ee0 <_ZTVN9ClearCore12DigitalInOutE>:
	...
   22ee8:	0000e68d 0000e761 0000e691 0000e695     ....a...........
   22ef8:	0000ebfd 0000e6a9 0000df55 00004c85     ........U....L..
   22f08:	0000e9f1 0000ec3d                       ....=...

00022f10 <_ZZN9ClearCore12DigitalInOutC4ENS_13ShiftRegister5MasksEPK15PeripheralRouteS5_bE10tc_modules>:
   22f10:	40003800 40003c00 4101a000 4101c000     .8.@.<.@...A...A
   22f20:	42001400 42001800 43001400 43001800     ...B...B...C...C

00022f30 <_ZTVN9ClearCore19DigitalInOutHBridgeE>:
	...
   22f38:	00006941 0000f145 0000ecb1 0000ecb5     Ai..E...........
   22f48:	0000ed79 0000edb5 0000df55 00004c85     y.......U....L..
   22f58:	0000ef69 0000f07d                       i...}...

00022f60 <_ZZN9ClearCore19DigitalInOutHBridgeC4ENS_13ShiftRegister5MasksEPK15PeripheralRouteS5_S5_S5_4IRQnbE11tcc_modules>:
   22f60:	41016000 41018000 42000c00 42001000     .`.A...A...B...B
   22f70:	43001000                                ...C

00022f74 <_ZTVN9ClearCore7CcioPinE>:
	...
   22f7c:	00010011 0001006d 00010015 00010019     ....m...........
   22f8c:	000100dd 00010139 00010119 00004f3d     ....9.......=O..
   22f9c:	00010029 0001002d                       )...-...

00022fa4 <_ZTVN9ClearCore10SerialBaseE>:
	...
   22fac:	000101fd 0001020d 00011129 00010485     ........).......
   22fbc:	00010331 00008569 00010221 00010259     1...i...!...Y...
   22fcc:	00010299 00010275 00010285 000102d9     ....u...........
   22fdc:	000101f5 00008571 0001059d 0000856d     ....q.......m...
   22fec:	00010771 0001068d                       q.......

00022ff4 <_ZZN9ClearCore10SerialBaseC4EPK15PeripheralRouteS3_S3_S3_hE16sercom_instances>:
   22ff4:	40003000 40003400 41012000 41014000     .0.@.4.@. .A.@.A
   23004:	43000000 43000400 43000800 43000c00     ...C...C...C...C

00023014 <_ZTVN9ClearCore12SerialDriverE>:
	...
   2301c:	000101fd 0001020d 000117f9 0001184d     ............M...
   2302c:	00011689 00008569 00010221 00010259     ....i...!...Y...
   2303c:	00010299 00010275 00010285 000102d9     ....u...........
   2304c:	000101f5 00008571 0001059d 0000856d     ....q.......m...
   2305c:	00010771 0001068d 000115dd 000116a5     q...............
   2306c:	000115ed 000115f9 00011609 00011991     ................
   2307c:	0001161d 00011899 00011629 fffffebc     ........).......
   2308c:	00000000 000115e5 000117f1 000115f1     ................
   2309c:	00011601 00011615 00011a45 00011621     ........E...!...
   230ac:	00004f3d 0001162d 00011989              =O..-.......

000230b8 <_ZTVN9ClearCore9LedDriverE>:
	...
   230c0:	00011a4d 00011a51 00011a5d 00011a61     M...Q...]...a...
   230d0:	00011a75 00011a8d 00011a65 00004f3d     u.......e...=O..
   230e0:	00011a69 00011a6d                       i...m...

000230e8 <_usb_ep_cfgs>:
   230e8:	20001f34 00000000 00000040 20001f74     4.. ....@...t.. 
   230f8:	00000000 00000040 20001fb4 00000000     ....@...... ....
   23108:	00000040                                @...

0002310c <sinTable_q15>:
   2310c:	01920000 04b60324 07d90648 0afb096b     ....$...H...k...
   2311c:	0e1c0c8c 113a0fab 145512c8 176e15e2     ......:...U...n.
   2312c:	1a8318f9 1d931c0c 209f1f1a 23a72224     ........... $".#
   2313c:	26a82528 29a42827 2c992b1f 2f872e11     (%.&'(.).+.,.../
   2314c:	326e30fc 354e33df 382536ba 3af3398d     .0n2.3N5.6%8.9.:
   2315c:	3db83c57 40743f17 432641ce 45cd447b     W<.=.?t@.A&C{D.E
   2316c:	486a471d 4afb49b4 4d814c40 4ffb4ec0     .GjH.I.J@L.M.N.O
   2317c:	52695134 54ca539b 571e55f6 59645843     4QiR.S.T.U.WCXdY
   2318c:	5b9d5a82 5dc85cb4 5fe45ed7 61f160ec     .Z.[.\.].^._.`.a
   2319c:	63ef62f2 65de64e9 67bd66d0 698c68a7     .b.c.d.e.f.g.h.i
   231ac:	6b4b6a6e 6cf96c24 6e976dca 70236f5f     njKk$l.l.m.n_o#p
   231bc:	719e70e3 73087255 746073b6 75a67505     .p.qUr.s.s`t.u.u
   231cc:	76d97642 77fb776c 790a7885 7a06798a     Bv.vlw.w.x.y.y.z
   231dc:	7aef7a7d 7bc67b5d 7c897c2a 7d3a7ce4     }z.z]{.{*|.|.|:}
   231ec:	7dd67d8a 7e607e1e 7ed67e9d 7f387f0a     .}.}.~`~.~.~..8.
   231fc:	7f877f62 7fc27fa7 7fea7fd9 7ffe7ff6     b...............
   2320c:	7ffe7fff 7fea7ff6 7fc27fd9 7f877fa7     ................
   2321c:	7f387f62 7ed67f0a 7e607e9d 7dd67e1e     b.8....~.~`~.~.}
   2322c:	7d3a7d8a 7c897ce4 7bc67c2a 7aef7b5d     .}:}.|.|*|.{]{.z
   2323c:	7a067a7d 790a798a 77fb7885 76d9776c     }z.z.y.y.x.wlw.v
   2324c:	75a67642 74607505 730873b6 719e7255     Bv.u.u`t.s.sUr.q
   2325c:	702370e3 6e976f5f 6cf96dca 6b4b6c24     .p#p_o.n.m.l$lKk
   2326c:	698c6a6e 67bd68a7 65de66d0 63ef64e9     nj.i.h.g.f.e.d.c
   2327c:	61f162f2 5fe460ec 5dc85ed7 5b9d5cb4     .b.a.`._.^.].\.[
   2328c:	59645a82 571e5843 54ca55f6 5269539b     .ZdYCX.W.U.T.SiR
   2329c:	4ffb5134 4d814ec0 4afb4c40 486a49b4     4Q.O.N.M@L.J.IjH
   232ac:	45cd471d 4326447b 407441ce 3db83f17     .G.E{D&C.At@.?.=
   232bc:	3af33c57 3825398d 354e36ba 326e33df     W<.:.9%8.6N5.3n2
   232cc:	2f8730fc 2c992e11 29a42b1f 26a82827     .0./...,.+.)'(.&
   232dc:	23a72528 209f2224 1d931f1a 1a831c0c     (%.#$". ........
   232ec:	176e18f9 145515e2 113a12c8 0e1c0fab     ..n...U...:.....
   232fc:	0afb0c8c 07d9096b 04b60648 01920324     ....k...H...$...
   2330c:	fe6e0000 fb4afcdc f827f9b8 f505f695     ..n...J...'.....
   2331c:	f1e4f374 eec6f055 ebabed38 e892ea1e     t...U...8.......
   2332c:	e57de707 e26de3f4 df61e0e6 dc59dddc     ..}...m...a...Y.
   2333c:	d958dad8 d65cd7d9 d367d4e1 d079d1ef     ..X...\...g...y.
   2334c:	cd92cf04 cab2cc21 c7dbc946 c50dc673     ....!...F...s...
   2335c:	c248c3a9 bf8cc0e9 bcdabe32 ba33bb85     ..H.....2.....3.
   2336c:	b796b8e3 b505b64c b27fb3c0 b005b140     ....L.......@...
   2337c:	ad97aecc ab36ac65 a8e2aa0a a69ca7bd     ....e.6.........
   2338c:	a463a57e a238a34c a01ca129 9e0f9f14     ~.c.L.8.).......
   2339c:	9c119d0e 9a229b17 98439930 96749759     ......".0.C.Y.t.
   233ac:	94b59592 930793dc 91699236 8fdd90a1     ........6.i.....
   233bc:	8e628f1d 8cf88dab 8ba08c4a 8a5a8afb     ..b.....J.....Z.
   233cc:	892789be 88058894 86f6877b 85fa8676     ..'.....{...v...
   233dc:	85118583 843a84a3 837783d6 82c6831c     ......:...w.....
   233ec:	822a8276 81a081e2 812a8163 80c880f6     v.*.....c.*.....
   233fc:	8079809e 803e8059 80168027 8002800a     ..y.Y.>.'.......
   2340c:	80028000 8016800a 803e8027 80798059     ........'.>.Y.y.
   2341c:	80c8809e 812a80f6 81a08163 822a81e2     ......*.c.....*.
   2342c:	82c68276 8377831c 843a83d6 851184a3     v.....w...:.....
   2343c:	85fa8583 86f68676 8805877b 89278894     ....v...{.....'.
   2344c:	8a5a89be 8ba08afb 8cf88c4a 8e628dab     ..Z.....J.....b.
   2345c:	8fdd8f1d 916990a1 93079236 94b593dc     ......i.6.......
   2346c:	96749592 98439759 9a229930 9c119b17     ..t.Y.C.0.".....
   2347c:	9e0f9d0e a01c9f14 a238a129 a463a34c     ........).8.L.c.
   2348c:	a69ca57e a8e2a7bd ab36aa0a ad97ac65     ~.........6.e...
   2349c:	b005aecc b27fb140 b505b3c0 b796b64c     ....@.......L...
   234ac:	ba33b8e3 bcdabb85 bf8cbe32 c248c0e9     ..3.....2.....H.
   234bc:	c50dc3a9 c7dbc673 cab2c946 cd92cc21     ....s...F...!...
   234cc:	d079cf04 d367d1ef d65cd4e1 d958d7d9     ..y...g...\...X.
   234dc:	dc59dad8 df61dddc e26de0e6 e57de3f4     ..Y...a...m...}.
   234ec:	e892e707 ebabea1e eec6ed38 f1e4f055     ........8...U...
   234fc:	f505f374 f827f695 fb4af9b8 fe6efcdc     t.....'...J...n.
   2350c:	00000000 65727570 72697620 6c617574     ....pure virtual
   2351c:	74656d20 20646f68 6c6c6163 000a6465      method called..
   2352c:	3a647473 6461623a 6c6c615f 0000636f     std::bad_alloc..

0002353c <_ZTISt9bad_alloc>:
   2353c:	0002365c 00023548 0002359c              \6..H5...5..

00023548 <_ZTSSt9bad_alloc>:
   23548:	62397453 615f6461 636f6c6c 00000000     St9bad_alloc....

00023558 <_ZTVSt9bad_alloc>:
   23558:	00000000 0002353c 00013021 00013035     ....<5..!0..50..
   23568:	00013019 3a647473 6461623a 6378655f     .0..std::bad_exc
   23578:	69747065 00006e6f                       eption..

00023580 <_ZTIN10__cxxabiv115__forced_unwindE>:
   23580:	000236d0 000235a4                       .6...5..

00023588 <_ZTIN10__cxxabiv119__foreign_exceptionE>:
   23588:	000236d0 000235c4                       .6...5..

00023590 <_ZTISt13bad_exception>:
   23590:	0002365c 000235e8 0002359c              \6...5...5..

0002359c <_ZTISt9exception>:
   2359c:	000236d0 000235fc                       .6...5..

000235a4 <_ZTSN10__cxxabiv115__forced_unwindE>:
   235a4:	5f30314e 7878635f 76696261 5f353131     N10__cxxabiv115_
   235b4:	726f665f 5f646563 69776e75 0045646e     _forced_unwindE.

000235c4 <_ZTSN10__cxxabiv119__foreign_exceptionE>:
   235c4:	5f30314e 7878635f 76696261 5f393131     N10__cxxabiv119_
   235d4:	726f665f 6e676965 6378655f 69747065     _foreign_excepti
   235e4:	00456e6f                                onE.

000235e8 <_ZTSSt13bad_exception>:
   235e8:	33317453 5f646162 65637865 6f697470     St13bad_exceptio
   235f8:	0000006e                                n...

000235fc <_ZTSSt9exception>:
   235fc:	65397453 70656378 6e6f6974 00000000     St9exception....

0002360c <_ZTVSt13bad_exception>:
   2360c:	00000000 00023590 000131ad 000131b9     .....5...1...1..
   2361c:	000131b1                                .1..

00023620 <_ZTIN10__cxxabiv120__si_class_type_infoE>:
   23620:	0002365c 0002362c 00023698              \6..,6...6..

0002362c <_ZTSN10__cxxabiv120__si_class_type_infoE>:
   2362c:	5f30314e 7878635f 76696261 5f303231     N10__cxxabiv120_
   2363c:	5f69735f 73616c63 79745f73 695f6570     _si_class_type_i
   2364c:	456f666e 00000000                       nfoE....

00023654 <_ZTVN10__cxxabiv120__si_class_type_infoE>:
   23654:	00000000 00023620 00013381 00013395     .... 6...3...3..
   23664:	000134ad 000134ad 00013569 000134dd     .4...4..i5...4..
   23674:	0001347d 000133ed 000133b1              }4...3...3..

00023680 <_ZTISt9type_info>:
   23680:	000236d0 00023688                       .6...6..

00023688 <_ZTSSt9type_info>:
   23688:	74397453 5f657079 6f666e69 00000000     St9type_info....

00023698 <_ZTIN10__cxxabiv117__class_type_infoE>:
   23698:	0002365c 000236a4 00023680              \6...6...6..

000236a4 <_ZTSN10__cxxabiv117__class_type_infoE>:
   236a4:	5f30314e 7878635f 76696261 5f373131     N10__cxxabiv117_
   236b4:	616c635f 745f7373 5f657079 6f666e69     _class_type_info
   236c4:	00000045                                E...

000236c8 <_ZTVN10__cxxabiv117__class_type_infoE>:
   236c8:	00000000 00023698 00013521 00013535     .....6..!5..55..
   236d8:	000134ad 000134ad 00013569 000134dd     .4...4..i5...4..
   236e8:	00013551 00013595 00013515 6d726574     Q5...5...5..term
   236f8:	74616e69 61632065 64656c6c 63657220     inate called rec
   23708:	69737275 796c6576 0000000a 6d726574     ursively....term
   23718:	74616e69 61632065 64656c6c 74666120     inate called aft
   23728:	74207265 776f7268 20676e69 69206e61     er throwing an i
   23738:	6174736e 2065636e 2720666f 00000000     nstance of '....
   23748:	00000a27 6d726574 74616e69 61632065     '...terminate ca
   23758:	64656c6c 74697720 74756f68 206e6120     lled without an 
   23768:	69746361 65206576 70656378 6e6f6974     active exception
   23778:	0000000a 68772020 29287461 0020203a     ....  what():  .

00023788 <standard_subs>:
   23788:	00000074 00023f6c 00000003 00023f6c     t...l?......l?..
   23798:	00000003 00000000 00000000 00000061     ............a...
   237a8:	00024284 0000000e 00024284 0000000e     .B.......B......
   237b8:	00024294 00000009 00000062 000242a0     .B......b....B..
   237c8:	00000011 000242a0 00000011 000242b4     .....B.......B..
   237d8:	0000000c 00000073 000242c4 0000000b     ....s....B......
   237e8:	000242d0 00000046 000242b4 0000000c     .B..F....B......
   237f8:	00000069 00024318 0000000c 00024328     i....C......(C..
   23808:	00000031 0002435c 0000000d 0000006f     1...\C......o...
   23818:	0002436c 0000000c 0002437c 00000031     lC......|C..1...
   23828:	000243b0 0000000d 00000064 000243c0     .C......d....C..
   23838:	0000000d 000243d0 00000032 00024404     .....C..2....D..
   23848:	0000000e                                ....

0002384c <cplus_demangle_builtin_types>:
   2384c:	00024614 0000000b 00024614 0000000b     .F.......F......
   2385c:	00000000 00024620 00000004 00024628     .... F......(F..
   2386c:	00000007 00000007 00024630 00000004     ........0F......
   2387c:	00024638 00000004 00000000 00024640     8F..........@F..
   2388c:	00000006 00024640 00000006 00000008     ....@F..........
   2389c:	00024648 0000000b 00024648 0000000b     HF......HF......
   238ac:	00000008 00024654 00000005 00024654     ....TF......TF..
   238bc:	00000005 00000008 0002465c 0000000a     ........\F......
   238cc:	0002465c 0000000a 00000008 00024668     \F..........hF..
   238dc:	0000000d 00024668 0000000d 00000000     ....hF..........
   238ec:	00024678 00000003 00024678 00000003     xF......xF......
   238fc:	00000001 0002467c 0000000c 0002468c     ....|F.......F..
   2390c:	00000008 00000002 00000000 00000000     ................
	...
   23928:	00024698 00000004 00024698 00000004     .F.......F......
   23938:	00000003 000246a0 0000000d 000246a0     .....F.......F..
   23948:	0000000d 00000004 000246b0 00000008     .........F......
   23958:	000246b0 00000008 00000000 000246bc     .F...........F..
   23968:	00000011 000246bc 00000011 00000000     .....F..........
	...
   239b4:	000246d0 00000005 000246d0 00000005     .F.......F......
   239c4:	00000000 000246d8 0000000e 000246d8     .....F.......F..
   239d4:	0000000e 00000000 00000000 00000000     ................
	...
   239f0:	000246e8 00000004 000246e8 00000004     .F.......F......
   23a00:	00000009 000246f0 00000007 00024630     .....F......0F..
   23a10:	00000004 00000000 000246f8 00000009     .........F......
   23a20:	00024698 00000004 00000005 00024704     .F...........G..
   23a30:	00000012 00024704 00000012 00000006     .....G..........
   23a40:	00024190 00000003 00024190 00000003     .A.......A......
   23a50:	00000000 00024718 00000009 00024718     .....G.......G..
   23a60:	00000009 00000000 00024724 00000009     ........$G......
   23a70:	00024724 00000009 00000000 00024730     $G..........0G..
   23a80:	0000000a 00024730 0000000a 00000000     ....0G..........
   23a90:	0002473c 00000004 0002473c 00000004     <G......<G......
   23aa0:	00000008 00024744 00000008 00024744     ....DG......DG..
   23ab0:	00000008 00000000 00024750 00000008     ........PG......
   23ac0:	00024750 00000008 00000000 0002475c     PG..........\G..
   23ad0:	00000011 0002475c 00000011 00000000     ....\G..........

00023ae0 <cplus_demangle_operators>:
   23ae0:	00024414 00024418 00000002 00000002     .D...D..........
   23af0:	0002441c 00024420 00000001 00000002     .D.. D..........
   23b00:	00024424 00024248 00000002 00000002     $D..HB..........
   23b10:	0002413c 00024428 00000001 00000001     <A..(D..........
   23b20:	0002442c 00024428 00000001 00000002     ,D..(D..........
   23b30:	00024430 00024434 00000008 00000001     0D..4D..........
   23b40:	00024440 00024434 00000008 00000001     @D..4D..........
   23b50:	00024444 00024448 0000000a 00000002     DD..HD..........
   23b60:	00023f4c 00024454 00000002 00000002     L?..TD..........
   23b70:	00024458 0002445c 00000001 00000002     XD..\D..........
   23b80:	00024460 00024464 00000001 00000001     `D..dD..........
   23b90:	00024468 0002446c 00000002 00000002     hD..lD..........
   23ba0:	00024470 00024474 00000009 00000001     pD..tD..........
   23bb0:	00024480 00024484 0000000c 00000002     .D...D..........
   23bc0:	00024494 00024498 00000001 00000001     .D...D..........
   23bd0:	0002449c 000244a0 00000007 00000001     .D...D..........
   23be0:	000244a8 000244ac 00000002 00000002     .D...D..........
   23bf0:	00023f50 000245dc 00000001 00000002     P?...E..........
   23c00:	000244b0 000244b4 00000001 00000002     .D...D..........
   23c10:	000244b8 000244bc 00000002 00000002     .D...D..........
   23c20:	000244c0 000244c4 00000001 00000002     .D...D..........
   23c30:	000244c8 000244cc 00000002 00000002     .D...D..........
   23c40:	000244d0 00024190 00000003 00000003     .D...A..........
   23c50:	000244d4 00024190 00000003 00000003     .D...A..........
   23c60:	000244d8 00024190 00000003 00000002     .D...A..........
   23c70:	000244dc 00024190 00000003 00000002     .D...A..........
   23c80:	000244e0 000244e4 00000002 00000002     .D...D..........
   23c90:	00024140 00023f94 00000002 00000001     @A...?..........
   23ca0:	000244e8 00024358 00000001 00000002     .D..XC..........
   23cb0:	00024148 00023fb4 00000002 00000002     HA...?..........
   23cc0:	000244ec 000244f0 00000003 00000002     .D...D..........
   23cd0:	00024644 000244f4 00000002 00000002     DF...D..........
   23ce0:	00023f88 000244f8 0000000b 00000001     .?...D..........
   23cf0:	00024504 00024508 00000002 00000002     .E...E..........
   23d00:	0002450c 00024510 00000001 00000002     .E...E..........
   23d10:	00024514 00024518 00000002 00000002     .E...E..........
   23d20:	0002451c 00024520 00000002 00000002     .E.. E..........
   23d30:	00024524 00024528 00000001 00000002     $E..(E..........
   23d40:	0002452c 00024498 00000001 00000002     ,E...D..........
   23d50:	00024530 00024534 00000002 00000001     0E..4E..........
   23d60:	00024538 0002453c 00000005 00000003     8E..<E..........
   23d70:	00024544 00024548 00000002 00000002     DE..HE..........
   23d80:	00024714 00024528 00000001 00000001     .G..(E..........
   23d90:	0002454c 00024550 00000001 00000001     LE..PE..........
   23da0:	00024554 00024558 00000003 00000003     TE..XE..........
   23db0:	0002455c 00024560 00000002 00000002     \E..`E..........
   23dc0:	00024564 00024568 00000002 00000002     dE..hE..........
   23dd0:	00024290 0002456c 00000001 00000002     .B..lE..........
   23de0:	00024570 00024574 00000002 00000002     pE..tE..........
   23df0:	00024578 0002457c 00000001 00000002     xE..|E..........
   23e00:	00024580 00024584 00000003 00000002     .E...E..........
   23e10:	00024588 0002458c 00000002 00000001     .E...E..........
   23e20:	00024590 0002457c 00000001 00000001     .E..|E..........
   23e30:	00023f54 00024594 00000002 00000002     T?...E..........
   23e40:	00023f58 00024598 00000001 00000003     X?...E..........
   23e50:	0002459c 000245a0 00000002 00000002     .E...E..........
   23e60:	000245a4 000245a8 00000003 00000002     .E...E..........
   23e70:	000245ac 000245b0 00000010 00000002     .E...E..........
   23e80:	000245c4 000245c8 00000001 00000002     .E...E..........
   23e90:	000245cc 000245d0 00000002 00000002     .E...E..........
   23ea0:	00023f48 000245d4 00000009 00000001     H?...E..........
   23eb0:	00024210 000245d4 00000009 00000001     .B...E..........
   23ec0:	000245e0 000245e4 0000000b 00000002     .E...E..........
   23ed0:	00024450 000245f0 00000007 00000001     PD...E..........
   23ee0:	000245f8 000245f0 00000007 00000001     .E...E..........
   23ef0:	000245fc 00024600 00000005 00000000     .E...F..........
   23f00:	00024608 0002460c 00000006 00000001     .F...F..........
	...
   23f20:	4f4c475f 5f4c4142 00000000 6f6e6128     _GLOBAL_....(ano
   23f30:	6f6d796e 6e207375 73656d61 65636170     nymous namespace
   23f40:	00000029 00006425 00005073 00006c63     )...%d..sP..cl..
   23f50:	00007464 00007470 00007571 69727473     dt..pt..qu..stri
   23f60:	6c20676e 72657469 00006c61 00647473     ng literal..std.
   23f70:	6f747561 00000000 6c636564 65707974     auto....decltype
   23f80:	74756128 0000296f 0000696c 6962615b     (auto)..li..[abi
   23f90:	0000003a 00003a3a 6665647b 746c7561     :...::..{default
   23fa0:	67726120 00000023 003a3a7d 7272414a      arg#...}::.JArr
   23fb0:	00007961 00005d5b 6f747561 0000003a     ay..[]..auto:...
   23fc0:	62617476 6620656c 0020726f 20545456     vtable for .VTT 
   23fd0:	20726f66 00000000 736e6f63 63757274     for ....construc
   23fe0:	6e6f6974 61747620 20656c62 20726f66     tion vtable for 
   23ff0:	00000000 2d6e692d 00000000 65707974     ....-in-....type
   24000:	6f666e69 726f6620 00000020 65707974     info for ...type
   24010:	6f666e69 6d616e20 6f662065 00002072     info name for ..
   24020:	65707974 6f666e69 206e6620 20726f66     typeinfo fn for 
   24030:	00000000 2d6e6f6e 74726976 206c6175     ....non-virtual 
   24040:	6e756874 6f74206b 00000020 61766f63     thunk to ...cova
   24050:	6e616972 65722074 6e727574 75687420     riant return thu
   24060:	74206b6e 0000206f 6176616a 616c4320     nk to ..java Cla
   24070:	66207373 0020726f 72617567 61762064     ss for .guard va
   24080:	62616972 6620656c 0020726f 20534c54     riable for .TLS 
   24090:	74696e69 6e756620 6f697463 6f66206e     init function fo
   240a0:	00002072 20534c54 70617277 20726570     r ..TLS wrapper 
   240b0:	636e7566 6e6f6974 726f6620 00000020     function for ...
   240c0:	65666572 636e6572 65742065 726f706d     reference tempor
   240d0:	20797261 00000023 64646968 61206e65     ary #...hidden a
   240e0:	7361696c 726f6620 00000020 2d6e6f6e     lias for ...non-
   240f0:	6e617274 74636173 206e6f69 6e6f6c63     transaction clon
   24100:	6f662065 00002072 7461535f 00000020     e for .._Sat ...
   24110:	6363415f 00006d75 6172465f 00007463     _Accum.._Fract..
   24120:	0000202c 7265706f 726f7461 00000000     , ..operator....
   24130:	7265706f 726f7461 00000020 00006461     operator ...ad..
   24140:	00007367 0000283e 00007869 00203a20     gs..>(..ix.. : .
   24150:	2077656e 00000000 00006c75 00006c6c     new ....ul..ll..
   24160:	006c6c75 736c6166 00000065 65757274     ull.false...true
   24170:	00000000 6176616a 73657220 6372756f     ....java resourc
   24180:	00002065 6c636564 65707974 00002820     e ..decltype (..
   24190:	002e2e2e 73696874 00000000 7261707b     ....this....{par
   241a0:	0000236d 626f6c67 63206c61 74736e6f     m#..global const
   241b0:	74637572 2073726f 6579656b 6f742064     ructors keyed to
   241c0:	00000020 626f6c67 64206c61 72747365      ...global destr
   241d0:	6f746375 6b207372 64657965 206f7420     uctors keyed to 
   241e0:	00000000 6d616c7b 28616462 00000000     ....{lambda(....
   241f0:	00002329 6e6e757b 64656d61 70797420     )#..{unnamed typ
   24200:	00002365 6c635b20 20656e6f 00000000     e#.. [clone ....
   24210:	00005a73 73657220 63697274 00000074     sZ.. restrict...
   24220:	6c6f7620 6c697461 00000065 6e6f6320      volatile... con
   24230:	00007473 61727420 6361736e 6e6f6974     st.. transaction
   24240:	6661735f 00000065 00002626 706d6f63     _safe...&&..comp
   24250:	2078656c 00000000 67616d69 72616e69     lex ....imaginar
   24260:	00002079 002a3a3a 765f5f20 6f746365     y ..::*. __vecto
   24270:	00002872 2e2e2e28 00000000 292e2e2e     r(..(..........)
   24280:	00000000 3a647473 6c6c613a 7461636f     ....std::allocat
   24290:	0000726f 6f6c6c61 6f746163 00000072     or..allocator...
   242a0:	3a647473 7361623a 735f6369 6e697274     std::basic_strin
   242b0:	00000067 69736162 74735f63 676e6972     g...basic_string
   242c0:	00000000 3a647473 7274733a 00676e69     ....std::string.
   242d0:	3a647473 7361623a 735f6369 6e697274     std::basic_strin
   242e0:	68633c67 202c7261 3a647473 6168633a     g<char, std::cha
   242f0:	72745f72 73746961 6168633c 202c3e72     r_traits<char>, 
   24300:	3a647473 6c6c613a 7461636f 633c726f     std::allocator<c
   24310:	3e726168 00003e20 3a647473 7473693a     har> >..std::ist
   24320:	6d616572 00000000 3a647473 7361623a     ream....std::bas
   24330:	695f6369 65727473 633c6d61 2c726168     ic_istream<char,
   24340:	64747320 68633a3a 745f7261 74696172      std::char_trait
   24350:	68633c73 203e7261 0000003e 69736162     s<char> >...basi
   24360:	73695f63 61657274 0000006d 3a647473     c_istream...std:
   24370:	74736f3a 6d616572 00000000 3a647473     :ostream....std:
   24380:	7361623a 6f5f6369 65727473 633c6d61     :basic_ostream<c
   24390:	2c726168 64747320 68633a3a 745f7261     har, std::char_t
   243a0:	74696172 68633c73 203e7261 0000003e     raits<char> >...
   243b0:	69736162 736f5f63 61657274 0000006d     basic_ostream...
   243c0:	3a647473 736f693a 61657274 0000006d     std::iostream...
   243d0:	3a647473 7361623a 695f6369 7274736f     std::basic_iostr
   243e0:	3c6d6165 72616863 7473202c 633a3a64     eam<char, std::c
   243f0:	5f726168 69617274 633c7374 3e726168     har_traits<char>
   24400:	00003e20 69736162 6f695f63 65727473      >..basic_iostre
   24410:	00006d61 00004e61 00003d26 00005361     am..aN..&=..aS..
   24420:	0000003d 00006161 00000026 00006e61     =...aa..&...an..
   24430:	00007461 67696c61 20666f6e 00000000     at..alignof ....
   24440:	00007a61 00006363 736e6f63 61635f74     az..cc..const_ca
   24450:	00007473 00002928 00006d63 0000002c     st..()..cm..,...
   24460:	00006f63 0000007e 00005664 00003d2f     co..~...dV../=..
   24470:	00006164 656c6564 5d5b6574 00000020     da..delete[] ...
   24480:	00006364 616e7964 5f63696d 74736163     dc..dynamic_cast
   24490:	00000000 00006564 0000002a 00006c64     ....de..*...dl..
   244a0:	656c6564 00206574 00007364 00002a2e     delete .ds...*..
   244b0:	00007664 0000002f 00004f65 00003d5e     dv../...eO..^=..
   244c0:	00006f65 0000005e 00007165 00003d3d     eo..^...eq..==..
   244d0:	00004c66 00005266 00006c66 00007266     fL..fR..fl..fr..
   244e0:	00006567 00003d3e 00007467 0000536c     ge..>=..gt..lS..
   244f0:	003d3c3c 00003d3c 7265706f 726f7461     <<=.<=..operator
   24500:	00202222 0000736c 00003c3c 0000746c     "" .ls..<<..lt..
   24510:	0000003c 0000496d 00003d2d 00004c6d     <...mI..-=..mL..
   24520:	00003d2a 0000696d 0000002d 00006c6d     *=..mi..-...ml..
   24530:	00006d6d 00002d2d 0000616e 5b77656e     mm..--..na..new[
   24540:	0000005d 0000656e 00003d21 0000746e     ]...ne..!=..nt..
   24550:	00000021 0000776e 0077656e 0000526f     !...nw..new.oR..
   24560:	00003d7c 00006f6f 00007c7c 0000007c     |=..oo..||..|...
   24570:	00004c70 00003d2b 00006c70 0000002b     pL..+=..pl..+...
   24580:	00006d70 002a3e2d 00007070 00002b2b     pm..->*.pp..++..
   24590:	00007370 00003e2d 0000003f 00004d72     ps..->..?...rM..
   245a0:	00003d25 00005372 003d3e3e 00006372     %=..rS..>>=.rc..
   245b0:	6e696572 70726574 5f746572 74736163     reinterpret_cast
   245c0:	00000000 00006d72 00000025 00007372     ....rm..%...rs..
   245d0:	00003e3e 657a6973 2e2e666f 0000002e     >>..sizeof......
   245e0:	00006373 74617473 635f6369 00747361     sc..static_cast.
   245f0:	657a6973 0020666f 00007a73 00007274     sizeof .sz..tr..
   24600:	6f726874 00000077 00007774 6f726874     throw...tw..thro
   24610:	00002077 6e676973 63206465 00726168     w ..signed char.
   24620:	6c6f6f62 00000000 6c6f6f62 006e6165     bool....boolean.
   24630:	72616863 00000000 65747962 00000000     char....byte....
   24640:	62756f64 0000656c 676e6f6c 756f6420     double..long dou
   24650:	00656c62 616f6c66 00000074 6c665f5f     ble.float...__fl
   24660:	3174616f 00003832 69736e75 64656e67     oat128..unsigned
   24670:	61686320 00000072 00746e69 69736e75      char...int.unsi
   24680:	64656e67 746e6920 00000000 69736e75     gned int....unsi
   24690:	64656e67 00000000 676e6f6c 00000000     gned....long....
   246a0:	69736e75 64656e67 6e6f6c20 00000067     unsigned long...
   246b0:	6e695f5f 38323174 00000000 69736e75     __int128....unsi
   246c0:	64656e67 695f5f20 3231746e 00000038     gned __int128...
   246d0:	726f6873 00000074 69736e75 64656e67     short...unsigned
   246e0:	6f687320 00007472 64696f76 00000000      short..void....
   246f0:	61686377 00745f72 676e6f6c 6e6f6c20     wchar_t.long lon
   24700:	00000067 69736e75 64656e67 6e6f6c20     g...unsigned lon
   24710:	6f6c2067 0000676e 69636564 336c616d     g long..decimal3
   24720:	00000032 69636564 366c616d 00000034     2...decimal64...
   24730:	69636564 316c616d 00003832 666c6168     decimal128..half
   24740:	00000000 72616863 745f3631 00000000     ....char16_t....
   24750:	72616863 745f3233 00000000 6c636564     char32_t....decl
   24760:	65707974 6c756e28 7274706c 00000029     type(nullptr)...
   24770:	66776f70 00000000 74727173 00000066     powf....sqrtf...

00024780 <TWO52>:
   24780:	00000000 43300000 00000000 c3300000     ......0C......0.

00024790 <_global_impure_ptr>:
   24790:	20000108 00000043 49534f50 00000058     ... C...POSIX...
   247a0:	00464e49 00666e69 004e414e 006e616e     INF.inf.NAN.nan.
   247b0:	33323130 37363534 42413938 46454443     0123456789ABCDEF
   247c0:	00000000 33323130 37363534 62613938     ....0123456789ab
   247d0:	66656463 00000000 6c756e28 0000296c     cdef....(null)..
   247e0:	00000030                                0...

000247e4 <blanks.8346>:
   247e4:	20202020 20202020 20202020 20202020                     

000247f4 <zeroes.8347>:
   247f4:	30303030 30303030 30303030 30303030     0000000000000000
   24804:	33323130 37363534 62613938 66656463     0123456789abcdef
   24814:	6a696867 6e6d6c6b 7271706f 76757473     ghijklmnopqrstuv
   24824:	7a797877 00000000                       wxyz....

0002482c <_ctype_>:
   2482c:	20202000 20202020 28282020 20282828     .         ((((( 
   2483c:	20202020 20202020 20202020 20202020                     
   2484c:	10108820 10101010 10101010 10101010      ...............
   2485c:	04040410 04040404 10040404 10101010     ................
   2486c:	41411010 41414141 01010101 01010101     ..AAAAAA........
   2487c:	01010101 01010101 01010101 10101010     ................
   2488c:	42421010 42424242 02020202 02020202     ..BBBBBB........
   2489c:	02020202 02020202 02020202 10101010     ................
   248ac:	00000020 00000000 00000000 00000000      ...............
	...
   24930:	69666e49 7974696e 00000000 004e614e     Infinity....NaN.

00024940 <__mprec_bigtens>:
   24940:	37e08000 4341c379 b5056e17 4693b8b5     ...7y.AC.n.....F
   24950:	e93ff9f5 4d384f03 f9301d32 5a827748     ..?..O8M2.0.Hw.Z
   24960:	7f73bf3c 75154fdd                       <.s..O.u

00024968 <__mprec_tens>:
   24968:	00000000 3ff00000 00000000 40240000     .......?......$@
   24978:	00000000 40590000 00000000 408f4000     ......Y@.....@.@
   24988:	00000000 40c38800 00000000 40f86a00     .......@.....j.@
   24998:	00000000 412e8480 00000000 416312d0     .......A......cA
   249a8:	00000000 4197d784 00000000 41cdcd65     .......A....e..A
   249b8:	20000000 4202a05f e8000000 42374876     ... _..B....vH7B
   249c8:	a2000000 426d1a94 e5400000 42a2309c     ......mB..@..0.B
   249d8:	1e900000 42d6bcc4 26340000 430c6bf5     .......B..4&.k.C
   249e8:	37e08000 4341c379 85d8a000 43763457     ...7y.AC....W4vC
   249f8:	674ec800 43abc16d 60913d00 43e158e4     ..Ngm..C.=.`.X.C
   24a08:	78b58c40 4415af1d d6e2ef50 444b1ae4     @..x...DP.....KD
   24a18:	064dd592 4480f0cf c7e14af6 44b52d02     ..M....D.J...-.D
   24a28:	79d99db4 44ea7843                       ...yCx.D

00024a30 <p05.7178>:
   24a30:	00000005 00000019 0000007d              ........}...

00024a3c <__EH_FRAME_BEGIN__>:
   24a3c:	00000000                                ....
